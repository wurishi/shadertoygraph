{"ver":"0.1","info":{"id":"XlXSWB","date":"1439235946","viewed":4667,"name":"[SIG15] The Wiseau Puppet Show","username":"fernozzle","description":"A puppet rendition of a true American classic.\nYOU'RE TEARING ME APART, LISA","likes":50,"published":1,"flags":8,"usePreview":1,"tags":["sig15"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define ENABLE_JOHNNY\n#define ENABLE_LISA\n// | Pretty big impact on performance! Disable if too slow or speech too intelligible\n// V\n#define ENABLE_CLOSED_CAPTIONS\n\n#define PI     3.141592\n#define TWO_PI 6.283185\n\n#define MAX_ALPHA .9\n#define NORMAL_EPSILON .001\n\n// Compensate for distorted distance fields\n#define STEP_SCALE 0.8\n\n#define LOOP_DURATION 30.\n\n// Globals!\nfloat time_remapped;\nvec3 johnny_pos = vec3(0.), johnny_dir = vec3(1.);\nvec3   lisa_pos = vec3(0.),   lisa_dir = vec3(1.);\n\nvec2 cursor_pos = vec2(4.);\nfloat line_appear_time = 0.;\nfloat new_lat = 1000.;\n#define MAX_GLYPHS 35\nvec4 glyphs[MAX_GLYPHS];\nfloat glyph_count = 0.;\n\n//#define GL(\n\nvec4 _sp = vec4(0);\nvec4 _A = vec4(0xc3c3c3,0xffffc3,0xe7c3c3,0x183c7e);\nvec4 _B = vec4(0xe37f3f,0x7fe3c3,0xc3e37f,0x3f7fe3);\nvec4 _C = vec4(0xe77e3c,0x303c3,0xc30303,0x3c7ee7);\nvec4 _D = vec4(0xe37f3f,0xc3c3c3,0xc3c3c3,0x3f7fe3);\nvec4 _E = vec4(0x3ffff,0x3f0303,0x3033f,0xffff03);\nvec4 _F = vec4(0x30303,0x3f0303,0x3033f,0xffff03);\nvec4 _G = vec4(0xe77e3c,0xf3c3c3,0xc303f3,0x3c7ee7);\nvec4 _H = vec4(0xc3c3c3,0xffc3c3,0xc3c3ff,0xc3c3c3);\nvec4 _I = vec4(0x187e7e,0x181818,0x181818,0x7e7e18);\nvec4 _J = vec4(0x637f3e,0x606063,0x606060,0xf0f060);\nvec4 _K = vec4(0x73e3c3,0xf1f3b,0x3b1f0f,0xc3e373);\nvec4 _L = vec4(0x3ffff,0x30303,0x30303,0x30303);\nvec4 _M = vec4(0xc3c3c3,0xdbc3c3,0xffffdb,0xc3c3e7);\nvec4 _N = vec4(0xc3c3c3,0xf3e3c3,0xcfdffb,0xc3c3c7);\nvec4 _O = vec4(0xe77e3c,0xc3c3c3,0xc3c3c3,0x3c7ee7);\nvec4 _P = vec4(0x30303,0x3f0303,0xc3e37f,0x3f7fe3);\nvec4 _Q = vec4(0x77fedc,0xc3dbfb,0xc3c3c3,0x3c7ee7);\nvec4 _R = vec4(0x73e3c3,0x3f1f3b,0xc3e37f,0x3f7fe3);\nvec4 _S = vec4(0xe77e3c,0x7ce0c3,0xc3073e,0x3c7ee7);\nvec4 _T = vec4(0x181818,0x181818,0x181818,0xffff18);\nvec4 _U = vec4(0xe77e3c,0xc3c3c3,0xc3c3c3,0xc3c3c3);\nvec4 _V = vec4(0x7e3c18,0xc3c3e7,0xc3c3c3,0xc3c3c3);\nvec4 _W = vec4(0xff7e24,0xdbdbdb,0xc3c3db,0xc3c3c3);\nvec4 _X = vec4(0xc3c3c3,0x3c7ee7,0xe77e3c,0xc3c3c3);\nvec4 _Y = vec4(0x181818,0x7e3c18,0xc3c3e7,0xc3c3c3);\nvec4 _Z = vec4(0x3ffff,0x1c0e07,0xe07038,0xffffc0);\nvec4 _gt = vec4(0x1c0e06,0xe07038,0x3870e0,0x60e1c);\nvec4 _ap = vec4(0x0,0x0,0x60000,0x60606);\nvec4 _co = vec4(0xc0e06,0xc,0x0,0x0);\nvec2 glyph_spacing = vec2(10., 14.);\n\nfloat get_bit(float data, float bit) {\n    return step(1., mod(data / pow(2., bit), 2.));\n}\n\nvec4 glyph(vec4 data, float glyph_number, float scale, vec2 fragCoord) {\n    fragCoord /= scale;\n    fragCoord.x -= glyph_number * glyph_spacing.x;\n    fragCoord -= vec2(8.);\n    \n    float transition_fac = smoothstep(new_lat - .1, new_lat, time_remapped);\n    float alpha = step(abs(fragCoord.x - 4.), 6.) * step(fragCoord.y, 14.) * step(transition_fac * glyph_spacing.y - 2., fragCoord.y);;\n    fragCoord.y -= transition_fac * glyph_spacing.y;\n    fragCoord = floor(fragCoord);\n    \n    float bit = fragCoord.x + fragCoord.y * 8.;\n    \n    float bright;\n    bright =  get_bit(data.x, bit      );\n    bright += get_bit(data.y, bit - 24.);\n    bright += get_bit(data.z, bit - 48.);\n    bright += get_bit(data.w, bit - 72.);\n    bright *= 1. - step(8., fragCoord.x);\n    bright *= step(0., fragCoord.x);\n    \n    return vec4(vec3(bright), alpha);\n}\n\nvoid draw_glyphs(vec2 fragCoord, float scale, float a, inout vec3 col) {\n    vec3 total = vec3(0.);\n    float total_alpha = 0.;\n    for(int i = 0; i < MAX_GLYPHS; i++) {\n        float i_float = float(i);\n        vec4 glyphcol = glyph(glyphs[i], i_float, scale, fragCoord);\n        float alpha = step(line_appear_time + .05 * i_float, time_remapped);\n        alpha *= glyphcol.a;\n        alpha *= step(i_float, glyph_count - 1.);\n        total = mix(total, glyphcol.rgb, alpha);\n        total_alpha = max(total_alpha, alpha);\n    }\n    col = mix(col, total, total_alpha * a);\n}\n\nvec2 normalize_pixel_coords(vec2 pixel_coords) {\n    return (pixel_coords * 2. - iResolution.xy) / iResolution.x;\n}\n\nfloat box_map(vec3 p, vec3 size, float radius) {\n    size *= .5;\n    vec3 temp = clamp(p, -size, size);\n    return distance(p, temp) - radius;\n}\nfloat sphere_map(vec3 p, vec3 center, float radius) {\n    return distance(p, center) - radius;\n}\n\nfloat walls_map(vec3 p, vec2 size) {\n    p.xy = abs(p.xy) - size * .5;\n    return -max(p.x, p.y);\n}\nfloat pillar_map(vec3 p, float radius) {\n    return length(p.xy) - radius;\n}\nfloat shelf_map(vec3 p) {\n    p.xy = mix(p.xy, vec2(-p.y, p.x), step(p.y, -p.x));\n    \n    float shelf_spacing = .33;\n    float shelf_height = floor(p.z / shelf_spacing + .5) * shelf_spacing;\n    \n    float shelf_radius = .48 - .2 * p.z;\n    float l = length(p.xy);\n    vec3 shelf_point = vec3((p.xy / l) * min(l, shelf_radius), shelf_height);\n    float shelf_distance = distance(p, shelf_point);\n    \n    float support_distance = distance(p.xy, vec2(clamp(p.x, shelf_radius - .04, shelf_radius), 0.));\n    float back_distance    = distance(p.xy, vec2(min(p.x, .04), 0.));\n    \n    return min(shelf_distance, min(support_distance, back_distance)) - .02;\n}\nfloat couch_map(vec3 p) {\n    \n    // Seat\n    vec2 seat_near_center = vec2(clamp(p.x, -.75, .75), -.0);\n    seat_near_center.y += .2 / (pow(p.x, 2.) * 2. + 1.);\n    \n    vec2 p_rel = p.xy - seat_near_center;\n    float l = length(p_rel);\n    vec2 seat_edge = seat_near_center + (p_rel / l) * min(l, .42);\n    float seat_distance = distance(p, vec3(seat_edge, min(p.z, .33 - l*l*.3))) - .02;\n    \n    // Back rest\n    vec3 p_transf = p;\n    p_transf.y += pow(p_transf.x, 2.) * .15;\n    p_transf.x *= 1. - p_transf.y * .2;\n    \n    vec3 back_near_center = vec3(clamp(p_transf.x, -.86, .86), .6 + .15 * p_transf.z, min(p_transf.z, .72));\n    p_rel = p_transf.yz - back_near_center.yz;\n    l = length(p_rel);\n    vec3 back_edge = vec3(back_near_center.x, back_near_center.yz + (p_rel / l) * min(l, .11));\n    float back_distance = distance(p_transf, back_edge) - .03;\n    \n    // Back rest wrinkles\n    \n    p.x += .2;\n    float wrinkle_skew = p.z - .6*p.x*p.x/p.z;\n    float wrinkle = (sin((wrinkle_skew) * 60.) + 1.) * .005;\n    wrinkle *= 1. / (pow(wrinkle_skew - .5, 2.) * 8. + 1.);\n    wrinkle /= (pow(p.x, 4.)*5. + 1.);\n    wrinkle *= smoothstep(.85, .7, p.z);\n    wrinkle = smoothstep(-.05, .1, wrinkle) * .06;\n    back_distance += wrinkle;\n    \n    return min(seat_distance, back_distance);\n}\nfloat curtain_map(vec3 p) {\n    vec3 temp = vec3(clamp(p.x, -.6, .6), 0., p.z);\n    float dist = distance(p, temp) - .2;\n    dist += sin(p.x * 20. + sin(p.x * 6.2) * (5. + sin(p.z * 2.) * 3.)) * .03;\n    return dist;\n}\n// These two are by the one and only iq\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n    \nfloat person_map(vec3 p, float lisaness, out vec4 mat) {\n    p.x = abs(p.x); // Symmetrical\n    \n    // Head\n    float dist = distance(p, vec3(.0, .01, .0)) - .08;\n    dist = smin(dist, distance(p, vec3(.0, .06, -.05)) - .01, .08);\n    float jaw_dist = sdCapsule(p, vec3(.04, .02, -.10), vec3(0., .08, -.11), .005);\n    dist = smin(dist, jaw_dist, .1);\n    float cheek_dist = distance(p, vec3(.04, .04, -.04)) - .01;\n    dist = smin(cheek_dist, dist, .05);\n    float nose_dist = sdCapsule(p, vec3(.0, .09, -.03), vec3(0., .11, -.06), .002);\n    dist = smin(dist, nose_dist, .04);\n    \n    float neck_dist = sdCapsule(p, vec3(.0, .0, -.06), vec3(.0, .0, -.20), .04);\n    dist = smin(dist, neck_dist, .02);\n    \n    float mult = 3.;\n    mat = vec4(1. * mult, .77 * mult, .65 * mult, 1.7);\n    \n    float eye_dist = length((p - vec3(.025, .10, -.02)) * vec3(1., 1., .8)) - .005;\n    mat = mix(mat, vec4(0., 0., 0., 0.5), step(eye_dist, dist));\n    dist = min(dist, eye_dist);\n    \n    float body_top = -.14;\n    float body_radius = (p.z - body_top) * -.15 + .045;\n    float l = length(p.xy);\n    vec3 body_near = vec3(p.xy / l * min(l, body_radius), clamp(p.z, -.45, body_top));\n    float body_dist = distance(p, body_near) - .005;\n    body_dist = smin(body_dist, sdCapsule(p, vec3(.0, .0, -.15), vec3(.2, .0, -.3), .04), .02);\n    \n    vec4 body_mat = mix(vec4(.30, .25, .21, 2.9), vec4(2., .5, .6, 2.9), lisaness);\n    mat = mix(mat, body_mat, step(body_dist, dist));\n    dist = min(dist, body_dist);\n    \n    float stick_dist = distance(p, vec3(0., 0., clamp(p.z, mix(-.9, -1.4, lisaness), -.4))) - .02;\n    mat = mix(mat, vec4(.9, .52, .3, .6), step(stick_dist, dist));\n    dist = min(dist, stick_dist);\n\n    return dist;\n}\nvec3 get_pos(vec3 p, vec3 dir_y) {\n    vec3 dir_x = normalize(cross(dir_y, vec3(0., 0., 1.)));\n    vec3 dir_z = normalize(cross(dir_x, dir_y));\n    return vec3(dot(p, dir_x), dot(p, dir_y), dot(p, dir_z));\n}\nfloat anim_fac(float time, float start, float len) {\n    return smoothstep(start, start + len, time);\n}\n\n// Material data: 3 channels & index\n//   Index [0, 1) = smoothness; RGB = albedo\nfloat map(in vec3 p, out vec4 mat) {\n    float dist = walls_map(p - vec3(-.55, -.6, 0.), vec2(5.5, 5.8));\n    mat = vec4(.77, .15, .16, 0.8);\n    \n    // Floor\n    float new_dist;\n    new_dist = p.z;\n    mat = mix(mat, vec4(.5, .27, .14, 0.4), step(new_dist, dist));\n    dist = min(dist, new_dist);\n    \n    \n    // Pillars\n    new_dist = min(pillar_map(p - vec3(.7, 2.3, 0.), .12), pillar_map(p - vec3(-2.14, 2.3, 0.), .12));\n    mat = mix(mat, vec4(1.1, 1., .85, 0.5), step(new_dist, dist));\n    dist = min(dist, new_dist);\n\n    // Shelf\n    new_dist = shelf_map(p - vec3(-3.3, 2.3, 0.));\n    mat = mix(mat, vec4(0.2, 0.2, 0.2, 1.8), step(new_dist, dist));\n    dist = min(dist, new_dist);\n    \n    // Door\n    new_dist = box_map(p - vec3(-3.3, 1.3, 1.09), vec3(.05, .98, 2.16), .01);\n    mat = mix(mat, vec4(.9, .8, .65, 0.5), step(new_dist, dist));\n    dist = min(dist, new_dist);\n    \n    // Painting\n    new_dist = box_map(p - vec3(-3.3, -.4, 1.5), vec3(.05, .8, .97), .01);\n    mat = mix(mat, vec4(.9, .8, .65, 0.8), step(new_dist, dist));\n    dist = min(dist, new_dist);\n    \n    // Couch\n    new_dist = couch_map(p - vec3(.3, 1.0, 0.));\n    mat = mix(mat, vec4(.76, .52, .33, .9), step(new_dist, dist));\n    dist = min(dist, new_dist);\n\n    // Curtains\n    new_dist = curtain_map(p - vec3(-.8, 2.3, 1.5));\n    mat = mix(mat, vec4(1., 1., 1., 3.), step(new_dist, dist));\n    dist = min(dist, new_dist);\n\n    // Johnny\n    #ifdef ENABLE_JOHNNY\n    vec4 new_mat = vec4(0.);\n    new_dist = person_map(get_pos(p - johnny_pos, normalize(johnny_dir)), 0., new_mat);\n    mat = mix(mat, new_mat, step(new_dist, dist));\n    dist = min(dist, new_dist);\n    #endif\n    \n    // Lisa\n    #ifdef ENABLE_LISA\n    new_dist = person_map(get_pos(p - lisa_pos, normalize(lisa_dir)), 1., new_mat);\n    mat = mix(mat, new_mat, step(new_dist, dist));\n    dist = min(dist, new_dist);\n    #endif\n    \n    return dist;\n}\n\nvec3 map_normal(vec3 p, float map_dist, float epsilon) {\n    vec4 mat;\n    vec2 offset = vec2(epsilon, 0.);\n    vec3 diff = vec3(\n        map(p + offset.xyy, mat),\n        map(p + offset.yxy, mat),\n        map(p + offset.yyx, mat)\n    ) - map_dist;\n    return normalize(diff);\n}\n\nfloat coc_kernel(float width, float dist) {\n    return smoothstep(width, -width, dist);\n}\n\nfloat soft_shadow(vec3 p, vec3 dir, float softness, float start_len) {\n    float brightness = 1.;\n    float len = start_len;\n    vec4 mat;\n    for (int i = 0; i < 10; i++) {\n        float map_dist = map(p + dir * len, mat);\n        float coc2 = len * softness;\n        brightness *= 1. - coc_kernel(coc2, map_dist);\n        len += map_dist * STEP_SCALE;\n    }\n    return clamp(brightness, 0., 1.);\n}\n\nfloat ao(vec3 p, vec3 normal) {\n    float ao_size = .5;\n    float brightness = 1.;\n    float len = .05;\n    vec4 mat;\n    for (int i = 0; i < 3; i++) {\n        float map_dist = map(p + normal * len, mat);\n        brightness *= clamp(map_dist / len + len * ao_size, 0., 1.);\n        len += map_dist;\n    }\n    return pow(brightness, .3);\n}\n\nvec3 shade_standard(vec3 albedo, float roughness, vec3 normal, vec3 light_dir, vec3 ray_dir) {\n    \n    float F0 = .5;\n    float diffuse_specular_mix = .3;\n    \n    float nl = dot(normal, light_dir);\n    float nv = dot(normal, -ray_dir);\n    \n    vec3 haf = normalize(light_dir - ray_dir);\n    float nh = dot(normal, haf); \n    float vh = dot(-ray_dir, haf);\n\n    vec3 diffuse = albedo*nl;\n\n    // Cook-Torrance\n    float a = roughness * roughness;\n    float a2 = a * a;\n    float dn = nh * nh * (a2 - 1.) + 1.;\n    float D = a2 / (PI * dn * dn);\n\n    float k = pow(roughness + 1., 2.0) / 8.;\n    float nvc = max(nv, 0.);\n    float g1v = nvc / (nvc * (1. - k) + k);\n    float g1l = nl  / (nl  * (1. - k) + k);\n    float G = g1l * g1v;\n\n    float F = F0 + (1. - F0) * exp2((-5.55473 * vh - 6.98316) * vh);\n\n    float specular = (D * F * G) / (4. /* * nl */ * nv);\n\n    return mix(vec3(specular), diffuse, diffuse_specular_mix) * step(0., nl);\n}\n\nfloat length_pow(vec3 d, float p) {\n    return pow(pow(d.x, p) + pow(d.y, p) + pow(d.z, p), 1. / p);\n}\n\nvec3 window_light_pos = vec3(-1., 1.8, 1.2);\nvec3 light_standard(vec3 p, vec3 albedo, float roughness, vec3 normal, vec3 ray_dir, out float shadow) {\n    vec3 surface_color = vec3(0.);\n    vec3 light_pos;\n\n    light_pos = window_light_pos;\n    vec3 light_dir = normalize(light_pos - p);\n    vec3 light_intensity;\n    shadow = soft_shadow(p, light_dir, .1, .1);\n    light_intensity = shade_standard(albedo, roughness, normal, light_dir, ray_dir) * shadow;\n    surface_color += light_intensity * vec3(0.85, 0.8, 0.9) * .8;\n\n    light_pos = vec3(-3., -.57, 1.6);\n    light_dir = normalize(light_pos - p);\n    light_intensity = shade_standard(albedo, roughness, normal, light_dir, ray_dir);\n    surface_color += light_intensity * vec3(.4, .6, .8) * .1;\n\n    light_pos = vec3(2., -1.17, 1.25);\n    light_dir = normalize(light_pos - p);\n    light_intensity = shade_standard(albedo, roughness, normal, light_dir, ray_dir);\n    surface_color += light_intensity * vec3(1., 0.7, 0.5) * .4;\n    \n    return surface_color;\n}\n\n// Now branchless!\nvec3 color_at(vec3 p, vec3 ray_dir, vec3 normal, vec4 mat) {\n    \n    // Standard shading\n    float shadow = 1.;\n    vec3 surface_color = light_standard(p, mat.rgb, fract(mat.a), normal, ray_dir, shadow);\n    surface_color *= ao(p, normal);\n    \n    // Subsurface scattering\n    vec3 light_dir = normalize(window_light_pos - p);\n    float soft = .04;\n    vec4 temp_mat;\n    float light = smoothstep(-soft, soft, map(p + light_dir * soft, temp_mat));\n    vec3 subsurface_color = pow(vec3(.7,.3,.1), vec3(1. / light));\n    \n    // Curtain (i.e. outrageously fake) shading\n    vec3 wall_color = vec3(.3, .1, .1) * .3;\n    float shade_fac = pow(dot(normal, vec3(0., -1., 0.)), 2.);\n    shade_fac *= -dot(ray_dir, normal);\n    float power = 2.;\n    float windowness = pow(length_pow((p - vec3(-.8, 2.2, 2.)) * vec3(2., 1., 1.), 4.), 3.);\n    vec3 transmission_color = pow(vec3(.3, .25, .2), vec3(windowness)) * 2.;\n    vec3 curtain_color = mix(wall_color, transmission_color, shade_fac);\n\n    float stripe = smoothstep(-.3, .3, sin((p.z + cos(p.x * 11.) * .02) * 200.)) * .8;\n    vec3 stripe_color = vec3(.08, .05, .06) * shade_fac;\n    stripe_color = mix(stripe_color, wall_color, .5 * pow(1. - shade_fac, 5.));\n    curtain_color = mix(curtain_color, stripe_color, stripe);\n\n    vec3 result = mix(surface_color, subsurface_color, .3 * step(1., mat.a));\n    result = mix(result, mix(surface_color, subsurface_color, .05), step(2., mat.a));\n    return mix(result, curtain_color, step(3., mat.a));\n}\n\nvoid animate() {\n    // JOHNNY\n    \n    johnny_pos = vec3(-.41, 1.11, 1.24);\n    johnny_dir = vec3(1., .5, .3);\n    \n    float fac = anim_fac(time_remapped, 0., .8);\n    johnny_pos = mix(johnny_pos, vec3(-0.41,  1.16,   .86), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.20, -0.20), fac);\n    \n    fac = anim_fac(time_remapped, .7, .8);\n    johnny_pos = mix(johnny_pos, vec3(-0.45,  1.15,  0.87), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.30, -0.20), fac);\n    \n    fac = anim_fac(time_remapped, 1.9, .7);\n    johnny_pos = mix(johnny_pos, vec3(-0.48,  1.16,  0.85), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.30, -0.30), fac);\n    \n    fac = anim_fac(time_remapped, 2.8, .5);\n    johnny_pos = mix(johnny_pos, vec3(-0.48,  1.16,  0.82), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.35, -0.15), fac);\n    \n    fac = anim_fac(time_remapped, 3.3, .6);\n    johnny_pos = mix(johnny_pos, vec3(-0.48,  1.16,  0.84), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.37, -0.14), fac);\n    \n    fac = anim_fac(time_remapped, 4.6, .7);\n    johnny_pos = mix(johnny_pos, vec3(-0.44,  1.16,  0.86), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.37, -0.20), fac);\n    \n    fac = anim_fac(time_remapped, 5.2, .8);\n    johnny_pos = mix(johnny_pos, vec3(-0.46,  1.16,  0.85), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.30, -0.16), fac);\n    \n    fac = anim_fac(time_remapped, 5.9, .9);\n    johnny_pos = mix(johnny_pos, vec3(-0.46,  1.16,  0.86), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.10, -0.18), fac);\n    \n    fac = anim_fac(time_remapped, 7.0, .6);\n    johnny_pos = mix(johnny_pos, vec3(-0.48,  1.16,  0.87), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.30, -0.05), fac);\n    \n    fac = anim_fac(time_remapped, 7.9, .5);\n    johnny_pos = mix(johnny_pos, vec3(-0.44,  1.16,  0.85), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.30, -0.10), fac);\n    \n    fac = anim_fac(time_remapped, 8.5, .6);\n    johnny_pos = mix(johnny_pos, vec3(-0.44,  1.16,  0.86), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.35, -0.08), fac);\n    \n    fac = anim_fac(time_remapped, 9.0, 2.2);\n    johnny_pos = mix(johnny_pos, vec3(-0.44,  1.15,  0.86), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00,  0.25, -0.06), fac);\n    \n    // You're lying; cut at 11.6\n    \n    fac = anim_fac(time_remapped, 11.5, 1.2);\n    johnny_pos = mix(johnny_pos, vec3(-0.65, 0.66,  1.55), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, 0.5, -0.02), fac);\n    \n    fac = anim_fac(time_remapped, 11.9, 1.2);\n    johnny_pos = mix(johnny_pos, vec3(-0.66, 0.43, 1.55), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, 1.7,  0.03), fac);\n    \n    fac = anim_fac(time_remapped, 13.3, .5);\n    johnny_pos = mix(johnny_pos, vec3(-0.63, 0.46, 1.54), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, 1.7,  -0.04), fac);\n    \n    // YOU'RE TEARING ME APART LISA\n    \n    fac = anim_fac(time_remapped, 14.4, .5);\n    johnny_pos = mix(johnny_pos, vec3(-0.69, 0.47, 1.52), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, .6,  0.50), fac);\n    \n    fac = anim_fac(time_remapped, 15.0, .8);\n    johnny_pos = mix(johnny_pos, vec3(-0.69, 0.47, 1.56), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, .5,  0.4), fac);\n    \n    fac = anim_fac(time_remapped, 15.7, .4);\n    johnny_pos = mix(johnny_pos, vec3(-0.69, 0.47, 1.46), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, 1.2,  0.3), fac);\n    \n    fac = anim_fac(time_remapped, 16.2, .7);\n    johnny_pos = mix(johnny_pos, vec3(-0.70, 0.49, 1.54), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, 1.3,  -.02), fac);\n    \n    // Do you understand life?\n    \n    fac = anim_fac(time_remapped, 18.8, 1.1);\n    johnny_pos = mix(johnny_pos, vec3(-0.55, 0.70, 1.52), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, 1.3,  -.10), fac);\n    \n    fac = anim_fac(time_remapped, 19.8, 1.2);\n    johnny_pos = mix(johnny_pos, vec3(-0.50, 0.60, 1.28), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, 1.3,  -.3), fac);\n    \n    fac = anim_fac(time_remapped, 20.4, 1.);\n    johnny_pos = mix(johnny_pos, vec3(-0.50, 1., 1.0), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, .2,  -.5), fac);\n    \n    // Do you?\n    \n    fac = anim_fac(time_remapped, 21.5, .8);\n    johnny_pos = mix(johnny_pos, vec3(-0.45, 1., 1.0), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, .45,  -.6), fac);\n    \n    fac = anim_fac(time_remapped, 22.3, 1.);\n    johnny_pos = mix(johnny_pos, vec3(-0.45, .995, 1.0), fac);\n    johnny_dir = mix(johnny_dir, vec3( 1.00, .4,  -.7), fac);\n    \n    fac = anim_fac(time_remapped, 31., 5.);\n    johnny_dir = mix(johnny_dir, vec3( -.7, -1., .8), fac);\n    \n    // LISA\n    \n    lisa_pos = vec3(.082, 1.37, .8);\n    lisa_dir = vec3(-.9, -1., .5);\n    \n    fac = anim_fac(time_remapped, 3.2, .8);\n    lisa_pos = mix(lisa_pos, vec3(.082, 1.37, .8), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.7, -1., .5), fac);\n    \n    fac = anim_fac(time_remapped, 5., .9);\n    lisa_pos = mix(lisa_pos, vec3(.082, 1.35, .8), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.9, -1., .45), fac);\n    \n    fac = anim_fac(time_remapped, 6.4, .9);\n    lisa_pos = mix(lisa_pos, vec3(.082, 1.33, .8), fac);\n    lisa_dir = mix(lisa_dir, vec3(-1., -1., .45), fac);\n    \n    fac = anim_fac(time_remapped, 8.8, .9);\n    lisa_pos = mix(lisa_pos, vec3(.082, 1.35, .8), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.6, -1., .5), fac);\n    \n    fac = anim_fac(time_remapped, 9.7, .6);\n    lisa_pos = mix(lisa_pos, vec3(.082, 1.30, .83), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.4, -1., .35), fac);\n    \n    fac = anim_fac(time_remapped, 10.1, 1.1);\n    lisa_pos = mix(lisa_pos, vec3(.082, 1.20, .75), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.3, -1., .10), fac);\n    \n    fac = anim_fac(time_remapped, 10.7, 1.0);\n    lisa_pos = mix(lisa_pos, vec3(.08, .90, 1.00), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.7, -1., .10), fac);\n    \n    // Get up\n    \n    fac = anim_fac(time_remapped, 11.8, 1.2);\n    lisa_pos = mix(lisa_pos, vec3(-.49, .83, 1.54), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.6, -1., .05), fac);\n    \n    fac = anim_fac(time_remapped, 12.8, 1.5);\n    lisa_pos = mix(lisa_pos, vec3(-.50, .82, 1.52), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.6, -1., .05), fac);\n    \n    fac = anim_fac(time_remapped, 15.3, .7);\n    lisa_pos = mix(lisa_pos, vec3(-.53, .82, 1.52), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.5, -1., .04), fac);\n    \n    fac = anim_fac(time_remapped, 16.0, 1.2);\n    lisa_pos = mix(lisa_pos, vec3(-.54, .83, 1.52), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.6, -1., .04), fac);\n    \n    // Why are you so hysterical?\n    \n    fac = anim_fac(time_remapped, 17.2, .5);\n    lisa_pos = mix(lisa_pos, vec3(-.53, .85, 1.52), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.3, -1., .12), fac);\n    \n    fac = anim_fac(time_remapped, 18.0, .4);\n    lisa_pos = mix(lisa_pos, vec3(-.53, .85, 1.51), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.4, -1., .15), fac);\n    \n    fac = anim_fac(time_remapped, 18.3, .7);\n    lisa_pos = mix(lisa_pos, vec3(-.53, .85, 1.52), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.6, -1., .12), fac);\n    \n    // Pushed\n    \n    fac = anim_fac(time_remapped, 19.3, 1.);\n    lisa_pos = mix(lisa_pos, vec3(.34, 1.39, .75), pow(vec3(fac), vec3(1., 1., 2.)));\n    lisa_dir = mix(lisa_dir, vec3(-.6, -1., 2.2), fac);\n    \n    fac = anim_fac(time_remapped, 20.3, .7);\n    lisa_pos = mix(lisa_pos, vec3(.34, 1.39, .80), fac);\n    lisa_dir = mix(lisa_dir, vec3(-.6, -1., 2.0), fac);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float tiime = iTime;\n    float small = step(iResolution.x, 400.);\n    tiime = mix(tiime, tiime - 7., small);\n    time_remapped = mix(tiime, tiime - LOOP_DURATION, step(LOOP_DURATION, tiime));\n    vec2 mouse_normalized = normalize_pixel_coords(iMouse.xy);\n    \n    float camera_switch = 0.;\n    camera_switch = mix(camera_switch, 1., step( 2.8, time_remapped));\n    camera_switch = mix(camera_switch, 0., step( 7.2, time_remapped));\n    camera_switch = mix(camera_switch, 1., step( 9.7, time_remapped));\n    camera_switch = mix(camera_switch, 0., step(11.6, time_remapped));\n    camera_switch = mix(camera_switch, 1., step(13.2, time_remapped));\n    camera_switch = mix(camera_switch, 0., step(14.5, time_remapped));\n    camera_switch = mix(camera_switch, 1., step(17.2, time_remapped));\n    camera_switch = mix(camera_switch, 0., step(18.9, time_remapped));\n    camera_switch = mix(camera_switch, 1., step(19.4, time_remapped));\n    camera_switch = mix(camera_switch, 0., step(21.6, time_remapped));\n    camera_switch = mix(camera_switch, 2. + .2 * (time_remapped - 24.), step(24.0, time_remapped));\n    camera_switch = mix(camera_switch, mouse_normalized.x * 1.5 + .5, step(-.95, mouse_normalized.x));\n    \n    float camera1_transition  = anim_fac(time_remapped, 10.0, 0.1);\n    float camera1_transition2 = anim_fac(time_remapped, 20.5, 0.1);\n    float camera2_transition  = anim_fac(time_remapped, 12.5, 0.1);\n    float camera2_transition2 = anim_fac(time_remapped, 19.4, 1.0);\n    \n    vec3 camera_pos = vec3(0., 0., 4.) + vec3(mouse_normalized.x * 2., 0., mouse_normalized.y * 8.);\n    vec3 camera1_pos = mix(vec3(.832, .892, 0.90), vec3(.23, .79, 1.32), camera1_transition);\n    camera1_pos = mix(camera1_pos, vec3(.6, .7, 0.90), camera1_transition2);\n    vec3 camera2_pos = mix(vec3(-.67, .11, 1.12), vec3(-.22, .00, 1.45), camera2_transition);\n    camera_pos = mix(camera1_pos, camera2_pos, camera_switch);\n\n    vec3 camera_target = vec3(0., .5, 1.);\n    vec3 camera1_target = mix(vec3(-1.62, 1.82, .64), vec3(-1.01, 0.47, 1.57), camera1_transition);\n    camera1_target = mix(camera1_target, vec3(-0.55, 1.1, .95), camera1_transition2);\n    vec3 camera2_target = mix(vec3(-0.17, 1.31, .70), vec3(-0.8, 1.06, 1.5), camera2_transition);\n    camera2_target = mix(camera2_target, vec3(-0.17, 1.21, .70), camera2_transition2);\n    camera_target = mix(camera1_target, camera2_target, camera_switch);\n    \n    vec3 camera_dir = normalize(camera_target - camera_pos);\n    vec3 camera_right = normalize(cross(camera_dir, vec3(0., 0., 1.)));\n    vec3 camera_up    = normalize(cross(camera_right, camera_dir));\n    \n    vec2 uv = normalize_pixel_coords(fragCoord);\n    float fov = 80.;\n    float camera1_fov = 33.4;\n    float camera2_fov = 47.3;\n    fov = mix(camera1_fov, camera2_fov, camera_switch);\n    \n    float ray_spread = tan((fov / 360. * TWO_PI) / 2.);\n    vec3 ray_dir = camera_dir + ((uv.x * camera_right) + (uv.y * camera_up)) * ray_spread;\n    ray_dir = normalize(ray_dir);\n    \n    animate();\n\n    vec3 col = vec3(0., 1., 0.);\n    \n    float ray_len = 0.;\n    float map_dist = 123.;\n    int iters = 0;\n    \n    vec3 point;\n    vec3 normal;\n    vec4 mat;\n    for (int i = 0; i < 100; i++) {\n        if (ray_len > 100. || map_dist < .001) continue; \n        point = camera_pos + ray_len * ray_dir;\n        map_dist = map(point, mat);\n        ray_len += map_dist * STEP_SCALE;\n    }\n    \n    normal = map_normal(point, map_dist, NORMAL_EPSILON);\n    col = color_at(point, ray_dir, normal, mat);\n    // Floor darkening\n    col *= smoothstep(0., 2., point.z) * .8 + .2;\n    // Ceiling darkening\n    col *= smoothstep(3., 2., point.z);\n    // Back darkening\n    col *= smoothstep(-1.5, .5, point.y) * .8 + .2;\n    // Behind couch darkening\n    col *= smoothstep(.6, 0., dot(point.xy - vec2(1., 2.), normalize(vec2(1., 3.))));\n    // Shelf corner darkening\n    col *= smoothstep(1.3, 0., dot(point.xy - vec2(-2.5, 1.8), normalize(vec2(-1., 1.))));\n    // Vignette\n    col *= 1. - length_pow(vec3(uv, 0.), 4.) * .7;\n    \n    col *= 1.8;\n    \n    col *= smoothstep(0., 2., abs(tiime - LOOP_DURATION));\n    col *= .7 * smoothstep(LOOP_DURATION * 2., LOOP_DURATION * 2. - 2., tiime) + .3;\n\n    col.rgb = clamp(col.rgb, vec3(.015), vec3(.8));\n    col.rgb = pow(col.rgb, vec3(.95, 1.07, 1.05) / 2.);\n    \n    #ifdef ENABLE_CLOSED_CAPTIONS\n    \n    glyphs[0] = _gt;\n    glyphs[1] = _gt;\n    glyphs[2] = _sp;\n    glyphs[3] = _W;\n    glyphs[4] = _H;\n    glyphs[5] = _Y;\n    glyphs[6] = _sp;\n    glyphs[7] = _L;\n    glyphs[8] = _I;\n    glyphs[9] = _S;\n    glyphs[10] = _A;\n    glyphs[11] = _co;\n    glyphs[12] = _sp;\n    glyphs[13] = _W;\n    glyphs[14] = _H;\n    glyphs[15] = _Y;\n    glyphs[16] = _sp;\n    glyphs[17] = _L;\n    glyphs[18] = _I;\n    glyphs[19] = _S;\n    glyphs[20] = _A;\n    glyph_count = 21.;\n    \n    line_appear_time = 0.1;\n    \n    new_lat = 1.7;\n    if (time_remapped > new_lat) {\n        glyphs[0] = _P;\n        glyphs[1] = _L;\n        glyphs[2] = _E;\n        glyphs[3] = _A;\n        glyphs[4] = _S;\n        glyphs[5] = _E;\n        glyphs[6] = _sp;\n        glyphs[7] = _T;\n        glyphs[8] = _A;\n        glyphs[9] = _L;\n        glyphs[10] = _K;\n        glyphs[11] = _sp;\n        glyphs[12] = _T;\n        glyphs[13] = _O;\n        glyphs[14] = _sp;\n        glyphs[15] = _M;\n        glyphs[16] = _E;\n        glyphs[17] = _co;\n        glyphs[18] = _sp;\n        glyphs[19] = _P;\n        glyphs[20] = _L;\n        glyphs[21] = _E;\n        glyphs[22] = _A;\n        glyphs[23] = _S;\n        glyphs[24] = _E;\n        glyph_count = 25.;\n        line_appear_time = new_lat;\n        new_lat = 4.4;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _Y;\n        glyphs[1] = _O;\n        glyphs[2] = _U;\n        glyphs[3] = _ap;\n        glyphs[4] = _R;\n        glyphs[5] = _E;\n        glyphs[6] = _sp;\n        glyphs[7] = _P;\n        glyphs[8] = _A;\n        glyphs[9] = _R;\n        glyphs[10] = _T;\n        glyphs[11] = _sp;\n        glyphs[12] = _O;\n        glyphs[13] = _F;\n        glyphs[14] = _sp;\n        glyphs[15] = _M;\n        glyphs[16] = _Y;\n        glyphs[17] = _sp;\n        glyphs[18] = _L;\n        glyphs[19] = _I;\n        glyphs[20] = _F;\n        glyphs[21] = _E;\n        glyph_count = 22.;\n        line_appear_time = new_lat;\n        new_lat = 5.7;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _Y;\n        glyphs[1] = _O;\n        glyphs[2] = _U;\n        glyphs[3] = _sp;\n        glyphs[4] = _A;\n        glyphs[5] = _R;\n        glyphs[6] = _E;\n        glyphs[7] = _sp;\n        glyphs[8] = _E;\n        glyphs[9] = _V;\n        glyphs[10] = _E;\n        glyphs[11] = _R;\n        glyphs[12] = _Y;\n        glyphs[13] = _T;\n        glyphs[14] = _H;\n        glyphs[15] = _I;\n        glyphs[16] = _N;\n        glyphs[17] = _G;\n        glyph_count = 18.;\n        line_appear_time = new_lat;\n        new_lat = 6.9;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _I;\n        glyphs[1] = _sp;\n        glyphs[2] = _C;\n        glyphs[3] = _O;\n        glyphs[4] = _U;\n        glyphs[5] = _L;\n        glyphs[6] = _D;\n        glyphs[7] = _sp;\n        glyphs[8] = _N;\n        glyphs[9] = _O;\n        glyphs[10] = _T;\n        glyphs[11] = _sp;\n        glyphs[12] = _G;\n        glyphs[13] = _O;\n        glyphs[14] = _sp;\n        glyphs[15] = _O;\n        glyphs[16] = _N;\n        glyphs[17] = _sp;\n        glyphs[18] = _W;\n        glyphs[19] = _I;\n        glyphs[20] = _T;\n        glyphs[21] = _H;\n        glyphs[22] = _O;\n        glyphs[23] = _U;\n        glyphs[24] = _T;\n        glyphs[25] = _sp;\n        glyphs[26] = _Y;\n        glyphs[27] = _O;\n        glyphs[28] = _U;\n        glyphs[29] = _co;\n        glyphs[30] = _sp;\n        glyphs[31] = _L;\n        glyphs[32] = _I;\n        glyphs[33] = _S;\n        glyphs[34] = _A;\n        glyph_count = 35.;\n        line_appear_time = new_lat;\n        new_lat = 10.;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _gt;\n        glyphs[1] = _gt;\n        glyphs[2] = _sp;\n        glyphs[3] = _Y;\n        glyphs[4] = _O;\n        glyphs[5] = _U;\n        glyphs[6] = _ap;\n        glyphs[7] = _R;\n        glyphs[8] = _E;\n        glyphs[9] = _sp;\n        glyphs[10] = _S;\n        glyphs[11] = _C;\n        glyphs[12] = _A;\n        glyphs[13] = _R;\n        glyphs[14] = _I;\n        glyphs[15] = _N;\n        glyphs[16] = _G;\n        glyphs[17] = _sp;\n        glyphs[18] = _M;\n        glyphs[19] = _E;\n        glyph_count = 20.;\n        line_appear_time = new_lat;\n        new_lat = 12.2;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _gt;\n        glyphs[1] = _gt;\n        glyphs[2] = _sp;\n        glyphs[3] = _Y;\n        glyphs[4] = _O;\n        glyphs[5] = _U;\n        glyphs[6] = _ap;\n        glyphs[7] = _R;\n        glyphs[8] = _E;\n        glyphs[9] = _sp;\n        glyphs[10] = _L;\n        glyphs[11] = _Y;\n        glyphs[12] = _I;\n        glyphs[13] = _N;\n        glyphs[14] = _G;\n        glyph_count = 15.;\n        line_appear_time = new_lat;\n        new_lat = 13.;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _I;\n        glyphs[1] = _sp;\n        glyphs[2] = _N;\n        glyphs[3] = _E;\n        glyphs[4] = _V;\n        glyphs[5] = _E;\n        glyphs[6] = _R;\n        glyphs[7] = _sp;\n        glyphs[8] = _H;\n        glyphs[9] = _I;\n        glyphs[10] = _T;\n        glyphs[11] = _sp;\n        glyphs[12] = _Y;\n        glyphs[13] = _O;\n        glyphs[14] = _U;\n        glyph_count = 15.;\n        line_appear_time = new_lat;\n        new_lat = 14.5;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _Y;\n        glyphs[1] = _O;\n        glyphs[2] = _U;\n        glyphs[3] = _ap;\n        glyphs[4] = _R;\n        glyphs[5] = _E;\n        glyphs[6] = _sp;\n        glyphs[7] = _T;\n        glyphs[8] = _E;\n        glyphs[9] = _A;\n        glyphs[10] = _R;\n        glyphs[11] = _I;\n        glyphs[12] = _N;\n        glyphs[13] = _G;\n        glyphs[14] = _sp;\n        glyphs[15] = _M;\n        glyphs[16] = _E;\n        glyphs[17] = _sp;\n        glyphs[18] = _A;\n        glyphs[19] = _P;\n        glyphs[20] = _A;\n        glyphs[21] = _R;\n        glyphs[22] = _T;\n        glyphs[23] = _co;\n        glyphs[24] = _sp;\n        glyphs[25] = _L;\n        glyphs[26] = _I;\n        glyphs[27] = _S;\n        glyphs[28] = _A;\n        glyph_count = 29.;\n        line_appear_time = new_lat;\n        new_lat = 17.2;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _gt;\n        glyphs[1] = _gt;\n        glyphs[2] = _sp;\n        glyphs[3] = _W;\n        glyphs[4] = _H;\n        glyphs[5] = _Y;\n        glyphs[6] = _sp;\n        glyphs[7] = _A;\n        glyphs[8] = _R;\n        glyphs[9] = _E;\n        glyphs[10] = _sp;\n        glyphs[11] = _Y;\n        glyphs[12] = _O;\n        glyphs[13] = _U;\n        glyphs[14] = _sp;\n        glyphs[15] = _S;\n        glyphs[16] = _O;\n        glyphs[17] = _sp;\n        glyphs[18] = _H;\n        glyphs[19] = _Y;\n        glyphs[20] = _S;\n        glyphs[21] = _T;\n        glyphs[22] = _E;\n        glyphs[23] = _R;\n        glyphs[24] = _I;\n        glyphs[25] = _C;\n        glyphs[26] = _A;\n        glyphs[27] = _L;\n        glyph_count = 28.;\n        line_appear_time = new_lat;\n        new_lat = 18.9;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _gt;\n        glyphs[1] = _gt;\n        glyphs[2] = _sp;\n        glyphs[3] = _D;\n        glyphs[4] = _O;\n        glyphs[5] = _sp;\n        glyphs[6] = _Y;\n        glyphs[7] = _O;\n        glyphs[8] = _U;\n        glyphs[9] = _sp;\n        glyphs[10] = _U;\n        glyphs[11] = _N;\n        glyphs[12] = _D;\n        glyphs[13] = _E;\n        glyphs[14] = _R;\n        glyphs[15] = _S;\n        glyphs[16] = _T;\n        glyphs[17] = _A;\n        glyphs[18] = _N;\n        glyphs[19] = _D;\n        glyphs[20] = _sp;\n        glyphs[21] = _L;\n        glyphs[22] = _I;\n        glyphs[23] = _F;\n        glyphs[24] = _E;\n        glyph_count = 25.;\n        line_appear_time = new_lat;\n        new_lat = 21.7;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _D;\n        glyphs[1] = _O;\n        glyphs[2] = _sp;\n        glyphs[3] = _Y;\n        glyphs[4] = _O;\n        glyphs[5] = _U;\n        glyph_count = 6.;\n        line_appear_time = new_lat;\n        new_lat = 24.;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _gt;\n        glyphs[1] = _gt;\n        glyphs[2] = _sp;\n        glyphs[3] = _T;\n        glyphs[4] = _H;\n        glyphs[5] = _E;\n        glyphs[6] = _sp;\n        glyphs[7] = _T;\n        glyphs[8] = _O;\n        glyphs[9] = _M;\n        glyphs[10] = _M;\n        glyphs[11] = _Y;\n        glyphs[12] = _sp;\n        glyphs[13] = _W;\n        glyphs[14] = _I;\n        glyphs[15] = _S;\n        glyphs[16] = _E;\n        glyphs[17] = _A;\n        glyphs[18] = _U;\n        glyphs[19] = _sp;\n        glyphs[20] = _P;\n        glyphs[21] = _U;\n        glyphs[22] = _P;\n        glyphs[23] = _P;\n        glyphs[24] = _E;\n        glyphs[25] = _T;\n        glyphs[26] = _sp;\n        glyphs[27] = _S;\n        glyphs[28] = _H;\n        glyphs[29] = _O;\n        glyphs[30] = _W;\n        glyph_count = 31.;\n        line_appear_time = new_lat;\n        new_lat = 28.;\n    }\n    \n    if (time_remapped > new_lat) {\n        glyphs[0] = _T;\n        glyphs[1] = _H;\n        glyphs[2] = _A;\n        glyphs[3] = _N;\n        glyphs[4] = _K;\n        glyphs[5] = _S;\n        glyphs[6] = _sp;\n        glyphs[7] = _F;\n        glyphs[8] = _O;\n        glyphs[9] = _R;\n        glyphs[10] = _sp;\n        glyphs[11] = _W;\n        glyphs[12] = _A;\n        glyphs[13] = _T;\n        glyphs[14] = _C;\n        glyphs[15] = _H;\n        glyphs[16] = _I;\n        glyphs[17] = _N;\n        glyphs[18] = _G;\n        glyph_count = 19.;\n        line_appear_time = new_lat;\n        new_lat = 1e100;\n    }\n\n    draw_glyphs(fragCoord, mix(2., 1., small), mix(.5, .0, small), col);\n    \n    #endif\n    \n\tfragColor = vec4(col, 1.);\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define LOOP_DURATION 30.\n#define PITCH_SMOOTHING\n\n#define TAU 6.283185\n\n#define FORMANT_STEP .02\n#define PHASE_STEP .04\n\n#define FP(ftime,amp,f1,f2,f3){ if(ftimes.y<time){ ftimes=vec2(ftimes.y,ftime); fprev=fnext; fnext=vec4(f1,f2,f3,amp); } }\n\n// After all the `PP`s are executed, `time` should be between `ptimes.y` and `ptimes.z`:\n//\n// --------------------------------------------------- TIME -->\n//  ptimes.x       ptimes.y      time       ptimes.z       ptimes.w\n//     |               |          .            |               |\n//     |               |          .            |               |\n//  phases.x       phases.y (interpolated   phases.z       phases.w\n//     |               |        phase)         |               |\n//     |               |          .            |               |\n\n#define PP(ptime, phase) { if (ptimes.z < time) { ptimes = vec4(ptimes.yzw, ptime); phases = vec4(phases.yzw, phase); } }\n\n\nfloat interpolate_phase(vec4 samples, float mu) {\n    \n    #ifdef PITCH_SMOOTHING\n        // Catmull-Rom interpolation; continuous slope\n        float a0, a1, a2, a3, mu2;\n        mu2 = mu * mu;\n\n        a0 = -0.5*samples.x + 1.5*samples.y - 1.5*samples.z + 0.5*samples.w;\n        a1 = samples.x - 2.5*samples.y + 2.*samples.z - 0.5*samples.w;\n        a2 = -0.5*samples.x + 0.5*samples.z;\n        a3 = samples.y;\n\n        return a0*mu*mu2 + a1*mu2 + a2*mu + a3;\n    #else\n        // Linear interpolation; discontinuous slope\n        return samples.y*(1.-mu) + samples.z*mu;\n    #endif\n}\n\nfloat bandpass(float freq, float formant) {\n    float q = 16000.;\n    float d = freq - formant;\n    return q / (d * d + q);\n}\n\nfloat pulse(float time, float pulse_time, float pulse_length) {\n    float d = (time - pulse_time) / pulse_length;\n    return .01 / (pow(abs(d), 4.) + .01);\n}\n\n#define ITERATIONS 8\n#define MOD2 vec2(443.8975,397.2973)\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\n// Hash function by David Hoskins\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3.zxy, p3.yxz+19.19);\n    return fract(vec2(p3.x * p3.y, p3.z*p3.x));\n}\nfloat hash22mono(float p) {\n    vec2 stereo = hash22(vec2(p, p + 10.)) * .5;\n    return stereo.x + stereo.y;\n}\n\nvec2 mainSound( in int samp,float time)\n{\n    time = mix(time, time - LOOP_DURATION, step(LOOP_DURATION, time));\n\n    vec2 ftimes = vec2(0.);\n    // vec4: F1, F2, F3, amplitude\n    vec4 fnext = vec4(0.), fprev = vec4(0.);\n    \n    \nFP(0.00,0.000020,339.,1464.,2554.)FP(0.06,0.000400,353.,1420.,2552.)FP(0.08,0.002000,400.,792.,2551.)FP(0.14,0.018000,821.,1166.,2947.)FP(0.18,0.022000,839.,1059.,2649.)FP(0.20,0.022000,935.,1526.,2622.)FP(0.22,0.036000,961.,1646.,2495.)FP(0.24,0.072000,755.,1796.,2595.)FP(0.30,0.018000,519.,2050.,2843.)FP(0.38,0.004000,420.,1779.,2681.)FP(0.44,0.004000,321.,2203.,2836.)FP(0.54,0.001000,308.,2435.,2769.)FP(0.56,0.000500,642.,2499.,3524.)FP(0.58,0.000200,128.,2621.,3593.)FP(0.60,0.000200,1089.,2537.,3763.)FP(0.62,0.000200,1456.,2465.,3848.)FP(0.64,0.000800,272.,2432.,3643.)FP(0.66,0.006000,412.,1431.,2384.)FP(0.72,0.019000,739.,1492.,2412.)FP(0.82,0.007000,396.,1287.,2011.)FP(0.86,0.000900,369.,1043.,2093.)FP(0.88,0.000300,390.,1253.,2087.)FP(0.90,0.000600,389.,630.,1392.)FP(0.92,0.000800,402.,634.,1401.)FP(0.94,0.010000,415.,734.,3096.)FP(0.96,0.010000,443.,856.,3174.)FP(0.98,0.008000,850.,1221.,2972.)FP(1.02,0.025000,1219.,1619.,3008.)FP(1.06,0.044000,1109.,1590.,2934.)FP(1.08,0.044000,1279.,1721.,2887.)FP(1.10,0.154000,952.,1590.,2933.)FP(1.14,0.107000,945.,1434.,3595.)FP(1.16,0.082000,672.,1471.,3677.)FP(1.20,0.039000,579.,1560.,3604.)FP(1.22,0.002000,432.,1605.,2794.)FP(1.28,0.000800,427.,2111.,2711.)FP(1.30,0.001000,425.,2156.,3479.)FP(1.36,0.000200,337.,1686.,3363.)FP(1.44,0.002000,442.,1481.,3575.)FP(1.46,0.020000,596.,1538.,2495.)FP(1.58,0.000900,544.,1438.,2488.)FP(1.64,0.000020,665.,1525.,2736.)FP(1.66,0.000600,632.,1495.,2440.)FP(1.68,0.000800,325.,1354.,1992.)FP(1.70,0.003000,263.,1248.,2014.)FP(1.74,0.115000,353.,1922.,2437.)FP(1.78,0.071000,271.,2108.,2515.)FP(1.84,0.016000,264.,2210.,2696.)FP(1.86,0.002000,243.,2055.,4025.)FP(1.88,0.001000,264.,2149.,2668.)FP(1.90,0.001000,289.,2040.,2709.)FP(1.92,0.001000,191.,2073.,2637.)FP(1.94,0.001000,164.,2436.,2987.)FP(1.96,0.000030,221.,2766.,3864.)FP(1.98,0.000010,239.,1556.,3637.)FP(2.00,0.001000,232.,1112.,3200.)FP(2.02,0.007000,993.,1602.,3029.)FP(2.04,0.043000,382.,1660.,3223.)FP(2.06,0.047000,540.,1573.,2903.)FP(2.08,0.097000,982.,1560.,3267.)FP(2.10,0.106000,985.,1759.,2608.)FP(2.12,0.106000,826.,1216.,2944.)FP(2.14,0.051000,830.,1196.,2791.)FP(2.20,0.061000,874.,1233.,3092.)FP(2.24,0.068000,923.,1392.,2671.)FP(2.28,0.074000,617.,1507.,2455.)FP(2.30,0.029000,883.,1420.,2323.)FP(2.32,0.002000,504.,2089.,3354.)FP(2.34,0.001000,872.,1510.,2535.)FP(2.36,0.000200,919.,1353.,2358.)FP(2.38,0.000050,610.,1573.,2713.)FP(2.40,0.000900,890.,1550.,2643.)FP(2.42,0.002000,833.,2347.,3795.)FP(2.44,0.004000,339.,1916.,2551.)FP(2.46,0.005000,290.,1811.,2491.)FP(2.48,0.008000,328.,1582.,2387.)FP(2.50,0.008000,447.,1479.,2399.)FP(2.58,0.002000,431.,1278.,2390.)FP(2.60,0.000400,256.,1260.,2400.)FP(2.62,0.000400,249.,2423.,3341.)FP(2.64,0.005000,253.,2432.,3309.)FP(2.66,0.007000,366.,2519.,3390.)FP(2.68,0.012000,396.,2060.,2630.)FP(2.76,0.013000,417.,2115.,2570.)FP(2.78,0.005000,394.,2251.,3366.)FP(2.80,0.000600,246.,2143.,2789.)FP(2.82,0.000030,335.,1220.,2126.)FP(2.84,0.000009,196.,1294.,2201.)FP(2.86,0.000020,1063.,2445.,3226.)FP(2.88,0.000200,1402.,3282.,3454.)FP(2.90,0.000200,237.,1457.,3298.)FP(2.92,0.000600,247.,1248.,3450.)FP(2.94,0.005000,293.,1157.,2519.)FP(2.96,0.007000,343.,1258.,2507.)FP(2.98,0.013000,305.,1341.,2454.)FP(3.02,0.154000,492.,2093.,2659.)FP(3.10,0.219000,389.,2292.,2968.)FP(3.22,0.213000,567.,2131.,2848.)FP(3.24,0.212000,471.,2128.,2734.)FP(3.34,0.134000,512.,2160.,2577.)FP(3.46,0.012000,387.,2253.,2566.)FP(3.54,0.000100,347.,1779.,2456.)FP(3.58,0.000200,244.,1509.,2355.)FP(3.60,0.000200,294.,1626.,2329.)FP(3.62,0.000080,745.,1667.,2499.)FP(3.64,0.000070,1460.,2436.,3921.)FP(3.66,0.000070,178.,2381.,4027.)FP(3.68,0.000060,221.,1490.,4212.)FP(3.70,0.000030,103.,2371.,4079.)FP(3.72,0.000010,97.,1769.,3000.)FP(3.74,0.000000,173.,2817.,3727.)FP(3.76,0.000000,500.,1500.,2500.)FP(4.40,0.000000,500.,1500.,2500.)FP(4.42,0.000000,104.,2081.,2718.)FP(4.44,0.000001,246.,2087.,2751.)FP(4.46,0.000070,180.,1337.,2625.)FP(4.48,0.002000,307.,1945.,2619.)FP(4.50,0.007000,327.,1933.,2509.)FP(4.56,0.020000,602.,1328.,2320.)FP(4.60,0.016000,611.,910.,2370.)FP(4.62,0.000600,671.,1281.,2356.)FP(4.68,0.000030,666.,1344.,2247.)FP(4.70,0.000300,973.,2543.,3246.)FP(4.72,0.002000,1033.,2450.,3529.)FP(4.74,0.016000,978.,2366.,2754.)FP(4.76,0.067000,1053.,2055.,2906.)FP(4.78,0.067000,780.,1221.,2265.)FP(4.80,0.064000,595.,1275.,2263.)FP(4.86,0.051000,528.,1232.,1599.)FP(4.88,0.010000,383.,1580.,2140.)FP(4.90,0.046000,516.,1147.,2321.)FP(4.94,0.052000,514.,1026.,2619.)FP(4.96,0.018000,455.,988.,2718.)FP(4.98,0.004000,285.,1009.,2733.)FP(5.02,0.001000,238.,993.,2632.)FP(5.04,0.002000,238.,1037.,2675.)FP(5.06,0.013000,307.,937.,2595.)FP(5.08,0.029000,702.,959.,3357.)FP(5.10,0.029000,826.,1100.,2826.)FP(5.16,0.036000,845.,1759.,2615.)FP(5.18,0.020000,678.,1798.,2625.)FP(5.20,0.015000,715.,1773.,2690.)FP(5.22,0.003000,368.,1773.,2731.)FP(5.26,0.007000,589.,1287.,2720.)FP(5.30,0.027000,861.,1308.,2774.)FP(5.34,0.016000,993.,1357.,2710.)FP(5.36,0.018000,708.,1108.,2815.)FP(5.40,0.010000,859.,1223.,2978.)FP(5.42,0.011000,1060.,1361.,3071.)FP(5.46,0.008000,1112.,1894.,2835.)FP(5.48,0.007000,788.,1969.,2859.)FP(5.50,0.010000,793.,2003.,2724.)FP(5.52,0.010000,573.,2015.,2680.)FP(5.56,0.002000,412.,2246.,2874.)FP(5.58,0.000300,242.,2233.,2823.)FP(5.60,0.000070,233.,950.,2315.)FP(5.62,0.000020,511.,1799.,3170.)FP(5.64,0.000080,542.,1475.,2983.)FP(5.66,0.000100,686.,2956.,3880.)FP(5.68,0.000200,261.,1965.,3839.)FP(5.74,0.002000,387.,1911.,2322.)FP(5.80,0.007000,436.,1464.,2408.)FP(5.82,0.008000,551.,1242.,2338.)FP(5.84,0.008000,560.,1351.,2429.)FP(5.86,0.012000,735.,1298.,2415.)FP(5.92,0.005000,735.,1575.,2556.)FP(5.94,0.002000,678.,1399.,1805.)FP(5.98,0.005000,586.,1479.,2085.)FP(6.00,0.013000,566.,2085.,2797.)FP(6.04,0.013000,515.,2107.,2811.)FP(6.12,0.024000,583.,1692.,2512.)FP(6.14,0.016000,547.,1305.,2461.)FP(6.16,0.001000,531.,1250.,1825.)FP(6.18,0.000500,409.,1130.,2047.)FP(6.20,0.000400,401.,1105.,1997.)FP(6.22,0.001000,373.,1122.,1917.)FP(6.24,0.004000,350.,1464.,1867.)FP(6.26,0.004000,388.,1861.,2298.)FP(6.28,0.004000,518.,1937.,2568.)FP(6.32,0.003000,398.,2052.,2819.)FP(6.34,0.003000,436.,1935.,2805.)FP(6.36,0.000200,239.,2092.,2820.)FP(6.38,0.000030,259.,2110.,2851.)FP(6.42,0.000004,506.,1963.,2521.)FP(6.44,0.000005,519.,1913.,2664.)FP(6.46,0.000040,511.,2030.,2794.)FP(6.48,0.000200,275.,1961.,2872.)FP(6.50,0.003000,395.,2047.,2682.)FP(6.62,0.014000,428.,2174.,2640.)FP(6.72,0.000100,322.,2307.,2383.)FP(6.74,0.000040,288.,1190.,2664.)FP(6.76,0.000000,277.,1226.,2168.)FP(6.78,0.000000,324.,1844.,2685.)FP(6.80,0.000000,442.,1374.,2417.)FP(6.82,0.000001,858.,1289.,2403.)FP(6.84,0.000030,698.,1358.,2458.)FP(6.90,0.000900,856.,1427.,2508.)FP(6.96,0.007000,390.,1630.,2390.)FP(6.98,0.000100,553.,1627.,2320.)FP(7.00,0.000030,512.,1316.,2284.)FP(7.02,0.003000,527.,1476.,2851.)FP(7.04,0.011000,1040.,1431.,3090.)FP(7.06,0.011000,931.,1398.,2688.)FP(7.08,0.004000,323.,1108.,2503.)FP(7.10,0.005000,521.,1236.,2526.)FP(7.14,0.000900,252.,1273.,2529.)FP(7.20,0.006000,347.,1392.,2846.)FP(7.22,0.046000,644.,1564.,2809.)FP(7.28,0.078000,941.,1474.,2677.)FP(7.34,0.015000,517.,1785.,2647.)FP(7.38,0.003000,343.,1537.,2525.)FP(7.42,0.000800,300.,1359.,2526.)FP(7.44,0.010000,933.,1255.,2651.)FP(7.46,0.013000,460.,1074.,2583.)FP(7.50,0.013000,449.,852.,2877.)FP(7.64,0.030000,713.,1018.,2572.)FP(7.70,0.010000,522.,1032.,2849.)FP(7.72,0.001000,311.,1086.,2843.)FP(7.74,0.002000,273.,1084.,2705.)FP(7.76,0.003000,376.,998.,2703.)FP(7.82,0.005000,406.,842.,2719.)FP(7.84,0.006000,414.,986.,2627.)FP(7.88,0.008000,392.,1374.,2501.)FP(7.92,0.000600,291.,1411.,2448.)FP(7.96,0.000600,443.,1427.,2388.)FP(7.98,0.010000,335.,1399.,2398.)FP(8.00,0.057000,594.,1445.,2511.)FP(8.04,0.066000,842.,1415.,2659.)FP(8.10,0.036000,922.,1399.,2672.)FP(8.14,0.024000,758.,1305.,2630.)FP(8.20,0.012000,524.,1616.,2262.)FP(8.22,0.000400,697.,1297.,3315.)FP(8.24,0.000200,505.,1253.,2942.)FP(8.28,0.000020,457.,1596.,2487.)FP(8.30,0.000020,892.,2079.,2618.)FP(8.32,0.000300,1413.,2045.,2626.)FP(8.34,0.001000,314.,1802.,2326.)FP(8.36,0.002000,376.,1789.,2488.)FP(8.38,0.002000,361.,1222.,2570.)FP(8.42,0.000900,337.,1058.,2585.)FP(8.48,0.000800,302.,1187.,2572.)FP(8.52,0.006000,341.,1892.,2537.)FP(8.58,0.003000,297.,2173.,2734.)FP(8.62,0.001000,309.,2586.,3478.)FP(8.64,0.000400,229.,2514.,3950.)FP(8.66,0.000100,483.,3043.,3896.)FP(8.68,0.000070,496.,2721.,3448.)FP(8.70,0.000070,469.,3044.,4004.)FP(8.72,0.000200,485.,1266.,3920.)FP(8.74,0.004000,409.,1491.,2591.)FP(8.82,0.019000,659.,1342.,2470.)FP(8.86,0.010000,664.,1242.,2575.)FP(8.90,0.001000,369.,1407.,2594.)FP(8.92,0.000100,704.,1336.,2596.)FP(8.94,0.000030,554.,1203.,2371.)FP(9.00,0.000002,535.,1442.,2734.)FP(9.02,0.000001,532.,1201.,2424.)FP(9.04,0.000000,500.,1500.,2500.)FP(9.76,0.000000,500.,1500.,2500.)FP(9.78,0.000000,204.,2252.,3247.)FP(9.80,0.000000,98.,1957.,2609.)FP(9.82,0.000001,284.,1469.,2182.)FP(9.84,0.000001,226.,1222.,2134.)FP(9.86,0.000001,241.,1193.,2192.)FP(9.88,0.000002,199.,1032.,2018.)FP(9.90,0.000004,219.,1147.,1988.)FP(9.92,0.000006,179.,1076.,1906.)FP(9.94,0.000009,146.,1147.,2503.)FP(9.96,0.000030,186.,1947.,2701.)FP(9.98,0.000090,142.,2362.,2808.)FP(10.00,0.001000,221.,2421.,3028.)FP(10.02,0.011000,378.,2519.,2890.)FP(10.06,0.011000,365.,2255.,2736.)FP(10.08,0.015000,255.,2680.,3650.)FP(10.10,0.022000,824.,2690.,3573.)FP(10.12,0.022000,421.,2745.,4028.)FP(10.14,0.005000,336.,2646.,4048.)FP(10.16,0.006000,172.,2575.,4053.)FP(10.18,0.010000,1476.,2428.,3412.)FP(10.20,0.010000,593.,2623.,3998.)FP(10.22,0.002000,319.,2517.,4144.)FP(10.24,0.046000,266.,1058.,2630.)FP(10.26,0.046000,513.,1162.,2627.)FP(10.28,0.008000,322.,794.,2552.)FP(10.32,0.011000,328.,1012.,2356.)FP(10.34,0.008000,305.,790.,2417.)FP(10.36,0.008000,233.,842.,2478.)FP(10.42,0.005000,275.,817.,2048.)FP(10.46,0.005000,287.,861.,2620.)FP(10.50,0.005000,235.,871.,2665.)FP(10.52,0.005000,231.,932.,2249.)FP(10.54,0.005000,210.,937.,2504.)FP(10.56,0.005000,262.,950.,2359.)FP(10.60,0.002000,266.,860.,2401.)FP(10.62,0.005000,290.,2209.,2516.)FP(10.68,0.022000,291.,2399.,2847.)FP(10.70,0.026000,223.,2398.,2909.)FP(10.74,0.083000,287.,2642.,3026.)FP(10.76,0.059000,957.,2681.,3052.)FP(10.84,0.006000,866.,2721.,3250.)FP(10.86,0.007000,1291.,2470.,3203.)FP(10.88,0.007000,452.,1523.,2486.)FP(10.90,0.000600,434.,1650.,3186.)FP(10.92,0.000600,594.,1605.,2448.)FP(10.94,0.000010,448.,1179.,2604.)FP(10.96,0.000003,186.,1105.,2746.)FP(10.98,0.000001,553.,1549.,2343.)FP(11.00,0.000001,543.,1253.,2387.)FP(11.04,0.000000,535.,1586.,2211.)FP(11.06,0.000000,500.,1500.,2500.)FP(12.20,0.000000,500.,1500.,2500.)FP(12.22,0.000100,773.,2588.,3579.)FP(12.24,0.001000,393.,1886.,2865.)FP(12.26,0.002000,217.,1943.,2723.)FP(12.30,0.007000,302.,2008.,2372.)FP(12.32,0.007000,380.,1657.,2079.)FP(12.36,0.015000,543.,1132.,2340.)FP(12.38,0.015000,678.,1141.,2294.)FP(12.48,0.010000,612.,1088.,1660.)FP(12.52,0.014000,652.,1023.,2457.)FP(12.56,0.011000,524.,928.,2835.)FP(12.58,0.008000,488.,929.,2840.)FP(12.60,0.009000,489.,938.,3650.)FP(12.62,0.024000,527.,935.,2853.)FP(12.66,0.027000,943.,1171.,2887.)FP(12.72,0.069000,840.,1103.,2924.)FP(12.80,0.070000,887.,1361.,2947.)FP(12.82,0.101000,965.,1781.,2781.)FP(12.88,0.078000,801.,2171.,2807.)FP(12.90,0.058000,887.,2154.,2781.)FP(12.92,0.058000,382.,2315.,2848.)FP(12.96,0.010000,328.,2390.,2667.)FP(13.00,0.014000,480.,2130.,2702.)FP(13.02,0.028000,728.,1854.,2613.)FP(13.06,0.102000,941.,1524.,2362.)FP(13.12,0.057000,670.,1843.,2413.)FP(13.14,0.013000,795.,1747.,2564.)FP(13.16,0.003000,242.,2003.,2487.)FP(13.18,0.019000,245.,1810.,2457.)FP(13.20,0.056000,405.,2003.,2594.)FP(13.28,0.086000,665.,2032.,2659.)FP(13.32,0.038000,561.,1357.,2543.)FP(13.44,0.090000,482.,2146.,2790.)FP(13.56,0.010000,345.,2152.,2830.)FP(13.66,0.054000,564.,2072.,2796.)FP(13.68,0.049000,382.,2166.,2708.)FP(13.70,0.049000,334.,2289.,2838.)FP(13.72,0.005000,443.,2158.,2784.)FP(13.74,0.000900,330.,2236.,2942.)FP(13.76,0.007000,314.,2997.,3828.)FP(13.80,0.019000,503.,2838.,3660.)FP(13.82,0.019000,312.,2822.,3436.)FP(13.86,0.014000,263.,2600.,3376.)FP(13.90,0.027000,277.,2115.,3109.)FP(13.92,0.027000,323.,2133.,3256.)FP(13.94,0.028000,466.,1902.,2379.)FP(14.16,0.000050,424.,1119.,2223.)FP(14.18,0.000020,467.,1505.,2222.)FP(14.20,0.000002,440.,2275.,3293.)FP(14.24,0.000000,584.,2306.,3234.)FP(14.26,0.000000,542.,1623.,2294.)FP(14.28,0.000000,621.,1642.,3081.)FP(14.30,0.000000,500.,1500.,2500.)FP(14.32,0.000000,597.,1740.,2350.)FP(14.34,0.000000,503.,1887.,2496.)FP(14.36,0.000000,754.,1988.,2582.)FP(14.38,0.000000,675.,1750.,2314.)FP(14.40,0.000001,351.,1748.,2313.)FP(14.42,0.000001,702.,1880.,2334.)FP(14.44,0.000000,719.,1933.,2347.)FP(14.46,0.000000,683.,1822.,2342.)FP(14.48,0.000000,298.,2307.,2981.)FP(14.50,0.000004,756.,1610.,2535.)FP(14.52,0.001000,308.,1675.,2982.)FP(14.60,0.074000,284.,2100.,3194.)FP(14.68,0.088000,796.,2367.,3333.)FP(14.70,0.088000,836.,1997.,2562.)FP(14.72,0.073000,859.,1495.,2627.)FP(14.74,0.073000,871.,1407.,2737.)FP(14.76,0.073000,876.,1437.,2268.)FP(14.80,0.073000,898.,1630.,2227.)FP(14.82,0.030000,686.,1817.,2838.)FP(14.84,0.006000,608.,1562.,2489.)FP(14.86,0.003000,605.,1821.,2871.)FP(14.88,0.001000,695.,1732.,2750.)FP(14.90,0.000600,619.,1786.,2751.)FP(14.92,0.000200,882.,1914.,2782.)FP(14.94,0.000100,563.,1765.,3513.)FP(14.96,0.000600,815.,1624.,3028.)FP(14.98,0.004000,846.,1674.,3497.)FP(15.00,0.013000,912.,1779.,3039.)FP(15.02,0.091000,652.,2058.,2948.)FP(15.04,0.091000,821.,1943.,3147.)FP(15.08,0.044000,767.,1795.,2348.)FP(15.34,0.098000,753.,1863.,2583.)FP(15.40,0.067000,542.,1993.,2453.)FP(15.42,0.021000,571.,1915.,2589.)FP(15.44,0.016000,437.,2107.,2603.)FP(15.48,0.157000,540.,2134.,2571.)FP(15.52,0.052000,459.,2189.,2865.)FP(15.56,0.071000,501.,2191.,2550.)FP(15.64,0.104000,775.,1810.,2214.)FP(15.66,0.019000,771.,1841.,2935.)FP(15.68,0.003000,701.,2188.,2952.)FP(15.70,0.003000,1061.,1964.,2524.)FP(15.72,0.001000,618.,1958.,2551.)FP(15.74,0.000500,481.,1617.,2199.)FP(15.76,0.000100,670.,1816.,2895.)FP(15.78,0.002000,889.,1987.,2936.)FP(15.80,0.004000,359.,1014.,3371.)FP(15.82,0.011000,288.,1208.,3408.)FP(15.84,0.024000,815.,1215.,3381.)FP(15.86,0.056000,510.,1245.,3362.)FP(15.88,0.056000,680.,1394.,3278.)FP(15.90,0.034000,748.,1194.,2374.)FP(16.04,0.048000,874.,1215.,2291.)FP(16.10,0.065000,735.,1415.,2335.)FP(16.14,0.048000,633.,1288.,2465.)FP(16.20,0.012000,736.,1490.,2447.)FP(16.24,0.019000,374.,1199.,3224.)FP(16.26,0.032000,368.,1544.,3216.)FP(16.28,0.140000,445.,1993.,2602.)FP(16.30,0.140000,621.,1974.,2553.)FP(16.34,0.072000,343.,2249.,2667.)FP(16.46,0.006000,235.,2191.,2761.)FP(16.50,0.003000,329.,2175.,2730.)FP(16.54,0.086000,418.,1419.,2665.)FP(16.58,0.118000,849.,1251.,2513.)FP(16.62,0.044000,853.,1323.,2427.)FP(16.64,0.025000,843.,1293.,3053.)FP(16.68,0.044000,803.,1327.,2798.)FP(16.72,0.047000,963.,1226.,3025.)FP(16.82,0.031000,923.,1259.,3066.)FP(16.84,0.031000,882.,1202.,2642.)FP(16.98,0.000003,798.,1373.,2927.)FP(17.02,0.000001,394.,1053.,3106.)FP(17.04,0.000001,347.,856.,3043.)FP(17.08,0.000002,273.,851.,2289.)FP(17.12,0.000005,244.,779.,3550.)FP(17.14,0.000005,283.,804.,2929.)FP(17.16,0.000020,242.,806.,1784.)FP(17.18,0.000040,239.,981.,3118.)FP(17.20,0.000700,269.,1374.,3050.)FP(17.22,0.017000,533.,1092.,3098.)FP(17.26,0.040000,665.,1224.,2896.)FP(17.28,0.067000,889.,1266.,2771.)FP(17.40,0.052000,946.,1987.,2532.)FP(17.42,0.172000,926.,2013.,2606.)FP(17.44,0.173000,640.,1972.,2610.)FP(17.48,0.178000,489.,2773.,3137.)FP(17.54,0.054000,526.,2417.,3184.)FP(17.58,0.011000,486.,2142.,4178.)FP(17.60,0.011000,502.,2245.,3570.)FP(17.62,0.011000,579.,2121.,4286.)FP(17.64,0.011000,568.,2143.,3924.)FP(17.68,0.005000,757.,1967.,3727.)FP(17.70,0.002000,536.,1727.,3889.)FP(17.72,0.008000,410.,2160.,3704.)FP(17.74,0.028000,458.,2177.,3740.)FP(17.76,0.079000,707.,1836.,3895.)FP(17.84,0.022000,782.,1202.,2720.)FP(17.88,0.011000,801.,1367.,3267.)FP(17.90,0.008000,457.,805.,3196.)FP(17.92,0.006000,530.,849.,3103.)FP(17.94,0.003000,793.,1318.,3029.)FP(17.98,0.006000,781.,2277.,2924.)FP(18.02,0.022000,870.,2071.,3834.)FP(18.08,0.000900,619.,2081.,3987.)FP(18.10,0.000900,725.,1829.,2406.)FP(18.12,0.000500,651.,2251.,3682.)FP(18.16,0.000700,389.,2011.,3706.)FP(18.18,0.000700,671.,2137.,3881.)FP(18.20,0.000800,131.,2286.,3726.)FP(18.22,0.000800,189.,2122.,3637.)FP(18.24,0.000300,442.,1695.,3695.)FP(18.26,0.002000,558.,1559.,2131.)FP(18.28,0.096000,447.,2308.,3658.)FP(18.30,0.466000,587.,2311.,3874.)FP(18.40,0.080000,742.,1558.,1874.)FP(18.48,0.051000,649.,1839.,2189.)FP(18.58,0.000700,711.,1789.,2216.)FP(18.60,0.000700,626.,1458.,2009.)FP(18.62,0.004000,609.,1082.,2852.)FP(18.78,0.000200,578.,866.,3414.)FP(18.80,0.000060,565.,2229.,3193.)FP(18.82,0.000020,383.,770.,2985.)FP(18.84,0.000009,762.,2146.,3137.)FP(18.86,0.000010,869.,2599.,3149.)FP(18.90,0.000040,770.,1986.,3672.)FP(18.92,0.000040,847.,2046.,3722.)FP(18.94,0.009000,884.,2239.,2863.)FP(18.96,0.012000,353.,2235.,3715.)FP(18.98,0.016000,235.,2223.,3884.)FP(19.00,0.016000,252.,1865.,2252.)FP(19.08,0.014000,301.,2286.,2615.)FP(19.12,0.072000,325.,2105.,2477.)FP(19.14,0.072000,357.,2025.,2495.)FP(19.16,0.031000,447.,1359.,2496.)FP(19.18,0.031000,549.,1241.,2487.)FP(19.24,0.033000,877.,1234.,2367.)FP(19.26,0.035000,878.,1121.,2734.)FP(19.28,0.035000,877.,1826.,2704.)FP(19.32,0.032000,888.,1882.,2715.)FP(19.34,0.010000,351.,1869.,2637.)FP(19.36,0.002000,407.,1982.,2798.)FP(19.38,0.002000,335.,1826.,2737.)FP(19.40,0.005000,529.,2135.,2863.)FP(19.42,0.019000,579.,2259.,2801.)FP(19.48,0.020000,583.,1570.,2411.)FP(19.50,0.030000,559.,1630.,3936.)FP(19.54,0.023000,372.,1835.,3938.)FP(19.56,0.023000,494.,2682.,3759.)FP(19.58,0.016000,395.,2467.,3820.)FP(19.60,0.008000,454.,1686.,3777.)FP(19.64,0.009000,747.,2606.,3855.)FP(19.66,0.038000,496.,1677.,2502.)FP(19.70,0.077000,593.,1767.,2578.)FP(19.72,0.032000,819.,1759.,2624.)FP(19.74,0.032000,845.,2001.,2778.)FP(19.78,0.015000,829.,1439.,2828.)FP(19.80,0.016000,825.,1451.,2830.)FP(19.82,0.016000,702.,915.,2760.)FP(19.88,0.006000,506.,1035.,2821.)FP(19.90,0.023000,522.,1042.,2540.)FP(19.92,0.023000,771.,1182.,2821.)FP(20.10,0.074000,911.,1266.,2842.)FP(20.16,0.071000,789.,1711.,2429.)FP(20.18,0.033000,625.,1990.,2541.)FP(20.26,0.003000,462.,1920.,2520.)FP(20.28,0.000400,625.,1984.,2473.)FP(20.36,0.000030,629.,2117.,2481.)FP(20.38,0.000009,1004.,2348.,3124.)FP(20.40,0.000002,664.,2373.,3085.)FP(20.42,0.000002,640.,1904.,3168.)FP(20.44,0.000000,500.,1500.,2500.)FP(21.62,0.000000,500.,1500.,2500.)FP(21.64,0.000001,1026.,1762.,2685.)FP(21.66,0.000001,1056.,1916.,2398.)FP(21.70,0.004000,1052.,1842.,2704.)FP(21.72,0.011000,940.,1998.,3490.)FP(21.74,0.011000,311.,1795.,2351.)FP(21.80,0.007000,349.,1423.,2275.)FP(21.82,0.005000,386.,1589.,2330.)FP(21.88,0.010000,260.,2175.,2597.)FP(21.90,0.009000,264.,2304.,2862.)FP(21.98,0.009000,265.,2109.,2521.)FP(22.04,0.014000,327.,2018.,2406.)FP(22.06,0.014000,420.,1779.,2402.)FP(22.08,0.011000,366.,1727.,2476.)FP(22.12,0.004000,513.,1288.,2538.)FP(22.14,0.006000,550.,1300.,3248.)FP(22.16,0.006000,617.,1293.,2709.)FP(22.18,0.006000,625.,1244.,2848.)FP(22.20,0.004000,572.,1045.,2828.)FP(22.26,0.000200,385.,1052.,2989.)FP(22.28,0.000020,318.,833.,1904.)FP(22.30,0.000001,423.,1096.,2055.)FP(22.32,0.000000,310.,1179.,2035.)FP(22.34,0.000000,1212.,1908.,2870.) \n\nvec4 phases = vec4(0.);\n    vec4 ptimes = vec4(0.);\n    \nPP(0.00,0.00)PP(0.04,7.10)PP(0.08,15.67)PP(0.12,24.99)PP(0.28,66.86)PP(0.32,76.77)PP(0.40,92.70)PP(0.44,100.49)PP(0.52,114.00)PP(0.64,137.53)PP(0.68,145.32)PP(0.72,152.73)PP(0.84,174.68)PP(0.92,190.67)PP(0.96,198.42)PP(1.12,235.93)PP(1.32,276.24)PP(1.56,323.47)PP(1.60,331.93)PP(1.68,350.15)PP(1.76,370.75)PP(2.04,436.65)PP(2.12,458.78)PP(2.24,496.25)PP(2.40,542.14)PP(2.56,580.87)PP(2.60,589.80)PP(2.76,623.58)PP(2.92,661.75)PP(3.00,685.74)PP(3.04,698.56)PP(3.20,755.46)PP(3.28,782.31)PP(3.44,816.76)PP(3.48,824.71)PP(4.44,1009.59)PP(4.48,1017.39)PP(4.52,1026.03)PP(4.68,1063.32)PP(4.80,1094.87)PP(4.92,1125.72)PP(5.00,1143.56)PP(5.08,1160.88)PP(5.32,1214.71)PP(5.44,1247.47)PP(5.48,1258.53)PP(5.52,1268.64)PP(5.56,1277.05)PP(5.68,1300.33)PP(5.72,1308.38)PP(5.76,1316.44)PP(5.84,1331.74)PP(5.88,1338.95)PP(5.92,1347.02)PP(6.00,1365.11)PP(6.08,1386.36)PP(6.12,1397.26)PP(6.16,1407.82)PP(6.24,1429.84)PP(6.28,1440.49)PP(6.32,1450.14)PP(6.36,1457.75)PP(6.48,1481.80)PP(6.56,1495.76)PP(6.60,1502.42)PP(6.68,1515.46)PP(6.72,1522.53)PP(7.00,1586.45)PP(7.08,1606.34)PP(7.12,1615.80)PP(7.16,1623.79)PP(7.20,1633.30)PP(7.24,1642.66)PP(7.32,1662.33)PP(7.36,1671.57)PP(7.40,1679.48)PP(7.44,1688.20)PP(7.52,1705.82)PP(7.64,1736.61)PP(7.68,1746.94)PP(7.72,1756.90)PP(7.76,1765.81)PP(7.80,1774.05)PP(7.88,1788.93)PP(7.92,1795.54)PP(7.96,1802.51)PP(8.00,1810.87)PP(8.08,1829.29)PP(8.16,1850.68)PP(8.20,1860.92)PP(8.24,1870.24)PP(8.32,1886.80)PP(8.40,1899.69)PP(8.44,1905.63)PP(8.48,1911.45)PP(8.56,1923.43)PP(8.72,1951.78)PP(8.80,1967.64)PP(8.84,1976.67)PP(8.88,1986.00)PP(9.96,2203.22)PP(10.04,2218.47)PP(10.28,2261.62)PP(10.36,2274.94)PP(12.20,2582.81)PP(12.24,2589.57)PP(12.28,2596.98)PP(12.36,2615.52)PP(12.44,2634.66)PP(12.52,2653.24)PP(12.60,2672.44)PP(12.64,2682.26)PP(12.72,2703.82)PP(12.80,2725.97)PP(12.88,2747.39)PP(12.96,2766.13)PP(13.00,2774.41)PP(13.04,2782.35)PP(13.08,2790.90)PP(13.16,2808.68)PP(13.20,2818.50)PP(13.28,2840.68)PP(13.32,2851.76)PP(13.36,2862.43)PP(13.40,2872.39)PP(13.48,2888.36)PP(13.56,2906.48)PP(13.64,2929.38)PP(13.68,2941.26)PP(13.84,2983.01)PP(13.96,3009.60)PP(14.52,3128.13)PP(14.56,3136.71)PP(14.60,3146.61)PP(14.68,3169.33)PP(14.80,3206.59)PP(14.88,3231.14)PP(15.00,3272.11)PP(15.08,3302.68)PP(15.20,3348.66)PP(15.44,3436.24)PP(15.64,3509.30)PP(15.84,3584.08)PP(15.92,3615.78)PP(16.08,3676.23)PP(16.12,3690.76)PP(16.16,3705.83)PP(16.20,3720.51)PP(16.24,3733.10)PP(16.32,3758.09)PP(16.40,3780.57)PP(16.56,3825.75)PP(16.64,3847.31)PP(16.72,3866.20)PP(16.76,3874.50)PP(16.80,3881.29)PP(16.84,3886.85)PP(16.88,3893.03)PP(17.12,3942.58)PP(17.16,3951.61)PP(17.20,3962.11)PP(17.24,3974.30)PP(17.32,4007.52)PP(17.40,4048.39)PP(17.44,4068.83)PP(17.48,4087.77)PP(17.56,4125.03)PP(17.60,4142.55)PP(17.72,4189.49)PP(17.76,4204.09)PP(17.80,4218.81)PP(17.84,4234.60)PP(17.88,4250.69)PP(17.92,4266.39)PP(18.00,4298.44)PP(18.04,4311.97)PP(18.32,4395.33)PP(18.36,4408.97)PP(18.40,4423.74)PP(18.48,4447.58)PP(18.60,4476.16)PP(18.64,4484.20)PP(18.68,4491.29)PP(18.72,4498.87)PP(18.96,4554.05)PP(19.04,4574.92)PP(19.12,4599.62)PP(19.16,4612.08)PP(19.32,4659.49)PP(19.36,4670.55)PP(19.40,4682.09)PP(19.44,4693.20)PP(19.76,4784.16)PP(19.88,4814.79)PP(19.96,4834.90)PP(20.16,4890.73)PP(20.28,4922.61)PP(21.76,5240.90)PP(21.84,5260.45)PP(21.92,5279.10)PP(22.04,5314.95)PP(22.12,5341.08)PP(22.16,5354.07)PP(22.24,5376.93)PP(22.28,5388.36)\n\n    float secant_before = (phases.y - phases.x) / (ptimes.y - ptimes.x);\n    float secant_middle = (phases.z - phases.y) / (ptimes.z - ptimes.y);\n    float secant_after  = (phases.w - phases.z) / (ptimes.w - ptimes.z);\n    \n    float tangent_before = (secant_before + secant_middle) * .5;\n    float tangent_after  = (secant_middle + secant_after ) * .5;\n    \n    tangent_before = min(min(tangent_before, secant_before * 3.), secant_middle * 3.);\n    tangent_after  = min(min(tangent_after,  secant_middle * 3.), secant_after  * 3.);\n    \n    float h = ptimes.z - ptimes.y;\n    float t = (time - ptimes.y) / (ptimes.z - ptimes.y);\n    \n    float phase =\n    \tphases.y           * ( 2.*t*t*t - 3.*t*t + 1.) +\n        h * tangent_before * (    t*t*t - 2.*t*t + t ) +\n        phases.z           * (-2.*t*t*t + 3.*t*t) +\n        h * tangent_after  * (    t*t*t -    t*t);\n    \n    float frequency =\n        phases.y / h       * ( 6.*t*t - 6.*t) +\n        tangent_before     * ( 3.*t*t - 4.*t + 1.) +\n        phases.z / h       * (-6.*t*t + 6.*t) +\n        tangent_after      * ( 3.*t*t - 2.*t);\n        \n    float s = 0.;\n\n    vec4 formants_interp = mix(fprev, fnext, (time - ftimes.x) / (ftimes.y - ftimes.x));\n    \n\n    for (float harmonic = 1.; harmonic < 20.; harmonic++) {\n        float falloff = exp(-.2 * harmonic);\n\n        float harmonic_freq = harmonic * frequency;\n        float resonance = 0.;\n        resonance += bandpass(harmonic_freq, formants_interp.x);\n        resonance += bandpass(harmonic_freq, formants_interp.y);\n        resonance += bandpass(harmonic_freq, formants_interp.z);\n        s += sin(TAU * phase * harmonic) * falloff * resonance * sqrt(formants_interp.w) * 5.;\n    }\n    //s += hash22mono(time) - hash22mono(time + 1. / iSampleRate);\n    float sibilant = 0.;\n    for (float sibfreq = 3500.; sibfreq < 9000.; sibfreq += 201.01) {\n        sibilant += sin(TAU * (sibfreq + 1. * sin(TAU * 30. * time) / time) * time) * .03;\n    }\n    s += sibilant * pulse(time,  0.57, .10);\n    s += sibilant * pulse(time,  1.37, .10);\n    s += sibilant * pulse(time,  1.87, .10);\n    s += sibilant * pulse(time,  1.97, .03);\n    s += sibilant * pulse(time,  2.40, .03);\n    s += sibilant * pulse(time,  3.59, .20);\n    s += sibilant * pulse(time,  8.28, .08);\n    s += sibilant * pulse(time,  8.66, .10);\n    s += sibilant * pulse(time, 10.15, .10);\n    s += sibilant * pulse(time, 13.78, .10);\n    s += sibilant * pulse(time, 14.98, .03);\n    s += sibilant * pulse(time, 16.46, .10);\n    s += sibilant * pulse(time, 17.64, .20);\n    s += sibilant * pulse(time, 18.13, .20);\n    s += sibilant * pulse(time, 18.94, .03);\n    s += sibilant * pulse(time, 19.54, .17);\n    s += sibilant * pulse(time, 19.64, .03);\n    s += sibilant * pulse(time, 21.65, .05);\n    \n    float glottal = sin(TAU * (1200. + 0.8 * sin(TAU * 60. * time) / time) * time);\n    s += glottal * pulse(time,  7.02, .01);\n    s += glottal * pulse(time,  7.37, .01);\n    s += glottal * pulse(time, 10.19, .01);\n    s += glottal * pulse(time, 18.57, .01);\n    \n    float labial = hash22mono(time) * .4;\n    s += labial * pulse(time,  2.86, .03);\n    s += labial * pulse(time,  5.58, .08) * 0.5;\n    s += labial * pulse(time, 15.84, .03);\n    s += labial * pulse(time, 20.29, .14) * 0.2;\n    \n    //s = sin(TAU * actualprog);*/\n    //s = sin(TAU * phase);\n    return vec2(s * .3/* * exp(-0.1*time) */);\n}","name":"","description":"","type":"sound"}]}