{"ver":"0.1","info":{"id":"NlKBW1","date":"1664453182","viewed":274,"name":"Complex polygons","username":"ChunderFPV","description":"Unit circle with regular or complex poly & number spiral inside.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["spiral","circle","complex","polygon","unit","fractions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LOOP 20.\n#define S 2.4\n#define R iResolution.xy\n#define M iMouse\n#define T iTime\n#define PI 3.14159265358979\n#define TAU 6.283185307179586\n#define CS(a) vec2(sin(a), cos(a))\n#define HUE(a) (sin(vec3(0, 1.047, 2.094)+vec3(a*6.3))*.5+.5)\n\n// sdLine from https://iquilezles.org/articles/distfunctions2d/\nfloat L( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\n// denominator spiral (use 1/n for numerator)\n// screen coords, value, exponent, rotation, cell radius, cell overlap\nfloat ds(vec2 uv, float n, float e, float a, float cr, float lim)\n{\n    float c = 0.;\n    for (float i=0.; i<lim; i++)\n    {\n        float r = max(0., round((exp(log(length(uv))/e)-i)/lim))*lim+i;\n        c = max(c, 1.-length(uv-CS(a-n*TAU*r)*pow(r, e))/cr);\n    }\n    return c;\n}\n\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    vec2 m = (M.xy-.5*R)/R.y*2.; // mouse coords\n    float sec = 60., // num seconds for animation\n          ma = (M.z > 0.) ? atan(m.x, m.y): mod((T*TAU)/sec, TAU)-PI, // arc from mouse or time\n          n = ma/TAU, // convert arc to range between -0.5 & +0.5\n          deg = ma*180.0/PI; // arc to deg\n    vec2 uv = (XY-.5*R)/R.y; // screen coords\n    float r = length(uv); // radius (distance from 0)\n    vec3 c = vec3(0.2, 0.1, 0.25)*min(r, 1./r); // background color\n    uv *= S; // apply scale\n    r = length(uv); // update radius\n    float a = atan(uv.x, uv.y), // screen arc\n          px = length(fwidth(uv))/1.414; // pixel radius\n    \n    // outer ring\n    float ring = min(r, 1./r); // unit circle glow\n    c += .5*cos(a*12.)*pow(ring, 80.);  // 12 pt ring\n    c += .5*cos(a*60.)*pow(ring, 60.);  // 60 pt ring\n    c += .5*cos(a*360.)*pow(ring, 40.); // 360 pt ring\n    c = max(c, 0.); // clear negative\n    c *= vec3(.6, .5, 1.); // apply color\n    \n    // spiral\n    float den_s = ds(uv, -n, -.4, 0., px*10., LOOP); // denominator\n    c += HUE(1.-den_s)*den_s; // color spiral\n    c = min(c, pow(r*4., 2.)*vec3(.8, .5, 1.)); // dark center\n    c += pow(max(0., 1.-r), 50.)*vec3(.6, .5, 1.); // center glow\n    \n    // polygon\n    // regular poly only requires one iteration\n    if (abs(ma) > .01) // deadzone near angle 0\n    {\n        float bri = .75, // brightness\n              ap = sign(ma), // arc polarity\n              a2 = mod(a+TAU, TAU*ap); // screen arc\n        vec3 co = vec3(1., .6, 0.)*sqrt(abs(n*2.))*bri; // color\n        for (float i = 1.; i <= LOOP; i++)\n        {\n            float v = floor(a2/ma)*ma, // arc\n                  crd = L(uv, CS(v), CS(v+ma)); // chords\n            c += max(0., 1.-smoothstep(0., px*2., crd))/sqrt(i)*co;\n            a2 += TAU*ap;\n        }\n    }\n    \n    // user arc length\n    if (abs(a) <= abs(ma) && sign(a) == sign(ma))\n        c.g += pow(ring, 100.)*.5;\n    \n    // display value\n    c += PrintValue( XY/24., deg, 3., 1.);\n    float ds = length(XY-vec2(150., 30.)); // degree sign\n    c += .6*pow(min(ds/4., 5./ds), 10.);\n    \n    RGBA = vec4(c*sqrt(c)*3., 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Smaller Number Printing - @P_Malin\n// https://www.shadertoy.com/view/4sBSWW\nfloat DigitBin( const int x )\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue( vec2 vStringCoords, float fValue, float fMaxDigits, float fDecimalPlaces )\n{       \n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n    \n    bool bNeg = ( fValue < 0.0 );\n\tfValue = abs(fValue);\n    \n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n","name":"Common","description":"","type":"common"}]}