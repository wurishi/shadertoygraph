{"ver":"0.1","info":{"id":"ttjXDR","date":"1565737837","viewed":124,"name":"breaking light ","username":"lucastakejame","description":"trying to make light dispersion gradients","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","lightdispersion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SIN(t) (.5*sin(t) + .5)\n#define COS(t) (.5*cos(t) + .5)\n#define ss(a,b,c) smoothstep(a,b,c)\n#define PI 3.1415\n#define TAU 2.*PI\n\nvec2 muv;\n\nvec2 rot(vec2 uv, float r)\n{\n    vec2 rot = vec2(cos(r), sin(r));\n    \n    return vec2(uv.x*rot.x - uv.y*rot.y, uv.x*rot.y + uv.y*rot.x);\n}\n\nfloat points(vec2 uv, int count, float delta)\n{\n    float r = 0.;\n    \n    vec2 puv = vec2(length(uv), atan(uv.y, uv.x));\n    \n    puv.x = SIN(puv.x * 3.);\n    \n    for(int i = 0; i < count; i++)\n    {\n        \n        vec2 pos = rot(vec2(1.,0.), TAU*float(i)/float(count) );\n        \n        float dist =  .8;// + .6*sin(iTime);\n        // uv distortion proportional to its length and offset\n        float uvDist;\n        uvDist = iTime*.5;\n        uvDist += (sin(puv.x*10.))*pow( puv.x, 2.);\n        //deuvDist += puv.y;\n        vec2 uv0;\n        uv0 = rot(uv, uvDist);\n        \n        uv0 = puv.x*vec2(cos(puv.y+uvDist), sin(puv.y+uvDist));\n        \n        // brutal distortion\n        uv0 *= mix(vec2(1.), (1. - dist*pos), SIN(iTime));\n        //delta *= 1.*sin(4.*puv.y);\n        r += 1.-smoothstep(.0, .42, length(uv0 - delta*pos));\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord- iResolution.xy)/iResolution.y;\n    muv = (2.*iMouse.xy- iResolution.xy)/iResolution.y;\n\n    //uv = abs(uv);\n     \n    float bd = .3 + .3*SIN(iTime*.3);\n    float gd = bd + 0.125 + .0*COS(3.*iTime);\n    float rd = bd + 0.25 + .00*SIN(4.*iTime);\n    \n    float dist = .2;\n    \n    float r;\n    float g;\n    float b;\n    \n    int count = 7;\n    r = points(uv, count, rd);\n    g = points(uv, count, gd);\n    b = points(uv, count, bd);\n    \n    //r = 0.;\n    //g = 0.;\n    //b = 0.;\n    \n    // balls\n    vec3 col = vec3(r,g,b);\n\n    float ang = .5*atan(uv.y, uv.x)/PI;\n    float m0 = (1. + .4*sin(ang*PI*28.)*sin(ang*PI*12.))*sin(iTime*5.);\n    \n    // concentric circles\n    col  = mix(col, vec3(SIN(10.*length(uv) + iTime*10.),\n                SIN(10.*length(uv) + iTime*10. + m0),\n                SIN(10.*length(uv) + iTime*10. + 2.*m0)),\n               1.5*sin(iTime));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}