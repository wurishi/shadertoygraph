{"ver":"0.1","info":{"id":"lcXXRn","date":"1707249630","viewed":263,"name":"Shader School: 3D Modelling CSG","username":"Peregrine","description":"2024-01-09 Shader School at the Fuz.\nToday z0rg taught us 3D modelling with CSG, refraction, and some glow effect tricks.","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","csg","modelling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"NewTemplate3D\" by z0rg. https://shadertoy.com/view/DdtGz8\n// 2024-01-09 20:39:51\n\n// Fork of \"Template3D\" by z0rg. https://shadertoy.com/view/7s2cDh\n// 2023-02-21 12:03:48\n\n// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(0.,f*factor);\n        col += texture(iChannel0, uv+vec2(0.,f*factor)).xyz/float(steps);\n    }\n    \n    vec3 rgb = texture(iChannel1, uv).xyz+GLOW_OPACITY*pow(col, vec3(GLOW_POW));\n    rgb = pow(rgb*1.2, vec3(2.2));\n    vec2 cuv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    // Trial to flare with mipmap\n    /*\n    rgb = vec3(0.);\n    float cnt =7.;\n    float acc = 0.;\n    for (float j = 0.; j < cnt; ++j)\n    {\n        float f = sat(j/cnt);\n        f = f*f*f;\n        acc += f;\n      rgb += texture(iChannel1, uv, j).xyz*f;\n    }\n    rgb /= acc;\n    */\n    fragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define GLOW_SAMPLES 8\n#define GLOW_DISTANCE 0.05\n#define GLOW_POW 1.1\n#define GLOW_OPACITY .26\n\n#define sat(a) clamp(a, 0., 1.)\n#define PI 3.14159265\n#define TAU (PI*2.0)\n\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456789)*123.456,1.);\n}\n\nvec3 getCam(vec3 rd, vec2 uv)\n{\n    float fov = 1.;\n    vec3 r = normalize(cross(rd, vec3(0.,1.,0.)));\n    vec3 u = normalize(cross(rd, r));\n    return normalize(rd+fov*(r*uv.x+u*uv.y));\n}\n\n// Thanks IQ\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nvec2 _min(vec2 a, vec2 b)\n{\n    if (a.x < b.x)\n        return a;\n    return b;\n}\n\nfloat _cucube(vec3 p, vec3 s, vec3 th)\n{\n    vec3 l = abs(p)-s;\n    float cube = max(max(l.x, l.y), l.z);\n    l = abs(l)-th;\n    float x = max(l.y, l.z);\n    float y = max(l.x, l.z);\n    float z = max(l.x, l.y);\n    \n    return max(min(min(x, y), z), cube);\n}\n\nfloat _cube(vec3 p, vec3 s)\n{\n    vec3 l = abs(p)-s;\n    return max(l.x, max(l.y, l.z));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\n\nfloat _grid(vec3 p, vec3 sp, float sz)\n{\n    p = mod(p+sp*.5,sp)-sp*.5;\n    return min(length(p.xy)-sz, min(length(p.xz)-sz, length(p.yz)-sz));\n}\n\nvec2 map(vec3 p, float hole)\n{\n    vec2 acc = vec2(10000.,-1.);\n\n    //acc = _min(acc, vec2(length(p-vec3(2.5,0.,0.))-1., 0.));\n    \n    //float ground = -p.y;\n    //acc = _min(acc, vec2(ground, 1.));\n    \n    vec3 p_head = p;\n    p_head.y *= .9;\n    p_head.xz *= mix(1., 1.2, sin(p_head.y * 3. - iTime * 1.5) * .5 + .5);\n    float angle_head = atan(p_head.z, p_head.x);\n    float medusa_head = length(p_head)-1.\n        -pow(abs(sin(angle_head*5.)), 2.) * .1;\n    float medusa_hole = length(p_head-vec3(0.,.7,0.))-.75\n        -pow(abs(sin(angle_head*6.)), 2.) * .1;\n    \n    medusa_head = opSmoothSubtraction(medusa_hole, medusa_head, .3);\n    medusa_head -= 0.03 * noise(p * 9. - vec3(0., iTime, .0));\n    acc = _min(acc, vec2(medusa_head, 1.));\n    \n    vec3 p_tentacles = p;\n    p_tentacles.xz *= mix(1., 1.2, sin(p_tentacles.y * 2. - iTime * 1.5) * .5 + .5);\n    p_tentacles.xz += .05 * vec2(sin(p_tentacles.y * 2.3 - iTime),\n                                 sin(p_tentacles.y * 3.3 - .87 * iTime));\n    float angle_t = atan(p_tentacles.z, p_tentacles.x);\n    float rep_a = TAU/9.;\n    for (float i = 0.; i < 4.; ++i) {\n        float radius = mix(.1, 1., i/4.);\n        angle_t += i * 20.;\n        float id_sector = floor((angle_t + rep_a * .5)/rep_a);\n        float sector = mod(angle_t + rep_a *.5, rep_a) - rep_a * .5;\n        vec3 p_t1 = vec3(sin(sector), 0., cos(sector)) * length(p_tentacles.xz)\n                    + vec3(0., p_tentacles.y, 0.);\n        p_t1.xz += vec2(0.05 * sin(id_sector + p_tentacles.y * 3.), 0.) * \n                   sat(p_t1.y * .25);\n        float tentacle_1 = length(p_t1.xz-vec2(0., radius))-.02;\n        tentacle_1 = max(tentacle_1, -p.y);\n        float h_tentacle = 5. + sin(id_sector + 5.3 + i);\n        tentacle_1 = opSmoothSubtraction(-(p_tentacles.y-h_tentacle), tentacle_1, .1);\n        acc = _min(acc, vec2(tentacle_1, 2.));\n    }\n    \n    acc.x *= hole;\n    return acc;\n}\n\nvec3 getNorm(vec3 p, float d, float hole)\n{\n    vec2 e = vec2(0.01, 0.);\n    return normalize(vec3(d)-vec3(\n                     map(p-e.xyy, hole).x,\n                     map(p-e.yxy, hole).x, \n                     map(p-e.yyx, hole).x));\n}\n\nvec3 accCol;\nvec3 trace(vec3 ro, vec3 rd, int steps, float hole)\n{\n    accCol = vec3(0.);\n    vec3 p = ro;\n    for (int i = 0; i < steps && distance(p, ro) < 50.; ++i)\n    {\n        vec2 res = map(p, hole);\n        //res.x += -0.05 + (sin(p.z * 2.) * .5 + .5) * .1;\n        if (res.x < 0.01)\n            return vec3(res.x, distance(p, ro), res.y);\n        \n        accCol += vec3(0., .5, .7) * sat(sin(p.z * 2.) * .5 + .5) * .15\n                  ; // * (1. - sat(res.x/.5)) * .075;\n        p+=rd*res.x*.5;\n    }\n    return vec3(-1.);\n}\n\nvec3 getMat(vec3 p, vec3 n, vec3 rd, vec3 res)\n{\n    vec3 col = n * .5 + .5;\n\n    if (res.z == 2.) {//tentacles\n        col = mix(vec3(.9, .4, .5), vec3(.7), sat(length(p.xz * 2.)));\n    }\n    \n    if (res.z == 1.) {//head\n        float fresnel = 1. - sat(-dot(rd, n));\n        col = vec3(1.) * pow(fresnel, 2.);\n        col += vec3(0., .5, .7) * pow(fresnel, 1.) * .5;\n    }\n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0.,5.*sin(iTime*.5),-13.);\n    vec3 ta = vec3(0.,2.,0.);\n    vec3 rd = normalize(ta-ro);\n    \n    rd = getCam(rd, uv);\n    vec3 res = trace(ro, rd, 128, 1.);\n    vec3 acc = accCol;\n    float depth = 100.;\n    if (res.y > 0.)\n    {\n        depth = res.y;\n        vec3 p = ro+rd*res.y;\n        vec3 n = getNorm(p, res.x, 1.) * (res.z != 2. ? 1.2 : .7);\n        //col = n*.5+.5;\n        col = getMat(p, n, rd, res);\n        if (res.z == 1.) { //head refraction\n            vec3 prefr = p - n * 0.05;\n            float isHole = -1.;\n            for (int i = 0; i < 4; ++i) {\n                vec3 resrefr = trace(prefr, rd, 128, isHole);             \n                if (resrefr.y > 0.) {\n                    prefr = prefr + rd * resrefr.y;\n                    vec3 nrefr = getNorm(prefr, resrefr.x, isHole);\n                    col += .7 * getMat(prefr, nrefr, rd, resrefr);\n                    prefr -= nrefr * 0.04;\n                }\n                isHole *= -1.;\n            }\n        }\n    }\n    col += acc * .3;\n    //col = mix(col, vec3(.5), 1.-exp(-depth*0.017));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ouv = (fragCoord)/iResolution.xy;\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    _seed = iTime+texture(iChannel0, uv).x;\n    //vec2 off = .75*(vec2(rand(), rand())-.5)*2.*1./iResolution.x;\n    vec3 col = rdr(uv);\n        col = sat(col);\n    vec2 off = vec2(1., -1.)/(iResolution.x*1.5);\n\n    /*if (true)//diff > 0.3) // Not so cheap antialiasing\n    {\n        //col = vec3(1.,0.,0.);\n        vec3 acc = col;\n        acc += rdr(uv+off.xx);\n        acc += rdr(uv+off.xy);\n        acc += rdr(uv+off.yy);\n        acc += rdr(uv+off.yx);\n        col = acc/5.;\n        \n    }*/\n    //col *= 1.9/(col+1.);\n    //col = pow(col, vec3(1.2));\n    col = sat(col);\n    col = mix(col, texture(iChannel1, fragCoord/iResolution.xy).xyz, .5);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    const int steps = GLOW_SAMPLES;\n    vec3 col = vec3(0.);\n    \n    for (int i = 0; i< steps; ++i)\n    {\n        float f = float(i)/float(steps);\n        f = (f -.5)*2.;\n        float factor = GLOW_DISTANCE;\n        vec2 nuv = uv+vec2(f*factor, 0.);\n        col += texture(iChannel0, uv+vec2(f*factor,0.)).xyz/float(steps);\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}