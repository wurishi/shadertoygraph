{"ver":"0.1","info":{"id":"NtfGzj","date":"1622386849","viewed":137,"name":"Hexagon Tiling Sphere","username":"kithy","description":"Tiling 2D hexagon to raymarching 3D sphere.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","sphere","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITR 32\n#define EPS 0.001\n#define SCALE 5.0\n#define PI 3.141592\n#define TWO_PI 6.2831\n#define GREEN vec3(0.2,0.9,0.7)\n\nmat2 rot(float a){\n\tfloat s=sin(a);\n\tfloat c=cos(a);\n\treturn mat2(c,-s,s,c);\n}\n\nfloat sdSphere(vec3 p){\n\treturn length(p)-1.0;\n}\n\nvec3 genNormal(vec3 p){\n\tvec3 normal=vec3(\n\t\tsdSphere(p+vec3(EPS,0.0,0.0))-sdSphere(p+vec3(-EPS,0.0,0.0)),\n\t\tsdSphere(p+vec3(0.0,EPS,0.0))-sdSphere(p+vec3(0.0,-EPS,0.0)),\n\t\tsdSphere(p+vec3(0.0,0.0,EPS))-sdSphere(p+vec3(0.0,0.0,-EPS))\n\t\t);\n\treturn normalize(normal);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 uv=(2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n\tvec3 ro=vec3(0.0,0.0,-6.0);\n\tvec3 lookat=vec3(0.0,0.0,0.0);\n\tfloat zoom=5.0;\n\n\tvec3 f=normalize(lookat-ro);\n\tvec3 r=normalize(cross(vec3(0.0,1.0,0.0),f));\n\tvec3 u=cross(f,r);\n\tvec3 c=ro+f*zoom;\n\tvec3 i=c+uv.x*r+uv.y*u;\n\tvec3 rd=normalize(i-ro);\n\n\tfloat dS,dO;\n\tvec3 p,normal;\n\n\t\n\n\t//raymarching\n\tfor(int i=0;i<ITR;i++){\n\t\tp=ro+rd*dO;\n\t\tdS=sdSphere(p);\n\t\tnormal=genNormal(p);\n\t\tif(dS<EPS)break;\n\t\tdO+=dS;\n\n\t}\n\t\n\tp.xz*=rot(1.0+iTime*0.5);\n    p.yz*=rot(0.2);\n\n\tvec3 col=vec3(0.0);\n\n\n\t//polar coordinate\n\tif(dS<EPS){\n\t\t\n        //2D pattern\n        uv=vec2(atan(p.x,p.z)/TWO_PI,p.y/3.0)+0.5;\n        vec3 tex=texture(iChannel0,uv).rgb;\n\n        col=tex;\n\t}\n\t\n    float diff=max(dot(normal,vec3(1.0,1.0,-1.0)),0.1);\n\n\tcol.x*=diff;\n\tcol.y*=diff;\n\tcol.z*=diff;\n   \n\tfragColor=vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//hexagon\nfloat HexDist(vec2 p){\n\tp=abs(p);\n\tfloat c=dot(p,normalize(vec2(1,1.73)));\n\tc=max(c,p.x);\n\treturn c;\n}\n\n//tiling hexagon\nvec4 HexCoords(vec2 uv){\n\tvec2 r=vec2(1,1.73);\n\tvec2 h=r*0.5;\n\n\tvec2 a=mod(uv,r)-h;\n\tvec2 b=mod(uv-h,r)-h;\n\n\tvec2 gv=dot(a,a)<dot(b,b)?a:b;\n\n\tfloat x=atan(gv.x,gv.y);\n\tfloat y=0.5-HexDist(gv);\n\tvec2 id=uv-gv;\n\treturn vec4(x,y,id.x,id.y);\n}\n\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 uv=(fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 col=vec3(0.0);\n\tuv*=10.0;\n\tvec4 hc=HexCoords(uv+100.0);\n\tfloat c=smoothstep(0.01,0.03,hc.y*sin(hc.z*hc.w+iTime));\n\tcol+=c;\n\tfragColor=vec4(col.r,1.0-col.b,1.0-col.b,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}