{"ver":"0.1","info":{"id":"7tsGWf","date":"1623035959","viewed":107,"name":"Attempt at a voxel ray marcher","username":"Kelvin285","description":"should work with a voxel grid.  Didn't include one in the shader though since I don't know how to add things like that into ShaderToy right now.\nThere are also a few weird shadow artifacts as well","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voxel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 sphere = vec3(0, -2.5f, 15);\nfloat radius = 1.0f;\n\nvec2 last_mouse = vec2(-1, -1);\n\nfloat yaw = 0.0f;\n\nfloat GetWhiteNoise(float x, float y) {\n    float nx = cos(x * 1759710525.0f + 1000000.0f);\n    float ny = sin(y * 1677591740.0f + 1000000.0f);\n    return (nx + ny) / 2.0f;\n}\n\nfloat GetSmoothNoise(float x, float y) {\n    float xp = floor(x);\n    float yp = floor(y);\n    \n    float bl = GetWhiteNoise(xp, yp);\n    float tl = GetWhiteNoise(xp, yp + 1.0f);\n    float br = GetWhiteNoise(xp + 1.0f, yp);\n    float tr = GetWhiteNoise(xp + 1.0f, yp + 1.0f);\n    \n    float b = mix(bl, br, x - xp);\n    float t = mix(tl, tr, x - xp);\n    float n = mix(b, t, y - yp);\n    \n    return n;\n}\n\nfloat GetHeight(vec2 pos) {\n    return GetSmoothNoise(pos.x / 10.0f, pos.y / 10.0f) * 10.0f;\n}\n\nfloat GetSDF(vec3 test_pos) {\n    //return distance(test_pos, sphere) - radius;\n    return test_pos.y - (GetHeight(test_pos.xz));\n}\n\nvec2 BoxIntersection(vec3 origin, vec3 box_pos, vec3 dir, float d) {\n    \n    vec3 box_min = floor(box_pos * d) / d;\n    vec3 box_max = box_min + vec3(1.0f);\n    \n    vec3 tMin = (box_min - origin) / dir;\n    vec3 tMax = (box_max - origin) / dir;\n    vec3 t1 = min(tMin, tMax);\n    vec3 t2 = max(tMin, tMax);\n    \n    float tNear = max(max(t1.x, t1.y), t1.z);\n    float tFar = min(min(t2.x, t2.y), t2.z);\n    \n    return vec2(tNear, tFar);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float deg_to_rad = 3.14f / 180.0f;\n    \n    if (last_mouse.x == -1.0f) {\n        last_mouse = vec2(iMouse.x, iMouse.y);\n    }\n    \n    vec3 sun = vec3(cos(iTime), -sin(iTime), 0);\n    sun = vec3(0.0f, -1.0f, 1.0f);\n    sun = normalize(sun);\n    \n    vec3 pos = vec3(iTime, 15, 0);\n    vec3 look = vec3(fragCoord.x - iResolution.x / 2.0f, fragCoord.y - iResolution.y / 2.0f, length(iResolution));\n    \n    look = normalize(look);\n    \n    int iterations = 100;\n    \n    vec3 test_pos = vec3(pos.x, pos.y, pos.z);\n    vec3 vox_pos = floor(test_pos);\n    \n    bool hit = false;\n    bool sun_hit = false;\n    \n    float lambda = 0.05f;\n    \n    float dist_mul = 1.0f;\n    \n    for (int i = 0; i < iterations; i++) {\n        \n        float sdf = GetSDF(floor(vox_pos * dist_mul) / dist_mul);\n        \n        if (sdf <= lambda) {\n            hit = true;\n            break;\n        }\n        \n        vec2 intersect = BoxIntersection(pos, vox_pos + look * sdf * 0.75f, look, dist_mul);\n        \n        vox_pos = pos + look * (intersect.y + lambda);\n        \n    }\n    \n    vec3 cur_pos = floor(vec3(vox_pos.x, vox_pos.y, vox_pos.z));\n    float height = GetHeight(cur_pos.xz) / 10.0f;\n\n    vec3 stpos = vec3(vox_pos.x, vox_pos.y, vox_pos.z);\n    vox_pos -= sun * 0.4f;\n    \n    for (int i = 0; i < iterations / 2; i++) {\n        float sdf = GetSDF(floor(vox_pos * dist_mul) / dist_mul);\n        \n        if (sdf < 0.0f) {\n            sun_hit = true;\n            break;\n        }\n        \n        vec2 intersect = BoxIntersection(stpos, vox_pos - sun * sdf * 0.75f, -sun, dist_mul);\n        \n        vox_pos = stpos - sun * (intersect.y + lambda);\n    }\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    \n    // Time varying pixel color\n    vec3 col = vec3(0);\n    \n    if (hit) {\n        \n        col = vec3(1, 0.5f, 0.25f);\n        if (cur_pos.y >= height) col = vec3(0.0f, 1.0f, 0.0f);\n        if (sun_hit) col *= 0.5f;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    last_mouse = vec2(iMouse.x, iMouse.y);\n}","name":"Image","description":"","type":"image"}]}