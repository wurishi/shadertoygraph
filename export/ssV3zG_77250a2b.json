{"ver":"0.1","info":{"id":"ssV3zG","date":"1631757645","viewed":46,"name":"566 Lab 1 part 1","username":"emma20","description":"using functions to transform circle","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n// Make a vec3 color from rgb values [0, 255]\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\nfloat cubicPulse( float c, float w, float x )\n{\n    x = abs(x - c);\n    if( x>w ) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\nfloat easeInExpo(float x){\nif(x <= .001)\n{\nreturn x;\n}\nelse\n{\nreturn pow(2.5, 2.5 * x - 2.5);\n} \n}\nfloat deformAlongSin(in vec2 uv, in vec2 center){\n    vec2 newUV = normalize(uv - center);\n    float amp = 35.0 * cos(iTime);\n   \n    float res =  sin(atan(newUV.x, newUV.y) * 25.0) * amp;\n    return res;\n}\n\nfloat bias(float a, float t)\n{\n    return pow(t, log(a) / log(0.5));\n}\n\n\nfloat deformFlower(in vec2 uv, in vec2 center){\n    //vec2 newUV = rotatePoint2d(newUV, center, sin(iTime) * 5.0);\n    vec2 newUV = normalize(uv - center);\n    float amp = 40.0 * cos(iTime);\n    float res = sin(atan(newUV.x, newUV.y) * 5.0);\n   \n    res = (res + 1.0) / 2.0;\n    res = sqrt(res) * 2.0;\n    //res = easeInExpo(res);\n    return res * amp;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = 0.25 * iResolution.y;\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\t\n    // Deform Circle\n    float deformRadius = deformAlongSin(uv, center);\n    //float deformRadius = deformFlower(uv, center);\n    \n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n    vec2 newUV = rotatePoint2d(uv, center, 30.f);\n\tvec4 layer2 = circle(uv, center, radius + deformRadius, red);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"}]}