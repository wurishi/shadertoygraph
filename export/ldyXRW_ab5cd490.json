{"ver":"0.1","info":{"id":"ldyXRW","date":"1463101947","viewed":492,"name":"dday","username":"janna","description":"test shader","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float CH_A    = float(0x69f99), CH_B    = float(0x79797), CH_C    = float(0xe111e),\n       \t  \t  CH_D    = float(0x79997), CH_E    = float(0xf171f), CH_F    = float(0xf1711),\n\t\t  \t  CH_G    = float(0xe1d96), CH_H    = float(0x99f99), CH_I    = float(0xf444f),\n\t\t  \t  CH_J    = float(0x88996), CH_K    = float(0x95159), CH_L    = float(0x1111f),\n\t\t  \t  CH_M    = float(0x9f999), CH_N    = float(0x9bd99), CH_O    = float(0x69996),\n\t\t  \t  CH_P    = float(0x79971), CH_Q    = float(0x69b5a), CH_R    = float(0x79759),\n\t\t  \t  CH_S    = float(0xe1687), CH_T    = float(0xf4444), CH_U    = float(0x99996),\n\t\t  \t  CH_V    = float(0x999a4), CH_W    = float(0x999f9), CH_X    = float(0x99699),\n    \t  \t  CH_Y    = float(0x99e8e), CH_Z    = float(0xf843f), CH_0    = float(0x6bd96),\n\t\t  \t  CH_1    = float(0x46444), CH_2    = float(0x6942f), CH_3    = float(0x69496),\n\t\t  \t  CH_4    = float(0x99f88), CH_5    = float(0xf1687), CH_6    = float(0x61796),\n\t\t  \t  CH_7    = float(0xf8421), CH_8    = float(0x69696), CH_9    = float(0x69e84),\n\t\t  \t  CH_APST = float(0x66400), CH_PI   = float(0x0faa9), CH_UNDS = float(0x0000f),\n\t\t  \t  CH_HYPH = float(0x00600), CH_TILD = float(0x0a500), CH_PLUS = float(0x02720),\n\t\t  \t  CH_EQUL = float(0x0f0f0), CH_SLSH = float(0x08421), CH_EXCL = float(0x33303),\n\t\t  \t  CH_QUES = float(0x69404), CH_COMM = float(0x00032), CH_FSTP = float(0x00002),\n    \t  \t  CH_QUOT = float(0x55000), CH_BLNK = float(0x00000), CH_COLN = float(0x00202),\n\t\t\t  CH_LPAR = float(0x42224), CH_RPAR = float(0x24442);\nconst vec2 MAP_SIZE = vec2(4,5);\n\n\n/*\n\treturns the status of a bit in a bitmap. This is done value-wise, so\n\tthe exact representation of the float doesn't really matter.\n*/\nfloat getBit( in float map, in float index )\n{\n    // Ooh -index takes out that divide :)\n    return mod( floor( map*exp2(-index) ), 2.0 );\n}\n\n/*\n\tTrades a float for a character bitmap. Here's to eliminating\n\tbranches with step()!\n*/\nfloat floatToChar( in float x )\n{\n    float res = CH_BLNK;\n    res += (step(-.5,x)-step(0.5,x))*CH_0;\n    res += (step(0.5,x)-step(1.5,x))*CH_1;\n    res += (step(1.5,x)-step(2.5,x))*CH_2;\n    res += (step(2.5,x)-step(3.5,x))*CH_3;\n    res += (step(3.5,x)-step(4.5,x))*CH_4;\n    res += (step(4.5,x)-step(5.5,x))*CH_5;\n    res += (step(5.5,x)-step(6.5,x))*CH_6;\n    res += (step(6.5,x)-step(7.5,x))*CH_7;\n    res += (step(7.5,x)-step(8.5,x))*CH_8;\n    res += (step(8.5,x)-step(9.5,x))*CH_9;\n    return res;\n}\n\n/*\n\tDraws a character, given its encoded value, a position, size and\n\tcurrent [0..1] uv coordinate.\n*/\nfloat myGlobalValue = 0.0;\n\nfloat drawChar( in float char, in vec2 pos, in vec2 size, in vec2 uv )\n{\n    // Subtract our position from the current uv so that we can\n    // know if we're inside the bounding box or not.\n    uv-=pos;\n    \n    // Divide the screen space by the size, so our bounding box is 1x1.\n    uv /= size;    \n    \n    // Create a place to store the result.\n    float res;\n    float fchar = CH_BLNK;\n    myGlobalValue += 1.0;\n    fchar += (step(0.2* myGlobalValue, iTime))*char;\n    // Branchless bounding box check.\n    res = step(0.0,min(uv.x,uv.y)) - step(1.0,max(uv.x,uv.y));\n    \n    // Go ahead and multiply the UV by the bitmap size so we can work in\n    // bitmap space coordinates.\n    uv *= MAP_SIZE;\n    \n    // Get the appropriate bit and return it.\n    res*=getBit( fchar, 4.0*floor(uv.y) + floor(uv.x) );\n    return clamp(res,0.0,1.0);\n}\n\n/*\n\tPrints a float as an int. Be very careful about overflow.\n\tThis as a side effect will modify the character position,\n\tso that multiple calls to this can be made without worrying\n\tmuch about kerning.\n*/\nfloat drawIntCarriage( in int val, inout vec2 pos, in vec2 size, in vec2 uv, in int places )\n{\n    // Create a place to store the current values.\n    float res = 0.0,digit = 0.0;\n    // Surely it won't be more than 10 chars long, will it?\n    // (MAX_INT is 10 characters)\n    for( int i = 0; i < 10; ++i )\n    {\n        // If we've run out of film, cut!\n        if(val == 0 && i >= places) break;\n        // The current lsd is the difference between the current\n        // value and the value rounded down one place.\n        digit = float( val-(val/10)*10 );\n        // Draw the character. Since there are no overlaps, we don't\n        // need max().\n        res += drawChar(floatToChar(digit),pos,size,uv);\n        // Move the carriage.\n        pos.x -= size.x*1.2;\n        // Truncate away this most recent digit.\n        val /= 10;\n    }\n    return res;\n}\n\n/*\n\tDraws an integer to the screen. No side-effects, but be ever vigilant\n\tso that your cup not overfloweth.\n*/\nfloat drawInt( in int val, in vec2 pos, in vec2 size, in vec2 uv )\n{\n    vec2 p = vec2(pos);\n    float s = sign(float(val));\n    val *= int(s);\n    \n    float c = drawIntCarriage(val,p,size,uv,1);\n    return c + drawChar(CH_HYPH,p,size,uv)*max(0.0, -s);\n}\n\n/*\n\tPrints a fixed point fractional value. Be even more careful about overflowing.\n*/\nfloat drawFixed( in float val, in int places, in vec2 pos, in vec2 size, in vec2 uv )\n{\n    // modf() sure would be nice right about now.\n    vec2 p = vec2(pos);\n    float res = 0.0;\n    \n    // Draw the floating point part.\n    res = drawIntCarriage( int( fract(val)*pow(10.0,float(places)) ), p, size, uv, places );\n    // The decimal is tiny, so we back things up a bit before drawing it.\n    p.x += size.x*.4;\n    res = max(res, drawChar(CH_FSTP,p,size,uv)); p.x-=size.x*1.2;\n    // And after as well.\n    p.x += size.x *.1;\n    // Draw the integer part.\n    res = max(res, drawIntCarriage(int(floor(val)),p,size,uv,1));\n\treturn res;\n}\n\nfloat text( in vec2 uv )\n{\n    // Set a general character size...\n    vec2 charSize = vec2(.03, .0375);\n    // and a starting position.\n    vec2 charPos = vec2(0.05, 0.90);\n    // Draw some text!\n    float chr = 0.0;\n    // Bitmap text rendering!\n        chr += drawChar( CH_V, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_I, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_D, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_E, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_O, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_HYPH, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_S, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_L, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_BLNK, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_1, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_FSTP, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_1, charPos, charSize, uv); charPos.x += .04;\n    \n    // Today's Date: {date}\n    charPos = vec2(0.05, .75);\n\nchr += drawChar( CH_C, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_R, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_E, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_A, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_T, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_E, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_D, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_BLNK, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_B, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_Y, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_BLNK, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_N, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_A, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_T, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_H, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_A, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_N, charPos, charSize, uv); charPos.x += .04;\n    // Shader uptime:\n    charPos = vec2(0.05, .6);\n   \nchr += drawChar( CH_H, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_O, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_L, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_M, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_B, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_E, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_R, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_G, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_BLNK, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_O, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_N, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_BLNK, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_1, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_4, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_SLSH, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_0, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_7, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_SLSH, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_0, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_6, charPos, charSize, uv); charPos.x += .04;\n\n    \n    // sine * 500:\n    charPos = vec2(0.05, .45);\n    chr += drawChar( CH_T, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_H, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_A, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_N, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_K, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_S, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_BLNK, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_N, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_A, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_T, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_H, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_A, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_N, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_EXCL, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_EXCL, charPos, charSize, uv); charPos.x += .04;\nchr += drawChar( CH_EXCL, charPos, charSize, uv); charPos.x += .04;\n    return chr;\n}\n\n/*\n\tShadertoy's fancy entry function.\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get normalized UV coords.\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y; //fix aspect ratio\n    \n    // Draw some text!\n    float txt = text(uv);\n    \n\tfragColor = vec4(txt,txt,txt,1.0);\n}","name":"Image","description":"","type":"image"}]}