{"ver":"0.1","info":{"id":"4cXyRn","date":"1720667812","viewed":29,"name":"subtle transition","username":"netfetti","description":"sphere to octahedron ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3dshapetransformation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n#define PI 3.14159265359\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\nvec2 rotate2D(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nfloat scene(vec3 p) {\n    vec3 q = p;\n    q.xy = rotate2D(q.xy, iTime * 0.5);\n    q.yz = rotate2D(q.yz, iTime * 0.3);\n    \n    float sphere = sdSphere(q, 1.0);\n    float box = sdBox(q, vec3(0.8));\n    float octahedron = sdOctahedron(q, 1.2);\n    \n    float d = mix(sphere, box, (sin(iTime) + 1.0) * 0.5);\n    d = mix(d, octahedron, (cos(iTime * 0.7) + 1.0) * 0.5);\n    \n    return d;\n}\n\nvec3 getNormal(vec3 p) {\n    const float eps = 0.001;\n    const vec2 h = vec2(eps, 0);\n    return normalize(vec3(\n        scene(p + h.xyy) - scene(p - h.xyy),\n        scene(p + h.yxy) - scene(p - h.yxy),\n        scene(p + h.yyx) - scene(p - h.yyx)\n    ));\n}\n\nvec3 getRayDirection(vec2 uv, vec3 camPos, vec3 lookat, float zoom) {\n    vec3 f = normalize(lookat - camPos);\n    vec3 r = normalize(cross(vec3(0, 1, 0), f));\n    vec3 u = cross(f, r);\n    return normalize(uv.x * r + uv.y * u + zoom * f);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 camPos = vec3(0, 0, -4);\n    vec3 rayDir = getRayDirection(uv, camPos, vec3(0), 1.0);\n    \n    float t = 0.0;\n    float tmax = 20.0;\n    \n    for(int i = 0; i < 100; i++) {\n        vec3 p = camPos + t * rayDir;\n        float d = scene(p);\n        if(d < 0.001 || t > tmax) break;\n        t += d;\n    }\n    \n    vec3 color = vec3(0);\n    \n    if(t < tmax) {\n        vec3 p = camPos + t * rayDir;\n        vec3 normal = getNormal(p);\n        vec3 lightDir = normalize(vec3(1, 1, -1));\n        \n        float diff = max(dot(normal, lightDir), 0.0);\n        float spec = pow(max(dot(reflect(-lightDir, normal), -rayDir), 0.0), 32.0);\n        \n        color = vec3(0.7, 0.3, 0.9) * diff + vec3(1) * spec;\n        color += vec3(0.1, 0.2, 0.3) * (1.0 - diff);  // Ambient\n        \n        // Add some color based on normal\n        color += normal * 0.5 + 0.5;\n        \n        // Add time-based color variation\n        color *= 0.8 + 0.2 * sin(iTime + p.z * 2.0);\n    }\n    \n    // Add some fog\n    color = mix(color, vec3(0.1, 0.2, 0.3), 1.0 - exp(-0.1 * t));\n    \n    // Tone mapping and gamma correction\n    color = color / (1.0 + color);\n    color = pow(color, vec3(0.4545));\n    \n    fragColor = vec4(color, 1.0);\n}\n   ","name":"Image","description":"","type":"image"}]}