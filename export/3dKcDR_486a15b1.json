{"ver":"0.1","info":{"id":"3dKcDR","date":"1602598761","viewed":82,"name":"vowels AEIOU","username":"jorge2017a1","description":"vowels AEIOU","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["vowelsaeiou"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n///-------------------------------------\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): textureGrad(iChannel3, U/16. + fract( vec2(c, 15-c/16) / 16.), dFdx(U/16.),dFdy(U/16.) )\n#define initMsg vec4 T = vec4(0)\n#define endMsg  return length(T.yz)==0. ? 0. : T.x\n\nfloat message(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0);   // or: initMsg;\n    C(83);C(111);C(117);C(110);C(100);C(32);C(105);C(110);C(115);C(105);C(100);C(101); // message \"Sound inside\"\n    return length(T.yz)==0. ? -1. : T.x; // or: endMsg;\n}\n///-------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+iTime*normalize(uv.xxy)*vec3(0.5,2,4))-vec3(0.5,0.5,0.1);\n\t\n    \n     if (iResolution.y<2000.) \n     {\n      float c=message((fragCoord/iResolution.y-vec2(.1,.2))*8.);\n      if(c>=0.)\n      {fragColor=vec4(c);return;}\n     }\n\n   \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//modificado por Jorgeflores\n\n//https://www.shadertoy.com/view/Xs3GWX\n// 2009-2016 David A Roberts <https://davidar.io>\n\n#define PI 3.141592653589793\n#define PI2 2.0*3.141592653589793\n\n#define ITERATIONS 8\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\n\nstruct Formant {\n    int f1, f2, f3, A1, A2, A3, noise;\n};\n\n\n    \n#define  NUL Formant(0,0,0,0,0,0,0) \n#define  IY Formant(10,84,110,13,10,8,0) \n#define  IH Formant(14,73,93,13,8,7,0) \n#define  EH Formant(19,67,91,14,13,8,0) \n#define  AE Formant(24,63,88,15,14,8,0) \n#define  AA Formant(27,40,89,15,13,1,0) \n#define  AH Formant(23,44,87,15,12,1,0) \n#define  AO Formant(21,31,88,15,12,0,0) \n#define  UH Formant(16,37,82,15,11,1,0) \n#define  AX Formant(20,44,87,14,11,0,0) \n#define  IX Formant(14,73,93,13,11,7,0) \n#define  ER Formant(18,49,62,12,11,5,0) \n#define  UX Formant(14,36,82,15,12,1,0) \n#define  OH Formant(18,30,88,15,12,0,0) \n#define  RX Formant(18,51,62,13,12,6,0) \n#define  LX Formant(16,37,110,13,8,1,0) \n#define  WX Formant(13,29,80,13,8,0,0) \n#define  YX Formant(15,69,93,14,12,7,0) \n#define  WH Formant(11,24,90,13,8,0,0) \n#define  R Formant(18,50,60,12,10,5,0) \n#define  L Formant(14,30,110,13,8,1,0) \n#define  W Formant(11,24,90,13,8,0,0) \n#define  Y Formant(9,83,110,13,10,8,0) \n#define  M Formant(6,46,81,12,3,0,0) \n#define  N Formant(6,54,121,9,9,0,0) \n#define  NX Formant(6,86,101,9,6,3,0) \n#define  DX Formant(6,54,121,0,0,0,0) \n#define  Q Formant(17,67,91,0,0,0,0) \n#define  S Formant(6,73,99,7,10,13,15) \n#define  SH Formant(6,79,106,0,0,10,15) \n#define  F Formant(6,26,81,3,3,3,15) \n#define  TH Formant(6,66,121,0,0,10,10) \n#define  _H Formant(14,73,93,0,0,0,3) \n#define  _X Formant(16,37,82,0,0,0,0) \n#define  Z Formant(9,51,93,15,3,15,10) \n#define  ZH Formant(10,66,103,11,5,15,6) \n#define  V Formant(8,40,76,11,3,0,3) \n#define  DH Formant(10,47,93,11,4,0,3) \n#define  CHa Formant(6,79,101,1,1,1,0) \n#define  CHb Formant(6,79,101,0,0,10,15) \n#define  Ja Formant(6,66,121,1,0,0,0) \n#define  Jb Formant(5,66,121,1,0,0,15) \n#define  Jc Formant(6,110,121,0,10,14,10) \n#define  Jd Formant(0,0,0,2,2,1,10) \n#define  EY Formant(19,72,90,14,14,9,0) \n#define  AY Formant(27,39,88,15,13,1,0) \n#define  OY Formant(21,31,88,15,12,0,0) \n#define  AW Formant(27,43,88,15,13,1,0) \n#define  OW Formant(18,30,88,15,12,0,0) \n#define  UW Formant(13,34,82,13,8,0,0) \n#define  Ba Formant(6,26,81,2,0,0,0) \n#define  Bb Formant(6,26,81,4,1,0,15) \n#define  Bc Formant(6,26,81,0,0,0,0) \n#define  Da Formant(6,66,121,2,0,0,0) \n#define  Db Formant(6,66,121,4,1,10,15) \n#define  Dc Formant(6,66,121,0,0,0,0) \n#define  Ga Formant(6,110,112,1,0,0,0) \n#define  Gb Formant(6,110,110,4,1,0,15) \n#define  Gc Formant(6,110,110,0,0,0,0) \n#define  GXa Formant(6,84,94,1,0,0,0) \n#define  GXb Formant(6,84,94,4,1,0,15) \n#define  GXc Formant(6,84,94,0,0,0,0) \n#define  Pa Formant(6,26,81,1,1,1,0) \n#define  Pb Formant(6,26,81,10,10,10,15) \n#define  Pc Formant(6,26,81,0,0,0,0) \n#define  Ta Formant(6,66,121,1,1,1,0) \n#define  Tb Formant(6,66,121,10,10,10,15) \n#define  Tc Formant(6,66,121,0,0,0,0) \n#define  Ka Formant(6,109,101,0,0,0,0) \n#define  Kb Formant(10,86,101,12,10,7,0) \n#define  Kc Formant(10,109,112,0,0,0,0) \n#define  KXa Formant(6,84,94,0,0,0,0) \n#define  KXb Formant(6,84,94,0,10,5,0) \n#define  KXc Formant(6,84,94,0,0,0,0)   \n    \n    \n// 1 out, 2 in... <https://www.shadertoy.com/view/4djSRW>\nfloat hash12(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3.zxy, p3.yzx+19.19);\n    return fract((p3.x + p3.y)*p3.z);\n}\nfloat noise(float time) {\n    float audio = 0.;\n    for (int t = 0; t < ITERATIONS; t++) {\n        float v = float(t)*3.21239;\n\t\taudio += hash12(vec2(time + v, time*1.423 + v)) * 2.0 - 1.0;\n    }\n    audio /= float(ITERATIONS);\n    return audio;\n}\n\nfloat midi_freq(int m) {\n    /* converts a MIDI note number to a frequency\n       <http://en.wikipedia.org/wiki/MIDI_Tuning_Standard> */\n    return 440. * pow(2., float(m-69)/12.);\n}\n\n\nfloat n2f(float nn)\n{\n  return pow(2.,((nn-69.)/12.))*440.*PI2;\n}\n\n\nfloat sin_wav(float w) { return sin(2.*PI*w ); }\nfloat rec_wav(float w) { return (mod(w,1.) < 0.5) ? -1. : 1.; }\nfloat saw_wav(float w) { return 1. - mod(w,1.); }\n\n\nfloat synth(Formant f, int note, float time) \n{\n    float pitch = midi_freq(note) - time;\n    float t = mod(time, 1./pitch);\n    \n    float s1, s2;\n    s1= ( saw_wav(t*pitch) *(  float(f.A1)*sin_wav(t*33.65*float(f.f1))\n                                    + float(f.A2)*saw_wav(t*33.65*float(f.f2))\n                                    + float(f.A3)*saw_wav(t*33.65*float(f.f3)))\n               + float(f.noise)*noise(time))/70.;\n    \n    \n    return s1*3.0;\n        \n}\n\n\n\n\n#define FRAME(formant, duration, note) { if(time > float(i)*30e-3) r = synth(formant, note, time); i += duration; }\n\nvec2 mainSound( in int samp,float time) {\n    float r;\n    int i = 0;\n    \n    \n    //time=mod(time+0.5*sin(time), 9.0);\n    time=mod(time, 9.0);\n    \n    \n    \n    FRAME(AA, 15, 54);\n    FRAME(EH, 15, 54);\n    FRAME(IY, 15, 54);\n    FRAME(OH, 15, 54);\n    FRAME(UH, 15, 54);\n \t\n    \n    FRAME(NUL, 20, 54);\n        \n\t //AEIOU   \n    FRAME(AA, 20, 54);\n    FRAME(EH, 20, 54);\n    FRAME(IY, 20, 54);\n    FRAME(OH, 20, 54);\n    FRAME(UH, 20, 54);\n    \n       \n    //Hola \n    FRAME(_H, 20, 54);\n    FRAME(OH, 20, 54);\n    FRAME(L, 20, 54);\n \tFRAME(AA, 20, 54);\n    FRAME(NUL, 20, 54);\n   \n    \n    //Hola \n    FRAME(_H, 20, 54);\n    FRAME(OH, 20, 54);\n    FRAME(L, 20, 54);\n \tFRAME(AA, 20, 54);\n    FRAME(NUL, 20, 54);\n    \n  \n \t\n    \n    return vec2(r * (1. - smoothstep(55.,60.,time)));\n}","name":"Sound","description":"","type":"sound"}]}