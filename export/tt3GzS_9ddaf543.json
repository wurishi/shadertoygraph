{"ver":"0.1","info":{"id":"tt3GzS","date":"1650798093","viewed":130,"name":"voronoi diagram","username":"LobsterCrew","description":"Voronoi algorithm by iq. \nhttps://iquilezles.org/articles/voronoilines/voronoilines.htm","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float borders(vec2 oA, vec2 oB)\n{\n    return dot( (oB + oA)/2., (oB - oA)/length(oB-oA));\n}\n\n\nfloat noise(vec2 q)\n{\n    return texture(iChannel0, q/256. +.8).x;\n}\n\nvoid voronoi(in vec2 q, out vec2 oA, out vec2 oB)\n{\n    vec2 f = floor(q);\n    vec2 g = q - f;\n    \n    oA = vec2(8.);\n    oB = vec2(8.);\n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            vec2 b = vec2(float(i), float(j));\n            vec2 r = b - g + abs(sin(noise(f + b) * (iTime + 1.)));\n            float d = dot(r, r);\n            float dA = dot(oA, oA);\n            float dB = dot(oB, oB);\n            \n            if( d < dA )\n        \t{\n                oB = oA;\n                oA = r;\n            }\n        \telse if( d < dB )\n            {\n                oB = r;\n            }\n        }\n    }\n}\n\n            \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 q = 2.*(fragCoord - 0.5*iResolution.xy)/iResolution.y;\n\t\n    \n    // Draw Chessboard\n    //vec3 col = vec3(1., 1., 1.) * noise(floor(3.*q));\n\t// Draw Voronoi Diagram\n    vec2 oA;\n    vec2 oB;\n\tvoronoi(2.5*q, oA, oB);\n    float vor = length(oA);\n    // Get the borders\n    float bd = borders(oA, oB);\n    vec3 col = vec3(1., 0. , 0.) * (vor);\n    col += vec3(1., .1, .4) * smoothstep(.032, .01, vor);\n    col += vec3(1., .1, .4) * smoothstep(.032, .03, bd);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}