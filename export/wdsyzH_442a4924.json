{"ver":"0.1","info":{"id":"wdsyzH","date":"1584198667","viewed":95,"name":"Boilerplate","username":"sixclones","description":"My personal everyday boilerplate for shaders.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["boilerplate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CONSTANTS & UTILS\n#define QP 0.785398163397448\n#define HP 1.570796326794897\n#define P 3.141592653589793\n#define TP 6.283185307179586\n\n#define t iTime\n#define ht 0.5 * t\n#define tt 0.1 * t\n\n#define S(a, b, t) smoothstep(a, b, t)\n\n// UTILS FN\n/* map a value `n` from a range `start1` -> `stop1` to a range `start2` -> `stop2` */\nfloat map(float n, float start1, float stop1, float start2, float stop2) {\n  \treturn (n - start1) / (stop1 - start1) * (stop2 - start2) + start2;\n}\n\n/* map a value `n` from the range -1.0 -> 1.0 to a range `start2` -> `stop2`\nto be used with cos/sin\n`map01(sin(x), 0.0, 1.0)`\n*/\nfloat map01(float n, float start2, float stop2) {\n  \treturn (0.5 * n + 0.5) * (stop2 - start2) + start2;\n}\n\n\n// MAIN\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  \tvec4 uv = vec4(fragCoord.xy / iResolution.xy,\n  \t\t(fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y);\n\n  \tfloat n = 8.0;\n  \tvec2 gv = fract(n * uv.xy); // grid uv\n  \tvec2 id = floor(n * uv.xy);\n  \n  \tvec3 color = vec3(0.0);\n\t\n    // color.rg += gv;\n    // color.rg += id / (n - 1.0);\n    \n  \tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}