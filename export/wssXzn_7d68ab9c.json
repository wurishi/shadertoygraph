{"ver":"0.1","info":{"id":"wssXzn","date":"1550515938","viewed":107,"name":"3d julia fog","username":"pde","description":"This is a 3d ray-marched view of the Julia set; move the mouse around to explore.\nIt could probably be sped up considerably with non-uniform ray step sizes...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 cmult(vec2 a, vec2 b)\n{\n\n    return mat2(a,-a.y,a.x) * b;\n}\n\nvec2 spacify(vec2 p)\n{\n    return ( p - .5 * iResolution.xy ) / iResolution.y;\n}\n\n\n\nint julia(in vec2 z0, in vec2 c)\n{\n    vec2 z = z0;\n    if (length(z) > 4.0)\n        return 0;\n    for (int n=0; n <12; n++) {\n        z = cmult(z,z) +c;\n\n        if (length(z) > 4.0) return n;\n    }\n    return -1;\n}\n\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c           );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // start at 0,0,z=3, shoot a ray at the plane z=1\n    //vec3 camera = vec3(0.2*sin(iTime/2.3),0.2*cos(iTime/18.8),4.0);\n    vec3 camera = vec3(0,0,4.0);\n    vec2 xy = spacify(fragCoord);\n    vec3 coord = vec3(xy.x, xy.y, 3.0);\n    vec3 ray = coord - camera;\n    \n    vec2 mouse_xy=spacify(iMouse.xy);\n    mat3 rot = rotationMatrix(vec3(mouse_xy.y, mouse_xy.x, 0.0),1.5*length(mouse_xy));\n    \n    camera = camera*rot;\n    ray = ray*rot;\n    \n    float col =0.0;\n    float core = 0.0;\n    float steps = 50.0;\n    float z2 = sin(iTime/7.0);\n    vec3 pos; int inc;\n    for (float n=0.0; n<steps; n+=0.025) {\n        pos = camera + n*ray;\n        inc = julia(vec2(pos.x, pos.y), vec2(pos.z,z2));\n        \n        if (inc < 0)\n            // collisions with the core of the julia set\n            core += 1.0;\n        else {\n            // collisions with the halo\n            col+= float(inc);\n\n        }\n    }\n    float scale = 10.24 * steps, g=4.0*scale, b=2.0*scale;\n    float pen = core / 10.0;\n\n    fragColor = vec4(col/scale - pen, abs(sin(col/scale))-(pen/5.0), col/b - (pen/3.0), 0.0);\n\n}\n","name":"Image","description":"","type":"image"}]}