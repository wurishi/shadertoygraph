{"ver":"0.1","info":{"id":"NlGSzR","date":"1640040905","viewed":121,"name":"Aperture Science","username":"Crazyrems","description":"A trusted friend in science.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["portal","aperture","valve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592;\n\n// SDF functions\nfloat ring(in vec2 p)\n{\n   float outerSize = 0.7;\n   float innerSize = 0.416;\n   float len = length(p);\n   return max(len - outerSize, innerSize - len);\n}\n\nfloat box( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat applyBoxes( in vec2 p )\n{\n    float result = 1.0;\n    p = rotate2d(PI / 64.0) * p;\n    p = rotate2d(PI / 32.0 + clamp((PI) * sin(iTime * 0.8), 0.0, 0.13)) * p;\n    p = rotate2d(clamp((PI / 20.0) * sin(iTime * 1.2), -0.04, -0.08)) * p;\n    for (int i = 0; i < 8; i += 1)\n    {\n        mat2 angle = rotate2d(float(i) * 2.0 * PI / 8.0);\n        vec2 offset = vec2(0.380,0.42);\n        result = min(result, box((angle * (p)) + offset, vec2(0.045,0.590)));\n    }\n    return result;\n}\n\nfloat focus(float sdf, float sharpness)\n{\n    return (sdf + (1.0 / (sharpness * 2.0))) * sharpness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   vec2 uv = fragCoord.xy / iResolution.yy;\n   float ratio = iResolution.x / iResolution.y;\n\n    // Output to screen\n   uv -= vec2(0.5 * ratio, 0.5);\n   uv *= 1.9;\n   float repeatFocus = 5.0;\n   float focusAmount = 20.0;\n   float sharpen = iResolution.x / ((focusAmount + 2.0) + max(-cos(min(fract(iTime / repeatFocus) * repeatFocus * 20.0, PI * 2.0)), -cos(min(fract((iTime + 0.2)/ repeatFocus) * repeatFocus * 20.0, PI * 2.0))) * focusAmount);\n   float col = clamp(1.0 - focus(ring(uv), sharpen), 0.0, 1.0);\n   col = min(col, clamp(focus(applyBoxes(uv), sharpen), 0.0, 1.0));\n   fragColor = vec4(vec3(1.0 - col), 1.0);\n}","name":"Image","description":"","type":"image"}]}