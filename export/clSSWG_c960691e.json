{"ver":"0.1","info":{"id":"clSSWG","date":"1676499003","viewed":92,"name":"Heatmap with Z 2","username":"stevebel","description":"Heatmap that colors based on Z and sets opacity based on density","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["heatmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float HEAT_MAX = 10.;\nconst float PointRadius = .3;\nconst float PointInnerRadius = .05;\nconst float ColorInnerRadius = .05;\nconst float ColorRadius = .3;\n\n// test data\nconst int PointCount = 184;\nconst vec3 Points[] = vec3[](\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.35, .75, 3.),\n    vec3(.6, .4, 10.),\n    vec3(-.4, -.8, 1.),\n    vec3(.7, -.3, 6.),\n    vec3(.3, -.8, 8.),\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.35, .75, 3.),\n    vec3(.6, .4, 10.),\n    vec3(-.4, -.8, 1.),\n    vec3(.7, -.3, 6.),\n    vec3(.3, -.8, 8.),\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.35, .75, 3.),\n    vec3(.6, .4, 10.),\n    vec3(-.4, -.8, 1.),\n    vec3(.7, -.3, 6.),\n    vec3(.3, -.8, 8.),\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.35, .75, 3.),\n    vec3(.6, .4, 10.),\n    vec3(-.4, -.8, 0.),\n    vec3(.7, -.3, 6.),\n    vec3(.3, -.8, 8.),\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.35, .75, 3.),\n    vec3(.6, .4, 10.),\n    vec3(-.4, -.8, 1.),\n    vec3(.7, -.3, 6.),\n    vec3(.3, -.8, 8.),\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.35, .75, 3.),\n    vec3(.6, .4, 10.),\n    vec3(-.4, -.8, 1.),\n    vec3(.7, -.3, 6.),\n    vec3(.3, -.8, 8.),\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.35, .75, 3.),\n    vec3(.6, .4, 10.),\n    vec3(-.4, -.8, 1.),\n    vec3(.7, -.3, 6.),\n    vec3(.3, -.8, 8.),\n    vec3(0., 0., 10.),\n    vec3(-0.05, 0., 10.),\n    vec3(0.1, 0.05, 10.),\n    vec3(0.05, 0.05, 10.),\n    vec3(-.05, 0., 10.),\n    vec3(0.1, -.05, 10.),\n    vec3(.2, .6, 9.),\n    vec3(.25, .7, 2.),\n    vec3(.33, .9, 9.),\n    vec3(.35, .8, 8.),\n    vec3(.1, .1, 8.),\n    vec3(-.45, .8, 4.),\n    vec3(-.2, -.6, 5.),\n    vec3(-.25, -.7, 8.),\n    vec3(-.33, -.9, 8.),\n    vec3(.35, -.45, 10.),\n    vec3(-.1, -.8, 10.),\n    vec3(.33, -.3, 2.),\n    vec3(-.36, .76, 3.),\n    vec3(.61, .41, 10.),\n    vec3(-.41, -.81, 1.),\n    vec3(.71, -.31, 6.),\n    vec3(.31, -.81, 8.)\n);\n\nvec3 gradient(float w, float o, vec2 uv) {\n    w = pow(clamp(w, 0., 1.) * 3.14159 * .5, .9);\n    vec3 c = vec3(sin(w), sin(w * 2.), cos(w)) * 1.;\n    return mix(texture(iChannel0, uv).rgb, c, o);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    float d = 0.;\n    float o = 0.;\n    \n    for (int i = 0; i < PointCount; i++) {\n        vec3 v = Points[i];\n        float intensity = v.z / HEAT_MAX - .5;\n        float dist = length(uv - v.xy);\n        float po = dist < PointInnerRadius ? 1. : (1. - (dist - PointInnerRadius) / (PointRadius - PointInnerRadius));\n        float pd = dist < ColorInnerRadius ? 1. : (1. - ((dist - ColorInnerRadius) / (ColorRadius - ColorInnerRadius)));\n        float scale = pow(max(0., pd), 2.);\n        d += (intensity - d ) * (scale / (float(PointCount) * 0.007));\n        o += (pow(max(0., po), 2.) / (float(PointCount) * 0.05));\n    }\n    \n    if (iMouse.z > 0.) {\n        vec4 m = ((iMouse/vec4(iChannelResolution[0], 1.)) * 3.) - vec4(1.);\n        vec3 v = vec3(m.x, m.y, 10.);\n        float intensity = -0.4;\n        float dist = length(uv - v.xy);\n        float po = dist < PointInnerRadius ? 1. : (1. - (dist - PointInnerRadius) / (PointRadius - PointInnerRadius));\n        float pd = dist < ColorInnerRadius ? 1. : (1. - ((dist - ColorInnerRadius) / (ColorRadius - ColorInnerRadius)));\n        float scale = clamp(pow(max(0., pd), 2.), 0., 1.);\n        d += (intensity - d ) * (scale / (float(PointCount) * 0.007));\n        o += (pow(max(0., po), 2.) / (float(PointCount) * 0.05));\n    }\n    \n\n    fragColor = vec4(gradient(d + .5, o < 0. ? 0. : min(o, 1.), uv), 1.);\n}","name":"Image","description":"","type":"image"}]}