{"ver":"0.1","info":{"id":"DlBBWc","date":"1694540415","viewed":57,"name":"Signed Distance of the Earth","username":"chronos","description":"Mountains not included.\nSee comments in shader ---->","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","earth","approximation","distance","function","error","elevation","signed","altitude","hypot","numericalaccuracy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    LEFT: A flat plane\n    RIGHT: A sphere the size of the earth\n    \n    I found that the relative error when using a sphere SDF with \n    the radius of the earth becomes high at relatively low altitude.\n    \n    Set ACCURATE_LOW_ALTITUDE to 0 and Set 'elevation' to 'person', to see this.\n    \n    Between 100m to 1 km, the curvature of the earth starts to become\n    noticable, and the relative error of the naive sphere SDF starts\n    to become noticable.\n    \n    So i guess the conclusion is that if you want to approximate the\n    SDF of the earth and not have to remember the more accurate version,\n    then you can smoothly transition from a plane to a sphere\n    between about 100 and 1000 meters altitude.\n    \n*/\n\n\n#define ACCURATE_LOW_ALTITUDE 1\nconst float person = 1.7;           // Roughly height of a person\nconst float medium = 100.;\nconst float kilometer = 1000.;\nconst float airliner = 10000.;      // Roughly commercial airliner height\n\n// EDIT THIS  \nconst float elevation = kilometer; // m\n\n\n\n\nconst float earth_radius = 6371000.; // m\n\nfloat sphere_sdf(vec3 p, float r) { return length(p) - r; }\n\nfloat earth_sdf(vec3 p, float r)\n{\n#if ACCURATE_LOW_ALTITUDE\n    float z = p.z / r;\n    float x = p.x / r;\n    float R = x * x + z * z;\n    if(R <= 1.)\n        return (p.y + elevation) + r*(1. - sqrt(1. - R) );\n    else\n#endif\n        return sphere_sdf(p - vec3(0., -r-elevation, 0.), r); \n}\n\n\n\nconst float GAMMA = 2.2;\nvec3 sRGB(vec3 color) { return pow(color, vec3(1./GAMMA)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord-iResolution.xy)/iResolution.y;\n    float focal = 2.;\n\n    vec3 rd = normalize(vec3(uv, focal));\n    vec3 ro = vec3(0);\n    float t = 0.;\n\n    vec3 color = vec3(0);\n\n    const int max_iter = 5000;\n    for(int i = 0; i < max_iter; i++)\n    {\n        vec3 p = ro + t * rd;\n        \n        float d;\n        \n        if(uv.x > 0.)\n            d = earth_sdf(p, earth_radius);\n        else\n            d = p.y+elevation;\n            \n            \n        if(d <= elevation * 1e-3)\n        {\n            vec2 texCoord = fract(p.xz/elevation);\n            color += vec3(texCoord, 0.);\n            //color = texture(iChannel0, texCoord).rgb;\n            break;\n        }\n        \n        t += d;\n    }\n\n    fragColor = vec4(sRGB(color), 1.0);\n}","name":"Image","description":"","type":"image"}]}