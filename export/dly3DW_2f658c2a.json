{"ver":"0.1","info":{"id":"dly3DW","date":"1683988860","viewed":55,"name":"LightingWithFresnel","username":"NikitOS","description":"LightingWithFresnel","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lighting","sphere","fresnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 c1 = vec3(0.3, 0.2, 0.7);\nvec3 c2 = vec3(0.980, 0.965, 0.0882);\nfloat waFactor = 0.01;\nfloat dFactor = 0.5;\nfloat sFactor = 0.5;\n\n// Gamma correction\n#define GAMMA (2.2)\n\nvec3 ToGamma(vec3 col)\n{\n\t// convert back into colour values, so the correct light will come out of the monitor\n\treturn pow(col, vec3(1.0 / GAMMA));\n}\n\nvec3 sphere(vec2 pos, vec2 frag, vec3 lightPos, float r)\n{\n    // Вектор от центра шара до позиции текущего фрагмента в 2х мерных экранных координатах\n    vec2 spVec = frag - pos;\n    // Если длинна этого вектора больша радиуса шара, значит вышли за пределы шара\n    if (length(spVec) > r)\n        return c1;\n        \n    // Глубина текущего фрагмента, для простоты центр шара имеет 0 глубину (z0 = 0)\n    // z1 = z0 ± sqrt(R^2 - (x1 - x0)^2 - (y1 - y0)^2)\n    float depth = sqrt((r * r) - (spVec.x * spVec.x) - (spVec.y * spVec.y));\n    // Позиция текущего фрагмента в 3хмерных координатах\n    vec3 spPoint = vec3(frag, depth);\n    // Вектор нормали к шару в текущем фрагменте \n    vec3 spNormal = normalize(spPoint - vec3(pos, 0.0));\n    // Вектор взгляда в текущем фрагменте\n    vec3 eyeDir = normalize(vec3(pos, 1.8) - spPoint);\n    // Вектор освещения в текущем фрагменте\n    vec3 lightDir = normalize(lightPos - spPoint);\n    // Кофф рассеянного освещения по Фонгу\n    float l = max(dot(spNormal, lightDir) + waFactor, 0.0) * dFactor / (1.0 + waFactor);\n    // Кофф бликового освещения по Фонгу\n    float s = clamp(dot(spNormal, normalize(lightDir + eyeDir)), 0.0, 1.0);\n    // Аппроксимация Шлика a^b = a / (b – a*b + a) для a от нуля до единицы\n    s /= 600.0 - s * 600.0 + s;\n    // Кофф Френеля\n    float fresnel = mix(0.05, 1.0, pow(1.0 - dot(eyeDir, spNormal), 4.0));\n    \n    // Финальный цвет, диффузная состовляющая плюс бликовая составляющая \n    return c2 * l + mix(vec3(s), c1, fresnel) * sFactor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / min(iResolution.x, iResolution.y);\n    vec2 uvCenter = iResolution.xy / min(iResolution.x, iResolution.y) / 2.0;\n    float timeCoeff = mod(iTime / 5.0, 6.28318);\n    vec3 lightPos = vec3(sin(timeCoeff) * 3.0, cos(timeCoeff), 2.0);\n    fragColor = vec4(sphere(uvCenter, uv, lightPos, 0.4), 1.0);\n}","name":"Image","description":"","type":"image"}]}