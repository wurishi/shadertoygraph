{"ver":"0.1","info":{"id":"Ns3GzX","date":"1630296469","viewed":349,"name":"Bleeding ink effect ","username":"Yeguarr","description":"I tried to recreate bleeding ink effect from this photoshop tutorial video (https://youtu.be/qVKsVhGvV_o)\n","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["effect","ink","colorwheel","bleeding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// I tried to recreate bleeding ink effect from photoshop tutorial video (https://youtu.be/qVKsVhGvV_o)\n\n// Based on TheBookOfShaders\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if (iTime <= 0.1) {\n        fragColor = texture(iChannel1,uv);\n    } else {\n        float grey = fbm(uv*8.);\n        float greyFilter = clamp(fbm(uv*8.+80.),0.15,0.6);\n        grey = (0.5)*greyFilter+grey*(1.-greyFilter);\n\n        float a = (grey-0.5)/100.;\n        a = max(a,0.);\n        \n        vec3 color1 = texture(iChannel0,uv+vec2(a,0)).rgb;\n        vec3 color2 = texture(iChannel0,uv+vec2(0,a)).rgb;\n        if(length(color1) > length(color2))\n            color1 = color2 * 0.75 + color1 * 0.25;\n        else\n            color1 = color1 * 0.75 + color2 * 0.25;\n\n        vec3 color3 = texture(iChannel0,uv+vec2(0,-a)).rgb;\n        color2 = texture(iChannel0,uv+vec2(-a,0)).rgb;\n        if(length(color3) > length(color2))\n            color3 = color2 * 0.75 + color3 * 0.25;\n        else\n            color3 = color3 * 0.75 + color2 * 0.25;\n\n        if(length(color1) > length(color3))\n            color1 = color3 * 0.75 + color1 * 0.25;\n        else\n            color1 = color1 * 0.75 + color3 * 0.25;\n\n        fragColor = (texture(iChannel1,uv) + vec4(color1,1)*499.)/500.;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//any image\n\n#define TWO_PI 6.28318530718\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0), 6.0)-3.0)-1.0, 0.0, 1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = uv-0.5;\n    st.x *= iResolution.x/iResolution.y;\n    float ang = atan(st.y,st.x);\n\n    vec3 col = hsb2rgb(vec3(ang/TWO_PI,1.-smoothstep(0.25,0.253, length(st)),1.));\n    \n    col = mix(col,vec3(0),smoothstep(0.4,0.41, length(st))); \n    col = mix(col,vec3(1),smoothstep(0.5,0.51, length(st))); \n\n    fragColor = vec4(col,1.0);\n}\n\n/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0,uv);\n}*/","name":"Buffer B","description":"","type":"buffer"}]}