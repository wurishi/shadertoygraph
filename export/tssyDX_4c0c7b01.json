{"ver":"0.1","info":{"id":"tssyDX","date":"1585765035","viewed":144,"name":"LaserOilSlick","username":"Reva","description":"Ex07","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fpm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Reva 20200402\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n// Some useful functions\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\n//\n// Description : GLSL 2D simplex noise function\n//      Author : Ian McEwan, Ashima Arts\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License :\n//  Copyright (C) 2011 Ashima Arts. All rights reserved.\n//  Distributed under the MIT License. See LICENSE file.\n//  https://github.com/ashima/webgl-noise\n//\nfloat snoise(vec2 v) {\n\n    // Precompute values for skewed triangular grid\n    const vec4 C = vec4(0.211324865405187,\n                        // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,\n                        // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,\n                        // -1.0 + 2.0 * C.x\n                        0.024390243902439);\n                        // 1.0 / 41.0\n\n    // First corner (x0)\n    vec2 i  = floor(v + dot(v, C.yy));\n    vec2 x0 = v - i + dot(i, C.xx);\n\n    // Other two corners (x1, x2)\n    vec2 i1 = vec2(0.0);\n    i1 = (x0.x > x0.y)? vec2(1.0, 0.0):vec2(0.0, 1.0);\n    vec2 x1 = x0.xy + C.xx - i1;\n    vec2 x2 = x0.xy + C.zz;\n\n    // Do some permutations to avoid\n    // truncation effects in permutation\n    i = mod289(i);\n    vec3 p = permute(\n            permute( i.y + vec3(0.0, i1.y, 1.0))\n                + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(\n                        dot(x0,x0),\n                        dot(x1,x1),\n                        dot(x2,x2)\n                        ), 0.0);\n\n    m = m*m ;\n    m = m*m ;\n\n    // Gradients:\n    //  41 pts uniformly over a line, mapped onto a diamond\n    //  The ring size 17*17 = 289 is close to a multiple\n    //      of 41 (41*7 = 287)\n\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n\n    // Normalise gradients implicitly by scaling m\n    // Approximation of: m *= inversesqrt(a0*a0 + h*h);\n    m *= 1.79284291400159 - 0.85373472095314 * (a0*a0+h*h);\n\n    // Compute final noise value at P\n    vec3 g = vec3(0.0);\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * vec2(x1.x,x2.x) + h.yz * vec2(x1.y,x2.y);\n    return 130.0 * dot(m, g);\n}\n\n#define OCTAVES 1\nfloat fpm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = 0.6;\n    float frequency = 2.0;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * fract(snoise(st+snoise(vec2(st.y+iTime*0.1,st.x))));\n        st *= frequency;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nfloat pattern( in vec2 p, out vec2 q)\n{\n    q.x = fpm( p + vec2(0.240,0.670) );\n    q.y = fpm( p + vec2(5.2,1.3) ) ;\n\n    return fpm( p + q*1.5 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 st = fragCoord.xy/iResolution.y;\n    //st -= vec2(0.5);\n    vec3 color = vec3(0.0);\n    \n    vec2 q = vec2(1.0);\n    float f = pattern(st*1.0,q);\n\n    color = vec3(1.000,0.881,0.631);\n    color = mix(color, vec3(0.243,0.646,0.945),f);\n    color = mix(color, vec3(0.220,0.835,0.352),q.x*q.x);\n    color = mix(color, vec3(0.830,0.626,0.835),q.y*q.y*2.0);\n    color = mix(color, vec3(0.765,0.975,0.928), 0.5*smoothstep(0.368,0.844,abs(q.y)+abs(q.x)) );\n\n    vec2 ex = vec2( 1.0 / iResolution.x, 0.0 );\n    vec2 ey = vec2( 0.0, 1.0 / iResolution.y );\n    vec3 nor = normalize( vec3( fpm(st+ex) - f, ex.x, fpm(st+ey) - f ) );\n        \n    vec3 lig = normalize( vec3(0.8,-0.5,-0.47) );\n    float dif = clamp( 0.9+0.1*dot( nor, lig ), 0.0, 1.0 );\n\n    vec3 bdrf;\n    bdrf  = vec3(0.924,0.965,0.922)*(nor.y*0.5+0.5);\n    bdrf += vec3(0.030,0.036,0.050)*dif;\n    bdrf  = vec3(0.85,0.90,0.95)*(nor.y*0.5+0.5);\n    bdrf += vec3(0.545,0.474,0.351)*dif;\n\n    color *= bdrf;\n    //color = color*color;\n    color *= vec3(1.0,1.0,1.15);\n    vec2 p = fragCoord.xy/iResolution.xy;\n\t color *= 0.5 + 0.5 * sqrt(40.0*p.x*p.y*(1.0-p.x)*(1.0-p.y));\n    \n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}