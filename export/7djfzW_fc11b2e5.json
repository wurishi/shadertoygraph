{"ver":"0.1","info":{"id":"7djfzW","date":"1645786023","viewed":65,"name":"Island_noise","username":"dragonyhr","description":"island","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["terrainnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 main_island_center=vec2(0.,0.);\n#define MOD3 vec3(.1031,.11369,.2323)\n\n\n// see also the curve cases: https://www.shadertoy.com/view/WdGXWG\n//                           https://www.shadertoy.com/view/WsGXDy\n\n// gradient noise derived from https://www.shadertoy.com/view/XdXGW8\n\nfloat _z = 1.;\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvec2 hash( vec2 x ) \n{\n    float s = 0.;                      // standard Perlin noise\n    const vec2 k = vec2( .3183099, .3678794 );\n    x = x*k + k.yx + 5.;\n    return ( -1. + 2.*fract( 16. * k*fract( x.x*x.y*(x.x+x.y)) ) ) \n        *  mat2(cos( s + vec4(0,33,11,0))); // rotating gradients. rot: https://www.shadertoy.com/view/XlsyWX\n}\nfloat hash21(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n/*vec2 hash22(vec2 p)\n{\n\tp = fract(p * MOD3);\n    p += dot(p, p.yx+19.19);\n    return -1.0 + 2.0 * fract(vec2( (p.x+p.x)*p.y*p.x,(p.y + p.y)*p.x*p.y));\n}\n*/\n\nfloat noise( vec2 p )\n{\n    vec2 i = floor( p ),\n         f = fract( p ),\n\t     u = f*f*(3.-2.*f);\n\n#define P(x,y) dot( hash( i + vec2(x,y) ), f - vec2(x,y) )\n    return mix( mix( P(0,0), P(1,0), u.x),\n                mix( P(0,1), P(1,1), u.x), u.y);\n}\n\n\n\n\nvec2 fade(vec2 t)\n{\n    return t*t*t*(t*(t*6.-15.)+10.);\n}\n\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\n\n\nfloat perlin(vec2 p)\n{\n    vec2 localpos = fract(p);\n    \n    localpos = fade(localpos);\n\n\n    vec2 id = floor(p);\n \n    float bottom_left = hash21(id);\n    float bottom_right = hash21(id+vec2(1.,0));\n    float top_left = hash21(id + vec2(0.,1.));\n    float top_right = hash21(id+vec2(1.,1.));\n    float lerp_left_right_bot = mix(bottom_left,bottom_right,localpos.x);\n    float lerp_left_right_top = mix(top_left,top_right,localpos.x);\n    float lerp_bot_top = mix(lerp_left_right_bot,lerp_left_right_top,localpos.y);\n    float noise = lerp_bot_top ;\n    return noise;\n}\n\n\nfloat Get_A_Mask(float height)\n{\n    \n    return ceil(clamp(height,0.,1.));\n}\nfloat Draw_A_Circle(vec2 center,vec2 pos,float radius)\n{\n    float circle_mask = 0.;\n    circle_mask = (radius-distance(pos,center))/radius;\n    return circle_mask;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    //uv-=0.5;\n    uv*=15.;\n\n    // Time varying pixel color\n    float r,g=0.;\n\n    //r = Draw_A_Circle(main_island_center,uv,800.);\n    //r = Get_A_Mask(r);\n    r = perlin_noise(vec3(uv,iTime));\n    vec3 col = vec3(r,r,r);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}