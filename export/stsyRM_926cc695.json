{"ver":"0.1","info":{"id":"stsyRM","date":"1647703400","viewed":319,"name":"ccb feedback test","username":"morisil","description":"basic feedback demo","likes":6,"published":3,"flags":34,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nhttps://shadertoyunofficial.wordpress.com/2019/01/02/programming-tricks-in-shadertoy-glsl/\n\nvec2 R = iResolution.xy,\n  // U = fragCoord / R.y;                     // [0,1] vertically\n     U = ( 2.*fragCoord - R ) / R.y;          // [-1,1] vertically\n  // U = ( fragCoord - .5*R ) / R.y;          // [-1/2,1/2] vertically\n  // U = ( 2.*fragCoord - R ) / min(R.x,R.y); // [-1,1] along the shortest side\n*/  \n  \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 st =  (2. * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 offsetInput = texture(iChannel0, uv).rgb;\n\n    vec2 feedbackOffset = vec2(sin(st.x * 40.), cos(st.y * 40. + iTime)) * .0005;\n    //vec2 feedbackOffset = (offsetInput.xy * 2. - 1.) * .001;\n    //vec2 feedbackOffset = st * .001;\n    vec3 prevFrame = texture(iChannel0, uv - feedbackOffset).rgb;\n    vec3 cameraFrame = texture(iChannel1, uv).rgb;\n    vec3 color = prevFrame * .99 + cameraFrame * .01;\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}