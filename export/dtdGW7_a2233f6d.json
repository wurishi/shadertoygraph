{"ver":"0.1","info":{"id":"dtdGW7","date":"1682562426","viewed":113,"name":"Bouncing ball fractal","username":"zenzicubic","description":"At each pixel, a ball with unit mass is dropped in the unit circle, with which it elastically collides. Each pixel is given a color corresponding to its x-coordinate. The result is this fractal. Click to show the ball's trajectory.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["fractal","chaos","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 k, in vec2 c)\n{    \n    // Get the values from Buf A\n    float t = abs(TEXF0(c).x);\n    \n    if (iMouse.z > 0.) {\n        // Draw the trajectories from Buf B\n        vec4 tx = TEXF1(c); \n        if (tx.x == 1.) {\n            k = tx;\n            return;\n        }\n    }\n    k = vec4(sqrt(t), t*t*t, max(0.,sin(6.28*t)), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define A vec2(0, -9.81)\n#define DT 0.0025\n\nvec4 f(vec4 a)\n{\n    // The differential equation\n    return vec4(a.zw, A);\n}\n\nvec4 RK4(vec4 s)\n{\n    // Use RK4 to integrate\n    vec4 k1 = DT * f(s);\n    vec4 k2 = DT * f(s + 0.5 * k1);\n    vec4 k3 = DT * f(s + 0.2 * k2);\n    vec4 k4 = DT * f(s + k3);\n    return s + (k1 + k2/3. + k3/3. + k4)/3.;\n}\n\n\nvoid mainImage(out vec4 k, in vec2 c) \n{\n    vec2 u = (2. * c - iResolution.xy) / iResolution.y;\n    \n    if (length(u) < 1.) {\n        // Initial conditions\n        if (iTime < 0.1) {\n            k = vec4(u, 0., 0.);\n            return;\n        } else {\n            // Integration\n            vec4 s = RK4(TEXF0(c));\n            \n            // Boundary reflection\n            if (length(s.xy) > 1.) {\n                float n = dot(s.xy, s.zw);\n                float d = dot(s.xy, s.xy), a1 = 2. * (n / d);\n                s.zw -= s.xy * a1;\n            }\n            k = s;\n        }\n    } else {\n        k = vec4(0.);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define TEXF0(p) texelFetch(iChannel0, ivec2(p), 0)\n#define TEXF1(p) texelFetch(iChannel1, ivec2(p), 0)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define EPS 1e-2\n\nvoid mainImage(out vec4 k, in vec2 c)\n{\n    vec2 u = (2. * c - iResolution.xy) / iResolution.y;\n    \n    // Check if clicking within circle\n    if (iMouse.z > 0. && length(u) < 1.) {\n    \n        vec4 val = TEXF1(c);\n        vec2 p = TEXF0(iMouse.xy).xy; \n        \n        // If so, trace path\n        if (distance(p, u) < EPS) {\n            val = vec4(1.);\n        }\n        k = val;\n        return;\n    }\n    k = vec4(0.);\n}","name":"Buffer B","description":"","type":"buffer"}]}