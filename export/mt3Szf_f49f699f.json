{"ver":"0.1","info":{"id":"mt3Szf","date":"1685648438","viewed":46,"name":"círculos concéntricos","username":"Crofts","description":"círculos concéntricos","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["crculosconcntricos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Define los colores de los círculos\n    vec3 circleColor = vec3(0.1, 0.1, 0.4);\n    vec3 backgroundColor = vec3(1.0, 0.50, 0.0);\n    \n    // Define los parámetros del patrón\n    int numCircles = 20;\n    float circleSize = 0.1;\n    \n    // Calcula la posición normalizada del píxel\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Calcula la distancia al centro de la pantalla\n    float d = length(uv );\n    d=sin(d*4.+iTime)/8.;\n    d=abs(d);\n    \n    // Calcula el tamaño del círculo en función de su posición\n    float circleScale = mod(d, circleSize) / circleSize;\n    \n    // Comprueba si el píxel está dentro de un círculo\n    if (circleScale < 0.1) {\n        fragColor = vec4(circleColor, 1.0);\n    } else {\n        fragColor = vec4(backgroundColor, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}