{"ver":"0.1","info":{"id":"wddcW2","date":"1601813763","viewed":790,"name":"anisotropic x16 filtering","username":"FabriceNeyret2","description":"left:   similar to MIPmaping \nright: aniso x16 nVidia-like anisotropic filtering: use 16 samples along main pixel footprint axis, using MIPmap level of pixel size = small pixel footprint axis.\nMouse control or auto-rot.","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["antialiasing","filtering","anisotropic","tuto","short","anisox16"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// NB: more precise version here: https://www.shadertoy.com/view/4lXfzn\n//                                https://www.shadertoy.com/view/ltXfRr\n\nvoid mainImage( out vec4 O, vec2 u )\n{   O-=O;\n    vec2  R = iResolution.xy,\n          U = ( u -.5 * R ) / R.y;                      // normalized coordinates\n    float t = iMouse.z > 0. ? 6.3*iMouse.x/R.x : .1*iTime, \n          z = .5-U.y,                                   // depth along the plane\n          s = float(textureSize(iChannel0,0).x);        // texture size\n    U = vec2( U.x , 1 )/ z -.0*iTime;                   // perspective parameterization\n    U = vec2(0,.5) + (U-vec2(0,.5)) *mat2(cos(t + vec4(0,33,11,0)));\n \n    vec2 A = dFdx(U), B = dFdy(U),                      // rectangle footprint:\n         L =  A + B *sign(dot(A,B)) ,                   //   major axis\n         l =     A - dot(A,L)*L/dot(L,L)\n             - ( B - dot(B,L)*L/dot(L,L) );             //   approx minor axis \n \n    if (u.x < R.x/2.) {                                 // left: ~regular MIPmap\n     // float lod = log2(length(L) *s);\n        float lod = log2( max(length(A),length(B)) *s );\n         O = textureLod(iChannel0, U, lod);\n    } else {                                            // right: anisox16\n        float lod = log2(length(l) *s);\n        for (float i=-7.5; i< 8.; i++ )\n            O += textureLod(iChannel0, U+i/16.*L, lod) / 16.; \n    }\n    O = pow(O, vec4(1./2.2) );                          // to sRGB\n    if (floor(u.x)==floor(R.x/2.)) O = vec4(1,0,0,0);   // red separator\n}","name":"Image","description":"","type":"image"}]}