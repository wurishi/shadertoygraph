{"ver":"0.1","info":{"id":"WdV3RV","date":"1570568785","viewed":298,"name":"Sine-Gordon particle sandbox","username":"michael0884","description":"Play around with solitonic waves! Mouse click makes an attractor field.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["nonlinearwaves","classicalfieldtheory","theoreticalphysics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 grad(vec2 pos)\n{\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn 0.5*vec2(a10.x - a00.x, a01.x - a10.x)/dx;\n}\n\n\n//colormapping\nvoid mainImage( out vec4 color, in vec2 pos)\n{\n    vec4 field = F(pos);\n    \n    float p = 0.;\n    if(iMouse.z>0.)\n         p = 1./(1.+length(iMouse.xy-pos)/20.);\n    \n    vec2 fgrad = grad(pos);\n    //field energy density \n    float hamiltonian_density = 0.5*(pow(field.y,2.) + dot(fgrad,fgrad)) - (1.-0.4*p)*K*cos(2.*PI*field.x)/(2.*PI);\n    //a weird colored energy mapping.\n    color.xyz = vec3(0.6,0.7,0.8) - 2.*vec3(0.8,0.3,0.1)*hamiltonian_density + 2.*vec3(0.8,0.1,0.1)*pow(hamiltonian_density,2.) - vec3(0.1,0.6,0.9)*p;\n   \tcolor.xyz += clamp(5.*(vec3(0.3,0.5,0.9)*fgrad.x*fgrad.x + vec3(0.5,0.3,0.5)*fgrad.x*fgrad.x),0.,0.4) ;\n    color.w = 0.f;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//scales\n#define dt 0.05\n#define dx 0.1\n\n//nonlinearity\n#define K 1.\n\n//vacuum noise cancelling \n#define noise_cancl 0.001\n\n#define distance 100.\n\n#define SOLITON_CANON\n#define BORDER\n#define canon_speed 0.06\n\n#define size iResolution.xy\n#define F(pos) texture(iChannel0, (pos)/size)\n\n#define PI 3.14159265\n\n///DON'T CHANGE THESE CONSTANTS \n//the frequency of the soliton\n#define freq sqrt(K)*0.95\n//the radius of the soliton in pixels\n#define rad 1.5/(sqrt(K)*dx)\n\n\n//2d soliton approximate solution, exact solution unknown, probably doesn't exist\nvec2 soliton(vec2 pos, float t)\n{\n    pos /= rad;\n    float r2 = dot(pos,pos);\n\tfloat u = sin(freq*t)*exp(-r2);\n\tfloat du_dt = freq*cos(freq*t)*exp(-r2);\n    return vec2(u, du_dt);\n}\n\n//more that 0.3c is unstable with this numerical scheme and approximate solution\n//using the lorentz transformation of a stationary soliton to get a moving one, |speed| < 1\nvec2 moving_solition(vec2 pos, vec2 speed)\n{\n    float v2 = dot(speed, speed);\n    float ps = dot(pos,speed);\n    //lorentz factor\n    float gamma = sqrt(1./(1.-v2));\n    vec2 pos_new = pos + (gamma - 1.)*ps*speed/(v2+0.0001);\n    float time_new = -gamma*ps;\n    return soliton(pos_new, time_new);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    \n    float p = 0.;\n    if(iMouse.z>0.)\n         p = 1./(1.+length(iMouse.xy-pos)/20.);\n    \n    //verlet integration of each point of the field \n\tfield.y = du_dt + dt*( LaplacianOperator(pos) - (1.-0.4*p)*K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y;\n    \n    #ifdef BORDER\n        //border conditions\n        vec2 X = pos/size; \n        field.xy *= clamp((1. - X.x)*(1.-X.y)*X.x*X.y/0.005,0.,1.);\n    #endif\n    \n    #ifdef SOLITON_CANON\n        //soliton generator\n        if(iFrame%50 == 0)\n        {\n            field.xy += moving_solition(pos - size*0.5, canon_speed*vec2(sin(iTime), cos(iTime)));\n        }\n    #endif\n    \n    //initial conditions\n    if(iFrame <1) {\n    \tfield.xy = moving_solition(mod(pos,vec2(distance,distance)) -0.5*vec2(distance,distance), vec2(0.));\n    }\n  \n    //unused\n    field.z = 0.f; \n \tfield.w = 1.f;\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    \n    float p = 0.;\n    if(iMouse.z>0.)\n         p = 1./(1.+length(iMouse.xy-pos)/20.);\n    \n    //verlet integration of each point of the field \n\tfield.y = du_dt + dt*( LaplacianOperator(pos) - (1.-0.4*p)*K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y;\n    \n    //unused\n    field.z = 0.; \n \tfield.w = 1.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    \n    float p = 0.;\n    if(iMouse.z>0.)\n         p = 1./(1.+length(iMouse.xy-pos)/20.);\n    \n    //verlet integration of each point of the field \n\tfield.y = du_dt + dt*( LaplacianOperator(pos) - (1.-0.4*p)*K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y;\n    \n    //unused\n    field.z = 0.; \n \tfield.w = 1.;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//the value of the field is the red channel, green is the time derivative of the value\n\nfloat LaplacianOperator(vec2 pos)\n{\n    vec4 a = F(pos);\n\tvec4 a00 = F(pos + vec2(-1,0));\n    vec4 a10 = F(pos + vec2(1,0));\n    vec4 a01 = F(pos + vec2(0,1));\n    vec4 a11 = F(pos + vec2(0,-1));\n \n\treturn (a00.x+a10.x+a01.x+a11.x-4.f*a.x)/(dx*dx);\n}\n\n\nvoid mainImage( out vec4 field, in vec2 pos)\n{\n    vec4 field_prev = F(pos);\n    float u = field_prev.x;\n    float du_dt = field_prev.y;\n    \n    float p = 0.;\n    if(iMouse.z>0.)\n         p = 1./(1.+length(iMouse.xy-pos)/20.);\n    \n    //verlet integration of each point of the field \n\tfield.y = du_dt + dt*( LaplacianOperator(pos) - (1.-0.4*p)*K*sin(2.*PI*u) ); \n\tfield.x = u + dt*field.y;\n    \n    //unused\n    field.z = 0.; \n \tfield.w = 1.;\n}","name":"Buffer C","description":"","type":"buffer"}]}