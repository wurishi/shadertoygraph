{"ver":"0.1","info":{"id":"4sSfzD","date":"1595204208","viewed":175,"name":"Indra's Net","username":"soma_arc","description":"Not the orbit of disks but the orbit of circles.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","circleinversion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// from Syntopia http://blog.hvidtfeldts.net/index.php/2015/01/path-tracing-3d-fractals/\nvec2 rand2n(vec2 co, float sampleIndex) {\n    vec2 seed = co * (sampleIndex + 1.0);\n\tseed+=vec2(-1,1);\n    // implementation based on: lumina.sourceforge.net/Tutorials/Noise.html\n    return vec2(fract(sin(dot(seed.xy ,vec2(12.9898,78.233))) * 43758.5453),\n                fract(cos(dot(seed.xy ,vec2(4.898,7.23))) * 23421.631));\n}\n\nfloat LINE_THRESHOLD = 0.0001;\nvec3 getLine(vec2 p1, vec2 p2){\n  float xDiff = p2.x - p1.x;\n  float yDiff = p2.y - p1.y;\n  if(abs(xDiff) < LINE_THRESHOLD){\n    //x = c\n    return vec3(1, 0, p1.x);\n  }else if(abs(yDiff) < LINE_THRESHOLD){\n    //y = c\n    return vec3(0, 1, p1.y);\n  }else{\n    //y = ax + b\n    return vec3(yDiff / xDiff, p1.y - p1.x * (yDiff / xDiff), 0);\n  }\n}\n\nfloat calcX(vec3 line, float y){\n  if(line.z == 0.){\n    return (y - line.y) / line.x;\n  }else{\n    return line.z;\n  }\n}\n\nfloat calcY(vec3 line, float x){\n  if(line.z == 0.){\n    return line.x * x + line.y;\n  }else{\n    return line.z;\n  }\n}\n\nvec2 calcIntersection(vec3 line1, vec3 line2){\n  if(line1.z == 0. && line2.z == 0.){\n    float x1 = 1.;\n    float x2 = 5.;\n    float y1 = calcY(line1, x1);\n    float y2 = calcY(line1, x2);\n\n    float x3 = 4.;\n    float x4 = 8.;\n    float y3 = calcY(line2, x3);\n    float y4 = calcY(line2, x4);\n\n    float ksi   = ( y4-y3 )*( x4-x1 ) - ( x4-x3 )*( y4-y1 );\n    float eta   = ( x2-x1 )*( y4-y1 ) - ( y2-y1 )*( x4-x1 );\n    float delta = ( x2-x1 )*( y4-y3 ) - ( y2-y1 )*( x4-x3 );\n\n    float lambda = ksi / delta;\n    float mu    = eta / delta;\n    return vec2(x1 + lambda*( x2-x1 ), y1 + lambda*( y2-y1 ));\n  }else{\n    if(line1.x == 1.){\n      return vec2(line1.z, calcY(line2, line1.z));\n    }else if(line1.y == 1.){\n      return vec2(calcX(line2, line1.z), line1.z);\n    }else if(line2.x == 1.){\n      return vec2(line2.z, calcY(line1, line2.z));\n    }\n    return vec2(calcX(line1, line2.z), line2.z);\n  }\n}\n\nconst vec2 commonCirclePos = vec2(0, 0);\nconst float commonCircleR = 100.;\nconst vec2 p = commonCirclePos + vec2(0, commonCircleR);\nconst vec2 q = commonCirclePos + vec2(-commonCircleR, 0);\nconst vec2 r = commonCirclePos + vec2(0, -commonCircleR);\nconst vec2 s = commonCirclePos + vec2(commonCircleR, 0);\n\nvec2 c1Pos, c2Pos, c3Pos, c4Pos;\nfloat c1R, c2R, c3R, c4R;\n\nvoid calcContactCircles(vec2 commonCirclePos, float commonCircleR){\n  vec2 pqMid = (p + q)/2.;\n  vec2 u = (pqMid - commonCirclePos)/distance(commonCirclePos, pqMid);\n  vec2 a = u * commonCircleR * (sin(iTime) * 6. + 6.72) + commonCirclePos;\n  c1Pos = a;\n  c1R = distance(a, p);\n\n  vec3 aq = getLine(a, q);\n  vec3 qrMidPer = getLine(commonCirclePos, (q + r) / 2.);\n  vec2 b = calcIntersection(aq, qrMidPer);\n  c2Pos = b;\n  c2R = distance(b, q);\n\n  vec3 br = getLine(b, r);\n  vec3 rsMidPer = getLine(commonCirclePos, (r + s) / 2.);\n  vec2 c = calcIntersection(br, rsMidPer);\n  c3Pos = c;\n  c3R = distance(c, r);\n\n  vec3 cs = getLine(c, s);\n  vec3 spMidPer = getLine(commonCirclePos, (s + p) / 2.);\n  vec2 d = calcIntersection(cs, spMidPer);\n  c4Pos = d;\n  c4R = distance(d, s);\n}\n\nvec2 circleInverse(vec2 pos, vec2 circlePos, float circleR){\n\treturn ((pos - circlePos) * circleR * circleR)/(length(pos - circlePos) * length(pos - circlePos) ) + circlePos;\n}\n\nconst int ITERATIONS = 30;\nfloat loopNum = 0.;\nfloat DE(vec2 pos){\n    loopNum = 0.;\n\tbool cont = false;\n    vec3 lastCircle;\n    vec2 lastPos;\n    float lastDr = 1.;\n    float dr = 1.;\n\tfor(int i = 0 ; i < ITERATIONS ; i++){\n\t\tcont = false;\n\t\tif(length(pos - c1Pos) < c1R){\n            lastCircle = vec3(c1Pos, c1R);\n            vec2 diff = (pos - c1Pos);\n        \tlastDr = dr;\n            dr *= (c1R * c1R) / dot(diff, diff);\n            lastPos = pos;\n\t\t\tpos = circleInverse(pos, c1Pos, c1R);\n\t\t\tcont = true;\n            loopNum++;\n\t\t}else if(length(pos - c2Pos) < c2R){\n            lastCircle = vec3(c2Pos, c2R);\n\t\t\tvec2 diff = (pos - c2Pos);\n        \tlastDr = dr;\n            dr *= (c2R * c2R) / dot(diff, diff);\n            lastPos = pos;\n            pos = circleInverse(pos, c2Pos, c2R);\n\t\t\tcont = true;\n            loopNum++;\n\t\t}else if(length(pos - c3Pos) < c3R){\n            lastCircle = vec3(c3Pos, c3R);\n\t\t\tvec2 diff = (pos - c3Pos);\n        \tlastDr = dr;\n            dr *= (c3R * c3R) / dot(diff, diff);\n            lastPos = pos;\n            pos = circleInverse(pos, c3Pos, c3R);\n\t\t\tcont = true;\n            loopNum++;\n\t\t}else if(length(pos - c4Pos) < c4R){\n            lastCircle = vec3(c4Pos, c4R);\n\t\t\tvec2 diff = (pos - c4Pos);\n        \tlastDr = dr;\n            dr *= (c4R * c4R) / dot(diff, diff);\n            lastPos = pos;\n            pos = circleInverse(pos, c4Pos, c4R);\n\t\t\tcont = true;\n            loopNum++;\n\t\t}\n        if(cont == false) {\n            if (loopNum > 0.) {\n            \treturn abs(distance(lastPos, lastCircle.xy) - lastCircle.z)/ lastDr;\t    \n            }\n            break;\n        }\n\t}\n\n\treturn 0.;//length(pos) - commonCircleR;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst float SAMPLE_NUM = 20.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 sum = vec3(0);\n\tfloat ratio = iResolution.x / iResolution.y / 2.0;\n    calcContactCircles(commonCirclePos, commonCircleR);\n    for(float i = 0. ; i < SAMPLE_NUM ; i++){\n        vec2 position = ( (fragCoord.xy + rand2n(fragCoord.xy, i)) / iResolution.yy ) - vec2(ratio, 0.5);\n\t\tposition = position * 600.;\n\n        float d = DE(position);\n\n        if(loopNum > 0. && d < 2. ){/// (1. + .5 * log(loopNum))){\n            sum += hsv2rgb(vec3(0.04 * loopNum,1.0,1.0));\n        }else{\n            sum += vec3(0);\n        }\n    }\n    fragColor = vec4(sum/SAMPLE_NUM, 1.);\n}","name":"Image","description":"","type":"image"}]}