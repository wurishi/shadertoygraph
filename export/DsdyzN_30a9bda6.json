{"ver":"0.1","info":{"id":"DsdyzN","date":"1694791260","viewed":28,"name":"Simpler Noise","username":"foqsi","description":"Wavy fractal noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","noise","simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to generate fractal noise\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(43.13311, 91.98999))) * 1e4);\n}\n\n// Function for fractal noise\nfloat fbm(vec2 p) {\n    float f = 0.0;\n    float w = 0.5;\n    for (int i = 0; i < 5; i++) {\n        f += w * noise(p);\n        p *= 2.0;\n        w *= 0.5;\n    }\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n\n    // Polar coordinates\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n\n    // Swirling effect\n    angle += sin(radius - iTime) * 0.3;\n    radius += sin(5.0 * angle + iTime) * 0.15;\n    vec2 swirledUV = vec2(cos(angle), sin(angle)) * radius;\n\n    // Fractal noise effect\n    float fractalNoise = fbm(swirledUV * 5.0 + iTime * 0.1);\n\n    // Radial pattern\n    float radialPattern = sin(20.0 * (radius - 0.5 * iTime)) / (20.0 * radius);\n\n    // Wave pattern\n    float wavePattern = sin(30.0 * swirledUV.x + iTime) + sin(30.0 * swirledUV.y + iTime);\n\n    // Combine effects\n    float mixedPattern = mix(radialPattern, wavePattern, 0.5 + 0.5 * sin(iTime * 0.1));\n    mixedPattern *= fractalNoise;\n\n    // Time-varying color\n    vec3 col = 0.5 + 0.5 * cos(iTime + swirledUV.xyx + vec3(0, 2, 4));\n    col *= mixedPattern;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}