{"ver":"0.1","info":{"id":"lfB3Rm","date":"1703975392","viewed":19,"name":"Learning RayMarching #01","username":"rikmazz","description":"Learning RayMarching part 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define EPS 0.0001\n#define SURF_DIST 0.001\n\nfloat SphereSDF(in vec3 ro) {\n    vec4 s = vec4(0, 1, 6, 1);\n    return length(s.xyz - ro) - s.w;\n}\n\nfloat PlaneSDF(in vec3 ro) {\n    float planeY = 0.;\n    return ro.y - planeY;\n}\n\nfloat GetSafeDist(in vec3 p){\n    return min(SphereSDF(p), PlaneSDF(p));\n}\n\nvec3 getNormal(in vec3 p) {\n    float epsilon = 0.001; \n    float centerDistance = GetSafeDist(p);\n    float xDistance = GetSafeDist(p + vec3(epsilon, 0, 0));\n    float yDistance = GetSafeDist(p + vec3(0, epsilon, 0));\n    float zDistance = GetSafeDist(p + vec3(0, 0, epsilon));\n    vec3 normal = (vec3(xDistance, yDistance, zDistance) - centerDistance) / epsilon;\n    return normalize(normal);\n}\n\n\n\nfloat RayMarch(in vec3 ro, in vec3 rd) {\n    float d = 0.;\n    \n    for (int i=0; i < MAX_STEPS; i++) {\n        vec3 p = ro + d * rd;\n        \n        float S = GetSafeDist(p);        \n        d += S;\n        if (d < EPS || d > MAX_DIST) break;\n    }\n    \n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord - 0.5* iResolution.xy) / iResolution.y;\n     \n    // Define Camera position and view direction \n    vec3 cameraPos = vec3(0., 1.5, 0.);\n    vec3 rayDir = vec3(uv.x, uv.y - 0.1, 1.);\n    rayDir = normalize(rayDir);\n    \n    // Define Light position\n    vec3 lightPos = vec3(2. * sin(iTime), 3., 4. * cos(iTime));\n    \n    // Begin RayMarching to get z-buffer\n    float d = RayMarch(cameraPos, rayDir);\n    vec3 p = cameraPos + rayDir * d;\n    \n    // Simple Lighting Model\n    vec3 n = getNormal(p);\n    vec3 lightDir = normalize(lightPos - p);\n    float diffuse = clamp(dot(n, lightDir), 0., 1.);\n    \n    // Shadow\n    float ld = RayMarch(p + SURF_DIST * n, lightDir);\n    if (ld < length(lightPos - p)) diffuse *= 0.5;\n    \n    \n    //vec3 col = vec3(d/10.);\n    vec3 mainCol = vec3(.9, .3, .4);\n    vec3 ambientCol = vec3(.2, .1, .5);\n    float ambientFac = .2;\n    vec3 col = ambientFac * ambientCol + (mainCol * diffuse) * (1.-ambientFac);\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}