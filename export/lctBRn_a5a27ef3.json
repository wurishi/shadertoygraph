{"ver":"0.1","info":{"id":"lctBRn","date":"1732646179","viewed":172,"name":"Springy Ball (Pos Vel Acc Jerk)","username":"beans_please","description":"drag mouse.\nplay with INTEGRATION_MODE in Buffer A.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["mouse","fun","ball","derivative","position","velocity","spring","integration","euler","acceleration","springy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 col_bg = vec3(.95, .8, .6);\nconst vec3 col_ball = vec3(.8, .06, .04);\nconst float ball_radius = .18;\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    // UV\n    vec2 uv = (2. * frag_coord - iResolution.xy) / min(iResolution.x, iResolution.y);\n    float uv2px = 2. / min(iResolution.x, iResolution.y);\n    \n    // get ball position\n    vec2 ball_pos = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    \n    // render\n    float sd = distance(uv, ball_pos) - ball_radius;\n    vec3 col = mix(col_bg, col_ball, remap01(sd, uv2px, 0.));\n    \n    // output\n    col = pow(col, vec3(1. / 2.2));\n    frag_col = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float remap01(float x, float start, float end)\n{\n    return clamp((x - start) / (end - start), 0., 1.);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// pixel (0, 0) stores ball position, (1, 0) stores velocity,\n// (2, 0) stores acceleration, (3, 0) stores jerk.\n\n// possible values for integration mode\n#define POS 0              /* 0th order */\n#define VELOCITY 1         /* 1st order */\n#define ACCELERATION 2     /* 2nd order */\n#define JERK 3             /* 3rd order */\n\n// change integration mode here\n#define INTEGRATION_MODE 3\n\nvoid mainImage(out vec4 frag_col, in vec2 frag_coord)\n{\n    // reset to 0 in the first frame\n    if (iFrame < 2 || iTime < .02)\n    {\n        frag_col = vec4(0);\n        return;\n    }\n    \n    // skip out-of-bounds pixels\n    if (int(frag_coord.x) > 3 || int(frag_coord.y) > 0)\n    {\n        return;\n    }\n    \n    // retrieve previous values\n    vec2 pos = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    vec2 vel = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n    vec2 acc = texelFetch(iChannel0, ivec2(2, 0), 0).xy;\n    vec2 jerk = texelFetch(iChannel0, ivec2(3, 0), 0).xy;\n    \n    // get mouse position, (0, 0) if mouse isn't pressed.\n    vec2 mouse_uv = vec2(0);\n    if (iMouse.z > .5)\n    {\n        mouse_uv = (2. * iMouse.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n    }\n    \n    // update and integrate\n    #if INTEGRATION_MODE == POS\n        pos = mouse_uv;\n    #elif INTEGRATION_MODE == VELOCITY\n        vel = 10. * (mouse_uv - pos);\n        pos += vel * iTimeDelta;\n    #elif INTEGRATION_MODE == ACCELERATION\n        acc = 80. * (mouse_uv - pos);\n        vel += acc * iTimeDelta;\n        vel *= pow(.01, iTimeDelta); // velocity damping\n        pos += vel * iTimeDelta;\n    #elif INTEGRATION_MODE == JERK\n        jerk = 1600. * (mouse_uv - pos);\n        acc += jerk * iTimeDelta;\n        acc *= pow(.000001, iTimeDelta); // acceleration damping\n        vel += acc * iTimeDelta;\n        vel *= pow(.0001, iTimeDelta); // velocity damping\n        pos += vel * iTimeDelta;\n    #endif\n    \n    // store new values\n    ivec2 icoord = ivec2(frag_coord);\n    if (icoord == ivec2(0, 0)) frag_col = vec4(pos, 0, 0);\n    if (icoord == ivec2(1, 0)) frag_col = vec4(vel, 0, 0);\n    if (icoord == ivec2(2, 0)) frag_col = vec4(acc, 0, 0);\n    if (icoord == ivec2(3, 0)) frag_col = vec4(jerk, 0, 0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}