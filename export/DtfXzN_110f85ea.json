{"ver":"0.1","info":{"id":"DtfXzN","date":"1674353426","viewed":202,"name":"Monochrome Crystal","username":"Hyeve","description":"mmmm.... this turned out pretty interesting. I also improved several of my renderer features along the way, including far better soft shadows that are now integrated into the same raymarching loop.","likes":24,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","glass","reflections","monochrome","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define DTR 0.01745329\n#define ang(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define vmin(a, b) (a.x < b.x ? a : b)\n\nvec2 uv=vec2(0),sp;\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld,no,on;\nvec4 fc=vec4(0),cc=vec4(0);\nfloat tt,cd,sd,md,io,oa,td=0.,li;\nint sk,sc;\n\nfloat bx(vec3 p,vec3 s){vec3 q=abs(p)-s;return min(max(q.x,max(q.y,q.z)),0.)+length(max(q,0.));}\nfloat h11 (float a){return fract(sin((a)*12.9898)*43758.5453123);}\nvec3 rot(vec3 a, vec3 r){a.xy*=ang(r.x);a.yz*=ang(r.y);a.zx*=ang(r.z);return a;}\n\n#define pi 3.1415926535\n\n\nvec3 pixels(vec3 p, float s, float r) {\n\tp += vec3(h11(floor(p.y * s)),h11(floor(p.z * s)),h11(floor(p.x * s)));\n  p=rot(p, vec3(tt*0.05+1.));\n\treturn vec3(r-h11(floor(p.x * s))*r, r-h11(floor(p.y * s))*r, r-h11(floor(p.z * s))*r);\n}\n\nvec3 crys(vec3 p, float s) {\t\n\treturn pixels(p, s, 0.5) + 0.4;\n}\n\nfloat obj(vec3 p, vec3 s, float num) {\n  vec3 pp = p;\n  p = abs(p) - s;\n  \n  float obj1 = bx(pp, s);\n  float obj2 = max(obj1, -bx(p, s*0.5-0.05));\n  float obj3 = max(max(obj2, bx(p, s*0.55)), -obj1-0.4);\n  float obj4 = min(bx(pp, s*0.9), obj3);\n  float obj5 = max(obj1, -obj3+0.1);\n  float obj6 = max(obj2, -obj1-0.25);\n  \n  switch(int(mod(num,6.))) {\n    case 0: return obj1;\n    case 1: return obj2;\n    case 2: return obj3;\n    case 3: return obj4;\n    case 4: return obj5;\n    case 5: return obj6;\n  }\n  \n  return obj6;\n}\n\nfloat objnum = 0.;\n\nfloat mp(vec3 p)\n{\t\t\n\t\tvec3 pp = p;\n  \n  \n    p=rot(p,vec3(tt*-0.2));\n \n\t\n    sd = length(p);\n   \n  \n    float ob = obj(p, vec3(3),objnum);\n  \n    sd = min(sd,ob);\n    \n    float ins = obj(p, vec3(2.1),objnum) - sd;\n\n  \n    sd = min(sd, pp.y + 6.);\n  \n    p = pp;\n    p.x = abs(p.x) - 9.;\n    p.xz *= ang(tt*0.1);\n    sd = min(sd, bx(p,vec3(2,10,2)));\n    ins = min(ins,bx(p,vec3(1.1,8,1.1)) - sd);\n  \n\t\tsd = abs(sd) - 0.0005;\n\t\n\t\n\t\tif(sd<0.05)\n\t\t{\t\n      no = vec3(0);\n\t\t\tio = pp.z > 0. && pp.y > -5.5 ? -1.1 : 1.1;\n\t\t\toc=pp.y<-5.5?vec3(0.7):vec3(1);\n\t\t\toa=pp.y<-5.5?0.5:pow(ins,4.);\n\t\t\tss=vec3(0);\n\t\t\tsk = -1;\n\t\t\tsp=vec2(1,5);\n\t\t}\n\t\treturn sd;\n}\n\nvoid nm(){mat3 k=mat3(cp,cp,cp)-mat3(.001);cn=on=normalize(mp(cp)-vec3(mp(k[0]),mp(k[1]),mp(k[2])));cn=rot(cn,no);}\n\nvoid tr(vec4 i){for(li=cd=0.,md=64.;li+cd<i.x;li++,td+=sd*i.w){cd+=mp(cp=ro+on*i.y+(i.w>0.?rd:-ld)*cd)*i.z;if(sd<md&&sd<cd)md=sd;if(sd<(i.w>0.?1e-4:1e-2))break;}md/=.5;cp-=rd*0.005;nm();}\n\nvoid px(vec3 rd)\n{\n  vec3 bg=cc.rgb=vec3(1.,1.,1.)*0.8-pow(length(uv),1.3)*0.3;\n\tif(cd<128.){cc.a=oa;ld=normalize(cp-vec3(0,10,-10));\n\tfloat df=max(dot(cn,-ld),0.5),sp=pow(max(1.-length(cross(rd+ld,cn)),0.),sp.y)*sp.x,\n\tfo=exp(-pow(0.015*td,5.)),ao=1.-clamp(mp(cp+on*.1)/.1,0.,1.);\n\tvec3 fr=pow(1.-abs(dot(rd,-cn)),3.)*mix(cc.rgb,oc,1.);\n  cc.rgb=(oc*df+fr+sp+ss)-ao*0.5;\n\ttr(vec4(128,0.5,0.5,0));float sh=pow(1.-clamp(md,0.,1.),1.5);cc.rgb-=sh*0.1;\n\tcc.rgb+=gl;cc.rgb=mix(bg, cc.rgb, fo);}else cc.a=1.;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvoid animate() {\n  \n  if(tt < 5. || tt > 151.) return;\n  \n  objnum = tt - 4.;\n  \n  if(tt > 25.) objnum = floor(length(uv)*tt / 5.) + tt;\n  \n  if(tt < 15.) return;\n  \n  if(tt > 30.) uv *= ang(tt*0.1+0.1);\n  \n  float xs = ceil(uv.x);\n  float ys = ceil(uv.y);\n  \n  \n \n  if(tt > 35.) xs = ceil(uv.x + sin(uv.y*10.+tt)*0.03);\n  if(tt > 40.) ys = ceil(uv.y + cos(uv.x*10.+tt)*0.03);\n \n  \n  objnum += xs;\n  ro.y += xs;\n  \n  if(tt < 20.) return;\n  \n  objnum += ys;\n  ro.x += ys;\n  \n  \n  if(tt < 45.) return;\n  \n  ro.x += h11(ceil(tt+ys)) - 0.5;\n  ro.y += h11(floor(tt+xs)) - 0.5;\n  \n  if(tt < 50.) return;\n  \n  ro.xy += (crys(uv.xyx, tt*0.2).xy - vec2(0.5)) * sin(tt*0.5);\n\n  if(tt < 55.) return;\n \n  tt += objnum * min(tt / 100.,1.);\n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  float ott = mod(time, 157.) + (time < 157. ? 0. : 5.);\n  tt = ott;\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n  \n  \n\n  ro=vec3(0,0,-15);\n  rd = normalize(vec3(uv, 1));\n  \n\n  \n  animate();\n  \n  for(int i=0;i<10;i++)\n  {\n\t\ttr(vec4(512,0,1,1));ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n    if(io<0.)cr=reflect(rd,cn);px(rd);\n\t\tif(length(cr)!=0.)rd=cr;\n\t\tif(sc<1) fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;sc=sc==0?sk:sc-1;\n  }\n  col=fc/fc.a;\n\t\n\tcol *= 1.-pow(length(uv), 4.);\n\tcol = pow(col,vec4(0.7));\n\t\n    if(tt > 60. && h11(floor(objnum)) < tt / 400. && ott < 151.) col = vec4(1) - col;\n    \n    if(ott > 153.) col = mix(vec4(0), col, min(ott - 153.,1.));\n    else if(ott > 150.) col = mix(col, vec4(0), min(ott - 150.,1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 60.","name":"Common","description":"","type":"common"}]}