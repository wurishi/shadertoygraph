{"ver":"0.1","info":{"id":"tltfWl","date":"1613695802","viewed":136,"name":"Looping 1D Noise (take 2)","username":"airtight","description":"Looping 1 noise (take 2). Optimized version of: https://www.shadertoy.com/view/tddfWB\n\nBased on: http://connorbell.ca/2017/09/09/Generating-Looping-Noise.html (Method 2)\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","loop","1d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n) { return fract(sin(n) * 1e4); }\n\n// looping noise\n// note x range must be same size or bigger than loopLen\n// use bigger loopLen for more detail in loop\nfloat loopNoise(float x, float loopLen) {\n\n    // cycle the edges\n    x = mod(x, loopLen);\n\n    float i = floor(x); // floored integer component\n    float f = fract(x); // fractional component\n    float u = f*f*f*(f*(f*6.-15.)+10.); // use f to generate a curve\n\n    // interpolate from the current edge to the next one wrt cycles\n    return mix(hash(i), hash(mod(i + 1.0,  loopLen)), u); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //looping 1d noise every 2 seconds\n    float nloop = loopNoise(uv.x * 12. + iTime * 2., 12.);\n    vec3 col = vec3(step(nloop,uv.y));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}