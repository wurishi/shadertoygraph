{"ver":"0.1","info":{"id":"DsKBDG","date":"1698701040","viewed":22,"name":"CSSBattle#174 - Witch's Hat","username":"Beowolve","description":"[url]https://cssbattle.dev/play/174[/url]","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["halloween","hat","cssbattle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define S(v) smoothstep(ss,-ss,v)\n\n// IQs version from https://www.shadertoy.com/view/4lsXDN\nfloat sdEllipse( vec2 p, vec2 ab )\n{\n    // symmetry\n\tp = abs( p );\n\n    // find root with Newton solver\n    vec2 q = ab*(p-ab);\n\tfloat w = (q.x<q.y)? 1.570796327 : 0.0;\n    for( int i=0; i<5; i++ )\n    {\n        vec2 cs = vec2(cos(w),sin(w));\n        vec2 u = ab*vec2( cs.x,cs.y);\n        vec2 v = ab*vec2(-cs.y,cs.x);\n        w = w + dot(p-u,v)/(dot(p-u,u)+dot(v,v));\n    }\n    \n    // compute final point and distance\n    float d = length(p-ab*vec2(cos(w),sin(w)));\n    \n    // return signed distance\n    return (dot(p/ab,p/ab)>1.0) ? d : -d;\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat ring(vec2 p, float radius, float width, float aa) {\n    float d = length(p) - radius;\n    return max(d-width,-d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    vec2 p = uv;\n    float ss = .75/iResolution.y;\n    \n    vec3 bg = vec3(0.957,0.863,0.749);\n    vec3 c1 = vec3(0.188,0.22,0.247);\n    vec3 c2 = vec3(0.333,0.427,0.498);\n    vec3 c3 = vec3(0.984,0.816,0.22);\n\n    vec3 col = bg;\n    \n    p.y += .2;\n    float hat = sdEllipse(p, vec2(.25, .1));\n    p.y -= .5;\n    hat = opUnion(hat, sdTriangleIsosceles(p, vec2(.17,-.5)));\n    \n    col = mix(col, c1, S(hat));\n    col = mix(col, c2, S(opIntersection(ring(p, .5, .025, ss),hat)));\n    \n    p.y += .51;\n    col = mix(col, c3, S(sdBox(p, vec2(.03, .015)) - .015));\n    \n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}