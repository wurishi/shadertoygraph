{"ver":"0.1","info":{"id":"tdlXWB","date":"1552105551","viewed":482,"name":"Wrap Around Shifting Panels","username":"mathmasterzach","description":"Watch as the panels are randomized. Panels are dynamically resized to fit within the dimensions for the current window size. Click or resize to reset. Based on a puzzle game that I made a while back.","likes":12,"published":3,"flags":32,"usePreview":0,"tags":["torus","texture","dynamic","shifting","panels","wraparound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float size=1.;\nfloat speed=1.;\n\n//hash function from https://www.shadertoy.com/view/4djSRW\n//  3 out, 1 in...\nvec3 hash31(float p){\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+19.19);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    int a=int(iResolution.x);\n    int b=int(iResolution.y);\n    while(a!=b){\n        if(a>b){\n        \ta=a-b;\n        }else{\n        \tb=b-a;\n        }\n    }\n    while(a%2==0&&a>40){\n    \ta/=2;\n    }\n    float size=float(a);\n    b=1;\n    while(a%2==0&&b<a/4){\n    \tb*=2;a/=2;\n    }\n    float speed=float(b);\n    int ssp=int(size/speed);\n    \n    float updateComps=texture(iChannel0,vec2(.5)).a;\n    if(iFrame<int(size)||(iFrame/ssp<int(updateComps))){\n    \tfragColor=texture(iChannel1,fragCoord/iResolution.xy);\n        fragColor.rgb*=step(size*abs(fract(fragCoord.x/size)-.5),(size-2.)/2.);\n        fragColor.rgb*=step(size*abs(fract(fragCoord.y/size)-.5),(size-2.)/2.);\n        fragColor.a=updateComps;\n    }else{\n        vec2 crd=fragCoord;\n        vec3 sh=hash31(float(iFrame/ssp));\n        sh.z=speed*(2.*step(sh.z,.5)-1.);\n        if(sh.x>.5&&abs(int(fragCoord.x/size)-int(sh.y*iResolution.x/size))<1){\n            crd+=vec2(0,sh.z);\n        }else if(sh.x<=.5&&abs(int(fragCoord.y/size)-int(sh.y*iResolution.y/size))<1){\n            crd+=vec2(sh.z,0);\n    \t}\n        fragColor=texture(iChannel0,crd/iResolution.xy);\n    }\n    if(iMouse.z>.01||abs(iResolution.x-(100./fract(updateComps)))>1.){\n    \tfragColor.a=1.+float(iFrame/ssp)+(100./iResolution.x);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}