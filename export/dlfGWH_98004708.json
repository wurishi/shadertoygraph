{"ver":"0.1","info":{"id":"dlfGWH","date":"1671680639","viewed":83,"name":"Hamster Halftone","username":"starmole2","description":"Halftone\nPretty accurate, lots of parameters to play with. ","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["halftone","cmyk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159265359;\n\nvec4 rgb2cmyk(vec3 rgb) {\n    //rgb = pow(rgb, vec3(2.2));\n    vec4 r; \n    r.w = 1.0 - max(max(rgb.x, rgb.y), rgb.z);\n    if ( r.w == 1.0 ) \n        return vec4(0.0, 0.0, 0.0, 1.0);\n        \n    float invk = 1.0 / (1.0 - r.w);\n    r.x = (1.0 - rgb.x - r.w) * invk; \n    r.y = (1.0 - rgb.y - r.w) * invk;\n    r.z = (1.0 - rgb.z - r.w) * invk;\n    return r;\n}\n\nvec3 cmyk2rgb(vec4 cmyk) {\n    vec3 r;\n    r.x = (1.0 - cmyk.x) * (1.0 - cmyk.w);\n    r.y = (1.0 - cmyk.y) * (1.0 - cmyk.w);\n    r.z = (1.0 - cmyk.z) * (1.0 - cmyk.w);\n    //r = pow(r, vec3(1.0/2.2));\n    return r;\n}\n\nfloat halftoneChannel(vec4 masksel, vec2 uv, vec2 center, float dotsize, float rr ) {\n    mat2x2 rot = mat2x2(cos(rr), -sin(rr), sin(rr), cos(rr));\n    mat2x2 invrot = inverse(rot);\n    \n    float mipscale = 8.0;\n    vec2 dx = dFdx(uv) * mipscale;\n    vec2 dy = dFdy(uv) * mipscale;\n\n    vec2 uvrot = rot * (uv-center);\n\n    vec2 griduv = floor(uvrot / dotsize) * dotsize;\n    vec2 uvgrid00 = invrot * griduv + center;\n    vec2 uvgrid01 = invrot * (griduv + vec2(dotsize, 0.0))+ center;\n    vec2 uvgrid10 = invrot * (griduv + vec2(0.0, dotsize))+ center;\n    vec2 uvgrid11 = invrot * (griduv + vec2(dotsize, dotsize))+ center;\n\n    vec4 col00 = rgb2cmyk(textureGrad(iChannel0, uvgrid00, dx, dy).xyz);\n    vec4 col01 = rgb2cmyk(textureGrad(iChannel0, uvgrid01, dx, dy).xyz);\n    vec4 col10 = rgb2cmyk(textureGrad(iChannel0, uvgrid10, dx, dy).xyz);\n    vec4 col11 = rgb2cmyk(textureGrad(iChannel0, uvgrid11, dx, dy).xyz);\n\n    float d00 = length(uvgrid00 - uv);\n    float d01 = length(uvgrid01 - uv);\n    float d10 = length(uvgrid10 - uv);\n    float d11 = length(uvgrid11 - uv);\n    \n    float sc = sqrt(2.0)*.5*dotsize;  \n    float i00 = dot(col00, masksel) * sc;\n    float i01 = dot(col01, masksel) * sc;\n    float i10 = dot(col10, masksel) * sc;\n    float i11 = dot(col11, masksel) * sc;\n\n    float r = 0.0;\n    \n    float s = dotsize / 10.0; // smoothing factor\n    r += smoothstep(d00-s, d00+s, i00);\n    r += smoothstep(d01-s, d01+s, i01);\n    r += smoothstep(d10-s, d10+s, i10);\n    r += smoothstep(d11-s, d11+s, i11);\n    \n    return min(r, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xx;\n    uv.y += (iResolution.y / iResolution.x) * .5;\n    //uv.x = 1.0 - uv.x;\n    vec2 duvx = dFdx(uv);\n    vec2 duvy = dFdy(uv);\n\n    float dotsize = 1.0 / (iResolution.x / 16.0); // pixels per dot\n\n    vec3 col = texture(iChannel0, uv).xyz;\n   \n    vec2 center = vec2(0.5, 0.5); // center for screen rotations\n    float t = iTime * .05;\n    \n    vec3 csum = vec3(0.0);\n    int ns = 2;   // grid super sample box\n    for ( int ys = 0; ys<ns; ys++ ) {\n        for ( int xs = 0; xs<ns; xs++ ) {\n            vec2 uvs = uv + duvx * float(xs)/float(ns) + duvy * float(ys)/float(ns);\n            vec4 cmyk; \n            cmyk.x = halftoneChannel(vec4(1.0, 0.0, 0.0, 0.0), uvs, center, dotsize, t+1.8326);\n            cmyk.y = halftoneChannel(vec4(0.0, 1.0, 0.0, 0.0), uvs, center, dotsize, t*.9+1.1708);\n            cmyk.z = halftoneChannel(vec4(0.0, 0.0, 1.0, 0.0), uvs, center, dotsize, t*.8+1.309);\n            cmyk.w = halftoneChannel(vec4(0.0, 0.0, 0.0, 1.0), uvs, center, dotsize, t*.7+0.261799);\n            vec3 rgb = cmyk2rgb(cmyk);\n            csum += rgb;\n        }\n    }\n    csum /= float(ns*ns);\n\n    if ( uv.x > iMouse.x / iResolution.x ) \n        col = csum;\n    else\n        col = cmyk2rgb(rgb2cmyk(col));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}