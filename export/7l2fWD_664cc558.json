{"ver":"0.1","info":{"id":"7l2fWD","date":"1652241028","viewed":79,"name":"Lotka-Volterra model","username":"biogeo","description":"This models a reaction-diffusion system instantiating the Lotka-Volterra predator-prey ecological model. ","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["reactiondiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst mat2x3 colors = mat2x3(\n    0.0, 0.6, 1.0,\n    1.0, 0.1, 0.2\n);\n\nvoid mainImage( out vec4 col, in vec2 pos ) {\n    vec2 uv = pos / iResolution.xy;\n    col = texture(iChannel0, uv);\n    col.rgb = colors * pow(col.xy, vec2(0.3));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Handle the Lotka-Volterra state system.\n// state.x represents the density of \"prey\"\n// state.y represents the density of \"predators\"\n//\n// dx/dt = d Dx + ax - bxy\n// dy/dt = d Dy - cy + dxy\n//\n// where D is the Laplacian operator, and d the diffusion rate\n//\n// License: permission is granted to use or modify this work without\n// restriction. Credit is welcome but not required.\n\n// Flip these flags to let the reaction and/or diffusion rate\n// parameters vary spatially\nconst bool spatial_reaction = true;\nconst bool spatial_diffusion = true;\n\nconst float diffusionRate = 1.e-5;\nconst float reactionScale = 10.0;\n\n// GLSL matrices are backwards\n// so the initialization looks like the transpose of what we want\nconst mat3x2 reaction = reactionScale * mat3x2(\n    // effect on      effect of\n    //prey   predator\n    0.6,      0.0,   // prey\n    0.0,     -1.0,   // predator\n    -1.2,     1.0    // interaction\n);\n\nvoid mainImage(out vec4 state, in vec2 pos)\n{\n    vec2 delta = 1.0 / iResolution.xy;\n    vec2 uv = delta * pos;\n    if (iFrame == 0)\n        state.xy = simplex_noise_2d(50.*uv);\n    else\n        state = texture(iChannel0, uv);\n    state.z = 0.0;\n    mat3x2 r = reaction;\n    if (spatial_reaction) {\n        vec2 rr = 1.5 * (1.0 - sqrt(texture(iChannel2, uv).rb));\n        r[0][0] = rr.x;\n        r[2][0] = -rr.y;\n    }\n    float d = diffusionRate;\n    if (spatial_diffusion) {\n        d *= texture(iChannel3, uv).r;\n    }\n    \n    vec2 ds = r * vec3(state.xy, state.x*state.y);\n    ds += d * laplacian(iChannel0, uv, delta).xy;\n    state.xy += ds / 60.;\n    state.xy = max(state.xy, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Calculate the Laplacian of a field represented in a sampler2D\n// using periodic (toroidal) boundary conditions\n// Pass delta = 1.0 / iResolution.xy in most cases\nvec4 laplacian(in sampler2D field, in vec2 pos, in vec2 delta) {\n    vec3 deltaz = vec3(delta, 0.0);\n    return (\n        texture(field, mod(pos + deltaz.xz,1.0)) +\n        texture(field, mod(pos - deltaz.xz,1.0)) +\n        texture(field, mod(pos + deltaz.zy,1.0)) +\n        texture(field, mod(pos - deltaz.zy,1.0)) +\n        -4.0 * texture(field, pos)\n    ) / (deltaz.x*deltaz.y);\n}\n\n// Hash and simplex noise credit iq, https://www.shadertoy.com/view/Msf3WH\nvec2 hash(vec2 p) {\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat simplex_noise(in vec2 p) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\nvec2 simplex_noise_2d(in vec2 p) {\n    vec2 o;\n    o.x = simplex_noise(p);\n    o.y = simplex_noise(hash(p));\n    return o;\n}","name":"Common","description":"","type":"common"}]}