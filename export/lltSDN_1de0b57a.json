{"ver":"0.1","info":{"id":"lltSDN","date":"1479765006","viewed":117,"name":"Mighty Morphin Somethin Somethin","username":"GeekyMcGeekface","description":"Just learning and messing with SDFs.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Part 2 Challenges\n * - Change the diffuse color of the sphere to be blue\n * - Change the specual color of the sphere to be green\n * - Make one of the lights pulse by having its intensity vary over time\n * - Add a third light to the scene\n */\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n\n/**\n * Signed distance function for a sphere centered at the origin with radius 1.0;\n */\nfloat sphereSDF(vec3 samplePoint) {\n    return length(samplePoint) - 1.0;\n}\n\nfloat sphereSDF(vec3 samplePoint, float r) {\n    return length(samplePoint) - r;\n}\n\nfloat sphereSDF(vec3 samplePoint, vec3 posSphere, float r) {\n    return length(samplePoint - posSphere) - r;\n}\n\nfloat udRoundBox( vec3 p, vec3 size, float r )\n{\n  return length(max(abs(p) - size, 0.0)) - r;\n}\n\nfloat udRoundBox( vec3 p, vec3 size, vec3 pos, float r )\n{\n  return length(max(abs(p - pos) - size, 0.0)) - r;\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\n/**\n * Constructive solid geometry intersection operation on SDF-calculated distances.\n */\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\n\n/**\n * Constructive solid geometry difference operation on SDF-calculated distances.\n */\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n\n/**\n * Constructive solid geometry difference operation on SDF-calculated distances.\n */\nfloat weirdSDF(float distA, float distB) {\n    return mix(distA, distB, sin(iTime) + 1.0);\n}\n\n// polynomial smooth min (k = 0.1);\nfloat sdfBlend( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n    \n/**\n * Signed distance function describing the scene.\n * \n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 samplePoint) {\n\n\n//    float box = udRoundBox( samplePoint, vec3(1.2, 0.2, 0.5), 0.1 );\n    float box = udRoundBox( samplePoint,\n                           \tvec3(1.2, 0.2, 0.5),\n                           vec3(sin(iTime*1.8 + 0.2) * 0.3, cos(iTime + 0.2) * 0.45, 0.0),\n                           0.2 );\n\n    float sphere = sphereSDF(samplePoint,\n                             vec3(sin(iTime + 0.7) * 0.6, cos(iTime*2.2 + 0.17) * 0.2, 0.0),\n                             0.6 + (sin(iTime*3.0)*0.3));\n\n    float sphere2 = sphereSDF(samplePoint,\n                             vec3(cos(iTime*1.4 + 1.7) * 0.55, sin(iTime*2.8 + 3.17) * 0.3, 0.4),\n                             0.5 + (sin(iTime*3.0)*0.2));\n\n//    float blend1 = sdfBlend(box, sphere, 0.2);\n//    float blend2 = sdfBlend(blend1, sphere2, 0.2);\n\n//    float blend1 = unionSDF(box, sphere );\n//    float blend2 = unionSDF(blend1, sphere2 );\n//    float blend1 = intersectSDF(box, sphere );\n//    float blend2 = intersectSDF(blend1, sphere2 );\n//    float blend1 = differenceSDF(box, sphere );\n//    float blend2 = differenceSDF(blend1, sphere2 );\n    float blend1 = weirdSDF(box, sphere );\n    float blend2 = sdfBlend(blend1, sphere2, 0.2 );\n\n    \n    return( blend2 );\n    \n}\n\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n * \n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n            \n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n * \n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n//    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n//    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n//    vec3 color = ambientLight * k_a;\n\n    vec3 color = k_a;\n    \n    vec3 light1Pos = vec3(4.0 * sin(iTime),\n                          2.0,\n                          4.0 * cos(iTime));\n//    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    vec3 light1Intensity = vec3(0.5, 0.5, 0.5);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n//    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    vec3 light2Intensity = vec3(0.5, 0.5, 0.5);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0.0, 0.0, 5.0);\n    float dist = shortestDistanceToSurface(eye, dir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n        // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n\t\treturn;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * dir;\n    \n    // =================================================================================================\n    // =================================================================================================\n#define WITH_A_DASH_OF_PLASMA\n\n#ifdef WITH_A_DASH_OF_PLASMA\n    vec2 fragPos = fragCoord;\n    \n    float t = iTime / 2.;\n//    U = 8.* U / iResolution.xy - 4.;\n    fragPos = 2.* fragPos / iResolution.xy - 1.;\n    vec3 U = vec3(fragPos, fragPos.x * fragPos.y );\n\n    \n    for (int i=0; i<8; i++)\n    \tU += cos( U.yxz * 3. + vec3(t,1.6,t*0.3)) / 3.,\n    \tU += sin( U.zxy + t  + vec3(1.6,0.,t*0.7)) / 2.,\n    \tU *= 1.2;\n    \n\n//\to.xyz += abs(mod(U,16.) / 16.);\n#endif\n\n    // =================================================================================================\n    // =================================================================================================\n    \n    vec3 K_a = vec3(0.15, 0.15, 0.15);\t\t// Material Ambient color\n    vec3 K_d = vec3(1.0, 0.9, 0.8);\t\t// Material Diffuse color\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\t\t// Material Specular color (components > 1 are ok!)\n    float shininess = 25.0;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, eye);\n\n#ifdef WITH_A_DASH_OF_PLASMA\n\tcolor *= abs(mod(U, 16.) / 16.);\n#endif    \n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}