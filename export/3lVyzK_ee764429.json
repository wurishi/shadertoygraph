{"ver":"0.1","info":{"id":"3lVyzK","date":"1611342904","viewed":73,"name":"Procedural Perlin Noise","username":"Nocturnal","description":"Procedural perlin noise using my random function.\nBased on this article: http://devmag.org.za/2009/04/25/perlin-noise/\n\nStill need better smoothing for the pixels tho","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define OCTAVES 8\n#define PERSISTANCE 0.6\n#define SEED 123\n\nfloat rand(vec2 coords, float seed) {\n    return mod(fract(cos(dot(coords*.753456357,coords*.456753132))*(seed+10.)),1.);\n}\n\nfloat interpolate(float x0, float x1, float alpha)\n{\n   return x0 * (1. - alpha) + alpha * x1;\n}\n\nfloat sampleSmoothNoise(vec2 coords, float seed, float octave) {\n    int samplePeriod = int(pow(2.,octave));\n    float sampleFrequency = 1. / float(samplePeriod);\n    \n    int horizontal0 = (int(coords.x) / samplePeriod) * samplePeriod;\n    int horizontal1 = (horizontal0 + samplePeriod) % int(iResolution.x);\n    float horizontalBlend = (coords.x - float(horizontal0)) * sampleFrequency;\n    \n    int vertical0 = (int(coords.y) / samplePeriod) * samplePeriod;\n    int vertical1 = (vertical0 + samplePeriod) % int(iResolution.y);\n    float verticalBlend = (coords.y - float(vertical0)) * sampleFrequency;\n    \n    float top = interpolate(rand(vec2(horizontal0, vertical0), seed),\n                            rand(vec2(horizontal1, vertical0), seed),\n                            horizontalBlend);\n    float bottom = interpolate(rand(vec2(horizontal0, vertical1), seed),\n                               rand(vec2(horizontal1, vertical1), seed),\n                               horizontalBlend);\n    float final = interpolate(top, bottom, verticalBlend);\n    return final;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float seed = 0.;\n    if (SEED == 0) { seed = iTime; }\n    else {seed = float(SEED); }\n    \n    float totalAmplitude = 0.;\n    float amplitude = 1.;\n    \n    vec2 coords = fragCoord * 0.1;\n    \n    //Create smooth noise\n    float smoothNoise[OCTAVES];\n    for (int i = 0; i < OCTAVES; i++)\n    {\n        smoothNoise[i] = sampleSmoothNoise(coords, seed, float(i));\n    }\n    \n    //Blend noises together\n    float perlinNoise = 0.;\n    for (int i = OCTAVES; i >= 0; i--)\n    {\n        amplitude *= PERSISTANCE;\n        totalAmplitude += amplitude;\n        perlinNoise += smoothNoise[i] * amplitude;\n    }\n    \n    perlinNoise /= totalAmplitude;\n    vec3 col = vec3(perlinNoise, perlinNoise, perlinNoise);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    //zoom out\n    //float value = sampleSmoothNoise(fragCoord-iResolution.xy/2., seed, .1);\n    //fragColor = vec4(value, value, value, 1.0);\n}","name":"Image","description":"","type":"image"}]}