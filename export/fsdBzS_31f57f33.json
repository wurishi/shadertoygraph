{"ver":"0.1","info":{"id":"fsdBzS","date":"1656746402","viewed":55,"name":"Australian Aboriginal Flag","username":"Mantrid","description":"My first shader! Useful for learning how fragment shaders draw","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","basic","flag","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 circle(vec2 uv, float ratio, float radius) {\n    // Draw the circle if x^2 + y^2 <= radius^2\n    \n    // Succinct version\n    //return vec3(1.0 - step(pow(radius, 2.0), pow((uv.x -0.5) * ratio, 2.0) + pow(uv.y - 0.5, 2.0)));\n\n    // Expanded version, for readability\n    float x2 = pow((uv.x - 0.5) * ratio, 2.0); // (x * ratio)^2\n    float y2 = pow(uv.y - 0.5, 2.0); // y^2\n    float r2 = pow(radius, 2.0); // radius^2\n    float yesNo = step(r2, x2 + y2); // step() returns 0 if 2nd value is less than 1st value, otherwise it returns 1\n    return vec3(1.0 - yesNo); // Invert the result\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalised pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y; // Get display ratio\n    vec3 col = vec3(0,0.0,0); // Set default colour to black\n\n    // Method 1\n    /*\n    // Draw the circle if x^2 + y^2 <= radius^2\n    if (pow((uv.x -0.5) * ratio, 2.0) + pow(uv.y - 0.5, 2.0) <= pow(0.25, 2.0)) {\n        col = vec3(1, 0.784, 0.157); // Pantone yellow approximation\n    } else if (uv.y < 0.5) { // Bottom half of flag\n        col = vec3(0.827,0.129,0.173); // Pantone red approximation\n    }\n    */\n    \n    // Method 2 (inc. circle function)\n    // /*\n    vec3 colourYellow = vec3(1, 0.784, 0.157);\n    vec3 colourRed = vec3(0.827,0.129,0.173);\n    \n    vec3 colR = colourRed * (1.0 - step(0.5, uv.y)); // Apply red where y is not 0.5 or greater\n    vec3 colY = colourYellow * circle(uv, ratio, 0.25); // Apply yellow where circle() says\n    // Add colours together, but remove colourRed where colourYellow is 0.01 or greater\n    col = colY + (colR - (step(0.01, colY) * colR));\n    // */\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}