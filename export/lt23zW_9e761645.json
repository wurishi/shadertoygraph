{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float sphereDet(vec3 ray, vec3 dir, vec3 center, float radius, inout float b)\n{\n\tvec3 rc = ray-center;  // 1\n\tfloat c = dot(rc, rc); // 1\n\tc -= radius*radius;    // 2?\n\tb = dot(dir, rc);      // 1\n\treturn b*b - c;        // 2?\n}\n\nfloat sphere(vec3 ray, vec3 dir, vec3 center, float radius, float closestHit, inout vec3 nml)\n{\n\tfloat b;\n\tfloat d = sphereDet(ray, dir, center, radius, b); // 7\n\tif (d < 0.0) { // 1\n\t\treturn closestHit;\n\t}\n\tfloat t = -b - sqrt(d); // 3\n\tif (t > 0.0 && t < closestHit) { // 2\n        nml = center - (ray+dir*t);\n\t} else {\n\t\tt = closestHit;\n\t}\n    return t;\n}\n\nfloat square(float x) { return x*x; }\n\nvoid bg( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(iResolution.x/iResolution.y,1.0) * (-1.0 + 2.0*fragCoord.xy / iResolution.xy);\n   \n    vec2 ouv = uv;\n    \n    float a = sin(iTime*0.5)*0.2;\n    float ca = cos(a);\n    float sa = sin(a);\n    \n    uv *= mat2(ca, sa, -sa, ca);\n\n    float df = abs(uv.y*uv.y-1.3)*uv.x*uv.x;\n    uv *= 3.0+1.9*df;\n    uv.x += iTime*2.0;\n    uv.y += iTime*2.0;\n    \n    uv *= 2.0;\n\n    uv.x = pow(sin(uv.y+iTime*2.0) * cos(uv.y*0.5) * cos(uv.x*0.5+2.0), 4.0);\n    uv.y = abs(cos(uv.x*12.0) * sin(uv.y*0.25+3.14159*0.5));\n\n    uv = pow(uv, vec2(1.0, 4.0));\n    \n\tfragColor = vec4(uv.x+uv.x+0.25, 0.05+uv.y+uv.x, 0.15+uv.y, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bg(fragColor, fragCoord);\n\tvec2 uv = -1.0 + 2.0*fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    float t0 = iTime*1.2;\n    float t1 = iTime*2.32;\n    float closest = 1e9;\n    for (int i=0; i<20; i++) {\n        vec3 p = vec3(sin(float(i)+t0), cos(float(i)+t1), sin(t0)+sin(t1+float(i)));\n\t\tvec3 rc = ro-p;\n        float c = dot(rc, rc);\n        c -= square(0.1+abs(sin(float(i)))*0.5);\n        float b = dot(rd, rc);\n        float d = b*b - c;\n        float t = -b - sqrt(d);\n        if (d >= 0.0 && t > 0.0 && t < closest) {\n            vec3 nml = normalize(p-(ro+rd*t));\n            vec3 nrd = reflect(rd, nml);\n            bg(fragColor, (nrd.xy/nrd.z)*10.0);\n            fragColor.rgb = fragColor.rgb*0.15 + nml;\n            closest = t;\n        }\n    }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lt23zW","date":"1427375406","viewed":214,"name":"maggots - shadeADay","username":"kig","description":"Doing some simple stuff again. #shadeADay for 2015-03-26","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raytrace","shadeaday"],"hasliked":0,"parentid":"","parentname":""}}