{"ver":"0.1","info":{"id":"lfVcWV","date":"1732437935","viewed":30,"name":"sdfSphere","username":"miyu","description":"RayMarching-sdfSphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 128\n#define MAX_DISTANCE 100.\n#define MIN_DISTANCE 0.01\n#define AA 4\n\nfloat sdfSphere(vec3 point,vec3 position,float radius)\n{\n    return length(point-position)-radius;\n}\n\nfloat GetDis(vec3 point)\n{\n    vec4 sphere = vec4(vec3(0.,0.,3.),.5);\n    return sdfSphere(point,sphere.xyz,sphere.w);\n}\n\nvec3 GetNormal(vec3 point)\n{\n    const float h=0.0001;\n    const vec2 k = vec2(1,-1);\n    \n    vec3 normal = k.xyy*GetDis(point+k.xyy*h)+\n                  k.yxy*GetDis(point+k.yxy*h)+\n                  k.yyx*GetDis(point+k.yyx*h)+\n                  k.xxx*GetDis(point+k.xxx*h);\n    return normalize(normal);\n    \n}\n\nfloat RayMarching(vec3 origin,vec3 rayDir)\n{\n    float rayDis=0.;\n    for(int i=0;i<MAX_STEP;i++)\n    {\n        vec3 point = origin+rayDis*rayDir;\n        float dis = GetDis(point);\n        if(dis<=MIN_DISTANCE) break;\n        rayDis+=dis;\n        if(rayDis>=MAX_DISTANCE) break;\n    }\n    return rayDis;\n}\n\nvec3 render(vec2 uv)\n{\n    vec3 col = vec3(0.);\n    vec3 origin = vec3(0.,0.,-10.);\n    vec3 rayDir = normalize(vec3(uv,0.)-origin);\n    float rayDis = RayMarching(origin,rayDir);\n    \n   if(rayDis<MAX_DISTANCE)\n   {\n    vec3 point = origin+rayDir*rayDis;\n    vec3 lightPos = vec3(2.*cos(.5*iTime),3.,3.*sin(.5*iTime)+2.*sin(.5*iTime));\n    vec3 normal = GetNormal(point);\n    \n    float diffuse = clamp(dot(normal,normalize(lightPos-point)),0.,1.);\n    float ambient = .5+.5*dot(normal,vec3(0.,1.,0.));\n    col = ambient*vec3(0.23,0.25,0.25)+diffuse*vec3(1.);\n   }\n\n    return pow(col,vec3(1./2.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n   for(int i=0;i<AA;i++)\n   {\n       for(int j=0;j<AA;j++)\n       {\n           vec2 offset = (vec2(float(i),float(j))/float(AA)-.5)*2.;\n           vec2 uv = (fragCoord+offset-.5*iResolution.xy)/min(iResolution.x,iResolution.y);\n           col+=render(uv);\n       }\n   }\n   col/=float(AA*AA);\n   \n   fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}