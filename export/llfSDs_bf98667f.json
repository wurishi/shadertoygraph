{"ver":"0.1","info":{"id":"llfSDs","date":"1440588441","viewed":773,"name":"Perlin Water","username":"jackdavenport","description":"A water shader which uses fractal perlin noise for displacement. The reflections drown out the displacement a bit, so you can disable them by commenting out line 4.\n\nBorrows a lot of code from http://pixelshaders.com/examples/noise.html","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["noise","displacement","perlin","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define time iTime\n\n// comment to disable cubemap reflections\n#define REFLECTIONS\n\nfloat random(float p) {\n  return fract(sin(p)*10000.);\n}\n\nfloat noise(vec2 p) {\n  return random(p.x + p.y*10000.);\n}\n\nvec2 sw(vec2 p) {return vec2( floor(p.x) , floor(p.y) );}\nvec2 se(vec2 p) {return vec2( ceil(p.x)  , floor(p.y) );}\nvec2 nw(vec2 p) {return vec2( floor(p.x) , ceil(p.y)  );}\nvec2 ne(vec2 p) {return vec2( ceil(p.x)  , ceil(p.y)  );}\n\nfloat smoothNoise(vec2 p) {\n  vec2 inter = smoothstep(0., 1., fract(p));\n  float s = mix(noise(sw(p)), noise(se(p)), inter.x);\n  float n = mix(noise(nw(p)), noise(ne(p)), inter.x);\n  return mix(s, n, inter.y);\n  return noise(nw(p));\n}\n\nfloat movingNoise(vec2 p) {\n  float total = 0.0;\n  total += smoothNoise(p     - time);\n  total += smoothNoise(p*2.  + time) / 2.;\n  total += smoothNoise(p*4.  - time) / 4.;\n  total += smoothNoise(p*8.  + time) / 8.;\n  total += smoothNoise(p*16. - time) / 16.;\n  total /= 1. + 1./2. + 1./4. + 1./8. + 1./16.;\n  return total;\n}\n\nfloat nestedNoise(vec2 p) {\n  float x = movingNoise(p);\n  float y = movingNoise(p + 100.);\n  return movingNoise(p + vec2(x, y));\n}\n\nvec3 clampColor(vec3 x) {\n \n    x.x = clamp(x.x, 0., 1.);\n    x.y = clamp(x.y, 0., 1.);\n    x.z = clamp(x.z, 0., 1.);\n    \n    return x;\n    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float n = nestedNoise(uv * 6.);\n  float intensity = .75;\n  \n  vec3 waterTint = vec3(0., .5, 1.);\n  vec3 color = texture(iChannel0, uv).xyz * waterTint;\n    \n  vec2 duv = vec2(n * intensity);\n  \n  #ifdef REFLECTIONS\n    color += texture(iChannel0, duv).xyz / 2.;\n  \tvec3 rr = vec3(duv.x, 1, duv.y);\n  \tcolor += texture(iChannel1, rr).xyz / 2.;\n  #else\n    color += texture(iChannel0, duv).xyz;\n  #endif\n    \n  color /= 2.;\n  color = clampColor(color);\n  fragColor = vec4(color.xyz, 1.);\n\n}","name":"","description":"","type":"image"}]}