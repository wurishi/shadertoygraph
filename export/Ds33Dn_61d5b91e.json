{"ver":"0.1","info":{"id":"Ds33Dn","date":"1678412427","viewed":58,"name":"Diffusion 1","username":"complexbezier","description":"two dimensional diffusion equation, click and drag to paint. Dark lines used to represent increasing density levels at even spacing.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["simulation","diffusion","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(mod(texture(iChannel0,uv).r,1.0),0.0,0.0,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float diffusionCoefficient = 10.0;\nconst float sprayPower = 50.0;\nconst float brushSize = 10.0;\nconst float dt = 0.01; //Delta Time\n\n//Gradient\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //STATE ENCODING\n    // Red - Density\n    // Green - Horizontal flux\n    // Blue - Vertical flux\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 stepSize = 1.0/iResolution.xy;\n    vec4 prevState = texture(iChannel0,uv);\n    vec4 nextState;\n    vec4 upState =    texture(iChannel0,mod((fragCoord+vec2(0.0,1.0))/iResolution.xy,1.0));\n    vec4 downState =  texture(iChannel0,mod((fragCoord-vec2(0.0,1.0))/iResolution.xy,1.0));\n    vec4 leftState =  texture(iChannel0,mod((fragCoord-vec2(1.0,0.0))/iResolution.xy,1.0));\n    vec4 rightState = texture(iChannel0,mod((fragCoord+vec2(1.0,0.0))/iResolution.xy,1.0));\n    \n    //Calculate density gradient\n    vec2 gradient = vec2(rightState.r-leftState.r,upState.r-downState.r);\n\n    //This code determines the desired flux,\n    //and as such defines the flow physics of our substance.\n    //Set flux proportional to gradient\n    nextState.gb = -diffusionCoefficient*gradient;\n\n    //This code simply implements the continuity equation.\n    //Calculate divergence of flux from neighboring fluxes\n    float fluxDivergence = ((rightState.g - leftState.g) + (upState.b - downState.b));\n    //Determine creation\n    float creation = 0.0;\n    if (length(fragCoord-iMouse.xy) < brushSize && (iMouse.z > 0.5))\n        creation = sprayPower;\n    //Calculate differential (continuity equation)\n    float diff = creation - fluxDivergence;\n\n    //Boundary condition\n    // if (fragCoord.y < 5.0) {\n    //     nextState.rgb = vec3(0.0,0.0,0.0);\n    // }\n    //Calculate new density from old density and differential\n    nextState.r = prevState.r + dt*diff;\n    //Assign fragment output color\n    fragColor = nextState;\n}","name":"Buffer A","description":"","type":"buffer"}]}