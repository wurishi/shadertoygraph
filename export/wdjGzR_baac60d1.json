{"ver":"0.1","info":{"id":"wdjGzR","date":"1548021293","viewed":272,"name":"Underwater Glowing Cavern","username":"cbrpnk","description":"test.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymachingsphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE(p, f) (p) *= vec3(1./(f))\n#define TRANSLATE(p, v) (p) += vec3(-1. * v)\n\n#define MAX_STEPS 64\n\nfloat sdfSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdfFloor(vec3 p)\n{\n    return p.y;\n}\n\nfloat random(vec2 uv)\n{\n    return fract(sin(dot(uv ,vec2(122.9898,78.233))) * 43758.5453);\n}\n\nfloat map(vec3 p)\n{\n    p.z -= iTime*2.;\n    p.y += .7 + sin(iTime)*.5;\n    p.x -= 4.5;\n    float floorPlane = sdfFloor(vec3(p.x, sin(p.x)*.4+sin(p.y+1.)+.05+cos(p.z)*.2, 1.));\n    \n    p.x = mod(p.x+5., 12.)-5.;\n    p.z = mod(p.z, -20.);\n    float sphere = sdfSphere(p-vec3(0.0, 0.0, -5.0), 1.);\n    float smallSphere = sdfSphere(p-vec3(1.0, -.8, -5.0), .2);\n    float bigSphere = sdfSphere(p-vec3(2., 2., -7.0), 3.);\n    \n    vec3 pHoles = p;\n    pHoles.x = mod(pHoles.x-.2, -.4)+.2;\n    pHoles.y = mod(pHoles.y-.2, -.4)+.2;\n    pHoles.z = mod(pHoles.z-.2, -.4)+.2;\n    float holes = sdfSphere(pHoles-vec3(0., 0., 0.), .15);\n   \n    floorPlane = max(floorPlane, holes);\n    float spheres = min(min(min(sphere, smallSphere), bigSphere), floorPlane);\n    \n    return spheres;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd)\n{\n    float dst = 0.0;\n    for(int i=0; i<MAX_STEPS; ++i) {\n        float d = map(ro + rd*dst);\n        if(d < .001*dst || d > 10000.0) return dst;\n        dst += d;\n    }\n    return dst;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\t\n   \tfloat dst = rayMarch(vec3(0.0), normalize(vec3(uv.x, uv.y, -1.0)));\n    \n    // TODO 100 is arbitrary\n    vec3 col = vec3(dst/100.);\n    \n    col = pow(col, vec3(.3));\n    col = 1.0-col;\n    col.r = pow(col.r, pow(dst, 1.));\n    col.r += pow(col.r, .2);\n    col.g += pow(col.g, sqrt(dst));\n\t\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}