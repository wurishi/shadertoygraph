{"ver":"0.1","info":{"id":"wt2yD3","date":"1600951933","viewed":304,"name":"FIRE","username":"Leasel","description":"This shader can be used 2D fires. These fires will mostly be used with one texture channel and then interpolating the color in the image with that same one channel value.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["buffers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define RedChannel vec3(1, 0.2, 0.2)\n#define GreenChannel vec3(1,1,0)\n#define BlueChannel vec3(1,0.2,0.1)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 nothing = vec3(0);\n    fragColor = vec4(mix(mix(mix(nothing, RedChannel, texture(iChannel0,uv).r), GreenChannel, texture(iChannel0,uv).g), BlueChannel, texture(iChannel0,uv).b), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv_Dif = 1./iResolution.xy;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 col = \n       (texture(iChannel0, uv + uv_Dif.xy).rgb + \n        texture(iChannel0, uv - uv_Dif.xy).rgb + \n        texture(iChannel0, uv + vec2(uv_Dif.x,0)).rgb + \n        texture(iChannel0, uv - vec2(uv_Dif.x,0)).rgb + \n        texture(iChannel0, uv + vec2(0,uv_Dif.y)).rgb + \n        texture(iChannel0, uv - vec2(0,uv_Dif.y)).rgb + \n        texture(iChannel0, uv + vec2(-uv_Dif.x,uv_Dif.y)).rgb + \n        texture(iChannel0, uv + vec2(uv_Dif.x,-uv_Dif.y)).rgb)*0.125;\n\n    fragColor = vec4(col,0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define Speed 3.\n\n#define Cool 0.05\n#define CoolSpeed 80.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = clamp(texture(iChannel0, uv - vec2(0., 1./iResolution.xy*Speed)) - Cool*texture(iChannel1, uv - vec2(0., 1./iResolution.xy)*iTime*CoolSpeed), 0., 1.) + max(vec4((1.-length(fragCoord - iMouse.xy)/50.)),0.);\n}","name":"Buffer B","description":"","type":"buffer"}]}