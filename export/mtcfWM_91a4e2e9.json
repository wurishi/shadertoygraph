{"ver":"0.1","info":{"id":"mtcfWM","date":"1701287318","viewed":100,"name":"partic random rectangle tiling 2","username":"jt","description":"Simple particle- and buffer-based random rectangle tiling inspired by [url=http://www.complexification.net/gallery/machines/substrate/]substrate[/url].\nGrow horizontal/vertical lines from random dots until they hit other lines.\nAdded orthogonal gradient.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["random","lightcycle","rectangle","graph","tiling","skeleton","buffer","particle","tesselation","network","straight","crack","gilbert"],"hasliked":0,"parentid":"dttBRM","parentname":"particle random rectangle tiling"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mtcfWM partic random rectangle tiling 2, 2023 by jt IMAGE\n// based on https://www.shadertoy.com/view/dttBRM particle random rectangle tiling\n\n// see buffer A for the core implementation\n\nvec3 sdf_color(float d) // iq's SDF color scheme\n{\n    float px = 2.0/iResolution.y;\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp2(-24.0*abs(d));\n    col *= 0.8 + 0.2*cos(120.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(-px,px,abs(d)-0.005) );\n    return col;\n}\n    \nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec4 c = texelFetch(iChannel0, ivec2(I),0);\n    if(c.x > 0.5 || c.y > 0.5)\n        o = vec4(0,0,0,1);\n    else if(c.z > 0.0)\n    {\n        //o = vec4(vec3(0.5+0.5*cos(3.1415926*2.0*(c.z+vec3(2,1,0)/3.0))),1);\n        if(fract(iTime/5.0)<0.5) o = mix(vec4(0.25,1,1,1),vec4(0,0.25,0.5,1), c.z);\n        //else o = vec4(sdf_color(c.z*0.75-0.6),1); \n        else o = vec4(sdf_color(-c.z*0.5),1); \n    }\n    else\n        o = vec4(1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/mtcfWM partic random rectangle tiling 2, 2023 by jt IMAGE\n// based on https://www.shadertoy.com/view/dttBRM particle random rectangle tiling\n\n// Simple particle- and buffer-based random rectangle tiling\n// inspired by the substrate screensaver\n// http://www.complexification.net/gallery/machines/substrate/\n// Initialize buffer with random dots marked horizontal or vertical,\n// then grow lines in specified direction until other line hit.\n// Click mouse to re-generate pattern.\n\n// Added orthogonal gradient.\n\n// TODO: Can this pattern be generated stateless/bufferless?\n\n// See also:\n// https://en.wikipedia.org/wiki/Straight_skeleton\n// https://en.wikipedia.org/wiki/Gilbert_tessellation\n\n// tags: random, rectangle, graph, tiling, skeleton, buffer, particle, tesselation, network, straight, crack, gilbert, lightcycle, motorcycle\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define dirs(I) greaterThanEqual(texelFetch(iChannel0, ivec2(I),0), vec4(0.5))\n#define read(I) texelFetch(iChannel0, ivec2(I),0)\n\nvoid mainImage( out vec4 c, in vec2 I )\n{\n    if(iFrame == 0 || iMouse.z > 0.0) // initialize\n    {\n        uint h = uhash(uvec2(I+iTime*123.456));\n\n        c = vec4(equal((uvec4(h)>>uvec4(1,2,4,8))&((1u << 12)-1u), uvec4(0))); // rgba dot noise (jt)\n        c *= vec4(1,1,0,0);\n        c.z = any(greaterThanEqual(c.xy, vec2(0.5))) ? 1.0 : 0.0;\n    }\n    else // iterate\n    {\n        bvec4 b = dirs(I);\n        if(any(not(equal(b.xy, bvec2(0))))) // if not empty: copy\n        {\n            c = read(I);\n        }\n        else // empty: fill according to neighbor\n        {\n            vec2 o = vec2(0,1);\n            if(dirs(I+o.xy).x) c = vec4(1,0,1,0);\n            else if(dirs(I-o.xy).x) c = vec4(1,0,1,0);\n            else if(dirs(I+o.yx).y) c = vec4(0,1,1,0);\n            else if(dirs(I-o.yx).y) c = vec4(0,1,1,0);\n            else\n            {\n                float d = max(max(read(I+o.xy).z, read(I-o.xy).z),max(read(I+o.yx).z,read(I-o.yx).z));\n                if(d > 0.0)\n                    //c = vec4(0,0,d-1.0/256.0,0);\n                    c = vec4(0,0,d-1.0/64.0,0);\n                else\n                    c = read(I);\n            }\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/mtcfWM partic random rectangle tiling 2, 2023 by jt IMAGE\n// based on https://www.shadertoy.com/view/dttBRM particle random rectangle tiling\n\n// see buffer A for the core implementation\n\nuint triple32(uint x) // https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash (Fabrice Neyret's implementation of Chris Wellons hash https://nullprogram.com/blog/2018/07/31/ )\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint lowbias32(uint x) // https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash (Fabrice Neyret's implementation of Chris Wellons hash https://nullprogram.com/blog/2018/07/31/ )\n{\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\n#define uhash(x) triple32(x) \n//#define uhash(x) lowbias32(x)\n\nuint uhash(uvec2 p)\n{\n    return uhash(p.x + uhash(p.y));\n}\n","name":"Common","description":"","type":"common"}]}