{"ver":"0.1","info":{"id":"MdSczd","date":"1493314835","viewed":107,"name":"test from project","username":"trbrmrdr","description":"test for the project to clean the host","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n \n    \n    vec4 pat_tex = texture(iChannel1,uv);\n    //float percent = iMouse.x/iResolution.x;\n    float percent = fract(iTime * .15);\n    \n    //fragColor = pat_tex;return;\n    \n    vec4 color = vec4(1.);\n    vec4 tex = texture(iChannel0, uv);\n    if(pat_tex.a > .0)\n    {\n        if( length(pat_tex.xy)>.0 ){\n        \t//color = mix( color, texture(iChannel0, pat_tex.rg) ,pat_tex.a);\n            color = texture(iChannel0, pat_tex.rg);\n        }\n        else\n            color = vec4(1);\n    }\n    else\n    {\n        color = tex;\n    }\n    \n    //color.a = 1.;\n    //fragColor = color;return;\n    \n    float d_p = 10.4;\n    if(uv.x >= percent)\n    {\n\t\tcolor =  tex;\n    }\n    else if(uv.x >= percent - d_p )\n    {\n        float p2 = smoothstep(percent - d_p, percent, uv.x);\n        \n        //fx2 = smoothstep(.0,1.,pow(uv.x,2.));\n        p2 = smoothstep(.0,1.,pow(p2,2.));\n        \n        float alpha = (1. - pat_tex.a*  p2);\n        \n        //p2 = mix( p2, max(1.,p2 + pat_tex.b), p2  );\n        //color =  mix(vec4(1.) , color,  p2);\n        color =  mix(vec4(1.) , color,  alpha);\n    }\n    else\n    {\n        color = vec4(1.);\n    }\n#if 0\n    \n   float dpx = .04;\n    if(uv.x >= percent - dpx && uv.x <= percent + dpx){\n        color = vec4(1.,0.,1.,1.);\n    }\n#endif\n    \n    fragColor = color;\n   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define IS_COCOS2D 0\n\n#if IS_COCOS2D ///from cocos2d\n#ifdef GL_ES\np_recision highp float;\n#endif\n\n//varying vec2 v_texCoord;\nuniform sampler2D u_texture_back;\nuniform vec2 _resolution;\n\nuniform int _press;\n#define time CC_Time[1]\n//#define time (.1)\n\n#else\n\t\n#define _resolution iResolution \n#define time iTime\n#define time_delta iTimeDelta\n#define u_texture_back iChannel0\n\nint _press = 0;\n\n#endif\n\nfloat hash( float n ){return fract(sin(n)*43758.5453);}\n\nfloat hash2(vec2 v){return fract(sin(1.+v.x)*cos(v.y)*43758.5453+dot(v.x,v.y));}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / _resolution.xy;\n    float percent = fract(time * .15);\n    \n    vec4 color = texture(u_texture_back, uv);\n#if 1\n    if(percent >= .99\n\t|| _press>=1\n\t)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    float dpx = .04;\n    bool is_process = true;\n    if(uv.x >= percent - dpx && uv.x <= percent + dpx){\n#else\n    if( iMouse.z > .0 ){\n#endif\n       if(length(color.xy)<=.0)\n       {\n        \tfloat a = hash(length(uv) * time) * .5;\n        \tfloat s = hash2(uv.yx * hash(length(uv)));\n           \n        \tcolor = vec4(\n            \tuv.x,\n            \tuv.y,\n            \ta,\n            \ts\n        \t);\n        \n        \t//if(a<=.3)\n        \t//    color = vec4(vec2(0),a,s);\n            is_process = false;\n       }\n    }\n\t\n   float t_val = 1.9;//.5 + .5 * sin(iTime);\n    if(is_process \n      //&& color.a<= t_val\n      )\n    {\n        \n    \tvec2 tx = vec2(1.) / _resolution.xy;    \n        \n        float min = 1.;\n        float max = .0;\n        \n        float sr = .0;\n        int size_sr = 0;\n        vec4 ret_col ;\n        \n        for(int i=0;i<=3;i++){\n            for( int j=-1;j <= 1; j++){\n                vec2 n_uv = uv + tx * vec2(i,j);\n                \n                vec4 t_c = texture(u_texture_back, n_uv);\n                \n                float s = t_c.a;//* hash(length(t_c.xy));\n                float af = 3.14 + 3.14 * t_c.g;\n                vec2 n_p = vec2(\n                    sin(af),\n                    cos(af)\n                \n                ) * s;// * percent * 4.;\n                vec2 t_uv = t_c.xy + n_p;\n                \n                float t_min = distance(t_uv,uv);\n                if( t_min <= min)\n                {\n                    min = t_min;\n                    ret_col = t_c;\n                }\n            }\n        }\n        \n        \n        //if(abs(min) < 4.)\n        //    ret_col = vec4(vec2(.0), ret_col.b, ret_col.a);\n        \n        //color = mix(ret_col,vec4(1.),percent);\n        ret_col.a = clamp(ret_col.a + time_delta * .01,.0,1.);\n        color = ret_col;\n        \n    }\n    \n    //color = drawText(iResolution.xy * vec2(0.010,0.120),color,iTimeDelta);\n    fragColor = color;\n}\n\n\n#if IS_COCOS2D\nvoid main( void )\n{\n    //vec4 texColor = texture2D( u_texture_brush, v_texCoord );\n    vec4 color = vec4(.0);\n\tmainImage(color, gl_FragCoord);\n\n    gl_FragColor = color;\n}   \n#endif","name":"Buf A","description":"","type":"buffer"}]}