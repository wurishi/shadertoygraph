{"ver":"0.1","info":{"id":"WdcfRS","date":"1605527366","viewed":162,"name":"Nyan circles","username":"sig","description":"Circles","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* turns out these weren't needed after all :) thx Fabrice\nfloat d(vec2 p1, vec2 p2) {\n    vec2 _d = p2 - p1;\n    return sqrt(_d.x*_d.x + _d.y*_d.y);\n}\n\nvec2 _mod(vec2 a, vec2 b) {\n    return a - floor(a / b) * b;\n}\n*/\n\nvec2 sharp_circles(vec2 _uv) {\n    float r1 = distance(_uv, vec2(0.866, 0.5)); // sqrt(3) / 2\n    float r2 = distance(_uv, vec2(0, 0)); \n    float r3 = distance(_uv, vec2(0, 1));\n    float r4 = distance(_uv, vec2(1.732, 0)); // sqrt(3)\n    float r5 = distance(_uv, vec2(1.732, 1));\n    float rr = min(min(min(min(r1, r2), r3), r4), r5);\n    return vec2(step(rr, 0.45), 1.0 - step(rr, 0.51));\n}\n\nfloat soft_d(vec2 p1, vec2 p2, float r, float soft_r) {\n    float d = r - distance(p1, p2);\n    return d > soft_r ? d : exp(d / soft_r - 1.0) * soft_r;\n}\n\nvec2 soft_circles(vec2 _uv, float wub) {\n    float w = sqrt(3.0);\n    float d1 = soft_d(_uv, vec2(w * 0.5, 0.5), 0.5, 0.1);\n    float d2 = soft_d(_uv, vec2(0, 0), 0.5, 0.1); \n    float d3 = soft_d(_uv, vec2(0, 1), 0.5, 0.1);\n    float d4 = soft_d(_uv, vec2(w, 0), 0.5, 0.1);\n    float d5 = soft_d(_uv, vec2(w, 1), 0.5, 0.1);\n    float d6 = soft_d(_uv, vec2(w * 0.5, 1.5), 0.5, 0.1);\n    float d7 = soft_d(_uv, vec2(w * 0.5, -0.5), 0.5, 0.1);\n    float dsum = d1 + d2 + d3 + d4 + d5 + d6 + d7;\n    float cutoff = exp(wub * 0.2) * 0.08;\n    return vec2(1.0 - step(dsum, cutoff*1.3), step(dsum, cutoff));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    float t = floor(iTime / 3.0);\n    float N = mod((1234.0 + t) * t, 19.0) + 5.0;\n    \n    // w = sqrt(3) * 2pi / N\n    // h = 2pi / n\n    vec2 size = vec2(10.882796 / N, 6.2831853 / N);\n    \n    vec2 p = (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    \n    float r = sqrt(p.x*p.x + p.y*p.y);\n    float a = atan(p.x, p.y);\n    vec2 xy = vec2(log(r), a);\n    \n    vec2 uv = vec2(log(r) - iTime, a + sin(iTime)) / size.y;\n\tvec2 _uv = mod(uv, vec2(1.732, 1));\n    \n    vec2 blend = N < 12.0 ? soft_circles(_uv, sin(iTime*3.0)) : sharp_circles(_uv);\n\n    vec2 sprite_size = vec2(0.159, 1.0);\n    //vec2 tuv = mod(vec2(log(r), a * 4.0) + vec2(-iTime * 0.1, sin(iTime * 50.0) * 0.05), sprite_size);\n    //vec2 tuv = vec2(log(r), a * 4.0) + vec2(-iTime * 0.1, sin(iTime * 50.0) * 0.05);\n    vec2 tuv = mod(vec2(log(r) - iTime * 11.0, a * 4.0), sprite_size);\n    float sprite_i = mod(floor(iTime * 6.0), 6.0);\n    vec4 tex_c = texture(iChannel0, tuv + sprite_i * vec2(sprite_size.x, 0.0));\n\t//fragColor = rr < 0.4 ? tex_c * tex_c.w + (1.0 - tex_c.w) * vec4(0.06, 0.3, 0.6, 1) :\n\t//\t\t\trr < 0.5 ? vec4(0, 0, 0, 1) : tex_c.w * vec4(1, 1, 1, 1);\n\tfragColor = blend.x * (tex_c * tex_c.w + (1.0 - tex_c.w) * vec4(0.06, 0.3, 0.6, 1)) +\n        \t\tblend.y * (tex_c.w * vec4(1, 1, 1, 1));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp,float time)\n{\n    float bpm = 480.0;    \n    float len = 64.0;\n    float volume = 0.2;\n    \n    // 0  12  A\n    // 1  13  Bb\n    // 2  14  B\n    // 3  15  C\n    // 4  16  Db\n    // 5  17  D\n    // 6  18  Eb\n    // 7  19  E\n    // 8  20  F\n    // 9  21  Gb\n    // 10 22  G\n    // 11 23  Ab\n    int[] note_pitch = int[] (\n        10, 10, 12, 12,  7,  7,  7,  3,\n         6,  5,  3,  3,  3,  3,  5,  5,\n         6,  6,  6,  5,  3,  5,  7, 10,\n        12,  7, 10,  5,  7,  3,  5,  3,\n         7,  7, 10, 10, 12,  7, 10,  5,\n         7,  3,  6,  7,  6,  5,  3,  5,\n         6,  6,  3,  5,  7, 10,  5,  7,\n         5,  3,  5,  5,  3,  3,  5,  5\n    );\n    int[] note_length = int[] (\n        2, 2, 2, 2, 1, 2, 2, 1,\n        1, 1, 2, 2, 2, 2, 2, 2,\n        2, 2, 1, 1, 1, 1, 1, 1,\n        1, 1, 1, 1, 1, 1, 1, 1,\n        2, 2, 2, 2, 1, 1, 1, 1,\n        1, 1, 1, 1, 1, 1, 1, 1,\n        2, 2, 1, 1, 1, 1, 1, 1,\n        1, 1, 2, 2, 2, 2, 2, 2\n    );\n    int[] beats_since_onset = int[] (\n        0, 1, 0, 1, 0, 0, 1, 0,\n        0, 0, 0, 1, 0, 1, 0, 1,\n        0, 1, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 1, 0, 1, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0,\n        0, 1, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 1, 0, 1, 0, 1\n    );\n    \n    float seconds_per_beat = 60.0 / bpm;\n    float time_len = len * seconds_per_beat;\n    float time_since_start = ((time / time_len) - floor(time / time_len)) * time_len;\n    \n    float t = time_since_start / seconds_per_beat;    \n    int beat = int(t);\n    \n    float freq = 220.0 * pow(2.0, float(note_pitch[beat]) / 12.0);\n    float note_t = float(beats_since_onset[beat]) + (t - floor(t));\n    float whistle_amp = (0.5 - 0.5 * cos(6.2831 * note_t / float(note_length[beat])));\n    float attack_amp = note_t * exp(-2.0 * note_t);\n    \n    return volume * (\n        vec2(sin(6.2831*freq*time) * whistle_amp) + \n        vec2(sin(3.5*6.2831*freq*time) * 0.5*attack_amp) + \n        vec2(sin(2.5*6.2831*freq*time) * 0.5*attack_amp) + \n        vec2(sin(1.5*6.2831*freq*time) * attack_amp) + \n        vec2(sin(2.0*6.2831*freq*time) * 0.5*whistle_amp) + \n        vec2(sin(3.0*6.2831*freq*time) * whistle_amp)\n    );\n}","name":"Sound","description":"","type":"sound"}]}