{"ver":"0.1","info":{"id":"tdyyR3","date":"1603334601","viewed":90,"name":" Cells Under a Microscope - edit","username":"mosaic","description":"Combination of https://www.shadertoy.com/view/3sKyDw and  https://www.shadertoy.com/view/wtjfRV","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4  fC ( in vec2 fragCoord ) {\n    vec3 col;\n    float t = iTime*.05;\n    vec2 uv = (fragCoord-iResolution.xy)/iResolution.y+vec2(t+2.0);\n        //uv *= 10.0;\n        int c = 0;\n        for(int i=0;i<9;i++)\n        {\n            c = i%3;\n            float factor = 1.5;\n            vec2 uv1 = uv;\n            uv /= factor;\n            uv += uv1;\n            uv += (sin(uv.yx))/factor;\n            uv *= factor;\n            col[c] += sin(uv.x+uv.y);\n        }\n    return  vec4(col*100.0,1.0);\n}\n\n\n// Add this code to the bottom of any shader that has aliasing:\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    float A = 7.,  // Change A to define the level of anti-aliasing (1 to 16) ... higher numbers are REALLY slow!\n          s = 1./A, x, y;\n    \n    for (x=-.5; x<.5; x+=s) for (y=-.5; y<.5; y+=s) fragColor += min ( fC(vec2(x,y)+fragCoord), 1.0);\n        \n\tfragColor /= A*A;\n}","name":"Image","description":"","type":"image"}]}