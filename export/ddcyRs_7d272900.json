{"ver":"0.1","info":{"id":"ddcyRs","date":"1695345483","viewed":29,"name":"simple 'borromean rings'","username":"18smith111","description":"trying out some different techniques to collect 'shaping functions'","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circles","rings","knot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat circ(vec2 center,vec2 uv,float size,float rim)\n{\n    vec2 dV = center-uv;\n    float d = length(dV);\n    float f = step(d,size);\n    float inner = step(d,size-rim);\n    return f-inner;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord.xy) / min(iResolution.y, iResolution.x);   \n    vec2 center = vec2(0.7,0.35);\n\n    float f = 0.0;\n    float rim = 0.01;\n    float size = 0.3;\n    \n    //check if frag-coord/pixel sitting on a circle bounary..\n    float circlepoint0 = circ(center+vec2(0.0,0.0),uv,size, rim);\n    float circlepoint1 = circ(center+vec2(size,0.0),uv,size, rim);\n    float circlepoint2 = circ(center+vec2(size*0.5,size),uv,size, rim);\n\n    //set up circle functions, max() to prevent 'overlaps'/double counting\n    f = max(f,circlepoint0);\n    f = max(f,circlepoint1);\n    f = max(f,circlepoint2);\n\n    \n    vec4 backGrnd = vec4(0.0, 0.1, 0.15, 1.0);\n    fragColor = vec4(f,f,f,1) + backGrnd;\n}","name":"Image","description":"","type":"image"}]}