{"ver":"0.1","info":{"id":"ltjyzK","date":"1509366206","viewed":143,"name":"Inefficient City","username":"jt","description":"A very simple raytraced city-like shape - written to be easy to understand rather than efficient to compute.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","city","cuboids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rainbow(float t)\n{\n    return 0.5 + 0.5 * sin((t + vec3(0, 1, 2) / 3.0) * 2.0 * 3.1415926);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = 1.0;\n    //vec3 l = normalize(vec3(0,0,1));\n    vec3 l = vec3(0.5 + 0.5 * cos(iTime), 0.5 + 0.5 * sin(iTime),1.5);\n    vec3 p = vec3(fragCoord.xy / iResolution.xy, 0.0);\n\tvec3 v = vec3((p.xy * 2.0 - 1.0)*0.2, 1.0) / 255.0;\n\n    vec3 c = vec3(1);\n    vec3 n = vec3(0);\n    for(float i = 0.0; i <= 255.0; i++)\n    {\n        p += v;\n        vec2 d = vec2(0.0, iTime * 0.1);\n        \n        float h = texture(iChannel0, s * p.xy + d).r;\n        if(p.z > 1.0 - h)\n        {\n            float N = texture(iChannel0, s * p.xy + vec2(0.0, +0.001) + d).r;\n            float S = texture(iChannel0, s * p.xy + vec2(0.0, -0.001) + d).r;\n            float W = texture(iChannel0, s * p.xy + vec2(+0.001, 0.0) + d).r;\n            float E = texture(iChannel0, s * p.xy + vec2(-0.001, 0.0) + d).r;\n        \n            if(abs(N-S) > abs(W-E))\n            {\n                n = vec3(0, N < S ? 1 : -1,0);\n                //if(mod(p.z, 0.2) < 0.03)\n                //{\n                //\t//c *= vec3(1,0,0);\n                //    c *= 0.5 + 0.5 * n;\n                //}\n                //else\n                {\n            \t\tc *= 0.5 + 0.5 * n;\n                \tv.y = -v.y;\n                \tcontinue;\n                }\n            }\n            else if(abs(N-S) < abs(W-E))\n            {\n                n = vec3(W < E ? 1 : -1,0,0);\n                //if(mod(p.z, 0.2) < 0.03)\n                //{\n                //\t//c *= vec3(0,1,0);\n                //    c *= 0.5 + 0.5 * n;\n                //}\n                //else\n                {\n            \t\tc *= 0.5 + 0.5 * n;\n                \tv.x = -v.x;\n                \tcontinue;\n                }\n            }\n            else\n            {\n                n = vec3(0,0,1);\n            \tc *= 0.5 + 0.5 * n;\n                //c *= vec3(0,0,1);\n            }\n            \n            //c *= mix(c, texture(iChannel1, 5.0 * (s * p + vec3(d,0))).rgb, 0.5);\n            \n            c *= 2.0 * dot(n, normalize(l - p));\n        \n            break;\n        }\n    }\n    \n\tfragColor.rgb = vec3(1.0 - p.z) * c;\n}\n","name":"Image","description":"","type":"image"}]}