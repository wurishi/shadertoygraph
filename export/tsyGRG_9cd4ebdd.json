{"ver":"0.1","info":{"id":"tsyGRG","date":"1570429224","viewed":820,"name":"Music Vizualizer  Channel 0","username":"mbagamer1","description":"Fix channel 0","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["spectrum","music","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 1/512\n#define FREQ_STEP 0.001953125\n\n#define PI 3.1415927\n#define TWO_PI 6.283185\n\n//Average band volume from nearest bands, more steps - smoother spectrum\nfloat getAvgVolume(float v, int steps)\n{\n    float sum = 0.0;\n    float x = 0.0;\n\tfor (int i = 0; i < steps; i++)\n    {\n        x = fract(v + float(i) * FREQ_STEP);\n        \t\t\t\t\t\t\t\t//pow for non linear spectrum, 2nd pow - soften bass\n        sum += texture(iChannel0, vec2(pow(x, 2.0), 0.0)).r * pow(x, 0.08); \n    }\n    \n    return sum /= float(steps);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy;\n    vec2 uv = (2.0 * fragCoord - res) * 0.6 / min(res.x, res.y);\n    uv.x = abs(uv.x); //Symetry\n    uv.y *= -1.0; \n    \n    float ps = 1.0 / min(res.x, res.y);\n    \n    //For debug\n    //float mouse = iMouse.x / iResolution.x;\n    \n    float avgVolume = getAvgVolume(0.3, 128);\n    \n    //Volume pulse\n    uv *= 1.0 - smoothstep(0.3, 1.1, avgVolume) * 0.7;\n    \n    //Polar coordinates, x - length, y - frequency\n    vec2 polarUV = vec2(length(uv), atan(uv.y, uv.x) / TWO_PI);\n    polarUV.y = fract((polarUV.y + 0.2) * 0.8);\t//shifting frequencies\n     \n    float volume = getAvgVolume(polarUV.y, 20); \n    volume = pow(smoothstep(0.0, 0.9, volume), 4.0 / (avgVolume)) * 0.1; //Adjusting freq volume\n    \n\n    float distToFreq = (volume - polarUV.x + 0.2);\n    \n    vec3 col = vec3(0.0);\n    \n    //line\n    col += vec3(0.5, 1.0, 1.0) \n        \t* smoothstep(1.0 - ps * 1.5, 1.0, 1.0 - abs(distToFreq)) \n        \t* smoothstep(-1.0, 1.0, avgVolume);\n    \n    //a la blured line\n    col += vec3(0.05, 0.2, 0.2) \n        \t* smoothstep(1.0 - 0.008 * pow(avgVolume * 3.0 + 1.0, 2.0), 1.0, 1.0 - abs(distToFreq));\n    \n    //flash\n    col += vec3(0.0, 1.0, 1.0) \n        \t* pow(avgVolume, 8.0) \n        \t* (1.0 - polarUV.x);\n    \n    //Center fill\n    col += vec3(0.0, 0.1, 0.1) \n        \t* smoothstep(0.0, 0.01, distToFreq) \n        \t* (avgVolume + 0.2);\n    \n    //Center circles\n    col += vec3(1.0, 1.0, 1.0) \n        \t* smoothstep(0.1, 0.3, distToFreq) \n        \t* smoothstep(0.1, 0.8, pow(avgVolume, 2.0)) \n        \t\t//Texture for non regular circle patterns (I know, I could use noise gen or tex)\n        \t* texture(iChannel1, polarUV.xx / (pow(avgVolume, 2.0) + 0.2) + vec2(-iTime * 0.3)).r;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}