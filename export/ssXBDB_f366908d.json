{"ver":"0.1","info":{"id":"ssXBDB","date":"1645306634","viewed":60,"name":"A Julia set","username":"janpalka4","description":"A simple Julia set shader.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot","juliaset","mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define maxIter 60.0\nvec3 lerp(vec3 a, vec3 b, float t){\n    return a + t*(b-a);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 colors[19];\n    colors[0] = vec3(106,52,3)/255.0;\n    colors[1] = vec3(66,30,15)/255.0;\n    colors[2] = vec3(25,7,26)/255.0;\n    colors[3] = vec3(9,1,47)/255.0;\n    colors[4] = vec3(4,4,73)/255.0;\n    colors[5] = vec3(0,7,100)/255.0;\n    colors[6] = vec3(12,44,138)/255.0;\n    colors[7] = vec3(24,82,147)/255.0;\n    colors[8] = vec3(57,125,209)/255.0;\n    colors[9] = vec3(134,181,229)/255.0;\n    colors[10] = vec3(211,236,248)/255.0;\n    colors[11] = vec3(241,233,191)/255.0;\n    colors[12] = vec3(248,201,95)/255.0;\n    colors[13] = vec3(255,170,0)/255.0;\n    colors[14] = vec3(204,128,0)/255.0;\n    colors[15] = vec3(153,87,0)/255.0;\n    colors[16] = vec3(106,52,3)/255.0;\n    colors[17] = vec3(66,30,15)/255.0;\n    colors[18] = vec3(25,7,26)/255.0;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy-vec2(0.5,0.5))*3.0;\n    vec2 tmp = uv;\n    float Zn = 0.0;\n    float i = 0.0;\n    float c = cos(iTime/5.0);\n    do{\n        float pomX = tmp.x*tmp.x - tmp.y*tmp.y + c;\n        float pomY = 2.0*tmp.x*tmp.y + c;\n        tmp.x = pomX;\n        tmp.y = pomY;\n        Zn = abs(tmp.x*tmp.x + tmp.y*tmp.y);\n        i += 1.0;\n    }while(Zn<4.0 && i <= maxIter);\n    \n    \n    float t = (Zn-4.0)/4.0;\n    vec3 col = vec3(0.0);\n    if(i < maxIter){\n        float logZn = log(Zn) / 2.0;\n        float nu = log(logZn/log(2.0))/log(2.0);\n        i = i + 1.0 - nu;\n        t = fract(i);\n    \n        int index = int(t*2.0);\n        float lt = t*2.0 - float(index);\n        i = float(i - 18.0 * float(int(i/18.0)));\n        col = lerp(colors[int(floor(i))],colors[int(floor(i))+1],t);\n        //col = colors[int(floor(i))];\n    }\n    else{\n        col = vec3(Zn*Zn);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}