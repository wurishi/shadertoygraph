{"ver":"0.1","info":{"id":"Mscczr","date":"1517766795","viewed":124,"name":"2d shader thingy","username":"Emiel","description":"WIP","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xs2Xzc","filepath":"https://soundcloud.com/monstercat/duumu-take-me-away","previewfilepath":"https://soundcloud.com/monstercat/duumu-take-me-away","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define freq(f) texture(iChannel0, vec2(f, 0.25)).x\n#define PI 3.1415926535897932384626433832795\n\nvec3 hsl(float h, float s, float l) {\n    vec3 rgb = clamp(abs(mod(h * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    return l + s * (rgb - 0.5) * (1.0 - abs(2.0 * l - 1.0));\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdTorus(vec2 p, float r, float t) {\n    return abs(length(p) - r) - t;\n}\n\nfloat sdBox(vec2 p, vec2 b) {\n  vec2 d = abs(p) - b;\n  return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat freqHue(float f) {\n    return iTime * 0.1 + freq(0.1) * 0.1 + f * 0.15;\n}\n\nfloat freqV(float f) {\n    return freq(f * 0.55 + 0.05) * (1.0 + f * 0.4) * 0.8;\n}\n\nfloat map(vec2 p, out vec3 color) {\n    float t = 1e10;\n    \n    /*\n    int count = 36;\n    color = vec3(0);\n    for (int i = 0; i < count; i++) {\n        float f = float(i) / float(count - 1);\n        f += 0.5;\n        f = mod(f, 1.0);\n        f = abs(mod(f, 1.0) - 0.5) * 2.0;\n        \n    \tfloat v = freqV(f);\n        \n        vec2 pPart = p + vec2(cos(f * PI * 2.0), sin(f * PI * 2.0)) * 0.2;\n        float tPart = sdCircle(pPart, 0.1);\n        if (tPart < t) {\n            if (tPart <= 0.0) {\n                float li = -tPart * 15.0;\n                li *= li * li;\n                color = max(color, vec3(li) * hsl(freqHue(f), 0.5 + v, 0.1 + v));\n            }\n            t = tPart;\n        }\n    }\n\t*/\n    \n    \n    float f = atan(p.x, p.y) / PI * 0.5 + 0.5;\n    f += 0.5;\n    f = mod(f, 1.0);\n    f = abs(mod(f, 1.0) - 0.5) * 2.0;\n    \n    float v = freqV(f);\n    \n    float tTorus = sdTorus(p, freq(0.05) * 0.05 + 0.19 + v * 0.17, 0.002 + v * 0.13);\n    if (tTorus < t) {\n    \tcolor = hsl(freqHue(f), 0.5 + v, 0.1 + v);\n        t = tTorus;\n    }\n    \n    \n    return t;\n}\n\nvec3 pixel(in vec2 fragCoord) {\n    float ar = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec2 p = (uv - 0.5) * vec2(ar, 1.0);\n    vec3 color = vec3(1.0, 0.0, 0.0);\n    float dist = map(p, color);\n    if (dist < 0.0) {\n        return color;\n    }\n    \n    // background\n    return vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor.rgb = (\n        pixel(fragCoord) + \n        pixel(fragCoord + vec2(0.5, 0.0)) +\n        pixel(fragCoord + vec2(0.0, 0.5)) +\n        pixel(fragCoord + vec2(0.5, 0.5))\n   \t) / 4.0;\n}","name":"Image","description":"","type":"image"}]}