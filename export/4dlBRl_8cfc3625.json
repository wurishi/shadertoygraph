{"ver":"0.1","info":{"id":"4dlBRl","date":"1497544882","viewed":497,"name":"drl0013","username":"DrLuke","description":"Uuuh","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["rotation","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nInspired by: https://www.youtube.com/watch?v=QAja2jp1VjE\n\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nhttps://creativecommons.org/licenses/by/4.0/\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nInspired by: https://www.youtube.com/watch?v=QAja2jp1VjE\n\nThis work is licensed under a Creative Commons Attribution 4.0 International License.\nhttps://creativecommons.org/licenses/by/4.0/\n*/\n\n\nvec2 rotvec2(vec2 invec, float angle)\t// Simple vector rotation (Pay attention in school kiddos!)\n{\n    return vec2(invec.x * cos(angle) - invec.y*sin(angle),\n                invec.x * sin(angle) + invec.y*cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\t// Generate UV coords\n    uv = (uv - vec2(0.5)) / 1.6;\t// Make UV coordinates go from -1 to 1, and then scale it a bit\n    uv.x *= iResolution.x/iResolution.y;\t// Correct aspect ratio\n    #define stepval 0.001\n    uv = floor(uv/stepval)*stepval;\t// Discretize coordinates\n    \n    \n    vec2 uvbg = uv;\t// Foreground is just normal uv coords\n    vec2 shiftvec = vec2(sin(iTime*0.5)*0.1, sin(iTime*0.21482608604)*0.1);\t// Shift center of rotation around\n    vec2 uvfg = rotvec2(uv - shiftvec, sin(iTime*1.5)*0.1) + shiftvec;\t// Rotate texture\n\t\n    // Pixel threshold, play around\n    #define threshlow 0.90\n    #define threshhigh 0.93\n    float bg = smoothstep(threshlow, threshhigh, texture(iChannel0, uvbg).r) * 0.5;\t// turn noise into more binary noise\n    #define offset vec2(sin(iTime)*0.01, cos(iTime*0.3423)*0.01)\n    float fg = smoothstep(threshlow, threshhigh, texture(iChannel0, uvfg + offset).r) * 0.5;\n    //float fg = smoothstep(0.93, 0.95, texture(iChannel0, uvfg).r) * 0.5;\t// Try without the offset, too!\n    \n    fragColor = mix(vec4(pow(bg*0.1 + fg, 0.3)), texture(iChannel1, fragCoord.xy / iResolution.xy + (texture(iChannel0, fragCoord.xy / iResolution.xy).r * .004)), 0.75);\t// Correction to prevent bright flash when textures align\n}","name":"Buf A","description":"","type":"buffer"}]}