{"ver":"0.1","info":{"id":"wlKfWG","date":"1614988280","viewed":76,"name":"2D Metaballs testing","username":"Walters","description":"simple metaballs shader.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BALL_COUNT 16\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 bgCol = vec3(0.0, 0.0, 0.2);\n    float hWidth = (iResolution.x) * 0.5;\n    float hHeight = (iResolution.y) * 0.5;\n    float scale = max(iResolution.x, iResolution.y) * 0.1;\n    float t = iTime * 0.004;\n    vec2 ballPos[BALL_COUNT] = vec2[BALL_COUNT](\n         vec2(t * 9.0 + 0.0, t * 6.0 + 0.0),\n         vec2(t * 2.0 + 0.0, t * 7.0 + 1.0),\n         vec2(t * 6.0 + 0.0, t * 8.0 + 2.0),\n         vec2(t * 6.0 + 0.0, t * 9.0 + 3.0),\n         vec2(t * 6.0 + 1.0, t * 6.0 + 0.0),\n         vec2(t * 6.0 + 1.0, t * 7.0 + 1.0),\n         vec2(t * 2.0 + 1.0, t * 8.0 + 2.0),\n         vec2(t * 6.0 + 1.0, t * 9.0 + 3.0),\n         vec2(t * 6.0 + 2.0, t * 6.0 + 0.0),\n         vec2(t * 6.0 + 2.0, t * 7.0 + 1.0),\n         vec2(t * 6.0 + 2.0, t * 8.0 + 2.0),\n         vec2(t * 2.0 + 2.0, t * 9.0 + 3.0),\n         vec2(t * 6.0 + 3.0, t * 6.0 + 0.0),\n         vec2(t * 6.0 + 3.0, t * 7.0 + 1.0),\n         vec2(t * 6.0 + 3.0, t * 8.0 + 2.0),\n         vec2(t * 6.0 + 3.0, t * 9.0 + 3.0));                           \n    float ballSize[BALL_COUNT] = float[BALL_COUNT](5.0, 3.0, 2.0, 1.0,\n                                                   1.0, 5.0, 3.0, 2.0,\n                                                   2.0, 1.0, 5.0, 3.0,\n                                                   3.0, 2.0, 1.0, 5.0);    \n    float ballFactor = 0.0;\n    for(int i = 0; i < BALL_COUNT; i++)\n    {\n        vec2 pos = vec2(hWidth + sin(ballPos[i].x) * hWidth, \n                        hHeight + sin(ballPos[i].y) * hHeight);\n        float newDist = min(length(pos - fragCoord), ballSize[i] * scale);\n        newDist = 1.0f - newDist / (ballSize[i] * scale);\n        ballFactor += newDist * newDist;\n    }\n    ballFactor = min(ballFactor, 1.0);\n    float glow = ballFactor * 0.25;\n    ballFactor = smoothstep(-1.5*fwidth(ballFactor), 0.0, ballFactor - 0.5);\n    glow = max(0.0, glow - ballFactor);\n    col = bgCol + (col - bgCol) * ballFactor + (col - bgCol) * glow;  \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}