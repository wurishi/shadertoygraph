{"ver":"0.1","info":{"id":"4fXXRM","date":"1705078262","viewed":115,"name":"Automoton test","username":"FrederickAmpsUp","description":"Game-of-life inspired cellular/continuous automota.\nStart in small view, go into fullscreen to see it grow.\n\nClick to kill cells","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["test","simulation","life"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DEAD  vec3(0.0, 0.0, 0.0)\n#define ALIVE vec3(1.0, 1.0, 1.0)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float auto = texture(iChannel0, uv / ZOOM).r; // Automoton state is stored in the red channel.\n\n    // Output to screen\n    fragColor = vec4(mix(DEAD, ALIVE, auto), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define NEIGHBOR_EFFECT 0.05\n#define NEIGHBOR_SIZE 3\n\n#define MOUSE_SIZE 0.05\n#define MOUSE_EFF 5.0\n\n#define SPEED 1.0\n\n// Per-pixel game of life, recommend speed = 0.1\n//#define CONWAY\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n  float fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\t\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 mouse = iMouse.xy / iResolution.xy; \n    mouse.x *= iResolution.x / iResolution.y;\n    mouse /= ZOOM;\n    \n    float val = texture(iChannel0, fragCoord.xy / iResolution.xy, 0.0).r;\n    \n    if (iFrame == 0) {\n        val = pow(noise(uv * 10.0), 3.0);// * (1.0 - distance(uv, vec2(0.5)));\n    } else if (mod(float(iFrame), (1.0 / SPEED)) == 0.0 && fragCoord.x < (iResolution.x / ZOOM) && fragCoord.y < (iResolution.y / ZOOM)) {\n        int texelSize = NEIGHBOR_SIZE;\n\n        int texelHalf = texelSize / 2;\n#ifdef CONWAY\n        texelHalf = 1;\n#endif\n\n        float totalWeight = 0.0;\n        float neighborVal = 0.0;\n        for (int x = -texelHalf; x <= texelHalf; x++) {\n            for (int y = -texelHalf; y <= texelHalf; y++) {\n                if (x == 0 && y == 0) continue;\n                float neighbor = texture(iChannel0, (fragCoord + vec2(x,y)) / iResolution.xy, 0.0).r;\n                \n                float dst = length(vec2(x,y)) / float(texelHalf);\n                float weight = exp(-(dst * dst) / 2.0); // Gaussian search\n                neighborVal += neighbor * weight;\n                totalWeight += weight;\n            }\n        }\n        neighborVal /= totalWeight;\n#ifndef CONWAY\n        float neighborEff = 0.8 - distance(neighborVal, 0.5);\n        if (neighborVal < 0.3) neighborEff = -3.0;\n        if (neighborVal > 0.6) neighborEff = -3.0;\n        val += neighborEff * NEIGHBOR_EFFECT;\n        \n        if (val < 0.5) val -= 0.015;\n#else\n        float neighborEff = 1.0;\n        if (neighborVal < 0.25) neighborEff = -1.0;\n        if (neighborVal > 0.55) neighborEff = -1.0;\n        val += neighborEff;\n#endif\n        \n        if (iMouse.z > 0.1) val -= max(0.0, MOUSE_SIZE - distance(mouse, uv)) * MOUSE_EFF;\n    }\n    val = max(val, 0.0);\n    val = min(val, 1.0);\n#ifdef CONWAY\n    val = 1.0 - step(val, 0.5);\n#endif\n    \n    fragColor = vec4(val, 0.0, 0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define ZOOM 1.0\n// very hacky","name":"Common","description":"","type":"common"}]}