{"ver":"0.1","info":{"id":"dljfWm","date":"1694128739","viewed":162,"name":"triangular symmetry","username":"sympou","description":"triangular domain repetition using symmetry.\nonly requires one read of the sdf !","likes":10,"published":3,"flags":0,"usePreview":0,"tags":["sdfdomainrepetitiontrihex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define triSize 1.75\n\nvec2 triRepeat( in vec2 p ) {\n\n    //we first repeat the space inside hexagons in a grid,\n    //then we divide the hexagons into 6 symmetrical triangles\n    //(this is the method i found, there might be another one !)\n\n    const float n1 = 1.15470053838; // 2. /sqrt(3.)\n    const float n2 = 1.73205080757; //     sqrt(3.)\n    const float n3 = 0.86602540378; // 0.5*sqrt(3.)\n    const vec2 offset = vec2(0.28867513459,0.16666666666); //0.5/sqrt(3), 1/6\n    \n    p /= triSize;\n    p += offset;\n\n    // hexagonal repetition\n\n    p.y = fract(p.y + floor(-p.x*n1)*0.5) - 0.5;\n    p.x = mod(p.x,n3);\n    p  -= vec2(n3, min(sign(p.y),0.) + 0.5 ) * sign(max(p.x*n2 + abs(p.y) - 1., 0.));\n        \n    // radial symmetry (6)\n    \n    p.y = abs(p.y);\n    float c = sign(max(p.y - p.x * n2, 0.))*0.5;    \n    p = abs( p + ( p.yx * vec2(-n2,n2) - p ) * c );\n\n    //\n    \n    p -= offset;\n    p *= triSize;\n\n    return p;\n}\n\nfloat getVal( in vec2 p ) {\n\n    p = triRepeat(p);\n\n    p += vec2(cos(iTime),sin(iTime))*0.1;\n\n    //box sdf from iq\n    vec2 d = abs(p) - 0.1;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = 1.5*(2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = 1.5*(2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n\tfloat d = getVal(p);\n    \n\t// coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 ) {\n        d = getVal(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}