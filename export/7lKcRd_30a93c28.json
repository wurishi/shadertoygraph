{"ver":"0.1","info":{"id":"7lKcRd","date":"1662052575","viewed":146,"name":"hex cell calculation 2","username":"DjinnKahn","description":"extending https://www.shadertoy.com/view/NtBSRV to draw hexagonal cells which may spill into neighbors","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["grid","hexagon","hex","cell","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SCALE = 30.;\nconst mat2x3 SCREEN_TO_TRIANGLE = mat2x3( 1., .5       , -.5       \n                                        , 0., sqrt(.75),  sqrt(.75) ) / SCALE;\nconst mat2 HEX_TO_SCREEN = mat2(  2., .0       \n                               , -1., sqrt(3.) ) * SCALE;\n                               \n                               \nvoid drawCell( inout vec4 fragColor, vec2 fragCoord, vec2 hexOffset )\n{\n   vec3 tri = ceil( SCREEN_TO_TRIANGLE * fragCoord );\n   vec2 hex = floor( (tri.y + tri.xz) / 3. ) + hexOffset;\n   vec2 cellCenter = HEX_TO_SCREEN * hex;\n      \n   vec4 cellColor = vec4( fract( mat2x3(.7,.4,.2,.3,.2,.6) * hex ), .8 );\n      \n   float cellRadius = SCALE*1.7 * (.7 + cos(iTime*2. + hex.x)*.2 + cos(iTime*.5 + hex.y)*.1);\n   float dist = length( fragCoord - cellCenter );   \n       \n   fragColor.rgb = mix( fragColor.rgb, cellColor.rgb, smoothstep( cellRadius+.5, cellRadius-.5, dist ) * cellColor.a );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n   fragColor = vec4( 1. );\n   \n   // draw cell and 6 neighbors\n   drawCell( fragColor, fragCoord, vec2(1.,1.) );\n   drawCell( fragColor, fragCoord, vec2(1.,0.) );\n   drawCell( fragColor, fragCoord, vec2(0.,1.) );\n   drawCell( fragColor, fragCoord, vec2(0.,0.) );\n   drawCell( fragColor, fragCoord, vec2(-1.,0.) );\n   drawCell( fragColor, fragCoord, vec2(0.,-1.) );\n   drawCell( fragColor, fragCoord, vec2(-1.,-1.) );\n}\n","name":"Image","description":"","type":"image"}]}