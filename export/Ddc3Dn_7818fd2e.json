{"ver":"0.1","info":{"id":"Ddc3Dn","date":"1677119676","viewed":178,"name":"gt03","username":"ChunderFPV","description":"Another grid transform.  If it runs slow set increment to .1","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["waves","grid","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define H(a) (cos(radians(vec3(30, 90, 120))-((a)*6.2832))*.5+.5) // hue pallete\n#define RT(a) mat2(cos(m.a*1.571+vec4(0,-1.571,1.571,0))) // rotate\n\nfloat grid(float x)\n{\n    float l = max(0., 1.-(abs(fract(x+.5)-.5)/fwidth(x)/1.5)), // lines\n          g = 1.-abs(sin(x*3.1416)), // glow\n          d = min(1., 1./abs(x)); // darken\n    return (l+g*.3+.1)*sqrt(d);\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec3  c = vec3(0), u, g;\n    vec2  R = iResolution.xy,\n          m = iMouse.xy/R*4.-2.,\n          uv = (U-.5*R)/R.y; // 2d coords\n    float t = iTime/5.,\n          tr = smoothstep(0., 1., sin(t)*.6+.5), // transform ratio\n          s = 10., // scale\n          j = .01, // increment\n          k = j*10.*(1.4-tr); // multiplier\n    if (iMouse.z < 1.)\n          m = vec2(sin(t/2.)*.6, sin(t)*.4); // rotate with time\n    mat2  pitch = RT(y),\n          yaw = RT(x);\n    for (float i = j; i < 1.; i+=j)\n    {\n        u = normalize(vec3(uv, .7*sqrt(i)))*s; // 3d coords\n        u.yz *= pitch;\n        u.xz *= yaw;\n        g = sin(u*6.3)*.5+.6;\n        g = vec3(g.x*g.y*g.z);\n        u = u*(1.-tr)+g*tr; // transform\n        c += grid(u.y-sin(u.x+t))*i*H(i)*k;\n    }\n    c += c*vec3(.1, .7, .9)*tr*c*2.; // some more color\n    C = vec4(c*c*1.5, 1);\n}","name":"Image","description":"","type":"image"}]}