{"ver":"0.1","info":{"id":"3tBXDR","date":"1565511287","viewed":591,"name":"Hole and Protrusions","username":"Hirai_worthless","description":"test","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\n//use for differential\nconst float EPS = 0.001;\n\n//common function\nmat2 genRot(float val){\n\treturn mat2(cos(val), -sin(val),\n               sin(val), cos(val));\n}\n\nfloat rand (float x){\n    x = fract(sin(x*416.31434));\n    x = fract(sin(x*234.41523));\n    x = fract(sin(x*235.51424));\n\treturn x;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nvec3 pmod(vec3 p,float c){\n    float tmp = PI * 2. / c;\n\tfloat l = length(p.xy);\n    float theta = atan(p.y/p.x);\n    theta = mod(theta,PI * 2. / c);\n    return vec3(l * cos(theta), l * sin(theta),p.z);\n    \n}\n\n\n//Common SDF\n\nfloat sphere(vec3 p,vec3 o,float r){\n\treturn length(p - o) - r;\n}\n\nfloat cylinder(vec2 p,vec2 o,float r){\n\treturn length(p - o) - r;\n}\n\nfloat cube(vec3 p,vec3 o,vec3 s){\n    float x = abs(p.x - o.x) - s.x/2.;\n    float y = abs(p.y - o.y) - s.y/2.;\n    float z = abs(p.z - o.z) - s.z/2.;\n    return max(x,max(y,z));\n}\n\nfloat line(vec3 p,vec3 q1,vec3 q2,float r){\n\tfloat t = clamp(\n    \tdot(q2 - p,q2 -q1)/dot(q2-q1,q2-q1),\n    \t0.,\n        1.\n    );\n    vec3 q = t * q1 + (1. - t) * q2;\n    return length(q - p) - r;\n}\n\n\n//Gathering SDF\n\nfloat map(vec3 p){\n    float inner = length(p.xy) - 1.0 - 0.15 * sin(p.z);\n    float at = atan(p.y/p.x);\n    inner -= 0.1 *cos(at * 2.0 + p.z * PI);\n    vec3 q = p;\n    q.xy *= genRot(PI/8. + p.z);\n    q = pmod(q,8.);\n    q.xy *= genRot(-PI/8.);\n    q.z = (fract(q.z / 1.0 + 0.5)-0.5) * 1.0 ;\n    float pole = max(length(q.yz) - 0.05 * (1./1. + pow(q.x,4.) * 4.),-q.x + 0.6);\n    return min(-inner,pole);\n}\n\n//Getting Normal\n\nvec3 getNormal(vec3 p) {\n    return normalize(vec3(\n        map(p + vec3(EPS, 0.0, 0.0)) - map(p + vec3(-EPS,  0.0,  0.0)),\n        map(p + vec3(0.0, EPS, 0.0)) - map(p + vec3( 0.0, -EPS,  0.0)),\n        map(p + vec3(0.0, 0.0, EPS)) - map(p + vec3( 0.0,  0.0, -EPS))\n    ));\n}\n\n//Setting CameraPos\nvec3 Camera(float t){\n\treturn vec3(0.,0.,-2.0 + iTime * 2.0);\n}\n\n//Setting Ray\nvec3 Ray(vec2 uv, float z){\n\tvec3 ray = normalize(vec3(uv,z));\n    ray.xz *= genRot(PI / 12.);\n    ray.yz *= genRot(PI / 12.);\n    ray.xy *= genRot(iTime);\n    return ray;\n}\n\n//Tracing Ray\n\nvec4 trace (vec3 o, vec3 r){\n\tfloat t = 0.0;\n    vec3 p = vec3(0.0,0.0,0.0);\n    \n    for(int i = 0; i < 256; ++i){\n        p = o + r * t;\n        float d = map(p);\n        t += d * 0.25;\n    }\n    return vec4(getNormal(p),t);\n}\n\n//Making color\nvec3 getColor(vec3 o,vec3 r,vec4 data){\n    float t = data.w;\n    float fog = 1.0 / (1.0 + t * t * 0.05);\n    float a = dot(data.xyz,r);\n    vec3 p = o + r * t;\n    vec3 fc = min(fract(p.x),fract(p.z))<0.03 ? vec3(0.95) : vec3(0.05);\n    fc = mix(fc,vec3(1.),1. + a*1.5);\n    fc = mix(vec3(0.95),fc,fog);\n    fc = t < 1000. ? fc : vec3(0.95);\n    //fc = vec3(fog);\n    return fc;\n}\n\n//Drawing\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //set canvas\n    vec2 uv = fragCoord.xy /iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //set camera and ray\n    vec3 r = Ray(uv,1.2);\n    vec3 o = Camera(iTime);\n    \n    //trace ray\n    vec4 data = trace(o,r);\n    vec3 fc = getColor(o,r,data) ;\n\t//fc = vec3(fog);\n    // Output to screen\n    fragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}