{"ver":"0.1","info":{"id":"llSSWW","date":"1443595402","viewed":3892,"name":"Cosmic Marble","username":"eddietree","description":"Marble-inspired refraction","likes":136,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raymarching","refraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// a study on raymarching, soft-shadows, ao, etc\n// borrowed heavy from others, esp @cabbibo and @iquilezles and more\n// by @eddietree\n\nconst float MAX_TRACE_DISTANCE = 10.0;\nconst float INTERSECTION_PRECISION = 0.001;\nconst int NUM_OF_TRACE_STEPS = 50;\n\nfloat distSphere(vec3 p, float radius) \n{\n    return length(p) - radius;\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    float radius = 4.0;\n    float theta = 0.3 + 5.0*mouse.x - iTime*0.5;\n    float phi = 3.14159*0.4;//5.0*mouse.y;\n    \n    float pos_x = radius * cos(theta) * sin(phi);\n    float pos_z = radius * sin(theta) * sin(phi);\n    float pos_y = radius * cos(phi);\n    \n    camPos = vec3(pos_x, pos_y, pos_z);\n    camTar = vec3(0.0,0.0,0.0);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\n// noise func\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n\treturn (d1.x<d2.x) ? d1 : d2; \n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n   \n    float sphere = distSphere(pos, 1.75) + noise(pos * 1.0 + iTime*0.75);   \n    float t1 = sphere;\n    \n    t1 = smin( t1, distSphere( pos + vec3(1.8,0.0,0.0), 0.2 ), 2.0 );\n    t1 = smin( t1, distSphere( pos + vec3(-1.8,0.0,-1.0), 0.2 ), 2.0 );\n   \n   \treturn vec2( t1, 1.0 );\n    \n}\n\nvec2 map2( vec3 pos ){  \n   \n    //float sphere = distSphere(pos, 1.0) + noise(pos * 1.2 + vec3(-0.3) + iTime*0.2);\n    float sphere = distSphere(pos, 0.45);\n    \n    sphere = smin( sphere, distSphere( pos + vec3(-0.4,0.0,-1.0), 0.04 ), 5.0 );\n    sphere = smin( sphere, distSphere( pos + vec3(-0.5,-0.75,0.0), 0.05 ), 50.0 );\n    sphere = smin( sphere, distSphere( pos + vec3(0.5,0.7,0.5), 0.1 ), 5.0 );\n\n   \treturn vec2( sphere, 1.0 );\n}\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n    const float k = 2.0;\n    \n    const int maxSteps = 10;\n    float t = 0.0;\n    float res = 1.0;\n    \n    for(int i = 0; i < maxSteps; ++i) {\n        \n        float d = map(ro + rd*t).x;\n            \n        if(d < INTERSECTION_PRECISION) {\n            \n            return 0.0;\n        }\n        \n        res = min( res, k*d/t );\n        t += d;\n    }\n    \n    return res;\n}\n\n\nfloat ambientOcclusion( in vec3 ro, in vec3 rd )\n{\n    const int maxSteps = 7;\n    const float stepSize = 0.05;\n    \n    float t = 0.0;\n    float res = 0.0;\n    \n    // starting d\n    float d0 = map(ro).x;\n    \n    for(int i = 0; i < maxSteps; ++i) {\n        \n        float d = map(ro + rd*t).x;\n\t\tfloat diff = max(d-d0, 0.0);\n        \n        res += diff;\n        \n        t += stepSize;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nvec3 calcNormal2( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map2(pos+eps.xyy).x - map2(pos-eps.xyy).x,\n\t    map2(pos+eps.yxy).x - map2(pos-eps.yxy).x,\n\t    map2(pos+eps.yyx).x - map2(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvoid renderColor2( vec3 ro , vec3 rd, inout vec3 color, vec3 currPos )\n{\n    //vec3 lightDir = normalize(vec3(1.0,0.4,0.0));\n    vec3 normal = calcNormal2( currPos );\n    vec3 normal_distorted = calcNormal2( currPos +  rd*noise(currPos*2.5 + iTime*2.0)*0.75 );\n\n    float ndotl = abs(dot( -rd, normal ));\n    float ndotl_distorted = (dot( -rd, normal_distorted ))*0.5+0.5;\n    float rim = pow(1.0-ndotl, 3.0);\n    float rim_distorted = pow(1.0-ndotl_distorted, 6.0);\n\n    //color = mix( color, normal*0.5+vec3(0.5), rim_distorted+0.15 );\n    //color = mix( vec3(0.0,0.1,0.6), color, rim*1.5 );\n    color = mix( refract(normal, rd, 0.5)*0.5+vec3(0.5), color, rim );\n    //color = mix( vec3(0.1), color, rim );\n    color += rim*0.6;\n}\n\n// for inside ball\nbool renderRayMarch2(vec3 ro, vec3 rd, inout vec3 color ) {\n    \n    float t = 0.0;\n    float d = 0.0;\n    \n    for(int i = 0; i < NUM_OF_TRACE_STEPS; ++i) \n    {\n        vec3 currPos = ro + rd*t;\n        d = map2(currPos).x;\n        if(d < INTERSECTION_PRECISION) \n        {\n            renderColor2( ro, rd, color, currPos );\n            return true;\n        }\n        \n        t += d;\n    }\n    \n    if(d < INTERSECTION_PRECISION) \n    {\n        vec3 currPos = ro + rd*t;\n        renderColor2( ro, rd, color, currPos );\n        return true;\n    }\n\n    return false;\n}\n\nvoid renderColor( vec3 ro , vec3 rd, inout vec3 color, vec3 currPos )\n{\n    vec3 lightDir = normalize(vec3(1.0,0.4,0.0));\n    vec3 normal = calcNormal( currPos );\n    vec3 normal_distorted = calcNormal( currPos +  noise(currPos*1.5 + vec3(0.0,0.0,sin(iTime*0.75))) );\n    float shadowVal = shadow( currPos - rd* 0.01, lightDir  );\n    float ao = ambientOcclusion( currPos - normal*0.01, normal );\n\n    float ndotl = abs(dot( -rd, normal ));\n    float ndotl_distorted = abs(dot( -rd, normal_distorted ));\n    float rim = pow(1.0-ndotl, 6.0);\n    float rim_distorted = pow(1.0-ndotl_distorted, 6.0);\n\n\n    color = mix( color, normal*0.5+vec3(0.5), rim_distorted+0.1 );\n    color += rim;\n    //color = normal;\n\n    // refracted ray-march into the inside area\n    vec3 color2 = vec3(0.5);\n    renderRayMarch2( currPos, refract(rd, normal, 0.85), color );\n    //renderRayMarch2( currPos, rayDirection, color2 );\n\n    //color = color2;\n    //color = normal;\n    //color *= vec3(mix(0.25,1.0,shadowVal));\n\n    color *= vec3(mix(0.8,1.0,ao));\n}\n\nvec3 rayPlaneIntersection( vec3 ro, vec3 rd, vec4 plane )\n{\n\tfloat t = -( dot(ro, plane.xyz) + plane.w) / dot( rd, plane.xyz );\n\treturn ro + t * rd;\n}\n\nbool renderRayMarch(vec3 ro, vec3 rd, inout vec3 color ) \n{\n    const int maxSteps = NUM_OF_TRACE_STEPS;\n        \n    float t = 0.0;\n    float d = 0.0;\n    \n    for(int i = 0; i < maxSteps; ++i) \n    {\n        vec3 currPos = ro + rd * t;\n        d = map(currPos).x;\n        if(d < INTERSECTION_PRECISION) \n        {\n            break;\n        }\n        \n        t += d;\n    }\n    \n    if(d < INTERSECTION_PRECISION) \n    {\n        vec3 currPos = ro + rd * t;\n        renderColor( ro, rd, color, currPos );\n        return true;\n    }\n    \n    vec3 planePoint = rayPlaneIntersection(ro, rd, vec4(0.0, 1.0, 0.0, 1.0));\n\tfloat shadowFloor = shadow( planePoint, vec3(0.0,1.0,0.0));\n\tcolor = color * mix( 0.8, 1.0, shadowFloor );\n    \n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    // calc color\n    vec3 col = vec3(0.9);\n    renderRayMarch( ro, rd, col );\n    \n    // vignette, OF COURSE\n    float vignette = 1.0-smoothstep(1.0,2.5, length(p));\n    col.xyz *= mix( 0.7, 1.0, vignette);\n        \n    fragColor = vec4( col , 1. );\n}","name":"","description":"","type":"image"}]}