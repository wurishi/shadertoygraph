{"ver":"0.1","info":{"id":"4ljGWD","date":"1429130998","viewed":196,"name":"MMandelbrot","username":"nslottow","description":"Playing around.  Then I saw TekF's cool experiment to try to get double precision using 2 floats: https://www.shadertoy.com/view/XdsXWN\n\nMaybe I'll try that here later.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const int maxIterations = 4000;\n\nvec2 cmul(vec2 a, vec2 b)\n{\n    return vec2(\n        a.x * b.x - a.y * b.y,\n        a.y * b.x + a.x * b.y);\n}\n\nint mandelbrot(vec2 c)\n{\n    vec2 z = vec2(0.0, 0.0);\n    for (int i = 0; i < maxIterations; i++)\n    {\n        z = cmul(z, z) + c;\n        \n        // If |z| > 2, then c is not in the set\n        if (dot(z, z) > 4.0)\n        {\n            return i;\n        }\n    }\n    \n    return maxIterations;\n}\n\nvec4 color(int i)\n{\n    // TODO: Use some palette and interpolate\n    float s = float(i) / float(maxIterations);\n    //vec4 a = vec4(0.1, 0.5, 1.0, 1.0);\n    //vec4 b = vec4(0.9, 0.4, 0.0, 1.0);\n    //return a * s + b * (1.0 - s);\n    float t = 0.5 * sin(iTime / 20.0) + 0.5;\n    return texture(iChannel0, vec2(1.0 - s, t));\n    //return vec4(1.0 - float(i) / float(maxIterations), 0, 0.5, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x - vec2(0.5, 0.5);\n    \n    float t = iTime * 30.0;\n    float zoom = 300.0 / (t * t * sin(iTime / 15.0));\n    float angle = -sin(iTime / 15.0);\n    \n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 rotationMatrix = mat2(\n       c, s,\n       -s, c);\n    \n    vec2 p = rotationMatrix * (uv * zoom) + vec2(0.37371, 0.160514);\n    \n\tfragColor = color(mandelbrot(p));\n}\n","name":"","description":"","type":"image"}]}