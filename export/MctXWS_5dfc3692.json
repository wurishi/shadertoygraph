{"ver":"0.1","info":{"id":"MctXWS","date":"1714410936","viewed":143,"name":"2D Fireball ","username":"joj","description":"An attempt at a code version of a fire trails shader (single fireball).\nOriginal by celestial maze: https://twitter.com/cmzw_/status/1782016766362927162","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nvec2 random2(vec2 st, float seed){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123 * seed * 0.753421);\n}\n\n// Remap value\nfloat map( float value, float fromMin, float fromMax, float toMin, float toMax ) \n{\n    value = (value - fromMin) / (fromMax - fromMin);\n    value = toMin + value * (toMax - toMin);\n    return value;\n}\n\n// Remap value with stepped lerp\nfloat mapStep( float value, float fromMin, float fromMax, float toMin, float toMax, float steps )\n{\n    value = (value - fromMin) / (fromMax - fromMin);\n    value = floor(value * steps) / steps;\n    value = toMin + value * (toMax - toMin);\n    return value;\n}\n\n// Blender's mixRGB node, linear light mode\nvec3 linearLight(in vec3 a, in vec3 b, in float factor)\n{\n    return a + factor * (2. * b - 1.);\n}\n\nfloat noise(vec2 st, float seed) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0), seed ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0), seed ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0), seed ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0), seed ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm (in float seed, in vec2 st, in float scale, in int octaves, in float roughness, in float lacunarity) {\n    // Initial values\n    float amplitude = .5;\n    float frequency = 0.;\n    float value = 0.;\n    st *= scale;\n    //\n    // Loop of octaves\n    for (int i = 1; i < octaves; i++) {\n        value += amplitude * noise(st, seed);\n        st *= lacunarity;\n        amplitude *= roughness;\n    }\n    return value * .5 + .5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    float uvX = uv.x;\n    vec2 uvScale = vec2(1.0, 2.0);\n    uv = (uv * 2. - 1.); //* uvScale;\n    //uv *= (1. - step(1., abs(uv.y))) * (1. - step(1., abs(uv.x)));\n    vec2 uvFlame = uv + vec2(iTime * 2., 0.);\n    \n    float roughness = 0.675;\n    int detail = 4;\n    float scale = 4.0;\n    float lacunarity = 2.0;\n    float noise1d = fbm(24., uvFlame, scale, detail, roughness, lacunarity);\n    vec3 noise3d = vec3(fbm(24., uvFlame, scale, detail, roughness, lacunarity), \n                        fbm(12., uvFlame, scale, detail, roughness, lacunarity),\n                        fbm(33., uvFlame, scale, detail, roughness, lacunarity));\n    \n    float lightFactor = clamp(map(uvX, 0.13, .87, 1., .06), .06, 1.);\n    \n    vec3 light = linearLight(vec3(uv * vec2(1., 1.), 0.), noise3d, lightFactor);\n    light = abs(light) - vec3(.75, 0., 0.);\n    light = max(light, vec3(0.));\n    float lightLength = length(light);\n    float fireball_grad = clamp(map(uvX, -.24, 0.82, 0.0, 0.27), 0.0, 0.27);\n    lightLength -= fireball_grad;\n    lightLength = step(lightLength, -.01);\n    \n    noise1d *= uvX;\n    noise1d = mapStep(noise1d, .24, .77, .0, 2., 4.);\n    noise1d *= pow(uvX, 4.);\n    \n    vec3 color = mix(vec3(.33), vec3(1., .33, .068) * noise1d * 4., lightLength);\n    \n    // Output to screen\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}