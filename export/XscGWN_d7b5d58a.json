{"ver":"0.1","info":{"id":"XscGWN","date":"1449992644","viewed":677,"name":"D-man","username":"Sobaya","description":"D-man in distance Field","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["dlang"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float epsilon = 0.01;\nconst float screen_width = 150.;\nconst float screen_height = 150.;\nconst vec3 lightPos = vec3(100, 100, -100);\n \nfloat distBox(vec3 p, vec3 s) {\t\n\treturn length(max(vec3(0, 0, 0), abs(p) - s));\n}\n\nfloat length8(vec2 p) {\n    return pow( p.x*p.x*p.x*p.x*p.x*p.x*p.x*p.x \n               + p.y*p.y*p.y*p.y*p.y*p.y*p.y*p.y,\n               1.0 / 8.);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec3 rotate(vec3 p, float t) {\n    return vec3(\n        p.x * cos(t) - p.y * sin(t),\n        p.x * sin(t) + p.y * cos(t),\n        p.z);\n}\n\n//D's right side\nfloat dist1(vec3 p) {\n    vec2 t = vec2(60.,1.9);\n    vec3 p2 = p + vec3(61.4,0,0);\n    vec2 q = vec2(length(p2.xy)-t.x,p2.z);\n    float d1 = length8(q)-t.y;\n    float s = atan(p2.y / p2.x);\n    if (abs(s) > 0.41 || p2.x < 0.) d1 = 1145141919810.;\n    return d1;\n}\n\n//D's left side\nfloat dist2(vec3 p) {\n    vec2 t = vec2(23.,1.9);\n    vec3 p3 = p + vec3(5,0,0);\n    p3.x *= 1.5;\n    vec2 q = vec2(length(p3.xy)-t.x,p3.z);\n    float d2 = length8(q)-t.y;\n    if (p3.x < 0.) d2 = 1145141919810.;\n    return d2;\n}\n\n//Right leg base\nfloat dist3(vec3 p) {\n    p += vec3(4,28,0);\n    p = rotate(p, .4);\n    vec2 h = vec2(.6, 4.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Right leg tip\nfloat dist4(vec3 p) {\n    p += vec3(4,34,0);\n    p = rotate(p, -.4);\n    vec2 h = vec2(.6, 3.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Left leg base\nfloat dist5(vec3 p) {\n    p += vec3(-7,26,0);\n    p = rotate(p, -.4);\n    vec2 h = vec2(.6, 6.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Left leg tip\nfloat dist6(vec3 p) {\n    p += vec3(-8,33.5,0);\n    p = rotate(p, .4);\n    vec2 h = vec2(.6, 3.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Right arm base\nfloat dist7(vec3 p) {\n    p += vec3(7,-15,0);\n    p = rotate(p, -.6);\n    vec2 h = vec2(.6, 7.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Right arm tip\nfloat dist8(vec3 p) {\n    p += vec3(7,-29,0);\n    p = rotate(p, .4);\n    vec2 h = vec2(.6, 9.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Left arm base\nfloat dist9(vec3 p) {\n    p += vec3(-10,-20,0);\n    p = rotate(p, .2);\n    vec2 h = vec2(.6, 8.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Left arm tip\nfloat dist10(vec3 p) {\n    p += vec3(-8,-32,0);\n    p = rotate(p, -.7);\n    vec2 h = vec2(.6, 6.);\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Left hand\nfloat dist11(vec3 p) {\n    p += vec3(-4.,-38,0);\n    p.y *= .4;\n   \treturn length(p) - 1.5;\n}\n\n//Right hand\nfloat dist12(vec3 p) {\n    p += vec3(4.,-38,0);\n    p.y *= .4;\n   \treturn length(p) - 1.8;\n}\n\n//Right foot\nfloat dist13(vec3 p) {\n    p += vec3(5.,38,0);\n    p.x *= .8;\n   \treturn length(p) - 2.2;\n}\n\n//Left foot\nfloat dist14(vec3 p) {\n    p += vec3(-8.,38,0);\n    p.x *= .8;\n   \treturn length(p) - 2.2;\n}\n\n//Right black eye\nfloat dist15(vec3 p) {\n    p += vec3(-6.5,-8,-6.);\n    p = rotate(p, .1);\n    p.y *= .45;\n   \treturn length(p) - 1.5;\n}\n\n//Right white eye\nfloat dist16(vec3 p) {\n    p += vec3(-6.,-10,-4);\n    p.x *= 1.3;\n    p.y *= .5;\n   \treturn length(p) - 2.7;\n}\n\n//Left black eye\nfloat dist17(vec3 p) {\n   p += vec3(-.6,-12,-6.);\n    p = rotate(p, .1);\n    p.y *= .45;\n   \treturn length(p) - 1.5;\n}\n\n//Left white eye\nfloat dist18(vec3 p) {\n    p += vec3(0,-14,-4);\n    p.x *= 1.3;\n    p.y *= .6;\n   \treturn length(p) - 2.8;\n}\n \nvec2 dist(vec3 p) {\n    p.xz = mod(p.xz, vec2(100, 100)) - vec2(50,50);\n    p.y *= 2.;\n    p.y -= 40.;\n    vec2 result = vec2(114514191981000., -1);\n    float d = dist1(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 0.;\n    }\n    d = dist2(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 1.;\n    }\n    d = dist3(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n     d = dist4(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n     d = dist5(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n     d = dist6(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    } \n    d = dist7(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n    d = dist8(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n     d = dist9(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    } \n    d = dist10(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n     d = dist11(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 3.;\n    }\n     d = dist12(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 3.;\n    }\n     d = dist13(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 3.;\n    }\n     d = dist14(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 3.;\n    }\n     d = dist15(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n     d = dist16(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 3.;\n    }\n    d = dist17(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 2.;\n    }\n    d = dist18(p);\n    if (d < result.x) {\n        result.x = d;\n        result.y = 3.;\n    }\n    return result;\n}\n\nvec3 getColor(float id) {\n    if (0. <= id && id <= 1.) return vec3(1.,0,0);\n    else if (2. == id) return vec3(0,0,0);\n    else if (3.0 == id) return vec3(1,1,1);\n    return vec3(0,0,1);\n}\n \nvec3 getNormal(vec3 p) {\n\tvec3 result;\n\tresult.x = dist(p + vec3(epsilon, 0, 0)).x - dist(p - vec3(epsilon, 0, 0)).x;\n\tresult.y = dist(p + vec3(0, epsilon, 0)).x - dist(p - vec3(0, epsilon, 0)).x;\n\tresult.z = dist(p + vec3(0, 0, epsilon)).x - dist(p - vec3(0, 0, epsilon)).x;\n\treturn normalize(result);\n}\n\n\n\nvec4 rayMarch(vec3 start,vec3 ray) {\n    float minDist = 114514.0;\n    for (int j = 0; j <30; j++) {\n\t\tfloat d = dist(start).x;\n        if (minDist > d) minDist = d;\n\t\tstart += d * ray;\n\t\tif (-epsilon < d && d < epsilon)\n\t\t\tbreak;\n\t}\n    return vec4(start, minDist);\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 tc = fragCoord;\n    tc.x /= iResolution.x;\n    tc.y /= iResolution.y;\n    tc -= .5;\n    tc.x /= iResolution.y / iResolution.x;\n    vec3 eye = vec3(0,200, 600.);\n    vec3 xvec = vec3(1., 0, 0);\n    vec3 yvec = vec3(0, 1., 0);\n    vec3 n = normalize(vec3(0,1,0));\n    float angle = .5 * iTime;\n    float c = cos(angle);\n    float s = sin(angle);\n    eye *= (s + 1.1) * 3.;\n    mat4 matrix;\n\tmatrix[0][0] = n[0]*n[0]*(1.-c)+c;\n\tmatrix[0][1] = n[0]*n[1]*(1.-c)-n[2]*s;\n\tmatrix[0][2] = n[2]*n[0]*(1.-c)+n[1]*s;\n\tmatrix[1][0] = n[0]*n[1]*(1.-c)+n[2]*s;\n\tmatrix[1][1] = n[1]*n[1]*(1.-c)+c;\n\tmatrix[1][2] = n[1]*n[2]*(1.-c)-n[0]*s;\n\tmatrix[2][0] = n[2]*n[0]*(1.-c)-n[1]*s;\n\tmatrix[2][1] = n[1]*n[2]*(1.-c)+n[0]*s;\n\tmatrix[2][2] = n[2]*n[2]*(1.-c)+c;\n    eye = (matrix * vec4(eye, 1.)).xyz;\n    xvec = (matrix * vec4(xvec, 1.)).xyz;\n    yvec = (matrix * vec4(yvec, 1.)).xyz;\n\tvec3 cv;//camera vector\n\tcv = normalize(screen_width * tc.x * xvec + screen_height * tc.y * yvec - eye);\n    vec4 res = rayMarch(eye, cv);\n\tvec3 p = res.xyz;\n\tvec2 d = dist(p);\n\tif (d.x < epsilon) {\n\t\tvec3 normal = getNormal(p);\n\t\tfloat dotProduct = -dot(normal, cv);\n        vec3 color;\n\t\tfragColor = vec4(vec3(1, 1, 1) * dotProduct, 1.0);\n        vec3 v = reflect(cv, normal);\n        color = texture(iChannel0, v).xyz;\n        color = getColor(d.y) * .5 + color * .5;\n        color += pow(dot(reflect(normalize(lightPos - p), normal),cv), 5.0);\n        fragColor = vec4(color, 1.);\n\t} else {\n        if (res.w < 60.0 * epsilon) { fragColor = vec4(0,0,0,0); return;}\n        float t = -eye.y / cv.y;\n        if (t < 0.) { fragColor.rgb = vec3(0.7,0.7,.9); return;}\n        vec3 target = eye + cv * t;\n        p = rayMarch(lightPos, normalize(target-lightPos)).xyz;\n\t\tfragColor = vec4(0.5, 0.5, 0.5, 1);\n        if (p.y > epsilon) fragColor *= .5;\n        \n        p.xz = mod(target.xz - vec2(25,25), vec2(100,100)) - vec2(50,50);\n        if (p.x * p.z > 0.) fragColor *= .5;\n        else {\n            p = rayMarch(target, reflect(normalize(target - eye),vec3(0,1,0))).xyz;\n            fragColor.rgb = fragColor.rgb * .8 + .2 * getColor(dist(p).y);\n            if (dist(p).x > epsilon) fragColor.rgb += vec3(0,0,.2);\n        \tfragColor.rgb += pow(dot(reflect(normalize(lightPos - target), vec3(0,1,0)),cv), 1250.0);\n        }\n\t}\n}","name":"Image","description":"","type":"image"}]}