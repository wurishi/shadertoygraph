{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"//Mercury\n//by\n//Kleber Garcia 2013 (c)\n\nconst float EPSILON = 0.001;\n\nvec3 sphere1Pos;\nconst float sphere1Rad = 2.0;\nconst vec3 sphere1Col = vec3(0.0,1.0,1.0);\nconst vec3 dx = vec3(EPSILON, 0, 0);\nconst vec3 dy = vec3(0, EPSILON, 0);\nconst vec3 dz = vec3(0, 0, EPSILON);\nvec3 lightDir = normalize(vec3(20.0, -1.0, 1.0));\nfloat lightDistance = 10000.0;\n\nvec3 waterNormal = normalize(vec3(-0.45,0.45,-0.1));\nvec3 waterPos = vec3(0,-0.10,0);\nvec3 waterCol = vec3(0.4,0.4,0.4);\nvec3 fogCol = vec3(0.6, 0.9, 1.0);\nfloat fogLimit = 5.40;\n\nfloat zPlaneDist = 1000.0;\nconst vec3 zPlaneCol = vec3(0.0,0.0,0.0);\n\nfloat sphere(const in vec3 pos, const in vec3 loc, const in float rad)\n{\n\treturn length(pos - loc) - rad;\n}\n\nfloat zPlane(const in vec3 pos)\n{\n\treturn zPlaneDist - pos.z;\n}\n\nfloat water(const in vec3 pos)\n{\n\tvec3 vecToCenter = pos - waterPos;\n\tvec3 axisU = normalize(cross(waterNormal, vec3(0,0,1)));\n\tvec3 axisV = normalize(cross(axisU, waterNormal));\n\tfloat posU = dot(vecToCenter, axisU);\n\tfloat posV = dot(vecToCenter, axisV);\n\treturn dot(waterNormal, vecToCenter) + (1.0 - pos.z*(1.0/60.0))* (0.005*cos(20.0*posU + 5.0*iTime) + 0.07*sin(30.0*posV+2.0*iTime));\n}\n\nfloat scene(const in vec3 pos, const in vec3 rayDir)\n{\n\tfloat dist = sphere(pos, sphere1Pos, sphere1Rad);\n\tdist = min(zPlane(pos), dist); \n\tdist = min(water(pos),dist);\n\treturn dist;\n}\n\nvec3 sceneColor(const in vec3 pos, const in float shadowStep)\n{\n\tvec3 c = zPlaneCol;\n\tfloat z = zPlane(pos);\n\tfloat s = sphere(pos, sphere1Pos, sphere1Rad);            \n\tfloat w = water(pos);\n\t\n\tfloat d = min(z,min(s,w)); \n\t\n\tif (d == z)\n\t{\n\t\tc = zPlaneCol;\n\t}\n\telse if (d == s)\n\t{\n\t\tc = sphere1Col;\n\t}\n\telse if (d == w)\n\t{\n\t\tc = waterCol+ shadowStep*pos.z*(1.0/( 4.0))*vec3(1,1,1);//this adds some baddas blum on the mercury\t\t\n\t}\n\t\n\treturn c;\n}\n\nvec3 raymarch(const in vec3 origin, const in vec3 rayDir)\n{\n\tfloat direction =  EPSILON + 1337.0;//number not epsilon\n\tvec3 o = origin;\n\tbool finished = false;\n\tfor (int i = 0; i < 45; ++i)\n\t{\n\t\tif (direction > EPSILON)\n\t\t{\n\t\t\tdirection = scene(o, rayDir);\n\t\t\to += direction*rayDir;\n\t\t}\n\t\t\n\t}\n\treturn o;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    sphere1Pos = vec3(-2.0,3.0, 2.0) + vec3(0.2,0.2,0.2) * 3.0*sin(0.5*iTime);\n\n    vec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\tscreenPos.x *= aspect;\n\tvec2 uv = screenPos * 0.5 + 0.5;\n\tvec3 rayDir = normalize(vec3(screenPos, 2.0));\n\tvec3 origin = vec3(0,0,-4);\n\tvec3 color = vec3(0,0,0);\n\torigin = raymarch(origin, rayDir);\n\t\n\t\n\tvec3 normal = normalize(vec3(scene(origin - dx, rayDir) - scene(origin + dx, rayDir), scene(origin - dy, rayDir) - scene(origin + dy, rayDir), scene(origin - dz, rayDir) - scene(origin + dz, rayDir)));\n\t\n\t\n\t//occlusion pass\n\tvec3 lightPos = origin - lightDistance*lightDir;\n\t\n\tvec3 occlusionPos = raymarch(lightPos, lightDir);\n\tfloat inShadow = min(max((length(lightPos - origin) - length(lightPos - occlusionPos)), 0.0), 7.0) / 7.0; \n\t\n\tfloat shadowStep = step(inShadow, 0.9);\n\tfloat spec = shadowStep*12.45*pow(max(dot(normalize(rayDir + lightDir), normal), 0.0), 18.0);\t\n\tfloat inLight = max(1.0 - inShadow, 0.25);\n\t\n\tfloat diffuse = max(0.2, dot(normal, lightDir));\n\tcolor = sceneColor(origin, shadowStep);\n\tfloat fogDissipation =  clamp((origin.z +4.0)/(4.0 + fogLimit), 0.3, 1.0);\n\t\n\tvec3 lightedColor = (1.0 - fogDissipation)*(vec3( color*diffuse + spec))*inLight + fogDissipation*fogCol;\n\tfragColor = vec4(lightedColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lds3RN","date":"1364695900","viewed":470,"name":"Mercury","username":"Kecho","description":"Simple water using sine, cosine and a regular plane. Also adding some fog effect to add drama!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["water","simplewatersincosine"],"hasliked":0,"parentid":"","parentname":""}}