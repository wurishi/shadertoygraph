{"ver":"0.1","info":{"id":"lcGGRy","date":"1712905133","viewed":57,"name":"Square Noise Colours 1","username":"ola","description":"This is a visual experiment using hashing of coordinates as the source for generating zoomable noise.\nIt intentionally uses alias-distortion as a visual effect.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","aliasing","colors","zoom","hash","colours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Square Noise Colours 1.\n// All rights reserved Ola Fosheim Grøstad 20©24. The artwork as a whole is restricted under copyright.\n// The functions \"hash\" and \"tilenoise\" are unrestricted and can be used for whatever purpose, except for recreating this work.\n\nfloat hash(uvec2 v, uint seed)\n{\n    v *= uvec2(1597334657U, 3812015759U); \n    return float((v.x ^ v.y)*(1999999973u + seed)) * (1.0/float(0xffffffffU)) - 0.5;\n}\n\n\nfloat tilenoise(vec2 uv, uint seed) {\n    int n=64;\n    float r = 0.0;\n    for (int i=0; i<n; i++){\n        float k1 = pow(0.9,float(i+1));\n        float k2 = pow(2.0,float(i));\n        r += k1*hash(uvec2(ivec2(floor(k2*uv))), seed);\n    }\n    return 0.5+0.2*r;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float scale = 0.000001+(0.3*iResolution.y)*pow((0.5*sin(iTime*0.03+5.35079632679)+0.5),4.0);\n    vec2 uv = scale*(2.0*fragCoord-iResolution.xy)/iResolution.yy;\n        \n    float r = tilenoise(uv, 0u);\n    float g = tilenoise(uv, 32767u);\n    float b = tilenoise(uv, 255u);\n    \n    \n    fragColor = vec4(pow(vec3(r,g,b),vec3(0.54)),1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}