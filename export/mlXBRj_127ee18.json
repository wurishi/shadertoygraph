{"ver":"0.1","info":{"id":"mlXBRj","date":"1693167006","viewed":61,"name":"prismatic honeycomb with objects","username":"jt","description":"Render objects located in the cells of a prismatic honeycomb.\n[b]TODO[/b]: implement objects other than boxes.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raycasting","triangle","triangles","voxel","prism","4d","slice","honeycomb","dda","step","tesselation","triangular","prisms"],"hasliked":0,"parentid":"mllcD2","parentname":"Triangle Prisms via Hyper-Voxels"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlXBRj prismatic honeycomb with objects written 2023 by jt\n// based on https://www.shadertoy.com/view/mllcD2 Triangle Prisms via Hyper-Voxels DDA\n// based on https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// using voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n\n// Render objects located in the cells of a prismatic honeycomb.\n\n// TODO: implement objects other than boxes.\n\n// tags: 3d, raytracing, raycasting, triangle, triangles, voxel, prism, 4d, slice, honeycomb, dda, step, tesselation, triangular, prisms\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 64\n\nfloat torus(vec3 p, vec2 t)\n{\n    return length(vec2(length(p.xy) - t.x, p.z)) - t.y;\n}\n\nbool example()\n{\n    return true;// fract(iTime / 10.0) < 0.5;\n}\n\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra )\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - ra*ra;\n    float h = b*b - c;\n    if( h<0.0 ) return vec2(-1.0); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n\n/*\nvec2 sphIntersect( in vec3 ro, in vec3 rd, in vec3 ce, float ra ) // https://iquilezles.org/articles/intersectors/\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    vec3 qc = oc - b*rd;\n    float h = ra*ra - dot( qc, qc );\n    if( h<0.0 ) return vec2(DIST_MAX); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n*/\n// modified https://iquilezles.org/articles/intersectors\nvec2 boxIntersection(vec3 ro, vec3 rd, vec3 s)\n{\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * s;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if(tN > tF || tF < 0.0) return vec2(DIST_MAX);\n    return vec2(tN, tF);\n}\n\nvec3 boxNormal(vec3 e, vec3 p)\n{\n    vec3 d = abs(p) - e;\n    vec3 s = sign(p);\n\n    if (d.z > d.y && d.z > d.x)\n    {\n        return vec3(0, 0, s.z);\n    }\n    else\n    {\n        if (d.y > d.x)\n        {\n            return vec3(0, s.y, 0);\n        }\n        else\n        {\n            return vec3(s.x, 0, 0);\n        }\n    }\n\n    return vec3(0);\n}\n\nvec4 triangle_prism_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (additional fourth dimension to step along prism height) by jt\n{\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T =\n        mat3\n        (\n            vec3(+1.0/sqrt(2.0),-1.0/sqrt(2.0), 0.0),\n            vec3(-1.0/sqrt(6.0),-1.0/sqrt(6.0), 2.0/sqrt(6.0)),\n            vec3(-1.0/sqrt(3.0),-1.0/sqrt(3.0),-1.0/sqrt(3.0))\n        );\n\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec4 ray_pos = vec4(T * vec3(ray_pos_orig.xy, 0), ray_pos_orig.z);\n    vec4 ray_dir = vec4(T * vec3(ray_dir_orig.xy, 0), ray_dir_orig.z);\n\n    // initialization from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec4 map_pos0 = ivec4(floor(ray_pos));\n    vec4 delta_dist = 1.0 / abs(ray_dir);\n    ivec4 ray_step = ivec4(sign(ray_dir));\n    vec4 side_dist0 = (sign(ray_dir) * (vec4(map_pos0) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist;\n\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // core based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        bvec4 mask0 = lessThanEqual(side_dist0.xyzw, min(min(side_dist0.yzwx, side_dist0.zwxy), side_dist0.wxyz));\n        side_dist0 += vec4(mask0) * delta_dist;\n        map_pos0 += ivec4(vec4(mask0)) * ray_step;\n\n        // TODO: can triangles be grouped to form hexagons by some simple coordinate-transform like (((map_pos.xyz+ivec3(0,0,1))>>1)<<1)\n        vec3 unpos = vec3((vec3(map_pos0.xyz)*T).xy, map_pos0.w); // NOTE: after transforming back z component should be 0 here so we can drop it\n        float d = length(vec4(mask0) * (side_dist0 - delta_dist)); // assume ray_dir normalized\n        bool solid = false;\n        if(example())\n        {\n            //solid = (torus(ray_pos_orig+ray_dir_orig*d, vec2(9.0, 3.0)) < 0.0);\n            //ivec3 unmap = ivec3(2*map_pos.x-map_pos.z, 2*map_pos.y-map_pos.z, 2*map_pos.w); // works somehow but asymmetric\n            //solid = torus(vec3(unmap), vec2(19.0, 7.0)) < 0.0;\n            solid = torus(unpos, vec2(9.0, 3.5)) < 0.0;\n        }\n        else\n            //solid = length(vec4(map_pos)) < 7.0; // 4d sphere (before converting cell position back to 3d)\n            solid = length(unpos) < 6.9; // 3d sphere XXX why do we have to subtract 0.1 here?!\n            //solid = length(unpos.xy) < 15.0 && (sin(unpos.x/2.0)*sin(unpos.y/2.0)) > abs(unpos.z / 4.5); // XXX more complex shape reveal shadow bugs near light XXX\n\n        if(solid)\n        {\n            bvec4 mask1 = lessThanEqual(side_dist0.xyzw, min(min(side_dist0.yzwx, side_dist0.zwxy), side_dist0.wxyz));\n            vec4 side_dist1 = side_dist0 + vec4(mask1) * delta_dist;\n            //ivec4 map_pos1 = map_pos0 + ivec4(vec4(mask1)) * ray_step;\n            float d1 = length(vec4(mask1) * (side_dist1 - delta_dist)); // assume ray_dir normalized\n\n            //if(d.x >= 0.0 && d.x < DIST_MAX) return vec4(-ray_dir_orig, d.x);\n            vec3 e = 0.125 + 0.125 * vec3(map_pos0.x & 1, map_pos0.y & 1, map_pos0.z & 1);\n            vec3 c = vec3(0,0,0.5);\n            vec2 d = boxIntersection(ray_pos_orig - unpos - c, ray_dir_orig, e);\n            //vec2 d = sphIntersect(ray_pos_orig, ray_dir_orig, unpos + c, 0.25); // XXX\n            if(d.x >= 0.0 && d.x < DIST_MAX)\n            {\n                vec3 n = boxNormal(e, ray_pos_orig - unpos - c + ray_dir_orig * d.x);\n                return vec4(n, d.x);\n            }\n\n            if(fract(iTime / 5.0) > 0.5)\n            {\n                //vec3 n = mask1.x ? vec3(-sin((2.0/3.0)*2.0*pi),cos((2.0/3.0)*2.0*pi),0) : mask1.y ? vec3(-sin((1.0/3.0)*2.0*pi),cos((1.0/3.0)*2.0*pi),0) : mask1.z ? vec3(-sin((0.0/3.0)*2.0*pi),cos((0.0/3.0)*2.0*pi),0) : mask1.w ? vec3(0,0,1) : vec3(0);\n                vec3 n = mask1.x ? vec3(+sqrt(3.0)/2.0,-0.5,0) : mask1.y ? vec3(-sqrt(3.0)/2.0,-0.5,0) : mask1.z ? vec3(0,1,0) : mask1.w ? vec3(0,0,1) : vec3(0);\n                float flip = dot(n, ray_dir_orig) < 0.0 ? +1.0 : -1.0; // repair front-back\n\n                return vec4(n*flip,d1);\n            }\n        }\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //if(iMouse.y < iResolution.y / 2.0)\n    //    yaw = 1.0*pi-yaw;\n    //float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    float pitch = -pi/4.0 - 1.5 * pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -25.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    ray_pos.z += 0.5;\n\n    vec3 color = vec3(0);\n    vec4 result = triangle_prism_trace(ray_pos, ray_dir);\n    if(result.w < DIST_MAX)\n    //if(result.w < 12.0 + 5.0 * cos(iTime))\n    {\n        color = vec3(1);\n        if(example())\n        {\n            vec3 dst = ray_pos + ray_dir * result.w;\n            //vec3 light_dir = normalize(vec3(5,2,1));\n            vec3 light_dir = normalize(vec3(cos(iTime*0.1),sin(iTime*0.1),2));\n            float ambient = 0.02;\n            float diffuse = 0.1 + max(0.0, dot(result.xyz, light_dir));\n            float shadow = triangle_prism_trace(dst + result.xyz * 0.001, light_dir).w < DIST_MAX ? 0.0 : 1.0;\n            //float shadow = 1.0;\n            color = 0.5 + 0.5 * result.xyz; // debug normals\n            color *= ambient + diffuse * shadow;\n        }\n        else\n        {\n            float t = iTime * 2.0 * pi / 20.0;\n            vec3 dst = ray_pos + ray_dir * result.w;\n            // multiple close-up point-lights to verify visually that normals are correct\n            vec3 light_pos0 = 8.0*vec3(-cos(t),-sin(t),0.0);\n            vec3 light_pos1 = 8.0*vec3(cos(t),0.0,sin(t));\n            vec3 light_pos2 = 8.0*vec3(0.0,-cos(t),-sin(t));\n            vec3 light_diff0 = light_pos0 - dst;\n            vec3 light_diff1 = light_pos1 - dst;\n            vec3 light_diff2 = light_pos2 - dst;\n            float light_dist0 = length(light_diff0);\n            float light_dist1 = length(light_diff1);\n            float light_dist2 = length(light_diff2);\n            float shadow0 = triangle_prism_trace(dst + result.xyz * 0.001, light_pos0 - dst).w < light_dist0 ? 0.0 : 1.0;\n            float shadow1 = triangle_prism_trace(dst + result.xyz * 0.001, light_pos1 - dst).w < light_dist1 ? 0.0 : 1.0;\n            float shadow2 = triangle_prism_trace(dst + result.xyz * 0.001, light_pos2 - dst).w < light_dist2 ? 0.0 : 1.0;\n            vec3 light_dir0 = light_diff0 / light_dist0;\n            vec3 light_dir1 = light_diff1 / light_dist1;\n            vec3 light_dir2 = light_diff2 / light_dist2;\n            vec3 light_color = vec3(1);\n            float brightness = 0.0;\n            brightness += shadow0 * max(0.0, dot(result.xyz, light_dir0)) / (light_dist0 * light_dist0);\n            brightness += shadow1 * max(0.0, dot(result.xyz, light_dir1)) / (light_dist1 * light_dist1);\n            brightness += shadow2 * max(0.0, dot(result.xyz, light_dir2)) / (light_dist2 * light_dist2);\n            vec3 diffuse = 10.0 * light_color * brightness;\n            float ambient = 0.05;\n            color = (diffuse + ambient) * (0.5 + 0.5 * result.xyz); // visualize normals\n            //color = vec3(fract(result.w));\n\n            //color = 0.5 + 0.5 * result.xyz; // debug normals\n        }\n    }\n    else\n    {\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n    //fragColor = vec4(color, 1.0); // no gamma\n}\n","name":"Image","description":"","type":"image"}]}