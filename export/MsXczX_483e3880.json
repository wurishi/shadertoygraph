{"ver":"0.1","info":{"id":"MsXczX","date":"1489083137","viewed":562,"name":"Simple RadarSweep - Polar Coords","username":"asmith13","description":"Renders a Radar Sweep with the use of polar coordinates\n\nWith some usefull comments","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simple","radar","sweep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: asmith13\n// mainly from https://www.shadertoy.com/view/MsG3WW - mlkn\n// Free to use\n\n// i finally understood polar coordinates..\n// http://mathworld.wolfram.com/PolarCoordinates.html\n\n#define green vec3(0.0,1.0,0.0)\n#define red vec3(1.0,0.0,0.0)\nconst float PI = 3.1415926535897932384626433832795;\nconst float TWOPI = 6.283185307179586476925286766559;\n\nfloat RadarSweep(in float time, in vec2 c, in vec2 center, in float radius, in float speed, in bool dir_cw, in float tailLength){\n    \n    time *= speed; // adjust speed by multiplying the time\n    \n    c -= center; //adjust pixel by asuming we are in the center at 0,0 !polar coordinate system!    \n    if(!dir_cw) c.xy = c.yx; // simple hack i still don't understand it myself\n    \n    // x,y - polar coords see header\n    float x = length(c); // x = length of 0,0 to current pixel\n    // y is the angle of our coord system. i mod it to TWO PI to reduce doubler effects\n    float y = mod(atan(c.y, c.x) + time, TWOPI);// see header or build in function\n\n    y /= tailLength;// 1.0 - angle ... so we divide instead of multiplying\n    \n    float result = 0.0;\n    if(x < radius) result += 1.0 - y;// if pixel is in radius x\n       \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 Resolution = iResolution.xy; //resolution\n    vec2 coords = (2.0 * fragCoord - Resolution) / Resolution.y; // aspectfixed coordinates [-1,1]2d\n    \n    //settings\n    vec2 left = vec2(-1.0, 0.0);\n    vec2 right = vec2(1.0, 0.0);\n    float radius = PI / 4.0;\n    float speed = 1.5;\n    float tailLength = PI / 2.0;\n    bool dir_cw = true;\n    float time = iTime;\n       \n    fragColor += vec4(green * RadarSweep(time, coords, left,  radius, speed,  dir_cw, tailLength), 1.0);\n    fragColor += vec4(red *   RadarSweep(time, coords, right, radius, speed, !dir_cw, tailLength), 1.0);\n}","name":"Image","description":"","type":"image"}]}