{"ver":"0.1","info":{"id":"tsyXW1","date":"1573885542","viewed":234,"name":"Grippy Rubber Texture","username":"blackle","description":"an interesting texture","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["rubber"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n// polynomial smooth min (k = 0.1);\nfloat sminCubic( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nfloat torus(vec3 p, vec2 di) {\n    vec2 crd = vec2(p.x, length(p.yz));\n    return length(crd-vec2(0,di.x))-di.y;\n}\n\nfloat scene(vec3 p) {\n    vec3 p1 = vec3(p.x, fract(p.yz+0.0)-0.5);\n    vec3 p2 = vec3(p.x, fract(p.yz+0.5)-0.5);\n    float ball = torus(p1, vec2(0.25,0.05));\n    float dough = torus(p2, vec2(0.3,0.1));\n    return sminCubic(sminCubic(dough,ball,0.15),-p.x,0.1);\n}\n\n#define AP(f,k) vec3(f(k[0]),f(k[1]),f(k[2]))\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - AP(scene,k));\n}\n\nfloat light(vec3 p, vec3 n, vec3 l) {\n    float comp = dot(n,normalize(l-p));\n    float power = mix(4.,9.,texture(iChannel0, mat2(cos(0.1),-sin(0.1),sin(0.1),cos(0.1))*p.yz*atan(-1.)).x);\n    \n    return pow(abs(comp),power)*sign(comp)*0.9+0.1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(0.9,uv));\n    vec3 init = vec3(-4.+sin(iTime/4.),0,iTime/3.);\n    vec3 p = init;\n    bool hit = false;\n    \n    for (int i = 0; i < 100; i++) {\n        float dist = scene(p);\n        if (abs(dist) < 0.001) { hit = true; break; }\n        if (distance(init, p) > 100.) break;\n        p += cam*dist;\n    }\n    vec3 l1 = init+vec3(2.2,cos(iTime*3.),sin(iTime*2.));\n    vec3 l2 = init+vec3(2.1,cos(iTime*3.),sin(iTime*2.));\n    vec3 l3 = init+vec3(2.0,cos(iTime*3.),sin(iTime*2.));\n    vec3 n = norm(p);\n    fragColor.xyz = hit ? vec3(light(p, n, l1), light(p, n, l2), light(p, n, l3)) : vec3(0.25);\n}","name":"Image","description":"","type":"image"}]}