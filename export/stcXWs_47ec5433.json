{"ver":"0.1","info":{"id":"stcXWs","date":"1640046837","viewed":91,"name":"Pascal's Triangle Base 9","username":"tomviolin","description":"This is a arbitrary precision calculation of Pascal's Triangle. Each row of the triangle is calculated with each column of pixels holding the digits of the value. The bottom half of the display is a scrolling record of the least significant digits.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["triangles","pascal","arbitraryprecision"],"hasliked":0,"parentid":"7tdSWj","parentname":"Pascal's triangle very high prec"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifc=ivec2(fragCoord.xy);\n    ifc/=1;\n    float v=texelFetch(iChannel0, ifc,0).r/base;\n    fragColor.rgb = hsv2rgb(vec3(.9-v*2.,1.0,(v==0.0)?0.0:(1.)));\n    fragColor.a=1.;\n    //fragColor.r = mod(fragColor.r,10.0);\n    //fragColor = vec4(1,0,0,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifc = ivec2(fragCoord.xy);\n    float a=0.0,b=0.0,c=0.0,d=0.0;\n    fragColor=texelFetch(iChannel0,ifc,0);\n    if (iFrame < 1) {\n        if (ifc.y == 0 && ifc.x == 0){\n            fragColor = vec4(1,0,0,1);\n        } else {\n            fragColor = vec4(0,0,0,1);\n        }\n    } else {\n        a = ifc.x==0?0.0:texelFetch(iChannel0,ifc-ivec2(1,0),0).r;\n        b = texelFetch(iChannel0,ifc-ivec2(0,0),0).r;\n        if (ifc.y>0) {\n            c = ifc.x==0?0.0:texelFetch(iChannel0,ifc-ivec2(1,1),0).r;\n            d = texelFetch(iChannel0,ifc-ivec2(0,1),0).r;\n        }\n        fragColor.r = trunc(mod(a+b+(c+d)/float(base),float(base))+0.0);\n    }\n    //fragColor  = vec4(1,0,0,1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float base = 9.;//sqrt(2.0)+.0000000597;//1.415;\n//const float base =exp(1.0);//1.415;\n//const float base = 2.;//sqrt(2.0)+.0000000597;//1.415;\n\nconst int VIZR = 0;\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int d = int(iResolution.y)/2;\n    ivec2 ifc = ivec2(fragCoord.xy);\n    if (ifc.y>d){\n        fragColor = texelFetch(iChannel0, ifc-ivec2(0,d+1),0);\n\n\n    } else if (ifc.y == d) {\n        fragColor = texelFetch(iChannel0, ivec2(ifc.x,VIZR),0)+\n                    0.;//texelFetch(iChannel0, ivec2(ifc.x,VIZR+1),0);\n    } else {\n        fragColor = texelFetch(iChannel1,ifc+ivec2(0,1),0);\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}