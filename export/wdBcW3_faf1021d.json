{"ver":"0.1","info":{"id":"wdBcW3","date":"1691868700","viewed":43,"name":"3D Grid 2","username":"DannnYXZ","description":"x","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["x"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 distort_space(vec3 p){\n    float osc = .5 + .5*sin(iTime);\n    p.x += osc * sin(p.z)*.5;\n    p.y += osc * cos(p.z)*.5;\n    return p;\n}\nfloat map(vec3 p){\n    float period = 1.;\n    p = distort_space(p);\n    p = mod(p + .5*period, vec3(period)) - .5 * period;\n    float cr = .01;\n    float c1 = length(p.xz) - cr;\n    float c2 = length(p.xy) - cr;\n    float c3 = length(p.yz) - cr;\n    float s0 = length(p) - .05;\n    float d = c1;\n    d = min(d, c2);\n    d = min(d, c3);\n    d = min(d, s0);\n    return d;\n}\nfloat march(vec3 o, vec3 d) {\n    float dst = 0.;\n    for(int i = 0; i < 64; i++){\n        vec3 p = o + d * dst*.8;\n        float td = map(p);\n        dst += td;\n        if(td <= 0.000001 ||dst > 1e5) break;\n    }\n    return dst;\n}\nvec3 pallete(float t, float id){\n    vec3 a, b, c, d;\n    if(id == 0.){\n        a = vec3(0.5); b = vec3(.5); c = vec3(1.); d = vec3(0., 0.33, 0.67);\n    }\n    return a + b*cos(6.28318 * (c * t + d));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec3 col = .5+.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 norm_mouse = iMouse.xy/iResolution.xy-.5;\n    vec3 mouse = vec3(norm_mouse, 0.);\n    vec3 ro = vec3(0., 1.4, .3) + iTime*.2;\n    vec3 rd = vec3(uv + norm_mouse*3., -3.);\n    float d = march(ro, normalize(rd))*.1;\n    vec3 col2 = pallete(d*.5, 0.); \n    fragColor = vec4(vec3(d), 1.0);\n    fragColor = vec4(col2, 1.0);\n    fragColor = vec4(col2, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// camera\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst ivec2 POSITION = ivec2(0, 0);\nconst ivec2 QUATERNION = ivec2(0, 1);\n\nfloat key_state(int code){\n\treturn texelFetch(iChannel0, ivec2(code, 1), 0).x;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iuv = ivec2(fragCoord);\n    \n    vec4 pos = texelFetch(iChannel1, POSITION, 0);\n\tvec4 quat = texelFetch(iChannel1, QUATERNION, 0);\n    \n    if(iFrame == 0){\n        quat = vec4(0., 0., 0., 1.);\n    }\n    \n    // calc camera basis\n    //vec3 initial_\n    \n    if(iuv == ivec2(0, 0)) {\n        if(key_state(KEY_UP) == 1.){\n        }\n    }\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}