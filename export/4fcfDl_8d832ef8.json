{"ver":"0.1","info":{"id":"4fcfDl","date":"1733599287","viewed":74,"name":"mandala new 07.12 b","username":"nayk","description":"originals https://www.shadertoy.com/view/mtyGWy https://glslsandbox.com/e#65773.0","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* This animation is the material of my first youtube tutorial about creative \n   coding, which is a video in which I try to introduce programmers to GLSL \n   and to the wonderful world of shaders, while also trying to share my recent \n   passion for this community.\n                                       Video URL: https://youtu.be/f4s1h2YETNY\n*/\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 1.15);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.063,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n#define t iTime\n#define r iResolution.xy\n#define resolution iResolution.xy\n//https://www.shadertoy.com/view/mtyGWy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    vec2 u= fragCoord;\n    vec4 O=fragColor;\n    vec2 R = iResolution.xy,\n         U = 2.* abs( 2.*u - R ) / R.y - vec2(.5,0), // quadrant symmetry\n         I = floor(U),                               // big cells id\n         F = abs(U-I-.5)*2. -.5;                     // quadrants in cells \n         F = ( F + vec2(-F.y,F) )*.7;                // rot 45Â°\n    F.x = abs(F.x);                                  // local mirror symmetry\n    O = vec4( I.y == 1. || I.x == 2.                 // crown only\n                ? smoothstep(0., 12./R.y,            // AA draw\n                             min( abs( abs(length(F-vec2(.3,0))-.15) -.08), // double circle\n                             abs(F.y+.23) )                                 // line\n                            )\n                : 1.\n            );  \n            vec2 p = 2. * (gl_FragCoord.xy-resolution/2.) / resolution.y;\n            p*=mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n             uv*=vec2(fract(log(length(uv.xy))+iTime*.5));\n\tfloat f=0., r2;\n            float time=iTime;\n            const float I2 = 16.;\n\tfor(float i=1.; i<=I2; i++) {\n\t\tif(abs(p.x)+abs(p.y)<1.) {\n\t\t    r2 = cos(time+.3*i)/2.;\n\t\t    if(p.x<2.*r2) {\n\t\t\tp.x -= r2-.5;\n\t\t\tp /= r+.5;\n\t\t    }\n\t\n\t\telse {\n\t\t\tp.x -= r2+.5;\n\t\t\tp /= r2-.5;\n\t\t    }\n\t\t    f = i/I2;\n\t\t}\n\t}\n            \n            vec3 c;\n\tfloat l,z=t;\n\tfor(int i=0;i<3;i++) {\n\t\tvec2 uv,p=fragCoord.xy/r;\n\t\tuv=p;\n        \n\t\tp-=.5;\n\t\tp.x*=r.x/r.y;\n\t\tz+=.07;\n\t\tl=length(p);\n\t\tuv+=p/l*(sin(z)+1.)*abs(sin(l*9.-z-z));\n\t\tc[i]=.01/length(mod(uv,1.)-.5);\n\t}\n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract(uv * 2.5) - 0.5;\n\n        float d = length(uv*F*f+c.xy) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8. + iTime)/8./f;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}