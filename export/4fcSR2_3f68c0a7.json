{"ver":"0.1","info":{"id":"4fcSR2","date":"1714153181","viewed":162,"name":"fpn ray tracing","username":"Dalmador","description":"ray tracer with 3D perlin noise\nstill working on it","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","noise","perlinnoise","colorful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define numOctaves 3.\n#define twoPi 6.28318530718\n\n//https://www.shadertoy.com/view/mtyGWy\nvec3 palette( float t ) {\n    vec3 a = vec3(0.500,0.500,0.500);\n    vec3 b = vec3(0.500,0.500,0.500);\n    vec3 c = vec3(1.000,1.000,1.000);\n    vec3 d = vec3(0.000,0.333,0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// https://www.shadertoy.com/view/ttc3zr\nuvec2 murmurHash23(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uvec2 h = uvec2(1190494759u, 2147483647u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\nvec2 hash23(vec3 src) {\n    uvec2 h = murmurHash23(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\n\nvec3 randomVec3(vec3 p)\n{       \n    vec2 u = hash23(p);  \n    float phi = acos(2. * u.x - 1.) - twoPi * 0.25;\n    float lambda = twoPi * u.y;\n    return vec3(cos(phi) * cos(lambda), cos(phi) * sin(lambda), sin(phi));\n}\n\nfloat interpolate(float a, float b, float f) {\n\n    return (b - a) * ((f * (f * 6.0 - 15.0) + 10.0) * f * f * f) + a;\n}\n\nfloat perlinNoise(vec3 p)\n{\n    float xi = floor(p.x);\n    float yi = floor(p.y);\n    float zi = floor(p.z);\n    float xf = fract(p.x);\n    float yf = fract(p.y);\n    float zf = fract(p.z);\n    \n    float btr = dot(vec3(xf-1.0, yf-1.0, zf-1.0), randomVec3(vec3(xi+1.0, yi+1.0, zi+1.0)));\n    float btl = dot(vec3(xf, yf-1.0, zf-1.)    , randomVec3(vec3(xi, yi+1.0, zi+1.)));\n    float bbr = dot(vec3(xf-1.0, yf, zf-1.)    , randomVec3(vec3(xi+1.0, yi, zi+1.)));\n    float bbl = dot(vec3(xf, yf, zf-1.)        , randomVec3(vec3(xi, yi, zi+1.0)));\n    float ftr = dot(vec3(xf-1.0, yf-1.0, zf), randomVec3(vec3(xi+1.0, yi+1.0, zi)));\n    float ftl = dot(vec3(xf, yf-1.0, zf)    , randomVec3(vec3(xi, yi+1.0, zi)));\n    float fbr = dot(vec3(xf-1.0, yf, zf)    , randomVec3(vec3(xi+1.0, yi, zi)));\n    float fbl = dot(vec3(xf, yf, zf)        , randomVec3(vec3(xi, yi, zi)));\n    \n    return interpolate(interpolate(interpolate(fbl, fbr, xf), interpolate(ftl, ftr, xf), yf), \n                       interpolate(interpolate(bbl, bbr, xf), interpolate(btl, btr, xf), yf), zf);\n}\n\nfloat fractalPerlinNoise(vec3 pos, float octaves)\n{\n    float res = 0.;\n    for (float i = 1.; i <= numOctaves; i++)\n    {\n        float zoom = i * i;\n        float weight = 1. / zoom;;\n        res += weight * perlinNoise(vec3(pos * zoom));\n    }\n    return (res + 1.) / 2.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= pow(1.2, 2.);\n    float z = iTime /2.;\n    vec2 xy = iMouse.xy / 50.;\n    vec3 camPos = vec3(xy, z);\n    vec3 screenCenterPos = vec3(xy, z + 5.);\n    \n    vec3 pixelPos = vec3(screenCenterPos.xy + (uv * 2.), screenCenterPos.z);\n    \n    vec3 dir = normalize(pixelPos - camPos);\n    vec3 currentPos = camPos;\n    float threshold = 0.66;\n    float maxIterations = 80.;\n    fragColor = vec4(0.05, 0.05, 0.2, 0. );\n    \n    for (float i = 0.; i < maxIterations; i++)\n    {\n        float fpn = fractalPerlinNoise(currentPos, numOctaves);\n        float minDist = threshold - fpn;\n        if (fpn > threshold - 0.01)\n        {\n            float distToCam = length(currentPos - camPos); \n            // main color\n            vec3 col = palette(fractalPerlinNoise(currentPos / 7., 1.) * 4.);\n            // shading\n            col *= 5. / (distToCam + 5.);\n            fragColor = vec4(col, 0.);\n            break;\n        }\n        currentPos += dir * minDist * 1.1;\n    }\n}\n","name":"Image","description":"","type":"image"}]}