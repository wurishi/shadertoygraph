{"ver":"0.1","info":{"id":"Xd3yzs","date":"1519867266","viewed":563,"name":"Pixel Cascade Transition","username":"toji","description":"A simple transition that moves between images in a cascade of pixel-like blocks.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 kWhite = vec3(1.0, 1.0, 1.0);\n\n// Pixel Size.\nconst float kPixelSize = 8.0;\n\n// How wide the pixelized \"wave\" is.\nconst float kTransitionSpread = 0.15;\n\n// How fast the wave moves.\nconst float kTransitionSpeed = 0.5;\n\nconst float kTransitionIntensity = 16.0;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Figure out which pixelated \"cell\" each fragment belongs to.\n    vec2 noise_cell = floor(fragCoord / kPixelSize);\n    vec2 noise_uv = noise_cell / (iChannelResolution[0].xy);\n\n    float noise = texture(iChannel0, noise_uv).x * kTransitionSpread;\n    float progress = (iTime * kTransitionSpeed) + noise_uv.y + noise;\n    float peak = cos(progress) * kTransitionIntensity;\n    \n    // How much of the first image vs the second should this fragment show.\n    float transition = clamp(peak, 0.0, 1.0);\n    \n    // Final transition mix\n    vec3 img1 = texture(iChannel1, uv).xyz;\n    vec3 img2 = texture(iChannel2, uv).xyz;\n    vec3 col = mix(img1, img2, transition);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}