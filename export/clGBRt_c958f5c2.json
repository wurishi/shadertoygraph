{"ver":"0.1","info":{"id":"clGBRt","date":"1705258691","viewed":558,"name":"SID Player","username":"Espeset","description":"This is still very experimental, I hope it works for you. Sorry for the long compile times, or any crashes. :)\n\nFor more classic SID songs, here are some you can paste into the shader:\n\nwww.espeset.no/shadersid.zip\n\nTip: press Reset Time after compiling","likes":8,"published":1,"flags":40,"usePreview":1,"tags":["music","audio","c64","commodore","sid","musicplayer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//We render the C64 screen in a separate buffer so we get a nice blur effect on everything as we scale up interpolated here\n//TODO: This messes with the Shadertoy thumbnails as we expect the buffer to be a minimal size, oops \n\nconst vec2 RES=vec2(320.0, 200.0);\nconst vec2 RES_OVERSCAN = vec2(403.0, 284.0);\nconst float PI=3.14159265358979;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    //Flip Y\n    fragCoord.y=iResolution.y-fragCoord.y;\n\n    //Normalized buffer UVs\n    vec2 uvNormalizedEdge = RES_OVERSCAN / iResolution.xy;\n    vec2 uvNormalized = fragCoord.xy / iResolution.xy;\n    \n    //CRT bulge\n    float scaleX=1.0-sin(uvNormalized.y*PI)*0.02;\n    uvNormalized.x=(uvNormalized.x-0.5)*scaleX+0.5;\n    float scaleY=1.0-sin(uvNormalized.x*PI)*0.07;\n    uvNormalized.y=(uvNormalized.y-0.5)*scaleY+0.5;\n\n    //Correct for aspect ratio\n    float arScreen=iResolution.x/iResolution.y;\n    float arBuffer=RES.x/RES.y;\n    float arScale=arScreen/arBuffer;\n    vec2 uv=vec2(uvNormalized.x*arScale,uvNormalized.y)*uvNormalizedEdge;\n    vec2 uvEdge=vec2(uvNormalizedEdge.x*arScale,uvNormalizedEdge.y);\n    \n    //Center with black bars on the left and right as necessary\n    uv.x-=(uvEdge.x-uvNormalizedEdge.x)/2.0;\n    \n    float crtPixelation=(sin(fragCoord.y*7.8)+1.0)/16.0;\n    float vignette = 0.25 * (sin(uvNormalized.x * PI) + sin(uvNormalized.y * PI) + 2.0);\n    \n    fragColor = texture(iChannel0, uv)*(crtPixelation+1.);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n\nSID emulation shader v0.15\n Created by Tonny Espeset\n\nFeel free to use this shader in your own project as long as you give me a \"greetings\" :)\n\nFeatures:\n\n    * Emulates the C64 SID chip fairly accurately and plays back audio from SID dumps\n    * SID dumps can be stored as RLE compressed vec4 to minimize register usage, allowing fairly long songs\n    * Prebaked or realtime ADSR calculation (realtime = experimental due to stateless audio shader killing the GPU when iterate to accumulate the states)\n    * Support for multiple data formats, including decimated dumps for smaller data size (but less accurate playback)\n    * Interpolation of samples\n\nTools:\n\n    * I made accompanying tools for dumping and converting SID files, available upon request\n\nTODO:\n\n    * Modulation, filtering and a few other SID emulation aspects is WIP, will affect accuracy on complex songs\n    * This was all made from scratch with just basic prior knowledge of the SID chip. Needs further research and polishing\n    * Testing - Only tested on a couple of systems\n      Pushes GLSL audio rendering to the limit, mainly due to the large amounts of embedded data, and the stateless\n      design of the Shadertoy audio renderer, forcing each SID-sample to be reconstructed from the beginning of the RLE-compressed\n      data-sequence. Expect instability and slow compile times on older systems.\n\nNotes:\n\n    * Accurate SID emulation really needs states:\n        - ADSR (Attack, decay, sustain, release) depends on accumulated values, so does filtering. I solved this by\n          baking amplitudes into the dumped SID data, but it is not ideal as it steals precious limited storage space.\n          Alternatively we can brute force accumulation for each sample, the code is provided for this (commented out below) if you have a powerful GPU.\n        - Waveforms on the real SID will not change the shape when changing the frequency as it remembers the current \n          phase point while a stateless engine will need to reshape it, ruining some of those high frequency effects in some\n          songs. I managed to mask this limitation somewhat by using interpolation.\n\nSources:\n    * This implementation is based on these SID chip technical specifications:\n        https://www.waitingforfriday.com/?p=661\n\n*/\n\nint getSampleRaw(int bank,int index) {\n    if (USE_VEC4)\n    {\n        //Vec4 allows more data per register\n        int block = (index / 16) + samples_pointers[bank];\n        ivec4 value = samples_vec4[block];\n        int blockPosition = index % 16;\n\n        // Determine which component of the ivec4 to access\n        int component = blockPosition / 4;\n        int shiftAmount = (3 - (blockPosition % 4))*8;\n\n        // Extract the byte from the correct component\n        if (component == 0) \n            return (value.x >> shiftAmount) & 0xFF;\n        if (component == 1) \n            return (value.y >> shiftAmount) & 0xFF;\n        if (component == 2) \n            return (value.z >> shiftAmount) & 0xFF;\n        return (value.w >> shiftAmount) & 0xFF;\n    }else\n    {\n        int block = (index / 4) + samples_pointers[bank];\n        int value = samples[block];\n        int position = index % 4;\n        int shiftAmount = (3 - position) * 8;\n        int byteValue = (value >> shiftAmount) & 0xFF;\n        return byteValue;\n    }\n}\n\n//RLE format: Negative opcode n means repeat the next byte -n+1 times, positive opcode means copy the n+1 next bytes \nint getSampleRLE(int bank,int decompressedIndex) {\n    int compressedIndex = 0;\n    int currentDecompressedIndex = 0;\n\n    while (true) {\n        int countByte = getSampleRaw(bank,compressedIndex);\n        compressedIndex++;\n\n        if (countByte < 0x80) {\n            // Non-repeating bytes\n            if (currentDecompressedIndex + countByte >= decompressedIndex) {\n                return getSampleRaw(bank,compressedIndex + decompressedIndex - currentDecompressedIndex);\n            }\n            currentDecompressedIndex += countByte + 1;\n            compressedIndex += countByte + 1;\n        } else {\n            // Repeating getSampleRaw\n            int value = getSampleRaw(bank,compressedIndex);\n            int repeatCount = (0x100 - countByte)+1;\n            if (currentDecompressedIndex + repeatCount > decompressedIndex) {\n                return value;\n            }\n            currentDecompressedIndex += repeatCount;\n            compressedIndex++;\n        }\n    }\n}\n\nint getSample(int bank,int index) {\n\n    if(COMPRESSED)\n        return getSampleRLE(bank,index);\n    return getSampleRaw(bank,index);\n}\n\nstruct SIDState {\n\n    // Voice 1\n    float frequencyChannel1;       //0 54272 (low byte), 54273 (high byte). 65536 frequencies\n    int pulseWidthChannel1;        //2 54274 (low byte), 54275 (high byte / control bits): 54274 - Lower 8 bits of Pulse Width. 54275 - Upper 4 bits of Pulse Width (Bits 0-3), Test mode (Bit 4), Ring Modulation with next channel (Bit 5), Synchronization with next channel (Bit 6), Gate bit for envelope generator (Bit 7).\n    int controlRegisterChannel1;   //4 54276 CONTROL REGISTER: Bit 0 - GATE, Bit 1 - SYNC, Bit 2 - RING MOD, Bit 3 - TEST, Bit 4 - Triangle waveform, Bit 5 - Sawtooth waveform, Bit 6 - Pulse waveform, Bit 7 - Noise waveform\n    int attackDecayChannel1;       //5 54277 ATTACK/DECAY: Bits 4-7 - ATTACK rate (ATK0-ATK3), Bits 0-3 - DECAY rate (DCY0-DCY3)\n    int sustainReleaseChannel1;    //6 54278 SUSTAIN/RELEASE: Bits 4-7 - SUSTAIN level (STN0-STN3), Bits 0-3 - RELEASE rate (RLS0-RLS3)\n\n    // Voice 2\n    float frequencyChannel2;       //7 54279 / 54280\n    int pulseWidthChannel2;        //9 54281 / 54282\n    int controlRegisterChannel2;   //11 54283\n    int attackDecayChannel2;       //12 54284\n    int sustainReleaseChannel2;    //13 54285\n\n    // Voice 3\n    float frequencyChannel3;       //14 54286 / 54287\n    int pulseWidthChannel3;        //16 54288 / 54289\n    int controlRegisterChannel3;   //18 54290\n    int attackDecayChannel3;       //19 54291\n    int sustainReleaseChannel3;    //20 54292\n\n    // Filter and Volume\n    int filterFrequency;           //21 54293 FILTER FREQUENCY: The value is a 11-bit number combined from 54293 (low byte) and the lower 3 bits of 54294 (high byte). Lower values correspond to lower cutoff frequencies.\n    int resonanceFilterSelect;     //23 54295 RESONANCE/FILTER SELECT: Bits 4-7 (RES0-RES3): Set the resonance level of the filter. Bits 0-2: Select which of the three voice channels are routed through the filter (one bit per channel).\n    int modeVolume;                //24 54296 MODE/VOLUME:Bits 0-3: Set the master volume (VOL0-VOL3). Bits 4-6: Select the type of the filter (Low-pass, Band-pass, High-pass). Bit 7: Mute the voice 3 output.\n    \n    //Extras\n    float amp1,amp2,amp3;\n};\n\n\nvoid setSidState(int index, out SIDState currentState) {\n\n    // Channel 1\n    currentState.frequencyChannel1 = float( (getSample(1,index) << 8) | getSample(0,index));\n    currentState.pulseWidthChannel1 = (getSample(3,index) << 8) | getSample(2,index);\n    currentState.controlRegisterChannel1 = getSample(4,index);\n    if (!BAKED_AMPS) currentState.attackDecayChannel1 = getSample(5,index);\n    if (!BAKED_AMPS) currentState.sustainReleaseChannel1 = getSample(6,index);\n\n    // Channel 2\n    currentState.frequencyChannel2 = float((getSample(8,index) << 8) | getSample(7,index));\n    currentState.pulseWidthChannel2 = (getSample(10,index) << 8) | getSample(9,index);\n    currentState.controlRegisterChannel2 = getSample(11,index);\n    if (!BAKED_AMPS) currentState.attackDecayChannel2 = getSample(12,index);\n    if (!BAKED_AMPS) currentState.sustainReleaseChannel2 = getSample(13,index);\n\n    // Channel 3\n    currentState.frequencyChannel3 = float((getSample(15,index) << 8) | getSample(14,index));\n    currentState.pulseWidthChannel3 = (getSample(17,index) << 8) | getSample(16,index);\n    currentState.controlRegisterChannel3 = getSample(18,index);\n    if (!BAKED_AMPS) currentState.attackDecayChannel3 = getSample(19,index);\n    if (!BAKED_AMPS) currentState.sustainReleaseChannel3 = getSample(20,index);\n\n    // Global Controls\n    currentState.filterFrequency = (getSample(21,index) << 8) | getSample(22,index);\n    currentState.resonanceFilterSelect = getSample(23,index);\n    currentState.modeVolume = getSample(24,index);\n    \n}\n\n// Define constants for waveform types based on their bit positions\nconst int TRIANGLE = 1 << 4;     // Triangle Wave (Bit 4)\nconst int SAWTOOTH = 1 << 5;     // Sawtooth Wave (Bit 5)\nconst int SQUARE_WAVE = 1 << 6;  // Square Wave (Bit 6)\nconst int NOISE = 1 << 7;        // Noise (Bit 7)\n\nint determineWaveform(int controlRegister) {\n    if ((controlRegister & NOISE) != 0)       return NOISE;\n    if ((controlRegister & SQUARE_WAVE) != 0) return SQUARE_WAVE;\n    if ((controlRegister & SAWTOOTH) != 0)    return SAWTOOTH;\n    if ((controlRegister & TRIANGLE) != 0)    return TRIANGLE;\n\n    return 0; // Silence, when none of the bits are set\n}\n\n// Use a clock freqency of 985248Hz for PAL C64, 1022730Hz for NTSC C64.\nconst float Fclk = 985248.0; // Clock frequency in Hz (1.0 MHz)\nfloat getNoiseSamplesPerSecond(float frequency) {\n    if (frequency == 0.0)\n        return 0.0;\n    // Calculate the internal frequency (scaling based on the SID's clock frequency)\n    float internalFreq = float(frequency) * (Fclk / float(0x10000));\n    // Calculate and return the number of noise samples per second\n    // The noise generator updates when the 23-bit right-shifted counter changes\n    return Fclk / (pow(2.0, 23.0) / internalFreq);\n}\n\nfloat rand(int seed) {\n    int n = (seed << 13) ^ seed;\n    int nn = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;\n    float res = float(nn) / float(0x7fffffff);\n    return res * 2.0 - 1.0;\n}\n\n//Assuming there is no combining of various waveform types, although in real there might be some undocumented behaviour that some SID songs take advantage of \nfloat sidWaveform(int frame,float time, float frequency, int pulseWidthChannel, int waveform) {\n    // Calculate the actual frequency (Fout) using the frequency number (Fn)\n    float Fout = float(frequency) * (Fclk / 16777216.0); // Convert Fn to Fout\n\n    // Calculate the phase based on time in seconds\n    // Phase increment per second is Fout, so phase increment per sample is Fout * time\n    float phase = mod(time * Fout, 1.0); // Normalized phase [0, 1)\n\n    // Generate the waveform based on the phase\n    if (waveform == SAWTOOTH) {\n        return phase * 2.0 - 1.0;\n    }    \n    if (waveform == TRIANGLE) {\n        return abs(phase * 2.0 - 1.0) * 2.0 - 1.0;\n    }\n    else if (waveform == SQUARE_WAVE) {\n        int pulseWidth=pulseWidthChannel&0xfff;\n        float pulseWidthNormalized = float(pulseWidth) / 4095.0;\n        pulseWidthNormalized=0.5;\n        return phase < pulseWidthNormalized ? 1.0 : -1.0;\n    }\n    else if (waveform == NOISE) {\n        float samplesPerSecond=getNoiseSamplesPerSecond(frequency);\n        return rand(int(time*samplesPerSecond));\n    }\n    else {\n        return 0.0;\n    }\n}\n\nfloat sidGenerate(int frame,float time, SIDState state) {\n    // Determine the waveform for each channel from the control register\n    int waveformChannel1 = determineWaveform(state.controlRegisterChannel1);\n    int waveformChannel2 = determineWaveform(state.controlRegisterChannel2);\n    int waveformChannel3 = determineWaveform(state.controlRegisterChannel3);\n\n    // Generate waveform for each channel\n    float voice1 = sidWaveform(frame,time, state.frequencyChannel1, state.pulseWidthChannel1, waveformChannel1)*state.amp1;\n    float voice2 = sidWaveform(frame,time, state.frequencyChannel2, state.pulseWidthChannel2, waveformChannel2)*state.amp2;\n    float voice3 = sidWaveform(frame,time, state.frequencyChannel3, state.pulseWidthChannel3, waveformChannel3)*state.amp3;\n\n    // Mix the voices together\n    return (voice1 + voice2 + voice3) / 3.0;\n}\n\nvoid getBakedAmps(int index, out SIDState state)\n{\n    state.amp1=float(getSample(25,index))/255.0;\n    state.amp2=float(getSample(26,index))/255.0;\n    state.amp3 = float(getSample(27, index)) / 255.0;\n}\n\n/*\n\n//Experimental amplitude calculation is commented out. \n//It is working however, rebuilding the amplitude state in a stateless shader is very heavy for GLSL as it has\n//to iterate through large amounts of compressed data to do so. Causes instability. \n//Instead the converter tool can store precalculated amps, which is faster but will waste limited register storage and increase compile times.\n//Ideally we would want to decode the audio into a texture buffer, but Shadertoy does not allow this for audio shaders atm\n\nconst float ATTACK_RATES[] = float[](\n    0.0022528606f, 0.0080099577f, 0.0157696042f, 0.0237795619f,\n    0.0372963655f, 0.0550684591f, 0.0668330845f, 0.0783473987f,\n    0.0981219818f, 0.244554021f,  0.489108042f,  0.782472742f,\n    0.977715461f,  2.93364701f,   4.88907793f,   7.82272493f\n);\nconst float DECAY_RELEASE_RATES[] = float[](\n    0.00891777693f, 0.024594051f, 0.0484185907f, 0.0730116639f,\n    0.114512475f,   0.169078356f, 0.205199432f,  0.240551975f,\n    0.301266125f,   0.750858245f, 1.50171551f,   2.40243682f,\n    3.00189298f,    9.00721405f,  15.010998f,    24.0182111f\n);\n\nconst float DELTA_TIME=1.0/SAMPLE_RATE;\nconst int MODE_SILENCE=0;\nconst int MODE_ATTACK=1;\nconst int MODE_DECAY=2;\nconst int MODE_SUSTAIN=3;\nconst int MODE_RELEASE=4;\n\n//Calculates the amp for the given voice, returns vec2.x-amp at index, vec2.y=amp at index+1 (for interpolation)\nvec2 calculateAmp(int index,int controlRegisterBank,int attackDecayBank,int sustainReleaseBank)\n{\n    //Due to the stateless nature of shaders, we have to accumulate the amp all the way from the start\n    bool oldGateState = false;\n    int mode = MODE_SILENCE;\n    float currentAmp=0.0, oldAmp=0.0, attackDelta = 0.0, decayDelta = 0.0, releaseDelta = 0.0, sustainLevel = 0.0;\n\n    //We go back max 24 seconds, which should be enough to accurately accumulate the amplitude at the current time\n    int startIndex=max(0,index-int(SAMPLE_RATE*24.0));\n\n    for (int i=startIndex;i<index+1;i++)\n    {\n        oldAmp=currentAmp;\n        bool newGateState = (getSample(controlRegisterBank,i)&0x1)==1;\n        if (newGateState != oldGateState) {\n        \n            int attackDecayChannel=getSample(attackDecayBank,i);\n            int sustainReleaseChannel=getSample(sustainReleaseBank,i);\n            \n            float attackRate=ATTACK_RATES[(attackDecayChannel>>4)&0x0f]; if (attackRate==0.0) attackDelta=1.0; else attackDelta=DELTA_TIME/attackRate;\n            float decayRate = DECAY_RELEASE_RATES[attackDecayChannel&0x0f]; if (decayRate==0.0) decayDelta=1.0; else decayDelta=DELTA_TIME/decayRate;\n            float releaseRate = DECAY_RELEASE_RATES[sustainReleaseChannel&0x0f]; if (releaseRate==0.0) releaseDelta=1.0; else releaseDelta=DELTA_TIME/releaseRate;\n            sustainLevel = float((sustainReleaseChannel>>4)&0x0f)/15.0; if (decayRate==0.0) decayDelta=1.0; else decayDelta=DELTA_TIME/decayRate;\n            if (newGateState) {\n                mode = MODE_ATTACK;\n            } else {\n                mode = MODE_RELEASE;\n            }\n            oldGateState = newGateState;\n        }\n\n        // Calculate the amplitude based on the current mode\n        switch (mode) {\n            case MODE_ATTACK:\n                currentAmp += attackDelta;\n                if (currentAmp >= 1.0f) {\n                    currentAmp = 1.0f;\n                    mode = MODE_DECAY;\n                }\n                break;\n            case MODE_DECAY:\n                currentAmp -= decayDelta;\n                if (currentAmp <= sustainLevel) {\n                    currentAmp = sustainLevel;\n                    mode = MODE_SUSTAIN;\n                }\n                break;\n            case MODE_SUSTAIN:\n                // Amplitude remains constant at the sustain level\n                currentAmp = sustainLevel;\n                break;\n            case MODE_RELEASE:\n                currentAmp -= releaseDelta;\n                if (currentAmp <= 0.0f) {\n                    currentAmp = 0.0f;\n                    mode = MODE_SILENCE;\n                }\n                break;\n        }\n\n    }\n\n    return vec2(oldAmp, currentAmp);\n}\n*/\n\n// Main sound generation function\nvec2 mainSound(int frame, float time) {\n\n    time=mod(time,PLAY_TIME);\n    frame=frame % 1000;\n\n    float sampleTime=SAMPLE_RATE*time;\n    int sampleIndex = int(sampleTime);\n    float s=sampleTime-float(sampleIndex);\n\n    SIDState sidState; setSidState(sampleIndex,sidState);\n    SIDState sidStateNext; setSidState(sampleIndex+1,sidStateNext);\n    \n    if (BAKED_AMPS)\n    {\n        getBakedAmps(sampleIndex,sidState);\n        getBakedAmps(sampleIndex+1,sidStateNext);\n    }\n    /*else\n    {\n        //Commented out real time amp calculation, working but extremely demanding on the GPU, see above for details\n        float masterVolume=float(sidState.modeVolume&0xf)/15.0;\n        float masterVolumeNext=float(sidStateNext.modeVolume&0xf)/15.0;\n\n        vec2 a1=calculateAmp(sampleIndex,4,5,6);\n        vec2 a2=calculateAmp(sampleIndex,11,12,13);\n        vec2 a3=calculateAmp(sampleIndex,18,19,20);\n\n        sidState.amp1=a1.x;\n        sidState.amp2=a2.x;\n        sidState.amp3=a3.x;\n        sidStateNext.amp1=a1.y;\n        sidStateNext.amp2=a2.y;\n        sidStateNext.amp3=a3.y;\n\n        // Mute amp3 if bit 7 is set\n        if ((sidState.modeVolume & (1 << 7)) != 0) \n            sidState.amp3 = 0.0;\n        if ((sidStateNext.modeVolume & (1 << 7)) != 0) \n            sidStateNext.amp3 = 0.0;\n    }*/\n\n    // Generate mono SID sound, interpolate samples for better quality\n    float monoSound0 = sidGenerate(frame,time, sidState);\n    float monoSound1 = sidGenerate(frame,time, sidStateNext);\n    float monoSound = mix(monoSound0,monoSound1,s)*0.3; //Scaled for lower volume\n    \n    return vec2(monoSound, monoSound);\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"//**********************************************************************************\n// QUICKSTART is defined to avoid a long compile time when loading the shader\n// A short test song will play when QUICKSTART is enabled\n\n// Please disable QUICKSTART and Compile / Reset Time to play music. You can also download\n// the classic SID music pack from www.espeset.no/shadersid.zip and paste songs in this tab\n\n// In the music pack there are clips that are shorter and more GPU friendly, but the\n// embedded Warhawk song is one of my personal favorites, ant it is almost 1 minute long :)\n\n// Expect a magnitude of ~40 seconds to compile it, and some older GPUs might struggle\n\n// Note, you probably need to press Reset Time after compiling, to start the new song\n\n#define QUICKSTART\n\n//**********************************************************************************\n\n\n#ifdef QUICKSTART\n// Just a super short tune to not disappoint people who cannot hear the full song due to GPU issues\nconst bool BAKED_AMPS=true; const bool USE_VEC4=true; const bool COMPRESSED=true; const float DECIMATION=2.0; const float SAMPLE_RATE=42.903/DECIMATION; const float PLAY_TIME=7.5; \nconst int samples_pointers[] = int[](0, 1, 2, 3, 4, -1, -1, 5, 18, 25, 37, 50, -1, -1, 58, 71, 78, 90, 103, -1, -1, 111, 112, 113, 114, 115, 116, 126 ); const int samples[] = int[](0);\nconst ivec4 samples_vec4[] = ivec4[](ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0xFA00FE9E,0xFFDE039E,0x1E9EDE03,0xDE5E1E46),ivec4(0xFF46FF86,0x0446C646,0x869EFF9E,0xFFDEFD9E),ivec4(0xFEDCFF1C,0x01DC9EFF,0x9EFFDE01,0x9EEEFFEE),ivec4(0xFF2E01EE,0x9EFF9EFF,0xDE039E1E,0x9EDE03DE),ivec4(0x5E1EE2FF,0xE2FF2204,0xE262E222,0x9EFF9EFF),ivec4(0xDEFD9EFE,0x14FF5401,0x14E2FFE2,0xFF2201E2),ivec4(0x46FF46FF,0x8601469E,0xFF9EFFDE,0x019EE2FF),ivec4(0xE2FF2201,0xE23CFF3C,0xFF7C013C,0x9EFF9EFE),ivec4(0xEEFF2EFD,0xEEFE71FF,0xB10171A2,0xFFA2FFE2),ivec4(0x01A29EFF,0x9EFFDE03,0x9E1E9EDE,0x06DE5E1E),ivec4(0x9E1EDE5E,0x045E9E1E,0x9E5E065E,0xDE1E9E1E),ivec4(0x5EDE04DE,0x9E1E9EDE,0x06DE5E1E,0x9E1EDE5E),ivec4(0x015E9E00,0x00000000,0x00000000,0x00000000), ivec4(0xFA00F518,0xFB1D011C,0x1D011D18,0xF918FE20),ivec4(0xFF210120,0x18FC18FE,0x15FF1601,0x1518F618),ivec4(0xFE24FF25,0xFE240125,0x18F918FB,0x27FE24FF),ivec4(0x2501241D,0xFC1DFB18,0xFE24FF25,0x012431FC),ivec4(0x31FE18FE,0x15FF16FD,0x15FB12FB,0x1BF41801),ivec4(0x1918FE18,0x011918FE,0x18011918,0xF5180119),ivec4(0x18FE1800,0x00000000,0x00000000,0x00000000), ivec4(0xFA007E7F,0xFEFCFA79,0x7775F4F2,0xF0D0B07F),ivec4(0xFEFCFA79,0x7775F473,0x7FFEFCFA,0x79F87FFE),ivec4(0x7D7FFEFC,0xFA79F87F,0xFEFCFA79,0xF87FFEFC),ivec4(0xFA79F87F,0xFEFCFA79,0x7775F4F2,0xF0D0B07F),ivec4(0xFEFCFA79,0x7775F473,0x7FFEFCFA,0x79F87FFE),ivec4(0x7D7FFEFC,0xFA79F87F,0xFEFCFA79,0xF87FFEFC),ivec4(0xFA79F87F,0xFEFCFA79,0xF87FFEFC,0xFA79F87F),ivec4(0xFEFCFA79,0xF87FFE7D,0x7FFEFCFA,0x79F87FFE),ivec4(0x7D7F34FE,0xFCFA79F8,0x7FFEFCFA,0x79F87FFE),ivec4(0xFCFA7977,0x75F4F2F0,0xD0905030,0xF0B09050),ivec4(0x10F0B070,0x5010D0B0,0x703010D0,0x907030F0),ivec4(0xD0905030,0xF0B09050,0x00000000,0x00000000), ivec4(0xFA00FF82,0x04838485,0x86870287,0x8889FF89),ivec4(0xFF820483,0x84858687,0x02878882,0x03828384),ivec4(0x85018582,0x02828382,0x03828384,0x85018582),ivec4(0x03828384,0x85018582,0x03828384,0x85018582),ivec4(0x05828384,0x85868702,0x878889FF,0x89FF8204),ivec4(0x83848586,0x87028788,0x82038283,0x84850185),ivec4(0x82028283,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82028283,0x82038283,0x84850185),ivec4(0x82028283,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82058283,0x84858687,0x02878889),ivec4(0xFD89FC88,0xFC87FC86,0xFD85FC84,0xFD830000), ivec4(0xFB000109,0x41F84102,0x400941FB,0x41024009),ivec4(0x41FE4105,0x40094140,0x0941FE41,0x02400941),ivec4(0xFE410240,0x0941FE41,0x02400941,0xF8410240),ivec4(0x0941FB41,0x02400941,0xFE410540,0x09414009),ivec4(0x41FE4102,0x400941FE,0x41024009,0x41FE4102),ivec4(0x400941FE,0x41024009,0x41FE4102,0x400941FE),ivec4(0x41054009,0x41400941,0xFE410540,0x09414009),ivec4(0x41FE4102,0x400941FE,0x41024009,0x41D84100), ivec4(0xFD00FE9E,0xFFDE039E,0x1E9EDE03,0xDE5E1E46),ivec4(0xFF46FF86,0x0446C646,0x869EFF9E,0xFFDEFD9E),ivec4(0xFEDCFF1C,0x01DC9EFF,0x9EFFDE01,0x9EEEFFEE),ivec4(0xFF2E01EE,0x9EFF9EFF,0xDE039E1E,0x9EDE03DE),ivec4(0x5E1EE2FF,0xE2FF2204,0xE262E222,0x9EFF9EFF),ivec4(0xDEFD9EFE,0x14FF5401,0x14E2FFE2,0xFF2201E2),ivec4(0x46FF46FF,0x8601469E,0xFF9EFFDE,0x019EE2FF),ivec4(0xE2FF2201,0xE23CFF3C,0xFF7C013C,0x9EFF9EFE),ivec4(0xEEFF2EFD,0xEEFE71FF,0xB10171A2,0xFFA2FFE2),ivec4(0x01A29EFF,0x9EFFDE03,0x9E1E9EDE,0x06DE5E1E),ivec4(0x9E1EDE5E,0x045E9E1E,0x9E5E065E,0xDE1E9E1E),ivec4(0x5EDE04DE,0x9E1E9EDE,0x06DE5E1E,0x9E1EDE5E),ivec4(0x045E9E1E,0x9E5E0000,0x00000000,0x00000000), ivec4(0xFD00F518,0xFB1D011C,0x1D011D18,0xF918FE20),ivec4(0xFF210120,0x18FC18FE,0x15FF1601,0x1518F618),ivec4(0xFE24FF25,0xFE240125,0x18F918FB,0x27FE24FF),ivec4(0x2501241D,0xFC1DFB18,0xFE24FF25,0x012431FC),ivec4(0x31FE18FE,0x15FF16FD,0x15FB12FB,0x1BF41801),ivec4(0x1918FE18,0x011918FE,0x18011918,0xF5180119),ivec4(0x18FE1801,0x19180018,0x00000000,0x00000000), ivec4(0xFD007E7F,0xFEFCFA79,0x7775F4F2,0xF0D0B07F),ivec4(0xFEFCFA79,0x7775F473,0x7FFEFCFA,0x79F87FFE),ivec4(0x7D7FFEFC,0xFA79F87F,0xFEFCFA79,0xF87FFEFC),ivec4(0xFA79F87F,0xFEFCFA79,0x7775F4F2,0xF0D0B07F),ivec4(0xFEFCFA79,0x7775F473,0x7FFEFCFA,0x79F87FFE),ivec4(0x7D7FFEFC,0xFA79F87F,0xFEFCFA79,0xF87FFEFC),ivec4(0xFA79F87F,0xFEFCFA79,0xF87FFEFC,0xFA79F87F),ivec4(0xFEFCFA79,0xF87FFE7D,0x7FFEFCFA,0x79F87FFE),ivec4(0x7D7F37FE,0xFCFA79F8,0x7FFEFCFA,0x79F87FFE),ivec4(0xFCFA7977,0x75F4F2F0,0xD0905030,0xF0B09050),ivec4(0x10F0B070,0x5010D0B0,0x703010D0,0x907030F0),ivec4(0xD0905030,0xF0B09050,0x10F0B000,0x00000000), ivec4(0xFD00FF82,0x04838485,0x86870287,0x8889FF89),ivec4(0xFF820483,0x84858687,0x02878882,0x03828384),ivec4(0x85018582,0x02828382,0x03828384,0x85018582),ivec4(0x03828384,0x85018582,0x03828384,0x85018582),ivec4(0x05828384,0x85868702,0x878889FF,0x89FF8204),ivec4(0x83848586,0x87028788,0x82038283,0x84850185),ivec4(0x82028283,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82028283,0x82038283,0x84850185),ivec4(0x82028283,0x82038283,0x84850185,0x82038283),ivec4(0x84850185,0x82058283,0x84858687,0x02878889),ivec4(0xFD89FC88,0xFC87FC86,0xFD85FC84,0xFC83FF82), ivec4(0xFE000109,0x41F84102,0x400941FB,0x41024009),ivec4(0x41FE4105,0x40094140,0x0941FE41,0x02400941),ivec4(0xFE410240,0x0941FE41,0x02400941,0xF8410240),ivec4(0x0941FB41,0x02400941,0xFE410540,0x09414009),ivec4(0x41FE4102,0x400941FE,0x41024009,0x41FE4102),ivec4(0x400941FE,0x41024009,0x41FE4102,0x400941FE),ivec4(0x41054009,0x41400941,0xFE410540,0x09414009),ivec4(0x41FE4102,0x400941FE,0x41024009,0x41D54100), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0x810FC60F,0x00000000,0x00000000,0x00000000), ivec4(0x8100C600,0x00000000,0x00000000,0x00000000), ivec4(0xFB0003F0,0xC08060FA,0x600400F0,0xC08060FD),ivec4(0x600400F0,0xC0806008,0x6000F0C0,0x00F0C080),ivec4(0x60056000,0xF0C08060,0x056000F0,0xC0806005),ivec4(0x6000F0C0,0x8060FA60,0x0400F0C0,0x8060FD60),ivec4(0x0400F0C0,0x80600860,0x00F0C000,0xF0C08060),ivec4(0x056000F0,0xC0806005,0x6000F0C0,0x80600560),ivec4(0x00F0C080,0x60056000,0xF0C08060,0x056000F0),ivec4(0xC0806008,0x6000F0C0,0x00F0C080,0x60086000),ivec4(0xF0C000F0,0xC0806005,0x6000F0C0,0x80600560),ivec4(0x00F0C080,0x60DA6000,0x00000000,0x00000000), ivec4(0xFE0003F0,0xC08060FA,0x600400F0,0xC08060FD),ivec4(0x600400F0,0xC0806008,0x6000F0C0,0x00F0C080),ivec4(0x60056000,0xF0C08060,0x056000F0,0xC0806005),ivec4(0x6000F0C0,0x8060FA60,0x0400F0C0,0x8060FD60),ivec4(0x0400F0C0,0x80600860,0x00F0C000,0xF0C08060),ivec4(0x056000F0,0xC0806005,0x6000F0C0,0x80600560),ivec4(0x00F0C080,0x60056000,0xF0C08060,0x056000F0),ivec4(0xC0806008,0x6000F0C0,0x00F0C080,0x60086000),ivec4(0xF0C000F0,0xC0806005,0x6000F0C0,0x80600560),ivec4(0x00F0C080,0x60D76000,0x00000000,0x00000000));\n#endif\n\n\n#ifndef QUICKSTART\n//Warhawk\nconst int songname[] = int[](87,65,82,72,65,87,75);\n\nconst bool BAKED_AMPS=true;\nconst bool USE_VEC4=true;\nconst bool COMPRESSED=true;\nconst float DECIMATION=1.0;\nconst float SAMPLE_RATE=49.903/DECIMATION;\nconst float PLAY_TIME=53.0;\n\n//Pointers to the indicated SID samples\nconst int samples_pointers[] = int[](\n\t0, //54272 Voice1 frequency (low byte)\n\t179, //54273 Voice1 frequency (high byte)\n\t307, //54274 Voice1 pulse width (low byte)\n\t482, //54275 Voice1 pulse width (high byte/control bits)\n\t530, //54276 Voice1 control register\n\t-1, //54277 Voice1 attack/decay\n\t-1, //54278 Voice1 sustain/release\n\t552, //54279 Voice2 frequency (low byte)\n\t691, //54280 Voice2 frequency (high byte)\n\t818, //54281 Voice2 pulse width (low byte)\n\t963, //54282 Voice2 pulse width (high byte/control bits)\n\t1019, //54283 Voice2 control register\n\t-1, //54284 Voice2 attack/decay\n\t-1, //54285 Voice2 sustain/release\n\t1092, //54286 Voice3 frequency (low byte)\n\t1210, //54287 Voice3 frequency (high byte)\n\t1310, //54288 Voice3 pulse width (low byte)\n\t1472, //54289 Voice3 pulse width (high byte/control bits)\n\t1499, //54290 Voice3 control register\n\t-1, //54291 Voice3 attack/decay\n\t-1, //54292 Voice3 sustain/release\n\t1559, //54293 Filter frequency (low byte)\n\t1562, //54294 Filter frequency (high byte)\n\t1565, //54295 Resonance/Filter select\n\t1568, //54296 Mode/Volume\n\t1571, //Voice 1 Amp\n\t1609, //Voice 2 Amp\n\t1710 //Voice 3 Amp\n);\n\nconst int samples[] = int[](0);\nconst ivec4 samples_vec4[] = ivec4[](\n//54272 Voice1 frequency (low byte)\nivec4(0x053888E0,0x3890E807,0xE840E890,0x38E088E0),ivec4(0x07E03890,0xE840E890,0x380738E0,0x88E03826),ivec4(0x83E007E0,0x3DE08326,0xC96CC907,0xC92683E0),ivec4(0x3DE08326,0x0726C96C,0xC92683E0,0x3D073D10),ivec4(0x9C5610CA,0x84CA07CA,0x10569CE2,0x9C561007),ivec4(0x10CA84CA,0x10569CE2,0x07E29C56,0x105E15CC),ivec4(0x1507155E,0xA7F039F0,0xA75E075E,0x15CC155E),ivec4(0xA7F03907,0x39F0A75E,0x15CC1510,0xFF100556),ivec4(0x9CE29C56,0x100710CA,0x84CA1056,0x9CE207E2),ivec4(0x9C043B04,0xCD96CD07,0xCD043B72,0xA9723B04),ivec4(0x0404CD96,0xCD460246,0x7AAE07AE,0xE2AE7A46),ivec4(0x12DE1207,0x12467AAE,0xE2AE7A46,0x074612DE),ivec4(0x12467AAE,0x040704A9,0x723B04CD,0x96CD07CD),ivec4(0x043B72A9,0x723B0407,0x04CD96CD,0x043B72A9),ivec4(0x03A9723B,0x88038865,0x42650765,0x88ABCEF1),ivec4(0xCEAB8804,0x88654265,0x88028815,0xA207A215),ivec4(0x88FB6EFB,0x88150715,0xA21588FB,0x6EFB8807),ivec4(0x8815A215,0x88FB6EFB,0x07FB8815,0xA21588FB),ivec4(0x6E076EFB,0x8815A215,0x88FB07FB,0x6EFB8815),ivec4(0xA2158807,0x88FB6EFB,0x8815A215,0x071588FB),ivec4(0x6EFB8815,0xA206A215,0x88FB6EFB,0xAFFFAF06),ivec4(0xD3F71BF7,0xD3AF8B07,0x8B678BAF,0xD3F71BF7),ivec4(0x07F7D3AF,0x8B678BAF,0xD307D3F7,0x88F1CEAB),ivec4(0x88650765,0x426588AB,0xCEF1CE07,0xCEAB8865),ivec4(0x426588AB,0x05ABCEF1,0xCEABD001,0xD0920792),ivec4(0x5492D00E,0x4C8A4C07,0x4C0ED092,0x5492D00E),ivec4(0x070E4C8A,0x4C0ED092,0x54075446,0x12467AAE),ivec4(0xE2AE07AE,0x7A4612DE,0x12467A07,0x7AAEE2AE),ivec4(0x7A4612DE,0x07DE1246,0x7A5EF039,0xF007F0A7),ivec4(0x5E15CC15,0x5EA707A7,0xF039F0A7,0x5E10CA07),ivec4(0xCA84CA10,0x569CE29C,0x079C5610,0xCA84CA10),ivec4(0x56075646,0xAEE2AE7A,0x46120712,0xDE12467A),ivec4(0xAEE2AE07,0xAE7A4612,0xDE12467A,0x077AAEE2),ivec4(0xAE043B04,0xCD07CD96,0xCD043B72,0xA9720772),ivec4(0x3B04CD96,0xCD043B07,0x3B72A972,0x3B04CD13),ivec4(0x0713B7E5,0x13416F9D,0x6F076F41,0x13E5B7E5),ivec4(0x13410741,0x6F13CE13,0x589D5807,0x5813CE89),ivec4(0xCE13589D,0x079D5813,0xCE89CE13,0x5807589D),ivec4(0x5813CE89,0xCE130713,0x589D5813,0xCE261407),ivec4(0x149D26AF,0x38AF269D,0x079D149D,0x26AF38AF),ivec4(0x2607269D,0x149D26AF,0x38AF07AF,0x269D149D),ivec4(0x26AF3807,0x38AF269D,0x149D26AF,0x07AF38AF),ivec4(0x269D149D,0x260726AF,0x38AF269D,0x149D079D),ivec4(0x26AF38AF,0x269D1407,0x149D26AF,0x38AF264C),ivec4(0x074C3A28,0x3A4C5E70,0x5E075E4C,0x3A283A4C),ivec4(0x5E700770,0x5E4C3A28,0x3A4C5E07,0x5E705E4C),ivec4(0x3A283A4C,0x074C5E70,0x5E4C3A28,0x3A073A4C),ivec4(0x5E705E4C,0x3A280728,0x3A4C5E70,0x5E4C3A07),ivec4(0x3A283A4C,0x5E705E4C,0x074C3A28,0x3A4C5E70),ivec4(0x5EFF5E05,0x4C3A283A,0x4C5E075E,0x705E4C3A),ivec4(0x283A4C07,0x4C5E705E,0x4C3A283A,0x073A4C5E),ivec4(0x705E4C3A,0x2807283A,0x4C5E705E,0x4C3A073A),ivec4(0x283A4C5E,0x705E4C07,0x4C3A283A,0x4C5E705E),ivec4(0x075E4C3A,0x283A4C5E,0x7007705E,0x4C3A283A),ivec4(0x4C5E015E,0x7005705E,0x4C3A283A,0x073A4C5E),ivec4(0x705E4C3A,0x2807283A,0x4C5E705E,0x4C3A073A),ivec4(0x283A4C5E,0x705E4C07,0x4C3A283A,0x4C5E705E),ivec4(0x075E4C3A,0x283A4C5E,0x7007705E,0x4C3A283A),ivec4(0x4C5E075E,0x705E4C3A,0x283A4C07,0x4C5E705E),ivec4(0x4C3A283A,0x023A4C5E,0x045E705E,0x4C3A073A),ivec4(0x283A4C5E,0x705E4C07,0x4C3A283A,0x4C5E705E),ivec4(0x075E4C3A,0x283A4C5E,0x7006705E,0x4C3A283A),ivec4(0x4CFF4C06,0x5E705E4C,0x3A283A02,0x3A4C5E04),ivec4(0x5E705E4C,0x3A073A28,0x3A4C5E70,0x38E007E0),ivec4(0x3890E840,0xE8903807,0x38E088E0,0x3890E840),ivec4(0x0740E890,0x38E088E0,0x38073890,0x26E03DE0),ivec4(0x83260726,0xC96CC926,0x83E03D07,0x3DE08326),ivec4(0xC96CC926,0x072683E0,0x3DE01056,0x100710CA),ivec4(0x84CA1056,0x9CE207E2,0x9C5610CA,0x84CA1007),ivec4(0x10569CE2,0x9C5610CA,0x07CA5ECC,0x155EA7F0),ivec4(0x390739F0,0xA75E15CC,0x155E075E,0xA7F039F0),ivec4(0xA75E1507,0x15CC155E,0x10569CE2,0x07E29C56),ivec4(0x10CA84CA,0x10061056,0x9CE29C56,0x04FF0406),ivec4(0xCD96CD04,0x3B72A907,0xA9723B04,0xCD96CD04),ivec4(0x0704467A,0xAEE2AE7A,0x46074612,0xDE12467A),ivec4(0xAEE207E2,0xAE7A4612,0xDE124607,0x467AAEE2),ivec4(0x04723B04,0x0704CD96,0xCD043B72,0xA907A972),ivec4(0x3B04CD96,0xCD040704,0x3B72A972,0x3B048807),ivec4(0x88654265,0x88ABCEF1,0x07F1CEAB,0x88654265),ivec4(0x880788AB,0x88A21588,0xFB6E076E,0xFB8815A2),ivec4(0x1588FB07,0xFB6EFB88,0x15A21588,0x0788FB6E),ivec4(0xFB8815A2,0x15071588,0xFB6EFB88,0x15A207A2),ivec4(0x1588FB6E,0xFB881507,0x15A21588,0xFB6EFB88),ivec4(0x078815A2,0x1588FB6E,0xFB07FB88,0x15A21588),ivec4(0xFB6E076E,0xFB88AFD3,0xF71BF707,0xF7D3AF8B),ivec4(0x678BAFD3,0x07D3F71B,0xF7D3AF8B,0x6707678B),ivec4(0xAFD3F71B,0x88CE07CE,0xAB886542,0x6588AB07),ivec4(0xABCEF1CE,0xAB886542,0x07426588,0xABCEF1CE),ivec4(0xAB07AB88,0xD0925492,0xD00E070E,0x4C8A4C0E),ivec4(0xD0925407,0x5492D00E,0x4C8A4C0E,0x050ED092),ivec4(0x54924601,0x467A077A,0xAEE2AE7A,0x4612DE07),ivec4(0xDE12467A,0xAEE2AE7A,0x077A4612,0xDE12467A),ivec4(0xAE07AE5E,0x39F0A75E,0x15CC07CC,0x155EA7F0),ivec4(0x39F0A707,0xA75E1510,0x84CA1056,0x07569CE2),ivec4(0x9C5610CA,0x840784CA,0x10569CDC,0x9F5E075E),ivec4(0x1DDC9B5A,0x9BDC1D07,0x1D5E9F5E,0x1DDC9B5A),ivec4(0x075A9BDC,0x1D5E9F5E,0x1D011D10,0x0510CA84),ivec4(0xCA105607,0x569CE29C,0x5610CA84,0x0284CA10),ivec4(0x04102A44,0x2A100710,0xF6DCF610,0x2A442A07),ivec4(0x2A10F6DC,0xF6102A44,0x07442A10,0xF6DCF610),ivec4(0x2A072A44,0x2A10F6DC,0xF6100710,0x2A442A10),ivec4(0xF6DCF607,0xF6102A44,0x2A10F6DC,0x07DCF626),ivec4(0x04260426,0x04070426,0x0408DC08,0xDC080708),ivec4(0xDC08DC8C,0xD08CD007,0xD08CD08C,0xD042DC42),ivec4(0x0742DC42,0xDC42DC26,0x04070426,0x04260426),ivec4(0x0438FF38,0x0590E840,0xE8903807,0x38E088E0),ivec4(0x3890E840,0x0740E890,0x38E088E0,0x38073890),ivec4(0xE8263DE0,0x83260726,0xC96CC926,0x83E03D07),ivec4(0x3DE08326,0xC96CC926,0x062683E0,0x3DE08310),ivec4(0xFF1006CA,0x84CA1056,0x9CE207E2,0x9C5610CA),ivec4(0x84CA1007,0x10569CE2,0x9C5610CA,0x07CA845E),ivec4(0x155EA7F0,0x390739F0,0xA75E15CC,0x155E075E),ivec4(0xA7F039F0,0xA75E1507,0x15CC155E,0xA7109CE2),ivec4(0x07E29C56,0x10CA84CA,0x10071056,0x9CE29C56),ivec4(0x10040704,0xCD96CD04,0x3B72A907,0xA9723B04),ivec4(0xCD96CD04,0x07043B46,0xAEE2AE7A,0x46074612),ivec4(0xDE12467A,0xAEE207E2,0xAE7A4612,0xDE124607),ivec4(0x467AAEE2,0xAE043B04,0x0704CD96,0xCD043B72),ivec4(0xA907A972,0x3B04CD96,0xCD040704,0x3B72A972),ivec4(0x3B04CD07,0xCD884265,0x88ABCEF1,0x07F1CEAB),ivec4(0x88654265,0x880788AB,0xCE881588,0xFB6E076E),ivec4(0xFB8815A2,0x1588FB07,0xFB6EFB88,0x15A21588),ivec4(0x0788FB6E,0xFB8815A2,0x15071588,0xFB6EFB88),ivec4(0x15A207A2,0x1588FB6E,0xFB881507,0x15A21588),ivec4(0xFB6EFB88,0x078815A2,0x1588FB6E,0xFB07FB88),ivec4(0x15A21588,0xFB6E076E,0xFB8815AF,0xF71BF707),ivec4(0xF7D3AF8B,0x678BAFD3,0x07D3F71B,0xF7D3AF8B),ivec4(0x6707678B,0xAFD3F71B,0xF7880788,0xAB886542),ivec4(0x6588AB07,0xABCEF1CE,0xAB886542,0x07426588),ivec4(0xABCEF1CE,0xAB07AB88,0x65D05492,0xD00E070E),ivec4(0x4C8A4C0E,0xD0925407,0x5492D00E,0x4C8A4C0E),ivec4(0x070ED092,0x5492D046,0x7A077AAE,0xE2AE7A46),ivec4(0x12DE07DE,0x12467AAE,0xE2AE7A07,0x7A4612DE),ivec4(0x12467AAE,0x07AEE25E,0xF0A75E15,0xCC07CC15),ivec4(0x5EA7F039,0xF0A707A7,0x5E15CC10,0xCA105607),ivec4(0x569CE29C,0x5610CA84,0x0784CA10,0x569CE246),ivec4(0xAE07AE7A,0x4612DE12,0x467A077A,0xAEE2AE7A),ivec4(0x4612DE07,0xDE12467A,0xAEE2AE7A,0x077A4604),ivec4(0xCD96CD04,0x3B073B72,0xA9723B04,0xCD960796),ivec4(0xCD043B72,0xA9723B05,0x3B04CD96,0xCD130113),ivec4(0x4107416F,0x9D6F4113,0xE5B707B7,0xE513416F),ivec4(0x9D6F1307,0x13CE1358,0x9D5813CE,0x07CE89CE),ivec4(0x13589D58,0x130713CE,0x89CE1358,0x9D580758),ivec4(0x13CE89CE,0x13589D07,0x9D5813CE,0x89CE1358),ivec4(0x07589D58,0x13CE89CE,0x13071358,0x9D5813CE),ivec4(0x89CE07CE,0x13589D58,0x13CE8907,0x89CE1358),ivec4(0x9D5813CE,0x01CE10FF,0x10FF88FE,0x10FF88FF),ivec4(0x10FF88FE,0x10FF88FF,0x10FE88FF,0x10018808),ivec4(0xFF08FE04,0xFF08FF04,0xFE08FF04,0xFF08FF04),ivec4(0xFE08FF04,0xFF080104,0x10FE10FF,0x88FF10FE),ivec4(0x88FF10FF,0x88FE1001,0x885EFF5E,0xFFAFFE5E),ivec4(0xFFAFFF5E,0xFEAFFF5E,0xFFAFFF5E,0xFEAFFF5E),ivec4(0xFFAFFE5E,0xFFAFFF5E,0xFFAFFE5E,0xFFAFFF5E),ivec4(0xFEAFFF5E,0xFFAFFF5E,0xFEAFFF5E,0xFFAFFE5E),ivec4(0xFFAFFF5E,0xFFAFFE5E,0x01AF5EFF,0x5EFEAFFF),ivec4(0x5EFFAFFF,0x5EFEAFFF,0x5EFFAFFE,0x5EFFAFFF),ivec4(0x5E01AFA0,0xFEA0FFD0,0xFFA0FED0,0xFFA0FFD0),ivec4(0xFFA0FED0,0xFFA0FFD0,0xFEA001D0,0x8CFF8CFF),ivec4(0x46FE8CFF,0x46FF8CFE,0x46FF8C01,0x4608FF08),ivec4(0xFE04FF08,0xFF04FE08,0xFF04FF08,0xFF04FE08),ivec4(0xFF04FF08,0xFE04FF08,0xFF04FF08,0xFE04FF08),ivec4(0xFF04FE08,0xFF04FF08,0xFF04FE08,0xFF04FF08),ivec4(0xFE04FF08,0xFF04FF08,0xFE04FF08,0x010426FE),ivec4(0x26FF13FF,0x26FF13FE,0x26FF13FF,0x26FE13FF),ivec4(0x26FF13FF,0x26FF13FE,0xE4FF72FE,0xE4FF72FF),ivec4(0xE4FF72FE,0xE4FF72FF,0xE4FE72FF,0xE4017220),ivec4(0xFF20FE10,0xFF20FF10,0xFE20FF10,0xFF200110),ivec4(0xBCFEBCFF,0x5EFFBCFE,0x5EFFBCFF,0x5EFFBCFE),ivec4(0x5EFFBCFF,0x5EFEBCFF,0x5EFFBCFF,0x5EFEBCFF),ivec4(0x5EFFBCFE,0x5EFFBCFF,0x5EFFBCFE,0x5EFFBCFF),ivec4(0x5EFEBCFF,0x5EFFBCFF,0x5EFEBCFF,0x5EFFBC01),ivec4(0x5E38FE38,0xFF9CFF38,0xFE9CFF38,0xFF9CFE38),ivec4(0xFF9CFF38,0xFF9CFE38,0x019CA0FF,0xA0FED0FF),ivec4(0xA0FFD0FF,0xA0FED0FF,0xA0FFD0FE,0xA0FFD0FF),ivec4(0xA001D08C,0xFE8CFF46,0xFF8CFE46,0xFF8CFF46),ivec4(0xFF8CFF46,0xFE26FF13,0xFE26FF13,0xFF26FF13),ivec4(0xFE26FF13,0xFF26FE13,0xFF26FF13,0xFF26FE13),ivec4(0xFF26FF13,0xFE26FF13,0xFF26FF13,0xFE26FF13),ivec4(0xFF26FE13,0xFF26FF13,0x00260000,0x00000000),\n//54273 Voice1 frequency (high byte)\nivec4(0x01313001,0x3031FE31,0x013231FF,0x31FD30FE),ivec4(0x31013231,0xFE31FE30,0x013134FE,0x34013534),ivec4(0xFF34FD33,0xFE340135,0x34FE34FE,0x33FE34FF),ivec4(0x35FD27FD,0x26F927FE,0x26F927FF,0x29012829),ivec4(0xFD29012A,0x29FD2901,0x2829FE29,0xFF2AFD29),ivec4(0x02282927,0xF827FE26,0xFB27FE1F,0xFD1EF91F),ivec4(0xFE1EF71D,0x011C1DF7,0x1D011C1D,0xFE1DFB1F),ivec4(0xFD1EF91F,0xFE1EFA1F,0xEE13FD14,0x011312FF),ivec4(0x12011314,0xFE140113,0x12FF12FF,0x13FE1401),ivec4(0x1312FE12,0x011314FF,0x14011312,0xFE120113),ivec4(0x14FF1401,0x1312FE12,0x011314FF,0x14FF13FE),ivec4(0x12011314,0xFE140113,0x12FF1201,0x1314FE14),ivec4(0x011312FF,0x12FC1401,0x1514F814,0x011514F7),ivec4(0x14E613FA,0x22FB23FC,0x22FB23FD,0x22F61D01),ivec4(0x1C1DF81D,0xFF1CFE1D,0xFF29012A,0x29FD2901),ivec4(0x2829FD29,0x012A29FF,0x29012726,0xFE26F927),ivec4(0xFE26FE27,0xF91D011C,0x1DF81D01,0x1C1DFB1D),ivec4(0xFE1FFD1E,0xF91FFE1E,0xF91F011E,0x1A011A19),ivec4(0x01191AFA,0x1AFE19FA,0x1A021918,0x1901191A),ivec4(0x021A1B1A,0x021A1918,0x0218191A,0x021A1B1A),ivec4(0x011A1903,0x1918191A,0x021A1B1A,0xFF1A0319),ivec4(0x18191A02,0x1A343707,0x37353432,0x31323435),ivec4(0x07353735,0x34323132,0x34073435,0x37353432),ivec4(0x31320732,0x34353735,0x34323107,0x31323435),ivec4(0x37353432,0x07323132,0x34353735,0x34073432),ivec4(0x31323435,0x37350735,0x34323132,0x34353707),ivec4(0x37353432,0x31323468,0x07686B6E,0x6B686562),ivec4(0x65076568,0x6B6E6B68,0x65620762,0x65686B6E),ivec4(0x6B686507,0x65626568,0x6B6E6B68,0x07686562),ivec4(0x65686B6E,0x6B076B68,0x65626568,0x6B6E076E),ivec4(0x6B686562,0x65686B07,0x6B6E6B68,0x65626568),ivec4(0x07686B6E,0x6B686562,0x65FF6505,0x686B6E6B),ivec4(0x68650765,0x6265686B,0x6E6B6807,0x68656265),ivec4(0x686B6E6B,0x076B6865,0x6265686B,0x6E076E6B),ivec4(0x68656265,0x686B076B,0x6E6B6865,0x62656807),ivec4(0x686B6E6B,0x68656265,0x0765686B,0x6E6B6865),ivec4(0x62076265,0x686B6E6B,0x68650165,0x62056265),ivec4(0x686B6E6B,0x076B6865,0x6265686B,0x6E076E6B),ivec4(0x68656265,0x686B076B,0x6E6B6865,0x62656807),ivec4(0x686B6E6B,0x68656265,0x0765686B,0x6E6B6865),ivec4(0x62076265,0x686B6E6B,0x68650765,0x6265686B),ivec4(0x6E6B6807,0x68656265,0x686B6E6B,0x026B6865),ivec4(0x04656265,0x686B076B,0x6E6B6865,0x62656807),ivec4(0x686B6E6B,0x68656265,0x0765686B,0x6E6B6865),ivec4(0x62066265,0x686B6E6B,0x68FF6806,0x65626568),ivec4(0x6B6E6B02,0x6B686504,0x65626568,0x6B076B6E),ivec4(0x6B686562,0x31300130,0x31FF3101,0x3231FE31),ivec4(0xFE30FE31,0xFF32FE31,0xFE30FE31,0xFF340135),ivec4(0x34FE34FE,0x33FE34FF,0x35FE34FE,0x33FD3402),ivec4(0x353427FE,0x27FE26F9,0x27FE26F9,0x27FF2602),ivec4(0x292829FE,0x29FF2AFD,0x29012829,0xFD29012A),ivec4(0x29FD2901,0x28290129,0x27FA27FE,0x26FA27FE),ivec4(0x1FFE1EF9,0x1FFE1EFF,0x1FF81D01,0x1C1DF81D),ivec4(0x011C1DFC,0x1DFC1FFE,0x1EF91FFE,0x1EF91FED),ivec4(0x13FF1401,0x1312FE12,0x011314FF,0x14011312),ivec4(0xFE120113,0x14FF14FF,0x13FE1201,0x1314FE14),ivec4(0x011312FF,0x12011314,0xFE140113,0x12FF1201),ivec4(0x1314FE14,0x011312FF,0x12FF13FE,0x14011312),ivec4(0xFE120113,0x14FF1401,0x1312FE12,0x011314FF),ivec4(0x14011514,0xF7140115,0x14F81401,0x1513E613),ivec4(0xFC22FB23,0xFB22FB23,0xFD22F71D,0xFF1CF71D),ivec4(0x011C1DFD,0x1D02292A,0x29FE29FF,0x28FD2901),ivec4(0x2A29FD29,0x01272601,0x2627FA27,0xFD26FE27),ivec4(0x012425FE,0x25FC24FB,0x25FB24FB,0x25FF27FE),ivec4(0x26F927FD,0x26FF2703,0x28292827,0x07272524),ivec4(0x25272829,0x28072827,0x25242527,0x28290729),ivec4(0x28272524,0x25272807,0x28292827,0x25242527),ivec4(0x07272829,0x28272524,0x25072527,0x28292827),ivec4(0x25240724,0x25341F34,0x1F341F07,0x1F341F3E),ivec4(0x243E243E,0x073E243E,0x243A223A,0x2207223A),ivec4(0x223A2237,0x20370737,0x20372037,0x20341F07),ivec4(0x1F341F34,0x1F341F31,0xFD310132,0x31FE31FE),ivec4(0x30FE31FF,0x32FE31FE,0x30FD3102,0x343534FE),ivec4(0x34FE33FE,0x34FF35FE,0x34FE33FD,0x34013534),ivec4(0x013427FF,0x27FE26F9,0x27FE26F9,0x27FE26FC),ivec4(0x29FF2AFD,0x29012829,0xFD29012A,0x29FD2901),ivec4(0x2829FF29,0xFA27FE26,0xF927FF1F,0xFE1EF91F),ivec4(0xFE1EFE1F,0xF91D011C,0x1DF81D01,0x1C1DFB1D),ivec4(0xFD1FFE1E,0xF91FFE1E,0xF91FFF1E,0xEE130214),ivec4(0x1312FE12,0x011314FF,0x14011312,0xFE120113),ivec4(0x14FF14FF,0x13FE1201,0x1314FE14,0x011312FF),ivec4(0x12011314,0xFE140113,0x12FF1201,0x1314FE14),ivec4(0x011312FF,0x12FF13FE,0x14011312,0xFE120113),ivec4(0x14FF1401,0x1312FE12,0x011314FF,0x14011514),ivec4(0xF7140115,0x14F81402,0x151413E6,0x13FD22FB),ivec4(0x23FB22FB,0x23FC22F8,0x1DFF1CF7,0x1D011C1D),ivec4(0xFC1DFC29,0xFF28FD29,0x012A29FD,0x29032827),ivec4(0x2627FA27,0xFD26FD27,0xFB1D011C,0x1DF81DFF),ivec4(0x1CF81D01,0x1F1EFF1E,0xF91FFD1E,0xF91FFE1E),ivec4(0xF81AFD19,0xF81A0319,0x18191AFF,0x1A011B1A),ivec4(0x041A1918,0x191AFF1A,0x011B1A03,0x1A191819),ivec4(0x01191A02,0x1A1B1A02,0x1A191802,0x18191A02),ivec4(0x1A1B1A01,0x1A190319,0x18191A02,0x1A1B1AFF),ivec4(0x1A031918,0x191A021A,0x1B1AFF1A,0x03191819),ivec4(0x1A011A1B,0x011B1A04,0x1A191819,0x1AFF1AFE),ivec4(0x27FF13FE,0x27FF13FF,0x27FF13FE,0x27FF13FF),ivec4(0x27FE13FF,0x2701133E,0xFF3EFE1F,0xFF3EFF1F),ivec4(0xFE3EFF1F,0xFF3EFF1F,0xFE3EFF1F,0xFF3E011F),ivec4(0x27FE27FF,0x13FF27FE,0x13FF27FF,0x13FE2701),ivec4(0x1329FF29,0xFF14FE29,0xFF14FF29,0xFE14FF29),ivec4(0xFF14FF29,0xFE14FF29,0xFF14FE29,0xFF14FF29),ivec4(0xFF14FE29,0xFF14FF29,0xFE14FF29,0xFF14FF29),ivec4(0xFE14FF29,0xFF14FE29,0xFF14FF29,0xFF14FE29),ivec4(0x011429FF,0x29FE14FF,0x29FF14FF,0x29FE14FF),ivec4(0x29FF14FE,0x29FF14FF,0x29011445,0xFE45FF22),ivec4(0xFF45FE22,0xFF45FF22,0xFF45FE22,0xFF45FF22),ivec4(0xFE450122,0x3AFF3AFF,0x1DFE3AFF,0x1DFF3AFE),ivec4(0x1DFF3A01,0x1D3EFF3E,0xFE1FFF3E,0xFF1FFE3E),ivec4(0xFF1FFF3E,0xFF1FFE3E,0xFF1FFF3E,0xFE1FFF3E),ivec4(0xFF1FFF3E,0xFE1FFF3E,0xFF1FFE3E,0xFF1FFF3E),ivec4(0xFF1FFE3E,0xFF1FFF3E,0xFE1FFF3E,0xFF1FFF3E),ivec4(0xFE1FFF3E,0x011F34FE,0x34FF1AFF,0x34FF1AFE),ivec4(0x34FF1AFF,0x34FE1AFF,0x34FF1AFF,0x34FF1AFE),ivec4(0x5CFF2EFE,0x5CFF2EFF,0x5CFF2EFE,0x5CFF2EFF),ivec4(0x5CFE2EFF,0x5C012E4E,0xFF4EFE27,0xFF4EFF27),ivec4(0xFE4EFF27,0xFF4E0127,0x52FE52FF,0x29FF52FE),ivec4(0x29FF52FF,0x29FF52FE,0x29FF52FF,0x29FE52FF),ivec4(0x29FF52FF,0x29FE52FF,0x29FF52FE,0x29FF52FF),ivec4(0x29FF52FE,0x29FF52FF,0x29FE52FF,0x29FF52FF),ivec4(0x29FE52FF,0x29FF5201,0x2931FE31,0xFF18FF31),ivec4(0xFE18FF31,0xFF18FE31,0xFF18FF31,0xFF18FE31),ivec4(0x011845FF,0x45FE22FF,0x45FF22FF,0x45FE22FF),ivec4(0x45FF22FE,0x45FF22FF,0x4501223A,0xFE3AFF1D),ivec4(0xFF3AFE1D,0xFF3AFF1D,0xFF3AFF1D,0xFE34FF1A),ivec4(0xFE34FF1A,0xFF34FF1A,0xFE34FF1A,0xFF34FE1A),ivec4(0xFF34FF1A,0xFF34FE1A,0xFF34FF1A,0xFE34FF1A),ivec4(0xFF34FF1A,0xFE34FF1A,0xFF34FE1A,0xFF34FF1A),ivec4(0x00340000,0x00000000,0x00000000,0x00000000),\n//54274 Voice1 pulse width (low byte)\nivec4(0x05A0D000,0x30609007,0x90C0F020,0x5080B0E0),ivec4(0x07E01040,0x70A0D000,0x30073060,0x90C0F0A0),ivec4(0xD0000700,0x306090C0,0xF0205007,0x5080B0E0),ivec4(0x104070A0,0x07A0D000,0x306090C0,0xF007F0A0),ivec4(0xD0003060,0x90C007C0,0xF0205080,0xB0E01007),ivec4(0x104070A0,0xD0003060,0x076090C0,0xF0A0D000),ivec4(0x30073060,0x90C0F020,0x50800780,0xB0E01040),ivec4(0x70A0D007,0xD0003060,0x90C0F0A0,0x07A0D000),ivec4(0x306090C0,0xF007F020,0x5080B0E0,0x10400740),ivec4(0x70A0D000,0x30609007,0x90C0F020,0x5080B0E0),ivec4(0x07E01040,0x70A0D000,0x30073060,0x90C0F020),ivec4(0x50800780,0xB0E01040,0x70A0D007,0xD0003060),ivec4(0x90C0F0A0,0x07A0D000,0x306090C0,0xF007F020),ivec4(0x5080B0E0,0x10400740,0x70A0D000,0x30609007),ivec4(0x90C0F0A0,0xD0003060,0x076090C0,0xF0205080),ivec4(0xB007B0E0,0x104070A0,0xB0C007C0,0xD0E0F000),ivec4(0x10203007,0x30405060,0x708090A0,0x07A0B0C0),ivec4(0xD0E0F000,0x10071020,0x30405060,0x70800780),ivec4(0x90A0B0C0,0xD0E0F007,0xF0001020,0x30405060),ivec4(0x07607080,0x90A0B0C0,0xD007D0E0,0xF0001020),ivec4(0x30400740,0x50607080,0x90A0D007,0xD0003060),ivec4(0x90C0F020,0x07205080,0xB0E01040,0x700770A0),ivec4(0xD0003060,0x90C007C0,0xF0A0D000,0x30609007),ivec4(0x90C0F020,0x5080B0E0,0x07E01040,0x70A0D000),ivec4(0x30073060,0x90C0F0A0,0xD0000700,0x306090C0),ivec4(0xF0205007,0x5080B0E0,0x104070A0,0x07A0D000),ivec4(0x306090C0,0xF007F0A0,0xD0003060,0x90C007C0),ivec4(0xF0205080,0xB0E01007,0x104070A0,0xD0003060),ivec4(0x076090C0,0xF0A0D000,0x30073060,0x90C0F020),ivec4(0x50800780,0xB0E01040,0x70A0D007,0xD0003060),ivec4(0x90C0F020,0x07205080,0xB0E01040,0x700770A0),ivec4(0xD0003060,0x90C007C0,0xF0205080,0xB0E01007),ivec4(0x104070A0,0xD0003060,0x076090C0,0xF0A0D000),ivec4(0x30073060,0x90C0F020,0x50800780,0xB0E01040),ivec4(0x70A0D007,0xD0003060,0x90C0F0A0,0x07A0D000),ivec4(0x306090C0,0xF007F020,0x5080B0E0,0x10400740),ivec4(0x70A0B0C0,0xD0E0F007,0xF0001020,0x30405060),ivec4(0x07607080,0x90A0B0C0,0xD007D0E0,0xF0001020),ivec4(0x30400740,0x50607080,0x90A0B007,0xB0C0D0E0),ivec4(0xF0001020,0x07203040,0x50607080,0x900790A0),ivec4(0xB0C0D0E0,0xF0000700,0x10203040,0x50607007),ivec4(0x708090A0,0xB0C0D0E0,0x07E0F000,0x10203040),ivec4(0x50075060,0x708090A0,0xB0C007C0,0xD0E0F000),ivec4(0x10203007,0x30405060,0x708090A0,0x07A0B0C0),ivec4(0xD0E0F000,0x10071020,0x30405060,0x70800780),ivec4(0x90A0B0C0,0xD0E0F007,0xF0001020,0x30405060),ivec4(0x07607080,0x90A0B0C0,0xD007D0E0,0xF0001020),ivec4(0x30400740,0x50607080,0x90A0B007,0xB0C0D0E0),ivec4(0xF0001020,0x07203040,0x50607080,0x900790A0),ivec4(0xB0C0D0E0,0xF0000700,0x10203040,0x50607007),ivec4(0x708090A0,0xB0C0D0E0,0x07E0F000,0x10203040),ivec4(0x50075060,0x708090A0,0xB0C007C0,0xD0E0F000),ivec4(0x10203007,0x30405060,0x708090A0,0x07A0B0C0),ivec4(0xD0E0F000,0x10071020,0x30405060,0x70800780),ivec4(0x90A0B0C0,0xD0E0F007,0xF0001020,0x30405060),ivec4(0x07607080,0x90A0B0C0,0xD007D0E0,0xF0001020),ivec4(0x30400740,0x50607080,0x90A0B007,0xB0C0D0E0),ivec4(0xF0001020,0x07203040,0x50607080,0x900790A0),ivec4(0xB0C0D0E0,0xF0000700,0x10203040,0x50607007),ivec4(0x708090A0,0xB0C0D0E0,0x07E0F000,0x10203040),ivec4(0x50075060,0x708090A0,0xB0C007C0,0xD0E0F000),ivec4(0x10203007,0x30405060,0x708090A0,0x07A0B0C0),ivec4(0xD0E0F000,0x10071020,0x30A0B0C0,0xD0E007E0),ivec4(0xF0001020,0x30A0D007,0xD0003060,0x90C0F020),ivec4(0x07205080,0xB0E01040,0x700770A0,0xD0003060),ivec4(0x90C007C0,0xF0A0D000,0x30609007,0x90C0F020),ivec4(0x5080B0E0,0x07E01040,0x70A0D000,0x30073060),ivec4(0x90C0F0A0,0xD0000700,0x306090C0,0xF0205007),ivec4(0x5080B0E0,0x104070A0,0x07A0D000,0x306090C0),ivec4(0xF007F0A0,0xD0003060,0x90C007C0,0xF0205080),ivec4(0xB0E01007,0x104070A0,0xD0003060,0x076090C0),ivec4(0xF0A0D000,0x30073060,0x90C0F020,0x50800780),ivec4(0xB0E01040,0x70A0D007,0xD0003060,0x90C0F020),ivec4(0x07205080,0xB0E01040,0x700770A0,0xD0003060),ivec4(0x90C007C0,0xF0205080,0xB0E01007,0x104070A0),ivec4(0xD0003060,0x076090C0,0xF0A0D000,0x30073060),ivec4(0x90C0F020,0x50800780,0xB0E01040,0x70A0D007),ivec4(0xD0003060,0x90C0F0A0,0x07A0D000,0x306090C0),ivec4(0xF007F020,0x5080B0E0,0x10400740,0x70A0B0C0),ivec4(0xD0E0F007,0xF0001020,0x30405060,0x07607080),ivec4(0x90A0B0C0,0xD007D0E0,0xF0001020,0x30400740),ivec4(0x50607080,0x90A0B007,0xB0C0D0E0,0xF0001020),ivec4(0x07203040,0x50607080,0x900790A0,0xB0C0D0E0),ivec4(0xF0000700,0x10203040,0x50607007,0x708090A0),ivec4(0xD0003060,0x076090C0,0xF0205080,0xB007B0E0),ivec4(0x104070A0,0xD0000700,0x306090C0,0xF0A0D007),ivec4(0xD0003060,0x90C0F020,0x07205080,0xB0E01040),ivec4(0x700770A0,0xD0003060,0x90C007C0,0xF0A0D000),ivec4(0x30609007,0x90C0F020,0x5080B0E0,0x07E01040),ivec4(0x70A0D000,0x30073060,0x90C0F0A0,0xD0000700),ivec4(0x306090C0,0xF0205007,0x5080B0E0,0x104070A0),ivec4(0x07A0D000,0x306090C0,0xF007F0A0,0xD0003060),ivec4(0x90C007C0,0xF0205080,0xB0E01007,0x104070A0),ivec4(0xD0003060,0x076090C0,0xF0205080,0xB007B0E0),ivec4(0x104070A0,0xD0000700,0x306090C0,0xF0205007),ivec4(0x5080B0E0,0x104070A0,0x07A0D000,0x306090C0),ivec4(0xF007F0A0,0xD0003060,0x90C007C0,0xF0205080),ivec4(0xB0E01007,0x104070A0,0xB0C0D0E0,0x07E0F000),ivec4(0x10203040,0x50075060,0x708090A0,0xB0C007C0),ivec4(0xD0E0F000,0x10203007,0x30405060,0x708090A0),ivec4(0x07A0B0C0,0xD0E0F000,0x10071020,0x30405060),ivec4(0x70800280,0x9000D500,0xFFA006D0,0x00306090),ivec4(0xC0F007F0,0x205080B0,0xE0104007,0x4070A0D0),ivec4(0x00306090,0x0790C0F0,0xA0D00030,0x60076090),ivec4(0xC0F02050,0x80B007B0,0xE0104070,0xA0D00007),ivec4(0x00306090,0xC0F0A0D0,0x07D00030,0x6090C0F0),ivec4(0x20072050,0x80B0E010,0x40700770,0xA0D00030),ivec4(0x6090C007,0xC0F0A0D0,0x00306090,0x0790C0F0),ivec4(0x205080B0,0xE007E010,0x4070A0D0,0x00300730),ivec4(0x6090C0F0,0xA0D00007,0x00306090,0xC0F02050),ivec4(0x075080B0,0xE0104070,0xA007A0D0,0x00306090),ivec4(0xC0F007F0,0x205080B0,0xE0104007,0x4070A0D0),ivec4(0x00306090,0x0790C0F0,0x205080B0,0xE007E010),ivec4(0x4070A0D0,0x00300730,0x6090C0F0,0xA0D00007),ivec4(0x00306090,0xC0F02050,0x075080B0,0xE0104070),ivec4(0xA007A0D0,0x00306090,0xC0F007F0,0xA0D00030),ivec4(0x6090C007,0xC0F02050,0x80B0E010,0x07104070),ivec4(0xA0B0C0D0,0xE007E0F0,0x00102030,0x40500750),ivec4(0x60708090,0xA0B0C007,0xC0D0E0F0,0x00102030),ivec4(0x07304050,0x60708090,0xA007A0B0,0xC0D0E0F0),ivec4(0x00100710,0x20304050,0x60708007,0x8090A0B0),ivec4(0xC0D0E0F0,0x07F00010,0x20304050,0x60076070),ivec4(0x8090A0D0,0x00300730,0x6090C0F0,0x20508007),ivec4(0x80B0E010,0x4070A0D0,0x07D00030,0x6090C0F0),ivec4(0xA007A0D0,0x00306090,0xC0F007F0,0x205080B0),ivec4(0xE0104007,0x4070A0D0,0x00306090,0x0790C0F0),ivec4(0xA0D00030,0x60076090,0xC0F02050,0x80B007B0),ivec4(0xE0104070,0xA0D00007,0x00306090,0xC0F0A0D0),ivec4(0x07D00030,0x6090C0F0,0x20072050,0x80B0E010),ivec4(0x40700770,0xA0D00030,0x6090C007,0xC0F0A0D0),ivec4(0x00306090,0x0790C0F0,0x205080B0,0xE007E010),ivec4(0x4070A0D0,0x00300730,0x6090C0F0,0x20508007),ivec4(0x80B0E010,0x4070A0D0,0x07D00030,0x6090C0F0),ivec4(0x20072050,0x80B0E010,0x40700770,0xA0D00030),ivec4(0x6090C007,0xC0F0A0D0,0x00306090,0x0790C0F0),ivec4(0x205080B0,0xE007E010,0x4070A0D0,0x00300730),ivec4(0x6090C0F0,0xA0D00007,0x00306090,0xC0F02050),ivec4(0x075080B0,0xE0104070,0xA007A0B0,0xC0D0E0F0),ivec4(0x00100710,0x20304050,0x60708007,0x8090A0B0),ivec4(0xC0D0E0F0,0x07F00010,0x20304050,0x60076070),ivec4(0x8090A0B0,0xC0D007D0,0xE0F00010,0x20304007),ivec4(0x40506070,0x8090A0B0,0x07B0C0D0,0xE0F00010),ivec4(0x20072030,0x40506070,0x80900290,0x80C001C0),ivec4(0x00010040,0xFF40FF80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FF80,0xFEC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFF40FE80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFEC0FF00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FE80,0xFFC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FF80,0xFEC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFF40FE80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFEC0FF00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FE80,0xFFC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FF80,0xFEC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFF40FE80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFEC0FF00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FE80,0xFFC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FF80,0xFEC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFF40FE80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFEC0FF00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FE80,0xFFC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0xFE40FF80,0xFFC0FF00,0xFE40FF80),ivec4(0xFFC0FE00,0xFF40FF80,0xFFC0FE00,0xFF40FF80),ivec4(0xFEC0FF00,0xFF40FF80,0xFEC0FF00,0xFF40FE80),ivec4(0xFFC0FF00,0x00400000,0x00000000,0x00000000),\n//54275 Voice1 pulse width (high byte/control bits)\nivec4(0xFF00FA01,0xFB02FC03,0xFA04FF00,0xFA01FB02),ivec4(0xFB03FA04,0xFF00FA01,0xFC02FB03,0xFA04FF00),ivec4(0xFA01FB02,0xFB03FB04,0xFE00FA01,0xFC02FD03),ivec4(0xFF00FA01,0xFB02FE03,0xFF00FA01,0xFB02FB03),ivec4(0xFB04FE00,0xFA01FC02,0xFB03FA04,0xFF00FA01),ivec4(0xFB02FE03,0xFA09EF0A,0xEE0BEF0C,0xF60DFE00),ivec4(0xFB01FB02,0xFB03FA04,0xFF00FA01,0xFB02FC03),ivec4(0xFA04FF00,0xFA01FB02,0xFB03FA04,0xFF00FA01),ivec4(0xFC02FB03,0xFA04FF00,0xFA01FB02,0xFE03FE00),ivec4(0xFB01FB02,0xFD03FF00,0xFA01FC02,0xFB03FA04),ivec4(0xFF00FA01,0xFB02FB03,0xFB04FE00,0xFA01FC02),ivec4(0xFD03FA09,0xEF0AF60B,0xFA09EF0A,0xEE0BEF0C),ivec4(0xF60DFA09,0xEE0AEF0B,0xEF0CF50D,0xFB09EE0A),ivec4(0xEF0BEF0C,0xF50DFA09,0xEF0AEF0B,0xEF0CF50D),ivec4(0xFA09EF0A,0xF60BFA09,0xFC0AFA09,0xFD0AFE00),ivec4(0xFB01FB02,0xFB03FA04,0xFF00FA01,0xFB02FC03),ivec4(0xFA04FF00,0xFA01FB02,0xFB03FA04,0xFF00FA01),ivec4(0xFC02FB03,0xFA04FF00,0xFA01FB02,0xFE03FE00),ivec4(0xFB01FB02,0xFD03FF00,0xFA01FC02,0xFB03FA04),ivec4(0xFF00FA01,0xFB02FB03,0xFB04FE00,0xFA01FC02),ivec4(0xFD03FA09,0xEF0AEF0B,0xEF0CF50D,0xFF00FA01),ivec4(0xFB02FC03,0xFA04FE00,0xFB01FB02,0xFB03FA04),ivec4(0xFF00FA01,0xFB02FC03,0xFA04FF00,0xFA01FB02),ivec4(0xFB03FA04,0xFF00FA01,0xFC02FD03,0xFF00FA01),ivec4(0xFB02FE03,0xFF00FA01,0xFB02FB03,0xFA04FF00),ivec4(0xFA01FC02,0xFD03FA09,0xEF0AEF0B,0xF50CD408),ivec4(0xFE00FA01,0xFC02FB03,0xFA04FF00,0xFA01FB02),ivec4(0xFC03FA04,0xFE00FB01,0xFB02FB03,0xFA04FF00),ivec4(0xFA01FB02,0xFC03FA04,0xFF00FA01,0xFB02FE03),ivec4(0xFE00FA01,0xFC02FD03,0xFF00FA01,0xFB02FC03),ivec4(0xFA04FF00,0xFA01FB02,0xFB03FA04,0xFF00FA01),ivec4(0xFC02FD03,0xFA09EF0A,0xEF0BEE0C,0xF60DFF00),ivec4(0xFA01FB02,0xFB03FB04,0xFE00FA01,0xFC02FB03),ivec4(0xFA04FF00,0xFA01FB02,0xFC03FA04,0xFE00FB01),ivec4(0xFB02FB03,0xFA04FF00,0xFA01FB02,0xFE03FF00),ivec4(0xFA01FB02,0xFE03FE00,0xFB01FB02,0xFB03FA04),ivec4(0xFF00FA01,0xFB02FC03,0xFA04FF00,0xFA01FB02),ivec4(0xFE03FA09,0xEE0AEF0B,0xEF0CF50D,0xFE01F802),ivec4(0xF803FB04,0xFE01F702,0xF803FC04,0xFD01F802),ivec4(0xFB03FE01,0xF802F803,0xF704F805,0xF806F807),ivec4(0xF808FB09,0xFE01F802,0xF703FC04,0xFD01F802),ivec4(0xF803FB04,0xFE01F802,0xFB03FE01,0xF702F803),ivec4(0xF804F805,0xF806F807,0xF808FB09,0xFD01F802),ivec4(0xF803FB04,0xFE01F802,0xF803FB04,0xFE01F702),ivec4(0xFC03FD01,0xF802F803,0xF804F805,0xF806F707),ivec4(0xF808FC09,0xFD01F802,0xF803FB04,0xFE01F802),ivec4(0xF703FC04,0xFD01F802,0xFB03FE01,0xF802F803),ivec4(0xF804F705,0xF806F807,0xFE080000,0x00000000),\n//54276 Voice1 control register\nivec4(0xE841FF40,0xE841FE40,0xE841FF40,0xE841FF40),ivec4(0xF141FE40,0xF141FF40,0xE841FF40,0xE741FF40),ivec4(0xA841FF40,0xE841FE40,0xE841FF40,0xE841FE40),ivec4(0xE841FF40,0xF141FF40,0xF141FE40,0xE841FF40),ivec4(0xE841FF40,0x8141B741,0x8140B440,0xE841FE40),ivec4(0xE841FF40,0xE841FE40,0xE841FF40,0xF141FF40),ivec4(0xF141FE40,0xE841FF40,0xE841FF40,0xA741FF40),ivec4(0xE841FF40,0xE841FE40,0xE841FF40,0xE841FE40),ivec4(0xF141FF40,0xF141FF40,0xE841FE40,0xBB41FE40),ivec4(0x02418040,0xFB400241,0x8040FB40,0x02418040),ivec4(0xFB400241,0x8040FB40,0x01418001,0x8040FC40),ivec4(0xE741FF40,0xE841FF40,0xE841FE40,0xE841FF40),ivec4(0xF141FF40,0xF141FE40,0xE841FF40,0xE841FE40),ivec4(0xA841FF40,0xE841FF40,0xE741FF40,0xE841FF40),ivec4(0xE841FE40,0xF141FF40,0xF141FF40,0xE841FE40),ivec4(0xE841FF40,0xA841FE40,0x02418040,0xE9400241),ivec4(0x8040E940,0xFF410180,0x40F24002,0x418040BB),ivec4(0x40024180,0x40E94001,0x41800180,0x40E94002),ivec4(0x418040F2,0x40024180,0x40BB4002,0x418040E8),ivec4(0x40024180,0x40E94002,0x418040F2,0x40014180),ivec4(0x018040BC,0x40FF4101,0x8040E940,0x02418040),ivec4(0xE9400141,0x80018040,0xF2400241,0x8040C740),\n//54277 Voice1 attack/decay\n  //Removed as its redundant due to baked amps\n//54278 Voice1 sustain/release\n  //Removed as its redundant due to baked amps\n//54279 Voice2 frequency (low byte)\nivec4(0xFF010316,0x01160105,0x01160116,0x01380138),ivec4(0x900790E8,0x40E89038,0xE0880788,0xE03890E8),ivec4(0x40E89007,0x9038E088,0xE03890E8,0x07E8263D),ivec4(0xE08326C9,0x6C076CC9,0x2683E03D,0xE0830783),ivec4(0x26C96CC9,0x2683E004,0xE03DE083,0x100210CA),ivec4(0x840784CA,0x10569CE2,0x9C560756,0x10CA84CA),ivec4(0x10569C07,0x9CE29C56,0x10CA845E,0x075E155E),ivec4(0xA7F039F0,0xA707A75E,0x15CC155E,0xA7F007F0),ivec4(0x39F0A75E,0x15CC1507,0x155EA710,0x9CE29C56),ivec4(0x075610CA,0x84CA1056,0x9C079CE2,0x9C561004),ivec4(0xCD960796,0xCD043B72,0xA9723B07,0x3B04CD96),ivec4(0xCD043B46,0x0746AEE2,0xAE7A4612,0xDE07DE12),ivec4(0x467AAEE2,0xAE7A077A,0x4612DE12,0x467AAE07),ivec4(0xAEE2AE04,0x3B04CD96,0x0796CD04,0x3B72A972),ivec4(0x3B073B04,0xCD96CD04,0x3B720772,0xA9723B04),ivec4(0xCD884207,0x426588AB,0xCEF1CEAB,0x07AB8865),ivec4(0x426588AB,0xCE07CE88,0x1588FB6E,0xFB880788),ivec4(0x15A21588,0xFB6EFB07,0xFB8815A2,0x1588FB6E),ivec4(0x076EFB88,0x15A21588,0xFB07FB6E,0xFB8815A2),ivec4(0x15880788,0xFB6EFB88,0x15A21507,0x1588FB6E),ivec4(0xFB8815A2,0x07A21588,0xFB6EFB88,0x150715A2),ivec4(0x1588FB6E,0xFB880788,0x15AFF71B,0xF7D3AF07),ivec4(0xAF8B678B,0xAFD3F71B,0x071BF7D3,0xAF8B678B),ivec4(0xAF07AFD3,0xF71BF788,0xAB880788,0x65426588),ivec4(0xABCEF107,0xF1CEAB88,0x65426588,0x0788ABCE),ivec4(0xF1CEAB88,0x650765D0,0x5492D00E,0x4C8A078A),ivec4(0x4C0ED092,0x5492D007,0xD00E4C8A,0x4C0ED092),ivec4(0x07925492,0xD0467AAE,0xE207E2AE,0x7A4612DE),ivec4(0x12460746,0x7AAEE2AE,0x7A461207,0x12DE1246),ivec4(0x7AAEE25E,0x075EF0A7,0x5E15CC15,0x5E075EA7),ivec4(0xF039F0A7,0x5E150715,0xCC10CA10,0x569CE207),ivec4(0xE29C5610,0xCA84CA10,0x0710569C,0xE246AE7A),ivec4(0x46074612,0xDE12467A,0xAEE207E2,0xAE7A4612),ivec4(0xDE124607,0x467AAEE2,0xAE7A4604,0x0704CD96),ivec4(0xCD043B72,0xA907A972,0x3B04CD96,0xCD040704),ivec4(0x3B72A972,0x3B04CD03,0xCD96CD13,0x0313416F),ivec4(0x9D079D6F,0x4113E5B7,0xE5130713,0x416F9D6F),ivec4(0x13CE1307,0x13589D58,0x13CE89CE,0x07CE1358),ivec4(0x9D5813CE,0x890789CE,0x13589D58,0x13CE07CE),ivec4(0x89CE1358,0x9D581307,0x13CE2614,0x9D26AF38),ivec4(0x0738AF26,0x9D149D26,0xAF07AF38,0xAF269D14),ivec4(0x9D260726,0xAF38AF26,0x9D149D07,0x9D26AF38),ivec4(0xAF269D14,0x07149D26,0xAF38AF26,0x9D079D14),ivec4(0x9D26AF38,0xAF260726,0x9D149D26,0xAF38AF07),ivec4(0xAF269D14,0x9D26AF38,0x0738AF26,0x4C3A283A),ivec4(0x4C074C5E,0x705E4C3A,0x283A073A,0x4C5E705E),ivec4(0x4C3A2807,0x283A4C5E,0x705E4C3A,0x073A283A),ivec4(0x4C5E705E,0x4C074C3A,0x283A4C5E,0x705E075E),ivec4(0x4C3A283A,0x4C5E7007,0x705E4C3A,0x283A4C5E),ivec4(0x075E705E,0x4C3A283A,0x4C034C5E,0x705E035E),ivec4(0x4C3A2807,0x283A4C5E,0x705E4C3A,0x073A283A),ivec4(0x4C5E705E,0x4C074C3A,0x283A4C5E,0x705E075E),ivec4(0x4C3A283A,0x4C5E7007,0x705E4C3A,0x283A4C5E),ivec4(0x075E705E,0x4C3A283A,0x4C074C5E,0x705E4C3A),ivec4(0x283A073A,0x4C5E705E,0x4C3A2804,0x283A4C5E),ivec4(0x7002705E,0x4C074C3A,0x283A4C5E,0x705E075E),ivec4(0x4C3A283A,0x4C5E7007,0x705E4C3A,0x283A4C5E),ivec4(0x075E705E,0x4C3A283A,0x4C074C5E,0x705E4C3A),ivec4(0x283A073A,0x4C5E705E,0x4C3A2807,0x283A4C5E),ivec4(0x705E4C3A,0x073A283A,0x4C5E705E,0x4C054C3A),ivec4(0x283A4C5E,0x015E7007,0x705E4C3A,0x283A4C5E),ivec4(0x075E705E,0x4C3A283A,0x4C074C5E,0x705E4C3A),ivec4(0x283A073A,0x4C5E705E,0x4C3A2802,0x283A4C04),ivec4(0x4C5E705E,0x4C074C3A,0x283A4C5E,0x4C080708),ivec4(0x4C084C08,0x4C084C07,0x4C084C08,0x4C084C08),ivec4(0x010882F9,0x82054C08,0x4C084C08,0x03084C08),ivec4(0xA3F9A3F8,0x82024C08,0x4C064C08,0x4C084C08),ivec4(0x09F909FF,0x4C06084C,0x084C084C,0x08010809),ivec4(0xF909EF82,0xF8A3EF82,0xF7D0064C,0x084C084C),ivec4(0x084C074C,0x084C084C,0x084C0803,0x084C0882),ivec4(0xF982034C,0x084C0805,0x084C084C,0x08A3F9A3),ivec4(0xF882FF4C,0x06084C08,0x4C084C08,0x010809F9),ivec4(0x09054C08,0x4C084C08,0x03084C08,0x09F909EF),ivec4(0x82F8A3EE,0x82F8D004,0x4C084C08,0x4C074C08),ivec4(0x4C084C08,0x4C080508,0x4C084C08,0x82F98201),ivec4(0x4C080708,0x4C084C08,0x4C08A3F8,0xA3F88205),ivec4(0x4C084C08,0x4C080308,0x4C0809F9,0x09034C08),ivec4(0x4C080508,0x4C084C08,0x09F909EE,0x82F8A3EF),ivec4(0x82F8D002,0x4C084C07,0x4C084C08,0x4C084C08),ivec4(0x07084C08,0x4C084C08,0x82F88206,0x4C084C08),ivec4(0x4C084C02,0x4C08A3F9,0xA3F88203,0x4C084C08),ivec4(0x05084C08,0x4C0809F9,0x09014C08,0x07084C08),ivec4(0x4C084C08,0x09F809EF,0x82F8A3EF,0x82F8D0FF),ivec4(0x4C06084C,0x084C084C,0x0807084C,0x084C084C),ivec4(0x084C024C,0x0882F982,0x044C084C,0x084C044C),ivec4(0x084C08A3,0xF9A3F882,0x014C0807,0x084C084C),ivec4(0x084C0809,0xF809064C,0x084C084C,0x084C024C),ivec4(0x0809F909,0xEF82F8A3,0xEE82F8D0,0x054C084C),ivec4(0x084C0807,0x084C084C,0x084C084C,0x044C084C),ivec4(0x0882F982,0x024C084C,0x064C084C,0x084C08A3),ivec4(0xF9A3F782,0x064C084C,0x084C084C,0x024C0809),ivec4(0xF909044C,0x084C084C,0x044C084C,0x0809F909),ivec4(0xEF82F7A3,0xEF82F8D0,0x034C084C,0x0807084C),ivec4(0x084C084C,0x084C064C,0x084C084C,0x0882F982),ivec4(0xFF4C0608,0x4C084C08,0x4C080108,0xA3F9A3F8),ivec4(0x82044C08,0x4C084C04,0x4C084C08,0x09F90902),ivec4(0x4C084C06,0x4C084C08,0x4C0809F9,0x09EE82F8),ivec4(0xA3EF82F8,0xD0014C08,0x07084C08,0x4C084C08),ivec4(0x4C074C08,0x4C084C08,0x4C080108,0x82F98205),ivec4(0x4C084C08,0x4C080308,0x4C08A3F9,0xA3F88202),ivec4(0x4C084C06,0x4C084C08,0x4C0809F9,0x09FF4C06),ivec4(0x084C084C,0x084C0801,0x0809F909,0xEF82F8A3),ivec4(0xEF82F7D0,0xFE04FF82,0xFE04FF82,0xFF04FF82),ivec4(0xFE040582,0x4C084C08,0x4C044C08,0x4C0826FF),ivec4(0x26FE13FF,0x2603134C,0x084C074C,0x084C084C),ivec4(0x084C0807,0x084C084C,0x084C0804,0xFE04FF82),ivec4(0xFF04FE82,0xFF04FF82,0xFE040182,0xD0FFD0FF),ivec4(0x68FED0FF,0x68FFD0FE,0x68FFD004,0x684C084C),ivec4(0x0805084C,0x084C08D0,0xFED0FF68,0xFFD00268),ivec4(0x4C080708,0x4C084C08,0x4C084C07,0x4C084C08),ivec4(0x4C084C08,0x0108D0FF,0xD0FF68FE,0xD0FF68FF),ivec4(0xD0FF68FE,0xD00168D0,0xFFD0FE68,0xFFD0FF68),ivec4(0xFFD0FE68,0xFFD00368,0x4C084C06,0x4C084C08),ivec4(0x4C088CFE,0x8CFF46FF,0x8C01464C,0x074C084C),ivec4(0x084C084C,0x0807084C,0x084C084C,0x084C024C),ivec4(0x0838FF38,0xFF9CFE38,0xFF9CFF38,0xFE9CFF38),ivec4(0x019C26FF,0x26FE13FF,0x26FF13FE,0x26FF13FF),ivec4(0x2602134C,0x0807084C,0x084C084C,0x0826FE26),ivec4(0xFF13FF26,0xFF13064C,0x084C084C,0x084C074C),ivec4(0x084C084C,0x084C0803,0x084C0826,0xFF26FE13),ivec4(0xFF26FF13,0xFF26FE13,0xFF260113,0xB8FEB8FF),ivec4(0xDCFFB8FF,0xDCFEB8FF,0xDCFFB801,0xDC4C074C),ivec4(0x084C084C,0x084C0801,0x0820FF20,0xFF10FE20),ivec4(0x06104C08,0x4C084C08,0x07084C08,0x4C084C08),ivec4(0x4C044C08,0x4C08B8FF,0xB8FEDCFF,0xB8FFDCFE),ivec4(0xB8FFDCFF,0xB801DCA0,0xFEA0FFD0,0xFFA0FED0),ivec4(0xFFA0FFD0,0xFFA0FFD0,0x064C084C,0x084C084C),ivec4(0x024C08A0,0xFFA0FFD0,0xFEA005D0,0x4C084C08),ivec4(0x4C074C08,0x4C084C08,0x4C080508,0x4C084C08),ivec4(0xA0FEA0FF,0xD0FFA0FF,0xD0FEA0FF,0xD0FFA001),ivec4(0xD010FE10,0xFF88FF10,0xFE88FF10,0xFF88FE10),ivec4(0x06884C08,0x4C084C08,0x03084C08,0x8CFF8CFE),ivec4(0x46FF8C04,0x464C084C,0x0807084C,0x084C084C),ivec4(0x084C064C,0x084C084C,0x0838FE38,0xFF9CFF38),ivec4(0xFE9CFF38,0xFF9CFF38,0xFF9CFE10,0xFF88FE10),ivec4(0xFF88FF10,0xFF88FE10,0x05884C08,0x4C084C04),ivec4(0x4C084C08,0x10FF10FE,0x88FF1003,0x884C084C),ivec4(0x074C084C,0x084C084C,0x0807084C,0x084C084C),ivec4(0x0810FE10,0xFF880010,0x00000000,0x00000000),\n//54280 Voice2 frequency (high byte)\nivec4(0xFF000301,0x00010005,0x00010001,0x0031FD31),ivec4(0x013231FF,0x31FD30FE,0x31013231,0xFE31FE30),ivec4(0xFD310234,0x3534FF34,0xFD33FE34,0x013534FE),ivec4(0x34FE33FD,0x34013534,0x01342701,0x2726FE26),ivec4(0xF927FE26,0xF927FF26,0xFB29012A,0x29FD2901),ivec4(0x2829FD29,0x012A29FE,0x29012829,0xFE29FA27),ivec4(0xFE26F927,0x011F1EFE,0x1EF91FFE,0x1EFF1FF9),ivec4(0x1DFF1CF7,0x1D011C1D,0xFB1DFE1F,0xFD1EF91F),ivec4(0xFE1EF91F,0x011E13EE,0x13021413,0x12FF12FF),ivec4(0x13FE1401,0x1312FE12,0x011314FF,0x14011312),ivec4(0xFE120113,0x14FF1401,0x1312FE12,0x011314FF),ivec4(0x14FF13FE,0x12011314,0xFE140113,0x12FF1201),ivec4(0x1314FE14,0x011312FF,0x12011314,0xFE140113),ivec4(0x12FF12FF,0x13FE1401,0x1514F814,0xFF15F714),ivec4(0x02151413,0xE613FD22,0xFB23FB22,0xFC23FB22),ivec4(0xF81D011C,0x1DF71D01,0x1C1DFD1D,0xFB290128),ivec4(0x29FD2901,0x2A29FD29,0x03282726,0x27FA27FE),ivec4(0x26FC27FB,0x1D011C1D,0xF81D011C,0x1DF91DFF),ivec4(0x1FFE1EF9,0x1FFE1EF9,0x1FFD1EF8,0x1AFE19F7),ivec4(0x1A031918,0x191A021A,0x1B1AFF1A,0x03191819),ivec4(0x1A011A1B,0x011B1A04,0x1A191819,0x1AFF1A01),ivec4(0x1B1A041A,0x1918191A,0xFF1A0534,0x37353432),ivec4(0x31073132,0x34353735,0x34320732,0x31323435),ivec4(0x37353407,0x34323132,0x34353735,0x07353432),ivec4(0x31323435,0x37073735,0x34323132,0x34350735),ivec4(0x37353432,0x31323407,0x34353735,0x34323132),ivec4(0x07323435,0x37353432,0x31073132,0x34686B6E),ivec4(0x6B680768,0x65626568,0x6B6E6B07,0x6B686562),ivec4(0x65686B6E,0x076E6B68,0x65626568,0x6B076B6E),ivec4(0x6B686562,0x65680768,0x6B6E6B68,0x65626507),ivec4(0x65686B6E,0x6B686562,0x07626568,0x6B6E6B68),ivec4(0x65076562,0x65686B6E,0x6B680368,0x65626503),ivec4(0x65686B6E,0x076E6B68,0x65626568,0x6B076B6E),ivec4(0x6B686562,0x65680768,0x6B6E6B68,0x65626507),ivec4(0x65686B6E,0x6B686562,0x07626568,0x6B6E6B68),ivec4(0x65076562,0x65686B6E,0x6B680768,0x65626568),ivec4(0x6B6E6B07,0x6B686562,0x65686B6E,0x046E6B68),ivec4(0x65620262,0x65680768,0x6B6E6B68,0x65626507),ivec4(0x65686B6E,0x6B686562,0x07626568,0x6B6E6B68),ivec4(0x65076562,0x65686B6E,0x6B680768,0x65626568),ivec4(0x6B6E6B07,0x6B686562,0x65686B6E,0x076E6B68),ivec4(0x65626568,0x6B076B6E,0x6B686562,0x65680568),ivec4(0x6B6E6B68,0x65016562,0x07626568,0x6B6E6B68),ivec4(0x65076562,0x65686B6E,0x6B680768,0x65626568),ivec4(0x6B6E6B07,0x6B686562,0x65686B6E,0x026E6B68),ivec4(0x04686562,0x65680768,0x6B6E6B68,0x65683E07),ivec4(0x3E683E68,0x3E683E68,0x07683E68,0x3E683E68),ivec4(0x3E013E0F,0xF90F0568,0x3E683E68,0x3E033E68),ivec4(0x3E0EF90E,0xF80F0268,0x3E680668,0x3E683E68),ivec4(0x3E0DF90D,0xFF68063E,0x683E683E,0x683E013E),ivec4(0x0DF90DEF,0x0FF80EF4,0x0F020E0D,0x0CFF0CFD),ivec4(0x0D020C0B,0x0AFE0A06,0x683E683E,0x683E6807),ivec4(0x683E683E,0x683E683E,0x033E683E,0x0FF90F03),ivec4(0x683E683E,0x053E683E,0x683E0EF9,0x0EF80FFF),ivec4(0x68063E68,0x3E683E68,0x3E013E0D,0xF90D0568),ivec4(0x3E683E68,0x3E033E68,0x3E0DF90D,0xEF0FF80E),ivec4(0xF40F020E,0x0D0CFE0C,0xFE0D020C,0x0B0AFE0A),ivec4(0x04683E68,0x3E680768,0x3E683E68,0x3E683E05),ivec4(0x3E683E68,0x3E0FF90F,0x01683E07,0x3E683E68),ivec4(0x3E683E0E,0xF80EF80F,0x05683E68,0x3E683E03),ivec4(0x3E683E0D,0xF90D0368,0x3E683E05,0x3E683E68),ivec4(0x3E0DF90D,0xEE0FF80E,0xF50F010E,0x0D010D0C),ivec4(0xFF0CFE0D,0xFF0C010B,0x0AFF0A02,0x683E6807),ivec4(0x683E683E,0x683E683E,0x073E683E,0x683E683E),ivec4(0x0FF80F06,0x683E683E,0x683E6802,0x683E0EF9),ivec4(0x0EF80F03,0x683E683E,0x053E683E,0x683E0DF9),ivec4(0x0D01683E,0x073E683E,0x683E683E,0x0DF80DEF),ivec4(0x0FF80EF4,0x0F020E0D,0x0CFF0CFD,0x0D020C0B),ivec4(0x0AFF0AFF,0x68063E68,0x3E683E68,0x3E073E68),ivec4(0x3E683E68,0x3E680268,0x3E0FF90F,0x04683E68),ivec4(0x3E680468,0x3E683E0E,0xF90EF80F,0x01683E07),ivec4(0x3E683E68,0x3E683E0D,0xF80D0668,0x3E683E68),ivec4(0x3E680268,0x3E0DF90D,0xEF0FF80E,0xF40F020E),ivec4(0x0D0CFE0C,0xFE0D020C,0x0B0AFE0A,0x05683E68),ivec4(0x3E683E07,0x3E683E68,0x3E683E68,0x04683E68),ivec4(0x3E0FF90F,0x02683E68,0x06683E68,0x3E683E0E),ivec4(0xF90EF70F,0x06683E68,0x3E683E68,0x02683E0D),ivec4(0xF90D0468,0x3E683E68,0x04683E68,0x3E0DF90D),ivec4(0xEF0FF70E,0xF50F020E,0x0D0CFE0C,0xFE0D010C),ivec4(0x0B010B0A,0xFF0A0368,0x3E683E07,0x3E683E68),ivec4(0x3E683E68,0x06683E68,0x3E683E0F,0xF90FFF68),ivec4(0x063E683E,0x683E683E,0x013E0EF9,0x0EF80F04),ivec4(0x683E683E,0x6804683E,0x683E0DF9,0x0D02683E),ivec4(0x6806683E,0x683E683E,0x0DF90DEE,0x0FF80EF5),ivec4(0x0FFF0E01,0x0D0CFF0C,0xFD0D020C,0x0B0AFF0A),ivec4(0x01683E07,0x3E683E68,0x3E683E68,0x07683E68),ivec4(0x3E683E68,0x3E013E0F,0xF90F0568,0x3E683E68),ivec4(0x3E033E68,0x3E0EF90E,0xF80F0268,0x3E680668),ivec4(0x3E683E68,0x3E0DF90D,0xFF68063E,0x683E683E),ivec4(0x683E013E,0x0DF90DEF,0x0FF80EF4,0x0F020E0D),ivec4(0x0CFF0CFD,0x0D020C0B,0x0AFE0AFE,0x1FFF0FFE),ivec4(0x1FFF0FFF,0x1FFF0FFE,0x1F050F68,0x3E683E68),ivec4(0x04683E68,0x3E34FF34,0xFE1AFF34,0x031A683E),ivec4(0x6807683E,0x683E683E,0x683E073E,0x683E683E),ivec4(0x683E1FFE,0x1FFF0FFF,0x1FFE0FFF,0x1FFF0FFE),ivec4(0x1F010F22,0xFF22FF11,0xFE22FF11,0xFF22FE11),ivec4(0xFF220411,0x683E683E,0x053E683E,0x683E22FE),ivec4(0x22FF11FF,0x22021168,0x3E073E68,0x3E683E68),ivec4(0x3E680768,0x3E683E68,0x3E683E01,0x3E22FF22),ivec4(0xFF11FE22,0xFF11FF22,0xFF11FE22,0x011122FF),ivec4(0x22FE11FF,0x22FF11FF,0x22FE11FF,0x22031168),ivec4(0x3E680668,0x3E683E68,0x3E3AFE3A,0xFF1DFF3A),ivec4(0x011D6807,0x683E683E,0x683E683E,0x073E683E),ivec4(0x683E683E,0x6802683E,0x31FF31FF,0x18FE31FF),ivec4(0x18FF31FE,0x18FF3101,0x1834FF34,0xFE1AFF34),ivec4(0xFF1AFE34,0xFF1AFF34,0x021A683E,0x073E683E),ivec4(0x683E683E,0x34FE34FF,0x1AFF34FF,0x1A06683E),ivec4(0x683E683E,0x6807683E,0x683E683E,0x683E033E),ivec4(0x683E34FF,0x34FE1AFF,0x34FF1AFF,0x34FE1AFF),ivec4(0x34011A41,0xFE41FF20,0xFF41FF20,0xFE41FF20),ivec4(0xFF410120,0x6807683E,0x683E683E,0x683E013E),ivec4(0x4EFF4EFF,0x27FE4E06,0x27683E68,0x3E683E07),ivec4(0x3E683E68,0x3E683E68,0x04683E68,0x3E41FF41),ivec4(0xFE20FF41,0xFF20FE41,0xFF20FF41,0x012045FE),ivec4(0x45FF22FF,0x45FE22FF,0x45FF22FF,0x45FF2206),ivec4(0x683E683E,0x683E6802,0x683E45FF,0x45FF22FE),ivec4(0x45052268,0x3E683E68,0x07683E68,0x3E683E68),ivec4(0x3E053E68,0x3E683E45,0xFE45FF22,0xFF45FF22),ivec4(0xFE45FF22,0xFF450122,0x27FE27FF,0x13FF27FE),ivec4(0x13FF27FF,0x13FE2706,0x13683E68,0x3E683E03),ivec4(0x3E683E3A,0xFF3AFE1D,0xFF3A041D,0x683E683E),ivec4(0x073E683E,0x683E683E,0x6806683E,0x683E683E),ivec4(0x31FE31FF,0x18FF31FE,0x18FF31FF,0x18FF31FF),ivec4(0x18FE27FF,0x13FE27FF,0x13FF27FF,0x13FE2705),ivec4(0x13683E68,0x3E680468,0x3E683E27,0xFF27FE13),ivec4(0xFF270313,0x683E6807,0x683E683E,0x683E683E),ivec4(0x073E683E,0x683E683E,0x27FE27FF,0x13002700),\n//54281 Voice2 pulse width (low byte)\nivec4(0xF60002A0,0xD0000700,0x306090C0,0xF0205007),ivec4(0x5080B0E0,0x104070A0,0x07A0D000,0x306090C0),ivec4(0xF007F0A0,0xD0003060,0x90C007C0,0xF0205080),ivec4(0xB0E01007,0x104070A0,0xD0003060,0x076090C0),ivec4(0xF0A0D000,0x30073060,0x90C0F020,0x50800780),ivec4(0xB0E01040,0x70A0D007,0xD0003060,0x90C0F0A0),ivec4(0x07A0D000,0x306090C0,0xF007F020,0x5080B0E0),ivec4(0x10400740,0x70A0D000,0x30609007,0x90C0F0A0),ivec4(0xD0003060,0x076090C0,0xF0205080,0xB007B0E0),ivec4(0x104070A0,0xD0000700,0x306090C0,0xF0205007),ivec4(0x5080B0E0,0x104070A0,0x07A0D000,0x306090C0),ivec4(0xF007F020,0x5080B0E0,0x10400740,0x70A0D000),ivec4(0x30609007,0x90C0F0A0,0xD0003060,0x076090C0),ivec4(0xF0205080,0xB007B0E0,0x104070A0,0xD0000700),ivec4(0x306090C0,0xF0A0D007,0xD0003060,0x90C0F020),ivec4(0x07205080,0xB0E01040,0x700770A0,0xB0C0D0E0),ivec4(0xF0000700,0x10203040,0x50607007,0x708090A0),ivec4(0xB0C0D0E0,0x07E0F000,0x10203040,0x50075060),ivec4(0x708090A0,0xB0C007C0,0xD0E0F000,0x10203007),ivec4(0x30405060,0x708090A0,0x07A0B0C0,0xD0E0F000),ivec4(0x10071020,0x30405060,0x70800780,0x90A0D000),ivec4(0x30609007,0x90C0F020,0x5080B0E0,0x07E01040),ivec4(0x70A0D000,0x30073060,0x90C0F0A0,0xD0000700),ivec4(0x306090C0,0xF0205007,0x5080B0E0,0x104070A0),ivec4(0x07A0D000,0x306090C0,0xF007F0A0,0xD0003060),ivec4(0x90C007C0,0xF0205080,0xB0E01007,0x104070A0),ivec4(0xD0003060,0x076090C0,0xF0A0D000,0x30073060),ivec4(0x90C0F020,0x50800780,0xB0E01040,0x70A0D007),ivec4(0xD0003060,0x90C0F0A0,0x07A0D000,0x306090C0),ivec4(0xF007F020,0x5080B0E0,0x10400740,0x70A0D000),ivec4(0x30609007,0x90C0F020,0x5080B0E0,0x07E01040),ivec4(0x70A0D000,0x30073060,0x90C0F020,0x50800780),ivec4(0xB0E01040,0x70A0D007,0xD0003060,0x90C0F0A0),ivec4(0x07A0D000,0x306090C0,0xF007F020,0x5080B0E0),ivec4(0x10400740,0x70A0D000,0x30609007,0x90C0F0A0),ivec4(0xD0003060,0x076090C0,0xF0205080,0xB007B0E0),ivec4(0x104070A0,0xB0C007C0,0xD0E0F000,0x10203007),ivec4(0x30405060,0x708090A0,0x07A0B0C0,0xD0E0F000),ivec4(0x10071020,0x30405060,0x70800780,0x90A0B0C0),ivec4(0xD0E0F007,0xF0001020,0x30405060,0x07607080),ivec4(0x90A0B0C0,0xD007D0E0,0xF0001020,0x30400740),ivec4(0x50607080,0x90A0B007,0xB0C0D0E0,0xF0001020),ivec4(0x07203040,0x50607080,0x900790A0,0xB0C0D0E0),ivec4(0xF0000700,0x10203040,0x50607007,0x708090A0),ivec4(0xB0C0D0E0,0x07E0F000,0x10203040,0x50075060),ivec4(0x708090A0,0xB0C007C0,0xD0E0F000,0x10203007),ivec4(0x30405060,0x708090A0,0x07A0B0C0,0xD0E0F000),ivec4(0x10071020,0x30405060,0x70800780,0x90A0B0C0),ivec4(0xD0E0F007,0xF0001020,0x30405060,0x07607080),ivec4(0x90A0B0C0,0xD007D0E0,0xF0001020,0x30400740),ivec4(0x50607080,0x90A0B007,0xB0C0D0E0,0xF0001020),ivec4(0x07203040,0x50607080,0x900790A0,0xB0C0D0E0),ivec4(0xF0000700,0x10203040,0x50607007,0x708090A0),ivec4(0xB0C0D0E0,0x07E0F000,0x10203040,0x50075060),ivec4(0x708090A0,0xB0C007C0,0xD0E0F000,0x10203007),ivec4(0x30405060,0x708090A0,0x07A0B0C0,0xD0E0F000),ivec4(0x10071020,0x30405060,0x70800780,0x90A0B0C0),ivec4(0xD0E0F007,0xF0001020,0x30405060,0x07607080),ivec4(0x90A0B0C0,0xD007D0E0,0xF0001020,0x30400740),ivec4(0x50607080,0x90A0B007,0xB0C0D0E0,0xF0001020),ivec4(0x07203040,0x50607080,0x900790A0,0xB0C0D0E0),ivec4(0xF0000700,0x10203040,0x50607007,0x708090A0),ivec4(0xB0C0D0E0,0x06E0F000,0x10203000,0xEF000680),ivec4(0xC0004080,0xC0000200,0x4000F900,0x0480C000),ivec4(0x40800780,0xC0004080,0xC0004005,0x4080C000),ivec4(0x4000F900,0x0180C007,0xC0004080,0xC0004000),ivec4(0xF8000680,0xC0004080,0xC0000700,0x4080C000),ivec4(0x4080C007,0xC0004080,0xC0004080,0x0780C000),ivec4(0x4080C000,0x40074080,0xC0004080,0xC0000600),ivec4(0x4080C000,0x4000DD00,0x0480C000,0x40800480),ivec4(0xC0004000,0xF9000280,0xC0000700,0x4080C000),ivec4(0x4080C007,0xC0004080,0xC0004000,0xF8000680),ivec4(0xC0004080,0xC0000200,0x4000F900,0x0480C000),ivec4(0x40800780,0xC0004080,0xC0004007,0x4080C000),ivec4(0x4080C000,0x07004080,0xC0004080,0xC007C000),ivec4(0x4080C000,0x40800780,0xC0004080,0xC0004001),ivec4(0x4000DE00,0x0280C000,0x06004080,0xC0004000),ivec4(0xF900FF80,0x06C00040,0x80C00040,0x074080C0),ivec4(0x004080C0,0x00020040,0x00F90004,0x80C00040),ivec4(0x800480C0,0x004000F9,0x000280C0,0x00070040),ivec4(0x80C00040,0x80C007C0,0x004080C0,0x00408007),ivec4(0x80C00040,0x80C00040,0x074080C0,0x004080C0),ivec4(0x00070040,0x80C00040,0x80C003C0,0x004000DE),ivec4(0x00FF8006,0xC0004080,0xC0004001,0x4000F900),ivec4(0x0580C000,0x4080C007,0xC0004080,0xC0004080),ivec4(0x0480C000,0x4000F900,0x0280C000,0x06004080),ivec4(0xC0004000,0xF900FF80,0x06C00040,0x80C00040),ivec4(0x074080C0,0x004080C0,0x00070040,0x80C00040),ivec4(0x80C007C0,0x004080C0,0x00408007,0x80C00040),ivec4(0x80C00040,0x054080C0,0x004000DD,0x000580C0),ivec4(0x004080C0,0x03C00040,0x00F90003,0x80C00040),ivec4(0x074080C0,0x004080C0,0x00060040,0x80C00040),ivec4(0x00F900FF,0x8006C000,0x4080C000,0x40014000),ivec4(0xF9000580,0xC0004080,0xC007C000,0x4080C000),ivec4(0x40800780,0xC0004080,0xC0004007,0x4080C000),ivec4(0x4080C000,0x07004080,0xC0004080,0xC007C000),ivec4(0x4080C000,0x4000DD00,0x0380C000,0x40054080),ivec4(0xC0004000,0xF9000180,0xC007C000,0x4080C000),ivec4(0x40800780,0xC0004080,0xC0004001,0x4000F900),ivec4(0x0580C000,0x4080C003,0xC0004000,0xF9000380),ivec4(0xC0004007,0x4080C000,0x4080C000,0x07004080),ivec4(0xC0004080,0xC007C000,0x4080C000,0x40800780),ivec4(0xC0004080,0xC0004007,0x4080C000,0x4080C000),ivec4(0x02004000,0xDE000180,0xC007C000,0x4080C000),ivec4(0x4000F800,0x0680C000,0x4080C000,0x07004080),ivec4(0xC0004080,0xC003C000,0x4000F900,0x0380C000),ivec4(0x40054080,0xC0004000,0xF9000180,0xC007C000),ivec4(0x4080C000,0x40800780,0xC0004080,0xC0004007),ivec4(0x4080C000,0x4080C000,0x07004080,0xC0004080),ivec4(0xC007C000,0x4080C000,0x40800480,0xC0004000),ivec4(0xDD000680,0xC0004080,0xC0000200,0x4000F900),ivec4(0x0480C000,0x40800780,0xC0004080,0xC0004005),ivec4(0x4080C000,0x4000F900,0x0180C007,0xC0004080),ivec4(0xC0004000,0xF8000680,0xC0004080,0xC0000700),ivec4(0x4080C000,0x4080C007,0xC0004080,0xC0004080),ivec4(0x0780C000,0x4080C000,0x40074080,0xC0004080),ivec4(0xC0000600,0x4080C000,0x4000EE00,0x054080C0),ivec4(0x00408007,0x80C00040,0x80C00040,0x034080C0),ivec4(0x00F80002,0x4080C005,0xC0004080,0xC000EE00),ivec4(0x064080C0,0x004080C0,0x07C00040,0x80C00040),ivec4(0x800780C0,0x004080C0,0x00400740,0x80C00040),ivec4(0x80C00004,0x004080C0,0x00F80001,0x40800680),ivec4(0xC0004080,0xC000EE00,0x054080C0,0x00408007),ivec4(0x80C00040,0x80C00040,0x074080C0,0x004080C0),ivec4(0x00070040,0x80C00040,0x80C005C0,0x004080C0),ivec4(0x00F800FF,0x400680C0,0x004080C0,0x00EE0004),ivec4(0x4080C000,0x40074080,0xC0004080,0xC0000700),ivec4(0x4080C000,0x4080C007,0xC0004080,0xC0004080),ivec4(0x0680C000,0x4080C000,0xF7000640,0x80C00040),ivec4(0x80C001C0,0x00EF0003,0x4080C000,0x07004080),ivec4(0xC0004080,0xC007C000,0x4080C000,0x40800780),ivec4(0xC0004080,0xC0004007,0x4080C000,0x4080C000),ivec4(0xF7000540,0x80C00040,0x800280C0,0x00EF0002),ivec4(0x4080C007,0xC0004080,0xC0004080,0x0780C000),ivec4(0x4080C000,0x40074080,0xC0004080,0xC0000700),ivec4(0x4080C000,0x4080C001,0xC000F800,0x044080C0),ivec4(0x00400340,0x80C000EF,0x00014080,0x0780C000),ivec4(0x4080C000,0x40074080,0xC0004080,0xC0000700),ivec4(0x4080C000,0x4080C007,0xC0004080,0xC0004080),ivec4(0x0280C000,0xF8000340,0x80C00004,0x004080C0),ivec4(0x00EF00FF,0x400680C0,0x004080C0,0x00070040),ivec4(0x80C00040,0x80C007C0,0x004080C0,0x00408007),ivec4(0x80C00040,0x80C00040,0x034080C0,0x00F80002),ivec4(0x4080C005,0xC0004080,0xC000EE00,0x044080C0),ivec4(0x00400000,0x00000000,0x00000000,0x00000000),\n//54282 Voice2 pulse width (high byte/control bits)\nivec4(0xF608FF00,0xFA01FB02,0xFB03FA04,0xFF00FA01),ivec4(0xFC02FB03,0xFA04FF00,0xFA01FB02,0xFB03FB04),ivec4(0xFE00FA01,0xFC02FB03,0xFA04FF00,0xFA01FB02),ivec4(0xFE03FF00,0xFA01FB02,0xFE03FE00,0xFA01FC02),ivec4(0xFB03FA04,0xFF00FA01,0xFB02FC03,0xFA04FE00),ivec4(0xFB01FB02,0xFD03FB09,0xEE0AEF0B,0xEF0CF50D),ivec4(0xFF00FA01,0xFB02FC03,0xFA04FF00,0xFA01FB02),ivec4(0xFB03FA04,0xFF00FA01,0xFC02FB03,0xFA04FF00),ivec4(0xFA01FB02,0xFB03FB04,0xFE00FA01,0xFC02FD03),ivec4(0xFF00FA01,0xFB02FE03,0xFF00FA01,0xFB02FB03),ivec4(0xFB04FE00,0xFA01FC02,0xFB03FA04,0xFF00FA01),ivec4(0xFB02FE03,0xFA09EF0A,0xF50BFA09,0xEF0AEF0B),ivec4(0xEF0CF50D,0xFA09EF0A,0xEF0BEE0C,0xF60DFA09),ivec4(0xEF0AEF0B,0xEE0CF60D,0xFA09EF0A,0xEE0BEF0C),ivec4(0xF60DFA09,0xEF0AF50B,0xFA09FD0A,0xEE08FF01),ivec4(0xFD02FE03,0xF808FF01,0xFC02FF03,0xFF01FC02),ivec4(0xFF03F808,0xFE01FD02,0xFF03F708,0xFF01FD02),ivec4(0xFE03FF01,0xFC02FD03,0xFC04FF05,0xFF01FC02),ivec4(0xFF03FF01,0xFC02FF03,0xDC08FF01,0xFC02FF03),ivec4(0xF808FF01,0xFC02FF03,0xFE01FD02,0xFF03F708),ivec4(0xFF01FD02,0xFE03F808,0xFF01FC02,0xFF03FF01),ivec4(0xFC02FD03,0xFC04FF05,0xFE01FD02,0xFF03FE01),ivec4(0xFD02FE03,0xDD08FF01,0xFC02FF03,0xF808FE01),ivec4(0xFD02FE03,0xFF01FD02,0xFE03F808,0xFF01FC02),ivec4(0xFF03F808,0xFF01FC02,0xFF03FE01,0xFD02FC03),ivec4(0xFD04FE05,0xFF01FD02,0xFE03FF01,0xFC02FF03),ivec4(0xDD08FE01,0xFD02FE03,0xF808FF01,0xFC02FF03),ivec4(0xFF01FC02,0xFF03F808,0xFF01FC02,0xFF03F808),ivec4(0xFE01FD02,0xFE03FF01,0xFD02FC03,0xFC04FF05),ivec4(0xFF01FC02,0xFF03FF01,0xFC02FF03,0xDC08FF01),ivec4(0xFC02FF03,0xF808FF01,0xFC02FF03,0xFF01FC02),ivec4(0xFF03F808,0xFE01FD02,0xFE03F808,0xFF01FC02),ivec4(0xFF03FF01,0xFC02FD03,0xFC04FF05,0xFF01FC02),ivec4(0xFF03FE01,0xFD02FF03,0xDC08FF01,0xFC02FF03),ivec4(0xF808FE01,0xFD02FF03,0xFE01FD02,0xFE03F808),ivec4(0xFF01FC02,0xFF03F808,0xFF01FC02,0xFF03FF01),ivec4(0xFC02FC03,0xFD04FF05,0xFE01FD02,0xFE03FF01),ivec4(0xFD02FE03,0xDD08FE01,0xFD02FF03,0xF708FF01),ivec4(0xFD02FE03,0xFF01FC02,0xFF03F808,0xFF01FC02),ivec4(0xFF03F808,0xFE01FD02,0xFF03FE01,0xFD02FC03),ivec4(0xFD04FE05,0xFF01FC02,0xFF03FF01,0xFC02FF03),ivec4(0xDC08FF01,0xFD02FE03,0xF808FF01,0xFC02FF03),ivec4(0xFF01FC02,0xFF03F808,0xFE01FD02,0xFF03F708),ivec4(0xFF01FD02,0xFE03FF01,0xFC02FD03,0xFC04FF05),ivec4(0xFF01FC02,0xFF03FF01,0xFC02FF03,0xEE08FD05),ivec4(0xFC06FD07,0xF308FC05,0xFD06EF08,0xFC05FC06),ivec4(0xFD07FC08,0xFD05FC06,0xFD07F308,0xFC05FD06),ivec4(0xEE08FD05,0xFC06FD07,0xFC08FD05,0xFC06FC07),ivec4(0xF408FC05,0xFD06EE08,0xFD05FC06,0xFD07FC08),ivec4(0xFC05FD06,0xFC07F408,0xFC05FC06,0xEF08FD05),ivec4(0xFC06FC07,0xFD08FC05,0xFD06FC07,0xF308FD05),ivec4(0xFC06EF08,0xFC05FD06,0xFC07FD08,0xFC05FD06),ivec4(0xFC07F308,0xFD05FC06,0xEF08FC05,0xFD06FC07),ivec4(0xFD08FC05,0xFC06FD07,0xF308FD05,0xFC06EF08),ivec4(0xFC05FD06,0xFC07FC08,0xFD05FC06,0xFD07F308),ivec4(0xFC05FD06,0xEF08FC05,0xFF060000,0x00000000),\n//54283 Voice2 control register\nivec4(0xF614E841,0xFE40E841,0xFF40E841,0xFF40E741),ivec4(0xFF40F141,0xFF40F141,0xFF40E741,0xFF40E841),ivec4(0xFF40A841,0xFE40E841,0xFF40E841,0xFE40E841),ivec4(0xFF40E841,0xFF40F141,0xFE40F141,0xFF40E841),ivec4(0xFF40E741,0xFF408141,0xB8418140,0xBF400141),ivec4(0x80018040,0xFC40FF41,0x018040FB,0x40024180),ivec4(0x40FB4002,0x418040FB,0x40024180,0x40FB4002),ivec4(0x418040FB,0x40024180,0x40FB4001,0x41800180),ivec4(0x40FC40FF,0x41018040,0xFB400241,0x8040FB40),ivec4(0x02418040,0xF2400241,0x8040FB40,0x02418040),ivec4(0xFB400141,0x80018040,0xFC40FF41,0x018040FB),ivec4(0x40024180,0x40FB4002,0x418040FB,0x40024180),ivec4(0x40FB4002,0x418040FB,0x40024180,0x40FB4001),ivec4(0x41800180,0x40FC40FF,0x41018040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400241,0x8040FB40),ivec4(0x02418040,0xF2400141,0x80018040,0xFC40FF41),ivec4(0x018040FB,0x40024180,0x40FB4002,0x418040FB),ivec4(0x40024180,0x40FB4002,0x418040FB,0x40024180),ivec4(0x40FB4001,0x41800180,0x40FC40FF,0x41018040),ivec4(0xFB400241,0x8040FB40,0x02418040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400241,0x8040FB40),ivec4(0x01418001,0x8040F240,0x02418040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400241,0x8040FB40),ivec4(0x02418040,0xFB400141,0x80018040,0xFC40FF41),ivec4(0x018040FB,0x40024180,0x40FB4002,0x418040FB),ivec4(0x40024180,0x40FB4002,0x418040FB,0x40024180),ivec4(0x40FB4001,0x41800180,0x40FC40FF,0x41018040),ivec4(0xFB400241,0x8040F240,0x02418040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400141,0x80018040),ivec4(0xFC40FF41,0x018040FB,0x40024180,0x40FB4002),ivec4(0x418040FB,0x40024180,0x40FB4002,0x418040FB),ivec4(0x40024180,0x40FB4001,0x41800180,0x40FC40FF),ivec4(0x41018040,0xFB400241,0x8040FB40,0x02418040),ivec4(0xFB400241,0x8040F240,0x02418040,0xFB400141),ivec4(0x80018040,0xFC40FF41,0x018040FB,0x40024180),ivec4(0x40FB4002,0x418040FB,0x40024180,0x40FB4002),ivec4(0x418040FB,0x40024180,0x40FB4001,0x41800180),ivec4(0x40FC40FF,0x41018040,0xFB400241,0x8040FB40),ivec4(0x02418040,0xFB400241,0x8040FB40,0x02418040),ivec4(0xFB400241,0x8040F240,0xFF410180,0x40FB4002),ivec4(0x418040FB,0x40024180,0x40FB4002,0x418040FB),ivec4(0x40024180,0x40FB4002,0x418040FB,0x40014180),ivec4(0x018040FC,0x40FF4101,0x8040FB40,0x02418040),ivec4(0xFB400241,0x8040FB40,0x02418040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400141,0x80018040),ivec4(0xFC40FF41,0x018040F2,0x40024180,0x40FB4002),ivec4(0x418040FB,0x40024180,0x40FB4002,0x418040FB),ivec4(0x40014180,0x018040FC,0x40FF4101,0x8040FB40),ivec4(0x02418040,0xFB400241,0x8040FB40,0x02418040),ivec4(0xFB400241,0x8040FB40,0x02418040,0xFB400141),ivec4(0x80018040,0xFC40FF41,0x018040FB,0x40024180),ivec4(0x40FB4002,0x418040F2,0x40024180,0x40FB4002),ivec4(0x418040FB,0x40014180,0x018040FC,0x40FF4101),ivec4(0x8040FB40,0x02418040,0xF2400241,0x8040FB40),ivec4(0x02418040,0xFB400241,0x8040FB40,0x01418001),ivec4(0x8040FC40,0xFF410180,0x40F24002,0x418040F2),ivec4(0x40024180,0x40FB4002,0x418040FB,0x40014180),ivec4(0x018040FC,0x40FF4101,0x8040FB40,0x02418040),ivec4(0xF2400241,0x8040F240,0x02418040,0xFB400141),ivec4(0x80018040,0xFC40FF41,0x018040FB,0x40024180),ivec4(0x40FB4002,0x418040F2,0x40024180,0x40F24001),ivec4(0x41800180,0x40FC40FF,0x41018040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400241,0x8040F240),ivec4(0x02418040,0xF240FF41,0x018040FB,0x40024180),ivec4(0x40FB4002,0x418040FB,0x40024180,0x40FB4002),ivec4(0x418040F2,0x40014180,0x018040F2,0x40024180),ivec4(0x40FB4002,0x418040FB,0x40024180,0x40FB4002),ivec4(0x418040FB,0x40024180,0x40F240FF,0x41018040),ivec4(0xF2400241,0x8040FB40,0x02418040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400141,0x80018040),ivec4(0xF2400241,0x8040F240,0x02418040,0xFB400241),ivec4(0x8040FB40,0x02418040,0xFB400141,0x80018040),ivec4(0xFC40FF41,0x018040FE,0x40000000,0x00000000),\n//54284 Voice2 attack/decay\n  //Removed as its redundant due to baked amps\n//54285 Voice2 sustain/release\n  //Removed as its redundant due to baked amps\n//54286 Voice3 frequency (low byte)\nivec4(0xFF010327,0x01380104,0x0138004B,0x00020001),ivec4(0x5F075F01,0x5F167316,0x73270727,0x38E03890),ivec4(0xE840E807,0xE89038E0,0x88E03890,0x0790E840),ivec4(0xE89038E0,0x880788E0,0x389026E0,0x3DE007E0),ivec4(0x8326C96C,0xC9268307,0x83E03DE0,0x8326C96C),ivec4(0x076CC926,0x83E03DE0,0x10071056,0x10CA84CA),ivec4(0x10560756,0x9CE29C56,0x10CA8407,0x84CA1056),ivec4(0x9CE29C56,0x075610CA,0x5ECC155E,0xA707A7F0),ivec4(0x39F0A75E,0x15CC07CC,0x155EA7F0,0x39F0A707),ivec4(0xA75E15CC,0x155E1056,0x07569CE2,0x9C5610CA),ivec4(0x840784CA,0x10569CE2,0x9C560156,0x040504CD),ivec4(0x96CD043B,0x073B72A9,0x723B04CD,0x960796CD),ivec4(0x04467AAE,0xE2AE07AE,0x7A4612DE,0x12467A07),ivec4(0x7AAEE2AE,0x7A4612DE,0x07DE1246,0x7AAEE204),ivec4(0x7207723B,0x04CD96CD,0x043B073B,0x72A9723B),ivec4(0x04CD9607,0x96CD043B,0x72A9723B,0x073B0488),ivec4(0x65426588,0xAB07ABCE,0xF1CEAB88,0x65420742),ivec4(0x6588AB88,0xA2158807,0x88FB6EFB,0x8815A215),ivec4(0x071588FB,0x6EFB8815,0xA207A215,0x88FB6EFB),ivec4(0x88150715,0xA21588FB,0x6EFB8807,0x8815A215),ivec4(0x88FB6EFB,0x07FB8815,0xA21588FB,0x6E076EFB),ivec4(0x8815A215,0x88FB07FB,0x6EFB8815,0xA2158807),ivec4(0x88FB6EFB,0x88AFD3F7,0x07F71BF7,0xD3AF8B67),ivec4(0x8B078BAF,0xD3F71BF7,0xD3AF07AF,0x8B678BAF),ivec4(0xD3F71B07,0x1B88CEAB,0x88654265,0x076588AB),ivec4(0xCEF1CEAB,0x88078865,0x426588AB,0xCEF107F1),ivec4(0xCEAB88D0,0x92549207,0x92D00E4C,0x8A4C0ED0),ivec4(0x07D09254,0x92D00E4C,0x8A078A4C,0x0ED09254),ivec4(0x9246FF46,0x057AAEE2,0xAE7A4607,0x4612DE12),ivec4(0x467AAEE2,0x07E2AE7A,0x4612DE12,0x4607467A),ivec4(0xAE5E39F0,0xA75E075E,0x15CC155E,0xA7F03907),ivec4(0x39F0A75E,0x151084CA,0x07CA1056,0x9CE29C56),ivec4(0x100710CA,0x84CA1056,0x9C460746,0xE2AE7A46),ivec4(0x12DE1207,0x12467AAE,0xE2AE7A46,0x074612DE),ivec4(0x12467AAE,0xE203E2AE,0x7A040304,0xCD96CD07),ivec4(0xCD043B72,0xA9723B04,0x0704CD96,0xCD043B72),ivec4(0xA907A972,0x3B04CD96,0x13E507E5,0x13416F9D),ivec4(0x6F411307,0x13E5B7E5,0x13416F9D,0x079D13CE),ivec4(0x13589D58,0x130713CE,0x89CE1358,0x9D580758),ivec4(0x13CE89CE,0x13589D07,0x9D5813CE,0x89CE1358),ivec4(0x07589D58,0x13CE2614,0x9D079D26,0xAF38AF26),ivec4(0x9D140714,0x9D26AF38,0xAF269D07,0x9D149D26),ivec4(0xAF38AF26,0x07269D14,0x9D26AF38,0xAF07AF26),ivec4(0x9D149D26,0xAF380738,0xAF269D14,0x9D26AF07),ivec4(0xAF38AF26,0x9D149D26,0x0726AF38,0xAF269D14),ivec4(0x9D079D26,0xAF38AF26,0x4C3A073A,0x283A4C5E),ivec4(0x705E4C07,0x4C3A283A,0x4C5E705E,0x075E4C3A),ivec4(0x283A4C5E,0x7007705E,0x4C3A283A,0x4C5E075E),ivec4(0x705E4C3A,0x283A4C07,0x4C5E705E,0x4C3A283A),ivec4(0x073A4C5E,0x705E4C3A,0x2807283A,0x4C5E705E),ivec4(0x4C3A063A,0x283A4C5E,0x705EFF5E,0x064C3A28),ivec4(0x3A4C5E70,0x07705E4C,0x3A283A4C,0x5E075E70),ivec4(0x5E4C3A28,0x3A4C074C,0x5E705E4C,0x3A283A07),ivec4(0x3A4C5E70,0x5E4C3A28,0x07283A4C,0x5E705E4C),ivec4(0x3A073A28,0x3A4C5E70,0x5E4C074C,0x3A283A4C),ivec4(0x5E705E07,0x5E4C3A28,0x3A4C5E70,0xFF70055E),ivec4(0x4C3A283A,0x4C074C5E,0x705E4C3A,0x283A073A),ivec4(0x4C5E705E,0x4C3A2807,0x283A4C5E,0x705E4C3A),ivec4(0x073A283A,0x4C5E705E,0x4C074C3A,0x283A4C5E),ivec4(0x705E075E,0x4C3A283A,0x4C5E7007,0x705E4C3A),ivec4(0x283A4C5E,0x075E705E,0x4C3A283A,0x4C014C5E),ivec4(0x055E705E,0x4C3A2807,0x283A4C5E,0x705E4C3A),ivec4(0x073A283A,0x4C5E705E,0x4C074C3A,0x283A4C5E),ivec4(0x705E065E,0x4C3A283A,0x4C42F942,0xF7850641),ivec4(0xC841C841,0xC8410241,0xC842F942,0xF885F842),ivec4(0x0241C841,0x0641C841,0xC841C885,0xF985F742),ivec4(0xF8850541,0xC841C841,0xC803C841,0xC842F942),ivec4(0xF885F842,0x0141C807,0xC841C841,0xC841C885),ivec4(0xF885F85A,0xF8B40441,0xC841C841,0x0441C841),ivec4(0xC85AF95A,0xF8B4F85A,0xFF4106C8,0x41C841C8),ivec4(0x41C801C8,0xB4F9B4F8,0x5AF8B403,0x41C841C8),ivec4(0x05C841C8,0x41C85AF9,0x5AF8B4F7,0x5A0641C8),ivec4(0x41C841C8,0x410241C8,0xB4F9B4F8,0xE2F8C402),ivec4(0x41C84106,0x41C841C8,0x41C8E2F9,0xE2F7C4F8),ivec4(0xE20541C8,0x41C841C8,0x03C841C8,0xC4F9C4F8),ivec4(0xE2F8C401,0x41C807C8,0x41C841C8,0x41C8E2F8),ivec4(0xE2F8C4F8,0xE20441C8,0x41C84104,0x41C841C8),ivec4(0xC4F9C4F8,0x42F885FF,0x4106C841,0xC841C841),ivec4(0xC801C842,0xF942F885,0xF8420341,0xC841C805),ivec4(0xC841C841,0xC885F985,0xF842F785,0x0641C841),ivec4(0xC841C841,0x0241C842,0xF942F885,0xF8420241),ivec4(0xC8410641,0xC841C841,0xC885F985,0xF742F885),ivec4(0x0541C841,0xC841C803,0xC841C842,0xF942F885),ivec4(0xF8420141,0xC807C841,0xC841C841,0xC885F885),ivec4(0xF842F885,0x0441C841,0xC8410441,0xC841C842),ivec4(0xF942F885,0xF842FF41,0x06C841C8,0x41C841C8),ivec4(0x01C885F9,0x85F85AF8,0xB40341C8,0x41C805C8),ivec4(0x41C841C8,0x5AF95AF8,0xB4F75A06,0x41C841C8),ivec4(0x41C84102,0x41C8B4F9,0xB4F85AF8,0xB40241C8),ivec4(0x410641C8,0x41C841C8,0x5AF95AF7,0xB4F85A05),ivec4(0x41C841C8,0x41C803C8,0x41C8B4F9,0xB4F8E2F8),ivec4(0xC40141C8,0x07C841C8,0x41C841C8,0xE2F8E2F8),ivec4(0xC4F8E204,0x41C841C8,0x410441C8,0x41C8C4F9),ivec4(0xC4F8E2F8,0xC4FF4106,0xC841C841,0xC841C801),ivec4(0xC8E2F9E2,0xF8C4F8E2,0x0341C841,0xC805C841),ivec4(0xC841C8C4,0xF9C4F842,0xF7850641,0xC841C841),ivec4(0xC8410241,0xC842F942,0xF885F842,0x0241C841),ivec4(0x0641C841,0xC841C885,0xF985F742,0xF8850541),ivec4(0xC841C841,0xC803C841,0xC842F942,0xF885F842),ivec4(0x0141C807,0xC841C841,0xC841C885,0xF885F842),ivec4(0xF8850441,0xC841C841,0x0441C841,0xC842F942),ivec4(0xF885F842,0xFF4106C8,0x41C841C8,0x41C801C8),ivec4(0x85F985F8,0x5AF8B403,0x41C841C8,0x05C841C8),ivec4(0x41C85AF9,0x5AF8B4F7,0x5A0641C8,0x41C841C8),ivec4(0x410241C8,0xB4F9B4F8,0x5AF8B402,0x41C84106),ivec4(0x41C841C8,0x41C85AF9,0x5AF7B4F8,0x5A0541C8),ivec4(0x41C841C8,0x03C841C8,0xB4F9B4F8,0x42F88501),ivec4(0x41C807C8,0x41C841C8,0x41C842F8,0x42F885F8),ivec4(0x420441C8,0x41C84104,0x41C841C8,0x85F985F8),ivec4(0x42F885FF,0x4106C841,0xC841C841,0xC801C842),ivec4(0xF942F885,0xF8420341,0xC841C805,0xC841C841),ivec4(0xC885F985,0xF85AF7B4,0x0641C841,0xC841C841),ivec4(0x0241C85A,0xF95AF8B4,0xF85A0241,0xC8410641),ivec4(0xC841C841,0xC8B4F9B4,0xF7E2F8C4,0x0541C841),ivec4(0xC841C803,0xC841C8E2,0xF9E2F8C4,0xF8E20141),ivec4(0xC807C841,0xC841C841,0xC8C4F8C4,0xF842F885),ivec4(0x0441C841,0xC8410441,0xC841C842,0xF942F885),ivec4(0xF842FF41,0x04C841C8,0x41C80000,0x00000000),\n//54287 Voice3 frequency (high byte)\nivec4(0xFE010200,0x01000100,0x01F20102,0x313031FF),ivec4(0x31013231,0xFE31FE30,0xFD310132,0x31FF31FD),ivec4(0x30FF31FF,0x34013534,0xFE34FE33,0xFD340135),ivec4(0x34FF34FD,0x33FE3402,0x353427FE,0x27FE26F9),ivec4(0x27FD26F9,0x27032629,0x2829FD29,0x012A29FE),ivec4(0x29FF28FD,0x29012A29,0xFD290128,0x29012927),ivec4(0xFA27FD26,0xFA27FF1F,0xFE1EF91F,0xFD1E011F),ivec4(0x1DF91D01,0x1C1DF81D,0xFF1CFC1D,0xFC1FFE1E),ivec4(0xF91FFD1E,0xF91FEE13,0xFF14FF13,0xFE120113),ivec4(0x14FE1401,0x1312FF12,0x011314FE,0x14011312),ivec4(0xFF120113,0x14FE1401,0x1312FF12,0xFF13FE14),ivec4(0x011312FE,0x12011314,0xFF140113,0x12FE1201),ivec4(0x1314FF14,0x011312FE,0x12011314,0xFF14FF13),ivec4(0xFE120113,0x14FE1401,0x1514F814,0x011514F8),ivec4(0x14FF15E6,0x13FB22FC,0x23FB22FB,0x23FD22F6),ivec4(0x1D011C1D,0xF81D011C,0x1DFD1D02,0x292A29FD),ivec4(0x29012829,0xFE29FF2A,0xFD290127,0x26FF26F9),ivec4(0x27FE26FE,0x27FA1D01,0x1C1DF71D,0x011C1DFA),ivec4(0x1DFF1FFD,0x1EF91FFE,0x1EF91FFF,0x1E011A19),ivec4(0x01191AFA,0x1AFE19F9,0x1A031918,0x191AFF1A),ivec4(0x011B1A03,0x1A191819,0x01191A02,0x1A1B1A02),ivec4(0x1A191802,0x18191A02,0x1A1B1A01,0x1A190319),ivec4(0x18191A03,0x1A343735,0x07353432,0x31323435),ivec4(0x37073735,0x34323132,0x34350735,0x37353432),ivec4(0x31323407,0x34353735,0x34323132,0x07323435),ivec4(0x37353432,0x31073132,0x34353735,0x34320732),ivec4(0x31323435,0x37353407,0x34323132,0x34353735),ivec4(0x07353432,0x31323468,0x6B076B6E,0x6B686562),ivec4(0x65680768,0x6B6E6B68,0x65626507,0x65686B6E),ivec4(0x6B686562,0x07626568,0x6B6E6B68,0x65076562),ivec4(0x65686B6E,0x6B680768,0x65626568,0x6B6E6B07),ivec4(0x6B686562,0x65686B6E,0x076E6B68,0x65626568),ivec4(0x6B066B6E,0x6B686562,0x65FF6506,0x686B6E6B),ivec4(0x68656207,0x6265686B,0x6E6B6865,0x07656265),ivec4(0x686B6E6B,0x68076865,0x6265686B,0x6E6B076B),ivec4(0x68656265,0x686B6E07,0x6E6B6865,0x6265686B),ivec4(0x076B6E6B,0x68656265,0x6807686B,0x6E6B6865),ivec4(0x62650765,0x686B6E6B,0x686562FF,0x62056568),ivec4(0x6B6E6B68,0x07686562,0x65686B6E,0x6B076B68),ivec4(0x65626568,0x6B6E076E,0x6B686562,0x65686B07),ivec4(0x6B6E6B68,0x65626568,0x07686B6E,0x6B686562),ivec4(0x65076568,0x6B6E6B68,0x65620762,0x65686B6E),ivec4(0x6B686507,0x65626568,0x6B6E6B68,0x01686505),ivec4(0x65626568,0x6B6E076E,0x6B686562,0x65686B07),ivec4(0x6B6E6B68,0x65626568,0x07686B6E,0x6B686562),ivec4(0x65066568,0x6B6E6B68,0x03F903F7,0x060641B9),ivec4(0x41B941B9,0x410241B9,0x03F903F8,0x06F80302),ivec4(0x41B94106,0x41B941B9,0x41B906F9,0x06F703F8),ivec4(0x060541B9,0x41B941B9,0x03B941B9,0x03F903F8),ivec4(0x06F80301,0x41B907B9,0x41B941B9,0x41B906F8),ivec4(0x06F804F8,0x080441B9,0x41B94104,0x41B941B9),ivec4(0x04F904F8,0x08F804FF,0x4106B941,0xB941B941),ivec4(0xB901B908,0xF908F804,0xF8080341,0xB941B905),ivec4(0xB941B941,0xB904F904,0xF808F704,0x0641B941),ivec4(0xB941B941,0x0241B908,0xF908F804,0xF8090241),ivec4(0xB9410641,0xB941B941,0xB904F904,0xF709F804),ivec4(0x0541B941,0xB941B903,0xB941B909,0xF909F804),ivec4(0xF8090141,0xB907B941,0xB941B941,0xB904F804),ivec4(0xF809F804,0x0441B941,0xB9410441,0xB941B909),ivec4(0xF909F803,0xF806FF41,0x06B941B9,0x41B941B9),ivec4(0x01B903F9,0x03F806F8,0x030341B9,0x41B905B9),ivec4(0x41B941B9,0x06F906F8,0x03F70606,0x41B941B9),ivec4(0x41B94102,0x41B903F9,0x03F806F8,0x030241B9),ivec4(0x410641B9,0x41B941B9,0x06F906F7,0x03F80605),ivec4(0x41B941B9,0x41B903B9,0x41B903F9,0x03F806F8),ivec4(0x030141B9,0x07B941B9,0x41B941B9,0x06F806F8),ivec4(0x03F80604,0x41B941B9,0x410441B9,0x41B903F9),ivec4(0x03F806F8,0x03FF4106,0xB941B941,0xB941B901),ivec4(0xB906F906,0xF804F808,0x0341B941,0xB905B941),ivec4(0xB941B904,0xF904F808,0xF7040641,0xB941B941),ivec4(0xB9410241,0xB908F908,0xF804F808,0x0241B941),ivec4(0x0641B941,0xB941B904,0xF904F708,0xF8040541),ivec4(0xB941B941,0xB903B941,0xB908F908,0xF804F809),ivec4(0x0141B907,0xB941B941,0xB941B904,0xF804F809),ivec4(0xF8040441,0xB941B941,0x0441B941,0xB909F909),ivec4(0xF804F809,0xFF4106B9,0x41B941B9,0x41B901B9),ivec4(0x04F904F8,0x09F80403,0x41B941B9,0x05B941B9),ivec4(0x41B909F9,0x09F803F7,0x060641B9,0x41B941B9),ivec4(0x410241B9,0x03F903F8,0x06F80302,0x41B94106),ivec4(0x41B941B9,0x41B906F9,0x06F703F8,0x060541B9),ivec4(0x41B941B9,0x03B941B9,0x03F903F8,0x06F80301),ivec4(0x41B907B9,0x41B941B9,0x41B906F8,0x06F803F8),ivec4(0x060441B9,0x41B94104,0x41B941B9,0x03F903F8),ivec4(0x06F803FF,0x4106B941,0xB941B941,0xB901B906),ivec4(0xF906F804,0xF8080341,0xB941B905,0xB941B941),ivec4(0xB904F904,0xF808F704,0x0641B941,0xB941B941),ivec4(0x0241B908,0xF908F804,0xF8080241,0xB9410641),ivec4(0xB941B941,0xB904F904,0xF708F804,0x0541B941),ivec4(0xB941B903,0xB941B908,0xF908F803,0xF8060141),ivec4(0xB907B941,0xB941B941,0xB903F803,0xF806F803),ivec4(0x0441B941,0xB9410441,0xB941B906,0xF906F803),ivec4(0xF806FF41,0x06B941B9,0x41B941B9,0x01B903F9),ivec4(0x03F806F8,0x030341B9,0x41B905B9,0x41B941B9),ivec4(0x06F906F8,0x04F70806,0x41B941B9,0x41B94102),ivec4(0x41B904F9,0x04F808F8,0x040241B9,0x410641B9),ivec4(0x41B941B9,0x08F908F7,0x04F80905,0x41B941B9),ivec4(0x41B903B9,0x41B904F9,0x04F809F8,0x040141B9),ivec4(0x07B941B9,0x41B941B9,0x09F809F8,0x03F80604),ivec4(0x41B941B9,0x410441B9,0x41B903F9,0x03F806F8),ivec4(0x03FF4104,0xB941B941,0xB9000000,0x00000000),\n//54288 Voice3 pulse width (low byte)\nivec4(0xEA0006A0,0xD0003060,0x90C007C0,0xF0205080),ivec4(0xB0E01007,0x104070A0,0xD0003060,0x076090C0),ivec4(0xF0A0D000,0x30073060,0x90C0F020,0x50800780),ivec4(0xB0E01040,0x70A0D007,0xD0003060,0x90C0F0A0),ivec4(0x07A0D000,0x306090C0,0xF007F020,0x5080B0E0),ivec4(0x10400740,0x70A0D000,0x30609007,0x90C0F0A0),ivec4(0xD0003060,0x076090C0,0xF0205080,0xB007B0E0),ivec4(0x104070A0,0xD0000700,0x306090C0,0xF0A0D007),ivec4(0xD0003060,0x90C0F020,0x07205080,0xB0E01040),ivec4(0x700770A0,0xD0003060,0x90C007C0,0xF0205080),ivec4(0xB0E01007,0x104070A0,0xD0003060,0x076090C0),ivec4(0xF0205080,0xB007B0E0,0x104070A0,0xD0000700),ivec4(0x306090C0,0xF0A0D007,0xD0003060,0x90C0F020),ivec4(0x07205080,0xB0E01040,0x700770A0,0xD0003060),ivec4(0x90C007C0,0xF0A0D000,0x30609007,0x90C0F020),ivec4(0x5080B0E0,0x07E01040,0x70A0B0C0,0xD007D0E0),ivec4(0xF0001020,0x30400740,0x50607080,0x90A0B007),ivec4(0xB0C0D0E0,0xF0001020,0x07203040,0x50607080),ivec4(0x900790A0,0xB0C0D0E0,0xF0000700,0x10203040),ivec4(0x50607007,0x708090A0,0xB0C0D0E0,0x07E0F000),ivec4(0x10203040,0x50075060,0x708090A0,0xD0000700),ivec4(0x306090C0,0xF0205007,0x5080B0E0,0x104070A0),ivec4(0x07A0D000,0x306090C0,0xF007F0A0,0xD0003060),ivec4(0x90C007C0,0xF0205080,0xB0E01007,0x104070A0),ivec4(0xD0003060,0x076090C0,0xF0A0D000,0x30073060),ivec4(0x90C0F020,0x50800780,0xB0E01040,0x70A0D007),ivec4(0xD0003060,0x90C0F0A0,0x07A0D000,0x306090C0),ivec4(0xF007F020,0x5080B0E0,0x10400740,0x70A0D000),ivec4(0x30609007,0x90C0F0A0,0xD0003060,0x076090C0),ivec4(0xF0205080,0xB007B0E0,0x104070A0,0xD0000700),ivec4(0x306090C0,0xF0205007,0x5080B0E0,0x104070A0),ivec4(0x07A0D000,0x306090C0,0xF007F020,0x5080B0E0),ivec4(0x10400740,0x70A0D000,0x30609007,0x90C0F0A0),ivec4(0xD0003060,0x076090C0,0xF0205080,0xB007B0E0),ivec4(0x104070A0,0xD0000700,0x306090C0,0xF0A0D007),ivec4(0xD0003060,0x90C0F020,0x07205080,0xB0E01040),ivec4(0x700770A0,0xB0C0D0E0,0xF0000700,0x10203040),ivec4(0x50607007,0x708090A0,0xB0C0D0E0,0x07E0F000),ivec4(0x10203040,0x50075060,0x708090A0,0xB0C007C0),ivec4(0xD0E0F000,0x10203007,0x30405060,0x708090A0),ivec4(0x07A0B0C0,0xD0E0F000,0x10071020,0x30405060),ivec4(0x70800780,0x90A0B0C0,0xD0E0F007,0xF0001020),ivec4(0x30405060,0x07607080,0x90A0B0C0,0xD007D0E0),ivec4(0xF0001020,0x30400740,0x50607080,0x90A0B007),ivec4(0xB0C0D0E0,0xF0001020,0x07203040,0x50607080),ivec4(0x900790A0,0xB0C0D0E0,0xF0000700,0x10203040),ivec4(0x50607007,0x708090A0,0xB0C0D0E0,0x07E0F000),ivec4(0x10203040,0x50075060,0x708090A0,0xB0C007C0),ivec4(0xD0E0F000,0x10203007,0x30405060,0x708090A0),ivec4(0x07A0B0C0,0xD0E0F000,0x10071020,0x30405060),ivec4(0x70800780,0x90A0B0C0,0xD0E0F007,0xF0001020),ivec4(0x30405060,0x07607080,0x90A0B0C0,0xD007D0E0),ivec4(0xF0001020,0x30400740,0x50607080,0x90A0B007),ivec4(0xB0C0D0E0,0xF0001020,0x07203040,0x50607080),ivec4(0x900790A0,0xB0C0D0E0,0xF0000700,0x10203040),ivec4(0x50607007,0x708090A0,0xB0C0D0E0,0x07E0F000),ivec4(0x10203040,0x50075060,0x708090A0,0xB0C007C0),ivec4(0xD0E0F000,0x10203007,0x30405060,0x708090A0),ivec4(0x07A0B0C0,0xD0E0F000,0x10071020,0x30405060),ivec4(0x70800780,0x90A0B0C0,0xD0E0F007,0xF0001020),ivec4(0x30405060,0x07607080,0x90A0B0C0,0xD007D0E0),ivec4(0xF0001020,0x30400740,0x50607080,0x90002007),ivec4(0x20406080,0xA0C0E000,0x07002040,0x6080A0C0),ivec4(0xE001E000,0xF8000420,0x406080A0,0x07A0C0E0),ivec4(0x00204060,0x800780A0,0xC0E00020,0x40600560),ivec4(0x80A0C0E0,0x00F800FF,0x20064060,0x80A0C0E0),ivec4(0x00070020,0x406080A0,0xC0E007E0,0x00204060),ivec4(0x80A0C002,0xC0E000F8,0x00032040,0x60800780),ivec4(0xA0C0E000,0x20406007,0x6080A0C0,0xE0002040),ivec4(0x06406080,0xA0C0E000,0xF7000620,0x406080A0),ivec4(0xC0E007E0,0x00204060,0x80A0C007,0xC0E00020),ivec4(0x406080A0,0x03A0C0E0,0x00F80002,0x20406007),ivec4(0x6080A0C0,0xE0002040,0x07406080,0xA0C0E000),ivec4(0x20072040,0x6080A0C0,0xE000F700,0x05204060),ivec4(0x80A0C007,0xC0E00020,0x406080A0,0x07A0C0E0),ivec4(0x00204060,0x800480A0,0xC0E000F8,0x00012040),ivec4(0x07406080,0xA0C0E000,0x20072040,0x6080A0C0),ivec4(0xE0000700,0x20406080,0xA0C0E001,0xE000F800),ivec4(0x04204060,0x80A007A0,0xC0E00020,0x40608007),ivec4(0x80A0C0E0,0x00204060,0x056080A0,0xC0E000F8),ivec4(0x00FF2006,0x406080A0,0xC0E00007,0x00204060),ivec4(0x80A0C0E0,0x07E00020,0x406080A0,0xC002C0E0),ivec4(0x00F80003,0x20406080,0x0780A0C0,0xE0002040),ivec4(0x60076080,0xA0C0E000,0x20400640,0x6080A0C0),ivec4(0xE000F700,0x06204060,0x80A0C0E0,0x07E00020),ivec4(0x406080A0,0xC007C0E0,0x00204060,0x80A003A0),ivec4(0xC0E000F8,0x00022040,0x60076080,0xA0C0E000),ivec4(0x20400740,0x6080A0C0,0xE0002007,0x20406080),ivec4(0xA0C0E000,0xF7000520,0x406080A0,0xC007C0E0),ivec4(0x00204060,0x80A007A0,0xC0E00020,0x40608004),ivec4(0x80A0C0E0,0x00F80001,0x20400740,0x6080A0C0),ivec4(0xE0002007,0x20406080,0xA0C0E000,0x07002040),ivec4(0x6080A0C0,0xE001E000,0xF8000420,0x406080A0),ivec4(0x07A0C0E0,0x00204060,0x800780A0,0xC0E00020),ivec4(0x40600560,0x80A0C0E0,0x00F800FF,0x20064060),ivec4(0x80A0C0E0,0x00070020,0x406080A0,0xC0E007E0),ivec4(0x00204060,0x80A0C002,0xC0E000F8,0x00032040),ivec4(0x60800780,0xA0C0E000,0x20406007,0x6080A0C0),ivec4(0xE0002040,0x06406080,0xA0C0E000,0xF7000620),ivec4(0x406080A0,0xC0E007E0,0x00204060,0x80A0C007),ivec4(0xC0E00020,0x406080A0,0x03A0C0E0,0x00F80002),ivec4(0x20406007,0x6080A0C0,0xE0002040,0x07406080),ivec4(0xA0C0E000,0x20072040,0x6080A0C0,0xE000F700),ivec4(0x05204060,0x80A0C007,0xC0E00020,0x406080A0),ivec4(0x07A0C0E0,0x00204060,0x800480A0,0xC0E000F8),ivec4(0x00012040,0x07406080,0xA0C0E000,0x20072040),ivec4(0x6080A0C0,0xE0000700,0x20406080,0xA0C0E001),ivec4(0xE000F800,0x04204060,0x80A007A0,0xC0E00020),ivec4(0x40608007,0x80A0C0E0,0x00204060,0x056080A0),ivec4(0xC0E000F8,0x00FF2006,0x406080A0,0xC0E00007),ivec4(0x00204060,0x80A0C0E0,0x07E00020,0x406080A0),ivec4(0xC002C0E0,0x00F80003,0x20406080,0x0780A0C0),ivec4(0xE0002040,0x60076080,0xA0C0E000,0x20400640),ivec4(0x6080A0C0,0xE000F700,0x06204060,0x80A0C0E0),ivec4(0x07E00020,0x406080A0,0xC007C0E0,0x00204060),ivec4(0x80A003A0,0xC0E000F8,0x00022040,0x60076080),ivec4(0xA0C0E000,0x20400740,0x6080A0C0,0xE0002007),ivec4(0x20406080,0xA0C0E000,0xF7000520,0x406080A0),ivec4(0xC007C0E0,0x00204060,0x80A007A0,0xC0E00020),ivec4(0x40608004,0x80A0C0E0,0x00F80001,0x20400740),ivec4(0x6080A0C0,0xE0002007,0x20406080,0xA0C0E000),ivec4(0x07002040,0x6080A0C0,0xE001E000,0xF8000420),ivec4(0x406080A0,0x07A0C0E0,0x00204060,0x800780A0),ivec4(0xC0E00020,0x40600560,0x80A0C0E0,0x00F800FF),ivec4(0x20064060,0x80A0C0E0,0x00070020,0x406080A0),ivec4(0xC0E007E0,0x00204060,0x80A0C002,0xC0E000F8),ivec4(0x00032040,0x60800780,0xA0C0E000,0x20406007),ivec4(0x6080A0C0,0xE0002040,0x06406080,0xA0C0E000),ivec4(0xF7000620,0x406080A0,0xC0E007E0,0x00204060),ivec4(0x80A0C007,0xC0E00020,0x406080A0,0x03A0C0E0),ivec4(0x00F80002,0x20406007,0x6080A0C0,0xE0002040),ivec4(0x07406080,0xA0C0E000,0x20072040,0x6080A0C0),ivec4(0xE000F700,0x05204060,0x80A0C007,0xC0E00020),ivec4(0x406080A0,0x07A0C0E0,0x00204060,0x800480A0),ivec4(0xC0E000F8,0x00012040,0x07406080,0xA0C0E000),ivec4(0x20072040,0x6080A0C0,0xE0000700,0x20406080),ivec4(0xA0C0E001,0xE000F800,0x04204060,0x80A007A0),ivec4(0xC0E00020,0x40608007,0x80A0C0E0,0x00204060),ivec4(0x056080A0,0xC0E000F8,0x00FF2006,0x406080A0),ivec4(0xC0E00007,0x00204060,0x80A0C0E0,0x07E00020),ivec4(0x406080A0,0xC002C0E0,0x00F80003,0x20406080),ivec4(0x0780A0C0,0xE0002040,0x60076080,0xA0C0E000),ivec4(0x20400640,0x6080A0C0,0xE000F700,0x06204060),ivec4(0x80A0C0E0,0x07E00020,0x406080A0,0xC007C0E0),ivec4(0x00204060,0x80A003A0,0xC0E000F8,0x00022040),ivec4(0x60076080,0xA0C0E000,0x20400740,0x6080A0C0),ivec4(0xE0002007,0x20406080,0xA0C0E000,0xF7000520),ivec4(0x406080A0,0xC007C0E0,0x00204060,0x80A007A0),ivec4(0xC0E00020,0x40608004,0x80A0C0E0,0x00F80001),ivec4(0x20400740,0x6080A0C0,0xE0002007,0x20406080),ivec4(0xA0C0E000,0x07002040,0x6080A0C0,0xE001E000),ivec4(0xF8000420,0x406080A0,0x07A0C0E0,0x00204060),ivec4(0x800780A0,0xC0E00020,0x40600560,0x80A0C0E0),ivec4(0x00F800FF,0x20064060,0x80A0C0E0,0x00070020),ivec4(0x406080A0,0xC0E007E0,0x00204060,0x80A0C002),ivec4(0xC0E000F8,0x00032040,0x60800780,0xA0C0E000),ivec4(0x20406007,0x6080A0C0,0xE0002040,0x06406080),ivec4(0xA0C0E000,0xF7000620,0x406080A0,0xC0E007E0),ivec4(0x00204060,0x80A0C007,0xC0E00020,0x406080A0),ivec4(0x03A0C0E0,0x00F80002,0x20406007,0x6080A0C0),ivec4(0xE0002040,0x07406080,0xA0C0E000,0x20072040),ivec4(0x6080A0C0,0xE000FB00,0x00000000,0x00000000),\n//54289 Voice3 pulse width (high byte/control bits)\nivec4(0xEA02FF00,0xFA01FC02,0xFB03FA04,0xFF00FA01),ivec4(0xFB02FB03,0xFB04FE00,0xFA01FC02,0xFB03FA04),ivec4(0xFF00FA01,0xFB02FC03,0xFA04FE00,0xFB01FB02),ivec4(0xFD03FF00,0xFA01FC02,0xFD03FF00,0xFA01FB02),ivec4(0xFC03FA04,0xFE00FB01,0xFB02FB03,0xFA04FF00),ivec4(0xFA01FB02,0xFE03FA09,0xEF0AEF0B,0xEE0CF60D),ivec4(0xFF00FA01,0xFB02FB03,0xFA04FF00,0xFA01FC02),ivec4(0xFB03FA04,0xFF00FA01,0xFB02FB03,0xFB04FE00),ivec4(0xFA01FC02,0xFB03FA04,0xFF00FA01,0xFB02FE03),ivec4(0xFF00FA01,0xFB02FE03,0xFE00FA01,0xFC02FB03),ivec4(0xFA04FF00,0xFA01FB02,0xFC03FA04,0xFE00FB01),ivec4(0xFB02FD03,0xFB09EE0A,0xF60BFA09,0xEF0AEE0B),ivec4(0xEF0CF60D,0xFA09EF0A,0xEE0BEF0C,0xF60DFA09),ivec4(0xEE0AEF0B,0xEF0CF50D,0xFB09EE0A,0xEF0BEF0C),ivec4(0xF50DFA09,0xEF0AF60B,0xEE01F802,0xE601F802),ivec4(0xE501F802,0xE601F802,0xE501F802,0xE601F702),ivec4(0xE601F802,0xE501F802,0xE601F802,0xE501F802),ivec4(0xE601F802,0xE501F802,0xE601F702,0xE601F802),ivec4(0xE501F802,0xE601F802,0xE501F802,0xE601F802),ivec4(0xE501F802,0xE601F702,0xE601F802,0xE501F802),ivec4(0xE601F802,0xE501F802,0xE601F802,0xE501F802),ivec4(0xE601F702,0xE601F802,0xE501F802,0xE601F802),ivec4(0xE501F802,0xE601F802,0xE501F802,0xE601F702),ivec4(0xE601F802,0xE501F802,0xE601F802,0xE501F802),ivec4(0xE601F802,0xE501F802,0xE601F702,0xE601F802),ivec4(0xE501F802,0xE601F802,0xE501F802,0xE601F802),ivec4(0xE501F802,0xE601FA02,0x00000000,0x00000000),\n//54290 Voice3 control register\nivec4(0xEA10E841,0xFF40E841,0xFF40E741,0xFF40E841),ivec4(0xFF40F141,0xFE40F141,0xFF40E841,0xFF40E841),ivec4(0xFE40A841,0xFF40E841,0xFE40E841,0xFF40E841),ivec4(0xFF40E741,0xFF40F141,0xFF40F141,0xFF40E741),ivec4(0xFF40E841,0xFF408141,0xB8418140,0xCA40FA41),ivec4(0xFF40FA41,0xFE400215,0x8014FB14,0xFA41FF40),ivec4(0xFA41FF40,0xFA41FF40,0x02158014,0xFB14FA41),ivec4(0xFF40FA41,0xFE40FB41,0xFE400215,0x8014FB14),ivec4(0xFA41FF40,0xFA41FF40,0xFA41FF40,0x01158001),ivec4(0x8014FC14,0xFA41FE40,0xFB41FE40,0xFA41FF40),ivec4(0x02158014,0xFB14FA41,0xFF40FA41,0xFF40FA41),ivec4(0xFF40FF15,0x018014FB,0x14FB41FE,0x40FA41FF),ivec4(0x40FA41FF,0x40021580,0x14FB14FA,0x41FF40FA),ivec4(0x41FF40FA,0x41FE4002,0x158014FB,0x14FA41FF),ivec4(0x40FA41FF,0x40FA41FF,0x40021580,0x14FB14FA),ivec4(0x41FF40FA,0x41FE40FB,0x41FE4002,0x158014FB),ivec4(0x14FA41FF,0x40FA41FF,0x40FA41FF,0x40011580),ivec4(0x018014FC,0x14FA41FE,0x40FB41FE,0x40FA41FF),ivec4(0x40021580,0x14FB14FA,0x41FF40FA,0x41FF40FA),ivec4(0x41FF40FF,0x15018014,0xFB14FB41,0xFE40FA41),ivec4(0xFF40FA41,0xFF400215,0x8014FB14,0xFA41FF40),ivec4(0xFA41FF40,0xFA41FE40,0x02158014,0xFB14FA41),ivec4(0xFF40FA41,0xFF40FA41,0xFF400215,0x8014FB14),ivec4(0xFA41FF40,0xFA41FE40,0xFB41FE40,0x02158014),ivec4(0xFB14FA41,0xFF40FA41,0xFF40FA41,0xFF400115),ivec4(0x80018014,0xFC14FA41,0xFE40FB41,0xFE40FA41),ivec4(0xFF400215,0x8014FB14,0xFA41FF40,0xFA41FF40),ivec4(0xFA41FF40,0xFF150180,0x14FB14FB,0x41FE40FA),ivec4(0x41FF40FA,0x41FF4002,0x158014FB,0x14FA41FF),ivec4(0x40FA41FF,0x40FA41FE,0x40021580,0x14FB14FA),ivec4(0x41FF40FA,0x41FF40FA,0x41FF4002,0x158014FB),ivec4(0x14FA41FF,0x40FA41FE,0x40FB41FE,0x40021580),ivec4(0x14FB14FA,0x41FF40FA,0x41FF40FA,0x41FF4001),ivec4(0x15800180,0x14FC14FA,0x41FE40FB,0x41FE40FA),ivec4(0x41FF4002,0x158014FB,0x14FA41FF,0x40FA41FF),ivec4(0x40FA41FF,0x40FF1501,0x8014FB14,0xFB41FE40),ivec4(0xFA41FF40,0xFA41FF40,0x02158014,0xFB14FA41),ivec4(0xFF40FA41,0xFF40FA41,0xFE400215,0x8014FB14),ivec4(0xFA41FF40,0xFA41FF40,0xFA41FF40,0x02158014),ivec4(0xFB14FA41,0xFF40FA41,0xFE40FB41,0xFE400215),ivec4(0x8014FB14,0xFA41FF40,0xFA41FF40,0xFA41FF40),ivec4(0x01158001,0x8014FC14,0xFA41FE40,0xFB41FE40),ivec4(0xFA41FF40,0x02158014,0xFB14FA41,0xFF40FA41),ivec4(0xFF40FA41,0xFF40FF15,0x018014FB,0x14FB41FE),ivec4(0x40FA41FF,0x40FA41FF,0x40021580,0x14FB14FA),ivec4(0x41FF40FA,0x41FF40FA,0x41FE4002,0x158014FB),ivec4(0x14FA41FF,0x40FA41FF,0x40FA41FF,0x40021580),ivec4(0x14FB14FA,0x41FF40FA,0x41FE40FB,0x41FE4002),ivec4(0x158014FB,0x14FA41FF,0x40FA41FF,0x40FA41FF),ivec4(0x40011580,0x018014FC,0x14FA41FE,0x40FB41FE),ivec4(0x40FA41FF,0x40021580,0x14FB14FA,0x41FF40FA),ivec4(0x41FF40FA,0x41FF40FF,0x15018014,0xFB14FB41),ivec4(0xFE40FA41,0xFF40FA41,0xFF400215,0x8014FB14),ivec4(0xFA41FF40,0xFA41FF40,0xFA41FE40,0x02158014),ivec4(0xFB14FA41,0xFF40FA41,0xFF40FA41,0xFF400215),ivec4(0x8014FB14,0xFA41FF40,0xFA41FE40,0xFB41FE40),ivec4(0x02158014,0xFB14FA41,0xFF40FA41,0xFF40FA41),ivec4(0xFF400115,0x80018014,0xFC14FA41,0xFE40FB41),ivec4(0xFE40FA41,0xFF400215,0x8014FB14,0xFA41FF40),ivec4(0xFA41FF40,0xFA41FF40,0xFF150180,0x14FE1400),\n//54291 Voice3 attack/decay\n  //Removed as its redundant due to baked amps\n//54292 Voice3 sustain/release\n  //Removed as its redundant due to baked amps\n//54293 Filter frequency (low byte)\nivec4(0x81008100,0x81008100,0x81008100,0x81008100),ivec4(0x81008100,0x81008100,0x81008100,0x81008100),ivec4(0x81008100,0x81008100,0xAD000000,0x00000000),\n//54294 Filter frequency (high byte)\nivec4(0x81008100,0x81008100,0x81008100,0x81008100),ivec4(0x81008100,0x81008100,0x81008100,0x81008100),ivec4(0x81008100,0x81008100,0xAD000000,0x00000000),\n//54295 Resonance/Filter select\nivec4(0x81008100,0x81008100,0x81008100,0x81008100),ivec4(0x81008100,0x81008100,0x81008100,0x81008100),ivec4(0x81008100,0x81008100,0xAD000000,0x00000000),\n//54296 Mode/Volume\nivec4(0x810F810F,0x810F810F,0x810F810F,0x810F810F),ivec4(0x810F810F,0x810F810F,0x810F810F,0x810F810F),ivec4(0x810F810F,0x810F810F,0xAD0F0000,0x00000000),\n//Voice 1 Amp\nivec4(0x04306090,0xD0F0EDF0,0xFF000430,0x6090D0F0),ivec4(0xEDF0FE00,0x04306090,0xD0F0EDF0,0xFF000430),ivec4(0x6090D0F0,0xEDF0FF00,0x04306090,0xD0F0F6F0),ivec4(0xFE000430,0x6090D0F0,0xF6F0FF00,0x04306090),ivec4(0xD0F0EDF0,0xFF000430,0x6090D0F0,0xECF0FF00),ivec4(0x04306090,0xD0F0E7F0,0xE5E0E5D0,0xFFC0FF00),ivec4(0x04306090,0xD0F0EDF0,0xFE000430,0x6090D0F0),ivec4(0xEDF0FF00,0x04306090,0xD0F0EDF0,0xFE000430),ivec4(0x6090D0F0,0xEDF0FF00,0x04306090,0xD0F0F6F0),ivec4(0xFF000430,0x6090D0F0,0xF6F0FE00,0x04306090),ivec4(0xD0F0EDF0,0xFF000430,0x6090D0F0,0xEDF0FF00),ivec4(0x04306090,0xD0F0E7F0,0xE5E0E5D0,0xE4C0E5B0),ivec4(0xE5A0B990,0xB680B670,0xF46002A0,0xD0F0EBF0),ivec4(0xFE000430,0x6090D0F0,0xEDF0FF00,0x04306090),ivec4(0xD0F0EDF0,0xFE000430,0x6090D0F0,0xEDF0FF00),ivec4(0x04306090,0xD0F0F6F0,0xFF000430,0x6090D0F0),ivec4(0xF6F0FE00,0x04306090,0xD0F0EDF0,0xFF000430),ivec4(0x6090D0F0,0xEDF0FF00,0x04306090,0xD0F0E7F0),ivec4(0xE5E0E5D0,0xFEC0FF00,0x04306090,0xD0F0EDF0),ivec4(0xFF000430,0x6090D0F0,0xEDF0FE00,0x04306090),ivec4(0xD0F0EDF0,0xFF000430,0x6090D0F0,0xEDF0FE00),ivec4(0x04306090,0xD0F0F6F0,0xFF000430,0x6090D0F0),ivec4(0xF6F0FF00,0x04306090,0xD0F0EDF0,0xFE000430),ivec4(0x6090D0F0,0xE7F0E5E0,0xF6D0FE00,0xFCF0FDE0),ivec4(0xFCF0FDE0,0xFCF0FDE0,0xFCF0FDE0,0xFCF0FDE0),ivec4(0xE7F0FF00,0x04306090,0xD0F0EDF0,0xFF000430),ivec4(0x6090D0F0,0xEDF0FE00,0x04306090,0xD0F0EDF0),ivec4(0xFF000430,0x6090D0F0,0xF6F0FF00,0x04306090),ivec4(0xD0F0F6F0,0xFE000430,0x6090D0F0,0xEDF0FF00),ivec4(0x04306090,0xD0F0EDF0,0xFE000430,0x6090D0F0),ivec4(0xE7F0E5E0,0xE5D0FFC0,0xFF000430,0x6090D0F0),ivec4(0xEDF0FF00,0x04306090,0xD0F0ECF0,0xFF000430),ivec4(0x6090D0F0,0xEDF0FF00,0x04306090,0xD0F0EDF0),ivec4(0xFE000430,0x6090D0F0,0xF6F0FF00,0x04306090),ivec4(0xD0F0F6F0,0xFF000430,0x6090D0F0,0xEDF0FE00),ivec4(0x04306090,0xD0F0EDF0,0xFF000430,0x6090D0F0),ivec4(0xE7F0E5E0,0xE5D0FFC0,0xFE008BF0,0xE5E08BF0),ivec4(0xE5E08BF0,0xE5E0E7F0,0xFFE0A6F0,0xF1E00000),\n//Voice 2 Amp\nivec4(0xF6000430,0x6090D0F0,0xEDF0FE00,0x04306090),ivec4(0xD0F0EDF0,0xFF000430,0x6090D0F0,0xEDF0FF00),ivec4(0x04306090,0xD0F0ECF0,0xFF000430,0x6090D0F0),ivec4(0xF6F0FF00,0x04306090,0xD0F0F6F0,0xFF000430),ivec4(0x6090D0F0,0xECF0FF00,0x04306090,0xD0F0EDF0),ivec4(0xFF000430,0x6090D0F0,0xE7F0E5E0,0xE5D0FFC0),ivec4(0xFE000430,0x6090D0F0,0xEDF0FF00,0x04306090),ivec4(0xD0F0EDF0,0xFE000430,0x6090D0F0,0xEDF0FF00),ivec4(0x04306090,0xD0F0EDF0,0xFF000430,0x6090D0F0),ivec4(0xF6F0FE00,0x04306090,0xD0F0F6F0,0xFF000430),ivec4(0x6090D0F0,0xEDF0FF00,0x04306090,0xD0F0ECF0),ivec4(0xFF000430,0x6090D0F0,0xE7F0E5E0,0xE5D0E4C0),ivec4(0xE5B0E5A0,0xBA90B680,0xB670FF60,0x09F0E0D0),ivec4(0xC0B0A090,0x8070F009,0xF0E0D0C0,0xB0A09080),ivec4(0x70F0FFF0,0xFFE0FFD0,0xFFC009F0,0xE0D0C0B0),ivec4(0xA0908070,0xF0FFF0FF,0xE0FFD0FF,0xC0FEF0FF),ivec4(0xE0FFD0FF,0xC009F0E0,0xD0C0B0A0,0x908070F0),ivec4(0xFFF0FFE0,0xFFD0FFC0,0xFFF008E0,0xD0C0B0A0),ivec4(0x908070F0,0xFFF0FFE0,0xFFD0FFC0,0xFEF0FFE0),ivec4(0xFFD0FEC0,0xFFB0FFA0,0xFE900180,0xF0FFF0FF),ivec4(0xE0FFD0FF,0xC0FEF0FF,0xE0FFD0FF,0xC0FCF0FD),ivec4(0xE0FBF0FD,0xE012F0E0,0xD0C0B0A0,0x908070F0),ivec4(0xE0D0C0B0,0xA0908070,0xF0FFF0FF,0xE0FFD0FF),ivec4(0xC009F0E0,0xD0C0B0A0,0x908070F0,0xFFF0FFE0),ivec4(0xFFD0FFC0,0xFEF0FFE0,0xFFD0FFC0,0xFFF008E0),ivec4(0xD0C0B0A0,0x908070F0,0xFFF0FFE0,0xFFD0FFC0),ivec4(0x09F0E0D0,0xC0B0A090,0x8070F0FF,0xF0FFE0FF),ivec4(0xD0FFC0FE,0xF0FFE0FF,0xD0FEC0FF,0xB0FFA0FE),ivec4(0x900180F0,0xFFF0FFE0,0xFFD0FFC0,0xFDF0FFE0),ivec4(0xFFD0FFC0,0xFCF0FDE0,0xFCF0FDE0,0x12F0E0D0),ivec4(0xC0B0A090,0x8070F0E0,0xD0C0B0A0,0x908070F0),ivec4(0xFFF0FFE0,0xFFD0FFC0,0x09F0E0D0,0xC0B0A090),ivec4(0x8070F0FE,0xF0FFE0FF,0xD0FFC0FE,0xF0FFE0FF),ivec4(0xD0FFC009,0xF0E0D0C0,0xB0A09080,0x70F0FFF0),ivec4(0xFFE0FFD0,0xFFC009F0,0xE0D0C0B0,0xA0908070),ivec4(0xF0FFF0FF,0xE0FFD0FF,0xC0FEF0FF,0xE0FFD0FE),ivec4(0xC0FFB0FF,0xA0FE90FF,0x80FEF0FF,0xE0FFD0FF),ivec4(0xC0FEF0FF,0xE0FFD0FF,0xC0FCF0FD,0xE0FCF0FD),ivec4(0xE012F0E0,0xD0C0B0A0,0x908070F0,0xE0D0C0B0),ivec4(0xA0908070,0xF0FEF0FF,0xE0FFD0FF,0xC009F0E0),ivec4(0xD0C0B0A0,0x908070F0,0xFFF0FFE0,0xFFD0FFC0),ivec4(0xFEF0FFE0,0xFFD0FFC0,0x09F0E0D0,0xC0B0A090),ivec4(0x8070F0FF,0xF0FFE0FF,0xD0FFC009,0xF0E0D0C0),ivec4(0xB0A09080,0x70F0FEF0,0xFFE0FFD0,0xFFC0FEF0),ivec4(0xFFE0FFD0,0xFEC0FFB0,0xFFA0FE90,0x0180F0FF),ivec4(0xF0FFE0FF,0xD0FFC0FE,0xF0FFE0FF,0xD0FFC0FC),ivec4(0xF0FDE0FC,0xF0FDE0FF,0xF011E0D0,0xC0B0A090),ivec4(0x8070F0E0,0xD0C0B0A0,0x908070F0,0xFFF0FFE0),ivec4(0xFFD0FFC0,0x09F0E0D0,0xC0B0A090,0x8070F0FF),ivec4(0xF0FFE0FF,0xD0FFC0FE,0xF0FFE0FF,0xD0FFC009),ivec4(0xF0E0D0C0,0xB0A09080,0x70F0FEF0,0xFFE0FFD0),ivec4(0xFFC009F0,0xE0D0C0B0,0xA0908070,0xF0FFF0FF),ivec4(0xE0FFD0FF,0xC0FEF0FF,0xE0FFD0FE,0xC0FFB0FF),ivec4(0xA0FE9001,0x80F0FFF0,0xFFE0FFD0,0xFFC0FEF0),ivec4(0xFFE0FFD0,0xFFC0FBF0,0xFDE0FCF0,0xFDE012F0),ivec4(0xE0D0C0B0,0xA0908070,0xF0E0D0C0,0xB0A09080),ivec4(0x70F0FFF0,0xFFE0FFD0,0xFFC009F0,0xE0D0C0B0),ivec4(0xA0908070,0xF0FFF0FF,0xE0FFD0FF,0xC0FDF0FF),ivec4(0xE0FFD0FF,0xC009F0E0,0xD0C0B0A0,0x908070F0),ivec4(0xFFF0FFE0,0xFFD0FFC0,0x09F0E0D0,0xC0B0A090),ivec4(0x8070F0FF,0xF0FFE0FF,0xD0FFC0FE,0xF0FFE0FF),ivec4(0xD0FEC0FF,0xB0FFA0FE,0x900180F0,0xFEF0FFE0),ivec4(0xFFD0FFC0,0xFEF0FFE0,0xFFD0FFC0,0xFCF0FDE0),ivec4(0xFCF0FDE0,0x12F0E0D0,0xC0B0A090,0x8070F0E0),ivec4(0xD0C0B0A0,0x908070F0,0xFFF0FFE0,0xFFD0FFC0),ivec4(0xFFF008E0,0xD0C0B0A0,0x908070F0,0xFFF0FFE0),ivec4(0xFFD0FFC0,0xFEF0FFE0,0xFFD0FFC0,0x09F0E0D0),ivec4(0xC0B0A090,0x8070F0FF,0xF0FFE0FF,0xD0FFC009),ivec4(0xF0E0D0C0,0xB0A09080,0x70F0FFF0,0xFFE0FFD0),ivec4(0xFFC0FDF0,0xFFE0FFD0,0xFEC0FFB0,0xFFA0FE90),ivec4(0x0180F0FF,0xF0FFE0FF,0xD0FFC0FE,0xF0FFE0FF),ivec4(0xD0FFC0FC,0xF0FDE0FC,0xF0FDE009,0xF0E0D0C0),ivec4(0xB0A09080,0x70F009F0,0xE0D0C0B0,0xA0908070),ivec4(0xF0FFF0FF,0xE0FFD0FF,0xC009F0E0,0xD0C0B0A0),ivec4(0x908070F0,0xFFF0FFE0,0xFFD0FFC0,0xFEF0FFE0),ivec4(0xFFD0FFC0,0x09F0E0D0,0xC0B0A090,0x8070F0FF),ivec4(0xF0FFE0FF,0xD0FFC0FF,0xF008E0D0,0xC0B0A090),ivec4(0x8070F0FF,0xF0FFE0FF,0xD0FFC0FE,0xF0FFE0FF),ivec4(0xD0FEC0FF,0xB0FFA0FE,0x900180F0,0xFFF0FFE0),ivec4(0xFFD0FFC0,0xFEF0FFE0,0xFFD0FFC0,0xFCF0FDE0),ivec4(0xFBF0FDE0,0xF8F0F8E0,0x09F0E0D0,0xC0B0A090),ivec4(0x8070F0F8,0xF012E0D0,0xC0B0A090,0x8070F0E0),ivec4(0xD0C0B0A0,0x908070F0,0xE0F9E0F8,0xD0F8F0F8),ivec4(0xE009F0E0,0xD0C0B0A0,0x908070F0,0xF8F008E0),ivec4(0xD0C0B0A0,0x908070F0,0x09F0E0D0,0xC0B0A090),ivec4(0x8070F0F9,0xF0F8E0F8,0xF0F8E009,0xF0E0D0C0),ivec4(0xB0A09080,0x70F0F7F0,0x11E0D0C0,0xB0A09080),ivec4(0x70F0E0D0,0xC0B0A090,0x8070F0F9,0xF0F8E0F8),ivec4(0xF0F8E00A,0xF0E0D0C0,0xB0A09080,0x70F0E0F9),ivec4(0xE012F0E0,0xD0C0B0A0,0x908070F0,0xE0D0C0B0),ivec4(0xA0908070,0xF0F9F0F8,0xE0F8F0F8,0xE0FFF008),ivec4(0xE0D0C0B0,0xA0908070,0xF0F8F011,0xE0D0C0B0),ivec4(0xA0908070,0xF0E0D0C0,0xB0A09080,0x70F0F9F0),ivec4(0xF8E0F8F0,0xF7E009F0,0xE0D0C0B0,0xA0908070),ivec4(0xF0F8F011,0xE0D0C0B0,0xA0908070,0xF0E0D0C0),ivec4(0xB0A09080,0x70F0F9F0,0xF8E001F0,0xE0F9E0F8),ivec4(0xD009F0E0,0xD0C0B0A0,0x908070F0,0xF8F011E0),ivec4(0xD0C0B0A0,0x908070F0,0xE0D0C0B0,0xA0908070),ivec4(0xF0F9F0F7,0xE0F8F0F8,0xE009F0E0,0xD0C0B0A0),ivec4(0x908070F0,0xF8F012E0,0xD0C0B0A0,0x908070F0),ivec4(0xE0D0C0B0,0xA0908070,0xF0E0FCE0,0x00000000),\n//Voice 3 Amp\nivec4(0xEA000430,0x6090D0F0,0xEDF0FF00,0x04306090),ivec4(0xD0F0EDF0,0xFF000430,0x6090D0F0,0xECF0FF00),ivec4(0x04306090,0xD0F0EDF0,0xFF000430,0x6090D0F0),ivec4(0xF6F0FE00,0x04306090,0xD0F0F6F0,0xFF000430),ivec4(0x6090D0F0,0xEDF0FF00,0x04306090,0xD0F0EDF0),ivec4(0xFE000430,0x6090D0F0,0xE7F0E5E0,0xE5D0FFC0),ivec4(0xFF000430,0x6090D0F0,0xEDF0FE00,0x04306090),ivec4(0xD0F0EDF0,0xFF000430,0x6090D0F0,0xEDF0FF00),ivec4(0x04306090,0xD0F0ECF0,0xFF000430,0x6090D0F0),ivec4(0xF6F0FF00,0x04306090,0xD0F0F6F0,0xFF000430),ivec4(0x6090D0F0,0xECF0FF00,0x04306090,0xD0F0EDF0),ivec4(0xFF000430,0x6090D0F0,0xE7F0E5E0,0xE5D0E4C0),ivec4(0xE5B0E5A0,0xBA90B680,0xBF70FCF0,0xFFE0FF00),ivec4(0xFCF0FFE0,0xFE00F3F0,0xFFE0FF00,0xFCF0FFE0),ivec4(0xFF00FCF0,0xFFE0FF00,0xF3F0FFE0,0xFF00FCF0),ivec4(0xFFE0FE00,0xFCF001E0,0x00FF00F3,0xF0FFE0FF),ivec4(0x00FCF0FF,0xE0FF00FC,0xF0FFE0FF,0x00F3F0FF),ivec4(0xE0FE00FC,0xF001E000,0xFF00FCF0,0xFFE0FF00),ivec4(0xF3F0FFE0,0xFF00FCF0,0xFFE0FF00,0xFCF0FFE0),ivec4(0xFF00F2F0,0x01E000FF,0x00FCF0FF,0xE0FF00FC),ivec4(0xF0FFE0FF,0x00F3F0FF,0xE0FF00FC,0xF0FFE0FF),ivec4(0x00FCF0FF,0xE0FE00F3,0xF0FFE0FF,0x00FCF0FF),ivec4(0xE0FF00FC,0xF0FFE0FF,0x00F3F0FF,0xE0FF00FC),ivec4(0xF0FFE0FE,0x00FCF001,0xE000FF00,0xF3F0FFE0),ivec4(0xFF00FCF0,0xFFE0FF00,0xFCF0FFE0,0xFF00F3F0),ivec4(0xFFE0FE00,0xFCF001E0,0x00FF00FC,0xF0FFE0FF),ivec4(0x00F3F0FF,0xE0FF00FC,0xF0FFE0FF,0x00FCF0FF),ivec4(0xE0FF00F2,0xF001E000,0xFF00FCF0,0xFFE0FF00),ivec4(0xFCF0FFE0,0xFF00F3F0,0xFFE0FF00,0xFCF0FFE0),ivec4(0xFF00FCF0,0xFFE0FE00,0xF3F0FFE0,0xFF00FCF0),ivec4(0xFFE0FF00,0xFCF0FFE0,0xFF00F3F0,0xFFE0FF00),ivec4(0xFCF0FFE0,0xFE00FCF0,0x01E000FF,0x00F3F0FF),ivec4(0xE0FF00FC,0xF0FFE0FF,0x00FCF0FF,0xE0FF00F3),ivec4(0xF0FFE0FE,0x00FCF001,0xE000FF00,0xFCF0FFE0),ivec4(0xFF00F3F0,0xFFE0FF00,0xFCF0FFE0,0xFF00FCF0),ivec4(0xFFE0FF00,0xF2F001E0,0x00FF00FC,0xF0FFE0FF),ivec4(0x00FCF0FF,0xE0FF00F3,0xF0FFE0FF,0x00FCF0FF),ivec4(0xE0FF00FC,0xF0FFE0FE,0x00F3F0FF,0xE0FF00FC),ivec4(0xF0FFE0FF,0x00FCF0FF,0xE0FF00F3,0xF0FFE0FF),ivec4(0x00FCF0FF,0xE0FE00FC,0xF001E000,0xFF00F3F0),ivec4(0xFFE0FF00,0xFCF0FFE0,0xFF00FCF0,0xFFE0FF00),ivec4(0xF3F0FFE0,0xFE00FCF0,0x01E000FF,0x00FCF0FF),ivec4(0xE0FF00F3,0xF0FFE0FF,0x00FCF0FF,0xE0FF00FC),ivec4(0xF0FFE0FF,0x00F2F001,0xE000FF00,0xFCF0FFE0),ivec4(0xFF00FCF0,0xFFE0FF00,0xF3F0FFE0,0xFF00FCF0),ivec4(0xFFE0FF00,0xFCF0FFE0,0xFE00F3F0,0xFFE0FF00),ivec4(0xFCF0FFE0,0xFF00FCF0,0xFFE0FF00,0xF3F0FFE0),ivec4(0xFF00FCF0,0xFFE0FE00,0xFCF001E0,0x00FF00F3),ivec4(0xF0FFE0FF,0x00FCF0FF,0xE0FF00FC,0xF0FFE0FF),ivec4(0x00F3F0FF,0xE0FE00FC,0xF001E000,0xFF00FCF0),ivec4(0xFFE0FF00,0xF3F0FFE0,0xFF00FCF0,0xFFE0FF00),ivec4(0xFCF0FFE0,0xFF00F2F0,0x01E000FF,0x00FCF0FF),ivec4(0xE0FF00FC,0xF0FFE0FF,0x00F3F0FF,0xE0FF00FC),ivec4(0xF0FFE0FF,0x00FCF0FF,0xE0FE00F3,0xF0FFE0FF),ivec4(0x00FCF0FF,0xE0FF00FC,0xF0FFE0FF,0x00F3F0FF),ivec4(0xE0FF00FC,0xF0FFE0FE,0x00FCF001,0xE000FF00),ivec4(0xF3F0FFE0,0xFF00FCF0,0xFFE0FF00,0xFCF0FFE0),ivec4(0xFF00F3F0,0xFFE0FE00,0xFCF001E0,0x00FF00FC),ivec4(0xF0FFE0FF,0x00F3F0FF,0xE0FF00FC,0xF0FFE0FF),ivec4(0x00FCF0FF,0xE0FF00F2,0xF001E000,0xFF00FCF0),ivec4(0xFFE0FF00,0xFCF0FFE0,0xFF00F3F0,0xFFE0FF00),ivec4(0xFCF0FFE0,0xFF00FCF0,0xFFE0FE00,0xF3F0FFE0),ivec4(0xFF00FCF0,0xFFE0FF00,0xFCF0FFE0,0xFF00F3F0),ivec4(0xFFE0FF00,0xFCF0FFE0,0xFE00FCF0,0x01E000FF),ivec4(0x00F3F0FF,0xE0FF00FC,0xF0FFE0FF,0x00FCF0FF),ivec4(0xE0FF00F3,0xF0FFE0FE,0x00FCF001,0xE000FF00),ivec4(0xFCF0FFE0,0xFF00F3F0,0xFFE0FF00,0xFCF0FFE0),ivec4(0xFF00FCF0,0xFFE0FF00,0xFAF00000,0x00000000)\n);\n#endif\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//This buffer has nothing to do with the SID-emulation, it's just some basic eye-candy to set the mood :)\n\n//Rendered into a virtual pixel perfect c64 buffer.\n//We upscale it for a nice CRT blur effect in the target mainImage \n\n// Calibrated C64 Color Palette\nconst vec3 palette[] = vec3[](\n    vec3(0x00, 0x00, 0x00)/255.0, // 0 Black\n    vec3(0xFF, 0xFF, 0xFF)/255.0, // 1 White\n    vec3(0x8C, 0x3E, 0x34)/255.0, // 2 Red\n    vec3(0x7A, 0xBF, 0xC7)/255.0, // 3 Cyan\n    vec3(0x8D, 0x47, 0xB3)/255.0, // 4 Purple\n    vec3(0x68, 0xA9, 0x41)/255.0, // 5 Green\n    vec3(0x3E, 0x31, 0xA2)/255.0, // 6 Blue\n    vec3(0xD0, 0xDC, 0x71)/255.0, // 7 Yellow\n    vec3(0x90, 0x5F, 0x25)/255.0, // 8 Orange\n    vec3(0x57, 0x42, 0x00)/255.0, // 9 Brown\n    vec3(0xBB, 0x77, 0x6D)/255.0, // 10 Light Red\n    vec3(0x54, 0x54, 0x54)/255.0, // 11 Dark Gray\n    vec3(0x80, 0x80, 0x80)/255.0, // 12 Medium Gray\n    vec3(0xAC, 0xEA, 0x88)/255.0, // 13 Light Green\n    vec3(0x7C, 0x70, 0xDA)/255.0, // 14 Light Blue\n    vec3(0xAB, 0xAB, 0xAB)/255.0  // 15 Light Gray\n);\n\n// C64 font (8x8 bits per entry).\nconst ivec2 font[] = ivec2[](\n    ivec2(0x00000000, 0x00000000), // Starting on ASCII 32 (space)\n    ivec2(0x18181818, 0x00001800),\n    ivec2(0x66666600, 0x00000000),\n    ivec2(0x6666ff66, 0xff666600),\n    ivec2(0x183e603c, 0x067c1800),\n    ivec2(0x62660c18, 0x30664600),\n    ivec2(0x3c663c38, 0x67663f00),\n    ivec2(0x060c1800, 0x00000000),\n    ivec2(0x0c183030, 0x30180c00),\n    ivec2(0x30180c0c, 0x0c183000),\n    ivec2(0x00663cff, 0x3c660000),\n    ivec2(0x0018187e, 0x18180000),\n    ivec2(0x00000000, 0x00181830),\n    ivec2(0x0000007e, 0x00000000),\n    ivec2(0x00000000, 0x00181800),\n    ivec2(0x0003060c, 0x18306000),\n    ivec2(0x3c666e76, 0x66663c00),\n    ivec2(0x18183818, 0x18187e00),\n    ivec2(0x3c66060c, 0x30607e00),\n    ivec2(0x3c66061c, 0x06663c00),\n    ivec2(0x060e1e66, 0x7f060600),\n    ivec2(0x7e607c06, 0x06663c00),\n    ivec2(0x3c66607c, 0x66663c00),\n    ivec2(0x7e660c18, 0x18181800),\n    ivec2(0x3c66663c, 0x66663c00),\n    ivec2(0x3c66663e, 0x06663c00),\n    ivec2(0x00001800, 0x00180000),\n    ivec2(0x00001800, 0x00181830),\n    ivec2(0x0e183060, 0x30180e00),\n    ivec2(0x00007e00, 0x7e000000),\n    ivec2(0x70180c06, 0x0c187000),\n    ivec2(0x3c66060c, 0x18001800),\n    ivec2(0x3c666e6e, 0x60623c00), \n    ivec2(0x183c667e, 0x66666600),\n    ivec2(0x7c66667c, 0x66667c00),\n    ivec2(0x3c666060, 0x60663c00),\n    ivec2(0x786c6666, 0x666c7800),\n    ivec2(0x7e606078, 0x60607e00),\n    ivec2(0x7e606078, 0x60606000),\n    ivec2(0x3c66606e, 0x66663c00),\n    ivec2(0x6666667e, 0x66666600),\n    ivec2(0x3c181818, 0x18183c00),\n    ivec2(0x1e0c0c0c, 0x0c6c3800),\n    ivec2(0x666c7870, 0x786c6600),\n    ivec2(0x60606060, 0x60607e00),\n    ivec2(0x63777f6b, 0x63636300),\n    ivec2(0x66767e7e, 0x6e666600),\n    ivec2(0x3c666666, 0x66663c00),\n    ivec2(0x7c66667c, 0x60606000),\n    ivec2(0x3c666666, 0x663c0e00),\n    ivec2(0x7c66667c, 0x786c6600),\n    ivec2(0x3c66603c, 0x06663c00),\n    ivec2(0x7e181818, 0x18181800),\n    ivec2(0x66666666, 0x66663c00),\n    ivec2(0x66666666, 0x663c1800),\n    ivec2(0x6363636b, 0x7f776300),\n    ivec2(0x66663c18, 0x3c666600),\n    ivec2(0x6666663c, 0x18181800),\n    ivec2(0x7e060c18, 0x30607e00),\n    ivec2(0x3c303030, 0x30303c00),\n    ivec2(0x0c12307c, 0x3062fc00),\n    ivec2(0x3c0c0c0c, 0x0c0c3c00),\n    ivec2(0x00183c7e, 0x18181818),\n    ivec2(0x0010307f, 0x7f301000)\n);\n\n//   6569   |  PAL-B |  320 x 200, 403 x 284 including border\nconst ivec2 RES=ivec2(320, 200);\nconst ivec2 RES_OVERSCAN=ivec2(403, 284);\nconst ivec2 OFFSET=ivec2((RES_OVERSCAN.x-RES.x)/2, (RES_OVERSCAN.y-RES.y)/2);\n\nconst float WIDTH = 320.0, HEIGHT = 200.0;\nconst int CHAR_SIZE = 8; // Size of the character in pixels (8x8)\n\nvec3 renderChar(vec3 backgroundColor, vec3 fontColor, ivec2 pixelCoord, int ascii, ivec2 pos) {\n    pixelCoord -= pos;\n\n    // Check if the pixel is outside the 8x8 character bounds\n    if (pixelCoord.x < 0 || pixelCoord.y < 0 || pixelCoord.x >= CHAR_SIZE || pixelCoord.y >= CHAR_SIZE) {\n        return backgroundColor;\n    }\n\n    // Calculate character space coordinates\n    ivec2 charCoord = pixelCoord % CHAR_SIZE;\n    charCoord.y=7-charCoord.y;\n\n    // Fetch glyph data for the ASCII character\n    ivec2 glyph = font[ascii-32];\n\n    // Determine which int to use from the glyph based on the Y coordinate\n    int glyphRow = charCoord.y / 4;\n    int bitRow = charCoord.y % 4;\n\n    // Shift the bits to the right based on the X coordinate\n    int mask = 1 << (7 - charCoord.x);\n    bool isBitSet = (((glyphRow == 0 ? glyph.y : glyph.x) >> (bitRow * 8)) & mask) != 0;\n\n    return isBitSet ? fontColor : backgroundColor;\n}\n\n// Render the 320 x 200 C64 native pixels at 1:1\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pixelPos=ivec2(fragCoord);\n    if (pixelPos.x<OFFSET.x||pixelPos.x>=OFFSET.x+RES.x||pixelPos.y<OFFSET.y||pixelPos.y>=OFFSET.y+RES.y)\n    {\n        fragColor.xyz=palette[14]; // Light Blue for border\n    } else\n    {\n\n        // Main screen area\n        vec3 color=palette[6];\n        vec3 textColor=palette[14];\n\n        const int text[] = int[](\n//**** COMMODORE 64 BASIC V2 ****\n0x04012A, 0x05012A, 0x06012A, 0x07012A, 0x08011C, 0x090143, 0x0A014F, 0x0B014D, 0x0C014D, 0x0D014F, 0x0E0144, 0x0F014F, 0x100152, 0x110145, 0x12011C, 0x130136, 0x140134, 0x15011C, 0x160142, 0x170141, 0x180153, 0x190149, 0x1A0143, 0x1B011C, 0x1C0156, 0x1D0132, 0x1E011C, 0x1F012A, 0x20012A, 0x21012A, 0x22012A,\n//64K RAM SYSTEM 38911 BASIC BYTES FREE\n0x010336,0x020334,0x03034B,0x050352,0x060341,0x07034D,0x090353,0x0A0359,0x0B0353,0x0C0354,0x0D0345,0x0E034D,0x110333,0x120338,0x130339,0x140331,0x150331,0x170342,0x180341,0x190353,0x1A0349,0x1B0343,0x1D0342,0x1E0359,0x1F0354,0x200345,0x210353,0x230346,0x240352,0x250345,0x260345,\n//READY.\n0x000552, 0x010545, 0x020541, 0x030544, 0x040559, 0x05052E,\n//LOAD\n0x00064C, 0x01064F, 0x020641, 0x030644,\n//PRESS PLAY ON TAPE\n0x000850,0x010852,0x020845,0x030853,0x040853,0x060850,0x07084C,0x080841,0x090859,0x0B084F,0x0C084E,0x0E0854,0x0F0841,0x100850,0x110845,\n//OK\n0x00094F,0x01094B,\n//SEARCHING\n0x000B53, 0x010B45, 0x020B41, 0x030B52, 0x040B43, 0x050B48, 0x060B49, 0x070B4E, 0x080B47,\n//FOUND\n0x000C46,0x010C4F,0x020C55,0x030C4E,0x040C44,\n//LOADING\n0x000D4C, 0x010D4F, 0x020D41, 0x030D44, 0x040D49, 0x050D4E, 0x060D47,\n//READY.\n0x000E52, 0x010E45, 0x020E41, 0x030E44, 0x040E59, 0x050E2E,\n//RUN\n0x000F52, 0x010F55, 0x020F4E\n);\n    \n        //Render main text\n        for (int i = 0; i < text.length(); i++) {\n            int encodedChar = text[i];\n            int xPos = (encodedChar >> 16) & 0xFF; // Extract x position\n            int yPos = (encodedChar >> 8) & 0xFF; // Extract y position\n            int charCode = encodedChar & 0xFF;     // Extract ASCII character\n            ivec2 charPos = ivec2(xPos * 8 + OFFSET.x, yPos * 8 + OFFSET.y);\n            color = renderChar(color, textColor, pixelPos, charCode, charPos);\n        }\n        \n#ifdef QUICKSTART\n        const int instructions[] = int[](80, 76, 69, 65, 83, 69, 32, 68, 73, 83, 65, 66, 76, 69, 32, 81, 85, 73, 67, 75, 83, 84, 65, 82, 84, 32, 73, 78, 32, 67, 79, 77, 77, 79, 78, 32, 84, 65, 66);\n        const int brightnessIndex[] = int[]( 8, 4, 14, 12, 5, 10, 15, 3, 7, 13, 1);\n        //Render instructions\n        for (int i = 0; i < instructions.length(); i++) {\n            ivec2 charPos = ivec2(i * 8 + OFFSET.x, 17 * 8 + OFFSET.y);\n            float nEntries=float(brightnessIndex.length());\n            int colorIndex = int((nEntries-1.0) - abs(mod(iTime * 32.0 - float(i), nEntries*2.0) - (nEntries-1.0)));\n            color = renderChar(color, palette[brightnessIndex[colorIndex]], pixelPos, instructions[i], charPos);\n        }\n        const int songname[] = int[](81, 85, 73, 67, 75, 83, 84, 65, 82, 84);\n#endif\n        //Render song title from SID-dump data\n        for (int i = 0; i < songname.length(); i++) {\n            ivec2 charPos = ivec2((i+6) * 8 + OFFSET.x, 12 * 8 + OFFSET.y);\n            color = renderChar(color, textColor, pixelPos, songname[i], charPos);\n        }\n\n        // Output color\n        fragColor = vec4(color, 1.0);\n    }\n    //Dark bacground \n    if (pixelPos.x>=RES_OVERSCAN.x||pixelPos.y>=RES_OVERSCAN.y||pixelPos.x==0||pixelPos.y==0)\n        fragColor.xyz=vec3(0.2);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}