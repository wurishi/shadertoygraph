{"ver":"0.1","info":{"id":"MtlfRj","date":"1512547082","viewed":111,"name":"Distance Cells","username":"doomtaters","description":"cells with movement, WIP","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cells"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define c_points 128\n\nvec3 hsl2rgb( in vec3 c ){\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0,1.0);\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nfloat rand1( float x ) {\n    return fract(sin(x*9945.2543)*7239.543);\n}\n\nfloat rand1( int x ) {\n    return rand1( float(x) );\n}\n\nfloat rand2( float x ) {\n    return rand1( x + iTime );\n}\n\nfloat rand2( int x ) {\n    return rand2( float(x) );\n}\n\nfloat distance2( vec2 a, vec2 b ) {\n    float x = a.x-b.x;\n    float y = a.y-b.y;\n    return x*x + y*y;\n}\n\nvec2 translate( vec2 screenSpace ) {\n    return screenSpace/iResolution.y;\n}\n\nvec2 position( int i ) {\n    return vec2( iResolution.x/iResolution.y*rand1(i) + sin((iTime+15.)*rand1(i+99)/5.)/3., rand1(i+999) + cos((iTime+15.)*rand1(i+99)/5.)/3. );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int closest=-1;\n    float dis=999.;\n    \n    for( int i = 0; i < c_points; i++ ) {\n        float distanceToPoint = distance2( position(i), translate(fragCoord) );\n        if( distanceToPoint < dis ) {\n            closest = i;\n            dis = distanceToPoint;\n        }\n    }\n    \n    if( dis<.00001 ) {\n        fragColor = vec4( .4, .8, .4, 1. );\n    } else {\n    \tfragColor = vec4( hsl2rgb(vec3(rand1(closest+1),1.,.5/(dis*256.+1.))), 1. );\n    }\n}\n\n","name":"Image","description":"","type":"image"}]}