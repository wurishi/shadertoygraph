{"ver":"0.1","info":{"id":"3tXcWS","date":"1592871226","viewed":57,"name":"Metaball groupings","username":"Mischawake","description":"Grouping metaballs by color ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["metaball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Metaball{\n    vec2 pos;\n    float r;\n    vec3 col;\n};\n\nvec4 calcball( Metaball ball, vec2 uv)\n{\n    float dst = ball.r / (pow(abs(uv.x - ball.pos.x), 2.) + pow(abs(uv.y - ball.pos.y), 2.));\n    return vec4(ball.col * dst, dst);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    Metaball b0;\n    Metaball b1;\n    Metaball b2;\n    Metaball b3;\n    Metaball b4;\n    Metaball b5;\n    Metaball b6;\n    Metaball b7;\n    Metaball b8;\n    \n    float rad = 0.0009;\n    float jiggle = 0.01;\n    float threshold = 0.1;\n    float reduce = 0.75;\n    \n    b0.pos = vec2(0.2,0.8) + vec2(sin(iTime*10.0), cos(iTime*0.0)) * jiggle;\n    b1.pos = vec2(0.4,0.8) + vec2(sin(iTime*0.0), cos(iTime*5.0)) * jiggle;\n    b2.pos = vec2(0.6,0.8) + vec2(sin(iTime*2.0), cos(iTime*2.0)) * jiggle;\n    b3.pos = vec2(0.8,0.8) + vec2(sin(iTime*2.0), cos(iTime*10.0)) * jiggle;\n    b4.pos = vec2(0.2,0.6) + vec2(sin(iTime*0.0), cos(iTime*5.0)) * jiggle;\n    b5.pos = vec2(0.4,0.6) + vec2(sin(iTime*4.0), cos(iTime*4.0)) * jiggle;\n    b6.pos = vec2(0.6,0.6) + vec2(sin(iTime*10.0), cos(iTime*3.0)) * jiggle;\n    b7.pos = vec2(0.8,0.6) + vec2(sin(iTime*5.0), cos(iTime*0.0)) * jiggle;\n   \n   \tb8.pos = abs(vec2(sin(iTime*0.25), cos(iTime*0.15)));\n    \n    \n    b0.r = rad;\n    b1.r = rad;\n    b2.r = rad;\n    b3.r = rad;\n    b4.r = rad;\n    b5.r = rad;\n    b6.r = rad;\n    b7.r = rad;\n    b8.r = rad;\n \n    b0.col = vec3(1.0,0.0,0.0);\n    b1.col = vec3(0.0,0.0,1.0);\n    b2.col = vec3(0.0,1.0,0.0);\n    b3.col = vec3(1.0,0.0,0.0);\n    b4.col = vec3(0.0,0.0,1.0);\n    b5.col = vec3(0.0,0.0,1.0);\n    b6.col = vec3(1.0,0.0,0.0);\n    b7.col = vec3(1.0,0.0,0.0);\n    b8.col = vec3(1.0,0.0,0.0);\n    \n    vec4 ball0 = calcball(b0, uv);\n    vec4 ball1 = calcball(b1, uv);\n    vec4 ball2 = calcball(b2, uv);\n    vec4 ball3 = calcball(b3, uv);\n    vec4 ball4 = calcball(b4, uv);\n    vec4 ball5 = calcball(b5, uv);\n    vec4 ball6 = calcball(b6, uv);\n    vec4 ball7 = calcball(b7, uv);\n    vec4 ball8 = calcball(b8, uv);\n    \n\n    vec3 color = ball0.rgb + ball1.rgb + ball2.rgb + ball3.rgb + ball4.rgb + ball5.rgb + ball6.rgb + ball7.rgb + ball8.rgb;\n    \n\n    \n    if( color.r > color.g && color.r > color.b ){\n        \n        color.r -= max( color.g, color.b) * reduce;\n \n        \n        color.g = 0.0;\n        color.b = 0.0;\n        \n        \n        if( color.r < threshold )\n            color.r = 0.0;\n        else\n            color.r = 1.0;\n    }\n    \n    if( color.g > color.r && color.g > color.b ){\n        \n        \n        color.g -= max( color.r, color.b) * reduce;\n        \n        color.r = 0.0;\n        color.b = 0.0;\n        \n        \n        \n        if( color.g < threshold )\n            color.g = 0.0;\n        else\n            color.g = 1.0;\n    }\n    \n    if( color.b > color.g && color.b > color.r ){\n        \n        color.b -= max( color.g, color.r) * reduce;\n        \n        color.g = 0.0;\n        color.r = 0.0;\n        \n        \n        if( color.b < threshold )\n            color.b = 0.0;\n        else\n            color.b = 1.0;\n    }\n    \n   \n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}