{"ver":"0.1","info":{"id":"Wl2XDK","date":"1567231442","viewed":127,"name":"Mandelbrot Variant Generator","username":"tom_da_boom","description":"Basic Mandelbrot set generator that modulates in shape over time.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 toModArg( in vec2 z) {\n\tfloat modulus = sqrt(z.x*z.x + z.y*z.y);\n    float argument = atan(z.y/z.x);\n    \n    return vec2(modulus, argument);\n}\n\nvec2 fromModArg( in vec2 z) {\n\tfloat a = z.x * cos(z.y);\n    float b = z.x * sin(z.y);\n    return vec2(a, b);\n}\n\nvec2 power( in vec2 z, in float p) {\n\tvec2 zma = toModArg(z);\n    \n    float zpm = pow(zma.x, p);\n    float zpa = zma.y * p;\n    vec2 zpma = vec2(zpm, zpa);\n    \n    return fromModArg(zpma);\n}\n\nfloat mandel( in vec2 coord){\n    vec2 c = coord;\n    vec2 z = c;\n    \n    for (float i=0.0; i<80.0; i+=1.0){\n        vec2 zSquared = vec2(0, 0);\n        zSquared.x = z.x*z.x - z.y*z.y;\n        zSquared.y = 2.0*z.x*z.y;\n        \n        \n        z = zSquared + c;\n        \n        float modZ = sqrt( z.x*z.x + z.y*z.y);\n        \n        if (modZ > 2.0){return i;}\n    }\n    \n    return 80.0;\n}\n\nfloat mandelPow( in vec2 coord, in float p) {\n    \n    vec2 c = coord;\n    vec2 z = c;\n    \n    for (float i=0.0; i<80.0; i+=1.0){\n        vec2 zP = power(z, p);\n        z = zP + c;\n        \n        float modZ = sqrt( z.x*z.x + z.y*z.y);\n        \n        if (modZ > 2.0){return i;}\n    }\n    \n    return 80.0;\n\t\n}\n\n//NOT MINE::::\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    vec2 xy = vec2(0.0, 0.0);\n    //bottomLeft = iMouse.xy / iResolution.xx;\n    float ytox = iResolution.y / iResolution.x;\n    float xLen = 6.0;\n    \n    vec2 bottomLeft = vec2(-3.0, -0.5*xLen*ytox);\n    \n    \n    xy.x = (fragCoord.x/iResolution.x)*xLen + bottomLeft.x;\n    xy.y = (fragCoord.y/iResolution.y)*xLen*ytox + bottomLeft.y;\n    \n    float iters = mandelPow(xy, 2.0 * sin(0.125*iTime));\n    \n    vec3 hsv = vec3((iters)/80.0, (iters)/80.0, (80.0-iters)/80.0 );\n    vec3 rgb = hsv2rgb(hsv);\n    \n    fragColor = vec4(rgb.r, rgb.b, rgb.g, 1);\n    \n}","name":"Image","description":"","type":"image"}]}