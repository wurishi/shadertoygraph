{"ver":"0.1","info":{"id":"sdl3WX","date":"1616677240","viewed":310,"name":"draw functions","username":"tbx","description":"This is simply draw some lines to see how the maths function looks like","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["maths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(vec2 st, float width)\n{\n    return smoothstep(width, 0.0, abs(st.y - st.x));\n}\n\nfloat gaussian(float x, float a, float b, float c)\n{\n    float x1 = (x - b);\n    float x2 = (x1 * x1) / (2.0 * (c * c));\n    float x3 = a * exp(-x2);\n    return x3;\n}\n\nfloat distanceLine(vec2 uv, vec2 p1, vec2 p2, float width)\n{\n    vec2 dir0 = p2 - p1;\n    vec2 dir1 = uv - p1;\n    \n    float h = clamp(dot(dir1, dir0)/dot(dir0, dir0), 0.0, 1.0);\n    float d = length(dir1 - dir0 * h) - width * 0.5;\n    \n    float w = fwidth(0.5 * d) * 2.0;\n    \n    //float o = 1.0 - smoothstep(-w, w, d - 0.01);\n    float i = 1.0 - smoothstep(-w, w, d);\n    \n    return i;\n}\n\nfloat drawPoint(vec2 uv, vec2 p, float radius)\n{\n    float d = distance(uv, p);\n    return d < radius ? 1.0 : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec2 ste = uv * 2.0 - 1.0;\n    \n    float asp = iResolution.y / iResolution.x;\n    //ste.y *= asp;\n    \n    float factor = 0.0;\n    \n    // ------sin------\n    factor = sin(ste.x * 3.1415);\n    float lineR = line(vec2(factor, ste.y), 0.01);\n    // ------sin------\n    \n    // ------gaussian------\n    //factor = gaussian(ste.x * 3.1415926, 1.0, 0.0, 0.25);\n    //float lineR = line(vec2(factor, ste.y), 0.01);\n    // ------gaussian------\n    \n    //lineR += distanceLine(ste, vec2(0.0, 0.0), vec2(0.5, 1.0), 0.005);\n    //lineR += distanceLine(ste, vec2(0.5, 1.0), vec2(1.0, 0.0), 0.005);\n\n    float lineG = line(vec2(0.5, uv.y), 0.005);\n    float lineB = line(vec2(0.5, uv.x), 0.005);\n\n    col = vec3(lineR, lineG, lineB);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}