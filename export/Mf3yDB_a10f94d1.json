{"ver":"0.1","info":{"id":"Mf3yDB","date":"1731081817","viewed":36,"name":"Layered Fractal","username":"Psybersurfer","description":"Layered Fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Floating fractal layers with drifting offsets\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.3, 0.7);\n    vec3 b = vec3(0.7, 0.6, 0.4);\n    vec3 c = vec3(1.0, 0.8, 0.5);\n    vec3 d = vec3(0.6, 0.4, 0.2);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 finalColor = vec3(0.0);\n\n    for (float i = 0.0; i < 5.0; i++) {\n        // Apply drifting offset for each layer\n        uv = fract(uv * 1.5 + vec2(sin(iTime * 0.2 + i * 0.4), cos(iTime * 0.3 + i * 0.5))) - 0.5;\n        \n        // Generate fractal wave effect\n        float d = length(uv) * exp(-length(uv));\n        vec3 col = palette(d + i * 0.3 + iTime * 0.1);\n\n        // Adjust wave frequency for floating effect\n        d = abs(sin(d * 12.0 + iTime) / 10.0);\n        finalColor += col * pow(0.02 / d, 1.4);\n    }\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}