{"ver":"0.1","info":{"id":"fs3SRj","date":"1633468556","viewed":80,"name":"RGB effect","username":"ria8651","description":"RGB effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Lower resolution\n    float vertical_resolution = 60.0;\n    float horizontal_resolution = 100.0;\n    \n    vec2 scale = vec2(horizontal_resolution, vertical_resolution);\n    \n    vec2 rounded_uv = floor(uv * scale) / scale;\n    \n    vec3 colour = texture(iChannel0, rounded_uv).rgb;\n    \n    // Colour seperation\n    int index = int(uv.x * scale) % 3;\n    if (index == 0) {\n        colour *= vec3(1, 0, 0);\n    }\n    \n    if (index == 1) {\n        colour *= vec3(0, 1, 0);\n    }\n    \n    if (index == 2) {\n        colour *= vec3(0, 0, 1);\n    }\n    \n    // Border\n    vec2 border_size = vec2(0.0);\n    \n    vec2 grid = mod((uv * scale), vec2(1.0));\n    vec2 areas = step(border_size, grid) * step(border_size, 1.0 - grid);\n    float border = areas.x * areas.y;\n    \n    // Output\n    fragColor = vec4(colour * border, 1.0);\n}","name":"Image","description":"","type":"image"}]}