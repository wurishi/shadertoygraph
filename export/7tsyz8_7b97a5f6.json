{"ver":"0.1","info":{"id":"7tsyz8","date":"1647527556","viewed":220,"name":"Bouncing Balls (sound)","username":"incription","description":"balls lol","likes":17,"published":1,"flags":8,"usePreview":0,"tags":["sound","balls","satisfying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define F(x,y) c = mix(x, c, smoothstep(0., fwidth(y), y))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.5;\n    \n    vec3 c = vec3(1);\n    \n    vec2 line_uv = vec2(abs(uv.x), uv.y);\n    float d = sdSegment(line_uv, vec2(.5, 0.), vec2(0., -.5));\n    F(vec3(0), d - .002);\n    \n    for(int i=0;i<SEGMENTS;i++) {\n        if(i<SEGMENTS-1) F(vec3(0), sdSegment(uv, ballPos(i, iTime), ballPos(i + 1, iTime)) - 0.002);\n        \n        F(vec3(0), length(ballPos(i, iTime) - uv)-(0.025+0.002*2.));\n        F(hue_to_rgb(float(i)/float(SEGMENTS)), length(ballPos(i, iTime) - uv)-.025);\n    }\n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SEGMENTS 16\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 hue_to_rgb(float hue){\n        float R = abs(hue * 6. - 3.) - 1.;\n        float G = 2. - abs(hue * 6. - 2.);\n        float B = 2. - abs(hue * 6. - 4.);\n        return clamp(vec3(R,G,B), 0., 1.);\n}\n\nvec2 circle(float x) {\n    return vec2(sin(x), cos(x));\n}\n\nvec2 ballPos(int ball, float time) {\n    float ind = float(ball + 2) / float(SEGMENTS + 3);\n    //ind = (ind - .5) * .5 + .7;\n    float t = time + (ind*.3*time);\n    t = 2. * abs(t / 2. - floor(t / 2. + .5));\n    vec2 start = mix(vec2(-.5, 0.), vec2(0., -.5), ind);\n    vec2 end = vec2(-start.x, start.y);\n    \n    return circle(t*3.141*.5-3.141/4.) / sqrt(2.) * ind - vec2(0, .5);// mix(start, end, t);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    float f = 0.;\n    for(int i=0;i<SEGMENTS;i++) {\n        vec2 p = ballPos(i, time);\n        float d = p.x + 0.5 + p.y;\n        \n        float pitch = 1. * 440. * pow(2., float(i*3)/12.);\n        if(d < 0.05 || (p.x-p.y) > 0.45) f += 1./float(SEGMENTS) * sin(6.2831*pitch*time)*1.;\n    }\n    return vec2( f );\n}","name":"Sound","description":"","type":"sound"}]}