{"ver":"0.1","info":{"id":"3dsBWj","date":"1589745316","viewed":396,"name":"Candle Night","username":"winlandiano","description":"Smoke simulation with navier-stokes fluid dynamics. Buoyancy refers to Fedkiw et al. 2001. Hope to create a feel of a jazz bar but still short of:\n1. 3D volumetric shading\n2. Wax (pseudo)subsurface scattering","likes":10,"published":1,"flags":96,"usePreview":1,"tags":["simulation","fluid","smoke","navierstokes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ltjGRy","filepath":"https://soundcloud.com/goodtimehouse/smooth-jazz","previewfilepath":"https://soundcloud.com/goodtimehouse/smooth-jazz","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Ridge/winlandiano\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n// documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n// permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright\n// notice and this permission notice shall be included in all copies or substantial portions of the Software. THE\n// SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Smoke simulation with navier-stokes fluid dynamics. Buoyancy refers to Fedkiw et al. 2001. Hope to create a feel of a\n// jazz bar but still short of:\n// 1. flame animation\n// 2. 3D volumetric\n// 3. Wax (pseudo)subsurface scattering\n// Thanks to trirop for the great single step jacobi-resolver!\n// Refer to GPU Gems chap. 38: Fast Fluid Dynamics Simulation on the GPU to more detail.\n\nvoid bgCandle(inout vec4 col, vec2 pos, vec2 bgXY, float r, float intensity) {\n    float w = smoothstep(r, r - 0.02, length(pos - bgXY)) * 0.7 * blink(iTime * 2. + hash2(bgXY));\n    col.xyz = mix(col.xyz, SAT(BG_COL * intensity), w);\n    col.w = 1. - (1. - col.w) * (1. - w);\n}\n\nvec2 flameFlicker(vec2 pos) {\n    vec2 res = pos;\n    float t = iTime;\n    float w = smoothstep(.2, -.2, abs(sin(t))) * .3;\n    w += smoothstep(.2, -.2, abs(sin(t + 1.))) * -0.2;\n    w += sin(t) * .1;\n    w += sin(2. * t) * .05;\n    w += sin(4. * t) * .024;\n    res += vec2(w * SAT(pos.y - WICK_POS.y), 0);\n    w = smoothstep(0.7, -0.7, abs(sin(t))) * 0.2;\n    res += vec2(0, SAT(pos.y - WICK_POS.y) * w);\n    return res;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // buffer A/D stores the (vx, vy, t, d):\n    //  - vx, vy: velocity in two directions\n    //  - t: temperature\n    //  - d: smoke density\n\n    bool lit = mod(iTime, ANIM_DUR) < LIT_DUR;\n    float fLit = float(lit);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    float asp_ratio = iResolution.x / iResolution.y;\n    vec2 pos = (uv * 2. - 1.);\n    pos.x *= asp_ratio;\n    float w;\n\n    //    ___           __                              __\n    //   / _ )___ _____/ /_____ ________  __ _____  ___/ /\n    //  / _  / _ `/ __/  '_/ _ `/ __/ _ \\/ // / _ \\/ _  /\n    // /____/\\_,_/\\__/_/\\_\\\\_, /_/  \\___/\\_,_/_//_/\\_,_/\n    //                    /___/\n    vec4 bkg = vec4(0);\n    bkg.rgb = mix(bkg.rgb, BG_COL, smoothstep(.8, -1.5, abs(uv.y - .3)));\n\n    for (float i = -2.; i < 2.; i += .5) {\n        bgCandle(bkg, pos, vec2(i, -.3 + .2 * hash2(vec2(i, 2.))), 0.16, .9);\n    }\n    for (float i = -2.; i < 2.; i += .7) {\n        bgCandle(bkg, pos, vec2(i, -.1 + .3 * hash2(vec2(i * 2., 5.))), 0.14, 1.);\n    }\n    for (float i = -2.; i < 2.; i += .86) {\n        bgCandle(bkg, pos, vec2(i * i, -0.3 + .2 * hash2(vec2(i * 3., 3.))), 0.187, .7);\n    }\n\n    //   _____             ____\n    //  / ___/__ ____  ___/ / /__\n    // / /__/ _ `/ _ \\/ _  / / -_)\n    // \\___/\\_,_/_//_/\\_,_/_/\\__/\n    vec4 color = vec4(0);\n    w = smoothstep(CANDLE_HALF_WIDTH, 0.18, abs(pos.x - WICK_POS.x));\n    w = mix(w, 0., smoothstep(WICK_POS.y - 0.01, WICK_POS.y, pos.y - 0.04 + 0.15 * texture(iChannel2, uv).r));\n    color.rgb = mix(color.rgb, CANDLE_COL, w);\n    color.a += w;\n    color.rgb *= 0.25;  // fake candle shadow\n\n    // wick\n    w = smoothstep(0.02, 0.01, abs(pos.x - WICK_POS.x - 1. + cos((pos.y - WICK_POS.y) * 2.)));\n    w = mix(w, 0., step(WICK_LEN, abs(pos.y - WICK_POS.y - WICK_LEN)));\n\n    vec3 wickColor = vec3(w);\n    color.rgb -= wickColor;\n    color.a += w;\n    color = SAT(color);\n    vec3 wickHot = mix(FLAME_COL, vec3(0.), smoothstep(-0.1, 0.2, length(pos - (WICK_POS + vec2(0.05, 0.2)))));\n    wickHot = mix(vec3(0), wickHot, w);\n    color.rgb += wickHot;\n    color = SAT(color);\n\n    // fake light\n    vec2 wickTipPos = WICK_POS + vec2(0.035, WICK_LEN * 2.);\n    w = mix(smoothstep(0.15, 0.08, length(pos - wickTipPos)) * 4., smoothstep(0.5, 0., length(pos - wickTipPos)) * 8.,\n            fLit);\n    color.rgb *= max(1., w);\n    color = SAT(color);\n\n    //    ______\n    //   / __/ /__ ___ _  ___\n    //  / _// / _ `/  ' \\/ -_)\n    // /_/ /_/\\_,_/_/_/_/\\__/\n    if (lit) {\n        float a2, b2, x2, y2, distortion;\n        vec3 flameCol = vec3(0);\n\n        // left petal\n        // a2 = 0.01;\n        // b2 = 0.25;\n        // x2 = (pos.x - WICK_POS.x + 0.05) / (WICK_POS.y + 1. - pos.y) * .7;\n        // x2 *= x2;\n        // y2 = pos.y - WICK_POS.y;\n        // y2 *= y2;\n        // w = x2 / a2 + y2 / b2;\n        // w = smoothstep(.8, .5, w);\n        // w *= smoothstep(0.02, 0., pos.x - WICK_POS.x);\n        // flameCol += vec3(w);\n\n        // middle petal\n        a2 = 0.01;\n        b2 = 0.15;\n        vec2 ffPos = flameFlicker(pos);\n        x2 = (ffPos.x - 0.02 - WICK_POS.x) / (WICK_POS.y + 1.5 - ffPos.y) * .7;\n        x2 *= x2;\n        y2 = ffPos.y - WICK_POS.y - .38;\n        y2 *= y2;\n        distortion = x2 / a2 + y2 / b2;\n        w = smoothstep(.8, .6, distortion);\n        flameCol += w * FLAME_COL * (1. + 2. * smoothstep(1.5, -2., distortion));\n        color.a += w;\n\n        // bottom black\n        a2 = 0.0004;\n        b2 = 0.04;\n        x2 = (ffPos.x - 0.02 - WICK_POS.x) / (WICK_POS.y + 1.5 - ffPos.y * 15.);\n        x2 *= x2;\n        y2 = ffPos.y - WICK_POS.y - 0.19;\n        y2 *= y2;\n        distortion = x2 / a2 + y2 / b2;\n        w = smoothstep(.6, -.2, distortion);\n        flameCol -= vec3(w) * 2.;\n\n        color.rgb += SAT(flameCol);\n        color.a += w;\n    }\n\n    //    ____           __\n    //   / __/_ _  ___  / /_____\n    //  _\\ \\/  ' \\/ _ \\/  '_/ -_)\n    // /___/_/_/_/\\___/_/\\_\\\\__/\n    // density\n    color += mix(vec4(texture(iChannel0, uv).w), vec4(0), fLit);\n    color = SAT(color);\n\n    fragColor = vec4(mix(bkg.xyz, color.rgb, color.a), 1);\n\n    // visualise velocity\n    // fragColor = vec4(texture(iChannel0, uv).xyz, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define N 21\n// we assume grid scale to be one\n#define HALF_RDX .5\n#define CLICK_INTERVAL 1.\n#define ANIM_DUR 10.\n#define LIT_DUR 3.\n\n// smoke behaviour\n#define AMBIENT_TEMP 26.\n#define WICK_TEMP 300.\n#define TEMP_DIFFUSE 0.99\n#define DENS_DIFFUSE 0.99\n#define VELO_DIFFUSE 0.99\n#define VISCOCITY 0.2\n#define SMOKE_GRAVITY_FACT 0.2\n#define SMOKE_TEMP_FACT 0.3\n\n// candle look\n#define WICK_X 0.\n#define WICK_Y -0.6\n#define CANDLE_HALF_WIDTH 0.2\n#define WICK_LEN 0.07\n\n#define SAT(x) clamp(x, 0., 1.)\n#define COOLING(x) exp(-pow(x, .3))\n\nconst vec2 WICK_POS = vec2(WICK_X, WICK_Y);\nconst vec3 FLAME_COL = vec3(.99, .6, .35);\nconst vec3 CANDLE_COL = vec3(0.92, 0.02, 0.21);\nconst vec3 BG_COL = vec3(.99, .6, .35);\nconst vec4 DIFFUSE_VEC = vec4(VELO_DIFFUSE, VELO_DIFFUSE, TEMP_DIFFUSE, DENS_DIFFUSE);\nconst float TEMP_DIFF = WICK_TEMP - AMBIENT_TEMP;\n\nfloat bilerp(float v11, float v12, float v21, float v22, float w1, float w2) {\n    w1 = SAT(w1);\n    w2 = SAT(w2);\n    return mix(mix(v11, v12, w2), mix(v21, v22, w2), w1);\n}\n\nvec2 bilerp(vec2 v11, vec2 v12, vec2 v21, vec2 v22, vec2 w1, vec2 w2) {\n    w1 = SAT(w1);\n    w2 = SAT(w2);\n    return mix(mix(v11, v12, w2), mix(v21, v22, w2), w1);\n}\n\nvec3 bilerp(vec3 v11, vec3 v12, vec3 v21, vec3 v22, vec3 w1, vec3 w2) {\n    w1 = SAT(w1);\n    w2 = SAT(w2);\n    return mix(mix(v11, v12, w2), mix(v21, v22, w2), w1);\n}\n\nvec2 xyGrad(sampler2D s, vec2 coord, vec2 resXY) {\n    float vL = texture(s, (coord - vec2(1, 0)) / resXY).x;\n    float vR = texture(s, (coord + vec2(1, 0)) / resXY).x;\n    float vB = texture(s, (coord - vec2(0, 1)) / resXY).y;\n    float vT = texture(s, (coord + vec2(0, 1)) / resXY).y;\n\n    return HALF_RDX * vec2(vR - vL, vT - vB);\n}\n\nfloat hash2(vec2 p) {\n    p = 50.0 * fract(p * 0.3183099 + vec2(0.71, 0.113));\n    return -1.0 + 2.0 * fract(p.x * p.y * (p.x + p.y));\n}\n\nfloat blink(float t) {\n    return 1. - pow(2. + sin(t), -5.);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Advection fragment program\n// q(x, t + ât) = q(x - u(x, t)ât, t)\n\n// buffer A stores the (vx, vy, T, d):\n//  - vx, vy: velocity in two directions\n//  - T: temperatore\n//  - d: smoke density\n\n#define h 2.\n\nvec2 eulerInte(vec2 p) {\n    vec2 v = texture(iChannel0, p / iResolution.xy).xy;\n    return p - v * iTimeDelta;\n}\n\nvec2 Rk4Inte(vec2 p) {\n    vec2 r = iResolution.xy;\n    vec2 k1 = texture(iChannel0, p / r).xy;\n    vec2 k2 = texture(iChannel0, (p - 0.5 * h * k1) / r).xy;\n    vec2 k3 = texture(iChannel0, (p - 0.5 * h * k2) / r).xy;\n    vec2 k4 = texture(iChannel0, (p - h * k3) / r).xy;\n    return p - h / 3. * (0.5 * k1 + k2 + k3 + 0.5 * k4);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = uv * 2. - 1.;\n    float asp_ratio = iResolution.x / iResolution.y;\n    pos.x *= asp_ratio;\n    bool lit = mod(iTime, ANIM_DUR) < LIT_DUR;\n\n    vec2 preUV = eulerInte(fragCoord) / iResolution.xy;\n    // vec2 preUV = Rk4Inte(fragCoord) / iResolution.xy;\n    preUV = SAT(preUV);\n    vec4 newV = texture(iChannel0, preUV);\n\n    // apply diffusion\n    newV *= DIFFUSE_VEC;\n\n    // hot air and smoke\n    // reference: Fedkiw et al. 2001\n    // reference: https://youtu.be/mLp_rSBzteI?t=40\n    vec2 wickTipPos = WICK_POS + vec2(0.035, WICK_LEN * 2.);\n    float cool = COOLING(mod(iTime, ANIM_DUR) - LIT_DUR);\n    if (length(pos - wickTipPos) < 0.02) {\n        if (lit) {\n            newV.z = WICK_TEMP;\n        } else {\n            newV.z = AMBIENT_TEMP + TEMP_DIFF * cool;\n            newV.w = SAT(cool * 3.);\n        }\n    }\n    vec2 forceBuoyancy = vec2(0, -SMOKE_GRAVITY_FACT * newV.w + SMOKE_TEMP_FACT * max(0., newV.z - AMBIENT_TEMP));\n    newV.xy += forceBuoyancy;\n\n    // viscosity term\n    vec2 gL = xyGrad(iChannel0, fragCoord - vec2(1, 0), iResolution.xy);\n    vec2 gR = xyGrad(iChannel0, fragCoord + vec2(1, 0), iResolution.xy);\n    vec2 gB = xyGrad(iChannel0, fragCoord - vec2(0, 1), iResolution.xy);\n    vec2 gT = xyGrad(iChannel0, fragCoord + vec2(0, 1), iResolution.xy);\n    vec2 lapU = (gR - gL + gT - gB) * HALF_RDX;\n    newV.xy += VISCOCITY * lapU * iTimeDelta;\n\n    // close boundary condition, pure Neumann pressure boundary\n    if (fragCoord.x < 2. || fragCoord.x > iResolution.x - 2. || fragCoord.y < 2. || fragCoord.y > iResolution.y - 2.) {\n        newV.xy = vec2(0);\n    }\n\n    fragColor = newV;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// calculate the divergence\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float wL = texture(iChannel0, (fragCoord - vec2(1, 0)) / iResolution.xy).x;\n    float wR = texture(iChannel0, (fragCoord + vec2(1, 0)) / iResolution.xy).x;\n    float wB = texture(iChannel0, (fragCoord - vec2(0, 1)) / iResolution.xy).y;\n    float wT = texture(iChannel0, (fragCoord + vec2(0, 1)) / iResolution.xy).y;\n    float div = (wR - wL + wT - wB) * HALF_RDX;\n\n    fragColor = vec4(div, 0.0, 0.0, 0.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Created by Robert Schuetze - trirop/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Pressure solver\n// a single stepp jacobi solver since on shadertoy buffer render is called only once between frames.\nfloat rhs(int x, int y) {\n    vec2 p = gl_FragCoord.xy + vec2(x, y);\n    return texture(iChannel0, p / iResolution.xy).x;\n}\n\n// 1/|x| - like distribution (RHS = right hand side = div(v))\nfloat TwentyStepRHS(void) {\n    float p = 0.;\n    p += 1. * rhs(-19, 0);\n    p += 19. * rhs(-18, -1);\n    p += 4. * rhs(-18, 0);\n    p += 19. * rhs(-18, 1);\n    p += 171. * rhs(-17, -2);\n    p += 72. * rhs(-17, -1);\n    p += 377. * rhs(-17, 0);\n    p += 72. * rhs(-17, 1);\n    p += 171. * rhs(-17, 2);\n    p += 969. * rhs(-16, -3);\n    p += 612. * rhs(-16, -2);\n    p += 3521. * rhs(-16, -1);\n    p += 1360. * rhs(-16, 0);\n    p += 3521. * rhs(-16, 1);\n    p += 612. * rhs(-16, 2);\n    p += 969. * rhs(-16, 3);\n    p += 3876. * rhs(-15, -4);\n    p += 3264. * rhs(-15, -3);\n    p += 20587. * rhs(-15, -2);\n    p += 12040. * rhs(-15, -1);\n    p += 34121. * rhs(-15, 0);\n    p += 12040. * rhs(-15, 1);\n    p += 20587. * rhs(-15, 2);\n    p += 3264. * rhs(-15, 3);\n    p += 3876. * rhs(-15, 4);\n    p += 11628. * rhs(-14, -5);\n    p += 12240. * rhs(-14, -4);\n    p += 84524. * rhs(-14, -3);\n    p += 66432. * rhs(-14, -2);\n    p += 206531. * rhs(-14, -1);\n    p += 111044. * rhs(-14, 0);\n    p += 206531. * rhs(-14, 1);\n    p += 66432. * rhs(-14, 2);\n    p += 84524. * rhs(-14, 3);\n    p += 12240. * rhs(-14, 4);\n    p += 11628. * rhs(-14, 5);\n    p += 27132. * rhs(-13, -6);\n    p += 34272. * rhs(-13, -5);\n    p += 259012. * rhs(-13, -4);\n    p += 256160. * rhs(-13, -3);\n    p += 874636. * rhs(-13, -2);\n    p += 636608. * rhs(-13, -1);\n    p += 1296593. * rhs(-13, 0);\n    p += 636608. * rhs(-13, 1);\n    p += 874636. * rhs(-13, 2);\n    p += 256160. * rhs(-13, 3);\n    p += 259012. * rhs(-13, 4);\n    p += 34272. * rhs(-13, 5);\n    p += 27132. * rhs(-13, 6);\n    p += 50388. * rhs(-12, -7);\n    p += 74256. * rhs(-12, -6);\n    p += 614516. * rhs(-12, -5);\n    p += 733376. * rhs(-12, -4);\n    p += 2752228. * rhs(-12, -3);\n    p += 2539344. * rhs(-12, -2);\n    p += 5691972. * rhs(-12, -1);\n    p += 3802112. * rhs(-12, 0);\n    p += 5691972. * rhs(-12, 1);\n    p += 2539344. * rhs(-12, 2);\n    p += 2752228. * rhs(-12, 3);\n    p += 733376. * rhs(-12, 4);\n    p += 614516. * rhs(-12, 5);\n    p += 74256. * rhs(-12, 6);\n    p += 50388. * rhs(-12, 7);\n    p += 75582. * rhs(-11, -8);\n    p += 127296. * rhs(-11, -7);\n    p += 1155388. * rhs(-11, -6);\n    p += 1616160. * rhs(-11, -5);\n    p += 6672148. * rhs(-11, -4);\n    p += 7480032. * rhs(-11, -3);\n    p += 18513100. * rhs(-11, -2);\n    p += 15789824. * rhs(-11, -1);\n    p += 26001936. * rhs(-11, 0);\n    p += 15789824. * rhs(-11, 1);\n    p += 18513100. * rhs(-11, 2);\n    p += 7480032. * rhs(-11, 3);\n    p += 6672148. * rhs(-11, 4);\n    p += 1616160. * rhs(-11, 5);\n    p += 1155388. * rhs(-11, 6);\n    p += 127296. * rhs(-11, 7);\n    p += 75582. * rhs(-11, 8);\n    p += 92378. * rhs(-10, -9);\n    p += 175032. * rhs(-10, -8);\n    p += 1747226. * rhs(-10, -7);\n    p += 2803840. * rhs(-10, -6);\n    p += 12751388. * rhs(-10, -5);\n    p += 16859024. * rhs(-10, -4);\n    p += 46169052. * rhs(-10, -3);\n    p += 48243200. * rhs(-10, -2);\n    p += 88069168. * rhs(-10, -1);\n    p += 68625984. * rhs(-10, 0);\n    p += 88069168. * rhs(-10, 1);\n    p += 48243200. * rhs(-10, 2);\n    p += 46169052. * rhs(-10, 3);\n    p += 16859024. * rhs(-10, 4);\n    p += 12751388. * rhs(-10, 5);\n    p += 2803840. * rhs(-10, 6);\n    p += 1747226. * rhs(-10, 7);\n    p += 175032. * rhs(-10, 8);\n    p += 92378. * rhs(-10, 9);\n    p += 92378. * rhs(-9, -10);\n    p += 194480. * rhs(-9, -9);\n    p += 2144142. * rhs(-9, -8);\n    p += 3882736. * rhs(-9, -7);\n    p += 19495658. * rhs(-9, -6);\n    p += 29726528. * rhs(-9, -5);\n    p += 90216308. * rhs(-9, -4);\n    p += 112093952. * rhs(-9, -3);\n    p += 228013680. * rhs(-9, -2);\n    p += 219617664. * rhs(-9, -1);\n    p += 312737680. * rhs(-9, 0);\n    p += 219617664. * rhs(-9, 1);\n    p += 228013680. * rhs(-9, 2);\n    p += 112093952. * rhs(-9, 3);\n    p += 90216308. * rhs(-9, 4);\n    p += 29726528. * rhs(-9, 5);\n    p += 19495658. * rhs(-9, 6);\n    p += 3882736. * rhs(-9, 7);\n    p += 2144142. * rhs(-9, 8);\n    p += 194480. * rhs(-9, 9);\n    p += 92378. * rhs(-9, 10);\n    p += 75582. * rhs(-8, -11);\n    p += 175032. * rhs(-8, -10);\n    p += 2144142. * rhs(-8, -9);\n    p += 4324320. * rhs(-8, -8);\n    p += 24056318. * rhs(-8, -7);\n    p += 41569528. * rhs(-8, -6);\n    p += 140048558. * rhs(-8, -5);\n    p += 202185728. * rhs(-8, -4);\n    p += 459561168. * rhs(-8, -3);\n    p += 532099904. * rhs(-8, -2);\n    p += 850585168. * rhs(-8, -1);\n    p += 743089408. * rhs(-8, 0);\n    p += 850585168. * rhs(-8, 1);\n    p += 532099904. * rhs(-8, 2);\n    p += 459561168. * rhs(-8, 3);\n    p += 202185728. * rhs(-8, 4);\n    p += 140048558. * rhs(-8, 5);\n    p += 41569528. * rhs(-8, 6);\n    p += 24056318. * rhs(-8, 7);\n    p += 4324320. * rhs(-8, 8);\n    p += 2144142. * rhs(-8, 9);\n    p += 175032. * rhs(-8, 10);\n    p += 75582. * rhs(-8, 11);\n    p += 50388. * rhs(-7, -12);\n    p += 127296. * rhs(-7, -11);\n    p += 1747226. * rhs(-7, -10);\n    p += 3882736. * rhs(-7, -9);\n    p += 24056318. * rhs(-7, -8);\n    p += 46448688. * rhs(-7, -7);\n    p += 174151978. * rhs(-7, -6);\n    p += 286712448. * rhs(-7, -5);\n    p += 729241528. * rhs(-7, -4);\n    p += 991865088. * rhs(-7, -3);\n    p += 1792109680. * rhs(-7, -2);\n    p += 1907533696. * rhs(-7, -1);\n    p += 2460787216. * rhs(-7, 0);\n    p += 1907533696. * rhs(-7, 1);\n    p += 1792109680. * rhs(-7, 2);\n    p += 991865088. * rhs(-7, 3);\n    p += 729241528. * rhs(-7, 4);\n    p += 286712448. * rhs(-7, 5);\n    p += 174151978. * rhs(-7, 6);\n    p += 46448688. * rhs(-7, 7);\n    p += 24056318. * rhs(-7, 8);\n    p += 3882736. * rhs(-7, 9);\n    p += 1747226. * rhs(-7, 10);\n    p += 127296. * rhs(-7, 11);\n    p += 50388. * rhs(-7, 12);\n    p += 27132. * rhs(-6, -13);\n    p += 74256. * rhs(-6, -12);\n    p += 1155388. * rhs(-6, -11);\n    p += 2803840. * rhs(-6, -10);\n    p += 19495658. * rhs(-6, -9);\n    p += 41569528. * rhs(-6, -8);\n    p += 174151978. * rhs(-6, -7);\n    p += 321877248. * rhs(-6, -6);\n    p += 917173928. * rhs(-6, -5);\n    p += 1436202848. * rhs(-6, -4);\n    p += 2939586856. * rhs(-6, -3);\n    p += 3736940032. * rhs(-6, -2);\n    p += 5531327920. * rhs(-6, -1);\n    p += 5284992064. * rhs(-6, 0);\n    p += 5531327920. * rhs(-6, 1);\n    p += 3736940032. * rhs(-6, 2);\n    p += 2939586856. * rhs(-6, 3);\n    p += 1436202848. * rhs(-6, 4);\n    p += 917173928. * rhs(-6, 5);\n    p += 321877248. * rhs(-6, 6);\n    p += 174151978. * rhs(-6, 7);\n    p += 41569528. * rhs(-6, 8);\n    p += 19495658. * rhs(-6, 9);\n    p += 2803840. * rhs(-6, 10);\n    p += 1155388. * rhs(-6, 11);\n    p += 74256. * rhs(-6, 12);\n    p += 27132. * rhs(-6, 13);\n    p += 11628. * rhs(-5, -14);\n    p += 34272. * rhs(-5, -13);\n    p += 614516. * rhs(-5, -12);\n    p += 1616160. * rhs(-5, -11);\n    p += 12751388. * rhs(-5, -10);\n    p += 29726528. * rhs(-5, -9);\n    p += 140048558. * rhs(-5, -8);\n    p += 286712448. * rhs(-5, -7);\n    p += 917173928. * rhs(-5, -6);\n    p += 1623903168. * rhs(-5, -5);\n    p += 3762860920. * rhs(-5, -4);\n    p += 5593339456. * rhs(-5, -3);\n    p += 9567332872. * rhs(-5, -2);\n    p += 11195845888. * rhs(-5, -1);\n    p += 13625875600. * rhs(-5, 0);\n    p += 11195845888. * rhs(-5, 1);\n    p += 9567332872. * rhs(-5, 2);\n    p += 5593339456. * rhs(-5, 3);\n    p += 3762860920. * rhs(-5, 4);\n    p += 1623903168. * rhs(-5, 5);\n    p += 917173928. * rhs(-5, 6);\n    p += 286712448. * rhs(-5, 7);\n    p += 140048558. * rhs(-5, 8);\n    p += 29726528. * rhs(-5, 9);\n    p += 12751388. * rhs(-5, 10);\n    p += 1616160. * rhs(-5, 11);\n    p += 614516. * rhs(-5, 12);\n    p += 34272. * rhs(-5, 13);\n    p += 11628. * rhs(-5, 14);\n    p += 3876. * rhs(-4, -15);\n    p += 12240. * rhs(-4, -14);\n    p += 259012. * rhs(-4, -13);\n    p += 733376. * rhs(-4, -12);\n    p += 6672148. * rhs(-4, -11);\n    p += 16859024. * rhs(-4, -10);\n    p += 90216308. * rhs(-4, -9);\n    p += 202185728. * rhs(-4, -8);\n    p += 729241528. * rhs(-4, -7);\n    p += 1436202848. * rhs(-4, -6);\n    p += 3762860920. * rhs(-4, -5);\n    p += 6397998208. * rhs(-4, -4);\n    p += 12613706776. * rhs(-4, -3);\n    p += 17743206112. * rhs(-4, -2);\n    p += 25824041560. * rhs(-4, -1);\n    p += 26826818560. * rhs(-4, 0);\n    p += 25824041560. * rhs(-4, 1);\n    p += 17743206112. * rhs(-4, 2);\n    p += 12613706776. * rhs(-4, 3);\n    p += 6397998208. * rhs(-4, 4);\n    p += 3762860920. * rhs(-4, 5);\n    p += 1436202848. * rhs(-4, 6);\n    p += 729241528. * rhs(-4, 7);\n    p += 202185728. * rhs(-4, 8);\n    p += 90216308. * rhs(-4, 9);\n    p += 16859024. * rhs(-4, 10);\n    p += 6672148. * rhs(-4, 11);\n    p += 733376. * rhs(-4, 12);\n    p += 259012. * rhs(-4, 13);\n    p += 12240. * rhs(-4, 14);\n    p += 3876. * rhs(-4, 15);\n    p += 969. * rhs(-3, -16);\n    p += 3264. * rhs(-3, -15);\n    p += 84524. * rhs(-3, -14);\n    p += 256160. * rhs(-3, -13);\n    p += 2752228. * rhs(-3, -12);\n    p += 7480032. * rhs(-3, -11);\n    p += 46169052. * rhs(-3, -10);\n    p += 112093952. * rhs(-3, -9);\n    p += 459561168. * rhs(-3, -8);\n    p += 991865088. * rhs(-3, -7);\n    p += 2939586856. * rhs(-3, -6);\n    p += 5593339456. * rhs(-3, -5);\n    p += 12613706776. * rhs(-3, -4);\n    p += 20720283328. * rhs(-3, -3);\n    p += 35988002440. * rhs(-3, -2);\n    p += 47530295680. * rhs(-3, -1);\n    p += 57901756420. * rhs(-3, 0);\n    p += 47530295680. * rhs(-3, 1);\n    p += 35988002440. * rhs(-3, 2);\n    p += 20720283328. * rhs(-3, 3);\n    p += 12613706776. * rhs(-3, 4);\n    p += 5593339456. * rhs(-3, 5);\n    p += 2939586856. * rhs(-3, 6);\n    p += 991865088. * rhs(-3, 7);\n    p += 459561168. * rhs(-3, 8);\n    p += 112093952. * rhs(-3, 9);\n    p += 46169052. * rhs(-3, 10);\n    p += 7480032. * rhs(-3, 11);\n    p += 2752228. * rhs(-3, 12);\n    p += 256160. * rhs(-3, 13);\n    p += 84524. * rhs(-3, 14);\n    p += 3264. * rhs(-3, 15);\n    p += 969. * rhs(-3, 16);\n    p += 171. * rhs(-2, -17);\n    p += 612. * rhs(-2, -16);\n    p += 20587. * rhs(-2, -15);\n    p += 66432. * rhs(-2, -14);\n    p += 874636. * rhs(-2, -13);\n    p += 2539344. * rhs(-2, -12);\n    p += 18513100. * rhs(-2, -11);\n    p += 48243200. * rhs(-2, -10);\n    p += 228013680. * rhs(-2, -9);\n    p += 532099904. * rhs(-2, -8);\n    p += 1792109680. * rhs(-2, -7);\n    p += 3736940032. * rhs(-2, -6);\n    p += 9567332872. * rhs(-2, -5);\n    p += 17743206112. * rhs(-2, -4);\n    p += 35988002440. * rhs(-2, -3);\n    p += 57958224640. * rhs(-2, -2);\n    p += 91565303500. * rhs(-2, -1);\n    p += 109719615760. * rhs(-2, 0);\n    p += 91565303500. * rhs(-2, 1);\n    p += 57958224640. * rhs(-2, 2);\n    p += 35988002440. * rhs(-2, 3);\n    p += 17743206112. * rhs(-2, 4);\n    p += 9567332872. * rhs(-2, 5);\n    p += 3736940032. * rhs(-2, 6);\n    p += 1792109680. * rhs(-2, 7);\n    p += 532099904. * rhs(-2, 8);\n    p += 228013680. * rhs(-2, 9);\n    p += 48243200. * rhs(-2, 10);\n    p += 18513100. * rhs(-2, 11);\n    p += 2539344. * rhs(-2, 12);\n    p += 874636. * rhs(-2, 13);\n    p += 66432. * rhs(-2, 14);\n    p += 20587. * rhs(-2, 15);\n    p += 612. * rhs(-2, 16);\n    p += 171. * rhs(-2, 17);\n    p += 19. * rhs(-1, -18);\n    p += 72. * rhs(-1, -17);\n    p += 3521. * rhs(-1, -16);\n    p += 12040. * rhs(-1, -15);\n    p += 206531. * rhs(-1, -14);\n    p += 636608. * rhs(-1, -13);\n    p += 5691972. * rhs(-1, -12);\n    p += 15789824. * rhs(-1, -11);\n    p += 88069168. * rhs(-1, -10);\n    p += 219617664. * rhs(-1, -9);\n    p += 850585168. * rhs(-1, -8);\n    p += 1907533696. * rhs(-1, -7);\n    p += 5531327920. * rhs(-1, -6);\n    p += 11195845888. * rhs(-1, -5);\n    p += 25824041560. * rhs(-1, -4);\n    p += 47530295680. * rhs(-1, -3);\n    p += 91565303500. * rhs(-1, -2);\n    p += 151053077920. * rhs(-1, -1);\n    p += 226056661220. * rhs(-1, 0);\n    p += 151053077920. * rhs(-1, 1);\n    p += 91565303500. * rhs(-1, 2);\n    p += 47530295680. * rhs(-1, 3);\n    p += 25824041560. * rhs(-1, 4);\n    p += 11195845888. * rhs(-1, 5);\n    p += 5531327920. * rhs(-1, 6);\n    p += 1907533696. * rhs(-1, 7);\n    p += 850585168. * rhs(-1, 8);\n    p += 219617664. * rhs(-1, 9);\n    p += 88069168. * rhs(-1, 10);\n    p += 15789824. * rhs(-1, 11);\n    p += 5691972. * rhs(-1, 12);\n    p += 636608. * rhs(-1, 13);\n    p += 206531. * rhs(-1, 14);\n    p += 12040. * rhs(-1, 15);\n    p += 3521. * rhs(-1, 16);\n    p += 72. * rhs(-1, 17);\n    p += 19. * rhs(-1, 18);\n    p += 1. * rhs(0, -19);\n    p += 4. * rhs(0, -18);\n    p += 377. * rhs(0, -17);\n    p += 1360. * rhs(0, -16);\n    p += 34121. * rhs(0, -15);\n    p += 111044. * rhs(0, -14);\n    p += 1296593. * rhs(0, -13);\n    p += 3802112. * rhs(0, -12);\n    p += 26001936. * rhs(0, -11);\n    p += 68625984. * rhs(0, -10);\n    p += 312737680. * rhs(0, -9);\n    p += 743089408. * rhs(0, -8);\n    p += 2460787216. * rhs(0, -7);\n    p += 5284992064. * rhs(0, -6);\n    p += 13625875600. * rhs(0, -5);\n    p += 26826818560. * rhs(0, -4);\n    p += 57901756420. * rhs(0, -3);\n    p += 109719615760. * rhs(0, -2);\n    p += 226056661220. * rhs(0, -1);\n    p += 492400873280. * rhs(0, 0);\n    p += 226056661220. * rhs(0, 1);\n    p += 109719615760. * rhs(0, 2);\n    p += 57901756420. * rhs(0, 3);\n    p += 26826818560. * rhs(0, 4);\n    p += 13625875600. * rhs(0, 5);\n    p += 5284992064. * rhs(0, 6);\n    p += 2460787216. * rhs(0, 7);\n    p += 743089408. * rhs(0, 8);\n    p += 312737680. * rhs(0, 9);\n    p += 68625984. * rhs(0, 10);\n    p += 26001936. * rhs(0, 11);\n    p += 3802112. * rhs(0, 12);\n    p += 1296593. * rhs(0, 13);\n    p += 111044. * rhs(0, 14);\n    p += 34121. * rhs(0, 15);\n    p += 1360. * rhs(0, 16);\n    p += 377. * rhs(0, 17);\n    p += 4. * rhs(0, 18);\n    p += 1. * rhs(0, 19);\n    p += 19. * rhs(1, -18);\n    p += 72. * rhs(1, -17);\n    p += 3521. * rhs(1, -16);\n    p += 12040. * rhs(1, -15);\n    p += 206531. * rhs(1, -14);\n    p += 636608. * rhs(1, -13);\n    p += 5691972. * rhs(1, -12);\n    p += 15789824. * rhs(1, -11);\n    p += 88069168. * rhs(1, -10);\n    p += 219617664. * rhs(1, -9);\n    p += 850585168. * rhs(1, -8);\n    p += 1907533696. * rhs(1, -7);\n    p += 5531327920. * rhs(1, -6);\n    p += 11195845888. * rhs(1, -5);\n    p += 25824041560. * rhs(1, -4);\n    p += 47530295680. * rhs(1, -3);\n    p += 91565303500. * rhs(1, -2);\n    p += 151053077920. * rhs(1, -1);\n    p += 226056661220. * rhs(1, 0);\n    p += 151053077920. * rhs(1, 1);\n    p += 91565303500. * rhs(1, 2);\n    p += 47530295680. * rhs(1, 3);\n    p += 25824041560. * rhs(1, 4);\n    p += 11195845888. * rhs(1, 5);\n    p += 5531327920. * rhs(1, 6);\n    p += 1907533696. * rhs(1, 7);\n    p += 850585168. * rhs(1, 8);\n    p += 219617664. * rhs(1, 9);\n    p += 88069168. * rhs(1, 10);\n    p += 15789824. * rhs(1, 11);\n    p += 5691972. * rhs(1, 12);\n    p += 636608. * rhs(1, 13);\n    p += 206531. * rhs(1, 14);\n    p += 12040. * rhs(1, 15);\n    p += 3521. * rhs(1, 16);\n    p += 72. * rhs(1, 17);\n    p += 19. * rhs(1, 18);\n    p += 171. * rhs(2, -17);\n    p += 612. * rhs(2, -16);\n    p += 20587. * rhs(2, -15);\n    p += 66432. * rhs(2, -14);\n    p += 874636. * rhs(2, -13);\n    p += 2539344. * rhs(2, -12);\n    p += 18513100. * rhs(2, -11);\n    p += 48243200. * rhs(2, -10);\n    p += 228013680. * rhs(2, -9);\n    p += 532099904. * rhs(2, -8);\n    p += 1792109680. * rhs(2, -7);\n    p += 3736940032. * rhs(2, -6);\n    p += 9567332872. * rhs(2, -5);\n    p += 17743206112. * rhs(2, -4);\n    p += 35988002440. * rhs(2, -3);\n    p += 57958224640. * rhs(2, -2);\n    p += 91565303500. * rhs(2, -1);\n    p += 109719615760. * rhs(2, 0);\n    p += 91565303500. * rhs(2, 1);\n    p += 57958224640. * rhs(2, 2);\n    p += 35988002440. * rhs(2, 3);\n    p += 17743206112. * rhs(2, 4);\n    p += 9567332872. * rhs(2, 5);\n    p += 3736940032. * rhs(2, 6);\n    p += 1792109680. * rhs(2, 7);\n    p += 532099904. * rhs(2, 8);\n    p += 228013680. * rhs(2, 9);\n    p += 48243200. * rhs(2, 10);\n    p += 18513100. * rhs(2, 11);\n    p += 2539344. * rhs(2, 12);\n    p += 874636. * rhs(2, 13);\n    p += 66432. * rhs(2, 14);\n    p += 20587. * rhs(2, 15);\n    p += 612. * rhs(2, 16);\n    p += 171. * rhs(2, 17);\n    p += 969. * rhs(3, -16);\n    p += 3264. * rhs(3, -15);\n    p += 84524. * rhs(3, -14);\n    p += 256160. * rhs(3, -13);\n    p += 2752228. * rhs(3, -12);\n    p += 7480032. * rhs(3, -11);\n    p += 46169052. * rhs(3, -10);\n    p += 112093952. * rhs(3, -9);\n    p += 459561168. * rhs(3, -8);\n    p += 991865088. * rhs(3, -7);\n    p += 2939586856. * rhs(3, -6);\n    p += 5593339456. * rhs(3, -5);\n    p += 12613706776. * rhs(3, -4);\n    p += 20720283328. * rhs(3, -3);\n    p += 35988002440. * rhs(3, -2);\n    p += 47530295680. * rhs(3, -1);\n    p += 57901756420. * rhs(3, 0);\n    p += 47530295680. * rhs(3, 1);\n    p += 35988002440. * rhs(3, 2);\n    p += 20720283328. * rhs(3, 3);\n    p += 12613706776. * rhs(3, 4);\n    p += 5593339456. * rhs(3, 5);\n    p += 2939586856. * rhs(3, 6);\n    p += 991865088. * rhs(3, 7);\n    p += 459561168. * rhs(3, 8);\n    p += 112093952. * rhs(3, 9);\n    p += 46169052. * rhs(3, 10);\n    p += 7480032. * rhs(3, 11);\n    p += 2752228. * rhs(3, 12);\n    p += 256160. * rhs(3, 13);\n    p += 84524. * rhs(3, 14);\n    p += 3264. * rhs(3, 15);\n    p += 969. * rhs(3, 16);\n    p += 3876. * rhs(4, -15);\n    p += 12240. * rhs(4, -14);\n    p += 259012. * rhs(4, -13);\n    p += 733376. * rhs(4, -12);\n    p += 6672148. * rhs(4, -11);\n    p += 16859024. * rhs(4, -10);\n    p += 90216308. * rhs(4, -9);\n    p += 202185728. * rhs(4, -8);\n    p += 729241528. * rhs(4, -7);\n    p += 1436202848. * rhs(4, -6);\n    p += 3762860920. * rhs(4, -5);\n    p += 6397998208. * rhs(4, -4);\n    p += 12613706776. * rhs(4, -3);\n    p += 17743206112. * rhs(4, -2);\n    p += 25824041560. * rhs(4, -1);\n    p += 26826818560. * rhs(4, 0);\n    p += 25824041560. * rhs(4, 1);\n    p += 17743206112. * rhs(4, 2);\n    p += 12613706776. * rhs(4, 3);\n    p += 6397998208. * rhs(4, 4);\n    p += 3762860920. * rhs(4, 5);\n    p += 1436202848. * rhs(4, 6);\n    p += 729241528. * rhs(4, 7);\n    p += 202185728. * rhs(4, 8);\n    p += 90216308. * rhs(4, 9);\n    p += 16859024. * rhs(4, 10);\n    p += 6672148. * rhs(4, 11);\n    p += 733376. * rhs(4, 12);\n    p += 259012. * rhs(4, 13);\n    p += 12240. * rhs(4, 14);\n    p += 3876. * rhs(4, 15);\n    p += 11628. * rhs(5, -14);\n    p += 34272. * rhs(5, -13);\n    p += 614516. * rhs(5, -12);\n    p += 1616160. * rhs(5, -11);\n    p += 12751388. * rhs(5, -10);\n    p += 29726528. * rhs(5, -9);\n    p += 140048558. * rhs(5, -8);\n    p += 286712448. * rhs(5, -7);\n    p += 917173928. * rhs(5, -6);\n    p += 1623903168. * rhs(5, -5);\n    p += 3762860920. * rhs(5, -4);\n    p += 5593339456. * rhs(5, -3);\n    p += 9567332872. * rhs(5, -2);\n    p += 11195845888. * rhs(5, -1);\n    p += 13625875600. * rhs(5, 0);\n    p += 11195845888. * rhs(5, 1);\n    p += 9567332872. * rhs(5, 2);\n    p += 5593339456. * rhs(5, 3);\n    p += 3762860920. * rhs(5, 4);\n    p += 1623903168. * rhs(5, 5);\n    p += 917173928. * rhs(5, 6);\n    p += 286712448. * rhs(5, 7);\n    p += 140048558. * rhs(5, 8);\n    p += 29726528. * rhs(5, 9);\n    p += 12751388. * rhs(5, 10);\n    p += 1616160. * rhs(5, 11);\n    p += 614516. * rhs(5, 12);\n    p += 34272. * rhs(5, 13);\n    p += 11628. * rhs(5, 14);\n    p += 27132. * rhs(6, -13);\n    p += 74256. * rhs(6, -12);\n    p += 1155388. * rhs(6, -11);\n    p += 2803840. * rhs(6, -10);\n    p += 19495658. * rhs(6, -9);\n    p += 41569528. * rhs(6, -8);\n    p += 174151978. * rhs(6, -7);\n    p += 321877248. * rhs(6, -6);\n    p += 917173928. * rhs(6, -5);\n    p += 1436202848. * rhs(6, -4);\n    p += 2939586856. * rhs(6, -3);\n    p += 3736940032. * rhs(6, -2);\n    p += 5531327920. * rhs(6, -1);\n    p += 5284992064. * rhs(6, 0);\n    p += 5531327920. * rhs(6, 1);\n    p += 3736940032. * rhs(6, 2);\n    p += 2939586856. * rhs(6, 3);\n    p += 1436202848. * rhs(6, 4);\n    p += 917173928. * rhs(6, 5);\n    p += 321877248. * rhs(6, 6);\n    p += 174151978. * rhs(6, 7);\n    p += 41569528. * rhs(6, 8);\n    p += 19495658. * rhs(6, 9);\n    p += 2803840. * rhs(6, 10);\n    p += 1155388. * rhs(6, 11);\n    p += 74256. * rhs(6, 12);\n    p += 27132. * rhs(6, 13);\n    p += 50388. * rhs(7, -12);\n    p += 127296. * rhs(7, -11);\n    p += 1747226. * rhs(7, -10);\n    p += 3882736. * rhs(7, -9);\n    p += 24056318. * rhs(7, -8);\n    p += 46448688. * rhs(7, -7);\n    p += 174151978. * rhs(7, -6);\n    p += 286712448. * rhs(7, -5);\n    p += 729241528. * rhs(7, -4);\n    p += 991865088. * rhs(7, -3);\n    p += 1792109680. * rhs(7, -2);\n    p += 1907533696. * rhs(7, -1);\n    p += 2460787216. * rhs(7, 0);\n    p += 1907533696. * rhs(7, 1);\n    p += 1792109680. * rhs(7, 2);\n    p += 991865088. * rhs(7, 3);\n    p += 729241528. * rhs(7, 4);\n    p += 286712448. * rhs(7, 5);\n    p += 174151978. * rhs(7, 6);\n    p += 46448688. * rhs(7, 7);\n    p += 24056318. * rhs(7, 8);\n    p += 3882736. * rhs(7, 9);\n    p += 1747226. * rhs(7, 10);\n    p += 127296. * rhs(7, 11);\n    p += 50388. * rhs(7, 12);\n    p += 75582. * rhs(8, -11);\n    p += 175032. * rhs(8, -10);\n    p += 2144142. * rhs(8, -9);\n    p += 4324320. * rhs(8, -8);\n    p += 24056318. * rhs(8, -7);\n    p += 41569528. * rhs(8, -6);\n    p += 140048558. * rhs(8, -5);\n    p += 202185728. * rhs(8, -4);\n    p += 459561168. * rhs(8, -3);\n    p += 532099904. * rhs(8, -2);\n    p += 850585168. * rhs(8, -1);\n    p += 743089408. * rhs(8, 0);\n    p += 850585168. * rhs(8, 1);\n    p += 532099904. * rhs(8, 2);\n    p += 459561168. * rhs(8, 3);\n    p += 202185728. * rhs(8, 4);\n    p += 140048558. * rhs(8, 5);\n    p += 41569528. * rhs(8, 6);\n    p += 24056318. * rhs(8, 7);\n    p += 4324320. * rhs(8, 8);\n    p += 2144142. * rhs(8, 9);\n    p += 175032. * rhs(8, 10);\n    p += 75582. * rhs(8, 11);\n    p += 92378. * rhs(9, -10);\n    p += 194480. * rhs(9, -9);\n    p += 2144142. * rhs(9, -8);\n    p += 3882736. * rhs(9, -7);\n    p += 19495658. * rhs(9, -6);\n    p += 29726528. * rhs(9, -5);\n    p += 90216308. * rhs(9, -4);\n    p += 112093952. * rhs(9, -3);\n    p += 228013680. * rhs(9, -2);\n    p += 219617664. * rhs(9, -1);\n    p += 312737680. * rhs(9, 0);\n    p += 219617664. * rhs(9, 1);\n    p += 228013680. * rhs(9, 2);\n    p += 112093952. * rhs(9, 3);\n    p += 90216308. * rhs(9, 4);\n    p += 29726528. * rhs(9, 5);\n    p += 19495658. * rhs(9, 6);\n    p += 3882736. * rhs(9, 7);\n    p += 2144142. * rhs(9, 8);\n    p += 194480. * rhs(9, 9);\n    p += 92378. * rhs(9, 10);\n    p += 92378. * rhs(10, -9);\n    p += 175032. * rhs(10, -8);\n    p += 1747226. * rhs(10, -7);\n    p += 2803840. * rhs(10, -6);\n    p += 12751388. * rhs(10, -5);\n    p += 16859024. * rhs(10, -4);\n    p += 46169052. * rhs(10, -3);\n    p += 48243200. * rhs(10, -2);\n    p += 88069168. * rhs(10, -1);\n    p += 68625984. * rhs(10, 0);\n    p += 88069168. * rhs(10, 1);\n    p += 48243200. * rhs(10, 2);\n    p += 46169052. * rhs(10, 3);\n    p += 16859024. * rhs(10, 4);\n    p += 12751388. * rhs(10, 5);\n    p += 2803840. * rhs(10, 6);\n    p += 1747226. * rhs(10, 7);\n    p += 175032. * rhs(10, 8);\n    p += 92378. * rhs(10, 9);\n    p += 75582. * rhs(11, -8);\n    p += 127296. * rhs(11, -7);\n    p += 1155388. * rhs(11, -6);\n    p += 1616160. * rhs(11, -5);\n    p += 6672148. * rhs(11, -4);\n    p += 7480032. * rhs(11, -3);\n    p += 18513100. * rhs(11, -2);\n    p += 15789824. * rhs(11, -1);\n    p += 26001936. * rhs(11, 0);\n    p += 15789824. * rhs(11, 1);\n    p += 18513100. * rhs(11, 2);\n    p += 7480032. * rhs(11, 3);\n    p += 6672148. * rhs(11, 4);\n    p += 1616160. * rhs(11, 5);\n    p += 1155388. * rhs(11, 6);\n    p += 127296. * rhs(11, 7);\n    p += 75582. * rhs(11, 8);\n    p += 50388. * rhs(12, -7);\n    p += 74256. * rhs(12, -6);\n    p += 614516. * rhs(12, -5);\n    p += 733376. * rhs(12, -4);\n    p += 2752228. * rhs(12, -3);\n    p += 2539344. * rhs(12, -2);\n    p += 5691972. * rhs(12, -1);\n    p += 3802112. * rhs(12, 0);\n    p += 5691972. * rhs(12, 1);\n    p += 2539344. * rhs(12, 2);\n    p += 2752228. * rhs(12, 3);\n    p += 733376. * rhs(12, 4);\n    p += 614516. * rhs(12, 5);\n    p += 74256. * rhs(12, 6);\n    p += 50388. * rhs(12, 7);\n    p += 27132. * rhs(13, -6);\n    p += 34272. * rhs(13, -5);\n    p += 259012. * rhs(13, -4);\n    p += 256160. * rhs(13, -3);\n    p += 874636. * rhs(13, -2);\n    p += 636608. * rhs(13, -1);\n    p += 1296593. * rhs(13, 0);\n    p += 636608. * rhs(13, 1);\n    p += 874636. * rhs(13, 2);\n    p += 256160. * rhs(13, 3);\n    p += 259012. * rhs(13, 4);\n    p += 34272. * rhs(13, 5);\n    p += 27132. * rhs(13, 6);\n    p += 11628. * rhs(14, -5);\n    p += 12240. * rhs(14, -4);\n    p += 84524. * rhs(14, -3);\n    p += 66432. * rhs(14, -2);\n    p += 206531. * rhs(14, -1);\n    p += 111044. * rhs(14, 0);\n    p += 206531. * rhs(14, 1);\n    p += 66432. * rhs(14, 2);\n    p += 84524. * rhs(14, 3);\n    p += 12240. * rhs(14, 4);\n    p += 11628. * rhs(14, 5);\n    p += 3876. * rhs(15, -4);\n    p += 3264. * rhs(15, -3);\n    p += 20587. * rhs(15, -2);\n    p += 12040. * rhs(15, -1);\n    p += 34121. * rhs(15, 0);\n    p += 12040. * rhs(15, 1);\n    p += 20587. * rhs(15, 2);\n    p += 3264. * rhs(15, 3);\n    p += 3876. * rhs(15, 4);\n    p += 969. * rhs(16, -3);\n    p += 612. * rhs(16, -2);\n    p += 3521. * rhs(16, -1);\n    p += 1360. * rhs(16, 0);\n    p += 3521. * rhs(16, 1);\n    p += 612. * rhs(16, 2);\n    p += 969. * rhs(16, 3);\n    p += 171. * rhs(17, -2);\n    p += 72. * rhs(17, -1);\n    p += 377. * rhs(17, 0);\n    p += 72. * rhs(17, 1);\n    p += 171. * rhs(17, 2);\n    p += 19. * rhs(18, -1);\n    p += 4. * rhs(18, 0);\n    p += 19. * rhs(18, 1);\n    p += 1. * rhs(19, 0);\n    return p / 1099511627776.;\n}\n\nfloat p0c(int x, int y) {\n    vec2 p = gl_FragCoord.xy + vec2(x, y);\n    return texture(iChannel1, p / iResolution.xy).z;\n}\n\n// Gaussian - like redistribution of the previously calculated pressure p0c\nfloat TwentyStepPressure(void) {\n    float p = 0.;\n    p += 1. * p0c(-20, 0);\n    p += 20. * p0c(-19, -1);\n    p += 20. * p0c(-19, 1);\n    p += 190. * p0c(-18, -2);\n    p += 400. * p0c(-18, 0);\n    p += 190. * p0c(-18, 2);\n    p += 1140. * p0c(-17, -3);\n    p += 3800. * p0c(-17, -1);\n    p += 3800. * p0c(-17, 1);\n    p += 1140. * p0c(-17, 3);\n    p += 4845. * p0c(-16, -4);\n    p += 22800. * p0c(-16, -2);\n    p += 36100. * p0c(-16, 0);\n    p += 22800. * p0c(-16, 2);\n    p += 4845. * p0c(-16, 4);\n    p += 15504. * p0c(-15, -5);\n    p += 96900. * p0c(-15, -3);\n    p += 216600. * p0c(-15, -1);\n    p += 216600. * p0c(-15, 1);\n    p += 96900. * p0c(-15, 3);\n    p += 15504. * p0c(-15, 5);\n    p += 38760. * p0c(-14, -6);\n    p += 310080. * p0c(-14, -4);\n    p += 920550. * p0c(-14, -2);\n    p += 1299600. * p0c(-14, 0);\n    p += 920550. * p0c(-14, 2);\n    p += 310080. * p0c(-14, 4);\n    p += 38760. * p0c(-14, 6);\n    p += 77520. * p0c(-13, -7);\n    p += 775200. * p0c(-13, -5);\n    p += 2945760. * p0c(-13, -3);\n    p += 5523300. * p0c(-13, -1);\n    p += 5523300. * p0c(-13, 1);\n    p += 2945760. * p0c(-13, 3);\n    p += 775200. * p0c(-13, 5);\n    p += 77520. * p0c(-13, 7);\n    p += 125970. * p0c(-12, -8);\n    p += 1550400. * p0c(-12, -6);\n    p += 7364400. * p0c(-12, -4);\n    p += 17674560. * p0c(-12, -2);\n    p += 23474025. * p0c(-12, 0);\n    p += 17674560. * p0c(-12, 2);\n    p += 7364400. * p0c(-12, 4);\n    p += 1550400. * p0c(-12, 6);\n    p += 125970. * p0c(-12, 8);\n    p += 167960. * p0c(-11, -9);\n    p += 2519400. * p0c(-11, -7);\n    p += 14728800. * p0c(-11, -5);\n    p += 44186400. * p0c(-11, -3);\n    p += 75116880. * p0c(-11, -1);\n    p += 75116880. * p0c(-11, 1);\n    p += 44186400. * p0c(-11, 3);\n    p += 14728800. * p0c(-11, 5);\n    p += 2519400. * p0c(-11, 7);\n    p += 167960. * p0c(-11, 9);\n    p += 184756. * p0c(-10, -10);\n    p += 3359200. * p0c(-10, -8);\n    p += 23934300. * p0c(-10, -6);\n    p += 88372800. * p0c(-10, -4);\n    p += 187792200. * p0c(-10, -2);\n    p += 240374016. * p0c(-10, 0);\n    p += 187792200. * p0c(-10, 2);\n    p += 88372800. * p0c(-10, 4);\n    p += 23934300. * p0c(-10, 6);\n    p += 3359200. * p0c(-10, 8);\n    p += 184756. * p0c(-10, 10);\n    p += 167960. * p0c(-9, -11);\n    p += 3695120. * p0c(-9, -9);\n    p += 31912400. * p0c(-9, -7);\n    p += 143605800. * p0c(-9, -5);\n    p += 375584400. * p0c(-9, -3);\n    p += 600935040. * p0c(-9, -1);\n    p += 600935040. * p0c(-9, 1);\n    p += 375584400. * p0c(-9, 3);\n    p += 143605800. * p0c(-9, 5);\n    p += 31912400. * p0c(-9, 7);\n    p += 3695120. * p0c(-9, 9);\n    p += 167960. * p0c(-9, 11);\n    p += 125970. * p0c(-8, -12);\n    p += 3359200. * p0c(-8, -10);\n    p += 35103640. * p0c(-8, -8);\n    p += 191474400. * p0c(-8, -6);\n    p += 610324650. * p0c(-8, -4);\n    p += 1201870080. * p0c(-8, -2);\n    p += 1502337600. * p0c(-8, 0);\n    p += 1201870080. * p0c(-8, 2);\n    p += 610324650. * p0c(-8, 4);\n    p += 191474400. * p0c(-8, 6);\n    p += 35103640. * p0c(-8, 8);\n    p += 3359200. * p0c(-8, 10);\n    p += 125970. * p0c(-8, 12);\n    p += 77520. * p0c(-7, -13);\n    p += 2519400. * p0c(-7, -11);\n    p += 31912400. * p0c(-7, -9);\n    p += 210621840. * p0c(-7, -7);\n    p += 813766200. * p0c(-7, -5);\n    p += 1953038880. * p0c(-7, -3);\n    p += 3004675200. * p0c(-7, -1);\n    p += 3004675200. * p0c(-7, 1);\n    p += 1953038880. * p0c(-7, 3);\n    p += 813766200. * p0c(-7, 5);\n    p += 210621840. * p0c(-7, 7);\n    p += 31912400. * p0c(-7, 9);\n    p += 2519400. * p0c(-7, 11);\n    p += 77520. * p0c(-7, 13);\n    p += 38760. * p0c(-6, -14);\n    p += 1550400. * p0c(-6, -12);\n    p += 23934300. * p0c(-6, -10);\n    p += 191474400. * p0c(-6, -8);\n    p += 895142820. * p0c(-6, -6);\n    p += 2604051840. * p0c(-6, -4);\n    p += 4882597200. * p0c(-6, -2);\n    p += 6009350400. * p0c(-6, 0);\n    p += 4882597200. * p0c(-6, 2);\n    p += 2604051840. * p0c(-6, 4);\n    p += 895142820. * p0c(-6, 6);\n    p += 191474400. * p0c(-6, 8);\n    p += 23934300. * p0c(-6, 10);\n    p += 1550400. * p0c(-6, 12);\n    p += 38760. * p0c(-6, 14);\n    p += 15504. * p0c(-5, -15);\n    p += 775200. * p0c(-5, -13);\n    p += 14728800. * p0c(-5, -11);\n    p += 143605800. * p0c(-5, -9);\n    p += 813766200. * p0c(-5, -7);\n    p += 2864457024. * p0c(-5, -5);\n    p += 6510129600. * p0c(-5, -3);\n    p += 9765194400. * p0c(-5, -1);\n    p += 9765194400. * p0c(-5, 1);\n    p += 6510129600. * p0c(-5, 3);\n    p += 2864457024. * p0c(-5, 5);\n    p += 813766200. * p0c(-5, 7);\n    p += 143605800. * p0c(-5, 9);\n    p += 14728800. * p0c(-5, 11);\n    p += 775200. * p0c(-5, 13);\n    p += 15504. * p0c(-5, 15);\n    p += 4845. * p0c(-4, -16);\n    p += 310080. * p0c(-4, -14);\n    p += 7364400. * p0c(-4, -12);\n    p += 88372800. * p0c(-4, -10);\n    p += 610324650. * p0c(-4, -8);\n    p += 2604051840. * p0c(-4, -6);\n    p += 7161142560. * p0c(-4, -4);\n    p += 13020259200. * p0c(-4, -2);\n    p += 15868440900. * p0c(-4, 0);\n    p += 13020259200. * p0c(-4, 2);\n    p += 7161142560. * p0c(-4, 4);\n    p += 2604051840. * p0c(-4, 6);\n    p += 610324650. * p0c(-4, 8);\n    p += 88372800. * p0c(-4, 10);\n    p += 7364400. * p0c(-4, 12);\n    p += 310080. * p0c(-4, 14);\n    p += 4845. * p0c(-4, 16);\n    p += 1140. * p0c(-3, -17);\n    p += 96900. * p0c(-3, -15);\n    p += 2945760. * p0c(-3, -13);\n    p += 44186400. * p0c(-3, -11);\n    p += 375584400. * p0c(-3, -9);\n    p += 1953038880. * p0c(-3, -7);\n    p += 6510129600. * p0c(-3, -5);\n    p += 14322285120. * p0c(-3, -3);\n    p += 21157921200. * p0c(-3, -1);\n    p += 21157921200. * p0c(-3, 1);\n    p += 14322285120. * p0c(-3, 3);\n    p += 6510129600. * p0c(-3, 5);\n    p += 1953038880. * p0c(-3, 7);\n    p += 375584400. * p0c(-3, 9);\n    p += 44186400. * p0c(-3, 11);\n    p += 2945760. * p0c(-3, 13);\n    p += 96900. * p0c(-3, 15);\n    p += 1140. * p0c(-3, 17);\n    p += 190. * p0c(-2, -18);\n    p += 22800. * p0c(-2, -16);\n    p += 920550. * p0c(-2, -14);\n    p += 17674560. * p0c(-2, -12);\n    p += 187792200. * p0c(-2, -10);\n    p += 1201870080. * p0c(-2, -8);\n    p += 4882597200. * p0c(-2, -6);\n    p += 13020259200. * p0c(-2, -4);\n    p += 23273713320. * p0c(-2, -2);\n    p += 28210561600. * p0c(-2, 0);\n    p += 23273713320. * p0c(-2, 2);\n    p += 13020259200. * p0c(-2, 4);\n    p += 4882597200. * p0c(-2, 6);\n    p += 1201870080. * p0c(-2, 8);\n    p += 187792200. * p0c(-2, 10);\n    p += 17674560. * p0c(-2, 12);\n    p += 920550. * p0c(-2, 14);\n    p += 22800. * p0c(-2, 16);\n    p += 190. * p0c(-2, 18);\n    p += 20. * p0c(-1, -19);\n    p += 3800. * p0c(-1, -17);\n    p += 216600. * p0c(-1, -15);\n    p += 5523300. * p0c(-1, -13);\n    p += 75116880. * p0c(-1, -11);\n    p += 600935040. * p0c(-1, -9);\n    p += 3004675200. * p0c(-1, -7);\n    p += 9765194400. * p0c(-1, -5);\n    p += 21157921200. * p0c(-1, -3);\n    p += 31031617760. * p0c(-1, -1);\n    p += 31031617760. * p0c(-1, 1);\n    p += 21157921200. * p0c(-1, 3);\n    p += 9765194400. * p0c(-1, 5);\n    p += 3004675200. * p0c(-1, 7);\n    p += 600935040. * p0c(-1, 9);\n    p += 75116880. * p0c(-1, 11);\n    p += 5523300. * p0c(-1, 13);\n    p += 216600. * p0c(-1, 15);\n    p += 3800. * p0c(-1, 17);\n    p += 20. * p0c(-1, 19);\n    p += 1. * p0c(0, -20);\n    p += 400. * p0c(0, -18);\n    p += 36100. * p0c(0, -16);\n    p += 1299600. * p0c(0, -14);\n    p += 23474025. * p0c(0, -12);\n    p += 240374016. * p0c(0, -10);\n    p += 1502337600. * p0c(0, -8);\n    p += 6009350400. * p0c(0, -6);\n    p += 15868440900. * p0c(0, -4);\n    p += 28210561600. * p0c(0, -2);\n    p += 34134779536. * p0c(0, 0);\n    p += 28210561600. * p0c(0, 2);\n    p += 15868440900. * p0c(0, 4);\n    p += 6009350400. * p0c(0, 6);\n    p += 1502337600. * p0c(0, 8);\n    p += 240374016. * p0c(0, 10);\n    p += 23474025. * p0c(0, 12);\n    p += 1299600. * p0c(0, 14);\n    p += 36100. * p0c(0, 16);\n    p += 400. * p0c(0, 18);\n    p += 1. * p0c(0, 20);\n    p += 20. * p0c(1, -19);\n    p += 3800. * p0c(1, -17);\n    p += 216600. * p0c(1, -15);\n    p += 5523300. * p0c(1, -13);\n    p += 75116880. * p0c(1, -11);\n    p += 600935040. * p0c(1, -9);\n    p += 3004675200. * p0c(1, -7);\n    p += 9765194400. * p0c(1, -5);\n    p += 21157921200. * p0c(1, -3);\n    p += 31031617760. * p0c(1, -1);\n    p += 31031617760. * p0c(1, 1);\n    p += 21157921200. * p0c(1, 3);\n    p += 9765194400. * p0c(1, 5);\n    p += 3004675200. * p0c(1, 7);\n    p += 600935040. * p0c(1, 9);\n    p += 75116880. * p0c(1, 11);\n    p += 5523300. * p0c(1, 13);\n    p += 216600. * p0c(1, 15);\n    p += 3800. * p0c(1, 17);\n    p += 20. * p0c(1, 19);\n    p += 190. * p0c(2, -18);\n    p += 22800. * p0c(2, -16);\n    p += 920550. * p0c(2, -14);\n    p += 17674560. * p0c(2, -12);\n    p += 187792200. * p0c(2, -10);\n    p += 1201870080. * p0c(2, -8);\n    p += 4882597200. * p0c(2, -6);\n    p += 13020259200. * p0c(2, -4);\n    p += 23273713320. * p0c(2, -2);\n    p += 28210561600. * p0c(2, 0);\n    p += 23273713320. * p0c(2, 2);\n    p += 13020259200. * p0c(2, 4);\n    p += 4882597200. * p0c(2, 6);\n    p += 1201870080. * p0c(2, 8);\n    p += 187792200. * p0c(2, 10);\n    p += 17674560. * p0c(2, 12);\n    p += 920550. * p0c(2, 14);\n    p += 22800. * p0c(2, 16);\n    p += 190. * p0c(2, 18);\n    p += 1140. * p0c(3, -17);\n    p += 96900. * p0c(3, -15);\n    p += 2945760. * p0c(3, -13);\n    p += 44186400. * p0c(3, -11);\n    p += 375584400. * p0c(3, -9);\n    p += 1953038880. * p0c(3, -7);\n    p += 6510129600. * p0c(3, -5);\n    p += 14322285120. * p0c(3, -3);\n    p += 21157921200. * p0c(3, -1);\n    p += 21157921200. * p0c(3, 1);\n    p += 14322285120. * p0c(3, 3);\n    p += 6510129600. * p0c(3, 5);\n    p += 1953038880. * p0c(3, 7);\n    p += 375584400. * p0c(3, 9);\n    p += 44186400. * p0c(3, 11);\n    p += 2945760. * p0c(3, 13);\n    p += 96900. * p0c(3, 15);\n    p += 1140. * p0c(3, 17);\n    p += 4845. * p0c(4, -16);\n    p += 310080. * p0c(4, -14);\n    p += 7364400. * p0c(4, -12);\n    p += 88372800. * p0c(4, -10);\n    p += 610324650. * p0c(4, -8);\n    p += 2604051840. * p0c(4, -6);\n    p += 7161142560. * p0c(4, -4);\n    p += 13020259200. * p0c(4, -2);\n    p += 15868440900. * p0c(4, 0);\n    p += 13020259200. * p0c(4, 2);\n    p += 7161142560. * p0c(4, 4);\n    p += 2604051840. * p0c(4, 6);\n    p += 610324650. * p0c(4, 8);\n    p += 88372800. * p0c(4, 10);\n    p += 7364400. * p0c(4, 12);\n    p += 310080. * p0c(4, 14);\n    p += 4845. * p0c(4, 16);\n    p += 15504. * p0c(5, -15);\n    p += 775200. * p0c(5, -13);\n    p += 14728800. * p0c(5, -11);\n    p += 143605800. * p0c(5, -9);\n    p += 813766200. * p0c(5, -7);\n    p += 2864457024. * p0c(5, -5);\n    p += 6510129600. * p0c(5, -3);\n    p += 9765194400. * p0c(5, -1);\n    p += 9765194400. * p0c(5, 1);\n    p += 6510129600. * p0c(5, 3);\n    p += 2864457024. * p0c(5, 5);\n    p += 813766200. * p0c(5, 7);\n    p += 143605800. * p0c(5, 9);\n    p += 14728800. * p0c(5, 11);\n    p += 775200. * p0c(5, 13);\n    p += 15504. * p0c(5, 15);\n    p += 38760. * p0c(6, -14);\n    p += 1550400. * p0c(6, -12);\n    p += 23934300. * p0c(6, -10);\n    p += 191474400. * p0c(6, -8);\n    p += 895142820. * p0c(6, -6);\n    p += 2604051840. * p0c(6, -4);\n    p += 4882597200. * p0c(6, -2);\n    p += 6009350400. * p0c(6, 0);\n    p += 4882597200. * p0c(6, 2);\n    p += 2604051840. * p0c(6, 4);\n    p += 895142820. * p0c(6, 6);\n    p += 191474400. * p0c(6, 8);\n    p += 23934300. * p0c(6, 10);\n    p += 1550400. * p0c(6, 12);\n    p += 38760. * p0c(6, 14);\n    p += 77520. * p0c(7, -13);\n    p += 2519400. * p0c(7, -11);\n    p += 31912400. * p0c(7, -9);\n    p += 210621840. * p0c(7, -7);\n    p += 813766200. * p0c(7, -5);\n    p += 1953038880. * p0c(7, -3);\n    p += 3004675200. * p0c(7, -1);\n    p += 3004675200. * p0c(7, 1);\n    p += 1953038880. * p0c(7, 3);\n    p += 813766200. * p0c(7, 5);\n    p += 210621840. * p0c(7, 7);\n    p += 31912400. * p0c(7, 9);\n    p += 2519400. * p0c(7, 11);\n    p += 77520. * p0c(7, 13);\n    p += 125970. * p0c(8, -12);\n    p += 3359200. * p0c(8, -10);\n    p += 35103640. * p0c(8, -8);\n    p += 191474400. * p0c(8, -6);\n    p += 610324650. * p0c(8, -4);\n    p += 1201870080. * p0c(8, -2);\n    p += 1502337600. * p0c(8, 0);\n    p += 1201870080. * p0c(8, 2);\n    p += 610324650. * p0c(8, 4);\n    p += 191474400. * p0c(8, 6);\n    p += 35103640. * p0c(8, 8);\n    p += 3359200. * p0c(8, 10);\n    p += 125970. * p0c(8, 12);\n    p += 167960. * p0c(9, -11);\n    p += 3695120. * p0c(9, -9);\n    p += 31912400. * p0c(9, -7);\n    p += 143605800. * p0c(9, -5);\n    p += 375584400. * p0c(9, -3);\n    p += 600935040. * p0c(9, -1);\n    p += 600935040. * p0c(9, 1);\n    p += 375584400. * p0c(9, 3);\n    p += 143605800. * p0c(9, 5);\n    p += 31912400. * p0c(9, 7);\n    p += 3695120. * p0c(9, 9);\n    p += 167960. * p0c(9, 11);\n    p += 184756. * p0c(10, -10);\n    p += 3359200. * p0c(10, -8);\n    p += 23934300. * p0c(10, -6);\n    p += 88372800. * p0c(10, -4);\n    p += 187792200. * p0c(10, -2);\n    p += 240374016. * p0c(10, 0);\n    p += 187792200. * p0c(10, 2);\n    p += 88372800. * p0c(10, 4);\n    p += 23934300. * p0c(10, 6);\n    p += 3359200. * p0c(10, 8);\n    p += 184756. * p0c(10, 10);\n    p += 167960. * p0c(11, -9);\n    p += 2519400. * p0c(11, -7);\n    p += 14728800. * p0c(11, -5);\n    p += 44186400. * p0c(11, -3);\n    p += 75116880. * p0c(11, -1);\n    p += 75116880. * p0c(11, 1);\n    p += 44186400. * p0c(11, 3);\n    p += 14728800. * p0c(11, 5);\n    p += 2519400. * p0c(11, 7);\n    p += 167960. * p0c(11, 9);\n    p += 125970. * p0c(12, -8);\n    p += 1550400. * p0c(12, -6);\n    p += 7364400. * p0c(12, -4);\n    p += 17674560. * p0c(12, -2);\n    p += 23474025. * p0c(12, 0);\n    p += 17674560. * p0c(12, 2);\n    p += 7364400. * p0c(12, 4);\n    p += 1550400. * p0c(12, 6);\n    p += 125970. * p0c(12, 8);\n    p += 77520. * p0c(13, -7);\n    p += 775200. * p0c(13, -5);\n    p += 2945760. * p0c(13, -3);\n    p += 5523300. * p0c(13, -1);\n    p += 5523300. * p0c(13, 1);\n    p += 2945760. * p0c(13, 3);\n    p += 775200. * p0c(13, 5);\n    p += 77520. * p0c(13, 7);\n    p += 38760. * p0c(14, -6);\n    p += 310080. * p0c(14, -4);\n    p += 920550. * p0c(14, -2);\n    p += 1299600. * p0c(14, 0);\n    p += 920550. * p0c(14, 2);\n    p += 310080. * p0c(14, 4);\n    p += 38760. * p0c(14, 6);\n    p += 15504. * p0c(15, -5);\n    p += 96900. * p0c(15, -3);\n    p += 216600. * p0c(15, -1);\n    p += 216600. * p0c(15, 1);\n    p += 96900. * p0c(15, 3);\n    p += 15504. * p0c(15, 5);\n    p += 4845. * p0c(16, -4);\n    p += 22800. * p0c(16, -2);\n    p += 36100. * p0c(16, 0);\n    p += 22800. * p0c(16, 2);\n    p += 4845. * p0c(16, 4);\n    p += 1140. * p0c(17, -3);\n    p += 3800. * p0c(17, -1);\n    p += 3800. * p0c(17, 1);\n    p += 1140. * p0c(17, 3);\n    p += 190. * p0c(18, -2);\n    p += 400. * p0c(18, 0);\n    p += 190. * p0c(18, 2);\n    p += 20. * p0c(19, -1);\n    p += 20. * p0c(19, 1);\n    p += 1. * p0c(20, 0);\n    return p / 1099511627776.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 C) {\n    float p = TwentyStepRHS() + TwentyStepPressure();\n    // float temp = texelFetch(iChannel2, ivec2(C), 0).z;\n    // p *= (1.0+temp*0.5);\n\n    fragColor = vec4(0, 0, p, 0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// gradient subtraction fragment program\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float pL, pR, pB, pT;\n    pL = texture(iChannel0, (fragCoord - vec2(1, 0)) / iResolution.xy).z;\n    pR = texture(iChannel0, (fragCoord + vec2(1, 0)) / iResolution.xy).z;\n    pB = texture(iChannel0, (fragCoord - vec2(0, 1)) / iResolution.xy).z;\n    pT = texture(iChannel0, (fragCoord + vec2(0, 1)) / iResolution.xy).z;\n\n    // Because trirop's pressure solver use the reverse axis direction as ours\n    vec2 grad = -HALF_RDX * vec2(pR - pL, pT - pB);\n\n    fragColor = texture(iChannel1, fragCoord / iResolution.xy);\n\n    fragColor.xy -= grad;\n}","name":"Buffer D","description":"","type":"buffer"}]}