{"ver":"0.1","info":{"id":"dsVSz1","date":"1680748401","viewed":82,"name":"Rotating RGB Dots","username":"Xonatron","description":"A play on my previous rotating bar shader: https://www.shadertoy.com/view/cdVXz1\nOptical illusion (aka visual phenomena): There's no yellow, magenta (purple), or cyan in this render!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","demoscene","demoeffect","illusion","opticalillusion","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Matthew Doucette, Xona Games\n// http://xona.com/\n// Wednesday, April 5th, 2023 -- evolution of https://www.shadertoy.com/view/cdVXz1\n// ----------------------------\n\n// constants\n\n#define PI 3.141592653589793238462643383\n#define SCALE 10.0\n#define ROTATION_SPEED 90.0 // degrees / second\n\nvec2 rotate(vec2 coord, float angle) // angles in radians\n{\n    vec2 rotCoord; // rotated coordinates\n    rotCoord.x = coord.x * cos(angle) - coord.y * sin(angle);\n    rotCoord.y = coord.x * sin(angle) + coord.y * cos(angle);\n    return rotCoord;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // center offset\n    vec2 centerOffset;\n    centerOffset.x = iResolution.x / 2.0;\n    centerOffset.y = iResolution.y / 2.0;\n    \n    // image pixel coordinates\n    vec2 imageCoords;\n    imageCoords.x = fragCoord.x - centerOffset.x;\n    imageCoords.y = fragCoord.y - centerOffset.y;\n\n    // calculate rotation angle\n    float rotationAngle;\n    rotationAngle = (iTime * ROTATION_SPEED) / 360.0 * (2.0 * PI); // degrees/second to radians conversion\n\n    // rotate fragCoord\n    vec2 rotFragCoord;\n    rotFragCoord = rotate(imageCoords, rotationAngle);\n    \n    // distance from center\n    //float distFromCenter;\n    //distFromCenter = distance(rotFragCoord, vec2(0.0, 0.0));\n    \n    // calculate pixel colour (red, green, blue, alpha)\n    float r,g,b,a;\n    \n    float vx = 0.5 + 0.5 * cos(rotFragCoord.x / SCALE);\n    float vy = 0.5 + 0.5 * cos(rotFragCoord.y / SCALE);\n   \n    r = vx * vy;\n    g = vx - r;\n    b = vy - r;\n    a = 1.0;\n    \n    // update final colour\n\tfragColor = vec4(r,g,b,a);\n}","name":"Image","description":"","type":"image"}]}