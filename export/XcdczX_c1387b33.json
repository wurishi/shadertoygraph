{"ver":"0.1","info":{"id":"XcdczX","date":"1730961008","viewed":122,"name":"Ethereal Whisper 2","username":"darrinm","description":"Made with https://hatch.one.  Click/drag to interact.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["hatch","ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// title: Ethereal Whispers 2\n// Made with Hatch.one\n// License: MIT\n\n/* Hatch uniforms\nuniform float pulseRate; // default: 0.5, min: 0.1, max: 2.0, step: 0.1, title: \"Ethereal Pulse\"\nuniform float voidDepth; // default: 0.7, min: 0.1, max: 2.0, step: 0.1, title: \"Void Depth\"\nuniform float mysteryLevel; // default: 0.6, min: 0.0, max: 1.0, step: 0.01, title: \"Mystery Level\"\nuniform float spiritFlow; // default: 1.0, min: 0.1, max: 3.0, step: 0.1, title: \"Spirit Flow\"\nuniform vec4 auraColor1; // default: #330066, type: Color, title: \"Deep Aura\"\nuniform vec4 auraColor2; // default: #6600ff, type: Color, title: \"Spirit Aura\"\n*/\n\n#define pulseRate 0.5\n#define voidDepth 0.7\n#define mysteryLevel 0.6\n#define spiritFlow 1.0\n#define auraColor1 vec4(0.2, 0.0, 0.4, 1.0)\n#define auraColor2 vec4(0.4, 0.0, 1.0, 1.0)\n\nfloat getEtherealField(vec2 uv) {\n    // Create a flowing, organic pattern\n    float time = iTime * pulseRate;\n    vec2 moved = uv + vec2(\n        sin(time * 0.5 + uv.y * 4.0) * 0.1,\n        cos(time * 0.7 + uv.x * 4.0) * 0.1\n    );\n    \n    // Multiple layers of ethereal waves\n    float spirit = sin(moved.x * 6.0 + time) * cos(moved.y * 6.0 + time);\n    spirit += sin(length(moved * 8.0 + sin(time * 0.5)) * 4.0) * 0.5;\n    spirit += sin(length(moved * 4.0 - cos(time * 0.7)) * 3.0) * 0.25;\n    \n    // Add mouse influence as mysterious force\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    float distToMouse = length(uv - mouse);\n    float mouseForce = sin(distToMouse * 10.0 - time * 2.0) * exp(-distToMouse * 3.0);\n    \n    return spirit * 0.5 + mouseForce * mysteryLevel;\n}\n\nvec3 getNormal(vec2 uv, float field) {\n    vec2 e = vec2(0.01, 0.0);\n    float dx = getEtherealField(uv + e.xy) - getEtherealField(uv - e.xy);\n    float dy = getEtherealField(uv + e.yx) - getEtherealField(uv - e.yx);\n    return normalize(vec3(-dx, -dy, e.x * 2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Get the ethereal field value\n    float field = getEtherealField(uv) * voidDepth;\n    \n    // Calculate ethereal lighting\n    vec3 normal = getNormal(uv, field);\n    vec3 lightDir = normalize(vec3(\n        sin(iTime * spiritFlow) * 0.5,\n        cos(iTime * spiritFlow * 0.7) * 0.5,\n        1.0\n    ));\n    \n    // Create mysterious lighting effect\n    float diffuse = max(dot(normal, lightDir), 0.0);\n    float glow = exp(-length(uv - vec2(0.5)) * 2.0);\n    \n    // Mix colors based on field value and lighting\n    vec3 color1 = auraColor1.rgb;\n    vec3 color2 = auraColor2.rgb;\n    vec3 finalColor = mix(color1, color2, field * 0.5 + 0.5);\n    \n    // Add ethereal glow and lighting\n    finalColor += vec3(diffuse * 0.3);\n    finalColor += vec3(glow * 0.2) * color2;\n    \n    // Add mysterious shimmer\n    float shimmer = sin(iTime * 5.0 + field * 10.0) * 0.1 + 0.9;\n    finalColor *= shimmer;\n    \n    // Add depth-based transparency for ethereal effect\n    float alpha = 0.8 + field * 0.2;\n    \n    fragColor = vec4(finalColor, alpha);\n}\n","name":"Image","description":"","type":"image"}]}