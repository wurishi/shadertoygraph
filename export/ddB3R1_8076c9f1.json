{"ver":"0.1","info":{"id":"ddB3R1","date":"1667222721","viewed":183,"name":"Attractors Plotter","username":"Envy24","description":"Set parameters and timer in common tab and wait.\nImage no longer update after timer exceeds (see BufA, BufB for info).\n\nOthe implementations:\nhttps://www.shadertoy.com/view/DdjGRR\nhttps://www.shadertoy.com/view/Msy3Dm\nhttps://www.shadertoy.com/view/fl3GW7","likes":14,"published":1,"flags":48,"usePreview":0,"tags":["chaos","dynamic","plotter","strange","system","attractors","nonlinear"],"hasliked":0,"parentid":"cdj3zz","parentname":"Dynamic Systems Plotter 2"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC ) \n{ \n    O = BACKGROUND-TEXF0(SC);\n\n#define R ( pow(O.x, EXP) )\n#define G ( pow(O.y, EXP) )\n#define B ( pow(O.z, EXP) )\n    O = vec4(R, G, B, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define BACKGROUND                ( vec4(1) )\n#define KEY_Q                     ( 81.5 )\n#define TOGGLE_KEY_Q              ( texelFetch(iChannel3,ivec2(KEY_Q,2),0).x > 0.)\n\n/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float r)\n{\n    return length(C - NDC)-r;\n}\n\n/* If you want to make fullscreen image, then uncomment FULLSCREEN definition. \n   Now TRACE_TIMER is not used.\n   Key Q switches between clear/drawing strates. */\n//#define FULLSCREEN\n\n#define X ( P.x )\n#define Y ( P.y )\n#define T ( P.z )\n\n/*\n  General field formula:\n    new_x or new_y =\n        xx +- xy +- yy +- \n        yt +- tt +- tx +-\n        x  +- y  +- t;\n        \n  Flow streamlines for fields: https://www.shadertoy.com/view/ddjGzz\n  Vector fields:               https://www.shadertoy.com/view/ds2Gzz \n*/\n/* More attractors: http://paulbourke.net/fractals/ */\n/* Example attractors *\n#define EXP         ( 64. ) // higher values produce more intense color\n#define TRACE_TIMER ( 45. ) // in seconds\n#define ORIGIN      ( vec2(0.6, -0.48) )\n#define COUNT       ( 2000. )\n#define SCALE       ( 1. )\n#define RADIUS      ( 0.1 ) // higher values produce more intense color and spatial blur\n#define FADE_OUT    ( 0.1 ) // higher values produce more intense color\n#define T_MIN       ( 0.46 )\n#define T_MAX       ( 0.472 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime * 0.01 ) ) \nvec3 field(in vec3 P) // (x,y,t)\n{    \n    return \n        vec3(\n            X*X + Y*T - T*X - X,\n           -X*Y - Y*Y - Y*T - T*T - T*X - Y,\n            T);\n}\n/**\n#define EXP         ( 16. )\n#define TRACE_TIMER ( 45. ) // in seconds\n#define ORIGIN      ( vec2(0.0, -0.1) )\n#define COUNT       ( 500. )\n#define SCALE       ( 0.5 )\n#define RADIUS      ( 0.1 )\n#define FADE_OUT    ( 0.95 )\n#define T_MIN       ( -0.137 )\n#define T_MAX       ( -0.05 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime * 0.2 ) )\nvec3 field(in vec3 P) // (x,y,t)\n{      \n    return \n        vec3(\n           -X*X + X*Y + Y*Y - Y*T - T*T + T*X - X - Y - T,\n           -X*X - X*Y + Y*Y + Y*T + T*T - T*X + T,\n            T);\n}\n/**\n#define EXP         ( 16. )\n#define TRACE_TIMER ( 45. ) // in seconds\n#define ORIGIN      ( vec2(-0.20, 0.55) )\n#define COUNT       ( 1500. )\n#define SCALE       ( 1.4 )\n#define RADIUS      ( 0.8 )\n#define FADE_OUT    ( 0.90 )\n#define T_MIN       ( -0.529 )\n#define T_MAX       ( -0.49 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime * 0.187 ) )\nvec3 field(in vec3 P) // (x,y,t)\n{         \n    return \n        vec3(\n           -X*X - Y*Y - T*T + T*X + Y - T,\n            X*X - X*Y - Y*T - T*T,\n            T);\n}\n/**\n#define EXP         ( 16. )\n#define TRACE_TIMER ( 45. ) // in seconds\n#define ORIGIN      ( vec2(0.6, 0.23) )\n#define COUNT       ( 200. )\n#define SCALE       ( 0.8 )\n#define RADIUS      ( 0.4 )\n#define FADE_OUT    ( 0.9 )\n#define T_MIN       ( 0.3705 )//( 0.330 )\n#define T_MAX       ( 0.37 )//( 0.380 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime) )\nvec3 field(in vec3 P) // (x,y,t)\n{       \n    return \n        vec3(\n           -X*X + T*T + T*X + X - Y + T,\n           -Y*Y - Y*T + T*X + X - Y,\n            T);\n}\n/**\n#define EXP         ( 16. )\n#define TRACE_TIMER ( 45. ) // in seconds\n#define ORIGIN      ( vec2(0.1, 0.06) )\n#define COUNT       ( 2000. )\n#define SCALE       ( 0.6 )\n#define RADIUS      ( 0.1 ) // 0.1 for 800x450, 0.4 for 1920x1080\n#define FADE_OUT    ( 0.1 )\n#define T_MIN       ( -0.2852 )//( -0.410 )\n#define T_MAX       ( -0.2851 )//( -0.2851 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime) )\nvec3 field(in vec3 P) // (x,y,t)\n{            \n    return \n        vec3(\n           -Y*T - T*X + Y,\n            X*X - T*X - X + T,\n            T);\n}\n/**\n#define EXP         ( 16. )\n#define TRACE_TIMER ( 45. ) // in seconds\n#define ORIGIN      ( vec2(-0.26, 0.05) )\n#define COUNT       ( 1500. )\n#define SCALE       ( 0.7 )\n#define RADIUS      ( 0.1 )\n#define FADE_OUT    ( 0.1 )\n#define T_MIN       ( -0.026 )\n#define T_MAX       ( -0.025 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime) )\nvec3 field(in vec3 P) // (x,y,t)\n{            \n    return \n        vec3(\n           -X*X + X*Y - Y*Y + Y*T - T*X - X + Y + T,\n           -X*X + T*T - T*X - X - Y,\n            T);\n}\n/**\n#define EXP         ( 16. )\n#define TRACE_TIMER ( 45. ) // in seconds\n#define ORIGIN      ( vec2(0.0, 0.0) )\n#define COUNT       ( 1000. )\n#define SCALE       ( 2.4 )\n#define RADIUS      ( 2.5 )\n#define FADE_OUT    ( 0.1 )\n#define T_MIN       ( -0.067 )\n#define T_MAX       ( 0.057 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime*0.1) )\nvec3 field(in vec3 P) // http://paulbourke.net/fractals/clifford/\n{               \n    float a = 1.7;\n    float b = 1.7;\n    float c = 0.6;\n    float d = 1.2;\n\n    return \n        vec3(\n            sin(a*Y) + c*cos(a*X),\n            sin(b*X) + d*cos(b*Y),\n            T);            \n}\n/**\n#define EXP         ( 20. )\n#define TRACE_TIMER ( 60. ) // in seconds\n#define ORIGIN      ( vec2(0.0, -1.) )\n#define COUNT       ( 1000. )\n#define SCALE       ( 3.5 )\n#define RADIUS      ( 4.5 )\n#define FADE_OUT    ( 0.3 )\n#define T_MIN       ( -1.0 )\n#define T_MAX       (  1.0 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime*0.1) )\nvec3 field(in vec3 P) // http://paulbourke.net/fractals/N/\n{               \n    float c0 = 1.6831349342542232,\n          c1 = -2.9984035545418575,\n          c2 = 2.1207267208634164,\n          c3 = -2.121518002564899;\n    \n    float x = X - (X*(X*X+1.))*0.5;\n    float y = Y - (Y*(Y*Y+1.))*0.5;\n    \n    return \n        vec3(\n            c0 * sin( y ) + c1 * tanh( x ),\n            c2 * sin( x ) + c3 / cosh( y ),\n            T);            \n}\n/**\n#define EXP         ( 8. )\n#define TRACE_TIMER ( 60. ) // in seconds\n#define ORIGIN      ( vec2(0.75, -0.75) )\n#define COUNT       ( 1000. )\n#define SCALE       ( 2.0 )\n#define RADIUS      ( 2.5 )\n#define FADE_OUT    ( 0.6 )\n#define T_MIN       ( -1.0 )\n#define T_MAX       (  1.0 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime*0.1) )\nvec3 field(in vec3 P) // ikeda map: https://www.shadertoy.com/view/st3yzS\n{               \n    float a = 1., b = 0.9, c = 0.4, d = 6.;\n    float tn = c - (d / (1. + X * X + Y * Y));\n    \n    float nx = a + b * (X * cos(tn) - Y * sin(tn));\n    float ny = b * (X * sin(tn) + Y * cos(tn));\n    return vec3(nx, ny, T);\n}\n/**\n#define EXP         ( 5. )\n#define TRACE_TIMER ( 60. ) // in seconds\n#define ORIGIN      ( vec2(-0.70, 0.0) )\n#define COUNT       ( 2000. )\n#define SCALE       ( 3.5 )\n#define RADIUS      ( 4.5 )\n#define FADE_OUT    ( 0.99 )\n#define T_MIN       ( -1.0 )\n#define T_MAX       (  1.0 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime*0.1) )\nvec3 field(in vec3 P) // Henon escape time map: https://www.shadertoy.com/view/cdB3Wd\n{           \n    float A = 0.43, B = 0.95;\n\n        P.xy = vec2(1. - A * X * X + Y, B * X);\n\n    return vec3(P.x, P.y, T);\n}\n/*https://blbadger.github.io/clifford-attractor.html*/\n#define EXP         ( 4. )\n#define TRACE_TIMER ( 60. ) // in seconds\n#define ORIGIN      ( vec2(0., 0.) )\n#define COUNT       ( 2000. )\n#define SCALE       ( 2.1 )\n#define RADIUS      ( 4.5 )\n#define FADE_OUT    ( 0.3 )\n#define T_MIN       ( -1.0 )\n#define T_MAX       (  1.0 )\n#define T0          ( sinOSC(T_MIN, T_MAX, iTime*0.1) )\nvec3 field(in vec3 P)\n{          \n    float a = 2., b = 2., c = 1., d = -1.;\n    \n    return \n        vec3(\n            sin(a * P.y) + c * cos(a * P.x),\n            sin(b * P.x) + d * cos(a * P.y),\n            T);            \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R                         ( iResolution )\n#define UNIT                      (  1.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin)\n{\n    return ((2. * SC - R.xy) / R.y) * scale - origin;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n#ifndef FULLSCREEN\n    if (iTime > TRACE_TIMER) { return; }\n#endif\n\n    vec2 NDC = map_to_centered_ndc(SC, SCALE, -ORIGIN);\n\n    float min_dist = 9.; \n    vec3 P = vec3(T0);\n\n    for (float s = 0.; s < COUNT; s += 1.)\n    {\n        P = field(P);\n\n        min_dist = \n            min( \n                min_dist,\n                diskSDF_L2(NDC, P.xy, RADIUS * UNIT));\n    }\n\n    vec4 color = vec4(0.1, 0.4, 0.7, 1);\n    O = mix( TEXF0(SC)*FADE_OUT, BACKGROUND-color, SMAA(min_dist) );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC )\n{\n#ifndef FULLSCREEN\n    if (iTime > TRACE_TIMER) { O = TEXF1(SC); return; }\n#else\n    if (TOGGLE_KEY_Q==true) { O = vec4(0); return; }\n#endif\n\n    float t = 0.999;\n\n    O = \n        iFrame == 0 ?\n            vec4( 0 ) :\n            TEXF0(SC) * (1. - t) + TEXF1(SC) * t;\n}","name":"Buffer B","description":"","type":"buffer"}]}