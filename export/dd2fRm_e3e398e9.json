{"ver":"0.1","info":{"id":"dd2fRm","date":"1712400498","viewed":72,"name":"figure eight row 147852369","username":"HaleyHalcyon","description":"rarnr.rarasnrn","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sasassnsasnraarrnn"],"hasliked":0,"parentid":"csV3zc","parentname":"rararsasassararnrnrnrasrnsnrasnr"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// set to 0 to make colors buttery-smooth\n// set to 1 to dither colors (for GIF export)\n#define DITHER 1\n\n// generate an ordered dithered pattern based on pixel coordinates\n#if DITHER == 1\nfloat crosshatch(vec2 xyf) {\n    ivec2 xy = ivec2(xyf) & 3;\n    return (float(\n        + ((xy.y >> 1) & 1)\n        + ((xy.x & 2) ^ (xy.y & 2))\n        + ((xy.y & 1) << 2)\n        + ((((xy.x) & 1) ^ (xy.y & 1)) << 3)\n    ) + 0.5) / 16.;\n}\n#endif\n\nconst float TURN = acos(-1.) * 2.;\n// rotation matrix\n#define ROT(x) mat2x2(cos(x + TURN * vec4(0, 0.25, -0.25, 0)))\n// converts colors from hex code to vec3\n#define HEX(x) vec3((ivec3(x) >> ivec3(16, 8, 0)) & 255) / 255.\n// “zigzag” value between 0 and 1\n#define ZIG(x) (1. - abs(1. - fract(x) * 2.))\n\n// convert float in range [0, 1) to a color based on a colormap\nvec3 colormap(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        vec3(0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        vec3(1),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[(lo + 1) % colorCount],\n        smoothstep(0., 1., fract(x))\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = fract(iTime / 8.);\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    const float BALLSCALE = 2.5;\n    const vec2 AMPLITUDE = vec2(10.0, 5.0);\n    \n    float alpha = 0.; float v = 0.;\n    \n    const float LAYERS = 32.;\n    const float ZSCALE = 2./1.;\n    float moveZ = fract(-t * 2.);\n    for (float i = LAYERS; i > 0.; i--) {\n        float z = (ZSCALE * (i + moveZ));\n        float prog = (t - (i + moveZ) * 0.1) * TURN;\n        vec2 displacement = vec2(cos(prog - 0.04), sin(2. * prog)) * AMPLITUDE;\n        \n        vec2 uvLayer = (uv * z - displacement) / BALLSCALE;\n        float alphaLayer = step(length(uvLayer), 1.0);\n        alpha = mix(alpha, 1., alphaLayer);\n        v = mix(\n            v, 0.125 * (i + moveZ) + 2. * t - 0.25 * length(uvLayer), alphaLayer\n        );\n    }\n    \n#if DITHER == 1\n    float thres = crosshatch(fragCoord);\n    const float STEPS = 8.;\n    v = fract((\n        floor(v * STEPS) +\n        step(thres, fract(v * STEPS))\n    ) / STEPS);\n#endif\n\n    vec3 col = colormap(fract(v)) * alpha;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}