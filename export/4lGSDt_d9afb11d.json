{"ver":"0.1","info":{"id":"4lGSDt","date":"1486329757","viewed":135,"name":"RGB Clock Test","username":"ptrgags","description":"I wanted to see how the iDate vector stores the date, so I made this silly little clock as an example\n\nHorizontal Lines values: 1 hour, 15 min, and 5 seconds respectively","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","test","clock","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Draw a vertical bar to some percent of the screen hight\n * with the color on the bottom moving upwards as the fraction\n * increases\n */\nvec4 vertical_bar(float fraction, float uv_y, vec4 color) {\n    return step(1.0 - fraction, 1.0 - uv_y) * color;\n}\n\n//Draw rule lines in white\nvec4 rule_lines(vec2 uv, float num_lines) {\n    float uv_y = fract(uv.y * num_lines);\n    return step(0.91, uv_y) * vec4(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Get the UV Coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    //Normalize the time components\n\tfloat hours = iDate.w / 60.0 / 60.0;\n    float minutes = mod(iDate.w / 60.0, 60.0);\n    float seconds = mod(iDate.w, 60.0);\n    \n    //Draw vertical bars and rule lines\n    float frac;\n    \n    //UV but the x goes from bucket start to finish\n    if (uv.x < 1.0 / 3.0) {\n        frac = hours / 24.0;\n        fragColor = vertical_bar(frac, uv.y, vec4(1.0, 0.0, 0.0, 1.0));\n        fragColor += rule_lines(uv, 24.0);\n    }\n    else if (uv.x < 2.0 / 3.0) {\n        frac = minutes / 60.0;\n        fragColor = vertical_bar(frac, uv.y, vec4(0.0, 1.0, 0.0, 1.0));\n        fragColor += rule_lines(uv, 12.0);\n    }\n    else {\n        frac = seconds / 60.0;\n\t\tfragColor = vertical_bar(frac, uv.y, vec4(0.0, 0.0, 1.0, 1.0));\n        fragColor += rule_lines(uv, 12.0);\n    }\n}","name":"Image","description":"","type":"image"}]}