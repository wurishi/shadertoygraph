{"ver":"0.1","info":{"id":"Xcjyzt","date":"1724334040","viewed":30,"name":"Green-Purple Chromatic Animated","username":"mantoljak","description":"chroma","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["chroma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Marko Antoljak\n// Green-Purple Chromatic Aberration (Animated)\n\nconst float ABERRATION_AMOUNT = 0.02;\n\n// animation\nconst bool ANIMATED = true;\nconst float SPEED = .5;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 center = vec2(0.5, 0.5);\n    vec2 offset = uv - center;\n\n    // Adjust aberration amount based on animation if enabled\n    float animatedAberrationAmount = ANIMATED ? (0.5 + 0.5 * sin(iTime * SPEED)) * ABERRATION_AMOUNT : ABERRATION_AMOUNT;\n\n    // Apply aberration\n    vec2 uvR = uv + offset * animatedAberrationAmount;\n    vec2 uvG = uv - offset * animatedAberrationAmount;\n\n    // Fetch colors from the texture\n    vec3 colorR = texture(iChannel0, uvR).rgb * vec3(1.0, 0.0, 1.0); // Purple\n    vec3 colorG = texture(iChannel0, uvG).rgb * vec3(0.0, 1.0, 0.0); // Green\n\n    // Combine the colors\n    vec3 color = colorR + colorG;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}