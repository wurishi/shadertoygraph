{"ver":"0.1","info":{"id":"MsycRm","date":"1521443271","viewed":136,"name":"Rainbow Ripples","username":"liamboone","description":"Colorful ripples","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["ripples","colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(x) (clamp(x, 0., 1.))\n\n\n// palettes stolen from https://www.shadertoy.com/view/ll2GD3\nvec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\nfloat pick(vec3 r, float c)\n{\n    c = mod(c, 3.);\n    if (c < 1.)\n        return r.x;\n    else if (c < 2.)\n        return r.y;\n    else if (c < 3.)\n        return r.z;\n}\n\n\nvec3 pals(float x, float y)\n{\n    y = mod(y, 7.);\n    if (y < 1.)\n        return palette(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67));\n    else if (y < 2.)\n        return palette(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20));\n    else if (y < 3.)\n        return palette(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30));\n    else if (y < 4.)\n        return palette(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30));\n    else if (y < 5.)\n        return palette(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20));\n    else if (y < 6.)\n        return palette(x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25));\n    else if (y < 7.)\n        return palette(x, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy) / iResolution.xy;\n    \n    vec4 ribbons = texture(iChannel0, uv);\n    float c = iTime * 0.1;\n    \n    vec3 color0 = pals(ribbons.x, c);\n    vec3 color1 = pals(ribbons.x, c + 1.);\n    \n    vec3 color = mix(color0, color1, fract(c));\n    \n    fragColor = vec4(saturate(color), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define saturate(x) (clamp(x, 0., 1.))\n\n\nconst float PI = 3.14159;\n\n\nvec2 rotate(vec2 p, float t)\n{\n    return mat2( cos(t), sin(t),\n                -sin(t), cos(t)) * p;\n}\n\n\nfloat stroke(float x, float size, float w)\n{\n    float d = smoothstep(size-0.01, size+0.01, x+w*.5) - \n              smoothstep(size-0.01, size+0.01, x-w*.5);\n    return saturate(d);\n}\n\n\nfloat ribbon(vec2 p, float a, float b, float c, float d, float e)\n{\n    return stroke(p.x, a, b) * stroke(p.y, sin(iTime*c), d * (sin(iTime*e) * 0.5 + 0.5));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy) / iResolution.xy;\n    \n    vec3 last = vec3(0.);\n    \n    const mat3 K = mat3(1., 2., 1.,\n                        2., 4., 2.,\n                        1., 2., 1.) / 16.;\n    \n    for (int i = -1; i < 2; i += 1)\n    {\n        for (int j = -1; j < 2; j += 1)\n        {\n    \t\tlast += texture(iChannel0, uv + vec2(i, j) / iResolution.xy).rgb * K[i+1][j+1];\n        }\n    }\n    \n    last *= 0.995;\n    \n\t//Get coordinates in the range [-1.0, 1.0]\n    uv = (uv - 0.5) * 2.0; \n\n    //Adjust for aspect ratio\n    vec2 aspect_uv = uv * (iResolution.xy / iResolution.y);\n    \n    vec2 p = rotate(aspect_uv, iTime * 0.4);\n    \n    vec3 color = vec3(0.);\n    \n    color.r += (last.r + ribbon(p, 0.5, 0.03, 0.3, 3.43, 0.5)) / 3.;\n    \n    p = rotate(aspect_uv, iTime * 0.4 + PI * 2. / 3.);\n    color.r += (last.r + ribbon(p, 0.5, 0.03, 0.3, 3.43, 0.5)) / 3.;\n    \n    p = rotate(aspect_uv, iTime * 0.4 + PI * 4. / 3.);\n    color.r += (last.r + ribbon(p, 0.5, 0.03, 0.3, 3.43, 0.5)) / 3.;\n    \n    fragColor = vec4(color, 1.);\n}","name":"Buf A","description":"","type":"buffer"}]}