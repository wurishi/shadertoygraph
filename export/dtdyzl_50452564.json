{"ver":"0.1","info":{"id":"dtdyzl","date":"1699557488","viewed":124,"name":"aspect-balanced random subdivide","username":"jt","description":"Tile rectangle with random rectangles of a wide range of sizes,\nby subdividing each rectangle randomly,\nchoosing the dimension to always subdivide the longer side\n(avoid thin rectangles).\nNOTE: for simplicity currently squares are not subdivided further.\n","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["binary","random","tree","plane","tiling","tile","euclidean","subdivision","tesselation","aspect","kd","balanced"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dtdyzl aspect-balanced random subdivide, 2023 by jt\n\n// Tile rectangle with random rectangles of a wide range of sizes\n//(contrary to https://www.shadertoy.com/view/mdcBR2 asymmetric blocks compactified\n// which creates rectangles of similar sizes):\n// Half each rectangle randomly, choosing the dimension to always subdivide the longer side.\n//(contrary to kd-tree like subdivision which alternates the dimensions).\n\n// Mouse controls subdivision-range (left: full variation, right: no variation),\n// also iterations are adjusted for better visibility.\n\n// NOTE: Unfortunately NOT every tiling can be achieved by this method, e.g.\n//\n//       *---*-*\n//       |   | |\n//       *-*-* |\n//       | | | |\n//       | *-*-*\n//       | |   |\n//       *-*---*\n//\n// TODO: Method that can describe ALL possible tilings with rectangles?\n//       Could this be translated to shadertoy:\n//       https://math.stackexchange.com/questions/4231713/has-anyone-ever-attempted-to-find-all-splits-of-a-rectangle-into-smaller-rectang\n\n// BTW some interesting links:\n// https://math.stackexchange.com/questions/4008337/how-many-prime-rectangle-tilings-are-there\n// https://oeis.org/A049021\n// https://math.stackexchange.com/questions/1116/number-of-ways-to-partition-a-rectangle-into-n-sub-rectangles\n// https://math.stackexchange.com/questions/3776204/tiling-the-plane-with-consecutive-squares\n// https://math.stackexchange.com/questions/794389/squaring-the-plane-with-consecutive-integer-squares-and-a-related-arrangement\n\n// tags: binary, random, tree, plane, tiling, tile, euclidean, subdivision, tesselation, aspect, kd, balanced\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat hash14(vec4 p4) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\nvec4 hash44(vec4 p4) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n// Parameters: minimum corner a, maximum corner b, number of iterations n, random seed s, rectangle range r\n// NOTE: currently squares are NOT subdivided, so start with a non-square rectangle!\n// Tile plane with random rectangles of a wide range of sizes,\n// by subdividing each rectangle randomly,\n// choosing the dimension to always subdivide the longer side\n// (to avoid too many overly thin rectangles).\nvec3 subdivide(vec2 a, vec2 b, int n, float s, float r, vec2 p) // https://www.shadertoy.com/view/dtdyzl aspect-balanced random kd-tree by jt\n{\n    for(int i = 0; i < n; i++)\n    {\n        // NOTE: 0 <= r <= 1\n        // where a low value means narrower range, i.e. more squarish rectangles,\n        // and a high value means broader range, i.e. more extreme rectangles occur\n        float h = mix((1.0-r)/2.0,(1.0+r)/2.0,hash14(vec4(a, b)+s));\n        //float n = 7.0;\n        //h = floor(h*n)/n; // quantize\n        float d = (b.x-a.x)-(b.y-a.y);\n        if(d > 0.0) // horizontal (b.x-a.x > b.y-a.y)\n        {\n            h = mix(a.x, b.x, h);\n            if(p.x < h)\n                b.x = h;\n            else\n                a.x = h;\n        }\n        else if(d < 0.0) // vertical (b.x-a.x < b.y-a.y)\n        {\n            h = mix(a.y, b.y, h);\n            if(p.y < h)\n                b.y = h;\n            else\n                a.y = h;\n        }\n        else // equal (b.x-a.x == b.y-a.y)\n        {\n            // keep square (could choose dimension randomly or alternate dimensions instead)\n        }\n    }\n\n    return hash44(vec4(a,b)).xyz;\n}\n\nvoid mainImage(out vec4 o, in vec2 I) // [0..1]\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y;\n    o = vec4(0);\n    //if(all(lessThan(abs(I), vec2(1))))\n    {\n        //vec3 color = subdivide(vec2(-1), vec2(+1), 5, floor(iTime), 1.0, I.xy); // NOTE: produces a single square (unless subdividing squares implemented)\n        //vec3 color = subdivide(-vec2(R.x/R.y,1),+vec2(R.x/R.y,1), 15, floor(iTime), 1.0, I.xy);\n        float r = 1.0 - iMouse.x/(R.x-1.0);\n        vec3 color = subdivide(-vec2(R.x/R.y,1),+vec2(R.x/R.y,1), 8+int(r)*7, floor(iTime), r, I.xy);\n        o = vec4(color, 1); // no gamma - colors look clear\n        //o = vec4(sqrt(color), 1); // gamma - colors look overly bright\n    }\n}\n","name":"Image","description":"","type":"image"}]}