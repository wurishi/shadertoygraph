{"ver":"0.1","info":{"id":"MtBXWw","date":"1444957078","viewed":1205,"name":"ResolutionVsAntialiasing","username":"TimothyLottes","description":"Resolution vs Antialiasing vs Motion","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["resolutionvsantialiasingvsmotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// SHOWING RESOLUTION VS SAMPLES VS MOTION\n//\n// Warning full-screen on a slow machine is a likely TDR!!!!\n// I'm too afraid to try it, so this is tuned to the standard 1920x1080 shadertoy view in a browser.\n// Shader built and tested only on a laptop, probably fine on big desktop GPU.\n//\n// Each pair of rows has same number of shaded samples.\n// Samples are shaded either to white or black.\n// Top of pair is at full resolution.\n// Bottom of pair is at 1/2 resolution (aka 1/4 area).\n// Shows geometric aliasing in motion.\n//\n// Rows from top to bottom,\n//\n//  1x       at full resolution \n//  4xSGSSAA at 1/4 area in resolution \n//\n//  2xSGSSAA at full resolution\n//  8xSGSSAA at 1/4 area in resolution \n//\n//  4xSGSSAA at full resolution\n// 16xSGSSAA at 1/4 area in resolution \n//\n//  8xSGSSAA at full resolution\n// 32xSGSSAA at 1/4 area in resolution \n//\n// 16xSGSSAA at full resolution\n// 64xSGSSAA at 1/4 area in resolution \n//\n// Since everything is exactly up/down this SGSSAA simplifies to sampling in a line...\n// Resolve is a simple cubic filter which is larger than a pixel.\n//\n// Precision in motion = resolution * intensity steps as edge moves across pixel.\n//\n// For the same number of samples the lower resolution display \n// offers better motion precision but with compromized sharpness.\n// The extra spatial precision for the lower resolution display\n// is a product of being able to adjust sampling locations\n// from exactly resolving detail in the rectangular grid, \n// to better resolving sub-pixel position.\n// providing more effective intensity steps as a edge moves across a pixel.\n\n// Types.\n#define F1 float\n#define F2 vec2\n#define F3 vec3\n#define F4 vec4\n#define S1 int\n#define S2 int2\n#define S3 int3\n#define S4 int4\n\n// Controls.\n#define BARS (1.0/6000.0)\n#define THROW (16.0/1.0)\n#define SPEED (1.0/4.0)\n\n// Generates the source image.\nF1 Src(F1 x){return fract(x*x*BARS)<0.5?0.0:1.0;}\n\n// Convert from linear to sRGB.\nF1 Srgb(F1 c){return(c<0.0031308?c*12.92:1.055*pow(c,0.41666)-0.055);}\n\n// Filter as Cubic B-spline (x = distance from center).\n// General Mitchell-Netravali filter,\n//   http://www.cs.utexas.edu/users/fussell/courses/cs384g/lectures/mitchell/Mitchell.pdf\nF1 Filter(F1 x){\n  F1 b=1.0,c=0.0;\n  if(abs(x)<1.0)return(1.0/6.0)*((12.0-9.0*b-6.0*c)*x*x*abs(x)+(-18.0+12.0*b+6.0*c)*x*x+(6.0-2.0*b));\n  if(abs(x)<2.0)return(1.0/6.0)*((-b-6.0*c)*x*x*abs(x)+(6.0*b+30.0*c)*x*x+(-12.0*b-48.0*c)*abs(x)+(8.0*b+24.0*c));\n  return 0.0;}\n\n// Generates a swatch to test resolution and sample settings.\nF1 Swatch(F1 x,F1 o,F1 res,S1 num) {\n  // Filter sums.\n  F1 rSum=0.0;\n  F1 wSum=0.0;\n  F1 rSum2=0.0;\n  F1 wSum2=0.0;\n  // Base and stride for sampling.\n  F1 xBase=(floor(x/res)+(0.5/F1(num)))*res-(res*1.5);\n  F1 xStride=res/F1(num);\n  F1 xMid=(floor(x/res)+0.5)*res-(res*1.0);\n  // Filtering.\n  F1 xCenter=x+0.5;\n  F1 xScale=1.0/res;\n  F1 xScale2=1.0/res;\n  F1 p,r,w;\n  F1 r0,r1,r2;\n  F1 p0,p1,p2;\n  //    \n  if(num==1){return Src((floor(x/res)+(0.5/F1(num)))*res+o);}\n  //    \n  if(num==2){\n    p0=xMid;  \n    for(S1 i=0;i<2*2;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r0=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p0-xCenter)*xScale2);rSum2+=r0*w;wSum2+=w;  \n    p1=xMid;  \n    for(S1 i=0;i<2*2;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r1=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p1-xCenter)*xScale2);rSum2+=r1*w;wSum2+=w;  \n    p2=xMid;  \n    for(S1 i=0;i<2*2;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r2=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p2-xCenter)*xScale2);rSum2+=r2*w;wSum2+=w;\n    return rSum2/wSum2;}\n  //\n  if(num==4){\n    p0=xMid;  \n    for(S1 i=0;i<2*4;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r0=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p0-xCenter)*xScale2);rSum2+=r0*w;wSum2+=w;  \n    p1=xMid;  \n    for(S1 i=0;i<2*4;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r1=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p1-xCenter)*xScale2);rSum2+=r1*w;wSum2+=w;  \n    p2=xMid;  \n    for(S1 i=0;i<2*4;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r2=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p2-xCenter)*xScale2);rSum2+=r2*w;wSum2+=w;\n    return rSum2/wSum2;}\n  //\n  if(num==8){\n    p0=xMid;  \n    for(S1 i=0;i<2*8;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r0=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p0-xCenter)*xScale2);rSum2+=r0*w;wSum2+=w;  \n    p1=xMid;  \n    for(S1 i=0;i<2*8;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r1=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p1-xCenter)*xScale2);rSum2+=r1*w;wSum2+=w;  \n    p2=xMid;  \n    for(S1 i=0;i<2*8;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r2=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p2-xCenter)*xScale2);rSum2+=r2*w;wSum2+=w;\n    return rSum2/wSum2;}\n  //\n  if(num==16){\n    p0=xMid;  \n    for(S1 i=0;i<2*16;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r0=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p0-xCenter)*xScale2);rSum2+=r0*w;wSum2+=w;  \n    p1=xMid;  \n    for(S1 i=0;i<2*16;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r1=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p1-xCenter)*xScale2);rSum2+=r1*w;wSum2+=w;  \n    p2=xMid;  \n    for(S1 i=0;i<2*16;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r2=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p2-xCenter)*xScale2);rSum2+=r2*w;wSum2+=w;\n    return rSum2/wSum2;}\n  //\n  if(num==32){\n    p0=xMid;  \n    for(S1 i=0;i<2*32;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r0=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p0-xCenter)*xScale2);rSum2+=r0*w;wSum2+=w;  \n    p1=xMid;  \n    for(S1 i=0;i<2*32;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r1=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p1-xCenter)*xScale2);rSum2+=r1*w;wSum2+=w;  \n    p2=xMid;  \n    for(S1 i=0;i<2*32;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r2=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p2-xCenter)*xScale2);rSum2+=r2*w;wSum2+=w;\n    return rSum2/wSum2;}\n  //\n  if(num==64){\n    p0=xMid;  \n    for(S1 i=0;i<2*64;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r0=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p0-xCenter)*xScale2);rSum2+=r0*w;wSum2+=w;  \n    p1=xMid;  \n    for(S1 i=0;i<2*64;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r1=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p1-xCenter)*xScale2);rSum2+=r1*w;wSum2+=w;  \n    p2=xMid;  \n    for(S1 i=0;i<2*64;i++){p=xBase+F1(i)*xStride;r=Src(p+o);w=Filter(abs(p-xMid)*xScale);rSum+=r*w;wSum+=w;}\n    r2=rSum/wSum;xBase+=res;xMid+=res;rSum=0.0;wSum=0.0;\n    w=Filter(abs(p2-xCenter)*xScale2);rSum2+=r2*w;wSum2+=w;\n    return rSum2/wSum2;}\n  //\n  return 0.0;}      \n\n// Shader.\nvoid mainImage(out F4 fragColor,in F2 fragCoord){ \n  F1 x=fragCoord.x;\n  F1 y=1.0-fragCoord.y/iResolution.y;\n  F1 o=sin(iTime*SPEED)*THROW;\n  fragColor.g=0.0;  \n  if((y>0.04)&&(y<0.09))     fragColor.g=Swatch(x,o,1.0,1);\n  else if((y>0.11)&&(y<0.16))fragColor.g=Swatch(x,o,2.0,4);\n  //\n  else if((y>0.24)&&(y<0.29))fragColor.g=Swatch(x,o,1.0,2);\n  else if((y>0.31)&&(y<0.36))fragColor.g=Swatch(x,o,2.0,8);\n  //\n  else if((y>0.44)&&(y<0.49))fragColor.g=Swatch(x,o,1.0,4);\n  else if((y>0.51)&&(y<0.56))fragColor.g=Swatch(x,o,2.0,16);\n  //\n  else if((y>0.64)&&(y<0.69))fragColor.g=Swatch(x,o,1.0,8);\n  else if((y>0.71)&&(y<0.76))fragColor.g=Swatch(x,o,2.0,32);\n  //\n  else if((y>0.84)&&(y<0.89))fragColor.g=Swatch(x,o,1.0,16);\n  else if((y>0.91)&&(y<0.96))fragColor.g=Swatch(x,o,2.0,64);\n  //        \n  fragColor.g = Srgb(fragColor.g);\n  fragColor.rgb = fragColor.ggg;\n  fragColor.a = 0.0;}    \n    \n","name":"","description":"","type":"image"}]}