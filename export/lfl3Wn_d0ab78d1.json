{"ver":"0.1","info":{"id":"lfl3Wn","date":"1702962404","viewed":39,"name":"kaleidoscope space","username":"nayk","description":"copypast,and combination","likes":1,"published":1,"flags":1,"usePreview":0,"tags":["spiral","rotate","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*originals https://www.shadertoy.com/view/msKBzD https://www.shadertoy.com/view/DtGyWh https://www.shadertoy.com/view/lslyRn*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.010 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(2.000,1.000,0.000);\n    vec3 d = vec3(0.5,0.2,0.25);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat SDF_Triangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)/sign(p.y);\n}\n\nfloat spiral(in vec2 p)\n{\n    float x = p.x*3.;\n    float m = min (fract (x), fract (3. -x)) ;\n    return smoothstep (-0.2, .5, m*.5+.2-p.y) ;\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.03,1.);\t\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n    vec4 O=fragColor;\n    vec2 C=fragCoord;\n O=vec4(0);\n    \n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    \n      vec2 st = vec2 (atan(uv.x, uv.y), length (uv)) ;\n    uv = vec2 (st.x / 1.2831+.5- (-iTime + st.y), st.y);\n    float c = 0.0;\n    \n    float triangle = SDF_Triangle((C.xy-.5*iResolution.xy) / iResolution.y, .3);\n    \n\n    \n    \n  \n\n    \n    vec3 col = palette(length(st.y) + .4 + iTime*.4);\n    col *= c;\n    \n    \n    uv = (C.xy-.5*iResolution.xy) / iResolution.y;\n    c *= smoothstep(0.0, 0.05, length(uv));\n\n\n\n    st.x=fract(9.*sin(8.*(ceil(st.x*384.)/128.)));\n\n    float\n        t=iTime*2.*((st.x+.5)/2.), \n        b=pow(1.-fract(st.y+st.x+t),4.);\n\n    b=(b*.5)+step(1.-b,.05);\n    col += st.y * b*vec3(0.,.5,1.);\n    \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=iTime*1.1;\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=5.;\n          p.xz*=mat2(cos(iTime*1.1),sin(iTime*1.1),-sin(iTime*1.1),cos(iTime*1.1));\n           p.zy*=mat2(cos(iTime*1.1),sin(iTime*1.1),-sin(iTime*1.1),cos(iTime*1.1));\n            p.xy*=mat2(cos(iTime*1.1),sin(iTime*1.1),-sin(iTime*1.1),cos(iTime*1.1));\n            p.yz*=mat2(cos(iTime*1.1),sin(iTime*1.1),-sin(iTime*1.1),cos(iTime*1.1));\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(3.*sin((iTime*1.2)), 100.+cos((iTime*0.1))*5., 2.+cos(0.5*(iTime)) )+col;\n         }\n        g+=e=length(p.yz)/s;\n        \n    }\n    \n\tvec3 from=vec3(1.,.5,0.5)*O.xyz;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor*=O;\n}\n","name":"Image","description":"","type":"image"}]}