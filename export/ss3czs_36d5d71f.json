{"ver":"0.1","info":{"id":"ss3czs","date":"1653932698","viewed":80,"name":"Chaikin's Refinement Method","username":"Envy24","description":"Use mouse to control shape.\n\nBufferA - drawing spline\nBufferB - drawing control points\nBufferC - drawind dashed convex hull\nImage - mixing and coloroing\n\nFour passes used for better readability of code.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["spline","interpolation","subdivision","refinement","chaikin"],"hasliked":0,"parentid":"NlSBDc","parentname":"Template for interpolation"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 SC )\n{\n    vec4 spline      = TEXF0(SC);\n    vec4 knot        = TEXF1(SC);\n    vec4 convex_hull = TEXF2(SC);\n    \n    float min = MIN3(spline.r, knot.r, convex_hull.r);\n    \n    O = \n        min == 1.0 ?\n            vec4(1) :                            // Background color\n            min == spline.r ?\n                vec4(0, spline.r, spline.r, 1) : // Spline color\n                min == knot.r ?\n                    vec4(0, knot.r, 0, 1) :      // Knot color\n                    vec4(convex_hull);           // Convex hull  color\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define INITIALLY_FAR               9e30\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define TEXF2(SC)                 ( texelFetch(iChannel2, ivec2(SC), 0) )\n#define MIN3(a, b, c)             ( min(min((a), (b)), (c)) )\n#define NMY                       ( iMouse.y / R.y )                 // in range [0.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\n#define RANDOM\n\nconst int num_of_ctrls = max(3, /*Your number*/10);\nconst int num_of_subdivisions = min(3, (/*Your number*/3)); // 4, 5 is very laggy!\nconst int buffer_size = 256;\nvec2 ctrls[num_of_ctrls];\n/**\nvec2 ctrls[num_of_ctrls] = vec2[num_of_ctrls](\n\t\tvec2(-1.5,  0.9),\n\t\tvec2(-1.5,  0.0),\n\t\tvec2(0.0,   0.0),\n        vec2( 1.5,  -0.9)\n);\n/**/\n\nfloat capsuleSD(\n    in vec2 P,   // Sample coordinates\n    in vec2 B,   // Capsule begin coordinates\n    in vec2 E)   // Capsule end coordinates\n{\n    vec2 BP = P - B; // from B to P\n    vec2 BE = E - B; // from B to E\n    \n    // dot(SP, SE) - length of projection SP to SE.\n    // dot(SE, SE) - capsule squared length.\n    float t = clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0);\n\n    // Minimal distance from P to line BE * t.\n    vec2 K = BP - BE * t;\n    \n    return dot(K, K);\n    // then smoothstep(-SM, SM, minSqDist) somewhere in code.\n}\n\nfloat circleSQSDF(\n    in vec2 S,   // sample coordinates\n    in vec2 C,   // circle center\n    in float R,  // circle radius\n    in float SM) // AA parameter\n{\n    // Sample coordinates relative to circle center.\n    float x = S.x - C.x, y = S.y - C.y;\n    \n    // Signed distance of areas (squared distancies).\n    float sds = x * x + y *y - R * R;\n    \n    float ss = SM * SM;\n    \n    // Smoothstep interpolation.\n    return smoothstep(-ss, ss, sds);\n    //return smoothstep(-ss, ss, sds * sds); // outline\n}\n\n/* \n    Returns random vec2([-1.0; 1.0], [-1.0; 1.0]).\n*/\nvec2 vector2HashUI32(\n    const uint x,\n    const uint y)\n{\n    // Pick some enthropy source values.\n    // Try different values.\n    const uint entropy0 = 123u;\n    const uint entropy1 = 456u;\n    const uint entropy2 = 789u;\n\n    // Use linear offset method to mix coordinates.\n    uint value0 = y * entropy2 + x;\n    uint value1 = x * entropy2 + y;\n\n    // Calculate hash.\n\tvalue0 += entropy1; value0 *= 445593459u; value0 ^= entropy0;\n    value1 += entropy1; value1 *= 445593459u; value1 ^= entropy0;\n    \n    // 2.0f / 4294967295.0f = 4.6566128730773926e-10\n\n    return \n        vec2(\n            float(value0 * value0 * value0) * 4.6566128730773926e-10f - 1.0f,\n            float(value1 * value1 * value1) * 4.6566128730773926e-10f - 1.0f);\n}\n\nvoid randomize_ctrls(float time)\n{\n    time *= 0.5;\n    float t = fract(time);\n    uint T = uint(time);\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        uint x = T + uint(k);\n        uint y = 2u * T + uint(k * 2);\n        vec2 c = vector2HashUI32(x, y);\n        vec2 n = vector2HashUI32(x + 1u, y + 2u);\n    \n        ctrls[k] = c * (1. - t) + n * t;\n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int calculate_new_num_of_ctrls(\n    int num_of_ctrls,\n    int num_of_subdivisions)\n{\n    int cur_num_of_ctrls = num_of_ctrls;\n    \n    for (int s = 0; s < num_of_subdivisions; ++s)\n    {\n        cur_num_of_ctrls = cur_num_of_ctrls + (cur_num_of_ctrls - 2);\n    }\n    \n    return cur_num_of_ctrls;\n}\n\n/* Returns number of points */\nint subdivide(\n    inout vec2[buffer_size] points,\n    in vec2[num_of_ctrls] ctrls,\t\t\n    in int num_of_subdivisions,\n    in float t)\n{   \n    if (calculate_new_num_of_ctrls(num_of_ctrls, num_of_subdivisions) >= buffer_size) \n    { return 0; }\n\n    for (int c = 0; c < num_of_ctrls; ++c)\n    {\n        points[c] = ctrls[c];\n    }\n    \n    float T = t * 0.5; // Or you can use two parameters.\n    int cur_num_of_segments = num_of_ctrls - 1;\n\n    for (int i = 0; i < num_of_subdivisions; ++i)\n    {\n        int next_num_of_segments = cur_num_of_segments + (cur_num_of_segments - 1);\n        int w_offset = next_num_of_segments;\n\n        for (int r_offset = cur_num_of_segments; r_offset > 0; --r_offset)\n        {\n            vec2 diff = points[r_offset] - points[r_offset - 1];\n\n            points[w_offset] = points[r_offset - 1] + diff * (1. - T);\n            points[w_offset - 1] = points[r_offset - 1] + diff * T;\n\n            w_offset -= 2;\n        }\n\n        cur_num_of_segments = next_num_of_segments;\n    }\n    \n    return cur_num_of_segments + 1;\n}\n/**/\n\nfloat find_closest_curve_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    float minSqDist = INITIALLY_FAR;\n  \n    vec2 points[buffer_size];\n    \n    float t = \n        LMB_IS_HOLD == true ?\n            NMY : 0.4;\n    int num_of_points = subdivide(points, ctrls, num_of_subdivisions, t);\n       \n    int num_of_segments = num_of_points - 1;\n    \n    for (int s = 0; s < num_of_segments; ++s)\n    {\n        minSqDist = min(minSqDist, capsuleSD(NDC, points[s], points[s + 1])); \n    }\n    \n    float SM = 0.54 * 1e-3;\n    return smoothstep(-SM, SM, minSqDist);\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n    \n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(find_closest_curve_point_to_pixel(ctrls, NDC));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 find_closest_control_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n\n    for (int k = 0; k < num_of_ctrls; ++k)\n    {\n        vec2 diff = ctrls[k] - NDC;\n        float sqDist = dot(diff, diff);\n       \n        minSqDist = min(minSqDist, sqDist);\n        \n        closestP = \n            minSqDist == sqDist ? \n                ctrls[k] :\n                closestP;\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_control_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.02,\n        0.018));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 find_closest_convex_hull_point_to_pixel(\n    in vec2[num_of_ctrls] ctrls,\n    in vec2 NDC)\n{\n    vec2 closestP = vec2(0);\n    float minSqDist = INITIALLY_FAR;\n    \n    int num_of_lines = num_of_ctrls - 1; // 2 knots per line\n     \n    for (int l = 0; l < num_of_lines; ++l)\n    {\n        for (float t = 0.; t <= 1.; t += 0.1)\n        {\n            vec2 P = ctrls[l] * (1. - t) + ctrls[l + 1] * t;\n\n            vec2 diff = P - NDC;\n            float sqDist = dot(diff, diff);\n\n            minSqDist = min(minSqDist, sqDist);\n\n            closestP = \n                minSqDist == sqDist ? \n                    P :\n                    closestP;\n        }\n    }\n    \n    return closestP;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = TO_CENTERED_NDC(SC);\n\n#ifdef RANDOM\n    randomize_ctrls(iTime);\n#endif\n\n    O = vec4(circleSQSDF(\n        find_closest_convex_hull_point_to_pixel(ctrls, NDC),\n        NDC,\n        0.008,\n        0.0088));\n}","name":"Buffer C","description":"","type":"buffer"}]}