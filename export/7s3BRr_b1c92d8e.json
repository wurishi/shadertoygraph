{"ver":"0.1","info":{"id":"7s3BRr","date":"1668907161","viewed":138,"name":"Map Texture to sphere (improved)","username":"calebxcaleb","description":"mapped texture onto sphere. Needs some work to improve the conversion from xyz to uv","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["texture","sphere","map"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int SAMPLES = 100;\nfloat seed = 0.00;\nfloat aa = 0.01;\nfloat PI = 3.1415926535897932846264338327950;\nstruct Sphere{\n    float radius;\n    vec3 center;\n    vec3 col;\n};\n\nstruct Ray{\n    vec3 origin;\n    vec3 dir;\n};\n\nfloat random() {\n    return fract(sin(seed++)*43758.5453123);\n}\n\nfloat hit(Sphere s, Ray r){\n    vec3 dist = r.origin - s.center;\n    float a = dot(r.dir, r.dir);\n    float b = 2.0 * dot(dist, r.dir);\n    float c = dot(dist, dist) - s.radius * s.radius;\n    float discriminant = b*b - 4.0*a*c;\n    \n    if(discriminant >= 0.0){\n        return (-b - sqrt(discriminant) ) / (2.0*a);\n    } else {    \n        return 1.0;\n    }\n}\n\nvec3 display(Sphere s, Ray r){\n    float t = hit(s, r);\n    \n    if(t < 0.0){\n        vec3 norm = normalize(r.origin + r.dir * t - s.center);\n        // float u = (atan(norm[0]/norm[1]) / (0.5 * PI) + 1.0 ) / 2.0;\n        // float v = acos(norm[2]) / PI;\n        float u = (atan(norm[0]/norm[1]) + 0.5 * PI) / PI;\n        float v = acos(norm[2]) / PI;\n        vec4 texCol = texture(iChannel0, vec2(u, v));\n        return vec3(texCol);\n        // return vec3(normalize(r.origin + r.dir * t - s.center));\n    }\n    \n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vec2((fragCoord.x/iResolution.x), (fragCoord.y/iResolution.y)/aspect);\n    uv = fragCoord - iResolution.xy*0.5;\n    uv /= iResolution.y;\n\n    \n    Sphere s = Sphere(0.25, vec3(0.0, 0.0, 1.0), vec3(1.0, 0.5, 0.25));\n    Ray r;\n\n\n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < SAMPLES; i++){\n        r = Ray(vec3(0.0, 0.0, 0.0), vec3(uv.x + random() * aa, uv.y + random() * aa, -1.0));\n        col += display(s, r);\n    }\n    \n    col /= float(SAMPLES);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}