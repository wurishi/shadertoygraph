{"ver":"0.1","info":{"id":"MXBcRd","date":"1727576764","viewed":60,"name":"看烟花","username":"lbl","description":"烟花","likes":1,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"  #ifndef MOVIT\n#define  SHADERTOY\n#endif\n\n#ifdef SHADERTOY\n \n#define getInput  shadertoyGetInput\nvec4 shadertoyGetInput(vec2 uv) {\n  return texture(iChannel0 ,uv);\n}\n#define PREFIX(name) name\n#endif\n\n#ifdef MOVIT\n#define getInput INPUT\n#endif\n\n//@const\n#ifndef PI\n#define PI  3.141592\n#endif\nconst int PREFIX(COL_NUM) = 2;\nconst vec3 PREFIX(cols)[PREFIX(COL_NUM)] = vec3[PREFIX(COL_NUM)]( \n vec3(.99,.80,.40)\n,vec3(.90,.5,.7)\n);\n//@end\n\n//@requisite\nvec2  PREFIX(resolution)  = vec2(800.,800.);\nvec2  PREFIX(FragCoord) = vec2(0.);\nfloat PREFIX(time) = 0.;\nfloat PREFIX(duration) = 80.;\n//@end\n\n//@optional\n//@type float\n//@name light\n//@desc 环境亮度\nfloat PREFIX(light) = .2;  \n\n//@optional\n//@type float\n//@name np\n//@desc 数量每6秒发射的个数\nfloat PREFIX(np) = 6.;\n\n#ifdef SHADERTOY\n#define texture xxx\n#define gl_FragCoord xxx\n#define iResolution xxx \n#endif\n\n//@impl\n\n//random value\nvec2 PREFIX(N22)(vec2 p)\n{\n  vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n  a += dot(a, a + 34.45);\n  return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nfloat PREFIX(N21)(vec2 p)\n{\n  vec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\n  return fract( dot(a, a + 34.45) );  \n}\n\nfloat PREFIX(cheap_star)(vec2 uv, float anim,float r)\n{\n  uv = abs(uv);\n  vec2 pos = min(uv.xy/uv.yx, anim);\n  float p = (2.0 - pos.x - pos.y);\n  return clamp( (1.5+p*(p*p-1.5)) / (uv.x+uv.y),0.,1.) * r;      \n}\n\nvec4 PREFIX(burst0)(vec2 st, vec2 pos, float r, vec3 col)\n{\n  st -= pos;\n  float ani = sin(PREFIX(time) * 12.0) * 0.1 + 1.0;\n  col = PREFIX(cheap_star)(st,ani,r) * col;\n  return vec4(clamp(col,0.,1.),1.);\n}\n\nvec4 PREFIX(burst)(vec2 st, vec2 pos, float r, vec3 col)\n{\n  st -= pos;\n  // r =   pow(r,1.0);\n  /// 发光效果\n  r = (r / length(st)) * .2 ;\n  return  vec4(col*r,1.);\n}\n\nvec4 PREFIX(burst0)(vec2 st, vec2 pos,vec2 pos0,float t, float r, vec3 col)\n{\n  st -= pos;\n  // pos0 = pos - vec2(.1);\n  vec2 v = pos0 - pos;\n  float ang =  3.14 + atan(v.x ,v.y);\n  float len = length(pos0 - pos);\n  mat2 T = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\n  st = T * st;\n  t *= 5.; \n  if(st.y < 0.) {\n    st.y *=  (1./(1. + t));\n  }\n \n  r = (r / length(st)) * .2 ;\n  return  vec4(col*r,1.);\n}\n\nvec4 PREFIX(difflight)(vec2 st, vec2 pos,vec3 col)\n{\n  float l = dot(vec3(0.,0.,1.),normalize( vec3(pos,5.) - vec3(st,0.) ) );\n  return vec4(col * l,1.);\n}\n\n/// s = p0 + ut + 0.5at^2\n/// 距离加速度公式\n// 初速度， 加速度 ，初始位置，时间，角度\nvec2 PREFIX(get_pos)(vec2 u, vec2 a, vec2 p0, float t, float ang)\n{\n  /// 根据初始位置、水平和垂直的速度、加速度来更新当前的位置\n  mat2 T = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\n  vec2 d = p0 + T * u * t + 0.5 * a * t * t;\n  return d;\n}\n// \nvec2 PREFIX(get_burstpos)(vec2 u,vec2 u0, vec2 a , vec2 p0, float t, float ang)\n{\n  mat2 T = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\n  a = T * a;\n  u = T * u + u0;\n  vec2 d =  u * t + 0.5 * a * t * t; \n  return p0 +   d;\n}\n\n// t 时刻的粒子速度\n// 初速度， 加速度 ，时间，角度\nvec2 PREFIX(get_velocity)(vec2 u, vec2 a , float t, float ang)\n{\n  /// 根据加速度、当前水平和垂直的速度来更新当前的速度\n  mat2 T = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\n  return T * u + a * t;\n}\n\nvec4 PREFIX(filte)(vec2 uv) {\n  const float snp = 20.;\n  const float R_RATIO = 0.04;\n  const float ACC_RATIO = 0.03;\n  const float ANG = 30.;\n  const vec2 acc = vec2(0.0, -9.8); ///< 重力加速度 acc\n  const float R0 = 2.;\n  vec3 col0 = getInput(uv).xyz;\n  //100m 的场景里播放烟花 \n  uv = 100. * ( (2. * PREFIX(FragCoord).xy - PREFIX(resolution).xy) /  PREFIX(resolution).y );\n  vec2 u = vec2(0.);               \n  \n  float ang =  0.;             ///< 上升粒子的发射角度\n  vec4 particles = vec4(0.0); //particle\n  vec4 dlight = vec4(0.);\n  for (float i = 0.; i < PREFIX(np); i++)\n  {    \n    float sid = i / np * 7.;\n    float t_i = PREFIX(time) - sid;\n    float tid =  floor(t_i / 7.);\n    float r = R0;\n    vec2 rand = PREFIX(N22)(vec2(sid,tid));\n    /// 初始位置\n    vec2 ip = vec2( 100. * sin(30.*rand.x), -60.);\n    /// 初速度\n    u = vec2(44.,0.);\n    ang = radians(90. + ANG * (-1. + PREFIX(N21)(vec2(sid,tid))* 2. ) );   \n\n    t_i =  mod(t_i,7.);\n    if(t_i < 0.) continue;\n    vec2 s = PREFIX(get_pos)(u, acc, ip, t_i, ang);\n    vec2 v = PREFIX(get_velocity)(u, acc, t_i, ang);\n\n    mat2 T = mat2(cos(ang),sin(ang),-sin(ang),cos(ang));\n    // 计算竖直向上的运动时间\n    float t_up = (T * u).y / abs(acc.y);\n    \n    /// 根据时间计算出向上运动的最大高度\n    vec2 h_max = PREFIX(get_pos)(u, acc, ip, t_up, ang);\n \n    if (t_i - t_up > 0. ) { ///< 下落速度超过一定大小则消失\n      r = 0.0;     \n    }else {\n      vec3 pcol = PREFIX(cols)[int(rand.y*float(PREFIX(COL_NUM)))];\n      vec2 t = PREFIX(get_pos)(u, acc, ip, t_i - .1, ang);\n      particles += PREFIX(burst0)(uv, s,t,(  t_up - t_i)/t_up , R0 , pcol); \n      dlight += PREFIX(difflight)(uv,s,pcol);\n    }\n\n    // 到最高点是爆炸\n    if (t_i - t_up  > 0.  && t_i - t_up < 2.) // 炸2秒\n    {\n      /// 把一个圆根据角度分成若干份扇形\n      float unit = (360. / snp);\n      for (float j = 0.0; j < snp; j++)\n      {\n        float ang = radians(j * unit);\n        float r  = 1. - .5 * (t_i - t_up) ;\n        vec2 v0 = vec2(PREFIX(N21)(vec2(ang ,sid + tid))*.5 + .5,0.) * 50.;\n        vec2 S = PREFIX(get_burstpos)(v0,v, vec2(-12.5,0.) , h_max, t_i - t_up, ang);\n        vec2 rand = PREFIX(N22)(vec2(i));\n        vec3 pcol = PREFIX(cols)[int(rand.y*float(PREFIX(COL_NUM)))];\n        particles += PREFIX(burst)(uv, S, max(0.0, r), pcol);\n        dlight += PREFIX(difflight)(uv,S,pcol/snp);\n      }\n    }\n  }\n  return vec4( clamp( col0 * clamp( (dlight.rgb + vec3(PREFIX(light))),0.,1.) +  particles.rgb ,0.,1.) ,  1.0);\n}\n\n//@end\n#ifdef SHADERTOY\n\n#undef texture \n#undef gl_FragCoord \n#undef iResolution  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n  resolution = iResolution.xy;\n  time = fract(iTime/PREFIX(duration)) * PREFIX(duration);//@0\n  FragCoord = fragCoord.xy;\n  vec2 uv = fragCoord/iResolution.xy;\n  fragColor = filte(uv );\n}\n#endif\n\n#ifdef MOVIT\n\nvec4 FUNCNAME(vec2 tc)\n{\n// @param\n#ifdef PREFIX(DEF_mov_time)\n  PREFIX(time) = PREFIX(mov_time);\n#endif\n\n#ifdef PREFIX(DEF_mov_width)\n  PREFIX(resolution).x = PREFIX(mov_width);\n#endif\n\n#ifdef PREFIX(DEF_mov_height) \n  PREFIX(resolution).y = PREFIX(mov_height);\n#endif\n//@end\n\n//@opt\n#ifdef PREFIX(DEF_mov_light)\n  PREFIX(light) = PREFIX(mov_light);\n#endif\n\n#ifdef PREFIX(DEF_mov_np)\n  PREFIX(np) = PREFIX(np);\n#endif\n\n//@end\n\n  PREFIX(FragCoord) = PREFIX(resolution) * tc;\n  return PREFIX(filte)(tc);\n}\n\n#endif\n\n\n  ","name":"Image","description":"","type":"image"}]}