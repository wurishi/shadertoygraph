{"ver":"0.1","info":{"id":"4tXBWs","date":"1513810431","viewed":133,"name":"ruiqimao - Sphere","username":"ruiqimao","description":"Simple raymarched sphere","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// FXAA implementation by David Ronai / @Makio64\n// https://www.shadertoy.com/view/Xst3WX\n\n#define FXAA_REDUCE_MIN   (1.0/ 128.0)\n#define FXAA_REDUCE_MUL   (1.0 / 8.0)\n#define FXAA_SPAN_MAX     16.0\n\nvoid texcoords(vec2 fragCoord, vec2 resolution,\n\t\t\tout vec2 v_rgbNW, out vec2 v_rgbNE,\n\t\t\tout vec2 v_rgbSW, out vec2 v_rgbSE,\n\t\t\tout vec2 v_rgbM) {\n\tvec2 inverseVP = 1.0 / resolution.xy;\n\tv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\n\tv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\n\tv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\n\tv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\n\tv_rgbM = vec2(fragCoord * inverseVP);\n}\n\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\n            vec2 v_rgbNW, vec2 v_rgbNE, \n            vec2 v_rgbSW, vec2 v_rgbSE, \n            vec2 v_rgbM) {\n    vec4 color;\n    mediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\n    vec3 rgbNW = texture(tex, v_rgbNW).xyz;\n    vec3 rgbNE = texture(tex, v_rgbNE).xyz;\n    vec3 rgbSW = texture(tex, v_rgbSW).xyz;\n    vec3 rgbSE = texture(tex, v_rgbSE).xyz;\n    vec4 texColor = texture(tex, v_rgbM);\n    vec3 rgbM  = texColor.xyz;\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n    mediump vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n                          (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\n    dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX),\n              max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),\n              dir * rcpDirMin)) * inverseVP;\n    vec3 rgbA = 0.5 * (\n        texture(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\n        texture(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\n    vec3 rgbB = rgbA * 0.5 + 0.25 * (\n        texture(tex, fragCoord * inverseVP + dir * -0.5).xyz +\n        texture(tex, fragCoord * inverseVP + dir * 0.5).xyz);\n    float lumaB = dot(rgbB, luma);\n    if ((lumaB < lumaMin) || (lumaB > lumaMax))\n        color = vec4(rgbA, texColor.a);\n    else\n        color = vec4(rgbB, texColor.a);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mediump vec2 v_rgbNW;\n\tmediump vec2 v_rgbNE;\n\tmediump vec2 v_rgbSW;\n\tmediump vec2 v_rgbSE;\n\tmediump vec2 v_rgbM;\n\ttexcoords(fragCoord, iResolution.xy, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n    fragColor = fxaa( iChannel0, fragCoord, iResolution.xy, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define EPSILON 0.001\n#define PI      3.141592653589793238452\n\n#define P_NONE   0\n#define P_SPHERE 1\n\n#define BOUNDS     50.0\n#define THRESHOLD  0.001\n#define ITERATIONS 1000\n\n// Struct for raymarching results\nstruct PD {\n    int p;\n    float d;\n};\n\n/**\n * Generate the primary ray.\n *\n * @param origin The camera position.\n * @param target The camera target.\n * @param focalLength The camera focal length.\n * @param uv The uv coordinates.\n *\n * @return The primary ray.\n */\nvec3 generatePrimaryRay(in vec3 origin, in vec3 target, in float focalLength, in vec2 uv) {\n    // Camera vectors.\n    vec3 w = normalize(target - origin);\n    vec3 v = vec3(0.0, 1.0, 0.0);\n    vec3 u = normalize(cross(w, v));\n    \n    // Construct the ray.\n    vec3 ray = normalize(uv.x * u + uv.y * v + focalLength * w);\n    \n    return ray;\n}\n\n/**\n * Sphere texture mapping.\n *\n * @param pos The sample position.\n * @param norm The normal.\n * @param tex The texture.\n *\n * @return The mapped color.\n */\nvec3 txSphere(in vec3 pos, in vec3 norm, sampler2D tex) {\n    vec3 x = texture(tex, pos.yz).xyz;\n    vec3 y = texture(tex, pos.zx).xyz;\n    vec3 z = texture(tex, pos.xy).xyz;\n    return x * abs(norm.x) + y * abs(norm.y) + z * abs(norm.z);\n}\n\n/**\n * Signed distance to sphere.\n *\n * @param pos The sample position.\n */\nfloat sdSphere(in vec3 pos) {\n    float dist = length(pos) - 1.0;\n    vec3 norm = normalize(pos);\n    float disp = txSphere(norm, norm, iChannel2).r;\n    return dist + disp * 0.1;\n}\n\n/**\n * Signed distance field.\n *\n * @param pos The sample position.\n *\n * @return The closest primitive and distance to said primitive.\n */\nPD map(in vec3 pos) {\n    return PD(P_SPHERE, sdSphere(pos));\n}\n\n/**\n * Calculate a normal using directional derivative.\n *\n * @param pos The sample position.\n *\n * @return The calculated normal.\n */\nvec3 norm(in vec3 pos) {\n    vec2 e = vec2(EPSILON, 0.0);\n    vec3 diff = vec3(map(pos + e.xyy).d - map(pos - e.xyy).d,\n                     map(pos + e.yxy).d - map(pos - e.yxy).d,\n                     map(pos + e.yyx).d - map(pos - e.yyx).d);\n    return normalize(diff);\n}\n\n/**\n * Raymarch.\n *\n * @param pos The ray position.\n * @param dir The ray direction.\n *\n * @return The resulting intersection.\n */\nPD raymarch(in vec3 pos, in vec3 dir) {\n\tfloat totalDistance = 0.0;\n    \n    // Try to intersect with a primitive.\n    for (int i = 0; i < ITERATIONS; i ++) {\n        // March an iteration.\n        PD closest = map(pos + dir * totalDistance);\n        totalDistance += closest.d;\n        \n        // Look for an intersection.\n        if (closest.d < THRESHOLD) {\n            return PD(closest.p, totalDistance);\n        }\n        \n        // Exit early if outside bounds.\n        if (totalDistance > BOUNDS) break;\n    }\n    \n    // No intersection.\n    return PD(P_NONE, 0.0);\n}\n\n/**\n * Ambient occlusion.\n *\n * @param pos The sample position.\n * @param norm The sample normal.\n *\n * @return The ambient factor.\n */\nfloat occlusion(in vec3 pos, in vec3 norm) {\n    for (float dist = 0.01; dist < 0.1; dist += 0.001) {\n        PD samp = map(pos + norm * dist);\n        \n        // If the distances are the same, no occlusion.\n        if (abs(dist - samp.d) < 0.01) {\n            continue;\n        }\n        \n        // If the sample distance is less than the surface distance, occlusion.\n        if (samp.d < dist) {\n            return dist / 0.1;\n        }\n    }\n    \n    // No occlusion.\n    return 1.0;\n}\n\n/**\n * Render.\n *\n * @param pos The ray position.\n * @param dir The ray direction.\n * @param pd The intersection.\n *\n * @return The color.\n */\nvec3 render(in vec3 pos, in vec3 dir, in PD pd) {\n    // No intersection.\n    if (pd.p == P_NONE) return vec3(texture(iChannel0, dir));\n    \n    vec3 color = vec3(0.0);\n    vec3 isect = pos + dir * pd.d;\n    vec3 inorm = norm(isect);\n    vec3 ldir = normalize(vec3(1.0, 0.6, 0.5));\n    vec3 edir = normalize(pos - isect);\n    \n    // Sphere.\n    vec3 tex = txSphere(isect, inorm, iChannel1);\n    float ambient = occlusion(isect, inorm) * 0.3;\n    float diffuse = clamp(dot(inorm, ldir), 0.0, 1.0) * 0.7;\n    float specular = pow(clamp(dot(normalize(edir),\n                                   reflect(-ldir, inorm)),\n                               0.0, 1.0),\n                         32.0) * 0.3;\n    color = tex * (ambient + diffuse + specular);\n    color += texture(iChannel0, reflect(-edir, inorm)).xyz * 0.1;\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime * 0.2;\n    vec3 origin = vec3(5.0 * cos(time), 1.0, 5.0 * sin(time));\n    vec3 target = vec3(0.0, 0.0, 0.0);\n    float focalLength = 2.0;\n    \n    // Calculate the uv coordinates.\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = 2.0 * uv - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Generate the primary ray.\n    vec3 ray = generatePrimaryRay(origin, target, focalLength, uv);\n    \n    // Raymarch.\n    PD result = raymarch(origin, ray);\n    \n    // Output the final color.\n    fragColor = vec4(render(origin, ray, result), 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}