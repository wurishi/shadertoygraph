{"ver":"0.1","info":{"id":"NsGXzG","date":"1635129293","viewed":83,"name":"闪粉颜色条带生成器","username":"huangfeihong","description":"给定颜色数量以及颜色数组生成颜色条带","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sparklecolor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RGB vec3\n\n\n\n// 设计师指定颜色数量以及对应的颜色RGB\n/*****************************************************************/\n/*****************************************************************/\n/*****************************************************************/\nconst int NUM = 14;          // 颜色数量\nvec3 color[NUM] = vec3[](\n        RGB(234, 65,  214),\n        RGB(255, 128, 0),\n        RGB(255, 255, 0),\n        RGB(0,   255, 0),     // 绿色\n        RGB(0,   255, 255),\n        RGB(0,   0,   255),\n        RGB(234, 65,  214),\n        RGB(31,  252, 198),\n        RGB(0,   255, 0),\n        RGB(128, 0,   255),   // 紫色\n        RGB(0,   255, 255),\n        RGB(255, 255, 0),\n        RGB(234, 65,  214),\n        RGB(31,  252, 198)\n);\n\n/*****************************************************************/\n/*****************************************************************/\n/*****************************************************************/\n\n\nvec3 rgb(vec3 col)\n{\n    return col / 255.0;\n}\n\nvec3 palette(vec3 c1, vec3 c2, float t)\n{\n    float PI = 3.1415926;\n    vec3 k = c2 - c1;\n    vec3 m = c1;\n\n    float r, g, b;\n    if(c1.r > c2.r)\n    {\n        r = -(0.5 - 0.5 * cos(2.0 * PI * (0.5 * t + 0.5))) * k.r + c2.r;\n    }\n    else\n    {\n        r = (0.5 + 0.5 * cos(2.0 * PI * (0.5 * t + 0.5))) * k.r + c1.r;\n    }\n\n    if(c1.g > c2.g)\n    {\n        g = -(0.5 - 0.5 * cos(2.0 * PI * (0.5 * t + 0.5))) * k.g + c2.g;\n    }\n    else\n    {\n        g = (0.5 + 0.5 * cos(2.0 * PI * (0.5 * t + 0.5))) * k.g + c1.g;\n    }\n\n    if(c1.b > c2.b)\n    {\n        b = -(0.5 - 0.5 * cos(2.0 * PI * (0.5 * t + 0.5))) * k.b + c2.b;\n    }\n    else\n    {\n        b = (0.5 + 0.5 * cos(2.0 * PI * (0.5 * t + 0.5))) * k.b + c1.b;\n    }\n    \n    return vec3(r, g, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    float t = fract(uv.x * float(NUM - 1));\n    \n\n        \n        \n    for(int i = 0; i < NUM - 1; i++)\n    {\n        if (uv.x < (float(i) + 1.0) / float(NUM - 1))\n        {\n            vec3 c1 = rgb(color[i]);\n            vec3 c2 = rgb(color[i + 1]);\n\n            fragColor = vec4(palette(c1, c2, t), 1.0);\n            break;\n        }\n    }\n    \n    fragColor = pow ( fragColor, vec4(1./2.2) );\n}\n","name":"Image","description":"","type":"image"}]}