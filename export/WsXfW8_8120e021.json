{"ver":"0.1","info":{"id":"WsXfW8","date":"1588096704","viewed":425,"name":"DoF DNA Helix","username":"jaszunio15","description":"DNA Helix - live coded during TK Games Shader Course.\n\nShader License: CC BY 3.0\nAuthor: Jan Mróz (jaszunio15)","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["dof","helix","dna"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Shader License: CC BY 3.0\n//Author: Jan Mróz (jaszunio15)\n\n//source: https://iquilezles.org/articles/distfunctions2d\nfloat sdBox( in vec2 uv, in vec2 boxSize )\n{\n    vec2 d = abs(uv) - boxSize;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nfloat square(vec2 uv, vec2 center, float size, float blur)\n{\n    float pixelSize = fwidth(uv.y);\n\tfloat sdf = sdBox(uv - center, vec2(size - pixelSize * blur * 0.5));\n    return smoothstep(pixelSize * blur, -pixelSize, sdf);\n}\n\nfloat depthToColor(float depth)\n{\n \treturn mix(0.2, 1.0, depth);   \n}\n\nfloat depthToBlur(float depth)\n{\n \treturn mix(10.0, 1.0, depth);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 baseUV = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    baseUV *= 5.0;\n    float pixelSize = fwidth(baseUV.x);\n    \n    float angle = 0.3;\n    baseUV *= mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n    \n    float uvPos = floor(baseUV.x) * 0.3;\n    vec2 uv = vec2(fract(baseUV.x) - 0.5, baseUV.y);\n    \n    float sinDNA = sin(uvPos + iTime);\n    float cosDNA = cos(uvPos + iTime);\n    \n    float dnaPos1 = sinDNA * 2.0;\n    float dnaPos2 = -sinDNA * 2.0;\n    \n    float dnaDepth1 = cosDNA * 0.5 + 0.5;\n    float dnaDepth2 = -cosDNA * 0.5 + 0.5;\n    \n    float depthLine = mix(dnaDepth1, dnaDepth2, smoothstep(dnaPos1, dnaPos2, uv.y));\n    \n    float lineBlur = depthToBlur(depthLine);\n    float lineAlpha = smoothstep(2.0 * pixelSize * lineBlur * 0.5, -pixelSize * lineBlur , abs(uv.x));\n    lineAlpha *= 1.0 - step(abs(dnaPos1), abs(uv.y));\n\n    float square1Alpha = square(uv, \n                                vec2(0.0, dnaPos1), \n                                dnaDepth1 * 0.2 + 0.2, \n                                depthToBlur(dnaDepth1));\n    float square2Alpha = square(uv, \n                                vec2(0.0, dnaPos2), \n                                dnaDepth2 * 0.2 + 0.2, \n                                depthToBlur(dnaDepth2));\n    \n    float image = 0.0;\n    \n    if (dnaDepth1 > dnaDepth2)\n    {\n        image = mix(image, depthToColor(dnaDepth2), square2Alpha);\n        image = mix(image, depthToColor(depthLine), lineAlpha);\n        image = mix(image, depthToColor(dnaDepth1), square1Alpha);\n    }\n    else\n    {\n        image = mix(image, depthToColor(dnaDepth1), square1Alpha);\n        image = mix(image, depthToColor(depthLine), lineAlpha);\n        image = mix(image, depthToColor(dnaDepth2), square2Alpha);\n    }\n    \n    fragColor = vec4(image);\n}","name":"Image","description":"","type":"image"}]}