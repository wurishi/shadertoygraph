{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"/*\nPlay with Shadertoy's built-in music.\nExperiment with several derivations (seen on lower edge, not all used).\nLeft white graph represents number of faces attempted.\nMouse click/drag changes camera view which changes colors.\n*/\n\n#define PI (3.14159265)\n#define TAU (2.*PI)\n\nmat3 MAT3xz(float ANG) { return mat3( cos(ANG),0,sin(ANG), 0,1,0, -sin(ANG),0,cos(ANG) ); }\nmat3 MAT3zy(float ANG) { return mat3( 1,0,0, 0,cos(ANG),sin(ANG), 0,-sin(ANG),cos(ANG) ); }\n#define ROT2(ANG) mat2(cos(ANG),sin(ANG),-sin(ANG),cos(ANG))\n\nfloat sdSphere(vec3 pt,float sz) {\n    return length(pt)-sz;\n}\n\n// I played to get this small\n#define PHI 1.6180339887\nfloat sdDodecahedron(vec3 p,float d) {\n    p = abs(p);\n    vec2 v = normalize(vec2(1,PHI));\n    float d1 = dot(p.yz,v.xy);  \n    float d2 = dot(p.xz,v.yx);\n    float d3 = dot(p.xy,v.xy);\n    return max(d1,max(d2,d3))-d;\n}\n\n// ********** sdWhateverhedron *************\n/*\nfloat ampl(float f1,float f2) {\n    float res = 0.;\n    int if2 = int(f2 / 23.);\n    for ( int if1 = int(f1 / 23.); if1 < if2; ++if1 )\n        res += texelFetch( iChannel0, ivec2(if1,0), 0 ).x;\n    return res;\n}\n\n#define sin1(X) (.5+.5*sin(X))\n#define sinab(X,A,B) (sin1(X)*((B)-(A))+(A))\n*/\n\nint count;\nfloat sdWhateverhedron(vec3 p,float h) {\n  float d = -1e9;\n  float d2 = 1e9;\n  float tm = iTime/4.;\n  count=0;\n  h *= (.5+.4*texelFetch( iChannel0, ivec2(20,4), 0 ).x);\n  //float dc = TAU/sinab(tm*1.7+TAU/5.,2.3,4.98);\n  //float db = TAU/sinab(tm*1.3+TAU/6.,2.2,4.95);\n  //float da = TAU/sinab(tm*1.,2.4,4.9);\n  float da = TAU/clamp(2.2+7.*texelFetch( iChannel0, ivec2(30,4), 0 ).x,2.7,6.9);\n  float db = TAU/clamp(2.3+7.*texelFetch( iChannel0, ivec2(70,4), 0 ).x,2.8,6.8);\n  float dc = TAU/clamp(2.4+7.*texelFetch( iChannel0, ivec2(120,4), 0 ).x,2.9,6.7);\n  for ( float cc = 2.; cc < TAU; cc += dc )\n  for ( float bb = 2.; bb < TAU; bb += db )\n  for ( float aa = 2.; aa < TAU; aa += da )\n  {\n    vec3 n = vec3(1,0,0);\n    n.xy *= ROT2(aa);\n    n.yz *= ROT2(cc);\n    n.xz *= ROT2(bb);\n    float t;\n    t = dot(p,n);  if ( t > d ) d = t;\n    //t = sdSphere(p-n*h,.3); if ( t < d2 ) d2 = t;\n    ++count;\n  }\n  d -= h;\n  return min(d,d2);\n}\n\nvec3 Spin(vec3 p) {\n   p.xz *= ROT2(iTime);\n   p.yz *= ROT2(iTime*1.4);\n   return p;\n}\n\nvec2 Dist(vec3 pt) {\n    vec2 hit = vec2(100000,0);\n    float tmp, clr = 0.;\n#define T(SDF) if ( (tmp = SDF) < hit.x ) hit = vec2(tmp,clr); clr += 1.;\n#define TC(SDF,C) if ( (tmp = SDF) < hit.x ) hit = vec2(tmp,C);\n    T( sdSphere( pt-vec3(20,-10,0), 2. ) )\n    T( sdDodecahedron(Spin(pt-vec3(-20,10,0)),4.) )\n    T( sdWhateverhedron(pt,15.) )\n    T( sdSphere( pt-vec3(30,20,30), 2. ) )\n    T( sdSphere( pt-vec3(-30,-10,20), 2. ) )\n    return hit;\n}\n\nvec4 March(vec3 beg,vec3 dir) { // return iâ˜ºntersection point and object of ray\n    float dist = 0.;\n    vec3 pos;\n    for ( int stps = 0; stps < 150; ++stps ) {\n        pos = beg + dir * dist;\n        vec2 obj = Dist( pos );\n        dist += obj.x;\n        if ( dist > 200. ) return vec4( pos, 91. );\n        if ( pos.z < -80. ) return vec4( pos, 91. );\n        if ( obj.x < .001 || stps == 149 ) return vec4( pos, obj.y );\n    }\n    return vec4( pos, 90. );\n}\n\nvec3 Normal(vec3 pt) {\n    float delta = .001; // large delta gives rounded corners\n    vec3 norm = Dist(pt).x - vec3(\n        Dist(pt-vec3(delta, 0., 0.)).x, \n        Dist(pt-vec3( 0.,delta, 0.)).x, \n        Dist(pt-vec3( 0., 0.,delta)).x );\n    return normalize( norm );\n}   \n\nfloat pow2n(float x,int n) {\n    while ( n-- > 0 ) x *= x;\n    return x;\n}\n\nvoid mainImage( out vec4 O, vec2 U ) {\n\n    vec2 R = iResolution.xy;\n    vec2 uv = (U+U-R) / min(R.x,R.y);  // -1 ... +1\n\n    vec3 cam = vec3(0,0,-40);\n    vec3 camdir = normalize( vec3( uv, 2.) );\n    \n    vec2 M = iMouse.xy;\n    if ( M.x != .0 || M.y != 0. ) \n      M = (M+M-R) / min(R.x,R.y);  // -1 ... +1\n    mat3 rot = MAT3xz(M.x*2.) * MAT3zy(M.y*2.);\n    cam *= rot;\n    camdir *= rot;\n\n    vec4 hit = March( cam, camdir );\n    vec3 norm = Normal(hit.xyz);\n\n    vec3 Light = vec3(-40);\n    vec3 dir = normalize( Light - hit.xyz );\n    float difu = max(0.,dot( norm, dir ));\n\n    vec3 Light2 = vec3(40);\n    dir = normalize( Light2 - hit.xyz );\n    difu += max(0.,dot( norm, dir ));\n\n    difu += pow2n(difu,2);\n    \n    difu *= .6;\n   \n    difu = .30 + .70*difu;\n    \n#define CLR(C) pow(.5+.5*sin((C)+vec3(0.,TAU/3.,TAU*2./3.)),vec3(.5))\n   \n    float jj = texelFetch( iChannel0, ivec2(3,0), 0 ).x;\n    jj = pow2n(jj,3);\n    if ( hit.w < 59. ) \n        O = difu * vec4(CLR(hit.w+jj*4.)*(1.+norm),1);\n    else\n        O = vec4(vec3(.2,.2,.8)*camdir /* *MAT3xz(jj*TAU*4.) */ ,1.);\n    O = sqrt(O);\n    \n    if (U.x<10.&&U.y<float(count)/150.*R.y)\n        O=vec4(1);\n    /*    \n    float lev = texelFetch( iChannel0, ivec2(U.x/R.x*512./1.,0), 0 ).x;\n    float lev2 = texelFetch( iChannel0, ivec2(U.x/R.x*512./1.+1.,0), 0 ).x;\n    lev -= .8*lev2;\n    lev *= 30.;\n    //lev *= pow2n(lev,4) * 16.;\n    lev = 30.*texelFetch( iChannel0, ivec2(U.x,3.), 0 ).x;\n    */\n    float sy = 3.; // height of music info bars\n    if (      U.y < sy*1. )\n      O=vec4(0,1,1,1)*texelFetch( iChannel0, ivec2(U.x,0.), 0 ).x;\n    else if ( U.y < sy*2. )\n      O=vec4(0,1,0,1)*float(10.*abs(texelFetch( iChannel0, ivec2(U.x,1.), 0 ).x)>U.y-sy);\n    else if ( U.y < sy*3. )\n      O=vec4(1,0,0,1)*30.*texelFetch( iChannel0, ivec2(U.x,2.), 0 ).x;\n    else if ( U.y < sy*4. )\n      O=vec4(1,1,0,1)*5.*texelFetch( iChannel0, ivec2(U.x,3.), 0 ).x;\n    else if ( U.y < sy*5. )\n      O=vec4(1,1,1,1)*1.*texelFetch( iChannel0, ivec2(U.x,4.), 0 ).x;\n    else if ( U.y < sy*6. )\n      O=texelFetch( iChannel0, ivec2(U.x,5.), 0 );\n    else if ( U.y < sy*7. )\n      O=10.*texelFetch( iChannel0, ivec2(U.x,6), 0 );\n    else if ( U.y < sy*8. )\n      O=10.*texelFetch( iChannel0, ivec2(U.x,7), 0 );\n         //texelFetch( iChannel0, ivec2(xs,0.), 0 ).x     - texelFetch( iChannel0, ivec2(xs-1.,0.), 0 ).x\n//O=pow(texelFetch( iChannel0, ivec2(U.x,U.y/40.), 0 ),vec4(.5));\n}\n\n","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"\n#define PI (3.14159265)\n#define TAU (2.*PI)\n\nvoid mainImage(out vec4 O,vec2 U)\n{\n    U = floor(U);\n    O = texelFetch( iChannel1, ivec2(U), 0 );\n    if ( U.x < 512. )\n    if ( U.y == 5. ) { // ft of fft\n        float ws = TAU/44100.*2.*U.x;\n        vec2 sum = vec2(0);\n        for ( float tt = 0.; tt < 512.; tt += 1. ) { // 22050/100 = 220hz\n            float s = texelFetch( iChannel0, ivec2(U.x+tt,0), 0 ).x; //sample\n            sum += s * vec2( cos(ws*tt), sin(ws*tt) );\n        }\n        sum /= 100.;\n        O = vec4( length(sum), sum, 1 );\n    } else\n    if ( U.y == 4. ) { // reduce fft resolution\n        // 44100 sps / 60 fps = 735 samples/frame (>512)\n        float len = 32.;\n        float beg = floor( U.x / len) * len;\n        float av=0.;\n        for ( float ii = beg; ii < beg+len; ++ii ) {\n            float fft = texelFetch( iChannel0, ivec2(ii,0), 0 ).x; // fft\n            av += fft;\n         }\n         O = vec4(av/len);\n/*  \n        float siglev = 0., dsiglev = 0., cnt=200.;\n        float savg = texelFetch( iChannel0, ivec2(U.x,1), 0 ).x;\n        for ( float tt = 0.; tt < cnt; tt += 1. ) { // 22050/200 = 110hz\n            ivec2 sampn = ivec2( mod(U.x+tt,512.),1);\n            float s = texelFetch( iChannel0, sampn, 0 ).x; // sample\n            float ps = texelFetch( iChannel1, sampn, 0 ).x; // prev sample\n            savg += (s-savg)*.5;\n            siglev += abs(s-savg);\n            dsiglev += abs(s-ps);\n        }\n        siglev /= cnt;\n        dsiglev /= cnt;\n        O = vec4( siglev*20., dsiglev, float(dsiglev>siglev*40.), 0 );\n        //O = vec4( (siglev-dsiglev), siglev/100., dsiglev/100., 1 );\n*/        \n    } else\n    if ( U.y < 2. ) // duplicate Shadertoy wave & fft\n        O = texelFetch( iChannel0, ivec2(U), 0 ); // fft, waveform\n    else if ( U.y < 4. ) // compute dv/dt\n        O = texelFetch( iChannel0, ivec2(U.x,U.y-2.), 0 ) // new sample\n            - texelFetch( iChannel1, ivec2(U.x,U.y-2.), 0 ); // prev sample\n    else if ( U.y <= 7. ) { // average dv/dt\n        O += ( 18.*texelFetch( iChannel1, ivec2(U.x,U.y-4.), 0 ) - O ) * .04;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"MfKfRc","date":"1734335884","viewed":65,"name":"Whateverhedron gets down","username":"dray","description":"Just for fun. Music controlled whateverhedron.\nMouse view control.","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["music","polyhedera"],"hasliked":0,"parentid":"XcGBRy","parentname":"Whateverhedron"}}