{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// turn this on to enable psychedelic cryptography\n#define hidden 0\n#define fading 0\n\n// Rotate UV around a pivot point\nvec2 rotateUV(vec2 uv, float angle, vec2 pivot) {\n    uv -= pivot;\n    float c = cos(angle);\n    float s = sin(angle);\n    uv = mat2(c, -s, s, c) * uv;\n    uv += pivot;\n    return uv;\n}\n\n// Reflect UV across a plane defined by a normal\nvec2 reflectUV(vec2 uv, vec2 normal, vec2 pivot) {\n    uv -= pivot;\n    uv -= 2.0 * dot(uv, normal) * normal;\n    uv += pivot;\n    return uv;\n}\n\n// param basis is point around which to rotate\nvec2 mirrorUV(vec2 uv, vec2 basis, float mirrorAngle)\n{\n    // Define rotation and reflection parameters\n    float planeAngle = radians(mirrorAngle); // Mirror plane angle in degrees\n\n    vec2 planeNormal = vec2(cos(planeAngle), sin(planeAngle));\n    vec2 reflectedUV = reflectUV(uv, planeNormal, basis);\n    float side = step(0.0, dot(uv - basis, planeNormal));\n    uv = mix(uv, reflectedUV, side);\n\n    return uv;\n}\n\n// tileUV creates tiling effect\n// param mirror[XY] mirrors each odd tile\nvec2 tileUV(vec2 uv, float nTiles, bool mirrorX, bool mirrorY) {\n    vec2 tiledUV = uv*nTiles;\n    if (mirrorX && (tiledUV.x = mod(tiledUV.x, 2.)) >= 1.) tiledUV.x = 1. - fract(tiledUV.x);\n    if (mirrorY && (tiledUV.y = mod(tiledUV.y, 2.)) >= 1.) tiledUV.y = 1. - fract(tiledUV.y);\n\n    return tiledUV;\n}\n\n// basis is the center\nvec3 colorLines(vec2 uv, vec2 basis, float time, float speed, float width) {\n    vec3 col = vec3(0.);\n\n    float scroll = time * speed;\n\n    vec2 linePos = abs(uv - basis); // Adjust for the new UV space\n    float line = step(width, mod(linePos.x - scroll, width * 2.));\n\n    col = vec3(line);\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 col = vec3(0.);\n    float fadeOut = clamp(mix(0.,2.,(sin(iTime/4.)+1.)/2.), 0., 1.);\n\n    float lineSpeed = 0.3;\n    float lineWidth = 0.6;\n\n    vec2 basis = vec2(0.5,0.5); // part of screen to rotate around\n    // pivot point adjusted by resolution\n    vec2 basisAdj = vec2(iResolution.x/iResolution.y, 1.) * basis;\n\n    float timeOffset = 0.03;\n    for (int i = 0; i<3; i++) {\n        float t = iTime + timeOffset * float(i-1);\n\n        #define ROT(ang,piv) rotUV = rotateUV(rotUV, ang, piv)\n        #define MIRROR(bas,ang) rotUV = mirrorUV(rotUV, bas, ang)\n        #define TILE(n,a,b) rotUV = tileUV(rotUV, n, a, b)\n\n        // there is no rhyme or reason to these magic numbers\n        // just what looks cool\n        vec2 rotUV = uv;\n        //rotUV += vec2(sin(t/30.),cos(t/30.));\n        TILE(8.,true,true);\n        ROT(90.,basis);\n        MIRROR(basis, 45.*t);\n        TILE(2.,true,true);\n        ROT(20.,basis);\n        MIRROR(basis, sin(90.*t/10.+rotUV.x));\n        TILE(2.,true,true);\n        ROT(20.,basis);\n\n        rotUV.x *= iResolution.x/iResolution.y; // fix aspect ratio before drawing lines to avoid shearing lines\n        vec3 c = colorLines(rotUV, basisAdj, t, lineSpeed, lineWidth);\n\n        // this does rgb shift effect\n        switch (i) {\n        case 0: col.r = c.r;\n        case 1: col.g = c.g;\n        case 2: col.b = c.b;\n        }\n    }\n\n#if fading\n    col.rgb = clamp(col.rgb,0.,1.);\n    col.rgb *= fadeOut;\n#endif\n\n    bool zeroOrOne = col != vec3(0.) && col != vec3(1.);\n    // cryptography section (not sure if this works well)\n#if hidden\n    if (zeroOrOne) {\n        col.rgb *= 2./3.;\n        col.rgb += texture(iChannel0, 1.-tileUV(uv, 2.,true,true)).rbr * (1./3.);\n    }\n#else\n#endif\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfVfRG","date":"1734137556","viewed":24,"name":"another linear kaleidoscope","username":"bombblob","description":"they are watching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lines","illusion","kaleidoscope"],"hasliked":0,"parentid":"","parentname":""}}