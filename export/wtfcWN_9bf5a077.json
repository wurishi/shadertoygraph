{"ver":"0.1","info":{"id":"wtfcWN","date":"1592849061","viewed":1462,"name":"Mengersponge","username":"flo72","description":"Use the wsad keys and the arrow keys to steer through variations of the Menger Sponge","likes":13,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define MAX_ITER 5\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere(vec3 p, float r){\n    \n    return length(p)-r;\n}\n\nvec3 rotateY(vec3 p, float alpha){\n\tfloat px=p.x;\n    float c=cos(alpha);\n    float s=sin(alpha);\n    \n \tp.x=c*px-s*p.z;\n    p.z=s*px+c*p.z;\n    \n    return p;\n}\n\nvec3 rotateX(vec3 p, float alpha){\n\tfloat py=p.y;\n    float c=cos(alpha);\n    float s=sin(alpha);\n    \n \tp.y=c*py-s*p.z;\n    p.z=s*py+c*p.z;\n    \n    return p;\n}\n\n\nfloat sdMenger(vec3 p){\n    float size=2.;\n\tp.z -=3.;  \n    //p=rotateY(p,iTime*.5);\n    vec3[] s = vec3[](vec3(1,1,1),vec3(1,1,0));\n    \n    for(int iter=0;iter<MAX_ITER;++iter){\n        float alpha=(iMouse.x-.5*iResolution.x)/iResolution.x*3.14; \n        p=rotateY(p,alpha);\n        float beta=(iMouse.y-.5*iResolution.y)/iResolution.y*3.14; \n        p=rotateX(p,beta);\n       \n        p=abs(p);\n        if(p.y > p.x) p.yx = p.xy;\n        if(p.z > p.y) p.zy = p.yz;\n        \n        if(p.z > .5*size) p -= size*s[0];\n        else p -= size*s[1];\n        size /=3.;\n        \n    }\n    return sdBox(p,vec3(1.5*size));\n}\n\nfloat sdPlane(vec3 p,vec3 n){\n    n=normalize(n);\n \treturn dot(p,n);   \n}\n \n\nfloat GetDist(vec3 p){\n    float d2=sdPlane(p+vec3(0,6,0),vec3(0,1,0));  \n    float d1=sdMenger(p);\n    \n    return min(d1,d2);\n}\n\nvec3 GetColor(vec3 p){\n float d1=sdMenger(p);\n float d2=sdPlane(p+vec3(0,6,0),vec3(0,1,0));  \n \n    if (d1 < d2) return vec3(1,1,1);;\n\t\n    vec3 col=vec3(.7,.7,.9);\n    if((mod(p.x,10.) > 5. && mod(p.z,10.) > 5.)||(mod(p.x,10.) < 5. && mod(p.z,10.) < 5.)) \n        col=vec3(.5);\n    \n    return col;\n    \n}\n\nfloat RayMarch(vec3 ro,vec3 rd){\n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++){\n     vec3 p=ro+rd*dO;\n        float dS=GetDist(p);\n        dO +=dS;\n        if(dO > MAX_DIST || dS< SURF_DIST) break;        \n    \n    }\n    return dO;\n}\n    \nvec3 GetNormal(vec3 p){\n\tfloat d=GetDist(p);\n    vec2 e=vec2(.01,0);\n    \n    vec3 n= d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n        \n\treturn normalize(n);\n}\n\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = GetDist(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // vec3 ro = vec3(0,5,-12);\n   // vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = textureLod(iChannel0, vec2(0.,0.),0.0).xyz;\n   \n    vec3 ax=textureLod(iChannel0,  vec2(3.5,.5)/iResolution.xy,0.0).xyz;\n    vec3 ay=textureLod(iChannel0,  vec2(4.5,.5)/iResolution.xy,0.0).xyz;\n    vec3 az=textureLod(iChannel0,  vec2(5.5,.5)/iResolution.xy,0.0).xyz;\n    vec2 uv=fragCoord.xy/iResolution.x-.5;\n    vec3 rd= normalize( uv.x*ax+uv.y*ay+az);\n    \n    vec3 cubecol = vec3(1.,.0,.0);  \n   // vec3 rd = normalize(vec3(uv.x, uv.y,1)); \n    \n    \n\tfloat d=RayMarch(ro,rd);   \n    vec3 p= ro+rd*d;   \n   \n    //Get Light\n    vec3 lightPos =vec3(10,20,-20);\n    vec3 l=normalize(lightPos-p);\n    vec3 n=GetNormal(p);\n    float cosphi=dot(n,l);\n    vec3 v=normalize(-l+2.*cosphi*n);\n    vec3 col=GetColor(p);\n    float po=15.;\n    float amb=0.1;\n    float t=pow(clamp(dot(v,-rd),0.,1.),po);\n    col = (1.-t)*(amb+(1.-amb)*cosphi)*col+t*vec3(1.);\n         \n    //shadow\n    t=shadow(p,l,SURF_DIST*2.,MAX_DIST,4.);\n    col *=t;   \n    \n    //fog\n    t=pow(min(d/MAX_DIST,1.),2.);\n    col=(1.-t)*col+t*vec3(.9);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 rotate(vec3 p, vec3 n, float alpha){\nfloat c=cos(alpha);\nfloat s=sin(alpha);\n\nvec3 r;\n    r= p.x*vec3(n.x*n.x*(1.-c)+c,n.x*n.y*(1.-c)+n.z*s,n.x*n.z*(1.-c)-n.y*s)\n      +p.y*vec3(n.x*n.y*(1.-c)-n.z*s,n.y*n.y*(1.-c)+c,n.z*n.y*(1.-c)+n.x*s)\n      +p.z*vec3(n.x*n.z*(1.-c)+n.y*s,n.y*n.z*(1.-c)-n.x*s,n.z*n.z*(1.-c)+c);\n    \n    return r;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// keys are javascript keycode\nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\nconst int Key_Space = 32;\nconst int Key_up=38; const int Key_down=40; const int Key_left=37; const int Key_right=39;\n\nfloat ReadKeyInternal( int key, bool toggle )\n{\n\treturn textureLod( iChannel3, vec2( (float(key)+.5)/256.0, toggle?.75:.25 ), 0.0 ).x;\n}\n\nfloat ReadKey( int key )\n{\n\treturn ReadKeyInternal(key,false);\n}\n\nfloat ReadKeyToggle( int key )\n{\n\treturn ReadKeyInternal(key,true);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   fragColor = vec4(0.0,0.0,0.0,1.0);\n   \n   if(int(fragCoord.y) == 0 && int(fragCoord.x)<= 5){\n         vec3 camPos = textureLod(iChannel0, vec2(0.5,0.5)/iResolution.xy,0.0).xyz;\n       \n         \n         vec3 ax=textureLod(iChannel0,  vec2(3.5,.5)/iResolution.xy,0.0).xyz;\n         vec3 ay=textureLod(iChannel0,  vec2(4.5,.5)/iResolution.xy,0.0).xyz;\n         vec3 az=textureLod(iChannel0,  vec2(5.5,.5)/iResolution.xy,0.0).xyz;\n         \n         if(az == vec3(0.,0.,0.)){\n             ax=vec3(1.,0.,0.);\n             ay=vec3(0.,1.,0.);\n             az=vec3(0.,0.,1.);\n             camPos=vec3(0,2,-8);  \n         }\n\n         float alpha=-0.02*(ReadKey(Key_up)-ReadKey(Key_down));\n         \n         float beta=-0.02*(ReadKey(Key_left)-ReadKey(Key_right));\n         \n         float gamma=-0.02*(ReadKey(Key_A)-ReadKey(Key_D));\n         \n         az=rotate(az,ay,beta);\n         ax=rotate(ax,ay,beta);\n         \n         az=rotate(az,ax,alpha);\n         ay=rotate(ay,ax,alpha);\n         \n         ax=rotate(ax,az,gamma);\n         ay=rotate(ay,az,gamma);\n         \n         camPos+=0.1*(ReadKey(Key_W)-ReadKey(Key_S))*az; \n         \n         // store\n         if ( int(fragCoord.x) == 0 ) fragColor = vec4(camPos,1.);\n         else if ( int(fragCoord.x) == 3 ) fragColor = vec4(ax,1.);\n         else if ( int(fragCoord.x) == 4 ) fragColor = vec4(ay,1.);\n         else if ( int(fragCoord.x) == 5 ) fragColor = vec4(az,1.);\n    } \n   \n}","name":"Buffer A","description":"","type":"buffer"}]}