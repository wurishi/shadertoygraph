{"ver":"0.1","info":{"id":"XdVXzw","date":"1463515023","viewed":227,"name":"Tuubit","username":"luutifa","description":"I've been holding on to this one to possibly release it in a proper demo one day but I decided that it's not that special anyway and nobody likes to see ray marching on big screen these days (at least not me). Monte Carlo -ish DOF as an afterthought.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","dof","spheretracing","depthoffield","focalpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright 2016 Lauri Gustafsson\n/*\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software\n    and associated documentation files (the \"Software\"), to deal in the Software without restriction,\n    including without limitation the rights to use, copy, modify, merge, publish, distribute,\n    sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial\n    portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE\n    AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n    DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n#ifdef GL_ES\n    precision highp float;\n#endif\n\nfloat t = iTime*0.6;\n\n#define PI 3.14159265\n#define E 0.001\n//maximum traced distance\n#define MD 60.0\n//sphere trace maximum steps\n#define I 80\n//ray initial depth\n#define MS 10.0\n//slows the sphere tracing for less artifacts\n#define B .8\n\n#define DOF_FOCAL_POINT_DEPTH 12.0\n#define DOF_SAMPLES 32\n#define DOF_SCATTER 1.0\n\n//http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nmat3 getXRotMat(float a) {\n    return mat3(\n         1.0,  0.0,     0.0,\n         0.0,  cos(a), -sin(a),\n         0.0,  sin(a),  cos(a)\n    );\n}\n\nmat3 getYRotMat(float a) {\n    return mat3(\n         cos(a),  0.0,  sin(a),\n         0.0,     1.0,  0.0,\n        -sin(a),  0.0,  cos(a)\n    );\n}\n\nmat3 getZRotMat(float a) {\n    return mat3(\n         cos(a), -sin(a),  0.0,\n         sin(a),  cos(a),  0.0,\n         0.0,     0.0,     1.0\n    );\n}\n\nvoid repX(inout vec3 p, float s) {\n    vec3 r = p;\n    r.x = mod(p.x, s)-(s*0.5);\n    p=r;\n}\n\nvoid repXY(inout vec3 p, float s) {\n    vec3 r = p;\n    r.x = mod(p.x, s)-(s*0.5);\n    r.y = mod(p.y, s)-(s*0.5);\n    p=r;\n}\n\nvoid repXYZ(inout vec3 p, float s) {\n    vec3 r = p;\n    r.x = mod(p.x, s)-(s*0.5);\n    r.y = mod(p.y, s)-(s*0.5);\n    r.z = mod(p.z, s)-(s*0.5);\n    p=r;\n}\n\n//SDF for an infinite square tubelike object\nfloat tube(vec3 p) {\n    vec2 d = abs(p.yz) - vec2(1.0);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n//Signed Distance Field function for the whole scene\nfloat f(vec3 p) {\n    vec3 tp = p;\n    tp.z=max(tp.z, 10.0);\n    tp.y*=sin(tp.x*0.1+t*0.8)*0.4+1.0;\n    repXY(tp.yzx, 8.0);\n    tp.y+=sin(tp.x*.4+t*2.0+tp.z*0.3)*.7;\n    tp=getXRotMat(tp.x*.1+t*0.8+tp.y*0.07)*tp;\n    return tube(tp);\n}\n\nvec3 grad(vec3 p) {\n    vec2 e = vec2(E, 0.0);\n    return (vec3(f(p+e.xyy), f(p+e.yxy), f(p+e.yyx)) - f(p)) / e.x;\n}\n\n//sphere trace to scene, should return the point where our ray hits a surface defined by an SDF function (f)\n//http://computergraphics.stackexchange.com/questions/161/what-is-ray-marching-is-sphere-tracing-the-same-thing\nvec3 m(vec3 o, vec3 v) {\n    float d;\n    float t=MS;\n    for (int i=0;i<I;i++) {\n        d=f(o+v*t);\n        t+=d*B;\n        if (d<E||t>MD)\n            break;\n    }\n    return o+v*t;\n}\n\nvec3 applyFog(float z, float i, vec3 ci, vec3 fc) {\n    return mix(ci, fc, clamp(i*z, 0.0, 1.0));\n}\n\nvec3 c(vec3 cam, vec3 dir) {\n    //point in the scene\n    vec3 p=m(cam, dir);\n    \n    //normal for that point\n\tvec3 nm = normalize(grad(p));\n    //basic shading\n    float diff = max(dot(normalize(p-cam), -nm), 0.0);\n    vec3 c = vec3(1.0, 0.2, 0.1)*(1./length(p-cam))*diff*max(pow(diff, 2.0)*8.0, 1.0)*max(pow(diff, 20.0)*2.0, 1.0)*12.0;\n    //fog/BG colors, alternating\n    vec3 fc1=vec3(1.0, 0.0, 0.1);\n    vec3 fc2=vec3(0.1, 0.0, 1.0);\n    float fp = sin(t*0.4)*0.5+0.5;\n\tvec3 fc = fc1*fp+(fc2*(1.0-fp));\n    c=applyFog(p.z, 0.03, c, fc);\n    return c;\n}\n\nvoid mainImage(out vec4 fcolor, in vec2 fcoord) {\n    //transform gl_FragCoord to a more usable screen space coordinate\n    vec2 sp = (2.*fcoord.xy-iResolution.xy)/iResolution.y;\n    \n    //camera position, rotation, direction for current pixel ray\n    vec3 cam = vec3(sin(t*0.3)*0.2, cos(t)*6.0, sin(t*0.6)*0.4);\n    mat3 camRotMat = getXRotMat(sin(t*0.3)*0.3)*getYRotMat(sin(t*0.7)*0.2)*getZRotMat(sin(t*0.1)*0.4);\n    vec3 dir;\n\n    vec3 color = vec3(0.0);\n    for (int i=0; i<DOF_SAMPLES; i++) { //take multiple samples of the render\n        //noise, needed to simulate rays hitting wrong parts of the image plane (which causes defocus)\n        vec3 noise = vec3(rand(sp+float(i)+t), rand(sp+float(i)*1.1+t), rand(sp+float(i)*1.2+t))*DOF_SCATTER;\n        //compute the actual direction that the ray needs to take towards the scene\n        //so that no matter how displaced is the starting point, it will intersect the \"correct\"\n\t\t//ray at DOF_FOCAL_POINT_DEPTH\n        dir = camRotMat * normalize((vec3(sp, 1.0)*DOF_FOCAL_POINT_DEPTH)-noise);\n        //render, displacing the ray origin a little\n        color += c(cam+noise, dir);\n    }\n    fcolor = vec4(color/float(DOF_SAMPLES), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}