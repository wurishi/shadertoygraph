{"ver":"0.1","info":{"id":"4dByWc","date":"1494005469","viewed":138,"name":"mand 0.2 timeSamp","username":"NNenov","description":"learning glsl, test AA and MotionBlur, wip\nall thanks to https://www.shadertoy.com/user/lycium","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale = 1.25;\nconst float mscale = 3.0;\nconst float escape= 2.0;\nconst float bAmt = 0.1; // moblur amount\n\nint fSamples = 6;\n\nint fib(int f)\n{\n  int n0 = 1;\n  int n1 = 1;\n  int fi = 0;\n    \n  for (int i = 0; i < f - 2; i++) \n  {\n    fi = n0 + n1;\n    n0 = n1;\n    n1 = fi;\n  }\n    \n  return fi;\n}\n\nfloat rand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 rotate(vec2 v, float t)\n{\n    float tx = cos(t)*v.x-sin(t)*v.y;\n    float ty = sin(t)*v.x+cos(t)*v.y;\n    return vec2(tx,ty);\n}\n\nvec2 squared(vec2 a)\n{\n  \n    float sqrz_x = a.x * a.x - a.y * a.y;\n    float sqrz_y = 2.0 * a.x * a.y;\n    \n    return vec2(sqrz_x,sqrz_y);\n}\n\nvec2 mandel(vec2 Z, vec2 c)\n{\n    \n \tvec2 md = squared(Z);\n    \n    return (md+c);\n    \n}\n\n\nfloat pxFunc(vec2 px, float t)\n{\n    \n    vec2 st = -scale / 2.0 + ( px / iResolution.xy ) * scale;\n    \n    //vec4 m = mscale/2.0 -(iMouse / iResolution.xxxx)*mscale;\n\n    st += vec2(-0.8, 0.);\n\tst = rotate(st, t);\n    vec2 z = vec2(sin(t * 0.35)*sin(t * 0.85)*0.8, cos(t * 0.35)*cos(t * 0.75)*0.8);\n\t\n    z = rotate(z, t*0.1);\n    \n    int iters = 32;\n\tint k = 32;\n\n  \tfor(int j = 0; j < iters; j++)\n    {\n\n        z = mandel(z,st);\n        \n        if(z.x * z.x + z.y * z.y > escape) \n        {\n           k = j;\n           break;\n        }\n     }\n  \t\n    return 1.0-(float(k)/float(iters)); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    \n    int fN = fib(fSamples);\n\n    int fk = fib(fSamples-1);\n\t\n    \n    float sum = 0.0;\n    float colMap;\n    float timeMap;\n    \n    float r = rand(gl_FragCoord.xy / iResolution.xy); // not sure how to best generate a random number\n    \n    for (int i = 0; i < fN; i++) \n    {   \t\n        float fx = ( float(i) / float(fN) );\n \n        float fyf = float(fk) * ( float(i) / float(fN) );\n        \n        float fy = fyf-float(int(fyf)); //modulo\n        \n        \n        vec2 samp = vec2(fx, fy);\n        \n        timeMap = (float(i) + r) / float( fN );\n        \n        colMap = pxFunc( gl_FragCoord.xy + samp , iTime + timeMap*bAmt);\n    \n        sum += colMap;\t\n    }\n\n    float colNorm = sum / float(fN);\n    \n    vec3 color = vec3( colNorm-timeMap*0.01 , colNorm-timeMap*0.05 , colNorm-timeMap*0.08 );\n    \n\n    fragColor = vec4(color,1.0);\n\n}\n\n\n","name":"Image","description":"","type":"image"}]}