{"ver":"0.1","info":{"id":"lscXWn","date":"1458648765","viewed":1974,"name":"Fluid Dynamics Test","username":"pixartist","description":"Trying to get fluid dynamics to work","likes":24,"published":1,"flags":32,"usePreview":0,"tags":["fluid","dynamics","fluiddynamics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    //pressure display\n\tfragColor = vec4(col.b*.6, length(col.rg) * 0.03, -col.b*.9, 1.0);\n    //velocity display\n   // fragColor = vec4(col.rg, col.w, 1.0) * 0.1;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define velDisp 0.001;\n#define pressureDisp 0.05;\n#define heatDisp 0.01;\n#define ambientTemp 1.0\n#define F(a,b) texture(iChannel0, (fragCoord + vec2(a,b)) / iResolution.xy)\n#define O(a,b) (texture(iChannel1, (fragCoord + vec2(a,b)) / iResolution.xy).w <= 0.0)\n#define S(a,b, s) O(a,b) ? s : F(a,b)\n    bool wl;\n    bool wr;\n    bool wt;\n    bool wb;\nvoid getGradients(vec2 fragCoord, out vec2 velocity, out float pressure)\n{\n    vec4 self = F(0,0);\n    vec4 left = self;\n    vec4 right = self;\n    vec4 bottom = self;\n    vec4 top = self;\n\n    if(!wl)\n    \tleft = F(-1, 0);\n    if(!wr)\n    \tright = F(1, 0);\n    if(!wb)\n    \tbottom = F(0, -1);\n    if(!wt)\n    \ttop = F(0, 1);\n    velocity = vec2(left.z - right.z, bottom.z - top.z);\n    pressure = (left.x - right.x) + (bottom.y - top.y);\n\n}\n//xy > velocity\n//z > pressure\n//w > heat\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    wl = O(-1, 0);\n    wr = O(1, 0);\n    wt = O(0,1);\n    wb = O(0, -1);\n\t\n    vec4 self = texture(iChannel0, uv);\n    //add heat to velocity\n    if(self.w > ambientTemp)\n    {\n    \tself.g += (self.w - ambientTemp) * 1.0 - (self.z * 0.08);\n    }\n    //mouse -> heat\n    if(iMouse.z > 0.0 && distance(fragCoord, iMouse.xy) < 50.0)\n        self.w = 2.0 * ambientTemp;\n    \n    vec2 addVel;\n    float addP;\n    getGradients(fragCoord, addVel, addP);\n    \n    self.x += addVel.x;\n    self.y += addVel.y;\n    self.z += addP;\n    \n    self.x *= 1.0 - velDisp;\n    self.y *= 1.0 - velDisp;\n    self.z *= 1.0 - pressureDisp;\n    self.w *= 1.0 - heatDisp;\n    if(wl)\n        self.x = max(0.0, self.x);\n    if(wr)\n        self.x = min(0.0, self.x);\n    if(wt)\n        self.y = min(0.0, self.y);\n    if(wb)\n        self.y = max(0.0, self.y);\n    if((uv.x > 0.0 && uv.x < 0.2) && (uv.y > 0.2 && uv.y < 0.8))\n    {\n        self.x += 2.00+4.0 * (iMouse.x / iResolution.x - 0.5);\n    }\n    if(iFrame < 1)\n    {\n        self.x += 10.0;\n    }\n    if(texture(iChannel1, uv).a <= 0.0 || fragCoord.x < 1.0 || fragCoord.x >= iResolution.x - 1.0 || fragCoord.y < 1.0 || fragCoord.y >= iResolution.y -1.0)\n    {\n        self = vec4(0.0);\n    }\n\tfragColor = self;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//advect & diffusion\n#define velFac 0.2\n#define F(a,b) texture(iChannel0, (fragCoord + vec2(a,b)) / iResolution.xy);\n#define O(a,b) (texture(iChannel1, (fragCoord + vec2(a,b)) / iResolution.xy).w <= 0.0)\nconst int r = 1;\nvec4 advect(vec2 fragCoord)\n{\n    int r2 = r*r;\n    float k = 0.0;\n    vec4 res = vec4(0.0);\n    for(int x = -r; x <= r; x++)\n    {\n        for(int y = -r; y <= r; y++)\n        {\n            if(x*y <= r2)\n            {\n                if(!O(x,y))\n                {\n                    res += F(x,y);\n                    k++;\n                }\n            }\n        }\n    }\n    if(k > 0.0)\n    \treturn res / k;\n    else return res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 self = texture(iChannel0, uv);\n    if(texture(iChannel1, uv).a <= 0.0)\n    {\n        fragColor = vec4(0.0);\n    }\n    else\n    {\n    \tfragColor = advect(fragCoord - self.rg * velFac);\n    }\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//advect & diffusion\n#define velFac 0.2\n#define F(a,b) texture(iChannel0, (fragCoord + vec2(a,b)) / iResolution.xy);\n#define O(a,b) (texture(iChannel1, (fragCoord + vec2(a,b)) / iResolution.xy).w <= 0.0)\nconst int r = 1;\nvec4 advect(vec2 fragCoord)\n{\n    int r2 = r*r;\n    float k = 0.0;\n    vec4 res = vec4(0.0);\n    for(int x = -r; x <= r; x++)\n    {\n        for(int y = -r; y <= r; y++)\n        {\n            if(x*y <= r2)\n            {\n                if(!O(x,y))\n                {\n                    res += F(x,y);\n                    k++;\n                }\n            }\n        }\n    }\n    if(k > 0.0)\n    \treturn res / k;\n    else return res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 self = texture(iChannel0, uv);\n    \n    if(distance(uv, vec2(0.4, 0.5 + 0.12*sin(iTime*3.0)))< 0.1)\n    {\n        fragColor = vec4(0.0);\n    }\n    else\n    {\n    \tfragColor = advect(fragCoord - self.rg * velFac);\n    }\n    fragColor.a = 1.0;\n}","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//advect & diffusion\n#define velFac 0.2\n#define F(a,b) texture(iChannel0, (fragCoord + vec2(a,b)) / iResolution.xy);\n#define O(a,b) (texture(iChannel1, (fragCoord + vec2(a,b)) / iResolution.xy).w <= 0.0)\nconst int r = 2;\nvec4 advect(vec2 fragCoord)\n{\n    int r2 = r*r;\n    float k = 0.0;\n    vec4 res = vec4(0.0);\n    for(int x = -r; x <= r; x++)\n    {\n        for(int y = -r; y <= r; y++)\n        {\n            if(x*y <= r2)\n            {\n                if(!O(x,y))\n                {\n                    res += F(x,y);\n                    k++;\n                }\n            }\n        }\n    }\n    if(k > 0.0)\n    \treturn res / k;\n    else return res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 self = texture(iChannel0, uv);\n    if(texture(iChannel1, uv).a <= 0.0)\n    {\n        fragColor = vec4(0.0);\n    }\n    else\n    {\n    \tfragColor = advect(fragCoord - self.rg * velFac);\n    }\n}","name":"Buf D","description":"","type":"buffer"}]}