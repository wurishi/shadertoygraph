{"ver":"0.1","info":{"id":"csKBDy","date":"1698614419","viewed":38,"name":"Mandelbrot-01","username":"dustpicker","description":"mandelbrot","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_ITERATIONS 15\n#define DIVERGENCE_THRESHOLD 6.\n\nfloat map(float value, float max_value){\n return value * max_value / DIVERGENCE_THRESHOLD;\n}\n\nfloat mandelbrot(vec2 coord)\n{\n  float a = 0.;\n  float b = 0.;\n  float A = 0.;\n  float B = 0.;\n  for(int i = 0; i < MAX_ITERATIONS; i++){\n    A =  a*a - b*b + coord.x;\n    B =  2.*a*b + coord.y;\n    a = A;b = B;\n    if ( A*A+B*B >  DIVERGENCE_THRESHOLD) return  DIVERGENCE_THRESHOLD;\n  }\n  return A*A+B*B;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    float color_value = smoothstep\n                        (\n                        0.,\n                         DIVERGENCE_THRESHOLD,\n                         mandelbrot(uv*vec2(2., 1.)-vec2((iMouse.xy/iResolution.xy)*iTime*0.1))\n                        );\n    vec3 col = vec3(color_value, 0, 0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}