{"ver":"0.1","info":{"id":"4ffyzr","date":"1720687038","viewed":50,"name":"Ink Mountain","username":"Hzzzch","description":"edited from: https://www.shadertoy.com/view/MsBXWy, with some modifications. Camera movinig caused the altitude variation. ","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//The number of times the layer is overlaid \n#define OCTAVES  8.0  \n\n#define MAX_STEPS  32\n#define THRESHOLD .0001\n\nconst float fogDensity = 0.2;\n\nfloat rand2(vec2 co){\n   return fract(cos(dot(co.xy ,vec2(16.144,73.174))) * 17321.4546);\n}\n\nfloat valueNoiseSimple(vec2 vl) {\n   float minStep = 1.0 ;\n\n   vec2 grid = floor(vl); \n   vec2 gridPnt1 = grid;\n   vec2 gridPnt2 = vec2(grid.x, grid.y + minStep);\n   vec2 gridPnt3 = vec2(grid.x + minStep, grid.y);\n   vec2 gridPnt4 = vec2(gridPnt3.x, gridPnt2.y); //four corners\n\n    float s = rand2(gridPnt1); \n    float t = rand2(gridPnt3); \n    float u = rand2(gridPnt2);\n    float v = rand2(gridPnt4); \n\n    float interpX1 = mix(s, t, fract(vl.x));\n    float interpX2 = mix(u, v, fract(vl.x));\n    \n    float interpY = mix(interpX1, interpX2,fract(vl.y));\n    \n    return interpY;\n}\n\nfloat fractalNoise(vec2 vl) {\n    float persistance = 2.;\n    float amplitude = 1.2;\n    float rez = 0.0;\n    vec2 p = vl;\n    mat2 Rot = mat2(0.8, -0.6 , 0.6 ,0.8);\n    \n    for (float i = 0.0; i < OCTAVES; i++) {\n        rez += amplitude * valueNoiseSimple(p);\n        amplitude /= persistance;\n        p *= persistance; \n        p *= Rot; //add rotation to the layer \n    }\n    return rez;\n}\n\nfloat scene(vec3 a) {\n   \n   float zVal = fractalNoise(vec2(a.x- 2., a.z ));\n   return a.y+2.*sin(zVal/2.);\n}\n\nfloat trace(vec3 O, vec3 D, out float hill) {\n    float L = 0.;\n    int steps = 0;\n    float d = 0.;\n    for (int i = 0; i < MAX_STEPS; ++i) {\n        d = scene(O + D*L);\n        L += d;\n        \n        if (d < THRESHOLD*L) \n            break;\n    }\n    \n    hill = d;\n    return L;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 centered_uv = uv * 2. - 1.;\n    centered_uv.x *= iResolution.x / iResolution.y; //normalize the coordinates\n    \n    float timeOffset = iTime / 2.; //moving speed\n    \n    vec3 O = vec3(0. - timeOffset,0.2*sin(iTime), 1. - timeOffset); // camera position\n    \n    vec3 D = normalize(vec3(centered_uv, -1.)); \n\n    float hill;\n    float path = trace(O, D, hill);\n    vec3 coord = O + path * D;\n\n    vec3 resColor;\n    vec3 skyBlueColor = vec3(0.529411765, 0.807843137, 0.980392157); \n\n    // Background color\n    vec3 bgColor = mix(vec3(1.), skyBlueColor, clamp(centered_uv.y, 0., 1.));\n  \n    \n    if (hill >= 0.2) { //sky layers\n        float cloudCeil = centered_uv.y * .5 - .085;\n        vec2 cloudCoord = centered_uv / cloudCeil;\n        cloudCoord.y += timeOffset / 4.;\n        cloudCoord.x /= pow(iResolution.x / iResolution.y, 4.);\n        float cloudNoise = -2. + 2. * fractalNoise(cloudCoord + 3.5);\n        resColor = (bgColor + clamp(cloudNoise, 0., 1.) );\n        resColor = mix(bgColor, resColor, clamp(cloudCeil, 0., 1.));\n        resColor.r*=smoothstep(0.1,1.,resColor.r);\n        resColor.g*=smoothstep(0.4,1.,resColor.g);\n        resColor.b*=smoothstep(0.1,1.,resColor.b); //adjust the contrast ratio\n    } else {\n        \n        resColor = texture(iChannel0, coord.xz *.5 + .5).rgb;\n        \n    \tfloat fogFactor = exp(-pow(abs(fogDensity * (coord.z - 1.5 + timeOffset)), 2.0)); //add fogs\n    \tresColor = mix(bgColor, resColor, fogFactor);\n    }\n\n    fragColor = vec4(resColor, 1.);\n}","name":"Image","description":"","type":"image"}]}