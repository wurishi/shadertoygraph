{"ver":"0.1","info":{"id":"ds2SWV","date":"1670945904","viewed":142,"name":"fake reflections with noise","username":"ianertson","description":"fake reflections by sampling coordinates based on luma","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["reflections"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PLANE vec3(0.0, 0.0, -1.0)\n#define ITERATIONS 3\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 project(vec3 a, vec3 b) {\n  float deno = length(a);\n\n  if (abs(deno) < 0.000001)\n    return vec3(0.0);\n\n  float scalar = dot(b, a) / deno;\n\n  return a * scalar;\n}\n\nvec3 projectOnPlane(vec3 a, vec3 normal) {\n  return a - project(a, normal);\n}\n\nvec3 muck(sampler2D tex, vec2 uv) {\n    vec2 coords = uv;\n    \n    vec3 col = texture(tex, uv).rgb;\n    \n    int L = ITERATIONS;\n    \n    float lu = luma(col);\n    \n    vec3 p = PLANE;\n    \n    vec3 pl = p;\n    \n    for (int i = 0; i < L; i++) {\n       float f = float(i) / float(L);\n       f = cos(f * iTime * 1.6) * lu * 1.6;\n       vec3 next_col = texture(tex, coords).rgb;\n       \n       \n       vec2 cc = projectOnPlane(next_col*f, normalize(p)).xy;\n       coords += cc.xy;\n       \n       p += next_col;\n       \n       lu = mix(lu, luma(next_col), 0.5);\n    }\n    \n    \n    \n    \n    p /= float(L);\n    coords /= float(L);\n\n    float pp = distance(pl, p);\n    vec3 distorted = texture(tex, coords).rgb;\n\n    float m =  (luma(col) + length(col)) / 2.0;\n    \n    m *= 1.0 / max(0.001, pp);\n    \n    return mix(col, distorted, clamp(m, 0.0, 1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = muck(iChannel0, uv);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}