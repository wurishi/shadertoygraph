{"ver":"0.1","info":{"id":"WsfGDM","date":"1546439375","viewed":744,"name":"Parallax starfield","username":"dax105","description":"Starfield 2D game background","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["stars","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original by Alexander Lemke, 2015\n// Voronoi function based on function from iq\n// Simplified as a space background for games by dax105, 2018\n\n//#define SHOW_CELLS\n//#define USE_VORONOI\n#define STAR_LAYER_COUNT 10\n\nvec2 hash(in vec2 p) {\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat noise(in vec2 p) {\n    #ifdef USE_VORONOI\n    \n    vec2 n = floor(p);\n    vec2 f = fract(p);\n\n    vec2 mg, mr;\n\n    float md = 8.0;\n    for(int j = -1; j <= 1; ++j) {\n        for(int i = -1; i <= 1; ++i) {\n            vec2 g = vec2(float(i), float(j));\n            vec2 o = hash22(n + g);\n\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n\n            if(d < md) {\n                md = d;\n                mr = r;\n                mg = g;\n            }\n        }\n    }\n    return md;\n    \n    #else\n    \n    vec2 n = floor(p);\n    vec2 f = fract(p);\n\n    float md = 1.0;\n\n    // Scale a bit to move from cell edges\n    vec2 o = hash22(n)*0.96 + 0.02;\n\n    vec2 r = o - f;\n    float d = dot(r, r);\n\n    md = min(d, md);\n\n    return md;\n    \n    #endif\n}\n\nvec3 starfield(vec2 samplePosition, float threshold) {\n    float starValue = noise(samplePosition);\n    \n    float power = max(1.0 - (starValue / threshold), 0.0);\n    power = power * power * power;\n    \n    #ifdef SHOW_CELLS\n    power += starValue;\n    #endif\n    \n    return vec3(power);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float maxResolution = max(iResolution.x, iResolution.y);\n    \n\tvec3 finalColor;\n    vec2 sCoord = (fragCoord.xy / maxResolution)*5.0;\n    vec2 pos = vec2(iTime*5.0, sin(iTime)*5.0);\n    \n    // Add starfields\n    for (int i = 1; i <= STAR_LAYER_COUNT; i++) {\n        float fi = float(i);\n        float inv = sqrt(1.0/fi);\n    \tfinalColor += starfield((sCoord + vec2(fi*100.0, -fi*50.0)) * (1.0 + fi * 0.2) + pos, 0.0005)*inv;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}