{"ver":"0.1","info":{"id":"wsG3Dt","date":"1571181480","viewed":693,"name":"fractal ying yang controllable","username":"Jarazz","description":"clicking on top of the image gives you more layers of yingyang and the bottom is less (more than what you get at the top is unnecessary as the next ying yangs would be less than a pixel big.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["yingyangfractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define t iTime *PI/7.\n\nfloat flip(float a ){\nreturn -a +1.; \n}\n\nvec2 cartesian2polar(vec2 cartesian){\n\treturn vec2(atan(cartesian.x,cartesian.y),length(cartesian.xy));\n}\n\nvec2 polar2cartesian(vec2 polar){\n\treturn polar.y*vec2(cos(polar.x),sin(polar.x));\n}\n\nvec2 rotate2D(vec2 coords, float amount){\n\treturn polar2cartesian(cartesian2polar(coords)+vec2(amount,0.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 inputs = iMouse.xy/iResolution.y;\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv = rotate2D(uv, t);\n \n    vec3 col = vec3(.3);\n    \n    int iterationID = 0; \n    float iterations = max(0.,inputs.y*15.-2.);\n   \tfloat circleRadius = .25;\n    \n    for(int i = 0; i< int(iterations); i++){\n \tfloat distToInner = length(abs(uv)-vec2(0,circleRadius));\n    \tif(distToInner<circleRadius){\t\t\t//inner circle\n       \tuv.y = (uv.y>=0.)?(uv.y-circleRadius):(uv.y+circleRadius);\n        uv*=2.;\n        iterationID++;\n    \tuv = rotate2D(uv, -PI/2. + t * float(iterationID)   );\n       \t}\n   \t\n    }\n     \n \tfloat distToInner = length(abs(uv)-vec2(0,circleRadius));\n    \tif(distToInner<circleRadius*fract(iterations) ){\t\t\t//inner circle\n       \tuv.y = (uv.y>=0.)?(uv.y-circleRadius):(uv.y+circleRadius);\n        uv*=2.;\n        iterationID++;\n    \tuv = rotate2D(uv, t * float(iterationID)  );\n       \t}\n    \n    \n     \n    if(length(uv)<.5){\n    col = vec3(step(0.,uv.x));\n        \n        float distToInner = length(abs(uv)-vec2(0,.25));\n    \tif(distToInner<circleRadius){\t\t\t//inner circle\n        \tcol = vec3(step(0.,uv.y) ); \n           \n            if(distToInner>circleRadius/2.){ \t//final most inner circle/iris\n        \t\t col = vec3(flip(col.x)); \n            }\n    \t} \n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}