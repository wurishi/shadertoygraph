{"ver":"0.1","info":{"id":"dlcXzf","date":"1685650546","viewed":32,"name":"Circle + Rect","username":"Crofts","description":"Circle + Rect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circlerect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Define los colores de las formas\n    vec3 circleColor = vec3(0.2, 0.8, 0.4);\n    vec3 rectColor = vec3(0.8, 0.4, 0.2);\n    \n    // Define los parámetros de las formas\n    float circleRadius = 0.9;\n    vec2 rectSize = vec2(0.5, 1.5);\n    vec2 rectPosition = vec2(0.0, 0.0);\n    \n    // Calcula la posición normalizada del píxel\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Genera un círculo\n    float circleDistance = length(uv - vec2(0.0, 0.0));\n    float circle = smoothstep(circleRadius, circleRadius + 0.01, circleDistance);\n    \n    // Genera un rectángulo\n    vec2 rectMin = rectPosition - rectSize * 0.5;\n    vec2 rectMax = rectPosition + rectSize * 0.5;\n    float rectangle = step(rectMin.x, uv.x) *\n                      step(rectMin.y, uv.y) *\n                      (1.0 - step(rectMax.x, uv.x)) *\n                      (1.0 - step(rectMax.y, uv.y));\n    \n    // Combina las formas utilizando operaciones lógicas\n    float shape = circle + rectangle;\n    \n    // Interpola los colores según la forma generada\n    vec3 finalColor = mix(rectColor, circleColor, shape);\n    \n    // Asigna el color al fragmento\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}