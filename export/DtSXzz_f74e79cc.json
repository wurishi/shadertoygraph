{"ver":"0.1","info":{"id":"DtSXzz","date":"1675543237","viewed":318,"name":"Glass Rod Refraction","username":"westgarthb","description":"Basic emulation of optics through glass rods. Not intended to be an accurate simulation of real world optics","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["refraction","glass","optics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat map(vec2 p)\n{\n    float m = length(p- vec2(cos(iTime*0.8), -0.5) ) - 0.3;\n    m = min(m, length(p- vec2(-cos(iTime*0.8), 0.5)) - 0.3);\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    vec3 rd = vec3(0.0, 0.0, -1.0);\n\n    // define  \"glass rods\" and normals\n    float rod_x = fract(p.x * 8.0) * 2.0 - 1.0;\n    float rod_z = sqrt(1.0 - rod_x*rod_x);\n    vec3 n = vec3(rod_x, 0.0, -rod_z);\n    \n    // refracted position extrapolation\n    float refractive_index = 0.4;\n    vec3 refracted_ray = mix(n, rd, refractive_index);\n    float z_dist = 0.4 / (refracted_ray.z + 0.00001);\n    vec3 pos = vec3(p, 0.0) + z_dist*refracted_ray;\n\n    // color lookup\n    vec3 refract_col = 1.0 - mix(vec3(0.0), vec3(1.0), smoothstep(-0.05, 0.0, map(pos.xy)));\n    \n    // glass shading\n    float g = 1.0 - abs(n.z);\n    g = g * 0.4 / (g * 0.4 - g + 1.0);\n    float glass = (1.0-0.3*g);\n    \n    // composite image\n    vec3 col = vec3(glass) - refract_col;\n    vec3 unrefracted = mix(vec3(0.0), vec3(1.0), smoothstep(-0.05, 0.0, map(p)));\n    fragColor = mix(vec4(col,1.0), vec4(unrefracted, 1.0), step(0.0, p.x));\n}","name":"Image","description":"","type":"image"}]}