{"ver":"0.1","info":{"id":"Wtt3Dl","date":"1578233842","viewed":140,"name":"RadialSectionOfEuclidianCoords","username":"Corstiaan","description":"Learning, testing..... using it as a shader-Desmos really\nI wanted sections of euclidean so I can make... pizzas, cookies snowflakes etc but without the distortions of a polar grid","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","basic","radial","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define TWO_PI (2.0*PI)\n#define HALF_PI (0.5*PI)\n\nfloat smst(float val, float width, float sharp)\n{\n    return smoothstep(width/2.+(sharp/2.), width/2.-(sharp/2.), val);\n}\n\nmat2 rot2d(float deg)\n{\n    float rad = radians(deg);\n    return mat2(cos(rad), -sin(rad),\n                sin(rad), cos(rad));\n}\n\nvec2 Polar(vec2 p)\n{\n    float rho = length(p) * 2.;\n    float phi = (atan(p.y, p.x) + PI) / (PI * 2.);\n    \n    return vec2(rho, phi);\n}\n\nvec2 Sectors(vec2 p, float amount)\n{\n    // polar coordinates\n    vec2 polarUv = Polar(p);\n\n    // each sector its own distinct (center) angle\n    float sectorId = floor(polarUv.y * amount) / amount + (0.5 / amount);\n    \n    // rotate incoming grid (+90 to stay in quadrant I & II)\n    return rot2d(sectorId * 360. + 90.) * p;\n}\n\nvec2 Grid(vec2 p, float scale, float thickness)\n{\n    vec2 frct = abs(fract(p * scale)-0.5) * 2.;\n    float lineThick = thickness / (1. / scale) / iResolution.y;\n    \n    float x = 1. - smst(frct.x, 2.-lineThick, lineThick);\n    float y = 1. - smst(frct.y, 2.-lineThick, lineThick);\n    \n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.);\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    float nrofSectors = 5.; // mouse.x * 36.;\n    \n    vec2 euclSectUv = Sectors(uv, nrofSectors);\n        \t\n    // add coordinate grid\n    vec2 coords = max(euclSectUv, Grid(euclSectUv, 20., 2.5));\n    \n    // draw\n    col = vec3(coords, 0.);\n    // col = vec3(uv, 0.);\n    // col = vec3(sectorId);\n    // col = vec3(polarUv, 0.);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n/*\n\tvec2 R = iResolution.xy, U = (fragCoord - .5 *R ) / R.y;\n\tfloat s = iMouse.x/R.x * 1e2, p = 3.*s/R.y;\n\tR = abs( fract(U*s)*2. - 1. );\n     \n\tfragColor = vec4( smoothstep(-p, p, R - 1.+.001*s) ,0,1);\n*/\n}","name":"Image","description":"","type":"image"}]}