{"ver":"0.1","info":{"id":"3d3cWX","date":"1601830215","viewed":412,"name":"arbitrary-palette ordered dither","username":"anastadunbar","description":"arbitrary color palette ordered dithering","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["color","colour","bayer","reduction","palettization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float p2x2(vec2 p){\n    return mat2(\n        0,3,\n        2,1\n    )[int(p.x)%2][int(p.y)%2];\n}\n#define ITER 3\nfloat orderedDither(vec2 p){\n    float o=0.;\n    for(int i=0;i<ITER;i++){o+=p2x2(p/pow(2.,float(ITER-i)-1.))*pow(4.,float(i));}\n    return o;\n}\nvec3 palette[]=vec3[](\n    vec3(1.,0.,0.),\n    vec3(1.,1.,0.),\n    vec3(0.,1.,0.),\n    vec3(0.,0.,1.),\n    vec3(1.,0.,1.),\n    vec3(0.),\n    vec3(1.)\n);\nvec3 outPalette[]=vec3[](\n    vec3(.9,.3,.2),\n    vec3(1.,1.,.5),\n    vec3(.5,1.,.3),\n    vec3(.3,.4,1.),\n    vec3(1.,.2,.8),\n    vec3(0.,.08,.1),\n    vec3(1.)\n);\nconst mat3 rgb2yiq=mat3(0.299,0.595716,0.211456,0.587,-0.274453,-0.522591,0.114,-0.321263,0.311135),\n           yiq2rgb=mat3(1.,1.,1.,0.9563,-0.2721,-1.1070,0.6210,-0.6474,1.7046);\nfloat diff(float a,float b){return abs(a-b);}\nfloat colorDifference(vec3 c1,vec3 c2){\n    return distance(c1,c2);\n    //return(diff(c1.r,c2.r)+diff(c1.g,c2.g)+diff(c1.b,c2.b))/3.;\n    //c1*=rgb2yiq;c2*=rgb2yiq*.5;return sqrt(pow(diff(c1.r,c2.r),2.)+pow(diff(c1.g,c2.g),2.)+pow(diff(c1.b,c2.b),2.))/3.;\n}\nint closestPaletteColor(vec3 color){\n    int index=0;\n    float diff=colorDifference(color,palette[0]);\n    for(int i=1;i<palette.length();i++){\n        float newDiff=colorDifference(color,palette[i]);\n        if(newDiff<diff){diff=newDiff;index=i;}\n    }\n    return index;\n}\nfloat p[]=float[](0.,0.,0.,0.,0.,0.,0.,0.); //TODO: Should depend on palette's size.\nint map(vec3 color,float x){\n    float sum=0.;\n    for(int i=0;i<palette.length();i++){\n        float diff=colorDifference(color,palette[i]);\n        if(diff==0.){return i;}\n        p[i]=clamp(1.-diff,0.,1.); //TODO: Find a better method.\n        sum+=p[i];\n    }\n    float shift=0.;\n    for(int i=0;i<palette.length();i++){\n        if(x<(p[i]+shift)/sum){\n            return i;\n        }\n        shift+=p[i];\n    }\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n    float b=orderedDither(fragCoord)/pow(4.,float(ITER));\n    /*vec3 c=clamp(texture(iChannel0,uv).rgb,0.,1.),\n         o=palette[0];\n    for(int i=1;i<palette.length();i++){\n        //if(colorDifference(c,palette[i])<colorDifference(c,o)){\n        if(colorDifference(c,palette[i])<colorDifference(c,o)*b*2.){\n            o=palette[i];\n        }\n    }*/\n    vec3 c=clamp(texture(iChannel0,uv).rgb,0.,1.);\n    fragColor=vec4(outPalette[map(c,b)],1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI=3.141592653589793238462643383,\n            TAU=6.283185307179586476925286766;\nfloat linearGradient(vec2 p,vec2 p1,vec2 p2){return dot(p-p1,p2-p1)/dot(p2-p1,p2-p1);}\nbool pointInTriangle(vec2 p,vec2 p1,vec2 p2,vec2 p3){ //4t3czN - Wunkolo\n    mat3 barycentric=inverse(mat3(p1,1.,p2,1.,p3,1.));\n    return all(greaterThanEqual(barycentric*vec3(p,1.),vec3(0.)));\n}\nvec3 barycentric(vec2 p,vec2 p1,vec2 p2,vec2 p3){ //lslXDf - jessifin\n    vec2 v1=p2-p1,v2=p3-p1,v3=p-p1;\n    float invDenom=1./(v1.x*v2.y-v2.x*v1.y),\n          v=(v3.x*v2.y-v2.x*v3.y)*invDenom,\n          w=(v1.x*v3.y-v3.x*v1.y)*invDenom,\n          u=1.-v-w;\n    return abs(vec3(u,v,w));\n}\nvec2 cosSin(float a){return vec2(cos(a),sin(a));}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    //vec2 uv=fragCoord/iResolution.xy;uv-=.5;uv.x*=iResolution.x/iResolution.y;uv+=.5;\n    vec2 uv=(fragCoord.xy-.5*iResolution.xy)/iResolution.y;uv+=.5;\n    vec3 c=vec3(step(length(uv-.5),.5));\n    float a=iTime/4.;\n    vec2 t1=(cosSin(a)/2.)+.5,\n         t2=(cosSin((TAU/3.)+a)/2.)+.5,\n         t3=(cosSin(((TAU*2.)/3.)+a)/2.)+.5;\n    c=pointInTriangle(uv,t1,t2,t3)?barycentric(uv,t1,t2,t3):c;\n    fragColor=vec4(c,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}