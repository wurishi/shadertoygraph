{"ver":"0.1","info":{"id":"wdlGW4","date":"1687132520","viewed":264,"name":"fireworks2","username":"froxel","description":"Written during a cloudy New Year's eve...","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["particles","fireworks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2));\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// A simple fireworks demo. This was written a few years back, so I do not\n// recall some of the finer implementation details... But the basic idea was\n// to reduce the number of particles that needs to be tested by dividing each\n// firework (big particle) into angles/sectors for the explosion (smaller\n// particles). Using a very simple accumulation buffer style of temporal\n// accumulation (without history clamping) also gives the nice light trails :)\n//\n// Author: Fredrik Nysj√∂ (2018?)\n\n#define NUM_PARTICLES 32\n#define NUM_SUBPARTICLES 45\n#define BLAST_RADIUS 0.3\n#define PARTICLE_RADIUS 0.005\n#define SUBPARTICLE_RADIUS 0.003\n#define USE_TEMPORAL_ACCUMULATION 1\n#define USE_JITTER 1\n#define USE_MIP_HACK 1\n\n#define boxstep(a, b, x) clamp(((x)-(a))/((b)-(a)),0.0,1.0)\n\nvec3 sky(vec2 uv)\n{\n    return mix(vec3(0.0, 0.025, 0.1), vec3(0.0), smoothstep(0.0, 1.0, uv.y));\n}\n\nfloat subparticle(vec2 xy, vec2 uv, float t, int i, float radius)\n{\n    vec2 p = (xy - uv) / radius;\n    float scale = float(NUM_SUBPARTICLES) / 360.0;\n    float angle = round((degrees(atan(p.y, p.x) + 3.141592)) * scale) / scale;\n    vec2 delta = vec2(cos(radians(angle)), sin(radians(angle)) - t * t * radius);\n    float delay = texture(iChannel0, vec2(fract(angle / 64.0 + float(i) * 1.61803), 1.0) + 0.5).a * 0.5 + 0.5;\n    float sub_radius = SUBPARTICLE_RADIUS * (1.0 + t);\n    float fade = (length((xy + delta * (radius * 0.9) * delay) - uv) < sub_radius) ? 4.0 : 0.0;\n    return fade;\n}\n\nvec3 particle(int i, vec2 uv, float aspect, vec2 jitter)\n{\n\tvec2 xy = texture(iChannel0, vec2(float(i) / 64.0, 0.0) + 0.5).rg * vec2(aspect, 0.5) + vec2(0.0, 0.5);\n    vec2 delta = texture(iChannel0, vec2(float(i) / 64.0, 0.0) + 0.5).ba * vec2(0.4, 0.2) + vec2(-0.2, 0.1);\n    vec3 color = texture(iChannel0, vec2(float(i) / 64.0, 1.0 / 64.0) + 0.5).rgb * 0.75 + 0.25;\n    color *= color;  // Make colors more saturated\n    color *= bool(USE_TEMPORAL_ACCUMULATION) ? 2.0 : 1.0;\n    \n    float t = mod((float(iFrame) / 60.0) * delta.y, xy.y) / xy.y;\n    float radius = boxstep(0.5, 1.0, t) * BLAST_RADIUS + PARTICLE_RADIUS;\n    float fade = boxstep(1.0, 0.5, t);\n    xy.x += t * delta.x;\n    xy.y = 0.8 * pow(t * xy.y, 1.0 / 2.0);\n    xy += bool(USE_JITTER) ? jitter : vec2(0.0);\n    fade = (radius > PARTICLE_RADIUS) ? subparticle(xy, uv, t, i, radius) * fade : 2.0;\n    \n    return (length(xy - uv) < radius) ? fade * color : vec3(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{ \n    vec2 uv = fragCoord/iResolution.xy;\n\tfloat aspect = iResolution.x / iResolution.y;\n    vec3 rnd = texture(iChannel0, mod(fragCoord, 64.0) / 64.0).rgb;\n    vec2 jitter = (fract(rnd.rg + 1.61803 * float(iFrame % 64)) - 0.5) * 0.0025;\n    \n    vec3 col = sky(uv); col += (rnd - 0.5) / 255.0;\n    for (int i = 0; i < NUM_PARTICLES + min(0, iFrame); ++i) {\n        col += particle(i, vec2(uv.x * aspect, uv.y), aspect, jitter);\n    }\n    \n#if USE_TEMPORAL_ACCUMULATION\n    col = mix(texture(iChannel1, uv, (bool(USE_MIP_HACK) ? 0.25 : 0.0)).rgb, col, 0.1);\n#endif\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}