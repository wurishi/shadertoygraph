{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define FOV           1.2\n//#define ITER_FRACTAL  6\n#define ITER_MAX      80\n#define ITER_DETAIL   0.05\n#define SCALE_MIN     2.0\n#define SCALE_MAX     2.6\n\n// MANDELBOX\n\n#define fixedRadius2  (1.125*1.125)\n#define minRadius2    (0.5*0.5)\n#define foldingLimit  (1.0)\n\nvoid boxFold(inout vec3 z, inout float dz) {\n\tz = clamp(z, -foldingLimit, foldingLimit) * 2.0 - z;\n}\n\nvoid sphereFold(inout vec3 z, inout float dz) {\n\tfloat r2 = dot(z, z);\n\tif (r2 < minRadius2) { \n\t\tfloat temp = (fixedRadius2 / minRadius2);\n\t\tz  *= temp;\n\t\tdz *= temp;\n\t} else if (r2 < fixedRadius2) { \n\t\tfloat temp = (fixedRadius2 / r2);\n\t\tz  *= temp;\n\t\tdz *= temp;\n\t}\n}\n\nfloat DE(in vec3 z, in float scale) {\n\tvec3 offset = z;\n\tfloat dr = 1.0;\n\t\n\t// unroll 6 times, add for more detail\n\t\n\tboxFold(z, dr);\n\tsphereFold(z, dr);\n \tz = scale * z + offset;\n\tdr = dr * abs(scale) + 1.0;\n\t\n\tboxFold(z, dr);\n\tsphereFold(z, dr);\n \tz = scale * z + offset;\n\tdr = dr * abs(scale) + 1.0;\n\t\n\tboxFold(z, dr);\n\tsphereFold(z, dr);\n \tz = scale * z + offset;\n\tdr = dr * abs(scale) + 1.0;\n\t\n\tboxFold(z, dr);\n\tsphereFold(z, dr);\n \tz = scale * z + offset;\n\tdr = dr * abs(scale) + 1.0;\n\t\n\tboxFold(z, dr);\n\tsphereFold(z, dr);\n \tz = scale * z + offset;\n\tdr = dr * abs(scale) + 1.0;\n\t\n\tboxFold(z, dr);\n\tsphereFold(z, dr);\n \tz = scale * z + offset;\n\tdr = dr * abs(scale) + 1.0;\n\t\n\t/*for (int n = 0 ; n < ITER_FRACTAL ; n++) {\n\t\tboxFold(z, dr);\n\t\tsphereFold(z, dr);\n \t\tz = scale * z + offset;\n        dr = dr * abs(scale) + 1.0;\n\t}*/\n\t\n\tfloat r = length(z);\n\treturn r / abs(dr);\n}\n\n// DONE MANDELBOXING\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\t\n}\n\nfloat pulse(float x) {\n\tx = mod(x, 1.0);\n\tx -= 1.0;\n\tx *= x;\n\tx *= x;\n\treturn x;\n}\n\nfloat pulseSig(float len) {\n\tfloat val = pulse(len * -0.5 + iTime * 0.5);\n\treturn val*.6+.4;\n}\n\nvec4 background(vec2 p) {\n\tfloat v = sin(length(p)*8.0-iTime*1.812)*.3+.7;\n\treturn vec4(vec3(0.54, 0.12, 0.61)*v, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n\tuv.y *= iResolution.y / iResolution.x;\n\t\n\tvec3 from = vec3(-15, 0, 0);\n\tvec3 dir = normalize(vec3(uv * FOV, 1.0));\n\tdir.xz *= rot(3.1415*.5);\n\t\n\tvec2 mouse=(iMouse.xy / iResolution.xy - 0.5) * 3.0;\n\tif (iMouse.z < 1.0) mouse = vec2(0.0);\n\t\n\tmat2 rotxz = rot(iTime*0.3242+mouse.x);\n\tmat2 rotxy = rot(iTime*0.0629+mouse.y);\n\t\n\tfrom.xz *= rotxz;\n\tfrom.xy *= rotxy;\n\tdir.xz  *= rotxz;\n\tdir.xy  *= rotxy;\n\n\tfloat scale = mix(SCALE_MIN, SCALE_MAX, sin(iTime*0.0931)*.5+.5);\n\t\n\tbool unset = true;\n\tfloat occlu = 0.0;\n\tfloat mdist = 3.0;\n\tfloat pulse = 1.0;\n\t\n\tfloat totdist = 0.0;\n\tfor (int steps = 0 ; steps < ITER_MAX ; steps++) {\n\t\tif (unset) {\n\t\t\tvec3 p = from + totdist * dir;\n\t\t\tfloat dist = min(DE(p, scale), 3.0);\n\t\t\ttotdist += dist;\n\t\t\tmdist = min(mdist, dist);\n\t\t\tif (dist < ITER_DETAIL) {\n\t\t\t\tunset = false;\n\t\t\t\tocclu = 1.0 - float(steps) / float(ITER_MAX);\n\t\t\t\tpulse = pulseSig(length(p));\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif (unset) {\n\t\tfragColor = background(uv);\n\t\tfragColor.rgb += vec3(1.0, 0.2, 0.8)*min(1.0-mdist*.333, 1.0);\n\t} else {\n\t\tfragColor = vec4(0.6, 0.12, 0.48, 1.0);\n\t\tfragColor.rgb += (occlu+pulse)*.48;\n\t}\n\t\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldSGRK","date":"1390668844","viewed":584,"name":"Pulsing Mandelbox","username":"Klems","description":"A simple mandelbox renderer. I added a pulse to improve depth perception. My first ray marching with distance estimator implementation. You can play around with the define. Click and drag the mouse to rotate the box.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","raymarch","mandelbrot","mandelbox"],"hasliked":0,"parentid":"","parentname":""}}