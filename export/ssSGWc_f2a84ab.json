{"ver":"0.1","info":{"id":"ssSGWc","date":"1629062045","viewed":470,"name":"boxes with BVH array","username":"delu","description":"arbitrary boxes rendered with progressive ray tracing using a bounding volume hierarchy encoded in an array inspired by https://www.shadertoy.com/view/XlVXDz\n\ntree array hint from https://stackoverflow.com/a/55483964","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["pathtracing"],"hasliked":0,"parentid":"fsBGW3","parentname":"some columns in a BVH"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 col = vec4(texture(iChannel0,fragCoord.xy/iResolution.xy).xyz,1.0).rgb;\n\n    col = pow( col, vec3(0.4545) );\n    \n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float Q1 = 0.6180339887498948482;\nconst float P2 = 1.324717957244746;\nconst vec2 Q2 = vec2(1./P2, 1./P2/P2);\nconst vec2 Q22 = vec2(2./pow(P2,4.), 1./pow(P2,6.));\nconst vec2 Q23 = vec2(2./pow(P2,7.), 1./pow(P2,8.));\nconst vec2 Q24 = vec2(3./pow(P2,9.), 5./pow(P2,10.));\nconst vec2 Q25 = vec2(3./pow(P2,11.), 5./pow(P2,12.));\n\nvec2 random2(vec2 p) {\n    float r1 = texture(iChannel1, p/1024.).x;\n    float r2 = texture(iChannel1, (p + vec2(512))/1024.).x;\n    return vec2(r1, r2);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nvec3 toCone(vec3 a, float turn, float z) {\n    float theta = 6.2831853072 * turn;\n    float r = sqrt(1. - z * z);\n    vec3 n = mix(vec3(0,0,1),vec3(0,1,0),step(1.,abs(a.z)));\n    vec3 u = normalize(cross(a, n));\n    vec3 v = cross(a, u);\n    return z * a + r * sin(theta) * u + r * cos(theta) * v;\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (0.0 - ro.y)/rd.y;\n}\n\nRayRes raycast(vec3 ro, vec3 rd, int exclude, bool once) {\n    RayRes rayRes = RayRes(vec3(0),1e10,0);\n    \n    float tmin = 1e10;\n    vec3 nor = vec3(0.);\n    \n    float t1 = iPlane( ro, rd );\n    \n    float epsilon = 0.;\n\n    if( t1>epsilon && t1<rayRes.t && exclude != 1) {\n        rayRes.id = 1;\n        rayRes.t = t1;\n        rayRes.nor = vec3(0,1,0);\n    }\n    \n    boxes(ro, rd, exclude, rayRes, rayRes, once);\n\n    return rayRes;\n}\nstruct LightRes {\n    RayRes ray;\n    vec3 skyDir;\n    float sun;\n    float sky;\n};\nLightRes getLight(vec3 pos, vec3 nor, vec4 rand, int exclude, bool onlySun) {\n    float sun = 0.;\n    float sky = 0.;\n\n    vec3 sunPos = vec3(-0.5, 0.4, -0.6);\n\n    vec3 sunDir = toCone(sunPos, rand.x, mix(0.99, 1.0, rand.y));\n    RayRes sunRes = raycast(pos, sunDir, exclude, true);\n\n    if (sunRes.t == 1e10) {\n        sun = clamp( dot( nor, sunDir ), 0.0, 1.0 );\n    }\n    if (onlySun) {\n        return LightRes(sunRes, sunDir, sun, sun);\n    }\n    vec3 skyDir = toCone(nor, rand.z, sqrt(rand.w));\n    RayRes skyRes = raycast(pos, skyDir, exclude, false);\n    if (skyRes.t == 1e10) {\n        sky = 1.;\n    }\n    return LightRes(skyRes, skyDir, sun, sky);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 32.0 + iTime*1.5;\n    time = 0.;\n    \n    float f = float(iFrame % 6000) + 1.;\n\n    vec2 rand1 = fract(Q25 * f + random2(fragCoord+vec2(128,0)));\n\n    vec2 rand2 = fract(Q2 * f + random2(fragCoord+vec2(256,0)));\n    vec2 rand3 = fract(Q22 * f + random2(fragCoord+vec2(0,256)));\n    vec2 rand4 = fract(Q23 * f + random2(fragCoord+vec2(256)));\n    vec2 rand5 = fract(Q24 * f + random2(fragCoord+vec2(128)));\n\n    // camera\t\n    vec3 ta = vec3( 1.75, 0.5, 0.25 );\n    vec3 ro = ta + vec3(\n        4.0*cos(0.1*time + 7.0*mo.x), 0. + 4.0*(1.-mo.y),\n        4.0*sin(0.1*time + 7.0*mo.x)\n    );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    // antialias offset\n    vec2 o = rand1 - 0.5;\n    vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n\n    // focal length\n    const float fl = 2.5;\n\n    // ray direction\n    vec3 rd = ca * normalize( vec3(p,fl) );\n\n\n    vec3 sunCol = vec3(1,1,0.9);\n    vec3 bg = vec3(0.5,0.7,1);\n    //bg = sunCol;\n    float sunIntensity = 0.8;\n    float skyIntensity = 0.2;\n    vec3 col = vec3(0);\n    vec3 dif = vec3(0);\n    \n    RayRes hitRes = raycast(ro, rd, 0, false);\n    LightRes lightRes;\n    \n    if (hitRes.id > 0) {\n        vec3 pos = ro + hitRes.t*rd;\n        vec3 nor = hitRes.nor;\n        lightRes = getLight(pos, nor, vec4(rand2, rand3), hitRes.id, false);\n        dif += sunCol * sunIntensity * lightRes.sun;\n        dif += bg * skyIntensity * lightRes.sky;\n        \n        // 1: minimum, 2: floor shadows, 3: corridors\n        int bounces = 1;\n        float t = 0.;\n        float b = 1.;\n        //for (int i = 0; i < bounces; i++) {\n            if (lightRes.ray.id == 1 || (lightRes.ray.id > 1 && lightRes.ray.t < 1e10)) {\n                t += lightRes.ray.t;\n                //float a = 1.;\n                float a = 1. + 1.0 * t * t;\n                a = b / a;\n                //float j = 1. + float(i);\n                vec4 rand = fract(1.0 * vec4(rand4, rand5));\n                pos = pos + lightRes.ray.t * lightRes.skyDir;\n                nor = lightRes.ray.nor;\n                lightRes = getLight(pos, nor, rand, lightRes.ray.id, true);\n                dif += a * sunCol * sunIntensity * lightRes.sun;\n                //dif += a * bg * skyIntensity * lightRes.sky;\n                b *= 1.0;\n            }\n        //}\n    }\n    \n    col += dif * 1.0;\n\n    // fog\n\tcol = mix(bg, col, exp( -0.02*hitRes.t ));\n\t//col = vec3(t);\n    \n    //col = vec3(rand.x);\n\n    // gamma\n    //col = pow( col, vec3(0.4545) );\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 a = texture(iChannel0,fragCoord.xy/iResolution.xy).xyz;\n    vec3 b = texture(iChannel1,fragCoord.xy/iResolution.xy).xyz;\n    //vec3 a0 = a;\n    //a0 = pow(a, vec3(0.4545));\n    //a0 *= 1.5;\n    //a *= 2.;\n    //a = mix(a, a0, step(0.5,fragCoord.x/iResolution.x));\n    vec3 c = mix(b,a,mix(0.05,0.6,clamp(iMouse.z, 0., 1.)));\n    //c = mix(c, a0, step(0.5,fragCoord.x/iResolution.x));\n\n    fragColor = vec4(c,1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"struct BT {\n\tvec3 r;\n\tvec2 pos;\n\tint id;\n\tint skip;\n};\nconst BT bts[] = BT[](\n\tBT(vec3(1.85,0.8,1.85), vec2(-0.25,-0.25),-9,84),\n\t\tBT(vec3(0.85,0.8,0.85),vec2(0.75,0.75),-9,20),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(0.25,0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(0.0,0.0),0,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(0.5,0.0),1,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(0.0,0.5),2,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(0.5,0.5),3,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(1.25,0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(1.0,0.0),4,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(1.5,0.0),5,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(1.0,0.5),6,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(1.5,0.5),7,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(0.25,1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(0.0,1.0),8,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(0.5,1.0),9,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(0.0,1.5),10,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(0.5,1.5),11,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(1.25,1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(1.0,1.0),12,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(1.5,1.0),13,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(1.0,1.5),14,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(1.5,1.5),15,0),\n\t\tBT(vec3(0.85,0.8,0.85),vec2(-2.+0.75,0.75),-9,20),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+0.25,0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+0.0,0.0),16,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+0.5,0.0),17,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+0.0,0.5),18,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+0.5,0.5),19,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+1.25,0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+1.0,0.0),20,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+1.5,0.0),21,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+1.0,0.5),22,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+1.5,0.5),23,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+0.25,1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+0.0,1.0),24,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+0.5,1.0),25,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+0.0,1.5),26,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+0.5,1.5),27,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+1.25,1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+1.0,1.0),28,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+1.5,1.0),29,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+1.0,1.5),30,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+1.5,1.5),31,0),\n\t\tBT(vec3(0.85,0.8,0.85),vec2(0.75,-2.+0.75),-9,20),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(0.25,-2.+0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(0.0,-2.+0.0),32,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(0.5,-2.+0.0),33,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(0.0,-2.+0.5),34,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(0.5,-2.+0.5),35,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(1.25,-2.+0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(1.0,-2.+0.0),36,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(1.5,-2.+0.0),37,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(1.0,-2.+0.5),38,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(1.5,-2.+0.5),39,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(0.25,-2.+1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(0.0,-2.+1.0),40,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(0.5,-2.+1.0),41,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(0.0,-2.+1.5),42,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(0.5,-2.+1.5),43,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(1.25,-2.+1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(1.0,-2.+1.0),44,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(1.5,-2.+1.0),45,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(1.0,-2.+1.5),46,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(1.5,-2.+1.5),47,0),\n\t\tBT(vec3(0.85,0.8,0.85),vec2(-2.+0.75,-2.+0.75),-9,20),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+0.25,-2.+0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+0.0,-2.+0.0),48,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+0.5,-2.+0.0),49,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+0.0,-2.+0.5),50,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+0.5,-2.+0.5),51,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+1.25,-2.+0.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+1.0,-2.+0.0),52,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+1.5,-2.+0.0),53,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+1.0,-2.+0.5),54,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+1.5,-2.+0.5),55,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+0.25,-2.+1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+0.0,-2.+1.0),56,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+0.5,-2.+1.0),57,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+0.0,-2.+1.5),58,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+0.5,-2.+1.5),59,0),\n\t\t\tBT(vec3(0.35,0.8,0.35),vec2(-2.+1.25,-2.+1.25),-9,4),\n\t\t\t    BT(vec3(0.1,0.8,0.1),vec2(-2.+1.0,-2.+1.0),60,0),\n\t\t\t    BT(vec3(0.1,0.6,0.1),vec2(-2.+1.5,-2.+1.0),61,0),\n\t\t\t    BT(vec3(0.1,0.7,0.1),vec2(-2.+1.0,-2.+1.5),62,0),\n\t\t\t    BT(vec3(0.1,0.5,0.1),vec2(-2.+1.5,-2.+1.5),63,0)\n);\n\nstruct RayRes {\n    vec3 nor;\n    float t;\n    int id;\n};\nfloat boxHit( in vec3 ro, in vec3 ird, in vec3 rad ) \n{\n    vec3 roo = abs(ro);\n    if (roo.x < rad.x && roo.y < rad.y && roo.x < rad.z) return 0.;\n    vec3 m = ird;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return -1.0;\n\n\treturn tN;\n}\n\nvec4 boxIntersect( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n\tvec3 rdd = rd;\n\tvec3 roo = ro;\n    \n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec4(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n\treturn vec4( tN, nor );\n}\n\nstruct Block {\n\tvec3 r;\n\tvec2 pos;\n\tint id;\n};\n\nconst Block bs[] = Block[](\n    Block(vec3(0.1,0.8,0.1),vec2(0.0,0.0),0),\n    Block(vec3(0.1,0.6,0.1),vec2(0.5,0.0),1),\n    Block(vec3(0.1,0.7,0.1),vec2(0.0,0.5),2),\n    Block(vec3(0.1,0.5,0.1),vec2(0.5,0.5),3),\n\n    Block(vec3(0.1,0.8,0.1),vec2(1.0,0.0),4),\n    Block(vec3(0.1,0.6,0.1),vec2(1.5,0.0),5),\n    Block(vec3(0.1,0.7,0.1),vec2(1.0,0.5),6),\n    Block(vec3(0.1,0.5,0.1),vec2(1.5,0.5),7),\n\n    Block(vec3(0.1,0.8,0.1),vec2(0.0,1.0),8),\n    Block(vec3(0.1,0.6,0.1),vec2(0.5,1.0),9),\n    Block(vec3(0.1,0.7,0.1),vec2(0.0,1.5),10),\n    Block(vec3(0.1,0.5,0.1),vec2(0.5,1.5),11),\n\n    Block(vec3(0.1,0.8,0.1),vec2(1.0,1.0),12),\n    Block(vec3(0.1,0.6,0.1),vec2(1.5,1.0),13),\n    Block(vec3(0.1,0.7,0.1),vec2(1.0,1.5),14),\n    Block(vec3(0.1,0.5,0.1),vec2(1.5,1.5),15),\n\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+0.0,0.0),16),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+0.5,0.0),17),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+0.0,0.5),18),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+0.5,0.5),19),\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+1.0,0.0),20),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+1.5,0.0),21),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+1.0,0.5),22),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+1.5,0.5),23),\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+0.0,1.0),24),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+0.5,1.0),25),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+0.0,1.5),26),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+0.5,1.5),27),\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+1.0,1.0),28),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+1.5,1.0),29),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+1.0,1.5),30),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+1.5,1.5),31),\n    Block(vec3(0.1,0.8,0.1),vec2(0.0,-2.+0.0),32),\n    Block(vec3(0.1,0.6,0.1),vec2(0.5,-2.+0.0),33),\n    Block(vec3(0.1,0.7,0.1),vec2(0.0,-2.+0.5),34),\n    Block(vec3(0.1,0.5,0.1),vec2(0.5,-2.+0.5),35),\n    Block(vec3(0.1,0.8,0.1),vec2(1.0,-2.+0.0),36),\n    Block(vec3(0.1,0.6,0.1),vec2(1.5,-2.+0.0),37),\n    Block(vec3(0.1,0.7,0.1),vec2(1.0,-2.+0.5),38),\n    Block(vec3(0.1,0.5,0.1),vec2(1.5,-2.+0.5),39),\n    Block(vec3(0.1,0.8,0.1),vec2(0.0,-2.+1.0),40),\n    Block(vec3(0.1,0.6,0.1),vec2(0.5,-2.+1.0),41),\n    Block(vec3(0.1,0.7,0.1),vec2(0.0,-2.+1.5),42),\n    Block(vec3(0.1,0.5,0.1),vec2(0.5,-2.+1.5),43),\n    Block(vec3(0.1,0.8,0.1),vec2(1.0,-2.+1.0),44),\n    Block(vec3(0.1,0.6,0.1),vec2(1.5,-2.+1.0),45),\n    Block(vec3(0.1,0.7,0.1),vec2(1.0,-2.+1.5),46),\n    Block(vec3(0.1,0.5,0.1),vec2(1.5,-2.+1.5),47),\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+0.0,-2.+0.0),48),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+0.5,-2.+0.0),49),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+0.0,-2.+0.5),50),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+0.5,-2.+0.5),51),\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+1.0,-2.+0.0),52),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+1.5,-2.+0.0),53),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+1.0,-2.+0.5),54),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+1.5,-2.+0.5),55),\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+0.0,-2.+1.0),56),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+0.5,-2.+1.0),57),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+0.0,-2.+1.5),58),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+0.5,-2.+1.5),59),\n    Block(vec3(0.1,0.8,0.1),vec2(-2.+1.0,-2.+1.0),60),\n    Block(vec3(0.1,0.6,0.1),vec2(-2.+1.5,-2.+1.0),61),\n    Block(vec3(0.1,0.7,0.1),vec2(-2.+1.0,-2.+1.5),62),\n    Block(vec3(0.1,0.5,0.1),vec2(-2.+1.5,-2.+1.5),63)\n);\nstruct Box {\n\tvec3 r;\n\tvec2 pos;\n};\nstruct B4 {\n\tBox box;\n\tBlock[4] children;\n};\nstruct B2 {\n\tBox box;\n\tB4[4] children;\n};\nstruct B0 {\n\tBox box;\n\tB2[4] children;\n};\nconst B4 b4[] = B4[](\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(0.25,0.25)), Block[]( bs[0],bs[1],bs[2],bs[3] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(1.25,0.25)), Block[]( bs[4],bs[5],bs[6],bs[7] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(0.25,1.25)), Block[]( bs[8],bs[9],bs[10],bs[11] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(1.25,1.25)), Block[]( bs[12],bs[13],bs[14],bs[15] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+0.25,0.25)), Block[]( bs[16],bs[17],bs[18],bs[19] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+1.25,0.25)), Block[]( bs[20],bs[21],bs[22],bs[23] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+0.25,1.25)), Block[]( bs[24],bs[25],bs[26],bs[27] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+1.25,1.25)), Block[]( bs[28],bs[29],bs[30],bs[31] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(0.25,-2.+0.25)), Block[]( bs[32],bs[33],bs[34],bs[35] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(1.25,-2.+0.25)), Block[]( bs[36],bs[37],bs[38],bs[39] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(0.25,-2.+1.25)), Block[]( bs[40],bs[41],bs[42],bs[43] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(1.25,-2.+1.25)), Block[]( bs[44],bs[45],bs[46],bs[47] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+0.25,-2.+0.25)), Block[]( bs[48],bs[49],bs[50],bs[51] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+1.25,-2.+0.25)), Block[]( bs[52],bs[53],bs[54],bs[55] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+0.25,-2.+1.25)), Block[]( bs[56],bs[57],bs[58],bs[59] )),\n\tB4(Box(vec3(0.35,0.8,0.35),vec2(-2.+1.25,-2.+1.25)), Block[]( bs[60],bs[61],bs[62],bs[63] ))\n);\nconst B2 b2[] = B2[](\n\tB2(Box(vec3(0.85,0.8,0.85),vec2(0.75,0.75)), B4[]( b4[0],b4[1],b4[2],b4[3] )),\n\tB2(Box(vec3(0.85,0.8,0.85),vec2(-2.+0.75,0.75)), B4[]( b4[4],b4[5],b4[6],b4[7] )),\n\tB2(Box(vec3(0.85,0.8,0.85),vec2(0.75,-2.+0.75)), B4[]( b4[8],b4[9],b4[10],b4[11] )),\n\tB2(Box(vec3(0.85,0.8,0.85),vec2(-2.+0.75,-2.+0.75)), B4[]( b4[12],b4[13],b4[14],b4[15] ))\n);\nconst B0 b0 = B0(Box(vec3(1.85,0.8,1.85), vec2(-0.25,-0.25)), B2[]( b2[0],b2[1],b2[2],b2[3] ));\n\n\nvoid n4(B4 b0, vec3 ro, vec3 rd, int exclude, inout vec4 outRes, out int id) {\n\tfor (int i = 0; i < 1; i++) {\n        Block block = b0.children[i];\n\n        if (exclude == block.id + 2) continue;\n\n        vec3 box = block.r;\n        vec3 pos = vec3(block.pos.x, -box.y, block.pos.y);        \n        vec4 res = boxIntersect(ro + pos, rd, box);\n        \n        float t2 = res.x;\n        if( t2>0. && t2<outRes.x)\n        {\n            id = block.id + 2;\n            outRes = res;\n        }\n\t}\n}\n\nbool hitBox(vec3 ro, vec3 rd, vec3 r, vec2 pos2, float tmin) {\n    vec3 pos = vec3(pos2.x, -r.y, pos2.y);\n\tfloat t = boxHit(ro + pos, rd, r);\n\treturn t>=0. && t<tmin;\n}\nvoid hitBlock(vec3 ro, vec3 rd, Block block, int exclude, inout RayRes rayRes) {\n\tif (exclude == block.id + 2) return;\n    \n    vec3 box = block.r;\n    vec3 pos = vec3(block.pos.x, -box.y, block.pos.y);\n    \n    vec4 res = boxIntersect(ro + pos, rd, box);\n    \n    float t2 = res.x;\n    if( t2>0. && t2<rayRes.t)\n    {\n        rayRes.id = block.id + 2;\n        rayRes.t = t2;\n        rayRes.nor = res.yzw;\n    }\n}\nvec2 intersectBox2(vec3 pos, vec3 invDir, vec3 mn, vec3 mx) {\n    vec3 t0 = (mn - pos) * invDir;\n    vec3 t1 = (mx - pos) * invDir;\n    \n    float tmin = max(max(min(t0.x, t1.x), min(t0.y, t1.y)), min(t0.z,t1.z));\n    float tmax = min(min(max(t0.x, t1.x), max(t0.y, t1.y)), max(t0.z,t1.z));\n    return vec2(tmin, tmax);\n    // return tmax >= tmin && tmin < t;\n}\n\nvoid boxes(vec3 ro, vec3 rd, int exclude, in RayRes ray, out RayRes rayRes, bool once) {\n\tvec3 ird = 1. / rd;\n\tint skipUntil = 0;\n    for (int i = 0; i < 85; i++) {\n    \tif (i > skipUntil) {\n            BT block = bts[i];\n\n            if (exclude != block.id + 2) {\n                vec3 box = block.r;\n                vec3 pos = vec3(block.pos.x, -box.y, block.pos.y);\n\n                if (block.id >= 0) {\n                    vec4 res = boxIntersect(ro + pos, rd, box);\n                    float t2 = res.x;\n                    if(t2 > 0. && t2<ray.t) {\n                        ray.id = block.id + 2;\n                        ray.t = t2;\n                        ray.nor = res.yzw;\n                        if (once) {\n                            skipUntil = 85;\n                        }\n                    }\n                } else {\n                    vec2 tRes = intersectBox2(ro + pos, ird, -box, +box);\n\n                    //float t = boxHit(ro + pos, ird, box);\n                    //if (t < ray.t) {\n                    if (tRes.y >= tRes.x && tRes.x < ray.t) {\n                        // continue\n                    } else {\n                        skipUntil = i + block.skip;\n                    }\n                }\n            }\n        }\n    }\n    rayRes = ray;\n}\n","name":"Common","description":"","type":"common"}]}