{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Created by vincent francois - cyanux/2014\n// Creative Commons Attribution-NonCommercial-NoDerivs 3.0 Unported License (CC BY-NC-ND 3.0)\n//\n// Plotting function on support\n//\n// From https://www.shadertoy.com/view/4slSzB\n//\n// vfrancois.pro@hotmail.fr\n\n#define TN 0.5\n\nvec2 R(vec2 p, float t) {\n\tfloat C = cos(t), S = sin(t);\n\treturn vec2(C*p.x-S*p.y,S*p.x+C*p.y);\n}\nfloat fn(vec2 A, vec2 B, vec2 U, float t, float f) {\n\tvec2 a = B - A;\n\tvec2 i = normalize(vec2(a.y, -a.x)) * f * .5 + a * t + A;\n\treturn dot(i-U,i-U);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat M = 6.28 * iMouse.x / iResolution.x;\n\tfloat T = iTime * .25;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 A = R(vec2( .5, .0), M) + .5;\n\tvec2 B = R(vec2(-.5, .0), M) + .5;\n\n\tfloat t = dot(B - A, uv - A);\n\tfloat d = 1024. * fn(A, B, uv, t, sin(T + t * 12.) * sin(T + t * 5.));\n\n\tuv = R(uv - 0.5, -M);\n\t\t   \n\tif(d < TN && d < .95)\n\t\tfragColor = vec4(d);\n\telse if(mod(uv.x, .1) < .005 || mod(uv.y, .1) < .005)\n\t\tfragColor = vec4(1., 0., 0., 0.);\n\telse\n\t\tfragColor = vec4(1.);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4slSzB","date":"1403447018","viewed":174,"name":"FunctionSupport","username":"cyanux","description":"Another method for plotting function. (TN definition : good value is 0.01 ; 0.5 is fun). Compatible with any functions ! No iteration !    [ <8O~ enabled (support rotation) ]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["plot","support"],"hasliked":0,"parentid":"","parentname":""}}