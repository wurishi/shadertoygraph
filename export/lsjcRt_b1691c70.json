{"ver":"0.1","info":{"id":"lsjcRt","date":"1493655427","viewed":1702,"name":"The Blue Flame","username":"Hadyn","description":"Inspired by the blue flame from Breath of the Wild... I focused more on appearances than efficiency/optimisation, which is sort of the polite way of saying the code is a horrible mess. You can play with the defined values about halfway down for fun(?).","likes":62,"published":1,"flags":0,"usePreview":0,"tags":["2d","flame","fire","zelda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \n * Created by Hadyn Lander \n * 3D noise from Nikita Miropolskiy, nikat/2013 https://www.shadertoy.com/view/XsX3zB\n * That basically includes all of this neat looking code up top:\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n\n/*\n* The Nintendo Super Mess of code below is all me. I am sorryish.\n*/\n\n#define FLAMERADIUS 0.45\n#define FLAMEBOOST 0.15\t\t// Adds the flame shape mask over the top of the multiplied noise to maintain more of original shape.\n#define EDGEMIN 0.025\t\t// Edge cutoff at base of flame. Values around 0.0 to 0.1 look best.\n#define EDGEMAX .8 \t\t\t// Edge cutoff at full height of flame. Values around 0.5 to 1.0 look best.\n#define FALLOFFPOW 4.0\n#define NOISEBIGNESS 2.0 \n#define WIDEN .8 \t\t\n#define WAVE 0.25 \t\t\n#define NIGHTSPEEDBONUS 1.25 \t\t\n#define SHAPE 0  \t\t\t// tear (0), egg (1), shitty tear (2)\t\n#define BREATHWILDNESS 1\t// not very wild (0), pretty wild (1), zakk wylde (2)\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = 28.22+NIGHTSPEEDBONUS*iTime;\n    float bignessScale = 1.0/NOISEBIGNESS;\n\tvec2 p = fragCoord.xy / iResolution.y;\n    // p*=4.0;\n    // p -= vec2(1.0);\n    float aspect = iResolution.x/iResolution.y;\n    vec2 positionFromCenter = p-vec2(0.5*aspect, 0.5);\n    positionFromCenter/=FLAMERADIUS;\n    positionFromCenter.x /= WIDEN;\n    float positionFromBottom = 0.5*(positionFromCenter.y+1.0);\n    vec2 waveOffset = vec2(0.);\n    waveOffset.x += positionFromBottom*sin(4.0*positionFromCenter.y-4.0*time);\n    waveOffset.x += 0.1*positionFromBottom*sin(4.0*positionFromCenter.x-1.561*time);\n    \n    positionFromCenter += WAVE*waveOffset;\n    \n    float outerMask = length(positionFromCenter);\n    if(SHAPE == 0)\n    {\n        // TEAR\n    \tpositionFromCenter.x += positionFromCenter.x / (1.0-(positionFromCenter.y));\n    }\n    else if(SHAPE == 1)\n    {\n        // EGG\n    \tpositionFromCenter.x += positionFromCenter.x * positionFromBottom;        \n    }\n    else if(SHAPE == 2)\n    {\n        // TEAR2\n    \tpositionFromCenter.x += sign(positionFromCenter.x) * positionFromBottom;        \n    }\n    \n    // positionFromCenter.x = mix(positionFromCenter.x, sign(positionFromCenter.x), 0.5*(positionFromCenter.y+1.0));\n    \n    float flameMask = clamp(1.0-length(positionFromCenter), 0.0, 1.0);\n    flameMask = 1.0-pow(1.0-flameMask, FALLOFFPOW);\n    \n    //flameMask = abs(positionFromCenter.x);\n    \n    // Noise:\n    vec3 p3 = bignessScale*0.25*vec3(p.x, p.y, 0.0) + vec3(0.0, -time*0.1, time*0.025);\n    float noise = simplex3d(p3*32.0);// simplex3d_fractal(p3*8.0+8.0);\n\tnoise = 0.5 + 0.5*noise;\n    \n    vec3 finalColor;\n    \n    float value = flameMask*noise;    \n    value += FLAMEBOOST*flameMask;\n\n    \n    \n    if(BREATHWILDNESS == 0)\n    {   \n        // Toon\n        float edge = mix(EDGEMIN, EDGEMAX, pow(0.5*(positionFromCenter.y+1.0), 1.2) );\n        //edge = 0.5+ 0.5*sin(time);    \n        float steppedValue = smoothstep(edge,edge+0.01, value);\n        steppedValue = mix(0.5*steppedValue, 1.0, smoothstep(1.5*edge,1.5*edge+0.01, value));\n        steppedValue = mix(0.5*steppedValue, 1.0, smoothstep(3.0*edge,3.0*edge+0.01, value));\n        //steppedValue += 0.2*flameMask;\n\n    \tvec3 bgColor = vec3(0.1,0.0,0.2);\n        finalColor = mix(bgColor, vec3(0.0,1.0,1.0), steppedValue);\n    }\n    else if(BREATHWILDNESS == 1)\n    {\n        // Breath of the Wild\n        float edge = mix(EDGEMIN, EDGEMAX, pow(0.5*(positionFromCenter.y+1.0), 1.2) );\n        //edge = 0.5+ 0.5*sin(time);    \n        float edgedValue = clamp(value-edge, 0.0 , 1.0);\n        float steppedValue = smoothstep(edge,edge+0.1, value);\n        float highlight = 1.0-edgedValue;\n        float repeatedValue = highlight;\n        highlight = highlight;\n        \n        \n        p3 = bignessScale*0.1*vec3(p.x, p.y, 0.0) + vec3(0.0, -time*0.01, time*0.025);\n        noise = simplex3d(p3*32.0);// simplex3d_fractal(p3*8.0+8.0);\n        noise = 0.5 + 0.5*noise;\n        repeatedValue = mix(repeatedValue, noise, 0.65);\n        \n        repeatedValue = 0.5*sin(6.0*PI*(1.0-pow(1.0-repeatedValue,1.8)) - 0.5*PI)+0.5;\n        float steppedLines = smoothstep(0.95, 1.0, pow(repeatedValue, 8.0));\n        steppedLines = mix(steppedLines, 0.0, 0.8-noise);\n        highlight = max(steppedLines, highlight);\n        \n        highlight = pow(highlight, 2.0);\n        \n        vec3 flameHighlightColor = mix(vec3(0.0,1.0,1.0), vec3(0.0,1.0,2.0), p.y);\n        \n        float whiteFlash =  sin(time*3.0);\n        whiteFlash = pow(whiteFlash, 4.0);        \n        flameHighlightColor += vec3(0.3,0.2,0.2) * whiteFlash;\n        \n        vec3 flameBodyColor = mix(vec3(0.2,0.2,0.2), vec3(0.0,0.05,0.25), p.y);\n        \n        finalColor = flameHighlightColor*(steppedValue*highlight); // + vec3(0.1,0.4,0.8)*edgedValue;\n        //finalColor = vec3(1.0)*steppedValue*highlight;\n        finalColor += flameBodyColor*steppedValue;\n    \tvec3 bgColor = mix(vec3(0.07,0.0,0.15), vec3(0.075,0.025,0.15), 1.0);\n        finalColor += bgColor;\n        \n        //finalColor = vec3(1.0,1.0,1.0)*steppedValue*highlight;\n    }\n    else\n    {\n        // Zakk Wylde\n        float edge = mix(EDGEMIN, EDGEMAX, pow(0.5*(positionFromCenter.y+1.0), 1.2) );\n        //edge = 0.5+ 0.5*sin(time);    \n        float steppedValue = smoothstep(edge,edge+0.01, value);\n        float repeatedValue = 0.5*sin(1.0*PI*(value/edge) + 0.5*PI)+0.5;\n        steppedValue = 1.0-smoothstep(0.5,0.6, 1.0-repeatedValue);\n        finalColor = vec3(1.0,1.0,1.0)*steppedValue;\n    }\n    \n    \n\tfragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}