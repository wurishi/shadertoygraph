{"ver":"0.1","info":{"id":"dtXXDj","date":"1676464726","viewed":127,"name":"H-Curve Plotting","username":"MartyMcFly","description":"Plotting the H-Curve\nInstead of using the inverse function (idx -> xy) it compares 4 adjacent sectors, finds prior and anterior index and draws lines to them. Scales much better than IQs method.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["hilbert","morton","spacefillingcurve","hcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2023 Pascal Gilcher\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//see https://www.shadertoy.com/view/mlS3Rm\nint H_curve(ivec2 pos, int logN)\n{\n        pos &= (1 << logN) - 1;//since it's cycling, I have to make it tileable somehow\n        int x = pos.x & 3;\n        int y = pos.y & 3;\n        pos >>= 1;        \n        int i = (x&2)<<2|((y^x)&2)<<1|(y^(~x<<1))&2|(x^y)&1; //initial D, I mean H       \n        for(int s = 2; s < logN; s++)\n        {\n            int n2 = 1 << s; n2 *= n2;            \n            i += (3 * n2) >> 3;                \n            \n            pos >>= 1;\n            x = pos.x & 1;\n            y = pos.y & 1;           \n            \n            int permute = x ^ y + (y << 1);                    \n            int shift   = x ^ y + (x << 1); \n            \n            i += permute * n2/4;\n            i = (i & (n2 - 1)) + n2 * shift;\n        }\n        return i;\n}\n\nfloat sdSqLine( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    vec2 d = pa - ba*h;\n    return dot(d,d);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float e = 1.0/iResolution.y;\n    vec2 p = (fragCoord - vec2(0.5 * (iResolution.x - iResolution.y), 0.0)) * e;    \n    p = mix(vec2(-0.05), vec2(1.05), p); \n    \n    float wrap = sin(iTime*0.5);\n    int level = int(mix(2.0, 7.0, wrap*wrap));\n    \n    int n = 1 << level;      \n    float w = 1.0 / float(n - 1);\n    \n    if(max(abs(p.x-0.5), abs(p.y-0.5)) > 0.5 + w * 0.5) {fragColor = vec4(1.0); return;}   \n    \n    ivec2 cp = ivec2(p * float(n - 1) + 0.5);    \n    int cidx = H_curve(cp, level);     \n    \n    ivec2 neighbours[4] = ivec2[](ivec2(-1, 0), ivec2(1, 0), ivec2(0, -1), ivec2(0, 1));\n    \n    float d = 2.0;\n    for(int j = 0; j < 4; j++)\n    {\n        ivec2 tp = cp + neighbours[j];\n        int tidx = H_curve(tp, level); \n        //neighbouring index\n        //if(abs(tidx - cidx) <= 1) d = min(d, sdSqLine(p, vec2(cp)*w, vec2(tp)*w));        \n        //circular index - closes the gap\n        if((abs(tidx - cidx) + 1) % (n*n) < 3) d = min(d, sdSqLine(p, vec2(cp)*w, vec2(tp)*w));  \n    }    \n\n    d = sqrt(d);\n    d /= e;\n    \n    float f = 1.0 - exp2(-d);\n    f *= min(1.0, d * 0.7);    \n    fragColor = vec4(f);\n}","name":"Image","description":"","type":"image"}]}