{"ver":"0.1","info":{"id":"3slfWB","date":"1588989534","viewed":373,"name":"Arbitrary Scale Pixel-art Scaler","username":"madbrain","description":"This implements the Scale2x/Eagle engine type of pixel scaling algorithm in a resolution-independent manner ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["pixel","rotozoomer","scaling","eagle","scale2x","pixelartscaling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv.x *= 2.0;\n    \n    float mus = sin(iTime+0.5);\n    float muc = cos(iTime+0.5);\n    float ut = uv.x;\n    uv.x = uv.x*muc - uv.y*mus;\n    uv.y = ut  *mus + uv.y*muc;\n    \n    uv *= 1.6 + 1.1 * cos(iTime*0.5);\n    \n    uv += 0.3;\n    uv.x += iTime * 4.0;\n    \n    float rf = 32.0;\n    float irf = 1.0 / rf;\n    vec2 uvf = floor(uv * rf) * irf;\n    vec2 uvi = (uv - uvf) * rf;\n    \n    // Time varying pixel color\n    vec3 col  = texture(iChannel0, vec2(uvf.x * 0.125             , uvf.y       )).xyz;\n    vec3 col2 = texture(iChannel0, vec2(uvf.x * 0.125 + irf*0.125 , uvf.y       )).xyz;\n\tvec3 col3 = texture(iChannel0, vec2(uvf.x * 0.125             , uvf.y + irf )).xyz;\n    vec3 col4 = texture(iChannel0, vec2(uvf.x * 0.125 + irf*0.125 , uvf.y + irf )).xyz;\n\t\n    vec3 cre;\n    vec3 dix;\n    vec3 diy;\n    vec3 blk;\n    if(uvi.x < 0.5 && uvi.y < 0.5)\n        cre = col , dix = col2, diy = col3, blk = col4;\n    else if(uvi.y < 0.5)\n        cre = col2, dix = col , diy = col4, blk = col3;\n    else if(uvi.x < 0.5)\n        cre = col3, dix = col4, diy = col , blk = col2;\n    else\n        cre = col4, dix = col3, diy = col2, blk = col ;\n    \n    float diamond = abs(uvi.x-0.5) + abs(uvi.y-0.5);\n    if(diamond < 0.5) {\n        vec3 cdx = abs(dix - diy);\n        float dism = cdx.x + cdx.y + cdx.z;\n        if(dism < 0.1)\n            cre = dix;\n    }\n    \n    // Output to screen\n    fragColor = vec4(cre,1.0);\n}","name":"Image","description":"","type":"image"}]}