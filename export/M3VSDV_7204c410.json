{"ver":"0.1","info":{"id":"M3VSDV","date":"1720533813","viewed":51,"name":"The emergence and extinction of ","username":"Capo","description":"I used escape fractals and utilized Julia sets to perform a series of parameter changes, ultimately simulating the generation and extinction of galaxies","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["juliasetescapefractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int max_iterations = 255;\n\nvec2 complex_square(vec2 v) {\n    return vec2(\n        v.x * v.x - v.y * v.y,\n        v.x * v.y * 2.0\n    );\n}\n\nvec2 rotate(vec2 v, float angle) {\n    float cosA = cos(angle);\n    float sinA = sin(angle);\n    return vec2(\n        v.x * cosA - v.y * sinA,\n        v.x * sinA + v.y * cosA\n    );\n}\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy - iResolution.xy * 0.5;\n    uv *= 2.5 / min(iResolution.x, iResolution.y);\n    \n    float angle = iTime * 0.1;\n    float zoom = 1.0 + iTime * 0.05; \n    uv = rotate(uv, angle);\n    uv /= zoom;\n\n    vec2 c = vec2(0.37 + cos(iTime * 0.5) * 0.04, sin(iTime * 0.5) * 0.10 + 0.50);\n    vec2 v = uv;\n    float smoothcolor = exp(-length(v));\n\n    float maxIter = 30.0 + smoothstep(0.0, 1.0, fract(iTime * 0.01)) * 225.0; \n\n    float bailout = 4.0;\n    float edgeWidth = 0.01; // Adjust the width of the edge glow\n\n    bool escaped = false;\n    float dist = 0.0;\n\n    for (int i = 0; i < int(maxIter); i++) {\n        v = c + complex_square(v);\n        smoothcolor += exp(-length(v));\n\n        if (dot(v, v) > bailout * bailout) {\n            escaped = true;\n            dist = sqrt(dot(v, v));\n            break;\n        }\n    }\n\n    if (escaped && dist < bailout) {\n        float edgeBrightness = smoothstep(bailout - edgeWidth, bailout, dist);\n        fragColor = vec4(vec3(0.8, 0.9, 1.0) * edgeBrightness, 1.0);\n    } else {\n        float r = 0.6 + 0.4 * (sin(smoothcolor * 0.1 + iTime * 0.63));\n        float g = r * r;\n        float b = r * g;\n        vec3 color = palette(smoothcolor * 0.05 + iTime * 0.1);\n        fragColor = vec4(color * vec3(r, g, b), 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}