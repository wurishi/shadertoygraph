{"ver":"0.1","info":{"id":"DdBSDz","date":"1670122102","viewed":129,"name":"Nyan Motion Illusion","username":"coler706","description":"ILLUSIONS","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifndef saturate\n#define saturate(v) clamp(v,0.,1.)\n//      clamp(v,0.,1.)\n#endif\nvec3 hue2rgb(float hue){\n\thue=fract(hue);\n\treturn saturate(vec3(\n\t\tabs(hue*6.-3.)-1.,\n\t\t2.-abs(hue*6.-2.),\n\t\t2.-abs(hue*6.-4.)\n\t));\n}\n\n//HSV (hue, saturation, value) to RGB.\n//Sources: https://gist.github.com/yiwenl/745bfea7f04c456e0101, https://gist.github.com/sugi-cho/6a01cae436acddd72bdf\nvec3 hsv2rgb(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,saturate(abs(fract(c.x+K.xyz)*6.-K.w)-K.x),c.y);\n}\n\nvec4 colorO(vec2 fc,float t){\nvec2 gg=(floor((fc-vec2(iResolution.x/2.0,0.0))/iResolution.yy*32.0)+0.5)/32.0;\nvec4 col = texture(iChannel0,gg/vec2(8.0,1.0)+vec2(10.0/64.0*mod(floor(iTime*0.0),6.0)+5.0/64.0,0.0)).xyzw;\nif(gg.x>0.5){\ncol.w=0.0;\n}\nif(gg.x<-0.6){\ncol.w=0.0;\n}\nfloat q=mod(3.0*t,1.0)*3.1415926535*2.0;\nvec4 col0=col;\n//col.z=col0.y*(sin(q)/2.0+0.5)+col0.x*(-sin(q)/2.0+0.5);\n\n//col.x=col0.z*(sin(q)/2.0+0.5)+col0.y*(-sin(q)/2.0+0.5);\nif(max(1.0-(col0.z+col0.x+col0.y)/2.0,0.0)<0.01 || abs(col0.z+col0.x-0.6*2.0)<0.1){\ncol.w=0.0;\n}else{\ncol0.xyz*=0.1;\ncol.xyz*=0.1;\n}\n//col.xyz+=;\nvec3 addg=hsv2rgb(vec3(mod((sin(t/2.0)/3.0+0.3)/2.0,1.0)*0.0+0.2,0.0,1.0));\naddg=addg/(0.33 *addg.x + 0.5 *addg.y+ 0.16 *addg.z);//*0.16;\ncol.xyz+=addg*(cos(q)/2.0+0.5)*max(1.0-(col0.z+col0.x+col0.y),0.0);\nreturn col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n\n    // Time varying pixel color\n    float t=iTime*1.0;\n    vec3 bas=vec3(0.0,0.5,0.5);//*0.0+0.5;\n    vec3 addg=hsv2rgb(vec3(mod(t*0.1,1.0)*0.0+0.5,1.0,0.16));\naddg=addg/(0.33 *addg.x + 0.5 *addg.y+ 0.16 *addg.z)*0.16*2.0;\nbas=addg;\n    vec3 col = bas;\n    if(colorO(uv,t).w>0.0){\n    col-=0.5*bas;\n    col+=colorO(uv,t).xyz*0.5;\n    \n    }\n    \nvec2 gg=(((uv-vec2(iResolution.x/2.0,0.0))/iResolution.yy*32.0)+0.5-vec2(-16.0,0.0))/32.0;\n\n    vec2 vel=vec2(2.0,sin(iTime*4.0-gg.x*32.0/2.0)*2.0*(0.5+0.5*cos(iTime*2.0+gg.x*32.0/4.0))*4.0);\n    //vel=-normalize(gg-vec2(0.5));\n    //vel=-vec2(vel.y,-vel.x)*2.0*(length(gg-vec2(0.5))*2.0)-normalize(gg-vec2(0.5))*2.0;\n    vec2 velOff=normalize(vel)*min(length(vel),2.0)*length(iResolution)/1000.0;\n    float td=0.1/2.0*min(length(vel),2.0);\n    if(colorO(uv-velOff,t-td).w>0.0){\n    col-=0.25*bas;\n    col+=colorO(uv-velOff,t-td).xyz*0.25;\n    \n    }\n    if(colorO(uv+velOff,t+td).w>0.0){\n    col-=0.25*bas;\n    col+=colorO(uv+velOff,t+td).xyz*0.25;\n    \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}