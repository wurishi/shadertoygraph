{"ver":"0.1","info":{"id":"7sd3zX","date":"1630432479","viewed":485,"name":"old memory","username":"shiyuugo","description":"old film filter\n\n--- reference \nblur : https://www.shadertoy.com/view/Xltfzj\nfilmicFx : https://www.shadertoy.com/view/Wdj3zV","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["retro","blur","screen","bloom","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec4 SCREEN(in vec4 src, in vec4 dst){\n    return ( src + dst ) - ( src * dst );\n}\n\nvec3 Blur(sampler2D tex, vec2 uv, float blurSize, float directions, float quality){\n    float TWO_PI = 6.28318530718;\n   \n    vec2 radius = blurSize/iResolution.xy;\n    vec3 res = texture(tex, uv).rgb;\n    for(float i=1.0/quality; i<=1.0; i+=1.0/quality)\n    {\n        for( float d=0.0; d<TWO_PI; d+=TWO_PI/directions)\n        {\n\t\t\tres += texture( tex, uv+vec2(cos(d),sin(d))*radius*i).rgb;\t\t\n        }\n    }\n    res /= (quality-1.) * directions;\n    return res;\n}\nvec3 Blur(sampler2D tex, vec2 uv){\n    return Blur(tex,uv, 4.,16.,4.);\n}\n\nvec2 ShakeUV(vec2 uv, float time){\n    uv.x += 0.002 * sin(time*3.141) * sin(time*14.14);\n    uv.y += 0.002 * sin(time*1.618) * sin(time*17.32);\n    return uv;\n}\n\nfloat filmDirt(vec2 uv, float time){ \n    uv += time * sin(time) * 10.;\n    float res = 1.0;\n    \n    float rnd = fract(sin(time+1.)*31415.);\n    if(rnd>0.3){\n        float dirt = \n            texture(iChannel1,uv*0.1).r * \n            texture(iChannel1,uv*0.01).r * \n            texture(iChannel1,uv*0.002).r *\n            1.0;\n        res = 1.0 - smoothstep(0.4,0.6, dirt);\n    }\n    return res;\n}\n\nfloat FpsTime(float time, float fps){\n    time = mod(time, 60.0);\n    time = float(int(time*fps)) / fps;\n    return time;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mUV = iMouse.xy/iResolution.xy;\n    \n    mUV = vec2(0.5,0.7); /*fix mouse pos for thumbnail*/\n    \n    vec4 col;\n    \n    float time = FpsTime(iTime, 12.);\n    fragColor = vec4(mod(uv.x+time*0.5, 0.1)*10.);\n    //return; /* Debug FpsTime */\n     \n    vec2 suv = ShakeUV(uv, time);\n    fragColor = vec4(mod(suv.xy,0.1)*10., 0., 1.0);\n    //return; /* Debug ShakeUV */\n    \n    //float grain = mix(1.0, fract(sin(dot(suv.xy+time,vec2(12.9898,78.233))) * 43758.5453), 0.25); /* random */\n    float grain = mix(1.0, snoise(suv.xy*1234.), 0.15); /* simplex noise */\n    fragColor = vec4(vec3(grain), 1.0);\n    //return; /* Debug grain */\n    \n    vec3 color = texture(iChannel0, suv).rgb;\n    color *= grain;\n    \n    float Size = mUV.x * 8.;\n    float Directions = 16.0;\n    float Quality = 3.0;\n    vec3 blur = Blur(iChannel0, suv, Size, Directions, Quality);\n    blur *= grain;\n    \n    float Threshold = mUV.y;\n    vec3 FilterRGB = normalize(vec3(1.5,1.2,1.0));\n    float HighlightPower = 3.0;\n    HighlightPower *= 1. + fract(sin(time)*3.1415) * 0.3;\n    vec3 highlight = clamp(color -Threshold,0.0,1.0)/(1.0-Threshold); \n    highlight = blur * Threshold * FilterRGB * HighlightPower;\n    \n    /* dirt */\n    float dirt = filmDirt(uv, time);\n    fragColor = vec4(vec3(dirt), 1.0);\n    //return; /* Debug dirt */\n    \n    col = SCREEN(vec4(color,1.0), vec4(highlight,1.0));\n    //col = vec4(highlight,1.0);\n    //col = vec4(blur,1.0);\n    col *= dirt;\n    \n    vec2 v = uv * (1.0 - uv.yx);\n    float vig = v.x*v.y * 15.0;\n    vig = pow(vig, 0.5);\n    \n    fragColor = col * vig;\n    //fragColor = uv.x>0.5 ? colR : colL;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}","name":"Common","description":"","type":"common"}]}