{"ver":"0.1","info":{"id":"7lSfWw","date":"1652276137","viewed":36,"name":"Dancing Abstract Cow","username":"chrrbns","description":"Some random shapes are dancing to the music (but we can't hear it)\nDedicated to Polina Bosobrod","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["zbuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Ml2Xzz","filepath":"https://soundcloud.com/thepipenoise/polish-cowl-gdzie-jest-bialy-wegorz-lofi-remix?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/thepipenoise/polish-cowl-gdzie-jest-bialy-wegorz-lofi-remix?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define myPi 3.141592654f\n#define Eps 1e-8\n#define maxZ 100.0\n#define maxVert 8;\n\nconst int n = 4;\nvec3 colVec[n] = vec3[n](vec3(0.44, 0.8, 0.95), vec3(0.7, 0.9, 0.7), vec3(0.7, 0.9, 0.7),vec3(0.6,0.5,0.9));\nvec3 BGcol = vec3(0.9, 0.85, 0.94);\n//float zVec[n] = float[n](3.0, 2.0, 1.0);\n\nint sizes[n] = int[n](3, 3, 4, 5), inds[n] = int[n](0, 3, 6,10); const int m = 15;\nvec2 polygonsXY[m]; float polygonsZ[m];\n\nvoid initPolygons(out vec2 polygonsXY[m], out float  polygonsZ[m], in float time){\n// 0 -- triangle\n    polygonsXY[0] = vec2(0.1, 0.2); polygonsZ[0] = 0.1; \n    polygonsXY[1] = vec2(0.9, 0.2); polygonsZ[1] = 0.2;\n    polygonsXY[2] = vec2(0.5, 0.86); polygonsZ[2] = 0.1;\n// 1 -- triangle\n    polygonsXY[3] = vec2(0.3, 0.15); polygonsZ[3] = 0.05;\n    polygonsXY[4] = vec2(0.7, 0.4); polygonsZ[4] = -0.11;\n    polygonsXY[5] = vec2(0.8, 0.9); polygonsZ[5] = 0.7;\n// 2 -- rotated square\n    vec3 center = vec3(0.5, 0.2 * sin(time*12.0)+0.4, 0.7); float r = 0.5;\n    int i; float j =0.0, phi = myPi/8.0;\n    float ang = myPi/3.0; \n    vec3 tmpVec;\n    mat3 rot = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(phi), sin(phi)), vec3(0.0, sin(phi), -cos(phi)) );\n    for (i = 6; i < 10; i++){\n        tmpVec = rot*(r*vec3(cos(j*ang + time*2.0), sin(j*ang + time*2.0), 0.8)); \n        polygonsXY[i] = tmpVec.xy + center.xy;\n        polygonsZ[i] = tmpVec.z + center.z;\n        j = j + 1.0;\n    }\n// 3 -- pentagon\n    center = vec3(cos(time*2.0), 0.6*sin(time*2.0)+0.7, 0.7 + 0.2*sin(time*2.0));r = 0.4;\n    j =0.0; phi = myPi/6.0;\n    ang = myPi/3.0; \n    rot = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(phi), cos(phi)), vec3(0.0, -sin(phi), cos(phi)) );\n    for (i = 10; i < 15; i++){\n        tmpVec = rot*(-r*0.5*vec3(cos(j*ang + time), 5.0*sin(j*ang + time), 0.8)); \n        polygonsXY[i] = tmpVec.xy + center.xy;\n        polygonsZ[i] = tmpVec.z + center.z;\n        j = j + 1.0;\n    }\n   \n}\n\n\nint leftTurn(in vec2 a, in vec2 b, in vec2 c)\n{\n    float tmp = (c.x - a.x)*(b.y - a.y) - (c.y - a.y)*(b.x - a.x);\n    if (abs(tmp) < Eps) \n        return 0;\n    else \n        return tmp > 0.0 ? 1: -1;\n}\n\n\nbool inPolygon(in int ind0, in int size, in vec2 vert[m], in vec2 p) // vertices in counter clockwise order\n{\n    bool res = leftTurn(vert[ind0 + size-1], vert[ind0], p) <= 0; int i = ind0;\n    while(res && (i < ind0 + size -1))\n    {\n        res = res && (leftTurn(vert[i], vert[i+1], p) <= 0); i++;\n    }\n    return res;\n}\n\nfloat zInPlane(in vec3 a, in vec3 b, in vec3 c, in vec2 p) // z coordinate for (x,y) point of a plane (a-b, c-b)\n{\n    vec3 nrm = cross(a-b, c-b);\n    //float D = - dot(nrm, b);\n    if (abs(nrm.z) < Eps) return a.z;\n    else return (dot(nrm, b) - nrm.x*p.x - nrm.y*p.y)/nrm.z;\n}\n\n\n// vec3 normalize(vec3), vec3 cross(vec3, vec3) are predefined\n\nvoid initColors(float time) {\n    vec3 center = vec3(0.7 + 0.2 * sin(time *2.0), 0.5 + 0.2 * cos(time), 0.2 * sin(time));\n    colVec[1] = vec3(0.87*sin(time*2.0),0.3*sin(time*2.0),0.9);\n    colVec[0] = vec3(0.8,0.5*sin(time*5.0),0.9);\n    BGcol = vec3(0.9, 0.9+0.5*cos(time*0.3),0.9);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime, tmp; //iTime;\n    initPolygons(polygonsXY, polygonsZ, time);\n    initColors(time);\n    vec3 col = BGcol; float z = maxZ; \n    int i;\n    for (i =0; i < n; i++){\n        if ( inPolygon(inds[i], sizes[i], polygonsXY, uv) ){\n            tmp = zInPlane(vec3(polygonsXY[inds[i]].x, polygonsXY[inds[i]].y, polygonsZ[inds[i]]), \\\n            vec3(polygonsXY[inds[i]+1].x, polygonsXY[inds[i]+1].y, polygonsZ[inds[i]+1]), \\\n            vec3(polygonsXY[inds[i]+2].x, polygonsXY[inds[i]+2].y, polygonsZ[inds[i]+2]), uv);\n            if (tmp < z){\n                z = tmp; col = colVec[i]; \n            }\n        }\n    }\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}