{"ver":"0.1","info":{"id":"fsKBDc","date":"1658934296","viewed":109,"name":"Bouncing balls with mirrors","username":"Yifan_Lu","description":"colorful bouncing balls ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 9;\nconst int NUM_PLANES = 5;\nconst int NUM_SPHERES = 11;\nconst int NUM_BARS = 76;\n\nconst float BAR_LENGTH = 0.5;\nconst float BAR_MAX_HEIGHT = 3.0;\n\n\nfloat n_rand(float n)\n{\n    return fract(sin(n) * 10000.0);\n}\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Bar_t {\n    vec3 center;\n    vec3 size;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nBar_t Bar[NUM_BARS]; \nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 0.5;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    Plane[1].A = 0.0;\n    Plane[1].B = 0.0;\n    Plane[1].C = 1.0;\n    Plane[1].D = 5.0;\n    Plane[1].materialID = 0;\n    \n    Plane[2].A = 0.0;\n    Plane[2].B = 0.0;\n    Plane[2].C = 1.0;\n    Plane[2].D = -5.0;\n    Plane[2].materialID = 0;\n  \n    Plane[3].A = 1.0;\n    Plane[3].B = 0.0;\n    Plane[3].C = 0.0;\n    Plane[3].D = 5.0;\n    Plane[3].materialID = 0;\n \n    Plane[4].A = -1.0;\n    Plane[4].B = 0.0;\n    Plane[4].C = 0.0;\n    Plane[4].D = 5.0;\n    Plane[4].materialID = 0;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Red plastic material.\n    Material[1].k_d = vec3( 0.8, 0.0, 0.0 );\n    Material[1].k_a = 0.2 * Material[2].k_d;\n    Material[1].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[1].k_rg = 0.5 * Material[2].k_r;\n    Material[1].n = 128.0;\n\n    // Orange plastic material.\n    Material[2].k_d = vec3( 0.8, 0.65, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Yellow plastic material.\n    Material[3].k_d = vec3( 0.8, 0.8, 0.0 );\n    Material[3].k_a = 0.2 * Material[2].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[2].k_r;\n    Material[3].n = 128.0;\n\n    // Green plastic material.\n    Material[4].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[4].k_a = 0.2 * Material[2].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.5 * Material[2].k_r;\n    Material[4].n = 128.0;\n\n    // Green-Blue plastic material.\n    Material[5].k_d = vec3( 0.0, 0.8, 0.8 );\n    Material[5].k_a = 0.2 * Material[2].k_d;\n    Material[5].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[5].k_rg = 0.5 * Material[2].k_r;\n    Material[5].n = 128.0;\n\n    // Blue plastic material.\n    Material[6].k_d = vec3( 0.0, 0.0, 0.8 );\n    Material[6].k_a = 0.2 * Material[2].k_d;\n    Material[6].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[6].k_rg = 0.5 * Material[2].k_r;\n    Material[6].n = 128.0;\n\n    // Purple plastic material.\n    Material[7].k_d = vec3( 0.5, 0.0, 0.8 );\n    Material[7].k_a = 0.2 * Material[2].k_d;\n    Material[7].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[7].k_rg = 0.5 * Material[2].k_r;\n    Material[7].n = 128.0;\n    \n    // Time varying color\n    Material[8].k_d = 0.5 + 0.5 * cos(vec3(iTime + vec3(0, 2, 4)));\n    Material[8].k_a = 0.5 * Material[8].k_d;\n    Material[8].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[8].k_rg = 0.5 * Material[8].k_r;\n    Material[8].n = 128.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 0.5 * sin(iTime) + 0.5, 0.5,  0.5 * cos(iTime)+0.5);\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 8.0, 0.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 1.0, 0.5,1.0);\n\n    //Spheres\n    float temp_time = mod(iTime, 10.0);\n    float theta = 2.0 * PI * iTime;\n\n    if(temp_time<=5.0){ //Spheres move outward\n        Sphere[0].center = vec3( 1.8+ temp_time*1.2/5.0, pow(abs(sin(theta+ 2.0 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[0].radius = 0.1;\n        Sphere[0].materialID = 1;\n\n        Sphere[1].center = vec3( 1.2+temp_time*0.8/5.0, pow(abs(sin(theta+ 1.8 * PI)),0.5) * 2.0  + 0.2, 0.0 );\n        Sphere[1].radius = 0.1;\n        Sphere[1].materialID = 2;\n\n        Sphere[2].center = vec3( 0.6+temp_time*0.4/5.0, pow(abs(sin(theta+ 1.6 * PI)),0.5) * 2.0  + 0.2, 0.0 );\n        Sphere[2].radius = 0.1;\n        Sphere[2].materialID = 3;\n\n        Sphere[3].center = vec3( 0.0, pow(abs(sin(theta+ 1.4 * PI)),0.5) * 2.0  + 0.2, 0.0 );\n        Sphere[3].radius = 0.1;\n        Sphere[3].materialID = 4;\n\n        Sphere[4].center = vec3( -0.6-temp_time*0.4/5.0, pow(abs(sin(theta+ 1.2 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[4].radius = 0.1;\n        Sphere[4].materialID = 5;\n\n        Sphere[5].center = vec3(-1.2-temp_time*0.8/5.0 , pow(abs(sin(theta+ 1.0 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[5].radius = 0.1;\n        Sphere[5].materialID = 6;\n\n        Sphere[6].center = vec3(-1.8-temp_time*1.2/5.0, pow(abs(sin(theta+ 0.8 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[6].radius = 0.1;\n        Sphere[6].materialID = 7;\n    }\n    else if(temp_time<=10.0){ //Spheres move inward\n        Sphere[0].center = vec3( 3.0-(temp_time-5.0)*1.2/5.0, pow(abs(sin(theta+ 2.0 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[0].radius = 0.1;\n        Sphere[0].materialID = 1;\n\n        Sphere[1].center = vec3( 2.0-(temp_time-5.0)*0.8/5.0, pow(abs(sin(theta+ 1.8 * PI)),0.5) * 2.0  + 0.2, 0.0 );\n        Sphere[1].radius = 0.1;\n        Sphere[1].materialID = 2;\n\n        Sphere[2].center = vec3( 1.0-(temp_time-5.0)*0.4/5.0, pow(abs(sin(theta+ 1.6 * PI)),0.5) * 2.0  + 0.2, 0.0 );\n        Sphere[2].radius = 0.1;\n        Sphere[2].materialID = 3;\n\n        Sphere[3].center = vec3( 0.0, pow(abs(sin(theta+ 1.4 * PI)),0.5) * 2.0  + 0.2, 0.0 );\n        Sphere[3].radius = 0.1;\n        Sphere[3].materialID = 4;\n\n        Sphere[4].center = vec3( -1.0+(temp_time-5.0)*0.4/5.0, pow(abs(sin(theta+ 1.2 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[4].radius = 0.1;\n        Sphere[4].materialID = 5;\n\n        Sphere[5].center = vec3(-2.0+(temp_time-5.0)*0.8/5.0 , pow(abs(sin(theta+ 1.0 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[5].radius = 0.1;\n        Sphere[5].materialID = 6;\n\n        Sphere[6].center = vec3(-3.0+(temp_time-5.0)*1.2/5.0, pow(abs(sin(theta+ 0.8 * PI)),0.5) * 2.0 + 0.2, 0.0 );\n        Sphere[6].radius = 0.1;\n        Sphere[6].materialID = 7;\n    }\n\n    //Bars\n    int line = NUM_BARS / 4;\n    for(int i = 0; i< line; i++){\n        float n = n_rand(float(i));\n        Bar[i].center = vec3(-5.0+float(i)*BAR_LENGTH , 0.0 , -5.0);\n        Bar[i].size = vec3(BAR_LENGTH,BAR_MAX_HEIGHT * pow(abs(sin(theta + n * PI)), 0.5),BAR_LENGTH);\n        Bar[i].materialID = 8;\n    }\n    for(int i = line; i< 2*line; i++){\n        float n = n_rand(float(i));\n        Bar[i].center = vec3(5.0 , 0 , -5.0+float(i-line)*BAR_LENGTH);\n        Bar[i].size = vec3(BAR_LENGTH,BAR_MAX_HEIGHT * pow(abs(sin(theta + n * PI)), 0.5),BAR_LENGTH);\n        Bar[i].materialID = 8;\n    }\n    for(int i = 2*line; i< 3*line; i++){\n        float n = n_rand(float(i));\n        Bar[i].center = vec3(-5.0+float(i-2*line)*BAR_LENGTH , 0 , 5.0);\n        Bar[i].size = vec3(BAR_LENGTH,BAR_MAX_HEIGHT * pow(abs(sin(theta + n * PI)), 0.5),BAR_LENGTH);\n        Bar[i].materialID = 8;\n    }\n    for(int i = 3 * line; i< 4*line; i++){\n        float n = n_rand(float(i));\n        Bar[i].center = vec3(-5.0 , 0 , -5.0+float(i-3*line)*BAR_LENGTH);\n        Bar[i].size = vec3(BAR_LENGTH,BAR_MAX_HEIGHT * pow(abs(sin(theta + n * PI)), 0.5),BAR_LENGTH);\n        Bar[i].materialID = 8;\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n\n    vec3 dist = ray.o - sph.center;\n    //equation factors\n    float a = dot(ray.d, ray.d);\n    float b = dot(ray.d, dist) * 2.0;\n    float c = dot(dist, dist) - sph.radius;\n\n    //calculate equation\n    float d = b * b - 4.0 * a * c;\n    if(d < 0.0) return false;\n    float t1 = (-b + sqrt(d)) / 2.0 / a;\n    float t2 = (-b - sqrt(d)) / 2.0 / a; // two roots t1 >= t2\n    if( t1<=0.0 ) return false;\n    \n    //out factors\n    t = (t2 > 0.0) ? t2 : t1;\n    hitPos = ray.o + ray.d * t;\n    hitNormal = (hitPos - sph.center) / sph.radius;\n    return true;\n    \n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    \n    vec3 dist = ray.o - sph.center;\n    //equation factors\n    float a = dot(ray.d, ray.d);\n    float b = dot(ray.d, dist) * 2.0;\n    float c = dot(dist, dist) - sph.radius;\n\n    //calculate equation\n    float d = b * b - 4.0 * a * c;\n    if(d < 0.0) return false;\n    float t1 = (-b + sqrt(d)) / 2.0 / a;\n    float t2 = (-b - sqrt(d)) / 2.0 / a; // two roots t1 >= t2\n    if( t1<=0.0 ) return false;\n\n    float t0 = (t2 > 0.0) ? t2 : t1;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\nbool IntersectBar(in Bar_t bar, in Ray_t ray, in float tmin, in float tmax, out float t, out vec3 hitPos, out vec3 hitNormal){\n    mat4 trans = mat4(1.0, 0.0, 0.0, 0.0,\n                      0.0, 1.0, 0.0, 0.0,\n                      0.0, 0.0, 1.0, 0.0,\n                      bar.center, 1.0);\n    vec3 ro = (trans * vec4(ray.o, 1.0)).xyz;\n    vec3 rd = ray.d;\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * bar.size;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) return false; \n    if (tN < tmin || tN > tmax) return false; \n    t = tN;\n    hitPos = (inverse(trans) * vec4((ro + t * rd), 1.0)).xyz;\n    hitNormal = (transpose(inverse(trans)) * vec4((-sign(ray.d) * step(t1.zxy, t1.xyz) * step(t1.yzx, t1.xyz)), 1.0)).xyz;\n    return true;\n}\n\nbool IntersectBar(in Bar_t bar, in Ray_t ray, in float tmin, in float tmax){\n    mat4 trans = mat4(vec4(1., 0., 0., 0.),\n        vec4(0., 1., 0., 0.),\n        vec4(0., 0., 1., 0.),\n        vec4(bar.center, 1.));\n\n    vec3 ro = (trans * vec4(ray.o, 1.0)).xyz;\n    vec3 rd = ray.d;\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * bar.size;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if (tN > tF || tF < 0.0) return false; \n    if (tN < tmin || tN > tmax) return false; \n    return true;\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n\n    //intersection with planes\n    for(int i = 0; i < NUM_PLANES; i++){\n        if (IntersectPlane( Plane[i], ray, DEFAULT_TMIN,DEFAULT_TMAX)){ //if intersection\n            hasHitSomething = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n            //record data\n            if(temp_t<=nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n            }\n        }\n    }\n\n    //intersection with spheres\n    for(int i = 0; i<NUM_SPHERES; i++){\n        if(IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX)){ //if intersection\n            hasHitSomething = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n            //record data\n            if(temp_t<=nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n            }\n        }\n    }\n\n    //intersection with bars\n    for (int i = 0; i < NUM_BARS; i++) {\n        if (IntersectBar(Bar[i], ray, DEFAULT_TMIN, DEFAULT_TMAX)) { //if intersection\n            hasHitSomething = IntersectBar(Bar[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n            //record data\n            if(temp_t<=nearest_t){\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Bar[i].materialID;\n            }\n        }\n    }\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n\n    for(int i = 0; i<NUM_LIGHTS; i++){\n        //cast shadow ray and calculate k_shadow\n        Ray_t shadow_ray;\n        shadow_ray.o = nearest_hitPos;\n        shadow_ray.d = normalize(Light[i].position - nearest_hitPos);\n        bool inShadow = false;\n        float t_min = DEFAULT_TMIN;\n        float t_max = distance(Light[i].position , nearest_hitPos);\n        //check the shaow ray's intersection\n        bool shadowRayHitPlane = false, shadowRayHitSphere = false, shadowRayHitBar = false; \n        for(int j = 0; j < NUM_PLANES; j++){\n            if(IntersectPlane(Plane[j], shadow_ray, t_min, t_max)) shadowRayHitPlane = true;\n        }\n        for(int k = 0; k < NUM_SPHERES; k++){\n            if(IntersectSphere(Sphere[k], shadow_ray, t_min, t_max)) shadowRayHitSphere = true;\n        }\n        for(int k = 0; k < NUM_BARS; k++){\n            if(IntersectBar(Bar[i], shadow_ray, t_min, t_max)) shadowRayHitBar = true;\n        }\n        inShadow = shadowRayHitPlane || shadowRayHitSphere || shadowRayHitBar;\n\n        I_local += PhongLighting( normalize( Light[i].position-nearest_hitPos ), normalize(nearest_hitNormal), normalize(ray.o - nearest_hitPos), inShadow, Material[nearest_hitMatID], Light[i] );\n\n    }\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    float rotate_radius = 4.2;\n    vec3 cam_pos = vec3( rotate_radius * cos(iTime/2.0), 2.0, rotate_radius * sin(iTime/2.0) );\n    vec3 cam_lookat = vec3( 0.0, 0.7, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat ); \n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}