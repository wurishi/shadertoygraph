{"ver":"0.1","info":{"id":"4f33WS","date":"1712321413","viewed":48,"name":"Virus Viiiiiiirus","username":"BlackBow","description":"virussss","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["virus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Smooth vs sharp boolean operations for combining shapes\n\n// Related techniques:\n//\n// Elongation  : https://www.shadertoy.com/view/Ml3fWj\n// Rounding    : https://www.shadertoy.com/view/Mt3BDj\n// Onion       : https://www.shadertoy.com/view/MlcBDj\n// Metric      : https://www.shadertoy.com/view/ltcfDj\n// Combination : https://www.shadertoy.com/view/lt3BW2\n// Repetition  : https://www.shadertoy.com/view/3syGzz\n// Extrusion2D : https://www.shadertoy.com/view/4lyfzw\n// Revolution2D: https://www.shadertoy.com/view/4lyfzw\n//\n// More information here: https://iquilezles.org/articles/distfunctions\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opSubtraction( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opIntersection( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return max(d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nfloat randomBetween(float min, float max, float seed) {\n    return mix(min, max, fract(sin(seed) * 43758.5453));\n}\n\n\n//-------------------------------------------------\n\n/*float sdSphere( in vec3 p, in float r )\n{\n    float noise = 0.4*sin(1.85)*sin (2.9*p.x)*sin (5.*p.y)*sin (4.8*p.z);\n    return length(p)-r + noise+ cos(0.8 * iTime);\n}\n*/\n\nmat2 rM; // Rotation matrix.\nvec2 a;\n\n// IQ's noise\nfloat pn(in vec3 p){\n\n    vec3 ip = floor(p);\n    p = fract(p);\n    p *= p*(3.0 - 2.0*p);\n    vec2 uv = (ip.xy + vec2(37.0, 17.0)*ip.z) + p.xy;\n    uv = texture(iChannel0, (uv+ 0.5)/256.0, -100.0).yx;\n    return mix(uv.x, uv.y, p.z);\n}\n\n// FBM\nfloat fpn(vec3 p){\n    return pn(p*.6125)*0.1*max(1.,cos(iTime)) + pn(p*.125)*0.3*sin(iTime) + pn(p*.25)*.65*sin(iTime);\n}\n\nfloat sdSphere( in vec3 p, in float r)\n{\n \n float d = length(p)-r ;\n \n\n float ao = (0.5 * (cos(iTime) + 1.));\n    //    float o = (0.035 * ao * ao);\n float o = 0.0;\n    // Spikes\n p = normalize(p);\n    vec4 b = max(max(max(\n        abs(vec4(dot(p,vec3(0.526 + o,0.000,0.851)), dot(p,vec3(-0.526,0.000,0.851)),dot(p, vec3(0.851,0.526,0.000)), dot(p,vec3(-0.851,0.526,0.000)))),\n        abs(vec4(dot(p,vec3(0.357+o,0.934,0.000)), dot(p,vec3(-0.357+o,0.934,0.000)), dot(p, vec3(0.000,0.851,0.526)), dot(p,vec3(0.000,-0.851,0.526))))),\n                     abs(vec4(dot(p,vec3(0.000,0.357 + o,0.934)), dot(p,vec3(0.000,-0.357 - o,0.934)), dot(p, vec3(0.934,0.000,0.357)), dot(p,vec3(-0.934,0.000,0.357))))),\n                 abs(vec4(dot(p,vec3(0.577 + o,0.577 + o,0.577 + o)), dot(p,vec3(-0.577,0.577,0.577)), dot(p, vec3(0.577,-0.577,0.577)), dot(p,vec3(0.577,0.577,-0.577)))));\n    b.xy = max(b.xy, b.zw);\n    b.x = pow(max(b.x, b.y), 64.);\n\n\n    return d - exp2(b.x*(sin(iTime+1.)*0.25 + 0.75));\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)) - r;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdLiquidBox (vec3 p, vec3 b){\n    float noise = 0.1*sin(0.8*iTime)*sin (4.0*p.x)*sin (10.*p.y)*sin (.8*p.z);\n    return noise + sdBox (p,b);\n}\n\nmat3 rotationMatrixY (float theta)\n{\n    float c = cos (theta);\n    float s = sin (theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n\nvec3 rotateY (vec3 p, float theta)\n{\n    return p*rotationMatrixY(theta); \n}\n\nfloat twistedBox( vec3 p, vec3 b , float t) {\n    vec3 q = rotateY(p, p.y*t);\n    return sdBox(q,b); \n}\n\n// See \"Combustible Voronoi\"\n// https://www.shadertoy.com/view/4tlSzl\nvec3 firePalette(float i){\n\n    float T = 1400. + 1000.*i + 200. * (0.5 * (1. + sin(iTime))); // Temperature range (in Kelvin).\n    vec3 L = vec3(7.4 * (0.5 * (sin(iTime) + 1.)), 7.6, 7.4* (0.5 * (cos(iTime) + 1.)) ); // Red, green, blue wavelengths (in hundreds of nanometers).\n    L = pow(L,vec3(5.0)) * (exp(1.43876719683e5/(T*L))-1.0);\n    return 1.0 - exp(-2e8/L); // Exposure level. Set to \"50.\" For \"70,\" change the \"5\" to a \"7,\" etc.\n}\n\n\n//---------------------------------\n\nfloat map(in vec3 pos)\n{\n    float an = sin(iTime);\n    float dfinal = 0.0;\n    vec3 q = pos - vec3(0.9,0.5,1.0);\n    float d2 = sdLiquidBox(q, vec3(0.6,0.01,1.7)); \n    vec3 r = q + vec3(0.0,-0.5,-0.7);\n\n    dfinal = d2;\n    \n    \n    vec3 q1 = pos - vec3(0.9, 0.5,1.0);\n    float cicle = sdSphere(q1, 1.5);\n    //dfinal = opUnion(d2, opUnion(d1,cicle));\n    \n    float ypos = randomBetween(-1.0, float(2.), 1.);\n    float zpoz = randomBetween(5.0, 10. * an , 1000.);\n    float  xpoz = clamp(iTime, 0.0, 10.0);\n    float d1 = sdSphere( q-vec3(2.8,1.4+ypos *an,.8), 3. );\n    float d3 = sdSphere( q-vec3(an * -2.8,6.4+ypos *an,.8), 1. );\n    float d4 = sdSphere( q-vec3(-8.8,-6.4+ypos *an,.8), .05 );\n    float d5 = sdSphere( q-vec3(2.8,18.4+ypos *an,an *.8), .09 );\n    float d6 = sdSphere( q-vec3(-9.8,12.4+ypos *an,.8), clamp(an*2., 0.02, 0.6 ));\n    float d7 = sdSphere( q-vec3(an * 3.8,10.4+ypos *an,.3), 0.3 );\n    float d8 = sdSphere( q-vec3(25.8,1.4+ypos *an,.8), .3 );\n    float d9 = sdSphere( q-vec3(20.8,-3.4+ypos *an,an *.8), 0.5 );\n    float d10 = sdSphere( q-vec3(16.8,13.4+ypos *an,.8), clamp(an *2.,1., 1.5 ));\n    float d11 = sdSphere( q-vec3(-13.8,6.4+ypos *an,.8), 1. );\n    float d12 = sdSphere( q-vec3(28.8,13.4+ypos *an,.8 *an), 0.5);\n    float d109 = opSmoothUnion(d10,d9, .05);\n    float d8preview = opSmoothUnion(d109,d8, .05);\n    float d7preview = opSmoothUnion(d8preview,d7, .05);\n    float d6preview = opSmoothUnion(d7preview,d6, .05);\n    float d5preview = opSmoothUnion(d6preview,d5, .05);\n    float d4preview = opSmoothUnion(d5preview,d4, .05); \n    float d3preview = opSmoothUnion(d4preview,d3, .05); \n    float dtprime = opSmoothUnion(d1,d3preview, .05);\n    float dtother = opSmoothUnion(dtprime,d12, .05);\n    float dt = opSmoothUnion(dtother,d11, .05);\n    \n    dfinal = opUnion( dfinal, dt );\n   \n    return dfinal;\n}\nvec3 localRay;\n\nvoid CamPolar( out vec3 pos, out vec3 ray, in vec3 origin, in vec2 rotation, in float distance, in float zoom, in vec2 fragCoord )\n{\n\t// get rotation coefficients\n\tvec2 c = vec2(cos(rotation.x),cos(rotation.y));\n\tvec4 s;\n\ts.xy = vec2(sin(rotation.x),sin(rotation.y)); // worth testing if this is faster as sin or sqrt(1.0-cos);\n\ts.zw = -s.xy;\n\n\t// ray in view space\n\tray.xy = fragCoord.xy - iResolution.xy*.5;\n\tray.z = iResolution.y*zoom;\n\tray = normalize(ray);\n\tlocalRay = ray;\n\t\n\t// rotate ray\n\tray.yz = ray.yz*c.xx + ray.zy*s.zx;\n\tray.xz = ray.xz*c.yy + ray.zx*s.yw;\n\t\n\t// position camera\n\tpos = origin - distance*vec3(c.x*s.y,s.z,c.x*c.y);\n}\n\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = 0.0001;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ) );\n}\n\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n   vec3 rd = normalize(vec3((fragCoord.xy - 0.3*iResolution.xy)/iResolution.y, 0.3));\n   vec3 ro = vec3(0., 0., -8.);\n   \n   // ld, td: local, total density \n   // w: weighting factor\n   float ld = 0., td = 0., w;\n\n   // t: length of the ray\n   // d: distance function\n   float d = 1., t = 0.;\n   \n   // Distance threshold.\n   const float h = .01;\n    \n   // total color\n   vec3 tc = vec3(0.);\n\n   // rm loop\n   for (int i=0; i<64*64*64; i++) {\n    \n      if(td>(1. - 1./200.) || d<0.001*t || t>1200.)break;\n        \n      d = map(ro + t*rd); \n      \n      ld = (h - d) * step(d, h);\n      w = (1. - td) * ld;   \n     \n      // accumulate color and density\n      tc += w*w + 1./100.;  // Different weight distribution.\n      td += w + 1./200.;\n\n      \n      // enforce minimum stepsize\n      d = max(d, 1.04); // Increased the minimum, just a little.\n      \n      // step forward\n      t += d*0.3;\n      \n   }   \n   \n    // Fire palette.\n  tc = firePalette(tc.x);\n    \n   // No gamma correction. It was a style choice, but usually, you should have it.   \n\n\n    fragColor = vec4(tc, 1.0);\n}","name":"Image","description":"","type":"image"}]}