{"ver":"0.1","info":{"id":"4XSBRy","date":"1729582686","viewed":46,"name":"dark pool","username":"vivavolt","description":"texture study","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// dark pool\n\n\n#define TIME (iTime / 3.0)\n\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 hash22(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat noise(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n    \n    float a = dot(hash22(i), f);\n    float b = dot(hash22(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\n    float c = dot(hash22(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\n    float d = dot(hash22(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));\n    \n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n}\n\nfloat fbm(vec2 p) {\n    float sum = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    for(int i = 0; i < 6; i++) {\n        sum += amp * noise(p * freq);\n        amp *= 0.6;\n        freq *= 2.0;\n        p = vec2(p.y - p.x, p.x + p.y) * .7;\n    }\n    return sum;\n}\n\nvec3 chromatic(vec2 uv, float offset) {\n    float r = fbm(uv + vec2(offset * 0.02, 0.0));\n    float g = fbm(uv);\n    float b = fbm(uv - vec2(offset * 0.02, 0.0));\n    return vec3(r, g, b);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float t = TIME * 0.5;\n    \n    vec2 distort = vec2(\n        fbm(uv * 3.0 + t * 0.2),\n        fbm(uv * 2.0 - t * 0.3)\n    ) * 0.1;\n    \n    vec2 distort2 = vec2(\n        fbm(uv * .0 - t * 0.4 + distort.x),\n        fbm(uv * 3.0 + t * 0.5 + distort.y)\n    ) * 0.08;\n    \n    vec2 distortedUV = uv + distort + distort2;\n    \n    float staticNoise = rand(uv + t * 0.1) * 0.15;\n    \n    float n1 = fbm(distortedUV * 2.0 + t * 0.3);\n    float n2 = fbm(distortedUV * 4.0 - t * 0.4);\n    float n3 = fbm(distortedUV * 6.0 + t * 0.5);\n    \n    float finalNoise = n1 * 0.6 + n2 * 0.3 + n3 * 0.3;\n    \n    \n    vec3 chromaticNoise = chromatic(distortedUV * 2.0 + t * 0.3, finalNoise);\n    \n    \n    vec3 bgColor = vec3(0.1, 0.12, 0.2);      // Deeper blue base\n    vec3 midColor = vec3(0.25, 0.22, 0.35);    // Purple mid-tones\n    vec3 highlightColor = vec3(0.45, 0.4, 0.5); // Lavender highlights\n    vec3 accentColor = vec3(0.5, 0.3, 0.4);     // Deep red accent\n    \n    vec2 pixelUV = floor(uv * iResolution.xy / 3.0) * 3.0 / iResolution.xy;\n    float pixelNoise = fbm(pixelUV * 15.0 + t) * 1.5;\n    \n    \n    vec2 moonPos = vec2(0.7 + sin(t * 0.3) * 0.02, 0.7 + cos(t * 0.2) * 0.02);\n    float moon = smoothstep(0.15, 0.0, length(distortedUV - moonPos));\n    \n    vec3 color = mix(bgColor, midColor, finalNoise);\n    color = mix(color, highlightColor, pixelNoise * 0.5);\n\n\n    float iridescence = fbm(distortedUV * 4.0 - t * 0.2) * 0.15;\n    color += accentColor * iridescence;\n    \n    color += staticNoise;\n    \n    vec3 moonColor = vec3(0.9, 0.85, 0.9); // Slight purple tint\n    float moonMask = moon * (1.0 - length(distort * 3.0));\n    color = mix(color, moonColor, moonMask * 0.4);\n    \n    float vignette = length(uv - 0.5);\n    color *= 1.0 - vignette * 0.7;\n\n    float scanline = sin(distortedUV.y * iResolution.y * 0.5) * 0.02;\n    color += scanline;\n\n    float interference = sin(distortedUV.y * 100.0 + t * 5.0) * 0.02;\n    color += interference * (rand(vec2(t)) * 0.5 + 0.5) * (1.0 - finalNoise * 0.5);\n\n    color += (chromaticNoise - 0.5) * 0.1 * (1.0 - length(color));\n\n    float darkNoise = rand(distortedUV * 2.0 + t) * 0.08 * (1.0 - length(color));\n    color += darkNoise;\n    \n    float depthDarkness = smoothstep(0.2, 0.8, uv.y);\n    color *= mix(0.7, 1.0, depthDarkness);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}