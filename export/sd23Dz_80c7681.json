{"ver":"0.1","info":{"id":"sd23Dz","date":"1617616913","viewed":70,"name":"Raytracing test1","username":"Haper","description":"Raytracing test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytraing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI\t(3.14159265359)\n#define PIH (1.57079632679)\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float k=1.0/1.5;\n    vec4 s=vec4(-4.0,2.0,5.0,1.5);\n    vec3 p1=vec3(26.0,5.0,-1.0);\n    vec3 p2=vec3(24.0,0.0,-4.0);\n    vec3 p3=vec3(30.0,-6.0,7.0);\n    vec4 s2=vec4(4.0,3.0,5.0,3.0);\n    vec3 light=vec3(-1.0,-1.0,1.0);\n    bool emis=false;\n    float l=1000000.0,L=10000000.0;\n    vec3 n;\n    \n   anB=0.0+iTime/1.7;\n   s2.z=cam.z+10.0*cos(anB);\n   s2.x=cam.x+10.0*sin(anB);\n   \n   ;\n    light = norm(light);\n    Ray ray,ray2;\n    ray.rgb=vec3(1.0,1.0,1.0);\n    dist=iResolution.x/2.0;\n    xy=fragCoord;\n    \n    ray.v=vec3(xy.x-iResolution.x/2.0,xy.y-iResolution.y/2.0,dist);\n    ray.v=norm(ray.v);\n    ray2=ray;\n    ray.v.y=ray2.v.y*cos(anA)+ray2.v.z*sin(anA);\n    ray.v.z=-ray2.v.y*sin(anA)+ray2.v.z*cos(anA);\n    ray.v=norm(ray.v);\n \n    ray2=ray;\n    ray.v.x=ray2.v.x*cos(anB)+ray2.v.z*sin(anB);\n    ray.v.z=-ray2.v.x*sin(anB)+ray2.v.z*cos(anB);\n    ray.v=norm(ray.v);\n    ray2=ray;\n    cord = cam;\n    for(int i=0; i<7;i++)\n    {\n        l=100000.0;\n        L=100000.0;\n        point=cord;\n        //ray2=ray;\n        \n        \n        l=spheretrig(cord, ray.v, s.xyz,s.w);\n        if(l>0.0 && l<L)\n        {\n            emis=false;\n            L=l;\n            ray2=ray;\n            \n            point=cord+ray2.v*l;\n            n=s.xyz-point;\n            n=norm(n);\n            point-=n*0.01;\n            ray2.v=reflect(ray2.v, n);\n            ray2.rgb=vec3(ray2.rgb.r*0.9,ray2.rgb.g*0.1,ray2.rgb.b*0.1);\n            \n            ray2.rgb=ray2.rgb*float(!(i==6));\n        }\n        \n        l=spheretrig(cord, ray.v, s2.xyz,s2.w);\n        if(l>0.0 && l<L)\n        {\n            emis=false;\n            L=l;\n            ray2=ray;\n\n            point=cord+ray2.v*l;\n    \n            n=s2.xyz-point;\n            n=norm(n);\n            point-=n*0.001;\n            ray2.v=reflect(ray2.v, n);\n           \n\n           ray2.v=norm(ray2.v);\n           if(i==6)\n           ray2.rgb*=0.0;\n        }\n        l=triangletrig(p1,p2,p3,cord,ray.v).x;\n        if(l>0.0 && l<L)\n        {\n            emis=false;\n            L=l;\n            ray2=ray;\n  \n            point=cord+ray2.v*l;\n            n=triangletrig(p1,p2,p3,cord,ray.v).yzw;\n            n=norm(n);\n            point+=n*0.001;\n            ray2.rgb=vec3(ray2.rgb.r*0.35,ray2.rgb.g,ray2.rgb.b*0.35);\n            ray2.v=reflect(ray2.v,n);\n            ray2.v=norm(ray2.v);\n        }\n        \n        ray2.v=norm(ray2.v);\n        cord=point;\n        ray=ray2;\n\n    }\n         vec4 g = texture(iChannel0, ray2.v);\n         ray2.rgb = vec3(g.r*ray2.rgb.r,g.g*ray2.rgb.g,g.b*ray2.rgb.b)*float(L>=100000.0 && !emis)+\n         ray2.rgb*float(!(L>=100000.0 && !emis));\n    fragColor = vec4(ray2.rgb,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nfloat dist,l;\nvec3 cord,point;\nvec4 nois;\nvec3 bright = vec3(1.0,1.0,1.0);\nvec3 cam =vec3(4.0,3.0,-3.0);\nvec3 cam2;\nvec2 xy;\nfloat anA=0.0,anB=0.0;\nstruct Ray{\nvec3 v;\nvec3 rgb;\n};\nvec3 norm(vec3 a) \n{\n    float l=sqrt(a.x*a.x+a.y*a.y+a.z*a.z);\n    a/=l;\n    return a;\n}\nfloat comp(vec3 a, vec3 b)\n{\n     return a.x*b.x+a.y*b.y+a.z*b.z;\n}\nfloat flortrig(Ray ray,vec3 pos)\n{\n    float l=-pos.y/ray.v.y;\n    if(l<=50.0)\n    return l;\n    else\n    return -1.0;\n}\nfloat wallx(Ray ray,vec3 pos)\n{\n    float l=(20.0-pos.x)/ray.v.x;\n    if(l<=100.0)\n    return l;\n    else\n    return -1.0;\n}\nfloat spheretrig(vec3 ray_pos, vec3 ray_dir, vec3 spos, float r)\n{\n   //a == 1; // because rdir must be normalized\n\n  vec3 k = ray_pos - spos;\n\n  float b = dot(k,ray_dir);\n\n  float c = dot(k,k) - r*r;\n\n  float d = b*b - c;\n\n \n\n  if(d >=0.0)\n\n  {\n\n    float sqrtfd = sqrt(d);\n\n    // t, a == 1\n\n    float t1 = -b + sqrtfd;\n\n    float t2 = -b - sqrtfd;\n\n \n\n    float min_t  = min(t1,t2);\n\n    float max_t = max(t1,t2);\n\n \n\n    float t = (min_t >= 0.0) ? min_t : max_t;\n    return t;\n    };\n    return -1.0;\n}\nvec3 ref(vec3 v1, vec3 n, float n1, float n2) \n{\n    vec3 v2=v1+(sqrt((n2*n2-n1*n1)/(dot(v1,n)*dot(v1,n))+1.0)-1.0)*dot(v1,n)*n;\n    return v2;\n} \nfloat len(vec3 p1,vec3 p2)\n{\n    return sqrt((p1.x-p2.x)*(p1.x-p2.x)+(p1.y-p2.y)*(p1.y-p2.y)+(p1.z-p2.z)*(p1.z-p2.z));\n}\nfloat S(vec3 p1,vec3 p2,vec3 p3)\n{\n     float a=len(p1,p2);\n     float b=len(p2,p3);\n     float c=len(p1,p3);\n     float p=(a+b+c)/2.0;\n     \n     return sqrt(p*(p-a)*(p-b)*(p-c));\n}\nvec4 triangletrig(vec3 p1,vec3 p2,vec3 p3,vec3 pos,vec3 ray)\n{\n    vec3 N;\n    vec3 v1=p2-p1;\n    vec3 v2=p3-p2;\n    float A, B, C, D;\n    N.x=v1.y*v2.z-v1.z*v2.y;\n    N.y=v1.z*v2.x-v1.x*v2.z;\n    N.z=v1.x*v2.y-v1.y*v2.x;\n    N=norm(N);\n    \n    A=N.x;\n    B=N.y;\n    C=N.z;\n    D=-(A*p1.x+B*p1.y+C*p1.z);\n    if(A*ray.x+B*ray.y+C*ray.z==0.0)\n    return vec4(-1.0, 0.0,0.0,0.0);\n    \n   \n    l=-(D+A*pos.x+B*pos.y+C*pos.z)/(A*ray.x+B*ray.y+C*ray.z);\n\n    if(l<=0.0)\n    return vec4(l,0.0,0.0,0.0);\n    \n    vec3 p = pos+ray*l;\n    \n    vec3 MA = p - p1; \n    vec3 MB = p - p2;\n    vec3 MC = p - p3;\n    N=norm(N);\n    float k = dot(N, cross(MA,MB));\n    float m = dot(N, cross(MB,MC));\n    float n = dot(N, cross(MC,MA));\n    bool ism=false;\n    \n    ism=(k<0.0);\n    \n    l=-1.0*float(!((ism && k<0.0 && m<0.0 && n<0.0)||(!ism && k>=0.0 && m>=0.0 && n>=0.0)))+\n    l*float((ism && k<0.0 && m<0.0 && n<0.0)||(!ism && k>=0.0 && m>=0.0 && n>=0.0));\n    return vec4(l,A,B,C);\n}\n","name":"Common","description":"","type":"common"}]}