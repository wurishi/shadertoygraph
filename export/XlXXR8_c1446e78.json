{"ver":"0.1","info":{"id":"XlXXR8","date":"1434252646","viewed":253,"name":"DrawTriangle","username":"dustinbiser","description":"triangle","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n\nbool isInTriangle(vec2 v1, vec2 v2, vec2 v3, vec2 uv) {\n    // CCW direction vectors along triangle edges.\n    vec2 v21 = v2 - v1;\n    vec2 v32 = v3 - v2;\n    vec2 v13 = v1 - v3;\n    \n    // Normals point inward from triangle edges.  Just rotate triangle edges\n    // 90 degrees CCW.\n    vec2 n21 = vec2(-v21.y, v21.x);\n    vec2 n32 = vec2(-v32.y, v32.x);\n    vec2 n13 = vec2(-v13.y, v13.x);\n    \n    return (dot(v1-uv,n21) < 0.0 ) && \n           (dot(v2-uv,n32) < 0.0 ) && \n           (dot(v3-uv, n13) < 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n    \n    if (isInTriangle(vec2(0.4,0.4), vec2(0.6,0.4), vec2(0.5,0.7), uv) ) {\n    \tfragColor = vec4(0.2, 0.55, 0.6, 0.0);\n    }\n    else {\n        fragColor = vec4(0.1, 0.1, 0.1, 0.0);\n    }\n    \n    \n}","name":"","description":"","type":"image"}]}