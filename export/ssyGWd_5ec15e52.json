{"ver":"0.1","info":{"id":"ssyGWd","date":"1632397114","viewed":101,"name":"代码理解注释","username":"tangyuan","description":"copy from https://www.shadertoy.com/view/3d3yWl","likes":2,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n//A procedural sun flare\n//Made using code from lots of places\n//Noise borrowed from IQ: https://www.shadertoy.com/view/Msf3WH\n//Polar UV function borrowed from here:https://www.shadertoy.com/view/3tXXz8\n//Glowing Spot borrowed from here: https://github.com/cgvirus/Natron-Lens-Flare-Studio/blob/master/GLSL_Lense_Flare_Elements/sun.frag.glsl\n\n\n#define TileU 1.0f\n#define TileV 2.0f\n#define M_PI 3.141592\n\n float globalSize = 1.0; // Global Scale, min=0., max=100.\n float globalRotate= 0.0; // Global Rotation, min=0., max=360.\n float evolution= 1.0; // Evolution, min=1.0, max=360.\n\n//parametres\n float coresize = 3.; // Sun Core Size , min=0., max=100.\n float rotation = 8.0; // Rotation , min=0.,max=360.\n vec3 SunColor = vec3(0.3,0.25,0.45); // Sun Color\n\n\n//Procedural Sun Generation\nfloat sun(vec2 uv, vec2 pos, float size)\n{\n    float rot = radians(rotation+globalRotate)*evolution;\n    //旋转矩阵\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n    //旋转\n    uv  = m*uv;\n    pos = m*pos;\n    \n    //每个屏幕点到指定位置的向量\n    vec2 vector = uv-pos;\n\t\n    //当前向量与水平的夹角\n\tfloat angle = atan(vector.y, vector.x);\n    //距离pos的长度\n\tfloat dist=length(vector);\n\t\n\tfloat f0 = 1.0/(dist*(1.0/size*100.)/(coresize*globalSize));\n\t\n    \n    return f0+f0;\n}\n\n//转极坐标系坐标\nvec2 polarCoordinates(vec2 uv) {\n //到画布中心的向量\n\tvec2 delta = uv - vec2(0.5f);\n    //到中心的距离\n\tfloat radius = length(delta);\n    //角度，并转换到弧度值\n\tfloat angle = atan(delta.y, delta.x) / 2.0f / M_PI;\n\n    radius *= TileU;\n    angle *= TileV;\n    \n    //极坐标\n    vec2 polarUV = vec2(radius, angle);\n    //为什么往uv偏移一点？0.01是magic number？\n    polarUV = mix(polarUV, uv, 0.01);\n\treturn polarUV;\t\t\n}\n\n//获取一个 -1 - 1之间的数\nvec2 hash( vec2 p ) // replace this by something better\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n//噪声，具体每个数字以及运算原理不详\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 0 - 1\n    vec2 p = fragCoord.xy / iResolution.xy;\n    //鼠标位置转换为 三个分量都改到 -0.5 - 0.5\n\tvec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5,iMouse.z-.5);\n    \n    //如果没点击，就把鼠标位置归零\n    if(mouse.z < 1.0){\n      mouse.x = 0.0;  \n      mouse.y = 0.0;         \n    }\n    \n    //跟随整个坐标系的变化\n\tmouse.x *= iResolution.x/iResolution.y; //fix aspect ratio    \n    \n    //使用uv的时候不因为屏幕宽比拉伸\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n    uv.x -= 0.4;\n    uv -= mouse.xy;\n    uv = polarCoordinates(uv);\n    uv.y *= 2.0;\n    uv.x *= 0.1;\n    \n\t\n\tfloat f = 0.0;\n\t\n\n\t\tuv *= 5.0;\n        mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.2500*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n\t\tf += 0.0625*noise( uv ); uv = m*uv;\n\n\n\tf = 0.5 + 0.5*f;\n    \n\tvec2 st = fragCoord.xy / iResolution.xy - 0.5;\n\tst.x *= iResolution.x/iResolution.y; //fix aspect ratio\n\tfloat c = sun(st,mouse.xy,1.);\n    \n    f*=c;\n    f+=c;\n    \n    vec3 col = vec3(f);\n    col *= SunColor;\t\n\tfragColor = vec4(col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}