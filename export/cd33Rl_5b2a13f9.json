{"ver":"0.1","info":{"id":"cd33Rl","date":"1677658685","viewed":78,"name":"Astroid field surfing","username":"Leo3065","description":"Surfing through the Astroid field.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"dsc3zn","parentname":"Astroid field raymarching"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    vec2 uv_s;\n    vec3 col = vec3(0);\n    float samp = 0.;\n    \n    for(int y=-1; y<=1; y++){\n        for(int x=-1; x<=1; x++){\n            uv_s = (fragCoord + vec2(x, y))/iResolution.xy;\n            col += texture(iChannel0, uv_s).rgb;\n            samp += 1.;\n        }\n    }\n    col /= samp;\n    \n    vec3 col_trail = texture(iChannel1, uv_s).rgb;\n    col = max(pow3(col, .7), col_trail);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159;\nconst float TAU = PI*2.;\nconst vec3 VX = vec3(1,0,0);\nconst vec3 VY = vec3(0,1,0);\nconst vec3 VZ = vec3(0,0,1);\n\nmat3 rot_x(float theta){\n    return mat3(\n        1, 0, 0,\n        0, cos(theta), sin(theta),\n        0, -sin(theta), cos(theta)\n    );\n}\n\nmat3 rot_y(float theta){\n    return mat3(\n        cos(theta), 0, sin(theta),\n        0, 1, 0,\n        -sin(theta), 0, cos(theta)\n    );\n}\n\nmat3 rot_z(float theta){\n    return mat3(\n        cos(theta), sin(theta), 0, \n        -sin(theta), cos(theta), 0,\n        0, 0, 1\n    );\n}\n\nvec3 pow3(vec3 val, float expo){\n    return vec3(pow(val.x, expo), pow(val.y, expo), pow(val.y, expo));\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float distField(vec3 pos){\n    vec3 center = pos - mod(pos+4., 8.) - 4.;\n    vec3 offset = 2.*sin(center * center * vec3(22.7, 38.1, 56.7));\n    float size = 1.5 + .5*cos(dot(sin(center), vec3(2.27, 3.81, 5.67)));\n    float speed = 1. + .5*cos(dot(sin(center.yzx), vec3(2.27, 3.81, 5.67)));\n    float rho_pre = mod(dot(sin(center.zxy), vec3(2.27, 3.81, 5.67)), TAU);\n    float theta_pre = mod(dot(sin(center), vec3(2.27, 3.81, 5.67).yzx), TAU);\n    \n    float theta = .2 * PI + iTime * .227 * PI * speed;\n    pos = mod(pos+4., 8.) - 4.;\n    \n    pos -= offset;\n    pos *= rot_z(theta_pre);\n    pos *= rot_z(rho_pre);\n    pos *= rot_y(theta);\n    pos *= rot_z(-rho_pre);\n    pos *= rot_z(-theta_pre);\n    \n    return (\n        pow(abs(pos.x), 2./3.) + \n        pow(abs(pos.y), 2./3.) + \n        pow(abs(pos.z), 2./3.) - \n        pow(size, 2./3.))*.2;\n}\n\nvec3 distFieldNormal(vec3 pos){\n    float eps = 1e-3;\n    float dfx = distField(pos + eps*VX) - distField(pos - eps*VX);\n    float dfy = distField(pos + eps*VY) - distField(pos - eps*VY);\n    float dfz = distField(pos + eps*VZ) - distField(pos - eps*VZ);\n    return normalize(vec3(dfx, dfy, dfz));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    vec3 pos_offs = vec3(4,0,0);\n    vec3 dir_offs = vec3(0,-1,0);\n    pos_offs *= rot_z(iTime * .5);\n    dir_offs *= rot_z(iTime * .5);\n    \n    vec3 pos = vec3(0, 0, -5.67*iTime) + pos_offs;\n    vec3 light = vec3(.5, 1, 2) + pos;\n    vec3 dir = normalize(\n        vec3(uv.x*.7, uv.y*.7 - .2, -1) + dir_offs*.2);\n    \n    float d_step = 0.;\n    float d_dist = 0.;\n    \n    for(int i=0; i<96; i++){\n        d_step = distField (pos);\n        if(d_step < 0.){\n            break;\n        }\n        pos += dir*d_step;\n        d_dist += d_step;\n    }\n    \n    vec3 normal = distFieldNormal(pos);\n    \n    float hit_q = 1.-smoothstep(0., 0.01, d_step);\n    float base_n = dot(normalize(light-pos), normal);\n    float base_d = 1. / pow(1.05, d_dist);\n    vec3 base_col = vec3(.8 + .1*sin(dot(pos, vec3(2.27, 3.81, 5.67)))) + .1 * sin(pos);\n\n    vec3 col = base_col * (hit_q*base_n*base_d);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv_s;\n    vec3 col = vec3(0);\n    float samp = 0.;\n    \n    for(int y=-5; y<=5; y++){\n        for(int x=-5; x<=5; x++){\n            uv_s = (fragCoord + vec2(x, y))/iResolution.xy;\n            col += texture(iChannel0, uv_s).rgb;\n            samp += 1.;\n        }\n    }\n    col /= samp;\n    \n    uv_s = fragCoord/iResolution.xy;\n    vec3 prev_col = texture(iChannel1, uv_s).rgb;\n    \n    col = max(col, prev_col*.97);\n    \n    fragColor = vec4(col, 1);\n}","name":"Buffer B","description":"","type":"buffer"}]}