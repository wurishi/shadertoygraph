{"ver":"0.1","info":{"id":"DtjBRK","date":"1694240064","viewed":23,"name":"morango com banana v2","username":"davidmachadosf","description":"second test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math","teste"],"hasliked":0,"parentid":"mlGXDV","parentname":"Morango com Banana"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(.998, 0.658, 0.718);\n    vec3 b = vec3(.051, 0.453, 5.050);\n    vec3 c = vec3(-0.352, 2.361, -0.764);\n    vec3 d = vec3(-0.503, 50.503, -1.113);\n\n    return a + b*cos( 7.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    float zoom = 1.0 + 0.5 * sin(0.2 * iTime);\n    uv /= zoom;\n    float cameraRotation = 0.2 * iTime;\n    float cs = cos(cameraRotation);\n    float sn = sin(cameraRotation);\n    uv = mat2(cs, -sn, sn, cs) * uv;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    for (float i = 0.0; i < 5.0; i++) {\n        float angle = 7.0 * 3.14159 * (i / 7.);\n        float s = sin(angle);\n        float c = cos(angle);\n        mat2 m = mat2(c, -s * 1.5, s * 0.5, c);\n        uv = m * uv;\n        uv = fract(uv * 1.5) - 0.5;\n        float d = length(uv) * exp(-length(uv0));\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.2);\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n        d = pow(0.01 / d, 1.2);\n        finalColor += col * d;\n    }  \n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}