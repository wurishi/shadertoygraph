{"ver":"0.1","info":{"id":"wdsyRn","date":"1595439545","viewed":89,"name":"Gyroids Ashes and Flames","username":"deliaev","description":"Made by following this tutorial https://www.youtube.com/watch?v=-FvnsYbzpfc","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","gyroids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"RayMarching starting point\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n\tp *= scale;\n    return abs(dot(sin(p), cos(p.zxy))+bias)/scale - thickness;\n}\nvec3 Transform(vec3 p) {\n    p.xy *= Rot(p.z*.15);\n    p.z -= iTime*.1;\n    p.y += .3;\n    return p;\n}\n\nfloat GetDist(vec3 p) {\n    p = Transform(p);\n    float box = sdBox(p, vec3(1));\n    \n    float g1 = sdGyroid(p, 5.45, .03, 1.5);\n    float g2 = sdGyroid(p, 10.212, .03, .3);\n    float g3 = sdGyroid(p, 21.512, .03, .3);\n    float g4 = sdGyroid(p, 34.23, .03, .3);\n    float g5 = sdGyroid(p, 60.67, .029, .3);\n    float g6 = sdGyroid(p, 122.12, .03, .3);\n    float g7 = sdGyroid(p, 250.17, .028, .3);\n    \n    //float g = min(g1, g2); //union\n    //float g = max(g1, -g2); //subtraction\n    \n    g1 -= g2*.2;\n    g1 -= g3*.2;\n    g1 += g4*.12;\n    g1 += g5*.15;\n    g1 -= g6*.18;\n    g1 += g7*.2;\n    float d = g1*.8;\n    //float d = max(box, g1*.8);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.016, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 Background(vec3 rd) {\n \tvec3 col = vec3(0);\n    float t = iTime;\n    float y = rd.y*.5+.5;\n    col += (1.-y)*vec3(1.,.4,.1)*2.;\n    \n    float a = atan(rd.x, rd.z);\n    float flames = sin(a*10.+t)*sin(a*7.-t)*sin(a*6.);\n    flames *= S(.8, .5, y);\n    col += flames;\n    col = max(col, 0.);\n    col += S(.5, 0., y);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime;\n    vec3 col = vec3(0);\n    \n    uv += sin(uv*20.+t)*.005;\n    \n    vec3 ro = vec3(0, 0, -.05);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 lookat = vec3(0);\n    vec3 rd = GetRayDir(uv, ro, lookat, .8);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n        float height = p.y;\n        p = Transform(p);\n    \tfloat dif = n.y*.5+.5;\n    \tcol += dif*dif;\n        \n        float g2 = sdGyroid(p, 10.212, .03, .3);\n        col *= S(-.1, .06, g2);\n        \n        float crackWidth = -.02+S(0., -.5, n.y)*.05;\n        float cracks = S(crackWidth, -.03, g2);\n        float g3 = sdGyroid(p+t*.1, 5.76, .03, .0);\n        float g4 = sdGyroid(p-t*.05, 8.7, .03, .0);\n        cracks *= g3*g4*40.+.1*S(.2, .0, n.y);\n        col += cracks*vec3(1.,.4,.1)*3.;\n        float g5 = sdGyroid(p-vec3(0,t,0), 3.87, .03, .0);\n        \n        col += g5 * vec3(1.,.4,.1);\n        \n        col += S(0., -2., height)*vec3(1.,.4,.1);\n    }\n    col = mix(col, Background(rd), S(0., 7., d));\n    //col = pow(col, vec3(.4545));\t// gamma correction\n    \n    col *= 1.-dot(uv, uv);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}