{"ver":"0.1","info":{"id":"ddsyD8","date":"1686780781","viewed":360,"name":"Stars in Sphere","username":"kaiavintr","description":"Inspired by the prop in the film The Double Life of Veronique, but not trying to recreate it. (In the film it's a rubber \"bouncy ball\" with very different stars.)","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","reflection","refraction","sphere","dof","glass","stars","hdr","metal","environment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Copyright (C) 2023 Kaia Vintr\n    \n    Code is licensed only for personal, non-commercial use on the Shadertoy\n    website. You may not copy all or any part of the code into another Shadertoy\n    shader. You may not distribute or use all or any part of the code outside of\n    the Shadertoy website, even if the code is accessed via the Shadertoy API or\n    web server. You may not use the code or its output to train or fine-tune\n    machine learning models (e.g. \"AI\" models). You may not use the code to\n    create image or video content for publication or distribution, except\n    screenshots or brief video clips of the output of the unmodified code to be\n    used strictly in a manner that would be permitted as \"fair use\" under U.S.\n    copyright law (for example, you may not use the code to create NFTs or\n    YouTube videos). If any provision of these license terms is held to be\n    invalid or unenforceable, that provision shall be limited to the minimum\n    extent necessary, and the remaining provisions shall remain in full effect.\n    \n    Please contact the copyright holder with questions or requests regarding\n    licensing, via @KaiaVintr on Twitter or via a comment on this shader.\n    \n    Code is archived at:\n    https://github.com/kaiavintr/shadertoy_experiments/tree/main/StarsInSphere\n    \n*/\n\n// 0 means only the stars move, 1 means the camera moves too\n#define CAMERA_MOVEMENT 1\n\n// 0 is dense crown glass, 1 is dense flint glass. \n#define GLASS_TYPE 0\n\n// Options are SILVER, ALUMINIUM, BRASS, GOLD, COPPER\n#define METAL1 SILVER\n#define METAL2 BRASS\n\n// Set this to zero to disable blurring of stars\n// Maximum usable value is probably about 0.05\n#define APERTURE 0.01\n\n// Note: center of sphere is at distance 10, radius is 2\n#define FOCUS_DISTANCE 9.\n\n#define STAR_ROTATION_SPEED 1.1\n#define STAR_ROTATION_MOD_FREQ 1.5\n#define STAR_ROTATION_MOD_AMP 0.1\n\n\n// 1 / tan(0.5*vertical_fov)\n#define VIEW_ANGLE_FACTOR 1.78\n\n\n\nconst float PI = 3.14159265358979;\n\n// coefficients are low-order to high-order\n#define CUBIC(t, C0, C1, C2, C3) (C0 + (C1 + (C2 + C3*t)*t)*t)\n\n\n#if GLASS_TYPE == 0 // Dense crown glass\n    #define IOR 1.6204\n    \n    #define IR_COEFF1 -5.32686\n    #define IR_COEFF2 13.851\n    #define IR_COEFF3 -19.60328\n    #define IR_COEFF4 14.28787\n    #define IR_COEFF5 -4.15328\n#else // Dense flint glass\n    #define IOR 1.7847\n\n    #define IR_COEFF1 -5.25124\n    #define IR_COEFF2 13.941096\n    #define IR_COEFF3 -20.13787\n    #define IR_COEFF4 14.90942\n    #define IR_COEFF5 -4.38189\n#endif\n\nconst float R_IOR = 1./IOR;\n\n#define STAR_COUNT 12\n\n#define FINITE_DIFF 0.05\n\n#define STAR_HALF_THICKNESS 0.01\n\n#define STAR_SCALE 0.25\nconst float R_STAR_SCALE = 1./STAR_SCALE;\n\n// bounding sphere size for stars\nconst float STAR_BOUND_SQ = 1.05*(STAR_SCALE*STAR_SCALE + STAR_HALF_THICKNESS*STAR_HALF_THICKNESS) + 5.*APERTURE*APERTURE;\n\n#define SILVER mat4x3(0.98345342, 0.97955436, 0.96785675, 0.016546578, 0.020445636, 0.032143254, 0.7114094, -0.33577663, -0.059021692, 1.2781946, 2.0013827, 0.28772421)\n#define ALUMINIUM mat4x3(0.85955022, 0.87184934, 0.88205429, 0.14044978, 0.12815066, 0.11794571, 9.1062354, 6.2619574, 3.2733062, -9.8957725, -5.9793913, -2.047134)\n#define BRASS mat4x3(0.86485908, 0.71160054, 0.32799644, 0.13514092, 0.28839946, 0.67200356, 0.012866858, 0.55057254, 1.4513979, 2.1267212, -0.45629851, -2.2503158)\n#define GOLD mat4x3(1.0388934, 0.70926538, 0.22166548, -0.038893405, 0.29073462, 0.77833452, 5.9958276, 0.95721721, 1.4887837, -14.103257, -1.6779897, -1.9847984)\n#define COPPER mat4x3(0.9898792, 0.55627181, 0.42305413, 0.010120799, 0.44372819, 0.57694587, -16.140318, 0.97461025, 1.2376468, 29.292263, -0.99201393, -1.4491398)\n\n// color for contribution of rays that are not traced (> 2 bounces inside sphere)\n#define RESIDUAL_COLOR vec3(0.325, 0.3, 0.3)\n\nconst vec3 EXTRA_LIGHT_COLOR = vec3(0.9, 0.9, 1);\nconst vec3 EXTRA_LIGHT_DIR = normalize(vec3(1, 3, -2));\n\n#define ENV_LOD_STARS 3.\n#define EXTRA_LIGHT_BLUR_STARS 0.085\n\n\n#define SPHERE_CENTER_Z 10.\n#define SPHERE_RADIUS 2.\n\nconst float SPHERE_2D_RADIUS = SPHERE_RADIUS * sqrt(1. / (SPHERE_CENTER_Z*SPHERE_CENTER_Z - SPHERE_RADIUS*SPHERE_RADIUS));\n\nvec3 SRGB_TO_LINEAR(vec3 C) {\n    return ((0.30530*C + 0.68217)*C + 0.012523)*C;\n}\n\nvec3 LINEAR_TO_SRGB(vec3 C) {\n    return mix(12.92*C, 1.055*pow(C, vec3(1./2.4)) - 0.055, step(0.0031308, C));\n}\n\n// uses object space coordinates - ray origin is (0,0,-SPHERE_CENTER_Z), and sphere center is 0\nvec3 intersect_sphere_outside(vec3 V) {\n    float a = SPHERE_CENTER_Z * V.z;\n    \n    float t = a - sqrt(max(0., a*a - (SPHERE_CENTER_Z*SPHERE_CENTER_Z - SPHERE_RADIUS*SPHERE_RADIUS)));\n    \n    return t*V - vec3(0,0,SPHERE_CENTER_Z);\n}\n\nfloat intersect_sphere_outside_dist(vec3 V) {\n    float a = SPHERE_CENTER_Z * V.z;\n    \n    return a - sqrt(max(0., a*a - (SPHERE_CENTER_Z*SPHERE_CENTER_Z - SPHERE_RADIUS*SPHERE_RADIUS)));\n}\n\n// uses object space coordinates and arbitrary ray origin\nvec3 intersect_sphere_inside(vec3 P, vec3 V) {\n    float a = dot(V, P);\n    \n    float t = sqrt(max(0., a*a - dot(P, P) + SPHERE_RADIUS*SPHERE_RADIUS)) - a;\n    \n    return P + t*V;\n}\n\nfloat intersect_sphere_inside_dist(vec3 P, vec3 V) {\n    float a = dot(V, P);\n    \n    return sqrt(max(0., a*a - dot(P, P) + SPHERE_RADIUS*SPHERE_RADIUS)) - a;\n}\n\n\n// object space coordinates, arbitrary ray origin and radius**2\nbool sphere_intersection_test(vec3 P, vec3 V, float r2) {\n    float a = dot(V, P);\n    \n    return a*a + r2 > dot(P, P);\n}\n\n// returns distance warped by local linear transformation\nfloat sdf_rectangle(vec2 p, vec2 wh, mat2x2 J) {\n    vec2 g = abs(p) - wh;\n    \n    float d;\n    vec2 grad;\n\n    if (g.x > 0. && g.y > 0.) {\n        d = length(g);\n        grad = d == 0. ? step(wh.yx, wh.xy) : normalize(g);\n    } else {\n        grad = vec2(1) - step(g.xy, g.yx);\n        grad += (1.-grad.x-grad.y)*vec2(1, 0);\n\n        d = dot(grad, g);\n    }\n\n    return d * (FINITE_DIFF*STAR_SCALE / length(grad*sign(p)*J));\n}\n\nfloat sdf_five_pointed_star(vec2 p, out vec2 grad) {\n    // Use symmetry of the star to divide number of cases by 10.\n    // Reflections/rotations are accumulated in a matrix so inverse\n    //   transformation can be applied to the gradient.\n    \n    mat2 m;\n    float sx = sign(p.x);\n\n    p.x = abs(p.x);\n\n    const vec2 dir1 = vec2(0.30901699, -0.95105652);\n\n    float t = dot(p, dir1);\n    \n    if (t > 0.) {\n        m = mat2( (1. - 2.*dir1.x*dir1.x)*sx, -2.*dir1.x*dir1.y*sx,\n            -2.*dir1.x*dir1.y,  1. - 2.*dir1.y*dir1.y );\n        p -= t*(2.*dir1);\n    } else {\n        m = mat2(sx, 0, 0, 1);\n    }\n\n    const vec2 dir2 = vec2(0.80901699, -0.58778525);\n\n    t = dot(p, dir2);\n    \n    if (t > 0.) {\n        m = mat2( 1. - 2.*dir2.x*dir2.x, -2.*dir2.x*dir2.y,\n                  -2.*dir2.x*dir2.y,  1. - 2.*dir2.y*dir2.y\n                ) * m;\n        p -= t*(2.*dir2);\n    }\n    \n    if (p.x < 0.) {\n        p.x = -p.x;\n        \n        m[0][0] *= -1.;\n        m[1][0] *= -1.;\n    }\n    \n    float d;\n    vec2 g;\n\n    p.y -= 1.;\n    \n    t = dot(p, dir1);\n    \n    if (t <= 0. || t >= 0.72654253) {\n        g = t >= 0.72654253 ? (vec2(0.22451399, 0.30901699 - 1.) - p) : p;\n        \n        float s = 1. / length(g);\n        \n        g *= s;\n        d = -sign(t) / s;\n    } else {\n        g = vec2(0.95105652, 0.30901699);\n        \n        d = dot(p, g);\n    }\n\n    grad = g*m;\n\n    return d;\n}\n\n// First three \"columns\" (they look like rows due to GLSL order) are the tangent space basis vectors and normal.\n// xy in last column gives offset of star's center in tangent space coordinates.\n// z in last column gives offset of plane along the normal vector (the \"D\" coefficient in the plane equation).\nconst mat4x3 STARS[STAR_COUNT] = mat4x3[STAR_COUNT](\n    mat4x3(\n        0.0747976264, -0.4432925061, -0.8932508434,\n        0.4215545650, -0.7977277940, 0.4311868684,\n        -0.9037129322, -0.4088057250, 0.1272038341,\n        -0.4636508376, -0.7654421872, 0.8456977434\n    ),\n    mat4x3(\n        0.1790759708, 0.4357879753, -0.8820547814,\n        -0.9804421624, 0.0046517838, -0.1967524515,\n        -0.0816392243, 0.9000373334, 0.4280979275,\n        -0.6719893608, -0.5175045296, -0.4731132150\n    ),\n    mat4x3(\n        0.9697109375, 0.1645909032, 0.1804730789,\n        0.1946901810, -0.9670274597, -0.1641755937,\n        0.1475006138, 0.1943392053, -0.9697813373,\n        0.7037491881, -0.3275285124, 0.8318283940\n    ),\n    mat4x3(\n        -0.3697212759, 0.1692339841, -0.9136005893,\n        0.5608725239, 0.8245672100, -0.0742356253,\n        0.7407618983, -0.5398599585, -0.3997787328,\n        -0.5305283634, 0.5790930253, 0.8505740099\n    ),\n    mat4x3(\n        -0.8550630110, 0.1092595458, 0.5068822337,\n        0.1847844916, -0.8491610533, 0.4947526627,\n        0.4844811027, 0.5167086773, 0.7058967375,\n        -1.0333914250, 0.0500283917, -0.3733988204\n    ),\n    mat4x3(\n        0.2505587094, -0.5297768348, -0.8102819500,\n        0.1821140353, -0.7962447661, 0.5769131222,\n        -0.9508179696, -0.2921143230, -0.1030262638,\n        0.5734411988, -0.3517091725, 1.0495497625\n    ),\n    mat4x3(\n        -0.8966523048, 0.3897169637, 0.2100841081,\n        -0.4362233556, -0.8587535806, -0.2687963389,\n        0.0756559870, -0.3326604514, 0.9400070190,\n        0.4468056904, -0.8759400460, 0.6265304320\n    ),\n    mat4x3(\n        0.3995004344, -0.2737086627, 0.8749188367,\n        0.3777527250, -0.8204446695, -0.4291543115,\n        0.8352857485, 0.5019503086, -0.2243738087,\n        0.0155802972, -0.2372086799, 0.2590125724\n    ),\n    mat4x3(\n        0.7047288583, 0.6885660900, -0.1709794605,\n        -0.2234384839, -0.0133286170, -0.9746268988,\n        -0.6733739527, 0.7250510931, 0.1444591022,\n        0.2146140387, 1.1332494812, -0.0141624732\n    ),\n    mat4x3(\n        -0.9792978716, -0.1947197345, -0.0553163970,\n        0.1982234336, -0.9778575026, -0.0670982490,\n        -0.0410262006, -0.0766741786, 0.9962117853,\n        0.3145082210, 0.1407346730, 1.2011874963\n    ),\n    mat4x3(\n        0.1503253522, 0.0860645358, -0.9848833353,\n        -0.8244477075, -0.5388712000, -0.1729271737,\n        -0.5456081617, 0.8379801462, -0.0100502937,\n        0.4901633781, -0.8108669729, 0.7456087551\n    ),\n    mat4x3(\n        0.5563685684, 0.6248822169, 0.5477008592,\n        0.7957638943, -0.5904317243, -0.1347226914,\n        0.2391941486, 0.5107960395, -0.8257563595,\n        -0.5911739375, 0.0630130729, -0.8339310871\n    )\n);\n\nfloat distance_to_plane(vec3 start, vec3 N, float dotVN, float offset) {\n    return (-offset - dot(N, start))/dotVN;\n}\n\nvec3 get_env_texture(vec3 V, float lod) {\n    return SRGB_TO_LINEAR(textureLod(iChannel0, V, lod).rgb);\n}\n\nfloat SR(float c, float r, float t) {\n    return smoothstep(c-r, c+r, t);\n}\n\nvec3 get_env_extra_light(vec3 V, float r) {\n    if (V.y < 0.) return vec3(0);\n    \n    r /= V.y;\n    \n    float mask;\n    \n    {\n        vec2 p = V.zx / V.y;\n    \n        {\n            vec2 d = vec2(0.06, -1.75) - p;\n            p += 0.25*d * smoothstep(-0.04 ,0., -dot(d, d));\n        }\n\n        float x_left = -0.2845 - 0.0075*p.y;\n        \n        float f_left = SR(x_left, r, p.x);\n        \n        float f_split_y = SR(-2.45, 2.*r + 0.1, p.y);\n\n        float x_right = 0.28 - 0.005*p.y;\n\n        mask = (f_left - SR(x_right, r, p.x)) * (f_split_y - SR(2.04, 2.*r, p.y));\n        \n        float x_left2 = -0.01132 - 0.014*p.y;\n        float x_right2 = -0.029 - 0.0775*p.y;\n        \n        float r4 = r+0.02;\n        float f_inner_x = SR(x_left2, r4, p.x);\n\n        mask -= (f_inner_x - SR(x_right2, r4, p.x)) * (f_split_y - SR(-1.38, r + 0.05, p.y));\n\n        mask += (f_left - f_inner_x) * (SR(-2.7, 2.*r + 1., p.y) - f_split_y);\n    }\n    \n    if (mask < 0.001) {\n        return vec3(0);\n    } else {\n        float m = dot(V, EXTRA_LIGHT_DIR);\n        float m2 = m*m;\n\n        return mask * (m + (4. + 8.*m2)*m2)*(0.25*EXTRA_LIGHT_COLOR);\n    }\n}\n\nvec3 get_env(vec3 V, float lod_texture, float extra_light_blur) {\n    return get_env_texture(V, lod_texture) + get_env_extra_light(V, extra_light_blur);\n}\n\nfloat fresnel_approx(float cos_t) {\n    float x = clamp(cos_t, 0., 0.95);\n\n    return 1. + (IR_COEFF1 + (IR_COEFF2 + (IR_COEFF3 + (IR_COEFF4 + IR_COEFF5*x)*x)*x)*x)*x;\n}\n\nvec3 metallic_fresnel_approx(float cos_t, mat4x3 F) {\n    float x = 1. - clamp(cos_t * 1.21406875, 0., 1.);\n\n    float x2 = x*x;\n    \n    return F[0] + F[1]*x2*(1. + F[2]*(x2 - 1.) + F[3]*(x - 1.));\n}\n\nvec4 get_env_refract(vec3 N, vec3 V, float lod_texture, float extra_light_blur) {\n    vec3 R = refract(V, -N, IOR);\n\n    return (1. - fresnel_approx(dot(N, R))) * vec4(get_env(R, lod_texture, extra_light_blur), 1.);\n}\n\nvec3 env_map_inside_sphere(vec3 color, vec3 N_surf, vec3 P, vec3 V, mat3 envMat) {\n    V = envMat * V;\n    P = envMat * P;\n\n    vec3 P_back1 = intersect_sphere_inside(P, V);\n    vec3 N_back1 = normalize(P_back1);\n    \n    float alpha = 1.;\n    \n    {\n        float dotNV = dot(N_back1, V);\n        float k = (1. - IOR*IOR) + IOR*IOR * (dotNV*dotNV);\n        \n        if (k < 0.) {\n            // When total internal reflection happens, the light ray tends to go \n            //   all the way around the sphere and bounce off the same surface again\n            //   (based on experiments with the pbrt renderer).\n            // Maybe in reality the effects of scattering and imperfections in the surface\n            //   would dominate, but I think modeling that would require experimental\n            //   measurements of an actual glass sphere.\n            \n            // Choose a new, arbitrary but plausible, direction for the ray.\n            V = reflect(V, envMat * N_surf);\n            P_back1 = intersect_sphere_inside(P, V);\n            N_back1 = normalize(P_back1);\n            \n            alpha = smoothstep(0., 0.1, -k);\n            \n            // Color (e.g. for brass material) is more saturated because it bounces off\n            //   the same surface twice. Blend between normal and saturated color to avoid\n            //   a distracting edge.\n            color = mix(color, color*color, alpha);\n        } else {\n            alpha = smoothstep(0., 0.1, k);\n        }\n    }\n\n    vec3 refl_back1 = reflect(V, -N_back1);\n\n    vec3 P_back2 = intersect_sphere_inside(P_back1, refl_back1);\n    vec3 N_back2 = normalize(P_back2);\n    \n    vec4 c = get_env_refract(N_back1, V, ENV_LOD_STARS, EXTRA_LIGHT_BLUR_STARS);\n    \n    c += (1. - c.a) * get_env_refract(N_back2, refl_back1, ENV_LOD_STARS, EXTRA_LIGHT_BLUR_STARS);\n\n    // Fade the environment map to constant vec3(0.5) near the line where total internal\n    //   reflection starts, to avoid aliasing artifacts.\n    // Also use the same constant vec3(0.5) to fill in any light that is missing due to not\n    //   tracing more bounces.\n    // Multiply the result by the reflection color (i.e. Fresnel coefficient).\n    \n    return (alpha*c.rgb + (1. - alpha*c.a)*vec3(0.5)) * color;\n}\n\nvec4 render_stars(vec3 V0, mat3 camera_rotate, float object_rotate_angle,\n                  float attenuation, float attenuation_for_reflection, out vec4 color_direct) {\n    vec3 V = normalize(V0);\n    \n    // view rays for finite difference approximations of derivatives w.r.t. screen x and y\n    vec3 Vdx = normalize(V0 + vec3(FINITE_DIFF, 0, 0));\n    vec3 Vdy = normalize(V0 + vec3(0, FINITE_DIFF, 0));\n    \n    float base_distance = intersect_sphere_outside_dist(V);\n     \n    vec3 P = base_distance*V - vec3(0,0,SPHERE_CENTER_Z);\n    \n    vec3 Pdx = intersect_sphere_outside(Vdx);\n    vec3 Pdy = intersect_sphere_outside(Vdy);\n\n    mat3 object_rotate;\n    \n    {\n        float sin_xz2 = sin(object_rotate_angle);\n        float cos_xz2 = cos(object_rotate_angle);\n\n        object_rotate = mat3(\n            cos_xz2, 0, -sin_xz2,\n            0, 1, 0,\n            sin_xz2, 0, cos_xz2\n        );\n    }\n    \n    {\n        mat3 combined_rotate = camera_rotate * object_rotate;\n        \n        P *= combined_rotate;\n        Pdx *= combined_rotate;\n        Pdy *= combined_rotate;\n        \n        V *= combined_rotate;\n        Vdx *= combined_rotate;\n        Vdy *= combined_rotate;\n    }\n    \n    V = refract(V, normalize(P), R_IOR);\n    Vdx = refract(Vdx, normalize(Pdx), R_IOR);\n    Vdy = refract(Vdy, normalize(Pdy), R_IOR);\n    \n    float scaled_aperture = APERTURE * iResolution.y;\n\n    // Cheap order-independent transparency\n    vec4 color = vec4(0);\n    float prev_dist = 1e10;\n    \n    int i_offset = 0;\n    int itr_end = 2*STAR_COUNT + min(0, iFrame);\n    \n    // Loop through the stars twice\n    // first time is for the refracted image, second for the image reflected from the back of the sphere\n    for (int i = 0; i < itr_end; i++) {\n        if (i == STAR_COUNT) {\n            // return color and opacity of image of stars refracted through front of sphere\n            color_direct = color;\n            \n            // set up variables for computing reflection in back of sphere\n            \n            i_offset = -STAR_COUNT;\n            \n            color = vec4(0);\n            prev_dist = 1e10;\n            \n            attenuation = attenuation_for_reflection;\n            \n            float t = intersect_sphere_inside_dist(P, V);\n            \n            base_distance += t;\n            \n            P += t*V;\n            \n            V = reflect(V, -normalize(P));\n\n            Pdx = intersect_sphere_inside(Pdx, Vdx);\n            Vdx = reflect(Vdx, -normalize(Pdx));\n\n            Pdy = intersect_sphere_inside(Pdy, Vdy);\n            Vdy = reflect(Vdy, -normalize(Pdy));\n        }\n        \n        // Get all of the vectors defining the star position and orientation\n        //   (not really used as a matrix)\n        mat4x3 star = STARS[i + i_offset];\n        \n        // Center of star (also center of bounding sphere)\n        vec3 Cp = -star[3].x*star[0] - star[3].y*star[1] - star[3].z*star[2];\n        \n        // Ray origin in coordinates relative to center\n        vec3 edge_P = P - Cp;\n        \n        // Test intersection with bounding sphere\n        if (sphere_intersection_test(edge_P, V, STAR_BOUND_SQ)) {\n            // Color and opacity of two nearest star edge intersections\n            vec4 c_edge1 = vec4(0), c_edge2 = vec4(0);\n            float edge_dist1 = 1e20, edge_dist2 = 1e20;\n\n            // Skip for reflected image because edges won't be very visible\n            if (i < STAR_COUNT) {\n                // Cycle through the five planes for the star edges.\n                // Nxy holds 2D angle for edge.\n                vec2 Nxy = vec2(0, 1);\n                \n                for (int j = 0; j < 5; j++) {\n                    vec3 N = Nxy.x*star[0] + Nxy.y*star[1];\n                    \n                    float dotVN = dot(N, V);\n\n                    // Ignore if edge faces away or is nearly perpendicular to view ray\n                    if (dotVN < -0.01) {\n                        float t = distance_to_plane(edge_P, N, dotVN, -0.30901699 * STAR_SCALE);\n                        \n                        // Get the other tangent space basis vector for the edge (star face normal vector is in star[2])\n                        vec3 U1 = cross(star[2], N);\n                        vec3 tV = t*V;\n                        \n                        vec2 uv_raw = (edge_P + tV) * mat2x3(U1, star[2]);\n                        \n                        vec2 uv = R_STAR_SCALE*uv_raw;\n\n                        if (length(uv) < 1.5) {\n                            float mask;\n                        \n                            {\n                                mat2x2 J;\n                                \n                                {\n                                    vec3 edge_P_dx = Pdx - Cp;\n                                    vec3 edge_P_dy = Pdy - Cp;\n                                    mat2x3 M = mat2x3(U1, star[2]);\n\n                                    J = mat2x2(\n                                        (edge_P_dx + distance_to_plane(edge_P_dx, N, dot(Vdx, N), -0.30901699 * STAR_SCALE) * Vdx) * M - uv_raw,\n                                        (edge_P_dy + distance_to_plane(edge_P_dy, N, dot(Vdy, N), -0.30901699 * STAR_SCALE) * Vdy) * M - uv_raw);\n                                }\n                                \n                                // Note: Need to compensate for the fact that the Jacobian hasn't been scaled properly,\n                                //   by multiplying distance by FINITE_DIFF*STAR_SCALE\n\n                                float d = sdf_rectangle(uv - sign(uv.x)*vec2(0.58778525, 0), vec2(0.95105652-0.58778525, STAR_HALF_THICKNESS), J);\n                                float d_cross = 2.*STAR_HALF_THICKNESS * (FINITE_DIFF*STAR_SCALE) / length(vec2(0,1)*J);\n                                \n                                float a;\n                                \n                                {\n                                    float s = base_distance + t;\n                                    \n                                    a = scaled_aperture * abs(s - FOCUS_DISTANCE) / s;\n                                    \n                                    a = sqrt(1. + a*a);\n                                }\n                                \n                                // Fade out when V is nearly parallel to plane, because then the screen distance\n                                //   approximation is very poor.\n\n                                mask = (smoothstep(-a, a, d + d_cross) - smoothstep(-a, a, d)) * smoothstep(0.01, 0.1, -dotVN);\n                            }\n                            \n                            if (mask > 0.005) {\n                                vec4 c = mask * vec4(\n                                        clamp(\n                                            attenuation * env_map_inside_sphere(\n                                                metallic_fresnel_approx(-dotVN, (i&1)==0 ? METAL1 : METAL2),\n                                                N, P + tV, V - 2.*dotVN * N /*reflect*/, object_rotate\n                                            ),\n                                            0., 1.\n                                        ),\n                                        1.\n                                        );\n                                \n                                if (t < edge_dist1) {\n                                    c_edge2 = c_edge1;\n                                    c_edge1 = c;\n                                    edge_dist2 = edge_dist1;\n                                    edge_dist1 = t;\n                                } else if (t < edge_dist2) {\n                                    c_edge2 = c;\n                                    edge_dist2 = t;\n                                }\n                            }\n                        }\n                    }\n\n                    if (j < 4) {\n                        // Rotate the 2D vector for the edge direction\n                        Nxy = mat2(0.30901699, -0.95105652, 0.95105652, 0.30901699) * Nxy;\n                    }\n                }\n            }\n            \n            // intersect ray with either face of the star\n            {\n                float dotVN = dot(V, star[2]);\n                \n                float offset = star[3].z + sign(dotVN)*(STAR_HALF_THICKNESS*STAR_SCALE);\n                \n                float t = distance_to_plane(P, star[2], dotVN, offset);\n\n                vec3 P_inter = P + t*V;\n\n                vec2 uv_raw = P_inter*mat2x3(star);\n                \n                vec2 uv = R_STAR_SCALE*(uv_raw + star[3].xy);\n\n                float r = length(uv);\n\n                if (r < 1.5 || c_edge1.a > 0.01) {\n                    float mask;\n                    \n                    {\n                        vec2 grad;\n                        float d = sdf_five_pointed_star(uv, grad);\n\n                        vec2 uv_dx = (Pdx + Vdx*distance_to_plane(Pdx, star[2], dot(Vdx, star[2]), offset))*mat2x3(star);\n                        vec2 uv_dy = (Pdy + Vdy*distance_to_plane(Pdy, star[2], dot(Vdy, star[2]), offset))*mat2x3(star);\n                        \n                        float a;\n                        \n                        {\n                            float s = base_distance + t;\n                                \n                            a = scaled_aperture * abs(s - FOCUS_DISTANCE) / s;\n                                \n                            a = sqrt(1. + a*a);\n                        }\n                        \n                        mask = smoothstep(-a, a, \n                                d * -FINITE_DIFF*STAR_SCALE / length(grad*mat2x2(uv_dx - uv_raw, uv_dy - uv_raw)))\n                            * smoothstep(0., 0.15, abs(dotVN) * (1.5 - r));\n                    }\n                    \n                    if (mask > 0.005 || c_edge1.a > 0.005) {\n                        vec3 N;\n                        \n                        {\n                            float s = sign(dotVN);\n                            \n                            // flip N if dot(V, N) is positive, so N points towards viewer\n                            N = -s*star[2];\n                            \n                            // want dotVN = -dot(V, N) = abs(dot(V, N)) for Fresnel approximation\n                            dotVN = abs(dotVN);\n                        }\n\n                        vec4 c = mask * vec4(\n                                    clamp(\n                                        attenuation * env_map_inside_sphere(\n                                            metallic_fresnel_approx(dotVN, ((i + i_offset) & 1)==0 ? METAL1 : METAL2),\n                                            N, P_inter,\n                                            V + 2.*dotVN * N /* reflect, taking into account fact that dotVN = -dot(V, N) */,\n                                            object_rotate\n                                        ),\n                                        0., 1.\n                                    ),\n                                1.);\n                        \n                        // Composite face with edge(s), using fancy blending to avoid gap\n                        if (c_edge1.a > 0.005 && c.a < 0.995) {\n                            if (c_edge1.a + c.a <= 1.005) {\n                                c += c_edge1;\n                            } else {\n                                c.rgb += (1. - c.a) / c_edge1.a * c_edge1.rgb;\n                                c.a = 1.;\n                            }\n                            \n                            c += (1. - c.a) * c_edge2;\n                        }\n\n                        c_edge1.a = 0.;\n\n                        if (t < prev_dist) {\n                            color = c + (1. - c.a)*color;\n                            prev_dist = t;\n                        } else {\n                            color = color + (1. - color.a)*c;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // return color&opacity of reflection of stars in back of sphere\n    return color; \n}\n\nvec3 get_reflected_ray(vec3 V) {\n    return reflect(V, normalize(intersect_sphere_outside(V)));\n}\n\nvec3 get_refracted_ray(vec3 V1) {\n    vec3 P1 = intersect_sphere_outside(V1);\n    \n    vec3 V2 = refract(V1, normalize(P1), R_IOR);\n\n    return refract(V2, -normalize(intersect_sphere_inside(P1, V2)), IOR);\n}\n\n// Deliberately bad hash function that turns an integer into a vec3\n// Based on Gray codes\n// Intent is to mix up the size of the jumps between steps.\nvec3 rand_vec3(int t) {\n    ivec3 iv;\n    \n    iv.x = t ^ (t >> 1);\n    \n    t += 17;\n     \n    iv.y = t ^ (t >> 1);\n    \n    t += 5;\n     \n    iv.z = t ^ (t >> 1);\n    \n    vec3 v = vec3(iv&0x3)/1.5 - 1.;\n    \n    v += 0.15*(vec3((iv>>2)&0x3)/1.5 - 1.);\n    \n    return v;\n}\n\nvoid get_scene_rotation(out mat3 camera_rotate, out float object_rotate_angle, out float brightness_scale) {\n    \n    // Fix mouse position if user hasn't clicked the mouse yet or resolution has changed since mouse button was pressed\n    vec2 mouse = iMouse.x == 0. && iMouse.y == 0. || iMouse.x > iResolution.x || iMouse.y > iResolution.y ? 0.5*iResolution.xy : iMouse.xy;\n    \n    // Convert mouse coordinates to (-1, 1)\n    vec2 mouse_scaled = 2.0 * (mouse.xy / iResolution.xy - 0.5);\n    \n    // Turn mouse coordinates into angle\n    float xz_angle1 = -PI * mouse_scaled.x;\n    float yz_angle1 = -0.5*PI * mouse_scaled.y;\n    \n    float sin_xz1 = sin(xz_angle1);\n    float cos_xz1 = cos(xz_angle1);\n\n    float sin_yz1 = sin(yz_angle1);\n    float cos_yz1 = cos(yz_angle1);\n    \n    // Get rotation angle for stars (one axis only)\n    object_rotate_angle = STAR_ROTATION_SPEED*iTime + STAR_ROTATION_MOD_AMP*cos(STAR_ROTATION_MOD_FREQ*iTime + 0.8) + PI * mouse_scaled.x - xz_angle1;\n\n    camera_rotate = mat3(\n        1, 0, 0,\n        0., cos_yz1, -sin_yz1,\n        0., sin_yz1, cos_yz1\n    ) * mat3(\n        cos_xz1, 0, -sin_xz1,\n        0, 1, 0,\n        sin_xz1, 0, cos_xz1\n    );\n\n    #if CAMERA_MOVEMENT\n    {\n        float t = 610. + iTime;\n        int t1 = int(floor(t*0.07));\n        float f1 = fract(t*0.07);\n        float b1 = smoothstep(0.,1.,0.5*sin(PI*(f1-0.5))+0.5);\n\n        int t2 = int(floor(t*0.019)) + 37;\n        float f2 = fract(t*0.019);\n        float b2 = 0.5*sin(PI*(f2-0.5))+0.5;\n\n        vec3 forward1 = normalize(mix(normalize(rand_vec3(t1)), normalize(rand_vec3((t1 + 1))), b1));\n        vec3 forward2 = normalize(mix(normalize(rand_vec3(t2)), normalize(rand_vec3((t2 + 1))), b2));\n        \n        vec3 forward = normalize(forward1 + forward2) * camera_rotate;\n\n        vec3 up = normalize(vec3(0,1,0) - forward.y*forward);\n        vec3 right = cross(up, forward);\n\n        camera_rotate = transpose(mat3(\n            right,\n            up,\n            forward\n        ));\n        \n        brightness_scale = 1. - 0.5*max(0., forward.y);\n    }\n    #else\n    brightness_scale = 1. - 0.5*max(0., -mouse_scaled.y);\n    #endif\n}\n\nfloat get_extra_light_radius(vec3 pix, vec3 V, mat3 camera) {\n    float rsqrt = 1. / sqrt(dot(pix.xy, pix.xy) + pix.z*pix.z);\n    \n    float ry = 1. / V.y;\n\n    return length(vec4(camera[0].zx - ry * camera[0].y * V.zx,\n                  camera[1].zx - ry * camera[1].y * V.zx)) * rsqrt;\n}\n\nvec3 sample_edge_reflect(int max_count, float scale, float distance_2d, vec3 U, vec3 V, float color_scale, float texture_lod, float extra_light_blur) {\n    float kernel_size = 3. * scale;\n    \n    float b_center = distance_2d * scale;\n    \n    float mint = b_center - 0.5*kernel_size;\n    float maxt = b_center + 0.5*kernel_size;\n    \n    int count = max_count + min(0, iFrame) - 1;\n    \n    if (maxt > 0.9999995) {\n        maxt = 0.9999995;\n        count += 1;\n    }\n    \n    float b_inc = 1. / float(max_count) * (maxt-mint);\n    float b = b_inc + mint;\n    float r_kernel_size = 1. / kernel_size;\n    float u = (b - b_center) * r_kernel_size + 0.5;\n    float u_inc = b_inc * r_kernel_size;\n\n    float total_w = 0.;\n    vec3 c = vec3(0);\n    \n    for (int i = 0; i < count; i++) {\n        float p = 2.*b*b - 1.;\n        float q = sqrt(1. - p*p);\n        \n        vec3 R = p*V - q*U;\n        \n        float w = u - u*u;\n        \n        // clamp values before computing weighted sum, to reduce aliasing artifacts.\n        c += w * clamp(color_scale*(get_env_texture(R, texture_lod) + get_env_extra_light(R, extra_light_blur)), 0., 1.);\n        total_w += w;\n        \n        b += b_inc;\n        u += u_inc;\n    }\n    \n    return 1. / total_w * c;\n}\n\nvec3 sample_edge_refract(int max_count, float scale, float distance_2d, vec3 U, vec3 V, float color_scale, float texture_lod, float extra_light_blur) {\n    float kernel_size = 3. * scale;\n    \n    float b_center = distance_2d * scale;\n    \n    float mint = b_center - 0.5*kernel_size;\n    float maxt = b_center + 0.5*kernel_size;\n    \n    int count = max_count + min(0, iFrame) - 1;\n    \n    if (maxt > 0.9999995) {\n        maxt = 0.9999995;\n        count += 1;\n    }\n    \n    float b_inc = 1. / float(max_count) * (maxt-mint);\n    float b = b_inc + mint;\n    float r_kernel_size = 1. / kernel_size;\n    float u = (b - b_center) * r_kernel_size + 0.5;\n    float u_inc = b_inc * r_kernel_size;\n\n    float total_w = 0.;\n    vec3 c = vec3(0);\n    \n    for (int i = 0; i < count; i++) {\n        float b2 = b*b;\n        float a = sqrt(1. - b2);\n        \n        float refract_q = R_IOR * (-a + sqrt(IOR*IOR - b2));\n        float refract_a = R_IOR + a*refract_q;\n        float refract_b = b*refract_q;\n        \n        float k = -2. * (a*R_IOR + refract_q);\n        float back_a = -k*refract_a - a;\n        float back_b = -k*refract_b - b;\n        \n        float rotateC = -a*back_a - b*back_b;\n        float rotateS = sqrt(1. - rotateC*rotateC);\n        \n        float d = 2. * (rotateS*back_a - rotateC*back_b);\n        \n        vec3 R = (-rotateC - d*back_b)*V + (-rotateS + d*back_a)*U;\n        \n        float w = u - u*u;\n\n        // clamp values before computing weighted sum, to reduce aliasing artifacts.\n        c += w * clamp(color_scale*(get_env_texture(R, texture_lod) + get_env_extra_light(R, extra_light_blur)), 0., 1.);\n        total_w += w;\n        \n        b += b_inc;\n        u += u_inc;\n    }\n    \n    return 1. / total_w * c;\n}\n\n// Function for computing LOD (before log2) for rays represented in a 2D basis, using\n//      finite differences for the radial derivative.\nfloat compute_lod(float a, float a_fd, float b, float b_fd, float V_z, float U_z, float angle) {\n    float da = a_fd - a, db = b_fd - b, z = a*V_z + b*U_z;\n    \n    return max((da*da + db*db) / (FINITE_DIFF*FINITE_DIFF), angle*angle*(1. - z*z));\n}\n\nvoid compute_2d_refraction(float a, float b, out float refract_a, out float refract_b, out float rotateC, out float rotateS) {\n    float q = R_IOR*(-a + sqrt(IOR*IOR - b*b));\n    \n    float internal_a = R_IOR + a*q;\n    float internal_b = b*q;\n    \n    float k = -2.*(a*R_IOR + q);\n    \n    float back_a = -k*internal_a - a;\n    float back_b = -k*internal_b - b;\n    \n    rotateC = -a*back_a - b*back_b;\n    rotateS = sqrt(1. - rotateC*rotateC);\n    \n    float d = 2.*(rotateS*back_a - rotateC*back_b);\n    \n    refract_a = -rotateC - d*back_b;\n    refract_b = -rotateS + d*back_a;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    mat3 camera_rotate;\n    float object_rotate_angle;\n    float brightness_scale; // used for very basic tone-mapping\n\n    get_scene_rotation(camera_rotate, object_rotate_angle, brightness_scale);\n    \n    float SPHERE_2D_RADIUS_PIXELS = SPHERE_2D_RADIUS * VIEW_ANGLE_FACTOR * iResolution.y;\n    \n    vec2 pix2d = fragCoord.xy - 0.5*iResolution.xy;\n    float unnormalized_z = VIEW_ANGLE_FACTOR*iResolution.y;\n    \n    float distance_2d = length(pix2d);\n   \n    float distance_from_edge_2d = SPHERE_2D_RADIUS_PIXELS - distance_2d;\n\n    float coverage = smoothstep(-0.75, 0.75, distance_from_edge_2d);\n    \n    vec3 color;\n    \n    // Get the background color first (needed at the edges of the sphere, due to anti-aliasing)\n    //   to help reduce maximum register usage (camera_rotate matrix can then be discarded while rendering the stars).\n    if (coverage < 1.) {\n        vec3 V1 = normalize(vec3(pix2d, unnormalized_z)) * camera_rotate;\n        \n        vec3 c = get_env(V1, 0., get_extra_light_radius(vec3(pix2d, unnormalized_z), V1, transpose(camera_rotate)) + 0.02);\n        \n        color = (1. - coverage) * clamp(brightness_scale*c, 0., 1.);\n    } else {\n        color = vec3(0);\n    }\n\n    if (coverage > 0.001) {\n        float reflectance;\n        vec3 color_reflect_back, color_refract;\n        \n        {\n            float basis_scale = 1. / length(vec3(pix2d, unnormalized_z));\n            \n            vec3 basis_V = basis_scale * vec3(pix2d, unnormalized_z);\n            \n            vec3 basis_U = normalize(vec3(0,0,SPHERE_CENTER_Z) - basis_V.z*SPHERE_CENTER_Z*basis_V);\n            \n            basis_scale *= SPHERE_CENTER_Z / SPHERE_RADIUS;\n            \n            float b = basis_scale * (distance_2d + (coverage >= 0.995 ? 0. : CUBIC(distance_from_edge_2d, -0.27758603, 0.56839415, -0.1731804, -0.1215896)));\n            float a = sqrt(1. - b*b);\n            \n            // All rays reflected or refracted in the sphere are co-planar\n            // Can now represent any of those rays as a linear combination of the view ray V and another vector U.\n            // i.e. can use 2D geometry for all computations.\n            // In this basis, the normal vector for first point of intersection is (-b, -a)\n            \n            // Sorry about the weird data flow here...\n            // I had trouble getting it to run at full speed on integrated graphics, and had to do everything possible to\n            //   limit data dependencies that might increase register usage.\n\n            float extra_light_blur_base, basis_V_z, basis_U_z;\n            \n            {\n                // Compute approximate level of detail for the environment map texture, for reflected ray.\n                // Want the magnitude of gradient of the reflected ray w.r.t. screen x and y\n                // Doing this in two parts, a radial part (which will be high towards the edge) and a\n                //      tangent part (which will not vary as much).\n                // For this computation, need the z part of the V and U vectors before rotation by the camera matrix.\n                \n                float lod_reflect;\n                \n                {\n                    float lod_radial = 2.*basis_scale / a;\n                    \n                    float p = b*b - a*a;\n                    float q = 2.*a*b;\n                    \n                    float z = p*basis_V.z - q*basis_U.z;\n                    float angle = 1. / distance_2d;\n                    float lod_tangent = angle*sqrt(1. - z*z);\n                    \n                    lod_reflect = log2(max(lod_radial, lod_tangent)) + 8.;\n                }\n                \n                basis_V_z = basis_V.z;\n                basis_U_z = basis_U.z;\n                \n                basis_V = basis_V * camera_rotate;\n                basis_U = basis_U * camera_rotate;\n                \n                // \"a\" turns out to contain the dot product we need for the Fresnel coefficient computation\n                reflectance = fresnel_approx(a);\n                \n                // Compute a good base value for the blur distance for the extra \"HDR\" light\n                extra_light_blur_base = 0.03 * max(450. / iResolution.y, 1.);\n                \n                // Use heuristic to decide how many samples to take of reflected rays (higher at edge of sphere).\n                \n                float d = distance_2d / SPHERE_2D_RADIUS_PIXELS;\n                \n                d = d*d;\n                \n                int max_count = 1 + int(clamp(ceil(5.*d), 1., 5.));\n                \n                float m = brightness_scale*reflectance;\n\n                color += coverage * sample_edge_reflect(max_count, basis_scale, distance_2d, basis_U, basis_V, m, \n                    lod_reflect - 2.5 * d,\n                    extra_light_blur_base);\n            }\n            \n            float refract2_a, refract2_b, lod_refract;\n            \n            {\n                float rotateC, rotateS;\n                \n                compute_2d_refraction(a, b, refract2_a, refract2_b, rotateC, rotateS);\n                \n                // Using finite differences instead of derivatives to compute radial LOD for refracted rays, because it's cheaper.\n                // (only need one extra sample since we're working in 2D)\n\n                float rotateC_fd, rotateS_fd, refract2_a_fd, refract2_b_fd;\n                \n                {\n                    float b_fd = b + basis_scale * FINITE_DIFF;\n                    float a_fd = sqrt(1. - b_fd*b_fd);\n                    \n                    compute_2d_refraction(a_fd, b_fd, refract2_a_fd, refract2_b_fd, rotateC_fd, rotateS_fd);\n                }\n                \n                lod_refract = compute_lod(refract2_a, refract2_a_fd, refract2_b, refract2_b_fd, basis_V_z, basis_U_z, 1. / distance_2d);\n                \n                // Get the second and third refracted rays out of the way before sampling the first refracted ray\n                //      (hopefully this reduces maximum register count).\n                {\n                    float refract3_a = rotateC*refract2_a - rotateS*refract2_b;\n                    float refract3_b = rotateS*refract2_a + rotateC*refract2_b;\n                    float lod_refract3;\n                    \n                    {\n                        float lod_refract4, refract4_a, refract4_b;\n                        \n                        {\n                            float refract3_a_fd = rotateC_fd*refract2_a_fd - rotateS_fd*refract2_b_fd;\n                            float refract3_b_fd = rotateS_fd*refract2_a_fd + rotateC_fd*refract2_b_fd;\n                        \n                            lod_refract3 = compute_lod(refract3_a, refract3_a_fd, refract3_b, refract3_b_fd, basis_V_z, basis_U_z, 1. / distance_2d);\n                            \n                            refract4_a = rotateC*refract3_a - rotateS*refract3_b;\n                            refract4_b = rotateS*refract3_a + rotateC*refract3_b;\n\n                            float refract4_a_fd = rotateC_fd*refract3_a_fd - rotateS_fd*refract3_b_fd;\n                            float refract4_b_fd = rotateS_fd*refract3_a_fd + rotateC_fd*refract3_b_fd;\n                            \n                            lod_refract4 = compute_lod(refract4_a, refract4_a_fd, refract4_b, refract4_b_fd, basis_V_z, basis_U_z, 1. / distance_2d);\n                        }\n                        \n                        {\n                            vec3 R = refract4_a*basis_V + refract4_b*basis_U;\n                            \n                            color_reflect_back = reflectance * (get_env_texture(R, 0.5*log2(lod_refract4) + 8.) + get_env_extra_light(R, sqrt(lod_refract4 + extra_light_blur_base*extra_light_blur_base)));\n                        }\n                    }\n                    \n                    {\n                        vec3 R = refract3_a*basis_V + refract3_b*basis_U;\n                        \n                        color_reflect_back += (1. - reflectance) * (get_env_texture(R, 0.5*log2(lod_refract3) + 8.) + get_env_extra_light(R, sqrt(lod_refract3 + extra_light_blur_base*extra_light_blur_base)));\n                    }\n                }\n            }\n        \n            // Sample the refracted ray, using more samples towards the edge.\n            {\n                float lod = 0.5*log2(lod_refract) + 8.;\n                float lod_extra = sqrt(lod_refract + extra_light_blur_base*extra_light_blur_base);\n                \n                float d = distance_2d / SPHERE_2D_RADIUS_PIXELS;\n                \n                d = d*d;\n                \n                int max_count = 1 + int(clamp(ceil(5.*d), 1., 5.));\n                \n                float m = brightness_scale * (1. - reflectance);\n\n                color_refract = sample_edge_refract(max_count, basis_scale, distance_2d, basis_U, basis_V, m, \n                        lod - 2. * d, lod_extra / (1. + 0.5*d)\n                        );\n            }\n        }\n        \n        // Blend the reflected and refracted background images with the images of the stars.\n        // Doing this last so less data needs to be kept in registers while the stars are being rendered.\n        {\n            float transmittance = 1. - reflectance;\n            \n            float attenuation1 = brightness_scale*transmittance;\n            float attenuation2 = attenuation1*reflectance;\n                \n            color_reflect_back = clamp(attenuation2 * color_reflect_back, 0., 1.);\n            \n            vec3 V0;\n            \n            {\n                float r2 = coverage >= 0.995 ? 0. : CUBIC(distance_from_edge_2d, -0.27758603, 0.56839415, -0.1731804, -0.1215896);\n                \n                V0 = vec3((1. + r2 / distance_2d) * pix2d, unnormalized_z);\n            }\n            \n            // Get the two images of the stars (refracted image, and image reflected in back of sphere)\n            vec4 stars;\n            vec4 stars_reflection = render_stars(V0, camera_rotate, object_rotate_angle,\n                    attenuation1,\n                    attenuation2,\n                    stars);\n            \n            color += coverage * ((1. - stars.a)*(((1. - stars_reflection.a)*color_reflect_back + color_refract) + stars_reflection.rgb) + stars.rgb);\n        }\n    }\n    \n    fragColor = vec4(LINEAR_TO_SRGB(color), 1);\n}\n\n","name":"Image","description":"","type":"image"}]}