{"ver":"0.1","info":{"id":"mtjczV","date":"1692148015","viewed":107,"name":"Sketch #7: Random Rays","username":"MOONtyzoo","description":"Based on what I learned here: https://thebookofshaders.com/10/\n\nEach of the rays has a randomized pattern, speed, and color. Kind of looks like fireworks/confetti","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat random(float x)\n{\n    return fract(439029.0*sin(x));\n}\n\nfloat random(vec2 uv)\n{\n    return fract(439029.0*sin(dot(uv, vec2(85.3876, 9.38532))));\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    float angle = atan(-uv.y, -uv.x) + PI;\n    float radius = length(uv);\n    \n    /*\n        Control variables\n    */\n    float rayNum = 50.0; // Number of radial rays from center\n    float rayPadding = 1.0; // In terms of ray size (so 0.5 is half and 1.0 is equal to the size of a ray)\n    float pulseSize = 0.05;\n    float pulseSpeed = 0.7;\n    float pulseWarp = 0.3;\n    \n    /*\n        Drawing rays\n        \n        - Split space into 'rayNum' equally sized sections.\n          Each section contains a single ray and the padding around it.\n    */\n    float sectionSize = 2.0*PI/rayNum;\n    float sectionNum = floor(angle/sectionSize); // Labels each section with a number\n    float raySize = 2.0*PI/(rayNum*(1.0 + rayPadding));\n    float rayUv = mod(angle, sectionSize);\n    \n    float rays = min( pow((raySize/2.0)/abs(rayUv - sectionSize/2.0), 3.0), 1.0 );\n    \n    pulseSpeed += 2.0*random(sectionNum);\n    float pulseIndex = floor((pow(radius, pulseWarp) - 0.3*pulseSpeed*iTime)/pulseSize)*pulseSize;\n    float pulses = step(0.85, random(pulseIndex + 0.374*sectionNum));\n    \n    rays *= pulses;\n    \n    /*\n        Coloring\n    */\n    vec3 HSV;\n    HSV[0] = random(pulseIndex);\n    HSV[1] = 1.0;\n    HSV[2] = rays * min(radius*12.0, 1.0);\n    \n    fragColor = vec4(hsv2rgb(HSV), 1.0);\n}","name":"Image","description":"","type":"image"}]}