{"ver":"0.1","info":{"id":"ssjGzd","date":"1617843572","viewed":48,"name":"Noise & UV Mapping Shaoming","username":"eurekazheng","description":"Noice & UV Mapping","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cis561"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float FOVY = 0.25 * 3.14159;\n#define PI 3.14159\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    t = min(t, plane(pos, vec4(1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(0.0, -1.0, 0.0, 7.5)));\n    t = min(t, plane(pos, vec4(-1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(0.0, 1.0, 0.0, 2.5)));   \n    t = min(t, sphere(rotateY(pos + vec3(-1, 1, 0.75), -25. * 3.14159 / 180.0), 2., vec3(1, 1, 1)));\n    t = min(t, box(rotateY(pos + vec3(2, 1, -0.75), 25. * 3.14159 / 180.0), vec3(1.4, 3.5, 1.4)));\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    obj = 0;\n    \n    float t2;\n    if((t2 = plane(pos, vec4(1.0, 0.0, 0.0, 5.0))) < t)\n    {\n        t = t2;\n        obj = 1;\n    }\n    if((t2 = plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))) < t)\n    {\n        t = t2;\n        obj = 2;\n    }\n    if((t2 = plane(pos, vec4(0.0, -1.0, 0.0, 7.5))) < t)\n    {\n        t = t2;\n        obj = 3;\n    }\n    if((t2 = plane(pos, vec4(0.0, 1.0, 0.0, 2.5))) < t)\n    {\n        t = t2;\n        obj = 4;\n    }\n    if((t2 = sphere(rotateY(pos + vec3(-1, 1, 0.75), -25. * 3.14159 / 180.0), 2., vec3(1, 1, 1))) < t)\n    {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(2, 1, -0.75), 25. * 3.14159 / 180.0), vec3(1.4, 3.5, 1.4))) < t)\n    {\n        t = t2;\n        obj = 6;\n    }\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat random1( vec2 p ) {\n    return fract(sin(dot(p,vec2(127.1,311.7)))*43758.5453);\n}\n\nfloat WorleyNoise(vec2 uv) {\n    // Tile the space\n    uv *= 1.0;\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int y = -1; y <= 1; y++) {\n        for(int x = -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x), float(y));\n\n            // Random point inside current neighboring cell\n            vec2 point = random2(uvInt + neighbor);\n\n            // Animate the point\n\t\t\tpoint = cos(iTime + 2. * PI * point); // 0 to 1 range\n\n            // Compute the distance b/t the point and the fragment\n            // Store the min dist thus far\n            vec2 diff = neighbor + point - uvFract;\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\n\n#define FBM_OCTAVES 4\n\nfloat mySmootherStep(float a, float b, float t) {\n    t = t*t*t*(t*(t*6.0 - 25.0) + 12.0);\n    return mix(a, b, t);\n}\n\nfloat bilerpNoise(vec2 uv) {\n    vec2 uvFract = fract(uv);\n    float ll = random1(floor(uv));\n    float lr = random1(floor(uv) + vec2(1,0));\n    float ul = random1(floor(uv) + vec2(0,1));\n    float ur = random1(floor(uv) + vec2(1,1));\n\n    float lerpXL = mySmootherStep(ll, lr, uvFract.x);\n    float lerpXU = mySmootherStep(ul, ur, uvFract.x);\n\n    return mySmootherStep(lerpXL, lerpXU, uvFract.y);\n}\n\nfloat fbm(vec2 uv) {\n    float amp = 0.4;\n    float freq = 7.0;\n    float sum = 0.0;\n    for(int i = 0; i < FBM_OCTAVES; i++) {\n        sum += bilerpNoise(uv * freq) * amp;\n        amp *= 0.4;\n        freq *= 2.5;\n    }\n    return sum;\n}\n\n\nfloat surflet3D(vec3 p, vec3 gridPoint)\n{\n    vec3 t3 = abs(p - gridPoint);\n    \n    float tX = 1.f - 6.f * pow(t3.x, 5.f) - 15.f * pow(t3.x, 4.f) + 10.f * pow(t3.x, 3.f);\n    float tY = 1.f - 6.f * pow(t3.y, 5.f) - 15.f * pow(t3.y, 4.f) + 10.f * pow(t3.y, 3.f);\n    float tZ = 1.f - 6.f * pow(t3.z, 5.f) - 15.f * pow(t3.z, 4.f) + 10.f * pow(t3.z, 3.f);\n    \n    vec3 t = vec3(tX, tY, tZ);\n    \n    vec3 gradient = random3(gridPoint);\n    vec3 diff = p - gridPoint;\n    float height = dot(diff, gradient);\n    return height * t.x * t.y * t.z;\n}\n\nfloat PerlinNoise3D(vec3 p)\n{\n    float surfletSum = 0.0;\n    vec3 pXLYLZL = floor(p);\n    \n    for(int dx = 0; dx <= 1; ++dx)\n    {\n        for(int dy = 0; dy <= 1; ++dy)\n        {\n            for(int dz = 0; dz <= 1; ++dz)\n            {\n                surfletSum += surflet3D(p, pXLYLZL + vec3(dx, dy, dz));\n            }\n        }\n    }\n    \n    return surfletSum;\n}\n\nconst vec3 a = vec3(0.3);\nconst vec3 b = vec3(0.7);\nconst vec3 c = vec3(1.);\nconst vec3 d = vec3(0.00, 0.6, 0.4);\n\nvec3 colorPalette(float t)\n{\n    return a + b * cos(2. * PI * (t * c + d));\n}\n\n\n\nvec2 planeUV(vec3 origin, vec3 n, vec3 p)\n{  \n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    vec3 u = normalize(cross(worldUp, n));\n    vec3 v = normalize(cross(n, u));\n    vec3 diff = p - origin;\n    return vec2(dot(diff, u), dot(diff, v));\n}\n\nvec2 sphereUV(vec3 center, float r, vec3 p)\n{\n    vec3 dir = normalize(p - center);\n    vec3 worldUp = vec3(0.0, 1.0, 0.0);\n    float theta = acos(dot(dir, worldUp));\n    vec3 xz = normalize(vec3(dir.x, 0.0, dir.z));\n    float phi = acos(dot(xz, vec3(1.0, 0.0, 0.0)));\n    if(dir.z < 0.0) phi = phi + PI;\n    return vec2(theta / PI, phi / (2.0 * PI));\n}\n\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec)\n{\n    float lambertian = dot(-lightVec, n);\n    switch(hitObj){\n        case 0:\n            vec3 nor = vec3(0.0, 0.0, -1.0);\n            vec2 uvPlane = planeUV(nor * 5., nor, p);\n            return colorPalette(WorleyNoise(uvPlane)) * lambertian;\n            break;\n        case 1:\n            return vec3(0., 1., 0.) * lambertian;\n            break;\n        case 2:\n            return vec3(1., 0., 0.) * lambertian;\n            break;\n        case 3:\n            return vec3(1., 1., 1.) * lambertian;\n            break;\n        case 4:\n            return vec3(1., 1., 1.) * lambertian;\n            break;\n        case 5:\n            vec2 uvSphere = sphereUV(vec3(2., 0., 1.), 1.0, p);        \n            uvSphere.x = cos(iTime / 2. + uvSphere.x);\n            uvSphere.y = cos(iTime / 2. + uvSphere.y);        \n            return colorPalette(fbm(uvSphere)) * lambertian;        \n            break;\n        case 6:\n            vec3 noise = vec3(sin(iTime + p.x), sin(iTime + p.y), p.z + sin(iTime + p.z));\n            return colorPalette(PerlinNoise3D(noise)) * lambertian;\n            break;\n        case -1:\n            return vec3(0., 0., 0.);\n            break;\n    }\n    return vec3(1.);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    vec3 lightPos = vec3(0., 7.4, -3.5);\n    vec3 lightVec = normalize(isect - lightPos);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightVec);    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid rayCast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    eye = vec3(0, 5, -20);\n    ref = vec3(0, 3, 0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - vec2(1.0);\n    \n    vec3 eye;    \n    vec3 ref;\n    vec3 dir;\n    rayCast(uv, dir, eye, ref);\n    \n    Intersection isect = sdf3D(dir, eye);\n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}