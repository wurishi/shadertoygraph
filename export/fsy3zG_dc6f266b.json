{"ver":"0.1","info":{"id":"fsy3zG","date":"1631709952","viewed":170,"name":"Isosceles Trapezoid SDF","username":"TheTurk","description":"Distance function for an isosceles trapezoid. A slightly simpler implementation of [url]https://www.shadertoy.com/view/MlycD3[/url]. This is the basis for a truncated cone ([url]https://www.shadertoy.com/view/Nl33W8[/url]).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","distance","trapezoid","primitive","isosceles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float trapezoid(vec2 position, float halfWidth1, float halfWidth2, float halfHeight) {\n    position.x = abs(position.x);\n    position.x -= 0.5 * (halfWidth2 + halfWidth1);\n    vec2 e = vec2(0.5 * (halfWidth2 - halfWidth1), halfHeight);\n    vec2 q = position - e * clamp(dot(position, e) / dot(e, e), -1.0, 1.0);\n    float d = length(q);\n    if (q.x > 0.0) {\n        return d;\n    }\n    return max(-d, abs(position.y) - halfHeight);\n}\n\n/*\n// alternative version without branching\nfloat trapezoid(vec2 position, float halfWidth1, float halfWidth2, float halfHeight) {\n   position.x = abs(position.x);\n   vec2 d1 = vec2(max(position.x - halfWidth1, 0.0), -position.y - halfHeight);\n   vec2 d2 = vec2(max(position.x - halfWidth2, 0.0), position.y - halfHeight);\n   position -= vec2(halfWidth1, -halfHeight);\n   vec2 e = vec2(halfWidth2 - halfWidth1, 2.0 * halfHeight);\n   vec2 d3 = position - e * clamp(dot(position, e) / dot(e, e), 0.0, 1.0);\n   return sqrt(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3))) * sign(max(max(d1.y, d2.y), d3.x));\n}\n*/\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float halfWidth1 = 0.2 + 0.15 * sin(iTime * 1.3);\n    float halfWidth2 = 0.2 + 0.15 * sin(iTime * 1.4 + 1.1);\n    float halfHeight = 0.5 + 0.2 * sin(1.3 * iTime);\n    float d = trapezoid(position, halfWidth1, halfWidth2, halfHeight);\n\n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7); \n    color *= 1.0 - exp(-4.0 * abs(d)); \n\tcolor *= 0.8 + 0.2 * cos(120.0 * d); \n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = trapezoid(mousePosition, halfWidth1, halfWidth2, halfHeight);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n} ","name":"Image","description":"","type":"image"}]}