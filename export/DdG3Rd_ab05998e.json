{"ver":"0.1","info":{"id":"DdG3Rd","date":"1678913024","viewed":30,"name":"3D studies 1","username":"UriTk","description":"My first attempt at Ray Marching. Movement is determined by a BPM.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["studies"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .25\n\n#define BPM 103.\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat getBPMVis(float bpm){\n    \n    // this function can be found graphed out here :https://www.desmos.com/calculator/rx86e6ymw7\n\tfloat bps = 60./bpm; // beats per second\n\tfloat bpmVis = cos((iTime*3.14)/bps);\n\t// multiply it by PI so that tan has a regular spike every 1 instead of PI\n\t// divide by the beat per second so there are that many spikes per second\n\tbpmVis = clamp(bpmVis,0.,15.); \n\t// tan goes to infinity so lets clamp it at 10\n\t// tan goes up and down but we only want it to go up \n\t// (so it looks like a spike) so we take the absolute value\n\t// dividing by 20 makes the tan function more spiking than smoothly going \n\t// up and down, check out the desmos link to see what i mean\n\t\n\treturn bpmVis;\n}\n\n\nfloat GetDist(vec3 p){\n    vec4 sphere = vec4(0, 2, 6, 1.25);\n    float beat = getBPMVis(BPM);\n    sphere.w += sin(iTime*1.5 + beat*.5 );\n    sphere.x += sin(iTime*2. + beat*.5 );\n    float sphereD = length(p-sphere.xyz)-sphere.w;\n    \n    float planeD = p.y;\n    vec3 c1 = vec3(3, 1, 6);\n    vec3 c2 = vec3(-3, 1, 6);\n    c1.y += sin(iTime*4. + beat*.7 );\n    c2.y += cos(iTime*7. + beat*.3 );\n    float capsuled = sdCapsule(p, c1, c2, .4);\n    float cd = min(capsuled, planeD);\n    float sd = min(sphereD, planeD);\n    \n    float d = mix(sd, cd, (sin(iTime + beat*.5 )+1.)/2.);\n    return d;\n}\n\nfloat RayMarch(vec3 cam, vec3 cdir) {\n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = cam+cdir*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURFACE_DIST ) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n        \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lPos = vec3(4, 15, 6);\n    float beat = getBPMVis(142.);\n    vec3 l = normalize(lPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURFACE_DIST*6., l);\n    if(d<length(lPos-p)) dif = 0.;\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    \n    // Camera position and camera ray direction\n    vec3 cam = vec3(0, 1, 0);\n    vec3 cdir = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(cam, cdir);\n    vec3 p = cam + cdir *d;\n    float dif = GetLight(p);\n    vec3 col = vec3(dif);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}