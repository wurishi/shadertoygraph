{"ver":"0.1","info":{"id":"st23Wt","date":"1625014776","viewed":184,"name":"Mipmap Diffusion II","username":"oneshade","description":"Drag the box around with the mouse to modify the potential field.","likes":12,"published":3,"flags":32,"usePreview":0,"tags":["mipmap","diffusion","gpmipmap","wos"],"hasliked":0,"parentid":"NljGWd","parentname":"Mipmap Diffusion"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://blog.demofox.org/2020/07/11/interpolating-data-over-arbitrary-shapes-with-laplaces-equation-and-walk-on-spheres/\n// Perhaps mipmaps could be used to accelerate it?\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n\n    float w = length(fragColor.rgb);\n    fragColor = fragColor / w * floor(w * 10.0) * 0.1;\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), smoothstep(fwidth(w), 0.0, abs(mod(w + 0.05, 0.1) - 0.05)));\n\n    fragColor.rgb = sqrt(fragColor.rgb); // Approximate gamma correction\n                                         // Actually looks better for once! :)\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// SDFs\nfloat sdCircle(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(in vec2 p, in vec2 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\nfloat sdTriangle(in vec2 p, in vec2 a, in vec2 b, in vec2 c) {\n    vec2 ba = b - a, cb = c - b, ac = a - c;\n    vec2 pa = p - a, pb = p - b, pc = p - c;\n\n    float abc = ba.x * cb.y - ba.y * cb.x;\n    float abp = ba.x * pa.y - ba.y * pa.x;\n    float bcp = cb.x * pb.y - cb.y * pb.x;\n    float cap = ac.x * pc.y - ac.y * pc.x;\n\n    vec2 ae = pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    vec2 be = pb - cb * clamp(dot(pb, cb) / dot(cb, cb), 0.0, 1.0);\n    vec2 ce = pc - ac * clamp(dot(pc, ac) / dot(ac, ac), 0.0, 1.0);\n\n    float tri = sqrt(min(dot(ae, ae), min(dot(be, be), dot(ce, ce))));\n    bvec3 n = lessThan(vec3(abp, bcp, cap), vec3(0.0));\n    return all(n) || all(not(n)) ? -tri : tri;\n}\n\n#define color fragColor.rgb\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy, 3.0);\n    if (iFrame == 0) fragColor = vec4(1.0);\n\n    vec2 center = 0.5 * iResolution.xy;\n    vec2 uv = (fragCoord - center) / iResolution.y * 4.0;\n    vec2 mouse = (iMouse.xy - center) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n\n    float box = sdBox(uv - (iMouse.z > 0.0 ? mouse : vec2(cos(iTime), cos(iTime) * sin(iTime) + 0.75)), vec2(0.4));\n    color = mix(color, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, box));\n\n    float circle = sdCircle(uv - vec2(-1.25, -0.75), 0.4);\n    color = mix(color, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, circle));\n\n    float triangle = sdTriangle(uv - vec2(1.25, -0.75), vec2(-0.5, -0.333), vec2(0.5, -0.333), vec2(0.0, 0.666));\n    color = mix(color, vec3(0.0, 0.0, 1.0), smoothstep(unit, 0.0, triangle));\n\n    uv.x = abs(uv.x) - 2.5;\n    float walls = sdBox(uv, vec2(0.1, 1.5));\n    color = mix(color, vec3(0.0), smoothstep(unit, 0.0, walls));\n\n    uv.x -= 0.6;\n    uv.y = mod(uv.y + 0.5, 1.0) - 0.5;\n    float dots = sdCircle(uv, 0.1);\n    color = mix(color, vec3(1.0), smoothstep(unit, 0.0, dots));\n}","name":"Buffer A","description":"","type":"buffer"}]}