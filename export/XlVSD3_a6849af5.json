{"ver":"0.1","info":{"id":"XlVSD3","date":"1486209892","viewed":129,"name":"ApanJapan","username":"bysse","description":"Thanks for a great concert guys! \nhttps://www.youtube.com/watch?v=d3sTBhLxZcs","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["apanjapan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define NORMAL // Uncomment to have more normal behavior\n\n\nvec3 red = vec3(0.75, 0.13, 0.17);\nvec3 white = vec3(1.0);\nvec3 black = vec3(0.0);\n\nfloat circle(vec2 uv, vec2 p, float radius) {\n    return 1.0 - smoothstep(0.0, 0.01, length(uv - p) - radius);\n}\n\nfloat circle(vec2 uv, vec2 p, vec2 radius) {\n    return 1.0 - smoothstep(0.0, 0.08, length((uv - p) / radius) - 1.0);\n}\n\nfloat line(vec2 uv, vec2 p0, vec2 p1, float width) {\n\tvec2 dir = p0 - p1;\n\tfloat len = length(dir);\n\tdir /= len;\n\tvec2 proj = max(0.0, min(len, dot(p0 - uv, dir))) * dir;\n\treturn 1.0 - smoothstep(0.0, 0.01, length( (p0 - uv) - proj ) - (width / 2.0));\n}\n\nfloat triangle(vec2 uv, vec2 p, vec2 s, float a) {\n    uv -= p;\n    uv *= mat2(cos(a), -sin(a), sin(a), cos(a));\n\tvec2 n = normalize(vec2(s.y, s.x * 0.5));\n\treturn 1.0 - smoothstep(0.0, 0.01, max(abs(uv).x*n.x + uv.y*n.y - (s.y*n.y), -uv.y));\n}\n\nfloat and(float d1, float d2) { return d1 * d2; }\nfloat or(float d1, float d2) { return min(1.0, d1 + d2); }\nfloat or(float d1, float d2, float d3) { return min(1.0, d1 + d2 + d3); }\n\nvec3 monkey(vec2 uv, float t) {\n    vec3 color = white;\n    \n    // background    \n#ifdef NORMAL    \n    float d = mod(t + atan(uv.y, uv.x), 0.3);\n#else\n    float spiral = 2.0 / length(uv);\n    float d = mod(t + atan(uv.y, uv.x) + sin(5.0 * t + spiral), 0.3);\n#endif    \n    float bg = or(\n        circle(uv, vec2(0.0, 0.0), 0.45),\n        or(\n      \t  smoothstep(0.01, 0.000, d),\n\t        smoothstep(0.140, 0.150, d)\n\t    )\n    );\n    \n    uv += vec2(-0.1, 0.08);\n    \n    // head\n    float head = or(\n        circle(uv, vec2(-0.20,-0.05), 0.12),\t// ear\n        circle(uv, vec2(-0.06, 0.00), 0.20),\t// head\n        or(\n        \tcircle(uv, vec2( 0.10,-0.10), 0.12),\t// mouth\n            circle(uv, vec2( 0.01,-0.13), vec2(.20, .10))\t// chin\n       \t)        \n    );\n    \n    float spikes = or(\n        \tor(\n                triangle(uv, vec2( 0.00, 0.15), vec2(0.07, 0.25), 0.20),\n                triangle(uv, vec2(-0.05, 0.15), vec2(0.10, 0.25),-0.25),                \n                triangle(uv, vec2(-0.12, 0.15), vec2(0.12, 0.26),-0.50)\n            ),\n            or(\n                triangle(uv, vec2(-0.14, 0.10), vec2(0.10, 0.35),-0.85),\n                triangle(uv, vec2(-0.15, 0.08), vec2(0.10, 0.32),-1.15),\n                triangle(uv, vec2(-0.15, 0.05), vec2(0.08, 0.31),-1.40)\n            )\n    );\n    \n    head = or(head, spikes);\n    \n    // face\n    float face = or(\n        circle(uv, vec2(0.0, 0.02), 0.105),\t// cheek area\n        circle(uv, vec2(0.1,-0.10), 0.085),\t// mouth area\n        and(\n        \t      circle(uv, vec2(-0.20, -0.05), 0.08), // ear\n        \t1.0 - circle(uv, vec2(-0.08, -0.01), 0.14)\n    \t)\n    );\n    \n    // features\n    float features = or(\n        circle(uv, vec2(0.06, 0.02), 0.015),\t// eye\n        or(\n            line(uv, vec2(0.01, 0.07), vec2(0.04, 0.06), 0.0025),\t// eye brow\n            line(uv, vec2(0.10,-0.12), vec2(0.20,-0.12), 0.005)\t// mouth\n        )\n    );\n    \n    // ear ring\n    float ring = and(\n        \tand(\n                \t  circle(uv, vec2(-0.20,-0.185), 0.03),\t // outer ring\n            \t1.0 - circle(uv, vec2(-0.20,-0.185), 0.02)\t// inner ring\n            ),\n        \t1.0 - line(uv, vec2(-0.18,-0.16), vec2(-0.10,-0.16), 0.02)\n    );\n    \n    color = mix(color, red, bg);\n    color = mix(color, black, head);\n    color = mix(color, white, face);\n    color = mix(color, black, features);\n    color = mix(color, white, ring);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n#ifdef NORMAL    \n    float t = 0.1 * iTime;\n#else\n    float t = iTime;\n#endif\n    vec2 offset = 0.25 * vec2(cos(t), sin(t));\n    \n \tvec3 color = monkey(uv - offset, 0.25 * t);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}