{"ver":"0.1","info":{"id":"mtK3Rz","date":"1683487989","viewed":72,"name":"Double Teardrop Fractal","username":"Cesium_137","description":"I made another fractal shader for old times sakes.","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["fractal","interactive","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_ITERATIONS = 512;\nvec2 getCoord() {\n    return vec2(texelFetch(iChannel0,ivec2(0, 0), 0).r,texelFetch(iChannel0,ivec2(1,0),0).r);\n}\nfloat getZoom() {\n    if(texelFetch(iChannel0, ivec2(2, 0), 0).r > -1.){\n        return texelFetch(iChannel0,ivec2(2,0),0).r;\n    }\n    else {\n        return -0.5;\n    }\n}\nint getzoomthingy() {\n    return int(texelFetch(iChannel0, ivec2(3, 0), 0).r);\n}\nvec2 coord;\nint fractal(vec2 z, vec2 c) {\n  for (int iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n\n    float real = f(z,c).x;\n    float imaginary = f(z,c).y;\n\n    z.x = real;\n    z.y = imaginary;\n\n    if (length(z) > 1000.) {\n      return iteration;\n    }\n  }\n\n  return 0;\n}\n\nint mandelbrot(vec2 frag) {\n  vec2 c = frag;\n  vec2 z = vec2(0);\n\n  return fractal(z,c);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    float zoom = pow(1.03, getZoom()) / 4.;\n    vec2 R = iResolution.xy,\n        coordRatio = (fragCoord - .5 * R) / R.y / zoom;\n    vec2 c = coordRatio + getCoord() / R.y;\n    c.x -= 1.;\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float color = (5.0 * float(mandelbrot(c))) / 512.;\n    fragColor = vec4(vec3(color),1.0);    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float getZoom(){\n    if(texelFetch(iChannel0, ivec2(2, 0), 0).r > -1.){\n        return texelFetch(iChannel0, ivec2(2, 0), 0).r;\n    }\n    else{\n        return -0.5;\n    }\n}\nconst int KEY_A = 65;\nconst int KEY_W = 87;\nconst int KEY_D = 68;\nconst int KEY_S = 83;\nconst int KEY_LEFT = 37;\nconst int KEY_UP = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN = 40;\nconst int KEY_Q = 81;\nconst int KEY_E = 69;\nconst int KEY_R = 82;\nconst float speed = 350.0;\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float zoom=0.25*pow(1.03,getZoom());\n    float outData=0.0;\n    switch(int(fragCoord.x)) {\n        case 0:\n        \toutData = texelFetch(iChannel0, ivec2(0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_D, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_A, 0), 0).r;\n        \tbreak;\n        \n        case 1:\n        \toutData = texelFetch(iChannel0, ivec2(1, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_UP, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).r +\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_W, 0), 0).r -\n                (iTimeDelta * speed / zoom) * texelFetch(iChannel1, ivec2(KEY_S, 0), 0).r;\n        \tbreak;\n        case 2:\n            if(texelFetch(iChannel0, ivec2(2,0),0).r > -1.){\n                outData = texelFetch(iChannel0,ivec2(2, 0), 0).r +\n                iTimeDelta * speed * 0.125 * texelFetch(iChannel1, ivec2(KEY_E, 0), 0).r -\n                iTimeDelta * speed * 0.125 * texelFetch(iChannel1, ivec2(KEY_Q, 0), 0).r;\n            }\n            else{\n                outData = 0.0;\n            }\n            break;\n    }\n    fragColor = vec4(outData,0.0,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 mult(vec2 a, vec2 b){\n    return vec2(a.x * b.x - a.y * b.y,a.y * b.x + a.x * b.y);\n}\nvec2 cpolar(vec2 a){\n    return vec2(sqrt(pow(a.x,2.) + pow(a.y,2.)),atan(a.y / a.x));\n}\nvec2 ccart(vec2 a){\n    return vec2(a.x * cos(a.y),a.x * sin(a.y));\n}\nvec2 cis(float a){\n    return vec2(cos(a),sin(a));\n}\nvec2 cpow(vec2 a, float b){\n    return pow(cpolar(a).x,b) * cis(b * cpolar(a).y);\n}\nvec2 conj(vec2 a){\n    return vec2(a.x,-a.y);\n}\nvec2 div(vec2 a, vec2 b){\n    return mult(a,conj(b)) / (b * conj(b)).x;\n}\nvec2 f(vec2 z, vec2 c){\n    return cpow(cpolar(z),4.) + c;\n}","name":"Common","description":"","type":"common"}]}