{"ver":"0.1","info":{"id":"mll3Wr","date":"1671641019","viewed":167,"name":"ChatGpt Shader","username":"karl1972","description":"Code generated from ChatGpt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ai"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizziamo le coordinate del pixel per ottenere un intervallo di -1.0 a 1.0 su entrambi gli assi\n    vec2 uv = fragCoord / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n  \n    // Calcoliamo il raggio e l'angolo della posizione del pixel\n    float radius = length(uv);\n    float angle = atan(uv.y, uv.x);\n  \n    // Generiamo l'animazione modificando l'angolo in base al tempo\n    angle += iTime * 3.0;\n  \n    // Utilizziamo il raggio e l'angolo per generare il colore\n    vec3 color = vec3(radius, angle, iTime * 0.5);\n  \n    // Mappiamo il colore dallo spazio di Hue-Saturation-Value al formato RGB\n    color = hsv2rgb(color);\n  \n    // Assegniamo il colore al pixel di output\n    fragColor = vec4(color, 1.0);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xyz + K.xyz) * 6.0 - K.xyz);\n    return c.z * mix(K.xyz, clamp(p - K.xyz, 0.0, 1.0), c.y);\n}","name":"Image","description":"","type":"image"}]}