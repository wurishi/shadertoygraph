{"ver":"0.1","info":{"id":"mdSBRd","date":"1690012316","viewed":43,"name":"NUS_SWS3005_08_TASK2","username":"Minjer","description":"Simulates the movement of planets in the solar system.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// PROJECT ID: SWS3005_08\n//\n// GROUP NUMBER: 08\n//\n// STUDENT NAME: CHU ZHELIN\n// NUS User ID.: t0930189\n//\n// STUDENT NAME: LI ZHIWEI\n// NUS User ID.: t0929979\n//\n// STUDENT NAME: YE JINHUA\n// NUS User ID.: t0930247\n//\n// COMMENTS TO GRADER:\n//\n//============================================================================\n\n\n// FRAGMENT SHADER FOR SHADERTOY\n// Run this at https://www.shadertoy.com/new\n// See documentation at https://www.shadertoy.com/howto\n\n// Your browser must support WebGL 2.0.\n// Check your browser at https://webglreport.com/?v=2\n\n//============================================================================\n// Constants.\n//============================================================================\nconst float PI = 3.1415926536;\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 1;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 3;\nconst int NUM_MATERIALS = 11;\nconst int NUM_PLANES = 1;\nconst int NUM_SPHERES = 10;\n\nconst float DISTANCE = 20.0;\n\nvec3 BACKGROUND_COLOR = vec3(0.1);\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n    int usingTexture;   //-1 represents no texture used\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that shown in\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nMaterial_t Material[NUM_MATERIALS];\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n\n    float time = iTime * 0.5;\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // sun\n    Sphere[0].center = vec3( 0.0, 2.7, 0.0 );\n    Sphere[0].radius = 1.5;\n    Sphere[0].materialID = 1;\n\n    // planets\n    Sphere[1].center = vec3( 0.188*DISTANCE * cos(4.2435*time), 2.7, 0.188*DISTANCE * sin(4.2435*time) );\n    Sphere[1].radius = 0.15;\n    Sphere[1].materialID = 2;\n        // Circling sphere.\n    Sphere[2].center = vec3( 0.242*DISTANCE * cos(3.7642*time), 2.7, 0.242*DISTANCE * sin(3.7642*time) );\n    Sphere[2].radius = 0.4;\n    Sphere[2].materialID = 3;\n        // Circling sphere.\n    Sphere[3].center = vec3( 0.3*DISTANCE * cos(3.1766*time), 2.7, 0.3*DISTANCE * sin(3.1766*time) );\n    Sphere[3].radius = 0.4;\n    Sphere[3].materialID = 4;\n\n        // Circling sphere.\n    Sphere[4].center = vec3( 0.345*DISTANCE * cos(2.5238*time), 2.7, 0.345*DISTANCE * sin(2.5238*time) );\n    Sphere[4].radius = 0.2;\n    Sphere[4].materialID = 5;\n        // Circling sphere.\n    Sphere[5].center = vec3( 0.425*DISTANCE * cos(1.5776*time), 2.7, 0.425*DISTANCE * sin(1.5776*time) );\n    Sphere[5].radius = 1.0;\n    Sphere[5].materialID = 6;\n        // Circling sphere.\n    Sphere[6].center = vec3( 0.542*DISTANCE * cos(1.2332*iTime), 2.7, 0.542*DISTANCE * sin(1.2332*iTime) );\n    Sphere[6].radius = 0.85;\n    Sphere[6].materialID = 7;\n    // Circling sphere.\n    Sphere[7].center = vec3( 0.632*DISTANCE * cos(0.8728*iTime), 2.7, 0.632*DISTANCE * sin(0.8728*iTime) );\n    Sphere[7].radius = 0.56;\n    Sphere[7].materialID = 8;\n    // Circling sphere.\n    Sphere[8].center = vec3( 0.710*DISTANCE * cos(0.5436*iTime), 2.7, 0.710*DISTANCE * sin(0.5436*iTime) );\n    Sphere[8].radius = 0.53;\n    Sphere[8].materialID = 9;\n        // Circling sphere.(moon)\n    Sphere[9].center = vec3( 0.3*DISTANCE * cos(3.1766*time) + cos(8.2*time), 2.7, 0.3*DISTANCE * sin(3.1766*time) + sin(8.2*time));\n    Sphere[9].radius = 0.2;\n    Sphere[9].materialID = 10;\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n    Material[0].usingTexture = -1;\n\n    // Fire Red material.\n    \n    Material[1].k_d = vec3(0.95 + 0.05*cos(iTime), 0.286 - 0.05*cos(iTime), 0.208);\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n    Material[1].usingTexture = 2;\n\n    // 2~9 are the planets\n    Material[2].k_d = vec3(0.502, 0.502, 0.502);\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n    Material[2].usingTexture = 2;\n    \n    Material[3].k_d = vec3(1.000, 1.000, 0.753);\n    Material[3].k_a = 0.2 * Material[2].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[2].k_r;\n    Material[3].n = 128.0;\n    Material[3].usingTexture = 2; \n    \n    Material[4].k_d = vec3(0.000, 0.502, 1.000);\n    Material[4].k_a = 0.2 * Material[2].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.5 * Material[2].k_r;\n    Material[4].n = 128.0;\n    Material[4].usingTexture = 2; \n    \n    Material[5].k_d = vec3(1.000, 0.392, 0.235);\n    Material[5].k_a = 0.2 * Material[2].k_d;\n    Material[5].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[5].k_rg = 0.5 * Material[2].k_r;\n    Material[5].n = 128.0;\n    Material[5].usingTexture = 2; \n    \n    Material[6].k_d = vec3(0.941, 0.627, 0.314);\n    Material[6].k_a = 0.2 * Material[2].k_d;\n    Material[6].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[6].k_rg = 0.5 * Material[2].k_r;\n    Material[6].n = 128.0;\n    Material[6].usingTexture = 2; \n    \n    Material[7].k_d = vec3(0.941, 0.902, 0.549);\n    Material[7].k_a = 0.2 * Material[2].k_d;\n    Material[7].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[7].k_rg = 0.5 * Material[2].k_r;\n    Material[7].n = 128.0;\n    Material[7].usingTexture = 2; \n    \n    Material[8].k_d = vec3(0.529, 0.808, 0.980);\n    Material[8].k_a = 0.2 * Material[2].k_d;\n    Material[8].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[8].k_rg = 0.5 * Material[2].k_r;\n    Material[8].n = 128.0;\n    Material[8].usingTexture = 2; \n    \n    Material[9].k_d = vec3(0.118, 0.565, 1.000);\n    Material[9].k_a = 0.2 * Material[2].k_d;\n    Material[9].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[9].k_rg = 0.5 * Material[2].k_r;\n    Material[9].n = 128.0;\n    Material[9].usingTexture = 2; \n    \n    Material[10].k_d = vec3(0.784, 0.784, 0.784);\n    Material[10].k_a = 0.2 * Material[0].k_d;\n    Material[10].k_r = 0.8 * Material[0].k_d;\n    Material[10].k_rg = 0.2 * Material[0].k_r;\n    Material[10].n = 64.0;\n    Material[10].usingTexture = 2;\n    // RGB (0.502, 0.502, 0.502) (Gray) (Mercury)\n    // RGB (1.000, 1.000, 0.753) (Pale Yellow) (Venus)\n    // RGB (0.000, 0.502, 1.000) (Blue) (Earth)\n    // RGB (1.000, 0.392, 0.235) (Reddish-Orange) (Mars)\n    // RGB (0.941, 0.627, 0.314) (Orange/Brown) (Jupiter)\n    // RGB (0.941, 0.902, 0.549) (Pale Yellow/Gold) (Saturn)\n    // RGB (0.529, 0.808, 0.980) (Pale Blue/Cyan) (Uranus)\n    // RGB (0.118, 0.565, 1.000) (Deep Blue/Azure) (Neptune)\n\n    // Light 0\n    Light[0].position = vec3( 0.0, -0.5, -100.0 );\n    Light[0].I_a = vec3( 0.0 );\n    Light[0].I_source = vec3( 1.0, 1.0, 1.0 );\n    // Light 1\n    Light[1].position = vec3( 70.5*cos(iTime),-0.5, 50.0*sin(iTime) );\n    Light[1].I_a = vec3( 0.0 );\n    Light[1].I_source = vec3( 1.0, 1.0, 1.0 );\n    // Light 2\n    Light[2].position = vec3( -70.5,-0.5, 50.0 );\n    Light[2].I_a = vec3( 0.0 );\n    Light[2].I_source = vec3( 1.0, 1.0, 1.0 );\n      \n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0 * a * c;\n\n    if (discriminant < 0.0)\n        return false;\n\n    // Check for one or two intersections.\n    float t0 = (-b - sqrt(discriminant)) / (2.0 * a);\n    float t1 = (-b + sqrt(discriminant)) / (2.0 * a);\n\n    if (t0 > t1){\n        float temp = t0;\n        t0 = t1;\n        t1 = temp;\n    }\n        \n\n    if (t0 >= tmin && t0 <= tmax)\n    {\n        t = t0;\n        hitPos = ray.o + t0 * ray.d;\n        hitNormal = normalize(hitPos - sph.center);\n        return true;\n    }\n\n    if (t1 >= tmin && t1 <= tmax)\n    {\n        t = t1;\n        hitPos = ray.o + t1 * ray.d;\n        hitNormal = normalize(hitPos - sph.center);\n        return true;\n    }\n\n    return false;\n\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n\n    vec3 oc = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(oc, ray.d);\n    float c = dot(oc, oc) - sph.radius * sph.radius;\n    float discriminant = b * b - 4.0 * a * c;\n\n    if (discriminant < 0.0)\n        return false;\n\n    float t0 = (-b - sqrt(discriminant)) / (2.0 * a);\n    float t1 = (-b + sqrt(discriminant)) / (2.0 * a);\n\n    return (t0 >= tmin && t0 <= tmax) || (t1 >= tmin && t1 <= tmax);\n\n}\n\nvec2 getSphereTexCoord(in vec3 normalVec){\n    float phi = acos(normalVec.y);\n    \n    float theta = atan(normalVec.x, normalVec.z);\n    \n    float u = (theta + PI) / (2.0 * PI);\n    float v = phi / PI;\n\n    return vec2(u, v);\n}\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in vec2 texCoord, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        vec3 matk_d = mat.k_d;\n        vec3 matk_r = mat.k_r;\n        if (mat.usingTexture >= 0){\n            matk_d *= 0.3 + texture(iChannel0, texCoord).r;\n            matk_r *= 0.3 + texture(iChannel0, texCoord).r;\n        }\n\n        return light.I_a * mat.k_a +\n               light.I_source * (matk_d * N_dot_L + matk_r * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for (int i = 0; i < NUM_PLANES; ++i) {\n        temp_hasHit = IntersectPlane(Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit) {\n            hasHitSomething = true;\n            if (temp_t < nearest_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Plane[i].materialID;\n            }\n        }\n    }\n    for (int i = 0; i < NUM_SPHERES; ++i) {\n        temp_hasHit = IntersectSphere(Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX, temp_t, temp_hitPos, temp_hitNormal);\n        if (temp_hasHit) {\n            hasHitSomething = true;\n            if (temp_t < nearest_t) {\n                nearest_t = temp_t;\n                nearest_hitPos = temp_hitPos;\n                nearest_hitNormal = temp_hitNormal;\n                nearest_hitMatID = Sphere[i].materialID;\n            }\n        }\n    }\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for (int i = 0; i < NUM_LIGHTS; ++i) {\n        // Make the shadow ray for current light source, the maximum t value represents\n        // the position of light source.\n        Ray_t shadowRay = Ray_t(nearest_hitPos, normalize(Light[i].position - nearest_hitPos));\n        bool inShadow = false;\n        for (int j = 0; j < NUM_PLANES && !inShadow; ++j) {\n            if (IntersectPlane(Plane[j], shadowRay, DEFAULT_TMIN, 1.0))\n                inShadow = true;\n        }\n        for (int j = 0; j < NUM_SPHERES && !inShadow; ++j) {\n            if (IntersectSphere(Sphere[j], shadowRay, DEFAULT_TMIN, 1.0))\n                inShadow = true;\n        }\n        I_local += PhongLighting(shadowRay.d, nearest_hitNormal, -ray.d, inShadow, Material[nearest_hitMatID], getSphereTexCoord(nearest_hitNormal), Light[i]);\n    }\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 resolution = iResolution.xy;\n    vec3 sphereCenter = vec3(resolution * 0.5, 0.0);\n    float sphereRadius = min(resolution.x, resolution.y) * 0.3;\n\n    // get the color from texture\n    vec2 uv = fragCoord / resolution;\n    uv.x -= 10.0*cos(0.005 * iTime);\n    vec4 texColor = texture(iChannel0, uv);\n\n    BACKGROUND_COLOR = texColor.rgb;\n\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( -20.5*cos(0.5 * iTime), 20.0 + 10.0*sin(iTime), -10.0 * sin(0.5*iTime) );\n    vec3 cam_lookat = vec3( 0.0, 0.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}