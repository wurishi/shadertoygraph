{"ver":"0.1","info":{"id":"XcSczR","date":"1721824468","viewed":32,"name":"Starshapething","username":"crauss","description":"Star","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265\n\n// Take this and multiply your UV by the resulting mat2 to get the rotation\nmat2 rot(float angle)\n{\n    float sine = sin(angle), cosine = cos(angle);\n    return mat2( cosine, -sine, \n                 sine,    cosine );\n}\n\n// signed distance to a n-star polygon, with external angle w\nfloat sdStar(in vec2 p, in float r, in float n, in float w)\n{\n    // these 5 lines can be precomputed for a given shape\n    //float m = n*(1.0-w) + w*2.0;\n    float m = n + w*(2.0-n);\n    \n    float an = 3.1415927/n;\n    float en = 3.1415927/m;\n    vec2  racs = r*vec2(cos(an),sin(an));\n    vec2   ecs =   vec2(cos(en),sin(en)); // ecs=vec2(0,1) and simplify, for regular polygon,\n\n    // symmetry (optional)\n    p.x = abs(p.x);\n    \n    // reduce to first sector\n    float bn = mod(atan(p.x,p.y),2.0*an) - an;\n    p = length(p)*vec2(cos(bn),abs(sin(bn)));\n\n    // line sdf\n    p -= racs;\n    p += ecs*clamp( -dot(p,ecs), 0.0, racs.y/ecs.y);\n    return length(p)*sign(p.x);\n}\n\nfloat sdf(vec2 p, float r) {\n    return abs(min(sdStar(p, r * 0.95, 5., 0.7), sdStar(vec2(p.x, -p.y), r * 1.2, 5., 0.55)));\n    //return abs(length(p) - r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.); // 5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))\n    \n    vec2 c = uv - 0.5;\n    c.x /= iResolution.y / iResolution.x;\n    \n    for (float i = 0.; i < 32.; i++) {\n        col -= mix(vec3(0.), vec3(1.), pow(abs(1. - sdf(c * rot(i * -0.01 * cos(iTime) + 0.4), 0.3 - i * 0.01 * sin(iTime))), 1000.));\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}