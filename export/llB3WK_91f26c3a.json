{"ver":"0.1","info":{"id":"llB3WK","date":"1432386460","viewed":423,"name":"LorenzAttractor","username":"dila","description":"The butterfly shaped curve that is a result of integrating the system of differential equations known as the Lorenz system.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["attractor","chaos","system"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const float pi = 3.14159;\n\nmat3 xrot(float t)\n{\n    return mat3(1.0, 0.0, 0.0,\n                0.0, cos(t), -sin(t),\n                0.0, sin(t), cos(t));\n}\n\nmat3 yrot(float t)\n{\n    return mat3(cos(t), 0.0, -sin(t),\n                0.0, 1.0, 0.0,\n                sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{\n    return mat3(cos(t), -sin(t), 0.0,\n                sin(t), cos(t), 0.0,\n                0.0, 0.0, 1.0);\n}\n\nfloat line(vec2 p, vec3 a, vec3 b) {\n    vec2 zs = 1.0 / (vec2(a.z,b.z) * 0.5 + 1.5);\n    a.xy *= zs.x;\n    b.xy *= zs.y;\n\tvec2 c = b.xy - a.xy;\n    float t = dot(p - a.xy, c) / dot(c,c);\n\tt = clamp(t, 0.0, 1.0);\n    vec2 r = mix(a.xy, b.xy, t);\n    vec2 d = p - r;\n    return dot(d,d);\n}\n\nvec3 ddt(vec3 s, vec3 k)\n{\n\tvec3 r;\n    r.x = k.x * (s.y - s.x);\n    r.y = s.x * (k.y - s.z) - s.y;\n    r.z = s.x * s.y - k.z * s.z;\n    return r;\n}\n\nvec3 rk4(vec3 s, vec3 k, float h)\n{\n\tvec3 k0 = ddt(s, k);\n    vec3 k1 = ddt(s + k0 * h * 0.5, k);\n    vec3 k2 = ddt(s + k1 * h * 0.5, k);\n    vec3 k3 = ddt(s + k2 * h, k);\n    return s + (k0 + 2.0 * (k1 + k2) + k3) * h / 6.0;\n}\n\nvec3 midpoint(vec3 s, vec3 k, float h)\n{\n    vec3 k0 = ddt(s, k);\n    return s + ddt(s + k0 * h * 0.5, k) * h;\n}\n\nvec3 euler(vec3 s, vec3 k, float h)\n{\n    return s + ddt(s, k) * h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 k = vec3(10.0, 28.0, 8.0/3.0);\n    \n    vec3 iv;\n    iv.z = k.y - 1.0;\n    iv.x = sqrt(k.z * iv.z);\n    iv.y = -iv.x;\n    \n    float t = 1000.0;\n    \n    vec3 mov = iv + vec3(0.0, 8.0, 0.0);\n    mat3 rot = yrot(iTime) * zrot(pi*0.5);\n    if (iMouse.z >= 1.0) {\n        vec2 mp = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n\t\trot = zrot(pi*0.5) * xrot(mp.y*6.0) * yrot(mp.x*6.0);\n    }\n    rot *= mat3(0.04);\n    \n    vec3 s = iv;\n    for (int i = 0; i < 200; ++i) {\n        vec3 sp = s;\n        s = midpoint(s, k, 0.02);\n        float d = line(uv, (sp-mov)*rot, (s-mov)*rot);\n\t\tt = min(t, d);\n    }\n    \n    float fc = 1.0 / (1.0 + t * 1000.0);\n    \n    vec3 bc = vec3(0.0, 0.0, 1.0-(uv.y*0.5+0.5));\n    \n    bc = mix(bc, vec3(1.0, 1.0, 1.0), fc);\n    \n\tfragColor = vec4(bc,1.0);\n}","name":"","description":"","type":"image"}]}