{"ver":"0.1","info":{"id":"MsVBWd","date":"1531148825","viewed":1024,"name":"safe init from late texture load","username":"FabriceNeyret2","description":"try reload, or shift-reload in firefox.\ntexture loading can finish after an arbitrary frame delay.\nThis can be a problem when buffer initialization depends on it.\nHere is how to test and be safe (see bufA).\n","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["test","glsl","textures","utils"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//--- URL for this safe texture-dependant init: https://www.shadertoy.com/view/MsVBWd\n\n// test texture load: see also https://shadertoy.com/view/XsKBWt\n\n// --- font utils from https://www.shadertoy.com/view/llySRh\n\nvec4 char(vec2 p, int c) { // --- access to the image of ascii code c. \n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel3, p/16. + fract( vec2(c, 15-c/16) / 16. ), \n                        dFdx(p/16.),dFdy(p/16.) );\n}\nvec4 pInt(vec2 p, float n) { // --- display int4\n\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(p - vec2(-.5,0), 45 ),\n        n = -n;\n\n    for (float i = 3.; i>=0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(p - .5*vec2(i,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\nint CAPS=0;                // --- chars\n#define low CAPS=32;\n#define caps CAPS=0;\n#define spc  U.x-=.5;\n#define C(c) spc O+= char(U,64+CAPS+c).x;\n\n// --- end of font utils --------------------\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    O = T(u);\n    \n    u /= iResolution.y;    \n    vec2 U;\n    \n    U = ( u - vec2(.0,.5) ) * 8.;  caps;C(12);low;C(15);C(1);C(4);spc;C(4);C(5);C(12);C(1);C(25);caps;C(-6); // \"Load delay\"\n    float d = T(vec2(0)).a;\n    U.x--; O += pInt(U, d-1.).x * ( d>0. ? vec4(1) : vec4(1,0,0,1) );\n    U.x-=2.; low;C(6);C(18);C(1);C(13);C(5);C(19); // \"frames\"\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define T(U) texelFetch(iChannel0, ivec2(U), 0)\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n  //if ( texelFetch(iChannel0,ivec2(0,0),0).a ==0.) { // Loaded state: not loaded\n    if ( iFrame==0 || T(vec2(0)).a < 1. ) {           // (if you like macro T() )\n        O = vec4(0);                                  // fix compatibility issues\n      //if (textureSize(iChannel1,1).x>0) {\n        if (iChannelResolution[1].x>0.) {             // Texture now available\n            O = texture(iChannel1, U/iResolution.xy); // Do your init stuff.\n            if (U==vec2(.5)) O.a = 1.+float(iFrame);  // Set load state to 1.\n        }                                             // here, +iFrame just for demo\n        return;\n    }\n    // NB: another useful trick to re-init if user go full-screen or enlarge:\n    // store iResolution.x as well, then init test becomes:\n    //     if( T(resol_state).a != iResolution.x ) {\n    //         if (U==vec2(resol_state)) O.a = iResolution.x; \n    //         (re)do init\n    \n    \n    \n    // We are now in the normal runing stage\n    O = T(U);\n    \n    // Do your runtime stuff.\n}","name":"Buf A","description":"","type":"buffer"}]}