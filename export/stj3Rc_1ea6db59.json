{"ver":"0.1","info":{"id":"stj3Rc","date":"1624426804","viewed":82,"name":"Clumsy blur use gaussian","username":"chenxiaoleizi","description":"Use mose to move the blur boundry","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float sigma = 3.0;\nconst float blurRadius = 3.0;\nconst int len = int( pow(1.0 + 2.0 * blurRadius, 2.0) );\nconst int size = len;\n\nvoid createCoords(float radius, out vec2 arr[size]){\n    int index = 0;\n    for (float i=-radius; i<=radius; i++) {\n        float x = i;\n        for (float j=radius; j>=-radius; j--) {\n            float y = j;\n            arr[index] = vec2(x, y);\n            index++;\n        }\n    }\n}\n\nfloat calcWeight(float x, float y, float sigma) {\n    float exponent = - (x*x + y*y) / (2.0 * sigma * sigma);\n    return exp(exponent) / (2.0 * 3.14 * sigma * sigma);\n}\nvoid createWeights(vec2 coords[size], out float weights[size]) {\n    float arr[size];\n    float sum;\n    for (int i=0; i<len; i++) {\n        float x = coords[i].x;\n        float y = coords[i].y;\n        float weight = calcWeight(x, y, sigma);\n        arr[i] = weight;\n        sum += weight;\n    }\n\n    for (int i=0; i<len; i++) {\n        weights[i] = arr[i] / sum;\n    }\n\n}\n\nvec3 getPixel(vec2 fragCoord, vec2 c){\n    vec2 uv = (fragCoord + c)/iResolution.xy;\n    return texture(iChannel0, uv).xyz;\n}\nvec3 blur(vec2 fragCoord, vec2 coordsArr[size], float weightsArr[size]){\n    vec3 sum;\n    // Get surrounding color and multiply weight\n    for (int i=0; i<len; i++) {\n        sum += getPixel(fragCoord, coordsArr[i]) * weightsArr[i];\n    }\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 coordsArr[size];\n    float weightsArr[size];\n    createCoords(blurRadius, coordsArr);\n    createWeights(coordsArr, weightsArr);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Blur pixel color\n    vec3 col = blur(fragCoord, coordsArr, weightsArr);\n    \n    vec3 c = uv.x < (iMouse.x/iResolution.x)? texture(iChannel0, uv).xyz : col;\n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}