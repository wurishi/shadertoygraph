{"ver":"0.1","info":{"id":"XltBRM","date":"1539034682","viewed":118,"name":"krlozadan_rgb_grid","username":"krlozadan","description":"Grid that separates RGB channels","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getChannelValue(float gridGranularity, float radius, vec2 fragCoord, float brightness){        \n    // Defines how many \"Big Pixels\" are on the screen\n    vec2 gridRes = iResolution.xy / gridGranularity;\n    \n    // We calculate the big pixel coord and the circle center for that coord\n    vec2 gridCoord = floor(fragCoord / gridGranularity);\n    vec2 circleCenter = gridCoord * gridGranularity + radius;\n    \n    // Add color of we're inside the circle\n    if (distance(fragCoord, circleCenter) < brightness * radius)\t\n        return brightness;\n    else\n        return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n    vec3 sampledColor = texture(iChannel0, uv).xyz; // Getting the color of the video\n    float brightness = max(max(sampledColor.x, sampledColor.y),sampledColor.z); // Get the brightness finding maximum value channel, this will give me a 0 to 1 value\n    \n    float red = getChannelValue(20.0, 10.0, fragCoord, brightness); \n    float blue = getChannelValue(10.0, 5.0, fragCoord, brightness); \n    float green = getChannelValue(15.0, 7.5, fragCoord, brightness); \n    \n    fragColor = vec4(red, green, blue, 1.0);\n}","name":"Image","description":"","type":"image"}]}