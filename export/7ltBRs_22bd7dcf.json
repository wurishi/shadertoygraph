{"ver":"0.1","info":{"id":"7ltBRs","date":"1666611325","viewed":115,"name":"[phreax] rainbow madness2","username":"phreax","description":"Inspired by hexeosis","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n#define TAU PI*2.\n\n\nfloat tt;\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 getPal(int id, float t) {\n\n    vec3                col = pal( t, vec3(.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,-0.33,0.33) );\n    if( id == 1 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    if( id == 2 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    if( id == 3 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    if( id == 4 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    if( id == 5 ) col = pal( t, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    if( id == 6 ) col = pal( t, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    \n    return col;\n}\n\n\nvec3 colorStripeTexture(vec3 p) {\n    return vec3(1);\n}\n\n\nfloat box(vec3 p, vec3 r) {\n\tvec3 q = abs(p) - r;\n    return max(max(q.x, q.y),q.z);\n}\n\nmat2 rot(float a) { return mat2(cos(a), sin(a), -sin(a), cos(a));}\n\nfloat repeat(inout float x, float n) {\n    float id = floor(n*x)/n;\n    x = fract(n*x);\n    return id;\n}\n\nvec2 repeat(inout vec2 p, vec2 size) {\n\tvec2 c = floor((p + size*0.5)/size);\n\tp = mod(p + size*0.5,size) - size*0.5;\n\treturn c;\n}\n\nfloat pMod1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nvec2 moda(vec2 p, float repetitions) {\n\tfloat angle = 2.*PI/repetitions;\n\tfloat a = atan(p.y, p.x) + angle/2.;\n\ta = mod(a,angle) - angle/2.;\n\treturn vec2(cos(a), sin(a))*length(p);\n}\n\n\n/*float pring(vec3 p, float s, float r) {\n    \n    float dp = prism(p, vec2(s, .2));\n    \n    dp = max(dp, -prism(p, vec2(s-r, .3)));\n    return dp;\n}*/\n\nfloat pModSingle1(inout float p, float size) {\n\tfloat halfsize = size*0.5;\n\tfloat c = floor((p + halfsize)/size);\n\tif (p >= 0.)\n\t\tp = mod(p + halfsize, size) - halfsize;\n\treturn c;\n}\n\nvec3 kalei(vec3 p) {\n  float w = 1.;\n      p = abs(p) -.2;\n  for(float i=0.; i < 3.; i++) {\n        float t1 = 2.+sin(i+tt) + sin(.7*tt)*.4;\n        p.xy *= rot(.3*t1);\n        p -= 0.1 + .1*i;\n       // p.y -= 0.3;\n        p = abs(p);\n \n    }\n    p /= w;\n    return p;\n}\n\nvec2 beamId;\nfloat map(vec3 p) {\n\n\n    p.y += 0.2*sin(p.z+4.*tt);\n    float repz = 14.;\n    float idz = pModSingle1(p.z,repz);\n    \n   p.xy *= rot(.25*PI*mod(idz, repz));\n\n   // p = kalei(p);\n    float blen = 5.;\n\n    float outer = 1.3;\n    float inner = 1.1;\n    float maskout = box(p, vec3(vec2(outer), blen));\n    float maskin = box(p, vec3(vec2(inner), blen + .3));\n    beamId = repeat(p.xy, vec2(.3));\n    float beam = box(p, vec3(0.1, 0.09, blen));\n    \n    float frame = max(maskout, -maskin);\n    float d = max(beam, maskout);\n    d = max(d, frame);\n    return d;\n   \n}\n\nvoid cam(inout vec3 p) {\n    p.z += 4.*tt;;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n    tt = iTime;\n    vec3 ro = vec3(0, 0., -15.),\n         rd = normalize(vec3(uv, .8)),\n         lp = vec3(0., 0., 2.);\n    \n    cam(ro);\n    cam(lp);\n    vec3 col;\n    float i, t, d = 0.1;\n\n    vec3 p = ro;\n    \n    vec2 beamIdTemp;\n    for(i=0.; i<200.; i++) {\n    \n          \n        d = map(p);\n        beamIdTemp = beamId; // save id\n        \n        if(d < 0.001 || t > 100.) break;\n        \t\n        p += rd*d;\n        t += d;\n    }\n    \n    vec2 e = vec2(0.0035, -0.0035);\n    \n    if(d < 0.001) {\n        vec3 al = vec3(0.000,1.000,0.616);\n        al = getPal(0, beamIdTemp.y/10.);\n        vec3 n = normalize( e.xyy*map(p+e.xyy) + e.yyx*map(p+e.yyx) +\n                            e.yxy*map(p+e.yxy) + e.xxx*map(p+e.xxx));\n        \n        vec3 l = normalize(lp-p);\n        float dif = max(dot(n, l), .0);\n        float spe = pow(max(dot(reflect(-rd, n), -l), .0), 40.);\n        float sss = smoothstep(0., 1., map(p+l*.4))/.4; \n        \n        col =  al*mix(1., spe+.9*(dif+1.5*sss), .4);\n    }\n    \n    \n\n\n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}