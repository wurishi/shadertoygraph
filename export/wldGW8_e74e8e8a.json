{"ver":"0.1","info":{"id":"wldGW8","date":"1576218275","viewed":1789,"name":"Texture Loading","username":"iq","description":"The shader will show solid colors while the textures are downloading, and will show the texture content when they are ready. It's a hack, but will do for now for those who need to wait for a texture to download before performing some computations.","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["2d","texture","textures","loading","streaming","downloading"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":3,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// The shader will show solid colors while the texture is loading and\n// will switch to show the actual texture content when it is ready.\n\n#define textureLoaded(s) (textureSize(s,0).x>1)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coords\n    ivec2 p = ivec2(fragCoord-0.5);\n    \n    // sample all textures\n    vec3 colA = texelFetch( iChannel0, p%ivec2(iChannelResolution[0].xy), 0 ).xyz;\n    vec3 colB = texelFetch( iChannel1, p%ivec2(iChannelResolution[1].xy), 0 ).xyz;\n    vec3 colC = texelFetch( iChannel2, ivec3(p,0)%ivec3(iChannelResolution[2].xyz), 0 ).xyz;\n    vec3 colD = texture(    iChannel3, vec3(p,400.0) ).xyz;\n\n    // mark then as \"loading\" if they are still downloading\n    if( !textureLoaded(iChannel0) ) colA = vec3(1.0,0.0,0.0);\n    if( !textureLoaded(iChannel1) ) colB = vec3(0.0,1.0,0.0);\n    if( !textureLoaded(iChannel2) ) colC = vec3(0.0,0.0,1.0);\n    if( !textureLoaded(iChannel3) ) colD = vec3(1.0,1.0,0.0);\n    \n    // tile all textures in screen\n    int xres = int(iResolution.x);\n    vec3 col = (4*p.x<1*xres) ? colA :\n               (4*p.x<2*xres) ? colB :\n               (4*p.x<3*xres) ? colC :\n                                colD;\n    // output color\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}