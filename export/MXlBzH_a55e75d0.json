{"ver":"0.1","info":{"id":"MXlBzH","date":"1728054819","viewed":33,"name":"GPR: Stars - Elysium","username":"ElysiumPlanitia","description":"Random dots twinkling to imitate stars","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FREQ 30.0\nconst vec3 BG_COLOR = vec3(0.03,0.02,0.4);\nconst vec3 FG_COLOR = vec3(0.4,0.88,1.0);\nconst float SPEED = 1.0;\nconst float RANGE = 0.04;\n\n\n//random function borrowed from https://www.shadertoy.com/view/4tSXR1\nvec2 rand(vec2 co){\n    return vec2(\n        //erratic trig functions my beloved\n        //psuedorandom result, predictable but still varied enough\n        fract(sin(dot(co.xy ,vec2(16.9198,78.233))) * 43858.5453),\n        fract(cos(dot(co.yx ,vec2(8.6447,45.097))) * 43758.5453)\n    )*2.0-1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //accounting for aspect ratio, correcting uv coord space\n    vec2 uv = ( fragCoord - 0.5 * iResolution.xy ) / iResolution.y;\n    //scales uv space based on how many stars we want\n    uv*=FREQ;\n    \n    //nearest integer value to basically create a cell coordinate\n    vec2 cell = floor(uv);\n    //fractional part of uv used as local coordinate space\n    uv = fract(uv);\n    //random offset from cell position\n    vec2 r = rand(cell)*0.8;\n    \n    float dots = distance(uv,r);\n    \n    \n    float timeOffset = rand(uv).x + rand(uv).y;\n    //random time offset leads to twinkling, mottled effect\n    float d = smoothstep(.07, .09,dots + (RANGE * rand(uv).x * sin(iTime * SPEED + timeOffset) + .05));\n    //vec3 color = vec3(1.0,1.0,1.0);\n    vec3 color = mix (FG_COLOR, BG_COLOR, d);\n\n    fragColor = vec4(color,1.0);\n    \n}\n\n","name":"Image","description":"","type":"image"}]}