{"ver":"0.1","info":{"id":"ltKyRK","date":"1537342813","viewed":306,"name":"Tribute to ZX Spectrum","username":"SergeyMakeev","description":"My Shadertoy tribute to ZX Spectrum! It was amazing times!\n\n- Sometimes music (SoundCloud) doesn't play and I don't know why\n- It is better to watch on fullscreen\n","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["retro","zx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"llf3DB","filepath":"https://soundcloud.com/user-794660217/zx-spectrum-bzyk-startrip","previewfilepath":"https://soundcloud.com/user-794660217/zx-spectrum-bzyk-startrip","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pixels: 256 × 192\n// Attributes: 32 × 24\n// Colors: 15\n\n// https://shadertoyunofficial.wordpress.com/2016/07/21/usual-tricks-in-shadertoyglsl/\n\nconst float kRefreshRate = 50.0;\nconst vec2 kResolution = vec2(256.0, 192.0);\nconst vec2 kMinVirtualPixelSize = vec2(1.0, 1.0);\n\nfloat hash(vec2 p)\n{\n  return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nint imod(int a, int b)\n{\n    return a-a/b*b;\n    //return a % b;\n}\n\nfloat saturate(float v)\n{\n   return min(1.0, max(0.0, v));\n}\n\nhighp float pexp2(int i)\n{\n    //return exp2(-float(i));\n    \n    //workaround for precission issue on ios\n    if (i == 0) return 1.0;\n    if (i == 1) return 0.5;\n    if (i == 2) return 0.25;\n    if (i == 3) return 0.125;\n    if (i == 4) return 0.0625;\n    if (i == 5) return 0.03125;\n    if (i == 6) return 0.015625;\n    if (i == 7) return 0.0078125;\n    if (i == 8) return 0.00390625;\n    if (i == 9) return 0.001953125;\n    if (i == 10) return 0.0009765625;\n    \n    return exp2(-float(i));\n\n    \n    \n/*    \n    if (i == 0) return 1.0;\n    if (i == 1) return 0.5;\n    if (i == 2) return 0.25;\n    if (i == 3) return 0.125;\n    if (i == 4) return 0.0625;\n    if (i == 5) return 0.03125;\n    if (i == 6) return 0.015625;\n    if (i == 7) return 0.0078125;\n    if (i == 8) return 0.00390625;\n    if (i == 9) return 0.001953125;\n    if (i == 10) return 0.0009765625;\n    if (i == 11) return 0.00048828125;\n    if (i == 12) return 0.000244140625;\n    if (i == 13) return 0.0001220703125;\n    if (i == 14) return 0.00006103515625;\n    if (i == 15) return 0.000030517578125;\n    if (i == 16) return 0.0000152587890625;\n    if (i == 17) return 0.00000762939453125;\n    if (i == 18) return 0.000003814697265625;\n    if (i == 19) return 0.0000019073486328125;\n    if (i == 20) return 0.00000095367431640625;\n    if (i == 21) return 0.000000476837158203125;\n    if (i == 22) return 0.0000002384185791015625;\n    if (i == 23) return 0.00000011920928955078125;\n    if (i == 24) return 0.000000059604644775390625; \n  */  \n    return 1.0;\n\n}\n\nfloat bitTest(float bits, int index)\n{\n    // 2^24 integers can be represented in single float\n    \n    // shift integer right\n    //highp float t = bits * exp2(-float(index));\n    //highp float t = 48.0 * exp2(-float(index));\n    \n    //highp float fi = float(index);\n    \n    float t = bits * pexp2(index);\n    t -= fract(t);\n    \n    //check the lowest bit\n    return (fract(t * 0.5) > 0.0) ? 1.0 : 0.0;\n}\n\n// get pixel value (charBits = 8x8 char)\n// .x = 8x2 pixels\n// .y = 8x2 pixels\n// .z = 8x2 pixels\n// .w = 8x2 pixels\nfloat getCharPixel(int x, int y, vec4 charBits)\n{\n    int _y = (y/2);\n    float lineBits = charBits.x;\n    lineBits = (_y == 1) ? charBits.y : lineBits;\n    lineBits = (_y == 2) ? charBits.z : lineBits;\n    lineBits = (_y == 3) ? charBits.w : lineBits;\n    int shift = (imod(y, 2) == 0) ? 0 : 8;\n    return bitTest(lineBits, x + shift);\n}\n\n// get pixel value for 24x8 sprite\n// .x = 24x1 pixels\n// .y = 24x1 pixels\n// ...\n// .w = 24x1 pixels\nfloat getSpritePixel(int x, int y, vec4 line1234, vec4 line4567)\n{\n    float lineBits = line1234.x;\n    lineBits = (y == 1) ? line1234.y : lineBits;\n    lineBits = (y == 2) ? line1234.z : lineBits;\n    lineBits = (y == 3) ? line1234.w : lineBits;\n    lineBits = (y == 4) ? line4567.x : lineBits;\n    lineBits = (y == 5) ? line4567.y : lineBits;\n    lineBits = (y == 6) ? line4567.z : lineBits;\n    lineBits = (y == 7) ? line4567.w : lineBits;\n    return bitTest(lineBits, x);\n}\n\n// Speccy font\n#define _0 vec4(26172.0, 32374.0, 26222.0, 60.0)\n#define _1 vec4(7192.0, 6168.0, 6168.0, 126.0)\n#define _2 vec4(26172.0, 12384.0, 3096.0, 126.0)\n#define _3 vec4(26172.0, 14432.0, 26208.0, 60.0)\n#define _4 vec4(14384.0, 13884.0, 12414.0, 48.0)\n#define _5 vec4(1662.0, 24638.0, 26208.0, 60.0)\n#define _6 vec4(3128.0, 15878.0, 26214.0, 60.0)\n#define _7 vec4(24702.0, 6192.0, 3084.0, 12.0)\n#define _8 vec4(26172.0, 15462.0, 26214.0, 60.0)\n#define _9 vec4(26172.0, 31846.0, 12384.0, 28.0)\n#define _A vec4(26172.0, 32358.0, 26214.0, 102.0)\n#define _B vec4(26174.0, 15974.0, 26214.0, 62.0)\n#define _C vec4(26172.0, 1542.0, 26118.0, 60.0)\n#define _D vec4(13854.0, 26214.0, 13926.0, 30.0)\n#define _E vec4(1662.0, 15878.0, 1542.0, 126.0)\n#define _F vec4(1662.0, 15878.0, 1542.0, 6.0)\n#define _G vec4(26172.0, 30214.0, 26214.0, 60.0)\n#define _H vec4(26214.0, 32358.0, 26214.0, 102.0)\n#define _I vec4(6270.0, 6168.0, 6168.0, 126.0)\n#define _J vec4(12412.0, 12336.0, 13872.0, 28.0)\n#define _K vec4(13926.0, 3614.0, 13854.0, 102.0)\n#define _L vec4(1542.0, 1542.0, 1542.0, 126.0)\n#define _M vec4(30563.0, 27519.0, 25451.0, 99.0)\n#define _N vec4(26214.0, 32366.0, 26230.0, 102.0)\n#define _O vec4(26172.0, 26214.0, 26214.0, 60.0)\n#define _P vec4(26174.0, 15974.0, 1542.0, 6.0)\n#define _Q vec4(26172.0, 26214.0, 13910.0, 108.0)\n#define _R vec4(26174.0, 15974.0, 26166.0, 102.0)\n#define _S vec4(26172.0, 15366.0, 26208.0, 60.0)\n#define _T vec4(6270.0, 6168.0, 6168.0, 24.0)\n#define _U vec4(26214.0, 26214.0, 26214.0, 60.0)\n#define _V vec4(26214.0, 26214.0, 15462.0, 24.0)\n#define _W vec4(25443.0, 27499.0, 30591.0, 99.0)\n#define _X vec4(26214.0, 6204.0, 26172.0, 102.0)\n#define _Y vec4(26214.0, 15462.0, 6168.0, 24.0)\n#define _Z vec4(24702.0, 6192.0, 1548.0, 126.0)\n#define _COMMA vec4(0.0, 0.0, 6144.0, 3096.0)\n#define _DOT vec4(0.0, 0.0, 6144.0, 24.0)\n#define _EX vec4(6168.0, 6168.0, 24.0, 24.0)\n#define _BRL vec4(6192.0, 3084.0, 6156.0, 48.0)\n#define _BRR vec4(6156.0, 12336.0, 6192.0, 12.0)\n#define _MINUS vec4(0.0, 32256.0, 0.0, 0.0)\n#define _HEART vec4(26112.0, 65535.0, 32511.0, 6204.0)\n\n//Sprites (each sprite 24x8)\n#define _S0 vec4(0.0, 0.0, 32256.0, 43776.0), vec4(34176.0, 1637248.0, 3949952.0, 8314240.0)\n#define _S1 vec4(16557440.0, 16054656.0, 7996352.0, 2441184.0), vec4(169744.0, 85512.0, 44552.0, 450328.0)\n#define _S2 vec4(650692.0, 1169378.0, 1235906.0, 843138.0), vec4(188164.0, 117784.0, 52768.0, 44640.0)\n#define _S3 vec4(32736.0, 32640.0, 17088.0, 24000.0), vec4(19136.0, 22976.0, 21376.0, 30080.0)\n#define _S4 vec4(25344.0, 26368.0, 27392.0, 17920.0), vec4(19968.0, 22016.0, 19968.0, 32256.0)\n#define _S5 vec4(16896.0, 82560.0, 311104.0, 753312.0), vec4(393024.0, 699040.0, 349504.0, 174720.0)\n#define _S6 vec4(0.0, 0.0, 15872.0, 24320.0), vec4(32512.0, 15232.0, 17280.0, 20928.0)\n#define _S7 vec4(8640.0, 9440.0, 15840.0, 21008.0), vec4(19464.0, 16648.0, 16760.0, 28552.0)\n#define _S8 vec4(18680.0, 51336.0, 84040.0, 84232.0), vec4(50792.0, 16656.0, 13024.0, 16352.0)\n#define _S9 vec4(16320.0, 17088.0, 24000.0, 39616.0), vec4(43456.0, 72384.0, 80320.0, 88768.0)\n#define _S10 vec4(145856.0, 162496.0, 179648.0, 288480.0), vec4(320864.0, 354016.0, 518112.0, 271392.0)\n#define _S11 vec4(271392.0, 6024176.0, 3667944.0, 6291444.0), vec4(2796200.0, 1398096.0, 0.0, 0.0)\n#define _S12 vec4(0.0, 0.0, 16128.0, 32384.0), vec4(32512.0, 29184.0, 24320.0, 21760.0)\n#define _S13 vec4(16896.0, 20992.0, 515584.0, 582912.0), vec4(1080576.0, 1075456.0, 1635680.0, 2353616.0)\n#define _S14 vec4(4707720.0, 4450760.0, 4584944.0, 3107136.0), vec4(1979776.0, 272640.0, 161024.0, 261632.0)\n#define _S15 vec4(130560.0, 106752.0, 122112.0, 108800.0), vec4(118016.0, 58624.0, 55040.0, 25344.0)\n#define _S16 vec4(29440.0, 27392.0, 12544.0, 14592.0), vec4(13568.0, 14592.0, 16128.0, 8448.0)\n#define _S17 vec4(41280.0, 97936.0, 180072.0, 98256.0), vec4(174760.0, 87376.0, 43680.0, 0.0)\n#define _S18 vec4(16228351.0, 16238590.0, 14926840.0, 14934512.0), vec4(14934512.0, 14934512.0, 14934512.0, 14934512.0)\n#define _S19 vec4(14934512.0, 14934512.0, 14934512.0, 14934512.0), vec4(14934512.0, 14934512.0, 14934512.0, 14934512.0)\n#define _S20 vec4(14934520.0, 14934524.0, 14934526.0, 14934527.0), vec4(14934526.0, 14934524.0, 14934520.0, 14934512.0)\n#define _S21 vec4(14934512.0, 14934512.0, 14934512.0, 14934512.0), vec4(14926320.0, 16237040.0, 16220656.0, 496.0)\n#define _S22 vec4(12582908.0, 4136945.0, 397281.0, 395203.0), vec4(198595.0, 198595.0, 100291.0, 100291.0)\n#define _S23 vec4(100291.0, 51139.0, 51139.0, 26563.0), vec4(26563.0, 14275.0, 14275.0, 16323.0)\n#define _S24 vec4(16323.0, 16323.0, 16323.0, 32707.0), vec4(65475.0, 131011.0, 260035.0, 518083.0)\n#define _S25 vec4(1034179.0, 2066371.0, 4130755.0, 8259523.0), vec4(16519137.0, 16261105.0, 15761404.0, 0.0)\n#define _S26 vec4(16579583.0, 15856126.0, 14803196.0, 12706040.0), vec4(12706040.0, 12706040.0, 12632312.0, 12583160.0)\n#define _S27 vec4(12583160.0, 12583160.0, 12583160.0, 12583160.0), vec4(12583160.0, 12583160.0, 12583160.0, 12590840.0)\n#define _S28 vec4(12590840.0, 12590840.0, 12583160.0, 12583160.0), vec4(12583160.0, 12583160.0, 12583160.0, 12583160.0)\n#define _S29 vec4(12632312.0, 12706040.0, 12706040.0, 12706040.0), vec4(14803192.0, 15856125.0, 16579583.0, 0.0)\n#define _S30 vec4(991.0, 1927.0, 3843.0, 7939.0), vec4(7939.0, 7939.0, 7939.0, 7939.0)\n#define _S31 vec4(7939.0, 7939.0, 7939.0, 7939.0), vec4(7939.0, 7939.0, 7939.0, 3843.0)\n#define _S32 vec4(3843.0, 26499.0, 61927.0, 61927.0), vec4(25539.0, 1923.0, 3971.0, 3971.0)\n#define _S33 vec4(3843.0, 3843.0, 3843.0, 3843.0), vec4(7943.0, 7951.0, 7999.0, 7936.0)\n#define _S34 vec4(496.0, 496.0, 496.0, 496.0), vec4(496.0, 496.0, 496.0, 496.0)\n#define _S35 vec4(496.0, 504.0, 510.0, 255.0), vec4(127.0, 62.0, 0.0, 0.0)\n#define _S36 vec4(7936.0, 7936.0, 7936.0, 7936.0), vec4(7936.0, 7936.0, 7936.0, 7936.0)\n#define _S37 vec4(7936.0, 7936.0, 16128.0, 15872.0), vec4(31744.0, 30720.0, 0.0, 0.0)\n#define _S38 vec4(0.0, 241376.0, 174720.0, 174720.0), vec4(240352.0, 141856.0, 141856.0, 241376.0)\n#define _S39 vec4(0.0, 128.0, 0.0, 128.0), vec4(2184.0, 128.0, 672.0, 448.0)\n#define _S40 vec4(24573.0, 448.0, 672.0, 128.0), vec4(2184.0, 128.0, 0.0, 128.0)\n#define _S41 vec4(0.0, 0.0, 0.0, 128.0), vec4(128.0, 1168.0, 672.0, 448.0)\n#define _S42 vec4(8188.0, 448.0, 672.0, 1168.0), vec4(128.0, 128.0, 0.0, 0.0)\n#define _S43 vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 128.0, 128.0, 448.0)\n#define _S44 vec4(2032.0, 448.0, 128.0, 128.0), vec4(0.0, 0.0, 0.0, 0.0)\n#define _S45 vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 128.0)\n#define _S46 vec4(448.0, 128.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0)\n#define _S47 vec4(0.0, 2048.0, 2048.0, 7168.0), vec4(7168.0, 15872.0, 524272.0, 262112.0)\n#define _S48 vec4(65408.0, 32512.0, 32512.0, 65408.0), vec4(58240.0, 115136.0, 65600.0, 0.0)\n\n// ZX palette\nvec3 getColorFromPalette(int v)\n{\n    const float lbc = 0.752;\n    const float hbc = 1.0;\n    \n    if (v == 0)\n        return vec3(0.0, 0.0, 0.0);   // 0 black\n    else if (v == 1)\n        return vec3(0.0, 0.0, lbc);   // 1 blue  \n    else if (v == 2)\n        return vec3(lbc, 0.0, 0.0);   // 2 red\n    else if (v == 3)    \n        return vec3(lbc, 0.0, lbc);   // 3 magenta\n    else if (v == 4)\n        return vec3(0.0, lbc, 0.0);   // 4 green\n    else if (v == 5)\n        return vec3(0.0, lbc, lbc);   // 5 blue\n    else if (v == 6)\n        return vec3(lbc, lbc, 0.0);   // 6 yellow\n    else if (v == 7)\n        return vec3(lbc, lbc, lbc);   // 7 gray\n    else if (v == 8)\n        return vec3(0.0, 0.0, 0.0);   // 8 black\n    else if (v == 9)\n        return vec3(0.0, 0.0, hbc);   // 9 blue  \n    else if (v == 10)\n        return vec3(hbc, 0.0, 0.0);   // 10 red\n    else if (v == 11)    \n        return vec3(hbc, 0.0, hbc);   // 11 magenta\n    else if (v == 12)\n        return vec3(0.0, hbc, 0.0);   // 12 green\n    else if (v == 13)\n        return vec3(0.0, hbc, hbc);   // 13 blue\n    else if (v == 14)\n        return vec3(hbc, hbc, 0.0);   // 14 yellow\n    else\n        return vec3(hbc, hbc, hbc);   // 15 white        \n}\n\nvec4 getAttrCharByIndex(int idx)\n{\n    vec4 res = vec4(0.0, 0.0, 0.0, 0.0);\n    res = (idx == 36) ? _T : res;\n    res = (idx == 37) ? _H : res;\n    res = (idx == 38) ? _I : res;\n    res = (idx == 39) ? _S : res;\n    // 40\n    res = (idx == 41) ? _D : res;\n    res = (idx == 42) ? _E : res;\n    res = (idx == 43) ? _M : res;\n    res = (idx == 44) ? _O : res;\n    // 45\n    res = (idx == 46) ? _D : res;\n    res = (idx == 47) ? _E : res;\n    res = (idx == 48) ? _D : res;\n    res = (idx == 49) ? _I : res;\n    res = (idx == 50) ? _C : res;\n    res = (idx == 51) ? _A : res;\n    res = (idx == 52) ? _T : res;\n    res = (idx == 53) ? _E : res;\n    res = (idx == 54) ? _D : res;\n    // 55\n    res = (idx == 56) ? _T : res;\n    res = (idx == 57) ? _O : res;\n    // 58\n    res = (idx == 59) ? _A : res;\n    res = (idx == 60) ? _L : res;\n    res = (idx == 61) ? _L : res;\n    // 62\n    res = (idx == 63) ? _R : res;\n    res = (idx == 64) ? _E : res;\n    res = (idx == 65) ? _N : res;\n    res = (idx == 66) ? _D : res;\n    res = (idx == 67) ? _E : res;\n    res = (idx == 68) ? _R : res;\n    res = (idx == 69) ? _I : res;\n    res = (idx == 70) ? _N : res;\n    res = (idx == 71) ? _G : res;\n    // 72\n    res = (idx == 73) ? _P : res;\n    res = (idx == 74) ? _E : res;\n    res = (idx == 75) ? _O : res;\n    res = (idx == 76) ? _P : res;\n    res = (idx == 77) ? _L : res;\n    res = (idx == 78) ? _E : res;\n    // 79\n    res = (idx == 80) ? _I : res;\n    res = (idx == 81) ? _N : res;\n    // 82\n    res = (idx == 83) ? _T : res;\n    res = (idx == 84) ? _H : res;\n    res = (idx == 85) ? _E : res;\n    // 86\n    res = (idx == 87) ? _W : res;\n    res = (idx == 88) ? _O : res;\n    res = (idx == 89) ? _R : res;\n    res = (idx == 90) ? _L : res;\n    res = (idx == 91) ? _D : res;\n    res = (idx == 92) ? _EX : res;\n    // 93\n    // 94\n    res = (idx == 95) ? _HEART : res;\n    // 96\n    // 97\n    res = (idx == 98) ? _T : res;\n    res = (idx == 99) ? _H : res;\n    res = (idx == 100) ? _A : res;\n    res = (idx == 101) ? _N : res;\n    res = (idx == 102) ? _K : res;\n    // 103\n    res = (idx == 104) ? _Y : res;\n    res = (idx == 105) ? _O : res;\n    res = (idx == 106) ? _U : res;\n    // 107\n    res = (idx == 108) ? _F : res;\n    res = (idx == 109) ? _O : res;\n    res = (idx == 110) ? _R : res;\n    // 111\n    res = (idx == 112) ? _I : res;\n    res = (idx == 113) ? _N : res;\n    res = (idx == 114) ? _S : res;\n    res = (idx == 115) ? _P : res;\n    res = (idx == 116) ? _I : res;\n    res = (idx == 117) ? _R : res;\n    res = (idx == 118) ? _I : res;\n    res = (idx == 119) ? _N : res;\n    res = (idx == 120) ? _G : res;\n    // 121\n    res = (idx == 122) ? _M : res;\n    res = (idx == 123) ? _E : res;\n    res = (idx == 124) ? _EX : res;\n    // 125\n    // 126\n    res = (idx == 127) ? _HEART : res;\n    // 128\n    // 129\n    // 130\n    res = (idx == 131) ? _U : res;\n    // 132\n    res = (idx == 133) ? _R : res;\n    res = (idx == 134) ? _O : res;\n    res = (idx == 135) ? _C : res;\n    res = (idx == 136) ? _K : res;\n    res = (idx == 137) ? _S : res;\n    res = (idx == 138) ? _EX : res;\n    // 139\n    // 140\n    // 141\n    res = (idx == 142) ? _HEART : res;\n    // 143\n    // 144\n    res = (idx == 145) ? _HEART : res;\n    // 146\n    // 147\n    res = (idx == 148) ? _HEART : res;\n    \n    return res;\n}\n\nint getAttributeScroller(int ax, int ay, int frame)\n{\n    frame = frame;\n    frame = imod(frame, 1216);\n    \n    ax = ax + frame;\n    \n    int lx = imod(ax, 8);\n    int ly = ay - 8;\n    \n    int chPos = ax / 8;\n    \n    vec4 bits = getAttrCharByIndex(chPos);\n    \n    int clr = 4;\n    if (chPos == 95|| chPos == 127 || chPos == 142 || chPos == 145 || chPos == 148)\n    {\n        clr = 2;\n    }\n    \n    int res = (getCharPixel(lx, ly, bits) > 0.0) ? clr : 0;\n\n    return res;\n}\n\n// Get current attribute value\nvoid getAttributeColors(int ax, int ay, int frame, inout int background, inout int foreground)\n{\n    background = 0;\n    foreground = 7;\n    \n    if (ax > 8 && ax < 22 && ay > 0 && ay <= 7)\n    {\n      background = 0;\n      foreground = imod(frame * 0.25,7);        \n    }\n    \n    if (ay >= 8 && ay < 16)\n    {\n      background = getAttributeScroller(ax, ay, frame);\n      foreground = 0;    \n    }\n   \n    \n    if (ay >= 16)\n    {\n      background = 0;\n      foreground = 6;        \n    }\n    \n    return;\n}\n\n//\nfloat getTopSprites(int x, int y, int frame)\n{\n    int _x = x;\n    \n    x = x + int(cos(float(frame+y) * 0.05) * 8.0);\n    \n    int kOffset = 80;\n    int kHOffset = 14;\n    \n    // joker\n    int lx = x - kOffset;\n    int ly = y - kHOffset;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S18);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S19);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S20);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S21);\n        }\n        \n        if (ly >= 32 && ly < 40)\n        {\n          return getSpritePixel(lx, ly-32, _S34);\n        }\n        if (ly >= 40 && ly < 48)\n        {\n          return getSpritePixel(lx, ly-40, _S35);\n        }\n        \n    }\n    \n    lx = x - kOffset - 24;\n    ly = y - kHOffset;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S22);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S23);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S24);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S25);\n        }\n    }\n\n    lx = x - kOffset - 24 - 24;\n    ly = y - kHOffset;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S26);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S27);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S28);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S29);\n        }\n    }\n\n    lx = x - kOffset - 24 - 24 - 24;\n    ly = y - kHOffset;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S30);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S31);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S32);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S33);\n        }\n        \n        if (ly >= 32 && ly < 40)\n        {\n          return getSpritePixel(lx, ly-32, _S36);\n        }\n        if (ly >= 40 && ly < 48)\n        {\n          return getSpritePixel(lx, ly-40, _S37);\n        }\n       \n    }\n    \n    lx = _x - 108;\n    ly = y - 0;\n    \n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S38);\n        }\n    }\n    \n    // star \n    int pFrameX = imod((frame / 32), 4);\n    int pFrameY = imod(frame / 32, 3);\n    \n    int px = 16;\n    px = (pFrameX == 0) ? 39 : px;\n    px = (pFrameX == 1) ? 180 : px;\n    px = (pFrameX == 2) ? 220 : px;\n    \n    int py = 4;\n    py = (pFrameY == 0) ? 30 : py;\n    py = (pFrameY == 1) ? 16 : py;\n    \n    int sFrame = imod((frame/4), 16);\n    //sFrame = 3;\n    lx = _x - px;\n    ly = y - py;\n    \n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n            if (sFrame == 0)\n              return getSpritePixel(lx, ly, _S43);\n            if (sFrame == 1)\n              return getSpritePixel(lx, ly, _S41);\n            if (sFrame == 2)\n              return getSpritePixel(lx, ly, _S39);\n            if (sFrame == 3)\n              return getSpritePixel(lx, ly, _S41);\n            if (sFrame == 4)\n              return getSpritePixel(lx, ly, _S43);\n            \n        }\n        if (ly >= 8 && ly < 16)           \n        {\n            if (sFrame == 0)\n              return getSpritePixel(lx, ly-8, _S44);\n            if (sFrame == 1)\n              return getSpritePixel(lx, ly-8, _S42);\n            if (sFrame == 2)\n              return getSpritePixel(lx, ly-8, _S40);\n            if (sFrame == 3)\n              return getSpritePixel(lx, ly-8, _S42);\n            if (sFrame == 4)\n              return getSpritePixel(lx, ly-8, _S44);\n        }\n        \n    }\n\n    return 0.0;\n}\n\n\nfloat getSprites(int x, int y, int frame)\n{\n    // sprite 1\n    int lx = x - 10;\n    int ly = y - 64;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S0);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S1);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S2);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S3);\n        }\n        if (ly >= 32 && ly < 40)\n        {\n          return getSpritePixel(lx, ly-32, _S4);\n        }\n        if (ly >= 40 && ly < 48)\n        {\n          return getSpritePixel(lx, ly-40, _S5);\n        }\n    }\n    \n    // sprite 2\n    lx = x - 48;\n    ly = y - 72;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S6);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S7);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S8);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S9);\n        }\n        if (ly >= 32 && ly < 40)\n        {\n          return getSpritePixel(lx, ly-32, _S10);\n        }\n        if (ly >= 40 && ly < 48)\n        {\n          return getSpritePixel(lx, ly-40, _S11);\n        }\n    }\n\n    // sprite 3\n    lx = x - 196;\n    ly = y - 64;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S12);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S13);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S14);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S15);\n        }\n        if (ly >= 32 && ly < 40)\n        {\n          return getSpritePixel(lx, ly-32, _S16);\n        }\n        if (ly >= 40 && ly < 48)\n        {\n          return getSpritePixel(lx, ly-40, _S17);\n        }\n    }\n\n    // sprite 4\n    lx = x - 132;\n    ly = y - 68;\n    if (lx >= 0 && lx < 24)\n    {\n        if (ly >= 0 && ly < 8)\n        {\n          return getSpritePixel(lx, ly, _S6);\n        }\n        if (ly >= 8 && ly < 16)\n        {\n          return getSpritePixel(lx, ly-8, _S7);\n        }\n        if (ly >= 16 && ly < 24)\n        {\n          return getSpritePixel(lx, ly-16, _S8);\n        }\n        if (ly >= 24 && ly < 32)\n        {\n          return getSpritePixel(lx, ly-24, _S9);\n        }\n        if (ly >= 32 && ly < 40)\n        {\n          return getSpritePixel(lx, ly-32, _S10);\n        }\n        if (ly >= 40 && ly < 48)\n        {\n          return getSpritePixel(lx, ly-40, _S11);\n        }\n    }\n\n    return 0.0;\n}\n\n\nvec4 getCharBitsByIndex(int idx)\n{\n    vec4 res = vec4(0.0, 0.0, 0.0, 0.0);\n    res = (idx == 36) ? _H : res;\n    res = (idx == 37) ? _E : res;\n    res = (idx == 38) ? _L : res;\n    res = (idx == 39) ? _L : res;\n    res = (idx == 40) ? _O : res;\n    res = (idx == 41) ? _EX : res;\n    // 42\n    res = (idx == 43) ? _H : res;\n    res = (idx == 44) ? _O : res;\n    res = (idx == 45) ? _L : res;\n    res = (idx == 46) ? _A : res;\n    res = (idx == 47) ? _EX : res;\n    // 48\n    res = (idx == 49) ? _S : res;\n    res = (idx == 50) ? _E : res;\n    res = (idx == 51) ? _R : res;\n    res = (idx == 52) ? _G : res;\n    res = (idx == 53) ? _E : res;\n    res = (idx == 54) ? _Y : res;\n    // 55\n    res = (idx == 56) ? _M : res;\n    res = (idx == 57) ? _A : res;\n    res = (idx == 58) ? _K : res;\n    res = (idx == 59) ? _E : res;\n    res = (idx == 60) ? _E : res;\n    res = (idx == 61) ? _V : res;\n    // 62\n    res = (idx == 63) ? _I : res;\n    res = (idx == 64) ? _S : res;\n    // 65\n    res = (idx == 66) ? _P : res;\n    res = (idx == 67) ? _R : res;\n    res = (idx == 68) ? _O : res;\n    res = (idx == 69) ? _U : res;\n    res = (idx == 70) ? _D : res;\n    // 71\n    res = (idx == 72) ? _T : res;\n    res = (idx == 73) ? _O : res;\n    // 74\n    res = (idx == 75) ? _P : res;\n    res = (idx == 76) ? _R : res;\n    res = (idx == 77) ? _E : res;\n    res = (idx == 78) ? _S : res;\n    res = (idx == 79) ? _E : res;\n    res = (idx == 80) ? _N : res;\n    res = (idx == 81) ? _T : res;\n    // 82\n    res = (idx == 83) ? _A : res;\n    // 84\n    res = (idx == 85) ? _S : res;\n    res = (idx == 86) ? _H : res;\n    res = (idx == 87) ? _A : res;\n    res = (idx == 88) ? _D : res;\n    res = (idx == 89) ? _E : res;\n    res = (idx == 90) ? _R : res;\n    res = (idx == 91) ? _T : res;\n    res = (idx == 92) ? _O : res;\n    res = (idx == 93) ? _Y : res;\n    // 94\n    res = (idx == 95) ? _T : res;\n    res = (idx == 96) ? _R : res;\n    res = (idx == 97) ? _I : res;\n    res = (idx == 98) ? _B : res;\n    res = (idx == 99) ? _U : res;\n    res = (idx == 100) ? _T : res;\n    res = (idx == 101) ? _E : res;\n    // 102\n    res = (idx == 103) ? _T : res;\n    res = (idx == 104) ? _O : res;\n    // 105\n    res = (idx == 106) ? _Z : res;\n    res = (idx == 107) ? _X : res;\n    // 108\n    res = (idx == 109) ? _S : res;\n    res = (idx == 110) ? _P : res;\n    res = (idx == 111) ? _E : res;\n    res = (idx == 112) ? _C : res;\n    res = (idx == 113) ? _T : res;\n    res = (idx == 114) ? _R : res;\n    res = (idx == 115) ? _U : res;\n    res = (idx == 116) ? _M : res;\n    res = (idx == 117) ? _EX : res;\n    // 118\n    // 119\n    // 120\n    // 121\n    // 122\n    // 123\n    // 124\n    res = (idx == 125) ? _S : res;\n    res = (idx == 126) ? _P : res;\n    res = (idx == 127) ? _E : res;\n    res = (idx == 128) ? _C : res;\n    res = (idx == 129) ? _C : res;\n    res = (idx == 130) ? _Y : res;\n    // 131\n    res = (idx == 132) ? _R : res;\n    res = (idx == 133) ? _U : res;\n    res = (idx == 134) ? _L : res;\n    res = (idx == 135) ? _E : res;\n    res = (idx == 136) ? _Z : res;\n    // 137\n    res = (idx == 138) ? _4 : res;\n    res = (idx == 139) ? _E : res;\n    res = (idx == 140) ? _V : res;\n    res = (idx == 141) ? _E : res;\n    res = (idx == 142) ? _R : res;\n    res = (idx == 143) ? _EX : res;\n    // 144\n    // 145\n    // 146\n    // 147\n    // 148\n    // 149\n    // 150\n    res = (idx == 151) ? _K : res;\n    res = (idx == 152) ? _U : res;\n    res = (idx == 153) ? _D : res;\n    res = (idx == 154) ? _O : res;\n    res = (idx == 155) ? _S : res;\n    // 156\n    res = (idx == 157) ? _T : res;\n    res = (idx == 158) ? _O : res;\n    // 159\n    res = (idx == 160) ? _R : res;\n    res = (idx == 161) ? _O : res;\n    res = (idx == 162) ? _B : res;\n    res = (idx == 163) ? _L : res;\n    res = (idx == 164) ? _O : res;\n    res = (idx == 165) ? _X : res;\n    // 166\n    res = (idx == 167) ? _R : res;\n    res = (idx == 168) ? _E : res;\n    res = (idx == 169) ? _N : res;\n    res = (idx == 170) ? _D : res;\n    res = (idx == 171) ? _E : res;\n    res = (idx == 172) ? _R : res;\n    res = (idx == 173) ? _I : res;\n    res = (idx == 174) ? _N : res;\n    res = (idx == 175) ? _G : res;\n    // 176\n    res = (idx == 177) ? _T : res;\n    res = (idx == 178) ? _E : res;\n    res = (idx == 179) ? _A : res;\n    res = (idx == 180) ? _M : res;\n    res = (idx == 181) ? _EX : res;\n    // 182\n    res = (idx == 183) ? _Z : res;\n    res = (idx == 184) ? _E : res;\n    res = (idx == 185) ? _U : res;\n    res = (idx == 186) ? _X : res;\n    res = (idx == 187) ? _COMMA : res;\n    // 188\n    res = (idx == 189) ? _K : res;\n    res = (idx == 190) ? _A : res;\n    res = (idx == 191) ? _S : res;\n    res = (idx == 192) ? _COMMA : res;\n    // 193\n    res = (idx == 194) ? _A : res;\n    res = (idx == 195) ? _N : res;\n    res = (idx == 196) ? _G : res;\n    res = (idx == 197) ? _E : res;\n    res = (idx == 198) ? _L : res;\n    res = (idx == 199) ? _O : res;\n    res = (idx == 200) ? _COMMA : res;\n    // 201\n    res = (idx == 202) ? _W : res;\n    res = (idx == 203) ? _R : res;\n    res = (idx == 204) ? _A : res;\n    res = (idx == 205) ? _I : res;\n    res = (idx == 206) ? _T : res;\n    res = (idx == 207) ? _H : res;\n    res = (idx == 208) ? _COMMA : res;\n    // 209\n    res = (idx == 210) ? _B : res;\n    res = (idx == 211) ? _O : res;\n    res = (idx == 212) ? _N : res;\n    res = (idx == 213) ? _I : res;\n    res = (idx == 214) ? _COMMA : res;\n    // 215\n    res = (idx == 216) ? _J : res;\n    res = (idx == 217) ? _O : res;\n    res = (idx == 218) ? _S : res;\n    res = (idx == 219) ? _E : res;\n    res = (idx == 220) ? _P : res;\n    res = (idx == 221) ? _H : res;\n    res = (idx == 222) ? _COMMA : res;\n    // 223\n    res = (idx == 224) ? _M : res;\n    res = (idx == 225) ? _I : res;\n    res = (idx == 226) ? _C : res;\n    res = (idx == 227) ? _H : res;\n    res = (idx == 228) ? _A : res;\n    res = (idx == 229) ? _L : res;\n    res = (idx == 230) ? _COMMA : res;\n    // 231\n    res = (idx == 232) ? _L : res;\n    res = (idx == 233) ? _U : res;\n    res = (idx == 234) ? _N : res;\n    res = (idx == 235) ? _A : res;\n    res = (idx == 236) ? _COMMA : res;\n    // 237\n    res = (idx == 238) ? _R : res;\n    res = (idx == 239) ? _Y : res;\n    res = (idx == 240) ? _A : res;\n    res = (idx == 241) ? _N : res;\n    res = (idx == 242) ? _DOT : res;\n    // 243\n    // 244\n    // 245\n    // 246\n    res = (idx == 247) ? _H : res;\n    res = (idx == 248) ? _E : res;\n    res = (idx == 249) ? _L : res;\n    res = (idx == 250) ? _L : res;\n    res = (idx == 251) ? _O : res;\n    // 252\n    res = (idx == 253) ? _A : res;\n    res = (idx == 254) ? _N : res;\n    res = (idx == 255) ? _D : res;\n    // 256\n    res = (idx == 257) ? _G : res;\n    res = (idx == 258) ? _R : res;\n    res = (idx == 259) ? _E : res;\n    res = (idx == 260) ? _E : res;\n    res = (idx == 261) ? _T : res;\n    res = (idx == 262) ? _I : res;\n    res = (idx == 263) ? _N : res;\n    res = (idx == 264) ? _G : res;\n    res = (idx == 265) ? _S : res;\n    // 266\n    res = (idx == 267) ? _T : res;\n    res = (idx == 268) ? _O : res;\n    // 269\n    res = (idx == 270) ? _A : res;\n    res = (idx == 271) ? _R : res;\n    res = (idx == 272) ? _U : res;\n    res = (idx == 273) ? _S : res;\n    res = (idx == 274) ? _L : res;\n    res = (idx == 275) ? _A : res;\n    res = (idx == 276) ? _N : res;\n    res = (idx == 277) ? _COMMA : res;\n    // 278\n    res = (idx == 279) ? _S : res;\n    res = (idx == 280) ? _I : res;\n    res = (idx == 281) ? _M : res;\n    res = (idx == 282) ? _0 : res;\n    res = (idx == 283) ? _N : res;\n    res = (idx == 284) ? _S : res;\n    res = (idx == 285) ? _A : res;\n    res = (idx == 286) ? _Y : res;\n    res = (idx == 287) ? _S : res;\n    res = (idx == 288) ? _COMMA : res;\n    // 289\n    res = (idx == 290) ? _L : res;\n    res = (idx == 291) ? _O : res;\n    res = (idx == 292) ? _O : res;\n    res = (idx == 293) ? _K : res;\n    res = (idx == 294) ? _4 : res;\n    res = (idx == 295) ? _A : res;\n    res = (idx == 296) ? _W : res;\n    res = (idx == 297) ? _H : res;\n    res = (idx == 298) ? _I : res;\n    res = (idx == 299) ? _L : res;\n    res = (idx == 300) ? _E : res;\n    res = (idx == 301) ? _COMMA : res;\n    // 302\n    res = (idx == 303) ? _A : res;\n    res = (idx == 304) ? _N : res;\n    res = (idx == 305) ? _D : res;\n    res = (idx == 306) ? _S : res;\n    res = (idx == 307) ? _O : res;\n    res = (idx == 308) ? _F : res;\n    res = (idx == 309) ? _T : res;\n    res = (idx == 310) ? _COMMA : res;\n    // 311\n    res = (idx == 312) ? _S : res;\n    res = (idx == 313) ? _H : res;\n    res = (idx == 314) ? _O : res;\n    res = (idx == 315) ? _D : res;\n    res = (idx == 316) ? _A : res;\n    res = (idx == 317) ? _N : res;\n    res = (idx == 318) ? _COMMA : res;\n    // 319\n    res = (idx == 320) ? _T : res;\n    res = (idx == 321) ? _A : res;\n    res = (idx == 322) ? _G : res;\n    res = (idx == 323) ? _V : res;\n    res = (idx == 324) ? _A : res;\n    res = (idx == 325) ? _R : res;\n    res = (idx == 326) ? _D : res;\n    res = (idx == 327) ? _COMMA : res;\n    // 328\n    res = (idx == 329) ? _R : res;\n    res = (idx == 330) ? _U : res;\n    res = (idx == 331) ? _D : res;\n    res = (idx == 332) ? _Y : res;\n    res = (idx == 333) ? _B : res;\n    res = (idx == 334) ? _E : res;\n    res = (idx == 335) ? _A : res;\n    res = (idx == 336) ? _R : res;\n    res = (idx == 337) ? _COMMA : res;\n    // 338\n    res = (idx == 339) ? _I : res;\n    res = (idx == 340) ? _R : res;\n    res = (idx == 341) ? _O : res;\n    res = (idx == 342) ? _N : res;\n    res = (idx == 343) ? _P : res;\n    res = (idx == 344) ? _E : res;\n    res = (idx == 345) ? _T : res;\n    res = (idx == 346) ? _E : res;\n    res = (idx == 347) ? _R : res;\n    res = (idx == 348) ? _COMMA : res;\n    // 349\n    res = (idx == 350) ? _D : res;\n    res = (idx == 351) ? _D : res;\n    res = (idx == 352) ? _I : res;\n    res = (idx == 353) ? _M : res;\n    res = (idx == 354) ? _A : res;\n    res = (idx == 355) ? _COMMA : res;\n    // 356\n    res = (idx == 357) ? _L : res;\n    res = (idx == 358) ? _O : res;\n    res = (idx == 359) ? _Y : res;\n    res = (idx == 360) ? _S : res;\n    res = (idx == 361) ? _O : res;\n    res = (idx == 362) ? _COMMA : res;\n    // 363\n    res = (idx == 364) ? _W : res;\n    res = (idx == 365) ? _A : res;\n    res = (idx == 366) ? _T : res;\n    res = (idx == 367) ? _COMMA : res;\n    // 368\n    res = (idx == 369) ? _T : res;\n    res = (idx == 370) ? _O : res;\n    res = (idx == 371) ? _D : res;\n    res = (idx == 372) ? _A : res;\n    res = (idx == 373) ? _C : res;\n    res = (idx == 374) ? _E : res;\n    res = (idx == 375) ? _COMMA : res;\n    // 376\n    res = (idx == 377) ? _D : res;\n    res = (idx == 378) ? _A : res;\n    res = (idx == 379) ? _G : res;\n    res = (idx == 380) ? _G : res;\n    res = (idx == 381) ? _E : res;\n    res = (idx == 382) ? _R : res;\n    res = (idx == 383) ? _COMMA : res;\n    // 384\n    res = (idx == 385) ? _A : res;\n    res = (idx == 386) ? _R : res;\n    res = (idx == 387) ? _T : res;\n    res = (idx == 388) ? _3 : res;\n    res = (idx == 389) ? _2 : res;\n    res = (idx == 390) ? _1 : res;\n    res = (idx == 391) ? _COMMA : res;\n    // 392\n    res = (idx == 393) ? _C : res;\n    res = (idx == 394) ? _O : res;\n    res = (idx == 395) ? _O : res;\n    res = (idx == 396) ? _P : res;\n    res = (idx == 397) ? _E : res;\n    res = (idx == 398) ? _R : res;\n    res = (idx == 399) ? _F : res;\n    res = (idx == 400) ? _E : res;\n    res = (idx == 401) ? _E : res;\n    res = (idx == 402) ? _T : res;\n    res = (idx == 403) ? _COMMA : res;\n    // 404\n    res = (idx == 405) ? _B : res;\n    res = (idx == 406) ? _O : res;\n    res = (idx == 407) ? _M : res;\n    res = (idx == 408) ? _B : res;\n    res = (idx == 409) ? _O : res;\n    res = (idx == 410) ? _M : res;\n    res = (idx == 411) ? _COMMA : res;\n    // 412\n    res = (idx == 413) ? _Z : res;\n    res = (idx == 414) ? _E : res;\n    res = (idx == 415) ? _M : res;\n    res = (idx == 416) ? _I : res;\n    res = (idx == 417) ? _N : res;\n    res = (idx == 418) ? _COMMA : res;\n    // 419\n    res = (idx == 420) ? _Z : res;\n    res = (idx == 421) ? _COMMA : res;\n    // 422\n    res = (idx == 423) ? _B : res;\n    res = (idx == 424) ? _A : res;\n    res = (idx == 425) ? _H : res;\n    res = (idx == 426) ? _O : res;\n    res = (idx == 427) ? _COMMA : res;\n    // 428\n    res = (idx == 429) ? _S : res;\n    res = (idx == 430) ? _P : res;\n    res = (idx == 431) ? _A : res;\n    res = (idx == 432) ? _W : res;\n    res = (idx == 433) ? _N : res;\n    res = (idx == 434) ? _G : res;\n    res = (idx == 435) ? _A : res;\n    res = (idx == 436) ? _R : res;\n    res = (idx == 437) ? _R : res;\n    res = (idx == 438) ? _E : res;\n    res = (idx == 439) ? _T : res;\n    res = (idx == 440) ? _COMMA : res;\n    // 441\n    res = (idx == 442) ? _A : res;\n    res = (idx == 443) ? _S : res;\n    res = (idx == 444) ? _T : res;\n    res = (idx == 445) ? _R : res;\n    res = (idx == 446) ? _O : res;\n    res = (idx == 447) ? _L : res;\n    res = (idx == 448) ? _O : res;\n    res = (idx == 449) ? _G : res;\n    res = (idx == 450) ? _E : res;\n    res = (idx == 451) ? _R : res;\n    res = (idx == 452) ? _COMMA : res;\n    // 453\n    res = (idx == 454) ? _B : res;\n    res = (idx == 455) ? _A : res;\n    res = (idx == 456) ? _N : res;\n    res = (idx == 457) ? _D : res;\n    res = (idx == 458) ? _U : res;\n    res = (idx == 459) ? _R : res;\n    res = (idx == 460) ? _E : res;\n    res = (idx == 461) ? _S : res;\n    res = (idx == 462) ? _COMMA : res;\n    // 463\n    res = (idx == 464) ? _B : res;\n    res = (idx == 465) ? _I : res;\n    res = (idx == 466) ? _N : res;\n    res = (idx == 467) ? _S : res;\n    res = (idx == 468) ? _T : res;\n    res = (idx == 469) ? _R : res;\n    res = (idx == 470) ? _E : res;\n    res = (idx == 471) ? _A : res;\n    res = (idx == 472) ? _M : res;\n    res = (idx == 473) ? _COMMA : res;\n    // 474\n    res = (idx == 475) ? _M : res;\n    res = (idx == 476) ? _U : res;\n    res = (idx == 477) ? _X : res;\n    res = (idx == 478) ? _A : res;\n    res = (idx == 479) ? _H : res;\n    res = (idx == 480) ? _U : res;\n    res = (idx == 481) ? _K : res;\n    res = (idx == 482) ? _COMMA : res;\n    // 483\n    res = (idx == 484) ? _D : res;\n    res = (idx == 485) ? _A : res;\n    res = (idx == 486) ? _R : res;\n    res = (idx == 487) ? _K : res;\n    res = (idx == 488) ? _M : res;\n    res = (idx == 489) ? _I : res;\n    res = (idx == 490) ? _K : res;\n    res = (idx == 491) ? _E : res;\n    res = (idx == 492) ? _COMMA : res;\n    // 493\n    res = (idx == 494) ? _F : res;\n    res = (idx == 495) ? _R : res;\n    res = (idx == 496) ? _U : res;\n    res = (idx == 497) ? _S : res;\n    res = (idx == 498) ? _T : res;\n    res = (idx == 499) ? _U : res;\n    res = (idx == 500) ? _M : res;\n    res = (idx == 501) ? _COMMA : res;\n    // 502\n    res = (idx == 503) ? _M : res;\n    res = (idx == 504) ? _A : res;\n    res = (idx == 505) ? _X : res;\n    // 506\n    res = (idx == 507) ? _P : res;\n    res = (idx == 508) ? _E : res;\n    res = (idx == 509) ? _R : res;\n    res = (idx == 510) ? _M : res;\n    res = (idx == 511) ? _I : res;\n    res = (idx == 512) ? _N : res;\n    res = (idx == 513) ? _O : res;\n    res = (idx == 514) ? _V : res;\n    res = (idx == 515) ? _COMMA : res;\n    // 516\n    res = (idx == 517) ? _M : res;\n    res = (idx == 518) ? _A : res;\n    res = (idx == 519) ? _X : res;\n    res = (idx == 520) ? _X : res;\n    res = (idx == 521) ? _COMMA : res;\n    // 522\n    res = (idx == 523) ? _D : res;\n    res = (idx == 524) ? _W : res;\n    res = (idx == 525) ? _A : res;\n    res = (idx == 526) ? _L : res;\n    res = (idx == 527) ? _X : res;\n    // 528\n    res = (idx == 529) ? _A : res;\n    res = (idx == 530) ? _N : res;\n    res = (idx == 531) ? _D : res;\n    // 532\n    res = (idx == 533) ? _M : res;\n    res = (idx == 534) ? _A : res;\n    res = (idx == 535) ? _N : res;\n    res = (idx == 536) ? _Y : res;\n    res = (idx == 537) ? _MINUS : res;\n    res = (idx == 538) ? _M : res;\n    res = (idx == 539) ? _A : res;\n    res = (idx == 540) ? _N : res;\n    res = (idx == 541) ? _Y : res;\n    // 542\n    res = (idx == 543) ? _O : res;\n    res = (idx == 544) ? _T : res;\n    res = (idx == 545) ? _H : res;\n    res = (idx == 546) ? _E : res;\n    res = (idx == 547) ? _R : res;\n    res = (idx == 548) ? _S : res;\n    // 549\n    res = (idx == 550) ? _W : res;\n    res = (idx == 551) ? _H : res;\n    res = (idx == 552) ? _O : res;\n    res = (idx == 553) ? _M : res;\n    // 554\n    res = (idx == 555) ? _I : res;\n    // 556\n    res = (idx == 557) ? _F : res;\n    res = (idx == 558) ? _O : res;\n    res = (idx == 559) ? _R : res;\n    res = (idx == 560) ? _G : res;\n    res = (idx == 561) ? _O : res;\n    res = (idx == 562) ? _T : res;\n    // 563\n    res = (idx == 564) ? _T : res;\n    res = (idx == 565) ? _O : res;\n    // 566\n    res = (idx == 567) ? _M : res;\n    res = (idx == 568) ? _E : res;\n    res = (idx == 569) ? _N : res;\n    res = (idx == 570) ? _T : res;\n    res = (idx == 571) ? _I : res;\n    res = (idx == 572) ? _O : res;\n    res = (idx == 573) ? _N : res;\n    res = (idx == 574) ? _DOT : res;\n    // 575\n    // 576\n    // 577\n    // 578\n    // 579\n    // 580\n    // 581\n    // 582\n    // 583\n    // 584\n    // 585\n    res = (idx == 586) ? _S : res;\n    res = (idx == 587) ? _P : res;\n    res = (idx == 588) ? _E : res;\n    res = (idx == 589) ? _C : res;\n    res = (idx == 590) ? _I : res;\n    res = (idx == 591) ? _A : res;\n    res = (idx == 592) ? _L : res;\n    // 593\n    res = (idx == 594) ? _T : res;\n    res = (idx == 595) ? _H : res;\n    res = (idx == 596) ? _A : res;\n    res = (idx == 597) ? _N : res;\n    res = (idx == 598) ? _K : res;\n    res = (idx == 599) ? _S : res;\n    // 600\n    res = (idx == 601) ? _T : res;\n    res = (idx == 602) ? _O : res;\n    // 603\n    res = (idx == 604) ? _M : res;\n    res = (idx == 605) ? _Y : res;\n    // 606\n    res = (idx == 607) ? _F : res;\n    res = (idx == 608) ? _A : res;\n    res = (idx == 609) ? _M : res;\n    res = (idx == 610) ? _I : res;\n    res = (idx == 611) ? _L : res;\n    res = (idx == 612) ? _Y : res;\n    res = (idx == 613) ? _EX : res;\n    // 614\n    // 615\n    res = (idx == 616) ? _HEART : res;\n    // 617\n    res = (idx == 618) ? _HEART : res;\n    // 619\n    res = (idx == 620) ? _HEART : res;\n    // 621\n    res = (idx == 622) ? _A : res;\n    res = (idx == 623) ? _I : res;\n    res = (idx == 624) ? _D : res;\n    res = (idx == 625) ? _A : res;\n    res = (idx == 626) ? _COMMA : res;\n    // 627\n    res = (idx == 628) ? _A : res;\n    res = (idx == 629) ? _R : res;\n    res = (idx == 630) ? _S : res;\n    res = (idx == 631) ? _E : res;\n    res = (idx == 632) ? _N : res;\n    res = (idx == 633) ? _I : res;\n    res = (idx == 634) ? _I : res;\n    // 635\n    res = (idx == 636) ? _A : res;\n    res = (idx == 637) ? _N : res;\n    res = (idx == 638) ? _D : res;\n    // 639\n    res = (idx == 640) ? _M : res;\n    res = (idx == 641) ? _A : res;\n    res = (idx == 642) ? _T : res;\n    res = (idx == 643) ? _V : res;\n    res = (idx == 644) ? _E : res;\n    res = (idx == 645) ? _I : res;\n    // 646\n    res = (idx == 647) ? _HEART : res;\n    // 648\n    res = (idx == 649) ? _HEART : res;\n    // 650\n    res = (idx == 651) ? _HEART : res;\n    // 652\n    // 653\n    // 654\n    // 655\n    // 656\n    // 657\n    res = (idx == 658) ? _T : res;\n    res = (idx == 659) ? _H : res;\n    res = (idx == 660) ? _A : res;\n    res = (idx == 661) ? _T : res;\n    // 662\n    res = (idx == 663) ? _A : res;\n    res = (idx == 664) ? _L : res;\n    res = (idx == 665) ? _L : res;\n    // 666\n    res = (idx == 667) ? _F : res;\n    res = (idx == 668) ? _O : res;\n    res = (idx == 669) ? _L : res;\n    res = (idx == 670) ? _K : res;\n    res = (idx == 671) ? _S : res;\n    res = (idx == 672) ? _EX : res;\n    // 673\n    res = (idx == 674) ? _T : res;\n    res = (idx == 675) ? _H : res;\n    res = (idx == 676) ? _A : res;\n    res = (idx == 677) ? _N : res;\n    res = (idx == 678) ? _K : res;\n    // 679\n    res = (idx == 680) ? _Y : res;\n    res = (idx == 681) ? _O : res;\n    res = (idx == 682) ? _U : res;\n    // 683\n    res = (idx == 684) ? _F : res;\n    res = (idx == 685) ? _O : res;\n    res = (idx == 686) ? _R : res;\n    // 687\n    res = (idx == 688) ? _W : res;\n    res = (idx == 689) ? _A : res;\n    res = (idx == 690) ? _T : res;\n    res = (idx == 691) ? _C : res;\n    res = (idx == 692) ? _H : res;\n    res = (idx == 693) ? _I : res;\n    res = (idx == 694) ? _N : res;\n    res = (idx == 695) ? _G : res;\n    res = (idx == 696) ? _EX : res;\n    res = (idx == 697) ? _EX : res;\n    res = (idx == 698) ? _EX : res;\n    \n    return res;\n}\n\n\n\nfloat getBottomScroller(int x, int y, int frame)\n{\n    frame = imod(frame, 2816);\n    \n    // left to right offset\n    int sx = x +(frame * 2);\n    \n    //linear scroller\n    //int kJumpSpeed = 100;\n    int kJumpSpeed = 1;\n    \n    int chPos = sx / 8;\n    \n    // cosine height\n    float _x = float(chPos + (frame * kJumpSpeed));\n    _x = _x * 0.09;\n    \n    //linear scroller\n    //_x = _x * 0.001;\n\n    //get character local x,y\n    int _y = int(164.0 + cos(_x) * 28.0);\n    \n    int local_y = (y+8) - _y;\n    int local_x = imod(sx, 8);\n    \n    float ch_pixel = 0.0;\n    if (local_y >= 0 && local_y < 8)\n    {\n        vec4 ch_bits = getCharBitsByIndex(chPos);\n        ch_pixel = getCharPixel(local_x, local_y, ch_bits);\n    }\n\n //  return ch_pixel;\n    \n    // scroll grid\n    vec2 ab = (imod(frame,2) == 0) ? vec2(0.0, 1.0) : vec2(1.0, 0.0);\n\n    int iy = imod(frame+1, 8);\n    int ix = -imod(frame+1, 8);\n    \n    float grid_pixel = 0.0;\n    if (imod(iy+y, 8) == 0)\n    {\n        grid_pixel = ((imod(x, 2) > 0) ? ab.y : ab.x);\n    }\n    \n    if (imod(ix+x, 8) == 0)\n    {\n        grid_pixel = ((imod(y, 2) > 0) ? ab.y : ab.x);\n     }\n        \n    return max(grid_pixel, ch_pixel);\n}\n\n\n// border (multi-color effect)\nint getBorderColor(int x, int y, int frame)\n{\n    return 7;\n    //y = y + (frame*5);\n    //int v = (y/4);\n    \n    //int vv = 13 + int(55.0 * hash(vec2(v, v)));\n    \n    //return 1 + imod(vv, 7);\n}\n\n//\nvec3 getColor(vec2 fragCoord)\n{\n    float fFrame = (iTime * kRefreshRate);\n    fFrame = fFrame - fract(fFrame);\n    int frame = int(fFrame);\n    \n    float aspect = iResolution.x / iResolution.y;\n    float zxAspect = (kResolution.x / kResolution.y);\n    \n    vec2 borderMul = vec2((zxAspect / aspect), 1);\n    borderMul = borderMul * 0.95;\n    \n    // screen size in pixels (without border)\n    vec2 screenSize = (iResolution.xy * borderMul);\n    \n    // virtual pixel size in real pixels\n    vec2 vPixelSize = screenSize / kResolution;\n    \n    // virtual pixel size to integers\n    vPixelSize = vPixelSize - fract(vPixelSize);\n    vPixelSize = max(vPixelSize, kMinVirtualPixelSize);\n    //vPixelSize = kMinVirtualPixelSize;\n    \n    // compute border offset\n    vec2 borderOffset = (iResolution.xy - vPixelSize * kResolution) * 0.5; \n    \n    // swap horizontal\n    fragCoord.y = iResolution.y - fragCoord.y;\n    \n    // apply border offset\n    fragCoord.xy -= borderOffset;\n    \n    // convert fragment coordinates to virtual pixel coords\n    vec2 v = fragCoord / vPixelSize;\n    v = v - fract(v);\n    \n    // attrbute coordinate\n    vec2 av = v / vec2(8.0, 8.0);\n    av = av - fract(av);\n    \n    // \n    int px = int(v.x);\n    int py = int(v.y);\n    \n    int ax = int(av.x);\n    int ay = int(av.y);\n    \n    // get border color\n    if (v.x >= kResolution.x || v.y >= kResolution.y || v.x < 0.0 || v.y < 0.0)\n    {\n        vec3 borderClr = getColorFromPalette(getBorderColor(px, py, frame));\n        \n        const float ml = 0.1;\n        float v0 = saturate((v.x - 286.0) * -ml);\n        float v1 = saturate((v.x + 30.0) * ml);\n        float v2 = saturate((v.y + 30.0) * ml);\n        float v3 = saturate((v.y - 222.0) * -ml);\n        //float vig = min(min(min(v0, v1), v2), v3);\n        float vig = v0*v1*v2*v3;\n        \n        return borderClr * vig;\n    }\n\n    // get pixel bit\n    float pixelBit = 0.0;\n\n    if (py >= 0 && py < 64)\n    {\n        pixelBit = max(pixelBit, getTopSprites(px, py, frame));\n    }\n    \n    if (py >= 64 && py < 128)\n    {\n        pixelBit = max(pixelBit, getSprites(px, py, frame));\n    }\n    \n    if (py >= 128)\n    {\n        pixelBit = max(pixelBit, getBottomScroller(px, py, frame));\n    }\n\n    int background = 0;\n    int foreground = 15;\n    getAttributeColors(ax, ay, frame, background, foreground);\n    \n    int clr = (pixelBit > 0.0) ? foreground : background;\n    \n    return getColorFromPalette(clr);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = getColor(fragCoord.xy);    \n    fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}