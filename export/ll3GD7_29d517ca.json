{"ver":"0.1","info":{"id":"ll3GD7","date":"1469597686","viewed":944,"name":"Satinlike (Simple PBM Warp)","username":"CaliCoastReplay","description":"Learning from IQ's tutorial at https://iquilezles.org/articles/warp/warp.htm after seeing countless FBM calculations and going \"What are these?\"\n\nFractal Brownian Motion is great stuff.   I experimented with this until it looked satiny.","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","fbm","brownian","motion","satin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Warping Study\n\n//Learning from IQ's tutorial at https://iquilezles.org/articles/warp\n//after seeing countless \"FBM\" calculations and going \"What are these?\"\n\n//Fractal Brownian Motion is great stuff. \n\n//--Replay\n\n\n//Helpers\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//FBM (Fractal Brownian Motion)\n\nfloat rand(vec2 n) {\n    return fract(cos(dot(n, vec2(12.9898,4.1414))) * (3758.5453));\n}\n\nfloat noise(vec2 n) {\n    const vec2 d = vec2(0.0, 1.0);\n    vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n    return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 n) {\n    float total = 0.0, amplitude = 1.0;\n    for (int i = 0; i <10; i++) {\n        total += noise(n) * amplitude;\n        amplitude *= 0.4;\n    }\n    return total;\n}\n\n\n float pattern( in vec2 p )\n  {\n      vec2 q = vec2( fbm( p + vec2(0.0,0.0) ),\n                     fbm( p + vec2(5.2 + sin(iTime)/10.0,1.3 - cos(iTime)/10.0) ) );\n\n      vec2 r = vec2( fbm( p + 4.0*q + vec2(1.7+ sin(iTime)/10.0,9.2) ),\n                     fbm( p + 4.0*q + vec2(8.3,2.8-cos(iTime)/10.0) ) );\n\n      vec2 adjusted_coordinate = p + 4.0*r;\n      adjusted_coordinate.x += sin(iTime);\n      adjusted_coordinate.y += cos(iTime); \n      return sqrt(pow(fbm( adjusted_coordinate + iTime \n                 + fbm(adjusted_coordinate - iTime \n                      + fbm(adjusted_coordinate + sin(iTime) ))), -2.0));\n  }\n\n//Main Calculation\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float intensity = pattern(uv);\n    vec3 color = vec3(uv, 0.5+0.5*sin(iTime));\n    vec3 hsv = rgb2hsv(color);\n    hsv.z = cos(hsv.y) - 0.1;\n    color = hsv2rgb(hsv);\n    fragColor = vec4(color, 1.0) * intensity;\n    \n}","name":"Image","description":"","type":"image"}]}