{"ver":"0.1","info":{"id":"DtSGWG","date":"1673899399","viewed":59,"name":"raymarch test435","username":"flareopti","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DISTANCE 100.0\n#define MIN_DISTANCE 0.01\n#define MAX_STEPS 100\n\n\n\nfloat fSphere(vec3 p, vec3 pos, float r){\n    return length(p-pos) - r;\n}\nfloat fPlane(vec3 p, vec3 pos){\n    return p.y-pos.y;\n}\n\nfloat sdTorus( vec3 p, vec2 t, vec3 pos )\n{\n  vec2 q = vec2(length(p.xz-pos.xz)-t.x,p.y-pos.y);\n  return length(q)-t.y;\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat sceneDist(vec3 p){\n    //float dist = min(sdTorus(p, vec2(1,0.2), vec3(0,0.5,0)), fPlane(p, vec3(0,0,0)));\n    //float dist = min(fSphere(p, vec3(0,1,1), 1.0), fPlane(p, vec3(0,0,0)));\n    float dist = opSmoothUnion(sdTorus(p, vec2(1,0.2), vec3(0,abs(sin(0.5*iTime)),0)), fPlane(p, vec3(0,0,0)), 0.5);\n\n    //float dist = opRep(p, vec3(1,1,1));\n    return dist;\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(0.01,0);\n    float d = sceneDist(p);\n    vec3 normal = vec3(\n        d-sceneDist(p-e.xyy),\n        d-sceneDist(p-e.yxy),\n        d-sceneDist(p-e.yyx)\n    );\n    return normalize(normal);\n}\n\n\nfloat rayMarch(vec3 ro, vec3 rd){\n    float dist = 0.;\n    for(int i = 0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd * dist;\n        float dist_p = sceneDist(p);\n        dist += dist_p;\n        if (dist > MAX_DISTANCE || dist_p < MIN_DISTANCE) break;\n    }\n    return dist;\n}\n\nfloat getLight(vec3 p, vec3 l_pos){\n    vec3 n = getNormal(p);\n    vec3 l = normalize(l_pos - p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    float d = rayMarch(p+n*MIN_DISTANCE*2., l);\n    if (d<length(l_pos-p)) dif *= 0.1;\n    return dif;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy -0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    \n    \n    vec3 camera = vec3(0,1,-3);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.));\n    \n    \n    float d = rayMarch(camera, rd);\n    vec3 p = camera + rd * d;\n    \n    vec3 l_pos = vec3(3.*cos(iTime),5.,-1.*sin(iTime));    \n    \n    float diffuse = getLight(p, l_pos);\n    vec3 col = vec3(diffuse);\n    //vec3 col = vec3(getNormal(p));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}