{"ver":"0.1","info":{"id":"mlt3Dr","date":"1682281015","viewed":61,"name":"Rolling Shutter Test","username":"graygoose","description":"The forward motion isn't completely eliminated, tuning is hard, spokes need to not be so naive. It also depends on wheelrot&scanrate/width.\n\nThere's paradoxical motion though, train your eyes on the top of the circle for the best reverse-illusion though.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["aliasing","illusion","rollingshutter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Disable ROLLING_SHUTTER to see the true rotation.\n#define ROLLING_SHUTTER 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float time = iTime * 0.5;\n    float wheelSpeed = 5.0;\n\n    vec2 wheelCenter = vec2(0.5, 0.5);\n    float wheelRadius = 0.3;\n    float angle = wheelSpeed * time;\n    \n    vec2 relPos = (uv - wheelCenter) / wheelRadius;\n    float dist = length(relPos);\n    if (dist <= 1.0) {\n        float currentAngle = atan(relPos.y, relPos.x),\n            rotAngle = currentAngle + angle;\n        vec2 rotPos = vec2(cos(rotAngle), sin(rotAngle)) * dist;\n\n        float shading = smoothstep(0.9, 1.0, dist),\n            spokeWidth = 0.25,\n            numSpokes = 6.0,\n            spokeDist = abs(mod(rotAngle * numSpokes / (2.0 * 3.14159265), 1.0) - 0.5),\n            spokeMask = smoothstep(spokeWidth, 0.0, spokeDist);\n        shading = mix(shading, 0.0, spokeMask);\n        \n        fragColor = vec4(vec3(shading), 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n\n#if ROLLING_SHUTTER\n    // If you up the speed, you can eliminate the paraxodical\n    // motion and get a more true shutter effect - but good luck.\n    float scanlineSpeed = 6.1,// ~ 14., 18.5,\n        scanlinePos = mod(-time * scanlineSpeed, 1.0),\n        scanlineWidth = 0.1,// ~ may have to make bigger for higher speeds\n        scanlineMask = smoothstep(scanlineWidth, 0.0, abs(uv.y - scanlinePos));\n    fragColor.rgb = mix(vec3(0.0), fragColor.rgb, scanlineMask);\n#endif\n}\n","name":"Image","description":"","type":"image"}]}