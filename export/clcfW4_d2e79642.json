{"ver":"0.1","info":{"id":"clcfW4","date":"1701483583","viewed":88,"name":"bluenoise automata","username":"Carandiru","description":"experimenting with bluenoise range and cellular automata like behaviour.\n\n[~10s delay before display]\n\nmouse to pan around","likes":1,"published":3,"flags":40,"usePreview":0,"tags":["frequency","bluenoise","modulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// experimenting with bluenoise range and cellular automata like behaviour.\n\n// [~10s delay before display]\n\n// mouse to pan around\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += 11.0f*iMouse.xy/iResolution.xy;\n    \n    float color_a = textureLod(iChannel0, uv/5.0-0.0025/5.0, 0.0f).r;\n    float color_b = textureLod(iChannel0, uv/5.0-0.0025/5.0, iphi).g;\n    float color_c = textureLod(iChannel0, uv/5.0-0.0025/5.0, (1.0f-iphi)).b;\n    \n    vec3 color = vec3(0);\n    \n    color = vec3(mix(color_c, color_b, color_a), \n                 mix(color_a, color_c, color_b),\n                 mix(color_b, color_a, color_c));\n    \n    vec3 diff = normalize(normalize(color) - normalize(vec3(color_a)));\n    \n    color *= color_a;\n    \n    float d = min(length(vec3(color_a)), length(color));\n    float att = 1.0f / (1.0f + d*d);\n    \n    //color = color*att;\n    \n    color = mix(color*att, color*color_a*att, dot(diff, normalize(color)) * 0.5f + 0.5f)*att;\n    //color = color + (1.0f - color)*color_a*att;\n    \n    fragColor = vec4(pow(color, vec3(1.0f/2.2f)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n\n\nvec2 mainSound( int samp, float time )\n{\n    float t = 1.0f*time;\n    float t2 = sqrt(t);\n    \n    float bn = textureLod(iChannel0, vec2(t,t+t)/1024.0f, 0.0f).r;\n    bn = sin(bn * 6.2831f * phi * 440.0f);\n    \n    /*\n    const float hi = 1750.0f, lo = 150.0f;\n    \n    //float dt = mix(lo, hi, fract(t*10.0f));\n    \n    float tone = 0.0f; float samples = 0.0f;\n    for (float i = lo; i < hi; ++i) {\n        \n        tone += sin(6.2831*i*phi) * (1.0f / (hi - lo));\n        //tone += sin(6.2831*(i+mix(lo, hi, bn * 0.5f + 0.5f)*(1.0f/(hi - lo)))*phi);\n        ++samples;\n    }\n    \n    //tone = tone / samples;\n    */\n    \n    float tone = 1.0f;\n    \n    vec2 channel = vec2(0);\n    \n    float sgn = step(0.0f, bn);\n    \n    channel.x = mix(sgn, (1.0f - sgn), fract(t));\n    channel.y = mix((1.0f - sgn), sgn, fract(t));\n    \n    channel = channel * bn;// + (1.0f - channel) * bn * samples;\n    \n    return 0.0f*channel;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159265358979323846\n#define GOLDEN_RATIO (1.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066057189033788811218482216986198774837979833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080980526767303517699677977504091090378155646968210243) // 1618033988\n#define GOLDEN_RATIO_ZERO (0.618033988749894848204586834365638117720309179805762862135448622705260462818902449707207204189391137484754088075386891752126633862223536931793180060766726354433389086595939582905638322661319928290267880675208766892501711696207032221043216269548626296313614438149758701220340805887954454749246185695364864449241044320771344947049565846788509874339442212544877066057189033788811218482216986198774837979833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080980526767303517699677977504091090378155646968210243)\n#define GOLDEN_ANGLE ( 2.0f * pi * (1.0f/(GOLDEN_RATIO*GOLDEN_RATIO)) )\n#define phi GOLDEN_RATIO \n#define iphi GOLDEN_RATIO_ZERO\n#define gangle GOLDEN_ANGLE\n\nfloat bluenoise_wave(float bn, float frequency) \n{\n    float bnsine = sin(bn * frequency * gangle);\n    \n    bn = mix(-bnsine, bnsine, smoothstep(-1.0f, 1.0f, bn));\n    \n    return(bn);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// experimenting with bluenoise range and cellular automata like behaviour.\n\n// [~10s delay before display]\n\n// mouse to pan around\n//\n\n#define epsilon 0.001f\n#define scaling (1.0f/(1.0f + t*1e-1f))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float t = (iTime + 1.0f);\n    float last = textureLod(iChannel0, uv, 0.0f).a * 2.0f - 1.0f;\n    \n    vec2 cuv = uv * 2.0f - 1.0f;\n    bool bLess = cuv.x < -epsilon;\n    bool bGreater = cuv.x > epsilon;\n    \n    float bn = textureLod(iChannel1, ((uv - mix(vec2(0), vec2(0.5f, phi*1.5f*cos(t)*1.0f/iResolution.y), bvec2(bGreater))) * iResolution.xy)/1024.0f \n                          * 0.019999999f, 0.0f).g;\n    float bn_original = bn;\n    \n    bn = bn * 2.0f - 1.0f;\n    //bn = bn + last * bn;\n    \n    float a = bluenoise_wave(bn, (1.0f - iphi)*t) * (iphi);\n    float b = bluenoise_wave(bn, (iphi)*t) * (1.0f - iphi);\n        \n    if ( bLess ) {\n        \n        float c = bn * 0.5f + 0.5f;\n        float d = (max(a,b) - min(a,b)) * 0.5f;\n        \n        bn += -bn + -0.9f * (( max(max(max(a, b), c), d) - min(min(min(a, b), c), d) ) );// + (mix(d, c, iphi) + mix(b, a, (1.0f - iphi)));\n    \n        float diff = abs((bn*0.5f+0.5f) - (last*0.5f+0.5f));\n        \n        bn = diff + (1.0f/(1.0f + exp(-1e-3f*t) * fwidth((bn*0.5f+0.5f) - diff)));//(1.0f - exp(-phi * diff));//*(iphi) + (bn*0.5f+0.5f)*(last*0.5f+0.5f)*(1.0f - iphi);// * smoothstep(-diff, diff, bn*0.5f+0.5f);\n        bn = bn * 2.0f - 1.0f;\n    }\n    else if ( bGreater ) {\n        \n        //bn = bn * 2.0f - 1.0f;\n    }\n    else {\n        bn = 0.0f;\n    }\n    \n    bn = bn * 0.5f + 0.5f;\n        \n    fragColor = vec4(vec3(bn_original-last), bn);\n}","name":"Buffer A","description":"","type":"buffer"}]}