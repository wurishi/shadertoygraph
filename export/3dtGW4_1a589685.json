{"ver":"0.1","info":{"id":"3dtGW4","date":"1568542049","viewed":181,"name":"Edge Detection (Test)","username":"Nurutomo","description":"Trying edge detection","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["detection","edge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 color;\nvec3 fragCoord;\n\nvec3 get(vec2 uv, float x, float y) {\n\treturn texture(\n\t\tiChannel0,\n\t\tuv + (vec2(x, y) / iResolution.xy)).rgb;\n}\n\nfloat rgbMean(vec3 tex) {\n\treturn (tex.r + tex.g + tex.b) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n\tfloat mean = (\n\t\trgbMean(get(uv, -1.0, -1.0)) +\n\t\trgbMean(get(uv, -1.0, 0.0)) +\n\t\trgbMean(get(uv, -1.0, 1.0)) +\n\t\trgbMean(get(uv, 0.0, -1.0)) +\n\t\trgbMean(get(uv, 0.0, 1.0)) +\n\t\trgbMean(get(uv, 1.0, -1.0)) +\n\t\trgbMean(get(uv, 1.0, 0.0)) +\n\t\trgbMean(get(uv, 1.0, 1.0))) / 8.0;\n\n\t/*if (mean < rgbMean(get(0.0, 0.0))) {\n        color = vec3(0.0);\n\t} else {\n\t\tcolor = vec3(1.0);//texture2D(cameraBack, st).rgb;\n\t}*/\n\n\tcolor = vec3(min(1.0,(mean - rgbMean(get(uv, 0.0, 0.0))) * 64.0));\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}