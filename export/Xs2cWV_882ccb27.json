{"ver":"0.1","info":{"id":"Xs2cWV","date":"1493874557","viewed":474,"name":"angle isleft or isright","username":"ollj","description":"because i keep forgetting the 2 fucntions to get;\n- Angle Between 2 vectors.\n- if c is left or right of a ray from points a to b.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["2d","acos","left","right","anglebetween","determinant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nsmall demo of \nhttp://stackoverflow.com/questions/1560492/how-to-tell-whether-a-point-is-to-the-right-or-left-side-of-a-line\n*/\n\n#define pi acos(-1.)  // == 3.14...\n\n//defines for compatibility\n#define sat(a) clamp(a,0.,1.)\n#define sq(a) sqrt(a)\n#define dd(a)   dot(a,a)\n#define dt(a,b) dot(a,b)\n#define su(a,b) (a-b)\n#define di(a,b) (a/b)\n#define mu(a,b) (a*b)\n\n//line(segment) distance subroutines:\n//sqared orthogonal projection ,ls()sub ,is squared distance\n#define lss2(a,c) dd(su(a,mu(c,sat(di(dt(a,c),dd(c))))))\n//sqared orthogonal projection ,ls()sub ,is squared distance without sat\n#define lss(a,c) dd(su(a,mu(c,(di(dt(a,c),dd(c))))))\n\n//pointAdistance to (diagonal) lineSegment from B to C (shown in yellow)\n#define ls(a,b,c) sq(lss(su(a,b),su(c,b)))\n//pointAdistance to (diagonal) line______though B to C (shown in red)\n#define ls2(a,b,c) sq(lss2(su(a,b),su(c,b)))\n//return framed [u]\n\nvec2 frame(vec2 u){u=u/iResolution.xy;u-=.5;\n u.x*=iResolution.x/iResolution.y;u*=2.;return u;}\n\n//return angle between 2 vectors (is unsigned)\nfloat angleBetween(vec2 a,vec2 b){\n return acos(dot(normalize(a),normalize(b)));\n}\n\n//if(c is left of ray from a to b)return 1.; return 0.;\nfloat  isLeft(vec2 a,vec2 b,vec2 c){c-=a;b-=a;\n return step(determinant(mat2(b,c)),0.);}\n//https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/determinant.xhtml\n//https://en.wikipedia.org/wiki/Determinant\n\n//return smoothstepped distance of p from a, to paint a dot\nfloat ddot(vec2 p,vec2 a){float r=length(p-a);\n return smoothstep(.1,.0,r);}\n\nvoid mainImage(out vec4 Out,in vec2 In){\n vec2 u=frame(In);        //uv.xy of vertex\n vec2 m=frame(iMouse.xy); //mouse position\n vec2 a=vec2(0,0);        //start of lineSegment\n vec2 b=vec2(.5,.7);      //end of  lineSegment\n vec2 c=m;//c=vec2(1,0);  //mouse cursor to debug/visualize isLeft()\n float d=length(u-c)*2.;d=smoothstep(.7,.6,d); //for circle around mouse position\n float left =isLeft(a,c,b);             //color of mouse cursor (side of mouse)\n float leftU=isLeft(a,u,b)*2.-1.;       //sign==sideOfine       (side of uv)\n float yellow  =1.-ls2(u,a,b)*3.;       //lineSegment\n float red     =    ls(u,a,b)*.3*leftU; //line to Gradient by multiplying by sign)\n red+=1.+cos(iTime);            //optional oscillate gradient over time\n //mouse:\n float angle=angleBetween(c,b-a)/pi; //visualize acos() via fade.\n angle=1.;                      //optional simplify overwrite\n float green=d*angle*(1.-left); //fade green cursor\n float blue =d*angle*    left ; //fade blue  cursor\n \n yellow*=.5; red=max(red,yellow); green=max(green,yellow); //add yellow\n \n Out=vec4(red,green,blue,1);//set vertex color.\n}","name":"Image","description":"","type":"image"}]}