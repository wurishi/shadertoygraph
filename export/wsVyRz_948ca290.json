{"ver":"0.1","info":{"id":"wsVyRz","date":"1602165690","viewed":277,"name":"SDF Blending Circle","username":"ElliotPadfield","description":"An SDF circle for testing purposes","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdfcircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/distfunctions2d\n\nfloat Circle(vec2 position, float scale)\n{\n    return length(position) - scale;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat opOnion(float shape, in float r )\n{\n  return abs(shape) - r;\n}\n\n//Awesome function that uses uses how much a value changes between one \n//pixel and the next to determine how sharp the edge should be\nfloat SDF_HardShape(float shape, float _AntialiasingValue)\n{\n\tfloat distanceChange = fwidth(shape) * _AntialiasingValue;\n\tfloat antialiasedCutoff = smoothstep(distanceChange, -distanceChange, shape);\n\tantialiasedCutoff;\n\treturn antialiasedCutoff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    //Offset the UV so that it sits in the middle of the screen\n    uv -= 0.5;\n    //Adjust the X value of the UV based on the resolution of the screen\n    uv.x *= (iResolution.x / iResolution.y);\n    \n    //Mirror the UV\n    uv.x = abs(uv.x);\n    \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    //Make the first SDF Circle\n\tfloat circle1 = Circle(uv, .4);\n    \n    //Make an offset that will be used on the second circle\n    vec2 offset = vec2(.7 * sin(iTime), 0.);\n    \n    //Make the second SDF Circle\n    float circle2 = Circle(uv + offset, .15);\n    //circle2 = opOnion(circle2, .005);\n    \n    //Blend the circles together\n    float dist = opSmoothUnion(circle1, circle2, .1);\n    \n    //Sample the SDF to generate a hard edge\n    float hardEdge = SDF_HardShape(dist, 1.);\n    \n    //Color\n\tvec4 blue = vec4(0.1, 0.8, 1, 1);\n    \n    // Output to screen\n    fragColor = vec4(blue.xyz,1.0) * hardEdge;\n}","name":"Image","description":"","type":"image"}]}