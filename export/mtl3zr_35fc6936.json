{"ver":"0.1","info":{"id":"mtl3zr","date":"1671219140","viewed":148,"name":"Into the Boing World","username":"drLongman","description":"Just a simple oldschool tunnel","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["tunnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#define PI 3.14159265\n\n\nfloat nrand(vec2 uv){\n\tfloat dt =  dot(uv, vec2(12.9898, 78.233));\n\treturn mod(sin(dt) * 43758.5453, 1.0);\n}\n\n\nfloat rnd(float x) {\n\treturn mod(sin(x/100.0) * 100000.0, 1000.0) / 1000.;\n}\n\nvec2 mapCoords(vec2 px, vec2 cell) {\n\tfloat aspect = cell.x/cell.y;\n\tvec2 uv = (vec2(px - (cell * .5)) / cell);\n\n\tif (aspect > 1.) {\n    uv.x *= aspect;\n  } else {\n  \tuv.y /= aspect;\n  }\n\n\treturn uv;\n}\n\nfloat det(vec2 a, vec2 b) {\n\treturn (a.x * b.y) - (b.x * a.y);\n}\n\nfloat angle(vec2 a, vec2 b) {\n\tvec2 an = normalize(a);\n\tvec2 bn = normalize(b);\n\n\n\tfloat dotp = dot(an, bn);\n\tfloat detp = det(an, bn);\n\n\treturn atan(dotp, detp) / PI;\n}\n\n\nvec3 tunnel(vec2 uv) {\n\tfloat d = length(uv);\n\tfloat a = sin(iTime * .01) + angle(vec2(.0, .1), uv);\n\tfloat ssw = (sin(iTime) + 1.0) * .5;\n\n\tfloat ds = ((0.017*ssw) + 0.0001) / d;\n\tfloat dis1 = sin((1.3 + iTime) *  0.6) * sin(ds * 6.9) * .06;\n\tfloat dis2 = sin((0.4 + iTime) * 2.3) * sin(ds * 100.) * .2;\n\tfloat dis3 = sin((3.2 - iTime) * 4.7) * sin(ds * 50.) * 0.1;\n\n\ta = mod(a + dis1 + dis2 + dis3, 1.);\n\tfloat q = mod(a, .1);\n\n\tfloat x = 0.5 * step(q, 0.013);\n\tfloat cx = mod(a, 0.2);\n\tcx = step(0.1, cx);\n\n  float ty = (1.0 / d) + (iTime * 1.2);\n\tfloat dd = mod(ty, .3);\n\tfloat y = 0.5 * step(dd, 0.03);\n\tfloat cy = mod(ty, .6);\n\tcy = step(0.3, cy);\n\n\tfloat texture = max(x, y);\n\n\tfloat chk = abs(cx - cy);\n\n\tchk *= .9;\n\n\tfloat hell = (1. + sin(iTime * 2.7)) * .5;\n\thell *= 0.3;\n\n\n\tfloat wall = max(texture, chk);\n\treturn vec3( max(wall, hell), wall, wall) * d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = mapCoords(fragCoord.xy, iResolution.xy);\n\n    vec3 circle = tunnel(uv);\n\n\n    fragColor = vec4(circle, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}