{"ver":"0.1","info":{"id":"Mt3yzf","date":"1533418584","viewed":227,"name":"Water Wave","username":"TanayStyle","description":"Water waves","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["waves","water","blue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tau 6.28318530718\n\nfloat sin01(float x) {\n\treturn (sin(x*tau)+1.)/2.;\n}\nfloat cos01(float x) {\n\treturn (cos(x*tau)+1.)/2.;\n}\n\n//cos between m and 1\nfloat cosm1(float x, float m) {\n    float c = 1. - m;\n\tfloat y = cos(x*tau/2.)*c+(1.-c);\n    return y/2. + .5;\n}\n\nfloat smoothFract(float x, float blurLevel) {\n\treturn pow(cos01(x), 1./blurLevel);\n}\n\nfloat euclDist(vec2 from, vec2 to) {\n\treturn length(from - to);\n}\n\nfloat circ(vec2 uv, vec2 pos, float radius) {\n    float dist = euclDist(uv, pos);\n    return smoothstep(radius, 0., dist);\n}\n\nvec2 rot(vec2 v, float angle) {\n    mat2 m;\n    m[0] = vec2(cos(angle), sin(angle));\n    m[1] = vec2(-sin(angle), cos(angle));\n    return m * v;\n}\n\nvec3 vignette (vec2 uv, vec3 col, float amt) {\n    float len = clamp(0.,1.,length(uv));\n    return col * smoothstep(1., 0., len * amt);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Pixel coordinates centered at 0,0\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.xy;\n    float aspectRatio = iResolution.x / iResolution.y;\n\tuv.x *= aspectRatio;\n\n    float t = iTime * .2;\n    \n\t// Distort uv coordinates\n    float amplitude = .2;\n    float turbulence = 1.3;\n    uv.xy += sin01(uv.x*turbulence + t) * amplitude;\n    uv.xy -= sin01(uv.y*turbulence + t) * amplitude;\n    \n    // Rotate grid as time goes by\n    uv.xy = rot(uv.xy, t / 2.);\n    \n    //uv.xy = shear(uv.xy, t);\n    \n    // Create grid\n    float gridSize = 4.;\n    \n    // Define lines\n    float bright = 0.;\n    float blurAmount = 0.2;\n    float linesX = smoothFract(uv.y * gridSize, blurAmount);\n    bright = linesX;\n    \n    float linesY = smoothFract(uv.x * gridSize, blurAmount);\n    bright += linesY;\n    \n    // Convert lines to color\n    vec3 linesColor = vec3(.42,.8,1.);\n    vec3 col = linesColor*bright;\n    \n    // Background color\n    vec3 backgroundColor = vec3(0.2,.6,.9);\n    col += backgroundColor*(1.-bright);\n    \n    // Apply vignette\n    col = vignette(uv, col, .4);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}