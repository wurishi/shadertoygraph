{"ver":"0.1","info":{"id":"mlffWN","date":"1692930275","viewed":38,"name":"Ocean texture","username":"Paletech35","description":"Ocean texture","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ocean"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define num 300\n\nvec2 ranGen(vec2 last){\n    last = fract(last * 2479.183 + 1879.24);\n    return last;\n}\n\nvec3 layer(vec2 uv, vec2 rand){\n    \n    //create points\n    vec2 point[num];\n    for (int i = 0; i < num; i++){\n        rand = ranGen(rand);\n        point[i] = (rand - 0.5) * 2.0 * vec2(iResolution.x / iResolution.y, 1.0);\n    }\n    \n    //define the velocity of each point\n    vec2 v_point[num];\n    for (int i = 0; i < num; i++){\n        rand = ranGen(rand);\n        v_point[i] = (rand - 0.5) * 0.1;\n    }\n    \n    \n    //distance to nearest point\n    float d = 100.0;\n    float dtemp;\n    for (int i = 0; i < num; i++){\n        dtemp = distance(uv, (fract(point[i] + iTime * v_point[i]) * vec2(iResolution.x / iResolution.y, 1.0)- 0.5 * vec2(iResolution.x / iResolution.y, 1.0)) * 2.5);\n        if (dtemp < d) d = dtemp;\n    }\n    //colour is lerp between 2 colours, depending in distance to nearest point\n    return vec3((1.0-d) * vec3(0.3, 0.6, 0.8) + d * vec3(0.8, 1.3, 1.8) * 1.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.5, 1.3, 1.8);\n    \n    vec2 rand = vec2(0.1963923, 0.98267352);\n    vec2 rand2 = vec2(0.5427082, 0.54732023);\n    \n    \n    col = 0.8 * layer(uv, rand);\n    col += 0.2 * layer(uv, rand2);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}