{"ver":"0.1","info":{"id":"fltGRl","date":"1636540239","viewed":45,"name":"toothyang","username":"toothmang","description":"yin yang","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["yinyang"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_TRAVERSALS 1\n#define ARRAY_SIZE (1 << (NUM_TRAVERSALS))\n#define ROTATE 1\n\n\nfloat yinyang_traversal(vec2 pos, vec3 coords, float t)\n{\n    float result = 0.;\n    float flip = 1.;\n    \n    float innerRadius = coords.z * 0.5;\n    \n    result = yinyang(pos, coords, flip);\n    if (result < 0.) {\n        return 0.5;\n    }\n    \n#if (NUM_TRAVERSALS <= 0)\n    vec4 coordStack[1];\n    return result;\n    \n#else\n    vec4 coordStack[ARRAY_SIZE];\n    coordStack[0] = vec4(coords.x, coords.y + innerRadius, innerRadius, 1);\n    coordStack[1] = vec4(coords.x, coords.y - innerRadius, innerRadius, 1);\n#endif\n    \n    \n    int queuePos = 1;\n    int i = 0;\n    \n    while (i < ARRAY_SIZE) {\n    \n#if (ROTATE)\n        vec2 parentCoord = coordStack[i].xy;\n        vec2 dp = pos - parentCoord;\n        dp = rotate(dp, t * coordStack[i].w) + parentCoord;\n        float init = yinyang(dp, coordStack[i].xyz, flip);\n        //vec2 rotCS = rotate(coordStack[i].xy, coordStack[i].w * t);\n        //float init = yinyang(dp, vec3(rotCS, coordStack[i].z), flip);\n#else\n        float init = yinyang(pos, coordStack[i].xyz, flip);\n#endif\n      \n        \n        if (init >= 0.) {\n            result = init;\n            //flip = 1.0 - flip;\n            \n            float ir = 0.5 * coordStack[i].z;\n            \n            if (queuePos + 2 < ARRAY_SIZE) {\n#if (ROTATE)\n                vec2 upperPos = vec2(coordStack[i].x, coordStack[i].y + ir);\n                vec2 lowerPos = vec2(coordStack[i].x, coordStack[i].y - ir);\n                \n                //upperPos = rotate(vec2(0., ir), t) + coordStack[i].xy;\n                //upperPos = rotate(vec2(0., -ir), -t) + coordStack[i].xy;\n                \n                coordStack[queuePos+1] = vec4(upperPos.x, upperPos.y, ir, coordStack[i].w + 1.);\n                coordStack[queuePos+2] = vec4(lowerPos.x, lowerPos.y, ir, coordStack[i].w + 1.);\n#else\n                coordStack[queuePos+1] = vec4(coordStack[i].x, coordStack[i].y + ir, ir, coordStack[i].w + 1.);\n                coordStack[queuePos+2] = vec4(coordStack[i].x, coordStack[i].y - ir, ir, coordStack[i].w + 1.);\n#endif\n            \n                // Gotta rotate the next coords relative to the center of these coords\n\n                queuePos += 2;\n            }\n        }\n    \n        i++;\n    }\n    \n    /*\n    for(int i = 0; i < queueSize; i++) {\n        //coordStack[i].xy = rotate(coordStack[i].xy, t * -2.);\n        vec2 dp = pos - coordStack[i].xy;\n        dp = rotate(dp, t) + coordStack[i].xy;\n        float init = yinyang(dp, coordStack[i], flip);\n        //flip = 1.0 - flip;\n        \n        if (init >= 0.) {\n            float ir = 0.5 * coordStack[i].z;\n            coordStack[i+1] = vec3(coordStack[i].x, coordStack[i].y + ir, ir);\n            result = init;\n            \n        }\n        else {\n            break;\n        }\n    }\n    \n    //flip = 0.;\n    \n    innerRadius = coords.z * 0.5;\n    coordStack[0] = vec3(coords.x, coords.y - innerRadius, innerRadius);\n    for(int i = 0; i < stack; i++) {\n        vec2 dp = pos - coordStack[i].xy;\n        dp = rotate(dp, t) + coordStack[i].xy;\n        float init = yinyang(dp, coordStack[i], flip);\n        \n        if (init >= 0.) {\n            float ir = 0.5 * coordStack[i].z;\n            coordStack[i+1] = vec3(coordStack[i].x, coordStack[i].y - ir, ir);\n            result = init;\n            //flip = 1.0 - flip;\n        }\n        else {\n            break;\n        }\n    }\n    */\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy - (iResolution.xy * 0.5);\n    uv = uv / (iResolution.xy * 1.);\n    \n    // Aspect ratio correction\n    uv.x = uv.x * (iResolution.x / iResolution.y);\n    \n#if (ROTATE)\n    uv = rotate(uv, iTime);\n#endif    \n    \n    //uv *= sin(iTime);\n    \n    float t = yinyang_traversal(uv, vec3(0., 0., 0.5), iTime);\n\n    // Output to screen\n    fragColor = vec4(vec3(t),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 rotate(vec2 coord, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 r = mat2(c, -s, s, c);\n    \n    return r * coord;\n}\n\nfloat circle(vec2 pos, vec3 coords) {\n    vec2 diff = coords.xy - pos;\n    float dist = length(diff);\n    float result = 0.;\n    \n    if (dist < coords.z) {\n        result = 1.;\n    }\n    \n    return result;\n}\n\nfloat yinyang(vec2 pos, vec3 coords, float high) {\n    float low = 1.0 - high;\n    float result = circle(pos, coords);\n    float innerRadius = 0.5 * coords.z;\n    \n    if (result > 0.) {\n        vec3 topInner = vec3(coords.x, coords.y + innerRadius, innerRadius);\n        vec3 botInner = vec3(coords.x, coords.y - innerRadius, innerRadius);\n        float topinnerResult = circle(pos, topInner);\n        float botinnerResult = circle(pos, botInner);\n        \n        if (topinnerResult > 0.) {\n            result = high;\n            \n            vec3 toptopInner = vec3(topInner.x, topInner.y, innerRadius * 0.33);\n            \n            float topinnerinnerResult = circle(pos, toptopInner);\n            \n            if (topinnerinnerResult > 0.) {\n                result = low;\n            }\n        }\n        else if (botinnerResult > 0.) {\n            result = low;\n            \n            vec3 botbotInner = vec3(botInner.x, botInner.y, innerRadius * 0.33);\n            \n            float botinnerinnerResult = circle(pos, botbotInner);\n            \n            if (botinnerinnerResult > 0.) {\n                result = high;\n            }\n\n        }\n        else {\n            result = low;\n            \n            if (pos.x < 0.) {\n                result = high;\n            }\n        }\n    }\n    else {\n        result = -1.;\n    }\n    \n    \n    return result;   \n}","name":"Common","description":"","type":"common"}]}