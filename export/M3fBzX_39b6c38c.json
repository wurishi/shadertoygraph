{"ver":"0.1","info":{"id":"M3fBzX","date":"1728687012","viewed":68,"name":"MonadGem v1","username":"shortsample","description":"A gem found when looking.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["simple","meditative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Prismatic Vortex Shader\n\nvec3 palette(float t) {\n    // Create a colorful palette\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nmat2 rotate2d(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\nfloat map(vec3 p) {\n    float t = iTime * 0.1;\n    \n    // Rotate the entire scene\n    p.xz *= rotate2d(t);\n    p.xy *= rotate2d(t * 0.7);\n    \n    // Create octahedron shapes\n    float d = sdOctahedron(p, 1.0);\n    \n    // Add some variation\n    for (int i = 0; i < 4; i++) {\n        float fi = float(i);\n        float time = t * (fract(fi * 412.531 + 0.513) - 0.5) * 2.0;\n        p = abs(p) - vec3(2.0, 2.0, 2.0) + cos(time * vec3(1.1, 1.3, 1.5)) * 0.5;\n        p.xy *= rotate2d(time * 0.3);\n        d = min(d, sdOctahedron(p, 1.0 + sin(time * 0.4) * 0.1));\n    }\n    \n    return d;\n}\n\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h) +\n                     k.yyx * map(p + k.yyx * h) +\n                     k.yxy * map(p + k.yxy * h) +\n                     k.xxx * map(p + k.xxx * h));\n}\n\nvec4 render(vec3 ro, vec3 rd) {\n    vec3 col = vec3(0);\n    float t = 0.0;\n    \n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        \n        if (d < 0.001) {\n            vec3 n = calcNormal(p);\n            vec3 r = reflect(rd, n);\n            \n            float fresnel = pow(1.0 + dot(rd, n), 5.0);\n            vec3 color = palette(length(p) * 0.1 - iTime * 0.1);\n            \n            col = mix(color, vec3(1), fresnel);\n            break;\n        }\n        \n        if (t > 20.0) {\n            break;\n        }\n        \n        col += palette(length(p) * 0.05 - iTime * 0.1) * 0.01;\n        t += d;\n    }\n    \n    return vec4(col, 1.0 / (1.0 + t * t * 0.1));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0, 0, -6);\n    vec3 rd = normalize(vec3(uv, 2.0));\n    \n    // Rotate camera\n    float angle = iTime * 0.1;\n    mat2 rot = rotate2d(angle);\n    ro.xz *= rot;\n    rd.xz *= rot;\n    \n    vec4 col = render(ro, rd);\n    \n    // Tone mapping and gamma correction\n    col = pow(col, vec4(0.4545));\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}