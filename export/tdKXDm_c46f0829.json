{"ver":"0.1","info":{"id":"tdKXDm","date":"1574220937","viewed":354,"name":"Simple stars background (ltp)","username":"liutp","description":"change from https://www.shadertoy.com/view/MtB3zW","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["noise","simplex","stars","starfield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANIMATE 1\n#define OCTAVES 5\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Simple fractal noise\n// persistence - A multiplier that determines how quickly the amplitudes diminish for \n// each successive octave.\n// lacunarity - A multiplier that determines how quickly the frequency increases for \n// each successive octave.\nfloat fractalNoise(in vec2 coord, in float persistence, in float lacunarity) {    \n    float n = 0.;\n    float frequency = 1.;\n    float amplitude = 1.;\n    for (int o = 0; o < OCTAVES; ++o)\n    {\n        n += amplitude * texture(iChannel0, coord * frequency).r;\n        amplitude *= persistence;\n        frequency *= lacunarity;\n    }\n    return n;\n}\n\nvec3 fractalNebula(in vec2 coord, vec3 color, float transparency) {\n    float n = fractalNoise(coord, .5, 2.);\n    return n * color * transparency;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float resolution = max(iResolution.y, iResolution.y);\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec3 result = vec3(0.);\n\n#if ANIMATE\n    vec3 nebulaColor1 = hsv2rgb(vec3(.5+.5*sin(iTime*.1), 0.5, .25));\n    vec3 nebulaColor2 = hsv2rgb(vec3(.5+.5*sin(iTime*.21), 1., .25));\n    result += fractalNebula((coord)*1.1 + vec2(.1, .1), nebulaColor1, 1.0);\n    result += fractalNebula((coord)*1.2 + vec2(0., .2), nebulaColor2, 0.5);\n#else\n    vec3 nebulaColor1 = hsv2rgb(vec3(.5, 0.5, .25));\n    vec3 nebulaColor2 = hsv2rgb(vec3(.7, 1., .25));\n    result += fractalNebula(coord + vec2(.1, .1), nebulaColor1, 1.);\n    result += fractalNebula(coord + vec2(0., .2), nebulaColor2, .5);\n#endif\n    \n    coord *= 0.8;\n    result += texture(iChannel3, mod(coord + iMouse.xy * 0.000055, 1.0)).r * vec3(.74, .74, .74);\n    result += texture(iChannel2, mod(coord + iMouse.xy * 0.00005, 1.0)).r * vec3(.97, .74, .74);\n    result += texture(iChannel1, mod(coord, 1.0)).r * vec3(.9, .9, .95);\n    \n    fragColor = vec4(result, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) \n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) \n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\n// Simplex noise \n// https://github.com/ashima/webgl-noise \n// Copyright (C) 2011 Ashima Arts. All rights reserved.\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n = snoise(fragCoord.xy/iResolution.xy);\n\n    // Output to screen\n    fragColor = vec4(n,n,n,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 rand2(vec2 p)\n{\n    p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543))); \n    return fract(sin(p) * 43758.5453);\n}\n\nfloat rand(vec2 p)\n{\n    return fract(sin(dot(p.xy ,vec2(54.90898,18.233))) * 4337.5453);\n}\n\nfloat stars(in vec2 x, float numCells, float size, float br)\n{\n    vec2 n = x * numCells;\n    vec2 f = floor(n);\n\n\tfloat d = 1.0e10;\n    for (int i = -1; i <= 1; ++i)\n    {\n        for (int j = -1; j <= 1; ++j)\n        {\n            vec2 g = f + vec2(float(i), float(j));\n\t\t\tg = n - g - rand2(mod(g, numCells)) + rand(g);\n            // Control size\n            g *= 1. / (numCells * size);\n\t\t\td = min(d, dot(g, g));\n        }\n    }\n\n    return br * (smoothstep(.95, 1., (1. - sqrt(d))));\n}\n\n#define StarsNum 32.0\t//number of stars\n#define StarsSize 0.020\t//size of stars\n#define StarsBright 0.5\t//Bright of stars\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float resolution = max(iResolution.y, iResolution.y);\n    vec2 coord = fragCoord.xy / resolution;\n    vec3 result = vec3(0.);\n    result += stars(coord, StarsNum, StarsSize, StarsBright);\n    fragColor = vec4(result, 1.);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 rand2(vec2 p)\n{\n    p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543))); \n    return fract(sin(p) * 43758.5453);\n}\n\nfloat rand(vec2 p)\n{\n    return fract(sin(dot(p.xy ,vec2(54.90898,18.233))) * 4337.5453);\n}\n\nfloat stars(in vec2 x, float numCells, float size, float br)\n{\n    vec2 n = x * numCells;\n    vec2 f = floor(n);\n\n\tfloat d = 1.0e10;\n    for (int i = -1; i <= 1; ++i)\n    {\n        for (int j = -1; j <= 1; ++j)\n        {\n            vec2 g = f + vec2(float(i), float(j));\n\t\t\tg = n - g - rand2(mod(g, numCells)) + rand(g);\n            // Control size\n            g *= 1. / (numCells * size);\n\t\t\td = min(d, dot(g, g));\n        }\n    }\n\n    return br * (smoothstep(.95, 1., (1. - sqrt(d))));\n}\n\n#define StarsNum 16.0\t//number of stars\n#define StarsSize 0.04\t//size of stars\n#define StarsBright 1.0\t//Bright of stars\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float resolution = max(iResolution.y, iResolution.y);\n    vec2 coord = fragCoord.xy / resolution;\n    vec3 result = vec3(0.);\n    result += stars(coord, StarsNum, StarsSize, StarsBright);\n    fragColor = vec4(result, 1.);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec2 rand2(vec2 p)\n{\n    p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543))); \n    return fract(sin(p) * 43758.5453);\n}\n\nfloat rand(vec2 p)\n{\n    return fract(sin(dot(p.xy ,vec2(54.90898,18.233))) * 4337.5453);\n}\n\nfloat stars(in vec2 x, float numCells, float size, float br)\n{\n    vec2 n = x * numCells;\n    vec2 f = floor(n);\n\n\tfloat d = 1.0e10;\n    for (int i = -1; i <= 1; ++i)\n    {\n        for (int j = -1; j <= 1; ++j)\n        {\n            vec2 g = f + vec2(float(i), float(j));\n\t\t\tg = n - g - rand2(mod(g, numCells)) + rand(g);\n            // Control size\n            g *= 1. / (numCells * size);\n\t\t\td = min(d, dot(g, g));\n        }\n    }\n\n    return br * (smoothstep(.95, 1., (1. - sqrt(d))));\n}\n\n#define StarsNum 8.0\t//number of stars\n#define StarsSize 0.08\t//size of stars\n#define StarsBright 2.0\t//Bright of stars\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float resolution = max(iResolution.y, iResolution.y);\n    vec2 coord = fragCoord.xy / resolution;\n    vec3 result = vec3(0.);\n    result += stars(coord, StarsNum, StarsSize, StarsBright);\n    fragColor = vec4(result, 1.);\n}\n","name":"Buffer D","description":"","type":"buffer"}]}