{"ver":"0.1","info":{"id":"Nt3cDB","date":"1660938017","viewed":151,"name":"Arc with SDF","username":"samikganguly","description":"SDF for an arc\noptionally with polar color range\n and a knob, drag with mouse to move the knob","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","circle","polar","arc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897932384626433832795f;\n\nfloat get_angle(in vec2 uv, in vec2 centre) {\n    vec2 ouv = centre - uv;\n    float angle = acos(ouv.x / length(ouv));\n    angle = ouv.y < 0. ? (2. * pi - angle) : angle;\n    return angle;\n}\n\nfloat arc(in vec2 uv, in vec2 centre, in float radius, in float thickness, in float start_angle, in float angle_span) {\n    vec2 ouv = centre - uv;\n    float end_angle = start_angle + angle_span;\n    vec2 arc_start = vec2(radius * cos(start_angle), radius * sin(start_angle));\n    vec2 arc_end = vec2(radius * cos(end_angle), radius * sin(end_angle));\n    \n    float border_thickness = abs(length(ouv) - radius);\n    float dist_start = length(ouv - arc_start);\n    float dist_end = length(ouv - arc_end);\n    float pixel_width = 1./ min(iResolution.x, iResolution.y);\n    float angle = get_angle(uv, centre);\n   \n    if(angle > start_angle && angle < end_angle) {\n        return smoothstep(thickness, thickness - pixel_width, border_thickness);\n    } else if(angle < start_angle) {\n        return smoothstep(thickness, thickness - pixel_width, dist_start);\n    } else if(angle > end_angle) {\n        return smoothstep(thickness, thickness - pixel_width, dist_end);\n    }\n}\n\nvec3 polar_color(in vec2 uv, in vec2 centre, in float start_angle, in float angle_span, in vec3 start_color, in vec3 end_color) {\n    float angle = get_angle(uv, centre);\n   \n    float factor = (angle - start_angle) / angle_span;\n    return mix(start_color, end_color, factor);\n}\n\nfloat deg2rad(in float deg) {\n    return deg / 360. * 2. * pi;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    vec2 muv = iMouse.xy/iResolution.xy - vec2(0.5);\n    muv.x = muv.x * iResolution.x / iResolution.y;\n    \n    \n    const vec2 centre = vec2(0.);\n    const float radius = 0.4;\n    const float thickness = 0.01;\n    \n    float angle1 = 15.;\n    float span1 = 57.;\n    float angle2 = 75.;\n    float span2 = 87.;\n    float angle3 = 165.;\n    float span3 = 180.;\n    \n    float strip1 = arc(uv, centre, radius, thickness, deg2rad(angle1), deg2rad(span1));\n    float strip2 = arc(uv, centre, radius, thickness, deg2rad(angle2), deg2rad(span2));\n    float strip3 = arc(uv, centre, radius, thickness, deg2rad(angle3), deg2rad(span3));\n    float knobstrip = arc(uv, centre, radius, thickness + 0.01, clamp(get_angle(muv, centre), deg2rad(angle1), deg2rad(angle3 + span3)), 0.);\n    \n    vec3 cstrip1 = strip1 * polar_color(uv, centre, deg2rad(angle1), deg2rad(span1), vec3(1., 0., 0.), vec3(0., 1., 0.));\n    vec3 cstrip2 = strip2 * polar_color(uv, centre, deg2rad(angle2), deg2rad(span2), vec3(0., 0.7, 1.), vec3(1., 1., 0.));\n    vec3 cstrip3 = strip3 * polar_color(uv, centre, deg2rad(angle3), deg2rad(span3), vec3(0.5, 0., 1.), vec3(1., 0.5, 0.));\n    vec3 knob = knobstrip * vec3(1.);\n    \n    // Output to screen\n    fragColor = vec4(cstrip1 + cstrip2 + cstrip3 + knob, 1.0);\n}","name":"Image","description":"","type":"image"}]}