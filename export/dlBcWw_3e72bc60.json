{"ver":"0.1","info":{"id":"dlBcWw","date":"1691834852","viewed":46,"name":"sdf-BOILERPLATE","username":"saiomin","description":"Developed with the help of Chapter 7 in The Book of Shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","boilerplate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Created by Simon Howard (saiominn) on 12.08.23\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// A boilerplate I developed to help me understand how \n// to design shapes with distance fields. It serves as\n// a good starting point for experimenting with more \n// complex shape functions.\n// --Work in Progess--\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n#define PI 3.14159265359\n#define t iTime\n#define res iResolution\n\n//Normailsed sin of iTime - useful for visually debuging all values 0-1\nfloat sint(float freq) \n{\n    return float (sin(t*PI*freq)*0.5)+0.5;\n}\n\n//Visually see the field \nvec3 field(float _sdf) \n{\n    return vec3(fract(_sdf*10.));\n}\n\n//Prepares values for smoothstep to control blur with one value\nvec2 blurVal(float _blur) \n{\n    float y = .5 + (_blur*0.5);\n    float x = .5 - (_blur*0.5);\n    return vec2(x, y);\n}\n\n//Generates solid shape\nvec3 fill(float _sdf, float blur) \n{\n    vec2 b = blurVal(blur);\n    return vec3(smoothstep(b.x, b.y, _sdf));\n}\n\n//Generates outline of shape with contorls on blur and size\nvec3 line(float _sdf, float blur, float size) \n{\n    vec2 b = blurVal(blur);\n    vec2 s = vec2(b.x,b.y) * (1.0 + size);\n    return vec3(1.0)-vec3(smoothstep(b.x, b.y, _sdf)*smoothstep(s.y, s.x, _sdf));\n}\n\n//Generates circle SDF\nfloat circle(vec2 st, float size)\n{\n    return length(st/size);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = (fragCoord * 2.0 - res.xy) / res.y;\n    vec3 c = vec3(st.x, st.y, 0.0);\n    \n    float sdf = circle(st,1.0);\n    \n    //fragColor = vec4(c, 1.0);                    \n    //fragColor = vec4(field(sdf), 1.0);           \n    //fragColor = vec4(fill(sdf, sint(1.0)), 1.0);\n    fragColor = vec4(line(sdf, sint(.2), sint(1.)), 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}