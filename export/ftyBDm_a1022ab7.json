{"ver":"0.1","info":{"id":"ftyBDm","date":"1664576247","viewed":369,"name":"Lerp / Smoothstep Implementation","username":"spenceryonce","description":"I decided to try implementing my lerp functions that I made first in desmos graphing calculator to shadertoy. It worked like a charm!! I also was super excited to make my own smoothstep function. Here is the graph: https://www.desmos.com/calculator/rdm4td","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["circle","lerp","smoothstep","lerpcolors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lerp(float a, float b, float t){\n    return a + (b-a) * t;\n}\n\nfloat llerp(float t){\n    return t;\n}\n\nfloat squaredlerp(float t){\n    return t*t;\n}\n\nfloat quadlerp(float t){\n    return 1.0 - (1.0 - t) * (1.0 - t);\n}\n\nfloat ss(float t){\n    return lerp(quadlerp(t),squaredlerp(t),t);\n}\n\nfloat circle(vec2 uv, float r,float x, float y){\n    return ss(lerp(0.0,1.0,ss(((uv.x-x)*uv.x)/r+((uv.y-y)*uv.y)/r)));\n}\n\nvec3 lerpcolor(vec3 a, vec3 b, float t){\n    float abr = lerp(a.r,b.r,ss(t));\n    float abg = lerp(a.g,b.g,ss(t));\n    float abb = lerp(a.b,b.b,ss(t));\n    return vec3(abr,abg,abb);\n}\nvoid mainImage( out vec4 c, in vec2 fc )\n{\n    vec2 uv = (2.0*fc.xy-iResolution.xy)/iResolution.y;\n    float s = 0.1;\n    float l = lerp(0.0,1.0,ss(s));\n    \n    float ci = circle(uv,0.5,0.0,0.0);\n    vec3 color = vec3(0.0);\n    \n    vec3 cmix1 = vec3(1.0,0.5,0.1);\n    vec3 cmix2 = vec3(0.0,0.3,0.9);\n    vec3 cres = lerpcolor(cmix1,cmix2,uv.x*uv.x*sin(iTime)+uv.y*uv.y*cos(iTime));\n    \n    color += 1.0-ci;\n    color += cres;\n    \n    \n    c = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}