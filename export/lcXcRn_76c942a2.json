{"ver":"0.1","info":{"id":"lcXcRn","date":"1720690908","viewed":29,"name":"Mikhaelibad","username":"steelannelida","description":"Inspired by Mikhaelibad U-Bahn station in Munich\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["water","pool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define N 19\n#define PI 3.1415926\n#define EPS 0.001\n\nvec4[N] randinit(int seed) {\n    vec4[N] res;\n    int a = 2323127;\n    int b = 3627613;\n\n\n    int m = 10000;\n\n    for (int i = 0; i < N; ++i) {\n        seed = a * seed + b;\n        float l1 = float(seed % 1000) / float(1000);\n        seed = a * seed + b;\n        float l2 = float(seed % 1000) / float(1000);\n        seed = a * seed + b;\n        float l3 = float(seed % 1000) / float(1000);\n        seed = a * seed + b;\n        float l4 = float(seed % 1000) / float(1000);\n        res[i] = vec4(l1, l2, l3, l4);\n    }\n    return res;\n}\n\nfloat wave(vec2 p, float t) {\n    vec4[N] harmonics = randinit(131110);\n    //p = quantize(p, 1. / 64.);\n    float height = 0.;\n    for (int i = 0; i < N; ++i) {\n        vec4 h = harmonics[i];\n        float wavenum = 4. * exp(2. * h.x) * pow(float(i + 1), 0.69);\n        float asimuth = h.y * 2. * PI;\n        vec2 wv = wavenum * vec2(cos(asimuth), sin(asimuth));\n        float phase = h.z * 2. * PI;\n        float amp = 1. / wavenum * exp(-h.w);\n        float speed = sqrt(wavenum);\n        height += exp(amp * (cos(speed * t + dot(wv, p)))) - 1.;\n    }\n    return 0.02 * height;\n}\n\nfloat lattice(vec2 pos, float width) {\n\tvec2 f = 1. - abs(fract(pos) - 0.5) / width;\n\treturn max(0., max(f.x, f.y));\n}\n\nvec3 bottom(vec2 p) {\n    vec3 c = mix(\n        vec3(0.4, 0.5961, 0.7451),\n        vec3(0.7804, 0.7333, 0.5686),\n        lattice(p * 10., 0.05)\n    );\n\t\n\treturn  c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4[N] harmonics = randinit(131110);\n    vec2 p = fract(fragCoord / iResolution.xy);\n    float t = iTime;\n    float h = wave(p, t);\n    float dx = (wave(p + vec2(EPS, 0.), t) - h) / EPS;\n    float dy = (wave(p + vec2(0., EPS), t) - h) / EPS;\n    vec3 normal = normalize(vec3(-dx, -dy, 1.));\n    vec3 lightvec = vec3(0., 0., -1.);\n    vec3 viewvec = vec3(0., 0., -1.);\n    vec3 reflected_ray = reflect(viewvec, normal);\n\n    \n    vec3 sky = vec3(0.9333, 0.9608, 0.9804); \n    vec3 reflected = sky * 9.* clamp(reflected_ray.x - 0.1, 0., 1.);\n\n    vec3 rv = refract(viewvec, normal, 1.03);\n    vec3 pt = vec3(p.xy, h);\n    float depth = 5.;\n    // rv * l = (-depth-pt)/rv;\n    float l = -depth - pt.z / rv.z;\n    vec3 bottom_pt = pt + l * rv;\n    vec3 refracted = bottom(bottom_pt.xy);\n    fragColor = vec4(refracted +  clamp(reflected, 0., 1.), 1.);\n}\t\n\n","name":"Image","description":"","type":"image"}]}