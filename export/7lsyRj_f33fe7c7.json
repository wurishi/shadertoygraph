{"ver":"0.1","info":{"id":"7lsyRj","date":"1648332466","viewed":236,"name":"convolutional CA","username":"icantcomeupwithausername","description":"cellular automaton with a single convolution","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["convolution","ca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;  \n    fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"mat3 kernel = mat3(\n    0.68, -0.9, 0.68,\n    -0.9, -0.56, -0.9,\n    0.68, -0.9, 0.68\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    if(iFrame < 10){\n        fragColor = texture(iChannel1, uv) * 50.0;\n    }else{ \n        //convolution\n        vec3 sum = vec3(0);\n        for(int y = 0; y < 3; y++){\n            for(int x = 0; x < 3; x++){\n                sum += texture(iChannel0, fract(uv + vec2(x - 1, y - 1) / iResolution.xy)).xyz * kernel[y][x];\n            }\n        }\n        \n        //inverse gaussian\n        sum = 1.0 - exp2(-0.6 * sum * sum);\n        \n        if(iMouse.z > 0.0){\n            uv = uv * 2.0 - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            \n            vec2 m = iMouse.xy / iResolution.xy * 2.0 - 1.0;\n            m.x *= iResolution.x/iResolution.y;\n            if(dot(uv-m, uv-m) < 0.01) {\n                sum++;\n            } \n        }\n        \n        fragColor = vec4(sum, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = mix(texture(iChannel0, uv), texture(iChannel1, uv), 0.6); //smooth out flickering\n}","name":"Buffer B","description":"","type":"buffer"}]}