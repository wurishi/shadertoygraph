{"ver":"0.1","info":{"id":"4csSzn","date":"1704855743","viewed":87,"name":"[steve] image magnifier","username":"import_shader_steve","description":"Shader that magnifies an image. Has a smooth fallout radius that applies a water-droplet-like zoom fallout effect.","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["imagemagnifier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define blur 0.01\n\nconst float radius = 0.6;\nconst float falloutRadius = 0.1;\nconst float zoomFactor = 2.;\n\nfloat remap01(float x, float low, float high) {\n    return clamp((x-low)/(high-low), 0., 1.);\n}\nfloat remap(float x, float lowIn, float highIn, float lowOut, float highOut) {\n    return mix(lowOut, highOut, remap01(x, lowIn, highIn));\n}\nvec2 remap(vec2 uv, vec2 lowIn, vec2 highIn, vec2 lowOut, vec2 highOut) {\n    return vec2(remap(uv.x, lowIn.x, highIn.x, lowOut.x, highOut.x), remap(uv.y, lowIn.y, highIn.y, lowOut.y, highOut.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = remap(fragCoord / iResolution.xy, vec2(0.), vec2(1.), vec2(-iResolution.x/iResolution.y, -1.), vec2(iResolution.x/iResolution.y, 1.));\n    vec2 m = remap(iMouse.xy / iResolution.xy, vec2(0.), vec2(1.), vec2(-iResolution.x/iResolution.y, -1.), vec2(iResolution.x/iResolution.y, 1.));\n    \n    float d = length(uv - m);\n    \n    if (d < radius) uv /= zoomFactor;\n    else {\n        // d == radius --> 0. --> zoomFactor; d == radius + falloutRadius --> 1. --> 1.\n        float offset = d - radius;\n        offset = remap(offset, 0., falloutRadius, 0., 1.);\n        float z = mix(zoomFactor, 1., offset);\n        uv /= z;\n    }\n    \n    uv = remap(uv, vec2(-iResolution.x/iResolution.y, -1.), vec2(iResolution.x/iResolution.y, 1.), vec2(0.), vec2(1.));\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}