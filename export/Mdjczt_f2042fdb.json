{"ver":"0.1","info":{"id":"Mdjczt","date":"1493413666","viewed":236,"name":"AA Sub-Samples","username":"TinyTexel","description":"simple template for visualizing sub-sample positions\nthe 3 sub-samples pattern already gives a decent quality (f.i.: https://www.shadertoy.com/view/MdBcRt)\nthe 5 sub-samples pattern results in a nice rotated grid (and good quality)\nneither new nor fancy","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["antialiasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Lincense: CC0 (https://creativecommons.org/publicdomain/zero/1.0/)\n\n/*\nsimple template for visualizing sub-sample positions\n the 3 sub-samples pattern already gives a decent quality \n (f.i.: https://www.shadertoy.com/view/MdBcRt)\n the 5 sub-samples pattern results in a nice rotated grid (and good quality)\n\nneither new nor fancy\n*/\n\n///////////////////////////////////////////////////////////////////////////\n//=======================================================================//\n\n#define Frame float(iFrame)\n#define Time iTime\n#define PixelCount iResolution.xy\n#define OUT\n\n/*\n#define float2 vec2\n#define float3 vec3\n#define float4 vec4\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define frac fract\n/**/\n\n#define lerp mix\n#define rsqrt inversesqrt\n\nconst float Pi = 3.14159265359;\nconst float Pi05 = Pi * 0.5;\n\nfloat Pow2(float x) {return x*x;}\nfloat Pow3(float x) {return x*x*x;}\nfloat Pow4(float x) {return Pow2(Pow2(x));}\n\n\nfloat SqrLen(float v) {return v * v;}\nfloat SqrLen(vec2  v) {return dot(v, v);}\nfloat SqrLen(vec3  v) {return dot(v, v);}\nfloat SqrLen(vec4  v) {return dot(v, v);}\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\n//=======================================================================//\n///////////////////////////////////////////////////////////////////////////\nfloat PlotDot(vec2 sp, vec2 dp, float dr)\n{\n    float v = length(sp - dp) - dr;\n    \n    if(v > dr) return 0.0;\n    \n    v /= length(vec2(dFdx(v), dFdy(v)))*1.5;\n    v = 1.0 - clamp(v * 1.0, 0.0, 1.0);\n    \n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = floor(fragCoord.xy);\n\tvec2 tex = fragCoord.xy / PixelCount;\n    \n    vec3 col = vec3(0.0);\n    col = vec3(tex, sin(Time) * 0.5 + 0.5);\n\n    vec2 uv2 = uv / 64.0;\n    vec2 uvi = floor(uv2);\n    vec2 uvf = fract(uv2);\n\n    \n    const vec2 smpls2[2] = vec2[]\n    (\n        vec2(0.25, 0.25),\n        vec2(0.75, 0.75)   \n    );\n    \n    const vec2 smpls3[3] = vec2[]\n    (\n        vec2(3.0, 1.0) / 6.0,\n        vec2(5.0, 3.0) / 6.0,\n        vec2(1.0, 5.0) / 6.0     \n    );\n    \n    const vec2 smpls4[4] = vec2[]\n    (\n        vec2(5.0, 1.0) * 0.125,\n        vec2(1.0, 3.0) * 0.125,\n        vec2(7.0, 5.0) * 0.125,\n        vec2(3.0, 7.0) * 0.125       \n    );\n    \n    const vec2 smpls5[5] = vec2[]\n    (\n        vec2(3.0, 1.0) * 0.1,\n        vec2(9.0, 3.0) * 0.1,\n        vec2(5.0, 5.0) * 0.1,\n        vec2(1.0, 7.0) * 0.1,\n        vec2(7.0, 9.0) * 0.1\n    );\n    \n    //const vec2 smpls5T[5] = vec2[]\n    //(\n    //    vec2( 7.0,-1.0) * 0.1,\n    //    vec2(11.0, 7.0) * 0.1,\n    //    vec2( 5.0, 5.0) * 0.1,\n    //    vec2(-1.0, 3.0) * 0.1,\n    //    vec2( 3.0,11.0) * 0.1\n    //);\n    \n    float dots = 0.0;\n    \n   #if 1\n    // 5 sub-samples\n    bvec2 tl0 = greaterThan(fract(uv2 * 5.0 * 0.5), vec2(0.5));   \n    bvec2 tl1 = greaterThan(fract(uv2 * 1.0 * 0.5), vec2(0.5));   \n    \n    for(uint i = 0u; i < 5u; ++i) dots += PlotDot(uvf, smpls5[i], 0.02);       \n   #elif 0\n    // 4 sub-samples\n    bvec2 tl0 = greaterThan(fract(uv2 * 4.0 * 0.5), vec2(0.5));   \n    bvec2 tl1 = greaterThan(fract(uv2 * 1.0 * 0.5), vec2(0.5));   \n    \n    for(uint i = 0u; i < 4u; ++i) dots += PlotDot(uvf, smpls4[i], 0.02);       \n   #elif 1\n    // 3 sub-samples\n    bvec2 tl0 = greaterThan(fract(uv2 * 3.0 * 0.5), vec2(0.5));   \n    bvec2 tl1 = greaterThan(fract(uv2 * 1.0 * 0.5), vec2(0.5));   \n    bvec2 tl2 = greaterThan(fract(uv2 * 0.5 * 0.5), vec2(0.5));   \n    \n    vec2 flip = vec2(0.0, 0.0);\n    //flip = vec2(tl1.x, tl1.y);// circles\n    flip = vec2(tl1.y, tl1.x);// rotated boxes\n    //flip = vec2(  0.0, tl1.x != tl1.y);// diamonds\n    //flip = vec2(tl1.y, tl1.x != tl1.y);// wiggles\n    //if(tl2.x != tl2.y) flip = vec2(tl1.x != tl1.y, tl1.x);// wiggles\n    \n    //flip.x = tl2.x != tl2.y ? 1.0 : 0.0;\n    \n    //vec2 flip = vec2(tl1.y ? 1.0 : 0.0, tl1.x ? 0.0 : 1.0);\n      \n    //for(uint i = 0u; i < 2u; ++i) dots += PlotDot(uvf, vec2(abs(flip.x - smpls2[i].x), smpls2[i].y), 0.02); \n    //for(uint i = 0u; i < 2u; ++i) dots += PlotDot(uvf, smpls2[i], 0.02); \n\n    //for(uint i = 0u; i < 3u; ++i) dots += PlotDot(uvf, vec2(smpls3[i].x, abs(flip.y - smpls3[i].y)), 0.02); \n    //for(uint i = 0u; i < 3u; ++i) dots += PlotDot(uvf, vec2(abs(flip.x - smpls3[i].x), smpls3[i].y), 0.02); \n    for(uint i = 0u; i < 3u; ++i) dots += PlotDot(uvf, abs(flip - smpls3[i]), 0.02); \n    //for(uint i = 0u; i < 3u; ++i) dots += PlotDot(uvf, abs(flip - ((smpls3[i]-0.5)*0.9+0.5)), 0.02); \n    \n    //for(uint i = 0u; i < 4u; ++i) dots += PlotDot(uvf, smpls4[i], 0.02);  \n    //for(uint i = 0u; i < 5u; ++i) dots += PlotDot(uvf, smpls5[i], 0.02);\n   #endif\n    \n    \n    col = vec3(0.0);\n    \n   #if 1\n    if(tex.x < 0.5)\n    {\n    \tif(tl1.x != tl1.y) col = vec3(0.05);\n    \tif(tl0.x != tl0.y) col = col * 0.6 + 0.003;\n    }\n   #endif\n    \n    col += vec3(dots);\n    \n\tfragColor = vec4(GammaEncode(clamp(col, 0.0, 1.0)), 1.0);\n    //fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}