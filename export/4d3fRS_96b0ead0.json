{"ver":"0.1","info":{"id":"4d3fRS","date":"1525557556","viewed":116,"name":"Mustache-brot!","username":"akhgary","description":"There is no such thing as mustache-brot! i just made a mistake but i thought it would be cool to share it.\n\nI wanted to draw lines from every Z_n to Z_n+1. i expected to see lines all over the place\nuntil i realized how fragment shader works...","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","line"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Something wonderful about mandelbrot set is that\n// Even if you make a mistake, it makes beautiful pattern!\n\nconst float thickness = 3.0;\n\nconst int iterations = 100;\nconst float bailout = 16.0;\n\nfloat line(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p - a, ba = b - a; \n    float dist = length(pa - ba*clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n    return 1.-smoothstep(.0,thickness/iResolution.y,dist);\n}\n\nvec3 mandelbrot(vec2 uv) {\n    vec3 set = vec3(0);\n    vec2 c = uv,z = c;\n    \n    for(int i = 0; i < iterations && dot(z, z) <= bailout; i++) {\n\t    z = z*mat2(z.x,-z.y,z.y,z.x) + c;\n        \n        vec2 z2 = z*mat2(z.x,-z.y,z.y,z.x) + c;\n        \n        set+=line(uv,z, z2); // connect lines to make a path?\n                             // ain't work that way!\n        \n                             // in fact only the fragment we started with\n        \t\t\t\t\t // turns into white. \n        \t\t\t\t     // other fragments produce another path.\n    }\n    \n    return set;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 color = mandelbrot(uv*2.);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}