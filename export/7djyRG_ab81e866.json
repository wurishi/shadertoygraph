{"ver":"0.1","info":{"id":"7djyRG","date":"1643732809","viewed":135,"name":"Sphere partition","username":"SimonL","description":"Implementation of A general rule for disk and hemisphere partition into equal-area cells (Benoit Beckers, Pierre Beckers, https://www.sciencedirect.com/science/article/pii/S0925772112000296)","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["sphere","area","cells","partition","beckers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Simon LUCAS - 01/02/2022\n\n// Implementation of A general rule for disk and hemisphere partition into equal-area cells\n// Matlab implementation of the authors : http://www.heliodon.net/downloads/Beckers_&_Beckers%2020180423%20Complete%20set%20of%20Matlab%20procedures%20for%20achieving%20uniform%20ray%20generation.pdf\n\n\n#define C(x) (texture(iChannel1,x))\n\nvoid mainImage( out vec4 Col, in vec2 Coo )\n{\n    Col = texture(iChannel0,Coo/R.xy);\n        \n    // Scene setup\n    vec2 uv = (Coo-R.xy/2.)/R.y;\n    uv *= 2.;\n    vec2 p = 1.25*(uv + vec2(0.85,0.));\n\n    vec2 m = vec2(0.5);\n    if(iMouse.xy!=vec2(0))\n        m = M.xy / R.xy;\n    \n    m.x *= 3.141593*2.;\n    m.y *= 3.141593;\n    vec3 ro = 2.*vec3(cos(m.x) * sin(m.y),cos(m.y),sin(m.y)* sin(m.x));\n    vec3 ta = vec3( 0.0, 0., 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = ww;\n    ro += p.x*uu + p.y*vv;\n    \n    \n    // Sphere intersection\n    float t;\n    float a = dot(rd, rd);\n    float b = 2.0 * dot(rd, ro);\n    float c = dot(ro, ro) - 1.;\n    float d = b*b - 4.0*c; \n    if (d < 0.0) {\n        t = -1.0;\n    }\n    t = (-b - sqrt(d))/2.0;\n    \n    \n    // First View\n    \n    if(t > 0.){\n        vec3 n = normalize(ro + t * rd);\n        \n        float th = acos(n.y);\n        float ph = atan(n.x,-n.z);\n        ph /= 2. * 3.141593;\n        \n        int i = 0;\n        while(i < DATA_MAX_LENGTH){\n            vec4 data = texelFetch(iChannel0,ivec2(i,0),0);\n            // Find the right zenithal angle for subdivision\n            if(data.y < PI/2. - abs(th - PI/2.)){\n                #if 1\n                Col = C(vec2(float(i)/10.,floor(ph * data.x) / data.x));\n                Col *= n.y > 0. ? 1. : 0.5;\n                #else\n                Col = vec4(pow(data.w,1./2.2));\n                #endif\n                break;\n            }\n            i++;\n        }\n        \n        \n    }\n    \n    // Second View\n    \n    p = (uv - vec2(0.85,0.))*0.7;\n    if(p.x>-0.5 && p.y > -0.5 && p.x<0.5 && p.y < 0.5){\n        vec2 uv = p + 0.5;\n        int i = 1;\n        vec4 data = vec4(1.);\n        while(data.x != 0. && i < DATA_MAX_LENGTH){\n            i++;\n            data = texelFetch(iChannel0,ivec2(i-1,0),0);\n        }\n        \n        float n = float(i);\n        data = texelFetch(iChannel0,ivec2(uv.y * n,0),0);\n        vec2 id = floor(uv * vec2(data.x,n));\n       \n        \n        Col += C(id*0.01);\n    }\n    \n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define T (iTime*0.05+0.)\n#define PI 3.141593\n#define DATA_MAX_LENGTH 200\n#define R iResolution\n#define M iMouse\n#define MAX_CELLS 5000.\n\nbool _equal(float a, float b){\n    return (a > b-0.01) && (a < b+0.01);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Code by Simon LUCAS - 01/02/2022\n\n// Implementation of A general rule for disk and hemisphere partition into equal-area cells\n// Matlab implementation of the authors : http://www.heliodon.net/downloads/Beckers_&_Beckers%2020180423%20Complete%20set%20of%20Matlab%20procedures%20for%20achieving%20uniform%20ray%20generation.pdf\n\n\n// Partition creation\n\nvoid mainImage( out vec4 Col, in vec2 Coo )\n{\n    float t = 2.*abs(fract(T)-0.5);\n    float s = floor(t*50.)/50.;\n    float nsph = mix(8.,MAX_CELLS,s); // Input number of cells\n    // Number of cells must be even\n    nsph = round(nsph/2.)*2.;\n    // Initializations\n    float idep = nsph/2.;\n    float tim1 = PI/2.;\n    float rim1 = sqrt(2.);\n    float nim1 = idep;\n    \n    // Estimated number of ring\n    float nring = floor(sqrt(idep));\n    \n    bool a = true;\n    // Loop initialization\n    float nan = 0.;\n    for(float i = 0.; i < nring; i++){ // Loop on the rings / disks\n        float n_i = nim1; // Number of cells in disk i\n        float ti = tim1 - sqrt(2.*PI/idep); // Zenithal angle\n        float ri = 2.*sin(ti/2.); // equivalent projection\n        float ni = round(nim1*(ri/rim1)*(ri/rim1)); // Number of cells\n        \n        if(a && _equal(floor(Coo.x),floor(i))){\n            float n = n_i - ni;\n            float dph = 2.*PI/n;\n            float th  = (ti+tim1)/2.;\n            float dth = sqrt(2.*PI/idep);\n            Col = vec4(n,ti,ri,sin(th)*dth*dph);\n            a = false;\n        }\n        \n        nim1 = ni;\n        rim1 = ri;\n        tim1 = ti;\n        \n        // Forcing presence of polar disks\n        if( _equal(nim1,2.) ) // nim1 == 2\n            nim1 = 1.;\n        if( _equal(nim1,0.) ) // nim1 == 0\n            nim1 = 1.;\n        if( _equal(nim1,1.) && _equal(nan,0.)){ // nim1 == 1 && nan == 0\n            nan = i+1.;\n        }\n        \n    }\n    \n    if(Coo.x > nan){\n        Col -= Col;\n    }\n    \n    \n}","name":"Buffer A","description":"","type":"buffer"}]}