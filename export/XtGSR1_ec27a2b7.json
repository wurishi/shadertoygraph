{"ver":"0.1","info":{"id":"XtGSR1","date":"1482704093","viewed":632,"name":"Art : Apollonian Slices","username":"Gijs","description":"Just messing around. 3D Version : https://www.shadertoy.com/view/llG3Dt","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","distance","apollonian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float MinRes = min(iResolution.x,iResolution.y);\n    float MaxRes = max(iResolution.x,iResolution.y);\n    \n    float h = sin(-iTime*.1)*.495+.5;//Slice Height\n    \n    float Scale = (1.-h);//Slice width is basically proportional to slice height\n    //Set this is 1 to remove the zoom in\n    \n\tvec2 sp = (fragCoord.xy*2.-iResolution.xy)/MinRes*Scale;//Scaled view space\n    \n    vec3  p = vec3(sp.x,h,sp.y);//get the point in the 3D Slice\n   \n    //Apply Apollonian fractal formula on p\n\tfloat s = 1.;\n\tfor( int i=0; i<16;i++ ){\n\t\tp = mod(p+1.,2.)-1.;\n\t\tfloat k = 1.03/dot(p,p);\n\t\tp *= k;\n\t\ts *= k;\n\t}\n\t//aquire distance\n\tfloat d = .25*abs(p.y)/s;\n    \n    //color distance with an appropriate smoothstep scaled in view resolution and view space\n\tfragColor = vec4(smoothstep(MinRes*10./Scale,0.,1./d));\n}","name":"Image","description":"","type":"image"}]}