{"ver":"0.1","info":{"id":"wslGzS","date":"1546763722","viewed":173,"name":"Big game of life","username":"rory618","description":"Using pixels to store a 4x4 of data to simulate game of life. Should be straightforward to expand this to other multipass filter based things, like simulating waves.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["game","automata","life","cellular","of","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if(iMouse.z>0.){\n        fragCoord = iMouse.xy*4. + (fragCoord-R.xy/2.)/2.;\n        //fragCoord += floor(iMouse.xy*20.);\n        //fragCoord /= 4.;\n        int x = int(mod(fragCoord.x,4.));\n        int y = int(mod(fragCoord.y,4.));\n        vec2 z = floor(fragCoord/4.)+.5;\n        //vec2 uv = fragCoord/R.xy;\n        mat4 data = unpackvec4Tomat4(texture(iChannel0, z/R.xy));\n        fragColor = vec4(data[x][y]);\n    } else {\n        vec2 uv = fragCoord/R.xy;\n        mat4 data = unpackvec4Tomat4(texture(iChannel0, uv));\n        for(int i = 0; i < 16; i++){\n            fragColor += vec4(max(0.,data[i%4][i/4]))/16.;\n        }\n    }\n    fragColor = fragColor/2e3;\n    //fragColor = data[int(dot(vec2(lessThan(iMouse.x>0.?iMouse.xy/iResolution.xy:vec2(.5),uv)),vec2(1,2)))];\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\nfloat uintToMinifloat(uint i){\n    if((i&0xFFu)==0u) return 0.;\n    float mantissa = float(i&7u);\n    float exponent = float((i>>3)&15u);\n    float sgn = float((i>>7)&1u);\n    return (mantissa/8.+1.)*exp2(exponent)*(sgn*2.-1.);\n}\n\nuint MinifloatTouint(float x){\n    float sgn = float(x>0.);\n    x = abs(x);\n    if(x<.5) return 0u;\n    float exponent = floor(log2(x));\n    float mantissa = floor(8.*(x / exp2(exponent) - 1.));\n    if(exponent>=16.){\n        exponent=15.;\n        mantissa=7.;\n    }\n    return uint(sgn)<<7 | uint(exponent) << 3 | uint(mantissa);\n    \n}\n\nvec4 unpackUnorm4x8(uint p){\n    return vec4(uintToMinifloat(p),\n                uintToMinifloat(p>>8),\n                uintToMinifloat(p>>16),\n                uintToMinifloat(p>>24));\n}\n\nuint packUnorm4x8(vec4 v){\n    return MinifloatTouint(v.x) |\n            MinifloatTouint(v.y)<<8 |\n            MinifloatTouint(v.z)<<16 |\n            MinifloatTouint(v.w)<<24;\n}\n\nmat4 unpackvec4Tomat4(vec4 v){\n    return mat4(unpackUnorm4x8(floatBitsToUint(v.x)),\n                unpackUnorm4x8(floatBitsToUint(v.y)),\n                unpackUnorm4x8(floatBitsToUint(v.z)),\n                unpackUnorm4x8(floatBitsToUint(v.w))\n               );\n}\n\nvec4 packmat4Tovec4(mat4 m){\n    return vec4(uintBitsToFloat(packUnorm4x8(m[0])),\n                uintBitsToFloat(packUnorm4x8(m[1])),\n                uintBitsToFloat(packUnorm4x8(m[2])),\n                uintBitsToFloat(packUnorm4x8(m[3])));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2[] square = vec2[](\tvec2(-1,-1),\n                        vec2( 0,-1),\n                        vec2( 1,-1),\n                        vec2( 1, 0),\n                        vec2( 1, 1),\n                        vec2( 0, 1),\n                        vec2(-1, 1),\n                        vec2(-1, 0));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/R.xy;\n    \n    mat4 data = unpackvec4Tomat4(texture(iChannel0, uv));\n    \n    if(iFrame<13){\n        for(int i = 0; i < 16; i++){\n            vec2 d = vec2(i%4,i/4);\n            data[i%4][i/4]=texture(iChannel1,fract((floor(fragCoord)*4.+d+.5)/iChannelResolution[1].xy)).x*2100.;\n            data[i%4][i/4]=texture(iChannel1,uv ).x*8100.;\n        }\n    } else {\n        \n        mat4 dataNW = unpackvec4Tomat4(texture(iChannel0, uv+square[0]/R.xy));\n        mat4 dataN  = unpackvec4Tomat4(texture(iChannel0, uv+square[1]/R.xy));\n        mat4 dataNE = unpackvec4Tomat4(texture(iChannel0, uv+square[2]/R.xy));\n        mat4 dataE  = unpackvec4Tomat4(texture(iChannel0, uv+square[3]/R.xy));\n        mat4 dataSE = unpackvec4Tomat4(texture(iChannel0, uv+square[4]/R.xy));\n        mat4 dataS  = unpackvec4Tomat4(texture(iChannel0, uv+square[5]/R.xy));\n        mat4 dataSW = unpackvec4Tomat4(texture(iChannel0, uv+square[6]/R.xy));\n        mat4 dataW  = unpackvec4Tomat4(texture(iChannel0, uv+square[7]/R.xy));\n        mat4[] dataArr = mat4[](dataNW,dataN,dataNE,dataW,data,dataE,dataSW,dataS,dataSE);\n        \n        \n        for(int i = 0; i < 16; i++){\n            vec2 d = vec2(i%4,i/4);\n            float c = 0.;\n            for(int j = 0; j < 8; j++){\n                vec2 p = mod(square[j]+d,vec2(4));\n                vec2 s = floor((square[j]+d)/4.);\n                c += float(dataArr[int(dot(s+1.,vec2(1,3)))][int(p.x)][int(p.y)]>=1900.);\n            }\n            float a = data[i%4][i/4];\n            data[i%4][i/4]=a<1900.?(c==3.?2100.:a-150.):((c>=2.&&c<=3.)?2100.:a-150.);\n            \n        }\n        \n    }\n    \n    fragColor = packmat4Tovec4(data);\n}","name":"Buffer A","description":"","type":"buffer"}]}