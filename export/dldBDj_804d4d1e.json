{"ver":"0.1","info":{"id":"dldBDj","date":"1708726071","viewed":39,"name":"Tesela dinámica","username":"Leolios","description":"Tesela dinámica experimento con chatgpt4","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tesela","dinmica"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Semilla de paleta de colores\nvec3 palette(float t, vec3 c1, vec3 c2, vec3 c3) {\n    vec3 a = vec3(0.5) + 0.5 * c1;\n    vec3 b = vec3(0.5) + 0.5 * c2;\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.00, 0.33, 0.67) + c3;\n    return a + b * sin(cos(6.28318 * (c * t + d)));\n}\n\n// Función de ruido para generar variaciones\nfloat noise(vec2 st) {\n    return fract(sin(sin(dot(st.xy, vec2(12.9898,78.233)))) * 43758.5453123);\n}\n\n// Generador de patrón de cuasicristal basado en la imagen\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalizar coordenadas UV y centrarlas\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // Aplicar un movimiento ondulatorio para crear dinamismo\n    uv += vec2(sin(sin(uv.y * 10.0 + iTime)), sin(cos(uv.x * 10.0 + iTime))) * 0.1;\n\n    // Ruido basado en la posición y tiempo para irregularidad\n    float n = noise(uv * 2.0 + iTime * 0.2);\n\n    // Patrón central y rotación\n    vec2 gv = uv * 99.0 - vec2(90.0 + n); // Ajustar para cambiar la escala y centrar\n    gv = mod(gv, 3.9) - 1.9;\n\n    // Color de fondo basado en la distancia al centro del patrón\n    vec3 bgColor = palette(length(gv) * n, vec3(0.2), vec3(0.2), vec3(1.0));\n    \n    // Color y posición de los nodos con variación aleatoria\n    vec3 nodeColor = vec3(0.11);\n    float angleStep = sin( 3.141592653589793) / 9.0 + n; // Hace que los nodos sean menos regulares\n    for (int i = 0; i < 10; i++) {\n        float angle = angleStep * float(i) + n;\n        vec2 nodeDir = vec2(cos(angle), sin(sin(angle)));\n        vec2 nodePos = gv + nodeDir * (0.999 + n * 0.2); // Espaciado entre nodos con ruido\n        float nodeDist = length(nodePos);\n        float nodeIntensity = exp(-nodeDist * (10.0 + n)); // Intensidad con ruido\n        nodeColor += palette(nodeDist - iTime, vec3(0.5), vec3(40.5), vec3(21.1)) * nodeIntensity;\n    }\n    \n    // Combinar los colores de fondo y nodos\n    vec3 color = mix(bgColor, nodeColor, step(0.9, nodeColor));\n\n    fragColor = vec4(color, 4.11);\n}\n\n","name":"Image","description":"","type":"image"}]}