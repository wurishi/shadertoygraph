{"ver":"0.1","info":{"id":"3tSSWV","date":"1567050078","viewed":125,"name":"Color from Triangle Grid","username":"gressettd","description":"Playing with patterns that produce several variables for multiple perspectives on the pattern to drive color control.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grid","color","triangular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Random1D(float seed)\n{\n\treturn fract(sin(seed)*32767.0);\n}\n\nfloat Random1DB(float seed)\n{\n\treturn fract(sin(seed)* (65536.0*3.14159265359));\n}\n\nfloat Random1DC(float seed)\n{\n\treturn fract(cos(seed)* (131072.0*2.718281828459));\n}\n\nfloat Random3D(vec3 p)\n{\n\tvec3 comparator = vec3(\n\t\t12.34 * Random1D(p.x), \n\t\t56.789 * Random1DB(p.y),\n\t\t12.987 * Random1DC(p.z));\n\tfloat alignment = dot(p, comparator);\n\tfloat amplitude = sin(alignment) * 32767.0;\n\tfloat random = fract(amplitude);\n\treturn random;\n}\n\nvec4 ComputeTriangleGridPattern(vec2 pos, float scale)\t\n{\n\tmat2 m = mat2(1.0, -1.0 / 1.73, 0.0, 2.0 / 1.73);\n\tvec2 u = scale * pos * m;\n\tvec3 g = vec3(u, 1.0 - u.x - u.y);\n\tvec3 id = floor(g);\n\tg = fract(g);\n\tif (length(g) > 1.0) g = 1.0 - g;\n\tvec2 g2 = abs(2.0*fract(g.xy) - 1.0);\n\tfloat centerDistance = length(g2);\n\n\tfloat nodeDistance = length(1.0 - g2);\n\n\tfloat id1 = Random3D(id);\n\treturn vec4(id1, max(g.x,g.y), nodeDistance,centerDistance);\n}\n\nvec4 ComputeWaveGradientRGB(float t, vec4 bias, vec4 scale, vec4 freq, vec4 phase)\n{\n\tvec4 rgb = bias + scale * cos(6.28 * (freq * t + phase));\n\treturn vec4(clamp(rgb.xyz,0.0,1.0), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= float(iResolution.y) / float(iResolution.x);\n    \n    uv += vec2(cos(iTime*0.2) + iTime*0.1,iTime * 0.05);\n\n\n    vec4 cc = ComputeTriangleGridPattern(uv,5.0);\n    \n    vec4 bias = vec4(0.350,0.906,0.689,1.0);\n    vec4 scale = vec4(0.772,0.114,0.263,1.0);\n    vec4 freq = vec4(0.077,0.368,1.016,1.0);\n    vec4 phase = vec4(3.859,3.252,5.857,1.0);\n    \n    vec4 color;\n    if(cc.x < 0.25)\n\t\tcolor=ComputeWaveGradientRGB(1.0 + 0.5*cos(cc.y + cc.z + iTime), bias, scale, freq,phase);\n    else if(cc.x < 0.5)\n        color=ComputeWaveGradientRGB(tan(cc.w + iTime), bias, scale, freq, phase);\n    else if(cc.x < 0.75)\n        color = ComputeWaveGradientRGB(fract(cc.w/(cc.y+cc.z) + iTime), bias, scale, freq, phase);\n    else\n        color = ComputeWaveGradientRGB(tan(max(cc.w,cc.y) + iTime), bias, scale, freq, phase);\n    \n    \n    // Output to screen\n    fragColor = vec4(color.xyz,1.0);\n}","name":"Image","description":"","type":"image"}]}