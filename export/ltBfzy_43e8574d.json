{"ver":"0.1","info":{"id":"ltBfzy","date":"1516253420","viewed":347,"name":"Blobby boy","username":"riginosk","description":"shader blob","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["blob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// by spolsh 2017, michal klos\n\n// pun intended\n#define R iResolution\n#define T iTime\n#define F fragCoord\n#define M iMouse\n\nfloat sphere(vec3 p, float r)\n{\n\treturn length(p)-r;   \n}\n\nfloat blob5(float d1, float d2, float d3, float d4, float d5)\n{\n    float k = 2.0;\n\treturn -log(exp(-k*d1)+exp(-k*d2)+exp(-k*d3)+exp(-k*d4)+exp(-k*d5))/k;\n}\n\nfloat map(vec3 p)\n{  \n    float s = smoothstep( -0.7, 0.7, sin(0.5*T));\n    float a = mix(0.5, 2.0, s);\n    float t = 1.0*T;\n    \n\tfloat s1 = sphere(p +a*vec3(cos(t*1.1),cos(t*1.3),cos(t*1.7)), 1.0);\n    float s2 = sphere(p +a*vec3(cos(t*0.7),cos(t*1.9),cos(t*2.3)), 1.2);\n    float s3 = sphere(p +a*vec3(cos(t*0.3),cos(t*2.9),sin(t*1.1)), 1.5);\n    float s4 = sphere(p +a*vec3(sin(t*1.3),sin(t*1.7),sin(t*0.7)), 0.4);\n    float s5 = sphere(p +a*vec3(sin(t*2.3),sin(t*1.9),sin(t*2.9)), 1.0);\n    \n    return blob5(s1, s2, s3, s4, s5);\n}\n\nfloat calcAO(vec3 p,vec3 n)\n{\n\tfloat dlt=0.5;\n\tfloat oc=0.0, d=1.0;\n\tfor(float i=0.0; i<6.; i++) {\n\t\toc+=(i*dlt-map(p+n*i*dlt))/d;\n\t\td*=2.0;\n\t}\n\t\n\treturn 1.0-oc;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n\treturn normalize( e.xyy *map(p + e.xyy) + \n\t\t\t\t\t  e.yyx *map(p + e.yyx) + \n\t\t\t\t\t  e.yxy *map(p + e.yxy) + \n\t\t\t\t  \t  e.xxx *map(p + e.xxx) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = F.xy/R.xy;\n    vec2 p = 2.0*(q-0.5);\n\tp.x *= R.x/R.y;\n    vec2 m = M.xy/R.xy;\n    \n    // camera\t\n\tvec3 ro = vec3(\n        15.0*cos(0.1*T + 6.0*m.x),\n        10.0 + 10.0*mix(-1.0,1.0, m.y),\n        15.0*sin(0.1*T + 6.0*m.x)\n    );\n\tvec3 ta = vec3( 0.0, 0.4, 0.0 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n          \n    // ray direction\n    vec3 rd = ca * normalize(vec3(p, 4.5));\n    vec3 col = texture(iChannel0, rd).rgb;\n    \n    float d, t;\n    vec3 pos = vec3(0.0);\n    for (int i=0; i<150; ++i) {\n        t+=(d=map(pos=ro+rd*t));\n        if (d<0.1||t<10.0) {\n\t\t\t            \n            float s = smoothstep( -0.5, 0.5, sin(0.5*T));\n            float bump = mix(0.05, 0.2, s);            \n    \t\tpos += bump*texture(iChannel0, pos).rgb;\n            \n            vec3 normal = calcNormal(pos);            \n            vec2 uv = vec2( atan( normal.x, normal.z ), acos(normal.y) );\n            vec3 tex = texture(iChannel1, uv).rgb;\n            float ao = calcAO(pos, normal);\n\n            vec3 refl = reflect(rd, normal);\n            float rim = pow(clamp(1.0+dot(normal, rd), 0.0, 1.0), 4.0);\n            vec3 reflSample0 = texture(iChannel0, refl).rgb;\n            vec3 reflSample1 = texture(iChannel0, normal).rgb;\n            vec3 reflSample = mix(reflSample0, vec3(reflSample0.rg,reflSample1.b), mix(0.1, 0.3, s));\n                        \n\t\t\tvec3 col0 = vec3(0.005)*tex;\n            vec3 col1 = pow(1.0-pow(rim, 0.6), 16.0)*vec3(1.8)*pow(tex, vec3(6.0));\n            col.rgb = ao*mix(mix(col0, col1, s), reflSample, rim);\n            \n        \tbreak;\n        } \n    }\n    \n    col *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}