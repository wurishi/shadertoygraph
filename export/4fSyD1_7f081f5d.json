{"ver":"0.1","info":{"id":"4fSyD1","date":"1722219606","viewed":63,"name":"Black Hole by Bearkirb","username":"BearKirb","description":"Black Hole","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float holeSize=1.5;\nvoid Rotate( inout vec3 vector, vec2 angle )\n{\n\tvector.yz = cos(angle.y)*vector.yz\n\t\t\t\t+sin(angle.y)*vec2(-1,1)*vector.zy;\n\tvector.xz = cos(angle.x)*vector.xz\n\t\t\t\t+sin(angle.x)*vec2(-1,1)*vector.zx;\n}\nfloat sdf(vec3 pos,vec3 pos2){\nreturn length(pos-pos2)-holeSize;\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\nfloat iTim=iTime/2.0;\nRotate(p,vec2((iTim/2.0)*(1.0/(length(p.xz)-1.0)),0.0));\n\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 3.0*(fragCoord-iResolution.xy*0.5)/-iResolution.x;\n    vec3 ray=vec3(uv.x,-uv.y,1.0);\n    vec3 cameraPos=vec3(0.0,1.5,-7.0);\n    vec3 blackHolePosition=vec3(0.0);\n    vec3 pos=cameraPos;\n    blackHolePosition.y=-0.5;\n    ray=normalize(ray);\n    vec2 cameraAngle=((iMouse.xy)/((iResolution.xy)/2.0))-1.0+vec2(0.0,0.0);\n    if(iMouse.x==0.0){\n    cameraAngle=vec2(3.141/2.0,0.0);\n    }\n    Rotate(ray,cameraAngle*vec2(1.0,-1.0));\n    Rotate(cameraPos,cameraAngle*vec2(1.0,-1.0));\n    Rotate(pos,cameraAngle*vec2(1.0,-1.0));\n    vec3 col=vec3(0.0);\n    float didEscape=1.0;\n    float fade=1.0;\n    vec3 color=vec3(0.9,0.6,0.3);\n    vec4 colorOut=vec4(0.0);\n    for(int i=0;i<500;i++){\n    vec3 toHole = blackHolePosition-pos;\n    float di=sdf(pos,blackHolePosition);\n    float effect=0.0004/pow(di,2.0);\n    float accr=sdEllipsoid(pos-blackHolePosition,vec3(7.0,0.9,7.0));\n    ray+=toHole*effect;\n    ray=normalize(ray);\n    pos+=ray*0.02;\n   didEscape=min(didEscape,sdf(pos,blackHolePosition)*2.0);\n   float stren=0.04*(abs(dot(normalize(cameraPos),vec3(0.0,1.0,0.0)))+0.05);\n  \n   colorOut.rgb-=min(accr,0.0)*color*stren*fade;\n   colorOut.a-=min(accr/2.0,0.0)*stren;\n    if(sdf(pos,blackHolePosition)<0.0){\n     \n    break;\n    }\n    }\n   \n    col=(texture(iChannel1,ray.xy).rgb)*didEscape;\n    fragColor = vec4(col,1.0);\n    fragColor.rgb = mix(fragColor.rgb,colorOut.rgb,clamp(colorOut.a,0.0,1.0));\n}","name":"Image","description":"","type":"image"}]}