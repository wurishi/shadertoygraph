{"ver":"0.1","info":{"id":"4cScWW","date":"1722294266","viewed":20,"name":"Simple tile function","username":"felipeguimaraens","description":"shader for a simple tile function","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tile","tilefunction","simpletile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 tile(vec2 coordinate, float size_pattern, float x_offset)\n{\n    /*\n    inputs:\n      coordinate: the normalized coordinate space\n      size_pattern: number of repetitions of tile pattern. \n      obs: values equal or smaller than 1.0 won't show any result.\n      x_offset: defines where the tiles in x intersects y. .5 for half\n    */\n\n    coordinate *= size_pattern;\n    coordinate.x += step(1., mod(coordinate.y, 2.)) * x_offset;\n    return coordinate = fract(coordinate);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = tile(uv, 3.0, 0.5);\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}