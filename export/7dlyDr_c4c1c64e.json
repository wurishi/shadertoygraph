{"ver":"0.1","info":{"id":"7dlyDr","date":"1642189895","viewed":99,"name":"Sol LeWitt - Wall Painting","username":"villedieumorgan","description":"Day 6 of the Genuary artificially generated month https://genuary.art.\nPrompt of the day: Sol LeWitt Wall Painting","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","generativeart","wallpainting","sollewitt","genuary"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Generative piece coded for Genuary 2022 (Day 6)\n// Prompt: \"Sol LeWitt\"\n// by @VilledieuMorgan\n\nfloat miv(vec2 a) { return min(a.y, a.x); } //return max domain of vector.\nfloat miv(vec3 a) { return min(a.z, miv(a.xy)); }\nfloat miv(vec4 a) { return min(miv(a.zw), miv(a.xy)); }\n\n#define mav(a) - miv(-a)\n#define grid(u) mav(abs(fract(u) * 2. - 1.))\n\nfloat rand(vec2 co) {\nreturn fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 n22(vec2 p) {\nvec3 a = fract(p.xyx * vec3(123.34, 234.34, 345.65));\na += dot(a, a + 34.45);\nreturn fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nconst vec3 lewittColorBis[16] = vec3[16](\n    vec3(185., 75., 84.),\n    vec3(214., 179., 60.),\n    vec3(64., 134., 171.),\n    vec3(150., 102., 70.),\n    vec3(103., 82., 106.),\n    vec3(197., 81., 41.),\n    vec3(98., 120., 122.),\n    vec3(39., 88., 118.),\n    vec3(159., 50., 45.),\n    vec3(180., 141., 52.),\n    vec3(192., 190., 182.),\n    vec3(104., 119., 50.),\n    vec3(57., 92., 50.),\n    vec3(111., 33., 21.),\n    vec3(148., 104., 58.),\n    vec3(109., 125., 123.)\n);\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv2 = uv - vec2(0.5, 0.7);\n    uv2.x *= iResolution.x / iResolution.y;\n\n    uv *= 4.;\n\n    // Voronoi\n    vec2 id = floor(uv);\n    vec2 cellUv = fract(uv);\n\n    vec2 cellIndex = vec2(0.);\n    vec2 cellCenter = vec2(0.0);\n    float minDist = 8.;\n    for (int y = -1; y <= 1; y++) {\n      for (int x = -1; x <= 1; x++) {\n        vec2 g = vec2(float(x), float(y));\n        vec2 o = n22(id + g);\n        o = 0.5 + 0.5 * sin(iTime * 0.5 + 6.2831 * o);\n        vec2 r = g + o - cellUv;\n        float d = dot(r, r);\n        if (d < minDist) {\n          cellIndex = id + g;\n          cellCenter = r;\n          minDist = d;\n        }\n      }\n    }\n\n    // Grid\n    float zoom = 2.6;\n    float thick = 1.;\n    float thickness = zoom * thick / iResolution.y;\n    float grid = smoothstep(0.9 - thickness, 0.9, grid(uv2 * zoom));\n    \n    // Cell color\n    int new1DId = int((cellIndex.x * 4.) + cellIndex.y);\n    vec3 col = lewittColorBis[new1DId] / 255.;\n\n    // Noisy color + grid\n    fragColor = vec4(mix(vec3(0.), col, 1. - grid) + rand(uv) * 0.1, 1.0);\n}","name":"Image","description":"","type":"image"}]}