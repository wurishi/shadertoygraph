{"ver":"0.1","info":{"id":"cdtSR7","date":"1679913479","viewed":97,"name":"VJ sync - Truchet - Pattern 1_1","username":"foxzasoby","description":"Truchet pattern synchronized with folk music.\nOptions:\n- uv moves smoothly with time\n- one color scheme\n- one stitch kind\n- tiles flipping\n- \"walking pixel\" - tile version dependent on music intensity\n- three layers\n- ladybug turned off","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["truchet","vj","musicsynchronization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Mdc3Rr","filepath":"https://soundcloud.com/warsaw-village-band/01-wvbmp-fly-my-voice?in=pawe-py/sets/polish-folk&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing#t=0%3A36","previewfilepath":"https://soundcloud.com/warsaw-village-band/01-wvbmp-fly-my-voice?in=pawe-py/sets/polish-folk&utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing#t=0%3A36","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// a.lis - truchet pattern, ver 1_1\n\nconst vec4 L1[14]=vec4[14](\n    vec4(0./255.,   0./255.,   0./255.,   1.0),\n    vec4(26./255.,  26./255.,  26./255.,  1.0),\n    vec4(51./255.,  51./255.,  51./255.,  1.0),\n    vec4(102./255., 102./255., 102./255., 1.0),\n    vec4(153./255., 153./255., 153./255., 1.0),\n    vec4(230./255., 230./255., 230./255., 1.0),\n    vec4(255./255., 255./255., 255./255., 1.0),\n    vec4(128./255., 128./255., 0./255.,   1.0),\n    vec4(255./255., 255./255., 0./255.,   1.0),\n    vec4(0./255.,   255./255., 0./255.,   1.0),\n    vec4(0./255.,   128./255., 0./255.,   1.0),\n    vec4(0./255.,   77./255.,  0./255.,   1.0),\n    vec4(0./255.,   51./255.,  0./255.,   1.0),\n    vec4(0./255.,   128./255., 128./255., 1.0)\n\n); \n\nconst vec4 L2[14]=vec4[14](\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(25./255.,  25./255.,  25./255.,    1.0),\n    vec4(102./255., 102./255., 102./255.,   1.0),\n    vec4(153./255., 153./255., 153./255.,   1.0),\n    vec4(204./255., 204./255., 204./255.,   1.0),\n    vec4(229./255., 229./255., 229./255.,   1.0),\n    vec4(255./255., 255./255., 255./255.,   1.0),\n\n    \n    vec4(127./255., 127./255., 255./255.,   1.0),\n    vec4(0./255.,   0./255.,   255./255.,   1.0),\n    \n    vec4(102./255.,   0./255.,   0./255.,   1.0),\n    vec4(102./255.,   127./255., 255./255., 1.0),\n    vec4(102./255.,   178./255., 255./255., 1.0),\n    vec4(102./255.,   204./255., 255./255., 1.0),\n    vec4(102./255.,   127./255., 127./255., 1.0)\n\n); \n\nconst vec4 L3[14]=vec4[14](\n    vec4(0./255., 0./255., 0./255., 1.0),\n    vec4(51./255., 51./255., 51./255., 1.0),\n    vec4(255./255., 255./255., 255./255., 1.0),\n    \n    vec4(255./255., 0./255., 0./255., 1.0),\n    vec4(192./255.,  0./255.,   0./255., 1.0),\n    vec4(128./255.,  0./255.,  0./255.,  1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0),\n    vec4(0./255.,   0./255.,   0./255.,     1.0)\n); \n\nconst int bug_0[60] = int[60](0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x01100000, 0x00000000, 0x00000000, 0x33440100, 0x00000000, 0x00000005, 0x33444000, 0x00000000, 0x00000003, 0x33433000, 0x00000000, 0x00000004, 0x23423000, 0x00000000, 0x00000004, 0x43444000, 0x00000000, 0x00000003, 0x33433000, 0x00000000, 0x00000003, 0x23424000, 0x00000000, 0x00000004, 0x43433000, 0x00000000, 0x00000000, 0x44340000, 0x00000000, 0x00000001, 0x00010000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000);\nconst int bug_1[60] = int[60](0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x01100100, 0x00000000, 0x00000001, 0x31341000, 0x00000000, 0x00000003, 0x33433000, 0x00000000, 0x00000004, 0x23423000, 0x00000000, 0x00000004, 0x43444000, 0x00000000, 0x00000003, 0x33433000, 0x00000000, 0x00000003, 0x23424000, 0x00000000, 0x00000004, 0x43433000, 0x00000000, 0x00000000, 0x44340000, 0x00000000, 0x00000000, 0x10100000, 0x00000000, 0x00000001, 0x00100000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000);\n\nconst int tile1_0[60] = int[60](0x00000000, 0x0c900000, 0x00000000, 0x00020000, 0x0dc00000, 0x00cc0000, 0x01200000, 0x0dac0000, 0x00000000, 0x00020000, 0x0adc1010, 0x00000000, 0x00010000, 0x00d00000, 0x20000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xc0000010, 0x10000000, 0x0000a000, 0x00000000, 0x00000000, 0x000da900, 0x01000000, 0x01000000, 0x000dba00, 0x01200000, 0xdcdc0000, 0xaaacc0c0, 0x00010009, 0x9bb00000, 0xb0bdad00, 0x00000100, 0xcc000000, 0x010ccbad, 0x00000000, 0x00000000, 0x00b01cab, 0xc0ddc000, 0x00000000, 0x00001dad, 0xbaaad0c0, 0x00000000, 0x00000dac, 0xabcc0000, 0x00c00000, 0x00001a9c, 0x0c00c001, 0x01000000, 0x00b0009c, 0x0ac00000, 0x20000000, 0x0b000000, 0x0ac00000, 0x10000000, 0x0000000c, 0x0ac00001, 0x00000000);\nconst int tile1_1[60] = int[60](0x00000000, 0x09c00000, 0x00000000, 0x00020000, 0x0dc00000, 0x00cc0000, 0x01200000, 0x0dac0000, 0x00000000, 0x00020000, 0x0adc1010, 0x00000000, 0x00010000, 0x00d00000, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xc0000010, 0x10000000, 0x0000a000, 0x00000000, 0x00000000, 0x000da900, 0x01000000, 0x01000000, 0x000dba00, 0x01200000, 0xdcdc0000, 0xaaacc0c0, 0x00010009, 0x9bb00000, 0xb0bdad00, 0x00000100, 0xcc000000, 0x010ccbad, 0x00000000, 0x00000000, 0x00b01cab, 0xc0ddc000, 0x00000000, 0x00001dad, 0xbaaad0c0, 0x00000000, 0x00000dac, 0xabcc0000, 0x00c00000, 0x00001a9c, 0x0c00c001, 0x01000000, 0x00b0009c, 0x0ac00000, 0x20000000, 0x0b000000, 0x0ac00000, 0x10000000, 0x0000000c, 0x0ac00001, 0x00000000);\nconst int tile1_2[60] = int[60](0x00000000, 0x0c900000, 0x00000000, 0x00020000, 0x0dc00000, 0x00cc0000, 0x01200000, 0x0dac0000, 0x00000000, 0x00020000, 0x0adc1010, 0x00000000, 0x00010000, 0x00d00000, 0x20000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xc0000010, 0x10000000, 0x0000a900, 0x00000000, 0x00000000, 0x000da900, 0x01000000, 0x01000000, 0x000dba00, 0x01200000, 0xdcdc0000, 0xaaacc0c0, 0x00010009, 0x9bb00000, 0xb0bdad00, 0x00000100, 0xcc000000, 0x010ccbad, 0x00000000, 0x00000000, 0x00b01cab, 0xc0ddc000, 0x00000000, 0x00001dad, 0xbaaad0c0, 0x00000000, 0x00000dac, 0xabcc0000, 0x00c00000, 0x00001a9c, 0x0c00c001, 0x01000000, 0x00b0009c, 0x0ac00000, 0x20000000, 0x0b000000, 0x0ac00000, 0x10000000, 0x0000000c, 0x0ac00001, 0x00000000);\nconst int tile1_3[60] = int[60](0x00000000, 0x0c900000, 0x00000000, 0x00020000, 0x0dc00000, 0x00cc0000, 0x01200000, 0x0dac0000, 0x00000000, 0x00020000, 0x0adc1010, 0x00000000, 0x00010000, 0x00d00000, 0x20000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xc0000010, 0x10000000, 0x0000a000, 0x00000000, 0x00000000, 0x000da900, 0x01000000, 0x01000000, 0x000dba00, 0x01200000, 0xdcdc0000, 0xaaacc0c0, 0x0001009a, 0xbbb00000, 0xb0bdad00, 0x00000100, 0xcc000000, 0x010ccbad, 0x00000000, 0x00000000, 0x00b01cab, 0xc0ddc000, 0x00000000, 0x00001dad, 0xbaaad0c0, 0x00000000, 0x00000dac, 0xabcc0000, 0x00c00000, 0x00001a9c, 0x0c00c001, 0x01000000, 0x00b0009c, 0x0ac00000, 0x20000000, 0x0b000000, 0x0ac00000, 0x10000000, 0x0000000c, 0x0ac00001, 0x00000000);\nconst int tile1_4[60] = int[60](0x00000000, 0x0c900000, 0x00000000, 0x00020000, 0x0dc00000, 0x00cc0000, 0x01200000, 0x0dac0000, 0x00000000, 0x00020000, 0x0adc1010, 0x00000000, 0x00010000, 0x00d00000, 0x20000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xc0000010, 0x10000000, 0x0000a000, 0x00000000, 0x00000000, 0x000da900, 0x01000000, 0x01000000, 0x000dba00, 0x01200000, 0xdcdc0000, 0xaaacc0c0, 0x00010009, 0x9bb00000, 0xb0bdad00, 0x00000100, 0xcc000000, 0x010ccbad, 0x00000000, 0x00000000, 0x00b01cab, 0xc0ddc000, 0x00000000, 0x00001dad, 0xbaaad0c0, 0x00000000, 0x00000dac, 0xabcc0000, 0x00c00000, 0x00001a1c, 0x0c00c001, 0x01000000, 0x00b0091c, 0x0ac00000, 0x20000000, 0x0b000100, 0x0ac00000, 0x10000000, 0x0000000c, 0x0ac00001, 0x00000000);\nconst int tile1_5[60] = int[60](0x00000000, 0x0c900000, 0x00000000, 0x00020000, 0x0dc00000, 0x00cc0000, 0x01200000, 0x0dac0000, 0x00000000, 0x00020000, 0x0adc1010, 0x00000000, 0x00010000, 0x00d00000, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0xc0000010, 0x12000000, 0x0000a000, 0x00000000, 0x00000000, 0x000da900, 0x01000000, 0x01000000, 0x000dba00, 0x01200000, 0xdcdc0000, 0xaaacc0c0, 0x00010009, 0x9bb00000, 0xb0bdad00, 0x00000100, 0xcc000000, 0x010ccbad, 0x00000000, 0x00000000, 0x00b01cab, 0xc0ddc000, 0x00000000, 0x00001dad, 0xbaaad0c0, 0x00000000, 0x00000dac, 0xabcc0000, 0x00c00000, 0x00001a9c, 0x0c00c001, 0x01000000, 0x00b0009c, 0x0ac00000, 0x20000000, 0x0b000000, 0x0ac00000, 0x10000000, 0x0000000c, 0x0ac00001, 0x00000000);\n\nconst int tile2_0[60] = int[60](0x01000001, 0xcb000000, 0x00000000, 0x00104010, 0xcad00001, 0x00000000, 0x00034601, 0xaad00111, 0x02000000, 0x06334641, 0xca000000, 0x10000000, 0x13668745, 0xca000001, 0x00000000, 0x06667751, 0x0bc0c000, 0x00000000, 0x10446655, 0x10c00c00, 0x00000000, 0x01164650, 0x10001900, 0x00020000, 0x0d064650, 0x10000da0, 0x00110000, 0xddaaa001, 0x00000da0, 0x0a990000, 0xa9acc000, 0x00000d0a, 0xaa0a0000, 0x00c00000, 0x00c00aa0, 0x00000000, 0x00000000, 0x000da000, 0x00000000, 0x00100000, 0x00caca10, 0x00000000, 0x00011000, 0x00dacaaa, 0xb0000000, 0x00010000, 0x0ca0ccc1, 0x00000000, 0x00002000, 0xcda00010, 0x1c000000, 0x0000000c, 0xca000000, 0x10000000, 0x00010000, 0xca010000, 0x0c000000, 0x00100000, 0xca001000, 0x00000000);\nconst int tile2_1[60] = int[60](0x01000001, 0xcb000000, 0x00000000, 0x00104010, 0xcad00001, 0x00000000, 0x00034601, 0xaad00111, 0x02000000, 0x06334641, 0xca000000, 0x10000000, 0x13668745, 0xca000001, 0x00000000, 0x06667751, 0x0bc0c000, 0x00000000, 0x10446655, 0x10c00c00, 0x00000000, 0x01664650, 0x10001900, 0x00020000, 0x0d664650, 0x10000da0, 0x00110000, 0xddaaa001, 0x00000da0, 0x0a990000, 0x99acc000, 0x00000d0a, 0xaa0a0000, 0x00c00000, 0x00c00aa0, 0x00000000, 0x00000000, 0x000da000, 0x00000000, 0x00100000, 0x00caca10, 0x00000000, 0x00011000, 0x00dacaaa, 0xb0000000, 0x00010000, 0x0ca0ccc1, 0x00000000, 0x00002000, 0xcda00010, 0x1c000000, 0x0000000c, 0xca000000, 0x10000000, 0x00010000, 0xca010000, 0x0c000000, 0x00100000, 0xca001000, 0x00000000);\nconst int tile2_2[60] = int[60](0x01000001, 0xcb000000, 0x00000000, 0x00104010, 0xca000001, 0x00000000, 0x00034601, 0xaad00111, 0x02000000, 0x06334641, 0xcad00000, 0x10000000, 0x13668745, 0xca000001, 0x00000000, 0x06667751, 0x0bc0c000, 0x00000000, 0x10446655, 0x10c00c00, 0x00000000, 0x01164650, 0x10001900, 0x00020000, 0x0d064650, 0x10000da0, 0x00110000, 0xddaaa601, 0x00000da0, 0x0a990000, 0xa9acc000, 0x00000d0a, 0xaa0a0000, 0x00c00000, 0x00c00aa0, 0x00000000, 0x00000000, 0x000da000, 0x00000000, 0x00100000, 0x00caca10, 0x00000000, 0x00011000, 0x00dacaaa, 0xb0000000, 0x00010000, 0x0ca0ccc1, 0x00000000, 0x00002000, 0xcda00010, 0x1c000000, 0x0000000c, 0xca000000, 0x10000000, 0x00010000, 0xca010000, 0x0c000000, 0x00100000, 0xca001000, 0x00000000);\nconst int tile2_3[60] = int[60](0x01000001, 0xcb000000, 0x00000000, 0x00104610, 0xcad00001, 0x00000000, 0x00034661, 0xaad00111, 0x02000000, 0x06334641, 0xca000000, 0x10000000, 0x13668745, 0xca000001, 0x00000000, 0x06667751, 0x0bc000c0, 0x00000000, 0x10446655, 0x10c000c0, 0x00000000, 0x01164650, 0x10001190, 0x00020000, 0x0d064650, 0x10000da0, 0x00110000, 0xddaaa001, 0x00000da0, 0x0a990000, 0xa9acc000, 0x00000d0a, 0xaa0a0000, 0x00c00000, 0x00c00aa0, 0x00000000, 0x00000000, 0x000da000, 0x00000000, 0x00100000, 0x00caca10, 0x00000000, 0x00011000, 0x00dacaaa, 0xb0000000, 0x00010000, 0x0ca0ccc1, 0x00000000, 0x00002000, 0xcda00010, 0x1c000000, 0x0000000c, 0xca000000, 0x10000000, 0x00010000, 0xca010000, 0x0c000000, 0x00100000, 0xca001000, 0x00000000);\nconst int tile2_4[60] = int[60](0x01000001, 0xcb000000, 0x00000000, 0x00104010, 0xcad00001, 0x00000000, 0x06634601, 0xaad00111, 0x02000000, 0x06334641, 0xca000000, 0x10000000, 0x13668845, 0xca000001, 0x00000000, 0x06667751, 0x0bc0c000, 0x00000000, 0x10446655, 0x10c00c00, 0x00000000, 0x01164650, 0x10001900, 0x00020000, 0x0d064650, 0x10000da0, 0x00110000, 0xddaaa001, 0x00000da0, 0x0a9c0000, 0xa9acc000, 0x00000d0a, 0xaa990000, 0x00c00000, 0x00c00aa0, 0x00000000, 0x00000000, 0x000da000, 0x00000000, 0x00100000, 0x00caca10, 0x00000000, 0x00011000, 0x00dacaaa, 0xb0000000, 0x00010000, 0x0ca0ccc1, 0x00000000, 0x00002000, 0xcda00010, 0x1c000000, 0x0000000c, 0xca000000, 0x10000000, 0x00010000, 0xca010000, 0x0c000000, 0x00100000, 0xca001000, 0x00000000);\nconst int tile2_5[60] = int[60](0x01000001, 0xcb000000, 0x00000000, 0x00104010, 0xcad00001, 0x00000000, 0x00034601, 0xaad00111, 0x02000000, 0x06334641, 0xca000000, 0x10000000, 0x35668845, 0xca000001, 0x00000000, 0x66667851, 0x0bc0c000, 0x00000000, 0x10446655, 0x10c00c00, 0x00000000, 0x01164650, 0x10001900, 0x00020000, 0x0d064650, 0x10000da0, 0x00110000, 0xddaaa001, 0x00000da0, 0x0a990000, 0xa9acc000, 0x00000d0a, 0xaa0a0000, 0x00c00000, 0x00c00aa0, 0x00000000, 0x00000000, 0x000da000, 0x00000000, 0x00100000, 0x00caca10, 0x00000000, 0x00011000, 0x00dacaaa, 0xb0000000, 0x00010000, 0x0ca0ccc1, 0x00000000, 0x00002000, 0xcda00010, 0x1c0c0000, 0x0000000c, 0xca000000, 0x00000000, 0x00010000, 0xca010000, 0x00000000, 0x00100000, 0xca001000, 0x00000000);\n\nconst int tile3_0[60] = int[60](0x00c00001, 0x11a11000, 0x00000000, 0x0000c00d, 0xacc10000, 0x10100000, 0x01011aac, 0xc1c00000, 0x00100000, 0x00001dc0, 0x00a00000, 0x10000000, 0x0000dc00, 0x0dac0000, 0x00000000, 0x001111c0, 0x1dacaa00, 0x00000000, 0x00000000, 0x01dccdaa, 0x00000000, 0x10001110, 0x10a10009, 0x00000000, 0x00000010, 0x1ac00000, 0x02000000, 0x9c000000, 0x0ac00000, 0x11c00000, 0xacaac000, 0x00cc00da, 0xacaa0000, 0x0c11dca0, 0x01c00dad, 0x00000000, 0xad000ccd, 0x01a0aa00, 0x00000000, 0x9d01000a, 0xc01ac000, 0x00000000, 0x0d10000c, 0xa1ccc001, 0x00000000, 0x00100000, 0x9accaad2, 0x10200000, 0x00110000, 0x9a101d90, 0x11100000, 0x0000000c, 0xcca00010, 0x10000000, 0x000000c0, 0xca900000, 0x00000000, 0x0000c000, 0xca000000, 0x00000000);\nconst int tile3_1[60] = int[60](0x00c00001, 0x11a11000, 0x00000000, 0x0000c99d, 0xacc10000, 0x10100000, 0x0101ddac, 0xc1c00000, 0x00100000, 0x00111cc0, 0x00a00000, 0x10000000, 0x000c0000, 0x0dac0000, 0x00000000, 0x00000010, 0x1dacaa00, 0x00000000, 0x00000000, 0x01dccdaa, 0x00000000, 0x10001110, 0x10a10009, 0x00000000, 0x00000010, 0x1ac00000, 0x02000000, 0x9c000000, 0x0ac00000, 0x11c00000, 0xacaac000, 0x00cc00da, 0xacaa0000, 0x0c11dca0, 0x01c00dad, 0x00000000, 0xad000ccd, 0x01a0aa00, 0x00000000, 0x9d01000a, 0xc01ac000, 0x00000000, 0x0d10000c, 0xa1ccc001, 0x00000000, 0x00100000, 0x9accaad2, 0x10200000, 0x00110000, 0x9a101d90, 0x11100000, 0x0000000c, 0xcca00010, 0x10000000, 0x000000c0, 0xca900000, 0x00000000, 0x0000c000, 0xca000000, 0x00000000);\nconst int tile3_2[60] = int[60](0x00c00001, 0x11a11000, 0x00000000, 0x0000c00d, 0xacc10000, 0x10100000, 0x01011aac, 0xc1c00000, 0x00100000, 0x00001dc0, 0x00a00000, 0x10000000, 0x0000dc00, 0x0dac0000, 0x00000000, 0x001111c0, 0x1dacaa00, 0x00000000, 0x00000000, 0x01dccdaa, 0x90000000, 0x10001110, 0x10a10000, 0x00000000, 0x00000010, 0x1ac00000, 0x02000000, 0x9c000000, 0x0ac00000, 0x11c00000, 0xacaac000, 0x00cc00da, 0xacaa0000, 0x0c11dca0, 0x01c00dad, 0x00000000, 0xad000ccd, 0x01a0aa00, 0x00000000, 0x9d01000a, 0xc01ac000, 0x00000000, 0x0d10000c, 0xa1ccc001, 0x00000000, 0x00100000, 0x9accaad2, 0x10200000, 0x00110000, 0x9a101d90, 0x11100000, 0x0000000c, 0xcca00010, 0x10000000, 0x000000c0, 0xca900000, 0x00000000, 0x0000c000, 0xca000000, 0x00000000);\nconst int tile3_3[60] = int[60](0x00c00001, 0x11a11000, 0x00000000, 0x0000c00d, 0xacc10000, 0x10100000, 0x01011aac, 0xc1c00000, 0x00100000, 0x00001dc0, 0x00a00000, 0x10000000, 0x0000dc00, 0x0dac0000, 0x00000000, 0x001111c0, 0x1dacaa00, 0x00000000, 0x00000000, 0x01dccdaa, 0x00000000, 0x10001110, 0x10a10009, 0x00000000, 0x00000010, 0x1ac00000, 0x02000000, 0x9c000000, 0x0ac00000, 0x11c00000, 0xacaac000, 0x00cc00da, 0xacaa0000, 0x0c11dca0, 0x01c00dad, 0x00000000, 0xad000ccd, 0x01a0aa00, 0x00000000, 0x9d01000a, 0xc01ac000, 0x00000000, 0x0d10000c, 0xa1ccc001, 0x00000000, 0x00100000, 0x9accaad2, 0x10200000, 0x00110000, 0x9a101dd0, 0x11100000, 0x0000000c, 0xcca00090, 0x10000000, 0x000000c0, 0xca900000, 0x00000000, 0x0000c000, 0xca000000, 0x00000000);\nconst int tile3_4[60] = int[60](0x00c00001, 0x11a11000, 0x00000000, 0x0000c00d, 0xacc10000, 0x10100000, 0x01011aac, 0xc1c00000, 0x00100000, 0x00001dc0, 0x00a00000, 0x10000000, 0x0000dc00, 0x0dac0000, 0x00000000, 0x001111c0, 0x1dacaa00, 0x00000000, 0x00000000, 0x01dccdaa, 0x00000000, 0x10001110, 0x10a10009, 0x00000000, 0x00000010, 0x1ac00000, 0x02000000, 0x9c000000, 0x0ac00000, 0xc1100000, 0xacaac000, 0x00cc00da, 0xacaa0000, 0x0c11dca0, 0x01c00dad, 0x00000000, 0xad000ccd, 0x01a0aa00, 0x00000000, 0x9d01000a, 0xc01ac000, 0x00000000, 0x0d10000c, 0xa1ccc001, 0x00000000, 0x00100000, 0x9accaad2, 0x10200000, 0x00110000, 0x9a101dd0, 0x11100000, 0x0000000c, 0xcca00090, 0x10000000, 0x000000c0, 0xca900000, 0x00000000, 0x0000c000, 0xca000000, 0x00000000);\nconst int tile3_5[60] = int[60](0x00c00001, 0x11a11000, 0x00000000, 0x0000c00d, 0xacc10000, 0x10100000, 0x01011aac, 0xc1c00000, 0x00100000, 0x00001dc0, 0x00a00000, 0x10000000, 0x0000dc00, 0x0dac0000, 0x00000000, 0x001111c0, 0x1dacaa00, 0x00000000, 0x00000000, 0x01dccdaa, 0x00000000, 0x10001110, 0x10a10009, 0x00000000, 0x00000010, 0x1ac00000, 0x02000000, 0x9c000000, 0x0ac00000, 0x11c00000, 0xacaac000, 0x00cc00da, 0xacaa0000, 0x0c11dca0, 0x01c00dad, 0x00000000, 0xad000ccd, 0x01a0aa00, 0x00000000, 0x9d01000a, 0xc01ac000, 0x00000000, 0x0d10000c, 0xa1ccc001, 0x00000000, 0x00100000, 0x9accaad2, 0x10200000, 0x00110000, 0x9a101dd0, 0x11100000, 0x0000000c, 0xcca00090, 0x10000000, 0x000000c0, 0xca900000, 0x00000000, 0x0000c000, 0xca000000, 0x00000000);\n\n\nstruct setup\n{\n float t;\n vec3 eye;\n vec3 dir;\n vec4 sfft;\n};\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\n\nvec3 getColor(vec4 L[14], int tab[60], int x, int y) {\n    int element = (tab[ y * 3 + (x >> 3) ] >> ((~x & 7) << 2 )  ) & 0xf;\n    vec4 color = L[element];\n    return color.xyz;\n\n}\n\nint getStitch(float t){\n    float time = t - floor(t/15.)*15.;\n    return int(floor(t/5.))%3; \n}\n\nvec4 getBackground(float tile_num, setup s)\n{\n    vec3 col;\n    float SRadius_1 =30.;\n    \n    //od Tomka\n    float proj = dot(-s.eye,s.dir);\n    vec3 srd = s.eye+s.dir*proj;\n    proj = length(srd);\n    proj = sqrt(SRadius_1*SRadius_1-proj*proj);\n    srd += s.dir*(proj-7.*tile_num);\n    vec3 np = normalize(srd);\n    vec2 sph = acos(np.xy)/3.14159;\n\n    // MIR\n    vec4 musicIntensity = s.sfft; // 0-1\n    \n    // GRID\n    vec2 uv = sph; \n    //uv *= 30. * sin(iTime*0.1 + 20.) - cos(iTime*0.05) + log(iTime*0.02); //*** EFFECT - CHANGING SCALE\n    uv *= 20.; // constant scale \n    uv += iTime*0.2; // *** EFFECT - MOVES WITH TIME\n    //uv += (musicIntensity.x*0.3) + iTime * 0.3; // *** EFFECT - MOVES WITH MUSIC\n    vec2 gv = fract(uv)-.5; // origin in the middle and -.5 to .5 in each direction\n    vec2 id = floor(uv);\n    \n    const int W = 20; // col width\n    vec2 hv = fract(gv*float(W))-.5;\n    vec2 hv_id = floor(vec2(-gv.x, gv.y)*20. + 10.);\n   \n    //col +=n; //*** show noise value\n    //if (gv.x>.48 || gv.y>.48) col = vec3(1, 0, 0); // ***show grid\n    //if (hv.x>.4 || hv.y>.4) col = vec3(0, 0, 1);   // ***show grid\n\n    \n    // NOISE\n    float n1 = Hash21(id); // random number between 0 and 1 for flipping x\n    float n2 = Hash21(Hash21(id)+id); // for flipping y\n    float n3 = Hash21(Hash21(1./id)+id/3.); // for choosing tile\n\n    //n1 = 1.;\n    //n2 = 1.;\n    if (n1<.5) gv.x *= -1.; // random flipping\n    if (n2<.5) gv.y *= -1.; // random flipping\n\n    \n    // STICH VERSIONS:\n    float stitch[3];\n    \n    // --- circle\n    if (hv.x*hv.x + hv.y*hv.y <.2) stitch[0] = 1.;\n    \n    // --- cross stitch\n    float d = 0.08; // width\n    if ((hv.x+0.)*(hv.x+0.) + (hv.y+0.5)*(hv.y+0.5) >d) stitch[1] = 1.;\n    if ((hv.x+0.)*(hv.x+0.) + (hv.y-0.5)*(hv.y-0.5) <d) stitch[1] -= 1.;\n    if ((hv.x+0.5)*(hv.x+0.5) + (hv.y+0.)*(hv.y+0.) <d) stitch[1] -= 1.;\n    if ((hv.x-0.5)*(hv.x-0.5) + (hv.y+0.)*(hv.y+0.) <d) stitch[1] -= 1.;\n    \n    // --- glow\n    stitch[2] = 1. - abs(hv.x * hv.y);\n    \n    //------ EFFECT - CHANGING STITCHES AND COLOR SCHEME ----\n    //bool changeCondition = (mod(floor(iTime)/2., 2.0) < 0.1);\n    //bool changeCondition = musicIntensity.x > 0.9;\n    bool changeCondition = false;\n \n    float m;\n    if (changeCondition) m = stitch[0];\n    else m = stitch[1];\n    \n    m = stitch[getStitch(iTime)];\n    \n    // COLOR SCHEME\n    vec4 L[14];\n    if (changeCondition) L = L2;\n    else L = L1;\n    // ------------------------------------------------------\n    \n    \n    // TILE 1\n    if (n3*musicIntensity.x < 0.4 && tile_num == 1.) {\n    //if (n3 < 0.4) {\n        //float md = mod(floor(iTime), 1.0*musicIntensity.x);\n        //if (md< 0.1) col+=L[tile2[index]].xyz * m;\n    \n        if (musicIntensity.x *n3*0.1 < .01) col += getColor(L, tile1_0, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.x *n3*0.1 < .03) col += getColor(L, tile1_1, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.x *n3*0.1 < .04) col += getColor(L, tile1_2, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.x *n3*0.1 < .06) col += getColor(L, tile1_3, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.x *n3*0.1 < .08) col += getColor(L, tile1_4, int(hv_id.x), int(hv_id.y)) *m;\n        else col += getColor(L, tile1_5, int(hv_id.x), int(hv_id.y)) *m;\n    }\n   \n        \n    // TILE 2\n\n    else if (n3*musicIntensity.x> 0.4 && n3*musicIntensity.x < 0.8 && tile_num == 2.) {\n    //else if (n3 < 0.8) {\n    \n        if (musicIntensity.y *n3*0.1 < .01) col += getColor(L, tile2_0, int(hv_id.x), int(hv_id.y)) *m ;\n        else if (musicIntensity.y *n3*0.1 < .03) col += getColor(L, tile2_1, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.y  *n3*0.1< .04) col += getColor(L, tile2_2, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.y *n3*0.1< .06) col += getColor(L, tile2_3, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.y *n3*0.1< .08) col += getColor(L, tile2_4, int(hv_id.x), int(hv_id.y)) *m;\n        else col += getColor(L, tile2_5, int(hv_id.x), int(hv_id.y)) *m;\n\n    }\n        \n    \n    // TILE 3\n    else if (n3*musicIntensity.x > 0.8 && tile_num == 3.) {\n    //else {\n\n        if (musicIntensity.z *n3*0.1< .01) col += getColor(L, tile3_0, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.z*n3*0.1 < .03) col += getColor(L, tile3_1, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.z*n3*0.1 < .04) col += getColor(L, tile3_2, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.z*n3*0.1 < .06) col += getColor(L, tile3_3, int(hv_id.x), int(hv_id.y)) *m;\n        else if (musicIntensity.z*n3*0.1 < .08) col += getColor(L, tile3_4, int(hv_id.x), int(hv_id.y)) *m;\n        else col += getColor(L, tile3_5, int(hv_id.x), int(hv_id.y)) *m;\n\n    }\n     \n   \n   //------ EFFECT - ADD LADYBUG ---------------------------\n   //int tile[60] = bug_0;\n   //if (mod(floor(iTime), 2.)<0.1) tile = bug_1;\n   //if ((mod(id.x, 4.)<0.1) && (mod(id.y, 3.)<0.1)) col = getColor(L3, tile, int(hv_id.x), int(hv_id.y)) *m; //*** add here a bug \n   // ------------------------------------------------------ \n   \n   // to check if stereo works\n   //if (col != vec3(0)) SRadius_1 = SRadius_1*hv_id.x*hv_id.y*0.2;\n   //if (col != vec3(0)) np.z*=100.;\n\n   //if (col != vec3(0)) col = vec3(1)\n   return vec4(col, 1);\n}\n\n\n\n\n#define STEREO true\n\n#define EYESPAN -0.2f\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\n{\n\n// -=-=-=-=-=-=-=-=-=-=- SETUP renderera\n\n#ifdef STEREO\nvec3 eye =vec3(0,0,0);\nvec3 dir = vec3(0,0,0);\n\nvec2 mouse = vec2(iMouse)/vec2(iResolution);\n\nfloat eyes_app = EYESPAN * mouse.x;\n\n\nif (fragCoord.x <0.5*iResolution.x)\n{\neye = vec3(eyes_app,0.0f,-5.0f);\ndir = vec3(eyes_app + ( 2.0*(2.0*fragCoord.x-0.5*iResolution.x)/iResolution.y   ) ,fragCoord.y/iResolution.y*2.0-1.0 ,0.0  )*0.75f;\n}\n\nelse\n{\n eye = vec3(-eyes_app,0.0f,-5.0f);\n dir = vec3(-eyes_app + ( 2.0*(2.0*(fragCoord.x-0.5*iResolution.x)-0.5*iResolution.x)/iResolution.y   ) ,fragCoord.y/iResolution.y*2.0-1.0 ,0.0  )*0.75f;\n}\n\n#else\nvec3 eye = vec3(0.0f,0.0f,-5.0f);\nvec3 dir = vec3(vec2(2.0*(fragCoord-0.5*iResolution.xy)/iResolution.yy),0.0f)*0.75f;\n\n#endif\ndir = normalize(dir -eye);\nsetup wsad = setup(iTime,eye,dir,\n                   vec4(texelFetch(iChannel0, ivec2(1, 0), 0).r,texelFetch(iChannel0, ivec2(5, 0), 0).r,texelFetch(iChannel0, ivec2(10, 0), 0).r,texelFetch(iChannel0, ivec2(15, 0), 0).r     )\n                  );\n\n// ---- SECOND LAYER ----------------------\nvec3 eye2 = vec3(0.0f, 0.0f, -3.0f);\nvec3 dir2 = vec3(vec2(2.0*(fragCoord-0.5*iResolution.xy)/iResolution.xx),0.0f)*1.;\ndir = normalize(dir -eye2);\nsetup wsad2 = setup(iTime,eye,dir, \n                    vec4(texelFetch(iChannel0, ivec2(1, 0), 0).r,texelFetch(iChannel0, ivec2(5, 0), 0).r,\n                    texelFetch(iChannel0, ivec2(10, 0), 0).r,texelFetch(iChannel0, ivec2(15, 0), 0).r));\n// ----------------------------------------\n// =-=-=-=-=-=-=-=-=-=-\n\n\n    // Output to screen\n    fragColor = getBackground(1., wsad);\n    fragColor += getBackground(2., wsad);\n    fragColor += getBackground(3., wsad);\n\n    //fragColor += getBackground(wsad2); // *** EFFECT - SECOND LAYER\n    \n    \n}","name":"Image","description":"","type":"image"}]}