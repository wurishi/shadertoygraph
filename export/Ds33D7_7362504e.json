{"ver":"0.1","info":{"id":"Ds33D7","date":"1677412549","viewed":159,"name":"Lava Palantir","username":"Mojomajor","description":"The present, past and future is on fire","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["space","planet"],"hasliked":0,"parentid":"ftfSD2","parentname":"Lightweight Planet Shader"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FLARES 1\n#define STARS 0\n\nconst float pi = 3.1415;\nconst float planetRotation = 0.0;\nconst float lightRotation = 0.0;\n\n#define time iTime\n#define resolution iResolution\n// https://simondev.teachable.com/courses/1783153/lectures/45247292\nfloat inverseLerp(float v, float minValue, float maxValue) {\n  return (v - minValue) / (maxValue - minValue);\n}\n\nfloat remap(float v, float inMin, float inMax, float outMin, float outMax) {\n  float t = inverseLerp(v, inMin, inMax);\n  return mix(outMin, outMax, t);\n}\n\nfloat saturate(float x) {\n  return clamp(x, 0.0, 1.0);\n}\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n//\n// https://www.shadertoy.com/view/Xsl3Dl\nvec3 hash3( vec3 p ) // replace this by something better\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n            dot(p,vec3(269.5,183.3,246.1)),\n            dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec3 p )\n{\n  vec3 i = floor( p );\n  vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n  return mix( mix( mix( dot( hash3( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                        dot( hash3( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                   mix( dot( hash3( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                        dot( hash3( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n              mix( mix( dot( hash3( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                        dot( hash3( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                   mix( dot( hash3( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                        dot( hash3( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\t\n\tvec3 f = fract(uv); f = f*f*(3.0-2.0*f);\n\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t\t      \t  uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z)*2.-1.;\n}\n\n\nvec3 GenerateGridStars(\n    vec2 pixelCoords, float starRadius, float cellWidth,\n    float seed, bool twinkle) {\n  vec2 cellCoords = (fract(pixelCoords / cellWidth) - .5) * cellWidth;\n  vec2 cellID = floor(pixelCoords / cellWidth) + seed / 100.0;\n  vec3 cellHashValue = hash3(vec3(cellID, 0.0));\n\n  float starBrightness = saturate(cellHashValue.z);\n  vec2 starPosition = vec2(0.0);\n  starPosition += cellHashValue.xy * (cellWidth * .5 - starRadius * 4.0);\n  float distToStar = length(cellCoords - starPosition);\n  // float glow = smoothstep(starRadius + 1.0, starRadius, distToStar);\n  float glow = exp(-2.0 * distToStar / starRadius);\n\n  if (twinkle) {\n    float noiseSample = noise(vec3(cellID, time * 1.5));\n    float twinkleSize = (\n        remap(noiseSample, -1.0, 1.0, 1.0, 0.1) * starRadius * 6.0);\n    vec2 absDist = abs(cellCoords - starPosition);\n    float twinkleValue = smoothstep(starRadius * 0.25, 0.0, absDist.y) *\n        smoothstep(twinkleSize, 0.0, absDist.x);\n    twinkleValue += smoothstep(starRadius * 0.25, 0.0, absDist.x) *\n        smoothstep(twinkleSize, 0.0, absDist.y);\n    glow += twinkleValue;\n  }\n\n  return vec3(glow * starBrightness);\n}\n\nvec3 GenerateStars(vec2 pixelCoords) {\n  vec3 stars = vec3(0.0);\n\n  float size = 4.0;\n  float cellWidth = 500.0;\n  for (float i = 0.0; i <= 2.0; i++) {\n    stars += GenerateGridStars(pixelCoords, size, cellWidth, i, true);\n    size *= 0.5;\n    cellWidth *= 0.35;\n  }\n\n  for (float i = 3.0; i < 5.0; i++) {\n    stars += GenerateGridStars(pixelCoords, size, cellWidth, i, false);\n    size *= 0.5;\n    cellWidth *= 0.35;\n  }\n\n  return stars;\n}\n\nvec2 rotateUV(vec2 uv, float rotation)\n{\n    float mid = 0.5;\n    return vec2(\n        cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n        cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n}\nfloat smooth_circle_using_length(vec2 position, float radius, float smoothness) {\n    vec2 d = position - vec2(0.5);\n    return 1.0 - smoothstep(radius-smoothness, radius, length(d));\n}\n\nfloat noise(vec2 st){\n    return fract(sin(dot(vec2(12.23,74.343),st))*43254.);  \n}\n\n#define pi acos(-1.)\nfloat noise2D(vec2 st){\n  \n  //id,fract\n  vec2 id =floor(st);\n  vec2 f = fract(st);\n  \n  //neighbors\n  float a = noise(id);\n  float b = noise(id + vec2(1.,0.));\n  float c = noise(id + vec2(0.,1.));\n  float d = noise(id + vec2(1.));\n  \n  //f\n  f = smoothstep(0.,1.,f);\n  \n  //mix\n  float ab = mix(a,b,f.x);\n  float cd = mix(c,d,f.x);\n  return mix(ab,cd,f.y);\n}\n\nmat2 rot45 = mat2(0.707,-0.707,0.707,0.707);\n\nmat2 rot(float a){\n  float s = sin(a); float c = cos(a);\n  return mat2(c,-s,s,c);\n}\n\nfloat fbm(vec2 st, float N, float rt){\n    st*=3.;\n \n  float s = .5;\n  float ret = 0.;\n  for(float i = 0.; i < N; i++){\n     \n      ret += noise2D(st)*s; st *= 2.9; s/=2.; st *= rot((pi*(i+1.)/N)+rt*8.);\n      st.x += iTime/10.;\n  }\n  return ret;\n  \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    \n    vec2 pixelCoords = (uv - 0.5) * iResolution.xy;\n\n    vec3 stars = vec3(0.0);\n    stars = GenerateStars(pixelCoords);\n    float smoothness = 0.005;\n    float radius = 0.37;\n    float circleSdf = smooth_circle_using_length(uv+vec2(0.5,0.5),radius, smoothness);\n    \n    //Slightly scaled UVs for planet\n    vec2 uv2 = uv*2.75;\n    \n    //Create spherical normals from UVs for planet\n    float planet = clamp(1.0-(dot(uv2,uv2)),0.0,1.0);\n    vec3 planetN = vec3(uv,sqrt(planet))*step(0.001,planet);\n    \n    //Planet UVs\n    vec2 planetUV;\n    planetUV.x = (atan(planetN.x,planetN.z)+0.5)/(pi*2.0)+(iTime*planetRotation)+0.;\n    planetUV.y = (asin(planetN.y)-0.5)/pi;\n    \n    float dd = 1.3;\n    //Atmosphere generation\n    float atmosphere = clamp(1.0-(dot(uv2/dd,uv2/dd)),0.0,1.5);\n    vec3 atmosphereN = vec3(uv2/dd,sqrt(atmosphere))*step(0.001,atmosphere);\n    \n    //Light Direction\n    vec3 l = normalize(vec3(sin(iTime*lightRotation),-.4,cos(iTime*lightRotation)));\n    float planetNL = clamp(dot(l,planetN),0.0,1.5);\n    float atmosphereNL = clamp(dot(l,atmosphereN),0.0,1.0);\n    \n    //Texture\n    vec4 tex = texture(iChannel0,(rotateUV(planetUV,360.+10.)))*step(0.01,planet);\n    \n    //fragColor = texture(iChannel0,(uv));\n    // Output to screen\n    //fragColor = vec4(stars,1.)+vec4(tex*5.*planetNL+((atmosphere*atmosphereNL)-planet));\n    fragColor = vec4(tex*5.*planetNL+((atmosphere*atmosphereNL)-planet));\n    //fragColor=mix(fragColor, vec4(stars,1.),1.-planet-0.6);\n    fragColor=mix(fragColor, vec4(stars,1.),1.-circleSdf+0.2);\n    \n    #if FLARES == 1\n    vec2 p = uv;\n    //p*=.25+sin(iTime)*0.25+1.2;\n    float fuzz = fbm(p,2.,5.);\n    float color = 3.0 - (3.*length(2.*p));\n\t\n\tvec3 coord = vec3(atan(p.x,p.y)/6.2832+.5, length(p*fuzz)*.4, .5);\n\t\n\tfor(int i = 1; i <= 7; i++)\n\t{\n\t\tfloat power = pow(4.0, float(i)+fuzz);\n\t\tcolor += (1.5 / power) * snoise(coord + vec3(0.,-iTime*.05, iTime*.01), power*16.);\n\t}\n\tvec4 flames = vec4( color, pow(max(color,0.),2.)*0.4, pow(max(color,0.),3.)*0.15 , 1.0);\n    //fragColor = vec4(tex*planetNL);\n    fragColor=mix(fragColor,flames,-circleSdf+.9);\n    #if STARS ==1 \n    fragColor=mix(fragColor,vec4(stars*1.,1.),1.-circleSdf-0.7);\n    #endif\n\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Noise animation - Lava\n// by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/lslXRS\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Somewhat inspired by the concepts behind \"flow noise\"\n//every octave of noise is modulated separately\n//with displacement using a rotated vector field\n\n//This is a more standard use of the flow noise\n//unlike my normalized vector field version (https://www.shadertoy.com/view/MdlXRS)\n//the noise octaves are actually displaced to create a directional flow\n\n//Sinus ridged fbm is used for better effect.\n\n#define time iTime*0.1\nconst float pi = 3.1415;\nconst float planetRotation = 0.0;\nconst float lightRotation = 0.;\nfloat hash21(in vec2 n){ return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\nmat2 makem2(in float theta){float c = cos(theta);float s = sin(theta);return mat2(c,-s,s,c);}\nfloat noise( in vec2 x ){return texture(iChannel0, x*.01).x;}\n\nvec2 gradn(vec2 p)\n{\n\tfloat ep = .09;\n\tfloat gradx = noise(vec2(p.x+ep,p.y))-noise(vec2(p.x-ep,p.y));\n\tfloat grady = noise(vec2(p.x,p.y+ep))-noise(vec2(p.x,p.y-ep));\n\treturn vec2(gradx,grady);\n}\n\nfloat flow(in vec2 p)\n{\n\tfloat z=2.;\n\tfloat rz = 0.;\n\tvec2 bp = p;\n\tfor (float i= 1.;i < 7.;i++ )\n\t{\n\t\t//primary flow speed\n\t\tp += time*.6;\n\t\t\n\t\t//secondary flow speed (speed of the perceived flow)\n\t\tbp += time*1.9;\n\t\t\n\t\t//displacement field (try changing time multiplier)\n\t\tvec2 gr = gradn(i*p*.34+time*1.);\n\t\t\n\t\t//rotation of the displacement field\n\t\tgr*=makem2(time*6.-(0.05*p.x+0.03*p.y)*40.);\n\t\t\n\t\t//displace the system\n\t\tp += gr*.5;\n\t\t\n\t\t//add noise octave\n\t\trz+= (sin(noise(p)*7.)*0.5+0.5)/z;\n\t\t\n\t\t//blend factor (blending displaced system with base system)\n\t\t//you could call this advection factor (.5 being low, .95 being high)\n\t\tp = mix(bp,p,.77);\n\t\t\n\t\t//intensity scaling\n\t\tz *= 1.4;\n\t\t//octave scaling\n\t\tp *= 2.;\n\t\tbp *= 1.9;\n\t}\n\treturn rz;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy-0.5;\n\tp.x *= iResolution.x/iResolution.y;\n\tp*= 3.;\n    //p.y-=1.;\n\t\n\t\n    \n   vec2 uv = (fragCoord.xy-.5*iResolution.xy)/iResolution.y;\n    \n    //Slightly scaled UVs for planet\n    vec2 uv2 = uv*5.;\n\n  \n    float rz = flow(uv2);\n    \n\tvec3 col = vec3(.2,0.07,0.01)/rz;\n\tcol=pow(col,vec3(1.4));\n\tfragColor = vec4(col,1.0);\n    //fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}