{"ver":"0.1","info":{"id":"ddVfzc","date":"1698497564","viewed":35,"name":"Simple Sobel Shader","username":"Togposh","description":"Simple Sobel edge detections shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sobel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float toGrayscale( in vec3 texColour ) {\n    return 0.299 * texColour.r + 0.587 * texColour.g + 0.114 * texColour.b;\n}\n\nvec3 samplef(const int x, const int y, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n\treturn texture(iChannel0, uv).xyz;\n}\n\nvec3 sobel(int stepx, int stepy, in vec2 fragCoord) {\n    // Convert current & adjacent fragments to grayscale      \n    mat3 pixelsGray = mat3(toGrayscale(samplef(-1, 1, fragCoord)), toGrayscale(samplef(0, 1, fragCoord)), toGrayscale(samplef(1, 1, fragCoord)),\n                       toGrayscale(samplef(-1, 0, fragCoord)), toGrayscale(samplef(0, 0, fragCoord)), toGrayscale(samplef(1, 0, fragCoord)),\n                       toGrayscale(samplef(-1, -1, fragCoord)), toGrayscale(samplef(0, -1, fragCoord)), toGrayscale(samplef(1, -1, fragCoord)));\n\n    // Horizontal Kernal\n    float x = float(pixelsGray[2][0]) * 1.0\n            + float(pixelsGray[2][1]) * 2.0\n            + float(pixelsGray[2][2]) * 1.0\n            + float(pixelsGray[0][0]) * -1.0\n            + float(pixelsGray[0][1]) * -2.0\n            + float(pixelsGray[0][2]) * -1.0;\n    \n    // Verticle Kernal\n    float y = float(pixelsGray[0][0]) * -1.0\n            + float(pixelsGray[1][0]) * -2.0\n            + float(pixelsGray[2][0]) * -1.0\n            + float(pixelsGray[0][2]) * 1.0\n            + float(pixelsGray[1][2]) * 2.0\n            + float(pixelsGray[2][2]) * 1.0;\n                        \n    float sobelResult = clamp(1.0 - step(x+y, 0.15), 0.0, 1.0);\n    \n    return vec3(sobelResult);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get pixel information from uv location\n    vec3 texColour = sobel(1, 1, fragCoord);\n    \n\n    // Output to screen\n    fragColor = vec4(texColour, 1.0);\n}","name":"Image","description":"","type":"image"}]}