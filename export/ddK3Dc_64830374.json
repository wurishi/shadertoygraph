{"ver":"0.1","info":{"id":"ddK3Dc","date":"1681149372","viewed":38,"name":"TP2 lif graphique","username":"Yasmine","description":"1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r, int index)\n{\n  return V(length(p-c)-r, index);\n \n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n\n\n//capsule\nV Capsule(vec3 a, vec3 b, float r, vec3 p, int index)\n{\n    if(dot(p-a,(b-a)/length(b-a))<0.0){\n      return V(length(p-a)-r, index);\n    }\n    else if(dot(p-b,(b-a)/length(b-a))>0.0){\n      return V(length(p-b)-r, index);\n    }else {\n    float aq=dot(p-a,(b-a)/length(b-a));\n    float l=sqrt(dot(p-a,p-a)-aq*aq);\n    return V(l-r, index);\n    }\n}\n\n//Cylindre\nV Cylindre(vec3 p, vec3 a , vec3 b , float r, int index){\n    V dc=Capsule (a,b,r,p, index);\n    V e= Intersection ( dc, Plane ( p,(a-b)/length(b-a),a+vec3(0.0,0.0,0.0), index));\n    V f= Intersection ( dc,Plane(p,(b-a)/length(b-a),b+vec3(0,0,0), index));\n    return Intersection(e,f);\n}\n\n//Torus\nfloat Torus(vec3 p , vec2 r){\n    float x =length(p.xz)-r.x;\n    return length(vec2(x,p.y))-r.y;\n}\n\n//Cube\nV Cube (vec3 p, vec3 o, float r, int index) {\n    return \n    Intersection (\n    Plane (p,vec3(1.0,0.0,0.0),o+vec3(r,0.0,0.0),index),\n    Intersection (\n    Plane (p,vec3(-1.0,0.0,0.0),o+vec3(-r,0.0,0.0),index),\n    Intersection (Plane (p,vec3(0.0,1.0,0.0),o+vec3(0.0,r,0.0), index),\n    Intersection (Plane (p,vec3(0.0,-1.0,0.0),o+vec3(0.0,-r,0.0), index),\n    Intersection (Plane (p,vec3(0.0,0.0,1.0),o+vec3(0.0,0.0,r), index),\n    Plane (p,vec3(0.0,0.0,-1.0),o+vec3(0.0,0.0,-r),index))))));\n}\n\n//demiplane\nV DemiP(vec3 p, vec3 o, float r, int index)\n{\n    return Intersection (\n    Plane (p,vec3(0.0,0.0,1.0),o+vec3(r,0.0,0.0),index),\n    Plane (p,vec3(0.0,-1.0,0.0),o+vec3(r,0.0,0.0),index));\n}\n\n//prisme base carre\nV Prisme (vec3 p, vec3 o, float r, float h, int index)\n{\n return   Intersection (Plane (p,vec3(0.0,h,dot(h,0.5)),o+vec3(r,0.0,0.0),index), \n          Intersection (Plane (p,vec3(0.0,-h,dot(h,0.5)),o+vec3(r,0.0,0.0), index),\n          Intersection (Plane (p,vec3(h,0.0,dot(h,0.5)),o+vec3(r,0.0,0.0),index),\n          Intersection(Plane(p,vec3(0,0,-h),o+vec3(0,0.0,-r), index), \n          (Plane (p,vec3(-h,0,dot(h,0.5)),o+vec3(r,0.0,0.0), index))\n         ))));\n}\n\n\n//prisme base carre\nV PrismeC (vec3 p, vec3 o, float r, float h, int index)\n{\n return   Intersection (Plane (p,vec3(0.0,h,dot(-h,0.5)),o+vec3(r,0.0,0.0), index), \n          Intersection (Plane (p,vec3(0.0,-h,dot(-h,0.5)),o+vec3(r,0.0,0.0), index),\n          Intersection (Plane (p,vec3(h,0.0,dot(-h,0.5)),o+vec3(r,0.0,0.0), index),\n          Intersection(Plane(p,vec3(0,0,h),o+vec3(0,0.0,r),index), \n          (Plane (p,vec3(-h,0,dot(-h,0.5)),o+vec3(r,0.0,0.0), index))\n         ))));\n }             \n              \n       \nV Clessidre(vec3 p, vec3 o, float r, float h, int index)\n{\n    return Union(Prisme (p, o, r, h, index),PrismeC(p, o-vec3(0,0,5), r, h, index));\n}\n\nV Gemme(vec3 p, vec3 o, float r, float h, int index)\n{\n    return Union(Prisme (p, o, r, h,index),PrismeC(p-vec3(0,0,dot(-r,2.0)), o, r, h, index));\n}\n\n           \n              \n              \n//prisme base triangulaire\nV PrismeT (vec3 p, vec3 o, float r, int index)\n{\n return   Intersection (Plane (p,vec3(0.866,1,0.5),o+vec3(r,0.0,0.0), index), \n          Intersection (Plane (p,vec3(0.866,-1,0.5),o+vec3(r,0.0,0.0), index),\n          Intersection (Plane (p,vec3(-0.866,0,0.5),o+vec3(r,0.0,0.0), index),\n          (Plane (p,vec3(0,0,-0.6),o+vec3(r,0.0,-10), index)\n         ))));\n              \n              }\n              \n              \n\n                  \n             \n// Boule\n// p : point\n// c : center of skeleton\n// r : radius\nV BouleF(vec3 p, vec3 c,float r, vec3 d, int index)\n{\n  return Intersection (Plane(p,d,c, index),V(length(p-c)-r, index));\n  //return Plane(p,vec3(0,-1,0),vec3(0,0.0,-15.0));\n \n}      \n\n\n//0 damier     v\n//1 arbre1     v\n//2 arbre2     v\n//3 eau        v\n//4 sable      v\n//5 nuages     v\n//6 couleurs   v\n//\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n \n  V v=Sphere(p,vec3(-2,2,20.),8.,5);\n  v = Union(v, Sphere(p,vec3(2,2,20.),8.,5));\n   v = Union(v, Sphere(p,vec3(6,2,20.),6.,5));\n // v=Union(v,Cube(p,vec3(0.,-15.,6.),6.,2));\n  //v=Union(v,PrismeC(p, vec3(-16,17,-2),14.,0.5,2));\n  v=Union(v,Plane(p,(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-10.0),4));\n  v=Union(v,DemiP(p,vec3(0.,0.,-10.),2.,3));\n  v=Union(v,Cube(p,vec3(10.,-15.,-13.),5.,2));\n  v=Union(v,Cube(p,vec3(-5.,-15.,-13.),5.,2));\n  v=Union(v,Cube(p,vec3(-20.,-15.,-13.),5.,2));\n  v=Union(v,Cube(p,vec3(-5.,-15.,-11.),3.,0));\n  v = Union(v, Sphere(p,vec3(-1,-15,-7.5),0.5,6));\n  v = Union(v, Sphere(p,vec3(-2,-13,-7.5),0.5,6));\n  //v=Union(v,Capsule(vec3(-100,-40,15),vec3(100,-40,-5),1.,p,3));\n  // v=Union(v,Capsule(vec3(0,3,16),vec3(0,0,15),1.,p,1));\n   //v=Union(v,Cube(p,vec3(0.,0.,0.),5.,0));\n   v=Union(v,Capsule(vec3(10,-10,10),vec3(10,0,-20),0.5,p,1));\n    v = Union(v, Sphere(p,vec3(20,-2,-8.),2.,6));\n  \n  /*\n  //v=Union(v,PrismeC(p, vec3(-16,1,-5),15.,0.5,2));\n   v=Union(v,Sphere(p,vec3(-2,5,-1.5),0.6,2));\n  v=Union(v,Sphere(p,vec3(-5.3,1,-1.5),0.6,3));\n   v=Union(v,Prisme(p,vec3(-5,3,-2),1.3,0.5,1));\n  \n  v=Union(v,Capsule(vec3(0,0,0),vec3(0,0,-3),5.,p,4));\n  v=Union(v,Cylindre(p,vec3(0,0,0),vec3(10,10,10), 4.,1));\n  v=Union(v,Cylindre(p,vec3(0,0,0),vec3(-10,-10,10), 4.,1));\n  \n  v=Union(v,BouleF(p,vec3(-13,10,-3),5.,vec3(1,-1,3),2)); \n  \n  v=Union(v,Cylindre(p,vec3(0,0,-10),vec3(0,0,1),2.,2));\n  \n  v=Union(v,Capsule(vec3(0,0,-20),vec3(0,0,-13),5.,p,1));\n  \n  v=Union(v,Sphere(p,vec3(-3,-3,-11),3.,2));  //epaule gauche\n  v=Union(v,Sphere(p,vec3(3,3,-11),3.,2));    //epaule droite\n  \n  v=Union(v,Capsule(vec3(-12,-0.5,-14),vec3(-15,8,-5),2.,p,3)); \n  v=Union(v,Capsule(vec3(2,13.5,-14),vec3(-11,12,-5),2.,p,3));\n  \n  v=Union(v,Capsule(vec3(-3,-3,-11),vec3(-12,-0.5,-14),2.,p,3)); \n  v=Union(v,Capsule(vec3(3,3,-11),vec3(2,13.5,-14),2.,p,3));\n  \n  v=Union(v,Sphere(p,vec3(-1,-1,-20),5.,1));\n  v=Union(v,Sphere(p,vec3(1,1,-20),5.,2));\n  \n  v=Union(v,Capsule(vec3(2,3,-22),vec3(-4,10,-22),3.3,p,1));\n  v=Union(v,Capsule(vec3(-2,-3,-22),vec3(-8,6.5,-22),3.3,p,2));\n  \n  v=Union(v,Sphere(p,vec3(-5,11,-23),3.5,1));\n  v=Union(v,Sphere(p,vec3(-9,7.5,-23),3.5,1));\n  \n  v=Union(v,Capsule(vec3(-5,11,-23),vec3(-8,14,-30),3.,p,2));\n  v=Union(v,Capsule(vec3(-9,7.5,-23),vec3(-11,10,-30),3.,p,2));\n  \n  v=Union(v,Capsule(vec3(-8,14,-30),vec3(-11,17,-28),2.8,p,1));\n  v=Union(v,Capsule(vec3(-11,10,-30),vec3(-14,13,-28),2.8,p,2));\n  \n  v=Union(v,Cylindre(p,vec3(0,0,0),vec3(0,0,1), 10.,3));\n  */\n  return v;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// cercleConcentrique\n// float : ecart\n// float d : direction\nfloat cercle(float e, float d)\n{\n    return (1.+sin((2.*3.14*d)/e))*(1./2.);\n}\n\n\n//boisLisse \n// vec3 p : objet\n// float e : ecart \n// float dir : vecteur pour faire la direction des bandes\nvec3 eau(vec3 p)\n{\n    float s = Noise(p); \n    if (s > 0.5)\n    {  \n        return vec3 ((99./255.)+s,(239./255.)+s,(232./255.)+s);\n    }\n    \n    else {return vec3 (114./255.+s,205./255.+s, 224./255.+s);} \n}\n\n\n//checker\nint Checker(float x, float y, float z)\n{\n    return abs((int(x) + int(y) + int(z))%2);\n}\n\n// damier\n// vec3 p : objet\nvec3 damier(vec3 p)\n{\n    bool dec = Checker(p.x, p.y, p.z) > 0;\n    if (p.x<0.){dec = !dec;}\n    if (p.y<0.){dec = !dec;}\n    if (p.z<0.){dec = !dec;}\n    if(dec){return vec3(0.,0.,0.);}\n    else{return vec3(1.,1.,1.);}  \n}\n\nvec3 arbre1(vec3 p)\n{\n    \n    if(Noise(p)>0.5){return vec3 (160./255.,105./255.,101./255.);}\n    else{return vec3 (105./255.,50./255.,45./255.);}\n}\n\n//if(Noise(p)>0.5){return vec3 (37./255., 173./255., 40./255.);}\n    //else{return vec3 (86./255., 228./255., 115./255.);}\n\nvec3 sable(vec3 p)\n{\n    \n    if(NoiseSable(p)>0.5){return vec3 (200./255., 162./255., 111./255.);} \n    else{return vec3 (1., 237./255., 174./255.);}\n}\n\nvec3 nuages(vec3 p)\n{\n    float t = Nuage(p)*1.5+0.3;\n    \n    return vec3(t+0.60);\n}\n\n\nvec3 couleurs(vec3 p)\n{\n    float t = Nuage(p)*1.5+0.3;\n    vec3 s = vec3(sin(p)); \n    /*t = t + NoiseNuages(p*16.)*0.25;\n    t = t + NoiseNuages(p*32.)*0.125;\n    t = NoiseNuages(p*64.)*0.0625;*/\n   // t = t/2.;\n    return vec3(t+s);\n}\n\n\nvec3 arbre2(vec3 p)\n{\n    if(NoiseArbre(p)>0.5){return vec3 (140./255.,100./255.,85./255.);} \n    else{return vec3 (105./255.,70./255.,45./255.);}\n} \n\n//if(NoisePierre(p)>0.5){return vec3 (149./255., 140./255., 119./255.);} \n//    else{return vec3 (180./255., 174./255., 180./255.);}\n\n/*\nvec3 c= vec3(180./255.,174./255.,180./255.);\n    float g = 20.;\n    vec3 t;\n    float s;\n    \n    for(int i=0; i<4; i++)\n    {\n        t = vec3(g+ float(i), 0.0, 0.0);\n        s=s+ NoisePierre(t);\n    }\n    \n    s= s/4.0;\n    s= pow(s, 2.2);\n    return vec3(s);*/\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n\nT Texture3(in vec3 p)\n{\n  return T(vec3(0.82,0.91,0.80),0.0);\n}\n\nT Texture5 (in vec3 p)\n{\n    return T(eau(p), 0.4);\n}\n\nT Texture6 (in vec3 p)\n{\n    return T(damier(p), 0.23);\n}\n\nT Texture7 (in vec3 p)\n{\n    return T (arbre1(p), 1.);\n}\n\nT Texture8 (in vec3 p)\n{\n    return T (sable(p), 0.0);\n}\n\nT Texture9 (in vec3 p)\n{\n    return T(nuages(p), 0.0);\n}\n\nT Texture2(in vec3 p)\n{\n  return T(arbre2(p),0.0);   \n}\n\nT Texture10 (in vec3 p)\n{\n    return T(couleurs(p), 0.9);\n}\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Texture6(p);\n    }\n    else if (vp.i==1)\n    {\n        return Texture7(p);\n    }\n    else if (vp.i==2)\n    {\n        return Texture2(p);\n    }\n    else if (vp.i==3)\n    {\n        return Texture5(p);\n    }\n    else if (vp.i==4)\n    {\n        return Texture8(p);\n    }\n    else if (vp.i==5)\n    {\n        return Texture9(p);\n    }\n    else if (vp.i==6)\n    {\n        return Texture10(p);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\n\n\n\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nvec4 Hash4(in vec4 p)  //Hash pour vec4 directement\n{\n    return fract (sin(vec4(1.0,7.0,13.0,31.0)*dot(p, vec4(113.989, 441.423,993.222,312.657))))*vec4(43758.5453);\n}\n\n/*\n\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 1.;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n*/\n\n/*\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 80.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n*/\n\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\n\nfloat NoiseSable(in vec3 p)\n{               \n    return fract(sin(p.x*100.+p.y*1000.+p.z*100.)*6000.);\n}\n\nfloat NoiseNuages(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = (0.,1.,fract(p));\n  \n    f = f*f*(3.0-2.0*f);\n    \n    float hg = NoiseSable(i);\n    float hd = NoiseSable(i + vec3(1,0,0));\n    float hz = NoiseSable(i + vec3(0,0,1));\n    float h = mix(mix(hg, mix(hd,hz, f.x),f.x),mix(hd, mix(hd,hz, f.x), f.x),f.x);\n    \n    float vg = NoiseSable(i+vec3(0,1,0));\n    float vd = NoiseSable(i + vec3(1,1,0));\n    float vz = NoiseSable(i + vec3(0,1,1));\n    float v = mix(mix(vg, mix(vd,vz, f.x),f.x),mix(vd, mix(vd,vz, f.x), f.x),f.x);\n    \n    return mix(mix(h, v, f.y),mix(v, h, f.y),f.y);\n}\n\n\n\nfloat Nuage(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n    f = f * f * (3.0 - 2.0 * f);\n    \n    float n = i.x + i.y * 157.0 + 113.0 * i.z;\n    return mix(mix(mix(Hash (vec3 (n + 0.0)), \n    Hash (vec3(n + 1.0)), f.x),\n                   mix(Hash(vec3 (n + 157.0)), Hash(vec3 (n + 158.0)), f.x), f.y),\n               mix(mix(Hash(vec3(n + 113.0)), Hash(vec3 (n + 114.0)), f.x),\n                   mix(Hash(vec3(n + 270.0)), Hash(vec3(n + 271.0)), f.x), f.y), f.z);\n}\n\n\nfloat NoiseArbre( in vec3 x ) \n{\n    vec3 p = floor(x); \n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    vec4 v = vec4(p.x,p.x+1.0,p.x,p.x+1.0); \n    vec4 y = vec4(p.y,p.y,p.y+1.0,p.y+1.0); \n    vec4 z = vec4(p.z,p.z,p.z,p.z+1.0); \n    vec4 h = Hash4(v*0.987+y*3.456+z*7.891); \n    vec4 n = h*vec4(0,1,0,1) + dot(vec4(f.x,f.x-1.,f.x,f.x-1.),vec4(f.y,f.y,f.y-1.,f.y-1.))*vec4(h.z,h.w,h.z,h.w);\n    return dot(vec4(0.25),n); \n}\n\n\n\n\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro=vec3(60.0,0.0,10.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}