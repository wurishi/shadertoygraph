{"ver":"0.1","info":{"id":"DstBWB","date":"1697598791","viewed":91,"name":"rotate new pallete color","username":"nayk","description":"colorful, rotate, new","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colorful","rotate","new"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t) {\n    vec3 a = vec3(1.5, 0.5, 0.5);\n    vec3 b = vec3(1.5, 0.5, 1.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(1.263, 0.416, 0.557);\n\n    return a * b*cos(6.28318 * (c*t+d));\n}\n#define PI 3.14159265359\n\nfloat random(float x)\n{\n    return fract(439029.0*sin(x));\n}\n\nfloat random(vec2 uv)\n{\n    return fract(439029.0*sin(dot(uv, vec2(85.3876, 9.38532))));\n}\n\n\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\nfloat sd_box( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n     float angle = atan(-uv.y, -uv.x) + PI;\n    float radius = length(uv);\n    \n  \n    float rayNum = 50.0; // Number of radial rays from center\n    float rayPadding = 1.0; // In terms of ray size (so 0.5 is half and 1.0 is equal to the size of a ray)\n    float pulseSize = 0.05;\n    float pulseSpeed = 0.7;\n    float pulseWarp = 0.3;\n    \n   const float w = 0.002;\n    float col = 0.;\n    for (float i = .1; i < 10.; i += .1) {\n        float s = sin(iTime + i * cos(iTime * .1)) * .15 + .15 + i * .001;\n        uv = rotate(uv, iTime * (.005 + sin(iTime * 0.2) * 0.002) + i * .001);\n        col = max(col, min(smoothstep(-w, w, sd_box(uv, vec2(s))), smoothstep(w, -w, sd_box(uv, vec2(s)))));\n    }\n    float sectionSize = 2.0*PI/rayNum;\n    float sectionNum = floor(angle/sectionSize); // Labels each section with a number\n    float raySize = 2.0*PI/(rayNum*(1.0 + rayPadding));\n    float rayUv = mod(angle, sectionSize);\n    \n    float rays = min( pow((raySize/2.0)/abs(rayUv - sectionSize/2.0), 3.0), 1.0 );\n    \n    pulseSpeed += 2.0*random(sectionNum);\n    float pulseIndex = floor((pow(radius, pulseWarp) - 0.11*pulseSpeed*+iTime)/pulseSize)*pulseSize;\n    float pulses = step(0.085, random(pulseIndex + 0.374*sectionNum));\n    \n    rays *= pulses;\n    uv*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n    for(float i = 0.0; i < 6.0; i++){ \n        uv = fract(uv * (2.1 - cos(iTime))) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0))+rays;\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime * .4);\n \n        d = sin(d * 8. + iTime)/8.;\n        d = abs(d);\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}