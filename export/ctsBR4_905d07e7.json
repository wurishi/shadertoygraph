{"ver":"0.1","info":{"id":"ctsBR4","date":"1692680041","viewed":28,"name":"asimov trantor palete real","username":"davidmachadosf","description":"teste","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["scifi"],"hasliked":0,"parentid":"cdscDn","parentname":"Asimov's Trantor"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float vRotation  =   .2;\nconst float vZoom      =   .1;\nconst float scaleZoom  = 2. ;\nconst float complexity = 15. ;\n\n\nconst vec3 a = vec3(  .698,   .658,   .218); // bgcolor\nconst vec3 b = vec3(  .051,   .453,   .050); \n\nconst vec3 c = vec3(-0.552,  5.361, -0.764);\nconst vec3 d = vec3(-0.503, -0.503,  8.113);\n\n\nvec3 paletteReal( float w ) {\n    \n    float red, green, blue;\n\n    if (w >= 380. && w < 440.) {\n        red   = -(w - 440.) / (440. - 380.);\n        green = 0.;\n        blue  = 1.;\n    }\n    else \n    if (w >= 440. && w < 490.) {\n        red   = 0.;\n        green = (w - 440.) / (490. - 440.);\n        blue  = 1.;\n    }\n    else \n    if (w >= 490. && w < 510.) {\n        red   = 0.;\n        green = 1.;\n        blue  = -(w - 510.) / (510. - 490.);\n    }\n    else \n    if (w >= 510. && w < 580.) {\n        red   = (w - 510.) / (580. - 510.);\n        green = 1.;\n        blue  = 0.;\n    }\n    else \n    if (w >= 580. && w < 645.) {\n        red   = 1.;\n        green = -(w - 645.) / (645. - 580.);\n        blue  = 0.;\n    }\n    else \n    if (w >= 645. && w < 781.) {\n        red   = 1.;\n        green = 0.;\n        blue  = 0.;\n    }\n    else {\n        red   = 0.;\n        green = 0.;\n        blue  = 0.;\n    }\n\n\n    // Let the intensity fall off near the vision limits\n    float factor;\n    if (w >= 380. && w < 420.)\n        factor = .3 + .7*(w - 380.) / (420. - 380.);\n    else \n    if (w >= 420. && w < 701.)\n        factor = 1.;\n    else \n    if (w >= 701. && w < 781.)\n        factor = .3 + .7*(780. - w) / (780. - 700.);\n    else\n        factor = 0.;\n\n    float gamma = .8;\n    float R = (red   > 0. ? 255.*pow(red   * factor, gamma) : 0.);\n    float G = (green > 0. ? 255.*pow(green * factor, gamma) : 0.);\n    float B = (blue  > 0. ? 255.*pow(blue  * factor, gamma) : 0.); \n    \n    return vec3(R/255.,G/255.,B/255.);\n    //return vec3(r,0.,b);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    \n    float zoom = 1.0 + scaleZoom*sin(vZoom*iTime);\n    uv /= zoom;\n    \n    float cameraRotation = vRotation*iTime;\n    float cs = cos(cameraRotation);\n    float sn = sin(cameraRotation);\n    uv *= mat2(cs, -sn, sn, cs);\n    \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    for (float i=0.; i<complexity; i++) {\n        \n        float angle = 7.0 * 3.14159 * (i / 7.);\n        float s = sin(angle);\n        float c = cos(angle);\n        \n        mat2 m = mat2(c, -s * 1.5, .5*s, c);\n        uv *= m;\n        uv = fract(1.5*uv) - .5;\n        \n        float d = length(uv) * exp(-length(uv0));\n        \n        //d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n        d = pow(0.01 / d, 2.2);\n        \n        \n        \n        vec3 col = paletteReal(380.+401.*pow(d,iTime/100.));\n        \n        finalColor += col*d;\n    }  \n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}