{"ver":"0.1","info":{"id":"XcGXD3","date":"1715822608","viewed":86,"name":"gpt_error_diffusion","username":"DRMBT","description":"chatGPT wrote me a fake Floydâ€“Steinberg_dithering error diffusion thing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dithering","errordiffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy compatible GLSL code\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Fetch the current pixel color\n    vec3 color = texture(iChannel0, uv).rgb;\n\n    // Convert to grayscale\n    float gray = dot(color, vec3(0.299, 0.587, 0.114));\n\n    // Quantize the grayscale value to 0 or 1 (black or white)\n    float quantized = gray > 0.5 ? 1.0 : 0.0;\n\n    // Compute the error\n    float error = gray - quantized;\n\n    // Calculate texture size step\n    vec2 texelSize = 1.0 / iResolution.xy;\n\n    // Define coordinates of neighboring pixels\n    vec2 right = uv + vec2(texelSize.x, 0.0);\n    vec2 bottom = uv + vec2(0.0, texelSize.y);\n    vec2 bottomRight = uv + vec2(texelSize.x, texelSize.y);\n    vec2 bottomLeft = uv + vec2(-texelSize.x, texelSize.y);\n\n    // Apply error diffusion to the neighboring pixels\n    if (right.x < 1.0) {\n        vec3 rightColor = texture(iChannel0, right).rgb;\n        rightColor += error * 7.0 / 16.0;\n    }\n\n    if (bottom.y < 1.0) {\n        if (bottomLeft.x >= 0.0) {\n            vec3 bottomLeftColor = texture(iChannel0, bottomLeft).rgb;\n            bottomLeftColor += error * 3.0 / 16.0;\n        }\n\n        vec3 bottomColor = texture(iChannel0, bottom).rgb;\n        bottomColor += error * 5.0 / 16.0;\n\n        if (bottomRight.x < 1.0) {\n            vec3 bottomRightColor = texture(iChannel0, bottomRight).rgb;\n            bottomRightColor += error * 1.0 / 16.0;\n        }\n    }\n\n    // Set the output color\n    fragColor = vec4(vec3(quantized), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}