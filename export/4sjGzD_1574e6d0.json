{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float PI=3.14159265;\n\n\nvec4 obj_union(in vec4 obj0, in vec4 obj1)\n{\n  if (obj0.w < obj1.w)\n  \treturn obj0;\n  else\n  \treturn obj1;\n}\n\nvec4 obj_sub(vec4 a, vec4 b)\n{\n\tif(-a.w > b.w)\n\t\treturn a;\n\telse\n\t\treturn b;\n}\n\n\nvec4 obj_inter(vec4 a, vec4 b)\n{\n\tif(a.w > b.w)\n\t\treturn a;\n\telse\n\t\treturn b;\n}\n\nfloat sphere(in vec3 p, float r)\n{\n  return length(p)-r;\n}\n\nfloat round_box(vec3 p, vec3 dims, float r)\n{\n  return length(max(abs(p)-dims,0.0))-r;\n}\n\n\nvec3 repeat( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\n\n#define numBins  15.0\n#define sampleSize  0.1\n#define binSize  1.0/numBins\n\t\nfloat sampleMusic(vec3 p)\n{\n\t\n\tfloat r = 0.0;\n\t//Figure out bin number\n\tvec3 repNumber = mod(abs(p/5.0+0.5), numBins);\n\tfloat binNumber = float(int(max(max(repNumber.x, repNumber.y), repNumber.z)));\n\n\tfloat binStart = binSize*binNumber;\n\t\n\tfor(float s = 0.0; s < binSize; s += binSize * sampleSize) {\n\t\t// Shader toy shows loudness at a given frequency at (f, 0) with the same value in all channels\n\t\tr += texture(iChannel0, vec2(binStart + s, 0.0)).r;\n\t}\n\t\n\treturn r*sampleSize;//normalized average\n}\n\nfloat sampleWave(vec3 p)\n{\n\t\n\tfloat r = 0.0;\n\t//Figure out bin number\n\tvec3 repNumber = mod(abs(p/5.0+0.5), numBins);\n\tfloat binNumber = float(int(max(max(repNumber.x, repNumber.y), repNumber.z)));\n\n\tfloat binStart = binSize*binNumber;\n\t\n\t\n\treturn texture(iChannel0, vec2(binStart + binSize/2.0, 1.0)).r;\n}\n\nvec4 map(in vec3 p)\n{\n\tfloat r = 1.0*sampleMusic(p);\n\tvec3 dp = 2.0*vec3(sin(iTime),0.0,cos(iTime))\n\t\t*(sampleWave(p)-0.5);\n\t\n  \t//return obj_union(\n\t//\tvec4(2.0*r, 0.0, 1.0-r, sphere(repeat(p-dp-2.0*vec3(1.0,1.0,1.0),vec3(5.0,5.0,5.0)),r)),\n\t//\tvec4(2.0*r, 0.0, 1.0-r, sphere(repeat(p+dp-2.0*vec3(1.0,1.0,1.0),vec3(5.0,5.0,5.0)),r)));\n\t\n  \treturn vec4(2.0*r, 0.0, 1.0-r, sphere(repeat(p-dp-2.0*vec3(1.0,1.0,1.0),vec3(5.0,5.0,5.0)),r));\n\t\t\n}\n\n// Primitive color\nvec3 prim_c(in vec3 p)\n{\n  return vec3(0.6,0.6,0.8);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 vPos = fragCoord.xy/iResolution.xy - 0.5;\n\n  // Camera up vector.\n  vec3 vuv=vec3(0,1,0); \n  \n  // Camera lookat.\n  vec3 vrp=vec3(0,0,0);\n\n  float mx=iMouse.x/iResolution.x*PI*2.0;\n  float my=iMouse.y/iResolution.y*PI/2.0;\n  vec3 prp=vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*6.0; \n\n  // Camera setup.\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 vcv=(prp+vpn);\n  vec3 scrCoord=vcv+vPos.x*u*iResolution.x/iResolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  // Raymarching.\n  const vec3 e=vec3(0.02,0,0);//\n  const float maxd=100.0; //Max depth\n  vec4 d=vec4(0.0,0.0, 0.0, 0.1);//(last step size,material id)\n  vec3 c,p,N;//Impact color, position, and Normal\n\n  float f=1.0;//Depth\n  for(int i=0;i<256;i++)\n  {\n    if ((abs(d.w) < .001) || (f > maxd)) \n      break;\n    \n    f+=d.w;\n    p=prp+scp*f;\n    d = map(p);\n  }\n  \n\t\n\t//Lighting computations\n  if (f < maxd)\n  {\n    c = d.xyz;\n    \n    vec3 n = vec3(d.w-map(p-e.xyy).w,\n                  d.w-map(p-e.yxy).w,\n                  d.w-map(p-e.yyx).w);\n    N = normalize(n);\n\t  \n\tvec3 L = vec3(sin(iTime)*20.0,10,cos(iTime)*20.0);\n    float b=dot(N,normalize(prp-p+L));\n    //simple phong lighting, LightPosition = CameraPosition\n    fragColor=vec4((b*c)*(1.0-f*.01),1.0);\n  }\n\t\n  else \n    fragColor=vec4(0,0,0,1); //background color\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sjGzD","date":"1384652548","viewed":374,"name":"Pulsar","username":"cboots","description":"Field of spheres that pulse to music.\nCenter sphere reacts to low frequencies, and every cubic layer around that sphere (mod number of bins) is the next frequency bin. Rows of spheres will also emulate the waveform.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","reactive","music"],"hasliked":0,"parentid":"","parentname":""}}