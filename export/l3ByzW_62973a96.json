{"ver":"0.1","info":{"id":"l3ByzW","date":"1727031513","viewed":24,"name":"CMYK Tonemapping Shader","username":"Nimphious","description":"Simulation of the CMYK tonemapped printing style as found in print media like magazines and newspapers.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cmyk","media","tonemapping","print","subtractive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale = 0.0591;\n\nvec4 RGBtoCMYK (vec3 rgb) {\n    vec3 cmy = vec3(1.0) - rgb;\n    float k = min(min(cmy.r, cmy.g), cmy.b);\n    return vec4(cmy, k);\n}\n\nvec3 CMYKtoRGB (vec4 cmyk) {\n    float c = cmyk.x;\n    float m = cmyk.y;\n    float y = cmyk.z;\n    float k = cmyk.w;\n\n    float invK = 1.0 - k;\n    float r = 1.0 - min(1.0, c * invK + k);\n    float g = 1.0 - min(1.0, m * invK + k);\n    float b = 1.0 - min(1.0, y * invK + k);\n    return clamp(vec3(r, g, b), 0.0, 1.0);\n}\n\nmat2 rotate(float a) {\n    float sa = sin(a);\n    float ca = cos(a);\n    return mat2(vec2(ca, sa), vec2(-sa, ca));\n}\n\nfloat maxOf(vec4 v) {\n    return max(max(v.x, v.y), max(v.z, v.w));\n}\n\nfloat tone_grid(vec2 uv, float rotation, float scale, vec4 mask) {\n    // Dot grid rotaiton matrix\n    mat2 rot = rotate(rotation);\n    vec2 cell_size = vec2(scale) * iResolution.xy;\n\n    vec2 uvr = rot * uv;\n    vec2 uvrs = uvr * scale;\n\n    // Cell XY coordinates (uniform accross each cell)\n    vec4 cell_xy = vec4(floor(uvrs), 0.0, 0.0);\n    cell_xy.zw = cell_xy.xy + vec2(1.0, 1.0);\n    // Dual grid coordinates.\n    vec4 cell_dual = cell_xy + 0.5;\n\n    // UVs for each corner's texture sample\n    vec2 cell_uv1 = floor(uvrs) / cell_size;\n    vec2 cell_uv4 = ceil(uvrs) / cell_size;\n    vec2 cell_uv2 = vec2(cell_uv4.x, cell_uv1.y);\n    vec2 cell_uv3 = vec2(cell_uv1.x, cell_uv4.y);\n\n    cell_uv1 = cell_uv1 * cell_size * rot / cell_size;\n    cell_uv2 = cell_uv2 * cell_size * rot / cell_size;\n    cell_uv3 = cell_uv3 * cell_size * rot / cell_size;\n    cell_uv4 = cell_uv4 * cell_size * rot / cell_size;\n\n    // Color samples for each dot\n    vec3 rgb1 = texture(iChannel0, cell_uv1).rgb;\n    vec3 rgb2 = texture(iChannel0, cell_uv2).rgb;\n    vec3 rgb3 = texture(iChannel0, cell_uv3).rgb;\n    vec3 rgb4 = texture(iChannel0, cell_uv4).rgb;\n\n    // CMYK for each sample\n    vec4 cmyk1 = RGBtoCMYK(rgb1);\n    vec4 cmyk2 = RGBtoCMYK(rgb2);\n    vec4 cmyk3 = RGBtoCMYK(rgb3);\n    vec4 cmyk4 = RGBtoCMYK(rgb4);\n\n    // Circle distance fields\n    vec2 circ1 = uvrs - cell_xy.xy;\n    vec2 circ2 = uvrs - cell_xy.zy;\n    vec2 circ3 = uvrs - cell_xy.xw;\n    vec2 circ4 = uvrs - cell_xy.zw;\n    float d1 = length(abs(circ1));\n    float d2 = length(abs(circ2));\n    float d3 = length(abs(circ3));\n    float d4 = length(abs(circ4));\n    float r = min(min(d1, d2), min(d3, d4));\n    \n    float v1 = maxOf(cmyk1 * mask);\n    float v2 = maxOf(cmyk2 * mask);\n    float v3 = maxOf(cmyk3 * mask);\n    float v4 = maxOf(cmyk4 * mask);\n\n    // Step point for each circle\n    float s1 = 0.75 * v1;\n    float s2 = 0.75 * v2;\n    float s3 = 0.75 * v3;\n    float s4 = 0.75 * v4;\n    \n    float ss = clamp(0.02 / scale, 0.0, 0.1);\n    \n    float dd = clamp(fwidth(d1), 0.0, scale);\n\n    float spot1 = smoothstep(s1 + dd, s1 - dd, d1);\n    float spot2 = smoothstep(s2 + dd, s2 - dd, d2);\n    float spot3 = smoothstep(s3 + dd, s3 - dd, d3);\n    float spot4 = smoothstep(s4 + dd, s4 - dd, d4);\n    \n    float spot = max(max(spot1, spot2), max(spot3, spot4));\n    \n    return spot;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 rotation = vec4(0.0);\n    rotation.x = 1.0000; // C\n    rotation.y = 1.6666; // M\n    rotation.z = 2.3333; // Y\n    rotation.w = 3.0000; // K\n\n    vec4 scale = vec4(scale);\n    scale.x *= 1.737391; // C\n    scale.y *= 4.112312; // M\n    scale.z *= 0.941264; // Y\n    scale.w *= 2.128122; // K\n\n    vec2 mask = vec2(1.0, 0.0);\n    float c = tone_grid(fragCoord, rotation.x, scale.x, mask.xyyy);\n    float m = tone_grid(fragCoord, rotation.y, scale.y, mask.yxyy);\n    float y = tone_grid(fragCoord, rotation.z, scale.z, mask.yyxy);\n    float k = tone_grid(fragCoord, rotation.w, scale.w, mask.yyyx);\n    vec3 color = CMYKtoRGB(vec4(c, m, y, k));\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}