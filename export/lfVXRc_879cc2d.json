{"ver":"0.1","info":{"id":"lfVXRc","date":"1715570555","viewed":311,"name":"Ridged IQ Noise","username":"jovianzm","description":"Based on Inigo Quilezâ€™s Warped fBm with ridges. I made it a CineShader at https://cineshader.com/view/lfVXRc","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["procedural","noise","cool","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat ridgednoise(vec3 d, int octaves)\n{\n    float outsum = 0.0;\n    float div = 0.5;\n    float divsum = 0.0;\n    \n    for(int i = 0; i != octaves; i++)\n    {\n        outsum += noise(d / div) * div;\n        divsum += div;\n        div *= 0.5;\n    };\n    \n    return 2.0 * (0.5 - abs(0.5 - (outsum / divsum)));\n}\n\nfloat iqnoise(vec3 d, int octaves, int steps)\n{\n    float _out = 0.0;\n    float sign_ = 1.0;\n    for(int i = 0; i != steps; i++)\n    {\n        _out = ridgednoise(d - float(i) / float(steps), octaves);\n        d += _out * sign_;\n        sign_ *= -1.0;\n    }\n#ifdef FRACT_RIDGES\n    return fract(_out * 3.14159265);\n#endif\n    return 2.0 * (0.5 - abs(0.5 - _out));\n}\n\nvec3 coloriqnoise(vec3 d, int octaves, int steps)\n{\n    return normalize(vec3(\n        iqnoise(d, octaves, steps),\n        iqnoise(d - vec3(0.0, 0.0, 0.05), octaves, steps),\n        iqnoise(d - vec3(0.0, 0.0, 0.1), octaves, steps)\n    ));\n}\n\n// #define color\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(iqnoise(vec3(uv, iTime / 10.0), 23, 3));\n    fragColor.a = iqnoise(vec3(uv, iTime / 10.0), 23, 3);\n}","name":"Image","description":"","type":"image"}]}