{"ver":"0.1","info":{"id":"4cySzz","date":"1714767332","viewed":46,"name":"Weird Eye","username":"thom7918","description":"Experimental shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"4cGSRz","parentname":"Weird things"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 ellipse(vec2 pos, float a, float b, vec2 p){\n    float d_ellipse = length(pos);\n    float theta = atan(pos.x, pos.y);\n    \n    float ellipseRadius = (a * b) / sqrt(pow(b*cos(theta),2.0) + pow(a*sin(theta), 2.0));\n    ellipseRadius *= 1.0 + 0.2 * cos(2.0*theta);\n    \n    vec3 col = vec3(0.0);\n   \n   \n    vec2 lv = fract(p*10.) - 0.5 ;\n   \n    vec2 id = floor(lv*10.);\n    //float d = abs(abs(lv.x+lv.y));\n    \n    \n    float d = length(lv-0.5*sign(lv.x+lv.y)) -0.5;\n   \n    \n   \n\n   \n   \n   if(d_ellipse < ellipseRadius){\n     float mask = smoothstep(.1, -.1, abs(d));\n     col += mask;\n    }\n    return col;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord/iResolution.xy;\n    vec4 mouse = iMouse/iResolution.xyxy;\n    mouse.xy = 2.0*mouse.xy - 1.0;\n    p = 2.0*p-1.0; \n\n    // Apply adjusted aspect ratio to uv coordinates.\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.0);\n    mouse.xy *= aspect;\n    p *= aspect;\n\n\n\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    float d = length(p);\n    \n    // radius of circle\n    float r = 0.4;\n    float a, b, ellipseRadius;\n    float delta = 0.12 + 0.00025*(30.0*sin(iTime));\n    vec2 ellipsePos = p -(mouse.xy*0.074);; // Smooth transition towards mouse position\n\n    a = 0.45;\n    b = 1.0; \n    col = ellipse(ellipsePos, a, b, p);\n    \n    vec2 pupilPos = p -(mouse.xy*0.19);; // Smooth transition towards mouse position\n    vec2 irisPos = p -(mouse.xy*0.05);; // Smooth transition towards mouse position\n    vec2 toMouse = pupilPos - mouse.xy;\n    vec2 irisToMouse = irisPos - mouse.xy;\n    \n    float theta = atan(irisToMouse.x, irisToMouse.y);\n    float m = 0.009 + 0.0007*(30.0*sin(iTime));\n    float spikes = m*(0.5 + 0.5*sin(10.0*theta)*2.0);\n  //  theta = atan(irisPos.x, irisPos.y);\n    //spikes = m*(0.5 + 0.5*sin(10.0*theta+(mouse.x+mouse.y)*2.0));\n    \n    vec2 mNorm = normalize(mouse.xy);\n    \n    \n    \n    d = length(irisPos);\n    \n    float d_pupil = length(pupilPos);\n   \n   \n    \n    r -= spikes; \n    float l = d - r;\n    if(l < 0.1){\n     float angle = atan(pupilPos.y, pupilPos.x);\n     // Define the number of segments and calculate the pattern\n     float numSegments = 100.0; // Number of segments in the iris pattern\n     float segment = mod(floor(angle / (2.0 * 3.14159) * float(numSegments)), 2.0);\n     \n     col = mix(vec3(0.0, 0.0, 0.7), vec3(1.0, 1.0, 1.0), step(0.2, segment));\n\n    float shading = smoothstep(0.1, 0.2, d_pupil); // Adjust range for the shading effect\n    col = mix(vec3(0.0, 0.0, 0.1), col, shading); // Darker near the center\n    \n      //col = vec3(0.0, 0.0, 1.0);\n      float outerBlur = smoothstep(r - 0.01, r, d);\n      //col *= length(p + irisPosition)*20.0;\n      }\n\n    // Color the pixel based on the distance\n    if (d_pupil < delta) {\n        //col = vec3(0.0, 0.0, 0.0);\n   }\n    float innerBlur = smoothstep(delta - 0.001, delta, d_pupil);\n    col *= innerBlur;\n\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}