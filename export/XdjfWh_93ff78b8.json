{"ver":"0.1","info":{"id":"XdjfWh","date":"1500288172","viewed":177,"name":"VR Lens Distortion","username":"theShaan","description":"Oculus Lens Distrotion Shader for testing purposes","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["oculuslensdistrotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vUV = fragCoord.xy / iResolution.xy;\n    bool isLeft = (vUV.x < 0.5);\n    float offset = isLeft ? 0.0 : 0.5;\n    \n\tvec2 uv = vec2 (-1.0 + 2.0*fragCoord.xy/iResolution.xy);\n\t // screen space transform(Side by Side)\n\tuv = vec2((mod(uv.x,1.0)-0.5)*2.0+0.2*sign(uv.x), uv.y);\n\t// HMD Parameters\n\tvec2 ScaleIn = vec2(1.0);\n\tvec2 LensCenter = vec2(0.0,0.0);\n\tvec4 HmdWarpParam = vec4(1.0,0.22, 0.240, 0.00);\n\tvec2 Scale = vec2(1.0);\n\tvec2 theta  = (uv - LensCenter) * ScaleIn; // Scales to [-1, 1]\n\tfloat  rSq    = theta.x * theta.x + theta.y * theta.y;\n\tvec2 rvector= theta * (HmdWarpParam.x + HmdWarpParam.y * rSq\n\t\t\t       + HmdWarpParam.z * rSq * rSq\n\t\t\t       + HmdWarpParam.w * rSq * rSq * rSq);\n\t\t\t\t   \n\tvec2 xy = LensCenter + Scale * rvector;\n\t\n\t\n\t \n\t \n    if (abs(xy.x) > 1.0 || abs(xy.y) > 1.0)\n    {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n    else\n        //fragColor = vec4(1.0,0.0,0.0,1.0);\n        fragColor = texture(iChannel0, vec2(xy.x * 0.5 + offset, xy.y));\n}","name":"Image","description":"","type":"image"}]}