{"ver":"0.1","info":{"id":"X323Rh","date":"1708197974","viewed":28,"name":"Growing Voronoi fields","username":"robotjatek","description":"Growing distance fields","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 colors[] = vec3[]\n    (\n        vec3(1,0,0),\n        vec3(0,1,0),\n        vec3(0,0,1),\n        vec3(0,1,1),\n        vec3(1,0,1)\n    );\n\n    vec2 points[] = vec2[]\n    (\n        vec2(rand(vec2(12, 54)), rand(vec2(121, 154))),\n        vec2(rand(vec2(66, 18)), rand(vec2(25, 247))),\n        vec2(rand(vec2(166, 218)), rand(vec2(785, 451))),\n        vec2(rand(vec2(121, 10)), rand(vec2(74, 145))),\n        vec2(rand(vec2(784, 111)), rand(vec2(415, 761)))\n    );\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 pointColor = colors[0];\n    float dist = distance(points[0], uv);\n    \n    for (int i = 1; i < points.length(); i++)\n    {\n        float currDist = distance(points[i], uv);\n        if (currDist < dist)\n        {\n            dist = currDist;\n            pointColor = colors[i];\n        }\n    }\n\n    // Animate for 10s then restart\n    if (mod(iTime, 10.0f) / 10.0f > dist) {\n        vec3 col = pointColor;\n        fragColor = vec4(col,1.0);\n    }\n    else\n    {\n        fragColor = vec4(0,0,0,1);\n    }\n}","name":"Image","description":"","type":"image"}]}