{"ver":"0.1","info":{"id":"DdVBDz","date":"1698136907","viewed":41,"name":"DDA Rasterization","username":"ShadingKnight","description":"a DDA Line Renderer","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","dda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool DDA(ivec2 begin, ivec2 end, ivec2 pixel)\n{\n    vec2 delta = vec2(end) - vec2(begin);\n    if (abs(delta.x) < abs(delta.y))\n    {\n        delta = delta.yx;\n        pixel = pixel.yx;\n        begin = begin.yx;\n        end = end.yx;\n    }\n    \n    int xdir = delta.x > 0.0f? 1: -1;\n    float dydx = delta.y / delta.x;\n    for (int dx = 0; abs(dx) < int(abs(delta.x)); dx+= xdir)\n    {\n        if (pixel == ivec2(begin.x + dx, begin.y + int(float(dx) * dydx)))\n        {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0f);\n    \n    ivec2 start = ivec2(int(iResolution.x * 0.5f), int(iResolution.y * 0.5f));\n    ivec2 end = start + ivec2(\n    int(0.5f * iResolution.x * sin(iTime)), \n    int(0.5f * iResolution.y * cos(iTime))\n    );\n    \n    if (DDA(start, end, ivec2(fragCoord)))\n    {\n        col = vec3(1.0, 1.0, 1.0);\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}