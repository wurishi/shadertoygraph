{"ver":"0.1","info":{"id":"MfjBDw","date":"1725215409","viewed":13,"name":"Example: 2D Anti-Aliasing","username":"ElliotPadfield","description":"This technique creates anti-aliased edges by returning a soft, floating-point distance rather than a binary result, ensuring smooth transitions that scale well across different resolutions","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["example"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R = iResolution.xy;\n    vec2 uv = (fragCoord - 0.5 * R) / min(R.x, R.y); // Normalize to [-1, 1]\n    \n    float radius = 0.4; // Circle radius\n    float pix = 1.5 / R.y; // Pixel width\n    float dist = length(uv) - radius;\n\n    // Anti-aliased edge using smoothstep\n    float aa = smoothstep(-pix, pix, dist);\n    \n    vec3 circleColor = mix(vec3(1.0, 0.5, 0.0), vec3(0.0), aa); // Orange circle\n    fragColor = vec4(circleColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}