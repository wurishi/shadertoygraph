{"ver":"0.1","info":{"id":"ms3yDS","date":"1695397816","viewed":31,"name":"\"mandelquat\" set","username":"77Tigers","description":"quaternion mandelbrot set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["quaternion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// quaternion multiplication\nvec4 qm(vec4 a, vec4 b) {\n    return vec4(\n        a.w * b.xyz + b.w * a.xyz + cross(a.xyz, b.xyz),\n        a.w * b.w - dot(a.xyz, b.xyz)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p = (fragCoord * 2.0 - iResolution.xy)/min(iResolution.x, iResolution.y);\n    vec2 m = (iMouse.xy * 2.0 - iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    vec4 c = 1.5 * mat2x4(\n        0., m, 1.,\n        1., 1., 0., 0.\n    ) * p + vec4(sin(iTime * .5), 0., 0., 0.0);\n\n    vec3 col = vec3(0.0);\n    \n    vec4 q = vec4(0.);\n    int i = 0;\n    for (; i < 20; i++) {\n        q = qm(q, q) + c;\n        if (length(q) > 5.) {\n            col = vec3(float(i) * 0.05);\n            break;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}