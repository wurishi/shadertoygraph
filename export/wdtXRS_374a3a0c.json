{"ver":"0.1","info":{"id":"wdtXRS","date":"1575313310","viewed":53,"name":"TheCheckerBoard ","username":"charliekowalski","description":"Using ShaderToy, write a shader that creates a black-and-white chess style checker-board pattern. The number of rows and columns should be variable, i.e, I should be able to change them by changing the value of a variable defined at the top of the shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["10282019"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float numberOfRows = 9.0;\nfloat numberOfColumns = 16.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //establish aspect ratio\n    float aspectRatio = iResolution.y/iResolution.x; \n\t\n    //establishes both textures\n    vec4 oddImage = texture(iChannel0,uv); \n\tvec4 evenImage = texture(iChannel1,uv);\n    \n    //make the coluns and rows the correct size in realtion to the resolution\n    float squareSizeColumns = (iResolution.x / numberOfColumns); \n\tfloat squareSizeRows = (iResolution.y / numberOfRows);\n    \n    //the pixel size of the squares\n    vec2 sizeOfSquare = vec2(squareSizeColumns, squareSizeRows); \n    \n    //floors the varaible so that we have a whole integer\n    vec2 squares = floor(fragCoord / sizeOfSquare);\n    \n    //make the layers into the images\n    vec4 layer1 = vec4(evenImage); \n    vec4 layer2 = vec4(oddImage);\n    \n    //turns all the even squares into the first layer\n    layer1.a = mod(squares.x + mod(squares.y, 2.0),2.0); \n    \n    //combines then layers\n    vec4 checkerboard = vec4(mix(layer1, layer2, layer1.a)); \n\n    // Output to screen\n    fragColor = checkerboard;\n}","name":"Image","description":"","type":"image"}]}