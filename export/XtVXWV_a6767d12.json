{"ver":"0.1","info":{"id":"XtVXWV","date":"1485981223","viewed":607,"name":"Oil Port","username":"airtight","description":"Simplified Port of 'Oil' by Patricio Gonzalez Vivo \nfrom https://thebookofshaders.com/log/160712002432.frag ","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simplfied port of Oil by Patricio Gonzalez Vivo\n// http://www.kamend.com/2012/06/perlin-noise-and-glsl/\n\nvec4 mod289 (vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 permute (vec4 x) { return mod289(((x*34.0)+1.0)*x); }\nvec4 taylorInvSqrt (vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }\nvec2 fade (vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }\n\n// Classic 2D Perlin noise\nfloat cnoise (vec2 P) {\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n    Pi = mod289(Pi); // To avoid truncation effects in permutation\n    vec4 ix = Pi.xzxz;\n    vec4 iy = Pi.yyww;\n    vec4 fx = Pf.xzxz;\n    vec4 fy = Pf.yyww;\n    \n    vec4 i = permute(permute(ix) + iy);\n    \n    vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n    vec4 gy = abs(gx) - 0.5 ;\n    vec4 tx = floor(gx + 0.5);\n    gx = gx - tx;\n    \n    vec2 g00 = vec2(gx.x,gy.x);\n    vec2 g10 = vec2(gx.y,gy.y);\n    vec2 g01 = vec2(gx.z,gy.z);\n    vec2 g11 = vec2(gx.w,gy.w);\n    \n    vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n    g00 *= norm.x;  \n    g01 *= norm.y;  \n    g10 *= norm.z;  \n    g11 *= norm.w;  \n    \n    float n00 = dot(g00, vec2(fx.x, fy.x));\n    float n10 = dot(g10, vec2(fx.y, fy.y));\n    float n01 = dot(g01, vec2(fx.z, fy.z));\n    float n11 = dot(g11, vec2(fx.w, fy.w));\n    \n    vec2 fade_xy = fade(Pf.xy);\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n    return 2.3 * n_xy;\n}\n\n\nfloat noise(vec2 p){         \n\treturn  0.4 * cnoise(p);    \n}\n\nfloat pattern( in vec2 uv, in float time){   \n    \n    //instead of just getting a noise field value on uv position and time,\n    //we first warp the uv space by noise a couple of times\n    //this gives more intersting 'curly' looking noise\n    //this is known as domain warping: https://iquilezles.org/articles/warp\n    \n    //get a noise value q\n    vec2 q = vec2(9.0, 0.);\n    q.y = noise(uv + vec2(5.2*time,1.3*time)) ;\n    \n    //now warp uv space by q and get noise on that\n    vec2 r = vec2(0.);\n    r.x = noise(uv + 4.0 * q + vec2(1.7,9.2));\n    \n    //now warp uv space by r and get noise on that\n    return noise(uv + 4.0*r);\n\n}\n\nconst float SCALE = 2.0;\nconst float BRIGHTNESS = 3.5;\nconst float SPEED = 0.3;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 st = fragCoord.xy / iResolution.xy;\n    vec2 uv = -1.0 + 2. * st;\n    uv *= SCALE;\n    float time = iTime*SPEED;\n    vec3 color = vec3(pattern(uv,time)*BRIGHTNESS);\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}