{"ver":"0.1","info":{"id":"XdtcWS","date":"1520023342","viewed":280,"name":"Round corners","username":"cabanier","description":"use rounded corners","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["round"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float drawcircle(vec2 fragCoord, vec2 center, float radius)\n{\n    vec4 color = vec4(0.0f);\n    float dist = length(center-fragCoord);\n    return step(dist, radius);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // get screen pos in [0-1]\n    // we want a 1:1 aspect ratio, this is why we use iResolution.yy\n\tvec2 uv = fragCoord.xy;\n    vec2 wh = iResolution.xy;\n    const float radius = 250.0f;\n    vec2 center;\n    fragColor.r = 1.0f;\n    \n    bool drawcirle = false;\n    \n    if(uv.x < radius/2.0f) {\n        drawcirle = true;\n        center.x = radius/2.0f;\n    } else if(uv.x > wh.x - radius/2.0f) {\n        drawcirle = true;\n        center.x = wh.x - radius/2.0f;\n    }\n    if (drawcirle) {\n        if(uv.y < radius/2.0f) {\n            center.y = radius/2.0f;\n        } else if(uv.y > wh.y - radius/2.0f) {\n            drawcirle = true;\n            center.y = wh.y- radius/2.0f;\n        } else {\n            drawcirle = false;\n        }\n    }\n    \n    if (drawcirle)\n        fragColor *= drawcircle(uv, center, radius/2.0f);\n}","name":"Image","description":"","type":"image"}]}