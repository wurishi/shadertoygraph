{"ver":"0.1","info":{"id":"ddl3DX","date":"1666922171","viewed":105,"name":"gothic arch 2d","username":"jt","description":"A gothic arch 2d sdf. Should be exact euclidean.\nSuggestions how to achieve a constant width arch are welcome.\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","arch","gothic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ddl3DX gothic arch 2d by jt\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define pi 3.1415926\n\nfloat line(vec2 p, float a, float b)\n{\n    p.x -= clamp(p.x, a, b);\n    return length(p);\n}\n\nfloat arch_shape(vec2 p, float r)\n{\n    vec2 a = r * vec2(0.0, sqrt(3.0)/2.0);\n    p.x = abs(p.x);\n    p.y = max(p.y, 0.0);\n    float d = length(p+vec2(r/2.0,0)) - r;\n    //return p.y-p.x*tan(pi/3.0) <= a.y ? d : distance(p,a);\n    return p.y >= 0.0 ? p.y-p.x*sqrt(3.0) <= a.y ? d : distance(p,a) : line(p, 0.1, 0.3);\n}\n\nfloat arch(vec2 p, float r, float h)\n{\n    p.x = abs(p.x);\n    float l = line(p+vec2(r/2.0,0), r-h/2.0, r+h/2.0);\n    if(p.y < 0.0) return l;\n    float o = arch_shape(p, r + h);\n    if(o >= 0.0) return o;\n    float i = arch_shape(p, r - h);\n    if(i <= 0.0) return -i;\n    return max(max(o, -i),-l);\n}\n\nfloat map(vec2 p)\n{\n    p.y += 0.75;\n    return arch(p, 1.5, 0.2);\n}\n\n#define EPSILON 0.001\n\n// part of sdf error detection (jt/spalmer)\nvec2 gradient(vec2 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec2(map(p+h.xy) - map(p-h.xy),\n                 map(p+h.yx) - map(p-h.yx)))/EPSILON/2.0;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    float d = map(p);\n\n    // using iq's sdf visualization\n    vec3 col = (d < 0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n\tcol *= 1.0 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    if(iMouse.x > 0.001)\n    {\n        d = map(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0015));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n    // sdf error detection (jt/spalmer)\n    {\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the minimal distance to the surface,\n        // the result should be (close to) zero. (translation from math to words: jt)\n        float error = map(p - gradient(p) * map(p)); // SDF error detection suggested to me by spalmer - thanks!\n        //col += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n        col.r += smoothstep(0.0,/*sqrt*/(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // detect both interior and exterior errors (NOTE: false alarms on some shapes)\n    }\n\n\tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}