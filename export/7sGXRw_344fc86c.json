{"ver":"0.1","info":{"id":"7sGXRw","date":"1634402503","viewed":69,"name":"newton fractal zoom","username":"Lordinator","description":"trying to create a newton fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cmul(a,b) vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x)\n#define r1 vec2(0.5,0.0)\n#define r2 vec2(-0.5,0.0)\n#define r3 vec2(0.0,0.9)\n#define pi 3.14159\n\n#define c1 0xd77a61\n#define c2 0xdbd3d8\n#define c3 0x223843\n\n#define sqLength(z) z.x*z.x + z.y*z.y\n\n#define rotSpeed 0.03\n\nvec2 f(vec2 z){\n    return cmul((r1 + z), (cmul((r2 + z), (r3 + z))));\n}\n\nvec2 fp(vec2 z){\n    return cmul(((3.0*z)+2.0*(r1+r2+r3)),z) + cmul(r1,r2) + cmul(r2,r3) + cmul(r1,r3);\n}\n\n#define inv(z) vec2(z.x,-z.y)/(z.x*z.x + z.y * z.y)\n#define iterationNb 100\n\nvec2 newtonReg(vec2 z){\n\n    for (int i = 0; i < iterationNb; i +=1){\n            z -= cmul((f(z)), (inv(fp(z))));\n    }\n    return z;\n}\n\n/*\n\th : given in radians.\n\ts : from 0 to 1.\n\tv : from 0 to 1.\n*/\nvec3 hsvToRgb(vec3 hsv){/* not understood but from wikipedia :\n\t\t\t\t\t\thttps://fr.wikipedia.org/wiki/Teinte_Saturation_Valeur */\n    float s = hsv.y;\n    float v = hsv.z;\n    \n    vec3 rgb;\n    hsv.x *= 180.f/pi;\n    hsv.x = mod(hsv.x,360.f);\n    int state = int(hsv.x/60.f)%6;\n    float f = hsv.x/60.f - float(state);\n    \n    float l = (1.f - s);\n    float m = (1.f - s * f);\n    float n = (1.f - (1.f-f) * s);\n\t\n    return v * vec3[](vec3(1,n,l),\n                 vec3(m,1,l),\n                 vec3(l,1,n),\n                 vec3(l,m,1),\n                 vec3(n,l,1),\n                 vec3(1,l,m))[state];\n}\n\nvec3 hexToCol(int hex){\n    return vec3(float((hex & 0xff0000) >> 16),\n                float((hex & 0x00ff00) >> 8),\n                float((hex & 0x0000ff)))/255.0;\n}\n\n\nvec3 coordToColor(vec2 z){    \n    float r1Closeness = sqLength((z+r1));\n    float r2Closeness = sqLength((z+r2));\n    float r3Closeness = sqLength((z+r3));\n    if (r1Closeness < r2Closeness && r1Closeness < r3Closeness){\n        return hexToCol(c1);\n    }\n    if (r3Closeness < r2Closeness){\n        return hexToCol(c3);\n    }\n    return hexToCol(c2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float loopTime = iTime/4.0 - 25.49 * floor(iTime/(25.49*4.0));\n    vec2 ab = (exp(23.0-loopTime)) * (fragCoord/iResolution.xy-vec2(.24,.42));\n    ab -= vec2(0.0,.3);\n    float rotTime = 2.0*pi*(25.49-loopTime)/25.49;\n    ab = vec2(cos(rotTime) * ab.x + sin(rotTime) * ab.y,\n             -sin(rotTime) * ab.x + cos(rotTime) * ab.y);\n    vec3 col = coordToColor(newtonReg(ab));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}