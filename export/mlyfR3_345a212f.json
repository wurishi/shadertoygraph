{"ver":"0.1","info":{"id":"mlyfR3","date":"1702325966","viewed":44,"name":"search square in sparse bitnoise","username":"jt","description":"Given a bitnoise with most off and only few on bits,\nfor each point\nsearch outward in a square-pattern\nwhen first on-bit found return its position\n(but to ensure unambiguous position\nreturn (0,0) if more than one bit\nencountered at the same distance).","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","square","bit","search","sparse","bitnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlyfR3 search square in sparse bitnoise, 2023 by jt\n\n// Given a bitnoise with most off and only few on bits,\n// for each point\n//     search outward in a square-pattern\n//     when first on-bit found return its position\n//     (but to ensure unambiguous position\n//      return (0,0) if more than one bit\n//      encountered at the same distance).\n\n// I guess the result is somewhat similar to voronoi with maximum metric?\n// (click to show color-coded areas)\n\n// Could possibly be used as dungeon- or cave-generator.\n\n// tags: noise, square, bit, search, sparse, bitnoise\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define SIZE 250\n//#define SIZE (int((0.5-0.5*cos(iTime))*50.0 + 50.0))\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint triple32(int x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint lowbias32(int x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352d;\n    x ^= x >> 15;\n    x *= 0x846ca68b;\n    x ^= x >> 16;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n//#define HASH(u) lowbias32(u)\n\nbool bhash(ivec2 t)\n{\n    //int n = 2 + int(floor(iTime/2.0))%5;\n    //int n = 6 - int(floor(iTime/2.0))%5; // more interesting start image\n    int n = 7;\n    return HASH(int(iTime)+(HASH((t.x + HASH(t.y)))) & ((1<<n)-1)) == 0;\n}\n\nbool grid(ivec2 t)\n{\n//return t==ivec2(50,20) || t==ivec2(20,50); // TEST\n    // safety\n    //if(any(lessThan(t, ivec2(0))) || any(greaterThan(t, ivec2(size))))\n    //    return (t.x&1)!=(t.y&1); // makes sure scan-line terminates eventually\n\n    return bhash(t);\n}\n\n#define MAX_SIZE 50\n\nivec2 square(ivec2 tile)\n{\n    if(grid(tile)) return tile;\n\n    ivec2 center = ivec2(0);\n    // search center\n    for(int s = 1; s < MAX_SIZE; s++)\n    {\n        for(int i = -s; i < +s; i++)\n        {\n            if(grid(tile+ivec2(-i,-s)))\n            {\n                if(center != ivec2(0)) return ivec2(0); // conflicting centers\n\n                center = tile+ivec2(-i,-s);\n            }\n            if(grid(tile+ivec2(+i,+s)))\n            {\n                if(center != ivec2(0)) return ivec2(0); // conflicting centers\n\n                center = tile+ivec2(+i,+s);\n            }\n            if(grid(tile+ivec2(-s,+i)))\n            {\n                if(center != ivec2(0)) return ivec2(0); // conflicting centers\n\n                center = tile+ivec2(-s,+i);\n            }\n            if(grid(tile+ivec2(+s,-i)))\n            {\n                if(center != ivec2(0)) return ivec2(0); // conflicting centers\n\n                center = tile+ivec2(+s,-i);\n            }\n        }\n\n        if(center != ivec2(0)) return center; // found center\n    }\n\n    return center; // no center found\n    //return ivec2(0); // no center found\n}\n\nint count(ivec2 tile)\n{\n    int c = 0;\n    for(int s = 0; s < MAX_SIZE; s++)\n    {\n        for(int i = -s; i < +s; i++)\n        {\n            if(grid(tile+ivec2(-i,-s))) c++;\n            if(grid(tile+ivec2(+i,+s))) c++;\n            if(grid(tile+ivec2(-s,+i))) c++;\n            if(grid(tile+ivec2(+s,-i))) c++;\n        }\n\n        if(c > 0) return c;\n    }\n\n    return c;\n    //return 0;\n}\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = 0.5 + (I - R / 2.) / R.y;\n\n    ivec2 tile = ivec2(floor(I*float(SIZE)));\n\n    vec3 c =\n        iMouse.z > 0.0\n        ?\n        hash32(123.456*vec2(square(tile)))\n        :\n        vec3(count(tile)==1);\n\n    o = vec4(c, 1);\n}\n","name":"Image","description":"","type":"image"}]}