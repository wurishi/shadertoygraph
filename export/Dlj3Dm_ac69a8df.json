{"ver":"0.1","info":{"id":"Dlj3Dm","date":"1673418330","viewed":139,"name":"fate beckons","username":"vivavolt","description":"CC0: Windows Terminal Damask Rose\nBeen tinkering creating Windows Terminal shaders\nCreated this as a version of an earlier shader\nThought it turned out decent so sharing","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","windows","terminal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"soft whisper\" by vivavolt. https://shadertoy.com/view/dlXGWB\n// 2023-01-11 06:20:50\n\n// Fork of \"cutting words\" by vivavolt. https://shadertoy.com/view/mtXGWB\n// 2022-12-29 12:00:41\n\n// Fork of \"Windows Terminal Damask Rose\" by mrange. https://shadertoy.com/view/flKfzh\n// 2022-12-29 11:48:36\n\n// CC0: Windows Terminal Damask Rose\n//  Been tinkering creating Windows Terminal shaders\n//  Created this as a version of an earlier shader\n//  Thought it turned out decent so sharing\n\n// Define to use a faster atan implementation\n//  Introduces slight assymmetries that don't look outright terrible at least\n//#define FASTATAN\n\n#define TIME        iTime * 3.\n#define RESOLUTION  iResolution\n#define PI          3.141592654\n#define PI_2        (0.5*PI)\n#define TAU         (2.0*PI)\n#define ROT(a)      mat2(cos(a), sin(a), -sin(a), cos(a))\n\n\n#if defined(FASTATAN)\n#define ATAN atan_approx\n#else\n#define ATAN atan\n#endif\n\nconst float hf = 0.01;\n\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\nconst vec4 hsv2rgb_K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\nvec3 hsv2rgb(vec3 c) {\n  vec3 p = abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www);\n  return c.z * mix(hsv2rgb_K.xxx, clamp(p - hsv2rgb_K.xxx, 0.0, 1.0), c.y);\n}\n// License: WTFPL, author: sam hocevar, found: https://stackoverflow.com/a/17897228/418488\n//  Macro version of above to enable compile-time constants\n#define HSV2RGB(c)  (c.z * mix(hsv2rgb_K.xxx, clamp(abs(fract(c.xxx + hsv2rgb_K.xyz) * 6.0 - hsv2rgb_K.www) - hsv2rgb_K.xxx, 0.0, 1.0), c.y))\n\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\n\n// License: Unknown, author: Unknown, found: don't remember\nfloat tanh_approx(float x) {\n//  return tanh(x);\n  float x2 = x*x;\n  return clamp(x*(27.0 + x2)/(27.0+9.0*x2), -1.0, 1.0);\n}\n\n// License: MIT, author: Pascal Gilcher, found: https://www.shadertoy.com/view/flSXRV\nfloat atan_approx(float y, float x) {\n  float cosatan2 = x / (abs(x) + abs(y));\n  float t = PI_2 - cosatan2 * PI_2;\n  return y < 0.0 ? -t : t;\n}\n\n// License: MIT, author: Inigo Quilez, found: https://www.iquilezles.org/www/articles/smin/smin.htm\nfloat pmin(float a, float b, float k) {\n  float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n  return mix(b, a, h) - k*h*(1.0-h);\n}\n\nfloat pabs(float a, float k) {\n  return -pmin(a, -a, k);\n}\n\nfloat height(vec2 p) {\n//  float tm = TIME-2.*length(p);\n  float tm = TIME;\n  const float xm = 0.5*0.005123;\n  float ym = mix(0.125, 0.25, 0.5-0.5*sin(cos(TAU*TIME/600.0)));\n\n  p *= 0.4;\n  \n  float d = length(p);\n  float c = 1E6;\n  float x = pow(d, 0.1)*ym;\n  float y = (ATAN(p.x, p.y)+0.05*tm-3.0*d) / TAU;\n  \n  for (float i = 0.; i < 4.; ++i) {\n    float v = length(fract(vec2(x - tm*i*xm, fract(y + i*ym)*.125)*(16. + 16.*abs(sin(0.01*TIME + 10.))))*2.-1.);\n    c = pmin(c, v, 0.0125);\n  }\n\n  float h =  (-hf+hf*(pabs(tanh_approx(5.5*d-40.*c*c*d*d*(.55-d))-0.25*d, 0.25)));\n  return h;\n}\n\nvec3 normal(vec2 p) {\n  vec2 e = vec2(4.0/RESOLUTION.y, 0);\n  \n  vec3 n;\n  n.x = height(p + e.xy) - height(p - e.xy);\n  n.y = -2.0*e.x;\n  n.z = height(p + e.yx) - height(p - e.yx);\n  \n  return normalize(n);\n}\n\nvec3 color(vec2 p) {\n  const float ss = 1.;\n  const float hh = 1.95; \n\n  const vec3 lp1 = -vec3(1.0 , hh, -1.0)*vec3(ss, 1.0, ss);\n  const vec3 lp2 = -vec3(-1.0, hh, -1.0)*vec3(ss, 1.0, ss);\n\n  vec3 lcol1 = HSV2RGB(vec3(0.10, 0.75, abs(sin(TIME * 0.1))*2.0));\n  vec3 lcol2 = HSV2RGB(vec3(0.57, sin(TIME * 0.1)*0.7 , 1.0));\n  const vec3 mat   = HSV2RGB(vec3(0.55, 0.83, 0.55));\n  const float spe  = 3.0;\n\n  float h = height(p);\n  vec3  n = normal(p);\n\n  vec3 ro = vec3(0.0, 8.0, 0.0);\n  vec3 pp = vec3(p.x, 0.0, p.y);\n\n  vec3 po = vec3(p.x, 0.0, p.y);\n  vec3 rd = normalize(ro - po);\n\n  vec3 ld1 = normalize(lp1 - po);\n  vec3 ld2 = normalize(lp2 - po);\n  \n  float diff1 = max(dot(n, ld1), 0.0);\n  float diff2 = max(dot(n, ld2), 0.0);\n\n  vec3  rn    = n;\n  vec3  ref   = reflect(rd, rn);\n  float ref1  = max(dot(ref, ld1), 0.0);\n  float ref2  = max(dot(ref, ld2), 0.0);\n\n  float dm = tanh_approx(abs(h)*120.0);\n  float rm = dm;\n  dm *= dm;\n\n  vec3 lpow1 = dm*mat*lcol1;\n  vec3 lpow2 = dm*mat*lcol2;\n\n  vec3 col = vec3(0.0);\n  col += diff1*diff1*lpow1;\n  col += diff2*diff2*lpow2;\n\n  col += rm*pow(ref1, spe)*lcol1;\n  col += rm*pow(ref2, spe)*lcol2;\n\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 q = fragCoord/RESOLUTION.xy;\n  vec2 p = -1. + 2. * q;\n  p.x *= RESOLUTION.x/RESOLUTION.y;\n  vec3 col = color(p);\n\n  col = aces_approx(col);\n  col = sRGB(col);\n  \n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}