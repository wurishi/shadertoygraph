{"ver":"0.1","info":{"id":"XX3XDn","date":"1719055249","viewed":149,"name":"The Starry Night Star","username":"letbonsaibe","description":"base on https://www.shadertoy.com/view/fstyD4\nand  learn polar from the art of code : https://www.youtube.com/watch?v=r1UOB8NVE8I","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["star","starrynight","vincent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define p(t, a, b, c, d) ( a + b*cos( 6.28318*(c*t+d) ) ) //IQ's palette function (https://www.iquilezles.org/www/articles/palettes/palettes.htm)\n#define sp(t) p(t,vec3(.26,.76,.77),vec3(1,.3,1),vec3(.8,.4,.7),vec3(0,.12,.54)) //sky palette\n#define hue(v) ( .6 + .76 * cos(6.3*(v) + vec4(0,23,21,0) ) ) //hue\n#define PI 3.141592693\n\n\n// \"Hash without Sine\" by Dave_Hoskins.\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p)\n{\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nvec2 hash22(vec2 p)\n{\n  vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec2 rotate2D (vec2 st, float a){\n    return  mat2(cos(a),-sin(a),sin(a),cos(a))*st;\n}\n\n\nfloat ssmoothstep(float a, float b, float s) //AA bar\n{\n    return smoothstep (a-s, a+s, b);\n}\n\n\n\nfloat noise( in vec2 p ) //gradient noise\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n    \n    vec2 u = f*f*(3.-2.*f);\n\n    return mix( mix( dot( hash22( i+vec2(0,0) ), f-vec2(0,0) ), \n                     dot( hash22( i+vec2(1,0) ), f-vec2(1,0) ), u.x),\n                mix( dot( hash22( i+vec2(0,1) ), f-vec2(0,1) ), \n                     dot( hash22( i+vec2(1,1) ), f-vec2(1,1) ), u.x), u.y);\n}\n\nfloat wobble(vec2 p, float frequency, float amount)\n{\n    return sin(iTime*frequency + p.x * 2.0+p.y )*amount;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    // wobble \n    uv += wobble(uv, 4.0, 0.035) * 0.3;\n    // move center to west-north\n    uv -= vec2(-0.75, 0.5);\n    \n    // polar coordinate\n    vec2 st = vec2(atan(uv.x, uv.y), length(uv));\n    // make angle to [0, 1]\n    st.x = st.x / 2.0 / PI + 0.5;\n\n   \n    float numberOfRings = 60.; \n    \n    float smoothFactor = 5. * numberOfRings  / iResolution.y; \n\n    st.y = st.y * numberOfRings;\n    \n    float ringIndex = floor(st.y);\n    float numberOfRingSegment = 0.6 * ringIndex + 2.0;\n    \n    // rotate segment with random speed\n    st.x += 0.3 * (hash12(vec2(ringIndex))*.5+.25)*(iTime+10.)*.05;\n\n    st.x = st.x * numberOfRingSegment;\n    float segmentIndex = floor(st.x);\n    \n    \n    vec2 id = vec2(segmentIndex, ringIndex);\n    st = st - id;\n    \n    // add  noise\n    st += (noise(st*vec2(1,4)+id))*vec2(.7,.6);\n    \n    \n    // ray in polarCoord\n    float m1 = ssmoothstep(\n        abs(st.x - .5), .5, smoothFactor / PI \n    );\n    // circle in polarCoord\n    float m2 = ssmoothstep(\n        abs(st.y - .5), .5, smoothFactor\n    );\n    \n    vec3 col = sp(sin( (length(uv)-.2) ) + 0.02);\n    col = mix(\n        col*.35, \n        col + vec3(vec2((hash12(id))*0.3), 0.0), \n        m1 *m2\n    );\n \n    \n    \n        \n    fragColor = vec4(col, 1.0);\n    \n    \n\n \n}","name":"Image","description":"","type":"image"}]}