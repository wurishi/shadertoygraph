{"ver":"0.1","info":{"id":"7lySWD","date":"1640690740","viewed":144,"name":"rotate  x axis","username":"byetplay","description":"Realize the texture rotation around the x axis through the principle of ray intersection","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["intersection","rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int lut[4] = int[](1,2,0,1);\n\nfloat cross2d( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n\n\nvec3 quadIntersect( in vec3 ro, in vec3 rd, in vec3 v0, in vec3 v1, in vec3 v2, in vec3 v3 )\n{\n    // lets make v0 the origin\n    vec3 a = v1 - v0;\n    vec3 b = v3 - v0;\n    vec3 c = v2 - v0;\n    vec3 p = ro - v0;\n\n    // intersect plane\n    vec3 nor = cross(a,b);\n    float t = -dot(p,nor)/dot(rd,nor);\n    if( t<0.0 ) return vec3(-1.0);\n    \n    // intersection point\n    vec3 pos = p + t*rd;\n\n    // see here: https://www.shadertoy.com/view/lsBSDm\n    \n    // select projection plane\n    vec3 mor = abs(nor);\n    int id = (mor.x>mor.y && mor.x>mor.z ) ? 0 : \n             (mor.y>mor.z)                 ? 1 : \n                                             2 ;\n\n    int idu = lut[id  ];\n    int idv = lut[id+1];\n    \n    // project to 2D\n    vec2 kp = vec2( pos[idu], pos[idv] );\n    vec2 ka = vec2( a[idu], a[idv] );\n    vec2 kb = vec2( b[idu], b[idv] );\n    vec2 kc = vec2( c[idu], c[idv] );\n    \n    // find barycentric coords of the quadrilateral\n    vec2 kg = kc-kb-ka;\n\n    float k0 = cross2d( kp, kb );\n    float k2 = cross2d( kc-kb, ka );        // float k2 = cross2d( kg, ka );\n    float k1 = cross2d( kp, kg ) - nor[id]; // float k1 = cross2d( kb, ka ) + cross2d( kp, kg );\n    \n    // if edges are parallel, this is a linear equation\n\tfloat u, v;\n    if( abs(k2)<0.00001 )\n    {\n\t\tv = -k0/k1;\n        u = cross2d( kp, ka )/k1;\n    }\n\telse\n    {\n        // otherwise, it's a quadratic\n        float w = k1*k1 - 4.0*k0*k2;\n        if( w<0.0 ) return vec3(-1.0);\n        w = sqrt( w );\n\n        float ik2 = 1.0/(2.0*k2);\n\n                             v = (-k1 - w)*ik2; \n        if( v<0.0 || v>1.0 ) v = (-k1 + w)*ik2;\n        \n        u = (kp.x - ka.x*v)/(kb.x + kg.x*v);\n    }\n    \n    if( u<0.0 || u>1.0 || v<0.0 || v>1.0) return vec3(-1.0);\n    \n    return vec3( t, u, v );\n}\n\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n  \n    float obj = -1.0;\n    vec2  uv = vec2(-1.0);\n    vec2 rectSize = vec2(1.0);\n    vec3 v0 = vec3(-rectSize.x,rectSize.y,0.0);\n    vec3 v1 = vec3(-rectSize.x,-rectSize.y,0.0);\n    vec3 v2= vec3(rectSize.x,-rectSize.y,0.0);\n    vec3 v3 = vec3(rectSize.x,rectSize.y,0.0);\n      float xSpeed = 0.3;\n    float ySpeed = 0.5;\n    float zSpeed = 0.7;\n    mat3 matrix = mat3(1., 0., 0.,\n                      0., cos(xSpeed*iTime), sin(xSpeed*iTime),\n                      0., -sin(xSpeed*iTime), cos(xSpeed*iTime));\n   // matrix = mat3(cos(ySpeed*iTime), 0., -sin(ySpeed*iTime),\n    //                  0., 1., 0.,\n     //                 sin(ySpeed*iTime), 0., cos(ySpeed*iTime))*matrix;\n   // matrix = mat3(cos(zSpeed*iTime), sin(zSpeed*iTime), 0.,\n    //             \t  -sin(zSpeed*iTime), cos(zSpeed*iTime), 0.,\n    //             \t  0., 0., 0.)*matrix;\n    v0 *=matrix;\n    v1 *=matrix;\n    v2 *=matrix;\n    v3 *=matrix;\n    vec3 tuv = quadIntersect( ro, rd, v0, v1, v2, v3 );\n    return tuv.yzx;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0 + 2.0*fragCoord.xy/iResolution.xy;\n   // p.x *= iResolution.x/iResolution.y;\n\tvec3 origin = vec3(0.0, 0.0, 5.0);\n\tvec3 direction = vec3(p.x, p.y, -5.0);\n    direction = normalize(direction);\n    vec3 res = intersect(origin,direction);\n    if( res.z>0.0 )\n    {\n      fragColor = texture(iChannel0, res.xy);\n    }else{\n      fragColor = vec4(0.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}