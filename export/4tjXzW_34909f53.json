{"ver":"0.1","info":{"id":"4tjXzW","date":"1442011122","viewed":565,"name":"OffTheGrid","username":"Passion","description":"Using the '2d Fast Clouds' from Sinuousity again for a skybox. And the sun from 'Kepler 256o' from otaviogood.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","fbm","walkingsim"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float EPS = 0.001;\n\nconst float pi = 3.14159265359;\n\n//2d Fast Clouds const\n//SETTINGS//\nconst float timeScale = 10.0;\nconst float cloudScale = 0.5;\nconst float skyCover = 0.6; //overwritten by mouse x drag\nconst float softness = 0.2;\nconst float brightness = 1.0;\nconst int noiseOctaves = 8;\nconst float curlStrain = 3.0;\n//SETTINGS//\n\nmat3 ry (float radian){ \n    return mat3(cos(radian), 0.0,-sin(radian),\n\t\t\t   0.0, 1.0, 0.0, \n\t\t\t   sin(radian), 0.0, cos(radian)  );\n        }\n       \nmat3 rx (float radian){\n    return mat3(1.0, 0.0, 0.0,\n\t\t\t   0.0, cos(radian), sin(radian), \n\t\t\t   0.0,-sin(radian), cos(radian) );\n\t\t}\n//Random function\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n//Noise function\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n\tvec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n//Fbm function\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 1.0;\n\tfor (int i = 0; i < 8; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn += n;\n\t\tamplitude *= 0.5;\n\t}\n\treturn total;\n}\n\n\nfloat distanceFunction(vec3 p){\n    vec4 n = vec4(0.0,1.0,0.0,1.0); \n    float disp;\n    disp = .3*sin(1.4*p.x+cos(p.z*1.3))-(1.0-abs(sin(p.x+cos(p.z+fbm(p.zx)))))*.4;\n    float plane = dot(p,n.xyz) + n.w;\n \n    return (plane+disp);\n}\n\nvec3 getNormal(vec3 p){\n    const float d = EPS;\n    return\n    normalize\n    (\n      vec3\n      (\n        distanceFunction(p+vec3(d,0.0,0.0))-distanceFunction(p+vec3(-d,0.0,0.0)),\n        distanceFunction(p+vec3(0.0,d,0.0))-distanceFunction(p+vec3(0.0,-d,0.0)),\n        distanceFunction(p+vec3(0.0,0.0,d))-distanceFunction(p+vec3(0.0,0.0,-d))\n      )\n    );\n}\n \nfloat saturate(float num)\n{\n    return clamp(num,0.0,1.0);\n}\n\nfloat noised(vec2 uv)\n{\n    return texture(iChannel2,uv).r;\n}\n\nvec2 rotate(vec2 uv)\n{\n    uv = uv + noised(uv*0.2)*0.005;\n    float rot = curlStrain;\n    float sinRot=sin(rot);\n    float cosRot=cos(rot);\n    mat2 rotMat = mat2(cosRot,-sinRot,sinRot,cosRot);\n    return uv * rotMat;\n}\n\nfloat fbm2 (vec2 uv)\n{\n    float rot = 1.57;\n    float sinRot=sin(rot);\n    float cosRot=cos(rot);\n    float f = 0.0;\n    float total = 0.0;\n    float mul = 0.5;\n    mat2 rotMat = mat2(cosRot,-sinRot,sinRot,cosRot);\n    \n    for(int i = 0;i < noiseOctaves;i++)\n    {\n        f += noised(uv+iTime*0.00015*timeScale*(1.0-mul))*mul;\n        total += mul;\n        uv *= 3.0;\n        uv=rotate(uv);\n        mul *= 0.5;\n    }\n    return f/total;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pos = (fragCoord.xy*2.0 -iResolution.xy) / iResolution.y;\n    vec3 bg = vec3(0.0);//mix(vec3(0.24,0.24,.9),vec3(1.5),.3);  \n\n    float time = iTime*.3;\n    vec3 camPos = vec3(0.0, -.25, 11.0)*ry(time*.15);\n    camPos.y=-distanceFunction(camPos);\n    //Camera set-up\n    vec3 camDir = vec3(.3, 0.05, -1.0);\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    vec3 camSide = cross(camDir, camUp);\n    float focus = 1.8;\n    vec3 col = vec3(0.0);\n    vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus)*ry(iMouse.x/51.)*ry(time*.15-1.25);\n\n    float t = 0.0, d;\n    vec3 posOnRay = camPos;\n \t//Raymarching\n    for(int i=0; i<48; ++i){\n        d = distanceFunction(posOnRay);\n        t += d;\n        posOnRay = camPos + t*rayDir;\n        if(d < EPS) break;\n    }\n    \n    vec4 tex = texture(iChannel0,posOnRay.xz*.25);\n    vec3 l = normalize(vec3(0.0,10.,-20.)*ry(time));\n    vec3 normal = getNormal(posOnRay);\n    \n    //sun-sunIntensity from 'Kepler 256o'\n    //https://www.shadertoy.com/view/XsjGRd - otaviogood\n    vec3 localRay = normalize(rayDir);\n    float sunIntensity = 1.0 - (dot(localRay, l) * 0.5 + 0.5);\n    //sunIntensity = (float)Math.Pow(sunIntensity, 14.0);\n    sunIntensity = 0.2 / sunIntensity;\n    sunIntensity = min(sunIntensity, 40000.0);\n    sunIntensity = max(0.0, sunIntensity - 3.0);\n    //////////////////////////////////////////////////\n    vec2 screenUv = fragCoord.xy/iResolution.xy;\n    vec2 uv2 = fragCoord.xy/(40000.0*cloudScale);\n    \n    float mouseXAffect = (iMouse.x/iResolution.x);\n    float weatherVariation = clamp(sin(time)*.5,-0.5,-0.05);\n    float cover = 0.5-weatherVariation;\n    \n    float bright = brightness*(1.8-cover);\n    //cloud coverage from '2d Fast Clouds' \n    //https://www.shadertoy.com/view/XsjSRt - Sinuousity\n    \n    //perspective correction from Dave Hoskins 'Mountains' GetColor function\n    ////////////////\n    vec3 rd = rayDir; rd.y = max(rd.y, 0.0001);\n\tfloat v = (7.5-camPos.y)/rd.y; \n\trd.xz *= v;\n\trd.xz += camPos.xz;\n\trd.xz *= .010;\n    ////////////////\n    \n    //float color1 = fbm2((rayDir.yz*.05)-0.5+iTime*0.00004*timeScale);  //xz\n    //float color2 = fbm2((rayDir.zy*.05)-10.5+iTime*0.00002*timeScale); //yz\n    float color1 = fbm2((rd.xz*.05)-0.5+iTime*0.00004*timeScale);  //xz\n    float color2 = fbm2((rd.zx*.05)-10.5+iTime*0.00002*timeScale); //yz\n    \n    float clouds1 = smoothstep(1.0-cover,min((1.0-cover)+softness*2.0,1.0),color1);\n    float clouds2 = smoothstep(1.0-cover,min((1.0-cover)+softness,1.0),color2);\n    \n    float cloudsFormComb = saturate(clouds1+clouds2);\n    \n    vec4 skyCol = vec4(0.6,0.8,1.0,1.0);\n    float cloudCol = saturate(saturate(1.0-pow(color1,1.0)*0.2)*bright);\n    vec4 clouds1Color = vec4(cloudCol,cloudCol,cloudCol,1.0);\n    vec4 clouds2Color = mix(clouds1Color,skyCol,0.25);\n    vec4 cloudColComb = mix(clouds1Color,clouds2Color,saturate(clouds2-clouds1));\n    vec4 clouds = vec4(0.0);\n\tclouds = mix(skyCol,cloudColComb,cloudsFormComb);\n    vec3 sunCol = vec3(258.0, 208.0, 100.0) / 15.0;\n    //bg;  //dot(l,rayDir)*.5+.2;\n    bg=clouds.rgb;\n    if(abs(d) < 0.5){\n        //Diffuse\n        float diff = clamp(dot(normal,(l)),0.0,1.0);\n        vec3 brdf = 1.5*vec3(.10, .11, .11);\n        float fre = .2*pow(clamp(1. + dot(normal, rayDir), 0., 1.), 2.);\n        brdf += 1.30*diff*vec3(1., .9, .75);      \n\t\t//Blinn-Phong half vector\n        vec3 h = normalize(-rayDir + l);\n        //Specular\n        float spe = pow(clamp(dot(h, normal), 0.0, 1.0), 15.0*4.);\n        //Textured specular\n        vec4 spec = texture(iChannel1,posOnRay.xz)*spe;\n\t\t//Adding diffuse and specular\n        col=diff*tex.rgb + spec.rgb+fre*brdf;\n        //Fog\n        fragColor = vec4(mix(col,bg,smoothstep(.01,.2,t*.015)),1.0);\n    } else {\n        //Sky\n        fragColor = vec4(bg+sunCol*(sunIntensity*.0015),1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}