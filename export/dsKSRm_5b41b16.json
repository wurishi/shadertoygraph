{"ver":"0.1","info":{"id":"dsKSRm","date":"1680891949","viewed":64,"name":"Somewhat Blurred Noise","username":"Rugged","description":"blur noise but it's pixelated","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n\n\nfloat zoomNoise(vec2 p, float s){\n\n    vec2 p0 = floor(p/s);\n    //vec2 pR = floor((p + vec2(s, 0.)) / s);\n    //vec2 pU = floor((p + vec2(0., s)) / s);\n    //vec2 pUR = floor((p + vec2(s, s)) / s);\n\n    \n    float cp = hash3(p0);\n    //float cpR = hash3(pR);\n    //float cpU = hash3(pU);\n    //float cpUR = hash3(pUR);\n\n    //float dp = distance(p, p0 * s) / s;\n    //float dpR = distance(p, pR * s) / s;\n    //float dpU = distance(p, pU * s) / s;\n    //float dpUR = distance(p, pUR * s) / s;\n\n    \n    float ret = 0.;\n    //ret += max(cp * (.5 - dp), 0.);\n    //ret += max(cpR * (.5 - dpR), 0.);\n    //ret += max(cpU * (.5 - dpU), 0.);\n    //ret += max(cpUR * (.5 - dpUR), 0.);\n\n    \n    //ret = (dp < .1) ? cp : ret;\n    //ret = (dpR < .1) ? cpR : ret;\n    //ret = (dpU < .1) ? cpU : ret;\n    //ret = (dpUR < .1) ? cpUR : ret;\n    \n    \n    ret = cp;\n    \n    return ret;//smoothstep(cp, cpR, distance(p, p0 * s) / s);\n    //pow((dp + dpR + dpU + dpUR) / 4., 2.);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = vec4(0.);\n    \n    \n    float scale = 10.;\n    \n    col = vec4(zoomNoise(fragCoord + vec2(30. * iTime), scale));\n    \n    \n    \n    for(int i = 0; i < 8; i++){\n        float ang = (float(i) / 8.) * PI * 2.;\n        \n        vec2 coord = vec2(cos(ang), sin(ang)) * scale;\n        \n        //mat2 r;\n        //r[0] = vec2(cos(iTime), sin(iTime));\n        //r[1] = vec2(sin(iTime), -cos(iTime));\n        \n        mat2 rConst;\n        rConst[0] = vec2(cos(1.83), sin(1.83));\n        rConst[1] = vec2(sin(1.83), -cos(1.83));\n        \n        coord *= rConst;\n        \n        vec2 p = fragCoord + coord + vec2(30. * iTime);\n        \n        vec2 pf = floor(p);\n        \n                \n        col += vec4(zoomNoise(p, scale));\n        \n        \n        \n    }\n    \n    col /= 9.;\n    \n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float hash3(vec2 xy){\n    xy = mod(xy, .19);\n    float h = dot(xy.yyx,vec3(.013, 27.15, 2027.3));\n    h *= h;\n    h *= fract(h);\n    \n    return fract(h);\n}\n","name":"Common","description":"","type":"common"}]}