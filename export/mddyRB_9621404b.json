{"ver":"0.1","info":{"id":"mddyRB","date":"1727594190","viewed":16,"name":"sdf Fan ","username":"Jatpeng","description":"sdf fan ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["piefan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// c is the sin/cos of the angle. r is the radius\n\nconst float angle = 90.0;\nconst float r = 1.0;\nconst vec2 screenuv = vec2(-1.0,1.0);\nconst float scale = 1.0;\nconst float andgleDir = 0.0;\n\nvec2 RotateVector(vec2 position, vec2 startVector, vec2 endVector)\n{\n    // 计算两个向量的单位向量\n    vec2 startUnit = normalize(startVector);\n    vec2 endUnit = normalize(endVector);\n\n    // 计算旋转角度\n    float dotProduct = dot(startUnit, endUnit);\n    float angle = acos(dotProduct);\n\n    // 判断旋转方向\n    float crossProduct = startUnit.x * endUnit.y - startUnit.y * endUnit.x;\n    if (crossProduct < 0.0)\n    {\n        angle = -angle;\n    }\n\n    // 构造旋转矩阵\n    mat2 rotationMatrix = mat2(\n        cos(angle), sin(angle),\n        -sin(angle), cos(angle)\n    );\n\n    // 应用旋转矩阵\n    vec2 rotatedPosition = rotationMatrix * position;\n\n    return rotatedPosition;\n}\n\n\n\nfloat sdPie( in vec2 p,float angle)\n{\n     float rad = radians(angle*0.5);\n\n     vec2 c = vec2(sin(rad), cos(rad));\n \n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float dotpc = dot(p, c);\n    float clampdotpc = clamp(dotpc, 0.0, r);\n    float m = length(p - c * clampdotpc);\n    float signpc = sign(p.x * c.y - p.y * c.x);\n    return max(l, m * signpc);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p =(fragCoord/iResolution.xy);;\n     p = p*2.0-vec2(1.0,1.0);\n    \n    \n    vec2 dir = vec2(sin(radians(andgleDir)),cos(radians(andgleDir)));\n    vec2 pieDir = normalize(dir)*scale; \n    \n    if (iResolution.x > iResolution.y) {\n        p.x *= iResolution.x / iResolution.y;\n    } else {\n        p.y *= iResolution.y / iResolution.x;\n    }\n    \n    //屏幕横纵比\n    float screenscale = iResolution.x/iResolution.y;\n    \n    \n    //默认的朝向是vec2(1.0,0.0)\n    \n    vec2 piePos = (screenuv)*scale;\n    \n    piePos = RotateVector(piePos,vec2(1.0,0.0),pieDir);\n\n    vec2 rotatedP = vec2(\n        pieDir.x * p.x - pieDir.y * p.y,\n        pieDir.y * p.x + pieDir.x * p.y\n    );\n\n    // translate point to pie position\n    vec2 translatedP = (rotatedP - piePos);    \n    // distance\n    float d = sdPie(translatedP,angle);\n    d = smoothstep(0.0,0.5,d);\n\n    fragColor = vec4(d);   \n   // fragColor = vec4(p,0.0,1.0);\n\n\n}","name":"Image","description":"","type":"image"}]}