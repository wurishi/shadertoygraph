{"ver":"0.1","info":{"id":"lsKGzc","date":"1518521251","viewed":59,"name":"Accelerating Jacobi","username":"knighty","description":"Simplified Chebyshev convergence acceleration method for jacobi iteraion.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["chebyshev","jacobi","laplace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getData(ivec2 uv){return texture(iChannel0, (vec2(uv)+vec2(0.5))/iResolution.xy);}\nvec4 getData1(ivec2 uv){return texture(iChannel1, (vec2(uv)+vec2(0.5))/iResolution.xy);}\n\nvec3 hsv2rgb(vec3 hsv) {\n    return mix(vec3(1.),\n               clamp((abs(fract(vec3(hsv.x)+vec3(1.,2./3.,1./3.))*6.-3.)-1.),0.,1.),\n               hsv.y)\n           * hsv.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    ivec2 iuv = ivec2(fragCoord);\n    vec4 data = getData(iuv);\n    vec4 data1 = getData1(iuv);\n    float x = uv.x < 0.5 ? data.x : data.y;\n    float x1 = uv.x < 0.5 ? data1.x : data1.y;\n    x1 = 100.*abs(x1-x);\n    vec3 col = hsv2rgb(vec3(x,1.,pow(x,0.1)));\n    vec3 col1 = hsv2rgb(vec3(x1,1.,pow(x1,.1)));\n\tfragColor = uv.y > 0.5 ? vec4(col,1.0) : vec4(col1,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 getData(ivec2 uv){return texture(iChannel0, (vec2(uv)+vec2(0.5))/iResolution.xy);}\nvec4 getData1(ivec2 uv){return texture(iChannel1, (vec2(uv)+vec2(0.5))/iResolution.xy);}\n\nvec3 compNeighbours(ivec2 uv){\n    vec3 n = getData(uv+ivec2(0,1)).xyz;\n    vec3 s = getData(uv-ivec2(0,1)).xyz;\n    vec3 w = getData(uv+ivec2(1,0)).xyz;\n    vec3 e = getData(uv-ivec2(1,0)).xyz;\n    return n+s+e+w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(0.0,0.0,0.0,0.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    if(iFrame == 0 || iMouse.z>0.){\n        if(length(fragCoord - 0.5 * iResolution.xy) < 10.) fragColor = vec4(1.);\n        else if(fragCoord.x < 1. || fragCoord.y < 1. ||\n           fragCoord.x+1. > iResolution.x || fragCoord.y+1. > iResolution.y)\n            fragColor = vec4(0.5*vec3(sin(40.*uv.x+20.*uv.y)+1.),1.);\n        else fragColor = vec4(0.5,0.5,0.5,0.);\n        return;\n    }\n    ivec2 iuv = ivec2(fragCoord);\n    fragColor = getData1(iuv);\n    if(fragColor.w == 1.) return;\n    vec3 NSum = compNeighbours(iuv);\n    float w = 1.98;\n    fragColor.x = (1.-w) * fragColor.x + w * NSum.x * 0.25;\n    fragColor.y = NSum.y * 0.25;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 getData(ivec2 uv){return texture(iChannel0, (vec2(uv)+vec2(0.5))/iResolution.xy);}\nvec4 getData1(ivec2 uv){return texture(iChannel1, (vec2(uv)+vec2(0.5))/iResolution.xy);}\n\nvec3 compNeighbours(ivec2 uv){\n    vec3 n = getData(uv+ivec2(0,1)).xyz;\n    vec3 s = getData(uv-ivec2(0,1)).xyz;\n    vec3 w = getData(uv+ivec2(1,0)).xyz;\n    vec3 e = getData(uv-ivec2(1,0)).xyz;\n    return n+s+e+w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(0.0,0.0,0.0,0.0);\n    vec2 uv = fragCoord / iResolution.xy;\n    if(iFrame == 0 || iMouse.z>0.){\n        if(length(fragCoord - 0.5 * iResolution.xy) < 10.) fragColor = vec4(1.);\n        else if(fragCoord.x < 1. || fragCoord.y < 1. ||\n           fragCoord.x+1. > iResolution.x || fragCoord.y+1. > iResolution.y)\n            fragColor = vec4(0.5*vec3(sin(40.*uv.x+20.*uv.y)+1.),1.);\n        else fragColor = vec4(0.5,0.5,0.5,0.);\n        return;\n    }\n    ivec2 iuv = ivec2(fragCoord);\n    fragColor = getData1(iuv);\n    if(fragColor.w == 1.) return;\n    vec3 NSum = compNeighbours(iuv);\n    float w = 1.98;\n    fragColor.x = (1.-w) * fragColor.x + w * NSum.x * 0.25;\n    fragColor.y = NSum.y * 0.25;\n}","name":"Buffer B","description":"","type":"buffer"}]}