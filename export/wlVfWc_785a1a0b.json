{"ver":"0.1","info":{"id":"wlVfWc","date":"1616140193","viewed":91,"name":"Tableau, Piet Mondrian","username":"medyakovvit","description":"Implementation of Piet Mondrian - Tableau picture from article \"Shapes\" in The Book of Shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["thebookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Colors\nconst vec4 kBeigeColor = vec4(.957, .957, .859, 1.);\nconst vec4 kRedColor = vec4(.71875, .137, .144, 1.);\nconst vec4 kBlueColor = vec4(0., .371, .609, 1.);\nconst vec4 kYellowColor = vec4(1., .789, .195, 1.);\nconst vec4 kBlackColor = vec4(0.);\n\n// Rectangles in form (top, left, width, height)\nconst vec4 kBeigeRect = vec4(0., 1., 1., 1.);\nconst vec4 kRedRect = vec4(0., 1., 0.215, 0.353);\nconst vec4 kBlueRect = vec4(1. - .24, .078, .24, .078);\nconst vec4 kYellowRect = vec4(1. - .029, 1., .029, .353);\n\n// Other\nconst float pictureRatio = .85; // width / height\nconst float kBlackLineWidth = 0.02;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 color = vec4(0.0);\n    vec2 pictureSize = vec2(0., 0.);\n    \n    float viewRatio = iResolution.x / iResolution.y;\n    pictureSize = viewRatio > 1. ?\n                                    vec2(iResolution.y * pictureRatio, iResolution.y) :\n                                    vec2(iResolution.x, iResolution.x * 1. / pictureRatio);\n    // Move picture to center of the view and origin to\n    // bottom left corner of the picture\n    uv -= (iResolution.xy - pictureSize) * .5 / iResolution.xy;\n    \n    // Scale coordinates so point(0, 0) - it's bl corner of the picture and\n    // point(1, 1) - top left corner of the picture.\n    uv *= iResolution.xy / pictureSize;\n    \n    // Background\n    color = Rectangle(kBeigeRect.xy, kBeigeRect.zw, kBeigeColor, uv, color);\n    \n    // Colored rectangles\n    color = Rectangle(kRedRect.xy, kRedRect.zw, kRedColor, uv, color);\n    color = Rectangle(kBlueRect.xy, kBlueRect.zw, kBlueColor, uv, color);\n    color = Rectangle(kYellowRect.xy, kYellowRect.zw, kYellowColor, uv, color);\n    \n    // Vertical black lines\n    color = Rectangle(vec2(kRedRect.x + 0.07, 1.), vec2(kBlackLineWidth, kRedRect.w), kBlackColor, uv, color);\n    color = Rectangle(vec2(kRedRect.x + kRedRect.z, 1.), vec2(kBlackLineWidth, 1.), kBlackColor, uv, color);\n    color = Rectangle(vec2(kBlueRect.x - kBlackLineWidth, 1.), vec2(kBlackLineWidth, 1.), kBlackColor, uv, color);\n    color = Rectangle(vec2(kYellowRect.x - kBlackLineWidth, 1.), vec2(kBlackLineWidth, 1.), kBlackColor, uv, color);\n    \n    // Horizontal black lines\n    color = Rectangle(vec2(kRedRect.x, kRedRect.y - 0.16), vec2(1., kBlackLineWidth), kBlackColor, uv, color);\n    color = Rectangle(vec2(kRedRect.x, kRedRect.y - kRedRect.w), vec2(1., kBlackLineWidth), kBlackColor, uv, color);\n    color = Rectangle(vec2(0., kBlueRect.y + kBlackLineWidth), vec2(1., kBlackLineWidth), kBlackColor, uv, color);\n\n    // Output to screen\n    fragColor = vec4(color);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 Rectangle(vec2 topLeft, vec2 size, vec4 targetColor, vec2 uv, vec4 fragColor)\n{\n    const vec2 d = vec2(.001);\n    vec2 bl = vec2(topLeft.x, topLeft.y - size.y);\n    vec2 tr = vec2(topLeft.x + size.x, topLeft.y);\n    \n    vec2 t = smoothstep(bl - d, bl + d, uv) -\n    smoothstep(tr - d, tr + d, uv);\n    \n    float v = t.x * t.y;\n    \n    return mix(fragColor, targetColor, v);\n}","name":"Common","description":"","type":"common"}]}