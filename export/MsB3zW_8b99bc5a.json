{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"vec2 UNIT_VECTOR;\nvec2 UNIT_VECTOR_ASPECT;\n\nfloat drawEq();\nfloat drawFlare(float intensity);\nfloat drawDistortedRing(float radius0, float sharpness);\nfloat drawRing(float radius0, float sharpness);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tUNIT_VECTOR = vec2(fragCoord.x/iResolution.x, fragCoord.y / iResolution.y);\n\tUNIT_VECTOR_ASPECT = vec2(UNIT_VECTOR.x * iResolution.x/iResolution.y - (iResolution.x - iResolution.y)/iResolution.x, UNIT_VECTOR.y);\n\n\tvec4 baseColor = vec4(0.1, 0.5 * sin(UNIT_VECTOR.x) * 0.3, 0.55 + 0.25 * sin(iTime * 0.5), 1.0);\n\tvec4 eqColor = vec4(0.2 + 0.5 * sin(UNIT_VECTOR.x) * sin(iTime * 0.334), 0.2 + 0.3 * cos(iTime * 0.434), 0.2, 1.0);\n\t\n\t// EQ bands.\n\tfloat bandIntensity0 = texture(iChannel0, vec2(0.25, 0.15)).x;\n\tfloat bandIntensity1 = texture(iChannel0, vec2(0.35, 0.0)).x;\n\tfloat bandIntensity2 = texture(iChannel0, vec2(0.65, 0.45)).x;\n\tfloat bandIntensity3 = texture(iChannel0, vec2(0.15, 0.0)).x;\n\t\n\tconst vec4 bandTint0 = vec4(0.8, 0.5, 0.9, 1.0);\n\tconst vec4 bandTint2 = vec4(0.4, 0.5, 0.9, 1.0);\n\t\n\tfloat eq = 0.5 + drawEq() * 0.5;\n\t\n\tfragColor =\n\t\t// Base background color.\n\t\tbaseColor * 0.7\n\t\t\n\t\t// EQ and color.\n\t\t+ vec4(eq / 2.0, eq / 3.0, eq, 0.0) * eqColor\n\t\t\n\t\t// Flare.\n\t\t+ drawFlare((bandIntensity1 + bandIntensity2) / 2.0)\n\t\t\n\t\t// Reverse flare, which becomes a circular shadow.\n\t\t- (1.0 - drawFlare(bandIntensity0 + bandIntensity1 + bandIntensity2 + bandIntensity3)) * 0.03\n\t\t\n\t\t// Rings.\n\t\t+ drawRing(0.50 * bandIntensity0, 0.005) * 0.75 * bandIntensity0 * bandTint0\n\t\t+ drawDistortedRing(0.40 * bandIntensity1, 0.05) * 0.45 * bandIntensity1\n\t\t+ drawRing(0.30 * bandIntensity2, 0.005) * 0.65 * bandIntensity2 * bandTint2\n\t\t+ drawDistortedRing(0.50 * bandIntensity3, 0.20) * 0.20 * bandIntensity3;\n}\n\nfloat drawEq() {\n\tfloat x = texture(iChannel0, vec2(UNIT_VECTOR.x, 0.0)).x;\n\tfloat y = UNIT_VECTOR.y - 1.337;\n\t\n\tfloat intensity = cos(x) + y;\n\tintensity /= 0.001;\n\t\n\tintensity = 1.0 - intensity;\n\treturn clamp(intensity, 0.0, 1.0);\n}\n\nfloat drawFlare(float intensity) {\n\treturn smoothstep(0.3, 1.0, (1.0 - distance(UNIT_VECTOR_ASPECT, vec2(0.5, 0.5))) * intensity);\t\n}\n\nfloat drawDistortedRing(float radius0, float sharpness) {\n\n\tconst float RING_THICKNESS = 0.015;\n\tfloat radius1 = radius0 - RING_THICKNESS;\n\t\n\tfloat a = atan(UNIT_VECTOR_ASPECT.x - 0.5, UNIT_VECTOR_ASPECT.y - 0.5);\n\ta = sin(a);\n\t\n\tfloat d = distance(UNIT_VECTOR_ASPECT, vec2(0.5));\n\tvec4 tv = texture(iChannel0, vec2(a*a, 0.0));\n\tfloat at = (sin(tv.x) + cos(tv.y)) / 2.0;\n\treturn smoothstep(radius0 + sharpness, radius0, d * at)\n\t\t * smoothstep(radius1 - sharpness, radius1, d * at);\n}\n\nfloat drawRing(float radius0, float sharpness) {\n\n\tconst float RING_THICKNESS = 0.010;\n\tfloat radius1 = radius0 - RING_THICKNESS;\n\t\n\tfloat d = distance(UNIT_VECTOR_ASPECT, vec2(0.5));\n\treturn smoothstep(radius0 + sharpness, radius0, d)\n\t\t * smoothstep(radius1 - sharpness, radius1, d);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsB3zW","date":"1384376880","viewed":794,"name":"Explosive Equalizer","username":"epal","description":"I basically set off wanting to make some kind of cool-looking EQ as one of my first projects. This is what I came up with. Most likely requiring more GPU than should be necessary. I may clean it up later.\n\nAny suggestions? :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","equalizer"],"hasliked":0,"parentid":"","parentname":""}}