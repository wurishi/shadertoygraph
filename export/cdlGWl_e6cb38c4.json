{"ver":"0.1","info":{"id":"cdlGWl","date":"1667059275","viewed":128,"name":"Little Bot","username":"Mortalsky","description":"Appling Raymarching basic techniques to create a basic shape robot.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tech","shapes","platform","basicshapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A test shader for practice\n// Use of raymarch techniques to create shape little bot :)\n// In setup:\n// 1. Bling phong lighting model source\n// 2. Camera\n// 3. Various shapes\n\n// For little interaction added roation of camera using mouse\n\n#define MaxSteps 100\n#define MaxDistance 100.\n#define SurfDistance .001\n\n// Rotation matrix\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Union interaction with smooth edge---k : edge radius\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// Capsule function---a : 1 point---b : 2 point---r : radius\nfloat Capsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\n// Cylinder Function---a : 1 point---b : 2 point---r : radius\nfloat Cylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\n// Torus function--- r : ( major radius, minor radius ) \nfloat Torus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\n// Cuboid Function---a : for position---s : for scale \nfloat Box(vec3 p, vec3 a, vec3 s) {\n    p = abs(p - a)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nvoid SetObject(vec3 p, out float Object[21], out float d, out float Base)\n{\n    // ground plane\n    Object[1] = p.y;\n    \n    \n    // Adding base\n    Object[2]= Cylinder( p, vec3(0, 0, 0), vec3(0, 0.1, 0), 5.);\n    Object[3]= Cylinder( p, vec3(0, 0, 0), vec3(0, 0.2, 0), 4.5);\n    Object[4]= Cylinder( p, vec3(0, 0, 0), vec3(0, 0.2, 0), 3.5);\n   \n    d = max(Object[1], d);\n    \n    d = min(Object[2], d);\n    d = max(-Object[3], d);\n    d = min(Object[4], d);\n    \n    Base = d;\n    \n    //center sphere\n    vec4 s1 = vec4(0,2,0,2); // Main body cordinates\n    \n    Object[5] = length(p - s1.xyz) - s1.w;\n    \n    // Eyes and mouth\n    vec4 eye1 = vec4(-1.8,2.4,-0.5,0.2);\n    vec4 eye2 = vec4(-1.8,2.4,0.5,0.2);\n    \n    vec4 mouth = vec4(-2.2,1.6,0,0.6);\n    \n    Object[6] = length(p - eye1.xyz) - eye1.w;\n    Object[7]= length(p - eye2.xyz) - eye2.w;\n    \n    Object[8] = length(p - mouth.xyz) - mouth.w;\n    \n    Object[9] = Torus(p - vec3(0, 3.8, 0), vec2(1, 0.1)); // Head ring \n    \n    // Hands\n    Object[10] = Capsule( p, vec3(0, 2, 2), vec3(0, 1.6, 2.5), 0.3);\n    Object[11] = Capsule( p, vec3(0, 2, -2), vec3(0, 1.6, -2.5), 0.3);\n    \n    vec4 wristR = vec4(0,1.5,-2.6,0.4);\n    vec4 wristL= vec4(0,1.5,2.6,0.4);\n    \n    Object[12] = length(p - wristL.xyz) - wristL.w;\n    Object[13] = length(p - wristR.xyz) - wristR.w;\n        \n    // Side Design   \n    Object[14] = Cylinder( p, vec3(1.2, 0.7, 1), vec3(1, 0.7, 1.3), 0.7);\n    Object[15] = Cylinder( p, vec3(1.2, 0.7, -1), vec3(1, 0.7, -1.3), 0.7);\n    Object[16] = Cylinder( p, vec3(-1.2, 0.7, 1), vec3(-1, 0.7, 1.3), 0.7);\n    Object[17] = Cylinder( p, vec3(-1.2, 0.7, -1), vec3(-1, 0.7, -1.3), 0.7);\n    \n    // Backpack \n    Object[18] = Box(p, vec3(2, 2.5, 0), vec3(.2,.5,.6)); // Pack\n    Object[19] = Cylinder( p, vec3(2, 2, 0.2), vec3(2, 4.5, 0.2), 0.1); // Antenna\n    Object[20] = Capsule( p, vec3(1.8, 4.5, 0.2), vec3(2.2, 4.5, 0.2), 0.2); //antenna head\n   \n   \n    // Adding to viewport\n    d = min(Object[5], d);\n    \n    d = min(Object[6], d);\n    d = min(Object[7], d);\n    \n    d = max(-Object[8], d);\n    \n    d = min(Object[10], d);\n    d = min(Object[11], d);\n    \n    d = min(Object[12], d);\n    d = min(Object[13], d);\n    \n    d = min(Object[9], d);\n    \n    d = min(d, Object[18]);\n    d = min(d, Object[19]);\n    d = min(d, Object[20]);\n    \n  \n    d = smin(Object[14], d, 0.3);\n    d = smin(Object[15], d, 0.3);\n    d = smin(Object[16], d, 0.3);\n    d = smin(Object[17], d, 0.3);\n}\n\n// Setup of viewport with distance calculation ;)\nfloat GetDist(vec3 p) {\n    \n    float Object[21];\n    float d = 0.;\n    float Base = 0.;\n    \n    SetObject(p, Object, d, Base);\n    \n    d = mix(d, Base, clamp(sin(iTime), 0., 1.));\n   \n    return d * .9;\n}\n\nvoid SetMat(out vec4 mat[21])\n{\n    //set material for each object as specified above\n    mat[1]=vec4(.0,1.,1.,1.);\n    \n    mat[2]=vec4(0.2,0.4,0.6,1.);\n    mat[3]=vec4(0.2,0.4,0.6,1.);\n    mat[4]=vec4(0.2,0.4,0.6,1.);\n    \n    mat[5]=vec4(1.,1.,0.,1.);\n    \n    mat[6]=vec4(0.2,0.2,0.2,1.);\n    mat[7]=vec4(0.2,0.2,0.2,1.);\n    \n    mat[8]=vec4(1.,0.,0.,1.);\n   \n    mat[9]=vec4(0.7,0.7,0.7,1.);\n    \n    mat[10]=vec4(0.5,0.5,0.25,1.);\n    mat[11]=vec4(0.5,0.5,0.25,1.);\n    \n    mat[12]=vec4(0.25,0.25,0.125,1.);\n    mat[13]=vec4(0.25,0.25,0.125,1.);\n\n    mat[14]=vec4(0.1,0.1,0.1,1.);\n    mat[15]=vec4(0.1,0.1,0.1,1.);\n    mat[16]=vec4(0.1,0.1,0.1,1.);\n    mat[17]=vec4(0.1,0.1,0.1,1.);\n    \n    mat[18]=vec4(0.2,0.1,0.3,1.);\n    mat[19]=vec4(0.3,0.6,0.8,1.);\n    mat[20]=vec4(0.1,0.5,0.2,1.);\n\n}\n\nvec4 GetMat(vec3 p)\n{\n    float Object[21];\n    float d = 0.;\n    float Base = 0.;\n    \n    SetObject(p, Object, d, Base);\n    \n    d = mix(d, Base, clamp(sin(iTime), 0., 1.));\n   \n    vec4 mat[21];\n    int i;\n    for(i=0;i<20;i++)\n    {\n        if( d == Object[i])\n        break;\n    }\n    \n    SetMat(mat);\n    \n    return mat[i]; \n}\n\n\n// Raymarch function\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MaxSteps; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = abs( GetDist(p) );\n        dO += dS;\n        // Adding limits\n        if(dO > MaxDistance || dS < SurfDistance) break;\n    }\n    \n    return dO;\n}\n\n// Function for normal \nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n// Setup light\nvec4 GetLight(vec3 p, vec3 rd, vec3 lp) {\n\n    vec4 col = vec4(1., 1., 1., 1.);\n    \n    vec3 lightPos = lp; // light position\n    \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    // Shadow calculation\n    float dif = clamp(dot(n, l) * 0.5, 0., 1.);\n    \n    float d = RayMarch(p+n*SurfDistance*2., l);\n    if(p.y<.01 && d<length(lightPos-p)) dif *= .1;\n    \n    vec3 v = normalize(rd*-1.);\n    vec3 r = reflect(-1.*l,n);\n    \n    // factor for specular lights\n    float spec = 0.7 * pow(max(dot(v,r),0.0),64.);\n    \n    // factor for ambient lights\n    float amb = 0.1;\n    \n    return (dif + spec + amb) * col;\n}\n\n// Function for camera rotation\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec4 col = vec4(0);\n    \n    vec3 ro = vec3(0, 2, -7); // Camera position\n    \n    ro.yz *= Rot(-m.y+.4); // Setup camera direction with intractive rotation \n    ro.xz *= Rot(iTime*.8-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,0,0), .7);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MaxDistance) \n    {\n    \tvec3 p = ro + rd * d;\n    \n        vec4 col = GetLight(p, rd, vec3(-3, 4, -5));\n        col += GetLight(p, rd, vec3(3, 4, 5));\n        \n        vec4 mat = GetMat(p);\n        \n        col = pow(col, vec4(.4545)); // gamma correction\n        \n        fragColor = mat*col;\n\n    }\n    else\n    fragColor  = vec4 ( vec3(0.), 1.0);\n}","name":"Image","description":"","type":"image"}]}