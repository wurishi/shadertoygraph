{"ver":"0.1","info":{"id":"dt2XD3","date":"1676721816","viewed":102,"name":"tan and cos pattern","username":"GeoffL","description":"Simple tan and cos calculations producing repeating patterns.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple","cos","mod","tan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    uv -= .5; //horizontal offset\n    uv.x *= iResolution.x/iResolution.y; //correct aspect ratio\n    float d = length(uv); //distance from origin\n    float s = 6.4; //scale (zoom)\n    \n    //red, green, blue intensity based on distance from origin, x and y \n    float r=abs(.8*tan(cos(s*uv.x*3.)+cos(s*uv.y*3.)));\n    float g=1.6*tan(cos(s*uv.x)+cos(s*uv.y));\n    float b=1.6-.8*tan(cos(s*uv.x)+cos(s*uv.y));\n    \n    //intensities beolw 0 all count as 0 and above 1 all count as 1\n    //modulo 1 intensities for the values 1 to 32\n    if (r>1.0 && r<32.) r=r-(1.*floor(r/1.));\n    if (g>1.0 && g<32.) g=g-(1.*floor(g/1.));\n    if (b>1.0 && b<32.) b=b-(1.*floor(b/1.));\n    \n      // Output to screen\n    fragColor = vec4(vec3(r,g,b),1.0);\n}","name":"Image","description":"","type":"image"}]}