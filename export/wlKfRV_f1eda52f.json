{"ver":"0.1","info":{"id":"wlKfRV","date":"1615059849","viewed":295,"name":"MyBasicRaymarcher","username":"cs","description":"Just a little exercise for the exam next week.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 eye = vec3(0,0,-4);\n\nfloat PI = 3.14;\n\nfloat planedist = 1.0;\n\nint MAX_STEPS = 1000;\n\nfloat timefac = 1.0;\n\nvec3 lightPos() {\n    return vec3(2.0*sin(timefac * iTime), sin(iTime * 10.0)* 0.2, -abs(2.0*cos(timefac * iTime)));\n}\n\nfloat sdf(vec3 pos) {\n    float radius = 0.5;\n    return min(min(length(pos - vec3(-.5,0,0)) - radius, \n        length(pos - vec3(.5,0,0)) - radius),\n        min(length(pos - vec3(0,.5,0)) - radius,\n        length(pos - vec3(0,-.5,0)) - radius));\n}\n\nvec3 calc_normal(vec3 pos) {\n    // Calculate partial derivatives\n    float dt = 0.00001;\n    \n    float dx = (sdf(pos + dt * vec3(1,0,0)));\n    float dx2 = (sdf(pos + dt * vec3(-1,0,0)));\n    \n    float dy = (sdf(pos + dt * vec3(0,1,0)));\n    float dy2 = (sdf(pos + dt * vec3(0,-1,0)));\n\n    float dz = (sdf(pos + dt * vec3(0,0,1)));\n    float dz2 = (sdf(pos + dt * vec3(0,0,-1)));\n    \n    // This gives us the gradient, a.k.a. where the sdf \n    \n    return normalize((vec3(dx, dy, dz) - vec3(dx2, dy2, dz2) - pos) / dt / 2.0);\n    \n}\n\nvec4 shade(vec3 pos, vec3 normal) {\n    vec3 light = lightPos();\n    vec3 L = normalize(light - pos);\n    vec3 V = normalize(eye - pos);\n    \n    float intensity = 2.0 / pow(length(light - pos),2.0);\n    \n    return intensity * dot(L, V) * vec4(1,0,0,0);\n}\n\nvec4 raymarch(vec3 ray) {\n    vec3 pos = eye;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        float sdfVal = sdf(pos);\n        pos = pos + ray * sdfVal;\n        \n        if (sdfVal < 1e-5) {\n        \n            vec3 normal = calc_normal(pos);\n            return shade(pos, normal);\n        }\n    }\n    \n    return vec4(0,0,0,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n\n    // Calculate rays\n    vec3 rayTarget = vec3(aspect* (uv.x - 0.5),uv.y - 0.5, eye.z + planedist);\n    \n    vec3 ray = normalize(rayTarget - eye);\n    \n    fragColor = raymarch(ray);\n    \n}\n\n\n\n","name":"Image","description":"","type":"image"}]}