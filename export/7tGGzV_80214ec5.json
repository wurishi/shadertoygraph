{"ver":"0.1","info":{"id":"7tGGzV","date":"1637992552","viewed":69,"name":"Mandelbrot Point Traps","username":"adamjmurray","description":"Colored using a moving point trap","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float MAX_ITERATIONS = 50.0;\nconst vec2 CENTER = vec2(-0.5, 0);\nconst float INFINITY = 10000000000.; // 1./0.; dividing by zero seems to give infinity in WebGL2 outside shadertoy\n\nvec3 hsl2rgb(float h, float s, float l) {\n  float hp = 6. * mod(h,1.);\n  float c = s - s * abs(2.*l - 1.);\n  float x = c - c * abs(mod(hp,2.) - 1.);\n  float m = l - c/2.;\n  if      (hp <= 1.) return vec3(c,x,0) + m;\n  else if (hp <= 2.) return vec3(x,c,0) + m;\n  else if (hp <= 3.) return vec3(0,c,x) + m;\n  else if (hp <= 4.) return vec3(0,x,c) + m;\n  else if (hp <= 5.) return vec3(x,0,c) + m;\n  else               return vec3(c,0,x) + m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { \n    vec2 coord = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    vec2 z = vec2(0, 0);\n    vec2 c = coord + CENTER;\n     \n    vec2 trap = vec2(\n      sin(iTime/1.3),\n      sin(iTime/1.7)\n    );    \n    float trapDistance = INFINITY;\n\n    float i = 0.0;\n    while (i < MAX_ITERATIONS) { \n      z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;\n\n      trapDistance = min(trapDistance, length(z - trap));\n      \n      if (length(z) > 4.) break;\n      i++;\n    }\n\n    if (i >= MAX_ITERATIONS) {\n      fragColor = vec4(0,0,0,1);      \n    } \n    else {  \n      float escapeSpeed = (i - log2(log(length(z)))) / MAX_ITERATIONS;\n      float trapDistance = min(trapDistance, 1.);\n      fragColor = vec4(\n        hsl2rgb(\n          escapeSpeed + iTime/10.,          \n          .7,\n          1. - trapDistance\n        ),\n        1\n      );     \n    }\n}","name":"Image","description":"","type":"image"}]}