{"ver":"0.1","info":{"id":"XsBfD1","date":"1500219800","viewed":1651,"name":"Onyx Flames","username":"Vihess","description":"Status: Awaiting optimisation for high resolutions\nIf i had to give a sentence to describe what i've tried to achieve, i'd say \"Illusion of work\"","likes":36,"published":1,"flags":96,"usePreview":1,"tags":["mouse","sound","fft","interactive","flame","music","fire","color","audio","particles","glow","floor","dynamic","ground","ground","dark","input"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FX_CHANNEL iChannel0\n\n/*\n    REMINDER: The browser might prevent the music from playing thus preventing the shader to work\n    Reload the page and interact(click) on the WebGL player as soon as possible\n*/\n\nstruct frag {\n    vec2 uv;\n    vec4 c;\n    vec4 fx;\n};\n\nfrag gFrag;\n\nvoid drawGround()\n{\n    if (gFrag.uv.y >= GROUND_HEIGHT * 0.99)\n        return;\n    \n    gFrag.c *= 0.25;\n    \n    gFrag.c += vec4(0.5 / (40. * (GROUND_HEIGHT - gFrag.uv.y) + 1.6));\n    \n    const float \n        GSHW = (1. - GROUND_SPLIT_WIDTH) * 100.;\n    \n    float d = (GROUND_SPLIT_PREC - gFrag.uv.y * GROUND_SPLIT_CAM_COEF) / GSHW,\n        x = gFrag.uv.x - 0.5,\n        y = GROUND_HEIGHT * 1.1 - gFrag.uv.y;\n    \n    // I've got to get rid of this loop\n    for (float n = 1.5; n > 0.1; n /= (n > 1.) ? 4. : 2.)\n        if (abs(abs(n * x) - y) < d) {\n            gFrag.c += GROUND_SPLIT_COLOR;\n            return;\n        }\n    \n    if (sin(gFrag.uv.y * (GSHW * (1.2 - GROUND_HEIGHT)) * -log(0.6 - gFrag.uv.y) ) > 0.98 + gFrag.uv.y / 15.) \n        gFrag.c += GROUND_SPLIT_COLOR;\n}\n\nvoid drawFx()\n{\n    gFrag.c = gFrag.fx;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    gFrag.uv = fragCoord.xy / iResolution.xy;\n    gFrag.fx = texelFetch(FX_CHANNEL, ivec2(fragCoord), 0);\n    \n    drawFx();\n    \n    drawGround();\n    \n    gFrag.c.w = 1.;\n    fragColor = gFrag.c;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MtSXDz","filepath":"https://soundcloud.com/nocash00/24-nier-automata-ost-the-copied-city","previewfilepath":"https://soundcloud.com/nocash00/24-nier-automata-ost-the-copied-city","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    REMINDER: The browser might prevent the music from playing thus preventing the shader to work\n    Reload the page and interact(click) on the WebGL player as soon as possible\n    \n    Good songs for tests: \n    // Various precise frequency changes\n\thttps://soundcloud.com/fuckyourmacbook/zallex-synapse-full-album-320kb\n    https://soundcloud.com/ceren-topsakal/bonobo-kiara\n    https://soundcloud.com/mmomusic/archeage-solzreed-theme\n\thttps://soundcloud.com/kevuman/megaman-x4-cyber-peacock-stage-theme\n\thttps://soundcloud.com/blackmill/blackmill-rain-original-mix\n\n\t// Vocals\n    https://soundcloud.com/youdirtylittlejew/great-grey-wolf-sif-dark-souls\n\n    // Multiple frequencies simultaneously, focused:\n    https://soundcloud.com/jordyelsenor/doom-soundtrack\n\n    // Multiple frequencies simultaneously:\n    https://soundcloud.com/k-mastamasta/killing-floor-2-fit-for-a-better-king-bitter-end-instrumental\n*/\n\n#define FFT_BASE_COLOR vec3(0.25, 0.50, 1.)\n#define FFT_AUX_COLOR vec3(1)\n#define FFT_DAMP 60.\n#define FFT_THRESHOLD 0.0\n#define FFT_FTCH 0.2\n#define FFT_NORM_SMOOTH 0.1\n#define FFT_AMP 1.25\n\n#define FX_FLAME_DAMP 0.95\n\n#define CLAMP_MOUSE\n//#define PROACTIVE\n\n#define DRAW_PARTICLES\n#define PARTICLE_THRESHOLD 1.2\n#define PARTICLE_DECAY 0.99\n\n#define PI 3.14\n\n#define FX_CHANNEL iChannel1\n#define SND_CHANNEL iChannel0\n\nstruct frag {\n    vec2 uv;\n    vec2 xy;\n    vec4 c;\n    vec4 pc;\n};\n\nfrag gFrag;\n\n// defines or not ?\nfloat GetSndVal(in float idx, in float damp)\n{\n    return texture(SND_CHANNEL, vec2(idx, damp)).x;\n}\n\nvec4 LoadTexel(ivec2 xy)\n{\n\treturn texelFetch(FX_CHANNEL, xy, 0);\n}\n\nfloat GetSome(in vec2 xy)\n{\n    float noise = 1. + abs(cos(iTime * 200.) * 1.);\n    return length(\n        texelFetch(\n            iChannel2, \n            ivec2(xy * noise),\n            0\n        )\n    );\n}\n\nvoid getColor(out vec3 base, out vec3 aux)\n{\n    if (iMouse.z <= 0.)\n    {\n        base = FFT_BASE_COLOR;\n        aux = FFT_AUX_COLOR;\n    }\n    else\n    {\n        vec2 muv = iMouse.xy / iResolution.xy;\n\n        base = vec3(\n            sin((muv.x - 0.5) * PI),\n            sin(   muv.x      * PI),\n            sin((muv.x + 0.5) * PI)\n        );\n        aux = vec3(\n            sin((muv.y - 0.5) * PI),\n            sin(   muv.y      * PI),\n            sin((muv.y + 0.5) * PI)\n        );\n\n#ifdef CLAMP_MOUSE\n        base = clamp(base, 0., 1.);\n        aux = clamp(aux, 0., 1.);\n#else\n        base = (base / 2.) + 0.5;\n        aux = (aux / 2.) + 0.5;\n#endif\n    }\n}\n\nvoid drawFlames()\n{\n    float \n        x = abs(0.5 - gFrag.uv.x) * FX_FLAME_DAMP,\n        y = abs(GROUND_HEIGHT - gFrag.uv.y),\n        fft = GetSndVal(x, FFT_FTCH) * FFT_AMP;\n    \n    fft -= y;\n#ifdef PROACTIVE\n    fft *= (exp((fft - FFT_THRESHOLD) * (fft * 20.)) / FFT_DAMP) - (exp(0.) / FFT_DAMP);\n#else\n    fft *= (exp((fft - FFT_THRESHOLD) * 9.5) / FFT_DAMP) - (exp(0.) / FFT_DAMP);\n#endif\n    \n    fft *= 1. - x * 1.5;\n\n    vec3 baseColor, auxColor;\n    getColor(baseColor, auxColor);\n    \n    gFrag.c.rgb = baseColor * fft;\n    y *= 2. * (gFrag.uv.y > GROUND_HEIGHT ? 1. : GROUND_REFLECTION);\n    gFrag.c.rgb *= (y / (2.-(x * 1.)));\n    gFrag.c.rgb *= mix(gFrag.c.rgb, auxColor, y);\n}\n\nvoid drawParticles()\n{\n    // Update\n    if (gFrag.pc.w > 0.) {\n        gFrag.c.w = gFrag.pc.w * PARTICLE_DECAY;\n        gFrag.c.rgb += gFrag.pc.rgb * gFrag.c.w;\n    } else {\n        // Creation\n        float pMapVal;\n        if (gFrag.c.w == 0. \n            && length(gFrag.c.rgb) > 1. \n            && (pMapVal = GetSome(gFrag.xy)) > 1.7\n        )\n            gFrag.c.w = clamp(0., 1., pMapVal);\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    gFrag.xy = fragCoord.xy;\n    gFrag.uv = fragCoord.xy / iResolution.xy;\n    float yCoef = 1.5 + GetSome(gFrag.uv);\n    gFrag.pc = LoadTexel(\n        ivec2(\n        \tfragCoord.x, \n        \tfragCoord.y + yCoef * (gFrag.uv.y > GROUND_HEIGHT * 0.98 ? -1. : 1.)\n        )\n    );\n    \n    drawFlames();\n#ifdef DRAW_PARTICLES\n    drawParticles();\n#endif\n    \n    fragColor = gFrag.c;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14\n\n#define GROUND_HEIGHT 0.25\n#define GROUND_MARGIN 0.98\n#define GROUND_SPLIT_COLOR vec4(0.1)\n#define GROUND_REFLECTION 0.15\n\n#define GROUND_SPLIT_WIDTH 0.2\n#define GROUND_SPLIT_CAM_COEF 3.1\n#define GROUND_SPLIT_PREC 1.\n","name":"Common","description":"","type":"common"}]}