{"ver":"0.1","info":{"id":"tl23Dd","date":"1598990455","viewed":67,"name":"Ray Marching 001","username":"Konstantin84UKR","description":"Ray Marching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST  100.\n#define SURF_DIST 0.001\n\n\nfloat GetDist(vec3 p){\n\n   vec4 s = vec4(0,1,6,1);\n   float sphereDist = length(p-s.xyz)-s.w; \n   float planeDist = p.y;\n   \n   float d = min(sphereDist,planeDist);\n       \n   return d;    \n}\n\nvec3 GetNormal(vec3 p ){\n     \n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    vec3 n = d- vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    \n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++)   \n    {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        \n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    \n    }\n\n    return dO;    \n}\n\nfloat GetLight(vec3 p){\n   \n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime),cos(iTime)) * 2.;  \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    \n    float d =  RayMarch(p + n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p)) dif*=0.1;\n    \n    return dif;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0,0.1,0);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n   \n    float d = RayMarch(ro,rd);\n    vec3 p = ro+rd*d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif); \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}