{"ver":"0.1","info":{"id":"7tScRt","date":"1650513454","viewed":229,"name":"Glowing Thing","username":"sinvec","description":"Trying to make something interesting and simple :)","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["sdf","map","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 gl1 = vec3(0.);\nvec3 gl2 = vec3(0.);\nvec3 gl3 = vec3(0.);\nvec3 gl4 = vec3(0.);\n\nmat2 r2d(float a){\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat vma(vec3 v) {\n    return max(v.x, max(v.y, v.z));\n}\n\n// from hg_sdf\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vma(min(d, vec3(0)));\n}\n   \nvec2 de(vec3 p) {\n\n    float d = 0.;\n   \n    p.xz *= r2d(iTime * .5);\n    p.zy *= r2d(iTime * .5);\n    \n    vec3 q = p;\n    vec3 z = p;\n    \n    vec2 a = vec2(9999.);\n    vec2 b = vec2(9999.);\n    \n    float h = .5;\n    vec3 k = vec3(.2);\n    \n    a.x = max ( fBox(p, vec3(h + .18, h + .18, h + .18)), -length(p) + .8);\n    a.x = max ( a.x, -fBox(abs(p) - vec3( h, h, h), k));\n    \n    gl1+=(0.0004/(0.03+a.x*a.x))*vec3(0,1,1);\n    a.y = .5;\n    \n    b.x = fBox(abs(p) - vec3( h, h, h), k);\n    b.y = .3;\n    gl3+=(0.0004/(0.03+b.x*b.x))*vec3(0,1,0);\n    a = (a.x < b.x) ? a : b;\n\n    p = q;\n    p.xz *= r2d(iTime * 2.);\n    b.x = length(abs(p) - vec3(.5, 0., 0.)) - .2;\n    gl4+=(0.0004/(0.03+b.x*b.x))*vec3(0,0,1);\n    b.y = .3;\n    a = (a.x < b.x) ? a : b;\n    \n    p = q;\n    p.xy *= r2d(iTime * 2.);\n    b.x = length(abs(p) - vec3(0., .5, 0.)) - .2;\n    gl4+=(0.0004/(0.03+b.x*b.x))*vec3(0,0,1);\n    b.y = .5;\n    a = (a.x < b.x) ? a : b;\n    \n    return a;\n}\n\nconst vec2 e = vec2(.000035, -.000035);\nvec3 norm(vec3 po) {\n        return normalize(e.yyx*de(po+e.yyx).x + e.yxy*de(po+e.yxy).x +\n                         e.xyy*de(po+e.xyy).x + e.xxx*de(po+e.xxx).x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    float time = iTime * 2.;\n    \n    vec3 ro = vec3(0., 0., 7.);\n    vec3 ta = vec3(0.);\n    \n    vec3 vd = normalize(ta - ro);\n    vec3 ri = normalize(cross(vd, vec3(.0, 1., 0.)));\n    vec3 dw = normalize(cross(ri, vd));\n    vec3 rd = normalize(ri * uv.x + dw * uv.y + 3. * vd);\n    \n    float t = 0.;\n    vec2 h;\n    vec3 po = vec3(0.); \n    \n    for (int i = 0; i < 64; i++) {\n        po = ro + rd * t;   \n        h = de(po);\n        if (h.x < .001) {\n            if (h.y == .5) {\n                vec3 n = norm(po);\n                rd = reflect(rd, n);\n                ro = po + n * .01;\n                t = .0;\n            } else \n                if(h.y == .3)\n                    h.x = abs(h.x) + .001;\n        }\n        t += h.x;\n    }\n    \n    vec3 c = vec3(.1);\n\n    c += gl1 * .7;\n    c += gl2 * .9;\n    c += gl3 * .5;\n    c += gl4 * .9;\n    \n    fragColor = vec4(c, 1.); \n}","name":"Image","description":"","type":"image"}]}