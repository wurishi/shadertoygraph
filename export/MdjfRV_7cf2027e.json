{"ver":"0.1","info":{"id":"MdjfRV","date":"1501298444","viewed":438,"name":"Fringe Test","username":"Wunkolo","description":"Testing color fringe","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fringe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License\n// Copyright (c) 2017 Joseph W.\n// Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n// Creates a \"/\\\" curve between [0.0,1.0]\nfloat SpikeMap( float t )\n{\n    return 1.0 - abs(2.0 * t - 1.0);\n}\n\n// Remaps T into the domain [a,b] and returns [0.0,1.0]\n// Depending on where it lands within this range\nfloat Remap( float t, float a, float b )\n{\n    return clamp( (t-a) / (b-a) , 0.0, 1.0 );\n}\n\n// Makes a gradient of [ R | G | B ] mapped to [0.0,1.0]\n// Used to map RGB contribution \nvec4 RGBGradient( float t )\n{\n    float Low = step(t,0.5);\n    float High = 1.0 - Low;\n    float w = SpikeMap(Remap( t, 1.0/6.0, 5.0/6.0 ));\n\treturn vec4( Low, 1.0, High, 1.0) * vec4(1.0-w, w, 1.0-w, 1.0);\n}\n\n// Just a basic vignetting\nvec2 LensBuldge( vec2 Coord, vec2 Center, float Amount )\n{\n    vec2 CenterOff = Coord - Center;\n    float Distance = dot(CenterOff,CenterOff);\n    return CenterOff * Distance * Amount;\n}\n\nfloat BayerIndex( uvec2 FragPos )\n{\n    const uint indexMatrix4x4[16] = uint[](\n         0u,  8u,  2u, 10u,\n        12u,  4u, 14u,  6u,\n         3u, 11u,  1u,  9u,\n        15u,  7u, 13u,  5u\n    );\n\n    uvec2 MatrixPos = FragPos & uvec2(3, 3); // % 4\n    return float(indexMatrix4x4[MatrixPos.x | (MatrixPos.y << 2)]) / 15.0;\n}\n\nconst uint Iter = 9u;\nconst float IterStep = 1.0 / float(Iter);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 UV = fragCoord.xy / iResolution.xy;\n    vec2 Focus = iMouse.z > 0.0 ? (iMouse.xy / iResolution.xy) : vec2(0.5, 0.5);    \n    \n    float Bayer = BayerIndex(uvec2(fragCoord));\n    \n    vec4 AccumColor = vec4(0.0);\n    vec4 AccumSpectral = vec4(0.0);\n    \n    for( uint i = 0u; i < Iter; ++i )\n    {\n        float Phase = (float(i) / (float(Iter - 1u)))\n                    + mix(-IterStep, IterStep, Bayer) * 0.5;                \n\n        vec4 SpectrumContrib = RGBGradient( Phase );\n        AccumSpectral += SpectrumContrib;\n        vec2 FringeUV = LensBuldge( UV, Focus, Phase );\n        AccumColor += SpectrumContrib * texture(iChannel0, UV + FringeUV ); \n    }\n    \n\tfragColor = AccumColor / AccumSpectral;\n}","name":"Image","description":"","type":"image"}]}