{"ver":"0.1","info":{"id":"M3s3WH","date":"1707517354","viewed":76,"name":"shaded procedural brick","username":"ggoedert","description":"illuminated brick tutorial","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","brick","shaded"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BRICKWIDTH 0.25\n#define BRICKHEIGHT 0.08\n#define MORTARTHICKNESS 0.01\n#define BMWIDTH (BRICKWIDTH+MORTARTHICKNESS)\n#define BMHEIGHT (BRICKHEIGHT+MORTARTHICKNESS)\n#define MWF (MORTARTHICKNESS*0.5/BMWIDTH)\n#define MHF (MORTARTHICKNESS*0.5/BMHEIGHT)\n\nfloat Ka = 1.0;\nfloat Kd = 1.0;\nfloat Os = 1.0;\nvec3 Cbrick = vec3 (0.5, 0.15, 0.14);\nvec3 Cmortar = vec3 (0.5, 0.5, 0.5);\n\nvec3 light = vec3(0.57735, 0.57735, -0.57735);\n\nfloat ambient()\n{\n    return 0.3;\n}\n\nfloat diffuse(vec3 n)\n{\n    float off = 0.03;\n    return max(0.,dot(n,light)*.9)+off;\n}\n\nvoid brick_texel(inout float ss, inout float tt)\n{\n    float sbrick, tbrick;\n    float scoord = ss;\n    float tcoord = tt;\n    \n    ss = scoord / BMWIDTH;\n    tt = tcoord / BMHEIGHT;\n    \n    if (mod(tt*0.5,1.0) > 0.5)\n    ss += 0.5; /* shift alternate rows */\n    \n    sbrick = floor(ss); /* which brick? */\n    tbrick = floor(tt); /* which brick? */\n    ss -= sbrick;\n    tt -= tbrick;\n}\n\nfloat brick_height(inout float ss, inout float tt)\n{\n    brick_texel(ss, tt);\n\n    /* compute bump-mapping function for mortar grooves */\n    float sbump = smoothstep(0.0,MWF,ss) - smoothstep(1.0-MWF,1.0,ss);\n    float tbump = smoothstep(0.0,MHF,tt) - smoothstep(1.0-MHF,1.0,tt);\n    float stbump = sbump * tbump;\n    \n    return stbump;\n}\n\nvec3 calculatenormal(float s, float t)\n{\n    float ss, tt;\n    float delta = 0.001;\n    \n    ss = s; tt = t;\n    vec3 a=vec3(0.0, brick_height(ss, tt), 0.0);\n    ss = s+delta; tt = t;\n    vec3 b=vec3(delta, brick_height(ss, tt), 0.0);\n    ss = s; tt = t+delta;\n    vec3 c=vec3(0.0, brick_height(ss, tt), delta);\n    vec3 ab = normalize(b-a);\n    vec3 ac = normalize(c-a);\n    return cross(ac, ab);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2  uv = fragCoord     / iResolution.xy;\n    float AR = iResolution.x / iResolution.y;\n    float s = (uv.x-0.5)*AR+0.5;\n    float t = 1.0-uv.y;\n    \n    vec3 Ct;\n    float ss, tt, w, h;\n    \n    ss = s;\n    tt = t;\n    brick_texel(ss, tt);\n    \n    w = step(MWF,ss) - step(1.0-MWF,ss);\n    h = step(MHF,tt) - step(1.0-MHF,tt);\n    Ct = mix(Cmortar, Cbrick, w*h);\n    \n    vec3 Nf = normalize(calculatenormal(s, t));\n    vec3 Ci = Os * Ct * (Ka * ambient() + Kd * diffuse(Nf));\n\n    fragColor = vec4(Ci, 1.0);\n}","name":"Image","description":"","type":"image"}]}