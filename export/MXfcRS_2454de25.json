{"ver":"0.1","info":{"id":"MXfcRS","date":"1726309005","viewed":36,"name":"Exact Schwarz P surface 2","username":"Efim","description":"In this shader, an exact surface is built, using the technology of displaying an implicit surface, not SDF. Just like in here:\n[url]https://www.shadertoy.com/view/DlXXR2[/url]\n[url]https://www.shadertoy.com/view/lfSBzt[/url]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","implicit","schwarz","bisect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nExact Schwarz P surface\n\nraytracing,implicit,schwarz,bisect\n\nIn this shader, an exact surface is built, using the technology of displaying an implicit surface, not SDF. Just like in here:\n[url]https://www.shadertoy.com/view/DlXXR2[/url]\n[url]https://www.shadertoy.com/view/lfSBzt[/url]\n[url]https://www.shadertoy.com/view/Mf2fWV[/url]\n*/\n#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n#define nn 64.\n#define newton 5\n\nfloat dist_inf = 6.;\nconst float eps = 0.001;\n\nfloat sch(vec3 p) {\n    p *= 5. * PI;\n    return cos(p.x) + cos(p.y) + cos(p.z);\n}\n\nfloat lines(vec3 p) {\n    //return dist_inf;\n    if(abs(p.x) > 0.5 || abs(p.y) > 0.5)\n        return dist_inf;\n    float h = 1.1, r = 0.125, n = 5.;\n    p.xy = (p.xy + 1.) / 2.;\n    p.xy = fract(p.xy * n) - 0.5;\n    p.z -= clamp(p.z, -h, h);\n    return length(p) - r;\n}\n\nvec3 colx = vec3(0.7, 0. , 0.);\nvec3 coly = vec3(0., 0.7 , 0.);\nvec3 colz = vec3(0., 0., 0.7);\nvec3 col_axis = vec3(0.);\n//==================implicit map=====================\nfloat map(vec3 p, int model) {\n    if(model == 0)\n        return sch(p);\n    if(model == 1) {\n        \n        float t2 = lines(p);\n        float t = t2;\n        col_axis = colx;\n        \n        float t3 = lines(p.yzx);\n        if (t3 < t)\n        {\n            t = t3;\n            col_axis = coly;\n        }\n        float t4 = lines(p.xzy);\n        if (t4 < t)\n        {\n            t = t4;\n            col_axis = colz;\n        }\n        return t;\n    }\n}\n\nvec3 calcNormal(in vec3 p, int model) {\n    const float eps = 0.0001;\n    vec2 q = vec2(0.0, eps);\n    vec3 res = vec3(map(p + q.yxx, model) - map(p - q.yxx, model), map(p + q.xyx, model) - map(p - q.xyx, model), map(p + q.xxy, model) - map(p - q.xxy, model));\n    return normalize(res);\n}\n\n//https://iquilezles.org/articles/intersectors/\n// axis aligned box centered at the origin, with size boxSize\nvec2 boxIntersection(in vec3 ro, in vec3 rd, vec3 boxSize) {\n    vec3 m = 1.0 / rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m * ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m) * boxSize;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if(tN > tF || tF < 0.0)\n        return vec2(dist_inf); // no intersection\n\n    return vec2(tN, tF);\n}\n\nvec3 getPoint(vec3 a, vec3 b, float v0, float v1, int model) {\n    vec3 m;\n    //binary search with  n iterations, n = newton\n    for(int i = 0; i < newton; i++) {\n        m = (a + b) * 0.5;\n        float v = map(m, model);\n        if(v == 0.)\n            break;\n\n        if(sign(v) * sign(v0) <= 0.) {\n            v1 = v;\n            b = m;\n        } else {\n            v0 = v;\n            a = m;\n        }\n    }\n    return m;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n/*\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n*/\n\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float hh = 3.;\n\n    vec3 light = normalize(vec3(0.0, 1.0, -2.5)); //light\n    vec2 mo = 1.5 * cos(0.5 * iTime + vec2(0, 11));\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, hh); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y * 2.);\n    ro.xz *= rot(-mo.x - 1.57);\n\n    const float fl = 1.5; // focal length\n\n    vec3 bg = vec3(0.7, 0.7, 0.9) * 0.6; \n\n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = bg; // background  \n\n            vec3 pos_gl = vec3(1000.);\n            //===========================Render implicit=====================\n            //STEP 1. Calculating bounding box\n            int flInt = -1;\n            float dist = 1.0;\n\n            for(int model = 0; model < 2; model++) {\n                vec2 d2 = boxIntersection(ro, rd, vec3(dist * (float(model)/4. + 1.)));\n                if(d2[0] < dist_inf) {\n\n            /*\n            STEP 2.\n            ray tracing inside the bounding box, \n            searching for a segment with different signs of the function value \n            at the ends of the segment\n            */\n\n                    vec3 pos0 = ro + rd * d2[0];\n                    vec3 pos1 = ro + rd * d2[1];\n                    vec3 rd0 = pos1 - pos0;\n                    vec3 pos = pos0;\n                    float val0 = map(pos0, model);\n                    for(float i = 1.; i < nn; i++) {\n                        pos1 = pos0 + rd0 * i / (nn - 1.);\n                        float val1 = map(pos1, model);\n                        if(sign(val0) * sign(val1) <= 0.) {\n                    //different signs of the function value  at the ends of the segment\n                    //STEP 3. binary search to clarify the intersection of a ray with a surface.\n                            pos = getPoint(pos, pos1, val0, val1, model);\n                            if(length(pos - ro) < length(pos_gl - ro))\n                            {\n                                flInt = model;\n                                pos_gl = pos;\n                            }\n                            break;\n                        }\n                //if (sign(val1) < 0.) col = col2;\n                        val0 = val1;\n                        pos = pos1;\n                    }\n                }\n            }\n\n            //===================color====================================\n            if(flInt > -1) {\n                vec3 col1 = vec3(139. / 255., 0., 1.);\n                vec3 col2 = vec3(0.8, 0.5, 0.3);\n                vec3 col3 = vec3(1., 0., 0.);\n                col1 *= col1;\n                col2 *= col2;\n\n\n                vec3 nor = calcNormal(pos_gl, flInt);\n                if(flInt == 0)\n                    col = col2;\n                else\n                    col = col_axis;\n\n                if (dot(rd, nor) < 0.0 && flInt == 0)\n                    col *= col;\n\n            //  float ao = calculateAO(pos, nor); // Ambient occlusion, for self shadowing. \n\n                vec3 R = reflect(light, nor);\n                float specular = pow(max(abs(dot(R, rd)), 0.), 16.);\n                float difu = abs(dot(nor, light));\n                col = col * (clamp(difu, 0., 1.0) + 0.5) + vec3(1., .7, .4) * specular;\n                float fre = pow(clamp(dot(nor, rd) + 1., .0, 1.), 3.); // Fresnel, for some mild glow.\n                col += vec3(.1, .1, 0.1) * fre; //?\n                col = sqrt(col);\n            }\n            //===================color====================================\n            tot += col;\n        }\n    tot = tot / float(AA) / float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}