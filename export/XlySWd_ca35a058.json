{"ver":"0.1","info":{"id":"XlySWd","date":"1486342360","viewed":1057,"name":"Proton","username":"Nimajamin","description":"Music: https://soundcloud.com/ngc4244/breathe-and-do-shit\n\n(C) 2016-17 Intrepid & N-e-b-u-l-o-u-s","likes":19,"published":1,"flags":65,"usePreview":0,"tags":["raymarching","time","audio","gravity","soundcloud","proton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4djGzt","filepath":"https://soundcloud.com/ngc4244/breathe-and-do-shit","previewfilepath":"https://soundcloud.com/ngc4244/breathe-and-do-shit","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// [ \"Breathe\" ] - Nimajamin, iq & chronos 2017\n//\n\n// Ray-marching based on: \"[NV15] Space Curvature\" by iq\n    \n// Created by inigo quilez - iq/2015\n// Modified by benjamin hathaway - nimajamin/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//\n// Audio visualisation..\n//\n// - Modified version of the Soundcloud example by: chronos\n// - https://www.shadertoy.com/view/lsdGR8\n//\n\n//\n// Music: https://soundcloud.com/ngc4244/breathe-and-do-shit\n// \n// (C) 2016-17 Intrepid & N-e-b-u-l-o-u-s\n// All rights reserved\n//\n// [ ncg 4244 ]\n//\n\n#define speed1  \t\t\t0.0003330 \n#define K_MAX_DISTANCE\t\t200.0\n\nvec3 fancyCube( sampler2D sam, in vec3 d, in float s, in float b )\n{\n    vec3 colx = texture( sam, 0.5 + s*d.yz/d.x, b ).xyz;\n    vec3 coly = texture( sam, 0.5 + s*d.zx/d.y, b ).xyz;\n    vec3 colz = texture( sam, 0.5 + s*d.xy/d.z, b ).xyz;\n    \n    vec3 n = d*d;\n    \n    return (colx*n.x + coly*n.y + colz*n.z)/(n.x+n.y+n.z);\n}\n\n\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*43758.5453); }\n\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n        vec2  r = g - f + o;\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nfloat shpIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    \n    float b = dot( rd, oc );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    if( h>0.0 ) h = -b - sqrt( h );\n    return h;\n}\n\nfloat sphDistance( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float h = dot( oc, oc ) - b*b;\n    return sqrt( max(0.0,h)) - sph.w;\n}\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph, in float k )\n{\n    vec3 oc = sph.xyz - ro;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    return (b<0.0) ? 1.0 : 1.0 - smoothstep( 0.0, 1.0, k*h/b );\n}    \n   \n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return (pos - sph.xyz)/sph.w;    \n}\n\n//=======================================================\n\nvec3 background( in vec3 d, in vec3 l )\n{\n    vec3 col = vec3(0.0);\n         col += 0.5*pow( fancyCube( iChannel1, d, 0.05, 5.0 ).zyx, vec3(2.0) );\n         col += 0.2*pow( fancyCube( iChannel1, d, 0.10, 3.0 ).zyx, vec3(1.5) );\n         col += 0.8*vec3(0.80,0.5,0.6)*pow( fancyCube( iChannel1, d, 0.1, 0.0 ).xxx, vec3(6.0) );\n    float stars = smoothstep( 0.3, 0.7, fancyCube( iChannel2, d, 0.91, 0.0 ).x );\n\n    \n    vec3 n = abs(d);\n    n = n*n*n;\n    \n    vec2 vxy = voronoi( 50.0*d.xy );\n    vec2 vyz = voronoi( 50.0*d.yz );\n    vec2 vzx = voronoi( 50.0*d.zx );\n    vec2 r = (vyz*n.x + vzx*n.y + vxy*n.z) / (n.x+n.y+n.z);\n    col += 0.9 * stars * clamp(1.0-(3.0+r.y*5.0)*r.x,0.0,1.0);\n\n    col = 1.5*col - 0.2;\n // Green / Blue / Salmon Tint.. (Purple without!)  \n //   col += vec3(-0.05,0.1,0.0);\n\n    float s = clamp( dot(d,l), 0.0, 1.0 );\n    col += 0.4*pow(s,5.0)*vec3(1.0,0.7,0.6)*2.0;\n    col += 0.4*pow(s,64.0)*vec3(1.0,0.9,0.8)*2.0;\n    \n    return col;\n\n}\n\n//--------------------------------------------------------------------\n\nvec4 sph1 = vec4(  0.00, 0.00,  0.00, 1.0 );\nvec4 sph2 = vec4( -0.10, 0.00,  0.00, 0.015 );\nvec4 sph3 = vec4(  0.10, 0.00,  0.00, 0.015 );\nvec4 sph4 = vec4(  0.00, 0.00, -0.10, 0.03 );\n\nfloat rayTrace( in vec3 ro, in vec3 rd )\n{\n    return shpIntersect( ro, rd, sph1 );\n}\n\nfloat map( in vec3 pos, in float sample1 )\n{\n    vec2 delta = (pos.xz - sph1.xz);\n    vec2 r = delta;//mix( delta, fract(delta), sample1 );\n    float h = 1.0-2.0/(1.0 + 0.3*dot(r,r));\n    return pos.y - h;\n}\n\nfloat rayMarch( in vec3 ro, in vec3 rd, float tmax, in vec3 samples123 )\n{\n    float t = 0.0;\n    \n    // bounding plane\n    float h = (1.0-ro.y)/rd.y;\n    if( h>0.0 ) t=h;\n\n    // raymarch\n    for( int i=0; i<20; i++ )    \n    {        \n        vec3 pos = ro + t*rd;\n        float h = map( pos, samples123.x );\n        if( h<0.001 || t>tmax ) break;\n        t += h;\n    }\n    return t;    \n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec3 samples123, in vec3 spline )\n{\n    vec3 lig = normalize( vec3(1.0,0.2,1.0) );\n    vec3 col = background( rd, lig );\n    \n    // Raytrace stuff..\n    float t1 = shpIntersect( ro, rd, sph1 );\n    float t2 = shpIntersect( ro, rd, sph2 );\n    float t3 = shpIntersect( ro, rd, sph3 );\n    float t4 = shpIntersect( ro, rd, sph4 );\n\n    if ( t1>0.0 )\n    {\n        vec3 mat = vec3( 0.18 );\n        vec3 pos = ro + t1*rd;\n        vec3 nor = sphNormal( pos, sph1 );\n            \n        float am = 0.1*iTime;\n        vec2 pr = vec2( cos(am), sin(am) );\n        vec3 tnor = nor;\n        tnor.xz = mat2( pr.x, -pr.y, pr.y, pr.x ) * tnor.xz;\n\n        float am2 = 0.08*iTime - 1.0*(1.0-nor.y*nor.y);\n        pr = vec2( cos(am2), sin(am2) );\n        vec3 tnor2 = nor;\n        tnor2.xz = mat2( pr.x, -pr.y, pr.y, pr.x ) * tnor2.xz;\n\n        vec3 ref = reflect( rd, nor );\n        float fre = clamp( 1.0+dot( nor, rd ), 0.0 ,1.0 );\n\n        float dif = clamp( dot(nor, lig), 0.0, 1.0 );\n\n        col -= col * 0.6;\n        col += 0.6*fre*fre*vec3(0.9,0.9,1.0)*(0.3+0.7*dif);\n    }\n    \n    // Raymarch stuff..\n    float tmax = K_MAX_DISTANCE;\n    if ( t1>0.0 ) tmax = t1; \n    t1 = rayMarch( ro, rd, tmax, samples123 );    \n    if ( t1 < tmax )\n    {\n    \t\t//\n    \t\t// ! !! !!! - Time Warp the camera position using the audio freuency data..! :))\n    \t\t//\n    \t\tt1 += (0.9 + (0.1*samples123.x)) * samples123.z * 0.25;\n\n        \tvec3 pos = ro + t1 * rd;\n\n            vec2 scp = sin(2.0*6.2831*pos.xz);\n            \n            vec3 wir = vec3( 0.0 );\n        \n        \tfloat offset = samples123.z * (1.0 + (samples123.x * 3.0));\n        \n            wir += 1.00*exp(-12.0*offset*abs(scp.x));\n            wir += 1.00*exp(-12.0*offset*abs(scp.y));\n            wir += 0.50*exp( -4.0*offset*abs(scp.x));\n            wir += 0.50*exp( -4.0*offset*abs(scp.y));\n        \n        \twir += 1.00*exp(-12.0*(1.0-samples123.x)*2.0*abs(scp.x));\n          \twir += 1.00*exp(-12.0*(1.0-samples123.x)*2.0*abs(scp.y));\n          \twir += 0.50*exp( -4.0*(1.0-samples123.x)*2.0*abs(scp.x));\n          \twir += 0.50*exp( -4.0*(1.0-samples123.x)*2.0*abs(scp.y));\n\t\t\twir *= 0.5;\n        \n        \twir *= 0.2 + 1.0 * sphSoftShadow( pos, lig, sph1, 4.0 );\n    \n            col += wir * 0.5 * exp( -0.05 * t1 * t1 );\n    }        \n\n    // Main sphere...\n    if ( dot(rd,sph1.xyz-ro) > 0.0 )\n    {\n    \tfloat d = sphDistance( ro, rd, sph1 );\n    \tvec3 glo = vec3(0.0);\n    \tglo += vec3(0.6, 0.7, 1.0) * 0.3 * exp(  -2.0 * abs(d)) * step(0.0,d);\n    \tglo += 0.6 * vec3(0.6,0.7,1.0)*0.3*exp(  -8.0 * abs(d));\n    \tglo += 0.6 * vec3(0.8,0.9,1.0)*0.4*exp(-100.0 * abs(d));\n    \tcol += glo * 2.0 * ( samples123.y + samples123.x );\n        \n        // R U\n        if ( dot(rd,sph2.xyz-ro) > 0.0 )\n        {\n            float d = sphDistance( ro, rd, sph2 );\n            vec3 glo = vec3(0.0);\n            glo += vec3(0.6,0.7,1.0)*0.3*exp(-2.0*abs(d))*step(0.0,d);\n            glo += 0.6*vec3(0.6,0.7,1.0)*0.3*exp(-8.0*abs(d));\n            glo += 0.6*vec3(0.8,0.9,1.0)*0.4*exp(-100.0*abs(d));\n            col.x += glo.x*20.0*(samples123.x*(0.3+spline.x));\n        }        \n\n        // G U\n        if ( dot(rd,sph3.xyz-ro) > 0.0 )\n        {\n            float d = sphDistance( ro, rd, sph3 );\n            vec3 glo = vec3(0.0);\n            glo += vec3(0.6,0.7,1.0)*0.3*exp(-2.0*abs(d))*step(0.0,d);\n            glo += 0.6*vec3(0.6,0.7,1.0)*0.3*exp(-8.0*abs(d));\n            glo += 0.6*vec3(0.8,0.9,1.0)*0.4*exp(-100.0*abs(d));\n            col.y += glo.y*20.0*(samples123.x*(0.3+spline.y));\n        }        \n\n        // B D\n        if ( dot(rd,sph4.xyz-ro) > 0.0 )\n        {\n            float d = sphDistance( ro, rd, sph4 );\n            vec3 glo = vec3(0.0);\n            glo += vec3(0.6,0.7,1.0)*0.3*exp(-2.0*abs(d))*step(0.0,d);\n            glo += 0.6*vec3(0.6,0.7,1.0)*0.3*exp(-8.0*abs(d));\n            glo += 0.6*vec3(0.8,0.9,1.0)*0.4*exp(-100.0*abs(d));\n            col.z += glo.z*20.0*(samples123.y*spline.z);\n        }        \n    }        \n    \n    col *= smoothstep( 0.0, 6.0, iTime );\n\n    return col;\n}\n\nvec2 grid_metric( in vec3 ro, in vec3 rd, in vec3 samples123 )\n{\n    // raytrace stuff    \n    float t = rayTrace( ro, rd );\n\n    // raymarch stuff    \n    float tmax = K_MAX_DISTANCE;\n    if( t>0.0 ) tmax = t; \n    t = rayMarch( ro, rd, tmax, samples123 );    \n    if( t<tmax )\n    {\n      \tvec3 pos = ro + t*rd;\n\n        vec2 scp = ( sin( ( pos.xz * 0.1 ) + 0.0 ) + 0.5 ) * 1.0;\n\t    return scp;\n    }        \n\n    return vec2(0.0, 0.0);\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\n// RGB Eye response..\n\nconst vec3 deSatConst = vec3( 0.299, 0.587, 0.114 );\n\n// Audio sampling helper..\n\nfloat audio_freq( in sampler2D channel, in float f) { return texture( channel, vec2(f, 0.25) ).x; }\nfloat audio_ampl( in sampler2D channel, in float t) { return texture( channel, vec2(t, 0.75) ).x; }\n\n// Returns 3 B-spline functions of degree 2..\n\nvec3 B2_spline(vec3 x) \n{ \n    vec3 t = 3.0 * x;\n    vec3 b0 = step(0.0, t)     * step(0.0, 1.0-t);\n\tvec3 b1 = step(0.0, t-1.0) * step(0.0, 2.0-t);\n\tvec3 b2 = step(0.0, t-2.0) * step(0.0, 3.0-t);\n\treturn 0.5 * (\n    \tb0 * pow(t, vec3(2.0)) +\n    \tb1 * (-2.0*pow(t, vec3(2.0)) + 6.0*t - 3.0) + \n    \tb2 * pow(3.0-t,vec3(2.0))\n    );\n}\n\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy +2.0*fragCoord.xy) / iResolution.y;\n\n//    vec2 uv = p;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat time = iTime * speed1 + 0.25;\n\n    float zo = 1.0 + smoothstep( 5.0, 15.0, abs(iTime-48.0) );\n    float an = 3.0 + 0.05*iTime + 6.0*iMouse.x/iResolution.x;\n    vec3 ro = zo*vec3( 2.0*cos(an), 1.0, 2.0*sin(an) );\n    vec3 rt = vec3( 1.0, 0.0, 0.0 );\n    mat3 cam = setCamera( ro, rt, 0.35 );\n    vec3 rd = normalize( cam * vec3( p, -2.0) );\n    \n    uv = grid_metric( ro, rd, vec3(0.0) );\n    vec2 centered = 2.0 * uv - 1.0;\n    centered.x *= iResolution.x / iResolution.y;\n    float dist2 = dot(centered, centered);\n    float clamped_dist = smoothstep(0.0, 1.0, dist2);\n    float arclength    = abs(atan(centered.y, centered.x) / radians(360.0))+0.01;\n    vec2 fft = uv.xy;\n    fft -= 0.5;\n    fft *= 1.75;\n    fft.x *= iResolution.x / iResolution.y;\n    float sample1 = audio_freq(iChannel3, abs(2.0 * sqrt(dot(fft,fft)) - 1.0) + 0.01);\n    float sample2 = audio_ampl(iChannel3, clamped_dist);\n    float sample3 = audio_ampl(iChannel3, arclength);\n\n    sph1.w = sample2 * 0.3 + 0.707;\n    \n    uv = grid_metric( ro, rd, vec3( (sample1 + sample3 * 0.7 * sample1) * sample3 * 0.7, sample2, sample3 ) );\n   \n    centered = 2.0 * uv - 1.0;\n    centered.x *= iResolution.x / iResolution.y;\n    dist2 = dot(centered, centered);\n    clamped_dist = smoothstep(0.0, 1.0, dist2);\n    arclength    = abs(atan(centered.y, centered.x) / radians(360.0))+0.01;\n    \n    //\n    // Audio visualisation..\n    //\n\t// - Modified version of the Soundcloud example by: chronos\n\t// - https://www.shadertoy.com/view/lsdGR8\n    //\n    float t = iTime / 100.0;\n    float polychrome = (1.0 + sin(t*10.0))/2.0; // 0 -> uniform color, 1 -> full spectrum\n    vec3 spline_args = fract(vec3(polychrome*uv.x-t) + vec3(0.0, -1.0/3.0, -2.0/3.0));\n    vec3 spline = B2_spline(spline_args);\n    \n    float f = abs(centered.y);\n    vec3 base_color  = vec3(1.0, 1.0, 1.0) - f*spline;\n    vec3 flame_color = pow(base_color, vec3(3.0));\n    vec3 disc_color  = 0.20 * base_color;\n    vec3 wave_color  = 0.10 * base_color;\n    vec3 flash_color = 0.05 * base_color;\n    \n    fft    = uv.xy;\n    fft   -= 0.5;\n    fft   *= 1.75;\n    fft.x *= iResolution.x / iResolution.y;\n    \n    sample1 = audio_freq(iChannel3, abs(2.0 * sqrt(dot(fft,fft)) - 1.0) + 0.01);\n    sample2 = 0.6 * audio_ampl(iChannel3, clamped_dist);\n    sample3 = 0.6 * audio_ampl(iChannel3, arclength);\n    \n    float disp_dist = smoothstep(-0.2, -0.1, sample3-dist2);\n    disp_dist *= (1.0 - disp_dist);\n\t\n    vec3 color = vec3(0.0);\n    \n    // Quark Spline R G B..\n  \tvec3 s = smoothstep(-0.01, 0.01, spline-uv.y); \n    color += clamp((1.0-s) * s,0.0,1.0);\n  \t     s = smoothstep(-0.03, 0.03, spline-uv.y);\n    color += clamp((1.0-s) * s * 0.09,0.0,1.0);\n\n    float v = abs(uv.y - 0.5);\n  //  vec3 flame = flame_color * smoothstep(v, v*28.0, sample1);\n  //  color += clamp( flame, vec3(0.0,0.0,0.0), vec3(1.0,1.0,1.0) );\n    color += disc_color  * smoothstep(0.5, 1.0, sample2) * (1.0 - clamped_dist);\n    color += flash_color * smoothstep(0.5, 1.0, sample3) * clamped_dist;\n    color += wave_color  * disp_dist;\n    color = pow(clamp(color+0.0001,0.0,1.0), vec3(0.4545));\n\tvec3 sonicColor = color+ wave_color * 3.0;\n    \n    vec3 col = render( ro, rd, vec3( sample1, sample2, (1.0-disp_dist) + sample3 ), spline );\n    \n    vec2 q = fragCoord.xy / iResolution.xy;\n    col *= 0.2 + 0.8*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n//\tfragColor = vec4( col, 1.0 );\n\tfragColor = vec4( clamp(col + sonicColor.xyz,0.0,1.0), 1.0 );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    float zo = 1.0 + smoothstep( 5.0, 15.0, abs(iTime-48.0) );\n    float an = 3.0 + 0.05*iTime;\n    vec3 ro = zo*vec3( 2.0*cos(an), 1.0, 2.0*sin(an) );\n\n    vec3 rt = vec3( 1.0, 0.0, 0.0 );\n    mat3 cam = setCamera( ro, rt, 0.35 );\n    \n    fragColor = vec4( render( ro + cam*fragRayOri,\n                                   cam*fragRayDir,\n                            \t   vec3(0.0,0.0,0.0),\n                            \t   vec3(0.0,0.0,0.0) ), 1.0 );\n\n}","name":"Image","description":"","type":"image"}]}