{"ver":"0.1","info":{"id":"WlsyWj","date":"1593096905","viewed":125,"name":"Low Pattern","username":"Iranon","description":"A 2D Noise and fBM based pattern. Now with colors!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["pattern","theme","quads","2drandom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*The functions in this shader are based on the ones from 'The Book of Shaders'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(https://thebookofshaders.com/)*/\n\n\n\n//2D Random and Noise functions\n\nfloat rand(in vec2 sd) {\n    \n    return fract( sin( dot( sd.xy, vec2(18.128, 18.256) * 2964.512 ) ) );\n}\n\n\nfloat n2D(in vec2 sd) {\n    \n    vec2 iComp = floor(sd);\n    \t\t\t\t\t\t//integer and fractional components\n    vec2 fComp = fract(sd);\n    \n    \n    float a = rand(iComp + vec2(0.0, 0.0));\t//\n    float b = rand(iComp + vec2(1.0, 0.0));\t// interpolation points\n    float c = rand(iComp + vec2(0.0, 1.0));\t// (4 corners)\n    float d = rand(iComp + vec2(1.0, 1.0));\t//\n    \n    vec2 fac = pow(rand(fComp), 2.0) * smoothstep(0.0, 1.0, fComp);\t//interpolation factor\n    \n    //Quad corners interpolation\n    return\n        mix(a, b, fac.x) +\n        \n        \t(c - a) * fac.y * (1.0 - fac.x) +\n        \n        \t\t(d - b) * fac.x * fac.y ;\n}\n\n\n\n//fractal Brownian Motion\n\n#define OCTAVES 8\n\nfloat fBM(in vec2 sd) {\n    \n    //init values\n    float val = 0.0;\n    float freq = 1.6;\n    float amp = 0.6;\n    \n    float lacunarity = 2.0;\n    float gain = 0.4;\n    \n    //Octaves iterations\n    for(int i = 0; i < OCTAVES; i++) {\n        \n        val += amp * n2D(sd * freq);\n        \n        freq *= lacunarity;\n        amp *= gain;\n    }\n    \n    return val;\n}\n\n\n//========================================================================\n\n//main()\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    \n    vec3 col = vec3(0.0);\n    col += vec3(fBM(uv*8.0), fBM(uv*4.0), fBM(uv*2.0));\n\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}