{"ver":"0.1","info":{"id":"XtBSWt","date":"1447091739","viewed":1988,"name":"Starfield Math","username":"AstronautStr","description":"win95 screensaver cover :) \nthe goal was to recreate famous screensaver WITHOUT using ANY BUFFERS/structs for storing particles. only math)","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["procedural","math","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define M_2PI 6.28318530718\nvec2 polar(vec2 dPoint)\n{\n    return vec2(sqrt(dPoint.x * dPoint.x + dPoint.y * dPoint.y), atan(dPoint.y, dPoint.x));\n}\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 decart(vec2 pPoint)\n{\n    return vec2(pPoint.x * cos(pPoint.y), pPoint.x * sin(pPoint.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screen = iResolution.xy;\n    vec2 center = screen / 2.0;\n    vec2 frag = fragCoord.xy - center;\n    vec2 fragPolar = polar(frag);\n    float lenCenter = length(center);\n    \n\tconst float bandPass = 720.0;\n    const float angleDisp = M_2PI / (bandPass + 1.0);\n    \n    const float particlesCount = 200.0;\n    const float particleLifetime = 10.0;\n    const float particleMaxSize = 7.5;\n    float particleMaxSizeNorm = particleMaxSize / lenCenter;\n    \n    float globTime = iTime / particleLifetime;\n    float timeDelta = bandPass;\n    \n    const float polarRadiusClip = 0.05;\n    const float polarRadiusMax = 0.75;\n    float polarRadiusDelta = polarRadiusMax - polarRadiusClip; \n    \n    float presence = 0.0;\n    vec2 pPoint;\n    \n    for (float i = 0.0; i < particlesCount; i += 1.0)\n    {\n        float phase = i / particlesCount;\n        \n        float localTime = globTime + timeDelta * (2.0 * phase - 1.0) + phase;\n        float particleTime = fract(localTime);\n        float spaceTransform = pow(particleTime, 8.0);\n        \n        pPoint.x = lenCenter * ((polarRadiusClip + polarRadiusDelta * phase) + spaceTransform);\n        \n        // +30 FPS :)\n        if (abs(pPoint.x - fragPolar.x) > particleMaxSize) continue;\n        \n        pPoint.y = floor(particleTime + bandPass * rand(vec2(floor(localTime), 1))) * angleDisp;\n        \n        vec2 dPoint = decart(pPoint);        \n        float particleSize = particleMaxSize * spaceTransform;\n        float localPresence = particleSize * (1.0 - clamp(length(dPoint - frag), 0.0, 1.0));\n        presence += localPresence;\n    }\n    presence = clamp(presence, 0.0, 1.0);\n    fragColor = vec4(presence, presence, presence, 1.0);\n}","name":"","description":"","type":"image"}]}