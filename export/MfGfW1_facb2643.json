{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// -- DO NOT TOUCH --\n#define vScreenSize iResolution\n#define vTime iTime\n#define gl_FragCoord fragCoord\n#define gl_FragColor fragColor\n// -----------------\n\n// -- AUDIO --\n#define vEnergy 0.0\n#define vBpm 0.0\n#define vAudio0 0.0\n#define vAudio1 0.0\n#define vAudio2 0.0\n#define vAudio3 0.0\n#define vAudio4 0.0\n#define vAudio5 0.0\n#define vAudio6 0.0\n// -----------\n\n#define vOffset vec2(-0.0, 0.0);\n\n// CLIENT SIDE INPUT\n// All values vary in [0: 1] range\n\n\n#define vColorBackground vec3(0.0)\n\n#define vColorTop vec3(1.0, 0.86, 0.2)\n#define vColorMiddle vec3(1.0, 0.37, 0.0)\n#define vColorBottom vec3(0.9137, 0.0, 0.3843)\n\n#define vInteractionPoint vec2(0.0)\n#define vInteraction 0.0\n\n#define vReactTop 0.0\n#define vReactMiddle 0.0\n#define vReactBottom 0.0\n\n// -- TOP CIRCLE --\n#define TOP_CIRCLE_BLUR 0.0\n#define TOP_CIRCLE_RADIUS 0.7\n#define TOP_CIRCLE_WIDTH 0.2\n#define TOP_CIRCLE_SPEED 0.0\n// ----------------\n\n// -- MID CIRCLE --\n#define MIDDLE_CIRCLE_BLUR 1.0\n#define MIDDLE_CIRCLE_RADIUS 0.7\n#define MIDDLE_CIRCLE_WIDTH 0.4\n#define MIDDLE_CIRCLE_SPEED 1.57\n// ----------------\n\n// -- BOT CIRCLE --\n#define BOTTOM_CIRCLE_BLUR 1.0\n#define BOTTOM_CIRCLE_RADIUS 0.7\n#define BOTTOM_CIRCLE_WIDTH 0.5\n#define BOTTOM_CIRCLE_SPEED 3.14\n// ----------------\n\n// -- SPARK --\n#define SPARK_WIDTH 1.0\n// -----------\n\n// -- BOT SPARK --\n#define BOTTOM_SPARK_STRENGTH 0.4\n// ----------------\n\n// -- MID SPARK --\n#define MIDDLE_SPARK_STRENGTH 0.3\n// --------------\n\n// -- TOP SPARK --\n#define TOP_SPARK_STRENGTH 0.2\n// --------------\n\n#define CIRCLES_SPEED 2.0\n#define MAX_AUDIO_WIDTH_STRENGTH 0.15\n\nvec3 hash33(vec3 p3) {\n  p3 = fract(p3 * vec3(.1031,.11369,.13787));\n  p3 += dot(p3, p3.yxz+19.19);\n  return -1.0 + 2.0 * fract(vec3(p3.x+p3.y, p3.x+p3.z, p3.y+p3.z)*p3.zyx);\n}\n\nfloat snoise3(vec3 p) {\n  const float K1 = 0.333333333;\n  const float K2 = 0.166666667;\n\n  vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n  vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n  vec3 e = step(vec3(0.0), d0 - d0.yzx);\n  vec3 i1 = e * (1.0 - e.zxy);\n  vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n  vec3 d1 = d0 - (i1 - K2);\n  vec3 d2 = d0 - (i2 - K1);\n  vec3 d3 = d0 - 0.5;\n\n  vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n  vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n  return dot(vec4(31.316), n);\n}\n\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*20.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\n\nfloat triNoise3D(in vec3 p, in float spd)\n{\n  float z=0.4;\n  float rz = 0.1;\n  vec3 bp = p;\n  for (float i=0.; i<=4.; i++ )\n  {\n    vec3 dg = tri3(bp*0.01); // Increase the scale factor to make noise less frequent\n    p += (dg+vTime*.1*spd);\n\n    bp *= 4.; // Increase the scale factor\n    z *= 0.9;\n    p *= 1.6; // Increase the scale factor\n\n    rz+= (tri(p.z+tri(0.6*p.x+0.1*tri(p.y))))/z;\n  }\n  return smoothstep(0.0, 8., rz + sin(rz + sin(z) * 2.8) * 2.2);\n}\n\nvec2 rotate(vec2 p, float a) {\n  float s = sin(a);\n  float c = cos(a);\n  return vec2(p.x * c - p.y * s, p.x * s + p.y * c);\n}\n\nfloat angled(vec2 uv, float angle) {\n  uv = rotate(uv, angle);\n  float pr = length(uv);\n  float pa = atan(uv.y, uv.x);\n\n  float idx = (pa/3.1415 + 1.0) / 2.0;   // 0 to 1\n  float idx2 = idx * 3.1415;             // 0 to PI\n\n  return smoothstep(0.7, 1.0, sin(idx2));\n}\n\nfloat calcExtraWidth(vec2 uv,\n                     float strength1,\n                     float strength2,\n                     float speed) {\n  float extraWidth = 0.0;\n\n  extraWidth += smoothstep(0.0, 1.0, angled(uv, vTime * speed)) * (0.05 + MAX_AUDIO_WIDTH_STRENGTH) * strength1;\n  extraWidth += smoothstep(0.0, 1.0, angled(uv, vTime * -speed)) * (0.05 + MAX_AUDIO_WIDTH_STRENGTH) * strength2;\n\n  return extraWidth;\n}\n\nfloat light1(float intensity, float attenuation, float dist)\n{\n    return intensity / (1.0 + dist + dist * attenuation);\n}\n\nfloat light2(float intensity, float attenuation, float dist)\n{\n    return intensity / (1.0 + dist * attenuation);\n}\n\n\nfloat makeNoiseBlob(vec2 uv, float strength, float offset) {\n  float len = length(uv);\n  float n0 = snoise3(vec3(uv * 2., vTime * 0.1 + offset));\n  float r0 = mix(0.0, mix(0.0, 1.0, strength), n0);\n  float d0 = distance(uv, r0 / len * uv);\n  return d0;\n}\n\nfloat makeNoiseBlob1(vec2 uv, float radius, float offset) {\n  float len = length(uv);\n  float n0 = snoise3( vec3(uv * 1.2, vTime * 0.5 + offset));\n  float r0 = mix(radius, radius + 0.3, n0);\n  return r0;\n}\n\nvec4 makeNoiseBlob2(vec2 uv, vec3 color1, vec3 color2, float strength, float offset) {\n  float ang = atan(uv.y, uv.x);\n  float len = length(uv);\n  float v0, v1, cl;\n  float r0, d0, n0;\n  float r, d;\n\n  n0 = snoise3( vec3(uv * 1.2 + offset, vTime * 0.5 + offset) ) * 0.5 + 0.5;\n  r0 = mix(0.0, 1.0, n0);\n  d0 = distance(uv, r0 / len * uv);\n  v0 = smoothstep(r0 * (1.0) + 0.6 + sin(vTime + offset) * 0.5, r0, len);\n\n  float a = vTime * -1.0;\n  vec2 pos = vec2(cos(a), sin(a)) * r0;\n  d = distance(uv, pos);\n  v1 = light2(1.5, 10.0, d);\n  v1 = light1(0.15 * (1.0 + 1.5 * (-sin(vTime * 2. + offset * 0.5) * 0.5)) + 0.3 * strength, 10.0 , d0);\n\n  vec3 col = mix(color1, color2, uv.y * 2.);\n  col = col + v1;\n  col.rgb = clamp(col.rgb, 0.0, 1.0);\n  return vec4(col, v0);\n}\n\nvec4 makeBlob(vec2 uv,\n              vec3 color1,\n              vec3 color2,\n              float width,\n              float baseReaction,\n              float likeReaction,\n              float widthSpeed,\n              float audioWidthStrength1,\n              float audioWidthStrength2,\n              float radius,\n              float offset,\n              vec2 noiseOffset) {\n  float len = length(uv);\n  float speed = CIRCLES_SPEED;\n\n  float extraWidth = width + calcExtraWidth(uv, audioWidthStrength1, audioWidthStrength2, widthSpeed);\n\n  float blob = makeNoiseBlob1(uv * 1.2, radius, offset);\n\n  float outerRadius = blob + width * 0.5 + baseReaction * (1.0 + max(likeReaction, audioWidthStrength1 * 0.6) * 50. * baseReaction);\n\n  float interactionCircle = smoothstep(0.5, 0.0, abs(distance(vInteractionPoint, uv))) * vInteraction;\n  float strength = max(likeReaction, audioWidthStrength1) + 10. * interactionCircle;\n\n  vec4 noise = makeNoiseBlob2(uv * (1.0 - likeReaction * 0.5) + noiseOffset, color1, color2, strength, offset);\n  noise.a = mix(0.0, noise.a, smoothstep(outerRadius, 0.5, len));\n\n  float glow = 0.8 * likeReaction * (1.0 - smoothstep(0.2, outerRadius * 0.8, len));\n  noise.rgb += glow * 0.8;\n\n  return noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = gl_FragCoord.xy / vScreenSize.xy;\n  \n  uv = uv * 2.0 - 1.0;\n  uv.y *= vScreenSize.y / min(vScreenSize.x, vScreenSize.y);\n  uv.x *= vScreenSize.x / min(vScreenSize.x, vScreenSize.y);\n  uv += vOffset;\n\n  vec2 ruv = uv * 2.0;\n  float pr = length(ruv);\n  float pa = atan(ruv.y, ruv.x);\n\n  float idx = (pa/3.1415) / 2.0;   // 0 to 1\n  float idx2 = (pa/3.1415 + 1.0) / 2.0 * 3.1415; // 0 to PI\n\n  vec2 ruv1 = rotate(uv * 2.0, 3.1415);\n  float pr1 = length(ruv1);\n  float pa1 = atan(ruv1.y, ruv1.x);\n  float idx1 = (pa1/3.1415) / 2.0;   // 0 to 1\n  float idx21 = (pa1/3.1415 + 1.0) / 2.0 * 3.1415; // 0 to PI\n\n  float spark = triNoise3D(vec3(idx, 0.0, 0.0), 0.1);\n  spark = mix(spark, triNoise3D(vec3(idx1, 0.0, idx1), 0.1), smoothstep(0.9, 1.0, sin(idx21)));\n  spark = spark * 0.2 + pow(spark, 10.);\n  spark = smoothstep(0.0, spark, 0.3) * spark;\n  float botSpark = BOTTOM_SPARK_STRENGTH * spark;\n  float midSpark = MIDDLE_SPARK_STRENGTH * spark;\n  float topSpark = TOP_SPARK_STRENGTH * spark;\n\n  vec4 sparkCircleTop = makeBlob(\n                                 uv,\n                                 vColorTop,\n                                 vColorMiddle,\n                                 TOP_CIRCLE_WIDTH,\n                                 spark,\n                                 vReactTop,\n                                 0.5,\n                                  vAudio4,\n                                  vAudio5,\n                                  TOP_CIRCLE_RADIUS,\n                                  TOP_CIRCLE_SPEED,\n                                  rotate(vec2(-0.3, -0.3), vTime * 0.2));\n  vec4 sparkCircleMiddle = makeBlob(\n                                    uv,\n                                    vColorMiddle,\n                                    vColorTop,\n                                    MIDDLE_CIRCLE_WIDTH,\n                                    spark,\n                                    vReactMiddle,\n                                    0.5,\n                                     vAudio4,\n                                     vAudio5,\n                                      MIDDLE_CIRCLE_RADIUS,\n                                      MIDDLE_CIRCLE_SPEED,\n                                      rotate(vec2(-0.3, -0.3), vTime * (-0.2)));\n  vec4 sparkCircleBottom = makeBlob(\n                                    uv,\n                                    vColorBottom,\n                                    vColorTop,\n                                    BOTTOM_CIRCLE_WIDTH,\n                                    spark,\n                                    vReactBottom,\n                                    0.5,\n                                     vAudio4,\n                                     vAudio5,\n                                     BOTTOM_CIRCLE_RADIUS,\n                                BOTTOM_CIRCLE_SPEED,\n                                rotate(vec2(-0.3, 0.3), vTime * 0.2));\n\n\n  vec3 color = vColorBackground;\n\n  color = mix(color, sparkCircleBottom.rgb, sparkCircleBottom.a);\n  color = mix(color, sparkCircleMiddle.rgb, sparkCircleMiddle.a);\n  color = mix(color, sparkCircleTop.rgb, sparkCircleTop.a);\n\n  gl_FragColor = vec4(color, 1.0);\n  }","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MfGfW1","date":"1733998836","viewed":102,"name":"wave_colored","username":"dannytozik","description":"wave_colored","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""}}