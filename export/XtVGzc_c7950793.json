{"ver":"0.1","info":{"id":"XtVGzc","date":"1476808601","viewed":182,"name":"In which direction does it turn?","username":"ttoinou","description":"Simple lissajou curve","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["lines","illusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define dx (iMouse.x/iResolution.x)\n#define dy (iMouse.y/iResolution.y)\n#define TWOPI (6.28318530718)\n\nvec3 segment(  vec2  p,\n               vec2  a,\n               vec2  b,\n               float d ){\n    float len = length(b-a);\n    \n    // avoids vertex overlap\n    // doesn't work :-( \n    /*\n    float dd = d/(sqrt(2.0)*0.2);\n    //float D = d;\n    //float D = dd*exp(0.5-dd*dd);\n    float dhalf = 0.1;\n    float D = d < dhalf ? d*1.3 : smoothstep(0.,dhalf,2.*dhalf - d);\n    //float D = d < 0.1 ? d : 0.0;\n    //float D = d/dhalf*exp(- (1.0-d/dhalf)*(1.0-d/dhalf));\n    if( D < len ){\n    \tb = a+( ((b-a)/len)*max(len-D,0.) );\n    \tlen = length(b-a);\n    }\n    */\n    \n    float sx = (b.x - a.x);\n    float sy = (b.y - a.y);\n    vec2 r;\n    \n    if( sx == 0. && sy == 0. ){\n        r = vec2(length(p-a));\n        return vec3(1. - clamp(r.y/d,0.,1.),0.,0.0);\n    } else {\n    \tr = (mat2(sx,-sy,sy,sx))*(p-a)/len;\n    }\n    \n    r.y = (1.0 - smoothstep(0.0,1.0,abs(r.y)/(d)) )\n        * (smoothstep(0.,1., (r.x+d)/(d)) )\n        * (1.0 - smoothstep(0.,1., (r.x-len)/(d)) );\n    \n    r.x = clamp(r.x,0.0,len);\n    \n    return vec3( r.y\n                , r.x , r.x / len );\n}\n\nvec4 colorSegment(vec2  p,\n              \t  vec2  a,\n                  vec2  b,\n                  float d,\n                  vec4  color1,\n                  vec4  color2){\n    vec3 s = segment(p,a,b,d);\n    return pow(s.x,0.5)*mix(color1*color1.a,color2*color2.a,s.z);\n}\n\nconst float width = 1.1;\n\nvec2 viewport(vec2 p){\n    return vec2( (2.*p.x - iResolution.x)/ iResolution.y,\n                  2.*p.y                 / iResolution.y - 1.)*width;\n}\n\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    //float lineThickness = 16./max(iResolution.x,iResolution.y);\n    float lineThickness = 8./max(iResolution.x,iResolution.y) + dx*0.3*(1. + cos(iTime/3.14/0.40));\n    const int pts = 100;\n    \n\tvec2 uv = viewport(fragCoord);\n\n\to = vec4(0.0,0.0,0.0,0.0);\n    \n    vec2 p1 = vec2(0.5,0.5);\n    vec2 p3 = vec2(-0.5,0.5);\n    vec2 p2 = viewport(vec2(0.5,0.1)*iResolution.xy);\n\n    vec4 c1;\n    vec4 c2;\n    float di;\n    \n    for( int i = 0 ; i < pts ; i++ ){\n        di = float(i)/float(pts-1);\n        \n        // curve\n        p2 = (vec2(\n            sin(di*8.0*TWOPI+iTime)+sin(di*3.0*TWOPI),\n            cos(di*3.0*TWOPI+sqrt(3.0)*iTime)\n        ));\n        // color scheme\n        c2 = vec4(\n            0.5+0.5*cos(di*4.0*TWOPI),\n            0.5+0.5*cos(di*9.0*TWOPI),\n            0.5+0.5*cos(di*2.0*TWOPI),\n            0.5+0.5*cos(di*13.0*TWOPI+iTime*4.0)\n        );\n        \n        if( i > 0 ){\n            o += colorSegment(uv,p1,p2,lineThickness,c1,c2);\n        }\n        \n        c1 = c2;\n        p1 = p2;\n    }\n}","name":"Image","description":"","type":"image"}]}