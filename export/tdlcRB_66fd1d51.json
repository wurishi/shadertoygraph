{"ver":"0.1","info":{"id":"tdlcRB","date":"1587299101","viewed":65,"name":"1st assignment Bata AndrÃ¡s BV66F","username":"abnagy","description":"assignment","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["assignment","bataandrs","bv66fp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float pdist=texelFetch(iChannel0,ivec2(fragCoord),0).w;\n        \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0)*3.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This file contains the \n// ---- SPHERE TRACING ----\n\n\n\nstruct Ray\n{\n\tvec3 P;\n\tfloat Tmin;\n\tvec3 V;\n\tfloat Tmax;\n};\n\nstruct TraceResult\n{\n    float T;\t\t// Distance taken on ray\n    int flags;\t\t// bit 0:   distance condition:     true if travelled to far t > t_max\n                    // bit 1:   surface condition:      true if distance to surface is small < error threshold\n};\t                // bit 2:   iteration condition:    true if took too many iterations\n    \nstruct SphereTraceDesc\n{\n    float epsilon;  //Stopping distance to surface\n    int maxiters;   //Maximum iteration count\n};\n\n\nfloat getSmallestT(float tana, vec3 rayp, float rett, vec3 rayv, float r0){\n\tfloat top = \tsdf(rayp+rett*rayv)-r0-(rett*tana);\n    float bottom = \t1. + abs(tana);\n    return top/bottom;\n}\n\nfloat calcLightDist(Ray ray){\n    float dist = -1.;\n    \n\tfloat a = dot(ray.V, ray.V);\n    float b = 2. * (dot(ray.V, ray.P) - dot(ray.V, lightPos));\n    float c = dot(ray.P, ray.P) + dot(lightPos, lightPos) - 2. * dot(ray.P, lightPos) - r * r;\n    \n    if (sqrt(b * b - 4. * a * c) >= 0.)\t\n    {\n        dist = (-1. * b - sqrt(b * b - 4. * a * c)) / (2. * a);\n    }\n    \n    return dist;\n}\n\n\nTraceResult sphere_trace(in Ray ray, in SphereTraceDesc params)\n{\n    \n    TraceResult ret = TraceResult(ray.Tmin, 0);\n    float tana = sqrt(2.)*1. / length(iResolution);\n    float d;\n    float r0 = tana * ray.Tmin;\n    \n    int i = 0; do\n    {\n        d = getSmallestT(tana, ray.P, ret.T, ray.V, r0);\n        ret.T+=d;\n        ++i;\n    } while (\n\t\tret.T < ray.Tmax &&       \t\t\t// Stay within bound box\n\t\td\t  > 0.0001&&\t\t\t// Stop if cone is close to surface\n\t\ti     < params.maxiters\t        \t// Stop if too many iterations\n\t);    \n    \n    if (ret.T >= ray.Tmax){\n    \tret.flags = 0;\n    }\n    else if (d <= r0 + tana* ret.T){\n    \tret.flags = 1;\n    }\n    else if (i >= params.maxiters){\n    \tret.flags = 3;\n    }\n    \n    \n    float dist = calcLightDist(ray);\n    if (dist >= 0. && dist < ret.T)\n    {\n        ret.T = dist;\n        ret.flags = 2;\n    }\n     \n    return ret;\n}\n\n// ---- SHADING ---- (todo!)\n\nvec3 normal(const in vec3 p)\n{\n    const float eps=0.001;\n    vec3 plus = vec3(sdf(p+vec3(eps,0,0)),sdf(p+vec3(0,eps,0)),sdf(p+vec3(0,0,eps)));\n    vec3 minu = vec3(sdf(p-vec3(eps,0,0)),sdf(p-vec3(0,eps,0)),sdf(p-vec3(0,0,eps)));\n    return normalize(plus-minu);\n}\n\n\n\nvec4 missColor(Ray ray)\n{\n    return vec4(texture(iChannel2, ray.V).xyz,1.);\n}\nvec4 lightColor(Ray ray, float t)\n{\n    return vec4(1.,1.,1.,1.);\n}\nvec4 errorColor(Ray ray, float t)\n{\n    return vec4(1.,0.,0.,1.);\n}\nvec4 hitColor(Ray ray,float t)\n{\n    vec3 p = ray.P + ray.V*t;\n    vec3 n = normal(p);\n    \n\n    \n    //vec3 lightPos= vec3(10.,10.,10.);\n    \n    vec3 v = -ray.V;\n    vec3 l = normalize(lightPos-p);\n    \n    //diffuse\n    float costheta = max(dot(n,l),0.);\n    vec3 k_d = vec3(1./pi);\n    \n    //specular\n    vec3 toLight = normalize(lightPos - p);\n    vec3 toEye = -ray.V;\n    vec3 k_s = vec3(0.4);\n    \n    vec3 h = normalize(toLight+toEye);\n    float si = pow(clamp(dot(h,n),0.,1.),160.);\n    \n\tRay ray2 = Ray(p,0.06,toLight,distance(p,lightPos));\n    SphereTraceDesc params = SphereTraceDesc(0.006, 64);\n    TraceResult result = sphere_trace(ray2, params);\n    \n    vec3 col = vec3(0);\n    if(result.flags != 1 && result.flags != 3) col = (k_d + si*k_s)*costheta;\n    \n    return vec4(col,1.);\n}\n\n// ---- CAMERA and EVENTs ----\n// Common key codes (WASD instead of arrows)\n\nconst int KeyLeft  = 65;\nconst int KeyRight = 68;\nconst int KeyUp    = 87;\nconst int KeyDown  = 83;\n\n#define isKeyHeld(k)  (texelFetch(iChannel1, ivec2(k,0), 0).x > 0.)\n\nRay Camera(vec2 fragCoord, out vec3 eye, out vec2 data2)\n{\n    /*\n        We will use the first 2 pixels of the buffer to store the information we need.\n        Every pixel contains 4 channels (floats), for RGBA. We can exploit this in the following way:\n            pixel0 = (empty, cameraX, cameraY, cameraZ)\n            pixel1 = (empty, empty, U, V)\n        where \n            cameraX, cameraY and cameraZ describe the position of the camera respectively\n            U,V give the current rotation of the camera in spherical coordinates\n\t*/\n    \n    // Ray generation\n    eye = texelFetch(iChannel0, ivec2(0,0), 0).yzw;\t\t// camera position\n    data2 = texelFetch(iChannel0, ivec2(1,0), 0).zw;\t// spherical coordinates\n    vec2 uv\t= abs(data2);\n    \n   \tif(iMouse.z>0. || data2.x >= 0.)\t//mouse held or was held last frame\n        uv += (abs(iMouse.zw)-abs(iMouse.xy))*0.01;\n    \n    vec3 w = vec3(cos(uv.x)*cos(-uv.y),\n                  \t\t\tsin(-uv.y),\n                  sin(uv.x)*cos(-uv.y));\n    vec3 u = normalize(cross(vec3(0,1,0),w));\n\tvec3 v = cross(w,u);\n    \n   \n    vec2 px = (fragCoord/iResolution.xy*2.-1.)*tan(pi/4.)*normalize(iResolution.xy);\n    //*(sqrt(2.)/length(iResolution))\n    // Keyboard and mouse handling:\n\tfloat speed = 0.2;\n    if (isKeyHeld(KeyLeft )) eye -= u*speed;\n    if (isKeyHeld(KeyRight)) eye += u*speed;\n    if (isKeyHeld(KeyUp   )) eye += w*speed;\n    if (isKeyHeld(KeyDown )) eye -= w*speed;\n    \n    if(iMouse.z>=0.)\t\t//mouse held\n        data2 = abs(data2.xy);\n\telse if(data2.x >= 0.)\t//mouse released\n        data2 = -mod(uv,2.*pi);\n    \n    // Ray generation\n    return Ray(eye,\t\t\t\t\t\t\t//V\n               0.1,\t\t\t\t\t\t\t//minT\n               normalize(w+px.x*u+px.y*v),\t//P\n               500.);\t\t\t\t\t\t//maxT\n}\n\n// ---- MAIN ----\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Generate ray from pixel\n    vec3 eye; vec2 data; // this will be saved into first two pixels\n    \n    time = iTime;\n    Ray ray = Camera(fragCoord, eye, data);\n    \n    // Set epsilon and maximum iteration\n    \n    SphereTraceDesc params = SphereTraceDesc(0.06, 64);\n    \n    // Raytrace\n    TraceResult result = sphere_trace(ray, params);\n    \n    /* //Debug\n\tfragColor=vec4(0.,0.,0.,1.); //debug\n    if(bool(result.flags & 1)) fragColor.r=1.;\n    if(bool(result.flags & 2)) fragColor.g=1.;\n    if(bool(result.flags & 4)) fragColor.b=1.;\n    */\n    if(result.flags == 0)\n    \tfragColor = missColor(ray);  \n    else if(result.flags == 1)\n    \tfragColor = hitColor(ray, result.T);\n    else if(result.flags == 2)\n        fragColor = lightColor(ray, result.T);\n    else if (result.flags == 3)\n     \tfragColor = errorColor(ray, result.T);\n    \t        \t\t\t \n\n\n    vec4 prev = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    fragColor = 0.3*prev + 0.7*fragColor;\n        fragColor.w = result.T;\n\n    // First two pixels are reserved\n    if(fragCoord.x == 0.5 && fragCoord.y == 0.5) // pixel (0,0)\n        fragColor.yzw = eye;\n    if(fragCoord.x == 1.5 && fragCoord.y == 0.5) //pixel (1,0)\n        fragColor.zw = data;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//This file contains the code for the scene\n\nconst float pi = 3.1415926535897932384626433832795;\nconst vec3 lightPos = vec3(10.,10.,10.);\nconst float r = 1.;\nfloat time;\n//\tPRIMITIVES are from\n//\thttps://iquilezles.org/articles/distfunctions\n\nfloat sdSphere( vec3 p, float s )\n{\n\treturn length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n\tvec3 d = abs(p) - b;\n\treturn length(max(d,0.0))+min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n    return length(d);\n}\n\n///SDF\n\nfloat sdf(in vec3 p)\n{\n    //p-=vec3(0,0,2);\n    float f = sdSphere(p, 1.);\n    float g = sdBox(p-vec3(2,0,0),vec3(1,1,1));\n    float h = sdBox(p-vec3(3,sin(2.*time)*5. + 10.,0),vec3(1,1,1));\n    return min(min(min(f,h),g),p.y+1.);\n}\n\nfloat sdfLight(in vec3 p, vec3 lightPos,float r){\n\tfloat f = sdSphere(p - lightPos, r);\n    return f;\n}\n\n","name":"Common","description":"","type":"common"}]}