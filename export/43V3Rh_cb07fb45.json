{"ver":"0.1","info":{"id":"43V3Rh","date":"1717535620","viewed":82,"name":"Particle Life attempt","username":"Rennen_Rig","description":":3","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["life"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float draw_radius = 5.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 view_data = texelFetch(iChannel1, ivec2(0, 0), 0);\n\n    vec2 pos = (fragCoord - .5 * iResolution.xy) * view_data.z + view_data.xy;\n    \n    vec3 col = vec3(.125);\n\n    bool cont = true;\n    \n    if (view_data.z < draw_radius * 1.) {\n        for (int c = 0; c < max_particles && cont; c++) {\n            ivec2 fetch_pos = ivec2(c % int(iResolution.x), c / int(iResolution.x));\n\n            vec2 particle_pos = texelFetch(iChannel0, fetch_pos, 0).xy;\n            if (length(particle_pos - pos) < draw_radius) {\n                col = getColour(c);\n                cont = false;\n            }\n        }\n    }\n    else {\n        for (int c = 0; c < max_particles && cont; c++) {\n            ivec2 fetch_pos = ivec2(c % int(iResolution.x), c / int(iResolution.x));\n\n            vec2 particle_pos = texelFetch(iChannel0, fetch_pos, 0).xy;\n            \n            if ((pos.x - particle_pos.x + view_data.z > 0. && pos.x - particle_pos.x - view_data.z < 0. )\n                && (pos.y - particle_pos.y + view_data.z > 0. && pos.y - particle_pos.y - view_data.z < 0. )) {\n                col = getColour(c);\n                cont = false;\n            }\n        }\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    //fragColor = abs(texelFetch(iChannel0, ivec2(fragCoord * vec2(.1, .1)), 0).zwxy);\n    //fragColor = texelFetch(iChannel1, ivec2(0, 0), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int xorshift(in int value) {\n    // Xorshift*32\n    // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper\n    value ^= value << 13;\n    value ^= value >> 17;\n    value ^= value << 5;\n    return value;\n}\n\n\nfloat randomFloat(in int state) {\n    state = xorshift(state);\n    // FIXME: This should have been a seed mapped from MIN..MAX to 0..1 instead\n    return abs(fract(float(state) / 3141.592653));\n}\n\n// I'm using a script to generate these :3\n\nvec2 getPointPos(in int a, in int b) {\n    switch (a) {\n        case 0:\n        switch (b) {\n            case 0: return vec2(0.781853816585089, -0.08114426402763877);\n            case 1: return vec2(0.8655569992116441, -0.7311405374126535);\n            case 2: return vec2(0.8999943901865299, 0.7339643848115968);\n            case 3: return vec2(0.583109039945855, -0.878523948078254);\n            case 4: return vec2(0.866827741499703, 0.0801590338389526);\n            case 5: return vec2(0.4947900748873949, 0.1669636307715327);\n        }\n\n        case 1:\n        switch (b) {\n            case 0: return vec2(0.21230293690228297, -0.5632426915546187);\n            case 1: return vec2(0.2899222620669214, 0.7501704032217509);\n            case 2: return vec2(0.25319995585777066, 0.0023484650267528995);\n            case 3: return vec2(0.2611607397951695, -0.5425660491524606);\n            case 4: return vec2(0.7453808531531907, -0.38100738331106593);\n            case 5: return vec2(0.3802542506127763, -0.5097244481365025);\n        }\n\n        case 2:\n        switch (b) {\n            case 0: return vec2(0.37762459013203786, -0.007550623446295291);\n            case 1: return vec2(0.6025463843179206, 0.25463359155953946);\n            case 2: return vec2(0.40206947560796813, -0.8666633770039284);\n            case 3: return vec2(0.15400247144698126, -0.5219096658775849);\n            case 4: return vec2(0.22577973039963012, 0.04286517783652475);\n            case 5: return vec2(0.7407220189933675, 0.48233140896388094);\n        }\n\n        case 3:\n        switch (b) {\n            case 0: return vec2(0.3583889433947075, 0.061749331521076846);\n            case 1: return vec2(0.7522202959457343, 0.5567302095790405);\n            case 2: return vec2(0.37052610527666785, -0.8345466198760666);\n            case 3: return vec2(0.31185472286808, 0.7212195378467949);\n            case 4: return vec2(0.44595678544366396, 0.8767776127360477);\n            case 5: return vec2(0.7249092648589167, 0.00480447712589509);\n        }\n\n        case 4:\n        switch (b) {\n            case 0: return vec2(0.23522713071525608, -0.022900911562561778);\n            case 1: return vec2(0.2773011689666176, 0.1615167456099092);\n            case 2: return vec2(0.6305544050203302, 0.5494074158168577);\n            case 3: return vec2(0.12003255064998164, -0.10019763227223331);\n            case 4: return vec2(0.22049756070945897, -0.5783854757845559);\n            case 5: return vec2(0.4956995816827832, -0.5441336550381299);\n        }\n\n        case 5:\n        switch (b) {\n            case 0: return vec2(0.733802095417875, 0.7080994018353065);\n            case 1: return vec2(0.5643461779199762, -0.8121126408887529);\n            case 2: return vec2(0.29572516735314325, -0.5228081985891965);\n            case 3: return vec2(0.5359786470468177, 0.35198524357951033);\n            case 4: return vec2(0.6749985320993621, 0.6508096920718078);\n            case 5: return vec2(0.12109188529935222, 0.2166931529288955);\n        }\n    }\n}\n\n\nfloat max_distance = 100.;\nfloat min_distance = 30.;\nfloat repulsion_force = 1.;\n\nfloat getForceStrength(in int a, in int b, float dist) {\n    if (dist >= max_distance) {\n        return 0.;\n    }\n    \n    if (dist < min_distance) {\n        return (dist - min_distance) * repulsion_force;\n    }\n    \n    float x = (dist - min_distance) / (max_distance - min_distance);\n    vec2 point = getPointPos(a, b);\n    \n    if (x < point.x) {\n        return x * point.y/point.x;\n    }\n    \n    return point.y * (1. + ((x - point.x) / (point.x - 1.)));\n}\n\nint max_particles = 450;\n\n\nint getType(in int index) {\n    return index % 6;\n}\n\n\nvec3 getColour(in int index) {\n    switch (getType(index)) {\n    case 0: return vec3(1., 0., 0.);\n    case 1: return vec3(0, 1, 0);\n    case 2: return vec3(0, 0, 1);\n    case 3: return vec3(1, 1, 0);\n    case 4: return vec3(1, 0, 1);\n    case 5: return vec3(0, 1, 1);\n    \n    default: return vec3(1);\n    }\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float friction_coeff = 0.02;\nint seed = 10;\n\n// pos, velocity\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 icoords = ivec2(fragCoord);\n    ivec2 intres = ivec2(iResolution.xy);\n    \n    int this_index = icoords.y * intres.x + icoords.x;\n    if (this_index >= max_particles) return;\n\n\n    if (iFrame < 120) {\n        fragColor = vec4((vec2(randomFloat(xorshift(xorshift(this_index) + seed) + 1),\n            randomFloat(xorshift(xorshift(this_index) + seed) + 2)) - vec2(0.5))\n            * iResolution.xy * 4., 0, 0);\n        \n        return;\n    }\n    \n    \n    vec4 current = texelFetch(iChannel0, icoords, 0);\n    \n    vec2 force = vec2(0);\n    \n    int this_type = getType(this_index);\n    \n    for (int c = 0; c < max_particles; c++) {\n    \n        if (c != this_index) {\n        ivec2 fetch_pos = ivec2(c % intres.x, c / intres.x);\n        \n        vec4 targetting = texelFetch(iChannel0, fetch_pos, 0);\n        \n        if (length(current.xy - targetting.xy) <= max_distance) {\n            force += normalize(targetting.xy - current.xy)\n                    * getForceStrength(getType(c), this_type, length(targetting.xy - current.xy));\n\n            }\n        }\n    }\n    \n    current.zw += force;\n    current.zw *= 1. - friction_coeff;\n    current.xy += current.zw;\n    //current.xy = mod(current.xy, iResolution.xy);\n    fragColor = current;\n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10 || ivec2(fragCoord) != ivec2(0,0)) {\n        fragColor = vec4(0.0,0.0,1.0,1.0); // xy, zoom\n        return;\n    }\n    \n    vec4 prev = texelFetch(iChannel0, ivec2(0, 0), 0);\n    \n    float W = texelFetch(iChannel3, ivec2(87 , 0), 0).x;\n    float A = texelFetch(iChannel3, ivec2(65 , 0), 0).x;\n    float S = texelFetch(iChannel3, ivec2(83 , 0), 0).x;\n    float D = texelFetch(iChannel3, ivec2(68 , 0), 0).x;\n    \n    float Q = texelFetch(iChannel3, ivec2(81 , 0), 0).x;\n    float E = texelFetch(iChannel3, ivec2(69 , 0), 0).x;\n    \n    float res = prev.z * pow(1.07, Q - E);\n    vec2 pos = prev.xy + vec2(D-A, W-S) * res * 10.;\n    \n    \n    fragColor = vec4(pos, res, 1);\n}","name":"Buffer B","description":"","type":"buffer"}]}