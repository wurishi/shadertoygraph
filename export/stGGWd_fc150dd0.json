{"ver":"0.1","info":{"id":"stGGWd","date":"1638515094","viewed":365,"name":"Rodrigues' rotation formula test","username":"amagitakayosi","description":"Implementation of https://en.wikipedia.org/wiki/Rodrigues%27_rotation_formula","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Move the rotation axis with mouse!\n\n// Rodrigues' rotation formula\n#define rod(r,n,t) (r * cos(t) + (1. - cos(t)) * dot(r, n) * n + cross(n, r) * sin(t))\n\n// iq's SDFs\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r ) {\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n#define PI 3.141593\n\nvec2 map(vec3 p) {\n  // Rotation axis  \n  vec2 m = iMouse.xy / iResolution.xy * 2. - 1.;\n  vec3 n = normalize(vec3(\n    m.x,\n    m.y,\n    mix(1., 0., min(1., length(m) * 1.5))\n  ));\n    \n  // Rotate box around the axis\n  vec3 p1 = rod(p, n, iTime * 3.);\n  vec2 d1 = vec2(sdBox(p1, vec3(1)), 1);\n\n  // Visualize the axis\n  vec2 d2 = vec2(sdCapsule(p, vec3(0), n * 2.5, 0.2), 2);\n  \n  return d1.x < d2.x ? d1 : d2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (fragCoord.xy * 2. - iResolution.xy) / iResolution.y;\n  \n  vec3 ro = vec3(0, 0, 5);\n  vec3 rd = normalize(vec3(p, -1));  \n  float dist;\n\t\n  vec3 col;\n  vec2 hit;\n  float fi;  \n  for (int i = 0; i < 64; i++) {\n    hit = map(ro + rd * dist);\n    dist += hit.x;\n    \n    if (hit.x < 1e-3) { \n      fi = float(i);\n      break;\n\t}\n    if (dist > 30.) {\n      hit.y = 0.;\n      break;\n    }\n  }\n \n  if (hit.y == 0.) {      \n    col = vec3(0);\n  } else if (hit.y == 1.) {      \n    col = vec3(1) * (1. - fi * .03);\n  } else {\n    col = vec3(1, 0, 0) * (1. - fi * .03);\n  }\n\t\n  fragColor = vec4(col, 1);\n}\n\n\t","name":"Image","description":"","type":"image"}]}