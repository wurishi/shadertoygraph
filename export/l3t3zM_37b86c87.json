{"ver":"0.1","info":{"id":"l3t3zM","date":"1716285147","viewed":62,"name":"black holes and crosses","username":"akr51","description":"I started with a line sdf then a rotating cross and some fracturing. Using the un fractured plane as a shaping function which is rotated about and the id using the floor function is used to break the rotations so they follow a similar shaping function. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["signeddistancefunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.141592\n\nvec3 palette(vec3 a, vec3 b, vec3 c, vec3 d, float t)\n{\n\n\n\n    return a + b * cos(2.0 * PI * (c * d + t));\n\n}\n\nfloat line(vec2 uv, vec2 a, vec2 b)\n{\n\n\n    vec2 pa = uv - a;\n    vec2 ba = b - a;\n    float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * t);\n\n}\n\n\nvoid mainImage(out vec4 c_out, in vec2 u)\n{\n    \n    \n    vec2 rr = iResolution.xy, uv = (u + u - rr) / rr.y;\n    uv *= 0.8;\n    \n    \n    float ff = length(uv + vec2(cos(iTime * 0.25), sin(iTime * 0.25)));\n    uv *= (1.0 - ff * (sin(iTime * 0.25) + 1.0));\n    uv.x += iTime;\n    uv.y += iTime * 0.5;\n    vec2 uvc = uv;\n   \n    vec3 aa = vec3(sin(ff + iTime * 1.3));\n    vec3 bb = vec3(cos(ff + iTime * 2.74), cos(ff + iTime * 3.3), cos(ff));\n    vec3 cc = vec3(sin(ff + 2.0), sin(ff + 3.0), sin(ff));\n    vec3 dd = vec3(cos(ff + PI * 0.5 + iTime), cos(ff + PI + iTime * 2.0), cos(ff + PI * 2.0 + iTime * 3.0));\n    \n    vec2 v = floor(uv * 5.0);\n    uv = fract(uv * 5.0) - 0.5;\n    \n    float scale = 0.25;\n    \n    float add = sin(length(uvc) * 4.0);\n    scale += sin(uvc.x * 2.0 + iTime) * 0.09;\n    scale += cos(uvc.y * 2.0 + iTime) * 0.09;\n    vec2 a = vec2(cos(iTime + add), sin(iTime + add)) * scale;\n    vec2 b = vec2(cos(iTime + PI + add), sin(iTime + PI + add)) * scale;\n    \n    float f = 0.01 / line(uv, a, b);\n    \n    vec2 c = vec2(cos(iTime + PI * 0.5 + add), sin(iTime + PI * 0.5 + add)) * scale;\n    vec2 d = vec2(cos(iTime + PI * (3.0 / 2.0) + add), sin(iTime + PI * (3.0 / 2.0) + add)) * scale;\n    \n    f += 0.01 / line(uv, c, d);\n    \n    vec3 cl = vec3(f) * palette(aa, bb, cc, dd, f) * 2.0;\n    cl = pow(cl, vec3(2.0));\n       \n    c_out = vec4(vec3(cl), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}