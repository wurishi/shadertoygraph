{"ver":"0.1","info":{"id":"ftVXWV","date":"1641381615","viewed":137,"name":"Study_FisheyeLens","username":"ayaha401","description":"I learned how to make a fisheye lens.\nhttps://www.shadertoy.com/view/ldyGWm\n\nI couldn't get the screen to rotate properly.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fisheyelens"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = acos(-1.);\nvec3 L = normalize(vec3(.0, .0, -1.));\n\nfloat sdSphere(vec3 p, float s)\n{\n    return length(p) - s;\n}\n\nfloat sdBox(vec3 p, vec3 s)\n{\n    p = abs(p) - vec3(s);\n    return max(max(p.x, p.y), p.z);\n}\n\nmat2 rot(float a)\n{\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\nvec3 repeat(vec3 pos, vec3 span)\n{\n    return abs(mod(pos, span)) - span * .5;\n}\n\nfloat map(vec3 pos)\n{\n    pos = repeat(pos, vec3(2.));\n    \n    float d0 = sdSphere(pos, .5);\n    float d1 = sdBox(vec3(pos.x, pos.y, pos.z), vec3(1., .1, .1));\n    float d2 = sdBox(vec3(pos.x, pos.y, pos.z), vec3(.1, 1., .1));\n    float d3 = sdBox(vec3(pos.x, pos.y, pos.z), vec3(.1, .1, 1.));\n    return min(min(min(d1, d0), d2), d3);\n}\n\nvec3 makeN(vec3 p)\n{\n    vec2 eps = vec2(.001, 0.);\n    return normalize(vec3(map(p + eps.xyy) - map(p - eps.xyy), \n                          map(p + eps.yxy) - map(p - eps.yxy), \n                          map(p + eps.yyx) - map(p - eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (gl_FragCoord.xy / iResolution.xy) * 2. - 1.;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec3 cameraOrigin = vec3(0., 0., iTime + 5.);\n    vec3 cameraTarget = vec3(0., 1.0, 0.);\n    vec3 upDirection = vec3(0., 1., 0.);\n    vec3 cameraDir = normalize(cameraOrigin - cameraTarget);\n    vec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n    vec3 cameraUp = cross(cameraDir, cameraRight);\n    vec3 rayDirection = cameraRight * p.x + cameraUp * p.y + cameraDir;\n    rayDirection = normalize(vec3(rayDirection.xy, sqrt(max(rayDirection.z * rayDirection.z - dot(rayDirection.xy, rayDirection.xy) * .2, 0.))));\n    \n    // 2.0933 = PI/1.5\n    rayDirection.xy *= rot(min(3.6*sin((2.0943946)*fract(iTime)), PI/floor(mod(iTime,2.)+1.)));\n    \n    vec3 rayPos = vec3(0.);\n    float d = 0.;\n    float depth = 0.;\n    vec3 col = vec3(0.);\n    \n    for(int i = 0; i < 100; i++)\n    {\n        rayPos = cameraOrigin + rayDirection * depth;\n        d = map(rayPos);\n        if(d < .0001)\n        {\n            vec3 N = makeN(rayPos);\n            \n            float diff = dot(N, L);\n            float spec = pow(clamp(0., dot(reflect(L, N), rayDirection), 1.), 5.);\n            col = vec3(diff + spec);\n            break;\n        }\n        depth += d;\n    }\n    \n    vec3 blue = vec3(0., .3, .7);\n    vec3 finalCol = col * blue;\n\n    \n    fragColor = vec4(finalCol,1.0);\n}","name":"Image","description":"","type":"image"}]}