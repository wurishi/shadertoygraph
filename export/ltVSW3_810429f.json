{"ver":"0.1","info":{"id":"ltVSW3","date":"1486245313","viewed":165,"name":"Rotating Planes","username":"Wuszt","description":"Plane","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["plane"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\tvec2 center;\n\tbool isFigure = false;\nstruct plane\n{\n  \tmat2 rotationMatrix;\n    float width;\n    float height;\n\tvec2 center; \n    vec2 A,B,C,D;\n    vec4 color;\n};\n\nbool IsPointAboveEdge(vec4 point, vec2 A,vec2 B)\n{\n    if(A.x == B.x)\n    {\n        return point.x >= A.x;\n    }\n    \n    float a,b;\n    a = (A.y-B.y)/(A.x-B.x);\n    b = A.y - a * A.x;\n    \n    return (point.y >= (a * point.x + b));\n}\n\nbool IsPointInFigure(vec4 point, vec2 A,vec2 B,vec2 C,vec2 D)\n{\n    bool AB = IsPointAboveEdge(point,A,B);\n    bool CD = IsPointAboveEdge(point,C,D);\n    bool AC = IsPointAboveEdge(point,A,C);\n    bool BD = IsPointAboveEdge(point,B,D);\n               \n    bool xor1 = (!AB && CD) || (AB && !CD);\n    bool xor2 = (!AC && BD) || (AC && !BD);\n    return xor1 && xor2;\n}\n\nvoid RotatePoint(inout vec2 point, vec2 aroundPoint, mat2 rotationMatrix)\n{\n\tpoint.x-=aroundPoint.x;\n    point.y-=aroundPoint.y;\n    \n    point*=rotationMatrix;\n    \n    point.x+=aroundPoint.x;\n    point.y+=aroundPoint.y;\n}\n\nplane CreatePlane(vec2 center, float height, float width,vec4 color)\n{\n    plane new;\n    \n    new.center = center;\n    new.height = height;\n    new.width = width;\n    \n    //new.A = vec2(center.x - width/2.,center.y+height/2.);\n    new.A = vec2(center.x - width/2.,center.y + height/2.);\n    new.B = vec2(center.x + width/2.,center.y+height/2.);\n    new.C = vec2(center.x - width/2.,center.y-height/2.);\n    new.D = vec2(center.x + width/2.,center.y-height/2.);\n    new.color = color;\n    \n    return new;\n}\n\nvoid RotatePlane(inout plane tmp,float rot)\n{\n    //rot = tan(rot);\n    tmp.rotationMatrix = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n\n    RotatePoint(tmp.A,tmp.center, tmp.rotationMatrix);\n    RotatePoint(tmp.B,tmp.center,tmp.rotationMatrix);\n    RotatePoint(tmp.C,tmp.center,tmp.rotationMatrix);\n    RotatePoint(tmp.D,tmp.center,tmp.rotationMatrix);\n}\n\nvoid DrawPlane(inout vec4 color,plane tmp,vec2 fragCoord)\n{\n       \tif(IsPointInFigure(vec4(fragCoord,0.,0.),tmp.A,tmp.B,tmp.C,tmp.D))\n        {\n            isFigure = true;\n            vec2 new = fragCoord - tmp.C;\n        \tcolor.xyzw = texture(iChannel0,tmp.rotationMatrix*(new)/(tmp.width));\n        \tcolor *= tmp.color;\n        }\n}\n\nvoid FlashLight(inout vec4 color, vec2 fragCoord)\n{\n    float dist = distance(vec2(iMouse.x,iMouse.y), fragCoord);\n    float flashlightPower = 2.;\n    vec4 flashLightColor = vec4(1.,1.,1.,0.); \n    \n    color += flashLightColor * flashlightPower/100./dist;\n    color *= flashLightColor * flashlightPower*1000. * (1./dist);\n}\nvoid Darkness(inout vec4 color)\n{\n    color *= 0.05;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tcenter = vec2(iResolution.x/2.,iResolution.y/2.);\n    vec4 color;\n    vec4 backgroundColor = vec4(1.0,0.5,1.0,0.);\n\n    plane first = CreatePlane(center.xy + vec2(-150.,150.), 200.,200.,vec4(1.,0.,0.,0.));\n    plane first2 = CreatePlane(center.xy + vec2(-200.,100.), 150.,150.,vec4(1.,0.,0.,0.));\n    plane second = CreatePlane(center.xy + vec2(200.,100.), 150.,150.,vec4(0.5,0.2,0.8,0.));\n    plane third = CreatePlane(center.xy + vec2(200.,-100.), 150.,150.,vec4(0.,0.5,0.3,0.));\n    plane forth = CreatePlane(center.xy + vec2(-200.,-100.), 150.,150.,vec4(0.8,0.8,0.8,0.));\n    \n    RotatePlane(first,radians(iTime * 45.0));\n    RotatePlane(first2,radians(45.+ iTime * 45.0));\n    RotatePlane(second,radians(iTime * 90.0));\n    RotatePlane(third,radians(iTime * 135.0));\n    RotatePlane(forth,radians(iTime * 360.0));\n\t\n    DrawPlane(color,first,fragCoord);\n  //  DrawPlane(color,first2,fragCoord);\n    DrawPlane(color,second,fragCoord);\n    DrawPlane(color,third,fragCoord);\n    DrawPlane(color,forth,fragCoord);\n    \n    if(!isFigure)\n        color=backgroundColor;\n    \n    Darkness(color);\n    FlashLight(color,fragCoord);\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}