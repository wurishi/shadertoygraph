{"ver":"0.1","info":{"id":"4fdcW8","date":"1730816129","viewed":56,"name":"Palette Generator","username":"Arbethi","description":"Implementation of color theory technic from\nhttps://youtu.be/u5AnzLg1HxY?si=E_OIklQPAmk73gS-\nClick horizontally to change color base\nClick vertically to have wider range of colors","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["palette","tone"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 Q, in vec2 U )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = U/iResolution.xy-.5;\n    vec2 uvm = iMouse.xy/iResolution.xy;\n    //int div=int(15.*(sin(iTime)+1.));\n    int n=7;\n    float r=uvm.y*2.;\n    float fn=float(n);\n    float c = uvm.x*1.;\n    float x=floor((uv.x+float(n%2)/fn/2.)*fn)/fn;\n    float y=floor((uv.y+.5)*3.)/3.;\n    y=2.*(y-.5)/15.;\n    float h=mod((x*r+c),1.)-y/2.;\n    vec2 sv=tosv(x+y);\n\n    // Time varying pixel color\n    vec3 col = hsv(vec3(h,sv));\n\n    // Output to screen\n    Q = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float pi=3.1415926;\n\nvec3 hsv( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\nfloat vmax=.99;\nfloat vmin=.2;\nvec2 tosv(float x)\n{\n    float y=x+.5;\n    y*=pi/2.;\n    float s=cos(y);//1.-pow(y,.7);\n    float v=sin(y)*(vmax-vmin)+vmin;\n    return vec2(s,v).xy;\n}","name":"Common","description":"","type":"common"}]}