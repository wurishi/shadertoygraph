{"ver":"0.1","info":{"id":"mtcXRM","date":"1685158462","viewed":69,"name":"36 Rings are rotating.","username":"Nunu_3060","description":"rotate ring","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["torus","ring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI  = 3.141592653589793;\n\n\nconst vec4 c00 = vec4(0.9137254901960784, 0.7411764705882353, 0.19607843137254902, 1.0);\nconst vec4 c01 = vec4(0.803921568627451, 0.07450980392156863, 0.15294117647058825, 1.0);\nconst vec4 c02 = vec4(0.09411764705882353, 0.16862745098039217, 0.5098039215686274, 1.0);\nconst vec4 c03 = vec4(0.9568627450980393, 0.8313725490196079, 0.12549019607843137, 1.0);\nconst vec4 c04 = vec4(0.6352941176470588, 0.6627450980392157, 0.6627450980392157, 1.0);\nconst vec4 c05 = vec4(0.3058823529411765, 0.4470588235294118, 0.2784313725490196, 1.0);\nconst vec4 c06 = vec4(0.1607843137254902, 0.5568627450980392, 0.4980392156862745, 1.0);\nconst vec4 c07 = vec4(0.9882352941176471, 0.9921568627450981, 0.9921568627450981, 1.0);\nconst vec4 c08 = vec4(0.9019607843137255, 0.07058823529411765, 0.12549019607843137, 1.0);\nconst vec4 c09 = vec4(0.22745098039215686, 0.27450980392156865, 0.34901960784313724, 1.0);\nconst vec4 c10 = vec4(0.8784313725490196, 0.39215686274509803, 0.1411764705882353, 1.0);\nconst vec4 c11 = vec4(0.9450980392156862, 0.5568627450980392, 0.06274509803921569, 1.0);\nconst vec4 c12 = vec4(0.6745098039215687, 0.32941176470588235, 0.5098039215686274, 1.0);\nconst vec4 c13 = vec4(0.4627450980392157, 0.615686274509804, 0.2549019607843137, 1.0);\nconst vec4 c14 = vec4(0.9882352941176471, 0.9921568627450981, 0.9450980392156862, 1.0);\nconst vec4 c15 = vec4(0.3568627450980392, 0.396078431372549, 0.4549019607843137, 1.0);\nconst vec4 c16 = vec4(0.14901960784313725, 0.28627450980392155, 0.615686274509804, 1.0);\nconst vec4 c17 = vec4(0.8156862745098039, 0.7529411764705882, 0.4196078431372549, 1.0);\nconst vec4 c18 = vec4(0.7490196078431373, 0.611764705882353, 0.2235294117647059, 1.0);\nconst vec4 c19 = vec4(0.6627450980392157, 0.12156862745098039, 0.16862745098039217, 1.0);\nconst vec4 c20 = vec4(1.0, 0.9529411764705882, 0.8549019607843137, 1.0);\nconst vec4 c21 = vec4(0.0, 0.03529411764705882, 0.050980392156862744, 1.0);\nconst vec4 c22 = vec4(0.6352941176470588, 0.6745098039215687, 0.6901960784313725, 1.0);\nconst vec4 c23 = vec4(0.7843137254901961, 0.807843137254902, 0.8196078431372549, 1.0);\nconst vec4 c24 = vec4(0.4549019607843137, 0.47843137254901963, 0.49411764705882355, 1.0);\n\n\nfloat sdf_torus_z(vec3 p, float r0, float r1){\n    vec2 q = vec2(length(p.xy)-r0, p.z);\n    return length(q)-r1;\n}\n\n\nmat2 rotate2D(float t){\n    float c = cos(t);\n    float s = sin(t);\n    return mat2(c, -s, s, c);\n}\n\n\nfloat dist(vec3 p){\n    p.z += 54.0;\n    float d = 100.0;\n    float dt = 0.0625;\n    vec3 pt;\n    for (float i=0.0; i < 36.0; i++){\n        pt = p.xyz;\n        pt.xy *= rotate2D(2.0 * PI * (iTime + dt*i) * 0.23);\n        pt.yz *= rotate2D(2.0 * PI * (iTime + dt*i) * 0.29);\n        pt.zx *= rotate2D(2.0 * PI * (iTime + dt*i) * 0.31);;\n        d = min(d, sdf_torus_z(pt, 1.0*(2.0+i), 0.5));\n    }\n    return d;\n}\n\n\nvec4 wallpaper(vec3 p){\n    p.z += 54.0;\n    float l = length(p);\n    int i = int(mod(l-iTime, 24.0));\n    return  i ==  0 ?   c01:\n            i ==  1 ?   c02:\n            i ==  2 ?   c03:\n            i ==  3 ?   c04:\n            i ==  4 ?   c05:\n            i ==  5 ?   c06:\n            i ==  6 ?   c07:\n            i ==  7 ?   c08:\n            i ==  8 ?   c09:\n            i ==  9 ?   c10:\n            i == 10 ?   c11:\n            i == 11 ?   c12:\n            i == 12 ?   c13:\n            i == 13 ?   c14:\n            i == 14 ?   c15:\n            i == 15 ?   c16:\n            i == 16 ?   c17:\n            i == 17 ?   c18:\n            i == 18 ?   c19:\n            i == 19 ?   c20:\n            i == 20 ?   c21:\n            i == 21 ?   c22:\n            i == 22 ?   c23:\n                        c24;\n}\n\n\nvec3 getNormal(vec3 p){\n    float d = 1.0e-4;\n    return normalize(vec3(\n        dist(p+vec3(  d, 0.0, 0.0)) - dist(p+vec3( -d, 0.0, 0.0)),\n        dist(p+vec3(0.0,   d, 0.0)) - dist(p+vec3(0.0,  -d, 0.0)),\n        dist(p+vec3(0.0, 0.0,   d)) - dist(p+vec3(0.0, 0.0,  -d))\n    ));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p=(2.0 * fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // camera\n    vec3 cPos = vec3(0.0, 0.0, 2.0);\n    vec3 cDir = normalize(vec3(0.0, 0.0, -1.0));\n    vec3 cUp = normalize(vec3(0.0, 1.0, 0.0));\n    vec3 cSide = normalize(cross(cDir, cUp));\n    float targetDepth = 1.0;\n\n    // ray\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    // marching loop\n    float distance = 0.0;\n    float rLen = 0.0;\n    vec3 rPos = cPos;\n\n    for (int i=0; i < 128; i++){\n        distance = dist(rPos);\n        rLen += distance;\n        rPos = cPos + ray * rLen;\n        if (distance < 1.0e-4 || 1.0e4 < rLen){\n            break;\n        }\n    }\n\n    // hit check\n    if (distance < 1.0e-4){\n        vec3 normal = getNormal(rPos);\n        vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n        float diff = clamp(dot(normal, lightDir), 0.1, 1.0);\n        vec3 color = wallpaper(rPos).xyz;\n        fragColor = vec4(vec3(diff*color), 1.0);\n    }\n    else{\n        fragColor = c00;\n    }\n}","name":"Image","description":"","type":"image"}]}