{"ver":"0.1","info":{"id":"XtSBWD","date":"1515712739","viewed":350,"name":"10/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I tried out some subsurface scattering method. I played with these in the past (2016?) but never got a good result. So now it is better. Enjoy the snowperson! :D","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["subsurfacescattering","dailyshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STEPS 48\n#define PIXELR 0.5/iResolution.x\n#define FAR 50.0\n\n#define PI 3.14159265\n#define PHI (sqrt(5.0)*0.5 + 0.5)\n\n#define HASHSCALE1 0.1031\n\nconst vec3 FOG_COLOR = vec3(0.5, 0.55, 0.65);\n\n//Distance functions and helpper functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\n\n// Rotate around a coordinate axis (i.e. in a plane perpendicular to that axis) by angle <a>.\n// Read like this: R(p.xz, a) rotates \"x towards z\".\n// This is fast if <a> is a compile-time constant and slower (but still practical) if not.\nvoid pR(inout vec2 p, float a){\n\tp = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\n// Shortcut for 45-degrees rotation\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n\n// Similar to fOpUnionRound, but more lipschitz-y at acute angles\n// (and less so at 90 degrees). Useful when fudging around too much\n// by MediaMolecule, from Alex Evans' siggraph slides\nfloat fOpUnionSoft(float a, float b, float r) {\n\tfloat e = max(r - abs(a - b), 0.0);\n\treturn min(a, b) - e*e*0.25/r;\n}\n\nfloat cosNoise(vec2 p){\n    return 0.5*(sin(p.x) + sin(p.y));\n}\n\nfloat sdf(vec3 p){\n    \n    float sphere = fSphere(p-vec3(0.0, 0.0, 0.0), 2.0);\n    sphere = fOpUnionSoft(sphere, fSphere(p-vec3(0.0, 2.0, 0.0), 1.5), 0.5);\n    sphere = fOpUnionSoft(sphere, fSphere(p-vec3(0.0, 4.0, 0.0), 1.0), 0.25);\n    \n    //For the ground distortion I have taken some inspiration from here:\n    //https://www.shadertoy.com/view/XlSSzK\n    float h = 0.0;\n    vec2 q = p.xz*0.5;\n    float s = 0.5;\n    \n    const mat2 m2 = mat2(1.,-1.,1., 0.5);\n    \n    for(int i = 0; i < 6; ++i){\n        h += s*cosNoise(q); \n        q = m2*q*0.8; \n        q += vec2(2.41,8.13);\n        s *= 0.52 + 0.2*h;\n    }\n    h *= 1.2;\n    \n    float ground = fPlane(p, vec3(0.,1.,0.), 1.)-h;\n    return fOpUnionSoft(ground, sphere, 1.0);\n}\n\n//calculate normals for objects\nvec3 normals(vec3 p){\n\tvec3 eps = vec3(PIXELR, 0.0, 0.0 );\n    return normalize(vec3(\n        sdf(p+eps.xyy) - sdf(p-eps.xyy),\n        sdf(p+eps.yxy) - sdf(p-eps.yxy),\n        sdf(p+eps.yyx) - sdf(p-eps.yyx)\n    ));\n}\n\n//Ambient occlusion method from https://www.shadertoy.com/view/4sdGWN\n//Random number [0:1] without sine\nfloat hash(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 randomSphereDir(vec2 rnd){\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i){\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\nfloat ambientOcclusion( in vec3 p, in vec3 n, in float maxDist, in float falloff ){\n\tconst int nbIte = 32;\n    const float nbIteInv = 1.0/float(nbIte);\n    const float rad = 1.0-1.0*nbIteInv; //Hemispherical factor (self occlusion correction)\n    \n\tfloat ao = 0.0;\n    \n    for( int i=0; i<nbIte; i++ )\n    {\n        float l = hash(float(i))*maxDist;\n        vec3 rd = normalize(n+randomHemisphereDir(n, l )*rad)*l; // mix direction with the normal\n        \t\t\t\t\t\t\t\t\t\t\t\t\t    // for self occlusion problems!\n        \n        ao += (l - max(sdf( p + rd ),0.)) / maxDist * falloff;\n    }\n\t\n    return clamp( 1.-ao*nbIteInv, 0., 1.);\n}\n\n\n//Subsurface scattering method inspired from noby\n//Example implementation in https://www.shadertoy.com/view/lllBDM\nfloat subsurfaceScattering(vec3 p, vec3 rd, vec3 n){\n    vec3 d = refract(rd, n, 1.31);\n    vec3 pos = p;\n    float thickness = 0.0;\n    const float max_scatter = 2.0;\n    for(float i = 0.1; i < max_scatter; i += 0.2){\n        pos += i*d;\n        float t = sdf(pos);\n        thickness += t;\n    }\n    thickness = max(0.0, -thickness);\n    float scatter= pow(ambientOcclusion(p, -normals(p), 4.0, 2.0), -0.5);\n    return scatter*min(max_scatter, 2.2/thickness);\n}\n\nvec3 colorify(vec3 p, vec3 rd, vec3 ro, vec3 ld, vec3 lc){\n    vec3 n = normals(p);\n    vec3 h = normalize(ld + rd);\n    \n    float angle = max(dot(reflect(-ld, n), rd), 0.0);\n    float spec = pow(angle, 10.0);\n    \n    float lamb = max(0.0, dot(n, ld));\n    float ss = max(0.0, subsurfaceScattering(p, rd, n));\n    lamb = smoothstep(0.0, 0.5, pow(ss, 0.6));\n\n    float fresnel = pow( max(0.0, 1.0+dot(n, rd)), 1.31 );\n    \n    vec3 cc = lc*(ambientOcclusion(p, n, 4.0, 1.0)) + \n        vec3(0.7, 0.7, 0.65)*lamb + vec3(0.6, 0.6, 0.7)*spec +\n        fresnel*FOG_COLOR;\n\n\treturn cc;\n}\n\nvec3 fog(vec3 col, vec3 p, vec3 ro, vec3 rd, vec3 ld, vec3 lc){\n    float dist = length(p-ro);\n\tfloat sunAmount = max( dot( rd, ld ), 0.0 );\n\tfloat fogAmount = 1.0 - exp( -dist*0.065);\n\tvec3  fogColor = mix(FOG_COLOR, lc, pow(sunAmount, 4.0));\n    return mix(col, fogColor, fogAmount);\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.2;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(sdf(ro));\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*sdf(p);\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < PIXELR || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*sdf(p));\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= PIXELR){\n\t\tt = candidate_t;\n\t}\n\treturn t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(10.0*cos(iTime*0.1), 3.5+sin(iTime*0.05), 12.0*sin(iTime*0.1));\n    vec3 rt = vec3(0.0, 2.5, 0.0);\n    \n    //vec3 ro = vec3(0.0, 0.0, -4.0);\n    //vec3 rt = vec3(0.0, -2.0, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    \n    vec3 ld = (rt-ro)/distance(ro, rt);\n    vec3 ld2 = (rt-vec3(0.0, -2.0, -6.0))/distance(vec3(0.0, -2.0, -6.0), rt);\n    \n    \n    vec3 lcol = vec3(0.7, 0.65, 0.5);\n    vec3 lcol2 = vec3(0.85, 0.75, 0.8);\n    vec3 col = FOG_COLOR;\n    \n    float t = march(ro, rd);\n\tvec3 p = rd*t+ro;\n    \n    if(t <= FAR){\n\t\tcol = colorify(p, rd, ro, ld, lcol) + \n            colorify(p, rd, ro, ld2, lcol2);\n        col *= 0.5;\n\t}\n    \n    vec3 fg = fog(col, p, ro, rd, ld, lcol) +\n\t\tfog(col, p, ro, rd, ld2, lcol2);\n\tcol = fg*0.5;\n    \n    //Vigenting\n    float vigentOffset = 0.005;\n    float darkness = 0.5;\n\tfloat dist = distance(uv, vec2( 0.5 ));\n\tcol *= smoothstep(0.8, vigentOffset * 0.799, dist *( darkness + vigentOffset ));\n    \n    \n    col = pow(col, 1.0/vec3(2.2));\n\tfragColor = vec4(col ,1.0);\n}","name":"Image","description":"","type":"image"}]}