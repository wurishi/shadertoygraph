{"ver":"0.1","info":{"id":"3s3SWl","date":"1573075703","viewed":113,"name":"square dancing circles","username":"thisisthais","description":"sample exercise from chapter 9 of the book of shaders","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circles","pattern","tilling","tbos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 st,float radius){\n  return smoothstep(20./iResolution.y , 0., length(st-.5) - radius*.5);\n}\n\nvec2 moveAndTile(vec2 st,float _zoom){\n  st*=_zoom;\n  \n  // slow down time\n  float time=iTime/2.;\n  \n  // naming some variables for ease of reading\n  float stepCounter=step(.5,fract(time));\n  float colTracker=step(1.,mod(st.y,2.));\n  float rowTracker=step(1.,mod(st.x,2.));\n  \n  // when stepCounter is 1 (which is half the time), we move side to side\n  // alternating rows move alternating directions\n  st.x-=2.*fract(time)*(1.-colTracker)*stepCounter;\n  st.x+=2.*fract(time)*colTracker*stepCounter;\n  \n  // otherwise when stepCounter is 0, we move up and down\n  // still alternating directions\n  st.y+=2.*fract(time)*rowTracker*(1.-stepCounter);\n  st.y-=2.*fract(time)*(1.-rowTracker)*(1.-stepCounter);\n  \n  return fract(st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 myRes = iResolution.yy/0.5;\n  vec2 st=fragCoord.xy/myRes.xy;\n  vec3 color=vec3(0.);\n  st=moveAndTile(st,20.);\n  \n  color=vec3(circle(st,.5));\n  \n  fragColor=vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}