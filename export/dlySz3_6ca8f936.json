{"ver":"0.1","info":{"id":"dlySz3","date":"1686243131","viewed":151,"name":"Pentagon Fractal","username":"Helife","description":"Simple pentagon fractal i thought it looked cool","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdPentagon(in vec2 p, in float r, in float speed, in float zoom)\n{\n    const vec3 k = vec3(0.809016994,0.587785252,0.726542528);\n    p.x = abs(p.x);\n    p -= 2.0*min(dot(vec2(-k.x,k.y),p),0.)*vec2(-k.x,k.y);\n    p -= 2.0*min(dot(vec2( k.x,k.y),p),0.)*vec2( k.x,k.y);\n    p -= vec2(clamp(p.x,-r*k.z,r*k.z),r) * speed;\n    float rs = (length(p)*sign(p.y)) * zoom;\n    if (zoom > 0.)\n        return abs(rs);\n    return rs;\n}\n\nvec3 palette(in float t)\n{\n    const vec3 a = vec3(0.5, 0.5, 0.5);\n    const vec3 b = vec3(0.5, 0.5, 0.5);\n    const vec3 c = vec3(1.0, 1.0, 1.0);\n    const vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nfloat neon(in float d)\n{\n    d = sin(d*8. + iTime)/25.;\n    d = abs(d);\n    d = pow(0.01 / d * 1.5, 1.2);\n    return d;\n}\n\nvec3 dark_magic(in vec2 unscaled_uv, in vec2 scaled_uv, in vec3 base_color, in float d, float pstep)\n{\n    float ad = abs(d);\n\n    vec3 c = base_color * 1.0 - exp(-6.0*ad);\n\n    // wtf ?? pentagon\n    c *= 0.8 + 0.2*-cos(110.0*ad);\n    c *= palette(length(unscaled_uv) + pstep) * length(scaled_uv);\n    return c;\n}\n\nvec2 render_scale(vec2 fragCoord)\n{\n    return (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n}\n\nfloat penta_step(float i)\n{\n    return 0.1 * i + iTime * 0.1;\n}\n\nfloat dark_magic_step(float i)\n{\n    return i * 10. + iTime * i / 100.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv0 = render_scale(fragCoord);\n    vec3 full_color = vec3(0.0);\n\n    float step_count = 1.;\n\n    vec3 base_color = vec3(1.0, 0.3, 1.0);\n    float distance_ = 0.5; // inverted smaller means bigger\n    float speed = 1.5; // inner to out animation - or +\n\n\n    for (float i = 0.0; i < step_count; ++i) {\n        vec2 uv = fract(uv0 * 0.01) - 0.5;\n        float d = sdPentagon(uv0, penta_step(i), speed, distance_) * 0.2;\n        full_color += dark_magic(uv0, uv, base_color, d, dark_magic_step(i)) * neon(d) / 1.25;\n    }\n\n    fragColor = vec4(full_color, 1.0);\n}","name":"Image","description":"","type":"image"}]}