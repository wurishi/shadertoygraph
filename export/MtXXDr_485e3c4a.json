{"ver":"0.1","info":{"id":"MtXXDr","date":"1435820982","viewed":1478,"name":"Physical Chromatic Aberration","username":"byungyoonc","description":"Simulates chromatic aberration effect using refraction to the texture2D iChannel0.\nThis is a physically reasonable simulation. You can change the amount of the aberration by changing the refractive index.","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["postprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 refractiveIndex = vec3(1.0, 1.015, 1.03);\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 normalizedTexCoord = vec2(2.0, 2.0) * uv - vec2(1.0, 1.0);    // [0, 1] -> [-1, 1]\n    vec3 texVec = vec3(normalizedTexCoord, 1.0);\n    vec3 normalVec = vec3(0.0, 0.0, -1.0);\n    vec3 redRefractionVec = refract(texVec, normalVec, refractiveIndex.r);\n    vec3 greenRefractionVec = refract(texVec, normalVec, refractiveIndex.g);\n    vec3 blueRefractionVec = refract(texVec, normalVec, refractiveIndex.b);\n    vec2 redTexCoord = ((redRefractionVec / redRefractionVec.z).xy + vec2(1.0, 1.0)) / vec2(2.0, 2.0);\n    vec2 greenTexCoord = ((greenRefractionVec / greenRefractionVec.z).xy + vec2(1.0, 1.0)) / vec2(2.0, 2.0);\n    vec2 blueTexCoord = ((blueRefractionVec / blueRefractionVec.z).xy + vec2(1.0, 1.0)) / vec2(2.0, 2.0);\n    \n    fragColor = vec4\n    (\n        texture(iChannel0, redTexCoord).r, \n        texture(iChannel0, greenTexCoord).g, \n        texture(iChannel0, blueTexCoord).b, \n        1.0\n    );\n}","name":"","description":"","type":"image"}]}