{"ver":"0.1","info":{"id":"tlsBz2","date":"1604683122","viewed":82,"name":"Amorphous Butterfly (HELICOID)","username":"delirious_blanc","description":"tutorial art coder - amorphous butterfly","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"   #define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n//this is good augmentation with poseNet\n\nfloat GetDist(vec3 p) {\n\n    vec3 bp = p-vec3(2,3,0);\n    //bp.z += sin(bp.z*3.5+iTime*2.)*.3; // flag wave\n    \n    bp.z = abs(bp.z) - .5; //mirroring\n    bp.z -= .7; //extend mirrored shape\n    \n    vec3 n = normalize(vec3(0,1,0));\n    bp -= 2. * n*min(0., dot(p, n));\n    \n    float scale = mix(1.,4., smoothstep(-1., 1.,bp.y));\n    bp.xz *= scale;\n    \n    bp.xz *= Rot(smoothstep(0., 1., bp.y)); \n    //bp.y -= sin(bp.y *.6 + iTime *.8);\n    //bp.z += sin(bp.z * 2.); //* .2;\n    \n    float box = sdBox(bp, vec3(1,1.5,1))/scale; \n    \n    //box-= sin(p.x*2.+iTime*2.)*.1; //displacement mapping\n   //\tbox = abs(box)-.2; //makes shell\n    \n    float d = box * .5; //min(plane, box*.6); //max get intersection, min is normal shape\n    \n    return d;\n}\n    //Rot(bp.y*2.); //+iTime*2.\n    //box = abs(box);\n   // box -= 1.;\n      // bp.x *= Rot( 2. + iTime*2.);\n   // bp.y *= bp.y*2. + iTime*2.;\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 5, 4);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n   // if(p.y<.01 && d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 Bg(vec3 rd) {\n\tfloat k = rd.y*.8+.8;\n    //light blue: .2, .5, 1\n    vec3 col = mix(vec3(0.105, 0.815, 0.615), vec3(0.972, 0.050, 0.2), k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(2., -9., -8);\n   // vec2 m = (2., 1.);\n  ro.xy *= Rot(-5.);\n  //ro.y += 2.;\n   // ro.xz *= Rot(0.6 * iTime * abs(sin(-5.))); //-m.y*3.14+1.\n    ro.yz *= Rot(10. * -m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    //ro.yz *= Rot(0.2 * iTime * sin(3.)); //-m.x*6.2831\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    col += Bg(rd);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        float spec = pow(max(0., r.y), 20.);\n\n    \tfloat dif = dot(n, normalize(vec3(1,2,3)))*.2+1.; //GetLight(p);\n        col = mix(Bg(r), vec3(dif), .2) + spec;\n        col += pal(rd.x, vec3(0.368, 0.219, 0.458),vec3(0.00,0.33, 0.67),vec3(0.2,0.4,0.2),vec3(0.0,0.33,0.27) );\n    \t//col = vec3(dif);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}