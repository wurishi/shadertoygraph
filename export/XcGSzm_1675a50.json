{"ver":"0.1","info":{"id":"XcGSzm","date":"1714975905","viewed":229,"name":"Vector Fields: 0x00","username":"newbie2718","description":"Visualization of FBM vectors.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["vector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int   N      = 1;\nconst float TWO_PI = 3.1415926535;\n\nconst float _ISUM = 1.0/(4.0*float(N*N+N)+1.0);\n\n//#define ENABLE_IMAGE_SLIDER\n\nfloat random(vec2 seed)\n{\n    return fract(mod(sin(dot(seed, vec2(12.9898, 78.233))), TWO_PI)*43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ir = 1.0/iResolution.xy;\n    vec2 uv = fragCoord*ir;\n\tvec2 offset = ir*iResolution.x*1.2/720.0;\n    \n    vec2 tuv = uv+random(uv+iTime)*0.003;\n    \n    vec3 col = vec3(0.0);\n    for(int x = -N; x <= N; ++x)\n    {\n        for(int y = -N; y <= N; ++y)\n        {\n            \n        \tcol += texture(iChannel0, tuv+vec2(x, y)*offset).rgb;\n        }\n    }\n    col *= _ISUM;\n    \n    col *= 1.0-pow(length(tuv-0.5), 0.6);\n    \n#if defined(ENABLE_IMAGE_SLIDER)\n    vec3 ocol = texture(iChannel0, uv).rgb;\n    \n    float mx = (iMouse.x*2.0-iResolution.x)/min(iResolution.x, iResolution.y);\n    uv = (fragCoord.xy*2.0-iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    col = mix(col, ocol, step(uv.x, mx));\n    col = mix(vec3(0.9), col, smoothstep(0.01, 0.012, abs(uv.x-mx)));\n#endif\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.1415926535;\nconst float TWO_PI = PI*2.0;\n\nconst float UV_SCALE     = 35.0;\nconst float FBM_UV_SCALE = 0.08;\nconst int   VISIBILITY   = 4;\n\nconst float LEN       = 8.0;\nconst float THICKNESS = 0.04;\n\nfloat random(float seed)\n{\n    return fract(mod(sin(dot(seed, 12.9898)), TWO_PI)*43758.5453);\n}\nfloat random(vec2 seed)\n{\n    return fract(mod(sin(dot(seed, vec2(12.9898, 78.233))), TWO_PI)*43758.5453);\n}\nfloat random(vec3 seed)\n{\n    return random(seed.xy+random(seed.z));\n}\nfloat interpolate(float f)\n{\n    return f*f*f*(f*(6.0*f-15.0)+10.0);\n}\nfloat irand(vec3 seed)\n{\n    vec3 i = floor(seed);\n    vec3 f = fract(seed);\n    \n    float c0 = random(i+vec3(0.0, 0.0, 0.0));\n    float c1 = random(i+vec3(1.0, 0.0, 0.0));\n    float c2 = random(i+vec3(0.0, 1.0, 0.0));\n    float c3 = random(i+vec3(1.0, 1.0, 0.0));\n    float c4 = random(i+vec3(0.0, 0.0, 1.0));\n    float c5 = random(i+vec3(1.0, 0.0, 1.0));\n    float c6 = random(i+vec3(0.0, 1.0, 1.0));\n    float c7 = random(i+vec3(1.0, 1.0, 1.0));\n    \n    vec3 u = vec3(interpolate(f.x), interpolate(f.y), interpolate(f.z));\n    \n    return mix(\n        mix(mix(c0, c1, u.x), mix(c2, c3, u.x), u.y),\n        mix(mix(c4, c5, u.x), mix(c6, c7, u.x), u. y),\n        u.z\n    );\n}\nfloat fbm(vec3 seed)\n{\n    const int   OCV = 8;\n    const float PERSISTENCE = 0.5;\n    const float FREQW = 2.0;\n\n    float sum = 0.0;\n    float am = PERSISTENCE;\n    float fq = 1.0;\n    for(int i = 0; i < OCV; ++i)\n    {\n        sum += irand(seed*fq)*am;\n        am *= PERSISTENCE;\n        fq *= FREQW;\n    }\n    return sum;\n}\n\nvec2 rad2vec(float rad)\n{\n    return vec2(cos(rad), sin(rad));\n}\nvec2 rot(vec2 p, vec2 vec)\n{\n    return vec2(p.x*vec.x-p.y*vec.y, p.x*vec.y+p.y*vec.x);\n}\n\nfloat dist(vec2 p, float len, vec2 vec, float rval)\n{\n    p = rot(p, vec);\n\n    float o = len*0.5;\n    p.x -= o;\n    p += sin(p.x+rval*TWO_PI)*0.1;\n    p = abs(p);\n    \n    float e = step(p.x, o);\n    \n    p.x -= o;\n    return mix(length(p), p.y, e);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    vec2 suv = uv*UV_SCALE;\n    vec2 iuv = floor(suv);\n    vec2 fuv = fract(suv);\n    \n    vec3 col = vec3(0.0);\n    for (int x = -VISIBILITY; x <= VISIBILITY; ++x)\n    {\n        for(int y = -VISIBILITY; y <= VISIBILITY; ++y)\n        {\n            vec2 offset = vec2(x, y);\n            vec2 niuv = iuv+offset;\n            vec2 nfuv = fuv-offset;\n            float rval = fbm(vec3(niuv*FBM_UV_SCALE, iTime*0.89));\n            \n            float len = rval*LEN;\n            vec2  vec = rad2vec(rval*TWO_PI);\n            \n            float d = dist(nfuv-0.5, len, vec, rval);\n            float flow = smoothstep(THICKNESS, THICKNESS+0.03, d);\n\n            vec3 flow_col = vec3(0.3, rval*1.35, rval*1.4);\n            \n            col += mix(flow_col, vec3(0.0), flow);\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}