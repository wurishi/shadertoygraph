{"ver":"0.1","info":{"id":"7dfGDl","date":"1616714762","viewed":51,"name":"Double slit interference","username":"HetSmiecht","description":"The double slit experiment, look it up: light is a wave.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["doubleslit","interferencepattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Y coordinates normalized between 0 and 1, but kept the aspect ratio\n    vec2 uvy = fragCoord/iResolution.y;\n    \n    float width = iResolution.x / iResolution.y;\n    \n    float pi2 = 2.0 * 3.14159265358979323846264338327950288;\n    \n    // the distance between the bottom and top slit of the diffraction grating\n    // use this value to zoom in or out\n    float slitDistance = 0.6;\n    \n    // the distance between two slits, counted in wavelengths\n    float waveLengthsPerSlit = 2.0;\n    \n    // the waveLength of the light is actually calculated sort of backwards,\n    // but it means that you can zoom in by changing 'gratingSize'\n    float waveLength = slitDistance / waveLengthsPerSlit;\n    \n    // the thing which actually counts the interference\n    vec2 brightness = vec2(0.0);\n    float phase1 = distance(uvy-vec2(width*0.5, 0.5), vec2(0, 0.5 * slitDistance)) / waveLength;\n    float phase2 = distance(uvy-vec2(width*0.5, 0.5), vec2(0,-0.5 * slitDistance)) / waveLength;\n    phase1 = mod(phase1, 1.0);\n    phase2 = mod(phase2, 1.0);\n    brightness += vec2(sin(phase1 * pi2),\n                       cos(phase1 * pi2));\n    brightness += vec2(sin(phase2 * pi2),\n                       cos(phase2 * pi2));\n    \n    // set the brightness equal to the length of the thing\n    // which counts the interference (scaled by some constant)\n    vec3 col = vec3(0.5 * length(brightness));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}