{"ver":"0.1","info":{"id":"dttcW7","date":"1699311655","viewed":126,"name":"raymarched cubes depthmap","username":"ninofiliu","description":"raymarched cubes depthmap","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"mldyW7","parentname":"basic raymached cube"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// lygia\n\nfloat boxSDF( vec3 p, vec3 b ) {\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cubeSDF(vec3 p, float s)  { return boxSDF(p, vec3(s)); }\n\n// mine\n\nfloat sdf(vec3 p) {\n    return cubeSDF(p, 1.);\n}\n\nconst float rot_speed = 0.3;\nconst float surface = 0.01;\nconst int max_steps = 100;\nconst float mod_size = 10.;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 cam_pos = 3.*vec3(2.*cos(rot_speed*iTime), 2.*sin(rot_speed*iTime), 1.);\n    vec3 cam_dir = normalize(-cam_pos); // looks at center\n    vec3 cam_x = vec3(cam_dir.y, -cam_dir.x, 0);\n    vec3 cam_y = cross(cam_x, cam_dir);\n    \n    vec2 uv = -1. + 2. * fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/max(iResolution.x, iResolution.y);\n    uv.y *= iResolution.y/max(iResolution.x, iResolution.y);\n    vec3 ray_dir = normalize(cam_dir + uv.x * cam_x + uv.y * cam_y);\n    \n    vec3 p = cam_pos;\n    int i = 0;\n    while(i < max_steps) {\n        float d = sdf(p);\n        if (d < surface) { break; }\n        p += ray_dir * d;\n        p = mod(p+0.5*vec3(mod_size), mod_size)-0.5*vec3(mod_size);\n        i++;\n    }\n    \n    fragColor = vec4(vec3(1.-float(i)/float(max_steps)),1.0);\n}","name":"Image","description":"","type":"image"}]}