{"ver":"0.1","info":{"id":"MtsBzf","date":"1512791011","viewed":1237,"name":"Diffusive Posterize","username":"cornusammonis","description":"Edge-preserving blur / posterization with diffusion. Let it run longer for more drastic posterization.","likes":19,"published":3,"flags":48,"usePreview":1,"tags":["diffusion","posterize"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define GAMMA 1.0\n\n#define RATE 1.0\n\n#define POWER 6.0\n\n#define EPSILON 1e-9\n\nbool reset() {\n    return texture(iChannel3, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float _K0 = -20.0/6.0; // center weight\n    const float _K1 = 4.0/6.0;   // edge-neighbors\n    const float _K2 = 1.0/6.0;   // vertex-neighbors\n    \n    vec2 vUv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    // 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    \n    #define T(d) pow(texture(iChannel0, fract(d)),vec4(GAMMA))\n    \n    vec4 u = T(vUv);\n    \n    vec4 u_nb[8] = vec4[8](\n        T(vUv+n),\n        T(vUv+e),\n        T(vUv+s),\n        T(vUv+w),\n        T(vUv+nw),\n        T(vUv+sw),\n        T(vUv+ne),\n        T(vUv+se)\n    );\n    \n    \n    float k[8] = float[8](\n        _K1,_K1,_K1,_K1,_K2,_K2,_K2,_K2\n    );\n    \n    vec4 m[8];\n    \n    vec4 sum = vec4(0);\n    for (int i = 0; i < 8; i++) {\n        vec4 f = k[i] / (EPSILON + pow(abs(u_nb[i] - u), vec4(POWER))); \n    \tm[i] = f;\n        sum += f;\n    }\n    \n    vec4 lapl = vec4(0);\n    for (int i = 0; i < 8; i++) {\n    \tlapl += m[i] * u_nb[i] / sum;\n    }\n    \n    lapl -= u;\n\n    vec3 init = texture(iChannel1, vUv).xyz;\n    // initialize with noise\n    if((length(u) < 0.001 && length(init) > 0.001) || reset()) {\n        fragColor = vec4(init,1);\n    } else {\n        fragColor = pow(vec4(u + RATE*lapl),vec4(1.0/GAMMA));\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"}]}