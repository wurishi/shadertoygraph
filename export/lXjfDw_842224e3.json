{"ver":"0.1","info":{"id":"lXjfDw","date":"1729553388","viewed":71,"name":"random walk string thing","username":"Orm","description":"old experiment, mouse to move camera. most code is from iq","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["intersection","spere","capsule"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph)\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nfloat capIntersect( in vec3 ro, in vec3 rd, in vec3 pa, in vec3 pb, in float r )\n{\n    vec3  ba = pb - pa;\n    vec3  oa = ro - pa;\n\n    float baba = dot(ba,ba);\n    float bard = dot(ba,rd);\n    float baoa = dot(ba,oa);\n    float rdoa = dot(rd,oa);\n    float oaoa = dot(oa,oa);\n\n    float a = baba      - bard*bard;\n    float b = baba*rdoa - baoa*bard;\n    float c = baba*oaoa - baoa*baoa - r*r*baba;\n    float h = b*b - a*c;\n    if( h>=0.0 )\n    {\n        float t = (-b-sqrt(h))/a;\n\n        float y = baoa + t*bard;\n        \n        // body\n        if( y>0.0 && y<baba ) return t;\n\n        // caps\n        vec3 oc = (y<=0.0) ? oa : ro - pb;\n        b = dot(rd,oc);\n        c = dot(oc,oc) - r*r;\n        h = b*b - c;\n        if( h>0.0 )\n        {\n            return -b - sqrt(h);\n        }\n    }\n    return -1.0;\n}\n\n// compute normal\nvec3 capNormal( in vec3 pos, in vec3 a, in vec3 b, in float r )\n{\n    vec3  ba = b - a;\n    vec3  pa = pos - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba),0.0,1.0);\n    return (pa - h*ba)/r;\n}\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\nvec3 hash3( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff)-vec3(.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    // camera movement\n\tfloat an = mouse.x*10.;\n\t//vec3 ro =  vec3(0.,0.,-1.);\n    vec3 ro = vec3( 1.0*cos(an), 0., 1.0*sin(an) );\n    vec3 ta = vec3( 0., 0., 0. );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n            \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        \n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 2.*ww );\n\n        const vec3 lig = normalize(vec3(0.5,1.0,-0.2));\n    \tvec3 col = vec3(sin(rd*2.)*.3)+.7;\n        //col = mix(col,vec3(0.2,0.6,0.8),length(p)*.5);\n        float tmin = 1e20;\n        \n        vec3 nor;\n    \n        vec4 capA = vec4(-0.3,-0.1,-0.1, 0.05);\n        vec4 capB = vec4(0.3,0.1,0.4, 0.05);\n    \tvec4 capC = texelFetch(iChannel0,ivec2(0,0),0);\n    \tvec4 capD = vec4(0.,sin(iTime*2.)*0.5,0., 0.05);\n  \n\t\tvec3 paint = vec3(0.2);\n    \tvec3 blue =\tvec3(0.1, 0.1,0.4);\n    \tvec3 green = vec3(.05, 0.6,0.1);\n    \tvec3 red = vec3(0.8, 0.1,0.05);\n    \tvec3 yellow = vec3(0.9, 0.5,0.01);\n    \tvec3 white = vec3(0.5, 0.5,0.5);\n    \tvec3 black = vec3(0.055,0.051,0.047);\n        \n        vec3 colors[] = vec3[](\n        vec3(0.1, 0.1,0.4),\n        vec3(.05, 0.6,0.1),\n        vec3(0.8, 0.1,0.05),\n        vec3(0.9, 0.5,0.01),\n        vec3(0.5, 0.5,0.5)\n        );\n        float amb=0.;\n        \n    const int v = 100;\n    vec3 cap[v];\n    float rad = 0.015+abs(cos(iTime*.1234))*0.025;\n    vec3 prev = vec3(0.0);\n    for(int i = 0; i < v; i++)\n    {\n        cap[i] = vec3((prev)*.4);\n        float speed = iTime*2.;\n        prev += vec3(hash3(uint(i+(int(speed)))));\n        \n        vec3 mixpos = mix(cap[0],cap[1],fract(speed));\n        {\n            float t = capIntersect( ro, rd, cap[i]-mixpos, cap[i-1]-mixpos, rad );\n            if (i==1){\n                t = capIntersect( ro, rd, cap[i]-mixpos, cap[i-1], rad );\n            }\n            if( t>0.0 && t<tmin )\n            {\n                tmin = t;\n                vec3 pos = ro + t*rd;\n                nor = capNormal(pos, cap[i]-mixpos, cap[i-1]-mixpos, rad);\n                paint = black;\n                amb = .15;\n            vec3 ref = reflect(nor,rd);\n            vec3 dif =  mix((vec3(sin(ref*2.)*.3)+.7),paint,-dot(rd,nor)*1.3);// (dot(sin(ref*2.),nor)+1.)*dot(ref,nor);\n            vec3  hal = normalize(lig-rd);\n            float spec = clamp(dot(nor,hal),0.0,1.0);\n\t        col =  paint*amb;\n            col += pow(spec,200.)+dif*paint;\n            }\n        }\n        {\n            float mixi = mix(float(i),float(max(0,i-1)),fract(speed));\n            vec4 sph = vec4(cap[i].rgb-mixpos, rad+.001+(sin(iTime+float(mixi))*.5+.5)*rad*.6);\n            float t = sphIntersect( ro, rd, sph);\n            if( t>0.0 && t<tmin )\n            {\n                tmin = t;\n                vec3 pos = ro + t*rd;\n                nor = sphNormal(pos, sph );\n                int id = (int(speed)+i)%colors.length();\n                if(i==0){\n                paint = mix(colors[(id)],colors[(id+1)%colors.length()],fract(speed));\n                }else{\n                paint = colors[(id)];\n                }\n                amb = .5;\n                float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n                vec3  hal = normalize(lig-rd);\n                float spec = clamp(dot(nor,hal),0.0,1.0);\n                col =  paint*amb;\n                col += pow(spec,10.)*.2+dif*paint;\n            }\n   \t\t}\n    }\n\n\n\n        col = pow(col, vec3(0.45));\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}