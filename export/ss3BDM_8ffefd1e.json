{"ver":"0.1","info":{"id":"ss3BDM","date":"1656567691","viewed":124,"name":"Full HSV pallette generator","username":"Andrew900460","description":"Shader that generates a pallete of colors. But it also picks unique Hue and Saturation values, which are often good practice in art (and pixel art).\nThere are also different parrameters you can tweak to change how much the H,S,V are changed for each color","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["color","hsv","generator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// hsv functions from https://gist.github.com/983/e170a24ae8eba2cd174f\n\n// Controlls:\n// iMouse.x adjusts \"hue slope\" or how much the hue changes for each color.\n// iMouse.y adjusts \"hue start\" or the starting hue for the left-most color.\n\nfloat steps(float x,float steps) {\n    return ceil(x*steps)/steps;\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // mouse X position controlls how much each color is hue shifted\n    float hueStart = 0.08 + iMouse.y/iResolution.y;\n    float hueSlope = -0.12 - (iMouse.x/400.0 - 1.0);\n    float saturationSlope = -0.7;\n    float saturationStart = 0.9;\n    float vibranceSlope = 0.9;\n    float vibranceStart = 1.0;\n    \n    float p = steps(uv.x,5.0);\n    //p*=p;\n    float pInv = 1.0-p;\n    \n    \n    float h = p*hueSlope;\n    float s = p * saturationSlope + saturationStart;\n    float v = pow(p,0.8) * -vibranceSlope + vibranceStart;\n    \n    vec3 hsv = hsv2rgb(vec3(hueStart+h,s,v));\n    \n    vec3 col = vec3( hsv );\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}