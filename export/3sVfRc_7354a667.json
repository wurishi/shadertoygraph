{"ver":"0.1","info":{"id":"3sVfRc","date":"1607628737","viewed":138,"name":"Shaderdoodle","username":"oneshade","description":"Doodling with rotation. If you watch it long enough you will see the pattern (it's symmetrical too!).","likes":8,"published":3,"flags":32,"usePreview":0,"tags":["doodle","rotation","parametric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float line(in vec2 p, in vec2 a, in vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    float thickness = 3.0 / iResolution.y;\n    vec2 linkOrigin = vec2(0.0, 0.0);\n    for (int link=0; link < links.length(); link++) {\n        float currentAngle = links[link].x + links[link].y * iTime;\n        vec2 linkEnd = linkOrigin + vec2(cos(currentAngle), sin(currentAngle)) * links[link].z;\n        fragColor.rgb += smoothstep(thickness, 0.0, line(uv, linkOrigin, linkEnd));\n        linkOrigin = linkEnd;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    float thickness = 2.0 / iResolution.y;\n    vec2 linkOrigin = vec2(0.0, 0.0);\n    for (int link=0; link < links.length(); link++) {\n        float currentAngle = links[link].x + links[link].y * iTime;\n        vec2 linkEnd = linkOrigin + vec2(cos(currentAngle), sin(currentAngle)) * links[link].z;\n        linkOrigin = linkEnd;\n    }\n\n    fragColor.rgb = mix(fragColor.rgb, hue2rgb(fract(0.25 * iTime)), smoothstep(thickness, 0.0, length(uv - linkOrigin) - 0.001));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define iTimeDelta 0.01\n#define iTime (float(iFrame) * iTimeDelta)\n#define hue2rgb(t) clamp(abs(6.0 * fract(vec3(t, t - 1.0 / 3.0, t - 2.0 / 3.0)) - 3.0) - 1.0, 0.0, 1.0)\n\n// Starting angle, rotation speed, and length of each link:\nconst vec3[] links = vec3[4](vec3(0.0, -0.5, 0.2),\n                             vec3(0.0,  0.5, 0.1),\n                             vec3(0.0, -0.3, 0.3),\n                             vec3(0.0,  0.5, 0.2));","name":"Common","description":"","type":"common"}]}