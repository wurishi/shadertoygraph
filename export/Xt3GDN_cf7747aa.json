{"ver":"0.1","info":{"id":"Xt3GDN","date":"1469191492","viewed":570,"name":"[Test] Heat diffusion","username":"Ultraviolet","description":"Just some testing on heat diffusion.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["diffusion","heat","finitedifferences"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sq(float x) {return x*x;}\n\nvec3 red_blue_colorscheme(float v) {\n\n    //v=clamp(0.5*(v+1.0),0.0,1.0);\n    v=0.5*(v+1.0);\n\n    float v2=v*v,v3=v2*v,v4=v3*v,v5=v4*v;\n\n    return vec3 (0.237-2.13*v + 26.92*v2-65.5*v3+63.5*v4-22.36*v5,\n\n                 sq((0.572+1.524*v-1.811*v2)/(1.0-0.291*v+0.1574*v2)),\n\n                 1.0/(1.579-4.03*v+12.92*v2-31.4*v3+48.6*v4-23.36*v5));\n\n}\n\nvec3 iso(float v)\n{\n    float mean = iMouse.x/iResolution.x*2.0 - 1.0;\n    float width = iMouse.y/iResolution.y*0.1;\n    \n    if(v < mean+0.5*width && v > mean-0.5*width)\n        return vec3(smoothstep(0.0, 1.0, abs(v-mean)/width));\n    return vec3(1.0);\n    \n}\n\nvec2 screen2uv(in vec2 fragCoord)\n{\n    return fragCoord / iResolution.xy;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = screen2uv(fragCoord);\n\tfragColor = vec4(red_blue_colorscheme(texture(iChannel0,  uv).x), 1.0);\n\t//fragColor = vec4(iso(texture(iChannel0,  uv).x), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n#define Dt (1.0)\n\nvec2 screen2world(in vec2 fragCoord)\n{\n    return (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n}\n\nvec2 world2screen(in vec2 pos)\n{\n    return (pos*iResolution.y + iResolution.xy) * 0.5;\n}\n\nvec2 screen2uv(in vec2 fragCoord)\n{\n    return fragCoord / iResolution.xy;\n}\n\nvec2 uv2screen(in vec2 uv)\n{\n    return uv * iResolution.xy;\n}\n\nvec2 world2uv(in vec2 pos)\n{\n    return world2screen(pos) / iResolution.xy;\n}\n\nvec2 uv2world(in vec2 uv)\n{\n    return screen2world(uv2screen(uv));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = screen2world(fragCoord);\n    vec2 uv = screen2uv(fragCoord);\n    \n    // Isothermal sources\n    \n    if(length(pos - vec2(-1,0)) < 0.1)\n    {\n        fragColor = vec4(-1);\n        return;\n    }\n    \n    if(length(pos - vec2(1,0)) < 0.1)\n    {\n        fragColor = vec4(1);\n        return;\n    }\n    \n    float val = texture(iChannel0,  uv).x;\n    \n    float val_px = texture(iChannel0,  screen2uv(fragCoord+vec2( 1, 0))).x;\n    float val_mx = texture(iChannel0,  screen2uv(fragCoord+vec2(-1, 0))).x;\n    float val_py = texture(iChannel0,  screen2uv(fragCoord+vec2( 0, 1))).x;\n    float val_my = texture(iChannel0,  screen2uv(fragCoord+vec2( 0,-1))).x;\n    float m = 0.25*(val_px+val_mx+val_py+val_my);\n    float delta = m - val;\n    \n    float sigma = 0.2;\n    \n    fragColor = vec4(m);\n    //fragColor = vec4(val + sigma * delta);\n}\n\n\n\n","name":"Buf A","description":"","type":"buffer"}]}