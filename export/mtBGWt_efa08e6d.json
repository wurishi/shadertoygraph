{"ver":"0.1","info":{"id":"mtBGWt","date":"1674102000","viewed":91,"name":"Fractal map","username":"PlankASS","description":"recurring 1/(z^2+1) + a\n\nTODO: try to make it smooth between changes in iteration count using some kind of analytic continuation or something. If not then just lerp.\n\nhttps://www.desmos.com/calculator/9rjqcopkik","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat Pi = 3.14159f;\nvec2 I = vec2(0.0f, 1.0f);\nvec2 one = vec2(1.0f,0.0f);\n\nfloat weight(float x, float centre, float deviation){\n    float result = (x-centre)*(x-centre)/(deviation*deviation) + 1.0f;\n    return 1.0f/result;\n}\n\nvec3 getColor(vec2 point){\n\n    float angle = atan(point.y, point.x);\n    \n    angle = angle;\n    float spread = 1.2f;\n    \n    vec3 col = weight(angle, mod(0.0f - Pi, 2.0f*Pi) - Pi, spread)*vec3(1,0,0);\n    col += weight(angle, mod(2.0f/3.0f*Pi - Pi, 2.0f*Pi) - Pi, spread)*vec3(0,1,0);\n    col += weight(angle, mod(4.0f/3.0f*Pi - Pi, 2.0f*Pi) - Pi, spread)*vec3(0,0,1);\n    \n    float mag = 1.3f*length(point)/(length(point)+1.0f);\n    \n    return mag*col;\n}\n\n\nvec2 mult(vec2 a, vec2 b){\n    return vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvec2 div(vec2 a, vec2 b){\n    return vec2(a.x*b.x + a.y*b.y, a.x*b.y - a.y*b.x)/(b.x*b.x + b.y*b.y);\n}\n\nvec2 Cexp(vec2 z){\n    float R = exp(z.x);\n    vec2 v = vec2(cos(z.y), sin(z.y));\n    \n    return R*v;\n}\n\nvec2 Ccos(vec2 z){\n    return 0.5f * (Cexp(z) + Cexp(-z));\n}\n\nvec2 Csin(vec2 z){\n    return -mult(I, 0.5f * (Cexp(z) + Cexp(-z)));\n}\n\nvec2 conj(vec2 z){\n    return vec2(z.x, -z.y);\n}\n\nfloat f = 0.02f;\n\nvec2 function_z(vec2 z, vec2 a){\n    vec2 z_m = mult(mult(mult(mult(mult(mult(z,z),z),z),z),z),z);\n    return div(a,z_m + I);\n}\n\nvec2 mapping(vec2 z, vec2 a){\n    \n    float r = 0.0001f*iTime + 0.7f;\n    \n    \n    vec2 current_result = z;\n    vec2 future_result;\n    \n    float numIter = floor(200.0f * (1.0f - cos(2.0f*Pi*iTime/100.0f)));\n    \n    for(int i = 1; i < int(numIter); i++){\n        \n        current_result = function_z(current_result, a);\n        \n        \n        //Notable formulas\n        //result = Cexp(-mult(result,z)+a);\n        //result = Cexp(-mult(result,result));\n    \n    }\n    \n    future_result = function_z(current_result, a);\n    float last_time = acos(1.0f - numIter/200.0f) * 100.0f / (2.0f * Pi);\n    float t_gap = 100.0f/(2.0f*Pi) * acos(cos(2.0f*Pi*last_time/100.0f) - 1.0f/200.0f) - last_time;\n    float t_passed = (iTime - last_time)/t_gap;\n    \n    vec2 result = future_result * (t_passed) + current_result * (1.0f - t_passed);\n    \n    \n    \n    if(isinf(result.x)){\n        return vec2(0,0);\n    }\n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0f*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec2 mousepos = (2.0f*iMouse.xy - iResolution.xy)/iResolution.y;\n    \n    float mouseClicked = iMouse.z;\n    \n    float scale = 1.0f;\n    vec2 offset = vec2(-0.0f, 0.0f);\n    \n    vec2 z = uv * scale + offset;\n    mousepos = mousepos * scale + offset;\n    \n    \n    \n    // Time varying pixel color\n    vec2 w1 = mapping(z, mousepos);\n    vec2 w2 = mapping(vec2(0.00000001f,0.0f), z);\n    \n    vec3 col = getColor(w1)/1.0f + 0.0f*vec3(1.0,1.0,1.0);\n    \n    if(mouseClicked > 0.0f){\n        col *= 0.5f;\n        \n        col += 0.7*getColor(w2)/1.0f;\n        \n    }\n    \n    col += vec3(0.4f,0.4f,0.4f);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    float r = 0.0001f*iTime + 0.7f;\n    //vec2 a = r*vec2(cos(f*iTime), sin(f*iTime));\n    \n    //if(length(z - a) < 0.03f){\n    //    fragColor = vec4(1.0,1.0,1.0,1.0);\n   // }\n    \n    \n    if(length(z - mousepos) < 0.1f){\n        fragColor += 0.00003f*vec4(1.0,1.0,1.0,1.0)/(length(z - mousepos)*length(z - mousepos));\n    }\n}\n\n","name":"Image","description":"","type":"image"}]}