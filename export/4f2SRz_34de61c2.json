{"ver":"0.1","info":{"id":"4f2SRz","date":"1705970476","viewed":82,"name":"UV fields","username":"Nikio","description":"Combinations of [0,1] functions, used as texture UVs.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["uv","texturemapping"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI      = 3.14159265;\nconst float TWO_PI  = 6.28318530;\nconst float PEBBLES = 0.1;\nconst float CITY    = 0.2;\nconst float ROCK    = 0.3;\nconst float UI_USAW = 1.0;\nconst float UI_VSAW = 2.0;\nconst float SAW_CIRCULAR = 0.0;\nconst float SAW_SUN      = 0.1;\nconst float SAW_RADIAL   = 0.2;\nconst float SAW_LINE     = 0.3;\nconst float SAW_SYM_LINE = 0.4;\nconst float SAW_REG_LINE = 0.5;\nconst float SAW_ROUND_REG= 0.6;\n\n// UTIL //---------------------------------------------------------------------------------------------------\nfloat vecAngle(vec2 v) {\n\tv = normalize(v);\n\tif(v.y > 0.0) {\n        return acos(v.x);\n    } else {\n        return -acos(v.x);\n    }\n}\n\n// SAWS //---------------------------------------------------------------------------------------------------\nfloat circularSaw(vec2 s, float n) {\n    return fract(vecAngle(s) / TWO_PI * n);\n}\nfloat sunSaw(vec2 s, float n, float r) {\n    return clamp(1.0 - abs(fract(vecAngle(s) / TWO_PI * n - 0.5) * 2.0 - 1.0) / r, 0.0, 1.0);\n}\nfloat radialSaw(vec2 s, float n) {\n    return fract(length(s) * n);\n}\nfloat lineSaw(vec2 s, vec2 d, float n) {\n    d = normalize(d);\n    return fract(dot(s, d) * n);\n}\nfloat symLineSaw(vec2 s, vec2 d, float n) {\n    d = normalize(d);\n    return fract(abs(dot(s, d)) * n);\n}\nfloat regSaw(vec2 s, float m, float n) {\n    float a = (floor(vecAngle(s) / (TWO_PI / n)) + 0.5) * (TWO_PI / n);\n    return symLineSaw(s, vec2(cos(a), sin(a)), m);\n}\nfloat roundRegSaw(vec2 s, float m, float n, float r) {\n    float a = (floor(vecAngle(s) / (TWO_PI / n)) + 0.5) * (TWO_PI / n);\n    a = mix(a, vecAngle(s), r * sunSaw(s, 6.0, 1.0));\n    return symLineSaw(s, vec2(cos(a), sin(a)), m);\n}\nfloat hMapSaw(vec2 s, sampler2D t, float r) {\n    return length(texture(t,s).xyz);\n}\nfloat nMapSaw(vec2 s, sampler2D t, float r) {\n    return length(texture(t, s));\n}\n\n// MAIN //---------------------------------------------------------------------------------------------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.3,0.2,0.2,1.0);\n\n    float r = iResolution.x / iResolution.y;\n    vec2 s = (fragCoord/iResolution.xy) * 2.0 - vec2(1.0);\n    s.x *= r;\n    vec2 p = fragCoord.xy/iResolution.xy;\n    ivec2 i;\n    if(iMouse.z > 0.0) {\n        i = ivec2(iMouse.xy/iResolution.xy * 8.0);\n    } else {\n        i = ivec2(fract(iTime*0.1)*8., fract(iTime*0.1/8.)*8.);\n        //i = ivec2(int(0.05*iTime*8.0)%8,0);\n    }\n\n    float u[8], v[8];\n    u[0] = circularSaw(s, 6.0);\n    u[1] = sunSaw(s, 6.0, 1.0);\n    u[2] = radialSaw(s, 1.0);\n    u[3] = lineSaw(s, vec2(0.5, 0.5), 1.0);\n    u[4] = symLineSaw(s, vec2(0.5, 0.5), 1.0);\n    u[5] = regSaw(s, 1.0, 6.0);\n    u[6] = roundRegSaw(s, 1.0, 6.0, 1.0);\n    u[7] = hMapSaw(s, iChannel1, 1.0);\n\n    v[0] = circularSaw(s, 6.0);\n    v[1] = sunSaw(s, 6.0, 1.0);\n    v[2] = radialSaw(s, 1.0);    \n    v[3] = lineSaw(s, vec2(0.5, -0.5), 1.0);\n    v[4] = symLineSaw(s, vec2(0.5, -0.5), 1.0);\n    v[5] = regSaw(s, 1.0, 6.0);\n    v[6] = roundRegSaw(s, 1.0, 6.0, 1.0);\n    v[7] = hMapSaw(s, iChannel1, 1.0);\n\n    vec2 uv = vec2(u[i.x], v[i.y]);\n    fragColor.xyz = texture(iChannel0, uv).xyz;\n}","name":"Image","description":"","type":"image"}]}