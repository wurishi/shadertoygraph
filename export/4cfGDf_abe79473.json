{"ver":"0.1","info":{"id":"4cfGDf","date":"1703603119","viewed":58,"name":"asymmetric blocks connect struct","username":"jt","description":"In the pattern of (asymmetric/irregular)\nrandom-blocks-by-alternating-double-T-crossings,\nplace structures aligned with neighbor blocks\n(neighbor w. respect to T-crossing)\nThis implementation is intended for lookup with float indices.\nClick displays grid.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random","t","blocks","double","overlap","connected","connection","alternating","irregular","asymmetric","extend","extended"],"hasliked":0,"parentid":"Mcf3zs","parentname":"asymmetric blocks connected flt"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4cfGDf asymmetric blocks connect struct, 2023 by jt\n// based on https://www.shadertoy.com/view/Mcf3zs asymmetric blocks connected flt\n// based on https://www.shadertoy.com/view/dstfzf asymmetric blocks compactified float\n\n// NOTE: integer hash for comparison with integer version\n//       (can be changed by uncommenting line in block_hash)\n\n// integer variant: TODO\n\n// In the pattern of (asymmetric/irregular)\n// random-blocks-by-alternating-double-T-crossings,\n// place structures aligned with neighbor blocks\n// (neighbor w. respect to double-T-crossing).\n// This implementation is intended for lookup with float indices.\n// Click to show underlying grid.\n\n// tags: random, t, blocks, double, overlap, connected, connection, alternating, irregular, asymmetric, extend, extended\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat msign(in float x) { return (x<0.0)?-1.0:1.0; }\n\nfloat sdEllipse( vec2 p, in vec2 ab ) // https://www.shadertoy.com/view/4sS3zz Ellipse - distance 2D by iq\n{\n    //if( ab.x==ab.y ) return length(p)-ab.x;\n    if(abs(ab.x - ab.y) < 0.001) return length(p)-ab.x;\n\n    p = abs( p );\n    if( p.x>p.y ){ p=p.yx; ab=ab.yx; }\n\n    float l = ab.y*ab.y - ab.x*ab.x;\n\n    float m = ab.x*p.x/l;\n    float n = ab.y*p.y/l;\n    float m2 = m*m;\n    float n2 = n*n;\n\n    float c = (m2+n2-1.0)/3.0;\n    float c3 = c*c*c;\n\n    float d = c3 + m2*n2;\n    float q = d  + m2*n2;\n    float g = m  + m *n2;\n\n    float co;\n\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h) + 2.0;\n        float t = sin(h) * sqrt(3.0);\n        float rx = sqrt( m2-c*(s+t) );\n        float ry = sqrt( m2-c*(s-t) );\n        co = ry + sign(l)*rx + abs(g)/(rx*ry);\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt(d);\n        float s = msign(q+h)*pow( abs(q+h), 1.0/3.0 );\n        float t = msign(q-h)*pow( abs(q-h), 1.0/3.0 );\n        float rx = -(s+t) - c*4.0 + 2.0*m2;\n        float ry =  (s-t)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = ry/sqrt(rm-rx) + 2.0*g/rm;\n    }\n    co = (co-m)/2.0;\n\n    float si = sqrt( max(1.0-co*co,0.0) );\n\n    vec2 r = ab * vec2(co,si);\n\n    return length(r-p) * msign(p.y-r.y);\n}\n\nfloat ellipse(vec2 a, vec2 b, vec2 p)\n{\n    return sdEllipse(p - (a+b)/2.0, abs(a-b)/2.0);\n}\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n//// Wellons lowbias32 from http://nullprogram.com/blog/2018/07/31\n//// perhaps the best ever devised for this op count, great distribution and cycle\n//uint lowbias32(uint x)\n//{\n//    x ^= x >> 16;\n//    x *= 0x7feb352du;\n//    x ^= x >> 15;\n//    x *= 0x846ca68bu;\n//    x ^= x >> 16;\n//    return x;\n//}\n\n#define HASH(u) triple32(u)\n//#define HASH(u) lowbias32(u)\n\nuint uhash(ivec2 v, bool choose)\n{\n//return uvec2(0u); // verify grid alignment\n    return HASH((uint(v.x)*2u+uint(choose) + HASH(uint(v.y)*2u+uint(choose))) /*+ uint(iFrame / 120)*/);\n}\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nstruct block\n{\n    vec4 outer;\n    vec4 inner;\n    ivec2 id;\n    ivec2 nb;\n};\n\n#define RES 8\n\nfloat block_hash(ivec2 t, int x, int y, bool choose, bool mirror)\n{\n    ivec2 d = (mirror?ivec2(y, x):ivec2(x, y));\n    //vec2 r = fract(hash22(vec2(t+d)))+vec2(d); // float hash\n    //vec2 r = fract(vec2(uhash(t+d, choose) % uint(RES))/float(RES))+vec2(d); // integer hash with fixed resolution\n    //return choose?r.y:r.x;\n    return fract(float(uhash(t+d, choose) % uint(RES))/float(RES))+float(choose?d.y:d.x); // integer hash with fixed resolution\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Returns outer box (minimum, maximum) and inner box (aligned with neighbors), id, neighbor id.\n// Compactified using implicit matrix transpose & deferred hash calls.\n//(NOTE: inlining the hash-function and using out parameters instead of block structure\n//       could be used to turn this into a stand-alone function.)\nblock blocks_layout(vec2 p) // https://www.shadertoy.com/view/dstfzf asymmetric blocks compactified f by jt\n{\n    ivec2 tile = ivec2(floor(vec2(p))); // global coordinates of tile\n    vec2 local = fract(p);\n\n    //bool flip = (tile.x % 2) != (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) != (tile.y & 1); // alternate direction of double T crossings: vertical or horizontal\n    //flip = !flip; // \"dual\" pattern (i.e. T-crossings flipped)\n\n    // layout (NOTE: matrix notation upside down compared to coordinate system!)\n    // NW N NE\n    //  W C E\n    // SW S SE\n\n    // transposed (NOTE: matrix notation upside down compared to coordinate system!)\n    // SE W NE\n    //  N C S\n    // SW E NW\n\n    if(flip) // horizontal line goes through: swap vertical with horizontal\n    {\n        // swap components\n        local = local.yx;\n    }\n\n    // vertical line goes through (on flip transpose for horizontal line)\n\n    //                 c\n    //   +-+---------+---+-------+\n    //   | |         |   |       |\n    //   | |         |   #-------+ d\n    // d +-#-#-------+---M       |\n    //   |   |       |   |       |\n    //   +---+-------+---+-------+\n    //   |   |       |   |       |\n    //   |   m-------+---#---#---+\n    //   +---#       |       |   |\n    //   |   |       |       |   |\n    //   +---+-------+-------+---+\n\n    float c = block_hash(tile, 0, 0, flip, flip); // offset of central line\n    int x = 1-int(local.x < c); // [0,1]\n    int X = 2*x-1; // [-1,+1]\n    float d = block_hash(tile,+X, 0,!flip, flip); // offset of branching line\n    float e = block_hash(tile,-X, 0,!flip, flip); // offset of branching line\n\n    int y = 1-int(local.y < d); // [0,1]\n    int Y = 2*y-1; // [-1,+1]\n\n    vec4 outer =\n        vec4\n        (\n            // block corner in central tile\n            c,\n            d,\n            // block corner in (X,Y) tile\n            block_hash(tile, X, Y,  flip, flip),\n            block_hash(tile, 0, Y, !flip, flip)\n        );\n\n    vec4 inner =\n        vec4\n        (\n            block_hash(tile,  0,2*Y, flip, flip),\n            e,\n            block_hash(tile,  X, -Y, flip, flip),\n            block_hash(tile,2*X,  Y,!flip, flip)\n        );\n\n    if(flip) tile = tile.yx;\n\n    outer += vec2(tile).xyxy;\n    inner += vec2(tile).xyxy;\n\n    ivec2 id = tile + ivec2(x,y);\n    ivec2 nb = tile + ivec2(1-x,1-int(local.y < e));\n\n    if(flip) // horizontal line goes through: unswap vertical with horizontal\n    {\n        outer = outer.yxwz;\n        inner = inner.yxwz;\n        id = id.yx;\n        nb = nb.yx;\n    }\n\n    {\n        // fix order of outer min/max corners\n        vec2 center = (outer.xy+outer.zw)/2.0;\n        vec2 extent = abs(outer.xy-outer.zw)/2.0;\n\n        outer.xy = center-extent;\n        outer.zw = center+extent;\n    }\n\n    {\n        // fix order of inner min/max corners\n        vec2 center = (inner.xy+inner.zw)/2.0;\n        vec2 extent = abs(inner.xy-inner.zw)/2.0;\n\n        inner.xy = center-extent;\n        inner.zw = center+extent;\n    }\n\n    return block(outer, inner, id, nb);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n#define scale (float(RES*3))\n\nvec3 color(ivec2 id)\n{\n    vec3 c = hash32(vec2(id));\n    if(((id.x^id.y)&1)==0)\n        c = 1.0 - c;\n    return c;\n}\n\nfloat draw(float d)\n{\n    float Ry = iResolution.y;\n    return smoothstep(1.0/Ry, 2.0/Ry,abs(d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 p)\n{\n    vec2 R = iResolution.xy;\n    p = (2.0 * p - R) / R.y;\n    vec2 m = iMouse.xy;\n    m = (2.0 * m - R) / R.y;\n\n    block blk = blocks_layout(p*scale/vec2(RES));\n    blk.outer *= float(RES);\n    blk.inner *= float(RES);\n\n    vec3 c = color(blk.id);\n    // differences between pixel-position and corners\n    vec2 q0 = p-blk.outer.xy/scale;\n    vec2 q1 = p-blk.outer.zw/scale;\n    vec2 Q0 = p-blk.inner.xy/scale;\n    vec2 Q1 = p-blk.inner.zw/scale;\n    // visualize edges\n    c = min(c, vec3(smoothstep(2.5/R.y, 5.0/R.y,+q0.x)));\n    c = min(c, vec3(smoothstep(2.5/R.y, 5.0/R.y,+q0.y)));\n    c = min(c, vec3(smoothstep(2.5/R.y, 5.0/R.y,-q1.x)));\n    c = min(c, vec3(smoothstep(2.5/R.y, 5.0/R.y,-q1.y)));\n\n    if(false) // visualize min-max\n    {\n        c = min(c, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(q0)-1.0/scale))));\n        c = min(c, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(q1)-1.0/scale))));\n        c = min(c, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(Q0)-0.5/scale))));\n        c = min(c, vec3(smoothstep(2.0/R.y, 4.0/R.y, abs(length(Q1)-0.5/scale))));\n    }\n\n    // visualize extended edges\n    c = min(c, vec3(draw(+Q0.x)));\n    c = min(c, vec3(draw(+Q0.y)));\n    c = min(c, vec3(draw(+Q1.x)));\n    c = min(c, vec3(draw(+Q1.y)));\n\n    vec4 ab = vec4(max(blk.outer.xy,blk.inner.xy),min(blk.outer.zw,blk.inner.zw))/scale;\n    /*\n    if(blk.inner.x > blk.outer.x)\n    {\n        float d = ellipse(vec2(blk.outer.x/scale,a.y),vec2(a.x,b.y),p);\n        if(d < 0.0) color *= 0.25;\n    }\n    */\n    //if(all(lessThan(blk.outer.xy, blk.inner.xy)))\n    if(blk.outer.x < blk.inner.x && blk.outer.y < blk.inner.y)\n    {\n        float d = ellipse(blk.outer.xy/scale,ab.xy,p);\n        if(d < 0.0) c = color(blk.nb);\n        c = min(c, vec3(draw(d)));\n    }\n    //if(all(greaterThan(blk.outer.zw, blk.inner.zw)))\n    if(blk.outer.z > blk.inner.z && blk.outer.w > blk.inner.w)\n    {\n        float d = ellipse(blk.outer.zw/scale,ab.zw,p);\n        if(d < 0.0) c = color(blk.nb);\n        c = min(c, vec3(draw(d)));\n    }\n    if(blk.outer.x < blk.inner.x && blk.outer.w > blk.inner.w)\n    {\n        float d = ellipse(blk.outer.xw/scale,ab.xw,p);\n        if(d < 0.0) c = color(blk.nb);\n        c = min(c, vec3(draw(d)));\n    }\n    if(blk.outer.z > blk.inner.z && blk.outer.y < blk.inner.y)\n    {\n        float d = ellipse(blk.outer.zy/scale,ab.zy,p);\n        if(d < 0.0) c = color(blk.nb);\n        c = min(c, vec3(draw(d)));\n    }\n\n    if(iMouse.z > 0.0)\n    {\n        vec2 r = p*scale/2.0;\n        float pi = 3.1415926;\n        c *= mix(0.5, 1.0, step(0.0, sin(r.x*pi*2.0)*sin(r.y*pi*2.0)));\n        vec2 q = fract(p*scale/float(RES));\n        q = step(0.01, q);\n        //c = min(c, vec3(min(q.x, q.y)));\n        c = max(c, vec3(1.0-min(q.x, q.y)));\n    }\n\n    c = sqrt(c);\n    fragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}