{"ver":"0.1","info":{"id":"NtKSRm","date":"1640377876","viewed":72,"name":"Sine Combiner","username":"nobear","description":"Graph the combination of multiple sinusoidal curves","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["wave","sin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\nconst float ERR = 0.15;\nconst float ZOOM = 6.0;\nconst float SCROLL = 1.0;\nconst float AMP = 3.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // scale pixel coordinates from -ZOOM PI to +ZOOM PI\n    vec2 uv = (fragCoord/iResolution.xy * ZOOM * PI) - ((ZOOM / 2.0) * PI);\n    // scale x coordinates again to force square pixels\n    // ((1, 1) is equally far in X and Y in real pixels from origin)\n    float x = uv.x / (iResolution.y / iResolution.x);\n    float y = uv.y;\n    \n    float scroll = iTime * SCROLL;\n    \n    //float x = (fragCoord.x / iResolution.x * PI * 6.0) - (3.0 * PI);\n    //float y = (fragCoord.y / iResolution.y * 2.0f) - (1.0);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float sinx;\n    // create and add two scrolling sin waves\n    //float f1 = sin(x + scroll);\n    //float f2 = 2.85 * sin(0.2 * x + 0.1 + scroll * 3.0);\n    float f1 = sin(x - scroll);\n    float f2 = sin((x + scroll)* 6.0) / 5.0;\n    float f3 = sin(0.33 * x * x + scroll);\n    sinx = f1 + f2 + f3;\n    \n    // increase amplitude\n    sinx = AMP * sinx;\n    \n    // stretch amplitude between 0 and 1 over time\n    //sinx = sinx * cos(scroll);\n    \n    // draw axes\n    if (\n        abs(x - 0.0) < ERR / 2.0\n        || abs(y - 0.0) < ERR / 2.0\n    ) {\n        col = vec3(0.6, 0.6, 0.7);\n    }\n    \n    else {\n        col = vec3(1.0);\n    }\n    \n    // plot the final function\n    if (abs(sinx - y) < ERR) {\n        col = vec3(1.0, 0.0, 0.0);\n    }\n    \n    // plot the final function\n    if (abs(f1 - y) < ERR) {\n        col = vec3(0.0, 0.0, 1.0);\n    }\n    \n    // plot the final function\n    if (abs(f2 - y) < ERR) {\n        col = vec3(0.0, 1.0, 0.0);\n    }\n    \n    // plot the final function\n    if (abs(f3 - y) < ERR) {\n        col = vec3(1.0, 1.0, 0.0);\n    }\n    \n    // show straight line segment for scale\n    if (\n        abs(x - 1.0) < ERR && abs(y - 1.0) < ERR\n        || abs(x - 2.0) < ERR && abs(y - 2.0) < ERR\n        || abs(x - 3.0) < ERR && abs(y - 3.0) < ERR\n        || abs(x - 4.0) < ERR && abs(y - 4.0) < ERR\n        || abs(x - 5.0) < ERR && abs(y - 5.0) < ERR\n        || abs(x - 6.0) < ERR && abs(y - 6.0) < ERR\n    ) {\n        col = vec3(1.0, 0.0, 0.9);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}