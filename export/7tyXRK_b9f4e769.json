{"ver":"0.1","info":{"id":"7tyXRK","date":"1652451591","viewed":73,"name":"Tentacles v3","username":"TotoShampoin","description":"Whilst learning to use shadertoy, I'm doing spirals again\n\nPS: Please don't show me how to do better if I don't ask; I am not advanced in math, and I'd rather have someone explain things face to face with me than just reading copy-pastable hacks","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n#define TAU (2.*PI)\n\n#define amount 24.\n#define legs 6.\n#define max_size .5\n\nvec3 colorization(float angle) {\n    return vec3(\n        sin(angle+TAU*1./3.),\n        sin(angle+TAU*2./3.),\n        sin(angle+TAU*3./3.)\n    )*.5 + vec3(.5);\n}\n\nfloat sdfCircle(vec2 uv, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    \n    return length(vec2(x, y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 offset = vec2(0);\n    vec3 col;\n    float circle, angle, ray, radius;\n    float r, a, dr, da, c;\n    \n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //col = vec3(colorization(iTime)) * (1. - length(uv)) * .5;\n    col = vec3(0);\n    \n    for(r = 0.; r < amount; r += 1.) {\n        ray = r * max_size / amount;\n        radius = (max_size - ray)/5.;\n        dr = r * TAU / amount + iTime;\n        for(a = 0.; a < legs; a += 1.) {\n            angle = iTime *.25 + sin(dr) *.5+.5 + a * TAU / legs;\n            offset = vec2(cos(angle)*ray, sin(angle)*ray);\n            circle = sdfCircle(uv, offset);\n            // col += circle < radius ? (radius - circle) * vec3(50.) : vec3(0.);\n            col += circle < radius ? (radius - circle) * 75. * colorization(dr) : vec3(0.);\n        }\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}