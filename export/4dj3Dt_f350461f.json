{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float PI=3.14159265;\nvec3 sunCol = vec3(258.0, 28.0, 10.0) / 255.0;\nvec3 environmentSphereColor = vec3(0.3001, 0.501, 0.901);\nvec3 environmentGroundColor = vec3(0.4001, 0.25, 0.1) * 0.75;\n\nfloat marchingMultplier = 0.25;\n\nfloat distFromSphere;\nvec3 normal;\nvec3 texBlurry;\n\nfloat material;\n\nvec3 saturate(vec3 a)\n{\n\treturn clamp(a, 0.0, 1.0);\n}\nvec2 saturate(vec2 a)\n{\n\treturn clamp(a, 0.0, 1.0);\n}\nfloat saturate(float a)\n{\n\treturn clamp(a, 0.0, 1.0);\n}\n\nvec3 RotateX(vec3 v, float rad)\n{\n\tfloat cos = cos(rad);\n\tfloat sin = sin(rad);\n\t//if (RIGHT_HANDED_COORD)\n\treturn vec3(v.x, cos * v.y + sin * v.z, -sin * v.y + cos * v.z);\n\t//else return new float3(x, cos * y - sin * z, sin * y + cos * z);\n}\nvec3 RotateY(vec3 v, float rad)\n{\n\tfloat cos = cos(rad);\n\tfloat sin = sin(rad);\n\t//if (RIGHT_HANDED_COORD)\n\treturn vec3(cos * v.x - sin * v.z, v.y, sin * v.x + cos * v.z);\n\t//else return new float3(cos * x + sin * z, y, -sin * x + cos * z);\n}\nvec3 RotateZ(vec3 v, float rad)\n{\n\tfloat cos = cos(rad);\n\tfloat sin = sin(rad);\n\t//if (RIGHT_HANDED_COORD)\n\treturn vec3(cos * v.x + sin * v.y, -sin * v.x + cos * v.y, v.z);\n}\n\n\t\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n// exponential smooth min (k = 32);\n/*float smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}*/\nvec3 GetSunColorReflection(vec3 rayDir, vec3 sunDir)\n{\n\tvec3 localRay = normalize(rayDir);\n\tfloat sunIntensity = 1.0 - (dot(localRay, sunDir) * 0.5 + 0.5);\n\t//sunIntensity = (float)Math.Pow(sunIntensity, 14.0);\n\tsunIntensity = max(0.0, 0.01 / sunIntensity - 0.025);\n\tsunIntensity = min(sunIntensity, 40000.0);\n\tvec3 ground = mix(environmentGroundColor, environmentSphereColor,\n\t\t\t\t\t  pow(abs(localRay.y), 0.35)*sign(localRay.y) * 0.5 + 0.5);\n\treturn ground + sunCol * sunIntensity;\n}\nvec3 GetSunColorStupid(vec3 rayDir, vec3 sunDir)\n{\n\tvec3 localRay = normalize(rayDir);\n\tfloat sunIntensity = 1.0 - (dot(localRay, sunDir) * 0.5 + 0.5);\n\t//sunIntensity = (float)Math.Pow(sunIntensity, 14.0);\n\tsunIntensity = max(0.0, 0.01 / sunIntensity - 0.025);\n\tsunIntensity = min(sunIntensity, 40000.0);\n\tvec3 ground = mix(environmentGroundColor, environmentSphereColor,\n\t\t\t\t\t  pow(localRay.y, 0.35)*sign(localRay.y) * 0.5 + 0.5);\n\treturn sunCol * sunIntensity;\n}\n\nfloat IntersectSphereAndRay(vec3 pos, float radius, vec3 posA, vec3 posB, out vec3 intersectA2, out vec3 intersectB2)\n{\n\t// Use dot product along line to find closest point on line\n\tvec3 eyeVec2 = normalize(posB-posA);\n\tfloat dp = dot(eyeVec2, pos - posA);\n\tvec3 pointOnLine = eyeVec2 * dp + posA;\n\t// Clamp that point to line end points if outside\n\t//if ((dp - radius) < 0) pointOnLine = posA;\n\t//if ((dp + radius) > (posB-posA).Length()) pointOnLine = posB;\n\t// Distance formula from that point to sphere center, compare with radius.\n\tfloat distance = length(pointOnLine - pos);\n\tfloat ac = radius*radius - distance*distance;\n\tfloat rightLen = 0.0;\n\tif (ac >= 0.0) rightLen = sqrt(ac);\n\tintersectA2 = pointOnLine - eyeVec2 * rightLen;\n\tintersectB2 = pointOnLine + eyeVec2 * rightLen;\n\tdistFromSphere = distance - radius;\n\tif (distance <= radius) return 1.0;\n\treturn 0.0;\n}\n\nfloat dSphere(vec3 p, float rad)\n{\n\t//vec3 center = vec3(0, 0, 0.0);\n\t//p -= center;\n\t//rad += sin(p.y * 32.0 - iTime * 8.0) * 0.01;\n\treturn length(p) - rad;\n}\nfloat dSphereWave(vec3 p, float rad)\n{\n\t//vec3 center = vec3(0, 0, 0.0);\n\t//p -= center;\n\trad -= 0.05;\n\trad += sin(p.y * 8.0 - iTime * 2.0) * 0.03;\n\treturn length(p) - rad;\n}\n\nfloat dBox(vec3 pos, vec3 b)\n{\n\treturn length(max(abs(pos)-(b),0.0));\n}\n\nfloat dBoxSigned(vec3 p)\n{\n\tfloat b = 1.0;\n\tvec3 b2 = vec3(6.0, 2.0, 2.0);\n\tvec3 center = vec3(0, -2.0, 0.0);\n\tvec3 d = abs(p - center) - b2;//*abs(cos(p.y + 0.5));\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat dFloor(vec3 p)\n{\n\treturn p.y + 1.0;\n}\n\nfloat sdColumn( vec3 p, vec3 c )\n{\n\tfloat cyl = length(p.xz-c.xy)-c.z;// + abs(p.y);\n\tcyl -= cos(p.y*2.0)*0.045;\n\tfloat a = atan(p.x - c.x, p.z - c.y);\n\ta /= 2.0*PI;\n\tfloat subs = 48.0;\n\ta *= subs;\n\t//cyl *= pow(sin(a), 0.5) * 0.925 + 1.0;\n\tcyl += abs(sin(a)) * 0.015;\n\n\tcyl = max(cyl, p.y - 2.4);\n\tcyl = min(cyl, dBox(p + vec3(0.0, 1.0, 0.0), vec3(0.3, 0.2, 0.3)));\n\tcyl = min(cyl, dBox(p + vec3(0.0, -2.3, 0.0), vec3(0.3, 0.15, 0.3)));\n\treturn cyl;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n\tp.y += 1.0;\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length(q)-t.y;\n}\nfloat length8(vec2 v)\n{\n\treturn pow((pow(v.x,8.0) + pow(v.y, 8.0)), (1.0/8.0));\n}\nfloat length8(vec3 v)\n{\n\treturn pow((pow(v.x,8.0) + pow(v.y, 8.0) + pow(v.z, 8.0)), (1.0/8.0));\n}\nfloat sdTorus82( vec3 p, vec2 t, vec3 center, float subs )\n{\n\tp -= center;\n\tfloat a = atan(p.x, p.z);\n\ta = pow(abs(sin(a*subs)), 0.25);\n\t//a = mod(a,PI*2.0) - 0.5;\n\t//a = a *0.025 + 0.975;\n\ta = a *0.2 + 0.8;\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length8(q)-t.y*a;\n}\nfloat sdTorusArch( vec3 p, vec2 t, vec3 center, float subs )\n{\n\tp -= center;\n\tfloat a = atan(p.y, p.z);\n\ta = pow(abs(sin(a*subs)), 0.25);\n\t//a = mod(a,PI*2.0) - 0.5;\n\t//a = a *0.025 + 0.975;\n\ta = a *0.25 + 0.75;\n\tvec2 q = vec2(length(p.yz)-t.x,p.x);\n\treturn length8(q)-t.y*a;\n}\nfloat sdTorusDome( vec3 p, vec2 t, vec3 center, float subs )\n{\n\tp -= center;\n\tfloat a = atan(p.x, p.z);\n\ta = pow(abs(sin(a*subs)), 0.15);\n\t//a = mod(a,PI*2.0) - 0.5;\n\t//a = a *0.025 + 0.975;\n\ta = a *0.25 + 0.75;\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length8(q)-t.y*a;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n\tp.y += 0.5;\n    vec3 q = abs(p);\n    return max(q.y-h.y,max(q.x+q.z*0.57735,q.z*1.1547)-(h.x*(2.35 - p.y)));\n}\nfloat sdHexPrismGem( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.y-h.y,max(q.x+q.z*0.57735,q.z*1.1547)-(h.x*(0.5 - abs(p.y))*3.0));\n}\n\nfloat dGem(vec3 p)\n{\n\tfloat final = sdHexPrism(p, vec2(0.25, 1.0));\n\treturn final;\n}\n\nfloat matMin(float a, float b, float matNum)\n{\n\tfloat final = smin(a, b, 0.2);\n\tif (a < b)\n\t{\n\t\t//material = 0.0;\n\t\treturn final;\n\t}\n\telse\n\t{\n\t\tmaterial = matNum;\n\t\treturn final;\n\t}\n}\n\nfloat dTiles(vec3 p)\n{\n\tfloat subs = 16.0;\n\tfloat final = length(p) - 2.2;\n\tfloat a = atan(p.x, p.z);\n\ta /= 2.0*PI;\n\ta *= subs;\n\ta = abs((fract(a) - 0.5))*2.0;\t// triangle wave from 0.0 to 1.0\n\ta -= 0.15;\n\ta *= 6.0;\n\ta = max(0.0, a);\n\ta = min(0.75, a);\n\n\tfloat b = atan(length(p.xz), p.y);\n\tb /= 2.0*PI;\n\tb *= subs;\n\tb = abs((fract(b) - 0.5))*2.0;\t// triangle wave from 0.0 to 1.0\n\tb -= 0.15;\n\tb *= 6.0;\n\tb = max(0.0, b);\n\tb = min(0.75, b);\n\t\n\ta = a*b;\n\n\ta = a *0.2 + 0.8;\n\tb = b *0.2 + 0.8;\n\t\n\tfinal = final - a;\n\tfinal = max(final, 0.5-p.y);\n\treturn final/1.414;\n}\n\nfloat GemCut(vec3 p)\n{\n\tfloat size = 0.5;\n\tfloat f = length(p) - size;\n\tif (f <= 1.0)\n\t{\n\t\tmarchingMultplier = 0.65;\n\t\tf = max(f, p.y - size * 0.25);\n\t\t\n\t\tf = max(f, p.y + p.x - size * 0.7);\n\t\tf = max(f, p.y - p.x - size * 0.7);\n\t\tf = max(f, p.y + p.z - size * 0.7);\n\t\tf = max(f, p.y - p.z - size * 0.7);\n\t\t\n\t\tf = max(f, -p.y + p.x - size * 0.6);\n\t\tf = max(f, -p.y - p.x - size * 0.6);\n\t\tf = max(f, -p.y + p.z - size * 0.6);\n\t\tf = max(f, -p.y - p.z - size * 0.6);\n\n\t\tf = max(f, p.y + p.x + p.z - size * 0.95);\n\t\tf = max(f, p.y - p.x + p.z - size * 0.95);\n\t\tf = max(f, p.y - p.x - p.z - size * 0.95);\n\t\tf = max(f, p.y + p.x - p.z - size * 0.95);\n\n\t\tf = max(f, -p.y + p.x + p.z - size * 0.85);\n\t\tf = max(f, -p.y - p.x + p.z - size * 0.85);\n\t\tf = max(f, -p.y - p.x - p.z - size * 0.85);\n\t\tf = max(f, -p.y + p.x - p.z - size * 0.85);\n\t} else marchingMultplier = 1.0;\n\treturn f;\n}\n\nfloat atrium(vec3 p)\n{\n\tvec3 c = vec3(1.0, 1.0, 1.0)* 4.0;\n\tfloat c2 = 5.2;\n\tvec3 q = mod(p,c)-0.5*c;\n\tfloat q2 = mod(p.x,c2)-0.5*c2;\n\tvec3 p2 = vec3(q.x, p.y, q.z);\n\tvec3 p3 = vec3(q2, p.y, p.z);\n\n\tfloat final = -sdCapsule(p, vec3(0.0,-0.5,0.0), vec3(0.0,2.25,0.0), 3.0);\n\t// This if condition is for a culling speedup and a cool bevel effect on the ceiling tiles.\n\tif (final < 0.01) final = max(final, -dTiles(p + vec3(0.0, -2.25, 0.0)));\n\tfinal = min(final, sdTorus82(p, vec2(2.75, 0.25), vec3(0.0, -0.795, 0.0), 12.0));\n\tfinal = max(final, -sdCapsule(p, vec3(-6.0,0.0,0.0), vec3(6.0,0.0,0.0), 2.0));\n\t//final = max(final, -sdCapsule(p, vec3(0.0,0.0,-16.0), vec3(0.0,0.0,16.0), 2.0));\n\tfinal = max(final, -dBoxSigned(p));\n\tfinal = max(final, -sdCapsule(p, vec3(0.0,0.0,0.0), vec3(0.0,5.5,0.0), 0.5));\n\tfinal = max(final, p.y - 5.3);\n\t//final = max(final, sdCapsule(p, vec3(0.0,-0.5,0.0), vec3(0.0,0.5,0.0), 3.05));\n\t//final = max(final, -dSphere(p2, 0.08));\n\tfinal = min(final, sdColumn(p2, vec3(0.0, 0.0, 0.25)));\n\n\tfinal = min(final, sdTorus82(p, vec2(3.0, 0.25), vec3(0.0, 2.7, 0.0), 8.0));\n\tfinal = min(final, sdTorus82(p, vec2(0.75, 0.25), vec3(0.0, -1.0, 0.0), 6.0));\n\tfinal = min(final, sdTorusArch(p3, vec2(2.125, 0.3), vec3(0.0, -0.1, 0.0), 6.0));\n\t//final = min(final, sdTorusArch(p, vec2(2.125, 0.3), vec3(2.6, -0.1, 0.0), 6.0));\n\t//final = min(final, sdTorusArch(p, vec2(2.125, 0.3), vec3(-2.6, -0.1, 0.0), 6.0));\n\tfinal = min(final, dFloor(p));\n\tmaterial = 0.0;\n\tfinal = matMin(final, sdHexPrism(p, vec2(0.25, 1.0)), 2.0);\n\n\t//final = min(final, dGem(p));\n\t//final = matMin(final, sdHexPrismGem(p - vec3(0, 1.0, 0), vec2(0.25, 0.5)), 1.0);\n\tfinal = matMin(final, GemCut(p - vec3(0, 0.8, 0)), 1.0);\n\n\t//vec4 texX = texture(iChannel1, p.yz*0.2);\n\t//vec4 texY = texture(iChannel1, p.xz*0.2);\n\t//vec4 texZ = texture(iChannel1, p.xy*0.2);\n\t//vec4 noise = texX + texY + texZ;\n\t//final += noise.x * 0.05;\n\n\treturn final;\n}\n\nfloat DistanceToObject(vec3 p)\n{\n\tfloat tubeWidth = 0.15;\n\t//p = RotateY(p, p.y);\n\tp = RotateY(p, p.y);\n\tvec3 rp = p;\n\tvec3 lp = p;\n\trp.x += (sin(rp.y+iTime)*0.5+0.5);\n\tlp.x += -(sin(rp.y+iTime)*0.5+0.5);\n\tfloat final = sdCapsule(lp, vec3(1.0,-5.5,0.0), vec3(1.0,5.5,0.0), tubeWidth);\n\tfinal = min(final, sdCapsule(rp, vec3(-1.0,-5.5,0.0), vec3(-1.0,5.5,0.0), tubeWidth));\n\tfloat cl = 0.5;\n\tfloat ql = mod(rp.y,cl)-0.5*cl;\n\tvec3 pl = vec3(rp.x, ql, rp.z);\n\tvec3 pr = vec3(lp.x, ql, lp.z);\n\tfinal = matMin(final, sdCapsule(pl, vec3(-1.0,0.0,0.0), vec3(0.0,0.0,0.0), tubeWidth), 1.0);\n\tfinal = matMin(final, sdCapsule(pr, vec3(-0.0,0.0,0.0), vec3(1.0,0.0,0.0), tubeWidth), 2.0);\n\n\treturn final;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy * 2.0 - 1.0;// - 0.5;\n\n\t// Camera up vector.\n\tvec3 camUp=vec3(0,1,0); // vuv\n\n\t// Camera lookat.\n\tvec3 camLookat=vec3(0,1.0,0);\t// vrp\n\n\tfloat mx=iMouse.x/iResolution.x*PI*2.0 + iTime * 0.5;\n\tfloat my=-iMouse.y/iResolution.y*10.0 + sin(iTime * 0.93)*0.32+0.02;//*PI/2.01;\n\tvec3 camPos=vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*(3.75); \t// prp\n\n\t// Camera setup.\n\tvec3 camVec=normalize(camLookat - camPos);//vpn\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\t// u\n\tvec3 upNorm=cross(camVec, sideNorm);//v\n\tvec3 worldFacing=(camPos + camVec);//vcv\n\tvec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x/iResolution.y) + uv.y * upNorm;//scrCoord\n\tvec3 relVec = normalize(worldPix - camPos);//scp\n\n\tfloat sunSpeed = -0.77;\n\tvec3 sunDir = normalize(vec3(sin(iTime*sunSpeed)*2.0, -3.0, sin(iTime*sunSpeed)*2.0));\n\n\tfloat dist = 0.02;\n\tfloat t = 0.1;\n\tfloat maxDepth = 40.0;\n\tvec3 pos = vec3(0,0,0);\n\t// ray marching time\n\tfor (int i = 0; i < 150; i++)\n\t{\n\t\tif ((t > maxDepth) || (abs(dist) < 0.001)) continue;\t// break DOESN'T WORK!!! ARRRGGG!\n\t\tmaterial = 0.0;\n\t\tpos = camPos + relVec * t;\n\t\tdist = DistanceToObject(pos);\n\t\tt += dist * 0.5;\t// because deformations mess up distance function.\n\t}\n\tfloat finalMaterial = material;\n\n\t//vec3 finalColor = vec3(0.0,0.0,0.0);// GetSunColorReflection(relVec, -sunDir) + vec3(0.1, 0.1, 0.1);\n\tvec3 finalColor = GetSunColorStupid(relVec, -sunDir) + vec3(0.1, 0.1, 0.1);\n\n\t//finalColor += texture(iChannel0, vec2(pos.x+iTime, pos.y*0.01+0.0)).xyz;\n\tvec3 smallVec = vec3(0.0025, 0, 0);\n\tvec3 normal = vec3(dist - DistanceToObject(pos - smallVec.xyy),\n\t\t\t\t\t   dist - DistanceToObject(pos - smallVec.yxy),\n\t\t\t\t\t   dist - DistanceToObject(pos - smallVec.yyx));\n\tnormal = normalize(normal);\n\tfloat ambient = DistanceToObject(pos + normal * 1.0)*0.5;\n\tambient += DistanceToObject(pos + normal * 0.1)*5.0;\n\tambient = max(0.1, pow(ambient, 0.5));\t// tone down ambient with a pow and min clamp it.\n\tvec4 texX = texture(iChannel0, pos.yz*0.75);\n\tvec4 texY = texture(iChannel0, pos.xz*0.75);\n\tvec4 texZ = texture(iChannel0, pos.xy*0.75);\n\tvec4 tex = mix(texX, texZ, abs(normal.z));\n\ttex = mix(tex, texY, abs(normal.y));//.zxyw;\n\t//tex = tex * tex;\n\ttex.xyz = mix(tex.xyz, vec3(1.0,1.0,1.0), 0.97);\n\tfloat wave = sin(pos.y+iTime)*0.5+0.5;\n\twave = 1.0 - saturate(pow(wave, 0.25));\n\tif (finalMaterial == 1.0)\n\t{\n\n\t\ttex.xyz = mix(vec3(1.0, 0.2, 0.2), tex.xyz, wave);\n\t\ttex.xyz += vec3(1.0, 0.5, 0.5) * wave*16.0;\n\t//\ttex.xyz += wave;\n\t}\n\tif (finalMaterial == 2.0)\n\t{\n\t\ttex.xyz = mix(vec3(0.2, 1.1, 0.2), tex.xyz, wave);\n\t\ttex.xyz += vec3(1.0, 0.5, 0.5) * wave*16.0;\n\t}\n\tvec3 ref = reflect(relVec, normal);\n\tif (t <= maxDepth)\n\t{\n\t\tvec3 envLight = mix(environmentGroundColor, environmentSphereColor * 1.0, (normal.y * 0.5 + 0.5));\n\t\t\t// calculate the reflection vector for highlights\n\n\t\tvec3 sunRef = GetSunColorReflection(ref, -sunDir)* sunCol * max(0.0, dot(normal, -sunDir));\n\t\tvec3 sunDirect = max(0.0, dot(-sunDir, normal)) * sunCol * 1.0;\n\t\tfinalColor += (envLight) * tex.xyz;\n\t\tfinalColor *= vec3(1.0,1.0,1.0) * ambient;\n\t\tfinalColor += (sunDirect) * tex.xyz;// * ambient;\n\t\tfinalColor += sunRef;\n\t\t//finalColor = mix(finalColor, vec3(0.015,0.015,0.015), pow(saturate(distance(pos, camPos)*0.075), 0.7) );\n\t}\n\n\tfragColor = vec4(sqrt(clamp(finalColor*1.0, 0.0, 1.0)),1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dj3Dt","date":"1395286537","viewed":472,"name":"[SH2014]DNA","username":"otaviogood","description":"hydrogen bonds joining and separating in a DNA strand","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["dna"],"hasliked":0,"parentid":"","parentname":""}}