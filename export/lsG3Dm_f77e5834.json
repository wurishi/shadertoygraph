{"ver":"0.1","info":{"id":"lsG3Dm","date":"1454780451","viewed":1640,"name":"DJ Doggie","username":"MMGS","description":"meet tha dawg,  shadertoy happen..","likes":14,"published":1,"flags":64,"usePreview":0,"tags":["3d","music","stuff","model"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Mss3WH","filepath":"https://soundcloud.com/oodora/yoshis-island-athletic-theme","previewfilepath":"https://soundcloud.com/oodora/yoshis-island-athletic-theme","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// madeBy@MMGS 2016\n\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an =  3.1+iMouse.x*0.1;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\nvec3 doBackground( vec2 uv)\n{\n    return vec3( uv,0.5+0.5*sin(iTime)*texture(iChannel0,uv).x)+0.1;\n}\n    \nfloat sMin( float a, float b )\n{\n    float k = .12;\n\tfloat h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\n\n//functions that build rotation matrixes\nmat2 rotate_2D(float a){float sa = sin(a); float ca = cos(a); return mat2(ca,sa,-sa,ca);}\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n    \n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nvec2 doModel( vec3 p )\n{\n     float id;\n    \n    vec3 music = texture(iChannel0,p.xz).xyz;\n    \n    float scene[19]; //array to hold scene objects\n    float s,s1,s2;\n    vec3 hpos=vec3(0.+cos(p.y+iTime*4.)*p.x*0.005,0,0); //model position\n    s1 = length(p+hpos+p.y*0.2) - 1.02;\n   \n     s2 = .5;///length(p+vec3(1.,0,0)) - .30;\n      float s3;\n    \n    s=sMin(s1,s2);\n     scene[0] = s1;\n     p+=hpos;\n    for(int i=0;i<4;i++)\n    {\n        \n         s2 = length(p+vec3(1.+float(i)*0.15,0.+cos(p.x*3.5)*0.49,0)) - .25+p.x*0.1;\n         s=sMin(s,s2);scene[1] = s2;\n        \n       \n        s2 = length(p+vec3(-1.-float(i)*0.2,0.+cos(p.x*3.5)*0.6,0)) - .20-p.x*0.1;\n         s=sMin(s,s2);scene[2] = s2;\n        \n         s2 = length(p+vec3(0.+cos(p.y*2.5+iTime*2.5)*0.05,1.+float(i)*0.05,0)) - .30+p.y*0.4;\n         s=sMin(s,s2);scene[3] = s2;\n      \n        p = p*rotate_y(.7);\n         s2 = length(p+vec3(.8+float(i)*0.25,  1.+cos(p.x*4.+iTime*music.x*0.5)*0.2*music.x  ,0.)) - .25;\n         s=sMin(s,s2);scene[4] = s2;\n        p = p*rotate_y(-.7);\n        \n          p = p*rotate_y(-.7);\n         s2 = length(p+vec3(-.6-float(i)*0.25,  1.+sin(-p.x*5.5+iTime)*0.08  ,0.)) - .25;\n         s=sMin(s,s2);scene[5] = s2;\n        p = p*rotate_y(.7);\n     \n \n    }\n    \n       s2 = length(p+vec3(.0,0.,.8)) - .30+p.y*0.4;\n         s=sMin(s,s2);scene[6] = s2;\n    \n      s2 = length(p+vec3(.0,-0.1,1.)) - .20+p.y*0.4;\n         s=min(s,s2);scene[7] = s2;\n      \n      s2 = length(p+vec3(.3,-0.4,.7)) - .29;\n         s=sMin(s,s2);scene[8] = s2;\n     s2 = length(p+vec3(.3,-0.4,.85)) - .19;\n         s=sMin(s,s2);scene[9] = s2;\n    \n    \n     s2 = length(p+vec3(-.3,-0.4,.7)) - .27;\n        s=sMin(s,s2); scene[10] = s2;\n      s2 = length(p+vec3(-.3,-0.4,.85)) - .19;\n         s=sMin(s,s2);scene[11] = s2;\n    \n     s2 = length(p+vec3(-.3,-0.39,.9)) - .15;\n         s=sMin(s,s2);scene[12] = s2;\n     s2 = length(p+vec3(.3,-0.39,.9)) - .15;\n         s=sMin(s,s2);scene[13] = s2;\n    \n    s2 = length(p+vec3(.1,0.3,1.)) - .1;\n         s=sMin(s,s2);scene[14] = s2;\n    \n     s2 = sdCappedCylinder(p+vec3(1.1,1.5,1.3), vec2 (0.7,.02) );\n         s=sMin(s,s2);scene[15] = s2;\n     \n    \n    s2 = sdCappedCylinder(p+vec3(1.1,1.5,1.3), vec2 (0.2,.023) );\n         s=sMin(s,s2);scene[16] = s2;\n    s2 = sdCappedCylinder(p+vec3(1.1,1.5,1.3), vec2 (0.08,.025) );\n         s=sMin(s,s2);scene[17] = s2;\n     s2 = udBox(p+vec3(.8,2.,1.5), vec3 (2.1,.5,1.) );\n         s=sMin(s,s2);scene[18] = s2;\n    \n      //////SORT OBJECTS\n    float test=9999.0;  //return closest object in scene\n    for(int i=0;i<19;i++){\n        float test2=scene[i];\n        if(test2<test)test=test2;\n    }\n    \n    \n    if(test == scene[0])id=1.0;\n    if(test == scene[1])id=1.0;\n    if(test == scene[2])id=1.0;\n    if(test == scene[3])id=1.0;\n    if(test == scene[4])id=1.0;\n    if(test == scene[5])id=1.0;\n    if(test == scene[6])id=2.0;\n     if(test == scene[8])id=3.0;\n     if(test == scene[9])id=4.0;\n    if(test == scene[10])id=3.0;\n    if(test == scene[11])id=4.0;\n    if(test == scene[14])id=5.0;\n     if(test == scene[16])id=6.0;\n     if(test == scene[18])id=3.0;\n    return vec2(s,id);\n}\n\nvec3 doMaterial( in vec3 pos, in vec3 nor,vec2 obj )\n{\n    vec3 col;\n    \n    if(obj.y==1.) col =  vec3(0.2,0.07,0.01);\n     if(obj.y==2.) col =  vec3(.3,0.07,0.01);\n       if(obj.y==3.) col =  vec3(.3);\n     if(obj.y==4.) col =  vec3(0,0,0.5);\n    if(obj.y==5.) col =  vec3(0.1,0,0.);\n    if(obj.y==6.) col = texture(iChannel1,pos.xz*1.5+0.5 ).xyz*0.5;\n    return col;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(-1.0,0.7,-0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.001*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<60; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<25; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,1.8) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(fragCoord.xy/iResolution.xy);\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\t\n        vec2 obj = doModel(pos);\n        // materials\n       vec3 mal = doMaterial( pos, nor, obj );\n\t\t//vec3 obj = doModel(p);\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}