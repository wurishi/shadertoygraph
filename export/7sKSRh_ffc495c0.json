{"ver":"0.1","info":{"id":"7sKSRh","date":"1634344924","viewed":208,"name":"An Error Function Approximation","username":"oneshade","description":"An approximation of the error function erf(x) based on the fact that erf(x)^2 looks very similar to a gaussian distribution (bell curve).\nOrange: graphical approximation\nBlue: numerically integrated","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["erf","errorfunction","specialfunction","gaussianintegral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define draw(dist, col) color = mix(color, col, smoothstep(unit, 0.0, dist))\n\n#define PI 3.14159265359\n#define K (2.0 / sqrt(PI))\n\n// Graphical approximation\nfloat erf(in float x) {\n    //return sign(x) * sqrt(1.0 - exp(-1.239192 * x * x));\n    return sign(x) * sqrt(1.0 - exp2(-1.787776 * x * x)); // likely faster version by @spalmer\n}\n\n// Numerically integrated\nfloat erf2(in float x) {\n    float a = abs(x), y = 0.0;\n    float dt = a / 250.0;\n    for (float t=0.0; t < a; t += dt) y += exp(-t * t) * dt;\n    return K * sign(x) * y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n    vec3 color = vec3(1.0);\n\n    // Grid\n    draw(abs(fract(uv.x + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(fract(uv.y + 0.5) - 0.5) + 0.25 * unit, vec3(0.0, 0.0, 1.0));\n    draw(abs(uv.x), vec3(1.0, 0.0, 0.0));\n    draw(abs(uv.y), vec3(1.0, 0.0, 0.0));\n\n    // Draw the function (alternating between graphical approximation and numerical integration)\n    float dx = K * exp(-uv.x * uv.x);\n    if (mod(iTime, 4.0) < 2.0) draw(abs(uv.y - erf(uv.x)) / sqrt(1.0 + dx * dx) - 0.01, vec3(1.0, 0.5, 0.0));\n    else draw(abs(uv.y - erf2(uv.x)) / sqrt(1.0 + dx * dx) - 0.01, vec3(0.0, 0.5, 1.0));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}