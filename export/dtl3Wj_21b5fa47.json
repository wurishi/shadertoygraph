{"ver":"0.1","info":{"id":"dtl3Wj","date":"1672462789","viewed":78,"name":"Left / Right Arrows","username":"lumic","description":"Direction arrows for use in a UI (e.g., for showing whether the object is left or right).\nThe \"dir\" value can be obtained via dot(objectpos - camerapos, right)\n\nsdTriangle from: [url]https://www.shadertoy.com/view/XsXSz4[/url] for an equilateral triangle.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","triangle","distance","equilateral"],"hasliked":0,"parentid":"Xl2yDW","parentname":"Regular Triangle - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2017 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Specialization of https://www.shadertoy.com/view/XsXSz4\n// Since it's equilatearal, symmetry can be exploited to make the solution cheaper\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n#define PI 3.14159\n\nvec2 c1 = vec2(0.1, 0.);\nvec2 c2 = vec2(0.9, 0.);\nfloat s = 20.;\n\n\n// can be obtained via dot(object.pos - camera.pos, camera.right)\n// -1 for left, +1 for right\nfloat dir = 0.;\n\n// signed distance to an equilateral triangle\nfloat sdEquilateralTriangle(  in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nvec4 right(vec2 p, float fill) {\n    p -= c1;\n    p = rotate2d(-PI / 6.) * p;\n    p *= s;\n\n    float px = 1. / iResolution.x;   \n\tfloat d = sdEquilateralTriangle( p);\n    \n    float din = smoothstep(s * px, 0.0,d);\n    float dEdge = smoothstep(s * px, 0., abs(d));\n\n    vec3 col = vec3(0,0,0);\n\tcol += dEdge;\n    col += din * fill;\n    \n    return vec4(col, 1.);\n}\n\nvec4 left(vec2 p, float fill) {\n    p -= c2;\n    p = rotate2d(PI / 6.) * p;\n    p *= s;\n\n    float px = 1. / iResolution.x;   \n\tfloat d = sdEquilateralTriangle( p);\n    \n    float din = smoothstep(s * px, 0.0,d);\n    float dEdge = smoothstep(s * px, 0., abs(d));\n\n    vec3 col = vec3(0,0,0);\n\tcol += dEdge;\n    col += din * fill;\n    \n    return vec4(col, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - vec2(0., iResolution.y / 2.)) / iResolution.x;\n    \n    \n    // For animation\n    dir = sin(iTime * 2. * PI / 5.);\n    //dir = 1.;\n    \n    // Fill the triangles if dir is at extremes\n    // 0.5 = 60 degrees from either left or right\n    float urgency = smoothstep(0.5, 1., abs(dir));\n    urgency = urgency * (sin(iTime * PI * 4.) + 1.) * 0.5;\n    \n    fragColor = \n    smoothstep(0., -1., dir) * right(uv, urgency) \n    + smoothstep(0., 1., dir) * left(uv, urgency);\n}","name":"Image","description":"","type":"image"}]}