{"ver":"0.1","info":{"id":"wtcczH","date":"1608478508","viewed":61,"name":"Stream_2020_12_20","username":"dreamur","description":"[Incomplete/WIP]","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lights","lanterns","nightsky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate (vec2 _st, float _angle) {\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    return _st;\n}\n\nfloat sdCircle(in vec2 _st, in float _radius)\n{\n    return length(_st) - _radius;\n}\n\nfloat boxDist(vec2 p, vec2 size, float radius)\n{\n  \tvec2 d = abs(p) - size - radius;\n  \treturn min(max(d.x, d.y), 0.0) + length(max(d, 0.0)) - radius;\n}\n\n// 2D Random\nfloat random (in vec2 st) { return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123); }\n\n// https://thebookofshaders.com/edit.php#12/vorono-01.frag\nfloat voroni(in vec2 _st, in float _offset)\n{\n    vec2 i_st = floor(_st);\n    vec2 f_st = fract(_st);\n\n    float m_dist = 150.;  // minimun distance\n    vec2 m_point;        // minimum point\n\n    for (int j=-1; j<=1; j++ ) {\n        for (int i=-1; i<=1; i++ ) {\n            vec2 neighbor = vec2(float(i),float(j));\n            vec2 point = vec2(random(i_st + neighbor ));\n            point = 0.5 + 0.5*sin(_offset + 6.2831*point);\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);\n\n            if( dist < m_dist ) {\n                m_dist = dist;\n                m_point = point;\n            }\n        }\n    }\n    \n    return m_dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 4.0 * fragCoord.xy/iResolution.x - vec2(2.0, 1.1);\n    vec3 col = vec3(0.0, 0.0, 0.545);\n   \n    col = mix(col, vec3(0.0), uv.y / 2.0 + 0.4);\n\n    float lanternDF = 0.0;\n    float lanternShadowDF = 0.0;\n\n    for(float i = 0.0; i < 20.0; i++)\n    {\n        float offsetX = voroni(vec2(i ), 0.0);\n        float offsetY = voroni(vec2(i ), 0.0);\n        \n        vec2 offsetVec = vec2(offsetX * i - 2.6, offsetY  + sin(iTime + i) / 8.0);\n\n        float scalar = 2.5;\n        vec2 size = vec2(0.15, 0.4);\n        \n        float glowDF = sdCircle(uv * scalar + offsetVec - vec2(2.0, 3.0), 0.5);\n\n        lanternDF = step(boxDist(uv * scalar + offsetVec - vec2(2.0, 3.0), size, 0.0), 0.1);\n        lanternShadowDF = step(boxDist(uv * scalar + offsetVec - vec2(2.0, 3.0), size + vec2(0.01), 0.0), 0.1);\n        \n        col = mix(col, vec3(0.549, 0.353, 0.0), clamp(lanternShadowDF, 0.0, 1.0));\n        col = mix(col, vec3(0.847, 0.549, 0.0), lanternDF);\n        \n        col = mix(col, vec3(1.0, 1.0, 0.0), lanternDF * (0.25-glowDF) );\n        \n    }\n    \n    if(uv.y < -0.35) \n    {     \n        vec3 grass = vec3(0.0, 0.392, 0.0);\n        grass = mix(grass, vec3(0.0), 1.0 - uv.y - 1.15);\n        col = grass; \n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}