{"ver":"0.1","info":{"id":"md2XDz","date":"1670184660","viewed":266,"name":"Spectral Splosion","username":"ChunderFPV","description":"Moving cells (dots) along xyz grids with extreme fisheye effect.  Buffer blur for style.\nI used this as a starting point: https://www.shadertoy.com/view/ds2SR1","likes":20,"published":1,"flags":32,"usePreview":0,"tags":["3d","mouse","grid","rotation","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 c = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    c *= c*2.; // contrast\n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define S 20.0 // scale\n#define R iResolution.xy\n#define M iMouse\n#define L(v) length(v)\n#define C(rd,mt,pr) max(0., 1.-length((fract(rd-vec2(mt, 0)+.5)-.5)/fwidth(rd)/pr))\n#define HUE(a) (sin(vec3(0, 1.047, 2.094)+vec3((a)*6.3))*.5+.5)\nmat2 rot(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nvoid mainImage(out vec4 RGBA, in vec2 XY)\n{\n    float t = iTime/30.;\n    vec2 m = (M.xy-.5*R)/R.y*2.; // mouse coords\n    vec2 uv = (XY-R*.5)/R.y; // screen coords\n    vec3 rd = normalize(vec3(uv, abs(sin(t*.6))*.075))*S; // 3d uv\n    if (M.z < 1.) m = vec2(cos(t)); // rotate with time when not clicking\n    rd.yz *= rot(-m.y*1.57); // pitch\n    rd.xz *= rot(-m.x*1.57); // yaw\n    \n    float r = L(uv); // screen radius\n    vec3 c = texture(iChannel0, XY/R, r+.1).rgb*.97; // blur (buffer a)\n    c += vec3(.2, .5, .9)*r*.013; // bg color\n    \n    // moving cells\n    float pr = R.y/350.; // point radius\n    float b = clamp(r, .05, 1.)*.25; // brightness\n    vec3 mt = t*round(vec3(rd)); // move cells with time & dist\n    vec3 l = vec3(L(rd.xy), L(rd.yz), L(rd.xz))/6.3;\n    c += C(rd.xy, mt.y, pr)*HUE(l.x-t)*b;\n    c += C(rd.yx, mt.x, pr)*HUE(l.x-t+(1./6.)*6.3)*b;\n    c += C(rd.zy, mt.y, pr)*HUE(l.y-t+(2./6.)*6.3)*b;\n    c += C(rd.yz, mt.z, pr)*HUE(l.y-t+(3./6.)*6.3)*b;\n    c += C(rd.xz, mt.z, pr)*HUE(l.z-t+(4./6.)*6.3)*b;\n    c += C(rd.zx, mt.x, pr)*HUE(l.z-t+(5./6.)*6.3)*b;\n    \n    RGBA = vec4(c, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}