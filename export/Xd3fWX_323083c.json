{"ver":"0.1","info":{"id":"Xd3fWX","date":"1526913629","viewed":79,"name":"vinvol-mandel","username":"vinvol","description":"Mandel","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat cubixFunc (float a, float b, int MAX) {\n\n\n      float ca = a;\n      float cb = b;\n\n      int n = 0;\n\n      while (n < MAX) {\n        float aa = float(a * a - b * b);\n        float bb = float(2.0 * a * b);\n        a = aa + ca;\n        b = bb + cb;\n        if (a * a + b * b > 16.0) {\n          break;\n        }\n        n++;\n      }\n\treturn float(n)/ float(MAX);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float mult = 1.0 + (iTime / 10.0);\n    vec2 uv = vec2(fragCoord.x/iResolution.y , fragCoord.y/iResolution.y );\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    \n    float x = -0.5 + (uv.x + 1.5)/ mult;\n    float y = (uv.y - mult + 0.5) / mult;\n    \n    float alpha = cubixFunc(x,y, 3);\n    float beta = cubixFunc(x, y, 50);\n    float gamma = cubixFunc(x, y, 20);\n    \n    // Output to screen\n    fragColor = vec4(1.0-alpha, 1.0-beta, 1.0-gamma,1.0);\n}\n","name":"Image","description":"","type":"image"}]}