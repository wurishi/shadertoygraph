{"ver":"0.1","info":{"id":"MsGfRz","date":"1527421494","viewed":188,"name":"High Quality Hash and Visualizer","username":"James_Harnett","description":"First a 32 bit hash value is generated.\nLeft Side shows that hash value converted to a float\nRight Side shows each bit of that hash value individually.\nthe first 6 or so bits have obvious patterns, but only the top 23 bits are needed when convert to float","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","hash","prng","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// LICENSE: http://unlicense.org/\n#define M1 1597334677U     //1719413*929\n#define M2 3812015801U     //140473*2467*11  is also first 32bits of M1*M1\n\nuint hash(uvec2 q)\n{\n\tq ^= uvec2(M1, M2);\n    uint n = q.x * q.y;\n    n ^= n >> 15;\n    n *= (q.x + q.y);\n    return n;\n}\n\nfloat hashFloat( uvec2 q )\n{\n    return float(hash(q)) * (1.0/float(0xffffffffU));\n}\n\nfloat hashBit( uvec2 q,int bit)\n{\n    return float((hash(q)&(1U<<bit))!=0U); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec2 p = uvec2(fragCoord)+uint(2*iFrame);\n\tint center = int(fragCoord.x) - (int(iResolution.x)>>1);\n\tfloat c = 0.0;\n    \n   \tif(center < 0)c = hashFloat(p);\n    if(center > 0)c = hashBit(p,iFrame>>5);\n    \n    fragColor = vec4(c,c,c,1.0);\n}","name":"Image","description":"","type":"image"}]}