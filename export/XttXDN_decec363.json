{"ver":"0.1","info":{"id":"XttXDN","date":"1479693743","viewed":798,"name":"lcd glitter field","username":"lebek","description":"lcd glitter field","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["glitter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 R =  iResolution.xy,\n         p = (2.*fragCoord - R) / R.y;\n    float speed = .2;\n    vec3 ro = .7*vec3(cos(iTime*speed), 1.0, sin(iTime*speed));\n\t\tvec3 ta = vec3(0);\n\n\t// camera-to-world transformation\n    mat3 ca = setCamera(ro, ta, 0.0);\n\n    // ray direction\n    vec3 rd = ca*normalize(vec3(p,2.0));\n\n\tfloat n = sin(iTime*0.6)*10.+50.;\n    vec3 column = normalize(floor(rd*n));\n    vec2 polar = vec2(acos(column.z), atan(column.y/column.x));\n\tvec2 h = hash(polar);\n    float dist = length(h);\n    fragColor =    dist\n     * step( length(fract(rd*n)-.5) / clamp(dist, 0., 1.), .5 )\n\t * vec4(h, .5,1);\n}\n","name":"Image","description":"","type":"image"}]}