{"ver":"0.1","info":{"id":"7l2BDh","date":"1652152773","viewed":91,"name":"Seagrass shader","username":"LiCal","description":"a shader simulating seagrass","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A one-liner hash function widely used in ShaderToy.\nfloat hash(float n) { \n    return fract(sin(n)*753.5453123);\n}\n\n// A one-liner seeded random number generator widely used in ShaderToy.\nfloat rand(float co){\n    return fract(sin(dot(vec2(co, co), vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// A one-liner seeded random number generator widely used in ShaderToy.\nfloat randVec2(in vec2 co){\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat rand_range(float seed, float low, float high) {\n    return mix(low, high, rand(seed));\n}\n\n// From the Book of Shaders https://thebookofshaders.com/13/\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = randVec2(i);\n    float b = randVec2(i + vec2(1.0, 0.0));\n    float c = randVec2(i + vec2(0.0, 1.0));\n    float d = randVec2(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (in vec2 st) {\n    float ret = 0.0;\n    float amplitude = .5;\n    float gain = 0.5;\n    float lacunarity = 2.0;\n    float frequency = 0.;\n    int octaves = 5;\n    for (int i = 0; i < octaves; i++) {\n        ret += amplitude * noise(st);\n        st *= lacunarity;\n        amplitude *= gain;\n    }\n    return ret;\n}\n\nvec4 seagrass(vec2 p, int seed, vec2 q, float r) {\n    float height = rand_range(float(seed + 17), 0.1, 0.9);\n    vec2 pos = vec2(rand_range(float(seed + 4), -0.35, 0.35), 0.0);\n    \n    pos = q + pos;\n    // y = 0 is the bottom of the seagrass\n    pos.y += 0.5; \n\n    // Seagrass shape\n    // Max_curve decides how bended the seagrass can be.\n    float max_curve = 1.3 - height;\n    float curve = rand_range(float(seed+1), -max_curve, max_curve);\n    float seagrass_curve = abs(pos.x - sign(curve) * pow(curve * (pos.y), 2.0));\n\n    // Generate seagrass\n    // R decreases with distance from the maximum height\n    r = r * (1.0 - 1.0 * smoothstep(0.78 * height, height, pos.y)); \n    float width = 0.005 * cos((pos.y -  + rand(float(seed+3)) * 10.) * 73.) + 0.025*rand(float(seed+3));\n    width *= (1.0 - 1.1 * smoothstep(0.8*height, height, pos.y)); \n    float res = smoothstep(r, r + 0.008 + width, seagrass_curve);\n\n    // We generate inner stem of the seagrass in a similar manner, but with a 1/20 radius \n    float inner_r = r/20.;\n    float width_inner = 0.004 * cos((pos.y) * 17.+ rand(float(seed+3)) * 10.);\n    width_inner *= (1.0 - 1.1 * smoothstep(0.8*height, height, pos.y));\n    float inner_res = smoothstep(inner_r, inner_r+ 0.008 + width_inner, seagrass_curve);\n\n    // Color of the seagrass\n    // G in RGB is random in range (0.5 ~ 0.65)\n    vec3 col = vec3(102./255., rand_range(float(seed-10),0.6,0.75) ,51./255.);\n    // Color gets darker (less green) as the seagrass gets closer to the stem\n    col = col - vec3(0.0, 0.1, 0.0) * (1.0-smoothstep(0.0, r, seagrass_curve));\n\n    // FBM noise. \n    float f = fbm(100. * vec2(p.x * 3., p.y * .2));\n    col = mix(col - vec3(0.0,0.04,0.0) , col + vec3(0.0,0.04,0.0) ,f);\n\n    // This part is for the inner seagrass\n    if (inner_res <1.) col /= 1.5;\n    // Simply to kill the seagrass higher than maximum height\n    if (pos.y > height) return vec4(col,1.1);\n    return vec4(col, res);\n}\n\nfloat background_ray(vec2 raySource, vec2 rayRefDirection, vec2 coord)\n{\n    vec2 sourceToCoord = coord - raySource;\n    float cosAngle = dot(normalize(sourceToCoord), rayRefDirection);\n    return ((0.35 + 0.15 * sin(-cosAngle * 37. + iTime * 1.2)) +\n            (0.3 + 0.2 * cos(cosAngle * 23. + iTime * 1.2))) *\n            clamp((iResolution.x - sourceToCoord.x) / iResolution.x, 0.5, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    float d = uv.y;\n    float c = d;\n    float r = -0.40;\n    c = smoothstep(r, r - 0.15, d);\n    vec3 ground = vec3(c) * vec3(0.76, 0.69, 0.50) * (0.75 + 0.25 * cos(0.3 * iTime));;\n    vec3 sky = vec3(1.0 - c)* vec3(0.1, 0.5, 0.90) * (0.75 + 0.25 * cos(0.3 * iTime));\n    vec3 col = ground + sky;\n    \n    float y = p.y;\n    float m = sin((y - iTime / 9.0) * 23.);\n    float x = (p.x + (m / 120.)) ;\n    vec2 newp = vec2(x, y);\n    for(int i = 0; i < 25; i ++){\n        float radius = rand_range(float(i), 0.02, 0.025);\n        vec4 seagrassouter = seagrass(newp, i, newp-.5, radius);\n        if (seagrassouter.w < 1.) {\n            col = seagrassouter.xyz;\n        }\n    }\n    fragColor = vec4(col, 1.0);\n\n    // Background ray\n    vec2 coord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\n    vec2 rayPos1 = vec2(iResolution.x * 0.7, iResolution.y * -.5);\n    vec2 rayRefDir1 = normalize(vec2(1.0, -0.116));\n\n    fragColor += 0.4 * background_ray(rayPos1, rayRefDir1, coord) * (0.75 + 0.25 * cos(0.3 * iTime));\n \n    // Attenuate brightness towards the bottom, simulating light-loss due to depth.\n    // Give the whole thing a blue-green tinge as well.\n    float brightness = 1.0 - (coord.y / iResolution.y);\n    fragColor.x *= 0.2 + (brightness * 0.8);\n    fragColor.y *= 0.3 + (brightness * 0.7);\n    fragColor.z *= 0.4 + (brightness * 0.6);\n \n}","name":"Image","description":"","type":"image"}]}