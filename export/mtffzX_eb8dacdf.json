{"ver":"0.1","info":{"id":"mtffzX","date":"1693351649","viewed":42,"name":"Coverage AA (circular distance)","username":"mrboggieman","description":"Cheap antialiasing by checking a percentage of coverage over a unit circle for each line in the triangle, multiplied together, no precision issues or artifacts :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["triangle","antialiasing","coverage"],"hasliked":0,"parentid":"NddGRH","parentname":"Coverage antialiasing (Triangle)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pixel_radius = 0.5; //sqrt(2.0) / 2.0; //unit square half diagonal\nconst float pixel_diameter = pixel_radius * 2.0;\n\nfloat det2(vec2 p1, vec2 p2) {\n  return (p1.x * p2.y) - (p1.y * p2.x);\n}\n\n//distance to the outer-most edge of a circle\n//approximates the percentage of how much a unit circle is covered by the line\n//visualise: https://www.desmos.com/calculator/c2zye0zhhr\nfloat coverageOfCircle(vec2 center, vec2 a, vec2 b) {\n    return clamp((pixel_radius - (det2(b - a, a - center) / length(b - a))) / pixel_diameter, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //triangle coords\n    vec2 a = floor(vec2(0.8, 0.1) * iResolution.xy);\n    vec2 b = floor(length(iMouse.xy) > 10.0 ? iMouse.xy : vec2(0.5, 0.5) * iResolution.xy);\n    vec2 c = floor((vec2(0.1, 0.2) + vec2(sin(iTime), cos(iTime)) * 0.2) * iResolution.xy);\n    \n    //circle center\n    vec2 pos = fragCoord.xy;\n    \n    float contribution = coverageOfCircle(pos, a, b) * coverageOfCircle(pos, b, c) * coverageOfCircle(pos, c, a);\n    \n    fragColor = vec4(contribution, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}