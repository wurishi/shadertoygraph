{"ver":"0.1","info":{"id":"MdVGDw","date":"1454877748","viewed":190,"name":"Worm in apple","username":"MMGS","description":"just another random something","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["3d","model","worm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// madeBy@MMGS 2016\n\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an =  3.1+iMouse.x*0.1;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\nvec3 doBackground( vec2 uv)\n{\n    return vec3(0,0,0.5-uv.y);\n}\n    \nfloat sMin( float a, float b )\n{\n    float k = .12;\n\tfloat h = clamp(0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\n\n//functions that build rotation matrixes\nmat2 rotate_2D(float a){float sa = sin(a); float ca = cos(a); return mat2(ca,sa,-sa,ca);}\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n    \n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\nvec2 doModel( vec3 p )\n{\n     float id;\n    \n    vec3 music;// = texture(iChannel0,p.xz).xyz;\n    \n    float scene[19]; //array to hold scene objects\n    float s,s1,s2;\n   // vec3 hpos=vec3(0.+cos(p.y+iTime*4.)*p.x*0.005,0,0); //model position\n \n    s=1.0;\n    p.x+=1.5;\n    // p+=hpos;\n        for(int i=0;i<15;i++)\n    {\n        float iter = float(i)*0.1;\n      if(i<12) p.z -= sin(iTime+p.x*3.1)*0.06;\n         s2 = length(p+vec3(.0-iter  ,iter ,0) ) - .15-cos(p.x*13.1)*0.04;      \n        s=sMin(s,s2);scene[0] = s-0.01;\n        if(i<12)  p.z += sin(iTime+p.x*3.1)*0.06;\n        \n  \n    }\n     p.z+=cos(iTime)*0.1;\n       //nose\n        s2 = length(p+vec3(0.35,0,0) ) - .32;\n         s=sMin(s,s2);scene[1] = sMin(s,s2);\n    \n       for(int i=0;i<2;i++)\n    {\n          float iter = float(i)*0.022;\n\n      s2 = length(p+vec3(.65-iter*2.,-0.1,0.1) ) - .035;\n         s=max(s,-s2);scene[2] = s+0.1;\n          s2 = length(p+vec3(.65-iter*2.,-0.1,-0.1) ) - .035;\n         s=max(s,-s2);scene[2] = s+0.1;\n     \n    }\n    //cheek\n      s2 = length(p+vec3(0.1,-0.1,0.3) ) - .3;\n         s=sMin(s,s2);scene[3] = sMin(s,s2);\n  \n     s2 = length(p+vec3(0.1,-0.1,-0.3) ) - .3;\n         s=sMin(s,s2);scene[4] = sMin(s,s2);\n    //eyesockets\n     s2 = length(p+vec3(0.1,-0.4,0.15) ) - .25;\n         s=sMin(s,s2);scene[5] =sMin(s,s2);\n      s2 = length(p+vec3(0.1,-0.4,-0.15) ) - .25;\n         s=sMin(s,s2);scene[6] =sMin(s,s2);\n   \n    //eyes\n       s2 = length(p+vec3(0.15,-0.4,0.15) ) - .2;\n         s=sMin(s,s2);scene[8] =sMin(s,s2);\n      s2 = length(p+vec3(0.15,-0.4,-0.15) ) - .2;\n         s=sMin(s,s2);scene[9] =sMin(s,s2);\n   //  p.z-=cos(iTime)*0.1;\n    \n \n       s2 = length(p+vec3(0.35,-0.4,0.15) ) - .02;\n         s=sMin(s,s2);scene[11] =sMin(s,s2);\n      s2 = length(p+vec3(0.35,-0.4,-0.15) ) - .02;\n         s=sMin(s,s2);scene[12] =sMin(s,s2);\n    \n     p.z-=cos(iTime)*0.1;\n    \n    \n    //apple\n    p.x+=-2.9;\n    p.y -= 0.75*pow(0.01+dot(p.xz,p.xz),0.2);\n   vec2 d1 = vec2( length(p+vec3(0,2.5,0)) - 1.5, 1.0 );\n   \n    s=sMin(s,d1.x); scene[7] =sMin(s,d1.x)+0.02;\n    \n    \n            for(int i=0;i<5;i++)\n    {\n        float\n        \n         iter = float(i)*0.05;\n          s2 = length(p+vec3(iter*1.2  ,1.1-iter*3. ,0) ) - .07-cos(p.x*13.1)*0.1*-p.x*0.5;      \n        s=sMin(s,s2);scene[10] = s2-0.5;\n        \n    }\n    \n      //////SORT OBJECTS\n    float test=9999.0;  //return closest object in scene\n    for(int i=0;i<13;i++){\n        float test2=scene[i];\n        if(test2<test)test=test2;\n    }\n    \n    \n    if(test == scene[0])id=1.0;\n     if(test == scene[1])id=1.0;\n      if(test == scene[2])id=1.0;\n    if(test == scene[3])id=1.0;\n    if(test == scene[4])id=1.0;\n    if(test == scene[5])id=1.0;\n    if(test == scene[6])id=1.0;\n    if(test == scene[7])id=2.0;\n\tif(test == scene[8])id=5.0;\n    if(test == scene[9])id=5.0;\n    if(test == scene[10])id=4.0;\n     if(test == scene[11])id=3.0;\n     if(test == scene[12])id=3.0;\n    return vec2(s,id);\n}\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f/0.9375;\n}\n\nvec3 appleColor( in vec3 pos, in vec3 nor, out vec2 spe )\n{\n    spe.x = 1.0;\n    spe.y = 1.0;\n\n    float a = atan(pos.x,pos.z);\n    float r = length(pos.xz);\n\n    // red\n    vec3 col = vec3(2.0,0.0,0.0);\n\n    // green\n    float f = smoothstep( 0.1, 1.0, fbm(pos*1.0) );\n    col = mix( col, vec3(0.8,1.0,0.2), f );\n\n    // dirty\n    f = smoothstep( 0.0, 1.0, fbm(pos*4.0) );\n    col *= 0.8+0.2*f;\n\n    // frekles\n    f = smoothstep( 0.0, 1.0, fbm(pos*48.0) );\n    f = smoothstep( 0.7,0.9,f);\n    col = mix( col, vec3(0.9,0.9,0.6), f*0.5 );\n\n    // stripes\n    f = fbm( vec3(a*7.0 + pos.z,3.0*pos.y,pos.x)*2.0);\n    f = smoothstep( 0.2,1.0,f);\n    f *= smoothstep(0.4,1.2,pos.y + 0.75*(noise(4.0*pos.zyx)-0.5) );\n    col = mix( col, vec3(0.4,0.2,0.0), 0.5*f );\n    spe.x *= 1.0-0.35*f;\n    spe.y = 1.0-0.5*f;\n\n    // top\n    f = 1.0-smoothstep( 0.14, 0.2, r );\n    col = mix( col, vec3(0.6,0.6,0.5), f );\n    spe.x *= 1.0-f;\n\n\n    float ao = 0.5 + 0.5*nor.y;\n    col *= ao*1.;\n\n    return col;\n}\nvec3 doMaterial( in vec3 pos, in vec3 nor,vec2 obj )\n{\n    vec3 col = vec3(0.2,0.25,0.2);\n     vec3  lig = normalize(vec3(-1.0,0.7,-0.9));\n    float spec = pow(clamp(dot(lig,nor),0.0,1.),6.0);\n   \n    vec2 apl;\n    \n    if(obj.y==1.) col =  vec3(0.1,0.7,0.1)*appleColor(nor,nor, apl );\n    if(obj.y==2.) col =  mix(appleColor(pos,nor, apl )*vec3(3,2.1,1)*0.3, vec3(spec*0.8)-dot(nor,lig)*0.4,  0.2);\n    if(obj.y==3.) col =  vec3(0,0,0)+spec*0.1;\n    if(obj.y==4.) col =  vec3(155./255.,103./255.,43./255.)*appleColor(nor,nor, apl )*0.3;\n    if(obj.y==5.) col =  vec3(0.27);\n    if(obj.y==6.) col = texture(iChannel1,pos.xz*1.5+0.5 ).xyz*0.5;\n    return col;\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(-1.0,0.7,-0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.001*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<80; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<25; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,1.8) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(fragCoord.xy/iResolution.xy);\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\t\n        vec2 obj = doModel(pos);\n        // materials\n       vec3 mal = doMaterial( pos, nor, obj );\n\t\t//vec3 obj = doModel(p);\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}