{"ver":"0.1","info":{"id":"Xtsczs","date":"1506049128","viewed":268,"name":"Cubic Bezier Demo","username":"2LiveBrew","description":"I put this together to demonstrate how cubic beziers are drawn.\nUse your mouse to control the handles.\n\nUnfortunately, I haven't figured out how to write a SDF to plot the cubic bezier itself -_-\n\nDrop a comment if you have any tips!","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["bezier","cubicbezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pointSDF (vec2 uv, vec2 point, float radius) {\n    return length(uv - point) - radius;\n}\n\nfloat hollowPointSDF (vec2 uv, vec2 point, float radius, float stroke) {\n    return abs(length(uv - point) - radius) - stroke / 2.;\n}\n\nfloat pointsSDF (vec2 uv, vec2 anchorA, vec2 handleA, vec2 anchorB, vec2 handleB, float radius) {\n    return min(\n        min(\n            min(\n                pointSDF(uv, anchorA, radius),\n                hollowPointSDF(uv, handleA, radius, 0.01)\n            ),\n            pointSDF(uv, anchorB, radius)\n        ),\n        hollowPointSDF(uv, handleB, radius, 0.01)\n    );\n}\n\nfloat lineSDF (vec2 uv, vec2 pointA, vec2 pointB, float radius)\n{\n    uv -= pointA;\n    pointB -= pointA;\n    float h = clamp( dot(uv, pointB) / dot( pointB, pointB ), 0., 1. );\n    return length( uv - pointB*h ) - radius;\n}\n\nfloat threeLinesSDF (vec2 uv, vec2 anchorA, vec2 handleA, vec2 anchorB, vec2 handleB, float radius) {\n    //uv - anchorA\n    //handleA - anchorA;\n    return min(\n        min(\n            lineSDF(uv, anchorA, handleA, radius),\n    \t\tlineSDF(uv, handleA, handleB, radius)\n        ),\n    \tlineSDF(uv, handleB, anchorB, radius)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy - vec2(iResolution.x/iResolution.y/2., 0.5);\n    \n    vec2 anchorA = vec2(-0.25);\n    vec2 handleA = vec2(-0.25, 0.25);\n    \n    if(iMouse.z > 0.)\n\t    handleA = iMouse.zw / iResolution.yy - vec2(iResolution.x*0.5/iResolution.y, 0.5);\n    \n    vec2 anchorB = vec2(0.25, -0.25);\n    vec2 handleB = vec2(0.25);\n    \n    if(iMouse.z > 0.)\n   \t\thandleB = iMouse.xy / iResolution.yy - vec2(iResolution.x*0.5/iResolution.y, 0.5);\n    \n    float pointsSD = pointsSDF(uv, anchorA, handleA, anchorB, handleB, 0.01);\n    \n    float threeLinesSD = threeLinesSDF(uv, anchorA, handleA, anchorB, handleB, 0.0025);\n    \n\tfragColor = vec4(step(0., min(pointsSD, threeLinesSD)));\n    \n    fragColor = mix(fragColor, vec4(1.), 1. - step(0., min(\n        pointSDF(uv, handleA, 0.01),\n    \tpointSDF(uv, handleB, 0.01)\n    )));\n    \n    float progress = sin(iTime / 1.5) * 0.5 + 0.5;\n    \n    vec2 level1A = mix(anchorA, handleA, progress);\n    vec2 level1B = mix(handleA, handleB, progress);\n    vec2 level1C = mix(handleB, anchorB, progress);\n    \n    float level1SD = min(\n        min(\n        \tpointSDF(uv, level1A, 0.01),\n            pointSDF(uv, level1B, 0.01)\n        ),\n        pointSDF(uv, level1C, 0.01)\n    );\n    \n    level1SD = min(\n        level1SD,\n        min(\n            lineSDF(uv, level1A, level1B, 0.0025),\n            lineSDF(uv, level1B, level1C, 0.0025)\n        )\n    );\n          \n    fragColor = mix(fragColor, vec4(1., 0., 1., 1.), 1. - step(0., level1SD));\n    \n    vec2 level2A = mix(level1A, level1B, progress);\n    vec2 level2B = mix(level1B, level1C, progress);\n    \n    float level2SD = min(\n        pointSDF(uv, level2A, 0.01),\n        pointSDF(uv, level2B, 0.01)\n    );\n    \n    level2SD = min(\n        level2SD,\n        lineSDF(uv, level2A, level2B, 0.0025)\n    );\n    \n    fragColor = mix(fragColor, vec4(0., 1., 0., 1.), 1. - step(0., level2SD));\n    \n    float level3SD = pointSDF(uv, mix(level2A, level2B, progress), 0.01);\n    \n    fragColor = mix(fragColor, vec4(1., 0.7, 0., 1.), 1. - step(0., level3SD));\n    \n    vec4 distances = mix(vec4(1., 0.7, 0., 1.), vec4(0.), step(0.1, mod(level3SD, 0.2)));\n    \n    //fragColor = mix(fragColor, distances, \n\t//\tsmoothstep(0., 1.,\n    //    \tstep(3., fragColor.r + fragColor.g + fragColor.b))\n    //);\n    fragColor *= step(0., abs(level3SD) - 0.0025);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n\n// The original version of this shader\n\nfloat pointSDF (vec2 uv, vec2 point, float radius) {\n    return length(uv - point) - radius;\n}\n\nfloat hollowPointSDF (vec2 uv, vec2 point, float radius, float stroke) {\n    return abs(length(uv - point) - radius) - stroke / 2.;\n}\n\nfloat pointsSDF (vec2 uv, vec2 anchorA, vec2 handleA, vec2 anchorB, vec2 handleB, float radius) {\n    return min(\n        min(\n            min(\n                pointSDF(uv, anchorA, radius),\n                hollowPointSDF(uv, handleA, radius, 0.01)\n            ),\n            pointSDF(uv, anchorB, radius)\n        ),\n        hollowPointSDF(uv, handleB, radius, 0.01)\n    );\n}\n\nfloat lineSDF (vec2 uv, vec2 pointA, vec2 pointB, float radius)\n{\n    uv -= pointA;\n    pointB -= pointA;\n    float h = clamp( dot(uv, pointB) / dot( pointB, pointB ), 0., 1. );\n    return length( uv - pointB*h ) - radius;\n}\n\nfloat threeLinesSDF (vec2 uv, vec2 anchorA, vec2 handleA, vec2 anchorB, vec2 handleB, float radius) {\n    //uv - anchorA\n    //handleA - anchorA;\n    return min(\n        min(\n            lineSDF(uv, anchorA, handleA, radius),\n    \t\tlineSDF(uv, handleA, handleB, radius)\n        ),\n    \tlineSDF(uv, handleB, anchorB, radius)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy - vec2(iResolution.x/iResolution.y/2., 0.5);\n    \n    vec2 anchorA = vec2(-0.25);\n    vec2 handleA = vec2(-0.25, 0.25);\n    \n    if(iMouse.z > 0.)\n\t    handleA = iMouse.zw / iResolution.yy - vec2(iResolution.x*0.5/iResolution.y, 0.5);\n    \n    vec2 anchorB = vec2(0.25, -0.25);\n    vec2 handleB = vec2(0.25);\n    \n    if(iMouse.z > 0.)\n   \t\thandleB = iMouse.xy / iResolution.yy - vec2(iResolution.x*0.5/iResolution.y, 0.5);\n    \n    float pointsSD = pointsSDF(uv, anchorA, handleA, anchorB, handleB, 0.01);\n    \n    float threeLinesSD = threeLinesSDF(uv, anchorA, handleA, anchorB, handleB, 0.0025);\n    \n\tfragColor = vec4(step(0., min(pointsSD, threeLinesSD)));\n    \n    fragColor = mix(fragColor, vec4(1.), 1. - step(0., min(\n        pointSDF(uv, handleA, 0.01),\n    \tpointSDF(uv, handleB, 0.01)\n    )));\n    \n    float progress = sin(iTime / 1.5) * 0.5 + 0.5;\n    \n    vec2 level1A = mix(anchorA, handleA, progress);\n    vec2 level1B = mix(handleA, handleB, progress);\n    vec2 level1C = mix(handleB, anchorB, progress);\n    \n    float level1SD = min(\n        min(\n        \tpointSDF(uv, level1A, 0.01),\n            pointSDF(uv, level1B, 0.01)\n        ),\n        pointSDF(uv, level1C, 0.01)\n    );\n    \n    level1SD = min(\n        level1SD,\n        min(\n            lineSDF(uv, level1A, level1B, 0.0025),\n            lineSDF(uv, level1B, level1C, 0.0025)\n        )\n    );\n          \n    fragColor = mix(fragColor, vec4(1., 0., 1., 1.), 1. - step(0., level1SD));\n    \n    vec2 level2A = mix(level1A, level1B, progress);\n    vec2 level2B = mix(level1B, level1C, progress);\n    \n    float level2SD = min(\n        pointSDF(uv, level2A, 0.01),\n        pointSDF(uv, level2B, 0.01)\n    );\n    \n    level2SD = min(\n        level2SD,\n        lineSDF(uv, level2A, level2B, 0.0025)\n    );\n    \n    fragColor = mix(fragColor, vec4(0., 1., 0., 1.), 1. - step(0., level2SD));\n    \n    float level3SD = pointSDF(uv, mix(level2A, level2B, progress), 0.01);\n    \n    fragColor = mix(fragColor, vec4(1., 0.7, 0., 1.), 1. - step(0., level3SD));\n    \n    vec4 distances = mix(vec4(1., 0.7, 0., 1.), vec4(0.), step(0.1, mod(level3SD, 0.2)));\n    \n    //fragColor = mix(fragColor, distances, \n\t//\tsmoothstep(0., 1.,\n    //    \tstep(3., fragColor.r + fragColor.g + fragColor.b))\n    //);\n    fragColor *= step(0., abs(level3SD) - 0.0025);\n}\n**/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){}","name":"Buf A","description":"","type":"buffer"}]}