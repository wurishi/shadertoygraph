{"ver":"0.1","info":{"id":"XlyyDc","date":"1537907488","viewed":615,"name":"\"solar system\" social game 1","username":"FabriceNeyret2","description":"Each particle is associated with 2 targets, and try to get aligned with them.\n( in real word, better with obstacles to not converge all in line ).\nSet N in common.  Try relax = .5 :-)\nRewind to restart.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["simu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cf variant https://www.shadertoy.com/view/4tGyDc\n\n// --- draw particles\n\n#define S(d)     smoothstep( 2., 0., d)\n#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) ) // https://www.shadertoy.com/view/ll2cDc\n\n// line segment with disc ends: https://www.shadertoy.com/view/4dcfW8\nfloat line(vec2 p, vec2 a,vec2 b, out float h) { \n    p -= a, b -= a;\n\t h = clamp(dot(p, b) / dot(b, b), 0., 1.);   // proj coord on line\n\treturn length(p - b * h);                    // dist to segment\n}\n \nvoid mainImage( out vec4 O, vec2 U )\n{\n    O-=O;\n    vec4 BB = T(N) +.05*vec4(-1,-1,1,1);         // Bbox + margin\n    vec2  L = ( BB.zw-BB.xy ) / R;\n    float H = 1. / max( L.x, L.y );              // scaling\n#define frame(i)  ( T(i).xy -BB.xy ) * H\n \n    for( int i=0; i<N; i++) {\n        vec4 C = hue(float(i)/float(N));         // particle color\n        vec2 P = frame( i ),                     // particle coords\n             A = frame( T(i).z ),                // targets coords\n             B = frame( T(i).w );\n        O += S( length( U - P ) -4.) *C;         // draw partic\n        float ha, hb, \n              da = line( U, P, A, ha),           // draw lines to targets\n              db = line( U, P, B, hb);\n        if ( db < da ) da = db, ha = hb;  \n        O += S( da ) * (1.-ha) *C;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// --- simulates particles\n\n#define hash(p)   fract( sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n#define irnd(x,y) floor( float(N) * hash(vec2(x,y)) )    \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if (iFrame==0) {                         // init partics (0,y) \n        float t = mod(iDate.w,10.);\n        O.x = hash(vec2(U.y+t,1)) * R.x/R.y; // .xy = location\n        O.y = hash(vec2(U.y-t,-1));\n        O.z = irnd(U.y,t);                   // .zw = targets id\n        O.w = irnd(U.y,-t);                  // the 3 points must differ\n        if ( O.z == floor(U.y) )            O.z = irnd(U.y, t+1.);\n        if ( O.w == floor(U.y) ||O.w==O.z ) O.w = irnd(U.y,-t+1.);\n         }\n    \n    else if (U.x==.5) {\n        O = T(U.y);                          // previous partic state\n        vec2 A = T(O.z).xy,                  // targets coords\n             B = T(O.w).xy,\n             D = B - A,                      // alignment dir\n             P = O.xy - A ,                  // A to partic coords\n             pP = A + dot(P,D)*D/(dot(D,D)+1e-9); // proj on dir\n        O.xy = mix(O.xy,pP,relax);           // move with relaxation\n        \n        if ( int(U.y) == N ) {               // Bbox in (0,N)\n            O = 1e2 * vec4(1,1,-1,-1);\n            for( int i=0; i<N; i++) {\n                O.x = min( O.x, T(i).x);\n                O.y = min( O.y, T(i).y);\n                O.z = max( O.z, T(i).x);\n                O.w = max( O.w, T(i).y);\n            }\n        }\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define N 20       // number of particles\n#define relax .01  // relaxation speed\n\n#define texelFetch(ch,u,l) texture(ch, (vec2(u)+.5)/R ) // webGL1\n#define T(y) texelFetch(iChannel0, ivec2(0,y), 0)\n\n#define R iResolution.xy","name":"Common","description":"","type":"common"}]}