{"ver":"0.1","info":{"id":"stySD1","date":"1640596769","viewed":93,"name":"ImageProcessing Sample Color 1","username":"dhayward","description":"ImageProcessing Sample1","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 alterPixel (vec3 pixel, vec2 mouse)\n{\n    float amount = mouse.y; // amount 0...1\n    \n    // Exposure brighten\n    // https://www.desmos.com/calculator/1gcay4wdq8\n    if (false) {\n        return (1.0 + amount) * pixel;\n    }\n    \n    \n    // Exposure darken\n    // https://www.desmos.com/calculator/jmhqcjb03o\n    if (false) {\n        return (1.0 - amount) * pixel;\n    }\n    \n    \n    // Tint adjust\n    // https://www.desmos.com/calculator/r9jbfnzn13\n    if (false) {\n        amount = (amount-0.5);\n        pixel.r = (1.0 + amount) * pixel.r;\n        pixel.g = pixel.g;\n        pixel.b = (1.0 - amount) * pixel.b;\n        return pixel;\n    }\n    \n    // Desaturation\n    if (false) {\n        vec3 newPix = vec3(pixel.r + pixel.g + pixel.b)/3.0;\n        return mix(pixel, newPix, amount);\n    }\n    \n    // Saturation\n    if (false) {\n        vec3 newPix = vec3(pixel.r + pixel.g + pixel.b)/3.0;\n        return mix(pixel, newPix, -amount);\n    }\n    \n    \n    // Contrast brighter\n    // https://www.desmos.com/calculator/rcjkoji6oc\n    if (false)\n    {\n        return pow(pixel,vec3(1.0/(1.0+amount)));\n    }\n    \n    \n    // Contrast darker\n    // https://www.desmos.com/calculator/bdnlzk1ma0\n    if (true)\n    {\n        return pow(pixel,vec3(1.0+amount));\n    }\n    \n    \n    return pixel;\n}\n\nvec3 DrawSlider (vec2 pos, vec2 mouse, vec3 rgb)\n{\n    if (pos.x>0.05)\n        return rgb;\n\n    if (abs(pos.y - mouse.y)<0.01)\n        return vec3(1.0);\n    return rgb * 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy / iResolution.xy;\n\tvec2 pos = fragCoord.xy / iResolution.xy;\n    \n    vec4 c = texture(iChannel0,pos);\n    \n    c.rgb = alterPixel(c.rgb, mouse);\n    c.rgb = DrawSlider(pos, mouse, c.rgb);\n\tfragColor = c;\n}","name":"Image","description":"","type":"image"}]}