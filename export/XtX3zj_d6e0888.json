{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Alien Tech by Kali\n\n#define SHOWLIGHT //comment this line if you find the moving ligth annoying like Dave :D\n#define BLINKINGLIGHTS 1.\n\n// change this to tweak the fractal\n#define c vec2(2.,4.5) \n\n//other cool params (comment default then uncomment one of this):\n//#define c vec2(1.,5.)\n//#define c vec2(4.,.5)\n//#define c vec2(4.-length(p)*.2)\n//#define c vec2(abs(sin(p.y*2.)),5.) //love this one with blinking\n\n\n#define ti iTime\nvec3 ldir;\nfloat ot;\nfloat blur;\n\n\n// 2D fractal based on Mandelbox\nfloat formula(vec2 p) {\n\tvec2 t = vec2(sin(ti * .3) * .1 + ti * .05, ti * .1); // move fractal\n\tt+= iMouse.xy / iResolution.xy;\n\tp=abs(.5 - fract(p * .4 + t)) * 1.3; // tiling\n\tot=1000.; \n\tfloat l, expsmo;\n\tfloat aav=0.;\n\tl=0.; expsmo=0.;\n\tfor (int i = 0; i < 11; i++) { \n\t\tp = abs(p + c) - abs(p - c) - p; \n\t\tp/= clamp(dot(p, p), .0007, 1.);\n\t\tp = p* -1.5 + c;\n\t\tif ( mod(float(i), 2.) < 1. ) { // exponential smoothing calc, with iteration skipping\n\t\t\tfloat pl = l;\n\t\t\tl = length(p);\n\t\t\texpsmo+= exp(-1. / abs(l - pl));\n\t\t\tot=min(ot, l);\n\t\t}\n\t}\n\treturn expsmo;\n}\n\nvec3 light(vec2 p, vec3 col) {\n\t\n\t// calculate normals based on horizontal and vertical vectors being z the formula result\n\tvec2 d = vec2(0., .003);\n\tfloat d1 = formula(p - d.xy) - formula(p+d.xy);\n\tfloat d2 = formula(p - d.yx) - formula(p+d.yx);\t\n  \tvec3 n1 = vec3(0.    , d.y*2., -d1*.05);\n  \tvec3 n2 = vec3(d.y*2., 0.    , -d2*.05);\n  \tvec3 n = normalize(cross(n1, n2));\n\n\t// lighting\n\tfloat diff = pow( max(0., dot(ldir, n)) , 2.) + .2; // lambertian diffuse + ambient\n\tvec3 r = reflect(vec3(0.,0.,1.), ldir); // half vector\n\tfloat spec = pow( max(0., dot(r,n)) , 30.); // specular\n  \treturn diff*col + spec*.8;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - .5;\n\tvec2 aspect = vec2(iResolution.x / iResolution.y, 1.);\n\tuv*= aspect;\n\tvec2 pixsize = .25 / iResolution.xy * aspect; // pixel size for antialias\n\tfloat sph = length(uv); sph = sqrt(1. - sph*sph) * 1.5; // curve for spheric distortion\n\tuv = normalize(vec3(uv, sph)).xy * 1.3; // normalize back to 2D and scale (zoom level)\n\tpixsize = normalize(vec3(pixsize, sph)).xy * 1.3; // the same with pixsize for proper AA\n\n\t#ifdef SHOWLIGHT\n\tvec3 lightpos = vec3(sin(ti), cos(ti * .5), - .7); // moving light\n\t#else\n\tvec3 lightpos=vec3(0.,0.,-1.); // static light\n\t#endif\n\n\tlightpos.xy*= aspect * .25; // correct light coordinates\n\tvec3 col = vec3(0.);\n\tfloat lig = 0.;\n\tfloat titila = texture(iChannel0, vec2(ti * .25)).x; // for light intensity variation\n\n\t// AA loop\n\tfor ( float aa = 0.; aa<9. ; aa++ ) { \n\t\tvec2 aacoord = floor( vec2(aa/3., mod(aa,3.)) ); // get coord offset for AA sample\n\t\tvec2 p = uv + aacoord * pixsize; \n\t\tldir = normalize(vec3(p, .0) + lightpos); // get light direction\n\t\tfloat k = clamp(formula(p) * .25, .8, 1.4); // get value for colors in the desired range\n\t\tcol+= light(p, vec3(k, k*k, k*k*k)); // accumulate surface color (a gradient trick)\n\t\tlig+= max(0., 2. - ot) / 2.; // accumulate orbit trap (yellow lights, shared \"ot\" var)\n\t}\n\n\tcol*= .2; // correct brightness\n\tvec2 luv = uv + lightpos.xy; // uv shift by light coords\n\n\t// min amb light + spotlight with falloff * varying intensity\n\tcol*= .07 + pow( max(0., 1. - length(luv) * .5), 9. ) * (1. - titila * .3);\n\t\n\t// rotating star light\n\tfloat star = abs(1.5708 - mod(atan(luv.x, luv.y) *3. - ti * 10., 3.1416)) * .02 - .05;\n\t#ifdef SHOWLIGHT\n\tcol+= pow( max(0.,.3 - length(luv * 1.5) - star) / .3 , 5.) * (1. - titila * .5);\n\t#endif\n\t\n\t// yellow lights\n\tcol+= pow(lig * .12, 15.) * vec3(1.,.9,.3) * (.8 + BLINKINGLIGHTS * sin(ti * 5. - uv.y * 10.) * .6);\n\t\n\tfragColor = vec4(col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtX3zj","date":"1379620640","viewed":3466,"name":"Alien Tech","username":"Kali","description":"Someone at Fractal Forums suggested that the word \\\"alien\\\" should be banned from fractal art, but I couldn\\'t resist :).  No rays, just light shading from normals, plane distortion and orbit trap for the yellow lights (and 3x antialiasing)","likes":67,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d"],"hasliked":0,"parentid":"","parentname":""}}