{"ver":"0.1","info":{"id":"sdffRS","date":"1649919161","viewed":100,"name":"Regular Kaleidoscope","username":"dizndaz","description":"just a simple kaleidoscope :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.)\nvec2 rot(float a, vec2 uv)\n{\n    return uv * mat2(cos(a), -sin(a),\n                     sin(a),  cos(a));\n}\n\n\nvec2 fold(vec2 uv, float folds){\n    float a = atan(uv.x,uv.y);\n    float maxA = PI * 2. /folds;\n    float id = floor(a/ maxA);\n    \n    //invert every other sector\n    float pos = (mod(id, 2.) >= 1.) ? -1. : 1.;\n    uv.y *= pos;\n    \n    //set initial offset\n    if(pos == -1.) uv = rot((maxA * (folds/2. + 1. + id)) * pos, uv);\n    else           uv = rot((maxA *  (id)) * pos, uv);\n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/ iResolution.y ;\n    float t = iTime * .5;\n   \n    uv = rot(t, fold(uv, 16.));\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}