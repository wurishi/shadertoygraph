{"ver":"0.1","info":{"id":"tsl3Dj","date":"1547557724","viewed":90,"name":"Timed shader coding (25mn)","username":"rodgzilla","description":"shader showdown practice (beginner).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["timedcoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 100\n#define MIN_DIST .01\n#define MAX_DIST 100.\n#define FOV_PARAM 2.\n#define SURF_SHIFT 0.1\n#define SPEED 0.5\n\nmat2 rot2d(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c, s, -s, c);\n}\n\nvec3 palette(float x) {\n    vec3 a = vec3(0,0,0);\n    vec3 b = vec3(1,1,1);\n    vec3 c = vec3(1,1,1);\n    vec3 d = vec3(0,.33,.67);\n\t\n    return a + b * cos(2. * 3.14159 * c * x + d);\n}\nfloat GetDistSphere(vec3 p, vec4 sphere) {\n    float wave = sin(iTime) * 0.5 + 0.5;\n//    return length(sphere.xyz - p) - sphere.w * (sin(p.z) + 1. * wave);\n    return length(sphere.xyz - p) - sphere.w;\n}\n\nfloat GetDistSphereRep(vec3 p, vec4 sphere, vec3 rep) {\n    vec3 q = mod(p, rep) - 0.5 * rep;\n    \n    return GetDistSphere(q, sphere);\n}\n\nfloat GetDist(vec3 p) {\n    p.xy *= rot2d(sin(p.z * 0.5) * sin(iTime));\n    vec4 sphere = vec4(0, 0, 0.5, 0.2);\n//    float floorDist = 0.2;\n    vec3 rep = vec3(0.5, 1., 1.);\n    float d = GetDistSphereRep(p, sphere, rep);\n//    d = min(d, p.y + floorDist);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float d = 0.;\n    \n    for (int i = 0; i < MAX_STEP; i++) {\n        vec3 p = ro + d * rd;\n       \tfloat dScene = GetDist(p);\n        d += dScene;\n        \n        if (d < MIN_DIST || d > MAX_DIST) break;\n    }\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = GetDist(p) - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    float wave = sin(iTime) * 0.5 + 0.5;\n    vec3 light = vec3(1, 1, 0.5 + SPEED * iTime + 5. * wave);\n//   \tlight.xz *= rot2d(iTime); \n    vec3 toLight = light - p;\n    vec3 n = GetNormal(p);\n    float dif = dot(n, normalize(toLight));\n    float d = RayMarch(p + SURF_SHIFT * n, normalize(toLight));\n    \n    if (d < length(toLight)) {\n        dif *= 0.1;\n    }\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv.xy *= FOV_PARAM;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 0, SPEED * iTime);\n \tvec2 roRotCenter = vec2(0, 2);\n//    ro.xy = (ro.xy - roRotCenter) * rot2d(iTime) + roRotCenter;\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float d = RayMarch(ro, rd); \n    vec3 p = ro + d * rd;\n\tfloat dif = GetLight(p);\n//    col = vec3(d / 3.);\n    col = palette(p.z) * dif; \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}