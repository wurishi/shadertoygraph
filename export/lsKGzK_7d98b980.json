{"ver":"0.1","info":{"id":"lsKGzK","date":"1455427222","viewed":664,"name":"for_kate","username":"jdrmoore","description":"// Quick valentine code for my wonderful girlfriend\n// All talent borrowed from others...\n// Heart from iq\n// Text rendering from flyguy\n// Fireworks from bigwings","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["valentine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Quick valentine code for my wonderful girlfriend\n// All talent borrowed from others...\n// Heart from iq\n// https://www.shadertoy.com/view/XsfGRn\n// Text rendering from flyguy\n// https://www.shadertoy.com/view/XtsGRl\n// Fireworks from bigwings\n// https://www.shadertoy.com/view/lscGRl\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    vec4 samp0=texture(iChannel0,uv);\n    vec4 samp1=texture(iChannel1,uv);\n    fragColor = max(samp0,samp1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// \"Fireworks\" by Martijn Steinrucken aka BigWings - 2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.141592653589793238\n#define TWOPI 6.283185307179586\n#define S(x,y,z) smoothstep(x,y,z)\n#define B(x,y,z,w) S(x-z, x+z, w)*S(y+z, y-z, w)\n#define saturate(x) clamp(x,0.,1.)\n\n#define NUM_EXPLOSIONS 7.\n#define NUM_PARTICLES 20.\n\n\n// Noise functions by Dave Hoskins \n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash31(float p) {\n   vec3 p3 = fract(vec3(p) * MOD3);\n   p3 += dot(p3, p3.yzx + 19.19);\n   return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat hash12(vec2 p){\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat circ(vec2 uv, vec2 pos, float size) {\n\tuv -= pos;\n    \n    size *= size;\n    return S(size*1.1, size, dot(uv, uv));\n}\n\nfloat light(vec2 uv, vec2 pos, float size) {\n\tuv -= pos;\n    \n    size *= size;\n    return size/dot(uv, uv);\n}\n\nvec3 explosion(vec2 uv, vec2 p, float seed, float t) {\n\t\n    vec3 col = vec3(0.);\n    \n    vec3 en = hash31(seed);\n    vec3 baseCol = en;\n    for(float i=0.; i<NUM_PARTICLES; i++) {\n    \tvec3 n = hash31(i)-.5;\n       \n\t\tvec2 startP = p-vec2(0., t*t*.1);        \n        vec2 endP = startP+normalize(n.xy)*n.z;\n        \n        \n        float pt = 1.-pow(t-1., 2.);\n        vec2 pos = mix(p, endP, pt);    \n        float size = mix(.015, .005, S(0., .1, pt));\n        size *= S(1., .1, pt);\n        \n        float sparkle = (sin((pt+n.z)*100.)*.5+.5);\n        sparkle = pow(sparkle, pow(en.x, 3.)*50.)*mix(0.01, .01, en.y*n.y);\n      \n    \t//size += sparkle*B(.6, 1., .1, t);\n        size += sparkle*B(en.x, en.y, en.z, t);\n        \n        col += baseCol*light(uv, pos, size);\n    }\n    \n    return col;\n}\n\nvec3 Rainbow(vec3 c) {\n\t\n    float t=iTime;\n    \n    float avg = (c.r+c.g+c.b)/3.;\n    c = avg + (c-avg)*sin(vec3(0., .333, .666)+t);\n    \n    //c += sin(vec3(.4, .3, .3)*t + vec3(1.1244,3.43215,6.435))*vec3(.4, .1, .5);\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv.x -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float n = hash12(uv+10.);\n    float t = iTime*.5;\n    \n    vec3 c = vec3(0.);\n    \n    for(float i=0.; i<NUM_EXPLOSIONS; i++) {\n    \tfloat et = t+i*1234.45235;\n        float id = floor(et);\n        et -= id;\n        \n        vec2 p = hash31(id).xy;\n        p.x -= .5;\n        p.x *= 1.6;\n        c += explosion(uv, p, id, et);\n    }\n    c = Rainbow(c);\n    \n    fragColor = vec4(c, 1.);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define CHAR_SIZE vec2(3, 7)\n#define CHAR_SPACING vec2(4, 8)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\n/*\nTop left pixel is the most significant bit.\nBottom right pixel is the least significant bit.\n\n â–ˆ     010    \nâ–ˆ â–ˆ    101    \nâ–ˆ â–ˆ    101    \nâ–ˆâ–ˆâ–ˆ -> 111 -> 010 101 101 111 101 101 101 -> 712557\nâ–ˆ â–ˆ    101    \nâ–ˆ â–ˆ    101    \nâ–ˆ â–ˆ    101    \n*/\n\n//Automatically generated from a sprite sheet.\nfloat ch_sp = 0.0;\nfloat ch_a = 712557.0;\nfloat ch_b = 1760622.0;\nfloat ch_c = 706858.0;\nfloat ch_d = 1760110.0;\nfloat ch_e = 2018607.0;\nfloat ch_f = 2018596.0;\nfloat ch_g = 706922.0;\nfloat ch_h = 1498989.0;\nfloat ch_i = 1909911.0;\nfloat ch_j = 1872746.0;\nfloat ch_k = 1498477.0;\nfloat ch_l = 1198375.0;\nfloat ch_m = 1571693.0;\nfloat ch_n = 1760109.0;\nfloat ch_o = 711530.0;\nfloat ch_p = 711972.0;\nfloat ch_q = 711675.0;\nfloat ch_r = 1760621.0;\nfloat ch_s = 2018927.0;\nfloat ch_t = 1909906.0;\nfloat ch_u = 1497963.0;\nfloat ch_v = 1497938.0;\nfloat ch_w = 1498109.0;\nfloat ch_x = 1496429.0;\nfloat ch_y = 1496210.0;\nfloat ch_z = 2004271.0;\nfloat ch_1 = 730263.0;\nfloat ch_2 = 693543.0;\nfloat ch_3 = 693354.0;\nfloat ch_4 = 1496649.0;\nfloat ch_5 = 1985614.0;\nfloat ch_6 = 707946.0;\nfloat ch_7 = 1873042.0;\nfloat ch_8 = 709994.0;\nfloat ch_9 = 710250.0;\nfloat ch_0 = 711530.0;\nfloat ch_per = 2.0;\nfloat ch_que = 693378.0;\nfloat ch_exc = 599170.0;\nfloat ch_com = 10.0;\nfloat ch_scl = 65556.0;\nfloat ch_col = 65552.0;\nfloat ch_usc = 7.0;\nfloat ch_crs = 11904.0;\nfloat ch_dsh = 3584.0;\nfloat ch_ast = 21824.0;\nfloat ch_fsl = 304292.0;\nfloat ch_bsl = 1189001.0;\nfloat ch_lpr = 346385.0;\nfloat ch_rpr = 1118804.0;\nfloat ch_lba = 862355.0;\nfloat ch_rpa = 1647254.0;\n\nvec2 print_pos = vec2(2,2);\n\n//Extracts bit b from the given number.\nfloat extract_bit(float n, float b)\n{\n    return floor(mod(floor(n / pow(2.0,floor(b))),2.0));   \n}\n\n//Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(float spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    //Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    //Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n    \n    return bounds ? extract_bit(spr, bit) : 0.0;\n\n}\n\n//Prints a character and moves the print position forward by 1 character width.\nfloat char(float ch, vec2 uv)\n{\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n\n//Returns the digit sprite for the given number.\nfloat get_digit(float d)\n{\n    d = floor(d);\n    \n    if(d == 0.0) return ch_0;\n    if(d == 1.0) return ch_1;\n    if(d == 2.0) return ch_2;\n    if(d == 3.0) return ch_3;\n    if(d == 4.0) return ch_4;\n    if(d == 5.0) return ch_5;\n    if(d == 6.0) return ch_6;\n    if(d == 7.0) return ch_7;\n    if(d == 8.0) return ch_8;\n    if(d == 9.0) return ch_9;\n    return 0.0;\n}\n\n//Prints out the given number starting at pos.\nfloat print_number(float number,vec2 pos, vec2 uv)\n{\n    vec2 dec_pos = pos;\n    float result = 0.0;\n    \n    for(int i = 3;i >= 0;i--)\n    {\n        float clip = float(abs(number) > pow(10.0, float(i)) || i == 0); //Clip off leading zeros.\n        \n        float digit = mod(number / pow(10.0, float(i)),10.0);\n        \n        result += sprite(get_digit(digit),CHAR_SIZE, uv - dec_pos) * clip;\n        \n        dec_pos.x += CHAR_SPACING.x * clip;\n    }\n    \n    return result;\n}\n\nvec4 heart( in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)/min(iResolution.y,iResolution.x);\n    \n    p.y -= 0.3;\n\n    // shape\n    float a = atan(p.x,p.y)/3.141593;\n    float r = length(p);\n    float h = abs(a);\n    float d = (13.0*h - 22.0*h*h + 10.0*h*h*h)/(6.0-5.0*h);\n\n    // color\n    float s = 1.0-0.5*clamp(r/d,0.0,1.0);\n    s = 0.75 + 0.75*p.x;\n    s *= 1.0-0.25*r;\n    s = 0.5 + 0.6*s;\n    s *= 0.5+0.5*pow( 1.0-clamp(r/d, 0.0, 1.0 ), 0.1 );\n    vec3 hcol = vec3(1.0,0.5*r,0.3)*s;\n    \n    vec3 col = mix( vec3(0.,0.,0.), hcol, smoothstep( -0.01, 0.01, d-r) );\n\n    return vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = mod(float(iTime),32.0);\n    float col = 0.0;\n    \n    {\n        vec2 res = iResolution.xy / 4.0;\n        \n        vec2 uv = fragCoord.xy / 4.0;\n        uv =  floor(uv);\n\n        print_pos = vec2(res.x/2.0 - STRWIDTH(18.0)/2.0,res.y/2.0 - STRHEIGHT(1.0)/2.0);\n        print_pos = floor(print_pos);        \n\n        //if (time > 1.) \n            col += char(ch_i,uv);\n        //if (time > 1.) \n            col += char(ch_sp,uv);\n        //if (time > 2.) \n            col += char(ch_l,uv);\n        //if (time > 3.) \n            col += char(ch_o,uv);\n        //if (time > 4.) \n            col += char(ch_v,uv);\n        //if (time > 5.) \n            col += char(ch_e,uv);\n        //if (time > 5.) \n            col += char(ch_sp,uv);\n        //if (time > 6.) \n            col += char(ch_k,uv);\n        //if (time > 7.) \n            col += char(ch_a,uv);\n        //if (time > 8.) \n            col += char(ch_t,uv);\n        //if (time > 9.) \n            col += char(ch_e,uv);\n        //if (time > 9.) \n            col += char(ch_sp,uv);\n        //if (time > 10.) \n            col += char(ch_g,uv);\n        //if (time > 11.) \n            col += char(ch_r,uv);\n        //if (time > 12.) \n            col += char(ch_e,uv);\n        //if (time > 13.) \n            col += char(ch_s,uv);\n        //if (time > 14.) \n            col += char(ch_t,uv);\n        //if (time > 15.) \n            col += char(ch_y,uv);\n    }\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 samp0 = texture(iChannel0, uv);\n    vec4 samp1 = texture(iChannel1, uv);   \n    \n    if (time < 1.)\n        fragColor = mix( samp1, vec4(0.,0.,0.,1.), smoothstep(0., 1., time) );\n    else if (time > 26.)\n         fragColor = mix( samp1, heart(fragCoord) + vec4(col,col,col,1.), smoothstep(26., 32., time) );\n    else if (col > 0.5 && length(samp0.xyz)>0.2)\n        fragColor = clamp(samp0 + samp1, 0., 1.);\n    else\n        fragColor = samp1;\n}","name":"Buf B","description":"","type":"buffer"}]}