{"ver":"0.1","info":{"id":"NtcSRB","date":"1639299043","viewed":46,"name":"[TDF2021] Microbes Plaid","username":"shiomusubi","description":"Something like a microbes and a plaid.\nThis shader submitted to Tokyo Demo Fest 2021, GLSL Graphics Compo.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fbm","tdf2021"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n \n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n \n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n \n    vec2 u = f * f * (3.0 - 2.0 * f);\n \n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n \n#define NUM_OCTAVES 5\n \nfloat fbm ( in vec2 _st) {\n    float v = 0.;\n    float a = .5;\n    vec2 shift = vec2(100.);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(.5), sin(.5),\n                    -sin(.5), cos(.5));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2. + shift;\n        a *= .5;\n    }\n    return v;\n}\n \nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(123.,456.)),dot(p,vec2(789.,158.))))*12345.);\n}\n \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n\t\n    vec3 color = vec3(0.0);\n    vec2 rand = random2(vec2(0.));\n    float zoom = sin(rand.x+iTime*.2);\n    st -= vec2(zoom);\n    st *= sin(iTime/8.)*10.;\n    \n   \n    mat2 rot = mat2(cos(iTime*.2+rand.x), sin(rand.y+iTime*.3),\n                    -sin(rand.y+iTime*.5), cos(rand.x+iTime*.4));\n    \n    st *= rot;\n    \n    vec2 gv = floor(st);\n    vec2 id = fract(st);\n    \n    float m_dist = 1.;  // minimum distance\n \n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            // Neighbor place in the grid\n            vec2 neighbor = vec2(float(x),float(y));\n \n            // Random position from current + neighbor place in the grid\n            vec2 point = random2(gv + neighbor);\n\t\n\t    // Animate the point\n            point = .5 + .5*sin(iTime + 6.3*point);\n \n\t    // Vector between the pixel and the point\n            vec2 diff = neighbor + point - id;\n \n            // Distance to the point\n            float dist = length(diff);\n \n            // Keep the closer distance\n            m_dist = min(m_dist, dist);\n        }\n    }\n    \n    color += m_dist;\n \n    // Draw cell center\n    color += 1.-step(-.4, m_dist);\n \n    vec2 q = vec2(0.);\n    q.x = fbm(gv);\n    q.y = fbm( gv + vec2(1.));\n \n    vec2 r = vec2(0.);\n    r.x = fbm( gv + q + vec2(1.7,9.2)+ 0.15*m_dist );\n    r.y = fbm( gv + q + vec2(8.3,2.8)+ 0.15*m_dist);\n \n    float f = fbm(gv+r);\n \n    color += mix(vec3(.8,.9,.5),\n                vec3(.6,0.7,.5),\n                clamp((f*f)*4.,.0,1.));\n \n    color = mix(color,\n                vec3(.9,.3,0.3),\n                clamp(length(q),0.,1.));\n \n    color = mix(color,\n                vec3(0.8,1.0,.5),\n                clamp(length(r.x),0.0,1.0));\n \n    fragColor = vec4((f*f*f+1.2*f*f+.6*f)*color,1.);\n}\n ","name":"Image","description":"","type":"image"}]}