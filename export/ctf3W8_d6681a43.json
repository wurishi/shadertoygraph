{"ver":"0.1","info":{"id":"ctf3W8","date":"1671888938","viewed":82,"name":"Pokébola e Ditto (CG 2022.2)","username":"GabrielRaposo","description":"Feito Gabriel Raposo para aula de Computação Gráfica (Paulo Roma).\nPokebola e o pokémon Ditto","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["schoolwork"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Martijn Steinrucken\n//\n// https://twitter.com/the_artofcode?lang=en\n// https://www.youtube.com/TheArtOfCodeIsCool \n//\n// https://www.youtube.com/watch?v=PGtv-dBi2wE\n// https://www.youtube.com/watch?v=Ff0jJyyiVyw\n// https://www.youtube.com/watch?v=AfKGMUDWfuE\n// https://www.youtube.com/watch?v=Vmb7VGBVZJA\n//\n// https://michaelwalczyk.com/blog-ray-marching.html\n// https://www.lcg.ufrj.br/cwdc/13-webgl/shaderToy.mp4\n//\n// A very simple ray marching implementation,\n// with a few SDF functions: sphere, torus, box, cylinder.\n// Boolean operations are also available: \n// union, intersection, difference and blend.\n// \n// The beauty of the method is that there are no more polygons or vertices, \n// but objects are just scalar fields, given by Signed Distance Functions (SDFs).\n//\n// Gabriel Raposo\n// 24/12/2022\n\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.01\n#define PI 3.1415925359\n\n// -- Rotation matrix.\nmat2 Rot (float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// SDF of a torus at the origin given its two radius.\nfloat dTorus(vec3 p, vec2 r) {\n    float x = length(p.xz) - r.x;\n    \n    return length(vec2(x, p.y)) - r.y;\n}\n\n// SDF of a torus at the origin given its two radius.\nfloat dTorus2(vec3 p, vec2 r) {\n    float x = length(p.xz) - r.x;\n    \n    return length(vec2(x, p.y)) - r.y;\n}\n\n// SDF of a box at the origin given its size (width, height and depth).\nfloat dBox(vec3 p, vec3 s) {\n    return length(max(abs(p) - s, 0.0));\n}\n\n// SDF of a sphere, given its center and radius.\nfloat dSphere(vec3 p, vec4 s) {\n    return length(p - s.xyz) - s.w;\n}\n\n// SDF of a cylinder given a segment and a radius.\nfloat dCylinder(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 ab = b - a;\n    vec3 ap = p - a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    \n    vec3 c = a + t * ab;\n    \n    float x = length(p - c) - r;\n    float y = (abs(t - 0.5) - 0.5) * length(ab);\n    float e = length(max(vec2(x, y), 0.0));\n    float i = min(max(x, y), 0.0);\n    \n    return e + i;\n}\n\n// B + A\nfloat unionSDF (float sda, float sdb) {\n    return min(sda, sdb);\n}\n\n// B * A\nfloat intersectionSDF (float sda, float sdb) {\n    return max(sda, sdb);\n}\n\n// B - A\nfloat differenceSDF (float sda, float sdb) {\n    return max(-sda, sdb);\n}\n\n// Blend A and B\nfloat blendSDF(float sda, float sdb, float k) {\n    float h = clamp(0.5 + 0.5 * (sdb - sda) / k, 0.0, 1.0);\n    return mix(sdb, sda, h) - k * h * (1.0 - h);\n}\n\n// Scene SDF: signed distance function.\nfloat getDist(vec3 p) {\n    float planeDist = p.y;\n    \n    float s = sin(iTime);\n    \n    //vec3 bp = p - vec3(3, 0.75, 7);\n    //bp.xz *= Rot(iTime);\n    \n    vec3 toruspos = p - vec3(0, 1.0, 6);\n    //tp.y -= (s);\n    \n    float cx = -3.0;\n    cx -= s;\n    \n    // -- Pokebola\n    vec3 cyl_a = vec3(0, 1, 7);\n    vec3 cyl_b = vec3(0, 1, 5);\n    vec3 cyl_b2 = vec3(0, 1, 4.95);\n    \n    float sd  = dSphere(p, vec4(0, 1, 6 , 1));\n    float sd_inner = dSphere(p, vec4(0, 1, 6.05, 1));\n    //sd -= dTorus (toruspos, vec2(1, 0.1));\n    float neg_td  = dTorus (toruspos, vec2(1, 0.05));\n    float neg_sd = dSphere(p, vec4(0, 1, 5, .3));\n    float cd   = dCylinder(p, cyl_a, cyl_b, 0.21);\n    float cd2  = dCylinder(p, cyl_a, cyl_b2, 0.13);\n    //float bd  = dBox(bp, vec3(0.75));\n    //float cd  = dCylinder(p, a, b, 0.3);\n    \n    // -- Ditto\n    vec3 p2 = p - vec3(4, 0.4, 6);\n    float dt_base = dTorus2 (p2, vec2(.85+(sin(iTime)*.1), 0.4));\n    float dt_mid  = dTorus (p2 - vec3(0., .9, 0.), vec2(.3, 0.4));\n    float dt_arm1 = dSphere(p2, vec4(-1.2-(sin(iTime)*.1), 1.1, 0, .15));\n    float dt_arm2 = dSphere(p2, vec4( 1.2+(sin(iTime)*.1), 1.1, 0, .15));\n    float dt_horn1 = dSphere(p2, vec4(-.35, 1.4-(sin(iTime)*.1), 0, .15));\n    float dt_horn2 = dSphere(p2, vec4( .35, 1.4-(sin(iTime)*.1), 0, .15));\n    float dt_mix  = blendSDF (dt_base, dt_mid, .95);\n    dt_mix = blendSDF (dt_mix, dt_arm1, .95);\n    dt_mix = blendSDF (dt_mix, dt_arm2, .95);\n    dt_mix = blendSDF (dt_mix, dt_horn1, .5);\n    dt_mix = blendSDF (dt_mix, dt_horn2, .5);\n    \n    \n    float d = min(sd, planeDist);\n    d = differenceSDF(neg_td, d);\n    d = differenceSDF(neg_sd, d);\n    d = min(d, cd);\n    d = min(d, cd2);\n    d = min(d, sd_inner);\n    //d = min(d, bd);\n    //d = min(differenceSDF(sd2, bd2), d);\n    //d = min(blendSDF(sd3, sd4, 0.2), d);\n    \n    d = min(d, dt_mix);\n    \n    return d;\n}\n\n// Walk through empty spheres until the ray hits an object\n// or is beyond MAX_DIST, meaning no hit. \nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if (dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    return dO;\n}\n\n// The normal is the gradient of the SDF scalar field at point p.\n// By using finite difference: \n// https://en.wikipedia.org/wiki/Finite_difference#Relation_with_derivatives \nvec3 getNormal(vec3 p) {\n    // arbitrary — should be smaller than any surface detail in your distance function, \n    // but not so small as to get lost in float precision\n    vec2 e = vec2(0.001, 0);\n    \n    vec3 n = \n        vec3(\n        getDist(p + e.xyy),\n        getDist(p + e.yxy),\n        getDist(p + e.yyx)) - \n        vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));\n        \n    return normalize(n);\n}\n\n// Phong illumination model, given a point and camera position.\nfloat getLight(vec3 p, vec3 ro) {\n    vec3 lightPos = vec3(0, 8, -2);\n    \n    //lightPos.xz += vec2(sin(iTime), cos(iTime)) * 20.0; // -- Rotaciona a luz\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    vec3 r = reflect(-l,n);\n    \n    // ambient component\n    float amb = 0.1;\n    // ambient reflection coefficient\n    float ka = 1.0;\n    \n    // diffuse component - apply Lambert's cosine law\n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    // diffuse reflection coefficient\n    float kd = 0.8;\n    \n    // specular component\n    float shininess = 100.;\n    vec3 v = normalize(ro-p);\n    float spec = clamp(dot(r, v), 0.0, 1.0);\n    spec = pow(spec,shininess);\n    // specular reflection coefficient\n    float ks = 1.0;\n    \n    // slightly move point p in the direction of the normal,\n    // so the distance is not zero. Otherwise, the first hit \n    // will be at the plane.\n    float d = rayMarch(p + 2. * n * SURF_DIST , l);\n    \n    // cast a ray to the light\n    if (d < length(lightPos - p)) {\n        // point in the shadow\n        dif *= 0.1;\n        spec *= 0.5;\n    }\n    \n    // ambient + diffuse + specular components\n    return ka * amb + kd * dif + ks * spec;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat GetDist(vec3 p) {\n    float d = sdBox(p, vec3(1));\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\n// Fragment shader.\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    // camera position\n    vec3 ro = vec3(0, 3, 0);\n    //ro.x = sin(iTime) *.2;\n    \n    // projection plane z = 1\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    // Rotate camera down about the x-axis\n    rd.yz *= Rot(PI * 15. / 180.);\n    rd.xz *= Rot(-.3);\n    //rd.xz *= Rot(sin(iTime) * .1);\n    \n    float d = rayMarch(ro, rd);\n    \n    // point hit by the ray\n    vec3 p = ro + rd * d;\n    \n    // illumination at point p\n    float light_intensity = getLight(p, ro);\n    \n    // dark grey\n    // vec3 background_color = vec3(.2, .2, .2);\n    \n    vec3 surface_color = vec3(1.);\n    \n    if (d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 norm = GetNormal(p);\n        \n        float dist = distance(vec3(0., 1., 6.), p);\n        \n        if (dist < 1.06 && p.y > .01) // dentro do espaço da pokebola\n        { \n            if (dist < 0.995)\n                surface_color = vec3(60, 60, 60) / 255.;        \n            else if (p.y > 1.04) \n                //surface_color = vec3(250, 0, 0) / 255.;\n                surface_color = texture(iChannel2, p.xy - (vec2(iTime*.2,.0)) ).rgb;\n            dist = distance(vec3(0., 1., 5), p);\n            if (dist < .225) surface_color = vec3(1.0);\n\n\n        }\n        else if (p.y < .1) { // chão\n            uv = p.xz * 1.;\n            surface_color = texture(iChannel1, uv).rgb;\n        }\n        else { // Rosa do Ditto\n            surface_color = vec3(255, 150, 150) / 255.;\n        }\n    }\n    \n    // pixel color\n    vec3 color;\n    \n    if (d < MAX_DIST) \n        // modulate surface color by the light intensity\n        color = surface_color * vec3(light_intensity);\n    else // shader de fundo \n    {\n        vec2 col = vec2(uv.x*15.0, uv.y*30.0);\n        for(float i = 1.0; i < 4.0; i++)\n        {\n            uv += col;\n            col = sin(uv.yx*i*i+iTime) * cos(uv.yy+iTime);\n        }\n        color = vec3(.3*sin(iTime),col);\n    }\n\n    // output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}