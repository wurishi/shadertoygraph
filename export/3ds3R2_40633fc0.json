{"ver":"0.1","info":{"id":"3ds3R2","date":"1546898841","viewed":487,"name":"semi realistic point reflection","username":"public_int_i","description":"semi realistic point light reflection, click to compare realistic(left) to phong(right)","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["reflection","phong","light","point","realistic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2019\n\n#define point vec3(sin(iTime*.6)*3.,cos(iTime*.7)*2.+2.,0.)\n\nvoid mainImage(out vec4 o, in vec2 u)\n{\n    //ray position & direction\n    vec3 rp = vec3(0.,0.,-10.),\n        rd = normalize(vec3((u*2.-iResolution.xy)/iResolution.x,1.)),\n        l = vec3(0.);\n    \n    //planar reflections on x and y plane\n    vec3 reflPos, nrm;\n    float reflDst = (rp.y-.5)/rd.y,\n        reflDst2 = (rp.x+3.*sign(rd.x))/rd.x;\n    if (reflDst < 0.) reflDst = 1e8;\n    if (reflDst2 < 0.) reflDst2 = 1e8;\n    \n    if (reflDst < reflDst2) {\n        nrm = vec3(0,-1,0);\n    }\n    if (reflDst2 < reflDst) {\n     \treflDst = reflDst2;\n        nrm = vec3(sign(-rd.x),0.,0.);\n    }\n    reflPos = rp+rd*reflDst;\n  \n    if (reflDst < 1e8) {\n        //realistic reflection vs phong\n        vec3 reflDir = reflect(rd,nrm),\n                lightDiff = point-reflPos,\n                lightDir = normalize(lightDiff);\n        if (iMouse.w > 0. && iMouse.x < u.x) {\n            l += pow(max(0.,dot(lightDir,reflDir)),16.);//phong\n        } else {\n\t\t\t//goal is cheap realistic reflection that properly handles roughness and scattering, this is just a test\n            l += pow(max(0.,1.-length(lightDir-reflDir*(1.-abs(nrm)))),4.);\n        }\n    }\n    \n    l += max(0.,dot(normalize(point-rp),rd)-.999)*3e3;//point light\n    o = vec4(l,1.);\n}","name":"Image","description":"","type":"image"}]}