{"ver":"0.1","info":{"id":"fdlGWB","date":"1616475620","viewed":113,"name":"MandelViz","username":"webbgamers","description":"renders mandelbrot fractal at various iterations in greyscale or color using iterations or distance to shade","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITER  200\n\n// Window bounds\n#define LEFT     -2.0\n#define RIGHT     1.0\n#define BOTTOM   -1.0\n#define TOP       1.0\n\n// Uncomment to use greyscale colors\n//#define GRAYSCALE\n\n// Uncomment to use distance coloring\n//#define DISTANCE\n\n// Uncomment to use a hybrid distance and iteration coloring (must also have DISTANCE enabled, does nothing on GREYSCALE))\n//#define HYBRID\n\n// Uncomment to remove iteration bouncing\n//#define NOBOUNCE\n\n// Convert HSV to RGB\nvec3 hsv2rgb( in vec3 c )\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Complex number square\nvec2 csquare( in vec2 c )\n{\n    return vec2(c.x*c.x + -1.0*c.y*c.y, 2.0*c.x*c.y);\n}\n\n// Mandelbrot iteration\nint mandelbrot( in vec2 c, in int maxIter, out float d )\n{\n    vec2 z;\n    int n;\n    for (int i = 0; i <= MAX_ITER; i++)\n    {\n        // Break if out of bounds\n        if (z.x*z.x + z.y*z.y >= 4.0) {break;}\n        \n        // Calculate z*z + c but complex numbers\n        z = csquare(z);\n        z = vec2(z.x + c.x, z.y + c.y);\n        n++;\n    }\n    \n    // Calculate distance for distance coloring\n    #ifdef DISTANCE\n    vec2 o = vec2(-3.0, 0.0);\n    float xd = o.x - z.x;\n    float yd = o.y - z.y;\n    d = sqrt(xd*xd + yd*yd);\n    #endif\n    \n    return n;\n}\n\n// Generate image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // Convert pixel coordinates into complex number\n    float x = LEFT + (fragCoord.x / iResolution.x) * (RIGHT - LEFT);\n    float y = BOTTOM + (fragCoord.y / iResolution.y) * (TOP - BOTTOM);\n    vec2 c = vec2(x, y);\n    \n    // Change max iterations for pulsing effect\n    #ifdef NOBOUNCE\n    int maxIter = MAX_ITER;\n    #else\n    int maxIter = int(float(MAX_ITER)*(sin(iTime)+1.0)/2.0)+1;\n    #endif\n\n    // Calculate mandelbrot\n    float d;\n    int m = mandelbrot(c, maxIter, d);\n    \n    // Calculate color based on mandelbrot value and chosen settings\n    #ifdef GRAYSCALE\n    #ifdef DISTANCE\n    vec3 col = m < maxIter ? vec3(d - floor(d)) : vec3(0.0);\n    #else\n    float v = float(m) / float(maxIter);\n    vec3 col = vec3(v);\n    #endif\n    #else\n    #ifdef DISTANCE\n    #ifdef HYBRID\n    float h = m < maxIter ? (float(m)/float(maxIter)) : d*5.0;\n    float v = m < maxIter ? d - floor(d) : 1.0;\n    #else\n    float h = d;\n    float v = m < maxIter ? 1.0 : 0.0;\n    #endif\n    #else\n    float h = float(m) / float(maxIter);\n    float v = m < maxIter ? 1.0 : 0.0;\n    #endif\n    float s = 1.0;\n    vec3 col = hsv2rgb(vec3(h, s, v));\n    #endif\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}