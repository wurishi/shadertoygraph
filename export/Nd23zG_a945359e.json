{"ver":"0.1","info":{"id":"Nd23zG","date":"1617574813","viewed":130,"name":"Unit circle with different norms","username":"theott","description":"The unit circle is drawn under varying distance function. The p norm (https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm) is used with p smoothly varying in [0.1,2.1]. The scalar product is also varying between Euclidian and Lorenzian.   ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["norm","conics","cirlce","lorenzian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float len(vec2 v, float p, float l){\n    return pow(abs(pow(abs(v.x),p) + l * pow(abs(v.y),p)) ,1./p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / iResolution.y;\n\n    // Background\n    vec3 col = vec3(0);\n\n    // Circle\n    // alliased line:\n    //col += step(abs(len(uv, sin(iTime)+1.1, cos(iTime / 2.)) - .1), .01);\n    // smooth line\n    //col += smoothstep(3./iResolution.y, 0., abs(len(uv, sin(iTime)+1.1, cos(iTime / 2.)) - .1));\n    // adaptive smooth line\n    float v = len(uv, sin(iTime)+1.1, cos(iTime / 2.)) - .1;\n    col +=  smoothstep(1.3, 0., abs(v)/fwidth(v) );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}