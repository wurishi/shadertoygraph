{"ver":"0.1","info":{"id":"Xlyczh","date":"1535233916","viewed":859,"name":"Time warp portal","username":"elChris","description":"Inspired from Chrono Trigger's gate warp sequence","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["warpfullscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat angle(vec2 v){\n    return atan(float(v.y)/float(v.x));\n}\n\n//Generates value based on normalized coordinates\nfloat sineShape(vec2 uv){\n    vec2 sp = vec2(3.5, 5.0); //sine parameters, control period lenght and amplitude\n    float width = 6.0; //width space for a single sine curve. Min value = 2.0\n    \n    float sinValue = sin(uv.y * pow(2.0,sp.y) + (iTime * 10.0)) + 2.0;\n    float cosValue = mod(uv.x * pow(2.0,sp.x), 2.0 * width);\n    float value = 1.0 - max(cosValue - sinValue, sinValue - cosValue);\n    \n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0,2,4));\n    \n    // Vector from fragment to screen center\n    vec2 v2c = fragCoord.xy - (iResolution.xy / 2.0);\n    \n    // Lenght of the fragment direction from center, multiplied by a distortion based on the angle\n    float d2c = length(v2c * vec2(cos(angle(v2c) * 16.0), sin(angle(v2c) * 16.0)));\n    \n    float r = sin(d2c / 32.0 - (iTime * 10.0));\n    \n    float value = abs(r) * 0.3\n                   + clamp(sineShape(uv + vec2((uv.x - 0.5) / (uv.y - 0.5) + iTime * 2.0, 0.0)), 0.0, 1.0);\n    \n    // Output to screen             \n    fragColor = value * (vec4(col,1.0));\n} ","name":"Image","description":"","type":"image"}]}