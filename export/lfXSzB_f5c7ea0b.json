{"ver":"0.1","info":{"id":"lfXSzB","date":"1705394688","viewed":114,"name":"Integer TV Static","username":"psyrg","description":"Integer static per pixel noise, like an old TV would make.\nThe noise is deterministic, but looks noisy enough!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","tv","static"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Define globals\nconst uint mult = 0x25847F2Du; // Random number bigger than 2^16 \nuint hash = 0u;\n\nvoid stepHash(uint i)\n{\n    // Really basic hash step\n    hash ^= i*mult;\n    hash ^= hash*mult;\n}\n\nuint noise(uint t, uint x, uint y)\n{\n    // Step the hash by the known inputs\n    stepHash(t);\n    stepHash(x);\n    stepHash(y);\n    \n    // Combine 16 bits into 8, and return\n    return (hash^(hash>>8))&0xFFu;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get frame and pixel data\n    uint t = uint(iFrame);\n    uint x = uint(fragCoord.x);\n    uint y = uint(fragCoord.y);\n    \n    // Use the noise function for t,x,y\n    uint p = noise(t,x,y);\n\n    // Set output\n    fragColor = vec4(vec3(float(p)/256.0),1.0);\n}","name":"Image","description":"","type":"image"}]}