{"ver":"0.1","info":{"id":"MftXRl","date":"1714331288","viewed":76,"name":"Sphere parameterization","username":"nhuck","description":"Displays colors from the canonical map [0,1]x[0,1] -> R^3 for a sphere.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Convert uv to spherical coordinates\n    float theta = 2.0 * 3.14159265359 * uv.x;\n    float phi = acos(1.0 - 2.0 * uv.y) + iTime;\n\n    // Sphere radius and center coordinates\n    float radius = 0.5;\n    vec3 center = vec3(0.5, 0.5, 0.5);\n\n    // Cartesian coordinates from spherical coordinates\n    vec3 spherePos;\n    spherePos.x = radius * sin(phi) * cos(theta) + center.x;\n    spherePos.y = radius * sin(phi) * sin(theta) + center.y;\n    spherePos.z = radius * cos(phi) + center.z;\n\n    // Use sphere position as color output, clamped to [0,1] range\n    vec3 col = spherePos;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}