{"ver":"0.1","info":{"id":"cdcXzf","date":"1680243196","viewed":176,"name":"Trippy mandelbrot thing","username":"Mik0","description":"I tried a different way of coloring the mandelbrot set. Worked okay. It doesn't look any different than regular coloring.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Iters 250\n#define Power 2.0\n\nfloat mandelbrot(vec2 p)\n{\n    vec2 z = p;\n    float o;\n    float iter;\n    for(int i = 0; i<Iters; i++)\n    {\n        z = vec2(atan(z.x, z.y)*Power, pow(length(z), Power));\n        z = vec2(sin(z.x)*z.y, cos(z.x)*z.y)+p;\n        o = length(z-p);\n        iter = float(i);\n        if(o>4.0f){break; }\n        \n    }\n    if(iter+1.0f==float(Iters)){iter=0.0f;}\n    return iter;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5f;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=4.0f;\n    uv/=pow(2.0f, iTime);\n    uv-=(vec2(sin(iTime), cos(iTime))/pow(2.0f, iTime))/2.0f;\n    uv.x-=0.745f;\n\n    // Time varying pixel color\n    float col = mandelbrot(uv);\n\n    // Output to screen\n    fragColor = vec4(sin(col/10.0f), sin(col/8.0f), sin(col/6.0f),1.0);\n}","name":"Image","description":"","type":"image"}]}