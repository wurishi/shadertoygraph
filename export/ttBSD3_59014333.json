{"ver":"0.1","info":{"id":"ttBSD3","date":"1567265413","viewed":180,"name":"Matrix World","username":"96logda","description":"This world is created by using Menger Sponge fractal algoritm.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","menger","sponge","matrix","mengersponge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-08-25 - 2019-09-01 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\n#define PI\t\t\t\t\t3.14\n\n#define saturate(x) \t\tclamp(x, 0.0, 1.0)\n#define dot2(x) \t\t\tdot(x, x)\n\n#define MENGER_ITERATIONS\t2\n#define SOFT_SHADOW_STEPS \t16\n\n#define INTERSECT_STEPS\t\t500\n#define INTERSECT_MIN_DIST\t0.0001\n#define INTERSECT_MAX_DIST\t100.0\n\n\nvec2 rotate2D(vec2 p, float angle)\n{\n    float sRot = sin(angle);\n    float cRot = cos(angle);\n    return p * cRot + p.yx * sRot * vec2(-1.0, 1.0);\n}\n\nfloat sdPlane(vec3 p, float height)\n{\n   \treturn p.y - height;\n}\n\nfloat pyramidPrism(vec3 p, float radius, float height, vec2 xyShapeMul)\n{\n     vec3 q = abs(p);\n     return max(q.z - height, max(q.x * xyShapeMul.x + p.y * xyShapeMul.y, p.y) - radius);\n}\n\nvec4 opU(vec4 d1, vec4 d2)\n{\n     return (d1.x < d2.x) ? d1 : d2;\n}\n\nvec4 map(in vec3 p)\n{\t\n    float ground = sdPlane(p, 1.8);\n    \n    p.xz = mod(p.xz + 1.0, 2.0) -1.0;\n    p.y  = mod(p.y + 1.0, 2.0) - 1.0;\n\n    p = -abs(p);\n\t\n    float d = pyramidPrism(p, 0.5, 0.5, vec2(0.5));\n    vec4 res = vec4(d, 1.0, 0.0, 2.0);\n\t\n    //......................................................................\n    //  Based on https://iquilezles.org/articles/menger\n    //......................................................................\n    float s = 3.0;\n    for(int i = 0; i < MENGER_ITERATIONS; ++i)\n    { \n        vec3 a = mod(p * s, 2.0) - 1.0;\n        s *= 5.0;\n        \n        vec3 r = abs(1.0 - 5.0 * abs(a));\n        float da = max(r.x, r.y);\n        float db = max(r.y, r.z);\n        float dc = max(r.z, r.x);\n        \n        float c = (min(da, min(db, dc)) - 1.0) / s;\n        if(c > d)\n        {\n            d = c;\n            res = vec4(d, min(res.y, 0.2 * da * db * dc), 0.0, 1.0);\n        }\n    }\n    //......................................................................\n    \n    return opU(res, vec4(ground, 1.0, 0.0, 1.0));\n}\n\nvec4 intersect(in vec3 ro, in vec3 rd)\n{\n    float t = 0.0;\n    vec4 res = vec4(-1.0);\n    vec4 h = vec4(1.0);\n    for (int i = 0; i < INTERSECT_STEPS; i++ )\n    {\n\t\tif(h.x < INTERSECT_MIN_DIST || t > INTERSECT_MAX_DIST) \n\t\t{\n\t    \tbreak;\n\t\t}\n\t\n        h = map(ro + rd * t);\n        res = vec4(t, h.yzw);\n        t += h.x;\n    }\n\n    if (t > INTERSECT_MAX_DIST) \n    {\n\t\tres = vec4(-1.0);\n    }\n    \n    return res;\n}\n\nfloat softshadow(in vec3 ro, in vec3 rd)\n{\n    float res = 1.0;\n    float t = 0.0;\n    for (int i = 0; i < SOFT_SHADOW_STEPS; ++i)\n    {\n\t\tvec3 pos = ro + rd * t;\n        float h = map(pos).x;\n        res = min(res, float(SOFT_SHADOW_STEPS) * h / t);\n        if(res < 0.0001)\n\t\t{\n\t    \tbreak;\n\t\t}\n        t += clamp(h, 0.01, 0.2);\n    }\n    return saturate(res);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3 eps = vec3(0.0001, 0.0, 0.0);\n    vec3 n;\n    n.x = map(pos + eps.xyy).x - map(pos - eps.xyy).x;\n    n.y = map(pos + eps.yxy).x - map(pos - eps.yxy).x;\n    n.z = map(pos + eps.yyx).x - map(pos - eps.yyx).x;\n    return normalize(n);\n}\n\nfloat softshadow(in vec3 ro, in vec3 rd, in float k)\n{\n    float res = 1.0;\n    float t = 0.0;\n    for (int i = 0; i < SOFT_SHADOW_STEPS; ++i)\n    {\n\t\tvec3 pos = ro + rd * t;\n        float h = map(pos).y;\n        res = min(res, k * h / t);\n        if(res < 0.0001)\n\t\t{\n\t    \tbreak;\n    \t}\n        t += clamp(h, 0.01, 0.2);\n    }\n    return saturate(res);\n}\n\nvec3 texture3D(sampler2D texChannel, in vec3 p, in vec3 normal)\n{\n    normal = max(abs(normal), 0.001);\n    normal /= (normal.x + normal.y + normal.z);  \n    return (texture(texChannel, p.yz) * normal.x + \n            texture(texChannel, p.zx) * normal.y +\n            texture(texChannel, p.xy) * normal.z).rgb;\n}\n\nvec3 GetMaterialColor(in vec3 p, in vec3 normal, float materialID)\n{\n    if (materialID < 1.5)\n    {\n         vec2 uv = p.xz;\n         vec3 texRGB = texture3D(iChannel0, p * 8.0 + vec3(0.0, sin(iTime * 0.3), 0.0), normal).rgb;\n         return texRGB * 0.35 * vec3(1.0, 0.35, 1.0);\n    }\n    return vec3(1.0);\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n    vec3 color = vec3(0.0);\n    vec4 res = intersect(ro,rd);\n    if(res.x > 0.0)\n    {\n        const vec3 light = vec3(0.0, 0.0, -0.2);\n        \n        vec3 pos = ro + res.x * rd;  \n        vec3 normal = calcNormal(pos);\n        \n        float occ = res.y;\n        float shadow = softshadow(pos + 0.01 * normal, light);\n        \n        vec3 baseColor = GetMaterialColor(pos, normal, res.w);\n        vec3 ambient = vec3(0.2) * baseColor;      \n\n        vec3 diffuse = baseColor * shadow * occ;\n        color = diffuse + (ambient * occ);\n    }\n\n    return pow(color, vec3(0.4545));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    vec2 p = 2.0 * (fragCoord.xy / iResolution.xy) - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n\t \n    vec2 mouseXY = iMouse.xy / iResolution.xy;\n    \n    // camera\n    vec3 ro = vec3(15.0, 2.9, -2.0);\n    vec3 ww = normalize(vec3(0.0, mouseXY.y * 5.0 * PI, 0.0) - ro); \n    ww.xz = rotate2D(ww.xz, iMouse.x * 2.0 * PI);\n    vec3 uu = normalize(cross(vec3(0.0, 1.0, 0.0), ww));\n    vec3 vv = normalize(cross(ww, uu));\n    vec3 rd = normalize(p.x * uu + p.y * vv + 2.0 * ww);\n    rd.xz = rotate2D(rd.xz, PI * 2.05);\n\n    ro.x -= iTime * 0.1; //Camera movement\n    \n    vec3 color = vec3(0.2);\n    color -= vec3(0.3, 0.3, 0.9);\n    color += render(ro + vec3(0.0, -1.0, 0.0), rd);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}