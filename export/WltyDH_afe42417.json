{"ver":"0.1","info":{"id":"WltyDH","date":"1608986137","viewed":264,"name":"Infinite Switching Space","username":"Kamoshika","description":"I used 3D noise to draw the objects.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I made this while streaming.\n// Watch YouTube video!!\n// https://www.youtube.com/watch?v=A4SDIgenwHo\n\nconst float pi2 = acos(-1.)*2.;\n\nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat smoothFloor(float x, float s) {\n\treturn floor(x-.5)+smoothstep(.5-s, .5+s, fract(x-.5));\n}\n\nfloat rand(float x) {\n\tfloat r = fract(sin(x)*43758.5453);\n\tfloat t = smoothFloor(iTime, .2);\n\tr = sin(r*pi2 + t)*.5+.5;\n\treturn r;\n}\n\nfloat noise(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\tf = f*f*(3.-2.*f);\n\tvec3 b = vec3(173, 61, 3);\n\tfloat n = dot(p, b);\n\treturn mix(    mix(\t   mix(rand(n), rand(n+b.x), f.x),\n                           mix(rand(n+b.y), rand(n+b.x+b.y), f.x),\n                           f.y),\n                   mix(    mix(rand(n+b.z), rand(n+b.x+b.z), f.x),\n                           mix(rand(n+b.y+b.z), rand(n+b.x+b.y+b.z), f.x),\n                           f.y),\n                   f.z);\n}\n\nfloat dist(vec3 p) {\n\tfloat d = length(p.xy)-1.;\n\treturn max(noise(p)-.2, -d);\n}\n\nvec3 hsv2rgb(float h, float s, float v) {\n\tvec3 res = fract(h+vec3(0,2,1)/3.);\n\tres = abs(res*6.-3.)-1.;\n\tres = clamp(res, 0., 1.);\n\tres = (res-1.)*s+1.;\n\tres *= v;\n\treturn res;\n}\n\nfloat exp2Fog(float d, float density) {\n\tfloat s = d*density;\n\treturn exp(-s*s);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = (fragCoord*2.-iResolution.xy) / min(iResolution.x, iResolution.y);\n\tvec3 col = vec3(0);\n\t\n\tvec3 cPos = vec3(0, 0, -iTime*3.);\n\tvec3 cDir = normalize(vec3(0.2, 0, -1));\n\tcDir.xy *= rotate(iTime*.1);\n\t\n\tvec3 cUp = vec3(0, 1, 0);\n\tcUp.xy *= rotate(iTime*-.1);\n\t\n\tvec3 cSide = cross(cDir, cUp);\n\tvec3 ray = normalize(p.x*cSide + p.y*cUp + cDir*2.5);\n\t\n\tfloat d = 0., c = 0.;\n\tvec3 rPos = cPos;\n\tfor(int i=0; i<150; i++) {\n\t\td = dist(rPos);\n\t\tif(d < 0.01) {\n\t\t\tbreak;\n\t\t}\n\t\trPos += ray*d;\n        c++;\n\t}\n    \n    if(d < 0.01) {\n        float r = noise(rPos+vec3(10));\n        vec3 base = hsv2rgb(r*.3+floor(iTime)*pi2, .5, 1.);\n        col = base/c*20.;\n    }\n    \n\tfloat fog = exp2Fog(length(rPos-cPos), 0.03);\n\tcol = mix(vec3(1), col, fog);\n\t\n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}