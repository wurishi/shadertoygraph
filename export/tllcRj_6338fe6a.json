{"ver":"0.1","info":{"id":"tllcRj","date":"1592523009","viewed":331,"name":"RayMarching Sphere w/ fbm","username":"wnu","description":"raymarching a sphere, but continue until you reach a certain value of fractional brownian motion. Drilling into the Sphere","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nfloat random3 (in vec3 _st) {\n    return fract(sin(dot(_st,\n                         vec3(12.9898,78.233,123.24647)))*\n      43758.5453123);\n}\n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nfloat noise3 (in vec3 _st) {\n    vec3 i = floor(_st);\n    vec3 fr = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random3(i);\n    float b = random3(i + vec3(1.0, 0.0, 0.0));\n    float c = random3(i + vec3(0.0, 1.0, 0.0));\n    float d = random3(i + vec3(1.0, 1.0, 0.0));\n    \n    float e = random3(i + vec3(0.0, 0.0, 1.0));\n    float f = random3(i + vec3(1.0, 0.0, 1.0));\n    float g = random3(i + vec3(0.0, 1.0, 1.0));\n    float h = random3(i + vec3(1.0, 1.0, 1.0));\n\n    vec3 u = fr * fr * (3.0 - 2.0 * fr);\n    \n    float bf = mix(a,b,u.x);\n    float bb = mix(c,d,u.x);\n    \n    float bot = mix(bf,bb,u.y);\n    \n    float tf = mix(e,f,u.x);\n    float tb = mix(g,h,u.x);\n    \n    float top = mix(tf,tb,u.y); \n\n    return mix(bot,top,u.z);\n}\n\n#define NUM_OCTAVES 2\n\nfloat fbm3 ( in vec3 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec3 shift = vec3(100.0);\n    float offset = 0.;\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        //v += a * sin((_st.y + _st.x+ _st.y)*10.)*1.5;\n        offset += a*2.5;\n        v += a * noise3(_st)*2.5;\n        _st = _st * 2. + shift;\n        a *= 0.5;\n    }\n    return v/offset;\n}\n\nfloat fbmN(vec3 _st, int n){\n\tfloat v = 0.;\n    for (int i = 0;i<4;i++){\n        if(i>=n) break;\n        v= fbm3(_st + v*4.);\n    }\n    \n    return v;\n}\n\nfloat map(vec3 pos){\n return length(pos) - 0.25;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat4 rot = rotationMatrix(vec3(1.,1.,1.),-iTime/2.);\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 pos = (rot*vec4(vec3(0.0,0.0,1.0),1.)).xyz;\n    \n    vec3 pd = (rot*vec4(normalize(vec3(uv,-1.5)),1.)).xyz;\n    \n    vec3 col = vec3(0.0);\n    float t = 0.0;\n    float l = 0.;\n    float fbm =0.;\n    for(int i = 0; i<255; i++){\n    \tvec3 p = pos + t*pd;       \n        l = map(p);\n        float fbmTest = fbmN(p*10.,1);\n        //float fbmTest = noise3(p*10.);\n        //float fbmTest = random3(p*10.);\n            \n        if((l<0.0002)){\n            if(fbmTest >0.55){\n         \t\tbreak;\n            }else{\n             t+=0.002;   \n            }\n        }else{\n        t += l;\n        }\n        \n    }\n    \n    float plen = 0.;\n    \n    if (l< 0.0002){\n    vec3 p = pos + t*pd;    \n    fbm = fbmN(p*10.,1);\n    //fbm = noise3(p*10.);\n    //fbm = random3(p*10.);\n    plen = length(p)/0.25;\n    fbm *= fbm * (3.0 - 2.0 * fbm)*plen;\n    }\n    float inCircle = smoothstep(0.02,-0.,l);\n    col = hsl2rgb(vec3(fbm*0.05+0.5,0.7,plen))*inCircle;\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}