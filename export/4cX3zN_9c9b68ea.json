{"ver":"0.1","info":{"id":"4cX3zN","date":"1702800040","viewed":28,"name":"Contoso top secret shader","username":"Aycon","description":"Is a test my shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["light","norm","disp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define red vec4(1.,0.,0.,1.);\n#define green vec4(0.,1.,0.,1.);\n#define blue vec4(0.,0.,1.,1.);\n\nfloat getHeight(vec2 uv) {\n  return texture(iChannel0, uv).r;\n}\n\n// calculate bump map from height map\nvec4 extractBump(vec2 uv, vec2 resolution,  float scale) {\n  vec2 step = 1. / resolution;\n  float height = getHeight(uv);    \n  vec2 dxy = height - vec2(\n      getHeight(uv + vec2(step.x, 0.)), \n      getHeight(uv + vec2(0., step.y))\n  );\n    \n  return vec4(normalize(vec3(dxy * scale / step, 1.)), height);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 scale = vec2(0.5);\n    \n    // screen UV\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 scaled_uv = uv / scale;\n    \n    // texture UV (scaled square)\n    vec2 uv0 = vec2(0.);\n    if (iResolution.x > iResolution.y){\n        uv0 = vec2(scaled_uv.x / iResolution.y * iResolution.x, scaled_uv.y);\n    } else {\n        uv0 = vec2(scaled_uv.x, scaled_uv.y / iResolution.x * iResolution.y);\n    }\n    \n    \n    vec4 in_hmap = vec4(texture(iChannel0, uv0).r);\n    \n    //vec4 env_map = vec4(texture(iChannel1, ));\n    vec4 in_norm = vec4(extractBump(uv0, iResolution.xy, .1).rgb * .5 + .5, 1.);\n    \n    if (uv.x < 0.5) {\n        fragColor = in_hmap;\n    } else {\n        fragColor = in_norm;\n    }\n    \n\tuv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec2 mo = iMouse.xy / iResolution.xy * 5.;\n    vec3 lso = vec3(mo.x, mo.y, -1);\n    \n    //vec3 ro = vec3(5.0 * sin(mo.x), 0.0, 5.0 * cos(mo.x));\n    vec3 ro = vec3(5.0, 0.0, 5.0);\n    \n    // vec3 rd = getCamera(normalize(ro)) * normalize(vec3(uv, -1.0));\n    env_col = texture(iChannel1, vec3(uv.x, -1., uv.y));\n    \n    \n    //fragColor = vec4(1., mo.x, mo.y, 0.);\n    \n    \n    //vec2 mo = iMouse.xy / iResolution.y * 5.0;\n    //vec3 ro = vec3(5.0 * sin(mo.x), 0.0, 5.0 * cos(mo.x));\n    //vec3 rd = getCamera(normalize(ro)) * normalize(vec3(uv, -1.0));\n    \n    //float t = trace(ro, rd);\n    //if(t != -1.0) {\n    //    vec3 p = ro + t * rd;\n    //\tvec3 n = getNormal(p);\n    //    vec3 l = reflect(rd, n);\n    //    fragColor = texture(iChannel1, l);\n    //} else {\n    //    fragColor = texture(iChannel1, rd);\n    //}\n}","name":"Image","description":"","type":"image"}]}