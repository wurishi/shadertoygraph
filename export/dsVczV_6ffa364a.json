{"ver":"0.1","info":{"id":"dsVczV","date":"1696374050","viewed":60,"name":"LightWavesN123","username":"naitry","description":"shows different colors of visible light with their wavelength affecting the actual visible wave\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to convert index to wavelength (lambda)\nfloat indexToWavelength(float index, float numberLines) \n{\n    return 700.0 - 350.0 * (index / numberLines);\n}\n\nvec3 backgroundColor = vec3(0.0, 0.0, 0.0);\nfloat globalWaveModifier = 1.0;\nfloat timeModifier = 0.5;  // Formerly TM\n\n// Function to get amplitude for a given frequency\nfloat getAmplitude(float frequency) \n{\n    return 0.0;\n    return texture(iChannel0, vec2(frequency / 512.0, 0)).x;\n}\n\n\nfloat getAverageWeight(float frequency) \n{\n    return (getAmplitude(frequency - 2.0) + getAmplitude(frequency - 1.0) + \n            getAmplitude(frequency + 2.0) + getAmplitude(frequency + 13.0) + \n            getAmplitude(frequency)) / 5.0;\n}\n\nvec3 offsetToColor(float offset)\n{\n    return vec3(0.5 - offset, 0.5 - abs(0.5 - (offset * 2.0)),offset * 2.0);\n}\n\nvec3 wavelengthToColor(float wavelength) \n{\n    vec3 color = vec3(0.0);\n    float gamma = 0.8;\n    float factor;\n    \n    //UV\n    if(wavelength >= 400.0 && wavelength < 410.0) \n    {\n        color.r = (410.0 - wavelength) / (420.0 - 400.0);\n        color.b = 1.0;\n        factor = 0.3 + 0.7*(wavelength - 400.0) / (410.0 - 400.0);\n    } \n    \n    //Blue\n    else if(wavelength >= 410.0 && wavelength < 475.0) \n    {\n        color.g = (wavelength - 410.0) / (475.0 - 410.0);\n        color.b = (475.0 - wavelength) / (475.0 - 410.0);\n        color.r = 0.0;\n        factor = 1.0;\n    } \n    \n    \n    //Green\n    else if(wavelength >= 475.0 && wavelength < 550.0) \n    {\n        color.g = (wavelength - 410.0) / (475.0 - 410.0);\n        color.b = (475.0 - wavelength) / (475.0 - 410.0);\n        color.r = 0.0;\n        factor = 1.0;\n    }\n    \n    //Yellow Orange\n    else if(wavelength >= 550.0 && wavelength < 640.0) \n    {\n        color.r = (wavelength - 400.0) / (640.0 - 475.0);\n        color.g = 1.0;\n        color.b = (640.0 - wavelength) / (640.0 - 475.0);\n        factor = 1.0;\n    } \n    \n    \n    //Orange Red\n    else if(wavelength >= 640.0 && wavelength < 700.0) \n    {\n        color.r = (700.0 - wavelength) / (700.0 - 640.0);\n        factor = 0.3 + 0.7*(700.0 - wavelength) / (700.0 - 640.0);\n    } \n    \n    //Edge of infrared\n    else if(wavelength >= 700.0 && wavelength <= 720.0) {\n        color.r = 0.0;\n        factor = 0.0;\n    } else {\n        factor = 0.0;\n    }\n    \n    float intensityMax = 1.0; // Scaled to [0, 1] rather than [0, 255]\n    color *= intensityMax * pow(factor, gamma);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scaleMultiplier = 0.2;\n    float verticalOffset = 0.5 / scaleMultiplier;\n    float numberLines = 10.0;\n    float propogationModifier = 1.0;\n    float amplitude = 0.2;\n    float horizontalScale = 50.0;\n    float lineBaseBrightness = 0.6;\n\n    vec3 backdrop;\n    //Normalize coord to screen size\n    vec2 normalizedCoord = fragCoord.xy / iResolution.xy;\n    //fit for proper positioning and scale\n    vec2 transformedCoord = (1.0/scaleMultiplier) * normalizedCoord - verticalOffset;\n\n    float lineIntensity;\n    float gradientWeight;\n    float tempSum;\n    float tempSumRed;\n    float tempSumGreen;\n    float tempSumBlue;\n\n    //init pixel to black\n    vec3 accumulatedColor = vec3(0.0);\n    \n    vec2 originalTransformedCoord = (1.0/scaleMultiplier) * normalizedCoord - verticalOffset;\n    \n    //iterate through each line\n    for(float i = 0.0; i < numberLines; i++) \n    {\n        transformedCoord = originalTransformedCoord;  // Reset the coordinate to avoid accumulation\n        \n        //wavelength of each line\n        float wavelength = indexToWavelength(i, numberLines);\n        //wavenumber of each line\n        float wavenumber = (2.0 * 3.14159) / wavelength;\n\n        \n        transformedCoord.y += amplitude * (i + 1.0) * sin((40000.0 / horizontalScale) * wavenumber * (transformedCoord.x - sin(iTime/5.0)) - iTime * propogationModifier);\n        \n        lineIntensity = lineBaseBrightness + pow(1.3 * abs(mod(normalizedCoord.x + i / 0.6 + iTime, 2.0) - 1.0), 2.0);\n        gradientWeight = abs(lineIntensity / (150.0 * transformedCoord.y));\n\n        tempSum = gradientWeight * (globalWaveModifier + sin(iTime * timeModifier));\n        tempSumRed = gradientWeight * (globalWaveModifier + sin(iTime * timeModifier * 1.10));\n        tempSumGreen = gradientWeight * (globalWaveModifier + sin(iTime * timeModifier * 1.20));\n        tempSumBlue = gradientWeight * (globalWaveModifier + sin(iTime * timeModifier * 1.50));\n        \n        tempSum = gradientWeight * (globalWaveModifier);\n        tempSumRed = gradientWeight * (globalWaveModifier);\n        tempSumGreen = gradientWeight * (globalWaveModifier);\n        tempSumBlue = gradientWeight * (globalWaveModifier);\n\n        vec3 lineColor = wavelengthToColor(wavelength);\n\n        accumulatedColor += lineColor * vec3(tempSumRed, tempSumGreen, tempSumBlue);\n\n        backdrop = mix(backgroundColor, backgroundColor, backgroundColor);\n    }\n\n    fragColor = vec4(accumulatedColor + backdrop, 0.5);\n}","name":"Image","description":"","type":"image"}]}