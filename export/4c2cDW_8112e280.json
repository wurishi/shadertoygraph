{"ver":"0.1","info":{"id":"4c2cDW","date":"1722352260","viewed":14,"name":"Eyes with orange rose petals","username":"maras","description":"Minimalistics portrait with rose petals","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["eyes","eyes","petals","portrait"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BACKGROUND_COLOR vec3(0.086, 0.184, 0.294)\n#define PETALS_COLOR vec3(0.941, 0.427, 0.224)\n#define SKIN_COLOR vec3(1, 0.859, 0.675)\n#define EYE_COLOR vec3(0.82, 0.459, 0.102)\n\nfloat erasePetalsRand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(1222.9898, 433.1414))) * 43123758.5453);\n}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdUnevenCapsule( vec2 p, float r1, float r2, float h )\n{\n    p.x = abs(p.x);\n    float b = (r1-r2)/h;\n    float a = sqrt(1.0-b*b);\n    float k = dot(p,vec2(-b,a));\n    if( k < 0.0 ) return length(p) - r1;\n    if( k > a*h ) return length(p-vec2(0.0,h)) - r2;\n    return dot(p, vec2(a,b) ) - r1;\n}\n\nvoid drawPetals(vec2 p, inout vec3 col) {\n    vec2 orig_p = p;\n        \n    p.y += iTime / 10.0;\n    p.x += cos(iTime / 3.0);\n    \n    if (erasePetalsRand(floor(p * 5.0)/5.0) < 0.3) return;\n\n    p *= 5.0;\n    p = mod(p, 1.0);\n    p *= 2.0;\n    p -= 1.0;\n    \n    p = rotate(p, sin(iTime + orig_p.x * orig_p.x) * cos(noise(orig_p) * orig_p.y));\n\n    float res = sdEllipse(p, vec2(0.7, abs(sin(iTime / 3.0) * sin(orig_p.x * orig_p.y + 5.0)) / 2.0) + 0.1);\n    \n    if (res < 0.0) {\n        col = PETALS_COLOR;\n        \n        col *= p.x + 1.3;\n    }    \n}\n\nfloat eyes_whites(vec2 p) {\n    p.y += 0.08;\n    p.x = abs(p.x);\n    p.x += 0.2;\n    \n    vec2 a = vec2(0.55,0.22);\n    vec2 b = vec2(0.3,0.19);\n    float w = 0.06; \n\n    float r = 0.5*length(b-a);\n    float d = 0.5*(r*r-w*w)/w;\n    vec2 v = (b-a)/r;\n    vec2 c = (b+a)*0.5;\n    vec2 q = 0.5*abs(mat2(v.y,v.x,-v.x,v.y)*(p-c));\n    vec3 h = (r*q.x<d*(q.y-r)) ? vec3(0.0,r,0.0) : vec3(-d,0.0,d+w);\n\n    return length( q-h.xy) - h.z ;\n}\n\nfloat eyes_irises(vec2 p) {\n    p.x = abs(p.x);\n    p.x -= 0.22;\n    \n    return length(p) - 0.058;\n}\n\nfloat eyes_pupils(vec2 p, inout float pupils_shine) {\n    p.x = abs(p.x);\n    p.x -= 0.22;\n\n    pupils_shine = p.x;\n    \n    return length(p) - 0.033;\n}\n\nvoid drawEyes(vec2 p, inout vec3 color) {\n    vec2 orig_p = p;\n    \n    float whites = eyes_whites(p);\n\n    p.x += sin(iTime / 5.0) / 20.0;\n    p.y -= 0.145;\n    p.y += max(cos(iTime / 25.0) / 40.0, -0.01);\n\n    float irises = eyes_irises(p);\n\n    float pupils_shine = 0.0;\n    float pupils = eyes_pupils(p, pupils_shine); \n\n    if (whites < 0.0) {\n        color = vec3(0.9);\n        color /= 1.6;\n        \n        if (abs(orig_p.x) < 0.115) {\n            color = vec3(0.4, 0.0, 0.0);\n            color /= 1.6;\n        }\n        \n        if (orig_p.y > max(min(sin(iTime) + 1.0, 0.2), 0.0)) {\n            color = SKIN_COLOR - orig_p.x / 7.0 - noise(orig_p * 400.0) / 22.0;;\n            color /= 1.6;\n            \n            return;\n        }\n    }\n\n    if (irises < 0.0 && whites < 0.0) {\n        color = EYE_COLOR + abs(p.x) / 5.0 - noise(p * 100.0 * sin(iTime / 30.0)) / 2.0;\n        color /= 1.6;\n    }\n\n    if (pupils < 0.0 && whites < 0.0) { \n        if (p.x < 0.0) pupils_shine = -pupils_shine;      \n        color = vec3(0.03 + pupils_shine * 10.0);\n        color /= 1.6;\n        \n        if (noise((orig_p + vec2(0.0, iTime / 1000000.0)) * 1000.0) > 0.97) {\n            color = PETALS_COLOR * 2.0;\n            color /= 1.6;\n        }\n    }    \n}\n\nvoid drawGlasses(vec2 p, inout vec3 color) {\n    vec2 orig_p = p;\n    \n    float heartbeat = (pow(abs(sin(iTime*2.+.5)),30.) + pow(abs(sin(iTime*2.)),30.));\n\n    p.y -= 0.13;\n    p.x = abs(p.x);\n    p.x -= 0.225;\n        \n    vec2 b = vec2(0.11, 0.07);\n    vec2 d = abs(p)-b;\n    \n    float dist = abs(length(max(d,0.0)) + min(max(d.x,d.y),0.0) - 0.04) - 0.007;\n    dist = abs(length(p * vec2(0.85, 1.0)) - 0.14) - 0.007;\n    \n    vec2 a = vec2(0.37, 0.15);\n    b = vec2(0.5, 0.2);\n    \n    float full = length(orig_p + vec2(0.00, -0.13)) - 0.07;\n    float erase = length(orig_p + vec2(0.00, -0.11)) - 0.07;\n\n    full = max(full, -erase);\n    \n    dist = min(dist, full);\n    \n    if (dist < 0.0) {\n        color = vec3(0.1);\n    }\n    \n    if (length(p * vec2(0.85, 1.0)) < 0.14) {\n        color *= 1.6;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    vec3 col = BACKGROUND_COLOR * (uv.x + 1.0);\n\n    drawPetals(uv, col);\n    drawEyes(uv / 3.0 + vec2(0.0, 0.1), col);\n    drawGlasses(uv / 3.0 + vec2(0.0, 0.1), col);\n            \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}