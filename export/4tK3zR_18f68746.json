{"ver":"0.1","info":{"id":"4tK3zR","date":"1472789602","viewed":1302,"name":"circle noise","username":"Leukbaars","description":"Simple method to draw a bunch of circles at random positions using value noise.\n\nUseful for:\n-craters\n-cheese\n-confetti\n-bubbles\n-you name it :)\n\nedit: now more optimized!","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","noise","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Bram Eulaers 2016 - www.brameulaers.net\n// License: Creative Commons Attribution-ShareAlike 3.0 Unported License.\n// -------------------------------------------------------------------------------------\n// Offsets and scales circles using simple value noise. \n\nconst mat2 rot = mat2( 0.6,  0.2, -0.2,  0.6 );\n\nvec2 hash( float n )\n{\n    float sn = sin(n);\n    return fract(vec2(sn,sn*42125.13));\n}\n\nfloat circleNoise( vec2 uv )\n{\n    float uv_y = floor(uv.y);\n    uv.x += uv_y*.31;\n    vec2 f = fract(uv);\n    vec2 h = hash(floor(uv.x)*uv_y);\n    float m = (length(f-.25-(h.x*.5)));\n    float r = h.y*.25;\n    return m = smoothstep(r-.10*r,r,m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iResolution.xy)/iResolution.y;\n    uv *= sin(iTime*.5)+2.0;\n    uv += iTime*.4;\n          \n    //3 iterations for demo:\n    float m = 1.0;\n    for(float i=1.;i<=3.;i++)\n    {\n    \tuv = uv*rot*2.0+1121.13;\n    \tm *= clamp(circleNoise(uv)+.25*i,0.,1.);  \n    }    \n    \n\tfragColor = vec4(m);\n}","name":"Image","description":"","type":"image"}]}