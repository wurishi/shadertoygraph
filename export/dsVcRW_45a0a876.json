{"ver":"0.1","info":{"id":"dsVcRW","date":"1695853461","viewed":77,"name":"Harmonic Homogeneous Polynomials","username":"chronos","description":"A simple study in 2D Harmonic Homogeneous Polynomials of various degrees.\nHomogeneous polynomials have equal total degree in each term, and harmonic polynomials have Laplacian which is identically zero.\nThe Laplacian is simply sum of second partials.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["harmonic","homogeneous","polynomial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nA simple study in 2D Harmonic Homogeneous Polynomials of various degrees.\nHomogeneous polynomials have equal total degree in each term,\nwhile harmonic polynomials have Laplacian which is identically zero.\nThe Laplacian is simply sum of second partial derivatives\n\nA step towards studying spherical harmonics\nwhere the 3D versions of these functions are , see:\nhttps://en.wikipedia.org/wiki/Spherical_harmonics#Harmonic_polynomial_representation\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float pix_size = 2. / iResolution.y;\n    vec3 color = vec3(0);\n    \n    // Homogeneous: Equal degree in all terms:    f(a * x_1, ..., a * x_n) = a^d * f(x_1, ..., x_n)\n    // Harmonic: Laplacian (Sum of all second partial derivaties) is zero: sum_i d^2 f / dx_i^2 = 0\n    \n    // Degree 0:\n    // f(x, y) = a\n    \n    // Degree 1:\n    // f(x, y) = a * x + b * y\n    \n    // Degree 2:\n    // f(x, y) = a * x^2 + b * y^2 + c * x * y , where b = -a giving\n    // f(x, y) = a * (x^2 - y^2) + c * x * y \n    \n    // Degree 3:\n    // f(x,y) = a * x^3 + b * y^3 + c * x * x * y + d * x * y * y, where 3a + d = 0, and 3b + c giving\n    // f(x,y) = a * x^3 + b * y^3 - 3 * b * x * x * y - 3 * a * x * y * y, where 3a + d = 0, and 3b + c\n    \n    // Degree 4:\n    // f(x, y) = a * (x^4 + y^4) + b * (x^3 * y - x * y^3) - 6 * a * x^2 * y^2\n    \n    // General method:\n    // Write an expression for the general homogeneous polynomial of a given degree\n    // Compute the Laplacian (using e.g Wolfram Alpha: https://www.wolframalpha.com/input?i=laplacian+of+a+*+x%5E3+%2B+b+*+y%5E3+-+3+*+b+*+x+*+x+*+y+-+3+*+a+*+x+*+y+*+y\n    // Distribute all terms (such that you have an independent basis of polynomials with coefficient expression)\n    // Constrain the coefficients of the polynomial such that the Laplacian is identially zero\n    // Substitute the expression of the coefficients back into the original polynomial.\n    \n    // Worked example at the bottom!\n    \n    float zoom = 1.;\n    float x = zoom * uv.x;\n    float y = zoom * uv.y;\n    \n    float a = cos(iTime * 2.1) + cos(iTime / 6.);\n    float b = sin(iTime);\n    \n    float x2 = x * x;\n    float y2 = y * y;\n    float x3 = x2 * x;\n    float y3 = y2 * y;\n    float x4 = x3 * x;\n    float y4 = y3 * y;\n    \n    // A selection of Harmonic Homogeneous Polynomials\n    float deg1 = a * x + b * y;\n    float deg2 = a * (x2 - y2) + b * x * y;\n    float deg3 = a * (x3 - 3. * x * y2) + b * (y3 - 3. * x2 * y);\n    float deg4 = a * (x4 + y4) + b * (x3 * y - x * y3) - 6. * a * x2 * y2;\n    \n    // Choose which degree polynomial to display\n    float f = mix(deg3, deg4, mod(floor(iTime / 20.), 2.));\n    \n    // Choose a colormap: [-inf, inf] -> [0,1]^3  (RGB)\n    //color = tanh(f)*.5 + .5;\n    //color = clamp(f * vec3(0, 1, -1), 0., 1.);\n    color = clamp(tanh(f) * vec3(0, 1, -1), 0., 1.);\n    \n    // Isolate the view to a circular band / annulus\n    float r1 = 0.95;\n    float r2 = 0.85;\n    float s = \n        smoothstep(r1 + pix_size, r1, length(uv)) *\n        smoothstep(r2 - pix_size, r2, length(uv)) ;\n    \n    // Alternate between the two views ( uses a square wave and either multiplies the color by 1 or the circle mask.)\n    color *= mix(s, 1., mod(floor(iTime / 5.), 2.));\n    \n    fragColor = vec4(pow(color,vec3(1./2.2)), 1.0);\n}\n\n\n// Worked example for degree 4:\n// 1. List all 2D single term homogeneous polynomials of total degree 4:\n// x^4, x^3 y, x^2 y^2, x y^3, y^4\n//\n// 2. Construct a polynomial by giving each a coefficient and summing them:\n// f(x, y) = a * x^4 + b * x^3 y + c * x^2 y^2 + d * x y^3 + e * y^4\n//\n// 3. Compute the Laplacian ( straight from Wolfram Alpha :)  )\n// Δf(x, y) = 2 (6 a x^2 + 3 y (c x + d x + 2 b y) + e (x^2 + y^2))\n//\n// 4. Eliminate factor (2) and then distribute and collect terms:\n// Δf(x, y) = (6 a + e) x^2 + 3(c+d)xy + (6 b + e) y^2\n//\n// 4. Set each coefficient expression equal to zero:\n// (6 a + e) = 0\n// (6 b + e) = 0\n// c + d = 0\n// \n// 5. Solve to reduce to minimum number of variables:\n// e = -6a = -6b      ( implies that a = b )\n// d = -e\n//\n// 5. Insert into original polynomial\n// f(x, y) = a * x^4 + a * x^3 y + c * x^2 y^2 - c * x y^3 - 6a * y^4\n//\n// 6. Collect terms by coefficients and relabel (c becomes b):\n// f(x, y) = a * (x^4 + y^4) + b * (x^3 * y - x * y^3) - 6 * a * x^2 * y^2\n//\n// 7. Compute the laplacian of this final polynomial to confirm that it is identically zero\n// https://www.wolframalpha.com/input?i=laplacian+of+a+*+%28x%5E4+%2B+y%5E4%29+%2B+b+*+%28x%5E3+*+y+-+x+*+y%5E3%29+-+6+*+a+*+x%5E2+*+y%5E2\n","name":"Image","description":"","type":"image"}]}