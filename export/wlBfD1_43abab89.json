{"ver":"0.1","info":{"id":"wlBfD1","date":"1598904619","viewed":133,"name":"Ludicrous Speed, GO!","username":"Golui","description":"The Ludicrous Speed \"Plaid\" effect, from the 1987 movie Spaceballs.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["space","effect","balls","plaid","spaceballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653546264338327\n\nconst float VIGNETTE_START = 0.2;\n\nconst vec4 orange = vec4(235., 133., 47., 255.0) / 255.;\nconst vec4 red = vec4(120, 0., 16., 255.0) / 255.;\nconst vec4 green = vec4(0.05098, 0.6725, 0.0784, 0.05);\nconst vec4 blue = vec4(0.0784, 0.05098, 0.6725, 0.1);\nconst vec4 BG_COLOR = vec4((orange * 0.08).rgb, 0.0);\n\nvec4 lighten(vec4 a, vec4 b) {\n    return vec4(max(a, b));\n}\n\n// https://gist.github.com/DancingPhoenix88/b16af3a46dcf54f8dd5ea94088edb4cd\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat noise(float p){\n\tfloat fl = floor(p);\n \tfloat fc = fract(p);\n\treturn mix(rand(fl), rand(fl + 1.0), fc);\n}\n\n\n// Based on https://www.shadertoy.com/view/4sX3Rs\nfloat sun(vec2 uv, vec2 speed)\n{\n\tvec2 main = uv;\n\tvec2 uvd = uv * (length(uv));\n\n\tfloat ang = clamp(-PI, PI, atan(main.x, main.y));\n\tfloat f0 = 0.5 / (length(uv) * 16.0);\n\n\treturn smoothstep(.0, 1., f0 + f0 * abs((noise(sin(ang*3. - speed.x)*4.0 - cos(ang*2. + speed.y) * 3.0)*16.))*.1);\n}\n\n// They've gone to plaid\n\nfloat createBandMask(float x, float blurRadius, float width, float base) {\n    width -= 2. * blurRadius;\n    return smoothstep(0.0, blurRadius, abs(x - base - width / 2. - blurRadius) - width / 2.);\n}\n\nvec4 plaidVecritcalRed(vec2 uv, float tunnelParam) {\n\tvec4 col = vec4(0.0);\n\n\tif (tunnelParam <= 0.) {\n\t\ttunnelParam = 0.0;\n\t}\n\n\tfloat blur = 0.04;\n\tfloat baseSize = 0.15;\n\tfloat size = baseSize + (0.33 - baseSize) * tunnelParam;\n\tfloat baseOffset = 0.;\n\tfloat offset = baseOffset + (0.3 - baseOffset) * tunnelParam;\n\tfloat redMaskV = 1. - createBandMask(uv.x, blur, size, 0.);\n\tcol = mix(col, red, redMaskV * 0.8);\n\n\treturn col;\n}\n\nvec4 plaidVecritcalOrange(vec2 uv, float tunnelParam) {\n\tvec4 col = vec4(0.0);\n\n\tfloat baseOffset1 = 0.13;\n\tfloat baseOffset2 = 0.26;\n\n\tif (tunnelParam <= 0.) {\n\t\ttunnelParam = 0.0;\n\t\tbaseOffset2 = baseOffset1;\n\t}\n\n\tfloat blur = 0.02;\n\tfloat baseSize = 0.1;\n\tfloat size = baseSize + (0.3 - baseSize) * tunnelParam;\n\n\tfloat offset1 = baseOffset1 + (0.3 - baseOffset1) * tunnelParam;\n\tfloat offset2 = baseOffset2 + (0.3 - baseOffset2) * tunnelParam;\n\tfloat orangeMaskV = 1. - createBandMask(uv.x, blur, size, offset1)\n\t\t\t\t\t\t   * createBandMask(uv.x, blur, size, offset2);\n\tcol = mix(col, orange, orangeMaskV * .7);\n\n\treturn col;\n}\n\nvec4 plaidFirst(vec2 uv, float tunnelParam) {\n\n\tvec4 col = vec4(0.0);\n\n\tfloat width = 1./12.;\n\tfloat off = 1. / 8.;\n\tfloat blur = width * 0.3;\n\n\tfloat baseBlue = 1. * off;\n\tfloat blueMask = 1. - createBandMask(uv.y, blur, width, baseBlue)\n\t\t\t\t\t\t* createBandMask(uv.y, blur, width, baseBlue + 2. * off);\n\n\tfloat baseGreen = 2. * off;\n\tfloat greenMask = 1. - createBandMask(uv.y, blur, width, baseGreen)\n\t\t\t\t\t\t * createBandMask(uv.y, blur, width, baseGreen + 2. * off);\n\n\ttunnelParam = 1. - tunnelParam;\n\n\tgreenMask *= 0.12 * tunnelParam;\n\tblueMask *= 0.6 * tunnelParam * tunnelParam;\n\n\tcol = mix(col, green, greenMask);\n\tcol = mix(col, blue, blueMask);\n\n\tvec4 redV = plaidVecritcalRed(uv, tunnelParam);\n\tvec4 orangeV = plaidVecritcalOrange(uv, tunnelParam);\n\n\tcol = mix(col, redV + orangeV, (redV + orangeV).a);\n\n\ttunnelParam = .8 * tunnelParam + 0.2;\n\tcol = mix(col, vec4(1.0), 2. * orangeV.a * blueMask * tunnelParam);\n\n\treturn col;\n}\n\nvec4 plaidSecond(vec2 uv, float tunnelParam) {\n\n\tvec4 col = vec4(0.0);\n\n\tfloat width = 1./12.;\n\tfloat off = 1. / 8.;\n\tfloat blur = width * 0.3;\n\n\tfloat baseOrange = 0. * off;\n\tfloat orangeMask = 1. - createBandMask(uv.y, blur, width, baseOrange)\n\t\t\t\t\t\t  * createBandMask(uv.y, blur, width, baseOrange + 7. * off);\n\n\tfloat baseRed = 5. * off;\n\tfloat redMask = 1. - createBandMask(uv.y, blur, width, baseRed)\n\t\t\t\t\t   * createBandMask(uv.y, blur, width, baseRed + 1. * off);\n\n\tcol = mix(col, orange, orangeMask);\n\tcol = mix(col, red, redMask);\n\n\treturn col;\n}\n\n// Main code\n\nvoid _main(vec2 uv, out vec4 fragColor, const float time, const float aspect) {\n\n\tfloat progress = time / 4.; //smoothstep(0.0, 0.5, fract(time / 12.));\n\n\tvec4 col;\n\tfloat ludicrousProgress = progress;\n\n\tconst float window = 80./340.;\n\n\tfloat vignette = abs(uv.x + uv.y) + abs(uv.x - uv.y);\n\n\tif(ludicrousProgress > VIGNETTE_START) {\n\t\tfloat vignetteProgress = 1.5 * aspect * smoothstep(0.0, 1.0 - VIGNETTE_START, (ludicrousProgress - VIGNETTE_START));\n\n\t\tfloat wallId = ceil((uv.x + uv.y) * (uv.x - uv.y));\n\n\t\tvec2 nuv;\n\n\t\tif (wallId > 0.5) {\n\t\t\tnuv = vec2(1. / uv.x * sign(uv.x), uv.y / uv.x);\n\t\t} else {\n\t\t\tnuv = vec2(1. / uv.y * sign(uv.y), -uv.x / uv.y);\n\t\t}\n\n\n\t\tfloat tunnelParam = smoothstep(window, aspect, vignette);\n\n\t\tif (vignette < window) {\n\t\t\tif (wallId > 0.5) {\n\t\t\t\tnuv = vec2(-8. * uv.x * sign(uv.x), uv.y / uv.x);\n\t\t\t} else {\n\t\t\t\tnuv = vec2(-8. * uv.y * sign(uv.y), -uv.x / uv.y);\n\t\t\t}\n\t\t\t//Evil state change\n\t\t\ttunnelParam = 1.1;\n\t\t}\n\n\t\tnuv.x -= 0.6;\n\t\tnuv.x += 2. * fract(0.35 * time);\n\t\tnuv.y -= 0.4;\n\n\t\tnuv = 0.5 * nuv + 0.5;\n\t\tnuv.x *= 4.;\n\t\tnuv.y *= 2.5;\n\n\t\tvec2 partialUv = fract(nuv);\n\t\tcol += plaidFirst(partialUv, tunnelParam);\n\t\tcol = mix(col, BG_COLOR, smoothstep(window, window * 0.5, vignette));\n\t\tcol += plaidSecond(partialUv, tunnelParam);\n\t\tcol = lighten(col, BG_COLOR);\n\t\tcol.a = 1.0;\n\t\tcol *= 1. - smoothstep(0.0, 0.05, vignette - vignetteProgress);\n\t}\n\n\n\tfloat sunProgress = smoothstep(0.0, 1.0, ludicrousProgress * 10.);\n\tvec2 wUv = uv / window;\n\n\tfloat oldAlpha = col.a;\n\tcol += (orange * sun(wUv * 0.3, vec2(2.*time, 2.*time))+ 1.0 * (sun(wUv * 0.5, vec2(time, time)))) * (1. - length(2. * uv) * aspect) * sunProgress;\n\tcol.a = clamp(0.0, 1.0, max(col.a, oldAlpha));\n\n\tfragColor = col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n\n    float ASPECT = iResolution.x / iResolution.y;\n    \n\t_main(uv, fragColor, iTime, ASPECT);\n\tfragColor = mix(texture(iChannel0, uv - 0.5), fragColor, fragColor.a);\n}\n\n","name":"Image","description":"","type":"image"}]}