{"ver":"0.1","info":{"id":"Wtt3DN","date":"1576400564","viewed":56,"name":"firstShadertoy","username":"changlongLi","description":"this is my first shadertoy demo , I will continue to learn, continue to work hard","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","color","cool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//this is my first shadertoy demo\n//creaty by changlongLi\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0,0.0,1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec2 tile(vec2 _st, float _zoom){\n    _st *= _zoom;\n    return fract(_st);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n     uv = tile(uv,4.);\n    //width height ratio\n    float ratio = iResolution.x/iResolution.y;\n \t//\n\tuv.x = uv.x*ratio - 0.4;\n  \n    vec3 color = vec3(0.0);\n\n    vec2 pos = vec2(0.5)-uv;\n    float radius = length(pos)*2.0;\n    float angle = atan(pos.y,pos.x);\n\n    float f = cos(angle*3.);\n    float f1 = cos(angle*3.);\n    float f2 = cos(angle*3.);\n\n    f1 = fract(angle*1.376+iTime)*0.8;\n\t f2 = fract(angle*2.408+iTime)*0.8;\n\t f = f1*f2;\n\n    color = vec3( 1.-smoothstep(f,f+0.02,radius) );\n      \n    color = color * hsb2rgb(vec3((f+iTime),1.,1.000));\n      \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}