{"ver":"0.1","info":{"id":"XdBfWz","date":"1499992158","viewed":656,"name":"Columns Sliced & Repeated","username":"cacheflowe","description":"Another visual effect for a larger compositing task","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["texture","slice","repeat","columns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float columns = 6.;//4. + 3.5 * sin(iTime);\n    float columnWidth = 1. / columns;\n    float scrollProgress = 0.5 + 1./2. * sin(3.14 + iTime);\n    float zoom = 1. + 0.5 * sin(iTime);\n    float aspect = 4.5/3.;\n    float padding = 0.15 + 0.15 * sin(iTime);\n    vec4 color = vec4(1.);\n\n    // get coordinates, rotate & fix aspect ratio\n\tvec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    uv = rotateCoord(uv, 0.2 * sin(iTime));\n    uv.y *= aspect; // fix aspect ratio\n    \n    // create grid coords & set color\n    vec2 uvRepeat = fract(uv * zoom);\t\t\n\n    // calc columns and scroll/repeat them\n    float colIndex = floor(uvRepeat.x * columns) + 1.;\n    float yStepRepeat = colIndex * scrollProgress;\n    uvRepeat += vec2(0., yStepRepeat);\n    uvRepeat = fract(uvRepeat);\n    \n    // add padding\n    uvRepeat.y *= 1. + padding;\n    uvRepeat.y -= padding;\n    uvRepeat.x *= (columnWidth + padding * 1.) * columns;\n    uvRepeat.x -= padding * colIndex;\n    if(uvRepeat.y > 0. && uvRepeat.y < 1.) {\n        if(uvRepeat.x < columnWidth * colIndex && uvRepeat.x > columnWidth * (colIndex - 1.)) {\n        \tcolor = texture(iChannel0, uvRepeat);\n        }\n    }\n    \n    // set it / forget it\n\tfragColor = color;\n}\n\n/*\n\t// simple version w/repeat\n    float columns = 4. + 3.5 * sin(iTime);\n    float zoom = 1. + 0.75 * sin(iTime);\n    float aspect = 4.5/3.;\n\n\tvec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    uv.y *= aspect; // fix aspect ratio\n\n    uv *= zoom;\n    float index = floor(uv.x * columns);\n    uv += vec2(0., index * (0.5  + 0.5 * sin(iTime)));\n    vec4 color = texture(iChannel0, uv + 0.5);\n\tfragColor = color;\n\n*/","name":"Image","description":"","type":"image"}]}