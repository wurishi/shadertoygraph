{"ver":"0.1","info":{"id":"XltSzX","date":"1480872560","viewed":1094,"name":"RYB Color Wheel","username":"Klems","description":"Since I use HSV a lot for procedural palettes, I figured I should use a RYB space instead. It's C1 continuous like iq's HSV.","likes":13,"published":3,"flags":0,"usePreview":0,"tags":["color","circle","chromatic","hsv","additive","ryb","subtractive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 hsv2rgb_subtractive( in vec3 c ) {\n    float frac = fract(c.x)*6.0;\n    vec3 col = smoothstep(vec3(3,0,3),vec3(2,2,4),vec3(frac));\n    col += smoothstep(vec3(4,3,4),vec3(6,4,6),vec3(frac)) * vec3(1, -1, -1);\n    return mix(vec3(1), col, c.y) * c.z;\n}\n\n#define PI 3.14159265359\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n\tvec2 p = uv * 2.0 - 1.0;\n    p.x *= iResolution.x / iResolution.y;\n    \n    float frac = (atan(p.x, -p.y) + PI) / (2.0 * PI);\n    frac += 1.0/3.0;\n    frac = floor(frac*12.0+0.5)/12.0;\n    \n    fragColor.rgb = hsv2rgb_subtractive( vec3(frac, 1, 1) );\n    vec3 back = hsv2rgb_subtractive( vec3( uv.x, uv.y, 1.0 - uv.y) );\n    float l = abs(length(p) - 0.7);\n    fragColor.rgb = mix(fragColor.rgb, back, smoothstep(0.20, 0.21, l));\n    \n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}