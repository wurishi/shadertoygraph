{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// scale of flame layers\nconst float SCALE1 = 12.0;\nconst float SCALE2 = 17.0;\n// speed of flame layers\nconst vec2 CORESPEED1 = vec2(0.08,0.4);\nconst vec2 CORESPEED2 = vec2(0.77,1.67);\n// brightness of flame layers\nconst float BRIGHT1=1.0;\nconst float BRIGHT2=0.5;\n// flame colors\nconst vec3 color1 = vec3(0.5, 0.0, 0.0);\nconst vec3 color2 = vec3(1.0, 0.5, 0.0);\n// cloud colours\n//const vec3 color1 = vec3(0.2, 0.4, 0.7);\n//const vec3 color2 = vec3(0.7, 1.0, 1.0);\n// dither level\nconst float DITHER = 1.0;\n\nfloat rand(vec2 n) {\n\t// we use a smaller constant than the usual 43758.5453, because otherwise \n\t// the function returns 0 most of the time on some shaders\n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 137.585453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = fragCoord.xy / iResolution.xx;\n\t// random offset from current coordinate results in dithering\n\tvec2 turb = DITHER*vec2(rand(20.0*p),rand(22.2*p));\n\tvec2 pf1 = floor(SCALE1*p + turb - CORESPEED1*iTime);\n\tvec2 pf2 = floor(SCALE2*p + turb - CORESPEED2*iTime);\n\tvec3 c = mix(color1, color2, BRIGHT1*rand(pf1) + BRIGHT2*rand(pf2));\n\tfragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsXGzl","date":"1376649924","viewed":400,"name":"Very simple fire","username":"borisvanschooten","description":"I created this high performance shader for an Android game. It can be used to texture small objects.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["clouds","flame","random","red","realtime"],"hasliked":0,"parentid":"","parentname":""}}