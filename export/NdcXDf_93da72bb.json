{"ver":"0.1","info":{"id":"NdcXDf","date":"1634044802","viewed":49,"name":"My Square Rotation","username":"Falco524","description":"Square Rotation","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotation(vec2 uv, float th)\n    {\n        return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n    }\n    \n\nbool isInSquare(vec2 center, vec3 position, float size)\n{\n    return max(abs(center.x - position.x),abs(center.y - position.y))<size;\n}\n\n/*vec3 drawSquare(vec2 center, vec3 position, float size, vec3 col)\n{\n        return col = vec3(1,1,1);\n}*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(uv.xyx+vec3(0,2,4));\n    \n    vec2 center = vec2(0.9,0.5);\n    \n    uv = rotation(uv.xy,iTime)*0.1;\n    \n     if(isInSquare(rotation(center,iTime)*0.1, vec3(uv.xy,0.0), 0.01))\n     {\n        \n        col = vec3(1,1,1);\n     }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}