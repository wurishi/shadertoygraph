{"ver":"0.1","info":{"id":"dsGXRz","date":"1680688458","viewed":67,"name":"CG Morphnig Lab","username":"SlowMetanoia","description":"EN\narrows - object rotation\nf/g - morphing to fan/glasses\ni/o - zoom\nRU\nстрелки - поворот объекта\nf/g - морфинг в вентилятор/очки\ni/o - зум","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","test","morphing"],"hasliked":0,"parentid":"mdy3WR","parentname":"Morphnig Lab"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n#define SURF_DISTANCE .01\n\nfloat cutDistance(vec3 p, vec3 a, vec3 b){\n    float t = dot(p-a,b-a)/dot(b-a,b-a);\n    t = clamp(t,0.,1.);\n    vec3 c = a + t * (b-a);\n    return length(p-c);\n}\n//-------------------primitives functions-----------------------\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r){\n    return cutDistance(p,a,b)- r;\n}\nfloat sdTorus( vec3 p, vec2 t ){\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\nfloat dBox( vec3 p, vec3 b ){\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdPlane( vec3 p, vec3 n, float h )\n{\n  // n must be normalized\n  return dot(p,n) + h;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3  ba = b - a;\n    vec3  pa = p - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\nfloat sdSphere(vec3 p, float r){\n    return length(p) - r;\n}\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n//----------------------Operators functions----------------------\nvec3 translate(vec3 p, vec3 d){\n    return p - d;\n}\nmat2 rot(float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c,-s,s,c);\n}\nvec3 rot(vec3 p, vec3 angle){\n    p.yz*=rot(angle.x);\n    p.xz*=rot(angle.y);\n    p.xy*=rot(angle.z);\n    return p;\n}\nfloat subtract( float sdf1, float sdf2 ){\n    return max(sdf1,-sdf2);\n}\nfloat intersect(float sdf1, float sdf2 ){\n    return max(sdf1,sdf2);\n}\nfloat unite( float sdf1, float sdf2 ){\n    return min(sdf1,sdf2);\n}\nfloat morph( float sdf1, float sdf2, float k){\n    return mix(sdf1,sdf2,k);\n}\nvec4 morph( vec4 sdf1, vec4 sdf2, float k ){\n    return mix(sdf1,sdf2,k);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); \n}\n\nvec4 opElongate( in vec3 p, in vec3 h )\n{   \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\n//----------------------Scene objects----------------------------\n//-------------------------glases--------------------------------\nfloat shackle(vec3 p){\n    vec3 bp = p;\n    bp.y += smoothstep(-.6,-2.2,p.z);\n    float yd = mix(.2,.1, smoothstep(1.,0.,p.z));\n    float bd = dBox(bp, vec3(.02, yd + p.z*.01, 2));\n    float d = bd;\n    return d/2.;\n}\nfloat frame(vec3 p){\n    vec3 tp = p;\n    //tp = translate(tp, vec3(0,1,0));\n    vec4 tw = opElongate(tp, vec3(.4,.05,.15));\n    float td = tw.w + sdTorus(tw.xyz, vec2(.5,.07));\n    \n    vec3 cp = p;\n    vec4 cw = opElongate(cp, vec3(.4,0,.15));\n    float tc = cw.w + sdCylinder(cw.xyz, vec3(0),vec3(0,2,0),.5);\n    \n    return opSmoothSubtraction(tc,td, .05);\n}\nfloat brige(vec3 p){\n    float x = p.x;\n    \n    vec3 bp = p;\n    bp.y += x*x*.6;\n    bp.z += x*x;\n    float bd = dBox(bp, vec3(.2,.1 + x*x,.05));\n    return bd;\n    \n}\nfloat lense(vec3 p){\n    vec3 sp1 = p - vec3(0,.05,0);\n    vec3 sp2 = p;\n    vec3 cp = p;\n    vec3 pp = p;\n    \n    vec4 cw = opElongate(cp, vec3(.4,0,.15));\n    \n    \n    float pd = sdPlane(pp, vec3(0,1,0),-.3);\n\n    float cd = cw.w + sdCylinder(cw.xyz, vec3(0,0,0),vec3(0,2,0),.5);\n    float sd1 = sdSphere(sp1, 1.90);\n    float sd2 = sdSphere(sp2, 2.0);\n    \n    float d = subtract(sd2, sd1);\n    d = intersect(d, cd);\n    d = subtract(d, pd);\n    \n    return d;\n}\nvec4 glases(vec3 p){\n    //(l,f,s,b)\n    float Pi = 3.1415;\n    \n    vec3 fp1 = p;\n    fp1 = translate(fp1, vec3(0,1,0));\n    fp1 = rot(fp1, vec3(Pi/2.,0,0));\n    vec3 fp2 = translate(fp1, vec3(2.3,0,0));\n    vec3 bp = translate(p,vec3(1.15,1.2,0));\n    vec3 lp1 = translate(p,vec3(0,0,0));\n    lp1 = translate(lp1,vec3(0,1,-1.8));\n    vec3 lp2 = translate(lp1, vec3(2.3,0,0));\n    lp1 = rot(lp1, vec3(-Pi/2.,0,0));\n    lp2 = rot(lp2, vec3(-Pi/2.,0,0));\n    vec3 sp1 = translate(p,vec3(-1.,1.2,-1.9));\n    vec3 sp2 = translate(sp1, vec3(4.3,0,0));\n\n    float fd1 = frame(fp1);\n    float fd2 = frame(fp2);\n    float bd = brige(bp);\n    float ld1 = lense(lp1);\n    float ld2 = lense(lp2);\n    float sd1 = shackle(sp1);\n    float sd2 = shackle(sp2);\n   \n    float d = 100.;\n    \n    float ld = min(ld1,ld2);\n    float fd = min(fd1,fd2);\n    float sd = min(sd1,sd2);\n    /*\n    d = min(d, fd2);\n    d = min(d, fd1);\n    d = opSmoothUnion(d, sd1, .15);\n    d = opSmoothUnion(d, sd2, .15);\n    d = opSmoothUnion(d, bd, .07);\n    d = opSmoothUnion(d, ld1, .01);\n    d = opSmoothUnion(d, ld2, .01);\n    */\n    return vec4(ld,fd,sd,bd);\n}\n//--------------------------fan---------------------------------\nfloat blade(vec3 p){\n    \n    vec3 ep = rot(p, vec3(clamp(p.x, -3.,3.),0,0));;\n    vec3 cp = p;\n    \n    float ed = sdEllipsoid(ep, vec3(1,1,.1));\n    float cd = sdCylinder(cp, vec3(0,0,-1),vec3(0,0,1),.5);\n    \n    float d = ed;\n    d = subtract(d,cd);\n    return d;\n}\nfloat fanFrame(vec3 p){\n    vec3 sp = p;\n    vec3 bp = p-vec3(0.,0.1,0.);\n    bp = opRep(bp, vec3(.4,.4,.4));\n    \n    float sd = abs(sdSphere(p, 1.))-.03;\n    float bd = dBox(bp, vec3(.19,.19,.19));\n    \n    float d = sd;\n    d = subtract(d, bd);\n    return d;\n}\n\nfloat fanSupport(vec3 p){\n\n    float x = p.x;\n    float y = p.y;\n    float z = p.z;\n\n    vec3 pp1 = translate(p, vec3(0,.4 - x*x*2.,0));\n    vec3 pp2 = translate(p, vec3(0,.4 - z*z*2.,0));\n    vec3 pp3 = translate(p,vec3(0));\n\n    vec3 sp = p;\n    \n    float sd = sdSphere(sp, .9);\n    float pd1 = sdPlane(pp1, vec3(0,1,0), 0.);\n    float pd2 = sdPlane(pp2, vec3(0,1,0), 0.);\n    float pd3 = sdPlane(pp3, vec3(0,1,0), 0.);\n    \n    float d = sd;\n    d = subtract(d, pd1);\n    d = subtract(d, pd2);\n    d = subtract(d, pd3);\n    return d;\n}\n\nvec4 fan(vec3 p){\n    //(b1,b2,f,s)\n    float Pi = 3.1415;\n    vec3 bp1 = translate(p, vec3(0,2,0));\n    bp1 = rot(bp1,vec3(-iTime*6.,0,0));\n    vec3 bp2 = rot(bp1, vec3(Pi/2.,0,0));\n    vec3 fp = translate(p, vec3(0,2,0));\n    vec3 sp = translate(p, vec3(0,.15,0));\n    \n    float bd1 = blade(bp1);\n    float bd2 = blade(bp2);\n    float fd = fanFrame(fp);\n    float sd = fanSupport(sp);\n    \n    float bd = opSmoothUnion(bd1, bd2, 0.3);\n    return vec4(bd1,bd2,fd,sd);\n}\n\n//camera function\n//takes uv, ray origin, looking at point and zoom, returns ray direction for current pixel\nvec3 cam(vec2 uv,vec3 ro, vec3 lookat, float zoom){\n    vec3 f = normalize(lookat - ro);\n    vec3 r = cross(vec3(0.,1.,0.), f);\n    vec3 u = cross(f,r);\n    vec3 c = ro + f*zoom;\n    vec3 i = c+uv.x*r+uv.y*u;\n    vec3 rd = i - ro;\n    return rd;\n}\n\n//----------------------Scene description------------------------\n//distance function for closest scene object\n//all distances must be calculated in there\nfloat getDist(vec3 p){\n    float Pi=3.1415;\n    float E = 2.718281;\n    float planeDist = p.y;\n    \n    p-=vec3(0,1,0);\n    \n    vec4 ctrl = texelFetch(iChannel0, ivec2(0,0),0);\n    vec2 mouseUV = ((iMouse.xy-.5*iResolution.xy)/iResolution.y-vec2(.0,.7))*1.8;\n    vec3 ro = vec3(0,1.1,0) + vec3(3.)*vec3(2.,3.,2.);\n    vec3 lookat = vec3(0,1,0);\n    float zoom = ctrl.z;\n    \n    vec3 mouseRD = cam(mouseUV,ro,lookat,zoom);\n    vec2 planeIntersection = mouseRD.xz + mouseRD.xz*(ro.y/mouseRD.y);\n    \n    vec3 shift = vec3(planeIntersection.x,.5,planeIntersection.y);\n    p = translate(p, -shift);\n    p = rot(p,vec3(ctrl.xy,0.));\n    float t = iTime;\n    \n    vec3 bp = translate(p, vec3(0,.5,0));\n    \n    vec3 gp = p;//translate(p, -shift);\n    //gp = rot(gp,vec3(ctrl.xy,0.));\n    vec3 fp = p;//translate(p, -shift);\n    fp = translate(fp, vec3(1.2,0,0));\n\n    fp = rot(fp,vec3(0,Pi/2.,0));\n    //fp = rot(fp,vec3(ctrl.xy,0.));\n    \n    //логистическая функция\n    \n    float l = 1./(1. + pow(E,15. - 30.*ctrl.w));\n    \n    float k = 1.;\n    \n    vec4 fd = fan(fp);//abs(fan(fp))-.005;\n    vec4 gd = glases(gp) - l*k;//abs(glases(gp))-.005;\n    \n    vec4 rs = morph(gd,fd,l);\n    \n    float d = planeDist;\n    \n    float rs1 = opSmoothUnion(rs.x,rs.y,.04);\n    float rs2 = min(rs.w,rs.z);\n    float rs3 = min(rs1,rs2);\n    \n    d = min(d,rs3);\n    \n    return d;\n}\n//----------------------Technical things needed for ray Marching-\n//Central function in ray marching. \n//It takes camera position and ray direction as as input and returns distance of closest scene object in that direction.\n//It depends on getDist function output.\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dist = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++){\n        vec3 p = ro + rd*dist;\n        float dS = getDist(p);\n        dist += dS;\n        if(dist>MAX_DISTANCE || abs(dist)<SURF_DISTANCE) break;\n    }\n    return dist;\n}\n// returns approximated normal vector of scene surface closet to the point.\nvec3 gerNormal(vec3 p){\n    float d = getDist(p);\n    vec2 e = vec2(0.01,0.);\n    \n    vec3 n = vec3(d) - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx));\n    return normalize(n);\n}\n// returns illumination in point on the scene\nfloat getLight(vec3 p){\n    vec3 lightSource = vec3(4,4,4);//vec3(sin(iTime),3,cos(iTime));\n    vec3 l = normalize(lightSource - p);\n    vec3 n = gerNormal(p);\n    \n    float d = RayMarch(p+n*1.1*SURF_DISTANCE,l);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    if (d < length(lightSource-p)){dif *=.5;}\n    return dif;\n}\n\nvec3 mouseOnSphere(vec2 mouseUV){\n    float Pi = 3.1415;\n    //uv : {-.5,.5}\n    //xyz: {-1,1}\n    float y = sin(mouseUV.y*Pi*2.);\n    float r = cos(mouseUV.y*Pi*2.);\n    float s = sign(r);\n    r = abs(r);\n    float x = s*r*cos(mouseUV.x*Pi*2.);\n    float z = s*r*sin(mouseUV.x*Pi*2.);\n    return normalize(vec3(x,y,z));\n}\nvec3 mouseOnCylinder(vec2 mouseUV, vec2 limits){\n    float Pi = 3.1415;\n    float y = (mouseUV.y + .5)*(limits.y - limits.x) + limits.x;\n    float x = cos(mouseUV.x*Pi*2.);\n    float z = sin(mouseUV.x*Pi*2.);\n    return vec3(x,y,z);\n}\n//--------------------------------Main-------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouseUV = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    \n    //point, camera looking at\n    vec3 lookat = vec3(0,1,0);\n    //ro - Ray origin - where the camera is\n    vec4 ctrl = texelFetch(iChannel0, ivec2(0,0),0);\n    vec3 cyl = mouseOnCylinder(ctrl.xy, vec2(-2.,1));\n    vec3 ro = vec3(0,1.1,0) + vec3(3.)*vec3(2.,3.,2.);\n    \n    // pixel color\n    vec3 col = vec3(0.);\n    \n    //rd - Ray direction - direction from camera through each pixel on the screen\n    vec3 rd = cam(uv,ro,lookat,ctrl.z);\n    //distance from origin to closest scene object in ray direction\n    float d = RayMarch(ro,rd);\n    //position, where ray intersects closet scene object\n    vec3 p = ro + rd*d;\n    \n    //Diffused light in that position\n    float dif = getLight(p);\n    \n    col = vec3(0,dif,0);\n    \n    //colorizing\n    if(d<MAX_DISTANCE){\n        uv = p.xy + vec2(.5,0);\n        \n        vec3 n = gerNormal(p);\n        if(n!=vec3(0,1,0)){\n            n = rot(n,vec3(ctrl.xy,0.));\n        }\n        \n        col = abs(n - vec3(0,.2,0))*dif;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst int _F_= 70;\nconst int _G_= 71;\nconst int _I_= 73;\nconst int _O_= 79;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //current stored values\n    vec4 inData = texelFetch(iChannel0, ivec2(0,0),0);\n    \n\n    //current arrow keys state\n    vec4 keysData = vec4(ivec4(\n        texelFetch(iChannel1,ivec2(KEY_LEFT,0),0).x,\n        texelFetch(iChannel1,ivec2(KEY_UP,0),0).x,\n        texelFetch(iChannel1,ivec2(KEY_RIGHT,0),0).x,\n        texelFetch(iChannel1,ivec2(KEY_DOWN,0),0).x\n    ));\n    \n    vec2 morhingKeys = vec2(ivec2(\n        texelFetch(iChannel1,ivec2(_G_,0),0).x,\n        texelFetch(iChannel1,ivec2(_F_,0),0).x\n    ));\n    \n    vec2 zoomKeys = vec2(ivec2(\n        texelFetch(iChannel1,ivec2(_I_,0),0).x,\n        texelFetch(iChannel1,ivec2(_O_,0),0).x\n    ));\n    \n    //camera position\n    inData.x += (keysData.z-keysData.x)/100.;\n    inData.y += (keysData.y-keysData.w)/100.;\n    inData.y = inData.y;\n    \n    inData.w += (morhingKeys.y - morhingKeys.x)/300.;\n    inData.w = inData.w, 0.,1.;\n    \n    \n    inData.z += (zoomKeys.y - zoomKeys.x)/100.;\n    if(inData.z == 0.){\n        inData.z = 1.;\n    }\n    inData.z = clamp(inData.z, .1,2.);\n    \n    fragColor = inData;\n}","name":"Buffer A","description":"","type":"buffer"}]}