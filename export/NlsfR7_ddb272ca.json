{"ver":"0.1","info":{"id":"NlsfR7","date":"1650656209","viewed":62,"name":"Face Test 1","username":"HSundar3467","description":"Basic face components are illustrated above as a test. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["face"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\n\n\nvec4 minWithColor(vec4 obj1, vec4 obj2) {\n  if (obj2.x < obj1.x) return obj2;\n  return obj1;\n}\n\nfloat sdSegment(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n// https://iquilezles.org/articles/distfunctions\nvec2 sdSegmentOri(vec2 p, vec2 b)\n{\n\tfloat h = clamp( dot(p,b)/dot(b,b), 0.0, 1.0 );\n\treturn vec2( length( p - b*h ), h );\n}\n\nfloat smoothMerge(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2 - d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0-h);\n}\n\nfloat smoothMerge(vec4 d1, vec4 d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2.x - d1.x)/k, 0.0, 1.0);\n    return mix(d2.x, d1.x, h) - k * h * (1.0-h);\n}\n\nfloat sdSphere(vec3 p, float r, vec3 offset)\n{\n  float d = length(p - offset) - r;\n  return d;\n}\n\nvec4 sdSphere(vec3 p, float r, vec3 offset, vec3 col )\n{\n  float d = length(p - offset) - r;\n  return vec4(d, col);\n}\n\nfloat sdEllipsoid(vec3 p, vec3 r, vec3 offset) \n{\n    float k0 = length((p - offset)/r);\n    float k1 = length((p - offset)/(r*r));\n    float d = k0*(k0-1.0)/k1;\n    return d;\n}\n\nvec4 sdEllipsoid(vec3 p, vec3 r, vec3 offset, vec3 col ) \n{\n    float k0 = length((p - offset)/r);\n    float k1 = length((p - offset)/(r*r));\n    float d = k0*(k0-1.0)/k1;\n    return vec4(d, col);\n}\n\nvec4 sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return vec4(d, col);\n}\n\n\nvec4 sdScene(vec3 p) {\n  float topSphere = sdSphere(p, 1., vec3(0.,0.4, 0.0));\n  float rightEyeSphere = sdEllipsoid(p, vec3(0.2, 0.15, 0.05), vec3(0.35,0.1, 1.0));\n  float leftEyeSphere = sdEllipsoid(p, vec3(0.2, 0.15, 0.05), vec3(-0.35,0.1, 1.0));\n  float noseSphere = sdEllipsoid(p, vec3(0.05, 0.05, 0.05), vec3(-0.0,-0.1, 2.0));\n  float yawSphere = sdEllipsoid(p, vec3(0.8, 0.9, 0.4), vec3(0.,-0.0, 0.5));\n  \n  float neckSphere = sdEllipsoid(p, vec3(0.4, 1.5, 0.3), vec3(0.,-0.4, -0.0));\n // float neck = sdSegment(p, vec3 (0.6), vec3 (0.1));\n  vec4 co = vec4 (smoothMerge(smoothMerge(topSphere, yawSphere, 0.1), noseSphere, 0.1), vec3(1., 0.78, 0.69)); // co = closest object containing \"signed distance\" and color\n  \n  co = minWithColor(co, vec4(leftEyeSphere, vec3(1.)) );\n  co = minWithColor(co, vec4(rightEyeSphere, vec3(1.)) );\n  return co;\n}\n\nvec4 rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  vec4 co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.x;\n    if (co.x < PRECISION || depth > end) break;\n  }\n  \n  vec3 col = vec3(co.yzw);\n\n  return vec4(depth, col);\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).x +\n      e.yyx * sdScene(p + e.yyx).x +\n      e.yxy * sdScene(p + e.yxy).x +\n      e.xxx * sdScene(p + e.xxx).x);\n}\n\nvec3 drawFace (vec2 uv)\n{\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n  \n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0, 4); // ray origin that represents camera position\n  vec3 rd = normalize(vec3(uv, -1)); // ray direction\n\n  vec4 co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // distance to sphere\n\n  if (co.x > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.x; // point on sphere we discovered from ray marching\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(1., 1., 4.);//change where the lightsource hits \n    vec3 lightDirection = normalize(lightPosition - p);\n\n    // Calculate diffuse reflection by taking the dot product of \n    // the normal and the light direction.\n    float dif = clamp(dot(normal, lightDirection), 0.4, 1.);\n\n    col = dif * co.yzw + backgroundColor * .2;//can multply dif with vec3 to change color. Can add background vec3 to change hue  \n    //(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n  }\n  \n  return col;\n}\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  // Output to screen\n  vec3 col = drawFace(uv);\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}