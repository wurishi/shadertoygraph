{"ver":"0.1","info":{"id":"ddyfzV","date":"1698657807","viewed":49,"name":"fftw_line","username":"bhxj","description":"让我康康，波形怎么提取","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["fftw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Ms3GRj","filepath":"https://soundcloud.com/platixzhang/sunseting-billows","previewfilepath":"https://soundcloud.com/platixzhang/sunseting-billows","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdf_seg_2d(in vec2 s, in vec2 e, in vec2 pos)\n{\n    vec2 se = e - s;\n    vec2 sp = pos - s;\n    float scale = clamp( dot(sp, se) / dot(se, se), 0.0, 1.0);\n    \n    return length(sp - se * scale);\n}\n\n\nconst int   FFTW_COUNT = 7;\nconst float STEP_COUNT = 512.0;\n\nvec2 size;\nfloat max_dis;\nvec2 fftw_pos[FFTW_COUNT];\n\nvoid texture_fftw(float x)\n{\n    x = floor(x * STEP_COUNT) - 0.5 - float(FFTW_COUNT / 2 - 1);\n    for(int i = 0 ; i < FFTW_COUNT ;++i)\n    {\n        float xx = (x + float(i)) / STEP_COUNT;\n        xx = clamp(xx, 0.0, 1.0);\n        fftw_pos[i].x = xx;\n        fftw_pos[i].y = 0.5 + (texture(iChannel0, vec2(xx, 0.75)).x - 0.5) * 0.5;\n        \n        fftw_pos[i] *= size;\n    }\n}\n\nfloat sdf(vec2 pos)\n{\n    float ret = 100000.0;\n    for(int i = 0 ; i < FFTW_COUNT - 1 ;++i)\n    {\n        float temp = sdf_seg_2d(fftw_pos[i], fftw_pos[i+1], pos);\n        ret = temp < ret ? temp : ret;\n    }\n    return ret;\n}\nvec3 image(vec2 fragCoord)\n{\n    //vec2 uv = fragCoord/iResolution.xy;\n    //texture_fftw(uv.x);\n    texture_fftw(fragCoord.x/iResolution.x);\n\n    vec2 p    = fragCoord/min(iResolution.x, iResolution.y);  \n    //float smooth_range = length(vec2(dFdx(p.x), dFdy(p.y)));\n    float dis = sdf(p);\n    \n    //return vec3(0.003/abs(dis));\n    \n    /*\n    vec3 ret = mix(vec3(1.0, 1.0, 1.0), vec3(1.0, 0.0, 0.0), dis / max_dis);\n     if(dis < max_dis)\n    {\n        return ret;\n    }\n    else\n    {\n        return vec3(0.0);\n    }*/\n    \n    \n    if(dis < max_dis * 0.35)\n    {\n        return vec3(1.0, 1.0, 1.0);\n    }\n    else if(dis < max_dis)\n    {\n        return vec3(0.7, 0.0, 0.0);\n    }\n    else\n    {\n        return vec3(0.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 p )\n{\n    size = iResolution.xy/min(iResolution.x, iResolution.y);  \n    max_dis = (size.x / STEP_COUNT) * 2.0;\n    int AA = 3;\n    vec3 col = vec3(0);\n    {\n        for (int i = 0; i < AA; i++) \n        {\n            for (int j = 0; j < AA; j++) \n            {\n                col += image(p + vec2(float(i), float(j)) / float(AA));\n            }\n        }\n\n        col /= float(AA * AA);\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}