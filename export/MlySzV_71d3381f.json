{"ver":"0.1","info":{"id":"MlySzV","date":"1485061637","viewed":185,"name":"vector field lel","username":"openflower","description":"draws slope field","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["calc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//By Paul Bleich <3\n//---START CONTROL PANEL---\n\nconst float scale = 15.0;\nvec2 origin = vec2(0.0,5.0);\n\nfloat yPrime(vec2 center)\n    {\n        float x = center.x;\n        float y = center.y;\n        \n        float yPrime = 5.0 - y; // put equation here\n        \n        \n        return(yPrime);\n    }\n\n//---END CONTROL PANEL---\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    fragColor = vec4(1.0,1.0,1.0,1.0); //white by default\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= (.5,.5); // put specified point in middle of screen\n    uv *= scale;\n    \n    uv.x *= iResolution.x/iResolution.y; // make coord system square\n    \n    uv += (.5,.5) + origin;\n    vec2 center = vec2(floor(uv.x), floor(uv.y)); // center of local square\n    vec2 local = vec2(fract(uv.x)-.5, fract(uv.y)-.5); // coord in local\n    uv -= (.5,.5);\n     \n    \n    \n    // highlight if in origin's local\n    if (center == vec2(0.0,0.0))\n        fragColor.b = 0.0;\n    \n\t// grid color if near edge of local\n  \tif (abs(local.x) < .03 || abs(local.y) < .03) {\n        fragColor = vec4(1.0,0.0,0.0,0.0);\n        if ( (center.x == 0.0 && abs(local.x) < .03) || // check if in x or y axis\n             (center.y == 0.0 && abs(local.y) < .03) )\n            fragColor = vec4(0.0,0.0,1.0,0.0);\n    }\n    \n\n \n\n    //in slope line? how far in?\n    float black = 0.0;\n    float dist = sqrt(local.x*local.x + local.y*local.y); // distance from center of local\n    if (dist < .5){ // don't want slope line to hit boundry of local\n        float m = yPrime(center);\n        black =  smoothstep(.2*clamp((abs(m))/2.0,0.75,100000000000000.0)\n                            , 0.1, abs(local.y-m*local.x));\n    \tfragColor -= vec4(black,black,black,0.0);\n    }\n    \n\n\n    \n    \n    \n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}