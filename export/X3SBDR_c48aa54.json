{"ver":"0.1","info":{"id":"X3SBDR","date":"1729299285","viewed":76,"name":"cubic through four points","username":"jt","description":"A cubic through four points. Surprisingly simple when solved by transposing and inverting matrix :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["cubic","four","point"],"hasliked":0,"parentid":"4XSfzm","parentname":"parabola through three points"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/X3SBDR cubic through four points, 2024 by jt\n// generalization of https://www.shadertoy.com/view/4XSfzm parabola through three points\n\n// A cubic through four points.\n\n// tags: four, point, cubic\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define draw_point(q) o *= smoothstep(0.0, 3.0/R.y, abs(q)) // resolution-independent anti-aliasing thanks to Fabrice!\n#define draw_circle(r, I) draw_point(length(I) - r)\n#define draw_cubic(A, B, C, D, I) draw_point(draw_cubic_helper(A, B, C, D, I))\n\nfloat cubic(float A, float B, float C, float D, float x)\n{\n    return A*x*x*x+B*x*x+C*x+D;\n}\n\nfloat cubic_derivative(float A, float B, float C, float x) // NOTE: D disappears due by derivative\n{\n    return 3.0*A*x*x+2.0*B*x+C;\n}\n\nfloat draw_cubic_helper(float A, float B, float C, float D, vec2 I)\n{\n    return (cubic(A, B, C, D, I.x)-I.y)/length(vec2(cubic_derivative(A, B, C, I.x),-1.0)); // divide by length of the gradient to get a constant width line (thanks, mla)\n}\n\nvec4 cubic_through_four_points(mat4x2 p) // https://www.shadertoy.com/view/X3SBDR cubic through four points (jt)\n{\n    //   I    y_0 = a x_0^3 + b x_0^2 + c x_0 + d\n    //  II    y_1 = a x_1^3 + b x_1^2 + c x_1 + d\n    // III    y_2 = a x_2^3 + b x_2^2 + c x_2 + d\n    //  IV    y_3 = a x_3^3 + b x_3^2 + c x_3 + d\n    //\n    //        /x_0^3   x_0^2   x_0   1\\ /a\\   /y_0\\\n    //        |x_1^3   x_1^2   x_1   1| |b| = |y_1|\n    //        |x_2^3   x_2^2   x_2   1| |c| = |y_2|\n    //        \\x_3^3   x_3^2   x_3   1/ \\d/   \\y_3/\n    //\n    //        /a\\   /x_0^3   x_0^2   x_0   1\\^-1 /y_0\\\n    //        |b| = |x_1^3   x_1^2   x_1   1|    |y_1|\n    //        |c| = |x_2^3   x_2^2   x_2   1|    |y_2|\n    //        \\d/   \\x_3^3   x_3^2   x_3   1/    \\y_3/\n    mat2x4 q = transpose(p);\n    return\n        inverse\n        (\n            mat4\n            (\n                q[0]*q[0]*q[0],\n                q[0]*q[0],\n                q[0],\n                vec4(1)\n            )\n        )\n        *\n        q[1];\n}\n\nvec2 polar(float t)\n{\n    return vec2(cos(t),sin(t));\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    vec2 m = iMouse.xy;\n    bool demo = length(m) < 10.0;\n    vec2 R = iResolution.xy;\n    I = (I+I-R)/R.y;\n    m = (m+m-R)/R.y;\n\n    o = vec4(1);\n\n    //vec2 a = vec2(-0.5,+0.5);\n    vec2 a = vec2(-0.5,+0.5)+polar(iTime)*0.1;\n    vec2 b = demo ? vec2( 0.0,-0.5)+polar(iTime).yx*0.2 : m;\n    vec2 c = vec2(+0.5, 0.0)-polar(iTime)*0.1;\n    vec2 d = vec2(0.75, 0.25)-polar(iTime/2.0)*0.1;\n\n    vec4 k = cubic_through_four_points(mat4x2(a,b,c,d));\n\n    draw_circle(0.01,I-a);\n    draw_circle(0.01,I-b);\n    draw_circle(0.01,I-c);\n    draw_circle(0.01,I-d);\n\n    draw_cubic(k.x,k.y,k.z,k.w,I);\n}\n","name":"Image","description":"","type":"image"}]}