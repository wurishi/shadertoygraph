{"ver":"0.1","info":{"id":"X3sfzN","date":"1728119199","viewed":13,"name":"Earthbound Thingy","username":"Nebula_Zorua","description":"Simple distortion stuff based on Earthbound's backgrounds\nmade for a thing i'm working on (hence the palette stuff even though its not usable on Shadertoy)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distortion","earthbound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718 \n#define PI 3.14159265359\n//#define HAS_PALETTE\n\n// basic parameters\nint paletteIndex = 0;\nint paletteOffset = 0;\nbool paletteFlipped = false;\nvec2 scrollOffset = vec2(0.0);\n// oscilation parameters\nvec2 amplitude = vec2(45.0, 45.0);\nvec2 frequency = vec2(1);\nvec2 speed = vec2(2.0);\nvec2 phase = vec2(0.5, 0.0);\nvec2 offset = vec2(0.0);\nbool useCompressionX = true;\nbool useCompressionY = false;\nbool useInterleavingX = false;\nbool useInterleavingY = false;\n\nfloat paletteCycleSpeed = 12.0;\n\nfloat distortionWave(float cons, float freq, float pha, float spe, float off)\n{\n    return sin(TAU * freq * cons + pha * PI + iTime * spe) + off;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    scrollOffset = vec2(-iTime * 80.0, 0.0);\n    float interleavedMultiplierX = (1.0 - float(useInterleavingX)) + ((mod(fragCoord.y, 2.0) - 1.) * 2.0) * float(useInterleavingX);\n    float interleavedMultiplierY = (1.0 - float(useInterleavingY)) + ((mod(fragCoord.x, 2.0) - 1.) * 2.0) * float(useInterleavingY);\n    \n    float compressionMulX = float(useCompressionX);\n    float compressionMulY = float(useCompressionY);\n    \n    vec2 distortionOffset = amplitude * vec2(\n        distortionWave((uv.x * compressionMulX) + (uv.y * (1.0 - compressionMulX)), frequency.x, phase.x, speed.x, offset.x) * interleavedMultiplierX,\n        distortionWave((uv.y * compressionMulY) + (uv.x * (1.0 - compressionMulY)), frequency.y, phase.y, speed.y, offset.y) * interleavedMultiplierY\n    );\n    #ifdef HAS_PALETTE\n    int sam = int(texture(iChannel0, (fragCoord + scrollOffset + distortionOffset) / iResolution.xy).r * 255.0);\n    \n    \n    int paletteLimit = int(iChannelResolution[1].y);\n    int index = paletteIndex % paletteLimit;\n    sam += int(iTime * paletteCycleSpeed);\n    sam += paletteOffset;\n    sam = sam % int(iChannelResolution[1].x);\n    \n    int finalPIdx = sam * (1 - int(paletteFlipped)) + ((int(iChannelResolution[1].x) - sam) - 1) * int(paletteFlipped);\n    \n    fragColor = texelFetch(iChannel1, ivec2(finalPIdx, index), 0);\n    #endif\n    \n    #ifndef HAS_PALETTE\n    fragColor = texture(iChannel0, (fragCoord + scrollOffset + distortionOffset) / iResolution.xy);\n    #endif\n}","name":"Image","description":"","type":"image"}]}