{"ver":"0.1","info":{"id":"dtfSDM","date":"1678213999","viewed":287,"name":"NCS Spectrum","username":"r00n1l","description":"Credits go to rory618 for his particle tracking buffer algorithm, it works wonders! \nOriginal work by him: https://www.shadertoy.com/view/XddfzM\n\nGLava version for audio spectrum on desktop (Linux, X11): https://github.com/Roonil/NCS_Spectrum_GLava","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["audio","fractalfield","ncs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\n\nvec3 overlay (vec3 target, vec3 blend){\n    vec3 temp;\n    temp.x = (target.x > 0.5) ? (1.0-(1.0-2.0*(target.x-0.5))*(1.0-blend.x)) : (2.0*target.x)*blend.x;\n    temp.y = (target.y > 0.5) ? (1.0-(1.0-2.0*(target.y-0.5))*(1.0-blend.y)) : (2.0*target.y)*blend.y;\n    temp.z = (target.z > 0.5) ? (1.0-(1.0-2.0*(target.z-0.5))*(1.0-blend.z)) : (2.0*target.z)*blend.z;\n    return temp;\n}\n\nvec3 multiply (vec3 target, vec3 blend){\n    return target*blend;\n}\n\nvec3 getAvgColorAround(vec2 uv){\n\nvec3 col = texture(iChannel1,uv).xyz;\n\nfor(int i=0;i<6;i++)\nfor (int j=0;j<6;j++)\n{\n    col+=texture(iChannel1,vec2(uv.x+float(i)/1000.,uv.y+float(j)/1000.)).xyz;\n}\nreturn col/36.;\n\n}\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n   // o = exp(-vec4(length(texture(iChannel0, uv).xy*R.xy-i)/30.));\n    o = texture(iChannel1,uv);\n    \n    \n    \n     float dist = 1.0/length(o.xy);\n    \n  \n    dist *= .2;\n    \n \n    dist = pow(dist, 0.8);\n    \n   \n    vec3 col =  vec3(.0025, .0085,0.025);\n    \n    o.xyz=getAvgColorAround(uv)*col*o.w;\n    return;\n    \n    \n    \n//o=1.-o;\n//o.w=-1.;\n\n\n//o.w=1.;\n// (o.r>=.7) o.r*=.01;\n//se o.rgb*=vec3(.0);\n\n//o.r*=length(o.gb);\n//vec3 col = vec3(.0100,.000418,0.009);\n\no.xyz=col*o.w;\n//o.xyz*=(o.w);\n//else o.r*=1./245.;\n\n\n//o.r*=1./23.;\n//o.xyz*=vec3(1.);\n    // float dist = 1.0/length(o.xy);\n  //   dist *= .035;\n  //   dist = pow(dist, 0.8109);\n    // vec3 col=(dist) * vec3(1.0, 1.0, 1.0);\n     \n     \n  //  col = exp( -col );\n//     col=mix(vec3(.0), col,length(o.xy));\n     \n //    col+=vec3(getGlow(dist,.52,7.713));\n  //   col+=3.*overlay(col,o.xyz);\n    //    o.xyz=col;\n        \n   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\nvec4 hash44(vec4 p4)\n{\n\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\nfloat w = 200.;\nfloat h = 200.;\nfloat v = 5.5;   //increase for fewer particles drawn better. Decrease all the way to 1 for iResolution.x*iResolution.y total number of particles\nint i1 =30;  //30   //number of iterations for fisrt and second drawing/search stages\nint i2 = 400; //200\t//more runs slower, but the particles are more visible","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    vec2 s = floor(i/vec2(w,h))*vec2(w,h)/R.xy;\n    \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,F,a));\n        vec4 p = texture(iChannel0,r.xy);\n        float l = length(p.xy*R.xy-i);\n        if(l < length(o.zw*R.xy-i)){\n            o.zw = p.xy;\n        }\n    }\n  \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(F,i,-a));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*25.;\n        vec4 p = texture(iChannel1,(i+r.zw)/R.xy);//sample random nearby points\n       \n        float l = length(p.zw*R.xy-i);\n        if(l < length(o.xy*R.xy-i)){\n            o.xy = p.zw;\n        }\n    }\n    \n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"float glow(float x, float str, float dist){\n    return dist+ dist / pow(x, str);\n}\n\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    o=vec4(0);\n    //o = texture(iChannel1,uv)*.45;\n //o.w=0.;\n    for(int a = 0; a <i2; a++){\n        vec4 r = hash44(vec4(i,F,a));//Transform this uniform random into a normal distribution\n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w));\n        vec4 p = texture(iChannel0,(i)/R.xy);//sample random nearby points\n        \n        \n    \n      // o.xy= vec2(4000000./(exp(15.*length(p.xy*R.xy-i)))); //add a gaussian to the accumulated image from the particle \n      \n      //   o.xy=vec2((glow(length(o.xy), 58.90, 8.002)));\n        if(length(o.xy)>0.01)  o.w+=.05;\n//o=vec4(length(p.xy*R.xy-i));\n\n\n o += 1.5/(1.+exp(3.5*length(p.xy*R.xy-i)));\n\n    }\n    \n    o.xyz/=o.w;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// --- pseudo perlin noise 3D\n\nint MOD = 1;  // type of Perlin noise\n#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n\n#define hash31(p) fract(sin(dot(p,vec3(127.1,311.7, 74.7)))*43758.5453123)\nfloat noise3(vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p); f = f*f*(3.-2.*f); // smoothstep\n\n    float v= mix( mix( mix(hash31(i+vec3(0,0,0)),hash31(i+vec3(1,0,0)),f.x),\n                       mix(hash31(i+vec3(0,1,0)),hash31(i+vec3(1,1,0)),f.x), f.y), \n                  mix( mix(hash31(i+vec3(0,0,1)),hash31(i+vec3(1,0,1)),f.x),\n                       mix(hash31(i+vec3(0,1,1)),hash31(i+vec3(1,1,1)),f.x), f.y), f.z);\n\treturn   MOD==0 ? v\n\t       : MOD==1 ? 2.*v-1.\n           : MOD==2 ? abs(2.*v-1.)\n                    : 1.-abs(2.*v-1.);\n}\n\nfloat fbm3(vec3 p) {\n\n//Take care\n//p.x=.35*0.34/(p.x*p.x);\n\nfloat perlinValX = noise3(p),maxDisp=1.0;\nreturn(maxDisp*perlinValX);\n//End block\n\n    float v = 0.,  a = .5;\n    mat2 R = rot(.37);\n\n    for (int i = 0; i < 1; i++, p*=2.,a/=2.) \n        p.xy *= R, p.yz *= R,\n        v += a * noise3(p);\n\n    return v/.5;\n}\n// -------------------------------------\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    vec4 r = vec4(0);\n    for(int j = 0; j < 30; j++){\n       r.xy = floor(i/v)*v/R.xy;//hash44(vec4(floor(i/v),0,j));\n        if(length(r-.5)<.5)\n            break;\n    }\n    o = texture(iChannel0,uv);\n    //if(iFrame<3){\n        o.xyz = r.xyz*2.-1.;\n        vec4 aud = texture(iChannel0,vec2(i.x,1.));\n        aud.xy/=iChannelResolution[0].xy;\n        \n    float t = 3.*iTime, K =2.5, S =2.;   //K=2.5,S=2.\n  \n  //  float k = K * max((1.-length(o.xy)),0.);\n    \n\n    \n      \n   \n    o.xyz += vec3( fbm3(vec3(S*o.xy, t)), fbm3(vec3(S*o.yx, t)),fbm3(vec3(S*o.zx,t)) ) / S;\n    o.z=(o.z+1.)/2.;\n\n   \nfloat radius=7.85; //7.85\n//radius=smoothstep(radius,radius-7.5,length(o.xyz));\n\n  \nif (length(o.xyz)<radius ){\n\n //   o.xyz=radius*normalize(o.xyz);\n //   o.xyz=(radius)*(sign(o.xyz)*(o.xyz))*normalize(o.xyz);\n // o.xyz=radius*normalize(o.xyz);\n  \n o.xyz=radius*smoothstep(5.75,.29375,length(o.xyz))*normalize(o.xyz);\n   o.xyz = .5+ o.xyz/17.*vec3(R.y/R.x,1,1);\n\n\n \n};\n   \n \n    \n   /* o.zw /= 1.001;\n    //o.xy = fract(o).xy;\n    o.xy += o.zw/R.xy;\n    //o.zw += .01*vec2(sin(o.y*10.),cos(o.x*10.))/1e3;\n    if(iMouse.w > 1.){\n        vec2 d = (iMouse.xy-o.xy*R.xy);\n        o.zw += d/(pow(length(d),2.));\n        o.zw *= 1.-exp(-.4*length(d));\n    }*/\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    vec2 s = floor(i/vec2(w,h))*vec2(w,h)/R.xy;\n    \n    //Randomly search for particles that are within this WxH block\n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,F,-a));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*5.;\n     \n        vec4 p = texture(iChannel0,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.xy*R.xy-i);\n        if(l < length(o.zw*R.xy-i)){\n            o.zw = p.xy;\n        }\n    }\n\n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,a,F));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*3.;\n        vec4 p = texture(iChannel1,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.zw*R.xy-i);\n        if(l < length(o.xy*R.xy-i)){\n            o.xy = p.zw;\n           \n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}