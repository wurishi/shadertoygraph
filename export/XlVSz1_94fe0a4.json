{"ver":"0.1","info":{"id":"XlVSz1","date":"1483002224","viewed":229,"name":"golden ratio","username":"KitVanDeBunt","description":"This is probably a really un-efficient way to do this because of the for loop but I don't know a better way to do this.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","goldenratio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.2831853071\n#define PI 3.14159265359\n#define GOLD 1.6180339887\n#define N 0.998\t\t\t// particle move distance\n#define S 0.1\t\t\t// Speed\n#define PS 20.0\t\t\t// particle size\n\n#define option 0\t\t// 0 or 1\n\n#if option\nvec4 lerp(float t, vec4 A, vec4 B){\n \treturn (A*(1.0-t))+(B*t);\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 r = iResolution.xy;\n\tvec2 uv = 0.5 + (fragCoord -.5*r)/r.y;\n    \n    float particlePower = 0.0;\n    for(float p = 0.0; p < N; p+=0.001){\n        float pAngle = p*1000.0*GOLD;\n        float pDist = mod(iTime*S+p,N);\n        vec2 point = vec2(sin(pAngle),cos(pAngle))*pDist;\n        point = point+0.5;\n        float pd = length(point-uv);\n        #if option\n        \tfragColor = lerp(pd*PS,fragColor,vec4(0,0,1,1));\n        #else\n        \tparticlePower += clamp(((.08*clamp(pDist,0.4,0.65))-pd)*PS,0.0,0.5);\n        #endif\n    }\n    #if !option\n        particlePower = clamp(particlePower*1.3,0.0,1.0);\n        float pp = particlePower;\n        float b = 0.5*(1.0-particlePower);\n        fragColor = vec4(pp,pp+(b*0.5),b*0.6,0.0);\n    #endif\n}","name":"Image","description":"","type":"image"}]}