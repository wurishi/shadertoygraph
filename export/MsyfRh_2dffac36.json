{"ver":"0.1","info":{"id":"MsyfRh","date":"1527588123","viewed":439,"name":"Toilet Seat","username":"Sobaya","description":"I think so good","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nstruct Ray {\n\tvec3 pos;\n\tvec3 dir;\n};\n\n\n// exponential smooth min (k = 32);\nfloat smin( float a, float b, float k ) {\n\tfloat res = exp( -k*a ) + exp( -k*b );\n\treturn -log( res )/k;\n}\n\nvec3 rotX(vec3 v, float a) {\n\ta *= 3.141592 / 180.;\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn vec3(\n\t\tv.x,\n\t\tv.y * c - v.z * s,\n\t\tv.z * c + v.y * s\n\t);\n}\n\nvec3 rotY(vec3 v, float a) {\n\ta *= 3.141592 / 180.;\n\tfloat c = cos(a);\n\tfloat s = sin(a);\n\treturn vec3(\n\t\tv.x * c - v.z * s,\n\t\tv.y,\n\t\tv.z * c + v.x * s\n\t);\n}\n\nfloat distBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat dist1(vec3 p) {\n\tif (abs(p.z) < 0.3) p.x += p.z * p.z * sign(p.x);\n\tp.x += p.y * sign(p.x) * 0.04;\n\treturn distBox(p, vec3(0.1, 0.15, 0.2)) - 0.01;\n}\n\nfloat dist2(vec3 p) {\n\tp.x /= 0.55;\n\tp.y -= 0.25;\n\tp.y /= 1.1;\n\tp /= 1.2;\n\tvec2 t = vec2(0.25, 0.06);\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\tfloat d = length(q)-t.y;\n\td = max(d, p.y - 0.01);\n\treturn d;\n}\n\nfloat lengthN(vec2 v, float n) {\n\tv.x = pow(v.x, n);\n\tv.y = pow(v.y, n);\n\treturn pow(v.x + v.y, 1./n);\n}\n\nfloat dist3(vec3 p) {\n\tp.y *= 2.5;\n\tp.x /= 0.55 * 1.3;\n\tp.y -= 0.7;\n\tp.z /= 1.3;\n\tvec2 t = vec2(0.25, 0.06);\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\tfloat d = length(q)-t.y;\n\treturn d;\n}\n\nfloat dist4(vec3 p) {\n\tp.y -= 0.55;\n\tp.y /= 1.4 - min(0., p.y) * 0.7;\n\tp.z += 0.34;\n\tfloat d = length(p.xy) - 0.2;\n\td = max(d, p.z - max(0., length(p.xy) - 0.19));\n\td = max(d, -p.z - 0.01);\n\treturn d;\n}\n\nfloat dist5(vec3 p) {\n    \n\tp.y -= 0.52;\n\tp.y = abs(p.y);\n\tp.y += 0.52;\n\tp.x = abs(p.x);\n\tp.y -= 0.66;\n\tp.x -= 0.12;\n\tp.z += 0.34;\n\n\tfloat d = length(p) - 0.015;\n\td = max(d, -p.z);\n\treturn d;\n}\n\nfloat dist6(vec3 p) {\n\tp.yz -= vec2(0.3, -0.34);\n\tp = rotX(p, 30. * sin(iTime * 10.) - 30.);\n\tp.yz += vec2(0.3, -0.34);\n\treturn min(dist4(p), dist5(p));\n}\n\nfloat dist(vec3 p) {\n\treturn min(min(smin(dist1(p), dist2(p), 25.), dist3(p)), dist6(p));\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat eps = 1e-3;\n\treturn normalize(vec3(\n\t\tdist(p+vec3(eps,0,0)) - dist(p),\n\t\tdist(p+vec3(0,eps,0)) - dist(p),\n\t\tdist(p+vec3(0,0,eps)) - dist(p)\n\t));\n}\n\nvec3 getColor(Ray ray) {\n\tvec3 pos = ray.pos;\n\tfor (int i = 0; i < 100; i++) {\n\t\tfloat d = dist(pos);\n\t\tif (abs(d) < 1e-3) break;\n\t\tpos += ray.dir * d;\n\t}\n\tif (dist(pos) < 1e-3) {\n\t\tfloat ambient = 0.3;\n\t\tvec3 lightPos = vec3(3);\n\t\tvec3 normal = getNormal(pos);\n\t\tfloat diffuse = max(0., dot(normal, normalize(lightPos - pos)));\n\t\treturn vec3(ambient + diffuse);\n\t}\n\treturn vec3(0,0,0);\n}\n\nRay getRay(vec2 screenPos) {\n\tRay ray;\n\tray.pos = vec3(screenPos * 0.4,1);\n\tray.dir = normalize(vec3(screenPos*0.2, -1));\n\n    /*\n\tfloat angleX = -10.;\n\tangleX += sin(iTime) * 20.;\n\tray.pos = rotX(ray.pos, angleX);\n\tray.dir = rotX(ray.dir, angleX);\n\n\tfloat angleY = 0.;\n\tangleY += sin(iTime * 0.2) * 20.;\n\tray.pos = rotY(ray.pos, angleY);\n\tray.dir = rotY(ray.dir, angleY);\n*/\n    float b = -20.;\n\tray.pos = rotX(ray.pos, b);\n\tray.dir = rotX(ray.dir, b);\n        \n    float a = 20. * sin(iTime);\n    ray.pos = rotY(ray.pos, a);\n    ray.dir = rotY(ray.dir, a);\n    \n\n\tray.pos.y += 0.3;\n\treturn ray;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 screenPos = (fragCoord / iResolution.xy - 0.5) * vec2(iResolution.x /iResolution.y, 1) * 2.;\n\n\t// Main Code Here...\n\tvec3 col = getColor(getRay(screenPos));\n\tfragColor = vec4(col,1);\n}\n","name":"Image","description":"","type":"image"}]}