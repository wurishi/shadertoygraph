{"ver":"0.1","info":{"id":"lc3fDj","date":"1733493390","viewed":61,"name":"life in box","username":"nayk","description":"source glslssandbox","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["box","life","in"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float iterations = 7.;\nfloat random(float seed) {\n    return fract(5430.2543 * sin(dot(vec2(seed, seed), vec2(3525.46, -5400.3415))));\n}\nvec2 mouse;\nfloat random (in vec2 st) { return fract(sin(dot(st.xy,vec2(120.9898,780.233)))*43758.5453123); }\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\nvec3 lookat (vec3 eye, vec3 at, vec2 uv, float fov) {\n  vec3 forward = normalize(at-eye);\n  vec3 right = normalize(cross(forward, vec3(0,1,0)));\n  vec3 up = normalize(cross(right, forward));\n  return normalize(forward * fov + right * uv.x + up * uv.y);\n}\n#define Q(p) p *= 2.*r(round(atan(p.x, p.y) * 4.) / 4.)\n#define r(a) mat2(cos(a + asin(vec4(0,1,-1,0))))\nfloat map (vec3 pos) {\n\n  float scene = 1.0;\n pos.xz*=rot(iTime*0.5);\n  pos.yz*=rot(iTime*0.5);\n  float range = 5.5;\n  float a = 7.0;\n  float falloff = 1.2 +1. * 0.7;\n\n\n  for (float index = iterations; index > 1.; --index) {\n    \n    pos = abs(pos)-range*a;\n    scene = min(scene, max(pos.y,max(pos.x,pos.z)));\n    a /= falloff;\n  }\n  scene = max(-scene,0.);\n  return scene;\n}\n\nvec3 getNormal (vec3 p) {\n  vec2 e = vec2(0.0001,0);\n  return normalize(vec3(map(p+e.xyy)-map(p-e.xyy), map(p+e.yxy)-map(p-e.yxy), map(p+e.yyx)-map(p-e.yyx)));\n}\n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 eye = vec3(0,0.,-2);\n\n\n    // Shake parameters\n    float shake_power = 0.03;\n    float shake_rate = 0.2; // Adjusted\n    float shake_speed = 5.0;\n    float shake_block_size = 30.5;\n    float shake_color_rate = 0.01;\n\n\n\n    // Enable shift based on random condition\n    float enable_shift = float(\n        random(floor(iTime * shake_speed)) < shake_rate\n    );\n\n    // Adjusted UV with shake effect\n    vec2 fixed_uv = uv;\n    fixed_uv.x += (\n        random(\n            (floor(uv.y * shake_block_size) / shake_block_size)\n        +   iTime\n        ) - 0.5\n    ) * shake_power * enable_shift;\n   \n    vec3 ray = lookat(eye, vec3(0.,0.,0), uv, .5);\n    mouse = (iMouse.xy / iResolution.xy);\n    float total = 0.0;\n    float shade = 0.0;\n    float dither = random(uv);\n  \n    const float count = 100.;\n    for (float index = count; index > 0.; --index) {\n        float dist = map(eye+ray*total);\n        if (dist < 0.001) {\n            shade = index/count;\n            break;\n        }\n        dist *= .9 + 0.1 * dither;\n        total += dist;\n    }\n    vec3 color = vec3(shade);\n    vec3 normal = getNormal(eye+ray*total);\n    color = vec3(.3)*clamp(dot(normal, normalize(vec3(0,1,-1))),0.,1.);\n    color += vec3(.9)*pow(clamp(dot(normal, -ray),0.,1.), 8.);\n    color *= shade;\n    fragColor = vec4(color,1);\n}","name":"Image","description":"","type":"image"}]}