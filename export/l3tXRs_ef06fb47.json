{"ver":"0.1","info":{"id":"l3tXRs","date":"1719430930","viewed":133,"name":"better CRT shader","username":"int_45h","description":"still not amazing, but better/more accurate than the last one I did. There's still issues with the border not being blurred properly, but it's not as bad as the original\n\na simple CRT shader based on this video: https://www.youtube.com/watch?v=aWdySZ0BtJs","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["crt"],"hasliked":0,"parentid":"csVczd","parentname":"basic CRT shader"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 O, in vec2 U)\n{\n    O = texture(iChannel0, U/iResolution.xy);\n    O += texture(iChannel1, U/iResolution.xy)*.25;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.14159265359\nvec3 get_pixels(vec2 U)\n{\n    int px = int(U.x) % 3;\n    float c = U.x - floor(U.x);\n    c = c*c*(3.-2.*c);\n    vec2 v = vec2(0,1);\n    switch (px)\n    {\n        case 0: return mix(v.yxx, v.xyx, c);\n        case 1: return mix(v.xyx, v.xxy, c);\n    }\n    return mix(v.xxy,v.yxx,c);\n}\n\nfloat get_scanlines(vec2 U)\n{\n    U.y += ((int(U.x / 6.) & 1) == 0) ? 1.5 : 0.;\n    float a = 0., t = .4;\n    return smoothstep(a, a+t, fract(U.y/3.));\n}\n\nvec2 distort_uv(vec2 uv, float f)\n{\n    uv -= .5;\n    float d = length(uv);\n    float p = atan(uv.x,uv.y);\n    d = d*(1.+d*d*f);\n    \n    return d*vec2(sin(p),cos(p))+.5;\n}\n\nfloat vignette(vec2 uv)\n{\n    uv *= 1.-uv.yx;\n    return pow(uv.y*uv.x*30., .2);\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    vec2 uv = U/iResolution.xy;\n    float a = .2;\n    vec2 uv2 = distort_uv(uv, a);\n    \n    vec3 col = texture(iChannel0, uv2).rgb;\n    if (uv2.y < 0. || uv2.y > 1. || uv2.x < 0. || uv2.x > 1.)\n        col = vec3(0);\n\n    // This causes nasty Moire patterns, uncomment the line below if you want to avoid that\n    vec2 U2 = uv2*iResolution.xy / 2.; \n    //U2 = U/2.;\n    \n    col = 1.4*col*(.2+.8*get_pixels(U2)*get_scanlines(U2));\n    //col = vec3(length(uv2));\n    col *= vignette(uv);\n    float m = threshold(col, .6, .2);\n    O = vec4(col, m);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 box_blurh(vec2 U)\n{\n    vec4 c = vec4(0);\n    #ifdef DO_BLOOM\n    c = texture(iChannel0, U/iResolution.xy);\n    c *= c.a;\n    \n    for (int x = 0; x < 5; x++)\n    {\n        vec2 n = vec2(x-2,0);\n        vec4 s = texture(iChannel0, (U+n)/iResolution.xy);\n        s *= s.a;\n        \n        int y = int(U.y) % 5;\n        c += s*k[y*5+x];\n    }\n    #endif\n    return c;\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    O = box_blurh(U);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 box_blurv(vec2 U)\n{\n    vec4 c = vec4(0);\n    #ifdef DO_BLOOM\n    c = texture(iChannel0, U/iResolution.xy);\n    c *= c.a;\n    \n    for (int y = 0; y < 5; y++)\n    {\n        vec2 n = vec2(0,y-2);\n        vec4 s = texture(iChannel0, (U+n)/iResolution.xy);\n        s *= s.a;\n        \n        int x = int(U.x) % 5;\n        c += s*k[y*5+x];\n    }\n    #endif\n    return c;\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    O = box_blurv(U)*q;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\nMIT License:\n\nCopyright 2024 int_45h\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this \nsoftware and associated documentation files (the “Software”), to deal in the Software \nwithout restriction, including without limitation the rights to use, copy, modify, \nmerge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit \npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or \nsubstantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR \nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE \nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR \nOTHER DEALINGS IN THE SOFTWARE.\n*/\n\n#define DO_BLOOM\n\nfloat luma(vec3 c) {return dot(c,vec3(.289,.587,.114));}\nfloat threshold(vec3 c, float t, float v){return smoothstep(t,t+v,luma(c));}\n/*\nfloat q = 1./273.;\nfloat k[25] = float[25](\n    1., 4., 7., 4., 1.,\n    4., 16., 26., 16., 4.,\n    7., 26., 41., 26., 7.,\n    4., 16., 26., 16., 4.,\n    1., 4., 7., 4., 1.\n);\n*/\nfloat q = 1./25.;\nfloat k[25] = float[25](\n    1., 1., 1., 1., 1., \n    1., 1., 1., 1., 1., \n    1., 1., 1., 1., 1., \n    1., 1., 1., 1., 1., \n    1., 1., 1., 1., 1.\n);\n\n","name":"Common","description":"","type":"common"}]}