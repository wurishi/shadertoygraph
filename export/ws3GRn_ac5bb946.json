{"ver":"0.1","info":{"id":"ws3GRn","date":"1717420950","viewed":32,"name":"penumbrasdfadf","username":"polariche","description":"afds","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["adf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1459\n\nconst float boxes[] = float[] (\n\t0.5, 0.5, 0.0, 0.2, 0.2, 1.0,\n\t-0.2, 0.3, 0.0, 0.2, 0.1, 1.0,\n    -0.4, -0.6, 0.0, 0.2, 0.1, 1.0\n);\n\nfloat sdBox(in vec3 p, in vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n\nfloat opUnion(in  float d1,in  float d2 ) { return  min(d1,d2); }\n\nfloat opSubtraction(in  float d1,in  float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection(in  float d1,in  float d2 ) { return max(d1,d2); }\n \n\nfloat map(in vec3 p) {\n    float d = 1000000.0;\n    for(int i=0;i<3;i++) {\n   \t\tvec3 x = vec3(boxes[6*i], boxes[6*i+1], boxes[6*i+2]);\n        vec3 y = vec3(boxes[6*i+3], boxes[6*i+4], boxes[6*i+5]);\n        d = opUnion(d, sdBox(p - x, y));\n    }\n    \n    \n    d = opUnion(-sdBox(p, vec3(1.3, 0.9, 1.0)), d);\n    \n    return d;\n}\n\n// https://www.shadertoy.com/view/4dfXDn\n// https://iquilezles.org/articles/rmshadows\n\nfloat rayMarch(in vec3 p, in vec3 dir, in float d_between) {\n    \n\tint max_steps = 64;\n    float travel_dist = 0.0;\n    float res = 100000.0;\n    \n    while(travel_dist < d_between) {\n        \n        float dist = map(p + dir*travel_dist);\n        \n        \n        if (dist <  0.005) {\n            return 0.3;\n        }\n        res = min(res, 2.0*dist/travel_dist);\n        travel_dist += dist;\n    }\n    \n    //only allows very dark colors\n    res = clamp((res*d_between + 0.4) * 1.6, 0.0, 1.0);\n\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy ) / iResolution.y * 2.0;\n    \n\tvec3 light = vec3(0.0+sin(iTime), 0.0+0.1*cos(iTime),0.0);\n    vec3 p = vec3(uv, 0.0);\n    \n    vec3 dir = normalize(light-p);\n \n    \n    vec3 col = vec3(0.2)*rayMarch(p, dir, length(light-p))+0.05/length(light-p);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}