{"ver":"0.1","info":{"id":"433Szj","date":"1719246209","viewed":84,"name":"Haxagon grid by A.I.","username":"Corstiaan","description":"Trying to get A.I. to write a shader for a hexagonal grid with aligned triangle UVs.\nAnthrop\\c Claude 3.5 Sonnet made this is 2 tries.... JUST TWO. so 5 minutes of work \nThis was my prompt (first comment, this textbox is limited)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// code v 1.0\n#define PI 3.14159265359\n// Exposed variables\n#define lineWidth 0.01\n#define size 4.\nvec2 hexCoord(vec2 uv) {\n    vec2 r = vec2(1., sqrt(3.));\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n    return dot(a, a) < dot(b, b) ? a : b;\n}\nvec2 triUV(vec2 uv, vec2 hexCenter) {\n    vec2 d = uv - hexCenter;\n    float angle = atan(d.y, d.x);\n    angle = mod(angle + PI / 6., PI / 3.) - PI / 6.;\n    float r = length(d);\n    return vec2(r * cos(angle), r * sin(angle)) * 2.;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.y;\n    uv *= size;\n\n    vec2 hexCenter = uv - hexCoord(uv);\n    vec2 localUV = triUV(uv, hexCenter);\n\n    // Hexagon grid\n    vec2 hexDist = abs(hexCoord(uv));\n    float hexEdge = max(hexDist.x, dot(hexDist, normalize(vec2(1., sqrt(3.)))));\n    float hexGrid = smoothstep(lineWidth * size, (lineWidth * 0.5) * size, abs(hexEdge - 0.5));\n\n    // Triangle edges\n    float triEdge = max(abs(localUV.x), abs(localUV.y));\n    float triGrid = smoothstep(lineWidth * size, (lineWidth * 0.5) * size, abs(triEdge - 1.));\n\n    vec3 color = vec3(localUV.x * 0.5 + 0.5, localUV.y * 0.5 + 0.5, 0.);\n    color = mix(color, vec3(1.), max(hexGrid, triGrid));\n\n    fragColor = vec4(color, 1.);\n}\n\n","name":"Image","description":"","type":"image"}]}