{"ver":"0.1","info":{"id":"llGGRK","date":"1475448555","viewed":174,"name":"Newton's Fractal (x^3 - 1)","username":"Polygon","description":"This draws Newton's Fractal for y = x^3 - 1.\n\nI don't really know what I'm doing when it comes to GLSL, so if anyone who happens to see this knows of some good tutorials or something, please let me know!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 iterate(vec2 coords) {\n    float x = coords.x;\n    float y = coords.y;\n    \n    float denominator = (x * x + y * y) * (x * x + y * y);\n    float newX = 0.5 * (x - (x * x - y * y) / denominator);\n    float newY = 0.5 * y + x * y / denominator;\n    \n    return vec2(newX, newY);\n}\n\nint iterations = 15;\nfloat xMin = -2.0;\nfloat xMax = 2.0;\nfloat yCenter = 0.0;\nfloat yRange = 1.125;\n\nvec2 convert(vec2 coords) {\n    float x = coords.x;\n    float y = coords.y;\n    \n    float newX = iResolution.x * (x - xMin) / (xMax - xMin);\n    float newY = iResolution.y * (y - yCenter - yRange) / (2.0 * yRange);\n    \n    return vec2(newX, newY);\n}\n\nvec2 revert(vec2 coords) {\n    float x = coords.x;\n    float y = coords.y;\n    \n    float newX = xMin + x * (xMax - xMin) / iResolution.x;\n    float newY = yCenter - yRange + y * (2.0 * yRange) / iResolution.y;\n    \n    return vec2(newX, newY);\n}\n\nfloat dist2(vec2 coord1, vec2 coord2) {\n    return ((coord1.x - coord2.x) * (coord1.x - coord2.x) + (coord1.y - coord2.y) * (coord1.y - coord2.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0);\n    \n    //  In this new version, rather than calculating the color for each pixel, it\n    //  divides each pixel into four mini-pixels, and averages the colors of\n    //  those four, to get a better looking image.\n    for (int k = 0; k < 4; k++) {\n        \n    \tvec2 newCoord;\n        \n        if (k == 0) {\n            newCoord = revert(vec2(fragCoord.x + 0.25, fragCoord.y + 0.25));\n        } else if (k == 1) {\n            newCoord = revert(vec2(fragCoord.x - 0.25, fragCoord.y + 0.25));\n        } else if (k == 2) {\n            newCoord = revert(vec2(fragCoord.x - 0.25, fragCoord.y - 0.25));\n        } else if (k == 3) {\n            newCoord = revert(vec2(fragCoord.x + 0.25, fragCoord.y - 0.25));\n        }\n        \n        \n    \tfor (int i = 0; i < iterations; i++) {\n    \t    newCoord = iterate(newCoord);\n    \t}\n    \t\n    \tbool ab = (dist2(newCoord, vec2(1,0)) > dist2(newCoord, vec2(-0.5, 0.86602540378)));\n    \tbool ac = (dist2(newCoord, vec2(1,0)) > dist2(newCoord, vec2(-0.5, -0.86602540378)));\n    \tbool bc = (dist2(newCoord, vec2(-0.5, 0.86602540378)) > dist2(newCoord, vec2(-0.5, -0.86602540378)));\n    \t\n    \tif (ab && ac) {\n    \t    fragColor += vec4(0.25, 0.0, 0.0, 1.0);\n    \t} else if (!ab && bc) {\n    \t    fragColor += vec4(0.0, 0.25, 0.0, 1.0);\n    \t} else {\n    \t    fragColor += vec4(0.0, 0.0, 0.25, 1.0);\n    \t}\n    }  \n}","name":"Image","description":"","type":"image"}]}