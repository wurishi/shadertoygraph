{"ver":"0.1","info":{"id":"4tfcRS","date":"1505171457","viewed":488,"name":"Equation Playground","username":"2LiveBrew","description":"This shader is built for experimenting with math!\nHave fun, Ben!","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["tools"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// scale the graph.\n#define scale 10.\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xOffset = (iResolution.x / iResolution.y * 0.5);\n\tvec2 uv = fragCoord.xy / iResolution.yy;\n    uv -= vec2(xOffset, 0.);    \n    fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    uv -= vec2(0., 0.5);\n    uv *= vec2(scale);\n    float y, x = uv.x;\n    \n    \n    \n    y = x\n    // y = sin(x)\n    // y = sin(x + iTime) // iTime is the current time from start in seconds.\n    \n    \n    \n    \n    ;\n    vec4 color = vec4(vec3(step(0.,uv.y - y)), 1.);\n    fragColor = mix(fragColor, color, color.r);\n    if((uv.x >= 0. && uv.x < 1./iResolution.y*scale) || (uv.y >= 0. && uv.y < 1./iResolution.y*scale)) fragColor = vec4(0.);\n}","name":"Image","description":"","type":"image"}]}