{"ver":"0.1","info":{"id":"sl2SDm","date":"1628766170","viewed":65,"name":"Ray marching 3rd","username":"TheoWU","description":"Haven't figured out how to move the camera by pressing keyboard A,W,S,D","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 recentMo;\nvec2 mo;\nstruct Hit{\n    vec3 pos;\n};\nstruct Light{\n    vec3 lightPos;\n    float strength;\n    vec3 lightColor;\n};\nvec3 repeat(vec3 pos,vec3 c){\n    return mod(pos+0.5*c,c)-0.5*c;\n}\n\nfloat noise(vec3 pos){\n    return sin(1.0*pos.x)*sin(1.0*pos.y)*sin(1.0*pos.z);\n}\n\nvec3 getDir(vec2 uv, vec3 pos, vec3 target, float zoom){ \n\n    mo = ((iMouse.xy)/iResolution.xy*2.0-1.0); //-1.0~0.0~1.0\n    mo *= 3.1415926; //-pi~0~pi\n    recentMo += mo;\n    pos = vec3(40.*sin(recentMo.x),40.*sin(recentMo.y),40.*(1.0-cos(recentMo.x)*cos(recentMo.y)));\n    \n    vec3 forth = normalize(target-pos);\n    vec3 right = cross(vec3(0,1,0),forth);\n    vec3 up = cross(forth,right);\n    \n    vec3 center = pos + forth * zoom;\n    vec3 inter = center + uv.x * right + uv.y * up;\n    vec3 dir = normalize(inter - pos);\n    return dir;\n}\n\nfloat sphere(vec3 pos,vec3 cen,float r){\n    return max(length(pos-cen)-r,0.0);\n}\nfloat plane(vec3 pos,float height){\n    return pos.y - height;\n}\n\nfloat scene(vec3 pos){\n    float d;\n    vec3 posS = repeat(pos,vec3(20.0*(1.0+0.1*sin(0.5*iTime)),2.0*(3.0+2.*cos(0.1*iTime)),20.0*(1.0+0.1*cos(0.1*iTime))));\n    d = sphere(posS,vec3(0.0,0.0,1.0),0.5);\n    d = min(plane(pos,-5.0)+(pow(sin(iTime),2.0)+0.5)*noise(pos),d);\n    return d;\n}\n\nvec3 getNormal(vec3 p){\n    float d = scene(p);\n    vec2 e = vec2(.01,0.);\n    vec3 n = d - vec3(scene(p-e.xyy),scene(p-e.yxy),scene(p-e.yyx));\n    return normalize(n);\n}\nfloat rayMarching(vec3 ori,vec3 dir){\n    float d=0.0;\n    vec3 pos = ori;\n    for(int i=0;i<100;i++){  \n        pos = ori + dir*d;\n        float d1 = scene(pos);\n        d += d1;\n        if(d1<0.000001 || d>100.0){\n            break;\n        }\n    }\n    return d;\n}\nvec3 getLight(vec3 ori, vec3 dir, float d, Light L){\n    if(d>100.0){\n        return vec3(0.4,0.7,0.9)*pow(dir.y,0.7)*3.0;\n    }\n    vec3 hitPos = ori + dir * d;\n    vec3 n = getNormal(hitPos);\n    vec3 lightDir = normalize(L.lightPos - hitPos); \n    vec3 diffuse = max(dot(n,lightDir),0.0) * L.lightColor * vec3(0.2,0.8,0.5);\n    vec3 specular = pow(max(dot(reflect(-dir,n),lightDir),0.0),4.0) * L.lightColor * vec3(0.4,0.8,0.7);  \n    \n    float dLight = rayMarching(hitPos+n*0.5,lightDir);\n\n    if(length(L.lightPos-hitPos)>dLight){\n        //return vec3(0.3,0.7,0.9)*dir.y*2.0;\n        //diffuse *= 1.0/exp(length(L.lightPos-hitPos)-dLight);\n        diffuse = vec3(0.0);\n        specular = vec3(0.0);\n    }else{\n        //diffuse = max(dot(n,lightDir),0.0) * lightColor;\n        //specular = pow(max(dot(reflect(-dir,n),lightDir),0.0),4.0) * lightColor;\n    }\n    return (diffuse + specular)*L.strength;\n}\n\nvec3 camPos = vec3(0.0,0.0,0.0);\nvec3 camTarget = vec3(0.0,0.0,0.0);\nfloat camZoom = 1.0;\nvec2 move = vec2(0.0);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = 2.0*(fragCoord/iResolution.xy - 0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec4 lastFrame = texture(iChannel0, fragCoord/iResolution.xy);\n    move += lastFrame.xy;\n    camPos = vec3(move.x,5.0,move.y+iTime);\n    camTarget = vec3(0.0,0.0,15.0+iTime);\n    \n    vec3 rayDir = getDir(uv,camPos,camTarget,camZoom);\n    vec3 rayOri = camPos;\n    //rayOri = repeat(rayDir,vec3(0.0,0.0,0.0));\n    Light L;\n    L.lightPos = vec3(0.0,10.0,5.0+iTime);\n    //float lightRadius = 1.0;\n    L.lightColor = vec3(0.5,0.8,0.5);\n    L.strength = 1.0;\n    float d = rayMarching(rayOri,rayDir);\n    \n    vec3 col = vec3(getLight(rayOri,rayDir,d,L));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool left;\n    bool right;\n    bool forward;\n    bool back;\n    vec2 move=vec2(0.0,0.0);\n    left = texelFetch(iChannel1,ivec2(65,2),0).x > 0.0;\n    right = texelFetch(iChannel1,ivec2(68,2),0).x > 0.0;\n    forward = texelFetch(iChannel1,ivec2(87,2),0).x > 0.0;\n    back = texelFetch(iChannel1,ivec2(83,2),0).x > 0.0;\n    \n    if(left){\n        move.x -= 1.0;\n    }\n    if(right){\n        move.x += 1.0;\n    }\n    if(forward){\n        move.y += 1.0;\n    }\n    if(back){\n        move.y -= 1.0;\n    }\n    fragColor = vec4(move,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}