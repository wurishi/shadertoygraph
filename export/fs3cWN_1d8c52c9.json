{"ver":"0.1","info":{"id":"fs3cWN","date":"1653433752","viewed":147,"name":"Minimal 2D Normal Map Light","username":"ellipticaldoor","description":"Displays a light tangent to the top of a flat surface using a normal map with minimal code","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["normalmap2dlighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.shadertoy.com/view/7lBBR3\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 cursorPosition = iMouse.xy / iResolution.y;\n  vec3 lightPosition = vec3(cursorPosition.xy, 0.1);\n\n  if (iMouse.z <= 0.0) {\n    lightPosition.x = (sin(iTime * 1.0) + 1.0);\n    lightPosition.y = (cos(iTime * 2.5) + 1.0);\n  }\n\n  vec3 planePosition = vec3(fragCoord.xy / iResolution.y, 0.0);\n\n  // Fake normal map of a flat surface\n  // You can replace this with an actual normal map texture\n  vec3 normal = vec3(0.5, 0.5, 1.0);\n  \n  vec3 N = normalize(normal * 2.0 - 1.0);\n  vec3 lightdir = normalize(lightPosition - planePosition);\n  float lighting = max(dot(lightdir, N), 0.0);\n\n  vec3 lightcolor = vec3(1.0, 0.7, 0.3);\n  fragColor.xyz = lighting * lightcolor;\n  fragColor.w = 1.0;\n\n  // Debug normal map\n  // fragColor = vec4(normal, 1);\n}\n","name":"Image","description":"","type":"image"}]}