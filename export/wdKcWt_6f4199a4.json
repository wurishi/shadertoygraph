{"ver":"0.1","info":{"id":"wdKcWt","date":"1604074728","viewed":147,"name":"dither triangle noise test","username":"damart3d","description":"template for integration over time ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float interleavedGradientNoise(vec2 n) \n{\n    float f = 0.06711056 * n.x + 0.00583715 * n.y;\n    return fract(52.9829189 * fract(f));\n}\n\n \nfloat goldenRation = 1.6180339887;\n\nvec4 bluenoise( vec2 fc )\n{\n    return texture( iChannel2, fc / iChannelResolution[2].xy );\n}\n\n//note: works for structured patterns too\n// [0;1[\nfloat triangularRemap( const float v )\n{\n    float r2 = 0.5 * v;\n    float f1 = sqrt( r2 );\n    float f2 = 1.0 - sqrt( r2 - 0.25 );    \n    return ((v < 0.5) ? f1 : f2) * 2.0 - 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n \n    // Output to screen\n    float gradient = uv.x;\n    float slices = 8.0;\n\n    float quantized = floor(uv.x*slices +0.5)/slices;\n    float diffusion = (gradient - quantized);\n    float noise = bluenoise(fragCoord).x;\n    float frame = ceil(iTime*60.0);\n    float temporalNoise = fract(noise + goldenRation*frame);\n    //noise = temporalNoise;\n    //float noise = interleavedGradientNoise(fragCoord);\n\tfloat noiseT = triangularRemap(noise);\n\t\n    float outputC = 0.0;\n\n \tfloat ditheredN = floor(noiseT + diffusion*slices)/slices;\n    float dithered = floor(noise + diffusion*slices)/slices;\n    ditheredN = quantized + ditheredN;\n    dithered = quantized + dithered;\n    \n    if(uv.y>0.75)\n    {\n \t\toutputC = ditheredN;\n    }\n    else if(uv.y>0.50)\n    {\n   \t\toutputC = dithered;\n    }\n    else if(uv.y>0.25)\n    {\n        float error = abs(gradient - ditheredN)*4.0;\n        outputC = error;\n    }\n    else  \n    {\n        float error = abs(gradient - dithered)*4.0;\n        outputC = error;\n    }\n         \n    fragColor = vec4(outputC,outputC,outputC,1.0);\n}","name":"Image","description":"","type":"image"}]}