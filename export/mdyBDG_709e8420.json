{"ver":"0.1","info":{"id":"mdyBDG","date":"1698585874","viewed":75,"name":" angel over the abyss","username":"nayk","description":"galaxy, universe, stars,abyss","likes":5,"published":1,"flags":1,"usePreview":0,"tags":["galaxy","stars","universe","abyss"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original  https://www.shadertoy.com/view/lslyRn  */\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.750\n\n#define TAU radians(360.)\n\nconst float pi = acos(-1.0);\nconst float nbCircle = 13.; \n\nvec2 rotate(float angle, float radius)\n{\n    return vec2(cos(angle),-sin(angle)) * radius;\n}\n\nvec2 perp(vec2 v)\n{\n    return vec2(-v.y, v.x);\n}\n\nfloat udTriangle( vec2 p, vec2 a, vec2 b, vec2 c )\n{\n  vec2 ab = b - a; vec2 pa = a - p;\n  vec2 bc = c - b; vec2 pb = b - p;\n  vec2 ca = a - c; vec2 pc = c - p;\n    \n  float d0 = dot(perp(ab), pa);\n  float d1 = dot(perp(bc), pb);\n  float d2 = dot(perp(ca), pc);\n    \n  return min(min(d0, d1), d2);\n}\n\nfloat sdfTriangle(vec2 p)\n{\n    float radius = 2.2;\n    float angle = iTime * 0.8;\n    vec2 a = rotate( angle, radius);\n    vec2 b = rotate( TAU / 3. + angle, radius);\n    vec2 c = rotate( 2. * TAU / 3. + angle, radius);\n    \n    return udTriangle(p, a, b, c);\n}\n\nfloat radFilter(float v)\n{\n    return smoothstep(100. / iResolution.y, 0., abs(v-1.));\n}\nfloat sdEquilateralTriangle(in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\nmat2 rotate2d(float angle)\n{\n\treturn mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n}\n\nvec3 poison_apple=vec3(0.635,0.0,0.38);\nvec3 teal_blue=vec3(0.0,0.329,0.533);\nvec3 misty_green=vec3(0.811,0.894,0.819);\nvec3 darkblue_green=vec3(0.0,0.435,0.482);\nvec3 medium_gray=vec3(0.623,0.627,0.627);  \n\nfloat distFilter(float v)\n{\n    return smoothstep(0., 0.5, v);\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.01);\n\tfloat time=iTime*speed+.25;\n\n\n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 2.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\nvec4 o=fragColor;\nvec2 u =fragCoord;\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\tvec2\tp2 = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float\tangle = atan(p2.y, p2.x);\n    float \tl = length(p2) * nbCircle;\n    float\tcircleId = floor(l);\n       vec2 v = iResolution.xy,\n         d2;\n        \n    ivec4 V;\n            \n    for(u = (u+u-v)/v.y; \n        ((V.x^V.y^V.z)-V.w) % 99 > V.w-99;\n        v = u*d2 +9.*iTime)\n        V = ivec4(v.x,              // dir 0\n                  .5*v.x+.866*v.y,  // dir pi/3\n                  .5*v.x-.866*v.y,  // dir 2pi/3\n                  d2 += .1);\n                   \n    V = abs(V) % 99;\n    o = vec4(V ^ V.yzxw&V.zxyw) * d2.r/4e3;\n\n    float\ts = 0.6;    \n  \n    float\tmodCircleId = mod(circleId, 2.);\n    float d = sdfTriangle(p2);\n    d = distFilter(d);\n    float speed2 = mix(0.1, -0.1, modCircleId);\n    l+= sin((angle - iTime * speed2) * circleId * 5.) * 0.5 * d * s;\n    l = fract(l) * 2.;\n    float\tt2 = min(l, 2. - l);\n    t2 = radFilter(t2); \n\tfloat s2 = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.0);\n\t\tp.xy *= ma;\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1)*d;\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts2  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.2, .0, len);\n\tv2 *= smoothstep(.5, .0, len);\n\tv3 *= smoothstep(.49, .0, len);\n\t\n\tvec3 color = vec3( v3 * (0.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\t vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    float AA=3.0/min(iResolution.x, iResolution.y);\n    vec3 col;\n    vec2 vec;\n    float d3;\n    vec2 t_p;\n    for(float i=0.0;i<60.0;i++)\n    {\n        t_p=vec2(cos(iTime/pi),sin(iTime/pi))*0.003*i;\n        d3=sdEquilateralTriangle(p*rotate2d(iTime/i*5.)+t_p,0.03*i);\n        col=(d>0.0&&mod(i,5.0)==0.) ? teal_blue      : col;\n        col=(d>0.0&&mod(i,5.0)==1.) ? poison_apple   : col;\n        col=(d>0.0&&mod(i,5.0)==2.) ? misty_green    : col;\n        col=(d>0.0&&mod(i,5.0)==3.) ? darkblue_green : col;\n        col=(d>0.0&&mod(i,5.0)==4.) ? medium_gray    : col;\n        col =  mix(col, vec3(0.0), smoothstep(AA,0.0,abs(d)) );\n    }\n   \n  \n\n\tvec3 from=vec3(1.,.5,0.5)*col*o.xyz;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n}","name":"Image","description":"","type":"image"}]}