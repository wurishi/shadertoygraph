{"ver":"0.1","info":{"id":"43tXRr","date":"1718526419","viewed":103,"name":"Pixel Art Planets","username":"ArchaicVirus","description":"Procedural generation of pixel-art style planets (based on combining my own previous techniques) where each planet type has 7 base colors, an atmosphere color, and a unique seed. Contains 32 custom planet types with unique colors.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","raycast","pixel","sphere","space","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct ColorScheme {\n    vec3 color1;\n    vec3 color2;\n    vec3 color3;\n    vec3 color4;\n    vec3 color5;\n    vec3 color6;\n    vec3 color7;\n    float seed;\n    vec3 atmosphereColor;\n};\n\nstruct ColorSchemes {\n    ColorScheme schemes[32];\n};\n\n//time to show each planet type\n#define INTERVAL 5.0\n#define PIXEL_SIZE 4.0\n#define START_PLANET 1.0\n\n#define PURPLE_CYAN_PLANET ColorScheme( \\\n    vec3(0.8, 0.0, 0.8), vec3(0.5, 0.0, 0.5), vec3(0.0, 0.8, 0.8), vec3(0.0, 0.5, 0.5), \\\n    vec3(0.8, 0.4, 0.0), vec3(0.5, 0.2, 0.0), vec3(0.2, 0.8, 0.0), 1.3, vec3(0.8, 0.0, 0.8) \\\n)\n\n#define AQUA_PLANET ColorScheme( \\\n    vec3(0.2, 0.6, 1.0), vec3(0.1, 0.4, 0.8), vec3(0.4, 0.2, 0.6), vec3(0.6, 0.1, 0.4), \\\n    vec3(0.9, 0.5, 0.1), vec3(0.8, 0.3, 0.0), vec3(0.3, 0.9, 0.2), 23456.8432657834, vec3(0.2, 0.6, 1.0) \\\n)\n\n#define EMBER_PLANET ColorScheme( \\\n    vec3(0.9, 0.0, 0.1), vec3(0.7, 0.0, 0.1), vec3(1.0, 0.5, 0.0), vec3(0.9, 0.6, 0.0), \\\n    vec3(0.8, 0.8, 0.1), vec3(0.6, 0.8, 0.2), vec3(0.2, 0.8, 0.4), 34567.9235635728, vec3(0.9, 0.0, 0.1) \\\n)\n\n#define TROPICAL_PLANET ColorScheme( \\\n    vec3(0.0, 0.8, 0.5), vec3(0.0, 0.6, 0.4), vec3(0.5, 0.8, 0.0), vec3(0.4, 0.6, 0.0), \\\n    vec3(0.8, 0.5, 0.0), vec3(0.6, 0.4, 0.0), vec3(0.8, 0.0, 0.2), 45678.3456874323, vec3(0.0, 0.8, 0.5) \\\n)\n\n#define COSMIC_PLANET ColorScheme( \\\n    vec3(0.3, 0.3, 0.9), vec3(0.2, 0.2, 0.7), vec3(0.7, 0.3, 0.9), vec3(0.5, 0.2, 0.7), \\\n    vec3(0.9, 0.3, 0.3), vec3(0.7, 0.2, 0.2), vec3(0.9, 0.7, 0.3), 56789.4769843267, vec3(0.3, 0.3, 0.9) \\\n)\n\n#define GREEN_PLANET ColorScheme( \\\n    vec3(0.0, 1.0, 0.5), vec3(0.0, 0.8, 0.4), vec3(1.0, 1.0, 0.0), vec3(0.8, 0.8, 0.0), \\\n    vec3(1.0, 0.5, 0.0), vec3(0.8, 0.4, 0.0), vec3(0.5, 0.0, 0.8), 67890.3456732345, vec3(0.0, 1.0, 0.5) \\\n)\n\n#define CANDY_PLANET ColorScheme( \\\n    vec3(1.0, 0.0, 0.5), vec3(0.8, 0.0, 0.4), vec3(0.5, 0.0, 0.8), vec3(0.4, 0.0, 0.6), \\\n    vec3(0.3, 0.9, 1.0), vec3(0.2, 0.7, 0.8), vec3(0.0, 0.5, 0.8), 78901.4367892343, vec3(1.0, 0.0, 0.5) \\\n)\n\n#define SUNSET_PLANET ColorScheme( \\\n    vec3(0.25, 0.3, 0.2), vec3(0.2, 0.5, 0.1), vec3(0.5, 0.46, 0.1), vec3(0.5, 0.5, 0.2), \\\n    vec3(0.3, 0.25, 0.2), vec3(0.5, 0.3, 0.1), vec3(0.0, 0.2, 1.0), 93726.4652197863, vec3(1.0, 0.6, 0.0) \\\n)\n\n#define DEEP_PLANET ColorScheme( \\\n    vec3(0.5, 0.0, 0.5), vec3(0.3, 0.0, 0.3), vec3(1.0, 0.3, 0.3), vec3(0.8, 0.2, 0.2), \\\n    vec3(0.0, 0.5, 1.0), vec3(0.0, 0.4, 0.8), vec3(0.0, 1.0, 0.5), 90123.1943362365, vec3(0.5, 0.0, 0.5) \\\n)\n\n#define DREAM_PLANET ColorScheme( \\\n    vec3(0.7, 0.0, 1.0), vec3(0.5, 0.0, 0.8), vec3(0.3, 0.0, 0.5), vec3(1.0, 0.5, 0.0), \\\n    vec3(0.8, 0.4, 0.0), vec3(1.0, 1.0, 0.0), vec3(0.8, 0.8, 0.0), 12390.9367437283, vec3(0.7, 0.0, 1.0) \\\n)\n\n#define ALIEN_PLANET ColorScheme( \\\n    vec3(0.8, 0.0, 0.8), vec3(0.5, 0.0, 0.5), vec3(0.0, 0.8, 0.8), vec3(0.0, 0.5, 0.5), \\\n    vec3(0.8, 0.4, 0.0), vec3(0.5, 0.2, 0.0), vec3(0.2, 0.8, 0.0), 12345.2349034843, vec3(0.8, 0.0, 0.8) \\\n)\n\n#define EARTH_PLANET ColorScheme( \\\n    vec3(0.0, 0.1, 0.5), vec3(0.0, 0.3, 0.7), vec3(0.0, 0.5, 0.8), vec3(0.0, 0.7, 0.7), \\\n    vec3(0.8, 0.6, 0.4), vec3(0.0, 0.6, 0.0), vec3(0.4, 0.6, 0.1), 67890.2349883636, vec3(0.0, 0.22, 0.75) \\\n)\n\n#define DESERT_PLANET ColorScheme( \\\n    vec3(0.9, 0.6, 0.3), vec3(0.8, 0.5, 0.2), vec3(0.7, 0.4, 0.1), vec3(0.6, 0.3, 0.0), \\\n    vec3(0.9, 0.7, 0.4), vec3(0.8, 0.6, 0.3), vec3(0.7, 0.5, 0.2), 23456.123456789, vec3(0.9, 0.7, 0.5) \\\n)\n\n#define ICE_PLANET ColorScheme( \\\n    vec3(0.4, 0.7, 0.9), vec3(0.3, 0.6, 0.8), vec3(0.2, 0.5, 0.7), vec3(0.1, 0.4, 0.6), \\\n    vec3(0.5, 0.8, 1.0), vec3(0.3, 0.5, 0.8), vec3(0.4, 0.6, 0.9), 34567.987654321, vec3(0.3, 0.6, 0.9) \\\n)\n\n#define JUNGLE_PLANET ColorScheme( \\\n    vec3(0.1, 0.6, 0.2), vec3(0.2, 0.7, 0.3), vec3(0.3, 0.8, 0.4), vec3(0.4, 0.9, 0.5), \\\n    vec3(0.2, 0.7, 0.4), vec3(0.3, 0.8, 0.5), vec3(0.4, 0.9, 0.6), 45678.234567890, vec3(0.1, 0.7, 0.3) \\\n)\n\n#define LAVA_PLANET ColorScheme( \\\n    vec3(0.8, 0.2, 0.1), vec3(0.9, 0.3, 0.2), vec3(1.0, 0.4, 0.3), vec3(0.7, 0.1, 0.0), \\\n    vec3(0.9, 0.4, 0.2), vec3(1.0, 0.5, 0.3), vec3(0.8, 0.3, 0.1), 56789.345678901, vec3(1.0, 0.4, 0.2) \\\n)\n\n#define OCEAN_PLANET ColorScheme( \\\n    vec3(0.2, 0.6, 0.8), vec3(0.1, 0.5, 0.7), vec3(0.3, 0.7, 0.9), vec3(0.4, 0.8, 1.0), \\\n    vec3(0.1, 0.4, 0.6), vec3(0.2, 0.5, 0.7), vec3(0.3, 0.6, 0.8), 67890.456789012, vec3(0.1, 0.6, 0.9) \\\n)\n\n#define SWAMP_PLANET ColorScheme( \\\n    vec3(0.4, 0.5, 0.2), vec3(0.5, 0.6, 0.3), vec3(0.6, 0.7, 0.4), vec3(0.3, 0.4, 0.1), \\\n    vec3(0.5, 0.6, 0.3), vec3(0.6, 0.7, 0.4), vec3(0.4, 0.5, 0.2), 78901.567890123, vec3(0.3, 0.5, 0.3) \\\n)\n\n#define CRYSTAL_PLANET ColorScheme( \\\n    vec3(0.5, 0.0, 0.7), vec3(0.6, 0.1, 0.8), vec3(0.7, 0.2, 0.9), vec3(0.4, 0.0, 0.6), \\\n    vec3(0.6, 0.1, 0.7), vec3(0.7, 0.2, 0.8), vec3(0.5, 0.0, 0.7), 89012.678901234, vec3(0.5, 0.1, 0.8) \\\n)\n\n#define GAS_GIANT ColorScheme( \\\n    vec3(0.8, 0.5, 0.3), vec3(0.7, 0.4, 0.2), vec3(0.9, 0.6, 0.4), vec3(0.6, 0.3, 0.1), \\\n    vec3(0.7, 0.4, 0.2), vec3(0.8, 0.5, 0.3), vec3(0.9, 0.6, 0.4), 90123.789012345, vec3(0.8, 0.4, 0.2) \\\n)\n\n#define ROCKY_PLANET ColorScheme( \\\n    vec3(0.5, 0.4, 0.3), vec3(0.6, 0.5, 0.4), vec3(0.7, 0.6, 0.5), vec3(0.4, 0.3, 0.2), \\\n    vec3(0.6, 0.5, 0.4), vec3(0.7, 0.6, 0.5), vec3(0.5, 0.4, 0.3), 12345.890123456, vec3(0.6, 0.5, 0.4) \\\n)\n\n#define VOLCANIC_PLANET ColorScheme( \\\n    vec3(0.7, 0.2, 0.0), vec3(0.8, 0.3, 0.1), vec3(0.9, 0.4, 0.2), vec3(0.6, 0.1, 0.0), \\\n    vec3(0.8, 0.3, 0.1), vec3(0.9, 0.4, 0.2), vec3(0.7, 0.2, 0.0), 23456.901234567, vec3(0.8, 0.3, 0.1) \\\n)\n\n#define HIGHLAND_PLANET ColorScheme( \\\n    vec3(0.4, 0.3, 0.2), vec3(0.5, 0.4, 0.3), vec3(0.6, 0.5, 0.4), vec3(0.3, 0.2, 0.1), \\\n    vec3(0.2, 0.7, 0.2), vec3(0.1, 0.6, 0.1), vec3(0.0, 0.5, 0.0), 56789.123456789, vec3(0.4, 0.3, 0.2) \\\n)\n\n#define FOREST_PLANET ColorScheme( \\\n    vec3(0.1, 0.5, 0.1), vec3(0.2, 0.6, 0.2), vec3(0.3, 0.7, 0.3), vec3(0.1, 0.4, 0.1), \\\n    vec3(0.2, 0.6, 0.2), vec3(0.3, 0.7, 0.3), vec3(0.1, 0.5, 0.1), 45678.123456789, vec3(0.2, 0.6, 0.2) \\\n)\n\n#define DUNE_PLANET ColorScheme( \\\n    vec3(0.4, 0.17, 0.17), vec3(0.7, 0.6, 0.4), vec3(0.6, 0.5, 0.3), vec3(0.5, 0.4, 0.2), \\\n    vec3(0.9, 0.8, 0.6), vec3(0.8, 0.6, 0.4), vec3(0.7, 0.5, 0.3), 76519.314561256, vec3(0.8, 0.7, 0.5) \\\n)\n\n#define MYSTIC_PLANET ColorScheme( \\\n    vec3(0.4, 0.1, 0.7), vec3(0.5, 0.2, 0.8), vec3(0.6, 0.3, 0.9), vec3(0.3, 0.0, 0.6), \\\n    vec3(0.5, 0.2, 0.8), vec3(0.6, 0.3, 0.9), vec3(0.4, 0.1, 0.7), 67890.345678901, vec3(0.5, 0.2, 0.8) \\\n)\n\n#define GLACIAL_PLANET ColorScheme( \\\n    vec3(0.3, 0.2, 1.0), vec3(0.5, 0.7, 0.9), vec3(0.4, 0.6, 0.8), vec3(0.3, 0.5, 0.7), \\\n    vec3(0.2, 0.4, 0.6), vec3(0.1, 0.3, 0.5), vec3(0.0, 0.2, 0.4), 34567.567890123, vec3(0.6, 0.8, 1.0) \\\n)\n\n#define NEBULA_PLANET ColorScheme( \\\n    vec3(0.5, 0.0, 0.5), vec3(0.2, 0.0, 0.2), vec3(0.3, 0.1, 0.5), vec3(0.1, 0.0, 0.3), \\\n    vec3(0.0, 0.3, 0.5), vec3(0.0, 0.2, 0.4), vec3(0.1, 0.0, 0.2), 45678.234567890, vec3(0.3, 0.0, 0.5) \\\n)\n\n#define CYBERPUNK_PLANET ColorScheme( \\\n    vec3(0.2, 0.2, 0.9), vec3(0.3, 0.1, 0.58), vec3(0.5, 0.1, 0.7), vec3(0.0, 0.5, 0.6), \\\n    vec3(0.3, 0.9, 0.25), vec3(0.2, 0.6, 0.2), vec3(0.1, 0.8, 0.9), 90123.678901234, vec3(0.7, 0.7, 0.8) \\\n)\n\n#define DEAD_PLANET ColorScheme( \\\n    vec3(0.4, 0.4, 0.4), vec3(0.5, 0.5, 0.5), vec3(0.6, 0.6, 0.6), vec3(0.3, 0.3, 0.3), \\\n    vec3(0.5, 0.5, 0.5), vec3(0.6, 0.6, 0.6), vec3(0.4, 0.4, 0.4), 12345.789012345, vec3(0.5, 0.5, 0.5) \\\n)\n\n#define AURORA_PLANET ColorScheme( \\\n    vec3(0.2, 0.5, 0.8), vec3(0.3, 0.6, 0.9), vec3(0.4, 0.7, 1.0), vec3(0.1, 0.4, 0.7), \\\n    vec3(0.5, 0.8, 0.2), vec3(0.4, 0.7, 0.1), vec3(0.3, 0.6, 0.0), 56789.876543210, vec3(0.3, 0.6, 0.9) \\\n)\n\n#define VENOMOUS_PLANET ColorScheme( \\\n    vec3(0.9, 0.8, 0.1), vec3(0.8, 0.6, 0.0), vec3(0.7, 0.5, 0.2), vec3(0.6, 0.4, 0.1), \\\n    vec3(0.5, 0.7, 0.2), vec3(0.4, 0.6, 0.1), vec3(0.3, 0.5, 0.0), 67890.123456789, vec3(1.0, 0.5, 0.0) \\\n)\n\n#define INIT_COLOR_SCHEMES \\\n    ColorSchemes( \\\n        ColorScheme[32]( \\\n            PURPLE_CYAN_PLANET, AQUA_PLANET, EMBER_PLANET, TROPICAL_PLANET, COSMIC_PLANET, \\\n            JUNGLE_PLANET, CANDY_PLANET, SUNSET_PLANET, DEEP_PLANET, DREAM_PLANET, \\\n            ALIEN_PLANET, EARTH_PLANET, DESERT_PLANET, ICE_PLANET, JUNGLE_PLANET, \\\n            LAVA_PLANET, OCEAN_PLANET, SWAMP_PLANET, CRYSTAL_PLANET, GAS_GIANT, \\\n            ROCKY_PLANET, VOLCANIC_PLANET, HIGHLAND_PLANET, FOREST_PLANET, DUNE_PLANET, \\\n            MYSTIC_PLANET, GLACIAL_PLANET, NEBULA_PLANET, CYBERPUNK_PLANET, DEAD_PLANET, \\\n            AURORA_PLANET, VENOMOUS_PLANET \\\n        ) \\\n    )\n\nconst ColorSchemes colorSchemes = INIT_COLOR_SCHEMES;\n\n//hard edge color transition\n//vec3 getColor(float n, ColorScheme scheme) {\n//    if (n > 0.85) return scheme.color7;\n//    else if (n > 0.70) return scheme.color6;\n//    else if (n > 0.55) return scheme.color5;\n//    else if (n > 0.40) return scheme.color4;\n//    else if (n > 0.25) return scheme.color3;\n//    else if (n > 0.15) return scheme.color2;\n//    else return scheme.color1;\n//}\n\n\n//smooth color transition\nvec3 getColor(float n, ColorScheme scheme) {\n         if (n > 0.85) return mix(scheme.color6, scheme.color7, (n - 0.85) / 0.05);\n    else if (n > 0.70) return mix(scheme.color5, scheme.color6, (n - 0.70) / 0.05);\n    else if (n > 0.55) return mix(scheme.color4, scheme.color5, (n - 0.55) / 0.05);\n    else if (n > 0.40) return mix(scheme.color3, scheme.color4, (n - 0.40) / 0.05);\n    else if (n > 0.25) return mix(scheme.color2, scheme.color3, (n - 0.25) / 0.05);\n    else if (n > 0.15) return mix(scheme.color1, scheme.color2, (n - 0.15) / 0.05);\n                  else return mix(scheme.color1, scheme.color1, (n - 0.00) / 0.05);\n}\n\n\nfloat hash(float n, float seed) {\n    return fract(sin(n + seed) * 53738.14534123);\n}\n\nfloat noise(vec2 p, float seed) {\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u * u * (3.0 - 2.0 * u);\n\n    return mix(\n        mix(hash(ip.x + ip.y * 57.0, seed), hash(ip.x + 1.0 + ip.y * 57.0, seed), u.x),\n        mix(hash(ip.x + (ip.y + 1.0) * 57.0, seed), hash(ip.x + 1.0 + (ip.y + 1.0) * 57.0, seed), u.x),\n        u.y\n    );\n}\n\nvec3 rotate(vec3 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec3(c*p.x - s*p.z, p.y, s*p.x + c*p.z);\n}\n\nfloat layeredNoise(vec3 p, float amplitude, float frequency, float persistence, int octaves, float seed) {\n    float n = 0.0;\n    for (int i = 0; i < octaves; i++) {\n        n += noise(p.xy * frequency, seed) * amplitude;\n        amplitude *= persistence;\n        frequency *= 2.0;\n        p = rotate(p, 45.0);\n    }\n    return n;\n}\n\nfloat sphere(vec3 ro, vec3 rd, float radius) {\n    float b = dot(ro, rd);\n    float c = dot(ro, ro) - radius * radius;\n    float h = b * b - c;\n    if (h < 0.0) return -1.0;\n    return -b - sqrt(h);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (floor(fragCoord / PIXEL_SIZE) * PIXEL_SIZE - iResolution.xy * 0.5) / iResolution.y;\n\n    //cycle rendering planet types every 'INTERVAL' seconds\n    int currentScheme = int(mod(floor(iTime / INTERVAL) + START_PLANET, 32.0));\n    ColorScheme scheme = colorSchemes.schemes[currentScheme];\n\n    //un-comment below to render only a specific type (0-31)\n    //currentScheme = 1\n\n    vec3 ro_planet = vec3(0.0, 0.0, 2.4);\n    vec3 ro_clouds = vec3(0.0, 0.0, 2.3);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    float t_planet = sphere(ro_planet, rd, 1.0);\n    float t_clouds = sphere(ro_clouds, rd, 1.0);\n    if (t_clouds < 0.0) {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    } else {\n        vec3 pos = ro_planet + t_planet * rd;\n        pos = rotate(pos, iTime/3.0);\n        vec3 norm = normalize(pos);\n        float noiseValue = layeredNoise(norm * 6.1415, 0.75, 0.75, 0.5, 6, scheme.seed);\n        vec4 color = vec4(getColor(noiseValue, scheme), 1.0);\n\n        if (t_planet < 0.0) {\n            color = vec4(0.0);\n        }\n\n        vec3 pos2 = ro_clouds + t_clouds * rd;\n        pos2 = rotate(pos2, iTime/1.5);\n        vec3 norm2 = normalize(pos2);\n        float noiseValue2 = layeredNoise(norm2 * 3.311, 1.0, 1.0, 0.5, 4, scheme.seed);\n        float noiseValueFinal = pow(noiseValue2, 1.05) - 1.0;\n        vec4 color2 = vec4(vec3(noiseValueFinal), noiseValue2);\n\n        fragColor = mix(color, (color2 + 0.25) * vec4(scheme.atmosphereColor, 0.75), noiseValue2 * 1.25) + color;\n    }\n}","name":"Image","description":"","type":"image"}]}