{"ver":"0.1","info":{"id":"cl2SR3","date":"1677228332","viewed":146,"name":"Simple VHS effect","username":"Famousghost","description":"Simple VHS effect on video","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["randomblurtext"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0f);\n\n    col += date(iChannel0, rotate(fragCoord, -90.0f), vec2(iResolution.x / 8.0f, -iResolution.y / 10.0f), 32.0f, iResolution.xy);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec3 Blur(sampler2D text, vec2 uv, vec2 resolution, float blurStrength, int blurSteps)\n{\n    \n    vec3 col = texture(text, uv / resolution.xy).rgb;\n    \n    float size = 1.0f;\n    \n    for(int x = -blurSteps; x <= blurSteps; ++x)\n    {\n        for(int y = -blurSteps ; y <= blurSteps; ++y)\n        {\n            col += texture(text, (uv + vec2(float(x) * blurStrength, float(y) * blurStrength)) / resolution.xy).rgb;\n            size += 1.0f;\n        }\n    }\n    return col / size;\n}\n\n\nvec3 sampleText(sampler2D text, vec2 fragCoord, int charId, vec2 position, float fontSize)\n{\n    float x = floor(float(charId) / 16.0f);\n    float y = mod(float(charId), 16.0f);\n    vec2 charCoord = vec2(-y, -(15.0f - x));\n    vec2 uv = fragCoord;\n    \n    uv = (uv - position) * 64.0f / fontSize;\n    \n    if(uv.x > 1.0f || uv.x < 0.0f ||  uv.y > 1.0f || uv.y < 0.0f)\n    {\n        return vec3(0.0f, 0.0f, 0.0f);\n        \n    }\n    \n    vec3 letter = textureGrad(text, (uv - charCoord) / 16.0f, dFdx(uv / 16.0f), dFdy(uv / 16.0f)).rrr;\n    \n    return letter;\n}\n\nvec3 textSampler(sampler2D text, vec2 fragCoord, int charId, vec2 pos, float fontSize, vec2 resolution)\n{\n    return sampleText(text, fragCoord / resolution, charId, pos / resolution, fontSize / 8.0f);\n}\n\nvec2 rotate(vec2 uv, float angle)\n{\n    float ra = radians(angle);\n    \n    return vec2(cos(ra) * uv.x - sin(ra) * uv.y, sin(ra) * uv.x + cos(ra) * uv.y);\n}\n\n\nfloat random(vec3 uv)\n{\n    return fract(sin(dot(uv, vec3(19.3424, 19.234234f, 19.42354234f))) * 434934.4234f);\n}\n\nfloat sampleSeamlessNoise(in vec3 p, in float freq)\n{\n    return random(vec3(mod(p.x, freq), mod(p.y, freq), mod(p.z, freq)));\n}\n\nfloat noise(in vec3 p, in float freq)\n{\n    p *= freq;\n    vec3 iuv = floor(p);\n    vec3 fuv = fract(p);\n    float a = sampleSeamlessNoise(iuv, freq);\n    float b = sampleSeamlessNoise(iuv + vec3(1.0f, 0.0f, 0.0f), freq);\n    float c = sampleSeamlessNoise(iuv + vec3(0.0f, 1.0f, 0.0f), freq);\n    float d = sampleSeamlessNoise(iuv + vec3(1.0f, 1.0f, 0.0f), freq);\n    \n    float a2 = sampleSeamlessNoise(iuv + vec3(0.0f, 0.0f, 1.0f), freq);\n    float b2 = sampleSeamlessNoise(iuv + vec3(1.0f, 0.0f, 1.0f), freq);\n    float c2 = sampleSeamlessNoise(iuv + vec3(0.0f, 1.0f, 1.0f), freq);\n    float d2 = sampleSeamlessNoise(iuv + vec3(1.0f, 1.0f, 1.0f), freq);\n    \n    vec3 u = fuv * fuv * fuv * (fuv *(fuv * 6.0f-15.0f)+ 10.0f); // w*w*w*(w*(w*6.0-15.0)+10.0);\n    \n    float ab = mix(a, b, u.x);\n    float cd = mix(c, d, u.x);\n    \n    float a2b2 = mix(a2, b2, u.x);\n    float c2d2 = mix(c2, d2, u.x);\n    \n    float abcd = mix(ab, cd, u.y);\n    float a2b2c2d2 = mix(a2b2, c2d2, u.y);\n    \n    return mix(abcd, a2b2c2d2, u.z);\n}\n\nvec3 date(sampler2D text, vec2 fragCoord, vec2 pos, float spacing, vec2 resolution)\n{\n    vec3 result = vec3(0.0f);\n    int textIds[10];\n    textIds[0] = 50;\n    textIds[1] = 48;\n    textIds[2] = 50;\n    textIds[3] = 51;\n    textIds[4] = 47;\n    textIds[5] = 48;\n    textIds[6] = 50;\n    textIds[7] = 47;\n    textIds[8] = 50;\n    textIds[9] = 51;\n    \n    float x = 0.0f;\n\n    for(int i =0; i < 10; ++i)\n    {\n        result += textSampler(text, fragCoord, textIds[i], vec2(x + pos.x, pos.y), 32.0f, resolution.xy);\n        x += resolution.x / spacing;\n    }\n    return result;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define CHUNKS 8.0\n\n\nfloat vhs(float v)\n{\n    return fract(sin(v * 33.342423f) * 4323493.99996f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 stripUv = floor(fragCoord / CHUNKS) * CHUNKS/iResolution.xy;\n   \n    // Time varying pixel color\n    float ystrips = vhs(stripUv.y + iTime * 0.01f);\n    float xstrips = vhs(stripUv.x + iTime * 0.01f);\n    \n    float randomStrips = smoothstep(0.92f, 1.0f, ystrips) * smoothstep(0.6f, 1.0f, xstrips);\n    \n    vec3 col = mix(Blur(iChannel0, fragCoord, iResolution.xy, 1.4f, 2).rgb + Blur(iChannel2, fragCoord, iResolution.xy, 1.2f, 2), \n                   vec3(1.0f), randomStrips)\n                   + noise(vec3(uv, iTime * 100.0f), 100.0f) * 0.05f;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}