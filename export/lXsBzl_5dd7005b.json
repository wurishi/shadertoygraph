{"ver":"0.1","info":{"id":"lXsBzl","date":"1728790488","viewed":42,"name":"Fractal vs Fractional (FBM)","username":"naphipps","description":"Exploring the fractal variant of FBM (technique with artifacts) vs the fractional variant of FBM (artifact-resistant technique, with what I call a fractional increment to offset which slice of noise for the octaves). Reset time for best results.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.shadertoy.com/view/XsX3zB\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n//https://www.shadertoy.com/view/XsX3zB\nfloat simplex3d(vec3 p) {\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n    float F3 = 1.0f / 3.0f;\n    float G3 = 1.0f / 6.0f;\n     \n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n\n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n\n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n\n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0));\n}\n\n\nfloat _frequency = 25.0; //usually 1\nfloat _amplitude = 1.0;\nfloat _lacunarity = 1.1; //usually 2\nfloat _persistence = 0.95; //usually 0.5\nfloat _fractional_increment = 0.19f; //arbitrary... 19's my fav number, so I usually go with 0.19\nint _octave_count = 8; //usually 3\n\nfloat Fractal(vec3 v) {\n    float result = 0.f;\n    float denom = 0.f;\n    float frequency = _frequency;\n    float amplitude = _amplitude;\n\n    for (int i = 0; i < _octave_count; i++) {\n        result += amplitude * simplex3d(v * frequency);\n        denom += amplitude;\n        frequency *= _lacunarity;\n        amplitude *= _persistence;\n    }\n\n    return result / denom;\n}\n\nfloat Fractional(vec3 v) {\n    float result = 0.f;\n    float denom = 0.f;\n    float frequency = _frequency;\n    float amplitude = _amplitude;\n\n    for (int i = 0; i < _octave_count; i++) {\n        result += amplitude * simplex3d(vec3(v.xy, v.z + float(i) * _fractional_increment) * frequency);\n        //result += amplitude * simplex3d((v + float(i) * _fractional_increment) * frequency);\n        denom += amplitude;\n        frequency *= _lacunarity;\n        amplitude *= _persistence;\n    }\n\n    return result / denom;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord;\n    p -= iResolution.xy / 2.0;\n    p /= max(iResolution.x, iResolution.y);\n    \n    vec3 v = vec3(p, iTime * 0.0035);\n    \n    float fractal = (Fractal(v) + 1.0) / 2.0;\n    \n    float fractional = (Fractional(v) + 1.0) / 2.0;\n    \n    float value = v.x < 0.1 ? fractal : fractional;\n    \n    fragColor = vec4(vec3(value), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}