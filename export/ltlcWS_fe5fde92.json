{"ver":"0.1","info":{"id":"ltlcWS","date":"1506428086","viewed":104,"name":"running man","username":"FisherWu","description":"running man","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["runningman"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfCircle(vec2 center, float radius, vec2 coord){\n    vec2 offset = coord - center;\n    return length(offset) - radius;\n}\n\nfloat sdfLine(vec2 p0, vec2 p1, float width, vec2 coord) {\n    vec2 dir0 = p1 - p0;\n    vec2 dir1 = coord - p0;\n    float h = clamp(dot(dir0, dir1)/dot(dir0, dir0), 0.0, 1.0);\n    return (length(dir1 - dir0 * h) - width * 0.5);\n}\n\nfloat sdfUnion( const float a, const float b ) {\n    return min(a, b);\n}\n\nfloat sdfDifference( const float a, const float b) {\n    return max(a, -b);\n}\n\nfloat sdfIntersection( const float a, const float b ) {\n    return max(a, b);\n}\n\nvec4 render(float d, vec4 color){\n    vec4 target;\n    float anti = fwidth(d);\n    float s = smoothstep(-anti, anti, d);\n    target = vec4(color.rgb, 1.0-s);\n    return target;\n}\n\nfloat drawRing(vec4 fragColor, vec2 fragCoord, vec2 center){\n    vec2 uv = fragCoord / iResolution.xy;\n    float maxRadius = min(iResolution.x, iResolution.y*0.8) / 2.0;\n    float ringRadius =  min(iResolution.x, iResolution.y*0.7) / 2.0;\n\tfloat d1 = sdfCircle(center, maxRadius, fragCoord);\n    float d2 = sdfCircle(center, ringRadius, fragCoord);\n    return sdfDifference(d1, d2);\n}\n\nfloat drawSupport(vec2 fragCoord, vec2 center){\n    float d1 = sdfLine(center, vec2(iResolution.x*0.3, 0.0), 5.0, fragCoord);\n    float d2 = sdfLine(center, vec2(iResolution.x*0.7, 0.0), 5.0, fragCoord);\n    return sdfUnion(d1, d2);\n}\n\nfloat drawSroll(vec2 fragCoord, vec2 center){\n    float pi = 3.1415926;\n    float maxRadius = min(iResolution.x, iResolution.y*0.8) / 2.0;\n    float radian = iTime * (pi/1.0);\n    vec2 offset = vec2(maxRadius*cos(radian), maxRadius*sin(radian));\n    float d1 = sdfLine(center-offset, center+offset, 0.1, fragCoord);\n    \n    vec2 offset2 = vec2(maxRadius*cos(radian+pi/3.0), maxRadius*sin(radian+pi/3.0));\n    float d2 = sdfLine(center-offset2, center+offset2, 0.1, fragCoord);\n    \n    vec2 offset3 = vec2(maxRadius*cos(radian+pi/1.5), maxRadius*sin(radian+pi/1.5));\n    float d3 = sdfLine(center-offset3, center+offset3, 0.1, fragCoord);\n    \n    float u1 = sdfUnion(d1, d2);\n    return sdfUnion(d3, u1);\n\n}\n\nfloat drawMouse(vec2 coord){\n\tfloat bodyUp = sdfCircle(vec2(iResolution.x/2.0-iResolution.y*0.025, iResolution.y*0.26), iResolution.y*0.035, coord);\n    float bodyDown = sdfCircle(vec2(iResolution.x/2.0, iResolution.y*0.2), iResolution.y*0.05, coord);\n    \n    float move = mod(iTime * 30.0, 8.0) * iResolution.x*0.002;\n    vec2 pointA = vec2(iResolution.x/2.0, iResolution.y*0.2);\n    vec2 pointB =  pointA + vec2(move, -iResolution.y*0.08);\n    vec2 pointC = pointA + vec2(-move, -iResolution.y*0.08);\n    float w = iResolution.y*0.01;\n\n    float lLeg = sdfLine(pointA, pointB, w, coord);\n    float rLeg = sdfLine(pointA, pointC, w, coord);\n\n    float target = sdfUnion(bodyUp, bodyDown);\n    target = sdfUnion(target, lLeg);\n    target = sdfUnion(target, rLeg);\n    return target;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 center = iResolution.xy * .5;\n    \n\tfloat d = drawRing(fragColor, fragCoord, center);    \n    vec4 layer0 = render(d, vec4(0, 1, 0, 1));\n    \n    d = drawSupport(fragCoord, center);\n    vec4 layer1 = render(d, vec4(1, 0, 0, 1));\n    \n    d = drawSroll(fragCoord, center);\n    vec4 layer2 = render(d, vec4(1, 1, 0, 1));\n    \n    d = drawMouse(fragCoord);\n    vec4 layer3 = render(d, vec4(0, 0, 1, 1));\n    \n    fragColor = vec4(0,0,0,1);\n    fragColor = mix(fragColor, layer0, layer0.a);\n    fragColor = mix(fragColor, layer1, layer1.a);\n    fragColor = mix(fragColor, layer2, layer2.a);\n    fragColor = mix(fragColor, layer3, layer3.a);\n\n\n}","name":"Image","description":"","type":"image"}]}