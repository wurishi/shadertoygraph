{"ver":"0.1","info":{"id":"MtKXWt","date":"1486562190","viewed":653,"name":"Voronoi Lava","username":"zackpudil","description":"f","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["f"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n) {\n  return fract(sin(n)*43578.5453);\n}\n\nvec2 hash(vec2 n) {\n  float m = hash(dot(n, vec2(12.23, 30.343)));\n  return vec2(hash(m + 2.34), hash(m + 93.34));\n}\n\nfloat noise(vec2 g) {\n  vec2 p = floor(g);\n  vec2 f = fract(g);\n  \n  f = f*f*(3.0 - 2.0*f);\n  float n = p.x + 57.0*p.y;\n  \n  float x = mix(hash(n), hash(n + 1.0), f.x);\n  float y = mix(hash(n + 57.0), hash(n + 58.0), f.x);\n  return mix(x, y, f.y);\n}\n\nfloat noise(float g) {\n  float p = floor(g);\n  float f = fract(g);\n  \n  f = f*f*(3.0 - 2.0*f);\n  return mix(hash(p), hash(p + 1.0), f);\n}\n\nfloat voronoi(vec2 x) {\n  vec2 p = floor(x);\n  vec2 f = fract(x);\n\n  vec2 res = vec2(8.0);\n\n  for(int i = -1; i <= 1; i++)\n  for(int j = -1; j <= 1; j++) {\n    vec2 g = vec2(float(i), float(j));\n    vec2 o = hash(p + g);\n    if(i == 0)\n      o = 0.5 + 0.5*sin(6.28138*o + 0.2*iTime);\n    \n    vec2 r = g + o - f;\n\n    float d = max(abs(r.x), abs(r.y));\n\n    if(d < res.x) {\n      res.y = res.x;\n      res.x = d;\n    } else if(d < res.y) {\n      res.y = d;\n    }\n  }\n\n  return res.y - res.x;\n}\n\nvec3 formula(vec2 p) {\n  p *= mat2(cos(iTime*0.1), sin(iTime*0.1), -sin(iTime*0.1), cos(iTime*0.1));\n  p += vec2(iTime*0.5, sin(iTime*0.7));\n  \n  float v = 0.0;\n  float a = 0.7, f = 1.0;\n\n  for(int i = 0; i < 4; i++) {\n    float v1 = voronoi(p*f + 5.0);\n    float v2 = 0.0;\n    \n    v1 = 1.0 - smoothstep(0.0, 0.4, v1);\n    v2 =  a*noise(v1*5.5 + 0.3);\n\n    v += v2;\n\n    f *= 1.6;\n    a *= 0.55;\n  }\n\n  return vec3(pow(v, 6.0), pow(v, 4.0), pow(v, 2.0));\n}\n\nvec3 grey = vec3(0.21, 0.72, 0.07);\n\nvec3 cube(vec3 p, vec3 n) {\n  vec3 m = pow(abs(n), vec3(10.0));\n  \n  vec3 x = formula(p.yz);\n  vec3 y = formula(p.xz);\n  vec3 z = formula(p.xy);\n  \n  return (m.x*x + m.y*y + m.z*z)/(m.x + m.y + m.z);\n}\n\nvec3 bump(vec2 p, float e) {\n  vec2 h = vec2(e, 0.0);\n  \n  vec3 g = grey*mat3(\n    formula(p + h) - formula(p - h),\n    formula(p + h.yx) - formula(p - h.yx),\n    -0.1/grey);\n  \n  return normalize(g);\n}\n  \nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n  \n  vec3 rd = normalize(vec3(p, 1.97));\n  vec3 sn = normalize(bump(p, 0.008));\n  vec3 re = reflect(rd, sn);\n  \n  vec3 col = vec3(0);\n  \n  vec3 mat = formula(p);\n  \n  col += pow(clamp(dot(-rd, re), 0.0, 1.0), 8.0);\n  col *= vec3(0.2, 0.5, 1.4)*mat.b;\n  \n  col += vec3(0.2, 1.0, 0.5)*smoothstep(0.0, 2.0, sin(mat.r*mat.b));\n\n  col = pow(col, vec3(1.0/2.2));\n  fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}