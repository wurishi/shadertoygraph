{"ver":"0.1","info":{"id":"NldyW4","date":"1659835202","viewed":176,"name":"voronoi clean edges","username":"Carandiru","description":"a shader technique to erase the voronoi borders cleanly from the resulting distance field.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["voronoi","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float s0 = textureLod(iChannel0, uv, 0.0f).r;\n\n    float s1 = 0.0f;\n    \n    s1 += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 0,-1)).r;\n    s1 += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 0, 1)).r;\n    s1 += textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1, 0)).r;\n    s1 += textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1, 0)).r;\n\n    s1 = s1 * (1.0f/4.0f);\n    \n    vec3 color = vec3(0);\n    \n    // s0 = s0 - abs(s1 - s0) -- remove edges -- only exagerated here to display edges.\n    color.r = s0 - abs(s1 - s0) * 100.0f * fract(iTime);\n    \n    // Output to screen\n    fragColor = vec4(color.rrr,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// iq - https://www.shadertoy.com/view/ldl3W8\nfloat voronoi(in vec2 uv)\n{\n    vec2 n = floor(uv);\n    vec2 f = fract(uv);\n    \n    float md = 99999999999.9f;\n    for( float j=-1.; j<=1.; ++j )\n    {\n        for( float i=-1.; i<=1.; ++i )\n        {\n            vec2 g = vec2(i,j);\n            vec2 o = vec2( hash( ivec2(n + g) ), hash( ivec2(n + g).yx ) );\n\t\n            vec2 r = g + o - f;\n            float d = dot(r,r);\n\n            if( d<md )\n            {\n                md = d;\n            }\n         }\n     }\n     \n     return sqrt(md);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    uv = uv * 2.0f - 1.0f;\n\n    float md = voronoi(uv * 3.0f);\n    \n\n    fragColor = vec4(md, 0.0, 0.0, 0.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define golden_ratio 1.61803398874989484820f\n\n// Very fast hash function - https://www.shadertoy.com/view/ftsfDf\nfloat hash(ivec2 p) {\n    ivec2 q = p * ivec2(1317301, 1712759) + p.yx;\n    return float((((q.x ^ q.y) * 3536471) & 0xFFFF)) * 0.00001526;\n}","name":"Common","description":"","type":"common"}]}