{"ver":"0.1","info":{"id":"Wd23RG","date":"1549198295","viewed":243,"name":"My first ray marching thingy","username":"Kushulain","description":"ray marching lines with basic fractal https://www.shadertoy.com/view/Mss3Wf","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","ray","marching","dfdx","dfdy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define steps 10\nvec3 ro;\nfloat dist = 1000.0;\n\nmat2 rz2(float a){float c=cos(a),s=sin(a);return mat2(c,s,-s,c);}\n\nfloat rayDist = 1000.0;\nvec3 rayColor = vec3(0.0,0.0,0.0);\n\n\nfloat sphere(vec3 ray,vec3 pos, float radius)\n{\n    return length(ray-pos) - radius;\n}\n\nfloat cube(vec3 ray, vec3 pos, float size)\n{\n    ray = abs(ray-pos) - size;\n    return max(max(ray.x,ray.y),ray.z);\n}\n\nfloat line(vec3 ray, vec3 pos, float size)\n{\n    ray = abs(ray-pos) - size;\n    return max(ray.x,ray.y);\n}\n\nvec3 FractalSpace(vec3 pos)\n{\n    float height = mod(pos.z * 10.0,10.0);\n    float s=0.3;\n\tfor(int i=0;i<steps;i++){\n\t\tpos=abs(pos)-s;\n        pos.xy *= rz2(2.8+iTime*0.1);\n        pos.xz *= rz2(2.8+iTime*0.23);\n\t\ts=s/(pow(sin(2.8*0.2)*0.5+0.5,2.0)*2.5);\n        //if (float(i) > height)\n        //    break;\n\t}\n    \n    return pos;\n}\n\nfloat map(vec3 pos)\n{\n    \n    pos = FractalSpace(pos);\n    \n    rayDist = line(pos,vec3(0.015),0.01);\n    rayDist = max(rayDist,sphere(pos,vec3(0.1),0.2));\n    //rayDist = min(rayDist,sphere(pos,vec3(0.4),0.1));\n    return rayDist;\n}\n\nvec4 GetSampleColor(vec2 uv)\n{\n    vec3 ro = vec3(0.,0.,-4.);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1.));\n    \n    ro.xz *= rz2(iTime*.1 + 3.1*iMouse.x / iResolution.y);\n    ro.yz *= rz2(iTime*.1 + 3.1*iMouse.y / iResolution.y);\n    rd.xz *= rz2(iTime*.1 + 3.1*iMouse.x / iResolution.y);\n    rd.yz *= rz2(iTime*.1 + 3.1*iMouse.y / iResolution.y);\n    \n    vec3 mp=ro+rd;\n    \n    int i;\n    for (i=0;i<50;i++){\n        map(mp);\n        if(abs(rayDist)<.0001)\n            break;\n        mp+=rd*rayDist;\n    }\n    \n    float ma=1.-float(i)/50.;\n    \n    return vec4(mp,ma);\n}\n\nvec3 GetNormal(vec3 pos, float posDist)\n{\n    vec2 e = vec2(0.0002,0.) * length(pos-ro);\n    return normalize(vec3(map(pos+e.xyy) - posDist, map(pos+e.yxy) - posDist, map(pos+e.yyx) - posDist));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*0.5)/iResolution.yy;\n\n    \n    vec4 pos = GetSampleColor(uv);\n    vec3 n1 = GetNormal(pos.xyz,rayDist);\n    vec4 posX = GetSampleColor(vec2(uv.x+dFdx(uv).x*0.8,uv.y));\n    vec3 n2 = GetNormal(posX.xyz,rayDist);\n    vec4 posY = GetSampleColor(vec2(uv.x,uv.y+dFdy(uv).y*0.8));\n    vec3 n3 = GetNormal(posY.xyz,rayDist);\n    \n    //vec3 normal = normalize(cross(normalize(posY.xyz-pos.xyz),normalize(posX.xyz-pos.xyz)));\n    vec3 normal = normalize(n1+n2+n3);\n    \n    //cam direction (screen space)\n    vec3 cp = vec3(0.,0.,-1);\n    \n    vec3 lightPOV = vec3(0.707);\n    lightPOV.xy *= rz2(iTime*1.3);\n    lightPOV.xz *= rz2(iTime*2.);\n    \n    vec3 lightPOV2 = vec3(0.707);\n    lightPOV2.xy *= rz2(iTime*0.3);\n    lightPOV2.xz *= rz2(iTime*1.);\n    \n    //diffuse\n    vec3 finalCol = max(0.,dot(normal,lightPOV)) * vec3(0.,.5,1.);\n    finalCol +=  max(0.,dot(normal,lightPOV2)) * vec3(1.,.5,0.);\n    \n    //specular\n    //finalCol += pow(max(0.,dot(normal,normalize(lightPOV+cp))),20.) * vec3(0.,.5,.8);\n    //finalCol += pow(max(0.,dot(normal,normalize(lightPOV2+cp))),20.) * vec3(.8,.5,0.);\n    \n    float intensity = (pos.w + posX.w + posY.w)*0.3333;\n    finalCol *= intensity;\n    finalCol += intensity * 0.1;\n    \n    fragColor = vec4(finalCol,1.0);\n}","name":"Image","description":"","type":"image"}]}