{"ver":"0.1","info":{"id":"NsyGRV","date":"1631801166","viewed":69,"name":"Cool Shapes","username":"cam93","description":"cool shapes moving around, with changing colours.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["trianglecameron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Triangle{\nvec2 A;\nvec2 B;\nvec2 C;\n};\n\nstruct Square{\nvec2 _A;\nvec2 _B;\nvec2 _C;\nvec2 _D;\n};\n\nfloat _signum(vec2 _a, vec2 _b, vec2 _c, vec2 _d){\n//calculate vectors AB and AC from points abc\nvec2 _AB = _b-_a;\nvec2 _AC = _c-_a;\nvec2 _AD = _d-_a;\n\nvec3 _AB_3D = vec3(_AB, 0.0);\nvec3 _AC_3D = vec3(_AC, 0.0);\nvec3 _AD_3D = vec3(_AD, 0.0);\n\n//calculate cross product\nvec3 _crossProduct = cross(_AB_3D, _AD_3D);\n\nreturn sign(_crossProduct.z);\n}\n\nfloat signum(vec2 a, vec2 b, vec2 c){\n//calculate vectors AB and AC from points abc\nvec2 AB = b-a;\nvec2 AC = c-a;\n\nvec3 AB_3D = vec3(AB, 0.0);\nvec3 AC_3D = vec3(AC, 0.0);\n\n//calculate cross product\nvec3 crossProduct = cross(AB_3D, AC_3D);\n\nreturn sign(crossProduct.z);\n}\n\nbool isInSquare(in vec2 point, in Square sq){\n\nfloat d1 = signum(sq._A, sq._B, point);\nfloat d2 = signum(sq._B, sq._C, point);\nfloat d3 = signum(sq._C, sq._D, point);\nfloat d4 = signum(sq._D, sq._A, point);\n\nif(((d1>0.0)&&(d2>0.0)&&(d3>0.0)&&(d4>0.0))||((d1<0.0)&&(d2<0.0)&&(d3<0.0)&&(d4<0.0)))\nreturn true;\nelse\nreturn false;\n}\n\nbool isInTriangle(in vec2 point, in Triangle tr){\n\nfloat d1 = signum(tr.A, tr.B, point);\nfloat d2 = signum(tr.B, tr.C, point);\nfloat d3 = signum(tr.C, tr.A, point);\n\nif(((d1>0.0)&&(d2>0.0)&&(d3>0.0))||((d1<0.0)&&(d2<0.0)&&(d3<0.0)))\nreturn true;\nelse\nreturn false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float tr_disp_x = sin(iTime);\n        float sq_disp_y = sin(-iTime);\n    \n    Square sq;\n    sq._A = vec2(0.5,0.7 + sq_disp_y);\n    sq._B = vec2(1.0,0.5 + sq_disp_y);\n    sq._C = vec2(0.5,1.0 + sq_disp_y);\n    sq._D = vec2(0.0,0.5 + sq_disp_y);\n    \n    Triangle tr;\n    tr.A = vec2(-0.5 + tr_disp_x, 1.0);\n    tr.B = vec2(1.5 + tr_disp_x, 1.0);\n    tr.C = vec2(0.0 + tr_disp_x, 0.0);\n    \n    vec3 col = vec3(0.0);\n         \n    if(isInTriangle(uv, tr)){\n    col = 0.7 * 0.5/cos(iTime*uv.xyx-vec3(1,2,4)); \n    }\n     if(isInSquare(uv, sq)){\n    col = 0.6 * 0.4/cos((iTime*iTime)*uv.xyx-vec3(0,3,5)); \n    }\n    \n        vec3 _col = vec3(cos(fragCoord.x), cos(fragCoord.y), sin(fragCoord.x));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n\n}","name":"Image","description":"","type":"image"}]}