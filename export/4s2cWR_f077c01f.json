{"ver":"0.1","info":{"id":"4s2cWR","date":"1491606022","viewed":336,"name":"Per-Pixel Randomness","username":"imallett","description":"Demonstration of simple per-pixel white noise. The distribution is not particularly great, but it's simple and fast.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//RNG state\nuvec2 rvec;\nuint _george_marsaglia() {\n\trvec.x = 36969u * (rvec.x & 65535u) + (rvec.x >> 16u);\n\trvec.y = 18000u * (rvec.y & 65535u) + (rvec.y >> 16u);\n\treturn (rvec.x << 16u) + rvec.y;\n}\n\n//Random Functions\nfloat rand_float() {\n\treturn float(_george_marsaglia()) / float(0xFFFFFFFFu);\n}\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n\t//Initialize RNG offset parameter.  This should be as random as possible,\n\t//\ttaking into account time and possibly screen position.  You can use a\n\t//\tuniform or SSBO to save its state across frames.  Something like:\n\t//\t\tstatic Vec2 offset = Vec2(0,0); //or maybe a random value\n\t//\t\t//Then, each frame, do these lines:\n\t//\t\toffset.x = 71.000*fract(offset.x+1.2);\n\t//\t\toffset.y = 12.444*fract(offset.y+4.9);\n\t//\tFor now, just make it use the time:\n\tvec2 offset = vec2(iTime,0.0);\n\n\t//Initialize RNG\n\trvec = uvec2(397.6432*(coord.xy+offset));\n\trvec ^= uvec2(32.9875*(coord.yx+offset));\n\n\t//Return a random color\n\tcolor = vec4(vec3(\n\t\trand_float(),\n\t\trand_float(),\n\t\trand_float()\n\t),1.0);\n}","name":"Image","description":"","type":"image"}]}