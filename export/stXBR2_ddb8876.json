{"ver":"0.1","info":{"id":"stXBR2","date":"1651114885","viewed":186,"name":"Raymarcher Golf, 132/90 Chars","username":"TrueBoolean","description":"The smallest raymarcher. Shows the upper right of a cylindrical tunnel (other march golfs were also not centered).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","simple","raymarcher","mini","minimalist","golf","shortest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nSmallest 3D Fixed-Step Raymarchers (WebGL2)\nThis is the upper-right of a 3D tunnel (centering the frame costs many chars, and other raymarch golfs also didn't center it)\nRaymarching is done all within a single for-loop statement, and the image will scale to any resolution.\nThe advantage of fixed-step for the purpose of creating the smallest raymarcher is that it takes less chars than even the smallest SDFs.\nFor instance the smallest golf of an SDF spherefield or tunnel following the same constraints, would be well over 100 chars.\nUncomment the animated version below to see what it would look like if the frame was centered and animation was added.\n*/\n\n//90 chars cylinder tunnel\n/*\nvoid mainImage(out vec4 C, vec2 U){\n    for(C = vec4(1); 1.-C.z < .2*iResolution.y/length(U); C -= .1);\n}\n*/\n\n// 132 Chars Animated and Centered 3D Tunnel\n///*\nvoid mainImage(out vec4 C, vec2 U){\n    vec2 R = iResolution.xy;\n    U = (U+U-R)/R.y;\n    for(C = vec4(1.-sin(iTime)); C.z > 0. && 1.-C.z < .2/length(U); C -= .1);\n}\n//*/\n\n//84 Chars to raymarch a ceiling, is basically a 2D marcher rather than a 3d marcher because it never checks U.x\n//As such it is not 1st place in the golfing\n/*\nvoid mainImage(out vec4 C, vec2 U){\n    for(C = vec4(1); 1.-C.z < .2*iResolution.y/U.y; C -= .1);\n}\n*/","name":"Image","description":"","type":"image"}]}