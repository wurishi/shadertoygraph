{"ver":"0.1","info":{"id":"MdVBWD","date":"1528938997","viewed":286,"name":"jiggle cube","username":"flimshaw","description":"more iq forking fun","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["sdfcubenormalsphonglighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define STEPS 32\n\nconst float EPSILON = .01;\n\nfloat scene(vec3 p) {\n    //p.z -= 2.;\n    //float s = noise(2.*p+vec3(-5.,-1., 1.)*iTime*.2) - .35+(sin(iTime)+1.)*.05;\n\n    //s += (s2 - .5)*.01;\n    //p = fract(p)*2.-1.;\n    vec4 p1 = rotateY(-iTime*.2) * vec4(p.yxz, 1.);\n    float s1 = noise(3.23*p1.rgb+iTime);\n    float s2 = noise(8.23*p1.rgb+-iTime*1.4);\n    float s3 = noise(83.23*p1.rgb);\n    float s4 = noise(183.23*p1.rgb);\n    s1 = (s1-.5)*.05;\n    s2 = (s2-.5)*.01;\n    s3 = (s3-.5)*.0025;\n    s4 = (s4-.5)*.00125;\n    float b = sdBox(s1+s2+s3+s4+p1.rgb, vec3(.5));\n    //p.z += iTime;\n    return b;\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        scene(vec3(p.x + EPSILON, p.y, p.z)) - scene(vec3(p.x - EPSILON, p.y, p.z)),\n        scene(vec3(p.x, p.y + EPSILON, p.z)) - scene(vec3(p.x, p.y - EPSILON, p.z)),\n        scene(vec3(p.x, p.y, p.z  + EPSILON)) - scene(vec3(p.x, p.y, p.z - EPSILON))\n        ));\n}\n\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n * \n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n * \n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.85 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(4.0,\n                          2.0,\n                          -8.0);\n    vec3 light1Intensity = vec3(.34, 0.2, 0.2);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(-2.0,\n                          10.0,\n                          2.0);\n    vec3 light2Intensity = vec3(0.2, 0.2, .4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);    \n    return color;\n}\n\n\nfloat trace(vec3 o, vec3 r) {\n    float t = 0.0;\n    int i = 1;\n    for(i = 1; i < STEPS; ++i) {\n       vec3 p = o + r * t;\n       float d = scene(p);\n       t += d * .5;\n        if(d > 2.) break;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0));\n    \n    vec2 m = (iMouse.xy / iResolution.xy) - .5;\n    \n    //m *= iMouse.z;\n    \n    vec3 o = vec3(m, -1.25);\n    \n    float d = trace(o, r);\n    \n    vec3 p = o + r*d;\n    \n    //vec3 nor = estimateNormal(p);\n    \n    //vec3 c = 1.0 / vec3(1.0 + d * d * .3);\n    \n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(1., 1., 1.);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 400.;\n    \n    vec3 color = phongIllumination(K_a, K_d, K_s, shininess, p, o);\n    \n    //fragColor = vec4((1. - c) * vec3(1.3,0.4,0.5), 1.0);\n    fragColor = vec4(color * (2.4-d), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n\nfloat hashn(vec3 p)  // replace this by something better\n{\n    p  = fract( p*0.3183099+.1 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n\t\n    return mix(mix(mix( hashn(p+vec3(0,0,0)), \n                        hashn(p+vec3(1,0,0)),f.x),\n                   mix( hashn(p+vec3(0,1,0)), \n                        hashn(p+vec3(1,1,0)),f.x),f.y),\n               mix(mix( hashn(p+vec3(0,0,1)), \n                        hashn(p+vec3(1,0,1)),f.x),\n                   mix( hashn(p+vec3(0,1,1)), \n                        hashn(p+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\nfloat hash1( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash3( uint n ) \n{\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    uvec3 k = n * uvec3(n,n*16807U,n*48271U);\n    return vec3( k & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n// Sphere\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n// Box - unsigned - exact\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n// Round Box - unsigned - exact\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\n\n// exponential smooth min (k = 32);\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n// polynomial smooth min (k = 0.1);\nfloat smin2( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n// power smooth min (k = 8);\nfloat smin3( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\n\n// Box - signed - exact\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// Torus - signed - exact\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n// Cylinder - signed - exact\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n// Cone - signed - exact\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n// Plane - signed - exact\nfloat sdPlane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n// Hexagonal Prism - signed - exact\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\n// Triangular Prism - signed - exact\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\n// Capsule / Line - signed - exact\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n// Capped cylinder - signed - exact\nfloat sdCappedCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n/**\n * Return a transformation matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction.\n */\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nvec3 opScale( vec3 p, float s )\n{\n    return (p/s);\n}\n\nmat4 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n\n    return mat4(\n        vec4(c, 0, s, 0),\n        vec4(0, 1, 0, 0),\n        vec4(-s, 0, c, 0),\n        vec4(0, 0, 0, 1)\n    );\n}\n\nvec3 opTwist( vec3 p )\n{\n    float c = cos(20.0*p.y);\n    float s = sin(20.0*p.y);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xz,p.y);\n    return q;\n}\n\n// Capped Cone - signed - bound\nfloat sdCappedCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 v = vec2( c.z*c.y/c.x, -c.z );\n    vec2 w = v - q;\n    vec2 vv = vec2( dot(v,v), v.x*v.x );\n    vec2 qv = vec2( dot(v,w), v.x*w.x );\n    vec2 d = max(qv,0.0)*qv/vv;\n    return sqrt( dot(w,w) - max(d.x,d.y) ) * sign(max(q.y*v.x-q.x*v.y,w.y));\n}\n\n// Ellipsoid - signed - bound\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\n\n\n//Union\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\n//Substraction\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n//Intersection\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nconst float coeiff = 0.25;\nconst vec3 totalSkyLight = vec3(0.3, 0.5, 1.0);\n\nvec3 mie(float dist, vec3 sunL){\n    return max(exp(-pow(dist, 0.25)) * sunL - 0.4, 0.0);\n}\n\nvec3 getSky(vec2 uv){\n\t\n\tvec2 sunPos = vec2(0.5, .5);\n    \n    float sunDistance = distance(uv, clamp(sunPos, -1.0, 1.0));\n\t\n\tfloat scatterMult = clamp(sunDistance, 0.0, 1.0);\n\tfloat sun = clamp(1.0 - smoothstep(0.01, 0.011, scatterMult), 0.0, 1.0);\n\t\n\tfloat dist = uv.y;\n\tdist = (coeiff * mix(scatterMult, 1.0, dist)) / dist;\n    \n    vec3 mieScatter = mie(sunDistance, vec3(1.0));\n\t\n\tvec3 color = dist * totalSkyLight;\n    \n    color = max(color, 0.0);\n    \n\tcolor = max(mix(pow(color, 1.0 - color),\n\tcolor / (2.0 * color + 0.5 - color),\n\tclamp(sunPos.y * 2.0, 0.0, 1.0)),0.0)\n\t+ sun + mieScatter;\n\t\n\tcolor *=  (pow(1.0 - scatterMult, 10.0) * 10.0) + 1.0;\n\t\n\tfloat underscatter = distance(sunPos.y * 0.5 + 0.5, 1.0);\n\t\n\tcolor = mix(color, vec3(0.0), clamp(underscatter, 0.0, 1.0));\n\t\n\treturn color;\t\n}","name":"Common","description":"","type":"common"}]}