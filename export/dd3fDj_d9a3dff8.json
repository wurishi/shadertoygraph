{"ver":"0.1","info":{"id":"dd3fDj","date":"1697642150","viewed":147,"name":"raymarch voxels","username":"jt","description":"DDA plugin for the ray-marching algorithm: reset step to boundary on voxel change.\nThis handles sdf discontinuities between voxels, so random per voxel shapes can be used\n(and empty voxels skipped efficiently).\nThanks to Shane for suggesting this method!","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","voxels","sdf","random","distance","field","dda","hybrid","skip","signed","indexed","discontinuous","plugin","sparse","robust"],"hasliked":0,"parentid":"fsVGD1","parentname":"jt's raymarching template"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dd3fDj raymarch voxels, 2023 by jt\n// based on https://www.shadertoy.com/view/fsVGD1 jt's raymarching template\n\n// DDA-raymarch hybrid: The classic ray-marching algorithm,\n// only constrained step to reset/snap to boundary on voxel change.\n// This handles sdf discontinuities between voxels,\n// so random per voxel shapes can be used\n// (and empty voxels skipped efficiently).\n// The relevant code consists of just a few lines in the trace function,\n// at the comment \"constrain step to voxels\".\n// No more extra DDA required. Thanks to Shane for suggesting this method!\n\n// See also https://www.shadertoy.com/view/DdBfzt Cell-By-Cell Raymarching by Shane\n// which I tried to understand until I gave up and wrote this from scratch ;-)\n\n// tags: 3d, raymarch, voxels, sdf, random, distance, field, dda, hybrid, skip, signed, indexed, discontinuous, plugin, sparse, robust\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\nfloat hash13(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.0;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat cylinder(vec3 p, vec2 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nfloat map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    /*\n    if((v.z == 0) && ((v.x^v.y)&4)!=0)\n        //return length(l - 0.1);\n        if(hash13(vec3(v)) < 0.5)\n            return cylinder(l-0.5, vec2(0.5,0.5));\n        else\n            //return box(l-0.5, vec3(0.4));\n            return sphere(l-0.5, 0.5);\n            */\n    if(v.z > -2 && v.z < 2 && ((v.x^v.y)&4)!=0)\n    {\n        float h = hash13(vec3(v));\n        if(h < 0.5)\n            if(h < 0.25)\n                return cylinder(l-0.5, vec2(0.5,0.5));\n            else\n                //return box(l-0.5, vec3(0.4));\n                return sphere(l-0.5, 0.5);\n    }\n\n    return DIST_MAX; // signal to skip this voxel\n}\n#ifdef HIGH_QUALITY\nfloat map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    float d = DIST_MAX;\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n                d = min(d, map(ivec3(floor(p))+o, fract(p)-vec3(o)));\n    return d;\n}\n#else\nfloat map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h) +\n                     k.yyx*map(p + k.yyx*h) +\n                     k.yxy*map(p + k.yxy*h) +\n                     k.xxx*map(p + k.xxx*h));\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        float h = map(p);\n        if(h < EPSILON)\n            return t;\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h = min(h, skip); // constrain step to at most next voxel to handle sdf discontinuities between voxels\n        }\n\n        t += h;\n    }\n\n    return t; // stop on running out of iterations\n    //return t1; // pass on running out of iterations\n}\n/*\n// optimized by spalmer, performs snap calculations only when voxel position changed\nfloat trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (spalmer)\n{\n    float t, i, skip;\n    // cc = cell corner ray is heading toward\n    // dr = helper for distances to voxel boundary\n    // co = old cell, set to mismatch first step on purpose\n    vec3 cc = step(vec3(0), rd), dr = 1./rd, co = vec3(3e38); \n    for (t = t0, i = 0.; t < t1 && i < float(ITER_MAX); ++i) // safe finite loop\n    {\n        vec3 p = ro + rd * t;\n        float h = map(p);\n        if (abs(h) < EPSILON)\n            break;\n        // constrain step to voxels (thanks to Shane for the idea!)\n        vec3 cn = floor(p);\n        if (co != cn)\n        {\n            co = cn; // p - cn = fract(p)\n            vec3 sd = (cc + cn - p) * dr; // distances to voxel sides / walls \n            // component true if corresponding wall is nearest (at most one component true) NOTE: step, min idea: iq\n            // select nearest component, constrain by distance to next voxel\n            skip = dot(sd, step(sd, min(sd.yzx, sd.zxy))) + EPSILON;\n            // constrains step to at most next voxel to handle sdf discontinuities between voxels\n            // EPSILON ensures it crosses over boundary slightly\n        }\n        h = min(h, skip);\n        skip -= h;\n        t += h;\n    }\n    return t;\n}\n*/\n/*\nfloat least(vec3 sd)\n{\n    return dot(sd, step(sd.xyz, min(sd.yzx, sd.zxy))); // returns smallest component of vector\n}\n\n// my (jt) optimization attempt - work in progress\nfloat trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    vec3 p = ro + rd * t0;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        float h = map(p);\n        if(h < EPSILON)\n            return t;\n\n        vec3 q = ro + rd * (t + h); // next position\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        if(floor(p) != floor(q)) // NOTE: assuming unit grid\n        {\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            h = least((sgn(rd)*0.5 - (fract(p) - 0.5))/rd) + EPSILON; // constrain step to at most next voxel\n        }\n\n        t += h;\n        p = ro + rd * t;\n    }\n\n    return t; // stop on running out of iterations\n    //return t1; // pass on running out of iterations\n}\n*/\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1) < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    //return vec3(1.0); // TODO\n    return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-7.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 1.0;\n\n    vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 color = vec3(1);\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}