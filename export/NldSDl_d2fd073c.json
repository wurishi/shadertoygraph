{"ver":"0.1","info":{"id":"NldSDl","date":"1668709348","viewed":118,"name":"Fork Grinning F sleeplessm 792","username":"sleeplessmonk","description":"added symmetry, color palette and audioreactivity","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["2d","fractal","julia","fragmentarium"],"hasliked":0,"parentid":"Msf3WS","parentname":"Grinning Fractal"},"renderpass":[{"inputs":[{"id":"Xd33WM","filepath":"https://soundcloud.com/mindfulnomads/internal-strife","previewfilepath":"https://soundcloud.com/mindfulnomads/internal-strife","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[],"code":"// Helper function to apply neon psychedelic color palette\nvec3 NeonPsychedelicColor(float t) {\n    return vec3(\n        0.5 + 0.5 * sin(6.0 * t + 1.0),\n        0.4 + 0.5 * sin(66.0 * t + 2.4),\n        0.5 + 0.5 * sin(6.0 * t + 1.7)\n    );\n}\n\n// Modify the fractal function to be audioreactive\nvec3 audioreactiveFractal(vec2 c, vec2 c2, float audioInput) {\n    vec2 z = c;\n    float ci = 0.0;\n    float mean = 0.0;\n\n    for (int i = 0; i < 64; i++) {\n        vec2 a = vec2(z.x, abs(z.y));\n        float b = atan(a.y, a.x);\n        \n        if (b > 0.0) b -= 6.283185307179586;\n        \n        // Use audioInput to modulate the fractal equation\n        z = vec2(log(length(a + audioInput * 0.05)), b) + c2;\n        \n        if (i > 5) mean += length(z);\n    }\n\n    mean /= float(62);\n    ci = 1.0 - log2(.05 * log2(mean / 1.0));\n\n    return NeonPsychedelicColor(ci);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    float time = iTime;\n    \n    // Sample audio input from iChannel0\n    float audioInput = texture(iChannel0, vec2(0.5, 0.5)).r * 2.0 - 1.0;\n\n    uv *= 2.0; // Scale the UV coordinates for symmetry\n    float angle = atan(uv.y, uv.x); // Calculate angle\n    float radius = length(uv); // Calculate radius\n    \n    // Apply symmetry to the angle\n    angle = mod(angle + time * 0.2, 2.0 * 3.14159265359);\n    \n    // Convert back to Cartesian coordinates\n    uv = radius * vec2(cos(angle), sin(angle));\n\n    // Apply rotation to uv based on time\n    float rot = sin(time * 0.025) * 4.7;\n    uv = vec2(uv.x * cos(rot) - uv.y * sin(rot), uv.x * sin(rot) + uv.y * cos(rot));\n\n    // Apply julia set parameters\n    float juliax = sin(time) * 0.021 + 0.12;\n    float juliay = cos(time * 0.23) * 0.2 + 5.7;\n    \n    // Calculate the final color using the audioreactive fractal function\n    fragColor = vec4(audioreactiveFractal(uv, vec2(juliax, juliay), audioInput), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}