{"ver":"0.1","info":{"id":"4sSfDy","date":"1501855136","viewed":169,"name":"Procedural Texture Brick test","username":"rammoskar","description":"Trying to make a brick like texture","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","texture","brick","bricks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( in vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat noiseOctave(in vec2 p, int octaves, float persistence)\n{\n\tfloat n = 0.;\n\tfloat amplitude = 1.;\n\tfloat frequency = 1.;\n\tfloat maxValue = 0.;\n\n\tfor(int i = 0; i < octaves; i++)\n\t{\n\t\tn += noise((p+float(i)) * frequency) * amplitude;\n\t\tmaxValue += amplitude;\n\t\tamplitude *= persistence;\n\t\tfrequency *= 2.0;\n\t}\n\treturn n / maxValue; \n}\n\nfloat rect(vec2 p, vec2 size)\n{\n\treturn max(abs(p.x) - size.x, abs(p.y) - size.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;  \n    \n    float x = mod(uv.x * 10.0, 1.0) - 0.5;\n    float x2 = mod(uv.x * 10.0 + 0.5, 1.0) - 0.5;\n\tfloat y = mod((uv.y + 0.05) * 10.0, 1.0) - 0.5;\n    float part = floor((uv.y + 0.00) * 10.0);\n    \n    float n = noiseOctave(uv * (10. + part), 10, 0.7);\n    float n2 = noiseOctave(uv * 20., 10, 0.7);\n    float ns = (n - 0.5) * 2.0;    \n     \n    float dis1 = rect(vec2(x, uv.y), vec2(0.01, 999.0));\n    if (mod(part, 2.0) == 0.0) {\n    \tdis1= 99.;\n    }\n    float dis2 = rect(vec2(x2, uv.y), vec2(0.01, 999.0));\n    if (mod(part, 2.0) == 1.0) {\n    \tdis2= 99.;\n    }\n    float dis3 = rect(vec2(uv.x, y), vec2(999.0, 0.05));\n    float dis = min(dis1, dis2);\n    dis = min(dis, dis3);\n    \n    vec3 white = vec3(1.0)  * (0.7 + 0.3* n2);\n    vec3 red = vec3(1.0, 0.6, 0.35) * (0.85 + 0.15 * n);\n    \n    vec3 color = mix(white, red, clamp((dis + 0.51) * 1.75, 0.0, 1.0));\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}