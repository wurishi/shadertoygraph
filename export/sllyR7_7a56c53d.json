{"ver":"0.1","info":{"id":"sllyR7","date":"1652405272","viewed":104,"name":"Spiral Animation","username":"jiayueWang","description":"   ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float thickness = 0.05;\nfloat width = 1.0;\nfloat speed = 1.0;\n\nfloat horizontalTranslate =  0.0;\nfloat verticalTranslate = 0.0;\n\nvec3 c1 = vec3 (58.0/256.0, 56.0/256.0, 69.0/256.0);\nvec3 c2 = vec3 (247.0/256.0, 204.0/256.0, 172.0/256.0);\n\n\n// anti aliasing:\n// multi-sampled anti-aliasing\n// stratified sampling\n// play with color\n// export\n\nfloat v1_length = 1.0;\nfloat v2_length = 2.0;\n\nfloat two_pi = 6.283185307;\n\n// draw line segment from A to B\nfloat segment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.5*r, d);\n}\n\nfloat line(vec2 P, vec2 A, vec2 B, float r)\n{\n\tvec2 g = B - A;\n    float d = abs(dot(normalize(vec2(g.y, -g.x)), P - A));\n\treturn smoothstep(r, 0.5*r, d);\n}\n\nvec2 inverse_mobius(vec2 cur_uv)\n{\n    float cur_x = cur_uv.x;\n    float cur_y = cur_uv.y;\n    float cur_x2 = cur_x * cur_x;\n    float cur_y2 = cur_y * cur_y;\n    float divisor = (1.0 + cur_x) * (1.0 + cur_x) + cur_y2;\n    vec2 result;\n    result.x = (cur_x + cur_x2 + cur_y2) / divisor;\n    result.y = (cur_y) / divisor;\n    return result;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy + vec2(-0.55,-0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 3.0;\n    \n    //Inverse Mobius (take f(z) = z / (1 - z) here)\n    uv = inverse_mobius(uv);\n    \n    //Convert to spiral\n    float py = atan( uv.y, uv.x );\n    float px = log( length( uv ) );\n    uv = vec2( px, py );\n    \n    //Set animation\n    uv += iTime * vec2(1,1);\n    \n    vec3 color = c1;\n    \n    vec2 vec_sum = vec2(v1_length, v2_length);\n    \n    //Set scale\n    float scale = (length(vec_sum) / two_pi);\n    uv *= scale;\n    \n    //Set rotation\n    float rotation = acos(dot(vec2(0.0, 1.0), vec_sum) / length(vec_sum));\n    uv *= mat2(cos(rotation), sin(rotation), -sin(rotation), cos(rotation));\n    \n    // Draw the vector sum\n    //float intensity = segment(uv, vec2(0.0), vec_sum, thickness);\n    //color = mix(color, vec3(0.0), intensity);\n    \n    //Draw Vertical lines    \n    float cx = mod(uv.x, width) / width;\n    \n    if (cx < 0.5) {\n        color = mix(c1, c2, cx * 3.0);\n    }\n    else {\n        color = mix(c2, c1, (cx - 0.5) * 3.0);\n    }\n    \n    //color = mix( color, c2, smoothstep( cx, 0.5, 0.1 ) );\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}