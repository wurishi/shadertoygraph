{"ver":"0.1","info":{"id":"ftyBWw","date":"1664557805","viewed":64,"name":"MandelBrot Zooming","username":"TamasPeti","description":"Zooming into a self-similarity mandelbrot point","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 square(vec2 c){\n    return vec2(c.x * c.x - c.y * c.y, 2.0 * c.x * c.y);\n}\n\nvoid mainImage( out vec4 fs_out_col, in vec2 fragCoord )\n{\n    vec2 pos = ((fragCoord /(iResolution.y)) * 2.0 - 1.0); \n    vec2 uv = pos * 3.;\n    vec3 col = vec3(0);\n    vec2 c = uv / pow(1.5, iTime) - vec2(0.15294, 1.0397); //Itt történik a zoom. Hatványozást használtam, hogy egyenletes legyen a zoom sebessége.\n    vec2 z = vec2(0);\n    for(int i = 0; i < 500; ++i){\n        z = square(z) + c;\n\n        if(length(z) > 2.0){\n            col = 0.5 + 0.5*cos(iTime+pos.xyx+vec3(0,2,4));\n            break;\n        }\n    }\n    fs_out_col = vec4(col,1.0);      \n}","name":"Image","description":"","type":"image"}]}