{"ver":"0.1","info":{"id":"sllSWr","date":"1625507400","viewed":141,"name":"Swimming pool light via Voronoi","username":"JeanPaulSoftware","description":"Attempting to get something similar to the light patterns on the floor of a swimming pool by working out the voronoi map of a texture. Intended to be used to cheat lighting on an underwater model.  Any tips on improvements welcome!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n#define TWO_PI 6.28318530718\n\nvec2 random2(vec2 p) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*59382.8425);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 10.0;\n    \n    vec3 colour = vec3(0.0);\n    \n    vec2 uvFloor = floor(uv);\n    vec2 uvFract = fract(uv);\n    \n    float minDist = 10.0;\n    \n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 neighbour = vec2(float(x), float(y));\n          \n            vec2 point = random2(mod(uvFloor + neighbour, 5.));\n            point = 0.5 + 0.3 * cos(iTime * 1.4 + TWO_PI * point) * sin(iTime * 1.3 + TWO_PI * point) * 2.0;\n            vec2 delta = neighbour + point - uvFract;\n            float dist = length(delta);\n            minDist = min(minDist, dist);\n        }\n    \n    }\n    \n    colour += minDist;\n\n    // Time varying pixel color\n    vec3 col = colour *.8 + .1;\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}