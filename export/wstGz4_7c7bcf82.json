{"ver":"0.1","info":{"id":"wstGz4","date":"1567983241","viewed":1778,"name":"Tron disco","username":"Loldog","description":"title\n\nEdit: 09-10-2019 23:41 - gamma corrected and cleanup","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["grid","tron","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define DEG2RAD PI/180.\n\n// Prevents flickering\n#define SUPERSAMP 8\n\n// Project camera to world plane with constant worldY (height)\nvec3 revProject(vec2 camPos, float worldY, float fov) {\n    float worldZ = worldY / (camPos.y * tan(fov*DEG2RAD*.5));\n    float worldX = worldY * camPos.x / camPos.y;\n    return vec3(worldX, worldY, worldZ);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 p = (fragCoord.xy - iResolution.xy*.5) / iResolution.y;\n    \n    // Define supersample sizes\n    float fragsize = 1. / iResolution.y;\n    float supersize = fragsize / float(SUPERSAMP);\n\n    // Define the screenspace horizon [-0.5, 0.5]\n    float horizonY = 0.2;\n    \n    // Clip above horizon (optional)\n    if (p.y > horizonY) {\n    \tfragColor = vec4(vec3(0.), 1.0);\n    }\n    else {\n        // Initialize current fragment intensity\n        float intensity = 0.;\n        // Define the current grid displacement\n        vec3 displace = vec3(3.*sin(2.*PI*0.1*iTime), 4.*iTime, 1.5);\n        // Define the FOV\n        float fov = 90.0;\n        \n        // Retrieve supersamples\n        for (int i = 0; i < SUPERSAMP; i++) {\n            for (int j = 0; j < SUPERSAMP; j++) {\n                vec2 superoffset = vec2(i,j) * supersize;\n                // Get worldspace position of grid\n                vec2 gridPos = revProject(p + superoffset - vec2(0., horizonY), displace.z, fov).xz;                \n                // Create grid\n                vec2 grid = fract(gridPos - displace.xy) - 0.5;\n                // Make wavy pattern\n                float pattern = 0.7+0.6*sin(gridPos.y - 6.*iTime);\n                \n                // Compute distance from grid edge\n                float dist = max(grid.x*grid.x, grid.y*grid.y);\n                // Compute grid fade distance\n                float fade = min(1.5, pow(1.2, -length(gridPos) + 15.0));\n                // Set brightness\n                float bright = 0.015 / (0.26 - dist);\n                intensity += fade * pattern * bright;\n            }\n        }\n        \n        // Define current fragment color\n        vec3 col = 0.5 + 0.5*cos(iTime+p.yxy+vec3(0,10,20));\n        // Normalize intensity\n        intensity /= float(SUPERSAMP*SUPERSAMP);\n        \n    \tfragColor = vec4(intensity * col, 1.0);\n    }\n    \n    fragColor = pow(fragColor, vec4(.4545));\n}","name":"Image","description":"","type":"image"}]}