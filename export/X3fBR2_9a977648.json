{"ver":"0.1","info":{"id":"X3fBR2","date":"1728584971","viewed":104,"name":"Saturanus with massive music","username":"DerShade","description":"This kind of procedural music lead me here. To the shaders. I feel the combination of both will be the best. ","likes":8,"published":1,"flags":8,"usePreview":0,"tags":["3d","noise","music","space","parametric","flight","minecraftized"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// super cheap volumetric display.\n// i'm doing this to find a way to create the volumetric space for \n// slow machines. at least 30 fps FullHD. the use case is unknown yet.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{    \n    float a,r,g,b,x,y,z,mx,my,mz,xx,yy,zz,sy,sm,crt,l=32.; // l >= 2 quality iter. sort of.\n    a  = iTime/13.;                                        // rotangle orbitualis\n    mx = sin(a+3.14)*30.;                                  // x movement\n    my = (sin(iTime/5.)*7.);                               // y movement\n    mz = cos(a+3.14)*(sin(iTime/20.)*31.+31.);             // z movement\n    int tx = int(fragCoord.x), ty = int(fragCoord.y);      // bitwise friendly coords\n    for(float f=0.;f<l;f+=1.){                             // iterations loop     \n    zz = f*2.+(sin(fragCoord.x*1223.*                      // f can be layers distance. \n           (cos(fragCoord.y/142.)*                         // akward noise of z  \n            sin(fragCoord.x*411.))*\n            mod(iTime,3.)))*2.;                            // multiplied at the end = more depth \n    xx = (fragCoord.x/iResolution.x-0.5)*                  // coords -0.5 to 0.5\n         (iResolution.x/iResolution.y)*zz;                 // aspect r.   \n    yy = (fragCoord.y/iResolution.y-0.5)*zz;\n      \n    z =  cos(a)*(zz)-sin(a)*(xx);                          // y rot\n    x =  sin(a)*(zz)+cos(a)*(xx); \n    y =  yy;\n        \n    x+=mx;y+=my;z+=mz;                                     // add movements\n    \n    x=floor(x); // the world minecraftizer WM #32768 v.12.9 beta. (c)1973                      \n    y=floor(y+(float(iTime>20.)*mod(y/4.,sin(iTime/3.)*30.))); // can be commented or deleted\n    z=floor(z);\n    \n    sy = (x*x+y*y+z*z)*0.05;                   // (a parametric planet sphere) * (scale of it)\n    sm = ((x+22.)*(x+22.)+z*z+y*y)*0.1;        // the same thing xmoved for the moon\n    sm = float(sm<0.3&&f>0.);                  // size of the moon \n    \n    crt = float((tx&1^ty&1)+(ty%3)+1)+ (1.+(r+g+b)/30.); // checkerboard on 3 lines fade\n                                                         // first time observed at TIC-80\n    \n    // color distrib. by cut off a radius of the sphere. || of the ring\n    b += float(sy>5. && sy<5.5 || sy>6. &&sy<16.&&y>-.5&&y<.5 &&f>0.);  \n    r += float(sy<5.           || sy>10.&&sy<18.&&y>-.5&&y<.5 &&f>0.)+sm*3.;\n    g += float(sy>2. && sy<5.5 || sy>12.&&sy<20.&&y>-.5&&y<.5 &&f>0.);\n    }\n    // Out\n    fragColor = vec4(crt*(r/l),crt*(g/l),crt*(b/l),1.0);   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//this kind of music is probably unreadable. my big hoby. \n//there is a lot of uneccessary repetition in the code. \n//i did some reduction, but all the music is originaly written as one big\n//formula with only one variable at all. the t. 8 bit.\n//but this one is not the boolean sound delight. it's just a badly tunned sinus terror.\n//something is wrong with the hihat. lack of precision?\n\nvec2 mainSound( int samp, float time )\n{\n\n #define va1 127.+128.\n #define va2 64.+65.\nfloat w,m1,m2,o;\nint t=samp;\nw  = (float(t*2));\nm1 = pow(2.,float((t>>18&255)*(t>>18&65535)&25\t)/12.);\nm2 = pow(2.,float((t>>17&255)*(t>>19&65535)&125\t)/12.);\n \n// leading interferor\no =   (((sin(w/(m1*256. ))*va1)/\n\t\t(sin(w/(m1*256.3))*va1)+\n\t\t(sin(w/(m1*256.1))*va1)/\n\t\t(sin(w/(m2*128. ))*va1)+\n\t\t(sin(w/(m2*128.1))*va1)/\n\t\t(sin(w/(m2*128.3))*va1)+\n\t\t(sin(w/(m1*64.  ))*va1)/\n\t\t(sin(w/(m1*64.01))*va1)+\n\t\t(sin(w/(m1*64.02))*va1)/\n\t\t(sin(w/(m2*32.  ))*va1)+\n\t\t(sin(w/(m2*32.01))*va1)/\n\t\t(sin(w/(m2*32.03))*va1)+\n\t\t(sin(w/(m2*256. ))*va2)/\n\t\t(sin(w/(m2*256.2))*va2)+\n\t\t(sin(w/(m2*256.3))*va2))/824.)+\n+\n\n//sd  end part variator       bin end vars seq         bin sd sequence \n(.2*float((((14+(t>>19)<<24)*(3301229764>>(t>>19)&1))|1145324612)>>(t>>14)&1))*\n(sin(sin(sin(sin(sin(\n\n//sd freq chartacter\n(float(t)/6.4))+\n(float(t)/21.7))+\n(float(t)/16.))*2.+\n(float(t)/350.))*2.+\n(float(t)/32.3)))\n\n//sd exponencial envelope (start value+(slow sawtooth)/punch)\n/(0.3+float(t&16383)/3000.)+\n//bd\n(.3* float(int(2317418881)>>(t>>13)&1)*\n     (sin(sin\n     (70./(1.5+float(t<<1&16383)/314.))+\n     (700./(20.+float(t<<1&16383)/170.))))/\n     (0.5+float(t>>5&255)/45.))        \n+\n//hihat closed\n(0.05*float(3579171669>>(t>>11)&1)*(sin(sin(sin(sin(sin(sin\n(float(t)/0.31))+\n(float(t)/6.3))*(2.-float(t&8191)/8000.)+ //ring amp\n(float(t)/7.8))*(2.-float(t&8191)/8000.)+\n(float(t)/0.51))+\n0.))   \n/(0.3+float(t&8191)/(1400.+(float(0xca311fa1>>(t>>13)&3)*800.)))) //envelope variator 0-3)\n+         \n//very big crash\n(5.*float(268439569>>(t>>17)&1)*(sin(sin(sin(sin(sin(sin(\n(float(t)/8.3))*(2.-float(t>>3&16383)/16384.)+\n(float(t)/11.1))*(1.-float(t>>3&16383)/16384.)+\n(float(t)/12.3))*(2.-float(t>>3&16383)/16384.)+\n(float(t)/16.7))*(2.-float(t>>3&16383)/16384.)+\n(float(t)/7000.))*(1.-float(t>>3&16383)/16384.)+ //ringiness amplitude down envelopes\n(0.))/(15.+float(t>>3&16383)/150.)))        \n        ;\n\n\n\n\n\n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2(float(o));\n}","name":"Sound","description":"","type":"sound"}]}