{"ver":"0.1","info":{"id":"fssXW8","date":"1618684262","viewed":91,"name":"Pyramid with inclusions","username":"ViollaM","description":"by Яковлева Маргарита, 314 группа.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel1, uv) / float(iFrame + 1); //усреднение всех кадров, iFrame - number of кадр\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 randDir;\nconst float INF = 1e10;\nconst float EPS = 1e-3;\nconst vec3 CAMERA_POS = vec3(3, 1.2, -6); //3, 1.2, -6\n\nconst vec3 LIGHT1_POS = vec3(-3, 2.2, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 0.7, 0.2);\n\nconst vec3 LIGHT2_POS = vec3(3, 1.7, 1);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.2, 0.1, 0.6);\n\nconst vec3 LIGHT3_POS = vec3(1, 2, -3);\nconst float LIGHT3_RADIUS = 0.1;\nconst vec3 LIGHT3_COLOR = vec3(0.1, 0.3, 1);\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3; \n\nconst float GLASS_N = 1.55;\nconst float AIR_N = 1.0;\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.25 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 10.0) {\n        return INF;\n    }\n    normal = vec3(0.0, 1.0, 0.0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 1.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 1.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nstruct Triangle \n{\n    vec3 pos[3];\n    vec3 normal;\n};\n\nfloat traceTriangle(Triangle t, vec3 origin, vec3 dir, out vec3 norm) \n{\n    \n    vec3 d1 = t.pos[1] - t.pos[0];\n    vec3 d2 = t.pos[2] - t.pos[0];\n    t.normal = normalize(cross(d1, d2));\n    norm = t.normal;\n    \n    float normalViewAngle = dot(dir, t.normal);\n    if (abs(normalViewAngle) < EPS) \n        return INF;\n    float d = dot(t.pos[0] - origin, t.normal) / normalViewAngle;\n    if (d < 0.0) \n        return INF;\n    vec3 hitPos = origin + dir * d;\n    vec3 edges[3] = vec3[3](\n        t.pos[1] - t.pos[0],\n        t.pos[2] - t.pos[1],\n        t.pos[0] - t.pos[2]\n    );\n    float square = length(cross(edges[0], edges[1]));\n    vec3 toHitVecs[3] = vec3[3](\n        hitPos - t.pos[0],\n        hitPos - t.pos[1],\n        hitPos - t.pos[2]\n    );\n    float testSq[3] = float[3](\n        length(cross(toHitVecs[0], edges[0])),\n        length(cross(toHitVecs[1], edges[1])),\n        length(cross(toHitVecs[2], edges[2]))\n    );\n    if (abs(square - testSq[0] - testSq[1] - testSq[2]) < EPS) \n        return d;\n    return INF;\n}\n\n\nint[18] trlist = int[18](\n    0, 1, 4,\n    0, 1, 2,\n    0, 2, 3,\n    0, 3, 4,\n    1, 2, 4,\n    2, 3, 4\n);\n\n\nvec3[5] points = vec3[5] (\n    vec3(0, 1, 0),\n    vec3(-0.8, -1, -0.8),\n    vec3(0.8, -1, -0.8),\n    vec3(0.8, -1, 0.8),\n    vec3(-0.8, -1, 0.8)\n);\n\n\nfloat tracePyramid(vec3 pos, vec3 dir, out vec3 norm) {\n    vec3 curNorm;\n    float t = INF, curT;\n    for (int i = 0; i < 6; i++) {\n        Triangle curTr;\n        for (int j = 0; j < 3; j++) {\n            curTr.pos[j] = points[trlist[i * 3 + j]];\n        }\n        curT = traceTriangle(curTr, pos, dir, curNorm);\n        if (curT < t) {\n            t = curT;\n            norm = curNorm;\n        }\n    }\n    return t;\n}\n\n\nbool isOccluded(vec3 pos, vec3 target)\n{\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 pyrNorm;\n    float pyrT = tracePyramid(pos, dir, pyrNorm);\n    if (pyrT < dist) \n        return true;\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    if (cylT < dist) \n        return true;\n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) \n{\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 45.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 15.0f / distSq2;\n    \n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    float att3 = isOccluded(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 10.0f / distSq3;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel0, normal).rgb\n    ); \n}\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) \n{\n    return x * x;\n}\n\nfloat rand(float frame) \n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy + (randVals.xy - 0.5)) / iResolution.x; \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    \n    vec3 viewVec = normalize(front + uv.x * right + uv.y * up); \n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    float n1 = AIR_N;\n\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N) + 0.2;\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    float nEnter = GLASS_N;\n    \n    const int nballs = 11;\n    vec3[nballs] balls = vec3[nballs] (\n        vec3(0.0, 0.3, 0.3),\n        vec3(-0.25, 0.4, -sqrt(3.0) * 0.5 / 2.0),\n        vec3(0.3, 0.4, 0.1),\n        vec3(0.0, 0.3, -0.3),\n        vec3(-0.3, 0.6, sqrt(3.0) * 0.5 / 2.0),\n        vec3(0.25, 0.35, sqrt(3.0) * 0.25),\n        vec3(0.0, -0.3, 0.0),\n        vec3(0.3, 0.7, 0.12),\n        vec3(-0.45, 0.8, -0.16),\n        vec3(-0.4, 0.75, 0.6),\n        vec3(0.4, 0.1, -0.4)\n    );\n\n    vec3[nballs] col_balls = vec3[nballs] (\n        /*vec3(1.0, 0.8, 0.6),\n        vec3(0.9, 0.5, 0.75),\n        vec3(1.0, 0.48, 0.3),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.85, 1.0, 0.8),\n        vec3(0.9, 0.5, 0.75),\n        vec3(1.0, 1.0, 0.6),\n        vec3(0.6, 0.6, 1.0),\n        vec3(0.16, 0.32, 0.64),\n        vec3(1.0, 1.0, 0.6)*/\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0),\n        vec3(0.8, 0.9, 1.0)\n        \n    );\n\n    float[nballs] radballs = float[nballs] (\n        0.08,\n        0.05,\n        0.1,\n        0.2,\n        0.15,\n        0.09,\n        0.12,\n        0.18,\n        0.16,\n        0.05,\n        0.03\n    );\n    \n    for (int i = 0; i < 20; ++i) \n    {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        \n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * viewVec + curPos;\n            color = texture(iChannel1, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) \n        {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) \n        {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t) \n        {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        vec3 pyrNorm;\n        float pyrT = tracePyramid(curPos, curDir, pyrNorm);\n        if (pyrT < t) \n        {\n            t = pyrT;\n            normal = pyrNorm;\n            if (randVals.x < GLASS_R){\n                materialType = REFLECTION;\n            }\n            else {\n                materialType = REFRACTION;\n            }\n        }\n        \n        \n        vec3 sphNorm;  \n        for (int k = 0; k < nballs; k++){\n            float sph2T = traceSphere(curPos + balls[k], curDir, radballs[k], sphNorm);\n            if (sph2T < t) {\n                t = sph2T;\n                normal = sphNorm;\n                //if (k % 2 == 0) \n                    //materialType = REFLECTION;\n                \n                if (randVals.x < GLASS_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult *= col_balls[k];\n                    materialType = REFRACTION;\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) \n        {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel1, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF) \n        {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel1, worldPos.xz);\n            \n            if (materialType == EMISSION) \n            {\n                fragColor.rgb = color * colorMult;\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            }\n            else if (materialType == REFLECTION) \n            {\n                curDir = reflect(curDir,normal);\n                curPos = worldPos + curDir * 1e-5;\n            }\n            else if (materialType == REFRACTION) \n            {\n                \n                if (dot(curDir, normal) > 0.0) {\n                    n1 = AIR_N;\n                } else {\n                    n1 = GLASS_N;\n                }\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n            }\n        }\n        else fragColor.rgb = texture(iChannel0, curDir).rgb * colorMult;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel1, uv) + texture(iChannel2, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}