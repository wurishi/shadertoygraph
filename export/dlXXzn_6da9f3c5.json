{"ver":"0.1","info":{"id":"dlXXzn","date":"1692585570","viewed":25,"name":"Inverted Mandelbrot set","username":"WhiteWalrus518","description":"flips the Mandelbrot set inside out\n\nI can't remember why I made this","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/res.xy;\n    vec2 st = fragCoord/res.y;\n    vec2 pos = 5.0 * (st - 0.5 * vec2(res.x / res.y , 1.0));\n    vec2 wp = pos;\n    \n    wp = pos * pow(l(pos),  - clamp(4.0 * sin(iTime * 0.5) - 1.0, 0.0, 2.0));\n    //wp = nPow(pos, 2);\n    //wp = nPow(nroot(pos, 2.0), 3);\n    //wp = nroot(nPow(pos, 3), 2.0);\n    //wp = nroot(pos, 2.0);\n    vec3 col = vec3(0.0);\n    \n    int it = 60;\n    vec2 num = wp;\n    vec2 val = vec2(0.0);\n    \n    float maxL = 0.0;\n    float cut = 2.0;\n    for(int i = 0; i < it; i++){\n        val = mandelbrot(val, num);\n        maxL = max(maxL, l(val));\n        if(maxL > cut)\n        {\n            col = vec3(1.0);\n        }\n    }\n    \n    \n    if(l(wp) < 2.1 && 2.0 < l(wp) ){col = vec3(0.1, 0.8, 0.6);}\n    if(l(wp) < 1.1 && 1.0 < l(wp) ){col = vec3(0.5);}\n    \n    if( 0.49 < abs(fract(wp.x) - 0.5) ){col = vec3(0.7, 0.8, 0.1);}\n    if (0.49 < abs(fract(wp.y) - 0.5) ){col = vec3(0.7, 0.1, 0.8);}\n    \n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define res iResolution\n#define l length\n#define t iTime\n#define pi 3.14159\nvec2 cMult( vec2 a, vec2 b )\n{\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y *b.x);\n}\nvec2 conj (vec2 a)\n{\n    return vec2(a.x, -a.y);\n}\n\nvec2 nPow (vec2 a, int p){\n    vec2 run = a;\n    for(int i = 0; i < p - 1; i++){\n        run = cMult(run, a);\n    }\n    return run;\n}\n\nvec2 nroot(vec2 a, float p){\n    float phi = atan(a.x, a.y);\n    return pow(l(a), 1.0 / p) * vec2(cos(phi / p), sin(phi / p));\n}\n\nvec2 mandelbrot(vec2 a, vec2 c){\n    return cMult(a, a) + c;\n}\n\nvec2 mandelbar(vec2 a, vec2 c){\n    return conj(cMult(a, a)) + c;\n}\n\nvec2 burningship(vec2 a, vec2 c){\n    return cMult( vec2(abs(a.x), abs(a.y)), vec2(abs(a.x), abs(a.y)) ) + c;\n}\n\nvec2 julia(vec2 a, float c){\n    return cMult(a, a) + 0.7885 * vec2(cos(c), sin(c));\n}\n\nvec2 genf(vec2 a, vec2 c){\n    return cMult(a, a) + c;\n}","name":"Common","description":"","type":"common"}]}