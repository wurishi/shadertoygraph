{"ver":"0.1","info":{"id":"7l3Xz2","date":"1639405828","viewed":177,"name":"Taylor Series Sine","username":"day9","description":"https://en.wikipedia.org/wiki/Taylor_series","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["approximation","sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 red = vec3(0.0,1.0,1.0);\n\nfloat Plot(vec2 p){\n    return smoothstep( 64.0/iResolution.x, 0.0, abs(p.x-p.y));\n}\n\n//sin x = + x^1/1! - x^3/3! + x^5/5! - x^7/7!..\nvec2 TaylorSine(vec2 p, float iter) {\n    float S = 0.0;\n    float q = p.x;\n    float k = -1.0;\n    float factor = 1.0;\n    for(float i = 1.0; i < iter; i += 2.0) {\n        k = -1.0 * k;\n        S += k * q/factor;\n        q *= p.x * p.x;\n        factor *= (i+1.0)*(i+2.0);\n    }\n    return vec2(p.y, S);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 12.0;\n\n    vec3 col;\n    float x, y, grid, sine, tsine;\n    x = uv.x; y = uv.y;    \n    grid = (step(abs(x), 0.02) + step(abs(y), 0.02)) * 0.1;\n\n    for(float i = 4.0; i < 24.0; i += 2.0) {\n        tsine += Plot(TaylorSine(uv, i));  \n    }\n\n    sine = Plot(vec2(y-0.05,sin(x)));\n\n    col += 1.0 - grid - sine*red - tsine;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}