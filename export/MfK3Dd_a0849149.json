{"ver":"0.1","info":{"id":"MfK3Dd","date":"1713458210","viewed":73,"name":"2D Raymarching Visualization","username":"PixelCopernicus","description":"This shader demonstrates raymarching conceptually. Pause the shader at any moment to take a better look.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map( in vec2 uv )\n{\n    float d = 1000.;\n    \n    d = min(d, length(uv - vec2(1., sin(iTime * .75) * .5 + .5)) - .25);\n    d = min(d, length(uv - vec2(0., -.75)) - .5);\n    \n    float alpha = 3.141592 * .3333;\n    \n    uv = uv - vec2(-.1, .5);\n    uv = vec2(uv.x * cos(alpha) - uv.y * sin(alpha), uv.x * sin(alpha) + uv.y * cos(alpha));\n    \n    uv = abs(uv) - vec2(.2, .35);\n\n    if (uv.x >= 0. && uv.y >= 0.)\n    {\n        d = min(d, length(uv));\n    }\n    else if (uv.x >= 0.)\n    {\n        d = min(d, uv.x);\n    }\n    else if (uv.y >= 0.)\n    {\n        d = min(d, uv.y);\n    }\n    else\n    {\n        d = min(d, max(uv.x, uv.y));\n    }\n\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    fragColor = vec4(0., .0, sin(abs(map(uv)) * 80. - iTime * 3.) * .5 + .5, 1.);\n    \n    if (map(uv) <= 0. && map(uv) >= -.01)\n        fragColor = vec4(1.);\n    \n    float alpha = sin(iTime * .5) * 3.141592 * .5 * .4;\n    \n    vec2 ro = vec2(-1.25, 0.);\n    vec2 rd = vec2(cos(-alpha), sin(-alpha));\n    \n    uv -= ro;\n    vec2 aux = vec2(uv.x * cos(alpha) - uv.y * sin(alpha), uv.x * sin(alpha) + uv.y * cos(alpha));\n    uv += ro;\n    \n    float t = 0.;\n    \n    for (int i = 0; i < 80; ++i)\n    {\n        float d = map(ro + rd * t);\n        \n        if (d < .0001)\n            break;\n        \n        if (sqrt(abs(aux.x - t) * abs(aux.x - t) + abs(aux.y) * abs(aux.y)) < .02)\n            fragColor = vec4(1.);\n        \n        if (abs(sqrt(abs(aux.x - t) * abs(aux.x - t) + abs(aux.y) * abs(aux.y)) - d) < .005)\n            fragColor = vec4(1.);\n        \n        t += d;\n        \n        if (t > 10.)\n            break;\n    }\n    \n    if (sqrt(abs(aux.x - t) * abs(aux.x - t) + abs(aux.y) * abs(aux.y)) < .02)\n            fragColor = vec4(1.);\n        \n    if (aux.x > 0. && aux.x <= t && abs(aux.y) < .005)\n        fragColor = vec4(1.);\n}","name":"Image","description":"","type":"image"}]}