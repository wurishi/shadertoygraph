{"ver":"0.1","info":{"id":"Mfj3Dm","date":"1704315285","viewed":71,"name":"HighQuality Blue Noise","username":"sampajama","description":"Very High Quality Blue Noise Generator using Sinc Filtering and ChaCha20.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["noise","math","blue","hash","hash","bluenoise","rng","sinc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getCoord(vec2 coord)\n{\n    return vec4(texture(iChannel0, fract(coord / iResolution.xy)).rgb, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 samp_sum = getCoord(fragCoord);\n    samp_sum *= MID_WEIGHT * lp_window(0.0) * lp_kernel(0.0);\n    \n    for(float d = 1.0; d < RANGE - 0.5; d += 1.0)\n    {\n        float w = lp_window(SQRT1 * d / RANGE);\n        float k = lp_kernel(SQRT2 * d / KERNEL);\n        \n        vec4 s1p = getCoord(fragCoord + vec2(d, -d));\n        vec4 s1n = getCoord(fragCoord - vec2(d, -d));\n        \n        samp_sum += w * k * (s1p + s1n);\n    }\n    \n    vec4 l_freq = samp_sum / samp_sum.a;\n    vec4 h_freq = texture(iChannel1, fract(fragCoord / iResolution.xy));\n        \n    fragColor = 0.5+l_freq*0.1;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ROUNDS 20\n#define ROTL(a,b) (((a) << (b)) | ((a) >> (32 - (b))))\n#define QUARTER_ROUND(a, b, c, d) \\\n    a += b; d ^= a; d = ROTL(d,16); \\\n    c += d; b ^= c; b = ROTL(b,12); \\\n    a += b; d ^= a; d = ROTL(d, 8); \\\n    c += d; b ^= c; b = ROTL(b, 7);\n\nfloat uintBitsToSnorm(uint b)\n{\n    return float(int(b)) / 2147483648.0;\n}\n\nvec4 chacha(vec2 fragCoord)\n{\n    uint m11, m12, m13, m14;\n    uint m21, m22, m23, m24;\n    uint m31, m32, m33, m34;\n    uint m41, m42, m43, m44;\n    \n    m11 = 0x65787061u; // \"expa\"\n    m12 = 0x6E642033u; // \"nd 3\"\n    m13 = 0x322D6279u; // \"2-by\"\n    m14 = 0x7465206Bu; // \"te k\n\n    m21 = floatBitsToUint(iResolution.x);\n    m22 = floatBitsToUint(iResolution.y);\n    m23 = floatBitsToUint(iMouse.x);\n    m24 = floatBitsToUint(iMouse.y);\n    \n    m31 = floatBitsToUint(iDate.x);\n    m32 = floatBitsToUint(iDate.y);\n    m33 = floatBitsToUint(iDate.z);\n    m34 = floatBitsToUint(iDate.w);\n    \n    m41 = floatBitsToUint(fragCoord.x);\n    m42 = floatBitsToUint(fragCoord.y);\n    m43 = floatBitsToUint(iTime);\n    m44 = uint(iFrame);\n\n    for (int r = 0; r < ROUNDS; r += 2) \n    {\n        // EVEN ROUND\n        QUARTER_ROUND(m11, m12, m13, m14);\n        QUARTER_ROUND(m21, m22, m23, m24);\n        QUARTER_ROUND(m31, m32, m33, m34);\n        QUARTER_ROUND(m41, m42, m43, m44);\n        \n        // ODD ROUND\n        QUARTER_ROUND(m11, m22, m33, m44);\n        QUARTER_ROUND(m21, m32, m43, m14);\n        QUARTER_ROUND(m31, m42, m13, m24);\n        QUARTER_ROUND(m41, m12, m23, m34);\n    }\n\n    return vec4(\n        uintBitsToSnorm(m11) + uintBitsToSnorm(m21) + uintBitsToSnorm(m31) + uintBitsToSnorm(m41),\n        uintBitsToSnorm(m12) + uintBitsToSnorm(m22) + uintBitsToSnorm(m32) + uintBitsToSnorm(m42),\n        uintBitsToSnorm(m13) + uintBitsToSnorm(m23) + uintBitsToSnorm(m33) + uintBitsToSnorm(m43),\n        uintBitsToSnorm(m14) + uintBitsToSnorm(m24) + uintBitsToSnorm(m34) + uintBitsToSnorm(m44)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = chacha(fragCoord);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 getCoord(vec2 coord)\n{\n    return vec4(texture(iChannel0, fract(coord / iResolution.xy)).rgb, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 samp_sum = getCoord(fragCoord);\n    samp_sum *= MID_WEIGHT * lp_window(0.0) * lp_kernel(0.0);\n    \n    for(float d = 1.0; d < RANGE - 0.5; d += 1.0)\n    {\n        float w = lp_window(SQRT1 * d / RANGE);\n        float k = lp_kernel(SQRT1 * d / KERNEL);\n        \n        vec4 s1p = getCoord(fragCoord + vec2(d, 0.0));\n        vec4 s1n = getCoord(fragCoord - vec2(d, 0.0));\n        \n        samp_sum += w * k * (s1p + s1n);\n    }\n    \n    fragColor = samp_sum / samp_sum.a;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float EPS = (5.79334e-21);\nconst float PI = (3.14159265358979323);\nconst float PHI = (1.61803398875);\nconst float SQRT1 = (1.00000000000);\nconst float SQRT2 = (1.41421356237);\nconst float SQRT3 = (1.73205080757);\n\n////* SPATIAL  *////\nconst float KERNEL = 2.0;\nconst float RANGE = floor(KERNEL * 24.0);\nconst float MID_WEIGHT = 1.0;\n\n////* STDS *////\nconst float MIN_SNORM = -1.0;\nconst float MAX_SNORM = +1.0;\nconst float HRNG_STD = sqrt(pow(MAX_SNORM - MIN_SNORM, 2.0) / 12.0);\nconst float LRNG_STD = HRNG_STD / (KERNEL * 1.1279 + 0.00102588);\nconst float OUT_STD = sqrt(HRNG_STD * HRNG_STD + LRNG_STD * LRNG_STD);\n\nfloat lp_sinc(float x) {\n    return sin(PI * x + EPS) / (PI * x + EPS);\n}\n\nfloat lp_gauss(float x) {\n    return exp(-x * x);\n}\n\nfloat lp_kernel(float x) {\n    return lp_sinc(x);\n}\n\nfloat lp_window(float x) {\n    x = (1.0 + x) * 0.5;\n\n    return 0.35875\n         - 0.48829 * cos(2.0 * PI * x)\n         + 0.14128 * cos(4.0 * PI * x)\n         - 0.01168 * cos(6.0 * PI * x);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec4 getCoord(vec2 coord)\n{\n    return vec4(texture(iChannel0, fract(coord / iResolution.xy)).rgb, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 samp_sum = getCoord(fragCoord);\n    samp_sum *= MID_WEIGHT * lp_window(0.0) * lp_kernel(0.0);\n    \n    for(float d = 1.0; d < RANGE - 0.5; d += 1.0)\n    {\n        float w = lp_window(SQRT1 * d / RANGE);\n        float k = lp_kernel(SQRT1 * d / KERNEL);\n        \n        vec4 s1p = getCoord(fragCoord + vec2(0.0, d));\n        vec4 s1n = getCoord(fragCoord - vec2(0.0, d));\n        \n        samp_sum += w * k * (s1p + s1n);\n    }\n    \n    fragColor = samp_sum / samp_sum.a;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"vec4 getCoord(vec2 coord)\n{\n    return vec4(texture(iChannel0, fract(coord / iResolution.xy)).rgb, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 samp_sum = getCoord(fragCoord);\n    samp_sum *= MID_WEIGHT * lp_window(0.0) * lp_kernel(0.0);\n    \n    for(float d = 1.0; d < RANGE - 0.5; d += 1.0)\n    {\n        float w = lp_window(SQRT1 * d / RANGE);\n        float k = lp_kernel(SQRT2 * d / KERNEL);\n        \n        vec4 s1p = getCoord(fragCoord + vec2(d, +d));\n        vec4 s1n = getCoord(fragCoord - vec2(d, +d));\n        \n        samp_sum += w * k * (s1p + s1n);\n    }\n    \n    fragColor = samp_sum / samp_sum.a;\n}","name":"Buffer D","description":"","type":"buffer"}]}