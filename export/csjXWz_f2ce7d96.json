{"ver":"0.1","info":{"id":"csjXWz","date":"1670163366","viewed":56,"name":"the book of sand","username":"jiaolyulu1","description":"the book of sand written by Jorge Luis Borges. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flip","book"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// bezier curve reference: https://www.shadertoy.com/view/ltXSDB, thanks to Adam Simmons \n\n#define S(a,b,t) smoothstep(a,b,t)\n#define ridge 0.9  //the book ridge length\n#define scale 3.5\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n// Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n// Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a / 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) / 27.0 + c;\n    float d = q*q + 4.0*p3 / 27.0;\n    float offset = -a / 3.0;\n    if(d >= 0.0) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) / 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 / p3) * q / 2.0) / 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p / 3.0) + offset;\n}\n\n// Find the signed distance from a point to a bezier curve\nfloat sdBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{    \n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) / dot(b,b);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis * signBezier(A, B, C, p);\n}\n\n\nfloat LineDistance(vec2 a, vec2 b, vec2 p, float blur){\n\tvec2 ap = p-a;\n    vec2 ab = b-a;\n    float t = clamp(dot (ap,ab)/dot(ab,ab),0.0,1.0);\n    vec2 at = t*ab;\n    vec2 pt = at-ap;\n    \n    return S(blur,0.,length(pt));\n}\n\nfloat line (vec2 a, vec2 b, vec2 uv){\n    float m = (b.y-a.y)/(b.x-a.x);\n    float c = b.y - m * b.x;\n    return m*uv.x+c-uv.y;\n    \n}\n\n\n\nfloat bookPage(vec2 corner, vec2 uv, float blur, float i){\n    if (corner.x==0.){return 0.;}\n    float lines = LineDistance(corner, vec2(corner.x,-1.*corner.y),uv,blur);\n    vec2 mouse=scale*(iMouse.xy -iResolution.xy*0.5)/iResolution.y;\n    float t= max(-1.5,min(1.5,mouse.x));\n    float d=sdBezier(vec2(0.,ridge),vec2((0.3+0.5*i)*corner.x,(ridge+corner.y+abs(t)*0.2)*(0.4+0.2*i))+0.5*cos(uv.x)*max(0.,(1.-abs(corner.x))),corner,uv);\n    float curve=S(0.0,blur,d);\n    curve+=S(0.,-blur,d);\n    curve=min(1.,curve);\n    lines+=1.-curve;\n    return lines;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = scale*(fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = scale*(iMouse.xy -iResolution.xy*0.5)/iResolution.y;\n    vec2 st=vec2(uv.x,abs(uv.y));\n   \n    float width=0.9;\n    float r_book= length(vec2(width,ridge));\n    float t= max(-1.5,min(1.5,mouse.x));\n    float rt=(1.5-abs(t));\n    \n    \n     float dist=(0.65)*st.y+sin(st.x/scale*(0.46-cos(mouse.x)*0.1));\n    float d;\n    vec2 pointA = vec2(t,ridge+0.5*max(0.,cos(t)));\n    vec2 pointB = vec2(-scale,ridge);\n    vec2 pointC = vec2(scale,ridge);\n    d=S(0.0,0.02,line(pointC,pointA,st))*S(0.0,0.02,line(vec2(1.,-1.)*pointC,pointA,st));\n    d+=S(0.0,0.02,line(pointB,pointA,st))*S(0.0,0.02,line(vec2(1.,-1.)*pointB,pointA,st));\n    d+=S(0.,-0.02,line(pointC,pointA,st));\n    d+=S(0.,0.02,line(pointB,pointA,st))*-uv.x;\n    d+=S(0.,-0.02,line(pointB,pointA,st));\n    d*=0.2*rt;\n    d=clamp(d,0.,0.8);\n    vec2 displacement=texture(iChannel0,(vec2(3.*uv.x,1.*uv.y)+0.1*rt+rt*iTime*0.1)/10.).rg;\n    vec3 col = vec3(d)+0.3;\n    uv-=0.03*rt*(1.-2.*displacement);\n    uv=vec2(uv.x,abs(uv.y));\n    float bookPages=0.;\n    int index=max(2,int(1.57/(0.01f+0.5*abs(t))));\n    for (float i=1.57;i>=-0.1;i-=1.57/float(index)){\n    bookPages=mix(bookPages,\n                  1.-min(1.,pow(i,2.)*1.2*(abs(t)+1.5)/3.5),\n                  bookPage(vec2(scale*0.5*pow(i,2.)+t*(1.-i/1.57),ridge+0.5*max(0.,cos(t))*cos(i)),uv,0.01+i*i*i*0.01,i)\n                  );\n    \n    }\n    if (t<0.){\n    int index1=int(floor(min(200.,float(index))));\n    for (float i=1.57;i>=-0.1;i-=1.57/float(index1)){\n    bookPages=mix(bookPages,\n                  1.-min(1.,pow(i,2.)*1.2*(abs(t)+1.5)/3.5),\n                  bookPage(vec2(scale*-0.5*pow(i,2.)+t*(1.-i/1.57),ridge+0.5*max(0.,cos(t))*cos(i)),uv,0.01+i*i*i*0.01,i)\n                  );\n    \n    }\n    }\n    vec3 baseColor= vec3(0.0)+0.2*sin(iTime);\n    col=mix(col,vec3(1.),abs(mouse.x)*0.5+0.5);\n    col=mix(col,baseColor,bookPages);\n    col=mix(col,baseColor,LineDistance(vec2(0.,ridge),vec2(0.,-ridge),uv,0.02));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}