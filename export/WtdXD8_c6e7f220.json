{"ver":"0.1","info":{"id":"WtdXD8","date":"1580861138","viewed":293,"name":"Dissolve 2+1D noise","username":"hazenn","description":"Could be used for a different kind of dissolve effect, that looks better for slow dissolution that just a static fbm.\nHaving a low amount of octaves gives a smoother more bubbly effect","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nconst int OCTAVES = 16;\nconst vec3 color = vec3(255., 142., 114.)/255.;\n\nvec2 random(vec2 pt , float t){\n    return vec2(\n        fract(456512.6161616*cos(dot(vec3(pt,t) , vec3(150.9898944,30.54614646,151.054608))) ),\n    \tfract(566516.6161616*cos(dot(vec3(pt,t) , vec3(135.54568544,-12540.50540,642.5419840))) ));\n}\n\n\nvec2 noise(vec2 st, float t){\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\tfloat it = floor(t);\n    float ft = fract(t);\n    // Four corners in 2D of a tile\n    vec2 a = random(i,it);\n    vec2 b = random(i + vec2(1.0, 0.0),it);\n    vec2 c = random(i + vec2(0.0, 1.0),it);\n    vec2 d = random(i + vec2(1.0, 1.0),it);\n\tvec2 as = random(i,it+1.);\n    vec2 bs = random(i + vec2(1.0, 0.0),it+1.);\n    vec2 cs = random(i + vec2(0.0, 1.0),it+1.);\n    vec2 ds = random(i + vec2(1.0, 1.0),it+1.);\n    vec2 u = f*f*(3.0-2.0*f);\n\t//float ut = ft*ft*(3.0-2.0*ft);\n\tfloat ut = ft;\n\treturn mix(mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y\n        ,\n        mix(as, bs, u.x) +\n            (cs - as)* u.y * (1.0 - u.x) +\n            (ds - bs) * u.x * u.y\n        ,ut);\n}\n\nvec2 fractal_noise(in vec2 st, in float t){\n\n    // Initial values\n    vec2 value = vec2(0.);\n    float amplitude = .5;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st,t);\n        st *= 2.;\n        t *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pt = fragCoord / iResolution.yy * 15.;\n\tvec3 col = vec3(0);\n\t/*\n    col.xy += //step(0.7,\n\t\tdot(fractal_noise(pt,1.*iTime),vec2(1.,0.5))\n\t\t\t\t\t//)\n\t;\n\t*/\n\tvec2 r = abs(fractal_noise(pt,iTime));\n\tcol += step(abs(sin(0.2*iTime)),max(r.x,r.y)) * color ;\n    // Output o screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}