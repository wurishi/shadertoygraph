{"ver":"0.1","info":{"id":"ddcyWj","date":"1695480271","viewed":67,"name":"JPEG-like effect","username":"Zeican","description":"A shader that replicates the look of JPEG Compression","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["compression","artifact","jpeg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Define the time variable for animation\n    float time = iTime;\n\n    // Create a simple gradient background\n    vec3 bgColor = vec3(0.1, 0.1, 0.1);\n    vec3 color = bgColor;\n\n    // Simulate JPEG compression artifacts\n    float jpegQuality = 10.0; // Adjust this value for different levels of compression\n    float artifactAmount = 0.1; // Adjust this value for the strength of artifacts\n\n    // Calculate artifact offsets based on time\n    float xOffset = sin(time) * artifactAmount;\n    float yOffset = cos(time) * artifactAmount;\n\n    // Apply offsets to the pixel's coordinates\n    vec2 newCoord = fragCoord.xy + vec2(xOffset, yOffset);\n\n    // Sample the texture with the new coordinates\n    color = texture(iChannel0, newCoord / iResolution.xy).xyz;\n\n    // Simulate JPEG compression quality\n    color = round(color * jpegQuality) / jpegQuality;\n\n    // Set the final pixel color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}