{"ver":"0.1","info":{"id":"tlXXz8","date":"1562023295","viewed":368,"name":"Relaxing Sine","username":"clintolibre","description":"implementation of a popular gif","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["sine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Thanks for checking out my shader. Have a great day. -Clint\n\nfloat distanceToLine(vec2 p1, vec2 p2, vec2 point) {\n    float a = p1.y-p2.y;\n    float b = p2.x-p1.x;\n    return abs(a*point.x+b*point.y+p1.x*p2.y-p2.x*p1.y) / sqrt(a*a+b*b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Output to screen\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //Pretty colors from default shader\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //flatten out waves\n    uv.x /= 2.0;\n    \n    //how many tiles\n    float frac = iResolution.x/22.0;\n    \n    //value for which row in the tiling the pixel is in\n    float weird = floor(uv.y*frac);\n    \n    //if the pixel is in a odd or even column of the tiling\n    float even = mod(floor(uv.x*frac),2.0);\n    \n    //offset the oscillation of the endpoint on the top of each tile\n    float calc = (sin((iTime*2.0)+(weird/4.0)+(even*3.14))/4.0)+.5;\n    \n    //declare endpoints to for the two lines in each tile\n    vec2 p1 = vec2(calc,floor(uv.y+1.0));\n    vec2 p2 = vec2(0.,0.1);\n    vec2 p3 = vec2(1.0,0.1);\n\t\n    //tile our 2space\n    uv = fract(uv*frac);\n    \n    //thickness of lines\n    float radius =0.005;\n    \n    //aliasing of lines\n    float AA = 0.015;\n    \n    //distances from our pixel to the lines we want to draw\n    float d = min(distanceToLine (p1,p2,uv),distanceToLine (p1,p3,uv));\n\tfloat line = 0.0;\n    //smoothstep for drawing our lines\n    if(d < radius) {\n        line = 1.0;\n\t} else {\n\t  // Anti-alias the edge.\n        line = 1.0 - smoothstep(d, radius, radius+AA);\n\t}\n   \t//float line =  smoothstep (radius/2.,radius/2.-AA,distance);\n    \n    //drawing lines\n    fragColor = vec4(col*line,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}