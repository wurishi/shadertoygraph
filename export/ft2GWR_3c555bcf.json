{"ver":"0.1","info":{"id":"ft2GWR","date":"1623755172","viewed":97,"name":"- Floating Circles-","username":"Mihaha","description":"In fact, this is just a distorted result from the function (cosx + cosy), plus coloring","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","distortion","circle","monochrome","soft","relax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n> by MihasGames, 15.06.2021 <\n(https://mihas-games.itch.io/)\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float map = 5. * pow(cos(iTime/5.), 2.) + 5.;\n    \n    // Pixel Normalizations //\n    vec2 uv01 = fragCoord.xy/iResolution.xy;\n    vec2 uv0 = uv01 - vec2(1, 1)/2.;\n    vec2 uv = uv0*map * vec2(iResolution.x / iResolution.y, 1);\n    uv /= length(uv0)+1.; // Length Distorsion\n\n    float xpos = sin(iTime/10.)*20., ypos = cos(iTime/8.4)*30.; // Camera Position\n    \n    // Main Distorsion and Filtering // \n    float col = pow(cos( uv.x + xpos + sin(uv.y) + uv0.x*1.5 ), 2.) + \n                pow(cos( uv.y + ypos - sin(uv.x/1.2) - uv.y*2. ), 2.);\n    \n    if (col > pow(sin(iTime/3.0), 2.)*0.3 + 0.7) col = 1.;\n    else col = 0.;\n    \n    float colmap = 0.5;\n    vec3 c = vec3(col+uv01.x*0.5+(sin(iTime/1.5)*0.5+0.5)*0.5, \n                  col+(1.-uv01.y)*0.5+(cos(iTime/1.5)*0.5+0.5)*0.5, 1);\n    \n    fragColor = vec4(c, 1.);\n}\n","name":"Image","description":"","type":"image"}]}