{"ver":"0.1","info":{"id":"ssXXRS","date":"1618762457","viewed":59,"name":"Scubeical Glow","username":"Hyeve","description":"Mostly a lighting & glow/fake transparency test. Looks pretty decent!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RSTP 256\n#define SDST 0.01\n#define MDST 64.\n#define rot(a) mat2(cos(a), -sin(a),sin(a), cos(a))\n\nvec3 glw = vec3(0);\n\nfloat bsdf(vec3 p, vec3 s)\n{\n    vec3 q = abs(p) - s;\n    return min(max(q.x, max(q.y,q.z)),0.0) + length(max(q,0.0));\n   \n}\n\nvec2 mpr(vec3 p)\n{\n    vec3 cp = p - vec3(0,1,5);    \n    cp.xz *= rot(iTime);\n    cp.xy *= rot(-iTime);\n    \n    float sd = length(cp) - 1.3;\n    \n    float d = min(bsdf(cp, vec3(1,1,1)), sd);\n    \n    return vec2(d, 1.);\n}\n\nvec2 mp(vec3 p)\n{\n\n    p.x = abs(p.x) - 2.;\n    \n    vec2 d = mpr(p);\n\n    d.x -= 0.3;\n\n    return d;\n}\n\nvec4 tr(vec3 ro, vec3 rd)\n{\n   vec2 d = vec2(0.);\n   vec3 p;\n   for(int i = 0; i < RSTP; i++)\n   {\n       p = ro + rd * d.x;\n       vec2 s = mp(p);\n       d.x += s.x;\n       d.y = s.y;\n       if(s.x < 0.2 && s.x > 0.1) glw += smoothstep(0., 0.4, s.x / length(glw)) * vec3(0.267,0.188,0.875);\n       \n       if(d.x > MDST || s.x < SDST) break;\n   }\n   if(d.x > MDST) {d.y = 0.;} else {glw = vec3(0);}\n   return vec4(p, d.y);\n}\n\nvec3 no(vec3 p)\n{\n    vec2 e = vec2(0.01, 0);\n    float d = mp(p).x;\n    vec3 norm = d - vec3(\n        mp(p - e.xyy).x,\n        mp(p - e.yxy).x,\n        mp(p - e.yyx).x\n    );\n    return normalize(norm);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(0,1,0), rd = normalize(vec3(uv.x,uv.y,1.));\n    vec4 p = tr(ro, rd);\n    \n    vec3 col = vec3(0.2);\n    \n    if(p.w == 1.)\n    {\n        vec3 ld = normalize(vec3(0,1,0) - p.xyz);\n        vec3 al = vec3(1,0,1);\n        float diff = max(0., dot(no(p.xyz), ld));\n        float fr = pow(1.-abs(dot(no(p.xyz),rd)),4.);\n        float sp = pow(max(dot(reflect(-ld,no(p.xyz)),-rd),0.),40.);\n        col = sp + al*(diff+fr);        \n    }\n    \n    col += min(glw * .25, 1.);\n    \n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}