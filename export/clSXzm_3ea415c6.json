{"ver":"0.1","info":{"id":"clSXzm","date":"1675807900","viewed":74,"name":"All Glory To The Hypnotoad","username":"starmole2","description":"Worship the Hypnotoad! ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["glory"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define numpupils 3\nvec3 pupils[numpupils]; // pos, size, hypnotoads have three\nvec3 pupilmin[numpupils] = vec3[numpupils](\n   vec3( .9,0.1,1.25),\n   vec3(0.0,.2,1.55),\n   vec3(-.9,0.0,1.25));\nvec3 pupilmax[numpupils] = vec3[numpupils](\n   vec3( 1.1,-0.2,.95),\n   vec3(0.0,-.1,1.35),\n   vec3(-1.1,-0.22,.97));\nfloat pupilfreq[numpupils] = float[numpupils](1.0,1.2,.9);\n\nvec4 colormap[] = vec4[](\n    vec4(137.0/255.0, 148.0/255.0, 0.0,          -1.0),\n    vec4(137.0/255.0, 148.0/255.0, 0.0,          -0.5),\n    vec4(253.0/255.0, 202.0/255.0, 59.0/255.0,   -0.3),\n    vec4(253.0/255.0, 202.0/255.0, 59.0/255.0,    0.0),\n    vec4(253.0/255.0, 202.0/255.0, 59.0/255.0,    0.01),\n    vec4(1.0, 81.0/255.0, 0.0,                    0.345),\n    vec4(1.0, 81.0/255.0, 0.0,                    0.5),\n    vec4(1.0, 81.0/255.0, 0.0,                    1.0),\n    vec4(0.0, 0.0, 0.0,                           1.4)\n);\n\nvec3 linear(vec3 srgb) {\n    return pow(srgb, vec3(2.2));\n}\n\nvec3 srgb(vec3 linear) {\n    return pow(linear, vec3(1.0/2.2));\n}\n\nuvec3 pcg3d(uvec3 v) {\n    v = v * 1664525u + 1013904223u;\n    v.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;\n    v = v ^ (v >> 16u);\n    v.x += v.y*v.z; v.y += v.z*v.x; v.z += v.x*v.y;\n    return v;\n}\n\nvec3 pcg3d(vec3 v) {\n    uvec3 uv = uvec3(abs(v + 10000.0));\n    uvec3 r = pcg3d(uv);\n    return vec3(r & uvec3(0xffff)) * 1.0/65535.0;\n}\n\nvec3 pcg3dlinear(vec3 v) {\n    vec3 pi = floor(v); \n    vec3 pf = v - pi;\n    vec3 a000 = pcg3d(pi + vec3(0.0, 0.0, 0.0));\n    vec3 a100 = pcg3d(pi + vec3(1.0, 0.0, 0.0));\n    vec3 a010 = pcg3d(pi + vec3(0.0, 1.0, 0.0));\n    vec3 a110 = pcg3d(pi + vec3(1.0, 1.0, 0.0));\n    vec3 a001 = pcg3d(pi + vec3(0.0, 0.0, 1.0));\n    vec3 a101 = pcg3d(pi + vec3(1.0, 0.0, 1.0));\n    vec3 a011 = pcg3d(pi + vec3(0.0, 1.0, 1.0));\n    vec3 a111 = pcg3d(pi + vec3(1.0, 1.0, 1.0));\n    vec3 ai00 = mix(a000, a100, pf.x);\n    vec3 ai10 = mix(a010, a110, pf.x);\n    vec3 ai01 = mix(a001, a101, pf.x);\n    vec3 ai11 = mix(a011, a111, pf.x);\n    vec3 aii0 = mix(ai00, ai10, pf.y);\n    vec3 aii1 = mix(ai01, ai11, pf.y);\n    return mix (aii0, aii1, pf.z);\n}\n\n\nvec3 getcolor(float t) {\n    if ( t<=colormap[0].w )\n        return linear(colormap[0].xyz);\n    if ( t>=colormap[colormap.length()-1].w ) \n        return linear(colormap[colormap.length()-1].xyz); \n    for ( int i=0; i<colormap.length()-1; i++ ) {\n        if ( t>=colormap[i].w && t<=colormap[i+1].w ) {\n            float tf = (t-colormap[i].w) / (colormap[i+1].w - colormap[i].w);\n            return mix(linear(colormap[i].xyz),linear(colormap[i+1].xyz),tf);\n        }\n    }\n    return vec3(0.0);\n}\n\nvoid animatePupils(float t) {\n    for ( int i=0; i<numpupils; i++ ) {\n        float tf = (sin((t+float(i))*pupilfreq[i]) + 1.0) *.5;\n        pupils[i] = mix(pupilmin[i], pupilmax[i], tf);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 spos = fragCoord/iResolution.xy * 2.0 - vec2(1.0); // normalize -1..1\n    spos.x *= iResolution.x / iResolution.y; // fix aspect\n    \n    float zoom = (cos(iTime*.134) + 1.0) * .25 + 1.0;\n    spos *= zoom;\n    \n    animatePupils(iTime);\n    \n    vec3 ocol = vec3(0.0);\n    \n    float field = -4.0;\n    \n    for ( int i=0; i<3; i++ ) {\n        vec2 d = spos - pupils[i].xy;\n        field += (1.0 / dot(d,d)) * pupils[i].z;\n        field += (pcg3dlinear(vec3(d*6.0,float(i))).x -.5) * .1;\n\n    }\n    \n    float extranoise = .5;\n    field += (pcg3dlinear(vec3(spos*12.0,0.0)).x -.5) * .18 * extranoise;\n    field += (pcg3dlinear(vec3(spos*100.0,30.0)).x -.5) * .06 * extranoise;\n    field += (pcg3dlinear(vec3(spos*800.0,30.0)).x -.5) * .03 * extranoise;\n\n    ocol = getcolor(field*.5);\n        \n    float eps = .02;\n    if ( false && field<eps && field>-eps )\n       ocol = vec3(1.0);\n     \n    float screennoise = 1.0;\n    ocol += (pcg3dlinear(vec3(spos*iResolution.xy/5.4,iTime))-vec3(.5)) * .1 * screennoise;\n\n    // Output to screen\n    fragColor = vec4(srgb(ocol),1.0);\n}","name":"Image","description":"","type":"image"}]}