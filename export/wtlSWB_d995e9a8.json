{"ver":"0.1","info":{"id":"wtlSWB","date":"1603917591","viewed":626,"name":"cas_filter","username":"myrkott","description":"Implementation of AMD's Contrast Adaptive Sharpening (CAS) filter. Use the slider to toggle between  the original image (left) and the sharpened image (right). Note that this version of the filter does not perform any upscaling, only sharpening.","likes":14,"published":1,"flags":0,"usePreview":1,"tags":["sharpening"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 srgb2lin(vec3 color)\n{\n\treturn color * color;    \n}\n\nvec3 lin2srgb(vec3 color)\n{\n \treturn sqrt(color);   \n}\n\n// Contrast Adaptive Sharpening (CAS)\n// Reference: Lou Kramer, FidelityFX CAS, AMD Developer Day 2019,\n// https://gpuopen.com/wp-content/uploads/2019/07/FidelityFX-CAS.pptx\nvec3 cas(sampler2D tex, ivec2 texcoord, float sharpness_knob)\n{\n    vec3 a = srgb2lin(texelFetch(tex, texcoord + ivec2(0.0, -1.0), 0).rgb);\n    vec3 b = srgb2lin(texelFetch(tex, texcoord + ivec2(-1.0, 0.0), 0).rgb);\n    vec3 c = srgb2lin(texelFetch(tex, texcoord + ivec2(0.0, 0.0), 0).rgb);\n    vec3 d = srgb2lin(texelFetch(tex, texcoord + ivec2(1.0, 0.0), 0).rgb);\n    vec3 e = srgb2lin(texelFetch(tex, texcoord + ivec2(0.0, 1.0), 0).rgb);\n\n    float min_g = min(a.g, min(b.g, min(c.g, min(d.g, e.g))));\n    float max_g = max(a.g, max(b.g, max(c.g, max(d.g, e.g))));\n    float sharpening_amount = sqrt(min(1.0 - max_g, min_g) / max_g);\n    float w = sharpening_amount * mix(-0.125, -0.2, sharpness_knob);\n\n    return (w * (a + b + d + e) + c) / (4.0 * w + 1.0);\n}\n\nfloat aastep(float edge, float x)\n{\n    float aawidth = 0.7 * fwidth(x);\n\treturn smoothstep(edge - aawidth, edge + aawidth, x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 texture_size = textureSize(iChannel0, 0);\n    ivec2 texcoord = ivec2(fragCoord.xy) % texture_size;\n    vec3 color_original = srgb2lin(texelFetch(iChannel0, texcoord, 0).rgb);\n    float sharpness_knob = 0.2; // adjusts the amount of sharpening, range [0,1]\n    vec3 color_sharpened = cas(iChannel0, texcoord, sharpness_knob);\n\n    float slider_pos = iMouse.z > 0.0 ? iMouse.x : iResolution.x / 2.0;\n    float slider_dist = fragCoord.x - slider_pos;\n    vec3 slider_color = srgb2lin(vec3(0.9, 0.9, 0.1));\n    vec3 output_color = slider_dist < 0.0 ? color_original : color_sharpened;\n    output_color = mix(slider_color, output_color, aastep(2.0, abs(slider_dist)));\n\n    fragColor = vec4(lin2srgb(output_color), 1.0);\n}","name":"Image","description":"","type":"image"}]}