{"ver":"0.1","info":{"id":"XdtXzf","date":"1460653372","viewed":236,"name":"flame demo","username":"hcf","description":"little demo \nexperiment\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["volumetricnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\n\nfloat map5( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)*iTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02;\n    f += 0.25000*noise( q ); q = q*2.03;\n    f += 0.12500*noise( q ); q = q*2.01;\n    f += 0.06250*noise( q ); q = q*2.02;\n    f += 0.03125*noise( q );\n    return f;\n\t\n}\n\nfloat map(vec3 p){\n    \n   p.x += (noise(p)*2.-1.)*0.3;\n   \n    float den = 1.0-smoothstep(0.,map5(vec3(0,0,p.y+iTime*5.))+step(0.,p.y)*p.y*0.5,length(p.xz));\n    return pow(den,3.)+(1.0-step(0.,p.y))*p.y*0.9;\n}\n\n\nmat3 setCamera(vec3 t,vec3 e,float a){\n\t\n    vec3 f = normalize(t-e);\n    vec3 ru = vec3(sin(a),cos(a),0);\n    vec3 r = normalize(cross(ru,f));\n    vec3 u = normalize(cross(f,r));\n    return mat3(r,u,f);\n}\n\nvec4 accumulation(vec4 sum,float den){\n\t\n    vec4 col = vec4( mix( vec3(1.0,0.95,0.8), vec3(den*2.,den,0.35), den ), den );\n\tcol.a *= 0.4;\n    col.rgb *= col.a;\n    return sum + col*(1.0-sum.a);\n}\n\nvec4 raymarch(vec3 ro,vec3 rd){\n\tfloat t = 0.0;\n    vec4 col = vec4(0.0);\n    for(float i = 0.;i<64.;++i){\n    \t\n        if(col.a > 0.99){\n        \tbreak;\n        }\n        \n        vec3 pos = ro+rd*t;\n        float den = map(pos);\n        if(den > 0.001){\n            col = accumulation(col,den);\n        }\n        \n        t += max(0.05,t*0.02);\n    }\n\t\n    return col;\n}\n\nvec4 render(vec3 ro,vec3 rd){\n\n    vec4 col = vec4(0);\n    \n    col = raymarch(ro,rd);\n    \n\treturn col;\n}\n\nfloat PI = 3.1415926;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    vec2 uv = (fragCoord.xy-iResolution.xy*0.5)/iResolution.y*2.;\n    \n    vec3 ro = vec3(0,0,2);\n    \n    vec3 rd = setCamera(vec3(0,0,-1),ro,PI)*normalize(vec3(uv,1));\n    \n    vec4 color = render(ro,rd);    \n        \n    fragColor = color;\n    \n}","name":"Image","description":"","type":"image"}]}