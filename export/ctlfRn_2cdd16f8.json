{"ver":"0.1","info":{"id":"ctlfRn","date":"1692551197","viewed":98,"name":"1.618 != 0.618 || 1.618 == 0.618","username":"Carandiru","description":"comparing the golden ratio and it's conjugate/inverse   1.618 (red)  vs  0.618 (blue)\n\nit might be a Stargate..... !!!\n\n~80s @ 75FPS\n","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["spiral","phi","goldenratio"],"hasliked":0,"parentid":"ct2yDd","parentname":"Single Spiral Galaxy"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// comparing the golden ratio and it's conjugate/inverse   1.618 (red)  vs  0.618 (blue)\n//\n// it might be a Stargate..... !!!\n//\n// ~80s @ 75FPS\n\n#define SCALE 1000.0f   // try different decades / magnitudes 10.0 100.0 100.0 1000.0 10000.0\n#define SZ 3.0          // and reset shader\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0.0);\n    \n    vec2 e0 = textureLod(iChannel0, uv, 0.0f).rb;\n    \n    vec2 e1 = vec2(0);\n    \n    vec3 offset; float samps = 0.0f;\n    for (offset.z = 12.0f; offset.z >= 0.0f; --offset.z) {\n        for (offset.y = -SZ; offset.y <= SZ; ++offset.y) {\n            for (offset.x = -SZ; offset.x <= SZ; ++offset.x) {\n                if (all(equal(vec2(0), offset.xy)))\n                    continue;\n                e1 += textureLod(iChannel0, uv + offset.xy/iResolution.xy, offset.z).rb;\n                ++samps;\n            }\n        }\n    }\n    \n    e1 /= samps;\n    \n    float levels = e0.x * iphi + e0.y * phi;\n    vec2 hi = abs(e1 - e0);\n    vec2 lo = (hi * phi);\n    \n    lo = lo - floor(lo/levels);\n    \n    hi = hi * SCALE * iphi;  // works like a resolution amplifier\n    \n    hi = hi - floor(hi/levels);\n    \n   // hi = hi / 1000.0f;\n    \n    hi = (hi + lo) * 0.5f;\n    hi = 1.0f/(1.0f + hi*hi);\n    \n    vec3 color = vec3(0);\n    \n    vec2 tt = vec2(phi, iphi);\n    \n    tt = mix(tt.xy, tt.yx, iTimeDelta*abs(fract(pow(phi_t, iphi)-pow(iphi_t, phi))));\n    color = vec3(hi.x * tt.x, 0.0f, hi.y * tt.y);\n    \n    fragColor = vec4(pow(color, vec3(1.0f/2.2f)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nfloat spiral(vec2 uv, vec2 polarUV) {\n    \n    float size = 25.0;\n    float len = polarUV.x*size;\n    float angle = polarUV.y;\n    \n    //SpiralAngle from 0 to infinty\n    float spiralAngle = t*angle;// + t*(PI2 * floor(len/PI2));\n    float a = pow(spiralAngle, -1.0f/max(0.000001, iphi_t));\n    float b = pow(spiralAngle, 1.0f/max(0.000001, iphi_t));\n    \n    spiralAngle = abs(b - a);\n    \n    float galaxyColorInput = len + spiralAngle;\n    \n    return(1.0f / max(0.000001, galaxyColorInput * galaxyColorInput) );\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n\n    float ar = iResolution.x / iResolution.y;\n    \n    uv.x *= ar;\n    \n    vec2 polarUV = vec2(length(uv)/((t - 50.0f)), atan(uv.y, uv.x));\n    \n    float s0 = spiral(uv, polarUV + vec2(0, phi_t * pi));\n    float s1 = spiral(uv, polarUV + vec2(0, iphi_t * pi));\n    \n    vec3 color = vec3(abs(s0 - s1));\n    \n    color = vec3(s0, 0, s1);//abs(color - vec3( (s0 + s1) * 0.5f ));\n\n    fragColor = vec4(pow(color, vec3(1.0f/2.2f)),1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.1415926\n#define pi2 6.283186\n#define e 2.71828\n#define phi 1.618034f\n#define iphi 0.618034f\n#define t (phi + iTime) // offset time start to start of spiral, otherwise shader is all white @ startup....\n#define phi_t (phi*t)   // 99% of phi still produces a white flash at start, 100% phi, artifact removed\n#define iphi_t (iphi*t)\n","name":"Common","description":"","type":"common"}]}