{"ver":"0.1","info":{"id":"ftlfD8","date":"1650815061","viewed":182,"name":"Pixel XOR Sorting 4x","username":"kastorp","description":"Experimenting parallel sorting of pixel by luminance.\nmouseable\n","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["pixel","xor","sorting"],"hasliked":0,"parentid":"stjcRt","parentname":"Pixel Sorting 4x"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"//pixel Sorting 4x by Kastorp\nvoid mainImage( out vec4 O, in vec2 U )\n{\n\tvec2 uv = U.xy / iResolution.xy;\n\tO = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//pixel XOR Sorting 4x by Kastorp\n\n//sorting network https://www.shadertoy.com/view/XsXGDX\n#define D 4 //if FPS<60, use D=2\n#define SW(a,b)  if((v[a].w)<(v[b].w)) {vec4 t = v[a]; v[a] =v[b]; v[b] = t; }\nvec4[2*D] sort(vec4[2*D] v){\n    SW(0,1); SW(2,3); SW(0,2); SW(1,3); SW(1,2); \n#if D>2\n    SW(4,5); SW(6,7); SW(4,6); SW(5,7); SW(5,6);\n    SW(0,4); SW(1,5); SW(1,4); SW(2,6); SW(3,7); \n    SW(3,6); SW(2,4); SW(3,5); SW(3,4);\n#endif\n    return v;\n}\n\n#define RR iResolution.xy //vec2(512)\nvoid mainImage( out vec4 O, in vec2 U )\n{   \n    //if(any(greaterThan(U,RR))) discard;\n    if(iFrame<20 || texelFetch(iChannel0,ivec2(RR-1.),0)==vec4(0.)){ \n        O.xyz= texture(iChannel1,U/RR).xyz;\n        O.w=length(O.xyz); //luminance\n        return;\n    }\n    float t=1.; \n    if(iMouse.z>0. && length(U-iMouse.xy)<RR.y*.05) t=1.5- .5* length(U/RR); //mouse alters luminance   \n    \n    ivec2 R=ivec2(RR);\n    int l= int(log2(RR.x*RR.y))-2, //maximum xor level\n        z=(iFrame/2)%l,zz=1<<z, //current xor level; also zz=1<<(2*z) works, with z<=l/2\n        ii = (int(U.x) + int(U.y)*R.x), //current position\n        i=ii/zz, //xor position\n        s= ((i&D)/D == (iFrame&1)) ?0:1, //sorting side s=0 left, S=1 right\n        m= s*D +(i&(D-1)), //relative position in sort array\n        h= min(i -(i&(D-1)),i -(i&(D-1))-s*D) ; //first position in array  \n                \n    vec4[2*D] P; //sorting array\n    for(int k=0;k<2*D;k++){\n         int j=(h+k)*zz + (ii%zz); //k-th absolute position\n         P[k]=texelFetch(iChannel0,ivec2(j%R.x,j/R.x),0)*t; //fill with previous values and applies luminance perturbation\n    }\n    \n    if(h>=0 && (h+D)*zz  < ((R.x*R.y)&((1<<24)-D*zz)))  O =sort(P)[m]; ///sort only if inside boundaries\n    else O=vec4(P[m]);   //otherwise keep order\n    \n}\n","name":"Buffer A","description":"","type":"buffer"}]}