{"ver":"0.1","info":{"id":"MtGcWw","date":"1536493787","viewed":1680,"name":"Tesseract 4D raymarcher","username":"NuSan","description":"Just a little test to raymarch edges of an hypercube in 4D and multisample along the w direction to reveal it.","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["raymarcher","4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define SPHERE_GRID 0\n#define HIGHLIGHT_3D_SLICE 1\n#define USE_MAX 0\n#define SAMPLES_W 30\n#define MAXSTEPS 30\n\n#define time iTime\n#define v2Resolution iResolution\n#define out_color fragColor\n\nfloat sph(vec4 p, float r) { return length(p)-r; }\nfloat cyl2(vec2 p, float r) {return length(p)-r; }\nfloat box(vec4 p, float s) { vec4 ap = abs(p); return min(length(max(vec4(0),ap-s)), max(max(ap.x,ap.y),max(ap.z,ap.w))-s); }\nfloat box2(vec2 p, float s) { vec2 ap = abs(p); return min(length(max(vec2(0),ap-s)),max(ap.x, ap.y)-s); }\n\nvec4 rep(vec4 p, vec4 s) {\n  return (fract(p/s-0.5)-0.5)*s;\n}\n\nvec4 rid(vec4 p, vec4 s) {\n  return floor(p/s-0.5);\n}\n\nmat2 rot(float a) {\n  float ca=cos(a);float sa=sin(a);\n  return mat2(ca,sa,-sa,ca);\n}\n\n\nfloat map(vec4 p, float size) {\n\n  float spd = 0.6;\n  \n  p.yz *= rot(time*0.05);\n  p.xw *= rot(time * spd);\n  p.yw *= rot(time*0.2*spd);\n  p.xw *= rot(time*0.7*spd);\n  p.zw *= rot(time*0.3*spd);\n  \n  //p.xz *= rot(time*0.2);\n\n#if SPHERE_GRID\n  // grid inside a sphere\n  float d = sph(p, 2.0);\n\n  vec4 rp2 = rep(p, vec4(1.0));\n\n  //float size = 0.24;\n  size*=0.55;\n  float c = box2(rp2.xz, size);\n  c = min(c, box2(rp2.xy, size));\n  c = min(c, box2(rp2.yz, size));\n  c = min(c, box2(rp2.xw, size));\n  c = min(c, box2(rp2.yw, size));\n  c = min(c, box2(rp2.zw, size));\n  d = max(d, -c);\n#else\n    \n  // tesseract\n  float d = box(p, 1.0);\n\n  vec4 rp = p;//rep(op, vec4(0.4));\n  //float size = 0.95;\n  float c = box2(rp.xz, size);\n  c = min(c, box2(rp.xy, size));\n  c = min(c, box2(rp.yz, size));\n  c = min(c, box2(rp.xw, size));\n  c = min(c, box2(rp.yw, size));\n  c = min(c, box2(rp.zw, size));\n\n  d = max(d, -c);\n\n#endif\n  \n  return d;\n}\n\nvec3 norm(vec4 p, float size) {\n  vec2 off=vec2(0.01,0);\n  return normalize(vec3(map(p+off.xyyy, size)-map(p-off.xyyy, size),map(p+off.yxyy, size)-map(p-off.yxyy, size),map(p+off.yyxy, size)-map(p-off.yyxy, size)));\n}\n\nfloat rnd(vec2 uv) {\n  return fract(dot(sin(uv*vec2(172.412,735.124)+uv.yx*vec2(97.354,421.653)+vec2(94.321,37.365)),vec2(4.6872,7.9841))+0.71243);\n}\n\nvec3 GetCol(vec2 uv, float motion, float size) {\n\n  \n  vec4 s=vec4(0,0,-5,motion);\n  vec4 r=normalize(vec4(-uv, 1,0));\n\n  float dd = 0.0;\n  vec4 p = s;\n  float at=0.0;\n  float show=1.0f;\n  for(int i=0; i<MAXSTEPS; ++i) {\n    float d = map(p, size);\n    if(d<0.001) {\n      break;\n    }\n    p+=r*d;\n    dd+=d;\n    if(dd>100.0) {\n      show=0.0f;\n      break;\n    }\n    at += exp(-d)*0.8;\n  }\n\n  vec3 n=norm(p, size);\n  vec3 l=normalize(vec3(-1));\n  float lum=max(0.0, dot(l,n));\n\n  vec3 col = vec3(0);\n  col += lum * 2.0;\n  col += lum * pow(max(0.0, dot(n, normalize(-r.xyz+l))), 10.0) * vec3(1.0,5.0,10.0);\n  col += (n.y*0.5+0.5) * vec3(0.1,0.5,1.0);\n  col *= show*2.0/dd;\n\n  col += vec3(0.8,0.2,0.2)*0.03/exp(-at*0.25);\n  \n  return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / v2Resolution.x, fragCoord.y / v2Resolution.y);\n  uv -= 0.5;\n  uv /= vec2(v2Resolution.y / v2Resolution.x, 1);\n\n  float str = 1.7;\n  float off = rnd(uv);\n  vec3 col = vec3(0.0);\n  float size = 0.87+sin(time*0.2)*0.1;\n  \n  for(int i=0; i<SAMPLES_W; ++i) {\n\n    float motion = (float(i)+off)/float(SAMPLES_W);\n    motion = motion * 2.0 - 1.0;\n#if HIGHLIGHT_3D_SLICE\n    motion = motion*motion*sign(motion);\n#endif\n    motion *= str;\n\n    vec3 cur = GetCol(uv, motion, size);\n#if USE_MAX\n    col = max(col, cur);\n#else\n    col += cur;\n#endif\n  }\n\n#if USE_MAX\n\tcol *= size*0.4;    \n#else\n\tcol *= size*4.0/float(SAMPLES_W);\n#endif\n    \n  out_color = vec4(col.rgb, 1);\n}","name":"Image","description":"","type":"image"}]}