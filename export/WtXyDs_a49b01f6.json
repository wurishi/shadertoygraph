{"ver":"0.1","info":{"id":"WtXyDs","date":"1593416073","viewed":117,"name":"Restylized Shoreline v2","username":"miko3k","description":"version 2?\n\nversion 1: https://www.shadertoy.com/view/WlscR2","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["water","stylized","shore"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265369\n\n\n/*\nvec3 mixUnstylizedShoreline(vec3 ground, vec3 water, vec2 uv, float time) {\n    const vec3 highlight = vec3(0.7, 0.9, 0.9);\n    float shore = calculateShore(time, uv.x);\n    float shore0 = calculateShore(floor(time), uv.x);\n   \tfloat v = uv.y;\n    \n\t// should be rewritten into steps, probably\n    if(v > shore) {        \n        if(v > shore0) {\n            return ground;\n        } else {\n            return ground * (fract(time) * 0.4 + 0.6);\n        }\n    } else {\n        float groundFactor = clamp((shore - v)*4.0 + 0.5, 0.5, 1.0);\n        return mix(ground, water, groundFactor);\n        //float highlightFactor = pow(clamp((shore - v)*32.0, 0.0, 1.0), 2.0);\n        //return mix(highlight, mix(ground, water, groundFactor), highlightFactor);\n        \n    }\n}\n*/\n\n// wave period is 1\nfloat calculateShore(float time, float u) {\n    const float waveSpeed = 3.0;\n    const float waveHeight = 0.2;\n    const float wiggleDistance = 0.1;\n    \n\tfloat shore = waveHeight * (sin(u * PI * 4. + time*waveSpeed) + sin(u * PI * 2.)) * 0.25;\n    \n    float wiggle = wiggleDistance * cos(time * 2.0*PI);\n    \n\treturn wiggle + shore + 0.5;\n}\n\n\nvec3 mixUnstylizedShoreline(vec3 ground, vec3 water, vec2 uv, float time) {\n    const vec3 highlight = vec3(0.7, 0.9, 0.9);\n    float shore = calculateShore(time, uv.x);\n    float shore0 = calculateShore(floor(time), uv.x);\n   \tfloat v = uv.y;\n    \n        float groundFactor = clamp((shore - v)*4.0, 0.0, 1.0);\n        return mix(ground, water, groundFactor);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n\t\n    //vec3 wtr = mix(texture(iChannel0, uv).xyz, vec3(0.1, 0.5, 0.75), .8);\n    vec3 wtr = colouredCell(uv*10.0, iTime);\n\tvec3 snd = mix(texture(iChannel1, uv).xyz, vec3(0.8,0.8,0.2), .8);\n    \n\tfragColor = vec4(mixUnstylizedShoreline(snd, wtr, uv, iTime / 4.0), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// taken from https://www.shadertoy.com/view/3tlcDS \nfloat f(inout vec2 p, mat2 m, float t) {\n    p.x += sin(t);\n    p.y += cos(t);\n    float res = length(fract(p *= m * .1) - .5);\n    return res;\n}\n\nfloat cell(vec2 p, float t) {\n\n    mat2 m =  mat2(7., -6., 5., 7.);\n    \n   \n    // Very cheap wrappable cellular tiles.\n    return min(min(f(p,m,t), f(p,m,t)), f(p,m,t));\n}\n\nvec3 colouredCell( vec2 p, float t){\n    float a1 = cell(p,t)*2.0;\n\n    vec3 base = vec3(0.1, 0.5, 0.75);\n    vec3 high = vec3(0.7, 0.9, 0.9);\n    \n    return mix(base, high, pow(a1, 5.0));\n    \n}\n\n","name":"Common","description":"","type":"common"}]}