{"ver":"0.1","info":{"id":"ttc3WB","date":"1577417392","viewed":364,"name":"red car","username":"lzjseed","description":"Drag the red  car to climb the mountain. And Release it will creep down.","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["2d","terrain","cartoon","fluid","aa","funny","physics","smooth","outline","reflect","refract","car"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec3 drawScene(vec2 pos,vec2 mouse)\n{\n    vec3 outlineCol = vec3(0.0);\n    vec3 slopeCol = vec3(0.31,0.65,0.25);\n    vec3 slopebgCol = vec3(0.41,0.675,0.45)*1.36;\n    vec3 carCol = vec3(1.0,0.0,0.0);\n    vec3 wheelCol = vec3(0.0,0.0,0.0);\n    vec3 wheelCol2 = vec3(0.6,0.4,1.0);\n    vec3 col;\n    \n    //background\n    col = slopebgCol + 0.3*bgTerrain(pos*0.65);\n    \n    col = mix(slopeCol,col,slopebg(pos));\n    col = mix(outlineCol,col,slope(pos));\n    \n    //car\n    vec2 carPos = vec2(mouse.x,slopepos(mouse.x));\n    float degree = slopedegree(mouse.x); \n    \n    vec2 posr = rotate(degree) * (pos - carPos) + carPos - vec2(0.0,0.045);\n    \n    vec2 windowpos = carPos+ vec2(0.03,0.007);\n    vec2 poswr = rotate(-0.90) * (posr - windowpos) + windowpos ;\n    \n    col = mix(carCol,col,trapezoid(posr,carPos,vec2(0.06,0.03),carPos + vec2(0.02,0.03),carPos + vec2(0.04,0.005),carPos + vec2(-0.034,0.03),carPos + vec2(-0.04,0.024)));\n    col = mix(wheelCol,col,wheel(posr - (carPos - vec2(0.03,0.03)),0.015));\n    col = mix(wheelCol,col,wheel(posr - (carPos - vec2(-0.03,0.03)),0.015));\n    \n    col = mix(wheelCol2,col,wheel(posr - (carPos - vec2(0.03,0.03)),0.005));\n    col = mix(wheelCol2,col,wheel(posr - (carPos - vec2(-0.03,0.03)),0.005));\n    \n    col = mix(vec3(0.22,0.45,1.0),col,box(poswr - windowpos,vec2(0.015,0.007))); \n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y;\n\tvec2 mouse = texelFetch(iChannel0,ivec2(0,0),0).xx; //iMouse.xy / iResolution.y;\n    \n    vec2 pos = uv*2.0 - vec2(0.0,0.5);\n    \n    float t = 0.02*sin(iTime * 2.0 + uv.x*15.0) + 0.01 * sin(iTime * 1.0 + uv.x*65.0);\n    \n    vec3 riverCol = mix(vec3(1.0),vec3(0.15,0.6,1.8),1.0-smoothstep(t*0.25,t*0.25+0.01,pos.y));\n    \n    pos = pos.y < 0.0 ? vec2(pos.x,(-pos.y * 1.4 - t)) : pos;\n    \n    vec3 col = drawScene(pos,mouse);\n    \n   \tcol *= riverCol;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float box(vec2 p,vec2 s)\n{\n    vec2 b = abs(p);\n    vec2 a = max(b - s,vec2(0.0));\n    \n    //vec2 c = b / s;\n    \n   \t//float d = length(a * vec2(step(c.y,c.x),step(c.x,c.y)));\n    float d = length(a);\n    \n    return smoothstep(0.0,0.005,d);\n}\n\nfloat trapezoid(vec2 p ,vec2 m,vec2 s,vec2 t1,vec2 t2,vec2 t3,vec2 t4)\n{\n    float g1 = box(p - m,s);\n    \n    vec2 t12 = t2 - t1;\n    vec2 t1p = p - t1;\n    \n    vec2 t34 = t4 - t3;\n    vec2 t3p = p - t3;\n    \n    float g2 = t12.x * t1p.y - t12.y * t1p.x;\n    float g3 = t34.x * t3p.y - t34.y * t3p.x;\n    \n    return min(g1 + smoothstep(0.0,0.00015,g2) + smoothstep(0.0,0.00005,-g3),1.0);\n}\n\nfloat wheel(vec2 p,float s)\n{\n   return smoothstep(0.0,0.001,length(p) - s);\n}\n\nfloat curveTerrain(float p)\n{\n    return sin(p*6.0) + 2.5 + 0.1*sin(p*30.0)+ 0.3*cos(p*10.0)+ 0.05*sin(p*40.0+0.03);\n}\n\nfloat bgTerrain(vec2 p)\n{\n    float y = 0.33*sin(p.x*3.1415926*3.0)+ 0.025*cos(p.x*40.0) + 3.245;\n    \n    float y2 = 0.25*sin(p.x*3.1415926*2.150) + 4.025;\n    \n    return 0.75*smoothstep(-0.02,0.03,6.0 * p.y - y) + 0.65*smoothstep(-0.06,0.06,6.0 * p.y - y2); \n}\n\nfloat slopedegree(float p)\n{\n    float dx = 1e-5;\n    float dd = (curveTerrain(p + dx) - curveTerrain(p)) / dx / (2.0*3.1415926);\n    \n    return atan(dd);\n}\n\nfloat slope(vec2 p)\n{\n    float y = curveTerrain(p.x);\n    \n    return smoothstep(0.0,0.03/cos(slopedegree(p.x)),abs(6.0 * p.y - y)); \n}\n\nfloat slopebg(vec2 p)\n{\n    float y = curveTerrain(p.x);\n    \n    return smoothstep(0.0,0.03,6.0 * p.y - y); \n}\n\nfloat slopepos(float p)\n{\n    float y = curveTerrain(p);\n    return 1.0 / 6.0 * y;\n}\n\nmat2 rotate(float d)\n{\n    float s = sin(d),\n          c = cos(d);\n    \n   \treturn mat2(c,-s,s,c);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy / iResolution.y * 2.0;\n    \n    vec2 pos;\n \n    if(iFrame == 0)\n    {\n        pos.x = 0.5;\n        pos.y = 0.03;\n    }\n    else\n    {\n        if(iMouse.z > 0.0)\n        {\n            pos.x = mouse.x;\n        }\n        else\n        {\n            pos = texelFetch(iChannel0,ivec2(0,0),0).xy;\n\t\t\t\n            float dx = 0.0001;\n            \n            float y1 = slopepos(pos.x - dx);\n            float y2 = slopepos(pos.x + dx);\n\n            pos.y -= 0.0015*(y2 - y1) / (2.0 * dx);\n            pos.y *= 0.96;\n        }\n    }\n    \n    pos.x += pos.y;\n    \n    fragColor = vec4(pos,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}