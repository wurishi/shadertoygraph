{"ver":"0.1","info":{"id":"4cdyDr","date":"1730994170","viewed":107,"name":"Beehive - 2","username":"wormtilda","description":"fancy","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["cyberpunk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\n//from https://iquilezles.org/articles/palettes/\n//and http://dev.thi.ng/gradients/\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d )\n{\n    return a + b*cos( 6.283185*(c*t+d) );\n}\n\nvec3 hex_palette(float t) {\n    vec3 a = vec3(1.0,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(1.0,1.0,1.0);\n    vec3 d = vec3(0.0,0.10,0.20);\n    vec3 col = palette(t, a, b, c, d);\n    return col;\n}\n\n\nvec3 hex_palette3(float t) {\n    vec3 a = vec3(0.718, 0.478, 0.628);\n    vec3 b = vec3(0.288, 0.528, -0.102);\n    vec3 c = vec3(0.558, 0.498, 0.438);\n    vec3 d = vec3(0.548, 0.548, 0.008);\n    vec3 col = palette(t, a, b, c, d);\n    return col;\n}\n\n\nvec3 hex_palette2(float t) {\n    vec3 a = vec3(0.748, 0.688, 0.778);\n    vec3 b = vec3(0.228, 0.228, -0.282);\n    vec3 c = vec3(1.448, 0.468, 0.438);\n    vec3 d = vec3(0.518, 0.578, 0.008);\n    vec3 col = palette(t, a, b, c, d);\n    return vec3(clamp(col.x, 0.0, 1.0), clamp(col.y, 0.0, 1.0), clamp(col.z, 0.0, 1.0));\n}\n\n\nfloat remap(float x, float i_s, float i_e, float o_s, float o_e) {\n    return o_s + ((x - i_s)/(i_e - i_s))*(o_e-o_s);\n}\n\n\nfloat inBeehive(float u, float v, float sqh, float borderWidth) {\n   bool up = abs(v - 0.5) <= ((1.0 - (sqh+borderWidth/2.0)))*(0.5 - abs(u - 0.5)) + (sqh+borderWidth/2.0)/2.0;\n   bool lo = abs(v - 0.5) <= ((1.0 - (sqh+borderWidth/2.0)))*(0.5 - abs(u - 0.5)) + (sqh-borderWidth/2.0)/2.0;\n   float t = (abs(v - 0.5) - ((1.0-sqh)*(0.5 - abs(u - 0.5)) + sqh/2.0 - borderWidth/2.0));\n   t = clamp(t/(borderWidth/2.0), 0.0, 1.0);\n   bool h = ((borderWidth/2.0 <= u) && (u <= 1.0-(borderWidth/2.0)));\n   float m = clamp((1.0-abs(v-0.5f)/(borderWidth/2.0)), 0.0, 1.0);\n   t = max(t, m);\n   float b = max(min((u/(borderWidth/2.0)), 1.0f)*min(float((1.0-u)/(borderWidth/2.0)), 1.0), 0.0);\n   //not on border\n   return clamp(max(t, 1.0 - b), 0.0, 1.0);\n}\n\n\nfloat dist(float x1, float y1, float x2, float y2) {\n    return sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1));\n}\n\nvec3 remap(vec3 x, float i_s, float i_e, float o_s, float o_e) {\n    return o_s + ((x - i_s)/(i_e - i_s))*(o_e-o_s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float len = min(iResolution.x, iResolution.y);\n    float ud = fragCoord.x/len;\n    float u = ((uv.x - 0.5)*2.0);//*(iResolution.x/len);\n    float v = fragCoord.y/min(iResolution.x, iResolution.y);\n    v = (v - 0.5);\n    \n    \n    float scale_x = 5.0;\n    float scale_y = 5.0;\n    float sqh = 0.0;\n    float borderWidth = 1.0;\n    \n    v += 0.04*sin(((u+0.02*iTime)*4.0 + 0.5)*3.141592);\n    u += 0.02*sin(((v+0.05*iTime)*4.0 + 0.5)*3.141592);\n    u *= 1.0 - 0.1*((sin(((u)*2.0 + 0.5)*3.141592)+1.0)/2.0);\n    \n    \n    float warp = 0.0f;\n    \n    float off = sin(3.141592*(uv.x + 1.0)) + 1.0;\n\n    v = min(v/(1.0 - warp*off*0.5), 1000.0);\n    u = min(u/(1.0 - warp*off*0.7), 1000.0);\n\n    \n    u *= scale_x;\n    v *= scale_y;\n   \n    \n    float u_tot = u;\n    float v_tot = v;\n   \n    u = fract(u + 1.0f);\n    v = mod(v, 1.0 + sqh);\n    \n    float u2 = u + 0.5;\n    float v2 = v_tot - (sqh + ((1.0-sqh)/2.0));//, 1.0 + sqh + borderWidth);\n    \n    float u2_tot = u_tot + 0.5;\n    float v2_tot = v2;\n    \n    u2 = fract(u2);\n    v2 = mod(v2, 1.0 + sqh);\n    \n    // Time varying pixel color\n    vec3 border_dist = vec3(inBeehive(u, v, sqh, borderWidth)*inBeehive(u2, v2, sqh, borderWidth));\n    float uv_hex_dist = inBeehive(u, v, sqh, 1.0);\n    float uv2_hex_dist = inBeehive(u2, v2, sqh, 1.0);\n    vec3 hex_dist = vec3(1.0 - clamp((uv_hex_dist*uv2_hex_dist)/(1.0-borderWidth/2.0), 0.0, 1.0));\n    vec3 circle_dist = 1.0 - vec3(min(dist(u, v, 0.5, 0.5)*0.5, dist(u2, v2, 0.5, 0.5)*0.5));\n    hex_dist = (hex_dist+circle_dist)/2.0;\n    //hex_dist = remap(hex_dist, 0.1, 1.0, 0.2, 1.5);\n    hex_dist = hex_dist*(float(border_dist.x <= 0.0));\n    border_dist = remap(border_dist, 0.0, 1.0, 0.2, 1.0);\n    \n    float d = remap(hex_dist.x + border_dist.x, 0.5, 1.0, 0.0, 1.0);\n    \n    \n    float b = clamp(pow(d, 3.0), 0.0, 1.0);\n    float c = abs(d - (0.8*((sin(iTime)+1.0)/2.0) + 0.4*(cos(u_tot + v_tot - iTime)+1.0)/2.0));\n    \n    c = 0.1*b + (1.0 - c*6.0);\n    c += d*0.25;\n    //c = clamp(c, 0.0, 1.0);\n    c = 0.4/(1.0-min(c, 0.999));\n    c = clamp(c, 0.0, 1.0);\n    \n    vec3 col = 1.0*(0.4*c+0.6)*hex_palette2(c);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}