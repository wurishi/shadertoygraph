{"ver":"0.1","info":{"id":"tddfDM","date":"1605308748","viewed":140,"name":"Dancing Flowers & Stars","username":"marcelfernandez13","description":"Flowers dancing with my favorite song! \n\nBased on BigWings tutorial: https://www.youtube.com/watch?v=r1UOB8NVE8I  \n\n\n","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["flower","star","pattern","polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XlXSzn","filepath":"https://soundcloud.com/saintjhn/saint-jhn-roses-imanbek-remix","previewfilepath":"https://soundcloud.com/saintjhn/saint-jhn-roses-imanbek-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846264338327950288\n\n// rotSize -1 = right, 1 = left\nvec2 polarCoords(in vec2 cartCoords, in float rotSize) {\n    // Polar coords x = angle from ydir, y coord is the distance to point p \n    vec2 pc = vec2(atan(cartCoords.x, cartCoords.y), length(cartCoords));\n    \n    // Because atan return values from -PI to PI, to convert this to\n    // 0 to 1 we do this\n\n    // Set this to 0 to turn off the animation\n    float rotationOffset = iTime * .12 * rotSize;\n    return vec2(pc.x / (2. * PI) + 0.5 + rotationOffset, pc.y);\n}\n\nfloat renderFlower(in vec2 uv, in float flowerPoints, in float petalSize, in float centerOffset) {\n    float x = uv.x * flowerPoints;\n    float m = min(fract(x), fract(1. - x));\n\n    return smoothstep(0., .1, m * petalSize + centerOffset - uv.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.xy - .5 * iResolution.xy)  / iResolution.y;\n    float screenSide = step(.0, uv.x);\n\n    vec3 col = 0.5 + 0.5 * cos((iTime + 2. * uv.x) + uv.xyx + vec3(0, 2, 4));\n    \n    vec2 uv2 = uv;\n\n    float s1 = max(sin(iTime + .0), -.5) +  pow(sin(iTime * 7.), 6.) * .4;\n    float s2 = sin(iTime + 10.) +  pow(sin(iTime * 7.), 6.) * .2;\n    float s3 = max(sin(iTime + 5.), 0.3) +  pow(sin(iTime * 7.), 6.) * .2;\n    \n    float flowers = renderFlower(polarCoords(uv - vec2(0.5,  .2), 1.), floor(max(5. + sin(iTime * .2) * 3., 4.)), .3 * (1. - s2), .2);\n    flowers += renderFlower(polarCoords(uv - vec2(0.6,  -.3), 1.), floor(max(5. + sin(iTime * .2) * 3., 4.)), .3 * s2, .2);\n    flowers += renderFlower(polarCoords(uv2 + vec2(0.5,  -.3), 1.), floor(max(4. + sin(iTime * .1) * 6., 4.)), .3 * s3, .2);\n    flowers += renderFlower(polarCoords(uv2 + vec2(0.6,  + .2), -1.), floor(max(4. + sin(iTime * .1) * 6., 4.)), .5 * (1. - s3), .2);\n    flowers += renderFlower(polarCoords(uv, -1.), floor(max(5. + sin(iTime * .3) * 2., 4.)), .3 *  1./ s1, .3);\n\n    fragColor = vec4(col * flowers, 1.0);\n}","name":"Image","description":"","type":"image"}]}