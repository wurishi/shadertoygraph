{"ver":"0.1","info":{"id":"DdVBR3","date":"1698446973","viewed":108,"name":"UFFFD barebones starter 2023","username":"ufffd","description":"simple shader with my opinionated set of starter functions and format","likes":0,"published":3,"flags":16,"usePreview":0,"tags":["template"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R (iResolution.xy)\n\nvoid mainImage( out vec4 color, in vec2 xy ) {\n    vec2 uv = xy/R;\n    vec2 uvc = (xy-R/2.)/R.y;\n\n    vec3 col = uvc.xyx;\n    #if DEBUG\n        col.b = 1.;\n    #endif\n    \n    if (keyDown(KEY_SPACEBAR))\n        col = vec3(1.);\n\n    color = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//-- dev controls --//\n#define DEBUG 0\n#define SPEED 1.\n\n//-- constants --//\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\n//-- time defines--//\n// T is time controlled by SPEED\n#define T (iTime*SPEED)\n// sT is sinusoidal time - ranges from 0 to 1 and back over time\n#define sT (tanh(fract(T)*PI*2.-PI)/2.+0.5 + floor(T))\n// mT is modulo time - from 0 to 1 cyclically over time\n#define mT (fract(T))\n\n//--smoothsteps--//\n#define S smoothstep\n#define SS(a,b,c) S(a-b,a+b,c)\n\n//--misc utility--//\n#define rot(a)      mat2( cos(a), -sin(a), sin(a), cos(a) )\nbool nearly(in float a, in float b) {return abs(a - b) < 0.001;}\nbool nearly(in float a, in float b, in float k) {return abs(a - b) < k;}\nfloat luminance(vec3 c) {return dot(c, vec3(.2126, .7152, .0722));}\n\n//--fabrice's hsv2rgb--//\nvec3 hsv2rgb_smooth( in vec3 c ){vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );rgb = rgb*rgb*(3.0-2.0*rgb);return c.z * mix( vec3(1.0), rgb, c.y);}\nvec3 rgb2hsv(vec3 c){vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));float d = q.x - min(q.w, q.y);float e = 1.0e-10;return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);}\n\n// normalized functions - return 0 to 1\nfloat nmod(in float x){return mod(x,1.);}\nfloat nsin(in float x){return sin(x)*0.5+0.5;}\nfloat nclamp(in float x){return clamp(x,0.,1.);}\nvec2 nclamp(in vec2 x){return clamp(x,0.,1.);}\nvec3 nclamp(in vec3 x){return clamp(x,0.,1.);}\nvec4 nclamp(in vec4 x){return clamp(x,0.,1.);}\n\n//--random & noise--//\nfloat rand(vec2 n) {return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);}\nfloat noise(in vec2 p){vec2 ip = floor(p);vec2 u = fract(p);u = u*u*(3.0-2.0*u);float res = mix(mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);return res*res;}\nvec4 permute(vec4 x) {return mod((34.0 * x + 1.0) * x, 289.0);}\n//--hoskins hash--//// Hash without Sine\n// MIT License... Copyright (c)2014 David Hoskins.[license copy below]*/\nfloat hash11(float p){p = fract(p * .1031);p *= p + 33.33;p *= p + p;return fract(p);}\n\n//--Keyboard Controls *NOTE: requires iChannel3 be set to keyboard*--//\n#define key(k,mode) ( texelFetch( iChannel3, ivec2(k,mode), 0 ).x > .5 )\n#define keyDown(k) key(k,0)\n#define KEY_SPACEBAR 32\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* MIT License Copy:\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.*/","name":"Common","description":"","type":"common"}]}