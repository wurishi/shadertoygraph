{"ver":"0.1","info":{"id":"dtB3zR","date":"1672735037","viewed":44,"name":"StudyShader #1","username":"MKryloff","description":"Shader from the ArtOfCode tutorial ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["studying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define blur 0.01\n#define size 1.0\n#define speed 4.0\n#define pi 3.1415926535\n\nmat2 rotate2d(float _angle)\n{\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nfloat Circle(float r, vec2 uv, vec2 p)\n{\n    float c = length(uv - p);\n    return smoothstep(r, r - blur, c);\n}\n\n\nfloat Smile(vec2 uv, vec2 p, float s)\n{\n    uv -= p;  \n    uv /= s;\n    uv *= rotate2d(iTime * speed);\n// Head\n    float c = Circle(0.3, uv, vec2(0.0));\n\n// Smile\n    c -= Circle(0.25, uv, vec2(0.0));\n    c += Circle(0.26, uv, vec2(0.0, 0.04));\n    c = clamp(c, 0.0, 1.0);\n    \n// Eyes\n    c -= Circle(0.1, uv, vec2(-0.15, 0.1));\n    c -= Circle(0.1, uv, vec2(0.15, 0.1));\n    \n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float xCoef = iResolution.x / iResolution.y;\n    uv.x *= xCoef;\n    \n    float time = iTime * speed;\n    \n    float x = ((xCoef) / 2.0) + cos(time) * ((xCoef - 0.6) / 2.0);\n    float y = 0.5 + sin(time) * 0.2;\n    \n    float c = Smile(uv, vec2(x, y), size);\n    \n    float x2 = ((xCoef) / 2.0) + cos(time + pi) * ((xCoef - 0.6) / 2.0);\n    float y2 = 0.5 + sin(time + pi) * 0.2;\n    \n    c += Smile(uv, vec2(x2, y2), size);\n    \n    vec3 res = c * vec3(1.0, 1.0, 0.0);\n\n    fragColor = vec4(res, 1.0);\n}","name":"Image","description":"","type":"image"}]}