{"ver":"0.1","info":{"id":"dsfBRX","date":"1688992054","viewed":74,"name":"FBM Terrain Generation","username":"Neervana","description":"Terrain generation based on FBM + color palette","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","perlin","proceduralgeneration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// HIGHER IS MORE\n#define DEFINITION 8.\n// HIGHER IS MORE\n#define SHATTEREDNESS 2.75\n// LOWER IS MORE, values far from 0.5 lower the definition\n#define INLANDNESS 0.475\n\n// RANDOM FUNCTIONS TAKEN FROM THE BOOK OF SHADERS\n\nfloat random (in vec2 st) {\n    return fract(cos(sin(dot(st.xy,\n                         vec2(12.9898,78.233))))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// UNUSED\nfloat triangeWave( in float t )\n{\n    \n    const float period = 20.;\n    \n    return 2. * abs( t/period - floor(t/period + 1./2.) );\n\n}\n\nconst int NCOLORS = 7;\n\n// blue color palette\n/*\nvec4 palette[int(NCOLORS)] = vec4[NCOLORS](\nvec4(0.02745098, 0.40784314, 0.54901961, 1.0),\nvec4(0.09803922, 0.5254902, 0.68627451, 1.0),\nvec4(0.31372549, 0.71372549, 0.80392157, 1.0),\nvec4(0.2745098, 0.80784314, 0.79215686, 1.0),\nvec4(0.54117647, 0.91764706, 0.91372549, 1.0),\nvec4(0.7372549, 0.97254902, 1.0, 1.0)\n);\n*/\n\n\n// terrain color palette\nvec4 palette[int(NCOLORS)] = vec4[NCOLORS](\nvec4(0.89803922, 0.85098039, 0.76078431, 1.0),\nvec4(0.44705882, 0.32941176, 0.15686275, 1.0),\nvec4(0.25490196, 0.59607843, 0.03921569, 1.0),\nvec4(0.96470588, 0.84313725, 0.69019608, 1.0),\nvec4(0.2745098, 0.80784314, 0.79215686, 1.0),\nvec4(0.09803922, 0.5254902 , 0.68627451, 1.0),\nvec4(0.02745098, 0.40784314, 0.54901961, 1.  )\n);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // scale for aspect ratio\n    uv.x *=  iResolution.x / iResolution.y;\n    \n    // zoom out a bit \n    uv *= 5.0;\n    \n    float density = 0.0;\n    \n    // shift to the upper-right\n    uv += iTime / 5.;\n    \n    for(float i = 0.; i < DEFINITION; i++)\n    {\n        density += pow(INLANDNESS, i + 1.0) * noise(uv * pow(SHATTEREDNESS, i));\n    }\n    \n    \n    int p_indx= int(floor(density * float(NCOLORS)));\n    float palette_lerp = pow(fract(density * float(NCOLORS)), 1.5); // smooth everything\n\n   \n    fragColor = mix(palette[p_indx], palette[p_indx + 1], palette_lerp); \n}","name":"Image","description":"","type":"image"}]}