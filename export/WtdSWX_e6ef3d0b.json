{"ver":"0.1","info":{"id":"WtdSWX","date":"1584106571","viewed":273,"name":"Worley water/underwater caustic","username":"Eldeston","description":"v1.0.2\nA simple water noise for water surfaces or underwater caustics.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","water","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define intensity 24.0\n#define isBorder true\n#define is3D true\n\n// Noise\nfloat rand1D(float n){\n    return fract(sin(dot(n, 12.9898)) * 43758.5453);\n    }\n\nfloat rand1D(vec2 n){\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n    }\n\nfloat rand1D(vec3 n){\n    return fract(sin(dot(n, vec3(12.9898, 4.1414, 78.233))) * 43758.5453);\n    }\n\nvec2 rand2D(vec2 n){\n    return fract(sin(vec2(dot(n, vec2(12.9898, 4.1414)))));\n    }\n\nvec3 rand3D(vec3 n){\n    return fract(sin(vec3(dot(n, vec3(12.9898, 4.1414, 78.233)))));\n    }\n\n// Value noise\nfloat vnoise( in vec2 p ){\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n    vec2 u = f*f*(3.0-2.0*f);\n    return mix( mix( rand1D(i + vec2(0.0,0.0)), rand1D(i + vec2(1.0,0.0)), u.x), mix( rand1D(i + vec2(0.0,1.0)), rand1D(i + vec2(1.0,1.0)), u.x), u.y);\n    }\n\n// Voronoi noise, 3D and 2D\n// These are extremely laggy, so I decreased the amount of points, while having 3D, being the laggiest\nfloat voronoi3D(vec3 n, float time){\n    float dis = 0.9;\n    for(float y = 0.0; y <= 1.0; y++){\n        for(float x = 0.0; x <= 1.0; x++){\n            for(float z = -1.0; z <= 1.0; z++){\n                // Neighbor place in the grid\n                vec3 p = floor(n) + vec3(x, y, z);\n                float d = length((0.27 * sin(rand3D(p) * intensity + time * 2.0)) + vec3(x, y, z) - fract(n));\n                dis = min(dis, d);\n                }\n            }\n        }\n    return dis;\n    }\n\nfloat voronoi2D(vec2 n, float time){\n    float dis = 0.9;\n    for(float y = 0.0; y <= 1.0; y++){\n        for(float x = 0.0; x <= 1.0; x++){\n            // Neighbor place in the grid\n            vec2 p = floor(n) + vec2(x, y);\n            float d = length((0.27 * sin(rand2D(p) * intensity + time * 2.0)) + vec2(x, y) - fract(n));\n            dis = min(dis, d);\n            }\n        }\n    return dis;\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord.xy / iResolution.x;\n    vec3 texA = texture(iChannel0, uv).rgb;\n    \n    vec2 base = uv;\n    uv.x += sin(iTime * 2.0 + base.x * 1.0 + base.y * 16.0) * 0.025;\n    vec2 uv1;\n    float V = is3D ? clamp((pow(voronoi3D(vec3(uv * 10.0, 1.0), iTime), 3.6) * 2.0) + 0.25, 0.0, 1.0) :\n    clamp((pow(voronoi2D(uv * 10.0, iTime), 3.6) * 2.0) + 0.25, 0.0, 1.0);\n    \n    float border;\n    \n    border = uv.x >= 0.499 && uv.x <= 0.501 ? 1.0 : 0.0;\n    border = uv.y >= 0.499 && uv.y <= 0.501 ? 1.0 : border;\n    border = isBorder ? border : 0.0;\n    fragColor = vec4(mix(texA * vec3(0.0, 0.5, 1.0) * V, vec3(1.0, 1.0, 0.0), border), 1.0);\n}","name":"Image","description":"","type":"image"}]}