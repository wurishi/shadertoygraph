{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define NUMBER_TO_PRINT time\n#define DISTANCE_BETWEEN_DIGITS 0.05\n#define LINE_WIDTH 0.04\n#define ON_COLOR  vec4(0.0, 1.0, 0.0, 1.0);\n#define OFF_COLOR vec4(0.0, 0.0, 0.0, 1.0);\nfloat digits(float x) {\n\tif (x < 2.0) { return 1.0; }\n\treturn ceil(log(x) / log(10.0));\n}\n\nint imod(int x, int y) {\n\treturn x - y*(x/y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tint time = int(iDate.w);\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t//I like working from the top left corner\n\tuv.y = 1.0 - uv.y;\n\tfloat N = digits(float(NUMBER_TO_PRINT));\n\tfloat width = (1.0 - (N-1.0)*DISTANCE_BETWEEN_DIGITS) / N;\n\tfloat digit = floor(uv.x / (width + DISTANCE_BETWEEN_DIGITS));\n\t//coordinates within box\n\tfloat digitStartx = (width+DISTANCE_BETWEEN_DIGITS)*digit;\n\tfloat digitEndx   = digitStartx + width;\n    vec2 sub_uv = vec2((uv.x - digitStartx) * 1.0/(digitEndx - digitStartx), (uv.y - .2) * (1.0/.6));\n\t\n\t//Computing a power of 10 is hard\n\tint p = 1;\n\tfor (int i = 0; i < 10; ++i) {\n\t\tp *= (1 + int(i < int(N) - int(digit)) * 9);\n\t}\n\n\tint currentDigit = imod(NUMBER_TO_PRINT, p) / (p/10);\n\t//Determining the position\n\tbool tiptop   = sub_uv.y < LINE_WIDTH && sub_uv.y > 0.0;\n\tbool top      = sub_uv.y < 0.5 - LINE_WIDTH/2.0&& sub_uv.y > 0.0;\n\tbool left     = sub_uv.x > 0.0                 && sub_uv.x < LINE_WIDTH;\n\tbool middle_x = sub_uv.x > LINE_WIDTH          && sub_uv.x < 1.0 - LINE_WIDTH;\n\tbool middle_y = sub_uv.y > 0.5 - LINE_WIDTH/2.0&& sub_uv.y < 0.5 + LINE_WIDTH/2.0;\n\tbool right    = sub_uv.x > (1.0 - LINE_WIDTH)  && sub_uv.x < 1.0;\n\tbool bottom   = sub_uv.y > 0.5 + LINE_WIDTH/2.0&& sub_uv.y < 1.0;\n\tbool botbot   = sub_uv.y > 1.0 - LINE_WIDTH    && sub_uv.y < 1.0;\n\t\n\t//shorthand\n\tint c = currentDigit;\n\tbool bit =(top && left  && (c != 1 && c != 2 && c != 3 && c != 7)) ||\n\t\t      (top && right && (c != 5 && c != 6))                     ||\n\t\t      (tiptop && middle_x && (c != 1 && c != 4))               ||\n\t\t      (middle_x && middle_y && (c > 1 && c != 7))              ||\n\t\t      (bottom && left && ((c/2)*2 == c) && c != 4)             ||\n\t\t      (bottom && right && (c != 2))                            ||\n\t\t      (botbot && middle_x && (c != 1 && c != 4 && c != 7));\n\tfragColor = float(bit && true) * ON_COLOR + float(!(bit && true)) * OFF_COLOR;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ssSz2","date":"1404401661","viewed":369,"name":"7 Segment Display","username":"drsam94","description":"A simple 7 segment display","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["display","tool","7"],"hasliked":0,"parentid":"","parentname":""}}