{"ver":"0.1","info":{"id":"tdSyWt","date":"1587495298","viewed":117,"name":"Rainbow yaaay","username":"KavabONga","description":"No idea what this is gonna be yaaaay","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3dperlinnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise(float x) {\n\treturn mod(sin(x * 1267.123 + 2346.723) * 13212.32 , 1.);\n}\nfloat noise(vec2 pos) {\n    //return noise(sin(pos.x * 1823.213 + 71322.123) * 381237. + sin(pos.y  *46372.123 + 6721.12) * 21973.213);\n    return noise(noise(pos.x) * 7821.23 + noise(pos.y) * 13798.321);\n}\nfloat noise(vec3 pos) {\n    return noise(noise(pos.xy * 1239.2136 + 213.21) * 2678.213 + noise(pos.xz * 1387. + 2137.) * 7312.321 + noise(pos.yz * 168. + 1237.) * 123.321);\n}\nvec2 pixelate(vec2 pos, vec2 cell) {\n\treturn floor(pos / cell) * cell;\n}\n\nfloat perlin(vec2 p)\n{\n\tvec2 fl = floor(p);\n\tvec2 fr = fract(p);\n\t\n\tfr.x = smoothstep(0.0,1.0,fr.x);\n\tfr.y = smoothstep(0.0,1.0,fr.y);\n\t\n\tfloat a = mix(noise(fl + vec2(0.0,0.0)), noise(fl + vec2(1.0,0.0)),fr.x);\n\tfloat b = mix(noise(fl + vec2(0.0,1.0)), noise(fl + vec2(1.0,1.0)),fr.x);\n\t\n\treturn mix(a,b,fr.y);\n}\nfloat perlin(vec3 p) {\n    vec3 fl = floor(p);\n\tvec3 fr = fract(p);\n\t\n\tfr = smoothstep(0.,1.,fr);\n\t\n\tfloat a = noise(fl + vec3(0., 0., 0.)),\n          b = noise(fl + vec3(1., 0., 0.)),\n          c = noise(fl + vec3(1., 1., 0.)),\n          d = noise(fl + vec3(0., 1., 0.)),\n          e = noise(fl + vec3(0., 0., 1.)),\n          f = noise(fl + vec3(1., 0., 1.)),\n          g = noise(fl + vec3(1., 1., 1.)),\n          h = noise(fl + vec3(0., 1., 1.));\n    float ab = mix(a, b, fr.x),\n          dc = mix(d, c, fr.x),\n          ef = mix(e, f, fr.x),\n          hg = mix(h, g, fr.x);\n    float abef = mix(ab, ef, fr.z), dchg = mix(dc, hg, fr.z);\n    return mix(abef, dchg, fr.y);\n}\nmat2x2 rotate(float a) {\n\treturn mat2x2(cos(a), -sin(a), sin(a), cos(a));\n} \nfloat fbm(vec2 p)\n{\n    float result = 0.;\n    float gain = .5, lacunarity = 2.;\n\t\n    float cur_gain = 1.;\n    int iterations = 5;\n\tfor(int i = 0;i < iterations; i++)\n\t{\n\t\tresult += perlin(p) * cur_gain;\n\t\tp = rotate(1.3) * p * lacunarity;\n\t\tcur_gain *= gain;\n\t}\n\tresult /= (pow(gain, float(iterations)) - 1.) / (gain - 1.);\n\treturn result;\n}\nfloat fbm(vec3 p)\n{\n    float result = 0.;\n    float gain = .5, lacunarity = 2.;\n\t\n    float cur_gain = 1.;\n    int iterations = 2;\n\tfor(int i = 0;i < iterations; i++)\n\t{\n\t\tresult += perlin(p) * cur_gain;\n\t\tp = p * lacunarity;\n\t\tcur_gain *= gain;\n\t}\n\tresult /= (pow(gain, float(iterations)) - 1.) / (gain - 1.);\n\treturn result;\n}\nfloat fbm(vec2 p, float height)\n{\n    return fbm(vec3(p, height));\n}\n\nconst vec3 red = vec3(255., 0., 0.) / 256.;\nconst vec3 orange = vec3(255., 127., 0.) / 256.;\nconst vec3 yellow = vec3(255., 255., 0.) / 256.;\nconst vec3 green = vec3(0., 255., 0.) / 256.;\nconst vec3 blue = vec3(80., 80., 255.) / 256.;\nconst vec3 purple = vec3(129., 0., 127.) / 256.;\nconst vec3 pink = vec3(255., 192., 203.) / 256.;\n\n\nfloat between(float left, float right, float x) {\n    float w = 1. / min(iResolution.x, iResolution.y);\n    return smoothstep(left - w, left + w, x) * smoothstep(x - w, x + w, right);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Pixelated coordinates\n    vec2 uv = fragCoord/min(iResolution.x, iResolution.y);\n    //uv = pixelate(uv, vec2(0.01, 0.01));\n\n    // Assigning color depending on value\n    float level = clamp(length(uv + fbm(vec3(uv * 8. + iTime, iTime)) / 6.) / 2.2, 0., 1.);\n    vec3 col = vec3(0.);\n    col += between(0., .14, level) * pink;\n    col += between(.14, .28, level) * purple;\n    col += between(.28, .42, level) * blue;\n    col += between(.42, .56, level) * green;\n    col += between(.56, .68, level) * yellow;\n    col += between(.68, .8, level) * orange;\n    col += between(.8, 1., level) * red;\n    \n    // Adding noise (idk why)\n    //col = col * (50. + noise(pixelate(uv, vec2(0.01)) + iTime)) / 51.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}