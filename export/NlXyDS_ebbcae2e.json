{"ver":"0.1","info":{"id":"NlXyDS","date":"1648689692","viewed":75,"name":"DotBlur","username":"willothy","description":"dot","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["dot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Work in progress :)\n// Click and drag on the viewport\n// The closer to the center the mouse is, \n// the clearer the image will be\n\n/** Uniforms used:\n *  uniform vec3 iResolution;\n *  uniform vec3 iChannelResolution[0];\n *  uniform vec4 iMouse;\n *  uniform sampler2D iChannel0;\n */\n\nfloat map(float value, float min1, float max1, float min2, float max2) {\n    return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nfloat getDist(vec2 p1, vec2 p2) {\n    return sqrt(pow(p2.x - p1.x, 2.) + pow(p2.y - p1.y, 2.));\n}\n\nfloat maxDist() {\n    return sqrt(pow(iResolution.x / 2., 2.) + pow(iResolution.y / 2., 2.));\n}\n\n\n// Might need some adjusting\nfloat toGreyscale(vec3 color) {\n    return dot(color.rgb, vec3(0.299, 0.587, 0.114));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 canvasCenter = vec2(iResolution.x / 2., iResolution.y / 2.);\n    \n    // Check how close mouse is to center and map tileSize accordingly\n    float centerDeadZone = 30.; // pixells\n    float tileSize = map(getDist(iMouse.xy, canvasCenter), centerDeadZone, maxDist(), 1.0, 10.0);\n    \n    vec2 sampleOffset = vec2(0.); // For determining were in the tile the sample is taken\n    \n    // Get current tile location ( top left corner ) \n    float xuv = (round(fragCoord.x - mod(fragCoord.x, float(tileSize))) / iResolution.x);\n    float yuv = (round(fragCoord.y - mod(fragCoord.y, float(tileSize))) / iResolution.y);\n    vec2 uv = vec2(xuv, yuv ); \n    \n    uv.x += sampleOffset.x;\n    // Sample texture\n    vec4 c = texture(iChannel0, uv);\n    \n    // Map radius to greyscale, where max radius is tileSize/2 at greyscale value 1.\n    float greyscale = toGreyscale(texture(iChannel0, uv).rgb);\n    float rad = map(greyscale, 0., 1., tileSize / 2. + map(tileSize, 1., 10., 2., 0.), 0.);\n    \n    // Determine circle center\n    vec2 circleCenter = vec2(\n        fragCoord.x - mod(fragCoord.x, float(tileSize)) + (tileSize / 2.),\n        fragCoord.y - mod(fragCoord.y, float(tileSize)) + (tileSize / 2.)\n    );\n    \n    // Draw circle using alpha value\n    float a = getDist(circleCenter, fragCoord.xy) < rad+1. ? 1. : 0.;\n\n    // Mix tiled colors with circles (WIP)\n    fragColor = mix(vec4(1.), c, a);\n}","name":"Image","description":"","type":"image"}]}