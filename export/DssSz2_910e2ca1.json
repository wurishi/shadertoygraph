{"ver":"0.1","info":{"id":"DssSz2","date":"1669226912","viewed":212,"name":"Wave optics pool caustics","username":"dpiponi","description":"Simulation of swimming pool caustics except I'm using (faked) wave optics and what look like aliasing is actually diffaction because this is the bottom of a microscopic pool.\n\nSurprisingly simple: just render âˆ«exp(i*h*noise(x,y,z,t))dz for some z range.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["caustics","optics","diffraction"],"hasliked":0,"parentid":"DdlSzr","parentname":"diffaction experiment"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The noise part of this code was borrowed. See credit below.\n\n// If step size is too low you get visible undersampling artifacts.\n// But arguably they are still pretty :)\nfloat step_size = 0.001;\nfloat h = 500.;\nfloat sx = 3.0;\nfloat sy = 3.0;\nfloat rate = 0.1;\n\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20201014 (stegu)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.5 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 105.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n  //\n// Description : Array and textureless GLSL 2D/3D/4D simplex\n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0; }\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvoid coeffs(float p, float q, float r, float s,float t, float u,\n    out float a0, out float a1, out float a2, out float a3, out float a4, out float a5)\n{\n    a0 = p;\n    a1 = q;\n    a2 = r/2.;\n    a3 = -10.*p - 6.*q - (3.*r)/2. + 10.*s - 4.*t + u/2.;\n    a4 = 15.*p + 8.*q + (3.*r)/2. - 15.*s + 7.*t - u;\n    a5 = -6.*p - 3.*q - r/2. + 6.*s - 3.*t + u/2.;\n// Coefficients for Catmull-Rom spline\n    //return vec4(q,-0.5*p+0.5*r,p-2.5*q+2.*r-0.5*s,-0.5*p+1.5*q-1.5*r+0.5*s)/6.0;\n// Coefficients for interpolating spline\n    //return vec4(6.*q, (-2.*p-3.*q+6.*r-s), (3.*p-6.*q+3.*r), (-p+3.*q-3.*r+s))/6.0;\n}\n\n// Optional\nfloat window(float z)\n{\n    //return 1.0;\n    return 0.5 + 0.5 * sin(2. * 3.14159 * (z - 0.25));\n}\n\n//float interp(float p, float q, float r, float s, float t)\n//{\n//    return dot(coeffs(p,q,r,s), vec4(1.,t,t*t,t*t*t));\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    float x = uv.x;\n    float y = uv.y;\n        \n    float c = 0.0;\n    int count = 0;\n    \n    float tOffset = 10. * iMouse.x/iResolution.x;\n \n    // Instead of computing noise afresh at every sample I use the fact that my noise\n    // function is piecewise cubic and compute its coefficients so the inner\n    // loop just requires evaluating cubics.\n    float theta0 = snoise(vec3(sx*x, sy*y, tOffset + rate * iTime + 0.));\n    float theta1 = 3.*snoise(vec3(sx*x, 100.0+sy*y, tOffset + rate * iTime + 12.1));\n    float theta2 = 9.*snoise(vec3(sx*x, sy*y, tOffset + rate * iTime + 19.2));\n    float theta3 = snoise(vec3(sx*x, sy*y, tOffset + rate * iTime + 75.7));\n    float theta4 = 3.*snoise(vec3(sx*x, sy*y, tOffset + rate * iTime + 113.2));\n    float theta5 = 9.*snoise(vec3(62.5+sx*x, sy*y, tOffset + rate * iTime + 142.1));\n\n    float a00, a01, a02, a03, a04, a05;\n    coeffs(theta0, theta1, theta2, theta3, theta4, theta5, a00, a01, a02, a03, a04, a05);\n\n/*\n    theta0 = theta3;\n    theta1 = theta4;\n    theta2 = theta5;\n    theta3 = snoise(vec3(sx*x, sy*y, tOffset + rate * iTime - 9.2));\n    theta4 = snoise(vec3(sx*x, sy*y, tOffset + rate * iTime - 13.1));\n    theta5 = snoise(vec3(sx*x, sy*y, tOffset + rate * iTime - 22.6));\n    float a10, a11, a12, a13, a14, a15;\n    coeffs(theta0, theta1, theta2, theta3, theta4, theta5, a10, a11, a12, a13, a14, a15);\n*/\n/*\n    theta0 = theta1;\n    theta1 = theta2;\n    theta2 = theta3;\n    theta3 = snoise(vec3(sx*x, sy*y, tOffset + rate * iTime - 16.1));\n    vec4 c2 = coeffs(theta0, theta1, theta2, theta3);\n\n    theta0 = theta1;\n    theta1 = theta2;\n    theta2 = theta3;\n    theta3 = snoise(vec3(sx*x, sy*y, tOffset + rate * iTime - 27.2));\n    vec4 c3 = coeffs(theta0, theta1, theta2, theta3);\n    */\n     \n    for (float z = 0.; z < 1.; z += step_size)\n    {\n        //int iz = int(floor(z));\n        //float fz = z-float(iz);\n        //vec4 zzz = vec4(1., z, z*z, z*z*z);\n\n        float theta = a00+a01*z+a02*z*z+a03*z*z*z+a04*z*z*z*z+a05*z*z*z*z*z;\n        c = c + window(z)*cos(h*theta);\n        /*\n        theta = a10+a11*z+a12*z*z+a13*z*z*z+a14*z*z*z*z+a15*z*z*z*z*z;\n        c = c + window(0.25+0.25*z)*cos(h*theta);\n        */\n        //theta = dot(c2,zzz);\n        //c = c + window(0.5+0.25*z)*cos(h*theta);\n        //theta = dot(c3,zzz);\n        //c = c + window(0.75+0.25*z)*cos(h*theta);\n\n        count += 1;\n    }\n    c = 20.0 * abs(c)/float(count);\n    //c=theta0;\n    vec3 col = 0.75 * vec3(c, c, c);\n    //vec3 col = 0.75 * vec3(theta0, theta1, c);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}