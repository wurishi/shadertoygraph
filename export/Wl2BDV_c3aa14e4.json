{"ver":"0.1","info":{"id":"Wl2BDV","date":"1599902053","viewed":161,"name":"2 - Faith","username":"Krabcode","description":"drag mouse to change number of copies and scale","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["mandala","backbuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define iFrame float(iFrame)\n#define res iResolution\n\n\nfloat hash(float n){\n    return fract(sin(n)*43758.5453);\n}\n\nfloat iqNoise(vec3 x){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f  = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix(hash(n+0.0), hash(n+1.0), f.x),\n    mix(hash(n+57.0), hash(n+58.0), f.x), f.y),\n    mix(mix(hash(n+113.0), hash(n+114.0), f.x),\n    mix(hash(n+170.0), hash(n+171.0), f.x), f.y), f.z);\n}\n\n\nfloat fbm(vec3 p){\n    float sum = 0.;\n    float freq = 1.;\n    float amp = 0.5;\n    for (int i = 0; i < 6; i++){\n        sum += amp*(1.-2.*iqNoise(p*freq));\n        freq *= 2.0;\n        amp *= .5;\n    }\n    return sum;\n}\n\nfloat fbm(vec2 p){\n    float sum = 0.;\n    float freq = 1.;\n    float amp = 0.5;\n    for (int i = 0; i < 6; i++){\n        sum += amp*(1.-2.*iqNoise(vec3(p*freq, 0.)));\n        freq *= 2.0;\n        amp *= .5;\n    }\n    return sum;\n}\n\nfloat pattern( in float t, in vec2 p, out vec2 q, out vec2 r ){\n    q.x = fbm( p + vec2(0.0 - t,0.0));\n    q.y = fbm( p + vec2(5.2 + t,1.3 + t));\n    r.x = fbm( p + 4.0*q + vec2(1.7,9.2));\n    r.y = fbm( p + 4.0*q + vec2(8.3,2.8));\n    return fbm( p + 4.0*r );\n}\n\nfloat hash13(vec3 p3){\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = fragCoord.xy / res.xy;\n    vec2 cv = (fragCoord.xy - .5 * res.xy) / res.y;\n    float t = iFrame*.0005;\n    float d = length(cv);\n    vec2 m = iMouse.xy / res.xy;\n    if(length(m) < .1){\n      m = vec2(.5);   \n    }\n    float copies = 10.+floor(m.x*10.)*2.;\n    vec2 distAngle = vec2(d*15.*m.y, cos(copies*atan(cv.y, cv.x)));\n    vec2 p = vec2(0);\n    vec2 q = vec2(0);\n    float n = pattern(t, distAngle, p, q);\n    vec3 col = vec3(n);\n    float alpha = min(smoothstep(0.5, 0.2, d), smoothstep(0., 0.01, d));\n    col += .25*hash13(vec3(1000.*uv.xy, t));\n    col *= alpha;\n    \n    vec2 off = -cv * .002;\n    vec3 old = vec3(texture(iChannel0, uv+off));\n    \n    col *= .04;\n    col += old*.99;\n\n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}