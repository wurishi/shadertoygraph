{"ver":"0.1","info":{"id":"XfyyWV","date":"1732367858","viewed":27,"name":"SimpleRayMarching_Sphere","username":"miyu","description":"Simple RayMarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 100\n#define MAX_DISTANCE 100.\n#define MIN_DISTANCE 0.01\n\nstruct Camera\n{\n    vec3 position,forward,right,up,rayDir;\n    float zoom;\n};\n\n\nCamera InitCamera(vec2 uv,vec3 cameraPos,vec3 lookAt,float cameraZoom)\n{\n    Camera camera;\n    camera.position = cameraPos;\n    camera.zoom = cameraZoom;\n    camera.forward = normalize(lookAt-camera.position);\n    camera.right = cross(vec3(0.,1.,0.),camera.forward);\n    camera.up = cross(camera.forward,camera.right);\n    camera.rayDir = normalize(camera.forward*camera.zoom+camera.right*uv.x+camera.up*uv.y);\n    return camera;\n}\n\n\nfloat sdPlane(vec3 point,float height)\n{\n    return point.y-height;\n}\n\n\nfloat sdSphere(vec3 point,vec3 position,float radius)\n{\n    return length(point-position)-radius;\n}\n\n\nfloat GetDistance(vec3 point)\n{\n    float dis=0.;\n    float dis_sphere = sdSphere(point,vec3(0.,0.,0.),1.0);\n    float dis_plane = sdPlane(point,-1.0);\n    \n    dis=min(dis_sphere,dis_plane);\n    \n    return dis;\n}\n\nfloat RayMarching(vec3 origin,vec3 rayDir)\n{\n    float rayDis = 0.;\n    for(int i=0;i<MAX_STEP;i++)\n    {\n        vec3 point = origin+rayDir*rayDis;\n        float dis = GetDistance(point);\n        if(dis<MIN_DISTANCE) break;\n        rayDis += dis;\n        if(rayDis>MAX_DISTANCE) break;\n    }\n    return rayDis;\n}\n\nvec3 GetNormal(vec3 point)\n{\n    vec2 offset=vec2(0.01,0.);\n    vec3 normal = GetDistance(point)-vec3(\n        GetDistance(point-offset.xyy),\n        GetDistance(point-offset.yxy),\n        GetDistance(point-offset.yyx)\n    );\n    return normalize(normal);\n}\n\n\nfloat GetDiffuse(vec3 lightPos,vec3 point)\n{\n    vec3 lightDir = normalize(lightPos-point);\n    vec3 normal = GetNormal(point);\n    float lambert = clamp(dot(normal,lightDir),0.,1.0);\n    \n    float d=RayMarching(point+normal*MIN_DISTANCE,lightDir);\n    if(d<length(lightPos-point))\n        lambert*=0.1;\n\n    return lambert;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/min(iResolution.x,iResolution.y);\n   vec3 col = vec3(0.);\n   \n   vec3 cameraPos = vec3(0.,0.,-10.);\n   vec3 lookAt = vec3(0.);\n   float cameraZoom = sin(iTime)+2.;\n   Camera camera = InitCamera(uv,cameraPos,lookAt,cameraZoom);\n   \n   vec3 lightPos = vec3(0.,cos(iTime)+3.,sin(iTime));\n   \n   float rayDis = RayMarching(camera.position,camera.rayDir);\n   vec3 point = camera.position+camera.rayDir*rayDis;\n   float diffuse = GetDiffuse(lightPos,point);\n   \n   col = vec3(diffuse);\n   \n   fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}