{"ver":"0.1","info":{"id":"7tVBz3","date":"1704828993","viewed":42,"name":"Tetrahedron Projection Mapping","username":"Floris0106","description":"Maps zero to one uv space to spherical coordinates.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["projection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 p = uvToSphere(uv);\n    if (uv.y >= 0.5)\n        uv = sphereToUv1(p);\n    else\n        uv = sphereToUv2(p);\n    \n    fragColor = vec4(p * 0.5 + 0.5, 1.0);\n    //fragColor = vec4(uv, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 uvToSphere(vec2 uv)\n{\n    uv = uv * 2.0 - 1.0;\n    bvec2 q = greaterThan(uv, vec2(0.0));\n    uv = fract(uv);\n    \n    float y = q.x ? 1.0 - abs(uv.x + uv.y - 1.0) : abs(uv.x - uv.y);\n    y = q.y ? 1.0 - y : y;\n    vec3 p = vec3(uv.x, y, uv.y) * 2.0 - 1.0;\n    \n    return normalize(p);\n}\n\nvec2 sphereToUv1(vec3 p)\n{\n    float t = 0.0;\n    t = max(t, -p.x + p.y + p.z);\n    t = max(t, p.x + -p.y + p.z);\n    t = max(t, p.x + p.y + -p.z);\n    t = max(t, -p.x + -p.y + -p.z);\n    p /= t;\n    \n    vec2 uv = p.xz * 0.5 + 0.5;\n    uv.x -= float(abs(p.x - p.z) + p.y >= 1.0 - 1e-7);\n    \n    return uv * 0.5 + 0.5;\n}\nvec2 sphereToUv2(vec3 p)\n{\n    float t = 0.0;\n    t = max(t, p.x + -p.y + -p.z);\n    t = max(t, -p.x + p.y + -p.z);\n    t = max(t, -p.x + -p.y + p.z);\n    t = max(t, p.x + p.y + p.z);\n    p /= t;\n    \n    vec2 uv = p.xz * 0.5 + 0.5;\n    uv.x -= float(abs(p.x - p.z) - p.y >= 1.0 - 1e-7);\n    uv.y -= 1.0;\n    \n    return uv * 0.5 + 0.5;\n}","name":"Common","description":"","type":"common"}]}