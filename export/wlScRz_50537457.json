{"ver":"0.1","info":{"id":"wlScRz","date":"1593559955","viewed":166,"name":"Simple image warping/distorting","username":"Einheit101","description":"Edited by Einheit-101 in order to transform a simple ball shape into a distorted form","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["imagewarpdistortwarpingdistorting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Variant of https://www.shadertoy.com/view/4sX3RN\n//Simplified some code, added position and scaling options\n\nfloat transformStrength = 15.;\nfloat u = 0.4;\nfloat v = 0.4;\nfloat usize = 2.;\nfloat vsize = 2.;\n\n/////////////////////////////////////////////////////////////\n\nvec4 perm(vec4 x)\n{\n    x = ((x * 34.0) + 1.0) * x;\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat noise2d(vec2 p)\n{\n    vec2 a = floor(p);\n    vec2 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.yyyy;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * 0.0244);\n    vec4 o2 = fract(k4 * 0.0244);\n\n    vec4 o3 = o2 * d.y + o1 * (1.0 - d.y);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xRadius = 1. / usize * 0.5;\n\tfloat yRadius = 1. / vsize * 0.5;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 bgcolor = texture(iChannel1, uv);\n\tuv.x = (uv.x - u + xRadius) * usize;\n\tuv.y = (uv.y - v + yRadius) * vsize;\n\n\tfloat v1 = noise2d(vec2(uv * transformStrength - iTime));\n\tfloat v2 = noise2d(vec2(uv * transformStrength + iTime));\n\n    fragColor = texture(iChannel0, uv + vec2(v1, v2) * 0.1);\n\n\tfloat startX = xRadius + u  / usize;\n    float startY = yRadius + v  / vsize;\n    float endX = (uv.x + u) / usize;\n    float endY = (uv.y + v) / vsize;\n\n    if (distance(startX, endX) > xRadius || distance(startY, endY) > yRadius || length(fragColor.rgb) <= 1./3.) {\n\t\tfragColor = bgcolor;\n\t}\n}","name":"Image","description":"","type":"image"}]}