{"ver":"0.1","info":{"id":"NdfSD8","date":"1618683247","viewed":83,"name":"CG Task 2","username":"dmkalash","description":"Icosahedron with fire","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["homeword"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define saturate(oo) clamp(oo, 0.0, 1.0)\n\nstruct TriangleHit {\n\tfloat t;\n    vec3 bary;\n    vec3 normal;\n};\n\nconst float INF = 1e10;\nconst float ALPHA = 0.5;\nconst float fireChangeCoef = 0.1;\n\nconst float ico_a = 0.525731;\nconst float ico_b = 0.850651;\nconst int ICO_FACES = 20;\nconst TriangleHit noHit = TriangleHit(INF, vec3(0.0), vec3(0.0));\n//const vec3 CAMERA_POS = vec3(-0.5, 1.8, -5);\nconst vec3 CAMERA_POS = vec3(-0.5, 1.8, -5); // 0.01\n\nconst vec3 LIGHT1_POS = vec3(-2, 2.0, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(3, 0.5, -3);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.9, 1, 0.9);\n\nvec3 randDir;\n\nconst int MarchSteps = 32;\nvec3 SphPosition = vec3(0.0);\nfloat Radius = 0.05;\nconst int NoiseSteps = 15;\nconst float NoiseAmplitude = 0.14;\nconst float NoiseFrequency = 15.0;\nconst vec3 Animation = vec3(2.0, -3.0, 2.5);\n\n\n/*\n________\n\nFire\n________\n*/\n\n\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }\nvec4 taylorInvSqrt(vec4 r){ return 1.79284291400159 - 0.85373472095314 * r; }\n\nfloat snoise(vec3 v)\n{\n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0);\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n    \n\tvec3 i  = floor(v + dot(v, C.yyy));\n\tvec3 x0 = v - i + dot(i, C.xxx);\n\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min(g.xyz, l.zxy);\n\tvec3 i2 = max(g.xyz, l.zxy);\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy;\n\tvec3 x3 = x0 - D.yyy;\n\n\ti = mod289(i);\n\tvec4 p = permute( permute( permute( i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\tfloat n_ = 0.142857142857; \n\tvec3  ns = n_ * D.wyz - D.xzx;\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_);\n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs(x) - abs(y);\n\tvec4 b0 = vec4(x.xy, y.xy);\n\tvec4 b1 = vec4(x.zw, y.zw);\n\tvec4 s0 = floor(b0) * 2.0 + 1.0;\n\tvec4 s1 = floor(b1) * 2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\tvec3 p0 = vec3(a0.xy, h.x);\n\tvec3 p1 = vec3(a0.zw, h.y);\n\tvec3 p2 = vec3(a1.xy, h.z);\n\tvec3 p3 = vec3(a1.zw, h.w);\n\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\n\tvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat Turbulence(vec3 position, float minFreq, float maxFreq, float qWidth)\n{\n\tfloat value = 0.0;\n\tfloat cutoff = clamp(0.5/qWidth, 0.0, maxFreq);\n\tfloat fade;\n\tfloat fOut = minFreq;\n\tfor(int i=NoiseSteps ; i>=0 ; i--)\n\t{\n\t\tif(fOut >= 0.5 * cutoff) break;\n\t\tfOut *= 2.0;\n\t\tvalue += abs(snoise(position * fOut))/fOut;\n\t}\n\tfade = clamp(2.0 * (cutoff-fOut)/cutoff, 0.0, 1.0);\n\tvalue += fade * abs(snoise(position * fOut))/fOut;\n\treturn 1.0-value;\n}\n\nfloat SphereDist(vec3 position)\n{\n\treturn length(position - SphPosition) - Radius;\n}\n\nvec4 Shade(float distance)\n{\n    vec4 Color1 = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 Color2 = vec4(1.0, 0.8, 0.2, 1.0);\n    vec4 Color3 = vec4(1.0, 0.03, 0.0, 1.0);\n    vec4 Color4 = vec4(0.05, 0.02, 0.02, 1.0);\n\tfloat c1 = saturate(distance * 5.0 + 0.5);\n\tfloat c2 = saturate(distance * 5.0);\n\tfloat c3 = saturate(distance * 3.4 - 0.5);\n\tvec4 a = mix(Color1,Color2, c1);\n\tvec4 b = mix(a,     Color3, c2);\n\treturn \t mix(b,     Color4, c3);\n}\n\n\nfloat RenderScene(vec3 position, out float distance)\n{\n\tfloat noise = Turbulence(position * NoiseFrequency + Animation * 20.0, 0.1, 1.5, 0.03) * NoiseAmplitude; // *iTime\n\tnoise = saturate(abs(noise));\n\tdistance = SphereDist(position) - noise;\n\treturn noise;\n}\n\n\nvec4 March(vec3 rayOrigin, vec3 rayStep, out bool hasIntersection)\n{\n\tvec3 position = rayOrigin;\n\tfloat distance;\n\tfloat displacement;\n\tfor(int step = MarchSteps; step >=0  ; --step)\n\t{\n\t\tdisplacement = RenderScene(position, distance);\n\t\tif(distance < 0.0005) break;\n\t\tposition += rayStep * distance;\n\t}\n    if (distance < 0.5) {\n        hasIntersection = true;\n        return Shade(displacement);\n    }\n    hasIntersection = false;\n    return vec4(0.0);\n}\n\n\nbool IntersectSphere(vec3 ro, vec3 rd, vec3 pos, float radius, out vec3 intersectPoint)\n{\n\tvec3 relDistance = (ro - pos);\n\tfloat b = dot(relDistance, rd);\n\tfloat c = dot(relDistance, relDistance) - radius*radius;\n\tfloat d = b*b - c;\n\tintersectPoint = ro + rd*(-b - sqrt(d));\n\treturn d >= 0.0;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\nvec4 checkFire(vec3 viewVec, vec3 ro, out bool hasFireIntersection)\n{\n    vec4 col = vec4(0.0);\n\tvec3 origin;\n    vec3 rd = viewVec;\n    hasFireIntersection = false;\n    \n\tif(IntersectSphere(ro, rd, SphPosition, Radius + NoiseAmplitude*100.0, origin)) // * 100.0\n\t{\n\t\tcol = March(origin, rd, hasFireIntersection);\n\t}\n    return col;\n}\n\n\n/*\n_______\n\nTrace figures\n_______\n*/\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float height = 0.85; // 0.9\n    pos.xz -= vec2(0.0, 0.3);\n    float t = (-height - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    vec2 point = worldPos.xz;\n    if (dot(point, point) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -height) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nconst uvec3 icoIndices[ICO_FACES] = uvec3[ICO_FACES](\n    uvec3(0, 1, 4),\n    uvec3(0, 6, 1),\n    uvec3(2, 5, 3),\n    uvec3(2, 3, 7),\n    \n    uvec3(4, 5, 8),\n    uvec3(4, 10, 5),\n    uvec3(6, 9, 7),\n    uvec3(6, 7, 11),\n\n    uvec3(8, 9, 0),\n    uvec3(8, 2, 9),\n    uvec3(10, 1, 11),\n    uvec3(10, 11, 3),\n    \n    uvec3(0, 4, 8),\n    uvec3(0, 9, 6),\n    uvec3(1, 10, 4),\n    uvec3(1, 6, 11),\n    uvec3(2, 8, 5),\n    uvec3(2, 7, 9),\n    uvec3(3, 11, 7),\n    uvec3(3, 5, 10)\n);\n\n\n\nvec3 icoVec(uint index) {\n\tuint i = index / 4u;\n    uint j = index - i * 4u;\n    float asign = (j & 1u) == 1u ? -1.0 : 1.0;\n    float bsign = j >= 2u ? -1.0 : 1.0;\n    \n    if (i == 0u) {\n        return vec3(0.0, asign * ico_a, bsign * ico_b);\n    } else if (i == 1u) {\n        return vec3(bsign * ico_b, 0.0, asign * ico_a);\n    } else { \n        return vec3(asign * ico_a, bsign * ico_b, 0.0);\n    }\n}\n\n\nTriangleHit rayIcoHit(vec3 origin, vec3 dir, uvec3 indices) {\n\tvec3 v1 = icoVec(indices.x);\n    vec3 v2 = icoVec(indices.y);\n    vec3 v3 = icoVec(indices.z);\n    \n    vec3 d12 = v2 - v1;\n    vec3 d13 = v3 - v1;\n    \n    vec3 h = cross(dir, d13);\n    float a = dot(d12, h);\n    float f = 1.0 / a;\n    \n    vec3 s = origin - v1;\n    float u = dot(s, h) * f;\n    vec3 q = cross(s, d12);\n    float v = dot(dir, q) * f;\n    float w = 1.0 - u - v;\n    float t = dot(d13, q) * f;\n    \n    if (t >= 0.0001 && u >= 0.0 && u < 1.0 && v >= 0.0 && w > 0.0) {\n    \tTriangleHit hit;\n        hit.t = t;\n        hit.bary = vec3(u, v, w);\n        hit.normal = normalize(cross(d12, d13));\n        return hit;\n    }\n\n    return noHit;\n}\n\n\nTriangleHit OuterHit(vec3 origin, vec3 dir) {\n    for (int i = 0; i < ICO_FACES; i++) {\n    \tTriangleHit hit = rayIcoHit(origin, dir, icoIndices[i]);\n        if (hit != noHit && dot(dir, hit.normal) < 0.0) {\n        \treturn hit;\n        }\n    }\n    return noHit;\n}\n\n\nTriangleHit InnerHit(vec3 origin, vec3 dir) {\n    TriangleHit hit = noHit;\n    for (int i = 0; i < ICO_FACES; i++) {\n    \tTriangleHit hit = rayIcoHit(origin, dir, icoIndices[i]);\n        if (hit != noHit) {\n            return hit;\n        }\n    }\n    return noHit;\n}\n\n\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    TriangleHit hit = OuterHit(pos, dir);\n    if (hit.t < dist) {\n        return true;\n    }\n    \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded (pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1 \n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool hasRefl) {\n    v = normalize(v);\n    normal = normalize(normal);\n    \n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        hasRefl = true;\n        return reflect(v, normal);\n    }\n    hasRefl = false;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    \n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 1.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    vec3 reflMult = vec3(0.5, 0.5, 0.5);\n    float fireMult = 1.0;\n    \n    fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n    vec4 tx = texture(iChannel3, fragCoord/iResolution.xy);\n    fragColor.rgb = tx.rgb;\n    const int MAX_TRACING_STEPS = 20;\n    \n    \n    for (int i = 0; i < MAX_TRACING_STEPS; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.5).rgb * 1.;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        TriangleHit hit;\n        if (nEnter == AIR_N) {\n            hit = OuterHit(curPos, curDir);\n        } else {\n            hit = InnerHit(curPos, curDir);\n        }\n        \n        if (hit.t < t) {\n            t = hit.t;\n            normal = hit.normal;\n\n            if (randVals.x < GLASS_R * 5.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= reflMult;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            \n            if (materialType == EMISSION) {\n                vec3 back = color * colorMult;\n                if (length(fragColor.rgb) > 1e-5) {\n                    fragColor.rgb = mix(fragColor.rgb, back, ALPHA);\n                } else {\n                    fragColor.rgb = back;\n                }\n\n                break;\n            } else if (materialType == DIFFUSE) {\n                vec3 back = computeLight(worldPos, color, normal) * colorMult;\n                if (length(fragColor.rgb) > 1e-5) {\n                    fragColor.rgb = mix(fragColor.rgb, back, ALPHA);\n                } else {\n                    fragColor.rgb = back;\n                }\n                break;\n                \n            } else if (materialType == REFLECTION) {\n            \n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5; \n                \n                if (n1 == GLASS_N) {\n                    bool hasFireIntersection;\n                    vec4 fireColor = checkFire(curPos, curDir, hasFireIntersection);\n                    if (hasFireIntersection) {\n                        fragColor.rgb = mix(fragColor.rgb, fireColor.rgb, fireMult);\n                        fireMult *= fireChangeCoef;\n                    }\n                }\n                \n                \n            } else if (materialType == REFRACTION) {\n                bool hasRefl;\n                curDir = refraction(curDir, normal, n1, nEnter, hasRefl);\n                curPos = worldPos + curDir * 1e-5;\n                if (!hasRefl) {\n                    n1 = nEnter;\n                } else {\n                    colorMult *= reflMult;\n                }\n                if (n1 == GLASS_N) {\n                    bool hasFireIntersection;\n                    vec4 fireColor = checkFire(curPos, curDir, hasFireIntersection);\n                    if (hasFireIntersection) {\n                        fragColor.rgb = mix(fragColor.rgb, fireColor.rgb, fireMult);\n                        fireMult *= fireChangeCoef;\n                    }\n                }\n            }\n        } else {\n            vec3 back = texture(iChannel1, curDir).rgb * colorMult;\n            if (length(fragColor.rgb) > 1e-5) {\n                fragColor.rgb = mix(fragColor.rgb, back, ALPHA);\n            } else {\n                fragColor.rgb = back;\n            }\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}