{"ver":"0.1","info":{"id":"dsdSDB","date":"1680464522","viewed":192,"name":"Pull/Push Distort","username":"medley","description":"A distortion shader. Click where you want the distortion to appear! Controls are at the top.\n\nThis is one of my first public shaders, so let me know if there's anything I can improve on or do better.","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["distortion","blob","push","pinch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pull/Push Distort\n// 2023-04-02\n//\n// Usage: Click on the screen where you want the effect to take place.\n// Modify the controls below do change the effect\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // ---- CONTROLS ----\n    // The radius of the effect (0.5 looks best)\n    // (0.0,1.0]\n    float dRadius = 0.5;\n    // The strength of the effect\n    // (0.0,1.0]\n    float dStrength = 1.0 /* <-- CHANGE THIS */ / (3.14 / dRadius / dRadius);\n    // The scale between pushing and pulling\n    // [-1.0,1.0]\n    float dPushPull = 1.0; // sin(iTime*6.0) * sin(iTime/3.0);\n    // The color tint of the warp effect\n    vec3 dColor = vec3(0.0,0.1,0.6);\n    // The amount of color tint for the warp effect\n    // [0.0,infinity)\n    float dTint = 5.0;\n    // The point where the effect takes place\n    // (-1.0,1.0)\n    vec2 dPoint = (2.0 * iMouse.xy - iResolution.xy)/min(iResolution.x,iResolution.y);\n    \n    // ##########################################\n    // #              BEGIN EFFECT              #\n    // ##########################################\n\n    // UV coordinates for the image texture\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // p-space coordinates for consistent aspect ratio\n    vec2 p = (2.0 * fragCoord - iResolution.xy)/min(iResolution.x,iResolution.y);\n    \n    // Base color of black\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \n    // Draw the texture on the screen\n    fragColor = fragColor + texture(iChannel0,uv);\n    \n    // The distance between the current fragment in p-space\n    // and the center of the effect, used to calculate the\n    // magnitude of the offset vector\n    float dDist = distance(dPoint,p);\n    \n    // If we are within the bounds of the effect...\n    if (dDist < dRadius)\n    {\n        // Find the direction we should be pointing in,\n        // and modulate it by whether we should be pushing or pulling.\n        // Pullling points in towards the center,\n        // and pushing is reversed.\n        vec2 dDir = normalize(dPoint - p) * -dPushPull;\n        \n        // Get the actual vector offset by scaling the direction\n        // based on the distance to the center of the effect and\n        // the effect strength.\n        vec2 dOff = dDir * (dRadius - dDist) * dStrength;\n        // Get the texture coordinate.\n        vec2 dOffPoint = uv-dOff;\n        dOffPoint = vec2(\n            clamp(dOffPoint.x,0.0,0.999),\n            clamp(dOffPoint.y,0.0,0.999));\n        \n        // Draw the texture sampled at that point.\n        fragColor = texture(iChannel0,dOffPoint);\n        \n        // Apply tint\n        fragColor += vec4(dColor * distance(dOff,vec2(0.0)) * dTint,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}