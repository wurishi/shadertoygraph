{"ver":"0.1","info":{"id":"sscSD8","date":"1633019568","viewed":207,"name":"Pencil box","username":"Flopine","description":"RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW RAINBOW ","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","repetition","palette","animation","hexagons"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n// Still exploring repetition trick presenting by Blackle on Perfect Pistons <3 \n// https://youtu.be/I8fmkLK1OKg\n// https://www.shadertoy.com/view/WtXcWB\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pal(c,t) (vec3(.6)+vec3(.4)*cos(TAU*(c*t+vec3(0.5,0.,0.8))))\n\n#define dt(sp,off) fract((iTime+off)*sp)\n#define anim(sp, off) easeInOutExpo(abs(-1.+2.*dt(sp,off)))\n#define swi(sp,off) floor(sin(dt(sp,off)*TAU)+1.)\n\n\nfloat easeInOutExpo(float x)\n{\n    return x == 0.\n      ? 0.\n      : x == 1.\n      ? 1.\n      : x < 0.5 ? exp2(20. * x - 10.) / 2.\n      : (2. - exp2(-20. * x + 10.)) / 2.;\n}\n\nfloat box (vec3 p , vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\n// iq's blog \n// https://iquilezles.org/articles/distfunctions\nfloat sdHexPrism (vec3 p, vec2 h)\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n  vec2 d = vec2(\n       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n       p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec2 edge (vec2 p)\n{\n    vec2 p2=abs(p);\n    return (p2.x>p2.y) ? vec2((p.x<0.) ? -1. : 1., 0.) : vec2(0., (p.y<0.) ? -1. : 1.);\n}\n\nfloat id;\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    if (swi(0.15,.0)<0.5) p.xz *= rot(PI/4.);\n\n    vec2 center = round(p.xz);\n    vec2 neighbour = center+edge(p.xz-center);\n    \n    vec2 pol = vec2(atan(center.y+0.001,center.x+0.001),length(center));\n    id = (abs(pol.x)/PI);\n    p.y += anim(0.3,sin(pol.x-pol.y));\n    float me = sdHexPrism(p.xzy-vec3(center, 0.),vec2(.42,1.))-0.02;\n    float ne = box(p-vec3(neighbour.x, 0., neighbour.y), vec3(.46,3.5,0.46));\n    \n    return min(me,ne);\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat AO (float eps, vec3 p, vec3 n)\n{return SDF(p+eps*n)/eps;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(uv*4.,-30.),rd=normalize(vec3(0.,0.02,1.)),p=ro,\n    col=vec3(0.), l=normalize(vec3(-1.,2.,-3.));   \n    bool hit=false;\n    \n    for(float i=0.; i<100.; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {hit=true;break;}\n        p += d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = max(dot(n,l),0.1), ao=AO(0.1,p,n)+AO(0.15,p,n)+AO(0.45,p,n);\n        col = pal(id,vec3(1.))*light*ao/2.;\n    }\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}