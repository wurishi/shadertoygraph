{"ver":"0.1","info":{"id":"dtsBzj","date":"1693214526","viewed":40,"name":"Julia3","username":"XtoF","description":"Julia","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 displayPalettes(vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    return vec4(col, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\n    #define DISPLAY_PALETTES 0 /* 8 palettes of 32 colors */\n\n#if !DISPLAY_PALETTES\n    const float M_PI = 3.14159265358979323846264338327950288;\n\n    // Settings\n    const vec2 startC = vec2(-0.7, 0.27015);\n    const vec2 d = vec2(0,0);\n    const int MAXITER = 255;\n    const float maxZoom = 15.;\n    const float evolutionFactor = 0.0005;\n    const int paletteNr = 6; // 0 to 7, from bottom to top\n    \n    // Time dependant zoom factor  \n    const float startTime = M_PI*maxZoom/2.; // to start with zoom == 1\n    float zoom = maxZoom * (cos(2.*(iTime + startTime)/maxZoom)) + maxZoom + 1.;\n    \n    // Normalized pixel coordinates (from -1 to 1) and zoom\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / (iResolution.y * 2. * zoom) ;\n    \n    // compute the pixel value\n    vec2 c =  startC + evolutionFactor * vec2(cos(iTime), sin(iTime));\n    vec2 z = 2. * uv + d;\n    int i = MAXITER;\n    while( z.x*z.x + z.y*z.y < 4. && i > 0 )\n    {\n        z = vec2(z.x*z.x - z.y*z.y + c.x, 2.*z.x*z.y + c.y);\n        --i;\n    }    \n    \n    // map to the palette\n    float iCol = float(i / 8); // iteration quantized to 32\n    float posIndex = (0.5 + iCol) / 32.;\n    float posPalette = (float(paletteNr) + 0.5)/8.;\n    vec3 col = texture(iChannel0, vec2(posIndex, posPalette)).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    \n#else   // Output to Channel0\n    fragColor = displayPalettes(fragCoord);\n#endif    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//from https://www.shadertoy.com/view/ldGcRV\n\nfloat divisorRound( float f, float divisor )\n{\n    float d1 = 1. / divisor;\n    float d1m1 = 1. / (divisor - 1.);\n    float lower = floor ( f / d1 );\n    \n    float r = d1m1 * lower;\n    return r;\n}\n\nfloat r4x ( float f ) // repeat four times\n{\n    return mod(4. * f, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = vec3(r4x(uv.x), 1. - uv.y, uv.x);\n\n    col.r = divisorRound( col.r, 8. );\n    col.g = divisorRound( col.g, 8. );\n    col.b = divisorRound( col.b, 4. );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}