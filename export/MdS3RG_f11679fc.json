{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\nusing the pmalin framework, some nabs from other shaders, \nnot sure what at this pointâ€¦to host this DE. \n-George Toledo\n*/\n\nvec2 surfaceSize=vec2(0.);\n\nconst vec3 tOffset=vec3(32.,-1.,24.);\n// vec3 EP;\nconst float kPI = acos(0.0);\nfloat kHalfPi = asin(1.0);\nconst float kTwoPI = kPI * 2.0;\nconst float PI=3.14159;\n\n//#define LOW_QUALITY\n#ifdef LOW_QUALITY\n    #define kRaymarchMaxIter 32\n#else\n    #define kRaymarchMaxIter 64\n#endif\n#define ENABLE_AMBIENT_OCCLUSION\n//#define ENABLE_AO_DITHER\n\n\n#define ENABLE_SHADOWS\n//#define ENABLE_MONTE_CARLO\n//#define ENABLE_REFLECTIONS\n//#define DOUBLE_SIDED_TRANSPARENCY\n//#define ENABLE_TRANSPARENCY\n#define ENABLE_FOG\n#define ENABLE_SPECULAR\n#define ENABLE_POINT_LIGHT\n#define ENABLE_POINT_LIGHT_FLARE\n//#define ENABLE_BRIGHTLIGHT//for far cam to light distances\n#define ENABLE_WARPS\n#define RADIANS 0.017453292\n\n#ifdef ENABLE_MONTE_CARLO\nvec4 gPixelRandom;\nvec3 gRandomNormal;\n//for monte carlo backbuffer randomization DOF\nvoid CalcPixelRandom(){\n\t// Nothing special here, just numbers generated by bashing keyboard\n\tvec4 s1 = sin(iTime * 3.3422 + fragCoord.xxxx * vec4(324.324234, 563.324234, 657.324234, 764.324234)) * 543.3423;\n\tvec4 s2 = sin(iTime * 1.3422 + fragCoord.yyyy * vec4(567.324234, 435.324234, 432.324234, 657.324234)) * 654.5423;\n\tgPixelRandom = fract(2142.4 + s1 + s2);\n\tgRandomNormal = normalize( gPixelRandom.xyz - 0.5);\n}\n#endif\n\n//const float trans_shadow=float(ENABLE_TRANSPARENCY_SHADOWS)*2.;\n//const float trans_ao=float(ENABLE_TRANSPARENCY_AMBIENT_OCCLUSION)/.5;\nconst float kNoTransparency = -1.0;\nconst float kTransparency = 1.0;\nconst float kInverseTransparency = 0.0;\nvec4 orbitTrap = vec4(10000.0);\nbool CycleColors=true;\nstruct C_Ray\n{\n    vec3 vOrigin;\n    vec3 vDir;\n    float fStartDistance;\n    float fLength;\n};\n\nstruct C_HitInfo\n{\n    vec3 vPos;\n    float fDistance;\n    vec3 vObjectId;\n};\n    \nstruct C_Surface\n{\n    vec3 vNormal;\n    vec3 cReflection;\n    vec3 cTransmission;    \n};\n\nstruct C_Material\n{\n    vec3 cAlbedo;\n    float fR0;\n    float fSmoothness;\n    vec2 vParam;\n\n    float fTransparency;\n    float fRefractiveIndex;\n};\n\nstruct C_Shading\n{\n    vec3 cDiffuse;\n    vec3 cSpecular;\n};\n\nstruct C_PointLight\n{\n    vec3 vPos;\n    vec3 cColour;\n};\n\nstruct C_DirectionalLight\n{\n    vec3 vDir;\n    vec3 cColour;\n};\n\n//<--Color&Material_Funcs*Utilities------------------------------------------------------------>\n\nvec3 hsv(const in float h, const in float s, const in float v) {\n\treturn mix(vec3(1.),clamp((abs(fract(h+vec3(3.,2.,1.)/3.)*6.-3.)-1.),0.,1.),s)*v;\n}\n\n#ifdef ENABLE_WARPS\n\n//<--Warps and Noise------------------------------------------------------------>\n\n\nfloat rand2d(const in vec2 n){ \n  return fract(sin(dot(n,vec2(12.9898,4.1414))) * 43758.5453);\n}\nfloat rand(const in vec2 co){\n\t// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat noise2d(const in vec2 n){\n  vec2 b = floor(n);\n  vec2 f = smoothstep(vec2(0.0,0.0),vec2(1.0,1.0),fract(n));\n  return mix(mix(rand2d(b),rand2d(b+vec2(1.0,0.0)),f.x),mix(rand2d(b+vec2(0.0,1.0)),rand2d(b+vec2(1.0,1.0)),f.x),f.y);\n}\n\nfloat cellular(const in vec2 P) {\n\tvec2  p  =  P-sin(P.yx)*0.2;\n\tfloat f1 =  abs(( sin(p.x + sin(p.y*0.414)*0.41 )) * ( cos(p.y + sin(p.x*0.732)*0.23 )));\n\tfloat f2 =  abs(( sin(p.y + sin(p.y*0.614)*0.34 )) * ( cos(p.x + sin(p.x*0.732)*0.36 )));\n\treturn max(f1,f2);\n}\n\nfloat rand1(const in vec2 p){\n    return fract(sin(dot(p.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n/* Given a position, this function generates a 3D co-ordinates based,\n * reconstructible static noise. */\nfloat noise(in vec3 p){\n\tp.x += p.y * 57. + p.z * 21.;\n\treturn sin(cos(p.x) * p.x);\n\n\t/* The following is an alternative for the previous line:\n\t * return fract(p.x * p.x * .0013) * 2. - 1.; */\n}\n\n/* Given a position, this function generates a 3D co-ordinates based,\n * reconstructible linearly interpolated smooth noise.\n *\n * This function uses the noise() function above for its underlying\n * noise texture. */\nfloat smooth_noise(const in vec3 p){\n\tvec3 integer = floor(p);\n\tvec3 fractional = smoothstep(0., 1., p - integer);\n\t//vec3 fractional = p - integer;\n\n\treturn mix(mix(mix(noise(integer),\n\t\t\t   noise(integer + vec3(1, 0, 0)),\n\t\t\t   fractional.x),\n\t\t       mix(noise(integer + vec3(0, 1, 0)),\n\t\t\t   noise(integer + vec3(1, 1, 0)),\n\t\t\t   fractional.x),\n\t\t       fractional.y),\n\t\t   mix(mix(noise(integer + vec3(0, 0, 1)),\n\t\t\t   noise(integer + vec3(1, 0, 1)),\n\t\t\t   fractional.x),\n\t\t       mix(noise(integer + vec3(0, 1, 1)),\n\t\t\t   noise(integer + 1.), fractional.x),\n\t\t       fractional.y),\n\t\t   fractional.z) * .5 + .5;\n}\n\n/* Given a position, this function constructs the oh-so-famous Perlin\n * noise. */\nfloat perlin(const in vec3 p){\n\treturn smooth_noise(p * .06125) * .5 +\n\t       smooth_noise(p * .125) * .25 +\n\t       smooth_noise(p * .25) * .125;\n}\n\nfloat perlin2(const in vec3 p){\n\tvec3 i = floor(p);\n\tvec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n\tvec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n\ta = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n\ta.xy = mix(a.xz, a.yw, f.y);\n\treturn mix(a.x, a.y, f.z);\n}\nmat2 m = mat2( 0.8,  0.6, -0.6,  0.6 );\n\nfloat hash(const in float p ){\n    return fract(sin(p)*43758.5453);\n}\n//vec2 noise for fbm function\nfloat noise(const in vec2 p ){\n    vec2 x = floor(p);\n    vec2 f = fract(p);\n    f = f*f*(3.0-2.0*f);\n    float n = x.x + x.y*57.0;\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\n\nfloat random(const in vec2 p){\n    return fract(sin(dot(p.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n//iq, for \"bicho\"/octopus\nint icoolfFunc3d2( int n ){\n   // n=(n<<13)^n;\n   // return (n*(n*n*15731+789221)+1376312589) & 0x7fffffff;\n\tfloat st = random( vec2(n));\n\treturn int(st);\n}\n\nfloat coolfFunc3d2(const in int p ){\n    return float(icoolfFunc3d2(p));\n}\n\nfloat noise3f(const in vec3 p ){\n    ivec3 ip = ivec3(floor(p));\n    vec3 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    int n = ip.x + ip.y*57 + ip.z*113;\n\n    float res = mix(mix(mix(coolfFunc3d2(n+(0+57*0+113*0)),\n                            coolfFunc3d2(n+(1+57*0+113*0)),u.x),\n                        mix(coolfFunc3d2(n+(0+57*1+113*0)),\n                            coolfFunc3d2(n+(1+57*1+113*0)),u.x),u.y),\n                    mix(mix(coolfFunc3d2(n+(0+57*0+113*1)),\n                            coolfFunc3d2(n+(1+57*0+113*1)),u.x),\n                        mix(coolfFunc3d2(n+(0+57*1+113*1)),\n                            coolfFunc3d2(n+(1+57*1+113*1)),u.x),u.y),u.z);\n\n    return 1.0 - res*(1.0/1073741824.0);\n}\n//\n\nfloat fbm(in vec2 p ){\n    float f = 0.0;\n    f += 0.50000*noise( p ); p = m*p*2.02;\n    f += 0.25000*noise( p ); p = m*p*2.03;\n    f += 0.12500*noise( p ); p = m*p*2.01;\n    f += 0.06250*noise( p ); p = m*p*2.04;\n    f += 0.03125*noise( p );\n    \n    return f/0.984375;\n}\n\nvec3 twist(const in vec3 p){\n\tfloat c = cos(6. * p.y * sin(iTime*.2));\n\tfloat s = sin(6. * p.y * sin(iTime*.2));\n\n\tmat2  m = mat2(c, -s, s, c);\n\treturn vec3(m * p.xz, p.y);\n}\n\nfloat displacement(const in vec3 p){\n\treturn sin(p.x)*sin(p.y)*sin(p.z);\n}\n\nfloat timedisplacement(const in vec3 p, const in float time){\n\treturn sin(p.x+time)*sin(p.y+time)*sin(p.z+time);\n}\n\n#endif\n//<--------Matrix Functions----------------------------------------------------------->\nvec3 RotateX( const in vec3 p, const in float angle ){\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\t\n\treturn vec3( p.x, c * p.y + s * p.z, -s * p.y + c * p.z);\n}\n \nvec3 RotateY( const in vec3 p, const in float angle ){\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\t\n\treturn vec3( c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n     \nvec3 RotateZ( const in vec3 p, const in float angle ){\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\t\n\treturn vec3( c * p.x + s * p.y, -s * p.x + c * p.y, p.z);\n}\n//<------------Object Unions------------------------------------------------------------->\nvec4 DistCombineUnion( const in vec4 p1, const in vec4 p2 ){\n\t//if(p1.x < p2.x) return p1; else return p2;\n\treturn mix(p1, p2, step(p2.x, p1.x));\n}\nvec4 DistCombineUnionTransparent( const in vec4 v1, const in vec4 v2, const in float fTransparentScale )\n{    \n\t//if( fCondition < 0.0 )\n\t//            return v1;\n\t\n\t// Negate the distance to the transparency object if transparent scale is 0.0     \n\t// This allows us to ratrace \"out\" of transparency\n\t\n\tvec4 vScaled = vec4(v2.x * (fTransparentScale * 2.0 - 1.0), v2.yzw);\n                \n\t// The condition allows us to ignore transparency for secondary rays\n    return mix(v1, vScaled, step(vScaled.x, v1.x) * step(0.0, fTransparentScale));\n}\n \nvec4 DistCombineIntersect( const in vec4 p1, const in vec4 p2 ){\n\treturn mix(p2, p1, step(p2.x,p1.x));\n}\n \nvec4 DistCombineSubtract( const in vec4 p1, const in vec4 p2 ){\n\treturn DistCombineIntersect(p1, vec4(-p2.x, p2.yzw));\n}\n \nvec3 DomainRepeatXZGetTile( const in vec3 p, const in vec2 repeat, out vec2 tile ){\n\tvec3 result = p;\n\tvec2 tilePos = (p.xz / repeat) + 0.5;\n\ttile = floor(tilePos + 1000.0);\n\tresult.xz = (fract(tilePos) - 0.5) * repeat;\n\treturn result;\n}\n \nvec3 DomainRepeatXZ( const in vec3 p, const in vec2 repeat ){\n\tvec3 result = p;\n\tvec2 tilePos = (p.xz / repeat) + 0.5;\n\tresult.xz = (fract(tilePos) - 0.5) * repeat;\n\treturn result;\n}\n \nvec3 DomainRepeatY( const in vec3 p, const in float size ){\n\tvec3 result = p;\n\tresult.y = (fract(p.y / size + 0.5) - 0.5) * size;\n\treturn result;\n}\n \nvec3 DomainRotateSymmetry( const in vec3 p, const in float steps ){\n\tfloat angle = atan( p.x, p.z );\n\tfloat scale = steps / (kTwoPI);\n\tfloat steppedAngle = (floor(angle * scale + 0.5)) / scale;\n\tfloat s = sin(-steppedAngle);\n\tfloat c = cos(-steppedAngle);\n\n\treturn vec3( c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n\n\n\n//<-----------------------DE'S & some associated methods-------------------------------------------------->\n\nfloat GetDistanceSphere(const in vec3 p, const in float r) {\n    return length(p) - r;\n}\n\nfloat GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 ){\n\tvec2 q = vec2(length(p.xy)-r1,p.z);\n\treturn length(q)-r2;\n}\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 ){\n\tvec2 q = vec2(length(p.yz)-r1,p.x);\n\treturn length(q)-r2;\n}\n\nfloat GetDistanceXZTorus( const in vec3 p, const in vec2 r ){\n  \tvec2 q = vec2(length(p.xz)-r.x,p.y);\n  \treturn length(q)-r.y;\n}\n//Scene Start\n\tfloat GetDistanceSDCylinder( const in vec3 p, const in vec3 c ){\n  \treturn length(p.xz-c.xy)-c.z;\n}\nfloat GetDistanceCylinderY(const in vec3 p, const in float r){\n\treturn length(p.xz) - r;\n}\n//signed distance to box (iq) - glsl interpretation\nfloat GetDistanceSDBox(const in vec3 p, const in vec3 size) {\n\tvec3 d = abs(p) - size;\n\treturn min(max(d.x,max(d.y, d.z)), length(max(d, 0.0)));\n}\n\nfloat GetDistanceBox( const in vec3 p, const in vec3 size ){\n\tvec3 d = (abs(p) - size);\n\treturn max(d.x, max(d.y, d.z));\n}\n \nfloat GetDistanceRoundedBox( const in vec3 p, const in vec3 size, const in float radius ){\n\tvec3 closest = max(min(p, size), -size);\n\treturn length(closest - p) - radius;\n}\n\nfloat GetDistanceHexagon( const in vec3 p, const in vec2 h ){\n    vec3 q = abs(p);\n    return max(q.y-h.y,max(q.x+q.z*0.57735,q.z*1.1547)-h.x);\n}\n\nfloat GetDistanceTri(const in vec3 p, const in vec2 h){\n    vec3 q = abs(p);\n    return max(q.z - h.y, max(dot(vec2(q.x, p.y), vec2(0.866025, 0.5)), -p.y) - h.x*0.5);\n}\n\nfloat GetDistanceCylinder(const in vec3 p, const in float r, const in float c){\n    return max(length(p.xz)-r, abs(p.y)-c);\n}\n\n//r1-lower radius, r2 upper radius, c = height/2\nfloat GetDistanceCone(const in vec3 p, const in float r1, const in float r2, const in float c) {\n\tfloat d = length(p.xz)-mix(r1, r2, (c+p.y)/(c+c));\n\td = max(d,-p.y-c);\n\td = max(d,p.y-c);\n\treturn d;\n}\n\nfloat spheretrace(in vec3 p){\n\tfloat scale = 1.;\n\tfloat angle = iTime*.3;\n\tfloat mx = (iMouse.x-.5)*6.28;\n\tfloat my = (iMouse.y-.5)*3.14;\n\tvec3 axis0 = vec3(cos(mx)*cos(my),sin(my),sin(mx)*cos(my));\n\n\t// Compute rotation matrix (faster than multiplying with quaternions)\n\tfloat c0 = cos(angle);\n\tfloat s0 = sin(angle);\n\tvec3 as = axis0*s0;\n\tvec3 ac = axis0*axis0*(1.-c0);\n\tvec3 ad = axis0.yzx*axis0.zxy*(1.-c0);\n\tmat3 rot = mat3(\n\t\tc0   + ac.x , ad.z - as.z , ad.y + as.y,\n\t\tad.z + as.z , c0   + ac.y , ad.x - as.x,\n\t\tad.y - as.y , ad.x + as.x , c0   + ac.z\n\t)*1.26;\n\t\t\t \n\tfor (int i = 0; i < 30; i++) {\n\t\t// actual rotation\n\t\tp *= rot;\n\t\t\n\t\t// space mirroring and scaling\n\t\tp.z = abs(p.z)-4.*1.26;\n\t\tscale *= 1.26;\n\t}\n\treturn (length(p)-2.)/scale;\n}\n\nfloat cube(const in vec3 p, const in vec3 o, const in vec3 s){\n   \treturn length( max(vec3(0.0), abs(p - o) - s) );\n}\n\n\n//<---------------------------------SCENE_DE--------------------------------------------------------->\nvec4 GetDistanceScene(const in vec3 vPos,const in float fTransparentScale ){          \n\tvec4 vResult =  vec4(10000.0, -1.0, 0.0, 0.0);\n\n\tvec3 vObj1Domain=vPos;//RotateX(vPos,1.75);//DomainRotateSymmetry(vPos,2.5);\n\t\t\n\tvec3 vObj2Domain=vPos;\n\tvObj2Domain.x =sin(sin(cos(sin(vPos.x)*1.22)*.75+iTime)*2.5+iTime)*.78+cos(sin(cos(vPos.y*23.+iTime)*.266+iTime)*.2)*.15;\n\tvObj2Domain.z +=3.5+sin(sin(cos(sin(vPos.y*0.75+iTime)*1.22+iTime)*1.75)*.33)*.78+cos(sin(cos(vPos.x*13.)*.66+iTime)*.52)*.15;;\n\tvObj2Domain.y +=-.75+sin(sin(cos(sin(vPos.x*.25+iTime)*1.22+iTime)*.75)*4.)*.78+cos(sin(cos(vPos.y*23.)*.66+iTime)*.52)*.35;;\n\n\tvec4 vDistFloor = vec4(vObj1Domain.y+1.4+sin(iTime+vPos.x*1.75)*.26+cos(iTime+vPos.z*1.25)*.29+sin(iTime+vPos.x*2.54)*.16+cos(iTime+vPos.z*9.9)*.1, 1.0, vPos.xz);\n\tvec4 vDistObj = vec4( GetDistanceSphere(vObj2Domain+(sin(vPos.y*18.5)*.005),1.), 2.0, vPos.xz);\n\n\t//vResult =DistCombineUnion(vResult,vDistObj);\n\n\tvResult = DistCombineUnion(vDistFloor, vDistObj);//DistCombineUnionTransparent must be used for transparencyâ€¦and when set, no shadows :(\n\t       \n\treturn vResult;\n}\n//<---------------------------------SCENE_TEXTURE--------------------------------------------------------->\n\nfloat GetRayFirstStep( const in C_Ray ray )\n{\n    return ray.fStartDistance;  \n}\n\nC_Material GetObjectMaterial( const in C_HitInfo hitInfo ){\n    C_Material mat;\n              //if(vObjId.x < 1.5)\n    if(hitInfo.vObjectId.x == 1.0){\n        // floor\n         mat.fR0 = 0.02;\n\t\n         mat.cAlbedo = vec3(1.0)+hsv(sin(hitInfo.vObjectId.y*.025)+.5,1.975,.5);// * (fTile * 0.8 + 0.2);\n         mat.fSmoothness = 0.2;\n        \n         //mat.fSmoothness = mat.cAlbedo.r;\n         mat.fTransparency = 0.0;\n         //texture version\n         /*vec3 cTexture = texture(iChannel[0], hitInfo.vObjectId.yz * 0.25).rgb;\n         mat.cAlbedo = cTexture * cTexture;\n         mat.fSmoothness = mat.cAlbedo.r;\n         mat.fTransparency = 0.0;*/\n    }\n    else\n    if(hitInfo.vObjectId.x == 2.0){\n        mat.fR0 = 0.8;\n        mat.fSmoothness = 1.0;\n        mat.cAlbedo = vec3(1.);\n        mat.fTransparency = 0.0;\n    }\n    else\n       if(hitInfo.vObjectId.x == 3.0){\n    \t\t//transparent\n        mat.fR0 = 0.1;\n        mat.fSmoothness = 1.0;\n        mat.fTransparency = 1.0;\n        mat.fRefractiveIndex = 1.0 / 1.3330;\n        const float fExtinctionScale = 2.0;\n\t\tconst vec3 vExtinction = vec3(1.);//vec3(0.3, 0.7, 0.9);\n        mat.cAlbedo = (vec3(1.0) - vExtinction) * fExtinctionScale; // becomes extinction for transparency\n    }\n    else if (hitInfo.vObjectId.x ==4.){//vid for object grid\n    \t\tmat.fR0 = 0.1;\n\t\tmat.fSmoothness = 0.169;\n\t\t//vec4 tex=texture(texture2,vec2(vPos.x,-vPos.y)/1.2);\n\t\tvec3 p=hitInfo.vObjectId+tOffset;\n\t\tif (p.x>-0.5 && p.x<64.5 && p.z>-0.5 && p.z<48.5)/*grid bounds*/{\n\t\tvec4 tex=texture(iChannel0,p.xz/vec2(64.0,48.0).xy);\n\t\tmat.cAlbedo=vec3(tex.rgb);//vec3(0,0,0.3)*c+vec3(1,1,1)*(1.0-c);\n\t\t}\n\t\telse\n\t\tmat.cAlbedo=vec3(1.);\n\t}\n    return mat;\n}\n\nvec3 GetSkyGradient( const in vec3 vDir ){\n    const vec3 cColourTop = vec3(0.7, 0.8, 1.0);\n    const vec3 cColourHorizon = cColourTop * 0.5;\n\n    float fBlend = clamp(vDir.y, 0.0, 1.0);\n    return mix(cColourHorizon, cColourTop, fBlend);\n}\n\nC_PointLight GetPointLight(){\n    \tC_PointLight result;\n\n    \tresult.vPos = vec3(-1.5, 0.7, 7.3);\n   \t#ifdef ENABLE_BRIGHTLIGHT\t\n    \tresult.cColour = vec3(32.0, 22.0, 18.0) * 180.0;\n\treturn result;\n\t#endif\n    \tresult.cColour = vec3(32.0, 6.0, 1.0) * 10.0;\n    \treturn result;\n}\n\nC_DirectionalLight GetDirectionalLight(){\n    C_DirectionalLight result;\n\n    result.vDir = normalize(vec3(0.3, -0.3, 0.5));\n    result.cColour = vec3(0.1, 0.1, 0.5);\n\n    return result;\n}\n\nvec3 GetAmbientLight(const in vec3 vNormal){\n    return GetSkyGradient(vNormal);\n}\n\n/////////////////////////////////////\n// Raymarching \n\nvec3 GetSceneNormal( const in vec3 vPos, const in float fTransparentScale ){\n    // tetrahedron normal\n    const float fDelta = 0.025;\n\n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n    float f1 = GetDistanceScene( vPos + vOffset1, fTransparentScale ).x;\n    float f2 = GetDistanceScene( vPos + vOffset2, fTransparentScale ).x;\n    float f3 = GetDistanceScene( vPos + vOffset3, fTransparentScale ).x;\n    float f4 = GetDistanceScene( vPos + vOffset4, fTransparentScale ).x;\n\n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n    return normalize( vNormal );\n}\n\n#define kRaymarchEpsilon 0.0001\n// This is an excellent resource on ray marching -> https://iquilezles.org/articles/distfunctions\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const int maxIter, const float fTransparentScale ){        \n    result.fDistance = GetRayFirstStep( ray );\n    result.vObjectId.x = 0.0;\n        \n    for(int i=0;i<=kRaymarchMaxIter;i++){\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n        vec4 vSceneDist = GetDistanceScene( result.vPos, fTransparentScale );\n        result.vObjectId = vSceneDist.yzw;\n        \n        // abs allows backward stepping - should only be necessary for non uniform distance functions\n        if((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= ray.fLength) || (i > maxIter)){\n            break;\n        }                        \n\n        result.fDistance = result.fDistance + vSceneDist.x; \n    }\n\n\n    if(result.fDistance >= ray.fLength){\n        result.fDistance = 1000.0;\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n        result.vObjectId.x = 0.0;\n    }\n}\n\nfloat GetShadow( const in vec3 vPos, const in vec3 vNormal, const in vec3 vLightDir, const in float fLightDistance ){\n    #ifdef ENABLE_SHADOWS\n\t\tC_Ray shadowRay;\n\t\tshadowRay.vDir = vLightDir;\n\t\tshadowRay.vOrigin = vPos;\n\t\tconst float fShadowBias = 0.05;\n\t\tshadowRay.fStartDistance = fShadowBias / abs(dot(vLightDir, vNormal));\n\t\tshadowRay.fLength = fLightDistance - shadowRay.fStartDistance;\n\t\n\t\tC_HitInfo shadowIntersect;\n\t\tRaymarch(shadowRay, shadowIntersect, 32, kNoTransparency);//+trans_shadow);\n\t\t//Raymarch(shadowRay, shadowIntersect, 32, 1.);//kNoTransparency);\n\n\t\tfloat fShadow = step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );\n\t\t\n\t\treturn fShadow;          \n    #else\n    \treturn 1.0;\n    #endif\n}\nfloat Dither=.95;\n// use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_HitInfo intersection, const in C_Surface surface){\n    \t\t#ifdef ENABLE_AMBIENT_OCCLUSION    \n\t\tvec3 vPos = intersection.vPos;\n\t\tvec3 vNormal = surface.vNormal;\n\t\n\t\tfloat fAmbientOcclusion = 1.0;\n\t\tfloat d=1.0;//-(Dither*rand(vPos.xy));\n\n\t\t#ifdef ENABLE_AO_DITHER    \n\t\td-=(Dither*rand(vPos.xy));\n\t\t#endif\n\t\tfloat fDist = 0.0;\n\t\tfor(int i=0; i<=5; i++){\n\t\t\tfDist += 0.1;\n\t\n\t\t\tvec4 vSceneDist = GetDistanceScene(vPos + d*vNormal * fDist, kNoTransparency);//+trans_ao);\n\t\t\t//vec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist, 1.);\n\t\t\t\t\t\n\t\t\tfAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 / fDist*d );                                  \n\t\t}\n\t\n\t\treturn fAmbientOcclusion;\n    #else\n\t    return 1.0;\n    #endif    \n}\n\n\n/////////////////////////////////////\n// Lighting and Shading\n\n#define kFogDensity 0.035\n\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo hitInfo){\n    #ifdef ENABLE_FOG\n    // fog\n    float fFogAmount = exp(hitInfo.fDistance * -kFogDensity);\n    vec3 cFog = GetSkyGradient(ray.vDir);\n\n    #ifdef ENABLE_DIRECTIONAL_LIGHT_FLARE\n    C_DirectionalLight directionalLight = GetDirectionalLight();\n    float fDirDot = clamp(dot(-directionalLight.vDir, ray.vDir), 0.0, 1.0);\n    cFog += directionalLight.cColour * pow(fDirDot, 10.0);\n    #endif \n\n    col = mix(cFog, col, fFogAmount);\n    #endif\n\n    // glare from light (a bit hacky - use length of closest approach from ray to light)\n    #ifdef ENABLE_POINT_LIGHT_FLARE\n    C_PointLight pointLight = GetPointLight();\n\n    vec3 vToLight = pointLight.vPos - ray.vOrigin;\n    float fPointDot = dot(vToLight, ray.vDir);\n    fPointDot = clamp(fPointDot, 0.0, hitInfo.fDistance);\n\n    vec3 vClosestPoint = ray.vOrigin + ray.vDir * fPointDot;\n    float fDist = length(vClosestPoint - pointLight.vPos);\n    col += pointLight.cColour * 0.01/ (fDist * fDist);\n    #endif    \n}\n\n// http://en.wikipedia.org/wiki/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor){\n    float fDot = dot(vNormal, -vView);\n    fDot = clamp((1.0 - fDot), 0.0, 1.0);\n    float fDotPow = pow(fDot, 5.0);\n    return fR0 + (1.0 - fR0) * fDotPow * fSmoothFactor;\n}\n\nvec3 ApplyFresnel(const in vec3 vDiffuse, const in vec3 vSpecular, const in vec3 vNormal, const in vec3 vView, const in C_Material material){\n    float fFresnel = Schlick(vNormal, vView, material.fR0, material.fSmoothness * 0.9 + 0.1);\n    return mix(vDiffuse, vSpecular, fFresnel);    \n}\n\nfloat GetBlinnPhongIntensity(const in vec3 vIncidentDir, const in vec3 vLightDir, const in vec3 vNormal, const in float fSmoothness){          \n    vec3 vHalf = normalize(vLightDir - vIncidentDir);\n    float fNdotH = max(0.0, dot(vHalf, vNormal));\n\n    float fSpecPower = exp2(4.0 + 6.0 * fSmoothness);\n    float fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n\n    return pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n\nC_Shading ApplyPointLight( const in C_PointLight light, const in vec3 vSurfacePos, const in vec3 vIncidentDir, const in vec3 vNormal, const in C_Material material ){\n    C_Shading shading;\n    \n    vec3 vToLight = light.vPos - vSurfacePos;\n    vec3 vLightDir = normalize(vToLight);\n    float fLightDistance = length(vToLight);\n    \n    float fAttenuation = 1.0 / (fLightDistance * fLightDistance);\n    \n    float fShadowFactor = GetShadow( vSurfacePos, vNormal, vLightDir, fLightDistance );\n    vec3 vIncidentLight = light.cColour * fShadowFactor * fAttenuation * max(0.0, dot(vLightDir, vNormal));\n    \n    shading.cDiffuse = vIncidentLight;                                  \n    shading.cSpecular = GetBlinnPhongIntensity( vIncidentDir, vLightDir, vNormal, material.fSmoothness ) * vIncidentLight;\n    \n    return shading;\n}  \n\nC_Shading ApplyDirectionalLight( const in C_DirectionalLight light, const in vec3 vSurfacePos, const in vec3 vIncidentDir, const in vec3 vNormal, const in C_Material material ){\n    C_Shading shading;\n\n    const float kShadowRayLength = 10.0;      \n    vec3 vLightDir = -light.vDir;\n    float fShadowFactor = GetShadow( vSurfacePos, vNormal, vLightDir, kShadowRayLength );\n    vec3 vIncidentLight = light.cColour * fShadowFactor * max(0.0, dot(vLightDir, vNormal));\n    \n    shading.cDiffuse = vIncidentLight;                                  \n    shading.cSpecular = GetBlinnPhongIntensity( vIncidentDir, vLightDir, vNormal, material.fSmoothness ) * vIncidentLight;\n    \n    return shading;\n}  \n\nvec3 ShadeSurface(const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface, const in C_Material material){\n    vec3 cScene;\n    \n    C_Shading shading;\n\n    shading.cDiffuse = vec3(0.0);\n    shading.cSpecular = vec3(0.0);\n    \n    \tfloat fAmbientOcclusion = GetAmbientOcclusion(hitInfo, surface);\n\n    \tvec3 vAmbientLight = GetAmbientLight(surface.vNormal) * fAmbientOcclusion;\n    \t  \n    shading.cDiffuse += vAmbientLight;\n    shading.cSpecular += surface.cReflection;\n              \n    #ifdef ENABLE_POINT_LIGHT\n    C_PointLight pointLight = GetPointLight(); \n    C_Shading pointLighting = ApplyPointLight(pointLight, hitInfo.vPos,ray.vDir, surface.vNormal, material);\n    shading.cDiffuse += pointLighting.cDiffuse;\n    shading.cSpecular += pointLighting.cSpecular;\n    #endif\n\n    #ifdef ENABLE_DIRECTIONAL_LIGHT\n\tC_DirectionalLight directionalLight = GetDirectionalLight();\n    C_Shading directionLighting = ApplyDirectionalLight(directionalLight, hitInfo.vPos, ray.vDir, surface.vNormal, material);\n    shading.cDiffuse += directionLighting.cDiffuse;\n    shading.cSpecular += directionLighting.cSpecular;\n    #endif\n\n    vec3 vDiffuseReflection = shading.cDiffuse * material.cAlbedo;              \n\n    // swap diffuse for transmission\n    vDiffuseReflection = mix(vDiffuseReflection, surface.cTransmission, material.fTransparency);    \n\n    #ifdef ENABLE_SPECULAR\n    cScene = ApplyFresnel(vDiffuseReflection , shading.cSpecular, surface.vNormal, ray.vDir, material);\n    #else\n    cScene = vDiffuseReflection;\n    #endif\n    \n    return cScene;\n}\nvec3 GetSceneColourSecondary( const in C_Ray ray );\n\nvec3 GetReflection( const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface ){\n    #ifdef ENABLE_REFLECTIONS    \n    {\n        // get colour from reflected ray\n        const float fSeparation    = 0.1;\n\n        C_Ray reflectRay;\n        reflectRay.vDir = reflect(ray.vDir, surface.vNormal);\n        reflectRay.vOrigin = hitInfo.vPos;\n        reflectRay.fLength = 16.0;\n        reflectRay.fStartDistance = fSeparation / abs(dot(reflectRay.vDir, surface.vNormal));\n        \n        return GetSceneColourSecondary(reflectRay);      \n    }\n    #else\n        return GetSkyGradient(reflect(ray.vDir, surface.vNormal));                              \n    #endif\n}\n\nvec3 GetTransmission( const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface, const in C_Material material ){\n    #ifdef ENABLE_TRANSPARENCY  \n    {\n        const float fSeparation = 0.05;\n\n        // Trace until outside transparent object\n        C_Ray refractRay;\n        // we dont handle total internal reflection (in that case refract returns a zero length vector)\n        refractRay.vDir = refract(ray.vDir, surface.vNormal, material.fRefractiveIndex);\n        refractRay.vOrigin = hitInfo.vPos;\n        refractRay.fLength = 16.0;\n        refractRay.fStartDistance = fSeparation / abs(dot(refractRay.vDir, surface.vNormal));\n\n\t\t#ifdef DOUBLE_SIDED_TRANSPARENCY\n\t\t\n\t\t\tC_HitInfo hitInfo2;\n\t\t\tRaymarch(refractRay, hitInfo2, 32, kInverseTransparency);\n\t\t\tvec3 vNormal = GetSceneNormal(hitInfo2.vPos, kInverseTransparency);\n\t\t\t#ifdef ENABLE_MONTE_CARLO\n\t\t\tvNormal = normalize(vNormal + gRandomNormal / (5.0 + material.fSmoothness * 200.0));\n\t\t\t#endif\n\n\t\t\t// get colour from rest of scene\n\t\t\tC_Ray refractRay2;\n\t\t\trefractRay2.vDir = refract(refractRay.vDir, vNormal, 1.0 / material.fRefractiveIndex);\n\t\t\trefractRay2.vOrigin = hitInfo2.vPos;\n\t\t\trefractRay2.fLength = 16.0;\n\t\t\trefractRay2.fStartDistance = 0.0;//fSeparation / abs(dot(refractRay2.vDir, vNormal));\n\t\t\t\n\t\t\tfloat fExtinctionDist = hitInfo2.fDistance;\n\t\t\tvec3 vSceneColour = GetSceneColourSecondary(refractRay2);\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 vSceneColour = GetSceneColourSecondary(refractRay);                                                                        \n\t\t\tfloat fExtinctionDist = 0.5;\n\t\t\n\t\t#endif\n                                \n        vec3 cMaterialExtinction = material.cAlbedo;\n        // extinction should really be exp(-) but this is a nice hack to get RGB\n        vec3 cExtinction = (1.0 / (1.0 + (cMaterialExtinction * fExtinctionDist)));\n                                \n                                return vSceneColour * cExtinction;\n    }\n    #else\n        return GetSkyGradient(reflect(ray.vDir, surface.vNormal));                              \n    #endif\n}\n\n// no reflections, no transparency, used for secondary rays\nvec3 GetSceneColourSecondary( const in C_Ray ray ){\n    C_HitInfo hitInfo;\n    Raymarch(ray, hitInfo, 32, kNoTransparency);\n                        \n    vec3 cScene;\n\n    if(hitInfo.vObjectId.x < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {    \n\n        C_Surface surface;        \n        surface.vNormal = GetSceneNormal(hitInfo.vPos, kNoTransparency);\n\t\t\n        C_Material material = GetObjectMaterial(hitInfo);\n\t\t#ifdef ENABLE_MONTE_CARLO\n\t\tsurface.vNormal = normalize(surface.vNormal + gRandomNormal / (5.0 + material.fSmoothness * 200.0));\n\t\t#endif\n\n        // use sky gradient instead of reflection\n        surface.cReflection = GetSkyGradient(reflect(ray.vDir, surface.vNormal));\n        \n        material.fTransparency = 0.0;\n\n        // apply lighting\n        cScene = ShadeSurface(ray, hitInfo, surface, material);\n    }\n\n    ApplyAtmosphere(cScene, ray, hitInfo);\n\n    return cScene;\n}\n\nvec3 GetSceneColourPrimary( const in C_Ray ray){                                                          \n    C_HitInfo intersection;\n    Raymarch(ray, intersection, 256, kTransparency);\n                \n    vec3 cScene;\n\n    if(intersection.vObjectId.x < 0.5)\n    {\n        cScene = GetSkyGradient(ray.vDir);\n    }\n    else\n    {\n        C_Surface surface;\n        \n        surface.vNormal = GetSceneNormal(intersection.vPos, kTransparency);\n\t\t\n        C_Material material = GetObjectMaterial(intersection);\n\t\t#ifdef ENABLE_MONTE_CARLO\n\t\tsurface.vNormal = normalize(surface.vNormal + gRandomNormal / (5.0 + material.fSmoothness * 200.0));\n\t\t#endif\n        surface.cReflection = GetReflection(ray, intersection, surface);\n\n        if(material.fTransparency > 0.0)\n        {    \n            surface.cTransmission = GetTransmission(ray, intersection, surface, material);\n        }\n\n        // apply lighting\n        cScene = ShadeSurface(ray, intersection, surface, material);\n    }\n\n    ApplyAtmosphere(cScene, ray, intersection);\n\n    return cScene;\n}\n\nfloat kFarClip = 30.0;\n\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray){\n\tvec2 vPixelCoord = fragCoord.xy;\n\t#ifdef ENABLE_MONTE_CARLO\n\tvPixelCoord += gPixelRandom.zw;\n\t#endif\n\n    vec2 vUV = ( vPixelCoord / iResolution.xy );\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\n\n    float fRatio = iResolution.x / iResolution.y;\n    vViewCoord.y /= fRatio;                          \n\n    ray.vOrigin = vPos;\n\n    vec3 vRight = normalize(cross(vForwards, vWorldUp));\n    vec3 vUp = cross(vRight, vForwards);\n        \n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards); \n    ray.fStartDistance = 0.0;\n    ray.fLength = kFarClip;      \n}\n\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray){\n    vec3 vForwards = normalize(vInterest - vPos);\n    vec3 vUp = vec3(0.0, 1.0, 0.0);\n\n    GetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\n}\nvec3 OrbitPoint( const in float fHeading, const in float fElevation ){\n    return vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\nvec3 Gamma( const in vec3 cCol ){\n    return cCol * cCol;\n}\nvec3 InvGamma( const in vec3 cCol )\n{\n\treturn sqrt(cCol);\n}\nvec3 Tonemap( const in vec3 cCol ){\n    // simple Reinhard tonemapping operator    \n    vec3 vResult = cCol / (1.0 + cCol);\n\n    return Gamma(vResult);\n}\nvec3 InvTonemap( const in vec3 cCol ){\n\tvec3 vResult = cCol;\n\tvResult = clamp(vResult, 0.01, 0.99);\n\tvResult = InvGamma(vResult);\n\treturn - (vResult / (vResult - 1.0));\n}\n//POST FX \n\n\n\nvec4 shadePost_vignette(vec4 col, vec2 screenpos, vec2 fragCoord){\n    float vignette = max(0.0,0.6 - pow(dot(screenpos,screenpos),0.3)*0.25);\n    col *= vec4(vignette,vignette,vignette,1.0);   \n    col *= 1.41 - rand2d(fragCoord.xy+sin(iTime*0.01))*0.15;\n    vec3 gamma = vec3(1.4,1.3,1.3);\t\n    col =  vec4(pow(col.r,1.0/gamma.r),pow(col.g,1.0/gamma.g),pow(col.b,1.0/gamma.b),1.0); \t\n    return col;\n}\n\nvec4 shadePost_sceneFade(vec4 col){\nfloat t = iTime * 0.20;\n    //if(mouse.x<0.1){ t = 115.0; };\t\t\n    float day = t * 0.5;\n    float scenetime  = t*0.1;\n    float scenefade  = 1.0-pow(abs(fract(scenetime)*2.0-1.0),50.0);\n    col *=scenefade;\n    //float sceneanim1 = sin(floor(scenetime)*35.0+fract(scenetime)*1.0);\n    //float sceneanim2 = sin(floor(scenetime)*36.0+fract(scenetime)*0.8);\n    return col;\n}\n\n//<-------------------MAIN--------------->\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2    screenpos = (2.0 * (fragCoord / iResolution.xy)) - 1.0;\n\n    #ifdef ENABLE_MONTE_CARLO             \n\tCalcPixelRandom();\n\t#endif\n       \n\tC_Ray ray;\n       \n\tconst float fCamreaInitialHeading = 0.0;\n\tconst float fCamreaInitialElevation = 0.5;\n\tconst float fCamreaInitialDist = 20.0;\n\tconst float fCameraHeight = 5.01;\n\tconst float fOrbitSpeed = 1.0;\n\t\n\t// This magic stolen from other 3d pan/zoom examples\n\tfloat fZoom = surfaceSize.y * 0.5 + 0.4;\n\t\n\tvec2 vCenterPosition = (iMouse.xy/4.+.5)+(0.5 - ( fragCoord / iResolution.xy )) * surfaceSize;\n\tfloat fHeading = vCenterPosition.x * fOrbitSpeed + fCamreaInitialHeading;\n\tfloat fElevation = (vCenterPosition.y * fOrbitSpeed + fCamreaInitialElevation);\n\t\n\tvec3 vCameraPos = OrbitPoint(fHeading, fElevation) * fCamreaInitialDist * fZoom;\n\t\n\tvCameraPos += vec3(0.0, -fCameraHeight, 0.0);\n\t#ifdef ENABLE_MONTE_CARLO             \n\tfloat fDepthOfField = 0.1;\n\tvCameraPos += gRandomNormal * fDepthOfField;\n\t#endif\n       \n\tGetCameraRayLookat( vCameraPos, vec3(0.0, 0.0, 0.0), fragCoord, ray);\n\t//GetCameraRayLookat(vec3(0.0, 0.0, -5.0), vec3(0.0, 0.0, 0.0), ray);\n       \n\tvec3 cScene = GetSceneColourPrimary( ray );//+hsv(GetSceneColourPrimary( ray ).r*.15+.7,.975,.5);   \n       \n\tfloat fExposure = 3.5;\n\tcScene = cScene * fExposure;\n       \n\t#ifdef ENABLE_MONTE_CARLO                              \n\tvec3 cPrev = texture(backbuffer, fragCoord.xy / resolution).xyz;\n\t// add noise to pixel value (helps values converge)\n\tcPrev += (gPixelRandom.xyz - 0.5) * (1.0 / 255.0);\n\tcPrev = InvTonemap(cPrev);\n\t// converge speep\n\tfloat fBlend = 0.1;\n\tvec3 cFinal = mix(cPrev, cScene, fBlend);\n\t#else\n\tvec3 cFinal = cScene;\n\t#endif\n\t\n\tcFinal = Tonemap(cFinal);\n\t\n\tfloat fAlpha = 1.0;\n\n\tvec4 col = vec4(cFinal, fAlpha );\n\tfragColor = shadePost_vignette(col,screenpos, fragCoord);\n\t//shadePost_sceneFade();\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdS3RG","date":"1389893890","viewed":861,"name":"Pretty...gross","username":"gtoledo3","description":"Scene using pmalin's framework.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch"],"hasliked":0,"parentid":"","parentname":""}}