{"ver":"0.1","info":{"id":"DdKBWV","date":"1698677875","viewed":43,"name":"Vanishing Mandel v1.0.1","username":"FishDrowned","description":"z^2 + tan(a)*z + c, a = SPEED * iTime","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made via ShaderToy\n// update v1.0.0 init\n// update v1.0.0 got rid of needless color function\n\n// Animations, one at a time\nbool ILLBEBACK = true;\n\n// Constants\nbool COLORBAND = false;\nbool ZOOM = true;\n\nfloat ZOOM_MAG = 1.0;\nfloat RADIUS = 20.0;\nfloat COLORFULL = 10.0;\nfloat SPEED = 1.0;\n\nint ITERATIONS = 900;\n\n// POSITIONS\n\n// ZOOMS\n//vec2 zoomPosition = vec2(.65, .45);\nvec2 zoomPosition = vec2(0.0);\n\n// STARTING\nvec2 startingPosition = vec2(0.2, 0);\n\n\n// Helper Functions\nfloat frac(float f){\n    return f - floor(f);\n}\n\n// COLOR FUNCTIONS\nvec3 mandelColor(float iteration){\n    float sn = iteration/float(ITERATIONS) * float(COLORFULL);\n    float t = frac(sn + .5);\n    vec3 a = vec3(.5);\n    vec3 b = vec3(.5);\n    vec3 c = vec3(1);\n    vec3 d = vec3(.0, .1, .2);\n    \n    vec3 color = vec3(0.0);\n    \n    if(iteration != float(ITERATIONS)){\n        color = (a + b * cos(6.28318*(c*t+d)))*1.3;\n    }\n    \n    return color;\n}\n\nvec3 blackWhite(float iteration, bool middleWhite, bool reverse){\n    if(iteration == float(ITERATIONS) && !middleWhite){\n        return vec3(0.0, 0.0, 0.0);\n    }else if(reverse){\n        return vec3(1.0 - iteration/float(ITERATIONS) * COLORFULL);\n    }\n    return vec3(iteration/float(ITERATIONS) * COLORFULL);\n}\n\n// MANDEL\nfloat mandelBrot(vec2 z_0, float i_m, float a) {\n    z_0 = 2.5 * z_0 - startingPosition;\n    \n    if(ZOOM){\n        z_0 = z_0/ZOOM_MAG - zoomPosition;\n    }else{\n        z_0 = z_0 / pow(iTime, 2.0) - zoomPosition;\n    }\n    \n    vec2 z_n = vec2(0.0);\n    float i_z = 0.0;\n    float m_z = dot(z_0, z_0);\n    \n    while(i_z < i_m && m_z < RADIUS){\n        z_n = vec2(pow(z_n.x, 2.0) - pow(z_n.y, 2.0)\n                    , 2.0 * z_n.x * z_n.y) + z_0 + tan(a) * z_n;\n        \n        i_z += 1.0;\n        m_z = dot(z_n, z_n);\n    }\n    \n    if(i_z == float(ITERATIONS)){\n        return float(ITERATIONS);\n    }\n    \n    if(COLORBAND){\n        return i_z;\n    }\n    \n    return float(i_z + 1.0 - (log(log(m_z))/log(2.0)));\n}\n\n// MAIN\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy)/iResolution.y;\n    float a = SPEED * iTime;\n    \n    float iterations = mandelBrot(uv, float(ITERATIONS), a);\n    \n    //vec3 color = blackWhite(iterations, false, false);  // BLACK AND WHITE (WHITE CENTER)\n    vec3 color = mandelColor(iterations);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}