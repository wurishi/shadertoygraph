{"ver":"0.1","info":{"id":"ds2fzc","date":"1690144073","viewed":76,"name":"Wowy","username":"jeffbustercase","description":"Playing with time as rerenderrr.. beautiful","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["light","beautiful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Uncomment below to move it with the mouse\n//#define USE_MOUSE\n#define g iMouse\n// multiply by -1.0 to invert the direction\n#define tm iTime * 0.75 \n\n\nmat3 rotX(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat3(\n    1.0, 0.0, 0.0,\n    0.0, c, s,\n    0.0, -s, c\n  );\n}\n\nmat3 rotY(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat3(\n    c, 0.0, -s,\n    0.0, 1.0, 0.0,\n    s, 0.0, c\n  );\n}\n\nmat3 rotZ(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n\n  return mat3(\n    c, s, 0.0,\n    -s, c, 0.0,\n    0.0, 0.0, 1.0\n  );\n}\n\nmat2 rot(float k)\n{\n    float c = cos(k);\n    float s = sin(k);\n    return mat2(c,-s,s,c);\n}\n\nvec3 render(vec2 uv, float t)\n{\n    uv.x *= iResolution.x/iResolution.y;\n    #if defined USE_MOUSE\n    vec2 m = iMouse.xy/iResolution.xy*2.0-1.0;\n    m.x *= iResolution.x/iResolution.y;\n    uv+=-m;\n    #endif\n    uv *= rot(sin(t)*10.0 - cos(t)*5.0);\n    \n    uv.x = -abs(uv.x)*2.0;\n    uv.y = -abs(uv.y)*2.0;\n    vec2 ldot = vec2(1.0/2.0);\n    \n    vec2 lst = uv+ldot;\n    \n    vec2 st = uv;\n    vec3 mat = vec3(0.2 * (1.0+sin(t*2.0))/2.0,0.55 * (sin(cos(t) * 0.5)+1.0)/2.0,0.66 * (sin(t * 0.5)+1.0)/2.0);\n    \n    float l = length(lst + vec2(sin(t*10.0 - cos(t * cos(sin(t) * 0.01/length(uv)))*5.0)*0.25));\n    vec3 col = mat * smoothstep(0.1*length(lst),l,0.1);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 col = render(fragCoord/iResolution.xy*2.0-1.0, tm);\n   const int lim = 5;\n   for(int i=0;i<lim;i++)\n   {\n       col += render(fragCoord/iResolution.xy*2.0-1.0, tm+float(i)*0.03) * float(lim-i)/float(lim);\n   }\n   col /= float(lim);\n   \n   col = pow(col, vec3(.4545));\n   \n   fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}