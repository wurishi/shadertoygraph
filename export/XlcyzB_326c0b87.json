{"ver":"0.1","info":{"id":"XlcyzB","date":"1534236635","viewed":392,"name":"Circle Music","username":"TarasU","description":"My steps to learning glsl","likes":10,"published":1,"flags":64,"usePreview":0,"tags":["music","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MtfGDs","filepath":"https://soundcloud.com/ishome/ishome-ken-tavr","previewfilepath":"https://soundcloud.com/ishome/ishome-ken-tavr","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rav (vec2 uv)\n{\n\tvec2 remapuv = 2.*uv - 1.;\n\tfloat radius = length (remapuv);\n\tfloat corner = ((atan(remapuv.g,remapuv.r)/6.28318530718)+0.5);\n\tuv = vec2(radius, corner);\n    \n\treturn uv;\n}\n\nfloat remap(float s, float a1, float a2, float b1, float b2)\n{\n    return b1 + (s-a1)*(b2-b1)/(a2-a1);\n}\n\nvec3 hue (vec3 col, float hueAdjust)\n{\n    const vec4  kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);\n    const vec4  kRGBToI     = vec4 (0.596, -0.275, -0.321, 0.0);\n    const vec4  kRGBToQ     = vec4 (0.212, -0.523, 0.311, 0.0);\n\n    const vec4  kYIQToR   = vec4 (1.0, 0.956, 0.621, 0.0);\n    const vec4  kYIQToG   = vec4 (1.0, -0.272, -0.647, 0.0);\n    const vec4  kYIQToB   = vec4 (1.0, -1.107, 1.704, 0.0);\n\t\n    vec4 color = vec4(col, 1.0);\n    \n    // Convert to YIQ\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n\n    // Calculate the hue and chroma\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    // Make the user's adjustments\n    hue += hueAdjust;\n\n    // Convert back to YIQ\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    // Convert back to RGB\n    vec4    yIQ   = vec4 (YPrime, I, Q, 0.0);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n\n    // Save the result\n    return color.rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= iResolution.y / iResolution.x/2.;\n\n    vec2 rf = vec2(rav(uv));\n    rf.y -=0.15;\n    float count = 60.0;\n    vec2 i = floor(rf*count);\n    \n    float sz = 0.4;\n    float ring = smoothstep(rf.x,rf.x + 0.01, sz);\n    \n    float c = fract(i.y/count*2.0);\n    float r = fract(i.x/count);\n    \n    float s1 = texture(iChannel0, vec2(c, 0.01)).r;\n    float s2 = texture(iChannel0, vec2(rf.x*0.001+0.5, 0.01)).r;\n    \n    float m = fract(rf.y*count+0.5);\n    m = m*(1.0-m)*4.0;\n    float m1 = smoothstep(m,m+0.1,0.99);\n    float m2 = clamp(smoothstep(m,m+0.1,0.01)+m1,0.0,1.0);\n    \n    float size = remap(sz*2.0, rf.x+sz, rf.x, 0.0, 1.0);\n    float r1 = step(size, s1)*(1.0-ring)*m2;\n    float r2 = step(remap(rf.x, 0.1, 0.0, 1.0, sz), s2);\n    \n    float msk = step(rf.y, 0.5);\n    \n    vec3 color = vec3(0.0, 0.4, 1.0);\n    float rm = smoothstep(rf.x, rf.x+0.01, remap(s2, 0.0, 1.0, 0.1, sz-0.1));\n    float val = remap(s1, 0.0, 1.0, 0.0, 6.0);\n    vec3 col = 1.6*hue(color, val)*r1 + 1.6*hue(color ,remap(s2, 0.0, 1.0, 0.0, 6.0))*rm;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}