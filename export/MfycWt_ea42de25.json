{"ver":"0.1","info":{"id":"MfycWt","date":"1732544088","viewed":170,"name":"star in space 3","username":"nayk","description":"originals https://www.shadertoy.com/view/XcVcWc","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["stars","particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cheap_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n #define PI 3.141592\n\nfloat stepping(float t)\n{\n    if(t < 0.)\n    {\n        return -1. + pow(1. + t, 2.);\n    }\n    else\n    {\n        return 1. - pow(1. - t , 2.);\n    }\n}\n#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\nvec2 f_o_rotd(vec2 o_trn, float n_ang_nor){\n    float n_tau = radians(360.);\n    float n_sin = sin(n_ang_nor*n_tau);\n    float n_cos = cos(n_ang_nor*n_tau);\n    mat2 o_matr = mat2(\n        n_cos, -n_sin, \n        n_sin, n_cos\n    );\n    return o_trn*o_matr;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n        uv *= rotation(iTime);\n     vec4 fragColor2 = vec4(0);\n    uv = normalize(uv) * length(uv);\n\n    float n_scl_min = min(iResolution.x, iResolution.y);\n    vec2 o_trn = (fragCoord.xy-iResolution.xy*.5)/n_scl_min;\n    o_trn*=.5;\n    float n_dcntr = length(o_trn);\n    o_trn = f_o_rotd(o_trn, iTime*.01*sin(n_dcntr*22.+iTime)*.002);\n    vec2 o2 = (fragCoord.xy / iResolution.xy)*vec2(2.,1.);\n    float n_tau = radians(360.);\n    float n = sin(n_dcntr*n_tau*3.+iTime)*.5+.5;\n    \n    float n2 = 1.;\n    float n_its = 4.;\n    vec3 o_col = vec3(\n       1.\n    );\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n        float n_it_nor = n_it / n_its;\n        vec2 o = o_trn - vec2(\n            sin(n_it_nor*n_tau),\n            cos(n_it_nor*n_tau)\n        )*.2;\n        float ntmp = length(o);\n        ntmp = sin(ntmp*n_tau*(1./n_dcntr*3.)+iTime)*.5+.5;\n        ntmp = pow(ntmp, 1./3.);\n        float nd2 = sin(pow(n_dcntr, 1./20.)*3.)*.5+.5;\n        o_col *= vec3(\n            sin(ntmp*n_tau*((.2/n_dcntr)+.01)+iTime+(nd2*2.))*.5+.5,\n            sin(ntmp*n_tau*((.2/n_dcntr)+.01)+iTime+(nd2*3.))*.5+.5,\n            sin(ntmp*n_tau*((.2/n_dcntr)+.01)+iTime+(nd2*4.))*.5+.5\n        )+0.1;\n    }\n    for(int i=0;i<100;i++)\n    {\n     uv *= rotation(iTime);\n        float t = iTime + float(i) * PI / 12. * (5. + 1. * stepping(sin(iTime * 3.)));\n        vec2 p = vec2(cos(t), sin(t));\n         p *= rotation(3. * 6.28 * (.3 - clamp(length(p),0.,.3)));\n             p+=vec2(fract(log(length(p.xy))+iTime*0.25));  \n        p *= cos(iTime + float(i) * PI * cos(iTime / 8.));\n       \n        vec3 col = cos(vec3(0, 1, -1) * PI * 2. / 3. + PI * (iTime / 2. + float(i) / 5.)) * 0.5 + 0.5;\n        fragColor2 += vec4(0.025 / length(uv - p * 0.9) * col, 1.0);\n    }\n\n vec2 uv2 = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n \n    uv2 = normalize(uv2) * length(uv);\nvec4 fragColor3 ;\n    for(int i=0;i<50;i++)\n    {\n        float t2 = iTime*0.01 + float(i) * PI / 12. * (5. + 1. * stepping(sin(iTime*0.1001 * 3.)));\n        vec2 p2 = vec2(cos(t2*float(i)), sin(float(t2*float(i))));\n        p2 *= cos(iTime + float(i) * PI * cos(iTime*0.1 / 8.));\n        vec3 col2 = cos(vec3(0, 1, -1) * PI * 2. / 3. + PI * (iTime *0.01/ 2. + float(i) / 5.)) *1.5 + 0.5;\n        fragColor3 += vec4(0.05 / length(uv2 - p2 * 0.9) * col2, 1.0);\n    }\n\n    fragColor.xyz = pow(fragColor.xyz, vec3(3.));\n    fragColor.w = 1.0;\n\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n    fragColor = vec4(cheap_star(uv, anim) * vec3(0.35,0.2,0.55)*fragColor2.xyz*0.5*fragColor3.xyz, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}