{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// ----------------------------------------------------------------------------------------\n//\t\"DotDotDot\" by Antoine Clappier - March 2015\n//\n//\tLicensed under a Creative Commons Attribution-ShareAlike 4.0 International License\n//\thttp://creativecommons.org/licenses/by-sa/4.0/\n// ----------------------------------------------------------------------------------------\n\n// An exercise in seamless loop and smooth animation. Proved to be more difficult than expected!\n// The right solution was to use an exponential scaling that provides a nice acceleration \n// while maintaining the same tangents at the beginning and end of the loop.\n\nconst float OversamplingSqrt\t= 4.0;\nconst float ShutterSpeed \t\t= 1.0/60.0;\n\nconst float LoopS\t= 3.0;\nconst float Radius\t= 0.53;\nconst float Scale0\t= 0.6;\nconst float ExpF\t= 4.05;\nconst float Spower\t= 9.0;\n\n\nconst float AaCount = OversamplingSqrt*OversamplingSqrt;\n   \n    \nvec3 Render(vec2 pQ, float pT)\n{\n\tfloat T = fract(pT / LoopS);\n\n\t// Transform:\n\tfloat Scale = Scale0*exp(ExpF*T);\n\n\tfloat Sgn = sign(fract(0.5*pT/LoopS) - 0.5);\n\tfloat Cs = cos(Sgn*T);\n\tfloat Sn = sin(Sgn*T);\n\n\tvec2 Qt = (1.0 + Scale*pQ*mat2(Cs, -Sn, Sn, Cs)) / 2.0;\n\n\t// Dot grid:\n\tvec2 Gf = 2.0*fract(Qt) - 1.0;\n\tfloat D =  step(length(Gf), Radius + 0.6*pow(T, Spower));\n\n\t// Disk clip:\n\tD *= step(length(Qt-0.5), 0.5*Radius*exp(ExpF));\n\n\treturn vec3(D);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float Ratio = 0.5*min(iResolution.x, iResolution.y);\n\t\n\t// Render scene in linear space with motion blur and Antialising:\n\tvec3 ColorSum = vec3(0.0);\n\tfor(float F=0.0; F<AaCount; F++)\n\t{\n\t\t// Antialiasing:\n\t\tvec2 Off = vec2(1.0 + floor(F/OversamplingSqrt), mod(1.0+F, OversamplingSqrt)) / OversamplingSqrt;\n\t\tvec2 UV = (fragCoord.xy + Off - iResolution.xy/2.0) / Ratio;\t\n\t\t\n\t\t// Motion blur:\n\t\tfloat t = iTime + F*ShutterSpeed / AaCount;\n\t\t\n\t\t// Render:\n\t\tColorSum += Render(UV, t);\n\t}\n\t\n\tColorSum /= AaCount;\n\t\n\t// Apply gamma:\n\tColorSum = pow(ColorSum, vec3(1.0/2.2));\n\t\n\tfragColor = vec4(ColorSum, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltl3DX","date":"1425865708","viewed":405,"name":"DotDotDot","username":"AntoineC","description":"An exercise in seamless loop and smooth animation. Proved to be more difficult than expected!\nThe right solution was to use an exponential scaling that provides a nice acceleration while maintaining the same tangents at the beginning and end of the loop.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["2d","loop","minimalist"],"hasliked":0,"parentid":"","parentname":""}}