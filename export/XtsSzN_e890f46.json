{"ver":"0.1","info":{"id":"XtsSzN","date":"1435033264","viewed":2381,"name":"Distortion Ripples","username":"mba105","description":"More playing with distortion effects - based on Musgrave chapter from Texturing & Modeling book.","likes":33,"published":1,"flags":0,"usePreview":1,"tags":["ripples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{ \n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i); \n    vec4 p = permute( permute( permute( \n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                              + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n                     + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                 dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fBm(vec3 coords)\n{\n    const int octaves = 2;\n    \n    float smoothness = 2.0; // should be between 0.0 and 1.0?\n    float lacunarity = 2.0;\n    \n    float result = 0.0;\n    float totalAmplitude = 0.0;\n    \n    for (int o = 0; o != octaves; ++o)\n    {\n        float amplitude = pow(lacunarity, -smoothness * float(o));\n        \n        result += snoise(coords) * amplitude;\n        totalAmplitude += amplitude;\n        \n        coords *= lacunarity;\n    }\n    \n    return result / totalAmplitude;\n}\n\nfloat turbulence(vec3 coords)\n{\n    const float f_low = 1.0;\n    const int octaves = 8;\n    \n    float t = 0.0;\n    \n    for (int o = 0; o != octaves; ++o)\n    {\n        float f = f_low * pow(2.0, float(o));\n        \n        t += abs(snoise(coords)) / f;\n        \n        coords *= 2.0;\n    }\n    \n    return t; // - 0.3;\n}\n\nvoid mainImage(out vec4 result, in vec2 fragCoord)\n{\n    float time_scale = 0.5;\n    float time = iTime * time_scale;\n    \n\tvec2 uv = fragCoord.xy / min(iResolution.x, iResolution.y);\n    \n    \n    vec2 fbm_scale = vec2(1.0);\n    vec2 t_scale = vec2(5.0);\n    \n    vec2 x_offset = vec2(123.456, 0.0);\n    vec2 y_offset = vec2(349.234, 1704.2);\n    \n    \n    vec2 x_coords = (uv + x_offset) * fbm_scale;\n    float xo = fBm(vec3(x_coords, time));\n    \n    vec2 tx_coords = (uv + x_offset) * t_scale;\n    float xt = turbulence(vec3(tx_coords, time));\n    \n    vec2 y_coords = (uv + y_offset) * fbm_scale;\n    float yo = fBm(vec3(y_coords, time));\n    \n    vec2 ty_coords = (uv + y_offset) * t_scale;\n    float yt = turbulence(vec3(ty_coords, time));\n    \n    \n    vec2 pixel = 1.0 / iChannelResolution[0].xy;\n    float max_po = 10.0;\n    vec2 po = max_po * vec2(xo + xt, yo + yt) * pixel;\n    \n    vec2 tc = fragCoord.xy / iResolution.xy;\n    vec3 bg = texture(iChannel0, tc + po).rgb;\n    \n    \n\tresult = vec4(vec3(bg), 1.0);\n}\n","name":"","description":"","type":"image"}]}