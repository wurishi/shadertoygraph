{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI\t3.14159265359\n#define PI2\t( PI * 2.0 )\n\nvec2 rotate( in vec2 p, in float t )\n{\n\treturn p * cos( -t ) + vec2( p.y, -p.x ) * sin( -t );\n}\n    \nvec3 rotate( in vec3 p, in vec3 t )\n{\n    p.yz = rotate( p.yz, t.x );\n    p.zx = rotate( p.zx, t.y );\n\tp.xy = rotate( p.xy, t.z );\n    return p;\n}\n\nfloat udBox( in vec3 p, in vec3 b)\n{\n\treturn length( max( abs( p ) - b, 0.0 ) );\n}\n\nfloat boundingBox( in vec3 p, in vec3 r, out bool f )\n{\n\tconst float o = 0.05;\n    f = false;\n\tif ( abs( p.x ) > r.x) return udBox( p, r - o );\n\tif ( abs( p.y ) > r.y) return udBox( p, r - o );\n\tif ( abs( p.z ) > r.z) return udBox( p, r - o );\n\tf = true;\n    return length( p );\n}\n\nfloat triangleDE( in vec3 p, in vec3 a, in vec3 b, in vec3 c  )\n{\n    vec3 ab = b - a;\n    vec3 bc = c - b;\n    vec3 ca = a - c;\n    vec3 ap = p - a;\n    vec3 bp = p - b;\n    vec3 cp = p - c;\n    vec3 n = cross( ab, -ca );\n    vec3 nab = cross( n, ab );\n    vec3 nbc = cross( n, bc );\n    vec3 nca = cross( n, ca );\n    if ( dot( nab, ap ) < 0.0 )\n    {        \n        float t = clamp( dot( ab, ap ) / dot( ab, ab ), 0.0, 1.0 );        \n        return length( vec3( t * ab - ap ) );\n    }\n    if ( dot( nbc, bp ) < 0.0 )\n    {\n        float t = clamp( dot( bc, bp ) / dot( bc, bc ), 0.0, 1.0 );        \n        return length( vec3( t * bc - bp ) );\n    }\n    if ( dot( nca, cp ) < 0.0 )\n    {\n        float t = clamp( dot( ca, cp ) / dot( ca, ca ), 0.0, 1.0 );        \n        return length( vec3( t * ca - cp ) );\n    }\n    return abs( dot( normalize( n ), ap ) );\n}\n\nstruct Mesh\n{\n    vec3 a;\n    vec3 b;\n    vec3 c;\n};\n    \nMesh genMesh( in int idx )\n{\n\tfloat t = PI2 / 8.0;\n    float i = float( idx );\n    vec3 a;\n    float t0, t1;\n    if ( idx < 8 )\n    {\n        a = vec3( 0.0, 0.0, 0.3 );\n        t0 = t * i;\n        t1 = t * ( i + 1.0 );\n    } else {\n        a = vec3( 0.0, 0.0, -0.3 );\n        t0 = t * ( i + 1.0 );\n        t1 = t * i;\n        i++;\n    }   \n    float r0 = mod( i, 2.0 ) * 0.5 + 0.5;\n    float r1 = mod( i + 1.0, 2.0 ) * 0.5 + 0.5;\n\tvec3 b = vec3( r0 * cos( t0 ), r0 * sin( t0 ), 0.0 );\n\tvec3 c = vec3( r1 * cos( t1 ), r1 * sin( t1 ), 0.0 );   \n\treturn Mesh( a, c, b );\n}\n\nfloat map(vec3 p)\n{    \n\tbool f;\n    float d = boundingBox( p, vec3( 1.0, 1.0, 0.35 ), f );\n    if ( f )\n    { \n        for ( int i = 0; i < 16; i++ )\n    \t{\n\t\t\tMesh m = genMesh( i );\n    \t\td = min( triangleDE( p, m.a, m.b, m.c ), d );\n    \t}\n        d -= 0.001;\n    }\n    return d; \n}\n\nvec3 calcNormal( in vec3 p )\n{\n\tconst vec2 e = vec2( 0.0001, 0.0 );\n\tvec3 n = vec3(\n\t\tmap( p + e.xyy ) - map( p - e.xyy ),\n\t\tmap( p + e.yxy ) - map( p - e.yxy ),\n\t\tmap( p + e.yyx ) - map( p - e.yyx ) );\n\treturn normalize( n );    \n}\n\nfloat march( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;\n\tconst float precis = 0.001;\n    float h = precis * 2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i = 0; i < 64; i++ )\n    {\n        if( h < precis || t > maxd ) break;\n\t    h = map( ro + rd * t );\n        t += h;\n    }\n    if( t < maxd ) res = t;\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = ( 2.0 * fragCoord.xy - iResolution.xy ) / iResolution.y;\n\tvec3 col = vec3( 0.4 + 0.15 * p.y );\n   \tvec3 rd = normalize( vec3( p, -1.8 ) );\n\tvec3 ro = vec3( 0.0, 0.0, 3.0 );\n    vec3 light = normalize( vec3( 0.5, 0.8, 3.0 ) );\n    vec3 rot = vec3( 0.2, 0.5, 0.3 ) * iTime;\n    ro = rotate( ro, rot );\n\trd = rotate( rd, rot );\n\tlight = rotate( light, rot );\n    float t = march( ro, rd );\n    if( t > -0.1 )\n    {\n        vec3 pos = ro + t * rd;\n        vec3 n = calcNormal( pos );\n\t\tfloat diff = dot( n, light );\n        diff = clamp( ( diff + 0.5 ) * 0.7, 0.3, 1.0 );\n\t\tcol = vec3( 1.0, 0.6, 0.6 ) *  diff;\n\t}\n   \tfragColor = vec4( vec3( col ), 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ls2SRh","date":"1409143978","viewed":330,"name":"polygon raymarching","username":"gaz","description":"It don't run on Chrome on my PC. It run on FireFox on my PC. Why?\nother https://www.shadertoy.com/view/ld2Szh","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","polygon"],"hasliked":0,"parentid":"","parentname":""}}