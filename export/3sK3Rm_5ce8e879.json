{"ver":"0.1","info":{"id":"3sK3Rm","date":"1569921103","viewed":214,"name":"video transition 2","username":"ankd","description":"my video transition pattern.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["pixel","effect","transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DIVISION 10.\n#define REPEAT_NUM 3\n\n// basic function\n//float hash(in float v) { return fract(sin(v)*43237.5324); }\nfloat hash(in vec2 v) { return fract(sin(dot(v, vec2(12.9898, 78.233)))*43237.5324); }\n//float noise(in float v) { float f=fract(v), i=floor(v), u=f*f*(3.-2.*f); return mix(hash(i), hash(i+1.), u); }\n\n\n// video getter\nvec4 tex1(in vec2 st) { return texture(iChannel0, st); }\nvec4 tex2(in vec2 st) { return texture(iChannel1, st); }\n\n// transition\n// ratio - value to select video, 0~1\n// st - uv coordination of the pixel.\nvec4 transition(float ratio, in vec2 st, in vec2 res) {\n    float thr = 0.;\n    for(int i=0;i<REPEAT_NUM;i++) {\n    \tfloat fi = float(i)+1.;\n\t    float n = DIVISION * fi;\n\t\tthr += hash(1. + floor(st*n)/n + vec2(0., sin(fi*0.3)));\n    }\n    thr = clamp(fract(thr), 0.01, 0.99);\n    float w = 0.01;\n    return mix(tex1(st), tex2(st), \n                smoothstep(\n                \tmin(1., thr+w),\n                    max(0., thr-w),\n                    ratio)\n               );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float ratio = smoothstep(-1., 1., sin(iTime));\n    vec4 video = transition(ratio, uv, iResolution.xy);\n    vec3 col = uv.y<0.04 ? vec3(step(uv.x, ratio)) : video.rgb;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}