{"ver":"0.1","info":{"id":"WtlBzX","date":"1597315799","viewed":111,"name":"RayMarcher test 2_DB","username":"db009","description":"https://www.youtube.com/watch?v=Vmb7VGBVZJA - followed this tutorial to learn more about raymarching. going to convert to unity (HLSL) using a tutorial on his youtube as well.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"ShaderToy Tutorial - Ray Marching Operators 2\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2019\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// This is the starting point for a YouTube tutorial:\n// https://youtu.be/Vmb7VGBVZJA\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\n\nfloat GetDist(vec3 p) {\n\n    //slice object by plane\n    vec4 s1= vec4(-1,1,0,1);//sphere 1 pos\n    float plane = dot(p,normalize(vec3(-1,1,0)))-1.;\n    //sphere dist\n    float sphere = length(p-s1.xyz)-s1.w;//sphere1\n   \tsphere = abs(sphere)-.1;//get rid of inside of sphere(or any object) (-1 creates edges/thicker shell)\n    float d = max(plane, sphere);//slicing uses max\n    //return d;\n    \n    float plane2 = p.y+2.5;//plane\n    //float plane2 = dot(p,normalize(vec3(0,1,0)))-sin(p.x*2.5);//wavy plane\n    vec3 boxPos = p-vec3(1,1,3);//box position\n    \n    //boxPos = abs(boxPos);//mirror object(symmetry)(this creates on all axis doing boxPos.x does it on 1 axis)\n    //boxPos -=1.;//(move object to see copies)\n    \n    vec3 n = normalize(vec3(1,1,0));\n    boxPos -= 2.*n*min(0.,dot(p,n));    \n    \n    \n    float scale = mix(1.,3.,smoothstep(-1.,1.,boxPos.y));//alter box scale (leave at 1. for normal box) smooth step lets you choose where it happens\n    boxPos.xz *= scale;\n    \n    //boxPos.xz *= Rot(boxPos.y);//twist (rotation based on height of box xauses a twist)\n     boxPos.xz *= Rot(smoothstep(0.,1.,boxPos.y));//twist smooth step control\n    \n    float box = sdBox(boxPos, vec3(1))/scale;//normal box divide by scale if scale was altered\n    //box -= sin(p.x*7.5+iTime*3.)*.05;//distorted box(displacement mapping)\n   \t//box = abs(box)-.2;//creates rounded box (accident lol)\n    \n    d = min(d,plane2);\n    //return box;\n    return min(d,box);\n    \n    //float d = min(plane*.6, box);//multiply plane by .6 because of artifacts caused by distortion (increases raymarch steps use carefully)\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 5, 4);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n   // if(p.y<.01 && d<length(lightPos-p)) dif *= .5;\n    \n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -15);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n    \tfloat dif = GetLight(p);\n    \tcol = vec3(dif);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}