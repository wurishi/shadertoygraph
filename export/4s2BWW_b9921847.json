{"ver":"0.1","info":{"id":"4s2BWW","date":"1500436847","viewed":100,"name":"Demoivre's Theory","username":"Slyth","description":"Never knew this existed. Very neat idea, converting to polar coordinates for dynamic powers.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float maxIter = 256.0;\n    vec2 r = (-iResolution.xy + 2.0 * fragCoord.xy) / iResolution.y;\n    vec2 z = vec2(0.0);\n    float zoom = 0.1;\n    vec2 xy = r;\n    vec2 c = vec2(0.0) + xy / (zoom * 10.0);\n    float distD = 1e20;\n    float distP = distD;\n    vec2 pointD = vec2(sin(iTime), cos(iTime));\n    vec2 pointP = vec2(pointD.x, -pointD.y);\n    float l = 0.0;//((sin(iTime * 0.5) + 1.0) * 0.5) * maxIter - 1.5;\n    float power = ((sin(iTime) + 1.0) * 0.5) * 5.0 + 2.0;\n    for(int i = 0; i >= 0; i++)\n\t{\n        float r = pow(length(z), power);\n        float theta = atan(z.y, z.x) * power;\n    \tz = r * vec2(cos(theta), sin(theta)) + c;\n\t\tif(z.x * z.x + z.y * z.y > maxIter * maxIter || l > maxIter) break; \n        float dTrap = cos(abs(z.x - pointD.x) + abs(z.y - pointD.y));\n        float pTrap = sin(abs(z.x - pointP.x) + abs(z.y - pointP.y));\n        distD = min(distD, dTrap * dTrap);\n        distP = min(distP, pTrap * pTrap);\n        l++;\n\t}\n    \n    distD = sqrt(distD);\n    distP = sqrt(distP); \n    fragColor = vec4(distD, distP, (distD + distP) / 2.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}