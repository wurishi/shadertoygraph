{"ver":"0.1","info":{"id":"fsjfzc","date":"1666922226","viewed":203,"name":"Animated World Shader","username":"WhiteWalrus518","description":"I stole someone else's sobel shader and messed around with colour bands","likes":3,"published":1,"flags":2,"usePreview":0,"tags":["dsfs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x = 1.0 - uv.x;\n    vec3 col;\n    \n    /*** Sobel kernels ***/\n    // Note: GLSL's mat3 is COLUMN-major ->  mat3[col][row]\n    mat3 sobelX, sobelY;\n    sobelX = mat3(1.0,  0.0,  -1.0,\n                  2.0,  0.0,  -2.0,\n                  1.0,  0.0,  -1.0);\n                     \n    sobelY = mat3(-1.0,  0.0,  1.0,\n                  -2.0,  0.0,  2.0,\n                  -1.0,  0.0,  1.0);\n    sobelX = transpose(sobelY);\n    /*         \n    sobelX = mat3( 1.0,   2.0,  1.0,\n                  -2.0,  -1.0,  2.0,\n                  -1.0,  -2.0,  1.0);              \n    */\n    \n    vec3 sumX = vec3( 0.0);\t// x-axis change\n    vec3 sumY = vec3(0.0);\t// y-axis change\n    \n    for(int i = -1; i <= 1; i++)\n    {\n        for(int j = -1; j <= 1; j++)\n        {\n            // texture coordinates should be between 0.0 and 1.0\n            float x = uv.x + float(i)/iResolution.x;\t\n    \t\tfloat y = uv.y + float(j)/iResolution.y;\n            \n            // Convolve kernels with image\n            sumX += texture( iChannel0, vec2(x, y) ).xyz * float(sobelX[1+i][1+j]);\n            sumY += texture( iChannel0, vec2(x, y) ).xyz * float(sobelY[1+i][1+j]);\n        }\n    }\n    \n    float g = length(sumX + sumY);\n    //g = sqrt((sumX*sumX) + (sumY*sumY));\n    //g = length(sumX) + length(sumY);\n    \n    if(g > 0.0)\n        col = vec3(length(sumY + sumX));\n    else\n        col = col * 0.0;\n    \n    /*\n    col.x = (sumX * 1.0);\n    col.y = length(vec2(sumX, sumY));\n    col.z = (sumY * 1.0);\n    */\n    vec3 pureCam = texture( iChannel0, uv).xyz;\n    vec3 cam = texture( iChannel0, uv).xyz;\n    float bands = 5.0;\n    cam = normalize(cam) * floor(length(cam) * bands) / bands;\n    \n    \n\tfragColor.xyz = -col + cam;\n\n    //fragColor.xyz = vec3(length(pureCam));\n}","name":"Image","description":"","type":"image"}]}