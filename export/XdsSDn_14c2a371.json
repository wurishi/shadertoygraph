{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Created by inigo quilez - iq/2013\n// Heavily modified by Steven An - 2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// I've not seen anybody out there computing correct cell interior distances for Voronoi\n// patterns yet. That's why they cannot shade the cell interior correctly, and why you've\n// never seen cell boundaries rendered correctly. \n//\n// However, here's how you do mathematically correct distances (note the equidistant and non\n// degenerated grey isolines inside the cells) and hence edges (in yellow):\n//\n// https://iquilezles.org/articles/voronoilines\n\nvec3 bg = vec3(0.6, 0.8, 1.0);\nvec3 white = vec3(1.0, 1.0, 1.0);\nfloat zoom = 0.08;\nvec2 fallspeed = vec2(0.04,0.05);\n\nfloat pi = 3.141592653;\n\n#define ANIMATE\n\nfloat animbias = 0.5;\nfloat animscale = 0.4;\n\nvec2 hash( vec2 p )\n{\n\treturn texture( iChannel0, (p+0.5)/200.0, -100.0 ).xy;\n\t\n\t// this no longer works reliably due to a bug in some WebGL impls\n//    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n//\treturn fract(sin(p)*43758.5453);\n}\n\nvec3 voronoi( in vec2 x, out vec2 cpId )\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    //----------------------------------\n    // first pass: regular voronoi\n    //----------------------------------\n\tvec2 mg, mr;\n\n    float md = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2(float(i),float(j));\n\t\tvec2 o = hash( n + g );\n\t\t#ifdef ANIMATE\n        o = animbias + animscale*sin( iTime*0.5 + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n        float d = dot(r,r);\n\n        if( d<md )\n        {\n            md = d;\n            mr = r;\n            mg = g;\n        }\n    }\n\n    //----------------------------------\n    // second pass: distance to borders\n    //----------------------------------\n    md = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = mg + vec2(float(i),float(j));\n\t\tvec2 o = hash( n + g );\n\t\t#ifdef ANIMATE\n        o = animbias + animscale*sin( iTime*0.5 + 6.2831*o );\n        #endif\t\n        vec2 r = g + o - f;\n\n\t\t\n        if( dot(mr-r,mr-r)>0.000001 )\n\t\t{\n        // distance to line\t\t\n        float d = dot( 0.5*(mr+r), normalize(r-mr) );\n\n        md = min( md, d );\n\t\t}\n    }\n\t\n\tcpId = n+mg;\n\n    return vec3( md, mr );\n}\n\nfloat sin01(float theta)\n{\n\treturn sin(theta)*0.5 + 0.5;\n}\n\nfloat boxfilter( float x, float min, float max )\n{\n\tif( x < min || x > max )\n\t\treturn 0.0;\n\telse\n\t\treturn x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy-iResolution.xy*0.5)/iResolution.xx;\n\tp += iTime * fallspeed;\n\t\n\t// add variation to sky\n\tbg = mix( bg, vec3(0.8,0.7,0.9), pow(fragCoord.y/iResolution.y, 1.0));\n\t\n\tvec2 cpid;\n    vec3 c = voronoi( p/zoom, cpid );\n\tfloat centerDist = length( c.yz );\n\tfloat borderDist = c.x;\n\n\tfloat size = mix( 0.1, 0.20, sin01(cpid.x - cpid.y));\n\t\n\t// get angle to cp\t\n\tfloat angle = atan(c.z, c.y);\n\t// add some animated rotation\n\tfloat angvel = sin(cpid.x*123.0+cpid.y*451.0) * 0.5*pi;\n\tangle += iTime * angvel;\n\n\tfloat numpeds = floor(mix(5.0, 9.0, sin01(cpid.x + cpid.y)));\n\tfloat pedval = sin01(angle*numpeds);\n\tvec3 col = mix( bg, white, pow(pedval,4.0) );\n\t\n\t// some radial details\n\tfloat numrings = floor(mix(1.0, 4.0, sin01(cpid.x*100.0 + cpid.y*42.0)));\n\tfloat ringsharp = 2.0;\n\tfloat pedval2 = pedval;\n\tif( hash(cpid).x < 0.5 )\n\t\t// determine inward vs. outward warped circles\n\t\tpedval2 = 1.0-pedval;\n\tfloat warpdist = mix( centerDist*0.8, centerDist, pedval2 );\n\tfloat ringval = sin01(warpdist/(size*0.8) * 2.0*pi * numrings - pi*0.5);\n\tcol = mix( col, white, pow(ringval, ringsharp)  );\n\t\n\t// cutoff past some distance from flake center\n\tcol = mix( col, bg, smoothstep( size*0.8, size*1.0, centerDist) );\n\n\tfragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdsSDn","date":"1399163679","viewed":1573,"name":"Voronoi Snowflakes","username":"steverock","description":"I was originally planning on making a flowers scene, but this ended up happening instead :) I don't even use the Voronoi border distance - just the control point id/distance.","likes":25,"published":1,"flags":0,"usePreview":1,"tags":["voronoi","snow"],"hasliked":0,"parentid":"","parentname":""}}