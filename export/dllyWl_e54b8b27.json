{"ver":"0.1","info":{"id":"dllyWl","date":"1691348478","viewed":65,"name":"shader twirl twist","username":"nayk","description":"shader twirl twist","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["shadertwirltwist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\nvec3 palette(in float t) {\n    \n    vec3 a = vec3(.860, .560, .680);\n    vec3 b = vec3(.337, .206, .448);\n    vec3 c = vec3(.536, .124, .536);\n    vec3 d = vec3(-.393, -.393, .107);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec2 rotate(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA); \t\n}\n\nfloat square(vec2 uv, float d) {\n\treturn max(abs(uv.x), abs(uv.y)) - d;\t\n}\n\nfloat smootheststep(float edge0, float edge1, float x)\n{\n    x = clamp((x - edge0)/(edge1 - edge0), 0.0, 1.0) * 3.14159265;\n    return 0.5 - (cos(x) * 0.5);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n   \n  \tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tuv *= 1.5;\n    float blurAmount = -0.005 * 1080.0 / iResolution.y;\n    \n\tfloat period = 2.0;\n\tfloat time = iTime / period;\n\ttime =mod(time, 1.0);\n\ttime = smootheststep(0.0, 1.0, time);\n    \n    // Original uv, without tiling.\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.);\n\n    for(float i = 0.0; i < 3.0; i++) {\n    \n\n        float d = length(uv) + 9. * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i * .4 + iTime * .4);\n\n        d = sin(fract(d * 2. + iTime) / 8.);\n        d = abs(d);\n        float n = float(i);\n\tfloat size = 1.0 - n / 18.0;\nfloat rotateAmount = (cos(iTime)*n * 0.5 + 0.25) * PI * 2.0; \n\n\t\tfragColor = vec4(0.0, 0.0, 0.0, 1.0);\n       \n        d = pow(0.05 / d, 1.1);\n\t\t finalColor= mix(finalColor, vec3(1.0), smoothstep(0.0, blurAmount, square(rotate(uv, -rotateAmount * time), size)));\n         float blackOffset = mix(1.0 / 4.0, 1.0 / 2.0, n / 9.0) / 9.0;\n\t\tfinalColor= mix(\tfinalColor, vec3(0.0), smoothstep(0.0, blurAmount, square(rotate(uv, -(rotateAmount + PI / 2.0) * time), size - blackOffset)));\n        finalColor+= col * d * fract(sin(palette(max(abs(uv.x), abs(uv.y) * uv0.x))) * 1.9);\n    }\n\n    \n    fragColor = vec4(finalColor, 1);\n\n}","name":"Image","description":"","type":"image"}]}