{"ver":"0.1","info":{"id":"3lGcRz","date":"1610493209","viewed":91,"name":"terryspitz spotlights","username":"terryspitz","description":"gaze upon...\nBased on https://terryspitz.github.io/Pool/public/index.html","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["lights"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int frequencies = 15;\nconst float speed = 0.05;\nconst float scaling = 0.01;\n\nconst float TAU = 6.28318530718;\n#define SECOND_DERIV\n\nvec2 hash2( vec2  p ) \n{ p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) ); return fract(sin(p)*43758.5453); }\n\n#ifdef SECOND_DERIV\n#define DTYPE vec4\n#else\n#define DTYPE vec2\n#endif\n\nDTYPE d(vec2 uv, float t) \n{\n    DTYPE d;\n    for(int i=-frequencies; i<=frequencies; ++i)\n    {\n        for(int j=-frequencies; j<=frequencies; ++j)\n        {\n            vec2 amp_phase = hash2(vec2(i,j));// / float(i*i + j*j);\n            float amp = amp_phase.x, phase = amp_phase.y * TAU;\n            float theta = ( (uv.x + sign(float(i))*speed*t) *  float(i)\n                                   + (uv.y + sign(float(j))*speed*t) * float(j))\n                                 + phase;\n            float costheta = cos(theta);\n          #ifdef SECOND_DERIV\n            float sintheta = sin(theta);\n          #endif\n            d += DTYPE(amp * float(i) * costheta,\n                      amp * float(j) * costheta\n                  #ifdef SECOND_DERIV\n                      ,amp * float(i) * sintheta,\n                      amp * float(j) * sintheta\n                  #endif\n                      );\n        }\n    }\n    return d * scaling;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / max(iResolution.y,iResolution.x);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    DTYPE d = d(uv, iTime);\n    \n    // Output to screen\n#ifdef SECOND_DERIV\n    fragColor = d;\n#else\n    fragColor = vec4(d, 0.9, 1.0);\n#endif\n}\n","name":"Image","description":"","type":"image"}]}