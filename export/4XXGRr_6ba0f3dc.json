{"ver":"0.1","info":{"id":"4XXGRr","date":"1707039814","viewed":77,"name":"KIFS - Koch SnowFlake","username":"bsmukunth","description":"A simple Kaleidoscopic Iterated Function System (KIFS) using Koch Snowflake fractal. \nNote: mouse drag along x-axis --> increase the iterations for generating hat shapes on the lines.\n\nBased on a YouTube tutorial by @BigWIngs: https://youtu.be/il_Qg9AqQkE","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","kifs","snowflake","koch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// takes an angle and returns a 2d vector containing sine and cosine of the angle\nvec2 N(float angle) {\n    return vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // center and aspect ratio\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // mouse coords\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    //initializations\n    vec3 col = vec3(0);\n    float dist;\n    \n    // reflect along y axis (for bottom two sets)\n    uv.x = abs(uv.x);\n    \n    \n    // increase range (zoom out)\n    uv*=1.5;\n    \n    // mirror angle for snowflake\n    // 150 degrees for one side (due to reflection along y axis, produces two sides in contact)\n    float flake_angle = (5./6.)*3.1415;\n    vec2 n = N(flake_angle);\n\n    // shift up\n    uv.y += tan(flake_angle)*.5;\n    \n    // mirror bottom two sets\n   \tdist = dot(uv-vec2(.5, 0), n);\n    uv -= max(0.,dist)*n*2.;\n    \n    // keep track of uv-scaling for normalizing later\n    float scale = 1.;\n    \n    // correction for first iteration\n    uv.x += .5;\n    \n    // map mouse x to increase iterations\n    int iters = int(mouse.x*7.);\n    \n    // mirror angle for hat (peak)\n    n = N((2./3.)*3.1415);\n    \n    // loop to iterate on sides\n    for(int i=0; i<iters; i++) {\n        \n        // expand line segments\n        uv *= 3.;\n        scale *= 3.;\n        uv.x -= 1.5;\n        \n        // mirror along y axis\n        uv.x = abs(uv.x);\n        \n        // shift origin\n        uv.x -= .5;\n        \n        // reflect along y axis (hat)\n        dist = dot(uv, n);\n        uv -= min(0.,dist)*n*2.;\n    }\n    \n    // line segment\n    dist = length(uv - vec2(clamp(uv.x,-1., 1.), 0));\n    \n    // colour the snowflake\n    col += smoothstep(2./iResolution.y, .0, dist/scale);\n    \n    // reset uv\n    uv /= scale;\n    \n    // animate texture\n    col += texture(iChannel0, uv*2.-iTime*0.1).rgb;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}