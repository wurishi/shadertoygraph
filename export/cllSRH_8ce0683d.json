{"ver":"0.1","info":{"id":"cllSRH","date":"1674291733","viewed":100,"name":"Hex maze","username":"kastorp","description":"implicit hex maze","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["hex","maze"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Hex maze by kastorp\n\n//---------------------------------\n#define mmin(da,db) (da.x<db.x?da:db)\n#define R iResolution\n\nfloat opExtrussion( in float  z, in float sdf, in float h )\n{\n    vec2 w = vec2( sdf, abs(z) - h );\n  \treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n#define TAU 6.2832\n\n//David Hoskins Hash without sin\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\n//xy=center, z=orientation\nvec3 tri(vec2 uv){ \n    const mat2 sk = mat2(2./sqrt(3.),0,1./sqrt(3.),1),ski = inverse(sk); float d=1./6.;\n    float sd =step(fract(uv*sk).x ,fract(uv*sk).y)*2.-1.;\n    vec2  c = floor(uv*sk) +vec2(.5) + sd*d*vec2(-1,1) ;c*=ski;\n    return vec3(c,sd);\n}\nfloat maze(vec2 uv){\n\n    vec3 t = tri(uv);\n    float r = floor(hash12(t.xy)*6.); //random rotation \n\n    float tk=.05;\n    float d=1e5;\n    uv = t.xy+ (uv-t.xy)*rot(TAU/3.*(r));\n    \n    if(r>=3.){\n        for(int i=0;i<3;i++){\n            d=min(d,max((uv.x-t.x)*t.z,abs(t.y-uv.y)-tk));\n            uv = t.xy+ (uv-t.xy)*rot(TAU/3.);        \n        }\n    }else{\n        uv = t.xy+ (uv-t.xy)*rot(-TAU/4.);\n         d=min(d,abs(t.y-uv.y+.25/sqrt(3.)*t.z) -tk);  \n         d=min(d,length(uv-t.xy+vec2(0,.5/sqrt(3.))*t.z)-tk);\n    }\n    d=max(d,length(uv-t.xy)-.3);\n    return d;\n }\n\n\nvec3 map(in vec3 p)\n{\n    vec3 d = vec3(p.z ,-1,0);\n    \n    vec2 c =p.xy/9. + vec2(.5); \n    vec4 m =  texture(iChannel0,c);   \n    if(any(greaterThan(c,R.xy)) || any(lessThan(c,vec2(0)))) m= vec4(.2);\n    d=mmin(d,vec3(opExtrussion( p.z, maze(p.xy), 0.4 ),2.,0.));\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    const float ep = 0.002;\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    return normalize( e.xyy*map( pos + e.xyy*ep ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*ep ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*ep ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*ep ).x );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<100; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\n#define AA 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 tot = vec3(0.1);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n \n        vec3 ro = vec3(iTime,iTime,8.0);\n        vec3 rd = normalize(vec3(p-vec2(0.0,0.0),-2.0));\n\n        float t = 5.0;\n        float  h;\n        for( int i=0; i<80; i++ )\n        {\n            vec3 p = ro + t*rd;\n             h = map(p).x;\n            if( abs(h)<0.001 || t>15.0 ) break;\n            t += h;\n        }\n\n        vec3 col = vec3(0.0);\n\n        if( t<20.0 )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3  lig = normalize(vec3(-30,30,50));\n            float dif = clamp(dot(nor,lig),0.0,1.0);\n            float sha = calcSoftshadow( pos , lig, 0.001, 1.0, 32.0 );\n            vec3 alb= map(pos -nor*.02);\n            col = vec3(0.01) + dif*(.05 + .95*sha)*(alb.y<0.?vec3(0.1,.3,.5): vec3(alb.y,1.-alb.y,.5 + alb.z*.5)) *(.7 + alb.z*.3);\n        }\n\n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}