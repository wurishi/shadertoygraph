{"ver":"0.1","info":{"id":"4XjcWD","date":"1727297655","viewed":45,"name":"rnd overlap box interior cuboids","username":"jt","description":"Voxelized space is further organized into random overlapping BCC boxes.\n(Perhaps such a structure could be useful for bounding volumes.)\nAdded none-overlapping interior cuboids in FCC pattern.\nUsing hybrid voxel-dda/raymarch sdf method for speedup.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","grid","raymarch","sdf","cube","random","box","dda","overlap","hybrid","euclidean","cuboid","fcc","bcc"],"hasliked":0,"parentid":"X3SyDh","parentname":"random overlapping box structure"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4XjcWD rnd overlap box interior cuboids, 2024 by jt\n// based on https://www.shadertoy.com/view/X3SyDh random overlapping box structure\n// rendered using https://www.shadertoy.com/view/lXGGR3 raymarch voxels with color\n\n// Voxelized space is further organized into random overlapping BCC boxes.\n// (Perhaps such a structure could be useful for bounding volumes.)\n// Added none-overlapping interior cuboids in FCC pattern.\n// Using hybrid voxel-dda/raymarch sdf method for speedup.\n\n// tags: 3d, grid, raymarch, sdf, cube, random, box, dda, overlap, hybrid, euclidean, cuboid, fcc, bcc\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY // should not be necessary here - kept for compatibility with other voxel shaders\n\n// https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\nfloat hash13(vec3 p3)\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat hash14(vec4 p4) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec4 hash44(vec4 p4) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat box(vec3 p, vec3 a, vec3 b)\n{\n    return box(p-(b+a)/2.0,abs(b-a)/2.0);\n}\n\nfloat box(vec3 p, vec3 a, vec3 b, float r)\n{\n    return box(p, a+r, b-r)-r;\n}\n\nfloat frame(vec3 p, vec3 b, float e) // https://iquilezles.org/articles/distfunctions/\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat frame(vec3 p, vec3 a, vec3 b, float e)\n{\n    return frame(p-(b+a)/2.0,abs(b-a)/2.0,e);\n}\n\nfloat cylinder(vec3 p, vec2 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nstruct cuboid\n{\n    ivec3 a;\n    ivec3 b;\n};\n\n#define EXP 3\n\nbool in_structure(ivec3 g) // expects coarse voxel address (v >> EXP)\n{\n    //return true; // primitive cubic (pC)\n    //return ((g.x^g.y^g.z)&1) != 0; // inside solid (FCC)\n    bvec3 f = bvec3(g&1);\n    return all(f) || all(not(f)); // inside solid (BCC)\n}\n\nivec4 rnd(ivec4 low, ivec4 high, ivec4 seed)\n{\n    return low+ivec4(hash44(vec4(seed)*123.456)*vec4(high-low));\n}\n\ncuboid grid(ivec3 g) // expects coarse voxel address (v >> EXP)\n{\n    ivec3 v0 = (g+0) << EXP;\n    ivec3 v1 = (g+1) << EXP;\n\n    ivec3 offset0 = rnd(ivec4(1),ivec4((1<<(EXP-1))),ivec4(v0,v1)*2+0).xyz;\n    ivec3 offset1 = rnd(ivec4(1),ivec4((1<<(EXP-1))),ivec4(v0,v1)*2+1).xyz;\n\n    return cuboid(v0-offset0,v1+offset1);\n    //return cuboid(v0-1,v1+1);\n    //return cuboid(v0,v1);\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 150.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    vec3 color;\n    float dist;\n};\n\nresult shape(ivec3 v, vec3 l, cuboid c)\n{\n    ivec3 g = v >> EXP; // coarse grid address\n    vec3 color = hash44(vec4(c.a,c.b)).xyz; // unique color per box (with position and size)\n    //vec3 color = hash33(vec3((c.a+c.b)>>(EXP+1))); // color independent of box size (only dependent on coarse grid position of center i.e. average of min+max)\n    float d =\n        iMouse.z > 0.0\n        ?\n        frame(vec3(v)+l, vec3(c.a), vec3(c.b), 0.2)\n        :\n        abs(box(vec3(v)+l, vec3(c.a), vec3(c.b), 0.5))-0.1;\n    return result(color,d);\n}\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    //ivec3 s = ivec3(3,2,1);\n    ivec3 s = ivec3(16);\n    //if(all(greaterThanEqual(v,-s)) && all(lessThan(v,s)))\n    if(all(lessThan(abs(vec3(v)+l),vec3(s))))\n    {\n        ivec3 g = v >> EXP; // coarse grid address\n        ivec3 low = (g<<EXP);\n        ivec3 high = low+(1<<EXP);\n        bool flip = in_structure(g);\n        result combined = result(vec3(0), DIST_MAX);\n        ivec3 o = ivec3(0);\n        ivec3 q = (v >> (EXP-1))&1; // quadrant\n        for(o.z = q.z-1; o.z < q.z+1; o.z++)\n        {\n            for(o.y = q.y-1; o.y < q.y+1; o.y++)\n            {\n                for(o.x = q.x-1; o.x < q.x+1; o.x++)\n                {\n                    if(in_structure(g+o))\n                    {\n                        cuboid c = grid(g+o);\n                        result r = shape(v, l, c);\n                        if(r.dist < combined.dist)\n                            combined = r;\n                    }\n                }\n            }\n        }\n\n        bvec3 interior = bvec3(0);\n        ivec3 h = g&1;\n        //if(h == ivec3(0,1,1) || h == ivec3(1,0,0))\n        //if(ivec2(h.x) != h.yz) // XXX ?! XXX\n        //if(h.xx != h.yz) // XXX ?! XXX\n        if(h.x!=h.y&&h.x!=h.z)\n        {\n            interior.x = true;\n            low.x = grid(g+ivec3(-1,0,0)).b.x;\n            high.x = grid(g+ivec3(+1,0,0)).a.x;\n\n            low.y = max(grid(g+ivec3(0,-1,-1)).b.y,grid(g+ivec3(0,-1,+1)).b.y);\n            high.y = min(grid(g+ivec3(0,+1,-1)).a.y,grid(g+ivec3(0,+1,+1)).a.y);\n            low.z = max(grid(g+ivec3(0,-1,-1)).b.z,grid(g+ivec3(0,+1,-1)).b.z);\n            high.z = min(grid(g+ivec3(0,-1,+1)).a.z,grid(g+ivec3(0,+1,+1)).a.z);\n        }\n        //if(h == ivec3(1,0,1) || h == ivec3(0,1,0))\n        if(h.y!=h.x&&h.y!=h.z)\n        {\n            interior.y = true;\n            low.y = grid(g+ivec3(0,-1,0)).b.y;\n            high.y = grid(g+ivec3(0,+1,0)).a.y;\n\n            low.z = max(grid(g+ivec3(-1,0,-1)).b.z,grid(g+ivec3(+1,0,-1)).b.z);\n            high.z = min(grid(g+ivec3(-1,0,+1)).a.z,grid(g+ivec3(+1,0,+1)).a.z);\n            low.x = max(grid(g+ivec3(-1,0,-1)).b.x,grid(g+ivec3(-1,0,+1)).b.x);\n            high.x = min(grid(g+ivec3(+1,0,-1)).a.x,grid(g+ivec3(+1,0,+1)).a.x);\n        }\n        if(h.z!=h.x&&h.z!=h.y)\n        {\n            interior.z = true;\n            low.z = grid(g+ivec3(0,0,-1)).b.z;\n            high.z = grid(g+ivec3(0,0,+1)).a.z;\n\n            low.x = max(grid(g+ivec3(-1,-1,0)).b.x,grid(g+ivec3(-1,+1,0)).b.x);\n            high.x = min(grid(g+ivec3(+1,-1,0)).a.x,grid(g+ivec3(+1,+1,0)).a.x);\n            low.y = max(grid(g+ivec3(-1,-1,0)).b.y,grid(g+ivec3(+1,-1,0)).b.y);\n            high.y = min(grid(g+ivec3(-1,+1,0)).a.y,grid(g+ivec3(+1,+1,0)).a.y);\n        }\n\n        if((h.x!=h.y&&h.x!=h.z) || (h.y!=h.x&&h.y!=h.z) || (h.z!=h.x&&h.z!=h.y))\n        {\n            //vec3 color = vec3(0.5+0.5*cos(tau*iTime));\n            //vec3 color = mix(vec3(1,0,0),vec3(0,1,0),0.5+0.5*cos(tau*iTime));\n            vec3 color = vec3(interior)*(1.0+0.5+0.5*cos(tau*iTime));\n            //result r = result(vec3(1),frame(vec3(v)+l,vec3(low),vec3(high),0.1));\n            result r = result(color,box(vec3(v)+l,vec3(low),vec3(high),0.5));\n            //result r = result(vec3(1,1,0),sphere(vec3(v)+l-vec3(g<<EXP)-vec3(1<<(EXP-1)),5.0));\n\n            if(r.dist < combined.dist)\n                combined = r;\n        }\n\n        return combined;\n    }\n    return result(vec3(0), DIST_MAX); // signal to skip this voxel\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(vec3(0), DIST_MAX);\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n            {\n                result r = map(ivec3(floor(p))+o, fract(p)-vec3(o));\n                if(r.dist < d.dist)\n                    d = r;\n            }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1, bool pass) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(h.color, t);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    return result(h.color, pass ? t1 : t); // pass/stop on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1, true/*pass*/).dist < t1 ? 0.0 : 1.0;\n}\n#ifdef HIGH_QUALITY\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n#endif\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // plain\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5)); // checker\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01)-pi/2.0/*tweak for nice preview image*/;\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-50.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //vec3 sky_color = mix(vec3(0,0.5,1),vec3(0,0,1),abs(-rd.z));\n    vec3 sky_color = vec3(0);\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX, false/*stop*/);\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0); // requires HIGH_QUALITY\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/50.0, 2.0))); // fog\n    }\n    else\n    {\n        color = sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}