{"ver":"0.1","info":{"id":"mtlGWr","date":"1671639264","viewed":93,"name":"Recursive self-blur","username":"ianertson","description":"Blurring an image by feeding it into it self","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 get0(vec2 uv) {\n    return texture(iChannel0, uv).rgb;\n}\n\nvec3 get(vec2 uv, float levels) {\n    vec3 a = get0(uv);\n    \n    vec3 col = vec3(0.0);\n    \n    for (int i = 0; i < int(levels); i++) {\n      a = fract(a);\n      col = get0(uv + (a.xz + a.y) * 0.01);\n      a += col;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = get(uv, max(2.0, 2.0 + 30.0*(0.5  + (0.5* cos(iTime)))));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}