{"ver":"0.1","info":{"id":"XltBD2","date":"1541102660","viewed":65,"name":"Иней","username":"NormanXpp","description":"иней","likes":1,"published":1,"flags":0,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\nconst float EPS = 0.00001;\nconst vec2 UP = vec2(0.0, 1.0);\n\nconst float seed = 42.0;\n\nconst vec2 scale = vec2(125.0, 10.0);\nconst float p1 = 1.0;\nconst float theta1 = 0.0;\nconst float angle = 0.0;\n\nconst int octaves = 3;\nconst float lacunarity = 1.4;\nconst float gain = 0.75;\nconst float p2 = 1.0;\nconst float theta2 = 0.2;\n\nconst float rotation = 0.7;\n\nconst vec2 from = vec2(0.4, 0.5);\nconst vec2 to = vec2(0.6, 0.5);\nconst float radius = 0.15;\n\nvec2 rotate(vec2 v, float a, vec2 origin) {\n    v -= origin;\n    return vec2(cos(a) * v.x - sin(a) * v.y,\n                sin(a) * v.x + cos(a) * v.y) + origin;\n}\n\nvec2 rotate(vec2 v, float a) {\n    return rotate(v, a, vec2(0.5));\n}\n\nfloat orientedAngle(vec2 v1, vec2 v2) {\n\treturn atan(v1.y, v1.x) - atan(v2.y, v2.x);\n}\n\nvec3 random2(vec3 st){\n    st = vec3(dot(st, vec3(127.1,311.7,-12.6)),\n              dot(st, vec3(269.5,183.3,17.9)),\n              dot(st, vec3(56.8,103.3,80.5)));\n    \n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    vec3 u = (1.0 - cos(f * PI)) * 0.5;\n\n    return mix(mix(mix(dot(random2(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0)),\n                       dot(random2(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0)), u.x),\n                   mix(dot(random2(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0)),\n                       dot(random2(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0)), u.x), u.y),\n               mix(mix(dot(random2(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0)),\n                       dot(random2(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0)), u.x),\n                   mix(dot(random2(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0)),\n                       dot(random2(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z);\n}\n\nvec2 distToSegment(vec2 from, vec2 to, vec2 point, float aspect) {\n    from.x *= aspect;\n    to.x *= aspect;\n    \n    vec2 l = to - from;\n    vec2 d = point - from;\n    float v = dot(l, d);\n    float w = dot(l, l);\n    float t = clamp(v / w, 0.0, 1.0);\n    vec2 nearestPoint = from + (to - from) * t;\n    \n    vec2 dir = point - nearestPoint;\n    float orAngle = orientedAngle(dir, UP);\n    \n    return vec2(distance(nearestPoint, point), orAngle);\n}\n\nfloat getNoise(vec2 pos, float angle) {\n    pos = rotate(pos, angle) * scale;\n    float a = noise(vec3(pos, seed)) * 0.5 + 0.5;\n    a = pow(a, p1);\n    a *= step(theta1, a);\n    a = abs(0.5 - a) * 2.0;\n    return a;\n}\n\nfloat getFractalNoise(vec2 pos, float angle) {\n    float y = 0.0;\n    float amplitude = 0.5;\n\tfloat frequency = 1.0;\n\n\tfor (int i = 0; i < octaves; i++) {\n\t\ty += amplitude * getNoise(frequency * pos, angle \n                                  + PI * rotation * float(i));\n\t\tfrequency *= lacunarity;\n\t\tamplitude *= gain;\n\t}\n    y = pow(y, p2);\n    y *= step(theta2, y);\n    return y;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    \n    float aspect = iResolution.x/iResolution.y;\n    vec2 ust = st;\n    ust.x *= aspect;\n\n    vec2 data = distToSegment(from, to, ust, aspect);\n    float noise = getFractalNoise(ust, angle);\n\n    fragColor = vec4(noise);\n}","name":"Image","description":"","type":"image"}]}