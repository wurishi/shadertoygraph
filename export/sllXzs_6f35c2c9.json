{"ver":"0.1","info":{"id":"sllXzs","date":"1626560765","viewed":77,"name":"Capped Cylinder - Closest 3D Y28","username":"Yusef28","description":"Following Iq's trend. This is forked from a fork of one of his submissions.\nI've commented my thought process.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","cylinder","capped","closest"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2021 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Closest point on a sphere. For closest points on other primitives, check\n//\n//    https://www.shadertoy.com/playlist/wXsSzB\n\n\n\nvec3 closestPointToCyl( vec3 p, vec3 cen, float h)\n{\n    //For sphere we get the normalized vector\n    //from center to point, scale it by radius and add that vector\n    //to center\n    //return cen + rad*normalize(p-cen);\n   \n    //So for cyl we can do the same thing but with one less dimention\n    //Since a cylinder is an extruded circle, whereever we end up \n    //on the missing axis with our p point, we can use that same value\n    //for the missing axis for our center\n    //otherwise it's the same\n    //here cen.z is radius\n    \n    //If it's capped though then we just need to make sure to take the min\n    //of the capped axis height and that component of the point vector.\n\n    //ALSO we need to make sure we have access to all points within the\n    //radiu not just on the surface\n    \n    //the min here makes sure we get all points withint the radius of xy\n    //the sign ajusts for using abs, and I used abs so we could get \"Min\"\n    //in the first place,otherwise min woudl be all the negative xy points\n    //and that would suck\n    vec2 xy = min(abs(cen.xy + cen.z*normalize(p.xy-cen.xy)),\n            abs(p.xy))*sign(p.xy);\n            \n    //this is the z portion (the capped axis)\n    //abs p.z is length of that component\n    //I clip when it's greater than the defined height \"h\"\n    //then I use sign so we have both sides.\n    float z = min(abs(p.z),h)*sign(p.z);\n    return vec3(xy,z);\n    //then we have\n    \n    }\n    \n\n//------------------------------------------------------------\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, vec3 cen, float rad)\n{\n    \n\n    return length(p-cen)-rad;\n    \n}\n// https://iquilezles.org/articles/distfunctions\nfloat sdCylinder( vec3 p, vec3 cen, float h)\n{\n    //I've reduced the Cylinder to this\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(cen.z,h);\n   // return length(max(d,0.));\n    \n    // and it can be expaned to\n    float dx = length(p.xy) - cen.z;\n    float dy = abs(p.z)  - h;\n    return min(max(dx,dy),0.0) + length(max(vec2(dx,dy),0.));\n    \n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\n//------------------------------------------------------------\n\nvec3 gPoint;\n\nvec2 map( in vec3 pos, bool showCylinder )\n{\n    const float rad = 0.9;\n\n    // compute closest point to gPoint on the surace of the sphere\n    vec3 closestPoint = closestPointToCyl(gPoint, vec3(0.0,0.,0.4),0.5);\n    \n    // point\n    vec2 res = vec2( sdSphere( pos, gPoint, 0.06 ), 1.0 );\n    \n    // closest point\n    {\n    float d = sdSphere( pos, closestPoint, 0.06 );\n    if( d<res.x ) res = vec2( d, 4.0 );\n    }\n    \n    // box (semi-transparent)    \n    //if( ((samp.x+samp.y)&1)==0 )\n    \n    if( showCylinder )\n    {\n    float d = sdCylinder( pos, vec3(0.,0.,0.4),0.5);\n    if( d<res.x ) res =  vec2( d, 5.0 );\n    }\n\n    // segment\n    {\n    float d = sdCapsule( pos, gPoint, closestPoint, 0.015 );\n    if( d<res.x ) res =  vec2( d, 4.0 );\n    }\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos, in bool showSphere )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps, showSphere ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps, showSphere ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps, showSphere ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps, showSphere ).x );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftShadow(vec3 ro, vec3 rd, bool showSphere )\n{\n    float res = 1.0;\n    const float tmax = 2.0;\n    float t = 0.001;\n    for( int i=0; i<64; i++ )\n    {\n     \tfloat h = map(ro + t*rd, showSphere).x;\n        res = min( res, 64.0*h/t );\n    \tt += clamp(h, 0.01,0.5);\n        if( res<-1.0 || t>tmax ) break;\n        \n    }\n    res = max(res,-1.0);\n    return 0.25*(1.0+res)*(1.0+res)*(2.0-res); // smoothstep, in [-1,1]\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        // pixel sample\n        ivec2 samp = ivec2(fragCoord)*AA + ivec2(m,n);\n        // time sample\n        float td = 0.5+0.5*sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1);\n        float time = iTime - (1.0/60.0)*(td+float(m*AA+n))/float(AA*AA-1);\n        #else    \n        // pixel coordinates\n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        // pixel sample\n        ivec2 samp = ivec2(fragCoord);\n        // time sample\n        float time = iTime;\n        #endif\n\n        // make sphere transparent\n        bool showCylinder = (texelFetch(iChannel0,samp&7,0).x>0.25);\n\n        // animate camera\n        float an = 0.25*time + 6.283185*iMouse.x/iResolution.x;\n        vec3 ro = vec3( 2.4*cos(an), 0.7, 2.4*sin(an) );\n        vec3 ta = vec3( 0.0, 0.0, 0.0 );\n\n        // camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.2,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n\n        // animate point\n        gPoint = vec3(sin(iTime),sin(iTime*8.)*.2,sin(iTime+2.));\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raycast\n        const float tmax = 5.0;\n        float t = 0.0;\n        float m = -1.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            vec2 hm = map(pos,showCylinder);\n            m = hm.y;\n            if( hm.x<0.0001 || t>tmax ) break;\n            t += hm.x;\n        }\n    \n        // shade background\n        vec3 col = vec3(0.05)*(1.0-0.2*length(p));\n        \n        // shade objects\n        if( t<tmax )\n        {\n            // geometry\n            vec3  pos = ro + t*rd;\n            vec3  nor = calcNormal(pos,showCylinder);\n\n            // color\n            vec3  mate = 0.55 + 0.45*cos( m + vec3(1.9,1.5,.5)*2. );\n            \n            // lighting\t\n            col = vec3(0.0);\n            {\n              // key light\n              vec3  lig = normalize(vec3(0.3,0.7,0.2));\n              float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n              if( dif>0.001 ) dif *= calcSoftShadow(pos+nor*0.001,lig,showCylinder);\n              col += mate*vec3(1.0,0.9,0.8)*dif;\n            }\n            {\n              // dome light\n              float dif = 0.5 + 0.5*nor.y;\n              col += mate*vec3(0.2,0.3,0.4)*dif;\n            }\n        }\n\n        // gamma        \n        col = pow( col, vec3(0.4545) );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}