{"ver":"0.1","info":{"id":"sscGWB","date":"1630575636","viewed":89,"name":"Colorful Recursive Squares","username":"pdkl95","description":"Just some layered grids that fade to simulate depth. Also features pseudo-random colors that derive from a hash of the local cell coordinate.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grid","recursvelayers","hashcolor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185307179586\n\n#define MAXSTEPS 8.0\n#define CELLSIZE 128.0\n#define EDGESIZE 0.05\n#define SHRINK   0.93\n#define ROTSIZE  (TAU/256.0)\n#define ROTSPEED 0.85\n#define MOUSEAMP 4.0\n#define DRIFTSPEED vec2(1.2, 1.8)\n\n#define hash21(p) fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\nvec3 hsv2rgb(in vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec2 rotate(in vec2 point, in float rads)\n{\n    float cs = cos(rads);\n    float sn = sin(rads);\n    return point * mat2(cs, -sn, sn, cs);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 px = fragCoord.xy - (iResolution.xy / 2.0);\n    vec2 position = px / CELLSIZE;\n    vec3 color = vec3(1.0);\n\n    vec2 drift = iTime * DRIFTSPEED;\n    position += drift;\n\n    vec2 mouse = ((iMouse.xy/iResolution.xy) * 2.0) - 1.0;\n    vec2 smouse = vec2(0.0);\n    if (mouse.x > -1.0) {\n        smouse = mouse * (1.0/SHRINK) * MOUSEAMP;\n    }\n\n    vec2 rpos = position;\n    for (float i = 0.0; i < 1.0; i += (1.0/MAXSTEPS)) {\n        vec2 cellnum = floor(rpos);\n        vec2 cellpos = fract(rpos);\n        //cellpos = abs((cellpos * 2.0) - 1.0);\n\n        float cellhash = hash21(cellnum);\n\n        if ((min(cellpos.x, cellpos.y) < EDGESIZE) ||\n            (max(cellpos.x, cellpos.y) > (1.0 - EDGESIZE))) {\n            color = hsv2rgb(vec3(cellhash, (1.0-i) * 0.78, 0.95));\n            break;\n        }\n\n        rpos -= drift;\n        rpos -= smouse;\n        rpos /= SHRINK;\n        rpos = rotate(rpos, ROTSIZE * sin( iTime * ROTSPEED ));  \n        rpos += smouse;\n        rpos += drift;\n    }\n    \n    fragColor = vec4(color, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}