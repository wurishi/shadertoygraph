{"ver":"0.1","info":{"id":"clsXWM","date":"1705826160","viewed":122,"name":"Crystal's Hypertile 3","username":"Crystalize","description":"A 3 parameter hypertile. :D","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["conformal","model","disc","tile","tessellation","hyperbolic","poincare","3parameter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//many thanks to my friend, Zueuk, who supplied the distance formulae used here\n\nconst float Psym=3.;\nconst float Qsym=4.;\nconst float Rsym=3.;\n\nconst int iters=10;\n\nconst vec2 Re = vec2(1,0);\nconst vec2 Im = vec2(0,1);\nconst float TWOPI = 6.283185307179586476;\nconst float PI = 3.141592653589793238;\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\nvec2 conj(vec2 z) {\n    return vec2(z.x, -z.y);\n}\n\nvec2 recip(vec2 z) {\n    return conj(z)/dot(z,z);\n}\n\nvec2 hypershift(vec2 z, vec2 s) {\n    return cdiv(z + s, cmul(z,conj(s))+Re);\n}\n\nvec2 cpow(vec2 z, vec2 p) {\n    float a = atan(z.y, z.x);\n    float lnr = 0.5 * log(dot(z,z));\n    float m = exp(p.x * lnr - p.y * a);\n    float angle = p.x * a + p.y * lnr;\n    return vec2(cos(angle), sin(angle)) * m;\n}\n\nvec2 cabs(vec2 z, vec2 c) {\n    return cpow(cpow(z,c), cdiv(Re,c));\n}\n\n\nvec2 hypertile3(vec2 z, float p, float q, float r) {\n    float pp = PI/p;\n    float pq = PI/q;\n    float spq = sin(pq);\n    float pr = PI/r;\n    float spr = sin(pr);\n    float a1 = acosh((cos(pp) + cos(pq) * cos(pr)) / (spq * spr));\n    float a2 = asinh(spq / sin(pp) * sinh(a1));\n    float sha2 = sinh(a2);\n    float a3 = asinh(spr * sha2);\n    float rcha3 = 1./cosh(a3);\n    float a4 = asinh(spr * sha2 / spq);\n    \n    float h = tanh(a3 * .5);\n    float b1 = tanh(acosh(cosh(a4) * rcha3) * .5);\n    float b2 = tanh(acosh(cosh(a2) * rcha3) * .5);\n    \n    for(int i = 0; i < iters; i++) {\n        z = hypershift(z,-b1*Re);\n        z = -cabs(-z, Re*q);\n        z = hypershift(z,b1*Re);\n        z = hypershift(z,b2*Re);\n        z = cabs(z, Re*r);\n        z = hypershift(z,-b2*Re);\n    }\n    z = z.x>0.?hypershift(z,-b1*Re)/b1:hypershift(z,b2*Re)/b2;\n    return z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n    \n    uv = dot(uv,uv)<1.?uv:recip(uv);\n    uv = hypertile3(uv, Psym, Qsym, Rsym);\n    uv = dot(uv,uv)>1.?recip(uv)*Qsym*Rsym:uv;\n    \n    vec3 col = 0.5+0.5*cos(mod(1.-length(uv),1.-dot(uv,uv))*Psym+vec3(0,1,2));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}