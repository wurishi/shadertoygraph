{"ver":"0.1","info":{"id":"7tBXDz","date":"1627420972","viewed":208,"name":"Lunch Doudeul","username":"Flopine","description":"A smol doodle I made during my launch break. It felt great to experiment with that!","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["3d","animation","isometric","symmetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n#define PI acos(-1.)\n#define TAU 6.283185\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define mo(p,d) p=abs(p)-d;if(p.y>p.x)p=p.yx\n#define crep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n\n#define dt(sp) fract(iTime*sp)\n#define swi(sp) floor(dt(sp)*3.)\n\nstruct obj\n{\n    float d;\n    vec3 col;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));  \n    p.xz *= rot(PI/4.);\n    crep(p.xz, 16., 2.);\n    \n    float boxes = max(-box(p+vec3(0.5,-0.5,0.5),vec3(4.3)),box(p,vec3(4.))),\n    size = 0.8, pipes;\n    p.y += 0.4;\n    for (int i=0; i<4; i++)\n    {\n        mo(p.xz,vec2(size));\n        p.xz -= size*0.7;\n        mo(p.zy,vec2(size*.7));\n        p.y -= 0.3;\n        boxes = min(boxes, box(p,vec3(size)));\n        pipes = length(p.xz-vec2(0.1+sin(dt(0.2)*TAU)*0.03,0.))-0.04;\n        size -= 0.2;       \n    }\n    obj B = obj(boxes, vec3(1.));\n    obj P = obj(pipes, vec3(0.8,0.1,0.1));\n    \n    return minobj(B, P);\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    float fov = (swi(0.1)<.5)?2.5:(swi(0.1)<1.5)?4.5:18.;\n    vec3 ro=vec3(uv*fov,-30.), rd=vec3(0.,0.,1.), p=ro, col=vec3(0.), l=normalize(vec3(-1.,2.,-1.));\n    obj O; bool hit=false;\n    \n    for(float i=0.; i<64.; i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {hit=true; break;}\n       p += O.d*rd;\n    }\n    \n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = dot(n,l)*.5+.3;\n        col = O.col*light;\n    }\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}