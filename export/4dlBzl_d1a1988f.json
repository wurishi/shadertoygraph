{"ver":"0.1","info":{"id":"4dlBzl","date":"1502475893","viewed":98,"name":"triangle fractal","username":"adambene","description":"triangle fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime\n#define PI 3.141592654\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nbool sameSide(vec3 p1,vec3 p2, vec3 a,vec3 b) {\n    vec3 cp1 = cross(b-a, p1-a);\n    vec3 cp2 = cross(b-a, p2-a);\n    return (dot(cp1, cp2) >= 0.);\n}\n\nbool pointInTriangle(vec3 p, vec3 a,vec3 b,vec3 c) {\n    return (\n        sameSide(p,a, b,c) &&\n        sameSide(p,b, a,c) &&\n        sameSide(p,c, a,b)\n    );\n}\n\nbool isInTriangle(vec2 a, vec2 b, vec2 c, vec2 p) {\n\treturn false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy - vec2(.5, .5);\n    mat2 r = rotate2d(PI/20. + t / PI);\n    bool e = false;\n    int iter = 30;\n\n    vec3 bias = vec3(0., .16666, .0);\n\n    vec3 a = vec3(  0, .5, 0) + bias;\n    vec3 b = vec3(-.5,-.5, 0) + bias;\n    vec3 c = vec3( .5,-.5, 0) + bias;\n    \n\tfloat d = .8 + 1000. * pow((.5 + .5*sin(t / 2. - PI / 2.)), 2.);\n    \n    a *= d;\n    b *= d;\n    c *= d;\n    \n    for (int i = 0; i < iter; i++) {\n        if (pointInTriangle(vec3(uv.xy, 0), a, b, c)) {\n        \te = i % 2 == 0;\n        }\n        vec3 aa = vec3(a.xy * r, 0.);\n        vec3 bb = vec3(b.xy * r, 0.);\n        vec3 cc = vec3(c.xy * r, 0.);\n\n        a = (aa + bb) / 2.;\n        b = (bb + cc) / 2.;\n        c = (cc + aa) / 2.;\n\n    }\n\n    fragColor = vec4(e ? 1. : 0., uv.xy + vec2(.5, .5), 1.0);\n}","name":"Image","description":"","type":"image"}]}