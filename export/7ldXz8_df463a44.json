{"ver":"0.1","info":{"id":"7ldXz8","date":"1638736059","viewed":75,"name":"undulate ","username":"do","description":"animation shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//undulate\n//2021\n//do\n\nconst float PI   =  radians(180.0); \nconst int seed = 3434;\n\nfloat hash(float p) {\n    uvec2 n = uint(int(p)) * uvec2(uint(int(seed)),2531151992.0);\n    uint h = (n.x ^ n.y) * uint(int(seed));\n    return float(h) * (1./float(0xffffffffU));\n}\n\nfloat hash(vec2 p) {\n    uvec2 n = uvec2(ivec2(p)) * uvec2(uint(int(seed)),2531151992.0);\n    uint h = (n.x ^ n.y) * uint(int(seed));\n    return float(h) * (1./float(0xffffffffU));\n}\n\nfloat n3(vec3 x) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 157.0 + 113.0 * p.z;\n\n    return mix(mix(mix(hash(  n +   0.0) , \n                       hash(   n +   1.0)  ,f.x),\n                   mix(hash(  n + 157.0) ,  \n                       hash(   n + 158.0)   ,f.x),f.y),\n               mix(mix(hash(  n + 113.0) ,\n                       hash(   n + 114.0)   ,f.x),\n                   mix(hash(  n + 270.0) ,\n                       hash(   n + 271.0)   ,f.x),f.y),f.z);\n}\n\nfloat f3(vec3 x,float hurst) {\n    float s = 0.;\n    float h = exp2(-hurst);\n    float f = 1.;\n    float a = .5;\n\n    for(int i = 0; i < 5; i++) {\n\n        s += a * n3(f * x);  \n        f *= 2.;\n        a *= h;\n    }\n    return s;\n}\n\nvec3 fmCol(float t,vec3 a,vec3 b,vec3 c,vec3 d) {\n    return a + b * cos( (PI*2.0) * (c * t + d));\n}\n\nfloat easeInOut4(float t) {\n    if((t *= 2.0) < 1.0) {\n        return 0.5 * t * t;\n    } else {\n        return -0.5 * ((t - 1.0) * (t - 3.0) - 1.0);\n    }\n}\n\nfloat easeOut3(float t) {\n    return (t = t - 1.0) * t * t + 1.0;\n}\n\nmat2 rot2(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c,-s,s,c);\n}\n\nvec2 opu(vec2 d1,vec2 d2) {\n    return (d1.x < d2.x) ? d1 : d2;\n} \n\nfloat sphere(vec3 p,float r) { \n    return length(p) - r;\n}\n\nfloat plane(vec3 p,vec4 n) {\n   return dot(p,n.xyz) + n.w;\n}\n\nfloat box(vec3 p,vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nvec2 scene(vec3 p) {\n\n    vec2 res = vec2(1.,0.);\n\n    float d = 0.;     \n    float s = .9;\n\n    float t = iTime;  \n    \n    vec3 q = p;\n    vec3 l = p;\n\n    p.xz *= rot2(easeOut3(t*s*.06)*0.00015);\n    q.yx *= rot2(.5*cos(easeInOut4(t*s)*0.005));\n\n    d = mix(sphere(p,0.25),box(q,vec3(1.)),\n    sin(s*t)*0.5+0.5); \n\n    d += n3(p+n3(p)*0.25+t*s)*0.25; \n\n    res = opu(res,vec2(d,2.));\n    float pl = plane(l+vec3(0.,1.5,0.),vec4(0.,1.,1.,1.));\n\n    res = opu(res,vec2(pl,1.));\n  \n  return res;\n\n}\n\nvec2 rayScene(vec3 ro,vec3 rd) {\n    \n    float d = -1.0;\n    float s = 1.;\n    float e = 16.;  \n\n    for(int i = 0; i < 155; i++) {\n\n        vec3 p = ro + s * rd;\n        vec2 dist = scene(p);\n   \n        if(abs(dist.x) < 0.0001 || e <  dist.x ) { break; }\n        s += dist.x;\n        d = dist.y;\n\n        }\n \n        if(e < s) { d = -1.0; }\n        return vec2(s,d);\n\n}\n\nfloat shadow(vec3 ro,vec3 rd ) {\n\n    float res = 1.0;\n    float t = 0.005;\n    float ph = 1e10;\n    \n    for(int i = 0; i < 100; i++ ) {\n        \n        float h = scene(ro + rd * t  ).x;\n\n        float y = h * h / (2. * ph);\n        float d = sqrt(h*h-y*y);         \n        res = min(res,235. * d/max(0.,t-y));\n        ph = h;\n        t += h;\n    \n        if(res < 0.01 ||t > 5.) { break; }\n\n        }\n\n        return clamp(res,0.0,1.0);\n\n}\n\nvec3 calcNormal(vec3 p) {\n\n    vec2 e = vec2(1.,-1.) * 0.0001;\n\n    return normalize(vec3(\n    vec3(e.x,e.y,e.y) * scene(p + vec3(e.x,e.y,e.y)).x +\n    vec3(e.y,e.x,e.y) * scene(p + vec3(e.y,e.x,e.y)).x +\n    vec3(e.y,e.y,e.x) * scene(p + vec3(e.y,e.y,e.x)).x + \n    vec3(e.x,e.x,e.x) * scene(p + vec3(e.x,e.x,e.x)).x\n\n    ));\n    \n}\n\nvec3 rayCamDir(vec2 uv,vec3 camPosition,vec3 camTarget,float fPersp) {\n\n     vec3 camForward = normalize(camTarget - camPosition);\n     vec3 camRight = normalize(cross(vec3(0.0,1.0,0.0),camForward));\n     vec3 camUp = normalize(cross(camForward,camRight));\n\n     vec3 vDir = normalize(uv.x * camRight + uv.y * \n     camUp + camForward * fPersp);  \n\n     return vDir;\n}\n\nvec3 render(vec3 ro,vec3 rd) {\n \nvec2 d = rayScene(ro, rd);\n\nvec3 col = vec3(1.) - max(rd.y,0.);\n\nif(d.y >= 0.) { \n\nvec3 p = ro + rd * d.x;\nvec3 n = calcNormal(p);\nvec3 l = normalize(vec3(0.,10.,10.));\n\nvec3 h = normalize(l - rd);\nvec3 r = reflect(rd,n);\n\nfloat amb = sqrt(clamp(0.5 + 0.5 * n.y,0.0,1.0));\nfloat dif = clamp(dot(n,l),0.0,1.0);\n\nfloat spe = pow(clamp(dot(n,h),0.0,1.0),16.)\n* dif * (.04 + 0.9 * pow(clamp(1. + dot(h,rd),0.,1.),5.));\n\nfloat fre = pow(clamp(1. + dot(n,rd),0.0,1.0),2.0);\nfloat ref = smoothstep(-.2,.2,r.y);\n\nvec3 linear = vec3(0.);\n\ndif *= shadow(p,l);\nref *= shadow(p,r);\n\nlinear += dif * vec3(1.);\nlinear += amb * vec3(.05,0.01,0.01);\nlinear += ref * vec3(0.004,0.005,0.11);\nlinear += fre * vec3(0.04,0.12,0.005);\n\nif(d.y == 2.) {\n\n    float nl = f3(p+f3(p,sin(p.y)),hash(122.)); \n\n    col += fmCol(p.y + nl,vec3(hash(112.),hash(33.),hash(21.)),\n                          vec3(hash(12.),hash(105.),hash(156.)), \n                          vec3(hash(32.),hash(123.),hash(25.)),                                  vec3(hash(10.),hash(15.),hash(27.)));  \n}\n\ncol = col * linear;\ncol += 5. * spe * vec3(0.0001);\n\n} \n\nreturn col;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord) {\n \nvec3 color = vec3(0.);\n\nvec3 cam_tar = vec3(0.);\nvec3 cam_pos = vec3(0.,1.,4.);\n\nvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;  \n\nvec3 dir = rayCamDir(uv,cam_pos,cam_tar,2.); \ncolor = render(cam_pos,dir);  \nfragColor = vec4(color,1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}