{"ver":"0.1","info":{"id":"dtjXzV","date":"1676465886","viewed":79,"name":"brickwall","username":"tve","description":"learning about shaders","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","bricks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//text lookup taken from here: https://www.shadertoy.com/view/dtjSRc\n//bricks example from OpenGL Shading Language, Rost\n\nvoid put_char(vec2 screenCoord, vec2 pos, \n    float charValue, float fontSize, vec4 fontColor, inout vec4 pixel)\n{\n  \n  if (screenCoord.x >=pos.x && screenCoord.x <=pos.x+fontSize && screenCoord.y >=pos.y && screenCoord.y <=pos.y+fontSize)\n  {\n      // calculate texture grab position of character\n      float col = mod(charValue,16.0);\n      vec2 charPos = vec2(col,(charValue-col)/16.0);\n      charPos *= 64.0;\n      \n      vec2 dist = screenCoord-pos;\n\n      vec2 steps = (vec2(1.0,-1.0) / vec2(1024,1024));\n      vec2 startOffset = charPos *steps;\n      // scale texture uv step by fontSize\n      steps*=(1.0/(fontSize/64.0));\n      dist *=steps;\n      vec4 ccc = texture(iChannel0,startOffset+dist);\n\n      // Check if texture is a part of the character\n      if(ccc.r>0.6)\n      {\n        pixel=mix(pixel,fontColor, fontColor.w);\n      }      \n  }\n}\n\nvec3 bcol = vec3(1.0,0.3,0.2);\nvec3 mcol = vec3(0.2);\nvec2 bsz = vec2(0.2, 0.1);\nvec2 bpct = vec2(0.95, 0.85);\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = 2.0*(U/iResolution.xy)-1.0;\n    uv.x /= (iResolution.y/iResolution.x);\n    \n    \n    vec2 useb;\n        \n    vec2 pos = uv / bsz;\n    if( fract(pos.y*0.5)>0.5) pos.x += 0.5;\n    \n    pos.x += iTime;\n    pos = fract(pos);\n    useb = step(pos,bpct);\n\n    vec3 col = mix(mcol,bcol,useb.x*useb.y);\n    \n    uv.x += 5.0;\n    vec2 textPos = vec2(1.0-mod(iTime,4.0),0.25)*iResolution.xy;\n    \n    float fontSize = iResolution.y*0.25;\n    float charSpacing = fontSize;\n    \n    vec4 fontColor = vec4(2.0);\n    \n    fontColor = vec4( uv.x*0.25,\n                      uv.x*sin(uv.y*10.0)*0.35, \n                      uv.x*1.0, \n                      1.0);\n\n    int text[15];\n    text[0]=A;\n    text[1]=_;\n    text[2]=T;\n    text[3]=E;\n    text[4]=S;\n    text[5]=T;\n    text[6]=_;\n    text[7]=S;\n    text[8]=H;\n    text[9]=A;\n    text[10]=D;\n    text[11]=E;\n    text[12]=R;\n    \n    \n    vec4 color = vec4(0.0);\n    vec2 screenCoord = vec2(U.x, iResolution.y-U.y);\n    \n    for(int i=0; i<13; i++)\n    {\n        textPos.y += cos(float(i)+iTime*8.0)*iResolution.y*0.05;\n        float fs = fontSize;\n        fs *= 1.0+abs(cos(iTime*3.0)*1.5);\n        \n          put_char(screenCoord,\n            textPos+vec2(float(i)*charSpacing,0.0),\n            float(text[i]),\n            fs, \n            fontColor, \n            color\n         );\n        \n    }  \n    uv.x -= 5.0;\n    \n    float ss = smoothstep(0.0,0.001,color.r);\n    col = mix( col, color.rgb, ss);\n    \n      \n    col *= 0.5;\n    \n    float d = abs( length(uv-vec2(0.0,0.0))); \n    if(d>1.0) {\n      uv *= rot(iTime);\n      if(abs(cos(uv.x*25.0))>0.7 || abs(sin(uv.y*25.0))>0.7) {\n        \n        col = vec3( smoothstep( 1.0, 0.0, cos(d*15.0)) )*0.6;\n      }\n    }\n    \n    \n    O = vec4(col, 1.0);\n    \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n//text lookup taken from here: https://www.shadertoy.com/view/dtjSRc\n\nint _= 32; \nint _0 = 48;\nint _1 = 49;\nint\t_2 = 50;\nint\t_3 = 51;\nint\t_4 = 52;\nint _5 = 53;\nint _6 = 54;\nint _7 = 55;\nint _8 = 56;\nint _9 = 57;\nconst int A = 65;\nconst int B = 66;\nconst int C = 67;\nconst int D = 68;\nconst int E = 69;\nconst int F = 70;\nconst int G = 71;\nconst int H = 72;\nconst int I = 73;\nconst int J = 74;\nconst int K = 75;\nconst int L = 76;\nconst int M = 77;\nconst int N = 78;\nconst int O = 79;\nconst int P = 80;\nconst int Q = 81;\nconst int R = 82;\nconst int S = 83;\nconst int T = 84;\nconst int U = 85;\nconst int V = 65;\nconst int W = 66;\nconst int X = 67;\nconst int Y = 68;\nconst int Z = 69;\nconst int a = 97;\nconst int b = 98;\nconst int c = 99;\nconst int d = 100;\nconst int e = 101;\nconst int f = 102;\nconst int g = 103;\nconst int h = 104;\nconst int i = 105;\nconst int j = 106;\nconst int k = 107;\nconst int l = 108;\nconst int m = 109;\nconst int n = 110;\nconst int o = 111;\nconst int p = 112;\nconst int q = 113;\nconst int r = 114;\nconst int s = 115;\nconst int t = 116;\nconst int u = 117;\nconst int v = 118;\nconst int w = 119;\nconst int x = 120;\nconst int y = 121;\nconst int z = 122;\n\nmat2 rot(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n","name":"Common","description":"","type":"common"}]}