{"ver":"0.1","info":{"id":"XllSzB","date":"1437614663","viewed":242,"name":"Cylon's Jam","username":"jayjayjay","description":"An audio visualizer utilizing Cantor Sets, grooving to a most appropriate track: 'Most Geometric Person'.  When zoomed out enough, it kinda looks like the eye of a Cylon from BattlestarGallactica. \n\nhttps://en.wikipedia.org/wiki/Cantor_set","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fractal","audio","visualizer","cantor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Jason Yung - jayjayjay/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define time iTime/1.\n#define cTime iChannelTime[0]/50.\n\n#define AUDIO_LEN 75.0\n#define ZOOM (sin(iChannelTime[0]/AUDIO_LEN)+.1)*2.\nconst float baseLvl = 2.0;\nconst int steps = 10;\nconst float step = \t1.0/float(steps);\n\nconst float stretch = 1.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float third = 1.0 / pow( 3., baseLvl);\n    float cScalar = 1.0;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv *= ZOOM;\n    \n    float absX = abs(uv.x);\n    float absY = abs(uv.y);\n    \n    // first texture row is frequency data\n    float fft  = texture( iChannel0, vec2(abs(absX)*2.0,0.25) ).x;\n    \n    // second texture row is the sound wave\n    float wave = texture( iChannel0, vec2(abs(absX -.5)*2.0,0.75) ).x; //-.5 to center\n    \n    //small = zoom out\n    float step = 1.0/float(wave*(sin(time)+2.0)*10.0);\n         \n    //make it wider and smaller\n    float t = sin(cTime)*stretch;\n    \n    third /= pow( 3., pow(t,2.0));\n    \n    for(int i = 0; i< steps; i++) {\n        float y = float(i) * step;\n        if(y > absY) {\n            break; //dont iterate past uv.y\n        }\n    \tcScalar = mod( floor( (abs(uv.x)) / third) + 1.0, 2.0 );\n        if(cScalar == 0.0) {\n            break;\n        }else{\n        \tthird /= 3.0;\n        }\n    }\n    \n    float w = absY / step;\n    float lvl = floor(w);\n    float diff = w-lvl;\n    \n    float freqScalar = 1.0-fft;\n    \n   //loat lvlScalar = 1.0-uv.y;\n    float lvlScalar = 1.0;\n    \n    float scalar = 10.;\n    float z = 1.0 - abs(diff-.5) * (freqScalar * lvlScalar) * scalar; //for centering in row, remember that diff is proportional (0<diff<1) ! since w and lvl are!\n    //z = 1.0-z; //invert ratio\n    \n    float b = (lvl+1.0)/float(steps);\n    \n    fragColor = vec4(1.0-b,b,abs(.5-b),1.0) * cScalar * z;\n\n}","name":"Image","description":"","type":"image"}]}