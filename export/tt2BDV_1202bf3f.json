{"ver":"0.1","info":{"id":"tt2BDV","date":"1599958046","viewed":139,"name":"Triangular Tiles","username":"MeDope","description":"Not best and optimized way to triangle tiles but here it is","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["mouse","triangle","glow","distance","pattern","tile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sc normalize(vec2(1, sqrt(3.0)))\n#define scale (3.0 * sc.y)\n#define R iResolution.xy\n\nfloat aaStep0(float d)\n{\n    return smoothstep(-scale/R.y, scale/R.y, d);\n}\n\n//a bit modified from iq\nvec3 ApplyColor(float d)\n{\n    vec3 c = vec3(0);\n    c = mix(vec3(.05, .15, .7), vec3(.5), clamp(sign(d), 0., 1.));\n\tc *= 1. - exp(-16. * abs(d));\n\tc *= .7 + .3 * cos(.25 * d * length(R.xy));\n\treturn mix(c, vec3(1.), aaStep0(-abs(d) + scale/R.y));\n}\n\nfloat d(vec2 p)\n{\n   \tp = mod(p, sc) - sc * .5;\n    return max(p.y, dot(abs(p), sc.yx) - sc.y * .25);\n}\n\nfloat td(vec2 p)\n{\n\tp.y -= sc.y * 0.5;\n    return min(d(p), d(p - vec2(.25, sc.y * .5)));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\n    vec2 p = scale * (fragCoord - 0.5 * R.xy) / R.y;\n    vec2 m = (fragCoord.xy - iMouse.xy)/ R.xy;\n    \n\tif (iMouse.x == 0. && iMouse.y == 0.) m -= .5;\n    \n    float d = td(p);\n\n    //Patterns\n    vec3 col = vec3(0);\n    col = mix(vec3(abs(d)), ApplyColor(d), step(0., m.x));\n    col = mix(mix(vec3(.4), vec3(.025, .075, .35), aaStep0(-d)), col, step(0., m.y));\n    col = mix(vec3(scale/R.y/abs(d)), col, step(0., max(m.y, m.x)));\n    \n    //Separator lines\n    float glow = clamp(pow(.2 * scale/R.y/min(abs(m.x)/(R.y/R.x), abs(m.y)), 2.5), 0.0, 1.0);\n    col = mix(col, vec3(1, 10, 50), glow);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}