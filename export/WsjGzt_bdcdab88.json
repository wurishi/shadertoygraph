{"ver":"0.1","info":{"id":"WsjGzt","date":"1549726039","viewed":119,"name":"3D - HEart ","username":"nikunjsha","description":"Special Thanks & Created by inigo quilez - iq/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","video","tutorial","heart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Modification of color made by Nikunjsha Films\n\n\n#define AA 1\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n\nconst float PI = 3.1415926535897932384626433832795;\nconst float PHI = 1.6180339887498948482045868343656;\n\nvec3 forwardSF( float i, float n) \n{\n    float phi = 2.0*PI*fract(i/PHI);\n    float zi = 1.0 - (2.0*i+1.0)/n;\n    float sinTheta = sqrt( 1.0 - zi*zi);\n    return vec3( cos(phi)*sinTheta, sin(phi)*sinTheta, zi);\n}\n\nfloat almostIdentity( float x, float m, float n )\n{\n    if( x>m ) return x;\n    float a = 2.0*n - m;\n    float b = 2.0*m - 3.0*n;\n    float t = x/m;\n    return (a*t + b)*t*t + n;\n}\n\n\nvec2 map( vec3 q )\n{\n    q *= 100.0;\n\n    vec2 res = vec2( q.y, 2.0 );\n\n\n    float r = 15.0;\n    q.y -= r;\n    float ani = pow( 0.5+0.5*sin(6.28318*iTime + q.y/25.0), 4.0 );\n    q *= 1.0 - 0.2*vec3(1.0,0.5,1.0)*ani;\n    q.y -= 1.5*ani;\n    float x = abs(q.x);\n    \n    // x = almostIdentity( x, 1.0, 0.5 ); // remove discontinuity (https://iquilezles.org/articles/functions)\n\n        \n    float y = q.y;\n    float z = q.z;\n    y = 4.0 + y*1.2 - x*sqrt(max((20.0-x)/15.0,0.0));\n    z *= 2.0 - y/15.0;\n    float d = sqrt(x*x+y*y+z*z) - r;\n    d = d/3.0;\n    if( d<res.x ) res = vec2( d, 1.0 );\n    \n    res.x /= 100.0;\n    return res;\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 1.0;\n\n    vec2 res = vec2(0.0);\n    float t = 0.2;\n    for( int i=0; i<300; i++ )\n    {\n\t    vec2 h = map( ro+rd*t );\n        if( (h.x<0.0) || (t>maxd) ) break;\n        t += h.x;\n        res = vec2( t, h.y );\n    }\n\n    if( t>maxd ) res=vec2(-1.0);\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.005,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n    for( int i=0; i<64; i++ )\n    {\n        vec3 kk;\n        vec3 ap = forwardSF( float(i), 64.0 );\n\t\tap *= sign( dot(ap,nor) ) * hash1(float(i));\n        ao += clamp( map( pos + nor*0.01 + ap*0.2 ).x*20.0, 0.0, 1.0 );\n    }\n\tao /= 64.0;\n\t\n    return clamp( ao, 0.0, 1.0 );\n}\n\nvec3 render( in vec2 p )\n{\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n\t\n\tfloat an = 0.2*(iTime+2.0);\n\n\tvec3 ro = vec3(0.4*sin(an),0.25,0.4*cos(an));\n    vec3 ta = vec3(0.0,0.15,0.0);\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.7*ww );\n\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n    \n\tvec3 col = vec3(.0,0.82,0.9);\n\n\t// raymarch\n    vec3 uvw;\n    vec2 res = intersect(ro,rd);\n    float t = res.x;\n\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n        float fre = clamp( 1.0 + dot(nor,rd), 0.0, 1.0 );\n        \n        float occ = calcAO( pos, nor ); occ = occ*occ;\n\n        if( res.y<2.1 ) // heart\n        {\n            col = vec3(0.9,0.02,0.01);\n            col = col*0.72 + 0.2*fre*vec3(1.0,0.8,0.2);\n            \n            vec3 lin  = 4.0*vec3(0.7,0.80,1.00)*(0.5+0.5*nor.y)*occ;\n                 lin += 0.5*fre*vec3(1.0,1.0,1.00)*(0.6+0.4*occ);\n            col = col * lin;\n            col += 4.0*vec3(0.7,0.8,1.00)*smoothstep(0.0,0.4,ref.y)*(0.06+0.94*pow(fre,5.0))*occ;\n\n            col = pow(col,vec3(0.7860));\n        }\n        else // ground\n        {\n            col *= clamp(sqrt(occ*1.8),0.0,1.0);\n        }\n    }\n\n    col = clamp(col,0.0,1.0);\n\treturn col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if AA>1\n    vec3 col = vec3(0.0);\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 px = fragCoord + vec2(float(m),float(n))/float(AA);\n        vec2 p = (-iResolution.xy+2.0*px)/iResolution.y;\n    \tcol += render( p );    \n    }\n    col /= float(AA*AA);\n    \n#else\n    vec2 p = (-iResolution.xy+2.0*fragCoord)/iResolution.y;\n\n    vec3 col = render( p );\n#endif    \n    \n    vec2 q = fragCoord/iResolution.xy;\n    col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}