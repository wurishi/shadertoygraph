{"ver":"0.1","info":{"id":"slGyRV","date":"1661807350","viewed":161,"name":"Temporal Flowmaps","username":"gehtsiegarnixan","description":"A simple Trial of how normal flowmap looks in a situation similar to my directional flow","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["flow","flowmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nStandart Temporal Flowmap in a similar environment to my directional flow \nimplementations. Two textures are moved by a motion vector of alternating \nstrength, so that resetting the motion back to the origin is masked by the \nalternate texture.\n\nIf you want better looking Flowmap try Directional Flow:\nhttps://www.shadertoy.com/view/7dtBWl\n\nCatlikecoding has a nice tutorial explaining how Temporal Flowmaps works:\nhttps://catlikecoding.com/unity/tutorials/flow/texture-distortion/\n*/\n\n// generates a -1-1 smooth flowmap\nvec2 flowMap(sampler2D sam, vec2 uv) {\n    //a random spot in the noise map, normally you use an actual flowmap\n    vec2 flowMap = texture(sam, uv*0.05).xy;\n    return flowMap * 2. -1.; // constant bias scale for -1 to 1 range\n}\n\n// standart temporal Flowmaps \nvec3 flowmaps(sampler2D tex, vec2 uv, sampler2D flow, vec2 flowUV, \n              float time, float strength) {\n    // Sample flowmap\n    vec2 flowVec = flowMap(flow, flowUV);\n    flowVec *= strength; // scale by strength\n    \n    //generate timers\n    float time1 = fract(time);\n    float time2 = fract(time - .5);\n    \n    // sample color texture using different timers to scale offset strength\n    vec3 tex1 = texture(tex, uv + (time1 * flowVec)).xyz;\n    vec3 tex2 = texture(tex, uv + (time2 * flowVec)).xyz;\n    \n    //float alpha = (sin((time+.25)*6.28) +1.) *0.5; // sine alpha test\n    float alpha = abs((0.5-time1)*2.); \n\n    vec3 texMix = mix(tex1, tex2, alpha);\n    return texMix;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float time = iTime* 0.5; // flow speed multiplier\n    float strength = 1.; // flow distrotion strength\n    float scale = 8.0;  // scale of the \"wave\" texture\n    \n    vec2 uv = fragCoord/iResolution.y; //square UV pattern\n    \n    vec3 flow = flowmaps(iChannel0, uv*scale, iChannel1, uv, time, strength);\n    \n    flow += vec3(0.0,0.2,0.5); //adding arbitrary watery color\n    \n    fragColor = vec4(flow,1.0);\n}","name":"Image","description":"","type":"image"}]}