{"ver":"0.1","info":{"id":"4lGSzV","date":"1484920903","viewed":533,"name":"drawNum functions","username":"Tempally","description":"Tried to build a single function to draw a number. Looked at works of many authors.\nA simple (on the face of it) task became a complex comparison of code of different authors in different browsers.\nStill haven't found a solution that works everywhere...\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","digits"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RESOLUTION .25\n// 2 most suitable at this moment:\n\n// based on works of FabriceNeyret2\n// draws positive integer <what> at iDrawCoord-<where>\n// can handle big numbers correctly...\n// unfortunately, it has troubles in some chromium-based browsers\n// (confirmed issues in Opera 30.x and Iron 55.x)\nfloat drawInt(in vec2 where, in int what)\n{\n    int i=int((where*=RESOLUTION).y), j=int(where.x), k=1;\n    if (i>0 && i<6)\n      for (int n=10; n>0;n--)\n        if ((j+=4)<3 && j>=0) {\n            \tint l=what/k;\n                i = (i>4? 972980223: i>3? 690407533: i>2? 704642687: i>1? 696556137:972881535)/\n            \t    int(exp2(float(29-j-(l-(l/10)*10)*3)));\n                return float(i-i/2*2);\n        }\n    \telse k*=10;\n    return 0.;\n}\n\n// based on works of TimoKinnunen\n// draws float <value> at iDrawCoord-<charCoord>\n// works fine, but not for big decimals\nfloat drawFloat(in vec2 charCoord, float value,\n\t\tfloat digits, float decimals) {\n\tcharCoord *= RESOLUTION*RESOLUTION;\n\tfloat bits = 0.;\n\tif(charCoord.y < 0. || charCoord.y >= 1.5 || charCoord.x < step(-value,0.)) return bits;\n\tfloat digitIndex = digits - floor(charCoord.x)+ 1.;\n\tif(- digitIndex <= decimals) {\n\t\tfloat pow1 = pow(10., digitIndex);\n\t\tfloat absValue = abs(value);\n\t\tfloat pivot = max(absValue, 1.5) * 10.;\n\t\tif(pivot < pow1) bits = 1792.*float(value < 0. && pivot >= pow1 * .1);\n\t\telse if(digitIndex == 0.) bits = 2.*float(decimals > 0.);\n\t\telse {\n        \tvalue = digitIndex < 0. ? fract(absValue) : absValue * 10.;\n            int x=int (mod(value / pow1, 10.));\n\t\t\tbits = x==0?480599.:x==1?139810.:x==2?476951.:x==3?476999.:x==4?350020.:x==5?464711.:x==6?464727.:x==7?476228.:x==8?481111.:x==9?481095.:0.;\n\t\t}\n\t}\n\treturn floor(mod(bits / pow(2., floor(fract(charCoord.x) * 4.) + floor(charCoord.y * 4.) * 4.), 2.));\n}\n\n// New one, based on works of Cafe.\nfloat drawLCD(in vec2 fc, in float num) {\n\t\n\tfloat v=1.;\n\tfor(float i=1. ; i<11. ; i++) {\n\t    int dig = int(mod(num/pow(10.,i),1.)*10.);\n\t    vec2 uv=fc*.1+vec2(i*1.5,0.);\n\t\t\n\t    bool u=(uv.y>=min(0.,abs(uv.x)-0.5));\n\t    uv.y=abs(uv.y)-0.5;\n\t    bool c=false;\n\t    if(abs(uv.x)<abs(uv.y)){ uv=uv.yx; c=!c; }\n\t    bool l=(uv.x<0.);\n\t    uv.y=abs(uv.y)-0.4;\n\t    uv.x=abs(abs(uv.x)-0.5);\n\t\n            dig-=(dig/10)*10;\n\t\n\t    float val;\n\t    if(((dig==0) && (c&&l)) ||\n\t       ((dig==1) && (c||l)) ||\n\t       ((dig==2) && ((u&&l||!(u||l))&&!c)) ||\n\t       ((dig==3) && (l&&!c)) ||\n\t       ((dig==4) && (c&&!l||l&&!u)) ||\n\t       ((dig==5) && (!c &&(!l&&u || l&&!u))) ||\n\t       ((dig==6) && (u&&!c&&!l)) ||\n\t       ((dig==7) && (l||c&&!u)) ||\n\t       ((dig==9) && (!u&&l))) val= 1.;\n\t    else val= uv.x+max(0.,uv.y);\n\t\t\n\t    v=min(v,val);\n\t}\n\t\n\treturn smoothstep(0.06,0.05,v);\n}\n\nvoid mainImage(out vec4 oColor, vec2 iPos) {\n    oColor=vec4(.2);\n    // precision test:\n    float bigN=.5+pow(10.0,floor(iPos.y/25.));\n    oColor.gb+=drawInt(vec2(iPos.x-55.,mod(iPos.y,25.)), int(iPos.y/25.));\n    oColor.rb+=drawInt(vec2(iPos.x-220.,mod(iPos.y,25.)), int(.5+pow(10.0,floor(iPos.y/25.))));\n    oColor.rg+=drawFloat(vec2(iPos.x-220.,mod(iPos.y,25.)), bigN, 10.,0.);\n    oColor.g +=drawLCD(vec2(iPos.x-560.,mod(iPos.y,25.)-10.), .5+pow(10.0,floor(iPos.y/25.)));\n    // usage example:\n    oColor+=drawFloat(iPos-240., iTime, 20.,10.);\n    oColor+=drawInt(iPos-iMouse.xy, int(iMouse.y*100000.+iMouse.x));\n    oColor.r += drawLCD(vec2(iPos.x-740.,iPos.y-25.),iTime);\n}","name":"Image","description":"","type":"image"}]}