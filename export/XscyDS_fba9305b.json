{"ver":"0.1","info":{"id":"XscyDS","date":"1519929620","viewed":467,"name":"Gabor - bad random","username":"FabriceNeyret2","description":"mouse.x:  frequency   mouse.y: direction\n\nleft: pure random splat locations.  right: quantized random splat locations.\nCorrelation in rand causes overshoots and extra variance.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["random","gabor","bias"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// variant of https://shadertoy.com/view/XsBGDc\n\n#define Q 20.       // random quantization on right\n#define NB 1000     // number or gabor blobs\n#define SIZE .22    // size of gabor blobs\n                    // freq and dir tuned by mouse.x\n#define PI 3.1416\n\n#define gauss(x)  exp(-(x*x)/(SIZE*SIZE))\n\n// chose texture vs procedural rand :\n//#define Rnd(i,j) texture( iChannel1, (.5+vec2(i,j)) / iChannelResolution[1].x ).r\n#define Rnd(i,j) fract(sin(dot(vec2(i,j), vec2(12.9898, 78.233))) * 43758.5453)\n \n#define rnd(i,j) ( U.x < 0. ? Rnd(i,j) : round( Rnd(i,j) *Q ) / Q )\n\nfloat gabor(vec2 pos, vec2 dir) {          // Gabor splat\n    vec2 G = gauss(pos);\n    float s = .5*sin( dot(pos,dir)*6.28 -10.*iTime );\n\treturn G.x*G.y *s ;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy,\n         M = iMouse.xy/R, pos,dir;\n         U = (U+U-R)/R.y;\n    if (M==vec2(0)) M = vec2(.16);\n    O -= O;  \n    float f = 3.+20.* M.x,                 // frequency\n          a = PI/2. * M.y;                 // direction\n    dir = vec2(cos(a),sin(a));\n    \n    for (int i=0; i<NB; i++) {\n        pos = ( 2.* vec2( rnd(i,0), rnd(i,1) ) - 1. ) * R/R.y;\n        O += gabor(U-pos, f*dir );\n    }\n    O = .5+.5*O *8./sqrt(float(NB));\n    \n         if( O.r > 1.) O = vec4(1,0,0,0);  // show overshoots\n    else if ( O.r <0.) O = vec4(0,0,1,0);\n}\n                  \n","name":"Image","description":"","type":"image"}]}