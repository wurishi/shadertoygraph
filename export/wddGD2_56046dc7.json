{"ver":"0.1","info":{"id":"wddGD2","date":"1569338812","viewed":117,"name":"sphere emergence","username":"tono","description":"i practiced raymarching shader","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = acos(-1.);\nconst float pi2 = pi*2.;\n\nmat2 rot(float a)\n{\n\tfloat c = cos(a) ,s=sin(a);\n\treturn mat2(c,s,-s,c);\n}\n\nvec2 pmod(vec2 p , float r)\n{\n\tfloat a = atan(p.x,p.y) +pi/r;\n\tfloat n = pi2 / r;\n\ta = floor(a/n) * n;\n\treturn p * rot(-a);\n}\n\nfloat sdPlane(vec3 p)\n{\n\tfloat d = p.y;\n\treturn d;\n}\n\nvec3 foldx(vec3 p)\n{\n\tp.x = abs(p.x);\n\treturn p;\n}\n\t\nfloat sdBox(vec3 p , float s)\n{\n\tp = abs(p) - s;\n\treturn max(max(p.x,p.y),p.z);\n}\n\t\nfloat distFunc(vec3 p)\n{\n\tvec3 pp = mod(p,5.) - 8./2.;\n\tfloat s= 0.8;\n\treturn sdBox(pp,s);\t\n}\n\nvec3 hsv(float h,float s,float v)\n{\n\treturn ((clamp(abs(fract(h+vec3(0.,2.,1.)/3.)*6.-3.)-1.,0.,1.)-1.)*s+1.)*v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tvec2 p = (fragCoord.xy * 2.  -  iResolution.xy) / min(iResolution.x ,iResolution.y) ;\n\t\n\tfloat t = iTime *6.;\n\t\n\tvec3 cpos = vec3(0.,0.,-5.);\n\tvec3 cup = vec3(0.,1.,0.);\n\tvec3 cside = normalize(cross(cpos,cup));;\n\tcpos += vec3(t,t/5.,0.);\n\tfloat target = 2.5;\n\tvec3 rd = normalize(vec3(((1.0 - dot(p,p)) + cside * p.x + cup * p.y)));\n\t\n\trd.xy = pmod(rd.xy,8. * max(0.01,sin(pi/8.*t)));\n\t\n\tfloat transparent = sin(pi/8. * t) * 10.;\n\t\n\tvec3 col = vec3(0.0);\n\t\n\tfloat depth = 0.0;\n\tfloat c = 0.;\n\tfloat ac = 0.;\n\tfor(int i = 0; i < 99 ; i++)\t\n\t{\n\t\tvec3 rayPos = cpos + rd* depth;\n\t\tfloat d = distFunc(rayPos);\n\t\td = max(abs(d),0.01 * transparent);\n\t\tac += exp(-d*3.);\n\t\tdepth += d;\n\t}\n\tdepth = ac/depth ;\n\tcol = hsv(depth,ac*0.01,depth);\n\t\n\tfragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}