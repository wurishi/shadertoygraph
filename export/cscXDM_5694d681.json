{"ver":"0.1","info":{"id":"cscXDM","date":"1710589210","viewed":29,"name":"my-march1","username":"lhe","description":"first raymarching test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdIntersect(in float a, in float b) {\n    return min(a, b);\n}\n\nfloat sdSphere(in vec3 coord, in vec3 center, float radius) {\n    return radius - length(coord - center);\n}\n\nvec3 snSphere(in vec3 coord, in vec3 center, float radius) {\n    return normalize(coord - center);\n}\n\nfloat sdHalfSpace(in vec3 coord, in vec3 point, in vec3 normal) {\n    return dot(normal, coord - point);\n}\n\nvec3 snHalfSpace(in vec3 coord, in vec3 point, in vec3 normal) {\n    return -normal;\n}\n\nfloat sdPiped(in vec3 coord, in vec3 point, in vec3 a, in vec3 b, in vec3 c) {\n    return sdIntersect(\n        sdIntersect(\n            sdHalfSpace(coord, point, normalize(cross(a, b))),\n            sdHalfSpace(coord, point, normalize(cross(c, a)))\n        ),\n        sdIntersect(\n            sdIntersect(\n                sdHalfSpace(coord, point, normalize(cross(b, c))),\n                sdHalfSpace(coord, point + c, normalize(-cross(a, b)))\n            ),\n            sdIntersect(\n                sdHalfSpace(coord, point + b, normalize(-cross(c, a))),\n                sdHalfSpace(coord, point + a, normalize(-cross(b, c)))\n            )\n        )\n    );\n}\n\nvec3 orthoRay(in vec2 screen, float s) {\n    return vec3(screen, -s);\n}\n\nvec3 perspRay(in vec2 screen, float s) {\n    float focal = 500.0;\n    vec3 ray = vec3(screen - iResolution.xy * 0.5, -focal);\n    return vec3(iResolution.xy * 0.5, focal) + s * normalize(ray);\n}\n\nstruct hit {\n    bool visible;\n    vec3 point;\n    vec3 normal;\n};\n\nhit march(in vec2 screen, in vec3 center, float radius) {\n    float s = 0.0;\n    for (int i = 0; i < 180; i++) {\n        vec3 coord = perspRay(screen, s);\n        //float dist = sdPiped(coord, center -radius, vec3(radius, 0.0, 0.0), vec3(0.0, radius, 0.0), vec3(0.0, 0.0, radius));\n        //float dist = sdHalfSpace(coord, center, vec3(1.0, 0.0, 0.0));\n        float dist = sdSphere(coord, center, radius);\n        if (dist > -1.0e-3) {\n            return hit(true, coord, snSphere(coord, center, radius));\n        }\n        s -= dist;\n    }\n    return hit(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    hit h = march(fragCoord, vec3(iMouse.xy, -100.0), 40.0);\n    if (h.visible) {\n        float lum = -dot(h.normal, normalize(h.point - vec3(iResolution.xy/2.0, 0.0)));\n        fragColor = lum * vec4(0.8, 0.7, 0.8, 0.0) + vec4(0.0, 0.0, 0.0, 1.0);\n        //fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }   \n}\n","name":"Image","description":"","type":"image"}]}