{"ver":"0.1","info":{"id":"NdjGDw","date":"1617492379","viewed":93,"name":"Spirals^w^","username":"lechuga","description":"Metabolas y espirales, queria hacer algo vaporwave pero no me salió.\n\ndespues de la revision, y fuera de la presión y estres , decidi hacer otro shader más ordenado y sin fractales.\n\nzozo <3","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["demoscene","spirals","lechugafeliz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 plas( vec3 v, float time )\n{\n\tfloat c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 5.0 );\n\treturn vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\n#define time mod(iTime, 100.)\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define smin(a,b ,k) min(a, b)-pow(max(k-abs(a-b), 0.)/k, 3.)*k*(1.0/6.0)\nfloat rand(float x){return fract(sin(x*542.23)*454.);}\nfloat c(float t, float s){t/=s; return mix( rand(floor(t)), rand(floor(t+1.)), pow(smoothstep(0., 1., fract(t)), 15.5555) );}\nfloat sb(vec3 p, vec3 s){p = abs(p)-s; return max(max(p.x, p.y), p.z);}\nfloat glow, glow2, glow3;\nfloat metaballs(vec3 p){float d;\n  vec3 p1 = p;\n  float tt = c(time, 10.)*4.;\n  float time1= time+tt;\n  for(int i = 0; i < 3; i++){p1.xz *= rot(p1.y*.21+time1);}\n  p1 += plas((p1*.345325 * p1*.323425), time1*5.).x;\n  float e1 = length(p1-vec3(cos(time1)*15., sin(time1)*5., 0.))-2.5;\n  float e2 = length(p1-vec3(cos(time1)*sin(time1)*14., 1.+sin(time1)*13., 1.))-3.;\n  float e3 = length(p1-vec3(cos(time1)*sin(time1)*14., 1., 2.-sin(time1)*23.)*cos(time1))-2.4;\n  float e4 = length(p1)-5.;\n  glow += .05/(1.+e1*e1);\n  glow2 += .1/(.1+e2*e2);\n  glow3 += .01/(.5+e3*e3);\n  d = e1;\n  d = smin(e2,d, 13.);\n  d = smin(e3,d, 13.);\n  //d = min(e4,d);\n  \n  return d*.3;\n}\nfloat dfc;\nfloat map(vec3 p){float d = metaballs(p);\n\n  const float dfv = 35.;\n  float df = dfv-p.y;\n  vec3 p1 = p;\n  const float re = 10.;\n  p1.z += time*40.;\n  p1.y -= dfv;\n  p1.xz = (fract(p1.xz/re+.5)-.5)*re;\n  float cubs = sb(p1, vec3(4.5, 5., 4.5));\n  dfc += .68/(1.+cubs*cubs);\n  \n  \n  \n  vec3 p2 = p;\n  p2.z += time*70.;\n  p2.y += dfv;\n  p2.x = abs(p2.x)-2.5-time;\n  p2.x = abs(p2.x)-1.75;\n  p2.xz = (fract(p2.xz/re+.5)-.5)*re;\n  \n  float rrr = .15;\n  float linesV = length(p2.xy)-rrr;\n  float linesH = length(p2.zy)-rrr;\n  d = min(d, df);\n  d = min(d, cubs);\n  d = min(d, linesH);\n  d = min(d, linesV);\n  return d;\n}\n\nconst vec2 e = vec2(0.0123123, 0.0345345);\nvec3 nm(vec3 p){\n  return normalize(map(p)-vec3(map(p-e.xyy), map(p-e.yxy), map(p-e.yyx)));\n}\nvoid cam(inout vec3 p){p.xz *= rot(c(time,14.345)+time); p.yz *= rot(sin(time)*.05-.5);}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= 0.5;\n\n\n  vec3 s = vec3(0.00001, 0.00001, -50.), r = normalize(vec3(-uv, 1.));\n  cam(s); cam(r);\n  vec3 col = vec3(0.), p = s;\n  float i = 0.; const float MAX = 100.; float d;\n  for(; i < MAX ; i++) if(d=map(p),p+=d*r, abs(d) < .001) break;\n  col += 1.-i/MAX;\n  col += glow * vec3(.01, .234, 0.1);\n  col += glow2 * vec3(.1, 0., 1.);\n  col += glow3 * vec3(1., 0.11, 0.11);\n  col += mix(dfc*vec3(.523, .33423, .0)*.19, vec3(.657, .1, .413)*.777, 0.545);\n  col += mix(pow(length(p-s), .07)*vec3(.99, .45, .0)*.1, vec3(1., 0., 1.), 0.19);\n  col *= 1.-length(p-s)/300.;\n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}