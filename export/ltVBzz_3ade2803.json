{"ver":"0.1","info":{"id":"ltVBzz","date":"1541686394","viewed":506,"name":"Webcam Motion Interpolation","username":"Drudgerist","description":"Same as https://www.shadertoy.com/view/MtVfRz but with webcam support. ","likes":1,"published":1,"flags":34,"usePreview":0,"tags":["webcam","motion","interpolation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float MOTION_SCALE_FACTOR = 500.0;\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float testShift = iMouse.x / iResolution.x;\n    vec2 FinalUvShift = texture(iChannel2, uv).rg / MOTION_SCALE_FACTOR;\n    vec4 previousFrame;\n    \n    if (iFrame % 2 == 0)\n    {\n        previousFrame = texture(iChannel2, uv - (FinalUvShift * testShift));\n    }\n    else\n    {\n        previousFrame = texture(iChannel1, uv - (FinalUvShift * testShift));\n    }\n    \n    vec4 nextFrame = texture(iChannel1, uv - (FinalUvShift * (1.0 - testShift)));\n\n    fragColor = mix(previousFrame, nextFrame, testShift);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (iFrame % 2 == 0)\n    {\n        fragColor = texture(iChannel0, uv);\n    }\n    else\n    {\n        fragColor = texture(iChannel1, uv);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (iFrame % 2 == 0)\n    {\n        fragColor = texture(iChannel1, uv);\n    }\n    else\n    {\n        fragColor = texture(iChannel0, uv);\n    }\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float PixV(sampler2D Target, vec2 Shift, vec2 iuv, vec2 texelSize)\n{\n    vec4 c = texture(Target,iuv);\n    c += texture(Target, iuv + Shift+ (vec2(1, 0) * texelSize));\n    c += texture(Target, iuv + Shift + (vec2(0, 1) * texelSize));\n    c += texture(Target, iuv + Shift + (vec2(-1, 0) * texelSize));\n    c += texture(Target, iuv + Shift + (vec2(0, -1) * texelSize));\n    return c.r + c.g + c.b;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const float magic = 6.28;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    float CheckValue, FirstValue, PrevValue, LastMatch;\n\tvec2 FinalUvShift,CheckUvShift;\n\n    if (iFrame % 2 == 0)\n    {\n        PrevValue = PixV(iChannel2, vec2(0,0), uv, texelSize);\n    }\n    else\n    {\n        PrevValue = PixV(iChannel1, vec2(0,0), uv, texelSize);\n    }\n    \n    LastMatch = abs(PrevValue - PixV(iChannel0, vec2(0,0), uv, texelSize));\n\n    for(int Circle = 1; Circle < 4; ++Circle)\n    {\n        for(int j = 0; j < 4 * Circle; ++j)\n        {\n            float circleF = float(Circle);\n            float jF = float(j);\n\n            FirstValue = magic / (4.0 * circleF);\n\t\t\tCheckUvShift = vec2(sin(FirstValue * jF), cos(FirstValue * jF));\n            float currentValue = PixV(iChannel0, CheckUvShift * texelSize * circleF, uv, texelSize);\n            if ((CheckValue = abs(PrevValue - currentValue)) < LastMatch)\n            {\n                LastMatch = CheckValue;\n                FinalUvShift = CheckUvShift;\n            }\n        }\n    }\n    fragColor = vec4(FinalUvShift.xy, 0, 1);\n}\n","name":"Buffer D","description":"","type":"buffer"}]}