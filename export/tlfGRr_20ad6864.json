{"ver":"0.1","info":{"id":"tlfGRr","date":"1555504794","viewed":358,"name":"Ray tracing Cube","username":"kindpotato","description":"I figured out how to do ray tracing on cubes ALL BY MYSELF.","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["planeraytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float planeIntersection(vec3 N,vec3 V,vec3 pos){\n\tfloat distToPlane = -dot(pos,N);\n\tfloat rayDotPlane = -dot(V,N);\n    if (rayDotPlane > 0. && distToPlane > 0.)\n        return distToPlane/rayDotPlane;\n    else return 0.;\n}\n\nvec2 getUV(vec3 perpX, vec3 perpY, vec3 pos){\n\treturn vec2(dot(perpX,pos),dot(perpY,pos));\n}\n\nvec3 planeColor(vec3 V,vec3 N,vec3 lightVec,vec2 uv){\n    float lightDist = length(lightVec);\n    float brightness = 100.*dot(N,lightVec)/(lightDist * lightDist * lightDist);\n    vec3 reflected = reflect(V,N);\n    float threshold = 1./lightDist/lightDist;\n    //float shine = smoothstep(1.- 1.5*threshold,1.- 0.2*threshold,dot(reflected,lightVec/lightDist));\n    float shine = 100.*pow(max(0.,dot(reflected,lightVec/lightDist)),50.)/lightDist/lightDist;\n    return (brightness+shine)*texture(iChannel1,0.5*uv+0.5).xyz;\n}\n\nvec4 boxColor(vec3 viewingNormal, vec3 lightPos, vec3 boxPos, vec3 planeX,vec3 planeY, vec3 planeZ){\n    \n    for (int i = 0; i < 2; ++i){\n        vec3 planePos = boxPos + planeZ;\n        float t = planeIntersection(planeZ,viewingNormal,planePos);\n        vec2 uv;\n        if (t > 0.){\n            vec3 pos = t*viewingNormal;\n\n            uv = getUV(planeX,planeY,pos - planePos);\n\n            if (uv.x < length(planeX) && uv.x > -length(planeX) && uv.y < length(planeY) && uv.y > -length(planeY)){\n                return vec4(planeColor(viewingNormal,planeZ,lightPos-pos,uv),t);\n            }\n        }\n        planePos = boxPos + planeX;\n        t = planeIntersection(planeX,viewingNormal,planePos);\n        if (t > 0.){\n            vec3 pos = t*viewingNormal;\n\n            uv = getUV(planeZ,planeY,pos - planePos);\n\n            if (uv.x < length(planeZ) && uv.x > -length(planeZ) && uv.y < length(planeY) && uv.y > -length(planeY)){\n                return vec4(planeColor(viewingNormal, planeX,lightPos-pos,uv),t);\n            }\n        }\n\n        planePos = boxPos + planeY;\n        t = planeIntersection(planeY,viewingNormal,planePos);\n        if (t > 0.){\n            vec3 pos = t*viewingNormal;\n\n            uv = getUV(planeX,planeZ,pos - planePos);\n\n            if (uv.x < length(planeZ) && uv.x > -length(planeZ) && uv.y < length(planeX) && uv.y > -length(planeX)){\n                return vec4(planeColor(viewingNormal,planeY,lightPos-pos,uv),t);\n            }\n        }\n\n        planeX *= -1.;\n        planeY *= -1.;\n        planeZ *= -1.;\n    }\n    return vec4(0);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.x;\n    float aspect = iResolution.x/iResolution.y;\n    \n    //Based on uv\n    vec3 viewingNormal = normalize( vec3( uv-vec2(0.5,0.5/aspect),1));\n    vec3 lightPos = vec3(-1,-1,2);\n    vec3 boxPos = vec3(0,-1,15);\n    vec3 planeZ = normalize(vec3(cos(iTime),1,sin(iTime)));\n    vec3 planeX = normalize(cross(planeZ,vec3(1,0,0)));\n    vec3 planeY = cross(planeZ,planeX);\n    vec4 boxCol1= boxColor(viewingNormal,lightPos,boxPos,planeX,planeY,planeZ);\n    boxPos += planeZ*4.;\n    vec4 boxCol2 = boxColor(viewingNormal,lightPos,boxPos,planeX,planeY,planeZ);\n    vec3 colour = vec3(0);\n    if (boxCol2.w == 0. || boxCol2.w > boxCol1.w)\n        colour += boxCol1.xyz;\n    if (boxCol1.w == 0. || boxCol1.w > boxCol2.w)\n        colour += boxCol2.xyz;\n\tfragColor = vec4(colour,1);\n}","name":"Image","description":"","type":"image"}]}