{"ver":"0.1","info":{"id":"lfdyRN","date":"1731577773","viewed":92,"name":"ShaderToy_14_PolarCoordinate","username":"tbx","description":"polar coordinate","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["polarcoordinate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\n#define COUNT 20.0\n\nfloat drawCoord(vec2 uv)\n{\n   float x = distance(vec2(uv.x, 0.0), vec2(0.0, 0.0));\n   float y = distance(vec2(0.0, uv.y), vec2(0.0, 0.0));\n   \n   return 1e-3 / x + 1e-3 / y;\n}\n\nfloat net(vec2 coord)\n{\n    float xline = cos(coord.x * PI * COUNT);\n    xline = step(1.0 - 1e-1, xline);\n    \n    float yline = cos(coord.y * PI * COUNT);\n    yline = step(1.0 - 1e-1, yline);\n    \n    return max(xline, yline);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    vec2 coord = uv * 2.0 - 1.0;\n    \n    coord.x *= iResolution.x / iResolution.y;\n    \n    \n    float l = length(coord);\n    \n    float r = atan(coord.x, coord.y);\n    \n    // r∈[-PI, PI] to r∈[0, 1]\n    r = r + PI;\n    r = r / (2.0 * PI);\n    \n    float cyle = 1e-2/abs(r - l);\n    \n    // draw cyle radius 1.0\n    cyle += 1e-2/abs(1.0 - l);\n    \n    r = r * PI;\n    \n    float rk = sin(r * 24.0 + iTime);\n    \n    rk += sin(r * 34.0) * 0.5;\n    rk += sin(r * 4.0) * 0.25;\n    rk += sin(r * 54.0) * 0.25;\n    \n    // basical radius is 0.5\n    rk = 0.5 - rk * 0.1 + 0.2;\n    \n    cyle += 1e-2/abs(rk - l);\n    \n    vec3 col = vec3(cyle) * 0.5;\n    \n    col += net(coord) * 0.125;\n    \n    col += drawCoord(coord);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}