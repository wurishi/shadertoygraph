{"ver":"0.1","info":{"id":"NsfXz7","date":"1618685381","viewed":52,"name":"312_golubeva_v3v6","username":"Jullsss","description":"2 task","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPS = 0.0000001;\nconst vec3 CAMERA_POS = vec3(3.5, 2.5, -5.5);\n\nvec3 LIGHT1_POS = vec3(1, 0.25, 4);\nconst float LIGHT1_RADIUS = 0.6;\nconst vec3 LIGHT1_COLOR = vec3 (0.3, 1, 0.7);\n\nvec3 LIGHT2_POS = vec3(0, 1.8, -2.5);\nconst float LIGHT2_RADIUS = 0.2;\nconst vec3 LIGHT2_COLOR = vec3 (1, 0.7, 0.3);\n\nvec3 SPH_POS = vec3(0, 0.5, 0.0);\n\n// octahedron vertices\nconst vec3 downP = vec3(0, -0.9, 0);\nconst vec3 LeftP = vec3(0.9, 0.5, -0.9);\nconst vec3 RightP = vec3(-0.9, 0.5, -0.9);\nconst vec3 LeftP1 = vec3(0.9, 0.5, 0.9);\nconst vec3 RightP1 = vec3(-0.9, 0.5, 0.9);\nconst vec3 upP = vec3(0, 1.9, 0);\n\nvec3 randDir;\n\nfloat tracePlane (vec3 pos, vec3 dir, out vec3 normal) { \n    float t = (-1.25 - pos.y) / dir.y;\n    if ( t <= 0.0) {\n         return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0)\n        return INF;\n        \n    normal = vec3(0, 1, 0);\n        \n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-0.9 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -0.9) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 x0, vec3 x1, vec3 x2, out vec3 normal)\n{\n    vec3 edge1, edge2, h, s, q;\n    float a,f,u,v;\n    \n    edge1 = x1 - x0;\n    edge2 = x2 - x0;\n    \n    h = cross(dir, edge2);\n    a = dot(edge1, h);\n    \n    if (a > -EPS && a < EPS) {\n        return INF;\n    }\n    \n    f = 1.0/a;\n    s = pos - x0;\n    u = dot(f * s, h);\n    \n    if (u < 0.0 || u > 1.0) {\n        return INF;\n    }\n    \n    q = cross(s, edge1);\n    v = dot(f * dir, q);\n    \n    if (v < 0.0 || u + v > 1.0) {\n        return INF;\n    }\n    \n    float t = dot(f * edge2, q);\n    if (t > EPS) {\n        normal = normalize(cross(edge1, edge2));\n        if(dot(normal, dir) < 0.0) {\n            normal = -normal;\n        }\n        return t;\n    } else {\n        return INF;\n    }\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n     vec3 normal = vec3(0, 0, 0);\n     \n    float cylT = traceCylinder(pos, dir, normal);\n    if (cylT < dist) \n        return true;\n    float sphT = traceSphere(pos, dir, 0.7, normal);\n    if (sphT < dist) \n        return true;\n    float triT1 = traceTriangle(pos, dir, downP, LeftP, RightP, normal);\n    if (triT1 < dist)\n        return true;\n    float triT2 = traceTriangle(pos, dir, downP, LeftP, LeftP1, normal);\n    if (triT2 < dist)\n        return true;\n    float triT3 = traceTriangle(pos, dir, downP, RightP, RightP1, normal);\n    if (triT3 < dist)\n        return true;\n    float triT4 = traceTriangle(pos, dir, downP, LeftP1, RightP1, normal);\n    if (triT4 < dist)\n        return true;\n    float triT5 = traceTriangle(pos, dir, upP, LeftP, RightP, normal);\n    if (triT5 < dist)\n        return true;   \n    float triT6 = traceTriangle(pos, dir, upP, LeftP, LeftP1, normal);\n    if (triT6 < dist)\n        return true;\n    float triT7 = traceTriangle(pos, dir, upP, RightP, RightP1, normal);\n    if (triT7 < dist)\n        return true;\n    float triT8 = traceTriangle(pos, dir, upP, LeftP1, RightP1, normal);\n    if (triT8 < dist)\n        return true;\n        \n    return false;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 10.0f / distSq1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 20.0f / distSq2;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, bool b)\n{\n    if (dot(v, normal) < 0.0)\n        normal = - normal;\n    float cosA = dot(v, normal)/length(v)/length(normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - normal*cosA*length(v)/length(normal));\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        b = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return normalize(sinB * tang + cosB * normal);\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n#define OCTAVE_NUM 4\n\nvec3 random_perlin( vec3 p ) {\n    p = vec3(\n            dot(p,vec3(127.1,311.7,69.5)),\n            dot(p,vec3(269.5,183.3,132.7)), \n            dot(p,vec3(247.3,108.5,96.5)) \n            );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise_perlin (vec3 p) {\n    vec3 i = floor(p);\n    vec3 s = fract(p);\n\n    float a = dot(random_perlin(i),s);\n    float b = dot(random_perlin(i + vec3(1, 0, 0)),s - vec3(1, 0, 0));\n    float c = dot(random_perlin(i + vec3(0, 1, 0)),s - vec3(0, 1, 0));\n    float d = dot(random_perlin(i + vec3(0, 0, 1)),s - vec3(0, 0, 1));\n    float e = dot(random_perlin(i + vec3(1, 1, 0)),s - vec3(1, 1, 0));\n    float f = dot(random_perlin(i + vec3(1, 0, 1)),s - vec3(1, 0, 1));\n    float g = dot(random_perlin(i + vec3(0, 1, 1)),s - vec3(0, 1, 1));\n    float h = dot(random_perlin(i + vec3(1, 1, 1)),s - vec3(1, 1, 1));\n\n    vec3 u = smoothstep(0.,1.,s);\n\n    return mix(mix(mix( a, b, u.x),\n                mix( c, e, u.x), u.y),\n            mix(mix( d, f, u.x),\n                mix( g, h, u.x), u.y), u.z);\n}\n\nfloat fbm(vec3 p)\n{\n    float f = 0.0;\n    float a = 1.;\n    p = 2.0 * p;\n    for (int i = 0; i < OCTAVE_NUM; i++) {\n        f += a * noise_perlin(p);\n        p = 2.0 * p;\n        a /= 2.;\n    }\n    return f;\n}\n\nfloat domain_wraping( vec3 p )\n{\n    float v1 = fbm(p);\n    vec3 q = vec3(v1, v1, v1);\n    float v2 = fbm(p+q);\n    vec3 r = vec3(v2, v2, v2);\n    return fbm(p + r);\n}\n\nvec3 clamp01(vec3 c)\n{\n    return clamp(c, vec3(0.,0.,0.), vec3(0.3,0.7,1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y); \n    \n    vec2 uv2 = fragCoord.xy/iResolution.xy;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    const int WATER = 4;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    \n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    bool flag = false;\n    \n    LIGHT1_POS = LIGHT1_POS + randVals*0.1;\n    LIGHT2_POS = LIGHT2_POS + randVals*0.1;\n    SPH_POS = SPH_POS + randVals*0.1;\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane (curPos, curDir, planeNorm); \n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.25).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere (curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere (curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        // 1 side front down\n        vec3 TriagN1;\n        float TriagT1 = traceTriangle(curPos, curDir, downP, RightP, LeftP, TriagN1);\n        if (TriagT1 < t)\n        {\n            t = TriagT1;\n            normal = TriagN1;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n        }\n     \n        // 2 side back down\n        vec3 TriagN2;\n        float TriagT2 = traceTriangle(curPos, curDir, downP, LeftP1, RightP1, TriagN2);\n        if (TriagT2 < t) \n        {\n            t = TriagT2;\n            normal = TriagN2;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n        }\n        // 3 side left down\n        vec3 TriagN3;\n        float TriagT3 = traceTriangle(curPos, curDir, downP, LeftP, LeftP1, TriagN3);\n        if (TriagT3 < t) \n        {\n            t = TriagT3;\n            normal = TriagN3;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n        }\n        // 4 side right down\n        vec3 TriagN4;\n        float TriagT4 = traceTriangle(curPos, curDir, downP, RightP, RightP1, TriagN4);\n        if (TriagT4 < t) \n        {\n            t = TriagT4;\n            normal = TriagN4;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n        }\n        // 5 side front up\n        vec3 TriagN5;\n        float TriagT5 = traceTriangle(curPos, curDir, upP, RightP, LeftP, TriagN5);\n        if (TriagT5 < t) \n        {\n            t = TriagT5;\n            normal = TriagN5;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n            \n        }\n        // 6 side back up\n        vec3 TriagN6;\n        float TriagT6 = traceTriangle(curPos, curDir, LeftP1, upP, RightP1, TriagN6);\n        if (TriagT6 < t) \n        {\n            t = TriagT6;\n            normal = TriagN6;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        // 7 side left up\n        vec3 TriagN7;\n        float TriagT7 = traceTriangle(curPos, curDir, upP, LeftP1, LeftP, TriagN7);\n        if (TriagT7 < t) \n        {\n            t = TriagT7;\n            normal = TriagN7;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        // 8 side right up\n        vec3 TriagN8;\n        float TriagT8 = traceTriangle(curPos, curDir, upP, RightP, RightP1, TriagN8);\n        if (TriagT8 < t) \n        {\n            t = TriagT8;\n            normal = TriagN8;\n            if (randVals.x < GLASS_R*10.0) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3 (1, 1, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        vec3 sphNorm;\n        float sphT = traceSphere(curPos - SPH_POS, curDir, 0.7, sphNorm);\n        if (sphT < t) {\n            t = sphT;\n            normal = sphNorm;\n            materialType = WATER;\n        }\n        \n        \n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter, flag);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            } else if (materialType == WATER) {\n                float c1 = domain_wraping(vec3(3.5*uv2, 0.05));\n                vec3 c = vec3(c1*c1 + 0.1*c1, 0.5*c1, 2.5*c1*c1);\n                color = 25. * c*c;\n                fragColor = vec4(clamp01(color), 1.0 );\n                break;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}