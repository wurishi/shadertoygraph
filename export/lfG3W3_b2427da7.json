{"ver":"0.1","info":{"id":"lfG3W3","date":"1713342704","viewed":119,"name":"vger","username":"hashtagexo","description":"uhh rugandu no mori ne ubitegunda copipastus ominusus gusti musti forki. I think? My sanskrit is pretty rusty. ","likes":6,"published":1,"flags":1,"usePreview":0,"tags":["colorful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"rugandu no mori ne ubitegunda\" by nayk. https://shadertoy.com/view/Mcy3Dy\n// 2024-04-17 08:18:57\n\n#define R(p,a,r)mix(a*dot(p,a),p,-cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*2.3+vec3(0,23,21))*.5+.5)\n\n#define iterations 25\n#define formuparam 0.3\n\n#define volsteps 99\n#define stepsize 0.0001\n\n#define zoom   1.61\n#define tile   0.77\n#define speed  0.1\n\n#define brightness 0.0001\n#define darkmatter 0.73\n#define distfading 0.00001\n#define saturation 0.8\n\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*7.7))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s)/a*brightness-fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts-=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.2,1.);\t\n}\nfloat lovely_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed-.15;\nvec4 O=fragColor;\nvec2 C = fragCoord;\n\tO=vec4(0);\n    vec3 n1,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<78.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        n1=g*d;\n        n1.xy= vec2(length(n1.xy), dot(n1.y, n1.x));\n        n1.z+=iTime*0.5;\n        a=5.;\n        n1=mod(n1-a,a*2.)-a;\n        s=3.;\n        for(int i=0;i++<8;){\n            n1=.3-abs(n1);\n            \n            n1.x<n1.z?n1=n1.zyx:n1;\n            n1.z<n1.y?n1=n1.xzy:n1;\n            n1.x<n1.y?n1=n1.zxy:n1;\n            s*=e=1.69+sin(iTime*.1)*.01;\n            n1=abs(n1)*e-\n                vec3(\n                    2.+cos(iTime*.03+.5*cos(iTime*.3))*3.,\n                    70,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n         g+=e=length(n1.xyz)/s;\n    }\n\n\tvec3 from=vec3(0.3,0.0,0.54)*O.xyz;\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\n    fragColor+=O;\n     uv *= 2.0 * ( cos(iTime * 3.5) -3.02); // scale\n    float anim = sin(iTime * 8.0) * 0.001 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor+= vec4(lovely_star(uv, anim) * vec3(0.5,0.5,0.6)*0.051*mod(C.x,2.), 0.66);\n}\n","name":"Image","description":"","type":"image"}]}