{"ver":"0.1","info":{"id":"mscSDH","date":"1681520119","viewed":104,"name":"Gorplex Sound Eclipse","username":"gorplex","description":"Forked from https://www.shadertoy.com/view/ls3BDH\n\nAdding functionality to syncronize the rotation freq to the beat","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["visualization","beat","mic","virtualdj"],"hasliked":0,"parentid":"ls3BDH","parentname":"SoundEclipse rpm"},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// credit: https://www.shadertoy.com/view/4tGXzt\n\nvec4 getDataVals() { \n    return texelFetch(iChannel1, ivec2(0,0),0);\n}\n\n\n#define CIRCLE(p, r, uv) smoothstep(2./iResolution.y, 0., length((uv)-(p))-(r))\n\n//convert HSV to RGB\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat luma(vec3 color) {\n  return dot(color, vec3(0.299, 0.587, 0.114));\n}\n\nfloat getfrequency(float x) {\n\treturn texture(iChannel0, vec2(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE, 0.25)).x + 0.06;\n}\n\nfloat getfrequency_smooth(float x) {\n\tfloat index = floor(x * FREQ_RANGE) / FREQ_RANGE;\n    float next = floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE;\n\treturn mix(getfrequency(index), getfrequency(next), smoothstep(0.0, 1.0, fract(x * FREQ_RANGE)));\n}\n\nfloat getfrequency_blend(float x) {\n    return mix(getfrequency(x), getfrequency_smooth(x), 0.5);\n}\n\nvec3 doHalo(vec2 fragment, float radius) {\n\tfloat dist = length(fragment);\n\tfloat ring = 1.0 / abs(dist - radius);\n\t\n\tfloat b = dist < radius ? BRIGHTNESS * 0.3 : BRIGHTNESS;\n\t\n\tvec3 col = vec3(0.0);\n\t\n\tfloat angle = atan(fragment.x, fragment.y);\n\tcol += hsv2rgb( vec3( ( angle + iTime * 0.25 ) / (PI * 2.0), 1.0, 1.0 ) ) * ring * b;\n\t\n\tfloat frequency = max(getfrequency_blend(abs(angle / PI)) - 0.02, 0.0);\n\tcol *= frequency;\n\t\n\t// Black halo\n\tcol *= smoothstep(radius * 0.5, radius, dist);\n\t\n\treturn col;\n}\n\nvec3 doLine(vec2 fragment, float radius, float x) {\n\tvec3 col = hsv2rgb(vec3(x * 0.23 + iTime * 0.12, 1.0, 1.0));\n\t\n\tfloat freq = abs(fragment.x * 0.5);\n\t\n\tcol *= (1.0 / abs(fragment.y)) * BRIGHTNESS * getfrequency(freq);\t\n\tcol = col * smoothstep(radius, radius * 1.8, abs(fragment.x));\n\t\n\treturn col;\n}\n\nmat2 calcRot(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c,s,-s,c);\n}\n\nvoid doBasePeakComp(vec2 fragCoord) {\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 fragPos = fragCoord / iResolution.xy;\n\tfragPos = (fragPos - 0.5) * 2.0;\n    fragPos.x *= iResolution.x / iResolution.y;\n\t\n\tvec3 color = vec3(0.0134, 0.052, 0.1);\n\tcolor += doHalo(fragPos, RADIUS);\n\n    vec2 rot = calcRot(iTime * SPEED*getDataVals().z) *fragPos;\n\tcolor += doLine(rot, RADIUS, rot.x);\n\n\n    rot = calcRot(iTime * SPEED * getDataVals().z + 3.1415/6.) *fragPos;\n\tcolor += doLine(rot, RADIUS, rot.x);\n\t\n    \n    //vec2 testPos = vec2(getfrequency(1.));\n    //color += vec3(1.,0.,0.)*CIRCLE(fragPos, .001, fragPos);\n    \n\tcolor += max(luma(color) - 1.0, 0.0);\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define CLOSE_TO_MAX 0.90\n#define FREQ_ROLLING_AVG_STABILITY .99\n\nfloat getfrequency(float x) {\n\treturn texture(iChannel0, vec2(floor(x * FREQ_RANGE + 1.0) / FREQ_RANGE, 0.25)).x + 0.06;\n}\n\nvec4 getDataVals() { \n    return texelFetch(iChannel1, ivec2(0,0),0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,0.0,0.0);\n    if(fragCoord.x <1. && fragCoord.y <1.) {\n        vec4 data = getDataVals();\n        float maxVal = data.x; \n        float lastMaxTime = data.y;\n        float avgFreq = data.z;\n        \n        //init\n        if(iTime <0.5){\n            maxVal = 0.0; \n            lastMaxTime = 0.0;\n            avgFreq = 0.0;\n        }\n        \n        //check if near peak and update timing\n        if (getfrequency(0.) > maxVal * CLOSE_TO_MAX) {\n            //check for new peak and update\n            if(getfrequency(0.) > maxVal) {\n                maxVal = getfrequency(0.);\n            }\n            avgFreq = FREQ_ROLLING_AVG_STABILITY*avgFreq + (1.0-FREQ_ROLLING_AVG_STABILITY)/(iTime-lastMaxTime);\n            lastMaxTime = iTime;\n        }\n        \n        fragColor = vec4(maxVal, lastMaxTime, avgFreq, 0.0);\n    }\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nconst float FREQ_RANGE = 64.0;\nconst float PI = 3.1415;\nconst float RADIUS = 0.6;\nconst float BRIGHTNESS = 0.2;\n//const float SPEED = 2.9;\nconst float SPEED = 0.01;\n","name":"Common","description":"","type":"common"}]}