{"ver":"0.1","info":{"id":"wsyfzR","date":"1606399684","viewed":47,"name":"Simple and rubbish Mandelbrot","username":"portponky","description":"A very simple Mandelbrot implementation. Not particularly clever.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Not mine\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Calculate view\n    vec2 offset = vec2((0.5 * iResolution.x)/iResolution.y, 0.5);\n    vec2 uv = fragCoord/iResolution.yy - offset;\n    float zoom = 2.0 + cos(iTime * 0.2);\n    vec2 init = zoom * uv;\n    //init = 0.00005 * uv - vec2(0.47966, 0.600125);\n\n    \n    // Iterate mandelbrot formula\n    vec3 col = vec3(0.0);\n    const float iterations = 100.0;\n    vec2 z = init, z2 = z * z;\n    \n    // Julia\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    if (iMouse.z > 0.0)\n      init = 2.0 * mouse - 1.0;\n        \n    float n;\n    for (n = 0.0; n < iterations; n += 1.0)\n    {\n        z = vec2(z2.x-z2.y, 2.0*z.x*z.y) + init;\n        z2 = z * z;\n        if (z2.x + z2.y > 4.0)\n        {\n            col = hsl2rgb(vec3(fract(0.11 * iTime + n * 0.03), 0.62, 0.71));\n            break;\n        }\n    }\n   \t    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}