{"ver":"0.1","info":{"id":"7tK3zh","date":"1637187861","viewed":81,"name":"Ray Marching with a sphere","username":"mvilay02","description":"cs44n baby","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BASIC RAY-MARCHING CLASS DEMO!\n//\n// Numerous methods borrowed from iq articles:\n//   https://iquilezles.org/www/index.htm\n// \n// 3D signed distance functions:\n//   https://iquilezles.org/articles/distfunctions\n// \n// Shadows:\n//   https://iquilezles.org/articles/rmshadows\n// \n// Ray-marching SDFs:\n//   https://iquilezles.org/articles/raymarchingdf\n// \n// Normals for SDFs:\n//   https://iquilezles.org/articles/normalsSDF\n// subtracts d1 from d2\n\n//lighting from spsherk_ https://www.shadertoy.com/view/Wlc3WN\n//based on https://www.shadertoy.com/view/XtGfWG\n#define MAX_STEPS 200\n#define MAX_DIST 100.\n#define MIN_DIST .0001\n\n\nfloat sdfSphere(vec3 p, vec3 c, float r) {\n        return distance(p, c) - r + texture(iChannel2, p.xy).r / ((sin(iTime) + 1.) * 100.);\n\n}\n//gets distance from point p to edge of a sphere\nfloat getDist(vec3 p) {\n    return sdfSphere(p, vec3(0.), 1.);\n}\n\n//normalizing the vector by getting an epsilon and subtracting it from our \n//2d vector and normalizing the values into a 3d vector\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(.0025, -.0025); \n    return normalize(vec3(getDist(p - e.xyy), getDist(p + e.yxy), getDist(p + e.yyx)));\n}\nfloat rayMarch(vec3 rayOrigin, vec3 rayDist) {\n    float dist = 0.;\n    \n    //using iteration for our ray marching loop \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 itPos = rayOrigin + rayDist * dist;\n        float itDist = getDist(itPos);\n        \n        dist += itDist;\n        \n        //once we've reached our desired \"MAX_DIST\", then we break the loop\n        if (dist > MAX_DIST || dist < MIN_DIST) {\n            break;\n        }\n    }\n    return dist;\n}\n\n//using dot product to create lighting \nfloat getLight(vec3 p)\n{\n    vec3 lightPos = vec3(sin(iTime * 4.), 3., -3.);\n    vec3 lightDirection = normalize(p - lightPos);\n    \n    return -dot(getNormal(p), lightDirection);    \n    //float d = -dot(getNormal(p), lightDirection);\n\t//float col =   1. / (5.5* d + 1.5*d);\n\t//float col = .1*exp(1./(5.5*d + 3.*d));\n    //return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates \n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y; // w/h are equal\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    \n    float focalDist = .7;\n    vec3 rayOrigin = vec3(-1,0.,-2);\n    vec3 rayOrigin2 = vec3(1,0.,-2);\n    vec3 rayDist = vec3(uv.x, uv.y, focalDist);\n    \n    float dist = rayMarch(rayOrigin, rayDist);\n    float dist2 = rayMarch(rayOrigin2, rayDist);\n    \n    if (dist < MAX_DIST) {\n        //point to edge of a sphere (SDF)\n        vec3 pEdge = rayOrigin + rayDist * dist;\n        col = vec3(2., 0.4, 0.3);\n        col *= vec3(getLight(pEdge));\n        \n    }\n    \n    if (dist2 < MAX_DIST) {\n        vec3 pEdge = rayOrigin2 + rayDist * dist2;\n        col = vec3(2., 0.4, 0.3);\n        col *= vec3(getLight(pEdge));\n        \n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}