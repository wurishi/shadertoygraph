{"ver":"0.1","info":{"id":"Wl3fWH","date":"1612655674","viewed":98,"name":"Fractal Brownian Motion - vsion","username":"vsion","description":"Fractal Brownian Motion\n\nUse the mouse to distort the pattern","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Interactive FBM pattern\n// Created by vsion - 2021\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Inspired by https://www.shadertoy.com/view/lsl3RH\n\n\n#define numOctaves (7)\n#define PI 3.1415\n\nfloat noise( in vec2 p) {\n    return sin(p.x) * sin(p.y);\n}\n\nfloat fbm( in vec2 x, in float H )\n{    \n    float G = exp2(-H);\n    float f = 1.0;\n    float a = 1.0;\n    float t = 0.0;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        t += a*noise(f*x);\n        f *= 2.0;\n        a *= G;\n    }\n    return t;\n}\n\nfloat pattern( in vec2 p, out vec2 q, out vec2 r )\n{\n    float H = 1. + .1 * cos(iTime);\n    q.x = fbm( p + vec2(0.0,0.0), H );\n    q.y = fbm( p + vec2(5.2,1.3), H );\n\n    r.x = fbm( p + 4.0*q + vec2(1.7 + .08 * sin(.25 * iTime),9.2 + .08 * cos(.25 * iTime)), H );\n    r.y = fbm( p + 4.0*q + vec2(8.3 + .3 * sin(2. * iTime),2.8 + .1 * cos(2. * iTime)), H );\n\n    return fbm( p + 4.0*r, 1.5 );\n}\n\nvec2 rotate( in vec2 p, in float alpha) {\n    return vec2(cos(alpha) * p.x + sin(alpha) * p.y, - sin(alpha) * p.x + cos(alpha) * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized centered pixel coordinates\n    vec2 p = .5 * (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    // Mouse position\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    // Mouse tracked blob\n    float m = smoothstep(0., .3, length((iMouse.xy - fragCoord) / iResolution.y));\n    m += 1. - smoothstep(0., .3, length((iMouse.xy - fragCoord) / iResolution.y)); \n    m += smoothstep(0., .5, length((iMouse.xy - fragCoord) / iResolution.y));\n    p = p * vec2(m);\n\n    // Rotate input vector\n    float rot_freq = .025; // Hz\n    float alpha = 2. * PI * rot_freq * iTime;\n    p = rotate(p, alpha);\n\n    // Fractal Brownian Motion\n    vec2 q, r;\n    float scale = .25;\n    float fbm_noise = pattern(p * scale , q, r);\n    \n    fbm_noise = smoothstep(-.5, .9, fbm_noise);\n    fbm_noise = (1.0-abs(fbm_noise * 2.0 - 1.0));\n    \n    \n    // Diamond mask\n    // vec2 sym = abs((uv - .5) * (1. + .2 * cos(iTime)));\n    // float mask = smoothstep(0.,.1, sin(25. * (sym.x + sym.y * cos(iTime))));\n    // mask = clamp(mask, 0., 1.);\n    \n    // Colorize\n    vec3 col = vec3(fbm_noise);\n    vec3 blue = vec3(.4, .6, .7) * .8;\n    vec3 red = vec3(.9, .2, .35);\n    \n    col = mix(blue, red, .8 * fbm_noise);\n    col = mix(col, red, r.x);\n    col = mix(col, red, .1 * length(q));\n    \n    // Invert center circle\n    col = mix(col, 1. - col, smoothstep(.6, .65, length(p)));\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}