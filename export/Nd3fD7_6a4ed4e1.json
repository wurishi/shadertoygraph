{"ver":"0.1","info":{"id":"Nd3fD7","date":"1656605522","viewed":70,"name":"a simple shader","username":"YuAn0","description":"a simple shader whihc the color changed through the time","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\n\nfloat sdSphere(vec3 p, float r )\n{\n  return length(p) - r;\n}\n\nfloat sdScene(vec3 p) {\n  return sdSphere(p, 1.);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdScene(p);\n    depth += d;\n    if (d < PRECISION || depth > MAX_DIST) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy) +\n      e.yyx * sdScene(p + e.yyx) +\n      e.yxy * sdScene(p + e.yxy) +\n      e.xxx * sdScene(p + e.xxx));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos); // camera direction\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd)); // camera right\n\tvec3 cu = normalize(cross(cd, cr)); // camera up\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvec3 phong(vec3 lightDir, vec3 normal, vec3 rd) {\n  // ambient\n  float k_a = 0.6;\n  vec3 i_a = vec3(0., 1, 2);// surface color\n  i_a = 0.5+0.5*cos(iTime+i_a); // random effect\n  vec3 ambient = k_a * i_a;\n\n  // diffuse\n  float k_d = 0.5;\n  float dotLN = clamp(dot(lightDir, normal), 0., 1.);\n  vec3 i_d = vec3(0, 0.7, 1.3);//set diffuse color\n  vec3 diffuse = k_d * dotLN * i_d;\n\n  // specular\n  float k_s = 0.6;\n  float dotRV = clamp(dot(reflect(lightDir, normal), -rd), 0., 1.);\n  vec3 i_s = vec3(1);\n  float alpha = 10.;\n  vec3 specular = k_s * pow(dotRV, alpha) * i_s;\n\n  return ambient + diffuse + specular;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec3 backgroundColor = vec3(0.835, 1, 1);\n  vec3 col = vec3(0);\n\n  vec3 lp = vec3(0); // lookat point (aka camera target)\n  vec3 ro = vec3(0, 0, 3);\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  float d = rayMarch(ro, rd);\n  \n  if (d > MAX_DIST) {\n    col = backgroundColor;\n  } else {\n      vec3 p = ro + rd * d; // point on surface found by ray marching\n      vec3 normal = calcNormal(p); // surface normal\n\n      // light #1\n      vec3 lightPosition1 = vec3(-4, -3, -2);\n      vec3 lightDirection1 = normalize(lightPosition1 - p);\n      float lightIntensity1 = 0.6;\n      \n      // light #2\n      //vec3 lightPosition2 = vec3(1, 1, 1);\n     // vec3 lightDirection2 = normalize(lightPosition2 - p);\n     //float lightIntensity2 = 0.7;\n\n      // final sphere color\n      col = lightIntensity1 * phong(lightDirection1, normal, rd);\n      //col += lightIntensity2 * phong(lightDirection2, normal , rd);\n  }\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}