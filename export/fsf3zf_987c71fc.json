{"ver":"0.1","info":{"id":"fsf3zf","date":"1616349103","viewed":95,"name":"Day 2 WillstallChallenge","username":"ja6kjak","description":"I followed a The Art of Code tutorial! https://www.youtube.com/watch?v=PGtv-dBi2wE&list=PLGmrMu-IwbgtMxMiV3x4IrHPlPmg7FD-P&index=4","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","beginner","willstallchallenge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n\nfloat GetDist(vec3 p) {\n    // sphere    position  radius\n    vec4 s = vec4(0, 1, 6, 1);\n    vec4 s2 = vec4(3,1,6,1);\n    vec4 s3 = vec4(-3, 1, 6,1);\n    float sphereDist = length(p-s.xyz)-s.w;\n    float sphereDist2 = length(p-s2.xyz) -s2.w;\n    float sphereDist3 = length(p-s3.xyz) -s3.w; \n    float planeDist = p.y;\n    \n    // is there a better way to do this?\n    float d = min(min(sphereDist, min(sphereDist2, sphereDist3)), planeDist);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    // distance from origin\n    float dO=0.;\n    \n    // Ray marching loop\n    for(int i=0; i<MAX_STEPS; i++) {\n        // start at ray origin then march in certain distance in ray direction\n        vec3 p = ro + rd *dO;\n        float dS = GetDist(p);\n        dO += dS;\n        //HIT!!\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    return dO;\n}\n\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n         GetDist(p-e.xyy),\n         GetDist(p-e.yxy),\n         GetDist(p-e.yyx));\n         \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0. , 1.);\n    //shadows\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    // ray origin\n    vec3 ro = vec3(0, 1, 0);\n    // ray direction\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n   \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    //difuse lighting\n    float dif = GetLight(p);\n    vec3 col = vec3(dif, .10, .5);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}