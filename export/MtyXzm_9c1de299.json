{"ver":"0.1","info":{"id":"MtyXzm","date":"1483568379","viewed":127,"name":"Char to plane ","username":"gigatron","description":"try to char map in perspective.. with minimum ray marching for another Demo projet !","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","ray","map","char"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/// just try to map char to plane   !!\n// --- access to the image of ascii code c // from Fabrice ;\n#define C(c) U.x-=.5; T+= U.x<.0||U.x>1.||U.y<0.||U.y>1. ?vec4(0): texture( iChannel0, U/14.5 + fract( floor(vec2(c, 15.99999-float(c/16))) / 16.0))\n\n\nfloat l1(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);\n     C(3);C(3);C(3);C(3);\n \n    return length(T.yz)==0. ? 0. : T.x;\n}\n\nfloat l2(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(32);C(32);C(32);C(32);C(32);;C(32);C(32);C(32);C(32);C(32);C(32);\n     C(32);C(32);C(3);C(3);  \n \n    return length(T.yz)==0. ? 0. : T.x;\n}\nfloat l3(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(71);C(82);C(69);C(69);C(84);;C(73);C(78);C(71);C(83);C(32);C(84);\n     C(79);C(58);C(3);C(3);  \n \n    return length(T.yz)==0. ? 0. : T.x;\n}\n\nfloat l4(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(32);C(32);C(32);C(32);C(32);;C(32);C(32);C(32);C(32);C(32);C(32);\n     C(32);C(32);C(3);C(3);  \n \n    return length(T.yz)==0. ? 0. : T.x;\n}\nfloat l5(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(32);C(32);C(65);C(76);C(76);;C(32);C(77);C(46);C(65);C(46);C(68);\n     C(32);C(32);C(3);C(3);  \n \n    return length(T.yz)==0. ? 0. : T.x;\n}\n\n//065 076 076 032 077 046 065 046 068\n\n\nfloat l6(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);\n     C(32);C(32);C(3);C(3);\n \n    return length(T.yz)==0. ? 0. : T.x;\n}\nfloat l7(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     \n    C(3);C(3);C(32);C(32);C(45);C(67);C(79);C(78);C(84);C(65);C(67);C(84);C(83);\n     C(45);C(32);C(3);C(3); \n \n    return length(T.yz)==0. ? 0. : T.x;\n}\nfloat l8(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);C(32);\n     C(32);C(32);C(3);C(3);\n \n    return length(T.yz)==0. ? 0. : T.x;\n}\n\n\n\nfloat l9(vec2 U) { // to alter in the icon with the alter message\n    vec4 T = vec4(0); \n     C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);C(3);\n     C(3);C(3);C(3);C(3); \n \n    return length(T.yz)==0. ? 0. : T.x;\n}\n\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nfloat intersectPlane(vec3 pos, vec3 dir)\n{\n       \n    \n    return -pos.y / dir.y + (pos.x / dir.y);\n}\n\nfloat intersectSphere(vec3 pos, vec3 dir)\n{\n\t// solve pos + k*dir = unit sphere surface\n\t// dot(pos + k*dir, pos + k*dir) = 1\n\t\n\t// quadratic coefficients\n\tfloat a = dot(dir, dir);\n\tfloat b = 2.0 * dot(pos, dir);\n\tfloat c = dot(pos, pos) - 1.0;\n\tfloat discriminant = b * b - 4.0 * a * c;\n\t\n\t// only the positive root is useful\n\treturn (-b - sqrt(discriminant)) / (2.0 * a);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   \n    \n    float t=mod(iTime*8.0,85.0);\n    float t1=iTime;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy*2.-1.;\n\t\t\t\n\t\tuv.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 pos = vec3(0.5-sin(t1/2.),0.8-0.2*sin(t1)*3.0,-2.0);\n    vec3 dir =normalize(vec3(uv,1.0));\n    // one shot ! \n  //  float d = min(intersectPlane(pos, dir), intersectSphere(pos-vec3(sin(t1),-0.5,0.0+sin(t1*0.3)), dir));\n   \n    float d =  intersectPlane(pos, dir) ;\n    \n    \n    pos += d * dir;\n \n    float xx=-5.0;\n       \n          \n       uv.xy = pos.xz;\n       uv *=2.0;    \n    \n         \n                \n    float a = l1(uv-vec2(xx,1.8));  \n    \n       a += l2(uv-vec2(xx,1.25));\n       a += l3(uv-vec2(xx,0.7));\n       a += l4(uv-vec2(xx,0.15));\n       a += l5(uv-vec2(xx,-.4));\n       a += l6(uv-vec2(xx,-0.95));\n       a += l7(uv-vec2(xx,-1.5));\n       a += l8(uv-vec2(xx,-2.05));\n       a += l9(uv-vec2(xx,-2.6));\n   \n       float final =a; \n    vec3 color = vec3(1.-pos.xxz * 0.5) *d*final;\n  \n       fragColor =vec4(color,1.0);\n// color section !   \n         \n   vec2 uvc = fragCoord.xy / iResolution.xy; \n    \n   float clr =2.0*uvc.y-(iTime/2.0); \n   vec3 hsvColor = hsv2rgb_smooth(vec3(clr, 1.0, 1.0)); \n       \n   fragColor *=vec4(hsvColor, 1.0);\n     \n    \n}","name":"Image","description":"","type":"image"}]}