{"ver":"0.1","info":{"id":"Ns2BWt","date":"1647539390","viewed":1036,"name":"Exawatt Sunburn","username":"msm01","description":"Just a quick sketch. It could be the final scene of the best space movie ever. Or a future Shoot Them Up. We'll never know !\nComes in 3 different flavors : \"Apocalypse selon Synthwave\", \"Chlorine Planet\", and \"Twilight Zone : Lost Episode\".\nEnjoy.","likes":65,"published":1,"flags":64,"usePreview":0,"tags":["2d","scifi","movie","starship"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XllXWf","filepath":"https://soundcloud.com/skaven252/mauler-healer-fighter-squealer","previewfilepath":"https://soundcloud.com/skaven252/mauler-healer-fighter-squealer","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Now the problem, when you fire an exawatt laser gun in the general direction\n// of another ship, is that you don't simply focus the heat of a thousand hells\n// on a small target to make it die a painful death ! No. In fact, no matter how\n// efficient your beam is, you're still somehow bleeding at least a few terawatts\n// of 'residual light' randomly into the environment.\n// To the uneducated eye, the word 'residual' could make it seem like a detail.\n// Let me assure you IT IS NOT !\"\n// \"Dogfighting in 3022\", by Sam Launch, callsign : \"Red Eye of Sauron\"\n// 25th Edition, 3021\n// Part 1 : Tactical Lasers â€” Chapter 1 : Secondary Reflections\n\n// (somewhat serious) Forewords :\n// Just trying to get really fluent with basic 2D functions.\n// I think I'm getting there, although there's still room for progress.\n// I have more 2D scenes to come... :)\n// Sorry if the code is lame or just plain wrong, or lacks logic.\n// I intend to mix art and science, and will surely fail at both sometimes.\n\n// Use this code as you wish, just try to give proper credit when so.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n// Music is \"Mauler, Healer, Fighter, Squealer\" by Skaven\n// This musician is really great, give him a chance !\n// https://soundcloud.com/skaven252/mauler-healer-fighter-squealer\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n// General Stuff\n\nmat2 r2d( float a ){ float c = cos(a), s = sin(a); return mat2( c, s, -s, c ); }\n\nvec4 over(in vec4 a, in vec4 b){ return a + b*(1.0-a.w); }\n\nfloat noise(vec2 st) { return fract( sin( dot( st.xy, vec2(12.9898,78.233)))*43758.5453123 ); }\n\n// Basic Geometry Functions.\n\nfloat sdCircle(in vec2 p, float radius, vec2 pos, float prec)\n{\n      return smoothstep(0.0,prec,radius - length(pos-p));\n}\n\n// Classic from Iq (thanks !)\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n      vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n      vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n      vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n      vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n      vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n      float s = sign( e0.x*e2.y - e0.y*e2.x );\n      vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                       vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                       vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n      return -sqrt(d.x)*sign(d.y);\n}\n\n// Nice function from... Woops, forgot !\n\nfloat metaDiamond(vec2 p, vec2 pixel, float r, float s)\n{\n      vec2 d = abs(r2d(s*0.1*iTime)*(p-pixel));\n      return r / (d.x + d.y);\n}\n\n// Noise Please\n\nfloat fbm(in vec2 v_p)\n{\n      float VarX1 = floor(v_p.x );\n      float VarX2 = floor(v_p.x + 1.0);\n      float VarD0 = fract(v_p.x);\n      return mix(noise(vec2(VarX1)),noise(vec2(VarX2)),smoothstep(0.0,1.0,VarD0));\n}\n\n// 2D Tunnel Effect (...ish)\n\nvec4 drawTunnel(in vec2 p, vec4 CS)\n{\n     float angle = atan(p.y/p.x);\n     float dist = length(p);\n     vec4 Tunnel;\n     Tunnel = CS*texture(iChannel1,vec2(0.02*(1.0/dist) + 0.5*iTime,angle/3.14159));\n     Tunnel *= smoothstep(0.0,1.0,length(p));\n     return Tunnel;\n}\n\n// Set-Up A Nice 2D Starfield...\n\nfloat drawStars(in vec2 v_p)\n{\n      float Disp_Star = 0.000;\n      float Buff_Star = 0.000;\n      float PosX_Star = 0.000;\n      float PosY_Star = 0.000;\n      float Dist_Star = 0.000;\n      float Magn_Star = 0.000;\n\n      for( int j = 0; j < 100 ; j++ )\n      {\n           PosX_Star  = mod((3.0*noise(vec2(j))-1.5),3.0) - 1.5;\n           PosY_Star  = 2.0*noise(vec2(j + 176));\n           Dist_Star  = length(v_p - vec2(PosX_Star,PosY_Star));\n           Magn_Star  = 0.000025*noise(vec2(j + 4));\n           if( length(vec2(PosX_Star,PosY_Star) - vec2( 0.7, 0.6)) > 0.25 &&\n               length(vec2(PosX_Star,PosY_Star) - vec2(0.0,-0.5)) > 0.1 )\n           {\n               if( mod(float(j),10.0) < 9.0 )\n               {\n                   Buff_Star += Magn_Star*pow(Dist_Star,-1.5);\n               }else{\n                   Buff_Star += metaDiamond(v_p,vec2(PosX_Star,PosY_Star),0.0025,0.0);\n               };\n           };\n      };\n      return Buff_Star;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec2 p = vec2( (iResolution.x/iResolution.y)\n                  * (fragCoord.x - iResolution.x/2.0)\n                  / iResolution.x,\n                    fragCoord.y / iResolution.y);\n\n     // Random Zoom make for dramatic camera moves ...maybe.\n     p *= (1.1 - 0.5*fbm(vec2(0.1*iTime)));\n\n     // Get mouse position to make even more dramatic USER-DEFINED camera angles ! /s\n     float TiltX = -0.001*(iMouse.x - iResolution.x/2.0);\n     float AltiY =  0.001*(iMouse.y - iResolution.y/2.0);\n     \n     // Propagate Those User Settings to the engine !\n     p += vec2(0.0,AltiY);\n     p = r2d(-TiltX)*p;\n\n     // In the beginning, there was \"nothing\".\n     vec4 col = vec4(0.0);\n\n     // \"Nothing\" was good. So we saved it because we already knew we would screw up !\n     vec2 p_save = p;\n     \n     // Someone then said \"Let there be light !\"\n     col += drawStars(p);\n\n     // Aaaaaaand we picked the wrong color scheme.\n     vec4 ColorScheme = vec4( 0.40 + 0.40*sin(0.25*iTime),\n                              0.28 + 0.28*sin(0.40*iTime),\n                              0.15 + 0.15*sin(0.30*iTime),\n                              1.00);\n\n     // Let's draw a star. Big, fat, round, trembling like jelly on the edge...\n     col  = over(vec4(1.0,0.5,0.2,1.0)*sdCircle(p,0.2 + 0.0025*sin(100.0*p.y + 2.0*iTime),vec2(0.0,0.5),0.1),col);\n     // Let's give her a friendly blue star juuuuuuust on the verge of going blackhole.\n     col += over(vec4(0.0,1.0,0.0,1.0)*sdCircle(p,0.05,vec2(-0.5,0.55),0.05),col);\n     // Make the blue extra-pretty with some diamond make-up.\n     col += vec4(0.1,0.2,0.9,1.0)*metaDiamond(p,vec2(-0.5,0.55),0.1, 0.0);\n     // Add another star, another color.\n     col += vec4(0.4,0.5,0.2,1.0)*metaDiamond(p,vec2( 0.15,0.75),0.05, 0.0);\n\n     // Let's draw a Gas Giant !\n     vec4 GiantPlanet = vec4(0.0);\n     if( p.y > (0.05*fbm(2.5*p) - 0.4))\n     {\n         p += vec2(-0.7,-0.6);\n         p = r2d( 2.7)*p;\n         // The Giant...\n         GiantPlanet += 0.6*sdCircle(p,0.25,vec2(0.0,0.0),0.01)*texture(iChannel1,vec2(0.005*p.x + 0.001*iTime,0.5*p.y));\n         // Let's bool-diff the terminator.\n         GiantPlanet -= sdCircle(p,0.25,vec2(-0.025, 0.0),0.05)*smoothstep(0.008,0.0,length(p)-0.242);\n         p = r2d(-2.7)*p;\n         p += vec2( 0.7, 0.6);\n     };\n     col = over(0.3*GiantPlanet,col);\n\n     // Let's make a quick sky by stretching a texture just right.\n     vec4 Sky_Value = 0.2*vec4(texture(iChannel0,vec2( 0.01*(p.x)/((0.40-p.y)),0.05*sin(.01/(0.40-p.y) - 0.2*iTime ))));\n     col += 3.0*vec4(Sky_Value.xyz,1.0);\n\n     // Let's make a ground that goes fast, using the same ad-hoc method.\n     if( p.y < 0.4 )\n     {\n         vec4 Ground_Value = vec4(texture(iChannel2,vec2( 0.10*p.x/(0.40-p.y),0.19*sin(.1/(0.40-p.y) + 8.0*iTime))) );\n         col = vec4(0.7,0.4,0.4,1.0)*over(vec4(Ground_Value.xxx,1.0),col);\n     }else{\n         // Let's make some mountains above the horizon. They won't move but nobody will notice since\n         // the ships only go forward and draw all the attention ! Plus you can easily justify their\n         // stillness if you have to : the two ships are stuck on a 4D topological threadmill.\n         // There. Done. Hard Science, man ! :D\n         col = over(vec4(0.5,0.2,0.2,1.0)*(1.0-smoothstep(0.0,0.01,p.y - 0.05*fbm(2.5*p) - 0.4))*texture(iChannel2,4.0*p),col);\n     };\n\n     // Let's smooth colors around the horizon to make the landscape uniform...\n     col += vec4(0.4,0.70,0.7,1.0)*(1.0-smoothstep(0.0,0.5,abs(p.y - 0.4)));\n\n     // First Ship : the circular-shaped far-one that tries to escape.\n     p_save = p;\n     p += vec2(0.0, -0.41 + 0.01*sin(iTime));\n     p = r2d(1.14159*fbm(vec2(0.2*iTime + 5.0))*sin(0.8*iTime))*p;\n     p.x = abs(p.x);\n     p *= 1.5;\n     col -= 0.5*smoothstep(0.0005,0.0,sdTriangle(p,vec2(0.0,0.0),vec2( 0.025,-0.02),vec2( 0.0, 0.001)));\n     col -= 0.5*smoothstep(0.0005,0.0,sdTriangle(p,vec2(0.0,0.0),vec2( 0.0, 0.03),vec2( 0.001, 0.0)));\n     col -= sdCircle(p,0.005,vec2(0.0,0.0),0.0001);\n     if(abs(length(p) - 0.015) < 0.0005 ) col -= sdCircle(p,0.04,vec2(0.0,0.0),0.0001);\n     p /= 1.5;\n     // Bubble Shield activate when ship targeted by dual exawatt laser.\n     if( fbm(vec2(1.0*iTime)) > 0.7){ col -= 2.0*sdCircle(p,0.05,vec2(0.0,0.0),0.1); };\n     // Small and very advanced propulsor because the bad guys always have the best tech.\n     col += vec4(0.99,0.3,0.1,1.0)*metaDiamond(p,vec2(0.0,0.0),0.01, 40.0);\n     p = r2d(-1.14159*fbm(vec2(0.2*iTime + 5.0))*sin(0.8*iTime))*p;\n     p += vec2(0.0,  0.41 - 0.01*sin(iTime));\n     p = p_save;\n     \n     // Second Ship : the white one with dual exawatt laser and variable winglets.\n     p.y += -0.4;\n     p   *= 1.0 + 0.5*(fbm(vec2(0.1*iTime)));\n     \n     p    = r2d(3.14159*fbm(vec2(0.4*iTime))*sin(0.5*iTime))*p;\n     p.y += 0.4;\n     p.x  = abs(p.x);\n\n     col = over(smoothstep(0.0050,0.0,vec4(sdTriangle(p,vec2(0.0,-0.060),vec2(0.05,-0.05),vec2(0.00, 0.00)))),col);\n     col = over(smoothstep(0.0015,0.0,vec4(sdTriangle(p,vec2(0.0,-0.040),vec2(0.00,-0.03),vec2(0.08,-0.03 - 0.030*fbm(vec2(0.4*iTime)))))),col);\n     col = over(smoothstep(0.0015,0.0,vec4(sdTriangle(p,vec2(0.0,-0.005),vec2(0.00,-0.01),vec2(0.03,-0.01)))),col);\n     if( fbm(vec2(1.0*iTime)) > 0.7) // Erratic firing pattern...\n     {\n         // Laser Beam\n         col += 1.0*over( 1.0*abs(sin(50.0*p.y - 1000.0*iTime))*smoothstep(0.001,0.0,vec4(sdTriangle(p,vec2( 0.008,-0.01),vec2( 0.002,-0.01),vec2(0.0, 0.40)))),col);\n     };\n     col -= vec4(0.9)*smoothstep(0.005,0.0,sdTriangle(p,vec2(0.0,-0.059),vec2(0.049,-0.05),vec2(0.0,-0.041)));\n     col += vec4(1.0,0.0,0.0,1.0)*sdCircle(p,0.005,vec2(0.02,-0.05),0.001);\n     col += vec4(0.99,0.3,0.1,1.0)*metaDiamond(p,vec2(0.02,-0.05),0.05 + 0.002*sin(100.0*iTime), 10.0);\n     // Wake of the ship, totally made-up from a parabola and a scrolling texture\n     col += 2.5*smoothstep(0.0,0.03,0.5*p.x*p.x)*smoothstep(0.1,0.0,p.y - (-10.0*p.x*p.x - 0.10))*texture(iChannel0,0.10*vec2(p.x,p.y- (-10.0*p.x*p.x - 0.10)) + vec2(0.0,1.5*iTime));\n\n     p = p_save;\n\n     // When the laser hits the target, light diffusion by the bubble shield\n     // creates noxious clouds and fumes in the wake, like a beautiful but very\n     // lethal tunnel-effect, or plane contrail...\n     if( fbm(vec2(1.0*iTime)) > 0.7)\n     { \n         p += vec2(0.0, -0.4);\n         col -= 1.7*drawTunnel(p,ColorScheme);\n     };\n\n     // Let's paint everything (color calibration)\n     if( iTime < 102.55 )\n     { \n         // \"Apocalypse selon Synthwave\"\n         col = vec4(0.7,0.50,0.50,1.0)*col;\n     }else{\n         if( iTime < 102.55*2.0)\n         {\n             // \"Chlorine Planet\"\n             col = vec4(0.3,0.50,0.30,1.0)*col;\n         }else{\n             // \"Twilight Zone : Lost Episode\"\n             col = 0.25*col.xxxx;\n         };\n     };\n\n     // POWER UP !\n     fragColor = col;\n}","name":"Image","description":"","type":"image"}]}