{"ver":"0.1","info":{"id":"fslfR4","date":"1644553942","viewed":56,"name":"值噪声","username":"alex2022","description":"左右拖动可以查看不同的效果，左侧为离散噪声，右侧为值噪声。","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return a*(1.0 - u.x) * (1.0 - u.y)\n    \t\t+ b * u.x * (1.0 - u.y)\n            + c * (1.0 - u.x) * u.y\n            + d * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Scale the coordinate system to see\n    // some noise in action\n    vec2 pos = vec2(uv*10.0);\n    \n    // Use the noise function\n    float n = 0.0;\n    \n    if (fragCoord.x > iMouse.x) {\n        n = noise(pos);\n    } else {\n        n = random(floor(pos));\n    }\n    \n    n *= smoothstep( 0.0, 0.005, abs((fragCoord.x - iMouse.x) / iResolution.x) );\n\n    // Output to screen\n    fragColor = vec4(vec3(n),1.0);\n}","name":"Image","description":"","type":"image"}]}