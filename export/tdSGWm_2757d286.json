{"ver":"0.1","info":{"id":"tdSGWm","date":"1549000611","viewed":73,"name":"voronoi test 1","username":"mfriend","description":"Test shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n\nconst vec2 dots[16] = vec2[16](\n    vec2(0.051676,0.899302),\n    vec2(0.844268,0.206642),\n    vec2(0.539618,0.493242),\n    vec2(0.728060,0.770906),\n    vec2(0.248667,0.947159),\n    vec2(0.877884,0.854414),\n    vec2(0.375461,0.346185),\n    vec2(0.648776,0.538028),\n    vec2(0.766848,0.933507),\n    vec2(0.005123,0.673261),\n    vec2(0.584268,0.093984),\n    vec2(0.556601,0.203035),\n    vec2(0.705395,0.405671),\n    vec2(0.063067,0.210255),\n    vec2(0.925683,0.211687),\n    vec2(0.209411,0.816300)\n);\n\nconst vec3 cols[16] = vec3[16](\n    vec3(0,0,0)/255.0,\n\tvec3(29,43,83)/255.0,\n\tvec3(126,37,83)/255.0,\n\tvec3(0,135,81)/255.0,\n\tvec3(171,82,54)/255.0,\n\tvec3(95,87,79)/255.0,\n\tvec3(194,195,199)/255.0,\n\tvec3(255,241,232)/255.0,\n\tvec3(255,0,77)/255.0,\n\tvec3(255,163,0)/255.0,\n\tvec3(255,236,39)/255.0,\n\tvec3(0,228,54)/255.0,\n\tvec3(41,173,255)/255.0,\n\tvec3(131,118,156)/255.0,\n\tvec3(255,119,168)/255.0,\n\tvec3(255,204,170)/255.0\n);\n\nfloat euclid(vec2 a, vec2 b) {\n    float dx = a.x - b.x;\n    float dy = a.y - b.y;\n    return sqrt(dx*dx+dy*dy);\n}\n\nfloat mmin(vec2 point, vec2[16] list, out int ind) {\n    float cm = euclid(point,list[0]);\n    int   ci = 0;\n    int len = list.length();\n    for (int i=1; i<len; ++i) {\n        float tm=euclid(point,list[i]);\n        if (tm < cm) {\n            cm = tm;\n            ci = i;\n        }\n    }\n    ind = ci;\n    return cm;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y - vec2(0.25/(9.0/16.0),0.0) + (iMouse.xy/iResolution.xy)/0.5-1.0;\n\n    // Time varying pixel color\n    int ind=0;\n    vec3 col = vec3(1,1,1)-(vec3(1,1,1) * mmin(uv,dots,ind));\n    col *= cols[ind];\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}