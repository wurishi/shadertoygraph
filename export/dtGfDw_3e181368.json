{"ver":"0.1","info":{"id":"dtGfDw","date":"1702137553","viewed":119,"name":"Mandelbrot Flattening :O","username":"ShelbyLynn","description":"shelbrot","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["fractal","mandelbrot","mobius","render","escapetime"],"hasliked":0,"parentid":"DlyfDm","parentname":"shelbfork"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    vec4 color = texture (iChannel0, fragCoord / iChannelResolution[0].xy);\n    color /= color.w;\n    color.xyz = pow((color.xyz), 1. / vec3(2.2));\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int LIMIT = 512;\nconst float PI = 3.141592653589793;\nconst float sq3 = 1.73205080757;\nvec3 hue_b(float x) {\n  float theta = x + PI;\n  float d = 13.0f / 9.0f;\n  float v = (4.0f * PI) / 9.0f;\n  float r = (cos(theta + v - d) + 1.0f) * 0.5f;\n  float b = (sin(theta - v - d) + 1.0f) * 0.5f;\n  float g = (sin(( PI / 4.f) + theta + d) * 2.0f + 2.0f) * 0.25f;\n  return vec3(r, g, b);\n}\n\nint   seed = 1;\nint   rand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat frand(void) { return float(rand())/32767.0; }\nvoid  srand( ivec2 p, int frame, float iTime )\n{\n    int n = frame;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589; // by Hugo Elias\n    n += p.y;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    n += p.x;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    seed = n;\n    \n}\nfloat tridist(float f) {\n    float o = f ;\n    float v = o * sqrt(abs(o));\n    v = max(v, -1.f);\n    return v + sign(o);\n\n}\nconst float BAIL = 256.;\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec2 cmulc(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 conjz(vec2 z) {\n    return vec2(z.x, -z.y);\n}\n\nvec2 cdivc(vec2 a, vec2 b) {\n    return cmulc(a, conjz(b)) / (b.x * b.x + b.y * b.y);\n}\n\nvec2 smobz(vec2 z) {\n    z = z.yx;\n    return cdivc((z + vec2(1., 0.)), (-z / 1.25)) + vec2(0., 0.);\n}\n\nvec3 mset(vec2 c) {\n    c = smobz(c);\n    vec2 z = c;\n    int i = 0;\n    float s = 4.;\n    vec2 dz = vec2(0.);\n    vec2 dc = vec2(1., 0.);\n    while (i < LIMIT) {\n        if (dot(z,z) > BAIL) break;\n        float x = z.x * z.x - z.y * z.y;\n        z.y = 2. * z.x * z.y + c.y;\n        z.x = x + c.x;\n        i += 1;\n        s += exp(-sqrt(dot(z,z)));\n    }\n    if (i == LIMIT) return vec3(0.);\n    float v = float(s) / float(LIMIT);\n    float v2 = log(1. / (2. + v));\n    return hue_b(200. * v2 * v2 + PI);\n}\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    srand( ivec2(fragCoord), iFrame, iTime);\n    vec4 c = vec4(0.);\n    for (int j = 0; j < 1; j++) {\n      for (int j = 0; j < 4; j++) {\n          vec2 offset = vec2(tridist(frand(void)), tridist(frand(void)));\n          vec2 uv = (fragCoord + 0.5 + offset)/iResolution.xy - 0.5;\n          uv.x *= iResolution.x/iResolution.y;\n          uv *= 16.;\n          uv.y += 4.;\n          uv.x += iTime * 2.;\n          c += vec4(mset(uv), 1.);\n      }\n    } if (iMouse.z <= 0.)\n      c = mix(c, texture(iChannel0, fragCoord / iResolution.xy), 0.2);\n    fragColor = c;\n}","name":"Buffer A","description":"","type":"buffer"}]}