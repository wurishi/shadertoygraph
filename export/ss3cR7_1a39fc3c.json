{"ver":"0.1","info":{"id":"ss3cR7","date":"1654807540","viewed":55,"name":"попрыгун","username":"thorax84","description":"попрыгун","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.1415926535897932384626433832795;\n\nvoid getCamPos(float time, out vec3 camPos3d)\n{\n    float t = time / 3.0;\n    float x = 7000.0*sin(t*0.5+PI/2.0);\n    float y = 3000.0*sin(2.0*t*0.5);\n    float z = 1000.0*abs(cos(3.5*t)) + 100.0;\n\n    camPos3d = vec3(x,y,z);\n\n    //vec2 camPos2d = (700.0*cos(time/3.0)+1500.0)*vec2(cos(cos(time)*time), sin(cos(time)*time));\n    //camPos3d = vec3(camPos2d, 2000.0*abs(cos(1.5*time)) + 100.0);    \n}\n\nvoid collRayAndSurface(vec3 rayPos3d, vec3 rayDir3d, out vec3 surfPos3d, out vec3 surfNorm3d, out vec3 surfColor3d)\n{\n    float sqSize = 200.0;\n        \n    surfNorm3d = vec3(0.0, 0.0, 1.0);\n    \n    float dist = rayPos3d.z/rayDir3d.z;\n    surfPos3d = rayPos3d - dist*rayDir3d;        \n    \n    int gridPosX = int(floor(surfPos3d.x / sqSize));\n    int gridPosY = int(floor(surfPos3d.y / sqSize));\n    \n    float isWhite = float((gridPosX + gridPosY) & 1);\n    \n    surfColor3d = isWhite*vec3(0.9, 0.9, 0.9) + (1.0 - isWhite)*vec3(0.2, 0.2, 0.2);       \n}\n\nvoid getFragRayDir(vec3 camDir3d, vec3 camUpDir3d, float camDist, vec2 fragCoord, out vec3 rayDir3d)\n{\n    vec3 xAxis = normalize(cross(camDir3d, camUpDir3d));\n    vec3 yAxis = normalize(cross(xAxis, camDir3d));\n    \n    rayDir3d = normalize(camDist*camDir3d + \n        xAxis*(fragCoord.x - 0.5*iResolution.x) +\n        yAxis*(fragCoord.y - 0.5*iResolution.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec3 dummy;\n    float camDist = 1000.0;\n    float specPower = 50.0;        \n        \n    vec3 camPos3d;     \n    getCamPos(iTime, camPos3d);\n    \n    vec2 camPos2d = camPos3d.xy;\n    \n    vec3 prevCamPos3d;\n    getCamPos(iTime - 0.2, prevCamPos3d);\n    \n    vec3 movCamDir3d = normalize(camPos3d - prevCamPos3d);    \n                \n    vec3 camDir3d = normalize(vec3((camPos3d.z/800.0 + 0.8)*normalize(movCamDir3d.xy), -1.0)); \n    vec3 camUpDir3d = normalize(vec3(movCamDir3d.xy, 0.0));\n    \n    vec3 fragRayDir;\n    getFragRayDir(camDir3d, camUpDir3d, camDist, fragCoord, fragRayDir);\n    \n    \n    vec3 surfPos3d, surfNorm3d, surfColor3d;\n    collRayAndSurface(camPos3d, fragRayDir, surfPos3d, surfNorm3d, surfColor3d);\n    \n    //vec3 lampPos3d = vec3(camPos3d.xy, camPos3d.z / 3.0);\n    //vec3 lampPos3d = vec3(1500.0*normalize(movCamDir3d.xy) + camPos2d, 500.0);\n    \n    vec3 camDirSurfPos3d;\n    collRayAndSurface(camPos3d, camDir3d, camDirSurfPos3d, dummy, dummy);\n    \n    float camDirLen = length(camDirSurfPos3d - camPos3d);\n    float lightDist = clamp(camDirLen, 300.0, 1000.0);\n            \n    vec3 lampPos3d = lightDist*camDir3d + camPos3d;\n    lampPos3d.z = max(550.0, lampPos3d.z);\n    \n    vec3 toL3d = lampPos3d - surfPos3d;\n    //float brightBase = lampPos3d.z*lampPos3d.z / (toL3d.x*toL3d.x + toL3d.y*toL3d.y + toL3d.z*toL3d.z);    \n    float brightBase = 500000.0 / (toL3d.x*toL3d.x + toL3d.y*toL3d.y + toL3d.z*toL3d.z);    \n        \n    vec3 toCam3d = camPos3d - surfPos3d;\n    vec3 dirToCam3d = normalize(toCam3d);\n    vec3 dirToL3d = normalize(toL3d);\n            \n    float diffBright = brightBase*max(dot(surfNorm3d, dirToL3d), 0.0);\n    \n    vec3 camDirRefl3d = reflect(-dirToCam3d, surfNorm3d);    \n    float specBright = brightBase * pow(max(dot(dirToL3d, camDirRefl3d), 0.0 ), specPower);\n    float bright = diffBright + specBright + 0.04;\n        \n    vec3 color = bright*surfColor3d;\n    fragColor = vec4(color, 1.0);        \n    \n}","name":"Image","description":"","type":"image"}]}