{"ver":"0.1","info":{"id":"ctjcRK","date":"1692014468","viewed":105,"name":"2D tile on sphere","username":"Efim","description":"Draw primitive from sorted list vertex in polar coord. 2D SDF Functions. Put 2D texture on sphere\nhttps://iquilezles.org/articles/distfunctions2d/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/distfunctions2d/\n#define PI 3.14159265359\n#define TAU 6.28318530718\n\nmat3 rotateX(float f)\n{\n    return mat3(\n    vec3(1.0,    0.0,      0.0),\n    vec3(0.0,\t cos(f),  -sin(f)), \t\n\tvec3(.0, sin(f), cos(f))\n    );\n}\n\n\nmat3 rotateY(float f)\n{\n    return mat3(\n    vec3(cos(f), 0.0,  sin(f)),\n    vec3(0.0,\t 1.0,  0.0), \t\n\tvec3(-sin(f), 0.0, cos(f))\n    );\n}\n\nmat3 rotateZ(float f)\n{\n    return mat3(\n    vec3(cos(f),    -sin(f),  0.0),\n    vec3(sin(f),\t cos(f),  0.0), \t\n\tvec3(0.0, 0.0, 1.0)\n    );\n    \n}\n\nfloat aafi(vec2 p)\n{\n    float fi = atan(p.y, p.x);\n    fi += step(p.y, 0.0)*TAU;\n    return fi;\n}    \n\n//converts a vector on a sphere to longitude and latitude\n\nvec2 lonlat (vec3 p)\n{\n    float lon = aafi(p.xy)/TAU;\n    float lat = aafi(vec2(p.z, length(p.xy)))/PI;\n    return vec2(1.0-lon, lat);\n}\n\n//=============================2D pic=========================\nfloat sdBuild(vec2 p, float[30] f, float[30] r, int n)\n{\n   float fi = aafi(p);\n   \n    for (int i = 1; i < 30; i++)\n    {\n        if (i == n)\n            break;\n        if (fi >= f[i-1] && fi <= f[i])\n        {\n            float f1 = fi - f[i-1];\n            float f2 = f[i] - fi;\n            float h1 = r[i-1] * sin(f1);\n            float h2 = r[i] * sin(f2);\n            vec2 v1 = vec2(r[i-1] * cos(f[i-1]), r[i-1] * sin(f[i-1]));\n            vec2 v2 = vec2(r[i] * cos(f[i]), r[i] * sin(f[i]));\n            vec2 v3 = v2 - v1;\n            v3 *= h1 / (h1 + h2);\n            vec2 v4 = v1 + v3;\n            return length(p) - length(v4);\n        }\n    }\n    \n}\n\nvec3 grid(vec2 uv)\n{\n        float rombr[30]; \n        rombr[0] = 1.0; \n        rombr[1] = 1.0; \n        rombr[2] = 1.0; \n        rombr[3] = 1.0; \n        rombr[4] = 1.0; \n\n        float rombf[30]; \n        rombf[0] = 0.0; \n        rombf[1] = PI/2.0;\n        rombf[2] = PI;\n        rombf[3] = 3.0*PI/2.0;\n        rombf[4] = 2.0*PI;\n\n    \n        vec2 p =  vec2(fract(uv.x*20.0), fract(uv.y*10.0));\n        p = (p-0.5)*2.0;\n        \n        vec3 col = vec3(1.0);\n        float pst = sdBuild(p, rombf, rombr, 5);\n        col = mix(col, vec3(1.0, 1.0, 0.0), step(pst, 0.0));\n        for (int i = 0; i < 5; i++)\n        {\n            rombr[i] = 0.8;\n        }\n        pst = sdBuild(p, rombf, rombr, 5);\n        col = mix(col, vec3(0.0, 0.0, 1.0), step(pst, 0.0));\n\n        /*\n        for (int i = 0; i < 5; i++)\n        {\n            rombr[i] = 0.6;\n        }\n        pst = sdBuild(p, rombf, rombr, 5);\n        col = mix(col, vec3(1.0, 0.0, 0.0), step(pst, 0.0));\n\n        for (int i = 0; i < 5; i++)\n        {\n            rombr[i] = 0.4;\n        }\n        pst = sdBuild(p, rombf, rombr, 5);\n        col = mix(col, vec3(0.0, 1.0, 0.0), step(pst, 0.0));\n        */\n        return col;\n}\n//=============================2D pic=========================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = 0.7;\n    vec3 col = vec3(0.7, 0.7, 0.9);\n    vec3 light = vec3(-10.0, 0.0, 10.0);\n    \n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float l = length(p);\n    if (l > r ) \n    {\n         fragColor = vec4(col, 1.0);\n         return;\n    }\n    //get vector on sphere in Orthographic Camera\n    float z = r*sin(acos(l/r));\n    vec3 sp = vec3(p, z);\n\n\n    vec3 sp_rot = rotateZ(-iTime)*rotateX(PI/2.0 + PI/5.0)*sp; //rotate sphere\n    vec2 pt = lonlat(sp_rot); //get longitude and latitude\n    //col = texture(iChannel0, pt).rgb;  //get color from texture\n    col = grid(pt);\n    \n    //Lambertian\n    float diffuse = dot(normalize(sp), normalize(light));\n    diffuse = clamp(diffuse, 0.3, 1.0);\n    col *= diffuse;\n\n    // gamma\n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4(col, 1.0);\n    \n}\n","name":"Image","description":"","type":"image"}]}