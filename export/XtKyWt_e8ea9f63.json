{"ver":"0.1","info":{"id":"XtKyWt","date":"1538145089","viewed":125,"name":"Curve Rendering","username":"sam6321","description":"Curve rendering in arbitrary triangles defined in the fragment shader ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["curve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 region(in vec2 a, in vec2 b, in vec2 c, in vec2 fragCoord, out float inside) {\n\tvec2 v0 = c - a;\n    vec2 v1 = b - a;\n    vec2 v2 = fragCoord - a;\n    \n    float dot00 = dot(v0, v0);\n    float dot01 = dot(v0, v1);\n    float dot02 = dot(v0, v2);\n    float dot11 = dot(v1, v1);\n    float dot12 = dot(v1, v2);\n    \n    float idenom = 1.0 / (dot00 * dot11 - dot01 * dot01);\n    float u = (dot11 * dot02 - dot01 * dot12) * idenom;\n    float v = (dot00 * dot12 - dot01 * dot02) * idenom;\n    \n    inside = float(u >= 0.0 && u <= 1.0 && v >= 0.0 && v <= 1.0 && u + v <= 1.0);\n    \n    vec3 bary = vec3(1.0 - u - v, v, u);\n\n    return vec2(bary.x * vec2(0, 0) + bary.y * vec2(0.5, 0) + bary.z * vec2(1, 1));\n}\n\nvoid curve(in vec2 a, in vec2 b, in vec2 c, in vec2 xy, inout float curveValue, inout float mask) {\n\tfloat m;\n    vec2 coords = region(a, b, c, xy, m);\n    float x = coords.x * coords.x - coords.y;\n    curveValue += smoothstep(0.002, -0.002, x);\n    mask += m;\n}\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 dist = (_st - vec2(0.5)) * aspect;\n\treturn 1.-smoothstep(_radius-(_radius*0.2),\n                         _radius+(_radius*0.02),\n                         dot(dist,dist)*4.0);\n}\n\nvec2 clampLength(in vec2 v, float min, float max) {\n    float len = length(v);\n    return v / len * clamp(len, min, max);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    \n    \n    vec2 centre = vec2(cos(iTime), sin(iTime)) * 0.25 + 0.5;\n    \n    float mask = 0.0f;\n    float value = 0.0f;\n    curve(vec2(0, 0), mouse, vec2(0, 1), uv, value, mask);\n    curve(vec2(0, 1), mouse, vec2(1, 1), uv, value, mask);\n    curve(vec2(1, 1), mouse, vec2(1, 0), uv, value, mask);\n    curve(vec2(1, 0), mouse, vec2(0, 0), uv, value, mask);\n    \n    // Offset position by \n    value += circle(mouse - (uv - 0.5), 0.03);\n    vec2 offset = clampLength((uv - 0.5), 0.0, 0.1) * 0.23;\n    value -= circle(mouse - (uv - 0.5) + offset, 0.007);\n    \n\n    // Output to screen\n    fragColor = vec4(vec3(value), 1.0) * mask;\n}","name":"Image","description":"","type":"image"}]}