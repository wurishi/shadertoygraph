{"ver":"0.1","info":{"id":"DtfBzf","date":"1693242996","viewed":66,"name":"3d camera mouse","username":"zhy437488627","description":"3d camera mouse","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 5\n#define R 1.2\n#define PI 3.14159265\n\nvec2 fixUV(vec2 uv) {\n    return (2. * uv - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\nfloat sdfSphere(vec3 p) {\n    return length(p) - R;\n}\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * sdfSphere(p + k.xyy * h) +\n        k.yyx * sdfSphere(p + k.yyx * h) +\n        k.yxy * sdfSphere(p + k.yxy * h) +\n        k.xxx * sdfSphere(p + k.xxx * h));\n}\nvec3 norcurv(in vec3 p)\n{\n    vec2 e = vec2(-1., 1.)*0.01;   \n    float t1 = sdfSphere(p + e.yxx), t2 = sdfSphere(p + e.xxy);\n    float t3 = sdfSphere(p + e.xyx), t4 = sdfSphere(p + e.yyy);\n\n    // float curv = .25/e.y*(t1 + t2 + t3 + t4 - 4.0*sdfSphere(p));\n    return normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4);\n}\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float t = TMIN;\n    for(int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        float d = sdfSphere(p);\n        if(d < PRECISION) {\n            break;\n        }\n        t += d;\n    }\n    return t;\n}\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x,y,z);\n}\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.);\n    vec3 ro = vec3(2.*cos(iTime), 0., 2.*sin(iTime));\n    vec3 target = vec3(0.);\n    if(iMouse.z > 0.001) {\n        float m_rate_x = iMouse.x/iResolution.x * PI * 2. +4.2;\n        float m_rate_y = iMouse.y / iResolution.y * PI*1.+2.; // Add a vertical mouse rate\n        // ro = vec3(2. * cos(m_rate_x), 2. * sin(m_rate_y), 2. * sin(m_rate_x));\n        float distanceToOrigin = length(ro); // Calculate the current distance to origin\n\nro = normalize(vec3(2. * cos(m_rate_x), 2. * sin(m_rate_y), 2. * sin(m_rate_x))) * distanceToOrigin;\n    }\n    mat3 cam = setCamera(target, ro, 0.);\n    vec3 rd = normalize(cam*vec3(uv, 1.));\n    float t = rayMarch(ro, rd);\n    if(t < TMAX) {\n        vec3 p = t * rd + ro;\n        vec3 light = vec3(1, 0., 1.2);\n        // vec3 light = vec3(2. * cos(iTime - 2.0), 0.4, 2. * sin(iTime - 2.0) + 1.);\n        // vec3 n = calcNormal(p);\n        vec3 n = norcurv(p);\n        float diff = clamp(dot(normalize(light - p), n), 0., 1.);\n        vec3 amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.)) * vec3(1.);\n        // vec3 amb = vec3(0.,0,1.);\n        return diff * vec3(sin(iTime), 0., cos(iTime)) + amb * vec3(0.5);\n    }\n    return sqrt(color);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fixUV(fragCoord);\n\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}","name":"Image","description":"","type":"image"}]}