{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define S smoothstep\n#define PI 3.14159265359\n#define TAU 6.283185\n\n// Utility functions\nmat2 Rot(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Gyroid(vec3 p) {\n    float scale = 6.0;\n    vec3 q = p * scale;\n    return abs(dot(sin(q), cos(q.zxy))) - 0.4;\n}\n\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat GetDistance(vec3 p) {\n    float sphere = abs(length(p) - 1.0) - 0.03;\n    float gyroid = Gyroid(p) * 0.4;\n    return smin(sphere, gyroid, -0.02);\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDistance(p);\n    vec2 e = vec2(0.001, 0.0);\n    vec3 n = d - vec3(\n        GetDistance(p - e.xyy),\n        GetDistance(p - e.yxy),\n        GetDistance(p - e.yyx)\n    );\n    return normalize(n);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    float minDist = 30.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = GetDistance(p);\n        minDist = min(minDist, dS);\n        dO += dS;\n        if (dO > 30.0 || dS < 0.001) break;\n    }\n    return vec2(dO, minDist);\n}\n\n// Lighting calculations\nvec3 CalculateLighting(vec3 p, vec3 n, vec3 ro, vec3 lightPos) {\n    vec3 l = normalize(lightPos - p); // Light direction\n    vec3 v = normalize(ro - p);       // View direction\n    vec3 h = normalize(v + l);        // Halfway vector\n\n    // Diffuse\n    float diff = max(dot(n, l), 0.0);\n\n    // Specular\n    float spec = pow(max(dot(n, h), 0.0), 32.0);\n\n    // Ambient\n    vec3 ambient = vec3(0.1, 0.1, 0.2);\n\n    return diff * vec3(0.8, 0.5, 0.9) + spec * vec3(1.0, 0.9, 0.8) + ambient;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Camera\n    vec3 ro = vec3(2.0 * sin(iTime * 0.1), 1.5, 2.0 * cos(iTime * 0.1));\n    vec3 lookAt = vec3(0.0, 0.0, 0.0);\n    vec3 f = normalize(lookAt - ro);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = cross(f, r);\n    vec3 rd = normalize(uv.x * r + uv.y * u + f);\n\n    // Ray march\n    vec2 dist = RayMarch(ro, rd);\n    vec3 col = vec3(0.0);\n\n    if (dist.x < 30.0) {\n        vec3 p = ro + rd * dist.x;\n        vec3 n = GetNormal(p);\n\n        // Lighting\n        vec3 lightPos1 = vec3(1.5 * sin(iTime), 2.0, 1.5 * cos(iTime));\n        vec3 lightPos2 = vec3(-2.0, 1.0, 1.0); // Additional light source\n        vec3 lighting1 = CalculateLighting(p, n, ro, lightPos1);\n        vec3 lighting2 = CalculateLighting(p, n, ro, lightPos2);\n\n        col = lighting1 + lighting2;\n\n        // Center glow\n        float glow = exp(-10.0 * length(p)) * 0.5;\n        col += vec3(1.0, 0.8, 0.9) * glow;\n\n        // Pulsating center effect\n        float pulse = sin(iTime * 3.0) * 0.5 + 0.5;\n        col += vec3(1.0, 0.3, 0.3) * pulse * glow;\n\n        // Surface detail\n        float detail = Gyroid(p) * 0.5 + 0.5;\n        col *= 0.8 + 0.2 * detail;\n    }\n\n    // Background gradient\n    col += vec3(0.1, 0.2, 0.3) * (1.0 - uv.y);\n\n    // Vignette\n    float vignette = 1.0 - length(uv) * 0.5;\n    col *= vignette;\n\n    fragColor = vec4(col, 1.0);\n}\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lfKBWD","date":"1734062668","viewed":39,"name":"Orbbbbb","username":"EileenXxx","description":"Metal Fractal","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["metal"],"hasliked":0,"parentid":"","parentname":""}}