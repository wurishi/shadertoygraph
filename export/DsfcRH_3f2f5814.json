{"ver":"0.1","info":{"id":"DsfcRH","date":"1686587223","viewed":46,"name":"psychedelic triangle","username":"Prosta40k","description":"psychedelic","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.55,0.55,0.55);\n    vec3 b = vec3(0.57,0.57,0.58);\n    vec3 c = vec3(0.9,0.9,0.9);\n    vec3 d = vec3(-0.68,-1.44,-0.22);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float PI = 3.14159265359;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 uv0 = uv;\n    //uv.y *= 1.5;\n    vec3 fincol = vec3(0.0);\n    for(float i = 0.0; i<8.0;i++){\n    //uv = fract(uv*1.0)-0.5;\n    float d = sdEquilateralTriangle(uv, iTime);\n    \n    float pixelAngle = atan(uv.y, uv.x);\n    float radius = mix(0.0, 0.5, d);\n    float rotatedAngle = pixelAngle+2.0* radius;\n    \n    d = (sin(d*i)-cos(d));\n    d = cos(d+rotatedAngle)*sin(d+rotatedAngle);\n    d = abs(d);\n    // Time varying pixel color\n    vec3 col = palette(iTime);\n    \n    d = pow(0.02/d,1.5);\n    \n    fincol = col*d;\n    }\n    // Output to screen\n    fragColor = vec4(fincol,1.0);\n}","name":"Image","description":"","type":"image"}]}