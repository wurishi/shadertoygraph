{"ver":"0.1","info":{"id":"dtVfDt","date":"1702665557","viewed":41,"name":"Mandeltex 1","username":"MV10","description":"Another cool random combo my audio-viz program rolled out. Combines Twisted Thingy (forked) and [url=https://www.shadertoy.com/view/lltSRB]Tessellated Mandelbrot[/url]. Added hue-shifting and rotation. Mesmerizing on a huge screen...","likes":1,"published":1,"flags":96,"usePreview":0,"tags":["3d","fractal","mandelbrot","torus","audio","remix","knot"],"hasliked":0,"parentid":"3dXSDB","parentname":"twisted thingy"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// The core functionality is Tessellated Mandelbrot, but I have added\n// hue-shifting for the small-scale copies, rotation, and the large-scale\n// copies in the fractal \"lakes\" are rendered unchanged. It's even more fun\n// when the rotation and hue-shifting is randomized for each new run, but\n// that's not reasonably possible in Shadertoy-land.\n\n// https://www.shadertoy.com/view/tstcDX\nvec3 rgb2hsv(vec3 c)\n{\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    const float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// https://www.shadertoy.com/view/tstcDX\nvec3 hsv2rgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst float pi_deg = 3.141592 / 180.0;\nmat2 rotationMatrix(float angle)\n{\n\tangle *= pi_deg;\n    float s=sin(angle), c=cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.y;\n\n    uv *= rotationMatrix(iTime * 4.0);\n\n    vec2 c = vec2(-0.74441,0.18631) + 3.0 * (uv - 0.5) * pow(0.01, 1.0 - cos(0.2 * iTime));\n    vec2 z = vec2(0.0);\n    for (int i = 0; i < 60; i++)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if (dot(z,z) > 1e4)\n        {\n            float tu = mod(atan(z.y, z.x) / 6.283185 + iTime * 0.5, 1.0); \n            float tv = log2(log(dot(z, z)) / log(1e4)); \n\n            vec3 hsv = rgb2hsv(texture(iChannel0, vec2(tu, tv)).rgb);\n            float hue = hsv.x + abs(sin(iTime * 0.3));\n            fragColor = vec4(hsv2rgb(vec3(hue, max(0.5, hsv.y), hsv.z)).rgb, 1.0);\n\n            return;\n        }\n    }\n\n    fragColor = texture(iChannel0, z + 0.5);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4stGzf","filepath":"https://soundcloud.com/ez-rollers/ez-rollers-the-lady-roller","previewfilepath":"https://soundcloud.com/ez-rollers/ez-rollers-the-lady-roller","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// Twisted Thingy is 100% unchanged from the original\n// apart from being moved to Buffer A. At some point I\n// need to render this to a smaller resolution so that\n// the combo runs smoothly in Shadertoy at 2K or 4K (not\n// a problem in my stand-alone audio-visualizer since it\n// operates on custom-sized framebuffers as needed).\n\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\n\n#define I_MAX\t\t400.\n#define E\t\t\t0.00001\n#define FAR\t\t\t50.\n#define PI\t\t\t3.14\n\n// blackbody by aiekick : https://www.shadertoy.com/view/lttXDn\n\n// -------------blackbody----------------- //\n\n// return color from temperature \n//http://www.physics.sfasu.edu/astro/color/blackbody.html\n//http://www.vendian.org/mncharity/dir3/blackbody/\n//http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html\n\nvec3 blackbody(float Temp)\n{\n\tvec3 col = vec3(255.);\n    col.x = 56100000. * pow(Temp,(-3. / 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. / 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)/255.;\n    if (Temp < 1000.) col *= Temp/1000.;\n   \treturn col;\n}\n\n// -------------blackbody----------------- //\n\nvoid mainImage(out vec4 c_out, in vec2 f)\n{\n    t  = iTime*.125;\n    vec3 col = vec3(0., 0., 0.);\n    vec2 R   = iResolution.xy,\n         uv  = vec2(f-R/2.) / R.y;\n\tvec3 dir = camera(uv);\n    vec3 pos = vec3(.0, .0, 0.0);\n\n    pos.z = 4.5+1.5*sin(t*10.);    // add camera movement\n    \n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    col.xyz = ret_col*(1.-inter.x*.0125);\n    col += h * .4;\n    c_out =  vec4(col,1.0);\n}\n\nfloat scene(vec3 p)\n{  \n    float\tvar;\n    float\tmind = 1e5;\n    \n    // overall object placement\n    p.z += 25.;\n    rotate(p.xz, 1.57-.5*iTime );\n    rotate(p.yz, 1.57-.5*iTime );\n    \n    var = atan(p.x,p.y);\n    vec2 q = vec2( ( length(p.xy) )-9.,p.z);\n    float ttwists=0.75;\n    rotate(q, var*ttwists+iTime*0.4);\t\n    \n    vec2 oq = q ;\n    \n    q = abs(q)-vec2(3.,3.)-sin(q)*7.; // add some twists\n\n    float twist= 3.3;\t// twists the \"blue\" strands\n    float s= iTime*1.;   // add \"movement speed\" to the \"blue\" strands \n    if (oq.x < q.x && oq.y > q.y){\n    \trotate(q, ( (var*twist)+s)*3.14+s);\n    }else{\n        rotate(q, ( 0.28-(var*twist)+s)*3.14+s);\n    }\n    \n    float\toldvar = var;\n    ret_col = 1.-vec3(.350, .2, .3);\n    \n    q=q*0.2;\n\n    mind = length(q)+.5+1.05*(length(fract(q*.5*(3.+3.*sin(oldvar*1. - iTime*1.)) )-.5)-1.215);\n    // only the coloring:   \n    h -= vec3(-3.20,.20,1.0)*vec3(1.)*.0025/(.051+(mind-sin(oldvar*1. - iTime*2. + 3.14)*.125 )*(mind-sin(oldvar*1. - iTime*2. + 3.14)*.125 ) );\n    h -= vec3(1.20,-.50,-.50)*vec3(1.)*.025/(.501+(mind-sin(oldvar*1. - iTime*2.)*.5 )*(mind-sin(oldvar*1. - iTime*2.)*.5 ) );\n    h += vec3(.25, .4, .5)*.0025/(.021+mind*mind);\n\n    // add some music feedback\n    float f= texture(iChannel0, vec2(8. * 0.18, 0.0)).x * 0.3 + 0.05;\n    h+= f*.1 - 0.005;\n    \n    return (mind);\n}\n\nvec2 march(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\n\t    for (float i = -1.; i < I_MAX; ++i)\n\t    {\n\t    \tp = pos + dir * dist.y;\n\t        dist.x = scene(p);\n\t        dist.y += dist.x*.2; // makes artefacts disappear\n            // log trick by aiekick\n\t        if (log(dist.y*dist.y/dist.x/1e5) > .0 || dist.x < E || dist.y > FAR)\n            {\n                break;\n            }\n\t        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec3 camera(vec2 uv)\n{\n    float\t\tfov = 1.;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Buffer A","description":"","type":"buffer"}]}