{"ver":"0.1","info":{"id":"4tj3DD","date":"1429150351","viewed":628,"name":"microprism mosaic","username":"phl","description":"-\n   ** Click 'n' drag -- X-axis for refraction offset, Y-axis for prism cell density","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["mosaic","microprisms"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float minCells = 1.;\nconst float maxCells = 50.;\nconst float defaultCells = 12.;\nconst float aberration = 1.05;\n\nfloat triAspect = 0.866; //sqrt(3.)/ 2.;\n\nfloat hitTest(vec2 uv, vec2 cellSize) {\n\n    vec2 cellOffset = mod(uv,cellSize) / cellSize;\n    vec2 cellIdx = floor(uv/cellSize);\n    vec2 subCellIdx = vec2(cellIdx.x*2. + step(.5,cellOffset.x), cellIdx.y);\n\n    float oddRow = sign(mod(subCellIdx.y,2.));\n    float oddSubCol = sign(mod(subCellIdx.x,2.));\n    \n\tfloat testTopLeft = 1.-mod(oddRow + oddSubCol,2.);\n    \n    float tlScore = (mod(cellOffset.x,.5)*2.)-(1.-cellOffset.y);\n    float trScore = cellOffset.y-(mod(cellOffset.x,.5)*2.);\n    float tbScore = (fract(cellOffset.y+.5)-.5)*2.;\n    \n    float oddEven = sign(mix(tlScore,trScore,testTopLeft));\n    \n    // +/- for odd/even triangles, magnitude is distance from nearest edge\n    return oddEven * min(abs(mix(tlScore,trScore,testTopLeft)),abs(tbScore));\n}\n\nfloat distFromTriCentre(vec2 uv, vec2 cellSize, float hitScore) {\n\n    vec2 cellIdx = floor(uv/cellSize);\n    float oddRow = sign(mod(cellIdx.y,2.));\n    float oddTri = 1.-mod(oddRow + hitScore,2.);\n\n    vec2 cellOffset = mod(uv,cellSize)/cellSize;\n    cellOffset.x = fract(cellOffset.x +.5 * sign(1.-oddTri));\n        \n    vec2 triOffset = vec2((cellOffset.x-.5), \n               mix(cellOffset.y-(1./3.),\n                   cellOffset.y-(1.-(1./3.)),\n                   hitScore));\n\n    return length(triOffset)*3./2.;\n}\n\nvec2 fixUV(vec2 uv) {\n\n    // flip y unless video\n    return vec2(uv.x,mix(uv.y,1.-uv.y,sign(iChannelTime[0])));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    float screenAspect = iResolution.x/iResolution.y;\n    \n    // set offset via mouse-x if button down, else timer\n    vec2 offset = mix(vec2(.4*sin(iTime/1.5),.0),\n                      vec2(.5-(iMouse.x / iResolution.x),.0),\n                      step(1.,iMouse.z));\n    offset *= mat2(.9659,-.2588,.2588,.9659); // 15deg rotation\n    \n    // set mosaic density via mouse-y if button down, else default\n    float cellsHigh = mix(defaultCells,\n                      mix(minCells,maxCells,1.-sqrt(1.-(iMouse.y / iResolution.y))),\n                      step(1.,iMouse.z));\n    \n    float cellsWide = cellsHigh * screenAspect * triAspect;\n    vec2 cellSize = vec2(1./cellsWide,1./cellsHigh);\n    \n    vec2 uv = fixUV(fragCoord.xy / iResolution.xy);   \n    \n    // find whether co-ord in 'odd' or 'even' cell\n    float score = hitTest(uv-.5,cellSize);\n    float oddEven = step(.0,score);\n    \n    // texture lookup with chroma spread\n    vec2 uvTranslate = .5 * cellSize * mix(-offset/4.,offset,oddEven);\n    float chromAbr = pow(aberration,sqrt(1.2*cellsHigh));\n    vec4 txColor = vec4(  \t\n    \ttexture(iChannel0, clamp(uv+(uvTranslate/chromAbr),0.,1.)).x,\n\t\ttexture(iChannel0, clamp(uv+uvTranslate,0.,1.)).y,\n    \ttexture(iChannel0, clamp(uv+(chromAbr*uvTranslate),0.,1.)).z,\n        1.);\n  \n    // vary brightness based on offset, distance from top of cell\n    float bright = (.04 + (.04 * length(offset)/.5)) * (1.-(.7*fract((uv.y-.5)/cellSize.y)));\n    fragColor = mix(txColor, mix(pow(txColor,vec4(2.)), vec4(1.)-pow(vec4(1.)-txColor,vec4(2.)),oddEven), vec4(bright));\n    \n    // vignetting based on distance from centre of cell, attenuation by cell count\n    float attn = pow(.97,pow(cellsHigh,1.3));\n    float vignette = distFromTriCentre(uv-.5, cellSize, oddEven);\n    fragColor -= .25*attn * (1. - (pow(.92,3.*pow(vignette,2.5))));\n    \n    // darken near tri edges\n    float edges = 1.-pow(abs(score),.5);\n    fragColor -= .5*attn * (1. - (pow(.9,1.*pow(edges,4.))));\n    \n}\n","name":"Image","description":"","type":"image"}]}