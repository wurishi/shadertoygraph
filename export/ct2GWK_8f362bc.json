{"ver":"0.1","info":{"id":"ct2GWK","date":"1673945453","viewed":55,"name":"Mandelbrot 2023","username":"chasec","description":"Generates it","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 c_sq(vec2 a)\n{\n    vec2 c;\n    c.x = a.x*a.x - a.y*a.y;\n    c.y = 2.*a.x*a.y;\n    return c;\n}\n\nint cmp_it(int it, vec2 c)\n{\n    vec2 prev = vec2(0.,0.);\n    int orbits = 0;\n    for (int i=0; i<it; i++)\n    {\n        if (it > 0)\n        {\n            prev = c_sq(prev) + c;\n            if (length(prev) < pow(2., float(it)))\n            {\n                orbits++;\n            }\n        }\n    }\n\n    return orbits;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float zoom = 8.*exp2(-.6*iTime);\n    fragCoord = fragCoord - iResolution.xy*0.5;\n    fragCoord = zoom*fragCoord;\n    fragCoord = fragCoord + iMouse.xy - vec2(500, 0);\n    vec2 uv = (fragCoord/iResolution.x);\n\n    // Time varying pixel color\n    //int it = int(min(abs(sin(float(iFrame)/d))*d*10., 100.));\n    int it = int(max(min(float(iTime*5.), 1000.),100.));\n    int orbits = cmp_it(it, vec2(uv.x, uv.y));\n    \n    vec3 col;\n    if (orbits == it)\n    {\n        col = vec3(0,0,0);\n    }\n    else\n    {\n        vec3 color = vec3(abs(sin(iTime)), abs(sin(iTime+1.)), abs(sin(iTime+2.)));\n        vec3 ambient = vec3(0.2, 0.2, 0.9);\n        float n = float(orbits)/float(it);\n        col = (vec3(n,n,n) * color) + ambient;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}