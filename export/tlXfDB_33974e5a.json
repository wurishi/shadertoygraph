{"ver":"0.1","info":{"id":"tlXfDB","date":"1597609601","viewed":221,"name":"Raymarcher basic mode","username":"str","description":"Raymarching tut https://www.youtube.com/watch?v=PGtv-dBi2wE&t=285s","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SURFACE_DISTANCE_EPSILON 0.01\n#define MAX_STEPS 100\n#define MAX_DISTANCE 100.\n\nfloat getDistanceToScene(vec3 point) {\n    vec4 sphere = vec4(0, 1, 6, 1);\n    float distanceToSphere = length(point - sphere.xyz) - sphere.w;\n\n    float distanceToPlane = point.y;\n    float distance = min(distanceToSphere, distanceToPlane);\n\n    return distance;\n}\n\nvec3 getNormal(vec3 point) {\n  vec2 epsilon = vec2(.01, 0);\n  float distance = getDistanceToScene(point);\n\n  // swizzles\n  vec3 normal = distance - vec3(\n    getDistanceToScene(point - epsilon.xyy),\n    getDistanceToScene(point - epsilon.yxy),\n    getDistanceToScene(point - epsilon.yyx)\n  );\n\n  return normalize(normal);\n}\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDistance) {\n    float distanceFromOrigin = 0.;\n\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 point = rayOrigin + distanceFromOrigin * rayDistance;\n        float distanceToScene = getDistanceToScene(point);\n\n        distanceFromOrigin += distanceToScene;\n\n        if (distanceToScene < SURFACE_DISTANCE_EPSILON || distanceFromOrigin > MAX_DISTANCE) {\n            break;\n        }\n    }\n    return distanceFromOrigin;\n}\n\nfloat getLight(vec3 point) {\n  vec3 lightPosition = vec3(0, 5, 6);\n  lightPosition.xz += vec2(sin(iTime), cos(iTime));\n\n  vec3 light = normalize(lightPosition - point);\n\n  vec3 normal = getNormal(point);\n\n  float diffuse = clamp(dot(normal, light), 0., 1.);\n\n  // calculate shadows\n  float distance = rayMarch(point + normal * SURFACE_DISTANCE_EPSILON * 2., light);\n  if (distance < length(lightPosition - point)) {\n    diffuse *= .1;\n  }\n\n  return diffuse;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    vec3 rayOrigin = vec3(0, 1, 0);\n    vec3 rayDistance = normalize(vec3(uv.x, uv.y, 1));\n\n    float distance = rayMarch(rayOrigin, rayDistance);\n\n    vec3 point = rayOrigin + rayDistance * distance;\n    float diffuseLight = getLight(point);\n\n    vec3 col = vec3(diffuseLight);\n    // vec3 col = getNormal(point);\n\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"","name":"Common","description":"","type":"common"}]}