{"ver":"0.1","info":{"id":"Xs3czX","date":"1519654356","viewed":147,"name":"Vector of rounded rects","username":"darxeagle","description":"Display number of rounded rectangles with given vector of position-size data","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","shape","rounded","data"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rect(vec2 uv, vec4 data) {\n    return roundSquare(uv, data.xy, data.zw, 0.02 * iResolution.x);  \n}\n\nfloat rects(vec2 uv, vec4 data[64]) {\n    float m = 0.0;\n    for(int i = 0;i < 64; i++ ) {\n    \tif (data[i].z > 0.0 && data[i].w > 0.0)\n            m = max(m, rect(uv, data[i]));\n    }\n    return m;\n}\n\nvec2 curSize(float st, float re, float t) {\n\treturn vec2(st + re*sin(t), st - re*sin(t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n  vec2 uv = fragCoord.xy;\n  vec2 center = iResolution.xy * 0.5;\n  float re = 0.05 * iResolution.x;\n  float st = 0.11 * iResolution.x;\n  float rad = 0.02 * iResolution.x;\n  float dist = 0.05 * iResolution.x;\n      \n  float time = iTime*2.0;\n  float PI = 3.14159265;  \n    \n  vec4 data[64];\n  data[0] = vec4(center.x - dist, center.y - dist, curSize(st, re, time));  \n  data[1] = vec4(center.x + dist, center.y - dist, curSize(st, re, time+PI*0.25));  \n  data[2] = vec4(center.x + dist, center.y + dist, curSize(st, re, time+PI*0.5));  \n  data[3] = vec4(center.x - dist, center.y + dist, curSize(st, re, time+PI*0.75));  \n    \n  float a = rects(uv, data);\n    \n  vec4 layer1 = vec4(rgb(0.0, 0.0, 0.0), 1.0);\n  vec4 layer2 = textr(uv, time);\n\n  // Blend the two\n  fragColor = mix(layer1, layer2, a);\n}\n                     \n                     \n                     \n            \n                     \n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//3d perlin\n///////////\n///////////\n///////////\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n//Geometry\n///////////\n///////////\n///////////\n\nfloat square(vec2 uv, vec2 pos, vec2 size) {    \n    //optimization\n    if (abs(pos.x - uv.x) > size.x || abs(pos.y - uv.y) > size.y) return 0.0;\n    \n    float tx = size.x/2.0 - abs(pos.x - uv.x);\n    float ty = size.y/2.0 - abs(pos.y - uv.y);\n    \n    return clamp(min(tx,ty),0.0,1.0);\n}\n\nfloat cutSquare(vec2 uv, vec2 pos, vec2 size, float cut) {  \n    //optimization\n    if (abs(pos.x - uv.x) > size.x || abs(pos.y - uv.y) > size.y) return 0.0;\n\n    float t = square(uv, pos, size);\n    \n    float cx = abs(pos.x - uv.x) - (size.x/2.0-cut);\n    float cy = abs(pos.y - uv.y) - (size.y/2.0-cut);\n    float c = clamp(min(cx,cy),0.0,1.0);      \n    \n    return clamp(t-c,0.0,1.0);\n}\n\nfloat circle(vec2 uv, vec2 pos, float rad) {\n    //optimization\n    if (abs(pos.x - uv.x) > rad || abs(pos.y - uv.y) > rad) return 0.0;\n    \n  float d = smoothstep(rad, rad - 1.0, length(uv - pos));\n    \n  return d;\n}\n\nfloat roundSquare(vec2 uv, vec2 pos, vec2 size, float rad) {  \n    //optimization\n    if (abs(pos.x - uv.x) > size.x || abs(pos.y - uv.y) > size.y) return 0.0;\n\n    float t = cutSquare(uv, pos, size, rad);\n    float r0 = circle(uv, vec2(pos.x - size.x/2.0 + rad, pos.y - size.y/2.0 + rad), rad);\n    float r1 = circle(uv, vec2(pos.x + size.x/2.0 - rad, pos.y - size.y/2.0 + rad), rad);\n    float r2 = circle(uv, vec2(pos.x + size.x/2.0 - rad, pos.y + size.y/2.0 - rad), rad);\n    float r3 = circle(uv, vec2(pos.x - size.x/2.0 + rad, pos.y + size.y/2.0 - rad), rad);  \n    \n    return clamp(max(t, max(r0, max(r1, max(r2, r3)))),0.0,1.0);\n}\n\n\n//Texture\n///////////\n///////////\n///////////\n\nvec3 rgb(float r, float g, float b) {\n  return vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nvec4 textr(vec2 uv, float time) {\n                    \n    vec3 colB = vec3(0.7, 0.3, 0);\n    vec3 colT = vec3(1, 1, 0.2);\n    \n    float n = snoise(vec3(uv.x/50.0, uv.y/50.0, time/20.0));\n    if (n > 0.5) n = 1.0-n;\n    n *= 2.0;\n                     \n    return vec4(mix(colB, colT, n), 1.0);\n}\n    \n\n","name":"Common","description":"","type":"common"}]}