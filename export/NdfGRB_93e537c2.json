{"ver":"0.1","info":{"id":"NdfGRB","date":"1616112443","viewed":66,"name":"Mandelbrot Set (blue)","username":"adamjmurray","description":"Mandelbrot Set fractal (https://en.wikipedia.org/wiki/Mandelbrot_set) with basic coloration based on how quickly each pixel is determined to be outside the Mandelbrot Set.\n\nFor an even simpler starting point, see https://www.shadertoy.com/view/Ndf3RB","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float iterations = 50.0;\nvec2 offset = vec2(-0.5, 0);\nfloat zoom = 1.0;\n\nvec2 normalizedCoord(vec2 fragCoord) {\n    vec2 norm = fragCoord/iResolution.xy * 2.0 - 1.0; // normalize to (-1, 1) range\n    norm.x *= iResolution.x/iResolution.y; // normalize to square aspect ratio\n    return norm;\n}\n\nvec2 complexMultiply(vec2 a, vec2 b) { // https://mathworld.wolfram.com/ComplexMultiplication.html\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    vec2 z = vec2(0, 0);\n    vec2 c = (normalizedCoord(fragCoord) + offset)/zoom;\n\n    float i = 0.0;    \n    while (i < iterations) {\n        z = complexMultiply(z, z) + c;\n        if (length(z) > 2.0) break;\n        i++;\n    }\n  \n    if (i >= iterations) {\n        fragColor = vec4(0,0,0,1);\n    } else {\n        fragColor = vec4(0,i/iterations,1,1);\n    }\n}","name":"Image","description":"","type":"image"}]}