{"ver":"0.1","info":{"id":"ml3XRs","date":"1686508286","viewed":58,"name":"Fractal twirl","username":"YujinZushi","description":"I`m not happy with variability of this shader, but hope it will be nice reference point for other shaders.\nInspired by @kishimisu","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","vortex","twirl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.; i++) {\n        // Fraction\n        uv = abs(fract(uv*.1+i/10.)-.5)*4.-1.;\n        // Polar transform\n        float r = length(uv);\n        float w = atan(uv.x,uv.y);\n        uv = vec2(r, w);\n        // Scale\n        uv.y *= 5.-i; // Number of spirals\n        uv.x *= 3.; // Radius scale\n        // Twirling\n        float d = sin(iTime + uv.y/2. - uv.x) * exp(-length(uv0));\n        // Color\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n        d = pow(0.015 / abs(d), 1.2);\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}