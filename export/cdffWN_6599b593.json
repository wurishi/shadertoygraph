{"ver":"0.1","info":{"id":"cdffWN","date":"1688819339","viewed":75,"name":"Looney Tunes Acid Tunnel ","username":"Mojomajor","description":"the internet","likes":2,"published":1,"flags":32,"usePreview":1,"tags":["2d","planedeformation","deform","distance","metric"],"hasliked":0,"parentid":"Ms2SWW","parentname":"Deform - square tunnel"},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n\n// This shader shows one way to fix the texturing discontinuities created by \n// fetching textures with atan(), which you can see if you set IMPLEMENTATION \n// to 0, depending on your screen resolution. More info here:\n//\n// https://iquilezles.org/articles/tunnel\n\n#define SPRITE_COLUMNS  6.0\n#define SPRITE_ROWS  1.0\n#define NUM_SPRITES SPRITE_ROWS * SPRITE_COLUMNS\n#define time iTime\n\n\n// #define WITH_CAT\n\nfloat noise(vec2 st){\n    return fract(sin(dot(vec2(12.23,74.343),st))*43254.);  \n}\n\n#define pi acos(-1.)\nfloat noise2D(vec2 st){\n  \n  //id,fract\n  vec2 id =floor(st);\n  vec2 f = fract(st);\n  \n  //nachbarn\n  float a = noise(id);\n  float b = noise(id + vec2(1.,0.));\n  float c = noise(id + vec2(0.,1.));\n  float d = noise(id + vec2(1.));\n  \n  \n  //f\n  f = smoothstep(0.,1.,f);\n  \n  //mix\n  float ab = mix(a,b,f.x);\n  float cd = mix(c,d,f.x);\n  return mix(ab,cd,f.y);\n}\n\nmat2 rot45 = mat2(0.707,-0.707,0.707,0.707);\n\nmat2 rot(float a){\n  float s = sin(a); float c = cos(a);\n  return mat2(c,-s,s,c);\n}\nfloat fbm(vec2 st, float N, float rt){\n    st*=3.;\n \n  float s = .5;\n  float ret = 0.;\n  for(float i = 0.; i < N; i++){\n     \n      ret += noise2D(st)*s; st *= 2.9; s/=2.; st *= rot((pi*(i+1.)/N)+rt*8.);\n      st.x += iTime/10.;\n  }\n  return ret;\n  \n}\n\n// 0 naive\n// 1 explicit derivatives\n#define IMPLEMENTATION 1\n\n// 0 : circular\n// 1 : squareish\n#define SHAPE 0\n\n#define SPEED 1.5\n#define WAVELENGHT 1.5\n\nconst float kPi = 3.1415927;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;  // normalized coordinates - 归一化坐标\n\n    p.x+=sin(iTime)*.1 ;\n    float a = atan(p.y,p.x);                                // angle of each pixel to the center of the screen - 每个像素到屏幕中心的角度 返回值为弧度，多少多少pi\n\n    #if SHAPE==0\n    float r = length(p);                                    // cylindrical tunnel - 圆柱隧道\n    #else\n    vec2 p2 = p*p, p4 = p2*p2, p8 = p4*p4;                  // square tunnel - 正方形隧道\n    float r = pow(p8.x+p8.y, 1.0/8.0);   \n    #endif\n    \n    vec2 uv = vec2( WAVELENGHT/r + SPEED*iTime, a/kPi );             // index texture by radious and angle - 索引纹理的 半径和角度\nfragColor=vec4(0.,0.,0.,1.);\n    #if IMPLEMENTATION==0\n    \n    uv*=1.;\n    vec3 col = texture(iChannel0, uv).xyz;                  // naive fetch color - 传统的采样\n\t#else\n    vec2 uv2 = vec2(uv.x, atan(p.y,abs(p.x))/kPi);          // fetch color with correct texture gradients to prevent discontinutity - 用正确的纹理梯度取颜色，以防止不连续性\n    uv2/=10.05*fbm(uv2,2.,3.);\n    vec3 col = textureGrad(iChannel0, uv, dFdx(uv2), \n                                          dFdy(uv2)).xyz;\n\t#endif\n    \n    col = col*r;                                            // darken at the center - 使中间变暗\n    // darken outside\n       // col = col*(2.-r);\n        col*=3.88;\n    \n    fragColor = vec4( col*fbm(uv2,2.,3.), 1.0 );\n    \n    #ifdef WITH_CAT\n    vec2 uv3 = fragCoord/iResolution.xy;\n     \n     // Calculate frame index over time\n    float frameIndex = mod(time * 10.0, NUM_SPRITES);\n    float colIndex = floor(mod(frameIndex, SPRITE_COLUMNS));\n    //float rowIndex = floor(frameIndex / SPRITE_COLUMNS);\n    \n    \n    // Calculate sprite width and height\n    //float spriteWidth = 1.0 / SPRITE_COLUMNS;\n    float spriteHeight = 1.0 / SPRITE_ROWS;\n    \n    // Calculate sprite UV\n    //uv.x = (uv.x + colIndex) * spriteWidth;\n    // original image has an empty space at the end..\n    //spriteWidth= 1.56;\n    uv3.x = (uv3.x + colIndex) * 0.156;\n    uv3.y = (uv3.y) * spriteHeight;\n    \n    vec4 tex = texture(iChannel1, uv3);\n    vec4 col2 = tex;\n    fragColor = mix(col2,fragColor,vec4(1.-col2.a));\n    //fragColor = vec4( col, 1.0 );\n    #endif\n    \n    //fragColor= texture(iChannel0, p).rgba;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 tex = texture(iChannel0, uv).rgba;\n    fragColor = tex;\n}\n*/\n\n\n#define NO_OF_COLORS 3\n#define MAGIC_SMOOTHER 0.0618\n\nvec3 createGradient(in vec3 color, in vec3 colors[NO_OF_COLORS], in float steps[NO_OF_COLORS],in float y ) {\n    for (int i = 1; i < NO_OF_COLORS; i++) {\n      color = mix(color, colors[i], smoothstep(steps[i-1], steps[i]+MAGIC_SMOOTHER, y+MAGIC_SMOOTHER)); \n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float y = uv.x;  \n    \n    vec3 colors[NO_OF_COLORS];\n    colors[0] = vec3(0,0,0)/255.;\n    colors[1] = vec3(35,(sin(iTime/300.)*0.5+0.5) * 135.,234)/255.;\n    colors[2] = vec3(0,0,0)/255.;\n   \n    \n    float steps[NO_OF_COLORS];\n    steps[0] = 0.05;\n\tsteps[1] = sin(iTime*1.)*0.5+0.5;\n    steps[2] = 0.99;\n\t\n    \n    // startColor\n    vec3 color = colors[0];\n    \n    // Output to screen\n    fragColor = vec4(createGradient(color,colors,steps,y),1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}