{"ver":"0.1","info":{"id":"lXj3z1","date":"1708220201","viewed":65,"name":"Incriptions","username":"PGRacer","description":"Squares inscribed in squares.\n\nhttps://www.shadertoy.com/view/43B3zW for my generalized solution.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["square","inscription"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185\n\n// iq - https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nmat2 MRotate(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2x2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float angle = iTime * 0.02 * TAU;\n    angle = mod(angle, TAU * 0.25);\n    \n    float T = tan(angle);\n    float ratio = length( vec2(1,T) )/(1. + T);\n    \n    float angleTotal = 0.0;\n    float ratioTotal = 1.0;\n    \n    float c = 1.0 ;\n    \n    mat2 m = MRotate(angle);\n    \n    for (int i = 0; i < 30; i++)\n    {\n        float d = sdBox(uv, vec2(ratioTotal));\n        d = max(d, 0.0);\n        d = pow(d, 0.2);\n        \n        c = abs(c - d);\n        \n        angleTotal += angle;\n        ratioTotal *= ratio;\n        uv = m * uv;\n    }\n    \n    fragColor = vec4(1.0-c);\n}","name":"Image","description":"","type":"image"}]}