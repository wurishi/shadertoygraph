{"ver":"0.1","info":{"id":"MddGWs","date":"1452825717","viewed":456,"name":"rain on camera","username":"MMGS","description":"pretty close to what I wanted to see but not quite there, Hopefully someone improves this or make a better version!\n","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an =  10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\nvec3 doBackground( vec3 rd)\n{\n    return texture(iChannel1,-rd).xyz;\n}\n    \n\nfloat doModel( vec3 p )\n{\n    return length(p) - 1.0;\n}\n\n//------------------------------------------------------------------------\nvec3 doMaterial( in vec3 pos, in vec3 nor,in vec3 rd )\n{\n    return vec3(0.2,0.07,0.01)-texture(iChannel0,nor.xy*pos.xy).xyz*0.1\n        *texture(iChannel1,reflect(nor,-rd)).xyz*dot(rd,nor);\n}\n\n//------------------------------------------------------------------------\n// Lighting\n//------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          // max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t);\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n\tvec3 col = doBackground(rd);\n\n\t// raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor,rd );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n    \n    \n     vec3  lig = normalize(vec3(1.0,0.7,0.9));\n      vec3 bufC = texture(iChannel0,fragCoord.xy/iResolution.xy).xyz*(1.0+dot(rd,lig));\n\tcol = pow( clamp(mix(col,bufC,0.35),0.0,1.0), vec3(0.4545) );\n\t \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat rand(float co){\n    return fract(sin(dot(vec2(co) ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n\n    // anim\n    vec2 c[30];\n     float v = 0.0;\t\n    for(int i=0;i<30;i++)\n    {\n        vec2 c1 = vec2(0,0);\n      vec2 rnd = vec2(rand((float(i)/3.5)),rand(20.+(float(i)*1.2)));\n         c1.x += -1.6+rnd.x*3.; \n            c1.y += -.9+rnd.y*1.9 ;\n      \n        if(mod(float(i),2.) == 0.)\n        {\n             c1.x += cos(rnd.x+iTime+float(i)*0.2)*0.1*fragCoord.y/iResolution.y*rnd.y;\n            \n            \n            c1.y -= texture(iChannel0,uv).w+rnd.x*rnd.y*cos(c1.x*rnd.x+iTime)*0.06; \n              if(c1.y<-1.1) c1.y += 2.0;\n        }\n        \n    \n       uv.y*=0.98-cos(uv.y+iTime)*0.001;\n        v += 1.0-smoothstep(0.0,0.1,length(uv-c1)*5.);\n    \tc[i]= c1;\n    }\n    \n\n    \n\tvec3 col = mix( vec3(v), vec3(1.0,0.6,0.0), smoothstep(0.1,3.5,v) );\n   \n    \n    \n     uv = fragCoord.xy/iResolution.xy;\n    vec4 info = texture(iChannel0,uv);\n\tinfo.xyz+=col*0.99;\n    fragColor = info;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nfloat rand(float co){\n    return fract(sin(dot(vec2(co) ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n\n    uv = fragCoord.xy/iResolution.xy;\n    vec4 info = texture(iChannel0,uv);\n\tinfo.w+=0.001;\n    if(info.w>2.0) info.w=0.0;\n    \n    fragColor = info;\n    \n    \n  //  info.xyz+=col.xyz;\n    info.xyz*=0.99;\n\tfragColor = info;\n}\n\n\n\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"\nfloat rand(float co){\n    return fract(sin(dot(vec2(co) ,vec2(12.9898,78.233))) * 43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n\n    // anim\n    vec2 c[30];\n     float v = 0.0;\t\n    for(int i=0;i<30;i++)\n    {\n        vec2 c1 = vec2(0,0);\n      vec2 rnd = vec2(rand((float(i)/3.5)),rand(20.+(float(i)*1.2)));\n         c1.x += -1.6+rnd.x*3.; \n            c1.y += -.9+rnd.y*1.9 ;\n      \n        if(mod(float(i),2.) == 0.)\n        {\n             c1.x += cos(rnd.x+iTime+float(i)*0.2)*0.1*fragCoord.y/iResolution.y*rnd.y;\n            \n            \n            c1.y -= texture(iChannel0,uv).w+rnd.x*rnd.y*cos(c1.x*rnd.x+iTime)*0.06; \n              if(c1.y<-1.1) c1.y += 2.0;\n        }\n        \n    \n       uv.y*=0.98-cos(uv.y+iTime)*0.001;\n        v += 1.0-smoothstep(0.0,0.1,length(uv-c1)*5.);\n    \tc[i]= c1;\n    }\n    \n\n     uv = fragCoord.xy/iResolution.xy;\n    vec4 info = texture(iChannel0,uv);\n\tvec3 col = mix( vec3(v), vec3(1.0,0.6,0.0), smoothstep(0.1,3.5,v) );\n   col+=info.xyz*0.2;\n\t// if(dist<0.) col=vec3(1,0,0);\n\tfragColor = vec4(col,1.0);\n}\t","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"\n\nconst float heightScale = 0.0125;\n\nfloat sampleHeight(in vec2 coord)\n{\n    return heightScale * \n        dot(texture(iChannel0, coord), vec4(1.0/3.0, 1.0/3.0, 1.0/3.0, 0.0));\n} \n   \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 du = vec2(1.0 / 1024.0, 0.0);\n    vec2 dv = vec2(0.0, 1.0 / 1024.0);\n    \n    float h0 = sampleHeight(uv);\n    float hpx = sampleHeight(uv + du);\n    float hmx = sampleHeight(uv - du);\n    float hpy = sampleHeight(uv + dv);\n    float hmy = sampleHeight(uv - dv);\n    \n    float dHdU = (hmx - hpx) / (2.0 * du.x);\n    float dHdV = (hmy - hpy) / (2.0 * dv.y);\n    \n    vec3 normal = normalize(vec3(dHdU, dHdV, 1.0));\n   \n\tfragColor = vec4(texture(iChannel1,normal).xyz, 1.0);\n}","name":"Buf D","description":"","type":"buffer"}]}