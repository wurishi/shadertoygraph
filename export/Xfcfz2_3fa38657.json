{"ver":"0.1","info":{"id":"Xfcfz2","date":"1733259282","viewed":65,"name":"Truchet tiles v7","username":"jorge2017a2","description":"Truchet tiles v7","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["truchettilesv7"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n//----------------Truchet tiles v7------\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n#define S3(d,b) smoothstep(6./iResolution.y, 0. , d - (b) )\n#define S2(d,b) smoothstep(6./iResolution.y, 0. , d - (b) )\n#define S(d,b) smoothstep(6./iResolution.y, 0. , d - (b) )\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\n\n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\nvec3 DFS(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S( distObj,0.0)); return colOut;\n  return colOut;\n}\n\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\n\n// Function to rotate a 2D point by an angle\nvec2 rotate(vec2 p, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(c * p.x - s * p.y, s * p.x + c * p.y);\n}\n\n\n\n\nvec3 Fig01(vec2 p, vec3 colout,vec3 colIn)\n{\n\nvec2 A,B, med,pr;\nfloat dfin;\nfloat  r1,ang, he ;\n\n//circulo superior chico 1\nA=vec2(0.5,1.0);\nr1=0.15+0.1;\nfloat d11=sdCircle(p-A,r1);\n\n//circulo 1 supe\nA=vec2(0.5,1.0);\nr1=0.25+0.1;\nfloat d12=sdCircle(p-A,r1);\nd12=Sdf_D(d12,d11);\ncolout= DFB(vec3(0.0), colout, d12);\n\n//circulo izq superior\nA=vec2(0.0,0.5);\nr1=0.15;\nfloat d13=sdCircle(p-A,r1);\n\n//circulo chico derecho sup\nA=vec2(1.0,0.5);\nr1=0.15;\nfloat d14=sdCircle(p-A,r1);\n\nA=vec2(0.0,0.5);\nr1=0.25;\nfloat d15=sdCircle(p-A,r1);\nd15=Sdf_D(d15,d13);\ncolout= DFB(vec3(0.0), colout, d15);\n\n//circulo grande derecho superior\nA=vec2(1.0,0.5);\nr1=0.25;\nfloat d16=sdCircle(p-A,r1);\nd16=Sdf_D(d16,d14);\ncolout= DFB(vec3(0.0), colout, d16);\n\n\n//circulo grande izq inf\nA=vec2(0.0,0.05);\nr1=0.25;\nfloat d17=sdCircle(p-A,r1);\n\n//derecho inferior grande\nA=vec2(1.0,0.0);\nr1=0.25;\nfloat d18=sdCircle(p-A,r1);\n\n//derecho inferior grande\nA=vec2(1.0,0.0);\nr1=0.15;\nfloat d19=sdCircle(p-A,r1);\nd18=Sdf_D(d18,d19);\ncolout= DFB(vec3(0.0), colout, d18);\n\n\n\n//izquierdo chico inferior\nA=vec2(0.0,0.0);\nr1=0.15;\nfloat d110=sdCircle(p-A,r1);\nd110=Sdf_D(d17,d110);\ncolout= DFB(vec3(0.0), colout, d110);\n\n\n\nA=vec2(0.2,0.25);\nmed=vec2(0.05,0.24);\nfloat d111=sdBox(p-A,med);\ncolout= DFB(vec3(0.0), colout, d111);\n\nA=vec2(0.8,0.25);\nmed=vec2(0.05,0.25);\nfloat d112=sdBox(p-A,med);\ncolout= DFB(vec3(0.0), colout, d112);\n\nA=vec2(0.9,0.25);\nmed=vec2(0.125,0.06);\nfloat d113=sdBox(p-A,med);\ncolout= DFB(vec3(0.0), colout, d113);\n\nA=vec2(0.12,0.25);\nmed=vec2(0.125,0.0);\nfloat d114=sdBox(p-A,med);\ncolout= DFB(vec3(0.0), colout, d114);\n    return colout;\n}\n\n\n// Function to generate a random number based on tile position\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 truchet(vec2 uv, vec3 col, vec3 colIn)\n{\n     vec2 pos = uv;\n    vec2 tile = floor(uv);\n    pos = fract(uv) ;\n    // Generate a random number to choose \n    float choice = random(tile);\n    float dist = 0.0;\n    float nopc=1.0;\n     float choice2 = random(tile);\n    float ang = (choice2 < 0.5) ? radians(90.0) : radians(-90.0);\n    pos = rotate(pos - 0.5, ang) + 0.5; // RotaciÃ³n con el centro del tile como origen\n    col=Fig01(pos,col,colIn); \n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale =2.0;\n    vec2 uv =  scale * ( 2. * fragCoord - iResolution.xy ) / iResolution.y ;\n    uv+=iTime*0.25;\n     vec3 col=vec3(1.0);\n    col= truchet(uv,col, vec3(0.0,0.0,0.0));\n    col=pow(col,  vec3(0.554545));  \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}