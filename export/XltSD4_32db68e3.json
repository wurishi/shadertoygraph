{"ver":"0.1","info":{"id":"XltSD4","date":"1479625472","viewed":419,"name":"Deferred Diffuse","username":"Passion","description":"Outputing normals w/ specular in a single buffer. Upper left normals, upper right specular, bottom left diffuse+normals for coloring+specular from alpha on 'Buffer A', and bottom right just the diffuse calculated from the rgb or xyz normals from Buffer A.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","experiment","deferred"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime;\n    \n    vec4 tex = vec4(texture(iChannel0, uv).rgb, 1.0);\n    fragColor = tex;\n    \n    float n1 = sin(time*.75)*.1;\n    float n2 = sin(time*.5)*.1;\n    \n    if(iMouse.z>0.01){\n        n1 = -iMouse.x/iResolution.x + .5;\n        n2 = (-iMouse.y/iResolution.y + .5)*-1.;\n    }\n    \n    vec3 n = tex.xyz;\n    vec3 l = normalize(vec3(0.4, 0.8, 0.6));\n    float diffuse = clamp(dot(n, l),0.05, 1.0);\n    \n    if(uv.x > 0.5-n1 && uv.y < 0.5+n2)\n        fragColor = vec4(diffuse);\n\n    if(uv.x > 0.5-n1 && uv.y > 0.5+n2)\n        fragColor = vec4(texture(iChannel0, uv).a);//+diffuse;\n\n    if(uv.x < 0.5-n1 && uv.y < 0.5+n2){\n        fragColor.rgb = texture(iChannel0, uv).rgb;\n        fragColor += texture(iChannel0, uv).a*diffuse;\n    }\n\n    if(uv.x > .4975-n1 && uv.x < .5025-n1)\n        fragColor = vec4(0.0);\n\n    if(uv.y > .495+n2 && uv.y < .505+n2)\n        fragColor = vec4(0.0);\n} \n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define NUM_SAMPLES 64\n#define EPS 0.001\n#define FAR_CLIP 25.0\n\nmat2 r2(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat2(s, c, -c, s);\n}\n\nfloat map(vec3 p){\n    \n    \n    p = mod(p, 4.0) - 2.0;\n    float bmp = sin(p.x*12.5)*sin(p.y*11.5)*sin(p.z*14.);\n    \n    bmp *= .045;\n    float c = length(p) - 1.0;\n    return c+bmp;\n}\n\nfloat trace(vec3 o, vec3 r){\n    float t = 0.0;\n    for(int i = 0; i < NUM_SAMPLES; i++){\n        vec3 p = o + r*t;\n        float d = map(p);\n        if(d < EPS || t > FAR_CLIP) break;\n        t += d*0.5;\n    }\n    return t;\n}\n\nvec3 grad(vec3 p) {\n\tvec2 e = vec2(EPS, 0.0);\n\treturn normalize((vec3(map(p+e.xyy), map(p+e.yxy), map(p+e.yyx)) - map(p)) / e.x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // uv coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    // allign uv coordinates\n    uv = uv*2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // time\n    float time = iTime;\n    \n    // origin\n    vec3 o = vec3(0.0, 0.0, -6.0);\n    // ray\n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv) * .35));\n    \n    o.xz *= r2(time);\n    r.xz *= r2(time*.25);\n    r.yz *= r2(time*.5);\n    \n    fragColor = vec4(0.0);\n    \n    // raymarch hit\n    float hit = trace(o, r);\n    // surface position\n    vec3 sp = o+r*hit;\n    \n    float d = map(sp);\n    \n    \n    //normal\n    vec3 n = grad(sp);\n    // light\n    float spec = 0.0;\n    vec3 l = normalize(vec3(0.4, 0.8, 0.6));\n    vec3 halfDir = normalize(l - r);\n    float theta = max(dot(halfDir, n), 0.0);\n    spec = pow(theta, 160.);\n    //vec3 bg =pow(vec3(0.49, 0.69, .8),r.y)*dot(l,r)+.5*.5;\n    // background color\n    vec4 bg = pow(vec4(.1, .75, .8, 1)*.75, vec4(4.*(r.y+1.0)));\n    \n    if(d < 0.05){\n        //float diffuse = clamp(dot(n, l), 0.05, 1.0);\n        float fog = smoothstep(.4, .7, hit*.03);\n        fragColor = mix(vec4(vec3(n),spec), vec4(bg), fog);\n    }\n    else\n        fragColor = vec4(bg);\n            \n}","name":"Buf A","description":"","type":"buffer"}]}