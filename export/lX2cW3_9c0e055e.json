{"ver":"0.1","info":{"id":"lX2cW3","date":"1727819054","viewed":21,"name":"Surface of sun?","username":"creikey","description":"sun","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sun"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lerp(float p0, float p1, float x)\n{\n\treturn (1. - x) * p0 + x * p1;\n}\n\nfloat bilerp(\n\tfloat p00, float p10, float p01, float p11,\n\tfloat x, float y)\n{\n\tfloat q0 = lerp(p00, p10, x);\n\tfloat q1 = lerp(p01, p11, x);\n\treturn lerp(q0, q1, y);\n}\n\nfloat random (vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvec2 random_unit(vec2 st)\n{\n    float angle = random(st) * 6.28;\n    return vec2(cos(angle), sin(angle));\n}\n\nfloat noise (in vec2 st)\n{\n    // Integer and fractional parts\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Grid points\n    vec2 pa = i + vec2(0, 0);\n    vec2 pb = i + vec2(1, 0);\n    vec2 pc = i + vec2(0, 1);\n    vec2 pd = i + vec2(1, 1);\n    \n    // Gradient vectors\n    vec2 ga = random_unit(pa);\n    vec2 gb = random_unit(pb);\n    vec2 gc = random_unit(pc);\n    vec2 gd = random_unit(pd);\n    \n    // Offset vectors\n    vec2 oa = st - pa;\n    vec2 ob = st - pb;\n    vec2 oc = st - pc;\n    vec2 od = st - pd;\n\n    // Dot products\n    float da = dot(ga, oa);\n    float db = dot(gb, ob);\n    float dc = dot(gc, oc);\n    float dd = dot(gd, od);\n    \n    // Interpolation\n    vec2 t = smoothstep(0., 1., f);\n    return bilerp(da, db, dc, dd, t.x, t.y);\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec3 yellow = vec3(255.0/255.0, 248.0/255.0, 31.0/255.0);\n    vec3 midnight = vec3(204.0/255.0, 105.0/255.0, 0.0/255.0);\n    \n    // Time varying pixel color\n    vec2 uvOffset = vec2(0,0);\n    uvOffset += vec2(noise(uv*10.0 + iTime));\n    uvOffset += vec2(noise(uv*15.6 + iTime*vec2(-0.5,-0.8)));\n    uvOffset += vec2(0.3,0.8)*iTime;\n    float val = noise(uv * 40.0 + uvOffset)+0.5+ 0.11*sin(iTime*0.6);\n    vec3 col = vec3(mix(midnight, yellow, val));\n   \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}