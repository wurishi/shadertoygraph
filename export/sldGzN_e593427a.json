{"ver":"0.1","info":{"id":"sldGzN","date":"1635834007","viewed":157,"name":"Wave184","username":"FoRenard","description":"Wave184","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 4\n#define BB 3\n\nfloat hash(vec2 n)\n{\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nvec2 hash2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\nfloat gnoise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( hash2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( hash2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat sdCircle(vec2 p,vec2 st,float r)\n{\n    return length(p-st)-r;\n}\n\nconst mat4x3[] pcol=mat4x3[](\n    mat4x3(0.5, 0.5, 0.5,\n           0.5, 0.5, 0.5,\n           2.0, 1.0, 0.0,\n           0.50, 0.20, 0.25\n    ),\n    mat4x3(0.8, 0.5, 0.4,\n           0.2, 0.4, 0.2,\n           2.0, 1.0, 1.0,\n           0.50, 0.20, 0.25\n    ),\n    mat4x3(0.5, 0.5, 0.5,\n           0.5, 0.5, 0.5,\n           1.0, 1.0, 1.0,\n           0.30, 0.20, 0.20\n    )\n);\n\nvec3 palette(float t,int id)\n{\n    vec3 a=pcol[id][0];\n    vec3 b=pcol[id][1];\n    vec3 c=pcol[id][2];\n    vec3 d=pcol[id][3];\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\nvec3 gray(vec3 c){\n    return vec3(dot(c,vec3(0.298912,0.586611,0.114478)));\n}\nvec3 sepia(vec3 c){\n    return gray(c)*vec3(1.07,0.74,0.43);\n}\nint map(vec2 uv,float t)\n{\n    int id=0;\n    float i=t*1.2;\n\n    bool c=sdCircle(uv,vec2(0.0,0.5),0.3)<0.0;\n    bool s=uv.y-(0.5+sin(uv.x*10.0+i*2.0)*0.1)<0.0;\n    bool w1=uv.y-gnoise(vec2(uv.x-i*0.1,1.0))*0.5+0.1<0.0;\n    bool w8=uv.y-gnoise(vec2(uv.x+i*0.3,8.0))*0.5+0.3<0.0;\n    bool w4=uv.y-gnoise(vec2(uv.x-i*0.3,4.0))*0.5+0.5<0.0;\n    \n    id=c?s?1:2:id;\n    id=w1?3:id;\n    id=w8?4:id;\n    id=w4?5:id;\n    \n    return id;\n}\nvec3 render(in vec2 uv,float t)\n{\n    \n    vec3 col;\n    switch(map(uv,t))\n    {\n        case 0:\n            col=palette(uv.y*0.1+0.96,0);\n            break;\n        case 1:\n            col=palette(-uv.y*0.5+0.0,1);\n            break;\n        case 2:\n            col=palette(uv.y*0.5+0.5,2);\n            break;\n        case 3:\n            col=palette(uv.y*0.8+0.4,1);\n            break;\n        case 4:\n            col=palette(-uv.y*0.7+0.5,2);\n            break;\n        case 5:\n            col=palette(uv.y*0.6+0.2,1);\n            break;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cols=vec3(0.0);\n    \n    for( int b=0; b<BB; b++ )\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 uv = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n\n        vec3 col=render(uv,iTime-1.5*float(b)/float(BB));\n        cols+=col;\n    }\n    \n    cols/=float(AA*AA*BB);\n    \n    /// postprocess\n    cols=mix(cols,sepia(cols),0.1);\n    cols*=1.0+0.1*sin(hash(fragCoord));\n    \n    \n    \n    fragColor = vec4(cols,1.0);\n}\n","name":"Image","description":"","type":"image"}]}