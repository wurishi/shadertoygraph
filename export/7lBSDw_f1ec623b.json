{"ver":"0.1","info":{"id":"7lBSDw","date":"1627787330","viewed":74,"name":"Morphing Prototype Shader","username":"NotTofuFood","description":"A shader I made for a game jam.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","morph","combine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BG_C vec4(0.6,0.8,0.9,1.)\n\n//SDF from https://iquilezles.org/articles/distfunctions2d\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat sdCross( in vec2 p, in vec2 b, float r ) \n{\n    p = abs(p); p = (p.y>p.x) ? p.yx : p.xy;\n    vec2  q = p - b;\n    float k = max(q.y,q.x);\n    vec2  w = (k>0.0) ? q : vec2(b.y-p.x,-k);\n    return sign(k)*length(max(w,0.0)) + r;\n}\n\n// Smooth Union Function from https://iquilezles.org/articles/distfunctions\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// Simplex 2D noise\n// GLSL Function from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = 2.*(gl_FragCoord.xy-.5*iResolution.xy)/iResolution.y;\n\n    vec2 camera_pos = uv;\n    \n    float cube = sdBox(camera_pos + vec2(0., cos(iTime)*.2), vec2(.5));\n    float cube_subtract = sdBox(camera_pos + vec2(0., cos(iTime)*.2), vec2(.6));\n    \n    float sphere = sdCircle(camera_pos+vec2(.5,.0) - vec2(cos(iTime)*.2), .3) ;\n    float sphere_subtract = sdCircle(camera_pos+vec2(.5,.0) - vec2(cos(iTime)*.2), .33);\n\n    float final_cube = opSubtraction(cube * snoise(uv + iTime*.3), cube_subtract);\n    \n    float final_sphere = opSubtraction(sphere, sphere_subtract);\n\n    float depth = opSmoothUnion(final_cube, final_sphere, .1);\n\n    vec3 color = vec3(1.0) - sign(depth);\n    \n    if(depth <= 0.01) {\n        fragColor = vec4(color,1.0);\n    } else {\n        fragColor = BG_C;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}