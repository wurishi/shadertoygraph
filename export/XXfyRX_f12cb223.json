{"ver":"0.1","info":{"id":"XXfyRX","date":"1726463379","viewed":57,"name":"My first shader pipboy3000","username":"pipboy3000","description":"My first shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(in float t) {\n\n    vec3 a = vec3(0.0, 0.7843, 1.0);\n    vec3 b = vec3(0.608, -0.442, 0.888);\n    vec3 c = vec3(0.5176, 1.0, 0.9608);\n    vec3 d = vec3(0.2373, 0.0627, 0.0627);\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat smin(float a, float b, float k) {\n    k *= 2.0;\n    float x = b - a;\n    return 0.5 * (a + b - sqrt(x * x + k * k));\n}\n\nmat2 rot2D(in float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(in vec3 p, in float r) {\n    return length(p) - r;\n}\n\n\nfloat map(in vec3 p) {\n\n    vec3 rotatedP = p;\n    vec3 q = p;\n    q = fract(p) - 0.5;\n\n    rotatedP.xz *= rot2D(-iTime);\n    \n    vec3 spherePos = vec3(0.0, 0.0, iTime);\n    float sphere = sdSphere(spherePos , .5);\n\n    vec3 boxPos = vec3(0., 0., 0.);\n    float box = sdBox(q - boxPos, vec3(0.01, 0.05, .01));\n\n    //float ground = p.y + 1.;\n\n    return box;\n\n    // return min(min(box, sphere), ground);\n\n    // return sphere;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n\n    vec3 rayOrigin = vec3(iTime/5., iTime, 0);\n    vec3 rayDirection = normalize(vec3((uv + 2./sin(iTime / 3.)), sin(iTime / 2.) / 8.) + 1. );\n    rayDirection.xz *= rot2D(-iTime/10.);\n    rayDirection.xy *= rot2D(-iTime/10.);\n    float totalDistance = 0.;\n    vec3 col = vec3(0);\n\n    for(int i = 0; i < 100; i++) {\n\n        vec3 p = rayOrigin + rayDirection * totalDistance;\n\n        float d = map(p);\n\n        if(d < 0.001)\n            break;\n\n        totalDistance += d;\n\n        if(totalDistance > 100.)\n            break;\n    }\n\n    col = vec3(totalDistance * 0.01) * palette(iTime / 10.);\n    // col = palette(totalDistance / 10.);\n\n    vec3 inverted = vec3(1.) - col;\n\n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}