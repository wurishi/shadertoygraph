{"ver":"0.1","info":{"id":"Xdt3RN","date":"1448391932","viewed":1246,"name":"Soapy Bubble","username":"mr5iveThou5and","description":"example of an soap bubble","likes":31,"published":1,"flags":0,"usePreview":0,"tags":["bubble","soap","irridescent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Trying to make some kind of 'Soapy Bubble' like:\n// http://static1.squarespace.com/static/50bd1127e4b035a0352e9061/5190ad8be4b0f18fde0fb526/5190ad8de4b0d1dfab8143c7/1368436110791/BubbleDev_001_0011.jpg\n#define MINDIST  0.001\n\nvec3 iridescent( in float ramp_p )\t// https://www.itp.uni-hannover.de/~zawischa/ITP/bilder/chitin1S.png\n{\n    ramp_p = fract(ramp_p);\t// Wrap values 0-1\n    vec3 col0, col1;\n    \n    if( ramp_p < 0.05 )\n    {col0 = vec3(0.33, 0.49, 0.50);col1 = vec3(0.27, 0.33, 0.48);}\n    if( ramp_p >= 0.05 && ramp_p < 0.1 )\n    {col0 = vec3(0.27, 0.33, 0.48);col1 = vec3(0.74, 0.77, 0.81);}\n    if( ramp_p >= 0.1 && ramp_p < 0.15 )\n    {col0 = vec3(0.74, 0.77, 0.81);col1 = vec3(0.81, 0.58, 0.21);}\n    if( ramp_p >= 0.15 && ramp_p < 0.2 )\n    {col0 = vec3(0.81, 0.58, 0.21);col1 = vec3(0.37, 0.44, 0.13);}\n    if( ramp_p >= 0.2 && ramp_p < 0.25 )\n    {col0 = vec3(0.37, 0.44, 0.13);col1 = vec3(0.00, 0.18, 0.72);}\n    if( ramp_p >= 0.25 && ramp_p < 0.3 )\n    {col0 = vec3(0.00, 0.18, 0.72);col1 = vec3(0.27, 0.74, 0.59);}\n    if( ramp_p >= 0.3 && ramp_p < 0.35 )\n    {col0 = vec3(0.27, 0.74, 0.59);col1 = vec3(0.87, 0.67, 0.16);}\n    if( ramp_p >= 0.35 && ramp_p < 0.4 )\n    {col0 = vec3(0.87, 0.67, 0.16);col1 = vec3(0.89, 0.12, 0.43);}\n    if( ramp_p >= 0.4 && ramp_p < 0.45 )\n    {col0 = vec3(0.89, 0.12, 0.43);col1 = vec3(0.11, 0.13, 0.80);}\n    if( ramp_p >= 0.45 && ramp_p < 0.5 )\n    {col0 = vec3(0.11, 0.13, 0.80);col1 = vec3(0.00, 0.60, 0.28);}\n    if( ramp_p >= 0.5 && ramp_p < 0.55 )\n    {col0 = vec3(0.00, 0.60, 0.28);col1 = vec3(0.55, 0.68, 0.15);}\n    if( ramp_p >= 0.55 && ramp_p < 0.6 )\n    {col0 = vec3(0.55, 0.68, 0.15);col1 = vec3(1.00, 0.24, 0.62);}\n    if( ramp_p >= 0.6 && ramp_p < 0.65 )\n    {col0 = vec3(1.00, 0.24, 0.62);col1 = vec3(0.53, 0.15, 0.59);}\n    if( ramp_p >= 0.65 && ramp_p < 0.7 )\n    {col0 = vec3(0.53, 0.15, 0.59);col1 = vec3(0.00, 0.48, 0.21);}\n    if( ramp_p >= 0.7 && ramp_p < 0.75 )\n    {col0 = vec3(0.00, 0.48, 0.21);col1 = vec3(0.18, 0.62, 0.38);}\n    if( ramp_p >= 0.75 && ramp_p < 0.8 )\n    {col0 = vec3(0.18, 0.62, 0.38);col1 = vec3(0.80, 0.37, 0.59);}\n    if( ramp_p >= 0.8 && ramp_p < 0.85 )\n    {col0 = vec3(0.80, 0.37, 0.59);col1 = vec3(0.77, 0.23, 0.39);}\n    if( ramp_p >= 0.85 && ramp_p < 0.9 )\n    {col0 = vec3(0.77, 0.23, 0.39);col1 = vec3(0.27, 0.38, 0.32);}\n    if( ramp_p >= 0.9 && ramp_p < 0.95 )\n    {col0 = vec3(0.27, 0.38, 0.32);col1 = vec3(0.10, 0.53, 0.50);}\n    if( ramp_p >= 0.95 && ramp_p < 1. )\n    {col0 = vec3(0.10, 0.53, 0.50);col1 = vec3(0.33, 0.49, 0.50);}\n    \n    float bias = 1.-fract(ramp_p*20.);\n    bias = smoothstep(0., 1., bias);\n    vec3 col = mix(col1, col0, bias);\n    return pow(col,vec3(0.8));\n}\n// hash and noise functions from iq's example: https://www.shadertoy.com/view/4sfGzS\nfloat hash( float n ) { return fract(sin(n)*753.5453123); }\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n\nfloat distfield(vec3 pos)\n{\n    return length(pos)-1.125+ noise((pos+vec3(0, 0, iTime/3.)) * 2.0) * 0.153;\n}\n\nvec3 soap_p( in vec3 p )\t// Sine Puke from WAHa_06x36\n{\n    p *= 2.1276764;\t// Frequency\n \tfloat ct = iTime/0.00675;\t// Speed of Oily Film movement\n\tfor(int i=1;i<115;i++)\n\t{\n\t\tvec3 newp = p;\n\t\tnewp.x+=0.45/float(i)*cos(float(i)*p.y+(ct)*0.3/40.0+0.23*float(i))-432.6;\n        newp.y+=0.45/float(i)*sin(float(i)*p.x+(ct)*0.3/50.0+0.23*float(i-66))+64.66;\n        newp.z+=0.45/float(i)*cos(float(i)*p.x-p.y+(ct)*0.1/150.0+0.23*float(i+6))-56. + ct/320000.;\n        p = newp;\n\t}\n    vec3 col = vec3(0.5*sin(1.*p.x)+0.5, 0.5*sin(1.0*p.y)+0.5, 1.*sin(.8*p.z)+0.5);\n    col = vec3( col.x + col.y + col.z ) / 3.;\t// Just luminance\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\n    vec2 uv = -1.+2. * fragCoord.xy/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\t// Aspect Correction\n\n    vec3 rayOrigin = vec3(0, 0, 1.6);\n    vec3 rayDir = vec3(uv.x, -uv.y, -1.);\n    \n    float totalDist = 0.0;\n    float dist = MINDIST;\n    vec3 pos = rayOrigin;\n    for(int i = 0; i < 200; i++)\n    {\n        if(dist < MINDIST || totalDist > 50.)\n            break;\t// Found Intersection or Missed Entirely\n        dist = distfield(pos);\n        totalDist += dist;\n        pos += dist * rayDir;\n    }\n    fragColor = vec4(vec3(0.018),1.);\t// BG Colour\n    if(dist < MINDIST) // Found Intersection\n    {\n        // Calc distancefield gradient\n        vec2 eps = vec2(MINDIST, -MINDIST);\n        vec3 normal = normalize(\n        eps.xyy * distfield(pos + eps.xyy) + \n        eps.yyx * distfield(pos + eps.yyx) + \n        eps.yxy * distfield(pos + eps.yxy) + \n        eps.xxx * distfield(pos + eps.xxx));\n        \n        // Schlick Fresnel http://filmicgames.com/archives/557\n\t\tvec3 I = normalize(rayOrigin-pos);\t// Incident Vector\n        float fresnel = 1.-dot(normal, I);\n        fresnel = pow(fresnel, 4.25);\n        fresnel = fresnel + 0.075 * (1. - fresnel);\n        vec3 ref = reflect(I,normal);\t// Reflection Vector\n        vec3 spec = vec3(texture( iChannel0, ref ));\t// Cube Map Reflection\n        spec = max(vec3(0.), spec-vec3(0.7575)) + pow(spec*1.2, vec3(4.5)) * vec3(1.2,1.1,0.6);// + vec3(0.1385);                 \n        spec *= fresnel*0.5;\n        vec3 soap_col = soap_p(pos);\t// Soapy oil film\n    \tsoap_col = iridescent(soap_col.x);\t// Map to iridescent colour rmap\n        soap_col = pow(fresnel, 0.85)*pow(soap_col,vec3(0.985));\n        \n        // Surface Colour\n        fragColor = vec4( spec + soap_col, 1.); \n    }\n}","name":"","description":"","type":"image"}]}