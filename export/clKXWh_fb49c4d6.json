{"ver":"0.1","info":{"id":"clKXWh","date":"1686793059","viewed":64,"name":"Melting the Circles","username":"JackCAyman","description":"One of my first shaders.\n\nMostly playing around with Inigo Quilez's sdMoon and cosine palette.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.25, 0.25, 0.25);\n    vec3 b = vec3(0.75, 0.75, 0.75);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdMoon(vec2 p, float d, float ra, float rb )\n{\n    p.x = abs(p.x);\n    p.y = abs(p.y);\n    \n    float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n    \n    float b = sqrt(max(ra*ra-a*a,0.0));\n    \n          \n    return max( (length(p)-ra),\n               -(length(p-vec2(d,d))-rb));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord* 2.0 - iResolution.xy)/ iResolution.y;\n    uv *=1.7;\n    \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    float ra = 1.0;\n    float rb = 0.5;\n\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * 1.5) - 0.5;\n        float di = (1.5 * cos(iTime/3.0))+1.5;\n\n        float c = sdMoon(uv, di, ra, rb);\n        \n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        c = sin(c*8. + iTime)/8.;\n        c=abs(c);\n        c = pow(0.007 / c, 1.);\n        finalColor += col * c;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}