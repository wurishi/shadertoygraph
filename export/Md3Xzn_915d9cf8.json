{"ver":"0.1","info":{"id":"Md3Xzn","date":"1457490500","viewed":137,"name":"Shadow Testings","username":"gsitcia","description":"A test for shadows. Use mouse to move camera.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shadow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat rpBox( vec3 p, vec3 c ) {\n    vec3 q = mod(p,c)-0.5*c;\n    return udBox( p, vec3(0.5, 0.5, 0.5) );\n}\n\nfloat sdPlane( vec3 p )\n{\n  // n must be normalized\n  return p.y;\n}\n\nfloat map( vec3 p ) {\n    float d1 = sdPlane( p );\n    float d2 = sdSphere( p - vec3(0.0, 0.5, 0.0), 1.0);\n    float d3 = udBox( p - vec3(-1.0, 1.0, 0.0), vec3(1.7, 2.0, 2.0) );\n    float d4 = sdSphere( p - vec3(0.0, 0.5, 0.0), 2.0);\n    return min(max(-d2, max(d3, d4)), d1);\n}\n\nfloat shadow( vec3 p, vec4 l ) {\n    vec3 dr = normalize(p - l.xyz);\n    float dst = 0.0;\n    float res = 1.0;\n    for (int i = 0; i < 100; ++i) {\n        float dt = map(l.xyz);\n        l.xyz += dr * dt * 0.6;\n        dst += dt * 0.6;\n        if (dt < 0.0001) {\n            if (distance(l.xyz, p) < 0.001) {\n                return res;\n            } else {\n            \treturn 0.0;\n            }\n        }\n        res = min(res, 4.0 * dt * dst / length(p - l.xyz));\n    }\n    return res * l.w;\n}\n\nfloat lights( vec3 p, vec4 l ) {\n    float dt = map( p );\n    vec3 ds;\n    ds.x = min(map( p + vec3(dt, 0.0, 0.0) ), map( p - vec3(dt, 0.0, 0.0) ));\n    ds.y = min(map( p + vec3(0.0, dt, 0.0) ), map( p - vec3(0.0, dt, 0.0) ));\n    ds.z = min(map( p + vec3(0.0, 0.0, dt) ), map( p - vec3(0.0, 0.0, dt) ));\n    ds = normalize(-1.0 * ds);\n    vec3 ld = normalize(p - l.xyz);\n    float li = dot(ds, ld);\n    return li * l.w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec3 id = vec3(1.0, 1.0, 1.0);\n    \n    float mindist = min(iResolution.x, iResolution.y);\n    \n    vec3 uv = vec3((gl_FragCoord.xy - iResolution.xy / 2.0) / mindist, 0.0);\n    \n    // vec3 eye = vec3((2.0 * (iMouse.xy - iResolution.xy / 2.0) / mindist) + vec2(0.0, 1.0), -2.5);\n    \n    vec3 eye = vec3(3.0 * sin(iMouse.x * 3.141592 / 360.0), (iResolution.y - iMouse.y) / 45.0 , 3.0 * cos(iMouse.x * 3.141592 / 360.0));\n    \n    float fl = 1.0;\n    \n    vec3 fo = normalize(-1.0 * eye);\n    \n    // vec3 up = normalize(vec3(0.0, 1.0, 0.0)); // 2 point perspective\n    \n    vec3 up;\n    \n    up.xz = -1.0 * fo.xz;\n    \n    up.xz *= fo.y / length(fo.xz);\n    \n    up.y = length(fo.xz); // 3 point perspective\n    \n    vec3 si = cross(up, fo);\n    \n    uv = eye + fl * fo + uv.x * si + uv.y * up;\n    \n    vec3 dr = uv - eye;\n    \n    dr = dr / length(dr);\n    \n    float dt = 0.0;\n    \n    for (int i = 0; i < 100; ++i) {\n        dt = map( uv );\n        if (dt < 0.0001) {\n            dt = float(i);\n            break;\n        }\n        uv = uv + dr * dt * 0.8;\n    }\n    \n    // reflect\n    /*\n    if (abs(uv.y) > 0.001) {\n    \tdt = map( uv );\n    \t\n    \tvec3 ds;\n    \tds.x = min(map( uv + vec3(dt, 0.0, 0.0) ), map( uv - vec3(dt, 0.0, 0.0) ));\n    \tds.y = min(map( uv + vec3(0.0, dt, 0.0) ), map( uv - vec3(0.0, dt, 0.0) ));\n    \tds.z = min(map( uv + vec3(0.0, 0.0, dt) ), map( uv - vec3(0.0, 0.0, dt) ));\n    \tds = normalize(-1.0 * ds);\n    \t\n    \tfloat kfe = 2.0 * dot(ds, -dr) / dot(ds, ds);\n    \t\n    \tdr = kfe * dr - ds;\n    \t\n    \tdt = 1.0;\n    \t\n    \tfor (int i = 0; i < 100; ++i) {\n    \t    if (dt < 0.0001) {\n    \t        dt = float(i);\n    \t        break;\n    \t    }\n    \t    uv = uv + dr * dt * 0.8;\n            dt = map( uv );\n    \t}\n    }\n    \n    // vec3 dc = vec3(dt, dt, dt) / 50.0;\n   \t\n    /* if (dt == 100.0) {\n       \tdc = vec3(0.0, 1.0, 0.5);\n    } else {\n        dc = vec3(dt, dt, dt) / 50.0;\n    } */\n    \n    vec4 light = vec4(3.0 * sin(iTime * 3.141592 / 45.0), 2.0, 3.0  * cos(iTime * 3.141592 / 45.0), 1.0);\n    \n    vec3 dc = id * (shadow( uv, light ) * (lights( uv, light ) + 0.1));\n    \n    fragColor = vec4(dc, 0.0);\n}","name":"Image","description":"","type":"image"}]}