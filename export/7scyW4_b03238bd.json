{"ver":"0.1","info":{"id":"7scyW4","date":"1653554273","viewed":104,"name":"n-body","username":"quillaja","description":"A simple 2D n^2 n-body simulator.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["nbody"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// draws each body.\n\nconst float radius = 0.0;\nconst float strokeWidth = 1.0;\n\nconst vec4 fill =    vec4(1, 1, 1, 1);\nconst vec4 stroke =  vec4(1, 0, 1, 1);\nconst vec4 bgColor = vec4(0, 0, 0, 1);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //if (iFrame <= 0) return;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = vec4(bgColor);\n    \n    for(uint i=0u; i<N_BODIES; i++) {\n        vec2 bodyCoord = coordFromIdx(i, iResolution.x);\n        vec2 bodyUV = bodyCoord/iResolution.xy ;\n        vec2 pos = texture(iChannel0, bodyUV).xy * iResolution.xy;\n        float m = texture(iChannel1, bodyUV).z * massLimits.y;\n        float signedDist = length(pos-fragCoord) - (radius + (m/2.0));\n        if (signedDist < strokeWidth) {\n            fragColor = mix(fill, stroke, smoothstep(0.0, strokeWidth, signedDist));\n        }\n    }\n }","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// various constants and functions.\n\nconst uint N_BODIES = 200u; // use this to change the number of bodies.\nconst float G = 1.414;\n\nconst float tMult = 4.0; // delta time multiplier\n\nconst vec2 massLimits = vec2(1.0, 10.0); // min/max\nconst float maxVel = 10.0 * tMult; // m/s\nconst float maxAcc = 100.0 * tMult; // m/s^2\n\nvec2 rngstate = vec2(0);\nfloat rngadv = 0.0;\n\nvoid seed(vec2 uv, float advance) {\n    rngstate = uv;\n    rngadv = advance + 0.1;\n}\n\n// in [0,1]\nfloat rand(){\n    rngstate += vec2(fract(rngadv*1.414), fract(rngadv*3.1515));\n    return fract(sin(dot(rngstate, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// vec2 in [-1,1]\nvec2 rand2d() {\n    return normalize(vec2(rand()*2.0-1.0, rand()*2.0-1.0));\n}\n\nuint idxFromCoord(vec2 fragCoord, float span) {\n    return uint(floor(fragCoord.x) + floor(fragCoord.y) * span);\n}\n\nvec2 coordFromIdx(uint i, float span) {\n    uint y = i / uint(span);\n    uint x = i % uint(span);\n    return vec2(float(x)+0.5, float(y)+0.5);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This buffer updates the position and velocity of each body.\n// storage: vec4( posX, posY, velX, velY)\n\nvec2 denormalizeVel(vec2 nvel) {\n    return (2.0 * nvel - 1.0) * maxVel;\n}\n\nvec2 normalizeVel(vec2 v) {\n    return (v/maxVel + 1.0) / 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // terminate early if this texel doesn't contribute a \"body\"\n    uint idx = idxFromCoord(fragCoord, iResolution.x);\n    if (idx >= N_BODIES) {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    seed(uv, iTime*2.1);\n    \n    // initialize positions on first frame\n    if ( iFrame <= 0 ) {\n        fragColor = vec4(rand(), rand(), 0.5, 0.5); // 0.5 = 0 vel when denormalized\n        return;\n    }\n    \n    vec4 tex = texture(iChannel0, uv);\n    vec2 acc = (texture(iChannel1, uv).xy * 2.0 - 1.0) * maxAcc; //100=maxAcc\n    \n    vec2 pos = tex.xy * iResolution.xy; // denormalize position\n    vec2 vel = denormalizeVel(tex.zw) + acc * iTimeDelta * tMult;\n    vel = clamp(vel, -maxVel, maxVel);\n    //vel = clamp(length(vel), -maxVel, maxVel) * normalize(vel);\n    pos += vel * iTimeDelta * tMult;\n    \n    fragColor = vec4(pos/iResolution.xy, normalizeVel(vel)); // normalize position\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// This buffer accumulates the gravitational force on each body,\n// but stores it in the buffer as an acceleration.\n// storage: vec4( accX, accY, mass, 0)\n\n// force exerted on a by b.\nvec2 F(vec2 a, float ma, vec2 b, float mb) {\n    // F = G*Ma*Mb / d^2\n    float d = distance(a,b);\n    float dsq = max(1.0, d*d);\n    return normalize(b-a) * ((G * ma * mb) / dsq);\n}\n\nvec2 posIdx(uint idx) {\n    vec2 uv = coordFromIdx(idx, iResolution.x)/iResolution.xy;\n    vec2 p = texture(iChannel0, uv).xy * iResolution.xy;\n    return p;\n}\n\nfloat massIdx(uint idx) {\n    vec2 uv = coordFromIdx(idx, iResolution.x)/iResolution.xy;\n    float m = texture(iChannel1, uv).z * massLimits.y;\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    // terminate early if this texel doesn't contribute a \"body\"\n    uint thisIdx = idxFromCoord(fragCoord, iResolution.x);   \n    if (thisIdx >= N_BODIES) {\n        discard;\n    }\n\n    vec2 uv = fragCoord/iResolution.xy;\n    seed(uv, iTime);\n\n    // initalize mass on first frame\n    if (iFrame <= 0) {\n        float m = rand()*(massLimits.y-massLimits.x) + massLimits.x;\n        fragColor = vec4(0.5, 0.5, m/massLimits.y, 0); // z = mass\n        return;\n    }\n    \n    vec2 a = posIdx(thisIdx);\n    float ma = massIdx(thisIdx);\n    \n    vec2 totalF = vec2(0);\n    for( uint i=0u; i<N_BODIES; i++) {\n        if (i==thisIdx) continue;\n        vec2 b = posIdx(i);\n        float mb = massIdx(i);\n        totalF += F(a, ma, b, mb);\n    }\n    \n    totalF /= ma;\n    vec2 totalAcc = clamp(length(totalF), -maxAcc, maxAcc) * normalize(totalF);\n    vec2 normAcc = ((totalAcc/maxAcc)+1.0) / 2.0;\n    fragColor = vec4(normAcc, ma/massLimits.y, 0);\n}","name":"Buffer B","description":"","type":"buffer"}]}