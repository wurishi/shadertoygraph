{"ver":"0.1","info":{"id":"dlfGDn","date":"1671729300","viewed":284,"name":"Fibres","username":"Alpaga","description":"Fibers","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["transparency","fibers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Color and opacity of point p.\n// Color in .rgb channels, opacity in .a channel\nvec4 pointColor(vec3 p, float t) {\n    // Translate\n    p.xy += vec2(cos(2.1*p.z),sin(1.5*p.z));\n    // Scale\n    p.xy *= 1.+.3*sin(1.1*p.z);\n    // Random opacity\n    float op = texture(iChannel0, .1*p.xy).r;\n    // Pulse\n    float pulse = smoothstep(4.,5.,mod(p.z+6.*iTime+op,5.));\n    op = mix(op,1.,pulse);\n    \n    // Tube shape\n    float l = length(p.xy);\n    op *= smoothstep(.5,.3,l);\n    \n    // Random color\n    vec3 col = (.5+.5*pulse)*(.5+.5*cos(vec3(1,2,3)+.8*cos(10.*vec3(1,2,3)*p.xyy)+.5*p.z));\n\n    return vec4(col,pow(op,2.));\n}\n\n// Accumulates colors of points along the ray\n// depending on their opacities.\nvec3 rayColor(vec3 ro, vec3 rd) {\n    const float dt = .01;\n    vec3 color;\n    float tr = 1.;\n    float t = dt*texture(iChannel0,rd.xy).r;\n\n    for(; t<3.; t+=dt) {\n        vec4 pc = pointColor(ro+t*rd, t);\n        \n        // More transparent close to camera\n        float fade = .5+.5*smoothstep(0.,.7,t);\n        pc.a *= fade;\n        \n        float da = pow(max(1.-pc.a,0.),dt);\n        color += 2.*pc.rgb*tr*(1.-da);\n        tr *= da;\n        if(tr<.001)break;\n    }\n    // Background color\n    vec3 p = ro+3.*rd;\n    float x = smoothstep(.5,1.,sin(10.*length(p.xy-vec2(-cos(2.1*p.z),-sin(1.5*p.z)))));\n    color += mix(vec3(0,0,.02),vec3(0,0,.06),x)*tr;\n    return color;\n}\nmat3 viewMatrix(vec3 forward, vec3 up) {\n    vec3 w = -normalize(forward);\n    vec3 u = cross(up, w);\n    vec3 v = cross(w, u);\n    return mat3(u,v,w);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float t = 2.*iTime;\n    \n    vec3 cam = vec3(-.5*sin(iTime),0.,-t);\n    vec3 forward = vec3(.5*sin(iTime),0,-1.);\n    if(iMouse.z>0.) {\n        float a = 2.*iMouse.x/iResolution.x-1.;\n        float b = 2.*iMouse.y/iResolution.y-1.;\n        forward = vec3(sin(a)*cos(b),sin(b),-cos(a)*cos(b));\n    }\n    \n    vec3 up = vec3(0,1,0);\n    mat3 m = viewMatrix(forward,up);\n    \n    vec2 uv = 1.5*(fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 dir = m*normalize(vec3(uv,-1));\n\n    vec3 col = rayColor(cam, dir);\n\n    col = pow(col, vec3(1./2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}