{"ver":"0.1","info":{"id":"7t2XRm","date":"1627376428","viewed":87,"name":"Celestial Globe","username":"CrescentMax","description":"A simple ray tracing scene.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//============================================================================\n// Constants.\n//============================================================================\n\nconst float PI = 3.1415926536;\n\nconst vec3 BACKGROUND_COLOR = vec3( 0.1, 0.2, 0.6 );\n\n// Vertical field-of-view angle of camera. In radians.\nconst float FOVY = 50.0 * PI / 180.0;\n\n// Use this for avoiding the \"epsilon problem\" or the shadow acne problem.\nconst float DEFAULT_TMIN = 10.0e-4;\n\n// Use this for tmax for non-shadow ray intersection test.\nconst float DEFAULT_TMAX = 10.0e6;\n\n// Equivalent to number of recursion levels (0 means ray-casting only).\n// We are using iterations to replace recursions.\nconst int NUM_ITERATIONS = 2;\n\n// Constants for the scene objects.\nconst int NUM_LIGHTS = 2;\nconst int NUM_MATERIALS = 5;\nconst int NUM_PLANES = 1;\nconst int NUM_SPHERES = 3;\nconst int NUM_TRIANGLES = 20;\n\n// Constant values for setting up\nconst float NEBULA_HEIGHT = 1.0;\n\n//============================================================================\n// Define new struct types.\n//============================================================================\nstruct Ray_t {\n    vec3 o;  // Ray Origin.\n    vec3 d;  // Ray Direction. A unit vector.\n};\n\nstruct Plane_t {\n    // The plane equation is Ax + By + Cz + D = 0.\n    float A, B, C, D;\n    int materialID;\n};\n\nstruct Sphere_t {\n    vec3 center;\n    float radius;\n    int materialID;\n};\n\nstruct Light_t {\n    vec3 position;  // Point light 3D position.\n    vec3 I_a;       // For Ambient.\n    vec3 I_source;  // For Diffuse and Specular.\n};\n\nstruct Triangle_t {\n    vec3 p1;\n    vec3 p2;\n    vec3 p3;\n    int materialID;\n};\n\nstruct Material_t {\n    vec3 k_a;   // Ambient coefficient.\n    vec3 k_d;   // Diffuse coefficient.\n    vec3 k_r;   // Reflected specular coefficient.\n    vec3 k_rg;  // Global reflection coefficient.\n    float n;    // The specular reflection exponent. Ranges from 0.0 to 128.0.\n};\n\n//----------------------------------------------------------------------------\n// The lighting model used here is similar to that on Slides 8 and 12 of\n// Lecture Topic B08 (Basic Ray Tracing). Here it is computed as\n//\n//     I_local = SUM_OVER_ALL_LIGHTS {\n//                   I_a * k_a +\n//                   k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ]\n//               }\n// and\n//     I = I_local  +  k_rg * I_reflected\n//----------------------------------------------------------------------------\n\n\n//============================================================================\n// Global scene data.\n//============================================================================\nPlane_t Plane[NUM_PLANES];\nSphere_t Sphere[NUM_SPHERES];\nLight_t Light[NUM_LIGHTS];\nTriangle_t Triangle[NUM_TRIANGLES];\nMaterial_t Material[NUM_MATERIALS];\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Initializes the scene.\n/////////////////////////////////////////////////////////////////////////////\nvoid InitScene()\n{\n    // Horizontal plane.\n    Plane[0].A = 0.0;\n    Plane[0].B = 1.0;\n    Plane[0].C = 0.0;\n    Plane[0].D = 0.0;\n    Plane[0].materialID = 0;\n\n    // Vertical plane.\n    // Plane[1].A = 0.0;\n    // Plane[1].B = 0.0;\n    // Plane[1].C = 1.0;\n    // Plane[1].D = 3.5;\n    // Plane[1].materialID = 0;\n\n    // Center bouncing sphere.\n    // Sphere[0].center = vec3( 0.0, abs(sin(2.0 * iTime)) + 1.0, 0.0 );\n    // Sphere[0].radius = 0.5;\n    // Sphere[0].materialID = 1;\n\n    // Circling sphere1.\n    Sphere[0].center = vec3( 1.5 * cos(iTime), 0.5 + NEBULA_HEIGHT, 1.5 * sin(iTime) );\n    Sphere[0].radius = 0.3;\n    Sphere[0].materialID = 2;\n\n    // Circling sphere2.\n    Sphere[1].center = vec3( 1.5 * cos(iTime) + 0.6 * cos(1.5 * iTime + PI / 6.0), \n                             0.5 + NEBULA_HEIGHT + 0.2 * sin(iTime), \n                             1.5 * sin(iTime) + 0.6 * sin(1.5 * iTime + PI / 6.0) );\n    Sphere[1].radius = 0.12;\n    Sphere[1].materialID = 2;\n\n    // Circling sphere3.\n    Sphere[2].center = vec3( 2.8 * cos(2.5 * iTime), \n                             0.5 + NEBULA_HEIGHT + 0.5 * sin(2.5 * iTime), \n                             2.8 * sin(2.5 * iTime) );\n    Sphere[2].radius = 0.2;\n    Sphere[2].materialID = 3;\n\n    // Cube Trianles.\n    Triangle[0].p1 = vec3(-0.5, 1.0, -0.5);\n    Triangle[0].p2 = vec3( 0.5, 0.0, -0.5);\n    Triangle[0].p3 = vec3(-0.5, 0.0, -0.5);\n\n    Triangle[1].p1 = vec3( 0.5, 1.0, -0.5);\n    Triangle[1].p3 = vec3(-0.5, 1.0, -0.5);\n    Triangle[1].p2 = vec3( 0.5, 0.0, -0.5);\n\n    Triangle[2].p1 = vec3( 0.5, 1.0, -0.5);\n    Triangle[2].p2 = vec3( 0.5, 0.0,  0.5);\n    Triangle[2].p3 = vec3( 0.5, 0.0, -0.5);\n\n    Triangle[3].p1 = vec3( 0.5, 1.0, -0.5);\n    Triangle[3].p3 = vec3( 0.5, 0.0,  0.5);\n    Triangle[3].p2 = vec3( 0.5, 1.0,  0.5);\n\n    Triangle[4].p1 = vec3(-0.5, 1.0,  0.5);\n    Triangle[4].p2 = vec3( 0.5, 0.0,  0.5);\n    Triangle[4].p3 = vec3( 0.5, 1.0,  0.5);\n\n    Triangle[5].p1 = vec3(-0.5, 1.0,  0.5);\n    Triangle[5].p3 = vec3( 0.5, 0.0,  0.5);\n    Triangle[5].p2 = vec3(-0.5, 0.0,  0.5);\n\n    Triangle[6].p1 = vec3(-0.5, 0.0, -0.5);\n    Triangle[6].p3 = vec3(-0.5, 1.0,  0.5);\n    Triangle[6].p2 = vec3(-0.5, 0.0,  0.5);\n\n    Triangle[7].p1 = vec3(-0.5, 0.0, -0.5);\n    Triangle[7].p2 = vec3(-0.5, 1.0,  0.5);\n    Triangle[7].p3 = vec3(-0.5, 1.0, -0.5);\n\n    Triangle[8].p1 = vec3(-0.5, 0.0, -0.5);\n    Triangle[8].p2 = vec3( 0.5, 0.0,  0.5);\n    Triangle[8].p3 = vec3(-0.5, 0.0,  0.5);\n\n    Triangle[9].p1 = vec3(-0.5, 0.0, -0.5);\n    Triangle[9].p3 = vec3( 0.5, 0.0,  0.5);\n    Triangle[9].p2 = vec3( 0.5, 0.0, -0.5);\n\n    Triangle[10].p1 = vec3(-0.5, 1.0, -0.5);\n    Triangle[10].p2 = vec3( 0.5, 1.0,  0.5);\n    Triangle[10].p3 = vec3( 0.5, 1.0, -0.5);\n\n    Triangle[11].p1 = vec3(-0.5, 1.0, -0.5);\n    Triangle[11].p3 = vec3( 0.5, 1.0,  0.5);\n    Triangle[11].p2 = vec3(-0.5, 1.0,  0.5);\n\n    vec3 crystal[7] = vec3[]( vec3( 0.0, 1.7, 0.0 ),       // center\n                              vec3( 0.0, 1.1, 0.0 ),       // bottom\n                              vec3( 0.0, 2.3, 0.0 ),       // top\n                              vec3( 0.3 * cos(iTime), 1.7, 0.3 * sin(iTime) ),\n                              vec3(-0.3 * sin(iTime), 1.7, 0.3 * cos(iTime) ),\n                              vec3( 0.3 * sin(iTime), 1.7,-0.3 * cos(iTime) ),\n                              vec3(-0.3 * cos(iTime), 1.7,-0.3 * sin(iTime) ) );\n\n    Triangle[12].p1 = crystal[1];\n    Triangle[12].p2 = crystal[3];\n    Triangle[12].p3 = crystal[4];\n\n    Triangle[13].p1 = crystal[1];\n    Triangle[13].p2 = crystal[3];\n    Triangle[13].p3 = crystal[5];\n\n    Triangle[14].p1 = crystal[1];\n    Triangle[14].p2 = crystal[6];\n    Triangle[14].p3 = crystal[4];\n\n    Triangle[15].p1 = crystal[1];\n    Triangle[15].p2 = crystal[6];\n    Triangle[15].p3 = crystal[5];\n\n    Triangle[16].p1 = crystal[2];\n    Triangle[16].p2 = crystal[3];\n    Triangle[16].p3 = crystal[4];\n\n    Triangle[17].p1 = crystal[2];\n    Triangle[17].p2 = crystal[3];\n    Triangle[17].p3 = crystal[5];\n\n    Triangle[18].p1 = crystal[2];\n    Triangle[18].p2 = crystal[6];\n    Triangle[18].p3 = crystal[4];\n\n    Triangle[19].p1 = crystal[2];\n    Triangle[19].p2 = crystal[6];\n    Triangle[19].p3 = crystal[5];\n\n    // Apply transformation to cube triangles\n    for (int i = 0; i < 12; i++)\n    {\n        Triangle[i].p1.y *= 0.7 * abs(sin(iTime + PI / 2.0));\n        Triangle[i].p2.y *= 0.7 * abs(sin(iTime + PI / 2.0));\n        Triangle[i].p3.y *= 0.7 * abs(sin(iTime + PI / 2.0));\n        Triangle[i].materialID = 1;\n    }\n\n    // Apply transformation to crystal triangles\n    for (int i = 12; i < NUM_TRIANGLES; i++)\n    {\n        // Move up and down\n        Triangle[i].p1.y += 0.5 * (sin(2.0 * iTime));\n        Triangle[i].p2.y += 0.5 * (sin(2.0 * iTime));\n        Triangle[i].p3.y += 0.5 * (sin(2.0 * iTime));\n            \n        // Material\n        Triangle[i].materialID = 4;\n    }\n\n    // Silver material.\n    Material[0].k_d = vec3( 0.5, 0.5, 0.5 );\n    Material[0].k_a = 0.2 * Material[0].k_d;\n    Material[0].k_r = 2.0 * Material[0].k_d;\n    Material[0].k_rg = 0.5 * Material[0].k_r;\n    Material[0].n = 64.0;\n\n    // Gold material.\n    Material[1].k_d = vec3( 0.8, 0.7, 0.1 );\n    Material[1].k_a = 0.2 * Material[1].k_d;\n    Material[1].k_r = 2.0 * Material[1].k_d;\n    Material[1].k_rg = 0.5 * Material[1].k_r;\n    Material[1].n = 64.0;\n\n    // Green plastic material.\n    Material[2].k_d = vec3( 0.0, 0.8, 0.0 );\n    Material[2].k_a = 0.2 * Material[2].k_d;\n    Material[2].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[2].k_rg = 0.5 * Material[2].k_r;\n    Material[2].n = 128.0;\n\n    // Blue frosted material\n    Material[3].k_d = vec3( 0.235, 0.364, 0.866 );\n    Material[3].k_a = 0.2 * Material[2].k_d;\n    Material[3].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[3].k_rg = 0.5 * Material[2].k_r;\n    Material[3].n = 32.0;\n\n    // Rainbow material\n    Material[4].k_d = vec3( abs(cos(iTime + PI / 6.0)), abs(sin(iTime + PI / 3.0)), abs(cos(iTime - PI / 2.0)) );\n    Material[4].k_a = 0.1 * Material[2].k_d;\n    Material[4].k_r = vec3( 1.0, 1.0, 1.0 );\n    Material[4].k_rg = 0.6 * Material[2].k_r;\n    Material[4].n = 64.0;\n\n    // Light 0.\n    Light[0].position = vec3( 4.0, 8.0, -3.0 );\n    Light[0].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[0].I_source = vec3( 0.85, 0.85, 0.85 );\n\n    // Light 1.\n    Light[1].position = vec3( -4.0, 10.0, 0.0 );\n    Light[1].I_a = vec3( 0.1, 0.1, 0.1 );\n    Light[1].I_source = vec3( 0.8, 0.8, 0.8 );\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is such an intersection, outputs the value of t, the position\n// of the intersection (hitPos) and the normal vector at the intersection\n// (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax,\n                     out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n\n    // We have a hit -- output results.\n    t = t0;\n    hitPos = ray.o + t0 * ray.d;\n    hitNormal = normalize( N );\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a plane and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectPlane( in Plane_t pln, in Ray_t ray, in float tmin, in float tmax )\n{\n    vec3 N = vec3( pln.A, pln.B, pln.C );\n    float NRd = dot( N, ray.d );\n    float NRo = dot( N, ray.o );\n    float t0 = (-pln.D - NRo) / NRd;\n    if ( t0 < tmin || t0 > tmax ) return false;\n    return true;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n// If there is one or two such intersections, outputs the value of the\n// smaller t, the position of the intersection (hitPos) and the normal\n// vector at the intersection (hitNormal).\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    vec3 l_o = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(ray.d,  l_o);\n    float c = dot(l_o, l_o) - sph.radius * sph.radius;\n    float d = b * b - 4.0 * a *c;\n    \n    if (d < 0.0) return false;\n    float t_m = (-b-sqrt(d)) / (2.0*a);\n    float t_p = (-b+sqrt(d)) / (2.0*a);\n    if ( (t_m >= tmin && t_m <= tmax) )\n    {\n        t = t_m;\n        hitPos = ray.o + t * ray.d;\n        hitNormal = normalize( l_o + t * ray.d );\n        return true;\n    }\n    else if ( (t_p >= tmin &&  t_p <= tmax) )\n    {\n        t = t_p;\n        hitPos = ray.o + t * ray.d;\n        hitNormal = normalize( l_o + t * ray.d );\n        return true;\n    }\n    return false;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes intersection between a sphere and a ray.\n// Returns true if there is an intersection where the ray parameter t is\n// between tmin and tmax, otherwise returns false.\n/////////////////////////////////////////////////////////////////////////////\nbool IntersectSphere( in Sphere_t sph, in Ray_t ray, in float tmin, in float tmax )\n{\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    vec3 l_o = ray.o - sph.center;\n    float a = dot(ray.d, ray.d);\n    float b = 2.0 * dot(ray.d,  l_o);\n    float c = dot(l_o, l_o) - sph.radius * sph.radius;\n    float d = b * b - 4.0 * a *c;\n    \n    if (d < 0.0) return false;\n    float t_m = (-b-sqrt(d)) / (2.0*a);\n    float t_p = (-b+sqrt(d)) / (2.0*a);\n    if ( (t_m >= tmin && t_m <= tmax) )\n    {\n        return true;\n    }\n    else if ( (t_p >= tmin &&  t_p <= tmax) )\n    {\n        return true;\n    }\n    return false;\n}\n\nbool IntersectTriangle( in Triangle_t tri, in Ray_t ray, in float tmin, in float tmax,\n                      out float t, out vec3 hitPos, out vec3 hitNormal )\n{\n    mat3 cramer;\n    mat3 A;\n    A[0] = tri.p1 - tri.p2;\n    A[1] = tri.p1 - tri.p3;\n    A[2] = ray.d;\n    float detA = determinant(A);\n\n    cramer[0] = tri.p1 - ray.o;\n    cramer[1] = tri.p1 - tri.p3;\n    cramer[2] = ray.d;\n\n    float beta = determinant(cramer) / detA;\n\n    cramer[0] = tri.p1 - tri.p2;\n    cramer[1] = tri.p1 - ray.o;\n    cramer[2] = ray.d;\n\n    float gamma = determinant(cramer) / detA;\n\n    cramer[0] = tri.p1 - tri.p2;\n    cramer[1] = tri.p1 - tri.p3;\n    cramer[2] = tri.p1 - ray.o;\n\n    float t0 = determinant(cramer) / detA;\n\n    if (beta + gamma < 1.0 && beta > 0.0 && gamma > 0.0 && t0 > 0.0 && t0 > tmin && t0 < tmax) {\n        t = t0;\n        hitPos = ray.o + t * ray.d;\n        hitNormal = normalize(cross(tri.p1 - tri.p2, tri.p1 - tri.p3));\n        return true;\n    }\n\n    return false;\n\n}\n\nbool IntersectTriangle( in Triangle_t tri, in Ray_t ray, in float tmin, in float tmax )\n{\n    mat3 cramer;\n    mat3 A;\n\n    A[0] = tri.p1 - tri.p2;\n    A[1] = tri.p1 - tri.p3;\n    A[2] = ray.d;\n    float detA = determinant(A);\n\n    cramer[0] = tri.p1 - ray.o;\n    cramer[1] = tri.p1 - tri.p3;\n    cramer[2] = ray.d;\n\n    float beta = determinant(cramer) / detA;\n\n    cramer[0] = tri.p1 - tri.p2;\n    cramer[1] = tri.p1 - ray.o;\n    cramer[2] = ray.d;\n\n    float gamma = determinant(cramer) / detA;\n\n    cramer[0] = tri.p1 - tri.p2;\n    cramer[1] = tri.p1 - tri.p3;\n    cramer[2] = tri.p1 - ray.o;\n\n    float t0 = determinant(cramer) / detA;\n\n    if (beta + gamma < 1.0 && beta > 0.0 && gamma > 0.0 && t0 > 0.0 && t0 > tmin && t0 < tmax) {\n        return true;\n    }\n\n    return false;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Computes (I_a * k_a) + k_shadow * I_source * [ k_d * (N.L) + k_r * (R.V)^n ].\n// Input vectors L, N and V are pointing AWAY from surface point.\n// Assume all vectors L, N and V are unit vectors.\n/////////////////////////////////////////////////////////////////////////////\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        return light.I_a * mat.k_a +\n               light.I_source * (mat.k_d * N_dot_L + mat.k_r * R_dot_V_pow_n);\n    }\n}\n\nvec3 PhongLighting( in vec3 L, in vec3 N, in vec3 V, in bool inShadow,\n                    in Material_t mat, in Light_t light, in vec2 uv )\n{\n    if ( inShadow ) {\n        return light.I_a * mat.k_a;\n    }\n    else {\n        vec3 R = reflect( -L, N );\n        float N_dot_L = max( 0.0, dot( N, L ) );\n        float R_dot_V = max( 0.0, dot( R, V ) );\n        float R_dot_V_pow_n = ( R_dot_V == 0.0 )? 0.0 : pow( R_dot_V, mat.n );\n\n        vec3 diffuse = texture(iChannel0, uv).rgb;\n        vec3 specular = diffuse;\n\n        return light.I_a * mat.k_a +\n               light.I_source * (diffuse * N_dot_L + specular * R_dot_V_pow_n);\n    }\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Casts a ray into the scene and returns color computed at the nearest\n// intersection point. The color is the sum of light from all light sources,\n// each computed using Phong Lighting Model, with consideration of\n// whether the interesection point is being shadowed from the light.\n// If there is no interesection, returns the background color, and outputs\n// hasHit as false.\n// If there is intersection, returns the computed color, and outputs\n// hasHit as true, the 3D position of the intersection (hitPos), the\n// normal vector at the intersection (hitNormal), and the k_rg value\n// of the material of the intersected object.\n/////////////////////////////////////////////////////////////////////////////\nvec3 CastRay( in Ray_t ray,\n              out bool hasHit, out vec3 hitPos, out vec3 hitNormal, out vec3 k_rg )\n{\n    // Find whether and where the ray hits some object.\n    // Take the nearest hit point.\n\n    bool hasHitSomething = false;\n    float nearest_t = DEFAULT_TMAX;   // The ray parameter t at the nearest hit point.\n    vec3 nearest_hitPos;              // 3D position of the nearest hit point.\n    vec3 nearest_hitNormal;           // Normal vector at the nearest hit point.\n    int nearest_hitMatID;             // MaterialID of the object at the nearest hit point.\n\n    float temp_t;\n    vec3 temp_hitPos;\n    vec3 temp_hitNormal;\n    bool temp_hasHit;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Try interesecting input ray with all the planes and spheres,\n    //   and record the front-most (nearest) interesection.\n    // * If there is interesection, need to record hasHitSomething,\n    //   nearest_t, nearest_hitPos, nearest_hitNormal, nearest_hitMatID.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for ( int i = 0; i < NUM_PLANES; i++ )\n    {\n        temp_hasHit = IntersectPlane( Plane[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                                        temp_t, temp_hitPos, temp_hitNormal );\n        if ( temp_hasHit && temp_t < nearest_t )\n        {\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Plane[i].materialID;\n        }\n        if (!hasHitSomething && temp_hasHit) hasHitSomething = true;\n    }\n    \n    for ( int i = 0; i < NUM_SPHERES; i++ )\n    {\n        temp_hasHit = IntersectSphere( Sphere[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                                        temp_t, temp_hitPos, temp_hitNormal );\n        if ( temp_hasHit && temp_t < nearest_t )\n        {\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Sphere[i].materialID;\n        }\n        if (!hasHitSomething && temp_hasHit) hasHitSomething = true;\n    }\n\n    for ( int i = 0; i < NUM_TRIANGLES; i++ )\n    {\n        temp_hasHit = IntersectTriangle( Triangle[i], ray, DEFAULT_TMIN, DEFAULT_TMAX,\n                                        temp_t, temp_hitPos, temp_hitNormal );\n        if ( temp_hasHit && temp_t < nearest_t )\n        {\n            nearest_t = temp_t;\n            nearest_hitPos = temp_hitPos;\n            nearest_hitNormal = temp_hitNormal;\n            nearest_hitMatID = Triangle[i].materialID;\n        }\n        if (!hasHitSomething && temp_hasHit) hasHitSomething = true;\n    }\n\n\n\n    // One of the output results.\n    hasHit = hasHitSomething;\n    if ( !hasHitSomething ) return BACKGROUND_COLOR;\n\n    vec3 I_local = vec3( 0.0 );  // Result color will be accumulated here.\n\n    /////////////////////////////////////////////////////////////////////////////\n    // TASK:\n    // * Accumulate lighting from each light source on the nearest hit point.\n    //   They are all accumulated into I_local.\n    // * For each light source, make a shadow ray, and check if the shadow ray\n    //   intersects any of the objects (the planes and spheres) between the\n    //   nearest hit point and the light source.\n    // * Then, call PhongLighting() to compute lighting for this light source.\n    /////////////////////////////////////////////////////////////////////////////\n\n    /////////////////////////////////\n    // TASK: WRITE YOUR CODE HERE. //\n    /////////////////////////////////\n    for ( int i = 0; i < NUM_LIGHTS; i++ )\n    {\n        Ray_t shadowRay;\n        shadowRay.o = nearest_hitPos;\n        shadowRay.d = normalize(Light[i].position - nearest_hitPos);\n        float shadowTMax = length(Light[i].position - nearest_hitPos);\n        temp_hasHit = false;\n\n        for ( int j = 0; j < NUM_PLANES; j++ )\n        {\n            if (temp_hasHit) break;\n            temp_hasHit = IntersectPlane( Plane[j], shadowRay, DEFAULT_TMIN, shadowTMax );\n        }\n        \n        for ( int j = 0; j < NUM_SPHERES; j++ )\n        {\n            if (temp_hasHit) break;\n            temp_hasHit = IntersectSphere( Sphere[j], shadowRay, DEFAULT_TMIN, shadowTMax );\n        }\n\n        for ( int j = 0; j < NUM_TRIANGLES; j++ )\n        {\n            if (temp_hasHit) break;\n            temp_hasHit = IntersectTriangle( Triangle[j], shadowRay, DEFAULT_TMIN, shadowTMax );\n        }\n\n\n        vec3 L = normalize(Light[i].position - nearest_hitPos);\n        vec3 N = normalize(nearest_hitNormal);\n        vec3 V = normalize(cross(L, N));\n        I_local += PhongLighting(L, N, V, temp_hasHit, Material[nearest_hitMatID], Light[i]);\n    }\n\n\n\n\n    // Populate output results.\n    hitPos = nearest_hitPos;\n    hitNormal = nearest_hitNormal;\n    k_rg = Material[nearest_hitMatID].k_rg;\n\n    return I_local;\n}\n\n\n\n/////////////////////////////////////////////////////////////////////////////\n// Execution of fragment shader starts here.\n// 1. Initializes the scene.\n// 2. Compute a primary ray for the current pixel (fragment).\n// 3. Trace ray into the scene with NUM_ITERATIONS recursion levels.\n/////////////////////////////////////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitScene();\n\n    // Scale pixel 2D position such that its y coordinate is in [-1.0, 1.0].\n    vec2 pixel_pos = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    // Position the camera.\n    vec3 cam_pos = vec3( 4.5 * sin(0.3 * iTime), 3.0, 4.5 );\n    vec3 cam_lookat = vec3( 0.25, 1.0, 0.0 );\n    vec3 cam_up_vec = vec3( 0.0, 1.0, 0.0 );\n\n\n    // Set up camera coordinate frame in world space.\n    vec3 cam_z_axis = normalize( cam_pos - cam_lookat );\n    vec3 cam_x_axis = normalize( cross(cam_up_vec, cam_z_axis) );\n    vec3 cam_y_axis = normalize( cross(cam_z_axis, cam_x_axis));\n\n    // Create primary ray.\n    float pixel_pos_z = -1.0 / tan(FOVY / 2.0);\n    Ray_t pRay;\n    pRay.o = cam_pos;\n    pRay.d = normalize( pixel_pos.x * cam_x_axis  +  pixel_pos.y * cam_y_axis  +  pixel_pos_z * cam_z_axis );\n\n\n    // Start Ray Tracing.\n    // Use iterations to emulate the recursion.\n\n    vec3 I_result = vec3( 0.0 );\n    vec3 compounded_k_rg = vec3( 1.0 );\n    Ray_t nextRay = pRay;\n\n    for ( int level = 0; level <= NUM_ITERATIONS; level++ )\n    {\n        bool hasHit;\n        vec3 hitPos, hitNormal, k_rg;\n\n        vec3 I_local = CastRay( nextRay, hasHit, hitPos, hitNormal, k_rg );\n\n        I_result += compounded_k_rg * I_local;\n\n        if ( !hasHit ) break;\n\n        compounded_k_rg *= k_rg;\n\n        nextRay = Ray_t( hitPos, normalize( reflect(nextRay.d, hitNormal) ) );\n    }\n\n    fragColor = vec4( I_result, 1.0 );\n}","name":"Image","description":"","type":"image"}]}