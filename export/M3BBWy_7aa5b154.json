{"ver":"0.1","info":{"id":"M3BBWy","date":"1729999278","viewed":82,"name":"MyShader_002814617","username":"swiftwo","description":"- My first attempt on shader\n- This shader implements ambient, diffuse, specular lighting, Fresnel effect, and random noise for dynamic visual effects.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["ambient","diffuse","randomnoise","specularlighting","fresneleffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 generatePattern(in vec2 uv) {\n    float time = iTime * 0.05 + 47.0;\n    vec2 z = -1.0 + 2.0 * uv;\n    z *= 1.5;\n\n    vec3 col = vec3(1.0);\n    for (int j = 0; j < 48; j++) {\n        float s = float(j) / 16.0;\n        float f = 0.2 * (0.5 + 1.0 * fract(sin(s * 20.0)));\n\n        vec2 c = 0.5 * vec2(cos(f * time + 17.0 * s), sin(f * time + 19.0 * s));\n        z -= c;\n        float zr = length(z);\n        float ar = atan(z.y, z.x) + zr * 0.6;\n        z = vec2(cos(ar), sin(ar)) / zr;\n        z += c;\n\n        // 使用石墨色调作为暗色部分Use a graphite/green hue for the dark sections\n        vec3 darkColor = vec3(0.1, 0.1, 0.3); // 石墨色\n        vec3 brightColor = vec3(1.0, 0.8, 0.6);  // 亮色调\n        // 使用 smoothstep 函数增强边缘清晰度Use the smoothstep function to enhance edge clarity\n        float edge = smoothstep(0.3, 0.7, zr);  // 控制边缘的锐利度Controls edge sharpness\n        col -= edge * (0.5 * exp(-10.0 * dot(z, z)) * (0.25 + 0.4 * sin(5.5 + 1.5 * s + mix(darkColor, brightColor, s))));\n    }\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = vec3(0.0);\n\n    // 渐变背景\n    vec3 gradient = mix(vec3(0.2, 0.4, 0.6), vec3(1.0, 0.8, 0.4), uv.y);\n    color = gradient;\n\n    // 菲涅耳效应\n    vec3 viewDir = normalize(vec3(uv - 0.5, 1.0));\n    vec3 normal = vec3(0.0, 0.0, 1.0);\n    float fresnel = pow(1.0 - dot(viewDir, normal), 3.0);\n    color += fresnel * mix(vec3(0.3, 0.5, 0.9), vec3(1.0, 0.5, 0.2), uv.x);\n\n    // 动态光源\n    vec3 lightDir = normalize(vec3(sin(iTime * 0.8), cos(iTime * 1.1), 0.6));\n    float diff = max(dot(normal, lightDir), 0.0);\n    vec3 diffuseColor = vec3(0.8, 0.5, 0.4);\n    color += diff * diffuseColor;\n\n    // 高光\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);\n    vec3 specularColor = vec3(1.0, 0.9, 0.7);\n    color += spec * specularColor;\n\n    // 随机噪声效果\n    float noise = sin(uv.x * 15.0 + iTime * 2.0) * cos(uv.y * 15.0 + iTime * 2.0);\n    color += noise * vec3(0.05, 0.05, 0.1);  // 降低噪声强度\n\n    // 图案生成与光照融合\n    vec3 pattern = generatePattern(uv);\n    vec3 finalPattern = mix(color, pattern, 0.4);  // 保持较好的融合\n\n    // 结合光照影响图案亮度\n    finalPattern *= (0.5 + diff * 0.5);  // 让光源影响图案的亮度和颜色\n    color = finalPattern;\n\n    // 引入透明度\n    float opacity = 0.8;\n    fragColor = vec4(color, opacity);  // 使用透明度控制\n}\n","name":"Image","description":"","type":"image"}]}