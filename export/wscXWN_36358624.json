{"ver":"0.1","info":{"id":"wscXWN","date":"1571982629","viewed":110,"name":"the World in the picture book","username":"MapleSyrupCS6","description":"the World in the picture book","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["maplestudy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 id)\n{\n    return fract(sin(dot(id, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat cloth(vec2 id, float value)\n{\n    return sin(dot(id*value, vec2(12.9898, 78.233)) * 43758.5453);\n}\n\nvec3 rotate(vec3 p, float angle, vec3 axis){\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float r = 1.0 - c;\n    mat3 m = mat3(\n        a.x * a.x * r + c,\n        a.y * a.x * r + a.z * s,\n        a.z * a.x * r - a.y * s,\n        a.x * a.y * r - a.z * s,\n        a.y * a.y * r + c,\n        a.z * a.y * r + a.x * s,\n        a.x * a.z * r + a.y * s,\n        a.y * a.z * r - a.x * s,\n        a.z * a.z * r + c\n    );\n    return m * p;\n}\n\nfloat df1( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat df2( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz) - t.x, p.y);\n  return length(q)-t.y;\n}\n\nfloat df3( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat map(vec3 p , float s){\n    \n    p.xy = mod(p.xy, 10.) - 1. * 5.;\n    return df3(p, s);\n}\n\nfloat dfm(vec3 p, float s){\n    \n    p.y -= 0.8;\n    vec3 q = rotate(p, radians(iTime * 5.0)*10., vec3(0.0, 1.0, 0.05));\n    //vec3 q2 = rotate(p, radians(5.0)*20., vec3(0.0, 1.0, 0.1));\n    float d3 = df3(q, 2.0);\n    float d4 = df2(q, vec2(3.5, 0.07));\n    float m2 = min(d3, d4);\n    p.y += 3.0;\n    float d1 = df1(p, vec3(2., 0., 2.), 0.3);\n    float d2 = df3(p, 2.0);\n    float m =  max(d1, d2);\n    return min(m, m2);\n    //return max(-d1, d2); // d1が重なっていないd2部分を描く\n    //return max(d1, -d2); // d2が重なっていないd1部分を描く\n    \n    \n}\n\n\nint dfc(vec3 p, float s){\n    \n    p.y -= 0.8;\n    vec3 q = rotate(p, radians(iTime * 5.0)*10., vec3(0.0, 1.0, 0.05));\n    //vec3 q2 = rotate(p, radians(5.0)*20., vec3(0.0, 1.0, 0.1));\n    float d3 = df3(q, 2.0);\n    float d4 = df2(q, vec2(3.5, 0.1));\n    float m2 = min(d3, d4);\n    p.y += 3.0;\n    float d1 = df1(p, vec3(2., 0., 2.), 0.3);\n    float d2 = df3(p, 2.0);\n    float m =  max(d1, d2);\n   float mm =  min(m, m2);\n\n    \n    int color = d4 < d3 ? 0 : \n    \t\t\t\t   mm < d3 ? 1 : 2;\n    return color;\n}\n\nvec3 normal(vec3 p, float s){\n\n    vec2 e = vec2(0.0001, 0);\n    float d = dfm(p, s);\n    vec3 n = d - vec3(\n        dfm(p - e.xyy, s),\n        dfm(p - e. yxy, s),\n        dfm(p - e. yyx, s));\n    return normalize(n);\n}\n\nfloat image(vec2 uv){\n  \t//uv = fract(uv);\n    float d = distance(vec2(rand(uv), rand(uv))*5., uv);\n    d = step(2., d);\n    \n    \n    return d;\n}\n\nfloat image2(vec2 uv){\n  \t//uv = fract(uv);\n    float d = distance(vec2(rand(uv), rand(uv)), uv);\n    d = step(d, abs(0.9));\n    \n    \n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    vec3 cameraPos = vec3(0, 0, -10);\n    float screenZ = 2.5;\n    vec3 rayDir = normalize(vec3(uv, screenZ));\n    vec3 lightDir = normalize(vec3(1.0, 1.0, -10.));\n    \n    float size = 1.0;\n    float depth = 0.0;\n    float dist = 0.0;\n    int color = 0;\n    vec3 rayPos = vec3(0.0);\n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 99; i++){\n        \n      \trayPos = cameraPos + (rayDir * depth);\n        dist = dfm(rayPos, size);\n        color = dfc(rayPos, size);\n        \n        if(dist < 0.0001) break;\n        \n        depth += dist;\n    }\n    \n    \n    if(dist < 0.0001){\n        \n      \tvec3 n = normal(rayPos, 1.0);\n        float diff = dot(n ,lightDir);        \n        float im = image(uv);\n        vec3 c1 = vec3(0.5, 0.4, 0.9);\n        vec3 c2 = vec3(0.);\n        \n        if(color == 0){\n            float clo = cloth(uv, 9.);\n            //col = mix(vec3(0.9, 0.9, 0.4), vec3(0.9, 0.7, 0.4), diff);\n            col = vec3(0.9, 0.9, 0.4);\n            col = mix(col, vec3(0.3), clo);\n           // col = mix(c1, c2, diff); \n        }else if(color == 1){\n            float clo = cloth(uv, 0.2);\n            vec3 c1 = vec3(0.8, 0.6, 0.1);\n            c1 -= (0.3);\n            col = mix(c1, vec3(0.2), diff);\n            col /= clo;\n        }else{\n            float im = image2(uv);\n            float clo = cloth(uv, 9.);\n            vec3 c1 = vec3(0.2, 0.3, 0.9);\n            c1 += (0.4);\n            col = mix(c1, vec3(0.2), im);\n            //col /= clo;\n        }\n        //col = mix(c1, c2, diff); \n        //col += image2(uv);\n       // col /= image(uv);\n    }else{\n        float clo = cloth(uv, 1.);\n        float d = image(uv);\n        vec3 c1 = vec3(0.0, 0.2, 0.9);\n        c1 -= vec3(0.5);\n        vec3 c2 = vec3(0.9, 0.9, 0.2);\n        //col = mix(c2, c1, d);  \n        col = vec3(0.3, 0.3, 0.6);\n        col += (0.4);\n        col = mix(col, c2, clo);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}