{"ver":"0.1","info":{"id":"XfKSR3","date":"1715536969","viewed":296,"name":"Eminem ft Dido - Stan-","username":"jorge2017a2","description":"Eminem ft Dido - Stan-","likes":25,"published":1,"flags":8,"usePreview":0,"tags":["2d","sound","eminemftdidostan","olivia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///Eminem ft Dido - Stan-\n//https://www.youtube.com/watch?v=8CHbyiNM2BI\n//12-may-2024\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define S3(d,b) smoothstep(2.0/antialiasing(0.5),0. , d - (b) )\n\n\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n#define POLY(N) (in vec2 p, in vec2[N] v) {const int n=v.length();float d=dot(p-v[0],p-v[0]);float s=1.;for(int i=0,j=n-1;i<n;j=i,i++){vec2 e=v[j]-v[i];vec2 w=p-v[i];vec2 b=w-e*clamp(dot(w,e)/dot(e,e),0.,1.);d=min(d,dot(b,b));bvec3 cond=bvec3(p.y>=v[i].y,p.y<v[j].y,e.x*w.y>e.y*w.x);if(all(cond)||all(not(cond))) s=-s;}return s*sqrt(d);}\n\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nfloat Sdf_I(float distA, float distB)\n\t{ return max(distA, distB);}\nfloat Sdf_U(float distA, float distB)\n\t{ return min(distA, distB);}\nfloat Sdf_D(float distA, float distB)\n\t{ return max(distA, -distB);}\n\n\n\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nvec3 DFB(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S3( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0),S3(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\n///oneshade    \nvec2 Rotate(in vec2 p, in vec2 o, in float r) \n{   float c = cos(r), s = sin(r);\n    return (p - o) * mat2(c, -s, s, c) + o;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\n\nvec3 cejas(vec2 uv, vec3 col)\n{\nuv.y+=1.45;\nvec2 pc1p1=vec2(1.150,2.140);\nvec2 pc1p2=vec2(1.180,2.050);\nvec2 pc1p3=vec2(1.320,2.020);\n\nvec2 pc2p1=vec2(1.340,2.040);\nvec2 pc2p2=vec2(1.390,2.000);\nvec2 pc2p3=vec2(1.490,2.090);\n\nvec2 pc3p1=vec2(1.150,1.290);\nvec2 pc3p2=vec2(1.130,1.270);\nvec2 pc3p3=vec2(1.090,1.250);\n\n\nfloat d1= sdBezier(uv,pc1p1,pc1p2,pc1p3);\nfloat d2= sdBezier(uv,pc2p1,pc2p2,pc2p3);\nfloat d3= sdBezier(uv,pc3p1,pc3p2,pc3p3);\n\nvec3 C1=vec3(0.0);\ncol=DFB(C1,col,d1);\ncol=DFB(C1,col,d2);\ncol=DFB(C1,col,d3);\n    return col;\n}\n\nvec3 olivia(vec2 p, vec3 colout)\n{\n \nvec2 A,B, med;\nfloat dfin;\nfloat d1, r1 ;\n\n//cabeza\nA=vec2(1.1,0.34);\nr1=0.57;\nd1=sdCircle(p-A,r1);\nvec3 colc=vec3(0.9,0.83,0.84); //rosto color\n\n\n// cuello\nA=vec2(0.43+0.15,-1.0+0.9);\nmed=vec2(0.1,0.275);\nfloat ang=15.0 * PI / 180.0;\n vec2 pr = Rotate(p-A, med/2.0, ang);\nfloat d13=sdEllipse(pr-A,med);\n\nd1=Sdf_U(d1,d13);\n\nA=vec2(0.87-0.3,-0.69+0.35);\nmed=vec2(0.11,0.18)*2.0;\n ang=12.0 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d16b=sdEllipse(pr-A,med);\n\nd1=Sdf_U(d1,d16b);\n\n//nariz\nA=vec2(1.58,0.0);\nmed=vec2(0.06,0.04);\nfloat d4=sdEllipse(p-A,med);\nd1=Sdf_U(d4,d1);\n\ncolout= DFB(colc, colout, d1);\n\n\n//ojo izq\nA=vec2(1.31,0.52);\nmed=vec2(0.015,0.025);\nfloat d2=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d2);\n\n//ojo der\nA=vec2(1.44,0.55);\nmed=vec2(0.015,0.025);\nfloat d3=sdEllipse(p-A,med);\ncolout= DFB(vec3(0.0), colout, d3);\n\n\nA=vec2(1.23,0.31);\nmed=vec2(0.21,0.27)*2.1;\nfloat d6=sdEllipse(p-A,med);\n\nA=vec2(1.23,0.11);\nmed=vec2(0.21,0.27)*2.1;\nfloat d6b=sdEllipse(p-A,med);\n\n\n\n//diferencia pelo oreja\nA=vec2(-0.45+0.88,-0.24+0.13);\n\nmed=vec2(0.24,0.15);\n ang=-54.0*PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d7=sdEllipse(pr-A,med);\n\nfloat d6d7=Sdf_U(d6,d7);\nd6d7=Sdf_U(d6d7,d6b);\n\ndfin=Sdf_D(d1,d6d7);\ndfin=Sdf_U(dfin,d7);\n\n    colout= DFB(vec3(0.0), colout, dfin);\n\n//arete\nA=vec2(0.86,-0.1);\nr1=0.0401;\nfloat d5=sdCircle(p-A,r1);\ncolout= DFB(vec3(1.,0.5,0.2), colout, d5);\n\n\n//boca\nA=vec2(0.59,-0.21+0.2);\nmed=vec2(0.13,0.03);\n ang=5.0 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d8=sdEllipse(pr-A,med);\n\n//diferencia boca\nA=vec2(1.18+0.08,-0.08);\n\nmed=vec2(0.08,0.06);\nfloat d9=sdEllipse(p-A,med);\nd8=Sdf_D(d8,d9);\ncolout= DFB(vec3(0.0), colout, d8);\n\n\n// cuerpo\nA=vec2(0.8-0.25,-1.07+0.45);\nmed=vec2(0.265,0.35)*2.0;\n ang=10.0 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d15=sdBox(pr-A,med);\nvec3 colb=vec3(0.9,0.11,0.01);\ncolout= DFB(colb, colout, d15);\n//brazo izq\nA=vec2(0.87-0.6,-0.75+0.1);\nmed=vec2(0.08,0.765);\nang=10.0 * PI / 180.0;\npr = Rotate(p-A, med/2.0, ang);\nfloat d11=sdEllipse(pr-A,med);\ncolout= DFB(colb, colout, d11);\n\n\n//brazo der\nA=vec2(0.95-0.12,-0.35-0.3);\nmed=vec2(0.08,0.72);\n ang=10.0 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\nfloat d12=sdEllipse(pr-A,med);\ncolout= DFB(colb, colout, d12);\n\n//pelo\nA=vec2(0.95-0.58,-0.35+0.4);\nmed=vec2(0.04,0.12)*2.0;\n ang=60.0 * PI / 180.0;\n pr = Rotate(p-A, med/2.0, ang);\n float d12b=sdEllipse(pr-A,med);\ncolout= DFB(vec3(0.0), colout, d12b);\n\n\n    colout= cejas(p,colout);\n\n    return colout;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n    uv-=vec2(-0.5,0.1);\n    float esc=1.5;\n    uv*=esc;\n    vec2 uv0=uv;\n    vec3 col=vec3(1.0);\n    \n    col= olivia(uv, col);\n    //gaz---Snake Knot\n    col *= sin(uv.y * 100.0 - iTime * 5.0) * 0.2 + 0.9;\n    col=pow(col,  vec3(0.554545));\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//iq\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n\n\nfloat sdEllipse( in vec2 p, in vec2 ab )\n{\n    p = abs(p); if( p.x > p.y ) {p=p.yx;ab=ab.yx;}\n    float l = ab.y*ab.y - ab.x*ab.x;\n    float m = ab.x*p.x/l;      float m2 = m*m; \n    float n = ab.y*p.y/l;      float n2 = n*n; \n    float c = (m2+n2-1.0)/3.0; float c3 = c*c*c;\n    float q = c3 + m2*n2*2.0;\n    float d = c3 + m2*n2;\n    float g = m + m*n2;\n    float co;\n    if( d<0.0 )\n    {\n        float h = acos(q/c3)/3.0;\n        float s = cos(h);\n        float t = sin(h)*sqrt(3.0);\n        float rx = sqrt( -c*(s + t + 2.0) + m2 );\n        float ry = sqrt( -c*(s - t + 2.0) + m2 );\n        co = (ry+sign(l)*rx+abs(g)/(rx*ry)- m)/2.0;\n    }\n    else\n    {\n        float h = 2.0*m*n*sqrt( d );\n        float s = sign(q+h)*pow(abs(q+h), 1.0/3.0);\n        float u = sign(q-h)*pow(abs(q-h), 1.0/3.0);\n        float rx = -s - u - c*4.0 + 2.0*m2;\n        float ry = (s - u)*sqrt(3.0);\n        float rm = sqrt( rx*rx + ry*ry );\n        co = (ry/sqrt(rm-rx)+2.0*g/rm-m)/2.0;\n    }\n    vec2 r = ab * vec2(co, sqrt(1.0-co*co));\n    return length(r-p) * sign(p.y-r.y);\n}\n\n\n\n\n\n//Quadratic Bezier - exact   (https://www.shadertoy.com/view/MlKcDD)\n\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b)) / 3.0;\n    float kz = kk * dot(d,a);      \n    float res = 0.0;\n    float p = ky - kx*kx;\n    float p3 = p*p*p;\n    float q = kx*(2.0*kx*kx-3.0*ky) + kz;\n    float h = q*q + 4.0*p3;\n    if( h >= 0.0) \n    { \n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        res = dot2(d + (c + b*t)*t);\n    }\n    else\n    {\n        float z = sqrt(-p);\n        float v = acos( q/(p*z*2.0) ) / 3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp(vec3(m+m,-n-m,n-m)*z-kx,0.0,1.0);\n        res = min( dot2(d+(c+b*t.x)*t.x),\n                   dot2(d+(c+b*t.y)*t.y) );\n        // the third root cannot be the closest\n        // res = min(res,dot2(d+(c+b*t.z)*t.z));\n    }\n    return sqrt( res );\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"//Referencia de sonido \n//IQ,AeroShark333, Gaz ,etc. muchos :)\n///Eminem ft Dido - Stan-\n//https://www.youtube.com/watch?v=8CHbyiNM2BI\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n\nconst float ttotal=22.0; \nconst float pi = 3.1415927;\nconst float tau = 6.283185;\nfloat ms;\nfloat mresp;\nfloat mtime;\nfloat mtempo;\n\n\n//https://www.shadertoy.com/view/ss3cDN\n// Created by AeroShark333\nfloat squareWave750( float f, float x)\n{ return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 ))); }\n\nfloat squareWave500( float f, float x)\n{ return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 )); }\n\nfloat squareWave250( float f, float x)\n{ return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nvec2 squareWave250( vec2 f, float x)\n{ return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 ))); }\n\nfloat triangleWave500( float q, float x)\n{ float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));  return (f); }\n\nfloat triangleWave250( float q, float x)\n{ float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0))); return (f); }\n\nfloat convertBassFreq (float f)\n{ return (f/2.0); }\n\nfloat  sawf(float t , float freq)\n{  return fract(t * freq) - 0.5; }\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   float f2;\n    float sampleX=0.0;\n    float f=w;\n    sampleX =squareWave250(f,t)*triangleWave250(f,t) *exp(-2.5*t);\n    f2=(sampleX+sawf(t,f));\n    float fx=f2*1.5;\n    return fx;\n}\n\n\nfloat D3(float ton, float tid, float toff)\n{   vec3 n3;\n    float resp;\n    n3=vec3(ton,tid, toff);\n    \n    \n    if(ms>=ton && ms<=toff)\n    {      // lower one octave\n      n3.y -=8.; //12 notas  //janpitokiala, 2024-07-31 ...change line 65 to n3.y -=8.; for correct key\n      //n3.y +=12.; //12 notas\n\n      // compute note frequency and time  \n      float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n      float t = mtime - float(n3.x)/mtempo;\n      if( n3.x==0.0 ) return 0.0;\n\n      // prepare wave parameters\n      float w = tau*f;\n      \n      float dwdt = w/iSampleRate; // derivative\n\n      // mix between bandlimited and raw saw waves  \n      vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n      // build instrument\n\n      float f1,y;\n      f1=wave1(w*t,1.00*dwdt,v,t,w);\n      float wf  = 0.4*f1;\n      y=f1*wf;\n      float offset=n3.x;\n       y*=exp(-1.0/n3.z * (t -offset) );\n        \n       mresp+=y;\n    }\n    \n}\n\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.5;\n  float s = time*tempo;\n vec3 n3=vec3(0.0);\n \n //variables globales\n ms=s;\n mresp=0.0;\n mtime=time;\n mtempo=tempo;\n\n\n D3(0.000,27.0,0.750); D3(0.000,32.0,0.750); D3(0.000,35.0,0.750); D3(0.375,44.0,0.500); D3(0.500,51.0,0.750); D3(0.750,51.0,1.000);\n D3(1.000,27.0,1.750); D3(1.000,32.0,1.750); D3(1.000,35.0,1.750); D3(1.000,51.0,1.250); D3(1.250,52.0,1.375); D3(1.375,49.0,1.625);\n D3(1.625,47.0,1.875); D3(1.875,51.0,2.000); D3(2.000,30.0,2.750); D3(2.000,34.0,2.750); D3(2.000,37.0,2.750); D3(2.000,47.0,2.125);\n D3(2.125,49.0,2.500); D3(2.875,46.0,3.000); D3(3.000,27.0,3.375); D3(3.000,30.0,3.375); D3(3.000,35.0,3.375); D3(3.000,47.0,3.250);\n D3(3.250,51.0,3.500); D3(3.500,30.0,3.875); D3(3.500,34.0,3.875); D3(3.500,37.0,3.875); D3(3.500,47.0,3.750); D3(3.750,51.0,3.875);\n D3(3.875,44.0,4.375); D3(4.000,27.0,4.750); D3(4.000,32.0,4.750); D3(4.000,35.0,4.750); D3(4.375,44.0,4.500); D3(4.500,51.0,4.625);\n D3(4.625,51.0,4.875); D3(4.875,51.0,5.125); D3(5.000,27.0,5.750); D3(5.000,32.0,5.750); D3(5.000,35.0,5.750); D3(5.125,52.0,5.375);\n D3(5.375,49.0,5.625); D3(5.625,47.0,5.875); D3(5.875,51.0,6.250); D3(6.000,30.0,6.750); D3(6.000,34.0,6.750); D3(6.000,37.0,6.750);\n D3(6.250,49.0,6.875); D3(6.875,47.0,7.000); D3(7.000,27.0,7.375); D3(7.000,30.0,7.375); D3(7.000,35.0,7.375); D3(7.000,54.0,7.250);\n D3(7.250,56.0,7.500); D3(7.500,30.0,7.875); D3(7.500,34.0,7.875); D3(7.500,37.0,7.875); D3(7.500,51.0,7.750); D3(7.750,49.0,7.875);\n D3(7.875,51.0,8.375); D3(8.000,27.0,8.750); D3(8.000,32.0,8.750); D3(8.000,35.0,8.750); D3(8.375,47.0,8.500); D3(8.500,54.0,8.625);\n D3(8.625,54.0,8.875); D3(8.875,54.0,9.125); D3(9.000,28.0,9.750); D3(9.000,32.0,9.750); D3(9.000,35.0,9.750); D3(9.125,56.0,9.375);\n D3(9.375,49.0,9.625); D3(9.625,49.0,9.750); D3(9.750,47.0,9.875); D3(9.875,51.0,10.125); D3(10.000,30.0,10.750); D3(10.000,34.0,10.750);\n D3(10.000,37.0,10.750); D3(10.125,49.0,10.375); D3(10.375,49.0,10.750); D3(10.750,47.0,10.875); D3(10.875,49.0,11.000);\n  return mresp;\n}\n\nvec2 mainSound( in int samp, float time )\n{ float t1=mod(time, ttotal);\n  float y= SoundIq(t1)*0.5;\n  return vec2(y);\n}   \n\n","name":"Sound","description":"","type":"sound"}]}