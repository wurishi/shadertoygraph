{"ver":"0.1","info":{"id":"4ccyWn","date":"1730451219","viewed":35,"name":"dist of binary texture","username":"jy483752","description":"probably not a good algo but meh","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["w"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi acos(-1.)\n#define tau pi*2.\n\nfloat image( vec2 p ){\n    float circ = step(.3, length(p+vec2(sin(iTime)*.2,.1)));\n    vec2 q = abs(p-vec2(cos(iTime)*.3,.1));\n    float sqr = step(.3, max(q.x, q.y));\n    return min(circ, sqr);\n}\n\nfloat marcher( vec2 p, float far ){\n    const int iter = 8;\n    const int samp = 32;\n\n    if(image(p)>.5){\n        return 0.;\n    }\n    \n    float dist = 0.;\n    for(int j=0; j<iter; j++){\n        float d = 0.;\n        float diverge = 1.;\n        for(int i=0; i<samp; i++){\n            float perc = pow(float(i)/float(samp),2.);\n            d = mix(d,perc*far,diverge);\n\n            float ang = float(i*554+24+j);\n            vec2 rd = vec2(cos(ang),sin(ang));\n            if(image(p + rd * d)>.5){\n                diverge *= .1;\n            }\n        }\n        dist += d;\n    }\n    dist/=float(iter);\n    \n    return dist/far;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec2 ep = vec2(.015,0.);\n    vec3 nor = vec3(\n    marcher(uv-ep, .05)-marcher(uv+ep, .05),\n    marcher(uv-ep.yx, .05)-marcher(uv+ep.yx, .05),\n    0.\n    );\n    nor.z = 1.-max(abs(nor.x),abs(nor.y));\n    nor = normalize(nor);\n\n    vec3 col;\n    if(fragCoord.x<iMouse.x){\n        col = nor+.5;\n    }\n    else{\n        col = mix(vec3(0),\n        sin(vec3(1.,2.,2.5)+atan(nor.y,nor.x)*3.)+.5+vec3(.0,.1,.2),\n        1.-nor.z);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}