{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\n\n\t\t[Intro]\n\t\tshaders are tiny programms that runs on the GPU to manupilate the final outcome of the rendering process allowing developers to create\n\t\tadvanced effects, and with the latest innovations on GPU they can do a lot more than what they are designed to like intensive physics\n\t\tcalculations like NVidia PhysX.\n\n\t\t[Typical usage]\n\t\t1)\tshaders recieve data from the cpu for example: 3D Models (vertex data), UV data, Textures ... etc, and scene related data like\n\t\t\tCamera position and viewport or whatver the programmer chooses to.\n\t\t2)\ta program is uploaded to the shader that typically has two functions: vertex shader, and pixel shader\n\t\t3)\tthe vertex code executes on every vertex and passes results to the pixel shader for further processing\n\t\t4)\tthe pixel/fragment code runs on every pixel that makes the object and recieves interpolated data from vertex code\n\t\t\tfor example texture sampling, lighting, .. etc, and decides the final color to be return to the screen.\n\n\t\tThat is the most common usage for shaders which is rendering 3D models or even 2D graphics, but shaders can be used for almost anything\n\t\tdepending on the imagination of the developer and project requirements.\n\n\t\t[Pixel\n\t\ta pixel aka fragment shader is like a little program that runs on every pixel\n\t\tevery frame.\n\n\t\tyou'll work mostly with vectors which are basically a container for several floats.\n\t\tthink of it as a struct or array that houses a constant amount of float values.\n\t\t\n\t\tTo access these floats you can use either xyzw or rgbw, both methods function exactly the same.\n\n\t\tLets say you have a vector of 4 floats which can be defined like this:\n\t\t\tvec4 myColor = vec4(1.0 , 0.0 , 0.0, 1.0);\n\t\t          rgba syntax:  [r]   [g]   [b]  [a]\n\t\t          xyzw syntax   [x]   [y]   [z]  [w]\n\n\t\t-when dealing with colors you typically have 4 float values:\n\t\t\tR: red\n\t\t\tG: green\n\t\t\tB: blue\n\t\t\tA: alpha / transparency where 0.0 is invisible and 1.0 is 100% visible, and 0.5 is half visible\n\t\t\t\n\t\t\tyou can also use xyzw instead of rgba which has the exact same effect but its there for readability when working with coordinates.\n\n\t\t-accessing components within vectors is easy, lets say you want to get the green value out of a vector, you can do it this way:\n\t\t\tfloat greenValue = myColor.g;\n\t\t\tfloat greenValue = myColor.y; // will have the exact same result\n\n\t\t-you can even pull several values from the vector in random order:\n\t\t\tvec2 myVector2 = myColor.ag\n\n\t\t-or even:\n\t\t\tvec4 myNewColor = myColor.aaaa // returns a vec4 consisting of the a (alpha) value only\n\t\t\n\t\t- vectors can hold up to 4 values/components: vec2, vec3, vec4, if you just want one variable float can be used:\n\t\t\tfloat myFloat = 1.0;\n*/\n\n\n/*\n\tThe main pixel/fragment shader function, this function will run on every pixel on the screen and has two parameters:\n\t\t\n\t\t[fragColor]\n\t\tout vec4 fragColor: so its a vector with 4 components (RGBA), and noticing the \"out\" keyword it means that this is a reference to an external\n\t\tvariable, so whatever changes we make to this, it will stay after the function is finished executing.\n\t\tbasically this the output pixel color for the current vertex being processed.\n\n\t\t[fragCoord]\n\t\tin vec2 fragCoord: this is vec2 contains the position of the current 2D coordinate/position pixel being processed in one of the GPU cores.\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\t/* =========== PART ONE =========== */\n\t/*\tlets start by showing one color */\n\t\n\t//\tcreate a vector that holds the color red\n\tvec4 myColor = vec4( 1.0 , 0.0 , 0.0 , 1.0);\n\t\n\t// you can add a bit of blue to it by uncommenting the code below\n\t//myColor.b = 0.4;\n\t\n\t// or you can tweak the green and blue values by using yz\n\t//myColor.yz = vec2(0.4, 0.2);\n\n\t//\tnow lets pass our color to the output\n    fragColor = myColor;\n\t\n\n\t\n\t/* =========== PART TWO =========== */\n\t\n\t/*\n\t\tnow lets do something a bit more interesting\n\t\tlets say we want to draw a gradient ranging from green to black\n\t\tfrom top to bottom ...\n\t\t\n\t\twe'll do this by calculating the distance between the pixel position\n\t\tand the bottom of the screen, we can use iResolution to do this. (check Shader Inputs at the top for more constants)\n\t\t*\tiResolution is the viewport resolution (notice that it has 3 components) x & y indicates the 2D viewport size\n\t\t\tnote: we can ignore the z component for this tutorial.\n\t*/\n\t\n    // calculate the gradient 0 -> 1\n    //float gradient = fragCoord.y / iResolution.y;\t// <== uncomment me for part two\n    \n    // use myColor as a base color and multiply it by gradient to achieve the gradient effect\n    // notice that we multiplied a vec4 by a float which in this case multiplies every component in myColor by the float\n    // for example: vec4(1.0 ,2.0 ,3.0 , 4.0) * 2 = vec4(2.0, 4.0, 6.0, 8.0)\n\t//fragColor = myColor * gradient;\t// <== uncomment me for part two\n\t\n    // if you don't want to alter the alpha value at you can use:\n    //fragColor.rgb = vec3(myColor * gradient);\n    \n    // or even this way ... go figure!\n    //fragColor = vec4(myColor.rgb * gradient, 1.0);\n    \n\t/*\n\t\tnow you can play with the values above to build better understanding of how shaders work\n\t\tand here's a general tip: try to keep shader code as small as possible for best performance, and don't declare many variables\n\t\tsince you'll be dealing with millions of calculations every frame\n\t*/\n}\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldlGD4","date":"1370982836","viewed":1492,"name":"Basic Tutorial","username":"ammarz","description":"Basic GLSL tutorial, for noobs, by a noob!\nWarning: this tutorial is based on my own understanding, so if there's wrong info please tell me about it.\n[Edit] fixed an error in part 2 and added more info.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""}}