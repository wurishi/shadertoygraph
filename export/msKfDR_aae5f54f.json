{"ver":"0.1","info":{"id":"msKfDR","date":"1698146166","viewed":70,"name":"Audio History Texture","username":"MV10","description":"Using BufferA and mic-in (iChannel1) to accumulate several seconds of audio history data. Current data is at the top, the buffer scrolls this \"down\" one row for each frame.","likes":4,"published":1,"flags":36,"usePreview":0,"tags":["audio","history"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n  This uses mic-in for audio. On Windows, get yourself a loopback\n  driver such as https://shop.vb-audio.com/en/win-apps/11-vb-cable.html\n  (and remember to pay the man his five bucks!)\n  For Linux you should be able to configure Pulse Audio to do this.\n\n  The top row (max Y) is current audio data. Each row below that is\n  increasingly older. BufferA \"scrolls\" this one row down per frame.\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // surprising Shadertoy doesn't offer this as a uniform\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // just show the history texture\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // sigh ... fragCoord.y isn't 0-to-resolution, it's 0.5 to resolution minus 0.5\n\n    if(fragCoord.y == iResolution.y - 0.5)\n    {\n        // top row is new (current) audio data\n        float xnorm = fragCoord.x / iResolution.x;\n        fragColor = texture(iChannel1, vec2(xnorm, 0.5));\n    }\n    else\n    {\n        // copy from one row above into the current row\n        ivec2 xy = ivec2(fragCoord.x, fragCoord.y + 1.0);\n        int lod = 0;\n        fragColor = texelFetch(iChannel0, xy, lod);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}