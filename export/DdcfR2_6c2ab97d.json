{"ver":"0.1","info":{"id":"DdcfR2","date":"1703046977","viewed":126,"name":"Starfield - Training 01","username":"juu_nii","description":"Learning the basics of implementing a starfield without any pre-defined textures","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["theartofcode"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_OF_LAYERS 6.0\n\nfloat Star(vec2 uv, float flare){\n    float d = length(uv);\n    float m = 0.05/d;//instead of smoothstep(.1, .05, d) for generating the circle\n    \n    float rays = max(0.0, 1.0-abs(uv.x*uv.y*1000.0)); //Flare A\n    m += rays * flare;\n    \n    uv *= Rot(3.1415/4.0);//Rotate UV to 45*\n    \n    rays = max(0.0, 1.0-abs(uv.x*uv.y*1000.0)); //Flare B\n    m += rays*0.3 * flare;\n    \n    m *= smoothstep(1.0, .2, d); //Reduces Bleed\n    \n    return m;\n}\n\nvec3 StarLayer(vec2 uv){\n    vec3 col = vec3(0);\n    \n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    \n    for(int y=-1; y<=1;y++){\n        for(int x=-1; x<=1;x++){\n            vec2 offs = vec2(x,y);\n            \n            float n = Hash21(id+offs); //To get the value in neighbours of 3x3\n            float size = fract(n*345.32);\n            float star = Star(gv-offs-vec2(n, fract(n*34.0))+0.5, smoothstep(0.8, 1.0, size));\n            \n            vec3 colour = sin(vec3(0.2, 0.3, 0.9) *fract(n*2345.2)*125.2)*0.5+0.5;\n            colour *= vec3(1.0-0.2*size, 0.5-0.1*size, 1.0+size);\n            \n            star *= sin(iTime * 3.0 + n*6.2831)*0.4+1.0;\n            \n            col += star*size*colour;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy - iResolution.xy*0.5)/iResolution.y;\n    \n    uv += mouse*4.0; //look input\n    \n    //uv *= 5.0;\n    float t = iTime * 0.05;\n    uv *= Rot(t);//Rotating UV \n    \n    vec3 col = vec3(0);\n    for(float i=0.0; i<1.0; i+=1.0/NUM_OF_LAYERS) {\n        float depth = fract(i+t);\n        float scale = mix(20.0, 0.5, depth);\n        \n        float opacity = depth * smoothstep(1.0, 0.9, depth);\n        col += StarLayer(uv*scale + i*453.2) * opacity; \n    }\n    \n    //col.rg +=gv;\n    \n    //if(gv.x>0.48 || gv.y>0.48){ col.r = 1.0; } Boxes for ID\n    \n    //col += Hash21(id); Showing random number assigned to each id\n    //col.rg += id * 0.2; Showing the id for each cell\n    \n    fragColor = vec4( col, 1.0); //Output\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat2 Rot(float a){ //Angle to Rotation Matrix\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p){ //Random Number Generator\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}","name":"Common","description":"","type":"common"}]}