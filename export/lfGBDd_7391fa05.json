{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Simple test of variable pixel black frame insertion\n// This runs at 50% (FRAMES=2) or 33% (FRAMES=3) duty cycle\n// For FRAMES=2,\n// It runs the even frame at 2.0 the brightness clipped, \n// Then makes the odd frame the left overs (what got clipped).\n// So darks are more like BFI, and lights are more like Scan-And-Hold\n\n// This is very sensitive to display linear response\n// If the display is non-calibrated or highly irregular it won't look good...\n// And it definitely looks bad on my 144Hz LCD laptop\n// There is a MOD_P term which at least for my laptop can fix it\n\n// The FRAMES=2 mode does cause static build up on my LCD panel\n// The build up looks like burn in, but seems to fade\n// Alternatively one can use MOD_R to reverse the polarity periodically to fix\n\n// This won't work on a CRT!!\n// It might work well on OLEDs with very fast pixel transitions\n\n// OUTPUT\n// Top is regular\n// Bottom is the varible pixel BFI (effective half (FRAMES=2) or third (FRAMES=3) render rate)\n\n// They should have the same amount of perceptual blur in motion\n\n// Special thanks to Blur Busters for some inspiration and great suggestions!\n\n\n// This was hardcoded for a stupid 144Hz LCD\n// Probably need to adapt for different display Hz\n#define SPEED 128\n\n// Updated 20241218 to support shorter duty cycle\n// The number of frames for the BFI {2 or 3}\n#define FRAMES 2\n\n// This is a dial to tune for junky panels\n#if 1\n // Disable\n #define MOD_F 1.0\n#else\n // This works good on the author's NV laptop panel\n // Change for your panel\n #define MOD_F 0.75\n#endif\n\n// Put in a monochome mode\n#define MOD_M 0\n\n// Put in an option to keep consistent color ratio\n// This enables the degration into scan-and-hold to be consisitent for all channels\n// Otherwise the perceptual blur would be colored\n#define MOD_C 1\n\n// Put in an option to reverse the even/odd frame every N frames\n// To avoid static burn-in on the crappy LCD\n// This only applies when FRAMES=2\n// This injects a mid-frame scan-and-hold frame to help mask the transition\n#define MOD_R 1\n// Turn off unless 2 frame\n#if FRAMES!=2\n #undef MOD_R\n #define MOD_R 0\n#endif\n// The log2(period) of frames for polarity reverse\n#define MOD_RR 10\n\n\n//-------------------------------------::--------------------------------------- \n// MIT NO ATTRIBUTION\n// ==================\n// Copyright 2024 Timothy Lottes\n// ------------------\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so.\n// ------------------\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n//-------------------------------------::--------------------------------------- \n\n// Translation, feel free to do cool stuff with this ...\n\n\n// Dummy code below ...\n\n#define P1 bool\n#define I1 int\n#define F1 float\n#define F2 vec2\n#define F3 vec3\n#define F4 vec4\n\n#define VSatF3(a) clamp(a,F3(0.0),F3(1.0))\n\n\n// Used for emulation of sRGB->linear reads and for store\nfloat SelF1(float a,float b,bool p){return p?b:a;}\nbool GtF1(float a,float b){return a>b;}\n// To sRGB\nfloat SrgbEncF1(float c){vec3 j=vec3(0.0031308*12.92,12.92,1.0/2.4);\n vec2 k=vec2(1.055,-0.055);\n return clamp(j.x,c*j.y,pow(c,j.z)*k.x+k.y);}\n// To linear\nfloat SrgbDecF1(float c){vec3 j=vec3(0.04045,1.0/12.92,2.4);\n vec2 k=vec2(1.0/1.055,0.055/1.055);\n return SelF1(c*j.y,pow(c*k.x+k.y,j.z),GtF1(c,j.x));}\n\n\nvoid mainImage(out F4 fragColor,in F2 fragCoord){\n\n // Normalized pixel coordinates (from 0 to 1)\n F2 uv=fragCoord/iResolution.xy;\n\n // The top/bottom split\n P1 bfi=uv.y<0.5;\n\n // Positive polarity for MOD_R\n P1 pos=((iFrame>>MOD_RR)&1)==0;\n // The Scan-and-Hold transition frame\n P1 sah=(iFrame&((1<<MOD_RR)-1))==0;\n\n I1 frame=iFrame%FRAMES;\n\n // BFI area\n I1 f=iFrame;\n if(bfi){f=f/FRAMES;f*=FRAMES;uv.y=1.0-uv.y;}\n\n // Move it\n uv.x+=(F1(f)/F1(SPEED));\n \n // Modify uv to correct for temporal latency for polarity change\n #if MOD_R\n  F1 xx=0.0;\n  if(bfi&&(!pos)){\n   if(frame==0)xx=-1.0/F1(SPEED);\n   else        xx= 1.0/F1(SPEED);\n  }\n  if(bfi&&(sah)){xx=0.0;}\n  uv.x+=xx;\n #endif\n \n // Fetch \n F4 c=texture(iChannel0,uv);\n c.r=SrgbDecF1(c.r);\n c.g=SrgbDecF1(c.g);\n c.b=SrgbDecF1(c.b);\n \n F4 cc=c;\n\n // This is work-in-progress for a user calibration dial ...\n if(bfi)c.rgb=pow(c.rgb,F3(MOD_F));\n\n // Ratio\n F1 cMax=max(c.r,max(c.g,c.b));\n F1 cRcp=1.0/cMax;\n if(cMax==0.0)cRcp=0.0;\n F3 cRat=c.rgb*F3(cRcp);\n \n F3 cN=c.rgb*F3(FRAMES);\n F3 c0,c1,c2;\n\n c0=VSatF3(cN);cN-=c0;\n c1=VSatF3(cN);cN-=c1;\n c2=VSatF3(cN);cN-=c2;\n \n #if MOD_R\n  if(!pos)frame=1-frame;\n #endif\n \n // The BFI region\n if(bfi){ \n  if(frame==0)c.rgb=c0;\n  if(frame==1)c.rgb=c1;\n  if(frame==2)c.rgb=c2;}\n\n // Keep same color ratio\n #if MOD_C\n  F1 dMax=max(c.r,max(c.g,c.b));\n  c.rgb=cRat*F3(dMax);\n #endif\n\n #if MOD_R\n  // Transition frame\n  if(sah)c.rgb=cc.rgb;\n #endif\n\n c.r=SrgbEncF1(c.r);\n c.g=SrgbEncF1(c.g);\n c.b=SrgbEncF1(c.b);\n\n #if MOD_M\n  c.r=c.b=c.g;\n #endif\n\n fragColor=c;}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lfGBDd","date":"1734576380","viewed":193,"name":"LottesPVBFI","username":"TimothyLottes","description":"Pixel variable black frame interpolation","likes":0,"published":1,"flags":0,"usePreview":1,"tags":["pvbfi"],"hasliked":0,"parentid":"","parentname":""}}