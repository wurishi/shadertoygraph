{"ver":"0.1","info":{"id":"wsXGRl","date":"1547314275","viewed":314,"name":"Quasirandom Dither","username":"TheSandvichMaker","description":"The new dither proposed by Mark Roberts in his post \"The Unreasonable Effectiveness of Quasirandom Sequences\"\nhttp://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\nClick to compare to interleaved gradient noise.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["noise","gradient","dither","roberts","pattern","interleaved","improved","weyl","mark","quasirandom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BIT_DEPTH 2\n\n//note: from \"NEXT GENERATION POST PROCESSING IN CALL OF DUTY: ADVANCED WARFARE\"\n//      http://advances.realtimerendering.com/s2014/index.html\n// (copied from https://www.shadertoy.com/view/MslGR8)\nfloat InterleavedGradientNoise( vec2 uv )\n{\n    const vec3 magic = vec3( 0.06711056, 0.00583715, 52.9829189 );\n    return fract( magic.z * fract( dot( uv, magic.xy ) ) );\n}\n\n// from \"The Unreasonable Effectiveness of Quasirandom Sequences\"\n// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\nfloat r_dither(vec2 co)\n{\n\tconst vec2 magic = vec2(0.75487766624669276, 0.569840290998);\n    return fract(dot(co, magic));\n}\n\nfloat remapTri(float n)\n{\n    float orig = n * 2.0 - 1.0;\n    n = orig * inversesqrt(abs(orig));\n    return max(-1.0, n) - sign(orig);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float dither;\n    if (iMouse.z > 0.0) dither = InterleavedGradientNoise(fragCoord.xy);\n    else                dither = r_dither(fragCoord.xy);\n    \n    // convert to triangular distribution\n#if 1\n\tdither = remapTri(dither);\n#else\n    dither -= 0.5;\n#endif\n    \n    const float lsb = exp2(float(BIT_DEPTH)) - 1.0;\n    \n    // demo image\n    vec3 col = texture(iChannel0, uv).rgb;\n    if (uv.y < 0.1) col = vec3(uv.x);\n    \n    // add dither\n    col += dither / lsb;\n    \n    // quantise\n    col = round(col * lsb) / lsb;\n\t\n    // output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}