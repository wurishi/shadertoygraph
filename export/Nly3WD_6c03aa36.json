{"ver":"0.1","info":{"id":"Nly3WD","date":"1637675113","viewed":198,"name":"the book of shader随机练习","username":"suolong","description":"the book of shader随机练习","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["thebookofshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.y-vec2(iResolution.x/iResolution.y*0.5,0.5);\n    uv*=10.0;\n    float t=(noise(uv+iTime))*5.0;\n    float a= step(2.5+t,length(uv));\n    float b = step(2.6+t,length(uv));\n    a = a-b;\n    vec3 col = vec3(a);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}