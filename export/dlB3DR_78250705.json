{"ver":"0.1","info":{"id":"dlB3DR","date":"1673114743","viewed":82,"name":"blend-red-circles","username":"inv","description":"Rotating and blending circles","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["circles","rotating"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rot(in vec2 st, in float a) {\n    float c = cos(a);\n    float s = sin(a);\n    \n    return vec2(\n        c * st.x - s * st.y,\n        s * st.x + c * st.y\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n    uv = uv - vec2(0.5);\n    uv = vec2(uv.x * ratio, uv.y);\n\n    uv = rot(uv, 2. * iTime);\n    \n    float c = sin(0.5 * iTime) / 3.;\n    float y = sqrt(3.) / 2.;\n    vec2 c2 = c * vec2(-1., 0.);\n    vec2 c1 = c * vec2(0.5, y);\n    vec2 c3 = c * vec2(0.5, -y);\n    float d1 = distance(c1, uv);\n    float d2 = distance(c2, uv);\n    float d3 = distance(c3, uv);\n    float pct = 1. - step(0.02, d1 * d2 * d3);\n    \n    uv = uv + vec2(0.5);\n    \n    // Output to screen\n    fragColor = vec4(pct * vec3(1., 0., 0.), 1.0);\n}","name":"Image","description":"","type":"image"}]}