{"ver":"0.1","info":{"id":"mdlSWN","date":"1668948286","viewed":247,"name":"Equirectangular Proj.","username":"Tech_","description":"Just a small shader showing of equirectangular projection!","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["simple","projection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Equirectangular Projection & Inverse\n    by TechDev\n\n    CC0 1.0 Universal (CC0 1.0) Public Domain Dedication\n*/\n\n#define rcp(x) (1.0 / (x))\n\nconst float TAU = radians(360.0);\nconst float INV_TAU = rcp(TAU);\n\nconst float PI = radians(180.0);\nconst float INV_PI = rcp(PI);\n\nvec3 EquirectangularToView(vec2 coord)\n{\n    coord = coord * TAU - PI; \n    \n    float theta  = coord.x;\n    float phi    = coord.y * 0.5;\n    float cosPhi = cos(phi);\n    \n    return vec3(\n        cosPhi * cos(theta),\n        sin(phi)           ,\n        cosPhi * sin(theta)\n    );\n}\n\nvec2 ViewToEquirectangular(vec3 view)\n{\n    return vec2(\n        atan(view.z, view.x) * INV_TAU + 0.5,\n        1.0 - acos(view.y) * INV_PI\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy; \n    vec3 cubeMapDir = EquirectangularToView(coord);\n\t\n    fragColor = texture(iChannel0, EquirectangularToView(coord));\n}","name":"Image","description":"","type":"image"}]}