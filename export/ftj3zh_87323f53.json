{"ver":"0.1","info":{"id":"ftj3zh","date":"1623351568","viewed":135,"name":"Hash Function Scaling Test","username":"Xor","description":"Stress testing two hash functions various scales. One the left side is my modified hash and the right is a standard hash.\nI also tested with an integer hash and this still worked better. It's not the fastest, but it's a neat general solution","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["test","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p)\n{\n    return fract( sin(p.x*12.9898 + p.y*78.233) * 43758.5453);\n}\nfloat hash_ext(vec2 p)\n{\n    p = mod(p, 7.31);\n    return fract( sin(p.x*12.9898 + p.y*78.233) * 43758.5453);\n}\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    float side = U.x-iResolution.x/2.;\n    float divider = min(abs(side)*.4,1.);\n    \n    float scale = mod(iTime,50.)-7.;\n    U *= exp2(scale);\n    \n    O = ((side>0.) ? hash(U) : hash_ext(U)) * vec4(divider);\n}","name":"Image","description":"","type":"image"}]}