{"ver":"0.1","info":{"id":"WsBfWW","date":"1590330453","viewed":281,"name":"Webcam Blocks","username":"dean_the_coder","description":"Lego(-like) blocks building to make an image from the webcam.","likes":5,"published":1,"flags":2,"usePreview":0,"tags":["webcam","lego"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LOWRES 20.0\n#define HIGHRES 64.0\n\nvec3 vignette(vec3 col, vec2 fragCoord) {\n    vec2 q = fragCoord.xy / iResolution.xy;\n    col *= 0.5 + 0.5 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.4);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    float brickToRealFade = clamp(iTime - 7.5, 0.0, 1.0);\n    vec2 camXY = uv * vec2(iResolution.y / iResolution.x, -1.0) + 0.5;\n    if (brickToRealFade >= 1.0) {\n        // Bail early if the animation has finished.\n        fragColor = vec4(vignette(texture(iChannel0, camXY).rgb, fragCoord), 1.0);\n        return;\n    }\n\n    float lowRes = 20.0;\n    float highRes = 64.0;\n    float VRES = mix(LOWRES, HIGHRES, clamp(iTime - 6.0, 0.0, 3.0) / 3.0);\n    \n    vec2 intXY = floor(uv * VRES) / VRES;\n    vec2 textureXY = intXY * vec2(iResolution.y / iResolution.x, -1.0) + 0.5;\n    vec2 fractXY = fract(uv * VRES);\n\n    // Lower the pallete choice to 12 shades per channel.\n    vec3 blockColor = floor(pow(texture(iChannel0, textureXY).rgb, vec3(0.6)) * 12.0) / 12.0;\n\n    // Progessively show blocks.\n    float columns = iResolution.x / iResolution.y * LOWRES;\n    float t = max(0.0, (iTime - 2.0) * 20.0);\n    float visibility = t - (textureXY.x + textureXY.y) * columns;\n    if (length(fractXY - 0.5) > visibility) {\n        // Gray brick background.\n        blockColor = vec3(0.35, 0.36, 0.38);\n    }\n    \n    // Define the studs.\n    float lineWidth = 0.06;\n    float studRadius = 0.24;\n    float studD = length(fractXY - 0.5);\n    float n = clamp(dot(normalize(fractXY - 0.5), vec2(1.0)), 0.0, 1.0);\n    \n    float stud = 1.0 - smoothstep(studRadius, studRadius + lineWidth * 0.5, studD);\n    stud *= 1.0 - smoothstep(studRadius, studRadius - lineWidth * 0.5, studD);\n    stud = 1.0 - stud;\n    \n    // Define the block.\n    vec2 square = smoothstep(0.0, lineWidth, fractXY);\n    float block = min(min(square.x, square.y), stud);\n    blockColor *= max(0.6, block);\n    \n    float shine = 0.0;\n    if (studD <= studRadius) {\n        // Stud shine.\n        shine = 0.5 * pow(n * studD / studRadius, 4.0);\n    } else {\n        // Block shine.\n        shine = 0.5 * smoothstep(0.9, 1.0, max(fractXY.x, fractXY.y));\n    }\n\n    vec3 col = mix(blockColor + shine, texture(iChannel0, camXY).rgb, brickToRealFade);\n    \n    // Fade edges.\n    fragColor = vec4(vignette(col, fragCoord), 1.0);\n}","name":"Image","description":"","type":"image"}]}