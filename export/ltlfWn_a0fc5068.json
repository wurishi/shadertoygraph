{"ver":"0.1","info":{"id":"ltlfWn","date":"1511687595","viewed":306,"name":"Pixelated Belousov–Zhabotinsky","username":"FlexMonkey","description":"Pixelated Modified Belousov–Zhabotinsky","likes":12,"published":1,"flags":48,"usePreview":0,"tags":["pixelated","bz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n\tModified Belousov–Zhabotinsky\n\n\tSimon Gladman | November 2017 | http://flexmonkey.blogspot.co.uk/\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, coord);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\n\tModified Belousov–Zhabotinsky\n\n\tSimon Gladman | November 2017 | http://flexmonkey.blogspot.co.uk/\n\n*/\n\nint radius = 7; \nfloat alpha = 1.2;\nfloat beta = 1.275;\nfloat gamma = 1.425;\n\n// Keyboard reset taken from https://www.shadertoy.com/view/XtcGD2\nbool reset() {\n    return texture(iChannel2, vec2(32.5/256.0, 0.5) ).x > 0.5;\n}\n\nfloat noise(vec2 co) {\n    vec2 seed = vec2(sin(co.x), cos(co.y));\n    return fract(sin(dot(seed ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord.xy / iResolution.xy;\n    vec2 pixelSize = vec2(1.0 / iResolution.xy); \n\n    vec4 averageColor = vec4(0);\n   \tfloat count = 0.0;\n\n    for (int x = -radius; x <= radius; x++) {\n        for (int y = -radius; y <= radius; y++) {\n            if (length(vec2(x, y)) < float(radius)) {\n            \taverageColor += texture(iChannel0, coord + pixelSize * vec2(x, y));\n            \tcount++; \n            }\n        }\n    }\n    \n    averageColor /= count; \n    \n    if(texture(iChannel0, coord).xyz == vec3(0) || reset()) {\n        \n       fragColor = texture(iChannel1, coord);\n        \n    } else {\n        \n        float reactionRate = smoothstep(0.0, 1.0, averageColor.x * averageColor.y * averageColor.z); \n        \n        float a = averageColor.x + reactionRate + averageColor.x * (alpha * gamma * averageColor.y) - averageColor.z;\n   \t\tfloat b = averageColor.y - reactionRate + averageColor.y * ((beta * averageColor.z) - (alpha * averageColor.x));\n    \tfloat c = averageColor.z - reactionRate + averageColor.z * ((gamma * averageColor.x) - (beta * averageColor.y));\n  \n        vec3 result = texture(iChannel0, coord).xyz * 0.8 + \n                              vec3(a, b, c) * (0.18 + noise(iTime * fragCoord) * 0.08);\n        \n        result = clamp(result, 0.0, 1.0); \n        \n        fragColor = vec4(result, 1.0); \n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Taken from: https://www.shadertoy.com/view/4tByWK\n    \n    float width = 0.02;\n    float halfWidth = width * 0.5; \n    float height = sqrt(3.0) / 2.0 * width;\n    \n    vec2 R = iResolution.xy;\n    vec2 destCoord = fragCoord / R.y;\n    \n    float y = floor(destCoord.y / height) * height;\n    float yIndex = floor(mod(destCoord.y / height, 2.0));\n    float xOffset = (yIndex < 1.0) ? halfWidth : 0.0;\n   \n    float x = floor((destCoord.x + xOffset) / width) * width; \n    \n    vec2 cellCenter = vec2(x + halfWidth, y + height*0.5); \n    \n    float luma = 1.0 - (distance(destCoord + vec2(xOffset, 0), cellCenter) / halfWidth); \n    \n    vec3 fragment = texture(iChannel0, cellCenter*R.y/R).xyz;\n    \n    luma *= dot(pow(fragment, vec3(2.2)), \n                vec3(0.2126, 0.7152, 0.0722));\n    luma = smoothstep(0.0, 0.1, smoothstep (0.0, 1.0, luma));\n    \n    \n    vec2 coord = fragCoord / iResolution.xy;\n    vec3 previousFrame = texture(iChannel1, coord).xyz * 0.925;\n    \n    \n\tfragColor = vec4(max(previousFrame, fragment * luma), 1.0); \n}","name":"Buf B","description":"","type":"buffer"}]}