{"ver":"0.1","info":{"id":"MltcDS","date":"1533935541","viewed":864,"name":"EOT - burning tori","username":"Virgill","description":"End of time by Alcatraz & Altair - grid scene.\nFull intro: http://www.pouet.net/prod.php?which=77102\nintroducing Madtracer [tm]\n","likes":15,"published":3,"flags":96,"usePreview":0,"tags":["demoscene","pathtracing","pathtracing","4kintro","madtracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsjSWK","filepath":"https://soundcloud.com/virgill/4klang-end-of-time","previewfilepath":"https://soundcloud.com/virgill/4klang-end-of-time","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//------------------------------------------------------------------------\n//  End of time.  A 4k intro by Virgill/Alcatraz & KK/Altair\n//\n//  Full intro: http://www.pouet.net/prod.php?which=77102\n//  Youtube: https://youtu.be/5lR76o9lWB0\n//  https://soundcloud.com/virgill/4klang-end-of-time\n//  Thanks to these ppl for help + inspiration: Slerpy, LJ, Xtr1m, Gopher\n//------------------------------------------------------------------------\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy/iResolution.xy);\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//------------------------------------------------------------------------\n//  End of time.  A 4k intro by Virgill/Alcatraz & KK/Altair\n//\n//  Full intro: http://www.pouet.net/prod.php?which=77102\n//  Youtube: https://youtu.be/5lR76o9lWB0\n//  4klang music: https://soundcloud.com/virgill/4klang-end-of-time\n//  Thanks to these ppl for help + inspiration: Slerpy, LJ, Xtr1m, Gopher\n//------------------------------------------------------------------------\n\nvec3 scol;\n\nvoid dmin(inout vec3 d, float x, float y, float z)\n{\n\tif(x<d.x) d=vec3(x,y,z);\n}\n\n// 3D noise function (IQ, Shane)\nfloat noise(vec3 p)\n{\n\tvec3 ip=floor(p);\n\tp-=ip;\n\tvec3 s=vec3(7, 157, 113);\n\tvec4 h=vec4(0., s.yz, s.y+s.z)+dot(ip, s);\n\tp=p*p*(3.-2.*p);\n\th=mix(fract(sin(h)*43758.5), fract(sin(h+s.x)*43758.5), p.x);\n\th.xy=mix(h.xz, h.yw, p.y);\n\treturn mix(h.x, h.y, p.z);\n}\n\n// hemisphere hash function based on a hash by Slerpy\nvec3 hashHs(vec3 n, float seed)\n{\n\tfloat a = fract(sin(seed)*43758.5)*2.-1.;\n\tfloat b = 6.283*fract(sin(seed)*41758.5)*2.-1.;\n\tfloat c=sqrt(1.-a*a);\n\tvec3 r=vec3(c*cos(b), a, c*sin(b));\n\treturn r;\n}\n\nfloat sdTorus(vec3 p, vec2 t)\n{\n\treturn length(vec2(length(p.yz)-t.x, p.x))-t.y;\n}\n\nfloat box(vec2 p)\n{\n\tp=abs(p); return max(p.x, p.y);\n}\n\nvoid pR(inout vec2 p, float a)\n{\n\tp = cos(a)*p+sin(a)*vec2(p.y, -p.x);\n}\n\n\nvec3 map(vec3 p)\n{\n    vec3 q;\n    vec3 d = vec2(0, 1.).yxx;\n\tfloat floornoise = .8*noise(3.*p+2.3*iTime)+0.1*noise(20.*p+2.2*iTime);\n\tdmin(d, box(p.zy+vec2(0, 4))-.2-floornoise, 1.1, -.5); \n\tdmin(d, box(p.zy+vec2(0, 1))-.2-floornoise, 1.1, +.5); \n\tdmin(d, box(p.zy+vec2(-3, 12))-.5, 1.1, 0.2); \n\tq=mod(p+vec3(iTime, 0, 0), vec3(1, 0, 0))-vec3(.5, 0, 0);\n\tdmin(d, sdTorus(q+vec3(0, 1, 0), vec2(.7, .3)), 0.0, 1.);\n\tq=mod(p+vec3(-iTime, 0, 0), vec3(1, 0, 0))-vec3(.5, 0, 0);\n\tdmin(d, sdTorus(q+vec3(0, 4, 0), vec2(.7, .3)), 0.0, 1.);\n\tdmin(d, min(5.-p.z, .8-p.y)+floornoise*.8, 0.2, .1);\n\treturn d;\n\n}\n\n\nvec3 normal(vec3 p)\n{\n\tfloat m = map(p).x;\n\tvec2 e = vec2(0,.05);\n\treturn normalize(m-vec3(map(p - e.yxx).x, map(p - e.xyx).x, map(p - e.xxy).x));\n}\n\n\nvoid madtracer(in vec3 ro1, in vec3 rd1, in float seed)\n{\n\tscol = vec3(0);\t\n\tfloat t = 0., t2 = 0.;\n\tvec3 m1, m2, rd2, ro2, nor2;\n\tvec3 roold=ro1;\n\tvec3 rdold=rd1;\n\tm1.x=0.;\n\tfor( int i = 0; i < 140; i++ )\n\t{\n\n\t\tseed = fract(seed+iTime*float(i+1)+.1);\n\t\tro1=mix(roold, hashHs(ro1, seed), 0.002);\t\t\t\t// antialiasing\n\t\tm1 = map(ro1+rd1*t);\n\t\tt+=m1.z!=0. ? 0.25*abs(m1.x)+0.0008 : 0.25*m1.x;\n\t\tro2 = ro1 + rd1*t;\n\t\tnor2 = normal(ro2); \t\t\t\t\t\t\t\t\t// normal of new origin\n\t\tseed = fract(seed+iTime*float(i+2)+.1);\n        rd2 = mix(reflect(rd1, nor2), hashHs(nor2, seed), m1.y);// reflect depending on material\n\t\tm2 = map(ro2+rd2*t2);\n\t\tt2+=m2.z!=0. ? 0.25*abs(m2.x) : 0.25*m2.x;\n\t\tscol+=.007*(vec3(1.+m2.z, 1., 1.-m2.z)*step(1., m2.y)+vec3(1.+m1.z, 1., 1.-m1.z)*step(1., m1.y));\n\t}\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor=vec4(0.0);\n\t// borders\n\tif( uv.y>.1&&uv.y<0.9 )\n\t{\n\t\tfloat seed = sin(fragCoord.x + fragCoord.y)*sin(fragCoord.x - fragCoord.y);\n\t\tvec3 bufa= texture(iChannel0, uv).xyz;\n\n\t\t// camera\n\t\tvec3 ro, rd;\n\t\tvec2 uv2 = (2.*fragCoord.xy-iResolution.xy)/iResolution.x;\n\t\tro = vec3(0, 0,-3);\n\t\trd = normalize(vec3(uv2, 1));\n\t\t// rotate scene\n\t\tpR(rd.xz, .6*-sin(.17*iTime));\n\t\tpR(rd.yz, .6*sin(.19*iTime));\n\t\tpR(rd.xy, .2*-cos(.15*iTime));\n\t\t// render    \n\t\tmadtracer(ro, rd, seed);\n\n\t\tfragColor =clamp(vec4(0.7*scol+0.7*bufa, 0.), 0., 1.); // with blur\n\t}\n}\n","name":"Buffer A","description":"","type":"buffer"}]}