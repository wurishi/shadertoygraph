{"ver":"0.1","info":{"id":"NsGyDt","date":"1655782585","viewed":130,"name":"1539088480948473856","username":"scry","description":"https://twitter.com/Scrygl/status/1539088480948473856/video/1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","blobs","refraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////\n#define pi 3.14159265*2.\n#define deg pi/180.\n#define time iTime*0.1/pi*2.*0.1\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvec3 cpos(void) {\n    vec3 c = vec3(0.);\n    c.z -= 4.;\n    c.yz *= r2d(-0.5);\n    c.x += sin(time*9.88);\n    c.z += cos(time*9.88);\n    return c;\n}\n\n\n\nmat4 eye(void) {\n    vec3 c = cpos();\n    vec3 f = normalize(-c);\n    vec3 r = cross(vec3(0.,1.,0.),f);\n    vec3 u = cross(f,r);\n    return mat4(r.x,r.y,r.z,0.,\n                u.x,u.y,u.z,0.,\n                f.x,f.y,f.z,0.,\n                c,1.);\n}\n\nvec3 lpos(void) {\n    vec3 l = vec3(0.);\n    l = (vec4(l,1.)*inverse(eye())).xyz;\n    l.z += 2.;\n    l.y += 1.0;\n    return l;\n}\n\nfloat fabs(float a,float k) {\n    return sqrt(a*a+k);\n}\n\nvec3 fabs(vec3 a,float k) {\n    return sqrt(a*a+k);\n}\n\nvec4 map(vec3 p) {\n    vec3 o = p;\n    p = (eye()*vec4(p,1.)).xyz;\n    float prd = 0.15;\n    vec3 op = p;\n    p = fabs(p,0.1)-0.5;\n    p.xz *= r2d(0.5);\n    p.yz *= r2d(0.5);\n    float pd = 0.5;\n    float lp = length(p);\n    float d = 100.;\n    for (int i=0;i<13;i++) {\n        p.x = fabs(p.x,pd/50.)-pd*0.2;\n        p.xz *= r2d(sin(time*9.88-lp*0.5)+op.z*0.1);\n        p.yz *= r2d(cos(time*9.88+lp*0.5)+op.z*0.1);\n        p.x = fabs(p.x,pd/50.)-pd*.4;\n    }\n    d = length(p)-(lp*0.0)-0.1;\n    d = max(d,-length(o)+0.2);\n    \n    return vec4(p,d);\n}\n\nvec2 RM(vec3 ro, vec3 rd, float side) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<199;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w*side;\n        dO += dS*0.7;\n        ii += 0.01;\n        if (dO > 100. || dS < 0.001) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec3 calcNorm(vec3 p) {\n    vec2 h = vec2(0.001,0.);\n    return normalize(vec3(\n        map(p-h.xyy).w-map(p+h.xyy).w,\n        map(p-h.yxy).w-map(p+h.yxy).w,\n        map(p-h.yyx).w-map(p+h.yyx).w\n    ));\n}\n\nvec2 sh(vec3 p, vec3 n) {\n    vec3 l = lpos();\n    vec3 rd = normalize(l-p);\n    vec2 d = RM(p-n*0.003,rd,1.);\n    float dif = clamp(dot(rd,-n),0.,1.);\n    float s = 1.;\n    if (length(l-p) > d.x) {\n        s = 0.;\n    }\n    return vec2(s,dif);\n}\n\nvec3 colo(vec3 p, vec3 n, vec2 d, vec3 rd) {\n    vec3 col = clamp(1.-d.xxx*0.05,0.,1.)*0.2+0.15;\n    vec2 s = sh(p,n);\n    col *= (sin(vec3(1.,2.,5.)*d.x*1.4+2.2+d.y*0.2+3.)*0.5+0.5)*1.+1.;\n    col += s.x*s.y*0.2;\n    float lp = clamp(1.-length(lpos().xy-rd.xy*lpos().z),0.,1.); \n    vec3 cr = vec3(0.5,0.2,1.);\n    float xd = 0.2*sin(time*10.+lp*4.)+0.25;\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,0.5));\n    vec2 d = RM(ro,rd,1.);\n    vec3 p = ro+rd*d.x;\n    vec3 n = calcNorm(p);\n    col += colo(p,n,d,rd);\n    vec3 ocol = col;\n    vec2 s = sh(p,n);\n    float lp = clamp(1.-length(lpos().xy-rd.xy*lpos().z),0.,1.); \n    float rl = 0.5;\n    vec2 od = d;\n    vec3 oro = ro;\n    vec3 ord = rd;\n    vec3 op = p;\n    vec3 on = n;\n    for (int i=0;i<2;i++) {\n        ro = p-n*0.003,\n        rd = reflect(rd,n);\n        d = RM(ro,rd,1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d,rd)*rl;\n        rl *= 0.5;\n    }\n    ro = oro;\n    rd = ord;\n    p = op;\n    n = on;\n    float ior = 1.0;\n    rl = 0.9;\n    for (int i=0;i<2;i++) {\n        ro = p+n*0.01;\n        rd = refract(rd,-n,1./ior);\n        d = RM(ro,rd,-1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d,rd)*rl;\n        ro = p-n*0.01;\n        rd = refract(rd,n,ior);\n        d = RM(ro,rd,1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d,rd)*rl;\n    }\n    col *= 0.7;\n    col -= 1.1;\n    col *= ocol;\n    col *= clamp(ocol,0.,1.);\n    col = clamp(col,0.,1.);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}