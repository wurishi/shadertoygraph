{"ver":"0.1","info":{"id":"msj3Ww","date":"1667726468","viewed":156,"name":"VT on Geometric Series","username":"kastorp","description":"applying voxel traversal to jt  [url=https://www.shadertoy.com/view/ddjGzW]Geom. Series Square Tiling[/url]","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["sdf","square","geometric","traversal"],"hasliked":0,"parentid":"ddjGzW","parentname":"Geom. Series Square Tiling SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// VT on Geometric Series  by Kastorp\n//fork of https://www.shadertoy.com/view/ddjGzWby jt\n\n//jt SDF for reference\nfloat geometric_series_square_tiling(vec2 p, float n)\n{\n    p = abs(p);\n\n    float n1 = n - 1.0;\n    float b = n / n1;\n    vec2 s = floor(log2(p)/log2(b));\n    float m = max(s.x, s.y);\n    p = fract(p/pow(b, m)*n1);\n\n    p = 0.5-abs(p-0.5);\n    float d = min(p.x, p.y);\n    //d = min(d,length(p-0.5)-0.5); // circles\n    return d*pow(b, m)*b/n;\n}\n\n//voxel traversal: xy= voxel center, z=voxel size, w=traversal distance \nvec4  geom_vt(vec2 pp, float n,vec2 rd)\n{\n    rd*=-sign(pp);\n    vec2 p = abs(pp);\n\n    float n1 = n - 1.0;\n    float b = n / n1;\n    vec2 s = floor(log2(p)/log2(b));\n    float m = max(s.x, s.y);\n    float k =pow(b, m)/n1;\n    p = fract(p/k);\n    \n    vec2 c1=(floor(pp/k)*k ), c2=(ceil(pp/k)*k );\n\n    vec2 sd = (-p + 0.5 - 0.5*sign(rd))/rd;\n    return vec4((c1+c2)/2.,abs(c1.x-c2.x)/2.,-max(sd.x,sd.y)*k);\n\n}\nfloat map(vec2 p, float n)\n{\n    return geometric_series_square_tiling(p, n);\n}\n\nvoid mainImage(out vec4 o, vec2 i)\n{\n    vec2 R = iResolution.xy;\n\ti = (2.0 * i - R) / R.y;\n    vec2 m = (2.0 * iMouse.xy - R) / R.y;\n\n    float n = floor((0.5 - 0.5 * cos(iTime/5.)) * 3.0 + 2.0);\n    float d = map(i, n);\n    \n\t// using iq's sdf visualization\n    vec3 col = (d > 0.0) ? vec3(0.9, 0.6, 0.3) : vec3(0.65, 0.85, 1.0);\n    col *= 1.0 - exp(-6.0 * abs(d));\n\tcol *= 0.8 + 0.2 * cos(150.0 * d);\n\tcol = mix(col, vec3(1.0), 1.0 - smoothstep(0.002, 0.008, abs(d)));\n\n\n    float t=iTime;\n    vec2 ro=vec2(1.1,.52),rop=ro,rd=vec2(cos(t),sin(t));\n    if(iMouse.z > 0.001)ro=m;\n    for(float j=0.;j<30.;j++){\n\n\n         col = mix(col, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 0.005, abs(length(i - ro) -.01) - 0.0025));\n        \n         vec4 vt=geom_vt(ro,  n, rd);\n         \n         col = mix(col, vec3(.0, .7, 0.0),smoothstep(0.01, 0.00, length(i-vt.xy)-vt.z*.5));\n         rop=ro+rd*(vt.w+.001);\n         float sd= distance(i, mix(rop, ro, clamp(dot(i - rop, normalize(ro - rop)) / length(ro - rop), 0., 1.)));\n         col = mix(col, vec3(1.0, .0, 0.0),smoothstep(0.01, 0.00, sd));\n         ro=rop;\n    }\n\n    o = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}