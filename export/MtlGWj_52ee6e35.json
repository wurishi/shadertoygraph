{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n\t\n}\n\nfloat simplex (vec2 uv) {\n \tfloat f = 0.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\t\tf  = 0.5000*noise( uv ); uv = m*uv;\n\t\tf += 0.2500*noise( uv ); uv = m*uv;\n\t\tf += 0.1250*noise( uv ); uv = m*uv;\n\t\tf += 0.0625*noise( uv ); uv = m*uv;\n    return f;\n}\n\nfloat field (vec3 pos) {\n    float f = 0.0;\n    return pos.y - simplex(pos.xz * 0.005)*64.0 - simplex(pos.xz * 0.1)*1.0;\n}\n\n\n\nvec3 normal (vec3 pos) {\n \tvec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(\n    \tfield(pos + eps.xyy) - field(pos - eps.xyy),\n        field(pos + eps.yxy) - field(pos - eps.yxy),\n        field(pos + eps.yyx) - field(pos - eps.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.0 - 1.0;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 color = vec3(0.75, 0.75, 1.0);\n    vec3 ro = vec3(uv, 0.0);\n    ro.y += 32.0;\n    vec3 rd = normalize(vec3(uv, 1.0) + vec3(0.0, -0.5, 0.0));\n    \n    float h = 0.0;\n    for (int i = 0; i < 64; ++i) {\n        vec3 test = ro + h*rd;\n        if (length(test) > 500.0) break;\n        float hit = field(test);\n        h += max(0.75, hit);\n        \n        if (hit < 0.0) {\n            vec3 nor = normal(test);\n            float sun = dot(nor, vec3(0.0, 1.0, 0.0));\n         \tvec3 terrain = vec3(1.0) * sun;\n            float fog = 1.0 - exp(-length(test) * 0.005);\n            color = mix(terrain, vec3(1.0), fog);\n            break;\n        }\n    }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtlGWj","date":"1425332209","viewed":121,"name":"simplex test germangb","username":"germangb","description":"raymarching #2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}