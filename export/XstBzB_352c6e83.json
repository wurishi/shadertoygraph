{"ver":"0.1","info":{"id":"XstBzB","date":"1527147712","viewed":470,"name":"Getting my bearings","username":"suddenbear","description":"~~This is nothing, ignore it plz~~","likes":1,"published":3,"flags":48,"usePreview":0,"tags":["bearripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 getOffset(sampler2D sampler, ivec2 ifragCoord) {\n    int x = ifragCoord.x;\n    int y = ifragCoord.y;\n    return vec2(\n        getColor(sampler, ivec2(x-1, y)).x - getColor(sampler, ivec2(x+1, y)).x,\n        getColor(sampler, ivec2(x, y-1)).x - getColor(sampler, ivec2(x, y+1)).x\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(fragCoord.xy);\n    int x = ifragCoord.x;\n    int y = ifragCoord.y;\n    \n    vec2 offset = ((iFrame % 2) == 1)\n        ? getOffset(iChannel1, ifragCoord)\n        : getOffset(iChannel2, ifragCoord);\n\n    float shading = offset.x;\n    \n    ivec2 texCoord = ifragCoord + ivec2(offset * 256.);\n    \n    vec4 texColor = getColor(iChannel0, texCoord);\n    \n    fragColor = texColor + shading;\n    \n\n    //t = texture(x+Xoffset, y+Yoffset)\n\n    //p = t + Shading\n\n    //plot pixel at (x,y) with colour p\n    \n    //fragColor = ((iFrame % 2) == 1)\n    //    ? getColor(iChannel1, texCoord)\n    //    : getColor(iChannel2, texCoord);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    \n    // vec4  mousePos = texelFetch( iChannel0, txMouseState, 0 );\n    // float mousePressed = texelFetch( iChannel0, txMouseIsPressed, 0).x;\n    // float shade = (iMouse.x / iResolution.x) * (iMouse.y / iResolution.y);\n\n    // Time varying pixel color\n    // vec3 col = (0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4))) * mousePressed;\n\n    // Output to screen\n    \n    //fragColor = texelFetch(iChannel1, ivec2(fragCoord), 0);\n    //if (iFrame < 5) fragColor = vec4(1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid storeState( in ivec2 addr, in ivec2 px, inout vec4 fragColor, in vec4 state ) {\n    if (addr == px) {\n    \tfragColor = state;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if( fragCoord.x > 14.0 || fragCoord.y>14.0 ) discard;\n    \n    ivec2 ipx = ivec2(fragCoord-0.5);\n    \n    vec4 oldMouseState = texelFetch( iChannel0, txMouseState, 0 );\n    vec4 oldMousePressed = texelFetch( iChannel0, txMouseIsPressed, 0 );\n    \n    bool mouseHeld = iMouse.z > 0. && iMouse.w > 0.;\n    bool mouseDown = oldMouseState.zw != iMouse.zw && mouseHeld;\n    bool mouseUp = oldMouseState.zw != iMouse.zw && !mouseHeld;\n    float mouseTime = mouseDown || mouseUp ? iTime : oldMousePressed.w;\n    \n    storeState( txMouseState, ipx, fragColor, iMouse );\n    storeState( txMouseIsPressed, ipx, fragColor, vec4(mouseDown, mouseUp, mouseHeld, mouseTime) );\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const vec4 dampening = vec4(0.99, 0.99, 0.99, 1.);\nconst ivec2 txMouseState     = ivec2(0, 0);\nconst ivec2 txMouseIsPressed = ivec2(1, 0);\n\nvec4 getColor(in sampler2D buf, in ivec2 coord) {\n    return texelFetch(buf, coord, 0);\n}\n\nvec4 getColor(in sampler2D buf, in vec2 coord) {\n    return getColor(buf, ivec2(coord));\n}\n\nvec4 rippleColor(\n    in sampler2D state,\n    in sampler2D old,\n    in sampler2D new,\n    in ivec2 coord,\n    in ivec2 res,\n    in float time\n) {\n    vec2 mouseCoord = texelFetch(state, txMouseState, 0).xy;\n    bool mouseDown = texelFetch(state, txMouseIsPressed, 0).x == 1.;\n    bool mouseHeld = texelFetch(state, txMouseIsPressed, 0).z == 1.;\n    float mouseTime = texelFetch(state, txMouseIsPressed, 0).w;\n    float mouseDistance = distance(mouseCoord, vec2(coord));\n    \n    if (mouseHeld && mouseDistance <= 1.) {\n        return vec4(1.0);\n    }\n    //return getColor(new, coord) * dampening;\n    vec4 color = (\n        getColor(old, ivec2((coord.x - 1 + res.x) % res.x, coord.y)) +\n        getColor(old, ivec2((coord.x + 1 + res.x) % res.x, coord.y)) +\n        getColor(old, vec2(coord.x, (coord.y - 1 + res.y) % res.y)) +\n        getColor(old, vec2(coord.x, (coord.y + 1 + res.y) % res.y))\n        ) / 2.0 - getColor(new, coord);\n        \n    return color * dampening;\n        \n    \n    // Buffer2(x, y) = (Buffer1(x-1,y)\n    // Buffer1(x+1,y)\n    // Buffer1(x,y+1)\n    // Buffer1(x,y-1)) / 2 - Buffer2(x,y)\n \n    // Buffer2(x,y) = Buffer2(x,y) * damping\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(1., 1., 1., 1.);\n    if ((iFrame % 2) == 0) {\n        fragColor = getColor(iChannel1, fragCoord);\n    } else {\n        fragColor = rippleColor(\n            iChannel0,\n            iChannel2,\n            iChannel1,\n            ivec2(floor(fragCoord)),\n            ivec2(floor(iResolution.xy)),\n            iTime\n        );\n    }\n    //ivec2 ifragCoord = ivec2(fragCoord.xy);\n    //ivec2 ires = ivec2(iResolution.xy);\n    //if (iFrame > 2) fragColor = texture(iChannel1, fragCoord.xy) * 0.99;\n    //vec2 coord = fragCoord;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if ((iFrame % 2) == 0) {\n        fragColor = getColor(iChannel2, fragCoord);\n    } else {\n        fragColor = rippleColor(\n            iChannel0,\n            iChannel1,\n            iChannel2,\n            ivec2(floor(fragCoord)),\n            ivec2(floor(iResolution.xy)),\n            iTime\n        );\n    }\n    \n    //ivec2 ifragCoord = ivec2(fragCoord.xy);\n    //ivec2 ires = ivec2(iResolution.xy);\n    //fragColor = rippleColor(iChannel0, iChannel1, iChannel2, fragCoord, iTime);\n}","name":"Buf C","description":"","type":"buffer"}]}