{"ver":"0.1","info":{"id":"4fK3Rt","date":"1713153669","viewed":39,"name":"five_lights_sphere","username":"cosmos","description":"I am blinded by the lights \nI see the light ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lightssphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float EPSILON = 0.0001;\nconst float NEAR = 0.001;\nconst float FAR = 100.0;\n\nfloat sdSphere(vec3 p, float r)\n{\n  return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p)\n{\n    vec3 spherePosition = vec3(0.0, 0.0, 0.0);\n    float sphere = sdSphere(p - spherePosition, 1.0);\n    return sphere;\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 phong(vec3 position, vec3 normal, vec3 cameraPosition,\n    vec3 lightPosition, vec3 lightColor,\n    float ambientIntensity, float diffuseIntensity, float specularPower) \n{\n    vec3 N = normal;\n    vec3 L = normalize(lightPosition - position);\n    vec3 V = normalize(cameraPosition - position);\n    vec3 R = reflect(-L, N);\n    \n    float dotNL = max(dot(N, L), 0.0);\n    float dotVR = max(dot(V, R), 0.0);\n\n    vec3 color = vec3(0.0, 0.0, 0.0);\n\n    color += lightColor * ambientIntensity;\n    color += lightColor * diffuseIntensity * dotNL;\n    color += lightColor * pow(dotVR, specularPower);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 resolution = iResolution.xy;\n    vec2 uv = (fragCoord * 2.0 - resolution) / resolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    float fov = tan(45.0 * 3.14 / 180.0);\n    vec3 rd = normalize(vec3(uv * fov, 1.0));\n    \n    float t = 0.0;\n    \n    for (int i = 0; i < 80; i++)\n    {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        t += d;\n        if (d < NEAR) break;\n        if (t > FAR) break;\n    }\n    \n    vec3 p = ro + rd * t;\n    vec3 n = estimateNormal(p);\n    \n    vec3 ambientColor = vec3(0.1);\n    \n    vec3 pointLightPos = vec3(cos(iTime), sin(iTime), -1.0);\n    vec3 pointLightColor = vec3(1.0, 1.0, 1.0);\n    float pointAmbientStrength = 0.1;\n    float pointDiffuseStrength = 0.5;\n    float pointSpecularStrength = 0.5;\n    float pointSpecularPower = 32.0;\n    vec3 pointLighting = phong(p, n, ro, pointLightPos, pointLightColor, pointAmbientStrength, pointDiffuseStrength, pointSpecularPower);\n    \n    vec3 directionLightDir = normalize(vec3(-1.0, -1.0, -1.0));\n    vec3 directionLightColor = vec3(1.0, 1.0, 1.0);\n    float directionAmbientStrength = 0.1;\n    float directionDiffuseStrength = 0.5;\n    float directionSpecularStrength = 0.5;\n    float directionSpecularPower = 32.0;\n    vec3 directionLighting = phong(p, n, ro, -directionLightDir * FAR, directionLightColor, directionAmbientStrength, directionDiffuseStrength, directionSpecularPower);\n    \n    vec3 spotLightPos = vec3(cos(iTime + 1.0), sin(iTime + 1.0), -1.0);\n    vec3 spotLightDir = normalize(vec3(1.0, -1.0, -1.0));\n    vec3 spotLightColor = vec3(1.0, 1.0, 1.0);\n    float spotAmbientStrength = 0.1;\n    float spotDiffuseStrength = 0.5;\n    float spotSpecularStrength = 0.5;\n    float spotSpecularPower = 32.0;\n    float spotLightAngle = 0.3;\n    float spotCosAngle = dot(-spotLightDir, normalize(spotLightDir));\n    float spotFactor = smoothstep(cos(spotLightAngle), cos(spotLightAngle + 0.1), spotCosAngle);\n    vec3 spotLighting = phong(p, n, ro, spotLightPos, spotLightColor, spotAmbientStrength, spotDiffuseStrength, spotSpecularPower) * spotFactor;\n    \n    vec3 lightColor1 = vec3(0.5, 0.5, 0.5);\n    vec3 lightPosition1 = vec3(sin(iTime + 2.0) * 3.0, cos(iTime + 2.0) * 3.0, -2.0);\n    float ambient1 = 0.1;\n    float diffuse1 = 0.5;\n    float specular1 = 32.0;\n    vec3 lighting1 = phong(p, n, ro, lightPosition1, lightColor1, ambient1, diffuse1, specular1);\n    \n    vec3 lightColor2 = vec3(0.3, 0.7, 0.9);\n    vec3 lightPosition2 = vec3(cos(iTime + 3.0) * 2.0, sin(iTime + 3.0) * 2.0, -3.0);\n    float ambient2 = 0.1;\n    float diffuse2 = 0.5;\n    float specular2 = 32.0;\n    vec3 lighting2 = phong(p, n, ro, lightPosition2, lightColor2, ambient2, diffuse2, specular2);\n    \n    vec3 lighting = ambientColor + pointLighting + directionLighting + spotLighting + lighting1 + lighting2;\n    \n    bool hit = t < FAR - EPSILON;\n    vec3 color = hit ? lighting : vec3(0.25, 0.25, 0.25);\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}