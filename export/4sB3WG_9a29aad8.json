{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\tAudio Visualizaer using my graphing tool. https://www.shadertoy.com/view/4dS3WG\n\n*/\n\n#define quality 8\n#define smoothness 1.6\n#define grid\n//#define subpixel\n//#define reverseLCD\n\nfloat f(float x)\n{\n\tfloat q = .0;\n\t\t\n\tif (x<0.0)\n\t{\n\t\tx = x/7.0+1.0;\n\t\tq = texture(iChannel0,vec2(x,1.0)).y-.5;\n\t\tq*= texture(iChannel0,vec2(0.0,0.0)).y*2.0;\n\t}\n\telse\n\t{\n\t\tx=x/7.0;\n\t\tx=pow(x*.82+.18,4.0);\n\t\tq = texture(iChannel0,vec2(x,0.0)).y-.5;\n\t}\n\tq*=4.0;\n\treturn q;\n}\n\nfloat hash(float x)\n{\n\treturn fract(sin(x*164437.36831)*13217.321); //decent hash for noise generation\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy-.5;\n\tuv.x = uv.x*iResolution.x/iResolution.y;\n\tuv*=2.0;\n\tfloat pixel = 4.0/iResolution.y;\n\t\n\tuv*=4.0; \n\t\t\n\tvec3 c = vec3(.0);\n\t\n\tfor (float fi=.0; fi<1.0; fi += 1.0/float(quality))\n\t{\n\t\t#ifdef subpixel\n\t\tfor (int i=0; i<3; i++)\n\t\t{\n\t\t\tfloat x = uv.x + hash(uv.y*41.0+fi)*pixel*float(smoothness)*.3333 + float(i)*pixel*.3333;\n\t\t\tfloat y = uv.y + hash(uv.x*41.0+fi)*pixel*float(smoothness);\n\t\t\n\t\t\tfloat s0 = f(x-pixel);\n\t\t\tfloat s1 = f(x+pixel);\n\t\t\t\n\t\t\tif (s0-pixel <= y && y < s1+pixel || s1-pixel <= y && y < s0+pixel)\n\t\t\t{\n\t\t\t\t#ifdef reverseLCD\n\t\t\t\tc[2-i] += 1.0;\n\t\t\t\t#else\n\t\t\t\tc[i] += 1.0;\n\t\t\t\t#endif\n\t\t\t}\n\t\t}\n\t\t#else \n\t\tfloat x = uv.x + hash(uv.y*41.0+fi)*pixel*float(smoothness);\n\t\tfloat y = uv.y + hash(uv.x*41.0+fi)*pixel*float(smoothness);\n\t\t\n\t\tfloat s0 = f(x-pixel);\n\t\tfloat s1 = f(x+pixel);\n\t\t\t\n\t\tif (s0-pixel <= y && y < s1+pixel || s1-pixel <= y && y < s0+pixel)\n\t\t{\n\t\t\tc += vec3(1.0);\n\t\t}\n\t\t#endif\n\t}\n\t\n\tc/=float(quality);\n\t\n\t#ifdef grid\n\tc += max(.0,1.0-abs(mod(uv.x+.5,1.0)-.5)/pixel*0.5)*.1/(.5+abs(uv.x)*.5);\n\tc += max(.0,1.0-abs(mod(uv.y+.5,1.0)-.5)/pixel*0.5)*.1/(.5+abs(uv.y)*.5);\n\t#endif\n\t\n\tfragColor = vec4(pow(c,vec3(.6)),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sB3WG","date":"1392621846","viewed":751,"name":"Audio Visualizer 2","username":"mu6k","description":"Audio visualizaer using my graphing tool. https://www.shadertoy.com/view/4dS3WG","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["2d","audio","graphing"],"hasliked":0,"parentid":"","parentname":""}}