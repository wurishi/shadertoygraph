{"ver":"0.1","info":{"id":"lttGWn","date":"1468973618","viewed":315,"name":"Sound Raytracer","username":"rory618","description":"Hear an echo of a beep against sphere","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["3d","sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define m 100.0\n#define up vec3(0,0,1)\n\nfloat angle(vec2 p) {\n    if (p.x < 0.0) {\n        return atan(p.y/p.x)+PI;\n    } else {\n        return atan(p.y/p.x);\n    }\n}\n\nvec4 load(vec2 a) {\n    return texture( iChannel0, (a) / iChannelResolution[0].xy, -100.0 );\n}\n\nvec4 save(vec4 v, vec2 a, vec2 c) {\n    return length(c-a)<.5 ? v : vec4(0);\n}\n\nfloat rd;\nvec2 ruv;\nvec3 rnorm;\n\nvoid s(vec3 o, vec3 d, vec3 s, float r) {\n    \n\tfloat A = dot(d, s-o);\n    float B = length(o-s+d*A);\n    if(B>r) {rd = m; return; }\n    if(length(s-o)>r){\n        rd = A-sqrt(r*r-B*B);\n    } else {\n        rd = A+sqrt(r*r-B*B);\n    }\n    if(rd < 0.0) {rd = m; return; }\n    \n    rnorm = normalize(o-s+rd*d);\n    \n    ruv = vec2(\n        (PI/2.+angle(vec2(length(rnorm.xy),rnorm.z) ))/(PI), \n        (PI/2.+angle(rnorm.xy))/(2.0*PI)      );\n    \n}\n\n\nvoid c(vec3 o, vec3 d, vec3 s, float r) {\n    \n\tfloat A = dot(d, s-o);\n    if(A < 0.0) {rd = m; return; }\n    float B = length(o-s+d*A);\n    if(B>r) {rd = m; return; }\n    rd = A-sqrt(r*r-B*B);\n    \n    rnorm = normalize(o-s+rd*d);\n    \n    ruv = vec2(\n        (PI/2.+angle(vec2(length(rnorm.xy),rnorm.z) ))/(PI), \n        (PI/2.+angle(rnorm.xy))/(2.0*PI)      );\n    \n}\n\n\nfloat Rd;\nint Rmat;\nvec2 Ruv;\nvec3 Rnorm;\n\nvoid ray(vec3 o, vec3 d) {\n    \n    Rd = m;\n    \n    s(o, d, vec3(  1.2,  0,0),1.0);  if (rd < Rd) {Rd = rd;Rmat = 4;Ruv = ruv;Rnorm = rnorm;}\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(.5);\n    uv *= 2.;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec3 o = vec3(0.0, 0, 0);\n    vec3 d = normalize(vec3(0.0,0.6,-.4));\n       \n    vec3 R = normalize(cross(d, up));\n    vec3 U = normalize(cross(R, d));\n    \n    d = normalize(d + R*uv.x + U*uv.y);\n    \n    ray(o,d);\n    \n    if (Rmat == 1){\n\t\tfragColor = texture(iChannel2, Ruv);\n    } else if (Rmat == 2) {\n\t\tfragColor = vec4(Rd*.1,Rd*.2,Rd*.13,1.0);\n    } else if (Rmat == 3) {\n\t\tfragColor = vec4(mod(Ruv*100.0,1.0),0,1.0);\n    } else if (Rmat == 4) {\n\t\tfragColor = vec4(sin(vec3(200.0,200.0,800.0)*Rnorm),1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define m 100.0\n#define up vec3(0,0,1)\n\n\nvec2 hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(443.897, 441.423, 437.195));\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n\n\n\nfloat angle(vec2 p) {\n    if (p.x < 0.0) {\n        return atan(p.y/p.x)+PI;\n    } else {\n        return atan(p.y/p.x);\n    }\n}\n\nfloat rd;\nvec2 ruv;\nvec3 rnorm;\n\nvoid s(vec3 o, vec3 d, vec3 s, float r) {\n    \n\tfloat A = dot(d, s-o);\n    float B = length(o-s+d*A);\n    if(B>r) {rd = m; return; }\n    if(length(s-o)>r){\n        rd = A-sqrt(r*r-B*B);\n    } else {\n        rd = A+sqrt(r*r-B*B);\n    }\n    if(rd < 0.0) {rd = m; return; }\n    \n    rnorm = normalize(o-s+rd*d);\n    \n    ruv = vec2(\n        (PI/2.+angle(vec2(length(rnorm.xy),rnorm.z) ))/(PI), \n        (PI/2.+angle(rnorm.xy))/(2.0*PI)      );\n    \n}\n\n\nvoid c(vec3 o, vec3 d, vec3 s, float r) {\n    \n\tfloat A = dot(d, s-o);\n    if(A < 0.0) {rd = m; return; }\n    float B = length(o-s+d*A);\n    if(B>r) {rd = m; return; }\n    rd = A-sqrt(r*r-B*B);\n    \n    rnorm = normalize(o-s+rd*d);\n    \n    ruv = vec2(\n        (PI/2.+angle(vec2(length(rnorm.xy),rnorm.z) ))/(PI), \n        (PI/2.+angle(rnorm.xy))/(2.0*PI)      );\n    \n}\n\n\nfloat Rd;\nint Rmat;\nvec2 Ruv;\nvec3 Rnorm;\n\n\nvoid ray(vec3 o, vec3 d) {\n    \n    Rd = m;\n    \n    s(o, d, vec3(  1.2,  0,0),1.0);  if (rd < Rd) {Rd = rd;Rmat = 4;Ruv = ruv;Rnorm = rnorm;}\n    \n}\n\nvec3 randomDirection(vec2 seed) {\n    vec2 r = hash22(seed);\n    float u = r.x;\n    float v = r.y;\n    float t = 2.0 * PI * u;\n    float p = acos(2.0 * v - 1.0);\n    return vec3(\n        cos(t)*cos(p),\n        sin(t)*cos(p),\n        sin(p)\n    );\n}\n\n\nfloat sound(float t){\n    \n    float tt = mod(t,3.0);\n    return sin(6.2831*440.0*tt)*exp(-15.0*tt);\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    \n    vec3 o = vec3(0.0, 0, 0);\n    vec3 L = o-vec3(0.1, 0., 0.);\n    vec3 R = o+vec3(0.1, 0., 0.);\n    \n    float sl = 0.0;\n    float sr = 0.0;\n    \n    for(int i = 0; i < 1000; i++){\n        \n        vec3 d = randomDirection(vec2(float(i)/100.0,time));\n        ray(L, d);\n        if (Rd < m)\n        \tsl += (1.0/1000.0)*sound(time - Rd*0.05);\n        \n    }\n    for(int i = 0; i < 1000; i++){\n        \n        vec3 d = randomDirection(vec2(float(i)/100.0,time));\n        ray(R, d);\n        \n        if (Rd < m)\n        \tsr += (1.0/1000.0)*sound(time - Rd*0.05);\n        \n    }\n    \n    return vec2(sl, sr  ) + vec2(sound(time));\n}","name":"Sound","description":"","type":"sound"}]}