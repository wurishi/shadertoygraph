{"ver":"0.1","info":{"id":"3dy3WW","date":"1574859294","viewed":1375,"name":"smart filtering","username":"FabriceNeyret2","description":"Between slow-nice explicit filtering and fast-ugly MIPmap, you can choose intermediate:  \nexplicit loop (possibly with kernel) relying on some coarse MIPmap level.\n#FILTER = 0: MIPmap    2: explicit sum    1: mix (default)\nmouse.y: filtering level. ","likes":8,"published":3,"flags":0,"usePreview":1,"tags":["filtering","mipmap","optimization","multiscale","tuto","gpmipmap","angles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://shadertoy.com/view/wsV3Wh\n// oops, I already did something similar 2 years ago ;-p : https://www.shadertoy.com/view/ltScRG\n\n#define FILTER 1   // filtering using:   0: MIPmap   1: mix-MIPmap   2: full-loop\n\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         T = iChannelResolution[0].xy,\n         M = length(iMouse.xy) > 20. ? iMouse.xy/R.y\n                                     :  vec2(min(mod(iTime,2.),2.-mod(iTime,2.))),\n         U = (u-.5)/R.y;\n    float lod =  M.y*log2(T.y), n, s=0.;\n    \n#if FILTER == 0 // pure MIPmapfiltering\n    \n    O = textureLod(iChannel0, U + .5/T, floor(lod) ); \n    \n#else          // loop filtering\n    \n    int N=32;\n    n = log2(float(N));\n    if (lod<n) n=lod, N=int(exp2(n));\n    O -= O;\n    \n    for (int k=0; k < N*N; k++) {\n        vec2  P = (vec2(k%N,k/N)-float(N-1)/2.),\n             dU = P / ( T / exp2(floor(lod-n)));\n        float w = 1.; // add your kernel(P) here\n        s += w;\n#if FILTER==1  // mix MIPmap + loop filtering\n        \n        O += w* textureLod(iChannel0,  U + dU + .5/T*exp2(floor(lod-n)), floor(lod-n));\n        \n#else          // full loop filtering\n        \n        O += w* texture(iChannel0,  U + dU + .5/T );\n        \n#endif\n    }\n    O /= s;\n#endif\n\n\n}","name":"Image","description":"","type":"image"}]}