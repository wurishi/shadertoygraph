{"ver":"0.1","info":{"id":"wdjczz","date":"1586067303","viewed":319,"name":"Procedural Taj","username":"Navfire","description":"This is a model of Taj Mahal, created using SDF Primitives. The symmetric nature of the building is key in getting good performance.\nEvaluating in 1 quadrant reduces the number of required evaluations by 4x. This runs at 45 fps on my GTX 980","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","proceduralmodeling","tajmahal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 20202 Navjot Garg\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This is a model of Taj Mahal, created using SDF Primitives. The symmetric nature of the building is key in getting good performance.\n// The building is evaluated in 1 quadrant and thus reduces the number of required evaluations by 4x. This runs at 45 fps on my GTX 980.\n// Thanks to iq for providing references and optimization tips.\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2   // make this 2 or 3 for antialiasing\n#endif\n\n//------------------------------------------------------------------\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdCone( in vec3 p, in float h, in float r1, in float r2 )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    \n    vec2 k1 = vec2(r2,h);\n    vec2 k2 = vec2(r2-r1,2.0*h);\n    vec2 ca = vec2(q.x-min(q.x,(q.y < 0.0)?r1:r2), abs(q.y)-h);\n    vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n    float rba  = rb-ra;\n    float baba = dot(b-a,b-a);\n    float papa = dot(p-a,p-a);\n    float paba = dot(p-a,b-a)/baba;\n\n    float x = sqrt( papa - paba*paba*baba );\n\n    float cax = max(0.0,x-((paba<0.5)?ra:rb));\n    float cay = abs(paba-0.5)-0.5;\n\n    float k = rba*rba + baba;\n    float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n\n    float cbx = x-ra - f*rba;\n    float cby = paba - f;\n    \n    float s = (cbx < 0.0 && cay < 0.0) ? -1.0 : 1.0;\n    \n    return s*sqrt( min(cax*cax + cay*cay*baba,\n                       cbx*cbx + cby*cby*baba) );\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdOctagonBox( vec3 p, vec2 r, vec2 s, float height )\n{\n    vec3 absP = abs(p);\n    vec2 p1 = vec2(r.x, s.y);\n    vec2 p2 = vec2(s.x, r.y);\n    float h = min(1.0, max(0.0, dot(absP.xz-p1, p2-p1)/dot2(p2-p1)));\n    vec2 q = p1+h*(p2-p1);\n    vec3 d = vec3(absP - vec3(q.x,height,q.y));\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat sdHemisphere(vec3 p, float s )\n{\n    float res = sdSphere(p, s);\n    return opSubtraction(sdBox(vec3(p.x, p.y+s/2.0, p.z),vec3(s,s/2.0,s)),res);\n}\n\nvec2 gate(vec3 pCylinder,vec3 pSphere, vec2 rh)\n{\n    float gateCylinder = sdCylinder(pCylinder, rh);\n    float gateDome = sdSphere(pSphere, rh.x);\n    return opU(vec2(gateCylinder, 2.0), vec2(gateDome,2.0));\n}\n\nfloat sdMainGate(vec3 p, vec2 rh, vec2 rOcta, vec2 sOcta, float heightOcta)\n{\n    float octa = sdOctagonBox(p,rOcta, sOcta, heightOcta);\n    \n    // Evaluate only one quadrant instead of 4\n    vec2 rhSmall = rh/2.2;\n    vec3 absPos = vec3(abs(p.x),p.y,abs(p.z));\n    // X\n    vec2 gates = gate(absPos-vec3(1.4,-0.1,0.0),absPos-vec3(1.4,0.5,0.0),rh);\n    // Y\n    gates = opU(gates,gate(absPos-vec3(0.0,-0.1,1.2), absPos-vec3(0.0,0.5,1.2),rh+vec2(0.05,0.0)));\n    // X top\n    gates = opU(gates,gate(absPos-vec3(1.4, 0.38,0.55),absPos-vec3(1.4,0.65,0.55),rhSmall));\n    // X bottom\n    gates = opU(gates,gate(absPos-vec3(1.4,-0.36,0.55),absPos-vec3(1.4,-0.08,0.55),rhSmall));\n    // Y top\n    gates = opU(gates,gate(absPos-vec3(0.7, 0.38,1.15),absPos-vec3(0.7,0.65,1.15),rhSmall));\n    // Y bottom\n    gates = opU(gates,gate(absPos-vec3(0.7, -0.36,1.15),absPos-vec3(0.7,-0.08,1.15),rhSmall));\n    // side top\n    gates = opU(gates,gate(absPos-vec3(1.25, 0.38,1.05),absPos-vec3(1.25,0.65,1.05),rhSmall));\n    // side bottom\n    gates = opU(gates,gate(absPos-vec3(1.25, -0.36,1.05),absPos-vec3(1.25,-0.08,1.05),rhSmall));\n    \n    return opSubtraction(gates.x,octa);\n}\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame,0))\n\n//------------------------------------------------------------------\n\n\nvec2 map( in vec3 pos )\n{   \n    float col = 7.5;\n    vec2 res = vec2( sdBox(pos, vec3(3.0, 0.25,2.5) ), col );\n    \n    // top facade\n    vec3 sos = vec3(abs(pos.x),pos.y,abs(pos.z));\n    res = opU(res,vec2( sdBox( sos-vec3(0.0,1.9,1.15), vec3(0.5, 0.15,0.05) ), col ));\n    res = opU(res, vec2( sdSphere(sos - vec3(0.47,2.25,1.2), 0.03), col));\n    res = opU(res, vec2( sdCylinder(sos - vec3(0.47,1.25,1.2), vec2(0.03, 1.0)), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(0.47,2.3,1.2), vec2(0.005+max(0.0,sin(100.0*pos.y + 10.0))/40.0,0.1)), col));\n    \n    res = opU(res,vec2( sdBox( sos-vec3(1.35,1.9,0.0), vec3(0.05, 0.15,0.38) ),col ));\n    res = opU(res, vec2( sdSphere(sos - vec3(1.4,2.25,0.35), 0.03), col));\n    res = opU(res, vec2( sdCylinder(sos - vec3(1.4,1.25,0.35), vec2(0.03, 1.0)), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(1.4,2.3,0.35), vec2(0.005+max(0.0,sin(100.0*pos.y + 10.0))/40.0,0.1)), col));\n    \n    // side spires\n    res = opU(res, vec2( sdSphere(sos - vec3(1.0,2.0,1.2), 0.03), col));\n    res = opU(res, vec2( sdCylinder(sos - vec3(1.0,1.1,1.2), vec2(0.03, 0.9)), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(1.0,2.05,1.2), vec2(0.005+max(0.0,sin(100.0*pos.y + 10.0))/40.0,0.1)), col));\n    \n    res = opU(res, vec2( sdSphere(sos - vec3(1.4,2.0,0.8), 0.03), col));\n    res = opU(res, vec2( sdCylinder(sos - vec3(1.4,1.1,0.8), vec2(0.03, 0.9)), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(1.4,2.05,0.8), vec2(0.005+max(0.0,sin(100.0*pos.y + 10.0))/40.0,0.1)), col));\n    \n    // main building with gates\n    res = opU(res, vec2(sdMainGate(pos - vec3(0.0,0.9,0.0),vec2(0.3,0.6),vec2(1.4,1.2), vec2(1.0,0.8), 0.9),col));\n    \n    // four columns\n    res = opU(res, vec2(sdCone(sos - vec3(2.7,0.9,2.2),0.9, 0.2, 0.12), col));\n    res = opU(res, vec2(sdSphere(sos - vec3(2.7,2.15,2.2),0.13), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(2.7,2.35,2.2), vec2(0.01+max(0.0,sin(100.0*pos.y + 5.0))/40.0,0.1)), col));\n    \n    // disks on columns\n    res = opU(res, vec2(sdCylinder(sos - vec3(2.7,2.1,2.2), vec2(0.15,0.03)), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(2.7,1.8,2.2), vec2(0.15,0.05)), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(2.7,1.25,2.2), vec2(0.17,0.05)), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(2.7,0.7,2.2), vec2(0.2,0.05)), col));\n  \n    //spires for 4 columns and 4 domes\n    float theta = 3.14/4.0;\n    for(int i = 0; i< 8; i++)\n    {  \n    \tres = opU(res, vec2(sdCylinder(sos - (vec3(2.7,1.95,2.2) + vec3(0.1*cos(theta),0.0, 0.1* sin(theta))), vec2(0.015,0.15)), col));\n        res = opU(res, vec2(sdCylinder(sos - (vec3(0.8,1.9,0.8) + vec3(0.25*cos(theta),0.0, 0.25* sin(theta))), vec2(0.03,0.2)),col));\n        theta += (3.14/4.0);\n    }\n    \n    // plates under small domes\n    res = opU(res, vec2(sdCylinder(sos - vec3(0.8,2.1,0.8), vec2(0.35,0.01)), col));\n    \n    // domes and spire on domes\n    res = opU(res,  vec2(sdHemisphere(sos- vec3(0.8,2.1,0.8),0.3), col));\n    res = opU(res, vec2(sdCylinder(sos - vec3(0.8,2.5,0.8), vec2(0.01+max(0.0,sin(100.0*pos.y + 10.0))/40.0,0.1)), col));\n    \n    // center dome\n    res = opU(res, vec2(sdCylinder(pos- vec3(0.0,2.0,0.0), vec2(0.7,0.3)), col));\n    res = opU(res, vec2(sdSphere(pos - vec3(0.0,2.5,0.0),0.7), col));\n    res = opU(res, vec2(sdCylinder(pos - vec3(0.0,3.4,0.0), vec2(0.025+max(0.0,sin(60.0*pos.y + 10.0))/20.0,0.2)), col));\n    return res;\n}\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in vec3 rad ) \n{\n    vec3 m = 1.0/rd;\n    vec3 n = m*ro;\n    vec3 k = abs(m)*rad;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\treturn vec2( max( max( t1.x, t1.y ), t1.z ),\n\t             min( min( t2.x, t2.y ), t2.z ) );\n}\n\nconst float maxHei = 0.8;\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 1.0;\n    float tmax = 50.0;\n\n    // raytrace floor plane\n    float tp1 = (0.0-ro.y)/rd.y;\n    if( tp1>0.0 )\n    {\n        tmax = min( tmax, tp1 );\n        res = vec2( tp1, 1.0 );\n    }\n    \n    // raymarch primitives   \n    vec2 tb = iBox( ro, rd, vec3(5.0,4.0,5.0) );\n    if( tb.x<tb.y && tb.y>0.0 && tb.x<tmax)\n    {\n        tmin = max(tb.x,tmin);\n        tmax = min(tb.y,tmax);\n\n        float t = tmin;\n        for( int i=0; i<70 && t<tmax; i++ )\n        {\n            vec2 h = map( ro+rd*t );\n            if( abs(h.x)<(0.0001*t) )\n            { \n                res = vec2(t,h.y); \n                 break;\n            }\n            t += h.x;\n        }\n    }\n    \n    return res;\n}\n\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    // bounding volume\n    float tp = (maxHei-ro.y)/rd.y; if( tp>0.0 ) tmax = min( tmax, tp );\n\n    float res = 1.0;\n    float t = mint;\n    for( int i=ZERO; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        float s = clamp(8.0*h/t,0.0,1.0);\n        res = min( res, s*s*(3.0-2.0*s) );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e).x;\n    }\n    return normalize(n);\n#endif    \n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) * (0.5+0.5*nor.y);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox( in vec2 p, in vec2 dpdx, in vec2 dpdy )\n{\n    // filter kernel\n    vec2 w = abs(dpdx)+abs(dpdy) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0*(abs(fract((p-0.5*w)*0.5)-0.5)-abs(fract((p+0.5*w)*0.5)-0.5))/w;\n    // xor pattern\n    return 0.5 - 0.5*i.x*i.y;                  \n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec3 rdx, in vec3 rdy )\n{ \n    vec3 col = vec3(0.7, 0.7, 0.9) - max(rd.y,0.0)*0.3;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = (m<1.5) ? vec3(0.0,1.0,0.0) : calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.2 + 0.18*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        //col = vec3(0.2);\n        col = 0.2 + 0.18*sin( m*2.0 + vec3(0.0,0.5,1.0) );\n        if( m<1.5 )\n        {\n            // project pixel footprint into the plane\n            vec3 dpdx = ro.y*(rd/rd.y-rdx/rdx.y);\n            vec3 dpdy = ro.y*(rd/rd.y-rdy/rdy.y);\n\n            float f = checkersGradBox( 5.0*pos.xz, 5.0*dpdx.xz, 5.0*dpdy.xz );\n            col = 0.15 + f*vec3(0.05);\n        }\n\n        // lighting\n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.5, 0.4, -0.6) );\n        vec3  hal = normalize( lig-rd );\n\t\tfloat amb = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.2, 0.2, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        \n        dif *= calcSoftshadow( pos, lig, 0.02, 2.5 );\n        dom *= calcSoftshadow( pos, ref, 0.02, 2.5 );\n\n\t\tfloat spe = pow( clamp( dot( nor, hal ), 0.0, 1.0 ),16.0)*\n                    dif *\n                    (0.04 + 0.96*pow( clamp(1.0+dot(hal,rd),0.0,1.0), 5.0 ));\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 3.80*dif*vec3(1.30,1.00,0.70);\n        lin += 0.55*amb*vec3(0.40,0.60,1.15)*occ;\n        lin += 0.85*dom*vec3(0.40,0.60,1.30)*occ;\n        lin += 0.55*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.25*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\t\tcol += 7.00*spe*vec3(1.10,0.90,0.70);\n\n        col = mix( col, vec3(0.7,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 cOrigin, in vec3 lookat, float cr )\n{\n\tvec3 cforward = normalize(lookat-cOrigin);\n\tvec3 yUp = vec3(0.0, 1.0 ,0.0);\n\tvec3 cRight = normalize( cross(cforward,yUp) );\n\tvec3 cUp =          ( cross(cRight,cforward) );\n    return mat3( cRight,cUp,cforward );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime*1.5;\n\n    // camera\t\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    vec3 ro = ta + vec3( 8.5*cos(6.0*mo.x), 1.0 + 5.0*mo.y, 10.5*sin(6.0*mo.x) );\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 tot = vec3(0.0);\n#if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n#else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n#endif\n\n        // ray direction\n        vec3 rd = ca * normalize( vec3(p,2.5) );\n\n         // ray differentials\n        vec2 px = (2.0*(fragCoord+vec2(1.0,0.0))-iResolution.xy)/iResolution.y;\n        vec2 py = (2.0*(fragCoord+vec2(0.0,1.0))-iResolution.xy)/iResolution.y;\n        vec3 rdx = ca * normalize( vec3(px,2.5) );\n        vec3 rdy = ca * normalize( vec3(py,2.5) );\n        \n        // render\t\n        vec3 col = render( ro, rd, rdx, rdy );\n\n\t\t// gamma\n        col = pow( col, vec3(0.4545) );\n\n        tot += col;\n#if AA>1\n    }\n    tot /= float(AA*AA);\n#endif\n\n    \n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}