{"ver":"0.1","info":{"id":"lXfyRX","date":"1726488896","viewed":15,"name":"testinterview","username":"Bofors","description":"test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979\n#define MAX_ITER 256\n#define MAX_DIST 128.\n#define TOL 0.001\n#define epsilon 0.0001\n\nfloat sd_sphere( vec3 p, vec3 q, float r)\n{\n  return length(p-q)-r;\n}\n\nfloat sdf(vec3 p) {\n    return sd_sphere(p,vec3(0.,0.,1.75),1.);\n}\n\nfloat raymarch(vec3 origin, vec3 direction) {\n    float d, d0 = 0.0;\n    vec3 p;\n   \n    for(int i = 0; i < MAX_ITER; i++){\n        p = origin + d*direction;\n        d = sdf(p);\n        d0 += d;\n        if(d0 > MAX_DIST || d < TOL) {\n            break;\n        }\n    }\n   \n    return d0;\n}\n\n\nvec3 normal(vec3 p) {\n    float d = sdf(p);\n   \n    vec3 normal = d - vec3(sdf(p - vec3(epsilon,0,0)),\n                           sdf(p - vec3(0,epsilon,0)),\n                           sdf(p - vec3(0,0,epsilon)));\n    return normalize(normal);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    vec3 eye = vec3(0.1*cos(iTime),0.1*sin(iTime),0);\n    vec3 direction = normalize(vec3((uv-0.5),.1));\n    float d = raymarch(eye, direction);\n    vec3 p = eye + d*direction;\n    float k = (MAX_DIST - d)/MAX_DIST;\n\n    vec3 color = vec3(0);\n    if(d<MAX_DIST) {\n        vec3 p = eye + direction * d;\n        vec3 normal = normal(p);\n        vec3 r = reflect(direction, normal);\n\n        float dif = .5+dot(normal, normalize(vec3(1,2,3)))*.5;\n        color = vec3(dif);\n    }\n    \n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}