{"ver":"0.1","info":{"id":"MctSRl","date":"1714330070","viewed":57,"name":"Torus parameterization","username":"nhuck","description":"Displays colors from the canonical map [0,1]x[0,1] -> R^3 for a torus.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Map uv to [0, 2*pi]\n    float u = 2.0 * 3.14159265 * uv.x + iTime;\n    float v = 2.0 * 3.14159265 * uv.y + iTime * 10.0;\n\n    // Torus parameters\n    float R = 0.35;  // Major radius\n    float r = 0.075; // Minor radius\n\n    // Calculate 3D position on the torus\n    float x = (R + r * cos(v)) * cos(u);\n    float y = (R + r * cos(v)) * sin(u);\n    float z = r * sin(v);\n\n    // Centering the torus at (0.5, 0.5, 0.5)\n    vec3 torus_center = vec3(0.5, 0.5, 0.5);\n    vec3 pos = torus_center + vec3(x, y, z);\n\n    // Use torus position as color\n    vec3 col = pos;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}