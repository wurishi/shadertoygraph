{"ver":"0.1","info":{"id":"NslBRX","date":"1645134672","viewed":63,"name":"l3ght","username":"natnatnat","description":"l3ght","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"fdByWd","parentname":"3+s"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nconst float PI = 3.14;\nconst float e = 2.71;\nconst float PHI = 1.61;\nconst mat3 points = mat3(-1., 1., 1., 0., -1., 1., 1., 1., 1.)/3.;\nconst mat3 colors = mat3(0., 0., 1., 0., 1., 0., 1., 0., 0.);\n\nvec2 rotateZ(vec2 point, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    vec2 finalPoint = mat2(c, -s, s, c) * point;\n    return finalPoint;\n}\n\nvec3 draw(vec2 uv, float angle, vec3 color) {\n    uv = uv * PI;\n    uv = rotateZ(uv, angle);\n    float z = (PHI * length(uv));\n    float d = abs(uv.y - z);\n    vec3 curveColor = vec3(pow(e, (-d + 1.)/1.));\n    return color * curveColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n \n    float angle = iTime/2.;\n    \n    vec3 color = vec3(0.);\n    \n    for(int i = 0; i < 3; i++) {\n        vec2 uv2 = uv - points[i].xy;\n        float angle2 = float(i + 1) * angle + float(i) * PI/2.;\n        color += draw(uv2, angle2, colors[i]);\n    }\n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}