{"ver":"0.1","info":{"id":"dsGGWW","date":"1678498122","viewed":123,"name":"Fisheye Shader Demo","username":"spleenstealer","description":"Fisheye for a rectangular display, using approximated uv scaling","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fisheye","rectangular"],"hasliked":0,"parentid":"ll2GWV","parentname":"Simple fisheye effect"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 checker(vec2 uv){\n \treturn vec3(abs(floor(mod(uv.x*10.,2.))-floor(mod(uv.y*10.,2.))));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy*2. / iResolution.xy-vec2(1.);\n    \n    /// Fisheye Distortion ///\n    float scaling = 1.5;\n    float d=length(uv/scaling);\n    float z = sqrt(1.0 - d * d);\n    float r = atan(d, z) / 3.14159;\n    float phi = atan(uv.y, uv.x);\n    \n    uv = vec2(r*cos(phi)+.5,r*sin(phi)+.5)*scaling;\n    \n    /////////////////////////\n    \n\tfragColor = vec4(checker(uv),1.);\n}","name":"Image","description":"","type":"image"}]}