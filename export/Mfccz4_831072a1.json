{"ver":"0.1","info":{"id":"Mfccz4","date":"1730307741","viewed":69,"name":"Exact 1028-Gon Algebra","username":"rikr","description":"Shader by Rik Riesmeijer as GLSL transcript of Ken Brakke's ngon.c output.","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["ring","tower","field","quadratic","algebra","algebra","compass","construction","ruler","regular","cyclic","1028","257gon","1028gon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Exact 1028-Gon Algebra.\n// Shader by Rik Riesmeijer as GLSL transcript of Ken Brakke's ngon.c output.\n// To the extent that I can I hereby release my copyright of this work.\nvoid mainImage(out vec4 y, vec2 z) {\n    y = vec4(0.0); // Initialize black coloring.\n    \n    // Normalize screen coordinates.\n    z = z - 0.5 * iResolution.xy;\n    z = 2.1 * z / iResolution.yy;\n\n    // My version of computer generated construction of 257-gon,\n    // generated by Ken Brakke's ngon.c, adapted to run in GLSL.\n    // The computer's construction of the 257-gon this is based on\n    // Can be found here: https://kenbrakke.com/RulerAndCompass/257-gon.m.txt\n    // This is a mathematica file with somewhat overbearing notation\n    // of explicit signs for each term while it makes very clear\n    // demarkations to show the quadratic nature of each constructed point.\n    float a1    = 0.5 -  1.0 + sqrt(0.25 *  1.0 *  1.0  + 64.0);\n    float a2    = 0.5 -  1.0 - sqrt(0.25 *  1.0 *  1.0  + 64.0);\n    float a3    = 0.5 *   a1 + sqrt(0.25 *   a1 *   a1  + 16.0);\n    float a4    = 0.5 *   a2 + sqrt(0.25 *   a2 *   a2  + 16.0);\n    float a5    = 0.5 *   a1 - sqrt(0.25 *   a1 *   a1  + 16.0);\n    float a6    = 0.5 *   a2 - sqrt(0.25 *   a2 *   a2  + 16.0);\n    float a7    = 0.5 *   a3 + sqrt(0.25 *   a3 *   a3  + 5.00 +  a1 + a3 +  a3);\n    float a8    = 0.5 *   a4 - sqrt(0.25 *   a4 *   a4  + 5.00 +  a2 + a4 +  a4);\n    float a9    = 0.5 *   a5 + sqrt(0.25 *   a5 *   a5  + 5.00 +  a1 + a5 +  a5);\n    float a10   = 0.5 *   a6 - sqrt(0.25 *   a6 *   a6  + 5.00 +  a2 + a6 +  a6);\n    float a11   = 0.5 *   a3 - sqrt(0.25 *   a3 *   a3  + 5.00 +  a1 + a3 +  a3);\n    float a12   = 0.5 *   a4 + sqrt(0.25 *   a4 *   a4  + 5.00 +  a2 + a4 +  a4);\n    float a13   = 0.5 *   a5 - sqrt(0.25 *   a5 *   a5  + 5.00 +  a1 + a5 +  a5);\n    float a14   = 0.5 *   a6 + sqrt(0.25 *   a6 *   a6  + 5.00 +  a2 + a6 +  a6);\n    float a15   = 0.5 *   a7 + sqrt(0.25 *   a7 *   a7  -   a1 -  a4 - a4 -  a7 +  a8 +  a8 -  a9);\n    float a16   = 0.5 *   a8 + sqrt(0.25 *   a8 *   a8  -   a2 -  a5 - a5 -  a8 +  a9 +  a9 - a10);\n    float a17   = 0.5 *   a9 + sqrt(0.25 *   a9 *   a9  -   a1 -  a6 - a6 -  a9 + a10 + a10 - a11);\n    float a18   = 0.5 *  a10 + sqrt(0.25 *  a10 *  a10  -   a2 -  a3 - a3 - a10 + a11 + a11 - a12);\n    float a19   = 0.5 *  a11 + sqrt(0.25 *  a11 *  a11  -   a1 -  a4 - a4 - a11 + a12 + a12 - a13);\n    float a20   = 0.5 *  a12 + sqrt(0.25 *  a12 *  a12  -   a2 -  a5 - a5 - a12 + a13 + a13 - a14);\n    float a21   = 0.5 *  a13 - sqrt(0.25 *  a13 *  a13  -   a1 -  a6 - a6 - a13 + a14 + a14 -  a7);\n    float a22   = 0.5 *  a14 + sqrt(0.25 *  a14 *  a14  -   a2 -  a3 - a3 - a14 +  a7 +  a7 -  a8);\n    float a23   = 0.5 *   a7 - sqrt(0.25 *   a7 *   a7  -   a1 -  a4 - a4 -  a7 +  a8 +  a8 -  a9);\n    float a24   = 0.5 *   a8 - sqrt(0.25 *   a8 *   a8  -   a2 -  a5 - a5 -  a8 +  a9 +  a9 - a10);\n    float a25   = 0.5 *   a9 - sqrt(0.25 *   a9 *   a9  -   a1 -  a6 - a6 -  a9 + a10 + a10 - a11);\n    float a26   = 0.5 *  a10 - sqrt(0.25 *  a10 *  a10  -   a2 -  a3 - a3 - a10 + a11 + a11 - a12);\n    float a27   = 0.5 *  a11 - sqrt(0.25 *  a11 *  a11  -   a1 -  a4 - a4 - a11 + a12 + a12 - a13);\n    float a28   = 0.5 *  a12 - sqrt(0.25 *  a12 *  a12  -   a2 -  a5 - a5 - a12 + a13 + a13 - a14);\n    float a29   = 0.5 *  a13 + sqrt(0.25 *  a13 *  a13  -   a1 -  a6 - a6 - a13 + a14 + a14 -  a7);\n    float a30   = 0.5 *  a14 - sqrt(0.25 *  a14 *  a14  -   a2 -  a3 - a3 - a14 +  a7 +  a7 -  a8);\n    float a39   = 0.5 *  a23 - sqrt(0.25 *  a23 *  a23  -  a23 - a24 - a25 - a28);\n    float a40   = 0.5 *  a24 - sqrt(0.25 *  a24 *  a24  -  a24 - a25 - a26 - a29);\n    float a46   = 0.5 *  a30 + sqrt(0.25 *  a30 *  a30  -  a30 - a15 - a16 - a19);\n    float a47   = 0.5 *  a15 - sqrt(0.25 *  a15 *  a15  -  a15 - a16 - a17 - a20);\n    float a48   = 0.5 *  a16 - sqrt(0.25 *  a16 *  a16  -  a16 - a17 - a18 - a21);\n    float a54   = 0.5 *  a22 + sqrt(0.25 *  a22 *  a22  -  a22 - a23 - a24 - a27);\n    float a55   = 0.5 *  a23 + sqrt(0.25 *  a23 *  a23  -  a23 - a24 - a25 - a28);\n    float a71   = 0.5 *  a39 - sqrt(0.25 *  a39 *  a39  -  a30 - a40 + a46);\n    float a111  = 0.5 *  a47 + sqrt(0.25 *  a47 *  a47  -  a22 - a48 + a54);\n    float a239  = 0.5 * a111 - sqrt(0.25 * a111 * a111  -   a7 + a15 + a55 + a71);\n    \n    // Constructing the core cosines we can use to derive anything else.\n    float x32   = 0.5 * a239;\n    float x64   = 2.0 *  x32  *  x32  - 1.0;\n    float x128  = 2.0 *  x64  *  x64  - 1.0;\n    float x256  = 2.0 * x128  * x128  - 1.0;\n    float x512  = 2.0 * x256  * x256  - 1.0;\n    float e1024 = 2.0 * x512  * x512  - 1.0;\n\n    // Construct powers of 2 of 1028-gon x coordinates.\n    float x1024 = 2.0 * x512  * x512  - 1.0;\n    float x0512 = x512;\n    float x0256 = x256;\n    float x0128 = x128;\n    float x0064 = x64;\n    float x0032 = x32;\n    float x0016 = sqrt(x0032 * 0.5 + 0.5);\n    float x0008 = sqrt(x0016 * 0.5 + 0.5);\n    float x0004 = sqrt(x0008 * 0.5 + 0.5);\n    float x0002 = sqrt(x0004 * 0.5 + 0.5);\n    float x0001 = sqrt(x0002 * 0.5 + 0.5);\n\n    // Construct powers of 2 of 1028-gon y coordinates.\n    float y1024 = sqrt(x1024 * -x1024 + 1.0);\n    float y0512 = sqrt(x0512 * -x0512 + 1.0);\n    float y0256 = sqrt(x0256 * -x0256 + 1.0);\n    float y0128 = sqrt(x0128 * -x0128 + 1.0);\n    float y0064 = sqrt(x0064 * -x0064 + 1.0);\n    float y0032 = sqrt(x32 * -x32 + 1.0);\n    float y0016 = sqrt(x0016 * -x0016 + 1.0);\n    float y0008 = sqrt(x0008 * -x0008 + 1.0);\n    float y0004 = sqrt(x0004 * -x0004 + 1.0);\n    float y0002 = sqrt(x0002 * -x0002 + 1.0);\n    float y0001 = sqrt(x0001 * -x0001 + 1.0);\n    \n    // Store each power of two x and y pair as 2d point.\n    vec2  p0001 = vec2(x0001,  y0001);\n    vec2  n0001 = vec2(x0001, -y0001);\n    vec2  p0002 = vec2(x0002,  y0002);\n    vec2  n0002 = vec2(x0002, -y0002);\n    vec2  p0004 = vec2(x0004,  y0004);\n    vec2  n0004 = vec2(x0004, -y0004);\n    vec2  p0008 = vec2(x0008,  y0008);\n    vec2  n0008 = vec2(x0008, -y0008);\n    vec2  p0016 = vec2(x0016,  y0016);\n    vec2  n0016 = vec2(x0016, -y0016);\n    vec2  p0032 = vec2(x0032,  y0032);\n    vec2  n0032 = vec2(x0032, -y0032);\n    vec2  p0064 = vec2(x0064,  y0064);\n    vec2  n0064 = vec2(x0064, -y0064);\n    vec2  p0128 = vec2(x0128,  y0128);\n    vec2  n0128 = vec2(x0128, -y0128);\n    vec2  p0256 = vec2(x0256,  y0256);\n    vec2  n0256 = vec2(x0256, -y0256);\n    vec2  p0512 = vec2(x0512,  y0512);\n    vec2  n0512 = vec2(x0512, -y0512);\n    vec2  p1024 = vec2(x1024,  y1024);\n    vec2  n1024 = vec2(x1024, -y1024);\n    \n    // Also derive rotation matrices induced by each point.\n    mat2  M0001 = mat2(p0001.x, -p0001.y, p0001.yx);\n    mat2  M0002 = mat2(p0002.x, -p0002.y, p0002.yx);\n    mat2  M0004 = mat2(p0004.x, -p0004.y, p0004.yx);\n    mat2  M0008 = mat2(p0008.x, -p0008.y, p0008.yx);\n    mat2  M0016 = mat2(p0016.x, -p0016.y, p0016.yx);\n    mat2  M0032 = mat2(p0032.x, -p0032.y, p0032.yx);\n    mat2  M0064 = mat2(p0064.x, -p0064.y, p0064.yx);\n    mat2  M0128 = mat2(p0128.x, -p0128.y, p0128.yx);\n    mat2  M0256 = mat2(p0256.x, -p0256.y, p0256.yx);\n    mat2  M0512 = mat2(p0512.x, -p0512.y, p0512.yx);\n    mat2  M1024 = mat2(p0512.x, -p0512.y, p0512.yx);\n    \n    // Demo of random operational point constructions.\n    y = smoothstep(0.02, 0.01, length(p0001 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0002 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0004 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0008 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0016 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0032 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0064 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0128 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0256 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p0512 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(p1024 - z)) + y;\n    \n    y = smoothstep(0.02, 0.01, length(M0016 * p0001 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0002 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0004 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0008 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0016 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0032 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0064 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0128 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0256 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p0512 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0016 * p1024 - z)) + y;\n    \n    y = smoothstep(0.02, 0.01, length(M0128 * p0001 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0032 * p0002 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0512 * p0004 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0128 * p0008 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0064 * p0016 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0002 * p0032 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0008 * p0064 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0004 * p0128 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0001 * p0256 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M0256 * p0512 - z)) + y;\n    y = smoothstep(0.02, 0.01, length(M1024 * p1024 - z)) + y;\n}","name":"Image","description":"","type":"image"}]}