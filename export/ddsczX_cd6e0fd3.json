{"ver":"0.1","info":{"id":"ddsczX","date":"1687074144","viewed":108,"name":"Grounded","username":"directrix1","description":"Learning shaders.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Written By: Directrix1\n// Grounded, Just Learning\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float z = uv.y;\n    float falloff = max(0.8 - z, 0.0);\n    float invfalloff = 1.0 - falloff;\n    z = z * z;\n    z = z * z;\n    vec3 col = vec3(falloff, falloff, falloff);\n    col *= texture(iChannel0, (uv - vec2(0.5, 0.0)) * z + vec2(0.0, iTime / -50.0)).rgb;\n    \n    float angle = iTime / 10.0;\n    float scale = sin(iTime / 5.0) + 1.5;\n    vec2 xbasis = vec2(cos(angle), -sin(angle)) * scale;\n    vec2 ybasis = vec2(sin(angle), cos(angle)) * scale;\n    uv -= 0.5;\n    vec2 uv2 = uv.x * xbasis + uv.y * ybasis;\n    uv = uv.x * ybasis + uv.y * xbasis;\n    \n    col += invfalloff * invfalloff * (texture(iChannel0, uv).rgb * texture(iChannel0, uv2).rgb);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}