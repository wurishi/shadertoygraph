{"ver":"0.1","info":{"id":"4scSWM","date":"1459521955","viewed":277,"name":"Marching spaceslime","username":"Fluffy","description":"Raymarching arbitrary geometry with reflections, and background.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n////////////////////////////////////////////////////////////////////////\n\n\n#define PI 3.14159265359\nconst vec3 sunDir = normalize(vec3(1.0, 1.0, 0.5));\n\n/*float terrainFunction(float x, float z)\n{\n    return sin(x) * sin(z) * 1.0;\n}*/\n\n/*vec3 normalAt(float x, float y)\n{\n    float epsilon = 0.01;\n    \n    float s = terrainFunction(x, y);\n    float dx = s - terrainFunction(x + epsilon, y);\n    float dy = s - terrainFunction(x, y + epsilon);\n    return normalize(vec3(dx, epsilon, dy));\n    \n}*/\n\nfloat terrainFunction(vec3 posIn)\n{\n    vec3 pos = vec3(posIn.x - 1.5, posIn.y, posIn.z - 1.0);\n    float scale = 1.0;\n    float time = iTime * 1.0;\n    return sin(pos.x)+sin(pos.y + time)+sin(pos.z)\n        -sin(pos.x)*sin(pos.y + time)*sin(pos.z)\n        -cos(time) * sin(pos.y) + cos(pos.x) * sin(pos.z) + sin(pos.y) * cos(pos.z);\n    //return snoise(vec3(pos.x * scale, pos.y * scale + time + (sin(time / 4.0) * 4.0 + 1.0), pos.z * scale));\n}\n\n/*\nvec3 normalAt(vec3 pos)\n{\n    float epsilon = 0.01;\n    \n    float s = terrainFunction(pos);\n    float dx = s - terrainFunction(vec3(pos.x + epsilon, pos.y, pos.z));\n    float dy = s - terrainFunction(vec3(pos.x, pos.y + epsilon, pos.z));\n    float dz = s - terrainFunction(vec3(pos.x, pos.y, pos.z + epsilon));\n                                   \n    return normalize(vec3(dx, dy, dz));\n}\n/*/\nvec3 normalAt(vec3 p)\n{\n    vec2 e = vec2(0.01, -0.01); \n    return normalize(\n        e.xyy * terrainFunction(p - e.xyy) + \n        e.yyx * terrainFunction(p - e.yyx) + \n        e.yxy * terrainFunction(p - e.yxy) + \n        e.xxx * terrainFunction(p - e.xxx) );\n}\n//*/\nfloat march(vec3 offset, vec3 dir)\n{\n    const float minDist = 2.0;\n    const float maxDist = 20.0;\n    const float delta = 0.1;\n\tfloat amp = sin(iTime / 10.0) + 1.5;\n    \n    float lastTer = 0.0;\n    float closest = 0.0;\n    \n    float d = minDist;\n    \n    for (float t = 0.0; t < 256.0; t++)\n    {\n        //float d = pow(t - minDist, 1.0) + minDist;\n        if (d > maxDist)\n            break;\n        vec3 pos = offset + dir * d;\n        //float ter = terrainFunction(pos.x, pos.z);\n        float ter = terrainFunction(pos);\n        \n        if (ter >= amp)\n        {\n            //return d - delta * 0.5;\n            return d - delta + delta * ((amp -lastTer) / (ter - lastTer));\n        }\n        \n        lastTer = ter;\n        \n        if (ter > closest)\n            closest = ter;\n        \n        d += delta;// * t / 30.0;\n    }\n    \n    return closest - amp;\n}\n\nvec3 rotX(vec3 vec, float r)\n{\n    float c = cos(r);\n    float s = sin(r);\n    float cy = c * vec.y;\n    float sy = s * vec.y;\n    float cz = c * vec.z;\n    float sz = s * vec.z;\n    \n    return normalize(vec3(vec.x, cy - sz, sy + cz));\n}\n\nvec3 rotY(vec3 vec, float r)\n{\n    float c = cos(r);\n    float s = sin(r);\n    float cx = c * vec.x;\n    float sx = s * vec.x;\n    float cz = c * vec.z;\n    float sz = s * vec.z;\n    \n    return normalize(vec3(cx - sz, vec.y, sx + cz));\n}\n\nvec4 background(vec3 dir)\n{\n    float sunDot = clamp(dot(dir, sunDir), 0.0, 1.0);\n    vec3 col = vec3(0.0, 0.4, 0.6) * sunDot;\n    \n    float mul = 200.0;\n    vec3 n = dir * mul;\n    \n    float s = pow(abs(snoise(n)), 10.0);\n    \n    if (sunDot > 0.0)\n    \ts *= 1.0 - pow(sunDot, 2.0);\n    col += vec3(s);\n    \n    if (sunDot > 0.0)\n    {\n        sunDot = pow(sunDot * 1.03, 128.0);\n        vec3 sun = vec3(1.0, 1.0, 0.2) * sunDot;\n        col += sun;\n    }\n    \n    return vec4(col, 1.0);\n}\n\nvec3 shade(vec3 position, vec3 rayDir)\n{\n    vec3 col = vec3(0.6, 0.8, 1.0);\n    \n    float mul = 1.0;\n    \n    for (int i = 0; i < 3; i++)\n    {\n    \tvec3 normal = normalAt(position);\n        col = col * (1.0 - mul) + mul * clamp(dot(normal, sunDir), 0.0, 1.0) * col;\n        \n        float dist = march(position, sunDir);\n        if (dist >= 0.0)\n            col *= 0.8;\n        else\n            col *= clamp(pow(-dist * 10.0, 0.8), 0.8, 1.0);\n        \n        rayDir = reflect(rayDir, normal);\n        \n        dist = march(position, rayDir);\n        if (dist >= 0.0)\n            position = (position + rayDir * dist);\n        else\n        {\n            col = col + col * clamp(background(rayDir).xyz, 0.0, 0.5) * 1.5;\n            break;\n        }\n        \n        mul *= 0.8;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cameraPos = vec3(0, 15.0, 0);\n    float focalLength = 2.0;\n    float x = fragCoord.x / iResolution.x - 0.5;\n    float y = (fragCoord.y / iResolution.y - 0.5) * (iResolution.y / iResolution.x);\n    \n    vec3 rayDir = normalize(vec3(x * focalLength, -1, y * focalLength));\n    rayDir = rotX(rayDir, -iMouse.y / 100.0);\n    rayDir = rotY(rayDir, -iMouse.x / 100.0);\n    \n    float dist = march(cameraPos, rayDir);\n    if (dist < 0.0)\n    {\n        fragColor = background(rayDir);\n        return;\n    }\n    \n    vec3 pos = (cameraPos + rayDir * dist);\n    \n\tvec3 color = shade(pos, rayDir) / sqrt(dist / 10.0) * 1.5;\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}