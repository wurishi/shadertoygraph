{"ver":"0.1","info":{"id":"tl3cDH","date":"1608961061","viewed":178,"name":"Pixel Springs","username":"AmazingThew","description":"Every pixel seeks its target value using a spring constraint\n\nChange the MODE variable in Common to see the effect in different color spaces\n\nWas mostly just curious what this would look like. The RGB mode is roughly how LCD overdrive produces artifacts","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["spring","constraint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 currentValues = texture(iChannel0, fragCoord/iResolution.xy);;\n    \n    if (MODE == MODE_HSV)\n        fragColor = vec4(hsv2rgb(currentValues.rgb), 1.0);\n    else\n        fragColor = currentValues;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Target value buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 video = textureAspect(iChannel0, iChannelResolution[0], iResolution, fragCoord);\n    float luminance = dot(video.rgb, vec3(0.299, 0.587, 0.114));\n    \n    if (MODE == MODE_LUMINANCE)\n    {\n        fragColor = vec4(vec3(luminance), 1.0);\n    }\n    \n    else if (MODE == MODE_HSV)\n    {\n        // Extremely goofy hack:\n        // Since HSV is Jank, hue and saturation are discontinuous at white and black. This results in\n        // wild oscillations in the spring motion when pixels touch those values.\n        // I'm mitigating this by just injecting noise to mask the problem lol\n        // Totally unscientific but looks slightly nicer aesthetically\n        float cubeResolution = iChannelResolution[1].x;\n        vec4 noise = textureLod(iChannel1, vec3(fragCoord/cubeResolution, float(iFrame)/cubeResolution), 0.0);\n        \n        float noiseStrength = 0.05;\n        if (luminance < 0.5)\n            video.rgb += noise.rgb * noiseStrength;\n        else\n            video.rgb -= noise.rgb * noiseStrength;\n    \n        fragColor = vec4(rgb2hsv(video.rgb), 1.0);\n    }\n    \n    else\n    {\n        fragColor = video;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define DAMPING_RATIO 0.05\n#define ANGULAR_FREQUENCY 8.11\n\n#define MODE_LUMINANCE 0\n#define MODE_RGB 1\n#define MODE_HSV 2\n\nint MODE = MODE_HSV;\n\n\n\nstruct SpringState {\n    vec3 values;\n    vec3 velocities;\n};\n\n\n//Via http://allenchou.net/2015/04/game-math-precise-control-over-numeric-springing/\nSpringState spring(vec3 currentValues, vec3 currentVelocities, vec3 targetValues, float dt) {\n    \n    float f = 1.0f + 2.0f * dt * DAMPING_RATIO * ANGULAR_FREQUENCY;\n    float oo = ANGULAR_FREQUENCY * ANGULAR_FREQUENCY;\n    float hoo = dt * oo;\n    float hhoo = dt * hoo;\n    float detInv = 1.0f / (f + hhoo);\n    vec3 detX = f * currentValues + dt * currentVelocities + hhoo * targetValues;\n    vec3 detV = currentVelocities + hoo * (targetValues - currentValues);\n    \n    vec3 newValues = detX * detInv;\n    vec3 newVelocities = detV * detInv;\n    \n    return SpringState(newValues, newVelocities);\n}\n\n\n\n// Via http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    c = vec3(\n        c.x > 1.0 || c.x < 0.0 ? fract(c.x) : c.x,\n        clamp(c.y, 0.0, 1.0),\n        clamp(c.z, 0.0, 1.0)\n    );\n    \n    \n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n// Via https://www.shadertoy.com/view/XlG3DW\nvec4 textureAspect(sampler2D tex, vec3 channelResolution, vec3 iResolution, vec2 fragCoord)\n{\n    vec2 U = fragCoord;\n    vec2 margin = vec2(0),\n         Sres = iResolution.xy -2.*margin,\n         Tres = channelResolution.xy,\n         ratio = Sres/Tres;\n    \n    U -= margin;\n    \n    // centering the blank part in case of rectangle fit\n    U -= .5*Tres*max(vec2(ratio.x-ratio.y,ratio.y-ratio.x),0.);\n    \n  //U /= Tres*ratio.y;               // fit height, keep ratio\n  //U /= Tres*ratio.x;               // fit width, keep ratio\n    U /= Tres*min(ratio.x,ratio.y);  // fit rectangle,  keep ratio\n    U *= 1.;                         // zoom out factor \n    \n\tvec4 result = fract(U)==U \n        ? texture(tex, U)\n        : vec4(0.0);\n        \n        return result;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Current value buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 targetValues      = texture(iChannel0, uv).xyz;\n    vec3 currentValues     = texture(iChannel1, uv).xyz;\n    vec3 currentVelocities = texture(iChannel2, uv).xyz;\n    \n    SpringState newState = spring(currentValues, currentVelocities, targetValues, iTimeDelta);\n    \n    fragColor = vec4(newState.values, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Current velocity buffer\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 targetValues      = texture(iChannel0, uv).xyz;\n    vec3 currentValues     = texture(iChannel1, uv).xyz;\n    vec3 currentVelocities = texture(iChannel2, uv).xyz;\n    \n    SpringState newState = spring(currentValues, currentVelocities, targetValues, iTimeDelta);\n    \n    fragColor = vec4(newState.velocities, 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}