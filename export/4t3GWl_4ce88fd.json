{"ver":"0.1","info":{"id":"4t3GWl","date":"1472214352","viewed":148,"name":"Sphere","username":"chazbg","description":"sphere","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\nprecision mediump int;\n\n#define ASPECT_RATIO (iResolution.x / iResolution.y)\n\n// Transform UVs from [0..1] to [-1..1] space\nvec2 normalizeUVs(vec2 uvs)\n{\n\treturn uvs * 2.0 - 1.0;\n}\n\nstruct Sphere\n{\n\tvec3 pos;\n\tfloat r;\n    float ior;\n};\n\nbool getIntersection(vec3 ray, vec3 origin, Sphere s, out vec3 intersection, out vec3 n)\n{\n    bool res = false;\n  \n    vec3 originToCenter = s.pos - origin;\n    float projLength = dot(originToCenter, ray);\n    if (projLength > 0.0)\n    {\n        vec3 rayProj = ray * projLength;\n        float distanceToRay = length(rayProj - originToCenter);\n\n        float r = s.r;\n        if (distanceToRay < r)\n        {\n            float distToIntersection = projLength - sqrt(r * r - distanceToRay * distanceToRay);\n            intersection = origin + distToIntersection * ray;\n            n = normalize(intersection - s.pos);\n            res = true;\n        }\n    }\n    \n    return res;\n}\n\nvec3 getCameraPos(float time)\n{\n    mat3 rot = mat3(\n        vec3(cos(time), 0.0, -sin(time)),\n        vec3(0.0,       1.0,  0.0),\n        vec3(sin(time), 0.0,  cos(time)));\n    return rot * vec3(0.0, 0.0, 1000.0);\n}\n\nvec3 getViewDirection(vec3 cameraPos)\n{\n    return normalize(vec3(0.0) - cameraPos);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2  offset      = normalizeUVs(fragCoord.xy / iResolution.xy);\n\tvec3  cameraPos   = getCameraPos(iTime);\n\tvec3  cameraView  = getViewDirection(cameraPos);\n\tvec3  cameraUp    = vec3(0.0, 1.0,  0.0);\n\tvec3  cameraRight = cross(cameraView, cameraUp);\n\tfloat cameraNear  = 4.0;\n\t\n\tvec3 ray = normalize(cameraRight * offset.x * ASPECT_RATIO + cameraUp * -offset.y + cameraView * cameraNear);\n\t\n\tSphere s;\n    s.pos = vec3(0.0);\n    s.r = 200.0;\n    s.ior = 1.0 / 1.46;\n\n    vec3 intersection;\n    vec3 n;\n    if(getIntersection(ray, cameraPos, s, intersection, n))\n    {\n \t\tvec3 refl = reflect(ray, n);\n        fragColor = texture(iChannel0, refl);\n    }\n    else\n    {\n        fragColor = texture(iChannel0, ray);\n    }\n}","name":"Image","description":"","type":"image"}]}