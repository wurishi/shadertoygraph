{"ver":"0.1","info":{"id":"ttcBzH","date":"1612217255","viewed":64,"name":"Neural banana 3d","username":"iuryBorgesRodrigues","description":"Neural banana 3d","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["banana","neural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 1\n#define PI 3.14159\n\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n\n\n\n\n\n\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n    \n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n    \n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n        \n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat opSmoothSubtraction( float d1, float d2, float k )\n{\n    float h = max(k-abs(-d1-d2),0.0);\n    return max(-d1, d2) + h*h*0.25/k;\n\t//float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n\t//return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\nfloat car(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.95;\n    }\n    \n    //neural networks can be really compact... when they want to be\n   vec4 f0_0=sin(p.y*vec4(2.556,-.946,-2.699,-.741)+p.z*vec4(-1.483,2.396,-2.385,-1.649)+p.x*vec4(-2.851,-.907,2.749,-2.391)+vec4(4.765,7.578,7.689,-4.521));\nvec4 f0_1=sin(p.y*vec4(-1.665,2.121,-3.894,-3.065)+p.z*vec4(-1.598,2.802,-2.851,3.236)+p.x*vec4(3.045,3.716,3.424,-2.149)+vec4(-4.721,1.583,-6.146,-6.186));\nvec4 f0_2=sin(p.y*vec4(1.644,3.650,3.187,.915)+p.z*vec4(.846,1.462,2.175,-2.077)+p.x*vec4(-2.411,.467,-3.298,.877)+vec4(3.621,-4.773,-7.294,-8.715));\nvec4 f0_3=sin(p.y*vec4(.495,-.048,-3.670,-3.489)+p.z*vec4(.656,-.058,3.385,-2.667)+p.x*vec4(-1.870,-3.151,-3.157,-.312)+vec4(4.513,6.944,-5.459,5.607));\nvec4 f1_0=sin(mat4(.185,-.179,-.261,-.073,-.075,-.162,-.062,.661,.088,.371,-.154,-.529,-.240,-.795,-1.227,.699)*f0_0+\n    mat4(-.696,-.986,-.261,.908,.105,.209,-.163,.572,.214,.173,-.297,.101,-.268,.361,.159,.132)*f0_1+\n    mat4(.098,-.362,.383,.202,-.046,.178,-.305,.283,.031,.207,-.217,.192,-.202,.105,-.001,-.070)*f0_2+\n    mat4(-.188,.111,-.561,.169,.144,.629,.387,.388,.387,-.005,.164,-.037,-.163,.094,-.366,-.175)*f0_3+\n    vec4(1.125,2.924,3.439,2.740))/1.0+f0_0;\nvec4 f1_1=sin(mat4(.097,-.190,.167,.702,-.303,-.166,-.238,.530,.078,-.168,.126,.932,-.082,-.258,-.755,.697)*f0_0+\n    mat4(-.038,-.447,.707,-.208,-.060,.246,.363,-.340,-.472,.192,-.245,-.025,.664,.265,.358,.215)*f0_1+\n    mat4(.457,.310,-.884,.307,-.110,-.052,-.957,-.001,-.130,-.464,-.198,.366,-.305,-.289,.413,-.239)*f0_2+\n    mat4(-.445,-.080,-.007,.721,.097,.405,.330,.518,-.278,.136,-.418,-.898,-.040,.355,-.405,-1.049)*f0_3+\n    vec4(-1.921,1.653,.516,.559))/1.0+f0_1;\nvec4 f1_2=sin(mat4(.125,-.162,-.232,-.323,-.283,.411,.307,-.854,.189,.065,.063,-.075,-.625,-.010,.190,-.750)*f0_0+\n    mat4(-.677,.180,-.199,-.145,.048,-.089,.391,.002,.101,.026,.322,.035,-.030,.032,.116,-.309)*f0_1+\n    mat4(-.197,-.085,-.092,.353,-.018,.261,.224,-.173,-.237,.011,-.008,-.142,.187,1.275,-.602,-.579)*f0_2+\n    mat4(-.334,.571,-.369,-.421,.120,.176,.489,-.275,.097,.098,-.017,.284,.028,-.210,-.536,-.030)*f0_3+\n    vec4(-1.991,-4.049,-.781,-2.659))/1.0+f0_2;\nvec4 f1_3=sin(mat4(-1.173,-.544,-.210,.203,.624,-.210,.109,1.192,.300,-.485,.529,-.028,-1.037,-.838,-.737,.325)*f0_0+\n    mat4(.338,-.202,.182,-.526,-.213,.085,-.286,.291,.183,.138,-.343,-.311,.332,.449,.187,.493)*f0_1+\n    mat4(-.540,-.059,-.149,-.148,.452,-.089,-.092,-.671,.079,-.234,-.161,-.499,-1.422,.102,.063,-.615)*f0_2+\n    mat4(-.068,-.293,.223,.003,-.064,1.449,-.021,-.382,-.019,-.374,-.169,-.499,.574,-.690,-.100,-.245)*f0_3+\n    vec4(3.648,.608,4.273,-3.358))/1.0+f0_3;\nvec4 f2_0=sin(mat4(-.104,.238,-.317,-.016,.314,.270,-.454,.096,.131,-.111,.536,.121,.276,1.426,-.353,.083)*f1_0+\n    mat4(.412,.257,-.098,.119,-.063,.060,-.066,.190,-.068,.144,-.258,-.007,.109,-.326,-.229,-.017)*f1_1+\n    mat4(.742,-.100,-.065,.500,-.532,-.476,.093,.067,.364,.824,-.538,.126,.066,.031,.280,.406)*f1_2+\n    mat4(.204,-.007,-.310,-.027,.168,.170,-.275,.258,.431,-.034,-.079,-.002,.062,-.187,-.549,-.126)*f1_3+\n    vec4(-3.525,-.842,-2.118,2.149))/1.4+f1_0;\nvec4 f2_1=sin(mat4(.247,-.041,-.180,.086,-.070,-.055,-.295,-.420,-.050,-.393,-.250,.490,.565,-.214,-.222,-.686)*f1_0+\n    mat4(.248,-.280,.730,.234,.411,.538,.201,-.384,.105,.454,.580,-.124,-.075,.487,.058,-.053)*f1_1+\n    mat4(.737,.581,.448,.122,.235,-.049,.320,-.097,.233,-.052,.102,-.348,.150,-.056,.504,-.020)*f1_2+\n    mat4(-.161,-.278,-.097,.138,.105,.370,-.549,-.043,-.116,-.199,.431,.246,.171,.272,-.160,-.132)*f1_3+\n    vec4(-1.529,-.269,-.798,-.542))/1.4+f1_1;\nvec4 f2_2=sin(mat4(.147,-.282,.219,.425,.883,-.465,-.008,-.319,-1.097,.003,.063,.229,.906,-1.461,1.049,.210)*f1_0+\n    mat4(.749,-.108,.462,.593,.072,-.075,.412,-.215,.371,-.323,-.326,.066,-.456,.208,-.038,.285)*f1_1+\n    mat4(.764,-.068,.641,.426,-.761,-.303,.216,-.317,.374,-.609,.750,.704,.920,.563,.352,-.304)*f1_2+\n    mat4(.095,.055,.335,.153,-.201,-.170,.292,-.056,-.255,.111,.401,.031,.029,.445,.303,-.417)*f1_3+\n    vec4(.700,1.633,1.829,-.864))/1.4+f1_2;\nvec4 f2_3=sin(mat4(-.027,.187,.325,.306,-.661,-.320,.447,.432,.664,-.332,-.036,.480,-.007,-.226,.341,-.387)*f1_0+\n    mat4(.691,.148,-.293,-.498,.009,.050,-.295,-.802,-.059,-.316,.319,-.226,.267,.486,.086,.277)*f1_1+\n    mat4(.089,-.980,-.202,.233,1.154,.573,-.812,-.656,1.029,.713,-.162,-.076,.086,-.485,-.436,-.373)*f1_2+\n    mat4(.240,.085,-.599,.256,-.146,.098,.046,-.442,.503,-.625,-.464,-.138,.204,.131,-.358,.184)*f1_3+\n    vec4(-.613,2.046,3.321,2.984))/1.4+f1_3;\nreturn dot(f2_0,vec4(.103,-.074,-.088,.085))+\n    dot(f2_1,vec4(-.074,.064,-.026,-.052))+\n    dot(f2_2,vec4(-.069,.066,-.070,-.107))+\n    dot(f2_3,vec4(.023,-.029,-.048,.049))+\n    -0.099;\n\n\n\n}\n\n\nvec2 map( in vec3 p, float atime )\n{\n\n\n    vec3 p1=p;\n   \n    \n   \n    \n    \n    float car=car(p*rotate_x(1.5))-0.02;\n \n    vec2 res = vec2(car,  1.0 );\n  \n   \n\n    res = opU(res,vec2(p.y+0.5,3.5));\n\n    \n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, float time )\n{\n    vec2 res = vec2(-1.0,-1.0);\n\n    float tmin = 0.5;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    for( int i=0; i<512 && t<tmax; i++ )\n    {\n        vec2 h = map( ro+rd*t, time );\n        if( h.x<0.001 )\n        { \n            res = vec2(t,h.y); \n            break;\n        }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, float time )\n{\n/*\n    vec2 e = vec2(0.0005,0.0);\n    return normalize( vec3( \n        map( pos + e.xyy, time ).x - map( pos - e.xyy, time ).x,\n\t\tmap( pos + e.yxy, time ).x - map( pos - e.yxy, time ).x,\n\t\tmap( pos + e.yyx, time ).x - map( pos - e.yyx, time ).x ) );\n*/\n    vec3 n = vec3(0.0);\n    for( int i=min(iFrame,0); i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+0.0005*e,time).x;\n    }\n    return normalize(n);    \n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.11*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = map( opos, time ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{ \n    // sky dome\n    vec3 col = vec3(0.5, 0.8, 0.9) - max(rd.y,0.0)*0.5;\n    \n    vec2 res = castRay(ro,rd, time);\n    if( res.y>-0.5 )\n    {\n        float t = res.x;\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, time );\n        vec3 ref = reflect( rd, nor );\n        \n\t\tcol = vec3(0.2);\n        float ks = 1.0;\n\n        if( res.y==3.5 )\n        { \n            col = vec3(0.4,0.5,0.6);\n        } \n        else if( res.y==2.5 ) \n        { \n            col = vec3(0.0);\n        } \n        else if( res.y==1.3 ) \n        { \n            col = vec3(0.0);\n        }\n\t\telse \n        {\n            col = vec3(1.0,1.0,0.0);\n        }\n        \n        // lighting\n        vec3  sun_lig = normalize( vec3(0.6, 0.35, 0.5) );\n        float sun_dif = clamp(dot( nor, sun_lig ), 0.0, 1.0 );\n        vec3  sun_hal = normalize( sun_lig-rd );\n        float sun_sha = step(castRay( pos+0.001*nor, sun_lig,time ).y,0.0);\n\t\tfloat sun_spe = ks*pow(clamp(dot(nor,sun_hal),0.0,1.0),8.0)*sun_dif*(0.04+0.96*pow(clamp(1.0+dot(sun_hal,rd),0.0,1.0),5.0));\n\t\tfloat sky_dif = sqrt(clamp( 0.5+0.5*nor.y, 0.0, 1.0 ));\n        float bou_dif = sqrt(clamp( 0.1-0.9*nor.y, 0.0, 1.0 ))*clamp(1.0-0.1*pos.y,0.0,1.0);\n\n\t\tvec3 lin = vec3(0.0);\n        lin += sun_dif*vec3(8.10,6.00,4.20)*sun_sha;\n        lin += sky_dif*vec3(0.50,0.70,1.00);\n        lin += bou_dif*vec3(0.40,1.00,0.40);\n\t\tcol = col*lin;\n\t\tcol += sun_spe*vec3(8.10,6.00,4.20)*sun_sha;\n        \n        col = mix( col, vec3(0.5,0.7,0.9), 1.0-exp( -0.0001*t*t*t ) );\n    }\n\n    return col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\nvec2 glFragCoord;\nvec3 Ray( float zoom )\n{\n\treturn vec3( glFragCoord.xy-iResolution.xy*.5, iResolution.x*zoom );\n}\n\nvec3 Rotate( inout vec3 v, vec2 a )\n{\n\tvec4 cs = vec4( cos(a.x), sin(a.x), cos(a.y), sin(a.y) );\n\t\n\tv.yz = v.yz*cs.x+v.zy*cs.y*vec2(-1,1);\n\tv.xz = v.xz*cs.z+v.zx*cs.w*vec2(1,-1);\n\t\n\tvec3 p;\n\tp.xz = vec2( -cs.w, -cs.z )*cs.x;\n\tp.y = cs.y;\n\t\n\treturn p;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 tot = vec3(0.0);\n    mat3 rotation;\n\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n    vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5; \n\t\n\t\n    vec2 p = (-iResolution.xy + 2.0*fragCoord+o)/iResolution.y;\n    \n    \n      vec3 ray = Ray(1.8);\n\t\n\t\n\t\n\tray = normalize(ray);\n    vec3 localRay = ray;\n\n\tvec2 mouse = vec2(-.1,iTime*.01);\n\t\n\tmouse = vec2(.5)-iMouse.yx/iResolution.yx;\n\t\t\n    \n    float T = iTime*.0;\n\tvec3 pos = 3.0*Rotate( ray, vec2(.2,1.5-T)+vec2(-1.0,-7.0)*mouse );\n\t//pos += vec3(0,.3,0) + T*vec3(0,0,-1);\n    pos.y += .06-pos.z*.02; // tail is higher\n    pos.z += pos.z*.2; // centre on the end of the car we're looking at\n    pos.x += .3;//sign(pos.x)*.2*smoothstep(.0,.5,abs(pos.x)); // off-centre framingvec3 ray = Ray(1.8);\n\n    \n    \n    float time = iTime;\n\n    time *= 0.9;\n\n    // camera\t\n    float an = 10.57*iMouse.x/iResolution.x;\n    vec3  ta = vec3( 0.0, 0.0, 0.4);\n    vec3  ro =  vec3(0.0, 2.0, 0.0);\n\n     ro+=pos;\n    mat3 ca = setCamera( ro, ta, 0.0 );\n\n    vec3 rd = ca * normalize( vec3(p,1.8) );\n    \n    ;\n\n    vec3 col = render( ro, rd, time );\n\n    col = pow( col, vec3(0.4545) );\n\n    tot += col;\n    }\n     tot /= float(AA*AA);\n    fragColor = vec4(tot,1.0);\n}\n","name":"Image","description":"","type":"image"}]}