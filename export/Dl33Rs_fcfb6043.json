{"ver":"0.1","info":{"id":"Dl33Rs","date":"1682903387","viewed":43,"name":"ECR Bouncing Color Waves","username":"mbaernestocr","description":"The main change I made was to adjust the frequency values for the red and green waves to increase the amount of space they occupy in the output. Specifically, I decreased the frequency of the red wave to 2.0 and increased the frequency of the green to 3.0","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["waves","color","bouncing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // normalize the coordinates to range from -1 to 1\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\n    // calculate the pixel aspect ratio\n    float aspect = iResolution.x / iResolution.y;\n\n    // set the animation parameters\n    float time = iTime * 2.0;\n    float redFrequency = 2.0;\n    float greenFrequency = 3.0;\n    float blueFrequency = 4.0;\n\n    // calculate the color channels\n    float redValue = sin(uv.x * aspect * redFrequency + time);\n    float greenValue = sin(uv.y * greenFrequency + time);\n    float blueValue = sin(uv.x * aspect * blueFrequency + uv.y * blueFrequency + time);\n\n    // set the color\n    vec3 color = vec3(redValue, greenValue, blueValue);\n\n    // render the image\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}