{"ver":"0.1","info":{"id":"4sG3Ww","date":"1454637637","viewed":272,"name":"Waves in a pond","username":"jcarrano","description":"Create waves with the mouse using a discrete version of the wave equation.\nSimulate refraction to give the illusion of waves in a pond.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","simple","mouse","wave","refraction","equation","differential"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Taking the 2d wave as the surface of a liquid, simulate refraction.\n\n#define REFRACTION_INDEX 1.5\n#define POND_DEPTH 300.0\n#define WAVE_HEIGHT 100.0\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //versors in uv space\n    vec2 nu = vec2(1.0/iResolution.x, 0.0);\n    vec2 nv = vec2(0.0, 1.0/iResolution.y);\n    \n    float h = texture(iChannel1, uv).x;\n    \n    vec2 surface_gradient = vec2(\n    //    dFdx(h),dFdy(h)\n     \t    texture(iChannel1, uv + nu).x - texture(iChannel1, uv - nu).x, // dh/dx\n            texture(iChannel1, uv + nv).x - texture(iChannel1, uv - nv).x // dh/dy\n    );\n    \n    // hand made refraction\n    /*\n    vec2 angle_of_incidence = atan(surface_gradient);\n    vec2 angle_of_refraction = asin(sin(angle_of_incidence)*(1.0/REFRACTION_INDEX));\n    vec2 exit_angle = angle_of_refraction - angle_of_incidence;\n\t\n\tvec2 exit_displacement = tan(exit_angle)*((POND_DEPTH + h*WAVE_HEIGHT)/iResolution.xy);    \n\t*/\n    \n    // GLSL refraction\n    // first we need to compute the surface normal\n    vec3 normal = normalize(vec3(surface_gradient, 1.0));\n    vec3 incident = normalize(vec3(fragCoord-iResolution.xy/2.0, -iResolution.x));\n    vec2 exit_vector = refract(incident, normal, 1.0/REFRACTION_INDEX).xy;\n    \n    vec2 exit_displacement = exit_vector*((POND_DEPTH + h*WAVE_HEIGHT)/iResolution.xy);\n    \n    \n    fragColor.rgb = texture(iChannel0, uv + exit_displacement).rgb;\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Simulate a 2d wave\n\n#define C 40.0\n#define DT 0.1\n#define DAMPING 0.993\n#define MOUSE_RADIUS 10.0\n#define PRESS_FORCE 2.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float hit_by_mouse = clamp(\n        sqrt(1.0/(distance(iMouse.xy, fragCoord) + 1.0)-1.0/MOUSE_RADIUS),\n        0.0, 1.0)*PRESS_FORCE;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //versors in uv space\n    vec2 nu = vec2(1.0/iResolution.x, 0.0);\n    vec2 nv = vec2(0.0, 1.0/iResolution.y);\n    \n    // in this texture, x is the quantity, y the firtst derivarive\n   \tfloat top = texture(iChannel1, uv-nv).x;\n    float topleft = texture(iChannel1, uv-nv-nu).x;\n    \n    float left = texture(iChannel1, uv-nu).x;\n    float leftbottom = texture(iChannel1, uv-nu+nv).x;\n    \n    float bottom = texture(iChannel1, uv+nv).x;\n    float bottomright = texture(iChannel1, uv+nv+nu).x;\n    \n    float right = texture(iChannel1, uv+nu).x;\n    float righttop = texture(iChannel1, uv+nu-nv).x;\n    \n    vec2 center = texture(iChannel1, uv).xy;\n    \n    float dudt = center.y + \n        \t(\n                (\n                    (topleft + leftbottom + bottomright + righttop)*0.5\n                    + top + left + right + bottom\n                )*0.5 \n             - 3.0*center.x)*C*DT;\n    \n    fragColor.xy = vec2(center.x*DAMPING + dudt*DT + hit_by_mouse, dudt);\n    //fragColor.xy = vec2(0.0);\n\n    fragColor.zw = vec2(0.0,0.0);\n}","name":"Buf A","description":"","type":"buffer"}]}