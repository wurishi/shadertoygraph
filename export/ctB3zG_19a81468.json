{"ver":"0.1","info":{"id":"ctB3zG","date":"1673446193","viewed":169,"name":"Fork L-inf raym Cesium_137 162","username":"Cesium_137","description":"Ray marching in L-inf space is faster.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","linf"],"hasliked":0,"parentid":"ctB3Wm","parentname":"L-inf raymarching"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int it = 16; //transform iterations\nconst float eps = 0.0001; //amout of detail\n#define LINF 1\n#define PI 3.141592653\nfloat linf(in vec3 rd) { //project direction onto cube\n\tvec3 k = -vec3(1.0)/abs(rd);\n\treturn -max(max(k.x, k.y), k.z);\n}\nvec3 transform(in vec3 p) {\n    //the fractal\n    float d = 100000.;\n    int i;\n    for (i = 0; i < it; i += 1) {\n        p = abs(p);\n        p *= 2.0;\n        p -= vec3(1);\n        p.xy = vec2(abs(1.-max(p.x, -p.y)), (min(p.x, -p.y)))+vec2(0.75, 0.45);\n        p.y = abs(p.y);\n        p.yz = vec2(min(p.y, -p.z), max(p.y, -p.z))-vec2(1.0, 0.5);\n        p.xz = vec2(min(p.x, p.z), max(p.x, p.z))-0.9;\n    }\n    return p;\n}\nfloat sdf(in vec3 p) {\n    p = abs(transform(p))-1.0;\n    #if LINF\n\treturn ((max(max(p.x, p.y), p.z)))*pow(2., -float(it)); //linf distance to box\n    #else\n    return min(max(p.x,max(p.y,p.z)),0.0) + length(max(p,0.0))*pow(2., -float(it)); //euclidean dis\n    #endif\n}\nvec3 getColor(in vec3 ro, in vec3 rd) {\n    float d0 = 0.0;\n    int i;\n    float m = linf(rd);\n    for (i = 0; i < 1000; i += 1) {\n        #if LINF\n        float d = sdf(ro+rd*d0)*m;\n        #else\n        float d = sdf(ro+rd*d0);\n        #endif\n        d0 += d;\n        if (d < d0*eps || d0 > 100.) break;\n    }\n    if (d0 > 100.) return vec3(214./255., 238./255., 248./255.); //no hit\n    return mix(10.0/(vec3(i)+10.0), vec3(214./255., 238./255., 248./255.), 1.-exp(-0.1 * d0)); //hit\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy/iResolution.xy)-0.5;;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.y = -uv.y;\n    vec2 m = iMouse.z>0.0?((iMouse.xy)/iResolution.xy)*vec2(PI*2., PI):vec2(iTime, 2.0+sin(iTime)*0.1);\n    vec3 ro = vec3(sin(m.y)*cos(-m.x),sin(m.y)*sin(-m.x),cos(m.y))*0.05;\n    vec3 rd = -normalize(ro);\n    vec3 u = vec3(normalize(vec2(rd.y, -rd.x)), 0);\n    vec3 v = cross(u, rd);\n    rd = normalize(1.0*rd+u*uv.x+v*uv.y);\n    ro -= vec3(-0.6625000371078297,1.6874999810014544,0.4951437083081428);\n    fragColor = vec4(getColor(ro, rd), 1);\n}","name":"Image","description":"","type":"image"}]}