{"ver":"0.1","info":{"id":"ms33R8","date":"1676952965","viewed":100,"name":"evankh_ChromaticAberration","username":"evankh","description":"Simple chromatic aberration, greater near the edges.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration","lens"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nvoid mainImage(out vec4 color, in vec2 coord) {\n    vec2 uv = coord/iResolution.xy;\n    \n    float dist = distance(uv, vec2(0.5,0.5));\n    // Turning up the scale factor on the distance gives some really fun trippy effects - 50.0 is best\n    // Raising dist to a power keeps the center more coherent\n    dist = dist * dist * dist / 10.;\n    \n    // Samples the source image at 3 points equally spaced near the target point.\n    float th = 2.*PI/3.;\n    vec2 r_off = vec2(cos(th),sin(th));\n    vec2 g_off = vec2(cos(2.*th),sin(2.*th));\n    vec2 b_off = vec2(cos(0.),sin(0.));\n    \n    // This looks best if wrapping is set to clamp, but repeating amps up the trippiness\n    vec3 col = vec3(texture(iChannel0,uv+dist*r_off).r,\n    texture(iChannel0, uv+dist*g_off).g,\n    texture(iChannel0, uv+dist*b_off).b);\n    \n    color = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}