{"ver":"0.1","info":{"id":"MlGcDW","date":"1536241479","viewed":132,"name":"Emo Raytracing","username":"uynet","description":"raytracing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n\nstruct Object{\n    int type;\n    //0 ... sphere\n    //1 ... plane\n};\n\nstruct Sphere{\n    vec3 pos;\n    float rad;\n    vec3 color;\n};\n    \nstruct Plane{\n  vec3 pos;//center\n  vec3 normal;\n  vec3 color;\n};\n\nstruct Ray{\n    vec3 orig;\n    vec3 dist;\n};\n   \nstruct Intersect{\n  float time;//t\n  vec3 normal;\n  vec3 hitPos;//衝突位置\n  vec3 color;\n  float ref;  \n  int shape;//0:sphere 1:plane\n};\n    \n  \n   \nIntersect HitPlane(Ray ray,Plane plane){\n  Intersect i;\n    vec3 o = ray.orig;\n    vec3 d = ray.dist;\n  float t;\n  vec3 n = plane.normal;\n  vec3 p = plane.pos;\n\n  t = dot(p,n)/dot(d,n) - dot(o,n)/dot(d,n);\n  if(t<0.0)t = 114514.0;\n  i.time = t;\n  i.normal = n;\n  i.hitPos = o + t*d;\n  i.color = plane.color;\n    /*\n  if(i.hitPos.y <= -0.99){\n    if( (mod(i.hitPos.x,0.5)-0.25) *(mod(i.hitPos.z,0.5)-0.25)<0.0) {\n      i.color = vec3(0.0,0.0,0.0);\n    }\n  }\n    */\n  i.ref = 0.5;\n  i.shape = 1;\n  return i;\n}\n\n\nIntersect HitSphere(Ray ray,Sphere s){\n  Intersect i;\n    vec3 o = ray.orig;\n    vec3 d = ray.dist;\n  vec3 p = s.pos;\n  float r = s.rad;\n  float t;\n  float b = dot(d,o-p);\n  //判別式\n  float D = b*b - length(o-p)*length(o-p)+r;\n  if(D < 0.0)t = 114514.0;\n  if(-b -sqrt(D) > 0.0)t = -b-sqrt(D);\n  else if(-b +sqrt(D) > 0.0)t = -b+sqrt(D);\n  else t = 114514.0;\n\n  i.time = t;\n  i.color = s.color;\n  vec3 hitPos = o + t*d; //衝突位置\n  i.hitPos = hitPos;\n  i.normal = normalize(hitPos-p); //法線\n  i.ref = 0.1;\n  i.shape = 0;\n  return i;\n}\n\nvoid InitObject(){\n\n}\n\nvoid IntersectAllSpheres(){\n    \n}\n\nmat4 rotX(float arg){\n      mat4 m = mat4(1,0,0,0,\n                    0,cos(arg),-sin(arg),0,\n                    0,sin(arg),cos(arg),0,\n                    0,0,0,1);\n\treturn m;\n}\n\nmat4 rotY(float arg){\n      mat4 m = mat4(\n          \t\t\t\n          \t\t\t cos(arg),0,-sin(arg),0,\n                    0,1,0,0,\n                    sin(arg),0,cos(arg),0,\n                    0,0,0,1);\n\treturn m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float asp = iResolution.y / iResolution.x;\n    uv -= 0.5;\n    vec3 light = normalize(vec3(0.5,1,-1));\n    vec3 orig = vec3(0,0,-0.9);\n\tvec3 dist = normalize(vec3(uv.x , uv.y*asp , 1));\n \n    Ray ray;\n    ray.dist = dist;\n    ray.orig = orig;\n    \n    \n    vec3 poyo = vec3(0,0,2.4);\n    Sphere spheres[3];\n  spheres[0].pos = vec3(poyo.x-0.3,poyo.y,poyo.z);//球の中心点\n  spheres[0].rad = 0.15;//半径\n  spheres[0].color = vec3(1,0.3,0.6);\n\n  spheres[1].pos = vec3(poyo.x+0.4,poyo.y-0.2,poyo.z+0.4);//球の中心点\n  spheres[1].rad = 0.07;//半径\n  spheres[1].color = vec3(0.6,0.3,1);\n\n  spheres[2].pos = vec3(poyo.x+0.2,poyo.y-0.2,poyo.z-0.4);//球の中心点\n  spheres[2].rad = 0.05;//半径\n  spheres[2].color = vec3(0.3,0.6,1);\n\n    \n    Plane planes[6];\n    planes[0].pos = vec3(0,0,3);\n  \tplanes[0].color = vec3(0.5,0.8,0);\n \tplanes[0].normal = vec3(0,0,-1);\n      //←\n  planes[1];\n  planes[1].pos = vec3(-1,0,0);\n  planes[1].color = vec3(1,0,0);\n  planes[1].normal = vec3(1,0,0);\n  //下\n  planes[2];\n  planes[2].pos = vec3(0,-1,0);\n  planes[2].color = vec3(0,1,1);\n  planes[2].normal = vec3(0,1,0);\n  //→\n  planes[3];\n  planes[3].pos = vec3(1,0,0);\n  planes[3].color = vec3(0,1,0);\n  planes[3].normal = vec3(-1,0,0);\n  //↑\n  planes[4];\n  planes[4].pos = vec3(0,1,0);\n  planes[4].color = vec3(0.0,0.0,1.0);\n  planes[4].normal = vec3(0,-1,0);\n  //手前\n  planes[5];\n  planes[5].pos = vec3(0,0,-1);\n  planes[5].color = vec3(1,0.7,1);\n  planes[5].normal = vec3(0,0,1);\n\n  \n    \n    \n    Intersect result;\n    result.time = 114514.0;\n    result.color = vec3(0);\n    \n    vec3 finalColor = vec3(0);\n    \n    float str = 0.4;\n\n    for(int n = 0;n<3;n++){\n        //intersect with all spheres\n        for(int k = 0;k<3;k++){\n            Intersect i = HitSphere(ray,spheres[k]);\n            if(i.time < result.time){\n                result = i;\n                result.color *= str;\n            }\n        }\n\n        //intersect with all planes\n        for(int k = 0;k<6;k++){\n            Intersect i = HitPlane(ray,planes[k]);\n\n             if(i.time < result.time){\n                result = i;              \n                result.color *= str;\n            }\n        }\n        finalColor += result.color;\n       \n\n         dist = normalize(dist);\n        result.ref = 0.9;\n        str *= result.ref;\n        ray.dist = reflect(ray.dist,result.normal);\n        ray.orig = result.hitPos-0.003*dist;\n\t}\n     \n    fragColor = vec4(finalColor ,1.0);\n}","name":"Image","description":"","type":"image"}]}