{"ver":"0.1","info":{"id":"4sGGz1","date":"1453196188","viewed":614,"name":"Landscape from tutorial","username":"frutbunn","description":"Landscape using the tutorial from here.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define MAX_STEPS         80\n#define MAX_DISTANCE        40.\n#define MARCHING_STEP_INC   .5\n\n#define EPSILON .001\n\n#define COLORS  2\n\n#define PI 3.14159265358979323846\n#define TIMER(sec, min, max) (((mod(iTime, sec) * (max - min)) / sec) + min)\n\nconst vec3  fogColor  = vec3(.2, .1, .2);\n\n\nvec4 texSphere(sampler2D t, vec3 p, vec3 n, float scale) {\n    return texture(t, p.yz * scale) * abs (n.x)\n     + texture(t, p.xz * scale) * abs (n.y)\n     + texture(t, p.xy * scale) * abs (n.z);\n}\n\nmat2 mm2(in float a) {\n    float c = cos(a), s = sin(a);\n    \n    return mat2(c, s, -s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n\tfloat h = clamp( 0.5 + 0.5*(b-a)/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat rnd(vec2 co){\n    return fract(cos(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat cosNoise( in vec2 pos ) {\n    return 0.5 * (sin(pos.x) + sin(pos.y));\n}\n\nfloat map(in vec3 pos, out float o[COLORS]) {\n\n    const mat2 m2 = mat2(0.8, -0.6, \n                         0.6,  0.8);\n    \n    pos.z+=iTime*2.;\n    \n    vec2 q = pos.xz * 0.5;\n    float h = 0.0;\n    \n    float s = 0.5;\n    for ( int i = 0; i < 7; i++ )\n    {\n        h += s*cosNoise(q);\n        s *= 0.5;\n        \n        q = m2*q*1.7;\n    }\n    \n    h *= 2.0;\n    \n    o[0] = pos.y - h;\n    \n    return o[0];\n}\n\nfloat scene(in vec3 p, out float o[COLORS]) {\n    return map(p, o);\n}\n\nfloat scene(in vec3 p) {\n    float o[COLORS]; return map(p, o);\n}\n\nvoid colorize(in float depth, in vec3 color, out float current_depth, out vec3 current_color) {\n    const float max_displace = .25;\n    const float max_color_bleed = .25;\n    \n    float c = smoothstep(depth-max_color_bleed, depth+max_color_bleed, current_depth);\n    float d = smoothstep(depth-max_displace, depth+max_displace, current_depth);\n    \n    current_depth = depth*(d) + current_depth*(1.-d);\n    current_color = (1.-c)*current_color + (c)*color;\n}\n\nfloat rayMarch(in vec3 origin, in vec3 ray, out vec3 col) {\n    float o[COLORS];\n    \n    float t = 0.;\n    for (int i=0; i < MAX_STEPS; i++) {\n        float d = scene(origin + ray*t, o);\n        if (d < EPSILON) break;\n        t += d*MARCHING_STEP_INC;\n        if (t > MAX_DISTANCE) break;\n    }\n    float cd = 1000.;\n\n    colorize(o[0], vec3(1., 1.4, 1.2), cd, col ); \n    colorize(o[1], vec3(1., .7, 0.2), cd, col );\n\n    \n    return t;\n}\n\nfloat ambientOcculation(in vec3 origin, in vec3 ray) {\n    const float delta = .1;\n    const int samples = 6;\n    float r = 0.;\n    \n    for (int i=1; i <= samples; i++) {\n        float t = delta * float(i);\n        float d = scene(origin + ray*t);\n        float len = abs(t - d);\n        r += len * pow(2.0, -float(i));\n    }\n    \n    return r;\n}\n\nfloat shadowSample(in vec3 origin, in vec3 ray) {\n    float r = 1.;\n    float t = 1.;\n    const int samples = 6;\n    \n    for (int i=0; i <= samples; i++) {\n        float d = scene(origin + ray*t);\n        r = min(r, 2.0*d/t);\n\n        t += d;\n    }\n    \n    return max(r, 0.);\n}\n\nvec3 getNormal(in vec3 p, in float ep) {\n    float d0 = scene(p);\n    float dX = scene(p - vec3(ep, 0.0, 0.0));\n    float dY = scene(p - vec3(0.0, ep, 0.0));\n    float dZ = scene(p - vec3(0.0, 0.0, ep));\n\n    return normalize(vec3(dX-d0, dY-d0, dZ-d0));\n}\n\n#define GAMMA 1.2\n#define CONTRAST 1.25\n#define SATURATION 1.21\n#define BRIGHTNESS 1.2\nvec3 postEffects(in vec3 rgb, in vec2 xy) {\n    rgb = pow(rgb, vec3(GAMMA));\n    rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb*BRIGHTNESS)), rgb*BRIGHTNESS, SATURATION), CONTRAST);    \n\n    return rgb;\n}\n\nvec3 applyFog( in vec3  rgb, in float d ) {\n    const float fog = .08;\n  \n    float fogAmount = 1.0 - exp( -d*fog );\n    return mix( rgb, fogColor, fogAmount );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\n    vec2 uv2 = uv;\n\n    vec3 eye =   vec3(0.,  2., -17.);\n    vec3 light = vec3(-1,  2., -7.1);\n    \n    vec3 ray = vec3(uv.x, uv.y, 1.);\n    \n    vec3 scene_color = vec3(0.);\n\n    ray.zx*=mm2(TIMER(30. ,0., -PI*2.));\n    light.zx*=mm2(TIMER(30. ,0., -PI*2.));\n    eye.zx*=mm2(TIMER(30. ,0., -PI*2.));\n    ray.zy*=mm2((-PI*2./360.)*15.);\n    \n    float depth = rayMarch(eye, ray, scene_color);  \n    if (depth < MAX_DISTANCE) {\n        vec3 p = (eye + ray*depth);\n        \n        float d_ep=length(p - depth);\n        vec3 p_normal = getNormal(p, d_ep*d_ep*EPSILON*0.3);\n\n        vec3 light_dir = -normalize(light-p);\n        vec3 reflected_light_dir = reflect(-light_dir, -p_normal);\n        \n        vec3 np = p;\n        np.z+=iTime*2.;\n        \n        const float j=.003;\n        float shadow = shadowSample(p, -light_dir);\n        float attenuation = 1./(1. + j*pow( length(light-p), 2.0));\n        attenuation -= (1.-shadow)*.6;\n        \n        float ambient = pow(1.-ambientOcculation(p, -ray), 8.);\n        float diffuse = max(0., dot(light_dir, p_normal));\n        float lighting = max(0., (diffuse*.4 + ambient*.6)*attenuation);\n        \n        vec3 reflectioncolor = texture(iChannel1, reflect(ray, p_normal)).rgb; //bbb\n        vec3 texcol = texSphere(iChannel0, np, p_normal, .1 ).rrr*lighting;\n\n        scene_color = (clamp(mix(scene_color, reflectioncolor, max(0., 1.+(dot(-p_normal, ray)))), 0., 1.)+scene_color*.2)*lighting;\n        scene_color = scene_color + texcol*1.4;\n        scene_color *= max(dot(-p_normal,-ray),1.);\n        scene_color += reflectioncolor*.4*lighting;\n        scene_color = applyFog(scene_color, depth);\n        \n    } else {      \n        scene_color = fogColor;\n    }\n    \n    fragColor = vec4(postEffects(scene_color, uv), 1.);\n}","name":"Image","description":"","type":"image"}]}