{"ver":"0.1","info":{"id":"3ljcDK","date":"1595389498","viewed":55,"name":"Texting dots","username":"acarolli","description":"Texting, typing, writing animation ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["text","mobile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n    \n\tfloat c = smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*3.0);\n    return c;\n}\n\nfloat easeOutBounce(float x) {\n    float n1 = 7.5625;\n    float d1 = 2.75;\n\n    if (x < 1. / d1) {\n        return n1 * x * x;\n    } else if (x < 2. / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n}\n\nfloat easeInOutBack(float x) {\n    float c1 = 1.70158;\n    float c2 = c1 * 1.525;\n\n    return x < 0.5\n      ? (pow(2. * x, 2.) * ((c2 + 1.) * 2. * x - c2)) / 2.\n      : (pow(2. * x - 2., 2.) * ((c2 + 1.) * (x * 2. - 2.) + c2) + 2.) / 2.;\n}\n\nvec2 anime(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 3.0;\n    \n    //  Give each cell an index number\n    //  according to its position\n    float indexX = 0.0;\n    // indexX += step(1., mod(_st.x,3.0));\n    indexX += step(1., mod(_st.x,2.0));\n    indexX += step(1., mod(_st.x,3.0));\n    \n    // Rotate each cell according to the index\n    if(indexX == 0.0){\n        _st.y += easeOutBounce(cos(iTime));\n    } else if(indexX == 1.0) {\n        _st.y += easeOutBounce(cos(iTime));\n    } else if(indexX == 2.0){\n        _st.y += easeInOutBack(sin(iTime));\n    }\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    if (ceil(_st.y) == 2.) index = 1.;\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    // Rotate each cell according to the index\n    if(index != 1.0){\n        _st = vec2(1.);\n    }\n\n    return _st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 st = fragCoord/iResolution.xy;\n    // Animate\n    st = anime(st);\n    // Output to screen\n    fragColor = vec4(vec3(circle(st, 0.4)),1.0);\n}","name":"Image","description":"","type":"image"}]}