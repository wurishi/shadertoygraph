{"ver":"0.1","info":{"id":"Mf3yzj","date":"1730875458","viewed":112,"name":"Recolour Pixel","username":"Redstone118","description":"Converts a webcam image into a dithered and pixelised version with remapped colours","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["dither","colour","greyscale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int Count=8;\nconst float Pixelise=8.;\n\n\nvec3 Light = vec3(112,225,250)/255.;\nvec3 Dark  = vec3(100,000,000)/255.;\n\nvec3 Dither(vec3 InColour, vec2 Pos, float Count);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    fragCoord=vec2(fragCoord.x,fragCoord.y);\n    fragCoord=floor(fragCoord/Pixelise)*Pixelise;\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    col=vec3(col.r*.299+col.g*.587+col.b*.114);\n    \n    col=Dither(col,fragCoord,float(Count));\n    \n    col=col*(Light-Dark)+Dark;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\nvec3 Dither(vec3 InColour, vec2 Pos, float CCount){\n    mat4 Dith;\n    Dith[0]=vec4(0,8,2,10);\n    Dith[1]=vec4(12,4,14,6);\n    Dith[2]=vec4(3,11,1,9);\n    Dith[3]=vec4(15,7,13,5);\n    Dith/=16.*CCount;\n    \n    return floor((InColour+Dith[int(Pos.x)%4][int(Pos.y)%4])*CCount)/CCount;\n}","name":"Image","description":"","type":"image"}]}