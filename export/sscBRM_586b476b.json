{"ver":"0.1","info":{"id":"sscBRM","date":"1656202661","viewed":65,"name":"Colorful Celtic Knot","username":"YutingYang","description":"Coloring the manually designed black and white celtic knot icon.\nShader parameters obtained from Adelta framework:\nhttps://github.com/yyuting/Adelta","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["celticknot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This is a combination of a compiler-generated GLSL program for a rings shader with optimized parameters to best match a manually designed Celtic knot icon, and manual written functions to animate the shader.\n// Optimized parameters and code generated using paper:\n// Aùõø: Autodiff for Discontinuous Programs ‚Äì Applied to Shaders \n// Github: https://github.com/yyuting/Adelta\n\n// The compiler-generated GLSL code is less readable,\n// a more readable version of the shader written in DSL can be found here:\n// https://github.com/yyuting/Adelta/blob/main/apps/render_test_finite_diff_ring_contour.py\n\n// Original image: Celtic by Alexander Panasovsky from NounProject.com\n// https://thenounproject.com/icon/celtic-1975448/\n\n// Shader parameters obtained using the Adelta framework\n// https://github.com/yyuting/Adelta\n\n\n#define width 640.\n#define height 640.\n\n    \n\n// If true, aspect ratio in the original optimization will be preserved, but extra space outside original FOV might reveal artifact.\n// If false, FOV is the same as original optimization, but aspect ratio will not be preserved.\n#define preserve_aspect_ratio true\n\n// Smaller factor will zoom in the rendering, larger factor will zoom out\nfloat scale_factor = 1.;\n\n\n\n#define X float[](7.615541418598871, 3.1958388824500927, 458.68501938363124, 319.06880489818667, 458.7020970238246, 179.79764860448518, 319.07628043628426, 179.79672367088824, 402.2882093545668, 158.45713390241926, 238.60151108763006, 401.54639197969885, 482.465220009348, 239.33107099142546, 107.84700175620148, 107.78389644301186, 107.81751491514233, 107.79400641540995, 107.81338004281027, 107.7848352955487, -4.220089280211342, 4.480841568563986, -3.9808172317102923, -3.9910023918577515, 4.360672010354055, -4.658905431303271)\n\n\n#define p_0_idx 0\nfloat p_0 = X[p_0_idx];\n\n#define p_1_idx 1\nfloat p_1 = X[p_1_idx];\n\n#define ring_1_pos_0_idx 2\nfloat ring_1_pos_0 = X[ring_1_pos_0_idx];\n\n#define ring_3_pos_0_idx 3\nfloat ring_3_pos_0 = X[ring_3_pos_0_idx];\n\n#define ring_5_pos_0_idx 4\nfloat ring_5_pos_0 = X[ring_5_pos_0_idx];\n\n#define ring_7_pos_0_idx 5\nfloat ring_7_pos_0 = X[ring_7_pos_0_idx];\n\n#define ring_8_pos_0_idx 6\nfloat ring_8_pos_0 = X[ring_8_pos_0_idx];\n\n#define ring_9_pos_0_idx 7\nfloat ring_9_pos_0 = X[ring_9_pos_0_idx];\n\n#define ring_1_pos_1_idx 8\nfloat ring_1_pos_1 = X[ring_1_pos_1_idx];\n\n#define ring_3_pos_1_idx 9\nfloat ring_3_pos_1 = X[ring_3_pos_1_idx];\n\n#define ring_5_pos_1_idx 10\nfloat ring_5_pos_1 = X[ring_5_pos_1_idx];\n\n#define ring_7_pos_1_idx 11\nfloat ring_7_pos_1 = X[ring_7_pos_1_idx];\n\n#define ring_8_pos_1_idx 12\nfloat ring_8_pos_1 = X[ring_8_pos_1_idx];\n\n#define ring_9_pos_1_idx 13\nfloat ring_9_pos_1 = X[ring_9_pos_1_idx];\n\n#define ring_1_radius_idx 14\nfloat ring_1_radius = X[ring_1_radius_idx];\n\n#define ring_3_radius_idx 15\nfloat ring_3_radius = X[ring_3_radius_idx];\n\n#define ring_5_radius_idx 16\nfloat ring_5_radius = X[ring_5_radius_idx];\n\n#define ring_7_radius_idx 17\nfloat ring_7_radius = X[ring_7_radius_idx];\n\n#define ring_8_radius_idx 18\nfloat ring_8_radius = X[ring_8_radius_idx];\n\n#define ring_9_radius_idx 19\nfloat ring_9_radius = X[ring_9_radius_idx];\n\n#define ring_1_tilt_idx 20\nfloat ring_1_tilt = X[ring_1_tilt_idx];\n\n#define ring_3_tilt_idx 21\nfloat ring_3_tilt = X[ring_3_tilt_idx];\n\n#define ring_5_tilt_idx 22\nfloat ring_5_tilt = X[ring_5_tilt_idx];\n\n#define ring_7_tilt_idx 23\nfloat ring_7_tilt = X[ring_7_tilt_idx];\n\n#define ring_8_tilt_idx 24\nfloat ring_8_tilt = X[ring_8_tilt_idx];\n\n#define ring_9_tilt_idx 25\nfloat ring_9_tilt = X[ring_9_tilt_idx];\n\nbool global_rotate = true;\nbool self_rotate = true;\nbool color = true;\n\nfloat global_rotate_vel = 1.;\nfloat rotate_vel = 1.;\n\nvoid animate_params() {\n}\n\n\n                    \nvoid animate_coord(\ninout float  u, \ninout float  v){\n\n    if (global_rotate) {\n\n        float center_x = (X[ring_1_pos_0_idx] + \n                          X[ring_3_pos_0_idx] + \n                          X[ring_5_pos_0_idx] + \n                          X[ring_7_pos_0_idx] + \n                          X[ring_8_pos_0_idx] + \n                          X[ring_9_pos_0_idx]) / 6.;\n\n        float center_y = (X[ring_1_pos_1_idx] + \n                          X[ring_3_pos_1_idx] + \n                          X[ring_5_pos_1_idx] + \n                          X[ring_7_pos_1_idx] + \n                          X[ring_8_pos_1_idx] + \n                          X[ring_9_pos_1_idx]) / 6.;\n\n        vec2 rel = vec2(u, v) - vec2(center_x, center_y);\n\n        float r = length(rel);\n        float theta = atan(rel.y, rel.x);\n\n        theta += iTime * global_rotate_vel;\n\n        u = r * cos(theta) + center_x;\n        v = r * sin(theta) + center_y;\n    }\n                      \n}\n                    \nvoid animate_ring_col_9(\ninout vec3  fill_col, \nin float  rel_pos_9_x, \nin float  rel_pos_9_y){\n\n\n    if (!color) return;\n\n    float theta = atan(rel_pos_9_y, rel_pos_9_x);\n\n    if (self_rotate) {\n         theta += rotate_vel * iTime;\n    }\n    \n    fill_col = palette(theta, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,2.0,1.0),vec3(0.0,0.33,0.67));\n\n}\n\nvoid animate_ring_col_8(\ninout vec3  fill_col, \nin float  rel_pos_8_x, \nin float  rel_pos_8_y){\n\n    if (!color) return;\n\n    float theta = atan(rel_pos_8_y, rel_pos_8_x);\n    if (self_rotate) {\n        theta += 1.5 * rotate_vel * iTime;\n    }\n    fill_col = palette(theta, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,2.0,1.0),vec3(0.0,0.10,0.20) );\n}\n\nvoid animate_ring_col_7(\ninout vec3  fill_col, \nin float  rel_pos_7_x, \nin float  rel_pos_7_y){\n\n    if (!color) return;\n\n    float theta = atan(rel_pos_7_y, rel_pos_7_x);\n    if (self_rotate) {\n        theta += 1.3 * rotate_vel * iTime;\n    }\n    fill_col = palette(theta, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n}\n\nvoid animate_ring_col_5(\ninout vec3  fill_col, \nin float  rel_pos_5_x, \nin float  rel_pos_5_y){\n    if (!color) return;\n\n    float theta = atan(rel_pos_5_y, rel_pos_5_x);\n    if (self_rotate) {\n        theta += 2. * rotate_vel * iTime;\n    }\n    fill_col = palette(theta, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,3.0,2.0),vec3(0.8,0.90,0.30) );\n}\n\nvoid animate_ring_col_3(\ninout vec3  fill_col, \nin float  rel_pos_3_x, \nin float  rel_pos_3_y){\n    if (!color) return;\n\n    float theta = atan(rel_pos_3_y, rel_pos_3_x);\n    if (self_rotate) {\n        theta += 1.7 * rotate_vel * iTime;\n    }\n    fill_col = palette(theta, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,2.0,3.0),vec3(0.0,0.15,0.20) );\n}\n\nvoid animate_ring_col_1(\ninout vec3  fill_col, \nin float  rel_pos_1_x, \nin float  rel_pos_1_y){\n    if (!color) return;\n\n    float theta = atan(rel_pos_1_y, rel_pos_1_x);\n    if (self_rotate) {\n        theta += 1.4 * rotate_vel * iTime;\n    }\n    fill_col = palette(theta, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,4.0),vec3(0.5,0.20,0.25) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    fragCoord.y = iResolution.y - fragCoord.y;\n    \n    float current_u;\n    float current_v;\n    \n    if (preserve_aspect_ratio) {\n        float max_scale = max(width / iResolution.x, height / iResolution.y) * scale_factor;\n        \n        vec2 padding = (vec2(width, height) - max_scale * iResolution.xy) / 2.;\n        \n        current_u = fragCoord.x * max_scale + padding.x;\n        current_v = fragCoord.y * max_scale + padding.y;\n    } else {\n        current_u = fragCoord.x / iResolution.x * width;\n        current_v = fragCoord.y / iResolution.y * height;\n    }\n\n                animate_params();\n    \n    \n    float  var00016_u = current_u;\n    float  var00017_v = current_v;\n    animate_coord(var00016_u, var00017_v);\n    float var00015_rel_pos_9_x = ((var00016_u)-(float(ring_9_pos_0)));\n    float var00013 = pow(var00015_rel_pos_9_x, float(2));\n    float var00018_rel_pos_9_y = ((var00017_v)-(float(ring_9_pos_1)));\n    float var00014 = pow(var00018_rel_pos_9_y, float(2));\n    float var00012_dist2_ring_9 = ((var00013)+(var00014));\n    float var00011_dist_ring_9 = pow(var00012_dist2_ring_9, float(0.5));\n    float var00010 = ((var00011_dist_ring_9)-(float(ring_9_radius)));\n    float var00008_abs = abs(var00010);               \n    float var00019 = pow(float(p_0), float(2));       \n    float var00009 = ((var00019)*(float(0.5)));       \n    float var00007_cond0_diff_ring_9 = ((var00008_abs)-(var00009));\n    bool var00005_cond0_ring_9 = ((var00007_cond0_diff_ring_9)<(float(0)));\n    float var00021_phase_raw_ring_9 = ((var00015_rel_pos_9_x)*(float(ring_9_tilt)));\n    float var00036_rel_pos_8_x = ((var00016_u)-(float(ring_8_pos_0)));\n    float var00034 = pow(var00036_rel_pos_8_x, float(2));\n    float var00037_rel_pos_8_y = ((var00017_v)-(float(ring_8_pos_1)));\n    float var00035 = pow(var00037_rel_pos_8_y, float(2));\n    float var00033_dist2_ring_8 = ((var00034)+(var00035));\n    float var00032_dist_ring_8 = pow(var00033_dist2_ring_8, float(0.5));\n    float var00031 = ((var00032_dist_ring_8)-(float(ring_8_radius)));\n    float var00030_abs = abs(var00031);               \n    float var00029_cond0_diff_ring_8 = ((var00030_abs)-(var00009));\n    bool var00027_cond0_ring_8 = ((var00029_cond0_diff_ring_8)<(float(0)));\n    float var00025_phase_raw_ring_8 = ((var00036_rel_pos_8_x)*(float(ring_8_tilt)));\n    float var00052_rel_pos_7_x = ((var00016_u)-(float(ring_7_pos_0)));\n    float var00050 = pow(var00052_rel_pos_7_x, float(2));\n    float var00053_rel_pos_7_y = ((var00017_v)-(float(ring_7_pos_1)));\n    float var00051 = pow(var00053_rel_pos_7_y, float(2));\n    float var00049_dist2_ring_7 = ((var00050)+(var00051));\n    float var00048_dist_ring_7 = pow(var00049_dist2_ring_7, float(0.5));\n    float var00047 = ((var00048_dist_ring_7)-(float(ring_7_radius)));\n    float var00046_abs = abs(var00047);               \n    float var00045_cond0_diff_ring_7 = ((var00046_abs)-(var00009));\n    bool var00043_cond0_ring_7 = ((var00045_cond0_diff_ring_7)<(float(0)));\n    float var00041_phase_raw_ring_7 = ((var00052_rel_pos_7_x)*(float(ring_7_tilt)));\n    float var00069_rel_pos_5_x = ((var00016_u)-(float(ring_5_pos_0)));\n    float var00067 = pow(var00069_rel_pos_5_x, float(2));\n    float var00070_rel_pos_5_y = ((var00017_v)-(float(ring_5_pos_1)));\n    float var00068 = pow(var00070_rel_pos_5_y, float(2));\n    float var00066_dist2_ring_5 = ((var00067)+(var00068));\n    float var00065_dist_ring_5 = pow(var00066_dist2_ring_5, float(0.5));\n    float var00064 = ((var00065_dist_ring_5)-(float(ring_5_radius)));\n    float var00063_abs = abs(var00064);               \n    float var00062_cond0_diff_ring_5 = ((var00063_abs)-(var00009));\n    bool var00060_cond0_ring_5 = ((var00062_cond0_diff_ring_5)<(float(0)));\n    float var00058_phase_raw_ring_5 = ((var00069_rel_pos_5_x)*(float(ring_5_tilt)));\n    float var00086_rel_pos_3_x = ((var00016_u)-(float(ring_3_pos_0)));\n    float var00084 = pow(var00086_rel_pos_3_x, float(2));\n    float var00087_rel_pos_3_y = ((var00017_v)-(float(ring_3_pos_1)));\n    float var00085 = pow(var00087_rel_pos_3_y, float(2));\n    float var00083_dist2_ring_3 = ((var00084)+(var00085));\n    float var00082_dist_ring_3 = pow(var00083_dist2_ring_3, float(0.5));\n    float var00081 = ((var00082_dist_ring_3)-(float(ring_3_radius)));\n    float var00080_abs = abs(var00081);               \n    float var00079_cond0_diff_ring_3 = ((var00080_abs)-(var00009));\n    bool var00077_cond0_ring_3 = ((var00079_cond0_diff_ring_3)<(float(0)));\n    float var00075_phase_raw_ring_3 = ((var00086_rel_pos_3_x)*(float(ring_3_tilt)));\n    float var00103_rel_pos_1_x = ((var00016_u)-(float(ring_1_pos_0)));\n    float var00101 = pow(var00103_rel_pos_1_x, float(2));\n    float var00104_rel_pos_1_y = ((var00017_v)-(float(ring_1_pos_1)));\n    float var00102 = pow(var00104_rel_pos_1_y, float(2));\n    float var00100_dist2_ring_1 = ((var00101)+(var00102));\n    float var00099_dist_ring_1 = pow(var00100_dist2_ring_1, float(0.5));\n    float var00098 = ((var00099_dist_ring_1)-(float(ring_1_radius)));\n    float var00097_abs = abs(var00098);               \n    float var00096_cond0_diff_ring_1 = ((var00097_abs)-(var00009));\n    bool var00094_cond0_ring_1 = ((var00096_cond0_diff_ring_1)<(float(0)));\n    float var00092_phase_raw_ring_1 = ((var00103_rel_pos_1_x)*(float(ring_1_tilt)));\n    float var00093 = float(-10000.0);\n    float var00105_phase_diff_ring_1 = ((var00092_phase_raw_ring_1)-(var00093));\n    bool var00095_cond2_ring_1 = ((var00105_phase_diff_ring_1)>(float(0)));\n    bool var00091_cond_valid_ring_1 = ((var00094_cond0_ring_1)&&(var00095_cond2_ring_1));\n    float var00090_phase_ring_1 = bool(var00091_cond_valid_ring_1) ? var00092_phase_raw_ring_1 : var00093;\n    float var00089 = var00090_phase_ring_1;\n    float var00076 = var00089;\n    float var00088_phase_diff_ring_3 = ((var00075_phase_raw_ring_3)-(var00076));\n    bool var00078_cond2_ring_3 = ((var00088_phase_diff_ring_3)>(float(0)));\n    bool var00074_cond_valid_ring_3 = ((var00077_cond0_ring_3)&&(var00078_cond2_ring_3));\n    float var00073_phase_ring_3 = bool(var00074_cond_valid_ring_3) ? var00075_phase_raw_ring_3 : var00076;\n    float var00072 = var00073_phase_ring_3;\n    float var00059 = var00072;\n    float var00071_phase_diff_ring_5 = ((var00058_phase_raw_ring_5)-(var00059));\n    bool var00061_cond2_ring_5 = ((var00071_phase_diff_ring_5)>(float(0)));\n    bool var00057_cond_valid_ring_5 = ((var00060_cond0_ring_5)&&(var00061_cond2_ring_5));\n    float var00056_phase_ring_5 = bool(var00057_cond_valid_ring_5) ? var00058_phase_raw_ring_5 : var00059;\n    float var00055 = var00056_phase_ring_5;\n    float var00042 = var00055;\n    float var00054_phase_diff_ring_7 = ((var00041_phase_raw_ring_7)-(var00042));\n    bool var00044_cond2_ring_7 = ((var00054_phase_diff_ring_7)>(float(0)));\n    bool var00040_cond_valid_ring_7 = ((var00043_cond0_ring_7)&&(var00044_cond2_ring_7));\n    float var00039_phase_ring_7 = bool(var00040_cond_valid_ring_7) ? var00041_phase_raw_ring_7 : var00042;\n    float var00026 = var00039_phase_ring_7;\n    float var00038_phase_diff_ring_8 = ((var00025_phase_raw_ring_8)-(var00026));\n    bool var00028_cond2_ring_8 = ((var00038_phase_diff_ring_8)>(float(0)));\n    bool var00024_cond_valid_ring_8 = ((var00027_cond0_ring_8)&&(var00028_cond2_ring_8));\n    float var00023_phase_ring_8 = bool(var00024_cond_valid_ring_8) ? var00025_phase_raw_ring_8 : var00026;\n    float var00022 = var00023_phase_ring_8;\n    float var00020_phase_diff_ring_9 = ((var00021_phase_raw_ring_9)-(var00022));\n    bool var00006_cond2_ring_9 = ((var00020_phase_diff_ring_9)>(float(0)));\n    bool var00002_cond_valid_ring_9 = ((var00005_cond0_ring_9)&&(var00006_cond2_ring_9));\n    float var00110 = pow(float(p_1), float(2));       \n    float var00109_cond1_diff_ring_9 = ((var00007_cond0_diff_ring_9)+(var00110));\n    bool var00106_cond1_ring_9 = ((var00109_cond1_diff_ring_9)>(float(0)));\n    vec3 var00107 = vec3(float(float(0.0)), float(float(0.0)), float(float(0.0)));\n    vec3 var00111_fill_col = vec3(float(float(1.0)), float(float(1.0)), float(float(1.0)));\n    vec3  var00108_fill_col = var00111_fill_col;\n    animate_ring_col_9(var00108_fill_col, var00015_rel_pos_9_x, var00018_rel_pos_9_y);\n    vec3 var00003_col_current_ring_9 = bool(var00106_cond1_ring_9) ? var00107 : var00108_fill_col;\n    float var00117_cond1_diff_ring_8 = ((var00029_cond0_diff_ring_8)+(var00110));\n    bool var00115_cond1_ring_8 = ((var00117_cond1_diff_ring_8)>(float(0)));\n    vec3  var00116_fill_col = var00111_fill_col;\n    animate_ring_col_8(var00116_fill_col, var00036_rel_pos_8_x, var00037_rel_pos_8_y);\n    vec3 var00113_col_current_ring_8 = bool(var00115_cond1_ring_8) ? var00107 : var00116_fill_col;\n    float var00123_cond1_diff_ring_7 = ((var00045_cond0_diff_ring_7)+(var00110));\n    bool var00121_cond1_ring_7 = ((var00123_cond1_diff_ring_7)>(float(0)));\n    vec3  var00122_fill_col = var00111_fill_col;\n    animate_ring_col_7(var00122_fill_col, var00052_rel_pos_7_x, var00053_rel_pos_7_y);\n    vec3 var00119_col_current_ring_7 = bool(var00121_cond1_ring_7) ? var00107 : var00122_fill_col;\n    float var00130_cond1_diff_ring_5 = ((var00062_cond0_diff_ring_5)+(var00110));\n    bool var00128_cond1_ring_5 = ((var00130_cond1_diff_ring_5)>(float(0)));\n    vec3  var00129_fill_col = var00111_fill_col;\n    animate_ring_col_5(var00129_fill_col, var00069_rel_pos_5_x, var00070_rel_pos_5_y);\n    vec3 var00126_col_current_ring_5 = bool(var00128_cond1_ring_5) ? var00107 : var00129_fill_col;\n    float var00137_cond1_diff_ring_3 = ((var00079_cond0_diff_ring_3)+(var00110));\n    bool var00135_cond1_ring_3 = ((var00137_cond1_diff_ring_3)>(float(0)));\n    vec3  var00136_fill_col = var00111_fill_col;\n    animate_ring_col_3(var00136_fill_col, var00086_rel_pos_3_x, var00087_rel_pos_3_y);\n    vec3 var00133_col_current_ring_3 = bool(var00135_cond1_ring_3) ? var00107 : var00136_fill_col;\n    float var00144_cond1_diff_ring_1 = ((var00096_cond0_diff_ring_1)+(var00110));\n    bool var00142_cond1_ring_1 = ((var00144_cond1_diff_ring_1)>(float(0)));\n    vec3  var00143_fill_col = var00111_fill_col;\n    animate_ring_col_1(var00143_fill_col, var00103_rel_pos_1_x, var00104_rel_pos_1_y);\n    vec3 var00140_col_current_ring_1 = bool(var00142_cond1_ring_1) ? var00107 : var00143_fill_col;\n    vec3 var00145 = vec3(float(float(1)), float(float(1)), float(float(1)));\n    vec3 var00141 = var00145;\n    vec3 var00139_col_ring_1 = bool(var00091_cond_valid_ring_1) ? var00140_col_current_ring_1 : var00141;\n    vec3 var00138 = var00139_col_ring_1;\n    vec3 var00134 = var00138;\n    vec3 var00132_col_ring_3 = bool(var00074_cond_valid_ring_3) ? var00133_col_current_ring_3 : var00134;\n    vec3 var00131 = var00132_col_ring_3;\n    vec3 var00127 = var00131;\n    vec3 var00125_col_ring_5 = bool(var00057_cond_valid_ring_5) ? var00126_col_current_ring_5 : var00127;\n    vec3 var00124 = var00125_col_ring_5;\n    vec3 var00120 = var00124;\n    vec3 var00118_col_ring_7 = bool(var00040_cond_valid_ring_7) ? var00119_col_current_ring_7 : var00120;\n    vec3 var00114 = var00118_col_ring_7;\n    vec3 var00112_col_ring_8 = bool(var00024_cond_valid_ring_8) ? var00113_col_current_ring_8 : var00114;\n    vec3 var00004 = var00112_col_ring_8;\n    vec3 var00001_col_ring_9 = bool(var00002_cond_valid_ring_9) ? var00003_col_current_ring_9 : var00004;\n    vec3 var00000 = var00001_col_ring_9;\n    \n        fragColor = vec4(var00000, 1.0);\n        return;\n    }","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nPallette function modified from Palettes shader by iq\nhttps://www.shadertoy.com/view/ll2GD3\n*/\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos((c*t+d) );\n}","name":"Common","description":"","type":"common"}]}