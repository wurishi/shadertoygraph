{"ver":"0.1","info":{"id":"ftjXzw","date":"1627335008","viewed":195,"name":"basic audio/webcam visualiser","username":"Chriscamplin","description":"audio visualisation with webcam overlay","likes":4,"published":1,"flags":66,"usePreview":0,"tags":["soundcloud"],"hasliked":0,"parentid":"stSSzm","parentname":" audio visualisation"},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dtGRB","filepath":"https://soundcloud.com/chris-camplin/in-my-mind","previewfilepath":"https://soundcloud.com/chris-camplin/in-my-mind","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265358979323846\n#define PI2 6.28318530718\n\n// random function from Art of Code's tutorial YouTube\nfloat hash21(vec2 p){\n    p=fract(p*vec2(234.34,435.345));\n    p+=dot(p,p+34.23);\n    return fract(p.x*p.y);\n}\n\nvec2 rotate2D(vec2 uv, float _angle) {\n    uv=mat2(cos(_angle),-sin(_angle),\n    sin(_angle),cos(_angle))*uv;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord.xy-0.5*iResolution.xy)/iResolution.y;\n    vec2 UV = fragCoord.xy/iResolution.xy;\n    float animationSeconds = 10.;\n    float s = abs(sin(PI2*(iTime-.75)/animationSeconds)/2.+0.5);\n    vec3 col = vec3(0.);\n    vec3 sound = vec3(texture(iChannel0, UV).rgb);\n    vec3 video = vec3(texture(iChannel1, UV).rgb);\n    vec2 id=floor(uv);\n    vec2 gv = fract(uv);\n\n    float n=hash21(id);// random val between 0 & 1;\n    float width=.1*(s+1.);\n    float a2=atan(gv.x,gv.y);\n    float line=abs(abs(gv.x+gv.y)-.5);\n    float mask=smoothstep(.01,-.01,line-width);\n    float d = length(uv);\n    float star = sound.x/d;\n    float a = atan(uv.x, uv.y)+PI;\n     uv *= rotate2D(uv, iTime*PI2*0.125);\n\n    for(int i = 0; i< 2; i++) {\n      uv = abs(uv)/abs(dot(uv+sound.x*0.1, uv-sound.x*0.1))-vec2(video.x+s, video.x+s);\n    }\n    //if(sound.x < 1.5) uv = fract(uv);\n    float r = dot(uv, uv)*2.5;\n    float r2 = dot(uv, uv)*3.5;\n    if(r<.5*(s+.25)) {\n        col += video*sound;\n\n        col+=sound*pow(sound.x+r2, 50.);\n        col+=video*pow(video.x+r2, 50.);\n        col=mix(sound, video*sound.x, sound.x);\n        col+=video.x*sound;\n        col+=vec3(mask*sound.x)+video*sound;//,.01,mask);\n        col+=star;\n\n    } else {\n        col=mix(sound, video*sound.x, sound.x);\n    }\n    col.b*=s;\n// Output to screen\n    //col*= vec3(col.x+sound.x, col.x-sound.x, col.x*sound.x);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}