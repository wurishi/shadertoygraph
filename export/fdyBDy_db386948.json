{"ver":"0.1","info":{"id":"fdyBDy","date":"1658765607","viewed":94,"name":"Simple value noise","username":"maze_maze","description":"A simple value noise shader made by hand\nI've created a better version of it here https://www.shadertoy.com/view/fdKBDV","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","perlin","random","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nI created these functions really easily just by picking\nrandom prime numbers on the website https://bigprimes.org/\n\nAnd you can use them in your shaders freely\n\n\n!!! All functions return value in range [0; 1]\n\n\nTo get a 1D noise value\nnoise1D(uint(int(floor( *some_float* ))))\n\nTo get a 2D noise value\nnoise2D(uvec2(ivec2(floor( *some_2d_vector* ))))\n\nTo get a 3D noise value\nnoise3D(uvec3(ivec3(floor( *some_3d_vector* ))))\n\n\nTo get a 1D smooth noise value\nsmoothNoise1D( *some_float* )\n\nTo get a 2D noise value\nsmoothNoise2D( *some_2d_vector* )\n\nTo get a 3D noise value\nsmoothNoise3D( *some_3d_vector* )\n\n*/\n\nfloat noise1D(uint x) {\n    return float((x * 68657387u ^ x * 361524851u + 392383u) % 890129u) * (1.0 / 890128.0);\n}\nfloat smoothNoise1D(float x) {\n    float xo = fract(x);\n    uint xf = uint(int(x - xo));\n    uint xc = xf + 1u;\n    return mix(noise1D(xf), noise1D(xc), xo);\n}\n\nfloat noise2D(uvec2 pos) {\n    return float((pos.x * 68657387u ^ pos.y * 361524851u + pos.x) % 890129u) * (1.0 / 890128.0);\n}\nfloat smoothNoise2D(vec2 pos) {\n    float xo = fract(pos.x);\n    float yo = fract(pos.y);\n    uint xf = uint(int(pos.x - xo));\n    uint yf = uint(int(pos.y - yo));\n    uint xc = xf + 1u;\n    uint yc = yf + 1u;\n    return mix(\n        mix(noise2D(uvec2(xf, yf)), noise2D(uvec2(xc, yf)), xo),\n        mix(noise2D(uvec2(xf, yc)), noise2D(uvec2(xc, yc)), xo),\n        yo\n    );\n}\n\nfloat noise3D(uvec3 pos) {\n    return float((pos.x * 68657387u ^ pos.y * 361524851u ^ pos.z * 543143u + pos.x + pos.y) % 890129u) * (1.0 / 890128.0);\n}\nfloat smoothNoise3D(vec3 pos) {\n    float xo = fract(pos.x);\n    float yo = fract(pos.y);\n    float zo = fract(pos.z);\n    \n    uint xf = uint(int(pos.x - xo));\n    uint yf = uint(int(pos.y - yo));\n    uint zf = uint(int(pos.z - zo));\n    \n    uint xc = xf + 1u;\n    uint yc = yf + 1u;\n    uint zc = zf + 1u;\n    \n    return mix(\n        mix(\n            mix(noise3D(uvec3(xf, yf, zf)), noise3D(uvec3(xc, yf, zf)), xo),\n            mix(noise3D(uvec3(xf, yc, zf)), noise3D(uvec3(xc, yc, zf)), xo),\n            yo\n        ),\n        mix(\n            mix(noise3D(uvec3(xf, yf, zc)), noise3D(uvec3(xc, yf, zc)), xo),\n            mix(noise3D(uvec3(xf, yc, zc)), noise3D(uvec3(xc, yc, zc)), xo),\n            yo\n        ),\n        zo\n    );\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 pos = vec3(fragCoord * 0.125 + vec2(iTime, iTime) * 4.0, iTime);\n    \n    vec2 p = fragCoord / vec2(iResolution);\n    switch (uint(p.y * 2.0) * 3u + uint(p.x * 3.0)) {\n    case 0u:\n        // noise1D\n        fragColor = vec4(vec3(\n            noise1D(uint(int(floor(pos.x))))\n        ), 1.0);\n        break;\n    case 1u:\n        // noise2D\n        fragColor = vec4(vec3(\n            noise2D(uvec2(ivec2(floor(pos))))\n        ), 1.0);\n        break;\n    case 2u:\n        // noise3D\n        fragColor = vec4(vec3(\n            noise3D(uvec3(ivec3(floor(pos))))\n        ), 1.0);\n        break;\n    case 3u:\n        // smoothNoise1D\n        fragColor = vec4(vec3(\n            smoothNoise1D(pos.x)\n        ), 1.0);\n        break;\n    case 4u:\n        // smoothNoise2D\n        fragColor = vec4(vec3(\n            smoothNoise2D(pos.xy)\n        ), 1.0);\n        break;\n    case 5u:\n        // smoothNoise3D\n        fragColor = vec4(vec3(\n            smoothNoise3D(pos)\n        ), 1.0);\n        break;\n    }\n}","name":"Image","description":"","type":"image"}]}