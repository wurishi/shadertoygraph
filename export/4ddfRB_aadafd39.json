{"ver":"0.1","info":{"id":"4ddfRB","date":"1525760633","viewed":120,"name":"MandelBrot_Set","username":"p7k","description":"This is an implementation of Mandelbrot set function\nImplementation based on the explanation of : https://www.youtube.com/watch?v=6IWXkV82oyY","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//USE MOUSE TO MOVE AROUND\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n   vec2 m = iMouse.xy/iResolution.xy;\n   vec2 uv = (fragCoord - 0.5*iResolution.xy) / iResolution.y;\n  \n    \n    //================================================================\n    //Implementation of Mandelbrot set.\n    //\tEquation : f(z) = z*z + c\n    //\twhere:\n    //\tf(z)->new value\n    //  z -> old complex number i.e x+iy\n    //\tc -> constant\n    //================================================================\n    \n    \n   \tfloat zoom = pow(10.,-m.x*3.);\n    \n    vec2 z = vec2(0.);\n    vec2 c = uv*zoom*3.;\n    c += vec2(-0.69955,0.3326);\n    \n    float max_iterations = 100.;\n    float iterations = 0.;\n    \n    for(float i = 0. ; i < max_iterations ; ++i )\n    {\n        float real_component = z.x*z.x - z.y*z.y;\n        float imaginary_component = 2.*z.x*z.y;\n     \tz = vec2(real_component, imaginary_component) + c;   \n       \n        if(length(z) > 3.)\n            break;\n       \n        ++iterations;\n    }\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\t\n    float res = (iterations/max_iterations);\n    vec3 col = texture(iChannel0, vec2(res,0.5)).rgb;\t//vec3(res);\n   \tvec3 col2 = texture(iChannel0, vec2(res,0.5)).rgb;\n    vec3 col_res = col + col2;\n    //vec3 col_res = col * col2;\n    \n    \n    // Output to screen\n    fragColor = vec4(col_res,1.0);//vec3(res)\n}","name":"Image","description":"","type":"image"}]}