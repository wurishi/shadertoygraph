{"ver":"0.1","info":{"id":"DsVBR3","date":"1699655169","viewed":87,"name":"smooth_min_sillyness","username":"numpyhard","description":"sadsadas","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdf","smoothmin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.14159265;\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nvec3 palette( in float t)\n{\n    vec3 a=vec3(0.5, 0.5, 0.5);\n    vec3 b=vec3(0.5, 0.5, 0.5);\n    vec3 c=vec3(1.);\n    vec3 d=vec3(0., 0.33, .66);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\nfloat totalSDF(vec2 x, vec2 y){\n    float d1 = 4.*length(x)-0.4;\n    //vec2 p = abs(x-vec2(0.2));\n    //float d1 = length(max(p, 0.0)) +min(max(p.x,p.y),0.0);\n    float d2 = 4.2*length(x-y)-0.1;\n    \n    return smin(d1,d2,6.);\n}\n\nvec2 grad(vec2 x, vec2 y){\n    vec2 eps = vec2(0.,0.001);\n    return vec2(totalSDF(x+eps.yx, y)-totalSDF(x, y), totalSDF(x+eps.xy, y)-totalSDF(x, y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mv = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    uv*=.5;\n    mv*=.5;\n    \n    float d1 = 4.*length(uv)-0.3;\n    float d2 = 4.2*length(uv-mv)-0.1;\n\n    float d = totalSDF(uv, mv);\n    vec2 g = normalize(grad(uv, mv));\n    float ang = atan(g.y,g.x);\n    \n    vec3 col = palette(ang / (2.*pi) + .1*iTime + d*0.2);\n    float lineStrength = .5+.5*sin(7.0*(d+ .8*perlin_noise(vec3(5.*uv.x,5.*uv.y,.5*iTime))) - 8.0*iTime);\n    //float lineStrength = .5+.5*sin(7.0*(d+ .5*perlin_noise(vec3(5.*uv.x,5.*uv.y,.5*iTime)))- 3.0*iTime)-.9*min(0.,perlin_noise(vec3(1234.3+5.*uv.x,5435.2+5.*uv.y,.5*iTime)));\n\n    float term  = 0.1/lineStrength;\n    term = pow(term,.5);\n    col = col * term;\n    \n    // Experiment with power term, addition term and shapes\n    // Output to screen\n    fragColor = vec4(col,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}