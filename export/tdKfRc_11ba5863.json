{"ver":"0.1","info":{"id":"tdKfRc","date":"1607657197","viewed":54,"name":"auxilio-mar salvaje-2d","username":"jorge2017a1","description":"auxilio-mar salvaje-2d","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["auxiliomarsalvaje2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge flores ---jorge2017a1\n#define saturate(x) clamp(x, 0.0, 1.0)\n#define R iResolution.xy\n#define ss(a, b, t) smoothstep(a, b, t)\n#define SS(U) smoothstep(3./R.y,0.,U)\n\n\nfloat opU( float d1, float d2 ) { return  min(d1,d2); }\nfloat opS( float d1, float d2 ) { return max(-d1,d2); }\nfloat opI( float d1, float d2 ) { return max(d1,d2); }\n\n\nvec2 opU2( vec2 d1, vec2 d2 ) \n{\n    //return  min(d1.x,d2.x); \n    if (d1.x<d2.x)\n       return d1; \t\n    else\n       return d2;\n}\n\nvec2 opS2( vec2 d1, vec2 d2 )\n{\n    //return max(-d1.x,d2.x); \n    if  (-d1.x<d2.x)\n        return d1;\n    else\n        return d2;\n}\n\nvec2 opI2( vec2 d1, vec2 d2 ) \n{\n    //return max(d1,d2);\n    if (d1.x>d2.x)\n       \treturn d1;\n    else\n        return d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2) {\n\treturn vec2(max(-d2.x, d1.x), 2.0);\n}\n\n\nvec2 opRep2D( in vec2 p, in vec2 c )\n{\n    vec2 q = mod(p+0.5*c,c)-0.5*c;\n    return  q;\n}\n\n\n\nfloat sdCirc(vec2 p, float r)\n{\n    return length(p)-r;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nvec3 ColVariable(float dis)\n{\n    vec3 col=vec3(0.0);\n    //float tt=iTime;\n    float tt=7.0;\n    col.b+=abs(1.0-.10/dis*(0.2+abs(sin(tt/2.0))));\n\tcol.r+=abs(1.0-.10/dis*(0.2+abs(sin(tt/4.0))));\n\tcol.g+=abs(1.0-.10/dis*(0.2+abs(sin(tt/8.0))));\n    return col*0.88;\n}\t\n    \nfloat MarOnda(vec2 uv,float  t)\n{\n    uv.y += sin(uv.x*5.+t)*0.1;\n    return uv.y;\n}\n\n\n//https://www.shadertoy.com/view/wtj3zK\nfloat Nubes(vec2 uv)\n{\n vec2 c0 = uv*4.;\n  float clouds;\n  \n    c0.x += iTime;\n    c0 = mod(c0, vec2(8., 3.)) - vec2(1.8, 2.4);\n    float r = cos(atan(uv.y, uv.x) * 7.) * .6 + 0.1;\n    \n    if(uv.y > 0.05)\n    {\n    \tr = (sin(c0.x * 8.) * 0.8 + 9.);\n    \tc0 *= 5.;\n    \tclouds += 1.-smoothstep(r-0.1, r, length(vec2(c0.x, c0.y * 3.)));\n    }\n   \n   return clouds;\n}\n\n\nvec2 Hombre(vec2 uv)\n{\n    vec2 p=uv;\n    float scabeza=sdCirc(p, 0.10);\n    float yp=0.03*sin(iTime); //mover ojos\n    float sOjoIzq=sdCirc(p-vec2(-0.04,0.04+yp), 0.02);\n    float sOjoDer=sdCirc(p-vec2(0.04,0.04+yp), 0.02);\n    float sBoca=sdBox(p-vec2(0.0,-0.05+yp),vec2(0.02,0.01));\n    \n    \n    vec2 a=vec2(0.01,0.0);\n    vec2 b=vec2(0.01,-0.4);\n    float sCuerpo= sdSegment(p, a, b );\n    //float sCuerpo= sdBox(p-vec2(0.0,-0.3), vec2(0.045,0.2) );\n    \n    \n    float p1x=0.5*cos(iTime); //mover brazos\n    float p1y=0.2*sin(iTime); //mover brazos\n    \n    a=vec2(0.25,0.0+p1y);\n    b=vec2(0.0,-0.2);\n    float sManosIzq=sdSegment(p, a, b );\n    \n    a=vec2(-0.25,0.0+p1y);\n    b=vec2(0.0,-0.2);\n    float sManosDer=sdSegment(p, a, b );\n    \n    vec2 resp;\n    resp=vec2( 9999.9,-1.0);\n    \n    scabeza=opS(sOjoIzq,scabeza);\n    scabeza=opS(sOjoDer,scabeza);\n    scabeza=opS(sBoca,scabeza);\n    \n    resp=opU2(vec2(scabeza,2.0),resp);\n    resp=opU2(resp, vec2(sOjoIzq,0.0));\n    resp=opU2(resp, vec2( sOjoDer,0.0));\n    \n    \n    resp=opU2(vec2(sCuerpo,0.0),resp);\n    \n    resp=opU2(vec2( sManosIzq,3),resp);\n    resp=opU2( vec2( sManosDer,3.0),resp);\n    \n    return resp;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n     vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\t vec3 col = vec3(1.00);\n\n    float tt1=sin(iTime*3.0);\n    float tt2=sin(iTime*4.0);\n    float tt3=sin(1.0-iTime*6.0);\n    float tt4=sin(2.0-iTime*6.0);\n    \n    float sc1= sdCirc(p, 0.000012);\n    float sSol= sdCirc(p-vec2(0.0,0.2), 0.12);\n    float sSola= sdCirc(p-vec2(0.0,0.2), 0.13);\n    float dNubes=Nubes(p-vec2(0.0,0.25) );\n    \n    float sca=  MarOnda(p-vec2(0.0,0.0), tt1);\n    float sca2= MarOnda(p-vec2(1.5,-0.3),tt2);\n    float sca3= MarOnda(p-vec2(2.5,-0.4),tt3);\n    float sca4= MarOnda(p-vec2(3.5,-0.6),tt4);\n        \n    vec2 sMan=Hombre(p-vec2(0.5+sin(p.x-tt4)*0.1,-0.2));\n    \n    vec3 colb1=ColVariable(1.0/sc1);\n    vec3 colb2=getColor(int(5.0));\n    vec3 colSola=getColor(int(2));\n    vec3 colMan=getColor(int(sMan.y));\n    \n    \n     col = mix( vec3(0.0, 0.6, 1.0),colb1, sin(iTime*2.0));\n    col= DibujoSinBorde(p, sSola,colSola,  col);\n    col= DibujoSinBorde(p, sSol, colb2,  col);\n    col= DibujoConBorde(p, sca, vec3(0.0,0.0,1.0),  col);\n    col= DibujoConBorde(p, sca2, vec3(0.3,0.3,1.0),  col);\n    col= DibujoConBorde(p, sca3, vec3(0.4,0.4,1.0),  col);\n    col= DibujoConBorde(p, sca4, vec3(0.5,0.5,1.2),  col);\n    col = mix(col, vec3(1.0, 1.0, 1.0), dNubes);\n    col= DibujoConBorde(p, sMan.x, colMan,  col);\n    // Output to screen\n    //fragColor = vec4(col2,1.0);\n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    vec3 color;\n   \n};\n\n    \nTObj mObj;\n\nvec3  Arrcolores[] = vec3[] (\nvec3(0,0,0)/255.0,  //0\nvec3(255.,255.,255.)/255.0, //1\nvec3(255,0,0)/255.0,  //2\nvec3(0,255,0)/255.0,   //3\nvec3(0,0,255)/255.0,   //4\nvec3(255,255,0)/255.0,  //5\nvec3(0,255,255)/255.0,  //6 \nvec3(255,0,255)/255.0,   //7\nvec3(192,192,192)/255.0,  //8\nvec3(128,128,128)/255.0,  //9\nvec3(128,0,0)/255.0,   //10\nvec3(128,128,0)/255.0,  //11\nvec3(0,128,0)/255.0,   //12\nvec3(128,0,128)/255.0,  //13\nvec3(0,128,128)/255.0,  //14\nvec3(0,0,128)/255.0,    //15\nvec3(255, 204, 188)/255.0,  //16\nvec3(0.75),  //17\nvec3(0.5, 0.5, 0.8),  //18\nvec3(1, 0.5, 0),      //19\nvec3(1.0, 1.0, 1.0),  //20\nvec3(247./255., 168./255.,  184./255.),  //21\nvec3(0, 1, 1),                           //22 \nvec3(85./255., 205./255., 252./255.),    //23\nvec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 ),  //24 \nvec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ),       //25  \nvec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ),     //26\nvec3(0.1, 0.5, 1.0),                           //27   \nvec3(0.0, 0.6, 0.0),                       //28 \nvec3(0.1,0.1,0.7),                          //29\nvec3(0.99, 0.2, 0.1), //30\nvec3(0.6),  //31\nvec3(0.7),  //32\nvec3(0.8),  //33\nvec3(0.6,0.0,0.0)  //34\n    \n);\n\n//----------------------------------------------------\nvec3 getColor(int i)\n{    \n    if (i==-2 ) {return mObj.color; }       \n    if (i>-1 ) \n\t\treturn Arrcolores[i];\n}\n///--------------------------------------------\n\n\n\n// MASKS\nfloat fillMask(float distanceChange, float dist) \n{\n    return smoothstep(distanceChange, -distanceChange, dist);\n}\n\nfloat blurMask(float distanceChange, float dist, float blurAmount) {\n    float blurTotal = blurAmount*.01;\n    return smoothstep(blurTotal+distanceChange, -distanceChange, dist);\n}\n\nfloat innerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist+width);\n}\n\nfloat outerMask(float distanceChange, float dist, float width) {\n    return smoothstep(distanceChange,-distanceChange,dist-width);\n}\n\n\nvec3 DibujoConBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    \n    float uWotM8 = 0.009;\n    \n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    \n    return mix(colOut,colIn, flm );\n}\n\n\nvec3 DibujoSinBorde(vec2 uv, float dist, vec3 colIn,  vec3 colOut)\n{   \n    float distanceChange = fwidth(dist) * 0.5;\n    float flm=fillMask(distanceChange, dist);\n    \n    float uWotM8 = 0.009;\n    \n    uWotM8 = outerMask(distanceChange, dist, uWotM8);\n    //colOut = mix(colOut, vec3(0,0,0), uWotM8);\n    colOut = mix(colOut, colIn, uWotM8);\n    \n    return mix(colOut,colIn, flm );\n}\n\n\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n\n\n\n///-------------------------------\n","name":"Common","description":"","type":"common"}]}