{"ver":"0.1","info":{"id":"MXB3zW","date":"1708274057","viewed":99,"name":"Planet Orbit Simulation","username":"kastorp","description":"gray: theorical orbit, red=modified Euler, blue=Leapfrog, green=RK4\nmouse x: number of steps [50-150]\nmouse y: total time vs period\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["orbit","kepler","rk4","leapfrog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Planet Orbit Simulation by kastorp\n//--------------------------------------\n\n#define R iResolution.xy\n#define ss(x) smoothstep(.001,.0,x)\n\n\n#define gravity(mu,p) -normalize(p)*mu/(dot(p,p)+.000001);\n\nvoid RKstep(in float mu, in vec2 po, in vec2 vo, out vec2 dp, out vec2 dv)\n{\n   \n    dv = gravity(mu,po);\n    dp = vo;\n}\n\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 U = (I - R*.5)/R.y*6.;\n    vec2 MOUSE =iMouse.z<=0.? vec2(50.,1.): vec2(50,1. ) * (iMouse.xy/R)+vec2(25,.5);\n\n    vec2 vo1,po1,ao1,vn1,pn1,an1;\n    vec2 vo2,po2,ao2,vn2,pn2,an2;\n    vec2 vo3,po3,ao3,vn3,pn3,an3;\n    \n    vec3 col =ss(length(U)-.2)*vec3(0.933,0.847,0.427);\n\n    for(float r=.4; r<=1.;r+=.3){\n        float  m=.1,\n            mu = 1.,            // standard gravitational parameter\n            F  = mu*m/(r*r),     // initial gravitational force\n            rv = 1.21,             // relative velocity (1.=>circular orbit)\n            aa = sqrt(F/m/r)*rv, // initial angular velocity\n            l  = m*r*r*aa,       // initial angular momentum\n            ro = l*l/(m*m)/mu,   // semi-major axis\n            E  = .5*m*aa*aa*r*r -mu*m/r+1e-5 , //orbital energy\n            T=  6.2830*sqrt(r*r*r/mu), //period (need to adjust)\n            e  = sqrt(1. +  2.*E*l*l/(m*m*m)/(mu*mu) ), //eccentricity\n            dt= T/MOUSE.x*MOUSE.y*1.75;\n                  \n        ao1=F*vec2(0,-1);vo1=aa*vec2(r,0); po1=vec2(0,r);\n        ao2=ao1;vo2=vo1;po2=po1;\n        ao3=ao1;vo3=vo1;po3=po1;\n        \n        for(float i=0.; i<200.;i++){\n            //ANALYTICAL\n            //https://en.wikipedia.org/wiki/Orbit_equation\n            float at= 6.28/200.*i;\n            vec2 pt = vec2(sin(at),cos(at))*ro/(1.+sign(rv-1.)* e*cos(at));\n            col=max(col,ss(length(U-pt)-.01)*vec3(0.5));\n        }\n        \n        for(float i=0.; i<MOUSE.x;i++){\n          \n            //MODIFIED EULER\n            //https://en.wikipedia.org/wiki/N-body_simulation#Propagation\n            float dt4=dt/4.;\n            for(int j=1;j<=4;j++){\n                an1=gravity(mu,po1);\n                vn1=vo1+an1*dt4;\n                pn1=po1+vn1*dt4;\n\n                col=max(col,ss(length(U-pn1)-.03)*vec3(1,0,0));\n                po1=pn1;vo1=vn1;ao1=vec2(0);\n            }\n\n            //LEAPFROG\n            //https://en.wikipedia.org/wiki/Leapfrog_integration\n             \n            for(int j=1;j<=4;j++){\n                vn2=vo2+ ao2*dt4*.5;\n                pn2=po2+ vn2*dt4;\n                an2=gravity(mu,pn2);\n                vn2+= an2*dt4*.5;\n\n                col=max(col,ss(length(U-pn2)-.03)*vec3(0,0,1));\n                po2=pn2;vo2=vn2;ao2=an2;\n            }\n        \n            //RUNGE KUTTA 4-th order (3/8-rule)\n            //https://en.wikipedia.org/wiki/Runge%E2%80%93Kutta_methods\n            vec2 k1v,k1p;\n            RKstep(mu,po3,vo3,k1p,k1v);\n            vec2 k2v,k2p;\n            RKstep(mu,po3+k1p*dt*.5,vo3+k1v*dt*.5,k2p,k2v);\n            vec2 k3v,k3p;\n            RKstep(mu,po3+k2p*dt*.5,vo3+k2v*dt*.5,k3p,k3v);\n            vec2 k4v,k4p;\n            RKstep(mu,po3+k3p*dt,vo3+k3v*dt,k4p,k4v);\n            \n            pn3=po3+(k1p +3.*k2p+3.*k3p + k4p)/8.*dt;\n            vn3=vo3+(k1v +3.*k2v+3.*k3v + k4v)/8.*dt;         \n            col=max(col,ss(length(U-pn3)-.03)*vec3(0,1,0));\n            po3=pn3;vo3=vn3;ao3=vec2(0);\n        }\n    }\n \n    \n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}