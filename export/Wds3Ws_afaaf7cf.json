{"ver":"0.1","info":{"id":"Wds3Ws","date":"1547823617","viewed":320,"name":"IFS particles","username":"aadebdeb","description":"IFS particles","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(float x){\n    return fract(sin(x * 12.9898) * 43758.5453);\n}\n\nfloat valuenoise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n\n    float u = f * f * (3.0 - 2.0 * f);\n\n    return mix(random(i), random(i + 1.0), u);\n}\n\nfloat fbm(float x) {\n    float s = 0.0;\n    float a = 0.5;\n    for (int i = 0; i < 4;i++) {\n        s += a * valuenoise(x);\n        a *= 0.5;\n        x += 2.15;\n    }\n    return s;\n}\n\nfloat box(vec3 p, vec3 b) {\n    p = abs(p) - b;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, max(p.y, p.z)));\n}\n\nmat2 rotate(float r) {\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, s, -s, c);\n}\n\nfloat map(vec3 p) {\n    float d = 10000.0;\n    float s = 1.0;\n    p.xz *= rotate(iTime * 0.39);\n    for (int i = 0; i < 5; i++) {\n        p.yz *= rotate(iTime * 0.34);\n        p = abs(p);\n        p -= 15.0;\n        p.xz *= rotate(iTime * 1.94);\n        p.xy *= rotate(iTime * 1.32);\n        d = min(d, box(p, vec3(1.0)) / s);\n        p *= 2.0;\n        s *= 2.0;\n    }\n    return d;\n}\n\nvec3 calcNormal(vec3 p) {\n    float d = 0.01;\n    return normalize(vec3(\n        map(p + vec3(d, 0.0, 0.0)) - map(p - vec3(d, 0.0, 0.0)),\n        map(p + vec3(0.0, d, 0.0)) - map(p - vec3(0.0, d, 0.0)),\n        map(p + vec3(0.0, 0.0, d)) - map(p - vec3(0.0, 0.0, d))\n    ));\n}\n\nvec3 lightDir = normalize(vec3(0.5, 1.0, -0.8));\nvec3 lightColor = vec3(1.0) * 2.0;\nvec3 diffuseColor = vec3(0.4, 0.7, 0.9);\nvec3 growColor = vec3(1.0, 0.8, 0.2);\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n    vec3 p = ro;\n    float minD = 10000.0;\n    for (int i = 0; i < 64; i++) {\n        float d = map(p);\n        p += d * rd;\n        minD = min(minD, d);\n        if (d < 0.01) {\n            vec3 n = calcNormal(p);\n            vec3 diffuse = diffuseColor * max(0.0, dot(n, lightDir)) * lightColor; \n            vec3 grow = growColor * 0.3;\n            return  diffuse + grow;\n        }\n    }\n    return growColor * 0.08 / minD;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (2.0 * fragCoord - iResolution.xy) / min(iResolution.x, iResolution.y);\n\n\n    vec3 ro = vec3( 0.0, 0.0, -50.0 + (fbm(iTime * 0.3) * 2.0 - 1.0) * 25.0);\n    vec3 ta = vec3(0.0);\n    vec3 z = normalize(ta - ro);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 x = normalize(cross(z, up));\n    vec3 y = normalize(cross(x, z));\n    vec3 rd = normalize(x * st.x + y * st.y + z * 1.5);\n\n    vec3 c = raymarch(ro, rd);\n\n    fragColor = vec4(c, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}