{"ver":"0.1","info":{"id":"NltczX","date":"1660903929","viewed":126,"name":"Killer Instinct Title Screen","username":"flightcrank","description":"This is a shader that resembles the Killer Instinct title screen from the SNES. needs improvement","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat randf(vec2 st) {\n    \n    return fract(sin(dot(st.xy, vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvec3 valueNoise(vec2 pos, float gridSize) {\n  \n  vec2 gridPos = pos * gridSize;\n  vec2 i = floor(gridPos);\n  vec2 f = fract(gridPos);\n  \n  vec3 f11 = vec3(randf(vec2(i.x, i.y)));\n  vec3 f12 = vec3(randf(vec2(i.x + 1.0, i.y)));\n  vec3 f21 = vec3(randf(vec2(i.x , i.y + 1.0)));\n  vec3 f22 = vec3(randf(vec2(i.x + 1.0, i.y + 1.0)));\n  \n  f = smoothstep(0.0, 1.0, f);\n\n  vec3 q1 = mix(f11, f12, vec3(f.x));\n  vec3 q2 = mix(f21, f22, vec3(f.x));\n  vec3 p  = mix(q1, q2, vec3(f.y));\n  \n  return vec3(p);\n}\n  \nvec3 fractalValueNoise(vec2 pos) {\n  vec3 n = vec3(0.0);\n  //n += 0.010 * valueNoise(pos, 2.0);\n  n += 0.500 * valueNoise(pos, 4.0);\n  n += 0.250 * valueNoise(pos, 8.0);\n  n += 0.125 * valueNoise(pos, 16.0);\n  n += 0.0652 * valueNoise(pos, 32.0);\n  return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    //render some value noise fractal and animate it\n    vec3 clouds = fractalValueNoise(uv + vec2(0.0, iTime / -66.));\n    \n    //create a purple to black gradient\n    vec3 purple = vec3(0.3, 0.0, 0.4) * smoothstep(1.3, 0.0, uv.y);\n    \n    //render the ligntning texture using a marble fractal effect\n    float freq = 18.0;   \n    float xyv = uv.x * freq + uv.y * freq + 11.0 * clouds.x;\n    vec3 lightning = vec3((sin(xyv) + 1.0) * .5);\n    \n    //combine the purple gradient with the value noise texture\n    vec3 res = clouds * purple;\n    res += res * 1.2;//brighten pixels\n    \n    //calculate a texture consisting of diagonal lines\n    vec2 c = uv * 4.0 + 1.2;\n    vec3 lines = vec3((sin(c.x + c.y) + 1.0) / 2.);\n  \n    //use the lines texture to mask the lightning texture\n    lightning = lightning - vec3(smoothstep(0.0, 0.3, lines));\n    lightning = clamp(lightning, 0.0, 1.0);\n    lightning *= vec3(0.6, 0.88,1.0); // add colour\n    //lightning *= 0.2; //brighten\n    // Output to screen\n    \n    //adjust the brightness of the lightning based on the mod function\n    float interval = 15.0;\n    lightning *= mod(iTime + 1., interval) > .3 ?  0.1: 1.2;\n     \n    fragColor = vec4(lightning + res, 1.0);\n}","name":"Image","description":"","type":"image"}]}