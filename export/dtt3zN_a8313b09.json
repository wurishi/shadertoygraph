{"ver":"0.1","info":{"id":"dtt3zN","date":"1690172098","viewed":40,"name":"Water shader jellyfish","username":"SkyanSam","description":"sdfs","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["water","jellyfish"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 unity_voronoi_noise_randomVector (vec2 UV, float offset)\n{\n    mat2x2 m = mat2x2(15.27, 47.63, 99.41, 89.98);\n    UV = fract(sin(UV * m) * 46839.32);\n    return vec2(sin(UV.y*+offset)*0.5+0.5, cos(UV.x*offset)*0.5+0.5);\n}\n\nvoid Unity_Voronoi_float(vec2 UV, float AngleOffset, float CellDensity, out float Out, out float Cells)\n{\n    vec2 g = floor(UV * CellDensity);\n    vec2 f = fract(UV * CellDensity);\n    float t = 8.0;\n    vec3 res = vec3(8.0, 0.0, 0.0);\n\n    for(int y=-1; y<=1; y++)\n    {\n        for(int x=-1; x<=1; x++)\n        {\n            vec2 lattice = vec2(x,y);\n            vec2 offset = unity_voronoi_noise_randomVector(lattice + g, AngleOffset);\n            float d = distance(lattice + offset, f);\n            if(d < res.x)\n            {\n                res = vec3(d, offset.x, offset.y);\n                Out = res.x;\n                Cells = res.y;\n            }\n        }\n    }\n}\n\nvoid Unity_RadialShear_float(vec2 UV, vec2 Center, float Strength, vec2 Offset, out vec2 Out)\n{\n    vec2 delta = UV - Center;\n    float delta2 = dot(delta.xy, delta.xy);\n    float delta_offset = delta2 * Strength; // should be vec2/float 2 check\n    Out = UV + vec2(delta.y, -delta.x) * delta_offset + Offset;\n}\n\nvec2 pixelUV(vec2 uv, float PixelateAmount) {\n    return floor(uv * PixelateAmount) / PixelateAmount;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = pixelUV(uv, 64.0);\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    float v_color;\n    float cells;\n    Unity_Voronoi_float(uv, iTime, 3.0, v_color, cells);\n    fragColor = vec4(0.0,0.0,1.0,1.0) + (vec4(0,0.9,1.0,1)*v_color);\n}\n","name":"Image","description":"","type":"image"}]}