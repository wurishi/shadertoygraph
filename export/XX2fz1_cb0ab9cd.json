{"ver":"0.1","info":{"id":"XX2fz1","date":"1729884851","viewed":161,"name":"Simple Rolling Hills","username":"incre_ment","description":"Just a quick little shader with some rolling hills and a parallax effect.  Started from experimenting/learning to use the fwidth function (for AA).","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["parallax","hills"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float TAU = 2.*3.14159;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = ( fragCoord - .5* iResolution.xy ) / iResolution.y;\n  vec3 col = vec3(0.);\n  float t = .1*iTime;\n  \n  float m = length(uv-vec2(-.37,.25)) - .2;\n  col += smoothstep(fwidth(m),0.,m);\n  \n  for(float i = 1.; i < 6.; i++){ \n    float off = fract(232.8 * sin(32.8 + i));    \n    float f = uv.y + .1 * sin(TAU*(-t * i + off) + (8. - i) * uv.x) + i / 12. - .2;\n    col *= step(0.,f);\n    f = abs(f) - ((1. + i)/1000.);\n    col += smoothstep(fwidth(f),0.,f);\n  }\n  \n  fragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}