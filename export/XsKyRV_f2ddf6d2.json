{"ver":"0.1","info":{"id":"XsKyRV","date":"1541974933","viewed":380,"name":"pointilism","username":"LegoCylon","description":"Inspired by the style of A Sunday Afternoon on the Island of La Grande Jatte.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["effect","artistic","impressionism"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n\n//  Distance Squared\nfloat DSq (vec2 a, vec2 b) {\n    vec2 d = a - b;\n    return dot(d, d);\n}\n\nvoid mainImage (out vec4 o, in vec2 i) {\n    //  Find the largest dimension so that the points can be placed in a regular lattice.\n    //\n    float d = max(iResolution.x, iResolution.y);\n    \n    //  Pick the number of points to display in the largest dimension.\n    //\n    float n = .2 * d;\n    \n    //  Calculate the normalized size of the point.\n    //\n    float r = .6 / n;\n    \n    //  Calculate the normalized coordinate of the point.\n    //\n    vec2 st = i / d;\n    \n    //  Quantize the coordinate based on the number of points being displayed.\n    //\n    vec2 pq = round(st * n) / n;\n    \n    //  Convert the quantized coordinate back into a resolution-dependent coordinate to get the texture color.\n    //\n    vec2 uv = pq * d / iResolution.xy;\n\n    //  Access the display texture.\n    //\n    vec4 a = texture(iChannel0, uv);\n    \n    //  Access the noise texture.\n    //\n    vec4 b = texture(iChannel1, pq);\n    \n    //  Jitter the quantized coordinate of the center of the point.\n    //\n    pq += (b.b - .5) * r;\n    \n    //  Visualize this point based on a random offset and its x & y coordinate.\n    //\n    float s = step(b.a * .5 + pq.x * pq.y * 15., mod(iTime, 10.));\n\n    //  Clear pixels beyond the point circle.\n    //\n    o = s * smoothstep(r * r, 0., DSq(st, pq)) * a;\n}","name":"Image","description":"","type":"image"}]}