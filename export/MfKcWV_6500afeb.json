{"ver":"0.1","info":{"id":"MfKcWV","date":"1732437135","viewed":22,"name":"Ice & Fire","username":"whoami","description":"-","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\n// Simplex Noise by Ian McEwan, Stefan Gustavson\nvec4 permute(vec4 x) {\n    return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v) {\n    const vec2 C = vec2(1.0 / 6.0, 1.0 / 3.0);\n    const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    vec3 i = floor(v + dot(v, C.yyy));\n    vec3 x0 = v - i + dot(i, C.xxx);\n\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min(g.xyz, l.zxy);\n    vec3 i2 = max(g.xyz, l.zxy);\n\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy;\n    vec3 x3 = x0 - D.yyy;\n\n    i = mod(i, 289.0);\n    vec4 p = permute(permute(permute(\n                    i.z + vec4(0.0, i1.z, i2.z, 1.0))\n                    + i.y + vec4(0.0, i1.y, i2.y, 1.0))\n                + i.x + vec4(0.0, i1.x, i2.x, 1.0));\n\n    float n_ = 1.0 / 7.0;\n    vec3 ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_);\n\n    vec4 x = x_ * ns.x + ns.yyyy;\n    vec4 y = y_ * ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4(x.xy, y.xy);\n    vec4 b1 = vec4(x.zw, y.zw);\n\n    vec4 s0 = floor(b0) * 2.0 + 1.0;\n    vec4 s1 = floor(b1) * 2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n    vec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\n    vec3 p0 = vec3(a0.xy, h.x);\n    vec3 p1 = vec3(a0.zw, h.y);\n    vec3 p2 = vec3(a1.xy, h.z);\n    vec3 p3 = vec3(a1.zw, h.w);\n\n    vec4 norm = taylorInvSqrt(vec4(dot(p0, p0), dot(p1, p1), dot(p2, p2), dot(p3, p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    vec4 m = max(0.6 - vec4(dot(x0, x0), dot(x1, x1), dot(x2, x2), dot(x3, x3)), 0.0);\n    m = m * m;\n\n    float n = 42.0 * dot(m * m, vec4(dot(p0, x0), dot(p1, x1), dot(p2, x2), dot(p3, x3)));\n    n = (n + 1.0) * 0.5;\n    return n;\n}\n\nfloat octave_noise(\n    vec3 p,\n    int n_octaves,\n    float freq_multiplier,\n    float ampl_multiplier,\n    bool normalise\n) {\n    float freq = 1.0;\n    float ampl = 1.0;\n    float sum = 0.0;\n    float weight_sum = 0.0;\n\n    for (int i = 0; i < n_octaves; ++i) {\n        sum += ampl * snoise(p * freq);\n        weight_sum += ampl;\n\n        freq *= freq_multiplier;\n        ampl *= ampl_multiplier;\n    }\n\n    return normalise ? sum / weight_sum : sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    \n    vec2 sp = uv * 2.0 - 1.0;\n    sp *= 1.5;\n    float r = length(sp);\n\n    sp.x *= aspect;\n    vec2 orig_sp = sp;\n\n    float n = octave_noise(vec3(sp, 0.0), 2, 2.0, 0.5, true);\n    float a = 0.5 * (atan(sp.y, sp.x) / PI + 1.0);\n    float orig_a = a;\n\n    float spiral = min(0.1, r) / (1.0 + 4.0 * r);\n    spiral = pow(10.0 * spiral, 8.0);\n    r = r + r * spiral * sin(PI * 10.0 * a + 100.0 * r);\n\n    a = 0.5 * pow(n, 1.0);\n\n    a = (a * 2.0 * PI) - PI;\n    sp = vec2(r * cos(a), r * sin(a));\n\n    float blurry_ground = octave_noise(vec3(sp, iTime * 0.1), 2, 6.0, 1.0 / 2.0, true);\n    float isoline = 0.5;\n    float thickness = 0.015;\n    float outside = 1.0 - smoothstep(isoline - 0.5 * thickness, isoline + 0.1 - 0.5 * thickness, blurry_ground);\n    float inside = smoothstep(isoline + 0.5 * thickness, isoline + 0.5 * thickness + 0.1, blurry_ground);\n    float outline = 1.0 - (outside + inside);\n    float ambient = clamp(0.8 + 1.0 - smoothstep(0.5, 0.525, blurry_ground), 0.0, 1.0);\n\n    float static_noise = octave_noise(vec3(sp, iTime * 0.05), 8, 80.0, 1.0 / 2.0, true);\n    static_noise = 1.0 - 0.1 * smoothstep(0.4, 0.6, static_noise);\n\n    float detailed_ground = octave_noise(vec3(sp, iTime * 0.05), 8, 8.0, 1.0 / 2.0, true);\n\n    float light = 0.1 * ambient + 8.0 * pow(detailed_ground, 8.0);\n    light = 10.0 * light / (1.0 + (1.0 * r) + (3.0 * r * r));\n\n    float darkness_noise = 1.0 - octave_noise(vec3(sp, iTime * 0.05), 4, 80.0, 1.0 / 2.0, true);\n\n    float snow = octave_noise(\n            vec3(sp.x, sp.y, 1.0),\n            2,\n            8.0,\n            1.0 / 8.0,\n            false\n        );\n    snow = 1.0 - smoothstep(0.1, 0.5, snow);\n    snow = pow(1.1 * snow, 8.0);\n    snow = pow(snow, 1.0 + 4.0 * pow(sin(4.0 * iTime), 2.0) * 0.5 * (sin(2.0 * iTime) + 1.0));\n\n    vec3 light_near_color = vec3(1.0, 0.4, 0.0);\n    vec3 light_far_color = vec3(0.0, 0.2, 1.0);\n    vec3 light_color = r * light_far_color + (1.0 - r) * light_near_color;\n    light_color = pow(light_color, vec3(4.0));\n\n    vec3 color = light_color * light * detailed_ground + light_near_color * snow;\n    color += 0.2 * darkness_noise * (1.0 - light);\n    color *= static_noise;\n    color += 0.005 * vec3(1.0, 0.5, 0.3) * outline / pow(r, 2.0);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}