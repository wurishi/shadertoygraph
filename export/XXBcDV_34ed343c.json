{"ver":"0.1","info":{"id":"XXBcDV","date":"1727717360","viewed":42,"name":"Sunset with stars","username":"vladdoc","description":"Sunset with stars","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["procedural","gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.1415926535897932384626433832795\n#define HFOV (PI * 0.7)\n\nfloat UVToClip(in float uv)\n{\n    uv = uv * 2.0 - 1.0;\n    return uv;\n}\n\nvec2 UVToClip(in vec2 uv)\n{\n    uv.x = uv.x * 2.0 - 1.0;\n    uv.y = uv.y * 2.0 - 1.0;\n    return uv;\n}\n\nfloat UVToDegree(float x)\n{\n    return (HFOV * 0.5) * UVToClip(x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float deltaTime = min(iTime * 0.002, 1.0);\n\n    vec4 orange = vec4(1, 0.33, 0, 1);\n    vec4 darkblue = vec4(0, 0, 0.5, 1.0) - deltaTime;\n    \n    float vertical_shift = uv.y * 1.0 - (cos(UVToDegree(uv.x)) * 0.2);\n    \n    float more_blue = 0.5;\n    \n    float sunset_offset = min(vertical_shift + more_blue + deltaTime * 2.0, 1.0);\n    \n    // gradient that changes over time simulating the sunset\n    vec4 col = mix(orange, darkblue, sunset_offset);\n    \n    vec4 star = texture(iChannel0, uv);\n    \n    col = mix(col, star, star.w);\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float PHI = 1.61803398874989484820459;  // Î¦ = Golden Ratio   \n\nfloat rand(in vec2 xy, in float seed){\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n}\n\n#define SEED 2.0\n\nvec4 starColor(in vec2 frag)\n{\n\n    uint kek = floatBitsToUint(iTime);\n    kek = kek & 255u;\n    float fkek = float(kek);\n    return vec4(\n        max(rand(frag, fkek), 0.6),\n        max(rand(frag, fkek + 1.0), 0.6), \n        max(rand(frag, fkek + 2.0), 0.6), \n        0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool hasStar = rand(fragCoord, SEED) > 0.998;\n\n    if(hasStar) fragColor = starColor(fragCoord);\n    else fragColor = vec4(0);\n}","name":"Buffer A","description":"","type":"buffer"}]}