{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"float roughness = 0.5;\nfloat metallic = 0.9;\nfloat ambient = 0.05;\nfloat sphereRadius = 20.0;\nfloat sphereDepth = 60.0;\n\nfloat intensity0 = 1197.0;\nfloat intensity1 = 2422.0;\nvec3 lightPos0 = vec3(0.0, -35.0, 0.0);\nvec3 lightPos1 = vec3(0.0, 50.0, 0.0);\n\n\nconst float PI = 3.1415926;\nconst float invPI = 1.0 / PI;\n\nvec3 baseColor = vec3(1.022, 0.782, 0.344); // gold\n// vec3 baseColor = vec3(0.955, 0.638, 0.538); // copper\nvec3 lightColor = vec3(1.0);\n\nfloat GGX(float cosine, float k){\n  return cosine / (cosine * (1.0 - k) + k);\n}\n\nbool hit(in vec3 dir, in float depth, out vec3 pos) {\n    float dir2 = dot(dir, dir);\n    float dirz2 = dir.z * dir.z;\n    float r2 = sphereRadius * sphereRadius;\n    float d2 = depth * depth;\n    float temp = d2 * dirz2 - (d2 - r2) * dir2;\n    if (temp < 0.0) return false;\n\n    temp = 2.0 * sqrt(temp);\n    temp = 0.5 * (2.0 * depth * dir.z - temp);\n    pos = dir * temp;\n\n    return true;\n}\n\nvec3 shade(vec3 hitpos, vec3 lightPos, float intensity) {\n    vec3 V = normalize(vec3(0.0)/*camera pos*/ - hitpos);\n    vec3 L = lightPos - hitpos;\n    float invLightDist = 1.0 / length(L);\n    L *= invLightDist;\n    vec3 N = normalize(hitpos - vec3(0.0, 0.0, sphereDepth)/*sphereCenter*/);\n\n    /* Lambert */\n    vec3 lambert = baseColor * invPI;\n\n    /* Specular */\n    // normal distribution\n    float a = roughness * roughness;\n    float a2 = a * a;\n    vec3 H = normalize(L + V);\n    float NH = max(0.0, dot(N, H));\n    float D = a2 / (PI * pow(NH * NH * (a2 - 1.0) + 1.0, 2.0));\n    // Geometry\n    float k = pow(a + 1.0, 2.0) * 0.125;\n    float NL = max(0.0, dot(N, L));\n    float NV = max(0.0, dot(N, V));\n    float G = GGX(NL, k) * GGX(NV, k);\n    // fresnel\n    vec3 f0 = mix(vec3(0.05), baseColor, metallic);\n    // manual pow(1.0 - NV, 5.0);\n    float _temp = 1.0 - NV;\n    _temp = _temp * _temp;\n    _temp = _temp * _temp * (1.0 - NV);\n    vec3 F = f0 + (1.0 - f0) * _temp;\n    vec3 specular = (D * G * F) * (1.0 / max(0.002, 4.0 * NV * NL));\n\n    vec3 Kd = clamp((1.0 - F), 0.0, 1.0) * (1.0 - metallic);\n    vec3 light = NL * intensity * (invLightDist * invLightDist) * vec3(1.0)/*light color*/;\n\n    return (Kd * lambert + specular) * light;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    lightPos0.x = cos(iTime * 0.5) * 50.0;\n    lightPos1.x = -cos(iTime) * 30.0;\n\n    vec2 screenCenter = iResolution.xy * 0.5;\n    vec3 rayDir = normalize(vec3(fragCoord.xy - screenCenter, 1000.0));\n    vec3 hitpos;\n    if (!hit(rayDir, sphereDepth, hitpos)){\n        fragColor = vec4(0.1, 0.1, 0.1, 0.0);\n        return;\n    }\n\n    fragColor.rgb = vec3(0.0);\n    fragColor.rgb += shade(hitpos, lightPos0, intensity0);\n    fragColor.rgb += shade(hitpos, lightPos1, intensity1);\n    fragColor.rgb += baseColor * invPI * ambient;\n\n    // gamma correction\n    fragColor.rgb = pow(fragColor.rgb, vec3(0.45));\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cVfRD","date":"1733824828","viewed":58,"name":"Cook Torrance","username":"scudrt","description":"simple implementation of Cook Torrance BRDF","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["pbr","cooktorrance"],"hasliked":0,"parentid":"","parentname":""}}