{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// optimized version of https://shadertoy.com/view/csXGz7\n// by precomputed bounding box of each new curve before drawing\n\nvoid mainImage( out vec4 O, vec2 u )  { \n    O = sqrt(T(u));\n // O = sqrt(1.-exp(-T(u)*vec4(4,2,1,1))); // color\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// ---- compute BBoxs of next curves\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if (u.y>1.) discard;\n    R = iResolution.xy;\n    float i = u.x-.5, l = 9., p = 1./R.y;\n    vec2  P = H(i+.5-iTime), _P=P, m=P,M=P;  // random start point\n    \n    for( int t=0; t <len; t++, _P = P )      // follow trajectory\n        P += field(P),\n        m = min(m,P), M = max(M,P);        \n\n    O = vec4(m-p,M+p);\n}","name":"Buffer A","description":"","type":"buffer"},{"outputs":[],"inputs":[],"code":"int len = 20; // curve length ( i.e. number of samples )\nvec2 R;\n#define T(U)   texelFetch( iChannel0, ivec2(U), 0 )\n#define H(p) ( fract(sin(float(p)*vec2(269.5,183.3)) *43758.5453123)*R/R.y )\n\nfloat L(vec2 p, vec2 a,vec2 b) { // --- draw line  ( squared distance )\n    p -= a, b -= a;\n    float h = dot(p, b) / dot(b, b), \n          c = clamp(h, 0., 1.);     \n    return h==c ? dot(p -= b*h ,p) : 1e5; \n}\n\nvec2 field(vec2 U) {  // --- velocity field induced by vortices ( Biot & Savart )\n    vec2 V = vec2(0), P;\n    for( float i=0.; i < 30.; i++ ) // N random vortices ( same strength )\n        P = H(i) - U,\n        V += vec2(-P.y,P.x)  * min(100.,.1/pow(length(P),3.));\n                 // * sign(H(i+.3).y-.5); // random sign\n                 // * (2.*H(i+.3).y-1.);  // random sign & strength\n                 // * H(i+.3).y*2.;       // random strength\n                          // * min(100.,.2/dot(P,P) );\n    return V*1e-3;\n}","name":"Common","description":"","type":"common"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// --- draw only curves which BBox covers the pixel\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n     R = iResolution.xy;\n     vec2 U = u / R.y, P, _P, b;\n    O =  .98*T(u);                         // cumulates previous draw\n   \n    for( float i=0.,l; i < 80.; i++ ) {    // draw N streamlines per frame\n        vec4 B = texelFetch(iChannel1,ivec2(i,0),0); // curve bbox\n        b = step(B.xy,U)*step(U,B.zw);\n     // if (b.x*b.y == 0.) continue;       // ← this form crash Firefox !\n        if (b.x*b.y == 1.) {               // pixel not in BBox: skip draw\n        _P = P = H(i+.5-iTime);            // random start point\n        l = 9.;\n        for( int t=0; t <len; t++, _P = P ) // follow trajectory\n            P += field(P),\n            l = min( l, L(U,_P,P) );\n        O += .2*max(0., 1.-R.y*sqrt(l));   // draw the curve\n       }\n    }\n}","name":"Buffer B","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"cdfGz7","date":"1665821611","viewed":425,"name":"flow streamlines - optim","username":"FabriceNeyret2","description":"inspiration: [url]https://twitter.com/canvas_51/status/1580528793520721920[/url]\noptimized version of https://shadertoy.com/view/csXGz7 .\nTry other characteristics of vortices in Common #18-20\nanimated version: see https://www.shadertoy.com/view/cdX3z7","likes":16,"published":3,"flags":32,"usePreview":0,"tags":["flow","irrotational","vorticity","reproduction"],"hasliked":0,"parentid":"","parentname":""}}