{"ver":"0.1","info":{"id":"csc3W2","date":"1677819165","viewed":94,"name":"simpleHeartBeatingDemo","username":"mushroom","description":"simple demo","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["heart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// based on https://www.shadertoy.com/view/4lK3Rc\n\n#define MAX_STEPS 300\n#define SURF_DIST 0.0000\n#define MAX_DIST 2.\n// vec2 getDistance(vec3 q) {\n//     // 到地面的距离\n//     vec2 res = vec2(q.y, 2.);\n//     // 到球的距离\n//     float r = 0.15;\n// \tvec3 center = vec3(0., r, 0.);\n//     float d = length(q - center) - r;\n//     if (d < res.x) res = vec2(d, 1.);\n//     return res;\n// }\n\nvec2 getDistance(vec3 q) {\n\n    q *= 100.;\n    // 到地面的距离\n    vec2 res = vec2(q.y , 2.);\n    // 到球的距离\n    // float r = 11. + 3. ;\n    float r = 11. + 3. * (0.5 + 0.5 * sin(iTime * 10. + q.y * 0.1));\n    vec3 center = vec3(0., r, 0.);\n\n    q.y -= r;\n\n    // float x = q.x;\n    float x = abs(q.x);\n    // q.z = q.z* 2.;\n    q.z = q.z * (2. - q.y / 15.);\n    // q.y =  q.y - x * (20. - x) / 15.;\n    q.y = 4. + 1.2 * q.y - x * (20. - x) / 15.;\n\n    // box\n    // vec3 bb = abs(q) - vec3(10.);\n    // float d = min( max(bb.x, max(bb.y, bb.z)) , 0.) + length(max(bb, 0.));\n    \n    // sphere\n    float d = length(q) - r;\n    d /= 2.1;\n\n    if (d < res.x) res = vec2(d, 1.);\n    res.x *= 0.01;\n    return res;\n}\n\nvec3 getRay(in vec2 p, in vec3 ro) {\n    float an = 0.1*iTime;\n    // 相机观察目标\n    vec3 ta = vec3(0.0,0.15,0.0);\n    // 相机矩阵\n    // z轴， 相机观察方向\n    vec3 ww = normalize( ta - ro );\n    // x轴， 外积大法\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    // y轴， 外积大法\n    vec3 vv = normalize( cross(uu,ww));\n    mat3 camera = mat3(uu, vv, ww);\n   \treturn normalize(camera * vec3(p, 1.7));\n}\n\nvec2 rayMarching(vec3 ro, vec3 rd) {\n\n  vec2 res = vec2(0.0);\n  float t = 0.2;\n  for( int i=0; i< MAX_STEPS; i++ ) {\n      vec2 h = getDistance( ro+rd*t );\n      if( (h.x<SURF_DIST) || (t>MAX_DIST) ) break;\n      t += h.x;\n      res = vec2( t, h.y );\n  }\n\n  if( t>MAX_DIST ) res=vec2(-1.0);\n\treturn res;\n}\n\nvec3 getNormal( in vec3 pos )\n{\n    vec2 eps = vec2(0.005,0.);\n\treturn normalize( vec3(\n          getDistance(pos+eps.xyy).x - getDistance(pos-eps.xyy).x,\n          getDistance(pos+eps.yxy).x - getDistance(pos-eps.yxy).x,\n          getDistance(pos+eps.yyx).x - getDistance(pos-eps.yyx).x ) );\n}\n\nfloat getLight(vec3 pos, vec3 lightPos) {\n  vec3 l = normalize(lightPos - pos);\n  vec3 n = getNormal(pos);\n  return clamp(dot(l, n), 0., 1.);\n}\n\nfloat getShadow(vec3 pos, vec3 lightPos) {\n  float res = 1.;\n  float t = 0.001;\n\n  vec3 rd = normalize(lightPos - pos);\n  for( int i = 0; i < 32; i ++ ) {\n      float h = getDistance(pos + rd * t).x;\n      res = min( res, 10.0*h/t );\n      t += h;\n\n      if( res<SURF_DIST || t>MAX_DIST ) break;\n  }\n\n\treturn res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n  vec3 col = vec3(1.0,0.9,0.7) * pow(p.y + 1., 0.2)  ;\n\n  //vec3 col = vec3(0.);\n\n  float an = iTime * 1.5;\n  float len = 0.8;\n  vec3 ro = vec3(len * sin(an),0.25,len * cos(an));\n\n  vec3 rd = getRay(p, ro);\n\n  vec2 res = rayMarching(ro, rd);\n\n  vec3 pos = ro + rd * res.x;\n  vec3 lightPos = vec3(0., 5., 6.);\n\n  if (res.y == 1.) {\n    col = vec3(0.9,0.02,0.01);\n\n    col *= getLight(pos, lightPos) ;\n  } else if (res.y == 2.) {\n    col = vec3(1.0,0.9,0.7);\n    col *= getShadow(pos, lightPos);\n  }\n\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}