{"ver":"0.1","info":{"id":"NdSXWG","date":"1660214594","viewed":111,"name":"SIGGRAPH Frontiers [Exp]","username":"Expletive","description":"dev","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["siggraph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.)\n#define rotation(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define rep(p,r) p=mod(p,r)-r*0.5\n\nvec3 palette(float t, vec3 c)\n{return vec3(0.5)+vec3(0.5)*cos(2.*PI*(c*t+vec3(0.,0.36,0.64)));}\n\nfloat id, g1=0.;\n\nfloat SDF(vec3 p)\n{\n    vec3 pp = p;\n\n    float period = 5.;\n    id = floor(p.x/period);\n    rep(p.x, period);\n    p.y = abs(p.y)-5.;\n    \n    p.x += sin(p.z*id*0.2+iTime);    \n    p.y += sin(p.z*id*0.3+iTime);\n    \n    float cylinder = length(p.xy)-0.5;\n    \n    p = pp;\n    p.xy *= rotation(iTime);\n    p.xy = abs(p.xy)-.8;\n    \n    float sphere = length(p)-.6;\n    \n    g1 += 0.08/(0.1+sphere*sphere);\n    g1 += 0.03/(0.1+cylinder*cylinder);\n    \n    return min(sphere,cylinder);\n}\n\nfloat mask(vec2 uv)\n{\n    uv.x += iTime;\n    return step(0.1, abs( fract(uv.x)-.5 ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    centered_uv += mask(centered_uv)*0.1;\n\n    // Declaring the camera\n    vec3 ro = vec3(0.,0.,-3.);\n    vec3 rd = normalize(vec3(centered_uv,1.));\n    vec3 p = ro;\n    \n    //Declaring the color background\n    vec3 col = vec3(0.);\n    \n    bool hit = false;\n    \n    //Help store the iterations for a super cheap and fake AO\n    float shad;\n    \n    //Raymarching loop\n    for (float i=0.; i<64.; i++)\n    {\n        float d = SDF(p);\n        if(d<0.01) //If we're really close to the shape\n        {\n            hit = true;\n            shad = i/64.;\n            break;\n        }\n        \n        //Moving along the ray with the technique of sphere-tracing\n        p += d*rd*0.8;\n    }\n    \n    if(hit)\n    {\n        col = palette(id,vec3(0.1));\n        //col = vec3(1.-shad);\n    }\n    \n    col += g1*0.1;\n    \n    // Output to screen\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}