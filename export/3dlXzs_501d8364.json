{"ver":"0.1","info":{"id":"3dlXzs","date":"1552418378","viewed":114,"name":"ProcPlanets","username":"thebeardphantom","description":"Terrain","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 1\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .4;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nfloat remap(float value, float low1, float high1, float low2, float high2)\n{\n    return low2 + (value - low1) * (high2 - low2) / (high1 - low1);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = vec2(\n        remap(uv.x, 0.0, 1.0, -1.0, 1.0),\n        remap(uv.y, 0.0, 1.0, -1.0, 1.0));\n    pos.x *= iResolution.x/iResolution.y;\n    \n    vec2 dir = normalize(pos);\n    float dist = length(pos);\n    float lowFreq = fbm(dir * 2.0) * 0.3;\n    float highFreq = (fbm(dir * 12.0) - 0.1) * dist;\n    float finalNoise = mix(lowFreq, lowFreq + highFreq, 0.12);\n    if(dist <= 0.2)\n    {\n        dist -= fbm(dir * 2.5 + iTime) * 0.055;\n    }\n    float albedoDist = dist - highFreq * 0.08;\n    float pixel = step(dist + finalNoise, 1.0);\n    vec3 color;\n    if(albedoDist > 0.965)\n    {\n        color = vec3(1.0, 1.0, 1.0);\n    }\n    else if(albedoDist > 0.92)\n    {\n        color = vec3(0.5, 0.5, 0.5);\n    }\n    else if(albedoDist > 0.7)\n    {\n        color = vec3(0.0, 0.4, 0.0);\n    }\n    else if(albedoDist > 0.28)\n    {\n        color = vec3(0.3, 0.2, 0.0);\n    }\n    else if(albedoDist > 0.15)\n    {\n        color = vec3(0.1, 0.05, 0.0);\n    }\n    else\n    {\n        color = mix(\n            vec3(0.6, 0.0, 0.0),\n        \tvec3(1.0, 1.0, 0.0),\n        \t(fbm(fragCoord * 0.06 + iTime * -0.5) + fbm(fragCoord * 0.06 + iTime)) / 2.0);\n    }\n    fragColor = vec4(color, 1.0) * pixel;\n}","name":"Image","description":"","type":"image"}]}