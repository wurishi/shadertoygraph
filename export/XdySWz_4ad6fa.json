{"ver":"0.1","info":{"id":"XdySWz","date":"1504041781","viewed":112,"name":"Magical Orbs","username":"joe234321","description":"asdf","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float obj_sphere( vec3 p, vec3 loc, float radius )\n{\n    return length( p - loc) - radius;\n}\n\nfloat map(vec3 p)\n{\n    p.x = mod( p.x, 4.0 );\n    //p.y = mod( p.y, 4.0 );\n    p.z = mod( p.z, 4.0 );\n    return obj_sphere( p, vec3(2,0,2), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const vec3 epsilon =vec3(0.01,0,0);\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    \n    vec3 destPoint = vec3(p.x, p.y, 0.0);\n    vec3 srcPoint = vec3(0.0, 0.0, 1.0);\n    vec3 lightPoint = srcPoint;\n    vec3 ray = destPoint - srcPoint;\n        \n    float f = 1.0;\n    vec3 iterPoint = srcPoint;\n    float d = 1.0;\n    \n    for( int i = 0 ; i < 64; i++)\n    {\n        d = map( iterPoint );\n        f += d;\n        iterPoint = srcPoint + ray * f;\n    }\n    \n    vec3 normal = vec3( d - map( iterPoint + epsilon.xyy ),\n                       d - map( iterPoint + epsilon.yxy ),\n                       d - map( iterPoint + epsilon.yyx ) );\n    normal = normalize(normal);\n    \n    \n    float angle = iTime;\n    lightPoint = 4.0 * vec3( cos(angle) - sin(angle), 0.0, sin(angle) + cos(angle));\n    \n    if( d < 0.001 )\n    {\n        vec3 lightDir = iterPoint - lightPoint;\n        fragColor = vec4( 0.5, 0.5, 0.5, 1.0);\n        fragColor *= dot( normal , lightDir);\n    }\n    else\n    {\n\t\tfragColor = vec4(p,0.5+0.5*sin(iTime),1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}