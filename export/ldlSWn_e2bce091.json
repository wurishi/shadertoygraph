{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float PI=3.14159;\n\n\nfloat hash(float x){ return fract(sin(x)*43758.5453);}\nfloat hash(vec2 x){ return hash(hash(x.x)+x.y); }\nfloat hash(vec3 x){ return hash(hash(x.xy)*x.z); }\n\nvec3 tex(vec3 p, float mat){\n\tvec3 color;\n\t\n\tif(mat==0.){\n\t\tfloat d=5.;\n\t\tcolor=vec3(smoothstep(-0.01,0.01,sin(p.x*d)*sin(p.y*d)*sin(p.z*d)));\n\t}\n\t\n\tif(mat==1.){\n\t\tcolor=vec3(1.,0.6,0.3);\n\t}\n\t\n\treturn clamp(color,0.,1.);\n}\n\nvec2 map(vec3 p){\n\tvec2 t0=vec2(5.-max(abs(p.x),max(abs(p.y),abs(p.z))),0.);\n\tvec2 t1=vec2(length(p)-1.,1.);\n\tif(t1.x<t0.x)t0=t1;\n\treturn t0;\n}\n\nvec3 normal(vec3 p){\n\tvec3 e=vec3(0.001,0.,0.);\n\tvec3 n=vec3(\n\t\tmap(p+e.xyy).x-map(p-e.xyy).x,\n\t\tmap(p+e.yxy).x-map(p-e.yxy).x,\n\t\tmap(p+e.yyx).x-map(p-e.yyx).x);\n\treturn normalize(n);\n}\n\nvec2 intersect(vec3 ro, vec3 rd){\n\tconst int iter=200;\n\tconst float mint=0.0001;\n\tfloat t=0.;\n\tfor(int i=0 ; i<iter ; i++){\n\t\tvec2 h = map(ro+t*rd);\n\t\tif(h.x<0.001) return vec2(t,h.y);\n\t\tt+=max(mint*t,h.x);\n\t}\n\treturn vec2(0.);\n}\n\nvec3 shade(vec2 uv){\n    \n    vec2 mouse = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n\t\n\tvec3 ro=vec3(sin(mouse.x*PI/2.)*2.,sin(mouse.y*PI/2.)*2.,2.);\n\tro.z=cos(length(ro.xy)*PI/2.)*0.1+1.9;\n\t\n\tvec3 lat=vec3(0.,0.,0.);\n\tvec3 dir = normalize(lat-ro);\n\tvec3 axr  = normalize(cross(dir,vec3(0.,1.,0.)));\n\tvec3 axu  = normalize(cross(axr,dir));\n\tvec3 rd = normalize(uv.x*axr+uv.y*axu+dir);\n\t\n\tvec2 t = intersect(ro,rd);\n\tvec3 color=vec3(1.,0.,1.);\n\t\n\tif(t.y>=0.){\n\t\tvec3 p = ro+t.x*rd;\n\t\tvec3 n = normal(p);\n\t\tvec3 l = normalize(vec3(1.,0.8,06));\n\t\t\n\t\tfloat amb=0.5+0.5*n.y;\n\t\tfloat dif=max(0.,dot(n,l));\n\t\t\n\t\tcolor  = amb*vec3(0.2);\n\t\tcolor += dif;\n\t\tcolor *= tex(p,t.y);\n\t}\n\t\n\treturn vec3(color);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\tfragColor = vec4(shade(uv),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldlSWn","date":"1399412520","viewed":237,"name":"RayMarchingTemplate","username":"cafe","description":"This is my old mess of code, I would highly suggest anyone uses a much shorter, faster, more accurate and more straightforward version as there are tons around. This just was my first attempt at improvising one with minimal prior raymarching knowledge. :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingtemplate"],"hasliked":0,"parentid":"","parentname":""}}