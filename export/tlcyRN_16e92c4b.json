{"ver":"0.1","info":{"id":"tlcyRN","date":"1608564408","viewed":165,"name":"Shmup Shader by Katsuomi","username":"jorge2017a1","description":"Shmup Shader by Katsuomi","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["shmupshaderbykatsuomi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shmup Shader\n// by Katsuomi Kobayashi (@korinVR)\n// http://framesynthesis.com/\n\n\n#define SCREEN_W 0.7\n#define SCROLL_SPEED 0.1\n\n#define BLINK_INTERVAL 0.06\nfloat blink = 0.;\n\nvec2 p = vec2(0.);\n\nvec2 myfighter_pos = vec2(0.);\n\nhighp float rand(vec2 co){\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nfloat linear_map(float value, float s0, float s1, float d0, float d1)\n{\n\treturn d0 + (value - s0) * (d1 - d0) / (s1 - s0);\n}\n\nvoid set_myfighter_pos()\n{\n\tfloat n = floor(iTime * 2.0);\n\tfloat t = fract(iTime * 2.0);\n\n\tfloat x0 = linear_map(rand(vec2(n, 0)), 0.0, 1.0, -0.3, 0.3);\n\tfloat x1 = linear_map(rand(vec2(n + 1.0, 0)), 0.0, 1.0, -0.3, 0.3);\n\tfloat y0 = linear_map(rand(vec2(0, n)), 0.0, 1.0, -0.4, -0.1);\n\tfloat y1 = linear_map(rand(vec2(0, n + 1.0)), 0.0, 1.0, -0.4, -0.1);\n\n\tfloat x = linear_map(t, 0.0, 1.0, x0, x1);\n\tfloat y = linear_map(t, 0.0, 1.0, y0, y1);\n\n\tmyfighter_pos.x = x;\n\tmyfighter_pos.y = y;\n}\n\nvec3 background()\n{\n\tfloat interval = 0.1;\n\tfloat thick = 0.005;\n\tvec3 color = vec3(0.0, 0.2, 0.4);\n\n\tif (mod(p.y + iTime * SCROLL_SPEED, interval) < thick || mod(p.x, interval) < thick) {\n\t\treturn color;\n\t}\n\treturn vec3(0);\n}\n\nvec2 get_boss_pos(float offset)\n{\n\tfloat x = sin(iTime - offset) * 0.2;\n\n\treturn vec2(x, 0.35);\n}\n\nvec3 bullet(vec2 v, float t)\n{\n\tvec2 pos = get_boss_pos(t) + v * t;\n\n\tif (length(p - pos) < 0.006) {\n\t\treturn vec3(1);\n\t}\n\tif (length(p - pos) < 0.01) {\n\t\treturn vec3(1, 0.4, 0.3);\n\t}\n\treturn vec3(0);\n}\n\nvec3 myfighter(vec2 pos)\n{\n\tfloat radius = 0.03;\n\n\tfloat dx = pos.x - p.x;\n\tfloat dy = pos.y - p.y;\n\n\tint px = int(floor(abs(dx) / 0.02));\n\tint py = int(floor(dy / 0.02));\n\n\tbool pixel = false;\n\n\tif (px == 0) {\n\t\tif (py >= -1 && py <= 1) {\n\t\t\tpixel = true;\n\t\t}\n\t}\n\tif (px == 1) {\n\t\tif (py >= 1 && py <= 2) {\n\t\t\tpixel = true;\n\t\t}\n\t}\n\n\tif (pixel) {\n\t\treturn vec3(1, 1, 1);\n\t}\n\treturn vec3(0);\n}\n\nfloat get_laser_hit_y()\n{\n\tif (abs(myfighter_pos.x - get_boss_pos(0.0).x) < 0.09) {\n\t\treturn 0.3;\n\t}\n\treturn 2.0;\n}\n\nvec3 laser(vec2 pos)\n{\n\tvec2 boss_pos = get_boss_pos(0.0);\n\n\tfloat a = 0.003 + blink * 0.004;\n\n\tfloat d;\n\n\tif (p.y > myfighter_pos.y && p.y < get_laser_hit_y()) {\n\t\td = abs(p.x - pos.x);\n\t} else {\n\t\td = length(p - pos);\n\t}\n\tfloat n = a / (d * 2.0);\n\n\treturn vec3(2, 8, 5) * n;\n}\n\nvec3 laser_hit_effect()\n{\n\tvec2 pos = vec2(myfighter_pos.x, get_laser_hit_y());\n\n\tfloat a = 0.02 + blink * 0.02;\n\n\tfloat d = length(p - pos);\n\tfloat n = a / (d * 5.0);\n\n\treturn vec3(2, 2, 5) * n;\n}\n\nvec3 boss()\n{\n\tvec2 pos = get_boss_pos(0.0);\n\n\tbool pixel = false;\n\n\tfloat dx = pos.x - p.x;\n\tfloat dy = pos.y - p.y;\n\n\tint px = int(floor(abs(dx) / 0.02));\n\tint py = int(floor(dy / 0.02));\n\n\tif (px >= -5 && px <= 5) {\n\t\tif (py >= -5 && py <= 3) {\n\t\t\tif (rand(vec2(px, py)) > 0.5) {\n\t\t\t\tpixel = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (pixel) {\n\t\tif (abs(myfighter_pos.x - pos.x) < 0.08 && blink > 0.5) {\n\t\t\treturn vec3(1);\n\t\t}\n\t\treturn vec3(1, 0.5, 0);\n\t}\n\treturn vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tblink = mod(iTime, BLINK_INTERVAL) / BLINK_INTERVAL;\n\n\tp = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n\n\tif (abs(p.x) > SCREEN_W / 2.0) {\n\t\tdiscard;\n\t}\n\n\tset_myfighter_pos();\n\n\tvec3 c = background();\n\n\tc += boss();\n\n\tfor (int i = -4; i <= 2; i++) {\n\t\tfloat t = fract(iTime * 0.5 + float(i) * 0.03);\n\t\tvec2 v = normalize(vec2(float(i) * 0.1, -1.0));\n\t\tc += bullet(v, t);\n\t}\n\n\tfor (int i = -2; i <= 4; i++) {\n\t\tfloat t = fract(iTime * 0.5 + 0.5 + float(i) * -0.03);\n\t\tvec2 v = normalize(vec2(float(i) * 0.1, -1.0));\n\t\tc += bullet(v, t);\n\t}\n\n\tc += myfighter(myfighter_pos);\n\tc += laser(myfighter_pos);\n\tc += laser_hit_effect();\n\n\tfragColor = vec4(c, 1);\n}\n\n","name":"Image","description":"","type":"image"}]}