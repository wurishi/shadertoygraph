{"ver":"0.1","info":{"id":"MdlBWf","date":"1498621877","viewed":175,"name":"SimpleVoxelTrace","username":"YUII","description":"简单的体素","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voxeltrace","3dmosaic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n预子作品   王世伟\n\nthanks \nhttps://www.shadertoy.com/view/ldjXz1\nhttps://www.shadertoy.com/view/4ds3zr\nhttps://www.shadertoy.com/view/4dfGz4\nhttps://www.shadertoy.com/view/4dX3zl\nand iq\n\n*/\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float EPSILON = 0.0001;\n//const float EPSILON = 0.1;\n/**\n * Rotation matrix around the X axis.\n */\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n                vec3(1, 0, 0),\n                vec3(0, c, -s),\n                vec3(0, s, c)\n                );\n}\n\n/**\n * Rotation matrix around the Y axis.\n */\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n                vec3(c, 0, s),\n                vec3(0, 1, 0),\n                vec3(-s, 0, c)\n                );\n}\n\n/**\n * Rotation matrix around the Z axis.\n */\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n                vec3(c, -s, 0),\n                vec3(s, c, 0),\n                vec3(0, 0, 1)\n                );\n}\n\n\n/**\n * Constructive solid geometry intersection operation on SDF-calculated distances.\n */\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n/**\n * Constructive solid geometry union operation on SDF-calculated distances.\n */\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\n/**\n * Constructive solid geometry difference operation on SDF-calculated distances.\n */\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\n/**\n * Signed distance function for a cube centered at the origin\n * with width = height = length = 2.0\n */\nfloat cubeSDF(vec3 p) {\n    // If d.x < 0, then -1 < p.x < 1, and same logic applies to p.y, p.z\n    // So if all components of d are negative, then p is inside the unit cube\n    vec3 d = abs(p) - vec3(1.0, 1.0, 1.0);\n    \n    // Assuming p is inside the cube, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    // Assuming p is outside the cube, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(d, 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\nfloat cubeSDF(vec3 p,float w) {\n    // If d.x < 0, then -1 < p.x < 1, and same logic applies to p.y, p.z\n    // So if all components of d are negative, then p is inside the unit cube\n    vec3 d = abs(p) - vec3(w, w, w);\n    \n    // Assuming p is inside the cube, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    \n    // Assuming p is outside the cube, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(d, 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\n/**\n * Signed distance function for a sphere centered at the origin with radius 1.0;\n */\nfloat sphereSDF(vec3 p) {\n    return length(p) - 1.0;\n}\n\nfloat sphereSDF(vec3 p,float r) {\n    return length(p) - r;\n}\n\n\nfloat distTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\n\nfloat cylinderSDF(vec3 p, float h, float r) {\n    // How far inside or outside the cylinder the point is, radially\n    float inOutRadius = length(p.xy) - r;\n    \n    // How far inside or outside the cylinder is, axially aligned with the cylinder\n    float inOutHeight = abs(p.z) - h/2.0;\n    \n    // Assuming p is inside the cylinder, how far is it from the surface?\n    // Result will be negative or zero.\n    float insideDistance = min(max(inOutRadius, inOutHeight), 0.0);\n    \n    // Assuming p is outside the cylinder, how far is it from the surface?\n    // Result will be positive or zero.\n    float outsideDistance = length(max(vec2(inOutRadius, inOutHeight), 0.0));\n    \n    return insideDistance + outsideDistance;\n}\n\nfloat toSphere(in vec3 p){\n//    p = rotate_y(p,-time*0.5);\n    p.y += 0.2;\n    return length(pow(abs(p),vec3(.7,0.68,0.4)))-1.5;\n    //you can try this another DE vertion\n    //return length(pow(abs(p),vec3(.7,0.68,0.4))-vec3(.6,0.35,0.4))-1.;\n}\n\n\nfloat smin( float a, float b, float k){\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n    \n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) +\n    length(max(d,0.0));\n}\n\n//for fractals\nfloat sdCross( in vec3 p)\n{\n    float v = 1.0;\n    float da = sdBox(p.xyz,vec3(1000.0, v, v));\n    float db = sdBox(p.yzx,vec3(v, 1000.0, v));\n    float dc = sdBox(p.zxy,vec3(v, v, 1000.0));\n    return min(da,min(db,dc));\n}\n\n\n\nfloat sdPlane( vec3 p, vec4 n ) {\n    return dot( p, n.xyz ) + n.w;\n}\n\n/**\n * Signed distance function describing the scene.\n *\n * Absolute value of the return value indicates the distance to the surface.\n * Sign indicates whether the point is inside or outside the surface,\n * negative indicating inside.\n */\nfloat sceneSDF(vec3 samplePoint) {\n    float sphereDist = sphereSDF(samplePoint,0.5+abs(sin(iTime))*0.5);\n    return sphereDist;\n\n}\n\n\n\n/**\n * Return the shortest distance from the eyepoint to the scene surface along\n * the marching direction. If no part of the surface is found between start and end,\n * return end.\n *\n * eye: the eye point, acting as the origin of the ray\n * marchingDirection: the normalized direction to march in\n * start: the starting distance away from the eye\n * end: the max distance away from the ey to march before giving up\n */\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        \n//         dist = floor(dist*10.+0.5)/10.;\n        \n        if (dist < EPSILON) {\n            return depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\n\n/**\n * Return the normalized direction to march in from the eye point for a single pixel.\n *\n * fieldOfView: vertical field of view in degrees\n * size: resolution of the output image\n * fragCoord: the x,y coordinate of the pixel in the output image\n */\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\n/**\n * Using the gradient of the SDF, estimate the normal on the surface at point p.\n */\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n                          sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n                          sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n                          sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n                          ));\n}\n\n\n// Amanatides & Woo style voxel traversal\nconst vec3 voxelSize = vec3(0.1); // in world space\n//const vec3 voxelSize = vec3(0.2);\n\nvec3 worldToVoxel(vec3 i)\n{\n    return floor(i/voxelSize);\n}\n\nvec3 voxelToWorld(vec3 i)\n{\n    return i*voxelSize;\n}\n\nconst bool USE_BRANCHLESS_DDA = true;\n\nfloat voxelTrace(vec3 ro, vec3 rd, out bool hit, out vec3 hitNormal)\n{\n    const int maxSteps = 250;\n    const float isoValue = 0.0;\n    \n    vec3 voxel = worldToVoxel(ro);\n    vec3 step = sign(rd);\n    \n    vec3 nearestVoxel = voxel + vec3(rd.x > 0.0, rd.y > 0.0, rd.z > 0.0);\n    vec3 tMax = (voxelToWorld(nearestVoxel) - ro) / rd;\n    vec3 tDelta = voxelSize / abs(rd);\n    \n    vec3 hitVoxel = voxel;\n    \n    hit = false;\n    float hitT = 0.0;\n    for(int i=0; i<maxSteps; i++) {\n        float d = sceneSDF(voxelToWorld(voxel));\n        if (d <= isoValue && !hit) {\n            hit = true;\n            hitVoxel = voxel;\n            //break;\n        }\n        \n        if (USE_BRANCHLESS_DDA) {\n            bvec3 mask = lessThanEqual(tMax.xyz, min(tMax.yzx, tMax.zxy));\n            tMax += vec3(mask) * tDelta;\n            voxel += vec3(mask) * step;\n            \n            if (!hit) {\n                hitNormal = vec3(mask) * -step;\n                vec3 tmp = vec3(mask)*tMax;\n                hitT = tmp.x+tmp.y+tmp.z;\n            }\n        }\n        \n        else {\n        \n        if (tMax.x < tMax.y && tMax.x < tMax.z) {\n            voxel.x += step.x;\n            tMax.x += tDelta.x;\n            if (!hit) {\n                hitNormal = vec3(-step.x, 0.0, 0.0);\n                hitT = tMax.x;\n            }\n        } else if (tMax.y < tMax.z) {\n            voxel.y += step.y;\n            tMax.y += tDelta.y;\n            if (!hit) {\n                hitNormal = vec3(0.0, -step.y, 0.0);\n                hitT = tMax.y;\n            }\n        } else {\n            voxel.z += step.z;\n            tMax.z += tDelta.z;\n            if (!hit) {\n                hitNormal = vec3(0.0, 0.0, -step.z);\n                hitT = tMax.z;\n            }\n        }\n            \n        }\n        \n//#if 0\n//        if ((voxel.x < 0) || (voxel.x >= size.width) ||\n//            (voxel.y < 0) || (voxel.y >= size.height) ||\n//            (voxel.z < 0) || (voxel.z >= size.depth)) {\n//            break;            \n//        }\n//#endif\t    \n    }\n    \n    //return voxelToWorld(hitVoxel);\n//    return ro + hitT*rd;\n    \n    return hitT;\n}\n\n\n\nbool raymarch( vec3 eye, vec3 marchingDirection, out vec3 hitPos, out vec3 hitNrm )\n{\n    //    const int maxSteps = 128;\n    //    const float hitThreshold = 0.0001;\n    \n    bool hit = false;\n    hitPos = eye;\n    float depth = MIN_DIST;\n    vec3 pos = eye;//MIN_DIST, MAX_DIST\n    \n    for ( int i = 0; i < MAX_MARCHING_STEPS; i++ )\n    {\n        float d = sceneSDF( pos );\n       \n        if ( d < EPSILON )\n        {\n            hit = true;\n            hitPos = pos;\n            pos += d * marchingDirection;\n            \n            hitNrm = estimateNormal(  pos);\n            break;\n        }\n        \n        depth += d;\n        if (depth >= MAX_DIST) {\n            return hit;\n        }\n        \n        pos += d * marchingDirection;\n    }\n    return hit;\n}\n\n\nfloat shadowSoft( vec3 ro, vec3 rd, float mint, float maxt, float k )\n{\n    float t = mint;\n    float res = 1.0;\n    for ( int i = 0; i < 128; ++i )\n    {\n        float h = sceneSDF( ro + rd * t );\n        if ( h < EPSILON )\n            return 0.0;\n        \n        res = min( res, k * h / t );\n        t += h;\n        \n        if ( t > maxt )\n            break;\n    }\n    return res;\n}\n\nvec3 shade( vec3 pos, vec3 nrm, vec4 light )\n{\n    vec3 toLight = light.xyz - pos;\n    \n    float toLightLen = length( toLight );\n    toLight = normalize( toLight );\n    \n    float comb = 0.1;\n    //float vis = shadow( pos, toLight, 0.01, toLightLen );\n    float vis = shadowSoft( pos, toLight, 0.0625, toLightLen, 8.0 );\n    \n    if ( vis > 0.0 )\n    {\n        float diff = 2.0 * max( 0.0, dot( nrm, toLight ) );\n        float attn = 1.0 - pow( min( 1.0, toLightLen / light.w ), 2.0 );\n        comb += diff * attn * vis;\n    }\n    \n    return vec3( comb, comb, comb );\n}\n\n/**\n * Lighting contribution of a single point light source via Phong illumination.\n *\n * The vec3 returned is the RGB color of the light's contribution.\n *\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n * lightPos: the position of the light\n * lightIntensity: color/intensity of the light\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    }\n    \n    //vec3 KD = k_d;//vec3(abs(sin(p)));\n     vec3 KD = vec3(abs(sin(p)));\n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (KD * dotLN);\n    }\n    return lightIntensity * (KD * dotLN + k_s * pow(dotRV, alpha));\n}\n\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity,vec3 N) {\n//    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        // Light not visible from this point on the surface\n        return vec3(0.0, 0.0, 0.0);\n    }\n    \n    //vec3 KD = k_d;//vec3(abs(sin(p)));\n   vec3 KD = vec3(abs(sin(p)));\n    \n    if (dotRV < 0.0) {\n        // Light reflection in opposite direction as viewer, apply only diffuse\n        // component\n        return lightIntensity * (KD * dotLN);\n    }\n    return lightIntensity * (KD * dotLN + k_s * pow(dotRV, alpha));\n}\n\n/**\n * Lighting via Phong illumination.\n *\n * The vec3 returned is the RGB color of that point after lighting is applied.\n * k_a: Ambient color\n * k_d: Diffuse color\n * k_s: Specular color\n * alpha: Shininess coefficient\n * p: position of point being lit\n * eye: the position of the camera\n *\n * See https://en.wikipedia.org/wiki/Phong_reflection_model#Description\n */\nvec3 phong(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,vec4 light) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(light.xyz);\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity);\n    return color;\n}\n\n\nvec3 phong(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,vec4 light,vec3 N) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = vec3(light.xyz);\n    vec3 light1Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    vec3 light2Pos = vec3(2.0 * sin(0.37 * iTime),\n                          2.0 * cos(0.37 * iTime),\n                          2.0);\n    vec3 light2Intensity = vec3(0.4, 0.4, 0.4);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light2Pos,\n                                  light2Intensity,N);\n    return color;\n}\n\n/**\n * Return a transform matrix that will transform a ray from view space\n * to world coordinates, given the eye point, the camera target, and an up vector.\n *\n * This assumes that the center of the camera is aligned with the negative z axis in\n * view space when calculating the ray marching direction. See rayDirection.\n */\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    // Based on gluLookAt man page\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n                vec4(s, 0.0),\n                vec4(u, 0.0),\n                vec4(-f, 0.0),\n                vec4(0.0, 0.0, 0.0, 1)\n                );\n}\n\nvoid VoxelMainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n//    vec3 eye = vec3(sin(iTime)*4., cos(iTime)*4., 7.0);\n    \n//    vec3 eye = vec3(sin(iTime)*5., 5., cos(iTime)*5.0);\n    vec3 eye = vec3(5., 5., 5.0);\n//    vec3 eye = vec3(sin(iTime)*4., 4., cos(iTime)*7.0);\n//    vec3 eye = vec3(4., 4., 10.0);\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    bool hit = false;\n    vec3 hitNormal;\n    vec3 pos;\n    float dist =  voxelTrace(eye, worldDir, hit,  hitNormal);\n    \n    if(!hit){\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(0.7, 0.2, 0.2);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    vec4 light1 = vec4(4.0 * sin(iTime),\n                       2.0,\n                       4.0 * cos(iTime),10.);\n    \n    vec3 color = phong(K_a, K_d, K_s, shininess, p, eye,light1,hitNormal);\n    fragColor = vec4(color, 1.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float si = sign(sin(iTime));\n    if(si>0.){\n         VoxelMainImage(fragColor,fragCoord);\n        \n        return ;\n    }\n    \n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    //    vec3 eye = vec3(sin(iTime)*4., cos(iTime)*4., 7.0);\n    vec3 eye = vec3(sin(iTime)*4., 4., cos(iTime)*7.0);\n    //    vec3 eye = vec3(4., 4., 10.0);\n    \n    mat4 viewToWorld = viewMatrix(eye, vec3(0.0, 0.0, 0.), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    float dist = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    if (dist > MAX_DIST - EPSILON) {\n            // Didn't hit anything\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        return;\n    }\n    \n    // The closest point on the surface to the eyepoint along the view ray\n    vec3 p = eye + dist * worldDir;\n    \n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(0.7, 0.2, 0.2);\n    vec3 K_s = vec3(1.0, 1.0, 1.0);\n    float shininess = 10.0;\n    vec4 light1 = vec4(4.0 * sin(iTime),\n                       2.0,\n                       4.0 * cos(iTime),10.);\n    \n    vec3 color = phong(K_a, K_d, K_s, shininess, p, eye,light1);\n    \n    fragColor = vec4(color, 1.0);\n\n    vec3 sceneWsPos;\n    vec3 sceneWsNrm;\n    if ( raymarch( eye, worldDir, sceneWsPos, sceneWsNrm ) )\n    {\n        vec3 shade1 = shade( sceneWsPos, sceneWsNrm, light1 );\n        fragColor *= vec4( shade1, 1.0 );\n    }\n    else\n    {\n        fragColor *= vec4( 0.0, 0.0, 0.0, 1.0 );\n    }\n    \n}\n","name":"Image","description":"","type":"image"}]}