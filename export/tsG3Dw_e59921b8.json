{"ver":"0.1","info":{"id":"tsG3Dw","date":"1570283389","viewed":103,"name":"Raymarch experiment by Petronous","username":"petronous","description":"A small experiment\n\nTry changing the #define values","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CAM_ZOOM  2.\n#define MAX_STEPS 200\n#define MAX_DIST  1000.\n#define SURF_DIST .03\n#define PI 3.1415926\n#define CAM_TO_CENTER false\n#define LIGHT true\n#define BALL_SPACING 5.\n\n\nvec3 VecMod(vec3 v, float m) {\n  vec3 ret = v;\n  for(int i = 0; i < 3; i++){\n    float rem = v[i];\n    if (rem > 0.){\n      while (rem > m) {\n        rem -= m;\n      }\n      ret[i] = rem-m/2.;\n    } else {\n      while (rem < -m) {\n        rem += m;\n      }\n      ret[i] = rem+m/2.;\n    }\n  }\n\n  return ret;\n}\n\n\nfloat Distance(vec3 rn){\n  return length(VecMod(rn, BALL_SPACING)) - .5;\n}\n\nfloat Light(vec3 rn){\n  \tfloat dist = Distance(rn);\n    if (dist < SURF_DIST) {\n        vec3 relpos = VecMod(rn, BALL_SPACING);\n        vec3 normal = normalize(relpos);\n        return dot(normal, normalize(vec3(.5, 1, -.1)));\n    } else {\n    \treturn 2.;\n    }\n}\n\nfloat March(vec3 ro, vec3 rd) {\n    float ditr = 0.;\n    for(int i = 0; i < MAX_STEPS; i++){\n    float dist = Distance(ro + rd*ditr);\n        ditr += dist;\n        if(dist < SURF_DIST || ditr > MAX_DIST) break;\n    }\n    return ditr;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xx - vec2(.5, .5*iResolution.y/iResolution.x);\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.yxx+vec3(1));\n\n    vec3 ro = vec3(100.*sin(iTime/10.),0,100.*cos(iTime/10.));\n    //vec3 ro = vec3(0.,1.5,-10.);\n    vec3 camd = normalize(ro);\n    float xzCAngle;\n    if (CAM_TO_CENTER){\n    \txzCAngle= atan(camd.x/camd.z);\n        if (ro.z>0.) {\n            xzCAngle += PI;\n        }\n    } else {\n    \tro = vec3(0, 0, iTime/.5);\n        xzCAngle = 0.;\n    }\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1./CAM_ZOOM));\n    float xzAngle = atan(rd.x/rd.z) + xzCAngle;\n    rd.x = sin(xzAngle);\n    rd.z = cos(xzAngle);\n\t\n    vec3 col;\n    float dist = March(ro,rd);\n    if(LIGHT){\n    \tfloat light = Light(dist*rd + ro);\n        if (light <= 1.) {\n        \tcol = vec3(light);\n        } else {\n        \tcol = vec3(dist/MAX_DIST);\n        }\n    } else {\n    \tcol = vec3(dist/MAX_DIST);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}