{"ver":"0.1","info":{"id":"tlVyRD","date":"1610658406","viewed":86,"name":"desert and sun 2","username":"regis","description":"desert and sun 2","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","sun","desert"],"hasliked":0,"parentid":"WtcyWl","parentname":"snow and ice"},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\nfloat dist = 0.0;\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nmat3 RotX(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(1., .0, .0, .0, c, -s, .0, s, c);\n\n}\n\nmat3 RotY(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, .0, s, .0, 1., .0, -s, .0, c);\n\n}\n\nmat3 RotZ(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);\n\n}\n\nfloat sdTrapezoid(in vec2 p, in float r1, in float r2, in float he) {\n    vec2 k1 = vec2(r2, he);\n    vec2 k2 = vec2(r2 - r1, 2.0 * he);\n\n\tp.x = abs(p.x);\n    vec2 ca = vec2(max(0.0, p.x - ((p.y < 0.0) ? r1 : r2)), abs(p.y) - he);\n    vec2 cb = p - k1 + k2 * clamp(dot(k1 - p, k2) / dot(k2, k2), 0.0, 1.0);\n    \n    float s = (cb.x < 0.0 && ca.y < 0.0) ? -1.0 : 1.0;\n    \n    return s * sqrt(min(dot(ca, ca), dot(cb, cb)));\n}\n\nfloat opExtrusion(in vec3 p, in float d, in float h) {\n    // d is the distance to the 2D shape using the x and y components of p\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\n\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    //return vec4( p-clamp(p,-h,h), 0.0 ); // faster, but produces zero in the interior elongated box\n    \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\n\nvec3 opTwist(in vec3 p, in float t) {\n    float c = cos(t * p.y);\n    float s = sin(t * p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\n\n// from iq\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n  \tf = f*f*(3.0-2.0*f);\n  \tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n  \tvec2 rg = textureLod( iChannel0, (uv+0.5)/256.0, 0.0).yx;\n  \treturn mix( rg.x, rg.y, f.z );\n}\n\n// ref https://www.shadertoy.com/view/Xs33Df\nfloat Noise3D(in vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; // Cell's fractional component.\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\nfloat FBM( in vec3 p )\n{\n    float n = 0.0;\n    n += 0.50000*Noise( p*1.0 );\n    n += 0.25000*Noise( p*2.0 );\n    n += 0.12500*Noise( p*4.0 );\n    n += 0.06250*Noise( p*8.0 );\n    n += 0.03125*Noise( p*16.0 );\n    return n/0.984375;\n}\n\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return -(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r);\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nfloat Box2(vec3 p, vec3 sc, float r, float an){\n    an = 80.0;\n    vec3 cs = vec3(cos(an*3.1415/180.0), sin(an*3.1415/180.0),cos(an*3.1415/180.0));\n    float c2 = length(cs);\n    \n    float a = length(max( abs(p)-(sc)  , 0.0)) - r;\n    float b = length(max(abs(p)-vec3(1.0, 2.0, 1.0), 0.));\n    return a;\n}\n\nfloat Capsule(vec3 p, vec3 sc, float r){\n    vec3 cs = vec3(cos(90.0*3.1415/180.0), sin(90.0*3.1415/180.0),cos(90.0*3.1415/180.0));  \n    float a = length(max( abs(p)- (sc*cs)  , 0.0)) - r;\n    return a;\n}\n\nfloat opRep( in vec3 p, in vec3 c, vec3 sc, float r )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return Box( q, sc, r );\n}\n\nfloat opRepS( in vec3 p, in vec3 c, vec4 pos )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return length(q) - pos.w;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat sdfSegment(in vec3 p, in vec3 a, in vec3 b, in float r){\n\n    \n    float h = min(1.0, max(0.0, dot(p-a, b-a) / dot(b-a, b-a)));\n   // a = a*exp(-4.*h);\n    //r =r-sin(9.0*3.1415*h)*0.2;\n    //r =r+exp(-4.*h);\n    //r = r -4.*h*(1.-h)-0.2*cos(10.*h+4.*iTime);\n    return length(p-a-(b-a)*h)-r;\n    \n\n}\n\nfloat opRepSeg( in vec3 p, in vec3 c,  in vec3 a, in vec3 b, in float r)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return sdfSegment(q, a, b, r);\n}\n\n\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nvec4 sdBezier2( vec3 p, vec3 va, vec3 vb, vec3 vc )\n{\n  vec3 w = normalize( cross( vc-vb, va-vb ) );\n  vec3 u = normalize( vc-vb );\n  vec3 v =          ( cross( w, u ) );\n  //----  \n  vec2 m = vec2( dot(va-vb,u), dot(va-vb,v) );\n  vec2 n = vec2( dot(vc-vb,u), dot(vc-vb,v) );\n  vec3 q = vec3( dot( p-vb,u), dot( p-vb,v), dot(p-vb,w) );\n  //----  \n  float mn = det(m,n);\n  float mq = det(m,q.xy);\n  float nq = det(n,q.xy);\n  //----  \n  vec2  g = (nq+mq+mn)*n + (nq+mq-mn)*m;\n  float f = (nq-mq+mn)*(nq-mq+mn) + 4.0*mq*nq;\n  vec2  z = 0.5*f*vec2(-g.y,g.x)/dot(g,g);\n//float t = clamp(0.5+0.5*(det(z,m+n)+mq+nq)/mn, 0.0 ,1.0 );\n  float t = clamp(0.5+0.5*(det(z-q.xy,m+n))/mn, 0.0 ,1.0 );\n  vec2 cp = m*(1.0-t)*(1.0-t) + n*t*t - q.xy;\n  //----  \n  float d2 = dot(cp,cp);\n  return vec4(sqrt(d2+q.z*q.z), t, q.z, -sign(f)*sqrt(d2) );\n}\n\n\nvec4 opRepBezier( in vec3 p, in vec3 c, vec3 va, vec3 vb, vec3 vc )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    vec3 qa = mod(va+0.5*c,c)-0.5*c;\n    vec3 qb = mod(vb+0.5*c,c)-0.5*c;\n    vec3 qc = mod(vc+0.5*c,c)-0.5*c;\n    return  sdBezier2(q, va, vb, vc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\nvec2 GetDist(vec3 p, vec2 uv){\n\n\n    vec4 s = vec4(5.0,3.0, 8.0,1.0);\n    vec4 s2 = vec4(3.0 ,3.0, 7.0, 1.0);\n    \n    \n    \n    \n    vec2 d=vec2(0.0);;\n    float pd = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    pd -= Noise3D(p) - fbm(p.xy)*0.6;\n       \n    \n    vec3 sp = (p)-s.xyz;\n    float sd = length(sp)-s.w;\n             \n    \n    vec3 sp2 = (p)-s2.xyz;\n    float sd2 = length(sp2)-s2.w;\n    \n    vec3 a = vec3(0.0, 0.0, 20.0);\n    vec3 b = vec3(0.0, 10.0, 20.0);\n   \n    float line = sdfSegment(p, a, b, 0.5);\n    line -= fbm(p.xy)*0.6;\n    \n    a = vec3(0.0, 10.0, 20.0);\n    b = vec3(0.0, 20.0, 20.0);\n   \n    float cross1d = sdfSegment(p, a, b, 0.4);\n    cross1d -= fbm(p.xy)*0.7;\n    \n    a = vec3(-2.0, 17.0, 20.0);\n    b = vec3(2.0, 17.0, 20.0);\n   \n    float cross2d = sdfSegment(p, a, b, 0.4);\n    cross2d -= fbm(p.xy)*0.7;\n    \n    float crossd = smin(cross1d, cross2d, 0.2);\n    \n    \n    a = p - vec3(20.0, 0.0, 20.0);\n    float linei = opRep(a, vec3(40.0, 0.0, 15.0), vec3(1.0, 10.0, 1.0), 0.5);\n    linei -= fbm(p.xy)*0.6;\n    \n    /*a = vec3(20.0, 10.0, 20.0);\n    float linei2 = opRep(p-a, vec3(40.0, 0.0, 15.0), vec3(1.0, 1.0, 20.0), 0.5);\n    linei2 -= fbm(p.xy)*0.6;*/\n   \n    ///----------------\n    \n    vec4 bz = sdBezier2(p, vec3(0.3, 10.55, 20.), \n                           vec3( 10., 5.7,20.), \n                           vec3( 15.,-1.0,20.));\n   \n    \n    //float bd = length(bz)-0.5;\n     float bd  = bz.x - 0.2+bz.y-0.6;\n     \n    bd -= FBM(p/2.0);\n    \n    //--------\n    bz = sdBezier2(p, vec3(-0.3, 10.55,20.), \n                           vec3( -10., 5.7,20.), \n                           vec3( -15.,-1.0,20.));\n   \n    \n    //float bd2 = length(bz)-0.5;\n     float bd2  = bz.x - 0.2+bz.y-0.6;\n     \n    bd2 -= FBM(p/2.0);\n    \n    \n         \n       \n      \n       d.x = pd;\n       d.y = 2.0;\n       \n       \n       if(line < d.x){\n          d.x = line;\n          d.y = 3.0;\n       }  \n       if(linei < d.x){\n          d.x = linei;\n          d.y = 3.0;\n       }  \n       /*if(linei2 < d.x){\n          d.x = linei2;\n          d.y = 3.0;\n       }  */\n       if(crossd < d.x){\n          d.x = crossd;\n          d.y = 3.0;\n       }  \n       if(bd < d.x){\n          d.x = bd;\n          d.y = 3.0;\n       } \n       if(bd2 < d.x){\n          d.x = bd2;\n          d.y = 3.0;\n       } \n       \n      \n   // \n    return d;\n    \n    \n}\n\nvec3 RayMarch2(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float max = -100000.0;\n    vec2 dd;\n    float depth = 0.0, end = 10.0;\n    for (int i = 0; i < 100; i++) {\n        t.yz = GetDist(eye + t.x * viewRayDirection, uv).xy;\n        \n                    \n        if (t.y < 0.01)break;\n                \n        t.x += t.y;\n        \n        if (t.x >= 1000.0)break;\n        \n    }\n    if (t.x >= 1000.0)t.x = -1.0;\n    \n    return t;\n\n\n}\n\n\n\n\nfloat GetLight(vec3 p, vec2 uv, vec3 lg, out vec3 n){\n    vec3 lightpos = lg;\n    lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    \n   // float dd = d.x;\n    n = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    n = normalize(n);\n    \n    float dif = clamp(dot(n, l), .0, 1.);\n   // float dif = clamp(dot(n, l), 0., 1.);\n   // vec3 dd = RayMarch2(p+n*.01, l, uv);\n    //if(dd.x < length(lightpos-p))dif *= 0.1;\n    return (dif) ;\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = GetDist( aopos , vec2(1.0)).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\nvec3 GetLightM(vec3 p, vec2 uv, vec3 lg, out vec3 n, vec3 ro, vec3 rd){\n    vec3 lightpos = lg;\n    lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = GetDist(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    n = d.x - vec3(\n        GetDist(p-e.xyy, uv).x,\n        GetDist(p-e.yxy, uv).x,\n        GetDist(p-e.yyx, uv).x);\n    \n    \n    n = normalize(n);\n   \n    float occ = calcAO(p, n);       \n    float dif = clamp(dot(n, l), .0, 1.);\n    dif += occ;\n \n    vec3 dd = RayMarch2(p+n*.01, l, uv);\n    p = ro + reflect(n, l) * dd.x;\n    \n    \n    \n    /*if(dd.x < length(lightpos)){\n           if(dd.z == 2.0)\n        { \n        \n            vec3 col = vec3(length(uv))*texture(iChannel2, vec2(noise(uv+iTime))).rgb;\n            \n        }\n    vec3(0.0, 1.0, 0.0)-p/2.0\n    }*/\n    \n     \n    if((dd.x < length(lightpos-p)) && (dd.x > 0.0)){\n        if(dd.z == -1.0){\n            vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n\n             n = abs(n);\n\n             n *= pow(n, vec3(20));\n             n /= n.x+n.y+n.z;\n\n             vec3 col = colYZ * n.x + colXZ * n.y + colXY*n.z;\n\n             uv = vec2(atan(p.x, p.z)/6.2832+.5, p.y/3.+0.5);\n             vec4 st = texture(iChannel0, uv);\n\n             col = vec3(dif) * mix(col, st.rgb, st.a);\n             return col;\n\n        }\n        else if(dd.z == 2.0)\n        {\n             /*vec3 col = texture(iChannel1, p.xz*0.5).rgb * n.y;\n             col *= vec3(dif);\n             return col;*/\n             return vec3(dif);\n        }\n        else if(dd.z == 3.0)\n        {\n             vec3 col = texture(iChannel1, p.xz*0.5).rgb * n.y;\n             col *= vec3(dif);\n             return col*0.6;\n        }\n        else if(dd.z == 4.0){\n             vec3 colXZ = texture(iChannel2, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel2, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel2, p.xy*0.1).rgb;\n             \n             \n             vec3 col = colYZ * n.x + colXZ * n.y + colXY*n.z;\n             \n             col -= vec3(.3);\n             return col;\n         }\n        else\n            return vec3(dif);\n            \n     }\n     else\n         return vec3(dif);\n\n}\nvec3 lightDir = normalize( vec3(0.5,0.6,0.) );\nconst mat2 m2 = mat2( 0.60, -0.80, 0.80, 0.60 );\n//ref: https://www.shadertoy.com/view/Msdfz8\nvec3 Cloud(vec3 bgCol,vec3 ro,vec3 rd,vec3 cloudCol,float spd)\n{\n    vec3 col = bgCol;\n    float t = iTime * 0.15* spd;\n    vec2 sc = ro.xz + rd.xz*((3.)*40000.0-ro.y)/rd.y;\n    vec2 p = 0.00002*sc;\n    float f = 0.0;\n  \tfloat s = 0.5;\n  \tfloat sum =0.;\n  \tfor(int i=0;i<5;i++){\n    \tp += t;t *=1.5;\n    \tf += s*textureLod( iChannel0, p/256.0, 0.0).x; p = m2*p*2.02;\n    \tsum+= s;s*=0.6;\n  \t}\n    float val = f/sum; \n    col = mix( col, cloudCol, smoothstep(0.5,0.8,val) );\n    return col;\n}\nvec3 RayMarchCloud(vec3 ro,vec3 rd){\n    vec3 col = vec3(0.0,0.0,0.0);  \n    float sundot = clamp(dot(rd,lightDir),0.0,1.0);\n    \n     // sky      \n    col = vec3(0.2,0.5,0.85)*1.1 - rd.y*rd.y*0.5;\n    col = mix( col, 0.85*vec3(0.7,0.75,0.85), pow( 1.0-max(rd.y,0.0), 4.0 ) );\n    // sun\n    col += 0.25*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n    col += 0.25*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n    col += 0.4*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );\n    // clouds\n    col = Cloud(col,ro,rd,vec3(1.0,0.95,1.0),1.);\n            // .\n    col = mix( col, 1.5*vec3(0.0,0.5,1.0), pow( 1.0-max(rd.y,0.0), 16.0 ) );\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    //iMouse.xy / iResolution.xy\n    vec3 lookat = vec3((iMouse.x/iResolution.x)*10.0, (iMouse.y/iResolution.y)*30.0, 30.0);//vec3(0.0, 1.5, 0.0);\n    vec3 ro = vec3(0, 7.0, 1.0);\n   \n    lookat -= vec3(0.0, 0.0, 20.); \n    ro -= vec3(0.0, 0.0, 20.);\n    lookat *= RotY(iTime);\n    ro *= RotY(iTime);\n    lookat += vec3(0.0, 0.0, 20.); \n    ro += vec3(0.0, 0.0, 20.);\n    \n    ro.y += mod(iTime, 35.0);\n    \n    vec3 lightpos = vec3(0.0, 20., -6.);\n    lightpos.z += mod(iTime, 20.0)-4.;\n    \n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n        \n     vec3 t;\n     float dO, dif, dif2, dif3, difT;\n     vec3 p;\n     \n  \n     \n     t = RayMarch2(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n    float alpha = 1.0;\n    vec3 n1, n2, n3, np;\n  \n   vec3 diff2 = GetLightM(p, uv, lightpos, n1, ro, rd);\n    \n    \n        \n     if(t.x > 0.0){\n         \n         \n         \n    \n     \n         \n         \n         if(t.z == 0.0){\n            // col = ph * vec3(0.0, 1.0, 0.0);\n         }\n         else if(t.z == 1.0){\n             col = diff2* vec3(1.0, 0.0, 0.0);\n         }\n         else if(t.z == 2.0){\n         \n                                    \n            // col = diff2 * vec3(1.0, 0.5, 0.5);\n            // col = 1.0-mix(diff2 * vec3(1.0, 0.5, 0.5), 1.0 - texture(iChannel0, p.xz).rgb*n1.y, 2.8);\n             //col = mix(col, texture(iChannel1, p.xz).rgb*n1.y, 0.8);\n             col = texture(iChannel1, p.xz*0.5).rgb * n1.y;\n             col *= diff2;\n             \n         }\n         else if(t.z == -1.0){\n             vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n             \n             \n             n1 = abs(n1);\n             \n             n1 *= pow(n1, vec3(20));\n             n1 /= n1.x+n1.y+n1.z;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z;\n             \n             uv = vec2(atan(p.x, p.z)/6.2832+.5, p.y/3.+0.5);\n             vec4 st = texture(iChannel0, uv);\n            \n             \n             col = diff2 * mix(col, st.rgb, st.a);\n         }\n         else if(t.z == 3.0){\n            \n             col = texture(iChannel1, p.xz*0.5).rgb * n1.y;\n             col *= diff2;\n         \n         }\n         else if(t.z == 4.0){\n             vec3 colXZ = texture(iChannel2, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel2, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel2, p.xy*0.1).rgb;\n             \n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z;\n             col += diff2 * vec3(1.0, 0.5, 0.5);\n         }\n         else if(t.z == 5.0){\n             vec3 colXZ = texture(iChannel0, p.xz*0.1).rgb;\n             vec3 colYZ = texture(iChannel0, p.yz*0.1).rgb;\n             vec3 colXY = texture(iChannel0, p.xy*0.1).rgb;\n             \n             col = colYZ * n1.x + colXZ * n1.y + colXY*n1.z ;\n            // col += ph * vec3(1.0, 0.5, 0.5);\n         \n             \n         }\n         \n       \n         \n         \n         \n     }\n     else\n     {\n         col = RayMarchCloud( ro, rd);\n     }\n    \n   \n    // Output to screen\n    fragColor = vec4((col),alpha);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}