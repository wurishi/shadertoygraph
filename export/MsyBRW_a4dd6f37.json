{"ver":"0.1","info":{"id":"MsyBRW","date":"1527732490","viewed":158,"name":"WeirdChaosEquations???","username":"JohnShadow","description":"Kind of a weird shader I made\nIt morphs over time and I was going to use it as a micro surface approx of some sort.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["wave","sin","cos","equation","morphing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159265359\nfloat c(float x, float r)\n{\n    float c = (sin(1.0-x*r)*cos(x*1.0-r));\n    return c;\n}\nfloat partOfWave(float x)\n{\n    return max(mod(x,1.0),0.5)-0.5;\n}\nfloat wave(float x)\n{\n    return partOfWave(x)+partOfWave(-x);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\t\n    float scale = min(max((wave(iTime/10.0)),0.1),0.4);\n    \n    uv = (uv - 0.5f) * 30.0*scale;\n    \n    float r1 = scale*pi;\n    float r2 = (scale+1.0)*pi;\n    \n\tfloat f1 = c(c(uv.x,r1-pi),r2+pi);\n\tfloat f2 = c(c(uv.x,pi-r1),pi-r2);\n\tfloat f3 = c(c(uv.x,r1+pi),r2-pi);\n    float f4 = (f1+f2+f3)/3.0;\n    vec3 color;\n    if((uv.y + 0.1*scale) > f4 && (uv.y - 0.1*scale) < f4 )\n    \tcolor = vec3(1,1,1) * 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    else\n        color = vec3(0,0,0);\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}