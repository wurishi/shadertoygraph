{"ver":"0.1","info":{"id":"XlBXRK","date":"1444776503","viewed":722,"name":"SmashEffect","username":"dila","description":"Textured, raytraced, planes fade out in time with the blocks motion to make it look like dust flying out.","likes":34,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"mat2 rot(float t)\n{\n \treturn mat2(cos(t), sin(t), -sin(t), cos(t));   \n}\n\n/* thanks to iq */\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nvec3 times()\n{\n    float gt = fract(iTime * 0.5) * 3.0;\n    float a = clamp(gt - 0.0, 0.0, 1.0);\n    float b = clamp(gt - 1.0, 0.0, 1.0);\n    float c = clamp(gt - 2.0, 0.0, 1.0);\n    return vec3(a, b, c);\n}\n\nfloat map(vec3 p)\n{\n    float height = 1.0;\n    float ground = p.y + height;\n    \n    vec3 pt = times();\n    float pound = 1.0 - pow(1.0-pt.y, 2.0) - pow(pt.z, 32.0);\n    pound *= 2.0;\n    \n\tfloat srot = smoothstep(0.0, 1.0, (pt.y+pt.z)*0.5);\n    mat2 mrot = rot(-0.3 + srot * 3.14);\n    \n    vec3 boxoff = vec3(0.0, pound, 0.0);\n    p.xz *= mrot;\n    float box = udRoundBox(p - boxoff, vec3(height)*0.5, height*0.25);\n \treturn min(ground, box);\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n \tfloat t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return t;\n}\n\nfloat rayplane(vec3 o, vec3 r, vec3 p, vec3 n)\n{\n\treturn dot(p - o, n) / dot(r, n);\n}\n\nvec3 _texture(vec3 p)\n{\n\tvec3 ta = texture(iChannel2, p.xz).xyz;\n    vec3 tb = texture(iChannel2, p.yz).xyz;\n    vec3 tc = texture(iChannel2, p.xy).xyz;\n    return (ta*ta + tb*tb + tc*tc) / 3.0;\n}\n\nvec3 normal(vec3 p)\n{\n\tvec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy) - map(p-o.xyy),\n                          map(p+o.yxy) - map(p-o.yxy),\n                          map(p+o.yyx) - map(p-o.yyx)));\n}\n\nvec3 smoke(vec3 o, vec3 r, vec3 f, float t)\n{\n    vec3 tms = times();\n    vec3 sm = vec3(0.0);\n    const int c = 32;\n    float fc = float(c);\n    for (int i = 0; i < c; ++i)\n    {\n        float j = float(i) / fc;\n        float bout = 1.0 + tms.x;\n        vec3 p = vec3(cos(j*6.28), 0.0, sin(j*6.28)) * bout;\n        p.y = -1.0;\n        float pt = rayplane(o, r, p, f);\n        if (pt < 0.0) continue;\n        if (pt > t)  continue;\n        vec3 pp = o + r * pt;\n        float cd = length(pp - p);\n        vec2 uv = (pp - p).xy * 0.1 + vec2(j,j) * 2.0;\n        vec3 tex = texture(iChannel1, uv).xyz;\n        tex *= tex;\n        tex = vec3(tex.x + tex.y + tex.z) / 3.0;\n        vec3 part = tex;\n        part /= 1.0 + cd * cd * 10.0 * tms.x;\n        part *= clamp(abs(t - pt), 0.0, 1.0);\n        part /= 1.0 + pt * pt;\n        part *= clamp(pt, 0.0, 1.0);\n        sm += part;\n    }\n    sm *= 1.0 - smoothstep(0.0, 1.0, tms.x);\n    return sm;\n}\n\nvec3 shade(vec3 o, vec3 r, vec3 f, vec3 w, float t)\n{\n    vec3 tuv = w;\n    if (tuv.y > -0.85)\n    {\n        vec3 pt = times();\n\t\tfloat srot = smoothstep(0.0, 1.0, (pt.y+pt.z)*0.5);\n    \tmat2 mrot = rot(-0.3 + srot * 3.14);\n        tuv.xz *= mrot;\n        float pound = 1.0 - pow(1.0-pt.y, 2.0) - pow(pt.z, 32.0);\n        pound *= 2.0;\n        tuv.y -= pound;\n    }\n    vec3 tex = _texture(tuv * 0.5);\n    vec3 sn = normal(w);\n\tvec3 ground = vec3(1.0, 1.0, 1.0);\n    vec3 sky = vec3(1.0, 0.9, 0.9);\n    vec3 slight = mix(ground, sky, 0.5+0.5*sn.y);\n    float aoc = 0.0;\n    const int aocs = 8;\n    for (int i = 0; i < aocs; ++i) {\n        vec3 p = w - r * float(i) * 0.2;\n        float d = map(p);\n        aoc += d * 0.5;\n    }\n    aoc /= float(aocs);\n    aoc = 1.0 - 1.0 / (1.0 + aoc);\n    float fog = 1.0 / (1.0 + t * t * 0.01);\n    vec3 smk = smoke(o, r, f, t);\n    float fakeocc = 0.5 + 0.5 * pow(1.0 - times().y, 4.0);\n    vec3 fc = slight * tex * aoc + smk * sky;\n    fc = mix(fc * fakeocc, sky, 1.0-fog);\n    return fc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 0.8 - dot(uv, uv) * 0.2));\n    vec3 o = vec3(0.0, 0.125, -1.5);\n    vec3 f = vec3(0.0, 0.0, 1.0);\n    \n    vec3 pt = times();\n    \n    float shake = pow(1.0 - pt.x, 4.0);\n    vec3 smack = texture(iChannel0, vec2(pt.x, 0.5)).xyz * 2.0 - 1.0;\n    smack *= shake;\n    \n    o.x += smack.x * shake * 0.25;\n    o.z += smack.y * shake * 0.1;\n    \n    mat2 smackrot = rot(0.3 + smack.z * shake * 0.1);\n    r.xy *= smackrot;\n    f.xy *= smackrot;\n    \n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    float fd = map(w);\n    \n    vec3 fc = shade(o, r, f, w, t);\n    \n\tfragColor = vec4(sqrt(fc), 1.0);\n}","name":"Image","description":"","type":"image"}]}