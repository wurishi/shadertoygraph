{"ver":"0.1","info":{"id":"ssKfzR","date":"1657586894","viewed":83,"name":"First 2D Raycaster","username":"killbyte","description":"My first shadertoy shader\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","raycaster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.141592653\n\nfloat fmod(float x,float y) {\n    return x - y * trunc(x/y);\n}\n\n// HSV to RGB conversion\nvec3 cycle_color(float hue)\n{\n    hue = fmod(hue,1.f);\n    hue = (hue*360.f)/60.f;\n    float chroma = 1.f;\n    float x = chroma * (1.f - abs((fmod(hue, 2.f)) - 1.f));\n    vec3 rgb = (hue <= 1.f) ? vec3(chroma, x,      0):\n               (hue <= 2.f) ? vec3(x,      chroma, 0.f):\n               (hue <= 3.f) ? vec3(0.f,    chroma, x):\n               (hue <= 4.f) ? vec3(0.f,    x,      chroma):\n               (hue <= 5.f) ? vec3(x,      0.f,    chroma):\n                              vec3(chroma, 0.f,    x);\n\n    return rgb;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    const float LIGHT_RADIUS = 0.9;\n    const float LIGHT_INTENSITY = 0.7;\n    const vec2 walls[] = vec2[](\n        vec2(0.5,0.2), vec2(0.5,0.7),\n        vec2(1.0,0.2), vec2(1.5,0.7)\n    );\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.y; //iResolution.xy;\n    \n    vec2 cam_pos = iMouse.xy / iResolution.y;\n    // Light intensity\n    float dist = LIGHT_INTENSITY * (1.f - length((cam_pos - uv)/LIGHT_RADIUS) );\n    // Rainbow light color\n    vec3 LIGHT_COLOR = cycle_color(iTime*0.4f+dist*0.6f);\n\n    // Colision detection\n    fragColor = vec4(LIGHT_COLOR*dist,1.0);\n\n    for(int i = 0 ; i < walls.length() >> 1 ; ++i) {\n        // Sight Line\n        vec2 sl[2] = vec2[2](uv, cam_pos);\n        vec2 w[2] = vec2[2](walls[2*i], walls[2*i+1]);\n        // Compute intersection\n        float q = (sl[0].x-sl[1].x)*(w[0].y-w[1].y) - (sl[0].y-sl[1].y)*(w[0].x-w[1].x);\n        float t = ((sl[0].x-w[0].x)*(w[0].y-w[1].y) - (sl[0].y-w[0].y)*(w[0].x-w[1].x)    ) / q;\n        float u = ((sl[0].x-w[0].x)*(sl[0].y-sl[1].y) - (sl[0].y-w[0].y)*(sl[0].x-sl[1].x)) / q;\n        vec2 inter = vec2(sl[0].x + t*(sl[1].x-sl[0].x), sl[0].y + t*(sl[1].y-sl[0].y));\n        // Check if intersection occurred\n        if((u >= 0. && u <= 1.) && (t >= 0. && t <= 1.)) {\n            //fragColor = draw_point(inter, uv);\n            fragColor = vec4(0.,0.,0.,1.);\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}