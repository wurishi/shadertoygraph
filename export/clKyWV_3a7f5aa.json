{"ver":"0.1","info":{"id":"clKyWV","date":"1700678810","viewed":53,"name":"failed random rectangle tiling","username":"jt","description":"Failed attempt at generating a random rectangle tiling but I find the resulting pattern interesting.\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["line","experiment","random","tiling","failed"],"hasliked":0,"parentid":"dlyyDG","parentname":"random line tiling"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/clKyWV failed random rectangle tiling, 2023 by jt\n// based on https://www.shadertoy.com/view/dlyyDG random line tiling\n\n// Failed attempt at generating a random rectangle tiling but I find the resulting pattern interesting.\n// (perhaps this could be used to create bitmaps with an old game look).\n\n// Click to show underlying bit noise.\n\n// tags: random, line, tiling, experiment, failed\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define SIZE 150\n//#define size (int((0.5-0.5*cos(iTime))*50.0 + 50.0))\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint triple32(int x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint lowbias32(int x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352d;\n    x ^= x >> 15;\n    x *= 0x846ca68b;\n    x ^= x >> 16;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n//#define HASH(u) lowbias32(u)\n\nbool bhash(ivec2 t)\n{\n    //int n = 2 + int(floor(iTime/2.0))%5;\n    int n = 6 - int(floor(iTime/2.0))%5; // more interesting start image\n    return (HASH((t.x + HASH(t.y))) & ((1<<n)-1)) != 0;\n}\n\nbool grid(ivec2 t)\n{\n    // safety\n    //if(any(lessThan(t, ivec2(0))) || any(greaterThan(t, ivec2(size))))\n    //    return (t.x&1)!=(t.y&1); // makes sure scan-line terminates eventually\n\n    return bhash(t);\n}\n\nint scan_line(bool flip, ivec2 t, ivec2 d)\n{\n    int i = 0;\n    while(grid(t + d * i) == flip)\n        i++;\n    return i;\n}\n\nint get_id(ivec2 tile)\n{\n    bool flip = grid(tile);\n    return\n        min\n        (\n            scan_line(flip, tile, ivec2(-1, 0)) + scan_line(flip, tile, ivec2(+1, 0)) + 1,\n            scan_line(flip, tile, ivec2( 0,-1)) + scan_line(flip, tile, ivec2( 0,+1)) + 1\n        );\n}\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = 0.5 + (I - R / 2.) / R.y;\n    vec3 c = vec3(0);\n    if(all(lessThan(abs(I - 0.5), vec2(0.5))))\n    {\n        ivec2 tile = ivec2(floor(I*float(SIZE)));\n        int id = get_id(tile);\n        c = hash31(float(id)*123.456);\n\n        if(iMouse.z > 0.0)\n            c = vec3(grid(tile)); // show bit-noise\n    }\n\n    o = vec4(c, 1);\n}\n","name":"Image","description":"","type":"image"}]}