{"ver":"0.1","info":{"id":"Dtj3RV","date":"1673546789","viewed":137,"name":"Antipod - MAGFest #06","username":"Flopine","description":"One of the piece I made for ThronoCrigger's set at MAGFest 2023! ","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["3d","prism","aberration","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 centered_uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 rgb = vec3(texture(iChannel0, (uv*.99+.01)-length(centered_uv*0.9)*0.007).r,\n                     texture(iChannel0, (uv*.99+.01)-length(centered_uv*0.95)*0.004).g,\n                     texture(iChannel0, (uv*.99+.01)+length(centered_uv*0.92)*0.002).b\n                 );\n    \n    fragColor = vec4(sqrt(rgb), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define crep(p,c,l) (p-=c*clamp(round(p/c),-l,l))\n#define rep(p,c) p=(mod(p,c)-c*.5)\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.07,fwidth(val-thre)))\n\n#define frt(sp,off) fract((iTime+off)*sp)\n\n\nfloat triprism (vec3 p, vec2 h)\n{\n  vec3 q = abs(p);\n  return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n}\n\nfloat cid;\nfloat column (vec3 p, float off)\n{\n    float thick=1.1;\n    cid = floor(p.z/thick);\n    rep(p.z,thick);\n    p.xy*=rot(frt(.3,cid*off)*TAU);\n    return triprism(p,vec2(3.,thick*.15));\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    p.y += sin(p.x*2.-frt(1., 0.)*TAU)*.5;\n    float per = 10.;  \n    float id = round(p.x/per);   \n    crep(p.x, per,3.);   \n    float d = column(p,(abs(id+.5)*0.05));\n    \n    return d;\n}\n\nvec3 gn (vec3 p, float e)\n{\n    vec2 eps = vec2(e,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n  \n \n    vec3 ro = vec3(uv*17.,-50.), rd=vec3(0.,0.,1.),p=ro,\n    col=vec3(0.),l=normalize(vec3(1.,2.,-3.));\n    \n    bool hit=false;\n    for (float i=0.; i<64.;i++)\n    {\n        float d = SDF(p);\n        if (d<0.01)\n        {hit = true; break;}\n        p += d*rd*.5;\n    }\n    \n    if (hit)\n    {\n        vec3 n1 = gn(p,1e-1);\n        vec3 n2 = gn(p,1e-3);\n        // thanks 0b5vr for this trick <3\n        float edgemask = clamp(smoothstep(0.02,0.8,length(n1-n2)),0.0,1.);\n    \n        col += edgemask;\n    }\n    \n  fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}