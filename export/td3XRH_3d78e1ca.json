{"ver":"0.1","info":{"id":"td3XRH","date":"1597260326","viewed":155,"name":"supernoice voronoise","username":"Teppich","description":"voronoi noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANIM 1\n\n#ifndef saturate\n#define saturate(v) clamp(v,0.,1.)\n//      clamp(v,0.,1.)\n#endif\n\nfloat hash( float n ){\n\treturn fract( sin(n)*54671.57391);\n}\nfloat rand1( vec2 p ){\n\treturn hash( p.x + p.y * 57.1235 );\n}\nvec2 rand2( vec2 p){\n \treturn vec2(rand1(p), rand1(vec2(rand1(p))));\n}\n\nvec3 hsv2rgb(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,saturate(abs(fract(c.x+K.xyz)*6.-K.w)-K.x),c.y);\n}\n\nvec4 voronoiDistance(vec2 uv){\n\tvec2 p = floor(uv);\n    vec2 f = fract(uv);\n    \n    vec2 closest;\n    vec2 min_dist = vec2(8.0);\n    \n    for(int y=-1; y<=1; y++)\n    for(int x=-1; x<=1; x++){\n     \tvec2 cell = vec2(x,y);\n        vec2 point = rand2(cell+p);\n        \n        #if ANIM\n        point = clamp(sin(iTime + point * 9.2831) * 0.5 + 0.5, 0.01, 0.99);\n        #endif\n        \n        vec2 delta = cell + point -f;\n        float d = length(delta);\n        \n        if(d < min_dist.x) {\n         \tmin_dist.x = d;\n            closest = delta;\n        }\n    }\n    \n    for(int y=-1; y<=1; y++)\n    for(int x=-1; x<=1; x++){\n     \tvec2 cell = vec2(x,y);\n        vec2 point = rand2(cell+p);\n        \n        #if ANIM\n        point = clamp(sin(iTime + point * 9.2831) * 0.5 + 0.5, 0.01, 0.99);\n        #endif\n        \n        vec2 delta = cell + point -f;\n        float d = dot(0.5 * (closest+delta), normalize(delta-closest));\n        min_dist.y = min(min_dist.y, d);\n    }\n    \n    return vec4(min_dist, p+closest+f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //unresponsible uv scaling\n    //uv += 0.5 * vec2(sin(iTime +uv.x), cos(iTime + uv.y));\n    \n    vec2 scale = vec2(8.0);\n    scale.x *= iResolution.x/iResolution.y;\n        \n    vec4 d = voronoiDistance(uv*scale);\n    \n    //vec3 col = hsv2rgb(vec3(rand1(floor(d.zw)), 0.5, 1.0));\n    vec3 col = hsv2rgb(vec3(rand1(floor(d.zw)), 0.5+0.25*sin(6.2831*d.x), 1.0));\n    \n    col *= step(0.05*abs(sin(iTime)), d.y);\n    col *= step(0.05, d.x);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}