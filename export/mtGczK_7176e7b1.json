{"ver":"0.1","info":{"id":"mtGczK","date":"1700410568","viewed":142,"name":"Star Nest and galaxy","username":"nayk","description":"stars,fractal,universe,galaxy","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["fractal","galaxy","stars","universe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* original https://www.shadertoy.com/view/ltc3WX https://www.shadertoy.com/view/MdXSzS*/\n#define iterations 21\n#define formuparam 0.530\n#define time cos(time*.2)\n#define volsteps 10\n#define stepsize 0.25\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.00\n\n#define brightness 0.0015\n#define darkmatter 0.7\n#define distfading 0.760\n#define saturation 0.800\n\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.50;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,cos(1.3)*1000.0);\n\t\n\tfloat a2=speed+.5;\n\tfloat a1=0.0;\nvec2 cPos =   fragCoord.xy / iResolution.xy-.5;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\t\n\t\n\t\n\t//from.x-=time;\n\t//mouse movement*time\n\tvec3 from=vec3(0.,0.,0.);\n\tfrom+=vec3((sin(121.15),.152,-2.));\n\t \n\t  dir.xy=rotate(uv,iTime/10.-length(uv)*0.1);\n        from.xy=rotate(-uv,-iTime/10.-length(uv)*0.1);\n       \n\tfloat t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + 1.17)) * 1.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n\n\tfloat v1, v2, v3;\n\tv1 = v2 = v3 = 0.0;\n\t\n\tfloat s = 0.0;\n\tfor (int i = 0; i < 90; i++)\n\t{\n\t\tvec3 p = s * vec3(uv, 0.0);\n\t\n        \n          p.xy+= cPos+(cPos/cLength)*cos(cLength*10.0-iTime*0.1) * 0.03;\n\t\tp += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\n\t\tfor (int i = 0; i < 8; i++)\tp = abs(p) / dot(p,p) - 0.659;\n\t\tv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\n\t\tv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\n\t\tv3 += length(p.xy*10.) * .0003;\n\t\ts  += .035;\n\t}\n\t\n\tfloat len = length(uv);\n\tv1 *= smoothstep(.2, .0, len);\n\tv2 *= smoothstep(.5, .1, len);\n\tv3 *= smoothstep(.9, .3, len);\n\t\n\tvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n\t\t\t\t\t(v1 + v3) * .3,\n\t\t\t\t\t v2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n\t//volumetric rendering\n\tfloat s2=.4,fade=.2;\n\tvec3 v=vec3(0.8);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s2*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam; // the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*tan(.001)); //dark matter\n\t\ta*=a*a*2.; // add contrast\n\t\tif (r>3) fade*=1.-dm; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s2,s2*s2,s2*s2*s2*s2)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts2+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation)*col; //color adjust\n    \n\tfragColor = vec4(v*.01,1.);\n}","name":"Image","description":"","type":"image"}]}