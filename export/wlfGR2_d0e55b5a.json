{"ver":"0.1","info":{"id":"wlfGR2","date":"1652528123","viewed":74,"name":"Smooth step animated circle","username":"boomji","description":"Animated circle shader using smoothstep function.\nLearn the basics of shaders","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Tutorial Link Shadertoy for absolute beginners\n// https://youtu.be/u5HAYVHsasc\n#define PI_2 6.2831 \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Shortcut ALT + ENTER to compile\n    // normalize the fragcoord in x and y.\n    // since fragCoord goes from 0 - 640 in x and 0 > 360 in y we need to divide it\n    vec2 uv1 = (fragCoord.xy  / iResolution.xy) ;\n    \n    // shift the coord to the center of the screen\n    uv1-=0.5;\n    \n    // we need to make our image square instead of it's current rectangular form\n    // multyply the uv by the pixel aspect ratio\n    uv1.x = uv1.x * ( iResolution.x / iResolution.y );\n    \n    // distance from center to all other pixels. visualizing this gives us radial gradient\n    float dist = length(uv1);\n    float radius = 0.3;\n    float col = 0.0; \n    \n    //Angle of all pixels. visualizing this gives us a sweeping gradient\n    float angle_degrees = atan(uv1.x,uv1.y);// angle in degrees \n    float angle_radians = (angle_degrees / PI_2) ; // PI_2 is defined as a constant for 6.28 radians = 360 degrees.\n    // dividing by PI_2 gives us a normalized range from 0 to 0.5 i.e only half the sweep. we need to go full sweep 0 - 1\n    float angle_final  = angle_radians + 0.5  ;// add 0.5 to get a range  from 0 - 1\n    \n    //Draw a circle with a hard cut\n    if(dist > radius)\n        col = 0.0 ;\n    else\n        col = 1.0;\n        \n    // Draw a circle based on smooth step. smoothstep(lower bound, upper bound, input)\n    col = smoothstep(radius, radius - 0.02,dist);\n    \n    // Animated circle\n    radius = abs( sin(iTime) ) * 0.3;// sin(iTime * radius)\n    col = smoothstep(radius, radius - 0.02,dist);\n    \n    //FINAL COLOR\n    fragColor = vec4(vec3(col),0); // fragCoord; (1.0,0.0,0.0,0.0)\n    fragColor = vec4(vec3(angle_final),0);\n\n}","name":"Image","description":"","type":"image"}]}