{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//#define SS\n//#define GRID\n\nconst float sqrt2 = 1.414213;\nconst float rads = 2. * 3.14159;\nconst float sinB = 3.14159 * 2.;\n\nvec2 m;\nvec2 s;\n\nfloat lineCount;\nfloat timeA;\nfloat timeB;\nfloat waveScale = 8.0;\n\nfloat circ(float d) {\n    return floor(sin(d * sinB * lineCount - timeA) + 1.);\n}\n\nfloat circMod(float d) {\n    return mod(d * lineCount - timeA, 1.);\n}\n\nconst vec4 K = vec4(1., 2. / 3., 1. / 3., 3.);\n\nvec3 hsv2rgb(vec3 c)\n{\n\t// from http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6. - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0., 1.), c.y);\n}\n\n\nfloat t;\nvec3 target;\n\nvec4 point(vec3 pos) {\n    float d = dot(target, pos);\n    \n    float circles = sin((d + s.y) * sinB - timeB) * 0.5 + 0.5;\n            \n    float w = pos.y + sin((d * d + s.x) * sinB * waveScale + timeB) / lineCount;\n    float waves = circ(w);\n    \n    #ifdef GRID\n    float lines = circ(d);\n    vec3 hsv = vec3(circles,waves + lines,waves - lines);\n    #else\n    vec3 hsv = vec3(circles,waves,waves);\n    #endif\n    return vec4(hsv2rgb(hsv),1.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    m = vec2(1., 1.) + iMouse.xy / iResolution.xy;\n    s = vec2(1., 1.) + texture(iChannel1, fragCoord.xy).xy * 0.2;\n     lineCount = m.y * m.y * 15.;\n     timeA =  m.x * m.x * 40. * iTime;\n     timeB = timeA * 0.005;\n     t = mod(timeB, rads);\n     target = vec3(cos(t), sin(t), 0);\n\n    // ss based on https://www.shadertoy.com/view/XslSW7\n\tvec3 p = vec3(fragCoord.xy / iResolution.x, 0.);    \n\t#ifdef SS\n    float delta = 1.0 / iResolution.x;\n    vec4 color = (point(p+delta*vec3(0.25,0.00,1.)) +\n\t\t\t      point(p+delta*vec3(0.75,0.25,1.)) +\n                  point(p+delta*vec3(0.00,0.50,1.)) +\n                  point(p+delta*vec3(0.50,0.75,1.))) / 4.0;\n    #else\n    vec4 color = point(p);\n    #endif\n    fragColor = color;\n}\n\n","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define TONE(f) sin(f * hz)\n#define BEAT(bpm) sin(bpm * bt)\n\nconst float B = 3.14159 * 2.;\nconst float BPM_DIV = B / 60.;\nconst float HZ_DIV = B ;\n\n\n\nvec2 mainSound( in int samp,float time)\n{    \n    float bt = time * BPM_DIV;\n\tfloat hz = time * HZ_DIV;\n    return vec2(TONE(BEAT(128.) * TONE(128.)));\n    //return vec2(floor(BEAT(128.)) * TONE(756.) * 2.);\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdBXDh","date":"1411263375","viewed":137,"name":"welcome mat","username":"wgoldie","description":"some simple color components, mouse to zoom and modify speed.\nuncomment SS to enable supersampling and GRID to change pattern.\nmusic should vibrate the pattern.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["landcape"],"hasliked":0,"parentid":"","parentname":""}}