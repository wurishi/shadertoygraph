{"ver":"0.1","info":{"id":"Mtt3D2","date":"1471872123","viewed":370,"name":"Ulam Spiral of prime numbers","username":"pixartist","description":"Ulam prime spiral.\nRed color indicates a high amount of prime check iterations\nControls:\nPan: Mouse drag\nZoom in: W\nZoom out: S\nReset zoom: R\nToggle animation: Space\n\n\nhttps://en.wikipedia.org/wiki/Ulam_spiral","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["spiral","numbers","square","prime","index","indices","ulam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define maxPrimeIter 5000.0\nfloat scale;\n\n\n\nvec4 readData(int x, int y)\n{\n    return texture(iChannel0, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\nfloat algo(float n)\n{\n    const int maxIter = 300;\n    float iter = 0.0;\n    for(int i = 0; i < maxIter; i++)\n    {\n        if(n == 1.0)\n            break;\n        if(mod(n,2.0) == 0.0)\n        {\n            n = floor(n/2.0);\n        }\n        else\n        {\n            n = 3.0*n+1.0;\n        }\n        iter++;\n    }\n    return iter;\n        \n}\nbool isPrime(float val, out float ic)\n{\n    val = floor(val);\n    if(val < 2.0)\n        return false;\n    if(mod(val, 2.0) == 0.0)\n        return false;\n    float lim = sqrt(val)+1.0;\n    for(float i = 3.0; i < maxPrimeIter; i+=2.0)\n    {\n        ic = i / maxPrimeIter;\n        if(i > lim)\n            return true;\n        if(mod(val, i) == 0.0)\n            return false;\n    }\n    ic = 0.0;\n    return false;\n}\nfloat area(float level)\n{\n    level = 2.0*level+1.0;\n    return level*level;\n}\nfloat getIndex(vec2 fragCoord, out float level, out float localIndex, out float localSize)\n{\n    \n    vec2 fc = floor((fragCoord - iResolution.xy * 0.5) / scale);\n    vec2 fca = abs(fc);\n    bool left = fc.x < 0.0;\n    bool bottom = fc.y < 0.0;\n    bool hor = fca.x > fca.y;\n    level = max(fca.x, fca.y);\n    float areax = area(level);\n    float prevA = area(level-1.0);\n    float index = 0.0;//area(level-1.0);\n    float sideLengthH = 2.0 * level + 1.0;\n    float sideLengthV = 2.0 * level - 1.0;\n    float u = areax - prevA;\n   \tif(hor && !left)\n    {\n        index += floor(sideLengthV * 0.5 + fc.y);\n    }\n    else if(!hor && !bottom)\n    {\n        index += sideLengthV + floor(sideLengthH * 0.5 - fc.x);\n    }\n    else if(hor && left)\n    {\n        index += sideLengthV + sideLengthH + floor(sideLengthV * 0.5 - fc.y);\n    }\n    else if(!hor && bottom)\n    {\n        index += sideLengthV * 2.0 + sideLengthH + floor(sideLengthH * 0.5 + fc.x);\n    }\n    localIndex = index;\n    localSize = u;\n    index += prevA+1.0;\n    return index;\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 b = readData(0,0).xy;\n\n    scale = readData(0,2).b;\n\n    float level, levelIndex, levelSize;\n    float index = getIndex(fragCoord - b * scale * iResolution.xy, level, levelIndex, levelSize);\n    if(level <= 0.0)\n        fragColor = vec4(1.0,0.0,1.0,1.0);\n    else\n    {\n        float c = 0.0;\n        float p = isPrime(index, c) ? 1.0 : 0.0;\n        float k = c * p;\n        fragColor = vec4(p, p - k, p - k,1.0);\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//This program is for controls / keyboard and mouse input\nconst float PI = 3.14159265359;\n//movement speed\nconst float speed = 1.0;\n\nint kA=65,kB=66,kC=67,kD=68,kE=69,kF=70,kG=71,kH=72,kI=73,kJ=74,kK=75,kL=76,kM=77,kN=78,kO=79,kP=80,kQ=81,kR=82,kS=83,kT=84,kU=85,kV=86,kW=87,kX=88,kY=89,kZ=90;\nint k0=48,k1=49,k2=50,k3=51,k4=52,k5=53,k6=54,k7=55,k8=56,k9=57;\nint kSpace=32,kLeft=37,kUp=38,kRight=39,kDown=40,kCtrl=17;\nfloat ReadKeyFloat(int key)\n{\n\tfloat keyVal = texture( iChannel0, vec2( (float(key)+.5)/256.0, .25 ) ).x;\n\treturn keyVal;\n}\nbool readKey(int key)\n{\n    return ReadKeyFloat(key) > 0.0;\n}\nvec4 readData(int x, int y)\n{\n    return texture(iChannel1, (vec2(x,y) + vec2(0.5)) / iResolution.xy);\n}\nbool checkPos(int x, int y, vec2 fc)\n{\n    return int(fc.x) == x && int(fc.y) == y;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 self = texture(iChannel1, uv);\n    self.a = 0.0;\n\tif(iFrame < 5)\n    {\n        if(checkPos(0,2,fragCoord))\n        {\n        \tself = vec4(1.0, 1.0,1.0, 1.0);\n        }\n    }\n\n    if(checkPos(0,0,fragCoord))\n    {\n        vec4 last = readData(0, 1);\n        float s = readData(0, 2).b;\n        if(iMouse.z > 0.0 && last.a > 0.0)\n        {\n            //if(self.a > 0.0)\n            {\n                float x = (iMouse.x / iResolution.x) - last.x;\n                float y = (iMouse.y / iResolution.y) - last.y;\n                self += vec4(x/s,y/s,0.0, 0.0);\n            }\n            self.a = 1.0;\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    else if(checkPos(0,1,fragCoord))\n    {\n        if(iMouse.z > 0.0 )\n        {\n            float x = (iMouse.x / iResolution.x);\n            float y = (iMouse.y / iResolution.y);\n            self = vec4(x,y,0.0, 1.0);\n        }\n        else\n        {\n            self.a = 0.0;\n        }\n    }   \n    else if(checkPos(0,2,fragCoord))\n    {\n        if(readKey(kSpace))\n        {\n            if(self.g <= 0.0)\n            {\n                self.r = 1.0 - self.r;\n                self.g = 1.0;\n            }\n        }\n        else\n        {\n            self.g = 0.0;\n        }\n        if(self.r > 0.0)\n        {\n            self.b = 1.0 + (0.5 + 0.5 * sin(iTime)) * 3.0;\n        }\n        else\n        {\n            if(readKey(kW))\n            {\n                self.b = self.b * 1.02;\n            }\n            if(readKey(kS))\n            {\n                self.b = max(1.0, self.b * 0.98 - 0.01);\n            }\n            if(readKey(kR))\n            {\n                self.b = 1.0;\n            }\n            \n        }\n    }   \n    fragColor = self;\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"vec2 fc;\nvec3 getC(int x, int y)\n{\n    return texture(iChannel0, (fc + vec2(x,y)) / iResolution.xy).rgb;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int r = 1;\n    const int r2 = r*r;\n    fc = fragCoord;\n    vec3 avg = vec3(0.0);\n    float k = 0.0;\n    for(int x = -r; x <= r; x++)\n    {\n        for(int y = -r; y <= r; y++)\n        {\n            if(x*x+y*y <= r2)\n            {\n                avg += getC(x,y);\n                k++;\n            }\n        }\n    }\n    avg /= k;\n    fragColor = vec4(vec3(smoothstep(0.04, 0.15, avg.r)),1.0);\n}","name":"Buf C","description":"","type":"buffer"}]}