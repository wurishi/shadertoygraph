{"ver":"0.1","info":{"id":"XtBfzy","date":"1516179930","viewed":250,"name":"Convolutive Rorschach","username":"Ultraviolet","description":"Mini experiment derived from my [url=https://www.shadertoy.com/view/MlBfDm]Line Integral Convolution[/url] entry.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["test","lic","rorschach"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415972\n\n\nvec2 speed(vec2 p)\n{\n    return texture(iChannel0, p).xy;\n}\n\nfloat noise(vec2 p)\n{\n    p = (p-vec2(.5))*vec2(1., iResolution.y/iResolution.x);\n\treturn step(.2, length(p)) + 1.- step(.1, length(p-vec2(0., .05)));\n}\n\n\n// from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x = min(uv.x, 1.-uv.x);\n    \n    vec2 p_p = uv;\n    vec2 p_m = uv;\n    \n    float val = 0., weight = 0.;\n    val = noise(uv);\n    weight = 1.;\n    \n    float dt = 0.01, t_max = 1.;\n    for(float t=dt; t<=t_max; t+=dt)\n    {\n        float cur_weight = (t_max - t) / t_max;\n        cur_weight = 1.;\n        \n        val += (noise(p_p) + noise(p_m))*cur_weight;\n        weight += 2.0 * cur_weight;\n        \n        p_p += dt * speed(p_p);\n        p_m -= dt * speed(p_m);\n    }\n    \n    val /= weight;\n    \n    val = smoothstep(0., 1., val);\n    \n    fragColor = vec4(val);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PERIOD\t1.\n#define EPSILON\t0.05\n\n#define SPEED_EV\t.5\n#define SPEED_AM\t(0.5+iMouse.y/iResolution.y)\n\n// from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n\nvec3 hash(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0*fract((p3.xxy + p3.yxx)*p3.zyx);\n\n}\n\n// from https://www.shadertoy.com/view/Xsl3Dl\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n\n\n\nvec2 speed(vec2 uv)\n{\n    float ratio = iResolution.y/iResolution.x;\n    uv = uv*10.*vec2(1., ratio);\n    return SPEED_AM*vec2(noise(vec3(uv, iTime*SPEED_EV)), noise(vec3(uv + vec2(12.10135, 1354.2435), iTime*SPEED_EV)));\n}\n\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n\tvec2 r  = iResolution.xy;\n\tvec2 uv = C.xy / r.xy;\n    \n    \n    O = vec4(speed(uv), 0., 0.);\n}\n\n","name":"Buf A","description":"","type":"buffer"}]}