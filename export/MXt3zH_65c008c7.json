{"ver":"0.1","info":{"id":"MXt3zH","date":"1716121718","viewed":74,"name":"Spinning segment rainbow circle","username":"diminddl","description":"A simple segmented circle.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Function to convert HSV to RGB\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0/3.0, 1.0/3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Start the UV coordinates in the center of the screen\n    uv -= 0.5;\n\n    // Correct the aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Make a circle\n    vec3 circle_color = vec3(0.0, 0.0, 0.0);\n    float outer_size = 0.3;\n    float inner_size = 0.25 + 0.05 * sin(iTime * 0.5);\n    float circle = length(uv);\n\n    if(circle < outer_size && circle > inner_size){\n        // Calculate angle\n        float angle = atan(uv.y, uv.x);\n\n        // Normalize angle to range [0, 1]\n        angle = (angle + 3.14159265359) / (2.0 * 3.14159265359);\n\n        // Number of segments\n        int segments = 36; // Adjust the number of segments here\n        float segmentSize = 1.0 / float(segments);\n        \n        // Gaps between segments\n        float gapSize = 1.0 / float(segments * 10); // Adjust the gap size here\n        float halfGapSize = gapSize * 0.5;\n\n        // Determine segment\n        float rotatedAngle = mod(angle + iTime * 0.1, 1.0);\n        int segment = int(rotatedAngle / segmentSize);\n\n        // Check if within the gap\n        float segmentAngle = mod(rotatedAngle, segmentSize);\n        \n        if(segmentAngle > halfGapSize && segmentAngle < (segmentSize - halfGapSize)){\n            // Generate color based on segment\n            float hue = float(segment) / float(segments);\n            // Convert HSV to RGB\n            vec3 rgb = hsv2rgb(vec3(hue, 1.0, 1.0));\n            circle_color = rgb;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(circle_color, 1.0);\n}","name":"Image","description":"","type":"image"}]}