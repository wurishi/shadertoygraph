{"ver":"0.1","info":{"id":"7dKcDV","date":"1655665422","viewed":107,"name":"Morphing the Burning Ship","username":"Mandelbrot837","description":"Here I found a way to morph the Burning Ship Fractal into its close relatives.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Palette\n\nstruct palette {\n    vec3 c0, c1, c2, c3, c4;\n};\n\npalette palette_white_red() {\n    palette p; \n    p.c0 = vec3(0.3,0,0.1)/255.;\n    p.c1 = vec3(202,202,200)/255.;\n    p.c2 = vec3(255,254,199)/255.;\n    p.c3 = vec3(182,132,107)/255.;\n    p.c4 = vec3(110,73,86)/255.;\n    return p;    \n}\n\n    \npalette palette_gray() {\n    palette p; \n    p.c0 = vec3(0,0,0)/255.;\n    p.c1 = vec3(127,127,127)/255.;\n    p.c2 = vec3(255,255,255)/255.;\n    p.c3 = vec3(192,192,255)/255.;\n    p.c4 = vec3(4,5,33)/255.;\n    return p;    \n}\n    \npalette palette_blue_pink() {\n    palette p; \n    p.c0 = vec3(1,0,2)/255.;\n    p.c1 = vec3(50,14,220)/255.;\n    p.c2 = vec3(201,29,205)/255.;\n    p.c3 = vec3(245,226,250)/255.;\n    p.c4 = vec3(57,50,67)/255.;\n    return p;    \n}\n\npalette palette_green_yellow() {\n    palette p; \n    p.c0 = vec3(0,0,0)/255.;\n    p.c1 = vec3(23,239,12)/255.;\n    p.c2 = vec3(237,243,7)/255.;\n    p.c3 = vec3(255,255,255)/255.;\n    p.c4 = vec3(24,37,36)/255.;\n    return p;    \n}\n\npalette palette_electricity() {\n    palette p;\n    p.c0 = vec3(0,0,0)/255.;\n    p.c1 = vec3(0,140,140)/255.;\n    p.c2 = vec3(16,255,266)/255.;\n    p.c3 = vec3(255,255,255)/255.;\n    p.c4 = vec3(0,0,0)/255.;\n    return p;\n}\n\n// Random\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat randSeed = 0.;\nvec2 nextRand2() {\n    vec2 v = vec2( randSeed++, randSeed++ );\n\treturn vec2( random( v+0.34 ), random( v+0.75 ) );    \n}\n\n// Mapping\n\nvec3 cmap( float t, palette p ) {\n    vec3 col = vec3(0);\n    col = mix( p.c0,  p.c1, smoothstep(0. , .2, t));\n    col = mix( col, p.c2, smoothstep(.2, .4 , t));\n    col = mix( col, p.c3, smoothstep(.4 , .6, t));\n    col = mix( col, p.c4, smoothstep(.6,  .8, t));\n    col = mix( col, p.c0, smoothstep(.8, 1.,  t));\n    col = sqrt(sqrt(col));\n    return col;\n}\n\n#define MAX_ITER 1024.\n#define THRESHOLD 64.\n\n// The morph speed controls how fast the Burning Ship changes to the\n// Celtic Fractal and back.  The value is negative by default to simulate\n// the antennae splitting.  Making the value positive will make the antenna\n// on the right disappear.\n\n// The shader cycles through the: \n\n// Burning Ship Fractal, \n// Celtic Fractal, \n// Burning Ship Fractal,\n// Mandelbar Celtic Fractal.\n\n#define MORPH_SPEED 0.1\n\nfloat bship(vec2 uv, float time) {\n    float angle = time * MORPH_SPEED;\n    vec2 zmul = vec2(cos(angle),sin(angle));\n    \n    // z = ( |Re(z)| + i|Im(z)| )^2\n    \n\tvec2 c = 4.1*(uv - vec2(.2,0)) - vec2(-1,0.333); \n    vec2 z = vec2(0); \n    float i = 0.;\n    \n    for(; ++i <= MAX_ITER ;) {\n        z = abs(z);\n        z = mat2(z, -z.y, z.x) * z + c;\n        \n        z = vec2((z.x * zmul.x) - (z.y * zmul.y),\n                 (z.x * zmul.y) + (z.y * zmul.x));\n    \tif( dot(z,z) > THRESHOLD ) break;\n\t}\n  \n    float l2 = log(2.);\n    return i - log(log(dot(z,z))/l2)/l2;\t\t    \n}\n\n// Main\n\n#define SAMPLES 9.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 R = iResolution.xy;\n        \n    palette pal = palette_electricity();\n    \n    vec3 col = vec3(0);\n\n    for(float i=0.; i < SAMPLES; i++) {\n        vec2 p = 0.5*(2.*fragCoord-R+nextRand2())/R.y ;\n        p.y = -p.y;\n        float orbit = bship(p, iTime) / MAX_ITER;\n    \tcol += cmap( orbit   , pal ); \n    }\n    \n    col /= SAMPLES;\n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}