{"ver":"0.1","info":{"id":"XlGXWR","date":"1483715132","viewed":270,"name":"attempt at fast clouds","username":"public_int_i","description":"trying to get volumetric clouds on gearvr, good ol single pass","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["clouds","fast","attempt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ethan Alexander Shulman 2017\n\n\n#define pi 3.14\n#define lightDirection normalize(vec3(1.,1.,0.))\n#define ambientColor skyColor*.2+vec4(1.)\n#define diffuseColor vec4(.8)\n#define skyColor vec4(0.)\n#define sunColor vec4(1.,.84,.94,1.)*1.35\n#define cloudiness 0.3\n#define cloudSize vec2(1.,1.)\n#define cloudRoughness 0.2\n#define cloudOpacity 1.\n#define planetBend .1\n\n//2d point rotation\nvec2 rot(in vec2 p, in float a) {\n    return p*mat2(sin(a),cos(a),-cos(a),sin(a));\n}\n//3d point rotation on xy then xz axes\nvec3 rot(in vec3 ip, in vec2 a) {\n    vec3 p = ip;\n    p.yz = rot(p.yz,a.y);\n    p.xz = rot(p.xz,a.x);\n    return p;\n}\n\n//random float 0-1 from seed a\nfloat hash(float a) {\n    return fract(fract(a*24384.2973)*512.34593+a*128.739623);\n}\n//random float 0-1 from seed p\nfloat hash3(in vec3 p) {\n    return fract(fract(p.x)*128.234+fract(p.y)*124.234+fract(fract(p.z)*128.234)+\n                 fract(p.x*128.234)*18.234+fract(p.y*128.234)*18.234+fract(fract(p.z*128.234)*18.234));\n}\n\n//cloud distance function, rough and not an accurate distance\nfloat df(vec3 ip, float i) {\n    vec3 sip = ip;\n    ip.y += cos(iTime*.02)*512.;//slide through y axis to simulate evaporation, thanks to Max M on Twitter for the suggestion\n\tip.xz /= cloudSize;\n    float ldst = abs(sip.y)-(6.+sin(cos(ip.x/24.234)+ip.z/131.5435+\n                                   cos(ip.y/33.3958)+ip.x/191.9257+\n                                   cos(ip.z/36.3834)+ip.y/135.3245)*6.*(1.-cloudiness))+\n        \t\t\t\t\tmax(0.,.5-cloudiness)*32.;\n    \n    ldst += (.5-pow(texture(iChannel0,ip.xz/512.).x,2.2))*6.;\n      \n    return max(.2, ldst);\n    /*\n\n    \n    ldst += (cos((ip.x/i)/i+cos((ip.x+ldst*4.)/i*cloudRoughness+(ip.y*.39)/i)*4.0192854)*\n             cos((ip.y/i)/i+cos(.8+(ip.y+ldst*4.)/i*cloudRoughness+(ip.z*.37)/i)*4.0817395)*\n             cos((ip.z/i)/i+cos(1.6+(ip.z+ldst*4.)/i*cloudRoughness+(ip.x*.41)/i)*4.0243927))*i+min(3.,length(p.xz)*.05);\n    \n    return max(.2, ldst);*/\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //setup ray from pixel coordinate, camera rotation and camera origin\n\tvec3 rd = normalize(vec3( (fragCoord*2.-iResolution.xy)/iResolution.x, 1. )),\n \t\t rp = vec3(0.,cos(iTime*.12945)*100.-80.,iTime*20.);\n\n\tvec2 cameraRotation = vec2(pi/2.+cos(iTime*.0963)*2., pi/2.);\n    if (iMouse.w > 0.) cameraRotation = pi-vec2(iMouse.x/iResolution.x*pi*2., iMouse.y/iResolution.y*pi);\n\trd = rot(rd,cameraRotation);\n    \n    //bend view plane\n    rd.y += clamp(rd.y+planetBend,0.,1.);//*clamp(-(rp.y/10.-1.),0.,1.);\n    rd = normalize(rd);\n\n    //rough transparent object ray marching with 4 lod's for lighting\n\t//only 1 lod is rendered each step and lod's are switched each step for speed\n    vec2 c = vec2(0.);\n    float s = max(0.,abs(rp.y)-3.)/abs(rd.y),//ray-traced to start at cloud-plane\n          im = 2.;\n    for (int i = 0; i < 6; i++) {\n        vec3 pd = rp+rd*s;\n        \n        float ie = pow(im = mod(im,4.)+1., 2.),\n              od = df(pd, ie);\n        c += vec2( (df(pd+lightDirection*(ie*.33), ie)-od)/(ie*.33),\n                    .02)*pow(max(0.01,(ie*.4-od))/(ie*.4),1.);\n        \n        s += od;\n    }\n    \n    fragColor = mix(skyColor,ambientColor+diffuseColor*c.x,c.y*cloudOpacity);\n}","name":"Image","description":"","type":"image"}]}