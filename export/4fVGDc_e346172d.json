{"ver":"0.1","info":{"id":"4fVGDc","date":"1713368507","viewed":31,"name":"andreiprac2","username":"Fexis","description":"There is my shader for prac2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float belongs(vec2 v1, vec2 v2, vec2 v3)\n{\n    return (v1.x - v3.x) * (v2.y - v3.y) - (v2.x - v3.x) * (v1.y - v3.y);\n}\n\n\nvec3 draw_circle(vec3 color, in vec2 uv, in vec2 fragCoord)\n{\n     float radius = 0.1;\n     float df = abs(cos(iTime)) / 2.0;\n     vec2 center = vec2(0.5 + df, 0.5 - df);\n     if((uv.x - center.x) * (uv.x - center.x) + (uv.y - center.y) * (uv.y - center.y) \n     <= radius * radius)\n     {\n     color = vec3(center.x , 0.5,  1.0);\n     if(uv.x >= 0.45 + df && uv.x < 0.47 + df || \n     uv.x >= 0.52 + df && uv.x < 0.54 + df ||\n     uv.y >= 0.52 - df && uv.y < 0.54 - df ||\n     uv.y >= 0.45 - df && uv.y < 0.47 - df)\n         color = vec3(1.0, 0.0, 0.0);\n     }\n     return color;\n}\n\nvec3 draw_triangle(vec3 color, in vec2 uv, in vec2 fragCoord)\n{\n    float df = abs(sin(iTime)) / 5.0;\n    vec2 left_corner = vec2(0.2 + df, 0.2 + df) / 2.5;\n    vec2 right_corner = vec2(0.2 + df, 0.4 + df) / 2.5;\n    vec2 up_corner = vec2(0.7 + df, 0.3 + df) / 2.5;\n    float c1 = belongs(uv, left_corner, right_corner);\n    float c2 = belongs(uv, right_corner, up_corner);\n    float c3 = belongs(uv, up_corner, left_corner);\n    if((c1 < 0.0 && c2 < 0.0 && c3 < 0.0))\n        color = vec3(1.0, 0.0, 0.0);\n    return color;\n}\n\nvec3 draw_square(vec3 color, in vec2 uv, in vec2 fragCoord)\n{\n    vec2 left_corner = vec2(0.5, 0.5);\n    vec2 right_corner = vec2(0.5, 0.8);\n    vec2 up_corner = vec2(0.8, 0.8);\n    vec2 bottom_corner = vec2(0.8, 0.5);\n    float c1 = belongs(uv, left_corner, right_corner);\n    float c2 = belongs(uv, right_corner, up_corner);\n    float c3 = belongs(uv, up_corner, bottom_corner);\n    float c4 = belongs(uv, bottom_corner, left_corner);\n    if((c1 < 0.0 && c2 < 0.0 && c3 < 0.0) && c4 < 0.0)\n        color = vec3(1.0, 0.0, 1.0);\n    return color;\n}\n\n\nvec3 draw_polygon(vec3 color, in vec2 uv, in vec2 fragCoord)\n{\n    float df = sin(iTime) / 6.;\n    vec2 v1 = vec2(0.5 + df, 0.5 + df) / 2.5;\n    vec2 v2 = vec2(0.65 + df, 0.7 + df) / 2.5;\n    vec2 v3 = vec2(0.73 + df, 0.75 + df) / 2.5;\n    vec2 v4  = vec2(0.9 + df, 0.6 + df) / 2.5;\n    vec2 v5  = vec2(0.7 + df, 0.45 + df) / 2.5;\n    vec2 v6 = vec2(0.5 + df, 0.2 + df) / 2.5;\n    vec2 v7 = vec2(0.3 + df, 0.2 + df) / 2.5;\n    float c1 = belongs(uv, v1, v2);\n    float c2 = belongs(uv, v2, v3);\n    float c3 = belongs(uv, v3, v4);\n    float c4 = belongs(uv, v4, v5);\n    float c5 = belongs(uv, v5, v6);\n    float c6 = belongs(uv, v6, v7);\n    float c7 = belongs(uv, v7, v1);\n    if((c1 < 0.0 && c2 < 0.0 && c3 < 0.0) && c4 < 0.0 && c5 < 0. && c6 < 0. && c7 <0.0)\n        color = vec3(0.5, 0.3, 0.8);\n    return color;\n}\n\n\nvec3 draw_heart(in vec2 v, vec3 Color)\n{\n float dx = abs(cos(iTime) / 5.) / 3.;\n float x = v.x;\n float y = v.y - 0.;\n float square_x = x * x;\n float square_y = y * y;\n float cube_y = square_y * y;\n float m = square_x + square_y - 0.1;\n float heart = (m + dx) * (m + dx) * (m + dx) - cube_y * square_x ;\n vec3 color = Color;\n color = mix(vec3(1, 0, 1. * (abs(sin(iTime)) / 1.3)), \n color, step(0.0, heart));\n if((m + dx) * (m + dx) * (m + dx) - cube_y * square_x <= 0. && (\n v.x * v.x + v.y * v.y <= 0.002 - dx / 40. ||\n (v.x + 0.14) * (v.x + 0.14) + v.y * v.y <= 0.002 - dx /40. ||\n (v.x + 0.14) * (v.x + 0.14) + (v.y - 0.14) * (v.y - 0.14) <= 0.002 -dx /40.\n || (v.x) * (v.x) + (v.y - 0.14) * (v.y - 0.14) <= 0.002 - dx /40.) ||\n (v.x - 0.14) * (v.x - 0.14) + (v.y - 0.14) * (v.y - 0.14) <= 0.002 -dx /40.\n || (v.x - 0.14) * (v.x - 0.14) + (v.y) * (v.y) <= 0.002 -dx /40.)\n     color = vec3(1.0, 1.0, 0.0);\n return color;\n \n} \n\n\nfloat paral(vec3 p, vec3 s) {\n\treturn length(max(abs(p)-s, 0.));\n}\n\n\nfloat GetDist1(vec3 p) {\n\tvec4 s = vec4(sin(iTime), sin(iTime), 5, 0.9);\n    float sd =  length(p-s.xyz)-s.w;\n    return sd;\n}\n\nfloat GetDist2(vec3 p) {\n    float df = 3.1 * abs(sin(iTime) / 1.3) + 0.2;\n    float bd = paral(p-vec3(df, 0.5, 5.5), vec3(1.0, 0.50, 1.2));\n    return bd;\n}\n\n\nfloat RayMarch1(vec3 cam, vec3 light_dir) {\n\tfloat dist=0.0;\n    \n    for(int i=0; i<100 && dist < 100.; i++) {\n    \tvec3 p = cam + light_dir*dist;\n        float cur_dist = GetDist1(p);\n        dist += cur_dist;\n    }\n    \n    return dist;\n}\n\nfloat RayMarch2(vec3 cam, vec3 light_dir) {\n\tfloat dist=0.0;\n    \n    for(int i=0; i<100 && dist < 100.; i++) {\n    \tvec3 p = cam + light_dir*dist;\n        float cur_dist = GetDist2(p);\n        dist += cur_dist;\n    }\n    \n    return dist;\n}\n\nvoid mainImage( out vec4 FragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 cam = vec3(0, 0, 0);\n    float df = abs(cos(iTime)) / 8.;\n    vec3 light_dir = normalize(vec3(uv.x, uv.y, 1));\n\n    float dist1 = RayMarch1(cam, light_dir);\n    float dist2 = RayMarch2(cam, light_dir);\n    \n    dist1 /= 12.;\n    dist2 /= 12.;\n    \n    col = vec3(0.8, dist1 + 0.1, dist1);\n    FragColor = vec4(col,1.0);\n    \n    col = vec3(0.3, min(dist2, col.y), min(dist2, col.z));\n    FragColor = vec4(col,1.0);\n    \n    uv = fragCoord/iResolution.xy;\n    col = draw_triangle(col, uv, fragCoord);\n    FragColor = vec4(col, 1.0);\n    \n    uv = (fragCoord) /iResolution.y;\n    col = draw_circle(col, uv, fragCoord);\n    FragColor = vec4(col, 1.0);\n    col = draw_polygon(col, uv, fragCoord);\n    FragColor = vec4(col, 1.0);\n    \n    uv = 2. * fragCoord/iResolution.xy;\n    uv -= 0.51;\n    uv.x -= 0.25;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.y += 0.2;\n    col = draw_heart(uv, col);\n    FragColor = vec4(col, 1.0);\n   \n}","name":"Image","description":"","type":"image"}]}