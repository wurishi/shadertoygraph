{"ver":"0.1","info":{"id":"McGyRw","date":"1731613221","viewed":48,"name":"Torus 3 - Rotation set 1 flows","username":"Fred_The_Red","description":"The shape converges to the rotation set of the flow (up to dividing by time)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dynamics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Torus 3 - Rotation set 2 flows\" by Fred_The_Red. https://shadertoy.com/view/Xf3yRj\n// 2024-11-14 19:39:00\n\n#define scale 5.\n#define rescale false\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale_;\n    vec2 uv;\n    if(rescale){scale_ = 1.5;}\n    else{scale_ = scale;}\n    \n    uv = fragCoord/iResolution.xy*2. -1.;\n\n    uv = vec2(scale_, scale_)*uv;\n\n    //if(rescale){uv = vec2(0.5*SPEED*iTime/float(nb_flows))*uv;}\n\n    // Time varying pixel color\n    if(rescale){uv = (floor(iTime*SPEED/float(nb_flows))+1.)*uv;}\n    vec2 newPos = f(uv, iTime);\n    fragColor = initialImage(newPos);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415\n#define nb_flows 1\n#define SPEED 0.5\n#define white vec3(1., 1., 1.)\n\nfloat distance1(float x)\n{\nreturn (x < 0.5 ? x : (1.-x));\n}\n\nfloat distance2(vec2 pos)\n{\nreturn distance1(pos.x)*distance1(pos.x) + distance1(pos.y)*distance1(pos.y);\n}\n\nvec2 flow1(vec2 pos,float t)\n{\n    vec2 flow;\n    flow = vec2(pos.x, pos.y + t*sin(2.*PI*pos.x));\n    // Rotation :\n    //flow = vec2(pos.x+t, pos.y+0.9*t);\n    // Rotation avec point d'arrÃªt : NON\n    //float alpha = 0.41421356237;\n    //float d = distance2(pos);\n    //flow = vec2(pos.x+d*t, pos.y+d*alpha*t);    \n    return flow;\n}\n\nvec2 flow2(vec2 pos,float t)\n{\n    return vec2(pos.x + t*sin(2.*PI*pos.y), pos.y);\n}\n\n// Time t isotopy\nvec2 f(vec2 pos, float t)\n{\nt = t * SPEED;\nif(nb_flows == 1){pos = flow1(pos, -t);}\nelse{\n    float n = floor(t);\n    float tt = t - n;\n    bool even = (mod(n, 2.) == 0.);\n    // Last flow\n    if(even){pos=flow1(pos, -tt);}else{pos = flow2(pos, -tt);};\n    \n    // Iterations\n    while(n>0.)\n        {\n        if(even){pos = flow2(pos, -1.);}\n        else{pos = flow1(pos, -1.);}\n        even = !even;\n        n -= 1.;\n        };\n    }\n    return pos;\n}\n\n\n// Matrice de rotation autour de l'axe Y\nmat3 rotationY(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        c, 0.0, -s,\n        0.0, 1.0, 0.0,\n        s, 0.0, c\n    );\n}\n\n// Matrice de rotation autour de l'axe X\nmat3 rotationX(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, c, -s,\n        0.0, s, c\n    );\n}\n\n\n\nvec3 sdfRectangle(vec2 uv, float width, float height, vec2 center) {\n    float x = uv.x - center.x;\n    float y = uv.y - center.y;\n    float d = max(abs(x)-width, abs(y)-height);\n    \n    return d > 0. ? vec3(0.) : white;\n}\n\nvec3 sdfSquare(vec2 uv, float size, vec2 center) {return sdfRectangle(uv, size, size, center);}\n\n// One black square\nvec4 initialImage1(vec2 pos)\n{\nvec4 square1 = vec4(sdfSquare(pos, 0.5, vec2(0., 0.)), 1.);\nreturn square1;\n}\n\n// Chessboard\n#define width 10.\nvec4 initialImage1b(vec2 pos)\n{\nbool test1 = (mod(pos.x*width, 1.)<=0.5) && (mod(pos.y*width, 1.)<=0.5); \nbool test2 = (mod(pos.x*width, 1.)>=0.5) && (mod(pos.y*width, 1.)>=0.5); \nif(test1 || test2){return vec4(1.,0.,0., 0.);}\nelse{return vec4(0.);}\n}\n\n\n// Horizontal curve\nvec4 horizontalCurve(vec2 pos)\n{\nvec4 curve = vec4(sdfRectangle(pos, 1., 0.1, vec2(0.5, 0.75)), 0.);\nreturn curve;\n}\n\n\n// Vertical curve\nvec4 verticalCurve(vec2 pos)\n{\nvec4 curve = vec4(sdfRectangle(pos, 0.002, 1., vec2(0.25, 0.)), 0.);\nreturn curve;\n}\n\n// Initial image\nvec4 initialImage(vec2 pos)\n{\nvec4 image = initialImage1(pos);\n//vec4 image = horizontalCurve(pos);\n//return (image.x <= 0.01)&&(image.y <= 0.01)&&(image.z <= 0.01) ? vec4(0.3) : image;\nreturn image;\n}\n\n","name":"Common","description":"","type":"common"}]}