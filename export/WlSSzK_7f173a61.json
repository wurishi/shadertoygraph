{"ver":"0.1","info":{"id":"WlSSzK","date":"1566374681","viewed":4045,"name":"Atmospheric Scattering Fog","username":"bearworks","description":"Atmospheric Scattering Sky and Foggy Scene Combined\nBased on Photorealistic Real-Time Outdoor Light Scattering by Hoffmann and Preetham\nhttps://www.shadertoy.com/view/WtBXWw\nhttps://www.shadertoy.com/view/MdX3Rr\n","likes":79,"published":1,"flags":0,"usePreview":1,"tags":["sky","fog","scattering","atmosphere","rayleigh","mie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Atmospheric Scattering From Rendering out-door light scattering in real time.\n//https://www.shadertoy.com/view/WtBXWw\n//By Naty Hoffmann and Arcot J. Preetham.\n//http://renderwonk.com/publications/gdm-2002/GDM_August_2002.pdf\n//Combined with the Atmospheric Scattering Foggy Scene \"Elevated\"\n//https://www.shadertoy.com/view/MdX3Rr\n\n#define Gamma 1.4\n#define fov tan(radians(60.0))\n#define autoCamera 1\n\n#define DetectSunMode 1 //This would be slower,but looks much better \n\n#define Rayleigh 1.\n#define Mie 1.\n\n#define RayleighAtt 1.\n#define MieAtt 1.2\n#define DistanceAtt 1e-5\n\n#define skyInt 1.4\n\n//float g = -0.84;\n//float g = -0.97;\nfloat g = -0.93;\nfloat gS = -0.43;\n\n#if 1\nvec3 _betaR = vec3(1.95e-2, 1.1e-1, 2.94e-1); \nvec3 _betaM = vec3(4e-2, 4e-2, 4e-2);\n#else\nvec3 _betaR = vec3(6.95e-2, 1.18e-1, 2.44e-1); \nvec3 _betaM = vec3(4e-2, 4e-2, 4e-2);\n#endif\n\nvec3 Ds = normalize(vec3(0., 0., -1.)); //sun \n\n#define AA 1   // make this 2 or even 3 if you have a really powerful GPU\n\n#define SC (250.0)\n\n// value noise, and its analytical derivatives\nvec3 noised( in vec2 x )\n{\n    vec2 f = fract(x);\n    vec2 u = f*f*(3.0-2.0*f);\n\n#if 1\n    // texel fetch version\n    ivec2 p = ivec2(floor(x));\n    float a = texelFetch( iChannel0, (p+ivec2(0,0))&255, 0 ).x;\n\tfloat b = texelFetch( iChannel0, (p+ivec2(1,0))&255, 0 ).x;\n\tfloat c = texelFetch( iChannel0, (p+ivec2(0,1))&255, 0 ).x;\n\tfloat d = texelFetch( iChannel0, (p+ivec2(1,1))&255, 0 ).x;\n#else    \n    // texture version    \n    vec2 p = floor(x);\n\tfloat a = textureLod( iChannel0, (p+vec2(0.5,0.5))/256.0, 0.0 ).x;\n\tfloat b = textureLod( iChannel0, (p+vec2(1.5,0.5))/256.0, 0.0 ).x;\n\tfloat c = textureLod( iChannel0, (p+vec2(0.5,1.5))/256.0, 0.0 ).x;\n\tfloat d = textureLod( iChannel0, (p+vec2(1.5,1.5))/256.0, 0.0 ).x;\n#endif\n    \n\treturn vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n\t\t\t\t6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\n\nconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\n\nfloat terrainH( in vec2 x )\n{\n\tvec2  p = x*0.003/SC;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<15; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\n\treturn SC*120.0*a;\n}\n\nfloat terrainM( in vec2 x )\n{\n\tvec2  p = x*0.003/SC;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<9; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\treturn SC*120.0*a;\n}\n\nfloat terrainL( in vec2 x )\n{\n\tvec2  p = x*0.003/SC;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<3; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\n\treturn SC*120.0*a;\n}\n\nfloat interesct( in vec3 ro, in vec3 rd, in float tmin, in float tmax )\n{\n    float t = tmin;\n\tfor( int i=0; i<300; i++ )\n\t{\n        vec3 pos = ro + t*rd;\n\t\tfloat h = pos.y - terrainM( pos.xz );\n\t\tif( abs(h)<(0.002*t) || t>tmax ) break;\n\t\tt += 0.4*h;\n\t}\n\n\treturn t;\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.001;\n\tfor( int i=0; i<80; i++ )\n\t{\n\t    vec3  p = ro + t*rd;\n        float h = p.y - terrainM( p.xz );\n\t\tres = min( res, 16.0*h/t );\n\t\tt += h;\n\t\tif( res<0.001 ||p.y>(SC*200.0) ) break;\n\t}\n\treturn clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, float t )\n{\n    vec2  eps = vec2( 0.002*t, 0.0 );\n    return normalize( vec3( terrainH(pos.xz-eps.xy) - terrainH(pos.xz+eps.xy),\n                            2.0*eps.x,\n                            terrainH(pos.xz-eps.yx) - terrainH(pos.xz+eps.yx) ) );\n}\n\nvec3 calcAtmosphericScattering( float sR, float sM, out vec3 extinction, float cosine, float g1)\n{\n    extinction = exp(-(_betaR * sR + _betaM * sM));\n\n    // scattering phase\n    float g2 = g1 * g1;\n    float fcos2 = cosine * cosine;\n    float miePhase = Mie * pow(1. + g2 + 2. * g1 * cosine, -1.5) * (1. - g2) / (2. + g2);\n    //g = 0;\n    float rayleighPhase = Rayleigh;\n\n    vec3 inScatter = (1. + fcos2) * vec3(rayleighPhase + _betaM / _betaR * miePhase);\n    \n    return inScatter;\n}\n\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*texture( iChannel0, p/256.0 ).x; p = m2*p*2.02;\n    f += 0.2500*texture( iChannel0, p/256.0 ).x; p = m2*p*2.03;\n    f += 0.1250*texture( iChannel0, p/256.0 ).x; p = m2*p*2.01;\n    f += 0.0625*texture( iChannel0, p/256.0 ).x;\n    return f/0.9375;\n}\n\nconst float kMaxT = 5000.0*SC;\n\nvec3 ACESFilm( vec3 x )\n{\n    float tA = 2.51;\n    float tB = 0.03;\n    float tC = 2.43;\n    float tD = 0.59;\n    float tE = 0.14;\n    return clamp((x*(tA*x+tB))/(x*(tC*x+tD)+tE),0.0,1.0);\n}\n\nvec4 render( in vec3 ro, in vec3 rd, vec3 light1 )\n{\n    // bounding plane\n    float tmin = 1.0;\n    float tmax = kMaxT;\n#if 1\n    float maxh = 300.0*SC;\n    float tp = (maxh-ro.y)/rd.y;\n    if( tp>0.0 )\n    {\n        if( ro.y>maxh ) tmin = max( tmin, tp );\n        else            tmax = min( tmax, tp );\n    }\n#endif\n\tfloat sundot = clamp(dot(rd,light1),0.0,1.0);\n    \n    vec3 extinction;\n\n    // optical depth -> zenithAngle\n    float zenithAngle = max(0., rd.y); //abs( rd.y);\n    float sR = RayleighAtt / zenithAngle ;\n    float sM = MieAtt / zenithAngle ;\n\n    vec3 inScatter = calcAtmosphericScattering(sR, sM, extinction, sundot, g);\n    vec3 skyCol = inScatter*(1.0-extinction);\n\n\tvec3 col;\n    float t = interesct( ro, rd, tmin, tmax );\n    if( t>tmax)\n    {\n        // sky\t\n        col = skyCol; // *vec3(1.6,1.4,1.0)\n            \n        // sun\n        col += 0.47*vec3(1.6,1.4,1.0)*pow( sundot, 350.0 ) * extinction;\n        // sun haze\n        col += 0.4*vec3(0.8,0.9,1.0)*pow( sundot, 2.0 ) * extinction;\n        \n        // clouds\n\t\tvec2 sc = ro.xz + rd.xz*(SC*1000.0-ro.y)/rd.y;\n\t\tcol += 2. * vec3(1.0,0.95,1.0) * extinction * smoothstep(0.5,0.8,fbm(0.0005*sc/SC) );\n        \n        t = -1.0;\n\t}\n\telse\n\t{\n        // mountains\t\t\n\t\tvec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, t );\n        //nor = normalize( nor + 0.5*( vec3(-1.0,0.0,-1.0) + vec3(2.0,1.0,2.0)*texture(iChannel1,0.01*pos.xz).xyz) );\n        vec3 ref = reflect( rd, nor );\n        float fre = clamp( 1.0+dot(rd,nor), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n        \n        // rock\n\t\tfloat r = texture( iChannel0, (7.0/SC)*pos.xz/256.0 ).x;\n        col = (r*0.25+0.75)*0.9*mix( vec3(0.08,0.05,0.03), vec3(0.10,0.09,0.08), \n                                     texture(iChannel0,0.00007*vec2(pos.x,pos.y*48.0)/SC).x );\n\t\tcol = mix( col, 0.20*vec3(0.45,.30,0.15)*(0.50+0.50*r),smoothstep(0.70,0.9,nor.y) );\n        col = mix( col, 0.15*vec3(0.30,.30,0.10)*(0.25+0.75*r),smoothstep(0.95,1.0,nor.y) );\n\n\t\t// snow\n\t\tfloat h = smoothstep(55.0,80.0,pos.y/SC + 25.0*fbm(0.01*pos.xz/SC) );\n        float e = smoothstep(1.0-0.5*h,1.0-0.1*h,nor.y);\n        float o = 0.3 + 0.7*smoothstep(0.0,0.1,nor.x+h*h);\n        float s = h*e*o;\n        col = mix( col, 0.29*vec3(0.62,0.65,0.7), smoothstep( 0.1, 0.9, s ) );\n\t\t\n         // lighting\t\t\n        float amb = clamp(0.5+0.5*nor.y,0.0,1.0);\n\t\tfloat dif = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat bac = clamp( 0.2 + 0.8*dot( normalize( vec3(-light1.x, 0.0, light1.z ) ), nor ), 0.0, 1.0 );\n\t\tfloat sh = 1.0; if( dif>=0.0001 ) sh = softShadow(pos+light1*SC*0.05,light1);\n\t\t\n\t\tvec3 lin  = vec3(0.0);\n\t\tlin += dif*vec3(7.00,5.00,3.00)*1.3*vec3( sh, sh*sh*0.5+0.5*sh, sh*sh*0.8+0.2*sh );\n\t\tlin += amb*vec3(0.40,0.60,1.00)*1.2;\n        lin += bac*vec3(0.40,0.50,0.60);\n\t\tcol *= lin;\n        \n        //col += s*0.1*pow(fre,4.0)*vec3(7.0,5.0,3.0)*sh * pow( clamp(dot(nor,hal), 0.0, 1.0),16.0);\n        col += s*\n               (0.04+0.96*pow(clamp(1.0+dot(hal,rd),0.0,1.0),5.0))*\n               vec3(7.0,5.0,3.0)*dif*sh*\n               pow( clamp(dot(nor,hal), 0.0, 1.0),16.0);\n        \n        \n        col += s*0.1*pow(fre,4.0)*vec3(0.4,0.5,0.6)*smoothstep(0.0,0.6,ref.y);\n        \n        vec3 extinction2;\n        // optical depth -> distance\n        float fo = DistanceAtt*t ;\n    \tvec3 inScatter2 = calcAtmosphericScattering(fo, fo, extinction2, sundot, gS);\n        col *= 2.;\n#if DetectSunMode\n        float t2 = interesct( ro, light1, tmin, tmax );\n        col = mix(inScatter2 * mix(vec3(skyInt), skyCol, smoothstep(0.1, 2.0, t2 / tmax)), col, extinction2);\n#else\n \t\tcol = mix(inScatter2 * mix(vec3(skyInt), skyCol, smoothstep(0.1, 0.5, t / tmax)), col, extinction2);\n#endif\n\t}\n    \n    // sun scatter\n    //col += 0.3*vec3(1.0,0.7,0.3)*pow( sundot, 8.0 );\n\n    // gamma\n\t//col = sqrt(col);\n            \n    col = ACESFilm(col);\n    col = pow(col, vec3(Gamma));\n    \n\treturn vec4( col, t );\n}\n\nvec3 camPath( float time )\n{\n\treturn SC*1100.0*vec3( cos(0.0+0.23*time), 0.0, cos(1.5+0.21*time) );\n}\n\nvoid moveCamera( float time, out vec3 oRo)\n{\n\tvec3 ro = camPath( time );\n\tro.y = terrainL( ro.xz ) + 19.0*SC;\n    oRo = ro;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#if autoCamera\n    float time = iTime*0.2;\n#else\n    float time = 12.59*0.5; // 18.94*0.5\n#endif\n    \n    float AR = iResolution.x/iResolution.y;\n    float M = 1.0; //canvas.innerWidth/M //canvas.innerHeight/M --res\n    \n    vec2 uvMouse = (iMouse.xy / iResolution.xy);\n    uvMouse.x *= AR;\n    \n   \tvec2 uv0 = (fragCoord.xy / iResolution.xy);\n    uv0 *= M;\n\t//uv0.x *= AR;\n    \n    vec2 uv = uv0 * (2.0*M) - (1.0*M);\n    uv.x *=AR;\n    \n    if (uvMouse.y == 0.) uvMouse.y=(0.7-(0.05*fov)); //initial view \n    if (uvMouse.x == 0.) uvMouse.x=(1.0-(0.05*fov)); //initial view\n    \n\tDs = normalize(vec3(uvMouse.x-((0.5*AR)), uvMouse.y-0.5, (fov/-2.0)));\n    \n    // camera position\n    vec3 ro;\n    moveCamera( time, ro );\n\n    vec3 D = normalize(vec3(uv, -(fov*M)));\n\n    // pixel\n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n    float t = kMaxT;\n    vec3 tot = vec3(0.0);\n\t#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 s = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n\t#else    \n        vec2 s = p;\n\t#endif\n\n        // camera ray    \n        vec3 rd = D;\n\n        vec4 res = render( ro, rd , Ds );\n        t = min( t, res.w );\n \n        tot += res.xyz;\n\t#if AA>1\n    }\n    tot /= float(AA*AA);\n\t#endif\n\n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}