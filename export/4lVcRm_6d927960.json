{"ver":"0.1","info":{"id":"4lVcRm","date":"1535566370","viewed":559,"name":"R2","username":"mmerchante","description":"Playing with quasirandom sequences, based on the following article by Martin Roberts: http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["bluenoise","lowdiscrepancy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on the method explaind on the article:\n// http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n// We can define n-dimensional quasirandom sequences based on the following formula\n//\n// sequence(n) = fract(n * alpha)\n//\n// , where alpha is an n-dimensional vector with the multiplicative reciprocal of pow(phi_d, i)\n// i being each component. Phi_d is the generalized version of the golden ratio\n//\n// In the case of 1 dimension, Phi_1 is just 1.61803398875, so \n// sequence_1(n) = fract(n * (1.0 / 1.61803398875))\n//\n// In the case of 2 dimensions, Phi_2 is 1.3247179572, so\n// sequence_2(n) =  fract(n * [ (1 / 1.3247179572), (1 / pow(1.3247179572,2)) ]\n//\n// The position of each dot is driven by the 2d sequence, and the size by the 1d sequence. \n// Note how there's some correlation going on when there's more points.\n\n#define MAX_COUNT 1024\n#define SIZE .01\n\nfloat R1seq(int n)\n{\n\treturn fract(float(n) * 0.618033988749894848204586834365641218413556121186522017520);\n}\n\nvec2 R2seq(int n)\n{\n\treturn fract(vec2(n) * vec2(0.754877666246692760049508896358532874940835564978799543103, 0.569840290998053265911399958119574964216147658520394151385));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/max(iResolution.x,iResolution.y);\n    \n    float accum = 1.0;\n    \n    for(int i = 0; i < min(iFrame, MAX_COUNT); ++i)\n    {\n\t\tvec2 p = R2seq(i);\n        float s = mix(.25, 1.0, R1seq(i)) * SIZE;\n        accum *= smoothstep(s * .75, s, distance(uv, p));\n    }\n    \n    vec3 outColor = mix(vec3(.1, .5, .75), vec3(1.0), accum);\n    \n    fragColor = vec4(outColor,1.0);\n}","name":"Image","description":"","type":"image"}]}