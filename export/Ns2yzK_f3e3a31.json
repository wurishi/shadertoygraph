{"ver":"0.1","info":{"id":"Ns2yzK","date":"1643795161","viewed":155,"name":"ray tracing example","username":"emotiog","description":"test ray tracing","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// ref: https://www.inven.co.kr/webzine/news/?news=165131&site=heroeskingdom\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    // Tex coordinate -> NDC(2D)\n    vec2 NDC = uv * 2.0 - vec2(1.0);\n    NDC.x *= aspectRatio;\n    \n    // moving sphere by time\n    vec3 sphere = vec3(0.0, 0.0 + sin(iTime * 4.0), 5.0);\n    \n    // radius\n    float R = 1.0;\n    \n    // sample z = 2.0\n    vec3 ray = vec3(NDC, 2.0);\n    \n    vec3 light = vec3(0.0 + 2.0 * sphere.y, 1.0, sphere.z + 2.0 * cos(iTime * 4.0));\n    \n    // the line eqautions\n    float A = dot(ray, ray);\n    float B = -2.0 * dot(ray, sphere);\n    float C = dot(sphere, sphere) - R * R;\n    float det = B * B - 4.0 * A * C;\n    \n    vec3 color;\n    \n    if(det > 0.0) {\n        color = vec3(1.0, 0.0, 0.0);\n        float t = (-B - sqrt(det)) / (2.0 * A);\n        \n        vec3 pos = t * ray;\n        \n        vec3 N = normalize(pos - sphere);\n        vec3 L = normalize(light - pos);\n        float diffuse = max(dot(N, L), 0.0);\n        \n        vec3 ref = reflect(-L, N);\n        vec3 V = -normalize(pos);\n        float specular = pow(max(dot(V, ref), 0.0), 32.0);\n        \n        color *= diffuse;\n        color += specular;\n    } else {\n        color = vec3(0.5, 0.5, 1.0);\n    }\n    \n    // Time varying pixel color\n//    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n//    fragColor = vec4(col,1.0);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}