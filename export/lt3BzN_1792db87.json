{"ver":"0.1","info":{"id":"lt3BzN","date":"1538767771","viewed":279,"name":"Real Projective Plane","username":"AustinSpafford","description":"Experimenting with visualizing coordinate systems on the real projective plane. Nothing elaborate, but just wrapping my head around what the adjacencies would look like, and figuring it might be a useful reference for others.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["opticalillusion","tiling","coordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(\n    out vec4 fragColor,\n    in vec2 fragCoord)\n{\n    vec2 uv = TransformFromCanvasTextureToFramedTexture(fragCoord, iResolution.xy, vec2(1.0));\n    \n    // Zoom out.\n    uv -= vec2(0.5);\n    uv *= 5.0;\n    uv += vec2(0.5);\n\n\tvec2 cellParity = floor(mod(uv, 2.0));\n\n    vec2 localUv = fract(uv);\n\tlocalUv.x = (cellParity.y == 0.0) ? localUv.x : (1.0 - localUv.x);\n\tlocalUv.y = (cellParity.x == 0.0) ? localUv.y : (1.0 - localUv.y);\n    \n    fragColor = vec4(localUv.x, localUv.y, 0.0, 1.0);\n\n\tvec2 borderDistances = abs(fract(uv + 0.5) - 0.5);\n\tfragColor.rgb = mix(\n\t\tfragColor.rgb, \n\t\t(floor(uv) == vec2(0.0) ? vec3(1.0) : vec3(0.0)),\n        smoothstep(0.03, 0.0, min(borderDistances.x, borderDistances.y)));\n    \n    // NOTE: Intentionally ommitted to intensify the accidental optical illusion.\n    //fragColor.rgb = sqrt(fragColor.rgb);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 TransformFromCanvasTextureToFramedTexture(\n\tvec2 canvasTextureCoord,\n\tvec2 canvasTextureSize,\n\tvec2 framedTextureSize)\n{\t\n\tvec2 result = (canvasTextureCoord / canvasTextureSize);\n\n\tfloat canvasAspectRatio = (canvasTextureSize.x / canvasTextureSize.y);\n\tfloat framedAspectRatio = (framedTextureSize.x / framedTextureSize.y);\n\n\tif (framedAspectRatio < canvasAspectRatio)\n\t{\n\t\tfloat relativeAspectRatio = (canvasAspectRatio / framedAspectRatio);\n\n\t\tresult.x *= relativeAspectRatio;\n\t\tresult.x -= (0.5 * (relativeAspectRatio - 1.0));\n\t}\n\telse\n\t{\n\t\tfloat relativeAspectRatio = (framedAspectRatio / canvasAspectRatio);\n\n\t\tresult.y *= relativeAspectRatio;\n\t\tresult.y -= (0.5 * (relativeAspectRatio - 1.0));\n\t}\n\n\treturn result;\n}","name":"Common","description":"","type":"common"}]}