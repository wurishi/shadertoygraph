{"ver":"0.1","info":{"id":"4tdfRX","date":"1540470155","viewed":173,"name":"HypnoTriangle","username":"Vizalkar","description":"Quick graphics","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.28318530718\n#define PI 3.14159265\n\n// https://iquilezles.org/articles/distfunctions2d\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    \n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x + k*p.y > 0.0 ) p = vec2( p.x - k*p.y, -k*p.x - p.y )/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nmat2 rot(in float theta)\n{\n    return mat2(cos(theta),-sin(theta), sin(theta), cos(theta));\n}\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n                 43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n        (c - a)* u.y * (1.0 - u.x) +\n        (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = vec2(0.5) - uv;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv.y -= 0.1;\n    \n    vec2 noisevec = vec2(\n        noise(uv+ iTime*0.5),\n        noise(uv*rot(0.5) + iTime*0.5+ 1.554));\n        \n    float triDist = sdEquilateralTriangle((noisevec*0.05+uv)*rot(PI));\n    vec3 col = vec3(smoothstep(0.,1.,sin(triDist*(200. + sin(iTime*0.2)*50.))));\n\tcol *= smoothstep(1.,0.,sdEquilateralTriangle((uv*2.)*rot(PI))*25.);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}