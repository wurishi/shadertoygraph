{"ver":"0.1","info":{"id":"ctXBR2","date":"1693157624","viewed":40,"name":"Fork Fork rainb sleeplessm 819","username":"sleeplessmonk","description":"added audioreactivity","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["fractal","explosion","rainbow","bipolar","eppilepsy"],"hasliked":0,"parentid":"clffzj","parentname":"Fork rainbow ex sleeplessm 217"},"renderpass":[{"inputs":[{"id":"MddGDN","filepath":"https://soundcloud.com/mindfulnomads/internal-strife","previewfilepath":"https://soundcloud.com/mindfulnomads/internal-strife","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define iterKifs 500.\n#define time iTime*.25\n\n//someone elses shader, modified by ollj\n//source lost, may even be from glslsandbox.\n\n#define dd(a) dot(a,a)\nvec2 ddm(mat2 a){return vec2(dd(a[0]),dd(a[1]));}\nvec3 ddm(mat3 a){return vec3(dd(a[0]),dd(a[1]),dd(a[2]));}\nvec4 ddm(mat4 a){return vec4(dd(a[0]),dd(a[1]),dd(a[2]),dd(a[3]));}\n#define u5(a)((a)*.5+.5)\n#define u2(a)((a)*2.-1.)\nvec2 c2(vec2 a){return a*vec2(1,-1);}\nvec2 cs(vec2 a){return vec2(cos(a.x),sin(a.y));}\nfloat suv(vec2 a){return a.x+a.y;}\nfloat suv(vec3 a){return a.x+a.y+a.z;}\nvec2 suv2(vec4 a){return vec2(suv(a.xy),suv(a.zw));}//sum modulo 2\nvec4 abab(float a,float b){return vec4(a,b,a,b);}\n\nfloat evalDx(float a,vec4 b){return((a*b.w+b.z)*b.y)+b.x;}\nfloat rt(float a,vec3 b){return evalDx(a,b.yzxz);}\n\n#define ViewZoom 1.\n#define fra(u) (u-.5*iResolution.xy)*ViewZoom/iResolution.y\nvec2 fra2(vec2 u){float r=iResolution.x/iResolution.y;u-=.5;u*=ViewZoom;u.x*=r;return u;}//fra2(u)=fra(u*iResolution)\n\nfloat random(float x) {\n    return fract(sin(x) * 43758.5453123);\n}\n\n// Symmetry function\nfloat symmetry(float value, float axis) {\n    return 0.5 * (value + sign(axis) * value);\n}\n\nvec3 neonColors(float t) {\n    return vec3(\n        0.5 + 0.5 * sin(t * 3.0),\n        0.5 + 0.5 * sin(t * 3.0 + 0.7),\n        0.5 + 0.5 * sin(t * 3.0 + 1.4)\n    );\n}\n\n\nvoid mainImage( out vec4 O, in vec2 U ){\n    // Retrieve audio input data from iChannel0\n    float audioAmplitude = texture(iChannel0, vec2(0.5)).r;\n\n    vec2 m=(U.xy-iResolution.xy/2.0)/min(iResolution.y,iResolution.x)*30.;\n    mat2 w=mat2(m,m);\n    m=(time+360.)*vec2(.1,.3);\n    vec2 mspt=(vec2(suv(sin(m.x*vec3(1,.5,1.3)))+suv(cos(m.x*vec2(-0.4,.2))),\n                    suv(cos(m.x*vec3(1,.8,1.5)))+suv(sin(m.x*vec2(-1.1,.1))))+1.)*.35;\n    vec3 r=vec3(0.);\n    float Z=.4+mspt.y*.3, n=.99+sin(time*.03)*.003, a=(1.-mspt.x)*.5;\n    vec2 u=cs(suv2(vec4(.024,.23,.03,.01)*abab(m.y,a)))*vec2(3.1,3.3);\n    vec2 t=1.1*cs(suv2(vec4(.03,.01,.033,.23)*abab(m.y,a)));\n    \n    for(float i=0.; i<iterKifs; i++){\n        vec2 p=vec2(dd(w[0]),dd(w[1]));\n        if(p.y>1.) w[1]/=p.y; if(p.x>1.) w[0]/=p.x;\n        p=mix(1./p,p,step(p,vec2(1.)));\n        r.x=evalDx(r.x,vec3(p,n).yzxz);\n        if(i<iterKifs-1.){\n            r.y=evalDx(r.y,vec3(p,n).yzxz);\n            if(i<iterKifs-2.) r.z=evalDx(r.z,vec3(p,n).yzxz);\n        }\n        w[0]=vec2(dot(w[0],c2(t)),dot(w[0],t.yx))*Z+vec2(.033,.14);\n        w[1]=vec2(dot(w[1],c2(u)),dot(w[1],u.yx))*Z-vec2(.023,.22);\n    }\n    \n    vec3 s=fract(r);\n    \n    // Apply symmetry to the pattern with enhanced detail\n    s.x = mix(s.x, s.y, step(0.5, mod(U.x, 1.0)));\n    s.y = mix(s.y, s.x, step(0.5, mod(U.y, 1.0)));\n    \n    // Enhance fractal illusion with intricate neon colors\n    vec3 neonColor = neonColors(time * 5.5);\n    \n    // Apply audio reactivity with emphasis on bass frequencies\n    float audioReactivity = pow(audioAmplitude, 2.0) * 5.0;\n    s.rgb += neonColor * audioReactivity;\n    \n    s -= u5(sign(mod(r, 2.) - 1.)) * u2(s);\n    O = vec4(s, 1.);\n}\n","name":"Image","description":"","type":"image"}]}