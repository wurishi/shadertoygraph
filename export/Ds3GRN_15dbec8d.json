{"ver":"0.1","info":{"id":"Ds3GRN","date":"1677601113","viewed":31,"name":"bfire","username":"tve","description":"When I saw Fast FBM Fire from NR4, I had to see what the Brittany video would look like on it.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bfire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Fast FBM Fire\n * Copyright (C) 2023 NR4 <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n \nconst vec3 c = vec3(1, 0, -1);\nconst mat2 m = .4 * mat2(4, 3, -3, 4);\n\n// Created by David Hoskins and licensed under MIT.\n// See https://www.shadertoy.com/view/4djSRW.\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract(dot(p3.xy, p3.zz));\n}\n\nfloat lfnoise(vec2 t)\n{\n    vec2 i = floor(t);\n    t = c.xx * smoothstep(0., 1., fract(t));\n    vec2 v1 = 2. * mix(vec2(hash12(i), hash12(i + c.xy)), vec2(hash12(i + c.yx), hash12(i + c.xx)), t.y) - 1.;\n    return mix(v1.x, v1.y, t.x);\n}\n\nfloat fbm(vec2 uv)\n{\n    vec2 uv0 = uv;\n    uv = uv * vec2(5., 2.) - vec2(-2., -.25) - 3.1 * iTime * c.yx;\n\tfloat f = 1.,\n        a = .5,\n        c = 2.5;\n\t\n    for(int i = 0; i < 5; ++i) {\n        uv.x -= .15 * clamp(1. - pow(uv0.y, 4.), 0., 1.) * lfnoise(c * (uv + float(i) * .612 + iTime));\n        c *= 2.;\n        f += a * lfnoise(uv + float(i) * .415);\n        a /= 2.;\n        uv *= m;\n    }\n    return f / 2.;\n}\n\nvoid mainImage( out vec4 O, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat c1 = clamp(pow(fbm(uv), 1. + 4. * clamp(uv.y * uv.y, 0., 1.)) * 1.5, 0., 1.);\n    vec3 col = clamp(1.5 * c1 * pow(c1 * c.xxx, vec3(0, 2, 5)), 0., 1.);\n    vec3 tex = texture(iChannel0,uv,1.0).rgb;\n    \n    \n    vec2 difference = vec2(tex.g - tex.r, tex.g - tex.b);\n    \n    if(difference.x > 0.05 && difference.y > 0.05){\n    }\n    else {\n        col = tex;\n    }\n    \n    \n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}