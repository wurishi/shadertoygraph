{"ver":"0.1","info":{"id":"stGcDV","date":"1662222772","viewed":138,"name":"Sinusoidal background","username":"pcholt","description":"Smoothly varying hypnotic background shader, with low computational complexity, for use in live wallpapers on low-end devices.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["background"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid f(float time, out vec2 v[3]) {\n    v[0] = vec2(sin(time*7.),cos(time*13.))*0.7+vec2(0.5);\n    v[1] = vec2(sin(time*17.),cos(time*23.))*0.7+vec2(0.5);\n    v[2] = vec2(sin(time*5.),cos(time*3.))*0.7+vec2(0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float p[6];\n    \n    // points are based on time and sinusoudal functions\n    for (int colr=0; colr<6; colr++) {\n        vec2 v[3];\n        f(iTime/20.+float(colr)*.4, v);\n        \n        // Time varying pixel color\n        float power = 0.;\n        for (int i=0; i<3; i++) {\n            vec2 d = uv.xy-v[i];\n            power += exp(-dot(d,d));\n        }\n        p[colr] = power/5.;\n        \n    }\n\n\n    // Output to screen\n    fragColor = vec4(\n        p[0]*vec3(0.,1.,1.)\n        +p[1]*vec3(0.,0.,1.)\n        +p[2]*vec3(1.,0.,1.)\n        +p[3]*vec3(1.,1.,0.)\n        -p[4]*vec3(1.,0.,1.),1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}