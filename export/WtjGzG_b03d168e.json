{"ver":"0.1","info":{"id":"WtjGzG","date":"1561979402","viewed":751,"name":"experiment 0609: fake letters","username":"phi16","description":"randomly generated letter-like shapes","likes":38,"published":1,"flags":0,"usePreview":0,"tags":["2d","runes","pseudofont"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy, vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat centerize(float x) {\n    float a = 1.5; // 0 < a < 4\n    return a*x*x*x - 1.5*a*x*x + (0.5*a+1.)*x;\n}\n\nvec3 pieces(vec2 p, vec2 s, vec2 seed, bool simpleForm) {\n\tfloat line = 0.1;\n    float baseSplit = simpleForm ? 4. : 5.;\n    float minimumSplit = simpleForm ? 3. : 2.;\n    vec2 complexity = baseSplit * (pow(vec2(rand(seed+0.),rand(seed+1.)),vec2(0.2)) * 0.8 + 0.25);\n    vec2 sep = floor(max(vec2(minimumSplit), complexity*pow(s,vec2(0.65))));\n    vec3 col = vec3(0);\n    \n    // Splitting\n    seed = floor(seed * 15.) / 15.;\n    bool spi = rand(seed+2.) < 0.4;\n    float basePattern = spi ? 0.9 : smoothstep(0., 0.2, rand(seed+3.)) * 1.0;\n    float sepPattern = spi ? 1.0 : floor((sep.x + sep.y + 2.) * 0.3);\n    seed = basePattern + floor(fract(seed*123.456) * sepPattern) * 3.1415 + floor(iTime*0.9+0.5);\n    vec3 c = spi ? mix(vec3(0,0.5,1),vec3(1,0.5,1),smoothstep(0.,2.,p.x+p.y)) * 0.8 + 0.2 : vec3(1.0);\n    //c = fract(vec3(seed.xy,seed.x+seed.y)*20.*vec3(1.123589,1.589312,1.942012));\n  \t//c = vec3(1.);\n    \n    // Points\n    vec2 place = p*s/(s-line)*(sep-1.);\n    vec2 pixs = fract(place)*(s-line)/(sep-1.);\n    if(rand(seed + floor(place)) < 0.3) {\n        col = max(col, max(pixs.x, pixs.y) < line ? c : vec3(0.));\n    }\n    \n    // Random Branching\n    vec2 edgeSeed = floor(place);\n    edgeSeed += pixs.x < pixs.y ? 3. : 4.;\n    float bridge = rand(seed + edgeSeed);\n    float bridgeRatio = simpleForm ? 0.9 : 0.9;\n    //col = max(col, min(pixs.x, pixs.y) < line && bridge > bridgeRatio ? c : vec3(0.));\n    \n    // Tree construction\n    float mu = 0.478213;\n    for(int i=0;i<4;i++) {\n        if(i!=0 && rand(seed) < 0.8 || rand(seed+2.) < 0.5) {\n            p = p.yx;\n            s = s.yx;\n            sep = sep.yx;\n        }\n        float ix = floor(centerize(rand(seed+3.))*(sep.x-1.)+0.5);\n        float split = ix/(sep.x-1.)*(s.x-line) + line / 2.;\n        col = max(col, distance(p.x*s.x, split) < line / 2. ? c : vec3(0.));\n        if(p.x*s.x < split - line/2.) {\n            float nsep = ix + 1.;\n            float ns = s.x/(s.x-line)*(sep.x-1.) - (sep.x - ix - 1.);\n            ns = ns*(s.x-line)/(sep.x-1.);\n            p.x = p.x*s.x / ns;\n            s.x = ns;\n            sep.x = nsep;\n            seed = seed + mu;\n        } else if(p.x*s.x > split + line/2.) {\n            float nsep = sep.x - ix;\n            float ns = s.x/(s.x-line)*(sep.x-1.) - ix;\n            ns = ns*(s.x-line)/(sep.x-1.);\n            p.x = (p.x*s.x - split + line/2.) / ns;\n            s.x = ns;\n            sep.x = nsep;\n            seed = seed - mu;\n        } else {\n        \treturn col;\n        }\n        mu /= 2.0;\n        if(p.x < 0. || p.x > 1. || p.y < 0. || p.y > 1. || sep.x < 1.5) return col;\n    }\n    \n\treturn col;\n}\n\nvec3 draw(vec2 p, vec2 seed) {\n    float d = 1.;\n    bool simpleForm = rand(seed-1.) > 0.8;\n    bool global = !simpleForm;\n    vec3 col = vec3(1);\n    vec2 size = vec2(1);\n    float mu = sqrt(2.);\n    float blank = 0.11;\n\tbool flipped = false;\n    for(int i=0;i<2;i++) {\n        bool refuse = false;\n        if(global) {\n            bool dir = rand(seed) < 0.5;\n            if(dir) {\n                p = p.yx;\n                size = size.yx;\n                flipped = !flipped;\n            }\n            float ratio = rand(seed+1.);\n            ratio = ratio < 0.3 ? 0.3\n                  : ratio < 0.5 ? 0.5\n                                : 0.65;\n            if(size.x < 0.7) ratio = 0.4;\n            if(i!=0 &&  dir && size.x < 0.7) refuse = true;            \n            if(i!=0 && !dir && size.x < 0.7) refuse = true;\n            if(!refuse) {\n                if(p.x < ratio) {\n                    float w = ratio * size.x - blank / 2.;\n                    p.x /= w / size.x;\n                    size.x *= w / size.x;\n                    seed += 0.2;\n                } else {\n                    float pad = ratio * size.x + blank / 2.;\n                    float w = (1.-ratio) * size.x - blank / 2.;\n                    p.x -= pad / size.x;\n                    p.x /= w / size.x;\n                    size.x *= w / size.x;\n                }\n            }\n            seed.xy += ratio * mu * seed.yx;\n            if(p.x < 0. || p.x > 1.) {\n                col = vec3(0.);\n                break;\n            }\n        }\n        mu /= sqrt(3.0);\n    }\n    if(flipped) {\n    \tp = p.yx;\n        size = size.yx;\n    }\n    col *= pieces(p, size, seed, simpleForm);\n    //col.rg *= size;\n    float w = 0.1;\n    //vec3 col = vec3(1) * smoothstep(w*0.5+0.01,w*0.5-0.01,d);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(1);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    uv *= 7.0;\n    uv.y += iTime-4.;\n    vec2 seed = floor(uv+0.5) * 0.1;\n    uv = fract(uv+0.5)-0.5;\n    uv = uv*1.3;\n    float d = max(abs(uv.x),abs(uv.y));\n    \n    if(d > 0.5) {\n        col = vec3(0);\n    } else {\n        // uv: [-0.5,0.5]^2\n        seed.x += floor(iTime*0.9);\n        col = draw(uv+0.5, seed);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}