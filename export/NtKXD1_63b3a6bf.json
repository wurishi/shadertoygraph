{"ver":"0.1","info":{"id":"NtKXD1","date":"1640801564","viewed":83,"name":"Ray Marching Training ","username":"shiomusubi","description":"This is my Ray Marching Training.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define PI 3.14159\n\nvec3 onRep(vec3 p, float interval){\n    return mod(p, interval) - interval * .5;\n}\n\nfloat barDist(vec2 p, float width) {\n    return length(max(abs(p)-width,0.));\n}\nfloat tubeDist(vec2 p, float width) {\n    return length(max(p-width,0.));\n}\n\n\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0, 1, 6, 1);\n    \n    float sphereDist = length(onRep(p-s.xyz+vec3(.5,.1,.5),4.))-s.w;\n    float planeDist = p.y;\n    //float bar_x = barDist(onRep(p,.4), vec3(0.1,1,4));\n    float bar_x = barDist((mod(p.yz,3.)-1.5), .1);\n    float bar_y = barDist((mod(p.xz,3.)-1.5), .1);\n    float bar_z = barDist((mod(p.xy,3.)-1.5), .1);\n    \n    float tube_x = tubeDist((mod(p.yz,1.)-.5), .3);\n    float tube_y = tubeDist((mod(p.xz,1.)-.5), .3);\n    float tube_z = tubeDist((mod(p.xy,1.)-.5), .3);\n    float time = (sin(iTime/1.3)+1.)*1.3+.02;\n    \n    //float d = min(sphereDist, planeDist);\n    float d =max(tube_z, max(tube_y,max(tube_x,min(sphereDist,min(bar_z,min(bar_x,bar_y))))))*time;\n    //float d = max(sphereDist,bar_x);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    \n    for (int i = 0; i<MAX_STEPS; i++){\n        vec3 p = ro+rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (dS > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0., 5., 6.);\n    lightPos.xz += vec2(sin(iTime),cos(iTime))*5.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n\n    float dif = dot(l,n);\n    float d = RayMarch(p+n*SURF_DIST,l);\n    if(d<length(lightPos-p)) dif *= .1;\n    return dif*3.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 cameraPos = vec3(0.,1.,-6.+iTime);\n    float screenZ = 1.;\n    vec3 rayDirection = normalize(vec3(uv,screenZ));\n    \n    float d = RayMarch(cameraPos, rayDirection);\n    vec3 p = cameraPos + rayDirection * d;\n    \n    float dif = GetLight(p);\n    vec3 col = vec3(dif);\n    col /= p*.1;\n    \n    //col = GetNormal(p);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}