{"ver":"0.1","info":{"id":"MclBRl","date":"1724214834","viewed":30,"name":"aug202024","username":"brendanluu","description":"testing","likes":0,"published":3,"flags":2,"usePreview":0,"tags":["popart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"aug192024v2\" by brendanluu. https://shadertoy.com/view/XcsBzf\n// 2024-08-21 04:28:43\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Sample the webcam texture\n    vec2 webcamUV = fragCoord/iResolution.xy;\n    vec4 webcamColor = texture(iChannel0, webcamUV);\n    \n    // Calculate luminance\n    float luminance = dot(webcamColor.rgb, vec3(0.299, 0.587, 0.114));\n    \n\n    // Create animated horizontal lines\n    float lineSpeed = 10.41;\n    float lineFrequency = 10.0;\n    float lines = step(0.5, fract((uv.y + iTime * lineSpeed) * lineFrequency));\n    \n    // Map luminance to three tones, incorporating wave\n    float threshold1 = 0.37;\n    float threshold2 = 0.90;\n    float finalTone;\n    \n    if (luminance < threshold1) {\n        // Dark areas\n        finalTone = 0.0;\n    } else if (luminance > threshold2) {\n        // Bright areas\n        finalTone = 1.0;\n    } else {\n        // Mid-tone areas (animated lines)\n        float normalizedLuminance = (luminance - threshold1) / (threshold2 - threshold1);\n        finalTone = mix(lines, 1.0, mod(normalizedLuminance, 2.));\n    }\n    \n\n    finalTone = mix(finalTone, 0.0, 0.1);\n    \n    fragColor = vec4(vec3(finalTone), 1.0);\n}","name":"Image","description":"","type":"image"}]}