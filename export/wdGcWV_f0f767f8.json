{"ver":"0.1","info":{"id":"wdGcWV","date":"1603752332","viewed":81,"name":"Mario Noise","username":"benjm","description":"Experimenting with noise, inspired by Mario. You can change the noise of the fireball with your mouse, I like looking at how it changes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//noise functions taken from Doug James https://www.shadertoy.com/view/3sVczG\n//which are parts of iq's noise tutorials https://www.shadertoy.com/view/XdXGW8\nfloat direction = 1.;\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm( in vec2 uv )\n{\n \tuv *= 2.;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tfloat f = 0.;\n    f  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\t//f  = 0.5 + 0.5*f;\n    return f;\n}\n\nvec3 blobColor(in vec2 uv, float amt) {\n  vec3 blue  = vec3(0.4,0.43,1);\n  float shNoise = 1.*fbm(uv+vec2(-12.3+iTime/30., -12.))*amt;\n    if(sin(iTime) == 0.){\n        direction *= -1.;\n        \n    }\n  vec3 white = vec3(1.000, 0.647, 0.000)*.7 + direction* 3.*uv.y*(.5+shNoise);\n  float d    = distance(vec2(0.,-1. + 2.*abs(sin(iTime))), vec2(2.3* uv.x,2.3 * uv.y));\n  float alph = smoothstep(0.15, 0.15+0.2*amt, d);\n  return mix(white, blue, alph);\n}\nvec3 lavaColor(in vec2 uv, float amt){\n    vec3 black  = vec3(0.,0.,0.);\n    \n    float shNoise = 4.*fbm(uv+vec2(-12.3+iTime/30., -12.))*amt;\n \n   \n    vec3 newRed = vec3(shNoise + 0.5, 0., 0.);\n  \treturn newRed;\n    float alph = smoothstep(0.15, 0.15+0.2*amt, 0.1);\n    return mix(newRed, black, alph);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p  = fragCoord.xy / iResolution.xy;\n    p -= vec2(0.5, 0.5);\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n    \n    \n    vec2 mouse = iMouse.xy/iResolution.xy;\n\n    float n = fbm(uv+vec2(-12.3+iTime/30., -12.)); //*fbm(uv));\n    float m = fbm(uv+vec2(12.3+iTime/40., 14.2));\n    uv += 0.5*mouse.x*vec2(n,m);\n    vec3 c = blobColor(uv, mouse.y);\n    \n    //black \n    if(abs(p.x) <0.08 && p.y < -0.2) c = vec3(0., 0., 0.000);\n    //head\n\tif(abs(p.x) < 0.12 && p.y < 0. && p.y > -0.2) c = vec3(0., 0., 0.);\n    //green\n\tif(abs(p.x)<0.07 && p.y < -0.2) c = vec3(0.486, 0.988, 0.000);\n    //head\n    if(abs(p.x)<0.11 && p.y < -0.01 && p.y > -0.19) c = vec3(0.486, 0.988, 0.000);\n   \t\n    if(p.y < -0.4){\n        c = lavaColor(uv, 2.);\n    }\n    \n\tfragColor = vec4(c, 1.0 );\n}","name":"Image","description":"","type":"image"}]}