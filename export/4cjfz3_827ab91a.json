{"ver":"0.1","info":{"id":"4cjfz3","date":"1725280604","viewed":18,"name":"geodesic in half plane model","username":"evvsb","description":"need to add vertical line geodesic","likes":0,"published":1,"flags":16,"usePreview":0,"tags":["mouse","construction","hyperbolic","geodesic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int key1 = 49;\n\nbool keyIsToggled(int key){return texture( iChannel1, vec2(key, 1.0) ).x > 0.0;}\n\n\nvoid circleSDF(vec2 uv, vec2 p, float r, inout vec3 pixel, vec3 col)\n{\n    if (length(uv-p)<r && length(uv-p)>r-0.01)\n    {\n        pixel=col;\n    }\n    \n   // return length(uv-p)-r;\n}\n\n// credit to iq\nvoid lineSegSDF(vec2 p, vec2 a, vec2 b, inout vec3 pixel, in vec3 col) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    if (length(pa-h*ba) < 0.005) {\n        pixel = col;\n    }\n\t//return length(pa - h * ba);\n}\n\n\nvoid verticalLineSDF(vec2 p, vec2 a, inout vec3 pixel, in vec3 col)\n{\n    if (p.x > a.x-0.005 && p.x < a.x+0.005) {\n        pixel = col;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0*vec2(fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    uv.y += .8;\n    \n    \n    \n    vec3 col = vec3(0.4,0.5,0.6);\n    vec2 mouse = 2.0*vec2(iMouse.xy - 0.5*iResolution.xy)/iResolution.y;\n    mouse.y+= .8;\n    \n    \n    int count = 1;\n    vec2 a = vec2(-0.5, 0.5);\n    \n    if (mouse.y>=0.){\n        a = vec2(mouse.x, mouse.y);\n    } else {\n        a = vec2(mouse.x, 0.);\n    }\n    vec2 b = vec2(0.5,0.5);\n\n    vec2 midpoint = vec2((a.x+b.x)/2.,(a.y+b.y)/2.);\n    float gradient = (b.y-a.y)/(b.x-a.x);\n    float perpGradient = -1./gradient;\n    \n    float c = midpoint.y-perpGradient*midpoint.x;\n    float xintercept = -c / perpGradient;   \n       \n    vec2 centre = vec2(xintercept, 0.);\n    \n    //centre = vec2(mouse.xy);\n    \n    float radius = length(a - centre);\n    float lineWidth = 0.001;\n    if (a.x!=b.x) {\n        lineSegSDF(uv, midpoint, centre, col, vec3(0.));\n\n    } else {\n        verticalLineSDF(uv, a, col, vec3(.2,.3,.4));\n    \n    }\n    circleSDF(uv,centre,radius,col, vec3(0.2,0.3,0.4));\n    circleSDF(uv,midpoint,0.01,  col, vec3(1.,1.,0.));\n    lineSegSDF(uv,  a, b, col, vec3(1.));\n        \n    \n    circleSDF(uv,midpoint,0.01,  col, vec3(1.,1.,0.));    \n    circleSDF(uv,b,0.01,col, vec3(1.,0.,0.));\n    circleSDF(uv,a,0.01,col, vec3(1.,0.,1.));\n    \n    if (uv.y<0.) {\n        col = vec3(0.7);\n    }\n    \n   // if (length(uv-centre) > radius ) {\n  //      col = vec3(0.2,0.3,0.4);\n  //  }\n    \n\n    // Output to screen\n    if (keyIsToggled(key1)){ col=vec3(1.);}\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}