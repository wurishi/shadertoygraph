{"ver":"0.1","info":{"id":"ll3yRS","date":"1532971499","viewed":100,"name":"Hole in space","username":"clintolibre","description":"Volume as a hole in black space. Play iChannel0 if the music does not autoplay for you.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\n// Reference to\n// http://thndl.com/square-shaped-shaders.html\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 st =  ( fragCoord - .5* iResolution.xy ) / iResolution.y;\n  vec3 color = vec3(0.0);\n  float d = 0.0;\n  float freq = 0.0;\n  for (int i = 0;i<512;i++) {\n      float freq1 = texelFetch( iChannel0, ivec2(0,0), 0 ).x;\n      freq = freq + freq1;\n  }\n  //normalize\n  freq = freq/512.0;\n  //invert\n  freq = 1.0-freq;\n    \n  st *= freq+1.5;\n\n  // Number of sides of your shape\n    \n  float N = freq*3.0+13.0;\n\n  // Angle and radius from the current pixel\n  float a = atan(st.x,st.y)+PI;\n  float r = TWO_PI/N;\n\n  // Shaping function that modulate the distance\n  d = cos(floor(.5+a/r)*r-a)*length(st);\n\t\n  color = vec3(1.0-smoothstep(.4,.4+1.5/iResolution.y,d));\n  // color = vec3(d);\n\n  fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}