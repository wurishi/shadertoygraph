{"ver":"0.1","info":{"id":"wtXcDB","date":"1592940383","viewed":216,"name":"Dodecahedralis VII","username":"sl2c","description":"Variant of [url=https://www.shadertoy.com/view/tlXcz7]Dodecahedralis III[/url] brought about by adding the three components (and thus a three-fold rotational symmetry).","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["fractal","hyperbolic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright 2020 Google LLC\n// SPDX-License-Identifier: Apache-2.0\n// NOT an official Google project; see Google Open Source guidelines for more info on copyright transfer\n// written by William Cadegan-Schlieper \n\nfloat tau = 6.283185307179586;\n\nbool flip(inout vec3 z, in vec2 c, in float r, inout int t, in int k) {\n    z.xy -= c;\n    bool res = (dot(z,z) < r*r) ^^ (r < 0.0);\n    if (res) {\n        z *= r * r / dot(z,z);\n        t = k - t;\n    }\n    z.xy += c;\n    return res;\n}\n\nbool inside(in vec3 z, in vec2 c, in float r, inout float t) {\n    vec3 p = z - vec3(c,0.0);\n    float res = (dot(p,p)-r*r) / (2.0 * abs(r) * p.z);\n    t = min(t, abs(res));\n    return res < 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 z0 = 2.0 * (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    float ds = 1.0 / iResolution.y;\n    vec3 z = vec3(z0,ds);\n    \n    vec2[12] c; float[12] r;\n    float r1 = pow(1.5 + 0.5 * sqrt(5.0) - sqrt(1.5 * sqrt(5.0) + 2.5), 0.5);\n    r[0] = r1; c[0] = vec2(0.0);\n    float r2 = r1 * sqrt(sqrt(5.0));\n    float x2 = sqrt(r1*r1+r2*r2);\n    float r3 = r2 / ( x2 * x2 - r2 * r2);\n    float x3 = -x2 / ( x2 * x2 - r2 * r2);\n    for (int i=0; i<5; i++) {\n        float theta = tau * 0.2 * float(i);\n        vec2 eit = vec2(cos(theta), sin(theta));\n        r[i+1] = r2;\n        c[i+1] = x2 * eit;\n        r[i+6] = r3;\n        c[i+6] = x3 * eit;\n    }\n    float r4 = -1.0 / r1;\n    r[11] = r4; c[11] = vec2(0.0);\n    \n    float period = -8.0 * log(r1);\n    float d = mod(iTime * 0.2, period) - period * 0.5;\n    z *= exp(-d);\n    \n    bool fl = false;\n    float yellow = 0.0;\n    int t = 1;\n    int s1 = 0;\n    int s2 = 0;\n    int s3 = 0;\n    bool fl1 = false; bool fl2 = false; bool fl3 = false;\n    for (int i=0; i<7; i++) {\n        fl1 = fl1 ^^ flip(z, c[0], r[0], s1, 1);\n        fl1 = fl1 ^^ flip(z, c[1], r[1], s1, 1);\n        fl3 = fl3 ^^ flip(z, c[2], r[2], s3, 1);\n        fl2 = fl2 ^^ flip(z, c[3], r[3], s2, 1);\n        fl2 = fl2 ^^ flip(z, c[4], r[4], s2, 1);\n        fl3 = fl3 ^^ flip(z, c[5], r[5], s3, -1);\n        fl1 = fl1 ^^ flip(z, c[6], r[6], s1, -1);\n        fl3 = fl3 ^^ flip(z, c[7], r[7], s3, -1);\n        fl2 = fl2 ^^ flip(z, c[8], r[8], s2, -1);\n        fl2 = fl2 ^^ flip(z, c[9], r[9], s2, -1);\n        fl3 = fl3 ^^ flip(z, c[10], r[10], s3, 1);\n        fl1 = fl1 ^^ flip(z, c[11], r[11], s1, -1);\n        \n    }\n    if (fl1) {s1=-s1;}\n    if (fl2) {s2=-s2;}\n    if (fl3) {s3=-s3;}\n    vec3 s = vec3(float(s1+s2+s3) + 4.0 * d / period);\n    \n    s = s / (1.9 + abs(s));\n    vec3 col = 0.5 + s * 0.45;\n    col.rg*=0.8;\n    fragColor = vec4(col,1.0);\n    fragColor = pow(fragColor, vec4(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}