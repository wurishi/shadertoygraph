{"ver":"0.1","info":{"id":"lfVcWW","date":"1731909208","viewed":30,"name":"eye toy","username":"afrodex","description":"referenced https://www.shadertoy.com/view/XsfGDS for music interaction\nnext steps: fine tune modulation from music","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["polar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SYSTEMS_BLUE\n\nfloat rand(vec2 uv){\n\n    uv = fract(uv*vec2(420.324, 730.163));\n    uv += dot(uv, uv + 45.94);\n    return (fract(uv.x*uv.y));\n}\n\n\nvec3 r13(float seed, float zones){\n\n    seed = 5.*mod(seed, zones);\n    float r1 = rand(vec2(seed+1., seed));\n    float r2 = rand(vec2(seed, seed+1.));\n    float r3 = rand(vec2(r1, r2));\n    return vec3(r1, r2, r3);\n}\n\n//gr - grid and radius\nfloat sector(vec2 pos, vec2 dim, vec2 gr){\n    return length(max(abs(gr - pos)-dim,0.0))-.03;\n}\n\nfloat red(vec3 rng){\n    return .2+rng.y*rng.z;\n}\n\nfloat blue(vec3 rng){\n    return .2+rng.y*rng.z;\n}\n\nfloat green(vec3 rng){\n    return .6+.5*rng.z;\n}\n\nvec3 getColor(vec3 rng){\n    float red, green, blue;\n    #ifdef SYSTEMS_BLUE\n    red = rng.y*rng.z;\n    blue =  .6+.5*rng.z;\n    green = .2+rng.y*rng.z;\n    #elif defined(SYSTEMS_RED)\n    red = .6+.5*rng.z;\n    green = rng.y*rng.z;\n    blue = .2+rng.y*rng.z;\n    #elif defined(SYSTEMS_GREEN)\n    red = .3+rng.y*rng.z;\n    green = .6+.5*rng.z;\n    blue = .2+rng.y*rng.z;\n    #elif defined(SYSTEMS_GOLD)\n    red = .6+.4*rng.z;\n    green = .4+.4*rng.z;\n    blue = .1+rng.y*rng.z;\n    \n    #endif\n    return vec3(red, green, blue);\n}\n\n\nvec3 sects(vec4 pulse, vec2 uv){\n    float r = length(uv);  //radius\n    vec2 rt = vec2(r, acos(uv.x/r)-2.*floor(uv.y)*acos(-uv.x/r));// - floor(uv.y)*3.14); //radius and angle\n    rt += iTime * .07;\n    float zones = 12.;  //number of zones\n    float zone = floor(zones*rt.y/6.283);  //zone id\n    float gd = fract(zones*rt.y/6.283);  //zone continuous\n    \n    \n    vec3 rng = r13(zone, zones);\n    vec3 rngccw = r13(zone - 1., zones);\n    vec3 rngcw = r13(zone + 1., zones);\n    float offset = 1.;///zones;\n    \n    vec3 col = vec3(0.);\n    float swiv = .5 + rng.z*rng.x*sin(iTime + rng.x*rng.y);\n    float swivccw = .5 - offset +  rngccw.z*rngccw.x*sin(iTime + rngccw.x*rngccw.y);\n    float swivcw = .5 + offset +  rngcw.z*rngcw.x*sin(iTime + rngcw.x*rngcw.y);\n    \n    float dist = .4 + .2*rng.x;\n    float distccw = .4 + .2*rngccw.x;\n    float distcw = .4 + .2*rngcw.x;\n    \n    float len = .2 + .2*rng.y;\n    float lenccw = .2 + .2*rngccw.y;\n    float lencw = .2 + .2*rngcw.y;\n    \n    float width = .45;\n    float widthccw = .45;\n    float widthcw = .45;\n    \n    float sect = sector(vec2(swiv*r, dist), vec2(width*r, len), vec2(gd*r, r));\n    float sectccw = sector(vec2(swivccw*r, distccw), vec2(widthccw*r, lenccw), vec2(gd*r, r));\n    float sectcw = sector(vec2(swivcw*r, distcw), vec2(widthcw*r, lencw), vec2(gd*r, r));\n    \n    //colors\n    \n    vec3 color = getColor(rng);\n    vec3 colorccw = getColor(rngccw);\n    vec3 colorcw = getColor(rngcw);\n    \n    //sector\n    vec3 base;\n    #ifdef SYSTEMS_BLUE\n        base = vec3(0., .3, .6);\n    #elif defined(SYSTEMS_RED)\n        base = vec3(.6, 0., .2);\n    #elif defined(SYSTEMS_GREEN)\n        base = vec3(0., .6, .3);\n    #elif defined(SYSTEMS_GOLD)\n        base = vec3(.6, .4, 0.);\n    #endif\n    float basestrength = .08+.2*pulse.x;\n    col+= basestrength*smoothstep(.002, 0., sect)*base;\n    col+= basestrength*smoothstep(.002, 0., sectccw)*base;\n    col+= basestrength*smoothstep(.002, 0., sectcw)*base;\n    //border\n    float bstrength = pulse.z;\n    col+= bstrength*smoothstep(-0.002, sect, 0.007)*color;\n    col+= bstrength*smoothstep(-0.002, sectccw, 0.007)*colorccw;\n    col+= bstrength*smoothstep(-0.002, sectcw, 0.007)*colorcw;\n    //glow\n    float fsize = .5*pulse.z;\n    float glow = smoothstep(.2+3.*fsize,1.6*fsize,r*(.5+fsize*sin(10.*rt.y)))+smoothstep(1., .0, r);\n    float furr =  + .2*smoothstep(.3, .8, r)*sin(94.2478*(gd+.02*sin((r-.5*iTime)*20.)));\n    glow += furr;\n    glow *= pulse.w;\n    col += glow*smoothstep(0.25*r, 0.0, sect)*color;\n    col += glow*smoothstep(0.25*r, 0.0, sectccw)*colorccw;\n    col += glow*smoothstep(0.25*r, 0.0, sectcw)*colorcw;\n\n    return col;\n}\n\n\nvec4 sampleMusic()\n{\n\treturn vec4(\n\t\ttexture( iChannel0, vec2( 0.01, 0.25 ) ).x,\n\t\ttexture( iChannel0, vec2( 0.07, 0.25 ) ).x,\n\t\ttexture( iChannel0, vec2( 0.15, 0.25 ) ).x,\n\t\ttexture( iChannel0, vec2( 0.30, 0.25 ) ).x);\n}\n\nvec4 sampleMic()\n{\n\treturn vec4(\n\t\ttexture( iChannel1, vec2( 0.01, 0.25 ) ).x,\n\t\ttexture( iChannel1, vec2( 0.07, 0.25 ) ).x,\n\t\ttexture( iChannel1, vec2( 0.15, 0.25 ) ).x,\n\t\ttexture( iChannel1, vec2( 0.30, 0.25 ) ).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    float r = length(uv);  //radius\n    vec2 rt = vec2(r, acos(uv.x/r)-2.*floor(uv.y)*acos(-uv.x/r));// - floor(uv.y)*3.14); //radius and angle\n    // Time varying pixel color\n//    float circ = step(abs(r-.5+(.02-.05*sin(rt.y+iTime))*cos(10.*rt.y-sin(iTime))), .01);\n    float zones = 12.;  //number of zones\n    float zone = floor(zones*rt.y/6.283);  //zone id\n    \n    vec4 pulse = vec4(0.);\n    pulse = sampleMusic();\n    pulse = sampleMic();\n    vec3 col = vec3(0.);\n    col += sects(pulse, uv);\n    //col += vec3(step(abs(rand(vec2(zone+1., zone))-r),.02)); \n    //col += vec3(step(abs(rand(vec2(zone+2., zone+1.))-r),.02)); \n    //col += vec3(step(abs(rand(vec2(zone, zone -1.))-r),.02));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}