{"ver":"0.1","info":{"id":"Xdtczn","date":"1517779643","viewed":160,"name":"Very simple tunnel","username":"codi","description":"Very simple tunnel","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","basic","tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel coordinates (from 0 to 1)/ center (0,0), keep aspect ratio\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Animate uv\n    uv += vec2(sin(iTime) / 2.0);\n    \n    // Caculate length from 0.0\n    float r = length(uv);\n    \n    // Calculate angle for given coordinates\n    float a = atan(uv.y, uv.x);\n\n    fragColor =\n        // Texture in polar coordinates\n        texture(iChannel0, vec2(1.0  / r + iTime, a * 3.0 / PI + iTime)) * r;\n}","name":"Image","description":"","type":"image"}]}