{"ver":"0.1","info":{"id":"fdGXD1","date":"1634623855","viewed":196,"name":"Not quite spectrum","username":"HaleyHalcyon","description":"a","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 3.14159265 * 2.\n#define HEX(x) vec3((x >> 16) & 255, (x >> 8) & 255, x & 255)/255.\nvec3 color(float x){\n    const int colorCount = 8;\n    vec3[] c = vec3[](\n        vec3(0),\n        HEX(0xe020c0),\n        HEX(0xf0e040),\n        HEX(0xc0ff80),\n        vec3(1),\n        HEX(0xa0ffe0),\n        HEX(0x7080F0),\n        HEX(0x8000a0)\n    );\n    x *= float(colorCount);\n    int lo = int(floor(x));\n    \n    return mix(\n        c[lo],\n        c[(lo + 1) % colorCount],\n        smoothstep(0., 1., fract(x))\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = fract(iTime / 4.);\n    // Scales pixel coordinates, so that\n    // the center is distance 0 and\n    // diagonals are distance 1\n    vec2 uvR = 2. * fragCoord - iResolution.xy;\n    vec2 uv = uvR / length(iResolution.xy);\n\n    float lenSq = log(uv.x * uv.x + uv.y * uv.y);\n    float angle = atan(uv.y, uv.x) / TAU;\n    \n    float spiral = fract(\n         lenSq * 0.3\n       + angle * 0.25\n       + time * -3.\n       + 0.08 * sin((time * 2. + lenSq * 0.5 + angle * 0.25) * TAU)\n       + 0.07 * sin((time * -1. + lenSq * 0.2 + angle * -0.5) * TAU)\n    );\n\n    // Time varying pixel color\n    vec3 col = color(spiral);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}