{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"vec3 flameRGB(float t) {\n    return vec3(t, t*t, t*t*t);\n}\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    o = vec4(0,0,0,1);\n    \n    vec3 e = texture(iChannel1, p/iResolution.xy).rgb;\n    \n    o.rgb += RGB_2 * flameRGB(e.r);\n    o.rgb += RGB_1 * flameRGB(e.g);\n    o.rgb += RGB_1 * e.b;\n    \n    o.rgb = pow(o.rgb, vec3(0.4545));\n    \n}\n","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"const float PI = radians(180.);\nconst float SQ3 = sqrt(3.);\nconst float INF = 1e10;\n\n// Simulation consts\nconst int N_MAX = 256;\n\n// Rendering consts\nconst vec3 RGB_1 = vec3(0.2, 0.1, 1.5);\nconst vec3 RGB_2 = vec3(1.5, 0.5, 0.2);\nconst float GLOW = 1.5;\nconst float R0 = 0.02;\nconst float R1 = 0.8;\n\nint texSize(sampler2D ch0) {\n    return min(N_MAX, textureSize(ch0, 0).x);\n}\n\nvec3 texFetch(sampler2D ch0, ivec2 p) {\n    int N = texSize(ch0);\n    p = ivec2(mod(vec2(p), vec2(ivec2(N,2))));\n    return texelFetch(ch0, p, 0).xyz;\n}\n","name":"Common","description":"","type":"common"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Simulates the motion of masses in iChannel0.\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    int N = texSize(iChannel0);\n    ivec2 pp = ivec2(p - 0.5);\n    \n    if (pp.x > N-1 || pp.y > 1)\n        return;\n     \n    // initial state\n    if (iFrame == 0) {\n        float phi = 2.*PI*float(p.x)/float(N);\n        float x = cos(phi);\n        float y = sin(phi);\n        float z = 0.5 + 1.5 * sin(phi * 3.0);\n        o.xyz = normalize(vec3(x,y,z));\n        return;\n    }\n    \n    // prev <- curr\n    if (pp.y == 1) {\n        o = texelFetch(iChannel0, ivec2(pp.x,0), 0);\n        return;\n    }\n    \n    vec3 cc = texFetch(iChannel0, pp); // length(cc) = 1\n    vec3 cc_prev = texFetch(iChannel0, pp + ivec2(0,1));\n    vec3 rr = texFetch(iChannel0, pp + ivec2(1,0)); // length(rr) = 1\n    vec3 ll = texFetch(iChannel0, pp - ivec2(1,0)); // length(ll) = 1\n    \n    vec3 T = rr + ll - 2.*cc; // Hooke's law\n    //T += 0.1*T*(rr - ll); // the non-linear term\n    vec3 ds = cc - cc_prev + T/2.5;\n    ds -= cc*dot(cc, ds); // make ds tangent to the unit sphere: dot(cc,ds) = 0\n    o.xyz = normalize(cc + ds); // project cc+ds onto the unit sphere\n}\n","name":"Buffer A","description":"","type":"buffer"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Renders the mesh defined by iChannel0 coords.\n\nfloat lineSDF(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 p2q(vec2 p) {\n    vec2 ar = iResolution.xy/iResolution.yy;\n    return (p/iResolution.xy*2. - 1.) * ar;\n}\n\nvec2 q2p(vec2 q) {\n    vec2 ar = iResolution.xy/iResolution.yy;\n    return (q/ar*0.5 + 0.5) * iResolution.xy;\n}\n\nvec2 pos(int i) {\n    vec3 r = texFetch(iChannel0, ivec2(i,0));\n    return r.xy; // / (r.z*0.5+0.5 + 0.75); // basic perspective projection\n}\n\nfloat sdf(vec2 q) {\n    int N = texSize(iChannel0);\n    float d = INF, e = 0.;\n    vec2 a = pos(-1);\n    \n    for (int i = 0; i < N; i++) {\n        vec2 b = pos(i);\n        d = min(d, lineSDF(q, a, b));\n        a = b;\n    }\n    \n    return d;\n}\n\nvoid mainImage(out vec4 o, vec2 p) {\n    vec2 q = p2q(p);\n    float d = sdf(q/R1);\n    float e = exp(-pow(7.5*d/R0, 2.0));\n    float g  = pow(R0/d, GLOW);\n\n    o.rgb = vec3(e, e, g);\n\n    float dt = 0.02;\n    o.r += (1.0-dt*1.5)*texture(iChannel1, q2p(q*(1.0-dt*0.3))/iResolution.xy).r;\n    o.g += (1.0-dt*0.5)*texture(iChannel1, q2p(q*(1.0+dt*0.3))/iResolution.xy).g;\n}\n","name":"Buffer B","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"4fKBWV","date":"1734477191","viewed":118,"name":"3d-Sphere String","username":"prasound","description":"Oscillation of a string on a sphere: x^2+y^2+z^2=1.\nThe motion of the string is driven by the basic wave equation.\nSee the 4d equivalent of this animation: https://www.shadertoy.com/view/lfyBWd","likes":13,"published":1,"flags":32,"usePreview":0,"tags":["oscillator"],"hasliked":0,"parentid":"XfVBDy","parentname":"Sound Shapes"}}