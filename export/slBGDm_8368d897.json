{"ver":"0.1","info":{"id":"slBGDm","date":"1624014799","viewed":245,"name":"20210323_CAVE_03_TRAINING","username":"FMS_Cat","description":"Internal Server Error\nThe server encountered an internal error or misconfiguration and was unable to complete your request.\n\nPlease contact the server administrator at webmaster@shadertoy.com to inform them of the time this error occurred, and the actions","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarcher"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define lofi(i,j) (floor((i)/(j))*(j))\n\nconst float PI=3.14159265;\n\nconst float foldcos=cos(PI/5.);\nconst float foldrem=sqrt(0.75-foldcos*foldcos);\nconst vec3 foldvec=vec3(-0.5,-foldcos,foldrem);\nconst vec3 foldface=vec3(0.0,foldrem,foldcos);\n\nfloat seed;\nbool isTracing;\n\nmat3 getOrthBasis(vec3 dir){\n  dir=normalize(dir);\n  vec3 sid=normalize(cross(vec3(0,1,0),dir));\n  vec3 top=cross(dir,sid);\n  return mat3(sid,top,dir);\n}\n\nfloat fs(float t){\n  return fract(sin(t*114.514)*1919.810);\n}\n\nfloat random(){\n  seed=fs(seed);\n  return seed;\n}\n\nvec3 randomLambert(vec3 n){\n  float p=2.0*PI*random();\n  float t=cos(asin(sqrt(1.-2.*random())));\n  return getOrthBasis(n)*vec3(cos(p)*sin(t),sin(p)*sin(t),cos(t));\n}\n\nvec3 randomSphere(){\n  float p=2.0*PI*random();\n  float t=acos(1.-2.*random());\n  return vec3(cos(p)*sin(t),cos(t),sin(p)*sin(t));\n}\n\nvec3 randomHemisphere(vec3 n){\n  vec3 d=randomSphere();\n  return dot(d,n)<0.?-d:d;\n}\n\nvec3 fold(vec3 p){\n  for(int i=0;i<5;i++){\n    p.xy=abs(p.xy);\n    p-=2.0*min(dot(foldvec,p),0.0)*foldvec;\n  }\n  return p;\n}\n\nmat2 rot2d(float t){\n  return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nfloat noise(vec3 p){\n  float sum=0.0;\n  float amp=0.5;\n  float warp=0.6;\n  mat3 rot=getOrthBasis(vec3(-1,0.5,-0.2));\n  \n  for(int i=0;i<7;i++){\n    p+=sin(p.zxy*warp);\n    p+=warp;\n    sum+=sin(dot(cos(p),sin(p.zxy)))*amp;\n    amp*=0.5;\n    warp*=1.4;\n    p*=1.6;\n    p*=rot;\n  }\n  return sum;\n}\n\nfloat cosExpEase(float t,float k){\n  return 0.5+0.5*cos(PI*exp(-k*t));\n}\n\nvec4 mapTerrain(vec3 p)\n{\n  if(isTracing&&p.y>.0){return vec4(p.y+.5,0,0,0);}\n  vec3 pt=p;\n  pt+=vec3(0,1,0);\n  float d=pt.y;\n  //float ph = cosExpEase(fract(fGlobalTime),5.0)+floor(fGlobalTime);\n  float ph=iTime;\n  ph*=-0.0;\n  d+=0.2*noise(2.*p+vec3(0,0,ph));\n  return vec4(d,1,0,0);\n}\n\nfloat distCrystal(vec3 p,float l,float s)\n{\n  vec3 pt=p;\n  pt.y-=min(abs(pt.y),l)*sign(pt.y);\n  pt=fold(pt);\n  float d=dot(pt,foldface)-s;\n  if(isTracing&&d>.1){return d;}\n  pt=p+vec3(0.03,0.4,0.03)*noise(p);\n  pt.y-=min(abs(pt.y),l)*sign(pt.y);\n  pt=fold(pt);\n  d=dot(pt,foldface)-s;\n  return d;\n}\n\nvec4 mapCrystals(vec3 p) {\n  float lp=length(p);\n  if(isTracing&&lp>3.){return vec4(lp-2.8,0,0,0);}\n  vec3 pt=p-vec3(0,-1.,0);\n  pt.xy=rot2d(0.1)*pt.xy;\n  pt.yz=rot2d(0.1)*pt.yz;\n  float d=distCrystal(pt,2.,.7);\n  pt.zx=rot2d(-lofi(atan(pt.x,pt.z)+PI/3.,PI/1.5))*pt.zx;\n  pt-=vec3(0,+.2,1);\n  pt.yz=rot2d(-0.6)*pt.yz;\n  d=min(d,distCrystal(pt,.9,.5));\n  return vec4(d,2,0,0);\n}\n\nvec4 map(vec3 p)\n{\n  vec4 isect=mapTerrain(p);\n  vec4 isectb=mapCrystals(p);\n  isect=isectb.x<isect.x?isectb:isect;\n  return isect;\n}\n\nvec3 nMap(vec3 p,vec2 d){\n  return normalize(vec3(\n    map(p+d.yxx).x-map(p-d.yxx).x,\n    map(p+d.xyx).x-map(p-d.xyx).x,\n    map(p+d.xxy).x-map(p-d.xxy).x\n  ));\n}\n\nfloat aoFunc(vec3 p,vec3 n){\n  float sum=0.0;\n  for(int i=0;i<10;i++){\n    vec3 pt=p+(0.02+0.01*float(i))*randomHemisphere(n);\n    float d=map(pt).x;\n    sum+=smoothstep(0.02,0.0,d)/10.;\n  }\n  return 1.0-sqrt(sum);\n}\n\nfloat wtf(vec3 p,vec3 H){\n  float sum=0.0;\n  for(int i=0;i<10;i++){\n    float dist=0.1*float(i);\n    vec3 pt=p+dist*H;\n    float d=map(pt).x/dist;\n    sum+=clamp(d,0.0,1.0)/10.;\n  }\n  return sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n  vec2 p = fragCoord / iResolution.xy * 2.0 - 1.0;\n  p /= vec2(iResolution.y / iResolution.x, 1);\n  \n  seed=texture(iChannel0,p).x*90.0;\n  seed+=fract(iTime);\n  \n  float t=.1*iTime;\n  vec3 cp=5.0*vec3(sin(t),.2,cos(t));\n  vec3 ct=vec3(1,0,0);\n  vec3 cd=normalize(cp-ct);\n  mat3 cm=getOrthBasis(cd);\n  \n  vec3 rd=cm*normalize(vec3(p,-2.));\n  vec3 ro=cp;\n  \n  vec3 col=vec3(0);\n  vec3 colRem=vec3(1);\n  \n  for(int iS=0;iS<2;iS++){\n    vec4 isect;\n    float rl=1E-2;\n    vec3 rp=ro+rd*rl;\n    \n    isTracing=true;\n    for(int i=0;i<64;i++){\n      isect=map(rp);\n      rl+=isect.x*0.6;\n      rp=ro+rd*rl;\n      if(iS>0&&i>32){break;}\n    }\n    isTracing=false;\n    \n    float fog=exp(-0.3*rl);\n    colRem*=fog;\n    \n    float lph=cosExpEase(fract(iTime),5.)+floor(iTime);\n    lph*=2.5;\n    vec3 L=normalize(vec3(sin(lph),0.6,cos(lph)));\n    vec3 H=normalize(L-rd);\n    \n    if(abs(isect.x)<0.01){\n      if(isect.y==1.){\n        vec3 n=nMap(rp,vec2(0,1E-2));\n        float ao=aoFunc(rp,n);\n        float w=wtf(rp,L);\n        col+=colRem*w*vec3(ao*max(0.0,dot(n,L)));\n        \n        colRem*=.0;\n        rd=reflect(rd,n);\n        ro=rp;\n      }else if(isect.y==2.){\n        vec3 n=nMap(rp,vec2(0,1E-2));\n        float ao=aoFunc(rp,n);\n        float f=1.0-abs(dot(n,rd));\n        f=pow(f,5.);\n        float w=wtf(rp,H);\n        col+=colRem*w*vec3(ao*0.5+0.6);\n        \n        colRem*=.5+.1*f;\n        rd=reflect(rd,n);\n        ro=rp;\n      }\n    }else{\n      colRem*=0.;\n    }\n    \n    if(length(colRem)<0.01){\n      break;\n    }\n  }\n  \n  col=pow(col,vec3(.4545));\n  col=vec3(\n    smoothstep(0.2,0.9,col.x),\n    smoothstep(0.0,1.,col.y),\n    smoothstep(-0.1,1.0,col.z)\n  );\n  \n  fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}