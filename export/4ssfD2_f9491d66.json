{"ver":"0.1","info":{"id":"4ssfD2","date":"1498228168","viewed":121,"name":"Ray Marching Example2","username":"yumcyawiz","description":".","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//distance field\nfloat df(vec3 p0) {\n    vec3 p = mod(p0, vec3(4.0)) - 0.5*vec3(4.0);\n    return sqrt(pow(abs(p.x), abs(sin(float(iFrame)/120.))*5.0) + pow(abs(p.y), abs(sin(float(iFrame)/120.))*5.0) + pow(abs(p.z), abs(sin(float(iFrame)/120.))*5.0)) - 1.0;\n}\n\n\nstruct Ray {\n    vec3 position;\n    int steps;\n    float t;\n};\n\n//it finds the intersection point and returns various data\nconst int maxSteps = 200;\nRay trace(vec3 from, vec3 rayDir) {\n    vec3 p = vec3(0);\n    int steps = 0;\n    float t = 0.0;\n    for(int i = 0; i < maxSteps; i++) {\n        p = from + t*rayDir;\n        float d = df(p);\n        if(d < 0.01) {\n            steps = i;\n            break;\n        }\n        t += d*0.2;\n    }\n    return Ray(p, steps, t);\n}\n\n//main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //(-1, -1) ~ (1, 1)\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n    \n    //camera settings\n    vec3 camPos = vec3(0, 0, -5) + vec3(0, 0, float(iFrame)/10.0);\n    vec3 camFront = vec3(0, 0, 1) + vec3(0.25*cos(float(iFrame)/100.0), 0.25*sin(float(iFrame)/100.0), 0);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camRight = cross(camUp, camFront);\n    float focus = 2.0;\n    \n    //ray direction\n    vec3 rayDir = uv.x*camRight + uv.y*camUp + focus*camFront;\n    \n    //trace\n    Ray tr = trace(camPos, rayDir);\n    \n    //coloring\n    vec3 color = (1.0 - float(tr.steps)/float(maxSteps))*vec3(clamp(1.0 - pow(float(tr.t)/20.0, 4.0), 0.0, 1.0));\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}