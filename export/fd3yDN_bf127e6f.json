{"ver":"0.1","info":{"id":"fd3yDN","date":"1653438272","viewed":67,"name":"Smoothstep Visualization","username":"Drottningu","description":"I find it very helpful to visualize things when learning (which is probably part of why I love shaders so much). I hope that you find this visualization of the smoothstep function helpful in learning how it works.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","visualization","beginner","learning","ss","smoothstep","help"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // UV + Color Initialization\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = vec3(0.0);\n    \n    // Graph Dimensions\n    vec2 Dim = vec2(1.1, 1.2);\n    uv = uv * Dim - (Dim - vec2(1.0)) * 0.5;\n        \n    // Graph Gridlines\n    color.r += smoothstep(0.995, 1.0, fract(uv.y));\n    color.g += smoothstep(0.995, 1.0, fract(uv.x));\n    color *= 0.5;\n    \n    // Learn how to step smoothly by playing around with the first two params to smoothstep.\n    float ss = smoothstep(0.0, 0.2, uv.x);\n    ss *= smoothstep(1.0, 0.5, uv.x);\n    \n    // Smoothstep of the UV.x value displayed as a graph.\n    float dist = 1.0 - abs(uv.y - ss);    \n    float value = smoothstep(0.995, 1.0, dist);\n    color += vec3(0, value, value);\n    \n    // Output\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}