{"ver":"0.1","info":{"id":"ct23Rw","date":"1676086660","viewed":88,"name":"Hamster Julia Fractal","username":"starmole2","description":"Classic Julia Fractal Effect\nClick bottom left for animation. \nOr follow the mandelbrot outline with mouse down. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INTERACTIVE \n\n// ripped from shadertoy 4sBfRd \n#define C(c) U.x+=.5; O+= char(U,c)\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nfloat text(vec2 uv, vec2 pos, float num) {\n    bool neg = num<0.0;\n    int inum = int(abs(num)*10000.0); \n    vec4 O = vec4(0.0);\n    const float FontSize = 3.;\n    vec2 U = ( uv - pos)*64.0/FontSize;\n    for ( int i=0; i<4; i++ ) {\n        C((48+(inum%10)));\n        inum/=10; \n    }\n    C(46);\n    do {\n        C((48+(inum%10)));\n        inum/=10;\n    } while ( inum!=0 );\n    if ( neg ) {\n        C(45);\n    }\n    return O.x;\n}\n// eor\n\nconst vec4[] pal = vec4[]( // entries are sorted, xyz=color, w=location\n    vec4(.5, .5, 1.0, 0.0), \n    vec4(0.0, 0.0, 1.0, 0.05), \n    vec4(0.7, 1.7, 0.5, 0.1), \n    vec4(1.0, 0.0, 0.0, 0.2), \n    vec4(0.2, 1.0, 1.0, 0.3), \n    vec4(0.2, 0.4, 0.5, 0.4), \n    vec4(0.3, 0.5, 0.5, 0.5), \n    vec4(0.1, 1.0, 0.6, 0.6), \n    vec4(0.2, 0.5, 1.0, 0.7), \n    vec4(0.0, 0.7, 1.0, 0.8), \n    vec4(0.3, 0.3, 0.3, 0.9), \n    vec4(0.0, 0.0, 0.0, 1.0) // last one better have w = 1.0 \n);\n\nvec3 getpal(float f) {\n    if (f<=pal[0].w) return pal[0].xyz;\n    f = min(f, 1.0);\n    int i = 0;\n    while (!(f>=pal[i].w && f<=pal[i+1].w) && i<pal.length()-1) i++;\n    return mix(pal[i].xyz, pal[i+1].xyz, (f-pal[i].w)/(pal[i+1].w - pal[i].w));\n}\n\nfloat sampleMandel(vec2 c) {\n    int i = 0;\n    const int maxi = 400;\n    vec2 z = vec2(0.0);\n    while (dot(z,z)<4.0 && i<maxi) {\n        float xt = z.x*z.x - z.y*z.y  + c.x;\n        z.y = 2.0*z.x*z.y + c.y;\n        z.x = xt;\n        i++;\n    }\n    if (i < maxi && i > 16 ) {\n        return 1.0;\n    } else {\n        return 0.0; \n    }\n}\n\nvec3 sampleJulia(vec2 z, vec2 c) {\n    int i = 0;\n    const int maxi = 400;\n    //const float n = 3.0;\n    while (dot(z,z)<=4.0 && i<maxi) {\n        float xt = z.x*z.x - z.y*z.y  + c.x;\n        z.y = 2.0*z.x*z.y  + c.y;\n        //float xt = pow((z.x * z.x + z.y * z.y),(n*.5)) * cos(n * atan(z.y, z.x)) + c.x;\n\t    //z.y = pow((z.x * z.x + z.y * z.y),(n*.5)) * sin(n * atan(z.y, z.x)) + c.y;      \n        z.x = xt;\n        i++;\n    }\n\n    if (i < maxi) {\n        float a = (1.0 - length(z)) * .5;\n        float s = sqrt(float(i)+a) / sqrt(float(maxi)); \n        return getpal(s);\n    } else {\n        return getpal(1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv * 2.0 - 1.0) * aspect;\n    vec2 uvm = iMouse.xy/iResolution.xy;\n    uvm = (uvm * 2.0 - 1.0) * aspect;\n    \n    float t = iTime * 1.2;\n    float r = (sin(t/6.0)+1.2)*.45; \n    vec2 uvmauto;\n    uvmauto.x = sin(t*.6)* r - .2;\n    uvmauto.y = cos(t)* r;\n    \n#ifndef INTERACTIVE\n    uvm = uvmauto;\n#else\n    if ( length(iMouse.xy) < 32.0 )\n        uvm = uvmauto; \n#endif\n    \n    const int supersample = 3;\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    for ( int ssy=0; ssy<supersample; ssy++ ) {\n        for ( int ssx=0; ssx<supersample; ssx++ ) {\n            vec2 suv = vec2(float(ssx)/float(supersample), float(ssy)/float(supersample)); \n            vec2 uv2 = uv + dFdx(uv)*suv.x + dFdy(uv)*suv.y;\n            col+=sampleJulia(uv2, uvm);\n        }\n    }\n    col /= float(supersample*supersample);\n    \n#ifdef INTERACTIVE\n    // display c value  \n    vec2 uvt = fragCoord/iResolution.y;\n    col += vec3(text(uvt, vec2(.25,0.0), uvm.x));\n    col += vec3(text(uvt, vec2(.5,0.0), uvm.y));\n    col += vec3(text(uvt, vec2(.75,0.0), iTime));\n\n    // display a mandelbrot overlay: points on the edge of it are nice looking\n    col += vec3(sampleMandel(uv)*.5);\n    \n    if ( length(uvm - uv) < .04 ) \n        col += vec3(1.0);\n        \n    if ( length(fragCoord.xy) < 32.0 )\n        col += vec3(1.0);\n        \n    if ( fragCoord.x > iResolution.x - 32.0 )\n        col = getpal(fragCoord.y / iResolution.y);\n#endif\n\n    // Output to screen\n    fragColor = vec4(pow(col,vec3(1.0/2.2)),1.0);\n}","name":"Image","description":"","type":"image"}]}