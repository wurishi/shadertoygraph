{"ver":"0.1","info":{"id":"llfXRj","date":"1437918680","viewed":856,"name":"5 Fold Quasi Symmetry Waves","username":"iterationsteppa","description":"A Demonstration of a nearly symmetrical pattern using 5 axes of symmetry. similar to penrose tiles.","likes":14,"published":1,"flags":8,"usePreview":0,"tags":["2d","symmetry","tiles","cymatics","platonic","penrosetiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//A 5 fold quasi symmetry similar to penrose tiling, \n//using a wave tank emulation, where  5 wave engines  sit on  the coordiantes\n//of a pentagon and the waves meet in the middle. when wave engines are far away, the lines made by the\n//wave engines are nearly straight and the middle is same as in the pic.\n//Please share developments from this work on this page in comments. \n//Prizes for you if you can make a linear-tile-version using square waves instead of sines or somthing.\n//Creative Commons â€” Attribution 3.0 Antony Stewart\n//oh ok i didnt discover this it's called quasicrystal symmetry?!? somthing\n\n\nvoid mainImage( out vec4 color, vec2 UVcoords )\n{\n   float d3 = 45e3 + sin(iTime*.05)*1e3,//number to move pic upwards\n         d4 =  5e2 - cos(iTime*.1 )*4e2,//number to move pic sideways\n         d2 = 111111.; //number to move 5 wave machines outwards\n    \n   UVcoords = .5*(UVcoords - vec2(d4,d3)); //move pic around\n    \n    \n\t//function to make color concentric sinewaves like water drop waves radiating from a pt:   \n#define S(i,j) color += sin(length(UVcoords + vec2(i,j)*d2));    // sin(length()*p2)+v2\n\t//see end for full formula including angular coordinates as well as concentric\n\t//Tip: to remix the code, you can try mixing 3/4/8 \n    //wave machines in different symmetries and vary their distance and amplitudes\n  \n     //Pentagon points for pentagon standing on a flat base around origin:\n    \n     // top point is 0,1  ... then going clockwise:   \n  float j1 = .5,    // 0.25*sqrt(5.0 -1.0); \n\t\tj2 = .612,  // 0.25*sqrt(5.0 -1.0);\n\t\tk1 = .951,  // 0.25*sqrt(10.+2.0*sqrt(5.0));\n\t\tk2 = .588;  //  0.25*sqrt(10.0-2.0*sqrt(5.0));\n    \n   \n//make 5 wave machines where the color is added together on coordinates of pentagon:\n    S(0,1)  S(k1,j1)  S(k2,-j2)  S(-k2,-j2)  S(-k1,j1)   \n}\n    \n    //first tried the waves as simple lines, result was duff!\n    //perhaps the perfectly straight waves cancel out the symmetry? awesome?\n    //that's why it uses concentric waves with polar coordinates above.\n    \n  // float color = sin(  p.y );\n  //  color +=  sin(  p.x*s1 + p.y*c1 );\n  // color +=  sin(  p.x*s2 - p.y*c2 );  \n  // color +=  sin( -p.x*s2 - p.y*c2 );\n  //  color +=  sin( -p.x*s1 + p.y*c1 );\n\n//NOTE: original version had concentric wave forms in this fasion:\n\n//float2 xy2 = IN.uv_MainTex + float2(-0.5, -0.5*d3 ) + float2(k1,j1)*d2; \n//position of the point\n\n//float c2 = length(xy2);//polar coordinates (x axis becomes radial)\n\n//ht+=  (sin(c2 * p2)  *v2) ;//angular coordinates (y becomes angle)\n    \n    \n\n","name":"","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp,float time)\n{\n    return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n}","name":"","description":"","type":"sound"}]}