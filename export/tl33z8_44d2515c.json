{"ver":"0.1","info":{"id":"tl33z8","date":"1575564563","viewed":138,"name":"Composing_music","username":"trevortheblack","description":"Use the major, minor, and harmonic minor scales to compose music.\n\nMeant for children","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Pi\n#define M_PI 3.1415926535897932384626433832795\n\n\n\n// Semitones as integers\n// 0th octave\nconst int c0  =  0;\nconst int cs0 =  1;\nconst int df0 =  1;\nconst int d0  =  2;\nconst int ds0 =  3;\nconst int ef0 =  3;\nconst int e0  =  4;\nconst int f0  =  5;\nconst int fs0 =  6;\nconst int gf0 =  6;\nconst int g0  =  7;\nconst int gs0 =  8;\nconst int af0 =  8;\nconst int a0  =  9;\nconst int as0 = 10;\nconst int bf0 = 10;\nconst int b0  = 11;\n// 1st octave\nconst int c1  = c0  + 12 * 1;\nconst int cs1 = cs0 + 12 * 1; \nconst int df1 = df0 + 12 * 1;\nconst int d1  = d0  + 12 * 1;\nconst int ds1 = ds0 + 12 * 1;\nconst int ef1 = ef0 + 12 * 1;\nconst int e1  = e0  + 12 * 1;\nconst int f1  = f0  + 12 * 1;\nconst int fs1 = fs0 + 12 * 1;\nconst int gf1 = gf0 + 12 * 1;\nconst int g1  = g0  + 12 * 1;\nconst int gs1 = gs0 + 12 * 1;\nconst int af1 = af0 + 12 * 1;\nconst int a1  = a0  + 12 * 1;\nconst int as1 = as0 + 12 * 1;\nconst int bf1 = bf0 + 12 * 1;\nconst int b1  = b0  + 12 * 1;\n// 2nd octave\nconst int c2  = c0  + 12 * 2;\nconst int cs2 = cs0 + 12 * 2; \nconst int df2 = df0 + 12 * 2;\nconst int d2  = d0  + 12 * 2;\nconst int ds2 = ds0 + 12 * 2;\nconst int ef2 = ef0 + 12 * 2;\nconst int e2  = e0  + 12 * 2;\nconst int f2  = f0  + 12 * 2;\nconst int fs2 = fs0 + 12 * 2;\nconst int gf2 = gf0 + 12 * 2;\nconst int g2  = g0  + 12 * 2;\nconst int gs2 = gs0 + 12 * 2;\nconst int af2 = af0 + 12 * 2;\nconst int a2  = a0  + 12 * 2;\nconst int as2 = as0 + 12 * 2;\nconst int bf2 = bf0 + 12 * 2;\nconst int b2  = b0  + 12 * 2;\n// 3rd octave\nconst int c3  = c0  + 12 * 3;\nconst int cs3 = cs0 + 12 * 3; \nconst int df3 = df0 + 12 * 3;\nconst int d3  = d0  + 12 * 3;\nconst int ds3 = ds0 + 12 * 3;\nconst int ef3 = ef0 + 12 * 3;\nconst int e3  = e0  + 12 * 3;\nconst int f3  = f0  + 12 * 3;\nconst int fs3 = fs0 + 12 * 3;\nconst int gf3 = gf0 + 12 * 3;\nconst int g3  = g0  + 12 * 3;\nconst int gs3 = gs0 + 12 * 3;\nconst int af3 = af0 + 12 * 3;\nconst int a3  = a0  + 12 * 3;\nconst int as3 = as0 + 12 * 3;\nconst int bf3 = bf0 + 12 * 3;\nconst int b3  = b0  + 12 * 3;\n// 4th octave\nconst int c4  = c0  + 12 * 4;\nconst int cs4 = cs0 + 12 * 4; \nconst int df4 = df0 + 12 * 4;\nconst int d4  = d0  + 12 * 4;\nconst int ds4 = ds0 + 12 * 4;\nconst int ef4 = ef0 + 12 * 4;\nconst int e4  = e0  + 12 * 4;\nconst int f4  = f0  + 12 * 4;\nconst int fs4 = fs0 + 12 * 4;\nconst int gf4 = gf0 + 12 * 4;\nconst int g4  = g0  + 12 * 4;\nconst int gs4 = gs0 + 12 * 4;\nconst int af4 = af0 + 12 * 4;\nconst int a4  = a0  + 12 * 4;\nconst int as4 = as0 + 12 * 4;\nconst int bf4 = bf0 + 12 * 4;\nconst int b4  = b0  + 12 * 4;\n// 5th octave\nconst int c5  = c0  + 12 * 5;\nconst int cs5 = cs0 + 12 * 5; \nconst int df5 = df0 + 12 * 5;\nconst int d5  = d0  + 12 * 5;\nconst int ds5 = ds0 + 12 * 5;\nconst int ef5 = ef0 + 12 * 5;\nconst int e5  = e0  + 12 * 5;\nconst int f5  = f0  + 12 * 5;\nconst int fs5 = fs0 + 12 * 5;\nconst int gf5 = gf0 + 12 * 5;\nconst int g5  = g0  + 12 * 5;\nconst int gs5 = gs0 + 12 * 5;\nconst int af5 = af0 + 12 * 5;\nconst int a5  = a0  + 12 * 5;\nconst int as5 = as0 + 12 * 5;\nconst int bf5 = bf0 + 12 * 5;\n// 6th octave\nconst int b5  = b0  + 12 * 6;\nconst int c6  = c0  + 12 * 6;\nconst int cs6 = cs0 + 12 * 6; \nconst int df6 = df0 + 12 * 6;\nconst int d6  = d0  + 12 * 6;\nconst int ds6 = ds0 + 12 * 6;\nconst int ef6 = ef0 + 12 * 6;\nconst int e6  = e0  + 12 * 6;\nconst int f6  = f0  + 12 * 6;\nconst int fs6 = fs0 + 12 * 6;\nconst int gf6 = gf0 + 12 * 6;\nconst int g6  = g0  + 12 * 6;\nconst int gs6 = gs0 + 12 * 6;\nconst int af6 = af0 + 12 * 6;\nconst int a6  = a0  + 12 * 6;\nconst int as6 = as0 + 12 * 6;\nconst int bf6 = bf0 + 12 * 6;\nconst int b6  = b0  + 12 * 6;\n// 7th octave\nconst int c7  = c0  + 12 * 7;\nconst int cs7 = cs0 + 12 * 7; \nconst int df7 = df0 + 12 * 7;\nconst int d7  = d0  + 12 * 7;\nconst int ds7 = ds0 + 12 * 7;\nconst int ef7 = ef0 + 12 * 7;\nconst int e7  = e0  + 12 * 7;\nconst int f7  = f0  + 12 * 7;\nconst int fs7 = fs0 + 12 * 7;\nconst int gf7 = gf0 + 12 * 7;\nconst int g7  = g0  + 12 * 7;\nconst int gs7 = gs0 + 12 * 7;\nconst int af7 = af0 + 12 * 7;\nconst int a7  = a0  + 12 * 7;\nconst int as7 = as0 + 12 * 7;\nconst int bf7 = bf0 + 12 * 7;\nconst int b7  = b0  + 12 * 7;\n// 8th octave\nconst int c8  = c0  + 12 * 8;\nconst int cs8 = cs0 + 12 * 8; \nconst int df8 = df0 + 12 * 8;\nconst int d8  = d0  + 12 * 8;\nconst int ds8 = ds0 + 12 * 8;\nconst int ef8 = ef0 + 12 * 8;\nconst int e8  = e0  + 12 * 8;\nconst int f8  = f0  + 12 * 8;\nconst int fs8 = fs0 + 12 * 8;\nconst int gf8 = gf0 + 12 * 8;\nconst int g8  = g0  + 12 * 8;\nconst int gs8 = gs0 + 12 * 8;\nconst int af8 = af0 + 12 * 8;\nconst int a8  = a0  + 12 * 8;\nconst int as8 = as0 + 12 * 8;\nconst int bf8 = bf0 + 12 * 8;\nconst int b8  = b0  + 12 * 8;\n\n\n// 88 Key note frequencies\n//  4th octave\n#define C_4  261.6256\t\n#define CS_4 277.1826\n#define DF_4 CS_4\n#define D_4  293.6648\n#define DS_4 311.1270\n#define EF_4 DS_4\n#define E_4  329.6276\n#define F_4  349.2282\t\n#define FS_4 369.9944\t\n#define GF_4 FS_4\n#define G_4  391.9954\n#define GS_4 415.3047\n#define AF_4 GS_4\n#define A_4  440.0\n#define AS_4 466.1638\n#define BF_4 AS_4\n#define B_4  493.8833\n// 0th octave\n#define C_0   C_4 / 16.0\n#define CS_0 CS_4 / 16.0\n#define DF_0 DF_4 / 16.0\n#define D_0   D_4 / 16.0\n#define DS_0 DS_4 / 16.0\n#define EF_0 EF_4 / 16.0\n#define E_0   E_4 / 16.0\n#define F_0   F_4 / 16.0\n#define FS_0 FS_4 / 16.0\n#define GF_0 GF_4 / 16.0\n#define G_0   G_4 / 16.0\n#define GS_0 GS_4 / 16.0\n#define AF_0 AF_4 / 16.0\n#define A_0   A_4 / 16.0\n#define AS_0 AS_4 / 16.0\n#define BF_0 BF_4 / 16.0\n#define B_0   B_4 / 16.0\n// 1st octave\n#define C_1   C_4 / 8.0\n#define CS_1 CS_4 / 8.0\n#define DF_1 DF_4 / 8.0\n#define D_1   D_4 / 8.0\n#define DS_1 DS_4 / 8.0\n#define EF_1 EF_4 / 8.0\n#define E_1   E_4 / 8.0\n#define F_1   F_4 / 8.0\n#define FS_1 FS_4 / 8.0\n#define GF_1 GF_4 / 8.0\n#define G_1   G_4 / 8.0\n#define GS_1 GS_4 / 8.0\n#define AF_1 AF_4 / 8.0\n#define A_1   A_4 / 8.0\n#define AS_1 AS_4 / 8.0\n#define BF_1 BF_4 / 8.0\n#define B_1   B_4 / 8.0\n// 2nd octave\n#define C_2   C_4 / 4.0\n#define CS_2 CS_4 / 4.0\n#define DF_2 DF_4 / 4.0\n#define D_2   D_4 / 4.0\n#define DS_2 DS_4 / 4.0\n#define EF_2 EF_4 / 4.0\n#define E_2   E_4 / 4.0\n#define F_2   F_4 / 4.0\n#define FS_2 FS_4 / 4.0\n#define GF_2 GF_4 / 4.0\n#define G_2   G_4 / 4.0\n#define GS_2 GS_4 / 4.0\n#define AF_2 AF_4 / 4.0\n#define A_2   A_4 / 4.0\n#define AS_2 AS_4 / 4.0\n#define BF_2 BF_4 / 4.0\n#define B_2   B_4 / 4.0\n// 3rd octave\n#define C_3   C_4 / 2.0\n#define CS_3 CS_4 / 2.0\n#define DF_3 DF_4 / 2.0\n#define D_3   D_4 / 2.0\n#define DS_3 DS_4 / 2.0\n#define EF_3 EF_4 / 2.0\n#define E_3   E_4 / 2.0\n#define F_3   F_4 / 2.0\n#define FS_3 FS_4 / 2.0\n#define GF_3 GF_4 / 2.0\n#define G_3   G_4 / 2.0\n#define GS_3 GS_4 / 2.0\n#define AF_3 AF_4 / 2.0\n#define A_3   A_4 / 2.0\n#define AS_3 AS_4 / 2.0\n#define BF_3 BF_4 / 2.0\n#define B_3   B_4 / 2.0\n// 5th octave\n#define C_5   C_4 * 2.0\n#define CS_5 CS_4 * 2.0\n#define DF_5 DF_4 * 2.0\n#define D_5   D_4 * 2.0\n#define DS_5 DS_4 * 2.0\n#define EF_5 EF_4 * 2.0\n#define E_5   E_4 * 2.0\n#define F_5   F_4 * 2.0\n#define FS_5 FS_4 * 2.0\n#define GF_5 GF_4 * 2.0\n#define G_5   G_4 * 2.0\n#define GS_5 GS_4 * 2.0\n#define AF_5 AF_4 * 2.0\n#define A_5   A_4 * 2.0\n#define AS_5 AS_4 * 2.0\n#define BF_5 BF_4 * 2.0\n#define B_5   B_4 * 2.0\n// 6th octave\n#define C_6   C_4 * 4.0\n#define CS_6 CS_4 * 4.0\n#define DF_6 DF_4 * 4.0\n#define D_6   D_4 * 4.0\n#define DS_6 DS_4 * 4.0\n#define EF_6 EF_4 * 4.0\n#define E_6   E_4 * 4.0\n#define F_6   F_4 * 4.0\n#define FS_6 FS_4 * 4.0\n#define GF_6 GF_4 * 4.0\n#define G_6   G_4 * 4.0\n#define GS_6 GS_4 * 4.0\n#define AF_6 AF_4 * 4.0\n#define A_6   A_4 * 4.0\n#define AS_6 AS_4 * 4.0\n#define BF_6 BF_4 * 4.0\n#define B_6   B_4 * 4.0\n// 7th octave\n#define C_7   C_4 * 8.0\n#define CS_7 CS_4 * 8.0\n#define DF_7 DF_4 * 8.0\n#define D_7   D_4 * 8.0\n#define DS_7 DS_4 * 8.0\n#define EF_7 EF_4 * 8.0\n#define E_7   E_4 * 8.0\n#define F_7   F_4 * 8.0\n#define FS_7 FS_4 * 8.0\n#define GF_7 GF_4 * 8.0\n#define G_7   G_4 * 8.0\n#define GS_7 GS_4 * 8.0\n#define AF_7 AF_4 * 8.0\n#define A_7   A_4 * 8.0\n#define AS_7 AS_4 * 8.0\n#define BF_7 BF_4 * 8.0\n#define B_7   B_4 * 8.0\n// 8th octave\n#define C_8   C_4 * 16.0\n#define CS_8 CS_4 * 16.0\n#define DF_8 DF_4 * 16.0\n#define D_8   D_4 * 16.0\n#define DS_8 DS_4 * 16.0\n#define EF_8 EF_4 * 16.0\n#define E_8   E_4 * 16.0\n#define F_8   F_4 * 16.0\n#define FS_8 FS_4 * 16.0\n#define GF_8 GF_4 * 16.0\n#define G_8   G_4 * 16.0\n#define GS_8 GS_4 * 16.0\n#define AF_8 AF_4 * 16.0\n#define A_8   A_4 * 16.0\n#define AS_8 AS_4 * 16.0\n#define BF_8 BF_4 * 16.0\n#define B_8   B_4 * 16.0\n\n#define MIDDLE_C C_4\n\n\n// Dynamics (volume)\n#define PPP 16.0 / 127.0\n#define PP  33.0 / 127.0\n#define P   49.0 / 127.0\n#define MP  64.0 / 127.0\n#define MF  80.0 / 127.0\n#define F   96.0 / 127.0\n#define FF  112.0 / 127.0\n#define FFF 126.0 / 127.0\n\nfloat semitoneHz(int st);\n\nfloat sinTime(float hertz, float time)\n{\n\treturn sin( 2.0*M_PI*hertz*time);\n}\n\nfloat cosTime(float hertz, float time)\n{\n\treturn cos( 2.0*M_PI*hertz*time);   \n}\n\nfloat modulate(\n    float rise, float fall, float start, float stop, float mag, float time)\n{\n    if (time < start || stop < time)\n        return 0.0;\n    \n    float riseMag = ((time-start)/(rise)) * mag;\n    float fallMag = ((stop-time)/(fall)) * mag;\n    return min(min(riseMag, fallMag), mag);\n}\n\nfloat beat(float hertz, float delay, float volume, float bpm, float duty, float time)\n{\n    float tmp = mod(mod(time, 60.0 / bpm) / (60.0 / bpm) + delay, 1.0);\n    float riseMag = (tmp/0.01) * volume;\n    float fallMag = max(((duty-tmp)/0.01) * volume, 0.0);\n    float mag = min(min(riseMag, fallMag), volume);\n    \n    return mag * sinTime(hertz, time);\n}\n\nfloat beat(int semitone, float delay, float volume, float bpm, float duty, float time)\n{\n    float hertz = semitoneHz(semitone);\n    \n    float tmp = mod(mod(time, 60.0 / bpm) / (60.0 / bpm) + delay, 1.0);\n    float riseMag = (tmp/0.01) * volume;\n    float fallMag = max(((duty-tmp)/0.01) * volume, 0.0);\n    float mag = min(min(riseMag, fallMag), volume);\n    \n    return mag * sinTime(hertz, time);\n}\n\n\n\nfloat semitoneHz(int st)\n{\n    int baseTone = st % 12;\n    int octave = st / 12;\n    float octMult = pow(2.0, float(octave));\n    \n    if (baseTone == 0)\n        return C_0 * octMult;\n    if (baseTone == 1)\n        return CS_0 * octMult;\n    if (baseTone == 2)\n        return D_0 * octMult;\n    if (baseTone == 3)\n        return DS_0 * octMult;\n    if (baseTone == 4)\n        return E_0 * octMult;\n    if (baseTone == 5)\n        return F_0 * octMult;\n    if (baseTone == 6)\n        return FS_0 * octMult;\n    if (baseTone == 7)\n        return G_0 * octMult;\n    if (baseTone == 8)\n        return GS_0 * octMult;\n    if (baseTone == 9)\n        return A_0 * octMult;\n    if (baseTone == 10)\n        return AS_0 * octMult;\n    if (baseTone == 11)\n        return B_0 * octMult;\n}\n\nint major(int semitone, int number)\n{\n    number -= 1;\n \tint octave = number / 7;\n    number = number % 7;\n    int tone = semitone + 12 * octave;\n    \n    if (number == 0)\n        return tone;\n    if (number == 1)\n        return tone + 2;\n    if (number == 2)\n        return tone + 4;\n    if (number == 3)\n        return tone + 5;\n    if (number == 4)\n        return tone + 7;\n    if (number == 5)\n        return tone + 9;\n    if (number == 6)\n        return tone + 11;\n}\n\nint naturalMinor(int semitone, int number)\n{\n    number -= 1;\n \tint octave = number / 7;\n    number = number % 7;\n    int tone = semitone + 12 * octave;\n    \n    if (number == 0)\n        return tone;\n    if (number == 1)\n        return tone + 2;\n    if (number == 2)\n        return tone + 3;\n    if (number == 3)\n        return tone + 5;\n    if (number == 4)\n        return tone + 7;\n    if (number == 5)\n        return tone + 8;\n    if (number == 6)\n        return tone + 10;\n}\n\n\nint harmonicMinor(int semitone, int number)\n{\n    number -= 1;\n \tint octave = number / 7;\n    number = number % 7;\n    int tone = semitone + 12 * octave;\n    \n    if (number == 0)\n        return tone;\n    if (number == 1)\n        return tone + 2;\n    if (number == 2)\n        return tone + 3;\n    if (number == 3)\n        return tone + 5;\n    if (number == 4)\n        return tone + 7;\n    if (number == 5)\n        return tone + 8;\n    if (number == 6)\n        return tone + 11;\n}\n\n\nfloat playNote(int semitone, float mag, int place, float bpm, float time)\n{\n    float start = float(place - 1) * (60.0 / bpm);\n    float stop = start + 0.5*(60.0 / bpm);\n    return modulate(0.05, 0.05, start, stop, mag, time) \n        * sinTime(semitoneHz(semitone), time);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"\nvec2 mainSound( in int samp, float time )\n{\n    float sum;   \n    \n    // float playNote(int semitone, float mag, int place, float bpm, float time)\n    //   semitone : [0, 88] the number for the note played\n    //   mag      : [0, 1) the volume\n    //   place    : [1, inf] the note in the song\n    //   bpm      : (0, 180) the beats per minute of the quickest note\n    //   time     : time, pass through as-is\n    \n    sum += playNote(a4, MP, 1, 60.0, time);\n    sum += playNote(a4, MP, 2, 60.0, time);\n    sum += playNote(a4, MP, 3, 60.0, time);\n    sum += playNote(a4, MP, 4, 60.0, time);\n\n    return vec2(sum);\n}","name":"Sound","description":"","type":"sound"}]}