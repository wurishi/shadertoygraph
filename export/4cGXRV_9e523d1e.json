{"ver":"0.1","info":{"id":"4cGXRV","date":"1715419251","viewed":111,"name":"CRT-Mareld","username":"Babaganosch","description":"Chromatic aberration inspired by @Xor","likes":3,"published":1,"flags":0,"usePreview":1,"tags":["crt","chromatic","aberration","tube"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float u_curvature = 5.0;\nfloat u_strength  = 4.0;\n\n#define SCANLINE_CONTRAST 0.005\n\nvec2 curveRemapUV(vec2 uv)\n{\n    uv = uv * 2.0 - 1.0;\n    vec2 offset = abs(uv.yx) / vec2(u_curvature, u_curvature);\n    uv = uv + uv * offset * offset;\n    uv = uv * 0.5 + 0.5;\n    return uv;\n}\n\nvec3 scanline(vec2 coord, vec3 screen)\n{\n\tscreen.rgb -= sin((coord.y)) * SCANLINE_CONTRAST;\n\treturn screen;\n}\n\nvec4 sampleSplit(vec2 coord, vec2 offset)\n{\n\tvec4 frag = vec4(1.0);\n\tfrag.r  = texture(iChannel0, coord - offset).r;\n\tfrag.ga = texture(iChannel0, coord).ga;\n\tfrag.b  = texture(iChannel0, coord + offset).b;\n\treturn frag;\n}\n\nvec4 vignetteIntensity(vec2 uv, vec2 resolution, float opacity)\n{\n    float intensity = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);\n    return vec4(vec3(clamp(pow((resolution.x / 4.0) * intensity, opacity), 0.0, 1.0)), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t/// Curve screen\n\tvec2 uv = curveRemapUV(fragCoord/iResolution.xy);\n\tvec2 pixel_size = vec2( 1.0 / iResolution.x, 1.0 / iResolution.y );\n\n\t/// Chromatic Aberration\n\tvec2 offset = (uv - 0.5) * 2.0 * (1.0 / iResolution.xy) * u_strength;\n    vec2 offset_edge = vec2(1.0 / iResolution.xy) * u_strength;\n    offset = clamp(offset, -offset_edge, offset_edge);\n\tvec4 base_col = sampleSplit(uv, offset);\n\t\n\t/// Scanlines\n\tbase_col.rgb = scanline(uv * iResolution.xy, base_col.rgb);\n\n\t/// Vignette\n    float outside = 1.0 - step(0.0, uv.x) * step(uv.x, 1.0) * step(0.0, uv.y) * step(uv.y, 1.0);\n    if (outside == 1.0) {\n        base_col = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n    base_col *= vignetteIntensity(uv, iResolution.xy * 22.0, 1.5);\n\n    fragColor = base_col;\n}","name":"Image","description":"","type":"image"}]}