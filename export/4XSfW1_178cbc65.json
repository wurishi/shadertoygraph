{"ver":"0.1","info":{"id":"4XSfW1","date":"1729364957","viewed":68,"name":"Reaction Diffusion experiment","username":"gubebra","description":"Simple reaction diffusion algorithm","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["organic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float c = texture(iChannel0, uv).y;\n    fragColor = vec4(smoothstep(0.1, 0.2, c));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define USE_TEXTURE 1\n\nfloat dx = 1.0;\nfloat dy = 0.3738885;\nfloat f = 0.06185717;\nfloat k = 0.06186403;\n\nfloat random(vec2 st)\n{\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat circle(vec2 uv, vec2 center, float r, float k)\n{\n    return smoothstep(r + k, r, length(uv + center));\n}\n\nvec2 laplacian(vec2 uv)\n{\n    mat3 lm = mat3(.05, .2, .05, .2, -1, .2, .05, .2, .05);\n    vec2 o = vec2(0.0);\n    \n    for(int i = 0; i < 3; i += 1)\n    {\n        for(int j = 0; j < 3; j += 1)\n        {\n        \tvec2 offset = vec2(i - 1, j - 1) / iResolution.xy;\n        \tvec4 lookup = texture(iChannel0, uv + offset);\n        \to += lookup.xy * lm[i][j];\n        }\n    }\n    \n    return o;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uvn = (fragCoord - iResolution.xy / 2.0) / iResolution.y;\n    vec2 mouse = - (iMouse.xy - iResolution.xy / 2.0) / iResolution.y;\n    float r = random(uv);\n    \n    vec2 cp = texture(iChannel0, uv).xy;\n    vec2 l = laplacian(uv);\n    \n    float xyy = (cp.x * cp.y * cp.y);\n    \n#if USE_TEXTURE > 0\n    vec3 tex = texture(iChannel1, uv).xyz;\n    f *= tex.x;\n    dy *= tex.y;\n#endif\n    \n    cp.x += (dx * l.x - xyy + f * (1.0 - cp.x));\n    cp.y += (dy * l.y + xyy - (k + f) * cp.y);\n    \n    vec3 color = vec3(clamp(cp, -1.0, 1.0), 0.0);    \n    color += vec3(circle(uvn, mouse.xy, 0.01, 0.02) * r * iMouse.z);\n    \n    if(iFrame < 30)\n    {\n#if USE_TEXTURE > 0\n        color = tex;\n#else\n        color = vec3(0.005 / abs(length(uvn) - 0.2)) * r;\n#endif\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}