{"ver":"0.1","info":{"id":"McKXzy","date":"1715397203","viewed":37,"name":"VAPORWAVE FRACTAL 2 - Fastaro","username":"robfast","description":"conformal mapping","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","fastaro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = 2.0*(fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    float r = length(uv);  // Radial distance\n    float theta = atan(uv.y, uv.x);  // Angle in radians\n\n    // Parameters\n    float n = 0.0+199.0*smoothstep(8555.0,-8555.0,8555.0*sin(iTime*0.001));  // Example constant n\n    float ln4 = log(4.0);\n\n    // Conformal mapping using radial coordinates\n    float u = ((3.0 * n + 4.0) * exp(r * ln4) * cos(theta * ln4)) / 12.0;\n    float v = ((3.0 * n + 4.0) * exp(r * ln4) * sin(theta * ln4)) / 12.0;\n\n    // Use u and v to determine color\n    vec3 color = vec3(v-2.0*u, v-5.09*u, 2.0*v-99.0*u);\n    color = fract(color);  // Keep color components within [0,1]\n    float hueRangeStart = 0.6; // Start of hue range\n    float hueRangeEnd = 0.95; // End of hue range\n    float hue = hueRangeStart + smoothstep(0.0,1.0,mod((u-v), hueRangeEnd - hueRangeStart));\n\n    float saturation = 1.6;\n    float value = 5.2;\n\n    vec3 hsv = vec3(hue, saturation, value);\n    vec3 rgb = log(abs((hsv2rgb(hsv)))); // Convert HSV to RGB\n\n    // Scaling and centering the position\n \n    fragColor = vec4(mix(color,rgb,1.0), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}