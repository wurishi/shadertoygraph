{"ver":"0.1","info":{"id":"stfSWS","date":"1626410899","viewed":92,"name":"Voronoi Archipelago","username":"Hamish","description":"Voronoi and Simplex noise used to create a simple ocean and islands scene.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Simplex noise\nhttps://www.shadertoy.com/view/Msf3WH\n\nVoronoi noise\n@patriciogv\n\nthebookofshaders.com helped me a lot! */\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404;\n    const float K2 = 0.211324865;\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 translate = vec2(iTime*-0.4,iTime*0.25);\n    p += translate*.1;\n\tvec2 st = p*vec2(iResolution.x/iResolution.y,1.0);\n\tfloat f1 = 0.0;\n    float f2 = 0.0;\n    f1 = noise( st );\n    f2 = noise( vec2(100.,100.)*st*f1*f1);\n\tf1 = 0.5 + 0.5*f1;\n    f2 = 0.5 + 0.5*f2;\n    vec3 color = vec3(0.0);\n    st += translate*0.05;\n    st *= 15.0;\n    vec2 i_st = floor(st); vec2 f_st = fract(st);    \n    \n    float m_dist = 10.;\n    vec2 m_point;       \n\n    for (int j=-1; j<=1; j++ ) {\n        for (int i=-1; i<=1; i++ ) {\n            vec2 neighbor = vec2(float(i),float(j));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.4*sin(iTime + 10.*point);\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);\n\n            if( dist < m_dist) {\n                m_dist = dist;\n                m_point = point;\n            }\n        }\n    }\n    vec3 colorbackground = vec3(0.);\n   \tcolorbackground.r += dot(m_point,vec2(.1,.1));\n  \tcolorbackground.g += dot(m_point,vec2(.3,.3));   \n    float color1 = dot(m_point,vec2(.7,.3));\n    float color2 = dot(m_point,vec2(.4,.3));\n    float pct = abs(sin(iTime*.02));\n    colorbackground.b = mix(color1, color2, pct);\n    vec3 colortemp = vec3(1.,0.95,0.);\n    if (f1 < 0.35 + m_dist*m_dist*0.003) {\n    color = vec3(.93,.81,.51);\n        if (f1 < 0.3) {\n        color = vec3(.45,.84,.42);\n        }\n    }\n    else {\n    color.b = mix(colortemp.b,colorbackground.b,f1*2.);\n\n    color.r = colorbackground.r;\n    color.g = colorbackground.g;\n    }\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}