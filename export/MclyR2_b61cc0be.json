{"ver":"0.1","info":{"id":"MclyR2","date":"1721340512","viewed":63,"name":"Dogma 十","username":"Eolc","description":"Dogma in The Binding of Isaac\n游戏以撒的结合中教条的形象","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","game","isaac","dogma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(in vec2 p, in vec2 b) {\n  vec2 d = abs(p) - b;\n  return length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\nfloat sdCircle(in vec2 p, in float r) { return length(p) - r; }\nfloat dotLight(vec2 p, float r, float k) {\n  float w = -sdCircle(p, r) / r + k;\n  return step(0., w) * w * w;\n}\nfloat sdOrientedVesica(vec2 p, vec2 a, vec2 b, float w) {\n  float r = 0.5 * length(b - a);\n  float d = 0.5 * (r * r - w * w) / w;\n  vec2 v = (b - a) / r;\n  vec2 c = (b + a) * 0.5;\n  vec2 q = 0.5 * abs(mat2(v.y, v.x, -v.x, v.y) * (p - c));\n  vec3 h = (r * q.x < d * (q.y - r)) ? vec3(0.0, r, 0.0) : vec3(-d, 0.0, d + w);\n  return length(q - h.xy) - h.z;\n}\nfloat sdCurcifix(in vec2[12] v, in vec2 p) {\n  int N = 12;\n  float d = dot(p - v[0], p - v[0]);\n  float s = 1.0;\n  for (int i = 0, j = N - 1; i < N; j = i, i++) {\n    vec2 e = v[j] - v[i];\n    vec2 w = p - v[i];\n    vec2 b = w - e * clamp(dot(w, e) / dot(e, e), 0.0, 1.0);\n    d = min(d, dot(b, b));\n    bvec3 c = bvec3(p.y >= v[i].y, p.y<v[j].y, e.x * w.y> e.y * w.x);\n    if (all(c) || all(not(c)))\n      s *= -1.0;\n  }\n  return s * sqrt(d);\n}\nfloat TVNoise(vec2 p, float time) {\n  float angle = mod(time * 0.1 * 3.1416, 2. * 3.1416);\n  mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n  p = floor(p * 100.);\n  p += vec2(sin(time));\n  return fract(sin(dot(p, rot * vec2(12.9898, 78.233))) * (43758.5453)) + 0.05;\n}\nfloat Noise2(float time) {\n  return fract(sin(time * 0.01) * 43758.5453) / 2. + 0.7;\n}\n// p1:rt_col, p2: rb_col, p3: rt_row\nfloat curcifix(vec2 p, vec2 p1, vec2 p2, vec2 p3) {\n  // p = vec2(abs(p.x), p.y);\n  vec2 v0 = vec2(p1.x, p1.y), v1 = vec2(p1.x, p3.y), v2 = vec2(p3.x, p3.y),\n       v3 = vec2(p3.x, -p3.y), v4 = vec2(p1.x, -p3.y), v5 = vec2(p1.x, p2.y);\n  vec2 v6 = vec2(-v5.x, v5.y), v7 = vec2(-v4.x, v4.y), v8 = vec2(-v3.x, v3.y),\n       v9 = vec2(-v2.x, v2.y), v10 = vec2(-v1.x, v1.y), v11 = vec2(-v0.x, v0.y);\n\n  vec2[] polygon = vec2[](v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11);\n  return sdCurcifix(polygon, p);\n}\nfloat eye_height(float t) {\n\n  const float t1 = 0.4, t2 = 2.9, t3 = 3.2, t4 = 3.5;\n  t = mod(t, t4);\n  return t <= t1 ?\n                 // ease out back\n             1. + 2.7058 * pow(t / t1 - 1., 3.) + 1.7058 * pow(t / t1 - 1., 2.)\n                 : t <= t2 ?\n                           // stay\n                       1.0\n                           : t <= t3 ? 1.0 - pow((t - t2) / (t3 - t2), 5.) : 0.;\n}\nfloat d_step(float min, float max, float x) {\n  return step(min, x) * (1. - step(max, x));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n  vec3 col = vec3(0.0);\n\n  float light = dotLight(uv - vec2(0., -0.5), 2.5, -0.1);\n  vec2 cross_v1 = vec2(0.1, 0.5), cross_v2 = vec2(0.1, -1.1),\n       cross_v3 = vec2(0.7, 0.1);\n  float cross_pixel = curcifix(uv - vec2(0, 0.3), cross_v1, cross_v2, cross_v3);\n  float cross_inner =\n      (1.0 - smoothstep(0., 0.1, cross_pixel)) * TVNoise(uv, iTime);\n  cross_inner += d_step(0., 0.5 * Noise2(iTime / 10.), cross_pixel) *\n                 pow((0.5 * Noise2(iTime / 10.) - cross_pixel), 2.);\n  // black border\n  cross_inner *= smoothstep(0., 0.1, abs(cross_pixel - 0.05));\n  const int eyes_N = 7;\n  float eyes[eyes_N];\n  vec2 eyes_pos[eyes_N] =\n      vec2[](vec2(-1.3, 0.45), vec2(0.8, 0.4), vec2(1., -0.7),\n             vec2(-0.25, -0.9), vec2(-1., -0.2), vec2(.2, -0.2), vec2(0., 0.9));\n  float rots[eyes_N] = float[](0., 60., 127., 60., -160., -145., -85.);\n  for (int i = 0; i < eyes_N; i++) {\n    mat2 rot = mat2(cos(radians(rots[i])), -sin(radians(rots[i])),\n                    sin(radians(rots[i])), cos(radians(rots[i])));\n    float eye_ball =\n        1.0 -\n        smoothstep(-0.02, 0.05,\n                   sdCircle(uv - eyes_pos[i],// shrink when eye shrinks\n                            0.08 * smoothstep(0.1, 0.5, eye_height(iTime))));\n    float eye_pixel =\n        sdOrientedVesica(uv - eyes_pos[i], rot * vec2(-.3, 0.),\n                         rot * vec2(.3, 0.), 0.1 * eye_height(iTime));\n    // fill noise in eye\n    float eye = (1.0 - smoothstep(0., 0.1, eye_pixel)) *\n                TVNoise(uv, iTime * 0.1) *\n                smoothstep(0., 0.1, eye_height(iTime));\n    // black eye ball\n    eyes[i] = eye - eye_ball;\n  }\n\n  for (int i = 0; i < eyes_N; i++) {\n    col += vec3(eyes[i]);\n  }\n  col *= (light * 2.5 + 0.15);\n\n  col += vec3(cross_inner) - (1. - smoothstep(0., 0.2, cross_pixel)) * col;\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}