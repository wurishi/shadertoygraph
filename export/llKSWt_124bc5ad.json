{"ver":"0.1","info":{"id":"llKSWt","date":"1486552361","viewed":290,"name":"Bezier curve 3D","username":"Nesvi7","description":"Bezier curve 3D with a simple aproach.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","beziercurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//By Nestor Vina\n\n// ray marching\nconst int max_iterations = 100;\nconst float stop_threshold = 0.02;\nconst float normal_step = 0.02;\nconst float clip_far = 1000.0;\n\n// math\nconst float PI = 3.14159265359;\nconst float DEG_TO_RAD = PI / 180.0;\n\nconst vec3 sunDir = normalize(vec3(1.0,-1.0,1.0));\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\nvec3 rotate( vec3 p, vec3 rot ){\n    rot.z = -rot.z;\n    mat3 ry = mat3(cos(rot.y), 0.0,-sin(rot.y),\n\t\t\t   0.0, 1.0, 0.0, \n\t\t\t   sin(rot.y), 0.0, cos(rot.y)  );\n    \n\tmat3 rz = mat3(cos(rot.z),-sin(rot.z), 0.0,\n\t\t\t   sin(rot.z), cos(rot.z), 0.0,\n\t\t\t   0.0, 0.0, 1.0 );\n     \n\tmat3 rx = mat3(1.0, 0.0, 0.0,\n\t\t\t   0.0, cos(rot.x), sin(rot.x), \n\t\t\t   0.0,-sin(rot.x), cos(rot.x) );\n    return p*rz*ry*rx;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec2 opUS( vec2 d1, vec2 d2, float smooth )\n{\n\treturn vec2(smin(d1.x,d2.x, smooth), (d1.y<d2.y)?d1.y:d2.y);\n}\n\n//Primitives\n\n\nvec3 BezierPoint(vec3 p0, vec3 p1, vec3 p2, float t){\n\tvec3 v1 = p1-p0;\n    vec3 v2 = p2-p1;\n    vec3 o0 = p0+v1*t;\n    vec3 o1 = p1+v2*t;\n    vec3 v3 = o1-o0;\n   \treturn o0+v3*t;\n}\n\nfloat BezierLine(vec3 p){\n\t\n    vec3 p0 = vec3(0.0+sin(iTime)*1.5,0.0,cos(iTime*2.5));\n    vec3 p1 = vec3(2.0,5.0*sin(iTime),sin(iTime));\n    vec3 p2 = vec3(4.0,2.0+cos(iTime*0.6),sin(iTime));\n\t\n    //p1 = iMouse.xy/iResolution.xy;\n    float minDist = 9999999.0;\n    const float radious = 0.1;\n    const float points =200.0;\n    for( float i = 1.0; i <= points; i++){\n   \t\tminDist = min(minDist,length(p+BezierPoint(p0,p1,p2,i/points))-radious);\n    }\n    \n    return minDist;\n}\n\n\n//Map\nvec2 map( vec3 p) {    \n    return vec2(min(BezierLine(p),-p.y+5.0),0.0);\n}\n// ray marching\nvec2 ray_marching( vec3 origin, vec3 dir, float start, float end ) {\n\t\n    float depth = start;\n\tfor ( int i = 0; i < max_iterations; i++ ) {\n        vec2 distResult = map( origin + dir * depth );\n\t\tfloat dist = distResult.x;\n\t\tif ( dist < stop_threshold ) {\n\t\t\treturn vec2(depth,distResult.y);\n\t\t}\n\t\tdepth += dist;\n\t\tif ( depth >= end) {\n\t\t\treturn vec2(end,-1.0);\n\t\t}\n\t}\n\treturn vec2(end,-1.0);\n}\n\n// get ray direction\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan( ( 90.0 - fov * 0.5 ) * DEG_TO_RAD );\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\t\n\treturn normalize( vec3( -xy, -z ) );\n}\n\nvec3 normal( vec3 pos ) {\n\tconst vec3 dx = vec3( normal_step, 0.0, 0.0 );\n\tconst vec3 dy = vec3( 0.0, normal_step, 0.0 );\n\tconst vec3 dz = vec3( 0.0, 0.0, normal_step );\n\treturn normalize (\n\t\tvec3(\n\t\t\tmap( pos + dx ).x - map( pos - dx ).x,\n\t\t\tmap( pos + dy ).x - map( pos - dy ).x,\n\t\t\tmap( pos + dz ).x - map( pos - dz ).x\t\t\t\n\t\t)\n\t);\n}\n\n// camera rotation : pitch, yaw\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\t\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y,\n\t\ts.y * s.x,  c.x,  c.y * s.x, \n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\nfloat fresnel(vec3 n, vec3 d, float exp ){\n    return pow(1.0-dot(d,n),exp);\n}\n\nvec3 material( vec3 v, vec3 n, vec3 eye ) {    \n    //Texturing \n    vec2 uv = v.xz;    \n    vec3 albedo = vec3(0.5,0.0,0.0);\n    \n    vec3 viewDir = normalize(eye-v);    \n    vec3 fresnelColor = vec3(0.4,0.3,0.7) * fresnel(n,viewDir,2.0);    \n    \n    float diffuse = dot(sunDir,n)*0.3;\n    vec3 ambient = vec3(0.1,0.05,0.005);\n    \n    return albedo+diffuse+ambient;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// default ray dir\n\tvec3 dir = ray_dir( 45.0, iResolution.xy, fragCoord.xy );\n\t\n\t// default ray origin\n\tvec3 eye = vec3( 0.0, 0.0, 10.0 );\n\n\t// rotate camera\n\tmat3 rot = rotationXY( vec2(iMouse.yx/iResolution.yx*5.0));//vec2(-0.2, iTime/2.0 ) );\n\tdir = rot * dir;\n\teye = rot * eye;\n\t\n\t// ray marching\n    vec2 rayResult = ray_marching( eye, dir, 0.0, clip_far );\n\tfloat depth = rayResult.x;\n\tif ( depth >= clip_far ) {        \n\t\tfragColor = vec4(0.3,0.3,0.3,1.0);//Background color\n        return;\n\t}\n\t\n\t// shading\n\tvec3 pos = eye + dir * depth;\n\tvec3 n = normal( pos );\n    vec3 fogColor = vec3(0.3,0.3,0.3);\n    \n    if( rayResult.y == 0.0 )\n    \tfragColor = vec4(material( pos, n, eye ), 1);\n    \n}","name":"Image","description":"","type":"image"}]}