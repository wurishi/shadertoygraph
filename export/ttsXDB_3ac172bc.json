{"ver":"0.1","info":{"id":"ttsXDB","date":"1564205333","viewed":515,"name":"Slowly Swimming Fractal","username":"mathmasterzach","description":"Watch it swim","likes":22,"published":3,"flags":0,"usePreview":0,"tags":["2d","fractal","dynamic","magnet","swim"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on the original formula from http://paulbourke.net/fractals/magnet/\n//Modified with different constants which change based on time and iteration\n\n//Thanks to FabriceNeyret2 for some additional optimizations!\n//Golfed version with 292 chars:\n/*\n#define S x-=1.+.5*sin((iTime+i)//\n#define M mat2( z, -z.y, z )//\n#define mainImage(O,U)                                  \\\n    float N=128., i=0., m=4., l=N;                      \\\n    for( vec2 n = iResolution.xy, z = n-n,              \\\n              u = 2.* ( U+U-n )/n.y;                    \\\n        i<N && l>0.;                                    \\\n         l =  4.-length(z=M*z) )                        \\\n         l < m ? m = l : m,                             \\\n         n = z+z + u,                                   \\\n         z = M*z + u,                                   \\\n         z.S/2.6),                             \\\n         z = M * vec2( n.S/2.)+.5, -n.y ) / dot(n,n),\\\n         O = m * ( cos(vec4(1,2,3,0)-5.*i++/N) + 1. ) / 8.\n*/\n\nfloat MAX_STEPS=128.;\nfloat PI=acos(-1.);\nfloat AA=2.;\n\n#define vecMul(a,b) vec2(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x)\n#define vecDiv(a,b) vec2(a.x*b.x+a.y*b.y,a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)\n\nmat2 matRot(float a){\n\tfloat c=cos(a),\n          s=sin(a);\n    return mat2(c,s,s,-c);\n}\n\nvec3 samplePoint(vec2 c){\n    float i;\n    vec2 z=vec2(0.);\n    float maxl=0.;\n    for(i=0.;i<MAX_STEPS;i++){\n        vec2 numer = vecMul(z,z)+c; numer.x-=1.+.5*sin((iTime+i)/2.6);\n        vec2 denom = 2.*z+c;        denom.x-=1.5+.5*sin((iTime+i)/2.);\n        vec2 div   = vecDiv(numer,denom);\n        z = vecMul(div,div);\n        float d=dot(z,z);\n        if(d>16.){\n            break;\n        }\n        maxl=max(maxl,d);\n    }\n    \n    float ic=(5.*i/MAX_STEPS);\n    return (4.-sqrt(maxl))*(cos(vec3(1,2,3)-ic)+1.)/8.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 c=2.*(2.*fragCoord-iResolution.xy)/iResolution.y;\n    float delt=(2./iResolution.y)/AA;\n    vec3 col;\n    for(float y=0.;y<AA;y++){\n    \tfor(float x=0.;x<AA;x++){\n    \t\tcol+=samplePoint(c+vec2(x,y)*delt);\n    \t}\n    }\n    col/=(AA*AA);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}