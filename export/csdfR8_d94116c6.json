{"ver":"0.1","info":{"id":"csdfR8","date":"1696885056","viewed":134,"name":"Medley of Fireworks","username":"medley","description":"A bunch of celebratory fireworks to help you celebrate the good things in life :)","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["fireworks"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gaussian blur the fireworks from buffer A\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    // This is faking \"bloom\"-ish behavior (for now)\n    vec3 bloom = vec3(0.0);\n    float gaussian[25] = float[25](\n        1.0, 4.0, 7.0, 4.0, 1.0,\n        4.0, 16.0, 26.0, 16.0, 4.0,\n        7.0, 26.0, 41.0, 26.0, 7.0,\n        4.0, 16.0, 26.0, 16.0, 4.0,\n        1.0, 4.0, 7.0, 4.0, 1.0\n    );\n    \n    for (int r = -2; r < 3; r++)\n    {\n        for (int c = -2; c < 3; c++)\n        {\n            bloom += gaussian[(r+2)*5+(c+2)]*texture(iChannel0,(fragCoord+vec2(r,c))/iResolution.xy).rgb;\n        }\n    }\n    bloom /= 273.0;\n\n    fragColor = vec4(bloom,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159\n#define TWO_PI 6.28318\n\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n/**\n * Retrieve an ID per-firework from its coordinates.\n *\n * @param uv     The coordinate system of the firework\n * @param factor How many tiles the screen is divided into\n * @return A value from 0-1 uniquely identifying that tile\n */\nfloat getID( vec2 uv, float factor )\n{\n    return hash12(floor(uv*factor));\n}\n\n// https://iquilezles.org/articles/palettes/\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Render firework particles\nvec3 fwParticles( in vec2 uv, in float time, float id )\n{\n    vec3 res = vec3(0.0); // Result color\n    int np = 100; // Number of particles per firework\n    for (int i = 0; i < np; i++)\n    {\n        vec2 p = uv;\n        // Two random values for more variance\n        float rp = hash11(float(i+np));\n        float rn = hash11(float(i-np));\n        \n        // randomly offset one particle along a radius\n        float rad = 0.5;\n        p.y -= rn*time*rad*sin(rp*TWO_PI);\n        p.x -= rn*time*rad*cos(rp*TWO_PI);\n        p.y += pow(pow(time/2.0,2.0)/1.5,2.0);\n        \n        // offset firework cluster into own area\n        float dx = id-0.5;\n        float dy = -(id-0.5);\n        p -= vec2(dx,dy)*0.5;\n        \n        // calculate individual particle\n        float t = clamp(0.03*(-1.0*(time*(time-1.5))),0.0,1.0);\n        float d = 1.0-smoothstep(0.0,t,length(p));\n        d -= pow(length(p-uv)-1.0,2.0);\n        \n        // map to a color\n        vec3 col = palette(hash11(id),vec3(0.5),vec3(0.5),vec3(1.0),vec3(0.0,0.33,0.67));\n        res += clamp(d,0.0,1.0)*col;\n    }\n    return res;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Render fireworks and trails\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec2 p = uv;\n    \n    // scaling factor\n    float factor = 2.0;\n    uv = fract(uv*factor)-0.5;\n    \n    // Sample previous texture to create trails\n    vec3 col = vec3(0.0);\n    col += 0.98*texture(iChannel0,fragCoord/iResolution.xy).rgb;\n    float loop = PI;\n    \n    // Sample squares around so offset particles carry over\n    for (float r = -1.0; r < 2.0; r++)\n    {\n        for (float c = -1.0; c < 2.0; c++)\n        {\n            float rid = getID(p+vec2(c/factor,r/factor),factor);\n            float time = sqrt(1.5*mod((iTime*hash11(rid+loop))-hash11(rid)*loop,loop));\n            col += fwParticles(uv-vec2(c,r), time, rid);\n        }\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}