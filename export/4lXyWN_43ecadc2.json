{"ver":"0.1","info":{"id":"4lXyWN","date":"1504767767","viewed":1648,"name":"Integer Hash(uvec3â‡’vec3)","username":"tomohiro","description":"Based on https://www.shadertoy.com/view/XlXcW4, but fewer integer operators","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["2d","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.shadertoy.com/view/XlXcW4, but fewer integer operators.\n// Not testes for uniformity, stratification, periodicity or whatever. Use (or not!) at your own risk\n\n  const uint k = 1103515245U;  // GLIB C\n//const uint k = 134775813U;   // Delphi and Turbo Pascal\n//const uint k = 1664525U;     // Numerical Recipes\n\nvec3 hash( uvec3 x )\n{\n    //I think the value of x is usually comes from 2D/3D coordinates or time in most of applications.\n    //These values are small and continuous.\n    //So, multiply large prime value first.\n    x*=k;\n    //mix x, y, z values.\n    //Without shift operator, x, y and z value become same value.\n    x = ((x>>2u)^(x.yzx>>1u)^x.zxy)*k;\n \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uvec3 p = uvec3(fragCoord, iFrame);\n    \n    fragColor = vec4( hash(p), 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}