{"ver":"0.1","info":{"id":"cdjfDw","date":"1689778972","viewed":135,"name":"Human Shader (Warning Spoil)","username":"benito_luna","description":"Quick implementation of https://humanshader.com/\nUncomment PLEASE_SPOIL_ME if you want be spoiled\n\nNow I still don't get what those instructions has to do the final image :) ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["humanshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PLEASE_SPOIL_ME\n\nint RemoveLastDigits(int Value, int DigitToRemove)\n{\n    if( DigitToRemove==1 ) return (Value+5)/10;\n    if( DigitToRemove==2 ) return (Value+50)/100;\n    if( DigitToRemove==3 ) return (Value+500)/1000;\n    if( DigitToRemove==4 ) return (Value+5000)/10000;\n    return 0;\n}\n\nivec3 SectionE(int R, int B)\n{\n   if (R > 255)\n   {\n       R = 255;\n   }\n   if (B > 255)\n   {\n       B = 255;\n   }\n   int G = RemoveLastDigits(7 * R + 3 * B, 1);\n   if (G > 255)\n   {\n       G = 255;\n   }\n   return ivec3(R,G,B);   \n}\n\nivec3 SectionB(int u, int v, int h)\n{\n    int R = 420;\n    int B = 520;\n    int t = 5000 + 8 * h;\n    int p = RemoveLastDigits(t * u, 2);\n    int q = RemoveLastDigits(t * v, 2);\n    int s = 2 * q;\n    int w = RemoveLastDigits(1000 + p - s, 2) + 8;\n    if (w > 0) \n    {\n      R = R + w *w;      \n    }\n    int o = s + 2200;\n    R = RemoveLastDigits(R * o, 4);\n    B = RemoveLastDigits(B * o, 4);\n    if (p > -q)\n    {\n      w = RemoveLastDigits(p + q, 1);\n      R = R + w;\n      B = B + w;\n    }\n    return SectionE(R,B);    \n}\n\nivec3 SectionC(int u, int v, int h)\n{\n    int R = 150 + 2 * v;\n    int B = 50;\n    int p = h + 8 * v * v;\n    int c = 240 * (-v) - p;\n    if (c > 1200)\n    {\n        int o = RemoveLastDigits(6 * c, 1);\n        o = c * (1500 - o);\n        o = RemoveLastDigits(o, 2) - 8360;\n        R = R * RemoveLastDigits(o, 3);\n        B = B * RemoveLastDigits(o, 3);\n    }\n    int r = c + u * v;\n    int d = 3200 - h - 2 * r;\n    if (d > 0)\n    {\n        R = R + d;\n    }\n    return SectionE(R,B);\n}\n\nivec3 SectionD(int u, int v, int h, int x, int y)\n{\n    int c = x + 4 * y;\n    int R = 132 + c;\n    int B = 192 + c;\n    return SectionE(R,B);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    #ifdef PLEASE_SPOIL_ME\n    //Section A\n    int x = int(fragCoord.x / iResolution.x * 71.0);\n    int y = int((iResolution.y - fragCoord.y)/ iResolution.y * 40.0);\n    int u = x - 36;\n    int v = 18 - y;\n    int h = u * u + v * v;\n    ivec3 Result = ivec3(0);\n    if (h < 200)\n    {\n        Result = SectionB(u,v,h);\n    }\n    else if (v < 0)\n    {\n        Result = SectionC(u,v,h);\n    }\n    else\n    {      \n        Result = SectionD(u,v,h, x, y);\n    }\n    \n    fragColor = vec4(vec3(Result)/255.f,1.0);\n    #endif\n    \n}","name":"Image","description":"","type":"image"}]}