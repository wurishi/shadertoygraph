{"ver":"0.1","info":{"id":"XfBczz","date":"1721833820","viewed":36,"name":"Stylized Black Hole","username":"MetaMuffin","description":"Made for \"Hurry Curry!\" (https://metamuffin1.itch.io/hurrycurry).\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Stylized Black Hole - GLSL Shader for Hurry Curry!\n    Copyright 2024 metamuffin\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published by\n    the Free Software Foundation, version 3 of the License only.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n*/\n\nvec3 rotateY(vec3 p, float ang) {\n    float s = sin(ang); float c = cos(ang);\n    return vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float type = clamp(-sin(iTime+0.2)*8.,-1.,1.);\n\n    float a = iTime / 3.;\n    vec3 ray = rotateY(vec3(0.,0.,-3.),a);\n    vec3 rv = rotateY(normalize(vec3(uv.x,uv.y,1.)),a);\n\n    vec3 em = vec3(0.);\n    bool hit = false;\n\tfor (int i = 0; i < 1000; i++) {\n\t\tfloat st = length(ray) * 0.01;\n\t\tray += normalize(rv) * st;\n\t\tif (length(ray) < 1.) { hit = true; break; }\n\t\trv += -normalize(ray) * -type / exp(dot(ray,ray)) * st;\n\t\tem += st * smoothstep(1.5,1.2,length(ray)) * 0.2;\n\t}\n    \n    vec3 col = hit ? vec3(type*.5+.5) : texture(iChannel0, normalize(rv)).rgb * 0.8;\n\tcol += vec3(0.3,0.0,1.0) * max(em - 0.1,0.);\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}