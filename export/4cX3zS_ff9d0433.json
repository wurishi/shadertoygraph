{"ver":"0.1","info":{"id":"4cX3zS","date":"1703170397","viewed":25,"name":"box in box","username":"nayk","description":"copypast and combination","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["cube","colorful","rotate","box","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MDIST 350.0\n#define STEPS 200.0\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define pmod(p,x) (mod(p,x)-0.5*(x))\n/* originals https://www.shadertoy.com/view/fsGXWG https://www.shadertoy.com/view/7sV3WD https://www.shadertoy.com/view/fsySWm https://www.shadertoy.com/view/DlycWR*/\n//iq palette\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(2.*pi*(c*t+d));\n}\nfloat h21 (vec2 a) {\n    return fract(sin(dot(a.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\nfloat h11 (float a) {\n    return fract(sin((a)*12.9898)*43758.5453123);\n}\nfloat box(vec3 p, vec3 b){\n    vec3 d = abs(p)-b;\n    return max(d.x,max(d.y,d.z));\n}\n//iq box sdf\nfloat ebox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat swave(float x, float a){\n    return (sin(x*pi/3.-pi/2.)/sqrt(a*a+sin(x*pi/3.-pi/2.)*sin(x*pi/3.-pi/2.))+1./sqrt(a*a+1.))*0.5;\n}\nvec3 rdg = vec3(0);\n//No Cell bounds SDF of the blocks\nfloat nsdf = 0.;\nbool rnsdf = false;\nvec2 blocks(vec3 p, vec3 scl, vec3 rd){\n    float t = iTime;\n   \n    bvec3 isEdge = bvec3(true);\n    // the domain of the fractal being generated\n    // will be modified in the iteration part\n    vec3 dMin = vec3(-0.5) * scl;\n    vec3 dMax = vec3(0.5) * scl;\n    vec3 dMini = dMin;\n    vec3 dMaxi = dMax;\n   \n    float id = 0.;\n    float seed = floor(t/8.)+0.2;\n   \n    float ITERS = 5.;\n   \n    vec3 dim = dMax - dMin;\n    //Big thanks for @0b5vr for cleaner version of subdiv algo\n    for (float i = 0.; i < ITERS; i++) {\n\n        vec3 divHash = vec3(\n            0.49,\n            0.501,\n            0.511\n        );\n        vec3 divide = divHash * dim + dMin;\n        // update the box domain\n        dMax = mix( dMax, divide, step( p, divide ));\n        dMin = mix( divide, dMin, step( p, divide ));\n\n        float pad = 0.11;\n        if(dMaxi.x>dMax.x+pad&&dMini.x<dMin.x-pad)isEdge.x=false;\n        if(dMaxi.y>dMax.y+pad&&dMini.y<dMin.y-pad)isEdge.y=false;\n        if(dMaxi.z>dMax.z+pad&&dMini.z<dMin.z-pad)isEdge.z=false;\n       \n        // id will be used for coloring and hash seeding\n       \n        vec3 diff = mix( -divide, divide, step( p, divide));\n        id = length(diff + 10.0);\n   \n        // recalculate the dimension\n        dim = dMax - dMin;\n    }\n    float volume = dim.x*dim.y*dim.z;\n    vec3 center = (dMin + dMax)/2.0;\n    float b = 0.;\n    if(any(isEdge)) {\n   \n        float expand = 1.05+0.45*(length(center+100.0)*0.35+t*3.0*pi/3.)*0.5+0.5;\n        //expand = 1.5;\n        if(isEdge.x){\n        dim.x+=abs(center.x*expand-center.x)*2.0;\n        center.x*=expand;\n        }\n        if(isEdge.y){\n        dim.y+=abs(center.y*expand-center.y)*2.0;\n        center.y*=expand;\n        }\n        if(isEdge.z){\n        dim.z+=abs(center.z*expand-center.z)*2.0;\n        center.z*=expand;\n        }\n        //id = 1.;\n    }\n   \n    vec3 edgeAxis = mix(dMin, dMax, step(0.0, rd));\n    vec3 dAxis = abs(p - edgeAxis) / (abs(rd) + 1E-4);\n    float dEdge = min(dAxis.x,min(dAxis.y,dAxis.z));\n    b= dEdge;\n    vec3 d = abs(center);\n    dim-=0.4;\n    float a = ebox(p-center,dim*0.5)-0.2;\n\n\n    nsdf = a;\n    a = min(a, b);\n\n   \n    id = h11(id)*1000.0;\n\n    return vec2(a,id);\n}\n\nvec3 map(vec3 p){\n    float t = iTime;\n\n    vec3 po = p;\n    vec2 a = vec2(1);\n\n    vec3 scl = vec3(10,10,10);\n    vec3 rd2 = rdg;\n   \n    a = blocks(p,scl,rd2)+0.01;\n   \n   \n    a.x = max(box(p,vec3(scl*1.3)),a.x);\n   \n\n    return vec3(a,nsdf);\n}\nvec3 norm(vec3 p){\n    vec2 e = vec2(0.01,0.);\n    return normalize(map(p).x-vec3(\n    map(p-e.xyy).x,\n    map(p-e.yxy).x,\n    map(p-e.yyx).x));\n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    float t = iTime;\n   vec4 O = fragColor;\n   vec2 C = fragCoord;\n O=vec4(0);\n vec2 m = (.5 * iResolution.xy - iMouse.xy) / iResolution.x * 6.28;\n    vec3 e = vec3(cos(iTime) * cos(iTime), sin(iTime) * cos(iTime), sin(iTime));\n    vec3 u = normalize(vec3(e.y, -e.x, 0));\n    vec3 v = cross(e, u);\n   \n\n    vec3 d3 = e + uv.x * u + uv.y * v;\n    vec3 a = (e + .1) / d3;\n    vec3 b = (e - .1) / d3;\n    float mi = max(max(min(a.x, b.x), min(a.y, b.y)), min(a.z, b.z));\n    float ma = min(min(max(a.x, b.x), max(a.y, b.y)), max(a.z, b.z));\n    float t2 = mi < ma ? mi : 10.;\n    vec3 i2 = e - d3 * t2;\n    vec3 c = (step(-.099, i2) + step(.099, i2) - 1.) * d3;\n    vec3 p2,q,r2=iResolution,\n    d2=normalize(vec3((C*2.-r2.xy)/r2.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p2=g*d2;\n        p2.z+=iTime*0.0;\n        a=20.;\n        p2=mod(p2-a,a*2.)-a;\n        s=8.;\n      p2.xz*=rot(iTime*1.);\n        p2.yz*=rot(iTime*1.);\n        for(int i=0;i++<8;){\n            p2=.3-abs(p2);\n           \n            p2.x<p2.z?p2=p2.zyx:p2;\n            p2.z<p2.y?p2=p2.xzy:p2;\n            p2.y<p2.x?p2=p2.zyx:p2;\n           \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p2=abs(p2)*e-\n                vec3(\n                    5.+cos(iTime*.3+1.5*cos(iTime*.3))*3.,\n                    120,\n                    10.+cos(iTime*.5)*5.\n                 )+c;\n         }\n       //  g+=e=length(p.yz)/s;\n         g+=e=length(p2.yx)/s;\n    }\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0,11.5,-50);\n   \n   \n   // else ro.xz*=rot(t*0.3);\n    ro.xz*=rot(iTime);\n    ro.yz*=rot(iTime);\n    vec3 lk = vec3(0,0.,0);\n    vec3 f = normalize(lk-ro);\n    vec3 r = normalize(cross(vec3(0,1,0),f));\n    vec3 rd = normalize(f*(0.99)+uv.x*r+uv.y*cross(f,r));    \n    rdg = rd;\n    vec3 p = ro;\n    float dO = 0.;\n    vec3 d = vec3(0);\n    bool hit = false;\n    for(float i = 0.; i<STEPS; i++){\n        p = ro+rd*dO;\n        d = map(p);\n        dO+=d.x*0.99;\n        if(abs(d.x)<0.0001||i==STEPS-1.){\n            hit = true;\n            break;\n        }\n        if(d.x>MDIST){\n            dO=MDIST;\n            break;\n        }\n    }\n    if(hit){\n        vec3 ld = normalize(vec3(1.5,0.9,-0.9));\n        vec3 n = norm(p);\n        vec3 r = reflect(rd,n);\n        vec3 e = vec3(.5);\n        vec3 al = pal(fract(d.y+t*10.0/12.0)*0.6-0.2,e*1.5,e,e*2.0,vec3(0,0.33,0.66));\n        col = al;\n       \n        //lighting EQs from @blackle\n        float spec = length(sin(r*5.)*.5+.5)/sqrt(3.);\n        float fres = 1.-abs(dot(rd,n))*0.9;\n       \n        float diff = length(sin(n*2.)*.5+.7)/sqrt(3.);\n       \n        #define AO(a,n,p) smoothstep(-a,a,map(p+n*a).z)\n        float ao = AO(1.3,n,p)*AO(.5,n,p)*AO(.9,n,p)*O.z;\n        col = ao*diff+pow(spec,5.0)*fres*diff*vec3(1.000,0.878,1.792)+O.xyz;\n        col*=pow(ao,0.4);\n       \n    }\n    //col = pow(col,vec3(0.99));\n    vec3 bg = mix(vec3(0.55,1.780,1.988),vec3(1.424,0.059,0.925),length(uv));\n    col = mix(col,bg,dO/MDIST);\n    fragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}