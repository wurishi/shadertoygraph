{"ver":"0.1","info":{"id":"WlcSR2","date":"1581293261","viewed":273,"name":"gloworm","username":"monsterkodi","description":"fiddling with code from the awesome 'Biomine' by Shane\nhttps://www.shadertoy.com/view/4lyGzR","likes":14,"published":1,"flags":16,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4lyGzR 'Biomine' by Shane\n\n#define keys(x,y)  texelFetch(iChannel0, ivec2(x,y), 0)\nbool keyState(int key) { return keys(key, 2).x < 0.5; }\nbool keyDown(int key)  { return keys(key, 0).x > 0.5; }\n\n#define ZERO min(iFrame,0)\n#define CAM_DIST   0.01\n#define MAX_STEPS  256\n#define MIN_DIST   0.001\n#define MAX_DIST   60.0\n\n#define NONE 0\n#define GYRO 1\n#define HEAD 2\n#define TAIL 3\n\nbool space, anim, soft, occl, light, dither, foggy, rotate, normal, depthb;\n\nfloat hash(float n) { return fract(cos(n)*45758.5453); }\nmat2  rot2(float a) { vec2 v = sin(vec2(1.570796, 0) + a); return mat2(v, -v.y, v.x); }\n\nfloat at;\nint screen;\n\nfloat noise3D(in vec3 p)\n{\n    const vec3 s = vec3(7, 157, 113);\n    vec3 ip = floor(p); p -= ip; \n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n    p = p*p*(3. - 2.*p); \n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z);\n}\n\nfloat drawSphere(in vec3 p)\n{\n    p = fract(p)-.5;    \n    return dot(p, p);\n}\n\nfloat cellTile(in vec3 p)\n{\n    vec4 d; \n    d.x = drawSphere(p - vec3(.81, .62, .53)); p.xy = vec2(p.y-p.x, p.y + p.x)*.7071;\n    d.y = drawSphere(p - vec3(.39, .2,  .11)); p.yz = vec2(p.z-p.y, p.z + p.y)*.7071;\n    d.z = drawSphere(p - vec3(.62, .24, .06)); p.xz = vec2(p.z-p.x, p.z + p.x)*.7071;\n    d.w = drawSphere(p - vec3(.2,  .82, .64));\n    d.xy = min(d.xz, d.yw);\n    return min(d.x, d.y)*2.66;\n}\n\n//  0000000   000   000  00000000    0000000   \n// 000         000 000   000   000  000   000  \n// 000  0000    00000    0000000    000   000  \n// 000   000     000     000   000  000   000  \n//  0000000      000     000   000   0000000   \n\nvoid gyro()\n{\n    vec3 p = gl.sdf.pos;\n    float d = dot(cos(p*PI2), sin(p.yzx*PI2)) + 1.25;\n\n    sdMat(GYRO, d); \n}\n\n// 00000000  000      000   000  00000000  00000000   \n// 000       000       000 000   000       000   000  \n// 000000    000        00000    0000000   0000000    \n// 000       000         000     000       000   000  \n// 000       0000000     000     00000000  000   000  \n\nvec3 tailPos(float t) \n{\n    t += at;\n    return vec3(-t,0,0)+vz*(2.5+0.4*(1.35 + cos(1.7+t*PI2)))+vy*(0.05-0.5*(sin(-PI2+t*PI2)));\n}\n\nvoid flyer()\n{\n    vec3 tp = tailPos(-0.5/8.0);\n    vec3 hp = tailPos( 1.0/8.0);\n    float d = sdSphere(tp, 0.13);\n    d = opUnion(d, sdCapsule(hp, tp, 0.05), 0.1);\n    \n    sdMat(HEAD, d); \n    \n    float id = floor((gl.light1.x-gl.sdf.pos.x)*8.0);\n    gl.sdf.pos.x = fract((gl.sdf.pos.x-gl.light1.x)*8.0);\n    if (id < -1.0 && id > -30.0) \n    {\n        tp = tailPos(id/8.0);\n        d = min(d, sdEllipsoid(vec3(0.5,tp.yz), vec3(8.0,1,1)*(0.06*(1.0+id/30.0))));\n    }\n        \n    sdMat(TAIL, d); \n}\n\n// 00     00   0000000   00000000   \n// 000   000  000   000  000   000  \n// 000000000  000000000  00000000   \n// 000 0 000  000   000  000        \n// 000   000  000   000  000        \n\nvoid distort(inout vec3 p) \n{\n    if (iMouse.z < 1.0)\n    p *= rotMat(normalize(cam.x), 0.6*length((p-cam.pos).yz));\n}\n\nfloat map(vec3 p)\n{\n    float t = sin(iTime)*0.5+0.5;\n    \n    distort(p);\n\n    gl.sdf = SDF(MAX_DIST, p, NONE);\n    \n    gyro();\n    \n    if (gl.march) flyer(); \n    \n    return gl.sdf.dist;\n}\n\n// 0000000    000   000  00     00  00000000   \n// 000   000  000   000  000   000  000   000  \n// 0000000    000   000  000000000  00000000   \n// 000   000  000   000  000 0 000  000        \n// 0000000     0000000   000   000  000        \n\nfloat bumpSurf( in vec3 p)\n{\n    return cellTile(p*8.0)*2.0 + 0.1*noise3D(p*150.0);\n}\n\nvec3 doBumpMap(in vec3 p, in vec3 nor, float factor)\n{\n    distort(p);\n    \n    const vec2 e = vec2(0.001, 0);\n    float ref = bumpSurf(p);                 \n    vec3 grad = (vec3(bumpSurf(p - e.xyy),\n                      bumpSurf(p - e.yxy),\n                      bumpSurf(p - e.yyx))-ref)/e.x;                     \n    grad -= nor*dot(nor, grad);          \n    return normalize(nor + grad*factor);\n}\n\n// 00     00   0000000   00000000    0000000  000   000  \n// 000   000  000   000  000   000  000       000   000  \n// 000000000  000000000  0000000    000       000000000  \n// 000 0 000  000   000  000   000  000       000   000  \n// 000   000  000   000  000   000   0000000  000   000  \n\nfloat march(in vec3 ro, in vec3 rd)\n{\n    float t = 0.0, h;\n    for(int i = ZERO; i < 72; i++)\n    {\n        h = map(ro+rd*t);\n        if (abs(h)<0.001*max(t*.25, 1.) || t>MAX_DIST) break;        \n        t += step(h, 1.)*h*.2 + h*.5;\n    }\n    return min(t, MAX_DIST);\n}\n\nvec3 getNormal(in vec3 p) \n{\n    const vec2 e = vec2(0.002, 0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy), map(p + e.yxy) - map(p - e.yxy), map(p + e.yyx) - map(p - e.yyx)));\n}\n\n//  0000000  000   000   0000000   0000000     0000000   000   000  \n// 000       000   000  000   000  000   000  000   000  000 0 000  \n// 0000000   000000000  000000000  000   000  000   000  000000000  \n//      000  000   000  000   000  000   000  000   000  000   000  \n// 0000000   000   000  000   000  0000000     0000000   00     00  \n\nfloat softShadow(vec3 ro, vec3 rd, float start, float end, float k)\n{\n    float shade = 1.0;\n    float dist = start;\n\n    for (int i=ZERO; i<16; i++)\n    {\n        float h = map(ro + rd*dist);\n        shade = min(shade, k*h/dist);\n\n        dist += clamp(h, 0.01, 0.25);\n        \n        if (h<0.001 || dist > end) break; \n    }\n    return min(max(shade, 0.) + 0.1, 1.0); \n}\n\n//  0000000   00     00  0000000    000  00000000  000   000  000000000    \n// 000   000  000   000  000   000  000  000       0000  000     000       \n// 000000000  000000000  0000000    000  0000000   000 0 000     000       \n// 000   000  000 0 000  000   000  000  000       000  0000     000       \n// 000   000  000   000  0000000    000  00000000  000   000     000       \n\nfloat calculateAO( in vec3 p, in vec3 n )\n{\n    float ao = 0.0, l;\n    const float maxDist = 3.;\n    const float nbIte = 1.0;\n    for( float i=1.; i< nbIte+.5; i++ )\n    {\n        l = (i + hash(i))*.5/nbIte*maxDist;\n        ao += (l - map( p + n*l ))/(1.+ l); \n    }\n    return clamp(1.- ao/nbIte, 0., 1.);\n}\n\n// 000      000   0000000   000   000  000000000  \n// 000      000  000        000   000     000     \n// 000      000  000  0000  000000000     000     \n// 000      000  000   000  000   000     000     \n// 0000000  000   0000000   000   000     000     \n\nvec3 getLight(vec3 p, vec3 n, vec3 rd, float d)\n{\n    vec3 col = v0;\n    vec3 frc = v0;\n    \n    float ff;\n    \n    vec3 p2l = gl.light1-p;\n    float lightDist = length(p2l);\n    float atten = pow(max(0.0, 1.0-lightDist/40.0), 6.0);\n        \n    int mat = gl.sdf.mat;\n    \n    switch (mat)\n    {\n        case GYRO: \n            col = vec3(1,0,0); \n            frc = vec3(0.8, 0.5, 0);\n            n = doBumpMap(p, n, dither ? 0.006 : 0.008);\n            ff = 32.0 * atten * atten * atten;\n            break;\n        case HEAD: \n        case TAIL: \n            col = vec3(1,0.5,0); \n            frc = vec3(1,0.5,0);\n            ff = mat == HEAD ? 100.0 : 18.0;\n            p2l -= cam.dir*0.2;\n            break;\n    }\n    \n    float ao = occl ? calculateAO(p, n) : 1.0;\n        \n    vec3 ln = normalize(p2l);\n    \n    float ambience = 0.01;\n    float diff = max(dot(n, ln), 0.0);\n    float spec = pow(max(dot(reflect(-ln, n), -rd), 0.0), 32.0);\n    float fre  = pow(clamp(dot(n, rd) + 1.0, 0.0, 1.0), 1.0);\n    \n    float shading = softShadow(p, ln, 0.05, lightDist, 8.0);\n    \n    if (mat == GYRO) \n    {\n        col *= diff + ambience + spec + frc*pow(fre,4.0)*ff;\n        col *= atten*shading*ao;\n    }\n    else if (mat == TAIL) \n    {\n        col = col * (0.5 + diff + spec) + frc*pow(fre,4.0)*ff;\n    }\n    else\n    {\n        col += frc*pow(fre,4.0)*ff;\n    }\n    \n    if (light) col = vec3(atten*shading*ao*(diff + ambience + spec +pow(fre,4.0)*ff));\n    else if (foggy) col = mix(vec3(0.001,0.0,0.0), col, 1.0/(1.0+d*d/MAX_DIST));\n    \n    return col;\n}\n// 00     00   0000000   000  000   000  \n// 000   000  000   000  000  0000  000  \n// 000000000  000000000  000  000 0 000  \n// 000 0 000  000   000  000  000  0000  \n// 000   000  000   000  000  000   000  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    initGlobal(fragCoord, iResolution, iMouse, iTime);\n    gl.zero = ZERO;\n    for (int i = KEY_1; i <= KEY_9; i++) { if (keyDown(i)) { gl.option = i-KEY_1+1; break; } }\n    \n    rotate =  keyState(KEY_R);\n    anim   =  keyState(KEY_RIGHT);\n    occl   =  keyState(KEY_UP);\n    dither =  keyState(KEY_D);\n    normal = !keyState(KEY_X);\n    depthb = !keyState(KEY_Z);\n    light  = !keyState(KEY_LEFT);\n    space  = !keyState(KEY_SPACE);\n    foggy  =  keyState(KEY_F);\n    \n    if (anim)\n        at = 0.5*iTime;\n    \n    initCam(CAM_DIST, vec2(0));\n    \n    lookAtFrom(vec3(0,0,2.5), vec3(0,0,0));\n    lookPan(vec3(-at,0,0));\n    if (rotate)\n        orbit(-sin(at*PI2)*5.0, sin(at*PI2)*5.0);\n            \n    if (iMouse.z > 0.0)\n        lookAtFrom(vec3(-at,0,2.5), vec3(-at,0,2.5) + rotAxisAngle(vec3(0,0,-2.5-1.5*gl.mp.y), vy, gl.mp.x*90.0));\n        \n    #ifndef TOY\n    if (space) lookAtFrom(iCenter, iCamera);\n    #endif\n    \n    gl.uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec3 rd = normalize(gl.uv.x*cam.x + gl.uv.y*cam.up + cam.fov*cam.dir);\n    \n    gl.light1 = vec3(-at,0,0)+vz*(2.5+0.4*(1.35 + cos(1.7+at*PI2)))+vy*(0.35-0.5*(sin(-PI2+at*PI2)));\n    \n    gl.march = true;\n    float d = march(cam.pos, rd);\n    vec3  p = cam.pos + d * rd;\n    vec3  n = getNormal(p);\n    vec3  col = v0;\n    gl.march = false;\n           \n    if (normal || depthb)\n    {\n        vec3 nc = normal ? d >= MAX_DIST ? black : n : white;\n        vec3 zc = depthb ? vec3(1.0-pow(d/MAX_DIST,0.1)) : white;\n        col = nc*zc;\n    }\n    else\n    {\n        col = getLight(p, n, rd, d);\n    }\n        \n    #ifndef TOY\n    col += vec3(print(0,0,vec2(iFrameRate, iTime)));\n    #endif    \n\n    fragColor = vec4(sqrt(clamp(col, 0., 1.)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define TOY\n#define PI   3.141592653589\n#define PI2  1.570796326795\n#define TAU  6.283185307178\n#define E    2.718281828459\n#define EPS  0.000000000001\n#define PHI  1.618033988750\n#define EPS1 1.00001\n\n#define KEY_LEFT  37\n#define KEY_UP    38\n#define KEY_RIGHT 39\n#define KEY_DOWN  40\n#define KEY_SPACE 32\n#define KEY_1     49\n#define KEY_9     57\n#define KEY_A     65\n#define KEY_C     67\n#define KEY_D     68\n#define KEY_E     69\n#define KEY_F     70\n#define KEY_N     78\n#define KEY_Q     81\n#define KEY_R     82\n#define KEY_S     83\n#define KEY_W     87\n#define KEY_X     88\n#define KEY_Z     90\n\nconst vec3 v0 = vec3(0,0,0);\nconst vec3 vx = vec3(1,0,0);\nconst vec3 vy = vec3(0,1,0);\nconst vec3 vz = vec3(0,0,1);\n\nconst vec3 red   = vec3(0.8,0.0,0.0);\nconst vec3 green = vec3(0.0,0.5,0.0);\nconst vec3 blue  = vec3(0.2,0.2,1.0);\nconst vec3 white = vec3(1.0,1.0,1.0);\nconst vec3 black = vec3(0.0,0.0,0.0);\n\n#define sdMat(m,d)  if (d < gl.sdf.dist) { gl.sdf.dist = d; gl.sdf.mat = m; }\n    \n//  0000000   000       0000000   0000000     0000000   000      \n// 000        000      000   000  000   000  000   000  000      \n// 000  0000  000      000   000  0000000    000000000  000      \n// 000   000  000      000   000  000   000  000   000  000      \n//  0000000   0000000   0000000   0000000    000   000  0000000  \n\nstruct Text {\n    ivec2 size;\n    ivec2 adv;\n} text;\n\nstruct SDF {\n    float dist;\n    vec3  pos;\n    int   mat;\n};\n\nstruct _gl {\n    vec2  uv;\n    vec2  frag;\n    vec2  mouse;\n    vec2  mp;\n    ivec2 ifrag;\n    float aspect;\n    vec4  color;\n    int   option;\n    float time;\n    vec3  light1;\n    vec3  light2;\n    float ambient;\n    float shadow;\n    int   zero;\n    bool  march;\n    SDF   sdf;\n} gl;\n\nstruct _cam {\n    vec3  tgt;\n    vec3  pos;\n    vec3  pos2tgt;\n    vec3  dir;\n    vec3  up;\n    vec3  x;\n    float dist;\n    float fov;\n} cam;\n\nstruct Mat {\n    float hue;\n    float sat;\n    float lum;\n    float shiny;\n    float glossy;\n};\n\nuniform sampler2D fontChannel;\n\nvoid initGlobal(vec2 fragCoord, vec3 resolution, vec4 mouse, float time)\n{\n    text.size = ivec2(16,32)*2;\n    text.adv  = ivec2(text.size.x,0);\n    \n    mouse.xy = min(mouse.xy,resolution.xy);\n    if (mouse.z < 1.0)\n    {\n        if (mouse.z > -1.0)\n            gl.mouse = resolution.xy*0.5;\n        else\n            gl.mouse = mouse.xy;\n    }\n    else gl.mouse = mouse.xy;\n    \n    gl.mp = (2.0*abs(gl.mouse)-vec2(resolution.xy))/resolution.y;    \n\n    gl.aspect = resolution.x / resolution.y;\n    gl.frag   = fragCoord;\n    gl.ifrag  = ivec2(fragCoord);\n    gl.uv     = (fragCoord+fragCoord-resolution.xy)/resolution.y;\n    \n    gl.ambient = 0.03;\n    gl.shadow  = 0.25;\n}\n\nfloat powi(int a, int b) { return pow(float(a), float(b)); }\nfloat log10(float a) { return log(a)/log(10.0); }\nfloat clamp01(float v) { return clamp(v, 0.0, 1.0); }\nvec3  clamp01(vec3 v) { return clamp(v, 0.0, 1.0); }\n\n// 00000000   00000000   000  000   000  000000000  \n// 000   000  000   000  000  0000  000     000     \n// 00000000   0000000    000  000 0 000     000     \n// 000        000   000  000  000  0000     000     \n// 000        000   000  000  000   000     000     \n\n#ifndef TOY\nfloat print(ivec2 pos, int ch)\n{\n    ivec2 r = gl.ifrag-pos; bool i = r.y>0 && r.x>0 && r.x<=text.size.y && r.y<=text.size.y;\n    return i ? texelFetch(iChannel2,ivec2((ch%16)*64,(1024-64-64*(ch/16)))+r*64/text.size.y,0).r : 0.0;\n}\n\nfloat print(ivec2 pos, float v)\n{\n    float c = 0.0; ivec2 a = text.adv; \n    float fv = fract(v);\n    v = (fv > 0.995 || fv < 0.005) ? round(v) : v;\n    float f = abs(v);\n    int i = (fv == 0.0) ? 1 : fract(v*10.0) == 0.0 ? -1 : -2;\n    int ch, u = max(1,int(log10(f))+1);\n    ivec2 p = pos+6*a;\n    for (; i <= u; i++) {\n        if (i == 0)     ch = 46;\n        else if (i > 0) ch = 48+int(mod(f, powi(10,i))/powi(10,i-1));\n        else            ch = 48+int(mod(f+0.005, powi(10,i+1))/powi(10,i));\n        c = max(c, print(p-i*a, ch)*float(i+3)/30.0); }\n    if (v < 0.0) c = max(c, print(p-i*a, 45)*float(i)/30.0);\n    return c;\n}\n\nfloat print(ivec2 pos, vec4 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 4; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(ivec2 pos, vec3 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 3; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(ivec2 pos, vec2 v)\n{\n    float c = 0.0;\n    for (int i = 0; i < 2; i++) {\n        c = max(c, print(pos, v[i]));\n        pos += text.adv*8; }\n    return c;\n}\n\nfloat print(int x, int y, int v)   { return print(ivec2(text.size.x*x,text.size.y*y), float(v)); }\nfloat print(int x, int y, float v) { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, vec4 v)  { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, vec3 v)  { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, vec2 v)  { return print(ivec2(text.size.x*x,text.size.y*y), v); }\nfloat print(int x, int y, ivec3 v) { return print(ivec2(text.size.x*x,text.size.y*y), vec3(v)); }\n#endif\n\n// 000   000   0000000    0000000  000   000  \n// 000   000  000   000  000       000   000  \n// 000000000  000000000  0000000   000000000  \n// 000   000  000   000       000  000   000  \n// 000   000  000   000  0000000   000   000  \n\nfloat hash11(float p)\n{\n    p = fract(p * 0.1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(12.3,456.7,8912.3));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 hash31(float p)\n{\n   return hash33(vec3(p));\n}\n\nfloat hash12(vec2 p)\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat gradientNoise(vec2 v)\n{\n    return fract(52.9829189 * fract(dot(v, vec2(0.06711056, 0.00583715))));\n}\n\n// 000   000   0000000  000      \n// 000   000  000       000      \n// 000000000  0000000   000      \n// 000   000       000  000      \n// 000   000  0000000   0000000  \n\nvec3 hsl2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvec3 hsl(float h, float s, float l) { return hsl2rgb(vec3(h,s,l)); }\n\nvec3 rgb2hsl( vec3 col )\n{\n    float minc = min( col.r, min(col.g, col.b) );\n    float maxc = max( col.r, max(col.g, col.b) );\n    vec3  mask = step(col.grr,col.rgb) * step(col.bbg,col.rgb);\n    vec3 h = mask * (vec3(0.0,2.0,4.0) + (col.gbr-col.brg)/(maxc-minc + EPS)) / 6.0;\n    return vec3( fract( 1.0 + h.x + h.y + h.z ),              \n                 (maxc-minc)/(1.0-abs(minc+maxc-1.0) + EPS),  \n                 (minc+maxc)*0.5);\n}\n\nvec3 colsat(vec3 col, float sat)\n{\n    vec3 h = rgb2hsl(col);\n    return hsl(h.x,sat,h.z);\n}\n\nvec3 gray(vec3 col)\n{\n    return colsat(col, 0.0);\n}\n\n// 00     00   0000000   000000000  00000000   000  000   000  \n// 000   000  000   000     000     000   000  000   000 000   \n// 000000000  000000000     000     0000000    000    00000    \n// 000 0 000  000   000     000     000   000  000   000 000   \n// 000   000  000   000     000     000   000  000  000   000  \n\nmat3 alignMatrix(vec3 dir) \n{\n    vec3 f = normalize(dir);\n    vec3 s = normalize(cross(f, vec3(0.48, 0.6, 0.64)));\n    vec3 u = cross(s, f);\n    return mat3(u, s, f);\n}\n\n// 00000000    0000000   000000000  \n// 000   000  000   000     000     \n// 0000000    000   000     000     \n// 000   000  000   000     000     \n// 000   000   0000000      000     \n\nfloat rad2deg(float r) { return 180.0 * r / PI; }\nfloat deg2rad(float d) { return PI * d / 180.0; }\n\nvec3  rad2deg(vec3 v) { return 180.0 * v / PI; }\nvec3  deg2rad(vec3 v) { return PI * v / 180.0; }\n\nmat3  rotMat(vec3 u, float angle)\n{\n    float s = sin(deg2rad(angle));\n    float c = cos(deg2rad(angle));\n    float i = 1.0-c;\n    \n    return mat3(\n        c+u.x*u.x*i, u.x*u.y*i-u.z*s, u.x*u.z*i+u.y*s,\n        u.y*u.x*i+u.z*s, c+u.y*u.y*i, u.y*u.z*i-u.x*s,\n        u.z*u.x*i-u.y*s, u.z*u.y*i+u.x*s, c+u.z*u.z*i\n        );\n}\n\nvec3 rotAxisAngle(vec3 position, vec3 axis, float angle)\n{\n    mat3 m = rotMat(axis, angle);\n    return m * position;\n}\n\n// 00000000    0000000   000       0000000   00000000   \n// 000   000  000   000  000      000   000  000   000  \n// 00000000   000   000  000      000000000  0000000    \n// 000        000   000  000      000   000  000   000  \n// 000         0000000   0000000  000   000  000   000  \n\nvec3 polar(vec3 v)\n{\n    float radius = length(v);\n    float phi    = atan(v.y, v.x);\n    float rho    = acos(v.z/radius);\n    return vec3(phi, rho, radius);\n}\n\nvec3 unpolar(vec3 v)\n{\n    float s = sin(v.y);\n    float x = s * cos(v.x);\n    float y = s * sin(v.x);\n    float z =     cos(v.y);\n    return vec3(x, y, z)*v.z;\n}\n\nvec3 polar2(vec3 v)\n{\n    float radius = length(v);\n    float phi    = atan(v.z, v.x);\n    float rho    = acos(v.y/radius);\n    return vec3(phi, rho, radius);\n}\n\nvec3 unpolar2(vec3 v)\n{\n    float s = sin(v.y);\n    float x = s * cos(v.x);\n    float z = s * sin(v.x);\n    float y =     cos(v.y);\n    return vec3(x, y, z)*v.z;\n}\n\n//  0000000   000   000   0000000   000000000  \n// 000   000  000   000  000   000     000     \n// 000 00 00  000   000  000000000     000     \n// 000 0000   000   000  000   000     000     \n//  00000 00   0000000   000   000     000     \n\nvec4 quatAxisAngle(vec3 axis, float angle)\n{ \n    float half_angle = deg2rad(angle*0.5);\n    return vec4(axis*sin(half_angle), cos(half_angle));\n}\n\nvec4 quatConj(vec4 q)\n{ \n    return vec4(-q.x, -q.y, -q.z, q.w); \n}\n  \nvec4 quatMul(vec4 q1, vec4 q2)\n{ \n    vec4 qr;\n    qr.x = (q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y);\n    qr.y = (q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x);\n    qr.z = (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w);\n    qr.w = (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z);\n    return qr;\n}\n\nvec3 rotAxisAngleQuat(vec3 p, vec3 axis, float angle)\n{ \n    vec4 qr = quatAxisAngle(axis, angle);\n    return quatMul(quatMul(qr, vec4(p, 0)), quatConj(qr)).xyz;\n}\n\nvec3 rotRayAngle(vec3 p, vec3 ro, vec3 rd, float angle)\n{ \n    return rotAxisAngle(p-ro, rd-ro, angle)+ro;\n}\n\nvec3 rotY(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x*c+v.z*s, v.y, v.z*c+v.x*s);\n}\n\nvec3 rotX(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x, v.y*c+v.z*s, v.z*c+v.y*s);\n}\n\nvec3 rotZ(vec3 v, float d)\n{\n    float r = deg2rad(d);\n    float c = cos(r);\n    float s = sin(r);\n    return vec3(v.x*c+v.y*s, v.y*c+v.x*s, v.z);\n}\n\n//  0000000   00000000   0000000   00     00    \n// 000        000       000   000  000   000    \n// 000  0000  0000000   000   000  000000000    \n// 000   000  000       000   000  000 0 000    \n//  0000000   00000000   0000000   000   000    \n\nvec3 posOnPlane(vec3 p, vec3 a, vec3 n)\n{\n    return p-dot(p-a,n)*n;\n}\n\nvec3 posOnRay(vec3 ro, vec3 rd, vec3 p)\n{\n    return ro + max(0.0, dot(p - ro, rd) / dot(rd, rd)) * rd;\n}\n\nbool rayIntersectsSphere(vec3 ro, vec3 rd, vec3 ctr, float r)\n{\n    return length(posOnRay(ro, rd, ctr) - ctr) < r;\n}\n\n//  0000000   00000000   \n// 000   000  000   000  \n// 000   000  00000000   \n// 000   000  000        \n//  0000000   000        \n\nfloat opUnion(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) - k*h*(1.0-h);\n}\n\nfloat opDiff(float d1, float d2, float k) \n{\n    float h = clamp(0.5 - 0.5*(d2+d1)/k, 0.0, 1.0);\n    return mix(d1, -d2, h) + k*h*(1.0-h);\n}\n\nfloat opInter(float d1, float d2, float k) \n{\n    \n    float h = clamp(0.5 - 0.5*(d2-d1)/k, 0.0, 1.0);\n    return mix(d2, d1, h) + k*h*(1.0-h);\n}\n\nfloat opDiff (float d1, float d2) { return opDiff (d1, d2, 0.0); }\nfloat opUnion(float d1, float d2) { return opUnion(d1, d2, 0.5); }\nfloat opInter(float d1, float d2) { return opInter(d1, d2, 0.2); }\n\n//  0000000  0000000    \n// 000       000   000  \n// 0000000   000   000  \n//      000  000   000  \n// 0000000   0000000    \n\nfloat sdSphere(vec3 a, float r)\n{\n    return length(gl.sdf.pos-a)-r;\n}\n\nfloat sdPill(vec3 a, float r, vec3 n)\n{\n    vec3 p = gl.sdf.pos-a;\n    float d = abs(dot(normalize(n),normalize(p)));\n    float f = smoothstep(0.0, 1.3, d);\n    return length(p) - r + f * length(n);\n}\n\nfloat sdPlane(vec3 a, vec3 n)\n{   \n    return dot(n, gl.sdf.pos-a);\n}\n\nfloat sdPlane(vec3 n)\n{   \n    return dot(n, gl.sdf.pos);\n}\n\nfloat sdBox(vec3 a, vec3 b, float r)\n{\n  vec3 q = abs(gl.sdf.pos-a)-b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdEllipsoid(vec3 a, vec3 r)\n{\n    vec3 p = gl.sdf.pos-a;\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\nfloat sdCone(vec3 a, vec3 b, float r1, float r2)\n{\n    vec3 ab = b-a;\n    vec3 ap = gl.sdf.pos-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t, 0.0, 1.0);\n    vec3 c = a + t*ab;\n    return length(gl.sdf.pos-c)-(t*r2+(1.0-t)*r1);      \n}\n\nfloat sdLine(vec3 a, vec3 n, float r)\n{\n    vec3 p = gl.sdf.pos-a;\n    return length(p-n*dot(p,n))-r;\n}\n\nfloat sdCapsule(vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = gl.sdf.pos-a;\n    float t = dot(ab,ap) / dot(ab,ab);\n    t = clamp(t, 0.0, 1.0);\n    vec3 c = a + t*ab;\n    return length(gl.sdf.pos-c)-r;        \n}\n\nfloat sdCylinder(vec3 a, vec3 b, float r, float cr)\n{\n  vec3  ba = b - a;\n  vec3  pa = gl.sdf.pos - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba - cr;\n}\n\nvec3 posOnPlane(vec3 p, vec3 n)\n{\n    return p-dot(p,n)*n;\n}\n\nfloat sdTorus(vec3 p, vec3 a, vec3 n, float rl, float rs)\n{\n    vec3 q = p-a;\n    return length(vec2(length(posOnPlane(q, n))-rl,abs(dot(n, q))))-rs;\n}\n\n// 0000000     0000000    0000000  000   0000000  \n// 000   000  000   000  000       000  000       \n// 0000000    000000000  0000000   000  0000000   \n// 000   000  000   000       000  000       000  \n// 0000000    000   000  0000000   000  0000000   \n\nvoid basis(vec3 n, out vec3 right, out vec3 front) \n{\n    if (n.y < -0.999999)\n    {\n        right = -vz;\n        front = -vx;\n    } \n    else \n    {\n        float a = 1.0/(1.0+n.y);\n        float b = -n.x*n.z*a;\n        right = vec3(1.0-n.x*n.x*a,-n.x,b);\n        front = vec3(b,-n.z,1.0-n.z*n.z*a);\n    }\n}\n\n//  0000000   0000000   00     00  \n// 000       000   000  000   000  \n// 000       000000000  000000000  \n// 000       000   000  000 0 000  \n//  0000000  000   000  000   000  \n\nvoid lookAtFrom(vec3 tgt, vec3 pos) \n{ \n    cam.tgt     = tgt;\n    cam.pos     = pos;\n    cam.pos2tgt = cam.tgt-cam.pos;\n    cam.dir     = normalize(cam.pos2tgt);\n    cam.x       = normalize(cross(cam.dir, vy));\n    cam.up      = normalize(cross(cam.x,cam.dir));\n    cam.dist    = length(cam.pos2tgt);\n}\nvoid lookAt  (vec3 tgt) { lookAtFrom(tgt, cam.pos); }\nvoid lookFrom(vec3 pos) { lookAtFrom(cam.tgt, pos); }\nvoid lookPan (vec3 pan) { lookAtFrom(cam.tgt+pan, cam.pos+pan); }\nvoid lookPitch(float ang) { \n    cam.pos2tgt = rotAxisAngle(cam.pos2tgt, cam.x, ang); \n    cam.tgt     = cam.pos + cam.pos2tgt;\n    cam.dir     = normalize(cam.pos2tgt);\n    cam.up      = normalize(cross(cam.x,cam.dir));\n}\nvoid orbitPitch(float pitch)\n{\n    cam.pos2tgt = rotAxisAngle(cam.pos2tgt, cam.x, pitch); \n    cam.pos     = cam.tgt - cam.pos2tgt;\n    cam.dir     = normalize(cam.pos2tgt);\n    cam.up      = normalize(cross(cam.x,cam.dir));\n}\nvoid orbitYaw(float yaw)\n{\n    cam.pos2tgt = rotAxisAngle(cam.pos2tgt, cam.up, yaw); \n    cam.pos     = cam.tgt - cam.pos2tgt;\n    cam.dir     = normalize(cam.pos2tgt);\n    cam.up      = normalize(cross(cam.x,cam.dir));\n}\nvoid orbit(float pitch, float yaw) \n{\n    orbitYaw(yaw);\n    orbitPitch(pitch);\n}\n\nvoid initCam(float dist, vec2 rot)\n{\n    lookAtFrom(v0, rotAxisAngle(rotAxisAngle(vec3(0,0,-dist), -vx, 89.0*rot.y), vy, -90.0*rot.x));\n    cam.fov = PI2; // 4.0;\n}\n\n// 00000000    0000000    0000000  000000000  \n// 000   000  000   000  000          000     \n// 00000000   000   000  0000000      000     \n// 000        000   000       000     000     \n// 000         0000000   0000000      000     \n\nvec4 postProc(vec3 col, bool dither, bool gamma, bool vignette)\n{\n    if (dither)   col -= vec3(gradientNoise(gl.frag)/256.0); \n    if (gamma)    col  = pow(col, vec3(1.0/2.2));\n    if (vignette) col *= vec3(smoothstep(1.8, 0.5, length(gl.uv)/max(gl.aspect,1.0)));\n    return vec4(col, 1.0);\n}","name":"Common","description":"","type":"common"}]}