{"ver":"0.1","info":{"id":"tslfRl","date":"1588889322","viewed":166,"name":"GodRaysTest","username":"erkan612","description":"This is god rays test.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define fov 90.0\n#define pi 3.14159265\n\nvec4 S_Sphere(vec4 d, vec3 pos, vec3 position, vec3 color, float radius) {\n\tfloat sph = length(position - pos) - radius;\n    d.w = min(d.w, sph);\n    if (d.w == sph) { d.xyz = color; }\n    return d;\n}\n\nvec4 S_Floor(vec4 d, vec3 pos, vec3 n, vec3 color, float height) {\n\tfloat flr = dot(n, pos) - height;\n    d.w = min(d.w, flr);\n    if (d.w == flr) { d.xyz = color; }\n    return d;\n}\n\nvec4 Scene(vec3 pos) {\n    vec4 d;\n    d.w = 9999.0;\n    \n    vec3 s = vec3(2.0, 2.0, 2.0);\n    d = S_Sphere(d, vec3(((fract(pos/s)-0.5)*s).x, pos.y, ((fract(pos/s)-0.5)*s).z), vec3(0.0), vec3(1.0, 0.0, 0.0), 0.2);\n    d = S_Sphere(d, pos, vec3(0.0), vec3(1.0), 1.0);\n    d = S_Floor(d, pos, vec3(0.0, 1.0, 0.0), vec3(1.0), -1.0);\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 pos) {\n    vec2 d = vec2(0.01, 0.0);\n\treturn vec3(Scene(pos + d.xyy).w - Scene(pos - d.xyy).w, \n                Scene(pos + d.yxy).w - Scene(pos - d.yxy).w, \n                Scene(pos + d.yyx).w - Scene(pos - d.yyx).w);\n}\n\nvec4 Shadow(vec3 eye, vec3 eyeDir, float zNear, float zFar) {\n\tvec4 d;\n    d.xyz = vec3(1.0);\n    d.w = zNear;\n    \n    vec3 sunDir = vec3(-1.0, -1.0, 1.0);\n    \n    for (int i = 0; i < 100; i++) {\n    \tvec3 pos = eye + eyeDir*d.w;\n        vec4 cd = Scene(pos);\n        d.w += cd.w;\n        d.xyz = min(d.xyz, cd.w/d.w*5.0);\n        if (cd.w < 0.01) {\n            d.xyz *= 0.0;\n            break;\n        }\n        if (d.w > zFar) {\n            break;\n        }\n    }\n    \n    return d;\n}\n\nvec4 March(vec3 eye, vec3 eyeDir, float zNear, float zFar) {\n\tvec4 d;\n    d.w = zNear;\n    \n    vec3 sunDir = vec3(-1.0, -1.0, 1.0);\n    \n    float att = 0.0;\n    \n    for (int i = 0; i < 100; i++) {\n    \tvec3 pos = eye + eyeDir*d.w;\n        sunDir = pos - vec3(2.0, 2.0, -2.0);\n        float sunDist = length(sunDir);\n        att += 1.0 / (sunDist*sunDist) * 0.1;\n        vec4 cd = Scene(pos);\n        d += cd;\n        if (cd.w < 0.01) {\n            d.xyz = cd.xyz;\n            vec3 n = GetNormal(pos);\n            float sunLighting = dot(normalize(n), normalize(-sunDir));\n            float fog = 10.0/(d.w*d.w);\n            vec4 shadow = Shadow(pos + normalize(n)*0.01, normalize(-sunDir), 0.0, zFar);\n            d.xyz *= min(max(fog, 0.0), 1.0) * sunLighting * shadow.xyz;\n            break;\n        }\n        if (d.w > zFar) {\n        \td.xyz = vec3(0.0);\n            break;\n        }\n    }\n    \n    d.xyz += vec3(att/1.0);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-0.5*iResolution.xy) / min(iResolution.x, iResolution.y);\n\t\n    float dir = iTime*75.0;\n    vec3 color = vec3(0.0);\n\tvec3 eye = vec3(sin(dir*pi/180.0) * 5.0, 0.3, cos(dir*pi/180.0) * 5.0);\n    vec3 eyeDir = normalize(vec3(uv, 1.0)); // normalize(normalize(vec3(uv * 2.0 * (fov/90.0), 1.0)) + eyeDir)\n    vec3 target = vec3(0.0);\n    vec3 lz = normalize(target - eye);\n    vec3 lx = normalize(cross(normalize(vec3(0.0, 1.0, 0.0)), lz));\n    vec3 ly = normalize(cross(lz, lx));\n    eyeDir = lx*eyeDir.x + ly*eyeDir.y + lz*eyeDir.z;\n    vec4 rm = March(eye, eyeDir, 0.1, 15.0);\n    color = rm.xyz;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}