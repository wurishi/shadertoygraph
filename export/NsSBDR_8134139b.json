{"ver":"0.1","info":{"id":"NsSBDR","date":"1645945275","viewed":297,"name":"GEM STUDY","username":"pedrofuentes","description":"Developing some gems for a small collectible project","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","refraction","gem","crystal","reflectionfrresnel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float MIN_DIST = 0.001;\nfloat MAX_DIST = 1.0;\nint MAX_ITER = 64;\nfloat IOR = 1.25;\nfloat ABB = 0.025;\nfloat DENSITY = .05;\n\n#define pi 3.1415926535\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define sat(a) clamp(a,0.0,1.0)\n#define h13(n) fract((n)*vec3(12.9898,78.233,45.6114)*43758.5453123)\n\nvec2 vor(vec2 v, vec3 p, vec3 s){\n    p = abs(fract(p-s)-0.5);\n    float a = max(p.x,max(p.y,p.z));\n    float b = min(v.x,a);\n    float c = max(v.x,min(v.y,a));\n    return vec2(b,c);\n}\n\nfloat vorMap(vec3 p){\n    vec2 v = vec2(5.0);\n    v = vor(v,p,h13(0.96));\n    p.xy*=rot(1.2);\n    v = vor(v,p,h13(0.55));\n    p.yz*=rot(2.);\n    v = vor(v,p,h13(0.718));\n    p.zx*=rot(2.7);\n    v = vor(v,p,h13(0.3));\n    return v.y-v.x; \n}\n\nfloat sd_box(vec3 p){\n    p=abs(p)-.2;\n    return length(max(p,0.)) + min(max(p.x,max(p.y,p.z)),0.);\n}\n\nvec3 cameraDir(vec2 uv, float ratio, vec3 p, vec3 dir){\n    uv -= .5;\n    uv.x *= ratio;\n    vec3 r = cross(vec3(0., 1., 0.), dir);\n    vec3 u = cross(dir, r);\n    float zoom = 1.;\n    vec3 c = p + dir * zoom;\n    vec3 i = c+uv.x*r + uv.y*u;\n    vec3 rd = i - p;\n    return rd;\n}\n\nfloat map(in vec3 p)\n{\n    //GEM\n    float cracks = -vorMap(p*3.)-0.05;\n    float gem = length(p)-.25;\n    float cracked_gem = mix(gem,cracks,.05);\n    \n    return cracked_gem;\n}\n\nfloat raymarch(vec3 ro, vec3 rd, float s, out int i)\n{\n    float t = .0;\n    \n    for(i = 0; i < MAX_ITER; i++){\n        vec3 pos = ro + t*rd;\n        float d = map(pos)*s;\n        if(abs(d) < MIN_DIST)\n            break;\n        t += d;\n        if(t > MAX_DIST) break;\n    }\n    \n    if(t > MAX_DIST)\n        t = -1.;\n    return t;\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec2 e = vec2(MIN_DIST, 0.);\n    float d = map(pos);\n    return normalize(d - vec3(map(pos-e.xyy),\n                          map(pos-e.yxy),\n                          map(pos-e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float t = iTime;\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    vec3 ro = vec3(.8*sin(t*.2), .01*cos(t*0.25), -.8*cos(t*.2));\n    vec3 f = normalize(-ro);\n    vec3 truePos = ro + f*(sin(t*15.)+1.0);\n    vec3 rd = cameraDir(uv, ratio, truePos, f);\n    \n    vec3 col = vec3(0.0);\n    int steps;\n    float d = raymarch(ro,rd, 1., steps);\n    \n    if(d > 0.)\n    {\n        int internal_steps;\n        vec3 p = ro + rd*d;\n        vec3 n = calcNormal(p);\n        float fresnel = pow(1.+dot(rd,n), 5.);\n        vec3 refl = reflect(rd,n);\n        vec3 reflTex = texture(iChannel0, refl).rgb;\n        rd = refract(rd,n,1./IOR);\n        p += -n * MIN_DIST * 3.;\n        d = raymarch(p,rd,-1., internal_steps);\n        p += rd*d;\n        n = -calcNormal(p);\n        vec3 _rd = rd;\n        \n        //red\n        vec3 refr= refract(_rd,n, IOR-ABB);\n        if(dot(refr,refr) == 0.)\n            rd = reflect(_rd,n);\n        else\n            rd = refr;\n        col.r = texture(iChannel0, rd).r;\n        //green\n        refr= refract(_rd,n,IOR);\n        if(dot(refr,refr) == 0.)\n            rd = reflect(_rd,n);\n        else\n            rd = refr;\n            \n        col.g = texture(iChannel0, rd+ABB).g;\n        \n        //blue\n        refr= refract(_rd,n,IOR);\n        if(dot(refr,refr) == 0.)\n            rd = reflect(_rd,n);\n        else\n            rd = refr;\n        col.b = texture(iChannel0, rd).b;\n        \n        float optDist = exp(DENSITY * -d);\n        \n        col*=optDist;\n        col+= reflTex * (1.-fresnel);\n        col+= float(internal_steps)/200.*(1.-fresnel);\n    }\n    else col = texture(iChannel0, rd).rgb;\n    col += float(steps)/200.;\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}