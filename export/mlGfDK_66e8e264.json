{"ver":"0.1","info":{"id":"mlGfDK","date":"1702485817","viewed":18,"name":"Lidinoeyes","username":"Balocre","description":"Messing around with lidinoid : https://en.wikipedia.org/wiki/Lidinoid","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lidinoid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Lidinoid( in vec2 uv, in float z )\n{\n    /*** A function to compute some kind of distance to a Lidinoid\n    \n    Makes some nice hypnotic patterns\n    \n    Args:\n        uv (vec2): x and y position\n        z (float): z position\n        \n    Returns:\n        Some kind of distance (maybe?)\n    \n    ***/\n    float x = uv.x;\n    float y = uv.y;\n    \n    float l = 0.5 * (\n        sin(2.*x)*cos(y)*sin(z) +\n        sin(2.*y)*cos(z)*sin(x) + \n        sin(2.*z)*cos(x)*sin(y)\n    ) - 0.5 * (\n        cos(2.*x)*cos(2.*y) +\n        cos(2.*y)*cos(2.*z) + \n        cos(2.*z)*cos(2.*x)\n    ) + 0.15;\n    \n    return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // You can scale the \"distance\" from the surface by multiplying uv\n    // muliplying trig functions of x and y gives the \"diagonal\" wave effect\n    float d = Lidinoid(uv*20., iTime + (cos(uv.y) * sin(uv.x)));\n    \n    vec3 col_lini = vec3(\n        .7 * tanh(d), \n        0., \n        0.\n    );\n    \n    // Not really the backgorund color\n    vec3 col_bg = vec3(0.1, 0., 0.1);\n    \n    vec3 col = normalize(col_lini + col_bg);\n\n    fragColor = vec4(col,  1.0);\n}","name":"Image","description":"","type":"image"}]}