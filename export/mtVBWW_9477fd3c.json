{"ver":"0.1","info":{"id":"mtVBWW","date":"1702083777","viewed":42,"name":"Smoky donut","username":"enneff","description":"An experiment in path tracing transparent objects.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define AA 0\n#define NUM_TRAILS 100\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec2 rot2( in vec2 q, in float an )\n{\n    return vec2(q.x*cos(an)-q.y*sin(an),\n                q.y*cos(an)+q.x*sin(an));\n}\n\nvec4 map( in vec3 p, float time )\n{\n    vec3 q = vec3(p.yx, p.z);\n    q.x += sin(time)*0.1;\n    q.z += sin(time*0.7)*0.2;\n    q.zy = rot2(q.zy, 6.2831*time/10.0);\n    q.xy = rot2(q.xy, 6.2831*time/3.0);\n    float d = sdTorus(q, vec2(0.1, 0.04));\n    return vec4( d, p );\n}\n\n#define ZERO min(iFrame,0)\n\nconst float rayStep = 0.001;\nconst float tmax = 5.0;\n\nvec4 intersect( in vec3 ro, in vec3 rd, in float time )\n{\n    vec4 res = vec4(-1.0);\n    \n    float t = rayStep;\n    for( int i=0; i<128 && t<tmax; i++ )\n    {\n        vec4 h = map(ro+t*rd,time);\n        if( h.x<rayStep ) { res=vec4(t,h.yzw); break; }\n        t += h.x;\n    }\n    \n    return res;\n}\n\nvec4 deintersect( in vec3 ro, in vec3 rd, in float time )\n{\n    vec4 res = vec4(-1.0);\n    \n    float t = rayStep;\n    for( int i=0; i<256 && t<tmax; i++ )\n    {\n        vec4 h = map(ro+t*rd,time);\n        if( h.x>rayStep ) { res=vec4(t,h.yzw); break; }\n        t += max(rayStep, abs(h.x));\n    }\n    \n    return res;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=ZERO; m<AA; m++ )\n    for( int n=ZERO; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        float d = 0.5*sin(fragCoord.x*147.0)*sin(fragCoord.y*131.0);\n        float time = iTime;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        float time = iTime;\n        #endif\n\n\t    // camera\t\n        //float an = 6.2831*time/10.0;\n        float an = 0.0;\n        vec3 ta = vec3( 0.0, 0.0, 0.0 );\n        vec3 ro = ta + vec3( 0.5*cos(an), 0.1*cos(time*0.4), 0.5*sin(an) );\n        \n        // camera-to-world transformation\n        mat3 ca = setCamera( ro, ta, 0.0 );\n        \n        // ray direction\n        float fl = 2.0;\n        vec3 rd = ca * normalize( vec3(p,fl) );\n\n        // background\n        vec3 col = vec3(0.03);     \n        \n        // ray march\n        for (int j=1; j<=NUM_TRAILS; j++) {\n            float f = float(j)/float(NUM_TRAILS);\n            float ttime = time+f*2.;\n            float fade = exp(8.*f-8.);\n            vec3 p = ro;\n            p.xy *= .5+f*.5;\n            p.y -= (1.-f)*.2;\n            for (int i=0; i<4; i++) {\n                vec4 tuvw = intersect( p, rd, ttime );\n                if( tuvw.x<0.0 ) { break; }\n                tuvw = deintersect( tuvw.yzw, rd, ttime );\n                if ( tuvw.x<0.0 ) { break; }\n                col += tuvw.x*vec3(0.6, 0.8, 1.0)*fade*0.5;\n                p = tuvw.yzw;\n            }\n        }\n         \n        // gamma        \n\t    tot += pow(col,vec3(0.45) );\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n    // cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}