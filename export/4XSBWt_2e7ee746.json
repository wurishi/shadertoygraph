{"ver":"0.1","info":{"id":"4XSBWt","date":"1730055761","viewed":159,"name":"dominator return","username":"nayk","description":"source https://www.shadertoy.com/view/XX2fD3 https://www.shadertoy.com/view/XlfGRj","likes":3,"published":3,"flags":1,"usePreview":0,"tags":["fractal","color","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\n#define rot(a)    mat2(cos(a+vec4(0,33,11,0)))                      // rotation\n#define T(q)      max( max(q.x,q.y), max(q.z,(1.-q.x-q.y-q.z)/1.73))// iq tet in cube corner\n#define T3(q,d) ( min( min( T((q)) , T((q+vec3(d,0,0))) ),          /* 4 sub-tets */ \\\n                     min(T((q+vec3(0,d,0))), T((q+vec3(0,0,d))) )                    \\\n                   ) -.625 )\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.05),sin(iTime*0.05), -sin(iTime*0.05),cos(iTime*0.05));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\tfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2-dm;\n        // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\n\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,1.);\n\tfloat time=iTime*speed+.25;\n    vec4 O=fragColor;\n    vec2 C=fragCoord;\n    O=vec4(0);\n     vec4 O2=O;\n    vec2 u=C;\n        vec3 R = iResolution,\n         P = 9./R, q, a,                                            // P: camera pos, then sample along ray\n         D = normalize(vec3( u , -R.y ) - .5*R ),                   // D: ray direction\n         M = iMouse.z > 0. ? iMouse.xyz/R -.5 :                     // comment for no mouse cam\n                 vec3( .15,.07,0) * cos(.3*iTime + vec3(0,11,0));          \n    float t = 1., d= 3.-cos(3.*iTime);                              // offset >= 2\n    \n   \n    for ( O2=vec4(1.1); O2.x > 0. && t > .21; O2-=.011 )   \n     \n        q = P, \n       \n        q.yz *= rot(-6.*M.y),                                       // rotations\n        q.xz *= rot(-6.*M.x-1.57),\n        a = abs(q+.0), t = max( a.x, max(a.y,a.z)) -2.,\n        q -= .5* dot(q-.0866,vec3(1)),     \n        // disto space to get isometric tet with iq corner-tets\n        t = min( T3(q-.25*d,d),                                     // 4 sub-tets\n                 max( T((q-.081)) -1.023, -T3(q-.5,2.) ) ),         // residual main tet minus 4 sub-tets\n                                // centered sphere, for test\n        P += .5*t*D;                                                // step along the ray\n    \n    O2 *= O2*O2;                                                       \n    vec3 p,r=iResolution,\n    d2=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(2.1,0.5,2.),H(g*.1),.8)*5./e/8e3\n    )\n    {\n        p=g*d2*O2.xyz;\n        \n        a=40.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.7+sin(iTime*.001)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.*5.\n                 )*O2.xyz;\n         }\n         g+=e=length(p.yzyx)/s;\n    }\n\t\n\t\n\tvec3 from=vec3(1.,.5,0.5);\n\tdir+=O.xyz;\n\tmainVR(fragColor, fragCoord, from, dir);\t\n   \n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1 \n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.35,0.2,1.515), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}