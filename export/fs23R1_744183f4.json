{"ver":"0.1","info":{"id":"fs23R1","date":"1617708753","viewed":135,"name":"PARTICLES 101","username":"keshav2010","description":"particles 101 (Art Of Code Tutorial)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy);\n    vec3 finalCol = vec3(0.);\n    finalCol = vec3(texture(iChannel0, uv));\n    fragColor = vec4(finalCol,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PARTICLE_COUNT 3500\n//Hash function credits : https://www.shadertoy.com/view/ttc3zr\nuvec2 murmurHash12(uint src) {\n    const uint M = 0x5bd1e995u;\n    uvec2 h = uvec2(1190494759u, 2147483647u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n// 2 outputs, 1 input\nvec2 hash12(float src) {\n    uvec2 h = murmurHash12(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    vec3 col=vec3(0.);\n    float radius = 0.3f*smoothstep(3.5f, 13.0f, iTime);\n    for(int i=0; i<PARTICLE_COUNT; i++)\n    {\n        float t = iTime;\n        float particleId = float(i);\n\n        vec2 particleDirection = hash12(particleId) - 0.5;\n        vec2 particlePos = particleDirection*t;\n        \n        vec3 particleColor = vec3(1.);\n        \n        float d = smoothstep(-0.009, radius, radius-length(uv - particlePos));\n\n        col = col+particleColor*d;\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}