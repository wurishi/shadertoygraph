{"ver":"0.1","info":{"id":"Xl3XzS","date":"1480124858","viewed":999,"name":"cloudy voxel world 2.0","username":"SudoNhim","description":"A voxel world with rounded edges, anti-aliasing, volumetric clouds, semitransparent water, reflections, shadows, ambient occlusion and SUNSHINE","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["voxels","volumetricfog"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\n#define VOXEL_NONE  0\n#define VOXEL_WATER 1\n#define VOXEL_SAND  2\n#define VOXEL_EARTH 3\n#define VOXEL_STONE 4\n#define VOXEL_GRASS 5\n\n#define SUN_DIRECTION normalize(vec3(0.4, 0.6, 0.7))\n\nstruct VoxelHit\n{\n    ivec3 mapPos;    // world coords\n    int terrainType; // terrain type\n    vec2 volAccum;   // sum of (fog, water) along the ray path\n    vec3 hitRel;     // position of intersect relative to center of voxel\n    vec3 hitNormal;  // surface normal at intersect\n    float weight;    // contribution to the ray (fractional values come from anti-aliasing)\n};\n\nstruct VoxelMarchResult\n{\n    // we store the first two intersects for two purposes:\n    // 1) it allows the first voxel hit to be non-cube shaped (e.g. rounded edges)\n    // 2) it allows cheap anti-aliasing\n    VoxelHit first;\n    VoxelHit second;\n};\n\n// from https://www.shadertoy.com/view/4sfGzS\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n    vec2 uv = p.xy + f.xy;\n\tvec2 rg = vec2(texture( iChannel0, (uv+vec2(37.0,17.0)*p.z+0.5)/256.0, -100.0 ).x,\n                   texture( iChannel0, (uv+vec2(37.0,17.0)*(p.z+1.0)+0.5)/256.0, -100.0 ).x );\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nvoid getVoxelAndOcclusionsAt(ivec3 ip, out int terrainType, out vec2 occlusions)\n{ \n    terrainType = VOXEL_NONE;\n    \n    float cloudiness = noise(vec3(ip)/8.0);\n    occlusions = vec2(smoothstep(0.6, 0.7, cloudiness)*0.3 + 0.1, 0.0);\n    \n    if (ip.y <= 1) {terrainType = VOXEL_WATER; occlusions = vec2(0.0, 1.0);}\n    \n    // so this is like, grabbing the texture as a heightmap and\n    // then like twisting it in random directions as it goes up\n    // umm...\n    vec3 p = vec3(vec3(ip) + 0.5);\n    float theta = noise(p / 16.0) * PI * 2.0;\n    vec2 disp = vec2(cos(theta), sin(theta)) * p.y;\n    vec3 terr = texture(iChannel1, (p.xz + disp) / 128.0).rgb;\n\n    bvec3 contains = lessThanEqual(vec3(0.0), (terr - p.y/16.0));\n    if (contains.x && contains.y && !contains.z) terrainType = VOXEL_SAND;\n    else if (contains.x && contains.z) terrainType = VOXEL_GRASS;\n    else if (contains.y && contains.z && !contains.x) terrainType = VOXEL_STONE;\n    else if (contains.x || contains.y || contains.z) terrainType = VOXEL_EARTH;\n}\n\nfloat dfVoxel(vec3 p, int terrainType)\n{\n    float r = 0.1;\n    if (terrainType == VOXEL_WATER) r = 0.0;\n    return length(max(abs(p)-vec3(0.5-r),0.0))-r;\n}\n\nvec3 nrmVoxel(vec3 p, int terrainType) \n{\n    vec2 dd = vec2(0.001,0.0);\n    float base = dfVoxel(p, terrainType);\n    return normalize(vec3(\n        dfVoxel(p+dd.xyy, terrainType) - base,\n        dfVoxel(p+dd.yxy, terrainType) - base,\n        dfVoxel(p+dd.yyx, terrainType) - base\n    ));\n}\n\nVoxelMarchResult voxelMarch(vec3 ro, vec3 rd) \n{\n    ivec3 mapPos = ivec3(floor(ro));\n    vec3 deltaDist = abs(vec3(length(rd)) / rd);\n    ivec3 rayStep = ivec3(sign(rd));\n    vec3 sideDist = (sign(rd) * (vec3(mapPos) - ro) + (sign(rd) * 0.5) + 0.5) * deltaDist; \n    vec2 volAccum = vec2(0.0);\n    float prevDist = 0.0;\n    \n    VoxelMarchResult result;\n\t\n    for (int i = 0; i < 96; i++) {\n\n        // check current position for voxel\n        vec2 occlusions;  int terrainType;\n        getVoxelAndOcclusionsAt(mapPos, terrainType, occlusions);\n        \n        // if intersected, save\n        if (terrainType != VOXEL_NONE) {\n            VoxelHit newVoxelHit = VoxelHit(mapPos, terrainType, volAccum, vec3(0.0), vec3(0.0), 0.0);\n            if (result.first.terrainType == VOXEL_NONE) {\n                result.first = newVoxelHit;\n            } else if (result.first.terrainType != VOXEL_WATER || terrainType != VOXEL_WATER) {\n                result.second = newVoxelHit;\n                break; // two intersections, stop stepping!\n            }\n        }\n\n        // march forward to next position\n        float newDist = min( sideDist.x, min(sideDist.y, sideDist.z ));\n        vec3 mi = step( sideDist.xyz, sideDist.yzx ); \n        vec3 mm = mi*(1.0-mi.zxy);\n        sideDist += mm * vec3(rayStep) / rd;\n        mapPos += ivec3(mm)*rayStep;\n        \n        // accumulate occlusions\n        volAccum += occlusions * (newDist - prevDist);\n        prevDist = newDist;\n    }\n    \n    // last result should always have max fog\n    result.second.volAccum = volAccum;\n    \n    // if there was no intersection, set accumulated fog on first hit and return\n    if (result.first.terrainType == VOXEL_NONE) {\n        result.first.volAccum = volAccum;\n        result.first.weight = 1.0;\n        return result;\n    }\n    \n    // distance march to intersect first voxel\n    vec3 hitVoxelCenter = vec3(result.first.mapPos) + 0.5;\n    vec3 cubeIntersect = (hitVoxelCenter - ro - 0.5*sign(rd))/rd;\n    float dist = max(cubeIntersect.x, max(cubeIntersect.y, cubeIntersect.z));\n    float diff; float mindiff = 1.0; float finaldist = 0.0;\n    for (int i=0; i<8; i++) {\n        vec3 p = ro + rd * dist;\n        diff = dfVoxel(p - hitVoxelCenter, result.first.terrainType);\n        if (diff < mindiff) {\n            mindiff = diff;\n            finaldist = dist;\n        }\n        dist += diff; \n    }\n    \n    float pixSizeApprox = 2.0/iResolution.x * finaldist; // the FOV is actually about 1 radian :)\n    result.first.weight = smoothstep(pixSizeApprox, 0.0, mindiff - 0.01); // anti-alias blend\n    result.first.hitRel = ro + rd * finaldist - hitVoxelCenter;\n    result.first.hitNormal = nrmVoxel(result.first.hitRel, result.first.terrainType);\n    \n    // if it was water, adjust weight for surface reflection\n    if (result.first.terrainType == VOXEL_WATER) result.first.weight = 0.5;\n    \n    // do a cube intersection for the second voxel\n    hitVoxelCenter = vec3(result.second.mapPos) + 0.5;\n    cubeIntersect = (hitVoxelCenter - ro - 0.5*sign(rd))/rd;\n    dist = max(cubeIntersect.x, max(cubeIntersect.y, cubeIntersect.z));\n    result.second.hitRel = ro + rd * dist - hitVoxelCenter;\n    \n    // attempt to improve a little with distance marching\n    for (int i=0; i<4; i++) {\n        vec3 p = ro + rd * dist;\n        diff = dfVoxel(p - hitVoxelCenter, result.first.terrainType);\n        dist += diff; \n    }\n    if (diff < 0.05) result.second.hitRel = ro + rd * dist - hitVoxelCenter;\n    \n    result.second.weight = 1.0 - result.first.weight;\n    result.second.hitNormal = nrmVoxel(result.second.hitRel, result.second.terrainType);\n    \n    return result;\n}\n\nfloat marchShadowCheck(VoxelHit hit)\n{\n    vec3 ro = hit.hitRel + vec3(hit.mapPos) + 0.5;\n    vec3 rd = SUN_DIRECTION;\n    ro += rd*0.11;\n    \n    ivec3 mapPos = ivec3(floor(ro));\n    vec3 deltaDist = abs(vec3(length(rd)) / rd);\n    ivec3 rayStep = ivec3(sign(rd));\n    vec3 sideDist = (sign(rd) * (vec3(mapPos) - ro) + (sign(rd) * 0.5) + 0.5) * deltaDist; \n\tfloat fogAccum = 0.0;\n    float prevDist = 0.0;\n    \n    for (int i = 0; i < 16; i++) {\n\n        // check current position for voxel\n        vec2 occlusions;  int terrainType;\n        getVoxelAndOcclusionsAt(mapPos, terrainType, occlusions);\n        \n        // if intersected, finish\n        if (terrainType != VOXEL_NONE) {\n            return 1.0;\n        }\n\n        // march forward to next position\n        float newDist = min( sideDist.x, min(sideDist.y, sideDist.z ));\n        vec3 mi = step( sideDist.xyz, sideDist.yzx ); \n        vec3 mm = mi*(1.0-mi.zxy);\n        sideDist += mm * vec3(rayStep) / rd;\n        mapPos += ivec3(mm)*rayStep;\n        \n        // accumulate fog\n        fogAccum += occlusions.x * (newDist - prevDist);\n        prevDist = newDist;\n    }\n    \n    // no intersection\n    return fogAccum / 5.0;\n}\n\nfloat calcAmbientOcclusion(VoxelHit hit)\n{\n    float ambientOcc = 0.0;\n    \n    // for each of the 28 voxels surrounding the hit voxel\n    for (int i=-1; i<=1; i++) for (int j=-1; j<=1; j++) for (int k=-1; k<=1; k++) {\n        if (i == 0 && j == 0 && k == 0) continue; // skip the hit voxel\n        ivec3 offset = ivec3(i, j, k);\n        // TODO: find some way to skip these voxels\n        // if (dot(hit.hitRel, vec3(offset)) < 0.0) continue; \n        \n        int terrainType; vec2 occlusions;\n        getVoxelAndOcclusionsAt(hit.mapPos + offset, terrainType, occlusions);\n        if (terrainType != VOXEL_NONE && terrainType != VOXEL_WATER) {\n            \n            // use the distance from just above the intersection to estimate occlusion\n            float dist = dfVoxel(hit.hitRel + hit.hitNormal*0.5 - vec3(offset), terrainType);\n            ambientOcc += smoothstep(1.0, 0.0, dist);\n        }\n    }\n    \n    return ambientOcc / 8.0;\n}\n\nvec3 doColoring(VoxelHit hit, vec3 rd)\n{   \n    // global position for non-repeating noise\n    vec3 hitGlobal = vec3(hit.mapPos) + hit.hitRel + 0.5;\n    float f1 = noise(hitGlobal*19.0);\n    float f2 = noise(hitGlobal*33.0);\n    float f3 = noise(hitGlobal*71.0);\n    \n    vec3 color = vec3(0.0);\n    if (hit.terrainType == VOXEL_WATER) {\n        color = vec3(0.4, 0.4, 0.8) * (0.8 + f1*0.1 + f2*0.05 + f3*0.05);\n    } else if (hit.terrainType == VOXEL_EARTH) {\n        color = vec3(1.0, 0.7, 0.3) * (f1*0.13 + f2*0.13 + f3*0.1 + 0.3);\n    } else if (hit.terrainType == VOXEL_SAND) {\n        color = vec3(1.0, 1.0, 0.6) * (f1*0.07 + f2*0.07 + f3*0.2 + 0.5);\n    } else if (hit.terrainType == VOXEL_STONE) {\n        color = vec3(0.5) * (f1*0.3 + f2*0.1 + 0.6);\n    } else if (hit.terrainType == VOXEL_GRASS) {\n        color = vec3(0.3, 0.7, 0.4) * (f1*0.1 + f3*0.1 + 0.6);\n    }  else if (hit.terrainType == VOXEL_NONE) {\n        color = vec3(0.0, 1.0, 1.0);\n        color += vec3(5.0, 3.0, 0.0)*pow(max(dot(rd, SUN_DIRECTION), 0.0), 128.0);\n    }\n    \n    float shadow = min(marchShadowCheck(hit), 1.0);\n    float ambient = 1.0 - calcAmbientOcclusion(hit);\n    float diffuse = max(dot(SUN_DIRECTION, hit.hitNormal), 0.0);\n    diffuse = diffuse*(1.0-shadow);\n    \n    color *= diffuse * 0.6 + ambient * 0.4;\n    \n    vec2 occlusions = smoothstep(vec2(0.0), vec2(10.0, 3.0), hit.volAccum);\n    color = mix(color, vec3(0.3, 0.3, 0.5), occlusions.y); // water\n    color = mix(color, vec3(0.6), occlusions.x);           // cloud\n    \n    // blend with other intersection. will be fractional when anti-aliasing or underwater\n    color *= hit.weight;\n    \n    return color;\n}\n\n\nVoxelHit marchReflection(VoxelHit hit, vec3 prevrd)\n{\n    vec3 ro = hit.hitRel + vec3(hit.mapPos) + 0.5;\n    vec3 rd = reflect(prevrd, hit.hitNormal);\n    ro += 0.01*rd;\n    \n    ivec3 mapPos = ivec3(floor(ro));\n    vec3 deltaDist = abs(vec3(length(rd)) / rd);\n    ivec3 rayStep = ivec3(sign(rd));\n    vec3 sideDist = (sign(rd) * (vec3(mapPos) - ro) + (sign(rd) * 0.5) + 0.5) * deltaDist; \n    vec2 volAccum = hit.volAccum;\n    float prevDist = 0.0;\n\t\n    for (int i = 0; i < 16; i++) {\n\n        // check current position for voxel\n        vec2 occlusions;  int terrainType;\n        getVoxelAndOcclusionsAt(mapPos, terrainType, occlusions);\n        \n        // if intersected, finish\n        if (terrainType != VOXEL_NONE) {\n            vec3 hitVoxelCenter = vec3(mapPos) + 0.5;\n    \t\tvec3 cubeIntersect = (hitVoxelCenter - ro - 0.5*sign(rd))/rd;\n    \t\tfloat dist = max(cubeIntersect.x, max(cubeIntersect.y, cubeIntersect.z));\n            vec3 hitRel = ro + rd * dist - hitVoxelCenter;\n            return VoxelHit(mapPos, terrainType, volAccum, hitRel, nrmVoxel(hitRel, terrainType), 1.0);\n        }\n\n        // march forward to next position\n        float newDist = min( sideDist.x, min(sideDist.y, sideDist.z ));\n        vec3 mi = step( sideDist.xyz, sideDist.yzx ); \n        vec3 mm = mi*(1.0-mi.zxy);\n        sideDist += mm * vec3(rayStep) / rd;\n        mapPos += ivec3(mm)*rayStep;\n        \n        // accumulate occlusions\n        volAccum += occlusions * (newDist - prevDist);\n        prevDist = newDist;\n    }\n    \n    // no intersection\n    return VoxelHit(mapPos, VOXEL_NONE, volAccum, vec3(0.0), vec3(0.0), 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // camera stolen from Shane :) https://www.shadertoy.com/view/ll2SRy\n\tvec2 uv = (fragCoord - iResolution.xy*.5 )/iResolution.y;\n    vec3 rd = normalize(vec3(uv, (1.-dot(uv, uv)*.5)*.5));\n    vec3 ro = vec3(0., 10., iTime*10.0);\n    float t = sin(iTime * 0.2) + noise(ro/32.0);\n    ro.y += 4.0*t;\n\tfloat cs = cos( t ), si = sin( t );\n    rd.yz = mat2(cs, si,-si, cs)*rd.yz;\n    rd.xz = mat2(cs, si,-si, cs)*rd.xz;\n    \n    // voxel march into the scene storing up to four intersections\n    VoxelMarchResult result = voxelMarch(ro, rd);\n    \n    // if first intersection is with water surface, march reflection\n    if (result.first.terrainType == VOXEL_WATER) {\n        result.first = marchReflection(result.first, rd);\n        result.first.weight = 0.5;\n        result.second.weight = 0.5;\n    }\n    \n    // color\n    vec3 color1 = doColoring(result.first, rd);\n    vec3 color2 = doColoring(result.second, rd);\n    vec3 color = color1 + color2;\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}