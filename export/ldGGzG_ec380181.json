{"ver":"0.1","info":{"id":"ldGGzG","date":"1455004964","viewed":135,"name":"4096 ~ Mandelcell","username":"MrHenryBemis","description":"~~(()((([[-O-]])))())~~","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tEmin Kura - http://emin.me\n*/\n#define iGlobaTime .0005*iTime\nvec3 rotate( vec3 pos, float x, float y, float z )\n{\n\tmat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0, cos( x ), -sin( x ), 0.0, sin( x ), cos( x ) );\n\tmat3 rotY = mat3( cos( y ), 0.0, sin( y ), 0.0, 1.0, 0.0, -sin(y), 0.0, cos(y) );\n\tmat3 rotZ = mat3( cos( z ), -sin( z ), 0.0, sin( z ), cos( z ), 0.0, 0.0, 0.0, 1.0 );\n\n\treturn rotX * rotY * rotZ * pos;\n}\n\nfloat hit( vec3 r )\n{\n\tr = rotate( r, sin(iTime), cos(iTime), 0.0 );\n\tvec3 zn = vec3( r.xyz );\n\tfloat rad = 0.0;\n\tfloat hit = 0.0;\n\tfloat p = 28.0;\n\tfloat d = 1.0;\n\tfor( int i = 0; i < 15; i++ )\n\t{\n\t\t\n\t\t\trad = length( zn );\n\n\t\t\tif( rad > 3.0 )\n\t\t\t{\t\n\t\t\t\thit = 0.25 * log(rad) * rad / d;\n\t\t\t}else{\n\n\t\t\tfloat th = atan( length( zn.xy ), zn.z );\n\t\t\tfloat phi = atan( zn.y, zn.x );\t\t\n\t\t\tfloat rado = pow(rad,8.0);\n\t\t\td = pow(rad, 6.0) * sin(iTime*3.75) * d + 6.0;\n\t\t\t\n\n\n\t\t\tfloat sint = sin( th * p );\n\t\t\tzn.x = rado * sint * cos( phi * p );\n\t\t\tzn.y = rado * sint * sin( phi * p );\n\t\t\tzn.z = rado * cos( th * p ) ;\n\t\t\tzn += r;\n\t\t\t}\n\t\t\t\n\t}\n\t\n\treturn hit;\n\n}\n\nvec3 eps = vec3( .1, 0.0, 0.0 );\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\t\n\n\tpos.x *= iResolution.x / iResolution.y;\n\n\tvec3 ro = vec3( pos, -1.2 );\n\tvec3 la = vec3( 0.0, 0.0, 1.0 );\n\t\n\tvec3 cameraDir = normalize( la - ro );\n\tvec3 cameraRight = normalize( cross( cameraDir, vec3( 0.0, 1.0, 0.0 ) ) );\n\tvec3 cameraUp = normalize( cross( cameraRight, cameraDir ) );\n\t\n\n\tvec3 rd = normalize( cameraDir + vec3( pos, 0.0 ) );\n\n\tfloat t = 0.0;\n\tfloat d = 100.0;\n\t\n\tvec3 r;\n\tvec3 color = vec3(0.0);\n\n\tfor( int i = 0; i < 200; i++ ){\n\t\t\n\t\t\n\t\tif( d > .001 )\n\t\t{\t\n\t\t\tr = ro + rd * t;\n\t\t\td = hit( r );\n\t\t\tt+=d;\t\n\n\t\t}\n\t}\n\n\t  \tvec3 n = vec3( hit( r + eps ) - hit( r - eps ),\n\t  \t\t\thit( r + eps.yxz ) - hit( r - eps.yxz ),\n\t  \t\t\thit( r + eps.zyx ) - hit( r - eps.zyx ) );\n\t \n\t \n\tvec3 mat = vec3( .5, .1, .3 ); \n \tvec3 light = vec3( .5, .5, -2.0 );\n\tvec3 lightCol = vec3(.6, .4, .5);\n\t\n\tvec3 ldir = normalize( light - r );\n  \tvec3 diff = dot( ldir, n ) * lightCol * 60.0;\n\t\n\t\n\tcolor = diff  * mat;\n\t\n    float l = length(color)*sin(iTime*4.409614)*5.5+sin(iTime*2.0);\n    fragColor = vec4( vec3(cos(l), sin(iTime)*cos(l+3.14*5.0/3.0), sin(iTime)*cos(l+3.14*2.0/3.0))*.5+.5, 1.0 );\n}","name":"Image","description":"","type":"image"}]}