{"ver":"0.1","info":{"id":"XfByzm","date":"1722190852","viewed":23,"name":"GLSL: uniforms e animação","username":"jean","description":"Referencia/créditos : https://dev.to/timclicks/create-something-beautiful-this-weekend-write-your-first-shader-and-put-it-on-the-web-with-webgl-3gc","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Uniforms utilizados iResolution,iTime\n    // Coordenadas normalizadas\n    // Divide as coordenadas do fragmento pela resolução da tela para normalizar\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Ajuste da proporção\n    // Centraliza as coordenadas\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    // Alterando o que é exibido ao longo do tempo\n    // Variáveis baseadas no tempo para animação\n    // Escala do tempo para acelerar a animação\n    float t = iTime * 1.5;\n    // Variação temporal usando seno\n    float t1 = sin(t) * 0.5 + 0.5;\n    // Variação temporal  usando cosseno\n    float t2 = cos(t) * 0.5 + 0.5;\n    // Outra variação temporal com menor frequência\n    float t3 = sin(t * 0.5) * 0.5 + 0.5;\n\n    // Componentes de cor\n    // Componente vermelho variando com a coordenada x e t1\n    float r = sin(5.0 * uv.x + t1) * 0.5 + 0.5;\n    // Componente verde variando com a coordenada y e t2\n    float g = cos(5.0 * uv.y + t2) * 0.5 + 0.5;\n    // Componente azul variando com ambas coordenadas e t3\n    float b = sin(10.0 * (uv.x * uv.y) + t3) * 0.5 + 0.5;\n\n    // Saída da cor final\n    // Define a cor do fragmento com componentes r, g, b e alfa = 1.0 (opaco)\n    fragColor = vec4(r, g, b, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}