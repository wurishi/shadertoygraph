{"ver":"0.1","info":{"id":"ttsfRX","date":"1597355565","viewed":105,"name":"screen blending","username":"nshelton","description":"a way to blend projection screens ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distancefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \n// distance to a box\nfloat sdBox( in vec2 p, in vec2 b) \n{\n    vec2 q = abs(p)-b ;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) ;\n}\n\n\nmat2 rotationMatrix(float theta) \n{\n    return mat2(cos(theta), -sin(theta), sin(theta), cos(theta));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    \n\tvec2 size = vec2(0.9,0.6);\n \n    // translate right screen\n    vec2 p0 = p + vec2(sin(iTime)* 0.2 - 0.5, 0.0);\n\tfloat d0 = sdBox(p0, size);\n    \n    //rotate left screen\n    vec2 p1 = p * rotationMatrix(0.2 + sin(iTime * 0.39));\n    float d1 = sdBox( p1 + 0.5, size  );\n\n       \n    vec3 color = vec3(0.0);\n       \n\n    if ( d0 < 0.0 && d1 > 0.0)\n    {\n        // right screen \n        color = vec3(1.,0.,0.);\n        \n    } \n    else if ( d0 > 0.0 && d1 < 0.0)\n    {\n        // left screen\n        color = vec3(0.,0.,1.);\n    }\n    if (d0 < 0.0 && d1 < 0.0)\n    {\n        // both screens\n\n        // Version 1 (bad weighting)\n        //color = vec3(-d0 , 0.0, -d1 ) / (-d0 + -d1);\n\n        //Version 2 \n        float weight0 = -d0 * (-1.0/d1);\n        float weight1 = -d1 * (-1.0/d0);\n        \n        \n        color = vec3(weight0, 0.0, weight1) / (weight1 + weight0);\n    }\n\n    // Show left screen\n\t//fragColor = vec4(color.bbb ,1.0);\n    \n    // Show right screen\n\t//fragColor = vec4(color.rrr ,1.0);\n    \n    // Show Both\n\tfragColor = vec4(color ,1.0);\n        \n}","name":"Image","description":"","type":"image"}]}