{"ver":"0.1","info":{"id":"4dSBDc","date":"1502394665","viewed":346,"name":"Painty","username":"manylegged","description":"interesting paint-esque fire-like effect by integrating over fractal noise and using it to offset a texture. The texture is a number of generated pseudocolor maps. ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","temperature"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : ijm\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n    return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n    return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n{ \n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n    //   x1 = x0 - i1  + 1.0 * C.xxx;\n    //   x2 = x0 - i2  + 2.0 * C.xxx;\n    //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n    vec3 x1 = x0 - i1 + C.xxx;\n    vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n    vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n    // Permutations\n    i = mod289(i); \n    vec4 p = permute( permute( permute( \n        i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n                               + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n                      + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients: 7x7 points over a square, mapped onto an octahedron.\n    // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n    float n_ = 0.142857142857; // 1.0/7.0\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n    //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                  dot(p2,x2), dot(p3,x3) ) );\n}\n\n\nfloat fractal_noise(vec3 v, int octaves)\n{\n    float x = 0.0;\n    float a = 0.5;\n    float f = 0.0;\n    for (int i=0; i<octaves; i++)\n    {\n        x += a * snoise(v);\n        v *= 2.0;\n        a *= 0.5;\n    }\n    return x;\n}\n\nfloat fractal_noise(vec3 v)\n{\n    return fractal_noise(v, 6);\n}\n\nvec3 temp2rgb(float temp)\n{\n    temp /= 100.0;\n\n    // draper point\n    // if (temp <= 8)\n        // return vec3(0);\n\n    // if (temp < 10)\n        // return mix(vec3(0), vec3(1.0, 0.2663545845364998, 0.0), smoothstep(0, 1, (temp-8)/2.0));\n\n    float red, green, blue;\n    \n    if (temp <= 66.0) {\n        red = 255.0;\n    } else {\n        red = temp - 60.0;\n        red = 329.698727446 * pow(red, -0.1332047592);\n        red = clamp(red, 0.0, 255.0);\n    }\n\n    if (temp <= 66.0) {\n        green = 99.4708025861 * log(temp) - 161.1195681661;\n    } else {\n        green = temp - 60.0;\n        green = 288.1221695283 * pow(green, -0.0755148492);\n    }\n    green = clamp(green, 0.0, 255.0);\n\n    if (temp >= 66.0) {\n        blue = 255.0;\n    } else if (temp <= 19.0) {\n        blue = 0.0;\n    } else {\n        blue = temp - 10.0;\n        blue = 138.5177312231 * log(blue) - 305.0447927307;\n        blue = clamp(blue, 0.0, 255.0);\n    }\n\n    return vec3(red, green, blue) / 255.0;\n}\n\n\nfloat cardinal(float y0, float y1, float y2, float y3, float t, float c)\n{\n    float t2 = t * t;\n    float t3 = t2 * t;\n    float h1 = 2.0 * t3 - 3.0 * t2 + 1.0;\n    float h2 = -2.0 * t3 + 3.0 * t2;\n    float h3 = t3 - 2.0 * t2 + t;\n    float h4 = t3 - t2;\n    float m1 = c * (y2 - y0);\n    float m2 = c * (y3 - y1);\n    float r  = m1 * h3 + y1 * h1 + y2 * h2 + m2 * h4;\n    return r;\n}\n\nvec2 cardinal(vec2 y0, vec2 y1, vec2 y2, vec2 y3, float t, float c)\n{\n    return vec2(cardinal(y0.x, y1.x, y2.x, y3.x, t, c),\n                cardinal(y0.y, y1.y, y2.y, y3.y, t, c));\n}\n\nvec3 cardinal(vec3 y0, vec3 y1, vec3 y2, vec3 y3, float t, float c)\n{\n    return vec3(cardinal(y0.x, y1.x, y2.x, y3.x, t, c),\n                cardinal(y0.y, y1.y, y2.y, y3.y, t, c),\n                cardinal(y0.z, y1.z, y2.z, y3.z, t, c));\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat scale(float v, float r)\n{\n    return (v - r) / (1.0 - r);\n}\n\nvec3 img(vec2 uv)\n{\n    vec3 c = vec3(0.0);\n    \n    if (uv.y > 0.75)\n    {\n        if (uv.x < 0.25)\n            c = cardinal(vec3(0.0), vec3(0.0), temp2rgb(1000.0), temp2rgb(2000.0), 4.0 * uv.x, 0.0);\n        else\n        \tc = temp2rgb(1000.0 + scale(uv.x, 0.25) * 5500.0);\n    }\n    else if (uv.y > 0.5)\n    {\n        c = vec3(uv.x);\n    }\n    else if (uv.y > 0.25)\n    {\n        c = hsv2rgb(vec3(280.0/360.0 - 280.0/360.0 * uv.x, 1.0, 0.5 * uv.x + 0.5));\n    }\n    else\n    {\n\t\tc = vec3(0.0, 0.98, 1.0) * uv.x;\n    }\n    return c;\n}\n\nvec3 painty(vec2 uv, float t)\n{\n    vec3 a = vec3(0.0);\n    const int c = 10;\n    for (int i=0; i<c; i++) {\n        vec2 v = uv + 0.1 * fractal_noise(vec3(uv * 10.0, t - float(i) * 0.016));\n        a += img(v) / float(c);\n    }\n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 c = painty(uv, iTime);\n    \n\tfragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"}]}