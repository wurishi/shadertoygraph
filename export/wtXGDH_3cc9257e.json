{"ver":"0.1","info":{"id":"wtXGDH","date":"1556197843","viewed":89,"name":"Bromo","username":"leon21062000","description":"ga perlu","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gungung"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PrSphDf (vec3 p, float s);//untuk bentuk sphere\nfloat PrCylDf (vec3 p, float r, float h);//untuk bentuk cylinder\nfloat PrTorusDf (vec3 p, float ri, float rc);//untuk bentuk torus\nfloat Hashff (float p);\nfloat Noiseff (float p);//tekstur pada badan gunung\nfloat Noisefv2 (vec2 p);//tekstur tanah pada alas tanah dan badan gunung\nfloat Fbm2 (vec2 p);//efek berbatuan pada badan gunung\nvec3 VaryNf (vec3 p, vec3 n, float f);\nfloat SmoothMin (float a, float b, float r);\nfloat SmoothBump (float lo, float hi, float w, float x);\n\n#define NROCK 16\nvec4 rkPos[NROCK];\nvec3 sunDir, flmCylPos, smkPos;\nfloat dstFar, tCur, lavHt, qRad, flmCylRad, flmCylLen, smkRadEx,\n   smkRadIn, smkPhs, szFac, densFac;\nint idObj;\nconst int idMnt = 1, idRock = 2, idLav = 3;\nconst float pi = 3.14159;\nfloat time;\n\n//-----------------------------------------------------------------------------\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n//texture asap\nfloat noise4( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0;\n\n    float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n\n    return res;\n}\n//fungsi untuk membuat asap \nfloat SmokeParticle(vec2 loc, vec2 pos, float size, float rnd)\n{\n\tloc = loc-pos;\n\tfloat d = dot(loc, loc)/size;\n\t\n\tif (d > 1.0) return 0.0;\n\n\t// Memutarkan particle nya\n\tfloat r= time*rnd*1.85;//untuk menggerakkan asap\n\tfloat si = sin(r);\n\tfloat co = cos(r);\n\t// Menggunakan 'rnd' untuk menggant noise.\n\td = noise4(hash(rnd*828.0)*83.1+mat2(co, si, -si, co)*loc.xy*2./(pos.y*.16)) * pow((1.-d), 3.)*.7;\n\treturn d;\n}\n\n//fungsi untuk membuat batu\nfloat RockParticle(vec2 loc, vec2 pos, float size, float rnd)\n{\n\tloc = loc-pos;\n\tfloat d = dot(loc, loc)/size;\n\tif (d > 1.0) return 0.0;\n\tfloat r= time*1.5 * (rnd);//untuk menggerakkan batu\n\tfloat si = sin(r);\n\tfloat co = cos(r);\n\td = noise4((rnd*38.0)*83.1+mat2(co, si, -si, co)*loc*143.0) * pow(1.0-d, 15.25);//rendering utama untuk batu\n\treturn pow(d, 2.)*5.;\n\t\n}\n\n\n//Gunung\nfloat MountDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, a, r, hd, s;\n  q = p;\n  a = atan (q.z, q.x) / (2. * pi) + 0.5;\n  r = length (q.xz);\n  s = 2. * Fbm2 (vec2 (33. * a, 7. * r)) - 0.5;\n  d = PrCylDf (q.xzy, 2.0, 3.0);\n  q.y -= 0.75;\n  d = max (d, - (PrSphDf (q, 0.35) - 0.03 * s));\n  hd = 0.015 * (1. + sin (64. * pi * a) + 2. * sin (25. * pi * a)) *\n     SmoothBump (0.5, 1.8, 0.3, r) + 0.15 * s * SmoothBump (0.1, 2., 0.2, r);\n  q.y -= 1.2 + hd;\n  d = max (max (d, - PrTorusDf (q.xzy, 2.8, 2.7)), 0.4 - length (q.xz));//Mengatur ukukuran dan bentuk pada gunung\n  q = p;\n  q.y -= -0.75;\n  d = max (SmoothMin (d, PrCylDf (q.xzy, 2.5, 0.05 *\n     (1. - smoothstep (2.2, 2.5, length (q.xz)))), 0.2), - q.y);\n  if (d < dMin) { dMin = d;  idObj = idMnt; }\n  q = p;\n  q.y -= lavHt;\n  d = PrCylDf (q.xzy, 0., 0.02);\n  if (d < dMin) { dMin = d;  idObj = idLav; }\n  return 0.8 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  dMin = MountDf (p, dMin);\n  for (int j = 0; j < NROCK; j ++) {\n    d = PrSphDf (p - rkPos[j].xyz, rkPos[j].w);\n    if (d < dMin) { dMin = d;  idObj = idRock;  qRad = rkPos[j].w; }\n  }\n  return dMin;\n}\n//pencahayaan pada gunung\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\n\n\n\n//background colour\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float f;\n  if (rd.y >= 0.) {\n    col = mix (col, vec3 (0.8), clamp (3. * (f - 0.5) * rd.y + 0.1, 0., 1.));\n  } else {\n    ro -= ((ro.y + 0.75) / rd.y) * rd;\n    col = vec3 (0.17, 0.14, 0.05) * (0.7 + 0.3 * Fbm2 (10. * ro.xz));\n    f = 0.3 - smoothstep (0.1, 1., length (ro.xz) / dstFar);\n    vn = VaryNf (10. * ro, vec3 (0., 1., 0.), 3. * f);\n    col = col * (0.1 + 0.1 * max (vn.y, 0.) + 0.8 * max (dot (vn, sunDir), 0.));\n  }\n  return col;\n}\n\n\n//triger untuk ouput gunung dan tanah \nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, roo;\n  float dstHit, dstFlm, dstFlmR, intFlm, bgFlm, s, dstSmk;\n \n  roo = ro;\n\n  \n  dstHit = ObjRay (ro, rd);\n  bgFlm = (5.0 + 1.0 * Noiseff (10. * tCur));//ambiance pada gunung\n \n  if (dstHit >= dstFar) col = BgCol (ro, rd);\n  else {\n    ro += dstHit * rd;\n    vn = ObjNf (ro);\n    if (idObj == idMnt) {\n      s = clamp (ro.y / 1.2 + 0.6, 0., 1.);\n      vn = VaryNf (10. * ro, vn, 5. - 2. * s);\n      col = (0.5 + 0.7 * bgFlm * s) * vec3 (0.2 + 0.1 * (1. - s),\n         0.05 + 0.2 * (1. - s), 0.05);\n      col = col * (0.1 + 0.1 * max (vn.y, 0.) +\n         0.8 * max (dot (vn, sunDir), 0.));\n    \n    \n    }\n  }\n  if (intFlm > 0.) col = mix (col, bgFlm * mix (vec3 (1., 0., 0.1),\n     vec3 (1., 1., 0.5), 0.5 * intFlm), 1.2 * intFlm);\n  ro = roo - smkPos;\n  \n  \n  col = mix (col, col4.rgb, min (col4.a, 1.));\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  time = (iTime+1.);\n  vec4 mPtr;\n  vec3 rd, ro;\n  vec2 canvas, uv;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  \n  mPtr.xy = mPtr.xy / canvas - 0.5;\n  dstFar = 30.;\n  szFac = 1.;\n\tvec3 col = vec3(0);  \n  vec2 uv1 = uv + vec2(0.,-0.21);\n    //looping partikel lava\n   for (float i = 0.0; i < 40.0; i+=1.0)\n\t{\n\t\tfloat t = time*1.3+i*(2.+hash(i*-1239.)*10.0);\n\t\tfloat sm = mod(t, 9.3)*.8;\n\t\tfloat rnd = floor(t / 9.3);\n\t\tvec2 pos = vec2(0.0, sm) *.5;\n\t\tpos.x += (hash(i*33.0+rnd)-.5)*.2 * sm*2.13;\n\t\t// Mechanics... a butchered d = vt + (1/2)at^2    ;)\n\t\tpos.y += (.1 - (.075+hash(i*30.0+rnd*36.7)*.15)*(sm*sm)*.8);\n\t\tfloat d = RockParticle(pos, uv1, .01*hash(i*1332.23)+.001, (hash(-i*42.13*rnd)-.5)*15.0);\n\t\tif (d <= 0.0) continue;\n\t\tfloat c = max(.3+abs(hash(i*11340.0))*.8+(1.0-sm*.5), 0.0);\n\t\tcol = mix(col, vec3(c,c*.2, 0.0), min(d, 1.));\n\t}\n\n\t// Looping partikel asap\n\tfor (float i = 0.0; i < 120.0; i+=1.0)\n\t{\n\t\t\n\t\tfloat t=  time+i*(10.+hash(i*-1239.)*2.0);\n\t\tfloat sm = mod(t, 8.6) *.5;\n\t\tfloat rnd = floor(t / 8.6);\n\n\t\tvec2 pos = vec2(0.0, sm) *.5;\n\t\tpos.x += (hash(i)-.5)*.2 * uv1.y*5.13;\n\t\tfloat d = SmokeParticle(pos, uv1, .03*hash(i*1332.23+rnd)+.001+sm*0.03, hash(i*rnd*2242.13)-0.5);\n\t\tif (d <= 0.0) continue;\n\t\td = d* max((3.0-(hash(i*1127.0)*1.5) - sm*.63), 0.0);\n\t\tfloat c = abs(hash(i*4.4));\n\t\t// warna pada asap\n\t\tcol= mix(col, vec3(c*.35, c*.3, c*.25), min(d, 1.0));\n\t\t// Semburan lava\n\t\tcol = mix(col, vec3(.52, .25, 0.0), max((d-1.05)*1.0, 0.0));\n\t}\n  ro = vec3 (0., 1. * smkPhs * (1. - smoothstep (0.9, 1., smkPhs)), -8.);\n  rd = normalize (vec3 (uv, 4.8));\n    \n \n  uv = ((fragCoord.xy/iResolution.xy));\n  vec3 test= ShowScene (ro, rd);\n  el = clamp (el, -0.01 * pi, 0.25 * pi);\n  sunDir = normalize (vec3 (5., 2., 1.));\n  vec3 col1 = col + ShowScene(ro,rd);\n  \n  fragColor = vec4 (col1 , 1.);\n}\n//membuat bentuk sphere\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)//membuat bentuk silinder\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n//Fungsi torus\nfloat PrTorusDf (vec3 p, float ri, float rc)//membuat bentuk torus\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 2.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2), dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)//tekstur untuk gunung\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p); \n  fp = fract (p);\n  fp = fp * fp * (5. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)//tekstur tanah pada badan gunung dan kaki gunung\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\n\nfloat Fbm2 (vec2 p)//efek berbatuan pada badan gunung\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\n\n\nfloat Fbmn (vec3 p, vec3 n)//efek grainny pada gunung\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);  \n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;  \n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n\n\nfloat SmoothMin (float a, float b, float r)//fungsi ini agar bentuk gunung tetap kerucut\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)//mengatur kedalaman pada tekstur batu di gunung\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}","name":"Image","description":"","type":"image"}]}