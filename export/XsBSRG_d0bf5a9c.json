{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//#define CARS\n#define I_MAX 70\n\nfloat rand(vec2 n) {\n  return fract(sin((n.x*1e2+n.y*1e4+1475.4526)*1e-4)*1e6);\n}\n\nfloat noise(vec2 p)\n{\n    p = floor(p*200.0);\n\treturn rand(p);\n}\nvec3 polygonXY(float z,vec2 vert1, vec2 vert2, vec3 camPos,vec3 rayDir){\n    float t = -(camPos.z-z)/rayDir.z;\n    vec2 cross = camPos.xy + rayDir.xy*t;\n    if (cross.x>min(vert1.x,vert2.x) && \n        cross.x<max(vert1.x,vert2.x) &&\n       \tcross.y>min(vert1.y,vert2.y) &&\n       \tcross.y<max(vert1.y,vert2.y) &&\n       dot(rayDir,vec3(cross,z)-camPos)>0.0){\n        \tfloat dist = length(camPos-vec3(cross,z));\n            return vec3(dist, cross.x-min(vert1.x,vert2.x),cross.y-min(vert1.y,vert2.y));\n        }\n    \n    return vec3(101.0,0.0,0.0);\n}\nvec3 polygonYZ(float x,vec2 vert1, vec2 vert2, vec3 camPos,vec3 rayDir){\n    float t = -(camPos.x-x)/rayDir.x;\n    vec2 cross1 = camPos.yz + rayDir.yz*t;\n    if (cross1.x>min(vert1.x,vert2.x) && \n        cross1.x<max(vert1.x,vert2.x) &&\n       \tcross1.y>min(vert1.y,vert2.y) &&\n       \tcross1.y<max(vert1.y,vert2.y)&&\n       dot(rayDir,vec3(x,cross1)-camPos)>0.0){\n        \tfloat dist = length(camPos-vec3(x,cross1));\n            return vec3(dist, cross1.x-min(vert1.x,vert2.x),cross1.y-min(vert1.y,vert2.y));\n        }\n    \n    return vec3(101.0,0.0,0.0);\n}\nvec3 polygonXZ(float y,vec2 vert1, vec2 vert2, vec3 camPos,vec3 rayDir){\n    float t = -(camPos.y-y)/rayDir.y;\n    vec2 cross1 = camPos.xz + rayDir.xz*t;\n    if (cross1.x>min(vert1.x,vert2.x) && \n        cross1.x<max(vert1.x,vert2.x) &&\n       \tcross1.y>min(vert1.y,vert2.y) &&\n       \tcross1.y<max(vert1.y,vert2.y)&&\n       dot(rayDir,vec3(cross1.x,y,cross1.y)-camPos)>0.0){\n        \tfloat dist = length(camPos-vec3(cross1.x,y,cross1.y));\n            return vec3(dist, cross1.x-min(vert1.x,vert2.x),cross1.y-min(vert1.y,vert2.y));\n        }\n    \n    return vec3(101.0,0.0,0.0);\n}\n\nvec3 textureWall(vec2 pos, vec2 maxPos, vec2 squarer,float s,float height,float dist,vec3 rayDir,vec3 norm){\n    float randB = rand(squarer*2.0);\n    vec3 windowColor =(-0.4+randB*0.8)*vec3(0.3,0.3,0.0)+(-0.4+fract(randB*10.0)*0.8)*vec3(0.0,0.0,0.3)+(-0.4+fract(randB*10000.0)*0.8)*vec3(0.3,0.0,0.0);\n    float floorFactor = 1.0;\n    vec2 windowSize = vec2(0.65,0.35);\n    vec3 wallColor = s*(0.3+1.4*fract(randB*100.0))*vec3(0.1,0.1,0.1)+(-0.7+1.4*fract(randB*1000.0))*vec3(0.02,0.,0.);\n\twallColor*=1.3;\n    \n    vec3 color = vec3(0.0);\n    vec3 conturColor = wallColor/1.5;\n    if (height<0.51){\n    \twindowColor += vec3(0.3,0.3,0.0);\n        windowSize = vec2(0.4,0.4);\n        floorFactor = 0.0;\n\n    }\n    if (height<0.6){floorFactor = 0.0;}\n    if (height>0.75){\n    \twindowColor += vec3(0.0,0.0,0.3);\n    }\n    windowColor*=1.5;\n    float wsize = 0.02;\n    wsize+=-0.007+0.014*fract(randB*75389.9365);\n    windowSize+= vec2(0.34*fract(randB*45696.9365),0.50*fract(randB*853993.5783));\n    \n    vec2 contur=vec2(0.0)+(fract(maxPos/2.0/wsize))*wsize;\n    if (contur.x<wsize){contur.x+=wsize;}\n    if (contur.y<wsize){contur.y+=wsize;}\n    \n\tvec2 winPos = (pos-contur)/wsize/2.0-floor((pos-contur)/wsize/2.0);\n    \n    float numWin = floor((maxPos-contur)/wsize/2.0).x;\n    \n    if ( (maxPos.x>0.5&&maxPos.x<0.6) && ( ((pos-contur).x>wsize*2.0*floor(numWin/2.0)) && ((pos-contur).x<wsize*2.0+wsize*2.0*floor(numWin/2.0)) )){\n     \t   return (0.9+0.2*noise(pos))*conturColor;\n    }\n    \n    if ( (maxPos.x>0.6&&maxPos.x<0.7) &&( ( ((pos-contur).x>wsize*2.0*floor(numWin/3.0)) && ((pos-contur).x<wsize*2.0+wsize*2.0*floor(numWin/3.0)) )||\n                                          ( ((pos-contur).x>wsize*2.0*floor(numWin*2.0/3.0)) && ((pos-contur).x<wsize*2.0+wsize*2.0*floor(numWin*2.0/3.0)) )) ){\n     \t   return (0.9+0.2*noise(pos))*conturColor;\n    }\n    \n    if ( (maxPos.x>0.7) &&( ( ((pos-contur).x>wsize*2.0*floor(numWin/4.0)) && ((pos-contur).x<wsize*2.0+wsize*2.0*floor(numWin/4.0)) )||\n                                          ( ((pos-contur).x>wsize*2.0*floor(numWin*2.0/4.0)) && ((pos-contur).x<wsize*2.0+wsize*2.0*floor(numWin*2.0/4.0)) )||\n                                          ( ((pos-contur).x>wsize*2.0*floor(numWin*3.0/4.0)) && ((pos-contur).x<wsize*2.0+wsize*2.0*floor(numWin*3.0/4.0)) )) ){\n     \t   return (0.9+0.2*noise(pos))*conturColor;\n    }\n    if ((maxPos.x-pos.x<contur.x)||(maxPos.y-pos.y<contur.y+2.0*wsize)||(pos.x<contur.x)||(pos.y<contur.y)){\n            return (0.9+0.2*noise(pos))*conturColor;\n        \n    }\n    if (maxPos.x<0.14) {\n     \t   return (0.9+0.2*noise(pos))*wallColor;\n    }\n    vec2 window = floor((pos-contur)/wsize/2.0);\n    float random = rand(squarer*s*maxPos.y+window);\n    float randomZ = rand(squarer*s*maxPos.y+floor(vec2((pos-contur).y,(pos-contur).y)/wsize/2.0));\n    float windows = floorFactor*sin(randomZ*5342.475379+(fract(975.568*randomZ)*0.15+0.05)*window.x);\n    \n\tfloat blH = 0.06*dist*600.0/iResolution.x/abs(dot(normalize(rayDir.xy),normalize(norm.xy)));\n    float blV = 0.06*dist*600.0/iResolution.x/sqrt(abs(1.0-pow(abs(rayDir.z),2.0)));\n    \n\twindowColor +=vec3(1.0,1.0,1.0);\n    windowColor *= smoothstep(0.5-windowSize.x/2.0-blH,0.5-windowSize.x/2.0+blH,winPos.x);\n   \twindowColor *= smoothstep(0.5+windowSize.x/2.0+blH,0.5+windowSize.x/2.0-blH,winPos.x);\n   \twindowColor *= smoothstep(0.5-windowSize.y/2.0-blV,0.5-windowSize.y/2.0+blV,winPos.y);\n   \twindowColor *= smoothstep(0.5+windowSize.y/2.0+blV,0.5+windowSize.y/2.0-blV,winPos.y);\n    \n    if ((random <0.05*(3.5-2.5*floorFactor))||(windows>0.65)){\n        \tif (winPos.y<0.5) {windowColor*=(1.0-0.4*fract(random*100.0));}\n        \tif ((winPos.y>0.5)&&(winPos.x<0.5)) {windowColor*=(1.0-0.4*fract(random*10.0));}\n            return (0.9+0.2*noise(pos))*wallColor+(0.9+0.2*noise(pos))*windowColor;\n\n\n    } \n    else{\n        windowColor*=0.08*fract(10.0*random);\n    }\n    \n    return (0.9+0.2*noise(pos))*wallColor+windowColor;\n\n}\n\nvec3 textureRoof(vec2 pos, vec2 maxPos,vec2 squarer){\n    float wsize = 0.025;\n    float randB = rand(squarer*2.0);\n    vec3 wallColor = (0.3+1.4*fract(randB*100.0))*vec3(0.1,0.1,0.1)+(-0.7+1.4*fract(randB*1000.0))*vec3(0.02,0.,0.);\n\tvec3 conturColor = wallColor*1.5/2.5;\n    vec2 contur = vec2(0.02);\n    if ((maxPos.x-pos.x<contur.x)||(maxPos.y-pos.y<contur.y)||(pos.x<contur.x)||(pos.y<contur.y)){\n            return (0.9+0.2*noise(pos))*conturColor;\n        \n    }\n    float step1 = 0.06+0.12*fract(randB*562526.2865);\n    pos -=step1;\n    maxPos -=step1*2.0;\n    if ((pos.x>0.0&&pos.y>0.0&&pos.x<maxPos.x&&pos.y<maxPos.y)&&((abs(maxPos.x-pos.x)<contur.x)||(abs(maxPos.y-pos.y)<contur.y)||(abs(pos.x)<contur.x)||(abs(pos.y)<contur.y))){\n            return (0.9+0.2*noise(pos))*conturColor;\n        \n    }\n    pos -=step1;\n    maxPos -=step1*2.0;\n    if ((pos.x>0.0&&pos.y>0.0&&pos.x<maxPos.x&&pos.y<maxPos.y)&&((abs(maxPos.x-pos.x)<contur.x)||(abs(maxPos.y-pos.y)<contur.y)||(abs(pos.x)<contur.x)||(abs(pos.y)<contur.y))){\n            return (0.9+0.2*noise(pos))*conturColor;\n        \n    }\n    pos -=step1;\n    maxPos -=step1*2.0;\n    if ((pos.x>0.0&&pos.y>0.0&&pos.x<maxPos.x&&pos.y<maxPos.y)&&((abs(maxPos.x-pos.x)<contur.x)||(abs(maxPos.y-pos.y)<contur.y)||(abs(pos.x)<contur.x)||(abs(pos.y)<contur.y))){\n            return (0.9+0.2*noise(pos))*conturColor;\n        \n    }\n    \n    return (0.9+0.2*noise(pos))*wallColor;\n    \n}\nvec3 cars(vec2 squarer, vec2 pos, float dist,float level){\n    vec3 color = vec3(0.0);\n    float carInten = 3.5/sqrt(dist);\n    float carRadis = 0.01; \n    if (dist>2.0) {carRadis *= sqrt(dist/2.0);}\n    vec3 car1 = vec3(0.5,0.5,1.0);\n    vec3 car2 = vec3(1.0,0.1,0.1);\n    float carNumber = 0.5;\n    \n    float random = noise((level+1.0)*squarer*1.24435824);\n    for (int j=0;j<10; j++){\n        float i = 0.03+float(j)*0.094;\n        if(fract(random*5.0/i)>carNumber){color += car1*carInten*smoothstep(carRadis,0.0,length(pos - vec2(fract(i+iTime/4.0),0.025)));}\n        \n        if(fract(random*10.0/i)>carNumber){color += car2*carInten*smoothstep(carRadis,0.0,length(pos - vec2(fract(i-iTime/4.0),0.975)));}\n    \tif(color.x>0.0) break;\n    }\n    for (int j=0;j<10; j++){\n        float i= 0.03+float(j)*0.094;\n        if(fract(random*5.0/i)>carNumber){color += car2*carInten*smoothstep(carRadis,0.0,length(pos - vec2(0.025,fract(i+iTime/4.0))));}\n        if(fract(random*10.0/i)>carNumber){color += car1*carInten*smoothstep(carRadis,0.0,length(pos - vec2(0.975,fract(i-iTime/4.0))));}\n        \tif(color.x>0.0) break;\n\n    }\n    for (int j=0;j<10; j++){\n        float i = 0.03+0.047+float(j)*0.094;\n        if(fract(random*100.0/i)>carNumber){color += car1*carInten*smoothstep(carRadis,0.0,length(pos - vec2(fract(i+iTime/4.0),0.045)));}\n        if(fract(random*1000.0/i)>carNumber){color += car2*carInten*smoothstep(carRadis,0.0,length(pos - vec2(fract(i-iTime/4.0),0.955)));}\n        \tif(color.x>0.0) break;\n\n    }\n    for (int j=0;j<10; j++){\n        float i = 0.03+0.047+float(j)*0.094;\n        if(fract(random*100.0/i)>carNumber){color += car2*carInten*smoothstep(carRadis,0.0,length(pos - vec2(0.045,fract(i+iTime/4.0))));}\n        if(fract(random*1000.0/i)>carNumber){color += car1*carInten*smoothstep(carRadis,0.0,length(pos - vec2(0.955,fract(i-iTime/4.0))));}\n        \tif(color.x>0.0) break;\n\n    }\n    return color;\n}\nvec3 textureGround(vec2 squarer, vec2 pos,vec2 vert1,vec2 vert2,float dist){\n    vec3 color = (0.9+0.2*noise(pos))*vec3(0.1,0.15,0.1);\n    float randB = rand(squarer*2.0);\n\n    vec3 wallColor = (0.3+1.4*fract(randB*100.0))*vec3(0.1,0.1,0.1)+(-0.7+1.4*fract(randB*1000.0))*vec3(0.02,0.,0.);\n\tfloat fund = 0.03;\n    float bl = 0.01;\n    float f = smoothstep(vert1.x-fund-bl,vert1.x-fund,pos.x);\n    f *= smoothstep(vert1.y-fund-bl,vert1.y-fund,pos.y);\n    f *= smoothstep(vert2.y+fund+bl,vert2.y+fund,pos.y);\n    f *= smoothstep(vert2.x+fund+bl,vert2.x+fund,pos.x);\n\n    pos -= 0.0;\n    vec2 maxPos = vec2(1.,1.);\n    vec2 contur = vec2(0.06,0.06);\n    if ((pos.x>0.0&&pos.y>0.0&&pos.x<maxPos.x&&pos.y<maxPos.y)&&((abs(maxPos.x-pos.x)<contur.x)||(abs(maxPos.y-pos.y)<contur.y)||(abs(pos.x)<contur.x)||(abs(pos.y)<contur.y))){\n            color =  vec3(0.1,0.1,0.1)*(0.9+0.2*noise(pos));\n        \n    }\n    pos -= 0.06;\n    maxPos = vec2(.88,0.88);\n    contur = vec2(0.01,0.01);\n    if ((pos.x>0.0&&pos.y>0.0&&pos.x<maxPos.x&&pos.y<maxPos.y)&&((abs(maxPos.x-pos.x)<contur.x)||(abs(maxPos.y-pos.y)<contur.y)||(abs(pos.x)<contur.x)||(abs(pos.y)<contur.y))){\n            color =  vec3(0.,0.,0.);\n        \n    }\n    color = mix(color,(0.9+0.2*noise(pos))*wallColor*1.5/2.5,f);\n\n    pos+=0.06;\n    \n#ifdef CARS\n    if (pos.x<0.07||pos.x>0.93||pos.y<0.07||pos.y>0.93){\n        color+=cars(squarer,pos,dist,0.0);\n    }\n#endif\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pos = (fragCoord.xy*2.0 - iResolution.xy) / iResolution.y;\n    float t = -iTime;\n    float tt = -iTime-0.5;\n    \n    \n    vec3 camPos = vec3(5.0+12.0*sin(t*0.05),5.0+ 7.0*cos(t*0.05), 1.9);\n    \n    vec3 camTarget = vec3(5.0+0.0,5.0+7.0*sin(t*0.05), 0.0);\n    if (fract(t/12.0)<0.25){\n    \tcamPos = vec3(5.*t,3.1*t,2.1);\n\t\tcamTarget = vec3(5.*tt,3.1*tt,1.7);\n    }\n    if (fract(t/12.0)>0.75){\n    \tcamPos = vec3(35.,3.1,1.);\n\t\tcamTarget = vec3(35.+sin(t/10.0),3.1+cos(t/10.0),0.7);\n    }\n    vec3 camDir = normalize(camTarget-camPos);\n    vec3 camUp  = normalize(vec3(0.0, 0.0, -1.0));\n    vec3 camSide = cross(camDir, camUp);\n    camUp  = cross(camDir, camSide);\n    vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*1.6);\n    float angle = 0.03*pow(abs(acos(rayDir.x)),4.0);\n    //angle = min(0.0,angle);\n    vec3 color = vec3(0.0);\n    vec2 square = floor(camPos.xy);\n    square.x += 0.5-0.5*sign(rayDir.x);\n    square.y += 0.5-0.5*sign(rayDir.y);\n    float mind = 100.0;\n    int k = 0;\n    vec3 pol;\n    vec2 maxPos;\n    vec2 crossG;\n    float tSky = -(camPos.z-3.9)/rayDir.z;\n    vec2 crossSky = floor(camPos.xy + rayDir.xy*tSky);\n    for (int i=1; i<I_MAX; i++){\n                \n        vec2 squarer = square-vec2(0.5,0.5)+0.5*sign(rayDir.xy);\n        if (crossSky == squarer&&crossSky!=floor(camPos.xy))\n        {\n        \tcolor += vec3(vec2(0.5,0.15)*abs(angle)*exp(-rayDir.z*rayDir.z*30.0),0.2);\n            break;\n\n        }\n        float t;\n        float random = rand(squarer);\n        float height = 0.0;\n        float quartalR = rand(floor(squarer/10.0));\n        if (floor(squarer/10.0) == vec2(0.0,0.0)) quartalR = 0.399;\n        if (quartalR<0.4) {\n            height = -0.15+0.4*random+smoothstep(12.0,7.0,length(fract(squarer/10.0)*10.0-vec2(5.0,5.0)))*0.8*random+0.9*smoothstep(10.0,0.0,length(fract(squarer/10.0)*10.0-vec2(5.0,5.0)));\n        \theight*=quartalR/0.4;\n        }\n        float maxJ=2.0;\n        float roof = 1.0;\n        if (height<0.3){\n            height = 0.3*(0.7+1.8*fract(random*100.543264));maxJ = 2.0;\n            if (fract(height*1000.0)<0.04) height*=1.3;\n        }\n        if (height>0.5) {maxJ=3.0;}\n        if (height>0.85){maxJ = 4.0;}\n        if (fract(height*100.0)<0.15){height = pow(maxJ-1.0,0.3)*height; maxJ = 2.0; roof = 0.0;}\n\n        \n        float maxheight = 1.5*pow((maxJ-1.0),0.3)*height+roof*0.07;\n        if (camPos.z+rayDir.z*(length(camPos.xy - square) +0.71 - sign(rayDir.z)*0.71)/length(rayDir.xy)<maxheight){\n\t\t\tvec2 vert1r;\n        \tvec2 vert2r;\n            float zz = 0.0;\n            float prevZZ = 0.0;\n            for(int nf=1;nf<8;nf++){\n                float j = float(nf);\n   \t        \tif(j>maxJ){break;}\n                prevZZ = zz;\n   \t    \t    zz = 1.5*pow(j,0.3)*height;\n                //prevZZ = zz-0.8;\n\n   \t\t     \tfloat dia = 1.0/pow(j,0.3);\n            \tif(j==maxJ){\n                    if (roof == 0.0) {break;}\n      \t\t      \tzz = 1.5*pow((j-1.0),0.3)*height+0.03+0.04*fract(random*1535.347);\n     \t           \tdia = 1.0/pow((j-1.0),0.3)-0.2-0.2*fract(random*10000.0);\n       \t\t    }\n            \n            \tvec2 v1 = vec2(0.0);//vec2(random*10.0,random*1.0);\n            \tvec2 v2 = vec2(0.0);//vec2(random*1000.0,random*100.0);\n                float randomF = fract(random*10.0);\n                if (randomF<0.25){ v1 = vec2(fract(random*1000.0),fract(random*100.0));}\n                if (randomF>0.25&&randomF<0.5){ v1 = vec2(fract(random*100.0),0.0);v2 = vec2(0.0,fract(random*1000.0));}\n                if (randomF>0.5&&randomF<0.75){ v2 = vec2(fract(random*1000.0),fract(random*100.0));}\n                if (randomF>0.75){ v1 = vec2(0.0,fract(random*1000.0)); v2 = vec2(fract(random*100.0),0.0);}\n            \tif (rayDir.y<0.0){\n            \t    float y = v1.y;\n            \t    v1.y = v2.y;\n            \t    v2.y = y;\n            \t}\n            \tif (rayDir.x<0.0){\n            \t    float x = v1.x;\n            \t    v1.x = v2.x;\n            \t    v2.x = x;\n            \t}\n            \n        \t\tvec2 vert1 = square+sign(rayDir.xy)*(0.5-0.37*(dia*1.0-1.0*v1));\n        \t\tvec2 vert2 = square+sign(rayDir.xy)*(0.5+0.37*(dia*1.0-1.0*v2));\n                if (j==1.0){ \n                    vert1r = vec2(min(vert1.x, vert2.x),min(vert1.y,vert2.y));\n                    vert2r = vec2(max(vert1.x, vert2.x),max(vert1.y,vert2.y));\n                }\n            \n        \t\tvec3 pxy = polygonXY(zz,vert1,vert2,camPos,rayDir);\n            \tif (pxy.x<mind){mind = pxy.x; pol = pxy; k=1;maxPos = vec2(abs(vert1.x-vert2.x),abs(vert1.y-vert2.y));}\n            \n        \t\tvec3 pyz = polygonYZ(vert1.x,vec2(vert1.y,prevZZ),vec2(vert2.y,zz),camPos,rayDir);\n            \tif (pyz.x<mind){mind = pyz.x; pol = pyz; k=2;maxPos = vec2(abs(vert1.y-vert2.y),zz-prevZZ);}\n\n        \t\tvec3 pxz = polygonXZ(vert1.y,vec2(vert1.x,prevZZ),vec2(vert2.x,zz),camPos,rayDir);\n            \tif (pxz.x<mind){mind = pxz.x; pol = pxz; k=3;maxPos = vec2(abs(vert1.x-vert2.x),zz-prevZZ);}\n               \t\n\n        \t}\n            \n        \tif ((mind<100.0)&&(k==1)){\n            \tcolor += textureRoof(vec2(pol.y,pol.z),maxPos,squarer);\n                if (mind>3.0){color*=sqrt(3.0/mind);}\n\n            \tbreak;\n        \t} \n        \tif ((mind<100.0)&&(k==2)){\n            \tcolor += textureWall(vec2(pol.y,pol.z),maxPos,squarer,1.2075624928,height,mind,rayDir,vec3(1.0,0.0,0.0));\n            \tif (mind>3.0){color*=sqrt(3.0/mind);}\n            \tbreak;\n        \t} \n        \n        \tif ((mind<100.0)&&(k==3)){\n            \tcolor += textureWall(vec2(pol.y,pol.z),maxPos,squarer,0.8093856205,height,mind,rayDir,vec3(0.0,1.0,0.0));\n            \tif (mind>3.0){color*=sqrt(3.0/mind);}\n\n            \tbreak;\n        \t}\n        \tt = -camPos.z/rayDir.z;\n    \t\tcrossG = camPos.xy + rayDir.xy*t;\n        \tif (floor(crossG) == squarer)\n        \t{\n            \tmind = length(vec3(crossG,0.0)-camPos);\n            \tcolor += textureGround(squarer,fract(crossG),fract(vert1r),fract(vert2r),mind);\n            \tif (mind>3.0){color*=sqrt(3.0/mind);}\n\n            \tbreak;\n        \t}\n        \n        } \n        \n            \n        if ((square.x+sign(rayDir.x)-camPos.x)/rayDir.x<(square.y+sign(rayDir.y)-camPos.y)/rayDir.y) {\n            square.x += sign(rayDir.x)*1.0;\n        } else {\n            square.y += sign(rayDir.y)*1.0;\n        }\n        \n        if(i==I_MAX-1&&rayDir.z>-0.1) {color += vec3(vec2(0.5,0.15)*abs(angle)*exp(-rayDir.z*rayDir.z*30.0),0.2);}\n\n    }\n    fragColor = vec4( color, 1.0);;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsBSRG","date":"1412951562","viewed":16173,"name":"Morning city","username":"Devin","description":"Turn on fullscreen!","likes":128,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","city"],"hasliked":0,"parentid":"","parentname":""}}