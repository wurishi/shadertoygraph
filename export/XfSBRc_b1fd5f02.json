{"ver":"0.1","info":{"id":"XfSBRc","date":"1725232280","viewed":19,"name":"Cam mirror","username":"ShaderDizzle","description":"Here you mirror for action","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["justamirrorfromchannel0"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy shader with noiseIntensity controlled by iChannel1 input\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Mirror effect: flip coordinates horizontally\n    uv.x = abs(uv.x - 0.5) * 2.0;\n    \n    // Fetch the camera input texture\n    vec3 color = texture(iChannel0, uv).rgb;\n    \n    // Adjustable parameters\n    float pixelateScale = 20.0; // Pixelate effect scale\n    float rgbShiftAmount = 0.01; // RGB shift amount\n    \n    // Fetch the noise intensity from iChannel1 (texture or input source)\n    float noiseIntensity = texture(iChannel1, uv).r; // Assuming red channel controls noise intensity\n    \n    // Pixelate effect\n    vec2 pixelatedUV = floor(uv * pixelateScale) / pixelateScale;\n    vec3 pixelatedColor = texture(iChannel0, pixelatedUV).rgb;\n    \n    // Noise effect\n    float noise = (fract(sin(dot(uv ,vec2(12.9898,78.233))) * 43758.5453) - 0.5) * 2.0;\n    vec3 noiseColor = color + noise * noiseIntensity;\n    \n    // RGB shift effect\n    vec2 rgbShift = vec2(rgbShiftAmount, 0.0);\n    vec3 rgbShiftColor = vec3(\n        texture(iChannel0, uv + rgbShift).r,\n        texture(iChannel0, uv).g,\n        texture(iChannel0, uv - rgbShift).b\n    );\n    \n    // Combine effects\n    vec3 finalColor = mix(pixelatedColor, noiseColor, 0.5);\n    \n    // add sound effect\n    \n    \n    finalColor = mix(finalColor, rgbShiftColor, 0.5);\n    \n    // Output final color\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}