{"ver":"0.1","info":{"id":"fsBSDD","date":"1620222268","viewed":124,"name":"load_spinner_with_chromatic_aber","username":"skaplun","description":"Based on https://twitter.com/loackme_/status/1389690617857548294?s=20","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","grayscale","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA (10./max(iResolution.x, iResolution.y))\n#define rot2d(a) mat2(cos(a), -sin(a), sin(a), cos(a))\n#define POINT_SIZE .3\n\nconst float PI = acos(-1.);\nconst float HPI = PI*.25;\nconst float TAU = PI*2.;\n\nfloat point(vec2 uv, float pos, float size)\n{\n    float ang = atan(uv.x, uv.y)/TAU + .5;\n    float mang = mod(ang, .25);\n    \n    float res = 0.;\n    for(float i = 0.; i < 3.; i++)\n    {\n        mang -= .25 * i;\n        vec2 muv = vec2(cos(mang * PI * 2.) * length(uv), sin(mang * PI * 2.) * length(uv));\n        vec2 p = mix(vec2(0., 2.), vec2(2., 0.), pos);\n        float c = smoothstep(size + AA, size, distance(p, muv));\n        res = max(res, c);\n    }\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. * fragCoord - iResolution.xy)/iResolution.y;\n    uv *= rot2d(iTime * .25);\n    uv *= 2.5 + sin(iTime) * .25;\n    vec2 uv2 = uv * mat2(cos(HPI), -sin(HPI), sin(HPI), cos(HPI));\n    \n    vec3 val = vec3(0.);\n    for (float i = 0.; i < 5.; i ++){\n        float time = smoothstep(.75 - .25 * i/5., .25 - .25 * i/5., fract(iTime * .5));\n        time = pow(time, 16./(i + 1.));\n        float aber_offset = AA * 5. * smoothstep(.45, .05, distance(time, .5));\n        float size = POINT_SIZE - smoothstep(.45, .05, distance(time, .5)) * (POINT_SIZE * .5);\n        val.r += point(uv, time - aber_offset, size);\n        val.g += point(uv, time, size);\n        val.b += point(uv, time + aber_offset, size);\n        \n        val.r += point(uv2, time - aber_offset, size);\n        val.g += point(uv2, time, size);\n        val.b += point(uv2, time + aber_offset, size);\n    }\n    \n    fragColor = vec4(val, 1.);\n}","name":"Image","description":"","type":"image"}]}