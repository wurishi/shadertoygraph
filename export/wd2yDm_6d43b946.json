{"ver":"0.1","info":{"id":"wd2yDm","date":"1586795449","viewed":472,"name":"Cracked","username":"Kali","description":"Marching a terrain with a dark mood, using trig functions and fractals. ","likes":30,"published":1,"flags":0,"usePreview":0,"tags":["fractal","terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float st=.02, maxdist=8.,m,mc;\nvec3 ldir=vec3(-.5,-1.,-1.);\n\nmat2 rot(float a) {\n\tfloat s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat map(vec2 p) {\n    float s=0.;\n    m=mc=100.;\n    float l2;\n    float y=(sin(p.x+cos(p.y*2.)+2.724)+cos(p.y))*8.;\n    vec2 mcol=vec2(100.);\n\tp=abs(.5-fract(p*.03));\n    y+=smoothstep(.5,.4,length(p.xy))*10.;\n    vec2 pos=p;\n    for (int i=0; i<6; i++) {\n    \tp=abs(p+1.)-abs(p-1.)-p;\n        float l=dot(p,p);\n        p=p*2./clamp(l,.25,1.)-pos;\n        s+=exp(-.3*abs(l-l2));\n        l2=l;\n        if (i>2 && i<5) m=min(min(abs(p.y),abs(p.x)),m);\n        mc=min(mc,l);\n    }\n    m=pow(max(0.,1.-m),6.);\n    return (y+s)*.05-m*.1;\n}\n\n\nvec3 normal(vec2 p) {\n\tvec2 eps=vec2(0.,.01);\n    return normalize(vec3(map(p+eps.yx)-map(p-eps.yx),2.*eps.y,map(p+eps.xy)-map(p-eps.xy)));\n}\n\nvec2 hit(vec3 p) {\n    float h=map(p.xz);\n    return vec2(step(p.y,h),h);\n}\n\nfloat fog(vec3 p,float h) {\n    p.y=p.y*2.-1.-h*1.5;\n    p.x+=p.z*1.234+iTime*.5;\n\tp=abs(2.-mod(p,4.));\n    for (int i; i<10; i++) {\n    \tp=abs(p)/dot(p,p)-.8;\n    }\n    return length(p);\n}\n\nvec3 bsearch(vec3 from, vec3 dir, float td) {\n    vec3 p;\n    st*=-.5;\n    td+=st;\n    float h2=1.;\n    for (int i=0; i<20; i++) {\n        p=from+td*dir;\n        float h=hit(p).x;\n        if (abs(h-h2)>.001) {\n            st*=-.5;\n\t        h2=h;\n        }\n        td+=st;\n    }\n\treturn p;\n}\n\nvec3 shade(vec3 p, vec3 dir, float h) {\n    float val = dot(sin(p*6. - cos(p.yzx*12.)*3.), vec3(.166)) + .5; // Or noise, etc.\n    vec3 ember = pow(vec3(1.6, 1, 1)*val, vec3(1, 8, 34)); // Poor man's fire palette. \n \tvec3 col = ember *m*pow(smoothstep(.3,.5,abs(.5-fract(mc*.5+h*.5+iTime*.5))),2.);\n\n    ldir=normalize(ldir);\n\tvec3 n=normal(p.xz);\n    vec3 ref=reflect(dir,ldir);\n    float spe=pow(max(0.,dot(ref,-n))*.5,3.)*2.5;\n    return col+spe;\n}\n\n\nvec3 march(vec3 from, vec3 dir) {\n\tvec3 p, col=vec3(0.);\n    float td=1., k=0.;\n    vec2 h;\n    for (int i=0; i<350; i++) {\n    \tp=from+dir*td;\n        h=hit(p);\n        k+=fog(p,h.y)*pow(max(0.,1.-abs(p.y-h.y)*.25),2.);\n        if (h.x > .5 || td>maxdist) break;\n        td+=st;\n    }\n    float f=pow(td/maxdist,2.);\n    if (h.x > .5) {\n        p=bsearch(from, dir, td);\n    \tcol=shade(p,dir,h.y);\n    } \n\tcol=mix(col,vec3(.2*(1.-p.y*.25)),f)*min(1.,iTime*.5);\n    return col*vec3(1.,.9,.8)+k*.0007;\n}\n\nmat3 lookat(vec3 dir, vec3 up) {\n\tdir=normalize(dir);vec3 rt=normalize(cross(dir,normalize(up)));\n    return mat3(rt,cross(rt,dir),dir);\n}\n\nvec3 path(float t) {\n\treturn vec3(sin(t*.2645)+cos(t*.1213)*2.,2.5+sin(t*.354)*.2,t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n\tfloat t=iTime+15.;\n    vec3 from=path(t);\n    vec3 dir=normalize(vec3(uv,1.));\n    vec3 adv=from-path(t-1.);\n    dir=lookat(adv+vec3(0.,-.5,0.),vec3(adv.x*.3,1.,0.))*dir;\n    vec3 col=march(from, dir);\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}