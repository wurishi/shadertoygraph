{"ver":"0.1","info":{"id":"l3Bfzz","date":"1729115763","viewed":15,"name":"Damaged VC yiliu7 258","username":"yiliu7","description":"Simulating a damaged VCR playing a video","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chromaticaberration"],"hasliked":0,"parentid":"stGBWR","parentname":"Damaged VCR puzzle"},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 normalizedUV = fragCoord/iResolution.xy;\n    \n    // Glitch effect: calculate a dynamic horizontal shift based on time and fragment position\n    vec2 warpedUv = normalizedUV;\n    float glitchPosition = mod(iTime * 10.0, iResolution.y); // Moving glitch line based on time\n    float verticalDistance = fragCoord.y - glitchPosition;  // Distance from the current fragment to the glitch line\n    \n    // Apply distortion for pixels below the glitch line using a different formula for horizontal warp\n    if(verticalDistance > 0.0) {\n        float warpFactor = tan(verticalDistance * 0.8);  // Use tangent for the warp factor\n        float smoothFalloff = smoothstep(80.0, 0.0, verticalDistance);  // Invert smoothstep for falloff\n        warpedUv.x += warpFactor * smoothFalloff * 0.1;  // Apply distortion to the UV's x-coordinate\n    }\n\n\n    vec2 offset1 = vec2(15.0, 25.0 * cos(iTime)) / iResolution.xy;  \n    vec2 offset2 = vec2(12.0 * cos(iTime), 8.0) / iResolution.xy; \n    vec2 offset3 = vec2(15.0, 6.0 * cos(iTime)) / iResolution.xy;\n\n    \n    float r = texture(iChannel0, warpedUv + offset1).r;\n    float g = texture(iChannel0, warpedUv + offset2).g;\n    float b = texture(iChannel0, warpedUv + offset3).b;\n                          \n    vec3 col = vec3(r, g, b);\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}