{"ver":"0.1","info":{"id":"mdGfzR","date":"1697981132","viewed":61,"name":"Lenia Pt.6 Continuous Arrays","username":"26apastor","description":"An implementation of an experimental version of Lenia I made that uses the sum of 3 functions instead of indexing an array.\nPlease credit me with the idea!","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["automata","life","cellular","continuous","artificial","lenia"],"hasliked":0,"parentid":"dsGyzK","parentname":"Lenia Pt.4 (Optimized)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float con = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    col = vec4(pow(col.x, con), pow(col.y, con), pow(col.z, con), 1.0);\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float max_radius = 10.0;\nconst float invRadius = 0.1;\nconst float rt2Rad = 0.14142135;\nconst float T = 5.0;\nconst float rho = 0.5;\nconst float omega = 0.15;\nconst float noise_base = 0.15;\n\nconst float nop = 0.0;\nvec3 beta0   = vec3(0.5,        1.0 / 12.0, 1.0);\nvec3 beta1   = vec3(1.0, 1.0,        nop);\nvec3 beta2   = vec3(2.0 / 3.0,  nop,        nop);\nvec3 betaLen = vec3(3.0,        2.0,        1.0);\nvec3 mu      = vec3(0.11,      0.193,      0.342);\nvec3 sigma   = vec3(0.0118,     0.059,      0.0891);\n\nvec3 gaussian_bell(vec3 x, vec3 m, vec3 s) {\n    return exp(-(((x - m) * (x - m)) / s) / s / 2.0);\n}\n\nfloat gaussian_bell(float x, float m, float s) {\n    return exp(-pow((x - m) / s, 2.0) / 2.0);\n}\n\nvec3 getWeight(float dist) {\n    vec3 Br = dist * betaLen;\n    vec3 radiuses = vec3(0.0);\n    for (int i = 0; i < 4; i++) {\n        radiuses[i] += beta0[i] * gaussian_bell(dist, 0.0, 1.0 / betaLen[i]) +\n                       beta1[i] * gaussian_bell(dist, 1.0, 1.0 / betaLen[i]) +\n                       beta2[i] * gaussian_bell(dist, 2.0, 1.0 / betaLen[i]);\n    }\n    \n    vec3 Br_mod = mod(Br, 1.0);\n    return radiuses * gaussian_bell(Br_mod, vec3(rho), vec3(omega));\n}\n\nfloat getCell(vec2 xy)\n{\n    xy = mod(xy / iResolution.xy, 1.);\n    vec3 rgb = texture(iChannel0, xy).rgb;\n    return rgb.r + rgb.g + rgb.b;\n}\n\nvec3 getColor(vec3 g) {\n    vec3 c1 = vec3(gaussian_bell(g.x, 1.0, 0.5), gaussian_bell(g.x, 0.0, 0.5), gaussian_bell(g.x, -1.0, 0.5));\n    float s1 = c1.r + c1.g +  c1.b;\n    \n    vec3 c2 = vec3(gaussian_bell(g.y, 1.0, 0.5), gaussian_bell(g.y, 0.0, 0.5), gaussian_bell(g.y, -1.0, 0.5));\n    float s2 = c2.r + c2.g +  c2.b;\n    \n    vec3 c3 = vec3(gaussian_bell(g.z, 1.0, 0.5), gaussian_bell(g.z, 0.0, 0.5), gaussian_bell(g.z, -1.0, 0.5));\n    float s3 = c3.r + c3.g +  c3.b;\n    \n    return (c1 / s1 + c2 / s2 + c3 / s3) * 0.333;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 sum = vec3(0.0), total = vec3(0.0);\n    \n    float r = 0.0;\n    vec3 weight = getWeight(0.0);\n    float cell = getCell(fragCoord); sum += cell * weight; total += weight;\n    for( float x = 1.0; x <= max_radius; x++) {\n        r = x * invRadius;\n        weight = getWeight(r);\n        cell = getCell(fragCoord + vec2(x, 0));  sum += cell * weight; total += weight;\n        cell = getCell(fragCoord + vec2(-x, 0)); sum += cell * weight; total += weight;\n        cell = getCell(fragCoord + vec2(0, x));  sum += cell * weight; total += weight;\n        cell = getCell(fragCoord + vec2(0, -x)); sum += cell * weight; total += weight;\n    }\n    \n    for (float x = 1.0; x <= max_radius; x++)\n    {\n        r = x * rt2Rad;\n        if (r <= 1.0) {\n            weight = getWeight(r);\n            cell = getCell(fragCoord + vec2(x, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(x, -x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, -x)); sum += cell * weight; total += weight;\n        }\n    }\n\n    for (float y = 1.0; y <= max_radius-1.0; y++)\n    for (float x = y + 1.0; x <= max_radius; x++)\n    {\n        r = sqrt(x*x + y*y) * invRadius;\n        if (r <= 1.0) {\n            weight = getWeight(r);\n            cell = getCell(fragCoord + vec2(x, y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(x, -y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-x, -y)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(y, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(y, -x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-y, x)); sum += cell * weight; total += weight;\n            cell = getCell(fragCoord + vec2(-y, -x)); sum += cell * weight; total += weight;\n        }\n    }\n    \n    sum /= total;\n    \n    vec4 pc = texture(iChannel0, uv);\n    vec3 g123 = (gaussian_bell(sum, mu, sigma) * 2.0 - 1.0);\n    float g = (g123.x + g123.y + g123.z) * 0.333; vec3 c = getColor(g123);\n    vec3 color = clamp(pc.x + pc.y + pc.z + g / T, 0.0, 1.0) * c;\n    if (iFrame < 1) {\n        color = vec3(0.015 + noise(fragCoord/(max_radius * 3.5) + mod(iDate.w,1.)*100.0));\n    }\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= max_radius/iResolution.x)\n        \tcolor = vec3(0.3 + noise(fragCoord/max_radius + mod(iDate.w,1.)*100.));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*Chakazul's use of this hash function is genius and all credits to him in his implementation of lenia: https://www.shadertoy.com/user/Chakazul\n*/\n\n// Noise simplex 2D by iq - https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}","name":"Common","description":"","type":"common"}]}