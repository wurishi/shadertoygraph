{"ver":"0.1","info":{"id":"fl3fRl","date":"1663462572","viewed":102,"name":"basic pyramid","username":"jt","description":"A basic pyramid build using [url=https://www.shadertoy.com/user/iq]iq[/url]'s [url=https://www.shadertoy.com/view/ftVSDd]Square Stairs - distance[/url].","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["stairs","pyramid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/fl3fRl basic pyramid by jt\n// using https://www.shadertoy.com/view/ftVSDd Square Stairs - distance by iq\n\n// NOTES:\n// This approach is faster than voxels (try increasing variable n in the pyramid function).\n// The most work is done by iq's stair function basically \"rotated\" using an infinity norm\n// (used iq's stairs because my own stairs function would give a hollow pyramid instead)\n// (using the euclidean norm gives a round pyramid (Towers-of-Hanoi style)).\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdSquareStairs( in vec2 p, in float s, in float n ) // https://www.shadertoy.com/view/ftVSDd Square Stairs - distance by iq\n{\n    // constant for a given shape\n    const float kS2 = sqrt(2.0);\n    float w = 2.0*n+1.0;\n    \n    // pixel dependent computations\n    p = vec2( abs(p.y+p.x), p.y-p.x ) * (0.5/s);\n\n    float x1 = p.x-w;\n    float x2 = abs(p.x-2.0*min(round(p.x/2.0),n))-1.0;\n    \n    float d1 = dot2( vec2(x1, p.y) + clamp(0.5*(-x1-p.y), 0.0, w  ) );\n    float d2 = dot2( vec2(x2,-p.y) + clamp(0.5*(-x2+p.y), 0.0, 1.0) );\n\n    return sqrt(min(d1,d2)) *\n           sign(max(x1-p.y,(x2+p.y)*kS2)) *\n           s*kS2;\n}\n\nfloat pyramid(vec3 p)\n{\n    float n = 16.0;\n    float s = 1.0/n;\n    //vec2 q = vec2(-length(vec2(p)), p.z); // round - gives on of the \"Towers of Hanoi\" ;-)\n    vec2 q = vec2(-max(abs(p.x), abs(p.y)), p.z); // square\n    return sdSquareStairs(q+vec2(2.,-s), s, n);\n    //vec2 q = vec2(length(vec2(p)), p.z); // round\n    //vec2 q = vec2(max(abs(p.x), abs(p.y)), p.z); // square\n    //return sdSquareStairs(q-vec2(8.0,0.0), s, n)-0.1;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 500.0\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat map(vec3 p)\n{\n    return\n        min\n        (\n            pyramid(p),\n            halfspace(p, -1.0)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\n// adapted from https://iquilezles.org/articles/rmshadows\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        //if(h < EPSILON)\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    float t = trace(ro, rd, t0, t1);\n    return t < t1 ? 0.0 : 1.0;\n    //return t < t1 - EPSILON ? 0.0 : 1.0; // in case of shadow-errors try this\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 ndc = 2.0 * fragCoord.xy / iResolution.xy - 1.0;\n    ndc.x *= iResolution.x / iResolution.y;\n    vec2 m = length(iMouse.xy) <= 10. // click in lower left corner...\n           ? pi * vec2(2.0 * fract(iTime * 0.01), 2.5 / 4.0) // ...for demo mode\n           : pi * vec2(2.0 * iMouse.x / iResolution.x, 0.5 + 0.5 * iMouse.y / iResolution.y); // mouse look\n\n    mat2 R = mat2(cos(m.x), sin(m.x), -sin(m.x), cos(m.x));\n    vec3 ro = vec3(0.0, 0.0,-7.5);\n    mat2 S = mat2(cos(m.y), sin(m.y), -sin(m.y), cos(m.y));\n    ro.yz = S * ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = S * rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(0.0,-1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX * 0.1/*optimization*/); \n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n    color = mix(color, vec3(0.0), dist/DIST_MAX); // tweak light & colors \n    color *= clamp(dst.z+1.5, 0.0, 1.0); // tweak light & colors \n\n    fragColor = (dist < DIST_MAX) ? vec4(color, 1.0) : vec4(0.0);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}