{"ver":"0.1","info":{"id":"WssyDX","date":"1585733302","viewed":819,"name":"Cheap Integer Hash","username":"tomoe","description":"3-times XorShift and 2-times multiplication.","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u); //large odd digits, 0 and 1 are fully mixed\n\nfloat hash11(uint n){\n    n ^= (n << 9);\n    n ^= (n >> 1);\n    n ^= (n << 1);\n    n *= k.x;\n    return float(n) / float(0xffffffffu);\n}\nvec2 hash22(uvec2 n){\n    n ^= (n.yx << 9);\n    n ^= (n.yx >> 1);\n    n *= k.xy;\n    n ^= (n.yx << 1);\n    n *= k.xy;\n    return vec2(n) / float(0xffffffffu);\n}\nvec3 hash33(uvec3 n) {\n    n ^= (n.yzx << 9);\n    n ^= (n.yzx >> 1);\n    n *= k;\n    n ^= (n.yzx << 1);\n    n *= k;\n    return vec3(n) / float(0xffffffffu);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy + vec2(iFrame);\n    vec3 col;\n    if (fragCoord.x < 0.33 * iResolution.x){ \n        col = vec3(hash11(floatBitsToUint(p.x)));\n    } else if (fragCoord.x < 0.66 * iResolution.x){\n        col = vec3(hash22(floatBitsToUint(p)), 1.0);\n    } else {\n        col = vec3(hash33(floatBitsToUint(vec3(p, iFrame))));\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}