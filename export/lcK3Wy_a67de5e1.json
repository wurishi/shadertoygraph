{"ver":"0.1","info":{"id":"lcK3Wy","date":"1713237940","viewed":70,"name":"Grid_Dots_Triagonal","username":"tholzer","description":" I was trying to reduce the triangular grid calculation.\n\n But that needs to be optimized even better.\n\n Can you help to get a better solution ? \n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid","dots","triangular","triagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Grid_Dots_Triagonal.glsl  2024-04-16\n\n// I was trying to reduce the triangular grid calculation.\n// But that needs to be optimized even better.\n\nconst float SQRT3 = sqrt(3.0);  // = 1.73205...; \nconst float InvSqrt3 = 1.0 / sqrt(3.0);  // = ...; \n\nconst vec2 TRI = vec2(1.0, SQRT3);\n\n/* original code:\n// return triagonal grid coordinates\nvec2 TriagonalGrid(vec2 p, float scale)\n{\n  p *= scale;\n  vec2 h1 = p - ( floor( p / TRI) + 0.5) * TRI;\n  vec2 h2 = p - ((floor((p - vec2(0.5, 1.0)) / TRI)) + 1.0)*TRI;\n  return dot(h1, h1) < dot(h2, h2) ? h1 : h2;\n}\n*/\n\n// simplyfied by FabriceNeyret2:\n// return triagonal grid coordinates\nvec2 TriagonalGrid(vec2 p, float scale)\n{\n  p *= scale / TRI;\n  vec2 h1 = p - floor( p ) - 0.5,\n       h2 = p -  ceil( p - vec2(0.5, 1.0) / TRI );\n  return ( dot(h1, h1) < dot(h2, h2) ? h1 : h2 ) * TRI;\n}\n\nfloat ComputeTriangleDots(vec2 p, float scale)\n{\n  vec2 h = TriagonalGrid(p, scale); \n  return 1.0 - 8.0 * length(h.xy);\n}\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  #define R iResolution\n  vec2 uv = (2.0*fragCoord.xy - R.xy) / R.y;  // y: -1.0 .. 1.0\n  vec2 mp = (2.0*iMouse.xy    - R.xy) / R.y;  // y: -1.0 .. 1.0\n  uv += mp + vec2(iTime * 0.05);   // move\n\n  float c = ComputeTriangleDots(uv, 5.0);\n  fragColor = vec4(c,c,c,1.0);\n}\n","name":"Image","description":"","type":"image"}]}