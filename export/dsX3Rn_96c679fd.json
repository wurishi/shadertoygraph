{"ver":"0.1","info":{"id":"dsX3Rn","date":"1665522425","viewed":139,"name":"Artober - Ornament","username":"Flopine","description":"Day 11 of the october challenge, playong again with octagonal tiling!","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","pattern","tiling","everyday","octagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define square(u,s) (max(abs(u.x), abs(u.y))-s)\n// found in Shane's shader : https://www.shadertoy.com/view/wdBSRm\n#define oct(u,s) (max((abs(u.y) + abs(u.x))/sqrt(2.), max(abs(u.x), abs(u.y)))-s)\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(0.02,fwidth(val-thre)))\n\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = mod(atan(p.y,p.x), per)-per*.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nvec3 stile (vec2 uv)\n{\n    vec2 id = floor(uv);\n    vec2 cp = fract(uv)-.5;\n    \n    moda(cp, 4.);\n    cp.x -= 0.1;\n    float d = AAstep(0.05, abs(cp.x));\n    \n    vec3 col = mix(vec3(0.2,0.4,0.7), vec3(1.), d);\n    return col;\n}\n\nvec3 otile (vec2 uv)\n{\n    vec2 id = floor(uv-.5); \n    vec2 cp = fract(uv-.5)-.5;\n    vec2 cc = cp;\n    \n    float outline = AAstep(0.015, abs(oct(cp, 0.505)));\n    cp = abs(cp)-.25;\n    float sqs = AAstep(0.001, square(cp, 0.099));\n    \n    cp = cc;\n    cp *= rot(PI/4.);\n    sqs *= AAstep(0.001, square(cp, 0.22));\n    \n    cp = cc;\n    float ls = AAstep(0.005, abs(cp.x));\n    ls *= AAstep(0.005, abs(cp.y));\n    ls = max(ls, 1.-sqs);\n    \n    cp *= rot(PI/4.);\n    float cls = AAstep(0.007, max(abs(cp.x), abs(cp.y)-0.21)) \n                * AAstep(0.007, max(abs(cp.y), abs(cp.x)-.21));\n    \n    cp = cc;\n    moda(cp, 4.);\n    cp.x -= 0.35;\n    float dls = AAstep(0.005, abs(cp.x));\n    dls = max(dls, 1.-sqs);\n    \n    vec3 col = (mix(vec3(1.), vec3(0.03,0.08,0.4), sqs)+(1.-dls))*ls*cls*outline;\n    return col;\n}\n\nvec3 im (vec2 uv)\n{\n    uv.x += iTime*.5;\n    vec2 id = floor(uv-.5);\n    vec2 fpa = abs(fract(uv)-.5);\n    vec3 c;\n    if (fpa.x+fpa.y < 1.-sqrt(2.)*.5)\n    {\n        // square tile\n        c = stile(uv);\n    }\n    else\n    {\n        // octa tile\n        c = otile(uv);        \n    }\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    uv *= 2.;\n    vec3 col = im(uv);\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}