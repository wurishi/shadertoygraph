{"ver":"0.1","info":{"id":"sscGz8","date":"1629132022","viewed":88,"name":"treemap_sdf_loop","username":"foxtrot","description":"MIT","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["treemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_ITERS 8\n#define MIN_SIZE 0.2\n\n// Clover Noise\n// https://github.com/ValgoBoi/clover-noise/blob/master/src/glsl/clover_noise_2d.fsh\nfloat hash(vec2 p) {\n    return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\n}\n\nstruct Box {\n    vec2 from;\n    vec2 to;\n    bool upper;\n    int iter;\n};\n\nbool pointInBox(vec2 p, Box b) {\n    return all(bvec4(greaterThanEqual(p, b.from), lessThanEqual(p, b.to)));\n}\n\nBox reshape(Box k, bool horz, float f, vec2 p) {\n    Box a = Box(k.from, k.to, false, k.iter + 1);\n    Box b = Box(k.from, k.to, true, k.iter + 1);\n    \n    if (horz) {\n        a.to.x = mix(a.from.x, a.to.x, f);\n        b.from.x = mix(a.from.x, a.to.x, f);\n    } else {\n        a.to.y = mix(a.from.y, a.to.y, f);\n        b.from.y = mix(a.from.y, a.to.y, f);\n    }\n    \n    if (pointInBox(p, a)) {\n        return a;\n    } else {\n        return b;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    \n    Box b = Box(vec2(0.0), vec2(1.0), true, 0);\n    vec2 p = vec2(0.0) + mouse.xy;\n    int iter;\n    \n    for (iter = 0; iter < MAX_ITERS; iter++) {\n        float n = float(iter) / float(MAX_ITERS);\n        \n        float f = mix(MIN_SIZE, 1.0 - MIN_SIZE, hash(p));\n        bool horz = hash(vec2(f, iter)) <= 0.5;\n        \n        Box b2 = reshape(b, horz, f, uv);\n        \n        if (all(greaterThanEqual(abs(b2.from - b2.to), vec2(MIN_SIZE)))) {\n            b = b2;\n        }\n        \n        float w = pow(2.0, float(iter));\n        p += vec2(b.upper ? w : 0.0,\n                  horz ? w : 0.0);\n    }\n      \n    fragColor = vec4(p.xy / pow(2.0, float(MAX_ITERS)), 1.0, 1.0);\n    //fragColor = vec4(b.to - b.from, 1.0, 1.0);\n    //fragColor = vec4(vec3(float(b.iter) / float(MAX_ITERS)), 1.0);\n}","name":"Image","description":"","type":"image"}]}