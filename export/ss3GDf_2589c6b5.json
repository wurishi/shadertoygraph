{"ver":"0.1","info":{"id":"ss3GDf","date":"1630743118","viewed":133,"name":"rayBox","username":"shunyadezain","description":"first post!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// references from The Art of Code\n// https://www.youtube.com/watch?v=VaYyPTw0V84&ab_channel=TheArtofCode\n// https://www.youtube.com/watch?v=PGtv-dBi2wE&ab_channel=TheArtofCode\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat GetDist(vec3 p){\n    vec3 bp = p - vec3(0, 2, 0);\n    vec3 sp = p;\n    sp.xz *= Rot(iTime);\n    sp -= vec3(2,1,0);\n\n    bp.xz *= Rot(iTime);\n    bp.yz *= Rot(iTime);\n\n    vec3 bp2 = bp;\n    bp2.xz *= Rot(iTime + .5);\n    bp2.yz *= Rot(iTime + .5);\n\n    float sphereDist = sdSphere(bp, sin(iTime) + .4);\n    float sphereDist2 = sdSphere(sp * sp.y, .5);\n    \n    float boxDist = sdBox(bp, vec3(.7));\n    float boxDist2 = sdBox(bp2, vec3(.7));\n\n    float planeDist = p.y;\n\n    float d = smin(sphereDist, boxDist, .2);\n    d = smin(sphereDist2, d, .2);\n    d = smin(boxDist2, d, .3);\n    d = min(planeDist, d);\n    \n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS/2.;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n        \n    );\n\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0, 4, -10);\n\n    vec3 l = normalize((lightPos-p));\n    vec3 n = GetNormal(p);\n\n    float dif = clamp(dot(n, l ), 0., 1.);\n\n    float d = RayMarch(p+n*SURF_DIST*2., l);\n\n    if(d<length(lightPos-p)) dif *= .1;\n\n    return dif; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0, 2, -4);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(ro, rd);\n    \n  \n    vec3 p = ro + rd * d;        \n    vec3 n = GetNormal(p);\n        \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    col = pow(col, vec3(.05));\n        \n    vec3 colXZ = texture(iChannel0, p.xz * .5 + 5.).rgb;\n    vec3 colYZ = texture(iChannel0, p.yz * .5 + 5.).rgb;\n    vec3 colXY = texture(iChannel0, p.xy * .5 + 5.).rgb;\n        \n    n = abs(n);\n        \n    col *= colXZ*n.y + colXZ*n.y + colXY *n.z;\n    \n    col -= vec3(1.0, 0.8, 0.8);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}