{"ver":"0.1","info":{"id":"4sc3z2","date":"1450771042","viewed":14423,"name":"Noise Lab (3D)","username":"candycat","description":"try to fake http://www.noisemachine.com/talk1/19.html in 3D.","likes":164,"published":1,"flags":0,"usePreview":0,"tags":["perlin","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define Use_Perlin\n//#define Use_Value\n#define Use_Simplex\n\n// ========= Hash ===========\n\nvec3 hashOld33(vec3 p)\n{   \n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n    \n    return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\n\nfloat hashOld31(vec3 p)\n{\n    float h = dot(p,vec3(127.1,311.7, 74.7));\n    \n    return -1.0 + 2.0 * fract(sin(h)*43758.5453123);\n}\n\n// Grab from https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(.1031,.11369,.13787)\n//#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// ========= Noise ===========\n\nfloat value_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n        \t\t\tmix(hash31(pi + vec3(0, 0, 0)), hash31(pi + vec3(1, 0, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 0, 1)), hash31(pi + vec3(1, 0, 1)), w.x), \n                    w.z),\n        \t\tmix(\n                    mix(hash31(pi + vec3(0, 1, 0)), hash31(pi + vec3(1, 1, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 1, 1)), hash31(pi + vec3(1, 1, 1)), w.x), \n                    w.z),\n        \t\tw.y);\n}\n\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat noise(vec3 p) {\n#ifdef Use_Perlin\n    return perlin_noise(p * 2.0);\n#elif defined Use_Value\n    return value_noise(p * 2.0);\n#elif defined Use_Simplex\n    return simplex_noise(p);\n#endif\n    \n    return 0.0;\n}\n\n// ========== Different function ==========\n\nfloat noise_itself(vec3 p)\n{\n    return noise(p * 8.0);\n}\n\nfloat noise_sum(vec3 p)\n{\n    float f = 0.0;\n    p = p * 4.0;\n    f += 1.0000 * noise(p); p = 2.0 * p;\n    f += 0.5000 * noise(p); p = 2.0 * p;\n\tf += 0.2500 * noise(p); p = 2.0 * p;\n\tf += 0.1250 * noise(p); p = 2.0 * p;\n\tf += 0.0625 * noise(p); p = 2.0 * p;\n    \n    return f;\n}\n\nfloat noise_sum_abs(vec3 p)\n{\n    float f = 0.0;\n    p = p * 3.0;\n    f += 1.0000 * abs(noise(p)); p = 2.0 * p;\n    f += 0.5000 * abs(noise(p)); p = 2.0 * p;\n\tf += 0.2500 * abs(noise(p)); p = 2.0 * p;\n\tf += 0.1250 * abs(noise(p)); p = 2.0 * p;\n\tf += 0.0625 * abs(noise(p)); p = 2.0 * p;\n    \n    return f;\n}\n\nfloat noise_sum_abs_sin(vec3 p)\n{\n    float f = noise_sum_abs(p);\n    f = sin(f * 2.5 + p.x * 5.0 - 1.5);\n    \n    return f ;\n}\n\n\n// ========== Draw ==========\n\nvec3 draw_simple(float f)\n{\n    f = f * 0.5 + 0.5;\n    return f * vec3(25.0/255.0, 161.0/255.0, 245.0/255.0);\n}\n\nvec3 draw_cloud(float f)\n{\n    f = f * 0.5 + 0.5;\n    return mix(\tvec3(8.0/255.0, 65.0/255.0, 82.0/255.0),\n              \tvec3(178.0/255.0, 161.0/255.0, 205.0/255.0),\n               \tf*f);\n}\n\nvec3 draw_fire(float f)\n{\n    f = f * 0.5 + 0.5;\n    return mix(\tvec3(131.0/255.0, 8.0/255.0, 0.0/255.0),\n              \tvec3(204.0/255.0, 194.0/255.0, 56.0/255.0),\n               \tpow(f, 3.));\n}\n\nvec3 draw_marble(float f)\n{\n    f = f * 0.5 + 0.5;\n    return mix(\tvec3(31.0/255.0, 14.0/255.0, 4.0/255.0),\n              \tvec3(172.0/255.0, 153.0/255.0, 138.0/255.0),\n               \t1.0 - pow(f, 3.));\n}\n\nvec3 draw_circle_outline(vec2 p, float radius, vec3 col)\n{\n    p = 2.0 * p - vec2(iResolution.x/iResolution.y, 1.0);\n    return \tmix(vec3(0.0), col, smoothstep(0.0, 0.02, abs(length(p) - radius)));\n        \t\n}\n\n// ========= Marching ===========\n#define FAR 30.0\n#define PRECISE 0.001\n#define SPEED 0.05\n\nfloat map(vec3 pos)\n{\n    return length(pos - (vec3(0.0, 0.0, 1.5) + iTime * vec3(0.0, 0.0, SPEED))) - 1.0;\n}\n\nvec3 normal(vec3 pos) {\n    vec2 eps = vec2(0.001, 0.0);\n    return normalize(vec3(\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n                    \t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n                         \tmap(pos + eps.yyx) - map(pos - eps.yyx)));\n}\n\nvec3 getBackground(vec2 uv, vec2 split)\n{\n    vec3 pos = vec3(uv * vec2(iResolution.x/iResolution.y, 1.0), iTime * SPEED);\n    float f;\n    if (uv.x < split.x && uv.y > split.y) {\n        f = noise_itself(pos);\n    } else if (uv.x < split.x && uv.y <= split.y) {\n        f = noise_sum(pos);\n    } else if (uv.x >= split.x && uv.y < split.y) {\n        f = noise_sum_abs(pos);\n    } else {\n        f = noise_sum_abs_sin(pos);\n    }\n    \n    return vec3(f * 0.5 + 0.5);\n}\n\nvec3 getColor(vec2 uv, vec3 pos, vec3 rd, vec2 split)\n{\n    vec3 nor = normal(pos);\n    vec3 light = normalize(vec3(0.5, 1.0, -0.2));\n        \n    float diff = dot(light, nor);\n    diff = diff * 0.5 + 0.5;\n    \n    vec3 col;\n    float f;\n    if (uv.x < split.x && uv.y > split.y) {\n        f = noise_itself(pos);\n        col = draw_simple(f);\n    } else if (uv.x < split.x && uv.y <= split.y) {\n        f = noise_sum(pos);\n        col = draw_cloud(f);\n    } else if (uv.x >= split.x && uv.y < split.y) {\n        f = noise_sum_abs(pos);\n        col = draw_fire(f);\n    } else {\n        f = noise_sum_abs_sin(pos);\n        col = draw_marble(f);\n    }\n    \n    vec3 edge = col * pow((1.0 - clamp(dot(nor, -rd), 0.0, 1.0)), 5.0);\n    \n    return col + edge;\n}\n\nvec3 marching(vec3 ro, vec3 rd, vec2 uv, vec2 split)\n{\n    float t = 0.0;\n    float d = 1.0;\n    vec3 pos;\n    for (int i = 0; i < 50; i++) {\n        pos = ro + rd * t;\n        d = map(pos);\n        t += d;\n        if (d < PRECISE || t > FAR) break;\n    }\n \n    vec3 col = getBackground(uv, split);\n    \n    if (t < FAR) {\n        pos = ro + rd * t;\n        col = getColor(uv, pos, rd, split);\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy;\n    vec2 split = vec2(0.5, 0.5);\n    if (iMouse.z > 0.0) {\n        split += 2.0 * iMouse.xy/iResolution.xy - 1.0;\n    }\n    \n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    vec3 ro = vec3(0.0, 0.0, 0.0) + iTime * vec3(0.0, 0.0, SPEED);\n    vec3 rd = vec3((p * 2.0 - 1.0) * vec2(iResolution.x/iResolution.y, 1.0), 1.0);\n    col = marching(ro, rd, p, split);\n\t\n    col = draw_circle_outline(p * vec2(iResolution.x/iResolution.y, 1.0), 0.9, col);\n    col = mix(vec3(0.3, 0.0, 0.0), col, smoothstep(0.0, 0.005, abs(p.x - split.x)));\n    col = mix(vec3(0.3, 0.0, 0.0), col, smoothstep(0.0, 0.005*iResolution.x/iResolution.y, abs(p.y - split.y)));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}