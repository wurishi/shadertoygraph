{"ver":"0.1","info":{"id":"ddBXzW","date":"1669971878","viewed":220,"name":"Devil's Eye ","username":"Mortalsky","description":"Do you have dare to look directly in devil's eye?","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","smoothstep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader is created by follow of iq tutorial\n// Source: beautypi by iq\n// Here use of noise and smoothstep function to create devil's eye look\n\n\n// 2D Random\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n// Fractional Brownian motion Noise function \nfloat fbm( vec2 uv)\n{\n    float f = 0.0;\n    \n    f += 0.5000*noise(uv); uv *= 2.02;\n    f += 0.2500*noise(uv); uv *= 2.03;\n    f += 0.1250*noise(uv); uv *= 2.01;\n    f += 0.0625*noise(uv); uv *= 2.01;\n    \n    f /= 0.9375;\n    \n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 xy = fragCoord.xy/iResolution.xy;\n    vec2 uv = (-1.0 + 2.0*xy)*0.4;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float r = sqrt(dot(uv, uv));\n    float a = atan(uv.y, uv.x)/6.2831*6.;\n    \n    float val;\n    vec3 col = vec3(0.0);\n    \n    \n    \n    if(r < 0.8)\n    {\n        // Eye's main color\n        col =  vec3(0.8, 0.1, 0.2);\n        float f = fbm(5.0*uv);\n        \n        // Prime noise color\n        col = mix( col, vec3(0.9, 0.3, 0.1), f);\n        \n        // Center color blend\n        f = 1.0 - smoothstep(0.2, 0.35, r);\n        col = mix( col, vec3(0.9, 0.4, 0.3), f);\n        \n        // Movement with time and noise\n        r += 0.02*fbm(20.0*uv)*sin(iTime);\n        a += 0.02*fbm(20.0*uv)*log(iTime) + log(iTime);\n        a = mod(a, 6.); \n        \n        // White Threads\n        f = smoothstep( 0.3, 1.2, fbm( vec2(10.0*r, 30.0*a)));\n        col = mix(col, vec3(1.0), f);\n        \n        // Black Threads\n        f = smoothstep( 0.3, 1.0, fbm( vec2(10.0*r, 15.0*a)));\n        col *= 1.0 - f;\n        \n        // Corner black\n        f = smoothstep( 0.4, 1.0, r);\n        col *= 1.0 - f;\n        \n        // Center black\n        f = smoothstep(0.1, 0.2, r);\n        col *= f;\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}