{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// nvidia claw logo\n// respect to the original designer!\n// @simesgreen\n\nconst int maxSteps = 64;\nconst float hitThreshold = 0.001;\nconst int shadowSteps = 64;\n\n// CSG operations\nfloat _union(float a, float b)\n{\n    return min(a, b);\n}\n\nfloat intersect(float a, float b)\n{\n    return max(a, b);\n}\n\nfloat difference(float a, float b)\n{\n    return max(a, -b);\n}\n\n// transforms\nvec3 rotateX(vec3 p, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);\n}\n\nvec3 rotateY(vec3 p, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);\n}\n\nmat3 rotationMat(vec3 v, float angle)\n{\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\n// primitive functions\n// these all return the distance to the surface from a given point\n\n  // n must be normalized\nfloat sdPlane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = max(di.x, max(di.y, di.z));\n  return min(mc,length(max(di,0.0)));\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat cylinder(vec3 p, vec2 c, float r)\n{\n  return length(p.xy - c) - r;\n}\n\nfloat claw(vec3 p)\n{\n\tfloat d;\n\td = cylinder(p - vec3(2.0, -2.0, 0.0), vec2(0.0), 4.0);\n\td = intersect(d, cylinder(p - vec3(-2.0, -2.0, 0.0), vec2(0.0), 4.0));\t\n\n\tfloat d2;\n\td2 = cylinder(p - vec3(2.0, -3.0, 0.0), vec2(0.0), 4.0);\n\td2 = intersect(d2, cylinder(p - vec3(-1.0, -5.4, 0.0), vec2(0.0), 6.0));\n\t//d2 = intersect(d2, cylinder(p - vec3(-0.5, -3.5, 0.0), vec2(0.0), 4.0));\n\t\n\td = difference(d, d2);\n\t\n\td = intersect(d, sdBox(p, vec3(2.0, 2.0, 0.4)));\n\treturn d;\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n// distance to scene\nfloat scene(vec3 p)\n{\t\t\n    float d;\n\t\n    d = sdPlane(p, vec4(0, 1, 0, 1)); \n\t\t\n\tp -= vec3(0.0, 1.0, 0.0);\n\t\n\t//d = _union(d, claw(p));\n\t\n\tconst int n = 4;\n\tfor(int i=0; i<n; i++) {\n\t\tfloat seed = float(i)*157.0 + floor(iTime*0.1);\n\t\tvec3 axis = normalize(vec3(hash(seed), hash(seed+1.0), hash(seed+2.0))*2.0-1.0);\n\t\tfloat ang = hash(seed+3.0) * 3.14159*2.0 + iTime*0.5;\n\t\tvec3 pr = p * rotationMat(axis, ang);\n\t\tpr -= axis*1.5;\n\t\t//float scale = 0.5 + 1.5*hash(seed+4.0);\t\t\n\t\t//pr *= scale;\n\t\td = _union(d, claw(pr));\n\t\t//d /= scale;\n\t}\n\t\n    return d;\n}\n\n// calculate scene normal\nvec3 sceneNormal(in vec3 pos )\n{\n    float eps = 0.0001;\n    vec3 n;\n    float d = scene(pos);\n    n.x = scene( vec3(pos.x+eps, pos.y, pos.z) ) - d;\n    n.y = scene( vec3(pos.x, pos.y+eps, pos.z) ) - d;\n    n.z = scene( vec3(pos.x, pos.y, pos.z+eps) ) - d;\n    return normalize(n);\n}\n\n// ambient occlusion approximation\nfloat ambientOcclusion(vec3 p, vec3 n)\n{\n    const int steps = 4;\n    const float delta = 0.5;\n\n    float a = 0.0;\n    float weight = 1.0;\n    for(int i=1; i<=steps; i++) {\n        float d = (float(i) / float(steps)) * delta; \n        a += weight*(d - scene(p + n*d));\n        weight *= 0.5;\n    }\n    return clamp(1.0 - a, 0.0, 1.0);\n}\n\nfloat softShadow(vec3 ro, vec3 rd, float mint, float maxt, float k)\n{\n    float dt = (maxt - mint) / float(shadowSteps);\n    float t = mint;\n    float res = 1.0;\n    for( int i=0; i<shadowSteps; i++ )\n    {\n        float h = scene(ro + rd*t);\n        res = min(res, k*h/t);\n        t += dt;\n\t\t//t += max( 0.05, dt );\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\n\n// trace ray using sphere tracing\nvec3 trace(vec3 ro, vec3 rd, out bool hit)\n{\n    hit = false;\n    vec3 pos = ro;\n    vec3 hitPos = ro;\n\n    for(int i=0; i<maxSteps; i++)\n    {\n\t\tif (!hit) {\n\t\t\tfloat d = scene(pos);\n\t\t\tif (abs(d) < hitThreshold) {\n\t\t\t\thit = true;\n\t\t\t\thitPos = pos;\n\t\t\t}\n\t\t\tpos += d*rd;\n\t\t}\n    }\n    return pos;\n}\n\n// lighting\nvec3 shade(vec3 pos, vec3 n, vec3 eyePos)\n{\n\tvec3 color = vec3(0.9);\n\t\t\n\tconst vec3 lightDir = vec3(0.577, 0.577, 0.577);\n    //vec3 v = normalize(eyePos - pos);\n    //vec3 h = normalize(v + lightDir);\n    float diff = dot(n, lightDir);\n    //diff = max(0.0, diff);\n    diff = 0.5+0.5*diff;\n\t\n    float ao = ambientOcclusion(pos, n);\n\t\n\tvec3 c = diff*ao*color;\n\t\n\t// point light\n\tconst vec3 lightPos = vec3(0.0, 0.5, -4.0);\n\tconst vec3 lightColor = vec3(0.55, 0.76, 0.26);\t\t// nv green\n\t\n\tvec3 l = lightPos - pos;\n\tfloat dist = length(l);\n\tl /= dist;\n\tdiff = max(0.0, dot(n, l));\n\t//diff *= 3.0 / dist;\t// attenutation\n\t\n\tfloat maxt = dist;\n    float shadow = softShadow( pos, l, 0.1, maxt, 5.0 );\n\tdiff *= shadow;\n\t\n\tc += diff*lightColor;\n\t\n//    return vec3(ao);\n//    return n*0.5+0.5;\n\treturn c;\n}\n\nvec3 background(vec3 rd)\n{\n    //return mix(vec3(1.0), vec3(0.0), max(0.0, rd.y));\n    return vec3(0.75);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n\n    // compute ray origin and direction\n    float asp = iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(asp*pixel.x, pixel.y, -2.0));\n    vec3 ro = vec3(0.0, 1.0, 6.0);\n\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tfloat roty = 0.0;\n\tfloat rotx = 0.0;\n\tif (iMouse.z > 0.0) {\n\t\trotx = -(mouse.y-0.5)*3.0;\n\t\troty = -(mouse.x-0.5)*6.0;\n\t}\n\n    rd = rotateX(rd, rotx);\n    ro = rotateX(ro, rotx);\n\t\t\n    rd = rotateY(rd, roty);\n    ro = rotateY(ro, roty);\n\t\t\n    // trace ray\n    bool hit;\n    vec3 pos = trace(ro, rd, hit);\n\n    vec3 rgb;\n    if(hit)\n    {\n        // calc normal\n        vec3 n = sceneNormal(pos);\n        // shade\n        rgb = shade(pos, n, ro);\n\n#if 0\n        // reflection\n        vec3 v = normalize(ro - pos);\n        float fresnel = 0.1 + 0.4*pow(max(0.0, 1.0 - dot(n, v)), 5.0);\n\n        ro = pos + n*0.001; // offset to avoid self-intersection\n        rd = reflect(-v, n);\n        pos = trace(ro, rd, hit);\n\n        if (hit) {\n            vec3 n = sceneNormal(pos);\n            rgb += shade(pos, n, ro) * vec3(fresnel);\n        } else {\n            rgb += background(rd) * vec3(fresnel);\n        }\n#endif \n\n     } else {\n        rgb = background(rd);\n     }\n\t\n    fragColor=vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xdf3D8","date":"1368193275","viewed":567,"name":"claw","username":"simesgreen","description":"a tribute to the NVIDIA claw logo. respect to the original designer!\n\nhttp://www.nvidia.com/content/global/global.php","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["distancefield"],"hasliked":0,"parentid":"","parentname":""}}