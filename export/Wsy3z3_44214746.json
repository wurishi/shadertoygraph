{"ver":"0.1","info":{"id":"Wsy3z3","date":"1570614649","viewed":430,"name":"Factory Windows","username":"104","description":"Stay out kids","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["2d","kowloon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork of https://www.shadertoy.com/view/3dVGDW\n\nconst float PARTITIONS = 10.;\n\nfloat dtoa(float d, float amount){\n    return 1. / clamp(d*amount, 1., amount);\n}\n\nvec4 hash42(vec2 p)\n{\n\tvec4 p4 = fract(vec4(p.xyxy) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nfloat sdroundedthing(vec2 uv, float size) {\n    float ret = length(uv)-size;\n    if (uv.y < 0.) {\n        ret = min(ret, max(uv.x-size, -uv.x-size));\n    }\n    return ret;\n}\n// helps movement of ghosts. probably a cheaper way to accomplish this.\nfloat smoothsquare(float t, float f)\n{\n    const float pi = atan(1.)*4.;\n    const float delta = .03;// smoothness\n    const float A = 1.;// amp\n    float y = (A/atan(1./delta))*atan(sin(2.*pi*t*f)/delta);\n    return y;\n}\n\nvoid mainImage( out vec4 o, in vec2 fragCoord )\n{\n    vec2 R = iResolution.xy;\n    float t = (iTime+1e2)*.2;\n    vec2 uv = fragCoord/iResolution.xy-.5;\n    vec2 N = uv;\n    uv.x *= R.x / R.y;\n    uv.x += .5;\n    vec2 uvghost = uv;\n\n    uv.y += t*.3;\n    \n    // behind the glass...\n    float sdghost = 1e6;\n    const float ghosts = 9.;\n    for (float i = 0.;i < ghosts; ++ i) {\n        vec4 h = hash42(vec2(i+2e2));\n        vec2 uvg2 = uvghost;\n    \tuvg2.x -= (fract(t*h.x+smoothsquare(t+h.z*2., .5)*.2)-.5)*3.;\n        uvg2.y *= sign(h.w-.5);// ceiling\n        uvg2.y += h.y*.5;\n        sdghost = min(sdghost, sdroundedthing(uvg2, .0));\n    }\n    \n    o = vec4(mix(1.,smoothstep(.0,.4,sdghost), .9));\n    //return;\n\n    N *= .98;// oob artifact quickfix\n\n    vec2 cellUL = floor(uv);\n    vec2 cellBR = cellUL + 1.5;\n    vec2 seed = cellUL;// top-level cell ID\n\n    for(float i = 1.; i <= PARTITIONS; ++ i) {\n        vec4 h = hash42(seed+(vec2(cellBR.x, cellUL.y)+10.));\n        float dl = abs(uv.x - cellUL.x);// distance to edge of cell, left edge\n        dl = min(dl, length(uv.y - cellUL.y));// bottom (inv y)\n        dl = min(dl, length(uv.x - cellBR.x));// right\n        dl = min(dl, length(uv.y - cellBR.y));// top\n\n        float r = max(fract(N.x-.5), fract(.5-N.x));\n        r = max(r, fract(.5-N.y));\n        r = max(r, fract(N.y-.5));\n        r = 1.-r;\n        float col2 = 1.5-dtoa(dl, (h.z+.05)*6000.*pow(r, 1.5));\n        vec3 col = h.xyz;\n        o.rgb *= col2;\n        if (h.w < .1)// sometimes color a window\n        \to.rgb *= mix(col, vec3(col.r+col.g+col.b)/3.,.8);\n        \n        h.y = mix(.5, h.y, .2);// favor dividing evenly\n        vec2 pt = mix(cellUL, cellBR, h.y);\n\n        if (uv.x < pt.x) {// descend into quadrant\n            if (uv.y < pt.y) {\n                cellBR = pt.xy;\n            } else {\n              \tcellUL.y = pt.y;\n              \tcellBR.x = pt.x;\n            }\n        } else {\n            if (uv.y > pt.y) {\n                cellUL = pt.xy;\n            } else {\n                cellUL.x = pt.x;\n                cellBR.y = pt.y;\n            }\n\t    }\n    }\n    \n    o = clamp(o,0.,1.);\n    o = pow(o,o-o+.7);\n    o.a = 1.;\n}\n\n","name":"Image","description":"","type":"image"}]}