{"ver":"0.1","info":{"id":"tl3yRj","date":"1609459240","viewed":502,"name":"FMS_Cat @ Shader Royale 3","username":"FMS_Cat","description":"cw: flashing lights\n\nporter f**king robinson\n","likes":12,"published":1,"flags":32,"usePreview":1,"tags":["3d","livecoding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Content Warning: It might not be appropriate for people who're sensitive to flashing lights.\n\n// FMS_Cat!!\n// Since it's written in the shader royale compo,\n// the code is a total mess that is not intended to be read.\n// I heard the compo machine is not a beast enough so I made this less intensive a bit.\n// I'm publishing this as-is (for now at least). I might add some comments later.\n\n// Shoutouts to Halcyoniix, who helped me developing my art direction while I'm training!\n// Hal is my friend from rhythm game community and a very talented designer, check the twitter out:\n// https://twitter.com/halcyoniix\n\n// Also shoutouts to Virtual Self and their visual team Arte et Labore, apparently.\n// https://twitter.com/ArteLabore\n\n#define saturate(x) ( clamp(x,0.,1.) )\n#define linearstep(a,b,t) ( saturate( ( (t)-(a) ) / ( (b)-(a) ) ) )\n#define lofi(x,d) ( floor( (x)/(d) ) * (d) )\n\nconst float PI=3.14159265;\nconst float foldcos=cos(PI/5.);\nconst float foldrem=sqrt(.75-foldcos*foldcos);\nconst vec3 foldvec=vec3(-.5,-foldcos,foldrem);\nconst vec3 foldface=normalize(vec3(0,foldrem,foldcos));\n\nfloat time;\nfloat seed;\nvec3 glow;\n\nfloat fractSin(float s){\n  return fract(sin(s*114.514)*1919.810);\n}\n\nfloat random(){\n  seed=fractSin(seed);\n  return seed;\n}\n\nvec3 randomSphere(){\n  float a=random()*2.*PI;\n  float b=acos(random()*2.-1.);\n  return vec3(cos(a)*sin(b),cos(b),sin(a)*sin(b));\n}\n\nvec4 plas( vec2 v, float time )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  return vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time / .4 ) * .25, 1.0 );\n}\n\nmat2 r2d(float t){\n  return mat2(cos(t),sin(t),-sin(t),cos(t));\n}\n\nfloat smin(float a,float b,float k){\n  float h=linearstep(k,0.,abs(a-b));\n  return min(a,b)-h*h*h*k/6.;\n}\n\nvec3 fold(vec3 p){\n  for(int i=0;i<5;i++){\n    p.xy=abs(p.xy);\n    p-=2.*min(0.,dot(foldvec,p))*foldvec;\n  }\n  return p;\n}\n\nvec3 catColor(float t){\n  return .5+.5*cos(vec3(0.,2.,4.)-t);\n}\n\nvec4 mapSpike(vec3 p){\n  vec3 pt=p;\n  \n  float fart=sin(PI*exp(-5.0*mod(time,2.4)));\n  \n  pt.yz=r2d(.7*time)*pt.yz;\n  pt.zx=r2d(time+pt.y*sin(time))*pt.zx;\n  pt.xy=r2d(.2*pt.z*cos(time))*pt.xy;\n  pt=fold(pt);\n  float dotFace=dot(foldface,pt);\n  float l=length(dotFace*foldface-pt);\n  float r=.4-.2*sqrt(dotFace);\n  float d=l-r;\n  d=smin(d,length(pt)-1.-.7*fart,1.);\n  d=max(d,length(pt)-4.);\n\n  glow+=.5*catColor(4.+exp(-10.0*d))*d*exp(-10.0*d);\n\n  return vec4(d,0,0,0);\n}\n\nvec4 mapPhantom(vec3 p){\n  vec3 pt=p;\n  \n  float fart=sin(PI*exp(-5.0*mod(time-length(pt)*.1,2.4)));\n  pt-=normalize(pt)*fart;\n  \n  pt.zx=r2d(4.+time+.6*pt.y*sin(time))*pt.zx;\n  pt.xy=r2d(2.+.6*pt.z*cos(time))*pt.xy;\n  pt.yz=r2d(3.+.7*time)*pt.yz;\n  pt=fold(pt);\n  float dotFace=dot(foldface,pt);\n  float l=length(dotFace*foldface-pt);\n  float r=.2*sqrt(dotFace);\n  float d=l-r;\n  d=smin(d,length(pt)-1.,1.);\n  d=max(abs(d),.2);\n\n  glow+=(.01+.2*fart)*catColor(3.+exp(-10.0*d)+8.0*exp(-length(pt)))*d*exp(-3.0*d);\n\n  return vec4(d,0,0,0);\n}\n\nvec4 mapCrystal(vec3 p){\n  vec3 pt=p;\n\n  pt.zx=r2d(.2*time)*pt.zx;\n  float a=atan(pt.x,pt.z);\n  pt.zx=r2d(-lofi(a+PI/6.,PI/3.))*pt.zx;\n  pt.z-=5.;\n  pt.zx=r2d(-time)*pt.zx;\n\n  pt.y*=.5;\n  pt.y+=.1*texture(iChannel0,pt.zx).x;\n  pt.y-=sign(pt.y)*min(abs(pt.y),1.);\n  \n  pt=fold(pt);\n  float dotFace=dot(foldface,pt);\n  float d=dotFace-.6;\n\n  glow+=.2*catColor(3.5+exp(-10.0*d))*d*exp(-5.0*d);\n\n  return vec4(d,1,0,0);\n}\n\nvec4 map(vec3 p){\n  vec4 i=vec4(1E9);\n  vec4 i2;\n  \n  i2=mapSpike(p);\n  i=i2.x<i.x?i2:i;\n  i2=mapPhantom(p);\n  i=i2.x<i.x?i2:i;\n  i2=mapCrystal(p);\n  i=i2.x<i.x?i2:i;\n  \n  return i;\n}\n\nvec3 nSpike(vec3 p,vec2 d){\n  return normalize(vec3(\n    mapSpike(p+d.yxx).x-mapSpike(p-d.yxx).x,\n    mapSpike(p+d.xyx).x-mapSpike(p-d.xyx).x,\n    mapSpike(p+d.xxy).x-mapSpike(p-d.xxy).x\n  ));\n}\n\nvec3 nCrystal(vec3 p,vec2 d){\n  return normalize(vec3(\n    mapCrystal(p+d.yxx).x-mapCrystal(p-d.yxx).x,\n    mapCrystal(p+d.xyx).x-mapCrystal(p-d.xyx).x,\n    mapCrystal(p+d.xxy).x-mapCrystal(p-d.xxy).x\n  ));\n}\n\nfloat dRadial(vec2 p,float offr,float repr,float exr,float offx,float exx,float r){\n  p=r2d(offr)*p;\n  float a=atan(p.y,p.x);\n  p=r2d(-lofi(a+repr/2.,repr))*p;\n  a=atan(p.y,p.x);\n  p=r2d(-sign(a)*min(abs(a),exr))*p;\n  p.x-=offx;\n  p.x-=sign(p.x)*min(abs(p.x),exx);\n  float d=length(p)-r;\n  return d;\n}\n\nfloat sdbox(vec2 p,vec2 d){\n  vec2 pt=abs(p)-d;\n  return min(max(pt.x,pt.y),0.)+length(max(pt,0.));\n}\n\nfloat dCirc(vec2 p){\n  return max(length(p)-0.02,0.018-length(p));\n}\n\nfloat dOverlay(vec2 p){\n  float d=1E9;\n  float t=iTime;\n  d=min(d,sdbox(p,vec2(0.12,0.002)));\n  {\n    vec2 pt=abs(p);\n    d=min(d,dCirc(pt-vec2(.0,.05)));\n    d=min(d,dCirc(pt-vec2(.07,.05)));\n    d=min(d,dCirc(pt-vec2(.035,.05+.035*sqrt(3.))));\n  }\n  {\n    vec2 pt=p;\n    pt=pt.y<.0?-pt:pt;\n    pt-=vec2(.0,.2);\n    float d2=1E9;\n    d2=min(d2,sdbox(pt,vec2(0.15,0.02)));\n    pt=r2d(PI/4.)*pt;\n    pt.y-=.1*t;\n    pt-=lofi(pt.y+0.02,0.04);\n    d2=max(d2,sdbox(pt,vec2(1E9,0.01)));\n    d=min(d2,d);\n  }\n  {\n    float d2=1E9;\n    d2=smin(d2,dRadial(p,.1*t,PI/2.,PI/8.,.7,0.0,.02),.05);\n    d2=smin(d2,dRadial(p,.1*t+PI/4.,PI/2.,PI/8.,.72,0.0,.02),.05);\n    d=min(d2,d);\n  }\n  d=min(d,dRadial(p,.1*t,PI/8.,PI/19.,.76,0.002,.0));\n  d=min(d,dRadial(p,-.1*t,PI/8.,PI/9.,.78,0.01,.0));\n  d=min(d,dRadial(p,.04*t,PI/48.,0.002,.815,0.008,.0));\n  d=min(d,dRadial(p,.04*t,PI/192.,0.002,.815,0.002,.0));\n  {\n    float d2=1E9;\n    d2=smin(d2,dRadial(p,.1*t,PI/1.5,PI/8.,.86,0.0,.02),.05);\n    d2=smin(d2,dRadial(p,.1*t+PI/4.,PI/1.5,PI,.88,0.0,.02),.05);\n    d=min(d2,d);\n  }\n  d=min(d,dRadial(p,.2*t,PI/2.,PI/4.2,.915,0.002,.0));\n  d=min(d,dRadial(p,-.1*t,PI/4.,PI/8.5,.94,0.01,.0));\n  d=min(d,dRadial(p,.04*t,PI/96.,0.002,.99,0.03,.0));\n  return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 p = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y)*2.-1.;\n  p /= vec2(iResolution.y / iResolution.x, 1);\n  \n  time=iTime;\n  seed=texture(iChannel0,p).x;\n  time+=.02*random();\n  \n  bool mode=mod(iTime,6.)>4.;\n  float modetime=mod(mod(iTime,6.),4.);\n  float modetime2=mod(mod(time,6.),4.);\n  \n  vec3 col=vec3(0);\n  \n  vec3 cp=vec3(1,.3,2.5);\n  cp.zx=r2d(-2.0*exp(-2.0*modetime2))*cp.zx;\n  if(mode){\n    cp*=2.6;\n  }\n  vec3 ct=vec3(1,.3,0);\n  vec3 cd=normalize(ct-cp);\n  vec3 cx=normalize(cross(cd,vec3(0,1,0)));\n  vec3 cy=cross(cx,cd);\n  \n  vec2 camp=p;\n  float mos=0.1*exp(-5.0*modetime);\n  camp=lofi(camp+mos*.5,mos);\n  camp=r2d(.4)*camp;\n  \n  vec3 ro=cp;\n  vec3 rd=normalize(cx*camp.x+cy*camp.y+cd);\n  vec3 fp=ro+rd*length(cp-ct)*.8;\n  ro+=.02*randomSphere();\n  rd=normalize(fp-ro);\n  \n  float rl=.1;\n  vec3 rp=ro+rd*rl;\n  vec4 isect;\n  \n  for(int i=0;i<128;i++){\n    glow*=0.;\n    isect=map(rp);\n    col+=exp(-.1*rl)*glow;\n    rl+=.3*isect.x;\n    rp=ro+rd*rl;\n  }\n  \n  if(isect.x<1E-2){\n    if(isect.y==0.){\n\n      vec3 n=nSpike(rp,vec2(0,2E-1));\n      float f=1.-abs(dot(rd,n));\n      f=f*f;\n      col=vec3(f)*catColor(4.+3.*f);\n      \n    }else if(isect.y==1.){\n      \n      vec3 n=nCrystal(rp,vec2(0,1E-2));\n      float f=1.-abs(dot(rd,n));\n      f=f*f;\n      col=7.0*vec3(f)*catColor(4.-2.*f);\n      \n    }\n  }\n  \n  float overlay;\n  {\n    float d=dOverlay(p*.7);\n    float pix=1.0/iResolution.y;\n    overlay=pow(linearstep(pix*2.,0.0,d),2.2);\n    col+=.4*vec3(.02,.02,1.)*exp(-(0.1+.05*sin(40.0*time))/pix*max(0.,d));\n  }\n  col=mix(col,1.-2.*col.yzx,overlay);\n  \n  if(mode){\n    col=.5-1.*col.yzx;\n  }\n  \n  float flicker=step(fract(iTime*20.),.5);\n  col=pow(col,vec3(.4545));\n  col*=1.+.05*length(p)*flicker;\n  col*=1.+.5*flicker*smoothstep(.2,.7,texture(iChannel0,p*vec2(.5,.01)+time*vec2(.1,2.)).x);\n  col=vec3(\n    smoothstep(.1,.9,col.x),\n    smoothstep(.1,.8,col.y),\n    smoothstep(-.1,1.1,col.z)\n  );\n  \n  fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// just an fbm, because there is no fbm in Shadertoy\n\nfloat hash( vec2 v ) {\n  return fract( sin( dot( v, vec2( 89.44, 19.36 ) ) ) * 22189.22 );\n}\n\nfloat iHash( vec2 v, vec2 r, vec2 rep ) {\n  vec4 h = vec4(\n    hash( mod( floor( v * r + vec2( 0.0, 0.0 ) ) / r, rep ) ),\n    hash( mod( floor( v * r + vec2( 0.0, 1.0 ) ) / r, rep ) ),\n    hash( mod( floor( v * r + vec2( 1.0, 0.0 ) ) / r, rep ) ),\n    hash( mod( floor( v * r + vec2( 1.0, 1.0 ) ) / r, rep ) )\n  );\n  vec2 ip = vec2( smoothstep(\n    vec2( 0.0 ),\n    vec2( 1.0 ),\n    mod( v * r, 1.0 ) )\n  );\n  return mix(\n    mix( h.x, h.y, ip.y ),\n    mix( h.z, h.w, ip.y ),\n    ip.x\n  );\n}\n\nfloat noise( vec2 v ) {\n  float sum = 0.0;\n  for( int i = 1; i < 7; i ++ ) {\n    sum += iHash(\n      v + vec2( 0.37, 0.47 ) * vec2( i ),\n      vec2( 2.0 * pow( 2.0, float( i ) ) ),\n      vec2( 1.0 )\n    ) / pow( 2.0, float( i ) );\n  }\n  return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  float v = pow( noise( uv ), 2.2 ); // why gamma??\n  fragColor = vec4( vec3( v ), 1.0 );\n}\n","name":"Buffer A","description":"","type":"buffer"}]}