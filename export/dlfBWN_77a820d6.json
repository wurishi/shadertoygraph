{"ver":"0.1","info":{"id":"dlfBWN","date":"1692931101","viewed":53,"name":"Shader-T 4","username":"rcmtcristian","description":"Based off of  kishimisu tutorial: https://youtu.be/f4s1h2YETNY\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","sdf","tutorial","intro","repetition","code","youtube","tuto","creative"],"hasliked":0,"parentid":"dtXfW4","parentname":" Shader 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/palettes/\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.50, 0.20, 0.25);\n    vec3 c = vec3(0.5, 0.5, 0.5);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nconst float EPSILON = 0.5;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.z) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    vec3 p, q, r = iResolution;\n    float i = 1.0, j = i, z;\n\n    float timeFactor = iTime * 0.5;  // Adjust the speed of motion\n\n    for (float i = 0.0; i < 5.0; i++) {\n        uv = fract((uv + vec2(cos(timeFactor), sin(timeFactor))) * 1.5) - EPSILON;  // Add motion to UV\n\n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + z * 0.4 + timeFactor * 0.4);\n        vec2 I;\n        z = p.z = sqrt(max(z = i - dot(p = (vec3(I + I, 0) - r) / r.y, p), -z / 1e5));\n        d = sin(d * 3.0 + timeFactor) / 3.0;\n        d = abs(d);\n        p.xz *= mat2(cos(iTime + vec4(0, 11, 33, 0)));\n\n        d = pow(0.01 / d, 2.2);\n        vec3 pos = vec3((uv - 0.5) * 2.0 * 1.7, timeFactor * 2.0);  // Adjust position over time\n        float c = 16.0 / (pos.z - timeFactor * 2.0 + 26.0);\n        fragColor = vec4(0.1, 0.7, 1.0, 1.0) * c + vec4(0.0, 0.1, 0.1, 1.0) * (1.0 - c);\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}