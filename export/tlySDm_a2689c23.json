{"ver":"0.1","info":{"id":"tlySDm","date":"1582837687","viewed":149,"name":"Rainbow Squares","username":"mrbrowning","description":"Striated rainbow diagonal square pattern.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["color","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\nvec3 xs[6];\n\nmat2 rotm(float angle) {\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n}\n\nvec3 color(float loc) {\n    vec3 result = vec3(0.0);\n    for (int i = 0; i < 6; ++i) {\n        float fi = float(i);\n        float inSection = step(fi, loc) - step(fi + 1.0, loc);\n        vec3 inverted = 1.0 - xs[i];\n        \n        vec3 stepColor = mix(xs[i], sqrt(inverted), mod(iTime * 1.0 + fi / 6.0, 1.0) * inSection);\n        result += stepColor * (step(fi - 0.1, loc) - step(fi + 0.1, loc));\n    }\n\n    return result;\n}\n\nvec2 rot(vec2 uv, float angle) {\n    return rotm(angle) * (uv - 0.5) + 0.5;\n}\n\nvec3 pattern(vec2 uv) {\n    vec2 sv = vec2(uv.x, 1.0 - uv.y) * 6.0;\n    \n    float mi = min(sv.x, sv.y);\n    float moat = 0.0;\n    for (int i = 0; i < 6; ++i) {\n        float fi = float(i);\n        moat += smoothstep(fi - 0.04, fi + 0.04, mi) - smoothstep(fi + 0.06, fi + 0.14, mi);\n    }\n    moat = clamp(moat, 0.0, 1.0);\n    \n    vec2 iv = floor(sv);\n    vec2 fv = fract(sv);\n\treturn color(min(iv.x, iv.y)) * (1.0 - moat);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    xs[0] = vec3(0.92, 0.0, 0.0);\n\txs[1] = vec3(1.0, 0.5, 0.0);\n\txs[2] = vec3(1.0, 0.9, 0.0);\n\txs[3] = vec3(0.0, 0.5, 0.1);\n\txs[4] = vec3(0.25, 0.4, 0.95);\n\txs[5] = vec3(0.5, 0.0, 0.5);\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 mv = iMouse.xy / iResolution.xy;\n    vec2 cv = mv - 0.5;\n    \n    float compensation = -atan(-0.5, -0.5 * iResolution.x / iResolution.y) - PI / 4.0;\n\n    float angle = -atan(cv.y, cv.x * iResolution.x / iResolution.y) - compensation;\n    float d = length(cv);\n    \n    vec2 sv = rot(uv, angle);\n    float scale = 2.0 + 8.0 * d;\n    sv *= scale;\n    \n    vec2 iv = floor(sv);\n    vec2 fv = fract(sv);\n\n\tfragColor = vec4(pattern(fv), 1.0);\n}","name":"Image","description":"","type":"image"}]}