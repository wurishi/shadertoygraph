{"ver":"0.1","info":{"id":"XlyGzD","date":"1473403333","viewed":334,"name":"Smoother sphere mapping","username":"rory618","description":"begin with a typical spherical unwrapping and smooth out the projection for more uniform distance.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = .5*sin(20.*texture(iChannel0, uv))+.5;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvec4 t(vec2 p) {\n    if(p.y<0.) p = vec2(1,0)-p;\n    if(p.y>1.)  p = 1.-p;\n    p=fract(p);\n    return texture(iChannel0, p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if(iFrame <= 1) {\n        float theta = uv.x*2.*3.14159265;\n        float phi = (uv.y-.5)*3.14159265;\n    \tfragColor = vec4(cos(theta)*cos(phi),\n                         sin(theta)*cos(phi),\n                         sin(phi),1.0);\n        //fragColor = vec4(-1.+2.*hash32(fragCoord.xy),1.);\n    } else {\n        fragColor = \n                                                 .2*t(uv+3.3*vec2(0.0,-1./iResolution.y))+\n            .2*t(uv+3.3*vec2(-1./iResolution.x,0.0))+.2*t(uv+3.3*vec2(0.0))+.2*t(uv+3.3*vec2(1./iResolution.x,0.0))+\n                                                 .2*t(uv+3.3*vec2(0.0,1./iResolution.y))\n            ;\n        fragColor.xyz=normalize(fragColor.xyz);\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*float DA = 1.0;\nfloat DB = 0.5;\nfloat f = .0367;\nfloat k = .0649;\nfloat dt =1.0;\n\nvec4 t(vec2 p) {\n    if(p.y<=0.){\n        p.y = abs(p.y);\n        p.x = 1.-p.x;\n    }\n    if(p.y>1.){\n        p.y = 1.-p.y;\n        p.x = 1.-p.x;\n    }\n    p.x=mod(p.x,1.0);\n    p.y=mod(p.y,1.0);\n    return texture(iChannel1, p);\n}\n\nvec4 Laplacian(vec2 uv){\n    \n    vec4 color = vec4(0.0);\n    \n    vec2 d = vec2(1)/iResolution.xy;\n    \n    vec3 h = t(uv).xyz;\n        \n    const int n = 3;\n    for(int dx = -n; dx<=n;dx++){\n        for(int dy = -n; dy<=n;dy++){\n        \tvec2 p = uv+d*vec2(dx,dy);\n            vec3 loc = t(p).xyz;\n            float d = length(h-loc);\n            \n    \t}\n    }\n    \n    return color;\n}\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{}\n/*\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 c = texture(iChannel0, uv);\n    \n    vec4 L = Laplacian(uv);\n    \n    float A = c.r;\n    float B = c.g;\n    float LA = L.r;\n    float LB = L.g;\n\tfloat Ap = A + (DA*LA-A*B*B+f*(1.0-A))*dt;\n\tfloat Bp = B + (DB*LB+A*B*B-(k+f)*B)*dt;\n    \n    \n    if(iFrame > 1 ){\n    \tfragColor = vec4(Ap,Bp,0.0,1.0);\n            \n    } else {\n        fragColor = vec4(1.0,0.0,0.0,1.0);\n        if (length(vec2(.5,.5)-uv) <.01)\n        \tfragColor = vec4(0.0,1.0,0.0,1.0);\n    }\n    if(iMouse.z>0.0 && length(fragCoord.xy-iMouse.xy)<20.0){\n        fragColor += texture(iChannel2, uv)*.01;\n    }\n}*/","name":"Buf B","description":"","type":"buffer"}]}