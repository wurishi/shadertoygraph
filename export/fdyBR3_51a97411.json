{"ver":"0.1","info":{"id":"fdyBR3","date":"1658538710","viewed":134,"name":"Chaos Terms","username":"Topxic","description":"The idea was stolen from codeparade. Check out his video: https://www.youtube.com/watch?v=fDSIRXmnVvk\nFeel free to find a cool function.\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["chaos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inspired by https://www.youtube.com/watch?v=fDSIRXmnVvk\n\n#define COLOR_BACK vec3(0.10, 0.10, 0.10)\n#define COLOR_TRACE vec3(0.10, 1.10, 0.50)\n\n#define lower_bounds vec2(-1, -1)\n#define upper_bounds vec2(1, 1)\n\nvec2 func1(float x, float y, float t) {\n    float new_x = -x*y*t + x*t + y;\n    float new_y = x*y*t - t*y*y - t*t - x*t*y + y*t - x + y;\n    return vec2(new_x, new_y);\n}\n\nvec2 func2(float x, float y, float t) {\n    float new_x = -x*y*t + x*t + y;\n    float new_y = x*y*t - y*y - t*t - x*y + y*t - x + y;\n    return vec2(new_x, new_y);\n}\n\nfloat point_segment_distance(vec2 p, vec2 l1, vec2 l2) {\n    float l = length(l1 - l2);\n    l = l * l;\n    if (l == 0.0) return distance(p, l1);\n    float t = max(0.0, min(1.0, dot(p - l1, l2 - l1) / l));\n    vec2 proj = l1 + t * (l2 - l1);\n    return distance(p, proj);\n    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iFrame == 0) {\n        fragColor = vec4(COLOR_BACK, 1);\n        return;\n    }\n\n    vec3 old_color = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n    vec3 new_color = COLOR_BACK;\n\n    float t = 0.003850 + (iTime - float(int(iTime)) + float(int(iTime) % 15)) / 100.0;\n\n    vec2 p = vec2(t, t);\n    for (int i = 0; i < 100; ++i) {   \n        vec2 old_screen = (p - lower_bounds) / (upper_bounds - lower_bounds) * iResolution.xy;\n        p = func1(p.x, p.y, t);\n        vec2 new_screen = (p - lower_bounds) / (upper_bounds - lower_bounds) * iResolution.xy;\n        if(point_segment_distance(fragCoord, old_screen, new_screen) < 1.5) {\n            new_color = COLOR_TRACE;\n        }\n    }\n    \n    if (new_color != COLOR_BACK) {\n        fragColor = vec4(new_color, 1);\n    } else {\n        fragColor = vec4(mix(old_color, new_color, 0.1), 1);\n    }\n}","name":"Image","description":"","type":"image"}]}