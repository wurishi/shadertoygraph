{"ver":"0.1","info":{"id":"dsBSzw","date":"1670049871","viewed":169,"name":"Branchless Houndstooth Pattern","username":"Offline","description":"A short and simple procedural Houndstooth pattern in both branched and branchless variations. \nBranchless variation has built in Anti-Aliasing as a side effect.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["procedural","branchless","houndstooth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SHARPNESS 100.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fract(fragCoord / iResolution.y * 8.);\n\n    //vec2 mask = step(.5, uv); // With step()\n    vec2 mask = clamp((uv - .5) * SHARPNESS, 0., 1.); // Without step()\n   \n    //float color = step(.5, fract(abs(uv.x - uv.y) * 2.)); // With step()\n    float color = clamp((abs((fract(abs(uv.x-uv.y)*2.+.25)-.5)*2.)-.5)*SHARPNESS/5.,0.,1.); // Without step() \n    \n    color = max(color, min(mask.x, mask.y)) * max(mask.x, mask.y); // Masking\n    \n    fragColor = vec4(color);\n}","name":"Image","description":"","type":"image"}]}