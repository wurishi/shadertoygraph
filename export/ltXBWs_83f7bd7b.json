{"ver":"0.1","info":{"id":"ltXBWs","date":"1513870224","viewed":321,"name":"SDF Collision Detection","username":"Assossa","description":"It is super easy to check for collisions with SDF's no matter how irregular the shapes are.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["collision","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 sdf = texture(iChannel0, uv);\n    \n    fragColor = vec4(1.0);\n    \n    if(abs(sdf.x) < 0.01 || abs(sdf.y) < 0.01) {\n        fragColor = vec4(0.0);\n        return;\n    }\n    \n    if(sdf.x < 0.0 && sdf.y < 0.0) {\n        fragColor = vec4(1.0, 0.0, 1.0, 0.0);\n        return;\n    }\n    \n    if(sdf.x < 0.0 && sin(uv.x * 1000.0) > 0.8) {\n        fragColor = vec4(1.0, 0.0, 0.0, 0.0);\n    }\n    \n    if(sdf.y < 0.0 && sin(uv.y * 1000.0) > 0.8) {\n        fragColor = vec4(0.0, 0.0, 1.0, 0.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float sdfCircle(vec2 p) {\n    return length(p) - 0.5;\n}\n\nfloat sdfSquare(vec2 p) {\n    vec2 d = abs(p) - vec2(0.5);\n  \treturn min(max(d.x, d.y),0.0) + length(max(d,0.0));\n}\n\nfloat shapeA(vec2 p) {\n    p.y += cos(p.x * 15.0 + iTime * 2.5) * 0.1;\n    return mix(sdfCircle(p), sdfSquare(p), sin(iTime * 0.7534) * 0.5 + 0.5);\n}\n\nfloat shapeB(vec2 p) {\n    return max(sdfCircle(p + sin(p.y * 15.0) * 0.1), -(sdfSquare(p * 2.0)/2.0));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    fragColor = vec4(shapeA(uv + vec2(0.35 * sin(iTime), 0.2)), shapeB(uv + vec2(0.45 * cos(iTime * 1.367), -0.1)), 0.0, 0.0);\n}","name":"Buf A","description":"","type":"buffer"}]}