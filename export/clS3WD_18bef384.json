{"ver":"0.1","info":{"id":"clS3WD","date":"1673291939","viewed":181,"name":"what's this mass","username":"Carandiru","description":"give it 60s   @ 75fps\n\nwhat a fascinating lattice!\n\nOriginal shader by  trasnodalua \n\nLots of particles\n\nCredits to @The_ArtOfCode for the idea!","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["particles","universe","plexus"],"hasliked":0,"parentid":"DlSGDh","parentname":"Plexus Cubes Light"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// give it 60s   @ 75fps\n\n// what a fascinating lattice\n\n// Original shader by  trasnodalua \n\n#define iTime (iTime+15.0+1.618*iTime*smoothstep(0.0, 60.0, iTime)) // Danguafer thanks!\n\n// viridis palette function port //             \n#define fma(a,b,c) (a*b+c)\n\nvec3 viridis(float t) \n{\n\tconst vec3 _c0 = vec3( 0.2777273272234177, 0.005407344544966578, 0.3340998053353061 );\n\tconst vec3 _c1 = vec3( 0.1050930431085774, 1.404613529898575, 1.384590162594685 );\n\tconst vec3 _c2 = vec3( -0.3308618287255563, 0.214847559468213, 0.09509516302823659 );\n\tconst vec3 _c3 = vec3( -4.634230498983486, -5.799100973351585, -19.33244095627987 );\n\tconst vec3 _c4 = vec3( 6.228269936347081, 14.17993336680509, 56.69055260068105 );\n\tconst vec3 _c5 = vec3( 4.776384997670288, -13.74514537774601, -65.35303263337234 );  \n    const vec3 _c6 = vec3( -5.435455855934631, 4.645852612178535, 26.3124352495832 );  \n\n\tvec3 xmT = vec3(t);\n    \n    vec3 x;\n\n    // c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))))\n    x = fma(xmT, _c6, _c5);\n    x = fma(x, xmT, _c4);\n    x = fma(x, xmT, _c3);\n    x = fma(x, xmT, _c2);\n    x = fma(x, xmT, _c1);\n    x = fma(x, xmT, _c0);\n\n    return(x);\n}\n\nfloat n21(vec2 i) {\n//dot size and movement\n    //i += fract(i * vec2(223.64, 823.12));\n    i += fract(i * vec2(0.001, 0.1));\n    //i += dot(i, i + 23.14);\n    i += dot(i, i/5.0);\n    return fract(i.x * i.y);\n}\n\nvec2 n22(vec2 i) {\n    float x = n21(i);\n    //return vec2(x, n21(i+x));\n    return vec2(x, n21(i+x));\n}\n\nfloat quads = 0.8;//0.4 line effect, 2.5 mirror effect, 1.1, 0.75\nvec2 getPoint (vec2 id, vec2 offset) {\n//return offset + sin(n22(id + offset) * iTime * 1.0) * 04;\n    float speedLightSpots = 1.7; //divide by higher unumber go avoid movement\n\treturn sin(n22(id + offset) * iTime * speedLightSpots) * quads;\n}\n\nfloat layer (vec2 uv) {\n    float m = 0.0;\n    float t = iTime * 1.0;\n   \n    vec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv) - 0.5;\n    \n    vec2 p[9];\n    int i = 0;\n    for (float y = -1.0; y <= 1.0; y++) {\n        for (float x = -1.0; x <= 1.0; x++) {\n        \tp[i++] = getPoint(id, vec2(x,y));\n        }\n    }\n    \n    for (int i = 0; i < 9; i++) {\n    \t//m += drawLine(gv, p[4], p[i]);\n        float sparkle = 0.20 / pow(length(gv - p[i]), 0.8) * 0.02;\n        //change later values for sparkle intensity and duration\n        m += sparkle * abs((sin(t + fract(p[i].x) * 1.8) * 5.4 + 0.1));\n    }\n    \n    //m += drawLine(gv, p[1], p[3]);\n    //m += drawLine(gv, p[1], p[5]);\n    //m += drawLine(gv, p[7], p[3]);\n    //m += drawLine(gv, p[7], p[5]);\n     \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n    float bn = textureLod(iChannel0, fragCoord.xy/1024.0f, 0.0f).x;\n\n    float m = bn * (7.0f/255.0f) + uv.y * bn;\n    float x = cos(iTime * 0.5);\n    float y = -sin(iTime * 0.5);\n    \n    mat2 rotMat = mat2(x, y, -y, x);\n    uv *= rotMat/5.;\n    \n    float t = 300.0f+(exp(-sqrt(iTime + 1.0f)));//300.0f;280.0f;262.0f;244.0f;225.0f;206.0f;187.0f;169.0f;150.0f;130.0f;111.0f;94.0f;75.0f;56.0f;37.0f;20.0f;\n    float tt = (t + 1.0f) * 0.5f;\n    \n    for (float i = 0.0; i <= 1.0; i+= 1.0/2.0) {\n        float z = 1.0f - fract(i - t*t + tt);\n        float gridSize = tt;\n        float size = mix(15.0, .1, z) * gridSize;\n        float fade = smoothstep(0.0, 1.0,  z) * smoothstep(1.0, 0.9, z);\n        m += layer((size * uv) + i * 1.0 ) * fade;\n    }\n    \n    col = viridis(pow(m, 1.0f/2.2f));\n    // Debug\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}