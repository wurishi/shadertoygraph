{"ver":"0.1","info":{"id":"wldXRr","date":"1580314632","viewed":76,"name":"Fractal 001","username":"bananoid","description":"Mandelbrot 3d","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sdCone( vec3 p, vec2 c )\n{\n  // c is the sin/cos of the angle\n  float q = length(p.xy);\n  return dot(c,vec2(q,p.z));\n}\n\nfloat sdRoundCone( vec3 p, float r1, float r2, float h )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n\n  float b = (r1-r2)/h;\n  float a = sqrt(1.0-b*b);\n  float k = dot(q,vec2(-b,a));\n\n  if( k < 0.0 ) return length(q) - r1;\n  if( k > a*h ) return length(q-vec2(0.0,h)) - r2;\n\n  return dot(q, vec2(a,b) ) - r1;\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nvec4 fractal(vec3 position, float power) {\n  vec3 z = position + cos(iTime * 0.34236) ;\n\tfloat dr = 1.0;\n\tfloat r = 0.0;\n  float iterations = 0.0;\n  vec3 col = vec3(0.0);\n\tfor (float i = 0.0; i < 8.0 ; i++) {\n    iterations = i;\n\t\tr = length(z);\n\n\t\tif (r>2.0) break;\n\n    col =mix(vec3(3.0,0.8,0.2), vec3(0.0,0.9,5.2),r*0.3);\n\n\t\t// convert to polar coordinates\n\t\tfloat theta = acos(z.z/r);\n\t\tfloat phi = atan(z.y,z.x);\n\t\tdr =  pow( r, power-1.0)*power*dr + 1.0;\n\n\t\t// scale and rotate the point\n\t\tfloat zr = pow( r,power);\n\t\ttheta = theta*power;\n\t\tphi = phi*power;\n\n\t\t// convert back to cartesian coordinates\n\t\tz = zr*vec3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));\n\t\tz+=position;\n\t}\n  float dst = 0.5*log(r)*r/dr;\n\n  return vec4(col,dst);\n}\n\nfloat rounding( in float d, in float h )\n{\n    return d - h;\n}\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat opSmoothUnion( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothSubtraction( float a, float b, float k ) {\n    float h = clamp( 0.5-0.5*(b+a)/k, 0., 1. );\n    return mix( b, -a, h ) - k*h*(1.0-h);\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n  float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nvec4 opSmoothUnionColor( vec4 a, vec4 b, float k ) {\n    float h = clamp( 0.5+0.5*(b.w-a.w)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 objectSDFColor(vec3 p) {\n  float planeDist = p.y +0.1;\n\n\tvec4 s = vec4(0, 0.9, 0., 1);\n\n  p -= s.xyz;\n  p.xz *= Rot(iTime* 0.123 + 1.34);\n  p.xy *= Rot(iTime*0.9861234 * 0.1 + 0.44);\n  p += s.xyz;\n\n  float obj2 =  sdTorus( p - s.xyz, vec2(0.8,0.1));\n  // sdSphere( p - s.xyz, s.w);\n  // p -= s.xyz;\n  // p.xy *= Rot(1.57075);\n  // p += s.xyz;\n\n  // float obj6 = sdTorus( p - s.xyz, vec2(1.0,0.3));\n  // float obj1 = sdRoundBox( p - s.xyz + vec3(0.4,-0.3,0.4), vec3(0.2,0.5,0.2) , 0.3);\n  // float obj3 = sdCapsule( p - s.xyz, vec3(.0,-1.0,.0), vec3(.0,1.0,.0), 0.5 );\n  // vec3 pp = p;\n  // pp.xz *= Rot(3.14);\n\n  // float obj4 = sdRoundCone( pp - s.xyz,  0.4, 0.2, 1. );\n  // float obj5 = sdEllipsoid( p - s.xyz,  vec3(0.6,1.0,0.6) );\n  // float obj7 = sdOctahedron( p - s.xyz, 1.0);\n\n  float d = 0.0;\n  // d = opSmoothSubtraction(obj1, obj3, 0.01);\n  // d = obj2;\n  float power = (sin(iTime * 0.1) * 0.5 + 0.5) + 0.3;\n  vec4 frac = fractal(p - s.xyz, power * 10.0);\n  // d = frac.w;\n  // d = opSmoothSubtraction(obj3, d, 0.01);\n  // d = min(obj4, d);\n  // d = min(d, obj4);\n  // d = rounding(d, sin(iTime) * 0.1 - 0.1);\n  // d = mix(d, obj6, sin(iTime * 2.1) * 0.5 + 0.5);\n  // vec3 colA = vec3(0.0,0.7,1.0);\n  // vec3 colB = vec3(0.0,0.2,1.0);\n\n  // vec4 dC = opSmoothUnionColor(vec4(colB,d), vec4(colA,planeDist),0.9);\n\n  // return dC;\n  // return vec4(colB,d);\n  return frac;\n}\n\nfloat objectSDF(vec3 p) {\n  return objectSDFColor(p).w;\n}\n\nvec4 RayMarchColor(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n\n  vec3 color = vec3(0.0);\n\n  for(int i=0; i<MAX_STEPS; i++) {\n    vec3 p = ro + rd*dO;\n    vec4 dSC = objectSDFColor(p);\n    float dS = dSC.w;\n    color = dSC.rgb;\n    dO += dS;\n    if(dO>MAX_DIST || dS<SURF_DIST) break;\n  }\n  color = normalize(color);\n  return vec4(color,dO);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n  return RayMarchColor(ro,rd).w;\n}\n\n// float softshadow(vec3 ro, vec3 rd, float mint, float tmax, float w)\n// {\n//  \tfloat t = mint;\n//     float res = 1.0;\n//     for( int i=0; i<256; i++ )\n//     {\n//      \tfloat h = objectSDF(ro + t*rd);\n//         res = min( res, h/(w*t) );\n//     \tt += clamp(h, 0.005, 0.10);\n//         if( res<-1.0 || t>tmax ) break;\n//     }\n//     res = max(res,-1.0); // clamp to [-1,1]\n\n//     return 0.25*(1.0+res)*(1.0+res)*(2.0-res); // smoothstep\n// }\n\n// float calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax)\n// {\n// \tfloat res = 1.0;\n//   float t = mint;\n//   float ph = 1e10; // big, such that y = 0 on the first iteration\n\n//   for( int i=0; i<32; i++ )\n//   {\n//     float h = objectSDF( ro + rd*t );\n//     // use this if you are getting artifact on the first iteration, or unroll the\n//     // first iteration out of the loop\n//     //float y = (i==0) ? 0.0 : h*h/(2.0*ph);\n\n//     float y = h*h/(2.0*ph);\n//     float d = sqrt(h*h-y*y);\n//     res = min( res, 10.0*d/max(0.0,t-y) );\n//     ph = h;\n\n//     t += h;\n\n//     if( res<0.0001 || t>tmax ) break;\n\n//   }\n//   return clamp( res, 0.0, 1.0 );\n// }\n\n// vec3 GetNormal(vec3 p) {\n// \tfloat d = objectSDF(p);\n//   vec2 e = vec2(.01, 0);\n\n//   vec3 n = d - vec3(\n//       objectSDF(p-e.xyy),\n//       objectSDF(p-e.yxy),\n//       objectSDF(p-e.yyx));\n\n//   return normalize(n);\n// }\n\n// float GetLight(vec3 p, vec3 lightPos) {\n//   vec3 l = normalize(lightPos-p);\n\n//   vec3 n = GetNormal(p);\n//   float dif = clamp(dot(n, l), 0., 1.0);\n\n//   // float d = RayMarch(p+n*SURF_DIST*2., l);\n//   // if(d<length(lightPos-p)) dif *= .1;\n\n//   float shadow = calcSoftshadow( p, l, 0.01, 3.0);\n//   dif *= shadow;\n\n//   return dif;\n// }\n\n// float GetContour(vec3 p, float z){\n//   // vec3 n = GetNormal(p);\n//   // float dif = dot( camPos, n);\n//   // float c = 0.0;\n//   // if(dif > 0.5){\n//   //   c = 1.0;\n//   // }\n//   return z;\n// }\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n  vec3 col = vec3(0);\n\n  vec3 ro = vec3(0, 4, 1.);\n  ro.yz *= Rot(-m.y*3.14+1.);\n  ro.xz *= Rot(-m.x*6.2831);\n\n  vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n\n  vec4 dC = RayMarchColor(ro, rd);\n  float d = dC.w;\n\n  float z = 1.0 - (d*0.2 - 0.7);\n  z = clamp(z, 0.0, 1.0);\n\n  vec3 colA = vec3(1.0,0.8,0.8) * 1.5;\n  vec3 colB = vec3(1.0,0.3,0.2);\n\n  // col = vec3(z);\n  vec3 zC = mix(colB,colA, z);\n\n  col = mix(zC,dC.rgb * z, 1. ) ;\n  // col = z * dC.rgb;\n\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}