{"ver":"0.1","info":{"id":"MlKfDG","date":"1543958626","viewed":491,"name":"Instrument Selections","username":"Jamie_Pendergast","description":"My instrument collection. Use it for whatever you like!\n","likes":7,"published":3,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord/iResolution.xy;\n\tuv.x *= iResolution.x / iResolution.y;\n    uv += vec2(cos(iTime) * 2.,sin(iTime) * 1.1) * sin(iTime) * 0.2;\n    \n    \n    // Stop looking here!\n    // The cool stuff is on the Sound tab! ;)\n    \n    float thingy = 0.;\n    thingy += length(uv * 10.);\n    thingy += length(uv * 5.);\n    thingy *= 0.5;\n    thingy += length(uv * 2.5);\n   \tthingy *= 0.25;\n\n    // Output to screen\n    fragColor = abs(vec4(\n        sin(thingy),\n        cos(thingy + iTime),\n        cos(thingy),\n        1.));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// Sounds like a lazer gun.\nfloat funky(float time, float freq,float whistle, float wobble)\n{\n    return sin(time * whistle + sin(time / wobble * freq) * freq * 0.1);\n}\n\n// Lower Funk Factor makes it sound more drummy,\n// higher (10 ish) makes it sound like a guitar! :)\nfloat dripdrum(float time, float freq, float funkFactor)\n{\n    float noise = sin(time * freq);\n    for(int octave = 1; octave < 512; octave <<= 2)\n    {\n        noise += sin(time / float(octave) + freq / float(octave));\n    }\n    return sin(noise * funkFactor);\n}\n\n// Sounds like a cat meowing but with a pleasant echo\n// Could be used as a piano?\nfloat meow(float time, float freq)\n{\n    float noise = 0.;\n    for(int octave = 1; octave < 8; ++octave)\n    {\n        noise = mix(noise,sin(time * freq * float(octave)), sin(time * float(octave)));\n    }\n\treturn noise / 8.;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    // My terrible solution for a melody...\n    // Not sure how to make procedural \n    // melodies just yet.\n    int freqs[3];\n    freqs[0] = 440;\n   \tfreqs[1] = 540;\n    freqs[2] = 640;\n    \n    \n   \t// Repeat the time\n    float repeatedTime = mod(time * 3.,3.);\n    int index = int(time) % 3;\n    float freq = float(freqs[index]);\n    \n    // Average the noises\n    float noise = dripdrum(repeatedTime,freq,10.);\n  \tnoise += meow(repeatedTime,freq);\n    noise += funky(repeatedTime, freq,50., 100.);\n    noise /= 3.;\n    \n    return vec2(noise * exp(-repeatedTime * 3.));\n}","name":"Sound","description":"","type":"sound"}]}