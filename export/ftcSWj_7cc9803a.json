{"ver":"0.1","info":{"id":"ftcSWj","date":"1639836949","viewed":219,"name":"Cellular Automata-ish Waves","username":"VABG","description":"Was doing some cellular automata, changed it to use poisson-sampling and then tried stuff until this happened. \nChange rendering modes by setting MODE to 0-5.\nFast on higher fps, can set GROWTH_RATE to.4, lower might break the effect(?).","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Make normals\n    vec4 c = texture(iChannel0, uv);\n    vec3 n = vec3(c.y*.25f, c.z*.25f, 0.6f);\n    n = normalize(n);\n    // Normals for rendering\n    vec3 nVis = n;\n    nVis += 1.;\n    nVis/= 2.0f;\n    \n    // Animated light direction\n    vec3 lDir = vec3(sin(iTime)*1.5f, cos(iTime)*1.5f, .5f);\n    lDir = normalize(lDir);\n    \n    float shade = dot(lDir, n);\n    vec3 shadeCol = c.x*vec3(1.,.0,.0);\n    vec3 view = vec3(0.,0.,1.0);\n    vec3 refl = reflect(view, n);\n    float spec = clamp(dot(reflect(lDir, n),-view), .0, 1.);\n    spec = pow(spec, 20.)*10.0f;\n    vec4 t = texture(iChannel1, refl);\n    \n    // Waves grayscale\n    #if MODE == 0    \n    fragColor = vec4(c.x, c.x, c.x, 1.0f);    \n    #endif\n    \n    // Normals\n    #if MODE == 1\n    fragColor = vec4(nVis, 1.0f);\n    #endif\n    \n    // Lambert shading\n    #if MODE == 2\n    fragColor = vec4(shade, shade, shade, 1.0);\n    #endif\n    \n    // Phong\n    #if MODE == 3\n    shade += spec;\n    fragColor = vec4(shade, shade, shade, 1.0);\n    #endif\n    \n    // Reflective Combination 1\n    #if MODE == 4\n    fragColor = t *(shade+c.x)+(c.x*.5f);\n    #endif\n    \n    \n    // Reflective Combination 2\n    #if MODE == 5    \n    fragColor = vec4(nVis*shade+c.x*.25+t.xyz*.25, 1.0f)+spec;\n    #endif\n    \n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float fast(vec2 v)\n{    \n    v = (1./4320.) * v + vec2(0.25,0.);\n    float state = fract( dot( v * v, vec2(3571)));\n    return fract( state * state * (3571. * 2.));\n}\n\nvec2 rotate(vec2 uv, float rad)\n{\n    return vec2(cos(rad)*uv.x - sin(rad) * uv.y, sin(rad)*uv.x + cos(rad) * uv.y);\n}\n\nfloat sampleGrowth(vec2 uv)\n{\n    return texture(iChannel1, uv).x;\n}\n\nvec4 sampleAreaClosedOpen(vec2 uv)\n{\n    vec2 ratio = vec2(1./iResolution.x, 1. /iResolution.y);\n    vec2 dir = vec2(0,0);\n    float samples = 0.;\n    float r = fast(uv+vec2(2041.+iTime));\n    float d = 9999.;\n    for (int i = 0; i < SAMPLES; i++)\n    {   \n        vec2 sUV = rotate(poissonDisk[i], r * 6.28f)*SAMPLE_SIZE*ratio;\n        float dist = length(sUV);\n        float s = sampleGrowth(uv + sUV);\n        if (s > .8f && dist < d)\n        {\n           d = dist;\n           dir = normalize(sUV);\n        }\n        samples += s;\n    }    \n    return vec4(samples /= float(SAMPLES), d/SAMPLE_SIZE, dir.x, dir.y) ;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;         \n    vec2 startUV = uv - .5;\n    startUV.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(1, 0, 0);\n    float r = fast(uv+iTime);\n    \n    if (iFrame < 280)\n    {    \n        float d = length(vec2(0.0f, 0.0f)- startUV);\n        d *= 7.;\n        d = clamp(d, 0., 1.);\n        col = (1.-vec3(d))*10.0f;\n    }\n    else\n    {\n       vec4 c = texture(iChannel1, uv);\n       vec4 s = sampleAreaClosedOpen(uv);\n       if (s.y < float(SAMPLE_SIZE)/0.05f && s.x < .65f)\n       {\n           c.x += s.x*GROWTH_RATE*r;\n           c.y = s.z;\n           c.z = s.a;           \n       }\n       \n       col = c.xyz;\n       col = clamp(col, -1.0, 1.0);\n    }\n    \n    fragColor = vec4(col, 1.0f);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// 0 GrayScale, 1 Normals, 2 Lambert, 3 Phong, 4 Reflective1, 5 Reflective2\n#define MODE 4\n\n// Settings (max samples is 16, size is i pixels)\n#define SAMPLES 14\n#define SAMPLE_SIZE 7.9f\n#define GROWTH_RATE .6f\n\nvec2 poissonDisk[16] = vec2[](\n        vec2(0.2770745, 0.6951455),\n\t\tvec2(0.1874257, -0.02561589),\n\t\tvec2(-0.3381929, 0.8713168),\n\t\tvec2(0.5867746, 0.1087471),\n\t\tvec2(-0.3078699, 0.188545),\n\t\tvec2(0.7993396, 0.4595091),\n\t\tvec2(-0.09242552, 0.5260149),\n\t\tvec2(0.3657553, -0.5329605),\n\t\tvec2(-0.3829718, -0.2476171),\n\t\tvec2(-0.01085108, -0.6966301),\n\t\tvec2(0.8404155, -0.3543923),\n\t\tvec2(-0.5186161, -0.7624033),\n\t\tvec2(-0.8135794, 0.2328489),\n\t\tvec2(-0.784665, -0.2434929),\n\t\tvec2(0.9920505, 0.0855163),\n\t\tvec2(-0.687256, 0.6711345)\n);\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec4 AvgNeighbours(ivec2 p){\n    vec4 n = vec4(0);\n    for(int x = -1; x <= 1; x++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n          n += texelFetch(iChannel0, p + ivec2(x,y), 0);\n        }\n    }\n    return n/9.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 cPoint = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 c = AvgNeighbours(ivec2(fragCoord));\n    if (cPoint.x > .95f)\n    { \n        //c.x = 1.0f;\n        c = mix(c, vec4(0), 0.0001f);\n\n    }\n    c = mix(c, vec4(0), 0.004f);\n\n    fragColor =  c;\n}","name":"Buffer B","description":"","type":"buffer"}]}