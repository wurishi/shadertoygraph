{"ver":"0.1","info":{"id":"sdsBzj","date":"1645095058","viewed":202,"name":"Voxel 3DDA","username":"nickdev666","description":"Re-write based on https://www.shadertoy.com/view/4dX3zl\n+ different animation demo.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","raycasting","voxel","dda"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// small re-write of https://www.shadertoy.com/view/4dX3zl\n\n// \"brachless\" doesnt mean faster \n// (functions used still have hidded branches)\nconst bool USE_BRANCHLESS_DDA = true;\nconst int MAX_RAY_STEPS = 100;\n\nconst vec3 BACKGROUND_COLOR = vec3(0.55, 0.89, 0.94);\nconst vec3 COLOR_FACE_1 = vec3(0.52, 0.77, 0.28);\nconst vec3 COLOR_FACE_2 = vec3(0.26, 0.62, 0.25);\nconst vec3 COLOR_FACE_3 = vec3(0.16, 0.41, 0.31);\n\nconst float SPHERE_RADIUS = 32.0;\nconst float SPHERE_RADIUS_MIN = 12.0;\n\nconst float CAMERA_Z = -60.0;\nconst float CAMERA_Y = 0.0;\n\nfloat sdSphere(vec3 pos, float d) \n{ \n    return length(pos) - d; \n} \n\nbool getVoxel(ivec3 mapPos) \n{\n  vec3 pos = vec3(mapPos) + vec3(0.5);\n  \n  // animation (not needed)\n  float rad = SPHERE_RADIUS * sin(iTime * 1.8);\n  if (rad < SPHERE_RADIUS_MIN) rad = SPHERE_RADIUS_MIN;\n    \n  float d = sdSphere(pos, rad);\n  return d < 0.0;\n}\n\nvec2 rotate2d(vec2 v, float a) \n{\n  float sinA = sin(a);\n  float cosA = cos(a);\n  return vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 screenPos = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n\n  vec3 cameraDir = vec3(0.0, 0.0, 0.8);\n  vec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n  vec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y / iResolution.x;\n\n  vec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n  vec3 rayPos = vec3(0.0, CAMERA_Y + 5.0 * sin(iTime * 1.7), CAMERA_Z);\n  \n  // animation (not needed)\n  rayPos.xz = rotate2d(rayPos.xz, iTime);\n  rayDir.xz = rotate2d(rayDir.xz, iTime);\n\n  ivec3 mapPos = ivec3(floor(rayPos));\n\n  vec3 deltaDist = abs(vec3(length(rayDir)) / rayDir);\n  ivec3 rayStep = ivec3(sign(rayDir));\n\n  vec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n  bvec3 mask;\n    \n  bool hit = false;\n  \n  for (int i = 0; i < MAX_RAY_STEPS; i++) \n  {\n    if (getVoxel(mapPos)) \n    {\n        hit = true;\n        break;\n    }\n              \n    if(USE_BRANCHLESS_DDA) \n    {\n        //All components of mask are false except for the corresponding largest component\n        //of sideDist, which is the axis along which the ray should be incremented.\n    \n        mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));\n        sideDist += vec3(mask) * deltaDist;\n        mapPos += ivec3(vec3(mask)) * rayStep;\n    }\n    else\n    {\n        if (sideDist.x < sideDist.y) \n        {\n            if (sideDist.x < sideDist.z) \n            {\n               sideDist.x += deltaDist.x;\n               mapPos.x += rayStep.x;\n               mask = bvec3(true, false, false);\n            }\n            else \n            {\n               sideDist.z += deltaDist.z;\n               mapPos.z += rayStep.z;\n               mask = bvec3(false, false, true);\n            }\n         }\n         else \n         {\n            if (sideDist.y < sideDist.z) \n            {\n               sideDist.y += deltaDist.y;\n               mapPos.y += rayStep.y;\n               mask = bvec3(false, true, false);\n            }\n            else \n            {\n               sideDist.z += deltaDist.z;\n               mapPos.z += rayStep.z;\n               mask = bvec3(false, false, true);\n            } \n         }\n      }\n  }\n  \n  vec3 color = BACKGROUND_COLOR;\n    \n   if(hit)\n   {\n      if (mask.x) color = COLOR_FACE_1;\n      else if (mask.y) color = COLOR_FACE_2;\n      else if (mask.z) color = COLOR_FACE_3;\n   }\n  \n  fragColor.rgb = color;\n}","name":"Image","description":"","type":"image"}]}