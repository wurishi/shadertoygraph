{"ver":"0.1","info":{"id":"4sjfDG","date":"1501989150","viewed":854,"name":"Sound Experiment 2017-08-05","username":"ttg","description":"Just some fiddling around.\nNot a musical composition.","likes":17,"published":3,"flags":40,"usePreview":0,"tags":["sound","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Passthrough to Buf A\n\nvoid mainImage( out vec4 f, in vec2 d ) { f = texelFetch(iChannel0, ivec2(d), 0); }\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\nconst float C = 261.63;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth0(float freq, float time) {\n  return wave(freq*time);\n}\n\nfloat synth1(float freq, float time) {\n  float freq2 = freq;\n  float freq3 = freq2 + 0.25;\n  float v = 0.;\n  for (float n=1.; n<5.; n+=1.00+0.002) {\n    v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n    v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n  }\n  return v;\n}\n\nfloat selfproduct(vec3 v) { return v.x*v.y*v.z; }\n\nivec3[] seqN = ivec3[](\n    ivec3(0,0,0),\n    ivec3(-1,0,0),\n    ivec3(1,-1,0),\n    ivec3(2,-1,0),\n    ivec3(-1,-1,1),\n    ivec3(-2,0,1),\n    ivec3(-1,1,0),\n    ivec3(0,0,0),\nivec3(0));\n\nfloat seqf(int n, int s) {\n  int i = n%8;\n  int j = (n/(1+n/64))%8;\n  int k = (n/64);\n  k ^= (k>>1);\n  k |= (k>>1);\n  k &= s;\n  i ^= (j ^ (j>>1));\n  ivec3 seq = seqN[i] * ((ivec3(k)>>ivec3(0,1,2))&1);\n  return selfproduct(pow(vec3(2,3,5), vec3(seq)));\n}\n\nfloat seqa (float t, float e) { return max(pow(wave(t/2.),e), 0.); }\n\nvoid seq0(float time, out float ampl, out float freq, int s) {\n    int n = int(time);\n    ampl = seqa(time, 2.);\n    float fprod = seqf(n, s) * seqf(n/16, s) * seqf(n/256, s);\n    fprod = pow(2., mod(log(fprod)/log(2.),2.))/2.;\n    freq = C * 0.351 * 2. * fprod;\n}\n\nvec2 mainSound( in int samp, float timein ) {\n  float time = timein;\n  vec2 v = vec2(0.);\n  for (int i = 0; i < 3; i++) {\n    if (time>-8.) {\n      for (int s = 1; s <= 7; s++) {\n         float ampl, freq;\n        seq0(time*8., ampl, freq, s);\n        v.x += 0.128*ampl*synth1(freq, time)\n           * max(1.-exp(-0.1*(time+8.)),0.);\n        v.y += 0.128*ampl*synth1(freq*(1.01+0.002*float(i)), time)\n           * max(1.-exp(-0.1*(time+8.)),0.);\n      }\n    }\n    time -= 55.+0.125/4.;\n  }\n  v *= max(1.-exp(-10.*(178.-timein)),0.);\n  return vec2(v);\n}\n","name":"Sound","description":"","type":"sound"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nSound Experiment\nCopyright 2017 Theron Tarigo\n*/\n\nconst float pi = 3.141592653589793;\nconst float C = 261.63;\n\nfloat wave(float t) { return sin(2.*pi*fract(t)); }\n\nfloat synth0(float freq, float time) {\n  return wave(freq*time);\n}\n\nfloat synth1(float freq, float time) {\n  float freq2 = freq;\n  float freq3 = freq2 + 0.25;\n  float v = 0.;\n  for (float n=1.; n<5.; n+=1.00+0.002) {\n    v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq2*time));\n    v += 0.2/pow(n,1.2)*wave(n*freq*time+1.*wave(n*freq3*time));\n  }\n  return v;\n}\n\nfloat selfproduct(vec3 v) { return v.x*v.y*v.z; }\n\nivec3[] seqN = ivec3[](\n    ivec3(0,0,0),\n    ivec3(-1,0,0),\n    ivec3(1,-1,0),\n    ivec3(2,-1,0),\n    ivec3(-1,-1,1),\n    ivec3(-2,0,1),\n    ivec3(-1,1,0),\n    ivec3(0,0,0),\nivec3(0));\n\nfloat seqf(int n, int s) {\n  int i = n%8;\n  int j = (n/(1+n/64))%8;\n  int k = (n/64);\n  k ^= (k>>1);\n  k |= (k>>1);\n  k &= s;\n  i ^= (j ^ (j>>1));\n  ivec3 seq = seqN[i] * ((ivec3(k)>>ivec3(0,1,2))&1);\n  return selfproduct(pow(vec3(2,3,5), vec3(seq)));\n}\n\nfloat seqa (float t, float e) { return max(pow(wave(t/2.),e), 0.); }\n\nvoid seq0(float time, out float ampl, out float freq, int s) {\n    int n = int(time);\n    ampl = seqa(time, 2.);\n    float fprod = seqf(n, s) * seqf(n/16, s) * seqf(n/256, s);\n    fprod = pow(2., mod(log(fprod)/log(2.),2.))/2.;\n    freq = C * 0.351 * 2. * fprod;\n}\n\nvec2 mainSound( float timein ) {\n  float time = timein;\n  vec2 v = vec2(0.);\n  for (int i = 0; i < 3; i++) {\n    if (time>-8.) {\n      for (int s = 1; s <= 7; s++) {\n         float ampl, freq;\n        seq0(time*8., ampl, freq, s);\n        v += 0.128*ampl*synth1(freq, time)\n           * max(1.-exp(-0.1*(time+8.)),0.);\n      }\n    }\n    time -= 55.+0.125/4.;\n  }\n  v *= max(1.-exp(-10.*(178.-timein)),0.);\n  return vec2(v);\n}\n\n/*******************************/\n/*\nStreaming Spectrogram\nCopyright 2017 Theron Tarigo\n*/\n\nvec2 spectrogram(float windowmax, float time, float freq) {\n    vec2 sum = vec2(0.);\n    float window = windowmax;\n    float samplerate = iSampleRate/10.;\n    for (float trel = -window; trel <= window; trel+=1./samplerate) {\n        // Cosine window\n        float w = (0.5+0.5*cos(trel/window*pi))/samplerate/window;\n        float samp = dot(vec2(1.),mainSound( time+trel));\n        sum += w*vec2(cos(trel*freq*2.*pi),sin(trel*2.*pi))*samp;\n    }\n    return sum;\n}\n\nvoid panImage( out vec4 f, float time, float y ) {\n    float freq = 2000. * y / iResolution.y;\n    if (time > 181.) {\n        f.rgb = vec3(0.);\n        return;\n    }\n    f.rgb = 5.*vec3(10.,3.2,1.)*\n    length(spectrogram(0.1*sqrt(freq/4000.)/2., time, freq));\n}\n\nconst float timescale = 1./4.; // Screens per second\n\n//#define FRAMEDEBUGVIS\nvoid mainImage( out vec4 f, in vec2 df )\n{\n    ivec2 d = ivec2(df);\n    vec2 fsf = iResolution.xy;\n    ivec2 fs = ivec2(fsf);\n    int shift = int(fsf.x*timescale*(iTime));\n    int shiftlast = int(fsf.x*timescale*(iTime-iTimeDelta));\n    int delta = shift - shiftlast;\n    if ((fs.x-d.x) <= delta) {\n        #ifdef FRAMEDEBUGVIS\n        if (d.y<10) { f = vec4(0,iFrame%2,0,0); return; }\n        #endif\n        float time = float(shift-fs.x+d.x)/timescale/fsf.x;\n        panImage(f, time, df.y);\n    } else {\n        f = texelFetch(iChannel0,d+ivec2(delta,0),0);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}