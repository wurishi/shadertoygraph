{"ver":"0.1","info":{"id":"3tfyWN","date":"1592072005","viewed":63,"name":"Fractals! - a simple demo","username":"2BoysAndHats","description":"A simple fractal renderer capable of drawing Julia sets","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int NUM_ITER = 100;\nconst float THRESHOLD = 2.0f;\n\n// From http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n// Abused slightly to create cool colours\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Pixel coords from -2 to 2 on either axis\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv * 4.0f) - vec2(2.0f, 2.0f);\n    \n    // some fancy Julia set animations\n    //vec2 c = vec2(0.285f, sin(iTime) * .01f);\n    //vec2 c = vec2(0.001643721971153f, 0.82246763329887f);\n    //vec2 c = vec2(1.0f - 1.61f, 0.0f);\n    \n    float a = sin(iTime * 6.28f * .0001f);\n    vec2 c = .7885f * vec2(cos(a * 360.0f), sin(a * 360.0f));\n    \n    \n    // Loop over, and apply f(z) = z^2 + c\n    vec2 z = uv;\n       \n    for (int i = 0; i < NUM_ITER; i++) {\n\t\tz = vec2((z.x * z.x) - (z.y * z.y), (z.x * z.y) + (z.x * z.y)) + c;\n        if (length(z) > THRESHOLD) {\n            float col = float(i) / float(NUM_ITER);\n            fragColor = vec4(hsv2rgb(vec3(col, col, col)), 1.0f); // fancy coloring\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}