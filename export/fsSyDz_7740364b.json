{"ver":"0.1","info":{"id":"fsSyDz","date":"1643306353","viewed":276,"name":"MIPmap impulse response (via cub","username":"FabriceNeyret2","description":"Mouse control.\nVisualize the MIPmap LOD footprint of 1 pixel at mouse location (impulse response).\nCubeMap offers power-of-2 1024x1024 faces, so MIPmap is not buggy as in other buffers.\nBut: \n- only half floats\n- MaxLOD is bilinearly interpolated\n- no vfl","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["cubemap","mipmap","footprint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define hue(v)  vec4( .6 + .6 * cos( 6.3*(v)  + vec3(0,23,21)  ) ,1 )\n\n\nvoid mainImage( out vec4 O, vec2 u ) \n{\n    vec2  U = ( 2.*u - R ) / R.y;\n    O-=O;\n    for( float l=0. ; l<=10.; l++ )   \n      O += (1.-O.a) * float ( M(U,l).w > 0. ) * hue(l/11.);   \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"void mainCubemap( out vec4 O, vec2 U, vec3 o, vec3 D )\n{\n    O-=O;\n    if ( D.z < max(abs(D.x),abs(D.y)) ) return;\n    U.y = 1024. - U.y;              // like buffA, but 1024 x 1024.\n    \n    vec2 M = length(iMouse.xy)>10. \n               ? iMouse.xy*1024./texelFetch(iChannel0,ivec2(0),0).xy\n               : 512.+512.*cos(iTime*vec2(.31,1));\n    O = vec4( 0,0,0, floor(U) == floor(M)  ); \n}","name":"Cube A","description":"","type":"cubemap"},{"inputs":[],"outputs":[],"code":"#define R  iResolution.xy\n#define M(U,l)   textureLod( iChannel1, vec3(U,1), l  )   // access density map\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// just to carry iResolution to CubeMap\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O.xyz = iResolution;\n}","name":"Buffer A","description":"","type":"buffer"}]}