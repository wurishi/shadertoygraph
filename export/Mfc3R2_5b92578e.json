{"ver":"0.1","info":{"id":"Mfc3R2","date":"1711894391","viewed":30,"name":"Simple Red Sphere","username":"DeeGeeDow","description":"This is my first shader here, and I have no idea why there is a dot on the center of the sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\nfloat sdSphere(vec3 p, float radius){\n    return length(p) - radius;\n}\n\nfloat marchRay(vec3 ro, vec3 rd){\n    float maxDist = 100.;\n    float minDist = .001;\n    int maxItr = 100;\n    float dist = 0.;\n    vec3 pos = ro;\n    for(int i=0; i<maxItr; i++){\n        pos += dist*rd;\n        float d = sdSphere(pos, 1.5);\n        dist += d;\n        if(d < minDist || dist > maxDist) break;\n    }\n    return dist;\n}\n\nvec3 calculateNormalSphere(vec3 p, float rad){\n    float eps = .01;\n    vec3 normal;\n    normal.x = sdSphere(p + vec3(eps,0.,0.), rad) - sdSphere(p - vec3(eps,0.,0.), rad);\n    normal.y = sdSphere(p + vec3(0.,eps,0.), rad) - sdSphere(p - vec3(0.,eps,0.), rad);\n    normal.z = sdSphere(p + vec3(0.,0.,eps), rad) - sdSphere(p - vec3(0.,0.,eps), rad);\n    return normalize(normal);\n}\n\nvec3 shadeObject(vec3 ro, vec3 rd, float dist){\n    vec3 lo = vec3(3.,3.,-3.);\n    vec3 lc = vec3(1.,1.,1.);\n    vec3 sc = vec3(1.,0.,0.);\n    float ambient = .2;\n    float diffuse = .5;\n    float specular = .3;\n    float shininess = 32.;\n   \n    \n    \n    if (dist < 100.) {\n        vec3 p = ro + dist*rd;\n        vec3 normal = calculateNormalSphere(p, 1.5);\n    \n        vec3 vd = normalize(ro - p);\n        vec3 ld = normalize(lo - p);\n    \n        vec3 ac = ambient*sc;\n        vec3 dc = diffuse * max(dot(normal, ld), 0.) * sc;\n        vec3 reflectdir = reflect(-ld, normal);\n        float sc = specular*pow(max(dot(vd, reflectdir),0.), shininess);\n        return ac + dc + sc;\n    }\n    else return vec3(0.);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.*fragCoord.xy)/iResolution.y;\n    vec3 center = vec3(0.);\n    float r = 3.;\n    float angle = 1.5*iTime;\n    vec3 ro = vec3(center.x + r*sin(angle),center.y,center.z + r*cos(angle));\n    vec3 front = normalize(center - ro);\n    vec3 right = normalize(cross(vec3(0.,1.,0.), front));\n    vec3 up = cross(front, right);\n    vec3 rd = normalize(front + p.x*right + p.y*up);\n\n    \n        \n    float dist = marchRay(ro, rd);\n    vec3 col = shadeObject(ro, rd, dist);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}