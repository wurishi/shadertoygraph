{"ver":"0.1","info":{"id":"ssdBDN","date":"1656530883","viewed":179,"name":"Losharik but it's 3D Points","username":"TrueBoolean","description":"If you know, then you know. A parody based on the last 10 pages of \"newest\" category of shaders. My work is done, now somebody has to make \"Buratino \" 3D next.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","projection","parody","losharik","whateven","yetanother"],"hasliked":0,"parentid":"ssdBRn","parentname":"Cube from Bobs, Point Projection"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n#define NUM_PT 45\n\nvoid mainImage( out vec4 C, vec2 U ){\n\n    //Losharik Coordinates (4th value of vector is circle scale)\n    vec4 corner[NUM_PT];\n    \n    //Tail\n    corner[0] = vec4(0.51, 0.65, 0.,  0.0222);\n    corner[1] = vec4(0.5, 0.597, 0.,  0.0129);\n    corner[2] = vec4(0.49, 0.56, 0., 0.0129);\n    corner[3] = vec4(0.48, 0.53, 0., 0.0129);\n \n    //Front Leg FG\n    corner[4] = vec4(0.35, 0.39, .05, 0.0166);\n    corner[5] = vec4(0.335, 0.34, .06, 0.0166);\n    corner[6] = vec4(0.32, 0.288, .08, 0.0166);\n    corner[7] = vec4(0.305, 0.24, .1, 0.0166);\n    corner[8] = vec4(0.29, 0.19, .12, 0.0166);\n    corner[9] = vec4(0.28, 0.13, .13, 0.0185);\n    \n    //Rear Leg FG\n    corner[10] = vec4(0.49, 0.433, .05, 0.0166);\n    corner[11] = vec4(0.504, 0.38, .06, 0.0166);\n    corner[12] = vec4(0.515, 0.325, .08, 0.0166);\n    corner[13] = vec4(0.52, 0.268, .1, 0.0166);\n    corner[14] = vec4(0.523, 0.21, .12, 0.0166);\n    corner[15] = vec4(0.527, 0.148, .13, 0.0185);\n    \n    //Body\n    corner[16] = vec4(0.372, 0.45, 0., 0.0277);\n    corner[17] = vec4(0.465, 0.48, 0., 0.0296);\n    corner[18] = vec4(0.42, 0.463, 0., 0.0333);\n    \n    //Neck\n    corner[19] = vec4(0.34, 0.475, 0., 0.0166);\n    corner[20] = vec4(0.33, 0.52, 0., 0.0185);\n    corner[21] = vec4(0.32, 0.57, 0., 0.0185);\n    corner[22] = vec4(0.31, 0.62, 0., 0.0185);\n    \n    //Head\n    corner[23] = vec4(0.30, 0.73, 0., 0.05);\n    corner[24] = vec4(0.355, 0.80, .09, 0.0185);\n    corner[25] = vec4(0.355, 0.80, -.09, 0.0185);\n    \n    //Nose\n    corner[26] = vec4(0.19, 0.69, 0., 0.0129);\n    \n    //Eye 1\n    corner[27] = vec4(0.257, 0.74, .08, 0.0185);\n    corner[28] = vec4(0.257, 0.744, .08, 0.0129);\n    corner[29] = vec4(0.257, 0.744, .08, 0.009);\n    \n    //Eye 2\n    corner[30] = vec4(0.257, 0.74, -.08, 0.0185);\n    corner[31] = vec4(0.257, 0.744, -.08, 0.0129);\n    corner[32] = vec4(0.257, 0.744, -.08, 0.009);\n    \n    //Front Leg BG\n    corner[33] = vec4(0.35, 0.39, -.05, 0.0166);\n    corner[34] = vec4(0.335, 0.34, -.06, 0.0166);\n    corner[35] = vec4(0.32, 0.288, -.08, 0.0166);\n    corner[36] = vec4(0.305, 0.24, -.1, 0.0166);\n    corner[37] = vec4(0.29, 0.19, -.12, 0.0166);\n    corner[38] = vec4(0.28, 0.13, -.13, 0.0185);\n    \n     //Rear Leg BG\n    corner[39] = vec4(0.49, 0.433, -.05, 0.0166);\n    corner[40] = vec4(0.504, 0.38, -.06, 0.0166);\n    corner[41] = vec4(0.515, 0.325, -.08, 0.0166);\n    corner[42] = vec4(0.52, 0.268, -.1, 0.0166);\n    corner[43] = vec4(0.523, 0.21, -.12, 0.0166);\n    corner[44] = vec4(0.527, 0.148, -.13, 0.0185);\n    \n    \n    //Default Color\n    vec4 cols[NUM_PT];\n    for(int i = 0; i < NUM_PT; ++i)\n        cols[i] = vec4(.75, .75, 1., 1.);\n        \n    \n    //Eye 1\n    cols[27] = vec4(.7, .7, .7, 1.);\n    cols[28] = vec4(.9, .9, .9, 1.);\n    cols[29] = vec4(2., 2., 2., 1.);\n    \n    //Eye 2\n    cols[30] = vec4(.7, .7, .7, 1.);\n    cols[31] = vec4(.9, .9, .9, 1.);\n    cols[32] = vec4(2., 2., 2., 1.);\n    \n    //Nose\n    cols[26] = vec4(2., 2., 2., 1.);\n    \n    //Ears\n    cols[24] = vec4(.5, 1., 1., 1.);\n    cols[25] = vec4(.5, 1., 1., 1.);\n    \n    cols[16] = vec4(1., .5, 1., 1.);\n    \n    cols[21] = vec4(1., .5, 1., 1.);\n    \n    cols[2] = vec4(.5, 1., 1., 1.);\n    \n    cols[35] = vec4(1., 1., .5, 1.);\n    cols[43] = vec4(1., 1., .5, 1.);\n    cols[5] = vec4(1., 1., .5, 1.);\n    cols[14] = vec4(1., 1., .5, 1.);\n    \n    cols[33] = vec4(.5, 1., 1., 1.);\n    cols[44] = vec4(.5, 1., 1., 1.);\n    cols[8] = vec4(.5, 1., 1., 1.);\n    cols[18] = vec4(.5, 1., 1., 1.);\n    \n   \n     \n    for(int i = 0; i < NUM_PT; ++i){\n    \n        corner[i].xy -= .5;\n    \n        corner[i].xz *= rot(sin(iTime)+1.4);\n        corner[i].yz *= rot(sin(iTime/5.)/3.-.4);\n        \n        corner[i].xyz *= 11.;\n\n        corner[i].z += 7.;\n        \n        \n        \n        corner[i].xy /= corner[i].z;\n    }\n    \n    C = vec4(1.);\n    U = (U+U-iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    for(int i = 0; i < NUM_PT; ++i)\n        if(length(corner[i].xy-U.xy) < (.25*corner[i].w*100.)/corner[i].z)\n            C /= cols[i]*2.;\n    \n}\n\n/* This is a parody. Due to array access, the performance may not be so good on some devices.\nNow with most depth perception problems fixed with better camera angles\n*/","name":"Image","description":"","type":"image"}]}