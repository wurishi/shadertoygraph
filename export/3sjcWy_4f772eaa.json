{"ver":"0.1","info":{"id":"3sjcWy","date":"1587371005","viewed":93,"name":"Noise UV Maps","username":"sanjanarao","description":"CIS461 University of Pennsylvania","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst vec3 lightPos = vec3(0., 5., -7.);\nconst vec3 eyePos = vec3(0.0, 2.5, -20.0);\nconst vec3 refPos = vec3(0., 2.5, 0.);\nconst float PI = 3.14159265359;\nconst float FOVY = 19.5 * PI / 180.;\nconst vec3 center = vec3(0.0, -2.0, -3.0);\n\n\n// Toggle to affect the normals of cube with perliin noise\nbool AFFECT_NORMALS = true;\n    \nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n/***************** COLOR PALETTES *******************/\n\nconst vec3 a = vec3(0.596, 1., 0.596);\nconst vec3 b = vec3(0.2, 0.4, 0.2);\nconst vec3 c = vec3(2.0, 1.0, 1.0);\nconst vec3 d = vec3(0.00, 0.25, 0.25);\n\nvec3 colorPaletteWorley(float t) { return a + b * cos(6.28 * (t * c + d)); }\nvec3 colorPalettePerlin(float t) { return a + b * cos(6.28 * (t * c + d)); }\nvec3 colorPaletteFBM(float t) {   return a + b * cos(6.28 * (t * c + d)); }\n\n/***************** BASIC SCENE SET UP *******************/\n    \n#define FLOOR_SDF plane(pos, vec4(0, 1, 0, 2.5));\n#define RED_WALL_SDF plane(pos, vec4(1, 0, 0, 5));\n#define GREEN_WALL_SDF plane(pos, vec4(-1, 0, 0, 5));\n#define BACK_WALL_SDF plane(pos, vec4(0, 0, -1, 5));\n#define CEILING_SDF plane(pos, vec4(0, -1, 0, 7.5));\n#define TALL_BOX_SDF sphere(pos, 4., center);\n#define SMALL_BOX_SDF box(rotateY(pos + vec3(-2, 1, 5), -30. * PI / 180.), vec3(1, 7, 1));\n\nconst int FLOOR_ID = 0;\nconst int RED_WALL_ID = 1;\nconst int GREEN_WALL_ID = 2;\nconst int BACK_WALL_ID = 3;\nconst int CEILING_ID = 4;\nconst int TALL_BOX_ID = 5;\nconst int SMALL_BOX_ID = 6;\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\nfloat sceneMap3D(vec3 pos) {\n    float flr = FLOOR_SDF;\n    float red_wall = RED_WALL_SDF;\n    float green_wall = GREEN_WALL_SDF;\n    float back_wall = BACK_WALL_SDF;\n    float ceiling = CEILING_SDF;\n    float tall_box = TALL_BOX_SDF;\n    float small_box = SMALL_BOX_SDF;\n    return min(back_wall, min(red_wall, min(green_wall, min(ceiling, min(flr, min(tall_box, small_box))))));\n\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = FLOOR_SDF;\n    obj = FLOOR_ID;\n\n    float t2 = RED_WALL_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = RED_WALL_ID;\n    } \n    t2 = GREEN_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = GREEN_WALL_ID;\n    }\n    t2 = BACK_WALL_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = BACK_WALL_ID;\n    }\n    t2 = CEILING_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = CEILING_ID;\n    }\n    t2 = TALL_BOX_SDF;\n    if (t2 < t) {\n        t = t2;\n        obj = TALL_BOX_ID;\n    }\n    t2 = SMALL_BOX_SDF\n    if (t2 < t) {\n        t = t2;\n        obj = SMALL_BOX_ID;\n    }\n}\n\n/***************** RAY MARCHING LOGIC *******************/\n\nvec3 rayCast(vec3 eye, vec3 ref, vec2 uv) {\n\n    float len = tan(FOVY) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    return normalize(p - eye);\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01) { return; }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n/***************** EFFECTS *******************/\n\nvec2 random2(vec2 p) {\n    return fract(sin(vec2(dot(p, vec2(127.1, 311.7)),\n        dot(p, vec2(127.1, 311.7)))));\n}\n\n\n\nvec3 random3 ( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\nfloat random1(vec2 p) {\n    return fract(dot(fract(cos(vec2(dot(p, vec2(127.1908, 311.7340)),\n        dot(p, vec2(127.1, 311.7))))), vec2(0.1288971, 2403.7)));\n}\n\nvec2 random4 ( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1, 191.999)),\n                          dot(p,vec2(269.5, 765.54)))) * 43758.5453);\n}\n\nfloat noise1D( vec2 p ) {\n    return fract(sin(dot(p, vec2(127.1, 311.7))) *\n                 43758.5453);\n}\n\n\n\nfloat WorleyNoise2D(vec2 p) {\n    // Tile the space\n    vec2 pointInt = floor(p);\n    vec2 pointFract = fract(p);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x), float(y));\n\n            // Random point inside current neighboring cell\n            vec2 point = random4(pointInt + neighbor);\n\n            // Animate the point\n            point = 0.5 + 0.5 * sin(iTime *  point); // 0 to 1 range\n\n            // Compute the distance b/t the point and the fragment\n            // Store the min dist thus far\n            vec2 diff = neighbor + point - pointFract;\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\nfloat interpNoise2D(float x, float y) {\n    float intX = floor(x);\n    float fractX = fract(x);\n    float intY = floor(y);\n    float fractY = fract(y);\n\n    float v1 = random1(vec2(intX, intY));\n    float v2 = random1(vec2(intX + 1., intY));\n    float v3 = random1(vec2(intX, intY + 1.));\n    float v4 = random1(vec2(intX + 1., intY + 1.));\n\n    float i1 = mix(v1, v2, fractX);\n    float i2 = mix(v3, v4, fractX);\n    return mix(i1, i2, fractY);\n}\n\n\nfloat fbm(vec2 p) {\n    float total = 0.;\n    float persistence = 0.5f;\n    float octaves = 4.;\n\n    for(float i = 1.; i <= octaves; i++) {\n        float freq = pow(2.f, i);\n        float amp = pow(persistence, i);\n\n        total += interpNoise2D(p.x * freq + cos(iTime),\n                               p.y * freq + sin(iTime)) * amp;\n    }\n    return total;\n}\n\n\nfloat surflet(vec3  p, vec3 gridPoint) {\n    // Compute the distance between p and the grid point along each axis, and warp it with a\n    // quintic function so we can smooth our cells\n    vec3 t2 = abs(p - gridPoint);\n    vec3 t;\n    t.x = 1.f - 6.f * pow(t2.x, 5.f) + 15.f * pow(t2.x, 4.f) - 10.f * pow(t2.x, 3.f);\n    t.y = 1.f - 6.f * pow(t2.y, 5.f) + 15.f * pow(t2.y, 4.f) - 10.f * pow(t2.y, 3.f);\n    t.z = 1.f - 6.f * pow(t2.z, 5.f) + 15.f * pow(t2.z, 4.f) - 10.f * pow(t2.z, 3.f);\n\n    // Get the random vector for the grid point (assume we wrote a function random2\n    // that returns a vec2 in the range [0, 1])\n    vec3 gradient = random3(gridPoint) * 2. - vec3(1.);\n    // Get the vector from the grid point to P\n    vec3 diff = p - gridPoint;\n    // Get the value of our height field by dotting grid->P with our gradient\n    float height = dot(diff, gradient);\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\n    return height * t.x * t.y * t.z;\n}\n\nfloat perlin(vec3 p) {\n    float surfletSum = 0.f;\n    // Iterate over the four integer corners surrounding uv\n    for(int dx = 0; dx <= 1; ++dx) {\n        for(int dy = 0; dy <= 1; ++dy) {\n             for(int dz = 0; dz <= 1; ++dz) {\n                 surfletSum += surflet(p, floor(p) + vec3(dx, dy, dz));\n             }\n        }\n    }\n    return surfletSum + sin(iTime);\n}\n \nvoid CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {\n    if (abs(v1.x) > abs(v1.y))\n            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);\n        else\n            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);\n        v3 = cross(v1, v2);\n}\n\nvec3 perlinTangentSpaceNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( perlin(pos + epsilon.yxx) - perlin(pos - epsilon.yxx),\n                            perlin(pos + epsilon.xyx) - perlin(pos - epsilon.xyx),\n                            perlin(pos + epsilon.xxy) - perlin(pos - epsilon.xxy)));\n}\n\n\nmat3 TangentToWorld(vec3 nor) {\n    vec3 tangent, bitangent;\n    CoordinateSystem(nor, tangent, bitangent);\n    return mat3(tangent, bitangent, nor);\n}\n\n\nvec2 uvSphere(vec3 pos) {\n    \n    vec3 d =  normalize(center - pos); \n    float u = 0.5 + atan(d.z, d.x) / (2. * PI);\n    float v = 0.5 - asin(d.y) / PI;\n    return vec2(u, v);\n}\n\n\n/***************** MATERIALS *******************/\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightDir, vec3 view) {\n    //disrupt normals \n    vec3 perlin_normal = perlinTangentSpaceNormal(p);\n    perlin_normal = TangentToWorld(n) * perlin_normal;\n    float perlin_lambert = max(0., dot(view, perlin_normal));\n\n    float lambert = max(0., dot(lightDir, n));\n    if (hitObj == 3) { return lambert *  colorPaletteWorley(WorleyNoise2D(vec2(p.x, p.y))); }\n    if (hitObj == 5) { return lambert * colorPaletteFBM(fbm(uvSphere(p))); }\n    if (hitObj == 6) { \n        if (AFFECT_NORMALS) { return colorPalettePerlin(perlin(p))* perlin_lambert; } \n        else { return colorPalettePerlin(perlin(p)) * lambert; }    \n    } else { return vec3(0., 0., 1) * lambert; }\n}\n\n/***************** BASIC FUNCTIONALITY *******************/\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = normalize(computeNormal(isect));\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //Convert to range [-1,1]\n    uv = uv * 2.0 - vec2(1.);\n    \n    vec3 eye = eyePos;\n    vec3 ref = refPos;\n\n    vec3 dir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(dir, eye);\n     \n    // Output to screen\n    fragColor = vec4(isect.color, 1.);\n   \n}","name":"Image","description":"","type":"image"}]}