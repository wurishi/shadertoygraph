{"ver":"0.1","info":{"id":"4syyzK","date":"1522538781","viewed":320,"name":"Shader Showdown Round 1","username":"Flopine","description":"My shader during live coding shader showdown event at Revision 2018, for the preselection. \n\nHope you'll enjoy it! :)","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","revision2018"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, lsdlive, XT95 and lamogui for teaching me and their help\n\n\n#define ITER 60.\n\nmat2 rot (float a)\n{float c = cos(a);float s = sin(a); return mat2(c,s,-s,c);}\n\nvec2 moda(vec2 p, float per)\n{\nfloat a = atan(p.y,p.x);\nfloat l = length(p);\na = mod(a-per/2.,per)-per/2.;\nreturn vec2 (cos(a),sin(a))*l;\n}\n\nfloat stmin (float a, float b, float k, float n)\n{\nfloat st = k/n;\nfloat u = b-k;\nreturn min(min(a,b),0.5*(u+a+abs(mod(u-a+st,2.*st)-st)));\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\nreturn a+b*cos(2.*3.141592*(c*t+d));\n}\n\nfloat cyl (vec2 p, float r)\n{\nreturn length(p)-r;\n}\n\n\nfloat sphe (vec3 p, float r)\n{\nreturn length(p)-r;\n}\n\n\nfloat od (vec3 p, float d)\n{\nreturn dot(p,normalize(sign(p)))-d;\n}\n\n\nfloat prim1 (vec3 p)\n{\np.xz *= rot(p.y+iTime);\np.xz = moda(p.xz, 2.*3.141592/6.);\np.x -= .4;\nreturn stmin(cyl(p.xz,0.1),sphe(p,0.8),0.5,5.);\n}\n\nfloat shape1 (vec3 p)\n{\np.xy = moda(p.xy, 2.*3.141592/7.);\np.x -=5.;\nreturn prim1(p);\n}\n\nfloat prim2 (vec3 p)\n{\np.xz *= rot(iTime);\np.xy *= rot(iTime);\nfloat sp = 1.;\nfloat steps = 3.;\nfloat _od = od(vec3(p.x-sp,p.y,p.z),1.);\nfloat _od1 = od(vec3(p.x+sp,p.y,p.z),1.);\nfloat _od3 = od(vec3(p.x,p.y+sp,p.z),1.);\nfloat _od2 = od(vec3(p.x,p.y-sp,p.z),1.);\nreturn  stmin(_od3,stmin(_od2,stmin(_od,_od1,0.5,steps),0.5,steps),0.5,steps);\n}\n\nfloat sdf (vec3 p)\n{\nfloat _od = prim2(p);\nfloat per = 2.;\np.xy *= rot(p.z*0.1);\np.z = mod(p.z-per/2.,per)-per/2.;\nreturn min(shape1(p),_od);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    vec3 ro = vec3(0.01,0.01,-10.+exp(-fract(iTime))); vec3 p = ro;\n    vec3 dir = normalize(vec3(uv,1.));\n    float shad = 0.;\n    float t = 0.;\n\n    for (float i=0.; i<ITER; i++)\n    {\n    float d = sdf(p);\n    if (d<0.01)\n    {\n    shad = i/ITER;\n    break;\n    }\n    p+=d*dir*0.5;\n    }\n\n    t = length(ro-p);\n    vec3 pal = palette(abs(uv.y),\n                        vec3(0.5),\n                        vec3(0.5),\n                        vec3(0.4),\n                        vec3(0.,0.2,0.5)\n                    );\n    vec3 color = vec3(1.-shad)/vec3(0.7,0.5,0.5);\n    color = mix(color, pal,1.-exp(-0.008*t*t));\n\n    // Output to screen\n    fragColor = vec4(pow(color,vec3(0.45)),1.0);\n}","name":"Image","description":"","type":"image"}]}