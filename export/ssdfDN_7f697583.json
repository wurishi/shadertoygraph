{"ver":"0.1","info":{"id":"ssdfDN","date":"1685548761","viewed":101,"name":"Fork anamorphic","username":"Doc_gdi","description":"I'm compiling different anamorohic post processing effects shaders I found all over shadertoy. With links to the makers.\nCurrent Status: I'm yet to find proper bloom.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["flare","chromaticabberation","cinematic","anamorphic"],"hasliked":0,"parentid":"3tfcD8","parentname":"anamorphic effects"},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat randomFloat(){\n    float NoiseSeed;\n  //NoiseSeed = sin(NoiseSeed) * 84522.13219145687;\n  return fract(sin(NoiseSeed) * 84522.13219145687);\n}\n\nfloat SCurve (float value, float amount, float correction) {\n\n\tfloat curve = 1.0; \n\n    if (value < 0.5)\n    {\n\n        curve = pow(value, amount) * pow(2.0, amount) * 0.5; \n    }\n        \n    else\n    { \t\n    \tcurve = 1.0 - pow(1.0 - value, amount) * pow(2.0, amount) * 0.5; \n    }\n\n    return pow(curve, correction);\n}\n\n\n\n\n//ACES tonemapping from: https://www.shadertoy.com/view/wl2SDt\nvec3 ACESFilm(vec3 x)\n{\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return (x*(a*x+b))/(x*(c*x+d)+e);\n}\n\n\n\n\n//Chromatic Abberation from: https://www.shadertoy.com/view/XlKczz\nvec3 chromaticAbberation(vec2 uv, float amount)\n{\n    float aberrationAmount = amount/10.0;\n   \tvec2 distFromCenter = uv - 0.5;\n\n    // stronger aberration near the edges by raising to power 3\n    vec2 aberrated = aberrationAmount * pow(distFromCenter, vec2(3.0, 3.0));\n    \n    vec3 color = vec3(0.0);\n    \n    for (int i = 1; i <= 8; i++)\n    {\n        float weight = 1.0 / pow(2.0, float(i));\n        color.r += texture(iChannel0, uv - float(i) * aberrated).r * weight;\n        color.b += texture(iChannel0, uv + float(i) * aberrated).b * weight;\n    }\n    \n    color.g = texture(iChannel0, uv).g * 0.9961; // 0.9961 = weight(1)+weight(2)+...+weight(8);\n    \n    return color;\n}\n\n\n\n\n//film grain from: https://www.shadertoy.com/view/wl2SDt\nvec3 filmGrain()\n{\n    return vec3(0.9 + randomFloat()*0.15);\n}\n\n\n\n\n//Sigmoid Contrast from: https://www.shadertoy.com/view/MlXGRf\nvec3 contrast(vec3 color)\n{\n    return vec3(SCurve(color.r, 3.0, 1.0), \n                SCurve(color.g, 4.0, 0.7), \n                SCurve(color.b, 2.6, 0.6)\n               );\n}\n\n\n\n\n//anamorphic-ish flares from: https://www.shadertoy.com/view/MlsfRl\nvec3 flares(vec2 uv, float threshold, float intensity, float stretch, float brightness)\n{\n    threshold = 1.0 - threshold;\n    \n    vec3 hdr = texture(iChannel0, uv).rgb;\n    hdr = vec3(floor(threshold+pow(hdr.r, 1.0)));\n    \n    float d = intensity; //200.;\n    float c = intensity*stretch; //100.;\n    \n    \n    //horizontal\n    for (float i=c; i>-1.0; i--)\n    {\n        float iChannel0L = texture(iChannel0, uv+vec2(i/d, 0.0)).r;\n        float iChannel0R = texture(iChannel0, uv-vec2(i/d, 0.0)).r;\n        hdr += floor(threshold+pow(max(iChannel0L,iChannel0R), 4.0))*(1.0-i/c);\n    }\n    \n    //vertical\n    for (float i=c/2.0; i>-1.0; i--)\n    {\n        float iChannel0U = texture(iChannel0, uv+vec2(0.0, i/d)).r;\n        float iChannel0D = texture(iChannel0, uv-vec2(0.0, i/d)).r;\n        hdr += floor(threshold+pow(max(iChannel0U,iChannel0D), 40.0))*(1.0-i/c) * 0.25;\n    }\n    \n    hdr *= vec3(0.5,0.4,1.0); //tint\n    \n\treturn hdr*brightness;\n}\n\n//margins from: https://www.shadertoy.com/view/wl2SDt\nvec3 margins(vec3 color, vec2 uv, float marginSize)\n{\n    if(uv.y < marginSize || uv.y > 1.0-marginSize)\n    {\n        return vec3(0.0);\n    }else{\n        return color;\n    }\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    \n    vec3 color = texture(iChannel0, uv).xyz;\n    \n    //chromatic abberation\n    color = chromaticAbberation(uv, 0.8);\n    \n    \n    //film grain\n    color *= filmGrain();\n    \n    \n    //ACES Tonemapping\n  \tcolor = ACESFilm(color);\n    \n    \n    //contrast\n    color = contrast(color) * 0.9;\n    \n    \n    //flare\n    color += flares(uv, 0.9, 200.0, 0.5, 0.06);\n    \n    \n    //margins\n    color = margins(color, uv, 0.1);\n    \n    \n    //output\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}