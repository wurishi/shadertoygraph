{"ver":"0.1","info":{"id":"M3X3zN","date":"1708674918","viewed":99,"name":"Turkish Flag_001","username":"XiFT","description":"flag","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Convert r, g, b to normalized vec3\n */\nvec3 toNormalizedRGB(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n/**\n * Draw a rectangle at vec2 `pos` with width `width`, height `height` and\n * color `color`.\n */\nvec4 drawRectangle(vec2 uv, vec2 pos, float width, float height, vec3 color) {\n\tfloat alpha = 0.0;\n\tif ((uv.x > pos.x - width / 2.0) && (uv.x < pos.x + width / 2.0)\n\t\t&& (uv.y > pos.y - height / 2.0) && (uv.y < pos.y + height / 2.0)) {\n\t\talpha = 1.0;\n\t}\n\treturn vec4(color, alpha);\n}\n\n/**\n * Draw a circle at vec2 `pos` with radius `radius` and color `color`.\n */\nvec4 drawCircle(vec2 uv, vec2 pos, float radius, vec3 color) {\n\tfloat alpha = 0.0;\n\tif (length(uv - pos) < radius) {\n\t\talpha = 1.0;\n\t}\n\treturn vec4(color, alpha);\n}\n\n   void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord / iResolution.y;\n\tvec2 center = vec2(0.5 * iResolution.x / iResolution.y, 0.5);\n\tfloat width = 1.5;\n\tfloat height = 1.;    \n\n    // Background layer\n\tvec4 backgroundLayer = vec4(toNormalizedRGB(144.0, 144.0, 144.0), 1.0);\n\t\n\t// Rectangle\n\tvec3 rectangleColor = toNormalizedRGB(227.0, 10.0, 23.0);\n\tvec4 rectangleLayer = drawRectangle(uv, center, width, height, rectangleColor);\n\t\n\t// First Circle\n\tvec2 firstCirclePos = vec2(center.x - 0.250, center.y);\n\tfloat firstCircleRadius = height * 0.5 / 2.0;\n\tvec3 circleColor = toNormalizedRGB(255.0, 255.0, 255.0);\n\tvec4 firstCircleLayer = drawCircle(uv, firstCirclePos, firstCircleRadius, circleColor);\n\t\n\t// Second Circle\n\tvec2 secondCirclePos = vec2(center.x - 0.1875 , center.y );\n\tfloat secondCircleRadius = height * 0.4 / 2.0;\n\tvec4 secondCircleLayer = drawCircle(uv, secondCirclePos, secondCircleRadius, circleColor);\n\t\n\t// Subtract the area of the second circle from the first circle\n\tvec4 crescentLayer = mix(firstCircleLayer, vec4(0.0), step(length(uv - secondCirclePos), secondCircleRadius));\n\t\n\t// Blend the layers\n\tvec4 finalColor = mix(backgroundLayer, rectangleLayer, rectangleLayer.a);\n\tfinalColor = mix(finalColor, crescentLayer, crescentLayer.a);\n\t\n\tfragColor = finalColor;\n}\n","name":"Image","description":"","type":"image"}]}