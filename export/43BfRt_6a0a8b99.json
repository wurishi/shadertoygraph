{"ver":"0.1","info":{"id":"43BfRt","date":"1729855510","viewed":30,"name":"Mandelbrot with zoom animation","username":"Trocu","description":"test of animated mandelbrot set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float x)\n    {//by Inigo Quilez\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    return a + b * cos( 6.28318 * (c * x + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = 3.14159265359;\n    vec2 uv = fragCoord / iResolution.xy  ; //normalisation\n    uv = (uv - 0.5) * 4.0 ; //0.0 center, corners at 2\n    uv.x *= iResolution.x / iResolution.y;  //aspect ratio\n    float time = iTime*0.5; //slow time factor\n    \n    float val = 10.*sin( time/ (pi)); //0 to 10\n    float s = sign(val);\n    float zoomFactor = exp(s * val);  //aprox 22000 max zoom factor\n    \n    uv = uv / zoomFactor; //zoom in time\n    \n    vec2 offset = vec2(-0.749,0.079); //zoom coords, sensitive\n    uv += offset;\n    \n    \n    vec2 z = vec2(0.0);\n    vec3 col = vec3(0.0);\n    \n    float limit = 30.+15.*val*s;//change numbers here to get more pronounced shape animation\n    float i = 0.0;\n    for( ; i < limit; i++) {\n        z = vec2 (z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + uv;\n        if (dot(z,z) > 4.) { break; }  //break here to actually get some colors, not only shape\n    }\n    float d = length(z);\n    if (d >= 2.0) {\n        col = palette(i/limit);\n    } \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}