{"ver":"0.1","info":{"id":"3dyBWW","date":"1607236193","viewed":55,"name":"some optical illusion","username":"ltms","description":"stereokinetic effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// visszaadja a kor maszkolofuggvenyet\nfloat drawCircle(vec2 st, vec2 origo, float radius)\n{\n    float blur = .01;\n    \n    // aktualis pixelpont es kor kozepppontjanak tavolsaga\n    // vissza kell alakitani descartes koordinatakra\n    float d = length(vec2(st.y*cos(st.x),st.y*sin(st.x)) - origo);\n   \n    // color withour blur\n    float c1 = (d<=radius) ? 1. : 0.;\n    // color with blur\n    float c2 = smoothstep(radius, radius-blur, d);\n    \n    return c2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n    // cartesian coords\n    // x: [-0.89 ; 0.89], y: [-0.5 ; 0.5]\n    vec2 uv = (fragCoord.xy - 0.5*iResolution.xy ) / iResolution.y;\n\n    // polar coords\n    // x: [-PI ; PI], y: [0 ; inf]\n    vec2 st = vec2( atan(uv.y, uv.x), length(uv));\n    // origotol valo tavolsag\n    //fragColor = vec4(st.y);\n    // mekkora szoget zar be az x tengellyel\n    //fragColor = vec4(st.x / 6.2831 + 0.5);\n    //fragColor = vec4(st.x / (2.* PI + 0.5);\n    \n    // a domaint atalakitjuk polar koordinatakra (\"osszehajtuk\" origonal)\n    // normalized polar coords\n    // x: [0 ; 1], y: [0 ; inf]\n    //st = vec2(st.x / 6.2831 + 0.5, st.y);\n    \n    // forgatas\n    st.x+=iTime*1.4;\n    \n    int nrSlices = 6;\n    int craterStart = 4 ;\n    \n    // körök közötti távolság\n    float dist= 0.5/float(nrSlices);\n    //dist = 0.1;\n    \n    vec4 bgColor = vec4(1.);\n    for (int i = 0; i<craterStart; i++) {\n        vec2 kekorigo = vec2(float(i)*dist,0.); //vec2(float(i)*0.1,0.)\n        float kekradius = .5 - (float(i)*dist); //.5 - (float(i)*0.1)\n    \tfloat kek = drawCircle(st, kekorigo, kekradius);\n    \tbgColor.rgb = mix(bgColor.rgb, vec3(0., 0., 1.), kek);\n        \n        vec2 sargaorigo = vec2(float(i)*dist + dist/2.,0.); //vec2(float(i)*0.10 +0.05, 0.)\n        float sargaradius = .5 - (float(i)*dist+dist/2.); //.5 - (float(i)*0.1+0.05)\n    \tfloat sarga = drawCircle(st, sargaorigo, sargaradius);\n    \tbgColor.rgb = mix(bgColor.rgb, vec3(1., 1., 0.), sarga);\n    }\n    for (float i = float(craterStart); i<float(nrSlices); i++) {\n        vec2 kekorigo = vec2(.5-(i-1. )*dist,0.); //vec2(float(i)*0.1,0.)\n        float kekradius = .5 - i*dist; //.5 - (float(i)*0.1)\n    \tfloat kek = drawCircle(st, kekorigo, kekradius);\n    \tbgColor.rgb = mix(bgColor.rgb, vec3(0., 0., 1.), kek);\n        \n        vec2 sargaorigo = vec2(.5-((i-1.)*dist + dist/2.),0.); //vec2(float(i)*0.10 +0.05, 0.)\n        float sargaradius = .5 - (i*dist+dist/2.); //.5 - (float(i)*0.1+0.05)\n    \tfloat sarga = drawCircle(st, sargaorigo, sargaradius);\n    \tbgColor.rgb = mix(bgColor.rgb, vec3(1., 1., 0.), sarga);\n    }\n    \n    // output color\n\tfragColor = bgColor;\n}","name":"Image","description":"","type":"image"}]}