{"ver":"0.1","info":{"id":"stffz7","date":"1650647815","viewed":341,"name":"Cubes in a Box (sound)","username":"incription","description":"the tri function! try changing all the constants in common, they should all work","likes":13,"published":3,"flags":8,"usePreview":0,"tags":["sound","music","satisfying"],"hasliked":0,"parentid":"7tsyz8","parentname":"Bouncing Balls (sound)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define F(x,y) c = mix(x, c, smoothstep(0., fwidth(y), y))\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.5;\n    \n    vec3 c = vec3(0);\n    \n    float d = sdBox(uv, vec2(.3, .6) + 2. * vec2(.005));\n    F(vec3(1), opOnion(d, .005));\n    \n    for(int i=0;i<BOXES;i++) {\n        if(i<BOXES-1) F(vec3(1), sdSegment(uv, boxPos(i, iTime), boxPos(i + 1, iTime)) - 0.002);\n    }\n    \n    for(int i=0;i<BOXES;i++) {\n        vec2 pos = boxPos(i, iTime);\n        \n        F(vec3(1), sdBox(pos - uv, vec2(BOX_RADIUS)));\n        F(hue_to_rgb(float(i)/float(BOXES)), sdBox(pos - uv, vec2(BOX_RADIUS - .005)));\n    }\n   \n\n    // Output to screen\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define BOXES 12\n#define BOX_RADIUS .04\n\n#define BOX_SIZE vec2(.3, .6)\n#define VELOCITY 0.05 + 0.3\n\nvec3 hue_to_rgb(float hue){\n        float R = abs(hue * 6. - 3.) - 1.;\n        float G = 2. - abs(hue * 6. - 2.);\n        float B = 2. - abs(hue * 6. - 4.);\n        return clamp(vec3(R,G,B), 0., 1.);\n}\n\nvec2 circle(float x) {\n    return vec2(sin(x), cos(x));\n}\n\nvec2 tri(float x, vec2 p) {\n    return 2. * abs(x/p - floor(x/p + .5));\n}\n\nvec2 velocity(int box) {\n    return BOX_SIZE * vec2(VELOCITY * float(box)/float(BOXES));\n}\n\nvec2 boxPos(int box, float time) {\n    vec2 boxSize = BOX_SIZE - BOX_RADIUS;\n    vec2 start = -boxSize;\n    return start + tri(time, boxSize / velocity(box)) * 2. * boxSize;\n}\n\n//https://iquilezles.org/articles/distfunctions2d/\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat opOnion( float d, float r )\n{\n  return abs(d) - r;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 trihi(float x, vec2 p) {\n    p /= 2.;\n    return (x/p - floor(x/p)) / 2.;\n}\n\nvec2 mainSound( int samp, float time )\n{\n    float amp;\n    for(int i=0; i<BOXES; i++) {\n        vec2 boxSize = BOX_SIZE - BOX_RADIUS;\n        vec2 period = trihi(time, boxSize / velocity(i));\n        \n        float hz = pow(2., (1. * float(BOXES-i))/12.) * 261.625565 * 4.;\n        \n        //if(min(period.x,period.y) < .1) amp = 1.\n        amp += sin(6.2831*hz*time)*exp(-300.0*period.x) * .2;\n        amp += sin(6.2831*hz*time)*exp(-300.0*period.y) * .2;        \n    }\n    \n    if(time < .25) amp = 0.;\n    \n    \n    return vec2( amp );\n}","name":"Sound","description":"","type":"sound"}]}