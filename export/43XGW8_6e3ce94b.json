{"ver":"0.1","info":{"id":"43XGW8","date":"1707812510","viewed":107,"name":"flower of life test 003","username":"h1r0ok","description":"flower of life.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"l3XGz4","parentname":"flower of life 002"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.youtube.com/watch?v=f4s1h2YETNY\nfloat PI = 3.141592653589793;\n\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat sdf(vec2 uv) {\n    return sdCircle(uv , .0);\n    // return sdRhombus(uv , vec2(1.0, 1.0 + sin(0.445*iTime)));\n}\n\n\nfloat sdArc( in vec2 p, in float arc_degree, in float ra, float rb )\n{\n    // sc is the sin/cos of the aperture\n    float tb = (arc_degree / 360.0) * PI;\n    vec2  sc = vec2(sin(tb),cos(tb));\n    p.x = abs(p.x);\n    return ((sc.y*p.x>sc.x*p.y) ? length(p-sc*ra) : \n                                  abs(length(p)-ra)) - rb;\n}\n\nvec3 pallete(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos(6.28318* (c*t+d));\n}\n\n// https://iquilezles.org/articles/palettes/\nvec3 pallete1(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    // vec3 d = vec3(sin(iTime*iTime * 10.), 0.416, sin(iTime*10.234));\n    return pallete(t, a, b, c, d);\n}\n\n\t\nvec3 pallete0(float t) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(0.00, 0.15, 0.20);\n    return pallete(t, a, b, c, d);\n}\n\n\n// -PI < ret < PI.\nfloat _atan2(in float y, in float x)\n{\n    return x == 0.0 ? sign(y) * PI / 2.0 : atan(y, x);\n}\n\nfloat rad2deg(float rad) {\n    return 360.0 * rad / (2.0 * PI);\n}\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float sine = sin(angle), cosine = cos(angle);\n    return mat2( cosine, -sine, \n                 sine,    cosine );\n}\n\nvec3 circle(vec2 uv, vec2 pos, float R, float t, float arc, float rot) {\n    if (arc < 0.01) return vec3(.0, .0, .0);\n    vec2 uv0 = uv;\n\n    uv.x -= pos.x * R;\n    uv.y -= pos.y * R;\n    float theta = _atan2(uv.y, uv.x);\n\n    uv *= rotationMatrix(rot);\n\n\n# if 0\n    vec2 rotuv = uv * rotationMatrix(-30.0);\n    float theta = _atan2(rotuv.y, rotuv.x);\n    float deg = rad2deg(theta);\n\n    if (pertern[0]==0 && -180. < deg && deg <= -120.) return vec3(.0, .0, .0);\n    if (pertern[1]==0 && -120. < deg && deg <= - 60.) return vec3(.0, .0, .0);\n    if (pertern[2]==0 && - 60. < deg && deg <= -  0.) return vec3(.0, .0, .0);\n    if (pertern[3]==0 &&    0. < deg && deg <=   60.) return vec3(.0, .0, .0);\n    if (pertern[4]==0 &&   60. < deg && deg <=  120.) return vec3(.0, .0, .0);\n    if (pertern[5]==0 &&  120. < deg && deg <=  180.) return vec3(.0, .0, .0);\n#endif\n\n    //if (startend.x < degree && degree < startend.y) return vec3(0.0, 0.0, 0.0);\n\n    float d0 = sdf(uv0);\n    //float d = sdf(uv);\n    //float d = sdRhombus(uv, vec2(1.6, 0.9));\n    // float tb = 1.0;\n    // vec2  sc = vec2(sin(tb),cos(tb));\n\n    float thick = 0.0;\n    //thick = sin(iTime) + 1.0;\n    // apature = (5.0 / 6.0) * PI;\n    float d = sdArc(uv, arc, R, thick);\n\n    // d *= exp(-d0);\n    // d += R * sin(iTime);\n\n    // MEMO: iTime > 40000.0 くらいでおかしくなる.\n    float it = d0 + t*.4 + iTime*.4;\n    // float it = theta + ( iTime * .4) + d0;\n    //float it = 0.2*iTime + (theta / (2.0 * PI));\n    vec3 col = pallete1(it);\n    \n\n\n    // float x = uv.x * sin(iTime);\n    // float y = uv.y * cos(iTime);\n    // vec3 col = pallete1(x + y);\n\n    float line_width = 0.2;\n    //d -= R;\n    //d = sin(d*8.0 + iTime)/8.0;\n    d = abs(d);\n    d = smoothstep(0.0, line_width, d);\n    d = 0.004 / d;\n    d = pow(d, 1.3);\n\n    return col * d;\n}\n\nvec2 get_startend(int i, int j) {\n    if (i == 0) {\n        if (j == 0) {\n            return vec2(.0, 120.0);\n        }\n    }\n    return vec2(.0, .0);\n}\n\nvec2 get_pos(int i, int j) {\n    float ROOT32 = (1.7320508/2.0);\n    int ioffset = -4;\n    float x = float(ioffset + i) * ROOT32;\n    if (i == 0 || i == 8) {\n        float y = float(j) - 2.0;\n        return vec2(x, y);\n    }\n    if (i == 1 || i == 7) {\n        float y = float(j) - 2.5;\n        return vec2(x, y);\n    }\n    if (i == 2 || i == 6) {\n        float y = float(j) - 3.0;\n        return vec2(x, y);\n    }\n    if (i == 3 || i == 5) {\n        float y = float(j) - 3.5;\n        return vec2(x, y);\n    }\n    if (i == 4) {\n        float y = float(j) - 4.0;\n        return vec2(x, y);\n    }\n    \n    return vec2(.0, .0);\n}\n\n\n//int[2] a = [1, 2,];\n\nvoid _pertern(int i, int j, out int[6] o) {\n    //int[6] a;\n    // return 1;\n    int[6] a = int[](1, 1, 1, 1, 1, 1);\n\n    if (i == 0) {\n        if (j == 0) a = int[](0, 0, 0, 0, 0, 0);\n        if (j == 1) a = int[](0, 0, 1, 0, 0, 0);\n        if (j == 2) a = int[](0, 0, 1, 0, 0, 0);\n        if (j == 3) a = int[](0, 0, 1, 0, 0, 0);\n        if (j == 4) a = int[](0, 0, 0, 0, 0, 0);\n    }\n\n    if (i == 1) {\n        if (j == 0) a = int[](0, 0, 0, 1, 0, 0);\n        if (j == 1) a = int[](0, 0, 1, 1, 0, 0);\n        if (j == 2) a = int[](0, 1, 1, 1, 0, 0);\n        if (j == 3) a = int[](0, 1, 1, 1, 0, 0);\n        if (j == 4) a = int[](0, 1, 1, 0, 0, 0);\n        if (j == 5) a = int[](0, 1, 0, 0, 0, 0);\n    }\n    \n    if (i == 2) {\n        if (j == 0) a = int[](0, 0, 0, 1, 0, 0);\n        if (j == 1) a = int[](0, 0, 1, 1, 1, 0);\n        if (j == 5) a = int[](1, 1, 1, 0, 0, 0);\n        if (j == 6) a = int[](0, 1, 0, 0, 0, 0);\n    }\n\n    if (i == 3) {\n        if (j == 0) a = int[](0, 0, 0, 1, 0, 0);\n        if (j == 1) a = int[](0, 0, 1, 1, 1, 0);\n        if (j == 6) a = int[](1, 1, 1, 0, 0, 0);\n        if (j == 7) a = int[](0, 1, 0, 0, 0, 0);\n    }\n\n    if (i == 4) {\n        if (j == 0) a = int[](0, 0, 0, 0, 0, 0);\n        if (j == 1) a = int[](0, 0, 0, 1, 1, 0);\n        if (j == 7) a = int[](1, 1, 0, 0, 0, 0);\n        if (j == 8) a = int[](0, 0, 0, 0, 0, 0);\n    }\n\n    if (i == 5) {\n        if (j == 0) a = int[](0, 0, 0, 0, 1, 0);\n        if (j == 1) a = int[](0, 0, 0, 1, 1, 1);\n        if (j == 6) a = int[](1, 1, 0, 0, 0, 1);\n        if (j == 7) a = int[](1, 0, 0, 0, 0, 0);\n    }\n\n    if (i == 6) {\n        if (j == 0) a = int[](0, 0, 0, 0, 1, 0);\n        if (j == 1) a = int[](0, 0, 0, 1, 1, 1);\n        if (j == 5) a = int[](1, 1, 0, 0, 0, 1);\n        if (j == 6) a = int[](1, 0, 0, 0, 0, 0);\n    }\n\n    if (i == 7) {\n        if (j == 0) a = int[](0, 0, 0, 0, 1, 0);\n        if (j == 1) a = int[](0, 0, 0, 0, 1, 1);\n        if (j == 2) a = int[](1, 0, 0, 0, 1, 1);\n        if (j == 3) a = int[](1, 0, 0, 0, 1, 1);\n        if (j == 4) a = int[](1, 0, 0, 0, 0, 1);\n        if (j == 5) a = int[](1, 0, 0, 0, 0, 0);\n    }\n\n    if (i == 8) {\n        if (j == 0) a = int[](0, 0, 0, 0, 0, 0);\n        if (j == 1) a = int[](0, 0, 0, 0, 0, 1);\n        if (j == 2) a = int[](0, 0, 0, 0, 0, 1);\n        if (j == 3) a = int[](0, 0, 0, 0, 0, 1);\n        if (j == 4) a = int[](0, 0, 0, 0, 0, 0);\n    }\n\n    for (int i = 0; i<6; i++) o[i] = a[i];\n}\n\nvec2 pertern(int i, int j) {\n    if (i == 0) {\n        if (j == 0) return vec2( 0.,  0.);\n        if (j == 1) return vec2(60., 90.);\n        if (j == 2) return vec2(60., 90.);\n        if (j == 3) return vec2(60., 90.);\n        if (j == 4) return vec2( 0.,  0.);\n    }\n\n    if (i == 1) {\n        if (j == 0) return vec2( 60.,  30.);\n        if (j == 1) return vec2(120.,  60.);\n        if (j == 2) return vec2(180.,  90.);\n        if (j == 3) return vec2(180.,  90.);\n        if (j == 4) return vec2(120., 120.);\n        if (j == 5) return vec2( 60., 150.);\n    }\n\n    if (i == 2) {\n        if (j == 0) return vec2( 60.,  30.);\n        if (j == 1) return vec2(180.,  30.);\n        if (j == 5) return vec2(180., 150.);\n        if (j == 6) return vec2( 60., 150.);\n    }\n\n    if (i == 3) {\n        if (j == 0) return vec2( 60.,  30.);\n        if (j == 1) return vec2(180.,  30.);\n        if (j == 6) return vec2(180., 150.);\n        if (j == 7) return vec2( 60., 150.);\n    }\n\n    if (i == 4) {\n        if (j == 0) return vec2(  0.,   0.);\n        if (j == 1) return vec2(120.,   0.);\n        if (j == 7) return vec2(120., 180.);\n        if (j == 8) return vec2(  0.,   0.);\n    }\n\n    if (i == 5) {\n        if (j == 0) return vec2( 60.,  -30.);\n        if (j == 1) return vec2(180.,  -30.);\n        if (j == 6) return vec2(180., -150.);\n        if (j == 7) return vec2( 60., -150.);\n    }\n\n    if (i == 6) {\n        if (j == 0) return vec2( 60.,  -30.);\n        if (j == 1) return vec2(180.,  -30.);\n        if (j == 5) return vec2(180., -150.);\n        if (j == 6) return vec2( 60., -150.);\n    }\n\n    if (i == 7) {\n        if (j == 0) return vec2( 60.,  -30.);\n        if (j == 1) return vec2(120.,  -60.);\n        if (j == 2) return vec2(180.,  -90.);\n        if (j == 3) return vec2(180.,  -90.);\n        if (j == 4) return vec2(120., -120.);\n        if (j == 5) return vec2( 60., -150.);\n    }\n    if (i == 8) {\n        if (j == 0) return vec2( 0.,   0.);\n        if (j == 1) return vec2(60., -90.);\n        if (j == 2) return vec2(60., -90.);\n        if (j == 3) return vec2(60., -90.);\n        if (j == 4) return vec2( 0.,   0.);\n    }\n    return vec2(360.0, 0.0);\n}\n\n\nint imax() {\n    return 9;\n}\n\nint jmax(int i) {\n    if (i == 0) return 5;\n    if (i == 1) return 6;\n    if (i == 2) return 7;\n    if (i == 3) return 8;\n    if (i == 4) return 9;\n    if (i == 5) return 8;\n    if (i == 6) return 7;\n    if (i == 7) return 6;\n    if (i == 8) return 5;\n\n    return 0;\n}\n\nvec3 ijcircle(vec2 uv, float R, float t, int i, int j) {\n    int[6] p;\n    // pertern(i, j, p);\n    vec2 pt = pertern(i, j);\n    float arc = pt.x;\n    float rot = pt.y;\n    return circle(uv, get_pos(i, j), R, t, arc, rot);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 finalColor = vec3(.0);\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    // aspect ratio.\n    uv.x *= iResolution.x / iResolution.y;\n\n    float ratio = (1. / 0.6) - 0.04;\n    float R = 0.0;\n\n    R = ratio * 1.0 / 5.0;\n    for (int i = 0; i < imax(); i++) {\n        for (int j = 0; j < jmax(i); j++) {\n            finalColor += ijcircle(uv, R, 0.0, i, j);\n        }\n    }\n\n\n    R = ratio * 0.6;\n    vec2 pos = vec2(0.0, 0.0);\n    float t = 0.;\n    int i = 4;\n    int j = 4;\n    finalColor += ijcircle(uv, R, t, i, j);\n\n    R += 0.01;\n    finalColor += ijcircle(uv, R, t, i, j);\n\n\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}