{"ver":"0.1","info":{"id":"wsfcDM","date":"1584889645","viewed":2106,"name":"20200323_集中線","username":"FMS_Cat","description":"ババーン\n\nThis shader is Memix Ready!","likes":25,"published":1,"flags":2,"usePreview":0,"tags":["2d","noise","webcam","memix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANIMATE 10.0\n#define INV_ANIMATE_FREQ 0.05\n#define RADIUS 1.3\n#define FREQ 10.0\n#define LENGTH 2.0\n#define SOFTNESS 0.1\n#define WEIRDNESS 0.1\n\n#define ASPECT_AWARE\n\n#define lofi(x,d) (floor((x)/(d))*(d))\n\nfloat hash( vec2 v ) {\n  return fract( sin( dot( v, vec2( 89.44, 19.36 ) ) ) * 22189.22 );\n}\n\nfloat iHash( vec2 v, vec2 r ) {\n  vec4 h = vec4(\n    hash( vec2( floor( v * r + vec2( 0.0, 0.0 ) ) / r ) ),\n    hash( vec2( floor( v * r + vec2( 0.0, 1.0 ) ) / r ) ),\n    hash( vec2( floor( v * r + vec2( 1.0, 0.0 ) ) / r ) ),\n    hash( vec2( floor( v * r + vec2( 1.0, 1.0 ) ) / r ) )\n  );\n  vec2 ip = vec2( smoothstep(\n    vec2( 0.0 ),\n    vec2( 1.0 ),\n    mod( v * r, 1.0 ) )\n  );\n  return mix(\n    mix( h.x, h.y, ip.y ),\n    mix( h.z, h.w, ip.y ),\n    ip.x\n  );\n}\n\nfloat noise( vec2 v ) {\n  float sum = 0.0;\n  for( int i = 1; i < 7; i ++ ) {\n    sum += iHash(\n      v + vec2( i ),\n      vec2( 2.0 * pow( 2.0, float( i ) ) ) ) / pow( 2.0, float( i )\n    );\n  }\n  return sum;\n}\n\n// Memix boilerplate getuv function\nvec2 getuv( in vec2 p ) { return vec2( 0.5+(p.x-0.5)*iResolution.z, 1.0-p.y ); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n#ifdef ASPECT_AWARE\n  vec2 uv = ( fragCoord.xy * 2.0 - iResolution.xy ) / iResolution.xy;\n#else\n  vec2 uv = ( fragCoord.xy * 2.0 - iResolution.xy ) / iResolution.y;\n#endif\n  vec2 puv = vec2(\n    WEIRDNESS * length( uv ) + ANIMATE * lofi( iTime, INV_ANIMATE_FREQ ),\n    FREQ * atan( uv.y, uv.x )\n  );\n  float value = noise( puv );\n  value = length( uv ) - RADIUS - LENGTH * ( value - 0.5 );\n  value = smoothstep( -SOFTNESS, SOFTNESS, value );\n\n  vec4 tex = texture( iChannel0, getuv( fragCoord.xy / iResolution.xy ) );\n  vec3 color = mix( tex.xyz, vec3( 1.0 ), value );\n  fragColor = vec4( color, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}