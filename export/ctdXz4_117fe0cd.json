{"ver":"0.1","info":{"id":"ctdXz4","date":"1685098456","viewed":73,"name":"My Perlin Noise Sphere Animation","username":"CEDipEngineering","description":"Moving Sphere with Perlin Noise added to make it more interesting.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","noise","randomness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n Adapted from iquillez's Ray Traced Sphere example\n https://www.shadertoy.com/view/4d2XWV\n*/\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph, in float k )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    \n    // cheap but not plausible alternative\n    return (b>0.0) ? step(-0.0001,c) : smoothstep( 0.0, 1.0, h*k/b );  \n}    \n            \nfloat sphOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )\n{\n    vec3  r = sph.xyz - pos;\n    float l = length(r);\n    return dot(nor,r)*(sph.w*sph.w)/(l*l*l);\n}\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\n//=====================================================\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (-1.0 - ro.y)/rd.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) / iResolution.y;\n    \n\tvec3 ro = vec3(0.0, 0.0, 4.0 );\n\tvec3 rd = normalize( vec3(p,-2.0) );\n\t\n    // sphere animation\n    vec4 sph = vec4( cos( iTime*0.45 + vec3(3.0,1.0,1.0) + 0.0 )*vec3(1.5,0.0,1.5), 1.0 );\n    \n    vec3 lig = normalize( vec3(0.6,0.3,0.4) );\n    vec3 col = vec3(0.0);\n\n    float tmin = 1e10;\n    vec3 nor;\n    float occ = 0.8;\n    \n    // Plane (Ground)\n    float t1 = iPlane( ro, rd );\n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + t1*rd;\n        nor = vec3(0.0,1.0,0.0);\n        occ = 1.0-sphOcclusion( pos, nor, sph );\n        col = vec3(1.);\n    }\n    vec3 normalNoiseScale = vec3(21.7321, 15.0337, 27.21732);\n    vec3 normalNoiseOffset = vec3(5001.7321, 205.0337, 3070.21732);\n\n    vec3 colorNoiseScale = vec3(14.103612922881525, 42.7139063129807, 8.180898474572507);\n    vec3 colorNoiseOffset = vec3(3681.8750901237386, 7338.2230155419375, 9488.409365316547);\n\n    vec3 colorNoiseScale2 = vec3(15.0337, 22.711562371633486, 42.7139063129807);\n    vec3 colorNoiseOffset2 = vec3(2491.012603426959, 7064.540742481757, 8819.367259770554);\n    \n    \n    // Sphere\n    float t2 = sphIntersect( ro, rd, sph );\n    if( t2>0.0 && t2<tmin )\n    {\n        tmin = t2;\n        vec3 pos = ro + t2*rd;\n        nor = sphNormal( pos, sph );\n        //nor += vec3(PerliNoise3D(pos*normalNoiseScale+normalNoiseOffset));\n        //nor -= (1.0/350.0) * vec3(PerliNoise3D(pos+normalNoiseOffset*(1.0/10.0)));\n        occ = 0.5 + 0.5*nor.y;\n        col = vec3(0., 0.2, 1.);\n        col += (1./3.) * vec3(PerliNoise3D(pos*colorNoiseScale+colorNoiseOffset))   * vec3(0.01, 0.3, 1.0); // green weaker noise;\n        col += (1./9.) * vec3(PerliNoise3D(pos*colorNoiseScale2+colorNoiseOffset2)) * vec3(0.01, 1.0, 0.5); // green weaker noise\n        col -= vec3(1.0, 0.1, 0.0); // Remove red and some green\n        col = clamp(col, 0., 1.);\n\t}\n\n    if( tmin<1500.0 )\n    {\n        vec3 pos = ro + tmin*rd;\n        \n        col *= 0.9*clamp( dot(nor,lig), 0.0, 1.0 );\n        col *= sphSoftShadow( pos, lig, sph, 2.0 );\n        col += 0.05*occ;\n\t    col *= exp( -0.05*tmin );\n    }\n\n    col = sqrt(col);\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Taken from user hzh98\n// https://www.shadertoy.com/view/NlKBzm\n\n#define HASH_LUT_SIZE 256\n#define inc(x) (x+1)%HASH_LUT_SIZE\n\nconst float kMagic  = 3571.32541;\n\n// Hash lookup table as defined by Ken Perlin.\n// This is a randomly arranged array of all numbers from 0-255 inclusive.\nconst int kHashLUT[] = int[HASH_LUT_SIZE](151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180); \nconst int p[2*HASH_LUT_SIZE] = int[2*HASH_LUT_SIZE](151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180); \n\nfloat FadeSmooth(float x) {\n    float t = clamp(x, 0.0, 1.0);\n    float t_2 = t * t;\n    float res = t_2 * t * (6.0*t_2 - 15.0*t + 10.0);\n    return res;\n}\n\n// pick a random vector\nfloat Grad(int hash, float x, float y, float z) {\n    int h = hash & 15;                                    \n    float u = h < 8 /* 0b1000 */ ? x : y;                \n    \n    float v;                                             \n    \n    if(h < 4 /* 0b0100 */)                               \n        v = y;\n    else if(h == 12 /* 0b1100 */ || h == 14 /* 0b1110*/) \n        v = x;\n    else                                                 \n        v = z;\n    \n    return ((h&1) == 0 ? u : -u)+((h&2) == 0 ? v : -v); \n}\n\nfloat PerliNoise3D(float x, float y, float z) {\n    float repeat = 0.0;\n    if(repeat > 0.0) {\n        x = mod(x, repeat);\n        y = mod(y, repeat);\n        z = mod(z, repeat);\n    }\n    \n    int xi = int(x) & 255;                           \n    int yi = int(y) & 255;                              \n    int zi = int(z) & 255;                           \n    float xf = fract(x);\n    float yf = fract(y);\n    float zf = fract(z);\n    \n    float u = FadeSmooth(xf);\n    float v = FadeSmooth(yf);\n    float w = FadeSmooth(zf);\n    \n    int aaa, aba, aab, abb, baa, bba, bab, bbb;\n    aaa = p[p[p[    xi ]+    yi ]+    zi ];\n    aba = p[p[p[    xi ]+inc(yi)]+    zi ];\n    aab = p[p[p[    xi ]+    yi ]+inc(zi)];\n    abb = p[p[p[    xi ]+inc(yi)]+inc(zi)];\n    baa = p[p[p[inc(xi)]+    yi ]+    zi ];\n    bba = p[p[p[inc(xi)]+inc(yi)]+    zi ];\n    bab = p[p[p[inc(xi)]+    yi ]+inc(zi)];\n    bbb = p[p[p[inc(xi)]+inc(yi)]+inc(zi)];\n   \n    float x1, x2, y1, y2;\n    x1 = mix(Grad(aaa, xf, yf, zf), Grad(baa, xf-1.0, yf, zf), u);                                     \n    x2 = mix(Grad(aba, xf, yf-1.0, zf), Grad(bba, xf-1.0, yf-1.0, zf), u);\n    y1 = mix(x1, x2, v);\n\n    x1 = mix(Grad(aab, xf, yf, zf-1.0), Grad(bab, xf-1.0, yf, zf-1.0), u);\n    x2 = mix(Grad(abb, xf, yf-1.0, zf-1.0), Grad(bbb, xf-1.0, yf-1.0, zf-1.0), u);\n    y2 = mix (x1, x2, v);\n    \n    return (mix(y1, y2, w)+1.0)/2.0; \n}\n\nfloat PerliNoise3D(vec3 pos) {\n    return PerliNoise3D(pos.x, pos.y, pos.z);\n}\n","name":"Common","description":"","type":"common"}]}