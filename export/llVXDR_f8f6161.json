{"ver":"0.1","info":{"id":"llVXDR","date":"1483988340","viewed":276,"name":"Telephone sound","username":"gigatron","description":"Amiga module telephone ... \nSo ... Ã§a suffit maintenant !!! a plus tard :)\nfreq table correction !","likes":8,"published":1,"flags":8,"usePreview":0,"tags":["sound","amiga","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t mod(iTime,11.0)\n#define t2 iTime\n\n#define lf 30.0 // bold fct\n\nvec4 l( in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    float d = length( pa - ba*h );\n    vec4 c = vec4(0.9,0.95,0.9,1.0);\n    \n    \n    return smoothstep(lf/iResolution.y, 0., d ) * c;\n}\n \n\nmat4 setRotation( float x, float y, float z )\n{\n    float a = sin(x); float b = cos(x); \n    float c = sin(y); float d = cos(y); \n    float e = sin(z); float f = cos(z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 0.0,      0.0,      0.0, 1.0 );\n}\n\nmat4 RotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 setTranslation( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,     y,   z, 1.0 );\n}\n\nstruct Triangle\n{\n    vec3 a; vec2 aUV;\n    vec3 b; vec2 bUV;\n    vec3 c; vec2 cUV;\n    vec3 n;\n};\n\n\nTriangle triangles[4];\n\nvoid createCube( void )\n{\n    vec3 verts[8];\n\n    verts[0] = vec3( -1.0, -1.0, -0.0 );\n    verts[1] = vec3( -1.0, -1.0,  0.0 );\n    verts[2] = vec3( -1.0,  1.0, -0.0 );\n    verts[3] = vec3( -1.0,  1.0,  0.0 );\n    verts[4] = vec3(  1.0, -1.0, -0.0 );\n    verts[5] = vec3(  1.0, -1.0,  0.0 );\n    verts[6] = vec3(  1.0,  1.0, -0.0 );\n    verts[7] = vec3(  1.0,  1.0,  0.0 );\n\n    triangles[0].a = verts[1]; triangles[0].aUV = vec2(0.0,0.0);\n    triangles[0].b = verts[5]; triangles[0].bUV = vec2(1.0,0.0);\n    triangles[0].c = verts[7]; triangles[0].cUV = vec2(1.0,1.0);\n    triangles[0].n = vec3( 0.0, 0.0, 0.0 );\n    triangles[1].a = verts[1]; triangles[1].aUV = vec2(0.0,0.0),\n    triangles[1].b = verts[7]; triangles[1].bUV = vec2(1.0,1.0),\n    triangles[1].c = verts[3]; triangles[1].cUV = vec2(0.0,1.0),\n    triangles[1].n = vec3( 0.0, 0.0, 0.0 );\n\n    triangles[2].a = verts[5]; triangles[2].aUV = vec2(0.0,0.0);\n    triangles[2].b = verts[4]; triangles[2].bUV = vec2(1.0,0.0);\n    triangles[2].c = verts[6]; triangles[2].cUV = vec2(1.0,1.0);\n    triangles[2].n = vec3( 0.0, 0.0, 0.0 );\n    triangles[3].a = verts[5]; triangles[3].aUV = vec2(0.0,0.0);\n    triangles[3].b = verts[6]; triangles[3].bUV = vec2(1.0,1.0);\n    triangles[3].c = verts[7]; triangles[3].cUV = vec2(0.0,1.0);\n    triangles[3].n = vec3( 0.0, 0.0, 0.0 );\n\n     \n}\n\nfloat cross2d( vec2 a, vec2 b )\n{\n    return a.x*b.y - a.y*b.x;\n}\n\nvec3 pixelShader( in vec3 nor, in vec2 p, in float z, in vec3 wnor )\n{\n    vec4 cl = vec4(0);\n   // p *= 2.0;\n   // p.y = p.y-0.5;\n    // set vector points over own texture ;\n    cl += l(p,vec2(-1.2,-.5), vec2(-1.2,0.5));\n    cl += l(p,vec2(2.1,-.5),  vec2(2.1,0.5));\n \n    cl += l(p,vec2(-1.18,0.5),vec2(2.08,00.5));\n    cl += l(p,vec2(-1.18,-.5),vec2(2.08,-.5));\n    \n    \n    return vec3(cl.xyz);\n}\n    \n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n        \nmat4 mdv = setTranslation( 0.0, 0.8, -40.0+min(t*8.,24.0)*1.4) * \n\t\t       setRotation( 0.,0. , 0. )*   setRotation( t*0.0,min( -t*(20.-t2),0.0) , 0. )*\n               RotationAxisAngle(vec3(0.0,0.0,0.0), 0.0 );\n \n    vec2 px = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n       \n  //  vec2 uv = fragCoord / iResolution.xy;\n    \n  //  vec3 tx=texture(iChannel0,uv).xyz;\n    \n    createCube();\n\t \n    float scl = mod(fragCoord.y ,2.0);\n    \n    vec3 color = vec3( 0.0, 0.0, 0.0 );\n\n    // clear zbuffer\n    float mindist = -1000000.0;\n\n    \n        // transform to eye space\n        vec3 ep0 = (mdv * vec4(triangles[1].a,1.0)).xyz;\n        vec3 ep1 = (mdv * vec4(triangles[1].b,1.0)).xyz;\n        vec3 ep2 = (mdv * vec4(triangles[1].c,1.0)).xyz;\n        vec3 nor = (mdv * vec4(triangles[1].n,0.0)).xyz;\n\n        // transform to clip space\n        float w0 = 1.0/ep0.z;\n        float w1 = 1.0/ep1.z;\n        float w2 = 1.0/ep2.z;\n\n        vec2 cp0 = 2.0*ep0.xy * -w0;\n        vec2 cp1 = 2.0*ep1.xy * -w1;\n        vec2 cp2 = 2.0*ep2.xy * -w2;\n\n        // fetch vertex attributes, and divide by z\n        vec2 u0 = triangles[1].aUV * w0;\n        vec2 u1 = triangles[1].bUV * w1;\n        vec2 u2 = triangles[1].cUV * w2;\n\n        // calculate areas for subtriangles\n        vec3 di = vec3( cross2d( cp1 - cp0, px - cp0 ), \n\t\t\t\t\t    cross2d( cp2 - cp1, px - cp1 ), \n\t\t\t\t\t    cross2d( cp0 - cp2, px - cp2 ) );\n\t\t\n        // if all positive, point is inside triangle\n        if( all(greaterThan(di,vec3(-15.0))) )\n        {\n            // calc barycentric coordinates\n            vec3 ba = di.yzx / (di.x+di.y+di.z);\n\n            // barycentric interpolation of attributes and 1/z\n            float iz = ba.x*w0 + ba.y*w1 + ba.z*w2;\n            vec2  uv = ba.x*u0 + ba.y*u1 + ba.z*u2;\n\n            // recover interpolated attributes\n            float z = 1.0/iz;\n             uv *= z;\n \n\n\t\t\t\t// perform lighting/shading\n\t\t\t\tcolor = pixelShader( nor, uv, z, triangles[1].n );\n\t  \n    }\n\n    fragColor = vec4(color,1.0)*scl;\n     \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"// some functions taken Around ST ;\n\n#define C2   65.4 \n#define C2b  69.3\n#define D2   73.4\n#define D2b  77.8\n#define E2   82.4\n#define F2   87.3\n#define F2b  92.5\n#define G2   98.0\n#define G2b 103.8\n#define A2  110.0\n#define A2b 116.5\n#define B2  123.5\n\n#define C3   130.8\n#define C3b  138.6\n#define D3   146.8\n#define D3b  155.6\n#define E3   164.8\n#define F3   174.6\n#define F3b  185.0\n#define G3   196.0\n#define G3b  207.7\n#define A3   220.0\n#define A3b  233.1\n#define B3   246.9\n\n#define C4   261.6\n#define C4b  277.2\n#define D4   293.7\n#define D4b  311.1\n#define E4   329.6\n#define F4   349.2\n#define F4b  370.0\n#define G4   392.0\n#define G4b  415.3\n#define A4   440.0\n#define A4b  466.2\n#define B4   493.9\n\n#define  C5  523.3\n#define  C5b 554.4\n#define  D5  587.3\n#define  D5b 622.3\n#define  E5  659.3    \n#define  F5  698.5\n#define  F5b 740.0    \n#define  G5  784.0\n#define  G5b 830.6\n#define  A5  880.0\n#define  A5b 923.3\n#define  B5  987.8\n\n#define  C6  1046.5\n#define  C6b 1108.7\n#define  D6  1174.7\n#define  D6b 1244.5\n#define  E6  1318.5    \n#define  F6  1396.9\n#define  F6b 1480.0    \n#define  G6  1568.0\n#define  G6b 1661.2\n#define  A6  1760.0\n#define  A6b 1864.7\n#define  B6  1975.5   \n    \n    \n    \n#define XX  000.0  // blank \n\n#define PI 3.1415926\n// Master speed \n#define m_speed 1.04\n\n\n//----------------------------------------------------------------------------------------\n// instruments\n\nfloat monobass(float hz,float time)\n{\n    \n     float fade =2.0 ;\n     float y=0.0;\n     y = sin(01.2*hz*time*1.6)/0.01*sin(1.2*hz*time*1.6)*exp(-fade*time); \n     \n    return   y; \n    \n}\n\nfloat bass( float hz, float time )\n{\n      \n     float y=0.0;\n     float fade = 10.0;\n     y += 0.9*(-1.0+30.0*fract(0.30*hz*time)) * exp( -fade*time) ;\n     return 2.*y;\t\n}\n\n\nfloat harp(float hz, float time) {\n    float fade = 8.0;\n    return ( 2.0*cos(6.2831*hz*time) / 0.03*sin(2.0*6.2831*hz*time) * 0.1*sin(2.0*6.2831*hz*time) )*exp(-fade*time);\n}\n\nfloat synth1(float hz, float time) {\n    float fade = 8.0;\n    return pow(2.0, 6.28*sin(3.*PI*hz*time*0.8)-fade*time);\n}\n\nfloat synth2(float hz,float time) {\n    float fade = 7.0;\n    return 2.*sin(8.*hz+time)*exp(-fade*time);\n}\n\n\nfloat string(float hz, float time) {\n    float fade = 1.0;\n    return (-8.0+ 20.0*sin(2.2831*hz*time) - 0.8*sin(0.5*8.2831*hz*time)   )*exp(-fade*time);\n}\n\n \nfloat Square(float x, float threshold)\n{\n    return fract(x) > threshold ? 1.0 : -1.0;\n}\n\nfloat Square2(float hz, float time)\n{\n    float fade = 2.0;\n    return fract(3.28*sin(0.8*PI*hz*time*0.8))-fade*time;\n}\n\n\n\n\n\n// 4 track / pattern !\n// melody \n#define P(x) song += synth1(x, max(time - float(step)/speed,0.0)); step++;\n// string here later ! \n#define S(x) song += monobass(x, max(time - float(step)/speed,0.0)); step++;\n// bass\n#define B(x) song += bass(x, max(time - float(step)/speed,0.0)); step++;\n\nfloat melody( float soundTime );\nfloat string( float soundTime );\nfloat bass( float soundTime );\n\n\n\n\nvec2 mainSound( in int samp, float time )\n{\t\n    time = mod( time, 19.0/m_speed );\n    \n    vec2 y = vec2(0.0);\n     y += vec2(0.1,0.1)*melody( time*m_speed );\n    \n     y += vec2(0.1,0.1)*string( time*m_speed );\n     y += vec2(0.1,0.1)*bass  ( time*m_speed );\n \n\t y *= 0.04;// prevent saturation :\n    \n\treturn y;\n}\n\n\nfloat melody( float time )\n{\n    float speed = 7.0;\n    float song = 0.0;\n    int step = 0;\n\n    // All protracker pattern must be filled .. include blank (silence)\n    // pattern 1 telephone note melody\n     P(F5b) P(D5) P(B4) P(D5) P(F5b) P(D5)  P(B4) P(F5b) P(G5) P(F5b)P(B4)\n     P(F5b) P(B4) P(A5) P(B4) P(E5)  P(F5b) P(D5) P(B4)  P(D5)\n     P(F5b) P(D5) P(B4) P(D5) P(G5)  P(F5b) P(B4) P(F5b) P(B4) P(A5)\n     P(B4)  P(D5) P(A4) P(E5) P(C5b) P(D5)  P(A4) P(E5)  P(D5) P(C5b) \n     P(E5) \n     P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)   \n     P(A4) P(E5) P(C5b) P(D5) P(A4) P(E5) P(D5) P(C5b) P(E5)\n     \n     // pattern 2 telephone note melody\n     P(F5b) P(D5) P(B4) P(D5) P(F5b) P(D5)  P(B4) P(F5b) P(G5) P(F5b)P(B4)\n     P(F5b) P(B4) P(A5) P(B4) P(E5)  P(F5b) P(D5) P(B4)  P(D5)\n     P(F5b) P(D5) P(B4) P(D5) P(G5)  P(F5b) P(B4) P(F5b) P(B4) P(A5)\n     P(B4)  P(D5) P(A4) P(E5) P(C5b) P(D5)  P(A4) P(E5)  P(D5) P(C5b) \n     P(E5) \n     P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)   \n     P(A4) P(E5) P(C5b) P(D5) P(A4) P(E5) P(D5) P(C5b) P(E5)    \n\n    \n  return song;\n}\n\nfloat string( float time )\n{\n    float speed = 7.0;\n    float song = 0.0;\n    int step = 0;\n    // string pattern 1\n    S(B5)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)    \n    S(F5b)\n    P(XX)P(XX)P(XX)\n    S(B5)    \n    P(XX)P(XX)P(XX)    \n    S(C6b)\n    P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    S(A5)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX) \n    S(C6b)\n    P(XX)P(XX)P(XX)\n        \n    // string pattern 2\n    S(D6)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)    \n    P(XX)\n    P(XX)P(XX)P(XX)\n    P(XX)    \n    P(XX)P(XX)P(XX)    \n    S(C6b)\n    P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)P(XX)\n    S(E6)\n    P(XX)P(XX)P(XX)\n    S(F6b)    \n    P(XX) \n    S(E6)\n    P(XX)P(XX)P(XX)       \n    S(A6)    \n    P(XX)P(XX)P(XX)P(XX)P(XX)    \n    \n  return song;\n}\n\nfloat bass( float time )\n{\n    float speed = 7.0;\n    float song = 0.0;\n    int step = 0;\n    // bass pattern  1.. \n    B(B3)B(B4)B(B4)B(B3)B(B4)B(B3)B(B3)B(B3)B(B4)\n    B(B3)B(B3) B(B4) B(B3)B(B3)B(B3)B(B3)B(B3)\n    B(B4)B(B4)B(B3)B(B4) B(B3)B(B3)B(B3) B(B4)\n    B(B3)B(B3) B(B4) B(B3)B(B3)B(B3)B(B3) \n        \n    B(F3b) B(F4b) B(F4b) B(F3b) B(F4b) B(F3b) B(F3b)B(F3b) \n    B(F4b) B(F3b)B(F3b)  B(F4b) B(F3b)B(F3b)B(F3b)B(F3b)\n   \n    B(A3) B(A4) B(A4) B(A3) B(A4)   B(A3)B(A3)B(A3)B(A4)\n    B(A3)B(A3)B(A4)B(A3)B(A3)B(A3)B(A3) \n        \n    // bass pattern  2.. \n    B(B3)B(B4)B(B4)B(B3)B(B4)B(B3)B(B3)B(B3)B(B4)\n    B(B3)B(B3) B(B4) B(B3)B(B3)B(B3)B(B3)B(B3)\n    B(B4)B(B4)B(B3)B(B4) B(B3)B(B3)B(B3) B(B4)\n    B(B3)B(B3) B(B4) B(B3)B(B3)B(B3)B(B3) \n        \n    B(F3b) B(F4b) B(F4b) B(F3b) B(F4b) B(F3b) B(F3b)B(F3b) \n    B(F4b) B(F3b)B(F3b)  B(F4b) B(F3b)B(F3b)B(F3b)B(F3b)\n   \n    B(A3) B(A4) B(A4) B(A3) B(A4)   B(A3)B(A3)B(A3)B(A4)\n    B(A3)B(A3)B(A4)B(A3)B(A3)B(A3)B(A3)     \n        \n        \n  return song;\n}\n","name":"Sound","description":"","type":"sound"}]}