{"ver":"0.1","info":{"id":"wdXBDS","date":"1589122083","viewed":445,"name":"drawing a line","username":"acutmore","description":"making my first shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["firstshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdLine(in vec2 p,in vec2 a,in vec2 b)\n{\n    /// Project p onto the line ab, then return the distance from p` to p\n    \n\t// Use a as 'origin'\n    vec2 origin = a;    \n    vec2 p2 = p-origin;\n    vec2 b2 = b-origin;\n\n    // Compute the dot product of vectors and divide to get the ratio\n\tfloat lineRatio = dot(p2, b2)/dot(b2, b2);\n\n    // Clamp the ratio between 0.0 and 1.0\n    lineRatio = clamp(lineRatio, 0., 1.);\n\n    // Nearest point on AB\n    vec2 pointOnLine = b2*lineRatio;\n\n    // Return distance from line to point\n    return length(p2 - pointOnLine);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Scaled pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\t// Start and end of line\n    vec2 a = vec2(0.2, 0.4);\t\n    vec2 b = vec2(0.8, 0.6);\n        \n    // Compute the distance from the pixel to the the line ab:\n    float dist = sdLine(uv, a, b);\n    \n\t// Increase brightness where distance is less that 0.02\n    vec3 col = vec3(1. - step(0.02, dist));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}