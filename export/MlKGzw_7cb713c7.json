{"ver":"0.1","info":{"id":"MlKGzw","date":"1473926705","viewed":101,"name":"simple mandelbrot","username":"mj","description":"simple mandelbrot fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 20\n#define COLOR1 vec4(1.0, 0.0, 1.0, 1.0)\n#define COLOR2 vec4(0.0, 1.0, 0.0, 1.0)\n#define BOUNDARY 2.5\n\nfloat calc_mag(float r, float i)\n{\n    return sqrt(r * r + i * i);\n}\n\nfloat calc_pixel(float r, float i)\n{\n    float z_r = 0.0;\n    float z_i = 0.0;\n    \n    for(int it = 0; it < ITERATIONS; ++it)\n    {\n        float z_r2 = z_r * z_r - z_i * z_i;\n        float z_i2 = 2.0 * z_r * z_i;\n        \n        z_r = z_r2 + r;\n        z_i = z_i2 + i;\n        \n        float mag = calc_mag(z_r, z_i);\n        if(mag > BOUNDARY)\n        {\n            return float(it) / float(ITERATIONS - 1);\n        }\n    }\n\n    return 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.7, 0.5);\n    uv *= vec2(3.5, 2.5);\n\n    float result = calc_pixel(uv.x, uv.y);\n    fragColor = mix(COLOR1 , COLOR2, result);\n}\n","name":"Image","description":"","type":"image"}]}