{"ver":"0.1","info":{"id":"mltBDB","date":"1701567200","viewed":25,"name":"Mandelbrot Set Shader","username":"ZeroreZ","description":"Just a Mandelbrot Set with a gamma correction","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["glsl","mandelbrotset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Created by ZeroreZ\n//Mandelbrot Set\nuniform float time;\nconst float MAX_ITER = 120.;\n\nfloat mandebrot(vec2 uv) //Function Zn+1=Zn^2+c\n{   //Getting complex numbers z and c\n    vec2 c = 2.* uv - vec2(0.7,0.); //making fractal fit in screen resolution\n    vec2 z = vec2(0.,0.);\n    float iter = 0.;\n    \n    for(float i; i < MAX_ITER; i++) //Checking if dot product of z is > than 4 untill iter =  128\n    {\n        z = vec2(z.x*z.x - z.y*z.y,\n        2.*z.x*z.y) + c;\n        \n        if(dot(z, z) > 4.)\n        {\n            return iter / MAX_ITER;\n        }\n        iter++;\n    }\n    return 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) \n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    float m = mandebrot(uv);\n    col.xyz += m; //Just adding m to color on x, y and z axis for visualization\n    col = pow(col, vec3(0.45)); //Gamma correction\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}