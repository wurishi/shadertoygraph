{"ver":"0.1","info":{"id":"DlSGWV","date":"1673897298","viewed":68,"name":"Cloudy value noise","username":"ianertson","description":"Some cloudy value noise","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","clouds","random","cloudy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HASH_LEN 64\nint HASH[HASH_LEN] = int[HASH_LEN](\n  5, 24, 19, 8, 9, 35, 52, 62, 9, 47, 11, 50, 60, 38, 37, 46, 60, 19, 63, 30,\n  38, 45, 41, 34, 47, 10, 40, 12, 17, 3, 34, 49, 28, 62, 52, 34, 15, 47, 39, 37,\n  45, 35, 62, 59, 20, 19, 1, 51, 53, 29, 1, 31, 13, 50, 12, 43, 55, 43, 53, 3,\n  53, 10, 61, 44\n);\nfloat cantor(float k1, float k2) { return ((k1 + k2) * (k1 + k2 + 1.0)) / 2.0 + k2; }\nvec2 decant(float c) {\n  float w = floor((sqrt(c * 8. + 1.) - 1.) / 2.);\n  float y = float(c - (w * (w + 1.)) / 2.);\n  return vec2(float(w - y), y);\n}\nfloat idx(vec2 uv, float r) { return uv.x * r + uv.y; }\nfloat H(float i) { return float(HASH[int(i) % HASH_LEN]) / 1.6; }\n\nfloat rand(vec2 uv, float seed) {\n    seed = max(seed, 0.5);\n    vec2 sv = decant(max(2., seed*1.0+length(uv)));\n    uv *= (0.33+sv);\n    return fract(cos(H(idx(uv, float(HASH_LEN)))) *\n        dot(uv, vec2(H(uv.x*float(HASH_LEN)),H(uv.y*float(HASH_LEN)))));\n}\n\nfloat noise0(vec2 uv, float seed) {\n    vec2 id = floor(uv);\n    vec2 lv = smoothstep(0.0, 1.0, fract(uv));\n    float a = rand(id, seed);\n    float b = rand(id+vec2(1.0, 0.0), seed);\n    float ab = mix(a, b, lv.x);\n    float c = rand(id+vec2(0.0, 1.0), seed);\n    float d = rand(id+vec2(1.0, 1.0), seed);\n    float cd = mix(c, d, lv.x);\n    return mix(ab, cd, lv.y);\n}\n\nfloat noise(vec2 uv, float seed, float depth) {\n    depth = max(depth, 1.);\n    uv += float(HASH_LEN);\n\n    float n = 0.0;\n    for (float i = 0.0; i < depth; i+=1.) {\n        n += noise0(uv, seed);\n        float s = (0.1+(i/depth))*1.6;\n        uv = (uv*1.3)+vec2(cos(s*uv.y), sin(s*uv.x));\n        uv += vec2(sin(n*1.6), cos(n*1.6));\n    }\n    \n    return fract(n/depth);\n}\n\nfloat noise2(vec2 uv, float seed, float depth, float freq) {\n    depth = max(1.0, depth*noise(uv*freq, seed, depth/2.0));\n    return noise((uv*(0.33+freq)), seed, depth);\n}\n\nfloat noise3(vec2 uv, float seed, float depth, float freq) {\n    float n = 0.0;\n    float d = max(1.0, depth);\n    for (float i = 0.0; i < depth; i+=1.) {\n        n += noise2(uv, seed, d, freq);\n        uv += vec2(cos(n*1.6+freq), sin(n*1.6+freq));\n        d *= (0.1+fract(n*1.6));\n        \n    }\n    return fract(n/depth);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fc )\n{\n\n    vec2 uv = fc/iResolution.xy;\n    vec3 col = vec3(0.0);\n    \n    uv += iMouse.z > 0.001 ? (4.0*(iMouse.xy/iResolution.xy)) : vec2(cos(iTime*0.2), sin(iTime*0.2));\n    \n    float depth = 4.0;\n    float freq = 0.09;\n    float seed = 1.215;\n    \n    depth += (0.5+(0.5*cos(iTime*0.9)))*0.9;\n    freq += (0.5+(0.5*sin(iTime*0.9)))*0.1;\n   // seed += (0.5+(0.5*cos(iTime*0.01)))*0.5;\n    \n    col = vec3(noise3(uv*64.0, seed, depth, freq));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}