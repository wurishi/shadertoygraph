{"ver":"0.1","info":{"id":"3ldfDl","date":"1613680512","viewed":171,"name":"Chroma-Key","username":"tomorrowevening","description":"Basic chroma-keying","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["chroma","key"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 greenBG = vec3(17.0/255.0, 152.0/255.0, 35.0/255.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    // Chroma-Key video\n    vec3 img = texture(iChannel0, uv).rgb;\n    float alpha = ChromaKey(img, greenBG);\n    \n    // Combine layers\n    col = mix(col, img, 1.0 - alpha);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Chroma Key\n\nvec3 rgb2hsv(vec3 rgb) {\n    float Cmax = max(rgb.r, max(rgb.g, rgb.b));\n    float Cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = Cmax - Cmin;\n    vec3 hsv = vec3(0., 0., Cmax);\n\n    if(Cmax > Cmin) {\n        hsv.y = delta / Cmax;\n\n        if(rgb.r == Cmax) {\n            hsv.x = (rgb.g - rgb.b) / delta;\n        } else {\n            if (rgb.g == Cmax) {\n                hsv.x = 2. + (rgb.b - rgb.r) / delta;\n            } else {\n                hsv.x = 4. + (rgb.r - rgb.g) / delta;\n            }\n        }\n        hsv.x = fract(hsv.x / 6.);\n    }\n    \n    return hsv;\n}\n\nfloat ChromaKey(vec3 color, vec3 backgroundColor) {\n    vec3 weights = vec3(4., 1., 2.);\n    vec3 hsv = rgb2hsv(color);\n    vec3 target = rgb2hsv(backgroundColor);\n    float dist = length(weights * (target - hsv));\n    return 1. - clamp(3. * dist - 1.5, 0., 1.);\n}\n","name":"Common","description":"","type":"common"}]}