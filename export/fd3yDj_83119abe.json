{"ver":"0.1","info":{"id":"fd3yDj","date":"1654019043","viewed":19,"name":"Learning stuff idk lol :)","username":"HopelessDev","description":"matrix test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["matrix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 matrix() {\n   vec3 m1 = vec3(-1,0,1);\n   vec3 m2 = vec3(0,1,-1);\n   vec3 m3 = vec3(1,-1,0);\n   return mat3(m1,m2,m3);\n}\n\nmat2 rotate(float a) {\n    float s = sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n//float sphereIntersection(vec3 pos, vec3 sphere, vec3 direction) {\n    //vec3 spherepos = pos-sphere;\n    //float idk = dot(spherepos,direction);\n    //float idk2 = dot(spherepos,spherepos);\n    //float h = idk*idk-idk2;\n    //if(h<0.0) return 0.0;\n    //return -idk - sqrt(h);\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float g = 5.0*uv.x-9.0*uv.y+(uv.x/3.0)-5.0*uv.x*uv.y*uv.x*sin(iTime+9.0*uv.x+(uv.t*9.0)/3.0);\n    const float f = 0.2;\n    float k = f-5.0*uv.x+(8.0/g)*(g*0.001);\n    vec3 pos = vec3(g,k,f);\n    vec3 newpos = matrix()*pos;\n    newpos.x *= 0.5;\n    newpos.xy *= 0.2;\n    vec3 sphere = vec3(0.,0.,20.);\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, rotate(iTime)*newpos.xy).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}