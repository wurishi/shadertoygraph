{"ver":"0.1","info":{"id":"msjfWm","date":"1689800374","viewed":60,"name":"Rotating xor","username":"GBA","description":"Testing xor","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["xor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nvec2 rotate(vec2 p, float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return vec2(c * p.x + s * p.y, -s * p.x + c * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c = iResolution.xy * sin(0.125 * iTime);\n    vec2 p = (fragCoord - 0.5 * iResolution.xy + c);\n    float l = floor(length(p)/80.);\n    ivec2 p1 = ivec2(rotate(p, sin(2.5 * l - iTime)));\n    ivec2 p2 = ivec2(rotate(p, -sin(20. * l + iTime)));\n    float xor = float(p1.x ^ p1.y);\n    float xor2 = float(p2.x ^ p2.y);\n    float lp = length((p - c)/iResolution.xy);\n    vec3 col = 1.0/(1.0 + 4.0 * lp * lp) * vec3(0.0, 0.5 + 0.25 * sin(xor) + 0.25 * sin(xor2), 0.0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}