{"ver":"0.1","info":{"id":"wllSRf","date":"1566569754","viewed":279,"name":"Graffiti Illusion (Lightcyber)","username":"nr4","description":"Graffiti experiment scene from 64k-Intro \"Lightcyber\" by Team210, 2nd at Evoke 2019\nhttps://www.pouet.net/prod.php?which=82625","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["demoscene","graffiti"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Lightcyber - 64k Intro by Team210 at Evoke 2k19\n * Copyright (C) 2019 Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float fsaa = 64.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float bound = sqrt(fsaa)-1.;\n   \tfor(float i = -.5*bound; i<=.5*bound; i+=1.)\n        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n        {\n     \t\tcol += texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*mix(3.,20.,2.*abs(fragCoord.y/iResolution.y-.5))*exp(-abs(1.e-2*length(fragCoord.xy)/iResolution.y-.5))/max(bound, 1.)/iResolution.xy).xyz;\n        }\n    col /= fsaa;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Lightcyber - 64k Intro by Team210 at Evoke 2k19\n * Copyright (C) 2019 Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n// Global constants\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.0, 0.0, -1.0);\nfloat a = 1.0;\n\nfloat iScale, nbeats;\n\nvoid rand(in vec2 x, out float n)\n{\n    x += 400.;\n    n = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n}\n\nvoid lfnoise(in vec2 t, out float n)\n{\n    vec2 i = floor(t);\n    t = fract(t);\n    t = smoothstep(c.yy, c.xx, t);\n    vec2 v1, v2;\n    rand(i, v1.x);\n    rand(i+c.xy, v1.y);\n    rand(i+c.yx, v2.x);\n    rand(i+c.xx, v2.y);\n    v1 = c.zz+2.*mix(v1, v2, t.y);\n    n = mix(v1.x, v1.y, t.x);\n}\n\nvoid mfnoise(in vec2 x, in float d, in float b, in float e, out float n)\n{\n    n = 0.;\n    float a = 1., nf = 0., buf;\n    for(float f = d; f<b; f *= 2.)\n    {\n        lfnoise(f*x, buf);\n        n += a*buf;\n        a *= e;\n        nf += 1.;\n    }\n    n *= (1.-e)/(1.-pow(e, nf));\n}\n\n// Adapted from iq, https://www.shadertoy.com/view/XsXSz4\nvoid dtriangle(in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2, out float dst)\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min( min( vec2( dot( pq0, pq0 ), s*(v0.x*e0.y-v0.y*e0.x) ),\n                       vec2( dot( pq1, pq1 ), s*(v1.x*e1.y-v1.y*e1.x) )),\n                       vec2( dot( pq2, pq2 ), s*(v2.x*e2.y-v2.y*e2.x) ));\n\n\tdst = -sqrt(d.x)*sign(d.y);\n}\n\nvoid dbox(in vec2 x, in vec2 b, out float d)\n{\n    vec2 da = abs(x)-b;\n    d = length(max(da,c.yy)) + min(max(da.x,da.y),0.0);\n}\n\nvoid dlinesegment(in vec2 x, in vec2 p1, in vec2 p2, out float d)\n{\n    vec2 da = p2-p1;\n    d = length(x-mix(p1, p2, clamp(dot(x-p1, da)/dot(da,da),0.,1.)));\n}\n\nvoid stroke(in float d0, in float s, out float d)\n{\n    d = abs(d0)-s;\n}\n\nvoid dvoronoi(in vec2 x, out float d, out vec2 z)\n{\n    vec2 y = floor(x);\n       float ret = 1.;\n    vec2 pf=c.yy, p;\n    float df=10.;\n    \n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            d = length(x-p);\n            \n            if(d < df)\n            {\n                df = d;\n                pf = p;\n            }\n        }\n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            vec2 o = p - pf;\n            d = length(.5*o-dot(x-pf, o)/dot(o,o)*o);\n            ret = min(ret, d);\n        }\n    \n    d = ret;\n    z = pf;\n}\n\nvoid graf(in vec2 x, out float d)\n{\n    x.y *= .7;\n    float size = .4,\n        n,\n        da;\n    vec2 y = vec2(mod(x.x, size)-.5*size, x.y),\n        yi = (x-y)/size,\n        x1,\n        x2,\n        x3;\n    \n    dbox(y,vec2(.75,.75)*size, d);\n    \n    // lines\n    rand(yi, n);\n    x1 = vec2(-.5+.02+n*.96, .75)*size,\n    x2 = vec2(.5-.02-n*.96, -.75)*size;\n    x1.x = floor(5.*x1.x)/5.;\n    x2.x = floor(5.*x2.x)/5.;\n    x1.x = max(x1.x,-.4*size);\n    x1.x = min(x1.x,.4*size);\n    x2.x = max(x2.x,-.4*size);\n    x2.x = min(x2.x,.4*size);\n    dlinesegment(y, x1, x2, da);\n    stroke(da, .02, da);\n    d = max(d, -da);\n    \n    // upper triangles\n    rand(yi+1337., n);\n\tx1 = vec2(-.55+n,.75)*size*1.05,\n    x2 = vec2(.5-n,.75)*size*1.05,\n    x3 = .75*(.8-n)*size*1.05*c.yx-.01*c.yx;\n    x1 = round(15.*x1)/15.;\n    x2 = round(15.*x2)/15.;\n    x3 = round(15.*x3)/15.;\n    dtriangle(y, x1, x2, x3, da);\n    d = max(d, -da);\n    \n    // lower triangles\n    rand(yi+2337., n);\n    x1 = vec2(-.5+n,-.75)*size*1.05,\n    x2 = vec2(.55-n,-.75)*size*1.05,\n    x3 = -.75*(.8-n)*size*1.05*c.yx+.01*c.yx;\n    x1 = round(15.*x1)/15.;\n    x2 = round(15.*x2)/15.;\n    x3 = round(15.*x3)/15.;\n    dtriangle(y, x1, x2, x3, da);\n    d = max(d, -da);\n}\n\nvoid zextrude(in float z, in float d2d, in float h, out float d)\n{\n    vec2 w = vec2(-d2d, abs(z)-0.5*h);\n    d = length(max(w,0.0));\n}\n\nvoid add(in vec2 sda, in vec2 sdb, out vec2 sdf)\n{\n    sdf = mix(sda, sdb, step(sdb.x, sda.x));\n}\n\nvoid rot3(in vec3 p, out mat3 rot)\n{\n    rot = mat3(c.xyyy, cos(p.x), sin(p.x), 0., -sin(p.x), cos(p.x))\n        *mat3(cos(p.y), 0., -sin(p.y), c.yxy, sin(p.y), 0., cos(p.y))\n        *mat3(cos(p.z), -sin(p.z), 0., sin(p.z), cos(p.z), c.yyyx);\n}\n\nvoid scene(in vec3 x, out vec2 sdf)\n{\n    x.x += .3*iTime;\n    x *= 2.;\n    \n    vec3 n;\n    lfnoise(x.x*c.xx-iTime, n.x);\n    lfnoise(2.*x.x*c.xx-iTime-1337., n.y);\n    lfnoise(x.x*c.xx+2.*iTime-2337., n.z);\n\n    x.yz += .1*vec2(cos(x.x), sin(x.x))*n.xy;\n    \n    mat3 RR;\n    rot3((.6+.4*iScale)*1.3*mix(.2,1.5, .5+.5*n.x)*n.z * c.xyy, RR);\n    x = RR * x;\n    x.z = abs(x.z);\n    \n    float d, da, db;\n    \n    graf(x.xy, d);\n    stroke(d+mix(.01,.04, iScale), mix(.01,.04, iScale), da);\n    \n    float v;\n    vec2 ind;\n    dvoronoi(12.*x.xy, v, ind);\n    \n    zextrude(x.z, -d, .1-.1*v, d);\n    \n\tsdf = vec2(d,1.);\n    float modsize = .025,\n\t\ty = mod(d-.3-.02*iTime,modsize)-.5*modsize,\n        yi = (d-y)/modsize;\n    \n    float na;\n    lfnoise(2.*yi*c.xx-.3*iTime, na);\n\n    zextrude(x.z-.05*na, -y, mix(0.,.05+.05*na,iScale), d);\n    stroke(d,.035,d);\n    zextrude(x.z, -da, .25, da);\n\tadd(sdf, vec2(da, 1.), sdf);\n\t\n\tlfnoise(5.*x.xy, da);\n\t    mfnoise(x.xy, 32., 422., .45, db);\n        da = .5*(db+da);\n\t\tsdf.x -= .001*da;\n        stroke(da, .1, da);\n        sdf.x -=.005*da;\n    add(sdf, vec2(d, 1.), sdf);\n    add(sdf, vec2(x.z+.25,1.), sdf);\n}\n\nvoid normal(in vec3 x, out vec3 n)\n{\n    const float dx = 1.e-2;\n    vec2 s, na;\n    \n    scene(x,s);\n    scene(x+dx*c.xyy, na);\n    n.x = na.x;\n    scene(x+dx*c.yxy, na);\n    n.y = na.x;\n    scene(x+dx*c.yyx, na);\n    n.z = na.x;\n    n = normalize(n-s.x);\n}\n\nfloat sm(float d)\n{\n    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);\n}\n\nvoid colorize(in vec2 x, out vec3 col)\n{\n    x.x += .3*iTime;\n    x *= 2.;\n\n    float n;\n    lfnoise(x.x*c.xx-iTime, n);\n    x.y += .3*cos(x.x)*n;\n \n    float d;\n    graf(x, d);\n    col = mix(col, mix(vec3(0.85,0.87,0.89), vec3(0.04,0.18,0.24), clamp(abs(x.y/2.),0.,1.)), sm(d-.2));\n    col = mix(col, vec3(1.00,0.40,0.39), sm(d));\n    float da = d;\n    stroke(d+mix(.01,.03, iScale), mix(.01,.04,iScale), d);\n    col = mix(col, 1.4*col, sm(d));\n    stroke(d, .001, d);\n    col = mix(col, 1.3*col, sm(d));\n    \n    if(da < .02 && da > -.02)\n    {\n        lfnoise(5.*x, da);\n\t    mfnoise(x, 32., 422., .45, d);\n        d = .5*(d+da);\n\t\tcol = mix(col, vec3(0.27,0.27,0.27), sm(d));\n        stroke(d, .1, d);\n        col = mix(col, 1.5*col, sm(d));\n    }\n    \n    col *= mix(1., 1.6, iScale);\n}\n\nvoid scale(out float s)\n{\n    s = mod(iTime+.3- 0.0 , 0.588225 )- 0.2941125 ;\n    s = smoothstep( -3.*0.04901875 ,0.,s)*(1.-smoothstep(0., 3.*0.14705625 ,s));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    a = iResolution.x/iResolution.y;\n    \n    scale(iScale);\n    \n    vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0), \n        s;\n    \n    float sc2 = 0.,\n        sc3 = 0.;\n        \n    vec3 col = c.yyy, \n        o = mix(1.,.5,smoothstep(0.,5.,clamp(iTime-71.,0.,5.)))*c.yzx,\n        r = c.xyy,\n        u = normalize(c.yxx),\n        t = c.yyy, \n        dir,\n        n,\n        x;\n    int N = 150,\n        i;\n    t = uv.x * r + uv.y * u;\n    dir = normalize(t-o);\n\n    vec3 c1;\n    float d = -(o.z-.35)/dir.z;\n    \n    for(i = 0; i<N; ++i)\n    {\n     \tx = o + d * dir;\n        scene(x,s);\n        if(s.x < 1.e-4)break;\n        if(x.z<-.15)\n        {\n            i = N;\n            break;\n        }\n        d += min(s.x,5.e-2);\n    }\n    \n    if(i < N)\n    {\n        normal(x,n);\n        \n        if(s.y == 1.)\n        {\n            vec3 l = normalize(x+.5*c.yzx);\n            colorize(x.xy, c1);\n            c1 = .1*c1\n                + 1.*c1 * abs(dot(l,n))\n                + 1.5 * c1 * abs(pow(dot(reflect(x-l,n),dir),2.));\n        }\n        else if(s.y == 2.)\n        {\n            vec3 l = normalize(x+c.xzx);\n            float r;\n            lfnoise(x.xy, r);\n            c1 = mix(vec3(0.99,0.43,0.15),vec3(0.44,0.07,0.66),sin(2.*iScale*r*x));\n            c1 = .1*c1\n                + .8*c1 * abs(dot(l,n))\n                + 6.5*c1 * abs(pow(dot(reflect(x-l,n),dir),3.));\n        }\n        col = c1;\n    }\n    \n    \n    col *= col*col;\n    col = mix(col, c.yyy, clamp((d-2.-(o.z-.2)/dir.z)/4.,0.,1.));\n    \n    // Background\n    if(length(col) < .001)\n    {\n        float v, ra, v2;\n        vec2 ind, ind2;\n        lfnoise(iTime*c.xx, ind2.x);\n        lfnoise(iTime*c.xx-1337., ind2.y);\n        dvoronoi(12.*(uv-.03*ind2), v, ind);\n        rand(ind, ra);\n        stroke(-v, .05, v);\n        v = -v;\n        col = mix(col, .3*ra*mix( .5*vec3(1.00,0.40,0.39), .05*c.xxx, clamp(tanh(1.5*length(uv)),0.,1.)), sm(v));\n        col *= 3.;\n    }\n    \n    fragColor = vec4(clamp(col,0.,1.),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}