{"ver":"0.1","info":{"id":"3stcz7","date":"1600678863","viewed":2385,"name":"ShaderToy To Unity #01","username":"PrzemyslawZaworski","description":"\"Sound\" contains source code for C# script and shader file.\nIt shows example how to convert ShaderToy multipass accumulation shaders into Unity engine.\nOriginal reference: https://www.shadertoy.com/view/WstcRN\n","likes":7,"published":1,"flags":40,"usePreview":0,"tags":["tutorial","shadertoy","unity","multipass","hlsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float diffuse;\nfloat specular;\n\nvoid calculateLighting(vec2 uv)\n{\n    float l= length(texture(iChannel0,uv).xyz);\n    float dx=dFdx(l)*iResolution.x;\n    float dy=dFdy(l)*iResolution.y;\n    \n    // Calculating Normal by dx and dy\n    vec3 N =normalize(vec3(dx,dy,100.0));\n    \n    // Light Direction\n    vec3 L = normalize(vec3(1.0, 1.0, 2.0));\n    \n    // Calculating Diffuse\n    diffuse = max(dot(N, L)  + 1., 0.);\n    \n    // Calculating Specular\n    specular = clamp(dot(reflect(L, N),vec3(0, 0, -1)), 0., 1.0);\n    \n    specular = pow(specular, 12.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    calculateLighting(uv);\n    \n    // Get Liquid From Buffer B\n    vec3 liquid = texture(iChannel0, uv).rgb;\n    \n    // Normalizing Liquid\n    liquid = clamp(liquid,0.,0.5);\n    \n    // Cream Color\n    vec3 color = vec3(1.,0.99,0.81);\n    \n    vec3 finalColor = liquid * color * diffuse + specular;\n    \n\tfragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(distance(iMouse.xy, fragCoord) < 10.0);\n    fragColor += texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define Move(U, dir) texelFetch( iChannel1, ivec2(U+dir) , 0 )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = vec4(0);\n    float s = 0.;\n    for (int i=0; i<9; i+= i==3 ? 2 : 1 ) {\n        vec2 D = vec2( i%3-1, i/3-1);\n         O +=  Move( U, D ) / length(D);\n         s += 1./ length(D);\n    }\n    O /= s;\n    O += texelFetch(iChannel0, ivec2(U), 0); \n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/* //LiquidPaint.cs\n\n// Main Camera -> Position (0,0,0)\n// 3D Object -> Quad -> Position (0,0,1)\n// Add script to quad and assign shader. Play.\n// Use left mouse to paint\n\nusing UnityEngine;\n\npublic class LiquidPaint : MonoBehaviour \n{\n\tpublic int Resolution = 1024;\n\tpublic Shader LiquidPaintShader; \n\tMaterial material;\n\tRenderTexture RTA1, RTA2, RTB1, RTB2;\n\tbool swap = true;\n\t\n\tvoid Blit(RenderTexture source, RenderTexture destination, Material mat, string name, int pass)\n\t{\n\t\tRenderTexture.active = destination;\n\t\tmat.SetTexture(name, source);\n\t\tGL.PushMatrix();\n\t\tGL.LoadOrtho();\n\t\tGL.invertCulling = true;\n\t\tmat.SetPass(pass);\n\t\tGL.Begin(GL.QUADS);\n\t\tGL.MultiTexCoord2(0, 0.0f, 0.0f);\n\t\tGL.Vertex3(0.0f, 0.0f, 0.0f);\n\t\tGL.MultiTexCoord2(0, 1.0f, 0.0f);\n\t\tGL.Vertex3(1.0f, 0.0f, 0.0f); \n\t\tGL.MultiTexCoord2(0, 1.0f, 1.0f);\n\t\tGL.Vertex3(1.0f, 1.0f, 0.0f); \n\t\tGL.MultiTexCoord2(0, 0.0f, 1.0f);\n\t\tGL.Vertex3(0.0f, 1.0f, 0.0f);\n\t\tGL.End();\n\t\tGL.invertCulling = false;\n\t\tGL.PopMatrix();\n\t}\n\t\t\t\n\tvoid Start () \n\t{\n\t\tmaterial = new Material(LiquidPaintShader);\n\t\tRTA1 = new RenderTexture(Resolution, Resolution, 0, RenderTextureFormat.ARGBFloat);  //buffer must be floating point RT\n\t\tRTA2 = new RenderTexture(Resolution, Resolution, 0, RenderTextureFormat.ARGBFloat);  //buffer must be floating point RT\n\t\tRTB1 = new RenderTexture(Resolution, Resolution, 0, RenderTextureFormat.ARGBFloat);  //buffer must be floating point RT\n\t\tRTB2 = new RenderTexture(Resolution, Resolution, 0, RenderTextureFormat.ARGBFloat);  //buffer must be floating point RT\t\t\n\t\tGetComponent<Renderer>().material = material;\n\t}\n\t\n\tvoid Update () \n\t{\t\t\n\t\tRaycastHit hit;\n\t\tif (Input.GetMouseButton(0))\n\t\t{\n\t\t\tif (Physics.Raycast(Camera.main.ScreenPointToRay(Input.mousePosition) , out hit))\n\t\t\t\tmaterial.SetVector(\"iMouse\", new Vector4(\n\t\t\t\t\thit.textureCoord.x * Resolution, hit.textureCoord.y * Resolution, 1.0f, 1.0f));\n\t\t}\n\t\telse\n\t\t{\n\t\t\tmaterial.SetVector(\"iMouse\", new Vector4(-1000.0f, -1000.0f, -1.0f, -1.0f));\n\t\t}\n\t\t\n\t\tmaterial.SetInt(\"iFrame\",Time.frameCount);\n\t\tmaterial.SetVector(\"iResolution\", new Vector4(Resolution,Resolution,0.0f,0.0f));\n\t\t\n\t\tif (swap)\n\t\t{\t\t\t\n\t\t\tmaterial.SetTexture(\"_BufferA\", RTA1);\n\t\t\tBlit(RTA1, RTA2, material, \"_BufferA\", 0);\n\t\t\tmaterial.SetTexture(\"_BufferA\", RTA2);\n\t\t\t\n\t\t\tmaterial.SetTexture(\"_BufferB\", RTB1);\n\t\t\tBlit(RTB1, RTB2, material, \"_BufferB\", 1);\n\t\t\tmaterial.SetTexture(\"_BufferB\", RTB2);\t\t\t\t\n\t\t}\n\t\telse\n\t\t{\t\t\t\n\t\t\tmaterial.SetTexture(\"_BufferA\", RTA2);\n\t\t\tBlit(RTA2, RTA1, material, \"_BufferA\", 0);\n\t\t\tmaterial.SetTexture(\"_BufferA\", RTA1);\n\t\t\t\n\t\t\tmaterial.SetTexture(\"_BufferB\", RTB2);\n\t\t\tBlit(RTB2, RTB1, material, \"_BufferB\", 1);\n\t\t\tmaterial.SetTexture(\"_BufferB\", RTB1);\t\t\n\t\t}\n\t\t\n\t\tswap = !swap;\n\t}\n\t\n\tvoid OnDestroy ()\n\t{\n\t\tRTA1.Release();\n\t\tRTA2.Release();\n\t\tRTB1.Release();\n\t\tRTB2.Release();\t\t\n\t}\n}\n\n*/\n\n/* //LiquidPaint.shader\n\nShader \"LiquidPaint\"\n{\n\tSubShader\n\t{\n\n//------Common-------------------------------------------------------------------------------------------\n\t\n\t\tCGINCLUDE\n\t\t#pragma vertex VSMain\n\t\t#pragma fragment PSMain\n\t\t\n\t\tTexture2D<float4> _BufferA;\t\n\t\tTexture2D<float4> _BufferB;\n\t\tSamplerState _LinearClamp;\n\t\t\n\t\tint iFrame;\n\t\tfloat4 iMouse;\n\t\tfloat4 iResolution;\n\t\t\n\t\tvoid VSMain (inout float4 vertex:POSITION, inout float2 uv:TEXCOORD0)\n\t\t{\n\t\t\tvertex = UnityObjectToClipPos(vertex);\n\t\t}\n\t\t\n\t\tENDCG\n\n//------Buffer A-------------------------------------------------------------------------------------------\n\n\t\tPass\n\t\t{ \n\t\t\tCGPROGRAM\n\t\t\n\t\t\tvoid PSMain (float4 vertex:POSITION, float2 uv:TEXCOORD0, out float4 fragColor:SV_TARGET)\n\t\t\t{\n\t\t\t\tfloat2 fragCoord = uv * iResolution.xy;\n\t\t\t\tfragColor = (distance(iMouse.xy, fragCoord) < 10.0).xxxx;\n\t\t\t\tfragColor += _BufferA.Sample(_LinearClamp, fragCoord.xy / iResolution.xy);  \n\t\t\t}\n\t\t\t\n\t\t\tENDCG\n\t\t}\n\t\t\n//------Buffer B-------------------------------------------------------------------------------------------\n\t\t\n\t\tPass\n\t\t{ \n\t\t\tCGPROGRAM\n\n\t\t\t#define Move(U, dir) _BufferB.Load( int3(U + dir, 0) )\n\t\t\t\n\t\t\tvoid PSMain (float4 vertex:POSITION, float2 uv:TEXCOORD0, out float4 O:SV_TARGET)\n\t\t\t{\t\n\t\t\t\tfloat2 U = uv * iResolution.xy;\n\t\t\t\tO = float4(0,0,0,0);\n\t\t\t\tfloat s = 0.;\n\t\t\t\tfor (int i=0; i<9; i+= i==3 ? 2 : 1 ) \n\t\t\t\t{\n\t\t\t\t\tfloat2 D = float2( i%3-1, i/3-1);\n\t\t\t\t\tO +=  Move( U, D ) / length(D);\n\t\t\t\t\ts += 1./ length(D);\n\t\t\t\t}\n\t\t\t\tO /= s;\n\t\t\t\tO += _BufferA.Load( int3(U, 0) );    \n\t\t\t}\n\t\t\t\n\t\t\tENDCG\n\t\t}\n\t\t\n//------Image-------------------------------------------------------------------------------------------\n\n\t\tPass\n\t\t{ \n\t\t\tCGPROGRAM\n\t\t\t\n\t\t\tfloat diffuse;\n\t\t\tfloat specular;\n\n\t\t\tvoid calculateLighting(float2 uv)\n\t\t\t{\n\t\t\t\tfloat l = length(_BufferB.Sample(_LinearClamp, uv).xyz);\n\t\t\t\tfloat dx=ddx(l)*iResolution.x;\n\t\t\t\tfloat dy=ddy(l)*iResolution.y;\n\t\t\t\t\n\t\t\t\t// Calculating Normal by dx and dy\n\t\t\t\tfloat3 N =normalize(float3(dx,dy,100.0));\n\t\t\t\t\n\t\t\t\t// Light Direction\n\t\t\t\tfloat3 L = normalize(float3(1.0, 1.0, 2.0));\n\t\t\t\t\n\t\t\t\t// Calculating Diffuse\n\t\t\t\tdiffuse = max(dot(N, L)  + 1., 0.);\n\t\t\t\t\n\t\t\t\t// Calculating Specular\n\t\t\t\tspecular = clamp(dot(reflect(L, N),float3(0, 0, -1)), 0., 1.0);\n\t\t\t\t\n\t\t\t\tspecular = pow(specular, 12.0);\n\t\t\t}\n\n\n\t\t\tvoid PSMain (float4 vertex:POSITION, float2 uv:TEXCOORD0, out float4 fragColor:SV_TARGET)\n\t\t\t{\n\t\t\t\tfloat2 fragCoord = uv * iResolution.xy;\n  \n\t\t\t\t// Normalized pixel coordinates (from 0 to 1)\n\t\t\t\tcalculateLighting(uv);\n\n\t\t\t\t// Get Liquid From Buffer B\n\t\t\t\tfloat3 liquid = _BufferB.Sample(_LinearClamp, uv).rgb;\n\n\t\t\t\t// Normalizing Liquid\n\t\t\t\tliquid = clamp(liquid,0.,0.5);\n\n\t\t\t\t// Cream Color\n\t\t\t\tfloat3 color = float3(1.,0.99,0.81);\n\n\t\t\t\tfloat3 finalColor = liquid * color * diffuse + specular;\n\n\t\t\t\tfragColor = float4(finalColor, 1.0);\n\t\t\t}\n\t\t\t\n\t\t\tENDCG\n\t\t}\n\n//-------------------------------------------------------------------------------------------\n\t\t\n\t}\n}\n\n*/\n\nvec2 mainSound( in int samp, float time )\n{\n    return vec2( 0, 0 );\n}","name":"Sound","description":"","type":"sound"}]}