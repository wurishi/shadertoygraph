{"ver":"0.1","info":{"id":"lflfz8","date":"1723385995","viewed":27,"name":"Infinite Mandelbrot Zoom","username":"longestdrop","description":"Versioned from https://oneshader.net/shader/6a54c2c771","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","infinite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926\n\nvec2 vpow2(vec2 v) {\n    return vec2(v.x * v.x - v.y * v.y, 2.0 * v.x * v.y);\n}\n\nvec2 rv(vec2 v, float r) {\n    float a = atan(v.y, v.x);\n    a += r;\n    return vec2(cos(a), sin(a)) * length(v);\n}\n\nfloat itr(vec2 c, vec2 z) {\n    int i = 0;\n    while(length(z) < 8192.0 && i < 512) {\n        z = vpow2(z) + c;\n        i++;\n    }\n    return float(i) + 1.0 - log(log(length(z))) / log(2.0);\n}\n\nvec3 fcol(float it) {\n    if (it < 512.0) {\n        return vec3(0.5 + 0.5 * sin(it / 32.0), \n                    0.5 + 0.5 * sin(it / 48.0), \n                    0.5 + 0.5 * sin(it / 64.0));\n    } else {\n        return vec3(0.0, 0.0, 0.0);\n    }\n}\n// Main function in ShaderToy\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Convert the coordinates from [-1, 1] to [-aspect, -1] to [aspect, 1]\n    vec2 q = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\n    float mzoom = 1.e5;\n    float ztime = log(mzoom) / log(2.0);\n    float zoom = pow(2.0, mod(iTime, ztime));\n    float zphase = mod(iTime / ztime, 1.0);\n    float r = (4.0 * pi - 4.04) * zphase;\n\n    vec2 fractalCoord = vec2(-0.13791936640142570099292214925261, -0.88460568100304538057472153704150);\n    vec2 c = rv(q * (mzoom / 1.e5) / zoom, r) + fractalCoord;\n    vec2 c2 = rv(q * mzoom / zoom, r + 4.04) + fractalCoord;\n    vec2 z = vec2(0.0, 0.0);\n\n    float it = itr(c, z);\n    float it2 = itr(c2, z);\n\n    // Color calculation\n    vec3 col;\n    vec3 col2;\n    float w = pow(zphase, 0.9);\n    col = fcol(it) * (1.0 - w) * clamp(1.0 - 0.2 * it2, 0.0, 1.0);\n    col += fcol(it2) * w;\n\n    // Output color\n    fragColor = vec4(col, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}