{"ver":"0.1","info":{"id":"fdd3zj","date":"1630306079","viewed":146,"name":"Random Gaussian Brush Stroke","username":"nbardy","description":"Some random distributed brush strokes for a generative model process","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Simple 2D Rotation\" by zheck. https://shadertoy.com/view/3lVGWt\n// 2021-08-29 06:50:03\n\n\n#define ZOOM 1.0\n#define SPEED 30.0\n\nconst float PI = 3.14159;\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nfloat gauss(float x, float x0, float sx){\n    \n    float arg = x-x0;\n    arg = -1./2.*arg*arg/sx;\n    \n    float a = 1./(pow(20.*3.1415*sx, 0.5));\n    \n    return a*exp(arg);\n}\n\nfloat combo(float x1, float x2) {\n    return clamp(x1 + x2 - x1*x2, -1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from - to 1)\n    \n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    float r = 130.0;\n\n    \n    r = iTime;\n    uv = uv + vec2(0.2,-0.3);\n    uv *= rotationMatrix(iTime * 20.0 ) * ZOOM;\n    vec2 uvr1 = uv*rotationMatrix(12.0);\n    vec2 uvr2 = uv*rotationMatrix(82.0);\n    \n\n    float scale_uv = iResolution.x/iResolution.y;\n    \n    \n    float a1 = 2.0;\n    float a2 = 2.0;\n    float x = uv.x;\n    x = a1*x - -0.9;\n    float y = uv.y;\n    y = a2*y + 0.2;\n    \n    float gx = gauss(x*y, 0.5, 0.01);\n    \n    vec2 shift1 = vec2(0.1,-0.13);   \n    vec2 shift2 = vec2(-0.23, 0.08);\n    \n    vec2 uv1 = uv*rotationMatrix(iTime * 20.0 ) * 0.8 + shift1;\n    vec2 uv2 = uv*rotationMatrix(iTime * 20.0) * 1.2 + shift2;\n    \n    \n    float gx1 = gauss(uv1.x*uv1.y, 0.5, 0.01);\n    float gx2 = gauss(uv2.x*uv2.y, 0.5, 0.01);\n    gx2 = gauss(uv2.x, 0.5, 0.01);\n    // float gy = gauss(uv.y*2.0, 0.5, 0.01);\n    \n    float gx3 = combo(gx, gx1);\n    float gx4 = combo(gx, gx2);\n    \n    vec3 color1 = clamp(gx3,0.0,1.0)*vec3(0.3,0.2,0.4);\n    vec3 color2 = clamp(gx4,0.0,1.0)*vec3(0.000,0.616,1.000);\n    \n    vec3 color = mix(color1, color2, uvr1.x * uvr2.y);\n    \n    // taper\n    float startx = 0.2;\n    float endx = 0.3;\n    \n    float starty = 0.2;\n    float endy = 1.9;\n    vec3 black = vec3(0.0);\n    \n    float b = 0.3;\n    float s1 = -1.9;\n    float s2 = 2.1;\n    float a = (x - s1)*b*(y - s2);\n    \n    float blend = smoothstep(a*y,0.0,1.0);\n    //color = mix(black,color,vec3(blend));\n    \n\n    // Output to screen\n    fragColor = vec4( color, 1.0 );\n}","name":"Image","description":"","type":"image"}]}