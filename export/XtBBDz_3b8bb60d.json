{"ver":"0.1","info":{"id":"XtBBDz","date":"1515267096","viewed":386,"name":"[MAGFest18] Audioshader","username":"qguv","description":"Submitted for the Magfest demo competition. Music is original and created just for this demo.","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["basic","audio","demo","magfest18"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Md2SzW","filepath":"https://soundcloud.com/madwithcolors/shade","previewfilepath":"https://soundcloud.com/madwithcolors/shade","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec4 black = vec4(0.0);\nconst vec4 white = vec4(1.0);\nconst vec4 red = vec4(1.0, 0.0, 0.0, 0.0);\nconst float bpm = 112.0;\nconst int STYLE_VERTICAL_LEFT = 0;\nconst int STYLE_HORIZONTAL_BOTTOM = 1;\n\nbool gate(int beat)\n{\n    switch (beat % 8) {\n        case 1:\n        case 4:\n        case 7:\n            return false;\n    }\n    return true;\n}\n\nfloat frac(float x)\n{\n    return x - floor(x);\n}\n\n\nfloat rand(vec2 co)\n{\n    /* magic */\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nbool bg8(vec2 fragCoord)\n{\n    return rand(floor(fragCoord / 30.0 + iTime)) < 0.3;\n}\n\nvec4 arp(vec2 p, int beat16, bool vertical, vec4 top, in vec2 fragCoord)\n{\n    float quadrant1 = float((beat16 % 4) + 1);\n    \n    float cutoff;\n    bool on = vertical\n        \n      ? /* vertical */\n      fragCoord.x < (iResolution.x / 4.0) * quadrant1\n\n      : /* horizontal */\n      fragCoord.y < (iResolution.y / 4.0) * quadrant1;\n\n    return on\n        ? top\n        : ((beat16 / 4) % 8 == 7)\n            ? rand(p * iTime) > 0.2\n                ? black\n                : white\n            : black;\n}\n\nfloat circle(vec2 p, vec2 r, float R, float Rwidth)\n{\n    return smoothstep(R, R + Rwidth, length(p - r));\n}\n\nfloat inv(float x)\n{\n    return -1.0 * x + 1.0;\n}\n\nbool zero(vec4 v)\n{\n    return 0.0 == v.x && 0.0 == v.y && 0.0 == v.z && 0.0 == v.w;\n}\n\nvec4 above(vec4 x, vec4 y)\n{\n    return zero(x) ? y : x + y;\n}\n\nvec4 planets(vec2 p, float fbeat, vec4 planet_color, vec4 moon_color)\n{\n    float swell = 0.4 + frac(fbeat) / 5.0;\n\n    vec2 moon_pos = vec2(sin(iTime - 0.8), cos(iTime));\n    vec4 moon = length(moon_pos - vec2(-1.0)) > 0.5\n        ? moon_color * inv(circle(p, moon_pos, 0.2, 0.01))\n        : black;\n\n    vec4 planet = planet_color * inv(circle(p, vec2(0.0), swell, 0.01));\n\n    return above(moon, planet);\n}\n\nbool rect(vec2 p, float xmin, float xmax, float ymin, float ymax)\n{\n    return p.x > xmin && p.x < xmax && p.y > ymin && p.y < ymax;\n}\n\nvec4 magfest(vec2 p)\n{\n    /* vertical lines */\n    float half_width = 0.01;\n    vec4 verts = black;\n    for (float i = -0.8; i <= 0.8; i += 0.4)\n        verts += rect(p, i - half_width, i + half_width, -0.3, 0.3) ? white : black;\n\n    vec4 top = rect(p, -0.8 - half_width, 0.9, 0.29, 0.31)\n            && !(p.x > -0.4 + half_width && p.x < 0.0 - half_width)\n            && !(p.x > 0.4 + half_width && p.x < 0.8 - half_width)\n             ? white\n             : black;\n\n    vec4 bottom = rect(p, -0.9, 0.8 + half_width, -0.31, -0.29)\n            && !(p.x > -0.8 + half_width && p.x < -0.4 - half_width)\n            && !(p.x > 0.0 + half_width && p.x < 0.4 - half_width)\n             ? white\n             : black;\n\n    return top + bottom + verts;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = (-1.0 + 2.0 * q) * vec2(iResolution.x / iResolution.y, 1.0);\n\n    float beat_time = 60.0 / bpm;\n    float fbeat = iChannelTime[0] / beat_time;\n    int beat = int(fbeat);\n\n    float beat16_time = 15.0 / bpm;\n    float fbeat16 = iChannelTime[0] / beat16_time;\n    int beat16 = int(fbeat16);\n\n    /* chords only */\n    if (beat < 32) {\n\t    fragColor = gate(beat)\n            ? planets(p, fbeat, red, white)\n            : (beat % 8 == 7)\n                ? rand(p * iTime) > 0.2\n                    ? black\n                    : white\n                : black;\n    /* chords & arps, then arps only */\n    } else {\n        bool vertical = (beat / 8) % 2 == 0;\n        fragColor = gate(beat)\n            ? beat < 96\n                /* pulse for chords */\n                ? planets(p, fbeat, red, white)\n\n                /* static for no chords */\n                : planets(p, 0.0, red, white)\n\n            : vertical\n                ? arp(p, beat16, true, red, fragCoord)\n                : arp(p, beat16, false, red, fragCoord);\n    }\n\n    /* fade out everything */\n    fragColor *= -1.0 * smoothstep(112.0, 128.0, fbeat) + 1.0;\n\n    /* but fade in magfest */\n    fragColor = above(magfest(p) * smoothstep(104.0, 120.0, fbeat), fragColor);\n}","name":"Image","description":"","type":"image"}]}