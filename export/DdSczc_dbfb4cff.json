{"ver":"0.1","info":{"id":"DdSczc","date":"1687967393","viewed":45,"name":"fractals-fun","username":"johnpertoftembark","description":"its a shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stuff"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 mandelbrot(vec2 z, vec2 c, float t) {\n    return vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c * vec2(sin(0.2*t), cos(0.2*t));\n}\n\nvec2 julia(vec2 z, vec2 c) {\n    return vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n}\n\nvec3 colorGradient(float t) {\n    return vec3(0.5 * cos(t) + 0.5, 0.5 * sin(t*1.2) + 0.5, 0.8 + 0.2 * cos(1.5*t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Time-dependent parameters\n    float t = iTime * 0.5;\n\n    // Bubble refraction effect\n    float bubble = sin(5.0 * length(uv - vec2(sin(0.2*t), cos(0.2*t)))) - 0.5;\n    uv += bubble * 0.1 * vec2(cos(t), sin(t));\n\n    // Mandelbrot fractal\n    vec2 c = vec2(uv.x*2.0-1.0, uv.y*2.0-1.0);\n    vec2 z = c;\n    int iterations = 0;\n    for(int i = 0; i < 100; i++) {\n        if(length(z) > 2.0) break;\n        z = mandelbrot(z, c, t);\n        iterations++;\n    }\n\n    // Julia set fractal\n    c = vec2(0.8*sin(0.2*t), 0.8*cos(0.2*t));\n    z = uv * 2.0 - 1.0;\n    int jIterations = 0;\n    for(int i = 0; i < 100; i++) {\n        if(length(z) > 2.0) break;\n        z = julia(z, c);\n        jIterations++;\n    }\n\n    // Output to screen\n    float color = (float(iterations) + float(jIterations)) / 200.0;\n    fragColor = vec4(colorGradient(color + t), 1.0);\n}","name":"Image","description":"","type":"image"}]}