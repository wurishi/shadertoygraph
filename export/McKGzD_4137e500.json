{"ver":"0.1","info":{"id":"McKGzD","date":"1712505900","viewed":135,"name":"Channel-independent Game of Life","username":"pwyr","description":"Just another simple implementation of Conway's Game of Life.","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Conway's Game of Life\n// ------------------------\n// The rules are the usual but the cellular automaton\n// runs independently on each color channel.\n\nvec4 fetchColor(vec2 coord) {\n    return texelFetch(iChannel0, ivec2(coord), 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // initialization via texture pixel color quantization\n    if (iFrame == 0 || fetchColor(vec2(0.0)).w < 1.0) {\n        fragColor = vec4(0.0);\n        \n        if (iChannelResolution[1].x > 0.0) {\n            vec2 uv = fragCoord/iResolution.xy;\n            fragColor = vec4(round(texture(iChannel1, uv)).xyz, 1.0);\n        }\n        return;\n    }\n    \n    vec3 ctrColor = fetchColor(fragCoord).xyz;\n    \n    vec3 counts = -ctrColor;\n    for (int i = -1; i <= 1; ++i) {\n        for (int j = -1; j <= 1; ++j) {\n            counts += fetchColor(fragCoord+vec2(i,j)).xyz;\n        }\n    }\n    vec3 color = ctrColor * vec3(equal(counts,vec3(2.0))) + vec3(equal(counts,vec3(3.0)));\n    fragColor = vec4(clamp(color, 0.0, 1.0), 1.0);   \n}","name":"Buffer A","description":"","type":"buffer"}]}