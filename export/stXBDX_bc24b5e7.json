{"ver":"0.1","info":{"id":"stXBDX","date":"1654154304","viewed":31,"name":"learning rays","username":"Godlander","description":"a","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hit(in vec3 pos) {\n    float d = length(pos) - 2.;\n    return d;\n}\n\nvec3 getnormal(in vec3 pos) {\n    vec2 e = vec2(0.001,0);\n    return normalize(vec3(  hit(pos+e.xyy)-hit(pos-e.xyy),\n                            hit(pos+e.yxy)-hit(pos-e.yxy),\n                            hit(pos+e.yyx)-hit(pos-e.yyx) ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 col = vec3(0);\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    //ray start\n    vec3 ro = vec3(0,0,5);\n    vec3 rd = normalize(vec3(uv,-1));\n    //cast\n    float t = 0.;\n    for(int i = 0; i < 100; i++) {\n        vec3 pos = ro + t*rd;\n        float h = hit(pos);\n        //if hit\n        if (h < 0.001) break;\n        t+=h;\n        //exceed far plane\n        if (t > 20.) break;\n    }\n    //if not beyond far plane\n    if (t < 20.) {\n        vec3 pos = ro + t*rd;\n        vec3 norm = getnormal(pos);\n        \n        col = norm;\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}