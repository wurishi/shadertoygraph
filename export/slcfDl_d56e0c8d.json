{"ver":"0.1","info":{"id":"slcfDl","date":"1663804047","viewed":120,"name":"stacked pipes","username":"jt","description":"Exploring the possibilities of limited repetition combined with extrusion.\nSee also [url=https://www.shadertoy.com/view/sttBDl]stacked pipes simplified[/url].\n","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["repetition","honeycomb","construction","pipes","limited","chiral","extrusion","stacked","spacetesselation","tetrastix"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/slcfDl stacked pipes by jt\n\n// Exploring the possibilities of iq's Limited Repetition SDF\n// https://www.shadertoy.com/view/3syGzz combined with extrusion.\n\n// tags: repetition, honeycomb, construction, pipes, limited, chiral, extrusion, stacked, spacetesselation, tetrastix\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n// Create multiple copies of an object - https://iquilezles.org/articles/distfunctions\nvec2 opRepLim( in vec2 p, in float s, in vec2 lima, in vec2 limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n\nfloat element(vec2 p, ivec2 s)\n{\n    vec2 r = opRepLim(p,2.0,vec2(-s),vec2(+s));\n    return abs(sdCircle(r, 0.5)) - 0.01;\n}\n\nfloat extrude_element(vec3 p, ivec2 s, float h)\n{\n    float d = element(p.xy, s); // distance to 2d SDF\n\n    // extrude https://iquilezles.org/articles/distfunctions/\n    vec2 w = vec2(d, abs(p.z-0.5) - h);\n    return min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\n// underlying structure: https://en.wikipedia.org/wiki/Tetrastix\nfloat structure(vec3 p, ivec3 s)\n{\n    return\n        min\n        (\n            extrude_element(p.zxy+vec3(1,0,1), s.zx, float(2*s.y)+1.0),\n            min\n            (\n                extrude_element(p.xyz+vec3(1,0,1), s.xy, float(2*s.z)+1.0),\n                extrude_element(p.yzx+vec3(1,0,1), s.yz, float(2*s.x)+1.0)\n            )\n        );\n}\n\nfloat map(vec3 p)\n{\n    //ivec3 s = ivec3(3, 2, 1);\n    ivec3 s = ivec3(floor(3.0 * hash31(floor(iTime))));\n    return\n        //min\n        (\n            structure(p, s)\n            //, halfspace(p,-3.5)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * (fract(iTime * 0.01) - 0.25);\n    my = (iMouse.y > 10.0) ? my : pi * 2.5 / 4.0;;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0,-2.0, -15.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.2);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}