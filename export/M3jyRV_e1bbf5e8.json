{"ver":"0.1","info":{"id":"M3jyRV","date":"1727472141","viewed":131,"name":"Midnight Flow","username":"incre_ment","description":"Saw a bunch of cool wavy grass shaders a few days ago.  Thought I would make my own without the for looping that scales with the number of blades.  Still have looping for the layers and neighbor checking, though.  Hope everyone has a good weekend!","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["domainrepetition","grass","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Saw a bunch of cool wavy grass shaders a few days ago.  \n// Thought I would make my own version without the for looping \n// that scales with the number of blades.  \n// Still have looping for the layers and neighbor checking, though.\n// Hope everyone has a good weekend!\n\n#define rotation(angle) mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\nfloat TAU = 2.*3.14159;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = ( fragCoord - .5* iResolution.xy ) /iResolution.y;\n   vec3 col = vec3(0.);\n   float tt = fract(.3*iTime);\n   \n   uv *= rotation(TAU/20.);\n\n   // Draw Stars\n   vec2 uvStars = uv * 30.;\n   vec2 starCell = floor(uvStars);\n   uvStars = fract(uvStars) - .5;   \n   float minStar = 1E20;\n   for(float i=-1.;i<=1.;i++)\n   for(float j=-1.;j<=1.;j++){\n     float r1 = fract(sin(dot(starCell + vec2(i,j), vec2(3.0,12.0)))*15745.7342) * 2. - 1.;\n     float r2 = fract(sin(dot(starCell + vec2(i,j), vec2(7.0,43.0)))*13131.8234) * 2. - 1.;\n     float spark = 0.;\n     if (r2 > .3) spark = .1 * sin(TAU*(tt + r1));     \n     float ssize = r2 * .1;  \n     float star = length((uvStars - vec2(i,j)) - 1.*vec2(r1,r2)) - ssize+spark;\n     minStar = min(minStar, star);\n   }\n   float w = 54./iResolution.y;\n   col += smoothstep(w,-w,minStar);\n\n   // Draw Moon\n   float m = length(uv-vec2(.5,.44)) - .2;\n   w = 2./iResolution.y;\n   col += smoothstep(w,-w,m);\n\n   // Draw Grass   \n   for (float j = 1.; j<=4.; j++){ \n     float scale = 6. + 2.*j;\n     vec2 uv_layer = uv*scale;\n     float cellID = floor(uv_layer.x);\n     uv_layer.x = fract(uv_layer.x) - .5;\n     float minVal = 1E20;\n     for (float i = -1.; i<=1.; i++){\n       float off = TAU*fract(7.67*sin(5.2 * (cellID + i + 3.4*j)));  \n       float h = .5*off/TAU; \n       float w = (-uv.y + h - .2) * .25;\n       float w2 = (uv.y + .5);\n       float d = sin(TAU*tt - 3.*uv.y + off) * w2;\n       float k = -.3 + .6* off/TAU;\n       float v = abs(uv_layer.x-i - d - k) - w;\n       minVal = min(v,minVal);\n     }  \n     col += smoothstep(w,-w,minVal)/j;\n   }\n   fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}