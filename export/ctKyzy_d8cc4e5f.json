{"ver":"0.1","info":{"id":"ctKyzy","date":"1700398415","viewed":37,"name":"Papasito first shader","username":"Papasito","description":"This is my first shader ever in glsl, done by following the steps in this video:\nhttps://www.youtube.com/watch?v=f4s1h2YETNY\nMy idea is trying to start from scratch and try to understand as much as i can from it","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//NOTES\n/*\n  fragCoord: input vector for pixel coord\n  fragColor: output vector for pixel color (final result)\n  iResolution: shadertoy constant that stores the resolution of the render viewport\n  iTime: time of the animation\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = fragCoord / iResolution.xy;\n    //uv -= 0.5;\n    //uv *= 2.0;\n    \n    //vec2 uv = fragCoord / iResolution.xy - 0.5;\n    //uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 finalColor = vec3(0.);\n    \n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    \n    for(float i = 0.0; i < 4.0; i++){\n        //uv *= 2.;\n        //fract makes the values restart to 0 when they reach 1, making it repeats the uv\n        //uv = fract(uv);\n        //uv -= 0.5;\n        uv = fract(uv * 1.5) - 0.5;\n\n        //float d = length(uv);\n        float d = length(uv) * exp(-length(uv0));\n\n        //vec3 color = palette(d);\n        //vec3 color = palette(d + iTime);\n        //vec3 color = palette(length(uv0) + iTime);\n        vec3 color = palette(length(uv0) + i*.4 + iTime);\n        \n\n        // radius of the circle\n        //d -= 0.5; \n        //d = sin(d*8. - iTime)/8.;\n        d = sin(d*8. + iTime)/8.;\n\n        // since distance is signed, values inside the radius are positive, and the ones outside are positive\n        // getting the absolute value, values inside the circle will be positives aswell, creating a positive gradient in the interior\n        d = abs(d);\n\n        //step makes the values below the threshold becomes 0 and 1 avobe it\n        //d = step(0.1,d);\n\n        //smoothstep gives a smooth transition to the step threshold\n        //d = smoothstep(0.0, 0.1, d);\n\n        //the inverse function gives a more neon look for the gradient\n        //d = 1. - d;\n        //d = 1. / (d*50.);\n        //d = 0.02 / d;\n        d = pow(0.01 / d, 1.2);\n\n        //vec3 color = vec3(1., 0., 0.);\n        //color *= d;\n\n        finalColor += color * d;\n    }\n    //fragColor = vec4(uv, 0.,1);\n    //fragColor = vec4(color,1);\n    fragColor = vec4(finalColor,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nthis function uses trigonometric functions to get a colors palette\nhttps://iquilezles.org/articles/palettes/\nhttp://dev.thi.ng/gradients/\n*/\nvec3 palette( float t )\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1., 1., 1.);\n    vec3 d = vec3(0.263, 0.416, 0.557);\n    \n    return a+b*cos(6.28318*(c*t*d));\n}","name":"Common","description":"","type":"common"}]}