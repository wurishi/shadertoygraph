{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const int MAX_STEPS = 100;\nconst vec3 BOX = vec3(1.0);\nconst float SPHERE = 1.2;\n\nconst float THRESHOLD = 0.01;\nconst vec3 DX = vec3(THRESHOLD, 0.0, 0.0);\nconst vec3 DY = vec3(0.0, THRESHOLD, 0.0);\nconst vec3 DZ = vec3(0.0, 0.0, THRESHOLD);\n\nfloat udBox(vec3 p, vec3 b) {\n    return length(max(abs(p) - b, 0.0));\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p)-s;\n}\n\nstruct Ray {\n    vec3 position;\n    vec3 direction;\n    bool hit;\n};\n    \nfloat D(vec3 p) {\n    /* Distance function */\n    float dBox = udBox(p, BOX);\n    float dSphere = sdSphere(p, SPHERE);\n    \n    return max(-dSphere, dBox);\n}\n\n\nRay intersect(Ray ray) {\n    for (int i=0; i<MAX_STEPS; i++) {\n        float dist = D(ray.position);\n        if (dist < THRESHOLD) {\n            ray.hit = true;\n            return ray;\n        }\n        ray.position += ray.direction * dist;\n    }\n    return ray;\n}\n\nRay backstep(Ray ray) {\n    ray.position -= THRESHOLD * ray.direction;\n    return ray;\n}\n\nvec3 normal(vec3 p) {\n    return normalize(vec3(D(p+DX)-D(p-DX),\n                          D(p+DY)-D(p-DY),\n                          D(p+DZ)-D(p-DZ)));\n}\n\nvec3 Rx(vec3 vector, float angle) {\n    float rx = vector.x * cos(angle) + vector.z * sin(angle);\n    float rz = vector.z * cos(angle) - vector.x * sin(angle);\n    return vec3(rx, vector.y, rz);\n}\n\nvec3 render(Ray ray) { \n    ray = backstep(ray);\n    if (ray.hit) {\n        return normal(ray.position);\n    } else {\n        return vec3(1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect_ratio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = (uv - vec2(0.5)) * vec2(aspect_ratio, 1.0);\n    \n    float angle = iTime;\n    \n    if (iMouse.z > 0.0) {\n    \tangle = iMouse.x / iResolution.x * 6.0 + 0.5;\n    }\n        \n    vec3 camera_loc = 6.0 * vec3(-sin(angle), 0.0, -cos(angle));\n    vec3 camera_dir = vec3(sin(angle), 0.0, cos(angle));\n    \n    Ray ray;\n    ray.position = camera_loc;\n    ray.direction = Rx(normalize(vec3(p, 1.0)), angle);\n    ray.hit = false;\n    \n    ray = intersect(ray);\n    \n    vec3 col = render(ray);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldfXW2","date":"1406840688","viewed":431,"name":"Distance function with normals","username":"hughes","description":"This time, we calculate the surface normals!\n\nAlso experimenting with subtractive functions. The edges of the cut region of the box require many more iterations (100) than the previous example (16)!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","distance"],"hasliked":0,"parentid":"","parentname":""}}