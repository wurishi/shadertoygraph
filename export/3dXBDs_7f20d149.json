{"ver":"0.1","info":{"id":"3dXBDs","date":"1589240599","viewed":131,"name":"FakeCaustic","username":"lucaloris","description":"Fake caustic test and improved","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["caustic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//   \n//       __                 __           _     \n//      / /_  ___________ _/ /___  _____(_)____\n//     / / / / / ___/ __ `/ / __ \\/ ___/ / ___/\n//    / / /_/ / /__/ /_/ / / /_/ / /  / (__  ) \n//   /_/\\__,_/\\___/\\__,_/_/\\____/_/  /_/____/  \n//                                             \n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// FAKE CAUSTIC - v 1.0\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// Forked: https://www.shadertoy.com/view/Xl2XDy\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// CUSTOMIZE PARAMETER HERE\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfloat intensity = 0.08;\nint effectId = 4;\nfloat causticLineWidth = 4000.0; // higher value : thin outline ex 4000.0\nfloat causticXmove = 10.0;\nfloat causticYmove = 3.0;\nfloat turbolence = 4.0; // don't go over 10 !!!!!!!!\nfloat wigglySpeed = 2.0;\nfloat rippleEffect = 10.5;\n\n// effectId = 0 => CAUSTICHE OUTLINE TEXTURE - sfondo bianco\n// effectId = 1 => CAUSTICHE OUTLINE TEXTURE - sfondo nero\n// effectId = 2 => CAUSTICHE OUTLINE BIANCO\n// effectId = 3 => CAUSTICHE OUTLINE NERO\n// effectId = 4 => CAUSTICHE NO OUTLINE\n// \n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\n\n\n\n\n\n\n\n\n\n// Fake Caustics - written 2015 by Jakob Thomsen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//#define pi 3.1415926\nfloat pi = 3.1415926;\nfloat pi2 = 2.0 * 3.1415926;\n\nvec4 rnd(vec2 pos)\n{\n    return texture(iChannel0, pos);\n}\n\nfloat wave(vec2 uv)\n{\n    float m = 0.0;\n    float sum = 0.0;\n    float n = turbolence;\n    for(float y = 1.0; y <= n; y++)\n    {\n        for(float x = 1.0; x <= n; x++)\n        {\n            //vec4 r = rnd(0.001 * iTime + vec2(x, y) / n);\n            vec4 r = rnd(vec2(x, y) / n);\n            r.z = wigglySpeed * r.z - 1.0;\n            float a = sin(pi2 * (x * uv.x + r.x + 0.1 * iTime * causticXmove * r.z));\n            float b = sin(pi2 * (y * uv.y + r.y + 0.1 * iTime * causticYmove * r.z));\n            sum += a * b / (x * y);\n            m += 1.0 / (x * y);\n        }\n    }\n    return sum / m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 d = 1.0 / iResolution.xy;\n    vec3 nrm;\n    nrm.x = -wave(uv + vec2(-d.x, 0.0)) - wave(uv + vec2(+d.x, 0.0));\n    nrm.y = -wave(uv + vec2( 0.0,-d.y)) - wave(uv + vec2( 0.0,+d.y));\n    nrm.z = rippleEffect;\n    nrm = normalize(nrm);\n    \n    vec3 r = refract(vec3(0.0, 0.0, 1.0), nrm, 1.0);\n\n \n    fragColor = texture(iChannel0, uv.xy + r.xy*intensity);\n\n    \n    if (effectId == 0) {\n    \t// CAUSTICHE OUTLINE TEXTURE - sfondo bianco\n    \tfragColor.rgb /= pow(abs(r.z), causticLineWidth);\n    }\n    \n    if (effectId == 1) {\n    \t// CAUSTICHE OUTLINE TEXTURE - sfondo nero\n    \tfragColor.rgb *= pow(abs(r.z), causticLineWidth);\n    }\n    \n    if (effectId == 2) {\n        // CAUSTICHE OUTLINE BIANCO\n        fragColor.rgb += pow(abs(r.z), causticLineWidth);\n    }\n    \n    if (effectId == 3) {\n        // CAUSTICHE OUTLINE NERO\n        fragColor.rgb -= pow(abs(r.z), causticLineWidth);\n    }\n    \n    if (effectId == 4) {\n        // CAUSTICHE NO OUTLINE NERO\n    }\n    \n    fragColor.rg += 0.15*cos(iTime+uv.xy);\n}\n","name":"Image","description":"","type":"image"}]}