{"ver":"0.1","info":{"id":"sdByzy","date":"1643680964","viewed":122,"name":"Textured Sierpinski Triangle","username":"jt","description":"Loopless/branchless textured Sierpinski Triangle :)\nFurther development: [url=https://www.shadertoy.com/view/fdBcR3]Sierpinski Triangle SDF 2d[/url].\n","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["triangle","branchless","sierpinski","textured","loopless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/sdByzy (loopless, branchless) Textured Sierpinski Triangle written 2022-2-1 by Jakob Thomsen\n//\n// CC0 License\n//\n// To the extent possible under law, the author has dedicated\n// all copyright and related and neighboring rights to this software\n// to the public domain worldwide.\n// This software is distributed without any warranty.\n//\n// For a copy of the CC0 Public Domain Dedication see <http://creativecommons.org/publicdomain/zero/1.0/>.\n\n// tags: triangle, branchless, sierpinski, textured, loopless\n\n#define N 64.0\n\n// https://www.shadertoy.com/view/7sSczG yet another sierpinski triangle by jt\nvoid mainImage(out vec4 o, vec2 p)\n{\n    p /= iResolution.xy;\n    vec3 q =\n        min\n        (\n            // basically barycentric coordinates\n            vec3\n            (\n                1. - p.x + .5 * p.y,\n                   + p.x + .5 * p.y,\n                1.             -p.y\n            ),\n            1.0 // remove outside of main triangle\n        );\n\n    ivec3 i = ivec3(q*N);\n    int f = i.x & i.y & i.z; // inspired by FabriceNeyret2's shortest Sierpinski https://www.shadertoy.com/view/ldlfRM\n    float s = exp2(floor(log2(float(f)))) * 2.0 / N;\n    //vec2 c = fract(vec2(p.y + 2.0 * p.x, p.y - 2.0 * p.x)/s); // variant\n    vec2 c = fract(p*2.0/s+vec2(0.5, 0.0)); // variant\n    o = texture(iChannel0, c);\n}\n","name":"Image","description":"","type":"image"}]}