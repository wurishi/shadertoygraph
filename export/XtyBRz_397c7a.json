{"ver":"0.1","info":{"id":"XtyBRz","date":"1541805619","viewed":146,"name":"noise spiral","username":"MachWerx","description":"An experiment to generate procedural sound and graphics based on the same signal.","likes":0,"published":1,"flags":8,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = 2.0 * (uv.x - 0.5);\n    float y = 2.0 * (uv.y - 0.5) * (iResolution.y / iResolution.x);\n    float r = sqrt(x * x + y * y);\n    float theta = atan(y, x);\n    float spiral = sin(10.0 * PI * r + theta - 5.0 * iTime);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    col = vec3(1.0 - pulse(iTime), y, spiral > 0.0);\n    vec2 thresh = y > 0.0 ? 1.0 * signal(iTime-.001*y) : vec2(pulse(iTime+20.0 * y)) / 5.0;\n    //thresh.r = .001 * signal(54.3334).x;\n    col = vec3(x > thresh.x, x > thresh.y, spiral > 0.0 ? pulse(iTime) + 0.5 : 0.0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSoundx( float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n}\n\nvec2 mainSoundxx( float time )\n{\n    //return sin(1000.0 * time) * vec2(1.0, 1.0);\n    //return vec2( sin(time * 6.2831 * 1000.0), sin(time * 1000.0) );\n    float t = pulse(time);\n    float freq  = 6.2831 * 440.0;\n    float spread = 200.0;\n    float lFreq = freq + spread * t;\n    float rFreq = freq - spread * t;\n    return exp(-3.0*t) * vec2( sin(lFreq * t), sin(rFreq * t) );\n\n}\n\nvec2 mainSound( in int samp,float time) {\n    return signal(time);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"float PI = 3.1415926535;\n\nfloat pulse( float time )\n{\n    float cycle = min(max(time - 3.0, 0.001), 10.0 * 2.0 * PI);\n    return mod(cycle, 5.0 * sin(0.1 * cycle));\n}\n\nvec2 signal( float time )\n{\n    //return sin(1000.0 * time) * vec2(1.0, 1.0);\n    //return vec2( sin(time * 6.2831 * 1000.0), sin(time * 1000.0) );\n    float t = pulse(time);\n    float freq  = 6.2831 * 440.0;\n    float spread = 200.0;\n    float lFreq = freq + spread * t;\n    float rFreq = freq - spread * t;\n    return exp(-abs(3.0*t)) * vec2( sin(lFreq * t), sin(rFreq * t) );\n} \n ","name":"Common","description":"","type":"common"}]}