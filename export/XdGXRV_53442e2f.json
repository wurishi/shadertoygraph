{"ver":"0.1","info":{"id":"XdGXRV","date":"1465258834","viewed":330,"name":"Gold Fractal","username":"zackpudil","description":"My first rendering of a fractal.  Basically it's a bastardized version of Kali's Generators (https://www.shadertoy.com/view/Xtf3Rn).","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float tmax = 20.0;\n\nfloat map(vec3 p) {\n\tp.xz = mod(p.xz + 1.0, 2.0) - 1.0;\n\tvec4 q = vec4(p, 1);\n\tfor(int i = 0; i < 15; i++) {\n\t\tq.xyz = abs(q.xyz) - vec3(-0.02, 1.07, -0.02);\n\t\tq = 2.0*q/clamp(dot(q.xyz, q.xyz), 0.4, 1.0) - vec4(1.0, 0.0, 0.6, 0.0);\n\t}\n\n\treturn length(q.xyz)/q.w;\n}\n\nfloat march(vec3 ro, vec3 rd) {\n\tfloat d = 1.0, e = 0.0, t = 0.0;\n\n\tfor(int i = 0; i < 70; i++) {\n\t\tif(d < e || t >= tmax) break;\n\t\td = map(ro + rd*t);\n\t\te = 0.0001*(1.0 + t*0.8);\n\t\tt += d;\n\t}\n\n\treturn t;\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 n = vec3(\n\t\tmap(p + h.xyy) - map(p - h.xyy),\n\t\tmap(p + h.yxy) - map(p - h.yxy),\n\t\tmap(p + h.yyx) - map(p - h.yyx)\n\t);\n\treturn normalize(n);\n}\n\nfloat ao(vec3 p, vec3 n) {\n    float o = 0.0, s = 0.004;\n    \n    for(int i = 0; i < 15; i++) {\n        float d = map(p + n*s);\n        o += s - d;\n        s += s/(float(i) + 1.0);\n    }\n    \n    return 1.0 - clamp(o, 0.0, 1.0);\n}\n\nmat3 camera(vec3 eye, vec3 lat) {\n\tvec3 ww = normalize(lat - eye);\n\tvec3 uu = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\n\treturn mat3(uu, vv, ww);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n\n\tvec3 col = vec3(0.0);\n\n\tvec3 ro = vec3(-(iTime + 1.0)*0.05, sin((iTime + 1.0)*0.05), -0.6);\n\tvec3 rd = normalize(camera(ro, ro + vec3(0, 0, 1))*vec3(uv, 1.97));\n\n\tfloat i = march(ro, rd);\n\tif(i < tmax) {\n\t\tvec3 pos = ro + rd*i;\n\t\tvec3 nor = normal(pos);\n\t\tvec3 ref = reflect(rd, nor);\n\t\tvec3 lig = normalize(vec3(0.8, 0.7, -0.6));\n\n        col = clamp(dot(lig, nor), 0.0, 1.0)*vec3(1.00, 0.97, 0.40);\n\t\tcol += 0.25*pow(clamp(1.0 + dot(rd, nor), 0.0, 1.0), 2.0)*vec3(1.00, 0.97, 0.40)/(0.5*i);\n        \n        col *= ao(pos, nor);\n\t}\n\n\tcol = mix(col, vec3(1.0), 1.0 - exp(-0.8*i));\n\tcol = pow(col, vec3(.454545));\n\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}