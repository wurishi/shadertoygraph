{"ver":"0.1","info":{"id":"mtsyW2","date":"1691252034","viewed":107,"name":"Water Pressure Propagation","username":"kastorp","description":"static water pressure, measured as the height difference from the highest connected water surface\npressure propagation is slow (1 pixel per frame)\ndrag mouse to show the path to the surface","likes":9,"published":1,"flags":48,"usePreview":0,"tags":["water","pressure"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Water Pressure Propagation by Kastorp\n//-----------------------------------\n// in this model I just want to measure pressure, \n// which is displayed with blue saturation,  \n// in a scenario with varying water levels; \n// so for semplicity I let water level oscillate just on the left. \n// The yellow  circle shows the surface origin used to measure\n// pressure for each point, so when the left side level is below \n// the right level, that circle will be on the right, and viceversa\n//\n//TODO: \n// 1) use jfa distance to cave borderd to speed up path finding\n// 2) for each row, mark the candidate \"teleport\" water block (@fenix)\n//-------------------------------\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    I/=Z;\n    ivec4 c=T(I);\n    \n    \n    if(c.x!=WATER ) {O=(c.x==int(TERRAIN))?vec4(0.2,.2,.1,0):vec4(0.5,.5,0.3,0); return;}\n    \n    float h = //float(c.z);\n         float(I2C(c.w).y)-I.y;\n    O= vec4(0.2,0.6,1.,0)- 1.3* float(h)/R.y;    \n    \n    vec2 m = (iMouse.z>0.?iMouse.xy/Z:R*vec2(.5,.1));\n    \n      \n     if(length(vec2(I2C(T(m).w))-I+.5)<3.) O=vec4(1,1,0,0);\n     ivec2 cp=ivec2(m);\n     for(int i=0;i<STEPS;i++){\n         int di=T(cp).y-1;\n         if(cp-ivec2(I)==ivec2(0)) O= vec4(1,0,0,0);\n         if(di>=0){\n             ivec2 d =ivec2(di>1? di*2-5: 0,di<2? di*2-1: 0);\n             cp+=d;            \n         }else break;     \n    }\n    O=pow(O,vec4(.4));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//O.x= material 0=terrain,1=water,2=air\n//O.y= surface target direction\n//O.w= surface target id\n #define OPP(A,B) (((A&2) == (B&2)) && ((A&1)!=(B&1)))\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    if(I.x>R.x){ O=vec4(0); return;}\n    O.x = AIR*min(max(\n            step(.05,(snoise(vec3(I/R.y*8. ,.3+ float(iFrame)/60.*CV))*.8)),\n            step(length(I-R*vec2(.5,.1))/R.y,.1)\n            ),\n            1.-step(.3,I.y/R.y)*step(abs(I.x/R.x-.5),.01)\n        );\n    \n    if(O.x==AIR && step(I.y,R.y*.6+R.y*.3*sin(float(iFrame)*.003)*(I.x>R.x*.5?0.:1.))>0.) O.x=float(WATER) ;\n    if(iFrame==0){O.yw=vec2(0); return;}\n\n    ivec4 c= T(I);     \n    if(c.x==WATER){\n       //if no target, set self as target\n       if(c.w==0) {c.w=C2I(I);c.y=0;c.z=0;}\n       for(int i=3;i>=0;i--){\n           //check neighbors with highest target\n            ivec2 d =ivec2(i>1? i*2-5: 0,i<2? i*2-1: 0);\n            ivec4 n=T(ivec2(I)+d);\n            if(n.x==WATER){\n                if(I2C(n.w).y==I2C(c.w).y  && n.z<c.z && !OPP(n.y-1,i)) {c.w=n.w;  c.y=i+1; c.z=n.z+1;}  \n                if(I2C(n.w).y>I2C(c.w).y) {c.w=n.w;  c.y=i+1; c.z=n.z+1;}  \n                \n            }\n        }                        \n        ivec2 cp=ivec2(I);\n        ivec4 n=c;\n        //if connected to target, check path\n        if(c.w>0 && c.y>0) for(int i=0;i<STEPS;i++){\n\n             int di=n.y-1;\n             if(di>=0 &&c.x==WATER && i<STEPS -1){\n                 //step is ok \n                 ivec2 d =ivec2(di>1? di*2-5: 0,di<2? di*2-1: 0);\n                 cp+=d;\n             }\n             else {\n                 //path interrupted\n                 \n                if(di>=0) for(int i=3;i>=0;i--){\n                   //check neighbors ... find alternate path\n                    ivec2 d2 =ivec2(i>1? i*2-5: 0,i<2? i*2-1: 0);\n                    ivec4 n2=T(ivec2(I)+d2);\n                   \n                     if(n2.x==WATER && i<STEPS -1 &&!OPP(n2.y-1,i)){\n                         n=n2;\n                         cp+=d2;\n                         continue;\n                      }\n                  }\n                 //no alternate path, set interruption as target\n                 c.w=C2I(cp);   c.z=i;\n                 break;\n             }\n             //move to next path step\n             n= T(cp);\n        }\n        \n        //if close to cave, use it as last resort\n        bool w=true;\n        for(int j=3;j>=0;j--){\n            ivec2 d =ivec2(j>1? j*2-5: 0,j<2? j*2-1: 0);\n            w = w && (T(ivec2(I)+d).x!=int(TERRAIN));\n        }\n        if(!w) c.z+=3;\n        \n        //if higher than target, set self as target\n        if(C2I(I)>c.w) {c.w=C2I(I);c.y=0;c.z=0;}\n    }else{\n        c.w=0; c.y=0;c.z=0;\n    }\n      \n    O.yzw=vec3(c.yzw);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//configurables:\n#define STEPS 600 //max path length\n#define MAXH 200. //max height\n#define CV 0.04 //cave variations \n\n//--------------------------\n#define TERRAIN 0.\n#define WATER 1\n#define AIR 2.\n\n#define T(c) ivec4(texelFetch(iChannel0,ivec2(c),0))\n#define R (iResolution.y>200.?vec2(iResolution.x/iResolution.y,1)*MAXH:iResolution.xy) \n#define Z (iResolution.y/R.y)\n#define I2C(f)  ivec2(int(f)%4096,int(f)/8192)\n#define C2I(c)  (int(c.y)*8192+int(c.x))\n\n// Optimized AshimaSimplexNoise by @makio64 https://www.shadertoy.com/view/Xd3GRf\n// Original : https://github.com/ashima/webgl-noise/blob/master/src/noise3D.glsl\nlowp vec4 permute(in lowp vec4 x){return mod(x*x*34.+x,289.);}\nlowp float snoise(in mediump vec3 v){\n  const lowp vec2 C = vec2(0.16666666666,0.33333333333);\n  const lowp vec4 D = vec4(0,.5,1,2);\n  lowp vec3 i  = floor(C.y*(v.x+v.y+v.z) + v);\n  lowp vec3 x0 = C.x*(i.x+i.y+i.z) + (v - i);\n  lowp vec3 g = step(x0.yzx, x0);\n  lowp vec3 l = (1. - g).zxy;\n  lowp vec3 i1 = min( g, l );\n  lowp vec3 i2 = max( g, l );\n  lowp vec3 x1 = x0 - i1 + C.x;\n  lowp vec3 x2 = x0 - i2 + C.y;\n  lowp vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  lowp vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  lowp vec3 ns = .142857142857 * D.wyz - D.xzx;\n  lowp vec4 j = -49. * floor(p * ns.z * ns.z) + p;\n  lowp vec4 x_ = floor(j * ns.z);\n  lowp vec4 x = x_ * ns.x + ns.yyyy;\n  lowp vec4 y = floor(j - 7. * x_ ) * ns.x + ns.yyyy;\n  lowp vec4 h = 1. - abs(x) - abs(y);\n  lowp vec4 b0 = vec4( x.xy, y.xy );\n  lowp vec4 b1 = vec4( x.zw, y.zw );\n  lowp vec4 sh = -step(h, vec4(0));\n  lowp vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy;\n  lowp vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww;\n  lowp vec3 p0 = vec3(a0.xy,h.x);\n  lowp vec3 p1 = vec3(a0.zw,h.y);\n  lowp vec3 p2 = vec3(a1.xy,h.z);\n  lowp vec3 p3 = vec3(a1.zw,h.w);\n  lowp vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  lowp vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return -0.334 +.5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\n\n","name":"Common","description":"","type":"common"}]}