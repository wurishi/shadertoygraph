{"ver":"0.1","info":{"id":"lXSGzd","date":"1708721103","viewed":66,"name":"Raymarching Creative Intro","username":"CSV","description":"Based on https://www.youtube.com/watch?v=khblXafu7iA","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdfSphere(vec3 p, float s)\n{\n     return length(p)-s;\n}\n\nfloat sdfBox(vec3 p, vec3 b)\n{\n     vec3 q = abs(p)-b;\n     return length(max(q,0.0)) + min(max(q.x, q.z),0.0);\n}\n\nfloat smin(float a, float b, float k)\n{\n    float h = max(k-abs(a-b),0.0/k);\n    return min(a,b)-h*h*(1.0/6.0);\n}\n\nmat2 rot2D(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n// Distance to the scene\nfloat map(vec3 p)\n{\n    p.z += iTime * .4; // Fwd movement\n    p.xy = (fract(p.xy)-.5); // spacing 1\n    p.z = mod(p.z,.25)-.125; // spacing .25\n  //  p = fract(p)-.5; // Space repetition\n    float box = sdfBox(p, vec3(.1)); //Cube SDF\n    return box;\n}\n\n// cosine based palette, 4 vec3 params\nvec3 palette(float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.0, 0.10, 0.20);\n     \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. -iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. -iResolution.xy) / iResolution.y;\n\n    // Intialisation\n    vec3 ro = vec3(0,0,-3); //ray origin\n    vec3 rd = normalize(vec3(uv, 1)); //ray direction\n    vec3 col = vec3(0); // final pixel colour\n    \n    float t = 0.; // total distance travelled from camera position\n    \n    int i; //Raymarching\n    for(i = 0; i < 80; i++)\n    {\n        vec3 p = ro + rd * t; // position along the ray\n        p.xy *= rot2D(t*.2*m.x); // rotate around z axis\n        p.y += sin(t*(m.y+1.)*.5)*.35; // wiggle ray\n        float d = map(p); // current distance to the scene\n        t += d; // march the ray \n        if(d < 0.001 || t > 100.) break; // early stop if close enough\n    }\n    \n    // Colouring\n    col = palette(t*0.04+float(i)*0.005); // colour based on distance\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}