{"ver":"0.1","info":{"id":"ctKyRD","date":"1699995589","viewed":102,"name":"Neutron Star?","username":"QDestTM","description":"Just learning shaders :)","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n\nconst vec4 colmod = vec4(0.0, 0.3, 1.0, 0.0);\nconst float freq = 3.0;\nconst float N = 10.0;\n\nmat2 scale(vec2 scl, float stretch) {\n    vec2 _scl = (vec2(1.0) / scl);\n\n    return mat2(\n        _scl.x, stretch,\n        stretch, _scl.y\n    \n    );\n}\n\nmat2 rotate(float angle) {\n    return mat2(\n        cos(angle),-sin(angle),\n        sin(angle),cos(angle)\n    );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 color = vec4(0.0);\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\n\n    vec2 uv = (fragCoord.xy / iResolution.xy) - 0.5;\n    uv *= ratio; uv += 0.5;\n    \n    // Small spheres\n    vec2 translate, uv2;\n    \n    for ( float i = 1.0; i <= N; i++ ) {        \n        float x = step(0.0, i);\n    \n        translate = vec2(\n            cos(iTime + i) * i,\n            sin(iTime + i)\n        );\n        \n        uv2 = uv + translate * 0.1;\n        color += 0.01/distance(uv2, vec2(0.5)) * i / 4.0;\n    }\n    \n      \n    // Central glow\n    color += 0.01/distance(uv, vec2(0.5)) * 12.0;\n    \n    \n    // Jets\n    float f = sin(iTime * freq);\n    \n    uv -= 0.5;\n    uv *= rotate( TAU + (f / 5.0) );\n    uv *= scale( vec2(1.1), 1.05 + (f / 15.0));\n    uv += 0.5;\n    \n    float jd = distance(uv, vec2(0.5));\n    color += 0.01/jd * 2.0;\n    \n    // Setting color\n    fragColor = color * colmod;\n}","name":"Image","description":"","type":"image"}]}