{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// spiral SDF.\n// Most of the code by iq: https://www.shadertoy.com/view/Xds3zN\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A list of usefull distance function to simple primitives, and an example on how to \n// do some interesting boolean operations, repetition and displacement.\n//\n// More info here: https://iquilezles.org/articles/distfunctions\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\n#define PI 3.14159\n\n//Draw a spiral with twisting and superquadric section shape\n//c componenets must be integers and non simultenaousely equal to 0\n//c.x is the number of branches\n//c.y is the \"bending\" of the spiral (Actually it's c.y/c.x)\nfloat spiral(vec3 p, vec2 c, float th){\n\tfloat r=length(p.xy);\n\tvec2 f=vec2(log(r),atan(p.y,p.x))*0.5/PI;//Log-polar coordinates\n\tfloat d=f.y*c.x-f.x*c.y;//apply rotation and scaling.\n\td=fract(d);//\"fold\" d to [0,1] interval\n\td=(d-0.5)*2.*PI*r/length(c);//(0.5-abs(d-0.5))*2.*PI*r/length(c);\n\t\n\tvec2 pp=vec2(d,p.z);\n\tfloat a=20.*sin(3.*iTime)*f.x;//twisting angle\n\tmat2 m=mat2(vec2(cos(a),-sin(a)), vec2(sin(a),cos(a)));\n\tpp=m*pp;//apply twist\n\tpp=abs(pp);\n\tfloat e=6.5+5.*sin(iTime);//superquadric param\n\treturn 0.9*(pow(pow(pp.x,e)+pow(pp.y,e),1./e)-th*r);//distance have to be scaled down because this is just an approximation.\n}\n\n//Draws two perpendicular spirals\nfloat dspiral(vec3 p, vec2 c, float th){\n\tfloat r=length(p.xy);\n\tvec2 f=vec2(log(r),atan(p.y,p.x))*0.5/PI;\n\tfloat d=f.y*c.x-f.x*c.y;\n\tfloat d1=-f.y*c.y-f.x*c.x;\n\td=fract(d); d1=fract(d1);\n\td=(0.5-abs(d-0.5))*2.*PI*r/length(c);\n\td1=(0.5-abs(d1-0.5))*2.*PI*r/length(c);\n\treturn 0.9*min(sqrt(d*d+p.z*p.z)-th*r, sqrt(d1*d1+p.z*p.z)-th*r);\n}\n\nfloat dspiral2(vec3 p, vec2 c, float th){\n\treturn min(spiral(p, c, th), spiral(p, vec2(-c.y,c.x), th));\n}\n//----------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n#if 0\n    vec2 res = opU( vec2( sdPlane(pos), 1.0 ),\n\t                vec2( spiral( pos.xzy-vec3( -.5,.5, 0.1), vec2(3.,10.), 0.05 ), 46.9 ) );\n#else\n\tvec2 c = vec2(floor(17.*fract(0.01*iTime))+1., floor(4.*fract(0.05*iTime))+1.);\n\tvec2 res = opU( vec2( sdPlane(pos), 1.0 ),\n\t                vec2( dspiral2( pos.xzy-vec3( -.5,.5, 0.1), c, 0.03 ), 46.9 ) );\n#endif\n\treturn res;\n}\n\n\n\n\nvec2 castRay( in vec3 ro, in vec3 rd, in float maxd )\n{\n\tfloat precis = 0.001;\n    float h=precis*2.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<60; i++ )\n    {\n        if( abs(h)<t*precis||t>maxd ) break;//continue;// //break is much faster when using native OGL mode\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t    m = res.y;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k )\n{\n\t//return 1.;\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n\t\tif( t<maxt )\n\t\t{\n        float h = map( ro + rd*t ).x;\n        res = min( res, k*h/t );\n        t += h;//0.02;//\n\t\t}//else break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    float sca = 1.0;\n    for( int aoi=0; aoi<5; aoi++ )\n    {\n        float hr = 0.01 + 0.05*float(aoi);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        totao += -(dd-hr)*sca;\n        sca *= .75;\n    }\n    return clamp( 1.0 - 4.0*totao, 0.0, 1.0 );\n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.0);\n    vec2 res = castRay(ro,rd,20.0);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n\n\t\t//col = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\tcol = vec3(0.6) + 0.4*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        float ao = calcAO( pos, nor );\n\n\t\tvec3 lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\n\t\tfloat sh = 1.0;\n\t\tif( dif>0.02 ) { sh = softshadow( pos, lig, 0.02, 10.0, 8.0 ); dif *= sh; }\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 1.80*amb*vec3(0.10,0.11,0.13)*ao;\n        brdf += 1.80*bac*vec3(0.15,0.15,0.15)*ao;\n        brdf += 0.8*dif*vec3(1.00,0.90,0.70);\n\n\t\tfloat pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n\t\tfloat spe = sh*pow(pp,16.0);\n\t\tfloat fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n\t\tcol = col*brdf + vec3(1.0)*col*spe + 0.2*fre*(0.5+0.5*col);\n\t\t\n\t}\n\n\tcol *= exp( -0.01*t*t );\n\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( -0.5+3.2*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n\tvec3 ta = vec3( -0.5, -0.4, 0.5 );\n\t\n\t// camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n\t\n    vec3 col = render( ro, rd );\n\n\tcol = sqrt( col );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ls2GRz","date":"1382991458","viewed":1624,"name":"Spiral tiling","username":"knighty","description":"Spiral tiling.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","spiral"],"hasliked":0,"parentid":"","parentname":""}}