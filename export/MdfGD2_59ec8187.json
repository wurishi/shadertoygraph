{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// this software is released into public domain\n// For more information, please refer to http://unlicense.org/\n\nfloat sat( float t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\nvec2 sat( vec2 t ) {\n\treturn clamp( t, 0.0, 1.0 );\n}\n// vec3 sat( vec3 v ) {\n\t// return clamp( v, 0.0f, 1.0f );\n// }\n\n//remaps inteval [a;b] to [0;1]\nfloat remap( float t, float a, float b ) {\n\treturn sat( (t - a) / (b - a) );\n}\n\n//note: /\\ t=[0;0.5;1], y=[0;1;0]\nfloat linterp( float t ) {\n\treturn sat( 1.0 - abs( 2.0*t - 1.0 ) );\n}\n\n//note: [0;1]\nfloat rand( vec2 n ) {\n  return fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\n//note: [-1;1]\nfloat srand( vec2 n ) {\n\treturn rand(n) * 2.0 - 1.0;\n}\n\nfloat mytrunc( float x, float num_levels )\n{\n\treturn floor(x*num_levels) / num_levels;\n}\nvec2 mytrunc( vec2 x, vec2 num_levels )\n{\n\treturn floor(x*num_levels) / num_levels;\n}\n\nvec3 rgb2yuv( vec3 rgb )\n{\n\tvec3 yuv;\n\tyuv.x = dot( rgb, vec3(0.299,0.587,0.114) );\n\tyuv.y = dot( rgb, vec3(-0.14713, -0.28886, 0.436) );\n\tyuv.z = dot( rgb, vec3(0.615, -0.51499, -0.10001) );\n\treturn yuv;\n }\n vec3 yuv2rgb( vec3 yuv )\n {\n\tvec3 rgb;\n\trgb.r = yuv.x + yuv.z * 1.13983;\n\trgb.g = yuv.x + dot( vec2(-0.39465, -0.58060), yuv.yz );\n\trgb.b = yuv.x + yuv.y * 2.03211;\n\treturn rgb;\n }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat THRESHOLD = 0.1 + iMouse.x / iResolution.x;\n\tfloat time_s = mod( iTime, 32.0 );\n\n\tfloat glitch_threshold = 1.0 - THRESHOLD;\n\tconst float max_ofs_siz = 0.1; //TOOD: input\n\tconst float yuv_threshold = 0.5; //TODO: input, >1.0f == no distort\n\tconst float time_frq = 16.0;\n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0 -  uv.y;\n\t\n\tconst float min_change_frq = 4.0;\n\tfloat ct = mytrunc( time_s, min_change_frq );\n\tfloat change_rnd = rand( mytrunc(uv.yy,vec2(16)) + 150.0 * ct );\n\n\tfloat tf = time_frq*change_rnd;\n\n\tfloat t = 5.0 * mytrunc( time_s, tf );\n\tfloat vt_rnd = 0.5*rand( mytrunc(uv.yy + t, vec2(11)) );\n\tvt_rnd += 0.5 * rand(mytrunc(uv.yy + t, vec2(7)));\n\tvt_rnd = vt_rnd*2.0 - 1.0;\n\tvt_rnd = sign(vt_rnd) * sat( ( abs(vt_rnd) - glitch_threshold) / (1.0-glitch_threshold) );\n\n\tvec2 uv_nm = uv;\n\tuv_nm = sat( uv_nm + vec2(max_ofs_siz*vt_rnd, 0) );\n\n\tfloat rnd = rand( vec2( mytrunc( time_s, 8.0 )) );\n\tuv_nm.y = (rnd>mix(1.0, 0.975, sat(THRESHOLD))) ? 1.0-uv_nm.y : uv_nm.y;\n\n\tvec4 smpl = texture( iChannel0, uv_nm, -10.0 );\n\tvec3 smpl_yuv = rgb2yuv( smpl.rgb );\n\tsmpl_yuv.y /= 1.0-3.0*abs(vt_rnd) * sat( yuv_threshold - vt_rnd );\n\tsmpl_yuv.z += 0.125 * vt_rnd * sat( vt_rnd - yuv_threshold );\n\tfragColor = vec4( yuv2rgb(smpl_yuv), smpl.a );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdfGD2","date":"1415441649","viewed":2522,"name":"glitch 01, shampain","username":"hornet","description":"mouse-xpos to vary intensity\nFirst glitch effect from the demo 'shampain': http://www.pouet.net/prod.php?which=60539","likes":46,"published":1,"flags":0,"usePreview":0,"tags":["postprocess","glitch","digital"],"hasliked":0,"parentid":"","parentname":""}}