{"ver":"0.1","info":{"id":"flyBWw","date":"1664559277","viewed":136,"name":"Float with big mantissa","username":"munrocket","description":"Floating point expansion with 47bit mantissa, 1bit sign, 8bit exponent, also known as dobule-float.\nNumber stored as unevaluated sum of two float32 and uses error-free arithmetic algorithms.\nFloat with big exponent: https://www.shadertoy.com/view/Ddl3D2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["precision","double","float","bigfloat"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License. Â© 2022 munrocket\n\n// Implementation that can use hardware fma for faster multimplication\n// Looks like it may not exist in every GPU (iPhone 6 not supported)\n// Implementation with softfma: https://www.shadertoy.com/view/WsXGzj\n\n// To turn off fast-math mode compilation in WebGL we need to wrap\n// each FLOP with if statement, except fma, it become fused.\n// On native graphics API you can turn off fusing with flag compilation.\n// Additional information: https://github.com/munrocket/double.js\n\n// You can optimize this lib for SIMD arithmetic and perform\n// 4 op at once so add22 and twoProd can be faster with it in theory.\n\nfloat add(float a, float b) { return (b != 0.) ? a + b : a; }\nfloat sub(float a, float b) { return (b != 0.) ? a - b : a; }\nfloat mul(float a, float b) { return (b != 1.) ? a * b : a; }\nfloat div(float a, float b) { return (b != 1.) ? a / b : a; }\nfloat fma(float a, float b, float c) { return a * b + c; }\n\n#define twoProd twoProdSoftware\n\nvec2 twoProdHardware(float a, float b) {\n  float ab = mul(a, b);\n  return vec2(ab, fma(a, b, -ab));\n}\n\nvec2 twoProdSoftware(float a, float b) {\n  float ca = mul(a, 8193.);\n  float cb = mul(b, 8193.);\n  float a1 = sub(ca, sub(ca, a));\n  float b1 = sub(cb, sub(cb, b));\n  float a2 = sub(a, a1);\n  float b2 = sub(b, b1);\n  float c11 = mul(a, b);\n  return vec2(c11, add(mul(a2, b2), add(mul(a2, b1),\n    add(mul(a1, b2), sub(mul(a1, b1), c11)))));\n}\n\nvec2 fastTwoSum(float a, float b) {\n  float s = add(a, b);\n  return vec2(s, sub(b, sub(s, a)));\n}\n\nvec2 twoSum(float a, float b) {\n  float s = add(a, b);\n  float b1 = sub(s, a);\n  return vec2(s, add(sub(b, b1), sub(a, sub(s, b1))));\n}\n\nvec2 add22(vec2 X, vec2 Y) {\n  vec2 S = twoSum(X[0], Y[0]);\n  vec2 T = twoSum(X[1], Y[1]);\n  vec2 V = fastTwoSum(S[0], add(S[1], T[0]));\n  return fastTwoSum(V[0], add(T[1], V[1]));\n}\n\nvec2 sub22(vec2 X, vec2 Y) {\n  return add22(X, -Y);\n}\n\nvec2 mul22(vec2 X, vec2 Y) {\n  vec2 S = twoProd(X[0], Y[0]);\n  float t = mul(X[0], Y[1]);\n  float c = fma(X[1], Y[0], mul(X[0], Y[1]));\n  return fastTwoSum(S[0], add(S[1], c));\n}\n\nvec2 div22(vec2 X, vec2 Y) {\n  float s = div(X[0], Y[0]);\n  vec2 T = twoProd(s, Y[0]);\n  float c = add(sub(sub(X[0], T[0]), T[1]), X[1]);\n  return fastTwoSum(s, div(sub(c, mul(s, Y[1])), Y[0]));\n}\n\n//////// end of the library /////////\n\nvec2 sqrt2(vec2 X) {\n  float s = sqrt(X[0]);\n  vec2 T = twoProd(s, s);\n  float c = add(sub(sub(X[0], T[0]), T[1]), X[1]);\n  return fastTwoSum(s, div(mul(c, 0.5), s));\n}\n\nvec4 dcadd(vec4 a, vec4 b){\n  return vec4(add22(a.xy, b.xy), add22(a.zw, b.zw));\n}\n\nvec4 dcsub(vec4 a, vec4 b){\n  return vec4(sub22(a.xy, b.xy), sub22(a.zw, b.zw));\n}\n\nvec4 dcmul(vec4 a, vec4 b){\n  return vec4(sub22(mul22(a.xy, b.xy), mul22(a.zw, b.zw)),\n              add22(mul22(a.xy, b.zw), mul22(a.zw, b.xy)));\n}\n\nvec2 dclen(vec4 a) {\n  return add22(mul22(a.xy, a.xy), mul22(a.zw, a.zw));\n}\n\nvec4 fcmul(vec4 c, vec2 k) {\n  return vec4(mul22(c.xy, k), mul22(c.zw, k));\n}\n\nconst int imax = 1000;\nconst float zoom = 7.4e5;\n//const int imax = 1800;\n//const float zoom = 7.4e12;\n\nconst vec4 p0 = vec4(-2.3512555e-1, -4.171102e-9, 8.2721575e-1, -1.7312747e-8);\nvec2 d(float a) { return vec2(a, 0); }\nvec4 dc(vec2 c) { return vec4(c.x, 0, c.y, 0); }\nvec4 col(float i) {\n  return .1+.9*cos(log(i*i)*vec4(1, 2, 2.9,0));\n}\n\nvec4 single_fractal(vec4 o) {\n  vec2 c = iResolution.xy, z = gl_FragCoord.xy;\n  c = z = (z-.5*c)/(zoom)/c.y + p0.xz;\n  for (int i = 0; i < imax; i++) {\n    if(dot(z = mat2(z,-z.y,z.x)*z + c, z) > 4.)\n      o = col(float(i) / float(imax));\n  }\n  return o;\n}\n\nvec4 double_fractal(vec4 o) {\n  vec2 c0 = iResolution.xy, z0 = gl_FragCoord.xy;\n  vec4 z, c = z = dcadd(fcmul(dcsub(dc(z0), dc(.5*c0)),\n    div22(d(1.), twoProd(c0.y, zoom))), p0);\n  for (int i = 0; i < imax; i++) {\n    if(dclen(z = dcadd(dcmul(z, z), c)).x > 4.)\n      o = col(float(i) / float(imax));\n  }\n  return o;\n}\n\nvoid mainImage( out vec4 o, in vec2 fc ) {\n  vec2 uv = fc / iResolution.xy;\n  if (uv.x + uv.y < 1.) {\n    o = single_fractal(o);\n  } else {\n    o = double_fractal(o);\n  }\n  o -= smoothstep(.0025, .001, abs(uv.x+uv.y-1.));\n  o += text(fc/iResolution.y, iChannel0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// UI TEXT\n\n#define C(c) U.x-=.5; O+= char(U,96+c,tex)\nvec4 char(vec2 p, int c, sampler2D tex) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad(tex, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\n//text2num: https://www.boxentriq.com/code-breaking/letters-to-numbers\n//num2glsl: s='';\"nums\".split(' ').forEach(n => s += `C(${n});`);console.log(s);\nvec4 text(vec2 uv, sampler2D tex) {\n    vec4 O = vec4(0.0);\n    float fontsize = 5.;\n    vec2 pos = vec2(1.2, .85);\n    vec2 U = (uv - pos)*64.0/fontsize;\n    C(2);C(9);C(7); U.x-=.5; //big\n    C(13);C(1);C(14);C(20);C(9);C(19);C(19);C(1);//mantissa\n    pos = vec2(.0, .06);\n    U = (uv - pos)*64.0/fontsize;\n    C(6);C(12);C(15);C(1);C(20);//float\n    return vec4(2.*O.r);\n}","name":"Common","description":"","type":"common"}]}