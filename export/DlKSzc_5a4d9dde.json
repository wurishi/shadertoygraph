{"ver":"0.1","info":{"id":"DlKSzc","date":"1686255706","viewed":40,"name":"Logit Space","username":"rec1dite","description":"This shader demonstrates how an infinite coordinate space can be mapped to a finite space.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["maths"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float gridSize = 1.5;\nconst float lineSize = 0.88;\n\nconst bool toggleLogitSpace = true;\nconst bool toggleGridDisplay = true;\n\n\n// This is the inverse of the sigmoid function\n// This allows us to map the range [0, 1] to (-inf, inf) for each x, y coordinate\nfloat logit(float x) {\n    return log(x/(1.0-x))/log(gridSize);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    if (toggleLogitSpace) {\n        uv = vec2(logit(uv.x), logit(uv.y));\n    }\n\n    uv = mod(uv, 1.0);\n\n    vec3 col = vec3(uv, 0.0);\n    \n    // Grid lines instead\n    if (toggleGridDisplay) {\n\n        if (uv.x > lineSize || uv.y > lineSize) {\n            col = vec3(1, 1, 1);\n        }\n        else {\n            col = vec3(0, 0, 0);\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}