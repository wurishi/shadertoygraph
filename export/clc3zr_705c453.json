{"ver":"0.1","info":{"id":"clc3zr","date":"1682003748","viewed":197,"name":"Fast Pixel Sorter","username":"mintyLemon","description":"Fast filter that sorts pixels in a column in O(n) time complexity.\n\nThis only works for a single color since it uses bins to store the number of observed pixels of that color.\n3-channel color would need 255 * 255 * 255 bins per column.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["filter","glitch","sort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define max_brightness 200.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float height = iResolution.y;\n    float u = fragCoord.x;\n    float current_pixel = fragCoord.y;\n    float count = 0.;\n    float pixel_index = 1.;\n    float i = 0.;\n    for(; i < max_brightness; i++) {\n        float n_of_brightness = pixel(BUF_A, vec2(u,i)).x;\n        count += n_of_brightness;\n        \n        if (count >= current_pixel) {\n            pixel_index = count;\n            break;\n        }\n    }\n    \n\n    // Output to screen\n    float brightness = i / 255.;\n    fragColor = vec4(brightness,brightness,brightness,1.);\n    //fragColor = pixel(BUF_IMAGE, vec2(u, count));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float height = iResolution.y;\n    float u = fragCoord.x;\n    float query_brightness = fragCoord.y / 255.;\n    float next_b = (fragCoord.y + 1.) / 255.;\n    \n    float count = 0.;\n    for (float i = 0.; i < height; i++) {\n        vec4 pixel_color = pixel(BUF_IMAGE, vec2(u, i));\n        float pixel_brightness = pixel_color.y;\n        \n        if (pixel_brightness >= query_brightness && pixel_brightness < next_b) {\n            count += 1.;\n        }\n    }\n    \n    fragColor = vec4(count, count, count, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BUF_A iChannel0\n#define BUF_IMAGE iChannel1\n\n#define R iResolution\n\n#define pixel(a, p) texture(a, (p)/R.xy)","name":"Common","description":"","type":"common"}]}