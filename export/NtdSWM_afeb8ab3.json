{"ver":"0.1","info":{"id":"NtdSWM","date":"1639229365","viewed":250,"name":"auto-normalization for free","username":"FabriceNeyret2","description":"Computed values might be hard to bound in [0,1] or [-1,1].   ( red where > 1 , blue where < -1. ).\nright: use MIPmap to compute the (approx) max value of a buffer for free ( used for instance for normalizing the values).","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy, U = u/R;\n    O = texture(iChannel0, U );\n    if (U.x > .5 ) O /= decodeMax( texture(iChannel0, U ,99.).a);\n    \n    if (O.x> 1.) O = vec4(1,0,0,0);               // show overfow in red\n    if (O.x<-1.) O = vec4(0,0,1,0);               // show overfow in red\n    if ( int(u) == int(R)/2 ) O = vec4(0,1,0,0);  // green separator\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    U *= 10./iResolution.xy;\n    float x = U.x, y = U.y,\n          v =    sin(x+sin(y+iTime)) + cos(x-iTime)\n               + cos(y+cos(x)-iTime)\n               + sin(5.*x+9.*length(U))\n               + cos(5.*y+9.*length(U));\n               \n    O = vec4( vec3(v), encodeMax(v) );\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// POW must be highest possible not causing overflow: adapt it to your range of values.\n#define POW 55.\n#define encodeMax(v) pow(max(0.,v),POW)\n#define decodeMax(v) pow(v,1./POW)","name":"Common","description":"","type":"common"}]}