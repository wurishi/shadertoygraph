{"ver":"0.1","info":{"id":"McBGDh","date":"1704298829","viewed":51,"name":"Sparkle - distance 2D","username":"Oneleven","description":"See top of the shader\n\"1\" to show/hide bezier points","likes":2,"published":1,"flags":16,"usePreview":0,"tags":["2d","distancefield","sdf","star","sparkle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Quadratic Bezier - distance 2D\" by iq. https://shadertoy.com/view/MlKcDD\n// 2024-01-01 21:56:37\n\n// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// ==================================================\n\n// A Sparkle SDF based on quadratic bezier SDF. I derivied the name from the sparkles emoji https://emojipedia.org/sparkles\n\n// There are existing implementations, but none of them were sufficient for me:\n// 1. Smoothsteping uv.x*uv.y - does not provide correct SDF, hard to obtain thin ends\n// 2. Tractrix Star by oneshade https://www.shadertoy.com/view/sdsXWN - does not provide ability to alter curvature\n// 3. BlobbyCross by iq https://www.shadertoy.com/view/NssXWM - low k values produce indesirable islands instead of thin shaped star\n\n// This implementation is not perfect, but I couldn't achieve exact solution without using beziers\n// I'm planning to use it in offline texture generation with Material Maker, so for that case it's sufficient\n// Though, I did make this parabola segment in Desmos https://www.desmos.com/calculator/o9fb74xdsm\n// I'll gladly appreciate any suggetstion on how to improve this\n\n\n#define keyToggle(ascii)  ( texelFetch(iChannel3,ivec2(ascii,2),0).x > 0.)\nconst float PI = 3.14159265;\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n// signed distance to a quadratic bezier\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{\n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n        \n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        res = dot2(q);\n    \tsgn = cro(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cro(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cro(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n\n    }\n    \n    return sqrt( res )*sign(sgn);\n}\n\n//https://www.shadertoy.com/view/XdXcRB\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n\n\treturn d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nfloat sdSparkle(vec2 p, float k, float r, float s)\n{\n    //in case where the sides are straight use rhombus SDF to avoid glitch\n    if (k==0.5) return sdRhombus(p, vec2(r));\n    \n    k = min(k,1.0-1e-7); //clamp k \n\n    //symmetries\n    p=abs(p);\n    if (p.x>(p.y)) p=p.yx+1e-34;\n    \n    r=r-s; //compensate smoothness\n    \n    //bezier points\n    vec2 v0 = vec2(0,1)*r;\n    vec2 v1 = (k<0.5) ? vec2(0, 2.*k)*r : vec2(2.*(k-0.5), 1.)*r;\n    vec2 v2 = vec2(k)*r;\n    \n    return -sdBezier(p, v0, v1, v2) - s;\n}\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;    \n    \n    float k = sin(-iTime*0.2*2.*PI)*0.4+0.4; //shape \n    float r = 0.5;  //radius\n    float s = 0.0;  //smoothness\n   \n    float d = sdSparkle(p, k, r, s);\n    \n    //colors\n    float f = 0.0;\n    vec3 col = vec3(1.0) - vec3(0.1,0.4,0.7)*sign(d);\n\tcol *= 1.0 - exp(-4.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    \n    if( iMouse.z>0.001 )\n    {\n        d = sdSparkle(m, k, r, s); \n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n \n \n    if (keyToggle(49)) //press \"1\" to show/hide bezier points\n    {\n        vec2 v0 = vec2(0,1)*r;\n        vec2 v1 = (k<0.5) ? vec2(0, 2.*k)*r : vec2(2.*(k-0.5), 1.)*r;\n        vec2 v2 = vec2(k)*r;\n    \n        d = min( udSegment(p,v0,v1),\n                 udSegment(p,v1,v2) );\n        d = min( d, length(p-v0)-0.02 );\n        d = min( d, length(p-v1)-0.02 );\n        d = min( d, length(p-v2)-0.02 );\n        col = mix( col, vec3(1,0,0), 1.0-smoothstep(0.0,0.007,d) );\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}