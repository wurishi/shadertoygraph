{"ver":"0.1","info":{"id":"WdyfWV","date":"1607935460","viewed":107,"name":"Pastel Smoke Swirl","username":"mherreshoff","description":"Animates a complex polynomial and textures it with pastel smoke to produce hypnotic shifting color patterns","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["2d","rainbow","complex","hypnotic","polynomial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float zoom = 7.;\n\n// Trig stuff:\nfloat pi = 3.14159265;\nfloat atan2 (in vec2 c) {\n  float offset = 0.;\n  if (c.y < 0.) {\n    c *= -1.;\n    offset = pi;\n  }\n  if (c.x < 0.) {\n    c.xy = abs(c.yx);\n    offset += pi/2.;\n  }\n  return offset + atan(c.y/c.x);\n}\n\n// Complex number stuff:\nvec2 cmul(in vec2 a, in vec2 b) {\n  return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\nvec2 cdiv(in vec2 a, in vec2 b) {\n  return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)/(b.x*b.x+b.y*b.y);\n}\n\n\nvec3 complexColor(in vec2 c) {\n  vec2 uv;\n  float y = log(length(c));\n  float x = atan2(c)/(2.*pi);\n  uv.x = fract(x);\n  uv.y = fract(y);\n  return texture(iChannel0, uv).xyz;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = uv;\n    p = (2.0*p - 1.0)*zoom;\n    p.x *= iResolution.x/iResolution.y;\n    \n    vec2 res = vec2(1,0);\n    for (int i = 1; i <= 5; i++) {\n        float t = iTime*float(i)/10.;\n        vec2 z = vec2(cos(t), sin(t))*float(i);\n        res = cmul(res, p-z);\n    }\n    res = cdiv(res,p);\n\n    vec3 im = complexColor(res);\n    fragColor = vec4(im,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\n\n// Hashes and noise borrowed from the rain-forrest example: https://www.shadertoy.com/view/4ttSWf\nfloat hash1( vec2 p )\n{\n    p  = 50.0*fract( p*0.3183099 );\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\nfloat hash1( float n )\n{\n    return fract( n*17.0*fract( n*0.3183099 ) );\n}\n\n\nfloat noise( in vec3 x )\n{\n    x.xy = cos(x.xy*radians(360.)); // Added.  Makes noise cyclical.\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n    \n    vec3 u = w*w*w*(w*(w*6.0-15.0)+10.0);\n    \n    float n = p.x + 317.0*p.y + 157.0*p.z;\n    \n    float a = hash1(n+0.0);\n    float b = hash1(n+1.0);\n    float c = hash1(n+317.0);\n    float d = hash1(n+318.0);\n    float e = hash1(n+157.0);\n\tfloat f = hash1(n+158.0);\n    float g = hash1(n+474.0);\n    float h = hash1(n+475.0);\n\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return -1.0+2.0*(k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z);\n}\n\nvec2 noiseVec2(in vec3 x) {\n   return vec2(noise(x), noise(x + 0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 bias = vec2(0.);\n    vec2 targ1 = uv+0.015*noiseVec2(vec3(uv, iTime))-bias;\n    vec2 targ2 = uv+0.015*noiseVec2(vec3(uv, iTime+7.0))-bias;\n    vec4 im = vec4(0.0,0.0,0.0,1.0);\n    vec2 targ;\n    for (int i = 0; i <= 10; i++) {\n      targ = mix(targ1, targ2, 0.1*float(i));\n      im += (1.0/11.0) * texture(iChannel0, fract(targ));\n    }\n    \n    vec4 smokeColor;\n    smokeColor.xyz = hsb2rgb(vec3(fract(iTime/3.), 0.4, 0.8));\n    smokeColor.w = 1.0;\n    im = mix(smokeColor, im,\n      smoothstep(0.0, 0.1, length(uv - vec2(0.5, 0.5))));\n    \n    if(iFrame < 10 || iMouse.z > 0.0) {\n        fragColor = smokeColor;\n    } else {\n        fragColor = im;\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}