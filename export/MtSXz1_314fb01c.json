{"ver":"0.1","info":{"id":"MtSXz1","date":"1441515137","viewed":1602,"name":"Metaeaux - Photomosaic","username":"metaeaux","description":"GPU based photomosaic rendering","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["mosaic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define TILE_SIZE 16.\n#define SPEED 2.\n\n// draw a circle tile using a distance field\nvec4 drawTile (vec2 p, vec4 col){\n    p = p * 2. - 1.;\n\tif((length(p) - 1.) < 0.)\n        return col;\n    return vec4(1.);\n}\n\nvoid mainImage( out vec4 colour, in vec2 p )\n{\n    vec2 r = iResolution.xy;\n    // calculate how many tiles are on screen\n    float Tiles = iResolution.x / TILE_SIZE;\n    \n    // scale the viewport between 0. and 1.\n\tvec2 u = p / r;\n    \n    // scale y axis to fit aspect ratio\n    u.y *= r.y/r.x;\n    \n    // create scaled index for the current tile\n    vec2 t = floor(u * Tiles) / Tiles;\n    \n    // create a coordinate system within a tile between 0. and 1.\n    vec2 s = fract(u * Tiles);\n    \n    // create a timeline\n    float timeline = 10. * fract(0.1 * iTime * SPEED) - 3.0;\n\n    // reverse the draw sequence\n    float topToBottom = 1.0 - t.y;\n    \n    // draw mosaic from top to bottom, one row at a time\n    if(timeline >= topToBottom){\n        // find average colour in the tile\n        vec4 avg = vec4(0.);\n        \n        for(float y = 0.; y < TILE_SIZE; y++){\n            for(float x = 0.; x < TILE_SIZE; x++){\n                vec2 pos = clamp(t + vec2(x,y)/r, 0.,1.);\n                avg += texture(iChannel1, pos);\n            }\n        }\n\n        avg /= TILE_SIZE*TILE_SIZE;\n        \n        // calculate mosaic fadeout index\n        float diff = (timeline - topToBottom);\n        float fade = clamp(0.25*diff - 0.5, .0, 1.);\n        \n        // draw tile and use timeline to fade to original texture\n        colour = mix(drawTile(s, avg), texture(iChannel1, u), smoothstep(0., 1., fade));\n    } else {    \n        // draw original texture\n        colour = texture(iChannel1, u);\n    }\n}","name":"","description":"","type":"image"}]}