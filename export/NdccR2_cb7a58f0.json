{"ver":"0.1","info":{"id":"NdccR2","date":"1653696090","viewed":43,"name":"Better VHS shader","username":"int_45h","description":"This is a more accurate VHS style shader.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lesspain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592654f\n\nvec3 RGB_to_YIQ(vec3 RGB)\n{\n    return mat3\n    (\n        0.299f, 0.587f, 0.114f,\n        0.596f, -0.275f, -0.321f,\n        0.212f, -0.523f, 0.311f\n    ) * RGB;\n}\n\nvec3 YIQ_to_RGB(vec3 YIQ)\n{\n    return mat3\n    (\n        1.f, 0.956f, 0.619f,\n        1.f, -0.272f, -0.647f,\n        1.f, -1.106f, 1.703f\n    ) * YIQ;\n}\n\n// Converts color from RGB to YIQ, blur the I and Q, then apply a dot crawl effect\nvec3 VHS_effect(vec2 fragCoord, float color_fuckery)\n{\n    vec2    IQ = vec2(0,0),\n            blur_size = vec2(16, 4),\n            focal_point = blur_size * 0.5f;\n    \n    float   smear_factor = blur_size.x * blur_size.y;\n    \n    vec2    UV_Y = fragCoord / iResolution.xy;\n    \n    // IQ blur\n    for (int i = 0; i < int(smear_factor); i++)\n    {\n        vec2 uv_prime = vec2\n        (\n            (fragCoord.x + float(i % int(blur_size.x)) - focal_point.x) / iResolution.x,\n            (fragCoord.y + float(i / int(blur_size.y)) - focal_point.y) / iResolution.y\n        );\n        IQ += RGB_to_YIQ(texture(iChannel0, uv_prime).xyz).yz;\n    }\n    IQ /= smear_factor;\n    \n    vec3 color = vec3\n    (\n        RGB_to_YIQ(texture(iChannel0, UV_Y).xyz).r,\n        IQ * (1.f + color_fuckery)\n    );\n    \n    // NTSC Dot Crawl\n    color.x += (IQ.x*sin((fragCoord.x))) *\n               (IQ.y*sin( fragCoord.y * PI * 0.5f));\n    \n    color = YIQ_to_RGB(color);\n    \n    return color;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(vec3(sin(fragCoord.x)), 1.f);\n    fragColor = vec4(VHS_effect(fragCoord, 0.2f),1.0);\n    //fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"}]}