{"ver":"0.1","info":{"id":"7lyfDK","date":"1665244964","viewed":94,"name":"light pole","username":"jt","description":"The simplest light pole / street light structure I could come up with. Intended to be used in architectural constructions.\n(Increase AA for nicer image - disabled by default for performance in full-screen)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["light","distance","architecture","construction","pole","street","building"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/7lyfDK light pole by jt\n// The simplest light pole structure I could come up with\n// intended to be used in architectural constructions.\n\n// tags: light, pole, street, architecture, construction, building, distance\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n#define AA 1\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n// https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p) - s;\n}\n\n// modified https://www.shadertoy.com/view/7tVXRt CutHollowSphere - distance by iq\n// r = sphere's radius\n// h = cutting's plane's position\n// t = thickness\nfloat sdCutHollowSphere( vec3 p, float r, float h, float t )\n{\n    vec2 q = vec2( length(p.xy), p.z );\n    \n    float w = sqrt(r*r-h*h);\n    \n    return ((h*q.x>w*q.y) ? length(q-vec2(w,h)) : \n                            abs(length(q)-r) ) - t;\n}\n\n// modified https://iquilezles.org/articles/distfunctions/\nfloat sdCone( in vec3 p, float r, float h0, float h1 )\n{\n    p.z -= h0;\n    vec2 q = vec2(r,h1-h0);\n    \n    vec2 w = vec2( length(p.xy), p.z );\n    vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n    float k = sign( q.y );\n    float d = min(dot( a, a ),dot(b, b));\n    float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n\n    return sqrt(d)*sign(s);\n}\n\nfloat sdCappedCone(vec3 p, vec3 a, vec3 b, float ra, float rb)\n{\n  float rba  = rb-ra;\n  float baba = dot(b-a,b-a);\n  float papa = dot(p-a,p-a);\n  float paba = dot(p-a,b-a)/baba;\n  float x = sqrt( papa - paba*paba*baba );\n  float cax = max(0.0,x-((paba<0.5)?ra:rb));\n  float cay = abs(paba-0.5)-0.5;\n  float k = rba*rba + baba;\n  float f = clamp( (rba*(x-ra)+paba*baba)/k, 0.0, 1.0 );\n  float cbx = x-ra - f*rba;\n  float cby = paba - f;\n  float s = (cbx<0.0 && cay<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(cax*cax + cay*cay*baba,\n                     cbx*cbx + cby*cby*baba) );\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\nfloat light_pole(vec3 p, float r, float h)\n{\n    vec3 up = vec3(0,0,1);\n    float s = r*0.25;\n    //float f = 1.0/6.0;\n    float f = 1.0/7.0;\n    //float d = sdCone(p, r, h, 0.0); // pylon (fast, approximate proportions)\n    float d = sdCappedCone(p, up * 0.0, up * h, r, s); // pylon (slower, but improved proportions)\n    //d = min(d, sdCone(p, r, (1.0-f) * h, h)); // lamp (fast) (fast, approximate proportions)\n    d = min(d, sdCappedCone(p, up * (1.0-f) * h, up * h, s, r)); // lamp (slower, but improved proportions)\n    float h2 = h * 0.5;\n    p.z -= h2;\n    //d = min(d, sdCutHollowSphere(p, h2, h2*0.95, 0.002)); // shade\n    d = min(d, sdCutHollowSphere(p, h2, h2*0.975, 0.002)); // shade\n    \n    return d;\n}\n\nfloat map(vec3 p)\n{\n    float d = halfspace(p);\n    d = min(d, light_pole(p, 0.05, 2.0));\n    //d = light_pole(p, 0.05, 2.0);\n    //d = min(d, sdSphere(p, 0.1)); // mark origin\n    return d;\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 sum = vec3(0.0);\n\n    for(int i = 0; i < AA; i++)\n    {\n        for(int j = 0; j < AA; j++)\n        {\n            vec2 o = vec2(float(j), float(i)) / float(AA) - 0.5;\n            vec2 p = 2.0 * (fragCoord.xy + o) / iResolution.xy - 1.0;\n            p.x *= float(iResolution.x) / float(iResolution.y);\n            float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n            float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n            mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.05);\n            my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n            mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n            vec3 ro = vec3(0.0, 1.0, -3.0 );//vec3(0.0, -10.0 * my, 0.0);\n            //mat2 Pitch = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n            mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n            ro.yz = Pitch * ro.yz;\n            ro.xy = Yaw * ro.xy;\n\n            vec3 rd = normalize(vec3(0.5 * p.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n            rd.yz = Pitch * rd.yz;\n            rd.xy = Yaw * rd.xy;\n\n            float dist = trace(ro, rd, 0.0, DIST_MAX);\n            vec3 dst = ro + rd * dist;\n            vec3 n = normal(dst);\n    \n            vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n            vec3 ambient = vec3(0.1);\n            float brightness = max(dot(lightdir, n), 0.0);\n            brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX );\n            //brightness *= softshadow(ro+rd*dist,lightdir, 0.01, DIST_MAX, 50. );\n            //vec3 color = (n * 0.5 + 0.5);\n            vec3 color = mix(vec3(0.25), vec3(1), step(0.01, dst.z)); // quick hack to color ground differently\n            color = (ambient * calcAO(dst, n) + brightness) * color;\n            //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n            color = mix(color, vec3(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    \n            sum += color;\n        }\n    }\n    sum /= float(AA*AA);\n    \n    fragColor = vec4(sqrt(sum), 1.0); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}