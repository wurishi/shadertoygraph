{"ver":"0.1","info":{"id":"mscyWn","date":"1694911451","viewed":46,"name":"random kisrhombille","username":"jt","description":"Flips each sub-triangle of a [url=https://en.wikipedia.org/wiki/Kisrhombille]kisrhombille tiling[/url] randomly.\nClick to show underlying triangular grid.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random","checker","barycentric","pattern","tiling","euclidean","tesselation","kisrhombille"],"hasliked":0,"parentid":"cl2BzV","parentname":"kisrhombille"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mscyWn random kisrhombille, written 2023 by jt\n// randomized variant of https://www.shadertoy.com/view/cl2BzV kisrhombille\n\n// kisrhombille tiling: essentially a checker pattern in barycentric coordinates (orthogonal to triangle).\n// https://en.wikipedia.org/wiki/Kisrhombille\n\n// Related: https://www.shadertoy.com/view/dtSBzc kisquadrille\n\n// tags: random, checker, barycentric, pattern, tiling, euclidean, tesselation, kisrhombille\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n*/\nuint uhash(ivec3 i) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(i);\n    uint   k = 1103515245U; \n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;  \n    return uint(((x>>8U)^x.yzx)*k);\n}\n\nbool bhash(ivec3 i)\n{\n    return (uhash(i) & 1u) != 0u;\n}\n\n/*\nvec3 barycentric(vec2 a, vec2 b, vec2 c, vec2 p)\n{\n    float d = (b.y - c.y) * (a.x - c.x) + (c.x - b.x) * (a.y - c.y);\n    float alpha = ((b.y - c.y) * (p.x - c.x)+(c.x - b.x) * (p.y - c.y)) / d;\n    float beta = ((c.y - a.y) * (p.x - c.x) + (a.x - c.x) * (p.y - c.y)) / d;\n    float gamma = 1.0 - alpha - beta;\n    return vec3(alpha, beta, gamma);\n}\n*/\nvec3 barycentric(vec2 p)\n{\n    float s = sqrt(3.0);\n    return vec3((vec2(-1,+1) * p.x - p.y/s + 1.0)/2.0, p.y / s);\n}\n\nvoid mainImage( out vec4 c, in vec2 I )\n{\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I/R - 1.0;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n\n    //vec3 t = barycentric(vec2(-1,0), vec2(+1,0), vec2(0,h), I*2.0*sqrt(3.0));\n    vec3 b = barycentric(I*4.0*sqrt(3.0));\n\n    ivec3 t = ivec3(floor(b)); // tile coordinates\n    bool flip = t.x + t.y + t.z == 0; // triangle direction\n    vec3 l = fract(b); // local coordinates\n    if(!flip) l = 1.0 - l; // fix coordinates of every other triangles\n    vec3 o = l.yzx - l.zxy; // orthogonal local coordinates\n    int x = o.x > 0.0 ? 1 : 0;\n    int y = o.y > 0.0 ? 1 : 0;\n    int z = o.z > 0.0 ? 1 : 0;\n    //c = vec4(bool(x) != bool(y) != bool(z)); // checker pattern\n    c = vec4(bhash(t*8+z*4+y*2+x*1 + int(iTime)));\n    //c = vec4(bhash(ivec3(floor(barycentric(I*4.0*sqrt(3.0))))));\n    if(iMouse.z > 0.0) c = mix(c, vec4(flip), 0.75); // click to show underlying triangular grid\n\n    c = sqrt(c); // gamma\n}\n","name":"Image","description":"","type":"image"}]}