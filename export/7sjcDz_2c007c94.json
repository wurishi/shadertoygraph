{"ver":"0.1","info":{"id":"7sjcDz","date":"1643373090","viewed":166,"name":"36/49","username":"tono","description":"Shader I drew in the past\nOct. 14, 2021","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["36"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float a){return mat2(cos(a),sin(a),-sin(a),cos(a));}\nfloat pi = acos(-1.);\nvec4 po;\nfloat oadad(vec3 p)\n{\n    float o = 10.;\n  //  p.xz *= rot(iTime/3.);\n    //p.yz *= rot(iTime/12.);\n    p.yz *= rot(pi/2.+13.);\n    o = length(p) - 1.7;\n    float scale = 1.0;\n    \n    float s = 23.;\n    \n    p = abs(p)-.2;\n    \n    //p.x = p.x - atan(p.x,p.z);\n    //p.y = p.y + atan(p.y,p.z);\n    p.z = p.z + atan(p.z,p.x);\n    vec3 offset = p * 6.;\n    //offset=vec3(p*1.3);\n    \n\n    for(float i = 0.;i<5.;i++)\n    {\n        //p = mod(p,15.)-7.5;\n        p = sin(p/6.) * 4.;\n        p = 1.-abs(p-1.);\n        \n        p.yz *= rot(iTime/6. + length(p)/2.);\n        p.yz *= rot(1.2 + iTime/13.);\n        //p.xy *= rot(length(p)*.3);\n        p -= clamp(p,1.,-1.)*.1;\n        float r = -5.5 * clamp(.4 * max(.6,2.4/dot(p,p)),0.,1.5);\n        p*=r;\n        p+=offset;\n        s*=r;\n    }\n    s = abs(s);\n    p = abs(p);\n    if(p.x<p.z)p.xz=p.zx;\n    //if(p.y<p.z)p.yz=p.zy;\n    if(p.x<p.y)p.xy=p.yx;\n    float a = .5;\n    p -=clamp(p,-a,a);\n    o = length(p.xz)/s;\n    po = vec4(p,s);\n    return o;\n}\n\nvec2 map(vec3 p)\n{\n    float o = 10.;\n    float id = 0.;\n    o = oadad(p);\n    return vec2(o,id);\n}\nvec2 march(vec3 cp , vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0 ; i< 128; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.002)\n        {\n            return vec2(depth,d.y);\n        }\n        if(depth > 30.)break;\n        depth += d.x;\n    }\n    return vec2(-depth , 0.);\n\n}\n\nvec3 scene(vec3 cp,vec3 target,vec2 f,vec2 resolution) {\n    vec2 p = (f.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n\t//vec3 cp = vec3(0.,0.,-6.);\n    //vec3 target = vec3(0.);\n    \n    vec3 col = vec3(0.);\n    \n    vec3 cd = normalize(vec3(target - cp));\n    vec3 cs = normalize(cross(cd , vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    float fov = 2.5;\n    \n    vec3 rd = normalize(cd * fov + cs * p.x + cu * p.y);\n    \n    vec2 d = march(cp,rd);\n    if( d.x > 0.)\n    {\n       vec2 e = vec2(1.0, -1.0) * .1;\n        vec3 pos = cp + rd * d.x;\n        vec3 N = normalize(\n                  e.xyy * map(pos + e.xyy).x +\n                  e.yyx * map(pos + e.yyx).x +\n                  e.yxy * map(pos + e.yxy).x +\n                  e.xxx * map(pos + e.xxx).x);\n        vec3 sun = normalize(vec3(2.,4.,8.));\n        //sun.xz *= rot(iTime);\n        float diff = max(0.,dot(-sun,N));\n        diff = mix(diff , 1.,.3);\n        float sp = max(0.,dot(rd,reflect(N,sun)));\n        sp = pow(sp,6.6) * 1.;\n        float rim = pow(clamp(1. - dot(N, -rd), 0., 1.), 4.) * 10.;\n        sp = pow(sp,33.6) * 1.;\n        col = sp * vec3(1.) + diff * vec3(1.);\n        //col = vec3(1.);\n        col *= floor(cos( log2(po.w) + vec3(2.,12.,31.)) * 4.)/4.*rim;\n        //col += sp * vec3(0.,1.,1.);\n    \tfloat t = 1.-exp(-.003 * d.x * d.x * d.x);\n        col = mix(col,vec3(0.),t);\n    }\n    \n    //gl_FragColor = vec4(col, 1.0);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 col = vec3(0.);\n    vec3 cp = vec3(3.,7.,-6.);\n    \n    cp.x += sin(sin(iTime/7.) * 4.);\n    vec3 target = vec3(0.);\n    target += sin(iTime/14.);\n    \n    target.y += cos(cos(iTime/66.) * 5.);\n    cp.xz *= rot(iTime/32.);\n    cp.xy *= rot(iTime/13.);\n    col = scene(cp,target,fragCoord.xy,iResolution.xy);\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}