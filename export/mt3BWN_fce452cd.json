{"ver":"0.1","info":{"id":"mt3BWN","date":"1701754865","viewed":32,"name":"Mirrorballs rtx","username":"ZoldLeo","description":"Rtx","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rtx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Sphere {\n    vec3 pos;\n    float r;\n    vec3 col;\n    float ref;\n};\n\nstruct Hit {\n    vec3 ro;\n    vec3 rd;\n    vec4 col;\n    int i;\n};\n\nSphere balls[9] = Sphere[](\n    Sphere(vec3(-2,1, 2),.9,vec3(1,0,0),.2),\n    Sphere(vec3( 0,1, 2),.8,vec3(0,1,0),.4),\n    Sphere(vec3( 2,1, 2),.7,vec3(0,0,1),.6),\n    Sphere(vec3(-2,1, 0),.8,vec3(0,1,0),.4),\n    Sphere(vec3( 0,1, 0),.7,vec3(0,0,1),.6),\n    Sphere(vec3( 2,1, 0),.6,vec3(0,1,0),.8),\n    Sphere(vec3(-2,1,-2),.7,vec3(0,0,1),.6),\n    Sphere(vec3( 0,1,-2),.6,vec3(0,1,0),.8),\n    Sphere(vec3( 2,1,-2),.5,vec3(1,0,0),1.)\n);\nint ballsLength = 9;\nvec3 lightPos = vec3(-8,10,0);\nfloat tilesize = 10.;\n\nfloat checkSphere(vec3 pos, float r, vec3 ray) {\n    float a = dot(ray,ray);\n    float b = dot(ray,pos);\n    float c = dot(pos,pos)-r*r;\n    float d = b*b-a*c;\n    if (d<=0.)\n        return 100001.;\n    float t0 = (b+sqrt(d))/a;\n    float t1 = (b-sqrt(d))/a;\n    if (min(t0,t1)<0.)\n        return 100001.;\n    return min(t0,t1);\n}\n\nHit Shadow(Hit hit) {\n    vec4 shadow = vec4(1);\n    for (int i=0;i<ballsLength;i++){\n        vec3 hitpos = hit.ro+normalize(hit.rd)/1000.;\n        float t = checkSphere(balls[i].pos-hitpos,balls[i].r,lightPos-hitpos);\n        if (t<100000.)\n            shadow = vec4(.75);\n    }\n    hit.col *= shadow;\n    return hit;\n}\n\nHit Raycast(vec3 ro, vec3 rd) {\n    float d = 100001.;\n    Hit hit;\n    int sphIndex = -1;\n    for (int i=0;i<ballsLength;i++) {\n        float t = checkSphere(balls[i].pos-ro,balls[i].r,rd);\n        if (t<d) {\n            sphIndex = i;\n            d = t;\n        }\n    }\n    if (sphIndex != -1)\n        hit = Shadow(Hit(ro+rd*d,reflect(rd,(balls[sphIndex].pos-ro-rd*d)/balls[sphIndex].r),vec4(balls[sphIndex].col,1),sphIndex));\n    else {\n        d = -ro.y/rd.y;\n        if (d>0.) hit = Shadow(Hit(ro+rd*d,reflect(rd,vec3(0,1,0)),texture(iChannel0,fract((d*rd+ro)/tilesize).xz),-1));\n        else hit = Hit(ro,rd,vec4(0,1,1,10),-1);\n    }\n    return hit;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 camPos = vec3(8.*cos(iTime),5,8.*sin(iTime));\n    // Pixel coordinates (from -1 to 1)\n    vec2 uv = 2.*fragCoord/iResolution.x-1.;\n    vec3 raydir = vec3(-uv.x*sin(iTime)-cos(iTime),uv.y,uv.x*cos(iTime)-sin(iTime));\n    vec4 col;\n    Hit hit = Raycast(camPos,raydir);\n    float refs[4] = float[](0.,0.,0.,0.);\n    vec4 cols[4] = vec4[](vec4(1),vec4(1),vec4(1),vec4(1));\n    cols[0] = hit.col;\n    for (int b=0;b<4 && hit.i!=-1 && balls[hit.i].ref!=0.;b++) {\n        refs[b] = balls[hit.i].ref;\n        hit = Raycast(hit.ro,hit.rd);\n        cols[b+1] = hit.col;\n    }\n    for (int b=3;b>0;b--) {\n        if (refs[b-1] == 0.) continue;\n        hit.col = mix(cols[b-1],cols[b],refs[b-1]);\n        cols[b-1] = hit.col;\n    }\n    fragColor = hit.col;\n}","name":"Image","description":"","type":"image"}]}