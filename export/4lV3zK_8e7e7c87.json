{"ver":"0.1","info":{"id":"4lV3zK","date":"1475557797","viewed":237,"name":"Distance function_test","username":"zhe1994","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distance","rendering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdSlab( vec3 p )\n{\n     vec3 n = normalize(vec3(1.0, 1.0, 0.0)); // normal to plane\n     vec3 pp = vec3(0.0, 0.4, 0.0); //point on plane\n     float w = 0.5; //width of slab\n     float d = abs(dot(p-pp, n))-w; //distance to slab\n     return d;\n  \n}\n\nfloat sdSlab1( vec3 p )\n{\n     vec3 n = normalize(vec3(1.0, 1.0, 0.0)); // normal to plane\n     vec3 pp = vec3(0.0, 0.4, 0.0); //point on plane\n     float w = 0.3; //width of slab\n     float d = abs(dot(p-pp, n))-w; //distance to slab\n     return d;\n  \n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdSurface( vec3 p)\n{    \n    return sin(p.x) + cos(p.z) > p.y?p.y:1.;    \n    \n}\n//----------------------------------------------------------------------\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec2 opI( vec2 d1, vec2 d2 )\n{\n    return (d1.x>d2.x) ? d1 : d2;\n}\n\nvec2 opS(vec2 d1, vec2 d2 )\n{\n    return (-d1.x>d2.x) ? -d1 : d2;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\nfloat opRep( vec3 p, vec3 c )\n{\n    /*\n    mat4 rom = mat4( cos( PI*0.25 ), -sin( PI*0.25 ), 0.0, 0.0,\n\t\t\t   \t\tsin( PI*0.25 ), \tcos( PI*0.25 ), 0.0, 0.0,\n\t\t\t        0.0,         0.0,      1.0, 0.0,\n\t\t\t\t    0.0,         0.0,      0.0, 1.0 );\n    p = (rom*vec4(p,1.)).xyz;\n    */\n    vec3 q = mod(p,c)-0.5*c;\n    return sdBox( q, vec3(0.1));\n}\n\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{   \n    vec2 res;\n    \n    vec2 objBox = vec2(\n        sdBox(\n            pos-vec3(0.0,0.5,0.0),\n            vec3(0.5)\n        ),\n        3.\n    );\n    vec2 objPlane = vec2(\n        sdPlane(pos),\n        1.0\n    );\n    \n    vec2 objSlab = vec2(\n    \tsdSlab(pos),\n        40.\n    );\n    \n    vec2 objSlab1 = vec2(\n    \tsdSlab1(pos),\n        3.\n    );\n    \n    vec2 objShape = vec2(\n        opRep(pos-vec3(0.0,0.5,0.0),vec3(.3)),\n        10.\n    );\n    \n    vec2 objSurface = vec2(\n    \tsdSurface(pos-vec3(1.0,0.5,0.0)),\n        10.\n    );\n    \n    vec2 objBigBox = vec2(\n    \tsdBox(\n            pos-vec3(0.0,0.5,0.0),\n            vec3(1.)\n        ),\n        3.\n    );\n    \n    res = opI(objSlab,objShape);\n    res = opI(res,objBigBox);\n    vec2 res2 = opI(objSlab1,objBigBox);\n    res = opU(res,res2);\n    res = opU(res, objPlane);\n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    \n    for( int i=0; i<50; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    \n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n           \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00);\n        lin += 0.30*dom*vec3(0.50,0.70,1.00);\n        lin += 0.30*bac*vec3(0.25,0.25,0.25);\n        lin += 0.40*fre*vec3(1.00,1.00,1.00);\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    \n\t// camera pos\n\tvec3 ro = vec3(5.*mo.x, 2.5+5.*mo.y, 1.0);\n\tvec3 ta = vec3( 0., 0., 0. );\n\t\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray dir\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}