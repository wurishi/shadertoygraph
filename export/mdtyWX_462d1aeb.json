{"ver":"0.1","info":{"id":"mdtyWX","date":"1695604508","viewed":93,"name":"Dragon Music Visualizer","username":"xXx_T0SHIII_xXx","description":"Something I got inspired to make after watching some videos.\n\nAlways looking for input/feedback to improve my current skills\n\nfeatures one of my original songs I wrote with a friend :) \nCheck us out on Soundcloud under the same name as here! ","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["3d","raymarching","visualizer","visual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldt3DM","filepath":"https://soundcloud.com/sp00ked-mentions/wastemytime-feat-knivezzz","previewfilepath":"https://soundcloud.com/sp00ked-mentions/wastemytime-feat-knivezzz","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define t iTime\n\nfloat audio_freq( in sampler2D channel, in float f) { return texture( channel, vec2(f, 0.25) ).x; }\nfloat audio_ampl( in sampler2D channel, in float t) { return texture( channel, vec2(t, 0.75) ).x; }\n\nmat2 Rotate(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nfloat GetDist(vec3 p, float modifier)\n{\n//Sphere1\n    vec3 s = vec3(cos(t),0.,sin(t));\n    p.xy *= Rotate(p.z/10.+t);\n    vec3 sP = p-s; \n    sP = mod(sP,4.)-2.; // infinite mirroring\n    float sd = length(sP)- 1. * modifier;\n//Sphere2\n    vec3 s2 = vec3(sin(t),1,5);\n    vec3 sP2 = p-s2;\n    sP2 = mod(sP2,4.)-2.;\n    float sd2 = length(sP2)- 1. * modifier;\n//Sphere3\n    vec3 s3 = vec3(0.,sin(t),5);\n    vec3 sP3 = p-s3;\n    sP3 = mod(sP3,4.)-2.;\n    float sd3 = length(sP3)- 1. * modifier;\n//Combine Scene together   \n    float d = smin(sd,sd2, 32.);\n    d = smin(d,sd3,32.);\n    \n    return d;\n}\n\nfloat Raymarching(vec3 ro,vec3 rd,float m)\n{\n    float dO = 0.;\n    for(int i = 0; i<MAX_STEPS; i++)\n    {\n        vec3 p = ro+dO*rd;\n        float ds = GetDist(p, m);\n        dO+=ds;\n        if(ds<SURF_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 Norm(vec3 p, float m)\n{\n    vec2 e = vec2(.01,0);\n    float d= GetDist(p,m);\n    vec3 n = d -vec3( \n    GetDist(p-e.xyy,m),\n    GetDist(p-e.yxy,m),\n    GetDist(p-e.yyx,m));\n    return normalize(n);\n}\n\nfloat Light(vec3 p)\n{\n    vec3 lightpos = vec3(0.,0.,2.);\n    lightpos = mod(lightpos,4.)-2.;\n    vec3 l = normalize(lightpos - p);\n    vec3 n = Norm(p,0.);\n    \n    float dif = clamp(dot(n,l),0.,1.);\n    float d = Raymarching(p+n*SURF_DIST*2.,l,0.);\n    return dif;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n// UV\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 st = uv;\n//Audio\n    float dist2 = dot(uv, -uv);\n    float clamped_dist = smoothstep(0., 1.0, dist2);\n    float sample1 = audio_freq(iChannel3, abs((uv.x-0.5)/2.) -0.001);\n    float sample2 = audio_ampl(iChannel3, clamped_dist);\n    \n//Music Visualization\n    vec2 uv0 = uv;\n    vec2 uv1 = uv0;\n    float c = length(uv0);\n    float r = sample1;\n    float offs = .8;\n        uv0.y += uv0.x;\n        c = smoothstep(r,r+0.01,uv0.y+offs);\n        uv1.y -= uv1.x;\n        float c2 = smoothstep(r,r+0.01,-uv1.y+offs);\n        c *= abs(c2);\n        \n//Colors Pattern\n    float circ = length(st)-.5;\n    float r2 = .5;\n    \n//RayTracing \n    vec3 ro = vec3(cos(t) * .2,sin(t)*.2,t * 10.);\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));\n    vec3 rd2 = normalize(vec3(uv.x,uv.y,1) + vec3(sin(t))* 0.01);\n    vec3 rd3 = normalize(vec3(uv.x,uv.y,1) - vec3(cos(t))*0.01);\n    float d = Raymarching(ro,rd, 1.);\n    float d2 = Raymarching(ro,rd2, 1.);\n    float d3 = Raymarching(ro,rd3, 1.);\n    vec3 p = ro+rd*d;\n    vec3 p2 = ro+rd2*d2;\n    vec3 p3 = ro+rd3*d3;\n    vec3 n = Norm(p,sample1);\n    vec3 n2 = Norm(p2,sample1);\n    vec3 n3 = Norm(p3,sample1);\n//Shading\n    float dif = Light(p);\n    float dif2 = Light(p2);\n    float dif3 = Light(p3);\n    float fog = d /30.;\n    float fog3 = d2 /30.;\n    float fog2 = d3 /30.;\n    float fogCol = cos(t - circ*4.)-1. * dif;\n    float fogCol2 = cos(t - circ*3.)-1. + dif2;\n    float fogCol3 = cos(t - circ*5.)-1. - dif3;\n    float mainCol = abs(sin(t * 3. - circ*3.))-c;\n    float mainCol2 = abs(sin(t * 2.4 - circ*2.))*c;\n    float mainCol3 = abs(sin(t / 4. - circ*5.))+c;\n// Assign Final Color\n    float col = mix(mainCol,fogCol,1.-exp(-fog));\n    float col2 = mix(mainCol2,fogCol2,1.-exp(-fog2));\n    float col3 = mix(mainCol3,fogCol3,1.-exp(-fog3));\n    vec3 abberated = vec3(col,col2,col3);\n    abberated = max(vec3(0.),abberated);\n// Output to screen\n    fragColor = vec4(abberated,1.0);\n}","name":"Image","description":"","type":"image"}]}