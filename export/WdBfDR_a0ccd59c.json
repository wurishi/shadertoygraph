{"ver":"0.1","info":{"id":"WdBfDR","date":"1589791801","viewed":76,"name":"Yet another Mandelbrot set!","username":"ajnirp","description":"Mandelbrot set made while learning how to use Shadertoy","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Multiply two complex numbers.\nvec2 mult(vec2 a, vec2 b) {\n\treturn vec2(a.x*b.x-a.y*b.y, a.y*b.x+a.x*b.y);\n}\n\n// Return # iterations it takes for the function to diverge.\n// If it doesn't diverge return max_iter.\nfloat iter(vec2 c, const int max_iter, const float divergence_threshold) {\n\tvec2 z = vec2(0.);\n    int n = 0;\n    while (length(z) <= 2. && n < max_iter) {\n    \tz = mult(z,z) + c;\n        n++;\n    }\n    // Adapted from https://stackoverflow.com/a/1243788, but\n    // I threw in another log because why not. The results are\n    // entirely different than with just 2 log's.\n    float n_smooth = float(n)+1.-log2(log2(log2(length(z))));\n    // We take the 5th root to get a milder and smoother range of color.\n    return pow(float(n_smooth)/float(max_iter), 0.2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Our coordinate system goes from (-2,-1) to (1,1), very roughly speaking.\n    vec2 uv = 2.*fragCoord/iResolution.y-vec2(2.5,1.);\n    const int max_iter = 500;\n    const float divergence_threshold = 2.;\n    float col = iter(uv, max_iter, divergence_threshold);\n    fragColor = vec4(1.-col);\n}","name":"Image","description":"","type":"image"}]}