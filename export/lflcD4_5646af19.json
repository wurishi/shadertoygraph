{"ver":"0.1","info":{"id":"lflcD4","date":"1721156646","viewed":26,"name":"shape TRNS","username":"netfetti","description":"challenging code conversion! ENJOY!","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["colorful","kaleidoscope","geometry","evolving","controlable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 3D Kaleidoscope Shader\n// Original concept from an HTML/WebGL implementation\n// Adapted for Shadertoy by [NETFETTI]\n\n// Constants for raymarching\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n\n// Rotation matrix\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Signed distance functions\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sdOctahedron(vec3 p, float s) {\n    p = abs(p);\n    return (p.x + p.y + p.z - s) * 0.57735027;\n}\n\n// Main distance function\nfloat map(vec3 p) {\n    float t = iTime;\n    float zoom = 5.0;\n    float complexity = 2.0;\n    float rotationSpeed = .5;\n    float shapeBlend = 0.3;\n    \n    for (int i = 0; i < 10; i++) {\n        if (float(i) >= complexity) break;\n        p = abs(p) - vec3(0.5, 0.8, 1.2) * zoom;\n        p.xy *= rot(t * 0.3 * rotationSpeed + float(i) * 0.5);\n        p.yz *= rot(t * 0.2 * rotationSpeed - float(i) * 0.3);\n    }\n    \n    float d1 = sdBox(p, vec3(.8, 0.4, 0.4) * zoom);\n    float d2 = sdOctahedron(p, 0.5 * zoom);\n    return mix(d1, d2, shapeBlend);\n}\n\n// Calculate normal\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0);\n    return normalize(vec3(\n        map(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\n// Get ray direction\nvec3 getRayDirection(vec2 uv, vec3 camPos, vec3 lookat, float zoom) {\n    vec3 f = normalize(lookat - camPos);\n    vec3 r = normalize(cross(vec3(0, 1, 0), f));\n    vec3 u = cross(f, r);\n    return normalize(uv.x * r + uv.y * u + zoom * f);\n}\n\n// Main image function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.8 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    vec3 camPos = vec3(3.0 * sin(iTime * 0.1), 2.0, 3.0 * cos(iTime * 0.1));\n    vec3 rayDir = getRayDirection(uv, camPos, vec3(0, 0, 0), 1.0);\n\n    float d = 0.0;\n    vec3 p;\n\n    for (int i = 0; i < MAX_STEPS; i++) {\n        p = camPos + rayDir * d;\n        float ds = map(p);\n        d += ds;\n        if (d > MAX_DIST || abs(ds) < SURF_DIST) break;\n    }\n\n    vec3 col;\n\n    if (d < MAX_DIST) {\n        vec3 n = getNormal(p);\n        vec3 lightDir = normalize(vec3(1, 1, -1));\n        float diff = max(dot(n, lightDir), 0.0);\n        float spec = pow(max(dot(reflect(-lightDir, n), -rayDir), 0.0), 32.0);\n        \n        col = vec3(0.5) + 0.5 * cos(iTime * 0.5 + p.y * 2.0 + vec3(0, 2, 4));\n        col = col * diff + vec3(0.5) * spec;\n    } else {\n        col = vec3(0.05);\n    }\n\n    col = pow(col, vec3(0.4545));  // gamma correction\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}