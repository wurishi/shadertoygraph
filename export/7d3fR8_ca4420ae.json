{"ver":"0.1","info":{"id":"7d3fR8","date":"1656002681","viewed":130,"name":"Wirefence Sines Pattern","username":"MisterSirCode","description":"Saw this pattern on someones wallpaper. Tried to remake it as a shader for fun.\n\nIts a little bit inaccurate (You can see the single strand that overlaps every 12th sine just a bit)\n\nSure this could be simplified but I have no clue how.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["texture","sine","fence","wire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define mpi 0.31415\n#define mpi2 0.31415/2.0\n#define tau 0.31415*2.0\n\nfloat modSine(vec2 p, float scale, float size) {\n    p *= scale;\n    float ratio = scale / 2.0;\n    vec2 sinp1 = vec2(mod(p.x + ratio + 1.0, 4.0 * ratio) + 1.0, p.y);\n    vec2 sinp2 = vec2(mod(p.x + ratio + 1.0 - scale, 4.0 * ratio) + 1.0, p.y);\n    float sinOne = clamp(abs((sinp1.x - 2.0 - ratio) - sin(sinp1.y / size)) / ratio, 0.0, 1.0);\n    float sinTwo = clamp(abs((sinp2.x - 2.0 - ratio) - sin(sinp2.y / size)) / ratio, 0.0, 1.0);\n    return min(sinOne, sinTwo);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.x * 2.0;\n    \n    uv.y += iTime / 2.0;\n    \n    float sc = 20.0;\n    float rg = 2.0;\n    float csh = 0.07;\n    float csf = 0.101;\n    float cp = 0.0;\n    \n    float s01 = modSine(uv, sc, rg);\n    float s02 = modSine(vec2(uv.x + (cp += csh), uv.y + mpi2), sc, rg);\n    float s03 = modSine(vec2(uv.x - csh, uv.y + mpi2), sc, rg);\n    float s04 = modSine(vec2(uv.x - (cp += csf), uv.y + mpi2 + mpi), sc, rg);\n    float s05 = modSine(vec2(uv.x - (cp += csf), uv.y + mpi2), sc, rg);\n    float s06 = modSine(vec2(uv.x - (cp += csh), uv.y + mpi), sc, rg);\n    float s07 = modSine(vec2(uv.x - (cp += csh), uv.y + mpi2), sc, rg);\n    float s08 = modSine(vec2(uv.x - (cp += csf), uv.y + mpi2 + mpi), sc, rg);\n    float s09 = modSine(vec2(uv.x - (cp += csf), uv.y + mpi2 + tau), sc, rg);\n    float s10 = modSine(vec2(uv.x - (cp += csh), uv.y), sc, rg);\n    float s11 = modSine(vec2(uv.x - (cp += csh), uv.y + mpi2), sc, rg);\n    float s12 = modSine(vec2(uv.x - ((cp += csh) + 0.019), uv.y + mpi2 + mpi), sc, rg);\n    \n    float mp1 = min(min(min(min(min(min(s01, s02), s03), s04), s05), s06), s07);\n    float mp2 = min(min(min(min(min(mp1, s08), s09), s10), s11), s12);\n    \n    fragColor = vec4(vec3(smoothstep(0.03, 0.0, mp2)), 1.0);\n}","name":"Image","description":"","type":"image"}]}