{"ver":"0.1","info":{"id":"MflXDS","date":"1706290883","viewed":64,"name":"diy ray tracing","username":"Dalmador","description":"work in progress\nfirst 3d shader\nyou can move the light with the mouse","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","light","sphere","wip","shadows","gradients","reflaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool hit(vec4 sphere, vec3 pos){\n    return (length(sphere.xyz - pos) <= sphere.w);\n}\n\nvec4 hit(vec3 pos, float maxVal){\n    pos /= maxVal;\n    if (floor(abs(pos.x) + 0.02) + floor(abs(pos.y)+ 0.02) + floor(abs(pos.z)+ 0.02) >= 2.){\n        return vec4(0.1);\n    }\n    pos /= 2.;\n    pos += vec3(0.51);\n    return vec4(pos, 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    float maxDepth = 20.;\n    float wallDepth = 4.;\n    float maxIterations = 1000.;\n\n\n    vec3 camPos = vec3(0., 0., -7.);\n    vec3 screenCenterPos = vec3(0., 0, -wallDepth + 0.01);\n    vec4 light = vec4(((iMouse.xy * 2. * wallDepth) / iResolution.xy) + vec2(-wallDepth) , 0., 0.2);\n    \n    vec4 sphere1 = vec4 (2. * sin(iTime), sin(iTime * 1.1 + 3.14159), cos(iTime), 1.);\n    vec4 sphere2 = vec4 ( 2. * sin(-iTime * 1.3), sin(iTime * 1.7), cos(-iTime * 1.3), 1.);\n    vec4 sphere3 = vec4 ( 0., +wallDepth + 3., 0., 4.);\n    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 pixelPos = vec3(screenCenterPos.xy + (uv * 2.), screenCenterPos.z);\n    vec3 offset = normalize(pixelPos - camPos) * maxDepth / maxIterations ;\n    vec3 currentPos = pixelPos;\n    fragColor = vec4(0.);\n    \n    // primary ray\n    for (float i = 0.; i < maxIterations; i++)\n    {\n        if (hit(sphere1, currentPos)){\n            offset = normalize(currentPos - sphere1.xyz) * maxDepth / maxIterations;\n        }\n        if ( hit(sphere2, currentPos)){\n            offset = normalize(currentPos - sphere2.xyz) * maxDepth / maxIterations;\n        }\n        if ( hit(sphere3, currentPos)){\n            offset = normalize(currentPos - sphere3.xyz) * maxDepth / maxIterations;\n        }\n        if (hit(light, currentPos)){\n            fragColor = vec4(1.);\n            break;\n        }\n        if (max(abs(currentPos.x), max(abs(currentPos.y), abs(currentPos.z))) >= wallDepth){\n            fragColor = hit(currentPos, wallDepth);\n            break;\n        }\n        currentPos += offset;\n    }\n    \n    // shadow ray\n    offset = normalize(light.xyz - currentPos) * length(light.xyz - currentPos) / 60.;\n    currentPos = currentPos + offset;\n    for (float i = 0.; i < 60.; i++){\n        if ( hit(sphere2, currentPos) || hit(sphere1, currentPos)){\n            fragColor /= 2.;\n            break;\n        }\n        if(hit(light, currentPos)){\n            break;\n        }\n        currentPos += offset;\n    }\n    \n}","name":"Image","description":"","type":"image"}]}