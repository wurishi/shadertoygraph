{"ver":"0.1","info":{"id":"4t2czm","date":"1508047893","viewed":249,"name":"Spherical spiral","username":"ishiyama","description":"A spherical spiral curve","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["spiral","parametric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define\tPI\t3.14159\n#define VISUALIZE_RAY_SEGMENT_DISTANCE 0\n\nvec3 ParametricCurve(float t)\n{\n    // Spherial Spiral\n\tfloat NUM_SPIRALS = 11.0;\n\tfloat s = PI * NUM_SPIRALS * t;\n\treturn vec3(sqrt(1.0-t*t) * cos(s), t, sqrt(1.0-t*t) * sin(s));\n}\n\n//----------------------------------------------------------------\n\n// Distance between ray and segment\nfloat DistanceRayLineSegment(vec3 inSegmentPos0, vec3 inSegmentPos1, vec3 inRayOrigin, vec3 inRayDir)\n{\n\tvec3 a = inSegmentPos0;\n\tvec3 b = inSegmentPos1;\n\tvec3 o = inRayOrigin;\n\tvec3 d = inRayDir;\n    \n\t// From iq, https://www.shadertoy.com/view/XlfXR4\n\tvec3 ba = b\t- a;\n\tvec3 oa = o\t- a;\n\t\n\tfloat oad  = dot( oa,  d );\n\tfloat dba  = dot( d, ba );\n\tfloat baba = dot( ba, ba );\n\tfloat oaba = dot( oa, ba );\n\t\n\tvec2 th = vec2( -oad*baba + dba*oaba, oaba - oad*dba ) / (baba - dba*dba);\n\tth = vec2(max(th.x, 0.0), clamp(th.y, 0.0, 1.0));\n\t\n\tvec3 p = inSegmentPos0 + ba*th.y;\n\tvec3 q = inRayOrigin + d*th.x;\n\t\n\treturn length(p-q);\n}\nmat3 Rotate(vec3 inVector)\n{\n\tvec3 u = normalize(vec3(inVector.z, 0.0, -inVector.x));\n    return mat3(u, cross(u, -inVector), -inVector);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;\n    vec2 mouseUV = iMouse.xy/iResolution.xy;\n    \n    float theta = 0.5 * PI * mouseUV.y;\n    float phi = 0.1 * iTime + 6.0 * mouseUV.x;\n\tvec3 camera_pos = vec3(0.0, 0.0, -2.5);\n\tvec3 camera_dir = normalize(vec3(p.xy,2.0));\n    \n#if VISUALIZE_RAY_SEGMENT_DISTANCE\n    float c = smoothstep(0.2, 0.5, cos(iTime));\n    float f = exp2(3.5 + c * 3.5);\n#else\n    float f = exp2(7.0);\n#endif\n    \n    vec3 color = vec3(0.0);\n    \n\tconst float num_div = 128.0;\n    const float start\t= -1.0;\n    const float end\t\t= 1.0;\n    const float\tstep\t= (end - start) / num_div;\n    mat3 rot_mat = Rotate(vec3(cos(theta) * cos(phi), sin(theta), cos(theta) * sin(phi)));\n    vec3 prev_pos = rot_mat * ParametricCurve(start);\n\tfor (float t = start + step; t < end; t += step)\n    {\n        vec3 curr_pos = rot_mat * ParametricCurve(t);\n        color += vec3(1.0, 0.4, 0.2) * exp2(-f * DistanceRayLineSegment(prev_pos, curr_pos, camera_pos, camera_dir));\n        prev_pos = curr_pos;\n\t}\n    \n    color = pow(color, vec3(0.4545));\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}