{"ver":"0.1","info":{"id":"wsKyWK","date":"1606167424","viewed":250,"name":"Postprocesses_pt1_23","username":"edwardbraed","description":"simple \"one fetch\" filters set","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["filters","postprocess","set"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define gray(rgb) (rgb.r * 0.299 + rgb.g * 0.587 + rgb.b * 0.114)\n#define cmpv(v, b) (v.x > b.x && v.y > b.y && v.x < (b.x + 1.0) && v.y < (b.y + 1.0))\n\n// undef for stop anim\n#define ANIM\n\nvec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 aspect = calcAspect(iResolution.xy);\n    vec2 auv = uv * aspect;\n    const vec2 cells = vec2(4, 3);\n    vec2 cell = cells * uv;\n    vec2 pos = auv * cells;\n    \n    vec3 orig = texture(iChannel0, pos).xyz;\n    vec3 col = orig;\n    \n    if(cmpv(cell, vec2(0.0, 0.0)))      //- negative -----------\n    {\n        col = vec3(1.0) - col;\n    }\n    else if(cmpv(cell, vec2(1.0, 0.0))) //- grayscale ----------\n    {\n        col = vec3(gray(col));\n    }\n    else if(cmpv(cell, vec2(2.0, 0.0))) //- binary -------------\n    {\n        const float v = 0.2;\n        col = vec3(float(gray(col) < v));\n    }\n    else if(cmpv(cell, vec2(3.0, 0.0))) //- shade --------------\n    {\n        const vec3 v = vec3(1.0, 0.0, 1.0);\n        col = v * gray(col);\n    }\n    else if(cmpv(cell, vec2(0.0, 1.0))) //- sepia --------------\n    {\n        const float v = 0.2;\n        float g = gray(col);\n    \tcol = vec3(min(g + v * 2.0, 1.0), min(g + v, 1.0), g);\n    }\n    else if(cmpv(cell, vec2(1.0, 1.0))) //- color correction ---\n    {\n        const vec3 minv = vec3(0.1, 0.2, 0.1);\n        const vec3 maxv = vec3(0.4, 0.8, 0.4);\n        col = float((col.r > minv.r && col.r < maxv.r) &&\n                    (col.g > minv.g && col.g < maxv.g) &&\n                    (col.b > minv.b && col.b < maxv.b)) * col;\n    }\n    else if(cmpv(cell, vec2(2.0, 1.0))) //- channel correction -\n    {\n        const vec3 v = vec3(1, 1, 0);\n        col = col * v;\n    }\n    else if(cmpv(cell, vec2(3.0, 1.0))) //- toon ---------------\n    {\n        const float v = 4.0;\n        const float d = 1.0 / v;\n        col = round(col / d) * d;\n    }\n    else if(cmpv(cell, vec2(0.0, 2.0))) //- brightness ---------\n    {\n        const float v = 0.2;\n        col = clamp(col + v, 0.0, 1.0);\n    }\n    else if(cmpv(cell, vec2(1.0, 2.0))) //- contrast -----------\n    {\n        const float v = 1.9;\n        col = (col - 0.5) * v + 0.5;\n    }\n    else if(cmpv(cell, vec2(2.0, 2.0))) //- gamma --------------\n    {\n        const float v = 0.8;\n        col = pow(col, vec3(1.0 / v));\n    }\n    else if(cmpv(cell, vec2(3.0, 2.0))) //- saturate -----------\n    {\n        const float v = 8.0;\n        col = mix(vec3(gray(col)), col, v);\n    }\n\n    #ifdef ANIM\n    \tfloat t = (sin(iTime) + 1.0) * 0.5;\n    #else\n    \tfloat t = 0.0;\n    #endif\n    \n    vec3 res = mix(col, orig, t);\n    \n    // draw grid\n    for(float x = 0.0; x < cells.x; x += 1.0)\n    {\n        for(float y = 0.0; y < cells.y; y += 1.0)\n        {\n            res *= smoothstep(0.0, 0.010, abs(cell.x - x));\n            res *= smoothstep(0.0, 0.010, abs(cell.y - y));\n        }\n    }\n    // Output to screen\n    fragColor = vec4(res,1.0);\n}","name":"Image","description":"","type":"image"}]}