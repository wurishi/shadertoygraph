{"ver":"0.1","info":{"id":"4tSSDw","date":"1443971645","viewed":151,"name":"Trigollusion","username":"AlphaRogue","description":"How is the circle made of little circles drawn?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","illusion","sinus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI4 .7853981633974483\n#define PI8 .39269908169872415\n#define SQ2 1.41421356237309504\n#define BLUE vec4(.11, .15, .2, 1.)\n#define WHITE vec4(1., .98, .9, 1.)\n#define RED vec4(.6, .09, .08, 1.)\n\nvec4 aalias(float radius, float dist, vec4 bg, vec4 color, float ratio){\n    return mix(bg, color, smoothstep(radius, radius * ratio, dist));   \n}\n\nvoid mainImage(out vec4 pixColor, in vec2 pixCoord) {\n    vec2 pos = pixCoord.xy - iResolution.xy / 2.;\n    \n    vec2 radius = vec2(iResolution.y / 2.5, iResolution.y / 50.);\n    \n    float dist = length(pos);\n    \n    if (dist > radius.x + 2. + radius.y){\n        pixColor = BLUE;\n        return;\n    }\n    \n    float iTimeReg = iTime * 2.5;\n    \n    float cosTime = cos(iTimeReg);\n    float sinTime = sin(iTimeReg);\n    \n    float sqrt2 = (1. - SQ2 / 2.);\n    float sqrt4p = (sqrt(2. - SQ2) / 2.);\n    float sqrt4m = (1. - (sqrt(2. + SQ2) / 2.) );\n    \n    float timeLoops[6] = float [6](\n      sin(iTimeReg + PI4) - sqrt2 * sin(iTimeReg + PI4),\n      sin(iTimeReg - PI4) - sqrt2 * sin(iTimeReg - PI4),\n      sin(iTimeReg + PI8) - sqrt4m * sinTime,\n      sin(iTimeReg - PI8) - sqrt4m * sinTime,\n      sin(iTimeReg + 3. * PI8) - sqrt4m * cosTime,\n      sin(iTimeReg - 3. * PI8) + sqrt4m * cosTime\n    );\n\n    vec2 deltas[8] = vec2[8](\n      vec2(0. , cosTime),\n      vec2(sinTime, 0.),\n      vec2(timeLoops[0], timeLoops[0]),\n      vec2(timeLoops[1], -timeLoops[1]),\n      vec2(timeLoops[2], timeLoops[2] *  sqrt4p),\n      vec2(timeLoops[3], -timeLoops[3] * sqrt4p),\n      vec2(timeLoops[4] * sqrt4p, timeLoops[4]),\n      vec2(timeLoops[5] * sqrt4p, -timeLoops[5])\n    );\n    \n    for (int i = 0; i < 8; i++) {\n      float delta = length(pos - deltas[i] * radius.x);\n      if (delta < radius.y) {\n          pixColor = aalias(radius.y, delta, WHITE, RED, .8);\n          return;\n        }\n    }\n\n    pixColor = aalias(radius.x + radius.y + 2., dist, BLUE, WHITE, .98);\n}","name":"Image","description":"","type":"image"}]}