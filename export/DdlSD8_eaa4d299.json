{"ver":"0.1","info":{"id":"DdlSD8","date":"1668817523","viewed":189,"name":"Fast Rectangle Blur","username":"will_mckinnon","description":"Shadertoy implementation of the fast rectangle blur shader from https://madebyevan.com/shaders/fast-rounded-rectangle-shadows/","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadow","box","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Writeup: https://madebyevan.com/shaders/fast-rounded-rectangle-shadows/\n// Skew File that passes values to the shader: https://github.com/evanw/sky/blob/master/src/graphics/dropshadow.sk\n// Shader Code: https://github.com/evanw/sky/blob/master/glslx/shaders.glslx\n// Improved Version of: https://www.shadertoy.com/view/tdSGDc\n\n// approximates the error function, needed for the gaussian integral\nvec4 erf(vec4 x) {\n    vec4 s = sign(x), a = abs(x);\n    x = 1.0 + (0.278393 + (0.230389 + 0.078108 * (a * a)) * a) * a;\n    x *= x;\n    return s - s / (x * x);\n}\n\n// return the mask for the shadow of a box from lower to upper\nfloat boxShadow(vec2 lower, vec2 upper, vec2 point, float sigma) {\n    vec4 query = vec4(point - lower, point - upper);\n    vec4 integral = 0.5 + 0.5 * erf(query * (sqrt(0.5) / sigma));\n    return (integral.z - integral.x) * (integral.w - integral.y);\n}\n\n// per-pixel \"random\" number between 0 and 1\nfloat random() {\n    return fract(sin(dot(vec2(12.9898, 78.233), gl_FragCoord.xy)) * 43758.5453);\n}\n\n// check if a point is in a rect\nfloat insideBox(vec2 v, vec4 pRect) {\n    vec2 s = step(pRect.xy, v) - step(pRect.zw, v);\n    return s.x * s.y;\n}\n\n// draw rect\nvec4 drawRect(vec2 pos, vec4 rect, vec4 color) {\n    float alpha = color.a * insideBox(pos, vec4(rect.xy, rect.xy + rect.zw));\n    return vec4(color.rgb, alpha);\n}\n\n// blend two colors by alpha\nvec4 blend(vec4 src, vec4 append) {\n  \treturn vec4(src.rgb * (1.0 - append.a) + append.rgb * append.a,\n              1.0 - (1.0 - src.a) * (1.0 - append.a));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    float blurSigma = 4.0;\n    float shadowAlpha = 1.0;\n    vec4 rect = vec4(iResolution.xy / 2.0 - 100.0, vec2(200.0, 200.0));\n    vec4 rectColor = vec4(0.1, 0.5, 0.9, 1.0);\n    vec3 shadowColor = vec3(0.0);\n\n    float fragAlpha = shadowAlpha * boxShadow(rect.xy, rect.xy + rect.zw, fragCoord, blurSigma);\n\n    // dither the alpha to break up color bands\n    fragAlpha += (random() - 0.5) / 128.0;\n  \n    vec4 result = vec4(1.0);\n  \tresult = blend(result, vec4(shadowColor, fragAlpha));\n  \tresult = blend(result, drawRect(fragCoord, rect, rectColor));\n    \n    fragColor = result;\n}","name":"Image","description":"","type":"image"}]}