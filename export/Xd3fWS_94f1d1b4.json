{"ver":"0.1","info":{"id":"Xd3fWS","date":"1526460812","viewed":90,"name":"CubeSpasm","username":"demografica","description":"Shadertoy version of cubespasm.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sphere(vec3 pos, float radius)\n{\n    return length(pos) - radius;\n}\n\nfloat box(vec3 pos, vec3 size)\n{\n    return length(max(abs(pos) - size, 0.0));\n}\n\nfloat distfunc(vec3 pos)\n{\n    float d1 = sphere(sin(pos + iTime/5.0), 1.5);\n    float d2 = box(sin(pos + iTime/3.0),vec3(0.6));\n    \n    return max(d1,d2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 cameraOrigin = vec3(2.0, 2.0, 2.0);\n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 upDirection = vec3(0.0, 1.0, 0.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraOrigin);\n    vec3 cameraRight = normalize(cross(upDirection, cameraOrigin));\n    vec3 cameraUp = cross(cameraDir, cameraRight);\n    \n    vec2 screenPos = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;    //screenpos between -1 and 1\n    screenPos.x *= iResolution.x / iResolution.y; // Correct aspect ratio\n\n    vec3 rayDir = normalize(cameraRight * screenPos.x + cameraUp * screenPos.y + cameraDir);\n    \n    const int MAX_ITER = 100; // 100 is a safe number to use, it won't produce too many artifacts and still be quite fast\n    const float MAX_DIST = 20.0; // Make sure you change this if you have objects farther than 20 units away from the camera\n    const float EPSILON = 0.001; // At this distance we are close enough to the object that we have essentially hit it\n\n    float totalDist = 0.0;\n    vec3 pos = cameraOrigin;\n    float dist = EPSILON;\n    \n    for (int i = 0; i < MAX_ITER; i++)\n    {\n        // Either we've hit the object or hit nothing at all, either way we should break out of the loop\n        if (dist < EPSILON || totalDist > MAX_DIST)\n            break; // If you use windows and the shader isn't working properly, change this to continue;\n\n        dist = distfunc(pos); // Evalulate the distance at the current point\n        totalDist += dist;\n        pos += dist * rayDir; // Advance the point forwards in the ray direction by the distance\n    }\n    \n    if(dist < EPSILON)\n    {\n        // Lighting code\n        vec2 eps = vec2(0.0, EPSILON);\n        vec3 normal = normalize(vec3(\n        distfunc(pos + eps.yxx) - distfunc(pos - eps.yxx),\n        distfunc(pos + eps.xyx) - distfunc(pos - eps.xyx),\n        distfunc(pos + eps.xxy) - distfunc(pos - eps.xxy)));\n        \n        float diffuse = max(0.0, dot(-rayDir, normal));\n        float specular = pow(diffuse, 64.0);\n        vec3 color = vec3(diffuse + specular);\n        fragColor = vec4(0.0,0.0,0.2,1.0);\n        fragColor += vec4(color,1.0);\n        \n    }\n    else\n    {\n        fragColor = vec4(0.0);\n    }\n}\n\n","name":"Image","description":"","type":"image"}]}