{"ver":"0.1","info":{"id":"DsVBzK","date":"1698407338","viewed":296,"name":"foveated gaussian blur","username":"FabriceNeyret2","description":"sigma ~ dist to mouse","likes":13,"published":3,"flags":0,"usePreview":1,"tags":["blur","gaussian","foveated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"  #define T(u) texelFetch(iChannel0, ivec2(u), 0 )                    // apply on texture\n//#define T(u) ( P = floor((u)/8.), vec4( mod(P.x+P.y,2.) ) )         \n\n#define gauss(v) exp(-.5*v*v)                                         // Gaussian\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy,\n          P = ( 2.*u - R ) / R.y,\n          M = iMouse.xy;\n          M = length(M)<10. ? .5*vec2(cos(iTime),sin(iTime))          // demo mode: simulate moving mouse\n                            : ( 2.*M - R ) / R.y;                     // mouse\n                            \n    float s = 10.*length(P-M), w,t;                                   // sigma ~ dist to mouse\n    int L = int(ceil(2.*s));\n    O *= w;\n    for (int y = -L; y <= L; y++ )                                    // filter window\n        for (int x = -L; x <= L; x++ )\n            t += w = gauss( length(vec2(x,y))/s ),                    // local & cumulated weight\n            O += w * T( u + vec2(x,y) );                              // weighted sum\n    O /= t;\n // O = sqrt(O);                                                      // for the checker, add final sRGB conversion\n}\n","name":"Image","description":"","type":"image"}]}