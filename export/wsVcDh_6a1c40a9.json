{"ver":"0.1","info":{"id":"wsVcDh","date":"1653065649","viewed":185,"name":"Art : Ying Yang","username":"Gijs","description":"thingy","likes":20,"published":1,"flags":48,"usePreview":0,"tags":["3d","ray","marcher","yang","yin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 col = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n \n    //gamma correction\n    col = pow(col, vec3(1./GAMMA));\n    \n    //vignette\n    float minResolution = min(iResolution.x,iResolution.y);\n    vec2 s = (fragCoord*2.-iResolution.xy)/minResolution;\n    col *= smoothstep(VIGNETTE_END, VIGNETTE_START, length(s));\n    \n\tfragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//constants\n#define PI  3.14159\n#define TAU 6.28318\n\n//Render\nconst float DETAIL    = 1.;\nconst int   MAX_STEPS = 256;\nconst int   MAX_DEPTH = 2;\nconst float MAX_MARCH = 400.;\n\n//Lighting\nconst vec3  SKY_COLOR     = vec3(.45,.56,1.);\nconst vec3  SUN_VECTOR    = normalize(vec3(1));\nconst vec3  SUN_COLOR     = vec3(1.);\nconst float SUN_SIZE      = 0.0002;\nconst float SUN_INTENSITY = 1.;\n\n//Camera\nconst float APERTURE                = .0;\nconst float FOCAL_LENGTH            = 8.;\nconst float ZOOM                    = .3;\nconst float MOVEMENT_SPEED          = 3.;\nconst float MAX_SPEED               = 8.;\nconst float MIN_SPEED               = 1e-4;\nconst vec3  CAMERA_LOOK             = vec3(0,-0.3,0);\nconst vec3  CAMERA_POSITION         = vec3(3,2,-2)*2.;\nconst float CAMERA_SENSITIVITY      = 0.003;\nconst float CAMERA_ROLL_SENSITIVITY = 1.;\n\n//Occlusion\nconst float OCCLUSION_SPREAD    = .5;\nconst float OCCLUSION_INTENSITY = .2;\nconst int   OCCLUSION_SAMPLES   = 3;\n\n//Fog\nconst vec3  FOG_COLOR     = vec3(0.6,.7,.8);\nconst float FOG_HEIGHT    = 0.;\nconst float FOG_THICKNESS = .0;\nconst float FOG_FALLOFF   = .2;\n\n//Post\nconst float GAMMA          = 2.2;\nconst float VIGNETTE_START = 1.5;\nconst float VIGNETTE_END   = 4.;\n\n//rotates vector around another\nvec3 rotate(vec3 p, float angle, vec3 v){\n\tfloat c = cos(angle);\n\tvec3 s = sin(angle) * v;\n\tvec3 d =  (1.0 - c) * v;\n    return dot(p,d)*v + p*mat3(c,-s.z,s.y, s.z,c,-s.x, -s.y,s.x,c);\n}\n\n//Palette Creator\nvec3 getPaletteColor( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(TAU*(c*t+d) );\n}\n\n//hashing\nvoid hash( inout uint n ) {\n    n += ( n << 10u );\n    n ^= ( n >>  6u );\n    n += ( n <<  3u );\n    n ^= ( n >> 11u );\n    n += ( n << 15u );\n}\n\n//gives a random float in range [0,1]\nfloat rand( inout uint n ){\n    hash(n);\n    return uintBitsToFloat( (n>>9U) | 0x3f800000U ) - 1.0;\n}\n\n//credits to demofox\n    \nvec3 randomUnitVector(inout uint state){\n    float z = rand(state)*2.-1.;\n    float a = rand(state)*TAU;\n    float r = sqrt(1.-z*z);\n    float x = r*cos(a);\n    float y = r*sin(a);\n    return vec3(x, y, z);\n}\n\n\n//scene description\n\n\nfloat distanceBall(vec3 p){\n\treturn length(p)-1.;   \n}\nfloat distanceFloor(vec3 p){\n    return p.y+2.;\n}\n\nfloat distanceDisk(vec3 p){\n    vec3 q = vec3(p.x, 0, p.z);\n    float r = length(q);\n    r = r > 1.0 ? r : 1.0;\n    q /= r;\n    return distance(p,q);\n}\n\nfloat distanceThing(vec3 p){\n\tfloat dd = distanceDisk(p + vec3(0,0,1));\n    float db = distanceBall(p - vec3(0,0,1));\n    float dbd = distanceDisk(p*.5)*2.;\n    float dsd = distanceDisk((p - vec3(0,0,1))*4.)*.25;\n    float dsb = distanceBall((p + vec3(0,0,1))*4.)*.25;\n    \n    float d = 1e20;\n    d = min(d, dbd);\n    d = max(d, p.x);\n    d = min(d, dd);\n    d = max(d, -db);\n    d = max(d, -dsb);\n    d = min(d, dsd);\n    \n    return d;\n}\n\nfloat distanceYing(vec3 p, float t){\n    float ca = cos(t);\n    float sa = sin(t);\n    \n    p.xz = mat2(ca, -sa, sa, ca)*p.xz;\n    \n    return distanceThing(p);\n}\n\nfloat distanceYang(vec3 p, float t){\n    p = vec3(-p.x, -p.z, p.y);\n    \n    float ca = cos(t);\n    float sa = sin(t);\n    \n    p.xz = mat2(ca, -sa, sa, ca)*p.xz;\n    \n    return distanceThing(p);\n}\n\nfloat sceneDistance(vec3 p, float t){\n    float dist = MAX_MARCH;\n\n    dist = min(dist, distanceYing(p,t));\n    dist = min(dist, distanceYang(p,t));\n    dist = min(dist, distanceFloor(p));\n    \n    return dist;\n}\n\nvec3 sceneColor(vec3 p, float t){\n    float dist  = MAX_MARCH;\n    vec3 col = vec3(1,0,0);\n\n    float floorDistance = distanceFloor(p);\n    if(floorDistance<dist){\n        dist = floorDistance;\n        col  = vec3(.5);\n    }\n    \n    float yingDistance = distanceYing(p,t);\n    if(yingDistance<dist){\n        dist = yingDistance;\n        col  = vec3(.75);\n    }\n    \n    float yangDistance = distanceYang(p,t);\n    if(yangDistance<dist){\n        dist = yangDistance;\n        col  = vec3(.25);\n    }\n\n    return col;\n}  \n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 getSkyColor(vec3 dir){\n    vec3 d = dir-SUN_VECTOR;\n    return SKY_COLOR + SUN_COLOR*min(SUN_SIZE/dot(d,d),SUN_INTENSITY);\n}\n\nstruct marchInfo{\n\tint   hit;    // -1 is no hit, 1 is a hit, 0 if indeterminate\n    int   steps;  //steps taken\n    float t;      //distance travelled\n    float mdis;   //minimum distance recorded\n    float mangle; //minimum \"angle\" recorded, actual angle is asin(mangle)  \n};\n\nmarchInfo raymarch(vec3  ori, vec3  dir, float eps){\n    int hit = 0;\n    int  steps = 0;\n    float t = 0.;\n    float mdis = MAX_MARCH;\n    float mangle = 1e20;\n    \n    for(;steps<MAX_STEPS; steps++){\n        if(t > MAX_MARCH){hit = -1; break;}\n        float dis = sceneDistance(ori + dir*t, iTime);\n        mdis = min(mdis, dis);\n        mangle = min(mangle, dis/t);\n        if(abs(dis)<t*eps){hit = 1; break;} \n        t += dis;\n    } \n    \n    return marchInfo(hit, steps, t, mdis, mangle);\n}\n\nvec3 sceneNormal(vec3 p, float eps){\n    eps = max(eps, 1e-8);\n    vec2 k = vec2(1,-1);\n    vec2 d = k*eps;\n    return normalize( k.xyy*sceneDistance( p + d.xyy , iTime) + \n                      k.yyx*sceneDistance( p + d.yyx , iTime) + \n                      k.yxy*sceneDistance( p + d.yxy , iTime) + \n                      k.xxx*sceneDistance( p + d.xxx , iTime) );\n}\n\nfloat sceneShadow(vec3 p, float eps){\n    marchInfo info = raymarch(p, SUN_VECTOR, eps); \n    return float(info.hit == -1) * clamp(info.mangle/SUN_SIZE*.01, 0., 1.) ;\n}\n\nfloat sceneOcclusion(vec3 p, vec3 n){\n    float o = 1.;\n    float s = OCCLUSION_SPREAD;               \n    float k = OCCLUSION_INTENSITY;  \n    float d = s;           \n\n    for (int i = 0; i < OCCLUSION_SAMPLES; ++i) {\n        o -= (d - sceneDistance(p + n * d, iTime)) * k;\n        d += s;\n        k *= 0.5;\n    }\n    \n    return o;\n}\n\nvec3 raymarcher(vec3 ori, vec3 dir, float eps){ \n    vec3 col = vec3(1);\n    vec3 fin = vec3(0);\n    \n    for(int depth=0; depth<MAX_DEPTH; depth++){\n        marchInfo info = raymarch(ori, dir, eps);\n        \n        if(info.hit == 1){\n            vec3 hitPos      = ori + dir*info.t;\n            vec3 hitColor = sceneColor(hitPos, iTime);\n            vec3 hitNormal   = sceneNormal(hitPos, info.t*eps);\n\n            float diffuse = max(dot(hitNormal,SUN_VECTOR),0.);\n            float shadow = diffuse>0. ? sceneShadow(hitPos, info.t*eps) : 0.;\n            float occlusion = sceneOcclusion(hitPos, hitNormal);\n\n            col *= hitColor;\n            fin = col*(occlusion*SKY_COLOR + diffuse*shadow*SUN_COLOR);\n            break;\n\n        }else{\n            fin = col * getSkyColor(dir);\n            break;\n        }\n    \n    }\n\n    return fin;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n    float minResolution = min(iResolution.x,iResolution.y);\n    float eps = DETAIL*ZOOM/minResolution;\n    \n    //camera\n    vec3 cameraPosition = texelFetch(iChannel1,ivec2(0,0),0).rgb;\n  \tvec3 cameraForward  = texelFetch(iChannel1,ivec2(1,0),0).rgb;\n    vec3 cameraRight    = texelFetch(iChannel1,ivec2(2,0),0).rgb;\n    vec3 cameraUpward   = texelFetch(iChannel1,ivec2(3,0),0).rgb;\n    \n    //Scaling\n    vec2 sp  = (fragCoord*2.-iResolution.xy)/minResolution*ZOOM;\n     \n   \t//Pixel Ray\n\tvec3 direction = normalize(cameraForward+sp.x*cameraRight+sp.y*cameraUpward);\n    \n    //Final\n    vec3 newSample = raymarcher(\n    \tcameraPosition,\n        direction,\n        eps\n    );  \n\n    fragColor = vec4(newSample, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//This buffer handles the Camera\n//if ANY movement is done fragColor.w becomes 1 for ALL pixels\n\n//makes sure that three 3 dimensional vectors are orthonormal\nvoid GramSchmidt33(inout vec3 a, inout vec3 b, inout vec3 c){\n    a = normalize(a);\n    b = b - dot(b,a)*a;\n    b = normalize(b);\n    c = c - dot(c,a)*a - dot(c,b)*b;\n    c = normalize(c);\n}\n\nvoid rot(inout vec3 a, inout vec3 b, float angle){\n    float c = cos(angle);\n    float s = sin(angle);\n    a =  c*a + s*b;\n    b = -s*a + c*b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    ivec2 p = ivec2(fragCoord);\n    \n    if(p.x>4 || p.y > 0) return;\n    \n    vec3 cameraPosition = texelFetch(iChannel0,ivec2(0,0),0).rgb;\n  \tvec3 cameraForward  = texelFetch(iChannel0,ivec2(1,0),0).rgb;\n    vec3 cameraRight    = texelFetch(iChannel0,ivec2(2,0),0).rgb;\n    vec3 cameraUpward   = texelFetch(iChannel0,ivec2(3,0),0).rgb;\n    vec3 mouseOld       = texelFetch(iChannel0,ivec2(4,0),0).rgb;\n    \n    if(iFrame==0){\n        cameraPosition  = CAMERA_POSITION;\n        cameraForward   = normalize(CAMERA_LOOK-cameraPosition);\n        cameraRight     = normalize(cross(vec3( 0, 1, 0),cameraForward));\n        cameraUpward    = normalize(cross(cameraForward,cameraRight));\n        mouseOld        = vec3(iMouse.xy, 0);\n    } \t\t\n    \n    bool forward     = texelFetch(iChannel1,ivec2(87,0),0).x + texelFetch(iChannel1,ivec2(38,0),0).x >0.;\n    bool left        = texelFetch(iChannel1,ivec2(65,0),0).x + texelFetch(iChannel1,ivec2(37,0),0).x >0.;\n    bool backward    = texelFetch(iChannel1,ivec2(83,0),0).x + texelFetch(iChannel1,ivec2(40,0),0).x >0.;\n    bool right       = texelFetch(iChannel1,ivec2(68,0),0).x + texelFetch(iChannel1,ivec2(39,0),0).x >0.;\n    bool rollleft    = texelFetch(iChannel1,ivec2(81,0),0).x > 0.;\n    bool rollright   = texelFetch(iChannel1,ivec2(69,0),0).x > 0.;\n    bool down        = texelFetch(iChannel1,ivec2(16,0),0).x + texelFetch(iChannel1,ivec2(34,0),0).x > 0.;\n    bool up          = texelFetch(iChannel1,ivec2(32,0),0).x + texelFetch(iChannel1,ivec2(33,0),0).x > 0.;\n    bool mouseLeft   = iMouse.z>0.;\n    bool interaction = forward||left||backward||right||rollleft||rollright||down||up||mouseLeft;\n    \n    float stepSize = clamp(\n        sceneDistance(cameraPosition, iTime)*MOVEMENT_SPEED,\n        MIN_SPEED,\n        MAX_SPEED\n    )*iTimeDelta*ZOOM;\n    \n    //Translation\n    cameraPosition += (cameraForward*(float(forward) - float(backward)) +\n        \t\t       cameraRight  *(float(right)   - float(left)    ) +\n        \t           cameraUpward *(float(up)      - float(down)    )\n                      )*stepSize;\n    \n    //Roll\n    float r = (float(rollleft)-float(rollright))*iTimeDelta*CAMERA_ROLL_SENSITIVITY;\n    rot(cameraRight, cameraUpward , r);\n    \n    //Pitch & Yaw\n    if(mouseLeft){\n        if(mouseOld.z==0.){\n            mouseOld.xy = iMouse.zw;\n            mouseOld.z = 1.;\n        }\n\t\tvec2 s = iMouse.xy-mouseOld.xy;\n        rot(cameraForward, cameraUpward, s.y*CAMERA_SENSITIVITY);\n        rot(cameraForward, cameraRight , s.x*CAMERA_SENSITIVITY);\n    }else{\n    \tmouseOld.z = 0.;   \n    }\n    \n    //Make sure this triple is orthonormal\n    GramSchmidt33(cameraForward, cameraUpward, cameraRight);\n    \n    if(p.x==0){\n    \tfragColor.rgb = cameraPosition;\n    }else if(p.x==1){\n        fragColor.rgb = cameraForward;\n    }else if(p.x==2){\n        fragColor.rgb = cameraRight;\n    }else if(p.x==3){\n        fragColor.rgb = cameraUpward;\n    }else if(p.x==4){\n        fragColor.rgb = vec3(iMouse.xy, mouseOld.z);\n    }\n    \n    fragColor.w = float(interaction);\n}","name":"Buffer B","description":"","type":"buffer"}]}