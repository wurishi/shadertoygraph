{"ver":"0.1","info":{"id":"ttyczK","date":"1611490396","viewed":67,"name":"star and building","username":"regis","description":"star and building","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","star","skyline","building"],"hasliked":0,"parentid":"3lVyWm","parentname":"F1 car"},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 sdfBat(vec3 p, vec3 q){\n\n    vec2 d = vec2(0.0);\n    \n    float height = 60.0;\n    \n    vec3 pdb = p - vec3(q.x, q.y*height, q.z);\n    float bat = Box(pdb, vec3(15.0, q.y*height, 15.0), 0.2);\n       \n    \n    d.x = bat;\n    d.y = 5.0;\n    \n    if(q.y*height > 30.0){\n        float bloc = sdCylinder(p- vec3(q.x, q.y*height, q.z), vec3(q.x, q.y*height, q.z), vec3(q.x, q.y*height+10.0, q.z), 10.0);\n\n        if(bloc < d.x){\n            d.x = bloc;\n            d.y = 6.0;\n        }\n        \n        float bloc2 = sdEllipsoid(p - vec3(q.x, q.y*height*2.2, q.z), vec3(5.0, 15.0, 5.0));\n        if(bloc2 < d.x){\n            d.x = bloc2;\n            d.y = 6.0;\n        }\n        \n        float pointe = sdCylinder(p- vec3(q.x, q.y*height, q.z), vec3(q.x, q.y*height, q.z), vec3(q.x, q.y*height+50.0, q.z), 0.4);\n        if(pointe < d.x){\n            d.x = pointe;\n            d.y = 6.0;\n        }\n        \n    }\n    \n    \n    return d;\n\n}\n\n/**********************************************************/\n\nvec2 map(vec3 p, vec2 uv){\n\n\n   \n    vec2 d=vec2(0.0);\n    float pl = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    vec3 c = vec3(70.0, 0.0, 70.0);\n    vec2 u = p.xz;\n    vec2 id = floor((u+0.5*c.xz)/c.xz-0.5*c.xz);\n    \n    float m = 0.0;\n    \n    \n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    \n    for(int y = -2;y <=2;y++){\n        for(int x =-2;x<=2;x++){\n        \n            m += N21(id-vec2(x, y));\n        }\n        \n    }\n    m = m/25.0;\n    vec3 s = vec3(0.0, m, 0.0);\n    vec2 bat = sdfBat(q, s);\n      \n      \n       d.x = pl;\n       d.y = 2.0;\n       \n    if(bat.x < d.x){\n        d.x = bat.x;\n        d.y = bat.y;\n    \n    }\n       \n      \n    return d;\n    \n    \n}\n\nvec3 RayMarch(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float v, delta;\n    for (int i = 0; i < 100; i++) {\n        t.yz = map(eye + t.x * viewRayDirection, uv).xy;\n        \n                    \n            if (abs(t.y) < (t.y*0.01))break;\n                \n        t.x += t.y;\n        \n        if (t.x >= 10000.0)break;\n        \n        \n        \n    }\n    if (t.x >= 10000.0)t.x = -1.0;\n    \n    return t;\n\n\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t , vec2(1.0)).x;\n        res = min( res, 10.0*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( h<0.0001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos , vec2(1.0)).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\nvec3 GetLightM(vec3 p, vec2 uv, vec3 lg, out vec3 n, vec3 ro, vec3 rd){\n    vec3 lightpos = lg;\n    //lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = map(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    n = d.x - vec3(\n        map(p-e.xyy, uv).x,\n        map(p-e.yxy, uv).x,\n        map(p-e.yyx, uv).x);\n    \n    \n    n = normalize(n);\n   \n    float occ = calcAO(p, n);       \n    float dif = clamp(dot(n, l), .0, 1.);\n    dif += occ*0.2;\n    //dif *= calcSoftshadow(p, lightpos, 0.01, 100. );\n \n    vec3 dd = RayMarch(p+n*.01, l, uv);\n    p = ro + reflect(n, l) * dd.x;\n    \n     \n    \n         \n    if((dd.x < length(lightpos-p)) && (dd.x > 0.0)){\n        if(dd.z == 2.0)\n        {\n             \n             return vec3(dif);\n        }\n        else if(dd.z == 3.0)\n        {\n             return vec3(dif) * vec3(1.0, 0.0, 0.0)*0.4;\n        }\n        else if(dd.z == 4.0)\n        {\n             return vec3(dif)* vec3(1.0, 0.3, 0.0)*0.4;;\n        }\n        else if(dd.z == 6.0){\n             vec3 col = vec3(dif)*vec3(0.63, 0.60, 0.58)+noise(vec2(N21(p.xz)))*0.2;\n             return col;\n\n         }\n        else\n            return vec3(dif)*0.2;\n            \n     }\n     else\n         return vec3(dif);\n\n}\n\n\n\nfloat zero(vec2 uv){\n    \n    float s = smoothstep(.2, .19, length(uv-vec2(clamp(uv.x, -0.2, 0.2), clamp(uv.y, -0.2, 0.2))));\n    s *= smoothstep(.05, 0.06, length(uv-vec2(clamp(uv.x, -0.2, 0.2), clamp(uv.y, -0.2, 0.2))));\n    \n    return s;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    //iMouse.xy / iResolution.xy\n    vec3 lookat = vec3((iMouse.x/iResolution.x)*10.0, (iMouse.y/iResolution.y)*30.0, 30.0);\n    vec3 ro = vec3(-25.5, 200.0, -40.0);\n    vec3 lightpos = vec3(0.0, 200., -40.);\n    \n           \n    // camera move\n    vec3 dirc = vec3(-10.5, 15.0, 0.0);\n   \n    \n    float an = (iMouse.x/iResolution.x)*10.0;\n    float anx = (iMouse.y/iResolution.y)*10.0;\n    ro -= dirc;\n    lookat -= dirc;\n    ro *= RotZ(anx);\n    lookat *= RotZ(anx);\n    ro *= RotX(anx);\n    lookat *= RotX(anx);\n    ro *= RotY(an);\n    lookat *= RotY(an);\n    ro += dirc;\n    lookat += dirc;\n    \n    \n    \n    lightpos -= dirc;\n    lightpos *= RotZ(anx);\n    lightpos *= RotX(anx);\n    lightpos *= RotY(an);\n    lightpos += dirc;\n    \n    if(ro.y < 0.0){\n        ro.y = 2.0;\n        lightpos.y = 2.0;\n    }\n    \n    \n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n        \n     vec3 t;\n     float dO, dif, dif2, dif3, difT;\n     vec3 p;\n     \n  \n     \n     t = RayMarch(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n    float alpha = 1.0;\n    vec3 n1, n2, n3, np;\n  \n   \n    \n    \n        \n     if(t.x > 0.0){\n                 \n         vec3 diff2 = GetLightM(p, uv, lightpos, n1, ro, rd);\n         \n         if(t.z == 1.0){\n             col = diff2* vec3(1.0, 0.0, 0.0);\n         }\n         else if(t.z == 2.0){\n             vec3 m;\n             vec3 c = vec3(40.0, 0.0, 30.0);\n             vec3 q = mod(p+0.5*c,c)-0.5*c;\n             float z = -900.0;\n             for(int i = 0;i < 50;i++){\n                 m+= Line3(p, vec3(35.0, 0.0, z), vec3(35.0, 0.0, z-15.0), 1.0, 0.5);\n                 z += 30.0;\n                 \n             }\n             \n            col =  m ;\n             \n             \n         }\n         else if(t.z == -1.0){\n             \n         }\n         else if(t.z == 3.0){\n            \n             \n             col = diff2 * vec3(1.0, 0.3, 0.2);\n         \n         }\n         else if(t.z == 4.0){\n                          \n             col = diff2 * vec3(0.1);\n             \n             \n         }\n         else if(t.z == 5.0){\n             vec3 c = vec3(50.0, 0.0, 50.0);\n             vec3 f = fract(p);\n             \n             vec3 id = floor(p/1.0);\n             \n             vec3 window = floor(p / 5.0);\n             \n             if(n1.y != 1.0){//#a39a95\n                 bool iin = false;\n                 if((mod(id.z, 2.0) == 0.0)&&(mod(id.x, 2.0) == 1.0)){\n                     col = diff2*vec3(0.63, 0.60, 0.58)+noise(vec2(N21(p.xz)))*0.2;\n                     iin = true;\n                 }\n                 if((mod(id.x, 2.0) == 0.0)&&(mod(id.z, 2.0) == 1.0)){\n                     col = diff2*vec3(0.63, 0.60, 0.58)+noise(vec2(N21(p.xz)))*0.2;\n                     iin = true;\n                 }\n                 if((mod(id.y, 2.0) == 0.0)){\n                     col = diff2*vec3(0.63, 0.60, 0.58)+noise(vec2(N21(p.xz)))*0.2;\n                     iin = true;\n                 }\n                 if(iin == false){\n                     float v = (N21(id.xy)+N21(id.yz)+N21(id.xz))/3.0;\n                     if(v > 0.5){\n                         col = diff2*vec3(1.0, 1.0, 0.0)*(v+abs(fract(iTime)-0.5)*0.5);\n                     }\n                     else\n                     {\n                         col = diff2 * texture(iChannel0, reflect(rd, -n1)).rgb;\n                     }\n                 \n                 }\n             }\n             else\n             {\n                  col = diff2*vec3(0.63, 0.60, 0.58)+noise(vec2(N21(p.xz)))*0.2;\n             }\n             \n         }\n         else if(t.z == 6.0){\n             col = diff2*vec3(0.63, 0.60, 0.58)+noise(vec2(N21(p.xz)))*0.2;\n         \n             \n         }\n         else if(t.z == 7.0){//C\n             col = vec3(0.8);\n             float f = -1.0+2.0*smoothstep(-0.1, 0.1, sin(5.0*p.z)+sin(3.0*p.y));\n             col += f * diff2 ;\n             //col = vec3(0.5) * diff2;\n         \n             \n         }\n         else if(t.z == 8.0){\n             col = vec3(0.0, 1.0, 0.0) * diff2;\n         \n             \n         }\n         else if(t.z == 9.0){\n             col = vec3(1.0, 1.0, 1.0) * diff2;\n         \n             \n         }\n         \n         \n         \n     }\n     else\n     {\n         //col = RayMarchCloud( ro, rd);\n        //col = vec3(0.0, 0.0, 0.0);\n        float t = iTime*.05;\n        for(float i = 0.;i <1.;i+=1./NUM_LAYERS){\n            float depth = fract(i+t);\n            float scale = mix(20., .5, depth);\n            float fade = depth*smoothstep(1., .9, depth);\n            float n = Hash21(vec2(fade*120.25, fade*12345.2));\n            col += StarLayer(uv*scale+i*453.2, 1.0, iTime)*fade;\n        }\n     }\n     \n      //col = mix(vec3(0.0, 1.0, 1.0), col, 0.6);//exp(-t.x*0.05));\n   \n    // Output to screen\n    fragColor = vec4((col),alpha);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\nfloat dist = 0.0;\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nmat3 RotX(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(1., .0, .0, .0, c, -s, .0, s, c);\n\n}\n\nmat3 RotY(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, .0, s, .0, 1., .0, -s, .0, c);\n\n}\n\nmat3 RotZ(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);\n\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat opExtrusion(in vec3 p, in float d, in float h) {\n    // d is the distance to the 2D shape using the x and y components of p\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\n\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    //return vec4( p-clamp(p,-h,h), 0.0 ); // faster, but produces zero in the interior elongated box\n    \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\n\nvec3 opTwist(in vec3 p, in float t) {\n    float c = cos(t * p.y);\n    float s = sin(t * p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\n\nconst mat2 rotate2D = mat2(1.3623, 1.7531, -1.7131, 1.4623);\nvec2 add = vec2(1.0, 0.0);\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n\nfloat Hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat Noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    float res = mix(mix( Hash12(p),          Hash12(p + add.xy),f.x),\n                    mix( Hash12(p + add.yx), Hash12(p + add.xx),f.x),f.y);\n    return res;\n}\n\n// ref https://www.shadertoy.com/view/Xs33Df\nfloat Noise3D(in vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; // Cell's fractional component.\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\n\n\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return -(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r);\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nfloat Box2(vec3 p, vec3 sc, float r, float an){\n    an = 80.0;\n    vec3 cs = vec3(cos(an*3.1415/180.0), sin(an*3.1415/180.0),cos(an*3.1415/180.0));\n    float c2 = length(cs);\n    \n    float a = length(max( abs(p)-(sc)  , 0.0)) - r;\n    float b = length(max(abs(p)-vec3(1.0, 2.0, 1.0), 0.));\n    return a;\n}\n\nfloat Capsule(vec3 p, vec3 sc, float r){\n    vec3 cs = vec3(cos(90.0*3.1415/180.0), sin(90.0*3.1415/180.0),cos(90.0*3.1415/180.0));  \n    float a = length(max( abs(p)- (sc*cs)  , 0.0)) - r;\n    return a;\n}\n\nfloat opRep( in vec3 p, in vec3 c, vec3 sc, float r )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return Box( q, sc, r );\n}\n\nfloat opRepS( in vec3 p, in vec3 c, vec4 pos )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return length(q) - pos.w;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat sdfSegment(in vec3 p, in vec3 a, in vec3 b, in float r){\n\n    \n    float h = min(1.0, max(0.0, dot(p-a, b-a) / dot(b-a, b-a)));\n   // a = a*exp(-4.*h);\n    //r =r-sin(9.0*3.1415*h)*0.2;\n    //r =r+exp(-4.*h);\n    //r = r -4.*h*(1.-h)-0.2*cos(10.*h+4.*iTime);\n    //r += sin(h*3.1415)*0.3;\n    return length(p-a-(b-a)*h)-r;\n    \n\n}\n\nfloat sdfSegment2(in vec3 p, in vec3 a, in vec3 b, in float r){\n\n    \n    float h = min(1.0, max(0.0, dot(p-a, b-a) / dot(b-a, b-a)));\n   // a = a*exp(-4.*h);\n    //r =r-sin(9.0*3.1415*h)*0.2;\n    //r =r+exp(-4.*h);\n    //r = r -4.*h*(1.-h)-0.2*cos(10.*h+4.*iTime);\n    r += sin(h*3.1415)*0.3;\n    return length(p-a-(b-a)*h)-r;\n    \n\n}\n\n\nfloat opRepSeg( in vec3 p, in vec3 c,  in vec3 a, in vec3 b, in float r)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return sdfSegment(q, a, b, r);\n}\n\n\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nvec4 sdBezier2( vec3 p, vec3 va, vec3 vb, vec3 vc )\n{\n  vec3 w = normalize( cross( vc-vb, va-vb ) );\n  vec3 u = normalize( vc-vb );\n  vec3 v =          ( cross( w, u ) );\n  //----  \n  vec2 m = vec2( dot(va-vb,u), dot(va-vb,v) );\n  vec2 n = vec2( dot(vc-vb,u), dot(vc-vb,v) );\n  vec3 q = vec3( dot( p-vb,u), dot( p-vb,v), dot(p-vb,w) );\n  //----  \n  float mn = det(m,n);\n  float mq = det(m,q.xy);\n  float nq = det(n,q.xy);\n  //----  \n  vec2  g = (nq+mq+mn)*n + (nq+mq-mn)*m;\n  float f = (nq-mq+mn)*(nq-mq+mn) + 4.0*mq*nq;\n  vec2  z = 0.5*f*vec2(-g.y,g.x)/dot(g,g);\n//float t = clamp(0.5+0.5*(det(z,m+n)+mq+nq)/mn, 0.0 ,1.0 );\n  float t = clamp(0.5+0.5*(det(z-q.xy,m+n))/mn, 0.0 ,1.0 );\n  vec2 cp = m*(1.0-t)*(1.0-t) + n*t*t - q.xy;\n  //----  \n  float d2 = dot(cp,cp);\n  return vec4(sqrt(d2+q.z*q.z), t, q.z, -sign(f)*sqrt(d2) );\n}\n\n\nvec4 opRepBezier( in vec3 p, in vec3 c, vec3 va, vec3 vb, vec3 vc )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    vec3 qa = mod(va+0.5*c,c)-0.5*c;\n    vec3 qb = mod(vb+0.5*c,c)-0.5*c;\n    vec3 qc = mod(vc+0.5*c,c)-0.5*c;\n    return  sdBezier2(q, va, vb, vc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\n\nfloat NS21(vec2 p){\n\n    return fract(sin(p.x*100.+p.y*6574.)*5647.);\n}\n\nfloat SmoothNoise(vec2 uv) {\n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    lv = lv*lv*(3.-2.*lv);\n    \n    float bl = NS21(id);\n    float br = NS21(id+vec2(1,0));\n    float b = mix(bl, br, lv.x);\n    \n    float tl = NS21(id+vec2(0,1));\n    float tr = NS21(id+vec2(1,1));\n    float t = mix(tl, tr, lv.x);\n    \n    return mix(b, t, lv.y);\n}\n\nfloat SmoothNoise2(vec2 uv) {\n    float c = SmoothNoise(uv*4.);\n    \n    // don't make octaves exactly twice as small\n    // this way the pattern will look more random and repeat less\n    c += SmoothNoise(uv*8.2)*.5;\n    c += SmoothNoise(uv*16.7)*.25;\n    c += SmoothNoise(uv*32.4)*.125;\n    c += SmoothNoise(uv*64.5)*.0625;\n    \n    c /= 2.;\n    \n    return c;\n}\n\nfloat N21(vec2 p){\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x*p.y);\n\n}\n\nvec2 N22(vec2 p){\n\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n\n}\n\n\nfloat _line(vec2 p, vec2 a, vec2 b){\n\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\nvec3 Line(vec2 p, vec2 a, vec2 b, float l1, float l2){\n\n    float d = _line(p, a, b);\n    float m = smoothstep(l1, l2, d);\n    return vec3(m); \n\n}\n\nfloat _line3(vec3 p, vec3 a, vec3 b){\n\n    vec3 pa = p-a;\n    vec3 ba = b-a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\nvec3 Line3(vec3 p, vec3 a, vec3 b, float l1, float l2){\n\n    float d = _line3(p, a, b);\n    float m = smoothstep(l1, l2, d);\n    return vec3(m); \n\n}\n\n#define NUM_LAYERS 6.\nvec3 Star(vec2 uv, float fade){\n    vec3 col = vec3(0.0);\n    float r = length(uv);\n    float c = 0.05/r;//smoothstep(.1, 0.09, r);\n    col += c;\n    \n    c = max(0., 1.0-abs(uv.x*uv.y*1000.0));\n    \n    col += c*fade;\n    \n    col*= smoothstep(1., .2, r);\n    return col;\n\n}\n\nfloat Hash21(vec2 p){\n\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n\n}\n\nvec3 StarLayer(vec2 uv, float fade, float t){\n    vec3 col = vec3(0.0);\n    vec2 p = vec2(fract(uv.x), fract(uv.y));\n    p -= 0.5;\n    vec2 id = floor(uv);\n    \n    for(int y = -1;y <=1;y++){\n        for(int x =-1;x<=1;x++){\n            vec2 offs = vec2(x,y);\n            float n = Hash21(id+offs);\n            vec3 star = Star(p-offs-vec2(n, fract(n*34.0))+.5, fade);\n            float size = fract(n*345.32);\n            vec3 color = sin(vec3(.2, .3, .9)*fract(n*2345.2)*123.2)*.5+0.5;\n            color = color*vec3(1., 0.5, 1.+size);\n            \n            star *= sin(t*3.+n*6.2831)*.5+.5;\n            col += star*size*color;\n        }\n    }\n    \n    return col;\n\n}","name":"Common","description":"","type":"common"}]}