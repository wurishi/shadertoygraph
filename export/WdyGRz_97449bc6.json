{"ver":"0.1","info":{"id":"WdyGRz","date":"1569545936","viewed":322,"name":"spinning infinity","username":"n88","description":"testing out polar coordinates, i arrived at this result by happy accident.\nI was inspired by Seigaiha Mandala by PixelPhil with the shader look to make it look a bit prettier.\nnever would've thought i'd arrive at this result.\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["polar","spin","symmetry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ssin(a)  (.5 + .5*(sin(a)))\n#define scos(a)  (.5 + .5*(cos(a)))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 suv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 uv = suv;\n    float asp = iResolution.y/iResolution.x;\n    //uv.y += .5;\n    //uv.x *= 1.12;\n    //uv.x = abs(uv.x);\n    vec2 puv = vec2(atan(uv.x, uv.y)/3.1415, length(uv));\n\tuv = puv;\n    \n\tvec3 col = vec3(.3,.2,.08);\n    \n\t\n    float t = iTime*4.;\n    \n    vec2 tuv = fract(uv*floor(uv.y*(uv.y+.002)*30.+1.));\n    vec2 ttuv = fract(uv*floor(uv.y*(uv.y+.004)*30.+1.));\n\tuv = fract(uv*floor(uv.y*uv.y*30.+1.));\n\n    col += .33*smoothstep(-.02,.02,sin(uv.x*3.1415*2. - t));\n    col += .33*smoothstep(-.02,.02,sin(tuv.x*3.1415*2. - t));\n    col += .33*smoothstep(-.02,.02,sin(ttuv.x*3.1415*2. - t));\n    \n    col *=.6;\n    col *= 1.*(1.-length(suv));\n    col += length(suv)*vec3(.13, .1, .2);\n    //col -= 1.*smoothstep(.1,-.05,(fract(puv.y*puv.y*30.)))*step(.1, length(puv.y));\n    col -= .3*smoothstep(.5,-.4,(fract(puv.y*puv.y*30.)))*step(.12, length(puv.y));\n    col -= .3*smoothstep(.9,1.1,(fract(puv.y*puv.y*30.)))*step(.12, length(puv.y));\n\n    col += vec3(.1, .08, .22);\n    \n    if (true) { //optional version with orange spiral center\n        float mask = smoothstep(.185,.191, length(puv.y));\n        col *= mask;\n        vec3 cc = vec3(.0);\n        cc += vec3(.8, .4, .22);\n        cc += .5*vec3(.16,.14,.08)*ssin(puv.x*3.1415*10. - puv.y*100. + 5.*iTime);\n        cc += .4*vec3(.09,.12,.09)*ssin(puv.x*3.1415*12. - puv.y*100. + 4.*iTime);\n\n        col += (1.-mask)*cc;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}