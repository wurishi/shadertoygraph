{"ver":"0.1","info":{"id":"WtKBRR","date":"1614133609","viewed":94,"name":"Mandelbrot-Julia relationship","username":"ptemoche","description":"Relationship between Mandelbrot points and Julia result, click with mouse and drag in anywhere direction on the mandelbrot fractal (left).","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/palettes\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat Julia(vec2 uv){\n    \n    float iterations = 100.;//*(sin(iTime*0.5)*0.5+0.5);\n    vec2 st = uv;\n    float t = iTime*10.0;\n   /*\n    vec2 mouse = vec2(0);\n    float dx = fract(iTime*0.1)*3.0-1.5;\n    float dy = floor(iTime);\n    if(mod(floor(dy*0.1),2.0)==0.0){\n        dx = 1.5-dx;\n    }\n    dy = dy*0.03-1.5;\n    mouse.x = dx;\n    mouse.y = dy;\n    */\n    //vec2 mouse = 2.5*(iMouse.xy-iResolution.xy*0.5)/iResolution.y;\n    \n    float w = iResolution.x/iResolution.y;\n    vec2 mouse = (iMouse.xy)/iResolution.y;\n    \n        mouse = mouse*5.-2.5;\n    \n    \n    for(float i = 0. ;i < iterations;++i){\n        //zn = (zn-1)^2+c\n        \n        //(a+bi)^2 = a^2+(bi)^2 + 2.0*a*bi\n        \n        st = mouse+vec2(st.x*st.x-st.y*st.y,2.0*st.x*st.y);\n        if(length(st)>4.)\n            return i/iterations;\n    \n    }\n    return 1.0;\n\n}\n\nfloat mandelbrot(vec2 uv){\n    \n    float iterations = 100.;\n    vec2 st = vec2(0.);\n    for(float i = 0. ;i < iterations;++i){\n        //zn = (zn-1)^2+c\n        \n        //(a+bi)^2 = a^2+(bi)^2 + 2.0*a*bi\n        st = uv+vec2(st.x*st.x-st.y*st.y,2.0*st.x*st.y);\n        if(length(st)>4.)\n            return i/iterations;\n    \n    }\n    return 1.0;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //vec2 uv = 2.5*(fragCoord-iResolution.xy*0.5)/iResolution.y;\n    vec2 uv = (fragCoord)/iResolution.y;\n    float w = iResolution.x/iResolution.y;\n    vec3 col = vec3(0.);\n    if(uv.x<w*0.5){\n        col = 1.0-palette(mandelbrot(uv*5.-2.5),vec3(0.5),vec3(0.5),vec3(1.0),vec3(0.,0.1,0.2));\n    }else{\n        col = 1.0-palette(Julia((uv-vec2(0.5*w,0.))*5.-2.5),vec3(0.5),vec3(0.5),vec3(1.0),vec3(0.,0.1,0.2));\n    }\n\n    // Time varying pixel color\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}