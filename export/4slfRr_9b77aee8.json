{"ver":"0.1","info":{"id":"4slfRr","date":"1494642404","viewed":121,"name":"Sketch_TriLattice","username":"cexlearning","description":"TriLatticeï¼Œcopy from https://github.com/keijiro/ShaderSketches","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 uv2tri(vec2 uv)\n{\n    float sx = uv.x - uv.y / 2.0; // skewed x\n    float sxf = fract(sx);\n    float offs = step(fract(1.0 - uv.y), sxf);\n    return vec2(floor(sx) * 2.0 + sxf + offs, uv.y);\n}\n\nfloat tri(vec2 uv)\n{\n    float sp = 1.2 + 3.3 * rand(floor(uv2tri(uv)));\n    return max(0.0, sin(sp * iTime));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / iResolution.y;\n\n    float t1 = iTime / 2.0;\n    float t2 = t1 + 0.5;\n\n    float c1 = tri(uv * (2.0 + 4.0 * fract(t1)) + floor(t1));\n    float c2 = tri(uv * (2.0 + 4.0 * fract(t2)) + floor(t2));\n\n    fragColor = vec4(mix(c1, c2, abs(1.0 - 2.0 * fract(t1))));\n}","name":"Image","description":"","type":"image"}]}