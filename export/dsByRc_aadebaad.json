{"ver":"0.1","info":{"id":"dsByRc","date":"1687973645","viewed":100,"name":"sine rot","username":"chenxianming","description":"make this interesting art work for my new keyboard.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","symbol","sdf2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n#define TAU 6.2831852\n#define contract true\n\nmat2 rotation(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat smin (float a, float b, float r)\n{\n    float h = clamp(.5+.5*(b-a)/r,0.,1.);\n    return mix(b, a, h) - r*h*(1.-h);\n}\n\nvec2 repetition(in vec2 p, float rep) \n{\n\n    float an = TAU/rep;\n    \n    float fa = (atan(p.y,p.x)+an*0.5)/an;\n    float ia = floor( fa );\n    \n    float sym = an*ia;\n    \n    p *= rotation(sym);\n    return p;\n}\n\nfloat symbol( vec2 uv, float r, float rot, float idx ){\n    \n    \n    uv *= rotation( PI * rot );\n    \n    uv = repetition( uv, 8. );\n\n    uv.x -= r;\n    uv *= rotation( PI * -.5 );\n    \n    uv *= 1. - idx * .25;\n    \n    float py = uv.y;\n    \n    if( py > 0. ){\n        py *= 5.;\n    }\n    \n\n    if( py < 0. ){\n        py *= 10.;\n    }\n    \n\n    py = clamp( py, -1. , 1. );\n\n    py = abs( pow( py, 2. ) ) - 1.;\n    py = abs( py ); // abs( py )-.5;\n    \n    return abs( uv.x ) - .05 * py;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 I = iResolution.xy;\n    \n    vec2 uv = gl_FragCoord.xy / min( I.yy, I.xx );\n    uv.x -= ( I.x - I.y ) / min( I.y, I.x ) * .5;\n    \n    uv = (uv - .5) * 2.;\n\n    uv *= rotation( fract( iTime * .1 ) * PI );\n\n    // Time varying pixel color\n    vec3 col = vec3( 0. );\n    \n    float p = 0.1;\n    \n    for( float i = 0., count = 7.; i < count; i++ ){\n    \n        p = smin(\n            p,\n            symbol( uv, .2 + i * .1 + ( contract ? sin( fract( iTime * .25 + i ) * PI ) * .25 : 0. ), cos( i / count ) - fract( iTime * .05 ) * i, i / count ), \n            ( .05 * ( i / count ) )\n        );\n    \n    }\n\n    p = step( p, 0. );\n    \n    col += p;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}