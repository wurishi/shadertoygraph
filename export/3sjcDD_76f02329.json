{"ver":"0.1","info":{"id":"3sjcDD","date":"1586681738","viewed":129,"name":"pattern_practice_04","username":"bhuwan0000","description":"practicing patterns.\ncan I make this in some other way? with fewer lines of code?\nI'm curious to learn different techniques.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circle","pattern","tile"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//practicing patterns\n#define scale 3.0\nvec2 rotate2D(vec2 st, vec2 cen, float ang)\n{\n    st -= cen;\n    float s = sin(radians(ang));\n    float c = cos(radians(ang));\n    st = mat2(c, -s, s, c)*st;\n    st+= cen;\n    return st;\n}\n\nfloat circle(vec2 st, vec2 p, vec2 id, float r)\n{\n    st = rotate2D(st, vec2(0.0), (mod(id.y,2.0)==0.?id.x*90.0:90.0*(1.0-id.x)) );\n    st += p;\n    float d = length(st);\n    d = smoothstep(r, r-scale*8.0/iResolution.y, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 fv = floor(uv*scale); // id grid\n    vec2 gv = uv; \n    gv = (fract(gv*scale)-0.5)*2.; // tiles\n    vec3 col = vec3(gv, 0.);\n\n    //circle\n    float rad = 2.05;\n    float cir1 = circle(gv, vec2(1.0,1.0), fv, rad);\n    cir1 -= circle(gv, vec2(1.0, 1.0), fv, rad-0.07);\n    float cir2 = circle(gv, vec2(-1.0, -1.0), fv, rad);\n    cir2 -= circle(gv, vec2(-1.0, -1.0), fv, rad-0.07);\n    //pattern\n    float pattern = clamp(cir2+cir1, 0.0, 1.0);\n    \n    //grid\n    vec3 gcol = vec3(1.0);\n    gcol = (gv.x>0.95 || gv.y>0.95)?gcol:vec3(0.0);\n    \n    // Output to screen\n    col = vec3(1.0-(pattern+gcol*0.7)); //+ vec3(gv, 0.0)*0.0;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}