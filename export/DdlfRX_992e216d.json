{"ver":"0.1","info":{"id":"DdlfRX","date":"1689109096","viewed":32,"name":"Moving circle simple example","username":"joskwanten","description":"Circle SDF printed on different positions","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\nvec2 rotate(vec2 p, float phi) {\n    float xa = p.x * cos(phi) - p.y * sin(phi);\n    float ya = p.y * cos(phi) + p.x * sin(phi);\n    return vec2(xa, ya);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)    \n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    float phi = 0.2 * sin(3. * iTime);\n    vec2 pa = rotate(p, phi);\n    \n    pa *= abs(1. + (0.2 * sin(7. * iTime)));\n    float length = 1. - smoothstep(0., 0.12, sdHeart(pa * 3.));\n    \n    p.x = p.x + .5;\n    phi = 0.2 * sin(5. * iTime);\n    vec2 pb = rotate(p, phi);\n    pb *= abs(1. + (0.2 * cos(6. * iTime)));\n    float length2 = 1. - smoothstep(0., 0.12, sdHeart(pb * 3.));\n    \n    p.x = p.x - 1.;\n    phi = 0.2 * cos(5.5 * iTime);\n    vec2 pc = rotate(p, phi);\n    pc *= abs(1. + (0.2 * cos(6. * iTime)));\n    float length3 = 1. - smoothstep(0., 0.12, sdHeart(pc * 3.));\n\n\n    // Output to screen\n    fragColor = vec4(max(max(length, length2), length3), 0., 0., 1.0);\n}","name":"Image","description":"","type":"image"}]}