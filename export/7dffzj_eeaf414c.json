{"ver":"0.1","info":{"id":"7dffzj","date":"1645067842","viewed":153,"name":"noise music","username":"jorge2017a2","description":"noise music","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["noisemusic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n///\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(0.8),b,d)\n#define S2(d,b) smoothstep(6.0*antialiasing(0.5),b,d)\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}    \n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\nfloat sdCircle( vec2 p, float r )\n{ return length(p) - r;}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{  vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec3 fig00(vec2 p, vec3 col)\n{   float d1= sdBox(p-vec2(-1.0,0.0),vec2(0.1,0.5) );\n    float d2= sdBox(p-vec2( 1.0,0.2),vec2(0.1,0.5) );\n    float d3=sdSegment(p, vec2(-1.0,0.5), vec2(1.0,0.7) );\n    float d4a=sdCircle(p-vec2(-1.1,-0.5), 0.25 );\n    float d4b=sdCircle(p-vec2( 0.9,-0.5), 0.25 );\n    \n    col=  DrawFigBorde(vec3(0.0), col, d1);\n    col=  DrawFigBorde(vec3(0.0), col, d2);\n    col=  DrawFigBorde(vec3(0.0), col, abs(d3)-0.1);\n    \n    col=  DrawFigBorde(vec3(0.0), col, d4a);\n    col=  DrawFigBorde(vec3(0.0), col, d4b);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv-=vec2(0.0,-0.5)+vec2(iTime);\n    float esc=8.0;\n    uv*=esc;\n\n    vec3 col=vec3(1.0);\n\n    uv.y= opRep1D(uv.y, 4.2 );\n    uv.x= opRep1D(uv.x, 4.2 );\n    col=fig00(uv, col);\n    col=fig00(uv-vec2(0.5,0.5), col);\n    col=fig00(uv-vec2(1.0,1.0), col);\n    \n    col=pow(col,  vec3(0.554545));\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///credits to FMS-Cat\n//adapted for sound shadertoy!!! by jorge2017a1\n#define TRANSPOSE 2.0\n\n#define PI 3.141592654\n#define TAU 6.283185307\n#define BPM 160.0\n#define beat *60.0/BPM\n#define AMEN_BPM 170.0\n\n#define saturate(i) clamp(i, 0.,1.)\n#define aSaturate(i) clamp(i, -1.,1.)\n#define linearstep(a,b,x) saturate(((x)-(a))/((b)-(a)))\n#define lofi(i,m) (floor((i)/(m))*(m))\n#define lofir(i,m) (floor((i)/(m)+0.5)*(m))\n#define saw(p) (2.*fract(p)-1.)\n#define pwm(x,d) (step(fract(x),(d))*2.0-1.0)\n#define tri(p) (1.-4.*abs(fract(p)-0.5))\n#define n2f(n) (440.0*pow(2.0,((n)+TRANSPOSE)/12.0))\n\n\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nvec2 noise(float x) \n{\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return  vec2( hash(i), hash(i + 1.0));\n}\n\nvec2 random2( float t )\n{   return vec2(noise(t)+noise(t+1.0)); }\n\n\nvec2 wavetable( float freq, float time, float speed, float offset ) {\n  if ( time < 0.0 ) { return vec2( 0.0 ); }\n  float p = tri( freq * time );\n  return noise( p * speed + offset );\n}\n\nfloat kick( float t, float freq ) {\n  if ( t < 0.0 ) { return 0.0; }\n\n  float attack = 8.0;\n  float lorate = 0.12;\n\n  return aSaturate( 6.0 * exp( -4.0 * t ) * sin( TAU * lofi(\n    freq * t - attack * ( exp( -40.0 * t ) + exp( -200.0 * t ) ),\n    lorate\n  ) ) );\n}\n\nvec2 snare( float t ) {\n  if ( t < 0.0 ) { return vec2( 0.0 ); }\n  return aSaturate( (\n    noise( t ).xy * 2.0 +\n    sin( t * 1400.0 * vec2( 1.005, 0.995 ) - exp( -t * 80.0 ) * 30.0 )\n  ) * 2.0 * exp( -t * 10.0 ) );\n}\n\nvec2 rimshot( float t ) {\n  if ( t < 0.0 ) { return vec2( 0.0 ); }\n  float attack = exp( -t * 400.0 ) * 0.6;\n  vec2 wave = (\n    tri( t * 450.0 * vec2( 1.005, 0.995 ) - attack ) +\n    tri( t * 1800.0 * vec2( 0.995, 1.005 ) - attack )\n  );\n  return aSaturate( 4.0 * wave * exp( -t * 400.0 ) );\n}\n\nvec2 filterSaw( float freq, float time, float cutoff, float resonance ) {\n  if ( time < 0.0 ) { return vec2( 0.0 ); }\n  vec2 sum = vec2( 0.0 );\n  for ( int i = 1; i <= 32; i ++ ) {\n    float fi = float( i );\n    float cut = smoothstep( cutoff * 1.2, cutoff * 0.8, fi * freq );\n    cut += smoothstep( cutoff * 0.3, 0.0, abs( cutoff - fi * freq ) ) * resonance;\n    vec2 offset = vec2( -1.0, 1.0 ) * ( 0.1 * ( fi - 1.0 ) );\n    sum += sin( fi * freq * time * TAU + offset ) / fi * cut;\n  }\n  return sum;\n}\n\n\nvec2 mainSound( int samp, float ptime )\n{\n  vec2 dest = vec2( 0.0 );\n  vec3 time=vec3(ptime, ptime*0.25,ptime*1.2);\n\n  // -- kick ---------------------------------------------------------------------------------------\n  float kickTime = mod( time.x, 1.0 beat );\n  float sidechain = linearstep( 0.0, 0.6 beat, kickTime );\n  {\n    dest += 0.5 * kick( kickTime, n2f( -36.0 ) );\n  }\n\n  // -- hihat --------------------------------------------------------------------------------------\n  {\n    float t = mod( time.z, 0.25 beat );\n    float begin = time.z - t;\n    vec2 dice = random2( begin );\n    float open = mix( 30.0, 200.0, dice.x );\n    float amp = 0.3 * exp( -open * t );\n    vec2 wave = wavetable( 20.0, lofi( t, 0.00005 ), 4.0, 0.0 );\n    dest += amp * wave;\n  }\n\n  // -- hihat --------------------------------------------------------------------------------------\n  {\n    float t = mod( mod( time.y, 1.25 beat ), 0.75 beat );\n    float amp = 0.05 * exp( -10.0 * t );\n    vec2 wave = wavetable( 80.0, lofi( t, 0.00002 ), 0.01, 0.0 );\n    dest += amp * wave;\n  }\n\n  // -- snare --------------------------------------------------------------------------------------\n  {\n    float t = mod( time.y - 1.0 beat, 2.0 beat );\n    float amp = 0.2 * mix( 0.3, 1.0, sidechain );\n    dest += amp * aSaturate( 3.0 * snare( t ) );\n  }\n\n  // -- crash --------------------------------------------------------------------------------------\n  float tCrash = time.z; // time.z = 16 bars\n  vec2 aCrash = random2( tCrash );\n  dest += 0.5 * aCrash;\n\n  // -- amen ---------------------------------------------------------------------------------------\n  {\n    float t = mod( time.z, 0.5 beat );\n    float begin = time.z - t;\n    vec2 dice = random2( begin );\n    float amenTime = ( t + floor( mod( 160.0 * dice.x, 8.0 ) ) * 0.5 beat ) / AMEN_BPM * BPM;\n    vec2 aAmen = aSaturate( 20.0 *  random2( amenTime ) );\n    \n    \n    dest += 0.2 * aAmen;\n  }\n\n  // -- acid ---------------------------------------------------------------------------------------\n  {\n    float t = mod( time.y, 0.25 beat );\n    vec2 dice = random2( 0.94 * lofi( time.y, 0.25 beat ) );\n    float filt = (\n      500.0 + 500.0 * cos( TAU * time.z / ( 32.0 beat ) ) +\n      mix( 500.0, 3500.0, dice.x ) * exp( -mix( 10.0, 20.0, dice.y ) * t )\n    );\n\n    float pattern[16] = float[](\n      0.0, 7.0, 12.0, 0.0,\n      7.0, 13.0, 1.0, 8.0,\n      0.0, 7.0, 12.0, 0.0,\n      7.0, 13.0, 1.0, 8.0\n    );\n    float freq = n2f( -24.0 + pattern[ int( time.y / ( 0.25 beat ) ) ] );\n    float amp = 0.25 * mix( 0.3, 1.0, sidechain );\n    dest += amp * aSaturate( 3.0 * filterSaw( freq, t, filt, filt / 100.0 ) );\n  }\n\n  return aSaturate( dest );\n}\n\n","name":"Sound","description":"","type":"sound"}]}