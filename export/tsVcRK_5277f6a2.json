{"ver":"0.1","info":{"id":"tsVcRK","date":"1603277677","viewed":291,"name":"outline of sdf","username":"FabriceNeyret2","description":"controling outline thickness  as minimal 1pixel thick vs given pixel width vs %scale.\n( compare at various resolutions )","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["outline","tuto","mm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"  #define S(v) clamp(1. - (v)/scale, 0., 1. )  // Antialiased draw\n//#define S(v) smoothstep(1.5*scale, 0., v  )  // Note that these are assymetrical:\n                                               // it's usually a bad idea, but here an abs() is expected in v \n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 R = iResolution.xy,\n         U = ( 2.*u - R ) / R.y;               // centred - normalize coordinates. Vertical = [-1,1]\n    float scale = 2./R.y,                      // pixel width\n            sdf = min( length(U)-.3 ,          // disk1 UNIONÂ disk2\n                       length(U+.2+.2*sin(iTime) ) - .3);\n    O = vec4( S(sdf) );                        // antialiased drawing of main shape\n    O.r +=  S ( abs(sdf-.1) );                 // 1pix thick outline offsetted by 10% of unit scale.\n    O.g +=  S ( abs(sdf-.3) -.05 );            // 5% of unit scale thick outline \n    O.b +=  S ( abs(sdf-.5) -4.*scale );       // 4 pixel outline \n    \n    O = pow( O, vec4(1./2.2) );                // to sRGB\n}","name":"Image","description":"","type":"image"}]}