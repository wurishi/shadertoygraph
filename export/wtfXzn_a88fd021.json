{"ver":"0.1","info":{"id":"wtfXzn","date":"1561756735","viewed":293,"name":"Oscilloscope - test 1","username":"clepirelli","description":"Change wave define in the \"common\" tab to change the wave the oscilloscope displays","likes":1,"published":3,"flags":8,"usePreview":0,"tags":["test","oscilloscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool approximately(vec2 v1, vec2 v2, float margin)\n{\n\n    return (v1.x <= v2.x + margin && v1.x >= v2.x - margin && v1.y <= v2.y + margin && v1.y >= v2.y - margin);\n\n}\n\nvec3 soundToColor(vec2 pixelUV)\n{\n    vec3 col = vec3(.0);\n    for( int i=-100; i<100; i++ )\n    {\n        float ind = float(i) / 200.0;\n    \tvec2 sound = getSound(iTime + ind / freq);\n    \t\n    \tfloat diff = length(pixelUV - sound);\n    \t\n    \tdiff = sqrt(diff);\n    \t\n\t\tdiff = smoothstep(0.1, 0.0, diff);\n    \t\n    \tcol += max(diff, .0);\n    }\n    return col * vec3(.1, 1.0, .1);\n}\n\nvec3 pp(float y)\n{\n    return float(int(y) % 3) * vec3(.0,.2,.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = soundToColor(uv);\n    // Output to screen\n    fragColor = vec4(col + pp(fragCoord.y+iTime),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define WAVE 0\n\nfloat freq = 40.0;\n\n//originally from iq : https://www.shadertoy.com/view/XsjSzc \nvec2 getSound( float time )\n{\n    vec2 sound = vec2(.0);\n    \n#if WAVE == 0\n    float sawSound = -1.0 + 2.0*fract(freq*time/12.0);\n    \n    sound.x = 0.5*cos(5.0*freq*6.2831*time);\n\tsound.x *= sin( 1.0*freq*6.2831*time/12.0);\n    sound.x *= 0.1+0.9*step(fract(time*freq/12.0),0.25) - 0.2*sin(time*6.2831*freq/12.0 + time*2.0) * (1.0-fract(time*freq/12.0));\n    sound.y = 0.1*sin( 5.0*freq*6.2831*time ) - sawSound;\n    \n    return 0.4*sound;\n#elif WAVE == 1\n    return vec2( sin(6.2831*(freq + sin(time)*12.0)*time) * abs(.5 *cos(time)), sin(sin(6.2831*freq*time))* abs(.4 + .6 *sin(time))) * .1;\n#elif WAVE == 2\n    sound.x = sin(.1*freq*time*50.0);\n    sound.y = cos(.1*freq*time*1.2*50.0);\n\treturn sound * .2;\n\n#endif\n    \n    return vec2(.0);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    return getSound(time);\n}","name":"Sound","description":"","type":"sound"}]}