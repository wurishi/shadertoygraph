{"ver":"0.1","info":{"id":"cscSRH","date":"1679352933","viewed":76,"name":" Output Debug Number (precise)","username":"jonatan1024","description":"Modified shader by @cyangreen, original here: https://www.shadertoy.com/view/3dyyRh\n\nThis version works better with integers and should be overall more precise on the fixed range 0.0001 - 999999.9999\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["number","debug","log"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GREEN vec3(.3,1.,.3)\n\n// From: https://www.shadertoy.com/view/4sBfRd\nvec4 char(vec2 p, int c) {\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\n// Modified from: https://www.shadertoy.com/view/3dyyRh\nfloat printNumber(vec2 fragCoord, float number) {\n\tfloat fontSize = 16.;\n\t// init digits\n\tint digits[12];\n\t// numbers start at 48 in font map\n\tfor(int i = 0; i <= 9; i++) digits[i] = 48 + i;\n\tdigits[10] = 46; // .\n\tdigits[11] = 45; // -\n\n\tint a[15]; // array for digits of number (in reverse)\n\tint c = 0; // counter for array = length\n\tint tmp = abs(int(number * 10000.));\n\t// do not display numbers higher than this due to precision issues\n\tif (abs(number) > 999999.) {\n\t\twhile(c < 8) a[c++] = 11; // --------\n\t} else {\n\t\tbool f; // true if first digit > 0 found\n\t\tfor(int i = 0; i < 4; i++) {\n            int digit = tmp % 10;\n            tmp /= 10;\n\t\t\t// omit trailing zeros\n\t\t\tif(digit > 0 || f) {\n\t\t\t\ta[c++] = digit; // add digits 0-9\n\t\t\t\tf = true;\n\t\t\t}\n        }\n        if(f) a[c++] = 10; // add .\n\t\tfor(int i = 0; i < 6; i++) {\n            int digit = tmp % 10;\n            tmp /= 10;\n            a[c++] = digit; // add digits 0-9\n            if(tmp == 0)\n                break;\n\t\t}\n\t\tif(number < 0.) a[c++] = 11; // add - if number is negative\n\t}\n\t// coordinate system that starts at bottom left\n\t// which is independent of aspect ratio\n\tvec2 p = fragCoord.xy / iResolution.y;\n\tfloat result;\n\t// output number\n\tfor(int i = 0; i < c; i++) {\n        int di = c - i -1;\n\t\tresult += char(p * 256. / fontSize + vec2(-.5 * float(i), 0.0), digits[a[di]]).x;\n\t}\n\treturn result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(GREEN * printNumber(fragCoord, float(iFrame)), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}