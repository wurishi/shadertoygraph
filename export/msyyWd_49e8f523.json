{"ver":"0.1","info":{"id":"msyyWd","date":"1696733150","viewed":99,"name":"DirectionalBlur-test","username":"nomkcode_g","description":"可以看做是径向模糊的一个变体，通过传入一个角度实现","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["directionblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    if(uv.x > iMouse.x / iResolution.x){\n        col = texture(iChannel0, uv).rgb;\n    }else{\n        col = texture(iChannel1, uv).rgb;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float _Iteration = 10.0;\nfloat _BlurRadius = 1.0;\nfloat _Angle = 30.0*3.1415926/180.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float sinVal = sin(_Angle)*_BlurRadius*0.05 / _Iteration;\n    float cosVal = cos(_Angle)*_BlurRadius*0.05 / _Iteration;\n    vec3 col = vec3(0.0);\n    for(int k = int(-_Iteration); k < int(_Iteration); k++)\n    {\n        col += texture(iChannel0, uv-vec2(sinVal*float(k), cosVal*float(k))).rgb;\n    }\n    col = col / (_Iteration * 2.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}