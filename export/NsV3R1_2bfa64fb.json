{"ver":"0.1","info":{"id":"NsV3R1","date":"1631082086","viewed":60,"name":"2D Rectangle and Circle function","username":"xXx_T0SHIII_xXx","description":"Just a simple, probably not ideal Rectangle/Square and Circle function. Lemme know what you think for a beginner! :) ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","circle","rectangle","shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Rects(vec2 uv, float x, float y,float width, float height){\n    float d = smoothstep(uv.x-x,width,1.);\n    float r = smoothstep(uv.x-x,-width,1.);\n    float s = smoothstep(uv.y-y,height,1.);\n    float t = smoothstep(uv.y-y,-height,1.);\n    float mixed = d-r;\n    float mixed2 = s-t;\n    float mixed3 = mixed * mixed2;\n    return mixed3;\n}\n\nfloat Circle(vec2 pos, vec2 uv, float r){\n    vec2 position = uv - pos;\n    float d = length(position);\n    float c = smoothstep(d,r,r+1.);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    float w = .5;\n    float h = .3;\n    float w2 = .2;\n    float h2 = .2;\n    float d = Rects(uv,.2,.3,w,h);\n    float q = Rects(uv,.2,.3,w2,h2);\n    float c = Circle(vec2(0,0), uv, .3);\n    float r = Circle(vec2(.2,0), uv, .3);\n    \n   vec3 c2 = vec3( 1.0,0.0,0.0);\n   c2 *= c;\n   vec3 col = vec3((c-r));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}