{"ver":"0.1","info":{"id":"lfl3RH","date":"1702767856","viewed":43,"name":"Noise Ghost","username":"roey_shap","description":"Tried making an effect that can only be seen when in motion","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat modFloat(float v, float m)\n{\n    return v - (round(v / m) * m);\n}\n\n\nfloat noise(vec2 pos) \n{\n    float s = 100.0;\n    return fract(dot(\n                     sin(pos*vec2(157.1,113.7)),\n                     vec2(modFloat(cos(iTime) * 33.17 + iTime, s), \n                          modFloat(cos(401.02 - iTime), s))\n                 ))>0.15 ? 0.0:1.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 color = texture(iChannel0, uv).rgb;\n    float _noise = noise(uv);\n    vec3 baseNoiseCol = vec3(_noise);\n    color = baseNoiseCol - 0.8 * color;\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float map(float min1, float max1, float value, float min2, float max2)\n{\n    float d2 = max2 - min2;\n    float d1 = max1 - min1;\n    float sizeRatio = d2 / d1;\n\n    return (value * sizeRatio) - (min1 * sizeRatio) + min2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 offsets = vec3(-1.0, 0, 1.0);\n    vec3 left =    texture(iChannel0, (fragCoord + offsets.xy) / iResolution.xy).rgb;\n    vec3 right =   texture(iChannel0, (fragCoord + offsets.yz) / iResolution.xy).rgb;\n    vec3 top =     texture(iChannel0, (fragCoord + offsets.yx) / iResolution.xy).rgb;\n    vec3 bottom =  texture(iChannel0, (fragCoord + offsets.zy) / iResolution.xy).rgb;\n    float dx = length(right - left) * 2.0;\n    float dy = length(bottom - top) * 2.0;\n    \n    vec3 color = vec3(length(vec2(dx, dy)));\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}