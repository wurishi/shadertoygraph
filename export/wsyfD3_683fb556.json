{"ver":"0.1","info":{"id":"wsyfD3","date":"1608075252","viewed":99,"name":"Complex Grids","username":"jllusty","description":"Draws uniform-width grids transformed by a complex function.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["complex","grids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 4.*atan(1.);\n\nvec2 mult(in vec2 a, in vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 conj(in vec2 a) {\n    return vec2(a.x, -a.y);\n}\n\nvec2 div(in vec2 a, in vec2 b) {\n    return mult(a, conj(b))/length(b);\n}\n\nvec2 func(in vec2 z) {\n    return mult(z - vec2(5.*sin(iTime/10.), 0.0), z + vec2(5.*sin(iTime/10.), 0.0));\n}\n\nvec3 checkerboard(in vec2 uv) {\n    int parity = int(floor(uv.x)) + int(floor(uv.y));\n    if(parity % 2 == 0) {\n        return vec3(0.0);\n    }\n    else {\n        return vec3(1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 6.0*fragCoord/iResolution.xy - 3.0;\n\n    // Save Pixel Position\n    vec2 pos = uv;\n\n    // Apply Function\n    uv = func(uv);\n    \n    // Draw lines\n    float gEps = 0.01;\n    vec2 h = vec2(gEps,0.);\n    float stretch = length(func(pos+vec2(0.,gEps))-func(pos-vec2(0.,gEps)))/(2.*gEps);\n    float eps = 0.01;\n    vec2 c2 = 1.-smoothstep(eps, 2.*eps, abs(fract(uv+.5)-.5)/stretch);\n    float c = max(c2.x, c2.y);\n    \n    // Stack onto Base Image (Checkerboard)\n    //  background color\n    vec3 bcol = checkerboard(uv);\n    //  line color\n    vec3 lcol = vec3(1.0,0.0,0.0);\n    vec3 col = (1.0 - c) * bcol + c * vec3(1.0, 0.0, 0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}