{"ver":"0.1","info":{"id":"XfdBWH","date":"1733030311","viewed":77,"name":"Planet Saturn","username":"tubatoothpaste","description":"Saturn","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["planet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nvec2 rotate2D(vec2 v, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n\nvec3 getRayDirection(vec2 uv, vec3 ro, vec3 lookAt, float zoom) {\n    vec3 f = normalize(lookAt - ro);\n    vec3 r = normalize(cross(vec3(0.0, 1.0, 0.0), f));\n    vec3 u = cross(f, r);\n    return normalize(f * zoom + uv.x * r + uv.y * u);\n}\n\nfloat map(vec3 p) {\n    p.xz = rotate2D(p.xz, iTime * 0.2);\n    p.xy = rotate2D(p.xy, 0.3);\n    \n    float sphere = sdSphere(p, 1.0);\n    \n    float rings = sdTorus(p, vec2(2.0, 0.1));\n    rings = max(rings, -sdTorus(p, vec2(1.4, 0.12)));\n    \n    return min(sphere, rings);\n}\n\nvec3 getNormal(vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(\n        k.xyy * map(p + k.xyy * h) +\n        k.yyx * map(p + k.yyx * h) +\n        k.yxy * map(p + k.yxy * h) +\n        k.xxx * map(p + k.xxx * h)\n    );\n}\n\nvec3 getSaturnColor(vec3 p) {\n    vec3 planetColor = vec3(0.9, 0.7, 0.5);\n    vec3 ringColor = vec3(0.8, 0.7, 0.5);\n    \n    float bands = sin(p.y * 8.0) * 0.5 + 0.5;\n    planetColor = mix(planetColor, planetColor * 0.8, bands);\n    \n    float sphere = sdSphere(p, 1.0);\n    float rings = sdTorus(p, vec2(2.0, 0.1));\n    rings = max(rings, -sdTorus(p, vec2(1.4, 0.12)));\n    \n    float ringNoise = sin(atan(p.x, p.z) * 50.0) * 0.5 + 0.5;\n    ringColor = mix(ringColor * 0.7, ringColor, ringNoise);\n    \n    return sphere < rings ? planetColor : ringColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0.0, 0.0, -5.0);\n    vec3 lookAt = vec3(0.0);\n    float zoom = 1.0;\n    \n    vec3 rd = getRayDirection(uv, ro, lookAt, zoom);\n    \n    float t = 0.0;\n    float tMax = 20.0;\n    vec3 col = vec3(0.0);\n    \n    for(int i = 0; i < 100; i++) {\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        \n        if(d < 0.001) {\n            vec3 n = getNormal(p);\n            vec3 baseColor = getSaturnColor(p);\n            \n            vec3 lightDir = normalize(vec3(1.0, 0.5, -0.5));\n            float diff = max(dot(n, lightDir), 0.0);\n            float amb = 0.2;\n            \n            col = baseColor * (diff + amb);\n            break;\n        }\n        \n        if(t > tMax) break;\n        t += d;\n    }\n    \n    if(col == vec3(0.0)) {\n        float stars = fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n        stars = smoothstep(0.95, 1.0, stars);\n        col = vec3(stars * 0.3);\n    }\n    \n    col = pow(col, vec3(0.4545));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}