{"ver":"0.1","info":{"id":"lXVXDc","date":"1720595984","viewed":121,"name":"gyroid foolaround","username":"MonterMan","description":"gyroid\n","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T_MAX 500.0\n\nfloat gyroid(vec3 p)\n{\n    return dot(cos(p), sin(p.yzx));\n}\n\nfloat fbm(vec3 p)\n{\n    float res = 0.0;\n    \n    float amp = 0.5;\n    for (int i = 0; i < 3; ++i)\n    {\n        p += 0.8*res;\n        res += amp*gyroid(p/amp);\n        amp *= 0.5;\n    }\n    \n    return res;\n}\n\nfloat map(vec3 p)\n{\n    float d = length(p) - 1.0;\n    d -= 0.3*fbm(2.5*p-iTime);\n    return d;\n}\n\nvec3 calcNormal(vec3 p)\n{\n    vec2 e = vec2(0.0, 0.0001);\n    return normalize(vec3(map(p+e.yxx), map(p+e.xyx), map(p+e.xxy)) - map(p));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.0*uv - 1.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -2);\n    vec3 rd = normalize(vec3(uv, 1.3));\n    \n    float t = 0.0;\n    int matId = -1;\n    int iterCount = 0;\n    for (int i = 0; i < 256 && t < T_MAX; ++i)\n    {\n        vec3 p = ro + t * rd;\n        float dist = map(p);\n        if (abs(dist) < 0.005)\n        {\n            iterCount = i;\n            matId = 0;\n            break;\n        }\n        t += 0.1*dist;\n    }\n    \n    vec3 col = 0.5*mix(vec3(0.18), vec3(0.1), length(uv));\n    if (matId != -1)\n    {\n        vec3 p = ro + t * rd;\n        vec3 n = calcNormal(p);\n        vec3 l = normalize(vec3(1, 1, -1));\n        col = vec3(0.5+0.5*n);\n        col *= pow(1.0 - float(iterCount) / 256.0, 1.0);\n    }\n\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}