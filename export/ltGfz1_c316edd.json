{"ver":"0.1","info":{"id":"ltGfz1","date":"1541957276","viewed":188,"name":"Dreamscape","username":"WB","description":"Volumetric clouds with anisotropic single scattering.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define _FoV 45.0\n#define MAX_STEPS 128\n#define STEP_SIZE 75.0\n#define MAX_OCTAVES 12\n#define MAX_LOOP 256\n\n#define JITTER\n\nconst vec3 _SunPos= vec3(-100.0, 50.0, 1000.0);\nconst vec3 _SunColor = vec3(0.12, 0.10, 0.08);\nconst float _Density = 0.082;\nconst float _Abs = 0.001;\nconst float _Mie = 0.2;\nconst float _G = 0.9;\n\n//Improved Heyney-Greenstein phase function\nfloat cornetteShanksPhase(float mu, float g)\n{\n\tfloat g2 = g * g;\n\treturn (3.0 * (1.0 - g2) * (1.0 + mu * mu)) / (2.0 * (2.0 + g2) * pow(1.0 + g2 - 2.0 * g * mu, 1.5));\n}\n\n//4x4 Bayer matrix for ordered dithering\nconst mat4 _Bayer4x4 = mat4(vec4(0,0.5,0.125,0.625),\n                      \t\tvec4(0.75,0.25,0.875,.375), \n                  \t\t    vec4(0.1875,0.6875,0.0625,0.5625), \n                  \t    \tvec4(0.9375,0.4375,0.8125,0.3125));\n\n//iq's gradient noise\nvec2 hash( vec2 x )\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvec3 hash( vec3 p )\n{\n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec3 p )\n{\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\n//Fractal (pink) noise function S(f) ∝ 1/f^α, {0 <= α <=2}\nfloat fbm(vec3 seed, int octaves, float freq, float lac)\n{\n    float val;\n    for (int i = 1; i < MAX_OCTAVES; i++)\n    {\n        if (i > octaves)\n            break;\n        \n        val += noise(seed * freq * float(i)) / (pow(float(i), lac));\n    }\n\n    return val;\n}\n\nfloat sampleVolume(vec3 pos)\n{\n    float n = (fbm(pos, 4, 0.007, 1.5));\n    n = abs(n);\n    float h = (pos.y * pos.y)/256.0;\n    n = max(0.0, n - abs(noise(pos * 0.025) * 1.0/h * 2.0));\n    n = smoothstep(0.2, 1.0, n);\n    return n * _Density * h;\n}\n\n//Radiative transfer approximation\nvec4 bsdf(vec3 pos, vec3 dir, vec3 col, float phase, float ds, int s)\n{    \n    //int steps = int(min(float(s), float(MAX_STEPS)));\n    vec4 result = vec4(col, 1.0);\n    \n    for (int i = 0; i < MAX_STEPS; i++)\n    {\n        if (i >= s)\n            break;\n        \n        float depth = sampleVolume(pos);\n        \n        //Beer-Lambert Law: T = e^-τ, τ = μℓ\n        float ext = (_Abs + _Mie) * depth;\n        ext = max(ext, 0.0000001);\n        float trans = exp(-ext * ds);\n        trans *= (1.0 - depth * trans);\n        \n        float falloff = -pos.y/1500.0;\n        \n        vec3 lum = _SunColor * falloff * phase * _Mie * depth;\n        vec3 intScatt = (lum - (lum*trans))/ext;\n        \n        result.rgb += intScatt * result.a;\n        result.a *= trans;\n        \n        if (result.a <= 0.02)\n            return result;\n        \n        pos += dir * ds;\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Calculate eye vector\n    vec3 rayOrigin = vec3(0.0, 0.0 + sin(iTime) * 10.0, iTime * 1500.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x/iResolution.y;\n    float d = ar/tan(radians(_FoV/2.0));    \n    vec3 rayDir = normalize(vec3((-1.0 + 2.0 * uv) * vec2(ar, 1.0), d));\n    \n    //Sky color\n    vec4 col = mix(vec4(0.2, 0.1, 0.1, 1.0), vec4(0.5, 0.5, 1.0, 1.0), uv.y -0.2);\n\n    //Assume light rays are parallel for distant source\n    vec3 sunDir = normalize(_SunPos);\n    \n    //Light\n    float sun = dot(sunDir, rayDir);\n    col += smoothstep(0.999,1.0,sun) * vec4(1.0,0.7,0.4,1.0) * 1.25;\n    col += smoothstep(0.975,1.02,sun) * vec4(0.4,0.25,0.2, 1.0);\n       \n    if (uv.y < 0.5)\n    {       \n        //Mie phase approx\n        float mu = dot(sunDir, rayDir);\n        float phase = cornetteShanksPhase(mu, _G);\n            \n        #ifdef JITTER\n        //Bayer matrix ordered depth jittering\n        float width = (uv.x * iResolution.x);\n        float height = (uv.y * iResolution.y);\n        width = mod(width, 4.0);\n        height = mod(height, 4.0);\n        float offset = _Bayer4x4[int(width)][int(height)];\n        rayOrigin += rayDir * offset * STEP_SIZE;\n        #endif\n        \n        //Clouds\n    \tcol = bsdf(rayOrigin, rayDir, col.rgb, phase, STEP_SIZE, 96);\n    }\n    else\n    {\n        //Stars\n        float t = abs(noise(vec2(50.0*uv.x + iTime, uv.y*50.0)));\n        col += t * min(1.0,smoothstep(0.4, 1.0, noise(rayDir * 250.0)) * 8.0);\n    }\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}