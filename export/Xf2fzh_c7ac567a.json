{"ver":"0.1","info":{"id":"Xf2fzh","date":"1724648749","viewed":35,"name":"practiceee3","username":"changjin2211","description":"practice3","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// 해시 함수 - 의사 난수 생성에 사용\nfloat hash(vec2 p) {\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\n// 색상 생성 함수\nvec3 colorize(float t) {\n    return 0.5 + 0.5 * cos(6.28318 * (t + vec3(0.0, 0.3, 0.6)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // 정규화된 픽셀 좌표 (0.0 ~ 1.0)\n    vec2 uv = fragCoord / iResolution.y;\n    \n    // 화면 비율 조정\n    //uv.x *= iResolution.x / iResolution.y;\n    \n    // 시간에 따른 줌 효과\n    float zoom = sin(iTime * 0.1) * 0.5 + 1.5;\n    uv *= zoom;\n    \n    // 격자 패턴 생성\n    vec2 gv = fract(uv * 10.0) - 0.5;\n    vec2 id = floor(uv * 10.0);\n    \n    // 각 셀에 대한 개별적인 애니메이션\n    float n = hash(id);\n    float t = iTime * (0.2 + 0.8 * n);\n    \n    // 원형 패턴\n    float d = length(gv);\n    float pixwidth = zoom * 15.0 / iResolution.y;\n    float r = 0.3 + 0.2 * sin(t * 6.28318 + n * 6.28318);\n    //float c = smoothstep(r, r * 0.9, d);\n    float c = smoothstep(pixwidth,0.0, d-r);\n    \n    // 색상 생성\n    vec3 col = colorize(n + iTime * 0.2);\n    \n    // 최종 색상 계산\n    col *= c;\n    //col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d - r)));\n    \n    float borderWidth = pixwidth * 0.01;\n    //float borderMask = smoothstep(pixwidth, 0.0, abs(d - r) - borderWidth * 0.5);\n    //col = mix(col, vec3(1.0), borderMask);\n    \n    vec3 bgColor = vec3(0.1, 0.1, 0.2);\n    col = mix(bgColor, col, c);\n    \n    // 출력\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}