{"ver":"0.1","info":{"id":"NtjBRG","date":"1652378922","viewed":78,"name":"Sir Isaac's fractal","username":"akoylasar","description":"Newton's method to visualise roots of unity","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractals","newtonsmethod","rootsofunity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 2022-2022 Fouad Valadbeigi (akoylasar@gmail.com).\n\n// Iterations for root finder\n#define N 20.\n\n// Complex number arithmetic\nvec2 multiply(vec2 z, vec2 w) {\n    return vec2(z.x * w.x - z.y * w.y, \n                z.x * w.y + z.y * w.x);\n}\n\nvec2 divide(vec2 z, vec2 w) {\n    float d = 1. / dot(w, w);\n    return d * vec2(z.x * w.x + z.y * w.y,\n                    z.y * w.x - z.x * w.y);\n}\n\nvec2 power(vec2 z, float n) {\n    float r = length(z);\n    float theta = atan(z.y, z.x);\n    return pow(r, n) * vec2(cos(n * theta), sin(n * theta));  \n}\n//\n\n// Complex function, its derivative and its roots, modify these\nvec2 fun(vec2 z) {\n    return power(z, 4.) + vec2(-1., 0.);\n}\n\nvec2 der(vec2 z) {\n    return multiply(vec2(4., 0.), power(z, 3.));\n}\n\nconst float eps = .000001;\nbool root(vec2 z) {\n    return (distance(z,  vec2(1., 0.)) <= eps ||\n            distance(z,  vec2(0., 1.)) <= eps ||\n            distance(z, vec2(-1., 0.)) <= eps ||\n            distance(z, vec2(0., -1.)) <= eps);\n}\n//\n\n\nvec3 drawFractal(vec2 z) {\n    float n = 0.;\n    for (; n <= N; n++) {\n        z = z - divide(fun(z), der(z)); \n        if (root(z)) break;\n    }\n    return mix(vec3(1.), vec3(0.), n / N);\n}\n\nvoid animate(inout vec2 p) {\n    float theta = .1 * iTime;\n    float c = cos(theta);\n    float s = sin(theta);\n    mat2 rot = mat2(c, -s, s, c);\n    p = rot * p;\n    p += sin(.4 * iTime);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float ar = iResolution.y / iResolution.x; \n    vec2 p = 2. * fragCoord / iResolution.xy - 1.;\n    p.y *= ar;\n    \n    animate(p);\n    \n    vec3 col = drawFractal(p);\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}