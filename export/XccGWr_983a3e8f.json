{"ver":"0.1","info":{"id":"XccGWr","date":"1726666958","viewed":15,"name":"edge func raymarching","username":"Balas","description":"testing out edge function variations","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SQT 1.\n\n//#define EDGE_O\n\nvec2 edge(vec2 _p){\n    vec2 p2 = abs(_p);\n    if(p2.x > 2.0*p2.y) return vec2((_p.x < 0.0) ? -1.0 : 1.0, 0.0);\n    if(p2.x < 0.5*p2.y) return vec2(0.0, (_p.y < 0.0) ? -1.0 : 1.0);\n                        return vec2((_p.x < 0.0) ? -SQT : SQT, (_p.y<0.0) ? -SQT : SQT);\n}\nvec2 edgeO(vec2 _p){\n    vec2 p2 = abs(_p);\n    if(p2.x > p2.y) return vec2((_p.x < 0.0) ? -1.0 : 1.0, 0.0);// Changed to prevent it from looking\n                    return vec2(0., (_p.y<0.0) ? /*-*/-1.0 : 1.0); //to neighbours in negative Z\n}\n\nfloat grid(vec2 uv){\n    uv+=.05;\n    return step(.1, fract(uv.x)) * step(.1, fract(uv.y));\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat circle(vec2 pos, float rad){\n    return step(length(pos), rad);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 m_uv=uv*2.0-1.0;\n    m_uv*=5.0;\n\n    vec2 ans=edge(m_uv);\n    #ifdef EDGE_O\n    ans=edgeO(m_uv);\n    #endif\n    float circles = (circle(m_uv - ans, .25))*.5 + (ans.x+ans.y)*1.123456;\n    float grid = grid(m_uv*1.);\n    \n    vec3 col = mix(vec3(grid), vec3(1., 0., 0.), fract(circles+iTime));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}