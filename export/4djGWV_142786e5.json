{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec4 global_color=vec4(0.0);\nbool global_stop=false;\nvec3 light_position;\nvec4 ambient_light=vec4(0.25,0.25,0.25,0.0);\nfloat total_distance=0.0;\nvec3 direction_vector;\nvec3 eye_point;\nbool inside_object=false;\nvec4 global_attenuation=vec4(1.0);\nfloat min_distance=0.001;\nfloat refraction_amount=0.25;\nfloat glass_torus(in vec3 point,in vec3 offset){\n\tvec3 point_offset=point+offset;\n\tvec2 torus_dimensions=vec2(0.5,0.25);\n\tvec4 color=vec4(0.0);\n\tfloat dist=length(vec2(length(point_offset.xy)-torus_dimensions.x,point_offset.z))-torus_dimensions.y;\n\tif(dist<0.0){\n\t\tif(inside_object==false){\n\t\t\tvec2 temp=vec2(point_offset.xy-torus_dimensions.x*normalize(point_offset.xy));\n\t\t\tvec3 normal=normalize(vec3(temp.x,temp.y,point_offset.z));\n\t\t\tinside_object=true;\n\t\t\tdirection_vector=refract(direction_vector,normal,1.0/1.5);\n\t\t\tfloat attenuation=abs(dot(normal,direction_vector));\n\t\t\tglobal_attenuation*=vec4(attenuation,(1.0-attenuation*0.5),attenuation,1.0);\n\t\t}\n\t}else{\n\t\tif(inside_object==true){\n\t\t\tvec2 temp=vec2(point_offset.xy-torus_dimensions.x*normalize(point_offset.xy));\n\t\t\tvec3 normal=normalize(vec3(temp.x,temp.y,point_offset.z));\n\t\t\tinside_object=false;\n\t\t\tdirection_vector=refract(direction_vector,-normal,1.0/1.5);\n\t\t\tfloat attenuation=abs(dot(direction_vector,normal));\n\t\t\tglobal_attenuation*=vec4(attenuation,(1.0-attenuation*0.5),attenuation,1.0);\n\t\t}\t\t\n\t}\n\tglobal_color=color;\n\treturn abs(dist);\n}\nfloat torus(vec3 point,vec3 offset){\n\tvec3 point_offset=point+offset;\n\tvec2 torus_dimensions=vec2(0.5,0.25);\n\tfloat dist=length(vec2(length(point_offset.xy)-torus_dimensions.x,point_offset.z))-torus_dimensions.y;\n\tif(dist<0.0){\n\t\tvec4 color=vec4(0.75,0.25,0.0,1.0);\n\t\tvec2 temp=vec2(point_offset.xy-torus_dimensions.x*normalize(point_offset.xy));\n\t\tvec3 normal=normalize(vec3(temp.x,temp.y,point_offset.z));\n\t\tfloat diffuse=dot(normal,normalize(light_position-point))/length(light_position-point);\n\t\tglobal_stop=true;\n\t\tglobal_color=vec4(clamp(color*diffuse,0.0,1.0))+color*ambient_light;\n\t}\n\treturn dist;\n}\nfloat plane(vec3 point){\n\tfloat dist=dot(point,vec3(0.0,0.0,1.0))+0.5;\n\tif(dist<0.0){\n\t\tvec4 color;\n\t\tvec4 color_1=vec4(1.0,1.0,1.0,1.0);\n\t\tvec4 color_2=vec4(0.25,0.75,1.0,1.0);\n\t\tif(abs(fract(point.x))<0.5){\n\t\t\tif(abs(fract(point.y))<0.5){\n\t\t\t\tcolor=color_1;\n\t\t\t}else{\n\t\t\t\tcolor=color_2;\n\t\t\t}\n\t\t}else{\n\t\t\tif(abs(fract(point.y))<0.5){\n\t\t\t\tcolor=color_2;\n\t\t\t}else{\n\t\t\t\tcolor=color_1;\n\t\t\t}\n\t\t}\n\t\tvec3 normal=vec3(0.0,0.0,1.0);\n\t\tfloat diffuse=dot(normal,normalize(light_position-point))/length(light_position-point);\n\t\tglobal_stop=true;\n\t\tglobal_color=vec4(clamp(color*diffuse,0.0,1.0))+color*ambient_light;\n\t}\t\n\treturn dist;\n}\nfloat glass_sphere(vec3 point,vec3 offset,float radius){\n\tvec3 point_offset=point+offset;\n\tvec4 color=vec4(0.0);\n\tfloat dist=length(point_offset)-radius;\n\tvec3 normal=0.5*normalize(point_offset);\n\tif(dist<0.0){\n\t\tif(inside_object==false){\n\t\t\tinside_object=true;\n\t\t\tdirection_vector=normalize(direction_vector-normal);\n\t\t}\n\t}else{\n\t\tif(inside_object==true){\n\t\t\tinside_object=false;\n\t\t\tdirection_vector=normalize(direction_vector+normal);\n\t\t}\t\t\n\t}\n\tglobal_color=color;\n\treturn abs(dist);\n}\nfloat reflective_sphere(vec3 point,vec3 offset){\n\tfloat radius=0.5;\n\tvec3 point_offset=point+offset;\n\tfloat dist=length(point_offset)-radius;\n\tvec4 color=vec4(0.5);\n\tif(dist<0.0){\n\t\tvec3 normal=normalize(point_offset);\n\t\tfloat attenuation=0.5*abs(dot(direction_vector,normal));\n\t\tglobal_attenuation*=vec4(1.0-attenuation);\n\t\tfloat diffuse=dot(normal,normalize(light_position-point))/length(light_position-point);\n\t\tdirection_vector=reflect(direction_vector,normal);\n\t\tglobal_color=color*ambient_light+color*diffuse;\n\t}\n\treturn abs(dist);\n}\nfloat sphere(vec3 point,vec3 offset){\n\tfloat radius=0.5;\n\tvec3 point_offset=point+offset;\n\tfloat dist=length(point_offset)-radius;\n\tif(dist<0.0){\n\t\tvec4 color=vec4(0.0,1.0,0.25,1.0);\n\t\tvec3 normal=normalize(point_offset);\n\t\tfloat diffuse=dot(normal,normalize(light_position-point))/length(light_position-point);\n\t\tglobal_stop=true;\n\t\tglobal_color=vec4(clamp(color*diffuse,0.0,1.0))+color*ambient_light;\n\t}\n\treturn dist;\n}\nfloat cube(vec3 point,vec3 offset){\n\tfloat radius=0.5;\n\tvec3 point_offset=point+offset;\n\tfloat dist=max(abs(point_offset.x),max(abs(point_offset.y),abs(point_offset.z)))-radius;\n\tif(dist<0.0){\n\t\tvec4 color=vec4(1.0,1.0,0.0,1.0);\n\t\tvec3 normal;\n\t\tfloat dot_1=dot(point_offset,vec3(1.0,0.0,0.0));\n\t\tfloat dot_2=dot(point_offset,vec3(0.0,1.0,0.0));\n\t\tfloat dot_3=dot(point_offset,vec3(0.0,0.0,1.0));\n\t\tif(abs(dot_1)>abs(dot_2)&&abs(dot_1)>abs(dot_3)){\n\t\t\tnormal=normalize(vec3(dot_1,0.0,0.0));\n\t\t}else if(abs(dot_2)>abs(dot_3)){\n\t\t\tnormal=normalize(vec3(0.0,dot_2,0.0));\n\t\t}else{\n\t\t\tnormal=normalize(vec3(0.0,0.0,dot_3));\n\t\t}\n\t\tfloat diffuse=dot(normal,normalize(light_position-point))/length(light_position-point);\n\t\tglobal_stop=true;\n\t\tglobal_color=vec4(clamp(color*diffuse,0.0,1.0))+color*ambient_light;\n\t}\n\treturn dist;\n}\nfloat dist(vec3 point){\n\tfloat min_dist=100.0;\n\tfloat dist;\n\tglobal_color=vec4(0.0);\n\tvec4 color=vec4(0.0);\n\tdist=reflective_sphere(point,vec3(-0.5,0.0,0.0));\n\tif(dist<min_dist){\n\t\tmin_dist=dist;\n\t\tcolor=global_color;\n\t}\n\tdist=reflective_sphere(point,vec3(0.5,-0.0,0.0));\n\tif(dist<min_dist){\n\t\tmin_dist=dist;\n\t\tcolor=global_color;\n\t}\n\tdist=reflective_sphere(point,vec3(0.0,0.0,-0.866));\n\tif(dist<min_dist){\n\t\tmin_dist=dist;\n\t\tcolor=global_color;\n\t}\n\tdist=plane(point);\n\tif(dist<min_dist){\n\t\tif(global_stop)return dist;\n\t\tcolor=global_color;\n\t\tmin_dist=dist;\n\t}\n\tdist=cube(point,vec3(-2.0,0.0,0.0));\n\tif(dist<min_dist){\n\t\tif(global_stop)return dist;\n\t\tcolor=global_color;\n\t\tmin_dist=dist;\n\t}\n\tdist=glass_torus(point,vec3(2.0,0.0,0.0));\n\tif(dist<min_dist){\n\t\tmin_dist=dist;\n\t}\n\tglobal_color=color;\n\t//out_color=color;\n\treturn min_dist;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tfloat ratio=iResolution.x/iResolution.y;\n\tfloat time=iTime/10.0;\n\tlight_position=vec3(0.0,0.0,2.0);\n\tvec2 mouse=iMouse.xy/iResolution.xy;\n\tvec2 screen_position=vec2((fragCoord.x-iResolution.x/2.0)/iResolution.x*ratio,(fragCoord.y-iResolution.y/2.0)/iResolution.y);\n\teye_point=vec3(3.0*sin(-mouse.x*3.14*2.0+time),3.0*cos(-mouse.x*3.14*2.0+time),-5.0*mouse.y+2.0+sin(time)/0.5);\n\tvec3 look_at=vec3(0.0,0.0,0.0);\n\tvec3 up_vector=vec3(0.0,0.0,1.0);\n\tdirection_vector=normalize(look_at-eye_point);\n\tvec3 horizontal_vector=normalize(cross(up_vector,direction_vector));\n\tvec3 vertical_vector=normalize(cross(direction_vector,horizontal_vector));\n\tdirection_vector=normalize(direction_vector+screen_position.x*horizontal_vector+screen_position.y*vertical_vector);\n\tvec4 color=vec4(0.0);\n\tvec3 point=eye_point;\n\tfloat nearest_object_distance;\n\tglobal_color=vec4(0.0);\n\tfor(int i=0;i<256;i++){\n\t\tnearest_object_distance=dist(point);\n\t\ttotal_distance+=nearest_object_distance;\n\t\tcolor+=global_color;\n\t\tif(global_stop)break;\n\t\tpoint+=direction_vector*max(nearest_object_distance,min_distance);\n\t}\n\tfragColor=color*global_attenuation;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4djGWV","date":"1393732677","viewed":431,"name":"Reflection & Refraction","username":"Justaway","description":"Ray marcher with refraction and reflection.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""}}