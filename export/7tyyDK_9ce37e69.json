{"ver":"0.1","info":{"id":"7tyyDK","date":"1662249094","viewed":104,"name":"spreading filter","username":"timeiskey","description":"working up to lateral inhibition","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["asdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 whoShouldBeHereLeft( vec2 uv, vec2 cellDim )\n{\n\t//\tcheck yourself\n    vec4 centerCell = texture(iChannel0, uv);\n    float centerCellBright = (centerCell.r + centerCell.g + centerCell.b) / 3.0;\n    \n    // check right\n    vec4 rightCell = texture(iChannel0, uv + vec2(cellDim.x, 0.0));\n    float rightCellBright = (rightCell.r + rightCell.g + rightCell.b) / 3.0;\n    \n    if( centerCellBright < rightCellBright )\n    {\n    \treturn centerCell;\n    }\n    else\n    {\n    \treturn rightCell;\n    }\n}\n\nvec4 whoShouldBeHereRight( vec2 uv, vec2 cellDim  )\n{\n\t//\tcheck yourself\n    vec4 centerCell = texture(iChannel0, uv);\n    float centerCellBright = (centerCell.r + centerCell.g + centerCell.b) / 3.0;\n    \n    // check left\n    vec4 leftCell = texture(iChannel0, uv - vec2(cellDim.x, 0.0));\n    float leftCellBright = (leftCell.r + leftCell.g + leftCell.b) / 3.0;\n\n    if( centerCellBright > leftCellBright )\n    {\n    \treturn centerCell;\n    }\n    else\n    {\n    \treturn leftCell;\n    }\n}\n\nvec4 filter_green(vec4 c){\n    float t = float(distance(c.rgb,vec3(0.0, 1.0, 0.0)) < 0.7);\n    return ((1.0-t) * c) + (t * vec4(0.0, 0.0, 0.0, 0.0));\n}\n\nvec4 side_sort_filter(vec2 fragCoord, vec2 uv){\n    vec2 cellDim = 1.0/iResolution.xy;\n   \t\n    vec4 c = texture(iChannel0, uv);\n    \n    if( (iFrame % 2) == 0 )\n    {\n    \tif( (int(floor(fragCoord.x)) % 2) == 0 )\n        {\n        \tc = whoShouldBeHereLeft( uv, cellDim );\n        }\n        else\n        {\n        \tc = whoShouldBeHereRight( uv, cellDim );\n        }\n    }    \n    else\n    {\n    \tif( (int(floor(fragCoord.x)) % 2) == 1 )\n        {\n        \tc = whoShouldBeHereLeft( uv, cellDim );\n        }\n        else\n        {\n        \tc = whoShouldBeHereRight( uv, cellDim );\n        }\n    }\n    return c;\n}\n\n#define HOOD_SIZE 5\n\nvec4 radiate_color_filter(vec2 fragCoord, vec2 uv){\n    vec2 cellDim = 1.0/iResolution.xy;\n    \n    float div = 1.0 / pow(float(HOOD_SIZE) * 2.0 + 1.0, 2.0);\n  \n    vec4 nsum = vec4(0.0);\n    for(int iy = -HOOD_SIZE; iy <= HOOD_SIZE; iy++){\n        for(int ix = -HOOD_SIZE; ix <= HOOD_SIZE; ix++){\n            vec2 cell_i_offset = vec2(ix, iy);\n            vec2 xy = uv + abs(cellDim * cell_i_offset);\n            float l = length(xy);\n            xy = vec2(mod(xy.x, 1.0), mod(xy.y, 1.0) );\n            vec4 bufsamp = texture(iChannel0, xy) / (pow(l, 2.0)+0.7);\n            nsum += bufsamp * div;\n        }\n    }\n    return nsum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //vec4 lc = side_sort_filter(fragCoord, uv);\n    vec4 lc = radiate_color_filter(fragCoord, uv);\n    lc *= 0.9;\n    fragColor = lc + filter_green(texture(iChannel1, uv))  * 0.4;\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}