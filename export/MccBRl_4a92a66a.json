{"ver":"0.1","info":{"id":"MccBRl","date":"1733363108","viewed":51,"name":"Crystal cloak green screen","username":"Redstone118","description":"Uses voronoi noise to offset the uv of iChannel0 based on a mask from iChannel1","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["greenscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2[] points = vec2[](\n        vec2(0.65,0.89),\n        vec2(0.20,0.87),\n        vec2(0.10,0.77),\n        vec2(0.33,0.80),\n        vec2(0.70,0.25),\n        vec2(0.31,0.53),\n        vec2(0.63,0.62),\n        vec2(0.71,0.62),\n        vec2(0.15,0.02),\n        vec2(0.50,0.57),\n        vec2(0.80,0.16),\n        vec2(0.01,0.83),\n        vec2(0.12,0.02),\n        vec2(0.64,0.02),\n        vec2(0.80,0.53),\n        vec2(0.98,0.61),\n        vec2(0.33,0.61),\n        vec2(0.81,0.53),\n        vec2(0.47,0.33),\n        vec2(0.95,0.75),\n        vec2(0.90,0.61),\n        vec2(0.92,0.56),\n        vec2(0.57,0.36),\n        vec2(0.55,0.54),\n        vec2(0.02,0.48),\n        vec2(0.93,0.40),\n        vec2(0.82,0.92),\n        vec2(0.34,0.92),\n        vec2(0.79,0.88),\n        vec2(0.83,0.91)\n);\nvec2[] colours = vec2[](\n        vec2(0.04,0.50),\n        vec2(0.65,0.22),\n        vec2(0.21,0.61),\n        vec2(0.28,0.69),\n        vec2(0.62,0.86),\n        vec2(0.11,0.49),\n        vec2(0.88,0.81),\n        vec2(0.08,0.98),\n        vec2(0.09,0.02),\n        vec2(0.40,0.71),\n        vec2(0.86,0.91),\n        vec2(1.00,0.23),\n        vec2(0.72,0.52),\n        vec2(0.29,0.90),\n        vec2(0.91,0.23),\n        vec2(0.49,0.20),\n        vec2(0.21,0.48),\n        vec2(0.09,0.74),\n        vec2(0.14,0.98),\n        vec2(0.42,0.31),\n        vec2(0.30,0.99),\n        vec2(0.48,0.50),\n        vec2(0.26,0.71),\n        vec2(0.78,0.19),\n        vec2(0.51,0.42),\n        vec2(0.86,0.09),\n        vec2(0.59,0.52),\n        vec2(0.82,0.81),\n        vec2(0.73,0.66),\n        vec2(0.63,0.03)\n);\nint shardcount = 30;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col=texture(iChannel1,uv).rgb;\n    bool mask = col.r-col.g+col.b>0.03;\n    col = texture(iChannel0,uv).rgb;\n    if(mask){\n    for(int i=0;i<shardcount;i++){\n        points[i]+=vec2(sin(iTime)*(2.*mod(float(i),2.)-1.),cos(iTime))/10.;\n        colours[i]+=vec2(sin(iTime)*(2.*mod(float(i),2.)-1.),cos(iTime))/20.;\n\n    }\n\n    int currindex=0;\n    float currlength=length(uv-points[0]);\n    for(int i=0;i<shardcount;i++){\n        if(length(uv-points[i])<currlength){\n            currlength=length(uv-points[i]);\n            currindex=i;\n        }\n    }\n    col = texture(iChannel0,uv+(2.*colours[currindex]-1.)/20.).rgb;\n    //col = vec3(uv+colours[currindex],0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}