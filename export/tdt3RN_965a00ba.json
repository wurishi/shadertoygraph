{"ver":"0.1","info":{"id":"tdt3RN","date":"1567998632","viewed":847,"name":"bluenoise jittering question","username":"Carandiru","description":"is my modification to add temporal jittering working properly?\nthanks fabrice for all your interesting shaders\n\noriginal shader: https://www.shadertoy.com/view/wtsXD7\nby fabrice neyret","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["noise","blue","jitter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// original shader: https://www.shadertoy.com/view/wtsXD7\n// by fabrice neyret\n\n// mod: temporal test\n\n#define JIT 42.   // amout of spatial jittering\n\t\t\t\t\t// temporal jittering is +- 1 pixel/frame\nvoid mainImage( out vec4 O, vec2 U )\n{  \n    vec2 R = iResolution.xy, \n         P = ( 2.*U - R ) / R.y, S;\n    \n    if (P.x==-P.y) { O=vec4(1,0,0,0); return; } // red separator\n    \n    // --- random seed for the current location\n\tvec2 dither_uv = mix(vec2(-1.0f,1.0f), vec2(1.0f,-1.0f), bvec2(iFrame & 1));\n    S = P.x > -P.y\n        ? texelFetch( iChannel0, ivec2(U + 0.5 + dither_uv)%1024, 0).yx // top: bluenoise\n        : texelFetch( iChannel1, ivec2(U)%256, 0).xy // left: whitenoise\n    \t;\n    // --- stochastic cone-trace the scene ( = 1 sphere ) \n    \n    P += .6*cos(iTime+vec2(0,33));              // camera motion\n    \n    vec3 D = vec3( P + JIT* (S-.5)/R.y, 1),                // pseudo-blue noise\n         //D = vec3( P + JIT* (S.x-.5)/R.y*normalize(P), 1), // real radial bluenoise\n         C = vec3(0,0,-1), L = normalize(vec3(-1,1,-2)), N,H;\n    D = normalize(D);\n    float r = .5, b = dot(D,C), c = dot(D,D) - r*r, d = b*b - c;\n    O = vec4(0);\n    if (d>0.) { \n        d = -b - sqrt(d); C += d*D;             // ray-sphere intersection\n        N = normalize(C);                       // local normal\n        H = normalize(L+vec3(0,0,-1));\n        O =   dot(N,L) *vec4(0,1,0,0)           // diffuse shading\n            + 2.*pow(max(0.,dot(N,H)),100.) ;   // specular shading\n      }\n}","name":"Image","description":"","type":"image"}]}