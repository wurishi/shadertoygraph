{"ver":"0.1","info":{"id":"4sVSRh","date":"1462850960","viewed":647,"name":"JCVD Forever","username":"knappador","description":"Use UV shifting to make appearance of motion and scale.  Buffer loop~","likes":17,"published":3,"flags":32,"usePreview":0,"tags":["trails"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// standard UV\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // change to texture A at bottom to explore buffers\n    fragColor = texture(iChannel0, uv);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // standard UV\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // we use input and A (which is reading from here, B)\n    vec4 aCol = texture(iChannel1, uv);\n\tvec4 vDam = texture(iChannel0, uv);\n    \n    // calculate difference from approximate green color to \n    // give us a concept of distance\n    float bDist = vDam.b - 0.15;\n    float rDist = vDam.r - 0.03;\n    float gDist = vDam.g - 0.67;\n    \n    // squaring each distance makes it positive and accentuates differences\n    // square root of sum of squares is standard distance formulat\n    float dist = sqrt(rDist * rDist + bDist * bDist + gDist * gDist);\n    \n    // amplify a bit, cut noise, and clamp for using as mix factor\n   \tfloat damFactor = clamp(dist * 3.0 - 0.6, 0.0, 1.0);\n    fragColor = mix(aCol, vDam, damFactor);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // standard 1:1 UV\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // use blown out coordinates to magnify JCVD\n    vec2 tuv = vec2(uv.x * 0.85 + 0.075, uv.y * 0.85 + 0.075);\n    vec4 bCol = texture(iChannel0, tuv);\n    \n    // generate a good shade for JCVD\n    vec4 gCol = vec4(0.5 + 0.6 * sin(iTime * 2.0), \n                     0.5 + 0.6 * cos(iTime * 3.0),\n                     0.5 + 0.6 * cos(iTime),\n                     1.0);\n    \n    // multiply JCVD by our good shade\n\tfragColor = bCol * gCol;\n}","name":"Buffer A","description":"","type":"buffer"}]}