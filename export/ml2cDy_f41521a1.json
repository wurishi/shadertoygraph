{"ver":"0.1","info":{"id":"ml2cDy","date":"1692259170","viewed":35,"name":"Land of the Moon with fog","username":"DragonChicken","description":"Land of the Moon with fog made by @saalty\nhttps://www.shadertoy.com/view/mtjyDy","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Land of the Moon\" by saalty. https://shadertoy.com/view/mtjyDy\n// 2023-08-17 07:42:35\n\nconst float fov = 0.5;\nconst float landHeight = 1.0;\nconst float landRepeat = 0.1;\n\nstruct Ray\n{\n    vec3 Position;\n    vec3 Direction; // The length of direction must always be 1\n};\n\nvec3 getNormal(Ray ray)\n{\n    vec3 myRayPos_z = ray.Position;\n    myRayPos_z.z += 0.04;\n    \n    myRayPos_z.y = texture(iChannel0, myRayPos_z.xz * landRepeat).x * landHeight;\n    \n    vec3 myRayPos_x = ray.Position;\n    myRayPos_x.x += 0.04;\n    \n    myRayPos_x.y = texture(iChannel0, myRayPos_x.xz * landRepeat).x * landHeight;\n    \n    vec3 outNormal = cross(myRayPos_z - ray.Position, myRayPos_x - ray.Position);\n    \n    return normalize(outNormal);\n}\n\nvec3 rayTrace(Ray ray)\n{\n    vec3 outColor = vec3(0.7);\n    for (int i = 0;i < 4000;i++)\n    {\n        if (ray.Position.z > 0.2)\n        {\n            float height = texture(iChannel0, ray.Position.xz * landRepeat).x * landHeight;\n            if (height > ray.Position.y)\n            {\n                vec3 normal = getNormal(ray);\n                \n                float lums = dot(normal, vec3(cos(iTime), 1.0, sin(iTime))) * 0.5 + 0.5;\n                outColor = texture(iChannel2, ray.Position.xz).xyz * lums;\n                float fogAmount = min(ray.Position.z * 0.1, 1.0);\n                outColor = (1.0 - fogAmount) * outColor + fogAmount * 0.7;\n                break;\n            }\n        }\n        ray.Position += ray.Direction * 0.01;\n    }\n    return outColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    Ray ray;\n    ray.Position = vec3(iTime * 200.0 / iResolution.x, sin(iTime * 1.5) * 150.0 / iResolution.y + 2.0, 0.0);\n    ray.Direction = vec3(uv - 0.5, fov);\n    \n    vec3 outColor = rayTrace(ray);\n    \n    fragColor = vec4(outColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}