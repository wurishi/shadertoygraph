{"ver":"0.1","info":{"id":"43ffRX","date":"1728700573","viewed":69,"name":"Gold_Fractal","username":"kosalos","description":"copied from I can't remember where","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["raymarching","3dfractal"],"hasliked":0,"parentid":"4XsBRj","parentname":"Xeno_Julia"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int maxSteps = 22;\nvec3 offset1 = vec3(-0.00878,0.62189,1.78211);\nvec4 offset2 = vec4(0.31579,-0.15421,0.1819,0.30689);\n\nvec3 invpos = vec3(-0.042, 0.112, -0.124);\nfloat invradius = 0.199;\nfloat invangle = -1.16;\n\nfloat fogDistance = -1.;\nfloat fogAmount = 0.2;\nfloat fogColor = 0.3;\n\nvec3 camera = vec3(-.1, -1.01, -0.5);\nvec3 aim = vec3(-0.001, 0.985289488, 0.52208178);\nfloat ostrength = 0.0;\nfloat ocycle = 0.;\nvec4 orbit2 = vec4( 0.38347405, 1.86336986, -0.01788503, -2.71105793);\nvec4 orbit3 = vec4(0.87534959, 1.04847687, 0.03234359, 0.00505466);\nvec3 orbit4 = vec3(-2.19183836, 1.41098694, 1.56200985);\nvec3 phongColor =  vec3(0.,0.04,0.3);\nvec3 phongPosition = vec3(20.,11.,-4.);\nvec3 phongParam = vec3(1.,0.415,8.74);\nvec4 spotLightParam = vec4(.1,-3.5999,6.,0.2);\nvec3 spotLightColor = vec3(0.5,0.3,0.);\n\nvec3 direction;\nvec3 normal;\nvec3 position;\nvec3 color;\nfloat depth;\nint iter;\nvec4 orbitTrap;\n\n// --------------------------------------------------------\n\nfloat DE(vec3 pos) {\n\tpos.xz = mod(pos.xz + 1.0, 2.0) - 1.0;\n\tvec4 q = vec4(pos,1.);\n\tvec3 po = pos;\n\t\n\tfor(int n = 0; n < maxSteps; ++n)\t{\t\t\n\t\tq.xyz = abs(q.xyz) - offset1;\n\t\tq = 2.0 * q / clamp(dot(q.xyz, q.xyz), 0.4, 1.0) - offset2;\n\t\t\n        if(n > 5 && ostrength > 0.) {\n            po = pos * float(n) - orbit4;\n            orbitTrap = min(orbitTrap, vec4(po, dot(po,po)));\n        }\n\t}\n\n\treturn length(q.xyz) / q.w;\n}\t\n\nfloat DE_plusSpherical(vec3 pos) {\n    pos = pos - invpos;\n    float r = length(pos);\n    float r2 = r*r;\n    float radius2 = invradius * invradius;\n    pos = (radius2 / r2) * pos + invpos;\n\n    float an = atan(pos.y,pos.x) + invangle;\n    float ra = length(pos.xy);\n    pos.x = cos(an) * ra;\n    pos.y = sin(an) * ra;\n\n    float de = DE(pos);\n    return r2 * de / (radius2 + r * de);\n}\n\n// --------------------------------------------------------\n// https://iquilezles.org/articles/normalsSDF\nvoid calcNormal() {\n    float d0 = DE(position);\n    vec2 epsilon = vec2(.001,0.); //  sin(iTime * 0.1) * 0.05);  // fudge factor\n    vec3 d1 = vec3(\n        DE(position-epsilon.xyy),\n        DE(position-epsilon.yxy),\n        DE(position-epsilon.yyx));\n    normal = normalize(d0 - d1);\n}\n\n// --------------------------------------------------------\n\nvoid setDirection(vec2 U) {\n    vec3 viewVector = normalize(aim);\n    vec3 sideVector = vec3(0.,1.,0.);\n    sideVector = normalize(cross(sideVector,viewVector));\n    vec3 topVector = cross(viewVector,sideVector);\n    \n    vec2 vPos = (U - iResolution.xy * 0.5)/iResolution.y;\n    direction = normalize(viewVector + vPos.x * sideVector + vPos.y * topVector);\n}\n\n// --------------------------------------------------------\n\nvec3 generateColor(float weight,float x) {\n\tif(weight == 0.0) return vec3(0.);\n\n\tx = cos(x);\n\tfloat r = (1.0-x)*(1.0-x);\n\tfloat g = x*x;\n\tfloat b = 2.0*(1.0-x)*x;\n\treturn vec3(r,g,b);\n}\n\nvec3 orbitTrapCycle(float cycle,vec3 c, float s) {\n    float ss = s * cycle;\n    return vec3(0.5) + 0.5 * vec3( cos(ss + c.x), cos(ss + c.y), cos(ss + c.z));\n}\n\nvec3 getOrbitColor() {\n    vec3 orbitColor;\n    \n    if (ocycle > 0.0) {\n        orbitColor =\n        orbitTrapCycle(ocycle,generateColor(orbit2.x,orbit2.y), orbitTrap.x) * orbit2.x * orbitTrap.x +\n        orbitTrapCycle(ocycle,generateColor(orbit2.z,orbit2.w), orbitTrap.y) * orbit2.z * orbitTrap.y +\n        orbitTrapCycle(ocycle,generateColor(orbit3.x,orbit3.y), orbitTrap.z) * orbit3.x * orbitTrap.z +\n        orbitTrapCycle(ocycle,generateColor(orbit3.z,orbit3.w), orbitTrap.w) * orbit3.z * orbitTrap.w;\n    } else {\n        orbitColor =\n        \tgenerateColor(orbit2.x,orbit2.y) * orbit2.x * orbitTrap.x +\n        \tgenerateColor(orbit2.z,orbit2.w) * orbit2.z * orbitTrap.y +\n        \tgenerateColor(orbit3.x,orbit3.y) * orbit3.x * orbitTrap.z +\n        \tgenerateColor(orbit3.z,orbit3.w) * orbit3.z * orbitTrap.w;\n    }\n    \n    return orbitColor;\n}\n\n// --------------------------------------------------------\n// phongParam = diffuse,spec,ambient\nvoid phongLight() {\n\tvec3 L = normalize(phongPosition - position);\n\tfloat dotLN = dot(L, normal);\n\tif (dotLN < 0.) return;\n\t\t\n\tfloat t1 = phongParam.x * dotLN;\n\tvec3 V = normalize(camera - position);\n\tvec3 R = normalize(reflect(-L, normal));\n\tfloat dotRV = dot(R, V);\n\n\tif (dotRV < 0.) {\n\t\tcolor += phongColor * t1;\n        return;\n    }\n\n\tfloat t2 = phongParam.y * pow(abs(dotRV), phongParam.z);\n\tcolor += phongColor * (t1 + t2);\n}\n\n// --------------------------------------------------------\n// spotLightParam = strength,x,y,exp\n\nconst float PI = acos(-1.);\n\nvoid spotLight() { \n\tfloat a1 = spotLightParam.y * PI;\n\tfloat a2 = spotLightParam.z * PI * 0.5;\n\tfloat s1 = sin(a1);\n\tvec3 spotDir = normalize(vec3(s1 * cos(a2), s1 * sin(a2), cos(a1)));\n\tvec3 halfVector = normalize(spotDir - direction);\n\n\tfloat nDotL = max(0., dot(normal, spotDir));\n\tfloat hDotN = max(0., dot(normal, halfVector));\n\n    vec3 c = spotLightColor;// * spotLightParam.x;\n    float sexp = spotLightParam.w;\n\n\tcolor += c * ((sexp + 2.) / 2.) * pow(hDotN, sexp) \n\t\t* (sexp + (1. - sexp) * pow(1. - hDotN, 5.)) * nDotL * spotLightParam.x;\n}\n\n// --------------------------------------------------------\n\nvoid ambient() { \n    const float amb = 1.1;\n    const float contrast = 0.9;\n    const float dim = 0.02;\n    const float vibrant = 0.01;\n\n    color = vec3(0.7,.6,0.2) * amb - vec3(1. - (normal * vibrant + sqrt(float(iter) * dim)));\n    color = vec3(0.5) + (color - vec3(0.5)) * contrast; \n        \n    phongLight();\n    spotLight();\n    \n    if(ostrength > 0.0) {\n        vec3 oColor = getOrbitColor();\n        color = mix(color, oColor, ostrength);\n    }    \n}\n\n// --------------------------------------------------------\nconst float MIN_DIST = 0.01;\nconst float MAX_DIST = 4.0;\nconst float EPSILON = 0.00001;\n\nvoid rayMarch() {\n\tfloat distance;\n\tposition = camera;\n\titer = 0;\n\tdepth = MIN_DIST;\n \torbitTrap = vec4(10000.);\n\n\tfor(int i = 0;i < 50;++i) {\n\t\tdistance = DE_plusSpherical(position);\n        if(abs(distance) < EPSILON || depth > MAX_DIST) break;\n        iter += 1;\n\t\t\n        depth += distance;\n        position += direction * distance;\n    }\n}\n\n// --------------------------------------------------------\n\n#define animate(v,v1,v2,speed) v = mix(v1,v2,0.5 + sin(iTime * speed) * 0.5)\n#define animate2(v,base,delta,speed) v = mix(base-delta,base+delta,0.5 + sin(iTime * speed) * 0.5)\n    \nconst vec2[3] offset1Anim = vec2[](\n vec2(-0.00878,0.01),\n vec2(0.62189,0.02),\n vec2(1.78211,0.05));\n\nconst vec2[4] offset2Anim = vec2[](\n    vec2(0.31579,0.05),\n    vec2(-0.15421,0.05),\n    vec2(0.1819,0.05),\n    vec2(0.30689,0.05));\n    \nconst vec2[3] invposAnim = vec2[](\n vec2(-0.0428,0.03),\n vec2(0.112,0.017),\n vec2(-0.124,0.029));\n\n// --------------------------------------------------------\n\nvoid mainImage(out vec4 O, vec2 U) {\n\n    for(int i=0;i<3;++i)\n        animate2(offset1[i],offset1Anim[i].x,offset1Anim[i].y,0.1 + float(i)*0.1);\n    for(int i=0;i<4;++i)\n        animate2(offset2[i],offset2Anim[i].x,offset2Anim[i].y,0.2 + float(i)*0.5);\n\n    for(int i=0;i<3;++i)\n        animate2(invpos[i],invposAnim[i].x,invposAnim[i].y,0.1 + float(i)*0.001);\n   \n    animate(invradius,3.5,0.01,0.01);\n    animate(invangle,0.,0.1,0.01);\n\n    animate2(spotLightParam.x,1.,0.5,0.3);\n    animate2(spotLightParam.y,2.26,0.5,0.3);\n    animate2(spotLightParam.z,0.,0.5,0.35);\n    animate2(spotLightParam.w,0.9,0.5,0.4);\n    animate2(spotLightColor.x,0.5,0.5,0.2);\n    animate2(spotLightColor.y,0.5,0.5,0.3);\n    animate2(spotLightColor.z,0.5,0.5,0.4);\n\n    animate2(phongParam.x,0.2,0.05,0.3);\n    animate2(phongParam.y,1.1,0.1,0.35);\n    animate2(phongParam.z,5.,1.,0.4);\n    animate2(phongColor.x,0.5,0.5,0.3);\n    animate2(phongColor.y,0.5,0.5,0.35);\n    animate2(phongColor.z,0.1,0.05,0.4);\n    animate2(phongPosition.x,0.,5.,0.2);\n    animate2(phongPosition.y,0.,5.,0.3);\n    animate2(phongPosition.z,0.,5.,0.5);\n/*\n    animate(ostrength,0.,0.1,0.1);\n    //animate(ocycle,0.,3.,0.18);\n    animate(orbit2.x,-3.,3.,0.011);  // X wt,color\n    animate(orbit2.y,-3.,3.,0.013);\n    animate(orbit2.z,-3.,3.,0.015);  // Y wt,color\n    animate(orbit2.w,-3.,3.,0.017);\n    animate(orbit3.x,-3.,3.,0.019);  // Z wt,color\n    animate(orbit3.y,-3.,3.,0.021);\n    animate(orbit4.x,-3.,3.,0.23);  // center\n    animate(orbit4.y,-3.,3.,0.25);\n    animate(orbit4.z,-3.,3.,0.27);\n*/\n    animate2(camera.x,-0.1,0.02,   0.35);\n    animate2(camera.y,-1.01,0.02,   0.4);\n    animate2(camera.z,-0.5,0.02,   0.45);\n    \n    animate2(aim.x,0.,  0.2,   0.35);\n    animate2(aim.y,0.97,0.2,   0.4);\n    animate2(aim.z,0.52,0.2,   0.45);\n\n    color = vec3(0.);\n    setDirection(U);\n\trayMarch();\n    \n\tif(depth < MAX_DIST) {\n        calcNormal();\n        ambient();\n    }\n/*    \n    if(fogDistance != 0.0) {\n        float f = depth - fogDistance;\n        if(f > 0.0) {\n            f = min(1.0,f * fogAmount);\n            color = mix(color, vec3(0.2 + f * fogColor),f);\n        }\n    }\n*/\n    O.xyz = color;\n}\n\n","name":"Image","description":"","type":"image"}]}