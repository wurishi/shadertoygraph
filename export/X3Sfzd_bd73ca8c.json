{"ver":"0.1","info":{"id":"X3Sfzd","date":"1729808226","viewed":59,"name":"Tdub's Mandelbrot Explorer","username":"TdubMorris","description":"My first big shader on shadertoy.\n\nW and S to zoom in and out, click to move camera\n\nupdate: what have I done","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["complex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//complex math functions\nvec2 cmul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y,  a.x * b.y + a.y * b.x);\n}\nfloat cmod(vec2 a) {\n    return length(a);\n}\nfloat carg(vec2 a) {\n    return atan(a.y, a.x);\n}\nconst float PI = 3.141592653589;\nconst float TAU = 2. * PI;\n\n//hsv to rgb\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\n\n// ~~our function~~\nvec3 f(vec2 z) {\n    int d = 0;\n    vec2 c = z;\n    for(int i=0; i<1000; i++) {\n        z = cmul(z,z) + c;\n\n        if(length(z)>1000.0){\n            d=i;\n            break;\n           \n        }\n    }\n    return vec3(z, d);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    width = width/exp(fetchData(iChannel0, gzoom).r);\n    height = height/exp(fetchData(iChannel0, gzoom).r);\n    \n\n        pos = fetchData(iChannel0, gpos).rg;\n    \n    \n    //convert to graph positions\n    vec2 inp = globalize(uv);\n    \n    \n    \n    \n    \n    vec2 z = f(inp).xy;\n    \n    vec3 col;\n    \n    if(length(z)>2.) {\n    col = hsv2rgb(vec3(f(inp).z/100. + iTime,1.,1.));\n    } else {\n    col = vec3(0., 0., 0.);\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nconst ivec2 gpos = ivec2(0,0);\nconst ivec2 gzoom = ivec2(1,0);\n\n\nconst int KEY_W  = 87;\nconst int KEY_S  = 83;\n\n#define fetchData(buf, addr) texelFetch(buf, addr, 0)\n\n#define storeData(buf_pos, addr) ivec2(buf_pos) == addr\n\n\n\n\nfloat width = 5.;\nfloat height = 3.;\nfloat zspeed = 0.0;\n\nvec2 pos = vec2(-1.042214, 0.142992);\n\n\nvec2 globalize(vec2 loc) {\n   return vec2((loc.x * width)-(width/2.) + pos.x, (loc.y * height) - (height/2.) + pos.y);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nfloat up = texelFetch(iChannel1, ivec2(KEY_W, 0), 0).x;\nfloat down = -texelFetch(iChannel1, ivec2(KEY_S, 0), 0).x;\n\n\nif(storeData(fragCoord, gzoom)){\n    fragColor = vec4(0.,0.,0.,1.);\n    }\n\nif(iFrame>0){\n    if(ivec2(fragCoord) == gzoom){\n        fragColor = fetchData(iChannel0, gzoom);\n        if(fragColor.r + (up + down) * iTimeDelta < 14. && fragColor.r + (up + down) * iTimeDelta >= 0.){\n            fragColor.r += (up + down) * iTimeDelta;\n            }\n        }\n    }\n\n\nwidth = width/exp(fetchData(iChannel0, gzoom).r);\nheight = height/exp(fetchData(iChannel0, gzoom).r);\n\n\n\nif(storeData(fragCoord, gpos)){\n     fragColor = vec4(0., 0., 0., 1.);\n     }\n \nif(iFrame > 0){\n    if(ivec2(fragCoord) == gpos){\n    fragColor = fetchData(iChannel0, gpos);\n        \n    pos = fetchData(iChannel0, gpos).rg;\n        \n    if(iMouse.z > 0.0){\n        if(fragColor.b == 0.0) {\n            fragColor.b = 1.0;\n            fragColor.rg = globalize(iMouse.xy/iResolution.xy);\n                }\n            } else {\n            fragColor.b = 0.0;\n            }\n\n\n\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}