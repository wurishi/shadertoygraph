{"ver":"0.1","info":{"id":"M3jXDW","date":"1710705736","viewed":26,"name":"TP2 Otmane","username":"otmane100","description":"tp2 Otmane textures","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["tp2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Otmane El Mouki\n// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.8;\n    \n    ro = vec3(35.0 * 1.50, 0.0 * 1.50, 15.0 * 1.50); //modification pour vue plus ample \n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n// Texturing\n// Otmane El Mouki\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\nfloat reflectivite;\nfloat transparence; \n};\n\n\n\n\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n\n\n// Cylindre vertical\nV Cylinder(vec3 p, vec3 c, float r, float h, int index) {\n    vec3 pc = p - c;\n    float dist = length(pc.xy) - r;\n    dist = max(dist, abs(pc.z) - h);\n    return V(dist, index);\n}\n\n\nV Earth(vec3 p) {\n    float earthRadius = 8.0;\n    vec3 earthCenter = vec3(0.0, 15.0, 7.0); \n    V earth = Sphere(p, earthCenter, earthRadius, 6); // Utilise l'index 6 pour représenter la Terre\n    return earth;\n}\n\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\n\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Dice \n// p : point\n// c : center \n// r : radius\n\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n////////////////////Potential field of the object\n// p : point\n\n\nV object(vec3 p)\n{\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-4.0),0);\n  \n  u=Union(u,Dice(p,vec3( 0.0, 0.0, 2.0),4.0,1));\n  u=Union(u,Dice(p,vec3( -10.0, 0.0, 2.0),4.0,2));\n  u=Union(u,Dice(p,vec3( 10.0, 0.0, 2.0),4.0,3));\n  \n  // Nouveaux cubes pour les textures marbre, bois, rouille et sable\n  \n   u = Union(u, Dice(p, vec3(-20.0, 0.0, 2.0), 4.0, 4)); // Nouveau cube pour texture de marbre\n   u = Union(u, Dice(p, vec3(20.0, 0.0, 2.0), 4.0, 5)); // Nouveau cube pour texture de bois\n   vec3 centerDice = vec3(-0.0, -10.0, 2.0); // Position du centre du dé\n   float sizeDice = 4.0; // Taille du dé\n   V diceRouille = Dice(p, centerDice, sizeDice, 7); // Utilise l'indice 7 pour la rouille\n   // Position et taille de  dé sable\n    vec3 centerSable = vec3(10.0, -10.0, 2.0); \n    float sizeSable = 4.0; // La taille du dé\n    V diceSable = Dice(p, centerSable, sizeSable, 8); // On utilise 8 comme indice pour le sable\n\n   \n    V earth = Earth(p);\n    V temp = Union(u, earth);\n    V temp2 = Union(temp, diceRouille);\n    u= Union(temp2, diceSable);\n    \n    \n   \n   \n   return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\n\n\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n///////////////////////////////////Texture de damier \n\n\n\n// p : position dans l'espace\n// size : taille du côté du damier\n\nfloat Damier(in vec3 p, float size) {\n    // Calcule les coordonnées du damier en utilisant floor sur des coordonnées divisées par la taille du damier\n    // Utilise mod pour alterner entre les cases du damier\n    float checker = mod(floor(p.x / size) + floor(p.y / size) + floor(p.z / size), 2.0);\n    return checker < 1.0 ? -1.0 : 1.0; // Retourne -1 ou 1 pour changer la couleur\n}\n\n//////////////////////////////////////Fonctions Texture Marbre\n\n\n// 1° Marbre avec veines\n\nT MarbreAvecVeines(in vec3 p) {\n    float veines = sin(p.x * 2.0 + p.y * 2.0 + p.z * 2.0 + Noise(p * 5.0) * 8.0); // Ajout de bruit pour simuler des veines  dans le marbre\n    vec3 couleur = vec3(0.8, 0.7, 0.6) + vec3(0.5 + 0.5 * veines); // Base + veines\n    return T(couleur, 0.25, 0.3, 0.0);\n}\n\n// 2° Marbre sans veines\nT MarbreSansVeines(in vec3 p) {\n    vec3 couleur = vec3(Noise(p * 0.5)); // Couleur basée sur un bruit plus doux\n    return T(couleur, 0.2, 0.7, 0.0); \n}\n\n\n///////////////////////////////////Fonctions Texture Bois\n\n// 1° Bois avec noeuds\n\nT BoisAvecNoeuds(in vec3 p) {\n    float anneaux = sin(p.x * 20.0 + Noise(p * 0.1) * 12.0);\n    float noeuds = Noise(p * 15.0) * Noise(p * 15.0) * 2.0; // Nœuds accentués\n    vec3 couleur = vec3(0.6, 0.4, 0.2) * mix(anneaux, noeuds, step(0.8, noeuds));\n    return T(couleur, 0.15, 0.2, 0.0);\n}\n//  2° Bois sans noeuds\n\nT BoisSansNoeuds(in vec3 p) {\n    float anneaux = sin(p.x * 20.0 + Noise(p * 0.1) * 12.0); // Anneaux du bois\n    vec3 couleur = vec3(0.7, 0.5, 0.3) * anneaux;\n    return T(couleur, 0.1, 0.1, 0.0);\n}\n\n//////////////////////////////////////Texture rouille\n\nT TextureRouille(in vec3 p) {\n    //  calcul pour simuler une couleur de rouille\n    float noise = Noise(p * 5.0); //  échelle de bruit pour l'aspect de la rouille\n    vec3 couleurRouille = mix(vec3(0.7, 0.4, 0.1), vec3(0.8, 0.5, 0.2), noise);\n\n    \n    return T(couleurRouille, 0.3, 0.3, 0.0); \n}\n\n\n///////////////////////////Texture Sable\n\nT TextureSable(in vec3 p) {\n    // Utilisation du bruit pour ajouter des variations à la couleur de base du sable\n    float bruit = Noise(p * 5.0); // on peut augmenter  l'échelle pour des variations plus fines\n    vec3 couleurBaseSable = vec3(0.76, 0.7, 0.5); // Couleur de base pour le sable\n    vec3 couleurSable = mix(couleurBaseSable, couleurBaseSable * 1.1, bruit); // Léger ajustement de couleur basé sur le bruit\n\n    return T(couleurSable, 0.1, 0.0, 0.0); // Specularité basse, pas de réflectivité ou de transparence\n}\n\n\n\n\n///////////////////////////////////////////Texture Terre\n\n\n\n//  texture  pour simuler des îles/continents simples\n\n\n\nT SimpleContinents(in vec3 p) {\n  \n    float noise = Noise(p * 0.2); // Ajuste l'échelle pour plus ou moins de détail\n\n    // Simple seuil pour déterminer terre/mer\n    float land = smoothstep(0.45, 0.55, noise);\n\n    vec3 waterColor = vec3(0.1, 0.2, 0.5); // Couleur pour l'eau\n    vec3 landColor = vec3(0, 0.5, 0); // Couleur pour la terre\n\n    // Choix de couleur basé sur le bruit\n    vec3 color = mix(waterColor, landColor, land);\n\n    return T(color, 0.1, 0.0, 0.0); // Retourne la texture avec la couleur calculée\n}\n\n\n\n\n\n\n\n\n///////////////////////////////Texture Nuages\n\n\nT CloudsTexture(in vec3 p, float time) {\n    float cloudNoise = Noise(p * 3.0 + vec3(0.0, 0.0, time)); // Ajoute 'time' pour l'animation des nuages\n    float cloudFactor = smoothstep(0.7, 0.9, cloudNoise); // Détermine la densité des nuages\n\n    // La couleur des nuages varie du transparent (pas de nuages) au blanc (nuages denses)\n    vec3 cloudColor = mix(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0), cloudFactor);\n\n    return T(cloudColor, 0.0, 0.0, 0.0); \n}\n\n\n// Combinaison des textures de la Terre et des nuages\n\n\nT CombineEarthAndClouds(in vec3 p, in vec3 n, float time) {\n    T earthTex = SimpleContinents(p); \n    T cloudTex = CloudsTexture(p, time); \n\n    \n    vec3 combinedColor = mix(earthTex.c, cloudTex.c, cloudTex.c); \n\n    return T(combinedColor, earthTex.s, earthTex.reflectivite, earthTex.transparence);\n}\n\n\n\n\n//////////////////////////////////////////\n\n\nT Texture0(in vec3 p) {\n  float checker = Damier(p, 2.0); // Taille du damier\n  \n  // Définit deux couleurs pour les cases du damier\n    vec3 couleurCase1 = vec3(0.9, 0.8, 0.7); // Couleur pour les cases où checker < 1.0\n    vec3 couleurCase2 = vec3(0.2, 0.3, 0.4); // Couleur pour les cases où checker >= 1.0\n    vec3 couleur = checker < 1.0 ? couleurCase1 : couleurCase2; //Si checker < 1.0 : il prend la couleurCase1, sion il prend couleurCase2\n    \n    // Specularité, Réflectivité, Transparence pour le damier\n \n    float specularite = 0.90;\n    float reflectivite = 0.2; \n    float transparence = 0.0; // Supposons que le damier est opaque\n\n    return T(couleur, specularite, reflectivite, transparence);\n}\n\n// Texture de marbre avec veines\n\nT Texture1(in vec3 p) {\n    vec3 couleur = MarbreAvecVeines(p).c;\n    float specularite = 0.25;\n    float reflectivite = 0.3; // Réflectivité pour le marbre\n    float transparence = 0.0; // Marbre est généralement opaque\n    return T(couleur, specularite, reflectivite, transparence);\n}\n\n\n// Texture de marbre sans veines\n\nT Texture2(in vec3 p) {\n    vec3 couleur = MarbreSansVeines(p).c; \n    float specularite = 0.0;\n    float reflectivite = 0.0; // Réflectivité pour le marbre\n    float transparence = 0.0; // Marbre est généralement opaque\n    return T(couleur, specularite, reflectivite, transparence);\n}\n\n\n// Texture de bois avec nœuds\n\n    T Texture3(in vec3 p) {\n    vec3 couleur = BoisAvecNoeuds(p).c; \n    float specularite = 0.0;\n    float reflectivite = 0.25; // Réflectivité ajustée pour le bois\n    float transparence = 0.0; // Bois est généralement opaque\n    return T(couleur, specularite, reflectivite, transparence);\n}\n\n\n// Texture de bois sans nœuds\n\nT Texture4(in vec3 p) {\n    vec3 couleur = BoisSansNoeuds(p).c; \n    float specularite = 0.0;\n    float reflectivite = 0.1; // Réflectivité ajustée pour le bois\n    float transparence = 0.0; // Bois est généralement opaque\n    return T(couleur, specularite, reflectivite, transparence);\n}\n\n\n\n\n\n\n// Compute texture \n// p : Point\n// n : Normal\n\nT Color(in vec3 p, in vec3 n) {\n    V vp = object(p); // Obtient les informations sur l'objet à ce point\n    T tex; //valeur de retour\n\n    // Sélectionne la texture appropriée en fonction de l'indice de l'objet\n    \n    \n     if (vp.i == 1) {\n        \n        \n        tex = Texture0(p);\n    } else if (vp.i == 2) {\n        // Marbre avec veines\n        tex = MarbreAvecVeines(p); //on peut ecrire aussi : tex = Texture1(p); meme chose pour les autres cas.\n    } else if (vp.i == 3) {\n        // Marbre sans veines\n        tex = MarbreSansVeines(p);\n    } else if (vp.i == 4) {\n        // Bois avec nœuds\n        tex = BoisAvecNoeuds(p);\n    } else if (vp.i == 5) {\n        // Bois sans nœuds\n        tex = BoisSansNoeuds(p);\n    }\n    \n      else if (vp.i == 6) { \n        // Texture Terre\n       tex = CombineEarthAndClouds(p,n, iTime); }\n       \n      else if (vp.i == 7) { // Vérifie si l'indice correspond à celui du dé rouillé\n        tex = TextureRouille(p); }\n    \n      else if (vp.i == 8) { // Vérifie si c'est l'indice pour le dé sableux\n        tex = TextureSable(p); }\n    \n    \n    else {\n        // Par défaut, utilise une texture générique ou retourne une couleur unie\n        tex = T(vec3(1.0, 1.0, 1.0), 0.25, 0.0, 0.0); // Couleur blanche, specularité par défaut, sans réflectivité ni transparence\n    }\n\n    return tex;\n}\n\n\n\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\n\nvec3 Shade(vec3 p, vec3 n, vec3 e) {\n    // Position de la source lumineuse dans la scène\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Calcul de la direction de la lumière (du point vers la source lumineuse)\n    vec3 l = normalize(lp - p);\n    \n    // Obtention des propriétés du matériau à ce point spécifique en appelant la fonction Color\n    // Cela inclut la couleur, la spéculaire, la réflectivité et la transparence\n    T tex = Color(p, n);\n\n    \n    vec3 ambient = 0.5 * tex.c;\n    \n    // Calcul d'ombre - Détermine si le point est en ombre ou non \n    float s = Shadow(p + 0.01 * n, n, l);\n\n    // Contribution de lumière diffuse - Lumière répartie uniformément à partir de la surface\n    vec3 diffuse = 0.5 * clamp(dot(n, l), 0.0, 1.0) * tex.c;\n\n    // Calcul de la réflexion spéculaire - Réflexion brillante basée sur l'angle entre la vue et la direction de réflexion\n    vec3 r = reflect(e, n); // Calcule la direction de réflexion\n    vec3 specular = tex.s * pow(clamp(dot(r, l), 0.0, 1.0), 28.0) * vec3(1.0, 1.0, 1.0); // Intensité spéculaire\n\n    // Composition de la couleur finale avec les contributions ambiantes, diffuses, et spéculaires\n    vec3 c = ambient + s * (diffuse + specular);\n\n    // Gestion de la réflectivité - Ajout de la couleur réfléchie basée sur la propriété de réflectivité du matériau\n    if (tex.reflectivite > 0.0) {\n        vec3 reflectedDirection = reflect(normalize(p - lp), n); // Calcule la direction réfléchie\n        vec3 reflectedColor = background(reflectedDirection); // Utilise un appel simplifié pour obtenir la couleur réfléchie\n        // Mélange la couleur réfléchie avec la couleur calculée en fonction du degré de réflectivité\n        c = mix(c, reflectedColor, tex.reflectivite);\n    }\n\n    \n    return c; // Retourne la couleur finale\n    \n}\n\n\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}