{"ver":"0.1","info":{"id":"cdKSzy","date":"1681260695","viewed":45,"name":"Fork Plastic Nu graygoose 336","username":"graygoose","description":"I'm feeling dizzy.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","cubic","numbertheory","ratio"],"hasliked":0,"parentid":"DsVXRy","parentname":"Plastic Number Spiral"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185307179586\n#define PLASTIC 1.3247179572\n\nfloat[] stops = float[4](0.0, 0.16, 0.33, 0.5);\nvec3[] colors = vec3[4](\n    vec3(0.5, 0.5, 1.0),\n    vec3(1.0, 0.5, 0.5),\n    vec3(0.5, 1.0, 0.5),\n    vec3(1.0, 1.0, 0.5)\n);\n\nvec3 gradient(float t, vec3[4] colors) {\n    int numStops = stops.length();\n    \n    int i = 0;\n    while (stops[i] < t)\n        i++;\n    \n    float t1 = stops[i - 1];\n    float t2 = stops[i];\n    vec3 color1 = colors[i - 1];\n    vec3 color2 = colors[i];\n    \n    float f = (t - t1) / (t2 - t1);\n    return mix(color1, color2, f);\n}\n\n\nvec3 getColor(float iteration) {\n    float t = iteration / 8.0;\n\n    return gradient(t, colors);\n}\n\nfloat fractal(vec2 p) {\n    float t = iTime * 0.5;\n    float scale = 1.0;\n    float sum = 0.0;\n\n    for (int i = 0; i < 8; i++) {\n        float angle = atan(p.y, p.x) + t;\n        float radius = length(p);\n\n        float scaled_angle = mod(angle * PLASTIC / TAU, 1.0);\n        float spiral = smoothstep(0.0, 1.0, abs(radius - scaled_angle));\n\n        sum += spiral * scale;\n        scale *= 0.5;\n\n        p = p * 1.5 + vec2(0.5);\n    }\n\n    return sum;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) - vec2(1.);\n\n    float iteration = fractal(uv);\n    vec2 uv2 = vec2(uv.x + iteration, uv.y + iteration); \n\n    iteration = fractal((uv2*abs(cos(iTime))) / (uv*sin(iTime)));\n\n    fragColor = vec4(getColor(iteration), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}