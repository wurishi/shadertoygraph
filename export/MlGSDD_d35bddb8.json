{"ver":"0.1","info":{"id":"MlGSDD","date":"1484398612","viewed":431,"name":"Seascape VR immersion","username":"Tempally","description":" Adaptation of Alexander Alekseev's \"Seascape\" for VR experience\n (I saw another VR versions of this shader, but I tried to achieve good immersion, not just add mainVR.\n Read the first comment in the code for more details.)","likes":8,"published":1,"flags":1,"usePreview":0,"tags":["vrprocedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * modified version of Alexander Alekseev's \"Seascape\" (2014)\n * License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n *\n * Adaptation to VR experience - Tempally (2017):\n * Clouds and sun have been added (to match the existing lights on the water)\n * I've found that we don't need to make good clouds or perform dithering of the sky\n * because we can't see these defects neither in Rift nor in Vive.\n * So I chose fast'n'ugly clouds and sun - we need 90+ FPS without drops!\n * But there is another thing that you really need to use VR at ShaderToy:\n * EXPAND AREA OF YOUR SHADER OUTPUT TO AT LEAST 2160 x 1200!\n * I do it for myself by attaching a UserScript to my browser \n * with @includes='*.shadertoy.com/view*':\n *    ...\n *    plr = document.getElementById(\"demogl\");\n *    if (plr!==null)\n *    {\n *        plr.style.width=\"2160px\";\n *        plr.style.height=\"1200px\";\n *    }\n *\n */\n\n//new constants:\nconst float FOV = .9; // not in VR\n//sky\nconst vec3 SUN_POS = vec3(.0,.5,.929);\nconst vec3 SUN_COLOR = vec3(.001,.0006,.0002);\n\nconst int NUM_STEPS = 8;\nconst float PI\t \t= 3.1415;\nconst float EPSILON\t= 1e-3;\n\n// sea\nconst int ITER_GEOMETRY = 3;\nconst int ITER_FRAGMENT = 5;\nconst float SEA_HEIGHT = 0.6;\nconst float SEA_CHOPPY = 4.0;\nconst float SEA_SPEED = 0.8;\nconst float SEA_FREQ = 0.16;\nconst vec3 SEA_BASE = vec3(0.1,0.19,0.22);\nconst vec3 SEA_WATER_COLOR = vec3(0.8,0.9,0.6);\nfloat SEA_TIME;\nmat2 octave_m = mat2(1.6,1.2,-1.2,1.6);\n\n// math\nfloat hash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.0453,309.731));\t\n    return fract(sin(h)*43758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.-2.*f);\n    return -.9+2.0*\n        mix( mix( hash( i + vec2(0.0,0.0) ), hash( i + vec2(1.0,0.0) ), u.x),\n             mix( hash( i + vec2(0.0,1.0) ), hash( i + vec2(1.0,1.0) ), u.x), u.y);\n                     \n}\n\n// lighting\nfloat diffuse(vec3 n,vec3 l,float p) {\n    return pow(dot(n,l) * 0.4 + 0.6,p);\n}\nfloat specular(vec3 n,vec3 l,vec3 e,float s) {    \n    float nrm = (s + 8.0) / (3.1415 * 8.0);\n    return pow(max(dot(reflect(e,n),l),0.0),s) * nrm;\n}\n\n// sky\nvec3 getSkyColor(vec3 e) {\n    e.y = 1.-max(e.y,0.);\n    return vec3(e.y*e.y, e.y, .5+e.y*.5);\n}\nfloat clouds(vec2 p) {\n\tfloat final = noise(p);\n\tp *= 2.93; final += noise(p) * 0.45;\n\tp *= 2.89; final += noise(p) * 0.15;\n\treturn final;\n}\nvec3 getSky(vec3 rd) {\n    vec3 col=getSkyColor(rd); // take the sky color first\n\tfloat sun = max(dot(rd, SUN_POS), 0.); // place sun\n\tcol += SUN_COLOR*pow(sun, 128.0); // and draw it\n    vec2 sc = rd.xz*log2(rd.y) * 7.; // prepare for clouds\n\treturn mix(col , vec3(1.0,0.95,1.0), \n               0.5*smoothstep(0.5, 1.0, clouds(sc)) * clamp(rd.y*4., 0., 1.) );\n}\n\n\n// sea\nfloat sea_octave(vec2 uv, float choppy) {\n    uv += noise(uv);        \n    vec2 wv = 1.0-abs(sin(uv));\n    wv = mix(wv,abs(cos(uv)),wv);\n    return pow(1.0-pow(wv.x * wv.y,0.65),choppy);\n}\n\nfloat map(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_GEOMETRY; i++) {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\nfloat map_detailed(vec3 p) {\n    float freq = SEA_FREQ;\n    float amp = SEA_HEIGHT;\n    float choppy = SEA_CHOPPY;\n    vec2 uv = p.xz; uv.x *= 0.75;\n    \n    float d, h = 0.0;    \n    for(int i = 0; i < ITER_FRAGMENT; i++) {        \n    \td = sea_octave((uv+SEA_TIME)*freq,choppy);\n    \td += sea_octave((uv-SEA_TIME)*freq,choppy);\n        h += d * amp;        \n    \tuv *= octave_m; freq *= 1.9; amp *= 0.22;\n        choppy = mix(choppy,1.0,0.2);\n    }\n    return p.y - h;\n}\n\nvec3 getSeaColor(vec3 p, vec3 n, vec3 l, vec3 eye, vec3 dist) {  \n    float fresnel = clamp(1.0 - dot(n,-eye), 0.0, 1.0);\n    fresnel = pow(fresnel,3.0) * 0.65;\n        \n    vec3 reflected = getSkyColor(reflect(eye,n));    \n    vec3 refracted = SEA_BASE + diffuse(n,l,80.0) * SEA_WATER_COLOR * 0.12; \n    \n    vec3 color = mix(refracted,reflected,fresnel);\n    \n    float atten = max(1.0 - dot(dist,dist) * 0.001, 0.0);\n    color += SEA_WATER_COLOR * (p.y - SEA_HEIGHT) * 0.18 * atten;\n    \n    color += vec3(specular(n,l,eye,60.0));\n    \n    return color;\n}\n\n// tracing\nvec3 getNormal(vec3 p, float eps) {\n    vec3 n;\n    n.y = map_detailed(p);    \n    n.x = map_detailed(vec3(p.x+eps,p.y,p.z)) - n.y;\n    n.z = map_detailed(vec3(p.x,p.y,p.z+eps)) - n.y;\n    n.y = eps;\n    return normalize(n);\n}\n\nfloat heightMapTracing(vec3 ori, vec3 dir, out vec3 p) {  \n    float tm = 0.0;\n    float tx = 1000.0;    \n    float hx = map(ori + dir * tx);\n    if(hx > 0.0) return tx;   \n    float hm = map(ori + dir * tm);    \n    float tmid = 0.0;\n    for(int i = 0; i < NUM_STEPS; i++) {\n        tmid = mix(tm,tx, hm/(hm-hx));                   \n        p = ori + dir * tmid;                   \n    \tfloat hmid = map(p);\n\t\tif(hmid < 0.0) {\n        \ttx = tmid;\n            hx = hmid;\n        } else {\n            tm = tmid;\n            hm = hmid;\n        }\n    }\n    return tmid;\n}\n\n// main\nvoid drawImage( out vec4 fragColor, in vec3 ori, in vec3 dir ) {\n    \n    ori.z+=iTime; //waves must flow\n    ori.y+=2.;// we do not want to dive\n        \n    // tracing\n    vec3 p;\n    heightMapTracing(ori,dir,p);\n    vec3 dist = p - ori;\n    vec3 n = getNormal(p, dot(dist,dist) * 0.1 / iResolution.x);\n    const vec3 light = vec3(0.0,0.8,0.6); \n             \n    // color\n    vec3 color = mix(\n        getSky(dir),\n        getSeaColor(p,n,light,dir,dist),\n    \tpow(smoothstep(0.0,-0.05,dir.y),0.3));\n        \n    // post\n\tfragColor = vec4(pow(color,vec3(0.75)), 1.0);\n}\n\n// main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    SEA_TIME = 1.0 + iTime * SEA_SPEED;\n    vec3 dir = normalize(vec3( (fragCoord.xy-iMouse.xy)/iResolution.x, FOV )); \n\tvec3 ori;\n\tdrawImage(fragColor, ori, dir);\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    fragCoord.x-=iResolution.x*.25;//in VR fragCoord.x is in range (0,xRes/2) for both eyes\n    fragCoord.y-=iResolution.y*.5;\n    //do not draw perpheral pixels:\n    if (dot(fragCoord.xy,fragCoord.xy)>iResolution.x*iResolution.x*.05) discard; \n\tdrawImage(fragColor, fragRayOri, fragRayDir);\n}\n","name":"Image","description":"","type":"image"}]}