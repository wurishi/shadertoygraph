{"ver":"0.1","info":{"id":"3dXSWj","date":"1552178225","viewed":156,"name":"Orange Texture","username":"runouw","description":"Hopefully looks like an orange. Perhaps I can use this in something 3d.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["orange"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define smooth(a, b, t) a + (b - a) * t * t * (3.0 - 2.0 * t)\n\nfloat rnd1(vec2 s) {\n   return fract(sin(s.x * 10523.0 + s.y * 10492.0) * 10054.0);\n}\n\nfloat rnd2(vec2 st) {\n   vec2 tile = floor(st);\n   vec2 inTile = fract(st);\n\n   float tl = rnd1(tile);\n   float tr = rnd1(tile + vec2(1.0, 0.0));\n   float bl = rnd1(tile + vec2(0.0, 1.0));\n   float br = rnd1(tile + vec2(1.0, 1.0));\n\n    float t = smooth(tl, tr, inTile.x);\n   float b = smooth(bl, br, inTile.x);\n\n   return smooth(t, b, inTile.y);\n}\n\nfloat fbm(vec2 st) {\n   float r = 0.45;\n   float s = sin(r);\n   float c = cos(r);\n   mat2 rot = mat2(s, c, -c, s);\n\n   float f = 0.0;\n   float amp = 1.0;\n   for (int i = 0; i < 4; i++) {\n       st = rot * st;\n       st *= 2.0;\n       f += amp * rnd2(st);\n\n       amp *= 0.5;\n   }\n\n   return f / 1.875;\n}\n\nfloat voronoi(vec2 st, vec2 alignment) {\n   vec2 tile = floor(st);\n   vec2 inTile = fract(st);\n\n   float dis = 99.0;\n\n   for (int y = -1; y < 2; y++) {\n       for (int x = -1; x < 2; x++) {\n           vec2 xy = vec2(x, y);\n\n           vec2 t = vec2(rnd1(tile + xy) * 805.0, rnd1(tile + xy + 1515.135) * 845.0);\n           vec2 p = sin(t) * alignment * 0.5 + 0.5;\n\n           // vec2 p = vec2(rnd1(tile + xy), rnd1(tile + xy + 1515.135));\n\n           dis = min(dis, distance(p, inTile - xy));\n       }\n   }\n\n   return dis;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Normalized pixel coordinates (from 0 to 1)\n   vec2 uv = fragCoord/iResolution.xy;\n   uv.x -= 0.5;\n   uv.x *= iResolution.x / iResolution.y;\n   uv.x += 0.5;\n\n   // Time varying pixel color\n   vec3 col = vec3(0.0);\n\n   vec2 p = uv - 0.5;\n    \n   // Outside texture\n   vec3 orangeTexture = vec3(1.0, 0.7, 0.2);\n    \n   float tVoronoi = 1.0 - pow(voronoi(p * vec2(24.35), vec2(1.0)), 2.4);\n   float tFbm = pow(fbm(p * vec2(15.0)), 2.3);\n    \n   orangeTexture += (tVoronoi * 0.5 + 0.2) * (0.2 + 0.6 * tFbm);\n   \n   // Orange in polar coordinates\n   vec2 polar = vec2(atan(p.y, p.x), length(p));\n\n   float veins = 0.0;\n\n   vec2 p2 = polar;\n   p2.x *= 0.44;\n\n   float domain0 = fbm(uv * 3.5);\n   float domain = fbm(uv * 12.0);\n\n   veins += 0.4 * pow(voronoi(p2 * vec2(4.35, 1.5) + vec2(domain0 * 0.82, 0.0), vec2(0.2)) + 0.53, 13.0); // cells\n   veins += 0.6 * pow(voronoi(p2 * 17.0 + vec2(domain * 1.2, 0.0), vec2(1.0)) + 0.35, 3.0); // bigger cells\n\n   col += mix(vec3(228.0/255.0, 171.0/255.0, 0.0), vec3(0.9, 0.69, 0.0), polar.y * 2.0);\n   col = mix(col, vec3(237.0/255.0, 209.0/255.0, 65.0/255.0), veins);\n\n   float ringSize = 0.29;\n   float ringOffset = 0.7;\n\n   float ringY = ((polar.y * 2.0 - ringOffset)) / ringSize;\n\n   ringY = 1.0 - ringY;\n   ringY += ringY * 1.45 * pow(fbm(abs(polar * 1.7)), 1.0);\n   ringY = 1.0 - ringY;\n   ringY += 0.45 * pow(fbm(abs(polar)), 1.0);\n\n   float ring = clamp(pow(max(ringY + 1.0, 0.0), 22.0), 0.0, 1.0);\n   float outside = clamp(pow(max(max(ringY, 0.0), 0.0), 100.0), 0.0, 1.0);\n\n   vec3 ringColor = mix(vec3(1.0, 0.8, 0.7), vec3(1.0, 1.0, 1.0), ringY * 2.0);\n   ringColor = mix(ringColor, vec3(1.0, 0.7, 0.2), clamp(ringY * 3.0 - 1.4, 0.0, 1.0));\n\n   ringColor += pow(fbm(uv * 14.0), 3.0) * 0.3;\n\n   float center = clamp(1.0 - pow(6.7 * polar.y + 0.6 * fbm(abs(polar) * vec2(1.4, 3.0)), 17.0), 0.0, 1.0);\n   float centerCut = clamp(1.0 - pow(13.5 * polar.y + 0.6 * fbm(abs(polar) * vec2(1.4, 3.0)), 17.0), 0.0, 1.0);\n   float centerCut2 = clamp(1.0 - pow(15.5 * polar.y + 0.9 * fbm(abs(polar) * vec2(0.6, 6.0)), 17.0), 0.0, 1.0);\n\n   col += 0.4 * mix(col * center, vec3(1.0), center);\n   col = mix(col, vec3(1.0, 0.7, 0.3), centerCut);\n   col = mix(col, vec3(1.0, 1.0, 0.8), centerCut2);\n\n   col = mix(col, ringColor, ring);\n   col = mix(col, orangeTexture, outside);\n\n   // Output to screen\n   fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}