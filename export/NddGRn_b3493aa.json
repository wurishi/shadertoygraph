{"ver":"0.1","info":{"id":"NddGRn","date":"1629009344","viewed":42,"name":"More Feedback","username":"tarnith","description":"Fork of a previous shader of mine with a polar zoom inspired by https://www.shadertoy.com/view/stSXDV https://www.osar.fr/notes/logspherical/\n","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["feedback","2dsdf"],"hasliked":0,"parentid":"sd33zr","parentname":"Fork B&W Feedback"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define Kaleidoscope true\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = gl_FragCoord.xy/iResolution.xy;\n    uv -= vec2(.5);\n    \n    if(Kaleidoscope){\n    uv = vec2(log(length(uv)), atan(uv.y, uv.x));\n    uv *= 1./PI;\n    //uv = fract(uv) - 0.5;\n    uv.x -= iTime*.1;\n    }\n    \n    uv += vec2(.5);\n    fragColor = texture(iChannel0,uv); \n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Thanks FabriceNeyret2 for the better smoothstep\n#define S(r) smoothstep(0., -20./iResolution.y,r) \n#define PI 3.14159\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) /iResolution.y;\n    vec2 pos = vec2(log(length(uv)), atan(uv.y, uv.x));\n    pos *= 1./PI;\n    pos = fract(pos) - 0.5;   \n    uv = pos;\n    uv.x -= iTime/5. + 5700.;\n    \n\tfloat col = 0.;\n\tvec2 fractionalUV = fract( uv*8.)-.5;\n\tfloat calcOutput = 0.;             \n    float t = iTime*2.;                 \n    for (float y=-1.; y<=1.; y++){      \n        for (float x=-1.; x<=1.; x++){\n            vec2 offset = vec2(x, y);  \n\t\t\tfloat d = length(fractionalUV+offset);  \n\t\t\tfloat r = mix(.3, .5, sin((t)+length(sin(uv+(fractionalUV)))*(sin(t*.3)*20.+20.))*.5+.5*d);\n         \tcalcOutput += S(d-r);\n            col = calcOutput;\n\n        }\t\n\t}\n\tvec4 color = vec4(vec3(col), 1.0);\n    vec2 texuv = fragCoord.xy / iChannelResolution[0].xy;\n    texuv += vec2(-.5);\n    texuv *= 1.15;\n    texuv += vec2(+.5);\n    vec2 postex = vec2(log(length(texuv)), atan(texuv.y, texuv.x));\n    postex *= 1./PI;\n    postex = fract(pos) - 0.5;   \n    texuv = postex;\n    texuv.x -= iTime/5.;\n    \n    \n    vec4 feedback = texture(iChannel0,texuv);\n    fragColor = max(color,(feedback*(sin(iTime)*.5+.5)));\n    \n \n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}