{"ver":"0.1","info":{"id":"tllyDj","date":"1593148811","viewed":359,"name":"Chocolate package","username":"gaz","description":"inspired https://www.shadertoy.com/view/llGXDR","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat lpNorm(vec3 p, float n)\n{\n\tp = pow(abs(p), vec3(n));\n\treturn pow(p.x+p.y+p.z, 1.0/n);\n}\n\n//Fractal Parameters\n#define SCALE -2.8\n#define MR2 0.3\n#define S_VEC  vec4(SCALE,SCALE,SCALE,abs(SCALE))/MR2\n\nfloat map(vec3 p){\n    p.xy *= rot(iTime*0.2);\n    p.yz *= rot(iTime*0.1);\n    vec4 q = vec4(p,1), q0 = q; \n    for (int i=0; i<10; i++) {\n        q.xyz = clamp(q.xyz, -1.0, 1.0) * 2.0 - q.xyz;\n        float r2 = pow(lpNorm(q.xyz,16.0),2.0);\n        q *= S_VEC*clamp(max(MR2/r2, MR2), 0.0, 0.9);\n        q += q0*0.5;\n    }\n    return 0.8*length(q.xyz)/q.w - 0.005;\n}\n\n\nvec3 calcNormal(vec3 pos){\n  vec2 e = vec2(1,-1) * 0.002;\n  return normalize(\n    e.xyy*map(pos+e.xyy)+e.yyx*map(pos+e.yyx)+ \n    e.yxy*map(pos+e.yxy)+e.xxx*map(pos+e.xxx)\n  );\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<50;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<0.001) return t;\n        if (t>=far) return far;\n    }\n    return far;\n}\n\nfloat calcShadow( vec3 light, vec3 ld, float len ) {\n\tfloat depth = march( light, ld, 0.0, len );\t\n\treturn step( len - depth, 0.01 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord* 2.0 - iResolution.xy) / iResolution.y;\n    vec3 ro = vec3(0,0,4.5);\n    vec3 rd = normalize(vec3(uv,-2.0));\n    vec3 col = vec3(0);\n\tconst float maxd = 10.0;\n    float t = march(ro,rd,0.0,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=vec3(0.9,0.3,0.2)+cos(p*0.5)*0.5+0.5;\n        vec3 n = calcNormal(p);      \n\t\tvec3 lightPos=vec3(3);\n    \tvec3 li = lightPos - p;\n\t\tfloat len = length( li );\n\t\tli /= len;\n\t\tfloat dif = clamp(dot(n, li), 0.0, 1.0);\n        float sha = calcShadow( lightPos, -li, len );\n        col *= max(sha*dif, 0.2);\n        float rimd = pow(clamp(1.0 - dot(reflect(-li, n), -rd), 0.0, 1.0), 2.5);\n\t\tfloat frn = rimd+2.2*(1.0-rimd);\n    \tcol *= frn*0.8;\n        col *= max(0.5+0.5*n.y, 0.0);\n        col *= exp2(-2.*pow(max(0.0, 1.0-map(p+n*0.3)/0.3),2.0));\n        col += vec3(0.1,0.4,0.9)*pow(clamp(dot(reflect(rd, n), li), 0.0, 1.0), 20.0);\n    }\n    fragColor.xyz = col;\n}","name":"Image","description":"","type":"image"}]}