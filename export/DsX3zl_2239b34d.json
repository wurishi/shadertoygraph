{"ver":"0.1","info":{"id":"DsX3zl","date":"1666610793","viewed":56,"name":"Exercise 7 - Ilia Esmaili Poor","username":"IEP","description":"Practice shader for computer graphics course.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 spherePos = vec3(0,0,-2);\nconst float sphereRadius = 1.0f;\nfloat SDF(vec3 point)\n    {\n        return length(point - spherePos) - sphereRadius;\n    }\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect_ratio = iResolution.x / iResolution.y;\n    // Rescale x and y to a range between -1 and 1 and set z to -1\n    vec3 rd = vec3(uv * 2.f - 1.f, -1.0);\n    // Scale the x-axis by the aspect ratio\n    rd.x *= aspect_ratio;\n    // Normalize the ray direction\n    rd = normalize(rd);\n    \n    float t = 0.0;\n    bool hitSphere = false;\n    float groundHeight = -0.65f;\n    bool hitGround = false;\n    vec3 p;\n    vec3 ro = vec3(0,0,0);\n    float epsilon = 0.001f;\n    vec3 finalColor = vec3(0,0.7f,0.95f);\n    vec3 fogColor = vec3(0,0.7f,0.95f);\n    float fogIntensity = 0.075f;\n    \n    \n    for (int i = 0; i < 500; ++i)\n    {\n        p = ro + t * rd;\n        float d = SDF(p);\n        \n        if (d < epsilon)\n        {\n            finalColor = vec3(1,0.5,0);\n            break;\n        }\n        float g = p.y - groundHeight;\n        \n        if (g < epsilon)\n        {\n            finalColor = vec3(0,0.75,0);\n            break;\n        }\n        t = t + min(d,g);\n    }\n    float fog = exp(-fogIntensity * length(ro - p));\n    finalColor = finalColor * fog + fogColor * (1.0f - fog);   \n    // Output to screen\n    fragColor = vec4(finalColor,0);\n}","name":"Image","description":"","type":"image"}]}