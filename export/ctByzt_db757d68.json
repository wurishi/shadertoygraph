{"ver":"0.1","info":{"id":"ctByzt","date":"1692218738","viewed":39,"name":"Lattice2","username":"tancredi","description":"a test about hexagonal lattice","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hexagonallattice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185\n\n#define K 60.*sin(iTime/8.)\n\n#define omega 1.5\n\n#define to_lattice(st) inverse(mat2(1.,0.,.5,sqrt(3.)*.5))*st\n\nconst float tauthird = TAU/3.;\n\nvec2 rotate(float alpha, vec2 st) {\n    float c = cos(alpha);\n    float s = sin(alpha);\n    return mat2(c,-s,s,c)*st;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy*.5)/iResolution.y;\n    \n    \n    uv = to_lattice(uv);\n    \n    vec2 uv_i = floor(uv * K);\n    vec2 uv_f = fract(uv * K);\n    \n    \n    if (uv_f.x+uv_f.y > 1.)\n        uv_f = 1. - uv_f;\n    \n    // carino\n    float t = smoothstep(.4,.8,length(uv_f)+.4*abs(sin(iTime/2.)));\n    uv_f = mix((1. - uv_f)*.2,uv_f,t);\n    \n    uv_f = rotate(tauthird * (sin(omega*iTime/8.*uv_i.x)+cos(omega*iTime/8.*uv_i.y)+omega*iTime/3.),uv_f);\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+1.5*uv_f.xyx+vec3(0,2,4));\n    \n    // col *= smoothstep(.2,.1,abs(uv_f.x-uv_f.y));\n    t = smoothstep(.3,.0,abs(uv_f.x-uv_f.y));\n    col = mix(col, (1.-col)*.5, sin(iTime*.3)*t);\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}