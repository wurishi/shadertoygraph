{"ver":"0.1","info":{"id":"Xd3yDB","date":"1519948386","viewed":277,"name":"mobius kifs","username":"wyatt","description":"Raymarching is fun","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","mobius","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rot (vec3 s) {\n    float \tsa = sin(s.x),\n        ca = cos(s.x),\n        sb = sin(s.y),\n        cb = cos(s.y),\n        sc = sin(s.z),\n        cc = cos(s.z);\n    return mat3 (\n        vec3(cb*cc, -cb*sc, sb),\n        vec3(sa*sb*cc+ca*sc, -sa*sb*sc+ca*cc, -sa*cb),\n        vec3(-ca*sb*cc+sa*sc, ca*sb*sc+sa*cc, ca*cb)\n    );\n}\nmat3 mm;\nvec4 light;\nvec3 grp;\nfloat ui;\nfloat map (vec3 p) {\n    float d = length(p-light.xyz)-light.w;\n    d = min(d,max(30.-p.z,0.));\n    grp=p*0.01;\n    \n    p = mm*p;\n    for (int i = 0; i < 5; i++) {\n        float t = abs(p.y);\n        p.y = p.x;\n        p.x = t;\n        p = mm*(p-.1);\n    }\n    float q = 5.;\n    float a = 1.5*((atan(p.x,p.z)))+0.05*ui;\n    mat2 mn = mat2(sin(a),cos(a),-cos(a),sin(a));\n    vec2 u = mn*vec2(length(p.xz)-2.,p.y);\n    float d1 = d;\n    vec2 w = max(abs(u)-vec2(0.1,0.5),0.);\n    d = min(d,length(w)-0.1-0.01*(sin(50.*(dot(u,u))+sin(20.*atan(p.x,p.z)))));\n    if (d1 != d) grp = vec3(u,atan(p.x,p.z));\n    return d;\n}\nvec3 norm (vec3 p) {\n    vec2 e = vec2 (.001,0.);\n    return normalize(vec3(\n        map(p+e.xyy) - map(p-e.xyy),\n        map(p+e.yxy) - map(p-e.yxy),\n        map(p+e.yyx) - map(p-e.yyx)\n    ));\n}\nvec3 dive (vec3 p, vec3 d) {\n    for (int i = 0; i < 35; i++) {\n        p += d*map(p);\n    }\n    return p;\n}\nvec3 color (vec3 no, vec3 p) {\n    return vec3(.8+0.2*(sin(30.*p*p.zxy+no)*0.5+0.5))*0.9;\n}\nvoid mainImage (out vec4 fragColor, vec2 vv) {\n    vec2 v = (vv/iResolution.xy)*2.-1.;\n    v.x *= iResolution.x/iResolution.y;\n    ui = 30.*iTime;\n    vec3 r = vec3(0,0,-15.);\n    light = vec4(10.*sin(0.005*ui),2,-23,1);\n    vec3 d = normalize(vec3(v,3.));\n    mm = rot((0.005*ui)+vec3(1,2,3));\n    vec3 p = dive(r,d);\n    d = normalize(light.xyz-p);\n    vec3 no = norm(p);\n    vec3 col = color(no,grp);\n    vec3 bounce = dive(p+0.01*d,d);\n    col *= dot(no, normalize(light.xyz-p));\n    if (length(bounce-light.xyz) > light.w+0.1) col *= 0.2;\n    if (length (p-r)>4e2) col *= 0.;\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}