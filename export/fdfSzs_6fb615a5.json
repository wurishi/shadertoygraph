{"ver":"0.1","info":{"id":"fdfSzs","date":"1619024135","viewed":132,"name":"Ripple Splatter","username":"AntoninHS","description":"ripples","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["ripples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Scale(vec2 UV, vec2 PivotPoint, float scale, float minscale, float maxscale){\n    UV-=PivotPoint;\n    float shapescale = 1.0/(max(mix(minscale, maxscale, scale),0.00001));\n    UV *= shapescale;\n    UV += PivotPoint;\n    return UV;\n}\n\nfloat Random21(vec2 uv){\n    return fract(sin(dot(uv, vec2(12.9897, 78.233)))*43758.55);\n}\nfloat Random11(float u){\n    return fract(sin(dot(vec2(u,u), vec2(12.9897, 78.233)))*43758.55);\n}\n\nvec3 OffsetUV(vec2 ClampedUV, vec2 IntUV, vec2 Offset2D){\n    IntUV += Offset2D;\n    float rand13 = Random21(IntUV+vec2(25,48));\n    vec2 timeOffsetRand = Random11(floor(rand13 + iTime))+IntUV;\n    float rand11 = Random21(timeOffsetRand);\n    float rand12 = Random21(timeOffsetRand+vec2(17,33));\n    vec2 rand21 = vec2(rand11, rand12);\n    \n    vec2 NewUV = ClampedUV - Offset2D;\n    NewUV -= rand21;\n    \n    \n    float newscale = cos(iTime + rand11 * 6.28318530718)*0.5 + 0.5;\n    \n    NewUV = Scale(NewUV, vec2(0.5,0.5), float(0), float(1), newscale);\n    \n    \n    vec3 UVRand = vec3(NewUV, rand13);\n    return UVRand;\n\n\n}\n\nfloat RippleSplatter(vec3 UVRand, float Time){\n    vec2 UV = UVRand.xy;\n    UV += vec2(0.5,0.5);\n    UV += clamp(UV, vec2(-0.5,-0.5), vec2(0.5,0.5));\n    float Cone = distance(UV, vec2(0.0,0.0));\n    Cone *= 2.0;\n    Cone = 1.0 - Cone;\n    \n    \n    float CycleTime = fract(UVRand.z + Time);\n    float AnimatedCone = Cone + CycleTime;\n    float RippleArea = clamp(AnimatedCone, 0.0,1.0) - clamp((AnimatedCone-0.5)*1.5, 0.0,1.0);\n    float ActivateRipples = sin(CycleTime * 3.141593);\n    \n    //Change value here to control the ripple amount\n    float Ripples = AnimatedCone * 18.0;\n    \n    Ripples = cos(Ripples);\n    \n    float RippleThickness = -0.5;\n    \n    Ripples += RippleThickness;\n    \n    Ripples *= ((1.0/RippleThickness)/(1.0/RippleThickness + 1.0)) * RippleArea * ActivateRipples;\n    Ripples = clamp(Ripples, 0.0,1.0);\n    \n    //density\n    float RippleDensity = 1.0;\n    float RandomMask = floor(UVRand.z + Time)+ UVRand.z * 512.0;\n    RandomMask = step(Random21(vec2(RandomMask, RandomMask)), RippleDensity);\n    \n    Ripples *= Cone * RandomMask;\n    \n    Ripples = clamp(Ripples, 0.0,1.0);\n    \n\n    return Ripples;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;\n    vec2 TileUV = uv*5.0;\n    vec2 IntUV = floor(TileUV);\n    vec2 ClampedUV = TileUV - IntUV;\n    \n    \n    vec3 Offset00 = OffsetUV(ClampedUV, IntUV, vec2(0,0));\n    vec3 Offset01 = OffsetUV(ClampedUV, IntUV, vec2(0,1));\n    vec3 Offset10 = OffsetUV(ClampedUV, IntUV, vec2(1,0));\n    vec3 Offset11 = OffsetUV(ClampedUV, IntUV, vec2(1,1));\n    \n    \n    float Ripple00 = RippleSplatter(Offset00, iTime);\n    float Ripple01 = RippleSplatter(Offset01, iTime);\n    float Ripple10 = RippleSplatter(Offset10, iTime);\n    float Ripple11 = RippleSplatter(Offset11, iTime);\n    \n    float Ripples = max(max(Ripple00, Ripple01), max(Ripple10, Ripple11))*5.0;\n\n\n    // Output to screen\n    fragColor = vec4(Ripples);\n}","name":"Image","description":"","type":"image"}]}