{"ver":"0.1","info":{"id":"ddyyWz","date":"1695973770","viewed":96,"name":"tear of the ocean ( jewelry )","username":"chenxianming","description":"sing for the tear.","likes":7,"published":1,"flags":40,"usePreview":0,"tags":["ocean","jewelry","tear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture( iChannel0, uv ).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define I iResolution\n#define PI 3.1415\n#define TAU 2. * PI\n#define A( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n\nfloat rep(inout vec2 p, float rep) \n{\n\n    float an = TAU/rep;\n    \n    float fa = (atan(p.y,p.x)+an*0.5)/an;\n    float ia = floor( fa );\n    \n    float sym = an*ia;\n    \n    p *= A(sym);\n\n    return ia;\n}\n\nvec2 rep( inout vec2 p, vec2 s, float c ){\n\n    vec2 r = round( p / -s );\n\n    p = p - s * clamp(round(p/s),-c,c);\n    \n    return r;\n}\n\nfloat smin(float a, float b, float r)\n{\n  float h = clamp(.5 + .5 * (b - a) / r, 0., 1.);\n  return mix(b, a, h) - r * h * (1. - h);\n}\n\nfloat f( vec3 p ){\n    \n    p.yz *= A( PI * -.13 );\n    \n    p.x += cos( iTime ) * .05;\n    \n    float count = 10.;\n    \n    p.xz *= A( p.y * 9. + iTime * 5. );\n    \n    float a = rep( p.xz, count );\n    \n    \n    vec2 re = rep( p.xy, vec2( 0., .1 ), 6. );\n    p.x += ( cos( iTime * -abs(re.y - 6.) * .5 ) ) * .01;\n    \n    p.x -= 1.5;\n    \n    p *= re.y * .1;\n    \n    \n    \n    // noise\n    p.x += cos(p.z) * .015;\n    p.y += sin(p.z) * .015;\n    \n    return max(length( p.xy ) - .05, abs( p.z ) - 1.);\n}\n\n\nfloat calcTear( vec3 p ){\n    \n    p *= 1.1;\n    p.y += .3;\n    \n    p.xz *= A( cos( iTime * 2. ) * .1 );\n    p.x += cos( iTime * 2. ) * .02;\n    p.z += sin( iTime * 2. ) * .02;\n    \n    p.y -= .1;\n    \n    p.yz *= A( PI * -.15 );\n\n    float d = 5.;\n    \n    p.xz *= A( PI * .9 );\n    \n    float py = p.y;\n    \n    if( py < 0. ){\n        py *= 3.;\n    }\n    \n    if( py <= -1. ){\n        py = -1.;\n    }\n    \n    py = abs( pow( py, 2. ) ) - 1.;\n    py = abs( py );\n    \n    d = max( length( p.xz + vec2( 0.25 * pow( p.y, 2. ) + 0.125 * p.x + -0.125 * p.y, 0. ) ) - .17 * py, abs( p.y ) - 1. );\n    \n    d = max( d, -( p.y + .15 ) );\n\n    d = smin( d, \n        (length(p + vec3( .0, .1, 0. )) - .3 ),\n        .25\n    );\n\n    return d;\n}\n\n\nfloat df( vec3 p ){\n    return min(\n        f( p ),\n        length( p ) - .001\n    );\n}\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = (V * 2.0 - I.xy) / I.y, u2 = V / I.xy;\n    \n    vec3 c, p, o = vec3( 0., 0., -10. ), r = vec3( u * .1, 1. );\n    float t, t2, d, i, dp, e = sqrt( 1e-4 );\n    \n    c += vec3( 1, 3, 7 ) * .01;\n    \n    for( ; i < 64.; i++ )\n        p = o + r * t,\n        d = df( p ),\n        dp = ( 1. - abs( d ) / e ),\n        c += ( dp > 0. ) ? .15 * dp / t : 0.,\n        t += max( abs( d ) * .77778, e );\n    \n    p = vec3( 0. );\n    e = sqrt(1e-5),\n    d = 0.,\n    i = 0.;\n\n    for( ; i < 64.; i++ )\n        p = o + r * t2,\n        d = calcTear( p ),\n        dp = ( 1. - abs( d ) / e ),\n        c += ( dp > 0. ) ? (.25 * dp / t2) + mod( t, 2.5 ) * .02 : 0.,\n        t2 += max( abs( d ) * .55556, e );\n        \n    c = c * .4 + texture( iChannel0, u2 ).rgb * .6; // af blur\n    // Output to screen\n    U = vec4(c,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\n    music box ef for GPU sound\n    melody author unknow\n*/\n\n#define DO3 131\n#define RE3 147\n#define MI3 165\n#define FA3 175\n#define SO3 196\n#define LA3 220\n#define SI3 233\n\n#define DO4 262\n#define RE4 294\n#define MI4 312\n#define FA4 330\n#define SO4 392\n#define LA4 440\n#define SI4 494\n\n#define DO5 523\n#define RE5 587\n#define MI5 659\n#define FA5 698\n#define SO5 783\n#define LA5 880\n#define SI5 988\n\n\n#define DO6 1046\n#define RE6 1175\n#define MI6 1319\n#define FA6 1397\n#define SO6 1568\n#define LA6 1760\n#define SI6 1976\n\n\n#define addSound( timeline, pos, f, t ) timeline += ( t > pos ) ? sin(6.2831*float(f)*t)*exp(-3.0*(t - pos)) : 0.\n\n\nvec2 mainSound( int samp, float time )\n{\n\n    float s = 0.;\n    \n    float t = fract( time * 16. / 140. ) * 33.;\n    \n    addSound( s, 1., MI5, t );\n    addSound( s, 2., MI5, t );\n    addSound( s, 2.5, MI5, t );\n    addSound( s, 3., MI5, t );\n    addSound( s, 4., MI6, t );\n    addSound( s, 5., RE6, t );\n    addSound( s, 6., SI5, t );\n    addSound( s, 7., MI5, t );\n    \n    \n    addSound( s, 1., MI3, t );\n    addSound( s, 3., SO3, t );\n    addSound( s, 3., SI3, t );\n    addSound( s, 5., MI3, t );\n    addSound( s, 6., SO3, t );\n    addSound( s, 7., SI3, t );\n    \n    \n    addSound( s, 9., MI5, t );\n    addSound( s, 10., MI5, t );\n    addSound( s, 10.5, MI5, t );\n    addSound( s, 11., MI5, t );\n    addSound( s, 12., MI6, t );\n    addSound( s, 13., RE6, t );\n    addSound( s, 14., SI5, t );\n    addSound( s, 15., MI5, t );\n    \n    \n    addSound( s, 9., MI3, t );\n    addSound( s, 11., SO3, t );\n    addSound( s, 11., SI3, t );\n    addSound( s, 13., MI3, t );\n    addSound( s, 14., SO3, t );\n    addSound( s, 15., SI3, t );\n    \n    \n    addSound( s, 17., MI5, t );\n    addSound( s, 18., MI5, t );\n    addSound( s, 18.5, MI5, t );\n    addSound( s, 19., MI5, t );\n    addSound( s, 20., MI6, t );\n    addSound( s, 21., RE6, t );\n    addSound( s, 22., SI5, t );\n    addSound( s, 23., SO6, t );\n    \n\n    addSound( s, 17., DO3, t );\n    addSound( s, 19., DO4, t );\n    addSound( s, 19., MI4, t );\n    addSound( s, 21., SO3, t );\n    addSound( s, 23., SO4, t );\n    addSound( s, 23., SI4, t );\n    \n    \n    addSound( s, 25., RE5, t );\n    addSound( s, 26., RE5, t );\n    addSound( s, 26.5, RE5, t );\n    addSound( s, 27., RE5, t );\n    addSound( s, 28., RE6, t );\n    addSound( s, 29., MI5, t );\n    addSound( s, 30., DO4, t );\n    addSound( s, 31., FA5, t );\n\n\n    addSound( s, 25., RE3, t );\n    addSound( s, 27., RE4, t );\n    addSound( s, 27., FA4, t );\n    \n    addSound( s, 29., MI3, t );\n    addSound( s, 31., SO4, t );\n    addSound( s, 31., SI4, t );\n    \n    \n    // A 440 Hz wave that attenuates quickly overt time\n    return vec2( s );\n}","name":"Sound","description":"","type":"sound"}]}