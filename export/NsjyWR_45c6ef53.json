{"ver":"0.1","info":{"id":"NsjyWR","date":"1652172916","viewed":79,"name":"reaction_diffusion ","username":"graygoose","description":"gray-scott","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["rd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See Common for D-R configuration.\n// All buffers are just extra passes of D-R.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 surface = texelFetch(iChannel0, ivec2(fragCoord), 0).xyz;\n\n    vec3 col = surface.xyz;\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Gray-Scott Diffusion Reaction Config\n//     Reference: http://www.karlsims.com/rd.html\n\n#define FEED_RATE 0.0515\n#define KILL_RATE 0.0635\n#define DIFFUSION_RATE_A 1.\n#define DIFFUSION_RATE_B .5\n#define dT 1.0\n\n\nvec4 laplacian(in vec2 pos){\n    vec4 sum = vec4(0.);\n    float weight;\n    \n    for(int i=-1; i<=1; i++) {\n        for(int j=-1; j<=1; j++) {\n            weight = (i==0 && j==0) ? -1. : (abs(i-j) == 1 ? .2 : .05);\n            \n            sum += weight * texelFetch(iChannel0, ivec2(wrap(pos + vec2(i, j), iResolution.xy)), 0);\n        }\n    }\n    \n    return sum;\n}\n\n\nvec2 diffuse_react(in vec2 pos){\n    vec2 fluids = texelFetch(iChannel0, ivec2(pos), 0).xz;\n    float A = fluids.x, B = fluids.y;\n    \n    #ifdef MOUSE\n        float FR = muv.y*0.05;\n        float KR = muv.x*0.05+0.025;\n        float F = FR * (1. - A);\n        float K = (KR + FR) * B;\n    #else\n        float F = FEED_RATE * (1. - A);\n        float K = (KILL_RATE + FEED_RATE) * B;\n    #endif\n\n    vec4 avg = laplacian(pos);\n    float DA = DIFFUSION_RATE_A * avg.x;\n    float DB = DIFFUSION_RATE_B * avg.z;\n\n    float RE = A * B * B; \n    \n    return vec2(clamp(A + (DA - RE + F) * dT, 0., 1.), \n                clamp(B + (DB + RE - K) * dT, 0., 1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 col = vec4(0.);\n\n    float nA = 0., nB = 0.;\n    if (iFrame == 0) {\n        nA = 1.; nB = 0.;\n        if (150. < p.x && p.x < 200. && 150. < p.y && p.y < 200.) nB = 1.;\n        if (350. < p.x && p.x < 400. && 200. < p.y && p.y < 250.) nB = .8;\n    }\n\n    #ifdef MOUSE\n        if (AREA_CLICKED(7.)) nB += .05;\n        draw_point(col, p, iMouse.xy, 1.);\n    #endif\n      \n    col.xz += diffuse_react(p) + vec2(nA, nB);\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Uncomment for mouse parameterizing of D-R:\n//#define MOUSE\n\n// mainImage helpers \n#define p fragCoord.xy\n#define res iResolution.xy\n#define uv (p / res)\n#define muv (iMouse.xy / res)\n\n// Math Util\nfloat cms(vec2 c) { \n    return c.x * c.x + c.y * c.y; \n}\n\nfloat norm(float value, float rmin, float rmax, float tmin, float tmax) {\n    return ((value - rmin) / (rmax - rmin)) * (tmax - tmin) + tmin;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\n// Screen\n#define AREA_CLICKED(r) (cms(iMouse.xy - fragCoord.xy) < r) && sign(iMouse.z) == 1.\n\nvec2 wrap(in vec2 pos, vec2 maxres) {\n    if (pos.x > maxres.x) {\n        pos.x = mod(pos.x, maxres.x);\n    } else if (pos.x < 0.) {\n        pos.x = maxres.x + pos.x;\n    }\n    if (pos.y > maxres.y) {\n        pos.y = mod(pos.y, maxres.y);\n    } else if (pos.y < 0.) {\n        pos.y = maxres.y + pos.y;\n    }\n    \n    return pos;\n}\n\nvoid draw_point(inout vec4 col, vec2 pos, vec2 pt, float r){\n    col = cms(pos - pt) < r ? vec4(1., 1., 1., 0.) : col;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Gray-Scott Diffusion Reaction Config\n//     Reference: http://www.karlsims.com/rd.html\n\n#define FEED_RATE 0.0515\n#define KILL_RATE 0.0635\n#define DIFFUSION_RATE_A 1.\n#define DIFFUSION_RATE_B .5\n#define dT 1.0\n\n\nvec4 laplacian(in vec2 pos){\n    vec4 sum = vec4(0.);\n    float weight;\n    \n    for(int i=-1; i<=1; i++) {\n        for(int j=-1; j<=1; j++) {\n            weight = (i==0 && j==0) ? -1. : (abs(i-j) == 1 ? .2 : .05);\n            \n            sum += weight * texelFetch(iChannel0, ivec2(wrap(pos + vec2(i, j), iResolution.xy)), 0);\n        }\n    }\n    \n    return sum;\n}\n\n\nvec2 diffuse_react(in vec2 pos){\n    vec2 fluids = texelFetch(iChannel0, ivec2(pos), 0).xz;\n    float A = fluids.x, B = fluids.y;\n    \n    #ifdef MOUSE\n        float FR = muv.y*0.05;\n        float KR = muv.x*0.05+0.025;\n        float F = FR * (1. - A);\n        float K = (KR + FR) * B;\n    #else\n        float F = FEED_RATE * (1. - A);\n        float K = (KILL_RATE + FEED_RATE) * B;\n    #endif\n\n    vec4 avg = laplacian(pos);\n    float DA = DIFFUSION_RATE_A * avg.x;\n    float DB = DIFFUSION_RATE_B * avg.z;\n\n    float RE = A * B * B; \n    \n    return vec2(clamp(A + (DA - RE + F) * dT, 0., 1.), \n                clamp(B + (DB + RE - K) * dT, 0., 1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 col = vec4(0.);\n\n    float nA = 0., nB = 0.;\n    if (iFrame == 0) {\n        nA = 1.; nB = 0.;\n        if (150. < p.x && p.x < 200. && 150. < p.y && p.y < 200.) nB = 1.;\n        if (350. < p.x && p.x < 400. && 200. < p.y && p.y < 250.) nB = .8;\n    }\n\n    #ifdef MOUSE\n        if (AREA_CLICKED(7.)) nB += .05;\n        draw_point(col, p, iMouse.xy, 1.);\n    #endif\n      \n    col.xz += diffuse_react(p) + vec2(nA, nB);\n    fragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Gray-Scott Diffusion Reaction Config\n//     Reference: http://www.karlsims.com/rd.html\n\n#define FEED_RATE 0.0515\n#define KILL_RATE 0.0635\n#define DIFFUSION_RATE_A 1.\n#define DIFFUSION_RATE_B .5\n#define dT 1.0\n\n\nvec4 laplacian(in vec2 pos){\n    vec4 sum = vec4(0.);\n    float weight;\n    \n    for(int i=-1; i<=1; i++) {\n        for(int j=-1; j<=1; j++) {\n            weight = (i==0 && j==0) ? -1. : (abs(i-j) == 1 ? .2 : .05);\n            \n            sum += weight * texelFetch(iChannel0, ivec2(wrap(pos + vec2(i, j), iResolution.xy)), 0);\n        }\n    }\n    \n    return sum;\n}\n\n\nvec2 diffuse_react(in vec2 pos){\n    vec2 fluids = texelFetch(iChannel0, ivec2(pos), 0).xz;\n    float A = fluids.x, B = fluids.y;\n    \n    #ifdef MOUSE\n        float FR = muv.y*0.05;\n        float KR = muv.x*0.05+0.025;\n        float F = FR * (1. - A);\n        float K = (KR + FR) * B;\n    #else\n        float F = FEED_RATE * (1. - A);\n        float K = (KILL_RATE + FEED_RATE) * B;\n    #endif\n\n    vec4 avg = laplacian(pos);\n    float DA = DIFFUSION_RATE_A * avg.x;\n    float DB = DIFFUSION_RATE_B * avg.z;\n\n    float RE = A * B * B; \n    \n    return vec2(clamp(A + (DA - RE + F) * dT, 0., 1.), \n                clamp(B + (DB + RE - K) * dT, 0., 1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 col = vec4(0.);\n\n    float nA = 0., nB = 0.;\n    if (iFrame == 0) {\n        nA = 1.; nB = 0.;\n        if (150. < p.x && p.x < 200. && 150. < p.y && p.y < 200.) nB = 1.;\n        if (350. < p.x && p.x < 400. && 200. < p.y && p.y < 250.) nB = .8;\n    }\n\n    #ifdef MOUSE\n        if (AREA_CLICKED(7.)) nB += .05;\n        draw_point(col, p, iMouse.xy, 1.);\n    #endif\n      \n    col.xz += diffuse_react(p) + vec2(nA, nB);\n    fragColor = col;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Gray-Scott Diffusion Reaction Config\n//     Reference: http://www.karlsims.com/rd.html\n\n#define FEED_RATE 0.0515\n#define KILL_RATE 0.0635\n#define DIFFUSION_RATE_A 1.\n#define DIFFUSION_RATE_B .5\n#define dT 1.0\n\n\nvec4 laplacian(in vec2 pos){\n    vec4 sum = vec4(0.);\n    float weight;\n    \n    for(int i=-1; i<=1; i++) {\n        for(int j=-1; j<=1; j++) {\n            weight = (i==0 && j==0) ? -1. : (abs(i-j) == 1 ? .2 : .05);\n            \n            sum += weight * texelFetch(iChannel0, ivec2(wrap(pos + vec2(i, j), iResolution.xy)), 0);\n        }\n    }\n    \n    return sum;\n}\n\n\nvec2 diffuse_react(in vec2 pos){\n    vec2 fluids = texelFetch(iChannel0, ivec2(pos), 0).xz;\n    float A = fluids.x, B = fluids.y;\n    \n    #ifdef MOUSE\n        float FR = muv.y*0.05;\n        float KR = muv.x*0.05+0.025;\n        float F = FR * (1. - A);\n        float K = (KR + FR) * B;\n    #else\n        float F = FEED_RATE * (1. - A);\n        float K = (KILL_RATE + FEED_RATE) * B;\n    #endif\n\n    vec4 avg = laplacian(pos);\n    float DA = DIFFUSION_RATE_A * avg.x;\n    float DB = DIFFUSION_RATE_B * avg.z;\n\n    float RE = A * B * B; \n    \n    return vec2(clamp(A + (DA - RE + F) * dT, 0., 1.), \n                clamp(B + (DB + RE - K) * dT, 0., 1.));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec4 col = vec4(0.);\n\n    float nA = 0., nB = 0.;\n    if (iFrame == 0) {\n        nA = 1.; nB = 0.;\n        if (150. < p.x && p.x < 200. && 150. < p.y && p.y < 200.) nB = 1.;\n        if (350. < p.x && p.x < 400. && 200. < p.y && p.y < 250.) nB = .8;\n    }\n\n    #ifdef MOUSE\n        if (AREA_CLICKED(7.)) nB += .05;\n        draw_point(col, p, iMouse.xy, 1.);\n    #endif\n      \n    col.xz += diffuse_react(p) + vec2(nA, nB);\n    fragColor = col;\n}","name":"Buffer D","description":"","type":"buffer"}]}