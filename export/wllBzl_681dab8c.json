{"ver":"0.1","info":{"id":"wllBzl","date":"1597503417","viewed":81,"name":"Following Hexagon tutorial","username":"mightee_cactus","description":"https://www.youtube.com/watch?v=VmrIDyYiJBA","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\n// Learning hexagonal tiling by following tutorial\n// https://www.youtube.com/watch?v=VmrIDyYiJBA\n//\n\n\nfloat HexDist(vec2 p)\n{\n    p = abs(p);\n    // ratio for the slope of the hex size\n    float c = dot(p, normalize(vec2(1, 1.73)));\n    c = max(c, p.x);\n    \n    return c;\n}\n\n// Returns (?, dist to hex edge, hex_id.x, hex_id.y)\nvec4 HexCoord(vec2 p)\n{\n    // ratio for the slope of the hex size\n    vec2 ratio = vec2(1, 1.73);\n    vec2 h  = ratio * .5; \n\tvec2 a = mod(p, ratio) - h;\n    vec2 b = mod(p - h, ratio) - h;\n    \n    vec2 gv = dot(a,a) < dot(b,b) ? a : b;\n    \n    vec2 id = p - gv;\n    \n    float x = atan(gv.x, gv.y);\n    float y = .5 - HexDist(gv);\n    \n    return vec4(x, y, id.x, id.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //vec2 guv = fract(uv * 10.);\n    // inverting step, so it is (x, edge) instead of (edge, x)\n    //col += step(HexDist(uv), 0.1);\n    //col += step(HexDist(guv - 0.5)*0.3, 0.1);\n    //col.rg = HexCoord(uv * 5.).xy;\n    uv  *= 10.;\n    vec4 hc = HexCoord(uv);\n    \n    //col += smoothstep(0.03, 0.1, hc.y * sin(hc.z*hc.w + iTime));\n    // some experiments\n    //col += hc.w*0.1+.5; // moving waves illusion\n    col += smoothstep(0.03, 0.1, hc.y * sin(uv.y*uv.x*.5 + iTime*1.));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}