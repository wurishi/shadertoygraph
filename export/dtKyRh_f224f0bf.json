{"ver":"0.1","info":{"id":"dtKyRh","date":"1699958757","viewed":37,"name":"Beginner Function","username":"sarahannstarmer","description":"Beginner Shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Beginner Shader 3\" by sarahannstarmer. https://shadertoy.com/view/cttyRn\n// 2023-11-14 09:43:06\nfloat sdStar5(vec2 uv,  float r,  float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n   uv.x = abs(uv.x);\n   uv -= 2.0*max(dot(k1,uv),0.0)*k1;\n   uv -= 2.0*max(dot(k2,uv),0.0)*k2;\n   uv.x = abs(uv.x);\n    uv.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(uv,ba)/dot(ba,ba), 0.0, r );\n    return length(uv-ba*h) * sign(uv.y*ba.x-uv.x*ba.y);\n}\n\n// start draw horizontal line\nfloat HorizontalLine(vec2 uv, float xStart, float xEnd, float yValue){\nfloat d = length(uv - vec2 (clamp (uv.x, xStart, xEnd), yValue));\nfloat mask =  smoothstep(0.01,0.,d);\nreturn mask;\n}\n// end draw horizontal line\n\n// start draw vertical line\nfloat VerticalLine(vec2 uv, float yStart, float yEnd, float xValue){\nfloat d = length(uv - vec2 (xValue,clamp (uv.y, yStart, yEnd)));\nfloat mask =  smoothstep(0.01,0.,d);\nreturn mask;\n}\n//end draw vertical line\n\n//start dfine rotation matrix function\nmat2 RotationMatrix(float degreesAngle){\nfloat angle = degreesAngle *.01745; // convert to radians.\nmat2 rot = mat2(\ncos(angle), -sin(angle),\nsin(angle), cos(angle)\n);\nreturn rot; }// multiply uv by this\n//end define rotation matrix function\n\n//start define reflection matrix function\nmat2 ReflectionMatrix(float degreesAngle){\nfloat angle = degreesAngle *.01745; // convert to radians.\nmat2 flec = mat2(\ncos(angle*2.), sin(angle*2.),\nsin(angle*2.), -cos(angle*2.)\n);\nreturn flec; }// multiply uv by this\n//end define reflection matrix function\n\n//start fold // to fold screen add FoldVector to uv\nvec2 FoldVector(vec2 uv,float degreesAngle){\nfloat angle = degreesAngle *.01745; // convert to radians.\nvec2 n =  vec2(sin(angle), cos(angle))*min(0., dot(uv, vec2(sin(angle), cos(angle))))*2.;\nreturn n; \n}\n// end fold \n\n\n//start draw line at angle \nfloat AngledLine(vec2 uv,float degreesAngle){\nfloat angle = -degreesAngle *.01745; // convert to radians.\nvec2 n = vec2(sin(angle), cos(angle));\nfloat d = dot(uv,n); \nfloat mask = smoothstep(0.01,0.,abs(d));\nreturn mask;\n}\n//end draw line at angle \n\n// start circle function.\nfloat Circle(vec2 uv,vec2 center, float r, float blur){\nfloat d = length(uv-center);\nfloat c =smoothstep(r, r-blur,d);\nreturn c;\n}// end circle function.\n\n//start band function.\nfloat Band(float t, float start, float end, float blur){\nfloat step1 = smoothstep(start-blur,start+blur, t);\nfloat step2 = smoothstep(end+blur,end-blur, t);\nreturn step1*step2;\n}//end band function.\n\n//start rectamngle function.\nfloat Rectangle(vec2 uv, float left, float right, float bottom, float top, float blur){\nfloat step1 = smoothstep(left-blur,left+blur, uv.x);\nfloat step2 = smoothstep(right+blur,right-blur, uv.x);\nfloat step3 = smoothstep(bottom-blur,bottom+blur, uv.y);\nfloat step4 = smoothstep(top+blur,top-blur, uv.y);\nreturn step1*step2*step3*step4;\n}//end rectangle  function.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec3 col = vec3(1.,1.,1.);\nfloat mask = 0.;\n\nvec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\nuv *= 1.25;\n//uv.x goes from -1.1 t0 1.1 and uv.y \n\n/* \n\n //start example of for loop\nfor(float i = 0.0; i < 12.0; i += 1.0){\nuv*=RotationMatrix(30.);\nmask+=Circle(uv,vec2 (0.0,0.3), 0.1, 0.001);\n}\n//end example of for loop\n\n //start example of for loop\nfor(float i = 0.0; i < 12.0; i += 1.0){\nuv*=RotationMatrix(30.);\nmask-=Circle(uv,vec2 (0.0,0.3), 0.09, 0.001);\n}\n//end example of for loop\n\n*/\n\nuv*=RotationMatrix(30.);\nmask+= HorizontalLine(uv, -0.4, 0.4, 0.);\n// uv-= FoldVector(uv,-30.);\n//mask+=Circle(uv,vec2 (0.0,0.0), 0.2, 0.001);\n//mask += AngledLine(uv, 30.);\n// mask+= VerticalLine(uv, -0.4, 0.4, 0.);\n//mask += Rectangle(uv, -0.2,.2,-.2,.2,0.01);\n//col.rg+=uv;\ncol = col*mask;\n\n//float logo = sdStar5(uv, .34, .38);    \n//float visibleStar = smoothstep(1.5/iResolution.y, 0., logo);\n//col+= vec3( visibleStar);\n\nfragColor = vec4(col,1.0);\n\n}","name":"Image","description":"","type":"image"}]}