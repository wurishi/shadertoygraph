{"ver":"0.1","info":{"id":"McycDd","date":"1732844334","viewed":14,"name":"GLSL_TEST6","username":"changlezeng","description":"TEST6","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test6"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 定义结构体 pixelPlot，仅作为数据容器\nstruct pixelPlot {\n    vec2 BlockID; // 存储 BlockID\n};\n\n// 全局 noise 函数，计算噪声值\nfloat noise(vec2 BlockID) {\n    return fract(sin(dot(BlockID, vec2(12.34, 56.78))) * 91011.1213);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // 初始化 UV 坐标和缩放因子\n    vec2 UV = fragCoord.xy / iResolution.xy; // 假设 uvinput = fragCoord.xy / iResolution.xy\n    float Scale = 10.0; // 自定义缩放因子\n    UV *= Scale; // 放大 UV 坐标\n\n    // 计算当前 UV 的方块 ID\n    vec2 BlockID = floor(UV);\n\n    // 生成伪随机种子（用于颜色扰动）\n    vec2 seed = vec2(12.9898, 78.233);\n    vec2 seedcolor = fract(seed * BlockID * 12.9898);\n\n    // 创建结构体实例\n    pixelPlot plot;\n    plot.BlockID = BlockID;\n\n    // 时间变量\n    float t = iTime ;\n\n    // 计算颜色分量\n    float R = noise(BlockID / t * 0.005 / 1.23);\n    float G = noise(BlockID / t * 0.005 / 4.56);\n    float B = noise(BlockID / t * 0.005 / 7.89);\n    vec3 origincol = vec3(R, G, B);\n    vec3 gray = vec3 (0.5);\n    float blendefactor = 0.5;\n    vec3 Color = mix(origincol,gray,blendefactor);\n\n    // 返回颜色值，带透明度\n    fragColor = vec4(Color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}