{"ver":"0.1","info":{"id":"NdGBzz","date":"1658351907","viewed":125,"name":"Cutting Corners","username":"Reynolds","description":"Chaikin in a fragment shader?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["animation","subdivision","chaikin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//I'm also cutting corners in the code by not figuring out a way to do this in a smart way\n\nvec2 rotate(float angle, vec2 p)\n{\n  float s = sin(angle);\n  float c = cos(angle);\n\n  // rotate point\n  float xnew = p.x * c - p.y * s;\n  float ynew = p.x * s + p.y * c;\n\n  return vec2(xnew, ynew);\n}\n\nfloat square(vec2 p) {\n    float dist = 1000.0;\n\n    dist = min(dist, 0.8*(abs(p.x - 0.5) + abs(p.y - 0.5)));\n    \n    return dist;\n}\n\nfloat noCut(vec2 p) {\n    vec2 q = p;\n    q = rotate(1.57 / 2.0, q - vec2(0.5));\n    q += vec2(0.5);\n\n    return square(q);\n}\n\nfloat firstCut(vec2 p) {\n    float dist = 1000.0;\n\n    vec2 q = p;\n    \n    dist = square(p);\n    \n    q = rotate(1.57 / 2.0, q - vec2(0.5));\n    q += vec2(0.5);\n    \n    dist = max(dist, square(q));\n\n    return dist;\n}\n\nfloat secondCut(vec2 p) {\n    float dist = 1000.0;\n\n    vec2 q = p;\n\n    dist = min(dist, firstCut(p));\n   \n    q = rotate(1.57 / 4.0, q - vec2(0.5));\n    q += vec2(0.5);\n    \n    dist = max(dist, firstCut(q));\n\n    return dist;\n}\n\nfloat thirdCut(vec2 p) {\n    float dist = 1000.0;\n\n    vec2 q = p;\n\n    dist = min(dist, secondCut(p));\n    \n    q = rotate(1.57 / 8.0, q - vec2(0.5));\n    q += vec2(0.5);\n    \n    dist = max(dist, secondCut(q));\n\n    return dist;\n}\n\nfloat fourthCut(vec2 p) {\n    float dist = 1000.0;\n\n    vec2 q = p;\n\n    dist = min(dist, thirdCut(p));\n    \n    q = rotate(1.57 / 16.0, q - vec2(0.5));\n    q += vec2(0.5);\n    \n    dist = max(dist, thirdCut(q));\n\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.y - vec2(0.375, 0.0);\n    \n    vec3 col = vec3(1.0);\n    \n    float dist;\n    \n    //I'm using if statements, more corner cutting\n    float animTime = mod(iTime, 25.0);\n    if(animTime < 2.5) {    \n        dist = noCut(uv);\n    } else if(animTime < 5.) {    \n        dist = mix(noCut(uv), firstCut(uv), smoothstep(0., 1., mod(iTime - 2.5, 2.5) / 2.5));\n    } else if(animTime < 7.5) {\n        dist = firstCut(uv);\n    } else if(animTime < 10.0) {\n        dist = mix(firstCut(uv), secondCut(uv), smoothstep(0., 1., mod(iTime - 7.5, 2.5) / 2.5));\n    } else if(animTime < 12.5) {\n        dist = secondCut(uv);\n    } else if(animTime < 15.0) {\n        dist = mix(secondCut(uv), thirdCut(uv), smoothstep(0., 1., mod(iTime - 12.5, 2.5) / 2.5));\n    } else if(animTime < 17.5) {\n        dist = thirdCut(uv);\n    } else if(animTime < 20.0) {\n        dist = mix(thirdCut(uv), fourthCut(uv), smoothstep(0., 1., mod(iTime - 17.5, 2.5) / 2.5));\n    } else if(animTime < 22.5) {\n        dist = fourthCut(uv);\n    } else {\n        dist = mix(fourthCut(uv), noCut(uv), smoothstep(0., 1., mod(iTime - 17.5, 2.5) / 2.5));\n    }\n    \n    //some line smoothing    \n    float thickness = 0.005;\n    col = vec3(max(smoothstep(0.0, 1.0, (dist - 0.5 - thickness) / (0.5*thickness)),\n                   smoothstep(0.0, 1.0, (1.0 - dist - (0.5 + thickness)) / (0.5*thickness))));\n  \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}