{"ver":"0.1","info":{"id":"fdB3DK","date":"1649217115","viewed":56,"name":"Adaptive Mandelbrot","username":"ccraft","description":"Adaptive mandelbrot test\nBased on the idea from http://blog.recursiveprocess.com/2014/04/05/mandelbrot-fractal-v2/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","adaptive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int evalMandel(int maxiter, vec2 uv, float ox, float oy, float sx)\n{\n   int iteration = 0;\n\n   float c_re = uv.x * sx + ox;\n   float c_im = uv.y * sx*(iResolution.y/iResolution.x) + oy;\n   float x = 0.0, y = 0.0;\n   float x2 = 0.0, y2 = 0.0;\n   while (x2+y2 < 4.f && iteration < maxiter)\n   {\n      y = c_im + 2.f*x*y;\n      x = c_re + x2 - y2;\n      x2 = x*x;\n      y2 = y*y;\n      ++iteration;\n   }\n\n   return iteration;\n}\n\n\nvec3 mandel(vec2 uv, float ox, float oy, float sx)\n{\n    // http://blog.recursiveprocess.com/2014/04/05/mandelbrot-fractal-v2/\n    int R = max(1,int(27.71-5.156*log(sx)))*4;\n\n    int M = evalMandel(R, uv, ox, oy, sx);\n    float ratio = float(M)/float(R);\n    //vec3 color = vec3(0.039215686+ratio*0.549019608,0.392156863,ratio*0.784313725);\n    vec3 color = vec3(0.039215686+exp(-ratio*0.549019608),0.3,0.3);\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5,0.5);\n    \n    float X = -0.235125-iMouse.x/5012.0;\n    float Y = 0.827215-iMouse.y/5012.0;\n    float ltime = 0.5-0.5*cos(iTime*0.06);\n    float R = 4.0E-5 + ltime;\n    vec3 col = mandel(uv,X,Y,R);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}