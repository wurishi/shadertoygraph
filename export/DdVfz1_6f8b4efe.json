{"ver":"0.1","info":{"id":"DdVfz1","date":"1697924142","viewed":41,"name":"SpinnyCircle","username":"gamerprime","description":"My first good shader!\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle","wavycircle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    #define PI 3.1415926538\n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 col= vec3 (0.0,0.0,0.0);\n    vec2 uv = (fragCoord*2.0 - iResolution.xy)/iResolution.y;\n\n    float timewave = abs(sin(iTime));\n    float timewave2 = abs(sin(iTime*1.1));\n   \n    vec2 origin = iResolution.xy/2.0;\n    \n\n    \n    float distX = fragCoord.x-origin.x;\n    float distY = fragCoord.y-origin.y;\n    float dist_to_edge = sqrt(distX * distX + distY * distY);\n    float radiusinner = iResolution.x/10.0 + smoothstep(0.0,2.0,timewave)*50.0;\n    float radiusouter = iResolution.x/7.0 + smoothstep(0.0,2.0,timewave)*50.0;\n     \n    float angleinner = atan(distY,distX); \n    \n    float dist_add_angle=  sin(angleinner*10.0 - iTime*10.0)*10.0 * sin(iTime*2.0);\n    float dist_add_angle2=  sin(angleinner*10.0 - iTime*10.0)*10.0 * sin(iTime*2.0);\n    \n        \n    if( radiusinner + dist_add_angle  < dist_to_edge  &&  dist_to_edge < radiusouter + dist_add_angle2 ){\n\n     \n     for(float i= 0.0; i < 10.0; ++i){\n     float noise = atan(-distY,-distX);\n     uv = fract((uv + noise * 100.0) *1.5)-.5;\n     float dd = length((uv)) * exp(-length(uv));\n     col = palette(dd + iTime*.4);\n     \n     dd = sin(dd*20.0+iTime)/20.;\n     \n     dd = abs(dd);\n     \n     dd = 0.02/dd;\n    \n     col*=dd;\n}\n    \n    }\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    \n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 palette(float x){\n     vec3 a = vec3(1.008, 0.540, 0.688);\n     vec3 b = vec3(0.300, 0.300, 0.300);\n     vec3 c = vec3(1.228, 0.368, 0.268);\n     vec3 d = vec3(-0.982, -0.182, -2.052);\n\n     return a + b *cos(6.8*(c*x+d));\n     \n     \n     }","name":"Common","description":"","type":"common"}]}