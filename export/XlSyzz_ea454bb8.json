{"ver":"0.1","info":{"id":"XlSyzz","date":"1507109858","viewed":146,"name":"Colorspace Conversion Minimal","username":"Tynach","description":"Just a version of my other one, but with everything not used cut out.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["colorspaces","minimal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n\nstruct transfer {\n\tfloat power;\n\tfloat off;\n\tfloat slope;\n\tfloat cutoffToLinear;\n\tfloat cutoffToGamma;\n\tbool tvRange;\n};\n\nstruct rgb_space {\n\tmat3 primaries;\n\tvec3 whitePoint;\n\ttransfer trc;\n};\n\n\nconst mat3 primariesSony = mat3(\n\t0.625, 0.34, 0.035,\n\t0.28, 0.595, 0.125,\n\t0.155, 0.07, 0.775\n);\n\nconst mat3 primaries709 = mat3(\n\t0.64, 0.33, 0.03,\n\t0.3, 0.6, 0.1,\n\t0.15, 0.06, 0.79\n);\n\nconst vec3 whiteD65 = vec3(0.312713, 0.329016, 0.358271)/0.329016;\nconst vec3 whiteSony = vec3(0.283, 0.298, 0.419)/0.298;\n\nconst transfer gam25 = transfer(2.5, 0.0, 1.0, 0.0, 0.0, true);\nconst transfer gamSrgb = transfer(2.4, 0.055, 12.92, 0.04045, 0.0031308, false);\n\nconst rgb_space Sony = rgb_space(primariesSony, whiteSony, gam25);\nconst rgb_space Srgb = rgb_space(primaries709, whiteD65, gamSrgb);\n\n\nmat3 diag(vec3 scalars)\n{\n\treturn mat3(\n\t\tscalars.r, 0.0, 0.0,\n\t\t0.0, scalars.g, 0.0,\n\t\t0.0, 0.0, scalars.b\n\t);\n}\n\nmat3 toXyzMatrix(rgb_space from)\n{\n\tvec3 scalars = inverse(from.primaries)*from.whitePoint;\n\treturn from.primaries*diag(scalars);\n}\n\nmat3 conversionMatrix(rgb_space from, rgb_space to)\n{\n\tmat3 fromRGB = toXyzMatrix(from);\n\tmat3 toRGB = inverse(toXyzMatrix(to));\n\n\treturn toRGB*fromRGB;\n}\n\nvec4 toLinear(vec4 color, transfer trc)\n{\n\tif (trc.tvRange) {\n\t\tcolor = color*85.0/73.0 - 16.0/219.0;\n\t}\n\n\tbvec4 cutoff = lessThan(color, vec4(trc.cutoffToLinear));\n\tbvec4 negCutoff = lessThanEqual(color, vec4(-1.0*trc.cutoffToLinear));\n\tvec4 higher = pow((color + trc.off)/(1.0 + trc.off), vec4(trc.power));\n\tvec4 lower = color/trc.slope;\n\tvec4 neg = -1.0*pow((color - trc.off)/(-1.0 - trc.off), vec4(trc.power));\n\n\tcolor = mix(higher, lower, cutoff);\n\tcolor = mix(color, neg, negCutoff);\n\n\treturn color;\n}\n\nvec4 toGamma(vec4 color, transfer trc)\n{\n\tbvec4 cutoff = lessThan(color, vec4(trc.cutoffToGamma));\n\tbvec4 negCutoff = lessThanEqual(color, vec4(-1.0*trc.cutoffToGamma));\n\tvec4 higher = (1.0 + trc.off)*pow(color, vec4(1.0/trc.power)) - trc.off;\n\tvec4 lower = color*trc.slope;\n\tvec4 neg = (-1.0 - trc.off)*pow(-1.0*color, vec4(1.0/trc.power)) + trc.off;\n\n\tcolor = mix(higher, lower, cutoff);\n\tcolor = mix(color, neg, negCutoff);\n\n\tif (trc.tvRange) {\n\t\tcolor = color*73.0/85.0 + 16.0/255.0;\n\t}\n\n\treturn color;\n}\n\n// Converts from one RGB colorspace to another, output as linear light\nvec4 convert(vec4 color, rgb_space from, rgb_space to)\n{\n\tmat3 convert = conversionMatrix(from, to);\n\n\tcolor = toLinear(color, from.trc);\n\tcolor.rgb = convert*color.rgb;\n\tcolor = toGamma(color, to.trc);\n\n\treturn color;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\t// Change these to change what colorspace is being converted from/to\n\trgb_space from = Sony;\n\trgb_space to = Srgb;\n\n\tvec2 texRes = vec2(textureSize(iChannel0, 0));\n\tvec2 texCoord = (fragCoord - 0.5)/texRes;\n\ttexCoord *= texRes.x/iResolution.x;\n\n\tbool left = bool(int(texCoord.x*2.0));\n\n\tif (!left) {\n\t\tfrom = Srgb;\n\t\tto = from;\n\t}\n\n\tvec4 color = texture(iChannel0, texCoord);\n\n\tfragColor = convert(color, from, to);\n}","name":"Image","description":"","type":"image"}]}