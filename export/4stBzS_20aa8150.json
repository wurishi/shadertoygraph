{"ver":"0.1","info":{"id":"4stBzS","date":"1525735476","viewed":162,"name":"Gradient operator fun","username":"nathsou","description":"Gradient operator fun","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["gradient","convolution","operator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float grayScale(vec2 uv) {\n\treturn dot(texture(iChannel0, mod(uv, iResolution.xy)).rgb, vec3(0.21, 0.72, 0.07));\n}\n\nfloat convolution(vec2 uv, mat3 kernel) {\n    float sum = 0.0;\n    float scale = 1.0;\n    vec2 stepSize = scale / iResolution.xy;\n \n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            sum += kernel[i + 1][j + 1] * grayScale(uv + vec2(i, j) * stepSize);\n        }\n    }\n    \n    return sum;\n}\n\nfloat kernelNormalizationFactor(mat3 kernel) {\n    float factor = 0.0;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            factor += abs(kernel[i][j]);\n        }\n    }  \n    \n    return 1.0 / factor;\n}\n\nvec2 grad(vec2 uv) {\n   \n    mat3 grad_x = (1.0 / 3.0) * mat3(\n    \t1.0, 0.0, -1.0,\n        2.0, 0.0, -2.0,\n        1.0, 0.0, -1.0\n    );\n    \n    mat3 grad_y = (1.0 / 3.0) * mat3(\n    \t1.0, 2.0, 1.0,\n        0.0, 0.0, 0.0,\n        -1.0, -2.0, -1.0\n    );\n    \n    return vec2(\n        convolution(uv, grad_x), //values between -1 and 1\n        convolution(uv, grad_y)\n    );\n}\n\nfloat gradMag(vec2 uv) {\n \treturn length(grad(uv)); \n}\n\nfloat gradAngle(vec2 uv) {\n    vec2 gr = grad(uv);\n \treturn atan(gr.y, gr.x);   \n}\n\n\n// iq's smooth hsv to rgb\nvec3 hsv2rgb(in vec3 c) {\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 colorWheel(float mag, float angle) {\n\t//float hue = ((angle / 3.1415926) + 1.0) / 2.0;\n    float hue = (sin(iTime * 0.1) + 1.0) / 2.0;\n    float q = 0.001;\n    float m = pow(q, mag);\n \treturn hsv2rgb(vec3(hue, 1.0, m - mod(m, 0.15)));   \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    //vec3 col = vec3(gradMag(uv));\n    \n    float phase = -0.2;\n    vec3 col = colorWheel(gradMag(uv), mod(gradAngle(uv) + phase, 6.283185));\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}