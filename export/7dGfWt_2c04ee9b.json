{"ver":"0.1","info":{"id":"7dGfWt","date":"1658999780","viewed":197,"name":"fork layered modifications","username":"Carandiru","description":"fork, learning. really cool shaders by jarble","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal","archipelago","islands"],"hasliked":0,"parentid":"fsGfDt","parentname":"Fractal archipelago map"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale = 2.;   // try .1, .4 ...\nconst float layers = 5.;\nconst float threshold = .9;\nconst int iters = 8;\n\nbool labyrinth(uvec2 U,bool b1){\n    //bvec2 b = bvec2(U & 1u);\n    //return (b.x && b.y || b.x != b.y  && !b1);\n    \n    return bool((U.x*U.y+((U.x-U.y)*uint(!b1))) & 1u);\n}\n\nvoid layer(inout vec4 O, in vec2 U, in uvec2 bn, in float l, in float t) {\n\n    uvec2 I = uvec2( U/8. + vec2(iTime*t) );\n    O = vec4(1);\n    bool b = false;\n    for(int i = 0; i++ < (iters);I = (I+(I.yx)/uvec2(11u,13u)-I.yx/uvec2(13u,11u))*2u/3u+uvec2(i)*2u){\n        I += uvec2(bn * uint(i)); //another interesting pattern\n        b = !b || labyrinth(I,b);\n        O -= float(b)/(float(iters)+l)/1.;\n    }\n    if (!b) O = 1.-O;\n}\n\n// https://www.shadertoy.com/view/WlfXRN\nvec3 inferno(float t) {\n\n    const vec3 c0 = vec3(0.0002189403691192265, 0.001651004631001012, -0.01948089843709184);\n    const vec3 c1 = vec3(0.1065134194856116, 0.5639564367884091, 3.932712388889277);\n    const vec3 c2 = vec3(11.60249308247187, -3.972853965665698, -15.9423941062914);\n    const vec3 c3 = vec3(-41.70399613139459, 17.43639888205313, 44.35414519872813);\n    const vec3 c4 = vec3(77.162935699427, -33.40235894210092, -81.80730925738993);\n    const vec3 c5 = vec3(-71.31942824499214, 32.62606426397723, 73.20951985803202);\n    const vec3 c6 = vec3(25.13112622477341, -12.24266895238567, -23.07032500287172);\n\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n\n}\n\nvoid mainImage(out vec4 O, vec2 U) {\n\n    O = vec4(1);\n\n    for (float i = 0.0; i < layers; ++i)\n    {\n        uvec2 bn = uvec2(textureLod(iChannel0, U/scale, layers - i).rg * 255.);\n    \n        vec4 o = vec4(0);\n        layer(o, U, bn, i*2.0, 4.+i);\n        O = o * (1.0 - O) + O * (1.0 - o);\n        O *= O;\n    }\n    \n    O = vec4(inferno(O.x * O.x + O.x * O.x * O.x + O.x * O.x * O.x * O.x), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}