{"ver":"0.1","info":{"id":"MXXyD4","date":"1726167980","viewed":84,"name":"Transforming Projection Types","username":"KylBlz","description":"Click on the screen to change source (mouse X) and destination (mouse Y) projections. From bottom to top, left to right order: linear, cylindrical, f-theta, cube.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["cube","cubemap","projection","fisheye","linear","equiangular","inverse","transform","equirectangular","cylindrical","theta","ftheta"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float fov = pi * 0.25;\n    float asp = iResolution.x / iResolution.y;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = uv * 2.0 - 1.0;\n\n    vec3 ro = vec3(0.0 + sin(iTime), 3.0, 10.05 + cos(iTime));\n    vec3 rd = vec3(0.0);\n\n    vec2 mou = iMouse.xy / iResolution.xy;\n    if (mou.y < 0.25) {\n        // target linear projection\n        rd = linearProjection(ndc, asp, fov);\n    } else if (mou.y < 0.5) {\n        // target cylindrical projection\n        rd = cylindricalProjection(ndc, asp, fov);\n    } else if (mou.y < 0.75) {\n        // target spherical projection\n        rd = sphericalProjection(ndc, asp, fov);\n    } else {\n        // target cube projection\n        rd = cubeProjection(ndc, asp, fov);\n    }\n    \n    vec2 dndc = vec2(0.0);\n    if (mou.x < 0.25) {\n        // ground truth linear projection\n        dndc = linearDeproject(rd, asp, fov);\n    } else if (mou.x < 0.5) {\n        // ground truth cylindrical projection\n        dndc = cylindricalDeproject(rd, asp, fov);\n    } else if (mou.x < 0.75) {\n        // ground truth spherical projection\n        dndc = sphericalDeproject(rd, asp, fov);\n    } else {\n        // ground truth cube projection\n        dndc = cubeDeproject(rd, asp, fov);\n    }\n    \n    // clamp to black\n    if (any(lessThan(dndc, vec2(-1.0))) || any(greaterThan(dndc, vec2(1.0))))\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    else\n        fragColor = texture(iChannel0, dndc * 0.5 + 0.5);\n\n    // view raw source projection (debugging)\n    //fragColor = texture(iChannel0, uv);\n\n    // draw click grid\n    fragColor.rgb += max(0.0, iMouse.z) * step(fract(uv.y * 4.0 + 0.01), 0.02);\n    fragColor.rgb += max(0.0, iMouse.z) * step(fract(uv.x * 4.0 + 0.01), 0.02);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    float fov = pi * 0.25;\n    float asp = iResolution.x / iResolution.y;\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = uv * 2.0 - 1.0;\n    \n    vec3 ro = vec3(0.0 + sin(iTime), 3.0, 10.05 + cos(iTime));\n    vec3 rd = vec3(0.0);\n    \n    vec2 mou = iMouse.xy / iResolution.xy;\n    // projection options\n    if (mou.x < 0.25) {\n        // GT linear projection\n        rd = linearProjection(ndc, asp, fov);\n    } else if (mou.x < 0.5) {\n        // GT cylindrical projection\n        rd = cylindricalProjection(ndc, asp, fov);\n    } else if (mou.x < 0.75) {\n        // GT spherical projection\n        rd = sphericalProjection(ndc, asp, fov);\n    } else {\n        // GT cube projection\n        rd = cubeProjection(ndc, asp, fov);\n    }\n    \n    // raytrace\n    float d = march(ro, rd);\n    vec3 hl = ro + rd * d;\n    vec4 nc = norcurv(hl, eps);\n    \n    // lighting\n    vec3 lv = light.xyz - hl;\n    float dist2 = dot(lv, lv);\n    lv /= sqrt(dist2);\n    float ndotl = max(eps, dot(nc.xyz, lv));\n    \n    // textures\n    float grid = 0.1 * (step(fract(hl.x + 0.05), 0.1) + step(fract(hl.y + 0.05), 0.1) + step(fract(hl.z + 0.05), 0.1));\n    grid += step(dist2, light.w * 1.01) * 10.0;\n    \n    // Output to screen\n    fragColor = vec4(grid + vec3(20.0 * ndotl / (1.0 + dist2)), 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float pi = 3.1415926, zfar = 1000.0, eps = 0.001, d2r = 0.0174533;\nvec4 light = vec4(3.0, 5.0, 3.0, 1.0);\n\nvec2 rotate2d(in vec2 v, in float a) {\n    float sinA = sin(a);\n    float cosA = cos(a);\n    return vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nvec3 linearProjection(in vec2 ndc, in float asp, in float fov) {\n    ndc.y /= asp;\n    float flen = 1.0 / tan(fov);\n    return normalize(vec3(ndc.xy, -flen));\n}\n\nvec2 linearDeproject(in vec3 rd, in float asp, in float fov) {\n    float ndcx = rd.x / -rd.z;\n    float ndcy = rd.y / -rd.z;\n    return vec2(ndcx, ndcy * asp) / tan(fov);\n}\n\nvec3 cylindricalProjection(in vec2 ndc, in float asp, in float fov) {\n    ndc *= fov;\n    ndc.y /= asp;\n    vec3 ret = vec3(0.0, 0.0, -1.0);\n    ret.yz = rotate2d(ret.yz, ndc.y);\n    ret.xz = rotate2d(ret.xz, ndc.x);\n    return ret;\n}\n\nvec2 cylindricalDeproject(in vec3 rd, in float asp, in float fov) {\n    float x = atan(rd.x, -rd.z);\n    rd.xz = rotate2d(rd.xz, -x);\n    float y = atan(rd.y, -rd.z);\n    return vec2(x, y * asp) / fov;\n}\n\nvec3 sphericalProjection(in vec2 ndc, in float asp, in float fov) {\n    ndc *= sin(fov);\n    ndc.y /= asp;\n    return normalize(vec3(ndc, -sqrt(1.0 - min(1.0, dot(ndc, ndc)))));\n}\n\nvec2 sphericalDeproject(in vec3 rd, in float asp, in float fov) {\n    vec2 ndc = rd.xy / sin(fov);\n    ndc.y *= asp;\n    return ndc;\n}\n\nvec3 cubeProjection(in vec2 ndc, in float asp, in float fov) {\n    float viewp = sign(ndc.x);\n    ndc.x = fract(ndc.x) * 2.0 - 1.0;\n    ndc.y /= asp * 0.5;\n    float flen = 1.0 / tan(fov * 0.5);\n    vec3 outp = normalize(vec3(ndc, -flen));\n    outp.xz = rotate2d(outp.xz, fov * 0.5 * viewp);\n    return outp;\n}\n\nvec2 cubeDeproject(in vec3 rd, in float asp, in float fov) {\n    float viewp = sign(rd.x);\n    rd.xz = rotate2d(rd.xz, fov * -0.5 * viewp);\n    vec2 ndc = rd.xy / -rd.z;\n    ndc = ndc * vec2(1.0, asp) + viewp * vec2(tan(fov * 0.5), 0.0);\n    float flen = 0.5 / tan(fov * 0.5);\n    return ndc * flen;\n}\n\nfloat sdBox(in vec3 p, in mat3 o, in vec3 s) {\n    vec3 d = abs(p * o) - s;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\n// 3d scene\nfloat sdf(in vec3 l) {\n    float d = zfar;\n    d = min(d, l.y + 0.0);\n    d = min(d, -l.y + 12.0);\n    d = min(d, l.x + 10.0);\n    d = min(d, -l.x + 10.0);\n    d = min(d, l.z + 10.0);\n    d = min(d, length(l - light.xyz) - light.w);\n    d = min(d, sdBox(l - vec3(0.0, 0.93, 0.0), mat3(1.0), vec3(0.8)) - 0.1);\n    return d;\n}\n\n// Thanks Nimitz https://www.shadertoy.com/view/Xts3WM\nvec4 norcurv(in vec3 p, in float ep) {\n    vec2 e = vec2(-1., 1.)*ep;\n    float t1 = sdf(p + e.yxx), t2 = sdf(p + e.xxy);\n    float t3 = sdf(p + e.xyx), t4 = sdf(p + e.yyy);\n    return vec4(normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4), (t1+t2+t3+t4 - 4.0*sdf(p))/(ep*ep));\n}\n\nfloat march(in vec3 l, in vec3 rd) {\n    float t = 0.0;\n    float sdSmp;\n    for (int i = 0; i < 255; ++i) {\n        sdSmp = sdf(l + rd * t);\n        if (sdSmp < eps)\n            break;\n        t += sdSmp;\n        if (t > zfar)\n            return zfar;\n    }\n    return min(t, zfar);\n}\n","name":"Common","description":"","type":"common"}]}