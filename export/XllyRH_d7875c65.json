{"ver":"0.1","info":{"id":"XllyRH","date":"1503487786","viewed":99,"name":"Julius","username":"meaningOf42","description":"a simple Julius set generator,with c = sin(t) + cos(t*pi)*i","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 julius(float t, vec2 uv) {\n    float real = sin(t/20.0);\n    float imaginary = sin(t*3.1415/20.0);\n    \n    float a = uv.x;\n    float b = uv.y;\n    \n    const int maxIts = 100;\n\tfloat maxCount = 100.0;    \n\n\tfloat count = 0.0;\n    for (int i=0; i<maxIts; i++) {\n        float newA = a*a - b*b;\n        float newB = 2.0*a*b;\n        \n        a = newA + real;\n        b = newB + imaginary;\n        \n        \n        if (abs(a) > 4.0 || abs(b) > 4.0) {\n\t\t\tfloat brightness = count/maxCount;\n\t\t\treturn vec4(brightness, brightness, brightness, 1.0);\n        }\n        \n\t\tcount += 1.0;\n    }\n    \n    return vec4(0,0,0, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy*2.0 - iResolution.xy) * 2.0/ iResolution.x;\n    \n    float aspectRatio = iResolution.x / iResolution.y;\n\t\n    fragColor = julius(iTime, uv);\n}","name":"Image","description":"","type":"image"}]}