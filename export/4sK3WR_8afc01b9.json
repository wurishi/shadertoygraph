{"ver":"0.1","info":{"id":"4sK3WR","date":"1454012412","viewed":531,"name":"Integer Spiral","username":"mfbaranow","description":"Attempts to render an ascii spiral, in the strangest way possible","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["2d","text","ascii"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// NOTE: uncomment below to make it spin\n#define ANIMATE\n\n#define pi 3.1415926535897932384626433832795\n#define pi2 6.283185307179586\n\n#define pi4th 0.7853981633974483\n\nvec2 size = vec2(24.0,8.0);\n\nvec2 celUVCoords(vec2 uv) {\n    return ((floor(uv/size)*size) / iResolution.xy);\n}\n\nvec2 linearCoords(vec2 uv) {\n\treturn (uv / iResolution.xy);\n}\n\nvec3 lerp(float t, vec3 a, vec3 b) {\n    return t*a + (1.0-t)*b;\n}\n\nfloat digit(float x) {\n    float n = 0.0;\n\tif (x >= 0.0) n = 6595878.0;\n\tif (x >= 1.0) n = 14815366.0;\n\tif (x >= 2.0) n = 15798566.0;\n\tif (x >= 3.0) n = 16005391.0;\n\tif (x >= 4.0) n = 8666409.0;\n\tif (x >= 5.0) n = 16006190.0;\n\tif (x >= 6.0) n = 16038959.0;\n\tif (x >= 7.0) n = 1118479.0;\n\tif (x >= 8.0) n = 16029999.0;\n\tif (x >= 9.0) n = 16006447.0;\n\treturn n;\n}\n\nfloat character(float n, vec2 p)\n{\n\tp = floor(p*vec2(4.0, -4.0) + 2.5);\n\tif (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)\n\t{\n\t\tif (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\n\t}\t\n\treturn 0.0;\n}\n\nint _abs(int a) {\n\treturn a < 0 ? -a : a;\n}\n\nint _max(int a, int b) {\n    return a > b ? a : b;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n    vec2 box = celUVCoords(uv);\n\n    vec3 col = texture(iChannel0, floor(uv/8.0)*8.0/iResolution.xy).rgb;\n    \n    ivec2 pt = ivec2(box * (iResolution.xy / size));\n    pt = ivec2(13,21) - pt;\n    \n#ifdef ANIMATE\n    float angleOffset = mod(pi - pi/4.0 + iTime, 2.0*pi);\n#else\n    float angleOffset =  pi - pi/4.0;\n#endif\n    \n    float thisAngle = atan(float(pt.y), float(pt.x)) + angleOffset;\n    int ring = _max(_abs(pt.x), _abs(pt.y)) * 2 + 1;\n    int prevRing = ring - 2;\n\tint numOfSteps = (ring-1) * 4;\n\tfloat stepAngle = pi2 / float(numOfSteps);\n    int innerNum = prevRing * prevRing;\n    int value = int(floor((thisAngle / stepAngle) + 0.5) + float(innerNum));\n    if (thisAngle <= 0.0) {\n        value += numOfSteps;\n    }\n\t\n    float x = float(_max(0,value));\n    vec2 whichDigit = (linearCoords(uv) - box) * 42.0;\n    float n = 0.0;\n    float offset = 0.0;\n    float d1 = mod(x/100.0,10.0);\n    float d2 = mod(x/10.0,10.0);\n    float d3 = mod(x, 10.0);\n    if (whichDigit.x > 0.0)  { n = x < 100.0 ? 0.0 : digit(d1); offset = +0.4; }\n    if (whichDigit.x > 0.60) { n = x < 10.0  ? 0.0 : digit(d2);  offset =  0.0; }\n    if (whichDigit.x > 1.0)  { n = digit(d3);                         offset = -0.4; }\n\n    \n\tvec2 cuv = mod(uv/4.0, 2.0) - vec2(1.0+offset,1.0);\n    \n    col = (0.3 + vec3( mod(x/36.0, 1.0) ) * 0.7);\n    fragColor = vec4(lerp(character(n, cuv), col, vec3(0.0)), 1) * vec4(0.5 + d1 / 10.0, 0.5 + d2 / 10.0, 0.5 + d3 / 10.0, 1);\n}","name":"Image","description":"","type":"image"}]}