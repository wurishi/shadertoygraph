{"ver":"0.1","info":{"id":"Nslfzs","date":"1645226385","viewed":441,"name":"2d ripples + displacement","username":"Vulume","description":"based on Hugo Elias' article here: https://web.archive.org/web/20160116150939/http://freespace.virgin.net/hugo.elias/graphics/x_water.htm\n\nsimilar to: https://www.shadertoy.com/view/WdVXDt , but with reflections at the edges","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["ripples","water"],"hasliked":0,"parentid":"WtV3D3","parentname":"2d ripples"},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define textureOffset 10.0\n\n\nvec2 texNormalMap(in vec2 uv, in sampler2D heightMap)\n{\n    vec2 s = 1.0/iResolution.xy;\n    \n    float p = texture(heightMap, uv/ iResolution.xy).x * 0.5 + 0.5;\n    float h1 = texture(heightMap,( uv/ iResolution.xy) + s * vec2(textureOffset,0)).x * 0.5 + 0.5;\n    float v1 = texture(heightMap, ( uv/ iResolution.xy) + s * vec2(0,textureOffset)).x * 0.5 + 0.5;\n       \n   \treturn (p - vec2(h1, v1));\n}\n\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n\n \n    float displacement_amount = 0.10;\n\n    vec2 uv_screen = coord/iResolution.xy; //The texture coordinates normalised to [0,1]\n\n    if (iFrame % 2 == 1)\n        color = vec4(texture(iChannel2, uv_screen + texNormalMap(coord,iChannel0)*displacement_amount));\n    else\n        color = vec4(texture(iChannel2, uv_screen + texNormalMap(coord,iChannel1)*displacement_amount));\n    \n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    if (iFrame == 0)\n    {\n        color = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    ivec2 p = ivec2(coord);\n    \n    if (iFrame % 2 == 1)\n    {\n    \tcolor = texelFetch(iChannel0, p, 0);\n        return;\n    }\n    \n    ivec2 res = ivec2(iResolution.xy);\n    \n    float h = process(iChannel1, iChannel0, res, iMouse, p, iTime);\n    \n    color = vec4(h, 0.0, 0.0, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    if (iFrame == 0)\n    {\n        color = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    ivec2 p = ivec2(coord);\n    \n    if (iFrame % 2 == 0)\n    {\n    \tcolor = texelFetch(iChannel1, p, 0);\n        return;\n    }\n    \n    ivec2 res = ivec2(iResolution.xy);\n    \n    float h = process(iChannel0, iChannel1, res, iMouse, p, iTime);\n    \n    color = vec4(h, 0.0, 0.0, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nfloat read(sampler2D tex, ivec2 res, ivec2 coord, ivec2 offset, vec2 mouse)\n{\n    ivec2 r = res;\n    ivec2 c = coord + offset;\n    \n    // is there a better way to mirror the coordinates? :(\n    if (c.x < 0)\n        c.x = -c.x;\n    else if (c.x > r.x)\n        c.x = r.x - (c.x - r.x);\n        \n    if (c.y < 0)\n        c.y = -c.y;\n    else if (c.y > r.y)\n        c.y = r.y - (c.y - r.y);\n    \n    // is there a way to tell if the mouse is down or not? it seems to get stuck :(\n    float ui = clamp(1.0 - length(vec2(c) - mouse.xy) / 15.0, 0.0, 1.0);\n    float h = texelFetch(tex, c, 0).r;\n    \n    return h + ui;\n}\n\nfloat process(sampler2D bufferIn, sampler2D bufferOut, ivec2 res, vec4 mouse, ivec2 p, float time)\n{\n    vec2 pos;\n\n    if (mouse.xy == vec2(.0, .0) ){\n        pos.y = float(res.y)/2. + float(res.y)/3. * sin(time*4.);\n        pos.x = float(res.x)/2. + float(res.x)/3. * cos(time*2.);\n    } else if (mouse.z < 0. && mouse.w < 0.) {\n        pos  = vec2(-1000., -1000.);\n    } else {\n        pos = vec2(mouse.xy);\n    }\n\n    float l = read(bufferIn, res, p, ivec2(-1,  0), pos);\n    float r = read(bufferIn, res, p, ivec2( 1,  0), pos);\n    float u = read(bufferIn, res, p, ivec2( 0, -1), pos);\n    float d = read(bufferIn, res, p, ivec2( 0,  1), pos);\n    \n    float c = read(bufferOut, res, p, ivec2(0), pos);\n    \n    float damp = 0.99;\n    \n    return ((l + r + u + d) / 2.0 - c) * damp;\n}","name":"Common","description":"","type":"common"}]}