{"ver":"0.1","info":{"id":"3dGyDV","date":"1603734356","viewed":355,"name":"bloom pass","username":"mrmola","description":"What it says on the tin","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["postprocessing","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int size =5;\nconst float hacky = 4.;\nconst float divider = 1./20.;\nfloat modifier(in float number) {\n    return 1./number;\n}\nfloat rate = 0.1;\nfloat brightnessFunction(in float number) {\n    float eee = exp(16.*number - 1.);\n    return 2.*eee/(2.+(eee-1.));\n        }\n//square brightness\nconst float brightness = 1.;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 multi = 1./iResolution.xy;\n    vec4 addition, tempColor;\n    float tlength = float(size)*float(size);\n    vec4 number = texture(iChannel0, fragCoord*multi);\n    for(float i = -float(size)*hacky; i < float(size)*hacky; i+=hacky) {\n        for(float j = -float(size)*hacky; j < float(size)*hacky; j+=hacky) {\n            tempColor = texture(iChannel0, multi*(fragCoord+vec2(i, j) ));\n            float theLength =  tempColor.x*tempColor.x + tempColor.y*tempColor.y+ tempColor.z*tempColor.z;\n            i=i/hacky;\n            j=j/hacky;\n            if(theLength > brightness/* && float(i)*float(i)+float(j)*float(j) < tlength*/){\n                //\n\t\t\t\ttlength = (float(size)-length(vec2(i,j)))/float(size);\n                addition = tempColor;\n                //this one is the important bit it is multiplying color by what SHOULD be the normalized distance\n                if(tlength>0.) {\n                    //tempColor = vec4(0,1,1,1);\n            \t\tnumber += tempColor*tlength*divider;//*brightnessFunction(theLength/4.);\n                }\n            }\n            i=i*hacky;\n            j=j*hacky;\n        }\n    }\n    vec4 outputColor = texture(iChannel0, fragCoord*multi);\n    if(number.w > 0. && iMouse.x < fragCoord.x) {\n        //finish taking average\n        outputColor = (number/number.w);\n    }\n    // Output to screen\n    fragColor = outputColor;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}