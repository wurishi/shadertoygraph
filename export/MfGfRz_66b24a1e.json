{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"float sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        sphereSDF(p + vec3(e.x, e.y, 0.0), 1.0) - sphereSDF(p - vec3(e.x, e.y, 0.0), 1.0),\n        sphereSDF(p + vec3(0.0, e.x, e.y), 1.0) - sphereSDF(p - vec3(0.0, e.x, e.y), 1.0),\n        sphereSDF(p + vec3(e.y, 0.0, e.x), 1.0) - sphereSDF(p - vec3(e.y, 0.0, e.x), 1.0)\n    ));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, out vec3 hitPoint, out vec3 normal) {\n    float dist = 0.0;\n    for (int i = 0; i < 100; i++) {\n        hitPoint = ro + rd * dist;\n        float d = sphereSDF(hitPoint, 1.0);\n        if (d < 0.01) {\n            normal = calcNormal(hitPoint);\n            return dist;\n        }\n        dist += d;\n    }\n    return 100.0;\n}\n\nvec3 phongLighting(vec3 p, vec3 normal, vec3 lightPos, vec3 viewDir) {\n    vec3 lightDir = normalize(lightPos - p);\n    float diff = max(dot(normal, lightDir), 0.0);\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);\n    return vec3(0.1) + vec3(0.8) * diff + vec3(1.0) * spec;\n}\n\nvec3 triplanarTexture(vec3 p, vec3 normal) {\n    vec3 absNormal = abs(normal);\n    absNormal /= (absNormal.x + absNormal.y + absNormal.z);\n\n    vec3 xProjection = texture(iChannel1, p.yz * 0.5).rgb * absNormal.x;\n    vec3 yProjection = texture(iChannel1, p.xz * 0.5).rgb * absNormal.y;\n    vec3 zProjection = texture(iChannel1, p.xy * 0.5).rgb * absNormal.z;\n\n    return xProjection + yProjection + zProjection;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    vec3 ro = vec3(0.0, 0.0, 3.0);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    vec3 hitPoint, normal;\n    float dist = rayMarch(ro, rd, hitPoint, normal);\n\n    if (dist > 99.9) {\n        vec3 envColor = texture(iChannel0, rd).rgb;\n        fragColor = vec4(envColor, 1.0);\n        return;\n    }\n\n    vec3 lightPos = vec3(2.0 * sin(iTime), 2.0 * sin(iTime), 2.0 * cos(iTime));\n    vec3 viewDir = -rd;\n\n    vec3 textureColor = triplanarTexture(hitPoint, normal);\n    vec3 lighting = phongLighting(hitPoint, normal, lightPos, viewDir);\n    vec3 color = lighting * textureColor;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = mix(vec3(0.2, 0.3, 0.7), vec3(0.8, 0.5, 0.2), sin(20.0 * 1.1 - iTime * 2.0) * 0.5 + 0.5);\n    fragColor = vec4(color, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"MfGfRz","date":"1734363695","viewed":68,"name":"Сферка","username":"Maxwells_s","description":"Крутая Сферка, уже работает.","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""}}