{"ver":"0.1","info":{"id":"X3BfDR","date":"1729309945","viewed":83,"name":"Diffraction grading simulation","username":"StarySky","description":"A simulation of the diffraction grading.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["simulation","physics","optics","diffraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define lightspeed 0.1\n#define lam 0.1\n#define AA 3\n#define speed 0.3\nvec2 fixUV(vec2 c) {\n    return (2. * c - vec2(iResolution.x,0.)) / min(iResolution.x, iResolution.y);\n}\n\n\nfloat lightsource(vec2 uv, vec2 p) {\n    float l = length(uv-p);\n    if (uv.y>p.y) {\n    return cos(2.*PI/lam*(l-lightspeed*iTime));\n    }\n}\n\n\nfloat line(vec2 uv, float angle, float l) {\n  l = max(l,0.);\n  return smoothstep(l, l*0.7, length(uv))*smoothstep(30.,0.,abs(uv.x*cos(angle)-uv.y*sin(angle)));\n\n}\n\nvec3 render(vec2 uv, float scale) {\n    float N = 100.;\n    float d = .35;\n    vec3 col = vec3(0.);\n    for (float i = 1.; i<=N; i+=1.) {\n        col += vec3(lightsource(uv, vec2((i-N/2.)*d,0.)));\n    }\n    col = col*col/N;\n    col *= 1./(length(uv)+1.)+0.5;\n    col = clamp(vec3(0.), vec3(1.), col);\n\n    for (int i = -3; i<=3; i++) {\n        float angle = asin(float(i)*lam/d);\n        float colorinterp = line(uv, asin(float(i)*lam/d), scale*scale/100.-300.-sign(sin(iTime*speed))*angle*200.);\n        col = max(col,vec3(0.8,0.8,0.3)*colorinterp);\n    \n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float scale = 10.*pow(50.,-cos(iTime*speed));\n    vec2 uv = (fixUV(fragCoord))*scale;\n    vec3 color = vec3(0.);\n\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 0.01*(1.+log(scale)) * sin(vec2(float(m+n)*PI/3., float(n-m)*PI/3.) / float(AA) - .5);\n            color += render(uv+offset, scale);\n        }\n    }\n    \n    fragColor = vec4(color/float(AA*AA),1.0);\n}","name":"Image","description":"","type":"image"}]}