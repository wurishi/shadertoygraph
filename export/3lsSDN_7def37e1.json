{"ver":"0.1","info":{"id":"3lsSDN","date":"1623477117","viewed":137,"name":"study_voronoi_two Method","username":"firegump","description":"leaning aboat BigWings's tutorial","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N22(vec2 p){\n\tvec3 a = fract(p.xyx*vec3(123.34,234.34,345.65));\n    a += dot(a, a+ 34.45);\n    return fract(vec2(a.x*a.y,a.y*a.z));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv *= 2.;\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    \n    vec3 col = vec3(0.);\n    float m = 0.;\n    float t = iTime*.3;\n    \n    float minDist = 100.;\n    \n    float cellIndex = 0.;\n    vec2  minDistP = vec2(0.);\n    vec2  coreP = vec2(0.);\n    \n    if(uv.x>0.)\n    {\n        for(float i= 1.;i<50.;i++)\n    {\n    \tvec2 n = N22(vec2(i));\n        \n        vec2 p = sin(n*t);\n         \n        \n        p.x *= ratio;\n        \n        \n        \n        float d = length(uv-p);\n        m += smoothstep(.02, .01, d);\n        \n       \n        \n        if(d < minDist){\n        \tminDist = d;\n            cellIndex = i;\n            coreP = p;\n           \n        }\n        \n        \n    }\n    vec2 rg = uv - coreP;\n    rg = normalize(rg);\n    vec3 n = vec3(rg,minDist);\n    n = normalize(n);\n    \n    if(uv.y>0.)\n    {\n    \n        col = n;\n    }\n    else\n    {\n        vec3 dir = vec3(uv,-1.);\n        vec3 ref = reflect(n,dir);\n        col = texture(iChannel0,-ref).xyz;\n        \n    }\n    \n    \n    \n    \n    \n    }\n    else\n    {\n        t *= 3.;\n        uv *= 3.;\n        vec2 gv = fract(uv) - 0.5;\n        vec2 id = floor(uv);\n        vec2 cid = vec2(0.);\n        for(float y = -1.; y<= 1.;y++)\n        {\n            for(float x = -1.;x<= 1.;x++)\n            {\n               vec2 offs = vec2(x,y);\n               vec2 n = N22(id + offs); \n               vec2 p = offs + sin(n*t)*.5;\n               p -= gv;\n               float d = length(p);\n               if(uv.y>0.)\n               {\n                   d = abs(p.x) + abs(p.y);\n               \n               }\n               if(d < minDist){\n                minDist = d;\n                cid = id + offs;\n           \n                    }\n            \n            }\n              \n        }\n    \n    \n        col = vec3(minDist);\n    }\n\t\n   \n    //vec3 dir = vec3(uv,-1.);\n    //vec3 ref = reflect(n,dir);\n    //col = texture(iChannel0,-ref).xyz;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}