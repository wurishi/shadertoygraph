{"ver":"0.1","info":{"id":"4ddXR8","date":"1457642195","viewed":1800,"name":"Worley Displacement","username":"indivisual","description":"Copy of https://www.shadertoy.com/view/llS3RK supplemented by displacement of a background material","likes":19,"published":1,"flags":0,"usePreview":1,"tags":["distortion","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copy of https://www.shadertoy.com/view/llS3RK\n\n\n#define DISPLACE .125\n\n//Calculate the squared length of a vector\nfloat length2(vec2 p){\n    return dot(p,p);\n}\n\n//Generate some noise to scatter points.\nfloat noise(vec2 p){\n\treturn fract(sin(fract(sin(p.x) * (43.13311)) + p.y) * 31.0011);\n}\n\nfloat worley(vec2 p) {\n    //Set our distance to infinity\n\tfloat d = 1e30;\n    //For the 9 surrounding grid points\n\tfor (int xo = -1; xo <= 1; ++xo) {\n\t\tfor (int yo = -1; yo <= 1; ++yo) {\n            //Floor our vec2 and add an offset to create our point\n\t\t\tvec2 tp = floor(p) + vec2(xo, yo);\n            //Calculate the minimum distance for this grid point\n            //Mix in the noise value too!\n\t\t\td = min(d, length2(p - tp - noise(tp)));\n\t\t}\n\t}\n\treturn 3.0*exp(-4.0*abs(2.5*d - 1.0));\n}\n\nfloat fworley(vec2 p) {\n    //Stack noise layers \n\treturn sqrt(sqrt(sqrt(\n\t\tworley(p*5.0 + 0.05*iTime) *\n\t\tsqrt(worley(p * 50.0 + 0.12 + -0.1*iTime)) *\n\t\tsqrt(sqrt(worley(p * -10.0 + 0.03*iTime))))));\n}\n      \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //Calculate an intensity\n    float t = fworley(uv * iResolution.xy / 1500.0);\n    //Add some gradient\n    t*=exp(-length2(abs(0.7*uv - 1.0)));\t\n    //Make it blue!\n//    fragColor = vec4(t * vec3(0.1, 1.1*t, pow(t, 0.5-t)), 1.0);\n    \n    // please keep in mind that i have no idea of maths. \n    // i am sorry. but at least it looks nice.\n    vec2 of1 = vec2(DISPLACE*t);\n    vec2 of2 = vec2(DISPLACE)/iResolution.xy;\n    uv += of1-of2;\n    uv.y -=DISPLACE*.25;\n\n    vec4 color = texture(iChannel0, uv);\n    fragColor = color;\n}\n\n","name":"Image","description":"","type":"image"}]}