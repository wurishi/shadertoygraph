{"ver":"0.1","info":{"id":"3lXGDX","date":"1557798557","viewed":178,"name":"DFPaint","username":"Assossa","description":"Paint with distance fields!\n\nPress E to clear the canvas\nHold Space to use the eraser","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["distancefield","paint","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float dist = texelFetch(iChannel0, ivec2(fragCoord), 0).r;\n    \n    //dist += sin(iTime * 2.0 + fragCoord.y * 0.1 + fragCoord.x * 0.1) * 2.0;\n    \n    fragColor = vec4(smoothstep(PEN_SIZE - 2.0, PEN_SIZE, dist));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_DIST 128.0\n\n#define KEY_E 69\n#define KEY_SPACE 32\n\n#define KEY_DOWN(k) (texelFetch(iChannel1, ivec2(k, 0), 0).r > 0.0)\n\nconst float SIDE_DIST = sqrt(1.0);\nconst float DIAG_DIST = sqrt(2.0);\n\nfloat minDist(ivec2 pos) {\n    float dist = texelFetch(iChannel0, pos, 0).r;\n    \n    #define CHECK_SIDE(x,y,type) dist = min(dist, texelFetch(iChannel0, pos + ivec2(x, y), 0).r + type)\n    \n    CHECK_SIDE( 0, -1, SIDE_DIST);\n    CHECK_SIDE( 0,  1, SIDE_DIST);\n    CHECK_SIDE(-1,  0, SIDE_DIST);\n    CHECK_SIDE( 1,  0, SIDE_DIST);\n    \n    CHECK_SIDE(-1, -1, DIAG_DIST);\n    CHECK_SIDE(-1,  1, DIAG_DIST);\n    CHECK_SIDE( 1, -1, DIAG_DIST);\n    CHECK_SIDE( 1,  1, DIAG_DIST);\n\n    return dist;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if(iFrame < 2 || KEY_DOWN(KEY_E)) {\n        fragColor = vec4(MAX_DIST);\n        return;\n    }\n    \n    float dist = minDist(ivec2(fragCoord));\n    float mouseDist = distance(fragCoord, iMouse.xy);\n    \n    if(mouseDist < ERASE_SIZE && KEY_DOWN(KEY_SPACE))\n        dist = MAX_DIST;\n    else if(mouseDist < 2.0)\n        dist = 0.0;\n    \n    fragColor = vec4(dist);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PEN_SIZE 20.0\n#define ERASE_SIZE 10.0 ","name":"Common","description":"","type":"common"}]}