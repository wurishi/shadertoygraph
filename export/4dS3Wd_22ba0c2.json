{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// By Morgan McGuire @morgan3d, http://graphicscodex.com\n// Reuse permitted under the BSD license.\n\n// All noise functions are designed for values on integer scale.\n// They are tuned to avoid visible periodicity for both positive and\n// negative coordinates within a few orders of magnitude.\n\n// For a single octave\n//#define NOISE noise\n\n// For multiple octaves\n#define NOISE fbm\n#define NUM_NOISE_OCTAVES 5\n\n// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\n\n\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n \n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n\nfloat fbm(float x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfloat shift = float(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\nfloat fbm(vec3 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec3 shift = vec3(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////\n// Visualization:\nconst float pi          = 3.1415926535;\nconst float inf         = 1.0 / 0.0;\nfloat square(float x) { return x * x; }\nfloat infIfNegative(float x) { return (x >= 0.0) ? x : inf; }\n\n// C = sphere center, r = sphere radius, P = ray origin, w = ray direction\nfloat  intersectSphere(vec3 C, float r, vec3 P, vec3 w) {\t\n\tvec3 v = P - C;\n\tfloat b = -dot(w, v);\n\tfloat c = dot(v, v) - square(r);\n\tfloat d = (square(b) - c);\n\tif (d < 0.0) { return inf; }\t\n\tfloat dsqrt = sqrt(d);\n\t\n\t// Choose the first positive intersection\n\treturn min(infIfNegative((b - dsqrt)), infIfNegative((b + dsqrt)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat v = 0.0;\n\t\n\t// Visualize 1D, 2D, and 3D\n\tif (fragCoord.y > iResolution.y / 2.0) {\n\t\tif (fragCoord.x < iResolution.x / 2.0) {\n\t\t\t// 1D\n\t\t\tfloat coord = fragCoord.x * 0.05 + iTime * 5.0 - 10.0;\n\t\t\tfloat height = NOISE(coord) * iResolution.y / 2.0;\n\t\t\tv = clamp((height - fragCoord.y + iResolution.y / 2.0) / (iResolution.y * 0.02), 0.0, 1.0);\n\t\t} else if (fragCoord.x < iResolution.x / 2.0 + 1.0) {\n\t\t\tfragColor.rgb = vec3(1.0);\n\t\t\treturn;\n\t\t} else {\n\t\t\t// 2D\n\t\t\tvec2 coord = fragCoord.xy * 0.1 - vec2(iTime * 5.0, iResolution.y / 2.0);\n\t\t\tv = NOISE(coord);\n\t\t}\n\t} else if (fragCoord.y > iResolution.y / 2.0 - 1.0) {\n\t\tfragColor.rgb = vec3(1.0);\n\t\treturn;\n\t} else {\n\t\t// Ray-sphere\n\t\tconst float verticalFieldOfView = 25.0 * pi / 180.0;\n\t\t\t\n\t    vec3 P = vec3(sin(iTime) * 2.0, 0, 5.0);\n\t\tvec3 w = normalize(vec3(fragCoord.xy - iResolution.xy / vec2(2.0, 4.0), \n\t\t\t\t\t\t\t\t(iResolution.y / 2.0) / (-2.0 * tan(verticalFieldOfView / 2.0))));\n\n\t\tfloat t = min(intersectSphere(vec3(0, 0, 0), 1.0, P, w),\n\t\t\t\t\t  intersectSphere(vec3(0, -2000, 0), 2000.0 - 1.0, P, w));\n\t\tif (t < inf) {\n\t\t\tvec3 X = P + w * t;\n\t\t\t// Fake lighting to make surfaces appear nicely\n\t\t\tv = NOISE(X * 10.0) * clamp(X.y * 0.75 + 1.0 - min(X.z * 0.05, 0.0), 0.0, 1.0) + \n\t\t\t\tclamp((length(X.xz) - 0.75) * 0.15, 0.0, 0.1);\n\t\t} else {\n\t\t\t// Background\n\t\t\tv = 0.5;\n\t\t}\n\t}\n\n    // Visualize with a fun color map\t\n\tfragColor.rgb = pow(v, 0.35) * 1.3 * normalize(vec3(0.5, fragCoord.xy / iResolution.xy)) + vec3(v * 0.25);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dS3Wd","date":"1394922365","viewed":29769,"name":" 1D, 2D & 3D Value Noise","username":"morgan3d","description":"Noise in up to three dimensions tuned for performance and avoiding visible tiling artifacts.","likes":190,"published":1,"flags":0,"usePreview":1,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""}}