{"ver":"0.1","info":{"id":"4lXyWS","date":"1506111589","viewed":441,"name":"Fractaloscopic","username":"gPlatl","description":"Switch to fullscreen, enjoy the koleidoscopic beauty and \nexplore undiscovered forms of appearance with your mouse, even if animation is paused.\nYou can also set your favorite mirror factor, if you change NUM_SIDES in code!\n","likes":17,"published":1,"flags":64,"usePreview":0,"tags":["fractal","colors","flower","koleidoscope","discover"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldBXzW","filepath":"https://soundcloud.com/simone-peltier/the-beatles-lucy-in-the-sky-with-diamonds","previewfilepath":"https://soundcloud.com/simone-peltier/the-beatles-lucy-in-the-sky-with-diamonds","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------------------\n// Fractaloscopic.glsl                               by Gerd Platl                    \n//  v1.0   2017-09-22 \n//  v1.1   2018-02-27  mouse.x -> zooming\n// Fractal Colors meets Koleidoscope...\n// Switch to fullscreen, enjoy the koleidoscopic beauty and \n// explore undiscovered forms of appearance with your mouse.\n// tags: fractal, koleidoscope, flower, colors, discover\n//----------------------------------------------------------------\n\n#define time iTime\n#define resolution iResolution\n\n//----------------------------------------------------------------\n// Koleidoscope by ackleyrc: https://www.shadertoy.com/view/llXcRl \n//----------------------------------------------------------------\n\nconst float NUM_SIDES = 5.0;  // set your favorite mirror factor here\n\nconst float PI = 3.14159265359;\n\nconst float KA = PI / NUM_SIDES;\n\n//----------------------------------------------------------------\n// transformation to koleidoscopic coordinates\n//----------------------------------------------------------------\nvoid koleidoscope(inout vec2 uv)\n{\n  // get the angle in radians of the current coords relative to origin (i.e. center of screen)\n  float angle = atan (uv.y, uv.x);\n  // repeat image over evenly divided rotations around the center\n  angle = mod (angle, 2.0 * KA);\n  // reflect the image within each subdivision to create a tilelable appearance\n  angle = abs (angle - KA);\n  // rotate image over time\n  angle += 0.1*time;\n  // get the distance of the coords from the uv origin (i.e. center of the screen)\n  float d = length(uv); \n  // map the calculated angle to the uv coordinate system at the given distance\n  uv = d * vec2(cos(angle), sin(angle));\n}\n//----------------------------------------------------------------\n// equal to koleidoscope, but more compact \n//----------------------------------------------------------------\nvoid smallKoleidoscope(inout vec2 uv)\n{\n  float angle = abs (mod (atan (uv.y, uv.x), 2.0 * KA) - KA) + 0.1*time;\n  uv = length(uv) * vec2(cos(angle), sin(angle));\n}\n//----------------------------------------------------------------\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 12.0*(2.0 * fragCoord.xy / resolution.xy - 1.0);\n  uv.x *= resolution.x / resolution.y;\n  //uv.x += 2.*sin(2.*time);\n  vec2 mouse = iMouse.xy / resolution.xy;\n  uv *= 0.1+mouse.x;\n    \n  //koleidoscope(uv);\n  smallKoleidoscope(uv);\n    \n  // Fractal Colors by Robert Sch√ºtze (trirop): http://glslsandbox.com/e#29611\n  vec3 p = vec3 (uv, mouse.x);\n  for (int i = 0; i < 44; i++)\n    p.xzy = vec3(1.3,0.999,0.678)*(abs((abs(p)/dot(p,p)-vec3(1.0,1.02,mouse.y*0.4))));\n  \n  fragColor = vec4(p,1.0);\n}","name":"Image","description":"","type":"image"}]}