{"ver":"0.1","info":{"id":"Xd2fzK","date":"1501259995","viewed":354,"name":"YASÂ³ : Yet Another String System","username":"ttoinou","description":"Yet Another Shadertoy String System (minimal, compiles fast, one uint for 4 chars, able to do uvec2, uvec3, uvec4)\nUse it for The Shader Professor !","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["texture","font","string","sh17c"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Char Map, chars written with \"0xab\" a is X coord b is Y coord :\n * \n *    0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F\n *    \n * 0  \n * 1\n * 2     !\n * 3  0  1  2  3  4  5  6  7  8  9 \n * 4  @  A  B  C  D  E  F  G  H  I  J  K  L  M  N  O\n * 5  P  Q  R  S  T  U  V  W  X  Y  Z  [  \\  ]  ^  _\n * 6     a  b  c  d  e  f  g  h  i  j  k  l  m  n  o\n * 7  p  q  r  s  t  u  v  w  x  y  z\n * 8\n * 9\n * A\n * B\n * C\n * D\n * E\n * F\n * \n */\n// One uvec4 => 16 characters\n#define STRING (uvec4(0x84569702,0x35861646,0x562747F6,0x970212))\n#define fontChannel (iChannel1)\n#define SPACE_CHAR (0x02U)\n#define STOP_CHAR (0x0AU)\n\nvec4 fontCol;\nvec3 fontColFill;\nvec3 fontColBorder;\nvec4 fontBuffer;\nvec2 fontCaret;\nfloat fontSize;\nfloat fontSpacing;\nvec2 fontUV;\n\nvec4 fontTextureLookup(vec2 xy)\n{\n    /* low quality font lookup */\n    /*return texture(fontChannel,xy);*/\n    \n    /* high quality font lookup*/\n\tfloat dxy = 1024.*1.5;\n\tvec2 dx = vec2(1.,0.)/dxy;\n\tvec2 dy = vec2(0.,1.)/dxy;\n\n    return \n        (    texture(fontChannel,xy + dx + dy)\n        +    texture(fontChannel,xy + dx - dy)\n        +    texture(fontChannel,xy - dx - dy)\n        +    texture(fontChannel,xy - dx + dy)\n        + 2.*texture(fontChannel,xy)\n        )/6.\n    ;\n}\n\nvoid drawStr4(uint str)\n{\n    if( str < 0x100U )\n        str = str * 0x100U + SPACE_CHAR;\n    \n    if( str < 0x10000U )\n        str = str * 0x100U + SPACE_CHAR;\n    \n    if( str < 0x1000000U )\n        str = str * 0x100U + SPACE_CHAR;\n    \n    for( int i = 0; i < 4; i++)\n    {\n      uint xy = (str >> 8*(3 - i)) % 256U;\n      if( xy != SPACE_CHAR )\n      {\n          vec2 K = (fontUV-fontCaret)/fontSize;\n          if( length(K) < .6 ) /* lookup skipping : avoid useless font texture lookup */\n          {\n              vec4 Q = fontTextureLookup(\n                     ( K\n                      + vec2(float(xy/16U) + .5  ,  16. - float(xy%16U) - .5)\n                     )/16.)\n                 /* * ( step(length(K),.5)) */\n              ;\n              fontBuffer.rgb += Q.rgb * smoothstep(.6,.4,length(K));\n\n              if( max(abs(K.x),abs(K.y)) < .5 )\n              {\n                fontBuffer.a = min(Q.a,fontBuffer.a);\n              }\n          }\n      }\n      \n        if( xy != STOP_CHAR ) fontCaret.x += fontSpacing*fontSize;\n    }\n}\n\nvoid beginDraw()\n{\n    fontBuffer = vec4(.0,.0,.0,1.);\n    fontCol = vec4(.0);\n    fontCaret.x += fontSpacing*fontSize/2.;\n}\n\nvoid endDraw()\n{\n    float a = smoothstep(1.,.0, smoothstep(.51,.53,fontBuffer.a));\n    float b = smoothstep(.0,1.,smoothstep(.48,.51,fontBuffer.a));\n    \n    fontCol.rgb = mix( fontColFill , fontColBorder , b );\n    fontCol.a = a;\n}\n\nvoid _(uint str)\n{\n    beginDraw();\n    drawStr4(str);\n    endDraw();\n}\n\nvoid _(uvec2 str)\n{\n    beginDraw();\n    drawStr4(str.x);\n    drawStr4(str.y);\n    endDraw();\n}\n\nvoid _(uvec3 str)\n{\n    beginDraw();\n    drawStr4(str.x);\n    drawStr4(str.y);\n    drawStr4(str.z);\n    endDraw();\n}\n\nvoid _(uvec4 str)\n{\n    beginDraw();\n    drawStr4(str.x);\n    drawStr4(str.y);\n    drawStr4(str.z);\n    drawStr4(str.w);\n    endDraw();\n}\n\n    #define _2(a,b) (_(uvec2(a,b)))\n    #define _3(a,b,c) (_(uvec3(a,b,c)))\n    #define _4(a,b,c,d) (_(uvec4(a,b,c,d)))\n\nvec2 viewport(vec2 b)\n{\n    return (b / iResolution.xy - vec2(.5))*vec2(iResolution.x/iResolution.y,1.);\n}\n\nvoid mainImage( out vec4 outCol, in vec2 coord )\n{\n    coord = viewport(coord);\n    fontCaret = iMouse.z > .5 ? viewport(iMouse.xy) : vec2(-.65,-.1);\n    fontSize = mix(.2,1.2,pow(cos(iTime*2.)*.5+.5,8.));\n    fontSpacing = .45;//.9;\n    fontUV = coord;\n    fontColFill = vec3(1.);\n    fontColBorder = vec3(.0);\n\n    _(STRING);\n    /*\n            beginDraw();\n        \tdrawStr4(0xA7210A0AU);\n    \n        \tdrawStr4(0xA72102U);\n        endDraw();\n    */\n    \n    outCol = mix( vec4(.8,.3,.1,1.) , vec4(.7,.2,.6,1.) , length(coord) );\n    outCol = mix( outCol , fontCol , fontCol.a);\n}","name":"Image","description":"","type":"image"}]}