{"ver":"0.1","info":{"id":"tt2XWh","date":"1565786436","viewed":86,"name":"Hello Voronoi 2","username":"2YY","description":"more typical voronoi looks","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * https://thebookofshaders.com/12/\n */\nvec2 random2(vec2 p) {\n\treturn fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Some variables\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    float gridLength = 3. + sin(iTime * .2) * 10. + 1.;\n    vec2 gridCoords = floor(uv * gridLength);\n    vec2 gridFrag = fract(uv * gridLength);\n\n    // Calc min distance to random point by grid\n    float minDist = 1.;\n    for(int x=-1; x<=1; x++) {\n        for(int y=-1; y<=1; y++) {\n        \tvec2 neighborGridCoords = vec2(float(x), float(y));\n            vec2 randomPoint = random2(neighborGridCoords + gridCoords);\n            randomPoint = sin(iTime * randomPoint) * 0.5 + .5;\n            minDist = min(minDist, length(neighborGridCoords + randomPoint - gridFrag));\n        }\n    }\n\n    // Apply Post Effect\n    vec3 color = vec3(minDist);\n    //color += step(.5, sin((20. * (uv.y * gridLength * 2.) + 10.) * color)) * (.2 + (sin(iTime * 2.) * .1 + .1));\n    color.r += uv.x * .1 + (sin(iTime) * .5 + .5) * .2;\n    color.g += uv.x * .1;\n    color.b += (1.-uv.y) * .1;\n    \n    // Apply Post Effect (Part 2)\n    color += step(.5, color) * uv.x * .1;\n    \n    // Apply Post Effect (Part 3);\n    color.r -= uv.x * .06;\n    color.g -= (1.0-uv.x) * .03;\n    color.b += (2.0-uv.y) * .1;\n\n    // Draw\n    fragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}