{"ver":"0.1","info":{"id":"dlVcRz","date":"1700264274","viewed":91,"name":"Image Based Dithering","username":"bebop_artist","description":"Dithering Algorithm","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define UV_ORIGIN 0.5\n#define ZOOM 1.0\n#define SPEED 3.0\n\nconst float PI = 3.14;\n\nvec2 hash( vec2 p ) {\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n    //The output must be between 0.0 and 1.0\n\treturn -1.0 + 2.0*fract(cos(p) * 43758.5453123);\n}\n\nfloat quantize(float inp, float period)\n{\n    return floor((inp)/period)*period;\n}\nvec2 quantize(vec2 inp, vec2 period)\n{\n    return floor((inp)/period)*period;\n}\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, \n                 s,  c );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += hash(uv)/500.0f;\n    vec4 noise = texture(iChannel0, uv*vec2(100.0f));\n    // Time varying pixel color\n    //uv = uv + (noise.xx-0.5f)*0.5f;\n    vec4 im = texture(iChannel1,uv);\n    float steps = 1000.f;\n    float freq = (200.0f/iResolution.x)*quantize(1.0f-quantize(im.x,steps), 1.f/steps);\n    vec2 uv2 = fragCoord;\n    vec2 quv = quantize(uv,vec2(1.0f/steps,1.0f/steps));\n    uv2 *= rotationMatrix(60.0f);\n    float wave = mod(freq*uv2.x,1.0f);\n    bool d = wave < quantize(im.x,1.f/steps);\n    vec2 coord = fragCoord;\n    int aa = 16;\n    vec2 pert = (1.0f/iResolution.xy)/float(aa);\n    for (int i = 0; i < aa; i++){\n        for(int j = 0; j < aa; j++){\n           coord += vec2(pert.x,0);\n           \n        }\n        coord += vec2(0,pert.y);\n    }\n    vec3 col = vec3(d,d,d);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}