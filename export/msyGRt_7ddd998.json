{"ver":"0.1","info":{"id":"msyGRt","date":"1679273521","viewed":134,"name":"Weekly Shader 2 : Borealis","username":"LoganOracio","description":"M83 STARWAVES\n\nThe sky above the port was the color of a television tuned to a dead channel","likes":9,"published":1,"flags":96,"usePreview":0,"tags":["stars","m83"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nWAIT FOR IT\nGOOD THINGS TAKE TIME\n\nMusic : Starwaves by M83\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV = fragCoord/iResolution.xy;\n    float noise = (hash13(vec3(floor(fragCoord.xy/1.0),floor(iTime*12.5)))-.5)*8.0;\n    noise = exp(noise)/(exp(noise)+1.0)-.5;\n    \n    vec3 colored_noise = hash33(vec3(floor(fragCoord.xy/1.0),floor(iTime*12.5)))-.5;\n    \n    vec4 glow = fast_gaussian_blur(iChannel1,UV,iResolution.xy,vec2(0.0,1.0),BLUR,1.0);\n    fragColor = texture(iChannel0,UV);\n    fragColor += 0.002;\n    fragColor *= vec4(1.0+noise*0.1,1.0+noise*0.1,1.0+noise*0.2,1.0);\n    fragColor += vec4(colored_noise*vec3(2.0,0.8,0.5)*0.004,1.0);\n    fragColor += glow*0.5;\n    fragColor *= 2.0;\n    fragColor = vec4(pow(fragColor.x,1.1),pow(fragColor.y,1.1),pow(fragColor.z,1.05),1.0);\n    fragColor *= 3.0;\n    fragColor = vec4(sRGB(fragColor.xyz),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy);\n    float test =(smp/1e5-iTime/1e14)*SEED;\n    \n    fragColor = vec4(test);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SEED 1e20\n#define smp abs(exp(0.5+uv.y*1e-4))\n\n#define BLUR 3.0\nconst float inv_sqrt_2pi = 0.3989422804014327;\nfloat gaussianf(float sigma, float dist)\n{\n    float a = dist / sigma;\n    return (inv_sqrt_2pi / sigma ) * exp( -0.5 * a * a );\n}\nvec4 gamma(vec4 col, float gam)\n{\n    return vec4(pow(col.x,gam),pow(col.y,gam),pow(col.z,gam),pow(col.w,gam));\n}\nvec4 fast_gaussian_blur(sampler2D image, vec2 uv,vec2 resolution, vec2 direction, float blur, float gammav)\n{\n    vec4 color = vec4(0.0);\n    float coef = gaussianf(blur,0.0);\n    color += texture(image, uv) * coef;\n    float kernel_s = blur * 4.0;\n    float prev = gaussianf(blur, 0.0);\n    for (float i = 0.0; i < kernel_s; i++) {\n        float w1 = prev; \n        float w2 = gaussianf(blur, i + 1.0);\n        prev = w2;\n        float c = w1 + w2;\n        vec2 off1 = vec2((i * w1 + (i + 1.0) * w2) / c) * direction / resolution;\n        color += gamma(texture(image, uv + off1 ),gammav) * c;\n        color += gamma(texture(image, uv - off1 ),gammav) * c;\n        coef += c + c;\n    }\n\n    return color/coef;\n}\n// Took those from mrange :\n// License: Unknown, author: nmz (twitter: @stormoid), found: https://www.shadertoy.com/view/NdfyRM\nvec3 sRGB(vec3 t) {\n  return mix(1.055*pow(t, vec3(1./2.4)) - 0.055, 12.92*t, step(t, vec3(0.0031308)));\n}\n\n// License: Unknown, author: Matt Taylor (https://github.com/64), found: https://64.github.io/tonemapping/\nvec3 aces_approx(vec3 v) {\n  v = max(v, 0.0);\n  v *= 0.6f;\n  float a = 2.51f;\n  float b = 0.03f;\n  float c = 2.43f;\n  float d = 0.59f;\n  float e = 0.14f;\n  return clamp((v*(a*v+b))/(v*(c*v+d)+e), 0.0f, 1.0f);\n}\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1., 2. / 3., 1. / 3., 3.);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6. - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0., 1.), c.y);\n}\n\n// GLSL Murmur Hash functions by mpottinger  https://gist.github.com/mpottinger/54d99732d4831d8137d178b4a6007d1a\nuint murmurHash13(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 1 output, 3 inputs\nfloat hash13(vec3 src) {\n    uint h = murmurHash13(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nuvec3 murmurHash33(uvec3 src) {\n    const uint M = 0x5bd1e995u;\n    uvec3 h = uvec3(1190494759u, 2147483647u, 3559788179u);\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y; h *= M; h ^= src.z;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\n\n// 3 outputs, 3 inputs\nvec3 hash33(vec3 src) {\n    uvec3 h = murmurHash33(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Mt2XDd","filepath":"https://soundcloud.com/m83/starwaves?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/m83/starwaves?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float volume = 0.3+2.0*clamp(2.0*pow((texelFetch(iChannel0,ivec2(300,0),0).x+texelFetch(iChannel0,ivec2(230,0),0).x+texelFetch(iChannel0,ivec2(160,0),0).x+texelFetch(iChannel0,ivec2(100,0),0).x)*0.5,6.0),0.0,3.0);\n    //volume = 6.3; // UNCOMMENT THIS IF YOU ARE IMPATIENT \n    vec2 UV = fragCoord/iResolution.xy;\n    vec2 dv = 1.0/iResolution.xy;\n    \n    float sky = texture(iChannel1,UV).x;\n    \n    vec2 uv = UV;\n    uv *= mat2(1.0,7.2-UV.x*0.8,-0.05,2.0);\n    uv -= vec2(0.1,0.0);\n    float road = smoothstep(1.1,1.1-20.0*dv.x,uv.x);\n    float bande = smoothstep(0.04,0.02,max(abs(uv.x-.8),-0.00+0.1*abs(mod(uv.y*3.0+iTime*1.7,1.0)-.5)));\n    sky = mod(abs(sky/SEED-smp/1e5+iTime/1e14)*1e13,1.);    // smp takes the \"wrong\" uvs but the result is better : There are no mistakes, just happy little accidents\n    \n    float light = 1.0/(1.0+pow(10.0*length(vec2((uv.x-.5)/2.0,(0.7*mod(uv.y+iTime*1.0,3.0)-0.5))),2.0));\n    uv = UV*mat2(1.6,-0.0,0.05,1.0);\n    uv.x -= iTime*0.02;\n    float height = cos(uv.x*16.0)+cos(uv.x*95.0)*0.2+cos(uv.x*34.0+1.9)*0.6+cos(uv.x*21.0)*0.5+cos(uv.x*192.0+2.0)*0.2+cos(uv.x*467.0)*0.07+cos(uv.x*642.0)*0.05;\n    height = height*0.02+0.4;\n    float landscape = smoothstep(height,height-dv.y*10.0,uv.y);\n    \n    fragColor = vec4(pow(fwidth(sky)/2.,5.0)*(vec3(1.0)-normalize(exp(2.0*hsv2rgb(vec3(sky*6.0,1.0,1.0))))),1.0)*(volume);\n    \n    fragColor = mix(fragColor,1.2*texture(iChannel2,UV),0.75);\n    vec3 mtn = vec3(1.0)-normalize(exp(0.2*hsv2rgb(vec3(uv.x+height*5.0+iTime*0.7,1.0,1.0))));\n    mtn *= volume;\n    fragColor = mix(fragColor,vec4(0.6,0.75,1.0,1.0),0.012/pow(1.0+abs(uv.y-0.3)*3.0,2.0));\n    fragColor += 0.03*vec4(mtn,1.0)/pow(1.0+abs(uv.y-0.3)*3.0,2.0);\n    mtn *= 0.03/(1.0+pow(15.0*abs(uv.y-height-0.02),2.0));\n    vec4 borealis_ground = 0.003*vec4(vec3(1.0)-normalize(exp(0.3*hsv2rgb(vec3(5.0+iTime*0.7,1.0,1.0)))),1.0);\n    \n    fragColor = mix(fragColor, vec4(mtn,1.0),landscape);\n    fragColor = mix(fragColor,vec4(0.05,0.05,0.05,1.0)*(vec4(1.0,1.0,1.2,1.0)*vec4(light/exp(volume))+vec4(0.05)),road);\n    fragColor = mix(fragColor,vec4(0.8,0.8,0.8,1.0)*vec4(1.0,1.0,1.2,1.0)*vec4(light/exp(volume))+vec4(0.05),bande);\n    fragColor += road*borealis_ground*(volume-0.3);\n    fragColor = vec4(aces_approx(fragColor.xyz),1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//BLUR X\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = fast_gaussian_blur(iChannel0,uv,iResolution.xy,vec2(1.0,0.0),BLUR,2.0).xyz;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}