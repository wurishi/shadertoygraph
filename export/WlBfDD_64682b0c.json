{"ver":"0.1","info":{"id":"WlBfDD","date":"1598911588","viewed":104,"name":"Lamest possible - 001b","username":"______","description":"a very simple 3d ray-something for mostly teaching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["educational"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// **** Lamest possible raymarcher (correct for shadertoy)\n\nbool hitsomething(vec3 p)\n{\n    // a sphere with radius 0.1 in the center of the world\n    \n    return length(p) < 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n\n    vec2 r = fragCoord/iResolution.xy;\n\n    // camera position : 4 units behind the center of the world\n\n    vec3 pos = vec3(0,0,-4);\n    \n    // direction to step based on which pixel we are calculating\n    \n    float aspect = iResolution.x / iResolution.y;\n    float fieldOfView = 2.0;\t\t// 1.0 is is a 90 degrees field of view. for details, google \"Trigonometry\".\n\tvec3 step = vec3((r.x-0.5)*fieldOfView*aspect,(r.y-0.5)*fieldOfView,1.0) * 0.1;\n\n    // output color\n    \n    vec4 color = vec4(0);\n\n    // \"raymarch\" loop\n    \n    for(int i=0;i<100;i++)\n    {\n        pos += step;\t\t\t\t// step forward\n        if(hitsomething(pos))\t\t// hit something?\n        {\n            color = vec4(0.5);\t\t// yes, change output color\n            break;\n        }\n    }\n\n    // Output to screen\n    \n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}