{"ver":"0.1","info":{"id":"ddXBRB","date":"1688870349","viewed":48,"name":"GoombasQuantizers","username":"Goomba00","description":"Poorly quantizes colors\nquantizeCC is meant to color correct","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["quantization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int paletteSize = 4;\nconst float maximum = .8;\nconst float cc = 1.0;\n\n\nvec3 quantize(vec3 col, int size, float maximum){\n    \n    float increment = maximum / float(size);\n    \n    vec3 quantized;\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.r > i * increment){\n            quantized.r = i * increment;\n        }\n    }\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.g > i * increment){\n            quantized.g = i * increment;\n        }\n    }\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.b > i * increment){\n            quantized.b = i * increment;\n        }\n    }\n    \n    return quantized;\n    \n}\n\nvec3 quantizeCC(vec3 col, int size, float maximum){\n    \n    float increment = maximum / float(size);\n    \n    vec3 quantized;\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.r > i * increment){\n            quantized.r = i * increment;\n        }\n    }\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.g > i * increment){\n            quantized.g = i * increment;\n        }\n    }\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.b > i * increment){\n            quantized.b = i * increment;\n        }\n    }\n    \n    \n    \n    float avg = (quantized.r + quantized.g + quantized.b) / 3.0;\n   \n   \n    // UNCOMMENT FOR SOMETHING COMPLETELY DIFFERENT //\n    //quantized *= 1.0 - avg;\n    \n    \n    quantized -= cc * (quantized - avg) * abs(quantized - avg);\n    \n    return quantized;\n    \n}\n\nvec3 quantizeCC2(vec3 col, int size, float maximum){\n    \n    float increment = maximum / float(size);\n    \n    vec3 quantized;\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.r > i * increment){\n            quantized.r = i * increment;\n        }\n    }\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.g > i * increment){\n            quantized.g = i * increment;\n        }\n    }\n    \n    for(float i = 0.0; i < float(size); i++){\n        if(col.b > i * increment){\n            quantized.b = i * increment;\n        }\n    }\n    \n    \n    \n    float avg = (quantized.r + quantized.g + quantized.b) / 3.0;\n   \n   \n    // UNCOMMENT FOR SOMETHING COMPLETELY DIFFERENT //\n    //quantized *= 1.0 - avg;\n    \n    vec3 percent = quantized * .1;\n    \n    if(quantized.r == max(quantized.r,max(quantized.g, quantized.b))){\n        quantized.r -= percent.r;\n        quantized.g += percent.r;\n        quantized.b += percent.r;\n    }else if(quantized.g == max(quantized.r,max(quantized.g, quantized.b))){\n        quantized.r += percent.g;\n        quantized.g -= percent.g;\n        quantized.b += percent.g;\n    }else if(quantized.b == max(quantized.r,max(quantized.g, quantized.b))){\n        quantized.r += percent.b;\n        quantized.g += percent.b;\n        quantized.b -= percent.b;\n    }\n    \n    return quantized;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    col = quantizeCC(col, paletteSize, maximum);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}