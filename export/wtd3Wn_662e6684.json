{"ver":"0.1","info":{"id":"wtd3Wn","date":"1576174284","viewed":438,"name":"Controlled Metaballs 2","username":"genvvk","description":"controlled struct based on https://www.shadertoy.com/view/4dj3zh","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nconst float threshold = 3.0;\nconst float density = 1000.0;\nconst float norm = 2.0;\n\nfloat pixelPower;\nvec2 fragCoord;\nvec4 mixColor;\n\nstruct Metaball{\n \n    vec2 position;\n    float radius;\n    vec3 color;\n    float power;\n    \n};\n    \nMetaball balls[6];\n    \nfloat Norm(float num_) { return pow(num_, norm); }\n\nMetaball setMetaball(vec2 position_, float radius_, vec3 color_){\n    \n    Metaball m;\n    m.position = position_;\n    m.radius = radius_;\n    m.color = color_;\n    \n    vec2 pixelPosition = fragCoord.xy / iResolution.xy;\n    pixelPosition.x = pixelPosition.x * iResolution.x / iResolution.y;\n    vec2 distanceVector = pixelPosition - position_;\n    distanceVector = vec2(abs(distanceVector.x), abs(distanceVector.y));\t\n\tfloat normDistance = Norm(distanceVector.x) + Norm(distanceVector.y);\n    \n    m.power = Norm(radius_) / normDistance;\n    \n    return m;\n    \n}  \n\nfloat updatePower(int i_){\n    \n    vec2 pixelPosition = fragCoord.xy / iResolution.xy;\n    pixelPosition.x = pixelPosition.x * iResolution.x / iResolution.y;\n    vec2 distanceVector = pixelPosition - balls[i_].position;\n    distanceVector = vec2(abs(distanceVector.x), abs(distanceVector.y));\t\n\tfloat normDistance = Norm(distanceVector.x) + Norm(distanceVector.y);\n    balls[i_].power = Norm(balls[i_].radius) / normDistance;\n    \n    return Norm(balls[i_].radius) / normDistance;\n    \n}  \n\nvec3 calculateColor(float power_)\n{\n\tvec3 val = vec3(0.0);\n\t\t\t\t\t\n\tfor(int i = 0; i < 6; i++)\n\t{\n\t\tval += balls[i].color * (updatePower(i) / power_);\n\t}\n\t\n\treturn val;\n}\n\nvec4 drawMetaballs(){\n    \n    vec4 color = vec4(0.);\n    vec3 val;\n    int powerMeta = 0;\n\tfloat maxPower = 0.0;\n    \n    vec2 p0 = vec2(0.33, 0.5);\n    vec2 p1 = vec2(1.33, 0.5);\n    \n    vec2 dp0 = mix(p0, p1, (cos(iTime) + 1.0) / 4.0);\n    vec2 dp1 = mix(p1, p0, (cos(iTime) + 1.0) / 4.0);\n    \n    vec2 dp2 = mix(p0, p1, (cos(iTime) + 1.0) / 8.0);\n    vec2 dp3 = mix(p1, p0, (cos(iTime) + 1.0) / 8.0);\n    \n    balls = Metaball[6](\n\n        setMetaball(vec2(0.30, 0.5), 0.25, vec3(0.0, 0.0, 1.0)),\n        setMetaball(dp0, 0.15, vec3(0.0, 0.0, 1.0)),\n        setMetaball(dp2, 0.06, vec3(0.0, 0.0, 1.0)),\n        setMetaball(vec2(1.30, 0.5), 0.25, vec3(0.0, 1.0, 0.0)),\n        setMetaball(dp1, 0.15, vec3(0.0, 1.0, 0.0)),\n        setMetaball(dp3, 0.06, vec3(0.0, 1.0, 0.0))\n        \n\t);\n    \n    for(int i = 0; i < 6; i++){\n\n\t\tpixelPower += balls[i].power;\n        \n        if(maxPower < balls[i].power)\n\t\t{\n\t\t\tmaxPower = balls[i].power;\n\t\t\tpowerMeta = i;\n\t\t}\n\t\tballs[i].power *= balls[i].radius;\n        \n    }\n    \n    val = calculateColor(maxPower);\n    \n    if(pixelPower < threshold || pixelPower > threshold + Norm(density))\n\t{\n\t\tval = vec3(0.0);\n\t}\n\t\n\tcolor = vec4(val, 1.0);\n    \n    return color;\n        \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 iFragCoord )\n{\n\n    fragCoord = iFragCoord.xy;\n    vec4 color = drawMetaballs();\n    fragColor = vec4(color);\n    \n}","name":"Image","description":"","type":"image"}]}