{"ver":"0.1","info":{"id":"MfdSRn","date":"1713519028","viewed":122,"name":"3-Tap Smoother Bilinear Filter","username":"pookshank","description":"this shader is an idea i had when reading about the filtering the n64 used for their textures. this was the best formation i came up with. you can increase the distance the samples go, but it results in a kind of \"drunk\" overlapping effect.\n ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blur","filter","bilinear","lightmaps","maxification"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float frac1(float value)\n{\n    return (value - trunc(value));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //this is useful for better lightmap filtering.\n    //it essentially looks like bilinear subdivided 8 times\n\n    //normalized pixel coordinates (from 0 to 1), correct aspect ratio for square texels\n    vec2 uv = (fragCoord/iResolution.xy) * vec2(iResolution.x / iResolution.y, 1);\n    \n    //click and drag on the screen to change scaling\n    if(iMouse.x > 0.0) { uv /= (2.0 / ((iMouse.xy / 512.0))) + 1.0; } \n    else { uv /= 8.0; } \n\n    //the size of one texel\n    vec2 texSize = 1.0 / iChannelResolution[0].xy;\n    \n    //sample in a triangular pattern to take advantage of bilinear filtering\n    \n    //each increment represents a quarter texel\n    //00 = center pixel shaded by bilinear\n    //SX = each sample numbered\n    \n    // () () () () () () ()\n    // () () () () () () ()\n    // () () () S1 () () ()\n    // () () () 00 () () ()\n    // () S2 () () () S3 ()\n    // () () () () () () ()\n    // () () () () () () ()\n    \n    vec4 base = texture(iChannel0, uv);\n    \n    //quarter texel up\n    fragColor = texture(iChannel0, uv + vec2(0.0, 0.25 * texSize.y), .5);\n    //half texel to the left, quarter texel down\n    fragColor += texture(iChannel0, uv + vec2(-0.5 * texSize.x, -0.25 * texSize.y));\n    //half texel to the right, quarter texel down\n    fragColor += texture(iChannel0, uv + vec2(0.5 * texSize.x, -0.25 * texSize.y));\n\n    //average the colors, this can be done above on final step but it's here for clarity\n    fragColor *= .33;\n    \n    //alternate between standard bilinear and the 3 tap every 2.5 seconds\n    fragColor = mix(fragColor, texture(iChannel0, uv), round((iTime * 0.2) - floor(iTime * 0.2)));   \n}","name":"Image","description":"","type":"image"}]}