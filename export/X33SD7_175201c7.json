{"ver":"0.1","info":{"id":"X33SD7","date":"1719102093","viewed":39,"name":"Color circle prioiritization","username":"smarchevsky","description":"If you have loop palette - you can prioritize color with this shader.\nYou can use it as complementary color picker.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["color","circle","gradient","palette","prioritization"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define SHARPER_PRIORITIZATION\n#ifdef SHARPER_PRIORITIZATION\n\n// pow 4\nfloat distribution(float x, float a, float offset) { return pow(0.5 - a * cos(x-offset), 4.); }\nfloat prioritize(float x, float a, float offset) { // integal of distribution function, normalized in range 0 ... TWO_PI\n    x -= offset;\n    float  a2 = a * a;\n    float  a3 = a2 * a;\n    float  a4 = a2 * a2;\n    float sinX = sin(x);\n    float  result = // thanks to https://mathdf.com/int/\n      (a4 * sin(4. * x)) / 32.\n    + (8. * a4 + 12. * a2) * sin(2. * x) / 32.\n    + (2. * a3 * sinX * sinX * sinX) / 3. \n    + (-64. * a3-16. * a) * sinX / 32.\n    + (3. * a4 * x) / 8. + (3. * a2 * x) / 4. + x / 16.;\n    \n    float  resultAt2piDivTwoPi = (3. * a4) / 8. + (3. * a2) / 4. + 1. / 16.;\n    \n    return result / resultAt2piDivTwoPi   // (x-x0) / (x1-x0) * TWO_PI;    // x0 = 0.    // x1 = TWO_PI*a2/2. + TWO_PI/4.;\n        + offset;\n}\n\n#else\n\n// pow 2\nfloat distribution(float x, float a, float offset) { return pow(0.5 - a * cos(x-offset), 2.); }\n\n// a is priority mag, makes sence in range -0.5 ... 0.5\nfloat prioritize(float x, float a, float offset) { // integal of distribution function, normalized in range 0 ... TWO_PI\n           x -= offset;\n    float  a2 = a * a;\n    float  result = (a2*sin(2.*x))/4. - a*sin(x) + (a2*x)/2. + x/4.; // thanks to https://mathdf.com/int/\n    return result / (a2/2. + 1./4.)   // (x-x0) / (x1-x0) * TWO_PI;    // x0 = 0.    // x1 = TWO_PI*a2/2. + TWO_PI/4.;\n        + offset;\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    uv=uv*2.-1.;\n    mo=mo*2.-1.;\n    uv.x *= iResolution.x / iResolution.y;\n    mo.x *= iResolution.x / iResolution.y;\n\n    vec2 polarCoord      = vec2(atan(uv.x, uv.y), length(uv));\n    vec2 polarCoordMouse = vec2(atan(mo.x, mo.y), length(mo));\n    float fw = fwidth(polarCoord.y);\n    \n    float priorityMag = clamp(polarCoordMouse.y * 0.5, .0, .5);\n    float priorityPositionOffset = polarCoordMouse.x;\n\n    float x = polarCoord.x;\n\n    x = sfloorTwoPi(x, 7., 0.0005 / polarCoord.y);\n\n    float distributionResult = distribution(x, priorityMag, priorityPositionOffset);\n    x = prioritize(x, priorityMag, priorityPositionOffset);\n    \n    \n\n    vec3 col = pal(x / TWO_PI, vec3(1), vec3(0, 0.333, 0.667) + 0.);\n\n    \n    float gradient = remap(polarCoord.y, 0.9, 1.);\n    col = mix(col,vec3(smoothstep(-10.*fw, 10.*fw, distributionResult - gradient)), smoothstep(0.9,0.9+fw, polarCoord.y));\n    //col = mix(col,vec3(smoothstep(-.02, .02, x - gradient)), 0.5*smoothstep(0.9,0.902, polarCoord.y));\n    \n    float digits = 0.;\n    digits+=PrintValue( (uv-vec2(0.7,0.8)) * 14., priorityMag,            2., 2.); //    top is priority\n    digits+=PrintValue( (uv-vec2(0.7,0.7)) * 14., priorityPositionOffset, 2., 2.); // bottom is offset\n    \n    fragColor = vec4(col+digits, 1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926535\n#define TWO_PI (PI * 2.)\n#define saturate(x) clamp(x, 0., 1.)\n\nfloat remap(float x, float a, float b) {return ((x-a)/(b-a));}\nvec3 pal( in float t, vec3 c, vec3 d ){ return .5 + .5 * cos( TWO_PI*(c*t + d) ); }\n\n\n\n// floor functions\nfloat sfract(float x, float fw) { fw = clamp(fw, 0., 0.99); return min((fract(x)) / (1. - fw), fract(-x) / fw ); }\nfloat sfloor(float x, float fw) { return max(floor(x), x - sfract(x, fw)); }\n\nfloat sfloorTwoPi(float x, float numLevels, float fw) { // smoother complicated floor\n    fw *= numLevels;\n    float numLevelsDiv2pi = numLevels / TWO_PI;\n    float sample1 = sfloor(x * numLevelsDiv2pi, fw);\n    float sample2 = -sfloor(-x * numLevelsDiv2pi, fw) - numLevelsDiv2pi;\n    return (sample1 + sample2) / numLevelsDiv2pi / 2.;\n}\n\nfloat floorTwoPi(float x, float numLevels, float fw /* unused, but simple switch between this and smooth */ ){ // default floor\n    float numLevelsDiv2pi = numLevels / TWO_PI;\n    return floor(x * numLevelsDiv2pi) / numLevelsDiv2pi;\n}\n\n\n\n// digits\n// https://www.shadertoy.com/view/4sBSWW\nfloat DigitBin( const int x ) { return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0; }\nfloat PrintValue( vec2 vStringCoords, float fValue, float fMaxDigits, float fDecimalPlaces )\n{       \n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n    \n    bool bNeg = ( fValue < 0.0 );\n\tfValue = abs(fValue);\n    \n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n","name":"Common","description":"","type":"common"}]}