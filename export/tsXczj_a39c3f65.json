{"ver":"0.1","info":{"id":"tsXczj","date":"1594909857","viewed":278,"name":"Circuit animation","username":"nicolaecodreanu","description":"Simple masking effects. Set values from 1 to 4 on line 7.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","masking","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ANIMATION_TIMESCALE 0.5\n#define ANIM_FUNC Quart\n\n//https://www.shadertoy.com/view/ltl3DB\n//https://www.shadertoy.com/view/4dc3zr\n\nint ANIMATION_TYPE = 3;\n\nfloat sdLine(in vec2 p, in vec2 a, in vec2 b) \n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba , ba), 0.0, 1.0);\n\treturn length(pa - ba * h);\n}\n\nfloat sdCircle(in vec2 p, in float r) \n{\n    return length(p)-r;\n}\n\nfloat sdRing(vec2 p, vec2 origin, float radius) \n{\n\treturn abs(length(p - origin) - radius);\n}\n\nfloat Quart(float s, float e, float t)\n{\n    t = clamp((t - s) / (e - s), 0.0, 1.0);\n    return 1.0 - pow(1.0 - t, 4.0);\n}\n\nfloat circuit(vec2 p) \n{\n\tfloat d = 1e6;\n\td = min(d, sdLine(p, vec2(-1.0, -0.1), vec2(-0.1, -0.1)));\n\td = min(d, sdLine(p, vec2(-0.1, -0.1), vec2(0.1, 0.1)));\n\td = min(d, sdLine(p, vec2(0.1, 0.1), vec2(1, 0.1)));\n\td = min(d, sdRing(p, vec2(1.05, 0.1), 0.05));\n    return d;\n} \n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) \n{\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = 2.0 * fragCoord / iResolution.xy - 1.0;\n    uv.x *= aspectRatio;\n    \n    vec3 col = vec3(0.0);\n    \n    //setup timer loop\n    float time = iTime * ANIMATION_TIMESCALE;\n    time = mod(time, 4.0);\n    \n    float mask;\n    float x = uv.x;\n        \n    if (ANIMATION_TYPE == 1)\n    {\n        //setup animation\n        float move = ANIM_FUNC(0.0, 1.0, time) - ANIM_FUNC(2.0, 3.0, time);\n\n        //setup mask\n        x += 2.0 * aspectRatio * (1.0 - move);\n        mask = smoothstep(-aspectRatio, -0.8, x) - smoothstep(0.8, aspectRatio, x);\n    }\n    \n    if (ANIMATION_TYPE == 2)\n    {\n        //setup animation\n        float moveIn = ANIM_FUNC(0.0, 1.0, time);\n        float fadeOut = ANIM_FUNC(3.0, 2.0, time);\n\n        //setup mask\n        x += 2.0 * aspectRatio * (1.0 - moveIn);\n        mask = smoothstep(-aspectRatio, -0.8, x) - smoothstep(0.8, aspectRatio, x);\n        mask *= fadeOut;\n    }\n    \n    if (ANIMATION_TYPE == 3)\n    {    \n        //setup animation\n        float moveIn = ANIM_FUNC(0.0, 1.0, time);\n        float moveOut = ANIM_FUNC(2.0, 3.0, time);\n\n        //setup mask\n        x += 2.0 * aspectRatio * (1.0 - moveIn - moveOut);\n        mask = smoothstep(-aspectRatio, -0.8, x) - smoothstep(0.8, aspectRatio, x);\n    }\n    \n    if (ANIMATION_TYPE == 4)\n    {    \n        //setup animation\n        float scale = ANIM_FUNC(0.0, 1.0, time) - ANIM_FUNC(2.0, 3.0, time);\n        \n        //setup mask     \n        x /= scale;\n        mask = smoothstep(-aspectRatio, -0.8, x) - smoothstep(0.8, aspectRatio, x); \n    }\n    \n    //draw circuit\n    float d = circuit(uv);\n    float shade = 0.008 / d;\n    col += vec3(1.0, 0.2, 0.0) * shade;\n    //col = mix(col, vec3(1.0, 0.2, 0.0), shade);\n    \n    //apply mask\n    col *= mask;\n    //col = vec3(mask);\n    \n    //output\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}