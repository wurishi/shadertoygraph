{"ver":"0.1","info":{"id":"mtsBWS","date":"1693414928","viewed":80,"name":"Sampled blur distortion","username":"Pi101","description":"The silliest of them all!","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["wave","triangle","blur","distortion","silly","deformation","wavy","glitch","sample","uniform","samples","disruption","deformed","fastdist"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Regular floats\nfloat Frequency = 5.0;\nfloat Amplitude = 0.1;\nfloat EpicGamerChange = 0.1;\nfloat Triangle = 5.0;\nfloat Speed = 1.0;\n\n// Pseudo-3D effect and constants\nfloat bluramount = 5.0;\nfloat center = 1.0;\nconst float stepSize = 0.004; // Real\nconst float steps = 3.0; // Real\nconst float minOffs = (float(steps - 1.0)) / -2.0;\nconst float maxOffs = (float(steps - 1.0)) / 2.0;\n\n// Function to create triangular distortion\nvec2 distort(vec2 uv) {\n    // Calculate time-based offset\n    float time = iTime * Speed;\n\n    // Apply triangular distortion\n    uv.x += Amplitude * sin(uv.y * Frequency + time);\n    uv.y += Amplitude * sin(uv.x * Frequency + time);\n\n    // Add some epic gamer change\n    uv.x += EpicGamerChange * sin(iTime);\n    uv.y += EpicGamerChange * cos(iTime);\n\n    // Apply additional triangular patterns\n    uv.x += Triangle * Amplitude * sin(uv.y * Frequency * 0.5 + time * 1.5);\n    uv.y += Triangle * Amplitude * sin(uv.x * Frequency * 0.5 + time * 1.5);\n\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Apply triangular distortion\n    uv = distort(uv);\n\n    // Apply the pseudo-3D effect\n    float amount = pow((uv.y * center) * 2.0 - 1.0, 2.0) * bluramount;\n    vec4 blurred = vec4(0.0, 0.0, 0.0, 1.0);\n\n    for (float offsX = minOffs; offsX <= maxOffs; ++offsX) {\n        for (float offsY = minOffs; offsY <= maxOffs; ++offsY) {\n            vec2 temp_tcoord = uv;\n            temp_tcoord.x += offsX * amount * stepSize;\n            temp_tcoord.y += offsY * amount * stepSize;\n            blurred += texture(iChannel0, temp_tcoord);\n        }\n    }\n\n    blurred /= float(steps * steps);\n    fragColor = blurred;\n}\n","name":"Image","description":"","type":"image"}]}