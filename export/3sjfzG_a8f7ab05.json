{"ver":"0.1","info":{"id":"3sjfzG","date":"1590448781","viewed":101,"name":"Voronoi Test :P","username":"hopeliz","description":"Voronoi pattern following a tutorial by The Art of Code: https://youtu.be/l-07BXzNdPw\nCreated for Day 13 of a 100 Days of Shaders and Textures project","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Pseudo-randomness\nvec2 N22(vec2 point) {\n    vec3 a = fract(point.xyx * vec3(123.45, 234.34, 345.65));\n    a += dot(a, a + 34.45);\n    return fract(vec2(a.x * a.y, a.y * a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Zooms out so it goes from -1.0 to 1.0\n    vec2 uv = (2.0 * fragCoord - iResolution.xy)/iResolution.y;\n\t\n    float m = 0.0;\n    \n    float time = iTime * 0.5;\n    float cellIndex = 0.0;\n    \n    // Initialize minDist at a large distance\n    float minDist = 100.0;\n    \n    vec3 color = vec3(0.0);\n    \n    // Multiply uv\n    uv *= 2.0;\n\n    // Make grid\n    vec2 gridUv = fract(uv) - 0.5;\n\n    // Determine grid cell\n    vec2 id = floor(uv);\n\n    vec2 cellId = vec2(0.0);\n\n    for (float y = -1.0; y <= 1.0; y++) {\n        for (float x = -1.0; x <= 1.0; x++) {\n            vec2 offset = vec2(x, y);\n            vec2 n = N22(vec2(id + offset));\n            vec2 point = offset + sin(n * time) * 0.5 ;\n\n            point -= gridUv;\n            // Euclidian distance\n            float eDist = length(point);\n\n            // Manhattan distance\n            float mDist = abs(point.x) + abs(point.y);\n\n            // Interpolate between distances\n            //float dist = mix(eDist, mDist, 0.5);\n            float dist = eDist;\n\n            if (dist < minDist) { \n                minDist = dist;\n                cellId = id + offset;\n            }\n        }\n        \n        // Visualize gridUv\n        //color.rb = gridUv;\n        \n        color = vec3(minDist);\n        color.rb = cellId * 0.01;\n        //color *= vec3(0.75, 0.3, 1.0);\n    }\n    \n    //vec3 color = vec3(minDist);   \n \t//vec3 color = vec3(cellIndex/50.0);   \n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}