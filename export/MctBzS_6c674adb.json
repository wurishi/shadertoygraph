{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"cubemap","id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":2,"type":"texture","id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define MAX_STEPS 300\n#define MAX_DIST 50.0\n#define EPS 0.001\n#define SMOOTH_FACTOR 0.03\n#define FRAME_LENGTH 0.075\n#define DELAY_TIME 3.0\n\nmat3 rotateY(float al, out mat3 reverse) \n{\n    float c = cos(al);\n    float s = sin(al);\n    reverse = mat3(\n        vec3( c,0,-s),\n        vec3( 0,1, 0),\n        vec3( s,0, c)\n    );\n    return mat3(\n        vec3( c,0,s),\n        vec3( 0,1,0),\n        vec3(-s,0,c)\n    );\n}\n\n\nfloat sMin(float a, float b, float k, out float mixC)\n{\n    // cubic polynomial\n    k *= 6.0;\n    float h = max( k-abs(a-b), 0.0 )/k;\n    float m = h*h*h*0.5;\n    float s = m*k*(1.0/3.0);\n    if (a < b) {\n        mixC = m;\n        return a - s;\n    }\n    mixC = 1.0 - m;\n    return b - s;\n}\n\n\nfloat sdBoxFrame(vec3 pos, vec3 b, float e ) \n{\n       pos = abs(pos  )-b;\n  vec3 q = abs(pos+e)-e;\n  return min(min(\n      length(max(vec3(pos.x,q.y,  q.z),0.0))+  min(max(pos.x,max(q.y,  q.z)),  0.0),\n      length(max(vec3(q.x,  pos.y,q.z),0.0))+  min(max(q.x,  max(pos.y,q.z)),  0.0)),\n      length(max(vec3(q.x,  q.y,  pos.z),0.0))+min(max(q.x  ,max(q.y,  pos.z)),0.0));\n}\n\nfloat sdPlane(vec3 p) \n{\n    return p.y;\n}\n\n\n\nfloat buildScene(vec3 p, float time, mat3 m, \n out vec3 offset, out float mixC) \n{\n     p = m * p;\n    float distPlane = sdPlane(p);\n    \n\n    if (time >= DELAY_TIME) \n    {\n        time -= DELAY_TIME;\n        offset = vec3(0, 1.0 + 1.5 * sin(time), 0);\n    } else \n    {\n        offset = vec3((DELAY_TIME-time) * 2.0, 0.7, 0);\n    }\n    float distBoxFrame = sdBoxFrame(p - offset, vec3(0.5, 0.7, 0.4), FRAME_LENGTH);\n    // return min(distPlane, distBoxFrame);\n    return sMin(distPlane, distBoxFrame, SMOOTH_FACTOR, mixC);\n}\n\n\n\nfloat trace(vec3 from, vec3 dir, float time, out bool hit, in mat3 m, \nout vec3 offset, out float mixC) \n{\n    hit = false;\n    float distPlane = 0.0;\n    float distBoxFrame = 0.0;\n    \n    float dist = 0.0;\n    for (int i = 0; i < MAX_STEPS; ++i) \n    {\n        vec3 p = from + dir * dist;\n        float d = buildScene(p, time, m, offset, mixC);\n        if (d < EPS )\n        {\n            hit = true; \n            return dist;\n        }\n        \n        dist += d;\n        if (dist > MAX_DIST)\n        {\n            break;\n        }\n    }\n    \n    return MAX_DIST;\n}\n\n\nvec3 generateNormal(vec3 p, float time, mat3 m) \n{\n    float e = EPS;\n    \n    float tmp2;\n    vec3 tmp1;\n    \n    float dx1 = buildScene(p + vec3(e, 0, 0), time, m, tmp1, tmp2);\n    float dx2 = buildScene(p - vec3(e, 0, 0), time, m, tmp1, tmp2);\n    float dy1 = buildScene(p + vec3(0, e, 0), time, m, tmp1, tmp2);\n    float dy2 = buildScene(p - vec3(0, e, 0), time, m, tmp1, tmp2);\n    float dz1 = buildScene(p + vec3(0, 0, e), time, m, tmp1, tmp2);\n    float dz2 = buildScene(p - vec3(0, 0, e), time, m, tmp1, tmp2);\n    \n    return normalize(vec3(dx1 - dx2, dy1 - dy2, dz1 - dz2));\n}\n\nvec3 triplanar(sampler2D s, vec3 p, vec3 offset, vec3 n) {\n    p -= offset;\n    vec3 b = max((abs(n) - 0.1) * 2.0, 0.0);\n    b /= b.x + b.y + b.z;\n\n    vec3 x = texture(s, p.yz * 0.9).rgb;\n    vec3 y = texture(s, p.xz * 0.9).rgb;\n    vec3 z = texture(s, p.xy * 0.9).rgb;\n\n    return x * b.x + y * b.y + z * b.z;\n}\n\nvec3 myTexture(vec3 p) {\n    if (abs(p.x) < 2.5 && abs(p.z) < 2.5) {\n        return vec3(1.0,  0.7, 0.3);\n    }\n    float tmp = 0.0;\n    float xC = modf(p.x*4.0, tmp);\n    float zC = modf(p.z*4.0, tmp);\n    bool xF = (abs(xC) > 0.5);\n    bool zF = (abs(zC) > 0.5);\n    if (xF || zF) \n    {\n        if (xF && zF) \n        {\n            return vec3(0.0);\n        }\n        return vec3(1.0,  0.7, 0.3);\n    }\n    return vec3(1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0.0);\n    bool hit;\n    \n    float time = iTime;\n    \n    vec3 mouse = vec3(iMouse.xy/iResolution.xy - 0.5, iMouse.z - 0.5);\n    mat3 reverse;\n    mat3 m = rotateY(6.0 * mouse.x, reverse);\n    \n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 light = vec3(-1.0, 3.0, 1.0);\n    vec3 eye = vec3(0.0, 2.2, 6.0);\n    vec3 dir = normalize(vec3(uv, -1.0));\n    \n    float mixC = 0.0;\n    vec3 offset;\n    float dist = trace(eye, dir, time, hit, m, offset, mixC);\n    if (hit) \n    {\n        vec3 p = eye + dir * dist;\n        vec3 n = generateNormal(p, time, m);\n        vec3 l = normalize(light - p);\n        float nl = max(0.0, dot(l, n));\n        \n        vec3 v = normalize(eye - p);\n        vec3 h = normalize(v + l);\n        float sp = pow(max(0.0, dot(n, h)), 50.0);\n        \n        vec3 planeColor = vec3(myTexture(p * reverse));\n        vec3 boxColor   = vec3(triplanar(iChannel2, p, offset, n));\n        \n        vec3 colorW;\n        \n        colorW = mix(planeColor, boxColor, mixC);\n        \n        color = (0.5 * nl + 0.5 * sp) * colorW;\n    } else \n    {\n        color = vec3(texture(iChannel0, m * dir).rgb);\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MctBzS","date":"1733767120","viewed":29,"name":"not gold frame","username":"TblKVANYA","description":"boz frame with textures","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""}}