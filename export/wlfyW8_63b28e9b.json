{"ver":"0.1","info":{"id":"wlfyW8","date":"1592013643","viewed":164,"name":"key input test (using buffer)","username":"darkfox","description":"using buffer to move squares.","likes":6,"published":1,"flags":48,"usePreview":0,"tags":["buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// key test.\n// red square: move while \"a\" key is pressed.\n// green square: move if \"b\" key is pressed.\n// blue square: move starts if \"c\" key is pressed.\n//              if pressed twice, it's stop.\n\n#define RED vec3(0.95, 0.3, 0.35)\n#define GREEN vec3(0.3, 0.9, 0.4)\n#define BLUE vec3(0.2, 0.25, 0.98)\n#define ORANGE vec3(0.98, 0.49, 0.13)\n\n// space.\n#define Ch__ 127\n// double quotation.\n#define Ch_dq 168\n// period, comma, apostrophe.\n#define Ch_prd 46\n#define Ch_com 44\n#define Ch_apt 39\n\n// small alphabets.\n#define Ch_a 97\n#define Ch_b 98\n#define Ch_c 99\n#define Ch_d 100\n#define Ch_e 101\n#define Ch_f 102\n#define Ch_g 103\n#define Ch_h 104\n#define Ch_i 105\n#define Ch_j 106\n#define Ch_k 107\n#define Ch_l 108\n#define Ch_m 109\n#define Ch_n 110\n#define Ch_o 111\n#define Ch_p 112\n#define Ch_q 113\n#define Ch_r 114\n#define Ch_s 115\n#define Ch_t 116\n#define Ch_u 117\n#define Ch_v 118\n#define Ch_w 119\n#define Ch_x 120\n#define Ch_y 121\n#define Ch_z 122\n\nvec4 getState(vec2 i){\n    return texture(iChannel0, (i + vec2(0.5)) / 128.0);\n}\n\nvec2 getCodePos(float code){\n    return vec2(mod(code, 16.0), 15.0 - floor(code / 16.0));\n}\n\nvec4 getCharLU(int charCode, vec2 p, vec2 lu, vec2 size, vec4 col){\n    // size: right, down.\n    float code = float(charCode);\n    if(p.x < lu.x || p.x > lu.x + size.x || p.y > lu.y || p.y < lu.y - size.y){\n        return vec4(0.0);\n    }\n\n    vec2 co = vec2(p.x - lu.x, lu.y - p.y) / size;\n    co.y = 1.0 - co.y;\n\n    vec4 tex = texture(iChannel1, (co + getCodePos(code)) / 16.0);\n    if(tex.r < 0.5 * (tex.g + tex.b)){ return vec4(0.0); }\n    return col;\n}\n\nvec4 Ch(vec2 p, int CharCode, float x, float y){\n    return getCharLU(CharCode, p, vec2(x, y), vec2(0.08, 0.1), vec4(ORANGE, 1.0));\n}\n\n// square. if inner, return 0.0ï½ž1.0.\nfloat square(vec2 p, float size){\n    return 1.0 - max(abs(p.x), abs(p.y)) * 2.0 / size;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 p = fragCoord.xy / min(iResolution.x, iResolution.y);\n    vec4 tex_r = getState(vec2(1., 0.));\n    vec4 tex_g = getState(vec2(2., 0.));\n    vec4 tex_b = getState(vec2(3., 0.));\n    \n    // bg.\n    vec4 bg = vec4(vec3(p.y) * 0.5, 1.0);\n    \n    vec4 col = vec4(0.0);\n    float redSq = square(p - tex_r.xy, 0.1);\n    float greenSq = square(p - tex_g.xy, 0.1);\n    float blueSq = square(p - tex_b.xy, 0.1);\n    \n    // draw Square.\n    \n    if(redSq > 0.0){ col += vec4(mix(RED, vec3(1.0), redSq), 1.0); }\n    if(greenSq > 0.0){ col += vec4(mix(GREEN, vec3(1.0), greenSq), 1.0); }\n    if(blueSq > 0.0){ col += vec4(mix(BLUE, vec3(1.0), blueSq), 1.0); }\n    \n    vec4 texCol = vec4(ORANGE, 1.0);\n    vec2 texSize = vec2(0.08, 0.1);\n    \n    int words_a[30] = int[30](Ch_m, Ch_o, Ch_v, Ch_e, Ch__,\n                              Ch_w, Ch_h, Ch_i, Ch_l, Ch_e, Ch__,\n                              Ch_dq, Ch_a, Ch_dq, Ch__, Ch_k, Ch_e, Ch_y, Ch__,\n                              Ch_i, Ch_s, Ch__, Ch_p, Ch_r, Ch_e, Ch_s, Ch_s,\n                              Ch_e, Ch_d, Ch_prd);\n    for(int i = 0; i < 30; i++){\n        col += Ch(p, words_a[i], 0.08 + 0.04 * float(i), 0.9);\n    }\n    \n    int words_b[27] = int[27](Ch_m, Ch_o, Ch_v, Ch_e, Ch__,\n                              Ch_i, Ch_f, Ch__,\n                              Ch_dq, Ch_b, Ch_dq, Ch__, Ch_k, Ch_e, Ch_y, Ch__,\n                              Ch_i, Ch_s, Ch__, Ch_p, Ch_r, Ch_e, Ch_s, Ch_s,\n                              Ch_e, Ch_d, Ch_prd);\n    for(int i = 0; i < 27; i++){\n        col += Ch(p, words_b[i], 0.08 + 0.04 * float(i), 0.6);\n    }\n\n    int words_c1[34] = int[34](Ch_m, Ch_o, Ch_v, Ch_e, Ch__,\n                              Ch_s, Ch_t, Ch_a, Ch_r, Ch_t, Ch_s, Ch__,\n                              Ch_i, Ch_f, Ch__, Ch_dq, Ch_c, Ch_dq, Ch__,\n                              Ch_k, Ch_e, Ch_y, Ch__,\n                              Ch_i, Ch_s, Ch__, Ch_p, Ch_r, Ch_e, Ch_s, Ch_s,\n                              Ch_e, Ch_d, Ch_prd);\n    for(int i = 0; i < 34; i++){\n        col += Ch(p, words_c1[i], 0.08 + 0.04 * float(i), 0.3);\n    }\n\n    int words_c2[27] = int[27](Ch_i, Ch_f, Ch__,\n                              Ch_p, Ch_r, Ch_e, Ch_s, Ch_s, Ch_e, Ch_d, Ch__,\n                              Ch_t, Ch_w, Ch_i, Ch_c, Ch_e, Ch_com, Ch__,\n                              Ch_i, Ch_t, Ch__,\n                              Ch_s, Ch_t, Ch_o, Ch_p, Ch_s, Ch_prd);\n    for(int i = 0; i < 27; i++){\n        col += Ch(p, words_c2[i], 0.08 + 0.04 * float(i), 0.1);\n    }\n\n    fragColor = mix(bg, col, col.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// (0,0): start flag.\n// (1,0), (2,0), (3,0): control pos and velo.\n\n#define K_A 65\n#define K_B 66\n#define K_C 67\n\nvec4 initialize(vec2 i, vec4 cur){\n    if(i.x == 0.0 && i.y == 0.0){\n        return vec4(vec3(0.0), 1.0);\n    }else if(i.x > 0.5 && i.x < 3.5 && i.y == 0.0){\n        return vec4(0.15, 0.75 - 0.3 * (i.x - 1.0), 0.01, 0.0);\n    }\n    return cur;\n}\n\nvec4 move(vec4 cur){\n    vec2 pos = cur.xy;\n    pos += cur.zw;\n    vec2 velo = cur.zw;\n    if(pos.x > 1.45 || pos.x < 0.15){ velo *= -1.0; }\n    return vec4(pos, velo);\n}\n\nvec4 getState(vec2 i){\n    return texture(iChannel0, (i + vec2(0.5)) / 128.0);\n}\n\nbool getKeyState(int keyCode, int stateType){\n    return bool(texelFetch(iChannel1, ivec2(keyCode, stateType), 0).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 i = floor(p * 128.0);\n    vec4 cur = getState(i);\n    \n    vec4 initFlag = getState(vec2(0.0));\n    if(initFlag.a == 0.0){\n        // initialize.\n        fragColor = initialize(i, cur);\n        return;\n    }\n    // move.\n    if(i.x == 1.0 && i.y == 0.0 && getKeyState(K_A, 0)){\n        fragColor = move(cur);\n        return;\n    }\n    if(i.x == 2.0 && i.y == 0.0 && getKeyState(K_B, 1)){\n        fragColor = move(cur);\n        return;\n    }\n    if(i.x == 3.0 && i.y == 0.0 && getKeyState(K_C, 2)){\n        fragColor = move(cur);\n        return;\n    }\n    fragColor = cur;\n}","name":"Buffer A","description":"","type":"buffer"}]}