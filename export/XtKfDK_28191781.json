{"ver":"0.1","info":{"id":"XtKfDK","date":"1544101826","viewed":680,"name":"[liliilli] Old TV","username":"liliilli","description":"Distort nearly-outside of screen region, so render screen like to watch old television.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["posteffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float uIntensity = 0.03f; // Frame distortion intensity. 0.02 ~ 0.05 recommended. \nconst float uThreshold = 0.85f; // 0.75 ~ 0.90 would be recommended.\nconst float uMax       = 64.0f; // Distortion for edge of threshold.\nconst float uMargin    = 8.0f;  // Margin.\n\nfloat GetOverThreadsholdIntensity(const float a, const float t) {\n\tfloat b = pow(t, 2.0f) * (1.0f - (1.0f / uMax));\n\treturn uMax * pow(a - (t - (t / uMax)), 2.0f) + b;\n}\n\nbool IsOob(const vec2 inputTexCoord) {\n\treturn inputTexCoord.x > 1.0f || inputTexCoord.y > 1.0f \n        || inputTexCoord.x < 0.0f || inputTexCoord.y < 0.0f;\n}\n\nvec2 ApplyMargin(const vec2 texel, const float margin) {\n    vec2 m = vec2(margin * 4.0f) / iResolution.xy;\n\treturn (texel - 0.5f) * (1.0f + m) + 0.5f;\n}\n\nvec3 GetColor(const vec3 inputOffset) {\n\treturn 0.5f + 0.5f * cos(iTime + (inputOffset * 4.0f) + vec3(0, 2, 4));\n}\n\nfloat ScaleWithAxis(const float value, const float axis, const float scale) {\n\treturn (value - axis) * scale + axis;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t// Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \tfloat x = uv.x * 2.0f - 1.0f;\n\tfloat y = uv.y * 2.0f - 1.0f;\n    \n    // Distort uv coordinate, and if closer to frame bound, do more distortion.\n\tfloat x_intensity = uIntensity;\n\tfloat y_intensity = uIntensity;\n\tif (abs(x) >= uThreshold && abs(y) >= uThreshold) {\n\t\ty_intensity *= GetOverThreadsholdIntensity(abs(x), uThreshold);\n\t\tx_intensity *= GetOverThreadsholdIntensity(abs(y), uThreshold);     \n\t}\n\telse {\n\t\ty_intensity *= pow(x, 2.0f);\n\t\tx_intensity *= pow(y, 2.0f);\n\t}\n    \n    // Get texel and apply margin (px)\n    float y_offset \t= y_intensity * y;\n\tfloat x_offset \t= x_intensity * x;\n    vec2 finalTexel = ApplyMargin(uv + vec2(x_offset, y_offset), uMargin);\n\n    // ShaderToy does not support border (to be out-of-bound black color),\n    // so checking texel is out of bound.\n    if (IsOob(finalTexel) == false)\n    {\n        fragColor = texture(iChannel0, finalTexel);\n            //GetColor(finalTexel.xyx) * \n            //ScaleWithAxis(texture(iChannel0, finalTexel).r, 1.0f, 1.0f), 1.0f);\n    }\n}","name":"Image","description":"","type":"image"}]}