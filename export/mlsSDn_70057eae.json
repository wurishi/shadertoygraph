{"ver":"0.1","info":{"id":"mlsSDn","date":"1674603696","viewed":75,"name":"digit 5","username":"lech","description":"created by https://zduny.github.io/shadertoy-svg/","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rotate","digit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created using Shadertoy-SVG: https://zduny.github.io/shadertoy-svg/\n// For better performance, consider using buffers, see example: https://www.shadertoy.com/view/7lKGzR\n\nconst vec3 positions[105] = vec3[105](vec3(0.6825628947330881, -0.3710550678185647, 0), vec3(0.6565038658072808, -0.5131596280837964, 0), vec3(0.6052741073246116, -0.6430930218386022, 0), vec3(0.5306496993837263, -0.7549349820874969, 0), vec3(0.4278944932181431, -0.8507409409931161, 0), vec3(0.30233711810323244, -0.9250826905448177, 0), vec3(0.16034374112640626, -0.9733555894399859, 0), vec3(-0.0007482019425634771, -0.9970395099377758, 0), vec3(-0.19078604964155574, -0.9971217466732538, 0), vec3(-0.3702378220263495, -0.9780430833621827, 0), vec3(-0.517262972139996, -0.9435039786113173, 0), vec3(-0.636303645126282, -0.9033716737396094, 0), vec3(-0.6858301274944926, -0.8139394021904724, 0), vec3(-0.6858301274944926, -0.5163292918370068, 0), vec3(-0.6780568597171599, -0.4486906303930376, 0), vec3(-0.6438544814968964, -0.4486906303930376, 0), vec3(-0.5811501862563192, -0.4827370278600034, 0), vec3(-0.4650683501696598, -0.5419474774035358, 0), vec3(-0.3418062778687558, -0.5878349599156685, 0), vec3(-0.2180252421721131, -0.6115188804134588, 0), vec3(-0.11830420525666827, -0.6133280561790027, 0), vec3(-0.0377595303202986, -0.6041175418055642, 0), vec3(0.04626618640672465, -0.5842985209705291, 0), vec3(0.1155589828965744, -0.5494304044478497, 0), vec3(0.1621974874521715, -0.5058453884543119, 0), vec3(0.19240303715142557, -0.464398333093462, 0), vec3(0.21305862309059737, -0.4194973996724789, 0), vec3(0.2237192527964381, -0.3543666831334622, 0), vec3(0.2232750706970122, -0.2801905091611139, 0), vec3(0.20906098419576544, -0.22163873146026747, 0), vec3(0.18196548715136096, -0.17229669017399019, 0), vec3(0.14643091919730206, -0.13216438530228247, 0), vec3(0.09194410624843591, -0.09597957339328778, 0), vec3(0.014952110148602784, -0.06769039570877888, 0), vec3(-0.07240327053908667, -0.05288781573784851, 0), vec3(-0.15413303615304538, -0.045650983015861124, 0), vec3(-0.24467383426104924, -0.04606216669324659, 0), vec3(-0.3471336105460105, -0.056588468834319006, 0), vec3(-0.4438932173655979, -0.07566735905005983, 0), vec3(-0.5291782550123243, -0.09540391624494782, 0), vec3(-0.5755220752312158, -0.10527209759753298, 0), vec3(-0.611353240004201, -0.10527209759753298, 0), vec3(-0.6194966865435158, -0.05777993715388918, 0), vec3(-0.6194966865435158, 0.2444429020329364, 0), vec3(-0.6194966865435158, 0.6502850003695306, 0), vec3(-0.6194966865435158, 0.952507839556356, 0), vec3(-0.5655975080680817, 1, 0), vec3(-0.2226027359516836, 1, 0), vec3(0.2379902437474795, 1, 0), vec3(0.5809850158638776, 1, 0), vec3(0.6348841943393116, 0.9414067311594569, 0), vec3(0.6348841943393116, 0.6835963482610676, 0), vec3(0.5993592293150458, 0.6250030794205246, 0), vec3(0.373291270069718, 0.6250030794205246, 0), vec3(0.06971429622599175, 0.6250030794205246, 0), vec3(-0.15635366301933618, 0.6250030794205246, 0), vec3(-0.1918786280436021, 0.5750451540293733, 0), vec3(-0.1918786280436021, 0.3552302823083081, 0), vec3(-0.17233435634924676, 0.30650590794931354, 0), vec3(-0.12613915868934691, 0.3084795896007646, 0), vec3(-0.07194978534818197, 0.31037103451673875, 0), vec3(-0.022201908851745722, 0.3116868222843727, 0), vec3(0.07085428960037528, 0.30987761410387604, 0), vec3(0.200555592292502, 0.2940881608922673, 0), vec3(0.3148584957646621, 0.2635786885947342, 0), vec3(0.4137630000168561, 0.22081688274474287, 0), vec3(0.5081524254812652, 0.15560512882350608, 0), vec3(0.5922523724504017, 0.059553140425466, 0), vec3(0.6518488840828321, -0.06043048354033487, 0), vec3(0.6820544337820861, -0.20977006129019227, 0), vec3(0.6858285877842303, -0.29603767719633955, 0), vec3(0.6858218130590763, -0.29605229634009267, 0), vec3(-0.6858301274944926, -0.4486906303930376, 0), vec3(-0.6858301274944926, -0.8815780636344421, 0), vec3(-0.6360812137195638, -0.4486906303930376, 0), vec3(-0.6194966865435158, 1, 0), vec3(-0.6194966865435158, -0.10527209759753298, 0), vec3(-0.567378628691901, -0.10527209759753298, 0), vec3(-0.44774878152192094, -0.9618426733778584, 0), vec3(-0.40391754154624504, -0.5671115294801026, 0), vec3(-0.39680855339844856, -0.06579898320775746, 0), vec3(-0.1918890008285263, -0.04474637892561262, 0), vec3(-0.1918786280436021, 0.3052723569171567, 0), vec3(-0.1918786280436021, 0.6250030794205246, 0), vec3(-0.15635547015295975, -0.6144793704756826, 0), vec3(-0.0994882327238026, 0.30921972022005895, 0), vec3(-0.08884523675233308, -1, 0), vec3(-0.028429469600608905, -0.05922004436958739, 0), vec3(0.000007520269070055098, 0.3118512957553271, 0), vec3(0.004733879719779126, -0.5960583417288059, 0), vec3(0.1255545225990568, -0.11579839973860562, 0), vec3(0.14331947269947834, -0.5263221086834471, 0), vec3(0.19662365850717464, -0.1960630094820217, 0), vec3(0.20373057209798648, -0.4434279979617475, 0), vec3(0.22505183150966804, -0.3131665648837143, 0), vec3(0.23333864938560664, -0.9526321590044196, 0), vec3(0.25941012565332333, 0.28027238933210974, 0), vec3(0.4572191341577104, 0.19474877763212695, 0), vec3(0.4844533996154286, -0.8039486599010173, 0), vec3(0.6254190280959844, 0.002644800836046901, 0), vec3(0.6337022154971994, -0.5802647394032276, 0), vec3(0.6348841943393116, 0.6250030794205246, 0), vec3(0.6348841943393116, 1, 0), vec3(0.685820273348814, -0.29605561887276366, 0), vec3(0.6858301274944926, -0.29603435466366856, 0));\nconst ivec3 triangles[103] = ivec3[103](ivec3(0, 1, 27), ivec3(0, 27, 94), ivec3(0, 94, 103), ivec3(1, 26, 27), ivec3(1, 100, 26), ivec3(2, 3, 25), ivec3(2, 25, 93), ivec3(2, 93, 100), ivec3(3, 24, 25), ivec3(3, 98, 24), ivec3(4, 5, 23), ivec3(4, 23, 91), ivec3(4, 24, 98), ivec3(4, 91, 24), ivec3(5, 95, 23), ivec3(6, 7, 89), ivec3(6, 22, 95), ivec3(6, 89, 22), ivec3(7, 21, 89), ivec3(7, 86, 21), ivec3(8, 9, 19), ivec3(8, 19, 84), ivec3(8, 84, 86), ivec3(9, 18, 19), ivec3(9, 78, 18), ivec3(10, 11, 12), ivec3(10, 12, 79), ivec3(10, 18, 78), ivec3(10, 79, 18), ivec3(11, 73, 12), ivec3(12, 13, 17), ivec3(12, 17, 79), ivec3(13, 14, 15), ivec3(13, 15, 74), ivec3(13, 16, 17), ivec3(13, 72, 14), ivec3(13, 74, 16), ivec3(20, 21, 86), ivec3(20, 86, 84), ivec3(22, 23, 95), ivec3(26, 100, 93), ivec3(28, 29, 69), ivec3(28, 69, 103), ivec3(28, 103, 94), ivec3(29, 68, 69), ivec3(29, 92, 99), ivec3(29, 99, 68), ivec3(30, 31, 97), ivec3(30, 66, 67), ivec3(30, 67, 92), ivec3(30, 97, 66), ivec3(31, 64, 65), ivec3(31, 65, 97), ivec3(31, 90, 64), ivec3(32, 33, 63), ivec3(32, 63, 96), ivec3(32, 96, 90), ivec3(33, 62, 63), ivec3(33, 87, 88), ivec3(33, 88, 62), ivec3(34, 35, 85), ivec3(34, 60, 61), ivec3(34, 61, 87), ivec3(34, 85, 60), ivec3(35, 58, 59), ivec3(35, 59, 85), ivec3(35, 81, 58), ivec3(36, 37, 82), ivec3(36, 82, 81), ivec3(37, 43, 82), ivec3(37, 80, 43), ivec3(38, 39, 42), ivec3(38, 42, 43), ivec3(38, 43, 80), ivec3(39, 77, 42), ivec3(40, 41, 42), ivec3(40, 42, 77), ivec3(41, 76, 42), ivec3(43, 44, 57), ivec3(43, 57, 82), ivec3(44, 45, 46), ivec3(44, 46, 83), ivec3(44, 56, 57), ivec3(44, 83, 56), ivec3(45, 75, 46), ivec3(46, 47, 83), ivec3(47, 48, 54), ivec3(47, 54, 55), ivec3(47, 55, 83), ivec3(48, 49, 53), ivec3(48, 53, 54), ivec3(49, 50, 53), ivec3(49, 102, 50), ivec3(50, 51, 53), ivec3(51, 52, 53), ivec3(51, 101, 52), ivec3(58, 81, 82), ivec3(61, 88, 87), ivec3(64, 90, 96), ivec3(67, 99, 92), ivec3(69, 70, 71), ivec3(69, 71, 103), ivec3(69, 104, 70));\nconst int len = 103;\n\nbool sameSide( vec3 p1, vec3 p2, vec3 a, vec3 b ) {\n    vec3 cp1 = cross(b-a, p1-a);\n    vec3 cp2 = cross(b-a, p2-a);\n      \n    return dot(cp1, cp2) >= 0.0;\n}\n\nbool pointInTriangle( vec3 p, vec3 a, vec3 b, vec3 c ) {\n    return sameSide(p, a, b, c) && sameSide(p, b, a, c) && sameSide(p, c, a, b);\n}\n\nbool inPath( vec2 p ) {\n    for (int i=0; i<len; i++) {\n        ivec3 triangle = triangles[i];\n        vec3 a = positions[triangle[0]];\n        vec3 b = positions[triangle[1]];\n        vec3 c = positions[triangle[2]];\n  \n        if (pointInTriangle(vec3(p, 0.0), a, b, c)) {\n            return true;\n        }\n    }\n  \n    return false;\n}\n\nvec2 rotate( vec2 v, float a ) {\n    float s = sin(a);\n    float c = cos(a);\n    mat2 m = mat2(c, -s, s, c);\n    return m * v;\n}\n      \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float step = 1.0 / iResolution.y;\n  \n    fragColor = vec4(vec3(0.0), 1.0);\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= 2.0;\n    uv -= vec2(1.0);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 1.4;\n    uv = rotate(uv, iTime * 0.2);\n\n    if (inPath(uv)) {\n        fragColor = vec4(1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}