{"ver":"0.1","info":{"id":"Nt2cDW","date":"1649706171","viewed":91,"name":"RayMarching- Bouncing Ball","username":"DragoRyu","description":"A Ball which Bounces Up and Down created using the Ray Marching Technique learnt from \"The Art of Code\" YouTube Channel\nlink for the Tutorial: https://youtu.be/PGtv-dBi2wE\n\nThanks elenzil for a better algorithm for bouncing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0, 1, 6, 1);\n    float period = 1.0;\n    float bounceHeight = period;\n    float tCycle = fract(iTime / period) * 2.0 - 1.0;\n    s.y  += bounceHeight * (1.0 - tCycle * tCycle);\n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    float d = min(sphereDist, planeDist);\n    return d;\n}\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.;\n    \n    for(int i =0; i< MAX_STEPS; i++)\n    {\n        vec3 p = ro+rd*dO;\n        float ds = GetDist(p);\n        dO += ds;\n        if(dO>MAX_DIST || dO<SURF_DIST)\n            break;\n        \n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    vec3 n = d - vec3(GetDist(p-e.xyy), GetDist(p-e.yxy), GetDist(p - e.yyx));\n    return normalize(n);\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime)*2., cos(iTime)*2.);\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    float dif = dot(l, n);\n    \n    float d = RayMarch(p+n*SURF_DIST*2., l);  \n    if(d<length(lightPos-p))\n        dif *= .1;\n    return dif;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 lightColor = vec3(0, abs(cos(iTime)), abs(sin(iTime)));\n    vec3 ro = vec3(0,1,0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float d = RayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    \n    col = lightColor *dif;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}