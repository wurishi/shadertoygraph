{"ver":"0.1","info":{"id":"NdVBRD","date":"1657770372","viewed":126,"name":"small angle cmp test","username":"xrx","description":"zoom on arcmin circle upto 1e6, angle btw vectors using:\nLU: acos dot\nLL: atan delta\nRU. asin delta\nRL: asin len cross\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["star","acos","angle","dot","asin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//--------------------------------- imports \n// IQ \n// Hugo Elias\nint   seed = 1;\nint   hash(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat rand(void) { return float(hash())/32767.0; }\nvoid  randinit( ivec2 p, int frame ){\n    int n = frame;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589; \n    n += p.y;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    n += p.x;\n    n = (n<<13)^n; n=n*(n*n*15731+789221)+1376312589;\n    seed = n;\n}\n\n\n//---------------------------------\n#define PI acos(-1.)\n#define PI2 (PI*2.)\n#define Color vec3\nfloat gamma = 2.25;        //compression (1:equal length), req same as monitor  \n\nfloat clamp01(float x) { return clamp(x,0.,1.); } \nfloat linstep(float x) {return clamp01(x);}\nfloat to01(float a){ return a*.5+.5;}\nfloat angle_dot(vec3 d1, vec3 d2) { return acos(dot(d1,d2)); }\nfloat angle_atan(vec3 d1, vec3 d2) { return atan(length(d1-d2)); } // small angle only\nfloat angle_cross(vec3 d1, vec3 d2) { return asin(length(cross(d1,d2))); }\nfloat angle_asin(vec3 d1, vec3 d2) { return asin(length(d1-d2)/2.)*2.; }\n\nvec3 camu(vec2 p, float z, vec2 r){ return normalize(vec3((2.*p-r)/r.y,z)); }\n\nmat3 rot2mat(vec2 a){\n    vec2 c = cos(a);\n    vec2 s = sin(a);\n    mat3 rx = mat3(1,0,0,      0,c.y,-s.y, 0,s.y,c.y);\n    mat3 ry = mat3(c.x,0,-s.x, 0,1,0,      s.x,0,c.x);\n    return ry*rx;\n}\n\nfloat angle(vec3 d1, vec3 d2, int type){\n    switch (type){\n    case 1: return angle_dot(d1,d2); break;\n    case 2: return angle_atan(d1,d2); break;\n    case 3: return angle_cross(d1,d2); break;\n    case 4: return angle_asin(d1,d2); break;\n    }\n}\n\nfloat circ(float x ) { x = clamp01(x); return sqrt(1.-x*x);}\n\nvoid scene1(inout Color c, vec3 rd, int type){ \n    vec2 radec= vec2(.2,.6);\n    vec3 star_rd1 = rot2mat(radec)        * normalize(vec3(0,0,1));\n    vec3 star_rd2 = rot2mat(vec2(.17,.6)) * normalize(vec3(0,0,1));\n    vec3 star_rd3 = rot2mat(vec2(.3,.44)) * normalize(vec3(0,0,1));\n\n    float a1 = radians(1./60.);  a1*=.47;  //    a1+=(rand()-.5)*exp2(-21.);\n    float a2 = radians(1.);\n    float a3 = radians(10.);\n\n    //if (angle(rd,star_rd1,type) < a1) c+= Color(1,1,.3); \n    //if (angle(rd,star_rd2,type) < a2) c+= Color(1,.5,.3); \n    //if (angle(rd,star_rd3,type) < a3) c+= Color(1,.8,.4); \n    c+= Color(1,1,.3)  * circ(angle(rd,star_rd1,type)/a1); \n    c+= Color(1,.5,.3) * circ(angle(rd,star_rd2,type)/a2); \n    c+= Color(1,.8,.4) * circ(angle(rd,star_rd3,type)/a3); \n    \n}\n\nColor scene(ivec2 ip, vec2 r, inout ivec2 s){\n    vec2 p = vec2(ip);   ivec2 ir = ivec2(r); vec2 asp = vec2(r.x/r.y,1);\n    p+=vec2(rand(),rand())-.5;\n    float t = iTime; \n    t+=iTimeDelta*rand(); \n    t-=10.;\n    s = ir/2;    if (iMouse.z>0.) s = ivec2(iMouse.xy);\n\n    //---------------\n    float z = 1.;\n    z = -cos(t*PI2/30.)*.5+.5; \n    z = pow(10., 0.+6.*pow(z,1./1.));\n    //z = pow(10.,5.);\n    //z = 1.;\n\n    vec2 radec= vec2(.2,.6);\n    float a1 = radians(1./60.);  a1*=.47;  \n\n    //mat3 mm = rot2mat(radec+vec2(0, a1*.536 *1.0));\n    mat3 mm = rot2mat(radec+vec2(0, a1*.536 *.02));\n    \n    Color c = vec3(0);\n    if(ip.x<s.x && ip.y>s.y) scene1(c, mm*camu(p-r/4.*vec2(-1,1),z,r),1);\n    if(ip.x<s.x && ip.y<s.y) scene1(c, mm*camu(p-r/4.*vec2(-1,-1),z,r),2);\n    if(ip.x>s.x && ip.y>s.y) scene1(c, mm*camu(p-r/4.*vec2(1,1),z,r),4);\n    if(ip.x>s.x && ip.y<s.y) scene1(c, mm*camu(p-r/4.*vec2(1,-1),z,r),3);\n\n    if (ip.x==s.x) c = Color(0,.5,0)*to01(sin((p.y/r.y+t)*PI2)); // splitter\n    if (ip.y==s.y) c = Color(0,.5,0)*to01(sin((p.x/r.x+t)*PI2));\n    return c;\n}\n\nvoid mainImage(out vec4 C, vec2 p){\n    vec2 r = iResolution.xy; ivec2 ir = ivec2(r);    ivec2 ip = ivec2(p);   \n\n    randinit(ip,iFrame%3600);\n    ivec2 s;\n    Color c = scene(ip,r,s);\n    \n    c = pow(c,vec3(1./gamma));    \n    C = vec4(c,0);\n}","name":"Image","description":"","type":"image"}]}