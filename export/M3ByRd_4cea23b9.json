{"ver":"0.1","info":{"id":"M3ByRd","date":"1727704297","viewed":46,"name":"Imitate Apple intelligence Siri","username":"xioxin","description":"Imitate Apple intelligence Siri\nWIP","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["apple","ios","siri"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3(p3.x+p3.y, p3.x+p3.z, p3.y+p3.z)*p3.zyx);\n}\nfloat snoise3(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - K2);\n    vec3 d2 = d0 - (i2 - K1);\n    vec3 d3 = d0 - 0.5;\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\n// 计算圆形波纹\nfloat circle(in vec2 _st, in vec2 centerPoint, in float _radius) {\n    // 计算当前点与圆心(0.5, 1.0)的距离向量\n    vec2 dist = _st - centerPoint;\n    \n    // 计算距离的平方，并放大4倍\n    float distSquared = dot(dist, dist) * 4.0;\n    \n    // 使用 smoothstep 函数计算圆形边缘的平滑过渡\n    // c1 表示内圆边缘的平滑过渡\n    float c1 = smoothstep(_radius - (_radius * 0.5), _radius, distSquared);\n    return c1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // 将片段坐标转换为归一化的UV坐标\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float range= max(sin(iTime), 0.0);\n\n    \n    \n    float marginPx = 20.0;\n    float excessPx = 20.0;\n    float radiusPx = 50.0;\n    \n    \n    vec2 margin = marginPx / iResolution.xy;\n    vec2 excess = excessPx / iResolution.xy;\n    vec2 radius = radiusPx / iResolution.xy;\n    \n    \n    \n    // 计算当前像素到中心的绝对距离\n    vec2 point = abs(uv - 0.5);\n    // 定义圆角矩形的角点位置\n    vec2 corner = 0.5 - margin - radius - excess;\n    // 计算当前像素到圆角矩形角点的偏移量\n    vec2 offset = max(point - corner, 0.0);\n    \n    // 计算当前像素到椭圆圆角的距离\n    float distance = length(offset / radius) - 1.0;\n\n    \n    \n        // 波纹效果\n    vec2 st2 = uv;\n    float r = 10. * (range);\n    vec2 tapPoint = vec2(0.5, 1.);\n    float c1 = circle(st2, tapPoint, r);\n    \n    float wpct = 1. - ( c1 * (1. - c1));\n    vec3 cc = mix(vec3(1.069,1.077,1.100),vec3(1.),wpct);\n    cc=pow(cc,vec3(8.));\n    float wStretch = st2.y * .3 * range * ( wpct - st2.y );\n    st2.y += (wStretch * (1. - range));\n    \n\n    vec4 foreground = texture(iChannel0, st2);\n    vec4 background = texture(iChannel1, uv);\n    \n    float vol =  texture(iChannel2, vec2(.06, .08)).x;\n    \n    \n    // 使用 iTime 为边缘增加随机的晃动\n    float noise = max(0., snoise3(vec3(uv * 2.0, iTime / 4.0)) * (vol * 0.6));\n    //float noise = 0.0;\n    float alpha = smoothstep(((marginPx) / radiusPx), ((marginPx + excessPx) / radiusPx), ( distance + noise) );\n    \n    // fragColor = mix(foreground, background, 1. - ( (1. - alpha * (1. - c1) ) *  wpct ) );\n    \n    float edge = alpha * (1. - c1);\n    float backgroundMask = 1. - (1. - edge ) * (1. - ( 1. - c1 ) * (1. - range) * 0.5);\n    \n    \n    // fragColor = vec4(foregroundMask, 0., 0., 1.);\n\n    // fragColor = vec4(1. - ( (1. - alpha * (1. - c1) ) *  wpct ), 0.,0.,1.);\n    \n    fragColor = mix(foreground, background, backgroundMask);\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define S(a,b,t) smoothstep(a,b,t)\n\nmat2 Rot(float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n\n// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nvec2 hash( vec2 p )\n{\n    p = vec2( dot(p,vec2(2127.1,81.17)), dot(p,vec2(1269.5,283.37)) );\n\treturn fract(sin(p)*43758.5453);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    float n = mix( mix( dot( -1.0+2.0*hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                        dot( -1.0+2.0*hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                   mix( dot( -1.0+2.0*hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                        dot( -1.0+2.0*hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n\treturn 0.5 + 0.5*n;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x / iResolution.y;\n\n    vec2 tuv = uv;\n    tuv -= .5;\n\n    // rotate with Noise\n    float degree = noise(vec2(iTime*.1, tuv.x*tuv.y));\n\n    tuv.y *= 1./ratio;\n    tuv *= Rot(radians((degree-.5)*720.+180.));\n\ttuv.y *= ratio;\n\n    \n    // Wave warp with sin\n    float frequency = 5.;\n    float amplitude = 30.;\n    float speed = iTime * 2.;\n    tuv.x += sin(tuv.y*frequency+speed)/amplitude;\n   \ttuv.y += sin(tuv.x*frequency*1.5+speed)/(amplitude*.5);\n    \n    \n    // draw the image\n    vec3 colorYellow = vec3(.999, .933, .16);\n    vec3 colorDeepBlue = vec3(.192, .384, .933);\n    vec3 layer1 = mix(colorYellow, colorDeepBlue, S(-.3, .2, (tuv*Rot(radians(-5.))).x));\n    \n    vec3 colorRed = vec3(.996, .3, .38);\n    vec3 colorBlue = vec3(0.317, .637, .992);\n    vec3 layer2 = mix(colorRed, colorBlue, S(-.3, .2, (tuv*Rot(radians(-5.))).x));\n    \n    vec3 finalComp = mix(layer1, layer2, S(.5, -.3, tuv.y));\n    \n    vec3 col = finalComp;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 lt = vec3(.996, .564, .678); // 左上\n    vec3 lc = vec3(.999, .933, .109); // 左中\n    vec3 lb = vec3(.258, .066, .941); // 左下\n    vec3 ct = vec3(.999, .500, .500); // 中上\n    vec3 cc = vec3(.500, .500, .500); // 中中\n    vec3 cb = vec3(.000, .500, .500); // 中下\n    vec3 rt = vec3(.999, .000, .000); // 右上\n    vec3 rc = vec3(.500, .000, .500); // 右中\n    vec3 rb = vec3(.000, .000, .999); // 右下\n\n\n    \n\n\n\n\n    vec3 colLeft = mix(lb, lt, uv.y); // 左边插值\n    vec3 colCenter = mix(cb, ct, uv.y); // 中间插值\n    vec3 colRight = mix(rb, rt, uv.y); // 右边插值\n\n    vec3 col = mix(colLeft, colCenter, uv.x); // 左中插值\n    col = mix(col, colRight, uv.x); // 中右插值\n\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}