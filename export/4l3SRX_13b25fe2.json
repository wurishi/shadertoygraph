{"ver":"0.1","info":{"id":"4l3SRX","date":"1480967269","viewed":311,"name":"Pixelating A Shader","username":"TrueBoolean","description":"Pixelating a scene. This should work with any shader that uses UV.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["procedural","retro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PIX 16.\n\nvoid mainImage( out vec4 FCOL, vec2 FPT ){\n    \n    vec2 actual = FPT;\n\tFPT = (FPT*2.-iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    //Pixelation\n    FPT = floor(FPT*PIX)/PIX;\n    \n    //Any shader code can go below\n    \n    float shade = floor((1.-actual.y/iResolution.y)*PIX)/PIX;\n    FPT /= FPT.y-max(iResolution.x, iResolution.y)/min(iResolution.x, iResolution.y);\n    FPT = FPT*(sin(iTime)+2.)-iTime;\n\tFCOL = vec4(vec2((mod(floor(FPT.x)+FPT.y, 2.) < 1.))*shade, .7, 1.);\n}","name":"Image","description":"","type":"image"}]}