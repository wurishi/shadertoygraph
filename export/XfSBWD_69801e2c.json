{"ver":"0.1","info":{"id":"XfSBWD","date":"1724903879","viewed":15,"name":"4D Raycaster","username":"DecCatBurner","description":"This is a 4th-dimensional rendition of the ray marching algorithm.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["4d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rdist = 100.;\n\nfloat map(vec4 p){\n    return distance(vec4(0.5,0.5,0.5,0.5), fract(p)) - 0.45;\n}\n\nfloat march(vec4 p, vec4 cam){\n    float t = 0.;\n    for (int i = 0; i<100; i++){\n        float d = map(p*t - cam);\n        if (d < 0.0001){\n            return t;\n        }\n        t += d;\n        if (t > rdist) {\n            return rdist;\n        }\n    }\n    return rdist;\n}\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = (2.*fragCoord-iResolution.xy) / iResolution.y;\n    \n    float spd = 0.5;\n    vec4 cam = vec4(0.,0.,-3.,sin(iTime)/2.);\n    if (uv.x > 0.) {\n        uv += vec2(-0.001, 0.);\n    } else {\n        uv += vec2(0.001, 0.);\n    }\n    \n    float d = march(vec4(uv, 1., 1.), cam);\n\n    // Output to screen\n    fragColor = vec4(pal( d*0.2, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25)), 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}