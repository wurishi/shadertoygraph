{"ver":"0.1","info":{"id":"wt2XDh","date":"1565799028","viewed":125,"name":"Particles integral lines\t","username":"aschrein","description":"Particles integral lines\t","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 grad(vec2 coord)\n{\n    float stepx = 1.0;\n    float stepy = 1.0;\n    vec2 l00 = texture(iChannel0, (coord + vec2(-stepx, -stepy)) / iResolution.xy).x * vec2(-stepx, -stepy);\n    vec2 l01 = texture(iChannel0, (coord + vec2(stepx, -stepy)) / iResolution.xy).x * vec2(stepx, -stepy);\n    vec2 l10 = texture(iChannel0, (coord + vec2(stepx, stepy)) / iResolution.xy).x * vec2(stepx, stepy);\n    vec2 l11 = texture(iChannel0, (coord + vec2(-stepx, stepy)) / iResolution.xy).x * vec2(-stepx, stepy);\n    return (l00 + l01 + l10 + l11) * 0.5;\n}\n\nfloat k = 3.0e-4;\n\nfloat eval(vec2 p)\n{\n    float val = 0.0;\n    for (uint i = 0u; i < Particle_Count; i++)\n    {\n        vec2 particle_pos = texture(iChannel0, vec2(float(i) + 0.5, 0.0) / iResolution.xy).xy;\n        vec2 dr = particle_pos - p;\n        float dist = length(dr);\n        val += k / (dist + 1.0e-4);\n    }\n    return val;\n}\n\nvec2 sample_force(vec2 p)\n{\n    vec2 force = vec2(0.0, 0.0);\n    for (uint i = 0u; i < Particle_Count; i++)\n    {\n        vec2 particle_pos = texture(iChannel0, vec2(float(i) + 0.5, 0.0) / iResolution.xy).xy;\n        vec2 dr = particle_pos - p;\n        float dist = length(dr);\n        float sig = i % 2u == 0u ? 1.0 : -1.0;\n        force += sig * dr / (dist * dist + 1.0e-8);\n        \n    }\n    return force;\n}\n\nfloat angle(vec2 p)\n{\n    p = normalize(p);\n    if (sign(p.y) > 0.0)\n    \treturn acos(p.x);\n    else\n        return 3.141592 * 2.0 - acos(p.x);\n}\n\nfloat sample_isoline(vec2 p)\n{\n    vec2 iter_point = p;\n    for (uint i = 0u; i < 8u; i++)\n    {\n        iter_point += 1.0e-6 / sample_force(iter_point);\n    }\n    float val = 0.0;\n    if (eval(iter_point) > 1.0e-4)\n    {\n        float angle_func = angle(sample_force(iter_point)) / 2.0 / 3.141592;\n        uint angle_fract = uint(angle_func * 1024.0) % 16u;\n        return angle_fract < 4u ? 1.0 : 0.0;\n    }\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = vec2(2.0, 2.0) * fragCoord.xy / iResolution.xy + vec2(-1.0, -1.0);\n    float val = eval(uv);\n    \n    val = pow(val, 1.0 / 2.2);\n    \n    \n    vec2 duv = vec2(.5) / iResolution.xy;\n    \n    float isoline = (sample_isoline(uv)\n                     + sample_isoline(uv + vec2(0.3, 0.6) / iResolution.xy)\n                     + sample_isoline(uv + vec2(-0.23, 0.45) / iResolution.xy)\n                     + sample_isoline(uv + vec2(-0.75, -0.67) / iResolution.xy)\n                     + sample_isoline(uv + vec2(-0.53, -0.89) / iResolution.xy)\n                                     ) / 5.0;\n    float radius_func = fract(val * 100.0) > 0.90 ? 1.0 : 0.0;\n    //texture(iChannel0, fragCoord / iResolution.xy);\n    fragColor =(isoline + radius_func) *  vec4(val*4.0);// vec4(val, val, val, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const uint Particle_Count = 32u;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash(float c){return fract(sin(dot(c,12.9898))*43758.5453);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.x > float(Particle_Count)\n        || fragCoord.y > 1.0\n       )\n    {\n        discard;\n\t}\n    uint cur_id = uint(fragCoord.x);\n    vec2 cur_pos = texture(iChannel0, fragCoord / iResolution.xy).xy;\n    vec2 cur_vel = texture(iChannel0, fragCoord / iResolution.xy).zw;\n    if (iTime < 1.0e-1)\n    {\n        fragColor = vec4((float(cur_id) - float(Particle_Count) * 0.5)/ float(Particle_Count),\n                     fract(hash(float(cur_id))) - 0.5, 0.0, 0.0);\n        return;\n    }\n    \n    vec2 force = vec2(0.0, 0.0);\n    const float k = 1.0;\n    const float dt = 1.0e-3;\n    for (uint i = 0u; i < Particle_Count; i++)\n    {\n        if (i == cur_id)\n            continue;\n        \n        vec2 particle_pos = texture(iChannel0, vec2(float(i) + 0.5, 0.0) / iResolution.xy).xy;\n        vec2 dr = particle_pos - cur_pos;\n        float dist = length(dr);\n        force += k * dr * (3.0 / (dist * dist + 1.0e-4) - 8.0e-1 / (dist * dist * dist * dist + 1.0e-4));\n        \n    }\n    \n    cur_vel += force * dt;\n    cur_pos += cur_vel * dt;\n    cur_vel *= 0.999;\n    if (cur_pos.x < -1.0)\n        cur_pos.x = 1.0;\n    if (cur_pos.x > 1.0)\n        cur_pos.x = -1.0;\n    if (cur_pos.y < -1.0)\n        cur_pos.y = 1.0;\n    if (cur_pos.y > 1.0)\n        cur_pos.y = -1.0;\n    //float clamp_val = 1.0;\n   \tfragColor = vec4(cur_pos, cur_vel);\n}","name":"Buffer A","description":"","type":"buffer"}]}