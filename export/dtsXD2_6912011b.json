{"ver":"0.1","info":{"id":"dtsXD2","date":"1675394405","viewed":143,"name":"marching spheres ","username":"maxg123","description":"i got this idea from my friand and he help me a lot for this shader. and a little of ray marching for dummies on YouTube. ","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat GetDist(vec3 p) {  // this makes the spheres \n    vec4 s = vec4(0, 1, 0, .4);\n    p.xyz = mod(p.xyz,2.)-1.;\n    float sphereDist = length(p)-s.w;\n    float planeDist = p.y;\n    \n    float d = min(sphereDist, planeDist);\n    return sphereDist;\n}\nfloat RayMarch(vec3 ro, vec3 rd) {  // this is the shader \n    float dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) // this is the checkered color \n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -=0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    vec3 ro = vec3(0, 3.5, iTime);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    float d = RayMarch(ro, rd);\n    if(d>MAX_DIST) return;\n    vec3 p =(ro + rd * d)*2.0;\n    vec3 fp = vec3(floor(p));\n    vec3 col = vec3(int(fp.x+fp.y+fp.z)%2)*exp(-d*0.1);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}