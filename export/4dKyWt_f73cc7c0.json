{"ver":"0.1","info":{"id":"4dKyWt","date":"1523745659","viewed":117,"name":"Burning Ship Fractal .","username":"Alazorth","description":"2D Burning Ship Fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","color","burningship","alazorth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//FRAGMENT SHADER\n#ifdef GL_ES\nprecision highp float;\nprecision highp int;\n#endif\n#define RE_START -2.\n#define RE_END    1.\n#define IM_START -1.\n#define IM_END    1.\n#define MAX_ITER  50\n\nfloat fBShip(vec2 c) {   \n    float i = 0.;\n    vec2 z;\n    float ztemp;\n    float B = 256.;\n    for(i=0.;i<float(MAX_ITER);i++){\n        //z = vec2(abs(z.x*z.x - z.y*z.y + c.x), abs(2.*z.x*z.y + c.y));\n        z = vec2(-abs(2.*z.x*z.y + c.y),abs(z.x*z.x - z.y*z.y - c.x));\n    \tif(z.x*z.x + z.y*z.y >= 4.) break;\n        \n        \n        //return vec3(0.,0.,0.,1.);//insideColor\n        }\n    //return i;\n    float sl = i - log(log(length(z))/log(B))/log(2.0);\n    return sl;\n}\n\nfloat onescaler(float n) {\n    float newN = n/float(MAX_ITER);\n    return newN;\n}    \n\nvec4 autumnmap(float x) {\n    float g = clamp(x, 0.0, 1.0);\n    return vec4(1.0, g, 0.0, 1.0);\n}\n\nvec4 summermap(float x) {\n    return vec4(clamp(x, 0.0, 1.0), clamp(0.5 * x + 0.5, 0.0, 1.0), 0.4, 1.0);\n}\n    \nfloat ZoomNum() {\n\treturn 0.9 * sin(0.1* iTime);\n}\n\n\n\n\nvec3 trueCmap(float n)\t{  \n    // GLSL has it's own syntax for creating arrays . . .\n    vec3 cMap[7] = vec3[7](vec3(0.0,0.0,0.0), vec3(1.,0.,1.), vec3(0.,0.,1.), vec3(0.,1.,0.), vec3(1.,1.,0.), vec3(1.,0.5,0.), vec3(0.,0.,0.)) ;\n \n    float quotient = float(cMap.length()) * n / float(MAX_ITER);\n    float lowerIndex = floor(quotient);\n    float upperIndex = ceil(quotient);\n    highp int lIndex = int(lowerIndex);\n    highp int uIndex = int(upperIndex);\n    float fraction = quotient - lowerIndex;\n    vec3 c = cMap[lIndex] + fraction * (cMap[uIndex] - cMap[lIndex]);\n    \n\treturn c;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy/iResolution.xy;\n\tfloat aspect = iResolution.y/iResolution.x;\n    vec2 mouseOffset = (iMouse.xy)/iResolution.xy;\n\tvec2 p = uv*2.-1.; // transform uv range(0-1) to be centered and normalized(-1-1)\n\tp.y*=aspect;\n    float n = fBShip(p*2.);//ZoomNum()); //3.); // *2. is the zoom value to create a variable for controlled by GUI    \n    fragColor = autumnmap(onescaler(n));\n         \n}","name":"Image","description":"","type":"image"}]}