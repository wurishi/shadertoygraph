{"ver":"0.1","info":{"id":"mdyBzt","date":"1698515840","viewed":72,"name":"lyendamse compressed","username":"chenxianming","description":"lyendamse compressed\n\nsomeone waiting for eat **** out of units","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["colors","compressed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define I iResolution\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u2 = V / I.xy;\n    \n    // Output to screen\n    float r = texture( iChannel0, u2 + vec2( .001, -.05 ) ).r;\n    float g = texture( iChannel0, u2 + vec2( -.01, .001 ) ).g;\n    float b = texture( iChannel0, u2 + vec2( -.001, -.03 ) ).b;\n    \n    vec3 c = vec3( r, g, b ) + .05;\n    \n    \n    \n    U = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define I iResolution\n#define rot( r ) mat2(cos(r), sin(r), -sin(r), cos(r) )\n#define PI 3.1415926\n#define T( s ) fract( iTime * s ) * PI * 4.\n#define EDGE_WIDTH 0.002\n#define v( a ) clamp( a, 0., 1. )\n\nfloat smin (float a, float b, float r)\n{\n    float h = clamp(.5+.5*(b-a)/r,0.,1.);\n    return mix(b, a, h) - r*h*(1.-h);\n}\n\nfloat smax(float a, float b, float k) {\n    return -smin(-a, -b, k);\n}\n\n\nfloat f( vec3 p ){\n    \n    float py = abs( p.y ) - .3;\n    py = abs( py );\n\n    return max(\n        length( p.xz ) - .5 * py, abs( p.y ) - .3\n    );\n}\n\nvec3 fractalPos( vec3 p ){\n    for( float i = 0.; i < 12.; i++ ){\n        p.xy = abs( p.xy );\n        p.xy *= rot( PI * i / 12. );\n    }\n    return p;\n}\n\nfloat df(vec3 p)\n{\n    \n    vec3 po = p;\n    \n    p.xz *= rot( iTime * 4. );\n    p.zy *= rot( iTime * 4. );\n    \n    float d = .1;\n    vec3 p2 = p;\n    vec3 p3 = p;\n    vec3 p4 = p;\n    \n    p = fractalPos( p );\n    \n    p2.xz *= rot( PI * .5 );\n    p2 = fractalPos( p2 );\n    \n    p3.yz *= rot( PI * .5 );\n    p3 = fractalPos( p3 );\n    \n    \n    d = min(\n        d,\n        f( p )\n    );\n    \n    \n    d = min(\n        d,\n        f( p2 )\n    );\n\n    d = min(\n        d,\n        f( p3 )\n    );\n\n    d = smax(\n        d,\n        -( length( p ) - .15 ),\n        .05\n    );\n\n    return d;\n}\n\nvec3 l(in vec3 b) {\n  vec2 a = vec2(1, -1) * .5773;\n  return normalize(a.xyy * df(b + a.xyy * 5e-4) + a.yyx * df(b + a.yyx * 5e-4) +\n                   a.yxy * df(b + a.yxy * 5e-4) + a.xxx * df(b + a.xxx * 5e-4));\n}\n\nfloat gd( vec3 p ){\n    return v( dot( l(p), vec3( .5, 1., -1. ) ) );\n}\n\nvoid mainImage( out vec4 U, in vec2 V )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 u = ( V * 2. - I.xy ) / I.y;\n    vec2 u2 = V / I.xy;\n    \n    vec3 c, p, o = vec3( 0., 0., -1. ), r = vec3( u, 1. );\n    \n    float t, d, i, dp, e = sqrt( 1e-3 );\n    for( ; i < 64.; i++ )\n        p = o + r * t,\n        p.x += cos( iTime ) * sin( iTime ),\n        p.y -= sin( iTime ) * .7,\n        p.z -= cos( iTime * 1.5 ) * .3,\n        d = df( p ),\n        dp = ( 1. - abs( d ) / e ),\n        c += ( dp > 0. ) ? ( vec3( .05 * gd(p) ) + ( reflect( l( p ), normalize( p ) ) ) ) * .05 * dp / t : vec3(0),\n        t += max( abs( d ) * .88889, e * .9 );\n\n    // Output to screen\n    c += texture( iChannel0, u2 ).rgb * .99;\n    \n    U = vec4(c,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}