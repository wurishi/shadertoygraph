{"ver":"0.1","info":{"id":"Wttyzf","date":"1609638685","viewed":103,"name":"Test Halo Waves","username":"TestCoder","description":"tutorial","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://www.pouet.net/prod.php?which=57245\n// If you intend to reuse this shader, please add credits to 'Danilo Guanabara'\n// https://www.shadertoy.com/view/XsXXDn\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec3 haloColors;\n\tfloat distance;\n    float brightnessDiffuse = 2.;\n    float waveNear = 1.;\n    float fov = 15.;\n    float wavingSpeed = .5;\n    float timeStepOffset = .5;\n\n\tfor(int index = 0; index < 3; index++) {\n        float time = iTime + timeStepOffset * float(index);\n\t\tvec2 coordinates2D, aspectRatio = fragCoord.xy / iResolution.xy;\n\n        // assign aspect ratio to, uv\n\t\tcoordinates2D = aspectRatio;\n\n        // centering aspect ratio\n\t\taspectRatio -= .5;\n\n        // scaling aspect ratio axis to fit square coordinates\n\t\taspectRatio.x *= iResolution.x / iResolution.y;\n\n        // offsets time for each axis\n\t\ttime += timeStepOffset;\n        \n        // gets distance from vec2(0,0)\n        distance = length(aspectRatio);\n        \n        // magic 1: study\n\t\tcoordinates2D += aspectRatio / distance * (sin(time) + waveNear) * abs(sin(distance * fov - time));\n\n        // magic 2: study again\n\t\thaloColors[index] = length(abs(mod(coordinates2D, 1.) - .5));\n\t}\n\n    // dividing for distance to get light\n\tfragColor=vec4(haloColors / distance / brightnessDiffuse, 1.);\n}","name":"Image","description":"","type":"image"}]}