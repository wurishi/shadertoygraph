{"ver":"0.1","info":{"id":"MctcD7","date":"1731794532","viewed":36,"name":"Fourier Series Experiments","username":"foxie","description":"Just saw this video about Fourier Series and did some experimenting.\n\nhttps://www.youtube.com/watch?v=r6sGWTCMz2k&t=1092s","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["experiment","backbuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 hsv2rgb(float h, float s, float v) { return hsv2rgb(vec3(h, s, v)); }\nvec3 hsv2rgb(float h, float s) { return hsv2rgb(h, s, 1.); }\nvec3 hsv2rgb(float h) { return hsv2rgb(h, 1., 1.); }\n\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, s, -s, c);\n\treturn m * v;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1415\n\nconst float point_size = .05;\nconst float fade_factor = .001;\nconst float time_scale = 1.;\nconst float color_change_speed = .3;\n\n/******\n/  chain format:\n/    vec3(length, initial_rotation, rotation_speed)\n/******/\n\nconst int chain_length = 4;\nvec3[chain_length] example_1 = vec3[chain_length](\n    vec3(.3, -PI / 2., 1),\n    vec3(.3, 0, -1),\n    vec3(0),\n    vec3(0)\n);\n\nvec3[chain_length] example_2 = vec3[chain_length](\n    vec3(.4, 0, 2),\n    vec3(.2, PI, -1),\n    vec3(0),\n    vec3(0)\n);\n\nvec3[chain_length] example_3 = vec3[chain_length](\n    vec3(.3, 0, 2),\n    vec3(.3, 0, -1),\n    vec3(.1, PI, 6),\n    vec3(.1, PI, -3)\n);\n\nvec3[chain_length] example_4 = vec3[chain_length](\n    vec3(.3, 0, 2),\n    vec3(.3, 0, -1),\n    vec3(.1, 0, 6),\n    vec3(.1, 0, -3)\n);\n\nvec2 calc_point(float t, vec3[chain_length] chain) {\n    vec2 point = vec2(0., 0.);\n    for (int i = 0; i < chain_length; i++) {\n        vec3 segment = chain[i];\n        if (segment.x <= 0.) break;\n        vec2 offset = vec2(0., 1.) * segment.x;\n        offset = rotate(offset, segment.y + t * segment.z);\n        point += offset;\n    }\n    \n    return point;\n}\n\nfloat falloff(float value) {\n    return smoothstep(point_size, 0., value);\n}\n\nfloat cell(vec2 uv, float t, vec3[chain_length] chain) {\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 point = calc_point(t, chain);\n    float dist = distance(point, uv);\n    return falloff(dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime * time_scale;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 back_buffer = texture(iChannel0, uv).rgb;\n    \n    float value = cell(uv * 2., t, example_3);\n    value += cell(uv * 2. - vec2(1, 0), t, example_4);\n    value += cell(uv * 2. - vec2(0, 1), t, example_1);\n    value += cell(uv * 2. - vec2(1, 1), t, example_2);\n    vec3 color = hsv2rgb(fract(t * color_change_speed), 1., value);\n    color = mix(back_buffer - vec3(fade_factor * time_scale), color, value);\n    fragColor = vec4(color, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}