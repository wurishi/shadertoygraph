{"ver":"0.1","info":{"id":"Xl33zS","date":"1469979032","viewed":244,"name":"Pink noise","username":"Axesider","description":"Attempt to synthesize pink noise","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["audio","pinknoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 nrand2( vec2 n )\n{\n\treturn texture(iChannel0, n*0.1).xy;\n}\n\n\nfloat getIntensity(float freq)\n{\n    float x1 = 100.0;\n    float y1 = -35.0;\n    float x2 = 10000.0;\n    float y2 = -65.0;\n    float a = (y2-y1)/(x2-x1);\n    float b = y1 - a * x1;\n    return a * freq + b;\n}\n\nfloat getAmplitude(float intensity)\n{\n    float power = pow(10.0, intensity/10.0);\n    return sqrt(power);\n}\n\nvec2 getCoef(float amp, float time, float v)\n{\n\tvec2 coef = vec2(\n       nrand(vec2(time + v, time*1.423 + v*3.1)),\n       nrand(vec2(time - v, time*1.423 - v*3.1)));\n    \n    //vec2 coef = nrand2(vec2(time*13.0 + v*19.0, time*0.423 + v*17.0));\n    coef = coef * 2.0 - 1.0; \n    coef /= length(coef);\n    coef *= amp;\n    return coef;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    float step = uv.x;\n    float freq = 20.0 + step* 10000.0;\n\tfloat intensity = getIntensity(freq);\n    float amplitude = getAmplitude(intensity);\n    vec2 coef = getCoef(1.0, iTime, step);\n    \n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    //float intensityN = (intensity+65.0)/30.0;\n    //if (intensityN > uv.y)\n    //{\n    //\tfragColor.x =1.0;//intensityN;\n    //}\n    float amplitudeN = amplitude/getAmplitude(getIntensity(20.0));\n    if (amplitudeN > uv.y)\n    {\n    \t//fragColor.z = 1.0;   \n    \tfragColor.xy =coef*0.5+0.5;\n    }\n        \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsfGRr","channel":0}],"code":"#define TAU 6.283185307179586476925286766559\n#define ITERATIONS 1000\n\n\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nvec2 nrand2( vec2 n )\n{\n\treturn texture(iChannel0, n*0.1).xy;\n}\n\nfloat getIntensity(float freq)\n{\n    float x1 = 100.0;\n    float y1 = -30.0;\n    float x2 = 10000.0;\n    float y2 = -70.0;\n    float a = (y2-y1)/(x2-x1);\n    float b = y1 - a * x1;\n    return a * freq + b;\n}\n\nfloat getAmplitude(float intensity)\n{\n    float power = pow(10.0, intensity/10.0);\n    return sqrt(power);\n}\n\nvec2 getCoef(float amp, float time, float v)\n{\n\tvec2 coef = vec2(\n        nrand(vec2(time + v, time*1.423 + v*3.1)),\n        nrand(vec2(time - v, time*1.423 - v*3.1)));\n    \n    //vec2 coef = nrand2(vec2(time*0.0130 + v*19.0, time*0.0040 + v*17.0));\n    coef = coef * 2.0 - 1.0; \n    coef /= length(coef);\n    coef *= amp;\n    return coef;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    float BASE = 1.0;\n    float amp = 1.0;\n    \n    vec2 audio = vec2(0.0);\n    for (int n = 1; n < ITERATIONS; n++)\n    {\n        float step = float(n)/float(ITERATIONS);\n        float freq = BASE * float(n);\n        \n        float intensity = getIntensity(freq);\n        float amplitude = getAmplitude(intensity);\n        vec2 coef = getCoef(amplitude, time, step);\n            \n        float s = coef.x * cos(TAU * freq *time ) - coef.y * sin(TAU * freq *time );\n\n        audio +=s;\n    }\n\n\taudio *= amp;\n    \n    return audio;\n}","name":"Sound","description":"","type":"sound"}]}