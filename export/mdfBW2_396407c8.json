{"ver":"0.1","info":{"id":"mdfBW2","date":"1689186099","viewed":95,"name":"Tree!","username":"cosmo_brain","description":"Learning from https://www.youtube.com/watch?v=LLZPnh_LK8c","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["tree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\nfloat random(float seed) {\n    return sin(sin(seed*389.1238)*3.590*sin(seed*283.143))*.5+.5;\n}\n\nfloat Rectangle(vec2 uv, float width, float height, float blur) {\n    float bottomLine = S(-blur, blur, uv.y+height/2.);\n    float topLine = S(blur, -blur, uv.y-height/2.);\n    float leftLine = S(blur, -blur, uv.x-width/2.);\n    float rightLine = S(-blur, blur, uv.x+width/2.);\n    return topLine*bottomLine*leftLine*rightLine;\n}\n\nfloat Circle(vec2 uv, float radius, float blur) {\n    return S(blur, -blur, length(uv)-radius);\n}\n\nfloat TaperBox(vec2 uv, float wbase, float wtop, float height, float offset, float blur) {\n    float bottomLine = S(-blur, blur, uv.y+height/2.);\n    float topLine = S(blur, -blur, uv.y-height/2.);\n    \n    float width = (uv.y+height/2.)/height * (wtop-wbase) + wbase;\n    float current_offset = (uv.y+height/2.)/height * offset;\n    // current_offset = 0.0;\n    float leftLine = S(blur, -blur, uv.x-width/2. - current_offset);\n    float rightLine = S(-blur, blur, uv.x+width/2. - current_offset);\n    \n    return topLine*bottomLine*leftLine*rightLine;\n}\n\nfloat GetHeight(float x) {\n    return sin(x*0.875)*0.2 + sin(x*1.54839)*0.1;\n}\n\nfloat Ground(vec2 uv, float blur) {\n    return S(blur, -blur, uv.y-GetHeight(uv.x));\n}\n\n// idk what `speed` does but it doesn't do what I wanted it to do\nvec4 leavesColour(float id, float speed) {\n    const int ColourCount = 4;\n    vec4[ColourCount+1] colours;\n    colours[0] = vec4(65, 201, 20, 255)/255.; // green\n    colours[1] = vec4(201, 196, 42, 255)/255.; // yellow\n    colours[2] = vec4(214, 153, 21, 255)/255.; // orange\n    colours[3] = vec4(209, 55, 17, 255)/255.; // red\n    colours[ColourCount] = colours[0];\n    \n    float time = mod(id/speed*0.1, 1.)*float(ColourCount);\n    int colourIndex = int(time);\n    vec4 colour = mix(colours[colourIndex], colours[colourIndex+1], mod(time, 1.));\n    \n    \n    return colour;\n}\n\nvec4 Layer(vec2 uv, float speed, vec4 col, float brightness, float blur) {\n    float ground = Ground(uv, blur);\n    \n    float id = floor((uv.x+0.3)/0.6);\n    uv.x = mod(uv.x+0.3, 0.6)-0.3;\n    \n    vec4 trunkColour = vec4(189, 111, 23, 255)/255.;\n    vec4 leavesColour = leavesColour(id, speed);\n    vec4 groundColour = vec4(57, 189, 120, 255)/255.;\n    \n    float height = GetHeight(id*0.6 + 0.3);\n    uv.y -= height;\n    \n    uv.y -= 0.2;\n    uv.x += random(id)*0.1;\n    \n    float trunk = TaperBox(uv-vec2(0., -0.2), 0.05, 0.05, 0.4, 0.0, blur);\n    col = mix(col, vec4(trunkColour.xyz*brightness, 1.), trunk);\n    \n    float leaves = TaperBox(uv, 0.2, 0.1, 0.1, 0.0, blur);\n    float shadowOnLeaves = 1. - TaperBox(uv-vec2(0.075, 0.025), 0.0, 0.1, 0.05, -0.075, blur)*0.3;\n    col = mix(col, vec4(vec3(leavesColour*0.8)*shadowOnLeaves*brightness, 1.), leaves);\n    shadowOnLeaves = 1. - TaperBox(uv-vec2(-0.055, 0.105), 0.0, 0.05, 0.05, 0.05, blur)*0.3; // TODO: this\n    leaves = TaperBox(uv-vec2(0., 0.09), 0.15, 0.05, 0.1, 0.0, blur);\n    col = mix(col, vec4(vec3(leavesColour*0.9)*shadowOnLeaves*brightness, 1.0), leaves);\n    leaves = TaperBox(uv-vec2(0., 0.18), 0.1, 0.0, 0.1, 0.0, blur);\n    col = mix(col, vec4(leavesColour.xyz*brightness, 1.), leaves);\n    \n    float shadowOnTrunk = TaperBox(uv-vec2(-0.025, -0.0625), 0.0, 0.05, 0.025, 0.025, blur);\n    col = mix(col, vec4(vec3(0.), 1.0), shadowOnTrunk*0.3);\n    \n    col = mix(col, vec4(groundColour.xyz*brightness, 1.), ground);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime*0.3;\n    float blur = 0.002;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n\n    vec3 col = mix(vec3(222, 150, 35)/255., vec3(121, 207, 224)/255., (uv.y+.5));\n    \n    col = mix(col, vec3(252, 251, 151)/255., Circle(uv, 0.2, blur*14.));\n    \n    vec4 layer = vec4(1.);\n    for (float i=0.; i<1.; i+=1./5.) {\n        float scale = 3. - 2.*i;\n        layer = Layer(uv * scale - vec2(random(i)*3.192384, -i*1.2+0.6) + vec2(t*(i+0.1), 0.), i+0.1, vec4(col, 1.), i/2. + .5, (1.-sin(i*3.1415926))*blur*14.);\n        col = mix(col, layer.xyz, layer.a);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}