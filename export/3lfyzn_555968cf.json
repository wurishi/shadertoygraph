{"ver":"0.1","info":{"id":"3lfyzn","date":"1591206922","viewed":192,"name":"Vignette with banded rect","username":"stradiotto","description":"Just an experimentation with smoothstepped rectangles and textures from webcam. Take care when adjusting the image parts (i1 and i2)","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["webcam","smoothstep","rect","colorcombination"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n1) The method band and rect are based on code from\n\nYoutube - ShaderToy Tutorial Part 3 - Making a Rectangle - The Art of Code\nhttps://www.youtube.com/watch?v=bigjgiavOM0&list=PLGmrMu-IwbguU_nY2egTFmlg691DN7uE5&index=3\n\nThank you, my master.\n\n2) On channel 1 select your webcam.\n\n3) Combining options are at the final part of this code.\n*/\n\nfloat band(float t, float start, float end, float blur)\n{\n\tfloat step1 = smoothstep(start-blur, start+blur, t);\n\tfloat step2 = smoothstep(end  +blur, end  -blur, t);\n    return step1 * step2;\n}\n\nfloat rect(vec2 uv, vec4 coords, float blur)\n{ \n    float x = band(uv.x, coords[0], coords[2], blur);\n    float y = band(uv.y, coords[1], coords[3], blur);\n    return x*y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv     -= .5;\n    uv.x   *= iResolution.x / iResolution.y;\n    \n    vec4 i1= \n        vec4(1., 1., 1., 1.)\n        * texture(iChannel0, (uv)*2.5  + vec2(.5, .5)) \n        * vec4(1., 1., 0., 1.)  \n        * rect(uv, vec4(-.2, -.2, .2, .2), .05)\n        ;\n\n    vec4 i2= \n        vec4(1., 1., 1., 1.)\n        * texture(iChannel0, (uv)*vec2(1.25, 2.)  + vec2(0., 0.)) \n        * vec4(.3, 1., 1., 1.)  \n        * rect(uv, vec4(0., 0., .8, .4), .095)\n        ;\n\n    //Options (you can include many more...)\n    //fragColor = i1 * i2;\n    //fragColor = i1 + i2;\n    //fragColor = i1 - i2;\n    //fragColor = i2 - i1;\n    \n    fragColor = i1 + i2;\n}","name":"Image","description":"","type":"image"}]}