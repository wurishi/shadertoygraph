{"ver":"0.1","info":{"id":"mddBRN","date":"1696944790","viewed":41,"name":"sRGB interpolation demonstration","username":"w23","description":"Illustrative comparison between\n- (Top) Sampling VK_FORMAT_.._SRGB texture with gamma-linear conversion done internally before interpolation\n- (Bottom) Sampling VK_FORMAT_.._UNORM texture, with interpolation done in sRGB-gamma space, and","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gamma","interpolation","srgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Illustrative comparison between\n// (Top) Sampling VK_FORMAT_.._SRGB texture with gamma-linear conversion done \n//    internally before interpolation\n// (Bottom) Sampling VK_FORMAT_.._UNORM texture, with interpolation done\n//    in sRGB-gamma space, and only then converted to linear\n\n// Show color interpolation (grayscale without)\n//#define COLORS\n\n// sRGB-Î³ <-> linear conversion functions\n// See https://registry.khronos.org/DataFormat/specs/1.3/dataformat.1.3.html#TRANSFER_SRGB\nfloat sRGB2linear(const float sRGB) {\n\t// IEC 61966-2-1:1999\n\tfloat linearLow = sRGB / 12.92;\n\tfloat linearHigh = pow((sRGB + 0.055) / 1.055, 2.4);\n\treturn sRGB <= 0.04045 ? linearLow : linearHigh;\n}\nfloat linear2sRGB(const float linear) {\n\t// IEC 61966-2-1:1999\n\tfloat sRGBLow  = linear * 12.92;\n\tfloat sRGBHigh = (pow(linear, 1.0 / 2.4) * 1.055) - 0.055;\n\treturn linear <= 0.0031308 ? sRGBLow : sRGBHigh;\n}\nvec3 linear2sRGB(const vec3 linear) {\n    return vec3(linear2sRGB(linear.r), linear2sRGB(linear.g), linear2sRGB(linear.b));\n}\nvec3 sRGB2linear(const vec3 sRGB) {\n    return vec3(sRGB2linear(sRGB.r), sRGB2linear(sRGB.g), sRGB2linear(sRGB.b));\n}\n\n// Simulates SRGB-gamma-space texture raw values\nvec3 valueAtSRGB(int i) {\n    if (i < 1) return vec3(0.);\n#ifdef COLORS\n    if (i == 1) return linear2sRGB(vec3(1., 0., 0.));\n    if (i > 1) return linear2sRGB(vec3(0.,1.,0.));\n#else\n    if (i >= 1) return linear2sRGB(vec3(1., 1., 1.));\n#endif\n}\n\n// Sample+interpolate texture as if it was UNORM\nvec3 texUNORM(float t) {\n    int T = int(floor(t)); t = fract(t);\n    return sRGB2linear(mix(valueAtSRGB(T-1), valueAtSRGB(T), t));\n}\n\n// Sample+interpolate texture as if it was SRGB\nvec3 texSRGB(float t) {\n    int T = int(floor(t)); t = fract(t);\n    return mix(sRGB2linear(valueAtSRGB(T-1)), sRGB2linear(valueAtSRGB(T)), t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    \n    float t = fract(iTime/2.)*2.;\n    float p = uv.x;\n    //p = t;\n#ifdef COLORS\n    p += 2.;\n#else\n    p += 1.5;\n#endif\n\n    vec3 value = uv.y > 0.\n        ? texSRGB(p)\n        : texUNORM(p);\n\n    fragColor = vec4(linear2sRGB(value), 1.);\n}","name":"Image","description":"","type":"image"}]}