{"ver":"0.1","info":{"id":"MXSyWc","date":"1727984864","viewed":23,"name":"oscillating sun & moon","username":"puddlehop","description":"Procedural Textures Assignment - Create a cool animated procedural texture in a fragment shader using UV coordinates and math!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sunset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// movement consts\nconst float POS_RADIUS = 1.25;\nconst float SPEED = 0.5;\n\n// shape consts\nconst float RADIUS = 0.2;\nconst float SMOOTH_RADIUS = 0.15;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0; // -1 to 1\n    \n    // aspect ratio fix\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // bg\n    //translate up and down based on time\n    //clamp RGB values between 0-1\n    float bgPos = clamp((uv.y + sin((SPEED * iTime) + 0.95) + 0.5), 0.0, 1.0);\n    vec3 lowColor = vec3(0.1, 0.1, 0.2); //sky blue\n    vec3 highColor = vec3(0.7, 0.8, 1.0); //dark blue\n    vec3 bgColor = mix(lowColor, highColor, bgPos);\n    \n    // sun\n    //rotates sun clockwise based on time\n    vec2 sunCenter = vec2(0,-0.75); //set center of movement\n    sunCenter += vec2(sin(SPEED * iTime), cos(SPEED * iTime)) * POS_RADIUS; //rotate position clockwise\n    float dSun = distance(uv, sunCenter);\n    dSun = smoothstep(SMOOTH_RADIUS, RADIUS, dSun); //blur edge\n    vec3 sunColor = vec3 (1.0, 1.0, 0.7); //color\n    \n    // moon\n    //rotates moon clockwise, offset from sun\n    vec2 moonCenter = vec2(0,-0.75); //set center of movement\n    moonCenter += vec2(-sin(SPEED * iTime), -cos(SPEED * iTime)) * POS_RADIUS; //rotate position clockwise\n    float dMoon = distance(uv, moonCenter);\n    dMoon = smoothstep(SMOOTH_RADIUS * 0.98, RADIUS * 0.8, dMoon); //blur edge\n    vec3 moonColor = vec3 (0.8, 0.8, 0.85); //color\n    \n\n    // add sun & moon to color\n    vec3 col = vec3(bgColor);\n    col = mix(sunColor, col, dSun);\n    col = mix(moonColor, col, dMoon);\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}