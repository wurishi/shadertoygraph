{"ver":"0.1","info":{"id":"l3XSR2","date":"1709714975","viewed":95,"name":"More Curve Tests","username":"trancor","description":"Was bored, made some test system to display the aura around a sun","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["curves","tweens","blends"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Curve Display\n//\n//  Kevin Edzenga, 2024\n//    gh: ProcStack\n\n\n// Display Settings\nconst float drawCount = 5.0; // # Displays to draw, vertical\nconst float edgeSoftness = 0.007; // Anti-Aliasing; Smooth Step Edge +- \n\n// Sun Settings\nconst vec2 sunLoc = vec2( 0.18, .715 ); // Location in display of sun\nconst float sunAuraScalar = 0.40; // Sun Aura Multiplier\nconst float sunSize = 0.045; // Size of Sun; % UV\n\n// Colors\nconst vec3 sunInnerCd=vec3( 1.0, 1.0, 0.99607843137 );\nconst vec3 sunAuraCd=vec3( 0.98039215686, 0.98039215686, 0.90980392156 );\nconst vec3 skyCd=vec3( 0.40784313725, 0.61960784313, 0.8 );\n\n// -- -- -- -- -- -- -- -- --\n\n// -- -- --\n//  Color Helpers\n// -- -- --\n\nvec3 Colorize( float val ){\n    return mix( skyCd, sunAuraCd, clamp(val,0.0,1.0) );\n}\n\n// -- -- -- -- -- -- -- -- --\n\n// -- -- --\n//  0-1 Blending / Curve Functions\n// -- -- --\n\n// Red\nfloat LogTo(float val,  float off){  \n  return clamp( -(log( val + off )), 0.0, 1.0 );\n}\n\n// Green\nfloat LogPowTo(float val,  float powVal){  \n  return clamp( -(log(pow( val, powVal ))), 0.0, 1.0 );\n}\n\n// Blue\nfloat PowTo(float val,  float powVal){  \n  return clamp( pow(1.0-val, powVal), 0.0, 1.0 );\n}\n\n// -- -- --\n//  Main\n// -- -- --\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    float ratio =  (iResolution.x*.5) / (iResolution.y*(1.0/drawCount)) ;\n    vec2 ratioVec = vec2(ratio, 1.0 );\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // -- -- --\n    //  Set some base values\n    // -- -- --\n    \n    // Get display areas\n    float drawDisp = (1.0-uv.y)*drawCount;\n    \n    // Display Input Value\n    float drawLocalY = 1.0-fract(drawDisp);\n    float drawLocalX = fract(uv.x*2.0);\n    vec2 drawLocalUV = vec2( drawLocalX, drawLocalY );\n    \n    // Get distances to suns\n    float distToSun = length( sunLoc*ratioVec - drawLocalUV*ratioVec );\n    distToSun = clamp( (distToSun-sunSize)*sunAuraScalar, 0.0, 1.0 );\n\n    vec3 display0 = vec3( 1.0, 0.0, 0.0);\n    vec3 display1 = vec3( 0.0, 1.0, 0.0 );\n    vec3 display2 = vec3( 0.0, 1.0, 0.0 );\n    vec3 display3 = vec3( 0.0, 0.0, 1.0 );\n    vec3 display4 = vec3( 0.0, 0.0, 1.0 );\n    \n    // -- -- --\n    //  Draw RGB Curves\n    // -- -- --\n    \n    float curOffset, curArg;\n    \n    // -- -- --\n    // Red\n    curArg = .36;\n    curOffset = .08;\n    float lTo = smoothstep( drawLocalY-edgeSoftness, drawLocalY+edgeSoftness, LogTo(drawLocalX*0.64+curOffset, curArg) );\n    vec3 lToSunCd = Colorize( LogTo(distToSun, curArg) );\n    \n    // -- -- --\n    // Green\n    curArg = .20;\n    curOffset = .00;\n    float lpTo0 = smoothstep( drawLocalY-edgeSoftness, drawLocalY+edgeSoftness, LogPowTo(drawLocalX+curOffset, curArg) );\n    vec3 lpTo0SunCd = Colorize( LogPowTo(distToSun, curArg) );\n    \n    curArg = .40;\n    curOffset = .08;\n    float lpTo1 = smoothstep( drawLocalY-edgeSoftness, drawLocalY+edgeSoftness, LogPowTo(drawLocalX*.92+curOffset, curArg) );\n    vec3 lpTo1SunCd = Colorize( LogPowTo(distToSun+curOffset, curArg) );\n    \n    // -- -- --\n    // Blue\n    curArg = 2.0;\n    curOffset = -.00;\n    float powTo0 = smoothstep( drawLocalY-edgeSoftness, drawLocalY+edgeSoftness, PowTo(drawLocalX*.95+curOffset, curArg) );\n    vec3 powTo0SunCd = Colorize( PowTo(distToSun+curOffset, curArg) );\n    \n    curArg = 4.5;\n    curOffset = -.01;\n    float powTo1 = smoothstep( drawLocalY-edgeSoftness, drawLocalY+edgeSoftness, PowTo(drawLocalX*.8+curOffset, curArg) );\n    vec3 powTo1SunCd = Colorize( PowTo(distToSun+curOffset, curArg) );\n    \n    // -- -- --\n    \n    // Combine side-by-side Curve & Sun Displays\n    float displayRegions = step(.5,uv.x);\n    display0 = mix( display0*lTo, lToSunCd, displayRegions);\n    display1 = mix( display1*lpTo0, lpTo0SunCd, displayRegions);\n    display2 = mix( display2*lpTo1, lpTo1SunCd, displayRegions);\n    display3 = mix( display3*powTo0, powTo0SunCd, displayRegions);\n    display4 = mix( display4*powTo1, powTo1SunCd, displayRegions);\n    \n    \n    \n    // -- -- --\n    //  Combine individual Curve & Sun Displays\n    // -- -- --\n    \n    vec3 outCd = display0;\n    outCd = mix( outCd, display1, step(1.0, drawDisp) );\n    outCd = mix( outCd, display2, step(2.0, drawDisp) );\n    outCd = mix( outCd, display3, step(3.0, drawDisp) );\n    outCd = mix( outCd, display4, step(4.0, drawDisp) );\n    \n    // Add Suns\n    //   I'm sure I could have planned this order of operations better\n    outCd = mix( outCd, sunInnerCd, smoothstep(sunSize+edgeSoftness,sunSize-edgeSoftness,distToSun)*displayRegions );\n\n    fragColor = vec4(outCd,1.0);\n    \n}\n","name":"Image","description":"","type":"image"}]}