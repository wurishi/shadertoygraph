{"ver":"0.1","info":{"id":"tlXfzH","date":"1595974280","viewed":231,"name":"3D practice","username":"reatured","description":"Try 3D objects","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float dist(vec3 rd, vec3 ro, vec3 p){\n    float d = length(cross(p-ro, rd))/length(rd);\n    \n\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n    \n    vec3 ro = vec3(0.,0.,-2.); //camera position\n    vec3 rd = vec3(uv, 0.) - ro; //camera to canvas direction\n\n    vec3 p =vec3(sin(iTime) * 1.5, sin(iTime+0.5)/3., 2. + cos(iTime) * 1.); // ball position\n    float d = dist(rd, ro, p); \n    \n    vec3 p2 = vec3(0.,0.,2.);\n    float d2 = dist(rd, ro, p2);\n    \n    // Time varying pixel color\n    vec3 col =vec3(0.);\n    \n    float timeStamp = max(0.4 - 0.1*sin(iTime*10.), sin(iTime * 3.5));\n    \n    vec3 ball1Color = vec3 (smoothstep(0.1, 0.09,d));\n    //vec3 ball2Color = vec3 (smoothstep(0.7 *timeStamp, 0.69*timeStamp,d2));\n    vec3 ball2Color = vec3 (smoothstep(0.7, 0.69,d2));\n    col += ball1Color;\n    if(p2.z<p.z){\n    \tcol = max(vec3(0.), col - ball2Color);\n    }\n    col += ball2Color *vec3(0.2 , 0.5* (sin(uv.x + iTime - 1.6) + 0.4), 0.4);\n    \n\tcol.r -= d*1.;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}