{"ver":"0.1","info":{"id":"XtXBRX","date":"1512648066","viewed":773,"name":"Simpler Solar System","username":"Janbg","description":"The Sun and planets of the Solar System.\nDiameters of the planets are to scale. \nDistances are not to scale.","likes":16,"published":1,"flags":0,"usePreview":1,"tags":["earth","planet","mars","saturn","pluto","mercury","solarsystem","venus","jupiter","uranus","neptune"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 backgroundColor = vec3(0.0, 0.0, 0.0);\nconst vec2 CENTER   = vec2(0.0, 0.0);\nconst vec3 RED \t    = vec3(1.0, 0.0, 0.0);\nconst vec3 GREEN \t= vec3(0.0, 1.0, 0.0);\nconst vec3 BLUE \t= vec3(0.0, 0.0, 1.0);\nconst vec3 YELLOW   = vec3(1.0, 1.0, 0.0);\nconst vec3 WHITE\t= vec3(1.0, 1.0, 1.0);\nconst vec3 GREY\t\t= vec3(0.5, 0.5, 0.5);\n\nconst vec3 ColMercury\t= vec3(0.96078, 0.90588, 0.71765);\nconst vec3 ColVenus\t\t= vec3(0.95686, 0.82353, 0.38039);\nconst vec3 ColEarth\t\t= vec3(0.61961, 0.79216, 0.37255);\nconst vec3 ColMars\t\t= vec3(0.88235, 0.81569, 0.61961);\nconst vec3 ColJupiter\t= vec3(0.83922, 0.67059, 0.53333);\nconst vec3 ColSaturn\t= vec3(0.89412, 0.87059, 0.63922);\nconst vec3 ColUranus\t= vec3(0.00784, 0.87059, 0.95686);\nconst vec3 ColNeptune\t= vec3(0.00000, 0.51765, 0.89020);\nconst vec3 ColPluto\t\t= vec3(0.62745, 0.63137, 0.64706);\n\n\nvoid drawCircle(vec2 uv, vec3 color, float radiusCircle, float blur, vec2 pos, inout vec3 image) {\n    \n    float d = length(uv - pos);\n\n    if(d <= radiusCircle)\n    {\n\t\timage.r = color.r * (1.0-smoothstep(radiusCircle-blur, radiusCircle, d));\n        image.b = color.b * (1.0-smoothstep(radiusCircle-blur, radiusCircle, d));\n        image.g = color.g * (1.0-smoothstep(radiusCircle-blur, radiusCircle, d));\n    }\n}\n\nvec2 Rotation(float distance, float multi)\n{\n    float x1 = distance*(cos(iTime*multi));\n    float y1 = distance*(sin(iTime*multi));\n    \n    return vec2(x1,y1);\n}\n\nvec3 createOrbit(float m, vec2 uv) \n{ \n    vec3 colorOrbit = vec3(0.0, 0.19, 0.51);\n    return mix(vec3(.0),\n               colorOrbit, \n               smoothstep(1.5/iResolution.y, 0., abs(length(uv)-(m)))); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( fragCoord.xy / iResolution.xy ) - 0.5;  // -0.5 <> 0.5\n    uv.x *= iResolution.x / iResolution.y;\n\tvec4 backgroundImage = texture(iChannel0,uv);\n    backgroundImage.r -= 0.4;\n    backgroundImage.b -= 0.2;\n    backgroundImage.g -= 0.4;\n    backgroundImage /= 2.0;\n    \n    fragColor = backgroundImage;\n    \n    vec3 c = backgroundColor;\n    \n    \n    float diam = 0.00073; // Diameter\n    float dist = 0.00062; // Distance from the Sun\n    float vel  = 0.031;   // Mean orbital velocity \n    \n    vec3 orbitMercury \t= createOrbit(dist*188.0, uv);\n    vec3 orbitVenus \t= createOrbit(dist*242.0, uv);\n    vec3 orbitEarth \t= createOrbit(dist*300.0, uv);\n    vec3 orbitMars \t\t= createOrbit(dist*345.0, uv);\n    vec3 orbitJupiter \t= createOrbit(dist*425.0, uv);\n    vec3 orbitSaturn \t= createOrbit(dist*542.0, uv);\n    vec3 orbitUranus \t= createOrbit(dist*632.0, uv);\n    vec3 orbitNeptune \t= createOrbit(dist*710.0, uv);\n    vec3 orbitPluto \t= createOrbit(dist*777.0, uv);\n\n    c += orbitMercury;\n    c += orbitVenus;\n    c += orbitEarth;\n    c += orbitMars;\n    c += orbitJupiter;\n    c += orbitSaturn;\n    c += orbitUranus;\n    c += orbitNeptune;\n    c += orbitPluto;\n    \n    \n    drawCircle(uv, YELLOW,\t\t70.0  * diam, 0.005, CENTER, c);\n    drawCircle(uv, ColMercury,\t12.0  * diam, 0.005, Rotation(dist*188.0, vel*47.89), c);\n    drawCircle(uv, ColVenus,  \t26.0  * diam, 0.005, Rotation(dist*242.0, vel*35.03), c);\n\tdrawCircle(uv, ColEarth,    28.0  * diam, 0.005, Rotation(dist*300.0, vel*29.79), c);\n    drawCircle(uv, ColMars,  \t14.0  * diam, 0.005, Rotation(dist*345.0, vel*24.13), c);\n    drawCircle(uv, ColJupiter,  56.0  * diam, 0.005, Rotation(dist*425.0, vel*13.06), c);\n    drawCircle(uv, ColSaturn,  \t46.0  * diam, 0.005, Rotation(dist*542.0, vel*9.64),  c);\n    drawCircle(uv, ColUranus,   29.0  * diam, 0.005, Rotation(dist*632.0, vel*6.81),  c);\n    drawCircle(uv, ColNeptune,  31.0  * diam, 0.005, Rotation(dist*710.0, vel*5.43),  c);\n    drawCircle(uv, ColPluto,  \t14.0  * diam, 0.005, Rotation(dist*777.0, vel*4.74),  c);\n    \n    vec2 starPos = vec2(-0.8,0.3);\n\tdrawCircle(uv, WHITE*(0.1/sin(iTime*2.0)), 34.0  * diam, 0.06, vec2(0.6,0.1),  c);\n    drawCircle(uv, WHITE*(sin(iTime*2.0)), 34.0  * diam, 0.06, vec2(0.5,-0.4),  c);\n    drawCircle(uv, WHITE*(cos(iTime*3.0)+0.2), 34.0  * diam, 0.06, vec2(-0.5,-0.2),  c);\n    drawCircle(uv, WHITE*(sin(iTime)+cos(iTime))*1.2, 24.0  * diam, 0.06, vec2(-0.8,-0.3),  c);\n    \n    drawCircle(uv, WHITE*(sin(iTime)-cos(iTime))*1.2, 34.0  * diam, 0.06, starPos,  c);\n    \n    // Brightness ring around the Sun\n    c[0] += .03/length((mod(length(uv),2.0)-.04));\n    c[1] += .03/length((mod(length(uv),2.0)-.04));\n    \n\tfragColor += vec4(c, 0.0);\n}","name":"Image","description":"","type":"image"}]}