{"ver":"0.1","info":{"id":"WtS3zw","date":"1558781093","viewed":178,"name":"Water Mites","username":"Radical_Ed","description":"beta Water Mites","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beta","hackerspace","rebop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This is a rework of https://www.shadertoy.com/view/3lSGz1, \n// created by sschmidtix, with sound, by Radical Ed\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\n#define PERIOD 2.\n#define REPETITIONS 2\n\nconst float PI = 3.1415926535;\n\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nfloat cross2(in vec2 _st, float _size){\n    return  box(_st, vec2(_size,_size/4.)) +\n            box(_st, vec2(_size/4.,_size));\n}\n\nvec3 shadeBlob(vec2 p, float index, float value, float scale)\n{\n    float screenRatio = iResolution.x / iResolution.y;\n    vec2 pc = vec2(0.1 + (screenRatio - 0.2) * value, index);\n    \n    float d = length(pc - p) / 0.015*scale/0.3;\n    \n    return vec3(3. * vec3(0.2, 0.5, 0.7) / (max(d * d, 1.)));\n}\n\nfloat step_interp(float x) {\n    return step(0.5, x);\n}\n\nfloat linear_interp(float x) {\n    float c = clamp(x, 0., 1.);\n    \n    return c;\n}\n\nfloat cosine_interp(float x) {\n    float c = clamp(x, 0., 1.);\n    \n    return 0.5 * (1. - cos(PI * c));\n}\n\nfloat smoothstep_interp(float x) {\n//    return smoothstep(0., 1., x);\n\n    float c = clamp(x, 0., 1.);\n    \n    return c * c * (3. - 2. * c);\n}\n\nfloat quintic_interp(float x) {\n    float c = clamp(x, 0., 1.);\n    \n    return c * c * c * ((6. * c - 15.) * c + 10.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.yy;\n    vec2 q = fragCoord.xy / iResolution.yy;\n    \n    \n    // per lo Spectrum Audio\n    vec4 spec = vec4(0.1,0.1,0.1,0.1);\n    \n    vec2 translate = vec2(cos(iTime),sin(iTime));\n    vec2 translate2 = vec2(sin(iTime),cos(iTime));\n    p += translate*0.35*sin(iTime);\n    q += translate2*1.35*sin(iTime);\n    \n    float t = abs(2. * fract(iTime / PERIOD) - 1.);\n    //int sel = int(6. * fract(time / (float(REPETITIONS) * PERIOD) / 6.));\n    int sel = 5;\n    \n    // Background pattern\n    \n    vec3 col = vec3(0.0 + 0.000 * mod(floor(p.x * 10.0) + floor(p.y * 10.0), 2.0));\n    vec3 col2 = vec3(0.0 + 0.000 * mod(floor(q.y * 5.0) + floor(q.x * 5.0), 2.0));\n    //vec3 col = vec3(0.0,0.0,0.0,0.0));\n    \n    \n    col += shadeBlob(p, 0.1, smoothstep_interp(t)*spec.x+0.5, 0.1/0.1);\n    col2 += shadeBlob(q, 0.3+spec.z, linear_interp(t)*spec.y+0.5, 0.1);\n    col += shadeBlob(p, 0.5+spec.x, cosine_interp(t)*spec.z+0.7, 0.1/0.3);\n    col2 += shadeBlob(q, 0.7, smoothstep_interp(t)*spec.z+0.1, 0.1/0.6);\n    col += shadeBlob(p, 0.9-spec.y, quintic_interp(t)*spec.z+0.3, 0.1/0.9);\n    \n    \n    col = pow(col, vec3(0.45));\n    col2 = pow(col2, vec3(0.45));\n    \n    fragColor = vec4(col+col2, 1.0);\n}","name":"Image","description":"","type":"image"}]}