{"ver":"0.1","info":{"id":"3tj3DV","date":"1561198526","viewed":138,"name":"mirrored fbm","username":"stormy","description":"hello world","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fbm","color","mirror"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define v2 vec2\n#define v3 vec3\n#define v4 vec4\n#define f32 float\n#define s32 int\n#define b32 bool\n#define m2 mat2\n#define TAU 6.283185307179586\n#define DEG_TO_RAD (TAU / 360.0)\n#define zero_v2 vec2(0,0)\n\nv2 uv;\n\nf32 random (v2 p) {\n    return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nf32 noise (v2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nf32 fbm(v2 p, f32 freq, f32 amp, f32 lacunarity, f32 gain, s32 octave) {\n    f32 accum = 0.;\n    //f32 ang = 1.6180339;\n    f32 ang = 0.5;\n\n    for(s32 i = 0; i < octave; i++) {\n        f32 n = noise(p) * amp;\n        accum += n;\n\n        amp *= gain;\n\n        p = (m2(cos(ang), sin(ang), -sin(ang), cos(ang)) * p) * freq + v2(1000., 0.);\n        p *= 2.;\n\n        freq *= lacunarity;\n    }\n\n    return accum;\n}\n\n\nf32 fbm_s(v2 p) {\n    return fbm(p, 1.5, .6, 1.1, .5, 5);\n}\n\n\nvoid mainImage(out vec4 out_color, in vec2 fragCoord) {\n    f32 time = iTime * .1;\n    v2 resolution = iResolution.xy;\n    uv = (2. * gl_FragCoord.xy / resolution) - 1.;\n    uv.y *= resolution.y / resolution.x;\n\n    out_color.rgba = v4(0,0,0,1);\n    \n    v2 p = abs(uv);\n    p *= time * 10.;\n    p += v2(1000. - time * .02);\n   \n    v2 f1 = v2(fbm_s(p) + time * .02, fbm_s(p));\n    v2 f2 = v2(fbm_s(p + f1 + atan(fbm_s(f1) + p.x * p.y)), fbm_s(p + f1 * 2.));\n    v2 f3 = v2(fbm_s(p + f2 * 5.), fbm_s(p + f2 + atan(fbm_s(f2))));\n    f32 final = fbm_s(p + f3 * 4. + time * 4.);\n\n    //f32 r = clamp(final - 0.3, 0., 1.);\n    //f32 b = clamp(final, 0., .2);\n    \n    f32 r = clamp(final, 0., .1);\n    f32 g = clamp(final*final*final*final, 0., .9);\n    f32 b = clamp(final*.5, 0., 0.4);\n\n    out_color.rgb = v3(r, g, b);\n    out_color.rgb *= (1.2 - length(uv));\n}","name":"Image","description":"","type":"image"}]}