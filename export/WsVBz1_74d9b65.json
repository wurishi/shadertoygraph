{"ver":"0.1","info":{"id":"WsVBz1","date":"1719257329","viewed":22,"name":"KIFS Fractalss","username":"Tech_","description":"private","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["private"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define SEGMENTS 5\n\nvec2 N(float angle) {\n\treturn vec2(sin(angle), cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n    vec3 col;\n    \n    uv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.4;\n    \n    uv.x = abs(uv.x);\n    uv.y += tan((5.0 / 6.0) * 3.1415) * 0.5;\n    vec2 n = N((5.0 / 6.0) * 3.1415);\n    float d = dot(uv - vec2(0.5, 0.0), n);\n    uv -= n * max(d, 0.0) * 2.0;\n    \n    // col += smoothstep(0.01, 0.0, abs(d));\n    \n    n = N((2.0 / 3.0) * 3.1415);\n\n    float scale = 1.0;\n    uv.x += 0.5;\n    \n    for(int i = 0; i < SEGMENTS; i++) \n    {\n    \tuv *= 3.0;\n        scale *= 3.0;\n        uv.x -= 1.5;\n\n        uv.x = abs(uv.x);\n        uv.x -= 0.5;\n        uv -= n * min(dot(uv, n), 0.0) * 2.0;\n    }\n    \n    d = length(uv - vec2(clamp(uv.x, -1.0, 1.0), 0));\n    \n    col += smoothstep(1.0 / iResolution.y, 0.0, d / scale / 3.0);\n    // col.rg = uv;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}