{"ver":"0.1","info":{"id":"7sc3D8","date":"1629671687","viewed":78,"name":"doodle thing bored","username":"pema99","description":"epic","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float smin( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nmat2 rot(float r)\n{\n    return mat2(cos(r), sin(r), -sin(r), cos(r));\n}\n\nfloat map(vec3 p)\n{\n    float d = length(p) - 0.5;\n    d -= sin(p.x*10.0)*sin(p.y*11.0)*sin(p.z*12.0)*(cos(iTime))*0.1;\n    return d;\n}\n\nvec2 march(vec3 ro, vec3 rd)\n{\n    float t = 0.;\n    vec3 p = ro;\n    int i = 0;\n    for (; i < 70; i++)\n    {\n        float dist = map(p) * 0.9;\n        if (dist < 0.001) break;\n        t += dist;\n        p = ro + t * rd;\n    }\n    return vec2(t, i);\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 o = vec2(0.001, 0.);\n    return normalize(vec3(\n        map(p + o.xyy) - map(p - o.xyy),\n        map(p + o.yxy) - map(p - o.yxy),\n        map(p + o.yyx) - map(p - o.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * ((fragCoord/iResolution.xy) - 0.5);\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 col = vec3(0.);\n    for (int i = 0; i < 2; i++)\n    {\n        for (int j = 0; j < 2; j++)\n        {\n            vec3 ro = vec3(0., 0., -3.);\n            vec3 rd = normalize(vec3(uv + vec2(float(i)*0.5+0.25, float(j)*0.5+0.25)*0.006, 0.) - ro);\n            \n            ro.xz *= rot(iTime);\n            ro.xy *= rot(iTime*0.3);\n            rd.xz *= rot(iTime);\n            rd.xy *= rot(iTime*0.3);\n\n            vec2 res = march(ro, rd);\n            float dist = res.x;\n            float iters = res.y;\n\n            if (dist < 10.)\n            {\n                vec3 hit = ro + dist * rd;\n                vec3 norm = normal(hit);\n                vec3 refl = texture(iChannel0, reflect(rd, norm)).xyz;\n                vec3 refr = texture(iChannel0, refract(rd, norm, 1.2)).xyz;\n                col += mix(refl, refr, sin(iTime)*0.5+0.5);\n                col -= 0.6*(iters/50.0);\n                //col += (normal(ro + dist * rd) * 0.5 + 0.5) * 0.25;\n                \n                col *= 0.5;\n            }\n            else\n            {\n                col += texture(iChannel0, rd).xyz*0.25;\n            }\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}