{"ver":"0.1","info":{"id":"MsGGWK","date":"1456370344","viewed":388,"name":"Simple Polygons","username":"sillsm","description":"Four ways to draw a simple regular polygon.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Max Sills 2016\n// Licensed under the MIT license.\n//\n// Regular polygons four ways.\n// Drawing func from jonobr1 https://www.shadertoy.com/view/XsjGDt\n\n// Convert r, g, b to normalized vec3\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\n// Defined by apothem.\nvec4 poly1(vec2 uv, vec2 pos, float mid, vec3 color, float n) {\n  vec2 trans = pos - uv;\n  float a = atan(trans.x,trans.y);\n  float r = length(trans);\n\n  float i = 2.*acos(-1.)/n;\n  float th= mod(a, i) - (i/2.0);\n  float l = mid/cos(th);\n\n  float t = clamp(r-l, 0.0, 1.);\n  return vec4(color, 1. -t);\n}\n\n// Lerp between the boundaries of the first wedge.\nvec4 poly2(vec2 uv, vec2 pos, float rad, vec3 color, float n) {\n  vec2 trans = pos - uv;\n  float a = atan(trans.x,trans.y);\n    \n  float i = 2.*acos(-1.)/n; // Wedge angle is 2pi/n.\n  float th = mod(a,i); // Where does trans sit in wedge?\n\n  vec2 bound = mix(vec2(rad, 0.), vec2(rad*cos(i), rad*sin(i)), th/i);\n\n  float t = clamp(length(trans)-length(bound), 0.0, 1.);\n  return vec4(color, 1. -t);\n}\n\n// Law of sines.\nvec4 poly3(vec2 uv, vec2 pos, float rad, vec3 color, float n) {\n  float pi = acos(-1.);\n  vec2 trans = pos - uv;\n  float a = atan(trans.x,trans.y);\n  float r = length(trans);\n  \n  float i = 2.*pi/n; // wedge angle\n \n  float th = mod(a, i);\n  float b = (pi - i) / 2.0;\n  float c = pi - th - b;\n  float l = (sin(b) * rad)/sin(c);\n\n  float t = clamp(r-l, 0.0, 1.);\n  return vec4(color, 1. -t);\n}\n\n// Rotate first triangle until side is perp with x-axis.\n// Maintain y bound.\nvec4 poly4(vec2 uv, vec2 pos, float rad, vec3 color, float n) {\n  float pi = acos(-1.);\n  vec2 trans = pos - uv;\n  float a = atan(trans.x,trans.y);\n  float r = length(trans);\n\n  float th = mod(a, 2.*pi/n);\n  th += pi/2. - pi/n;\n  r = r*sin(th);\n\n  float l = rad *cos(pi/n); // get radius from apothem\n  float t = clamp(r-l, 0.0, 1.);\n  return vec4(color, 1. -t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = 0.25 * iResolution.y;\n\n    // Background layer\n\tvec4 layer1 = vec4(rgb(210.0, 222.0, 228.0), 1.0);\n\t\n    // Animate\n    float sides = 5. * abs(cos(iTime)) + 3.0;\n    \n\t// Draw the Polygon\n\tvec3 red = rgb(225.0, 95.0, 60.0);\n\tvec4 layer2 = poly4(uv, center, radius, red, sides);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n}","name":"Image","description":"","type":"image"}]}