{"ver":"0.1","info":{"id":"csf3RX","date":"1666494263","viewed":217,"name":"artificial water reservoir, full","username":"jt","description":"Somewhat hacky version of [url=https://www.shadertoy.com/view/ddsGz2]artificial water reservoir[/url] with added water and [url=https://www.shadertoy.com/view/MdlXz8]caustic[/url] reflections, just to see what it looks like.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["water","architecture","construction","building","hydraulic","artificial","reservoir","engineering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/csf3RX artificial water reservoir, full by jt\n// based on https://www.shadertoy.com/view/ddsGz2 artificial water reservoir by jt\n// based on https://www.shadertoy.com/view/dss3R2 simple column 2d sdf\n\n// tags: water, architecture, construction, building, hydraulic, artificial, reservoir, engineering\n\n// artificial water reservoir, full (c) 2022 by Jakob Thomsen\n// This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define pi 3.1415926\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + uint(v.y << 8) + uint(v.z << 16));\n}\n\nfloat hash(ivec3 v)\n{\n    return float(uhash(v))/float(0xFFFFFFFF);\n}\n\n// https://www.shadertoy.com/view/4sc3z2\n// Noise Lab (3D) by candycat\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n\n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n\n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n    vec3 i1 = e * (1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy * (1.0 - e);\n\n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n\n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n\n    return dot(vec4(31.316), n);\n}\n*/\n\n#define TAU (2.0*pi)\n#define MAX_ITER_CAUSTICS 5\n\n// https://www.shadertoy.com/view/MdlXz8 Tileable Water Caustic by Dave_Hoskins \nfloat caustics(vec2 fragCoord ) \n{\n\tfloat time = iTime * .5+23.0;\n    // uv should be the 0-1 uv of texture...\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n    vec2 p = mod(uv*TAU, TAU)-250.0;\n\n\tvec2 i = vec2(p);\n\tfloat c = 1.0;\n\tfloat inten = .005;\n\n\tfor (int n = 0; n < MAX_ITER_CAUSTICS; n++) \n\t{\n\t\tfloat t = time * (1.0 - (3.5 / float(n+1)));\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\tc += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n\t}\n\tc /= float(MAX_ITER_CAUSTICS);\n\tc = 1.17-pow(c, 1.4);\n\n\treturn pow(abs(c), 8.0);\n}\n\nfloat column(vec2 p, float s) // jt\n{\n    p = abs(p);\n    float t = 1.0 - s;\n    return s-length(vec2(min(p.x,s)-s,max(t,p.y)-t))+min(max(0.0,p.x-s), max(0.0,1.0-p.y-s));\n}\n\nfloat column(vec3 p, float s) // jt\n{\n    return column(vec2(length(p.xy), p.z), s);\n}\n\nfloat reservoir(vec3 p)\n{\n    p = mod(p+vec3(0,0,1.0),2.0)-1.0; // repeat\n    return column(p, 0.5)-0.1;\n}\n\nfloat map(vec3 p)\n{\n    return reservoir(p);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n#define MAX_ITER 200u // avoid stalling GPU if ray passes very close and parallet to surface\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    float t;\n    uint i;\n    for(t = t0, i = 0u; t < t1 && i < MAX_ITER; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n/*\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    if(t0 < 1.0)\n    {\n        for(float t = t0; t < 1.0;)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n        t0 = 1.0;\n    }\n\n    for(float t = t0; t < t1;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON * t) // optimization: coarser epsilon in the distance\n            return t;\n        t += h;\n    }\n\n    return t1;\n}\n*/\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat light(vec3 dst)\n{\n    vec3 n = normal(dst);\n    vec3 lightdir = vec3(0.5*cos(iTime*0.1),0.5*sin(iTime*0.1),0)-dst;\n    float lightdist = length(lightdir);\n    lightdir /= lightdist;\n    vec3 ambient = vec3(0.0);\n    float brightness = max(dot(lightdir, n), 0.0) * (1.0/(lightdist*lightdist));\n\n    //brightness *= shadow(dst,lightdir, 0.01, lightdist);\n    //brightness *= softshadow(dst,lightdir, 0.01, lightdist, 50. );\n    //color = (ambient * calcAO(dst, n) + brightness) * color;\n    //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n    return brightness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.01);\n    my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0,-10.0*step(0.5, fract(iTime/10.0)));\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    vec3 color = vec3(1);\n    //color += vec3(0.5,0.5,0.0);\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n        //color += vec3(0,0,n.z)*0.5+0.5;\n        // p.z=ro.z+rd.z*t\n        // p.z-ro.z=rd.z*t\n        // (p.z-ro.z)/rd.z=t\n        float plane_dist = (-0.5-ro.z)/rd.z;\n        if(plane_dist > 0.0 && plane_dist < dist)\n        {\n        //color += n*0.5+0.5;\n            ro += rd * plane_dist;\n\n            vec2 t = (texture(iChannel0,0.1*ro.xy+iTime*0.01).xy+texture(iChannel0,0.1*ro.yx-iTime*0.01).xy)/2.0;\n            rd = reflect(rd, normalize(vec3(t*2.0-1.0,20.0)));\n            \n            //color = vec3(abs(n.z));\n            //color = vec3(0.5);\n            //color += 5.0*caustics(vec2(ro.x+ro.y,ro.y-ro.x)*500.0);\n            dist = trace(ro, rd, 0.0, DIST_MAX);\n            \n            color *= 0.5;\n        }\n    }\n\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n        //color = n*0.5+0.5;\n        //color += smoothstep(0.5,1.0, dst.z)*5.0*caustics(dst.xy*500.0);\n        color += /*2.0*vec3(0.25,0.5,0.75)**/smoothstep(0.5,1.0, dst.z)*5.0*caustics(vec2(dst.x+dst.y,dst.y-dst.x)*250.0);\n\n        color *= light(dst);\n    //color *= vec3(0.25,0.5,0.75)*2.0;\n    }\n\n    //color = mix(color, vec3(0.25,0.75,1.0)*0.05, dist / DIST_MAX);\n    color = mix(color, vec3(0), dist / DIST_MAX);\n\n    //color = mix(vec3(color), vec3(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    color = sqrt(color); // approximate gamma\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}