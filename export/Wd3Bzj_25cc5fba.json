{"ver":"0.1","info":{"id":"Wd3Bzj","date":"1605491683","viewed":115,"name":"Pixel Space","username":"timeiskey","description":"light added to basic ray tracing. some indices res clamping. neat effect.\n\nideas\n-------------\natmosphere? 2nd texture fuzzy translucent 2nd sphere over first one. \nmoon, other planets\nsun.\n\nnot sure how to handle occlusion for multiple planets. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","ray","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_DIVS 5.0\n#define TEXTURE_DIVS 200.0\n#define SPACE_TEX_DIVS 200.0\n#define SPACE_DIVS 4.0\n#define PI 3.1415926535\n#define AMBIENT 0.05\n#define DIFFUSE 0.6\n#define SPECULAR 0.2\n\nconst vec3 sphere_base_color \t= vec3(0.3, 0.4, 0.2);\nconst vec3 space_base_color \t= vec3(0.8, 0.6, 0.6);\nconst vec3 light_color \t\t\t= vec3(0.8, 0.7, 0.7);\n\n\nfloat remap01(float a, float b, float t)\n{\n\treturn (t-a)/(b-a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //\tstart it off\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n\tvec3 col = vec3(0);\n\n    //\tfire a ray for each pixel\n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    //\tmake the scene\n    vec3 light = vec3(\n        cos(iTime/10.0),\n        0.6,\n        sin(iTime/10.0)\n    );\n    light = light * 5.0;\n    \n    vec3 s = vec3(0, 0, 4);\n    float r = 0.8;\n    vec3 sphere_dir = vec3(iTime / 150.0, iTime / 140.0, 0.0);\n\n    //\tsee if ray hit sphere\n    vec3 to_sphere = s-ro;\n    float t = dot(to_sphere, rd);\n    vec3 p = ro + rd * t;\n    float y = length(s-p);\n    \n    //\t//\tif hit\n    if( y < r)\n    {\n        float x = sqrt(r*r - y*y);\n        float front_hit_t = t-x;\n        float back_hit_t = t+x;\n        vec3 hp = ro + rd * front_hit_t;\n\n       \t//\tlighting model\n        vec3 to_light = normalize(light - hp);\n        vec3 normal = normalize(hp - s);\n        \n        vec2 sphere_uv = vec2(\n            0.5 + atan(normal.x, normal.z) / (2.0 * PI) + sphere_dir.x,\n            0.5 + asin(normal.y) / PI + sphere_dir.y\n        );\n        sphere_uv = floor(sphere_uv*TEXTURE_DIVS)/TEXTURE_DIVS;\n        vec3 sphere_color = texture(iChannel0, sphere_uv).rgb;\n        //sphere_color = length(sphere_color) * sphere_base_color;\n        sphere_color = floor(sphere_color*NUM_DIVS)/NUM_DIVS;\n        col += sphere_color * AMBIENT;\n        \n        //\t//\tlambert\n        float b = max(dot(to_light, normal),0.0);\n        b = floor(b*NUM_DIVS)/NUM_DIVS;\n        col += b * sphere_color * DIFFUSE;\n        \n        //\t//\tblinn_phong\n\t\t//vec3 to_cam = normalize(ro - hp);\n        //vec3 half_vec = normalize(to_light + to_cam);\n        //b = max(dot(normal, half_vec), 0.0);\n        //b = pow(b, 50.0);\n        //b = floor(b*NUM_DIVS)/NUM_DIVS;\n        //col += b * light_color * SPECULAR;\n        \n    }\n    else\t//\tspace\n    {\n        vec2 space_uv = vec2(uv.x + iTime / 150.0, uv.y);\n        space_uv = floor(space_uv * SPACE_TEX_DIVS) / SPACE_TEX_DIVS;\n        vec3 bg = max(texture(iChannel0, space_uv).rgb, 0.0);\n        bg = length(bg) * space_base_color;\n        bg = floor(bg * SPACE_DIVS) / SPACE_DIVS;\n        col += bg * 0.3;\n    }\n\n        \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}