{"ver":"0.1","info":{"id":"mlccW8","date":"1699119863","viewed":44,"name":"aurora normal","username":"zhy437488627","description":"just normal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["auroar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n\n// 模拟的Perlin噪声函数\nfloat noise(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(112.9898,78.233))) * 43758.5453123);\n}\n\n// 插值函数\nfloat interpolate(float a, float b, float t) {\n    return a + smoothstep(0.1, 1.0, t) * (b - a);\n}\n\n// 创建Perlin噪声的函数\nfloat hash21(vec2 p)\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n\t\n    return  -1.+2.*fract(sin(h)*43758.5453123);\n}\n\nvec2 hash22(vec2 p)\n{\n    p = p*mat2(129.1,311.7,269.5,183.3);\n\tp = -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n\treturn sin(p*6.283 + iTime*0.1);\n}\n\nfloat perlinNoise(vec2 p)\n{\n\tvec2 pi = floor(p);\n    vec2 pf = p-pi;\n    \n    vec2 w = pf*pf*(3.-2.*pf);\n    \n    float f00 = dot(hash22(pi+vec2(.0,.0)),pf-vec2(.0,.0));\n    float f01 = dot(hash22(pi+vec2(.0,1.)),pf-vec2(.0,1.));\n    float f10 = dot(hash22(pi+vec2(1.0,0.)),pf-vec2(1.0,0.));\n    float f11 = dot(hash22(pi+vec2(1.0,1.)),pf-vec2(1.0,1.));\n    \n    float xm1 = mix(f00,f10,w.x);\n    float xm2 = mix(f01,f11,w.x);\n    \n    float ym = mix(xm1,xm2,w.y); \n    return ym;\n   \n}\n\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle), cos(_angle));\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y; // 纵横比校正\n    // 旋转画面方向70度\n    float angle = 10.0 * TAU / 360.0; // 将70度转换为弧度\n    mat2 rot = mat2(cos(angle), -sin(angle),\n                    sin(angle), cos(angle));\n    uv = rot * (uv - .5) + 0.5; // 旋转uv坐标，中心点为0.5, 0.5\n    uv.y += 0.50;\n    //uv.x += 6.50;\n\n    // 确保旋转后移动不会导致uv坐标越界\n    //uv = fract(uv);\n    // 产生光波纹\n    float n = perlinNoise(uv * 1.0 - iTime * 0.3);\n    n += perlinNoise(uv * 2.0 - iTime * 0.25) * 0.2;\n    n += perlinNoise(uv * 3.0 - iTime * 0.125) * 0.1;\n     n += perlinNoise(uv * 4.0 - iTime * 0.225) * 0.15;\n\n    // 产生极光效果\n    float aurora = min(sin(uv.y * 10.0 + n * 5.0 - iTime * 0.4) * 0.5 + 0.5, 0.9);\n    aurora *= smoothstep(0.1, 0.9, uv.y);\n\n    // 设置颜色为蓝绿色调\n    vec3 color = aurora * vec3(0.0, 0.7, 0.57)*0.4;\n\n    // 输出颜色\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}