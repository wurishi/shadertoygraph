{"ver":"0.1","info":{"id":"tsyXDW","date":"1574039377","viewed":145,"name":"Infinitney","username":"gabrielmuller","description":"hmmm","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["video","filter","generator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.2831853\n#define VIDEO true\nfloat wave(float x, float freq, float phase) {\n    return (sin(x * freq + phase) + 1.) * 0.5;\n}\n\nfloat rand(inout float seed) {\n    seed += wave(seed, 1., 12.) * 0.6;\n    return fract(sin(seed)*1000000.);\n}\n\nfloat rand (in vec2 st) {\n    return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\nfloat choose(vec3 v, inout float seed) {\n    return v[int(mod(seed++, 3.))];\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n        (c - a)* u.y * (1.0 - u.x) +\n        (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 6\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 omni(vec3 v, inout float seed) {\n    float p = rand(seed);\n    vec3 res = v;\n    for (int i = 0; i < 3; i++) {\n        if (p < 0.15) {\n            vec2 tmp = vec2(choose(v, seed), choose(v, seed));\n            tmp = rotate2d((choose(v, seed)+1.) * TAU) * tmp;\n            res[i] = wave(tmp.x, tmp.y*5.+0.6, choose(v, seed));\n        } else if (p < 0.2) {\n            res[i] = pow(choose(v, seed), choose(v, seed)+0.2);\n        } else if (p < 0.3) {\n            float s = choose(v, seed) + choose(v, seed);\n            res[i] = mix(choose(v, seed), rand(s), choose(v, seed)*0.03);\n        } else if (p < 0.35) {\n            res[i] = length(vec2(choose(v, seed), choose(v, seed))) / 1.4;\n        } else if (p < 0.40) {\n            res[i] = pow(min(choose(v, seed), choose(v, seed)), 0.8);\n        } else if (p < 0.48) {\n            res[i] = noise(vec2(choose(v, seed), choose(v, seed)));\n        } else if (p < 0.50) {\n            res[i] = 1. - choose(v, seed);\n        } else if (p < 0.55) {\n            res[i] = choose(v, seed);\n        } else if (p < 0.65) {\n            res[i] = pow(max(smoothstep(choose(v, seed), choose(v, seed), choose(v, seed)), choose(v, seed)), 2.);\n        } else if (p < 0.75) {\n            float r = rand(seed) + 0.5;\n            res[i] = pow(abs(choose(v, seed) - r + choose(v, seed)*r), 0.5);\n        } else if (p < 0.85) {\n            float modulus = choose(v, seed);\n            res[i] = mod(choose(v, seed), modulus) + modulus/2.;\n        } else {\n        \tres[i] = fbm(vec2(choose(v, seed), choose(v, seed)) * 30. * pow(choose(v, seed), 3.));\n        }\n    }\n    res = vec3(rotate2d(choose(v, seed)) * res.xy, res.z);\n\n\treturn res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/vec2(min(iResolution.x, iResolution.y));\n    float size = pow(wave(iTime, 0.3, -2.4) + 1., pow(wave(iTime, 0.08, 0.), 2.)*6.5) + 1.;\n    float seed;\n    vec2 cam = (vec2(wave(iTime, 0.02, 0.), wave(iTime, 0.0111, 0.5)));\n    cam = (cam * iResolution.xy + iMouse.xy) * 0.1;\n    vec2 pos = (uv*size + cam);\n    float border = 0.1 + size * 0.005;\n    float brightness = 1.0;\n    if (size < 100. && (fract(pos.x) < border || fract(pos.y) < border)) {\n        seed = floor(iTime);\n        pos = fract(pos * 0.01);\n    } else {\n    \tseed = floor(pos.x)*1.00180820 + floor(pos.y)*1000.58765 + iDate.z*101.;\n        pos = fract(pos);\n\n    }\n    vec3 warped;\n    float timeNoise = noise(vec2(iTime*rand(seed)*2.));\n    if (VIDEO) {\n        warped = vec3(texture(iChannel0, pos).xz, timeNoise);\n    } else {\n        pos = rotate2d(rand(seed)) * pos * 0.7;\n        warped = vec3(pos, timeNoise);\n    }\n    int iters = int(pow(rand(seed), 2.) * 3. + 2.);\n    for (int i = 0; i < iters; i++) {\n    \twarped = omni(warped, seed);\n    }\n    float interval = pow(rand(seed), 5.);\n\n    fragColor = vec4(hsb2rgb(vec3(\n        fract(rand(seed) + warped.x * interval),\n        pow(warped.y, 0.8),\n        pow(warped.z, 0.4))\n    ), 1.0);\n}","name":"Image","description":"","type":"image"}]}