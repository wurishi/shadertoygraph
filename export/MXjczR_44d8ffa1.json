{"ver":"0.1","info":{"id":"MXjczR","date":"1727944194","viewed":42,"name":"Voronoi Process","username":"DGMKPixy","description":"El proceso de generación de un patrón voronoi pero pasito a pasito.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["prueba"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec2 p, vec2 a, vec2 b)\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa,ba)/dot(ba,ba), 0., 1.);\n    return length(pa - ba*t);\n}\n\nfloat N21(vec2 p)\n{\n    p += vec2(9.4,1.2); // evitamos el 0\n    p = fract(p*vec2(238.38,812.67));\n    p += dot(p,p+22.54);\n    return fract(p.x*p.y);\n}\n\nvec2 N22(vec2 p)\n{\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 y 1)\n    vec2 uv = fragCoord;\n    float t = iTime*.3;\n    vec3 col = vec3(0.);\n    float m = 0.;    \n    \n    float minDist = 100.;\n    float cellIndex = 0.;\n    vec2 cellIndex2 = vec2(0.);\n    \n    if(false)\n    {\n    \n        for(float i = 0.; i < 50.; i++)\n        {\n            vec2 n = N22(vec2(i));\n            vec2 p = sin(n*t);\n            float d = length(uv-p);\n            //m+= smoothstep(.05,.0,d);\n\n            if(d < minDist)\n            {\n                cellIndex = i;\n                minDist=d;\n            }\n        }\n    \n        col += vec3(minDist+m);\n    }\n    else\n    {\n        // Vamos a hacer la animación de como se hace voronoi\n        float EACH_TIME = 3.;\n        float currT = fract(iTime/EACH_TIME);\n        float tCounter = iTime;\n        \n        if(tCounter < EACH_TIME)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y)*currT;\n            col.rg = uv;\n        }\n        else if(tCounter < EACH_TIME*2.)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y);\n            uv.x+=.5*currT;\n            vec2 gv = mix(uv, fract(uv)-.5, currT);\n            gv.y = uv.y;\n            col.rg = gv;\n        }\n        else if(tCounter < EACH_TIME*3.)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y);\n            uv+=.5;\n            uv*=(9.*currT)+1.;\n            vec2 gv = fract(uv)-.5;\n            col.rg = gv;\n        }\n        else if(tCounter < EACH_TIME*4.)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y);\n            uv+=.5;\n            uv*=10.;\n            vec2 gv = fract(uv)-.5;\n            vec2 id = floor(uv);\n            \n            for(float x = -1.; x <= 1.; x+=1.)\n            {\n                for(float y = -1.; y <= 1.; y+=1.)\n                {\n                    vec2 offset = vec2(x, y);\n                    vec2 n = N22(vec2(id+offset));\n                    vec2 p = offset + sin(n*tCounter)*.5;\n                    float d = length(gv-p);\n                    m += smoothstep(.06*currT,.05*currT,d);\n\n                    if(d < minDist)\n                    {\n                        //cellIndex = id;\n                        minDist = d;\n                    }\n                }\n            }\n            \n            col.rg = mix(gv,vec2(0.),currT);\n            col += vec3(m);\n            \n            //Effecto chulo\n            //col.rg = mix(gv, id*.1, currT);\n        }\n        else if(tCounter < EACH_TIME*5.)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y);\n            uv+=.5;\n            uv*=10.;\n            vec2 gv = fract(uv)-.5;\n            vec2 id = floor(uv);\n            for(float x = -1.; x <= 1.; x+=1.)\n            {\n                for(float y = -1.; y <= 1.; y+=1.)\n                {\n                    vec2 offset = vec2(x, y);\n                    vec2 n = N22(vec2(id+offset));\n                    vec2 p = offset + sin(n*tCounter)*.5;\n                    float d = length(gv-p);\n                    m+= smoothstep(mix(.06,.01,currT)\n                    ,mix(.05,.0,currT),d);\n\n                    if(d < minDist)\n                    {\n                        //cellIndex = id;\n                        minDist = d;\n                    }\n                }\n            }\n            \n            //col.rg = mix(gv,vec2(0.),currT);\n            col = mix(vec3(m), vec3(minDist), currT);\n        }else if(tCounter < EACH_TIME*6.)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y);\n            uv+=.5;\n            uv*=10.;\n            vec2 gv = fract(uv)-.5;\n            vec2 id = floor(uv);\n            for(float x = -1.; x <= 1.; x+=1.)\n            {\n                for(float y = -1.; y <= 1.; y+=1.)\n                {\n                    vec2 offset = vec2(x, y);\n                    vec2 n = N22(vec2(id+offset));\n                    vec2 p = offset + sin(n*tCounter)*.5;\n                    float d = length(gv-p);\n                    m+= smoothstep(.06,.05,d);\n\n                    if(d < minDist)\n                    {\n                        //cellIndex = id;\n                        minDist = d;\n                    }\n                }\n            }\n            \n            //col.rg = mix(gv,vec2(0.),currT);\n            col = mix(vec3(minDist),vec3(minDist)*vec3(minDist)*vec3(minDist),currT);\n        }else if(tCounter < EACH_TIME*7.)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y);\n            uv+=.5;\n            uv*=10.;\n            vec2 gv = fract(uv)-.5;\n            //gv+=4.;\n            vec2 id = floor(uv);\n            for(float x = -1.; x <= 1.; x+=1.)\n            {\n                for(float y = -1.; y <= 1.; y+=1.)\n                {\n                    vec2 offset = vec2(x, y);\n                    vec2 n = N22(vec2(id+offset));\n                    vec2 p = offset + sin(n*tCounter)*.5;\n                    float d = length(gv-p);\n                    m+= smoothstep(.06,.05,d);\n\n                    if(d < minDist)\n                    {\n                        cellIndex2 = id;\n                        minDist = d;\n                    }\n                }\n            }\n            \n            minDist = clamp(minDist, 0., minDist);\n            col = vec3(minDist)*vec3(minDist)*vec3(minDist);\n            \n            col *= mix(vec3(1.), vec3(4.*(sin(tCounter)*.5+.6),\n            2.4*(sin(tCounter*1.7)*.5+.6),\n            3.7*(sin(tCounter*1.3)*.5+.6)), currT);\n            \n            //col *= vec3(4.*N22(vec2(minDist)).y,.4,.7);\n            //col = 1. - col;\n            //col *= vec3(.3,.1,.8);\n            //col.rg = mix(gv,vec2(0.),currT);\n            //col = abs(vec3(minDist)*vec3(minDist)*vec3(minDist) - );\n        }else //if(tCounter < EACH_TIME*8.)\n        {\n            uv = ((uv-.5*iResolution.xy)/iResolution.y);\n            uv+=.5;\n            uv*=10.;\n            vec2 gv = fract(uv)-.5;\n            //gv+=4.;\n            vec2 id = floor(uv);\n            for(float x = -1.; x <= 1.; x+=1.)\n            {\n                for(float y = -1.; y <= 1.; y+=1.)\n                {\n                    vec2 offset = vec2(x, y);\n                    vec2 n = N22(vec2(id+offset));\n                    vec2 p = offset + sin(n*tCounter)*.5;\n                    float d = length(gv-p);\n                    m+= smoothstep(.06,.05,d);\n\n                    if(d < minDist)\n                    {\n                        cellIndex2 = id;\n                        minDist = d;\n                    }\n                }\n            }\n            \n            minDist = clamp(minDist, 0., minDist);\n            col = vec3(minDist)*vec3(minDist)*vec3(minDist);\n            \n            col *= vec3(4.*(sin(tCounter)*.5+.6),\n            2.4*(sin(tCounter*1.7)*.5+.6),\n            3.7*(sin(tCounter*1.3)*.5+.6));\n            \n            //col *= vec3(4.*N22(vec2(minDist)).y,.4,.7);\n            //col = 1. - col;\n            //col *= vec3(.3,.1,.8);\n            //col.rg = mix(gv,vec2(0.),currT);\n            //col = abs(vec3(minDist)*vec3(minDist)*vec3(minDist) - );\n        }\n    }\n    \n    //col += vec3(cellIndex/50.);\n    \n    //col.rg = uv;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}