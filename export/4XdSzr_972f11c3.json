{"ver":"0.1","info":{"id":"4XdSzr","date":"1726691926","viewed":20,"name":"terrible 3d","username":"shaderamogus","description":"first ever shader thing\n\nvery very very bad 3d\nmade with the help of this video: https://youtu.be/ih20l3pJoeU <------ very useful video\nuses very inefficient algorithms everywhere (especially with faces)\nmaybe suggest better improvements so i can improve?","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float[5] linestuff( vec2 p1, vec2 p2, vec2 fragCoord, vec2 tm);\nvec3 matmult3x3(vec3 invec, vec3 m[3]);\nvec3 crossproduct(vec3 a, vec3 b);\nfloat dotproduct(vec3 a, vec3 b);\n\nvec3 campos = vec3(0);\n\nvec4 bgcolor = vec4(0, 0, 0, 1);\nvec4 vertexcol = vec4(1, 0, 0, 1);\nvec4 linecol = vec4(0, 0, 1, 1);\nvec4 facecol = vec4(1, 1, 1, 1);\n\nbool dov = true;\nbool dol = true;\nbool dof = false;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = bgcolor;\n    \n    float aratio = iResolution.y/iResolution.x;\n    float fov = 90.;\n    float f = 1./tan(fov/2.);\n    float zfar = 10.;\n    float znear = 1.;\n    float q = zfar/(zfar-znear);\n    float alpha = iTime*.46;\n    float beta = iTime*.32;\n    \n    vec3 rotzxmatrix[3];\n    rotzxmatrix[0] = vec3(cos(beta), -sin(beta), 0);\n    rotzxmatrix[1] = vec3(sin(beta)*cos(alpha), cos(alpha)*cos(beta), -sin(alpha));\n    rotzxmatrix[2] = vec3(sin(alpha)*sin(beta), cos(beta)*sin(alpha), cos(alpha)); \n    \n    vec3 rpoints[48];\n    rpoints[0] = vec3(-0.453257,1.623172,-0.96282);\n    rpoints[1] = vec3(1.534463,1.652657,-1.182131);\n    rpoints[2] = vec3(-0.228153,1.644867,1.025073);\n    rpoints[3] = vec3(1.759708,1.662428,0.805761);\n    rpoints[4] = vec3(-0.422089,-0.376539,-0.949181);\n    rpoints[5] = vec3(1.565631,-0.347054,-1.168493);\n    rpoints[6] = vec3(-0.208981,-0.354995,1.038711);\n    rpoints[7] = vec3(1.77888,-0.337433,0.8194);\n    rpoints[8] = vec3(-1.23977,1.302166,0.527134);\n    rpoints[9] = vec3(-1.227584,0.031061,0.535803);\n    rpoints[10] = vec3(-1.365878,1.293157,-0.616648);\n    rpoints[11] = vec3(-1.353693,0.022051,-0.607979);\n    rpoints[12] = vec3(0.086193,1.015519,-2.915825);\n    rpoints[13] = vec3(0.88787,1.048972,-2.909606);\n    rpoints[14] = vec3(0.124354,0.196459,-2.81582);\n    rpoints[15] = vec3(0.926031,0.229912,-2.809601);\n    rpoints[16] = vec3(0.356983,0.701144,-3.473556);\n    rpoints[17] = vec3(0.655348,0.713594,-3.467337);\n    rpoints[18] = vec3(0.371185,0.396309,-3.373552);\n    rpoints[19] = vec3(0.66955,0.408759,-3.367332);\n    rpoints[20] = vec3(1.314548,1.000426,2.998019);\n    rpoints[21] = vec3(1.346664,0.374113,3.21733);\n    rpoints[22] = vec3(0.71659,0.341328,3.203692);\n    rpoints[23] = vec3(0.684474,0.967642,2.98438);\n    rpoints[24] = vec3(1.114695,1.051737,3.690961);\n    rpoints[25] = vec3(1.128303,0.786367,3.910272);\n    rpoints[26] = vec3(0.86134,0.772477,3.896634);\n    rpoints[27] = vec3(0.847733,1.037846,3.677322);\n    rpoints[28] = vec3(-1.791466,1.838773,1.199734);\n    rpoints[29] = vec3(-1.77928,-0.52721,1.215869);\n    rpoints[30] = vec3(-1.917574,1.822004,-0.929254);\n    rpoints[31] = vec3(-1.905389,-0.543979,-0.913119);\n    rpoints[32] = vec3(-2.958047,1.833237,1.268879);\n    rpoints[33] = vec3(-2.945862,-0.532746,1.285014);\n    rpoints[34] = vec3(-3.084156,1.816468,-0.860109);\n    rpoints[35] = vec3(-3.07197,-0.549516,-0.843974);\n    rpoints[36] = vec3(-2.031633,0.982119,0.455361);\n    rpoints[37] = vec3(-2.019448,0.315123,0.459909);\n    rpoints[38] = vec3(-2.157741,0.977392,-0.144825);\n    rpoints[39] = vec3(-2.145556,0.310395,-0.140276);\n    rpoints[40] = vec3(2.743604,0.319066,-0.65771);\n    rpoints[41] = vec3(2.956853,0.322441,0.039788);\n    rpoints[42] = vec3(2.712436,1.02071,-0.662496);\n    rpoints[43] = vec3(2.937681,1.024139,0.035003);\n    rpoints[44] = vec3(2.422864,0.858877,-0.347482);\n    rpoints[45] = vec3(2.636113,0.524688,-0.409796);\n    rpoints[46] = vec3(2.391696,0.796857,-0.01118);\n    rpoints[47] = vec3(2.616941,0.462664,-0.073468);\n    \n    vec2 spoints[48];\n    \n    for (int i = 0; i < 48; i++)\n    {\n        vec3 p = rpoints[i];\n        p = matmult3x3(p, rotzxmatrix);\n        p.z += 5.;\n        rpoints[i] = p;\n        \n        p.x *= aratio;\n        p.xy *= f/p.z;\n        p.z *= q;\n        p.z -= znear*q;\n        \n        p.xy += 1.;\n        p.x *= 0.5 * iResolution.x;\n        p.y *= 0.5 * iResolution.y;\n        spoints[i] = p.xy;\n        \n    }\n    \n    vec3 tris[92];\n    tris[0] = vec3(4,9,11);\n    tris[1] = vec3(6,20,21);\n    tris[2] = vec3(7,4,5);\n    tris[3] = vec3(7,40,41);\n    tris[4] = vec3(1,2,3);\n    tris[5] = vec3(5,15,13);\n    tris[6] = vec3(9,31,11);\n    tris[7] = vec3(0,8,2);\n    tris[8] = vec3(0,11,10);\n    tris[9] = vec3(2,9,6);\n    tris[10] = vec3(13,19,17);\n    tris[11] = vec3(1,13,12);\n    tris[12] = vec3(4,14,15);\n    tris[13] = vec3(0,12,14);\n    tris[14] = vec3(17,18,16);\n    tris[15] = vec3(12,17,16);\n    tris[16] = vec3(14,19,15);\n    tris[17] = vec3(12,18,14);\n    tris[18] = vec3(21,26,22);\n    tris[19] = vec3(3,20,7);\n    tris[20] = vec3(6,22,2);\n    tris[21] = vec3(2,23,3);\n    tris[22] = vec3(26,24,27);\n    tris[23] = vec3(21,24,25);\n    tris[24] = vec3(20,27,24);\n    tris[25] = vec3(22,27,23);\n    tris[26] = vec3(31,34,30);\n    tris[27] = vec3(9,28,29);\n    tris[28] = vec3(11,30,10);\n    tris[29] = vec3(8,30,28);\n    tris[30] = vec3(33,39,35);\n    tris[31] = vec3(30,32,28);\n    tris[32] = vec3(29,35,31);\n    tris[33] = vec3(28,33,29);\n    tris[34] = vec3(39,36,38);\n    tris[35] = vec3(33,36,37);\n    tris[36] = vec3(35,38,34);\n    tris[37] = vec3(32,38,36);\n    tris[38] = vec3(42,44,40);\n    tris[39] = vec3(3,42,1);\n    tris[40] = vec3(5,42,40);\n    tris[41] = vec3(7,43,3);\n    tris[42] = vec3(44,47,45);\n    tris[43] = vec3(43,45,47);\n    tris[44] = vec3(40,45,41);\n    tris[45] = vec3(42,47,46);\n    tris[46] = vec3(4,6,9);\n    tris[47] = vec3(6,7,20);\n    tris[48] = vec3(7,6,4);\n    tris[49] = vec3(7,5,40);\n    tris[50] = vec3(1,0,2);\n    tris[51] = vec3(5,4,15);\n    tris[52] = vec3(9,29,31);\n    tris[53] = vec3(0,10,8);\n    tris[54] = vec3(0,4,11);\n    tris[55] = vec3(2,8,9);\n    tris[56] = vec3(13,15,19);\n    tris[57] = vec3(1,5,13);\n    tris[58] = vec3(4,0,14);\n    tris[59] = vec3(0,1,12);\n    tris[60] = vec3(17,19,18);\n    tris[61] = vec3(12,13,17);\n    tris[62] = vec3(14,18,19);\n    tris[63] = vec3(12,16,18);\n    tris[64] = vec3(21,25,26);\n    tris[65] = vec3(3,23,20);\n    tris[66] = vec3(6,21,22);\n    tris[67] = vec3(2,22,23);\n    tris[68] = vec3(26,25,24);\n    tris[69] = vec3(21,20,24);\n    tris[70] = vec3(20,23,27);\n    tris[71] = vec3(22,26,27);\n    tris[72] = vec3(31,35,34);\n    tris[73] = vec3(9,8,28);\n    tris[74] = vec3(11,31,30);\n    tris[75] = vec3(8,10,30);\n    tris[76] = vec3(33,37,39);\n    tris[77] = vec3(30,34,32);\n    tris[78] = vec3(29,33,35);\n    tris[79] = vec3(28,32,33);\n    tris[80] = vec3(39,37,36);\n    tris[81] = vec3(33,32,36);\n    tris[82] = vec3(35,39,38);\n    tris[83] = vec3(32,34,38);\n    tris[84] = vec3(42,46,44);\n    tris[85] = vec3(3,43,42);\n    tris[86] = vec3(5,1,42);\n    tris[87] = vec3(7,41,43);\n    tris[88] = vec3(44,46,47);\n    tris[89] = vec3(43,41,45);\n    tris[90] = vec3(40,44,45);\n    tris[91] = vec3(42,43,47);\n    \n    int x;\n    for (int i = 0; i < 92; i++)\n    {\n        vec3 la = rpoints[int(tris[i].y)] - rpoints[int(tris[i].x)];\n        vec3 lb = rpoints[int(tris[i].z)] - rpoints[int(tris[i].x)];\n        vec3 normal = crossproduct(la, lb);\n        vec3 lc = rpoints[int(tris[i].x)] - campos;\n        if (dotproduct(normal, lc) < 0.)\n        {\n            vec2 p1 = spoints[int(tris[i].x)];\n            vec2 p2 = spoints[int(tris[i].y)];\n            \n            vec2 trimid = (p1 + p2 + spoints[int(tris[i].z)]) / 3.;\n            \n            float ineqtestc = 0.;\n            \n            vec3 lightdir = normalize(vec3(0, 0, -1));\n            \n            float dvec[5] = linestuff(p1, p2, fragCoord, trimid);\n            ineqtestc += dvec[4];\n            if (dvec[3] <= 1. && dvec[1] <= 1. + dvec[0] && dvec[2] <= 1. + dvec[0] && dol)\n            {\n                fragColor = linecol;\n            }\n            if ((dvec[1] < 2. || dvec[2] < 2.) && dov)\n            {\n                fragColor = vertexcol;\n            }\n        \n            p1 = spoints[int(tris[i].x)];\n            p2 = spoints[int(tris[i].z)];\n            dvec = linestuff(p1, p2, fragCoord, trimid);\n            ineqtestc += dvec[4];\n            if (dvec[3] <= 1. && dvec[1] <= 1. + dvec[0] && dvec[2] <= 1. + dvec[0] && dol)\n            {\n                fragColor = linecol;\n            }\n            if ((dvec[1] < 2. || dvec[2] < 2.) && dov)\n            {\n                fragColor = vertexcol;\n            }\n        \n            p1 = spoints[int(tris[i].y)];\n            p2 = spoints[int(tris[i].z)];\n            dvec = linestuff(p1, p2, fragCoord, trimid);\n            ineqtestc += dvec[4];\n            if (dvec[3] <= 1. && dvec[1] <= 1. + dvec[0] && dvec[2] <= 1. + dvec[0] && dol)\n            {\n                fragColor = linecol;\n            }\n            if ((dvec[1] < 2. || dvec[2] < 2.) && dov)\n            {\n                fragColor = vertexcol;\n            }\n            \n            float luminance = (dotproduct(normal, lightdir) + 1.) / 2.;\n            \n            if ((fragColor == vec4(0, 0, 0, 1) && ineqtestc == 3.) && dof)\n            {\n                fragColor = facecol * luminance;\n            }\n        }\n    }\n}\n\nfloat[5] linestuff( vec2 p1, vec2 p2, vec2 fragCoord, vec2 tm)\n{\n    float o[5];\n    float a = p1.y - p2.y;\n    float b = p2.x - p1.x;\n    float c = p1.x*p2.y - p2.x*p1.y;\n    \n    vec2 dif = p2-p1;\n    vec2 dif2 = fragCoord-p1;\n    vec2 dif3 = fragCoord-p2;\n    \n    o[0] = sqrt(dif.x*dif.x + dif.y*dif.y);\n    o[1] = sqrt(dif2.x*dif2.x + dif2.y*dif2.y);\n    o[2] = sqrt(dif3.x*dif3.x + dif3.y*dif3.y);\n    o[3] = abs(a*fragCoord.x + b*fragCoord.y + c)/sqrt(a*a+b*b);\n    \n    float lrightout = a*tm.x + b*tm.y + c;\n    float ltestout = a*fragCoord.x + b*fragCoord.y + c;\n    \n    if (lrightout > 0.)\n    {\n        if (ltestout > 0.)\n        {\n            o[4] = 1.;\n        }\n        else\n        {\n            o[4] = 0.;\n        }\n    }\n    else\n    {\n        if (ltestout > 0.)\n        {\n            o[4] = 0.;\n        }\n        else\n        {\n            o[4] = 1.;\n        }\n    }\n    \n    return o;\n}\n\nvec3 matmult3x3(vec3 invec, vec3 m[3])\n{\n    vec3 outvec;\n    outvec.x = invec.x*m[0].x + invec.y*m[0].y + invec.z*m[0].z;\n    outvec.y = invec.x*m[1].x + invec.y*m[1].y + invec.z*m[1].z;\n    outvec.z = invec.x*m[2].x + invec.y*m[2].y + invec.z*m[2].z;\n    return outvec;\n}\n\nvec3 crossproduct(vec3 a, vec3 b)\n{\n    vec3 outvec;\n    outvec.x = a.y*b.z - a.z*b.y;\n    outvec.y = a.z*b.x - a.x*b.z;\n    outvec.z = a.x*b.y - a.y*b.x;\n    return outvec;\n}\n\nfloat dotproduct(vec3 a, vec3 b)\n{\n    a = normalize(a);\n    b = normalize(b);\n    return a.x*b.x + a.y*b.y + a.z*b.z;\n}","name":"Image","description":"","type":"image"}]}