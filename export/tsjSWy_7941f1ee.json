{"ver":"0.1","info":{"id":"tsjSWy","date":"1554890134","viewed":56,"name":"Finals-8","username":"jojo169","description":"8","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["8"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 uv,float distanceAa, float distanceAb,float size)\n{\n    \n    float val = distance(uv, vec2(distanceAa, distanceAb));\n    \n\tval = step(val, size);\n    \n    return val;\n}\n\n\nfloat gear(vec2 uv,float posX,float posY,float handSize,float midSize,float handNum)\n{\n    float ratio = iResolution.x / iResolution.y;\n\n    uv.x *= ratio;\n\n    vec2 shapePos = vec2(posX * ratio, posY);\n\n    float dist = distance(shapePos, uv) * 2.0;\n\n    uv -= shapePos;\n    \n    float speed = 0.5;\n\n    float angle = (atan(uv.y, uv.x) + iTime * speed);\n\n    float radius = 0.0;\n\n\n    radius = smoothstep(-0.5, 1.0, cos(angle * handNum)) * handSize + midSize;\n\n\n    float value = 1.0 - step(radius, dist);\n    \n    return value;\n\n}\n\nfloat quad(vec2 uv,float w, float h,float posX, float posY)\n{\n    float quad = step(posX-h ,uv.x)-step(posX+h,uv.x);\n\tquad = quad + step(posY-w,uv.y)-step(0.,uv.y)-step(posY+w,uv.y);\n    return quad;\n}\nfloat rect(vec2 uv, vec2 pos, float width, float height)\n{\n    float square = (step(pos.x - width, uv.x) - step(pos.x + width, uv.x)) *\n                   (step(pos.y - height, uv.y) - step(pos.y + height, uv.y));\n    \n    \n    return square;\n}\n\nmat2 rotate2d(float angle)\n{\n    return mat2 (cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nmat2 scale2d(vec2 value)\n{\n    return mat2 (value.x, 0, 0,  value.y);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 yellow = vec3(1.,1.,0.);\n    vec3 red= vec3(1.,.0,.0);\n    vec3 blue= vec3(.0,.0,1.0);\n    vec3 black = vec3(0.,0.,0.);\n    vec3 green = vec3(0,1.,0.);\n    vec3 gray = vec3(.5,.5,.3);\n    float ratio = iResolution.x/iResolution.y;\n    uv.x *= ratio;\n    \n    \n    uv *=4.0;\n    float offset = mod(uv.y,2.)>1. ? -1. : 1.;\n    //float offset = step(1.,mod(uv.y,2.0));\n    //float offset2 = step(mod(uv.y,2.0), 1.);\n    \n\tuv.x += offset * iTime;\n\t\n    //uv.x -= offset2 *iTime;\n    uv.x *= ratio;\n    \n    vec2 pos = vec2(0.5*ratio, 0.5);\n    \n    \n    uv = fract(uv);\n    uv -= pos ;\n\n    uv += pos;\n    //uv *= scale2d(vec2(1.0, 1.0)); \n    \n    \n    vec3 color = vec3(rect(uv, pos, 0.1, 0.1))*red;\n\n    //fragColor = vec4(color,1.0);\n    \n    \n\tvec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\tvec3 val = mix(black,blue,circle(uv,tan(iTime)+.4,.1,.12));\n    val = mix(val,blue,circle(uv,tan(iTime)+1.2,.1,.12));\n    val= mix(val,red,quad(uv,.1,.6,tan(iTime)+.8,.2));\n    val= mix(val,yellow,quad(uv,.15,.4,tan(iTime)+.7,.4));\n    val= mix(val,green,quad(uv,.12,.15,tan(iTime)+.92,.4));\n    val= mix(val,green,quad(uv,.12,.19,tan(iTime)+.55,.4));\n    \n    vec3 car = val;\n\t\n\t\n\n    // Output to screen\n    fragColor = vec4(car,uv);\n}","name":"Image","description":"","type":"image"}]}