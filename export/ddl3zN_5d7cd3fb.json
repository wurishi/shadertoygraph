{"ver":"0.1","info":{"id":"ddl3zN","date":"1665782563","viewed":144,"name":"normal mapping test","username":"vital_ash","description":"Renders iChannel1 and uses iChannel0â€™s red and green channels to create an arbitrary direction. This direction is then compared to the light source using a dot product which then becomes a multiplier for lightness.\n","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["normals","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define USE_LIGHT_PROXIMITY 1\n#define USE_FAKE_NORMALS 1\n\nfloat getLightIntensity(vec2 lightPosNorm, vec2 viewerPos) {\n    return pow(1.0-max(0.0,min(1.0,distance(lightPosNorm, viewerPos))),2.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec2 lightPosition = vec2(cos(iTime)/2.0+0.5,sin(iTime)/2.0+0.5);\n    \n    float intensity = getLightIntensity(lightPosition, uv);\n    vec3 bg = vec3(intensity*1.0,intensity*0.8,intensity*0.4);\n    \n    vec2 start = vec2(0.4,0.3);\n    vec2 end = vec2(0.7,0.7);\n\n    vec2 boxCoords = uv / (end-start) - start*2.5;\n    if(boxCoords.x < 0.0 || boxCoords.x > 1.0 || boxCoords.y < 0.0 || boxCoords.y > 1.0) {\n        fragColor = vec4(bg,1.0);\n    } else {\n        vec4 spriteUV = texture(iChannel1,boxCoords);\n        vec4 fakeNormalUV = texture(iChannel0,boxCoords);\n        if(USE_LIGHT_PROXIMITY == 1) {\n            spriteUV *= intensity*10.0;\n        }\n        vec2 directionMagnitudeNormal;\n        directionMagnitudeNormal = normalize(vec2((1.0-fakeNormalUV.x)-0.5,(1.0-fakeNormalUV.y)-0.5));\n        float amt = dot(normalize(lightPosition-uv),directionMagnitudeNormal)/2.0+1.0;\n        if(USE_FAKE_NORMALS == 1) {\n            spriteUV *= amt;\n        }\n        fragColor = vec4(spriteUV.xyz,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}