{"ver":"0.1","info":{"id":"MXBSR3","date":"1710875769","viewed":43,"name":"when u rub ur eyes(epilepsy w.) ","username":"TigrePlayz","description":"Done using a tutorial, with modifications.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mesmerizing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t )\n{\n    vec3 a = vec3(1.,.5,.5);\n    vec3 b = vec3(.5,1.,.5);\n    vec3 c = vec3(.5,.5,1.);\n    vec3 d = vec3(0., 1., 1.);\n    \n    return a + b*cos(2.5*(c*t+d));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Variables\n    float sinevalue = 10.;\n    float speed = .125;\n    vec3 color = vec3(1.,.5,.2);\n    vec3 finalColor = vec3(0.0);\n    float iterations = 14.;\n    float scale = .75;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * scale * 2. - 1.;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec2 uv0 = uv;\n    \n    float c = abs(cos(vec2(iTime * speed / 2., 0)).x * 0.4) + .85;\n    //float s = abs(sin(vec2(iTime * speed / 2., 0)).x * 0.3) + .8;\n    \n    for(float i = 0.0; i < iterations; i++)\n    {\n        //uv+= vec2(c,s);\n    \n        uv = fract(uv * c);\n        uv -= .5;\n        \n        //vec2 UVOffset = sin(vec2(uv + iTime * speed));\n        \n        //uv.xy += UVOffset / 10.;\n\n        float d = length(uv * 2.0);\n\n        color = palette(length(uv0) + iTime / 2. * i);\n\n        d = .025 / abs(sin(d * sinevalue + iTime * speed * c)/sinevalue);\n\n        finalColor += color * d;\n    } \n    // Output to screen\n    fragColor = vec4(finalColor / iterations,1.0);\n}","name":"Image","description":"","type":"image"}]}