{"ver":"0.1","info":{"id":"tsKfRd","date":"1608033222","viewed":194,"name":"simple drumsounds","username":"Firepal","description":"this is my first attempt at using bpm code in a sound shader\ni don't know how to do strobe prevention so i added a \"squish\" and a define for it; if you have a better proposition do tell\n\n2022-02-25 - updated sound code for readability","likes":7,"published":1,"flags":8,"usePreview":0,"tags":["sound","drums"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define STROBEPREVENTION\n\nconst float BPM = 120.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float beattime = 1.0-fract(iTime/60.*BPM)/(BPM/60.0);\n    float claptime = 1.0-fract((iTime-0.5)/120.*BPM)/(BPM/120.0);\n    float hatintime = 1.0-fract((iTime-0.25)/60.*BPM)/(BPM/120.0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float kick = smoothstep(0.333,0.33,uv.x);\n    float hat = smoothstep(0.66,0.662,uv.x);\n    float clap = 1.0-max(kick,hat);\n    \n    vec3 col = vec3(kick*beattime,\n                    hat*hatintime,\n                    clap*claptime);\n    #ifdef STROBEPREVENTION\n    // desaturate to possibly reduce strobing?\n    col = ( col * 0.3 ) + 0.7;\n    #endif\n    \n    fragColor = vec4(col,1.0);\n    \n    fragColor *= vec4(vec3(0.4),1.0);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const float BPM = 120.;\nconst float BPS = BPM/60.0;\nconst float BPS_HALF = BPS/2.0;\nconst float twopi = 3.1415*2.0;\n\n\nvec2 limiter( vec2 soond ){\n    return smoothstep( vec2(0.0), vec2(2.0), soond);\n}\n\nvec2 mainSound( int samp, float time )\n{\n    \n    float beattime = fract(time*BPS)/BPS;\n    float claptime = fract((time-0.5)*BPS_HALF)/BPS_HALF;\n    float hatintime = fract((time-0.25)*BPS)/BPS_HALF;\n\n    float noise = texture(iChannel0,vec2(time*2.0,time*1.0)).r;\n    claptime -= noise*0.2;\n    hatintime += noise*0.8;\n    \n    float beat = sin(880.0*beattime*3.1415*2.0*exp(-80.*beattime))*exp(-8.*beattime);\n    \n    float claps = sin(880.0*claptime*3.1415*2.0*pow(1.0-claptime,8.0));\n    claps *= pow(1.0-claptime,6.0)/6.0;\n    \n    float hats = sin(440.0*hatintime*3.1415*2.0);\n    hats *= pow(1.0-hatintime,1.5); \n    \n    return limiter( vec2( beat+hats+claps ) );\n}","name":"Sound","description":"","type":"sound"}]}