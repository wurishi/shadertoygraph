{"ver":"0.1","info":{"id":"4dV3Wt","date":"1457101596","viewed":2004,"name":"Cubic Hermite 2D","username":"Phong","description":"Cubic hermite spline interpolation.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["splinecubichermite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv * iResolution.xy;\n    \n    const vec2 p1 = vec2(0,0);\n    vec2 p2 = vec2(float(iResolution.x), float(iResolution.y));\n    vec2 t1 = vec2(float(iResolution.x), 0.0);\n    vec2 t2 = vec2(iResolution.x, 0);\n    \n    const float steps = 1000.0;\n    \n    float m = 1000.0;\n    \n    for (float step = 0.0; step < steps; step += 1.0)\n    {\n       \tfloat t = step / steps;\n        \n\t\tfloat h1 = 2.0 * pow(t, 3.0) - 3.0 * pow(t, 2.0) + 1.0;\n\t\tfloat h2 = -2.0 * pow(t, 3.0) + 3.0 * pow(t, 2.0);\n\t\tfloat h3 = pow(t, 3.0) - 2.0 * pow(t, 2.0) + t;\n\t\tfloat h4 = pow(t, 3.0) - pow(t, 2.0);\n        \n        vec2 tp;\n        tp.x = h1 * p1.x + h2 * p2.x + h3 * t1.x + h4 * t2.x;\n        tp.y = h1 * p1.y + h2 * p2.y + h3 * t1.y + h4 * t2.y;\n        \n        m = min(distance(tp, p), m);\n    }\n    \n    fragColor = mix(vec4(1.0,0.0,0.0,.01), vec4(0,0,0,1.0), clamp(0.0, 1.0, smoothstep(0.0, 1.0, m / 3.0)));\n}\n*/\n// Version 2\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float m = abs( uv.x*uv.x*(3.0-2.0*uv.x) - uv.y);\n    fragColor = mix(vec4(1.0,0.0,0.0,.01), vec4(0,0,0,1.0), clamp(0.0, 1.0, smoothstep(0.0, 3.0, m*iResolution.y)));\n}\n*/\n// Version 3\nvoid mainImage( out vec4 O,  vec2 U )\n{\n    vec2 R = iResolution.xy;\n    O-=O; \n    O.r = smoothstep( 5., 0.,  abs( smoothstep(0.,R.x,U.x)*R.y - U.y));\n}","name":"Image","description":"","type":"image"}]}