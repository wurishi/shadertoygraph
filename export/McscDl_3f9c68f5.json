{"ver":"0.1","info":{"id":"McscDl","date":"1721802173","viewed":90,"name":"mill colorful","username":"nayk","description":"source https://www.shadertoy.com/view/DtGyWh https://glslsandbox.com/e#59893.3","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal","colorful","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(12,23,21))*23.5+.5)\n#define resolution iResolution.xy\n#define PI 3.14\n#define time iTime\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec2 position = ( gl_FragCoord.xy / resolution.xy * 2.0 ) - vec2( 1.0 ); // normalise and translate to center\n\tposition.x *= resolution.x / resolution.y; // scale x to make the axes proportional (y range is [-1, 1], x is depens on how wide the window is\n\tposition.x+=0.2*cos(iTime*0.2);\n\t\tposition.y+=0.2*sin(iTime*0.2);\n\tfloat d2 = distance( vec2( 0.0 ), position );\n\t\n\n\t\n\tfloat curl = 0.5;\n\tfloat m = 8.0, mm = 0.2, on = 0.5; // twiddle these\n\tfloat tstep = 0.02;\n\tfloat a = atan( position.y, position.x ) / PI / 2.0 + 0.5; // normalised angle\n\ta+= d2 * curl /* comment line from here to go for the true whirly effect */- time * tstep;\n\tfloat aa = step( mm * on, mod( a * m, mm ) );\n\taa -= mod( a * m, mm * 4.0 );\n\t\n\tfloat b = atan( position.y, position.x ) / PI / 2.0 + 0.5; // normalised angle\n\tb-= d2* curl - time * tstep;\n\tfloat bb = step( mm * on, mod( b * m, mm ) );\n\tbb -= mod( b * m, mm * 4.0 );\n\t\n\t\n\tfloat c = min( aa, bb );\n\tc/=sin(time+aa*2.24)*d2;\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d+c;\n    \n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            p.y<p.x?p=p.zyx:p;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.0+.5*cos(iTime*.0))*3.,\n                    120,\n                    8.+cos(iTime*.00)*5.\n                 );\n         }\n     \n         g+=e=length(p.yx)/s;\n    }\n}","name":"Image","description":"","type":"image"}]}