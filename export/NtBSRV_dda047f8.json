{"ver":"0.1","info":{"id":"NtBSRV","date":"1628019043","viewed":268,"name":"hex cell calculation","username":"DjinnKahn","description":"hexagonal grid","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grid","hexagon","hex","cell","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SCALE = 50.;\nconst mat2x3 SCREEN_TO_TRIANGLE = mat2x3( 1., .5       , -.5       \n                                        , 0., sqrt(.75),  sqrt(.75) ) / SCALE;\nconst mat2 HEX_TO_SCREEN = mat2(  2., .0       \n                               , -1., sqrt(3.) ) * SCALE;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // skewed grid coordinate\n    vec3 tri = SCREEN_TO_TRIANGLE * fragCoord; // note: tri.z = tri.y - tri.x;\n\n    // skewed cell coordinate\n    vec3 cell = ceil( tri );\n            \n    // hex coords\n    vec2 hex = floor( (cell.y + cell.xz) / 3. );    \n    \n    fragColor = vec4( hex.x * .05 + .2, hex.y * .05 + .2, 0., 1. );\n                \n    // calc center of cell\n    vec2 hexCenter = HEX_TO_SCREEN * hex;\n        \n    // brighten center\n    fragColor += vec4( ( 1. - distance( fragCoord, hexCenter ) / SCALE ) * .3 );\n    \n    //from Fabrice's https://www.shadertoy.com/view/7tSXzG\n    //#define hue(v)  ( .6 + .6 * cos( 6.3*(v)  + vec4(0,23,21,0)  ) )\n    //fragColor = vec4( smoothstep(1.,1.-2./SCALE, distance( fragCoord, hexCenter ) / SCALE )\n    //         *  hue( fract(sin(hex.x + 13.* hex.y)*1e5) ) );\n}\n\n","name":"Image","description":"","type":"image"}]}