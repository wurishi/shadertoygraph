{"ver":"0.1","info":{"id":"fddBDB","date":"1657135181","viewed":81,"name":"Maurer Rose","username":"Envy24","description":"Hold LMB to see corresponding Rose Curve.\nhttps://en.wikipedia.org/wiki/Maurer_rose","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["rose","maurer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n#define TEXF1(SC)                 ( texelFetch(iChannel1, ivec2(SC), 0) )\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec4 path_color = TEXF0(SC);\n    \n    if (LMB_IS_HOLD == true)\n    {\n        vec4 rose_color = TEXF1(SC);\n   \n        O = \n            mix(path_color, vec4(rose_color.r,0,0,1), rose_color.r);\n            \n        return;\n    }\n\n    O = path_color;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Every num_of_frames returns true \nand number of detected transitions. */\nbool transition(\n    in int frame,\n    in int num_of_frames,\n    inout float quotent)\n{\n    // Convert to float.\n    float f = float(frame);\n    float inv = 1.0 / float(num_of_frames);\n    \n    // Calculate previous and current quotents.\n    float prev = floor(f * inv);\n    quotent = floor((f - 1.0) * inv);\n    \n    return quotent < prev;\n}\n\n/*\n    Returns smooth signed distance to capsule.\n*/\nfloat capsuleSMSDF(\n    in vec2 P,   // Sample coordinates\n    in vec2 B,   // Capsule begin coordinates\n    in vec2 E,   // Capsule end coordinates\n    in float R,  // Thickness\n    in float SM) // Smoothness\n{\n    vec2 BP = P - B; // from B to P\n    vec2 BE = E - B; // from B to E\n    \n    // dot(SP, SE) - length of projection SP to SE.\n    // dot(SE, SE) - capsule squared length.\n    float t = clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0);\n\n    // Colsest point on line BE * t to point P.\n    vec2 K = BP - BE * t;\n\n    float sdf = sqrt(dot(K, K)) - R;\n\n    return smoothstep(-SM, SM, sdf);\n    //return smoothstep(-SM, SM, abs(sdf)); // outline\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define TO_RAD                      0.017453292519943295             // Convert degrees to radians\n#define TEXF0(SC)                 ( texelFetch(iChannel0, ivec2(SC), 0) )\n\n/*\n    Visualizes Maurer Rose.\n*/\nfloat scene(\n    in vec2 NDC,\n    vec4 color)  // current fragment color\n{\n    float n = 0.0;\n    float d = 29.0; // Arbitrary agle in degrees.\n\n    bool clear_screen = transition(400+iFrame, 400, n); \n    \n    int   i = iFrame % 400;\n    float k = float(i) * d * TO_RAD;\n    float r = sin(n * k);\n    vec2  B = vec2(r*cos(k), r*sin(k));\n    \n          k = float(i+1) * d * TO_RAD;\n          r = sin(n * k);\n    vec2  E = vec2(r*cos(k), r*sin(k));\n\n    return \n        clear_screen == true ?\n            1.0 :          \n            min(color.r, capsuleSMSDF(NDC, B, E, 0.003, 0.007));\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    O = vec4(scene(TO_CENTERED_NDC(SC), TEXF0(SC)));      \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define INITIALLY_FAR               9e30\n#define TO_RAD                      0.017453292519943295             // Convert degrees to radians\n\n/*\n    Visualizes Rose Curve.\n*/\nfloat scene(in vec2 NDC)\n{\n    float n = 0.0;\n    float d = 29.0; // Arbitrary agle in degrees.\n\n    bool clear_screen = transition(400+iFrame, 400, n);\n    \n    vec2 B = vec2(0);\n    \n    float minDist = INITIALLY_FAR;\n\n    int N = 361*2;\n    float dA = 360.0 / float(N);\n\n    for (int i = 0; i < N; ++i)\n    {\n        float k = float(i) * dA * TO_RAD;\n        float r = sin(n * k);\n        vec2 E = vec2(r*cos(k), r*sin(k));\n        \n        minDist = min(minDist, capsuleSMSDF(NDC, B, E, 0.005, 0.006));\n        \n        B = E;\n    }\n    \n    return minDist;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    O = vec4(1.0-scene(TO_CENTERED_NDC(SC)), 0, 0, 1);\n}","name":"Buffer B","description":"","type":"buffer"}]}