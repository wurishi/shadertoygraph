{"ver":"0.1","info":{"id":"cs3GzN","date":"1680097459","viewed":53,"name":"Mandelbrot - Dany","username":"baddan","description":"Draws the Mandelbrot set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n*/\nvec2 min = vec2(-2.5, -1.2);\nvec2 max = vec2(1.5, 1.2);\nconst float log10 = log(10.0);\nconst vec4 black = vec4 (0.0, 0.0, 0.0, 1.0);\nconst vec4 black2 = vec4 (0.5, 0.0, 0.0, 1.0);\nconst float l = 4.0;\nint nmax = 1000;\n\nvec2 scr2cart( in vec2 c ) { // screen to cartesian\n    vec2 s = vec2((max.x-min.x)/iResolution.x, (max.y-min.y)/iResolution.y);\n    return vec2 (min.x+c.x*s.x, min.y+c.y*s.y);\n}\n\nvec4 mandelbrot( in vec2 c ) {\n    float p = sqrt(pow(c.x-.25, 2.0)+pow(c.y, 2.0)); // optimisation\n    if ( c.x < p-2.0*p*p+.25 ) return black; // skip cardioid\n    if ( pow(c.x+1.0, 2.0)+pow(c.y, 2.0) < .0625 ) return black; // skip first bulb\n\n    vec2 z = c; // let's skip the first stap as it just ads 0\n    vec2 sq = vec2(z.x*z.x, z.y*z.y);\n    int i = 1;\n    for(;i<nmax && (sq.x+sq.y)<=l;i++) {\n        sq = vec2(z.x*z.x, z.y*z.y);\n        z = vec2(sq.x-sq.y, 2.0*z.x*z.y)+c;\n    }\n    if(i==nmax) return black;\n    float j = float(i) - sin(iTime*1.1)*log2(log2(sq.x+sq.y))+4.; // smooth (see https://iquilezles.org/articles/msetsmooth/ for details)\n    vec4 col = vec4 (log(j)/log10/2.0, j*2.0/256.0, j/256.0, 1.0);\n    col += mod(iTime*.1, 1.0);\n    if (col.r > 1.0) col.r -=1.0;\n    if (col.g > 1.0) col.g -=1.0;\n    if (col.b > 1.0) col.b -=1.0;\n    return col;\n}\n\nvec4 mandelbrotn( in vec2 c, in float n ) { // nth power variation of Mandelbrot\n    vec2 z = c;\n    vec2 sq = vec2(z.x*z.x, z.y*z.y);\n    int i = 1;\n    for(;i<nmax && (sq.x+sq.y)<=l;i++) {\n        sq = vec2(z.x*z.x, z.y*z.y);\n        float r = sqrt(sq.x + sq.y);\n        float th = atan(z.y,z.x);\n        z = pow(r, n) * vec2(cos(n*th), sin(n*th))+c;\n    }\n    float j = float(i);\n    if(i==nmax) return black;\n    return vec4 (log(j)/log10/2.0, j*2.0/256.0, j/256.0, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 c = scr2cart(fragCoord);\n    fragColor = mandelbrot(c);\n    // fragColor = mandelbrotn(c, 2.0+.0*iTime);\n}","name":"Image","description":"","type":"image"}]}