{"ver":"0.1","info":{"id":"4ffSzX","date":"1705502735","viewed":54,"name":"Dynamic Letterbox","username":"roman_memes","description":"Dynamic Letterboxing, straight out of cinema!\n\nFeatures:\n1. Screen resolution independent aspect ratio calculation (always TARGET_RATIO on all screen resolutions)\n2. Fade in/out animation, inspired by Red Dead Redemption 2\n3. Supports ratios < iResolution","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cinema","letterbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TARGET_RATIO 2.4\n// 2.4 is way better on 1920x1080 than 2.39 (result is divisible by 16)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // The actual output to screen\n    fragColor = vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,8,5)), 0.0);\n\n    // replace this with a time based [0..1] factor to animate the letterbox\n    float time = sin((iTime * 1.5)) * 0.5 + 0.5;\n    \n    // get current screen ratio\n\tfloat screen_ratio = iResolution.x / iResolution.y;\n    \nif (TARGET_RATIO > screen_ratio)\n{\n//\tget new screen height based on TARGET_RATIO from width\n\tfloat new_screen_height = iResolution.x / TARGET_RATIO;\t// on 1920x1080 = 1920 / 2.4 = 800\n\t// how much cut off frame   \n//\tpixel height of the black bars only\t   \n\tfloat new_screen_height_bars = iResolution.y - new_screen_height;\n//\tpixel height of only one bar\n    float new_screen_one_bar = new_screen_height_bars / 2.0;\n//\ttop bar bounds on screen UV\t\n    float one_bar = 1.0 / (iResolution.y / new_screen_one_bar);\n//\tbottom bar bounds on screen UV\t    \n    float one_minus_bar = 1.0 - one_bar;\n    \n    // animation\n\tfloat top_bar = mix(0.0, one_bar, time); // from top of screen to the new top of screen (where first bar ends)\n\tfloat bottom_bar = mix(1.0, one_minus_bar, time); // from bottom of screen to the new bottom of screen (where second bar starts)\n\n    // cut off frame\n    if (uv.y < top_bar)\n    {\n        fragColor = vec4(0.0);\n    }\n    \n    if (uv.y > bottom_bar)\n    {\n        fragColor = vec4(0.0);\n    }\n}\nelse // < TARGET_RATIO\n{\n//\tget new screen height based on TARGET_RATIO from width\n\tfloat new_screen_width = iResolution.y * TARGET_RATIO;\t// this needs multiplication instead\n    // how much cut off frame   \n//\tpixel height of the black bars only\t   \n\tfloat new_screen_width_bars = iResolution.x - new_screen_width;\n//\tpixel height of only one bar\n    float new_screen_one_bar = new_screen_width_bars / 2.0;\n//\ttop bar bounds on screen UV\t\n    float one_bar = 1.0 / (iResolution.x / new_screen_one_bar);\n//\tbottom bar bounds on screen UV\t    \n    float one_minus_bar = 1.0 - one_bar;\n    \n    // animation\n\tfloat top_bar = mix(0.0, one_bar, time); // from top of screen to the new top of screen (where first bar ends)\n\tfloat bottom_bar = mix(1.0, one_minus_bar, time); // from bottom of screen to the new bottom of screen (where second bar starts)\n\n    // cut off frame\n    if (uv.x < top_bar)\n    {\n        fragColor = vec4(0.0);\n    }\n    \n    if (uv.x > bottom_bar)\n    {\n        fragColor = vec4(0.0);\n    }\n}\n\n// no need to output anything at the end\n}","name":"Image","description":"","type":"image"}]}