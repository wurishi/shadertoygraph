{"ver":"0.1","info":{"id":"NddyDn","date":"1659886796","viewed":61,"name":"Ray-Line 2D intersection","username":"jaszunio15","description":"Simple Ray-Line 2D intersection algorithm. I used it couple of times when prototyping.\nRay and line is defined by the origin point and a direction.\n\nPosting this in case you find it useful for some reason.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["line","intersection"],"hasliked":0,"parentid":"fdtyzr","parentname":"Line-Line 2D intersection"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DrawLine(vec2 uv, vec2 origin, vec2 direction, float width)\n{\n    float pixelSize = fwidth(uv.x);\n    vec2 tangent = normalize(vec2(-direction.y, direction.x));\n    return smoothstep(width * pixelSize + pixelSize * 0.5, width * pixelSize - pixelSize * 0.5, abs(dot(uv - origin, tangent)));\n}\n\nfloat DrawRay(vec2 uv, vec2 origin, vec2 direction, float width)\n{\n    return DrawLine(uv, origin, direction, width) * step(0.0, dot(uv - origin, direction));\n}\n\nfloat DrawPoint(vec2 uv, vec2 coord, float size)\n{\n    float pixelSize = fwidth(uv.x);\n    return smoothstep(size * pixelSize + pixelSize * 0.5, size * pixelSize - pixelSize * 0.5, distance(uv, coord));\n}\n\nbool RayLineIntersection(vec2 rayOrigin, vec2 rayDirection, vec2 lineOrigin, vec2 lineDirection, inout vec2 hitPoint)\n{\n    vec2 rayTangent = vec2(-rayDirection.y, rayDirection.x);\n    \n    float distanceToLine = dot(lineOrigin - rayOrigin, rayTangent);\n    float origin2ExtensionDistance = distanceToLine / dot(-rayTangent, lineDirection);\n    hitPoint = origin2ExtensionDistance * lineDirection + lineOrigin;\n   \n    return dot(hitPoint - rayOrigin, rayDirection) > 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n    \n    vec2 lineOrigin = vec2(cos(iTime * 0.5), sin(iTime * 0.4)) * 0.8;\n    vec2 lineTangent = normalize(vec2(sin(iTime * 0.2), cos(iTime * 0.25))) * 0.2;\n    \n    vec2 rayOrigin = vec2(sin(iTime * 0.58), cos(iTime * 0.41)) * 0.8;\n    \n    float angle = sin(iTime * 0.9);\n    vec2 rayDirection = mat2(cos(angle) * 10.0, sin(angle) * 0.4, -sin(angle) * 9.0, cos(angle) * 5.0) * (lineOrigin - rayOrigin);\n    \n    float line1 = DrawRay(uv, rayOrigin, rayDirection, 1.0);\n    float line2 = DrawLine(uv, lineOrigin, lineTangent, 1.0);\n    \n    vec2 intersection;\n    bool isHit = RayLineIntersection(rayOrigin, rayDirection, lineOrigin, lineTangent, intersection);\n    \n    // Output to screen\n    fragColor = vec4(0.5, 1.0, 1.0, 1.0) * (line1 + DrawPoint(uv, rayOrigin, 5.0));\n    fragColor += vec4(1.0, 0.5, 0.5, 1.0) * (line2); \n    \n    if (isHit)\n    {\n        fragColor += vec4(0.0, 1.0, 0.0, 1.0) * (DrawPoint(uv, intersection, 7.0));       \n        fragColor -= vec4(0.0, 1.0, 0.0, 1.0) * (DrawPoint(uv, intersection, 5.0));  \n    }\n}","name":"Image","description":"","type":"image"}]}