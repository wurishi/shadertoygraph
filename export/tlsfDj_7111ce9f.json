{"ver":"0.1","info":{"id":"tlsfDj","date":"1597800857","viewed":86,"name":"noise_sculpture_2","username":"TRASHTRASH","description":"8.12.20\ndaily GLSL exercise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","shader","vj","trashtrash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TRASHTRASH is Josh deLorimier 8.14.20\n//thanks BigWIngs, evvvvil for your tutorials\n#define MAX_STEPS 128\n#define MAX_DIST 10.\n#define SURF_DIST 0.001\n\n//simplex noise from Patricio Gonzalez Vivo\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0);} \n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n//mercury------------------- \nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat box(vec3 p, vec3 b) {\n    return vmax(abs(p)-b);\n}\n//--------------------------\nfloat smin(float d1, float d2, float k){\n \tfloat h = max(k-abs(d1-d2),0.0);\n    return min(d1,d2)-h*h*0.25/k;\n}\n\n\nfloat smax(float d1, float d2, float k) {\n \tfloat h = max(k-abs(-d1-d2),0.); \n    return max(-d1,d2)+h*h*0.25/k;  \n}\n\nfloat map(vec3 p) {\n\tfloat n1 = snoise(p.xy+iTime);\n    float n2 = snoise(p.yx+iTime+0.5);\n    \n    float n3 = abs(snoise(vec2(p.x,iTime)*2.));\n    float b = box(p-vec3(0.,0.,5.),vec3(8.,4.,5.));\n\tfloat s1 = length(p-(vec3(-2.,n1,0.)/1.3))-3.5;\n    float s2 = length(p-(vec3(2.,n2,0.)/1.3))-3.5;\n    float m = smin(s1,s2,2.);\n    return max(-m, b);\n}\n\nfloat RM(vec3 ro, vec3 rd) {\n \tfloat t = 0.;\n    for(int i = 0;i<MAX_STEPS;i++) {\n        vec3 p = ro+rd*t;\n        float s = map(p);\n        \n        if(t > MAX_DIST || abs(s) < (SURF_DIST)) break;\n        t+=s;\n        \n      }\n   return t;\n}\n\n\nvec3 norm(vec3 p) {\n \tfloat d = map(p);\n    vec2 e = vec2(0.001, 0.);\n    vec3 n = d - vec3(map(p-e.xyy), map(p-e.yxy), map(p-e.yyx));\n    return normalize(n);\n}\n\nfloat shade(vec3 p, vec3 rd) {\n \tvec3 lp = vec3(6,6.,-5.);\n    vec3 l = normalize(lp -p);\n    vec3 n = norm(p);\n    float dif = clamp(dot(n,l),0.,.4);\n  \tfloat fr = pow(1.0+dot(n, rd),4.0);\n   \tfloat ao = (1.0 - fr);\n   \treturn max(fr,0.4)+dif*ao;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord -0.5 * iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0., 0., -6.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n    vec3 col = vec3(0.);\n    vec3 c1 = vec3(.5,0.2,0.)*2.;\n    float d = RM(ro, rd);\n    if(d<MAX_DIST) {\n    vec3 p = ro + rd *d;\n    vec3 c1 = vec3(1.0,0.4,0.7)+snoise(p.yy+iTime);\n  \t\n    float dif = shade(p, rd);\n   \tcol = vec3(dif)*c1;\n   \tcol*=col*col;\n    }\n    col = pow(col, vec3(.4545));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}