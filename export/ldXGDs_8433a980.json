{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//declare uniforms\nuniform sampler2D u_texture;\nuniform float resolution;\nuniform float radius;\nuniform vec2 dir;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t//this will be our RGBA sum\n\tvec4 sum = vec4(0.0);\n\t\n\t//our original texcoord for this fragment\n\tvec2 tc = fragCoord.xy/iResolution.xy;\n\t\n\t//the amount to blur, i.e. how far off center to sample from \n\t//1.0 -> blur by one pixel\n\t//2.0 -> blur by two pixels, etc.\n\tfloat blur = 4.0/ (iResolution.x / iResolution.y); \n    \n\t//the direction of our blur\n\t//(1.0, 0.0) -> x-axis blur\n\t//(0.0, 1.0) -> y-axis blur\n\tfloat hstep = 1.0;\n\tfloat vstep = 0.0;\n    \n\t//apply blurring, using a 9-tap filter with predefined gaussian weights\n    \n\tsum += texture(iChannel0, vec2(tc.x - 4.0*blur*hstep/iResolution.x, tc.y - 4.0*blur*vstep/iResolution.y)) * 0.0162162162;\n\tsum += texture(iChannel0, vec2(tc.x - 3.0*blur*hstep/iResolution.x, tc.y - 3.0*blur*vstep/iResolution.y)) * 0.0540540541;\n\tsum += texture(iChannel0, vec2(tc.x - 2.0*blur*hstep/iResolution.x, tc.y - 2.0*blur*vstep/iResolution.y)) * 0.1216216216;\n\tsum += texture(iChannel0, vec2(tc.x - 1.0*blur*hstep/iResolution.x, tc.y - 1.0*blur*vstep/iResolution.y)) * 0.1945945946;\n\t\n\tsum += texture(iChannel0, vec2(tc.x, tc.y)) * 0.2270270270;\n\t\n\tsum += texture(iChannel0, vec2(tc.x + 1.0*blur*hstep/iResolution.x, tc.y + 1.0*blur*vstep/iResolution.y)) * 0.1945945946;\n\tsum += texture(iChannel0, vec2(tc.x + 2.0*blur*hstep/iResolution.x, tc.y + 2.0*blur*vstep/iResolution.y)) * 0.1216216216;\n\tsum += texture(iChannel0, vec2(tc.x + 3.0*blur*hstep/iResolution.x, tc.y + 3.0*blur*vstep/iResolution.y)) * 0.0540540541;\n\tsum += texture(iChannel0, vec2(tc.x + 4.0*blur*hstep/iResolution.x, tc.y + 4.0*blur*vstep/iResolution.y)) * 0.0162162162;\n\n\t//discard alpha for our simple demo, multiply by vertex color and return\n\tfragColor = vec4(sum.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldXGDs","date":"1381599439","viewed":705,"name":"Horizontal gaussian blur","username":"alessiole","description":"Horizontal gaussian blur","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","gaussianblur"],"hasliked":0,"parentid":"","parentname":""}}