{"ver":"0.1","info":{"id":"3l3cRs","date":"1609688678","viewed":245,"name":"raymarching infinite spheres","username":"rahul897","description":"first try at infinite spheres","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MaximumRaySteps 100\n#define MinimumDistance .01\n\n\nfloat DE(vec3 p)\n{\n  p = mod(p,1.0)-vec3(0.5);\n  return length(p)-0.25;\n}\n\nfloat trace(vec3 from, vec3 direction) {\n\tfloat totalDistance = 0.0;\n\tint steps;\n\tfor (steps=0; steps < MaximumRaySteps; steps++) {\n\t\tvec3 p = from + totalDistance * direction;\n\t\tfloat distance = DE(p);\n\t\ttotalDistance += distance;\n\t\tif (distance < MinimumDistance) break;\n\t}\n\treturn 1.0-float(steps)/float(MaximumRaySteps);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(-6.*sin(iTime/10.), -6.*sin(iTime/10.), 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = trace(ro, rd);\n    col = vec3(d);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}