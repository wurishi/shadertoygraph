{"ver":"0.1","info":{"id":"MlGSDt","date":"1486410850","viewed":124,"name":"Dynamic Mandelbrot","username":"yumcyawiz","description":"it's ... creepy.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(float h, float s, float v) {\n\tfloat c = v*s;\n\tfloat x = c*(1.0 - abs(mod(h/60.0, 2.0) - 1.0));\n\tfloat m = v - c;\n\t\n\tvec3 color;\n\tif(h < 60.0) {\n\t\tcolor = vec3(c + m, x + m, 0.0);\n\t}\n\telse if(h < 120.0) {\n\t\tcolor = vec3(x + m, c + m, 0.0);\n\t}\n\telse if(h < 180.0) {\n\t\tcolor = vec3(0.0, c + m, x + m);\n\t}\n\telse if(h < 240.0) {\n\t\tcolor = vec3(0.0, x + m, c + m);\n\t}\n\telse if(h < 300.0) {\n\t\tcolor = vec3(x + m, 0.0, c + m);\n\t}\n\telse if(h < 360.0) {\n\t\tcolor = vec3(c + m, 0.0, x + m);\n\t}\n\treturn color;\n}\n\n\n//math\nvec2 cmult(vec2 z1, vec2 z2) {\n    return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z1.y*z2.x);\n}\nvec2 cpow(vec2 z, int n) {\n    vec2 ret = vec2(1.0, 0);\n    int count = 0;\n    for(int i = 0; i < 10; i++) {\n        ret = cmult(ret, z);\n        count++;\n        if(count == n) break;\n    }\n    return ret;\n}\nfloat carg(vec2 z) {\n    return atan(z.y, z.x);\n}\n\n\n//float smooth(vec2 z, int iter) {\n\t//return float(iter + 1) - log(log(length(z)))/log(2.0);\n//}\nfloat smooth2(vec2 z, int iter) {\n    float s = float(iter) - log(log(length(z))/log(7.0))/log(7.0);\n    return s;\n}\n\n\nconst int maxIter = 100;\n//complex system\nvec3 system(vec2 c) {\n    vec2 z = vec2(0);\n    vec2 zp = vec2(0);\n    int iter = 0;\n    for(int i = 0; i < maxIter; i++) {\n        zp = z;\n        z = cmult(cpow(z, 7), c) + cmult(vec2(length(z)*cos(iTime*3.2), carg(z)*sin(iTime*3.3)) - c, cpow(z, 3)) + c;\n        //z = cmult(z, z) + c;\n        if(length(z) > 2.0) {\n            iter = i;\n            break;\n        }\n    }\n    //vec4 color = vec4(hsv2rgb(240.0 - smooth2(z, iter)/float(maxIter)*240.0, 1.0, 1.0), 1.0);\n    vec4 color = vec4(vec3(5.0*smooth2(z, iter)/float(maxIter)), 1.0);\n    return color.xyz;\n}\n            \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy) / iResolution.y;\n\tfragColor = vec4(system(uv), 1.0);\n}","name":"Image","description":"","type":"image"}]}