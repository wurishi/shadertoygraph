{"ver":"0.1","info":{"id":"DtfBzn","date":"1692478720","viewed":33,"name":"Blur-able checker pattern 2","username":"TomasWeiss","description":"This is a procedural checker pattern that has a 0-1 parameter for blurring, approximating a Gaussian blur effect. It's been improved to look more like a Gaussian, less blocky. Didn't find a way how to extend it 3 dimensions.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["procedural","blur","checker"],"hasliked":0,"parentid":"clXBzn","parentname":"Blur-able checker pattern"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float RemapClamped(float value, float min1, float max1, float min2, float max2)\n{\n    return clamp(min2 + (value - min1) * (max2 - min2) / (max1 - min1), min2, max2);\n}\n\n\n\nfloat Wave(float x)\n{\n    return RemapClamped(sin(x), -1.0, 1.0, 0.0, 1.0);\n}\n\nfloat CombineWaves(float wave1, float wave2)\n{\n    return wave1 + wave2 - 2.0*wave1*wave2;\n}\n\nfloat MapChecker(float checkerBase, float blur)\n{\n    float inBound = 0.5 - (0.003 + blur*5.0);\n    float outBound = RemapClamped(blur, 0.6, 1.0, 0.0, 0.5);\n\n    return RemapClamped(checkerBase, inBound, 1.0-inBound, outBound, 1.0 - outBound);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float SCALE = 15.0;\n    \n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 mapping = uv * SCALE * vec2(iResolution.x / iResolution.y, 1.0);\n\n    // Animate blurring by time for showcase\n    float blurFactor = sin(iTime*0.5)*0.5 + 0.5;\n    blurFactor = blurFactor*blurFactor;\n    \n    // Create continuous waves\n    float checkerBase = CombineWaves(Wave(mapping.x), Wave(mapping.y));\n    float checkers = MapChecker(checkerBase, blurFactor);\n    \n\n    fragColor = vec4(vec3(checkers), 1.0);\n}","name":"Image","description":"","type":"image"}]}