{"ver":"0.1","info":{"id":"7tyfWG","date":"1665335717","viewed":92,"name":"wallray","username":"DLord","description":"wallby ray texture","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["wallray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 ls(in vec2 a, in vec2 b, in float c){\n    return c*(b-a)+a;\n}\nbool tpfm(in vec2 a, in vec2 b, in vec2 p){\n    float k=(b.y-a.y)*(p.x-a.x)-((p.y-a.y)*(b.x-a.x));\n    if(k>=0.){\n    return true;\n    }else{\n    return false;\n    }\n}\nbool tpfm4(in vec2[4] wa,in vec2 uv){\nreturn tpfm(wa[1],wa[0],uv)&&tpfm(wa[3],wa[1],uv)&&tpfm(wa[2],wa[3],uv)&&tpfm(wa[0],wa[2],uv);\n}\nbool dotnear(in vec2[4] w,in vec2 u){\nfloat a=0.01;\nif((distance(w[0],u)<a)||(distance(w[1],u)<a)||(distance(w[2],u)<a)||(distance(w[3],u)<a)){return true;}else{return false;}\n}\nfloat dotnn(in vec2[4] w,in vec2 u){\nfloat a=0.01;\nif(distance(w[0],u)<a){return 0.;}\nif(distance(w[1],u)<a){return 1.;}\nif(distance(w[2],u)<a){return 2.;}\nif(distance(w[3],u)<a){return 3.;}\nreturn -1.;\n}\nvec2[4] rot(in vec2[4] a){\nfloat q=1./1024./2.;\nreturn vec2[4](a[0]-(2.*q),a[1],a[2],a[3]+q);}\nfloat onedist(in vec2 x){\nreturn sqrt(x[0]*x[0]+(x[1]*x[1]));\n}\nvec2[4] wallarr(in vec2 p1,in vec2 p2,in float a){\n    vec2 p3=a*p1/onedist(p1)+p1;\n    vec2 p4=a*p2/onedist(p2)+p2;\n    return vec2[4](p1,p2,p3,p4); \n}\nvec2[4] wallarr2(in vec2 p1,in vec2 p2,in float a){\n    vec2 p3=a*p1/onedist(p1)+p1;\n    vec2 p4=p2-p1+p3;\n    return vec2[4](p1,p2,p3,p4); \n}\nvec2[4] wallarr3(in vec2 p1,in vec2 p2,in float add){\n    //(y-p1.y)/(p2.y-p1.y)=(x-p1.x)/(p2.x-p1.x)\n    //(y-p1.y)*(p2.x-p1.x)-(x-p1.x)*(p2.y-p1.y)=0\n    //-x*(p2.y-p1.y)+y*(p2.x-p1.x)-p1.y*(p2.x-p1.x)+p1.x*(p2.y-p1.y)=0\n    //x*(p1.y-p2.y)+y*(p2.x-p1.x)-(p1.y*(p2.x-p1.x)+p1.x*(p2.y-p1.y))=0\n    //x*(p1.y-p2.y)+y*(p2.x-p1.x)+(2*p1.x*p1.y-p1.y*p2.x-p1.x*p2.y)=0\n    //\n    //x/y=p1.x/p1.y\n    //x*p1.y=y*p1.x\n    //x*p1.y-y*p1.x=0\n    //x*p1.y/p1.x=y\n    //ax+b(x*p1.y/p1.x)+c=0\n    //(a+b*p1.y/p1.x)x=-c\n    //x=-c/(a+b*p1.y/p1.x)\n    //y=-c/(b+a*p1.x/p1.y)\n    float a=p1.y-p2.y;\n    float b=p2.x-p1.x;\n    float c=2.*p1.x*p1.y-(p1.y*p2.x)-(p1.x*p2.y);\n    c-=add*sqrt(a*a+b*b);\n    //ax+by+c=0\n    vec2 p3=vec2(-c/(a+b*p1.y/p1.x),-c/(b+a*p1.x/p1.y));\n    vec2 p4=vec2(-c/(a+b*p2.y/p2.x),-c/(b+a*p2.x/p2.y));\n    return vec2[4](p1,p2,p3,p4); \n}\nvec4 wallrender(in sampler2D chan,vec2[4] w,vec2 p){\n    //(x;y)=\n    //ls(ls(1,3,yn),ls(2,4,yn),xn)\n    //=ls(1,3,yn)+xn*(ls(2,4,yn)-ls(1,3,yn))\n    //=1+yn*(3-1)+xn*(2+yn*(4-2)-1-yn*(3-1))\n    //=1+yn(3-1)+xn*(2-1)+xn*yn*(4+1-2-3)\n    \n    //^^^\n    //a + b*yn + c*xn + d*xn*yn = 0\n    //e + f*yn + g*xn + h*xn*yn = 0\n    //a,b,c,e,f,g!=0\n    //=>\n    //a + b*yn + c*xn + d*xn*yn = 0\n    //ah-de + (bh-df)*yn + (ch-dg)*xn  = 0\n    //=>\n    //(ah-de + (bh-df)*yn)/(dg-ch)=xn\n    //=>\n    //(ahde + (bhdf)*yn)/dgch=xn\n    //a + b*yn + c*(ahde + (bhdf)*yn)/dgch + d*(ahde + (bhdf)*yn)/dgch*yn = 0\n    //\n    //\n    float a=w[0].x-p.x;                 float e=w[0].y-p.y;\n    float b=w[2].x-w[0].x;              float f=w[2].y-w[0].y;\n    float c=w[1].x-w[0].x;              float g=w[1].y-w[0].y;\n    float d=w[3].x+w[0].x-w[1].x-w[2].x;float h=w[3].y+w[0].y-w[1].y-w[2].y;\n    float ahde=a*h-(d*e);\n    float bhdf=b*h-(d*f);\n    float dgch=d*g-(c*h);\n    if(dgch==0.){\n    dgch=8./1024.;\n    }\n    float qua=bhdf/dgch*d;\n    float qub=b+(c/dgch*bhdf)+(d*ahde/dgch);\n    float quc=a+(c*ahde/dgch);\n    float diskr=qub*qub-(4.*qua*quc);\n    if(diskr>=0.){\n    if(qua==0.){qua=1./1024.;}\n    float yn=(-qub-sqrt(diskr))/(2.*qua);\n    float xn=(ahde + (bhdf*yn))/dgch;\n    if(xn>1.||xn<0.||yn>1.||yn<0.){\n        yn=(-qub+sqrt(diskr))/(2.*qua);\n        xn=(ahde + (bhdf*yn))/dgch;\n    }\n    \n    if(xn<1.&&xn>0.&&yn<1.&&yn>0.){\n     return texture(chan,vec2(xn,yn));\n    }\n    \n    }\n    return vec4(0.,0.,0.,1.);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv-=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    uv*=2.;\n    //uv*=20.;\n    //uv/=2.;\n    //uv*=1.+exp(iTime);\n    float d=sqrt(uv.x*uv.x+(uv.y*uv.y));\n    //float a=atan(uv);\n    float t=float(6.*iTime-floor(6.*iTime)>0.5)*0.3;\n    // Time varying pixel color\n    vec4 col = vec4(float(int(uv.x>0.99)),float(int(uv.y>0.99)),0.01/d,1.);\n    vec2[4] wa=wallarr3(vec2(0.2,0.2),vec2(0.5,0.2),0.45);wa=rot(wa);\n    vec2[4] wb=wallarr3(vec2(-0.1,0.2),vec2(0.2,0.2),0.45);wb=rot(wb);\n    vec2[4] wc=wallarr3(vec2(0.5,0.2),vec2(0.5,-0.1),1.45);wc=rot(wc);//wc[2]=vec2(-1.,-1.);\n    vec2[4] wd=wallarr3(vec2(0.2,-0.1),vec2(0.2,-0.4),1.45);wd=rot(wd);\n    vec2[4] we=wallarr3(vec2(0.5,-0.1),vec2(0.5,-0.4),1.45);we=rot(we);\n    \n    // Output to screen\n    //tpfm(wa[0],wa[1],uv)&&tpfm(wa[1],wa[2],uv)&&tpfm(wa[2],wa[3],uv)&&tpfm(wa[0],wa[3],uv)\n    \n    \n    if(tpfm4(wa,uv)){fragColor =wallrender(iChannel0,wa,uv);}else{\n    if(tpfm4(wb,uv)){fragColor =wallrender(iChannel0,wb,uv);}else{\n    if(tpfm4(wc,uv)){fragColor =wallrender(iChannel0,wc,uv);}else{\n    if(tpfm4(wd,uv)){fragColor =wallrender(iChannel0,wd,uv);}else{\n    if(tpfm4(we,uv)){fragColor =wallrender(iChannel0,we,uv);}else{\n    fragColor = vec4(0.,0.,0.,1.);\n    }}}}}\n    \n}","name":"Image","description":"","type":"image"}]}