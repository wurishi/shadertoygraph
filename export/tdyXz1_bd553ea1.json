{"ver":"0.1","info":{"id":"tdyXz1","date":"1573411796","viewed":167,"name":"Deep Quantum Time State (sci-fi)","username":"rmmcal","description":"Quantum Cryptography (sci-fi)  Teleportation/Entangle/Collapse keys....\ntime (0 -   5)  Quantum Key: free way...\ntime (5 - 10)  Quantum Key: Entangle...\ntime (10 ... )  Quantum Key: Collapse...  (detector)\n ","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["2d","scifi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MllGDf","filepath":"https://soundcloud.com/bennymartinpianist/adele-hello-piano-instrumental-cover","previewfilepath":"https://soundcloud.com/bennymartinpianist/adele-hello-piano-instrumental-cover","type":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n////   .......Deep Quantum Time State (sci-fi).......  ////// \n/////////////////////////////////////////////////////////////\n// Brasil/Amazonas/Manaus  \n// Deep Quantum Time State (sci-fi)\n// Created by Rodrigo Cal (twitter: @rmmcal) - 2019/11\n// - https://www.shadertoy.com/view/tdyXz1\n/////////////////////////////////////////////////////////////\n// -----------------------------------------------------------\n//\n//   Quantum Cryptography (sci-fi)  \n//     - Teleportation/Entangle/Collapse keys....\n//\n//      ... @rmmcal 2019/11\n//\n// -----------------------------------------------------------\n/////////////////////////////////////////////////////////////\n\nmat2 rotate(float a){\n  //  a = fract(a/3.1416)*3.1416;\n    return mat2(cos(a), sin(a), -sin(a), cos(a));\n}\n\n//////////////////////////////////////////////\n//////////////////////////////////////////////\n//////////////////////////////////////////////\n//==============================\n// ------  black box  ------  //\n//==============================\n// heisenberg uncertainty principle (quantum security, while this is true...)\n// private quantum (values / properties / operations)\nfloat qtime ;\nstruct QuantumState{\n    vec3 momentum;\n    vec3 position;\n};\n\nQuantumState normalizeQ(QuantumState q){\n    q.position = normalize(q.position);\n    q.momentum = normalize(q.momentum);\n\treturn q;\n}\n\nvec3 getQuantumSpin(QuantumState q){\n \tvec3 ps = q.position;\n    float t = qtime;\n    ps.zy = rotate(q.momentum.x*t) * ps.zy;\n    ps.zx = rotate(q.momentum.y*t) * ps.zx;\n\tps.xy = rotate(q.momentum.z*t) * ps.xy;\n    return normalize(ps);\n}\n\nvoid getQuantumEntangle(inout QuantumState q1, inout QuantumState q2){\n    QuantumState q;\n\n    q.momentum.x = ( dot(q1.momentum.zy, q2.momentum.zy) ) ;\n    q.momentum.y = ( dot(q1.momentum.zx, q2.momentum.zx) ) ;\n\tq.momentum.z = ( dot(q1.momentum.xy, q2.momentum.xy) ) ;\n    \n    q1.momentum = -q.momentum;\n    q2.momentum =  q.momentum;\n    \n}\n\nvoid getQuantumCollapse(inout QuantumState q1, vec3 angle){\n  \tQuantumState q;\n    q.momentum.x = ( dot(q1.momentum.zy, angle.zy) ) ;\n    q.momentum.y = ( dot(q1.momentum.zx, angle.zx) ) ;\n\tq.momentum.z = ( dot(q1.momentum.xy, angle.xy) ) ;\n    \n    q1.momentum = q.momentum;\n}\n\n\nQuantumState getQuantum(vec3 p){\n    // get initial random values by seed (vec3)p to start....\n    QuantumState q; \n    q.position = vec3 (0.,1.,0.);  \n\tq.momentum = vec3 (mod(cos(p.x+p.y+p.z), 1.), \n                       mod(cos(p.x+p.y), 1.),\n        \t\t\t   mod(cos(p.x), 1.));\n    return normalizeQ(q);\n}\n\n//\n//////////////////////////////////////////////\n//////////////////////////////////////////////\n//////////////////////////////////////////////\n//////////////////////////////////////////////\n//////////////////////////////////////////////\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float sd = dot(pa,ba) / dot(ba,ba);\n    float h = clamp(sd , 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n    \nvoid drawState(inout vec4 c, vec2 p, QuantumState q){\n\n    p *= 5.;\n    c = mix(c,vec4(0.), smoothstep(-0.05,.0, -abs(1.-length(p*vec2(1.,2.)))));\n    c = mix(c,vec4(0.), smoothstep(-0.05,.0, -abs(1.-length(p*vec2(2.,1.)))));\n    c = mix(c,vec4(0.), smoothstep(-0.05,.0, -abs(1.-length(p))));\n    \n    \n    c = mix(c,vec4(0.), smoothstep(-0.01,.0, (.01-sdLine(p, vec2(0.,0.), vec2(0.,1.)))));\n    c = mix(c,vec4(0.), smoothstep(-0.01,.0, (.01-sdLine(p, vec2(0.,0.), vec2(1.,0.)))));\n    c = mix(c,vec4(0.), smoothstep(-0.01,.0, (.01-sdLine(p, vec2(0.,0.), vec2(-.45)))));\n    \n \tvec2 pd = vec2(0.,1.);\n    \n    vec3 spin = getQuantumSpin(q );\n    c = mix(c,vec4(0.,0.,1.,1.), smoothstep(-0.01,.0, .01-sdLine(p, vec2(0.,0.), spin.xy)));\n    c = mix(c,vec4(0.,1.,1.,1.), smoothstep(-0.01,.0, -abs(.02-sdLine(p, vec2(0.,0.), spin.xy))));\n   \n}\nvoid drawStateColorUp(inout vec4 c, vec2 p, vec4 cor, QuantumState q){\n\n    p *= 5.;\n    float d = -1.;\n    d = max(d, min (p.y,  1.-length(p)));\n    d = max(d, 1.-length(p*vec2(1.,2.)));\n    c = mix(c,cor, smoothstep(-0.05,.0, d));\n}\n\nvoid drawStateColorAll(inout vec4 c, vec2 p, vec4 cor, QuantumState q){\n\n    p *= 5.;\n    c = mix(c,cor, smoothstep(-0.05,.0, -abs(1.-length(p*vec2(1.,2.)))));\n    c = mix(c,cor, smoothstep(-0.05,.0, -abs(1.-length(p*vec2(2.,1.)))));\n    c = mix(c,cor, smoothstep(-0.05,.0, (1.-length(p))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 a = vec2(iResolution.x/iResolution.y,1.);\n    vec2 p = (uv-.5)*a;\n\n    vec4 c = vec4(1.);\n    \n    qtime = fract((iTime*15.)/30.)*30.; // qtime => within the infinite fraction in time of the existence of matter\n    \n    QuantumState q1 = getQuantum(vec3(1.,2.,3.));\n    QuantumState q2 = getQuantum(vec3(5.,2.,1.));\n \n    if (iTime > 10.)\n    {\n         c = mix(c,vec4(1.,.95,.9,1.), smoothstep(-0.01,.0, (.3-sdLine(p, vec2(-.5,-1.), vec2(-.5,1.)))));\n     \t c = mix(c,vec4(1.,.95,.9,1.), smoothstep(-0.01,.0, (.3-sdLine(p, vec2( .5,-1.), vec2( .5,1.)))));\n    }\n    \n    if (iTime > 5.)\n    {\n        c = mix(c,vec4(0.1), smoothstep(-0.01,.0, -abs(.3-sdLine(p, vec2(-1.,0.), vec2(1.,0.)))));\n\n        vec4 cor1 = vec4(0.8,1.,1.,0.);\n        drawStateColorAll(c, p-vec2(-0.5,0.),cor1, q1);\n        drawStateColorAll(c, p-vec2( 0.5,0.),cor1, q2);\n        \n        \n   \t\tgetQuantumEntangle(q1, q2);  // div and entangle\n\t}\n    \n    if (iTime > 10.)\n    {\n         c = mix(c,vec4(0.1), smoothstep(-0.01,.0, -abs(.3-sdLine(p, vec2(-.5,-1.), vec2(-.5,1.)))));\n     \t c = mix(c,vec4(0.1), smoothstep(-0.01,.0, -abs(.3-sdLine(p, vec2( .5,-1.), vec2( .5,1.)))));\n        \n   \t\t getQuantumCollapse(q1, vec3(0.,1.,0.));\n   \t\t getQuantumCollapse(q2, vec3(0.,1.,0.));\n\n        vec4 cor1 = vec4(0.5,1.,.9,0.);\n     \n        drawStateColorUp(c, p-vec2(-0.5,0.),cor1, q1);\n        drawStateColorUp(c, p-vec2( 0.5,0.),cor1, q2);\n\n    }\n    \n    \n    drawState(c, p-vec2(-0.5,0.), q1);\n    drawState(c, p-vec2(+0.5,0.), q2);\n    fragColor = vec4(c.rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}