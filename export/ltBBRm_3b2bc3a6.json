{"ver":"0.1","info":{"id":"ltBBRm","date":"1515013033","viewed":96,"name":"3ary interference","username":"VJSpackOMat","description":"3ary test for long periods depending on the speeds it may take reaally long for the pattern to restart\n\nthis serves as a personal playground, and is meant to result in some real life art using this mechanics, c.Kleinhuis is playing around, many more will ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3ary"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat heart(vec2 p,float radius,float thickness){\n\n p *= 0.8;\n    p.y = -0.1 - p.y*1.2 + abs(p.x)*(1.0-abs(p.x));\n    float r = length(p);\n\tfloat d = 0.5;\n \n    return r;\n}\n\n// rings\nfloat circ(vec2 p,float radius,float thickness){\n\treturn mod(length(p ),radius )>thickness*.5?1.:0. ;\n}\n\n// rings squared\nfloat circ2(vec2 p,float radius,float thickness){\n\treturn mod(length(p*p),radius )>thickness*.5?1.:0. ;\n}\n\n// rings cubed\nfloat circ3(vec2 p,float radius,float thickness){\n\treturn mod(length(sin(p)),radius )>thickness*.5?1.:0. ;\n}\n\nfloat circ4(vec2 p,float radius,float thickness){\n    \n    float angle=atan(p.x,p.y);\n        if(mod(angle,2.11)<1.605){\n\treturn  mod(length(p),radius )>thickness*.5?1.:0.;\n        }else{\n        return 0.;\n        }\n}\n\n\n// pattern that repeats after just few rounds\n//  vec3 speeds=vec3(2.,3.,5.);\n\n// longer prime number pattern, repeats after some more frames ....  31*53*67=110081 frames\n// vec3 speeds=vec3(1.31,1.53,1.67);\n\n\n// very long prime number pattern, repeats after some more frames ....  33637*68023*94321=some more frames\nvec3 speeds=vec3(1.33637\t, 1.68023\t,1.94321\t);\nfloat speed=1.;\nfloat moveradius=0.05;\nfloat radius=0.07;\nfloat thickness=.07;  \n\n\nvec3 color1=vec3(1.,0.,0.);\nvec3 color2=vec3(0.,1.,1.);\nvec3 color3=vec3(.5,1.,0.);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //uv-=0.5;\n    uv-=iMouse.xy/iResolution.xy;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec2 p1=vec2(sin(iTime*speeds.x*speed),cos(iTime*speeds.x*speed))*moveradius;\n    vec2 p2=vec2(sin(iTime*speeds.y*speed),cos(iTime*speeds.y*speed))*moveradius+vec2(.0,0.);\n    vec2 p3=vec2(sin(iTime*speeds.z*speed),cos(iTime*speeds.z*speed))*moveradius-vec2(.0,0.);\n    \n\tvec3 col = vec3( circ(uv+p1,radius,thickness))*color1;\n\tcol +=circ(uv+p2,radius,thickness)*color2;\n\t col += circ(uv+p3,radius,thickness)*color3;\n    fragColor=vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}