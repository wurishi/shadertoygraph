{"ver":"0.1","info":{"id":"MstfWf","date":"1527092197","viewed":564,"name":"Flying paint strokes","username":"CoyHot","description":"My first experiment with Raymarching / Sphere Tracing. Just to learn this new concept to me :\n\nTrying to combine distorsions on a simple sphere (i add some comments to explain what I do).\nNot optimized and maybe dirty, need a few seconds to \"stabilize\".","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// -------------------------------------------------------\n// ---------------  Flying paint strokes -----------------\n// Francois 'CoyHot' Grassard, May 2018\n// My first real attempt with Raymarching / Sphere Tracing\n// -------------------------------------------------------\n\n\n\nfloat map(vec3 p)\n{\n  // Define some temporal and/or spatial references \n  float a =sin(iTime);\n  float b = p.z/6.0;\n  float c = 0.75+(sin((iTime*p.z)*3.)/12.);\n  float d = iTime/5.;\n\n  // --> Reminder : The next steps have to be read from bottom to top <--\n\n  // Rotate the whole scene\n  p.xy *= mat2(cos(d), sin(d), -sin(d), cos(d));\n\n\n  // Add turbulences on each axes, based on Z value\n  p.x += cos(b)*7.;\n  p.y += sin(b)*7.;\n  p.z += sin(b)*7.;\n\n\n  // Twist the whole scene alond Z axis\n  p.xy *= mat2(cos(b), sin(b), -sin(b), cos(b));\n\n\n  // Scatter strokes in space to avoid all strokes to be aligned\n  p = vec3(p.x+cos((p.z)),p.y+sin((p.z)),p.z);\n  p = vec3(p.x+cos(p.y),p.y+cos(p.x),p.z);\n\n\n  // Multiply Strokes\n  p = mod(p,16.0)-8.0;\n\n\n  // Rotate strokes globaly, base on global time. On Z AXIS !!!!\n  p.xy *= mat2(cos(cos(a)), sin(cos(a)), -sin(cos(a)), cos(cos(a)));\n\n\n  // Rotate each stroke, based on there own Z Value and global time\n  p.xz *= mat2(cos(c*3.), sin(c*3.), -sin(c*3.), cos(c));\n\n\n  // Add another sin/cos Noise on the surface, also based on Z value, to add some smaller details on the surface (to mimic the tail of the stroke)\n  p.z += (sin(p.x*25.+iTime)/40.);\n  p.z += (cos(p.y*25.+iTime)/40.);\n\n\n  // Rotate the whole shape, based on time\n  p.xy *= mat2(cos(a), sin(a), -sin(a), cos(a));\n\n\n  // Add sin/cos Noise on the surface, based on Z value\n  p.z += (sin(p.x*15.+iTime)/5.);\n  p.z += (cos(p.y*15.+iTime)/5.);\n\n\n  // Return the distance, including a final turbulence based on sin(time) and Z\n  return length(p) - sin((iTime+p.z)*2.0)-.25;\n}\n\n\n\nfloat trace (vec3 o, vec3 d)\n{\n  float t=0.; // Used as a near clipping value (check it with a value of 20.)\n  for(int i = 0; i< 128; i++)\n  {\n    vec3 p = o+d*t;\n    float d = map(p);\n    t += d*0.075;\n  }\n  return t;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\tuv -= 0.5;\n\tuv /= vec2(iResolution.y / iResolution.x, 1);\n    \n    \n\t// 2D Displacement based on texture (produced Tweaked UV) : First Texture\n\tvec4 tex1 = texture(iChannel0, vec2(uv.x,uv.y+iTime/15.));\n\tuv.x += tex1.r/5.5*uv.x;\n\tuv.y += tex1.r/5.5*uv.y;\n    \n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n\t// Camera and ray direction\n\tvec3 pc = vec3(0.+sin(iTime)*1.0,0.+cos(iTime)*1.0,iTime*50.);\n\tvec3 ray = normalize(vec3(uv*1.5,1.));\n\n\tvec3 pixel = vec3(trace(pc,ray));\n\n\t// Add some Color, based on Tweaked UV\n\tpixel.r += uv.x*25.;\n\tpixel.g += uv.y*25.;\n\tpixel.b += uv.x*-25.;\n\n\n\t// Multiply the color by the fog\n\tvec3 fog = 1.0/(1.0+pixel*pixel/10.0)-0.001;    \n    \n\t// Output to screen\n\tfragColor = vec4(pixel*fog,1.0);\n}","name":"Image","description":"","type":"image"}]}