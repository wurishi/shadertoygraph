{"ver":"0.1","info":{"id":"tlfGWj","date":"1557626785","viewed":196,"name":"Hyperbolic Worley","username":"tpfto","description":"Worley (Voronoi) noise using the [url=https://en.wikipedia.org/wiki/Poincar%C3%A9_disk_model]Poincaré[/url] and [url=https://en.wikipedia.org/wiki/Beltrami%E2%80%93Klein_model]Beltrami-Klein[/url] metrics in a hyperbolic disk.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi","worley","geometry","hyperbolic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Demonstrating Worley/Voronoi noise using the Beltrami-Klein and Poincaré disk models of the hyperbolic plane\n\n#define GA 2.39996322973 // golden angle, (3 - sqrt(5)) * PI\n\n// dark and light colors from Solarized (https://ethanschoonover.com/solarized/)\n#define DARK vec3(0., 0.169, 0.212)\n#define LIGHT vec3(0.992, 0.965, 0.89)\n#define GRAY vec3(0.576, 0.631, 0.631)\n\n// utility function\n#define cis(a) vec2( cos(a), sin(a) )\n\n// Beltrami-Klein metric, https://en.wikipedia.org/wiki/Beltrami%E2%80%93Klein_model\n\nfloat beltramiDistance(vec2 p1, vec2 p2)\n{\n      float d = 0.0;\n      float u = dot(p1, p1), v = dot(p2, p2);\n\n      if (max(u, v) < 1.0)\n      {\n          float t = (1.0 - dot(p1, p2))/sqrt((1.0 - u) * (1.0 - v));\n          d = (t >= 1.0) ? acosh(t) : acos(t);\n      }\n\n      return d;\n}\n\n// Poincaré metric, https://en.wikipedia.org/wiki/Poincar%C3%A9_disk_model\n\nfloat poincareDistance(vec2 p1, vec2 p2)\n{\n      float d = 0.0;\n      float u = dot(p1, p1), v = dot(p2, p2);\n\n      if (max(u, v) < 1.0)\n      {\n          vec2 pd = p1 - p2;\n          float t = 1.0 + (2.0 * dot(pd, pd))/((1.0 - u) * (1.0 - v));\n          d = (t >= 1.0) ? acosh(t) : acos(t);\n      }\n\n      return d;\n}\n\n// number of points in hyperbolic disk\n#define NPTS 40\n\n// return the two closest distances for Worley noise\n// type controls the type of metric used\n\nvec2 hypworley(int type, vec2 p)\n{\n    vec2 dl = vec2(2.5);\n    \n\tfor (int m = 0; m < NPTS; m++)\n    {\n        // generate feature points within the cell, using phyllotactic sampling\n        float mf = float(m + 1);\n        vec2 tp = 0.85 * sqrt(mf/float(NPTS)) * cis(GA * mf);\n        tp += 0.004 * cis(mod(33.0 * (iTime + mf), 251.0)); // add some jiggle\n        \n        float c = 0.0;\n        if (type == 1) c = poincareDistance(p, tp); // Poincaré metric\n        if (type == 2) c = beltramiDistance(p, tp); // Beltrami-Klein metric\n                \n        float m1 = min(c, dl.x); // ranked distances\n        dl = vec2(min(m1, dl.y), max(m1, min(max(c, dl.x), dl.y)));\n    }\n        \n    return dl;\n}\n\n// rescaling functions\n\nfloat rescale(float x, vec2 range)\n{\n\t  float a = range.x, b = range.y;\n      return (x - a)/(b - a);\n}\n\nfloat rescale(float x, vec2 r1, vec2 r2)\n{\n      return mix(r2.x, r2.y, (x - r1.x)/(r1.y - r1.x));\n}\n\n// custom colormaps\n\nvec3 lake( float t )\n{\n\t return vec3((2.0 * t + 1.0)/3.0, min(4.0 * t, 2.0 * t + 1.0)/3.0, min(0.8 * t + 0.5, 1.0 - 0.1 * t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        vec2 aspect = iResolution.xy / iResolution.y;\n        vec2 uv = 2.0 * ( fragCoord.xy / iResolution.y ) - aspect;\n        \n        vec3 col = DARK;\n\n        float h = 2.0/iResolution.y, rr = length(uv);\n\n        if (rr < 1.0) {\n\n            int type = int(0.1 * iTime) % 2 + 1;\n            vec2 w = hypworley(type, uv);\n\n            if (int(0.05 * iTime) % 2 == 0) {\n                col = lake(rescale((2.0 * w.y * w.x)/(w.y + w.x) - w.x, vec2(0.0, (type == 1) ? 0.6 : 0.3)));\n            } else {\n                col = lake(rescale(w.y - w.x, vec2(0.0, (type == 1) ? 1.5 : 1.0)));\n            }\n        }\n\n        col = mix(DARK, col, 1.0 - smoothstep(0.5 - h, 0.5 + h, rr - 0.5));\n\n        fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}