{"ver":"0.1","info":{"id":"MtKBRz","date":"1541677228","viewed":2474,"name":"Cosmic Force of Mu","username":"beervgeer","description":"My first shader! All learned from book of shaders, now at chapter https://thebookofshaders.com/07/.\nComments welcome.\n\nHomemade soundtrack: https://soundcloud.com/connect-3-1/loopje\n","likes":23,"published":1,"flags":64,"usePreview":0,"tags":["gradients","energy","lightdance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4lsGzr","filepath":"https://soundcloud.com/connect-3-1/loopje","previewfilepath":"https://soundcloud.com/connect-3-1/loopje","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define time iTime\n#define resolution iResolution.xy\n#define size 0.544726\n#define lineSize 0.174972\n#define blur 0.227794\n#define grid 4.3651814\n#define grid2 4.1270218\n#define morph 2.30923\n#define delayAmount 0.044175148\n#define speed 0.466905\n\nfloat impulse( float k, float x )\n{\n    float h = k*x;\n    return h*exp(1.0-h);\n}\n\nfloat plot(float dis){\n   float pct = smoothstep(dis,dis+blur,0.5)-smoothstep(lineSize+dis,lineSize+dis+blur,0.5);     \n  return   pct ;\n}\n\nvec3 wooper(vec2 st, float timeCheck){\n    \n    vec3 color = vec3(0.0);\n    vec2 pos = vec2(0.5)-abs(st);\n\n    float r = length(pos)*2.0;\n    float a = atan(pos.y,pos.x);\n    \n    float gridSine = 5.+ (grid2*sin(timeCheck/5. * PI));\n    \n    r = fract(impulse(r,gridSine)*grid);\n    \n    float morphSine = 0.2 + ( 1.+sin(timeCheck/3. * PI) /2.)*morph;\n    float morphSine2 = 0.2 + ( 1.+sin(timeCheck/5. * PI) /2.)*morph;\n    float morphSine3 = 0.2 + ( 1.+sin(timeCheck/9. * PI) /2.)*morph;\n    \n    float f = ( size*cos(a*6. + timeCheck/3.) + size*cos(a*2. + timeCheck/2.))/2.;\n    float p = plot(1.-smoothstep(f,f+0.9,r*morphSine));\n    float f2 = ( size*cos(a*4. + timeCheck/3.) + size*cos(a*3. + timeCheck*7.))/2.;\n    float p2 = plot(1.-smoothstep(f2,f2+0.9,r*morphSine2));\n    float f3 = ( size*cos(a*7. + timeCheck/30.) + size*cos(a*3. + timeCheck*7.))/2.;\n    float p3 = plot(1.-smoothstep(f3,f3+0.9,r*morphSine3));\n    \n    color.r = p;\n    color.g = p2 *st.x;\n    color.b = p3;\n \n   return(color);\n}\n\nvec3 powerParticle(vec2 st){\n  \n    st.y += ((st.x*0.05)*sin(time/10.*PI)+(st.x*0.1)*sin(time/12.*PI))/2.;\n    st.x += ((st.y*0.05)*sin(time/10.*PI) + (st.y*0.1)*sin(time/12.*PI))/2.;\n    \n    vec2 pos = vec2(0.25+0.25*sin(time))-abs(st);\n\n    float r = length(pos);\n    float d = distance(st,vec2(0.5))* (sin(time/8.));\n    d = distance(vec2(.5),st);\n   vec3 colorNew = vec3(0);\n   \n   float delay = delayAmount;\n   float timerChecker = time * speed ;\n    for(int i=0;i<10;i++) {\n     \n      vec3 colorCheck = wooper(st, timerChecker+ float(i)*delay)* (1.-(float(i)/10.0));\n      colorNew+= colorCheck ;\n    }\n    \n    return(colorNew);\n}\n\nvec3 rgb2hsb( in vec3 c ){\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz),\n                 vec4(c.gb, K.xy),\n                 step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r),\n                 vec4(c.r, p.yzx),\n                 step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)),\n                d / (q.x + e),\n                q.x);\n}\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 res = vec2(0);\n    res.x = resolution.x*0.5625;\n    res.y = resolution.y;\n    vec2 st = gl_FragCoord.xy/res;\n    st.x -= 0.35;\n    vec3 powerColor = powerParticle(st);\n    vec3 hue = rgb2hsb(powerColor);\n    hue.x = mod(time/10.,1.);\n    hue.y = 0.5;\n    float d = 1.-distance(vec2(.5),st)*2.;\n   \t\n    fragColor = vec4( (hsb2rgb(hue)*d )+(powerColor*d*0.5),1.0);\n \t\n}","name":"Image","description":"","type":"image"}]}