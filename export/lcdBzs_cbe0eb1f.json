{"ver":"0.1","info":{"id":"lcdBzs","date":"1733407266","viewed":19,"name":"Minimal Grid Traversal","username":"kinakomoti","description":"minimal grid traversal shader\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define C_HASH 2309480282U \n\nfloat hash12( vec2 p )\n{\n    uvec2 x = floatBitsToUint(p);\n    x = C_HASH * ((x>>8U)^x.yx);\n    x = C_HASH * ((x>>8U)^x.yx);\n    x = C_HASH * ((x>>8U)^x.yx);\n    \n    return float(x.x)*(1.0/float(0xffffffffU));\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec2 gridCenter;\nfloat gridTraversal( vec2 ro, vec2 rd) {\n   gridCenter = floor( ( ro + rd * 1E-3 )) + 0.5;\n   \n   vec2 src = -( ro - gridCenter ) / rd;\n   vec2 dst = abs( 0.5 / rd );\n   vec2 bv = src + dst;\n\n   return  min( bv.x, bv.y );\n} \n\nfloat map(vec3 p)\n{\n    // Repeat\n    // vec2 gridId = floor(p.xz);\n    // p.xz = mod(p.xz, 1.0) - 0.5;\n\n    p.xz -= gridCenter;\n\n    // float offset = hash12(gridId) * 1.0;\n    float offset = hash12(gridCenter) * 1.0;\n\n    float d = sdBox(p + vec3(0,offset,0), vec3(0.5,2.0,0.5));\n    return d;\n}\n\nvec3 getNormal( vec3 p) {\n  vec2 d = vec2( 0, 1E-4 );\n  return normalize(vec3(\n    map( p + d.yxx) - map( p - d.yxx),\n    map( p + d.xyx) - map( p - d.xyx),\n    map( p + d.xxy) - map( p - d.xxy)\n  ));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (2.0 * (gl_FragCoord.xy) - iResolution.xy)/iResolution.y;    \n    vec3 col = vec3(0.0);\n\n    vec3 ro = vec3(0.0, 5.0, 10.0 + iTime);\n    vec3 rd = normalize(vec3(uv, -1.0));\n\n    // Raymarching\n    vec3 pos = ro;\n    float d = 0.0;\n    for(int i = 0; i < 100; i++){\n        float limitD = gridTraversal(pos.xz, rd.xz);\n        d = map(pos);\n        if(d < 0.001) \n        {\n            col = getNormal(pos) * 0.5 + 0.5;\n            break;\n        }\n        d = min(limitD, d);\n        pos += rd * d;\n    }   \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}