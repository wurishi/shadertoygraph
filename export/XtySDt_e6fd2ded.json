{"ver":"0.1","info":{"id":"XtySDt","date":"1486329024","viewed":201,"name":"My First Shader! ","username":"MrGrumpiness","description":"My first attempt at creating a shader.. Wonder what I was so worried about all those years :)","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 GreenScreen1(in sampler2D greenScreen, in sampler2D screenBackground, in vec2 screenCoord)\n{\n    vec4 retColor = vec4(0.0, 0.0, 0.0, 1.0);\n    // Get the greenscreen pixel from screenCoord\n    vec4 texColor = texture(iChannel0, screenCoord);\n    // Create an index to the first point in the greenscreen for referance\n    vec2 point0 = vec2(0.0, 0.0);\n    // Obtain the color of green being used in the source image\n    vec4 grnColor = texture(iChannel0, point0);\n    // Get the pixel in the underlay image\n    vec4 ovrColor = texture(iChannel1, screenCoord);\n    // Determine if the underlay color matches the green\n    if(texColor == grnColor)\n    {\n        // Yes, then replace this pixel with the underlay pixel\n\t\tretColor = ovrColor;\n    }\n    else \n    {\n        // No, then just return the source image pixel\n        retColor = texColor;\n    }\n    \n    // Return the processed color\n    return retColor;\n}\n\n/* Gleamed from the wiki page:\nIn most versions, a function f(r, g, b) → α is applied to every pixel in the image. α (alpha) \nhas a meaning similar to that in alpha compositing techniques. α ≤ 0 means the pixel is fully \nin the green screen, α ≥ 1 means the pixel is fully in the foreground object, and intermediate \nvalues indicate the pixel is partically covered by the foreground object \n(or it is transparent). A further function g(r, g, b) → (r, g, b) is needed to remove green \nspill on the foreground objects.\n\nA very simple f() function for green screen is A(r+b) - Bg where A and B are user adjustable \nconstants with a default value of 1.0. A very simple g() is (r, min(g,b), b). This is fairly \nclose to the capabilities of analog and film-based screen pulling.\n*/\nvec4 GreenScreen2(in sampler2D greenScreen, in sampler2D screenBackground, in vec2 screenCoord)\n{\n    vec4 retColor = vec4(0.0, 0.0, 0.0, 1.0);\n    // Get the greenscreen pixel from screenCoord\n    vec4 texColor = texture(iChannel0, screenCoord);\n    // Get the pixel in the underlay image\n    vec4 ovrColor = texture(iChannel1, screenCoord);\n    // Phase 1 process\n    float alpha = (1.0 * clamp((texColor.r + texColor.b), 0.0, 1.0)) - (1.0 * texColor.g);\n    if(alpha <= 0.0)\n    {\n        // Yes, then replace this pixel with the underlay pixel\n        //ovrColor.r = ovrColor.r;\n        //ovrColor.b = ovrColor.b;\n        //ovrColor.g = min( texColor.g, texColor.b);\n\t\tretColor = ovrColor;\n    }\n    else // if(alpha >= 1.0)\n    {\n        // No, then just return the source image pixel\n        retColor = texColor;\n        //retColor.g = min( ovrColor.g, texColor.g);\n    }\n    \n    // Phase 2 process\n    float greenColor = texture(greenScreen, vec2(0,0)).g;\n    if(retColor.g > greenColor)\n    {\n        //retColor = retColor - vec4(0.00, 0.06, 0.09, 1.0);\n    }\n    \n    //retColor.g = min(texColor.g, texColor.b);\n    // Return the processed color\n    return retColor;\n}\n\nvec4 GreenScreen3(in sampler2D greenScreen, in sampler2D screenBackground, in vec2 screenCoord)\n{\n\tvec4 texColor = texture(iChannel0,screenCoord);//Get the pixel at xy from iChannel0\n\tvec4 backgroundColor = vec4(13.0/255.0, 162.0/255.0, 38.0/255.0, 1.0);\n\tfloat difference = distance(texColor,backgroundColor);\n\tif( difference < 0.395 ) \n    {\n\t\ttexColor = texture(screenBackground, screenCoord);\n\n\t}\n\n\treturn texColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy = fragCoord.xy / iResolution.xy;\n    //xy.y = 1.0 - xy.y;\n    \n    //fragColor = texture(iChannel0, xy);\n    fragColor = GreenScreen3(iChannel0, iChannel1, xy);\n    //fragColor = mix(fragColor, GreenScreen3(iChannel2, iChannel0, xy), 0.5);\n}\n","name":"Image","description":"","type":"image"}]}