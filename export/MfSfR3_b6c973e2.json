{"ver":"0.1","info":{"id":"MfSfR3","date":"1725295211","viewed":39,"name":"Fractal Dream","username":"SirShart","description":"Wow","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n\nmat2 rot(float a) {\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Mandelbulb fractal distance function\nfloat mandelbulb(vec3 p) {\n    vec3 z = p;\n    float dr = 1.0;\n    float r = 0.0;\n    float power = 8.0 + 2.0 * sin(iTime * 0.5); // Pulsating power factor\n\n    for (int i = 0; i < 8; i++) {\n        r = length(z);\n        if (r > 2.0) break;\n\n        // Convert to polar coordinates\n        float theta = acos(z.z / r);\n        float phi = atan(z.y, z.x);\n        dr = pow(r, power - 1.0) * power * dr + 1.0;\n\n        // Scale and rotate the point\n        float zr = pow(r, power);\n        theta *= power;\n        phi *= power;\n\n        // Convert back to Cartesian coordinates\n        z = zr * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));\n\n        z += p;\n    }\n    return 0.5 * log(r) * r / dr;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = mandelbulb(p);\n        dO += dS;\n        if(dO > MAX_DIST || abs(dS) < SURF_DIST) break;\n    }\n\n    return dO;\n}\n\nvec3 getNormal(vec3 p) {\n    float d = mandelbulb(p);\n    vec2 e = vec2(0.001, 0);\n    vec3 n = d - vec3(\n        mandelbulb(p - e.xyy),\n        mandelbulb(p - e.yxy),\n        mandelbulb(p - e.yyx)\n    );\n    return normalize(n);\n}\n\n// Psychedelic color based on the position and time\nvec3 getPsychedelicColor(vec3 p) {\n    return vec3(\n        0.5 + 0.5 * sin(p.x * 4.0 + iTime * 2.0),\n        0.5 + 0.5 * sin(p.y * 4.0 + iTime * 1.5),\n        0.5 + 0.5 * sin(p.z * 4.0 + iTime * 2.5)\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Fixed camera setup looking straight ahead\n    vec3 ro = vec3(0, 0, -5);\n    vec3 rd = normalize(vec3(uv, 2.1));\n\n    // Raymarching to find the distance to the fractal surface\n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    vec3 n = getNormal(p);\n\n    // Lighting and color\n    vec3 lightPos = vec3(5.0, 5.0, -5.0);\n    vec3 l = normalize(lightPos - p);\n\n    float diff = max(dot(n, l), 0.0);\n    float spec = pow(max(dot(reflect(-l, n), -rd), 0.0), 32.0);\n\n    vec3 color = getPsychedelicColor(p) * diff + vec3(1.0, 1.0, 1.0) * spec;\n\n    // Distance fog\n    color *= exp(-0.02 * d);\n\n    // Final output\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}