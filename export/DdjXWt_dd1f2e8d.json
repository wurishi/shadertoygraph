{"ver":"0.1","info":{"id":"DdjXWt","date":"1671432595","viewed":104,"name":"tonemap1","username":"hehe","description":"based on https://www.shadertoy.com/view/lslGzl\nrobo tonemap from https://www.shadertoy.com/user/robobo1221","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","tonemap","robin","robobo","jodie"],"hasliked":0,"parentid":"4dBcD1","parentname":"tonemap test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float exposure = 1.0;\n\nvec3 linearToSrgb(const vec3 x)\n{\n    //return 1.14374*(-0.126893*x+sqrt(x)); // curve matched using turingbot\n    return pow(x, vec3(1. / 2.2));\n}\n\n \nvec3 getBaseColor(int i)\n{\n    if (i == 0) return vec3(1.0, 0.4, 0.2);\n    if (i == 1) return vec3(0.4, 1.0, 0.2);\n    if (i == 2) return vec3(0.2, 1.0, 0.4);\n    if (i == 3) return vec3(0.2, 0.4, 1.0);\n    if (i == 4) return vec3(0.4, 0.2, 1.0);\n    if (i == 5) return vec3(1.0, 0.2, 0.4);\n \n    return vec3(1.);\n}\n \nvec3 getBaseColor()\n{\n    float colorPerSecond = 0.5;\n    int i = int(mod(colorPerSecond * iTime, 7.));\n    int j = int(mod(float(i) + 1., 7.));\n \n    return vec3(0.978,0.736,0.646);\n    //return mix(getBaseColor(i), getBaseColor(j), fract(colorPerSecond * iTime));\n}\n\nvec3 linear(vec3 color)\n{\n    color = clamp(color, 0., 1.);\n    return color;\n}\n\nvec3 UE5Approx(vec3 color)\n{\n    color *= 0.8;\n    color = (color*(2.51*color+0.03)) / (color*(2.43*color+0.59)+0.14);\n    return color;\n}\n\nvec3 Reinhard_W_luma(vec3 color)\n{\n    float white = exposure;\n    float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n    float toneMappedLuma = luma * (1. + luma / (white*white)) / (1. + luma);\n    color *= toneMappedLuma / luma;\n    return color;\n}\n\nvec3 Reinhard_S(vec3 color)\n{\n    color = pow(color,vec3(1.5));\n    color = color / ( color + 0.38490017946);\n    return color;\n}\n\nvec3 Reinhard_S_luma(vec3 color)\n{\n    float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n    float luma1 = pow(luma,1.5);\n    float toneMappedLuma = luma1 / ( luma1 + 0.38490017946);\n    color *= toneMappedLuma / luma;\n    return color;\n}\n\nfloat GT(float x, float P, float a, float m, float l, float c, float b) {\n    // Uchimura 2017, \"HDR theory and practice\"\n    // Math: https://www.desmos.com/calculator/gslcdxvipg\n    // Source: https://www.slideshare.net/nikuque/hdr-theory-and-practicce-jp\n    float l0 = ((P - m) * l) / a;\n    float L0 = m - m / a;\n    float L1 = m + (1.0 - m) / a;\n    float S0 = m + l0;\n    float S1 = m + a * l0;\n    float C2 = (a * P) / (P - S1);\n    float CP = -C2 / P;\n\n    float w0 = 1.0 - smoothstep(0.0, m, x);\n    float w2 = step(m + l0, x);\n    float w1 = 1.0 - w0 - w2;\n\n    float T = m * pow(x / m, c) + b;\n    float S = P - (P - S1) * exp(CP * (x - S0));\n    float L = m + a * (x - m);\n\n    return T * w0 + L * w1 + S * w2;\n}\n\nvec3 GT_luma(vec3 color)\n{\n    float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));\n    float toneMappedLuma = GT(luma,1.0,1.0,0.22,0.4,1.4,0.0);\n    color *= toneMappedLuma / luma;\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = getBaseColor();\n    color *= exposure;\n \n    float n = 6.;\n    float s = 9.;\n    {\n        if( false )\n        {\n            int w = int(s * uv.x);\n            if(w == 0) color *= 0.000;\n            else if(w == 1) color *= 0.035;\n            else if(w == 1) color *= 0.045;\n            else if(w == 2) color *= 0.090;\n            else if(w == 3) color *= 0.180;\n            else if(w == 4) color *= 0.360;\n            else if(w == 5) color *= 0.720;\n            else if(w == 6) color *= 0.950;\n            else if(w == 8) color *= 0.000;\n        }\n        else\n        {\n            color *= (uv.x);\n        }\n        \n        int i = int(n * (1. - uv.y));\n        if (i == 0) color = linear(color);\n        if (i == 1) color = UE5Approx(color);\n        if (i == 2) color = Reinhard_S_luma(color);\n        if (i == 3) color = Reinhard_W_luma(color);\n        if (i == 4) color = GT_luma(color);\n        if (i == 5) color = vec3(0.0);\n        \n    }\n    \n \n    if (abs(fract(n * uv.y + 0.5) - 0.5) < 0.05)\n        color = vec3(0.);\n    \n    color = linearToSrgb(color);\n    \n \n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}