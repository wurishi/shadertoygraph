{"ver":"0.1","info":{"id":"4fXGRB","date":"1703171103","viewed":35,"name":"Metaballs-GPT4","username":"fruei","description":"Un shader basico para \"Metaballs\" que fue creado usando chat gpt y otros shaders como referencia","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["metaballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n// Función para calcular el campo de influencia de un metaball\nfloat metaball(vec2 position, vec2 center, float radius) {\n    return radius / length(position - center);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Convertir coordenadas de píxeles a espacio normalizado\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\n    // Posiciones y radios de cuatro metaballs esféricas\n    vec2 center1 = vec2(sin(iTime * 0.5), cos(iTime * 0.5)) * 0.25;\n    vec2 center2 = vec2(cos(iTime * 0.3), sin(iTime * 0.3)) * 0.25;\n    vec2 center3 = vec2(sin(iTime * 0.4) - 0.5, cos(iTime * 0.4) - 0.5) * 0.25;\n    vec2 center4 = vec2(cos(iTime * 0.2) - 0.5, sin(iTime * 0.2) - 0.5) * 0.25;\n    float radius = 0.02; // Radio para todas las metaballs\n\n    // Calcular los campos de influencia de las metaballs esféricas\n    float influence1 = metaball(uv, center1, radius);\n    float influence2 = metaball(uv, center2, radius);\n    float influence3 = metaball(uv, center3, radius);\n    float influence4 = metaball(uv, center4, radius);\n\n    // Umbral para determinar la superficie de las metaballs\n    float threshold = 0.5;\n\n    // Combinar las influencias de todas las metaballs\n    float totalInfluence = influence1 + influence2 + influence3 + influence4;\n\n    // Determinar si el punto actual está dentro de las metaballs\n    if (totalInfluence > threshold) {\n        // Mezclar colores en función de la influencia relativa\n        vec3 color = vec3(1.0, 0.0, 0.0); // Ejemplo: color rojo base\n\n        // Modificar el color en función de la influencia de cada metaball\n        color = mix(color, vec3(0.0, 1.0, 0.0), influence2 / totalInfluence); // Verde para la segunda metaball\n        color = mix(color, vec3(0.0, 0.0, 1.0), influence3 / totalInfluence); // Azul para la tercera metaball\n        color = mix(color, vec3(1.0, 1.0, 0.0), influence4 / totalInfluence); // Amarillo para la cuarta metaball\n\n        fragColor = vec4(color, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0); // Fondo negro\n    }\n}\n","name":"Image","description":"","type":"image"}]}