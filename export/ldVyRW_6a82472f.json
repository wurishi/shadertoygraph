{"ver":"0.1","info":{"id":"ldVyRW","date":"1521441091","viewed":241,"name":"green, brits, and damme","username":"LegoCylon","description":"replaces foreground with a background based on a chroma key and replace spill with greyscale","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shadow","greenscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution 4.0 International License. \n// To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/ or\n// send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n//\n// Based on http://gc-films.com/chromakey.html\n\n// Convert RGB into YCbCr\n//\nvec3 YCbCr (vec3 rgb) {\n\treturn vec3(\n        dot(rgb, vec3(.299, .587, .114)), // y\n        .5 + dot(rgb, vec3(-.169, -.331, .5)), // Cb\n\t\t.5 + dot(rgb, vec3(.5, -.419, -.081)) // Cr\n    );\n}\n\n//  Replace foreground (f) with the background (b) based on a chroma key (k) and replace spill with greyscale\n//\nvec4 CK (vec3 f, vec3 b, vec3 k) {\n    vec3 v = YCbCr(f);\n    \n    //  Compute the distance in the CbCr space since this ignores luminance.\n    //\n    float l = length((v - YCbCr(k)).gb);\n    \n    //  Calculate a blending mask based on the ideal distances.\n    //\n    float m = 1. - smoothstep(.075, .225, l);\n\n    //  Calculate a greyscale based on the distance from the key.\n    //\n    vec3 s = (1. - m) * vec3(v.r);\n    \n    //  Blend between the greyscale and the foreground after removing the key based on the distance from the key.\n    //\n    return vec4(mix(s, f - m * k, smoothstep(.125, .275, l)) + m * b, 1.);\n}\n\nvoid mainImage (out vec4 o, in vec2 i){\n    vec2 uv = i.xy / iResolution.xy;\n\n    //  The foreground image\n    //\n    vec3 f = texture(iChannel0, uv).rgb;\n    \n    //  The background image\n    //\n    vec3 b = texture(iChannel1, uv).rgb;\n    \n    //  The color key (greenscreen)\n    //\n    vec3 k = vec3(.176, .627, .176);\n    \n    o = CK(f, b, k);\n}","name":"Image","description":"","type":"image"}]}