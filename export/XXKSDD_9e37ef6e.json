{"ver":"0.1","info":{"id":"XXKSDD","date":"1720032492","viewed":30,"name":"Test bloom 2D","username":"laside777","description":"bloom","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bloomtest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Adjustable parameters \nconst float bloomThreshold = 0.3;   // Umbral para aplicar bloom\nconst float bloomIntensity = 8.0;   // Intensidad del efecto de bloom\nconst float fadeAmount = 8.5;       // Cantidad de desvanecimiento fuera del bloom\nconst float darkness = 0.3;         // Oscuridad general de las áreas no afectadas\nconst float bloomRange = 0.40;       // Rango de influencia del bloom\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Sample color from texture (iChannel0)\n    vec4 texColor = texture(iChannel0, uv);\n\n    // Aplicar bloom a los colores claros\n    vec3 bloom = texColor.rgb * smoothstep(bloomThreshold, bloomThreshold + bloomRange, texColor.rgb);\n\n    // Escalar el bloom según la intensidad deseada\n    bloom *= bloomIntensity;\n\n    // Desvanecimiento suave del bloom\n    float fade = smoothstep(0.0, fadeAmount, length(texColor.rgb - bloom));\n\n    // Mezclar el color original con el bloom y aplicar el desvanecimiento\n    vec3 finalColor = mix(texColor.rgb, texColor.rgb + bloom, fade);\n\n    // Oscurecer las áreas que no tienen bloom\n    finalColor *= smoothstep(0.0, bloomThreshold, texColor.rgb);\n\n    // Ajustar la oscuridad general de las áreas no afectadas\n    finalColor = mix(finalColor, finalColor * darkness, 1.0 - smoothstep(bloomThreshold, 1.0, texColor.rgb));\n\n    // Asegurar que el color final esté dentro del rango válido (0 a 1)\n    finalColor = clamp(finalColor, 0.0, 1.0);\n\n    // Asignar el color final a fragColor\n    fragColor = vec4(finalColor, texColor.a);\n}","name":"Image","description":"","type":"image"}]}