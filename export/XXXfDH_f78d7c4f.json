{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"vec2 hash(vec2 uv) {\n    // Create a pseudo-random base using sine and a dot product\n    float h1 = fract(sin(dot(uv.xy, vec2(12.9898, 78.233))) * 43758.5453);\n    float h2 = fract(sin(dot(uv.xy + vec2(1.0, 0.0), vec2(12.9898, 78.233))) * 43758.5453);\n    \n    // Return a vec2 from the two hash components\n    return vec2(h1, h2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel and mouse coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv*2.0-1.0;\n    vec2 Mouse = iMouse.xy/iResolution.xy;\n    Mouse = Mouse*2.0-1.0;\n\n    \n    float konstant = 0.7; //recommended 0-1\n    const int pointsnumber = 5;\n    vec3 col = vec3(1.0);    \n    float colorRange = float(2)-1.0;\n    \n    \n    vec3 points[pointsnumber];\n    points[0] = vec3(-1.0, sin(iTime),0.25);\n    points[1] = vec3(-0.5, sin(iTime)*-1.0,0.0);\n    points[2] = vec3(0.0, sin(iTime),0.0);\n    points[3] = vec3(0.5, sin(iTime)*-1.0,0.0);\n    points[4] = vec3(1.0, sin(iTime),0.25);\n    \n    float pointsLength[pointsnumber];\n     \n    for(int i = 0;i<pointsnumber;i++) {\n        pointsLength[i] = (length(uv-points[i].xy)/konstant)-points[i].z;\n        col = col*pointsLength[i];\n    }\n    \n\n    col = round(col*colorRange)/colorRange;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XXXfDH","date":"1734971483","viewed":20,"name":"Fork sfd test b jekkil 761","username":"jekkil","description":"a test with sdf and mouse","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"X3fBW8","parentname":"sfd test by [jekkil]"}}