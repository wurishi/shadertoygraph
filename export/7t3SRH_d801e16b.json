{"ver":"0.1","info":{"id":"7t3SRH","date":"1638688901","viewed":62,"name":"Simple Circle [-1, 1]","username":"mileslacey","description":"A simple circle using [-1, 1] cartesian coordinates and correct aspect ratio.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec4 circle(in vec2 pos, in float radius, in vec4 color, in vec2 uv)\n{\n\tfloat amInPoint = length(pos - uv) / radius;\n\treturn color * (1.f-step(1.f, amInPoint));\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.f);\n\tvec2 uv = aspect * (vec2(2.f) * (fragCoord.xy / iResolution.xy) - vec2(1.f));\n\n    // Time varying pixel color\n    vec3 color = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\t\n\t// Circle\n\tvec4 circle0 = circle(vec2(0.f, 0.f), 0.75f, vec4(color, 1.f), uv);\n\t\n\t// Blend the two\n\tfragColor = circle0;\n}\n","name":"Image","description":"","type":"image"}]}