{"ver":"0.1","info":{"id":"WdtcD2","date":"1601784961","viewed":81,"name":"#inktober2020 d3: pixely circle","username":"zaiyugi","description":"Day 3 of my personal challenge for Inktober 2020. Trying for a quantized wave, but not quite there yet.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["quantized","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nTiles 80.0\n#define PI 3.141592\n#define dog 0.25\n\n#define cm_A vec3(0.5, 0.5, 0.5)\n#define cm_B vec3(0.5, 0.5, 0.5)\n#define cm_C vec3(1.0, 1.0, 1.0)\n#define cm_D vec3(0.0, 0.1, 0.2)\n\nvec2 rotate2D(vec2 _st, float _angle)\n{\n\t_st -= 0.5;\n    _st = mat2(\n        cos(_angle),-sin(_angle),\n        sin(_angle),cos(_angle)\n    ) * _st;\n    _st += 0.5;\n    \n    return _st;\n}\n\nfloat ring(float e0, float d, float f)\n{\n    return smoothstep(e0, e0 + d, f) - smoothstep(e0 + d, e0 + 2. * d, f);\n}\n\nvec3 colormap(float t)\n{\n    return cm_A + cm_B * cos(2.0 * PI * (cm_C * t + cm_D));\n}\n\nfloat box(in vec2 p, in vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize uv and account for aspect ratio\n    vec2 uv = fragCoord / iResolution.xy;\n    float ar = iResolution.x / iResolution.y;\n    uv.x = (uv.x - 0.5) * ar + 0.5;\n\n    // Preserve original uv\n    vec2 p = uv;\n    \n    float t = iTime;\n    vec3 col = vec3(0.0);\n    \n    vec2 tile_p = p * nTiles;\n\ttile_p = fract(tile_p);\n    \n    float gridline = ring(-0.1, 0.1, tile_p.x) + ring(0.9, 0.1, tile_p.x);\n    gridline += ring(-0.1, 0.1, tile_p.y) + ring(0.9, 0.1, tile_p.y);\n    gridline = 1.0 - gridline;\n    \n    float wave_tiles = nTiles / 2.0;\n    float L1_sdf = length(floor((p - 0.5) * wave_tiles) / wave_tiles);\n    \n    float wave_t = fract(t * 0.2);\n    float wave_r = mix(-.5, 1.5, wave_t);\n    float L1_shape = ring(wave_r, 0.15, L1_sdf);\n    \n    float color_tiles = 8.0;\n    float gridded_col = floor((wave_t + L1_shape * 0.5) * color_tiles) / color_tiles;\n    col = colormap(gridded_col) * mix(0.05, 1.0, L1_shape);\n    \n    col *= gridline;\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}