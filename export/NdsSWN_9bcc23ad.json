{"ver":"0.1","info":{"id":"NdsSWN","date":"1618706850","viewed":103,"name":"fire cube ","username":"kotyasinus","description":"cg task2 v1v0 cmc msu","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["task2v1v0"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Color1 vec3(1.0, 1.0, 1.0)\n#define Color2 vec3(1.0, 0.3, 0.0)\n#define Color3 vec3(1.0, 0.0, 0.0)\n#define Color4 vec3(0.9, 0.0, 0.0)\n#define saturate(a) clamp(a, 0.0, 1.0)\n#define orient(a, b, c, normal) dot(cross(b - a, c - a), normal)\nconst int EMISSION = 0;\nconst int DIFFUSION = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\nconst float INF = 1e10;\nconst float PLANE_R = 27.0;\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\nconst float NOISE_AMP = 0.06;\nconst vec3 ANIM = vec3(0.0, -3.0, 1.5);\nconst float NOISE_FREQ = 4.0;\nconst float FIRE_R = 0.4;\nconst vec3 FIRE_POS = vec3(0.0);\nconst int MARCH_STEPS = 5;\nconst int NOISE_STEPS = 1;\nconst vec3 CAMERA_POS = vec3(-4, 5, -7); \nconst int LIGHTS_NUM = 2;\nvec3 randdir;\n\nstruct Cube {\n    vec3 p[3];\n};\n\n\nCube cube = Cube(vec3[3](\n    vec3(-1.0, -1.0, -1.0), \n    vec3(1.0, -1.0, -1.0), \n    vec3(-1.0, -1.0, 1.0)\n));\n\n\nstruct Square {\n    vec3 v[4];\n};\n\nstruct Sphere {\n    vec3 pos;\n    vec3 color;\n    float radius;\n    float attk;\n};\n\nSphere Lights[LIGHTS_NUM] = Sphere[LIGHTS_NUM](\n    Sphere(vec3(6, 1, 1), vec3(0.05, 0.5, 0.5), 0.25, 12.0),\n    Sphere(vec3(-2, 3, -2), vec3(0.8, 0.1, 0.8), 0.4, 17.0)\n);\n\nfloat traceplane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 spacepos = t * dir + pos;\n    if (dot(spacepos.xz, spacepos.xz) >= PLANE_R) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat tracesphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;¶\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r¶\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0¶\n    float b = dot(pos, dir);\n    float discr = b * b - dot(pos, pos) + r * r;\n    if (discr < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(discr);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(discr);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat trace_side(vec3 pos, vec3 dir, vec3 p0, vec3 p1, vec3 p2, out vec3 normal) {\n    normal = normalize(cross(p2 - p0, p1 - p0));\n    float d = dot(normal, dir);\n    if (abs(d) <  0.0001f) {\n        return INF;\n    }\n    float t = dot(p0 - pos, normal) / d;\n    return t < 0.0 ? INF : t;\n}\n\n\nfloat tracesquare(vec3 pos, vec3 dir, Square s, out vec3 normal) {\n    float t = trace_side(pos, dir, s.v[0], s.v[1], s.v[3], normal);\n    if (t == INF) {\n        return INF;\n    }\n    vec3 q = pos + dir * t;\n    float o1 = orient(q, s.v[0], s.v[1], normal);\n    float o2 = orient(q, s.v[1], s.v[2], normal);\n    float o3 = orient(q, s.v[2], s.v[3], normal);\n    float o4 = orient(q, s.v[3], s.v[0], normal);\n    if (o1 * o2 > 0.0 && o2 * o3 > 0.0 && o3 * o4 > 0.0) {\n        return t;\n    }\n    return INF;\n}\n\nfloat tracecube(vec3 pos, vec3 dir, Cube cube, out vec3 normal) {\n    vec3 p0 = cube.p[0];\n    vec3 p1 = cube.p[1];\n    vec3 p2 = cube.p[2];\n    vec3 a = p2 - p0;\n    vec3 b = p1 - p0;\n    vec3 c = normalize(cross(a, b)) * length(a);\n    vec3 p3 = p2 + b;\n    vec3 p4 = p0 + c;\n    vec3 p5 = p4 + b;\n    vec3 p6 = p4 + a;\n    vec3 p7 = p6 + b;\n    Square s1 = Square(vec3[4](p0, p1, p3, p2));\n    Square s2 = Square(vec3[4](p0, p4, p6, p2));\n    Square s3 = Square(vec3[4](p3, p6, p7, p3));\n    Square s4 = Square(vec3[4](p3, p7, p5, p1));\n    Square s5 = Square(vec3[4](p1, p5, p4, p0));\n    Square s6 = Square(vec3[4](p4, p5, p7, p6));\n    Square s[6] = Square[6](s1, s2, s3, s4, s5, s6);\n    float t = INF;\n    vec3 tmpnormal;\n    for (int i = 0; i < s.length(); i++) {\n        float tt = tracesquare(pos, dir, s[i], tmpnormal);\n        if ( tt < t) {\n            t = tt;\n            normal = tmpnormal;\n        }\n    }\n    return t;\n}\n\nfloat tracecylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    const float R = 3.0f;\n    float tableT = (-1.0 - pos.y) / dir.y;\n    if (tableT < 0.0) {\n        return INF;\n    }\n    vec3 finalpos = pos + dir * tableT;\n    if (dot(finalpos.xz, finalpos.xz) < R * R)  {\n        normal = vec3(0, 1, 0);\n        return tableT;\n    }\n    float b = dot(pos.xz, dir.xz);\n    float a = dot(dir.xz, dir.xz);\n    float D = b * b - (dot(pos.xz, pos.xz) - R * R) * a;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b  - sqrt(D)) / a;\n    if (pos.y + t * dir.y < -1.0) {\n        vec3 worldpos = pos + t * dir;\n        normal = normalize(vec3(worldpos.x, 0, worldpos.z));\n        return t;\n    }\n    return INF;\n}\n\nbool isoccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 cubenormal;\n    float cubeT = tracecube(pos, dir, cube, cubenormal);\n    if (cubeT < dist) {\n        return true;\n    }\n    vec3 cyl_normal;\n    float cylT = tracecylinder(pos, dir, cyl_normal);\n    return (cylT < dist);\n}\n\nvec3 computelight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 res; \n    for (int i = 0; i < LIGHTS_NUM; i++) {\n        vec3 toLight = Lights[i].pos - pos;\n        float distSqr = dot(toLight, toLight);\n        float atten = isoccluded(pos, Lights[i].pos + randdir * Lights[i].radius) ? 0.0 : Lights[i].attk / distSqr;\n        res += max(0.0, dot(normal, normalize(toLight))) * atten * Lights[i].color;\n        \n    }\n    return color * (res + texture(iChannel1, normal).rgb * 0.5);\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nvec3 mod289(vec3 x) { \n    return x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nvec4 mod289(vec4 x) { \n    return x - floor(x * (1.0 / 289.0)) * 289.0; \n}\n\nvec4 permute(vec4 x) { \n    return mod289(((x*34.0)+1.0)*x); \n}\n\nvec4 taylorInvSqrt(vec4 r) { \n    return 1.79284291400159 - 0.85373472095314 * r; \n}\n\nfloat snoise(vec3 v) {\n\tconst vec2  C = vec2(1.0/6.0, 1.0/3.0);\n\tconst vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\tvec3 i  = floor(v + dot(v, C.yyy));\n\tvec3 x0 = v - i + dot(i, C.xxx);\n\tvec3 g = step(x0.yzx, x0.xyz);\n\tvec3 l = 1.0 - g;\n\tvec3 i1 = min(g.xyz, l.zxy);\n\tvec3 i2 = max(g.xyz, l.zxy);\n\tvec3 x1 = x0 - i1 + C.xxx;\n\tvec3 x2 = x0 - i2 + C.yyy; \n\tvec3 x3 = x0 - D.yyy;       \n\ti = mod289(i);\n\tvec4 p = permute(permute(permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0)) + i.x + vec4(0.0, i1.x, i2.x, 1.0 )); \n\tfloat n_ = 0.142857142857; \n\tvec3  ns = n_ * D.wyz - D.xzx;\n\tvec4 j = p - 49.0 * floor(p * ns.z * ns.z); \n\tvec4 x_ = floor(j * ns.z);\n\tvec4 y_ = floor(j - 7.0 * x_);  \n\tvec4 x = x_ *ns.x + ns.yyyy;\n\tvec4 y = y_ *ns.x + ns.yyyy;\n\tvec4 h = 1.0 - abs(x) - abs(y);\n\tvec4 b0 = vec4(x.xy, y.xy);\n\tvec4 b1 = vec4(x.zw, y.zw);\n\tvec4 s0 = floor(b0) * 2.0 + 1.0;\n\tvec4 s1 = floor(b1) * 2.0 + 1.0;\n\tvec4 sh = -step(h, vec4(0.0));\n\tvec4 a0 = b0.xzyw + s0.xzyw * sh.xxyy;\n\tvec4 a1 = b1.xzyw + s1.xzyw * sh.zzww;\n\tvec3 p0 = vec3(a0.xy, h.x);\n\tvec3 p1 = vec3(a0.zw, h.y);\n\tvec3 p2 = vec3(a1.xy, h.z);\n\tvec3 p3 = vec3(a1.zw, h.w);\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n\tp0 *= norm.x;\n\tp1 *= norm.y;\n\tp2 *= norm.z;\n\tp3 *= norm.w;\n\tvec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n\tm = m * m;\n\treturn 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3)));\n}\n\nfloat turbulence(vec3 position, float minfreq, float maxfreq, float qwidth) {\n\tfloat value = 0.0;\n\tfloat cutoff = clamp(0.5/qwidth, 0.0, maxfreq);\n\tfloat fade;\n\tfloat fout = minfreq;\n\tfor(int i = 0 ; i < NOISE_STEPS ; i++)\n\t{\n\t\tif(fout >= 0.5 * cutoff) {\n            break;\n        }\n\t\tfout *= 2.0;\n\t\tvalue += abs(snoise(position * fout))/fout;\n\t}\n\tfade = clamp(2.0 * (cutoff-fout)/cutoff, 0.0, 1.0);\n\treturn 1.0 - value - fade * abs(snoise(position * fout)) / fout;\n}\n\nfloat spheredist(vec3 position, float r) {\n\treturn length(position - FIRE_POS) - r;\n}\n\nvec3 shade(float distance) {\n\tfloat c1 = saturate(distance*5.0 + 0.5);\n\tfloat c2 = saturate(distance*5.0);\n\tfloat c3 = saturate(distance*3.4 - 0.5);\n\tvec3 a = mix(Color1,Color2, c1);\n\tvec3 b = mix(a,     Color3, c2);\n\treturn \t mix(b,     Color4, c3);\n}\n\nfloat renderball(vec3 position, out float distance) {\n\tfloat noise = turbulence(position * NOISE_FREQ + ANIM * 1.05, 0.1, 1.5, 0.03) * NOISE_AMP;\n\tnoise = saturate(abs(noise));\n\tdistance = spheredist(position, FIRE_R) - noise;\n\treturn noise;\n}\n\nvec3 raymarching(vec3 rayorigin, vec3 raystep) {\n\tvec3 position = rayorigin;\n\tfloat distance;\n\tfloat displacement;\n\tfor(int step = 0; step < MARCH_STEPS; step++)\n\t{\n\t\tdisplacement = renderball(position, distance);\n\t\tif(distance < 0.05) {\n            break;\n        }\n\t\tposition += raystep * distance;\n\t}\n\treturn mix(shade(displacement), vec3(0, 0, 0), float(distance >= 0.5));\n}\n\nbool intersectsphere(vec3 ro, vec3 rd, vec3 pos, float radius, out vec3 i_point) {\n\tvec3 reldistance = (ro - pos);\n\tfloat b = dot(reldistance, rd);\n\tfloat c = dot(reldistance, reldistance) - radius * radius;\n\tfloat d = b*b - c;\n\ti_point = ro + rd*(-b - sqrt(d));\n\treturn d >= 0.0;\n}\n\nvec3 fire(vec2 p) {\n\tfloat rotx = 0.7;\n\tfloat roty = 0.8;\n\tfloat zoom = 10.0;\n\tvec3 ro = zoom * normalize(vec3(cos(roty), cos(rotx), sin(roty)));\n\tvec3 ww = normalize(vec3(0.0, 0.0, 0.0) - ro);\n\tvec3 uu = normalize(cross( vec3(0.0, 1.0, 0.0), ww));\n\tvec3 vv = normalize(cross(ww, uu));\n\tvec3 rd = normalize(p.x*uu + p.y*vv + 1.6*ww);\n\tvec3 col;\n\tvec3 origin;\n\t\n\tif(intersectsphere(ro, rd, FIRE_POS, FIRE_R + NOISE_AMP*12.0, origin))\n\t{\n\t\tcol = raymarching(origin, rd);\n\t}\n\treturn col;\n}\n\nfloat snoise1(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res))*s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.), res))*s;\n\tvec3 f = fract(uv); \n\tf = f*f*(4.0-2.0*f);\n\tvec4 v = vec4(uv0.x+uv0.y+uv0.z, uv1.x+uv0.y+uv0.z,\n\t              uv0.x+uv1.y+uv0.z, uv1.x+uv1.y+uv0.z);\n\tvec4 r = fract(sin(v*1e-1)*1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z)*1e-1)*1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z) * 2.0 - 1.0;\n}\n\nvec3 fireball (vec2 p) \n{\n\tfloat color1 = 2.8 - (2.0 * length(2.9 * p));\n\tvec3 coord = vec3(atan(p.x, p.y) / 6.2832 + 0.5, length(p) * 0.4, 0.5);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 0.5*(1.5 / power) * snoise1(coord + vec3(0.0, -0.05, -0.01), power * 16.0);\n\t}\n\tcolor1 *= 0.5;\n\treturn vec3( color1, pow(max(color1, 0.0), 3.0)*0.4, pow(max(color1, 0.0), 3.0) * 0.2);\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n        return fract(sin(dot(vec3(frame), vec3(12.9898,78.233,45.5432))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 randvals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randdir = normalize(randvals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randvals.xy - 0.8) * 2.0) / iResolution.x;\n    vec3 frontvec = normalize(vec3(-CAMERA_POS));\n    vec3 upvec = vec3(0, 1, 0);\n    vec3 rightvec = normalize(cross(frontvec, upvec));\n    upvec = normalize(cross(rightvec, frontvec));\n    vec3 viewvec = normalize(frontvec + rightvec * uv.x + upvec * uv.y);\n    vec3 curpos = CAMERA_POS;\n    vec3 curdir = viewvec;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    vec4 col = vec4(0, 0, 0, 0);\n    float n1 = AIR_N; \n    float n2 = GLASS_N;    \n    vec3 colormult = vec3(1, 1, 1);\n    for (int i = 0; i < 10; i++) {\n        float t = INF;\n        int material = EMISSION;\n        vec3 color, normal, planenormal;\n        float planeT = traceplane(curpos, curdir, planenormal);\n        if (planeT < t) {\n            t = planeT;\n            material = DIFFUSION;\n            vec3 spacepos = t * curdir + curpos;\n            color = texture(iChannel0, spacepos.xz * 0.2).rgb;\n            normal = planenormal;\n            \n        }\n        for (int j = 0; j < LIGHTS_NUM; j++) {\n            vec3 lightnormal;\n            float lightT = tracesphere(curpos - Lights[i].pos, curdir, Lights[i].radius, lightnormal);\n            if (lightT < t) {\n                t = lightT;\n                material = EMISSION;\n                color = Lights[i].color;\n                normal = lightnormal;\n            }\n        }        \n        vec3 cylnormal;\n        float cylT = tracecylinder(curpos, curdir, cylnormal);\n        if (cylT < t) {\n            vec3 spacepos = t * curdir + curpos;\n            t = cylT;\n            material = DIFFUSION;\n            color = texture(iChannel2, spacepos.xz * spacepos.y).rgb;\n            normal = cylnormal;\n        }        \n        vec3 cubenormal;\n        float cubeT = tracecube(curpos, curdir, cube, cubenormal);\n        if (cubeT < t) {\n            t = cubeT;\n            normal = cubenormal;\n            if (randvals.x < GLASS_R) {\n                material = REFLECTION;\n            } else {\n                colormult *= vec3(0.4, 0.7, 1);\n                material = REFRACTION;\n                vec2 p = (fragCoord.xy / iResolution.xy) - 0.5;\n                p.x *= iResolution.x / iResolution.y;\n                vec3 fb = fire(p);\n                vec3 fo = fireball(p);\n                col += vec4(mix(fb, fo * vec3(0.8, 0.5, 0.5), 0.7), 0.8);\n            }\n        }        \n        if (t != INF) {\n            vec3 spacepos = t * curdir + curpos;\n            col += vec4(texture(iChannel0, spacepos.xz).rgb * 0.1, 0.0);\n            if (material == EMISSION) {\n                col += vec4(color * colormult * 0.5, 0);\n                break;\n            } else if (material == DIFFUSION) {\n                col += vec4(computelight(spacepos, color, normal) * colormult, 0);\n                break;\n            } else if (material == REFLECTION) {\n                curdir = reflect(curdir, normal);\n                curpos = spacepos + curdir * 1e-3;\n            } else if (material == REFRACTION) {\n                curdir = refraction(curdir, normal, n1, n2);\n                curpos = spacepos + curdir * 1e-3;\n            }\n        } else {\n            col += vec4(texture(iChannel1, curdir).rgb * colormult * 0.2, 0);\n        }\n    }\n    fragColor = vec4(col);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}