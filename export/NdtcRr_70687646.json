{"ver":"0.1","info":{"id":"NdtcRr","date":"1652983025","viewed":261,"name":"Voronoi burning","username":"clauswilke","description":"Domain warping applied to Voronoi noise creates an interesting, flame-like pattern. The trick is to have a slightly different warping signal applied to each color channel.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","fbm"],"hasliked":0,"parentid":"ftBBDc","parentname":"Comparison of 2d noise functions"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Domain warping applied to Voronoi noise\n// Written by Claus O. Wilke, 2022\n// Noise functions were adapted from code written by Inigo Quilez\n// The MIT License\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// voronoi smoothness\nfloat voronoi_smooth = .05; // pick a number between 0 and about 1.2\n\nfloat hash(in vec2 p) {\n    ivec2 texp = ivec2(\n        int(mod(p.x, 256.)),\n        int(mod(p.y, 256.))\n    );\n    // return number between -1 and 1\n    return -1.0 + 2.0*texelFetch(iChannel0, texp, 0).x;\n}\n\nvec2 hash2(in vec2 p)\n{\n    // return numbers between -1 and 1\n    return vec2(hash(p), hash(p + vec2(32., 18.)));\n}\n\n// value noise\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/lsf3WH\nfloat noise1(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n\t\n\tvec2 u = f*f*(3.0 - 2.0*f);\n\n    return mix(mix(hash(i + vec2(0.0, 0.0)), \n                   hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), \n                   hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\n// voronoi\n// Inigo Quilez (MIT License)\n// https://www.shadertoy.com/view/ldB3zc\n// The parameter w controls the smoothness\nfloat voronoi(in vec2 x, float w)\n{\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n\tfloat dout = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2(float(i), float(j));\n        vec2 o = .5 + .5*hash2(n + g); // o is between 0 and 1\n\t\t\n        // distance to cell\t\t\n\t\tfloat d = length(g - f + o);\n        \n        // do the smooth min for distances\t\t\n\t\tfloat h = smoothstep(-1.0, 1.0, (dout - d)/w);\n\t    dout = mix(dout, d, h ) - h*(1.0 - h)*w/(1.0 + 3.0*w);\n    }\n\t\n\treturn dout;\n}\n\nfloat fbm1(in vec2 p, in int octaves)\n{\n    // rotation matrix for fbm\n    mat2 m = 2.*mat2(4./5., 3./5., -3./5., 4./5.);  \n     \n    float scale = 0.5;\n    float f = scale * noise1(p);\n    float norm = scale;\n    for (int i = 0; i < octaves; i++) {\n        p = m * p;\n        scale *= .5;\n        norm += scale;\n        f += scale * noise1(p);\n    }\n\treturn 0.5 + 0.5 * f/norm;\n}\n\nfloat voronoise(in vec2 p)\n{\n    return voronoi(p, voronoi_smooth);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    vec2 toff = .1*iTime*vec2(4., 2.);\n    \n    vec2 p = (.6 + .5*sin(.07*iTime))*vec2(4., 4.)*uv;\n        \n    vec2 r = vec2(fbm1(p + vec2(5., 2.), 4), fbm1(p + vec2(1., 4.), 4));\n    \n    vec3 col = 1.2*vec3(1.4, 1., .5) *\n        pow(vec3(\n            voronoise(p + 1.5*r + toff),\n            voronoise(p + 1.5*r + toff + .005*vec2(2., 4.)),\n            voronoise(p + 1.5*r + toff + .01*vec2(5., 1.))\n        ), vec3(1.5, 2.5, 2.9));\n             \n    col = s_curve(col);\n        \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// -----------------------------------------------\n\n// color correction\n// Taken from Matt Ebb (MIT license): https://www.shadertoy.com/view/fsSfDW\n// Originally from: https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\n\nvec3 s_curve(vec3 x)\n{\n    const float a = 2.51f;\n    const float b = 0.03f;\n    const float c = 2.43f;\n    const float d = 0.59f;\n    const float e = 0.14f;\n    x = max(x, 0.0);\n    return clamp((x*(a*x+b))/(x*(c*x+d)+e),0.0,1.0);\n}\n\n","name":"Common","description":"","type":"common"}]}