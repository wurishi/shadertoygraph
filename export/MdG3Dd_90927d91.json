{"ver":"0.1","info":{"id":"MdG3Dd","date":"1457545861","viewed":11190,"name":"Synaptic","username":"nimitz","description":"Storing positions allows for non parametric particle movement and working with velocities allows for multiple draws per frame, which in turns allows for better rendering.","likes":324,"published":1,"flags":32,"usePreview":0,"tags":["3d","particles","palette","feedback","trails","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Synaptic by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/MdG3Dd\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Code is in the other tabs:\n//Buf A = Particle velocity and position handling\n//Buf B = Rendering\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(texture(iChannel0, fragCoord.xy/iResolution.xy).rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Synaptic by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/MdG3Dd\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Velocity handling\n\nconst float initalSpeed = 10.;\n#define time iTime\n\nvec3 hash3(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.1);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z))-0.5;\n}\n\nvec3 update(in vec3 vel, vec3 pos, in float id)\n{   \n    vel.xyz = vel.xyz*.999 + (hash3(vel.xyz + time)*2.)*7.;\n    \n    float d = pow(length(pos)*1.2, 0.75);\n    vel.xyz = mix(vel.xyz, -pos*d, sin(-time*.55)*0.5+0.5);\n    \n    return vel;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    \n    vec4 col= vec4(0);\n    vec2 w = 1./iResolution.xy;\n    \n    vec3 pos = texture(iChannel0, vec2(q.x,100.*w)).xyz;\n    vec3 velo = texture(iChannel0, vec2(q.x,0.0)).xyz;\n    velo = update(velo, pos, q.x);\n    \n    if (fragCoord.y < 30.)\n    {\n    \tcol.rgb = velo;\n    }\n    else\n    {\n        pos.rgb += velo*0.002;\n        col.rgb = pos.rgb;\n    }\n\t\n    //Init\n    if (iFrame < 10) \n    {\n        if (fragCoord.y < 30.)\n        \tcol = ((texture(iChannel1, q*1.9))-.5)*10.;\n        else\n        {\n            col = ((texture(iChannel1, q*1.9))-.5)*.5;\n        }\n    }\n    \n\tfragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Synaptic by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/MdG3Dd\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//Rendering\n\n/*\n\tThis buffer renders each particles\n\tmultiple times per frame to allow particles\n\tto move more than one pixel per frame while still\n\tleaving a solid trail.\n*/\n\n#define time iTime\n\n//Anywhere under 900 \"should\" work fine (might slow down though)\nconst int numParticles = 140;\nconst int stepsPerFrame = 7;\n\nfloat mag(vec3 p){return dot(p,p);}\n\nvec4 drawParticles(in vec3 ro, in vec3 rd)\n{\n    vec4 rez = vec4(0);\n    vec2 w = 1./iResolution.xy;\n    \n    for (int i = 0; i < numParticles; i++)\n    {\n        vec3 pos = texture(iChannel0, vec2(i,100.0)*w).rgb;\n        vec3 vel = texture(iChannel0, vec2(i,0.0)*w).rgb;\n        for(int j = 0; j < stepsPerFrame; j++)\n        {\n            float d = mag((ro + rd*dot(pos.xyz - ro, rd)) - pos.xyz);\n            d *= 1000.;\n            d = .14/(pow(d,1.1)+.03);\n            \n            rez.rgb += d*abs(sin(vec3(2.,3.4,1.2)*(time*.06 + float(i)*.003 + 2.) + vec3(0.8,0.,1.2))*0.7+0.3)*0.04;\n            //rez.rgb += d*abs(sin(vec3(2.,3.4,1.2)*(time*.06 + float(i)*.003 + 2.75) + vec3(0.8,0.,1.2))*0.7+0.3)*0.04;\n            pos.xyz += vel*0.002*0.2;\n        }\n    }\n    rez /= float(stepsPerFrame);\n    \n    return rez;\n}\n\nvec3 rotx(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z);\n}\n\nvec3 roty(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(c*p.x + s*p.z, p.y, -s*p.x + c*p.z);\n}\n\nvec3 rotz(vec3 p, float a){\n    float s = sin(a), c = cos(a);\n    return vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z);\n}\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\t\n    vec2 q = fragCoord.xy/iResolution.xy;\n\tvec2 p = fragCoord.xy/iResolution.xy-0.5;\n\tp.x*=iResolution.x/iResolution.y;\n\tvec2 mo = iMouse.xy / iResolution.xy-.5;\n    mo = (mo==vec2(-.5))?mo=vec2(-0.15,0.):mo;\n\tmo.x *= iResolution.x/iResolution.y;\n    mo*=6.14;\n\t\n\tvec3 ro = vec3(0.,0.,2.5);\n    vec3 rd = normalize(vec3(p,-.5));\n    \n    vec4 cola = drawParticles(ro, rd);\n    vec4 colb = texture(iChannel1, q);\n    \n    //Feedback\n    vec4 col = cola + colb;\n    col *= 0.9975;\n    \n    if (iFrame < 5) col = vec4(0);\n    \n\tfragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"}]}