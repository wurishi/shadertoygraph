{"ver":"0.1","info":{"id":"4tfSWl","date":"1440450625","viewed":201,"name":"PT III - +/- color","username":"Piperoman","description":"PiperoTutorial 3. This test is about add and substract circles","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["test","learning","nolook"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Description: Mix colors drawing circles\n//\n\n////////////////////////////////////////////\n// \t\tFunction declaration\n////////////////////////////////////////////\nvoid drawSmoothCircle(inout vec3 pixel, in vec2 r, in vec2 center, in float radius, in float lineThickness, in bool inside, in vec3 color, in int operation);\nvoid drawRaw(inout vec3 pixel, in vec2 r, in vec2 p, in vec3 backgroundColor, in vec3 color1, in vec3 color2, in vec3 color3);\nvoid drawAddition(inout vec3 pixel, in vec2 r, in vec2 p, in vec3 backgroundColor, in vec3 color1, in vec3 color2, in vec3 color3);\nvoid drawSubstraction(inout vec3 pixel, in vec2 r, in vec2 p, in vec3 backgroundColor, in vec3 color1, in vec3 color2, in vec3 color3);   \n\n////////////////////////////////////////////\n// \t\tFunction implementation\n////////////////////////////////////////////\n/**\n* A function that providing a pixel, draw a circle with color using parameters and mix value as:\n* Operation = 0, set\n*\t\t\t> 0, add\n* \t\t\t< 0, substract\n*/\nvoid drawSmoothCircle(inout vec3 pixel, in vec2 r, in vec2 center, in float radius, in float lineThickness, in bool inside, in vec3 color, in int operation) \n{\n    float value;\n    if(inside)\n    {\n        // Inside a circle\n        value = 1.0 - smoothstep( radius-lineThickness, radius+lineThickness, length(r-center));\n    }\n    else\n    {\n        // Out of a circle\n        value = smoothstep( radius-lineThickness, radius+lineThickness, length(r-center));\n    }\n    if(operation == 0)\n    {\n        pixel = mix(pixel, color, value);\n    }\n    else if(operation > 0)\n    {\n        pixel += value * color;\n    }\n    else if(operation < 0)\n    {\n        pixel -= value * color;\n    }\n}\n\nvoid drawRaw(inout vec3 pixel, in vec2 r, in vec2 p, in vec3 backgroundColor, in vec3 color1, in vec3 color2, in vec3 color3)\n{\n    float d;\n    \n    pixel = backgroundColor;\t// Draw background\n\n    drawSmoothCircle(pixel, r, vec2(-1.1, 0.3), 0.4, 0.1, true, color1, 0);\t\t\t// Up\n    drawSmoothCircle(pixel, r, vec2(-1.3, 0.0), 0.4, 0.005, true, color2, 0);\t\t// Middle\n    drawSmoothCircle(pixel, r, vec2(-1.05, -0.3), 0.4, 0.005, true, color3, 0); \t// Down\n}\n\n// Color addition\n// This is how lights of different colors add up\n// http://en.wikipedia.org/wiki/Additive_color\n// If a pixel is equal or higher than 1.0 it becomes white.\nvoid drawAddition(inout vec3 pixel, in vec2 r, in vec2 p, in vec3 backgroundColor, in vec3 color1, in vec3 color2, in vec3 color3)\n{\n    float d;\n    \n    pixel = backgroundColor;\t// Draw background\n\n    drawSmoothCircle(pixel, r, vec2(0.1,0.3), 0.4, 0.1, true, color1, 1);\t\t\t// Up\n    drawSmoothCircle(pixel, r, vec2(-.1,0.0), 0.4, 0.005, true, color2, 1);\t\t\t// Middle\n    drawSmoothCircle(pixel, r, vec2(.15,-0.3), 0.4, 0.005, true, color3, 1); \t\t// Down\n}\n\n// Color substraction\n// This is how dye of different colors add up\n// http://en.wikipedia.org/wiki/Subtractive_color\nvoid drawSubstraction(inout vec3 pixel, in vec2 r, in vec2 p, in vec3 backgroundColor, in vec3 color1, in vec3 color2, in vec3 color3)\n{\n    float d;\n    \n    pixel = backgroundColor;\t// Draw background\n\n    drawSmoothCircle(pixel, r, vec2(1.1,0.3), 0.4, 0.1, true, color1, -1);\t\t\t\t// Up\n    drawSmoothCircle(pixel, r, vec2(1.05,0.0), 0.4, 0.005, true, color2, -1);\t\t\t// Middle\n    drawSmoothCircle(pixel, r, vec2(1.35,-0.25), 0.4, 0.005, true, color3, -1); \t\t// Down\n}\n\n////////////////////////////////////////////\n// \t\tMAIN\n////////////////////////////////////////////\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = vec2(fragCoord.xy / iResolution.xy);\n\tvec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\tfloat xMax = iResolution.x/iResolution.y;\t\n\t\n\tvec3 blackColor = vec3(0.0);\n\tvec3 whiteColor = vec3(1.0);\n\tvec3 grayColor = vec3(0.3);\n\tvec3 blueColor = vec3(0.216, 0.471, 0.698); \n\tvec3 redColor = vec3(1.00, 0.329, 0.298); \n\tvec3 yellowColor = vec3(0.867, 0.910, 0.247);\n\t\n\tvec3 pixel;\n\t\n\tif(p.x < 1./3.) \t\t// Part I\n    { \n\t\tdrawRaw(pixel, r, p, blackColor, blueColor, redColor, yellowColor);\n\t} \n\telse if(p.x < 2./3.) \t// Part II\n    { \n        drawAddition(pixel, r, p, grayColor, blueColor, redColor, yellowColor);\n\t} \n\telse if(p.x < 3./3.) \t// Part III\n    { \n        drawSubstraction(pixel, r, p,  whiteColor, blueColor, redColor, yellowColor);\n\t}\n\t\n\tfragColor = vec4(pixel, 1.0);\n}","name":"","description":"","type":"image"}]}