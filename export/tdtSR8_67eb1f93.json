{"ver":"0.1","info":{"id":"tdtSR8","date":"1571782718","viewed":309,"name":"Dancing Polar Coordinates","username":"adrenoide","description":"Linear interpolation between three polar curves","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["polarcoordinates"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 4. * atan(1.);\n\nfloat phi(float x) {\n\tfloat s = sin(pi * x);\n    return s*s;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 p = U / iResolution.x;\n    \n    p -= vec2 (0.5, 0.3);\n    p *= 5.;\n    \n    // Polar coordinates with rotating\n    // polar axis\n    float r = length (p);\n    float t = atan(p.y, p.x) - iTime / 2.;\n\n    // coefft in [0,1], smoothly varying in time\n    float w = phi(iTime / 6.);\n    \n    // 3 polar curves\n    float c0 = 1. + cos(t) * cos(3.*t);\n    float c1 = 1. + cos(t) - cos(2.*t);\n    float c2 = cos(t) * cos(t) * cos(3.*t);\n    \n    // linear interpolation between the 3 curves\n    float c = (2.*w-1.)*(w-1.)*c0 +\n        \t  4.*w*(1.-w)*c1 +\n        \t  w*(2.*w-1.)*c2;\n    \n    float e = smoothstep (-.1, .1, abs(r - c));\n    \n    vec4 tex = texture(iChannel0, p / 5.);\n    \n\tO = tex * vec4(vec3(e), 1.) *\n        vec4(mix(vec3(phi(iTime/2.), phi(iTime/3.), phi(iTime/5.)),\n                 vec3(phi(iTime/5.), phi(iTime/2.), phi(iTime/3.)), phi(iTime / 10.)), 1.)\n        + vec4(vec3(1. - e), 1.);\n}","name":"Image","description":"","type":"image"}]}