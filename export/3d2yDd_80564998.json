{"ver":"0.1","info":{"id":"3d2yDd","date":"1587598854","viewed":46,"name":"Ambient Occlusion_HaoyuSui","username":"HaoyuSui","description":"Ambient Occlusion","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ambientocclusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\n\nconst int AO_SAMPLES = 256;\nconst float AO_DIST = 0.15;\nconst float FIVETAP_K = 2.0;\n\nconst float HALF_PI = 3.14159 * 0.5;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n    \n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\n\n\nvoid sceneMap3D(vec3 pos, out float t, out int hitObj, vec3 lightPos)\n{\n    // back wall\n    t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));  \n    hitObj = 0;  // 0 is the back wall\n    \n    float t2;\n    \n    if((t2 = plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))) < t)  // right wall\n    {\n        t= t2;\n        hitObj = 1;\n    } \n    if((t2 = plane(pos, vec4(1.0, 0.0, 0.0, 5.0))) < t)  // left wall\n    {\n        t= t2;\n        hitObj = 2;\n    }\n    if((t2 = plane(pos, vec4(0.0, -1.0, 0.0, 7.5))) < t)  // celling \n    {\n        t= t2;\n        hitObj = 3;\n    }\n    if((t2 = plane(pos, vec4(0.0, 1.0, 0.0, 2.5))) < t)  // floor\n    {\n        t= t2;\n        hitObj = 4;\n    }\n    if((t2 = box(rotateY(pos + vec3(-2.2, 0.5, -3), -27.5 * 3.14159 / 180.0), vec3(1.5, 3.0, 1.5))) < t)  // large box\n    {\n        t= t2;\n        hitObj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(2.2, 0.5, -3), 27.5 * 3.14159 / 180.0), vec3(1.5, 1.5, 1.5))) < t)  // small box\n    {\n        t= t2;\n        hitObj = 6;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    \n    t = min(t, plane(pos, vec4(-1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(1.0, 0.0, 0.0, 5.0)));\n    t = min(t, plane(pos, vec4(0.0, -1.0, 0.0, 7.5)));\n    t = min(t, plane(pos, vec4(0.0, 1.0, 0.0, 2.5)));\n    t = min(t, box(rotateY(pos + vec3(-2.2, 0.5, -3), -27.5 * 3.14159 / 180.0), vec3(1.5, 3.0, 1.5)));\n    t = min(t, box(rotateY(pos + vec3(2.2, 0.5, -3), 27.5 * 3.14159 / 180.0), vec3(1.5, 1.5, 1.5)));\n    \n    return t;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    // No intersection\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightDir, vec3 view)\n{\n    switch(hitObj)\n    {\n        case 0:  // back wall\n        vec3 color0 = vec3(1.0, 1.0, 1.0) * dot(lightDir, n);\n        return color0;\n        break;\n        \n        case 1:  // right wall \n        vec3 color1 = vec3(1.0, 0.0, 0.0) * dot(lightDir, n);\n        return color1;\n        break;\n        \n        case 2:  // left wall\n        vec3 color2 = vec3(0.0, 1.0, 0.0) * dot(lightDir, n);\n        return color2;\n        break;\n        \n        case 3:  // celling\n        vec3 color3 = vec3(1.0, 1.0, 1.0) * dot(lightDir, n);\n        return color3;\n        break;\n        \n        case 4:  // floor\n        vec3 color4 = vec3(1.0, 1.0, 1.0) * dot(lightDir, n);\n        return color4;\n        break;\n        \n        case 5:  // large box\n        vec3 color5 = vec3(1.0, 1.0, 1.0) * dot(lightDir, n);\n        return color5;\n        break;\n        \n        case 6:  // small box\n        vec3 color6 = vec3(1.0, 1.0, 1.0) * dot(lightDir, n);\n        return color6;\n        break;\n        \n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n        \n    }\n    return vec3(0.0);\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n\tfloat t;\n    int hitObj;\n    \n    march(eye, dir, t, hitObj, lightPos);\n    \n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    float ao = fiveTapAO(isect, nor, FIVETAP_K);\n    \n    vec3 surfaceColor = ao * computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    //vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref)\n{\n    \n    eye = vec3(0.0, 3.0, -15.0);\n    ref = vec3(0.0, 3, 0.0);\n    \n    vec3 look = normalize(ref - eye);\n    vec3 right = normalize(cross(look, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, look);\n    \n    float tanFovV = tan(3.14159 * 0.125);\n    float len = distance(ref, eye);\n    float aspect = float(iResolution.x) / float(iResolution.y);\n    \n    vec3 V = up * len * tanFovV;\n    vec3 H = right * len * aspect * tanFovV;\n    \n    vec3 p =ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Light\n\tvec3 lightPos = vec3(0.0, 7.3, -1.0);\n    \n    //Normalized pixel coordinate (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    //[-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    vec3 dir, eye, ref;\n    // Cast ray\n    raycast(uv2, dir, eye, ref);\n    \n    // Intersection\n    Intersection isect;\n    \n    isect = sdf3D(dir, eye, lightPos);\n    \n\t \n    \n    //Output color\n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}