{"ver":"0.1","info":{"id":"mtGyRm","date":"1700039697","viewed":60,"name":"Glowing rhombus","username":"Ahriixi","description":"This is my second shader and I'm basically just playing around with math. This is the result out of it!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","rhombus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318\n\nvec3 palette(float t)\n{\n    vec3 a = vec3(0.246, 0.991, 0.839);\n    vec3 b = vec3(0.346, 0.214, 0.402);\n    vec3 c = vec3(0.995, 1.405, 1.426);\n    vec3 d = vec3(4.016, 4.874, 2.634);\n\n    return a+b*cos(TAU*(c*t*d));\n} \n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdRhombus( in vec2 p, in vec2 b ) \n{\n    p = abs(p);\n    float h = clamp( ndot(b-2.0*p,b)/dot(b,b), -1.0, 1.0 );\n    float d = length( p-0.5*b*vec2(1.0-h,1.0+h) );\n    return d * sign( p.x*b.y + p.y*b.x - b.x*b.y );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(.0);\n    \n    float frequency = 8.;\n    \n    for(float i = .0; i < 2.; i++){\n    \n        vec2 a = vec2(.4,.2);\n        \n        uv = fract(uv*1.5)-.5;\n\n        float romb = sdRhombus(uv,a);\n\n        float d = abs(romb);\n\n        d *= sin(d * frequency + iTime*frequency/4.);\n        \n        d = abs(d);\n\n        d *= .5;\n        \n        d = abs(d);\n\n        float k = (.015/d)*.1;\n        \n        d = smoothstep(.25,.35,k*d*.25);\n\n        vec3 c = palette(length(uv0));\n\n        finalColor  += c*k;\n    \n    }\n    fragColor = vec4(finalColor,1.);\n}","name":"Image","description":"","type":"image"}]}