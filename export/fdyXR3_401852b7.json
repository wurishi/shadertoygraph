{"ver":"0.1","info":{"id":"fdyXR3","date":"1635159689","viewed":87,"name":"Androids marching","username":"boldo","description":"raymarching Androids. Use Mouse to move camera around :) \nHave fun.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"fsySzK","parentname":"Fork BOLDODROID boldo 273"},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 50.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    return length(p-c)-r;\n}\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.);\n    \n    return e+i;\n}\n\nfloat sdTorus(vec3 p, vec2 r) {\n\tfloat x = length(p.xz)-r.x;\n    return length(vec2(x, p.y))-r.y;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdRoundedCylinder( vec3 p, float ra, float rb, float h )\n{\n  vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n  vec3  ba = b - a;\n  vec3  pa = p - a;\n  float baba = dot(ba,ba);\n  float paba = dot(pa,ba);\n  float x = length(pa*baba-ba*paba) - r*baba;\n  float y = abs(paba-baba*0.5)-baba*0.5;\n  float x2 = x*x;\n  float y2 = y*y*baba;\n  float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n  return sign(d)*sqrt(abs(d))/baba;\n}\n\nvec4 opUnionColor(vec4 a, vec4 b) {\n    return (a.w<b.w) ? a : b;\n}\n\nvec4 GetDist(vec3 p) {\n    float plane = p.y;\n    //float box = sdBox(p-vec3(0,1,0), vec3(1));\n    float d = MAX_DIST;\n    \n    p += vec3(0.,0.,-4) * fract(iTime * 0.1);\n    \n    vec3 c = vec3(4.,0,4.);\n    p = mod(p+0.5*c,c)-0.5*c;\n    \n    //legs\n    {\n        float angleL = sin(3.14 + iTime * 3.) * 0.9 + 1.8f;\n        float angleR = sin(       iTime * 3.) * 0.9 + 1.8f;\n        float rightLeg = sdCapsule(p, vec3(-.2, .4 - sin(angleR) * 0.3, cos(angleR) * 0.3), vec3(-.2, .4, 0), .1);\n        float leftLeg = sdCapsule(p,  vec3( .2, .4 - sin(angleL) * 0.3, cos(angleL) * 0.3), vec3( .2, .4, 0), .1);\n        d=min(d, leftLeg);\n        d=min(d, rightLeg);\n    }\n    \n    //body\n    {\n        float body = sdRoundedCylinder(p - vec3(0, .9, 0), .2, .1, .3);\n        d=min(d, body);\n    }\n    \n    //arms\n    {\n        float angleL = sin(3.14 + iTime * 3.) * 0.9 + 1.8f;\n        float angleR = sin(       iTime * 3.) * 0.9 + 1.8f;\n        float rightArm = sdCapsule(p, vec3(-.5, 1.2-sin(angleR) * 0.4, cos(angleR) * 0.4), vec3(-.5, 1.2, 0), .1);\n        float leftArm = sdCapsule(p,  vec3( .5, 1.2-sin(angleL) * 0.4, cos(angleL) * 0.4), vec3( .5, 1.2, 0), .1);\n        d=min(d, leftArm);\n        d=min(d, rightArm);\n    }\n    \n    //head\n    {\n        // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n        float fft  = texelFetch( iChannel0, ivec2(0.2,0), 0 ).x; \n    \n        float c = cos(fft*.2 - .1);\n        float s = sin(fft*.2 - .1);\n\n        mat4 rot = mat4(\n            vec4(1, 0, 0, 0),\n            vec4(0, c, -s, 0),\n            vec4(0, s, c, 0),\n            vec4(0, 0, 0, 1)\n        );\n        vec3 q = (rot * vec4(p, 1.0)).xyz ;\n\n        \n        float box = sdBox(q- vec3(0,1.75,0), vec3(1.,.4,1.));\n        //d = min(d,box);\n        float head = max(length(q-vec3(0,1.40,0)) - .4, box);\n        \n        //float bottomheadbox = sdBox(p-vec3(0,1.35,0), vec3(1.,.05,1.));\n        //float bottomhead = max(bottomheadbox, sdRoundedCylinder(p - vec3(0,1.45,0), .2, .1, .05));\n        \n        d = min(d, head);// - (sin(iTime)*0.5 + 0.5) * .1;\n        \n        float angleL = sin(3.14 + iTime * 6.) * 0.1 + 1.6f;\n        float angleR = sin(       iTime * 6.) * 0.1 + 1.6f;\n        \n        float ear = sdCapsule(q, vec3(-.1,1.70,0), vec3(-.2,1.4 + sin(angleL) * 0.6,cos(angleL) * 0.6), .03);\n        d = opSmoothUnion(d, ear, .25);\n        \n        ear = sdCapsule(q, vec3(.1,1.70,0), vec3(.2,1.4 + sin(angleR) * 0.6,cos(angleR) * 0.6), .03);\n        d = opSmoothUnion(d, ear, .25);\n        \n        d = max(d, -sdCappedCylinder(q, vec3(-.15, 1.55, .2), vec3(-.15, 1.55, 1), .03));\n        d = max(d, -sdCappedCylinder(q, vec3(.15, 1.55, .2), vec3(.15, 1.55, 1), .03));\n    }\n    \n    return opUnionColor(vec4(vec3(.7,.7,.7), plane) , vec4(vec3(0.,1.,0.), d));\n}\n\nfloat RayMarch(vec3 ro, vec3 rd, inout vec3 color) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        if (dO>MAX_DIST) \n            break;\n    \t\n        vec3 p = ro + rd*dO;\n        vec4 dS = GetDist(p);\n        if (dS.w < SURF_DIST) {\n            color = dS.rgb;\n            break;\n        }\n        dO += dS.w *.8;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).w;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).w,\n        GetDist(p-e.yxy).w,\n        GetDist(p-e.yyx).w);\n    \n    return normalize(n);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    for( float t=mint; t<maxt; )\n    {\n        float h = GetDist(ro + rd*t).w;\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h;\n    }\n    return res;\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(8, 10, 8);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    vec3 color = vec3(0.);\n    \n    \n    //float d = RayMarch(p+n*SURF_DIST*2., l, color);\n    //if(p.y<.01 && d<length(lightPos-p)) dif *= .5;\n    \n    dif = clamp( dot( n, l ), 0.0, 1.0 ) *\n                    softshadow( p+n*SURF_DIST*2., l, 0.01, 6.0, 16. );\n\n    \n    //float shadow = softshadow(p+n*SURF_DIST*2., l, 0.01, 6.0, 32.);\n    //dif *= shadow;\n    \n    return dif;\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 4, -1);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = R(uv, ro, vec3(0,1,0), 1.);\n    vec3 color = vec3(0.);\n    float d = RayMarch(ro, rd,color);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \n    \tfloat dif = GetLight(p);\n        vec3 c = vec3(4,0,4);\n        \n        //vec3 q = p + vec3(0.,0.,-4) * fract(iTime * 0.1);\n        //q = q - mod(q+0.5*c,c)-0.5*c;\n        //vec3 baseColor = q*0.1;\n        vec3 baseColor = color;\n        \n        vec3 m = mix(vec3(1,.5,0), baseColor, 1. - (dot(rd, GetNormal(p))*.5 + .5 ));\n    \tcol = m * dif;\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}