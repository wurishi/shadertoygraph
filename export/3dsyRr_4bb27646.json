{"ver":"0.1","info":{"id":"3dsyRr","date":"1584020104","viewed":108,"name":"Grid by Alex","username":"anascim","description":"basic grid using smoothstep and a texture for filling up squares","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// [NOT USED]\nfloat vsmoothline(vec2 st, float pct, float w, float aa)\n{\n\treturn smoothstep(pct-aa-w/2., pct-w/2., st.x) * smoothstep(pct+aa+w/2., pct+w/2., st.x);\n}\n\n// [NOT USED]\nfloat hsmoothline(vec2 st, float pct, float h, float aa)\n{\n\treturn smoothstep(pct-aa-h/2., pct-h/2., st.y) * smoothstep(pct+aa+h/2., pct+h/2., st.y);\n}\n\n// [NOT USED]\n// Less efficient grid example\nfloat forgrid(vec2 st, int rows, int cols, float w, float aa)\n{\n\tfloat value = 0.0;\n    float roffset = 1./float(rows);\n    float coffset = 1./float(cols);\n    for (int i = 0; i <= cols; i ++)\n    {\n        value = max(vsmoothline(st, float(i)*coffset, w, aa), value);\n    }\n    \n    for (int i = 0; i <= rows; i ++)\n    {\n        value = max(hsmoothline(st, float(i)*roffset, w, aa), value);\n    }\n    return value;\n}\n\n// [NOT USED]\n// Curious 3D slotlike effect\nfloat gridslots(vec2 st, int rows, int cols, float w, float aa)\n{\n    st.x *= float(cols);\n    st.y *= float(rows);\n    \n    st = fract(st);\n    \n    float value = max(st.x , st.y);\n    return value;\n}\n\nfloat wrapgrid(vec2 st, int rows, int cols, float w, float aa, sampler2D sampler)\n{\n    \n    vec2 texCoord = st * vec2(cols, rows)/vec2(textureSize(sampler,0));\n    \n    st.x *= float(cols);\n    st.y *= float(rows);\n    \n    st = fract(st);\n    \n    float value = smoothstep(1.-w/2.-aa, 1.-w/2., st.x);\n    value = max(smoothstep(1.-w/2.-aa, 1.-w/2., 1.-st.x), value);\n    value = max(smoothstep(1.-w/2.-aa, 1.-w/2., st.y), value);\n    value = max(smoothstep(1.-w/2.-aa, 1.-w/2., 1.-st.y), value);\n    \n    float tone = texture(sampler, texCoord).r;\n    return max(value, tone);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    int cols = 16;\n    int rows = 10;\n    vec3 colorMultiplier = vec3(0.8, 0.5, 0.2);\n    \n    float gridx = (uv.x/float(cols)) * iResolution.x;\n    \n    float grid = wrapgrid(uv, rows, cols, 0.2, 0.01, iChannel1);\n\t\n    vec3 imgRes = iChannelResolution[0];\n    float greyscale = texture(iChannel1, vec2(uv)).x;\n    \n    vec3 color = vec3(vec3(grid) * colorMultiplier);\n    // Output to screen\n    fragColor = vec4(color ,1.0);\n}","name":"Image","description":"","type":"image"}]}