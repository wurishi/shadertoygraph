{"ver":"0.1","info":{"id":"mltBzM","date":"1701102229","viewed":44,"name":"beautiful star with particles","username":"nayk","description":"beautiful, stars,particles","likes":3,"published":1,"flags":1,"usePreview":0,"tags":["particles","stars","beautiful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/cttXRl https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/MlfcDN*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000 \n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n#define R(p,a,r) mix(a*dot(p,a),p,cos(r)) + sin(r)*cross(p,a)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvec3 color(float t) {\n  vec3 c1 = vec3(1.0, 0.0, 0.0);\n  vec3 c2 = vec3(0.0, 1.0, 0.0);\n  vec3 c3 = vec3(0.0, 0.0, 1.0);\n  vec3 c4 = vec3(1.0, 1.0, 0.0);\n  vec3 c5 = vec3(1.0, 0.0, 1.0);\n  vec3 c6 = vec3(0.0, 1.0, 1.0);\n\n  float r = cos(t) * 0.5 + 0.5;\n  if (r < 0.23) return mix(c1, c2, r * 5.0);\n  if (r < 0.44) return mix(c2, c3, (r - 0.2) * 5.0);\n  if (r < 0.65) return mix(c3, c4, (r - 0.4) * 5.0);\n  if (r < 0.86) return mix(c4, c5, (r - 0.6) * 5.0);\n  return mix(c5, c6, (r - 0.8) * 7.0);\n}\n#define R(p,a,r) mix(a*dot(p,a),p,cos(r)) + sin(r)*cross(p,a)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nvec3 color2(float t) {\n  vec3 c1 = vec3(1.0, 0.0, 0.0);\n  vec3 c2 = vec3(0.0, 1.0, 0.0);\n  vec3 c3 = vec3(0.0, 0.0, 1.0);\n  vec3 c4 = vec3(1.0, 1.0, 0.0);\n  vec3 c5 = vec3(1.0, 0.0, 1.0);\n  vec3 c6 = vec3(0.0, 1.0, 1.0);\n\n  float r = cos(t) * 0.5 + 0.5;\n  if (r < 0.23) return mix(c1, c2, r * 5.0);\n  if (r < 0.44) return mix(c2, c3, (r - 0.2) * 5.0);\n  if (r < 0.65) return mix(c3, c4, (r - 0.4) * 5.0);\n  if (r < 0.86) return mix(c4, c5, (r - 0.6) * 5.0);\n  return mix(c5, c6, (r - 0.8) * 7.0);\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n\t//get coords and direction\n\tvec3 dir=rd;\n\tvec3 from=ro;\n\t\n\t//volumetric rendering\n\tfloat s=0.1,fade=1.;\n\tvec3 v=vec3(0.);\n\tfor (int r=0; r<volsteps; r++) {\n\t\tvec3 p=from+s*dir*.5;\n\t\tp = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\n\t\tfloat pa,a=pa=0.;\n\t\tfor (int i=0; i<iterations; i++) { \n\t\t\tp=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));// the magic formula\n\t\t\ta+=abs(length(p)-pa); // absolute sum of average change\n\t\t\tpa=length(p);\n\t\t}\n\t\t\n\t\ta*=a*a; // add contrast\n\t\tif (r>6) fade*=1.2; // dark matter, don't render near\n\t\t//v+=vec3(dm,dm*.5,0.);\n\t\tv+=fade;\n\t\tv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\n\t\tfade*=distfading; // distance fading\n\t\ts+=stepsize;\n\t}\n\tv=mix(vec3(length(v)),v,saturation); //color adjust\n\tfragColor = vec4(v*.01,1.);\t\n}\nfloat beautiful_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\nfloat noise( vec2 co ){\n    return fract( sin( dot( co.xy, vec2( 12.9898, 78.233 ) ) ) * 43758.5453 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//get coords and direction\n\tvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\tuv.y*=iResolution.y/iResolution.x;\n\tvec3 dir=vec3(uv*zoom,iTime*0.01);\n\tfloat time=iTime*speed+.25;\n float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(dir.xy) + .07)) * 2.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n  \nvec4 O= fragColor;\nvec2 C= fragCoord;\n   \n\tfragColor = vec4(0);\n    vec3 p, r = iResolution, d = normalize(vec3((fragCoord-.5*r.xy)/r.y,0.7));  \n    O=vec4(0);\n    \n    float u_brightness = 1.2;\n    float u_blobiness = 1.2;\n    float u_particles = 140.0;\n    float u_limit = 70.0;\n    float u_energy = 2.0 * 1.75;\n\n    vec2 position = ( fragCoord.xy / iResolution.x );\n    float t2 = iTime * u_energy;\n    \n    float a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n\n\n\n    vec2 pos;\n//    vec2 center = iResolution.xy * 0.0;\n\n    vec2 center = vec2( 0.5, 0.5 * (iResolution.y / iResolution.x) );\n\n    float na, nb, nc, nd, d2;\n    float limit = u_particles / u_limit;\n    float step = 1.0 / u_particles;\n    float n = 0.0;\n    \n    for ( float i = 0.0; i <= 1.0; i += 0.025 ) {\n\n        if ( i <= limit ) {\n\n            vec2 np = vec2(n, 1-1);\n            \n            na = noise( np * 1.1 );\n            nb = noise( np * 2.8 );\n            nc = noise( np * 0.7 );\n            nd = noise( np * 3.2 );\n\n            pos = center;\n            pos.x += sin(t2*na) * cos(t2*nb) * tan(t2*na*0.15) * 0.3;\n            pos.y += tan(t2*nc) * sin(t2*nd) * 0.1;\n            \n            d2 = pow( 1.6*na / length( pos - position ), u_blobiness );\n            \n            a += d2*0.1;\n            b += d2*0.1;\n           c += d2*0.1;\n\n\n            n += step;\n        }\n    }\n\n   vec3 col = vec3(a*c,b*c,a*b) * 0.0001 * u_brightness;\n \n    \n    \n    vec3 p2,q,r2=iResolution,\n    d3=normalize(vec3((C*2.-r2.xy)/r2.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p2=g*d3;\n        p2.z+=iTime*6.5;\n        a=10.;\n        p2=mod(p2-a,a*2.)-a;\n        s=15.;\n         \n        for(int i=0;i++<8;){\n            p2=.3-abs(p2);\n           \n            p2.x<p2.z?p2=p2.zyx:p2;\n            p2.z<p2.y?p2=p2.xzy:p2;\n            p2.y<p2.x?p2=p2.zyx:p2;\n            \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p2=abs(p2)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 );\n         }\n    \n         g+=e=length(p2.yx)/s;\n    }\n       uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n     \n   \n    // anim between 0.9 - 1.1\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0; \n    for(float i = 0., g = 0., e, s; i < 99.; ++i)\n    {\n        p = g * tan(d);\n        p.z -= 1.60;\n        p = R(p, normalize(vec3(1,2,3)), iTime * 0.0);\n        \n        s = 4.;\np.z+=0.2*fract(iTime);\n        for(int j = 0; j++ < 14;)\n        {\n            p = abs(p);\n            p = p.x < p.y ? p.zxy : p.zyx;\n            s *= e = 1.8 / min(dot(p, p), 1.3);\n            p = p * e - vec3(15,3,2);\n        }\n\n        g += e = length(p.xz) / s;\n        fragColor.rgb += color2(iTime * 0.1 + cos(i)) * mix(r / r, H(log(s)), 0.7) * 0.08 * exp(-i * i * e);\n    }\n    \n\tvec3 from=vec3(1.,.5,0.5)*fragColor.xyz*O.xyz;\n\tfrom+=vec3(time*2.,time,-2.);\n\t\n\t\n\tmainVR(fragColor, fragCoord, from, dir);\t\n    fragColor+=vec4(beautiful_star(uv,anim) * vec3(0.35,0.5,0.55)*0.4,1.);\n    fragColor+= vec4( col, 1.0 );\n    \n}\n","name":"Image","description":"","type":"image"}]}