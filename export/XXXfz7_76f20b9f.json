{"ver":"0.1","info":{"id":"XXXfz7","date":"1728152577","viewed":48,"name":"Sabonete - test01","username":"Elsio","description":"Talvez eu ainda não tenha entendido a técnica por completo.  ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["domainrepetition","pistons"],"hasliked":0,"parentid":"Wl3fD2","parentname":"Perfect Pistons Example 3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define h21(p) fract(sin(dot(p, vec2(13, 11))))\n#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define t iTime\n#define FAR 20.\n\nfloat extrusion(float p, float pz, float h) {\n    vec2 q = vec2(p, abs(pz) - h);\n    return min(max(q.x, q.y), 0.) + length(max(q, 0.));\n}\n\n\nfloat Box(vec2 p, vec2 b, float sf) {\n    vec2 q = abs(p) - b + sf;\n    return min(max(q.x, q.y), 0.) + length(max(q, 0.)) - sf;\n}\n\n\nfloat soap(vec3 q){\n    vec2 scale = vec2(1. / 6., 1. / 7.);\n    float box = Box(q.xy, scale - .02, .05);\n    return\n            extrusion(\n                box,\n                q.z,\n                scale.y / 2. - .03\n            )\n            + tanh(sin(box / min(scale.x, scale.y) * TAU * 4.) * 3.) * .003 \n            + box * .25\n            ;\n}\n\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a) * step(a.zxy, a) * sign(p);\n}\n\n\nfloat box(vec2 p, vec2 b) {\n    vec2 d = abs(p) - b;\n    return min(max(d.x, d.y), 0.) + length(max(d, 0.));\n}\n\n\nfloat map(vec3 p) {\n    vec3 k = p;\n\n    p.xz *= rot(cos(t * .2) * .6);\n    p.zy *= rot(cos(t * .3) * .5);\n    \n    vec3 sc = 1. / vec3(1.2, 1.3, 11);\n    //vec3 sc = vec3(.8);\n    vec3 id = floor(p / sc) - .5;\n    vec3 q = p;\n    \n    q.xy = fract(p.xy / sc.xy) - .5;\n    q.xy *= sc.xy;\n    \n    vec3 neig = id + face(p - id);\n\n    q.yz *= rot(PI * t * max(h21(id.xy), h21(id.xy + 1.)));\n    q.zx *= rot(.8 * PI * t * max(h21(id.xy + 2.), h21(id.xy + 3.)));\n    \n    vec3 P = p - neig;\n         P = vec3(length(P.xz), P.y, 0);\n    \n    float b, \n          tu = soap(P * .365),\n          me = soap(q * .365);\n    \n    return min(me, tu);\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float d, s, i;\n    \n    while(i++ < 164.) {\n        s = map(ro + d * rd);\n        if(abs(s) < .001 || d > FAR) break;\n        d += s;\n    }\n    \n    return min(d, FAR);\n}\n\nvec3 normal(vec3 p) {\n    vec3 e = vec3(.001, 0, 0);\n    vec3 v = vec3(\n                 map(p - e.xyy),\n                 map(p - e.yxy),\n                 map(p - e.yyx)\n             ) - map(p);\n    return normalize(-v);\n}\n\n\nfloat calcAO(vec3 p, vec3 n) {\n    float i, sca = 4., occ;\n    \n    while(i++ < 5.) {\n        float hr = i * .15 / 5.;\n        float d = map(p + n * hr);\n        occ += (hr - d) * sca;\n        sca *= .7;\n    }\n    \n    return clamp(1. - occ, 0., 1.);\n}\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 r = iResolution.xy;\n    u = (u - r / 2.) / r.y;\n    \n    vec3 ro = vec3(0, 0, -6),\n         D = normalize(vec3(u, 3));\n    \n    float d = march(ro, D);\n    \n    o = vec4(0);\n    if(d < FAR) {\n        vec3 p = ro + d * D,\n             N = normal(p);\n        o = vec4(length(sin(N) * .45 + .45)) * calcAO(p, N);\n    }\n}","name":"Image","description":"","type":"image"}]}