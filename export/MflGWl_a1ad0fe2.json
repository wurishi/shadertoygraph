{"ver":"0.1","info":{"id":"MflGWl","date":"1703692473","viewed":43,"name":"christmas tree and snow","username":"nayk","description":"chrismas tree","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rotate","tree","disco","semapfore"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*originals https://www.shadertoy.com/view/Mcf3Wf https://www.shadertoy.com/view/DtGfWt and other*/\n\n#define M_PI 3.1415926535897932384626433832795\n\n#define H(v) (cos(radians(vec3(0, 60, 120))+(v)*6.2832)*.5+.5)  \nvec2 rotate(vec2 uv, float th) {\n    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nvec3 background(vec2 uv) {\n    return mix(vec3(0.2), vec3(0.1), uv.y + 0.5);\n}\n\nbool circle(vec2 uv, float r, vec2 offset) {\n    return distance(uv,offset) < r;\n}\n\nbool square(vec2 uv, float size, vec2 offset, float angle) {\n    vec2 t=abs(rotate(uv-offset,angle));\n    return t.x< size && t.y<size;\n}\n\nbool triangle(vec2 uv, float size, vec2 offset, float angle) {\n    vec2 t=rotate(uv-offset,angle);\n    vec2 ta=abs(t);\n    return ta.x< size && ta.y<size && t.x<t.y;\n}\n\nfloat rand(float x) {\n    return fract(sin(x*(91.3458)) * 47453.5453);\n}\n\nvec3 drawScene(vec2 uv) {\n    vec3 col = background(uv);\n    if(square(uv, 10.0, vec2(0.0, -10.45), 0.0)) col=vec3(1);\n    if(square(uv, 0.07, vec2(0.0, 0.2-0.75), 0.0)) col=vec3(0.48, 0.25, 0.1);\n\n    if(triangle(uv, 0.35, vec2(0, 0.2-0.7), M_PI/4.)) col=vec3(0.09, 0.53, 0.1);\n    if(triangle(uv, 0.3, vec2(0, 0.2-0.475), M_PI/4.)) col=vec3(0.1, 0.57, 0.11);\n    if(triangle(uv, 0.2, vec2(0, 0.2-0.2), M_PI/4.)) col=vec3(0.09, 0.59, 0.1);\n    if(triangle(uv, 0.125, vec2(0, 0.2), M_PI/4.)) col=vec3(0.09, 0.64, 0.1);\n   \n    if(triangle(uv, 0.05, vec2(0.02, 0.405), 0.3-M_PI/4.)) col=vec3(1, 0.99, 0.07);\n    if(triangle(uv, 0.05, vec2(-0.025, 0.43), 0.45+3.*M_PI/4.)) col=vec3(1, 0.99, 0.07);\n    if(triangle(uv, 0.05, vec2(0.0, 0.385), M_PI/4.)) col=vec3(1, 0.99, 0.07);\n    if(triangle(uv, 0.05, vec2(0.0, 0.44), 5.*M_PI/4.)) col=vec3(1, 0.99, 0.07);\n    if(triangle(uv, 0.05, vec2(0.01, 0.425), 0.15-2.*M_PI/4.)) col=vec3(1, 0.99, 0.07);\n   \n    if(circle(uv, 0.05, vec2(0.1,0.2))) col=vec3(1,0,0);\n    if(circle(uv, 0.05, vec2(-0.15,0.025))) col=vec3(0.25, 0.25, 1);\n    if(circle(uv, 0.05, vec2(0.2,-0.1))) col=vec3(1, 0.55, 0.07);\n    if(circle(uv, 0.05, vec2(-0.3,-0.25))) col=vec3(1, 0.29, 0.93);\n    if(circle(uv, 0.05, vec2(-0.015,-0.3))) col=vec3(0.25, 1, 1);\n    if(circle(uv, 0.05, vec2(0.3,-0.4))) col=vec3(1, 0.98, 0.27);\n \n   \n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = 2.*(fragCoord/iResolution.xy - 0.5);\nvec4 C =fragColor;\nvec2 U =fragCoord;\n float s = 10., // scale\n          t = iDate.w/600.,\n          pi2 = 6.2832,\n          p;\n   \n    vec2 R = iResolution.xy*.25,\n         m = (iTime*10.-R)/R.y*s, // mouse\n         u = (U-R/2.)/R.y*s, // coords\n         g;\n   \n   \n     u.y+=-24.;\n        u.x+=-27.;\n    u /= 1.-dot(u, u)/s; // transform\n    u -= m; // move coords with mouse\n   \n    g = abs(mod(u, 1.)-.5)*1.5; // form grid\n    p = .7*min(1., length(fwidth(u))/length(u-round(u))); // form points\n   \n    vec3 c = H( pow(length(round(u)), 1.)*t ) // color pattern\n           * min(g.x, g.y); // square tile\n    c += (p*p + p*c); // add points\n    c /= max(1., pow(length(u+m), 2.)/30.); // darken\n    c += c;\n    C = vec4(c, 1);\n    float snow = 0.0;\n    float gradient = (1.0-float(fragCoord.y / iResolution.x))*0.3;\n    float random = fract(sin(dot(fragCoord.xy,vec2(12.9898,78.233)))* 43758.5453);\n    for(int k=0;k<6;k++){\n        for(int i=0;i<16;i++){\n            float cellSize = 1.0 + (float(i)*1.5);\nfloat downSpeed = 1.1+(sin(iTime*0.4+float(k+i*20))+1.0)*0.00018;\n            vec2 uv = (fragCoord.xy / iResolution.x)+vec2(0.01*sin((iTime+float(k*6185))*0.6+float(i))*(5.0/float(i)),downSpeed*(iTime+float(k*1352))*(1.0/float(i)));\n            vec2 uvStep = (ceil((uv)*cellSize-vec2(0.5,0.5))/cellSize);\n            float x = fract(sin(dot(uvStep.xy,vec2(12.9898+float(k)*12.0,78.233+float(k)*315.156)))* 43758.5453+float(k)*12.0)-0.5;\n            float y = fract(sin(dot(uvStep.xy,vec2(62.2364+float(k)*23.0,94.674+float(k)*95.0)))* 62159.8432+float(k)*12.0)-0.5;\n\n            float randomMagnitude1 = sin(iTime*2.5)*0.7/cellSize;\n            float randomMagnitude2 = cos(iTime*2.5)*0.7/cellSize;\n\n            float d = 5.0*distance((uvStep.xy + vec2(x*sin(y),y)*randomMagnitude1 + vec2(y,x)*randomMagnitude2),uv.xy);\n\n            float omiVal = fract(sin(dot(uvStep.xy,vec2(32.4691,94.615)))* 31572.1684);\n            if(omiVal<0.08?true:false){\n                float newd = (x+1.0)*0.4*clamp(1.9-d*(15.0+(x*6.3))*(cellSize/1.4),0.0,1.0);\n               \n                snow += newd;\n            }\n        }\n    }\n        vec3 col = drawScene(uv);\n   \n    fragColor = vec4(snow)+gradient*vec4(0.4,0.8,1.0,0.0) + random*0.01;\n    fragColor+=vec4(col+c,1.);\n}\n","name":"Image","description":"","type":"image"}]}