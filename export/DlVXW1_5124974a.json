{"ver":"0.1","info":{"id":"DlVXW1","date":"1686070257","viewed":106,"name":"Wave Chromatic Aberration","username":"Dettamada","description":"A simple loading animation inspired by the Chromatic Aberration effect","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["wave","chromaticaberration","loading","polarcoordinations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 st = vec2( length(uv), atan(uv.y, uv.x));\n    const float PI = 3.141592;\n    vec2 st0 = vec2(st.x, st.y / PI + 0.5);\n    // st = vec2(uv.x, uv.y*PI); // uncomment to see the effect in cartersian coordinates\n    \n    const float r = 0.6; // radius\n    const float t = 0.02; // thickness\n    const float a = 0.1; // amplitude\n    const float f = 9.0; // frequency\n    const float s1 = 0.0; // circle speed\n    const float s2 = 3.0; // wave speed\n    const float o = 1.5; // opening\n    const float a0 = PI/4.0; // starting angle\n    const vec3 delta = vec3(0.0, 1.0, 2.0) * PI/2.0;\n    \n    float circle = PI*sin(st.y/2.0 + s1*iTime - a0);\n    vec3 wave = sin(PI*f*st0.y + delta + s2*iTime);\n\n    vec3 path = exp(-circle * circle / o) * a*wave;\n    \n    vec3 pixel = smoothstep(3./iResolution.y, 0., abs(st.x -r - path ) - t/2. );\n\n    fragColor = vec4(pixel,1.0);\n}","name":"Image","description":"","type":"image"}]}