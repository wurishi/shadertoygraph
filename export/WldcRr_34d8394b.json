{"ver":"0.1","info":{"id":"WldcRr","date":"1608377090","viewed":90,"name":"Binary Transition Framework","username":"samesh","description":"A framework for procedural transitions between two scenes","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["transitions"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define TRANS_TIME 2.\n#define IDLE_TIME 1.  //unwanted results if negative\n\n\nvec3 scene1(vec2 uv)\n{\n    vec3 col = vec3(uv.xy, 0.);\n    return col;\n}\n\nvec3 scene2(vec2 uv)\n{\n    vec3 col = vec3(1.) - scene1(uv);\n    return col;\n}\n\nfloat transSwipe(vec2 uv)\n{\n    \n    return uv.x + .5;\n}\n\nfloat transCircle(vec2 uv)\n{\n    \n    \n    return length(uv.xy * vec2(iResolution.x/iResolution.y, 1.));\n}\n\nfloat transDiamonds(vec2 uv)\n{\n    float a = 9.;\n    float b = 10.;\n    \n    return (min(fract(uv.x*a), fract(1.-uv.x*a))\n            + min(fract(uv.y*b), fract(1.-uv.y*b))\n            * 0.5);\n}\n\n\nbool execTrans(float transition, float time)\n{\n    return transition > time;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float myTime = max(0., mod(iTime, TRANS_TIME + IDLE_TIME) - IDLE_TIME) / TRANS_TIME;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    \n    // To visualize transition function\n    //fragColor = vec4(vec3(transDiamonds(uv)), 1.); return;\n    \n    \n    bool chooseScene = execTrans(transCircle(uv), myTime);\n    \n    chooseScene = mod((ceil(iTime/(TRANS_TIME+IDLE_TIME))-1.), 2.) == 1. ? !chooseScene : chooseScene;\n    \n    vec3 col = chooseScene ? scene1(uv) : scene2(uv);\n    \n    // To visualize transition animation\n    //col = chooseScene ? vec3(1.) : vec3(0.);\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}