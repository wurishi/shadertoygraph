{"ver":"0.1","info":{"id":"MlXBDs","date":"1513968286","viewed":238,"name":"HyperVibes","username":"TomCat","description":"prototype for DOS 256b intro\noriginal version for FreeDOS\n\nPC intro: http://www.pouet.net/prod.php?which=74652","likes":2,"published":1,"flags":8,"usePreview":0,"tags":["sound","vga"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Emulating DOS VGA enviroment - code by TomCat/Abaddon\n\n// triangle wave zero based\nint wave(int t)\n{   \n    return(((((t&128)>>7)*255)^t)-64);\n}\n\n// triangle wave based palette generator\nint calcColor(int index,int adder)\n{   \n\tint t=255&(255-index+adder);\n    return(((((t&128)>>7)*255)^t)>>1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // 046CH BIOS variable, INT8 counter speedup 22.21Hz\n    int timer=int(iTime*105./88.*1000000./257./209.);\n\n    // video memory offset, DI register for STOSB\n    int vmem=int(fragCoord.x/iResolution.x*320.)+320*int((iResolution.y-fragCoord.y)/iResolution.y*200.);\n    \n    // screen coordinates from video memory offset: x=0..255, y=0..199\n    vec2 coord=vec2(255&(vmem*0xCCCD>>16),255&(vmem*0xCCCD>>24));\n\n    // indexed color palette, VGA DAC array\n    vec3 pal[256];\n\n    // index of background color for AL register\n  \tint AL=192;\n\n    // tempo\n   \tint t = timer>>2;\n\n   \tif( (128&t)==0&&((96&t)==32||(96&t)==64) )\n   \t// index of color for AL register\n    {\n    \tAL=255&((int(sqrt(coord.x*coord.x+coord.y*coord.y))+timer)<<3);\n    \tcoord = vec2(255&int(-1.*coord.x),255&int(-1.*coord.y));\n    \tint AL2=255&((int(sqrt(coord.x*coord.x+coord.y*coord.y))+timer)<<3);\n    \tAL = AL&AL2;\n    }\n    else\n    {\n    \tint m=8;\n        if ((128&t)==0) {\n        \tm=128;\n    \t}       \n\n    \tfor (int i=m; i>0; i--) {\n\t    \tt = (timer)+i*16;\n\n            int a=wave(255&((t<<1)));\n    \t\tint b=wave(255&((t<<1)-64));\n\t    \tint c=abs(b*int(coord.x-128.)+a*int(coord.y-100.));\n\n            int zoom=(255&t)*16;\n\n            if (c<zoom) {\n\t    \t\tint d=(255&((t>>8)+i))*32+57;\n            \tAL=255&(AL+((c/2)/(255&t))-d);           \n\t\t    }\n\t    }\n    }\n\n    // calculating only one color on the fly because of some slow GPU\n    pal[AL]=vec3(calcColor(AL,0x22),calcColor(AL,0x44),calcColor(AL,0x77));\n    \n    // putpixel, STOSB\n    fragColor=vec4(pal[AL]/63.,0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Emulating PC Speaker mode3 enviroment - code by TomCat/Abaddon\n// you can use it as you want...\n\n\nvec2 mainSound( in int samp, float time )\n{\n    // PIT counter\n    int counter = int(time*105./88.*1000000.);\n\n    // 046CH BIOS variable, INT8 counter speedup 22.21Hz\n    int timer=int(time*105./88.*1000000./257./209.);\n    int divider;\n    float amp;\n \n   \t// tempo\n   \tint t = timer>>2;\n    if( (2&timer)==0 )\n    {\n    // sound\n        if( (1&t)==0 )\n        // lead\n     \t{       \n\t    \tif( (128&t)==128||(96&t)==32||(96&t)==64 )\n            {\n\t\t    \tint song[256];\n\n                song[0]=181;2712;\n    \t\t\tsong[1]=152;2280;\n\t    \t\tsong[2]=120;1800;\n\t    \t\tsong[3]=152;2280;\n\n    \t\t\tsong[4]=203;3044;\n\t\t    \tsong[5]=161;2416;\n\t    \t\tsong[6]=120;1800;\n    \t\t\tsong[7]=161;2416;\n\n\t\t    \tsong[8]=135;2030;\n    \t\t\tsong[9]=161;2416;\n\t  \t\t  \tsong[10]=203;3044;\n    \t\t\tsong[11]=120;1800;\n\n\t\t\t    song[12]=135;2030;\n    \t\t\tsong[13]=152;2280;\n\t\t\t    song[14]=181;2712;\n\t    \t\tsong[15]=203;3044;\n    \n    \t\t\tdivider=song[15&(t>>1)]*15;\n\n                // mode3 square wave generator\n        \t\tamp = float(2&int(4*counter/divider))-1.;\n            }\n        }\n        else\n        // bass\n\t    {\n\t    \tif( (128&t)==128||(96&t)==0||(96&t)==96 )\n            {\n        \t\tdivider = 256*70;\n        \t\tif ( (2&t)==0&&(128&t)==0 ) divider=256*120;\n        //\t\tif ( (2&t)==0&&(128&t)==128&&(32&t)==32 ) divider=256*120;\n\n                // mode3 square wave generator\n        \t\tamp = float(2&int(4*counter/divider))-1.;\n            }\n\t    }\n    }\n    else\n    {\n    \t// silent\n    \tamp = 0.;\n    }\n\nreturn vec2( amp );\n}\n","name":"Sound","description":"","type":"sound"}]}