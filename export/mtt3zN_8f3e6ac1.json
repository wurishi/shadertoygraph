{"ver":"0.1","info":{"id":"mtt3zN","date":"1682289404","viewed":103,"name":"Pixel art non-integer upscaling","username":"jcheesecake","description":"Pixel art upscaling demo","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["pixelart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 f1(vec2 fragCoord, vec2 spritePos, float spriteScale) {\n    vec2 scaledSpriteSize = spriteScale * iChannelResolution[0].xy;\n    vec2 p = fragCoord / scaledSpriteSize + spritePos;\n    return texture(iChannel0, p);\n}\n\nvec4 f2(vec2 fragCoord, vec2 spritePos, float spriteScale) {\n    vec2 spriteSize = iChannelResolution[0].xy;\n    vec2 scaledSpriteSize = spriteScale * spriteSize;\n\n    // Normalized sprite pixel size.\n    vec2 spritePxSize = 1.0 / spriteSize;\n    // Canvas pixel size in normalized sprite space.\n    vec2 canvasPxSize = 1.0 / scaledSpriteSize;\n    vec2 canvasPxHalfSize = canvasPxSize * 0.5;\n    // p0, p1 define the corners of the current canvas pixel in sprite space.\n    vec2 p = fragCoord / scaledSpriteSize + spritePos;\n    vec2 p0 = p - canvasPxHalfSize;\n    vec2 p1 = p + canvasPxHalfSize;\n\n    // split0, split1 define where the sprite sheet pixel edges split the canvas\n    // pixel, from 0 .. 1 where 1 is canvas pixel width.\n    vec2 split0 = min((spritePxSize - mod(p0, spritePxSize)) / canvasPxSize, 1.0);\n    vec2 split1 = 1.0 - split0;\n\n    vec4 c0 = texture(iChannel0, vec2(p0.x, p0.y)) * split0.x * split0.y;\n    vec4 c1 = texture(iChannel0, vec2(p1.x, p0.y)) * split1.x * split0.y;\n    vec4 c2 = texture(iChannel0, vec2(p0.x, p1.y)) * split0.x * split1.y;\n    vec4 c3 = texture(iChannel0, vec2(p1.x, p1.y)) * split1.x * split1.y;\n    return c0 + c1 + c2 + c3;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 spritePos = vec2(1.0 + sin(iTime * 0.01), 0.0);\n    float spriteScale = 3.5 + 2.5 * sin(iTime * 0.1);\n\n    float ySplit = iResolution.y / 2.0;\n    if (fragCoord.y < ySplit - 0.5) {\n        fragColor = f1(fragCoord, spritePos, spriteScale);\n    } else if (fragCoord.y > ySplit + 0.5) {\n        fragColor = f2(fragCoord, spritePos, spriteScale);\n    } else {\n        fragColor = vec4(0.5, 0.5, 0.5, 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}