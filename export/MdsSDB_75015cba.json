{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// perlin noise function by https://github.com/ashima/webgl-noise\n\nvec3 mod289(vec3 x) {                                                           \n  return x - floor(x * (1.0 / 289.0)) * 289.0;                                  \n}                                                                               \n                                                                                \nvec2 mod289(vec2 x) {                                                           \n  return x - floor(x * (1.0 / 289.0)) * 289.0;                                  \n}                                                                               \n                                                                                \nvec3 permute(vec3 x) {                                                          \n  return mod289(((x*34.0)+1.0)*x);                                              \n}                                                                               \n                                                                                \nfloat snoise(vec2 v)                                                            \n  {                                                                             \n  const vec4 C = vec4(0.211324865405187, // (3.0-sqrt(3.0))/6.0                 \n                      0.366025403784439, // 0.5*(sqrt(3.0)-1.0)                 \n                     -0.577350269189626, // -1.0 + 2.0 * C.x                    \n                      0.024390243902439); // 1.0 / 41.0                         \n// First corner                                                                 \n  vec2 i = floor(v + dot(v, C.yy) );                                            \n  vec2 x0 = v - i + dot(i, C.xx);                                               \n                                                                                \n// Other corners                                                                \n  vec2 i1;                                                                      \n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0                       \n  //i1.y = 1.0 - i1.x;                                                          \n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);                         \n  // x0 = x0 - 0.0 + 0.0 * C.xx ;                                               \n  // x1 = x0 - i1 + 1.0 * C.xx ;                                                \n  // x2 = x0 - 1.0 + 2.0 * C.xx ;                                               \n  vec4 x12 = x0.xyxy + C.xxzz;                                                  \n  x12.xy -= i1;                                                                 \n                                                                                \n// Permutations                                                                 \n  i = mod289(i); // Avoid truncation effects in permutation                     \n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))                       \n+ i.x + vec3(0.0, i1.x, 1.0 ));                                                 \n                                                                                \n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;                                                                     \n  m = m*m ;                                                                     \n                                                                                \n// Gradients: 41 points uniformly over a line, mapped onto a diamond.           \n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)          \n                                                                                \n  vec3 x = 2.0 * fract(p * C.www) - 1.0;                                        \n  vec3 h = abs(x) - 0.5;                                                        \n  vec3 ox = floor(x + 0.5);                                                     \n  vec3 a0 = x - ox; \n      \n      // Normalise gradients implicitly by scaling m                                  \n// Approximation of: m *= inversesqrt( a0*a0 + h*h );                           \n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );                   \n                                                                                \n// Compute final noise value at P                                               \n  vec3 g;                                                                       \n  g.x = a0.x * x0.x + h.x * x0.y;                                               \n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;                                        \n  return 130.0 * dot(m, g);                                                     \n}                                                                               \n                                                                                \n// fbm function by https://code.google.com/p/fractalterraingeneration/wiki/Fractional_Brownian_Motion\nfloat fbm(in vec2 uv)                              \n{                                                                               \n    float gain = 0.65;                                                          \n    float lacunarity = 2.1042;                                                     \n                                                                                \n    float total = 0.0;                                                          \n    float frequency = 0.5;                                                     \n    float amplitude = gain;                                                     \n                                                                                \n    uv = uv*5.0;                                                                \n                                                                                \n    total = snoise(uv);                                                         \n                                                                                \n    for (int i = 0; i < 10; i++)                                                \n    {                                                                           \n        total += snoise(uv * frequency) * amplitude;                            \n        frequency *= lacunarity;                                                \n        amplitude *= gain;                                                      \n    }                                                                          \n                                                                                \n    total = (total + 2.0) / 4.0;                                                \n                                                                                \n    return total;                                                               \n}\n\nfloat pattern(in vec2 p)\n{\n    return fbm(p + fbm(p + fbm(p)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )                                                                 \n{                                                                               \n    vec2 uv = fragCoord.xy / iResolution.xy;                    \n    vec2 ar = vec2(iResolution.x / iResolution.y, 1.0);\n    \n    float time = iTime/20.0;\n    \n    vec3 col = vec3(0.0);\n    vec2 p = vec2((uv * ar) / 900.0);\n        \n    float f = pattern(vec2(p.x+0.005*time, p.y));\n    \n    col = vec3(f*1.9, f*1.0, f*0.45);\n    col = sqrt(col) - 0.2;\n    \n    fragColor = vec4(col, 1.0);                                              \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdsSDB","date":"1406591991","viewed":501,"name":"Utah Sandstone","username":"sed","description":"Idea stolen from https://iquilezles.org/articles/warp/warp.htm","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","fbm"],"hasliked":0,"parentid":"","parentname":""}}