{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float sqr(float x) {\n\treturn x * x;\n}\n\nbool magnitude_above(float real, float imaginary, float threshold) {\n    return sqr(real) + sqr(imaginary) > sqr(threshold);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    const int iterations = 30;\n    \n\tvec2 pixel = fragCoord.xy / iResolution.xy;\n    vec2 coords = (pixel - 0.5) * 4.0;\n    coords.x *= iResolution.x / iResolution.y;\n    \n    float real = 0.0;\n    float imaginary = 0.0;\n    int crossover = iterations;\n    \n    for (int i = 0; i < iterations; i++) {\n        \n        // sqr(a + bi) = sqr(a) - sqr(b) + 2abi\n        \n        float new_real = sqr(real) - sqr(imaginary) + coords.x;\n        float new_imaginary = 2.0 * real * imaginary + coords.y;\n        \n        real = new_real;\n        imaginary = new_imaginary;\n        \n        if (magnitude_above(real, imaginary, 2.0)) {\n            crossover = i;\n            break;\n        }\n    }\n    \n    float gradient = 1.0 - float(crossover) / float(iterations);\n\tfragColor = vec4(gradient, gradient, gradient, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xd2XWm","date":"1412739045","viewed":190,"name":"Mandelbro","username":"heated","description":"A cool mandelbrot implementation fo sho","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""}}