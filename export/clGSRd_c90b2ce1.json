{"ver":"0.1","info":{"id":"clGSRd","date":"1686276384","viewed":22,"name":"fract beams","username":"Quazi","description":"looks cool","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv_buff = fragCoord/iResolution.xy;\n    vec4 buffA = texture(iChannel0, uv_buff);\n    float key_right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).r;\n    float key_left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).r;\n    \n    // Output to screen\n    if(key_right > 0.0){\n        fragColor = buffA*vec4(1.0, 0.0, 0.0, 0.0);\n    }\n    else if(key_left > 0.0){\n        fragColor = buffA*vec4(0.0, 1.0, 0.0, 0.0);\n    }\n    else{\n        fragColor = (sin((buffA.r)*2.0*PI))*vec4(1.0, 1.0, 1.0, 1.0);\n    }\n    \n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    rng_initialize(fragCoord, iFrame);\n    vec2 uv = (fragCoord+rand2())/iResolution.x;\n    vec2 uv_buff = fragCoord/iResolution.xy;\n    vec2 pos_0 = iMouse.xy/iResolution.x;\n    vec2 pos_1 = vec2(0.5,0.5)*iResolution.xy/iResolution.x;\n    vec2 pos_t = mix(pos_0, pos_1, rand());\n    \n\n    \n    vec4 buffA = texture(iChannel0, uv_buff);\n    \n    vec4 col = vec4(0.0,0.0,0.0,1.0);\n    float mix_eps = 0.001;\n    col.b = buffA.b;\n    if(sign(iMouse.z)>0.0){\n        col.b = 1.0-mix_eps;\n    }\n    col.b = mix(col.b, 0.0, 0.01);\n    \n    \n    col.r = mix(buffA.r,(fract(length(uv-pos_t)/l)), mix_eps+col.b);\n    col.g = mix(buffA.g,(sin((length(uv-pos_t)/l)*2.0*PI)), mix_eps+col.b);\n\n\n    fragColor = col; \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float f = 10.0;\nconst float l = 1.0/f;\nconst float PI = 3.14159265358979323846264338327950288;\n\n//////////////////////////////////////////////////////////////////\n//https://www.shadertoy.com/view/wltcRS\n//internal RNG state \nuvec4 s0, s1; \nivec2 pixel;\n\nvoid rng_initialize(vec2 p, int frame)\n{\n    pixel = ivec2(p);\n\n    //white noise seed\n    s0 = uvec4(p, uint(frame), uint(p.x) + uint(p.y));\n    \n    //blue noise seed\n    s1 = uvec4(frame, frame*15843, frame*31 + 4566, frame*2345 + 58585);\n}\n\n// https://www.pcg-random.org/\nvoid pcg4d(inout uvec4 v)\n{\n\tv = v * 1664525u + 1013904223u;\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n    v = v ^ (v>>16u);\n    v.x += v.y*v.w; v.y += v.z*v.x; v.z += v.x*v.y; v.w += v.y*v.z;\n}\n\nfloat rand()\n{\n    pcg4d(s0); return float(s0.x)/float(0xffffffffu);\n}\n\nvec2 rand2()\n{\n    pcg4d(s0); return vec2(s0.xy)/float(0xffffffffu);\n}\n\nvec3 rand3()\n{\n    pcg4d(s0); return vec3(s0.xyz)/float(0xffffffffu);\n}\n\nvec4 rand4()\n{\n    pcg4d(s0); return vec4(s0)/float(0xffffffffu);\n}\n\n//random blue noise sampling pos\nivec2 shift2()\n{\n    pcg4d(s1); \n    return (pixel + ivec2(s1.xy%0x0fffffffu))%1024;\n}\n////////////////////////////////////////////","name":"Common","description":"","type":"common"}]}