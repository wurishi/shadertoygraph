{"ver":"0.1","info":{"id":"DtdXzr","date":"1684964088","viewed":69,"name":"Cardiogram","username":"Arquestro","description":"My POC for cardiagram","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159;\nconst float frequency = 10.0;\nconst float pulseSpeed = 3.0;\nconst float verticalScale = 0.75;\nconst float yOffset = 0.5 * verticalScale;\n    \n/// Line definitions\nconst float leftNull = 0.40;\nconst float rightNull = 0.66;\nconst float dx = 0.04;\nconst vec2 p0 = vec2(0.0, 0.0);\nconst vec2 p1 = vec2(leftNull, 0.0);\nconst vec2 p2 = vec2(leftNull + dx      , 0.1);\nconst vec2 p3 = vec2(leftNull + dx * 2.0, -0.125);\nconst vec2 p4 = vec2(leftNull + dx * 3.0, 0.3);\nconst vec2 p5 = vec2(leftNull + dx * 4.0, -0.2);\nconst vec2 p6 = vec2(leftNull + dx * 5.0, 0.0);\nconst vec2 p7 = vec2(leftNull + dx * 6.0, 0.0);\nconst vec2 p8 = vec2(rightNull, 0.0);\nconst vec2 pN = vec2(1.0, 0.0);\n\n// Grid Settings\nconst float gridBarWidth = 2.0;\nconst float gridStep = 30.0;\n    \nfloat stepFilter(in float e0, in float e1, in float x)\n{\n    return step(e0, x) * step(-e1, -x);\n}    \n\nfloat lineFuncSDF(in vec2 p1, in vec2 p2, in vec2 uv)\n{\n    float k = (p2.y - p1.y) / (p2.x - p1.x);\n    float func_y = p1.y + (uv.x - p1.x) * k + yOffset;\n    return stepFilter(p1.x, p2.x, uv.x) * (uv.y - func_y) / (0.01 * (k + 1.0)); // Division by zero hack\n}\n\nfloat signedDistanceToFunc(in vec2 uv)\n{\n    return lineFuncSDF(p0, p1, uv) + \n           lineFuncSDF(p1, p2, uv) + \n           lineFuncSDF(p2, p3, uv) + \n           lineFuncSDF(p3, p4, uv) + \n           lineFuncSDF(p4, p5, uv) +\n           lineFuncSDF(p5, p6, uv) + \n           lineFuncSDF(p6, p7, uv) + \n           lineFuncSDF(p7, p8, uv) + \n           lineFuncSDF(p8, pN, uv);\n}\n\nvec3 applyGrid(in vec2 fragCoord)\n{\n    float gridFilter = max(stepFilter(gridStep - gridBarWidth, gridStep, mod(fragCoord.x, gridStep)),\n                           stepFilter(gridStep - gridBarWidth, gridStep, mod(fragCoord.y, gridStep)));\n    return 0.25 * vec3(0.5, 0.85, 0.6) * gridFilter;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y *= verticalScale;\n    // Time varying pixel color\n    float wave = smoothstep(0.5, 1.0, sin(uv.x - pulseSpeed * iTime));\n    // TODO: Nice wave fade\n    //float waveFade = smoothstep(0.5, 1.0, sin(uv.x - pulseSpeed * (iTime - 0.5)));\n    vec3 col = vec3(0.5, 0.85, 0.6) * wave * smoothstep(0.5, 1.0, clamp(1.0 - 2.0 * abs(signedDistanceToFunc(uv)), 0.0, 1.0));\n    \n    // Grid\n    col += applyGrid(fragCoord);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}