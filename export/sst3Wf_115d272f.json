{"ver":"0.1","info":{"id":"sst3Wf","date":"1630798526","viewed":98,"name":"2d Stairs SDF","username":"jt","description":"Distancefield of 2d stairs, by combining iq's Limited Repetition SDF with Rhombus - distance 2D\n(see [url]https://www.shadertoy.com/view/3syGzz[/url]\nand [url]https://www.shadertoy.com/view/XdXcRB[/url])","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","stairs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/sst3Wf\n\n// 2d stairs SDF, 2021 jt\n// combined iq's Limited Repetition SDF with Rhombus - distance 2D\n// see https://www.shadertoy.com/view/3syGzz\n// and https://www.shadertoy.com/view/XdXcRB\n\n// Create multiple copies of an object - https://iquilezles.org/articles/distfunctions\nvec2 opRepLim( in vec2 p, in float s, in vec2 lima, in vec2 limb )\n{\n    return p-s*clamp(round(p/s),lima,limb);\n}\n/*\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n// https://www.shadertoy.com/view/XdXcRB Rhombus - distance 2D by iq\nfloat sdRhombus( in vec2 p, in vec2 b ) // original\n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*ndot(q,b) + ndot(b,b) )/dot(b,b), -1.0, 1.0 );\n    float d = length( q - 0.5*b*vec2(1.0-h,1.0+h) );\n    d *= sign( q.x*b.y + q.y*b.x - b.x*b.y );\n\n    return d;\n}\n*/\nfloat sdUnitRhombus( in vec2 p ) // simplified: sdRhombus(p, 1.0)\n{\n    vec2 q = abs(p);\n\n    float h = clamp( (-2.0*(q.x-q.y) )/2.0, -1.0, 1.0 );\n    float d = length( q - 0.5*vec2(1.0-h,1.0+h) );\n    d *= sign( q.x + q.y - 1.0 );\n\n    return d;\n}\n\n// stairs (2*n+1 steps)\nfloat stairs(vec2 p, float n)\n{\n    float s = sqrt(2.0);\n    p /= s;\n    //mat2 R = mat2(vec2(1.0, 1.0), vec2(-1.0, 1.0)) / sqrt(2.0);\n    mat2 R = mat2(vec2(1.0,-1.0), vec2(1.0, 1.0)) / sqrt(2.0);\n\n    vec2 q = R * p;\n    vec2 r = opRepLim(q,2.0,vec2(-n,0),vec2(n,0));\n    //return sdRhombus(r, vec2(1.0));\n    return s*sdUnitRhombus(r);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    p *= 6.0; // zoom out\n\n    // sdf\n    float d = stairs(p, 2.0);\n    //float d = sdBox(p, vec2(1.0)); // use to verify scale\n\n    // colorize\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-2.0*abs(d));\n    col *= 0.8 + 0.2*cos(40.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.05,abs(d)) );\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}