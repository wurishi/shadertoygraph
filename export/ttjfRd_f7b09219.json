{"ver":"0.1","info":{"id":"ttjfRd","date":"1599668644","viewed":146,"name":"Wave Equation 2 - AT","username":"athibaul","description":"A second simple numerical scheme for simulation of wave propagation. This time uses separate variables for pressure and velocity, allowing for von Neumann conditions!","likes":15,"published":1,"flags":32,"usePreview":0,"tags":["wave","equation","pde","helmholtz","dalembert","acoustics","numericalscheme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ********************************* //\n//      WAVE EQUATION SIMULATOR      //\n// ********************************* //\n\n// A simple numerical scheme to simulate wave propagation.\n//\n// Change the PRESET number in \"Common\" tab.\n\n// LIST OF PRESETS\n// ---------------\n// 0: Droplet in a square pond\n// 1: Scattering by a small obstacle\n// 2: Two-slit diffraction\n// 3: Two-slit diffraction, tilted\n// 4: Refraction at a flat surface\n// 5: Total reflection\n// 6: Iridescence of butterfly wings\n// 7: Iridescence of thin film - look at the reflected wave!\n// 8: Quadratic diffuser\n\n\n\n// TODO Absorbing boundary conditions\n\n\n\n#define pal(x,a,b,c,d) abs(c*x+d)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    ivec2 ij = ivec2(fragCoord);\n    float p = T0(ij).r;\n    vec2 vxvy = T1(ij).rg;\n    float nrj = p*p + dot(vxvy, vxvy);\n    \n    vec3 col;\n    float q = sign(p) * pow(abs(p),0.8) * 3.0;\n    //float q = pow(nrj, 0.25);\n    col = pal(q, vec3(0.0), vec3(1), vec3(-1.0,1.0,1.0), vec3(0.2,-0.1,0.15));\n    //col = 0.5 + 2.0*vec3(p, vxvy);\n    //col = pow(col, vec3(1.0/2.2));\n    \n    col = mix(col, vec3(0.0,1.0,1.0), 0.6*smoothstep(1.0,3.0,indexOfRefraction(uv_of(ij))));\n    \n    if(isObstacle(uv_of(ij)))\n        col = (11*ij.x+13*ij.y)%101 % 7 == 0 ? vec3(0.5) : vec3(0.3);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float initialPressure( in ivec2 ij )\n{\n    vec2 uv = uv_of(ij);\n    #if PRESET == 0\n    float denom = 1e-3;\n    return exp(-dot(uv,uv) / denom) * 2.0;\n    #elif PRESET == 1 || PRESET == 2 || PRESET == 3\n    uv.x += 1.0;\n    return 0.3*exp(-dot(uv.x,uv.x) / 3e-2) * cos(uv.x * 6.28 * 10.0);\n    #elif PRESET == 4\n    uv -= vec2(-0.5,0.0);\n    return exp(-dot(uv,uv) / 1e-3) * 2.0;\n    #elif PRESET == 5 || PRESET == 6\n    uv -= vec2(-1.0,1.0);\n    return exp(-dot(uv,uv) / 2e-3) * 3.0;\n    #elif PRESET == 7\n    uv -= vec2(-1.0,0.5);\n    return exp(-dot(uv.y,uv.y) / 6e-2) * cos(uv.y*6.28*(10.0+5.0*uv.y)) * 0.3;\n    #elif PRESET == 8\n    uv -= vec2(0.0,1.0);\n    return (exp(-dot(uv.y,uv.y) / 1e-2) + exp(-dot(uv.y,uv.y) / 1e-3))*0.3;\n    #endif\n}\n\nfloat pressureStep( in ivec2 ij )\n{\n    \n    float p_i_j  = T0(ij).r;\n    float p_im_j = T0(ij-ex).r;\n    float p_ip_j = T0(ij+ex).r;\n    float p_i_jm = T0(ij-ey).r;\n    float p_i_jp = T0(ij+ey).r;\n    \n    float vx_iph_j = T1(ij).r,\n        vx_imh_j = T1(ij-ex).r,\n        vy_i_jph = T1(ij).g,\n        vy_i_jmh = T1(ij-ey).g;\n    \n    float p_np1 = p_i_j + dt_dx * (vx_iph_j - vx_imh_j + vy_i_jph - vy_i_jmh);\n    return p_np1;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float p;\n    if(iFrame == 0 || T0(ivec2(0)).a != iResolution.x)\n        p = initialPressure(ivec2(fragCoord));\n    else\n        p = pressureStep(ivec2(fragCoord));\n    \n    fragColor = vec4(p, 0, 0, iResolution.x);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"vec2 initialVelocity( in vec2 fragCoord )   \n{\n    return vec2(0.0);\n}\n\n\nvec2 velocityStep( in ivec2 ij )\n{\n    \n    float p_i_j = T0(ij).r,\n          p_ip_j = T0(ij+ex).r,\n          p_i_jp = T0(ij+ey).r;\n    float vx_iph_j = T1(ij).r;\n    float vy_i_jph = T1(ij).g;\n    float ior_x = indexOfRefraction(uv_of(vec2(ij)+vec2(0.5,0.0)));\n    float ior_y = indexOfRefraction(uv_of(vec2(ij)+vec2(0.0,0.5)));\n    \n    float vx_iph_j_np1 = vx_iph_j + dt_dx/ior_x * (p_ip_j - p_i_j);\n    float vy_i_jph_np1 = vy_i_jph + dt_dx/ior_y * (p_i_jp - p_i_j);\n    \n    if(isObstacle(uv_of(ij)) || isObstacle(uv_of(ij+ex)))\n        vx_iph_j_np1 = 0.0;\n    if(isObstacle(uv_of(ij)) || isObstacle(uv_of(ij+ey)))\n        vy_i_jph_np1 = 0.0;\n    \n    return vec2(vx_iph_j_np1, vy_i_jph_np1);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vxvy;\n    if(iFrame == 0 || T1(ivec2(0)).a != iResolution.x)\n        vxvy = initialVelocity(fragCoord);\n    else\n        vxvy = velocityStep(ivec2(fragCoord));\n    \n    fragColor = vec4(vxvy, 0, iResolution.x);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T0(a) texelFetch(iChannel0, a, 0)\n#define T1(a) texelFetch(iChannel1, a, 0)\n#define ex ivec2(1,0)\n#define ey ivec2(0,1)\n#define dt_dx sqrt(0.5)\n#define uv_of(ij) (( 2.0*vec2(ij) - iResolution.xy ) / iResolution.y)\n\n\n#define PRESET 8\n\n#define squared(x) (x)*(x)\n\nbool isObstacle( in vec2 uv )\n{\n    if(uv.x < -0.99 || uv.x > 0.99 || uv.y < -0.99 || uv.y > 0.99)\n        return true;\n    \n    #if PRESET==1\n    if(length(uv - vec2(-0.2,0.3)) < 0.1)\n        return true;\n    #elif PRESET==2\n    if(abs(uv.x + 0.5) < 0.02 && abs(abs(uv.y)-0.1)>0.02)\n        return true;\n    #elif PRESET==3\n    if(abs(uv.x + 0.5*uv.y) < 0.02 && abs(abs(uv.y)-0.1)>0.02)\n        return true;\n    #elif PRESET==6\n    if(uv.y < 0.0 && mod(uv.x-uv.y, 0.1) < 0.02)\n        return true;\n    #elif PRESET==8\n    float scale = 1.0;\n    uv = scale*uv + (1.0-scale)*vec2(0.0,-1.0);\n    float y0 = -0.5;\n    if(uv.y < y0 && mod(uv.x, 0.1) < 0.02)\n\t        return true;\n    if(uv.y < y0-0.5/21.0*float(squared(int(floor(uv.x / 0.1))) % 21))\n        return true;\n    #endif\n    \n    \n    return false;\n}\n\n\nfloat indexOfRefraction( in vec2 uv )\n{\n    #if PRESET == 4\n\treturn (uv.y > -0.2) ? 1.0 : 2.0;\n    #elif PRESET == 5\n    return 1.0 + smoothstep(0.3,0.5, uv.y);\n    #elif PRESET == 6\n    return 1.0 + 10.0*smoothstep(0.0,-1.0,uv.y);\n    #elif PRESET == 7\n    float thickness = 0.1*(0.5 + 0.5*uv.x);\n    return 1.0 + 2.0*smoothstep(thickness*0.6, thickness*0.5, abs(uv.y+0.5));\n    #else\n    return 1.0;\n   \t#endif\n}","name":"Common","description":"","type":"common"}]}