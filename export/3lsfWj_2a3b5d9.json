{"ver":"0.1","info":{"id":"3lsfWj","date":"1598863488","viewed":43,"name":"TFG 3-8 Deformación FDS","username":"lukasharing","description":"Operador de deformación p -> p * (cos(py * PI), sin(py * PI))  pero no es una isometría","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tfg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.01\n#define PI 3.1415\n\nfloat SDFCircunferencia(vec2 p, float r){\n\treturn length(p) - r;\n}\nfloat sdf(vec2 p){\n\t// Vec2 No Isometría\n\tvec2 pn = vec2(\n\t    p.x * cos(p.y * PI),\n\t    p.y * sin(p.y * PI)\n\t);\n\treturn SDFCircunferencia(pn, 0.3);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Preservamos el ratio aspecto y re-centramos\n    vec2 uv = (fragCoord-iResolution.xy * 0.5)/min(iResolution.x, iResolution.y);\n    // Para cada punto p (uv), aplicamos la funcion de distancia con signo\n    float d = sdf(uv);\n    \n    vec3 col;\n    if(abs(d) < EPSILON){\n        col = vec3(1.0);\n    }else{\n        if(d < 0.0){\n    \t\tcol = vec3(1.0, 0., 0.);\n    \t}else{\n    \t\tcol = vec3(0., 0., 1.0);\n    \t}\n        // Numero de repeticiones\n        float k = 30.0;\n        // Tomamos la distancia en valor absoluto y nos quedamos con la parte fraccional\n        // Este valor esta [0,1].\n        col = col * (0.5 + 0.5 * (fract(abs(d) * k)));\n    }\n    \n    // Devolvemos el color asignado\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}