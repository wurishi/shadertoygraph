{"ver":"0.1","info":{"id":"l3tGDB","date":"1716998482","viewed":152,"name":"Starry Infinite Tunnel","username":"vovach777","description":"Embark on a journey through the Starry Infinite Tunnel. This shader effect creates a captivating atmosphere with Perlin noise and smooth color transitions. Venture into the depths of the tunnel and explore the mysteries of the cosmos.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","perlinnoise","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ver. 2\n// Endless Tunnel\n// By: Brandon Fogerty\n// bfogerty at gmail dot com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n\n\tvec3 s = floor(p + dot(p, vec3(F3)));\n\tvec3 x = p - s + dot(s, vec3(G3));\n\n\tvec3 e = step(vec3(0.0), x - x.yzx);\n\tvec3 i1 = e*(1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n\tvec3 x1 = x - i1 + G3;\n\tvec3 x2 = x - i2 + 2.0*G3;\n\tvec3 x3 = x - 1.0 + 3.0*G3;\n\n\tvec4 w, d;\n\n\tw.x = dot(x, x);\n\tw.y = dot(x1, x1);\n\tw.z = dot(x2, x2);\n\tw.w = dot(x3, x3);\n\n\tw = max(0.6 - w, 0.0);\n\n\td.x = dot(random3(s), x);\n\td.y = dot(random3(s + i1), x1);\n\td.z = dot(random3(s + i2), x2);\n\td.w = dot(random3(s + 1.0), x3);\n\n\tw *= w;\n\tw *= w;\n\td *= w;\n\n\treturn dot(d, vec4(52.0));\n}\n\n\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nconst float PI = acos(-1.0);\nfloat map(float v, float v_min, float v_max, float out1, float out2)\n{\n    if ( v_max - v_min == 0. )\n        return out2;\n        \n     return (clamp(v,v_min,v_max) - v_min) / (v_max - v_min) * (out2-out1)+out1;\n}\n\nfloat fmod(float t,float a){\n  return fract(t/a)*a;\n}\n\nfloat angle_diff_grad(float angle1, float angle2)\n{\n    float d = abs(angle1 - angle2);\n    return d < 180. ? d : 360. - d;\n}\n\n\n#define cut_factor (0.3)\n#define black_hole_distance (20.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy/2.) / min(iResolution.x, iResolution.y);\n    float distance = 2. / length(uv);\n    float angle = angle_diff_grad( map( atan(uv.y, uv.x), -PI,PI,0.,360.), 0. );\n               \n    if ( distance < black_hole_distance)\n    {\n       float normal_distance = map(distance,0.,black_hole_distance,1.,0.);\n       float alpha = \n            pow(\n           abs( snoise(vec3(angle, map(distance,0.,black_hole_distance,0.,5.) + iTime*1.5, -iTime/4. )))\n           ,2.);\n           \n        if (alpha > cut_factor)\n        {\n           alpha = map(alpha, cut_factor, 1.,   0., normal_distance * 4.);\n           float color = snoise(vec3(uv.x/1.,uv.y/1., normal_distance + iTime/2.));\n           vec3 finalColor = hsv2rgb( vec3( color, normal_distance, alpha ));\n           //vec3 finalColor = vec3( noise3( vec3(uv.x*10., uv.y*10., distance) ));\n           fragColor = vec4( finalColor, 1.0 );\n           return;\n         }\n    } \n    fragColor = vec4(0.,0.,0.,1.0); \n    \n}\n\n","name":"Image","description":"","type":"image"}]}