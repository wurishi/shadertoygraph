{"ver":"0.1","info":{"id":"Ws3Bz7","date":"1605897153","viewed":73,"name":"NY167 - Raymarching/tracing Test","username":"newyork167","description":"Raymarching/Ray Tracing Test Thingys\nTODO: Fix the broken shadows, smooth interpolate between two intersecting spheres","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .01\n\n//#define COLORIFY\n#define STATIC_LIGHT\n\nstruct Sphere{\n    vec4 position;\n};\n    \nstruct Ray {\n\tvec3 origin;\n    vec3 direction;\n};\n\nfloat fmod(float a, float b) { if(a<0.0) { return b - mod(abs(a), b); } return mod(a, b); }\n\nbool rayTraceSphereHit(Ray r, Sphere sphere) {\n    // From Peter Shirley's Ray Tracing in One Weekend\n    vec3 oc = r.origin - sphere.position.xyz;\n\tfloat a = length(r.direction)*length(r.direction);\n\tfloat half_b = dot(oc, r.direction);\n\tfloat c = length(oc)*length(oc) - sphere.position.w * sphere.position.w;\n\tfloat discriminant = half_b * half_b - a * c;\n    \n    if (discriminant < -0.01) {\n        return false;\n    }\n    \n    return true;\n}\n\nfloat getDist(vec3 p, Sphere sphere) {\n    // Distance to the plane dPlane = camera.y - plane.y (for axis aligned planes)\n    // Distance to the sphere dSphere = (length(Sphere.pos - Camera.pos) - Sphere.radius\n    // dMarch = min(dPlane, dSphere)\n    \n    float dSphere = length(p - sphere.position.xyz) - sphere.position.w;\n    float dPlane = p.y;\n    return min(dPlane, dSphere);\n}\n\nfloat rayMarch(Ray r, Sphere sphere) {\n\tfloat d0 = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = r.origin + d0*r.direction;\n        float dS = getDist(p, sphere);\n        d0 += dS;\n        \n        if (dS < SURFACE_DIST || d0 > MAX_DIST)\n            break;\n    }\n    \n    return d0;\n}\n\nvec3 getNormal(vec3 p, Sphere sphere) {\n    vec2 e = vec2(.0001, 0);\n    float d = getDist(p, sphere);\n    vec3 n = d - vec3(\n        getDist(p-e.xyy, sphere),\n        getDist(p-e.yxy, sphere),\n        getDist(p-e.yyx, sphere));\n    return normalize(n);\n}\n\nfloat getLight(vec3 p, Sphere sphere) {\n    float timeFactor = 5.;\n    vec3 lightPos;\n    \n#ifdef STATIC_LIGHT\n    lightPos = vec3(10.0, 2.0, 3.0);\n#else\n    lightPos = vec3(timeFactor*sin(iTime), (timeFactor*sin(iTime) + 10.), timeFactor*cos(iTime) * 3.);\n    lightPos = vec3(1., (timeFactor*sin(iTime) + 10.), 1.);\n#endif\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p, sphere);\n    \n    float dif = dot(n, l);\n    float d = rayMarch(Ray(p + n*SURFACE_DIST*2., l), sphere);\n    \n    if (d < length(lightPos - p)) {\n        dif *= .1;\n    }\n    \n    return dif;\n}\n\nSphere randomSphere() {\n    float x = 5.*cos(iTime) + 2.8, y = sin(iTime) + 2., z = 10. * sin(iTime) + 10., r = max(sin(iTime) + 0.8, 0.1);\n    return Sphere(vec4(x, y, z, r));\n}\n\nvec4 renderSphere(vec2 uv, vec2 fragCoord, inout vec3 col) {\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    bool useSphereArray = false;\n    float d = 0., d1 = 0., d2 = 0.;\n    float dif = 0.;\n    vec4 TextureMix = vec4(1);\n    \n    Sphere spheres[4] = Sphere[](\n        Sphere(vec4(0, 1, 6.1, 1)),\n        Sphere(vec4(0, 1.5, 6.5, 1.5)),\n        Sphere(vec4(-5, 1, 8, 2)),\n        randomSphere()\n    );\n    \n    // Set initial values to first sphere\n    Sphere sphere = spheres[0];\n    d = rayMarch(Ray(ro, rd), sphere);\n    Sphere getLightSphere = spheres[0];\n    \n    // Loop through the rest and figure out which \n    // ray marched sphere should be shown\n    for (int i = 1; i < 4; i++) {\n        Sphere nextSphere = spheres[i];\n        float dN = rayMarch(Ray(ro, rd), nextSphere);\n        d = min(d, dN);\n        \n        if (d == dN)\n            getLightSphere = spheres[i];\n    }\n    \n    vec3 p = ro + rd * d;\n   \tdif = getLight(p, getLightSphere);\n\n    Ray r = Ray(ro, rd);\n    if (rayTraceSphereHit(r, getLightSphere)) {\n        TextureMix = texture(iChannel0, fragCoord);\n        TextureMix = vec4(1.0);\n    } \n#ifdef COLORIFY\n    else {\n        TextureMix = vec4(1., (sin(iTime)), 3., 1.0);\n    }\n#endif\n    \n    col = vec3(dif);\n\n    return vec4(col, 1.0) * TextureMix;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    fragColor = renderSphere(uv, fragCoord, col);\n}","name":"Image","description":"","type":"image"}]}