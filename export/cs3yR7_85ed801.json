{"ver":"0.1","info":{"id":"cs3yR7","date":"1694825619","viewed":43,"name":"three dir grid patches braided","username":"jt","description":"Random patches of grid pattern walls oriented in three directions. \"Braided\" variant (unfortunately with loose ends).\n2d essence of [url=https://www.shadertoy.com/view/clsBWl]three directional grid patches[/url]\nClick to show underlying tri grid.\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","grid","triangle","triangles","patterns","barycentric","pattern","grids","patch","patches"],"hasliked":0,"parentid":"dtBBRw","parentname":"three dir grid patches essence"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/cs3yR7 three dir grid patches braided\n// variant of https://www.shadertoy.com/view/dtBBRw three dir grid patches essence, written 2023 by jt\n// 2d essence of https://www.shadertoy.com/view/DtsBWl three directional grid patches\n// (twin: https://www.shadertoy.com/view/dt2fzR three dir brick patches essence)\n\n// Random patches of grid pattern walls oriented in three directions.\n// \"Braided\" variant (unfortunately with loose ends).\n\n// tags: 2d, grid, triangle, triangles, grid, grids, pattern, patterns, patch, patches, barycentric\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n*/\nuint uhash(ivec3 f) // faster prng suggested by Fabrice\n{\n    uvec3  x = uvec3(f);\n    uint   k = 1103515245U; \n           x = ((x>>8U)^x.yzx)*k;\n           x = ((x>>8U)^x.yzx)*k;  \n    return uint(((x>>8U)^x.yzx)*k);\n}\n\nvec3 barycentric(vec2 p)\n{\n    float s = sqrt(3.0);\n    return vec3((vec2(-1,+1) * p.x - p.y/s + 1.0)/2.0, p.y / s);\n}\n\nfloat mirror(float t)\n{\n    return abs(2.0 * fract(t) - 1.0);\n}\n\n#define scale (5.0*sqrt(3.0))\n//#define e (3./R.y*scale)\n#define e (1./R.y*scale)\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I/R - 1.0;\n    I = (2.0 * I - R) / R.y; // mind aspect ratio\n\n    vec3 t = barycentric(I*scale);\n\n    ivec3 m = ivec3(floor(t));\n    bool flip = m.x + m.y + m.z == 0;\n    //bool tri = any(lessThan(t, vec3(0))); // fundamental triangle\n    t = fract(t);\n    //t -= vec3(m);\n    if(!flip) t = 1.0 - t;\n\n    //uint choice = uhash(m / int(1.0+5.0*(0.5+0.5*cos(iTime))) + int(iTime)) % 3u;\n    uint choice = uhash(m / int(1.0+5.0*mirror(iTime/5.0)) + int(iTime)) % 3u;\n    t = choice == 2u ? t.zxy : choice == 1u ? t.yzx : t.xyz;\n\n    float c = 1.-min(smoothstep(0.1-e,0.1+e,abs(t.y-t.x)), smoothstep(0.1-e,0.1+e,abs(2.0*t.z-1.0)));\n    if(flip)\n        c = min(c, smoothstep(0.05-e,0.05+e,abs(abs(t.y-t.x)-.15)));\n    else\n        c = min(c, smoothstep(0.05*1.25-e,0.05*1.25+e,abs(abs(2.0*t.z-1.0)-0.15*1.1)));\n\n    //o = vec4(t, 1.0);\n    o = vec4(c);\n    if(iMouse.z > 0.0)\n    {\n        o = max(o, vec4(0.2*(choice == 2u ? vec3(0,0,1) : choice == 1u ? vec3(0,1,0) : vec3(1,0,0)), 1.0));\n        o += 0.5 - 0.5 * min(smoothstep(0.0,0.0+e,t.x), min(smoothstep(0.0,0.0+e,t.y), smoothstep(0.0,0.0+e,t.z)));\n    }\n    //if(tri) o.xyz = vec3(0,0,1); // fundamental triangle\n    //if(flip) o.xyz = vec3(1,0,0);\n    o = sqrt(o); // gamma\n}\n","name":"Image","description":"","type":"image"}]}