{"ver":"0.1","info":{"id":"mtVBR3","date":"1702343195","viewed":25,"name":"slow raytracing","username":"cooklie","description":"Not sure why its so slow","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define quad_count 3\n#define reflect_depth 5\nstruct plane {\n    mat3 dirs;\n    vec2 size;\n    vec3 off;\n    vec3 color;\n    vec3 emissive;\n};\nstruct hitInfo {\n    vec3 newPos;\n    vec3 newDir;\n    vec3 color;\n    vec3 emmisive;\n};\nplane quads[] = plane[](\n    plane(mat3(\n        1.,0.,0.,\n        0.,1.,0.,\n        0.,0.,1.\n    ),vec2(1.,1.),\n    vec3(-0.5,-0.5,-0.5),\n    vec3(1.,0.5,0.5),vec3(0.,0.,0.)),\n    \n    \n    \n    plane(mat3(\n        1.,0.,0.,\n        0.,1.,0.,\n        0.,0.,1.\n    ),vec2(4.,4.),\n    vec3(-2.,-2.,2.),\n    vec3(0.5,0.5,1.),vec3(0.,0.,0.)),\n    \n    \n    plane(mat3(\n        1.,0.,0.,\n        0.,0.,1.,\n        0.,1.,0.\n    ),vec2(1.,1.),\n    vec3(-0.5,-0.5,-0.5),\n    vec3(0.5,1.,0.5),vec3(0.,0.,0.))\n);\nvec4 planeIntersect(vec3 tRayPos,vec3 tRayDir,plane tPlane) {\n    vec3 pos = tPlane.dirs*(tRayPos-tPlane.off);\n    vec3 dir = tPlane.dirs*tRayDir;\n    float k = -pos.z/dir.z;\n    pos += dir*k;\n    return vec4(pos,k);\n}\nhitInfo traceRay(vec3 rayPos,vec3 rayDir) {\n    hitInfo aHit = hitInfo(vec3(0.,10.,0.),vec3(0.,1.,0.),vec3(0.,0.,0.),vec3(texture(iChannel0,rayDir)));\n    float depth = 100.;\n    float aDepth;\n    vec4 ainc;\n    vec3 inc;\n    vec3 wInc;\n    for (int i=0;i<quad_count;i++) {\n        ainc = planeIntersect(rayPos,rayDir,quads[i]);\n        inc = ainc.xyz;\n        if (inc.x<=quads[i].size.x&&inc.x>=0.&&inc.y<=quads[i].size.y&&inc.y>=0.) {\n            wInc = rayPos+rayDir*ainc.w;\n            aDepth = ainc.w;\n            if (aDepth<depth&&aDepth>0.1) {\n                depth = aDepth;\n                aHit.newPos = wInc;\n                aHit.newDir = reflect(rayDir,-quads[i].dirs[2]);\n                aHit.color = quads[i].color;\n                aHit.emmisive = quads[i].emissive;\n            }\n        }\n    }\n    return aHit;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = normalize(vec3((fragCoord-iResolution.xy/2.)/iResolution.yy*2.,1.));\n    \n    //camera\n    mat3 rot = mat3(\n                    cos(iTime),0.,sin(iTime),\n                    0.,1.,0.,\n                    -sin(iTime),0.,cos(iTime)\n                    );\n    dir = rot*dir;\n    vec3 rayPos = rot*vec3(0.,0.,-2.);\n    hitInfo aHit;\n    vec3 tColor = vec3(0.,0.,0.);\n    vec3 rColor = vec3(1.,1.,1.);\n    \n    for (int i=0;i<reflect_depth;i++) {\n        aHit = traceRay(rayPos,dir);\n        dir = aHit.newDir;\n        rayPos = aHit.newPos;\n        tColor += aHit.emmisive*rColor;\n        rColor *= aHit.color;\n    }\n    fragColor = vec4(tColor,1.);\n}","name":"Image","description":"","type":"image"}]}