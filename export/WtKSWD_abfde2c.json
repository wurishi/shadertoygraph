{"ver":"0.1","info":{"id":"WtKSWD","date":"1582737622","viewed":821,"name":"大龙猫 - Astral Projection","username":"totetmatt","description":"What is the dot product for astral projection ?","likes":23,"published":3,"flags":0,"usePreview":0,"tags":["instagram","quicky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat distLine(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa,ba)/dot(ba,ba),0.,1.);\n    return length(pa-ba*t);\n}\nfloat line(vec2 p, vec2 a, vec2 b){\nfloat d = distLine(p,a,b);\nfloat m =smoothstep(0.04,0.007,distLine(p,a,b));\n\nfloat d2 = length(a-b);\n  m *= smoothstep(0.6- .1/(length(p)), .3 , d2)*.2 + smoothstep(.0122,.00121,abs(d2-.75)) ;//* (.25/length((p-a)+(p-b)));\n  return m;\n}\nfloat n21(vec2 p){\n  p = fract(p*vec2(123.213,853.4264));\n  p += dot(p,p+6.65);\n  return fract(p.x*p.y);\n\n}\nvec2 n22(vec2 p){\n    float n = n21(p);\n    return vec2(n, n21(p+n));\n}\n\nvec2 getPos(vec2 id, vec2 offset) {\n    vec2 n = n22(id+offset)*iTime;\n    return offset+sin(n)*.4;\n}\nmat2 r(float a){\n    float c=cos(a), s=sin(a);\n    return mat2(c,-s,s,c);\n}\nfloat layer(vec2 uv){\n\n    float m = 0.;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n\n    vec2 gridPos[9];\n    int ppos = 0;\n    for(int y = -1; y<=1; y++) {\n        for(int x = -1; x<=1; x++) {\n            gridPos[ppos++] = getPos(id,vec2(x,y));\n            \n           \n        }\n    }\n    for(int i=0;i<9;i++){\n        m+=line(gv,gridPos[4],gridPos[i]);\n        \n        vec2 jj = (gridPos[i] - gv)*12.;\n        float sparkle = 1./length(dot(jj,jj));\n        m+=sparkle*(sin(iTime+ fract(gridPos[i].x) *10.)*.5+.5);\n    }\n     m+=line(gv,gridPos[1],gridPos[3]);\n     m+=line(gv,gridPos[1],gridPos[5]);\n     m+=line(gv,gridPos[7],gridPos[3]);\n     m+=line(gv,gridPos[7],gridPos[5]);\n     return m ;\n}\n#define ttime floor(iTime*.5) + pow(fract(iTime*.5),.5)\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    vec2 uv = (fragCoord.xy-.5*iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy / iResolution.xy) -.5;\n \n      \n     float m = 0.;\n      //uv*=exp(length(uv)*.2);\n      uv*=.75;\n      uv*=r(atan(uv.x,uv.y)*2.*1.5);\n      uv*=r(cos(length(uv)*3.1415));\n      uv*=r(-iTime*.1);\n      uv=-abs(uv);\n\n     uv*=2.;\n  \n      //uv.x+=-iTime*.0001;   \n      float t = iTime*.0025;\n    \n      vec3 col = vec3(0.);\n     for( float i=0.; i<1.; i+= (1./5.) ) {\n          float z = fract(i+t);\n  \n          float size = mix(8.+sin(i*3.1415*(sin(iTime)*.5+1.5)+ttime)*8.,2.,z);\n          float fade = smoothstep(.0,.4,z) * smoothstep(1.,.6,z);\n         uv*=r(t*sin(i*10.));\n                             \n          m += layer(uv*size+i*20.) * fade ;\n          vec3 base = mix(vec3(.75+sin(ttime+length(uv*4.))*.1,.2,.6),vec3(.1,.2,.6),vec3(sin(i*4.5)*.5+.5,0.+m*1.,i*2.));\n          col += vec3(m)*base;\n     }\n \n\n    //if(gv.x>.47 || gv.y >.47) col.r = 1.;\n    fragColor = vec4(col,1.0);\n   \n}","name":"Image","description":"","type":"image"}]}