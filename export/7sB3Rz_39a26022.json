{"ver":"0.1","info":{"id":"7sB3Rz","date":"1616820770","viewed":82,"name":"Fork Julia Sets with Color","username":"webbgamers","description":"julia sets with various constants + color\n\nuncomment the first line for hybrid distance/iteration shading","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"7sSGzR","parentname":"Julia Sets Over Time"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define DISTANCE\n\nvec2 squ(in vec2 n){\n    return vec2(n.x*n.x - n.y*n.y, 2.0*n.x*n.y);\n}\n\nvec3 hsv2rgb( vec3 c )\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    //uv -= vec2(13.0,6.0);\n    //uv /= 19.0;\n    uv *= 1.0;\n    \n    vec2 z = uv.yx;\n    \n    float iter = 0.0;\n    \n    for (int i = 0; i<100; i++){\n        z = squ(z);\n        z += vec2(0.5+0.2*sin(iTime/5.0),0.5+0.2*cos(iTime/5.0));\n        iter++;\n        if (length(z) > 2.0) break;\n    }\n    \n    vec2 o = vec2(0.0, 0.0);\n    float xd = o.x - z.x;\n    float yd = o.y - z.y;\n    float d = sqrt(xd*xd + yd*yd);\n    \n    float c = 0.0;\n    \n    if (length(z) > 2.0) c = iter/30.0; else c = 0.0;\n\n    #ifndef DISTANCE\n    float h = iter / 100.0;\n    float v = iter < 100.0 ? 1.0 : 0.0;\n    #else\n    float h = iter < 100.0 ? log(iter/100.0) : d*20.0;\n    float v = iter < 100.0 ? d - floor(d) : 1.0;\n    #endif\n    float s = 1.0;\n    vec3 col = hsv2rgb(vec3(h, s, v));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}