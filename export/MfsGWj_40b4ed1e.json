{"ver":"0.1","info":{"id":"MfsGWj","date":"1703560217","viewed":21,"name":"Compass Rose English North","username":"suwqymncwec","description":"https://upload.wikimedia.org/wikipedia/commons/f/f8/Compass_Rose_English_North.svg","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["triangle","compass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Yellow vec3(1., .85, .4)\n#define Red vec3(1.000,0.160,0.007)\n\nvec2 rotate(vec2 point, float degree, vec2 pivot) {\n    float radAngle = -radians(degree);\n    float x = point.x;\n    float y = point.y;\n\n    float rX = pivot.x + (x - pivot.x) * cos(radAngle) - (y - pivot.y) * sin(radAngle);\n    float rY = pivot.y + (x - pivot.x) * sin(radAngle) + (y - pivot.y) * cos(radAngle);\n\n    return vec2(rX, rY);\n}\n\n// https://www.shadertoy.com/view/wl33Dl\nfloat triangle(vec2 uv) {\n    // vec2 t = smoothstep(uv*1.01, uv, vec2(.0, .5)) - smoothstep(uv*1.01, uv, vec2(.5, 1.-uv.x/.25));\n    vec2 t = step(uv, vec2(.0, .6)) - step(uv, vec2(.5, 1.-uv.x/.25));\n    return t.x*t.y;\n}\n\n// inverted triangle\nfloat triangleInv(vec2 uv) {\n    vec2 t = step(uv, vec2(.0, .9)) - step(uv, vec2(.5, 1.-uv.x/1.0));\n    return t.x*t.y;\n}\n\nvec3 arrow(vec2 st, int color_type, bool lay1) {\n    vec2 strot = rotate(st, 180., vec2(.5));\n    vec2 uv = st, uvx = st;\n    float a, b, c, d;\n    \n    if (lay1) {\n        uv = st+vec2(-.5,.0);\n        a = triangle(uv);\n\n        uv = strot+vec2(-.5,.0);\n        c = triangle(uv);\n\n        uv = st+vec2(.5,.0); uv.x = 1.-uv.x;\n        b = triangle(uv);\n\n        uv = strot+vec2(.5,.0); uv.x = 1.-uv.x;\n        d = triangle(uv);\n    } else {\n        uv = st+vec2(-.5,.0);\n        uvx = strot+vec2(.5,.5); uvx.x = 1.-uvx.x;\n        a = triangle(uv) + triangleInv(uvx);\n\n        uv = strot+vec2(-.5,.0);\n        uvx = st+vec2(.5,.5); uvx.x = 1.-uvx.x;\n        c = triangle(uv) + triangleInv(uvx);\n\n        uv = st+vec2(.5,.0); uv.x = 1.-uv.x;\n        uvx = strot+vec2(-0.5,0.5); uv.x = uv.x;\n        b = triangle(uv) + triangleInv(uvx);\n\n        uv = strot+vec2(.5,.0); uv.x = 1.-uv.x;\n        uvx = st+vec2(-.5,.5);\n        float d = triangle(uv) + triangleInv(uvx);\n    }\n    \n    vec3 color = vec3(1.);\n    if (color_type == 1) {    \n        color = \n            b*mix(Yellow, Red, (st.y-.5)*3.) +\n        \ta*mix(Yellow, Red, (st.y-.5)*3.)/3.;\n    }\n    if (color_type == 2) {\n         color = a*Yellow/1. + b*Yellow/3.75;\n    }\n    if (color_type == 3) {\n         color = a*Yellow/2.25 + b*Yellow/1.025;\n    }\n    if (color_type == 4) {\n         color = a*Yellow/.85 + b*Yellow/1.5;\n    }\n    \n    return color;\n}\n\nvec3 star(vec2 st, int c) {\n    bool optimize = true;\n    if (c == 1) optimize = false;\n    vec3 star = max(max(max(\n        arrow(st, c, optimize),\n        arrow(rotate(st, 90., vec2(.5)), 4, optimize)),\n        arrow(rotate(st, 270., vec2(.5)), 3, optimize)),\n        arrow(rotate(st, 180., vec2(.5)), 2, optimize));\n    return star;\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float u_time = iTime;\n    vec2 st = fragCoord/iResolution.y;\n    st.x += (iResolution.y - iResolution.x)/iResolution.y/2.;\n    st += (1.-(iResolution.xy - iMouse.xy)/iResolution.xy )/5.;\n    \n    float d = 1.-distance(iMouse.xy, st)/10.;\n    st = rotate(st, d+360.*cos(u_time/100.), vec2(.5));\n    \n    vec3 s1 = star(st, 1);\n\t\n    st = rotate(st, 360.*cos(u_time/50.), vec2(.5));\n    st *= 1.15; st -= vec2(0.075,0.075);\n    st = rotate(st, 45., vec2(.5));\n    vec3 s2 = star(st, 3);\n    \n    st = rotate(st, 360.*cos(u_time/10.), vec2(.5));\n    st *= 1.25; st -= vec2(.125, 0.125);\n\t\n    st = rotate(st, 25., vec2(.5));\n\tvec3 s3 = star(st, 3);\n\tst = rotate(st, 45., vec2(.5));\n    vec3 s4 = star(st, 3);\n    \n    \n    vec3 col = s1;\n    col = mix(s2, col, step(.05, col.x));\n\tcol = mix(s3, col,  step(.05, col.x));\n\tcol = mix(s4, col, step(.05, col.x));\n    \n    vec3 bg = distance(vec2(.5), st)/.5*Yellow;\n    col = mix(max(bg, col), col, step(.05, col.x));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}