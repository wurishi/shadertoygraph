{"ver":"0.1","info":{"id":"wlBSWK","date":"1567090654","viewed":1187,"name":"Hantzsche-Wendt manifold","username":"omeometo","description":"Visualization of a flat 3-dimensional manifold known as the Hantzsche-Wendt manifold or the didicosm. You encounter many strange creatures but none of them actually hits you because these are all images of yourself created by this looped universe.","likes":5,"published":1,"flags":33,"usePreview":0,"tags":["math","vr","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getValue(sampler2D ich, in ivec2 pos, in int ld){\n\treturn texelFetch(ich, pos, ld) * (2.0 * MAXVAL) - MAXVAL;\n}\n\nfloat griddist(in vec3 p, in vec3 scale, float r){\n\tvec3 rp = round(p/scale)*scale;\n    return length(p-rp)-r;\n}\n\nfloat dist1(in vec3 p, in vec3 cen, float r){\n    float a=0.4;\n    vec2 di = vec2(a, 0);\n    vec2 sn = vec2(1, -1);\n    vec3 cen1 = (cen + di.xxy) * sn.yxy;\n    vec3 cen2 = (cen + di.yxx) * sn.yyx;\n    vec3 cen3 = (cen + di.xyx) * sn.xyy;\n\tfloat d = griddist(p-cen, vec3(2.*a), r);\n\td = min(d, griddist(p-cen1, vec3(2.*a), r));\n\td = min(d, griddist(p-cen2, vec3(2.*a), r));\n\td = min(d, griddist(p-cen3, vec3(2.*a), r));\n    \n\treturn d;\n}\n\nvoid upd(inout vec2 d, in vec2 d_new){\n\td=(d_new.x<d.x?d_new:d);\n}\n\nvec2 dist(in vec3 p, in vec3 lcen, in vec3 ldir, in vec3 rcen, in vec3 rdir){    \n    // some stars?\n    vec2 d = vec2(dist1(p, vec3(0.1, 0.2, 0.3), 0.002), 3.0);\n    upd(d, vec2(dist1(p, vec3(0.31, 0.41, 0.59), 0.002), 3.0));\n    upd(d, vec2(dist1(p, vec3(0.27, 0.18, 0.28), 0.002), 3.0));\n\n    // eyeball\n    upd(d, vec2(min(dist1(p, lcen, 0.04), dist1(p, rcen, 0.04)), 0.0));\n\n    // iris\n    upd(d, vec2(min(dist1(p, lcen+ldir*0.03, 0.017), dist1(p, rcen+rdir*0.03, 0.017)), 1.0)); \n\n    // nose?\n    vec3 c = (lcen+rcen)*0.5;\n    vec3 e = normalize(cross(lcen-rcen, ldir+rdir));\n    upd(d, vec2(dist1(p, c+e*0.06, 0.03), 2.0)); \n\n    return d;\n}\n\nvoid getColor(out vec4 fragColor, in vec3 cam, in vec3 ray, \n             in vec3 lcen, in vec3 ldir, \n             in vec3 rcen, in vec3 rdir){\n\tfragColor = vec4(0,0,0,1);\n    float t=0.1;\n\tfloat prevd=1.0;\n    for(int i=0;i<100;i++){\n\t\tvec3 p = cam + t * ray;\n        vec2 d = dist(p, lcen, ldir, rcen, rdir);\n\t\tif(d.x<1e-3){\n            vec3 col=vec3(1.2);\n            if(d.y>2.5){\n                col = vec3(2.0, 2.0, 1.5);\n\t        }else if(d.y>1.5){\n                col = vec3(1.0, 0.0, 0.1);\n            }else if(d.y>0.5){\n                col = vec3(0.05, 0.0, 0.0);\n            }\n            float u = 1.0 - (d.x/prevd);\n\t\t\tfragColor.xyz = exp(-t*1.2)*u*col;\n            break;\n        }\n        t+=d.x;\n        prevd=d.x;\n        if(t>5.0)break;\n    }\n\n\tfragColor = pow(fragColor, vec4(0.45));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*fragCoord - iResolution.xy)/iResolution.y;\n\t\n    float t=iTime*0.1+1.0;\n    float r=10.0, h=8.0, c=0.9;\n    vec3 pos = vec3(r*cos(t), h*sin(t*c), r*sin(t));\n    vec3 fwd = vec3(r*-sin(t), h*c*cos(t*c), r*cos(t));\n\tfwd = normalize(fwd);\n    vec3 up = vec3(0,1,0);\n    up -= fwd * dot(fwd, up);\n    up = normalize(up);\n\tvec3 right = cross(fwd, up);\n    vec3 ray = normalize(fwd + 0.3 * (uv.x * right + uv.y * up));\n    \n    vec3 lcen = pos - right * 0.03;\n    vec3 rcen = pos + right * 0.03;\n\tvec3 ldir = fwd;\n    vec3 rdir = fwd;\n    \n    getColor(fragColor, pos, ray, lcen, ldir, rcen, rdir);\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 pos, in vec3 ray){\n    ivec2 l=ivec2(iResolution.xy * vec2(0.25, 0.5));\n    ivec2 r=ivec2(iResolution.xy * vec2(0.75, 0.5));\n    \n    vec3 lcen = getValue(iChannel0, l, 0).xyz;\n    vec3 ldir = getValue(iChannel1, l, 0).xyz;\n    vec3 rcen = getValue(iChannel0, r, 0).xyz;\n    vec3 rdir = getValue(iChannel1, r, 0).xyz;\n\n    getColor(fragColor, pos, ray, lcen, ldir, rcen, rdir);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void storeValue(in vec4 val, inout vec4 fragColor){\n   \tfragColor = (val + MAXVAL) / (2.0 * MAXVAL);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 pos, in vec3 ray){\n   \tivec2 ipx = ivec2(fragCoord - 0.5);\n\tstoreValue(vec4(pos,0), fragColor);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MAXVAL 100.0\n\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void storeValue(in vec4 val, inout vec4 fragColor){\n   \tfragColor = (val + MAXVAL) / (2.0 * MAXVAL);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n}\n\nvoid mainVR(out vec4 fragColor, in vec2 fragCoord, in vec3 pos, in vec3 ray){\n   \tivec2 ipx = ivec2(fragCoord - 0.5);\n\tstoreValue(vec4(ray,0), fragColor);\n}","name":"Buffer B","description":"","type":"buffer"}]}