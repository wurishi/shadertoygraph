{"ver":"0.1","info":{"id":"3tB3DG","date":"1560853377","viewed":84,"name":"Basic raymarching with lights","username":"bramoo","description":"Basic raymarching with lights","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 50.\n#define SURF_DIST .001\n\nfloat sdSphere(vec3 p, float r)\n{\n\treturn length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat D(vec3 p)\n{\n\tfloat dPlane = p.y;\n    float dSphere = sdSphere(p-vec3(0,0.2,3), 0.2);\n    float dBox = sdBox(p-vec3(1, 0.2, 3), vec3(.3, .2, .5));\n    return min(dPlane, min(dSphere, dBox));\n}\n\nvec3 N(vec3 p)\n{\n    vec2 e = vec2(.005,0);\n    return normalize(\n        vec3(\n           D(p+e.xyy)-D(p-e.xyy),\n           D(p+e.yxy)-D(p-e.yxy),\n           D(p+e.yyx)-D(p-e.yyx)\n        )\n    );\n}\n\nvec3 light(vec3 p, vec3 n, vec3 pl, vec3 cl)\n{\n    vec3 dl = normalize(pl-p);\n    return cl * dot(dl, n)/(dot(pl-p, pl-p)+1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Lights\n    vec3 l1 = vec3(0.+sin(iTime), 1, 2.+cos(iTime));\n    vec3 cl1 = vec3(1.5, 0, 0);\n    \n    vec3 l2 = vec3(1.+sin(iTime+1.5), 2, 3.+cos(iTime+1.5));\n    vec3 cl2 = vec3(0, 1.5, 0);\n    \n    vec3 l3 = vec3(0.4, 0.2, 3.+sin(iTime*2.));\n    vec3 cl3 = vec3(0, 0, 1);\n    \n    vec3 l4 = vec3(5, 1, 5);\n    vec3 cl4 = vec3(1);\n    \n\t// y = [-0.5, 0.5], x = aspect*[-0.5, 0.5]\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 worldup = vec3(0,1.,0);\n    vec3 cam = vec3(0,1.,0);\n    vec3 lookat = vec3(0,.5,1.);\n    vec3 ld = normalize(lookat-cam);\n\tvec3 right = normalize(cross(ld, worldup));\n    vec3 up = normalize(cross(right, ld));\n    \n    vec3 rd = normalize(ld + right*uv.x + up*uv.y);\n    \n    // Ray march\n    float dO = 0.;\n    for(float i=0.; i<MAX_STEPS; i++) {\n    \tvec3 p = cam + dO*rd;\n        float dS = D(p);\n        \n        dO +=dS;\n        if(dS<SURF_DIST) break;\n    }\n    \n    vec3 p = cam + dO*rd;\n    vec3 norm = N(p);\n    vec3 i1 = light(p, norm, l1, cl1);\n    vec3 i2 = light(p, norm, l2, cl2);\n    vec3 i3 = light(p, norm, l3, cl3);\n    vec3 i4 = light(p, norm, l4, cl4);\n    vec3 col = i1 + i2 + i3 + i4;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}