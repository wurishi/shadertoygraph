{"ver":"0.1","info":{"id":"WdlBWH","date":"1588163602","viewed":537,"name":"black and white stripes","username":"tiagomoraismorgado88","description":"based upon a shader by inigo quilez","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stripes","white","grey","black","uvmaps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- Fractal noise simulating heterogeneous density in galactic clouds\n// ---   -> help from Fabrice Neyret, https://www.shadertoy.com/user/FabriceNeyret2\n// ---   -> noise functions from Inigo Quilez, https://www.shadertoy.com/view/XslGRr\n\n\n// Number of computed scales\n#define NbScales 22.\n\n// Id of the lowest displayed scale (debug)\n#define FirstScale 0.\n\n// Anti aliasing\n#define LimitDetails 2.5\n#define SmoothZone 99.\n\n// Manual Zoom / Auto Zoom\n#define Anim 1\n\n// Colormap\n#define ClampLevel 1.\n\n#define ZoomDistance 10.\n\n// Size of the first Perlin Noise grid (debug)\n#define FirstDivision 8.\n\n\n// 0 : multiplicative\n// 1 : additive\n#define Mode 0\n\n#define GazConcentration 0.\n\n// Caracteristic ratio of the frequencies (0.5 for octaves)\n#define fRatio 0.0314\n\n\n\nbool keyToggle(int ascii) {\n\treturn !(texture(iChannel2,vec2((.5+float(ascii))/128.,0.3751)).x > 0.);\n}\n\n// --- noise functions from https://www.shadertoy.com/view/XslGRr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 hash( vec2 p ) {  \t\t\t\t\t\t// rand in [-1,1]\n\tp = vec2( dot(p,vec2(128.1,311.7)),\n\t\t\t  dot(p,vec2(269.5,183.3)) );\n\treturn -1. + 2.*fract(sin(p+20.)*53758.5453123);\n}\nfloat noise( in vec2 p ) {\n    vec2 i = floor(p), f = fract(p);\n\tvec2 u = f*f*(3.-2.*f);\n    return mix( mix( dot( hash( i + vec2(0.,0.) ), f - vec2(0.,0.) ), \n                     dot( hash( i + vec2(1.,0.) ), f - vec2(1.,0.) ), u.x),\n                mix( dot( hash( i + vec2(0.,1.) ), f - vec2(0.,1.) ), \n                     dot( hash( i + vec2(1.,1.) ), f - vec2(1.,1.) ), u.x), u.y);\n}\n\n\n// -----------------------------------------------\n\nvec3 colormap(float value) {\n\tfloat maxv = ClampLevel;\n\tvec3 c1,c2;\n\tfloat t;\n\tif (value < maxv / 3.) {\n\t\tc1 = vec3(1.);   \t   c2 = vec3(1., 1., .5);\n\t\tt =  1./3.;\n\t} else if (value < maxv * 2. / 3.) {\n\t\tc1 = vec3(1., 1., .5); c2 = vec3(1., 0,  0.);\n\t\tt =  2./3. ;\n\t} else {\n\t\tc1 = vec3(1., 0., 0.); c2 = vec3(0.);\n\t\tt =  1.;\n\t}\n\tt = (t*maxv-value)/(maxv/3.);\n\treturn t*c1 + (1.-t)*c2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) { // --------------------------------------\n    \n    float t = iTime;\n    \n    vec2 uv = fragCoord.xx/ iResolution.x;\n\n\tfloat d = 1.; // initial density\n\t\n #if Anim\n\tfloat cycle = cos(mod(-t,100.)/100.*2.*3.14);\n\tfloat n_tiles_level_1 = exp(cycle*cycle*ZoomDistance)*pow(2.,FirstDivision);\n#else\n\tfloat n_tiles_level_1 = exp(iMouse.x/iResolution.x*ZoomDistance)*pow(2.,FirstDivision);\n#endif\n\t\n\t// zoom and centering\n\tuv = (uv - vec2(.9,.5))*n_tiles_level_1 + vec2(.9,.5);\n\t\n\tfloat theta = 4.+.008*t; // some rotations, not necessary\n    mat2 m = fRatio*mat2( cos(theta),sin(theta), \n\t\t\t\t\t -sin(theta),cos(theta) );\n\t\t\n\t// computation of the multiplicative noise\n\tfloat q = 1.;\n\tfor (float i = 0.; i < NbScales; i++) {\n\t\tif (d<1e-2) continue;\n\t\t\n\t\t// multiply the amplitude to maintain the total density\n\t\tfloat c = (i+1.< NbScales) ? 2. : 1.;\n\t\t\n\t\tfloat nn = noise(uv + 10.7*i*i);\n\n\t\tfor (float j = 0.; j < GazConcentration; j++) {\n\t\t\tnn = sin(nn*3.14159265359/2.);\n\t\t}\n\t\t\t\n#if Mode == 0\n\t\tfloat n = c* 0.5*(1.+nn);\n#else\n\t\tfloat n = nn;\n#endif\t\n\t\t\n\t\t// compute only the visible scales\n\t\tfloat crit = n_tiles_level_1 *q - iResolution.x/LimitDetails;\n\t\tif (crit < SmoothZone && i >= FirstScale) {\n\t\t\tif (crit>0.) {  // avoid aliasing\n\t\t\t\tfloat t = crit/SmoothZone;\t\t\t\t\n\t\t\t\tn = n*(1.-t);\n#if Mode == 0\n\t\t\t\tn += t;\n#endif\n\t\t\t}\n\t\t\t\n#if Mode == 0\n\t\t\td *= n;\n#else\n\t\t\td += n*(0.5);\n#endif\t\t\t\n\t\t\t\n\t\t\t\n\t\t}\n\t\n\t\tuv = m*uv; q*= fRatio; // go to the next octave\n\t}\n\t\n\td = clamp(d,0.0,d);\n\tfragColor.xyz = (keyToggle(67)) ? vec3(exp(-d)) :colormap(exp(-d));\n}","name":"Image","description":"","type":"image"}]}