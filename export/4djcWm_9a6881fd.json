{"ver":"0.1","info":{"id":"4djcWm","date":"1492376995","viewed":107,"name":"CrownFractal","username":"Fading","description":"Played around with elliptic curves, plugged in some complex numbers and played around some more. Calling it Crown Fractal because of the 3 to 6 jags on each of the four fractal components.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Copyright (c) 2017 Niklas Rosenstein\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nvec2 cmpxmul(in vec2 a, in vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.y * b.x + a.x * b.y);\n}\n\nvec2 cmpxpow(in vec2 c, int p) {\n\tfor (int i = 0; i < p; ++i) {\n\t\tc = cmpxmul(c, c);\n\t}\n    return c;\n}\n\nint crown(in vec2 z, in vec2 c, int max) {\n    int num = 0;\n    while (length(z) < 2.0 && num < max) {\n     \tz = cmpxpow(z, 3) + z - cmpxpow(c, 2);\n        num++;\n    }\n    return num;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float t = iTime / 16.0;\n    vec2 mp = vec2(cos(t), sin(t)) * 0.8;\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    int max = 12;\n    int num = crown(mp, uv, max);\n    float x = float(num) / float(max);\n\tfragColor = vec4(x, x, x, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}