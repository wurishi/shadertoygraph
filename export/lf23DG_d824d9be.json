{"ver":"0.1","info":{"id":"lf23DG","date":"1704592386","viewed":60,"name":"Split the cube","username":"Elsio","description":"fixed!","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["cubes","subdivide","method"],"hasliked":0,"parentid":"McB3Rd","parentname":"Cristais"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution\n#define pi 3.14\n#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define cor(a) (cos(a * 6.3 + vec4(0, 23, 21, 0) * a) * .6 + .6)\n#define h11(a) fract(sin((a) * 12.9898) * 43758.5453123)\n#define pmin(p) min(p.x, min(p.y, p.z))\n#define expandFunc(x, t) smoothstep(-1.,1., sin(t + x) * 2. - .5) * 3. + 1.\n#define box(p, b) length(max(abs(p) - (b), .0))    // problem??\n\nvec3 rdg; float id;\n\nfloat blocks(vec3 p, vec3 rd) {\n    vec3 size  = vec3(20),\n         dMin  = -.5 * size,\n         dMax  =  .5 * size,\n         dMini = dMin,\n         dMaxi = dMax,\n         delta = dMax - dMin,\n         div, center;\n    \n    float i, t = iTime;\n          \n    bvec3 isEdge;\n    \n    while(i++ < 3.) { // split the cube \n        dMax = mix(dMax,  div, step(p, div));\n        dMin = mix( div, dMin, step(p, div));\n        center = (dMin + dMax) / 2.;\n        delta = dMax - dMin;\n        \n        id = length(mix(-div, div, step(p, div)) + 1.);\n\n        div = \n            clamp(\n                vec3(\n                    h11(i + id     ), \n                    h11(i + id + 2.), \n                    h11(i + id + 4.)\n                ) * delta + dMin,\n                \n                dMin + 2., dMax - 2.);\n    }\n    \n    vec3 dAxis = // the magic!\n            abs( p \n              - mix(\n                    dMin, \n                    dMax, \n                    step(.0, rd)\n                )\n            ) / (abs(rd) + 1E-4);\n            \n            \n    float d, dEdge = pmin(dAxis);\n    \n    \n    // move\n    isEdge = \n        bvec3(\n            dMaxi.x - dMax.x < .01 ||  dMin.x - dMini.x < .01,\n            dMaxi.y - dMax.y < .01 ||  dMin.y - dMini.y < .01,\n            dMaxi.z - dMax.z < .01 ||  dMin.z - dMini.z < .01 \n        );                 \n        \n    d = box(p - center, delta * .4 - .2) - .2;\n    if(any(isEdge)) {\n        float expand = expandFunc(h11(id), t);\n        if(isEdge.x) center.x *= expand;\n        if(isEdge.y) center.y *= expand;\n        if(isEdge.z) center.z *= expand;\n        d = box(p - center, delta * .5 - .2) - .2;\n    }\n\n    return min(d, dEdge);\n}\n\n\nfloat map(vec3 p) {\n    vec3 D = rdg;\n    float t = iTime;\n    \n    p.xz *= rot(cos(2.*t));\n    p.xy *= rot(t * .1);\n    \n    D.xz *= rot(cos(2.*t));\n    D.xy *= rot(t * .1);\n\n    return blocks(p, D) + .01;\n}\n\n\nvoid mainImage(out vec4 O, vec2 u){\n    float r, i, d, far = 80.,\n          a = iTime, s = 1.; \n\n    vec3  N, e = vec3(0, .001, 0),\n          p = vec3(0, 0, -30),\n          D = normalize(vec3(u, R.y) - .5 * R ),\n          L = normalize(vec3(cos(a),sin(a), 0) - D);\n\n    rdg = D; // the magic!\n\n    while(i++<60. && d<far && s>.01)\n        s = map(p),\n        d += s, \n        p += s * D;\n\n    N = vec3( map(p + e.yxx), map(p + e),\n              map(p + e.xxy)) - map(p);\n            \n    r = max(0., dot(L, normalize(N)));\n\n    O = mix( (.3 * r + .4)          // diff\n                 * cor(id)          // alb\n                 + pow(r, 115.),    // spec  \n             vec4(6, 7, 9, 0)       // bg\n                 * (.1 - length((u - .5 * R.xy) / R.y) * .07), // vig\n        pow(clamp(d / far, 0., 1.), 1.5)); // fog\n}","name":"Image","description":"","type":"image"}]}