{"ver":"0.1","info":{"id":"dt2cWR","date":"1691677309","viewed":79,"name":"sinh()","username":"altunenes","description":"ref: http://paulbourke.net/fractals/sinh/  :love:\nFirst version: https://www.shadertoy.com/view/DdXfWX :)\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","reproduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//AA technique from iq. formula and inspiration: http://paulbourke.net/fractals/sinh/\n// sinh() first version: https://www.shadertoy.com/view/DdXfWX\n#define AA 3\n\nconst float PI = 3.14159265;\nconst int iter =65;\nconst float zz = 3.5;\n\nvec2 c_mul(vec2 a, vec2 b) {\n    return vec2(a.x * b.x - a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 c_sinh(vec2 z) {\n    return vec2(sinh(z.x) * cos(z.y), cosh(z.x) * sin(z.y+0.01));\n}\n\nvec2 c_abs(vec2 z) {\n    return vec2(abs(z.x), abs(z.y));\n}\n\nvec2 c_sinh_pow4(vec2 z) {\n    vec2 sinh_z = c_sinh(z);\n    return c_mul(c_mul(sinh_z, sinh_z), c_mul(sinh_z, sinh_z));\n}\n\nvec2 implicit(vec2 z, vec2 c) {\n    int i;\n    for (i = 0; i < iter; i++) {\n        z = c_abs(c_sinh_pow4(z)) + c;\n        if (dot(z, z) > zz * zz) break; \n    }\n    return vec2(float(i), dot(z, z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    float frequency = 1.0;  // Increase this to increase color frequency\n    float oscillating_frequency = 1.0;  // You can adjust this value\n    float phase = 45.2;  // You can adjust this value\n    float A = 5.25 * sin(oscillating_frequency * iTime + phase) + 5.75;\n    for( int m=0; m<AA; m++ ) // AA Techinque from iq\n    for( int n=0; n<AA; n++ )\n    {\n    vec2 uv = ((fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x)*2.0) * 0.5;\n       float c_value = mix(2.197, 2.99225, 0.01 + 0.01 * sin(0.1 * iTime));\n       float oscillation = 0.00004 + 0.02040101 * (sin(0.1 * iTime) + 0.1); \n        vec2 c = vec2(oscillation, c_value);\n\n        vec2 z_and_i = implicit(uv, c);\n        float iter_ratio = z_and_i.x / float(iter);\n        float lenSq = z_and_i.y;\n\n        //sorry for mess about colors, I set most of these arbitrarily. :( I was looking more sharper colors\n        vec3 col1 = 0.5 + 0.5 * cos(3.0 + iTime + vec3(0.0, 0.5, 1.0) + PI * vec3(2.0 * lenSq));\n        vec3 col2 = 0.5 + 0.5 * cos(4.1 + iTime + PI * vec3(lenSq));\n        vec3 col3 = 4.5 + 0.5 * cos(3.0 + iTime + vec3(1.0, 0.5, 0.0) + PI * vec3(2.0 * sin(lenSq)));\n        vec3 gradient[3];\n        gradient[0] = vec3(0.5, 0.25, 0.05);\n        gradient[1] = vec3(0.4, 0.2, 0.0);\n        gradient[2] = vec3(0.7, 0.35, 0.15);\n        float gradientIndex = mod(iter_ratio * 24.0, 12.0); //decrease \"24_f32\" for less details; or just use \"iter_ratio\" instead of lenSq  \n        int index1 = int(gradientIndex);\n        int index2 = int(mod(gradientIndex + 21.0, 3.0));\n        float blend = fract(gradientIndex);\n        vec3 col4 = mix(gradient[index1], gradient[index2], blend);\n        col += sqrt(col1 * col2 * col3) * col4;\n    \n    }\n\n    col = sqrt(col / float(AA*AA)); \n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}