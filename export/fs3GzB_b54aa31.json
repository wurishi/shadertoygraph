{"ver":"0.1","info":{"id":"fs3GzB","date":"1630018876","viewed":113,"name":"Undefined feedback???","username":"nnorm","description":"A very weird feedback effect...\n\nEDIT: fixed the clamp parameter order, added a comment to highlight the weird stuff, added global constants to clear up the goal of some values.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","cube","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 col = 1.0-texture(iChannel0, uv);  \n    fragColor = pow(col, vec4(vec3(1.0/2.22), 1.0));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float tFar = 128.0;\nconst float tEpsilon = 0.001;\nconst int maxIterationCount = 40;\n\n//IQ's function from: https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, float b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdf(in vec3 p)\n{\n    float alpha = iTime * 0.8;\n    mat3 rx = mat3(1.0, 0.0, 0.0, \n                   0.0, cos(alpha), -sin(alpha),\n                   0.0, sin(alpha), cos(alpha));\n    mat3 ry = mat3(cos(alpha), 0.0, sin(alpha), \n                   0.0, 1.0, 0.0,\n                   -sin(alpha), 0.0, cos(alpha));\n    mat3 rz = mat3(cos(alpha), -sin(alpha), 0.0,\n                   sin(alpha), cos(alpha), 0.0,\n                   0.0, 0.0, 1.0);\n    \n\n   return sdBox(rx*ry*rz*(p + vec3((sin(iTime* 0.5)) * 0.25, 0.0, 0.0)), 0.3); \n}\n\nvec4 trace(in vec3 ro, in vec3 rd)\n{\n    vec3 p = ro;\n    float d = sdf(p);\n    \n    for(int i = 0; i < maxIterationCount; i++)\n    {\n        if(p.z >= tFar || d <= tEpsilon)\n            break;\n        \n        p += rd * d;\n        d = sdf(p);\n    }\n    \n    return vec4(p, d);\n}\n\nvec3 col(in vec3 p)\n{\n    return 0.5 + 0.5*cos(iTime+p.x*p.y*p.z+vec3(0,2,4));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec4 dt = trace(vec3(0.0, 0.0, 1.0),         //Ray Origin\n                    normalize(vec3(uv.xy, -1.0)) //Ray Direction\n                    );\n    \n    //Previous frame sample\n    vec4 prevColor = clamp(texture(iChannel0, fragCoord/iResolution.xy), vec4(0.0), vec4(1.0));\n    \n    if(dt.z <= tFar)\n    {\n        fragColor = vec4(col(dt.xyz), 1.0);\n    }\n    else\n    {\n        //wtf?\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    \n    //magic mix???\n    fragColor = mix(fragColor, prevColor, clamp(0.9 * exp(iTimeDelta), 0., 1.));\n}","name":"Buffer A","description":"","type":"buffer"}]}