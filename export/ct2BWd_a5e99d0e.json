{"ver":"0.1","info":{"id":"ct2BWd","date":"1694646847","viewed":10,"name":"Flower Puzzle 2 - CIS 5660","username":"sagescherrytree","description":"CIS 5660 Lab 1.\nSide note: ABSOLUTE SPEEEED.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flower","puzzle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14;\nconst float freq = PI * 0.4;\n\n/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{\n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n\nfloat computeRadius(vec2 uv)\n{\n    float radius = 0.25 * iResolution.y;\n            \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    \n    uvCenter = rotatePoint2d(uvCenter, vec2(0.0, 0.0), iTime);\n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);  \n    \n    // No abs b/c we want negative value.\n    float time = cos(iTime * 5.0);\n    // Cos(iTime * freq) will increase frequency of oscillation\n    // Thickness of flower\n    float thickness = 20.0;\n    // Width of flower\n    float width = 80.0;\n    // Triangle wave oscillates an angle a from centre at freq of PI/4 at amplitude 1.\n    float result = radius + thickness + width * time * triangleWave(a, PI/4.f, 1.0);\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat radius = computeRadius(uv);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(255.0, 255.0, 210.0), 1.0);\n\t\n\t// Circle\n\tvec3 red = rgb(225.0, 50.0, 70.0);\n\tvec4 layer2 = circle(uv, center, radius, red);\n\t\n\t// Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\nfloat gain (float g, float t) {\n    if (t < 0.5f) {\n        return bias(1.0 - g, 2.0 * t) / 2.f;\n    } else {\n        return 1.0 - bias(1.0 - g, 2.0 - 2.0 * t) / 2.0;\n    }\n}\n\nfloat sawtoothWave(float x, float freq, float amplitude) {\n    return (x * freq - floor(x * freq)) * amplitude;\n}\n\nfloat triangleWave(float x, float freq, float amplitude) {\n    return 2.0 * abs(mod((x * freq), amplitude) - (0.5 * amplitude));\n}\n\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\n\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}