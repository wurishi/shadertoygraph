{"ver":"0.1","info":{"id":"X3XSRH","date":"1709114509","viewed":69,"name":"mandelbrot attempt 2","username":"hackerzilla","description":"Learning fractals. Got it working!\n\nUse arrow keys to pan, Z to zoom in and X to zoom out. Enjoy exploring the mandelbrot!","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["mandelbrot","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = texelFetch(iChannel1, ivec2(0, 2), 0).x;\n    //float scale = 1.; // + 0.49 * sin(iTime * 0.5);\n    \n    // load stored offset from texture\n    vec2 offset = vec2(texelFetch(iChannel1, ivec2(0, 0), 0).x, \n                       texelFetch(iChannel1, ivec2(0, 1), 0).x);\n    \n    //vec2 offset = vec2(-1.1, 0.25); // point to zoom in on\n    \n\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv = scale * (uv + offset / scale); // divide by scale to keep offset in original space\n\n    // Time varying pixel color\n    vec3 col;\n    \n    vec2 z = vec2(0.0, 0.0); // z = a + bi\n    float re, im;\n    \n    int i;\n    for (i = 0; i < 10000; i++)\n    {\n        // z = z^2 + (x,y)\n        re = z.x * z.x - z.y * z.y + uv.x; // a^2 - b^2 + x\n        im = 2.0 * z.x * z.y + uv.y; // 2ab + y\n        z = vec2(re, im);\n        if (length(z) >= 2.0)\n        {\n            break;\n        }\n    }\n    \n    if (length(z) > 2.)\n    {\n        // interpolate between blue on the low end to red/orange on the high end\n        vec3 cool = vec3(219./256., 68./256., 41./256.);\n        //vec3 cool = vec3(148./256., 221./256., 230./256.);\n        vec3 hot = vec3(16./256., 63./256., 80./256.);\n        float t = float(i)/50. * pow(2., -scale); // these values chosen to make it look nice no matter the zoom level\n        //float t = float(i);\n        // the smaller the i, the faster uv = z diverges -> \"hotter\" the color is\n        // therefore, the smaller t is, the more of the hot color we want\n        vec3 lerpColor = hot * (1. - t) + cool * t;\n        col = vec3(lerpColor);  \n    }\n    else \n    {\n        col = vec3(0.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float panSpeed = 0.01;\nconst float zoomSpeed = 0.01;\nconst float minScale = 0.0000001;\nconst float defaultScale = 2.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iTime < 0.1)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n    vec4 col = vec4(0.0);\n    // offset.x\n    if (int(fragCoord.x) == 0 && int(fragCoord.y) == 0)\n    {\n        float left = texelFetch(iChannel0, ivec2(KEY_LEFT, 0), 0).x;\n        float right = texelFetch(iChannel0, ivec2(KEY_RIGHT, 0), 0).x;\n        float diff = right - left; // left is negative dir\n        float prev = texelFetch(iChannel1, ivec2(fragCoord), 0).x; \n        float relativePanSpeed = panSpeed * texelFetch(iChannel1, ivec2(0, 2), 0).x;\n        col = vec4(prev + relativePanSpeed * diff);\n    }\n    // offset.y \n    if (int(fragCoord.x) == 0 && int(fragCoord.y) == 1)\n    {\n        float up = texelFetch(iChannel0, ivec2(KEY_UP, 0), 0).x;\n        float down = texelFetch(iChannel0, ivec2(KEY_DOWN, 0), 0).x;\n        float diff = up - down; // down is negative dir\n        float prev = texelFetch(iChannel1, ivec2(fragCoord), 0).x; \n        float relativePanSpeed = panSpeed * texelFetch(iChannel1, ivec2(0, 2), 0).x;\n        col = vec4(prev + relativePanSpeed * diff);\n    }\n    // scale factor\n    if (int(fragCoord.x) == 0 && int(fragCoord.y) == 2)\n    {\n        float zoomIn = texelFetch(iChannel0, ivec2(KEY_Z, 0), 0).x;\n        float zoomOut = texelFetch(iChannel0, ivec2(KEY_X, 0), 0).x;\n        float diff = zoomOut - zoomIn; // zoom in means reduce scale factor\n        float prev = texelFetch(iChannel1, ivec2(fragCoord), 0).x; \n        if (prev < minScale)\n        {\n            col = vec4(defaultScale);\n        }\n        else\n        {\n            float relativeZoomSpeed = zoomSpeed * prev;\n            col = vec4(prev + relativeZoomSpeed * diff);\n        }\n    }\n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_X     = 88;\nconst int KEY_Z     = 90;","name":"Common","description":"","type":"common"}]}