{"ver":"0.1","info":{"id":"M3XcRs","date":"1726555428","viewed":18,"name":"Hexagonal tiling basic","username":"jcponcemath","description":"Learning how to make an hexagonal tiling.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tiling","hexagonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See Art of Code: Hexagonal Tiling Explained!\n// https://www.youtube.com/watch?v=VmrIDyYiJBA\n\nfloat HexDist(vec2 p){\n    p = abs(p);\n    float c = dot(p, normalize(vec2(1, 1.73)));\n    c= max(c,p.x);\n    return c;\n}\n\nvec4 HexCoord(vec2 uv){\n    vec2 r = vec2(1, 1.73);\n    vec2 h = r * 0.5;\n    vec2 a = mod(uv, r) - h;\n    vec2 b = mod(uv - h, r) - h;\n    \n    vec2 gv;\n    if(length(a) < length(b))\n        gv = a;\n    else \n        gv = b;\n        \n    \n    vec2 id = uv - gv;\n    return vec4(gv.x, gv.y, id.x, id.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.0);\n    \n    uv *= 5.0;\n    \n    \n    vec4 hc = HexCoord(uv);\n    \n    float c = smoothstep(0.0, 0.05, hc.x *( sin(hc.z*iTime)+ sin(hc.w*iTime)));\n    col += c;\n        \n    //col.gb = HexCoord(uv).zw*0.2;\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}