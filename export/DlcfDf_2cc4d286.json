{"ver":"0.1","info":{"id":"DlcfDf","date":"1701653174","viewed":39,"name":"ATIVIDADE - 01","username":"TheShadersX","description":"Atividade","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["atividade"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Função para carregar a cor da textura\nvec4 loadImage(vec2 fragCoord)\n{\n    // Coordenadas da tela (x e y)\n    vec2 uv = fragCoord/iResolution.xy * 1.0;\n    \n    vec4 image = texture(iChannel0, uv);\n\n    return image;\n}\n\n// Função para converter uma cor para escala de cinza\nvec4 psBW(vec4 color)\n{\n    float bw = (min(color.r, min(color.g, color.b)) + max(color.r, max(color.g, color.b))) * 0.5;\n    return vec4(bw, bw, bw, 1.0);\n}\n\n// Função principal do shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Carregando a cor do fragmento da textura\n    vec4 image = loadImage(fragCoord);\n    \n    // Inicializando variáveis\n    float mask = 0.0;\n    \n    // Carregando a máscara de recorte\n    vec4 maskColor = texture(iChannel1, fragCoord/iResolution.xy);\n\n    // Definindo parâmetros\n    float threshold = 0.16;\n    float greenBias = 1.75;\n    float silhouetteThreshold = 0.1;\n    float silhouetteIntensity = 2.0; // Fator de intensidade da silhueta\n    float edgeThreshold = 0.01; // Limiar para remover sombra nas bordas\n    \n    // Isolando a cor verde e trocando por vermelho usando a máscara de recorte\n    if(image.r - image.g > threshold * greenBias && image.r - image.b > threshold && maskColor.a > 0.5)\n    {\n        mask = 1.0;\n        fragColor = vec4(1.0, 0.0, 0.0, image.a); // Trocando para vermelho\n    }\n    else {\n        // Removendo o fundo usando chroma key\n        vec3 keyColor = vec3(0.0, 1.0, 0.0); // Cor de chroma key (verde)\n        float keyThreshold = 0.1; // Limiar de tolerância para chroma key\n\n        // Descartando pixels próximos ao chroma key\n        if (distance(image.rgb, keyColor) < keyThreshold)\n            discard;\n        else {\n            // Desenhando silhuetas com base na diferença entre pixels em todas as direções\n            vec4 leftColor = texture(iChannel0, (fragCoord - vec2(1.0, 0.0))/iResolution.xy);\n            vec4 rightColor = texture(iChannel0, (fragCoord + vec2(1.0, 0.0))/iResolution.xy);\n            vec4 upColor = texture(iChannel0, (fragCoord + vec2(0.0, 1.0))/iResolution.xy);\n            vec4 downColor = texture(iChannel0, (fragCoord - vec2(0.0, 1.0))/iResolution.xy);\n            vec4 upLeftColor = texture(iChannel0, (fragCoord + vec2(-1.0, 1.0))/iResolution.xy);\n            vec4 upRightColor = texture(iChannel0, (fragCoord + vec2(1.0, 1.0))/iResolution.xy);\n            vec4 downLeftColor = texture(iChannel0, (fragCoord + vec2(-1.0, -1.0))/iResolution.xy);\n            vec4 downRightColor = texture(iChannel0, (fragCoord + vec2(1.0, -1.0))/iResolution.xy);\n            \n            vec3 silhouetteColor = vec3(0.1, 0.1, 0.1); // Cor da silhueta (cinza escuro)\n\n            // Verificando a diferença entre os pixels nas bordas\n            if (length(image.rgb - leftColor.rgb) > silhouetteThreshold ||\n                length(image.rgb - rightColor.rgb) > silhouetteThreshold ||\n                length(image.rgb - upColor.rgb) > silhouetteThreshold ||\n                length(image.rgb - downColor.rgb) > silhouetteThreshold ||\n                length(image.rgb - upLeftColor.rgb) > silhouetteThreshold ||\n                length(image.rgb - upRightColor.rgb) > silhouetteThreshold ||\n                length(image.rgb - downLeftColor.rgb) > silhouetteThreshold ||\n                length(image.rgb - downRightColor.rgb) > silhouetteThreshold)\n            {\n                // Verificando se a diferença é maior que o limiar para remover sombras nas bordas\n                if (length(image.rgb - leftColor.rgb) > edgeThreshold ||\n                    length(image.rgb - rightColor.rgb) > edgeThreshold ||\n                    length(image.rgb - upColor.rgb) > edgeThreshold ||\n                    length(image.rgb - downColor.rgb) > edgeThreshold ||\n                    length(image.rgb - upLeftColor.rgb) > edgeThreshold ||\n                    length(image.rgb - upRightColor.rgb) > edgeThreshold ||\n                    length(image.rgb - downLeftColor.rgb) > edgeThreshold ||\n                    length(image.rgb - downRightColor.rgb) > edgeThreshold)\n                {\n                    // Aplicando a cor da silhueta com intensidade\n                    fragColor = vec4(silhouetteColor * silhouetteIntensity, image.a);\n                }\n                else\n                {\n                    // Aplicando a máscara na escala de cinza\n                    fragColor = mix(psBW(image), image, mask);\n                }\n            }\n            else\n            {\n                // Aplicando a máscara na escala de cinza\n                fragColor = mix(psBW(image), image, mask);\n            }\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}