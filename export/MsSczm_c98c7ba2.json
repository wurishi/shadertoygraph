{"ver":"0.1","info":{"id":"MsSczm","date":"1491335638","viewed":188,"name":"fake chladni plate","username":"nshelton","description":"Turn COLORS on to switch experimenting with chaldni plate basis i found in a paper, which is really interesting http://www.unige.ch/~gander/Preprints/Ritz.pdf pae 12 has the basis used above.  The actual system is way more complicated... \n\nTried some dfdy","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["visualization","polynomial","chladni"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define COLORS 1 // draw nice gradient\n#define COLORS 0 // draw contours\n\n\n// See https://iquilezles.org/articles/palettes  \nvec3 pal( in float t )\n{\n    vec3 a = vec3(0.5,0.5,0.5);\n    vec3 b = vec3(0.5,0.5,0.5);\n    vec3 c = vec3(-1);\n    vec3 d = vec3(0.1,0.2,0.30) +0.4;\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 coord = 2.0 *  (uv - 0.5) ;//* vec2(iResolution.x / iResolution.y , 1.0);\n    float x = coord.x;\n    float y = coord.y;\n    \n    float x2 = x*x;\n    float y2 = y*y;\n    float x4 = x2*x2;\n    float y4 = y2*y2;\n    float x6 = x4*x2;\n    float y6 = y4*y2;\n    \n    float y2_2 = (1.0-y2) * (1.0-y2);\n    float x2_2 = (1.0-x2) * (1.0-x2);\n    // ensures boundary condition\n    float bounds = y2_2 * x2_2; \n    \n    //Basis from \n    //http://www.unige.ch/~gander/Preprints/Ritz.pdf\n    //ψ1(x, y) = (1 − x2)2(1 − y2)2,\n\t//ψ2(x, y) = (1 − x2)2(1 − y2)2(x2 + y2),\n\t//ψ3(x, y) = (1 − x2)2(1 − y2)2(x4 + y4),\n\t//ψ4(x, y) = (1 − x2)2(1 − y2)2x2y2,\n\t//ψ5(x, y) = (1 − x2)2(1 − y2)2(x6 + y6),\n\t//ψ6(x, y) = (1 − x2)2(1 − y2)2(x4y2 + x2y4)....\n        \n\n    float a = bounds;\n    float b = bounds * (x2 + y2);\n    float c = bounds * (x4 + y4);\n    float d = bounds * x2 * y2;\n    float e = bounds * (x6 + y6);\n    \n    float f = bounds * (x4*y2 + x2*y4);\n    float g = bounds * ( y2 + x2*y4);\n\n    // don't know about these weights they just look good\n    float time = iTime;\n    float t = 0.0;\n    t += a * sin(time);\n    t += b * sin(time / 2.0) * 10.0;\n    t += c * sin(time / 4.0) * 20.0;\n    t += d * sin(time / 8.0) * 40.0;\n    t += e * sin(time / 16.0) * 30.0;\n    t += f * sin(time / 32.0) * 50.0;\n    t += g * sin(time / 64.0) * 5.0;\n    \n    float v = sin(t) ;\n#if COLORS    \n    vec3 color = pal(t/2.0);\n#else\n    float contour =sin( t * 3.0);\n    contour = smoothstep(0.1,0.5, contour) ;\n\n    // ramp and reversed ramp make a bump\n    float line =  length(vec2(dFdy(contour), dFdx(contour))) * 2.0;\n\n    vec3 color = vec3(line);\n#endif\n    color += vec3(line); //* pal(t/2.0);\n\n    \n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}