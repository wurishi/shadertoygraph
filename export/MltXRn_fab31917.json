{"ver":"0.1","info":{"id":"MltXRn","date":"1477826949","viewed":278,"name":"Simple scene for Unreal","username":"Andree","description":"Nothing fancy, just needed a simple scene for use in an Unreal material. Had to put everything into one function since the function names are auto generated by Unreal.\n\nTo see the hlsl version in action: https://youtu.be/zMmW1WuJXd0","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","unreal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy - 0.5) * vec2(2.0 * iResolution.x / iResolution.y, 2.0);\n\n    vec3 origin = vec3(0.0, 0.0, -0.0);\n    float angle = iTime * 0.25 + sin(iTime * 0.15 + 0.3);\n    vec3 direction = normalize(vec3(uv, 1.0));\n    direction.xz *= mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    \n    float sphereRadius = 0.125 + 0.1 * sin(iTime * 3.1);\n    vec3 qubeDisplacement = vec3(0.5, 0, iTime);\n    vec3 qubeHalfDistance = vec3(0.125, 0.025, 0.125);\n    vec4 dist;\n\n    float t = 0.0;\n    for (int i = 0; i < 50; ++i)\n    {\n        vec3 point = origin + direction * t;\n\n        // distance/normal function\n        vec3 closestCubePosition = fract(point + qubeDisplacement) - 0.5;\n        vec4 cubeDistance = vec4(0, 0, -2, length(max(abs(closestCubePosition) - qubeHalfDistance,0.0))); // make always full lit\n\n        vec3 closestSpherePosition = fract(point) - 0.5;\n        vec4 sphereDistance = vec4(normalize(closestSpherePosition), length(closestSpherePosition) - sphereRadius);\n\n        dist = (cubeDistance.w < sphereDistance.w) ? cubeDistance : sphereDistance;\n\n        t += dist.w * 1.0;\n        if (dist.w < 0.005)\n            break;\n    }\n    dist = vec4(dist.xyz, t);\n    \n    float fog = min(4.0 / (1.0 + 0.5 * dist.w * dist.w), 1.0);\n    \n    vec3 lightDirection = vec3(0.0, 0.0, -1.0);\n    vec3 materialColor = floor(0.5 + length(dist.xyz)) == 2.0 ? vec3(0.3, 0.59, 0.72) : vec3(0.72, 0.59, 0.3);\n    \n    float light = clamp(dot(lightDirection, dist.xyz), 0.0, 1.0) + 0.2;\n                     \n    \n\tfragColor = vec4(materialColor * (light * fog),1.0);\n}","name":"Image","description":"","type":"image"}]}