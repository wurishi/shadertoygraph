{"ver":"0.1","info":{"id":"4cfXDX","date":"1705773690","viewed":71,"name":"Fork Checkerboar Floor","username":"mehow_one","description":"Trying to play around with this.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","checkerboard"],"hasliked":0,"parentid":"wtfXDj","parentname":"Checkerboard Floor"},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INFINITY 100.0\n#define EPSILON 0.01\n#define PRECIS 32\n#define AA 8\n#define PI 3.14159\n\nstruct HIT\n{\n    vec3 point;\n    float dist;\n};\n\nfloat plane(vec3 p)\n{\n    return p.y;\n}\n\nfloat world(in vec3 p, in float t)\n{\n    float plane1 = plane(p);\n    \n    return plane1;\n}\n\nHIT trace(in vec3 ro, in vec3 rd, in float t)\n{\n    vec3 p = ro;\n    for(int i=0; i<PRECIS; i++)\n    {\n        float d = world(p,t);\n        \n        if(d >= INFINITY)\n            return HIT(p, INFINITY);\n        \n        p += rd * d;\n        \n        if(d <= EPSILON)\n            break;\n    }\n    \n    return HIT(p, length(p-ro));\n}\n\nvec3 material(in vec3 p)\n{\n     float scale = 1./4.;\n     float ratio = iResolution.y/iResolution.x;\n     vec2 SIZE = vec2(-scale * ratio,scale);\n     vec2 movement = vec2(0.,iTime * 4.);\n    return texture(iChannel1,fract(p.xz * SIZE + movement)).rgb;\n}\n\nvec3 image(in vec2 uv, in float t)\n{\n    float tt = 2.0*sin(t*0.9);\n    \n\tvec3 ro = vec3(cos(tt)*15.0, 10.0, 9.0*-sin(tt));\n    vec3 ta = vec3(0., 0., 0.);\n    vec3 up = normalize(vec3(0.5+0.5*sin(t), 1., 0.));\n    vec3 cw = normalize(ta-ro);\n    vec3 cu = normalize(cross(cw,up));\n    vec3 cv = normalize(cross(cu,cw));\n    mat3 cam = mat3(cu,cv,cw);\n\tvec3 rd = cam * normalize(vec3(uv, 2.0));\n\t\n\tHIT hit = trace(ro, rd, t);\n\tfloat d = hit.dist;\n    vec3 p = hit.point;\n    \n    vec3 ambient = vec3(0.025,0.05,0.1);\n    \n\tif(d < INFINITY)\n\t{\n        vec3 albedo = material(p);\n        \n        float diff = 1.0;\n        \n        float fog = smoothstep(0.0, 1.0, d*0.015);\n        \n\t    vec3 pc = ambient + albedo*diff - fog;\n\t\tpc = max(ambient, pc);\n        \n\t    return clamp(pc, 0., 1.);\n\t}\n    else\n    {\n        return ambient;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize UV and aspect correct\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Offset UV to -1...1\n    uv *= 2.;\n    uv -= 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 c = vec3(0.);\n    \n    for(int m=0; m<AA; m++)\n        for(int n=0; n<AA; n++)\n        {\n            // AA offset\n            vec2 o = vec2(float(m),float(n)) / float(AA) / iResolution.xy * 2.0;\n            vec2 ouv = uv+o;\n            \n            // Motion blur time-offset\n            float t = iTime - texture(iChannel0, ouv+vec2(m,n)/float(AA)).r * .03;\n\n            // Capture image\n\t\t\tc += image(ouv, t);\n        }\n\n    // Output to screen\n    c /= float(AA * AA);\n    //c = pow(c,vec3(0.8));\n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}