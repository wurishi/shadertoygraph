{"ver":"0.1","info":{"id":"mtXXRj","date":"1675041967","viewed":101,"name":"Euler Polynomials","username":"Crystalize","description":"Euler Polynomials","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["polynomials","euler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI 6.283185307179586476\n#define PI 3.141592653589793238\n#define R vec2(1,0)\n\n#define N 2.\n#define iters 100.\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\nvec2 cpow(vec2 z, vec2 p) {\n    float a = atan(z.y, z.x);\n    float lnr = 0.5 * log(dot(z,z));\n    float m = exp(p.x * lnr - p.y * a);\n    float angle = p.x * a + p.y * lnr + TWOPI;\n    return vec2(cos(angle), sin(angle)) * m;\n}\n\nfloat binomial(float a, int n) {\n   float s = 1.0;\n   for (int i = n; i >= 1; i--,a--) {\n     s *= float(a)/float(i);\n   }\n   return s;\n}\n\nvec2 eulerPoly(vec2 z, float n) {\n    vec2 sum = vec2(0);\n    for(int k = 1; k <= int(n)+1; k++) {\n        for(int j = 0; j <= k-1; j++) {\n            vec2 t = cmul(cmul(cpow(vec2(-1,0),vec2(float(j),0)),vec2(binomial(n+1.,k))),cpow(z+vec2(float(j),0),vec2(n,0)));\n            sum += t;\n        }\n    }\n    return cmul(vec2(1./pow(2.,n),0),sum);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n    \n    float i = 0.;\n    vec2 c = uv;\n    for(i; i < iters&&exp(length(uv))< 128.; i++) {\n    uv = eulerPoly(uv, N)+uv;\n    }\n    vec3 col = 0.5 + 0.5 * cos(i+vec3(0,1,2));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}