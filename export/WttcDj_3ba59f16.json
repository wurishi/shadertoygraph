{"ver":"0.1","info":{"id":"WttcDj","date":"1609928768","viewed":315,"name":"infinite marching beta","username":"Felox","description":"ray marching balls towards infinity","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","infinity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .01\n#define PI 3.141592653589793238462643\n\n\nfloat GetDist(vec3 p) {\n    vec4 s = vec4(2.,2.,2.,1.);\n    float sphereDist = length(mod(p,4.)-s.xyz)-s.w;\n    \n    return sphereDist;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.;\n    \n    for (int i=0;i<MAX_STEP;i++) {\n        vec3 p = ro + rd * dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if (i>=MAX_STEP || dS<=SURFACE_DIST ) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0,0,0);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    return dif;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    \n\n    //vec3 ro = vec3(0,0,iTime*(sin(iTime)+1.));\n    vec3 ro = vec3(0.,0.,(4.*iTime));\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n   \n    //vec3 rd = normalize(vec3(uv.x+(iMouse.x/400.)-1., uv.y+(iMouse.y/225.)-1., 1.));\n\n    vec3 colDepth = vec3(0.);\n    vec3 colColor = vec3(0.);\n    \n    float d = RayMarch(ro,rd);\n    vec3 p = ro + rd*d;\n    \n    float dif = GetLight(p);\n    \n    \n    colDepth = vec3(dif,dif*0.9,dif*0.9);\n    colColor = vec3(colDepth.x*-tan(30.*2./(d)),   colDepth.y*-tan(45.*2./d),   colDepth.z*-tan(15.*2./d));\n    colDepth = vec3(d/100.);\n    \n    float Time = cos(iTime*PI/5.)*0.65+3.15;\n    //fragColor = (.6-cos(Time*2.))*vec4(colColor,1.)+cos(Time)*vec4(colDepth,1.);\n    fragColor = vec4(vec3(d/200.),1);\n}","name":"Image","description":"","type":"image"}]}