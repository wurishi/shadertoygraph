{"ver":"0.1","info":{"id":"ds23Dw","date":"1719257315","viewed":20,"name":"Median Filter Test","username":"Tech_","description":"median","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["median"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rcp(x) (1.0 / (x))\n\nfloat GetLuminance(vec3 color)\n{\n \treturn dot(color, vec3(0.2125, 0.7154, 0.0721));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord / iResolution.xy;\n    vec2 px = 1.0 / iResolution.xy;\n    px.x *= iResolution.x / iResolution.y;\n\n    vec3 color = texture(iChannel0, coord).rgb;\n    \n    vec4 taps[9];\n    float mean = 0.0;\n    int radius = 3;\n    int sampleCount = (2 * radius + 1) * (2 * radius + 1);\n    \n    for (int y = -radius; y <= radius; y++)\n    {\n        for (int x = -radius; x <= radius; x++)\n        {\n            vec3 tap = texture(iChannel0, coord - vec2(x, -y) * px).rgb;\n            float tapLum = GetLuminance(tap);\n            mean += tapLum;\n            taps[(y + 1) * 3 + x + 1] = vec4(tap, tapLum);\n        }\n    }\n    \n    mean *= rcp(float(sampleCount));\n    \n    float median = 0.0;\n    int medianI = 0;\n    \n    for (int i = 0; i < sampleCount; i++)\n    {\n        vec4 tap = taps[i];\n        medianI = (tap.a < mean && median < tap.a) ? i : medianI;\n    }\n    \n    color = taps[medianI].rgb;\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*vec2 Hammersley(uint i, uint numSamples)\n{   \n    uint b = i;\n    \n    b = (b << 16u) | (b >> 16u);\n    b = ((b & 0x55555555u) << 1u) | ((b & 0xAAAAAAAAu) >> 1u);\n    b = ((b & 0x33333333u) << 2u) | ((b & 0xCCCCCCCCu) >> 2u);\n    b = ((b & 0x0F0F0F0Fu) << 4u) | ((b & 0xF0F0F0F0u) >> 4u);\n    b = ((b & 0x00FF00FFu) << 8u) | ((b & 0xFF00FF00u) >> 8u);\n    \n    return vec2(i / numSamples, float(b) / exp2(32.0));\n}*/\n\nfloat Hash21(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n\tp3 += dot(p3, p3.yzx + 33.33);\n\treturn fract((p3.x + p3.y) * p3.z) * 2.0 - 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 coord = fragCoord / iResolution.xy;\n    coord += vec2(Hash21(fragCoord), Hash21(fragCoord.yx) * (iResolution.x / iResolution.y)) * 0.004;\n    \n    fragColor = texture(iChannel0, coord);\n}","name":"Buffer A","description":"","type":"buffer"}]}