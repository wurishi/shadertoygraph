{"ver":"0.1","info":{"id":"Nt2Gzh","date":"1623784049","viewed":125,"name":"ray marching city scene","username":"katila4","description":"ray marching, learning","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 800;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 950.0;\nconst float EPSILON = 0.5;\n\nvec3 EMPTY_COLOR = vec3(207.0 / 255.0, 212.0 / 255.0, 222.0 / 255.0);\nvec4 EMPTY_COLOR_4 = vec4(207.0 / 255.0, 212.0 / 255.0, 222.0 / 255.0, 0.0);\n\nvec3 CAMERA_OFFSET = vec3(-3.0, 2.0, -66.0);\n\n// floor\nvec3 FLOOR_COLOR = vec3(142.0 / 255.0, 82.0 / 255.0, 245.0 / 255.0);\nvec3 FLOOR_SIZE = vec3(1400.0, 2.0, 600.0);\nvec3 FLOOR_POS = vec3(0.0, 6.0, -0.0);\n\n// back building\nvec3 BUILDING_BACK_COLOR = vec3(18.0 / 255.0, 44.0 / 255.0, 90.0 / 255.0);\nvec3 BUILDING_BACK_SIZE = vec3(10.0, 200.0, 20.0);\nvec3 BUILDING_BACK_POS = vec3(0.0, 80.0, -400.0);\n\n// building 1 right\nvec3 BUILDING_1_COLOR = vec3(18.0 / 255.0, 44.0 / 255.0, 90.0 / 255.0);\nvec3 BUILDING_1_SIZE = vec3(26.0, 13.5 + 50.0 + 100.0, 10.0);\nvec3 BUILDING_1_POS = vec3(32.0 + 6.0, -12.0 - 50.0 + 100.0, -13.0);\n\nvec3 BUILDING_1_1_COLOR = vec3(56.0 / 255.0, 251.0 / 255.0, 219.0 / 255.0);\nvec3 BUILDING_1_1_SIZE = vec3(2.0, 2.0, 2.0);\nvec3 BUILDING_1_1_POS = vec3(7.5 + 6.0, -1.5, -17.0 + 2.2);\n\nvec3 BUILDING_1_2_POS = vec3(7.5 + 6.0, -1.5, -17.0 + 9.0 + 2.2);\n\n// building 2 left\nvec3 BUILDING_2_COLOR = vec3(12.0 / 255.0, 30.0 / 255.0, 62.0 / 255.0);\nvec3 BUILDING_2_SIZE = vec3(26.0, 7.5 + 100.0, 14.0);\nvec3 BUILDING_2_POS = vec3(-30.0 - 9.0, -6.0 + 100.0, -16.0);\n\nvec3 BUILDING_2_1_COLOR = vec3(252.0 / 255.0, 15.0 / 255.0, 245.0 / 255.0);\nvec3 BUILDING_2_1_SIZE = vec3(1.2, 1.2, 1.2);\nvec3 BUILDING_2_1_POS = vec3(-3.5 - 9.0, -0.5, -17.0 + 2.2 - 9.0);\n\n// building 3 left\nvec3 BUILDING_3_COLOR = vec3(41.0 / 255.0, 65.0 / 255.0, 106.0 / 255.0);\nvec3 BUILDING_3_SIZE = vec3(26.0, 9.5 + 100.0, 6.0);\nvec3 BUILDING_3_POS = vec3(-30.0 - 7.0, -8.0 + 100.0, 6.0);\n\n// building 4 right\nvec3 BUILDING_4_COLOR = vec3(83.0 / 255.0, 102.0 / 255.0, 135.0 / 255.0);\nvec3 BUILDING_4_SIZE = vec3(26.0, 9.5 + 100.0, 10.0);\nvec3 BUILDING_4_POS = vec3(32.0 + 6.0, -8.0 + 100.0, 11.0);\n\n// building 5 right\nvec3 BUILDING_5_COLOR = vec3(58.0 / 255.0, 71.0 / 255.0, 94.0 / 255.0);\nvec3 BUILDING_5_SIZE = vec3(26.0, 17.5 + 100.0, 10.0);\nvec3 BUILDING_5_POS = vec3(32.0 + 7.0, -16.0 + 100.0, 34.0);\n\n// building 6 left\nvec3 BUILDING_6_COLOR = vec3(34.0 / 255.0, 42.0 / 255.0, 56.0 / 255.0);\nvec3 BUILDING_6_SIZE = vec3(26.0, 17.5 + 10.0 + 100.0, 16.0);\nvec3 BUILDING_6_POS = vec3(-30.0 - 7.0, -16.0 - 10.0 + 100.0, 30.0);\n\n// building 7 left\nvec3 BUILDING_7_COLOR = vec3(83.0 / 255.0, 102.0 / 255.0, 135.0 / 255.0);\nvec3 BUILDING_7_SIZE = vec3(26.0, 17.5 + 100.0, 24.0);\nvec3 BUILDING_7_POS = vec3(-30.0 - 7.0, -16.0 + 100.0, -58.0);\n\n// building 8 right\nvec3 BUILDING_8_COLOR = vec3(41.0 / 255.0, 65.0 / 255.0, 106.0 / 255.0);\nvec3 BUILDING_8_SIZE = vec3(26.0, 3.5 + 5.0 + 100.0, 20.0);\nvec3 BUILDING_8_POS = vec3(32.0 + 7.0, -2.0 - 5.0 + 100.0, -47.0);\n\n// sign\nvec4 SIGN_COLOR = vec4(142.0 / 255.0, 82.0 / 255.0, 245.0 / 255.0, 1.0);\nvec3 SIGN_SIZE = vec3(4.0, 2.0, 0.5);\nvec3 SIGN_POS = vec3(0.0 - 2.0 - 4.0, 60.0 - 30.0 - 30.0 - 20.0 - 8.0, -47.0 + 15.0 - 4.5);\n\n// sign 2\nvec4 SIGN_2_COLOR = vec4(142.0 / 255.0, 82.0 / 255.0, 245.0 / 255.0, 1.0);\nvec3 SIGN_2_SIZE = vec3(8.0, 2.0, 0.5);\nvec3 SIGN_2_POS = vec3(0.0 - 2.0 - 4.0 + 10.0 + 4.0 + 1.0, \n                        60.0 - 30.0 - 30.0 - 20.0 - 8.0 + 30.0, \n                        -47.0 + 15.0 - 4.5 + 20.0 + 20.0 + 25.0);\n                        \n// sign 3\nvec4 SIGN_3_COLOR = vec4(44.0 / 255.0, 200.0 / 255.0, 175.0 / 255.0, 1.0);\nvec3 SIGN_3_SIZE = vec3(4.0, 10.0, 0.5);\nvec3 SIGN_3_POS = vec3(0.0 - 2.0 - 4.0 + 10.0 + 4.0 + 1.0, \n                       60.0 - 30.0 - 30.0 - 20.0 - 8.0 + 30.0 + 50.0, \n                       -47.0 + 15.0 - 4.5 + 20.0 + 20.0 + 25.0 - 50.0);\n\nfloat TOTAL_PLAY_TIME = 0.85;\nfloat JUMP_PLAY_TIME = 10.02;\nfloat JUMP_ON_FLY_TIME = 0.4;\nfloat JUMP_OFF_FLY_TIME = 0.4;\nfloat JUMP_WAIT_TIME = 0.1;\n\nfloat GetTime()\n{\n    return iTime;\n}\n\nfloat GetCurrentTime()\n{\n    return mod(GetTime(), TOTAL_PLAY_TIME) / TOTAL_PLAY_TIME;\n}\n\nint GetCurrentCycle()\n{\n    return int(GetTime() / TOTAL_PLAY_TIME);\n}\n\nfloat GetCurrentJumpTime()\n{\n    return mod(GetTime(), JUMP_PLAY_TIME) / JUMP_PLAY_TIME;\n}\n\nfloat EaseOut(float x)\n{\n\treturn 1.0 - pow(1.0 - x, 3.0);   \n}\n\nfloat EaseOutQuad(float x)\n{\n    return 1.0 - (1.0 - x) * (1.0 - x);\n}\n\nfloat EaseInQuad(float x)\n{\n    return x * x;\n}\n\nfloat EaseInCubic(float x) \n{\n    return x * x * x;\n}\n\nvec3 Lerp(vec3 from, vec3 to, float t) {\n    vec3 res = mix(from, to, t);\n    return res;\n}\n\nfloat LerpF(float from, float to, float t) {\n    float res = mix(from, to, t);\n    return res;\n}\n\nfloat quadSDF(vec3 p, vec3 pos, vec3 size) {\n    p += pos;\n    vec3 d = abs(p) - size;\n\n    float insideDistance = min(max(d.x, max(d.y, d.z)), 0.0);\n    float outsideDistance = length(max(d, 0.0));\n    return insideDistance + outsideDistance;\n}\n\nvec3 sceneColorBySDF(float sdf, vec3 color)\n{\n    return step(sdf, EPSILON) * color;\n}\n\nvec4 sceneColorBySDF4(float sdf, vec4 color)\n{\n    return step(sdf, EPSILON) * color;\n}\n\nvec4 building1SDF(vec3 p, vec3 pos, float tColor) {\n    float b1 = quadSDF(p, pos + BUILDING_1_POS, BUILDING_1_SIZE);\n    \n    float sdf = b1;\n    \n    vec3 color = sceneColorBySDF(b1, mix(BUILDING_1_COLOR, EMPTY_COLOR, tColor));\n                 \n    return vec4(color, sdf);\n}\n\nvec4 building2SDF(vec3 p, vec3 pos, float tColor) {\n    float b2 = quadSDF(p, pos + BUILDING_2_POS, BUILDING_2_SIZE);\n\n    float sdf = b2;\n    \n    vec3 color = sceneColorBySDF(b2, mix(BUILDING_2_COLOR, EMPTY_COLOR, tColor));\n                 \n    return vec4(color, sdf);\n}\n\nvec4 backBuildingSDF(vec3 p, vec3 pos, float tColor) {\n    float b2 = quadSDF(p, pos + BUILDING_BACK_POS, BUILDING_BACK_SIZE);\n    \n    float sdf = b2;\n    \n    vec3 color = sceneColorBySDF(b2, mix(BUILDING_BACK_COLOR, EMPTY_COLOR, tColor));\n    \n    return vec4(color, sdf);\n}\n\nvec4 signSDF(vec3 p, vec3 pos, float tColor, out float dist) {\n    dist = quadSDF(p, pos + SIGN_POS, SIGN_SIZE);\n    \n    vec4 color = sceneColorBySDF4(dist, mix(SIGN_COLOR, EMPTY_COLOR_4, tColor));\n    return color;\n}\n\nvec4 sign2SDF(vec3 p, vec3 pos, float tColor, out float dist) {\n    dist = quadSDF(p, pos + SIGN_2_POS, SIGN_2_SIZE);\n    \n    vec4 color = sceneColorBySDF4(dist, mix(SIGN_2_COLOR, EMPTY_COLOR_4, tColor));\n    return color;\n}\n\nvec4 sign3SDF(vec3 p, vec3 pos, float tColor, out float dist) {\n    dist = quadSDF(p, pos + SIGN_3_POS, SIGN_3_SIZE);\n    \n    vec4 color = sceneColorBySDF4(dist, mix(SIGN_3_COLOR, EMPTY_COLOR_4, tColor));\n    return color;\n}\n\nvec4 sceneSDF(vec3 samplePoint, out float dist) {\n    float t = GetCurrentTime();\n    float appearT = LerpF(1.0, 0.5, t);\n    float appearT2 = LerpF(0.5, 0.0, EaseOut(t));\n    \n    int cycle = GetCurrentCycle();\n    \n    float tt = LerpF(0.0, 1.2, sin(t * 3.14));\n    \n    float jt = GetCurrentJumpTime();\n    float jwt = (max(0.0, GetCurrentJumpTime() - JUMP_WAIT_TIME)) / (1.0 - JUMP_WAIT_TIME);\n    \n    float jtt = min(1.0, jwt / JUMP_ON_FLY_TIME);\n    float jtl = 1.0 - (JUMP_ON_FLY_TIME + JUMP_OFF_FLY_TIME);\n    float jtt2 = min(1.0, max(0.0, (jwt - jtl - JUMP_ON_FLY_TIME) / JUMP_OFF_FLY_TIME));\n    \n    float MOVE = 140.0;\n    \n    vec3 cameraMove = vec3(0.0, 0.0, MOVE * t) + CAMERA_OFFSET + vec3(6.0 * jtt - 6.0 * jtt2, 12.0 * sin(jt * 3.14 * 2.0), 0.0);\n    vec3 dublicate_offset = vec3(0.0, 0.0, -MOVE);\n    \n    float b3 = quadSDF(samplePoint, BUILDING_3_POS + cameraMove, BUILDING_3_SIZE);\n    float b4 = quadSDF(samplePoint, BUILDING_4_POS + cameraMove, BUILDING_4_SIZE);\n    float b5 = quadSDF(samplePoint, BUILDING_5_POS + cameraMove, BUILDING_5_SIZE);\n    float b6 = quadSDF(samplePoint, BUILDING_6_POS + cameraMove, BUILDING_6_SIZE);\n    float b7 = quadSDF(samplePoint, BUILDING_7_POS + cameraMove, BUILDING_7_SIZE);\n    float b8 = quadSDF(samplePoint, BUILDING_8_POS + cameraMove, BUILDING_8_SIZE);\n\n    float b3_c = quadSDF(samplePoint, BUILDING_3_POS + cameraMove + dublicate_offset, BUILDING_3_SIZE);\n    float b4_c = quadSDF(samplePoint, BUILDING_4_POS + cameraMove + dublicate_offset, BUILDING_4_SIZE);\n    float b5_c = quadSDF(samplePoint, BUILDING_5_POS + cameraMove + dublicate_offset, BUILDING_5_SIZE);\n    float b6_c = quadSDF(samplePoint, BUILDING_6_POS + cameraMove + dublicate_offset, BUILDING_6_SIZE);\n    float b7_c = quadSDF(samplePoint, BUILDING_7_POS + cameraMove + dublicate_offset, BUILDING_7_SIZE);\n    float b8_c = quadSDF(samplePoint, BUILDING_8_POS + cameraMove + dublicate_offset, BUILDING_8_SIZE);\n\n    float b3_c_2 = quadSDF(samplePoint, BUILDING_3_POS + cameraMove + dublicate_offset * 2.0, BUILDING_3_SIZE);\n    float b4_c_2 = quadSDF(samplePoint, BUILDING_4_POS + cameraMove + dublicate_offset * 2.0, BUILDING_4_SIZE);\n    float b5_c_2 = quadSDF(samplePoint, BUILDING_5_POS + cameraMove + dublicate_offset * 2.0, BUILDING_5_SIZE);\n    float b6_c_2 = quadSDF(samplePoint, BUILDING_6_POS + cameraMove + dublicate_offset * 2.0, BUILDING_6_SIZE);\n    float b7_c_2 = quadSDF(samplePoint, BUILDING_7_POS + cameraMove + dublicate_offset * 2.0, BUILDING_7_SIZE);\n    float b8_c_2 = quadSDF(samplePoint, BUILDING_8_POS + cameraMove + dublicate_offset * 2.0, BUILDING_8_SIZE);\n    \n    float f1 = quadSDF(samplePoint, FLOOR_POS + cameraMove + vec3(0.0, 0.0, -MOVE * t), FLOOR_SIZE);\n    \n    vec4 bb = backBuildingSDF(samplePoint, cameraMove + vec3(0.0, 0.0, -MOVE * t), 0.5);\n    \n    vec4 b1 = building1SDF(samplePoint, cameraMove, 0.0);\n    vec4 b1_1 = building1SDF(samplePoint, cameraMove + dublicate_offset, appearT2);\n    vec4 b1_2 = building1SDF(samplePoint, cameraMove + dublicate_offset * 2.0, appearT);\n    \n    vec4 b2 = building2SDF(samplePoint, cameraMove, 0.0);\n    vec4 b2_1 = building2SDF(samplePoint, cameraMove + dublicate_offset, appearT2);\n    vec4 b2_2 = building2SDF(samplePoint, cameraMove + dublicate_offset * 2.0, appearT);\n    \n    float sSDF = 0.0;\n    float sSDF_1 = 0.0;\n    float sSDF_2 = 0.0;\n    \n    float signMult_1_2 = step(0.1, mod(float(cycle + 2), 4.0)) * step(mod(float(cycle + 2), 4.0), 1.9);\n    float signMult_1_1 = step(1.1, mod(float(cycle + 2), 4.0)) * step(mod(float(cycle + 2), 4.0), 2.9);\n    float signMult_1 = step(2.1, mod(float(cycle + 2), 4.0)) * step(mod(float(cycle + 2), 4.0), 3.9);\n    \n    vec4 s = signSDF(samplePoint, cameraMove, 0.0, sSDF);\n    vec4 s_1 = signSDF(samplePoint, cameraMove + dublicate_offset, appearT2, sSDF_1);\n    vec4 s_2 = signSDF(samplePoint, cameraMove + dublicate_offset * 2.0, appearT, sSDF_2);\n    \n    float s2SDF = 0.0;\n    float s2SDF_1 = 0.0;\n    float s2SDF_2 = 0.0;\n    \n    float signMult2 = step(0.1, mod(float(cycle), 4.0)) * step(mod(float(cycle), 4.0), 1.9);\n    float signMult1 = step(1.1, mod(float(cycle), 4.0)) * step(mod(float(cycle), 4.0), 2.9);\n    float signMult = step(2.1, mod(float(cycle), 4.0)) * step(mod(float(cycle), 4.0), 3.9);\n    \n    vec4 s2 = sign2SDF(samplePoint, cameraMove, 0.0, s2SDF);\n    vec4 s2_1 = sign2SDF(samplePoint, cameraMove + dublicate_offset, appearT2, s2SDF_1);\n    vec4 s2_2 = sign2SDF(samplePoint, cameraMove + dublicate_offset * 2.0, appearT, s2SDF_2);\n    \n    float s3SDF = 0.0;\n    float s3SDF_1 = 0.0;\n    float s3SDF_2 = 0.0;\n    \n    float signMult_3_2 = step(0.1, mod(float(cycle + 1), 4.0)) * step(mod(float(cycle + 1), 4.0), 1.9);\n    float signMult_3_1 = step(1.1, mod(float(cycle + 1), 4.0)) * step(mod(float(cycle + 1), 4.0), 2.9);\n    float signMult_3 = step(2.1, mod(float(cycle + 1), 4.0)) * step(mod(float(cycle + 1), 4.0), 3.9);\n    \n    vec4 s3 = sign3SDF(samplePoint, cameraMove, 0.0, s3SDF);\n    vec4 s3_1 = sign3SDF(samplePoint, cameraMove + dublicate_offset, appearT2, s3SDF_1);\n    vec4 s3_2 = sign3SDF(samplePoint, cameraMove + dublicate_offset * 2.0, appearT, s3SDF_2);\n    \n    vec4 res = vec4(\n                bb.rgb +\n                b1.rgb +\n                b1_1.rgb +\n                b1_2.rgb +\n                b2.rgb +\n                b2_1.rgb +\n                b2_2.rgb +\n                \n                sceneColorBySDF(b3, BUILDING_3_COLOR) + \n                sceneColorBySDF(b4, BUILDING_4_COLOR) + \n                sceneColorBySDF(b5, BUILDING_5_COLOR) + \n                sceneColorBySDF(b6, BUILDING_6_COLOR) + \n                sceneColorBySDF(b7, BUILDING_7_COLOR) + \n                sceneColorBySDF(b8, BUILDING_8_COLOR) + \n\n                sceneColorBySDF(b3_c, mix(BUILDING_3_COLOR, EMPTY_COLOR, appearT2)) + \n                sceneColorBySDF(b4_c, mix(BUILDING_4_COLOR, EMPTY_COLOR, appearT2)) + \n                sceneColorBySDF(b5_c, mix(BUILDING_5_COLOR, EMPTY_COLOR, appearT2)) + \n                sceneColorBySDF(b6_c, mix(BUILDING_6_COLOR, EMPTY_COLOR, appearT2)) + \n                sceneColorBySDF(b7_c, mix(BUILDING_7_COLOR, EMPTY_COLOR, appearT2)) + \n                sceneColorBySDF(b8_c, mix(BUILDING_8_COLOR, EMPTY_COLOR, appearT2)) + \n                \n                sceneColorBySDF(b3_c_2, mix(BUILDING_3_COLOR, EMPTY_COLOR, appearT)) + \n                sceneColorBySDF(b4_c_2, mix(BUILDING_4_COLOR, EMPTY_COLOR, appearT)) + \n                sceneColorBySDF(b5_c_2, mix(BUILDING_5_COLOR, EMPTY_COLOR, appearT)) + \n                sceneColorBySDF(b6_c_2, mix(BUILDING_6_COLOR, EMPTY_COLOR, appearT)) + \n                sceneColorBySDF(b7_c_2, mix(BUILDING_7_COLOR, EMPTY_COLOR, appearT)) + \n                sceneColorBySDF(b8_c_2, mix(BUILDING_8_COLOR, EMPTY_COLOR, appearT)), 0.0);\n    \n    res = res + s * signMult_1 + s_1 * signMult_1_1 + s_2 * signMult_1_2 + s2 * signMult + s2_1 * signMult1 + s2_2 * signMult2 + s3 * signMult_3 + s3_1 * signMult_3_1 + s3_2 * signMult_3_2;\n    \n    dist = min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(min(\n                min(b1.a, b2.a), b1_1.a), b1_2.a), b2_1.a), b2_2.a), b3), b4), b5), b6), b7), b8), b3_c), b4_c), b5_c), b6_c), b7_c), b8_c), \n                b3_c_2), b4_c_2), b5_c_2), b6_c_2), b7_c_2), b8_c_2), bb.a);\n                \n    if (signMult_1 > 0.0)\n    {\n        dist = min(dist, sSDF);\n    }\n    \n    if (signMult_1_1 > 0.0)\n    {\n        dist = min(dist, sSDF_1);\n    }\n    \n    if (signMult_1_2 > 0.0)\n    {\n        dist = min(dist, sSDF_2);\n    }\n\n    if (signMult > 0.0)\n    {\n        dist = min(dist, s2SDF);\n    }\n    \n    if (signMult1 > 0.0)\n    {\n        dist = min(dist, s2SDF_1);\n    }\n    \n    if (signMult2 > 0.0)\n    {\n        dist = min(dist, s2SDF_2);\n    }\n    \n    if (signMult_3 > 0.0)\n    {\n        dist = min(dist, s3SDF);\n    }\n    \n    if (signMult_3_1 > 0.0)\n    {\n        dist = min(dist, s3SDF_1);\n    }\n    \n    if (signMult_3_2 > 0.0)\n    {\n        dist = min(dist, s3SDF_2);\n    }\n    \n    return res;\n}\n\nvec4 shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = 0.0;\n        vec4 col = sceneSDF(eye + depth * marchingDirection, dist);\n        if (dist < EPSILON) {\n\t\t\treturn col;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return EMPTY_COLOR_4;\n        }\n    }\n    return EMPTY_COLOR_4;\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 0.0)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 viewDir = rayDirection(45.0 * 1.5, iResolution.xy, fragCoord);\n    \n    float t = GetCurrentTime();\n    float tt = sin(t * 3.14 * 2.0);\n\n    float jt = GetCurrentJumpTime();\n    \n    float jwt = (max(0.0, GetCurrentJumpTime() - JUMP_WAIT_TIME)) / (1.0 - JUMP_WAIT_TIME);\n    \n    \n    float jtt = min(1.0, jwt / JUMP_ON_FLY_TIME);\n    float jtl = 1.0 - (JUMP_ON_FLY_TIME + JUMP_OFF_FLY_TIME);\n    float jtt2 = min(1.0, max(0.0, (jwt - jtl - JUMP_ON_FLY_TIME) / JUMP_OFF_FLY_TIME));\n\n    vec3 eye = vec3(-0.25, -0.25, -4.0);\n\n    float rotX = 0.25 * sin(jt * 3.14 * 2.0);\n    mat4 viewToWorld = viewMatrix(eye, vec3(-0.1, 0.2, 0.2), vec3(rotX, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    vec4 col = shortestDistanceToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    float st = max(fragCoord.y / iResolution.y - 0.5, 0.0);\n    col = mix(col, vec4(1.0, 0.0, 1.0, 0.2), st);\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}