{"ver":"0.1","info":{"id":"ftfGzB","date":"1622285199","viewed":143,"name":"Hex Variation (Kolmyjec - 1978)","username":"lsdlive","description":"William Kolmyjec's \"Hex Variation\".\nLoop on 4 seconds.\n\nOriginal artwork (1978): http://recodeproject.com/artwork/v3n4hex-variation","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["truchet","hex","kolmyjec"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n@lsdlive\nCC-BY-NC-SA\n\nWilliam Kolmyjec's \"Hex Variation\".\nLoop on 4 seconds.\n\nOriginal artwork (1978): http://recodeproject.com/artwork/v3n4hex-variation\n\n*/\n\n#define AA 5.\n#define pi 3.141592\n#define time (mod(iTime, 4.))\n\n// https://lospec.com/palette-list/1bit-monitor-glow\nvec3 col1 = vec3(.133, .137, .137);\nvec3 col2 = vec3(.941, .965, .941);\n\n\nmat2 r2d(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat rand(vec2 uv) {\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// inspired by Pixel Spirit Deck: https://patriciogonzalezvivo.github.io/PixelSpiritDeck/\n// + https://www.shadertoy.com/view/tsSXRz\nfloat stroke(float d, float width) {\n\treturn 1. - smoothstep(0., AA / iResolution.x, abs(d) - width * .5);\n}\n\nfloat circle(vec2 p, float radius) {\n  return length(p) - radius;\n}\n\n// Hex Grid helper from: https://www.shadertoy.com/view/7dX3Dj\nvec4 hexGrid(vec2 uv, out vec2 id)\n{\n    uv *= mat2(1.1547, 0., -.5773503, 1.);\n    vec2 f = fract(uv);\n    float triid = 1.;\n\tif((f.x + f.y) > 1.) {\n        f = 1. - f;\n     \ttriid = -1.;\n    }\n    vec2 co = step(f.yx, f) * step(1. - f.x - f.y, max(f.x, f.y));\n    id = floor(uv) + (triid < 0. ? 1. - co : co);\n    co = (f - co) * triid * mat2(.866026, 0., .5, 1.);\n    uv = abs(co);\n    //id*=inverse(mat2(1.1547,0.0,-0.5773503,1.0)); // optional unskew IDs\n    return vec4(.5 - max(uv.y, abs(dot(vec2(.866026, .5),uv))), length(co),co);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float t1 = fract(time * .125);\n    \n    const vec2 s = vec2(1.732, 1);\n    \n    uv += t1 * s;\n    \n    float scale = 8.;\n    vec2 id = vec2(0);\n    vec4 p = hexGrid(uv * scale, id);\n    uv = p.zw;\n    id = fract(id * 1. / scale);\n    \n    float r = rand(id);\n    if(r > 0. && r <= .33)\n        uv *= r2d(pi / 3. * 0.);\n    else if( r > .33 && r <= .66)\n        uv *= r2d(pi / 3. * 1.);\n    else\n        uv *= r2d(pi / 3. * 2.);\n    \n    uv.x = abs(uv.x);\n    float sdf = circle(uv-vec2(s.x * 1. / 3., 0), s.x * 1. / 6.);\n    \n    float size = .05;\n    float mask = stroke(sdf, size);\n    mask += stroke(uv.x, size);\n    \n    mask = clamp(mask, 0., 1.);\n    vec3 col = mix(col1, col2, mask);\n    \n    // hex grid outlines\n    //col.r += p.x < .01 || p.y < .01 ? 1. : 0.;\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}