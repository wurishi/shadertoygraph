{"ver":"0.1","info":{"id":"lslyR8","date":"1487109111","viewed":205,"name":"14-02-17 Game of Life","username":"Dude","description":"The Rules\nFor a space that is 'populated':\nEach cell with one or no neighbors dies, as if by solitude.\nEach cell with four or more neighbors dies, as if by overpopulation.\nEach cell with two or three neighbors survives.\nFor a space that is 'empty' or 'un","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    vec4 texture = texture(iChannel0,uv);\n\tfragColor = vec4(texture.rgb,1.0);\n}\n\n//You can 'populate' spaces by clicking on them.\n//For a space that is 'populated':\n//Each cell with one or no neighbors dies, as if by solitude.\n//Each cell with four or more neighbors dies, as if by overpopulation.\n//Each cell with two or three neighbors survives.\n//For a space that is 'empty' or 'unpopulated'\n//Each cell with three neighbors becomes populated.\n\n//A nice shape to make is:\n//1 1 1\n//1 1 1\n//1 0 1\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define time iTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mp = iMouse.zw/iResolution.x;\n    vec4 textureV;\n    vec4 osColor = vec4(1., 1., 1., 1.);\n    vec4 buffer = texture(iChannel0,uv);\n    vec4 state = texture(iChannel1,uv);\n    float frame = float(iFrame);\n    float n;\n    \n    float z = 10.;\n    vec2 grid = vec2(iResolution.x/z,iResolution.y/(z/2.));\n    vec2 offset = 1./(grid);\n    \n    vec2 mp_c;\n    vec2 uv_c;\n    \n    uv_c = ceil(uv*grid);\n    mp_c = ceil(mp*grid);\n    \n    if(length(uv_c-mp_c) <= length(offset) && length(state) < 0.1){\n        \n        n = 0.;\n        \n        if(textureV == buffer){\n        \tn = 1.;\n        }\n        textureV = osColor*n; \n    }else{\n        textureV = buffer;\n    }\n\n    \n    if (mod(frame,80.) == 0.){\n        vec4 buffer_up \t\t= texture(iChannel0,uv+vec2(0.,offset.y));\n        vec4 buffer_up_l \t= texture(iChannel0,uv+vec2(-offset.x,offset.y));\n        vec4 buffer_up_r\t= texture(iChannel0,uv+vec2(offset.x,offset.y));      \n        \n        vec4 buffer_down \t= texture(iChannel0,uv+vec2(0.,-offset.y));\n        vec4 buffer_down_l \t= texture(iChannel0,uv+vec2(-offset.x,-offset.y));\n        vec4 buffer_down_r \t= texture(iChannel0,uv+vec2(offset.x,-offset.y));\n        \n        vec4 buffer_left \t= texture(iChannel0,uv+vec2(-offset.x,0.));\n        vec4 buffer_right\t= texture(iChannel0,uv+vec2(offset.x,0.));\n        \n        float N = buffer_up.r+buffer_up_l.r+buffer_up_r.r+buffer_down.r+\n            buffer_down_l.r+buffer_down_r.r+buffer_left.r+buffer_right.r;\n        \n        textureV = vec4(0.);\n        \n        if(N == 2. && buffer != vec4(0.) || N== 3.){\n        \ttextureV = vec4(1.);\n        }\n        \n    }\n    \n    fragColor = textureV;\n}\n\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define time iTime\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 mp = iMouse.zw / iResolution.x;\n    vec4 state;\n    \n    float z = 10.;\n    vec2 grid = vec2(iResolution.x/z,iResolution.y/(z/2.));\n    vec2 offset = 1./(grid);\n    \n    vec2 mp_c;\n    vec2 uv_c;\n    \n    uv_c = ceil(uv*grid);\n    mp_c = ceil(mp*grid);\n\n    state = vec4(0.);\n\n        if(length(uv_c-mp_c) <= length(offset)){\n            state = vec4(1.); \n        }        \n\n    fragColor = state;\n}","name":"Buffer B","description":"","type":"buffer"}]}