{"ver":"0.1","info":{"id":"fsjSzV","date":"1620715490","viewed":75,"name":"breathing-checkerboard-3","username":"ykcwa","description":"Just starting to learn shadertoy...","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["blackandwhite"],"hasliked":0,"parentid":"NdBSRV","parentname":"breathing-checkerboard-2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from https://www.shadertoy.com/view/Mls3R7\nvoid rotate(inout vec2 p,float angle,vec2 rotationOrigin)\n{\n    p -= rotationOrigin;\n    p *= mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n    p += rotationOrigin;\n}\n\n\nfloat stripe(float x, float stripeWidth) {\n  float s = mod(x + 0.5 * stripeWidth, 2.0 * stripeWidth);\n  if (s > stripeWidth) {\n    s = 2.0 * stripeWidth - s;\n  }\n  float smoothness =  4./iResolution.y;\n  return smoothstep(stripeWidth * 0.5, stripeWidth * 0.5 - smoothness, s);\n}\n\nfloat xorBW(float color1, float color2) { \n  return abs(color1 - color2);\n}\n\nfloat checkerboardColor(vec2 uv, float squareSize) {\n  return xorBW(stripe(uv.x, squareSize), stripe(uv.y, squareSize));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (y from -0.5 to 0.5, x scaled appropriately)\n    vec2 uv = ( fragCoord - .5* iResolution.xy) / iResolution.y;\n\n    float squareSize = 0.2;\n    \n    float squareSize1 = squareSize * (1.0 + 0.3 * cos(1.0 * iTime));\n    vec2 uv1 = uv + squareSize1 * vec2(-0.125);\n    rotate(uv1, -0.5 * iTime, vec2(0.5 * squareSize1));\n\n    float squareSize2 = squareSize * (1.0 + 0.2 * cos(2.0 * iTime));\n    vec2 uv2 = uv + squareSize2 * vec2(0.625);\n    rotate(uv2, 0.25 * iTime, vec2(0.5 * squareSize2));\n\n    float c1 = checkerboardColor(uv1, squareSize1);\n    float c2 = checkerboardColor(uv2, squareSize2);\n\n    fragColor = vec4(vec3(xorBW(c1, c2)), 1.0);\n}","name":"Image","description":"","type":"image"}]}