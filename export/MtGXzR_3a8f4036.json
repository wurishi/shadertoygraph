{"ver":"0.1","info":{"id":"MtGXzR","date":"1487672438","viewed":305,"name":"Thick-leaved Plant","username":"gPlatl","description":"Animated thick-leaved plant. \nBerechnung der Pflanze mit deutschen Kommentaren!","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["3d","raycasting","atan","animation","plant"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------------------------\n// Thick_Leaved_Plant.glsl         https://www.shadertoy.com/view/MtGXzR\n//   v1.0  2017-02-21  fork creation, original by TLC123\n//   v1.1  2022-09-05  german comments for plant1()\n// Ray marcher created by Inigo Quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// More info: https://iquilezles.org/articles/distfunctions\n// flower: https://www.shadertoy.com/view/MltSRf\n//----------------------------------------------------------------------\n\nconst float radius = 0.7;\nconst float leaves = 16.0;\nconst float layers = 20.0;\nconst float torsion = 1.7;\n      float twist = 3.0;\nconst vec3 iy = vec3(0,1,0);\n\n//----------------------------------------------------------------------\nfloat plant1 (vec3 p)   // Pflanze kommentiert\n{\n  vec3 n = normalize(p);             // Einheitsvektor\n  float q = length(p);               // Positionsdistanz\n  float L = length(vec2(n.x,n.z));   // horizontale Distanz\n  float rho = atan(L,n.y)*layers     // vertikale Teilung\n              +q*15.                 // Blattbiegung nach oben\n              ;\n  float theta = atan(n.x,n.z)*leaves // horizontale Bl√§tterteilung  \n        +rho*torsion                 // Z-Achsen-Rotation \n        +p.y*twist                   // Z-Achsen-Verdrehung \n        ;\n                                         \n  float k = 0.6 *(1.3-abs(dot(n,iy))); // begrenzt Warp Effekt an den Polen\n  float turn = iTime*1.0;\n  return q -radius         // Kugel\n         +k*sin(theta)     // horizontale Arme\n         +sin(rho-turn)    // vertikale Teilung\n         ;\n}\n//----------------------------------------------------------------------\n/*                         // original version\nfloat plant1(vec3 p)\n{\n  vec3 n = normalize(p);   \n  float q = length(p);\n  float rho = atan(length(vec2(n.x,n.z)),n.y)*20.0+q*15.0;    // vertical part of  cartesian to polar with some q warp\n  float theta = atan(n.x,n.z)*leaves +rho*torsion +p.y*twist; // horizontal part plus some warp by z and rho\n  float k = 0.6 *(1.3 - abs(dot(n,iy)));  // 1.3-abs(dot()) is limiting the warp effect at poles\n  float turn = iTime*2.0;\n  return q -radius -k*(sin(theta)+sin(rho-turn));\n}\n*/\n//----------------------------------------------------------------------\n// get scenery value and color\nvec2 map( in vec3 pos )\n{\n  return vec2(plant1(pos),20.7);\n}\n\n// do ray marching\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n\tfloat precis = 0.01;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i < 400; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if((res.x < precis) || (t > tmax)) break;\n        t += res.x*0.05;\n\t    m = res.y;\n    }\n    if( t > tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n// calculate soft shadow value\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i < 16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n// calulate normalized surface normal vector\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n    float d = map(pos).x;\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - d,\n\t    map(pos+eps.yxy).x - d,\n\t    map(pos+eps.yyx).x - d );\n\treturn normalize(nor);\n}\n\n// calculate Ambient Occlusion\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<15; i++ )\n    {\n        float hr = 0.05 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n// get color of given ray\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m > -0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n\t\tcol = 0.50 + 0.3*sin( vec3(2.3-pos.y/4.0, 2.15-pos.y/12.0,-1.30)*(m-1.0) );\n\t\t\n        if( m < 1.5 )\n        {\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighting        \n        float occ = calcAO( pos, nor ) ;\n\t\tvec3 light = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = 0.1;  // clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, light ), 0.0, 1.0 );\n        float bac = 0.0;  // clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = 0.7;  //pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = 0.0;  //pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= 0.5 +0.5*softshadow( pos, light, 0.02, 2.5 );\n        //dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n    }\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\n// set camera transformation matrix\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0); // aspect ratio\n    vec2 pos = fragCoord.xy / iResolution.xy;      //  0.0 .. 1.0\n    vec2 uv = (2.0 * pos - 1.0) * ratio;           // -1.0 .. 1.0\n    vec2 mpos = iMouse.xy / iResolution.xy;        //  0.0 .. 1.0  \n\t\t \n\t// ray values\t\n    vec3 ro = vec3(0.0,4.0*cos(-1.6*mpos.y),4.0);  // ray origin\n \tvec3 ta = vec3(-0.1, 0.0, 0.10);               // ray target \n    mat3 ca = setCamera(ro, ta, 0.0);              // camera-to-world transformation\n\tvec3 rd = ca * normalize(vec3(uv, 2.0));       // ray direction\n\n    // render \t\n    //twist = 11.0 * sin(iTime);      // twisting...\n    vec3 col = render( ro, rd );\n\tcol = pow(col, vec3(0.4545));\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}