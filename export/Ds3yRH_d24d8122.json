{"ver":"0.1","info":{"id":"Ds3yRH","date":"1694700671","viewed":98,"name":"DFT Anything You Draw","username":"Fuergu","description":"Draw on the whole screen.\nThe origin drawings will be shown on the left-top corner.\nDFT result will display in main window.\nPress \"R\" on your keyboard to RESET.","likes":8,"published":1,"flags":48,"usePreview":0,"tags":["2d","dft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nDraw on the whole screen.\nThe origin drawings will be shown on the left-top corner.\nDFT result will display in main window.\n\nPress \"R\" on your keyboard to RESET.\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = fragCoord/iResolution.xy;\n// small window\n  if(fragCoord.x < 0.25 * iResolution.x && fragCoord.y > 0.75 * iResolution.y) {\n    uv = fragCoord.xy / vec2(0.25 * iResolution.x, 0.25 * iResolution.y); \n    fragColor = texture(iChannel0, uv); \n  }\n  else {\n    // display iChannel1\n    fragColor = texture(iChannel1, uv); \n    fragColor *=2.5;\n  }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*DFT*/\n\n/*\nreferenceï¼šhttps://www.shadertoy.com/view/MllGRX\n*/\nvec2 fft(vec2 uv,vec2 FFT_SIZE)\n{\n    \n    vec2 complex = vec2(0,0);\n    \n    uv *= FFT_SIZE;\n    \n    vec2 size = FFT_SIZE;\n    \n    for(int x = 0;x < int(FFT_SIZE.x);x++)\n    {\n    \tfor(int y = 0;y < int(FFT_SIZE.y);y++)\n    \t{\n            float a = 2.0 * PI * (uv.x * (float(x)/size.x) + uv.y * (float(y)/size.y));\n            vec3 samplev = texture(iChannel0,vec2(x,y)/size).rgb;\n            complex += avg(samplev)*vec2(cos(a),sin(a));\n        }\n    }\n    \n    return complex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv.x += (1.0-res.x)/2.0;\n    uv.y = 1.0-uv.y;\n    \n    vec3 color = vec3(0.0);\n    float angle=iMouse.y/iResolution.y*5.;\n    mat2 rotMat = mat2(cos(angle), -sin(angle),sin(angle), cos(angle));\n\n    vec2 FFT_SIZE = iResolution.xy/10.;\n    color = vec3(length(fft(uv-0.5,FFT_SIZE))/float(FFT_SIZE.x+FFT_SIZE.y)/2.);\n\tcolor = log(1.+abs(color));\n    fragColor = vec4(color,1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n\n/*constant*/\n#define PI 3.14159265359\n\n/*Function*/\n#define S(a,b,t) smoothstep(a,b,t)\n#define avg(v) ((v.x+v.y+v.z)/3.0)\n\n\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_A     = 65;\nconst int KEY_B     = 66;\nconst int KEY_C     = 67;\nconst int KEY_D     = 68;\nconst int KEY_E     = 69;\nconst int KEY_F     = 70;\nconst int KEY_G     = 71;\nconst int KEY_H     = 72;\nconst int KEY_I     = 73;\nconst int KEY_J     = 74;\nconst int KEY_K     = 75;\nconst int KEY_L     = 76;\nconst int KEY_M     = 77;\nconst int KEY_N     = 78;\nconst int KEY_O     = 79;\nconst int KEY_P     = 80;\nconst int KEY_Q     = 81;\nconst int KEY_R     = 82;\nconst int KEY_S     = 83;\nconst int KEY_T     = 84;\nconst int KEY_U     = 85;\nconst int KEY_V     = 86;\nconst int KEY_W     = 87;\nconst int KEY_X     = 88;\nconst int KEY_Y     = 89;\nconst int KEY_Z     = 90;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nhttps://www.shadertoy.com/view/Wdjfzm\n*/\nfloat isKeyToggled(int keyCode) {\n    return texelFetch( iChannel1, ivec2(KEY_F,2), 0 ).x; // Toggled information is on layer 2.\n}\n\nconst float STROKE_THICKNESS = 0.01;\n\nfloat stroke( vec2 a, vec2 b, vec2 p ) {\n\tvec2 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - STROKE_THICKNESS;\n}\n\nfloat isKeyPress(int keyCode) {\n    return texelFetch( iChannel1, ivec2(keyCode,1), 0 ).x; // Press information is on layer 1;\n}\n\n// Same as <keyCode is pressed> ? a : b\nvec4 ifKeyPress(int keyCode, vec4 a, vec4 b) {\n    return mix(b, a, isKeyPress(keyCode));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xx;\n    vec4 m = iMouse / iResolution.xxxx;\n    vec2 currentMousePosition = m.xy;\n    vec2 mouseDownPosition = m.zw;\n    float isLMBPressed = float(m.z > 0.); // When LMB is not pressed m.zw is -1.0 * lastMouseDownPosition\n    float isF = isKeyToggled(KEY_F);\n    \n    vec4 lastFrame = texture(iChannel0, fragCoord/iResolution.xy);\n    vec2 previousMousePosition = lastFrame.zw;\n    float wasLMBPressed = lastFrame.y;\n    \n    vec2 strokeStart = mix(currentMousePosition, previousMousePosition, wasLMBPressed);\n\n    float col = mix(1., \n                    mix(stroke(strokeStart, currentMousePosition, uv),\n                        stroke(currentMousePosition, mouseDownPosition, uv),\n                        isF),\n                    isLMBPressed);\n    \n    float value = 1.0 - smoothstep(0.0, 0.0001, col);\n    value = max(lastFrame.x, value);\n    \n    // x  -> 0.0 (blank) or 1.0 (painted)\n    // y  -> 0.0 (LMB pressed) or 1.0 (LMB not pressed)\n    // zw -> vec2 (current mouse position)\n    // R resets canvas\n    fragColor = ifKeyPress(KEY_R,\n                           vec4(0.0, isLMBPressed, currentMousePosition),\n                           vec4(value, isLMBPressed, currentMousePosition));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nhttps://www.shadertoy.com/view/Wdjfzm\n*/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    fragColor = vec4(vec3(texture(iChannel0, uv).x), 0.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}