{"ver":"0.1","info":{"id":"WtGcDd","date":"1611943921","viewed":429,"name":"[TWITCH] Plaisir Coupable","username":"Flopine","description":"Inspired by the art of Mirai Mizue and this post: https://twitter.com/MIRAI_MIZUE/status/1354248578063953920?s=20\nMade during a Twitch stream, you can watch VODs here: https://www.twitch.tv/flopine","likes":39,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","animation","isometric","geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy and wwrighter for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n// Heavily inspired by this tweet:\n// https://twitter.com/MIRAI_MIZUE/status/1354248578063953920?s=20\n\n\n#define dt(speed,off) fract((iTime+off)*speed)\n#define IOExpoLoop(speed,off) easeInOutExpo(abs(-1.+2.*dt(speed,off)))\n#define IOExpo(speed,off) easeInOutExpo(dt(speed,off))\n#define bounce(speed, off) abs(sqrt(sin(dt(speed,off)*PI)))\n\n#define PI acos(-1.)\n#define TAU 6.283185\n#define ITER 64.\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n\nstruct obj\n{\n  float d;\n  vec3 c_shadow;\n  vec3 c_light;\n};\n\nobj minobj (obj a, obj b)\n{\n  if (a.d<b.d) return a;\n  else return b;\n}\n\n\nfloat easeInOutExpo (float x)\n{\nreturn x == 0.\n  ? 0.\n  : x == 1.\n  ? 1.\n  : x < 0.5 ? exp2(20. * x - 10.) / 2.\n  : (2. - exp2(-20. * x + 10.)) / 2.;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n  vec3 q = abs(p)-c;\n  return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n  p = abs(p);\n  p = max(p,p.yzx);\n  return min(p.x,min(p.y,p.z))-d;\n}\n\nobj prim1 (vec3 p)\n{ \n  float per = mix(0.,1.5,IOExpoLoop(0.5,0.));\n  crep(p.xz,per,1.);\n  float dscene = max(sc(p,0.2),box(p,vec3(0.5)));\n\n  return obj(dscene,vec3(0.15,0.,0.2),vec3(.3,0.8,0.95));\n}\n\nfloat cases (vec3 p, float offset, float size)\n{\n  p.y -= bounce(1.5,offset)*1.5;\n  float d = max(-box(p-vec3(0.,size*0.25,0.),vec3(size*0.85)),box(p,vec3(size)));\n  return d;\n}\n\nobj prim2 (vec3 p)\n{\n  float off=0.,s=0.9,d=1e10;\n  for (int i=0; i<3; i++)\n  {\n    d = min(d,cases(p,off,s));\n    off -= 0.1; s -= 0.3;\n  }\n\n  return obj(d,vec3(0.3,0.02,0.01),vec3(0.95,0.8,0.4)); \n}\n\nobj prim3 (vec3 p)\n{\n  float size = 1., d=1e10;\n  for (int i=0;i<3;i++)\n  {\n    p.xz *= rot(IOExpo(0.5,0.)*PI);\n    p.xy *= rot(IOExpo(0.5,0.)*PI);\n    d = min(d,max(-sc(p,size*0.8),box(p,vec3(size))));\n    size -= 0.3;\n  }\n\n  return obj(d,vec3(0.0,0.2,0.05),vec3(.9,.8,0.1));\n}\n\nobj prim4 (vec3 p)\n{\n  float size = 0.2;\n  float per = (size*4.);\n  vec2 id = round(p.xz/per)-.5;\n  crep(p.xz,per,2.);\n\n  float sy = sin(length(id*0.7)-dt(0.5,0.)*TAU)*0.3+0.3;\n\n  float d = box(p,vec3(size,sy,size));\n\n  return obj(d,vec3(0.5,0.,0.6),vec3(0.95,0.85,0.2));\n}\n\nobj SDF (vec3 p)\n{  \n  p.x -= 0.5;\n  p.yz *= rot(-atan(1./sqrt(2.)));\n  p.xz *= rot(TAU/8.);\n  vec3 pp = p;\n\n  obj scene = prim1(p+vec3(-2.,0.,2.));\n  scene = minobj(scene,prim4(p+vec3(3.,0.,-3.)));\n  scene = minobj(scene, prim3(p+vec3(3.,0.,2.)));\n  scene = minobj(scene,prim2(p+vec3(-2.,0.,-3.)));\n\n  return scene;\n}\n\nvec3 getnorm (vec3 p)\n{\n  vec2 eps = vec2(0.001,0.);\n  return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uu = fragCoord.xy/iResolution.xy;\n  vec2 uv = (2.*fragCoord.xy - iResolution.xy)/iResolution.y;\n\n  vec3 ro = vec3(uv*5.,-10.), rd=vec3(0.,0.,1.), p=ro, col=vec3(0.,0.,0.02), l=normalize(vec3(1.,2.,-2.));\n\n  bool hit = false; obj O;\n\n  for (float i=0.; i<ITER; i++)\n  {\n    O = SDF(p);\n    if (O.d < 0.01)\n    {\n      hit=true; break;\n    }\n    p += O.d*rd;\n  }\n\n  if (hit)\n  {\n    vec3 n = getnorm(p);\n    float lighting = max(dot(n,l),0.);\n    col = mix(O.c_shadow, O.c_light, lighting);\n  }\n\n  fragColor = vec4(sqrt(col),1.);\n}","name":"Image","description":"","type":"image"}]}