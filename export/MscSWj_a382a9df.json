{"ver":"0.1","info":{"id":"MscSWj","date":"1462232967","viewed":556,"name":"Hideously inefficient 3D voronoi","username":"tomator","description":"Very slow, but I got fed up with repeatedly screwing something up while trying to fix it, so help would be appreciated.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","newbie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rand3f( vec3 co )\n{\n/*\treturn fract(sin(vec3(dot(co,vec3(12.9898,78.233,37.8323)),\n                          dot(co,vec3(15.9113,77.173,31.9797)),\n                          dot(co,vec3(13.3117,79.321,31.7113)))*91363.7113));*/\n    \n    return texture(iChannel0, co.xy*co.z*.0625).rgb;\n}\n\nfloat worley( vec3 co )\n{\n    vec3 p = floor(co);\n    vec3 f = fract(co);\n    \n    vec2 dist = vec2(100.);\n    for(float x=-1.; x<=1.; x++)\n    for(float y=-1.; y<=1.; y++)\n    for(float z=-1.; z<=1.; z++)\n    {\n        vec3 cell = vec3(x, y, z);\n        vec3 offset = rand3f(p + cell);\n        \n        vec3 r = cell - f + offset;\n        float d = dot(r, r);\n        \n        if(d < dist.x)\n            dist = vec2(d, dist.x);\n        else if(d < dist.y)\n            dist.y = d;\n    }\n    \n    return dist.x - dist.y + .5;\n}\n\n#define MAX_STEPS 200\n#define MAX_DIST 8.\nfloat trace( vec3 origin, vec3 ray )\n{\n    float t = 1.6;\n    \n    for(int i=0; i<MAX_STEPS; i++)\n    {\n        vec3 hit = origin + ray*t;\n        float dist = worley(hit);\n        \n        if(dist < .001*(1. + t) || t > MAX_DIST) break;\n        t += dist*.25;\n    }\n    return t;\n}\n\n#define AMBCOLOR .043, 0., 0.\n#define DIFCOLOR .43, 0., 0.\n#define SPECOLOR .78, .57, 0.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy)*2.-1.; //coords to -1..1;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    vec2 mousepos = (iMouse.xy / iResolution.xy)*2.-1.;\n    mousepos.x *= aspect;\n    \n    vec3 ray = normalize(vec3(uv, 1.));\n    vec3 origin = vec3(5., 10.*sin(iTime*.2), iTime);\n    vec3 lightdir = normalize(vec3(-.85, 1.3, 1.));\n    \n    float res = trace(origin, ray);\n    vec3 hit = origin + ray*res;\n    vec2 ep = vec2(.0001, 0.);\n    //Calculate normals\n   \tvec3 normal = normalize(vec3(\n   \t   \t\tworley(hit+ep.xyy) - worley(hit-ep.xyy),\n  \t     \tworley(hit+ep.yxy) - worley(hit-ep.yxy),\n   \t   \t\tworley(hit+ep.yyx) - worley(hit-ep.yyx)));\n    \n    float dif = dot(normal, lightdir);\n    dif = max(0., dif);\n        \n    vec3 specdir = reflect(ray, normal);\n    float spec = dot(lightdir, specdir);\n    spec = pow(max(0., spec), 8.);\n        \n    vec3 color = vec3(AMBCOLOR) +\n        \t\tvec3(DIFCOLOR)*dif +\n        \t\tvec3(SPECOLOR)*spec;\n        \n    float fog =  (res*res) / (MAX_DIST*MAX_DIST);\n    float fogb = clamp(dot(ray, lightdir), 0., 1.);\n    vec3 fogc = mix(vec3(0., .68, .75), vec3(.09, .53, 0.), fogb);\n    \n    color = mix(color, fogc, fog);\n                \n    color = pow(color, vec3(.4545)); //Gamma correct\n\tfragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}