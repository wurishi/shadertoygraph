{"ver":"0.1","info":{"id":"Mcc3Ds","date":"1712250189","viewed":34,"name":"Phong Lab","username":"Dinofox12","description":"school","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["school"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float EPSILON = 0.0001;\nconst float NEAR = 0.001;\nconst float FAR = 100.0;\n\nfloat sdSphere(vec3 p, float r)\n{\n  return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p)\n{\n    float sphere = sdSphere(p - vec3(0.0, 0.0, 0.0), 1.0);\n    float box = sdBox(p - vec3(0.0, -1.0, 0.0), vec3(1.0));\n    return min(sphere, box);\n}\n\nvec3 estimateNormal(vec3 p) {\n    return normalize(vec3(\n        map(vec3(p.x + EPSILON, p.y, p.z)) - map(vec3(p.x - EPSILON, p.y, p.z)),\n        map(vec3(p.x, p.y + EPSILON, p.z)) - map(vec3(p.x, p.y - EPSILON, p.z)),\n        map(vec3(p.x, p.y, p.z  + EPSILON)) - map(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nvec3 phong(vec3 position, vec3 normal, vec3 cameraPosition,\n    vec3 lightPosition, vec3 lightColor,\n    float ambientIntensity, float diffuseIntensity, float specularPower) \n{\n    // 1. Calculate lighting vectors\n    vec3 L = normalize(lightPosition - position); \n    vec3 V = normalize(cameraPosition - position); \n    vec3 R = reflect(-L, normal); \n    \n    // 2. Calculate lighting vector similarities\n    float dotNL = max(dot(normal, L), 0.0);\n    float dotVR = max(dot(V, R), 0.0); \n    \n    // 3. Apply ambient, diffuse, and specular contributions\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    color += lightColor * ambientIntensity;\n    color += lightColor * diffuseIntensity * dotNL;\n    color += lightColor * pow(dotVR, specularPower);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // [0, 1] --> [-1, 1]\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Ray origin\n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    \n    // FoV of 90 degrees\n    float fov = tan(45.0 * 3.14 / 180.0);\n    \n    // Ray direction\n    vec3 rd = normalize(vec3(uv * fov, 1.0));\n    \n    // Distance along ray\n    float t = 0.0;\n    \n    for (int i = 0; i < 80; i++)\n    {\n        // Scene position\n        vec3 p = ro + rd * t;\n        \n        // Determine maxmimum safe stepping distance\n        float d = map(p);\n        \n        // Step along ray by distance d\n        t += d;\n        \n        // Intersection if distance is very close to surface (SDF --> -1)\n        if (d < NEAR) break;\n        \n        // No intersection if distance along ray exceeds view distance\n        if (t > FAR) break;\n    }\n    \n    vec3 p = ro + rd * t;\n    vec3 n = estimateNormal(p);\n    \n    vec3 lightColor = vec3(1.0, 0.0, 0.0);\n    vec3 lightPosition = vec3(sin(iTime) * 5.0, 5.0, -5.0);\n    float ambient = 0.25;\n    float diffuse = 0.75;\n    float specular = 32.0;\n    vec3 lighting = phong(p, n, ro, lightPosition, lightColor, ambient, diffuse, specular);\n    \n    bool hit = t < FAR - EPSILON;\n    vec3 color = hit ? lighting : vec3(0.25, 0.25, 0.25);\n    \n    // Translate the position of the square and adjust its size\n    vec3 boxPosition = vec3(2.0, -1.0, 0.0); // New position of the square (moved to the right)\n    vec3 boxSize = vec3(0.2); // Smaller size for the square\n    float sphereRadius = 1.0; // Original sphere radius\n    \n    float sphereDistance = sdSphere(p - vec3(0.0, 0.0, 0.0), sphereRadius);\n    float boxDistance = sdBox(p - boxPosition, boxSize);\n    \n    // Intersect the sphere and the translated square\n    float distance = min(sphereDistance, boxDistance);\n    \n    vec3 bottomLightPosition = vec3(0.0, -5.0, 0.0);\n    vec3 bottomLightColor = vec3(0.0, 0.0, 1.0);\n    vec3 bottomLighting = phong(p, n, ro, bottomLightPosition, bottomLightColor, ambient, diffuse, specular);\n    \n    color += bottomLighting;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}