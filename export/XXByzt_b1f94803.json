{"ver":"0.1","info":{"id":"XXByzt","date":"1727553719","viewed":78,"name":"bounding sphere pair","username":"jt","description":"Switch between two ray-marched scenes separated by two bounding spheres.\nOne sphere contains blue cube and yellow sphere, the other a green cube and a magenta gridsphere.\nClick to visualize bounding spheres (also visualized at the start for preview image)","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["volume","raymarch","sphere","intersection","bounding"],"hasliked":0,"parentid":"lX2yzc","parentname":"enclosing sphere pair"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/XXByzt bounding sphere pair, 2024 by jt\n\n// Switch between two ray-marched scenes separated by two bounding spheres.\n// One sphere contains blue cube and yellow sphere, the other a green cube and a magenta gridsphere,\n// intentionally intersecting it's bounding-sphere.\n// Click to visualize bounding spheres (also visualized at the start for preview image)\n\n// NOTE: Errors occur in normal-estimation when object touches bounding-sphere.\n//       Fix would increase complexity - in practice, maybe just increase bounding sphere radius.\n\n// tags: bounding, volume, sphere, raymarch, intersection\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nvec2 bounding_sphere_intersect(vec3 ro, vec3 rd, vec4 s) // modified https://iquilezles.org/articles/intersectors/\n{\n    vec3 oc = ro - s.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - s.w*s.w;\n    float h = b*b - c;\n    if(h < 0.0) return vec2(DIST_MAX); // no intersection\n    h = sqrt(h);\n    return vec2(-h, +h) - b;\n}\n\nbool bounding_sphere_inside(vec3 p, vec4 s)\n{\n    return length(p-s.xyz) <= s.w+EPSILON;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat cylinder(vec3 p, float r, float h) // based on https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat longitudes(uint n, vec3 p) // https://www.shadertoy.com/view/DlVBzy latitudes and longitudes (jt)\n{\n    p.xy = p.yx; // hack to align with interior\n    float slice = 2.0*pi/float(n);\n\n    float mu = atan(p.x,p.y);\n    float mu0 = floor(mu/slice)*slice;\n    float mu1 =  ceil(mu/slice)*slice;\n    mat3 m0 = mat3(sin(mu0),cos(mu0),0,cos(mu0),-sin(mu0),0,0,0,1);\n    mat3 m1 = mat3(sin(mu1),cos(mu1),0,cos(mu1),-sin(mu1),0,0,0,1);\n\n    vec3 q0 = m0 * p;\n    vec3 q1 = m1 * p;\n\n    return min(length(vec2(length(q0.xz)-1.0, q0.y)),length(vec2(length(q1.xz)-1.0, q1.y)));\n}\n\nfloat latitudes(uint n, vec2 p) // https://www.shadertoy.com/view/DlVBzy latitudes and longitudes (jt)\n{\n    n = n*2u-1u;\n\n    float slice = 2.0*pi/float(n);\n\n    float mu = atan(p.x,p.y);\n    float mu0 = floor(mu/slice)*slice-slice/2.0;\n    float mu1 =  ceil(mu/slice)*slice-slice/2.0;\n    vec2 c0 = vec2(sin(mu0),cos(mu0));\n    vec2 c1 = vec2(sin(mu1),cos(mu1));\n\n    return min(length(p-c0),length(p-c1));\n}\n\nfloat latitudes(uint n, vec3 p)\n{\n    return latitudes(n, vec2(length(p.xy),p.z));\n}\n\nfloat grid_sphere(vec3 p, float r) // https://www.shadertoy.com/view/DlVBzy latitudes and longitudes\n{\n    return min(longitudes(12u,p/r)*r,latitudes(12u,p/r)*r) - 0.01;\n}\n\nfloat grid_sphere(vec3 p, vec4 s)\n{\n    return grid_sphere(p - s.xyz, s.w);\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec4 intersect(vec4 a, vec4 b)\n{\n    return a.w > b.w ? a : b;\n}\n\nvec4 offset(vec4 c, float d)\n{\n    return vec4(c.xyz,c.w-d);\n}\n\nvec4 map0(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(0,0,1),box(p-vec3(-1,0,0),vec3(0.5))));\n    //combined = combine(combined, vec4(vec3(1,1,0),grid_sphere(p,1.5)));\n    combined = combine(combined, vec4(vec3(1,1,0),sphere(p,0.5)));\n    return combined;\n}\n\nvec4 map1(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    combined = combine(combined, vec4(vec3(0,1,0),box(p-vec3(+1,0,0),vec3(0.5))));\n    combined = combine(combined, vec4(vec3(1,0,1),grid_sphere(p,0.5)));\n    return combined;\n}\n\nvec4 map(vec3 p, vec4 bounding_sphere0, vec4 bounding_sphere1)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n    if(iTime < 15.0/*enable for preview*/ || iMouse.z > 0.0) // show bounding spheres\n    {\n        combined = combine(combined, vec4(vec3(1,0,0),grid_sphere(p,bounding_sphere0)));\n        combined = combine(combined, vec4(vec3(1,0,0),grid_sphere(p,bounding_sphere1)));\n    }\n    if(bounding_sphere_inside(p, bounding_sphere0))\n    {\n        combined = combine(combined, map0(p));\n    }\n    if(bounding_sphere_inside(p, bounding_sphere1))\n    {\n        combined = combine(combined, map1(p));\n    }\n\n    return combined;\n}\n\n// based on https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p, vec4 bounding_sphere0, vec4 bounding_sphere1)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h, bounding_sphere0, bounding_sphere1).w\n            +\n            k.yyx * map(p + k.yyx*h, bounding_sphere0, bounding_sphere1).w\n            +\n            k.yxy * map(p + k.yxy*h, bounding_sphere0, bounding_sphere1).w\n            +\n            k.xxx * map(p + k.xxx*h, bounding_sphere0, bounding_sphere1).w\n        );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1, vec4 bounding_sphere0, vec4 bounding_sphere1)\n{\n    vec2 bounds0 = bounding_sphere_intersect(ro, rd, bounding_sphere0);\n    vec2 bounds1 = bounding_sphere_intersect(ro, rd, bounding_sphere1);\n\n    vec4 u =\n        vec4\n        (\n            min(bounds0.x, bounds1.x), // nearest intersection point\n            min(max(bounds0.x, bounds1.x), min(bounds0.y, bounds1.y)), // 2nd nearest\n            max(max(bounds0.x, bounds1.x), min(bounds0.y, bounds1.y)), // 3nd nearest\n            max(bounds0.y, bounds1.y) // farest intersection point\n        );\n\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i = 0u;\n    vec4 h = vec4(0);\n    float t;\n    /*\n    if(iMouse.z > 0.0) // standard ray-marcher\n    {\n        for(t = t0; t < t1 && i < ITER_MAX; i++)\n        {\n            h = map(ro + rd * t, bounding_sphere0, bounding_sphere1);\n            if(h.w < EPSILON)\n                return vec4(h.xyz,t);\n            t += h.w;\n        }\n    }\n    else\n    */\n    {\n        u = clamp(u,t0,t1);\n        for(uint j = 0u; j < 3u; j++)\n        {\n            // NOTE: if no overlap then map returns DIST_MAX and loop from u[1] to u[2] is skipped.\n            for(t = u[j]; t < u[j+1u] && i < ITER_MAX; i++)\n            {\n                h = map(ro + rd * t, bounding_sphere0, bounding_sphere1);\n                if(h.w < EPSILON)\n                    return vec4(h.xyz,t);\n                t += h.w;\n            }\n        }\n    }\n\n    return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1, vec4 bounding_sphere0, vec4 bounding_sphere1)\n{\n    return trace(ro, rd, t0, t1, bounding_sphere0, bounding_sphere1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, vec4 bounding_sphere0, vec4 bounding_sphere1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t, bounding_sphere0, bounding_sphere1).w;\n        if(h < EPSILON)\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO(vec3 pos, vec3 nor, vec4 bounding_sphere0, vec4 bounding_sphere1)\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map(pos + h*nor, bounding_sphere0, bounding_sphere1).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if(occ > 0.35) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-4.0);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 lightdir = normalize(vec3(2.0,1.0, 3.0));\n\n    vec4 bounding_sphere0 = vec4(-1,0,0,1.5);\n    vec4 bounding_sphere1 = vec4(+1,0,0,1);\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX, bounding_sphere0, bounding_sphere1);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        //vec3 n = normal(dst, bounding_sphere0, bounding_sphere1); // standard normals\n        vec3 n = normal(ro + rd * (dist-EPSILON), bounding_sphere0, bounding_sphere1); // reduce edge-glint by normal-backoff as suggested by elenzil\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, bounding_sphere0, bounding_sphere1);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, bounding_spheres, 25.0);\n        color *= (ambient * calcAO(dst, n, bounding_sphere0, bounding_sphere1)) + brightness;\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}