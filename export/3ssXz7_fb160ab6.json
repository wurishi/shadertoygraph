{"ver":"0.1","info":{"id":"3ssXz7","date":"1550916890","viewed":162,"name":"nothing serious","username":"nabr","description":"i just chill. ","likes":5,"published":1,"flags":8,"usePreview":0,"tags":["2d","normalmap","practice","idontknowyet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// nabr\n// https://www.shadertoy.com/view/3ssXz7\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n// #define iwanttoseesomecolors\n\n\n\nfloat polygon(vec2 p, float n) \n{\n    float t = iTime* 2.;\n\tp = 2. * sin(t) * p + cos( t ) * vec2(p.y, -p.x);\n    float a = atan(p.x, p.y) + 3.14;\n\tfloat r = 6.28 / n;\n\treturn cos( floor( .5 + a / r) * r - a) * length(p);\n}\n\nfloat normals(vec2 p)\n{\n    float t = iTime * .2;\n    float h = 0.;\n\t\n    for (int i = 0; i <= 1; i++)\n    {\n        // repeat\n        vec2 v = mod( vec2(p.x, p.y + t ) , 1.5) -.5 * 1.5;\n        // sphere\n        float dt = max(0., .2 - dot(v, v) ) * iResolution.y;\n        //h += step(dt, .2) * 2.007;\n        \n        // polygon\n        h += dt + max(0.001, .25 - polygon(v, 3.) ) * iResolution.y;\n        \n        // polygon inline\n        h += max(0., .15 -  cos( (floor( .5 + atan( p.x, p.y) / 2.0943951)) * 2.0943951 - atan(p.x, p.y)) * length(p)) * iResolution.y;\n        \n\t\t//scale\n        p *= -4.;\n    }\n    \n    return sqrt(h * 5.) +.1 * sqrt(h);// sqrt( h/ceil(sin( h * .251 + 3.14 )) );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n   \t\n    vec2 p = (fragCoord.xy-.5*iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    vec3 col = vec3(0), light = vec3(0), heif = vec3(0), spec = vec3(0);\n    \n    // frame\n    if( asin(abs(p.y)) > .4)\n    {\n\t\tfragColor.rgb=vec3(.901);\n        return;\n    };\n\t\n    // normals\n    float n0 = normals(vec2(abs(p.x), p.y   ))\n        \t  + normals(vec2(p.x+.01/*log(iTime*.2)*/ , p.y ));\n    float n1 = normals(vec2(p.x, p.y - sin(iTime*.2)))\n        \t  + normals(vec2(p.x - 4., p.y ));\n    \n    float n2 = polygon(vec2(p.x, p.y)*10., 3.)\n        \t  + polygon(vec2(p.x, p.y )*100.*sin(iTime), 3.);\n    \n    // normal map (eyeballed)\n    vec3 n = normalize(cross(vec3(n0* 2., n1, 10.)+n2, vec3(2., 1000., 100. )));\n    \n    // shade\n\tlight = normalize(vec3( vec2(abs(p.x)+cos(iTime)+1., p.y), 2.+sin(iTime)));\n\theif = normalize(light + vec3( -2., .001, 3.5 ));\n\tspec = vec3(pow(dot(heif, n), 64.));\n\tcol = vec3(0.05)  * dot(n, light ) + spec;\n\t\n\t\n    #ifdef iwanttoseesomecolors\n    vec3 rainbw = p.y + 0.5 * cos(iTime - (6.28 * acos(p.x)) + vec3(0.0, 1.57, 3.14));\n     fragColor.rgb = mix(rainbw*.85+col, col, (sin(iTime*2.5)*.5+.5) );\n    #else\n     fragColor.rgb = col;\n    #endif\n        \n    \n    fragColor.a = 1.; \n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// nabr\n// https://www.shadertoy.com/view/3ssXz7\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n\n\nvec2 mainSound( in int samp, float time )\n{\n    \n    vec2 synth =  vec2(0);\n        \n    synth.x = 6.2831 *  length(\n                abs( ( sin(1440. * time) ) * mod( time, 1. ) - .15\n    \t\t\t\t)  -.125 ) ; \n    \n     synth.y = 6.2831 *  length(\n                abs( ( sin(540. * time) ) * mod( time, 1.5 ) - .5 \n    \t\t\t\t)  - .25 ) ; \n    \n    synth.x = dot(sin(synth.y + time * 1.9911 ) ,  synth.y  );\n    synth.y = dot(cos(synth.y + time * 21.9911 ) , synth.y )   ;\n\t\n    vec2 click = vec2( sin(1.*time) );\n    \n    click *= (sin(time*.5)<.5)? vec2(0, 1. ) : click ;\n    \n    float t = sin(time*22.);\n    ((t>0.03)&&(t<0.04)) ? click.x*=-1. : click.y=0.;\n    \n    float trumpet = sin(6.*time * float[](400., 300.,  float[]( 290.,660.)[int(time*6.)% 2] )[int(time*.3)% 3]  );\n    \n    // variation\n    // return ( trumpet*.62 + click *.52 + ( vec2(synth.x, dot(synth.y, 1.)) * .2 ) ) * .36 ; \n\n    \n    return (vec2( synth.x, synth.y ) * .2 * trumpet * .62 + click *.152) * .5; \n    \n}","name":"Sound","description":"","type":"sound"}]}