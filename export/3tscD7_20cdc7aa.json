{"ver":"0.1","info":{"id":"3tscD7","date":"1592243321","viewed":138,"name":"steam locomotion song","username":"darkfox","description":"\"kisya poppo\", \"seseragi\"(a song for starting train.)\nreference:https://www.youtube.com/watch?v=Okf-QB26IQI (very nice product!)\nreference:https://www.youtube.com/watch?v=hlDbtezeBxM","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14159\n\n// palette.\n#define GREEN vec3(0.13, 0.69, 0.29)\n#define RED vec3(1.0, 0.4, 0.3)\n#define BLUE vec3(0.4, 0.6, 1.0)\n#define ORANGE vec3(0.9, 0.6, 0.05)\n#define PURPLE vec3(0.9, 0.2, 0.8)\n\n// space.\n#define Ch_sp 127\n// double quotation.\n#define Ch_dq 168\n// period, comma, apostrophe.\n#define Ch_prd 46\n#define Ch_com 44\n#define Ch_apt 39\n\n// notes.\n#define Ch_n8 10\n\n// small alphabets.\n#define Ch_a 97\n#define Ch_b 98\n#define Ch_c 99\n#define Ch_d 100\n#define Ch_e 101\n#define Ch_f 102\n#define Ch_g 103\n#define Ch_h 104\n#define Ch_i 105\n#define Ch_j 106\n#define Ch_k 107\n#define Ch_l 108\n#define Ch_m 109\n#define Ch_n 110\n#define Ch_o 111\n#define Ch_p 112\n#define Ch_q 113\n#define Ch_r 114\n#define Ch_s 115\n#define Ch_t 116\n#define Ch_u 117\n#define Ch_v 118\n#define Ch_w 119\n#define Ch_x 120\n#define Ch_y 121\n#define Ch_z 122\n\n// draw character\nvec2 getCodePos(float code){\n    return vec2(mod(code, 16.0), 15.0 - floor(code / 16.0));\n}\n\nvec4 getCharLU(int charCode, vec2 p, vec2 lu, vec2 size, vec4 col){\n    // size: right, down.\n    float code = float(charCode);\n    if(p.x < lu.x || p.x > lu.x + size.x || p.y > lu.y || p.y < lu.y - size.y){\n        return vec4(0.0);\n    }\n\n    vec2 co = vec2(p.x - lu.x, lu.y - p.y) / size;\n    co.y = 1.0 - co.y;\n\n    vec4 tex = texture(iChannel0, (co + getCodePos(code)) / 16.0);\n    if(tex.r < 0.5 * (tex.g + tex.b)){ return vec4(0.0); }\n    return col;\n}\n\nvec4 Ch(vec2 p, int CharCode, float x, float y, float alpha){\n    return getCharLU(CharCode, p, vec2(x, y), vec2(0.08, 0.1), vec4(PURPLE, alpha));\n}\n\n// white keys(24)\n// y:0.0～0.4\nvoid drawWhiteKey(in vec2 p, inout vec3 col, float n, bool isPressed){\n    vec2 pos = vec2((n * 2.0 + 1.0) / 48.0, 0.2);\n    vec2 size = vec2(0.9 / 48.0, 0.2);\n    if(abs(p.x - pos.x) > size.x || abs(p.y - pos.y) > size.y){ return; }\n    if(isPressed){ col = RED; return; }\n    col = vec3(0.9);\n}\n\n// black keys(25)\n// y:0.18～0.4\nvoid drawBlackKey(in vec2 p, inout vec3 col, float n, bool isPressed){\n    vec2 pos = vec2(n / 24.0, 0.29);\n    vec2 size = vec2(0.8 / 48.0, 0.11);\n    if(abs(p.x - pos.x) > size.x || abs(p.y - pos.y) > size.y){ return; }\n    if(isPressed){ col = BLUE; return; }\n    col = vec3(0.1);\n}\n\nfloat getCurrentNote(){\n    float prevTerm = 0.0;\n    for(int i = 0; i < note_count; i++){\n        // a bit shorten.\n        if(prevTerm < iTime && iTime < prevTerm + sus[i] * unit * 0.85){\n            return float(notes[i]);\n        }\n        prevTerm = term[i] * unit;\n    }\n    return -1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = fragCoord.xy / iResolution.xy;\n    vec2 st = fragCoord.xy / min(iResolution.x, iResolution.y);\n\n    vec3 col = mix(PURPLE, vec3(1.0), p.y); // background.\n\n    float cur = getCurrentNote(); // current note.\n\n    for(float n = 0.0; n < 24.0; n += 1.0){\n        drawWhiteKey(p, col, n, n == cur);\n    }\n    for(float n = 0.0; n < 25.0; n += 1.0){\n        if(mod(n, 7.0) == 0.0 || mod(n, 7.0) == 4.0){ continue; }\n        drawBlackKey(p, col, n, n - 0.5 == cur);\n    }\n    \n    const int titleLength1 = 14;\n    int title1[titleLength1] = int[titleLength1](Ch_n8, Ch_dq,\n                            Ch_k, Ch_i, Ch_s, Ch_h, Ch_a, Ch_sp,\n                            Ch_p, Ch_o, Ch_p, Ch_p, Ch_o, Ch_dq);\n\n    const int titleLength2 = 11;\n    int title2[titleLength2] = int[titleLength2](Ch_n8, Ch_dq,\n                            Ch_s, Ch_e, Ch_s, Ch_e, Ch_r, Ch_a, Ch_g, Ch_i,\n                            Ch_dq);\n    vec4 texts = vec4(0.0);\n\n    vec2 textAlpha = vec2(1.0);\n    for(int i = 0; i < titleLength1; i++){\n        if(iTime < 96.0 * unit){\n            textAlpha.x = 0.5 + 0.5 * cos(iTime * pi * 2.0);\n        }\n        texts += Ch(st, title1[i], 0.1 + 0.04 * float(i), 0.85, textAlpha.x);\n    }\n    for(int i = 0; i < titleLength2; i++){\n        if(96.0 * unit < iTime && iTime < 140.0 * unit){\n            textAlpha.y =  0.5 + 0.5 * cos(iTime * pi * 2.0);\n        }\n        texts += Ch(st, title2[i], 0.1 + 0.04 * float(i), 0.65, textAlpha.y);\n    }\n    \n    fragColor = mix(vec4(col, 1.0), texts, texts.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// common constants, functions, etc...\n\n// keyboard code. (sharp key is fractional.)\nconst float _RA = 2.0;\nconst float _RASP = 2.5;\nconst float _SI = 3.0;\nconst float DO = 4.0;\nconst float DOSP = 4.5;\nconst float RE = 5.0;\nconst float RESP = 5.5;\nconst float MI = 6.0;\nconst float FA = 7.0;\nconst float FASP = 7.5;\nconst float SO = 8.0;\nconst float SOSP = 8.5;\nconst float RA = 9.0;\nconst float RASP = 9.5;\nconst float SI = 10.0;\nconst float DO_ = 11.0;\nconst float DOSP_ = 11.5;\nconst float RE_ = 12.0;\nconst float RESP_ = 12.5;\nconst float MI_ = 13.0;\nconst float FA_ = 14.0;\nconst float FASP_ = 14.5;\nconst float SO_ = 15.0;\nconst float SOSP_ = 15.5;\nconst float RA_ = 16.0;\nconst float RASP_ = 16.5;\nconst float SI_ = 17.0;\nconst float DO_U = 18.0;\n\n// song data\n\nconst int note_count = 115;\nconst float BPM = 240.0;\nconst float unit = 60.0 / BPM;\n\n// terminal time of each segment.\nconst float term[note_count] =\n        float[note_count](1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,\n                          9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 16.0,\n                          17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 24.0,\n                          25.0, 26.0, 27.0, 28.0, 29.0, 30.0, 32.0,\n                          33.5, 34.0, 35.0, 36.0, 37.5, 38.0, 39.0, 40.0,\n                          41.5, 42.0, 43.0, 44.0, 48.0,\n                          49.5, 50.0, 51.0, 52.0, 53.5, 54.0, 55.0, 56.0,\n                          57.5, 58.0, 59.0, 60.0, 63.0,\n                          63.5, 64.0, 67.0, 67.5, 68.0, 71.0, 71.5, 72.0, 80.0,\n                          81.0, 82.0, 84.0, 85.0, 86.0, 88.0,\n                          89.0, 90.0, 92.0, 96.0,\n                          97.0, 98.0, 99.0, 100.0, 101.0, 102.0, 103.0, 104.0,\n                          105.0, 106.0, 107.0, 108.0, 109.0, 110.0, 111.0, 112.0,\n                          113.0, 114.0, 115.0, 116.0, 117.0, 118.0, 119.0, 120.0,\n                          121.0, 122.0, 123.0, 124.0, 125.0, 126.0, 127.0, 128.0,\n                          129.0, 130.0, 131.0, 132.0, 133.0, 134.0, 135.0, 136.0,\n                          140.0);\n\nconst float sus[note_count] =\n        float[note_count](1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.5, 0.5, 1.0, 1.0, 1.5, 0.5, 1.0, 1.0,\n                          1.5, 0.5, 1.0, 1.0, 2.0,\n                          1.5, 0.5, 1.0, 1.0, 1.5, 0.5, 1.0, 1.0,\n                          1.5, 0.5, 1.0, 1.0, 2.0,\n                          0.5, 0.5, 2.5, 0.5, 0.5, 2.5, 0.5, 0.5, 4.5,\n                          1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 1.0, 1.0, 2.0, 2.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,\n                          1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0);\n\n\nconst float notes[note_count] =\n        float[note_count](DO, FA, DO, FA, RA, FA, RA, FA,\n                          DO_, RA, DO_, RA, SO, DO, DO,\n                          FA, FA, FA, RA, SO, SO, SO,\n                          DO_, RA, RE_, DO_, RA, SO, FA,\n                          SO, DO, DO, DO, RA, FA, FA, FA,\n                          SO, SO, RA, RE_, DO_,\n                          RE_, RE_, RE_, DO_, RA, RA, DO_, DO_,\n                          RA, RA, SO, FA, DO_,\n                          DO, DO, FA, RA, RA, DO_, RA, RA, RE_,\n                          DO_, DO_, DO_, RA, RA, RA, SO, SO, DO_, FA,\n                          SO_, SO, RA, SO, DO_, SO, MI_, SO,\n                          SO_, SO, RA, SO, DO_, SO, MI_, SO,\n                          SO_, SO, RA, SO, SI, SO, RE_, SO,\n                          SO_, SO, RA, SO, SI, SO, RE_, SO,\n                          SO, MI, SO, DO_, DO_, DO_, MI_, SO_, DO_U);\n\n// 鍵盤の番号からオクターブの指数を出すための若干美しくない処理\nconst float array_w[7] = float[7](-4.0, -2.0, 0.0, 2.0, 3.0, 5.0, 7.0);\nconst float array_b[7] = float[7](0.0, -3.0, -1.0, 1.0, 0.0, 4.0, 6.0); //0:dummy.\n\n// get exponent. 0:white key, 1:black key.\n// これを440.0に掛ける\nfloat getExponent(float index){\n    float r, q;\n    int diffType = 0;\n    if(fract(index) > 0.25){ index += 0.5; diffType = 1; }\n    for(int i = 0; i < 7; i++){\n        r = mod(index, 7.0);\n        q = floor(index / 7.0);\n        if(float(i) == r){\n            return 12.0 * q - 12.0 + (diffType == 0 ? array_w[i] : array_b[i]);\n        }\n    }\n    return 0.0;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"#define TAU 6.2831\n\nfloat squ(float x){\n    x = fract(x);\n    return smoothstep(0.48, 0.52, x) * 2.0 - 1.0;\n}\n\nvec2 squWave(float time, float freq, float m){\n  return vec2(squ(freq * time)) * exp(-m * time);\n}\n\nvec2 sound(float t, float freq, float span){\n    return squWave(t, freq, 1.6 / span);\n}\n\nvec2 mainSound( in int samp,float time){\n    vec2 wv = vec2(0.0);\n    float prevTerm = 0.0;\n    float frequency;\n    \n    for(int i = 0; i < note_count; i++){\n        if(time < term[i] * unit){\n            frequency = 440.0 * pow(2.0, getExponent(notes[i]) / 12.0);\n            wv += sound(time - prevTerm, frequency, sus[i] * unit);\n            break;\n        }\n        prevTerm = term[i] * unit;\n    }\n    return wv;\n}\n","name":"Sound","description":"","type":"sound"}]}