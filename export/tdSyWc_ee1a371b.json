{"ver":"0.1","info":{"id":"tdSyWc","date":"1587614024","viewed":134,"name":"cis561 hw09 Part 1","username":"sireesha98","description":"Post-process based depth of field blurring, Anti Aliasing and Ambient Occlusion. \n(Uncomment the #define statements to check out the different aspects) ","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["dof"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BLUR; \n//#define NO_BLUR;\n\n\n// from https://www.shadertoy.com/view/XdfGDH\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    #ifdef BLUR \n        // from https://www.shadertoy.com/view/XdfGDH\n        const int mSize = 7;\n        const int kSize = (mSize-1)/2;\n        float kernel[mSize];\n        vec3 final_color = vec3(0.0);\n\n        //create the 1-D kernel\n        float sigma = 10.0;\n        float Z = 0.0;\n        for (int j = 0; j <= kSize; ++j) {\n            kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n        }\n\n        //get the normalization factor (as the gaussian has been clamped)\n        for (int j = 0; j < mSize; ++j) {\n            Z += kernel[j];\n        }\n\n        //read out the texels\n        for (int i=-kSize; i <= kSize; ++i) {\n            for (int j=-kSize; j <= kSize; ++j) {\n                final_color += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n            }\n        }\n\n        vec2 uv = fragCoord/iResolution.xy;\n        vec4 unblurredColor = texture(iChannel0, uv);\n\n        fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), unblurredColor.a), 1.0);\n\n        float vignette = smoothstep(1.75, 0.0, length((2.0 * uv) - vec2(1.0)));\n        fragColor = mix(vec4(0.0, 0.0, 0.1, 1.0), fragColor, vignette);\n\n        //fragColor = vec4(unblurredColor.a, unblurredColor.a, unblurredColor.a, 1.0);\n    #endif\n    #ifdef NO_BLUR\n        vec2 uv = fragCoord/iResolution.xy;\n        vec4 unblurredColor = texture(iChannel0, uv);\n    \tfragColor = unblurredColor;\n    #endif\n        \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"///---------------///\n/// All Constants ///\n///---------------///\nconst vec3 lightPos = vec3(0., 7.1, 0.);\n\nconst float FOVY = 3.141569 * 0.25;\nconst int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\n\nconst float FOCAL_LENGTH = 21.;\nconst float FOCAL_RANGE = 16.0;\nconst int AO_SAMPLES = 256;\nconst float AO_DIST = 0.15;\nconst float FIVETAP_K = 2.0;\n\n\n#define ANTIALIASING 1\n#define DOF;\n//#define NO_DOF; //Don't forget to comment BLUR in Image \n\n//Ambient Occlusion :\n//#define AO_ONLY;\n//#define LAMBERT_ONLY;\n#define BOTH;\n//Type : \n#define FIVE_TAP\n//#define HEMISPHERE\n\n\n#define PI 3.14159265359\n\n//Set Color palatte :\n//https://iquilezles.org/articles/palettes\n\nconst vec3 a = vec3(0.5, 0.5, 0.5);\nconst vec3 b = vec3(0.5, 0.5, 0.5);\nconst vec3 c = vec3(2.0, 1.0, 1.0);\nconst vec3 d = vec3(0.5, 0.2, 0.25);\n\nvec3 colorPalette(float t) \n{\n    return a + b * cos(6.28 * (t * c + d));\n}\n\n///------------///\n/// Structures ///\n///------------///\n\nstruct Intersection {\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // Assign every object in our scene a unique ID int\n};\n\nstruct Ray {\n    vec3 origin;\n    vec3 dir; \n    \n};\n  \n///--------------------///\n/// Local Space Matrix ///\n///--------------------///\n    \n// Returns the inverse trasnformation matrix for the given t,r and s components \nmat4 inverseTransform(vec3 scale, vec3 rDeg, vec3 trans) {\n    \n    // convert from degrees to radians\n    vec3 rotate = vec3(radians(rDeg.x), radians(rDeg.y), radians(rDeg.z));\n    \n    mat4 r_x;\n    r_x[0] = vec4(1., 0., 0., 0.);\n    r_x[1] = vec4(0., cos(rotate.x), sin(rotate.x), 0.);\n    r_x[2] = vec4(0., -sin(rotate.x), cos(rotate.x), 0.);\n    r_x[3] = vec4(0., 0., 0., 1.);\n                                    \n                                    \n    mat4 r_y;\n    r_y[0] = vec4(cos(rotate.y), 0., -sin(rotate.y), 0.);\n    r_y[1] = vec4(0., 1, 0., 0.);\n    r_y[2] = vec4(sin(rotate.y), 0., cos(rotate.y), 0.);\n    r_y[3] = vec4(0., 0., 0., 1.);\n\n    mat4 r_z;\n    r_z[0] = vec4(cos(rotate.z), sin(rotate.z), 0., 0.);\n    r_z[1] = vec4(-sin(rotate.z), cos(rotate.z), 0., 0.);\n    r_z[2] = vec4(0., 0., 1., 0.);\n    r_z[3] = vec4(0., 0., 0., 1.);\n\n    mat4 r = r_x * r_y * r_z;\n    \n    // creating worldTransform matrix\n    mat4 t;\n    t[0] = vec4(1., 0., 0., 0.);\n    t[1] = vec4(0., 1., 0., 0.);\n    t[2] = vec4(0., 0., 1., 0.);\n    t[3] = vec4(trans.x, trans.y, trans.z, 1.);\n    \n    mat4 s;\n    s[0] = vec4(scale.x, 0., 0., 0.);\n    s[1] = vec4(0., scale.y, 0., 0.);\n    s[2] = vec4(0., 0., scale.z, 0.);\n    s[3] = vec4(0., 0., 0., 1.);\n\n    mat4 worldTrans = t * r * s;\n    \n    return inverse(worldTrans);\n}\n\n///----------///\n/// ALL SDFs ///\n///----------///\n    \n// SDF of a sphere\nfloat sphere(vec3 p, float r, vec3 c) {\n    return distance(p, c) - r;\n}\n\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\t\n\n//SDF of a Cube \nfloat cube(vec3 p, vec3 s, vec3 r, vec3 t) \n{\n    //Local space of the cube \n    mat4 inverseTrans = inverseTransform(s, r, t);\n    vec4 tempP = inverseTrans * vec4(p, 1.f);\n    p = vec3(tempP.x, tempP.y, tempP.z);\n    \n    vec3 q = abs(p) - vec3(0.5, 0.5, 0.5);\n  \treturn length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n\n///--------------------///\n/// Rotation Functions ///\n///--------------------///\n\nvec3 rotateX(in vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(p.x, c * p.y - s * p.z, s * p.y + c * p.z);\n}\n\nvec3 rotateY(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n\nvec3 rotateZ(vec3 p, float a) {\n\tfloat c = cos(a); float s = sin(a);\n\treturn vec3(c * p.x - s * p.y, s * p.x + c * p.y, p.z);\n}\n\n///-----------------///\n/// Noise Functions /// \n///-----------------///\n\nfloat random1( vec3 p ) {\n    return fract(sin((dot(p, vec3(127.1,\n                                  311.7,\n                                  191.999)))) *         \n                 43758.5453);\n}\n\nvec2 random2(vec3 p) {\n    return fract(sin(vec2(p.x, p.x + 1.0)) * vec2(43758.5453123, 22578.1459123));\n}\n\n\nvec3 random3( vec3 p ) {\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 191.999)),\n                          dot(p,vec3(269.5, 183.3, 765.54)),\n                          dot(p, vec3(420.69, 631.2,109.21))))\n                 *43758.5453);\n}\n\n//3D Worley Noise \nfloat WorleyNoise3D(vec3 p) {\n    // Tile the space\n    vec3 pointInt = floor(p);\n    vec3 pointFract = fract(p);\n\n    float minDist = 1.0; // Minimum distance initialized to max.\n\n    // Search all neighboring cells and this cell for their point\n    for(int z = -1; z <= 1; z++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            for(int x = -1; x <= 1; x++)\n            {\n                vec3 neighbor = vec3(float(x), float(y), float(z));\n\n                // Random point inside current neighboring cell\n                vec3 point = random3(pointInt + neighbor);\n\n                // Animate the point\n                point = 0.5 + 0.5 * sin(iTime * 0.01 + 6.2831 * point); // 0 to 1 range\n\n                // Compute the distance b/t the point and the fragment\n                // Store the min dist thus far\n                vec3 diff = neighbor + point - pointFract;\n                float dist = length(diff);\n                minDist = min(minDist, dist);\n            }\n        }\n    }\n    return minDist;\n}\n\n///---------------------///\n/// Coordinate Systems  ///\n///---------------------///\n\n// Returns a Coorinate system given one of the vectors \nvoid CoordinateSystem(in vec3 v1, out vec3 v2, out vec3 v3) {\n    if (abs(v1.x) > abs(v1.y))\n            v2 = vec3(-v1.z, 0.0, v1.x) / sqrt(v1.x * v1.x + v1.z * v1.z);\n        else\n            v2 = vec3(0.0, v1.z, -v1.y) / sqrt(v1.y * v1.y + v1.z * v1.z);\n        v3 = cross(v1, v2);\n}\n\nvec3 WorleyTangentSpaceNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( WorleyNoise3D(pos + epsilon.yxx) - WorleyNoise3D(pos - epsilon.yxx),\n                            WorleyNoise3D(pos + epsilon.xyx) - WorleyNoise3D(pos - epsilon.xyx),\n                            WorleyNoise3D(pos + epsilon.xxy) - WorleyNoise3D(pos - epsilon.xxy)));\n\n}\n\nmat3 TangentToWorld(vec3 nor) {\n\tvec3 tangent, bitangent;\n    CoordinateSystem(nor, tangent, bitangent);\n    return mat3(tangent, bitangent, nor);\n}\n\n\n///--------------------------///\n/// Scene SDFs and their IDs ///\n///--------------------------///\n\n//Cornell Box IDs \n#define LEFTWALL_ID 1\n#define BACKWALL_ID 2\n#define RIGHTWALL_ID 3\n#define CEILING_ID 4\n#define FLOOR_ID 5\n\n//Cornell Box SDFs \n#define LEFTWALL_SDF  plane(pos,  vec4(1., 0., 0., 5.))\n#define RIGHTWALL_SDF plane(pos,  vec4(-1., 0., 0., 5.)) \n#define BACKWALL_SDF plane(pos, vec4(0., 0., -1., 5.))\n#define CEILING_SDF plane(pos,  vec4(0., -1., 0., 7.5))\n#define FLOOR_SDF plane(pos,  vec4(0., 1., 0., 2.5))\n\n//Scene Objects SDFs \n#define LONGCUBE_ID 6\n#define SHORTCUBE_ID 7\n\n//Scene Objects SDFs \n#define LONGCUBE_SDF cube(pos, vec3(3., 6., 3.), vec3(0.0, 27.5, 0.0), vec3(2., 0., 3.))\n#define SHORTCUBE_SDF cube(pos, vec3(3., 3., 3.), vec3(0.0, -17.5, 0.0), vec3(-2., -1., 0.75))\n\n///-----------------///\n/// Scene Functions ///\n///-----------------///\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj) {\n    t = LEFTWALL_SDF;\n    obj = LEFTWALL_ID;\n    \n    if(BACKWALL_SDF < t) {\n        t = BACKWALL_SDF;\n        obj = BACKWALL_ID;\n    }        \n    if(RIGHTWALL_SDF < t) {\n        t = RIGHTWALL_SDF;\n         obj = RIGHTWALL_ID;\n    }    \n    if(CEILING_SDF < t) {\n        t = CEILING_SDF;\n        obj = CEILING_ID;\n    }\n    if(FLOOR_SDF < t) {\n        t = FLOOR_SDF;\n         obj = FLOOR_ID;\n    }    \n    if(LONGCUBE_SDF < t) {\n        t = LONGCUBE_SDF;\n        obj = LONGCUBE_ID;\n    }    \n    if(SHORTCUBE_SDF < t) {\n        t = SHORTCUBE_SDF;\n        obj = SHORTCUBE_ID;\n    }\n}\n\n\nfloat sceneMap3D(vec3 pos) {\n    float t = LEFTWALL_SDF;\n    \n    if(BACKWALL_SDF < t) {\n        t = BACKWALL_SDF;\n    }        \n    if(RIGHTWALL_SDF < t) {\n        t = RIGHTWALL_SDF;\n    } \n    if(LEFTWALL_SDF < t) {\n      t = LEFTWALL_SDF;\n    }\n    if(CEILING_SDF < t) {\n        t = CEILING_SDF;\n    }\n    if(FLOOR_SDF < t) {\n        t = FLOOR_SDF;\n    }    \n    if(LONGCUBE_SDF < t) {\n        t = LONGCUBE_SDF;\n    }    \n    if(SHORTCUBE_SDF < t) {\n        t = SHORTCUBE_SDF;\n    }\n    return t;\n}\n\nvec3 computeNormal(vec3 pos) {\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvoid rayMarch(vec3 origin, vec3 dir, out float t, out int hitObj) {\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\n///-------------------///\n/// Ambient Occlusion ///\n///-------------------///\n\n//HemiSphere\nfloat computeAO(vec3 p, vec3 n, float dist) {\n    float aoSum = 0.0;\n    // Sample a few points in the hemisphere around n at p\n    vec3 t, b;\n    // Make a tangent and bitangent vector\n    CoordinateSystem(n, t, b);\n    for(int i = 0; i < AO_SAMPLES; ++i) {\n        // Generate a pair of random [0, 1] floats\n        vec2 xi = random2(p + float(i) * 203.1);\n        // Convert the xi pair to a vector in the hemisphere\n        float len = sqrt(xi.y);\n        float rx = len * cos(6.2831 * xi.x);\n        float ry = len * sin(6.2831 * xi.x);\n        float rz = sqrt(1.0 - xi.y); // z = sqrt(1 - x*x - y*y)\n        vec3 dir = vec3(rx * t + ry * b + rz * n);\n        aoSum += step(0.0, sceneMap3D(p + dir * dist));\n    }\n    return aoSum / float(AO_SAMPLES);\n}\n\n//Five Tap\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float ao_sum = 0.;\n    for(int i = 0; i < 5; i++)\n    {\n        float coeff = pow(2., float(i));\n        ao_sum += (1. / coeff) * (float(i) * AO_DIST - sceneMap3D(p + n * float(i) * AO_DIST));\n    }\n    return 1.0 - k * ao_sum;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightDir, vec3 viewVec) \n{\n    float lambert = dot(lightDir, n);\n    switch(hitObj) {\n        case LEFTWALL_ID:\n        return vec3(0., 1., 0.) * lambert;\n        break;\n        case RIGHTWALL_ID:\n        return vec3(1., 0., 0.) * lambert;\n        break;\n        case BACKWALL_ID:\n        case CEILING_ID:       \n        case FLOOR_ID:       \n        case SHORTCUBE_ID:       \n        case LONGCUBE_ID:\n        return vec3(1., 1., 1.) * lambert;\n        break;\n        case -1:\n        return vec3(0., 0., 0.);\n        break;\n    }\n    return vec3(0., 0., 0.);\n}\n\n//Takes a ray in the scene and returns an intersection \nIntersection sceneIntersection(Ray ray) \n{\n    //To be set \n    float t;\n    int hitObj;\n    \n    //RayMarch will set t and object hit by raymarching using SDFs \n    rayMarch(ray.origin, ray.dir, t, hitObj);\n\n    //Intersection point in our scene \n    vec3 isect_point = ray.origin + t * ray.dir;\n    \n    //Normal at POI  \n    vec3 nor = computeNormal(isect_point);\n    vec3 lightDir = normalize(lightPos - isect_point);\n    \n    //Compute Material returns color at the POI \n    vec3 surfaceColor = computeMaterial(hitObj, isect_point, nor, lightDir, \n                                        normalize(ray.origin - isect_point));\n    \n    //Ambient Occlusion\n    #ifdef HEMISPHERE\n    float ao = computeAO(isect_point, nor, AO_DIST);\n    #endif\n    #ifdef FIVE_TAP\n    float ao = fiveTapAO(isect_point, nor, FIVETAP_K);\n    #endif\n    \n    #ifdef AO_ONLY\n    vec3 sdfColor = vec3(ao);\n    #endif\n    #ifdef LAMBERT_ONLY \n    vec3 sdfColor = surfaceColor;\n    #endif\n    #ifdef BOTH \n    vec3 sdfColor = ao * surfaceColor;\n    #endif\n  \n    return Intersection(t, sdfColor, isect_point, hitObj);\n}\n\n// Returns direction of ray\nRay rayCast(vec3 eye, vec3 ref, vec2 ndc) \n{\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(F, vec3(0,1,0)));\n    vec3 U = normalize(cross(R, F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return Ray(eye, normalize(p - eye));\n}\n\n///---------------///\n/// Main Function ///\n///---------------///\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    //Anti aliasing    \n    if(ANTIALIASING == 1)\n    {  \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    Intersection aaIsects[4];\n    //Camera's eye and reference points \n\n    vec3 eye = vec3(0, 4., -20.);\n    vec3 ref = vec3(0, 3.5, 0);\n    int idx = 0;\n    for(float i = 0.0; i < 1.0; i += 0.5) {\n        for(float j = 0.0; j < 1.0; j += 0.5) {\n            vec2 ndc = uv2 + vec2(i, j) / iResolution.xy;\n            Ray ray = rayCast(eye, ref, ndc);\n            aaIsects[idx++] = sceneIntersection(ray);\n        }\n    }\n        \n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 4; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n        \n    avgColor *= 0.25;\n    \n    #ifdef DOF\n    float distAlongCamZ = abs(dot(normalize(ref - eye), (aaIsects[0].p - eye)));\n    float dofZ = min(1.0, abs(distAlongCamZ - FOCAL_LENGTH) / FOCAL_RANGE);\n    dofZ = pow(dofZ, 0.5);\n\n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), dofZ);\n    float fogT = smoothstep(50.0, 100.0, distance(aaIsects[0].p, eye));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), fogT);\n    #endif \n    \n   #ifdef NO_DOF \n        fragColor = vec4(avgColor.rgb, 1.);\n    #endif\n    \n    }\n    else //No Anti aliasing\n    {\n        // Normalized pixel coordinates (from 0 to 1)\n        vec2 uv = fragCoord / iResolution.xy;\n        // Convert to range [-1, 1]\n        uv = uv * 2.0 - vec2(1.0, 1.0);\n\n        //Camera's eye and reference points \n        vec3 eye = vec3(0, 5.5, -17.);\n        vec3 ref = vec3(0, 2.5, 0);\n        \n\n        //Ray cast returns a ray in the camera's direction to the reference point \n        Ray ray = rayCast(eye, ref, uv);\n\n        //Scene Intersection \n        Intersection isect = sceneIntersection(ray);\n        vec3 avgColor = isect.color;\n    \n        #ifdef DOF\n            float distAlongCamZ = abs(dot(normalize(ref - eye), (isect.p - eye)));\n            float dofZ = min(1.0, abs(distAlongCamZ - FOCAL_LENGTH) / FOCAL_RANGE);\n            dofZ = pow(dofZ, 0.5);\n            fragColor = vec4(avgColor * step(0.0, isect.t), dofZ);\n            float fogT = smoothstep(50.0, 100.0, distance(isect.p , eye));\n            fragColor.rgb = mix(fragColor.rgb, vec3(0.0), fogT);\n        #endif \n\n       #ifdef NO_DOF \n            fragColor = vec4(avgColor.rgb, 1.);\n        #endif\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}