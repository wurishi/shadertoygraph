{"ver":"0.1","info":{"id":"XscBzM","date":"1524394941","viewed":103,"name":"kangya's second","username":"kangya","description":"a tutorial in shadertoy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["study"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n#define sat(x) clamp(x, 0., 1.)\n\nfloat remap01(float a, float b, float t) {\n    return sat((t - a)/(b - a));\n}\n\nfloat remap(float a, float b, float c, float d, float t) {\n\treturn sat((t - a)/(b-a) * (d - c)  + c);\n\n}\n\nvec2 within(vec2 uv, vec4 rect) {\n    return (uv - rect.xy)/(rect.zw - rect.xy);\n}\n\nvec4 Eye(vec2 uv) {\n    \n     // uv -= .5;\n\tvec4 col = vec4(1.);\n    \n    float d = length(uv);\n    vec4 irisCol = vec4(.3, .5, 1., 1.);\n    col = mix(vec4(1.), irisCol, S(.1, .7, d) * .5);\n    \n    // col.rgba *= 1. - S();\n    col.rgb = mix(col.rgb, vec3(0.), S(.3, .28, d));\n    \n    irisCol.rgb *= 1. + S(.3, .05, d);\n    col.rgb = mix(col.rgb, irisCol.rgb, S(.28, .25, d));\n    col.rgb = mix(col.rgb, vec3(0.), S(.16, .14, d));\n    \n    col.a = S(.5, .48, d);\n    return col;\n}\n\n\nvec4 Mouth(vec2 uv) {\n\tvec4 col = vec4(.9, .65, .1, 1.);\n    return col;\n} \n\nvec4 Head(vec2 uv) {\n\tvec4 col = vec4(.9, .65, .1, 1.);\n    \n    float d = length(uv);\n    \n    col.a = S(.5, .49, d);\n    \n    float edgeShade = remap01(.35, .5, d); \n    edgeShade *= edgeShade;\n    col.rgb *= 1.-edgeShade*.5;\n    \n    col.rgb = mix(col.rgb, vec3(.6, .3, .1), S(.47, .48, d));\n   \n    float highlight = S(.41, .405, d);\n    \n    highlight *= remap(.41, -.1, .75, 0., uv.y);\n    col.rgb = mix(col.rgb, vec3(1.), highlight);\n    \n    d = length(uv - vec2(.25, -.2));\n    float cheek = S(.2, .01, d) * .4;\n    cheek *= S(.17, .16, d);\n    col.rgb = mix(col.rgb, vec3(1., .1, .1), cheek);\n    \n    \n    return col;\n}\n\n\nvec4 Smiley(vec2 uv) {\n    \n   vec4 col = vec4(0.);\n   \n    uv.x = abs(uv.x);\n    vec4 head = Head(uv);\n\tvec4 eye = Eye(within(uv, vec4(.03, -.1, .37, .25)));\n    col = mix(col, head, head.a);\n    col = mix(col, eye, eye.a);\n\n   return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv -= .5;\n    uv.x *= iResolution.x / iResolution.y;\n    // Time varying pixel color\n\n    // Output to screen\n    fragColor = Smiley(uv);\n}","name":"Image","description":"","type":"image"}]}