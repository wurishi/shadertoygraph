{"ver":"0.1","info":{"id":"XttczX","date":"1533463023","viewed":188,"name":"shake flame","username":"guowei","description":"shake flame","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flame","shake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//learn most from https://www.shadertoy.com/view/lddyzr\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define      PI 3.14159265358979323 // mm pie\n#define     TAU 6.28318530717958647 // pi * 2\n#define HALF_PI 1.57079632679489661 // pi / 2\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v) {\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n    \n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n  // First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n  // Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n  // Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n    + i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n  // Gradients: 41 points uniformly over a line, mapped onto a diamond.\n  // The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n  // Normalise gradients implicitly by scaling m\n  // Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n  // Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec2 angleRadius(vec2 uv) {\n    float twoPi = 6.2831853;\n\tfloat anglePixel = atan(uv.y, uv.x) / twoPi;\n    float lengthPixel = length(uv);\n    \n    return vec2(anglePixel, lengthPixel);\n}\n\nfloat circle(vec2 uv, vec2 pq, float radius, float noiseishness) {\n  float r = radius + snoise(uv + iTime * .35) * noiseishness;\n  float s = 2. / iResolution.y;\n  //return smoothstep(r + s, r - s, pq.y);\n  //return 1.0 - step(r, pq.y);\n    return 1.0 - smoothstep(r - 0.2, r, pq.y);\n    //return smoothstep(r - 0.2, r + 0.005, pq.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\t//vec2 pq = vec2(atan(uv.x, uv.y) / TAU + .5, length(uv));\n    \n    //shake the clock\n    float tt=mod(iTime,1.5)/1.5;\n  \tfloat ss=1.0+0.8*sin(tt*3.1415*6.0+uv.y*0.8)*exp(-tt*2.0);\n  \tuv*=(vec2(0.7,1.5)+ss*vec2(0.3,-0.5));\n    \n    vec2 pq = angleRadius(uv);\n    \n    float n = 0.1;\n  \t//n += sin(iTime) * .1; // add some extra warble\n  \tfloat c0 = circle(uv, pq, .35, n);\n    \n    \n    fragColor = vec4(c0 * 5.6, c0 * 1.1, c0 * 2.1, 0.8);\n    \n}","name":"Image","description":"","type":"image"}]}