{"ver":"0.1","info":{"id":"dtlfRr","date":"1692793370","viewed":90,"name":"Tesla Logo SDF","username":"TheTurk","description":"Tesla logo constructed from biarcs ([url]https://www.shadertoy.com/view/ctfBRr[/url]).","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","logo","distance","curve","arc","tesla","biarc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float arc(vec2 position, vec2 start, vec2 startTangent, vec2 end) {\n    vec2 midpoint = (start + end) * 0.5;\n    vec2 bisector = start - end;\n    bisector = vec2(-bisector.y, bisector.x);\n    float t = dot(start - midpoint, startTangent) / dot(bisector, startTangent);\n    vec2 center = midpoint + bisector * t;\n    position -= center;\n    vec2 a = start - center;\n    vec2 b = end - center;\n    bool m = a.x * b.y < a.y * b.x;    \n    bool s1 = position.x * a.y < position.y * a.x;\n    bool s2 = position.x * b.y < position.y * b.x; \n    // even-odd rule\n    float s = 1.0;\n    float radius = length(start - center);\n    float c = radius * radius - position.y * position.y;\n    if (c > 0.0) {\n        c = sqrt(c);\n        bool s1 = -c * a.y < position.y * a.x;\n        bool s2 = -c * b.y < position.y * b.x;\n        bool s3 = c * a.y < position.y * a.x;\n        bool s4 = c * b.y < position.y * b.x;\n        if (position.x < -c && (s1 != m && s2 == m)) {\n            s = -s;\n        }\n        if (position.x < c && (s3 != m && s4 == m)) {\n            s = -s;\n        }\n    }\n    if (s1 != m && s2 == m) {\n       return abs(length(position) - radius) * s;\n    }\n    vec2 p1 = position - a;\n    vec2 p2 = position - b;\n    float d = sqrt(min(dot(p1, p1), dot(p2, p2)));\n    return d * s;\n}\n\nfloat biarc(vec2 position, inout vec2 currentPoint, vec2 controlPoint, vec2 end) {\n    vec2 tangent1 = controlPoint - currentPoint;\n    vec2 tangent2 = controlPoint - end;\n    float a = length(end - controlPoint);\n    float b = length(currentPoint - end);\n    float c = length(controlPoint - currentPoint);\n    vec2 incenter = (currentPoint * a + controlPoint * b + end * c) / (a + b + c);\n    float d1 = arc(position, currentPoint, tangent1, incenter);\n    float d2 = arc(position, end, tangent2, incenter);\n    float d = min(abs(d1), abs(d2));\n    float s = sign(d1 * d2);\n    currentPoint = end;\n    return d * s;\n}\n\nfloat line(vec2 position, inout vec2 currentPoint, vec2 end) {\n    vec2 p = position - currentPoint;\n    vec2 e = end - currentPoint;\n    float h = clamp(dot(p, e) / dot(e, e), 0.0, 1.0);\n    float d = length(p - e * h);\n    float s = 1.0;\n    // even-odd rule\n    if ((p.y > 0.0) != (p.y > e.y)) {\n        if ((e.y * p.x < e.x * p.y) != (e.y < 0.0)) {\n            s = -s;\n        } \n    }\n    currentPoint = end;\n    return d * s;\n}\n\nfloat logo(vec2 position) {\n    vec2 currentPoint = vec2(-0.657, 0.515);\n    float d1 = biarc(position, currentPoint, vec2(0.0, 0.788), vec2(0.657, 0.515));\n    float d2 = biarc(position, currentPoint, vec2(0.64, 0.472), vec2(0.621, 0.437));\n    float d3 = biarc(position, currentPoint, vec2(0.0, 0.709), vec2(-0.621, 0.437));\n    float d4 = biarc(position, currentPoint, vec2(-0.64, 0.472), vec2(-0.657, 0.515));\n    currentPoint = vec2(0.0, 0.345);\n    float d5 = line(position, currentPoint, vec2(0.136, 0.516));\n    float d6 = biarc(position, currentPoint, vec2(0.373, 0.504), vec2(0.6, 0.4));\n    float d7 = biarc(position, currentPoint, vec2(0.537, 0.31), vec2(0.423, 0.262));\n    float d8 = biarc(position, currentPoint, vec2(0.421, 0.331), vec2(0.354, 0.348));\n    float d9 = biarc(position, currentPoint, vec2(0.301, 0.365), vec2(0.184, 0.363));\n    float d10 = line(position, currentPoint, vec2(0.0, -0.7));\n    float d11 = line(position, currentPoint, vec2(-0.184, 0.363));\n    float d12 = biarc(position, currentPoint, vec2(-0.301, 0.365), vec2(-0.354, 0.348));\n    float d13 = biarc(position, currentPoint, vec2(-0.421, 0.331), vec2(-0.423, 0.262));\n    float d14 = biarc(position, currentPoint, vec2(-0.537, 0.31), vec2(-0.6, 0.4));\n    float d15 = biarc(position, currentPoint, vec2(-0.373, 0.504), vec2(-0.136, 0.516));\n    float d16 = line(position, currentPoint, vec2(0.0, 0.345));\n    float d17 = min(min(min(abs(d1), abs(d2)), abs(d3)), abs(d4));\n    float d18 = min(min(min(min(min(min(min(min(min(min(min(abs(d5), abs(d6)), abs(d7)), abs(d8)), abs(d9)), abs(d10)), abs(d11)), abs(d12)), abs(d13)), abs(d14)), abs(d15)), abs(d16));\n    float s1 = sign(d1 * d2 * d3 * d4);\n    float s2 = sign(d5 * d6 * d7 * d8 * d9 * d10 * d11 * d12 * d13 * d14 * d15 * d16);\n    return min(d17 * s1, d18 * s2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n\n    float scale = 1.2;\n    float d = logo(position / scale) * scale;\n    \n    vec3 color = mix(vec3(0.88, 0.68, 0.6), vec3(0.7, 0.75, 0.85), clamp(d * 0.85, 0.0, 1.0));\n    color -= mix(vec3(0.03, 0.21, 0.21), vec3(0.0), smoothstep(0.0, 3.0, d * iResolution.y));\n    float d1 = 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.0025) * iResolution.y);\n    float d2 = 1.0 - smoothstep(0.0, 3.0, abs((mod(d + 0.15, 0.3) - 0.15) * iResolution.y) - 2.0);\n    float d3 = 1.0 - smoothstep(0.0, 3.0, abs((mod(d + 0.025, 0.05) - 0.025) * iResolution.y) - 2.0);\n    color -= max(d1 * 0.85, max(d2 * 0.25, d3 * 0.05));    \n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = logo(mousePosition / scale) * scale;\n        color -= 0.8 * (1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n        color -= 0.2 * (1.0 - smoothstep(0.0, 3.0, (length(position - mousePosition) - max(abs(d) - 0.02, 0.0)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n} ","name":"Image","description":"","type":"image"}]}