{"ver":"0.1","info":{"id":"clSfWV","date":"1694479760","viewed":77,"name":"Prismatic Lines","username":"xXx_T0SHIII_xXx","description":"Just something I made after watching and trying to understand this tutorial (https://www.youtube.com/watch?v=f4s1h2YETNY)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["line","animated","pattern","visual","stunning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette( in float t)\n{\n    vec3 a = vec3(0.577, 0.192, 0.922);\n    vec3 b = vec3(0.827, 0.944, 0.565);\n    vec3 c = vec3(0.472, 1.541, 1.174);\n    vec3 d = vec3(3.973, 5.658, 1.133);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord*2.0 - iResolution.xy)/iResolution.y;\n    vec3 finalColor = vec3(0.0);\n    vec2 uv0 = uv;\n    for (float i = 0.0; i < 4.0; i++)\n    {\n        uv = uv - sign(iTime) * .5;\n        float d = min(dot(uv.x, uv.y), 0.5) + exp(-length(uv0));\n        vec3 col = palette(length(uv + abs(uv0)) * 0.4 + iTime * .4);\n        d /= max(dot(uv.x, uv.y), 0.5);\n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n        d = 0.005 / d;\n    \n        finalColor += col * d;\n     }\n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}