{"ver":"0.1","info":{"id":"4fjcz1","date":"1721920682","viewed":37,"name":"Audio Record","username":"mike2367","description":"playing with music and frequency","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BARS 12.\n#define PI 3.14159265359\n// ref: https://www.shadertoy.com/view/XscGRn\n// ref: https://www.shadertoy.com/view/XlcXDX\nvec4 freq1, freq2, freq3;\n\nvec4 map(vec3 p)\n{   \n    p.xy += vec2(cos(p.z),sin(p.z));\n\t\n    float c = 0.9;\n\n    float cz = p.z, sz = p.z;\n    \n    cz += freq1.x; sz -= freq2.y;\n   \tfloat tube = length(p.xy - vec2(cos(cz),sin(sz))*.5) * 1.5;\n    vec4 res = vec4(tube, c, freq1.x, freq2.y);\n    \n\tcz += freq1.y; sz -= freq2.z;\n\ttube = min(tube, length(p.xy - vec2(cos(cz),sin(sz))*.4))* 1.5;\n    if (tube < res.x) res = vec4(tube, c, freq1.y, freq2.z);\n        \n\tcz += freq1.z; sz -= freq2.y;\n\ttube = min(tube, length(p.xy - vec2(cos(cz),sin(sz))*.3))* 1.5;\n    if (tube < res.x) res = vec4(tube, c, freq1.z, freq2.w);\n    \n\tcz += freq1.w; sz -= freq2.x;\n\ttube = min(tube, length(p.xy - vec2(cos(cz),sin(sz))*.2))* 1.5;\n    if (tube < res.x) res = vec4(tube, c, freq1.w, freq2.x);\n    \n    \n    cz += freq3.x; sz -= freq1.w;\n\ttube = min(tube, length(p.xy - vec2(cos(cz),sin(sz))*.1))* 1.5;\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n\tcz += freq3.y; sz -= freq1.z;\n\ttube = min(tube, length(p.xy/* + vec2(cos(cz),sin(sz))*.0*/));\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n\tcz += freq3.z; sz -= freq1.y;\n\ttube = min(tube, length(p.xy - vec2(cos(cz),sin(sz))*-.1))* 1.5;\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n\tcz += freq3.w; sz -= freq1.x;\n\ttube = min(tube, length(p.xy - vec2(cos(cz),sin(sz))*-.2))* 1.5;\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n    \n\tcz += freq2.x; sz -= freq3.w;\n\ttube = min(tube, length(p.xy - vec2(sin(cz),cos(sz))*-.3))* 1.5;\n    if (tube < res.x) res = vec4(tube, freq2.x, freq3.w, c);\n    \n\tcz += freq2.y; sz -= freq3.z;\n\ttube = min(tube, length(p.xy - vec2(sin(cz),cos(sz))*-.4))* 1.5;\n    if (tube < res.x) res = vec4(tube, freq2.y, freq3.z, c);\n    \n\tcz += freq2.z; sz -= freq3.y;\n\ttube = min(tube, length(p.xy - vec2(sin(cz),cos(sz))*-.5))* 1.5;\n    if (tube < res.x) res = vec4(tube, freq2.z, freq3.y, c);\n    \n\tcz += freq2.w; sz -= freq3.x;\n\ttube = min(tube, length(p.xy - vec2(sin(cz),cos(sz))*-.6))* 1.5;\n    if (tube < res.x) res = vec4(tube, freq2.w, freq3.x, c);\n    \n\treturn vec4(mod(res.x - 0.03, 6.), res.yzw);\n}\n\nvec4 trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    vec4 d;\n    for (int i = 0; i < 60; ++i)\n    {\n        vec3 p = o + r * t;\n        d = map(p);\n        t += d.x * (d.x>0.05?0.5:0.1);\n    }\n    return vec4(t, d.yzw);\n}\n// rotation transform\nvoid tRotate(inout vec2 p, float angel) {\n    float s = sin(angel), c = cos(angel);\n\tp *= mat2(c, -s, s, c);\n}\n\n// circle distance\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\n// union\nfloat opU(float a, float b) {\n    return min(a, b);\n}\n\n// substraction\nfloat opS(float a, float b) {\n    return max(a, -b);\n}\n\n// distance function of half of an ark\n// parameters: inner radius, outer radius, angle\nfloat sdArk(vec2 p, float ir, float or, float a) {\n    \n    // add outer circle\n    float d = sdCircle(p, or);\n        \n    // substract inner circle\n    d = opS(d, sdCircle(p, ir));\n    \n    // rotate with angle\n    tRotate(p, -a * PI / 2.);\n    \n    // clip the top\n    d = opS(d, -p.y);\n    \n    // add circle to the top\n    d = opU(d, sdCircle(p - vec2((or + ir) / 2., 0.), (or - ir) / 2.));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv *= 1.35;\n    freq1.x = texture( iChannel0, vec2( 0.075, 0.25 ) ).x;\n\tfreq1.y = texture( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfreq1.z = texture( iChannel0, vec2( 0.225, 0.25 ) ).x;\n\tfreq1.w = texture( iChannel0, vec2( 0.3, 0.25 ) ).x;\n    \n    freq2.x = texture( iChannel0, vec2( 0.375, 0.25 ) ).x;\n\tfreq2.y = texture( iChannel0, vec2( 0.45, 0.25 ) ).x;\n\tfreq2.z = texture( iChannel0, vec2( 0.525, 0.25 ) ).x;\n\tfreq2.w = texture( iChannel0, vec2( 0.6, 0.25 ) ).x;\n    \n    freq3.x = texture( iChannel0, vec2( 0.675, 0.25 ) ).x;\n    freq3.y = texture( iChannel0, vec2( 0.75, 0.25 ) ).x;\n    freq3.z = texture( iChannel0, vec2( 0.825, 0.25 ) ).x;\n    freq3.w = texture( iChannel0, vec2( 0.9, 0.25 ) ).x;\n    vec3 r = normalize(vec3(uv, 2.0));\n    \n    vec3 o = vec3(0.0, 0.0, iTime * 2.);\n    \n    vec4 t = trace(o, r);\n    \n    float fog = 2. / (1. + t.x * t.x * 0.1);\n    \n    \n    \n    uv /= 1.35;\n    // the record part\n    uv *= 1.05;\n    // add circles\n    float d = sdCircle(uv, 1.);\n    d = opS(d, sdCircle(uv, .34));\n    d = opU(d, sdCircle(uv, .04));\n    \n    // calculate position of the bars\n    float barsStart = .37;\n    float barsEnd = .94;\n    float barId = floor((length(uv) -barsStart) / (barsEnd - barsStart) * BARS);\n    \n    // only go forward if we're in a bar\n    if (barId >= 0. && barId < BARS) {\n        \n        float barWidth = (barsEnd - barsStart) / BARS;\n        float barStart = barsStart + barWidth * (barId + .25);\n        float barAngel = texture(iChannel0, vec2(1. - barId / BARS, .25)).x * .8;\n\n        // mirror everything\n    \tuv = abs(uv);\n        \n        // add the bars\n        d = opS(d, sdArk(uv, barStart, barStart + barWidth / 2., barAngel));\n    }\n    \n    // use the slope to render the distance with antialiasing\n    float w = min(fwidth(d), .01);\n    \n\n    \n    \n\n    vec3 col1 = vec3(smoothstep(-w, w, d)*0.8+0.4, 0.4+smoothstep(-w, w, d)*0.6, 0.9) * 1.2;\n    vec3 col = mix(col1, fog*t.xzw, 0.34);\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}