{"ver":"0.1","info":{"id":"wljfR1","date":"1598729725","viewed":47,"name":"TFG 0-1 Homeomorfismo","username":"lukasharing","description":"Homeomorfismo sobre una textura.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tfg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Homeomorfismo\nfloat h(float x){ return pow(x, 8.); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalización\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    vec4 textura = texture(iChannel0, uv);\n    \n    // Canal grises, utilizando el módulo del color\n    float canal = length(textura.rgb);\n    \n    // Aplicamos el homeomorfismo\n    float hcanal = h(canal);\n    \n    // Devolvemos la primera mitad, el canal normal\n    // en la segunda mitad, el homeomorfismo.\n    if(abs(uv.x) < 0.01){\n    \tfragColor = vec4(1.0);\n    }else if(uv.x <= 0.){\n    \tfragColor = vec4(vec3(canal), 1.0);\n    }else{\n        fragColor = vec4(vec3(hcanal), 1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}