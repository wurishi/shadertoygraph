{"ver":"0.1","info":{"id":"DsBcDD","date":"1687703021","viewed":63,"name":"Fractured Lines","username":"exocortex","description":"fractured layers of colorful, slowly moving lines","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lines","shiny","fractures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( float t) {\n    \n    vec3 a = vec3(0.5, 0.5, 0.25);\n    vec3 b = vec3(0.65, 0.25, 0.95);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.616, 0.557);\n    \n    return a + b*cos(6.28318*(c*t+d));\n}\n\nmat2 rotate2d(float _angle) {\n    _angle *= 3.141592653589793238462643383279502884197169;\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle), cos(_angle));\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n \n\n \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    for(float i = 0.0; i<10.0; i++) {\n        \n        vec2 sh = vec2(1.0 - i * 0.05 + sin(iTime * 0.00125 * i) * 0.1 - 0.1,\n                       1.0 - i * 0.05 + cos(iTime * 0.00125 * i) * 0.1 - 0.1);\n        \n        uv = uv * rotate2d(-iTime * 0.005 + (i * 0.0005 + 1.0));\n        uv /= (length(uv) + 0.5);\n        uv = fract((uv + (1.0 - sh)) * 1.25) - (1.0 - sh);\n        uv = uv * rotate2d( iTime * 0.005 + (i * 0.0005 - 1.0));\n        uv = fract((uv + sh) / 1.125) - sh;\n        \n        \n        float d = length(uv) * exp(-length(uv0));\n    \n        vec3 col = palette(length(uv0 + uv) + iTime * 0.005 + i * 0.1);\n   \n        d = sin(d * 8.0 + iTime * 0.01) / 8.0;\n        d = abs(d);\n        d = pow(0.0025  / d, 1.5);\n\n        finalColor += col * d;\n    }\n\n\n    fragColor = vec4(finalColor, 1.0);\n\n\n\n\n}\n","name":"Image","description":"","type":"image"}]}