{"ver":"0.1","info":{"id":"Nty3zG","date":"1637846884","viewed":229,"name":"Chamfered Box (SDF)","username":"TheTurk","description":"Distance function (exact) for a chamfered box.\nOther 3D distance functions:\n[url]https://www.shadertoy.com/playlist/73lfR7[/url]","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["3d","distancefield","sdf","cube","distance","box","octahedron","primitive","cuboid","chamfer","chamfered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box(vec3 position, vec3 halfSize, float chamferRadius) { \n    vec3 p1 = abs(position - clamp(position, chamferRadius - halfSize, halfSize - chamferRadius));\n    vec3 p2 = abs(position) - halfSize;\n    float h = (p1.x + p1.y + p1.z - chamferRadius) / 3.0;\n    vec3 q = p1 - h;\n    vec3 k = min(q, 0.0);\n    q += 0.5 * (k.x + k.y + k.z) - 1.5 * k;\n    q = clamp(q, 0.0, chamferRadius); \n    float d1 = max(max(p2.x, p2.y), p2.z);\n    float d2 = (max(max(p2.x + p2.y, p2.x + p2.z), p2.y + p2.z) + chamferRadius) / sqrt(2.0);\n    float d3 = (p2.x + p2.y + p2.z + 2.0 * chamferRadius) / sqrt(3.0);\n    return h > 0.0 ? length(p1 - q) : max(max(d1, d2), d3);\n}\n\nmat3 lookAtMatrix(vec3 from, vec3 to) {\n    vec3 forward = normalize(to - from);\n    vec3 right = normalize(cross(forward, vec3(0.0, 1.0, 0.0)));\n    vec3 up = cross(right, forward);\n    return mat3(right, up, forward);\n}\n\nmat3 rotationMatrixAxisAngle(vec3 axis, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    vec3 column1 = axis * axis.x * (1.0 - c) + vec3(c, axis.z * s, -axis.y * s);\n    vec3 column2 = axis * axis.y * (1.0 - c) + vec3(-axis.z * s, c, axis.x * s);\n    vec3 column3 = axis * axis.z * (1.0 - c) + vec3(axis.y * s, -axis.x * s, c);\n    return mat3(column1, column2, column3);\n}\n\nfloat sdf(in vec3 position) { \n    float halfWidth = 0.35; \n    float halfHeight = 0.2;\n    float halfDepth = 0.35;\n    float chamferRadius = ((cos((iTime - 1.0) * 0.5) + 1.0) * 0.5) * 0.2 / (sqrt(2.0) + 1.0) * sqrt(2.0);\n    float d = box(position, vec3(halfWidth, halfHeight, halfDepth), chamferRadius);\n    d -= 0.01;\n    return d;\n}\n\nvec3 normal(vec3 position) {\n    float epsilon = 0.001;\n    vec3 gradient = vec3(\n        sdf(position + vec3(epsilon, 0, 0)) - sdf(position + vec3(-epsilon, 0, 0)),\n        sdf(position + vec3(0, epsilon, 0)) - sdf(position + vec3(0, -epsilon, 0)),\n        sdf(position + vec3(0, 0, epsilon)) - sdf(position + vec3(0, 0, -epsilon))\n    );\n    return normalize(gradient);\n}\n\nfloat raycast(vec3 rayOrigin, vec3 rayDirection) {\n    int stepCount = 256;\n    float maximumDistance = 5.0;\n    float t = 0.0;\n    for (int i = 0; i < stepCount; i++) {\n        if (t > maximumDistance) {\n            break;\n        }\n        vec3 currentPosition = rayOrigin + rayDirection * t;\n        float d = sdf(currentPosition);\n        if (d < 0.0001) {\n            return t;\n        }\n        t += d;\n    }\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tfloat angle = 0.5 * (iTime - 8.0);\n\tvec3 rayOrigin = vec3(1.0 * cos(angle), 0.4, 1.0 * sin(angle));\n    vec3 targetPosition = vec3(0.0);\n    mat3 cameraTransform = lookAtMatrix(rayOrigin, targetPosition);\n    vec3 result = vec3(0.0);\n    ivec2 sampleCount = ivec2(3.0, 3.0);\n    for (int y = 0; y < sampleCount.y; y++) {\n        for (int x = 0; x < sampleCount.x; x++) {\n            vec2 uv = fragCoord + (vec2(float(x), float(y)) / vec2(sampleCount) - 0.5);\n            uv = uv / iResolution.xy;\n            uv = (uv * 2.0) - 1.0;\n            uv.x *= iResolution.x / iResolution.y;\n            vec3 rayDirection = normalize(vec3(uv, 1.5));\n            rayDirection = cameraTransform * rayDirection;\n            float t = raycast(rayOrigin, rayDirection);\n            vec3 color = vec3(0.0);\n            if (t > 0.0) {\n                // same style that Inigo Quilez uses in his shaders\n                vec3 position = rayOrigin + rayDirection * t;\n                vec3 lightDirection = vec3(0.57735);\n                vec3 n = normal(position);\n                float diffuseAngle = max(dot(n, lightDirection), 0.0);\n                // diffuse\n                color = vec3(0.8, 0.7, 0.5) * diffuseAngle;\n                // ambient\n                color += vec3(0.2, 0.3, 0.4) * ((n.y + 1.0) * 0.5);\n            }\n            // gamma        \n            color = sqrt(color);\n            result += color;\n        }\n    }\n    result /= float(sampleCount.x * sampleCount.y);\n\tfragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}