{"ver":"0.1","info":{"id":"fsyfWh","date":"1658082570","viewed":150,"name":"braids experiments","username":"rodgzilla","description":"Finding a valid formula to draw 3 strand braids.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","braids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time 1. * iTime\n#define ZPOS -50.\n\nfloat PI = acos(-1.);\n\nmat2 rot2d(float a){\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\n\nfloat cyl(vec3 p, vec3 c){\n  return length(p.xy - c.xy) - c.z;\n}\n\n\n\nfloat braid(vec3 p, float m, float r) {\n    vec3 p1 = p;\n    vec3 p2 = p;\n    vec3 p3 = p;\n\n    p1.x += 1. * sin(p1.z * m);\n    p1.y += 1. * sin(p1.z * 2. * m);\n    p2.z += 2. * PI / (m * 3.);\n\n    p2.x += 1. * sin(p2.z * m);\n    p2.y += 1. * sin(p2.z * m * 2.);\n    p3.z += 4. * PI / (3. * m);\n\n    p3.x += 1. * sin(p3.z * m);\n    p3.y += 1. * sin(p3.z * m * 2.);\n    \n    float s1 = cyl(p1, vec3(0, -3, r));\n    float s2 = cyl(p2, vec3(0, -3, r));\n    float s3 = cyl(p3, vec3(0, -3, r));\n    \n    float d = min(s1, min(s2, s3));\n\n    return d;\n}\n\nfloat brabraid(vec3 p, float m, float r, float xm, float ym) {\n    float ma = m * 2.;\n    vec3 p1 = p;\n    vec3 p2 = p;\n    vec3 p3 = p;\n    \n    \n    p1.x += xm * sin(p1.z * ma);\n    p1.y += ym * sin(p1.z * 2. * ma);\n    p2.z += 2. * PI / (ma * 3.);\n\n    p2.x += xm * sin(p2.z * ma);\n    p2.y += ym * sin(p2.z * ma * 2.);\n    p3.z += 4. * PI / (3. * ma);\n\n    p3.x += xm * sin(p3.z * ma);\n    p3.y += ym * sin(p3.z * ma * 2.);\n    \n    float s1 = braid(p1, m, r);\n    float s2 = braid(p2, m, r);\n    float s3 = braid(p3, m, r);\n    \n    float d = min(s1, min(s2, s3));\n\n    return d;\n}\n\n\nfloat map(vec3 p) {\n    float d = 1000.;\n    float z = p.z;\n    p.xy *= rot2d(time * .3);\n    p.yz *= rot2d(time * .4);\n\n    d = min(d, brabraid(p.zxy - vec3(0, 0, 0), .05 , .5, 2.5, 2.5));\n    \n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0., ZPOS);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n\n  float d = 0.;\n  vec3 glow = vec3(0);\n\n  for (int i = 0; i < 100; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 100.) {\n      break;\n    }\n    d += ds;\n  }\n  \n  vec3 p = ro + d * rd;\n  vec2 e = vec2(0.01, 0);\n  vec3 n = normalize(map(p) - \n    vec3(\n      map(p - e.xyy),\n      map(p - e.yxy),\n      map(p - e.yyx)\n    )\n  );\n\n  vec3 lp = ro;\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  float dif = dot(tln, n);\n  \n  col = vec3(dif);\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}