{"ver":"0.1","info":{"id":"XXlyWl","date":"1727551164","viewed":10,"name":"realize","username":"dackdel","description":"converting old processing sketches into shaders ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["eyes","real"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n\n// Function to create a 2D rotation matrix given an angle in radians\nmat2 rotate2d(float _angle) {\n    return mat2(cos(_angle), -sin(_angle), // First column of the rotation matrix\n                sin(_angle), cos(_angle)); // Second column of the rotation matrix\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalize the fragment coordinates relative to the screen dimensions\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Clear screen\n    vec3 bgColor = vec3(1.0); // Default to white background\n    if (iMouse.z > 0.0) {\n        // If mouse is pressed, change the background to black\n        bgColor = vec3(0.0);\n    }\n    \n    // Eye parameters\n    float eyeRadius = 125.0 / iResolution.x;\n    float pupilRadius = 50.0 / iResolution.x;\n    \n    // Position of eyes in normalized coordinates centered in the viewport\n    vec2 eye1Center = vec2(0.4, 0.5);\n    vec2 eye2Center = vec2(0.6, 0.5);\n    \n    // Compute pupil positions relative to the eyes\n    vec2 pupil1 = (iMouse.xy / iResolution.xy - eye1Center) * iResolution.y / iResolution.x / 2.0;\n    pupil1 = clamp(pupil1, -eyeRadius + pupilRadius, eyeRadius - pupilRadius);\n    pupil1 = pupil1 + eye1Center;\n    \n    vec2 pupil2 = (iMouse.xy / iResolution.xy - eye2Center) * iResolution.y / iResolution.x / 2.0;\n    pupil2 = clamp(pupil2, -eyeRadius + pupilRadius, eyeRadius - pupilRadius);\n    pupil2 = pupil2 + eye2Center;\n    \n    // Distance from the fragment to the center of each eye and pupil\n    float distToEye1 = length((uv - eye1Center) / eyeRadius);\n    float distToPupil1 = length((uv - pupil1) / pupilRadius);\n    float distToEye2 = length((uv - eye2Center) / eyeRadius);\n    float distToPupil2 = length((uv - pupil2) / pupilRadius);\n    \n    // Default color is the background color\n    vec3 color = bgColor;\n    \n    // Draw eyes and pupils\n    if (distToEye1 < 1.0) {\n        color = vec3(1.0); // White eye\n    }\n    if (distToPupil1 < 1.0) {\n        color = vec3(0.0); // Black pupil\n    }\n    if (distToEye2 < 1.0) {\n        color = vec3(1.0); // White eye\n    }\n    if (distToPupil2 < 1.0) {\n        color = vec3(0.0); // Black pupil\n    }\n    \n    // Set the fragment color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}