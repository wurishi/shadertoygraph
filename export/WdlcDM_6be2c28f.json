{"ver":"0.1","info":{"id":"WdlcDM","date":"1584914620","viewed":75,"name":"Game of Life (timeeeee)","username":"timeeeee","description":"https://en.wikipedia.org/wiki/Conway's_Game_of_Life","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["life","conway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RADIUS 40.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord.xy / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R .99\n#define ON vec4(1.0, 1.0, 1.0, 1.0)\n#define OFF vec4(0.0, 0.0, 0.0, 1.0)\n\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvec4 drawRPentamino(vec2 coord) {\n    vec2 center = floor(iResolution.xy / 2.0) + vec2(.5, .5);\n    /*\n    \t.**\n    \t**.\n    \t.*.\n    */\n    vec4 color = OFF;\n    if (coord == center) color = ON;\n    if (coord == center + vec2(0.0, -1.0)) color = ON;\n    if (coord == center + vec2(-1.0, 0.0)) color = ON;\n    if (coord == center + vec2(0.0, 1.0)) color = ON;\n    if (coord == center + vec2(1.0, 1.0)) color = ON;\n\treturn color;\n}\n\n\n// probability of a pixel being filled is r\nvec4 drawRandom(float r, vec2 coord) {\n    return (rand(coord / iResolution.xy) < r) ? ON : OFF;\n}\n\n\nvec4 getPixel(vec2 coord) {\n    // scale\n    coord /= iResolution.xy;\n    // wrap?\n    coord = mod(coord + 1.0, 1.0);\n\treturn texture(iChannel0, coord);\n}\n\n\nint countNeighbors(vec2 coord) {\n    int neighbors = 0;\n    for (int dx = -1; dx <= 1; dx++) {\n        for (int dy = -1; dy <= 1; dy++) {\n            vec2 offset = vec2(dx, dy);\n            if (offset == vec2(0.0, 0.0)) continue;\n            if (getPixel(coord + offset) == ON) neighbors++;\n        }\n    }\n    return neighbors;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame == 1) {\n        // fragColor = drawRPentamino(fragCoord);\n        fragColor = drawRandom(.07, fragCoord);\n    } else {\n        vec4 thisCell = getPixel(fragCoord);\n        fragColor = thisCell;\n        \n        int neighbors = countNeighbors(fragCoord);\n        \n        // should this cell die?\n        if (thisCell == ON && (neighbors < 2 || neighbors > 3)) fragColor = OFF;\n        \n        // should a cell be born here?\n        if (thisCell == OFF && neighbors == 3) fragColor = ON;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}