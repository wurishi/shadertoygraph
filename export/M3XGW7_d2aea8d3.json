{"ver":"0.1","info":{"id":"M3XGW7","date":"1707549807","viewed":97,"name":"falling letters bw v2","username":"Diamondarms","description":"no more loops in the code\n\nnot performance-friendly version: https://www.shadertoy.com/view/4fjXDW","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["grid","matrix","letters"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\n\nfloat gridFix( float rang, float gridSize){\n    return floor(rang * gridSize) / (gridSize-1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool falling = true;\n\n    vec2 uv = fragCoord/iResolution.xy,\n         rFVel = vec2(0.6,0.7), //Velocity range of char fall \n         ref_size = vec2(16), //Size of the reference image letters grid \n         grid_ref = uv / ref_size,\n         tab_size = vec2(30); //Size of the final letters grid\n         \n    float waveSize = 10.,\n          fadedL = 7., //between 1 and waveSize\n          whiteL = 0., //between 0 and (fadedL - 1)\n          num_of_chars = ref_size.x * ref_size.y,\n    \n    noise_size = 64.;\n    vec3 noise = texture(iChannel0,uv/noise_size * tab_size).rgb; //vec2 in the tab_size\n         noise = floor(noise * num_of_chars)/num_of_chars; //color is fixed to number of letters\n         \n    //random char from iChannel1\n    vec2 rand_char = grid_ref + (floor(noise.r * ref_size) / ref_size);\n    vec3 charColor = vec3(texture(iChannel1,rand_char * tab_size).r);\n    \n    //fallVel\n    float fallVel = rand(gridFix(uv.x,tab_size.x)) * rFVel.x + (rFVel.y-rFVel.x),\n          time = iTime * fallVel,\n          yDir = gridFix(falling ? uv.y : (1.-uv.y),tab_size.y),\n          fade = smoothstep(fadedL/tab_size.y,whiteL/tab_size.y, mod(time + yDir ,waveSize / tab_size.y));\n          \n    fragColor.rgb = charColor * fade;\n\n}\n\n","name":"Image","description":"","type":"image"}]}