{"ver":"0.1","info":{"id":"7dBSDc","date":"1621156934","viewed":156,"name":"Particle fire","username":"Marina033","description":"Fire and fog using particles (texelFetch)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // [0, 1] - normalize\n    fragColor = texture(iChannel0, uv);\n    //vec4 fog = texture(iChannel2, uv);\n    //fragColor.rgb = mix(fragColor.rgb, fog.rgb, fog.a);\n    //return;\n    \n    uv = (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n    uv *= 2.0;\n    //uv.x -= 0.5;\n    //uv.y += 0.3;\n    \n    //if (length(uv) < 0.5) fragColor += 0.5;\n    \n    vec3 fireColors[5];\n    fireColors[0] = vec3(255,0,0) / 255.0;\n    fireColors[1] = vec3(255,90,0) / 255.0;\n    fireColors[2] = vec3(255,154,0) / 255.0;\n    fireColors[3] = vec3(255,206,0) / 255.0;\n    fireColors[4] = vec3(255,232,8) / 255.0;\n   \n   \n    if (abs(uv.x) > 0.7) { // optimization\n        //fragColor.x = 1.0;\n        return;\n    }\n    \n    for (int i = 0; i < 800; ++i) \n    {\n        vec4 partData = texelFetch(iChannel1, ivec2(i, 0), 0); // Дым при j = 0;\n        const float RAD = 0.25;\n        float distSq = lengthSq(partData.xy - uv);\n        if (distSq < RAD * RAD) { // partData.xy - uv < RAD просто\n            vec2 partUV = (partData.xy - uv) / RAD; // [-1, 1]\n            partUV = partUV * 0.5 + 0.5; // [0, 1]\n            vec4 fog = texture(iChannel2, partUV * 0.5);\n            fragColor.rgb = mix(fragColor.rgb, fog.rgb, fog.a);\n        }\n    }\n    \n    for (int i = 0; i < 800; ++i) \n    {\n        for (int j = 1; j < 2; j++) \n        {\n            vec4 partData = texelFetch(iChannel1, ivec2(i, j), 0); // огогь при j = 1;\n            const float RAD = 0.05;\n            float distSq = lengthSq(partData.xy - uv);\n            if (distSq < RAD * RAD) {\n                //float fade = max(pow(1.0 - sqrt(distSq) / RAD, 4.0), 0.1);\n                float fade = pow(1.0 - sqrt(distSq) / RAD, 4.0);\n                int stage = int(clamp(partData.z * 5.0, 0.0, 4.9999));\n                fragColor.rgb += fade * fireColors[stage] * pow((1.0 - partData.w), 0.5); // * 0.1\n            }\n        }\n    }\n    \n         \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float random(vec2 uv)\n{\n    return fract(sin(dot(uv,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat lengthSq(vec2 v) \n{\n    return dot(v, v);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float randVal = random(fragCoord);\n    float randVal2 = random(fragCoord.yx);\n    float randVal3 = random(vec2(fragCoord.x, 15.0));\n    float randVal4 = random(vec2(fragCoord.x, 750.0));\n    float randVal5 = random(vec2(fragCoord.x, 759.0));\n    float randVal6 = random(vec2(fragCoord.x, 351.0));\n    \n    if (int(fragCoord.y) == 0) {\n        vec2 dir = normalize(vec2(randVal - 0.5, 3.0));\n        fragColor.w =  fract(iTime + randVal2); // для затухания, чтобы сверху пропадали медленно\n        \n        fragColor.y = - 0.2 + fract(iTime * 0.2 + randVal2) * randVal3 * 6.5; // чтобы сверху пропадал и не все долетали\n        fragColor.x = dir.x * fragColor.y;\n         \n        //fragColor.x += sin(iTime * (1.0 + randVal5)) * 0.2 * fragColor.y;\n        return; // выходим из огня, обрабатываем дым\n    }\n    \n  \n    fragColor.x = randVal - 0.5;\n    fragColor.w =  fract(iTime + randVal2); \n    //так не правильно \n    //fragColor.z = fract(iTime + randVal2); // сохранили в z переменную время жизни партикла\n    fragColor.y = fract(iTime + randVal2); // чтобы сверху пропадал\n    fragColor.y *=  randVal3; // чтобы не все долетали до верха\n    fragColor.z = mix(fragColor.y, randVal6, 0.3); // сохранили в z переменную время жизни партикла\n    fragColor.x += sin(iTime * (1.0 + randVal5)) * 0.2 * fragColor.y; // * fragColor.y, чтобы загасить движение внизу\n    fragColor.y -= 0.5;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 offset = ceil(uv * 2.0);\n    \n    uv = fract(uv * 2.0);\n    int layers = 5;\n    for (int i = 0; i < layers; i++) {\n        fragColor += texture(iChannel0, uv * 0.125 / float(1 << i) + offset * 0.5).xxxx;\n        // получили 4 одинаковых шума\n        //(1 << i) = pow(1, i)\n        // у texture(...) только перввая координата = 1, остальные 0\n    }\n    fragColor /= float(layers);\n    fragColor.a += 0.8;\n    fragColor.a *= 1.0 - length(uv.xy * 2.0 - 1.0); // млжно и так length(uv.xy - 0.5) \n    fragColor.a = clamp(fragColor.a, 0.0, 1.0);\n    //fragColor.a = pow(fragColor.a, 3.0);\n\n    //fragColor.a *= 2.0;\n}\n    // можно играться с + и * и порядком этих строчек\n    //fragColor.a += 1.0; // + это увеличение a\n    //fragColor.a *= 1.0 - length(uv.xy -0.5); // uv = uv.xy\n    //fragColor.a *= 2.0;","name":"Buffer B","description":"","type":"buffer"}]}