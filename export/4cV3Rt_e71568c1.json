{"ver":"0.1","info":{"id":"4cV3Rt","date":"1713154256","viewed":109,"name":"going crazy","username":"akr51","description":"Using meta domain repetition and polar coordinates","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["domainrepetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nfloat rct(vec2 uv)\n{\n\n    return smoothstep(max(abs(uv.x), abs(uv.y)), 0.14, 0.13);\n\n}\n\n\nmat2 rt(float f)\n{\n\n\n    float c = cos(f);\n    float s = sin(f);\n    return mat2(c, -s, s, c);\n\n}\n\n\nvec2 rpl(vec2 uv, vec2 p, float s, vec2 r)\n{\n\n\n    uv -= p;\n    float f = sin(length(uv) + iTime);\n    uv = uv - s * clamp(round(uv / s), -r, r) * (1.0 + 0.4 * f);\n    return uv;\n}\n\n\n\nvoid mainImage(out vec4 c_out, in vec2 u)\n{\n    \n    \n    \n    vec2 rr = iResolution.xy, uv = (u + u - rr) / rr.y;\n    uv *= 0.4;\n    float w = length(uv);\n    vec2 uvc = uv;\n    uv.x = abs(uv.x);\n    uv = vec2(length(uv), atan(uv.y, uv.x));\n    uv = fract(uv * 2.0) - 0.5; \n    vec2 id = floor(uv);\n    \n    uv.x *= 1.0 + (cos(id.x) * 0.4);\n    uv.y *= 1.0 + (sin(id.y) * 0.4);\n    uv *= 0.4;\n    uv.x = abs(uv.x);\n    uv = vec2(length(uv), atan(uv.y, uv.x));\n    uv.x += sin(uv.x * 2.0 + iTime);\n    uv.y += cos(uv.y * 3.0 + iTime);\n    float ff = length(uv);\n    uv = fract(uv * 2.0) - 0.5;\n    uv *= rt(iTime * 1.7 + ff) * 0.5;\n    uv = rpl(uv, vec2(0.0, 0.0), 0.5, vec2(1.0, 1.0));\n    float f = rct(uv);\n    \n    c_out = vec4(vec3(1.0 - f * w * 2.0) * (1.0 - w * 1.6), 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}