{"ver":"0.1","info":{"id":"XtySRR","date":"1482475808","viewed":192,"name":"Sky Simplex","username":"KitVanDeBunt","description":"Shader for school","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sky","simplexnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//https://www.shadertoy.com/view/XsX3zB\n//https://www.shadertoy.com/view/Xds3zN\n\n\nvec3 col;\n\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m)\n\t\t\t+0.2666667*simplex3d(0.5*m)\n\t\t\t+0.1333333*simplex3d(2.0*m)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\nfloat cloudLayer(vec3 rd,float skyHeight,float speed, float scale)\n{\n    float sh = skyHeight / rd.y;\n    vec3 skyPos = vec3(\n        (rd.x * sh) + (iTime*speed)\n        ,sh\n        ,rd.z * sh\n    );\n    skyPos*=scale;\n    return simplex3d_fractal(skyPos);\n}\n\n\nvec3 lerp(float t,vec3 A, vec3 B){\n    return (A*(1.0-t))+(B*t);\n}\nfloat lerp(float t,float A, float B){\n    return (A*(1.0-t))+(B*t);\n}\n\nvec3 sky(vec3 rd)\n{\n   float cloudNoise = clamp(cloudLayer(rd,2.2,0.3,0.2)+0.0,0.0,100.0);\n    cloudNoise = clamp(cloudNoise,0.0,1.0);\n    \n    float dotRD = dot(rd,vec3(0.0,1.0,0));\n    \n    float skyPower = (1.5+(dotRD*-0.5))*0.7;\n    vec3 skyCol = vec3(0.52,0.80,0.98)*skyPower;\n    \n    skyCol = clamp(skyCol,0.0,1.0);\n    \n    vec3 clouds = vec3(\n        lerp(\n            cloudNoise*clamp(dotRD,0.0,1.0)\n             ,skyCol\n             ,clamp(vec3(pow(lerp(cloudNoise,-2.0,10.0),1.2)),4.0,4.0)\n    \t)\n    );\n    return  clouds;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n\tfloat time = 150.0 + iTime;\n    \t\n\t//vec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x)\n    //               , -9.0 + 14.0*mo.y\n    //               , 0.5 + 3.5*sin(0.1*time + 6.0*mo.x) );\n\n\tvec3 ro = vec3( -0.5+3.5*cos(6.0*mo.x)\n                   , -9.0 + 14.0*mo.y\n                   , 0.5 + 3.5*sin(6.0*mo.x) );\n\n    \n    col = vec3(1.0,0.0,0.0);\n    p.x *= iResolution.x/iResolution.y;\n\n    // camera\n    vec3 ww = normalize(vec3(0.0,0.0,0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.01*ww );\n\n    col = sky(rd);\n    \n\n    fragColor=vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}