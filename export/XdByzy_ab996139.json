{"ver":"0.1","info":{"id":"XdByzy","date":"1492536789","viewed":33153,"name":"Dancing stick figures","username":"Eybor","description":"The shader I wrote for the shader showdown qualifications at Revision 2017","likes":23,"published":3,"flags":64,"usePreview":0,"tags":["2d","dance","stickfigures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldBGWd","filepath":"https://soundcloud.com/xmatthewryanx/fs-reid-speed-bass-monster","previewfilepath":"https://soundcloud.com/xmatthewryanx/fs-reid-speed-bass-monster","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592\n\nfloat head(vec2 pos, vec2 uv)\n{\n    vec2 v = pos-uv;\n    float d = dot(v, v) *10.-1.;\n    return smoothstep(0., 0.03, d*d);\n}\n\nfloat body(vec2 pos, vec2 uv)\n{\n    vec2 v = pos - uv;\n    float dx = v.x*v.x;\n    float d = dot(v, v);\n    return clamp(smoothstep(0., .1, dx*100.)+smoothstep(.5, .6, d), 0., 1.);\n}\n\nvec2 rotation(vec2 p, float angle)\n{\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle))*p;\n}\n\nfloat leg(vec2 pos, vec2 uv, float angle)\n{\n    vec2 v = rotation(pos - uv, angle) - vec2(0., .5);\n    float dx = v.x*v.x;\n    float d = dot(v, v);\n    return clamp(smoothstep(0., .1, dx*100.)+smoothstep(.2, .3, d), 0., 1.);\n}\n\nfloat arm(vec2 pos, vec2 uv, float angle1, float angle2)\n{\n    vec2 v = rotation(pos - uv, angle1) - vec2(0., .35);\n    float dx = v.x*v.x;\n    float d = dot(v, v);\n    vec2 v2 = rotation(v - vec2(0., .35), angle2) - vec2(0., .35);\n    float dx2 = v2.x*v2.x;\n    float d2 = dot(v2, v2);\n    return clamp(smoothstep(0., .1, dx*100.)+smoothstep(.1, .15, d), 0., 1.)*\n        clamp(smoothstep(0., .1, dx2*100.)+smoothstep(.1, .15, d2), 0., 1.);\n}\n\nfloat stickman(vec2 pos, vec2 uv, float bass, float angle1, float angle2)\n{\n    vec2 v = uv-pos;\n    float d = head(vec2(0., .8), v*1.5);\n    d *= body(vec2(0., -.1), v*2.);\n    d *= leg(vec2(0., -.8), v*2., angle1);\n    d *= leg(vec2(0., -.8), v*2., -angle1);\n    d *= arm(vec2(0., .65), v*2., angle2+bass, iTime+bass*2.);\n    d *= arm(vec2(0., .65), v*2., -(angle2+bass), -iTime+bass*2.);\n   \treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (-1.+2.*fragCoord.xy/iResolution.xy)*vec2(iResolution.x/iResolution.y, 1.);\n    \n    float bass = 0.;\n    \n    for(float f = 0.; f <= .25; f += 1./100.)\n    {\n        bass += texture(iChannel0, vec2(f, .25)).x;\n    }\n    \n    bass = -1.+2.*bass;\n    \n    vec3 co = vec3(1.);\n    \n    co *= stickman(vec2(0., 0.), uv, bass, PI/8., PI/4.);\n    co *= stickman(vec2(-1., 0.), uv, bass, PI/8., PI);\n    co *= stickman(vec2(1., 0.), uv, bass, PI/3., PI/3.);\n    \n    co *= vec3(sin(uv.x), cos(uv.x), sin(uv.x*uv.y));\n    \n    fragColor = vec4(co, 1.0);\n}","name":"Image","description":"","type":"image"}]}