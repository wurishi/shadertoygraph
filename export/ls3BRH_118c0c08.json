{"ver":"0.1","info":{"id":"ls3BRH","date":"1524019332","viewed":350,"name":"Many Particles","username":"rory618","description":"Click to attract. Drawing lots of particles using a hierarchical structure.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["particles","greyscale","stochastic","routing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    o = exp(-vec4(length(texture(iChannel0, uv).xy*R.xy-i)/30.));\n    o = texture(iChannel1,uv)/2.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    vec4 r = hash44(vec4(floor(i/v),F,0));\n    o = texture(iChannel0,uv);\n    if(iFrame<3){\n        o.xy = r.xy;\n    }\n    o.zw /= 1.001;\n    //o.xy = fract(o).xy;\n    o.xy += o.zw/R.xy;\n    //o.zw += .01*vec2(sin(o.y*10.),cos(o.x*10.))/1e3;\n    if(iMouse.z > 1.){\n        vec2 d = (iMouse.xy-o.xy*R.xy);\n        o.zw += d/(pow(length(d),2.));\n        o.zw *= 1.-exp(-.4*length(d));\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution\n#define F iFrame\nvec4 hash44(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+19.19);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\nfloat w = 16.;\nfloat h = 16.;\nfloat v = 1.;   //increase for fewer particles drawn better. Decrease all the way to 1 for iResolution.x*iResolution.y total number of particles\nint i1 = 25;    //number of iterations for fisrt and second drawing/search stages\nint i2 = 25;\t//more runs slower, but the particles are more visible","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    vec2 s = floor(i/vec2(w,h))*vec2(w,h)/R.xy;\n    \n    //Randomly search for particles that are within this WxH block\n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,F,-a));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*25.;\n        vec4 p = texture(iChannel0,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.xy*R.xy-i);\n        if(l < length(o.zw*R.xy-i)){\n            o.zw = p.xy;\n        }\n    }\n    \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,a,F));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*25.;\n        vec4 p = texture(iChannel1,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.zw*R.xy-i);\n        if(l < length(o.xy*R.xy-i)){\n            o.xy = p.zw;\n        }\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    vec2 uv = i/R.xy;\n    o = texture(iChannel1,uv)*.75;\n    for(int a = 0; a <i2; a++){\n        vec4 r = hash44(vec4(i,F,a));//Transform this uniform random into a normal distribution\n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*2.;\n        vec4 p = texture(iChannel0,(i+r.zw)/R.xy);//sample random nearby points\n        o += 1./(1.+exp(2.*length(p.xy*R.xy-i))); //add a gaussian to the accumulated image from the particle \n    }\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 o, in vec2 i )\n{\n    o = vec4(0);\n    vec2 s = floor(i/vec2(w,h))*vec2(w,h)/R.xy;\n    \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(i,F,a));\n        vec4 p = texture(iChannel0,r.xy);\n        float l = length(p.xy*R.xy-i);\n        if(l < length(o.zw*R.xy-i)){\n            o.zw = p.xy;\n        }\n    }\n    \n    for(int a = 0; a < i1; a++){\n        vec4 r = hash44(vec4(F,i,-a));        \n        r.z = sqrt(-2.*log(r.z));\n        r.w *= 6.28318;\n        r.zw = r.z*vec2(cos(r.w),sin(r.w))*55.;\n        vec4 p = texture(iChannel1,(i+r.zw)/R.xy);//sample random nearby points\n        float l = length(p.zw*R.xy-i);\n        if(l < length(o.xy*R.xy-i)){\n            o.xy = p.zw;\n        }\n    }\n    \n}","name":"Buffer D","description":"","type":"buffer"}]}