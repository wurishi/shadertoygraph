{"ver":"0.1","info":{"id":"43cGDn","date":"1716310774","viewed":72,"name":"Interactive 2D Raymarcher","username":"GarlicGraphix","description":"Use the mouse to move circle, bottom of screen is what the raymarcher renders.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle( vec2 p,  float s ) {\n    return length(p) - s;\n}\n\nfloat lineSegment( vec2 a, vec2 b, vec2 p, float w ) {\n    vec2 ba = b - a;\n    vec2 pa = p - a;\n\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    vec2 cp = a + h * ba;\n\n    float d = length(p - cp);\n\n    if (d < w) {\n        return 1.0;\n    } else {\n        return 0.0;\n    }\n    \n}\n\nfloat map( vec2 p, vec2 m ) {\n    float c = sdCircle( p - vec2( 0.5 ), 0.1 );\n    float mc = sdCircle( p - m, 0.02 );\n    return min( c, mc );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    \n    vec3 col = vec3( 0.0 );\n\n    vec2 o = vec2( 0.0, 0.5 );\n    vec2 r = normalize( vec2( 1.0, -smoothstep( 0.0, iResolution.x/iResolution.y, uv.x ) + 0.5 ) );\n    vec2 m = iMouse.xy/iResolution.y;\n    \n    float td = 0.0;\n    \n    \n    // Drawing raymarch results\n    if ( uv.y <= 0.2 ) {\n        for (int i = 0; i < 80; i++) {\n            vec2 p = o + r * td;\n\n            float d = map( p, m );\n\n            td += d;\n            if ( d <= 0.001 || d >= 5.0 ) {\n                break;\n            }\n        }\n        col = vec3( 1.0 - td );\n    // Drawing 2D representation\n    } else {\n        // Drawing circles\n        if ( map( uv, m ) <= 0.0 ){\n            if ( map( uv, m ) >= -0.002 ) {\n                col = vec3( 1.0 );\n            } else if ( uv.y <= 0.5 + uv.x * 0.5 && uv.y >= 0.5 - uv.x * 0.5){\n                col = vec3( 1.0 - length( uv - o ) );\n            }\n            \n        }\n        \n        \n        // Drawing Camera / Origin\n        if ( length( o - uv  ) <= 0.01 ) {\n            col = vec3( 1.0, 0.0, 0.0 );\n        }\n\n        float fd;\n        r = normalize( vec2( 1.0, sin( iTime *0.3 ) * 0.5 ) );\n        bool dr = true;\n        // Run raymarching for single ray\n        for ( int i = 0; i < 80; i++ ) {\n            vec2 p = o + r * td;\n\n            float d = map( p, m );\n\n            td += d;\n            if ( length( p - uv  ) <= 0.003 ) {\n                col = vec3( 1.0, 0.0, 0.0 );\n                dr = false;\n            } else if ( sdCircle( uv - p, d ) <= 0.0 && sdCircle( uv - p, d ) >= -0.002) {\n                col = vec3( 0.5*( 1.0 / ( 1.0 + float(i)*0.02 ) ), 0.0, 0.0 );\n            }\n            if ( d <= 0.001 || d >= 5.0 ) {\n                // Drawing ray\n                if ( lineSegment( o, p, uv, 0.001 ) == 1.0 && dr ) {\n                    col = vec3( 0.3, 0.0, 0.0 );\n                } \n                break;\n            }\n        }\n        // Drawing camera bounds\n        if ( lineSegment( o, vec2( 1.0 ), uv, 0.001 ) == 1.0 || lineSegment( o, vec2( 1.0, 0.0 ), uv, 0.001 ) == 1.0) {\n            col = vec3( 0.3 );\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4( col,1.0 );\n}","name":"Image","description":"","type":"image"}]}