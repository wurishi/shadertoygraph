{"ver":"0.1","info":{"id":"mlBBzD","date":"1693825247","viewed":74,"name":"square walls in tri grid golfed","username":"jt","description":"Codegolfed (by [url=https://www.shadertoy.com/user/FabriceNeyret2]Fabrice[/url]) version of [url=https://www.shadertoy.com/view/mtBBRh]rectangles in triangular grid[/url].\n\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","rectangles","grid","triangle","triangles","patterns","wall","rectangle","barycentric","pattern","floor","plan","walls","codegolf"],"hasliked":0,"parentid":"mtBBRh","parentname":"rectangles in triangular grid"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlBBzD square walls in tri grid golfed\n// fork of https://www.shadertoy.com/view/mtBBRh rectangles in triangular grid, written 2023 by jt\n// based on https://www.shadertoy.com/view/dt2fzR three dir brick patches essence\n// 2d essence of https://www.shadertoy.com/view/mlXfDs three directional brick patches\n\n// Towards more interesting procedurally generated floor-plans combining rectangular and triangular symmetry.\n// Random patches of rectangular walls in an underlying triangular pattern, oriented in three directions.\n// NOTE: Every other horizontal wall is omitted, the remaining are two-sided\n//       (vertical walls are normal) to align with the underlying triangular grid.\n\n// I'd like to be able to understand my shader so codegolf goes here while the original remains readable.\n\n// tags: 2d, rectangles, grid, triangle, triangles, patterns, wall, rectangle, barycentric, pattern, floor, plan, walls, codegolf\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// 513 chars golfed by Fabrice\n\n#define D      smoothstep//\n#define H      x = ( x>>8U ^ x.yzx ) * 1103515245//\n#define h     ( H, H, int(H) )\n\nvoid mainImage( out vec4 o, vec2 U )\n{\n    vec3  R = iResolution, t;\n    float s = .577, // 1./sqrt(3.),\n          S = 17.3, // 5./s*2., \n          e = 2./R.y*S;                                     \n          t.xy = S*(.5*R.xy-U)/R.y * mat2(1,s,-1,s) ; t.z = 1.-t.x-t.y;\n    ivec3 m = ivec3(floor(t)), \n          x = m/5 + int(iTime*.1); // param of h\n    int   c = h % 3, \n          f = m.x + m.y + m.z; \n   \n    t = c > 1 ? t.zxy : c > 0 ? t.yzx : t;\n    m = ivec3(floor(t));          \n    t = fract( f < 0 ? -t : t );\n    x = m + int(iTime); // param of h\n    o = vec4( h % 2 > 0 \n                ? ( (m.z ^ f) & 1 ) > 0\n                     ? D(.05+e,-e,       t.z         )\n                     : D(    e,-e, abs(t.y-t.x) -.05 )\n                : 0. \n            );\n    iMouse.z > 0. \n       ? o[c] = max(.2,o.w),\n         o += .2 * max(t = D(e,0.,t),max(t.y,t.z)).x : o;\n    o = sqrt(o);\n}\n\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\n// adapted from https://www.shadertoy.com/view/NtjyWw variant of iq(s https://shadertoy.com/view/XlXcW4\nint ihash( ivec3 f ) \n{  uvec3  x = uvec3(f);\n   uint   k = 1103515245U; \n          x = ((x>>8U)^x.yzx)*k;\n          x = ((x>>8U)^x.yzx)*k;  \n   return int(((x>>8U)^x.yzx)*k );\n}\n\nvoid mainImage( out vec4 o, vec2 U )\n{\n    vec3  R = iResolution, t;\n    float s = sqrt(3.),\n          S = 5.*sqrt(3.)*2., \n          e = 2./R.y*S;                                     \n          t = (U+U-R.xy)/R.y *S * mat3x2(-s ,-1, s, -1, 0, 2)*.5/s + vec3(.5,.5,0);\n    ivec3 m = ivec3(floor(t));\n    int   c = ihash( m/5 + int(iTime*.1)) % 3, f;\n    \n    t = c == 2 ? t.zxy : c == 1 ? t.yzx : t.xyz;\n    m = ivec3(floor(t));\n\n    f = m.x + m.y + m.z;         \n    t = fract( f == 0 ? t : -t );\n\n    o = vec4( ihash(m+int(iTime)) % 2 > 0 \n                ? (m.z & 1) != ( f&1  )\n                     ? smoothstep(.05+e,   -e, abs(t.z)    )\n                     : smoothstep(.05+e,.05-e, abs(t.y-t.x))\n                : 0. \n            );\n    if(iMouse.z > 0.) \n           o[c] = max(.2,o.w),\n           t = smoothstep(0.,e,t), \n           o += .2 - .2 * min(t.x,min(t.y,t.z));\n    o = sqrt(o);\n}\n*/\n","name":"Image","description":"","type":"image"}]}