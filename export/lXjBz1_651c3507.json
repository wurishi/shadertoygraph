{"ver":"0.1","info":{"id":"lXjBz1","date":"1729225281","viewed":187,"name":"Buffer range and precision","username":"FordPerfect","description":"Measurements of range and precision of Shadertoy buffers.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["glsl","buffer","ieee754"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Public Domain under http://unlicense.org, see link for details.\n\n// Measurements of range and precision of Shadertoy buffers.\n// IMPORTANT: assumes that float computations match IEEE-754 binary32,\n// and only the storage format of buffers is unknown. This\n// assumption may well break for subnormals, in which case this\n// shader doesn't properly test subnormal support for buffers.\n// Some common formats:\n//     Format                 Eps  Min  Max\n//     True float32           -23 -149 +127\n//     Subnormal-less float32 -23 -126 +127\n//     True float16           -10  -24  +15\n//     Subnormal-less float16 -10  -14  +15\n\nfloat letter(sampler2D t,int k,vec2 p)\n{\n    k^=240;\n    p=clamp(p,0.0,1.0);\n    return sqrt(textureLod(t,(vec2(k&15,k>>4)+p)/16.0,0.0).x);\n    \n}\n\nvec3 letter(sampler2D t,int k,vec2 p,vec2 s,vec3 bg,vec3 fg,vec3 border)\n{\n    float a=letter(t,k,p/s.y);\n    return mix(bg,mix(border,fg,a),a);\n}\n\nvec3 print_int(sampler2D t,int n,int w,vec2 p,vec2 s,vec3 bg,vec3 fg,vec3 border)\n{\n    int b=1;\n    if(n<0) {bg=letter(t,45,p,s,bg,fg,border); n=-n;}\n    for(int i=0;i<w-1;++i)\n    {\n        bg=letter(t,48+n/b%10,p-s.x*vec2(w-i-1,0),s,bg,fg,border);\n        b*=10;\n    }\n    return bg;\n}\n\n// In Python 3.8+:\n// 'uvec4('+','.join(['0x'+x+'u' for x in reversed(bytes(reversed(bytes(('your text here'+16*' ')[:16],\"utf8\"))).hex(' ',4).split(' '))])+')'\nvec3 print_text(sampler2D t,uvec4 text,vec2 p,vec2 s,vec3 bg,vec3 fg,vec3 border)\n{\n    int n=int(floor(p.x/s.x-0.5));\n    if(n>=0&&n<16)\n        bg=letter(t,int(text[n>>2]>>(8*(n&3)))&255,p-float(n)*vec2(s.x,0),s,bg,fg,border);\n    return bg;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    vec3 c=vec3(0.1,0.5,0.1);\n    vec4 cur=texelFetch(iChannel0,ivec2(0,1),0);\n    vec3 col=vec3(0.0625);\n    col=print_text(iChannel1,uvec4(0x7478656eu,0x31287055u,0x20312d29u,0x2032203du),fragCoord-vec2(0,iResolution.y-1.0*20.0),vec2(10,20),col,c,0.125*c);\n    col=print_int(iChannel1,-int(cur.x),3,fragCoord-vec2(150,iResolution.y-1.0*20.0+8.0),vec2(6,12),col,c,c);\n    col=print_text(iChannel1,uvec4(0x65776f4cu,0x65207473u,0x203a7078u,0x20322020u),fragCoord-vec2(0,iResolution.y-2.0*20.0),vec2(10,20),col,c,0.125*c);\n    col=print_int(iChannel1,-int(cur.z),4,fragCoord-vec2(150,iResolution.y-2.0*20.0+8.0),vec2(6,12),col,c,c);\n    col=print_text(iChannel1,uvec4(0x68676948u,0x20747365u,0x3a707865u,0x20322020u),fragCoord-vec2(0,iResolution.y-3.0*20.0),vec2(10,20),col,c,0.125*c);\n    col=print_int(iChannel1,int(cur.y),4,fragCoord-vec2(150,iResolution.y-3.0*20.0+8.0),vec2(6,12),col,c,c);\n    fragColor=vec4(mix(12.92*col,1.055*pow(col,vec3(1.0/2.4))-0.055,step(0.0031308,col)),1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Public Domain under http://unlicense.org, see link for details.\n\n// Manual 2^x, in case exp2 is somehow borked.\nfloat pow2(float x)\n{\n    int n=abs(int(x));\n    float ret=1.0,m=(x>0.0?2.0:0.5);\n    for(int i=0;i<32;++i)\n    {\n        if((n&1)>0) ret*=m;\n        m*=m;\n        n>>=1;\n    }\n    return ret;\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord)\n{\n    float x=floor(fragCoord.x);\n    vec4 val=vec4(1.0+pow2(-x),pow2(x),pow2(-x),0.0);\n    if(int(fragCoord.y)==0) fragColor=vec4(val);\n    else if(iFrame>0)\n    {\n        vec4 cur=texelFetch(iChannel0,ivec2(x,0),0);\n        vec4 nxt=texelFetch(iChannel0,ivec2(min(x+1.0,iResolution.x-1.0),1),0);\n        cur=max(vec4(x),nxt)\n           *vec4(equal(cur,val))\n           *vec4(greaterThan(val,vec4(0)))\n           *(1.0-vec4(x>0.0)*vec4(equal(cur,vec4(1.0))))\n           *(1.0-vec4(isinf(val)))\n           *(1.0-vec4(isnan(val)));\n        fragColor=cur;\n    }\n    else fragColor=vec4(0);\n}","name":"Buffer A","description":"","type":"buffer"}]}