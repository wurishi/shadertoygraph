{"ver":"0.1","info":{"id":"XdfyRf","date":"1489586712","viewed":102,"name":"JELLYFISH","username":"ideadnayou","description":"noise function","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["practice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 uv)\n{\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n// Gradient noise\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat gnoise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// Simplex noise\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\nvec3 permute(vec3 x) { return mod289(((x*34.0)+1.0)*x); }\n\nfloat snoise(vec2 v) {\n    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                        0.024390243902439); // 1.0 / 41.0\n    vec2 i  = floor(v + dot(v, C.yy) );\n    vec2 x0 = v -   i + dot(i, C.xx);\n    vec2 i1;\n    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    vec4 x12 = x0.xyxy + C.xxzz;\n    x12.xy -= i1;\n    i = mod289(i); // Avoid truncation effects in permutation\n    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n        + i.x + vec3(0.0, i1.x, 1.0 ));\n\n    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n    m = m*m ;\n    m = m*m ;\n    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n    vec3 h = abs(x) - 0.5;\n    vec3 ox = floor(x + 0.5);\n    vec3 a0 = x - ox;\n    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n    vec3 g;\n    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n    return 130.0 * dot(m, g);\n}\n\n\nvec3 createSphere(vec2 pos, vec2 uv, float rad, vec3 color)\n{  \n    float zoom = 10.;\n    float scale = .01;\n    float offset = snoise(uv*zoom+iTime)*scale;\n    \n    float x = step(distance(pos, uv+offset) * distance(pos, uv+offset), rad);\n        \n    return x * color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float r = iResolution.x/iResolution.y;\n    //uv.x *= r;\n    //uv *=6.;\n    \n    float zoom = 4.;\n    float scale = .02;\n    float offset = snoise(uv*zoom+iTime)*scale;\n    \n    vec3 value = createSphere(vec2(.5,.7),uv,.06,vec3(1));\n    value -= createSphere(vec2(.5,.7),uv,.04,vec3(1.,1.,1.));\n    \n    float a = step(.26+offset, uv.x) - step(.28+offset,uv.x);\n    a *= step(uv.y,.7+offset) - step(uv.y,.1+offset);\n    \n    float b = step(.34-offset, uv.x) - step(.36-offset,uv.x);\n    b *= step(uv.y,.56-offset) - step(uv.y,.05-offset);\n    \n    float c = step(.72+offset, uv.x) - step(.74+offset,uv.x);\n    c *= step(uv.y,.7+offset) - step(uv.y,.1+offset);\n    \n    float d = step(.64-offset, uv.x) - step(.66-offset,uv.x);\n    d *= step(uv.y,.56-offset) - step(uv.y,.05-offset);\n    \n    float e = step(.42+offset, uv.x) - step(.44+offset,uv.x);\n    e *= step(uv.y,.5+offset) - step(uv.y,.1+offset);\n    \n    float f = step(.56+offset, uv.x) - step(.58+offset,uv.x);\n   \tf *= step(uv.y,.5+offset) - step(uv.y,.1+offset);\n\n    //value += step(.5+noise(uv*20.)*.1, uv.x) - step(.54+noise(uv*20.)*.1,uv.x);\n    //float a = snoise(uv+vec2(cos(iTime*.15),sin(iTime)));\n    //value = snoise(uv+vec2(cos(a),sin(a)))*.25+.25;\n    //value = gnoise(uv*16.);\n    //value += snoise(uv+iTime*.01);\n    \n\tfragColor = vec4(vec3(value+a+b+c+d+e+f),1.0);\n}","name":"Image","description":"","type":"image"}]}