{"ver":"0.1","info":{"id":"7l2cDW","date":"1649732263","viewed":173,"name":"SymmetricVisionLike Kaleidoscope","username":"meistermayo","description":"followed this tutorial -> https://danielilett.com/2020-02-19-tut3-8-crazy-kaleidoscopes/\ninspired by this guy who makes cool dmt animations and biblically accurate angels -> https://www.youtube.com/c/SymmetricVision","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope","acid","vision","trip","accurate","angels","dmt","acidtrip","symmetric","symmetricvision","biblically","biblicallyaccurate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float _t1 = iTime*0.03;\n    mat2 rot1 = mat2( cos(_t1), sin(_t1), -sin(_t1), cos(_t1));\n    \n    uv += vec2(-.5,-.5);\n    uv *= rot1;\n    uv += vec2(.5,.5);\n    \n    float segmentCount = 1.+(sin(iTime*0.01)+1.)*5.;\n    \n    // polar\n    vec2 shiftUV = uv - 0.5;\n    float radius = length(shiftUV);\n    float angle = atan(shiftUV.y, shiftUV.x);\n    \n    float segmentAngle = (3.14*2.) / segmentCount;\n    \n    angle -= segmentAngle * floor(angle / segmentAngle);\n    \n    angle = min(angle, segmentAngle - angle);\n    \n    // back to car\n    vec2 cartUV = vec2(cos(angle), sin(angle)) * radius + 0.5;\n    \n    /// ??? \n    cartUV = max(min(cartUV, 2.0 - cartUV), -cartUV);\n\n    //rot\n    float _t = iTime*0.025;\n    mat2 rot = mat2( cos(_t), sin(_t), -sin(_t), cos(_t));\n\n    float radSin = sin(radius*10.+iTime*8.)*0.01;\n    cartUV *= 1.+radSin;\n    \n    // Time varying pixel color\n    vec4 col = texture(iChannel0, cartUV*1.*rot + vec2(sin(iTime)+iTime,cos(iTime)+iTime)*.0125);\n\n    // Output to screen\n    vec4 lutcol = texture(iChannel1, vec2(col.x, col.y+col.z)+ vec2(sin(iTime),iTime)*0.1);\n    lutcol *= 1.5+(radSin*10.);\n\n    fragColor = lutcol;\n}","name":"Image","description":"","type":"image"}]}