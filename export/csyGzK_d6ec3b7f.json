{"ver":"0.1","info":{"id":"csyGzK","date":"1678765846","viewed":109,"name":"CRT Pixel Pattern","username":"Omniscience","description":"CRT Pixel Pattern. Click the screen to tweak the scale factor for the \"virtual\" monitor resolution.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","retro","screen","pixel","crt","rgb","monitor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COMPONENTS 3.0\n#define CMP_SF 1.0 / COMPONENTS\n#define GAP 0.25\n#define COVERAGE (1.0-GAP)\n#define FADE_EXP 4.0\n#define DIM 0.125\n#define PI 3.14159265358979846264338327950\n\nvec2 resolution = vec2(8.0, 6.0)*8.0;\nfloat blur = 1.0;\n\n/*\n// Attempt #1\nfloat BoxyWaveSDF(float x, float c, float w) {\n    float y = clamp(pow(2.0*(fract(x)-c)/w, 2.0), 0.0, 2.0);\n    return clamp(exp(-abs(pow(y, FADE_EXP/blur))), 0.0, 1.0);\n}\nfloat PixelX(float x, float i) {\n    return BoxyWaveSDF(x, (i+0.5)*CMP_SF, COVERAGE*CMP_SF);\n}\nfloat PixelY(float y) {\n    return BoxyWaveSDF(y, 0.5, (1.0-GAP*CMP_SF));\n}\n*/\n\n\n// Attempt #2\nfloat S(float x, float slope) {\n    return 0.5 + atan(slope * (x - 0.5)) / PI;\n}\n\nfloat BoxyWaveSDF(float x, float n, float c, float e) {\n    float d = 0.5 + 0.5 * cos(PI*(2.0*x - (1.0+2.0*n) / c));\n    return S(pow(d, e), 8.0);\n}\n\nfloat PixelX(float x, float i) { return BoxyWaveSDF(x, i, 3.0, 2.0); }\nfloat PixelY(float y)          { return BoxyWaveSDF(y, 0.0, 1.0, 0.125); }\n\n\n/*\n// Attempt #3\nfloat RepeatingPointSDF(float x, float offset) {\n    return abs(fract(x-offset)-0.5) + 0.5;\n}\nfloat BoxyWaveSDF(float x, float offset, float width) {\n    return min(RepeatingPointSDF(x, offset) / (1.0-width), 1.0);\n}\nfloat PixelSDF(float x, float n, float c, float e) {\n    float offset0 = 1.0/(2.0*COMPONENTS);\n    float offset = offset0 + n*CMP_SF;\n    float width = COVERAGE/(2.0*COMPONENTS);\n    float d = BoxyWaveSDF(x, offset, width);\n    \n    return pow(d, e);\n}\nfloat PixelX(float x, float i) { return PixelSDF(x, i, 3.0, 2.0); }\nfloat PixelY(float y)          { return PixelSDF(y, 0.0, 1.0, 0.5); }\n*/\n\n\n// -----------------\n// Driver\n// -----------------\n\nfloat ball(vec2 uv, vec2 pos, float size) {\n    float len = length(uv/resolution - pos);\n    return 1.0-pow(clamp(len/size, 0.0, 1.0), 4.0);\n}\n\nvec3 render(vec2 uv) {\n    vec2 p1 = vec2(sin(iTime*2.0), sin(iTime*0.75)) * 0.125 + 0.5;\n    vec2 p2 = vec2(sin(iTime*0.3), sin(iTime*4.0)) * 0.25 + 0.5;\n    vec2 p3 = vec2(sin(iTime*1.25), sin(iTime*0.125)) * 0.375 + 0.25;\n    float b1 = ball(uv, p1, 0.25);\n    float b2 = ball(uv, p2, 0.15);\n    float b3 = ball(uv, p3, 0.125);\n    vec3 c1 = mix(vec3(0.0), vec3(1.0, 1.0, 1.0), b1);\n    vec3 c2 = mix(vec3(0.0), vec3(1.0, 0.6, 0.2), b2);\n    vec3 c3 = mix(vec3(0.0), vec3(0.2, 0.6, 1.0), b3);\n    if (b3 > 0.01) return c3;\n    if (b2 > 0.01) return c2;\n    if (b1 > 0.01) return c1;\n    return texture(iChannel0, uv/resolution).rgb;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sf = iResolution.xy / resolution.xy;\n    \n    float sf_extra = 1.0;\n    if (iMouse.z > 1.0) sf_extra = mix(0.25, 1.75, iMouse.x / iResolution.x);\n    \n    sf *= sf_extra;\n    resolution /= sf_extra;\n    blur = mix(0.001, 4.0, 0.5-atan((sf.x-16.0))/PI);\n\n    vec2 uv = fragCoord / sf;\n    vec2 uvi = floor(uv);\n    vec2 uvfr = fract(uv);\n    \n    float y = PixelY(uvfr.y);\n    vec3 rgb = vec3(\n        PixelX(uv.x, 0.0) * y,\n        PixelX(uv.x, 1.0) * y,\n        PixelX(uv.x, 2.0) * y\n    );\n    vec3 col = render(uvi);\n    \n    if (fragCoord.x / iResolution.x > 0.67) {\n        col = render(uv);\n        fragColor = vec4(col, 1.0);\n        return;\n    }\n    \n    fragColor = vec4(mix(rgb*DIM, rgb, col), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}