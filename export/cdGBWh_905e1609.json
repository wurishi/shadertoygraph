{"ver":"0.1","info":{"id":"cdGBWh","date":"1698149599","viewed":68,"name":"Vibrant Blobs","username":"Cesium_137","description":"I was trying to make a starfield with red and blue stars but it didnt turn out well. The colors were super sensitive to parameters, and they werent supposed to be at all but now I have this cool shader","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["blobs","color","hsv","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0., 1.);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n\nfloat f(float t){\n    float c = 1.;\n    float a = pow(2.,-pow((2.*(t - .77)),2.));\n    float b = pow(2.,-pow((2.*(t)),2.));\n    a = c*a + (1.-c);\n    b = c*b + (1.-c);\n    \n    return a+b;\n}\n\n\nfloat rng1(float state){\n    return fract(98.7654321*sin(2.6*state + 4.3 + 1.4*sin(6.1*state - 2.7)));\n}\n\nfloat rng(float state, float seed){\n    return fract((43.2109876+seed)*rng1(state)*sin(rng1(state)*state + rng1(state) + rng1(state)*sin(rng1(state)*state - rng1(state))));\n}\n\nvec3 rgb2hsv(float r, float g, float b){\n    float cmax = max(max(r, g), b);\n    float cmin = min(min(r, g), b);\n    float delta = cmax - cmin;\n    float hue;\n    float saturation;\n    float value;\n    \n    if(cmax == r){\n        hue = 60. * mod((g - b) / delta, 6.);\n    }\n    if(cmax == g){\n        hue = 60. * ((b - r) / delta + 2.);\n    }\n    if(cmax == b){\n        hue = 60. * ((r - g) / delta + 4.);\n    }\n    \n    \n    if(cmax == 0.){\n        saturation = 0.;\n    }\n    if(cmax != 0.){\n        saturation = delta / cmax;\n    }\n    \n    value = cmax;\n    \n    return vec3(hue, saturation, value);\n    \n}\n\n\nvec3 hsv2rgb(float hue, float saturation, float value){\n    \n    float C = value * saturation;\n    float X = C * (1. - abs( mod( hue / 60., 2. ) - 1.) );\n    float m = value - C;\n    \n    vec3 rgb;\n    \n    if(hue >= 0. && hue < 60.){rgb = vec3(C,X,0.);}\n    if(hue >= 60. && hue < 120.){rgb = vec3(X,C,0.);}\n    if(hue >= 120. && hue < 180.){rgb = vec3(0.,C,X);}\n    if(hue >= 180. && hue < 240.){rgb = vec3(0.,X,C);}\n    if(hue >= 240. && hue < 300.){rgb = vec3(X,0.,C);}\n    if(hue >= 300. && hue < 360.){rgb = vec3(C,0.,X);}\n    \n    rgb = vec3(rgb.x + m, rgb.y + m, rgb.z + m);\n    \n    return rgb;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float dist = 2.;\n    float seed = floor(iTime);\n    vec3 col = vec3(0.);\n    vec2 uv = fragCoord / iResolution.y;\n    \n    for(int i = 0; i <= 350; i++){\n        vec2 point = vec2(rng(float(i)-.7,seed),rng(float(i)-.3,seed));\n        point.x *= iResolution.x / iResolution.y;\n        \n        col += vec3(rng(0.8*float(i+4),seed),rng(0.5*float(i+1),seed),rng(0.74*float(i+2),seed)) * dist * dist;\n        dist = smin(dist,length(uv-point),.05);\n    }\n    col *= smoothstep(.13,-0.13,dist);\n    \n    col = rgb2hsv(col.x, col.y, col.z);\n    col.y *= 2.;\n    col.z *= 0.5;\n    col = hsv2rgb(col.x, col.y, col.z);\n    \n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}