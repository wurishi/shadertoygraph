{"ver":"0.1","info":{"id":"wsGGRW","date":"1569790812","viewed":144,"name":"VoronoiSample","username":"carmandale","description":"learning about shaders","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 N22 (vec2 p) {\n    vec3 a = fract(p.xyx*vec3(123.34, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y*a.z));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2. *fragCoord-iResolution.xy)/iResolution.y;\n    \n    float m = 0.;\n    float t = iTime * 1.;\n    \n    float minDist = 100.;\n    float cellIndex = 0.;\n    \n    vec3 col = vec3(0);\n    \n    if (false) {\n    for (float i=0.; i<50.;i++) {\n    \tvec2 n = N22(vec2(i));\n        vec2 p = sin(n*t);\n        \n        float d = length(uv-p);\n        m += smoothstep(.02, .01, d);\n        \n        if (d<minDist) {\n            minDist = d;\n            cellIndex = i;\n        }\n    }} else {\n        uv *= 3.;\n        vec2 gv = fract(uv)-.5;\n        vec2 id = floor(uv);\n        vec2 cid = vec2(0);\n        \n        for (float y = -1.; y<=1.; y++) {\n            for (float x=-1.; x<=1.;x++) {\n                vec2 offs = vec2(x,y);\n                \n                vec2 n = N22(id+offs);\n        \t\tvec2 p = offs+sin(n*t)*.5;\n                p -= gv;\n                float ed = length(p);\n                float md = abs(p.x)+abs(p.y);\n                float d = mix(ed, md, sin(iTime*2.));\n                \n                if (d<minDist) {\n            \tminDist = d;\n            \tcid = id+offs;\n       \t\t\t}\n            }\n        }\n        \n        col = vec3(minDist);\n        //col.rg = cid*.1;\n    }\n\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}