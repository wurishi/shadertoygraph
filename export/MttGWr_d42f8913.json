{"ver":"0.1","info":{"id":"MttGWr","date":"1468851392","viewed":173,"name":"string theory variant","username":"visy","description":"string theory variant","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["stringtheory"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//String Theory by nimitz (twitter: @stormoid)\n\n#define BASE_ANGLE 3.5\n#define ANGLE_DELTA 0.02\n#define XOFF .7\n\n#define time iTime\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nfloat aspect = iResolution.x/iResolution.y;\nfloat featureSize = 120./((iResolution.x*aspect+iResolution.y));\n\nfloat f(vec2 p)\n{\n\tp.x = sin(p.x*1.+time*1.2)*sin(time+p.x*0.1)*3.;\t\n    p += sin(p.x*1.5)*.1;\n    return smoothstep(-0.0,featureSize,abs(p.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy / iResolution.xy*7.5-3.25;\n \n    if (p.x >= 0.5) p.x = 1.0-p.x;\n    if (p.y >= 0.5) p.y = 1.0-p.y;\n\n    p.x *= aspect;\n\tp.y = abs(p.y);\n\t\n\tvec3 col = vec3(0.0);\n\tfor(float i=0.;i<36.;i++)\n\t{\n\t\tvec3 col2 = (sin(vec3(iTime*0.01,2.5,2.2)+i*0.15)*0.5+0.54)*(1.-f(p));\n\t\tcol += max(col,col2)*0.005*i;\n\t\t\n        p.x -= XOFF*p.y;\n        p.y -= sin(time*0.051+1.5)*cos(time*0.1)+1.5;\n\t\tp*= mm2(i*ANGLE_DELTA+BASE_ANGLE+time*i*0.00001);\n\t\t\n        vec2 pa = vec2(abs(p.x-.9),abs(p.y));\n        vec2 pb = vec2(p.x,abs(p.y));\n        \n        p = mix(pa,pb,smoothstep(-0.07,0.07,sin(time*0.002)+.1));\n\t}\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}