{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"video","id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const float width = 100.;\nconst float thresh = .3;\n\nconst float speed = 10.0;\nconst float resolution = -.5;\n\n#define DRAW_DEBUG 0\n// noise\nfloat noise(vec2 pos)\n{\n\treturn fract( sin( dot(pos*0.001 ,vec2(24.12357, 36.789) ) ) * 12345.123);\t\n}\n\n\n// blur noise\nfloat smooth_noise(vec2 pos)\n{\n\treturn   ( noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) + noise(pos + vec2(1,1)) ) / 16.0 \t\t\n\t\t   + ( noise(pos + vec2(1,0)) + noise(pos + vec2(-1,0)) + noise(pos + vec2(0,1)) + noise(pos + vec2(0,-1)) ) / 8.0 \t\t\n    \t   + noise(pos) / 4.0;\n}\n\n\n// linear interpolation\nfloat interpolate_noise(vec2 pos)\n{\n\tfloat\ta, b, c, d;\n\t\n\ta = smooth_noise(floor(pos));\t\n\tb = smooth_noise(vec2(floor(pos.x+1.0), floor(pos.y)));\n\tc = smooth_noise(vec2(floor(pos.x), floor(pos.y+1.0)));\n\td = smooth_noise(vec2(floor(pos.x+1.0), floor(pos.y+1.0)));\n\t\t\n\ta = mix(a, b, fract(pos.x));\n\tb = mix(c, d, fract(pos.x));\n\ta = mix(a, b, fract(pos.y));\n\t\n\treturn a;\t\t\t\t   \t\n}\n\nfloat perlin_noise(vec2 pos)\n{\n\tfloat\tn;\n\t\n\tn = interpolate_noise(pos*0.0625)*0.5;\n\tn += interpolate_noise(pos*0.125)*0.25;\n\tn += interpolate_noise(pos*0.025)*0.225;\n\tn += interpolate_noise(pos*0.05)*0.0625;\n\tn += interpolate_noise(pos)*0.03125;\n\treturn n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float height = iMouse.y;\n\tvec2\tpos = fragCoord.xy;\t\t\n\tfloat\tc, n;\n    \n    float res = exp(resolution);\n\tn = perlin_noise(pos*res+iTime*speed);\n    n = mix(-0.5,0.5,n);\n    \n    float p = (height - pos.y) / width ;\n    \n\tc = p + n;\n    c = smoothstep(-thresh/2., thresh/2., c);\n\n#if DRAW_DEBUG\n    if( p >= -0.5 && p <= -0.49 )\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    else if( p >= 0. && p <= 0.01 )\n      \tfragColor = vec4(0.0, 1.0, 0.0, 1.0);\n    else if( p >= .5 && p <= .51 )\n        fragColor = vec4(0.0, 0.0, 1.0, 1.0);\n    else\n#endif\n        fragColor = vec4(c, c, c, 1.0);\n\t\tfragColor = texture(iChannel0,fragCoord.xy/iResolution.xy) * fragColor;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xd2XzG","date":"1413274223","viewed":240,"name":"Curtain","username":"chwan1","description":"forked from https://www.shadertoy.com/view/MdsGDN\n\nThis shader is for blanking out a visual in a not so trivial (strait line) way.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""}}