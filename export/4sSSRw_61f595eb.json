{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/*\n  Written by Alan Wolfe\n  http://demofox.org/\n  http://blog.demofox.org/\n*/\n\n#define CONTROL_POINT_A  sin(iTime*0.31) * 0.25\n#define CONTROL_POINT_B  sin(iTime     ) * 0.25\n#define CONTROL_POINT_C  sin(iTime*0.65) * 0.25\n\n#define DA (CONTROL_POINT_B - CONTROL_POINT_A)\n#define DB (CONTROL_POINT_C - CONTROL_POINT_B)\n\n#define aspectRatio iResolution.x / iResolution.y\n\n#define LIGHT_SOURCE (iMouse.z <= 0.0 ? vec2(0.25,0.35) : vec2((iMouse.x / iResolution.x - 0.25) * aspectRatio, iMouse.y / iResolution.y - 0.5)) \n\n#define EDGE   0.005\n#define SMOOTH 0.0025\n\n// F(x,y) for quadratic bezier\nfloat F ( in vec2 coords )\n{\n    //return length(coords - vec2(1.0,0.0));   \n    //return length(coords);\n    float T = coords.x;\n    return\n        (CONTROL_POINT_A * (1.0-T) * (1.0-T)) + \n        (CONTROL_POINT_B * 2.0 * (1.0-T) * T) +\n        (CONTROL_POINT_C * T * T) -\n        coords.y;\n}\n\n/*\n// gradiant function for finding G for a generic function when you can't\n// get it analytically using partial derivatives.  We could do\n// partial derivatives of F above, but I'm being lazy.\nvec2 Grad( in vec2 coords )\n{\n    vec2 h = vec2( 0.01, 0.0 );\n    return vec2( F(coords+h.xy) - F(coords-h.xy),\n                 F(coords+h.yx) - F(coords-h.yx) ) / (2.0*h.x);\n}\n*/\n\n// a proper gradient function\nvec2 Grad( in vec2 coords )\n{\n    float T = coords.x;\n    float S = (1.0 - T);\n    \n    float DF = DA * S + DB * T;\n    \n    return vec2 (\n        2.0 * DF,\n        -1.0\n    );\n}\n\n// signed distance function for F(x,y)\nfloat SDF( in vec2 coords )\n{\n    float v = F(coords);\n    vec2  g = Grad(coords);\n    return abs(v)/length(g);\n}\n\n// signed distance function for Circle, for control points\nfloat SDFCircle( in vec2 coords, in vec2 offset )\n{\n    coords -= offset;\n    float v = coords.x * coords.x + coords.y * coords.y - EDGE*EDGE;\n    vec2  g = vec2(2.0 * coords.x, 2.0 * coords.y);\n    return v/length(g); \n}\n\n//-----------------------------------------------------------------------------\nbool IntersectsQuadraticBezier (vec2 src, vec2 dest)\n{\n    /*\n\t1d quadtractic bezier:\n\ty =\n\t\tx^2 * (A-2B+C) +\n\t\tx * (-2A+2B) +\n\t\tA\n\n\tline segment from a point p and vector d:\n\ty =\n\t\t(d.y / d.x) * x +\n\t\tp.y - (p.x / d.x) * d.y\n\n\tso long as d.x is not zero! if d.x is zero then x = constant.\n\twhich you can just plug into the bezier function to get the value for y\n\n\tline vs 1d quadtractic bezier:\n\ty =\n\t\tx^2 * (A-2B+C) +\n\t\tx * (-2A+2B - d.y / d.x) +\n\t\tA - p.y - (p.x / d.x) * d.y\n\n    luckily A,B,C, p, d are known values, so we can just calculate the scary looking\n\tstuff, and use the quadratic equation to solve for x and then calculate a time\n\tfor that x collision using the line equation.\n\n    after that, we limit to time 0-1 and x 0-1 and are good to go.\n\n    A,B,C = scalar control points\n    p = rayPos\n    d = rayDir\n\t*/\n            \n    // calculate A, B and C of the bezier curve to be able to plug it into the quadratic equation\n    float A = (CONTROL_POINT_A - 2.0 * CONTROL_POINT_B + CONTROL_POINT_C);\n    float B = (-2.0 * CONTROL_POINT_A + 2.0 * CONTROL_POINT_B);\n    float C = CONTROL_POINT_A;\n    \n    // if A is zero, that means we have a straight line, not a quadratic, and the quadratic\n    // equation won't work (we will get a divide by zero).  We could do a line vs line test\n    // instead, but for brevity let's skip it.\n    if (A == 0.0)\n        return false;\n    \n    // if src.x is close enough to dest.x that there will be a divide by zero, evaluate the bezier\n    // function at that x to get the y value for that x, and compare it to the src.y for the same\n    // (similar x) to know if it's on the same side or not.\n    if (abs(dest.x - src.x) < 0.01)\n    {\n        // but, limit this test to within the valid X range (0-1)!\n        if (dest.x < 0.0 || dest.x > 1.0)\n            return false;\n        \n        // return false if they are on the same side of the curve at this x point.\n        float y = src.x * src.x * (CONTROL_POINT_A - 2.0 * CONTROL_POINT_B + CONTROL_POINT_C) +\n\t\t\t\t  src.x * (-2.0 * CONTROL_POINT_A + 2.0 * CONTROL_POINT_B) +\n\t\t\t\t  CONTROL_POINT_A;\n        return (sign(src.y - y) != sign(dest.y - y));\n    }\n\n    // subtract out the B,C of the line \n    vec2 dir = dest - src;    \n    float px = src.x;\n    float py = src.y;\n    float dx = dir.x;\n    float dy = dir.y;    \n    B -= (dy / dx);\n    C -= py - (px / dx) * dy;\n\n    // calculate discriminant.  if negative, no hit\n    float discr = B * B - 4.0 * A * C;\n    if (discr < 0.0)\n        return false;\n\n    // use quadratic equation to solve for intersection\n    // quadratic equation = (-B +/- sqrt(B^2 - 4AC)) / 2A\n    float x1 = (-B + sqrt(discr)) / (2.0 * A);\n    float x2 = (-B - sqrt(discr)) / (2.0 * A);\n\n    // calculate intersection times.\n    float t1 = (x1 - px) / dx;\n    float t2 = (x2 - px) / dx;\n\n    // return true if either intersection is valid\n    bool valid1 = (t1 >= 0.0 && t1 <= 1.0 && x1 >= 0.0 && x1 <= 1.0);\n    bool valid2 = (t2 >= 0.0 && t2 <= 1.0 && x2 >= 0.0 && x2 <= 1.0);\n    return valid1 || valid2;\n}\n    \n//-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    vec2 percent = ((fragCoord.xy / iResolution.xy) - vec2(0.25,0.5));\n    percent.x *= aspectRatio;\n\n    bool intersects = IntersectsQuadraticBezier(percent, LIGHT_SOURCE);\n    vec3 color = intersects ? vec3(0.5,0.5,0.5) : vec3(1.0,1.0,1.0);\n    \n    float dist = SDFCircle(percent, vec2(0.0,CONTROL_POINT_A));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,0.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }\n    \n    dist = SDFCircle(percent, vec2(0.5,CONTROL_POINT_B));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, vec2(1.0,CONTROL_POINT_C));\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(0.0,0.0,1.0),vec3(1.0,1.0,1.0),dist);\n    }    \n    \n    dist = SDFCircle(percent, LIGHT_SOURCE);\n\tif (dist < EDGE + SMOOTH)\n    {\n        dist = max(dist, 0.0);\n        dist = smoothstep(EDGE,EDGE + SMOOTH,dist);\n        color *= mix(vec3(1.0,1.0,0.0),vec3(1.0,1.0,1.0),dist);\n    }        \n        \n    dist = SDF(percent);\n    if (dist < EDGE + SMOOTH)\n    {\n        dist = smoothstep(EDGE - SMOOTH,EDGE + SMOOTH,dist);\n        color *= (percent.x >= 0.0 && percent.x <= 1.0) ? vec3(dist) : vec3(1.0);\n    }\n       \n\tfragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4sSSRw","date":"1410070362","viewed":543,"name":"1d Quadratic Bezier Shadow","username":"demofox","description":"Use the mouse to drag around the yellow dot (light source)\n2d line segments vs 1d quadratic bezier tests to make the shadows.  The \"magic\" for that is in IntersectsQuadraticBezier().","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["2d","bezier"],"hasliked":0,"parentid":"","parentname":""}}