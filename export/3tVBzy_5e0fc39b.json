{"ver":"0.1","info":{"id":"3tVBzy","date":"1614665651","viewed":108,"name":"Haru86_MetaBalls","username":"Haru86_","description":"Haru86_MetaBalls","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nfloat rand(vec2 st)\n{\n    return fract(sin(dot(st, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n float PerlinNoise(float x) {\n                float aL = rand(vec2(floor(x), 0.1));\n                float aR = rand(vec2(floor(x + 1.0), 0.1));\n                float wL = aL * fract(x);\n                float wR = aR * (fract(x) - 1.0);\n                float f = fract(x);\n                float u = pow(f, 2.0) * (3.0 - 2.0 * f);\n                float n = mix(wL, wR, u);\n\n                return n;\n}\n\nfloat smin(float d1,float d2,float v)\n{\n    float h=exp(-v*d1)+exp(-v*d2);\n    return -log(h)/v;\n}\n\nfloat sp(vec3 p,float r)\n{\n    return length(p)-r;\n}\n\n#define count 6\nfloat map(vec3 p)\n{\n\n    float d=10.0;\n    float tm=iTime*0.75;\n    for(int c=0;c<count;c++)\n    {\n        vec3 pos=p;\n        float id=float(c);\n        float r=clamp(rand(vec2(id,0.456))*0.5,0.25,0.5);\n        \n        vec3 o=vec3(0.);\n        o.x+=PerlinNoise(tm+rand(vec2(id,0.159))*10.0)*8.0;\n        o.y+=PerlinNoise(tm+rand(vec2(id,0.951))*10.0)*8.0;\n        o.z+=PerlinNoise(tm+rand(vec2(id,0.357))*10.0)*8.0;\n        d=smin(d,sp(pos+o,0.25),2.);\n    }\n    return d;\n}\n\nvec3 gn(vec3 p)\n{\n    vec2 e=vec2(0.001,0.0);\n    return normalize(vec3(\n        map(p+e.xyy)-map(p-e.xyy),\n        map(p+e.yxy)-map(p-e.yxy),\n        map(p+e.yyx)-map(p-e.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.0-iResolution.xy)/min(iResolution.x,iResolution.y);\n    vec3 col=vec3(0.);\n    \n    vec3 ta=vec3(0.);\n    vec3 ro=vec3(cos(iTime*0.25)*4.0,0.,sin(iTime*0.25)*4.0);\n    \n    vec3 cDir=normalize(ta-ro);\n    vec3 cSide=cross(cDir,vec3(0.,1.,0.));\n    vec3 cUp=cross(cDir,cSide);\n    float depth=1.0;\n    vec3 rd=vec3(uv.x*cSide-uv.y*cUp+depth*cDir);\n    \n    vec3 nRd=rd;\n    float d,t,acc=0.;\n    for(int i=0;i<64;i++)\n    {\n        d=map(ro+rd*t);\n        if(d<0.001||t>10.0)break;\n        t+=d;\n        acc+=exp(-3.0*d);\n    }\n    \n    \n    \n    if(d<0.001)\n    {\n        col=acc*0.01*vec3(0.,0.,1.0);\n        vec3 n=gn(ro+rd*t);\n        rd=reflect(rd,n);\n        col+=texture(iChannel0,rd).rgb*0.75;\n        \n        nRd=refract(nRd,n,0.76);\n        col+=texture(iChannel0,nRd).rgb;\n    }else{\n        col=texture(iChannel0,rd).rgb;\n    }\n   \n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}