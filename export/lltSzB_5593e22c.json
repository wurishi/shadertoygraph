{"ver":"0.1","info":{"id":"lltSzB","date":"1481062984","viewed":155,"name":"Fun with Fractals","username":"Jrice06","description":"Once again research was required for this shader, the most complicated of my five shaders. Here I use what is referred to as a kaliset base form fractal, which creates a repeating pattern using an iterative method in addition to taking the fractional part","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int iterations = 15;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n     uv.x += sin(uv.y + iTime * .2) / 10.0;\n    \n    // Zoom\n    uv *= 1.05 + cos(iTime * .25);\n    \n    // Pan\n    uv +=  .25 * vec2(sin(iTime * .02), .25 * cos(iTime * .01));\n    \n    vec2 sp = vec2(.5, .5);\n    \n    float average = 0.;\n\tfloat len = length(uv);\n\tfloat prevl;\n    \n    for (int ndx = 0; ndx < iterations; ndx++) \n\t{\t\n\t\t//kaliset base form\n\t\tuv = abs(uv) / dot(uv,uv) - sp; \n\n\t\tprevl = len;\n\t\tlen = length(uv);\n\t\n\t\taverage += abs(len - prevl);\n\t}\n    \n    //get the average length based upon the amount of iterations elapsed. multiply it to adjust \"definition\"\n\taverage /= float(iterations) * 10.;\n\t\n\t//color fluctuation\n\taverage += iTime * 0.025;\n\t\n\tvec3 myColor = vec3(0.2,0.2,1.0);\n\tvec3 finalColor;\t\n\t\n\t//set the colors! \n\tfinalColor.r = (fract(float(average) / myColor.r));\n\tfinalColor.g = (fract(float(average) / myColor.g));\n\tfinalColor.b = (fract(float(average) / myColor.b));\n\t\n\tfragColor = vec4(finalColor,1.0);\n       \n}","name":"Image","description":"","type":"image"}]}