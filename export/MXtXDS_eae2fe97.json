{"ver":"0.1","info":{"id":"MXtXDS","date":"1719523387","viewed":55,"name":"Chill Earth","username":"archon","description":"Chill Rotate Earth","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","earth","color","planet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Speed 40.\nfloat noise(vec2 p){\n      return fract(sin(p.x*100.0+p.y * 6579.)*5647.0);\n}\nfloat smoot(vec2 uv){\n    vec2 id = floor(uv);\n    vec2 lv = fract(uv);\n    lv = lv*lv*(3.-2. * lv);\n\n    float bl = noise(id);\n    float br = noise(id + vec2(1.0, 0.0));\n    float tl = noise(id + vec2(0.0, 1.0));\n    float tr = noise(id + vec2(1.0,1.0));\n\n    float b = mix(bl, br, lv.x);\n    float t = mix(tl, tr, lv.x);\n    return mix(b, t, lv.y);\n\n}\n\n\nfloat smoot2(vec2 uv){\n     float c = smoot(uv*4.);\n    c += smoot(uv*8.)*.5;\n    c += smoot(uv*16.)*.15;\n    c += smoot(uv*32.)*.125;\n    c += smoot(uv*64.)*.0625;\n\n     return c /= 2.0;\n}\nvec3 bloomEffect(vec3 col, vec2 uv, float intensity) {\n    float brightness = dot(col, vec3(0.299, 0.587, 0.114));\n    float bloom = smoothstep(0.5, 1.0, brightness) * intensity;\n    return col + bloom * vec3(1.0, 1.0, 0.8);\n}\nconst int samplers = 10*10;\nconst float bright =0.7;\n\nvec4 direcBlur(in vec2 uv, in vec2 direction, in float bright) {\n    vec4 color = vec4(0);\n    \n    for(int i = 1; i <= samplers; i++) {\n        color += texture(iChannel0, uv + float(i) * bright / float(samplers) * direction);\n    }\n\n    // Asegúrate de que el color devuelto esté en el rango correcto\n    return color / float(samplers);\n}\nvec3 TemperatureColor(in vec3 color,float temper){\n    vec3 warmer=mix(color,vec3(1.0, 0.2824, 0.0),max(temper,0.0));\n    vec3 cooled=mix(color,vec3(0,0,1),min(temper,0.0));\n    return mix(warmer,cooled,clamp(abs(temper),0.0,1.0));\n}     \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(1.0);\n    vec2 RotUv=uv;\n    float C=cos(radians(180.0)+iTime);\n    float S=sin(radians(180.0)+iTime);\n    mat2 Rot=mat2(-C,-S,S,-C);\n    RotUv=Rot*RotUv;\n    vec2 a = iResolution.xy -fragCoord.xy;\n    vec2 middle = iResolution.xy * 0.5;\n    float direction = length(a) / length(middle);\n    vec4 GodRays = direcBlur(RotUv,normalize(a),direction *bright );\n    float r=0.4;\n    float blur=0.01;\n    float OutlineBlur=0.01;\n    float OutLine=smoothstep(r,r-OutlineBlur,length(uv));\n    col+=-OutLine;\n    float r2=0.36;\n    float r3=0.02;\n    float r4=0.05;\n    float r5=0.1;\n    float LandRadius=0.35;\n    float LandBlur=0.01;\n    float Water=smoothstep(r2,r2-blur,length(uv));\n    vec3 WaterColor=mix(vec3(64./255.,166./255.,214./255.),vec3(31./255.,107./255.,193./255.),uv.x*5.);\n    col+=Water*WaterColor;\n    vec2 uv2=uv;\n    uv2.x+=iTime/Speed;\n    float Land = smoothstep(LandRadius, LandRadius - LandBlur, length(uv)) * smoothstep(LandRadius, LandRadius-LandBlur, smoot2(uv2));\n    float landNoise = smoot2(uv * 10.0);\n    vec3 LandColor = vec3(107./255.,201./255.,55./255.);\n    col = mix(col, LandColor, Land);\n    float Clouds=smoothstep(0.35,.35-0.1,length(uv))*smoothstep(0.35,0.35-0.1,smoot2(uv2*5.));\n    col+=Clouds;\n    float S1=abs(length(sin(uv-vec2(-0.2,0.2))));\n    float S2=length(sin(uv-vec2(-0.25,0.1)));\n    float Brights=smoothstep(r3,r3-blur,S1);\n    float Brights2=smoothstep(r4,r4-blur,S2);\n    col+=Brights;\n    col+=Brights2;\n    col = bloomEffect(col, uv, 0.2); // Ajusta la intensidad del bloom aquí\n    col=pow(col,vec3(1.5));\n    col.rgb += (col.rgb - 0.15) * 0.2 + 0.0;\n    col=TemperatureColor(col,0.4);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}