{"ver":"0.1","info":{"id":"tlsGDf","date":"1612621935","viewed":59,"name":"My first raymarcher","username":"Tarquin","description":"This is my first raymarching shader :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rotation(float a)\n{\n   float c = cos(a);\n   float s = sin(a);\n   return mat2(c, s, -s, c);\n}\n\nfloat sphere(vec3 pos, float radius)\n{\n    return length(pos) - radius;\n}\n\nfloat cylinder(vec3 pos, float radius)\n{\n    return length(pos.xz) - radius;\n}\n\nfloat box(vec3 pos, float radius)\n{\n    pos = abs(pos);\n    return max(pos.x, max(pos.y, pos.z)) - radius;\n}\n\nfloat map(vec3 pos)\n{\n    //animate the pos of the origin\n    pos.xy *= rotation(sin(pos.z) * .7);\n    pos.z += iTime * 1.;\n    \n    float size = 2.5;\n    pos = mod(pos, size)-size/2.;\n    \n    float radius = 0.5;\n    float geometry = 10.;\n    geometry = min(geometry, cylinder(pos, radius * 0.05));\n    geometry = min(geometry, cylinder(pos.xzy, radius * .1));\n    \n    return geometry;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 eye = vec3(0,0,0);\n    vec3 ray = normalize(vec3(uv,1.));\n    vec3 pos = eye;\n    float shade = 0.0;\n    for(int index = 0; index < 20;  index++) \n    {\n        float dis = map(pos);\n        if(dis < 0.0001) \n        {\n            shade = 1.0-float(index)/20.;\n            break;\n        }\n        pos += ray * dis;\n    }\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(shade);\n}","name":"Image","description":"","type":"image"}]}