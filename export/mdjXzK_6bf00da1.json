{"ver":"0.1","info":{"id":"mdjXzK","date":"1670569200","viewed":159,"name":"Many Sprite Particles","username":"animtor120","description":"Fork of https://www.shadertoy.com/view/MtXBDS. I'm a bit of a noob so I changed the syntax used in the original version to something I found more legible Also added some comments. You can get interesting new textures this way.","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["2d","sprites","splatting"],"hasliked":0,"parentid":"MtXBDS","parentname":"display massive sprites"},"renderpass":[{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- creates icons height + render (NB: limited overlap management ).\n\n#define SpMult .5\n//not using this\n\nvec4 getT(sampler2D tex, float y, vec2 pos){\n vec4 t = texelFetch(tex, ivec2(pos)+ivec2(0,y), 0);\n return t;\n}\n\nvec4 s(vec2 pos,float time, float xSpeed){\n  float imageSize = L*SpMult;\n  vec2 tz = (pos+imageSize)/(2.*imageSize);\n  float ttt = .2;\n  float jitterXMoveFreq = 1.;\n  float xoff = mod(floor(time),jitterXMoveFreq);\n  vec2 texCoord = tz*vec2(ttt,1)+vec2((xoff+.13*sin(time))*ttt,0);\n  //c2 texCoord = tz*vec2(40./256.,1)+vec2((mod(floor(time),1.)+.13*sin(time))*40./256.,0);\n  //vec2 texCoord = (pos+imageSize)/(2.*imageSize)*vec2(40./256.,1)+vec2((mod(floor(time),1.)+.13*sin(time))*40./256.,0);\n  //vec2 texCoord = (pos+L)/(2.*L)*vec2(40./256.,1)+vec2((mod(floor(time),1.)+.13*sin(time))*40./256.,0);\n  return texture(iChannel1, texCoord);\n  //return texture(iChannel1, (pos+L)/(2.*L)*vec2(40./256.,1)+vec2((mod(floor(time),1.)+.13*sin(time))*40./256.,0));\n}\n//(shape( vec2(T(h).y,-h), ( iTime-T(h).x)*10. ).a > 0. || iMouse.z > 0. ) // check transp for less collision\nbool optimize(sampler2D tex, float y, vec2 pos){\n    //not really sure whats going on here\n    vec2 z =  vec2(getT(tex,y, pos).y,-y);\n    float f2 = iTime-getT(tex, y, pos).x*10.;\n    vec4 sval = s(z, f2, .1);\n    return sval.a>0.;\n}\nvoid mainImage( out vec4 O,  vec2 U )\n{   \n    O -= O;\n \n    for (float y=0.; y<L; y++) {\n        vec4 t1 = getT(iChannel0, y, U);\n        //if ( T( y).x > 0. && optim( y) ) { O.xy =  T( y).xy; O.z = -y ; break; }\n        if (t1.x > 0. && optimize(iChannel0, y, U)){\n         O.xy =  t1.xy;\n         O.z = -y ;\n         break;\n        }\n        //if ( T(-y).x > 0. && optim(-y) ) { O.xy =  T(-y).xy; O.z =  y ; break; }\n        vec4 t2 = getT(iChannel0, -y, U);\n        if (t2.x > 0. && optimize(iChannel0, -y, U)){\n         O.xy =  t2.xy; \n         O.z =  y ; \n         break;\n        }\n        \n        \n    }\n    \n    O = O.x == 0. ? O-O : s(O.yz, (iTime-O.x)*10., .1 );\n    O *= O.a;\n    //uncomment to see what buffer b looks like\n    //O = texture(iChannel0, U/iResolution.xy);\n    //if (iMouse.z<=0.) O *= O.a;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// --- creates point distribution + value (used as time offset)\n\n\nfloat rand(vec2 p){\n    return( 3758.5453 * sin(dot(p, vec2(12.9898, 78.233))) );\n}\n\nvoid mainImage( out vec4 fragColor,  vec2 fragCoord )\n{  \n    vec2 seed = vec2(.1, .5);\n    float basicScatter = fract(3758.5453 * sin(dot(fragCoord, vec2(12.9898, 78.233)+seed)) );\n    float wiggle = rand(fragCoord+.5);\n    //how many sprites to scatter\n    float fillPercent = .1;\n    fragColor = vec4(basicScatter > 1.- fillPercent*.1);\n    //fragColor = vec4( rnd(fragCoord) > .998 ) *  rnd(fragCoord+.5); \n    //fragColor = vec4( basicScatter > .998 ) *  wiggle;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// --- creates icons width\n\n\n\n\n\nvec4 getIt(sampler2D tex, vec2 p, float x){\n    return texelFetch( tex, ivec2(p)+ivec2(x,0), 0 );\n    \n}\n\nvoid mainImage( out vec4 fragColor,  vec2 fragCoord )\n{   \n    //fragColor -= fragColor;\n    for (float x=0.; x<L; x++) {\n        if(getIt(iChannel0, fragCoord, x).x >0.){\n            fragColor.x = getIt(iChannel0, fragCoord, x).x;\n            //O.x =  T( x).x;\n            fragColor.y = -x;\n            break;\n        }\n        if(getIt(iChannel0, fragCoord, -x).x >0.){\n            fragColor.x = getIt(iChannel0, fragCoord, -x).x;\n            //O.x =  T(-x).x;\n            fragColor.y =  x;\n            break;\n        }\n        \n        \n        //if ( T( x).x > 0. ) { O.x =  T( x).x; O.y = -x; break; }\n        //if ( T(-x).x > 0. ) { O.x =  T(-x).x; O.y =  x; break; }\n    }\n  //vec2 uv = fragCoord/iResolution.xy;\n   //fragColor= texture(iChannel0,uv);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define L 16.","name":"Common","description":"","type":"common"}]}