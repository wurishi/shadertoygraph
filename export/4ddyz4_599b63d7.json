{"ver":"0.1","info":{"id":"4ddyz4","date":"1518141246","viewed":83,"name":"Spindle of Death by Yuru Wang","username":"yuruwang","description":"finish time: 2/7/2018","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2dsdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat4 translationMatrix(vec3 v) {\n\treturn mat4(1.0, 0.0, 0.0, 0.0,\n                0.0, 1.0, 0.0, 0.0,\n                0.0, 0.0, 1.0, 0.0,\n                v.x, v.y, v.z, 1.0);\t\t\n}\n\nmat4 rotateX(float rad) {\n\treturn mat4(1.0, 0.0, 0.0, 0.0,\n                0.0, cos(rad), sin(rad), 0.0,\n                0.0, -sin(rad), cos(rad), 0.0,\n\t\t\t\t0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 rotateZ(float rad) {\n\treturn mat4(cos(rad), sin(rad), 0.0, 0.0,\n                -sin(rad), cos(rad), 0.0, 0.0,\n                0.0, 0.0, 1.0, 0.0,\n\t\t\t\t0.0, 0.0, 0.0, 1.0);\n}\n\nmat4 rotateY(float rad) {\n\treturn mat4(cos(rad), 0.0, -sin(rad), 0.0,\n                0.0, 1.0, 0.0, 0.0,\n                sin(rad), 0.0, cos(rad), 0.0,\n\t\t\t\t0.0, 0.0, 0.0, 1.0);\n}\n\nfloat sawtooth_wave(float x, float freq, float amplitude) {\n    return (x * freq - floor(x * freq)) * amplitude;\n    \n}\n\nfloat square_wave(float x, float freq, float amplitude) {\n    return abs(mod(floor(x * freq), 2.0) * amplitude);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat cadgeSDF(vec3 samplePoint) {\n    float PI = 3.1415;\n    float min_t = 100.0;\n    mat4 transM = rotateX(PI * 0.5); \n    for (float i = 0.0; i < 8.0; i++ ){\n    \tfloat angle = i * PI / 8.0;\n        transM = rotateY(angle) * transM;\n        vec3 transedP = vec3(inverse(transM) * vec4(samplePoint, 1.0));\n        float t = sdTorus(transedP, vec2(3.0, 0.02));\n        min_t = min(min_t, t);\n    }\n    return min_t;\n}\n\nfloat ballsSDF(vec3 samplePoint) {\n    float PI = 3.1415;\n    float min_t = 100.0;\n    \n    for (float i = 0.0; i <8.0; i++ ){\n        mat4 transM = translationMatrix(vec3(3.0, 0.0, 0.0)); \n        float angle_vert = sawtooth_wave(iTime + i * 1.0 / 8.0, 0.5, 1.0) * 2.0 * PI;\n        transM = rotateZ(angle_vert) * transM;\n            \n        float angle_ori = i * PI / 8.0;\n        transM = rotateY(angle_ori) * transM;\n        vec3 transedP = vec3(inverse(transM) * vec4(samplePoint, 1.0));\n        float t = sdSphere(transedP, 0.15);;\n        min_t = min(min_t, t);\n    }\n    return min_t;\n}\n\nvec3 rayDirection(vec2 fragCoord, vec3 iResolution) {\n    return vec3(0.0, 0.0, -1.0);\n}\n\n\nfloat march(int type, vec3 eyePos, vec3 rDir, float min_t, float max_t, float EPSILON, mat4 transM) {\n    const int MAX_MARCHING_STEPS = 255;\n\n    float t = min_t;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        vec3 p = eyePos + t * rDir;\n        \n        float PI = 3.14159265359;\n        vec3 transedP = vec3(inverse(transM) * vec4(p, 1.0));  // rotation and translation\n        float dist = 0.0;\n        if (type == 0) {\n           dist = cadgeSDF(transedP);\n        } else {\n           dist = ballsSDF(transedP);\n        }\n            \n        if (dist < EPSILON) {\n            // We're inside the scene surface!\n            return t;\n        }\n        // Move along the view ray\n        t += dist;\n\n        if (t >= max_t) {\n            // Gone too far; give up\n            return max_t;\n        }\n    }\n    return max_t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float modTime = mod(iTime, 8.0);\n \tint mode = 0;   \n    if (modTime > 0.0 && modTime <= 2.0) {\n        mode = 1;\n    } else if (modTime > 2.0 && modTime <= 4.0) {\n        mode = 2;\n    } else if (modTime > 4.0 && modTime <= 6.0) {\n        mode = 3;\n    } else if(modTime > 6.0 && modTime <= 8.0) {\n        mode = 4;\n    }\n    \n    const float MIN_T = 0.0;\n\tconst float MAX_T = 100.0;\n\tconst float EPSILON = 0.0001;\n    vec3 eyePos = vec3(0.0, 0.0, 80.0);\n    eyePos.x = fragCoord.x / 50.0 - 0.5 * iResolution.x / 50.0;\n    eyePos.y = fragCoord.y / 50.0 - 0.5 * iResolution.y / 50.0;\n\n\tvec3 rDir = rayDirection(fragCoord, iResolution);\n\tvec3 rDir_transed = rDir;\n    \n    //float overall_angle = sawtooth_wave(iTime, 0.5, 1.0) * square_wave(iTime, 0.5, 1.0) * PI / 2.0;\n    \n    float PI = 3.14159265359;\n    float overall_angle = 0.0;\n    if (mode == 1) {\n        overall_angle = sawtooth_wave(iTime, 0.5, 1.0) * PI / 2.0;\n        \n    } else if (mode == 2) {\n        overall_angle = PI / 2.0;\n        \n    } else if (mode == 3) {\n        overall_angle = (1.0 + (-1.0) * sawtooth_wave(iTime, 0.5, 1.0)) * PI / 2.0;\n        \n    } else if (mode == 4) {\n        overall_angle =0.0;\n    }\n    \n    \n    mat4 transM = rotateX(overall_angle);\n    \n    float cadge_t = march(0, eyePos, rDir_transed, MIN_T, MAX_T, EPSILON, transM);\n    float ball_t = march(1, eyePos, rDir_transed, MIN_T, MAX_T, EPSILON, transM);\n    \n    vec4 color;\n    if (cadge_t < ball_t) {\n        color = vec4(0.0, 0.0, 0.0, 1.0);\n    } else {\n        color = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n    float t = min(cadge_t, ball_t);\n    vec3 pos = eyePos + t * rDir_transed;\n    \n    if (t >= MAX_T) {\n        // Didn't hit anything\n        fragColor = vec4(0.2, 0.2, 0.2, 1.0);\n\n    } else {\n        fragColor = color;\n    }\n}","name":"Image","description":"","type":"image"}]}