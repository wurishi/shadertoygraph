{"ver":"0.1","info":{"id":"NlKBzm","date":"1668494014","viewed":251,"name":"Basic Perlin Noise","username":"hzh98","description":"Perlin Noise with color mapping on the left.\n[Reference post](https://adrianb.io/2014/08/09/perlinnoise.html)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// 0: random noise\n// 1: perlin noise\n#define NoiseType 1\n\n\n#define HASH_LUT_SIZE 256\n#define inc(x) (x+1)%HASH_LUT_SIZE\n\nconst float kMagic  = 3571.0;\n\n// Hash lookup table as defined by Ken Perlin.\n// This is a randomly arranged array of all numbers from 0-255 inclusive.\nconst int kHashLUT[] = int[HASH_LUT_SIZE](151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180); \nconst int p[2*HASH_LUT_SIZE] = int[2*HASH_LUT_SIZE](151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180); \n\nfloat RandFast(vec2 PixelPos)\n{\n\tvec2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + vec2( 0.25, 0.0 );\n    float ran = dot( Random2, Random2 );\n\tfloat Random = fract( ran * kMagic );\n\tRandom = fract( Random * Random * (2.0 * kMagic) );\n\treturn Random;\n}\n\nfloat Mapping(float x) {\n    x = clamp(x, 0.0, 1.0);\n    float res = 0.0;\n    if(x<=0.2)\n        res = 0.1;\n    else if(x<=0.4)\n        res = 0.3;\n    else if(x<=0.6)\n        res = 0.5;\n    else if(x<=0.8)\n        res = 0.7;\n    else\n        res = 0.9;\n    return res;\n}\n\nfloat FadeSmooth(float x) {\n    float t = clamp(x, 0.0, 1.0);\n    float t_2 = t * t;\n    float res = t_2 * t * (6.0*t_2 - 15.0*t + 10.0);\n    return res;\n}\n\nvec2 RandomVector2D() {\n    return vec2(0.0, 0.0);\n}\n\n// pick a random vector\nfloat Grad(int hash, float x, float y, float z) {\n    int h = hash & 15;                                    \n    float u = h < 8 /* 0b1000 */ ? x : y;                \n    \n    float v;                                             \n    \n    if(h < 4 /* 0b0100 */)                               \n        v = y;\n    else if(h == 12 /* 0b1100 */ || h == 14 /* 0b1110*/) \n        v = x;\n    else                                                 \n        v = z;\n    \n    return ((h&1) == 0 ? u : -u)+((h&2) == 0 ? v : -v); \n}\n\nfloat PerliNoise3D(float x, float y, float z) {\n    float repeat = 0.0;\n    if(repeat > 0.0) {\n        x = mod(x, repeat);\n        y = mod(y, repeat);\n        z = mod(z, repeat);\n    }\n    \n    int xi = int(x) & 255;                           \n    int yi = int(y) & 255;                              \n    int zi = int(z) & 255;                           \n    float xf = fract(x);\n    float yf = fract(y);\n    float zf = fract(z);\n    \n    float u = FadeSmooth(xf);\n    float v = FadeSmooth(yf);\n    float w = FadeSmooth(zf);\n    \n    int aaa, aba, aab, abb, baa, bba, bab, bbb;\n    aaa = p[p[p[    xi ]+    yi ]+    zi ];\n    aba = p[p[p[    xi ]+inc(yi)]+    zi ];\n    aab = p[p[p[    xi ]+    yi ]+inc(zi)];\n    abb = p[p[p[    xi ]+inc(yi)]+inc(zi)];\n    baa = p[p[p[inc(xi)]+    yi ]+    zi ];\n    bba = p[p[p[inc(xi)]+inc(yi)]+    zi ];\n    bab = p[p[p[inc(xi)]+    yi ]+inc(zi)];\n    bbb = p[p[p[inc(xi)]+inc(yi)]+inc(zi)];\n   \n    float x1, x2, y1, y2;\n    x1 = mix(Grad(aaa, xf, yf, zf), Grad(baa, xf-1.0, yf, zf), u);                                     \n    x2 = mix(Grad(aba, xf, yf-1.0, zf), Grad(bba, xf-1.0, yf-1.0, zf), u);\n    y1 = mix(x1, x2, v);\n\n    x1 = mix(Grad(aab, xf, yf, zf-1.0), Grad(bab, xf-1.0, yf, zf-1.0), u);\n    x2 = mix(Grad(abb, xf, yf-1.0, zf-1.0), Grad(bbb, xf-1.0, yf-1.0, zf-1.0), u);\n    y2 = mix (x1, x2, v);\n    \n    return (mix(y1, y2, w)+1.0)/2.0; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;     // keep the original aspect ratio\n    // vec2 uv = fragCoord / iResolution.xy; // normalize uv to [0,1] but distort the original image\n\n    vec2 noise_uv = uv + vec2(iTime) * 0.1;\n    \n    float res = PerliNoise3D(10.0*noise_uv.x, 10.0*noise_uv.y, 0.0); \n    \n    if(NoiseType==0) {\n        res = RandFast(fragCoord);\n    }\n    else if(NoiseType==1) {\n        if(uv.x * iResolution.y < (0.5-0.002)*iResolution.x) {\n            res = Mapping(res);\n        }\n        else if(uv.x * iResolution.y > (0.5+0.002)*iResolution.x) {\n        // do nothing\n            ;\n        }\n        else{\n            res = 0.0;\n        }\n    }\n    else {\n        // seperator\n        res = 0.0;\n    }\n\n    fragColor = vec4(vec3(res), 1.0);\n}","name":"Image","description":"","type":"image"}]}