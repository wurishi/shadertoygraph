{"ver":"0.1","info":{"id":"lsscDN","date":"1488354375","viewed":314,"name":"Ray Based Fractal","username":"Passion","description":"Messing around with inout/in defined variables.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","ray","in","inout"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t iTime\nconst int NUM_ITER = 5;\nconst int NUM_ITER_FBM = 5;\n\n//const int NUM_ITER = 6;\n//const int NUM_ITER_FBM = 3;\n\nvoid doFractal( inout vec3 r, in int iter);\nvoid finalOutput( inout vec4 c, in vec3 c1, in vec3 c2, in float vin, in vec3 r);\n\nfloat hash(float n){\n    return fract(sin(n) * 4121.15393);\n}\n\nfloat noise( in vec3 x ){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*157.0 + 113.0*p.z;\n\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+157.0), hash(n+158.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+270.0), hash(n+271.0),f.x),f.y),f.z);\n}\n//Fbm function\nfloat fbm(vec3 n) {\n    float total = 0.0, amplitude = 1.0;\n    //n.x+=iTime;\n    for (int i = 0; i < NUM_ITER_FBM; i++) {\n        total += noise(n) * amplitude;\n        n += n;\n        amplitude *= 0.5;\n    }\n    return total;\n}\nmat2 r2(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(s, -c, c, s);\n}\n\n\nvoid mainImage( out vec4 outFinal, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    float vinette = 1.-pow(length(uv*uv*uv*uv)*1.01,10.);\n   \n    outFinal = vec4(0.0);\n    \n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv, uv)*.5));\n    r.xy *= r2(-t*.25);\n    r.yz *= r2(t*.5);\n    r.zx *= r2(t*.75);\n\n \tdoFractal(r, NUM_ITER);\n    \n    vec3 c1 = vec3(noise(r*7.),\n                   sin(fbm(r*.6)), \n                   cos(noise(r*8.)));\n    \n    //r+=abs(.1*t+r*2.23);\n    \n    vec3 c2 = vec3(cos(fbm(r*8.+noise(r*5.5))), \n                   cos(fbm(7.*r)), \n                   cos(r*6. - noise(5.*r)));\n    \n    finalOutput(outFinal, c1, c2, vinette, r);\n}\n\nvoid finalOutput( inout vec4 c, in vec3 c1, in vec3 c2, in float vin, in vec3 r){\n    vec3 gammaVal = vec3(1.0/1.5);\n    c =vec4(pow(mix( c2, c1, (noise(2.*r))), gammaVal) ,1.0)*vin;\n    gammaVal = vec3(2.5/1.0);\n    c = pow(sqrt(c), vec4(gammaVal, 1.0));\n}\n    \n//The Fractal\nvoid doFractal( inout vec3 rayIN, in int iter ){\n    for(int i = 0; i<NUM_ITER; i++){\n        \n        rayIN.xz*=r2(t*.16);\n        \n        rayIN = abs(rayIN) / dot(rayIN,rayIN);\n        rayIN.x = abs(rayIN.x+cos(t*.2)*.75);\n        rayIN.x = abs(rayIN.x-.8);\n        \n        rayIN.xy = abs(r2(-t*.1)*rayIN.xy);\n        rayIN.y = abs(rayIN.y-.5);\n        rayIN.y = abs(rayIN.y+.03+sin(t)*.25);\n        \n        rayIN.zy = abs(r2(-t*.25)*rayIN.zy);\n        rayIN.z = abs(rayIN.z-.5);\n        rayIN.z = abs(rayIN.z+.03+sin(-t)*.15);\n\t\t\n        /*\n        rayIN.xz*=r2(t*.16);\n        \n        rayIN = abs(rayIN) / dot(rayIN,rayIN);\n        rayIN.x = abs(rayIN.x+cos(t*.2)*.75);\n        rayIN.x = abs(rayIN.x-.8);\n        \n        rayIN.xy = abs(r2(-t*.1)*rayIN.xy);\n        rayIN.y = abs(rayIN.y-.5);\n        rayIN.y = abs(rayIN.y+.03+sin(t)*.25);\n        \n        rayIN.zy = abs(r2(t*.25)*rayIN.zy);\n        rayIN.z = abs(rayIN.z-.5);\n        rayIN.z = abs(rayIN.z+.03+sin(-t)*.15);\n\t\t*/\n    }   \n    rayIN = abs(rayIN) / float(NUM_ITER);\n}","name":"Image","description":"","type":"image"}]}