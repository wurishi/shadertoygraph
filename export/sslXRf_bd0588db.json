{"ver":"0.1","info":{"id":"sslXRf","date":"1619112755","viewed":89,"name":"317_kosarev_v5v6","username":"EvgenijGod","description":"Задание 2: Ведьмин Шар\nРеализация икосаэдра + предсказания с водой внутри\n\nБонусы:\nАнтиалиасинг (2б)\nОкружение в виде текстурированного куб-мапа (2б)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["new"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(-2, 1.2, -6); //Смотрим в сторону нуля\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 1.3, -2.5);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1, 1, 0);\n\nconst vec3 LIGHT3_POS = vec3(3, 1.8, 1);\nconst float LIGHT3_RADIUS = 0.25;\nconst vec3 LIGHT3_COLOR = vec3(0, 1, 0);\n\n\n// (CAMERA_POS + t * viewVec).y == -1 <- плоскость\n// t = (-1 * CAMERA_POS.y) / viewVec.y\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF; // no intersection\n    }\n    vec3 worldPos = t * dir+ pos;\n    //fragColor = vec4(worldPos,1.0);\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos  + t * dir, pos  + t * dir) == r * r, раскроем скобки\n    // dot(pos, pos) + 2 * t * dot(dir, pos) + t * t * dot(dir, dir) = r * r\n    // dir - normalized\n    // t * t + 2 * t * dot(dir, pos) + dot(pos, pos) - r * r = 0\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0) return INF;\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) return INF;\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF; // no intersection\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) return INF;\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y < -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    \n    if (t < 0.0) return INF;\n    worldPos = t * dir + pos;\n    if (worldPos.y < -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\n// есть и встроенный refract\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (1.0 < sinB) {\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame) {\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5433);\n}\n\n// туман лишь внутри шара с радиусом 0.5\nfloat sdfFog(vec3 pos) {\n    return length(pos) - 0.5;\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir) {\n    float t = sdfFog(pos);\n    return vec4(0, 0, 0, 0);\n}\n\n\nvec3 icosVertex[12] = vec3[12]\n(\nvec3(-0.7,  1.13, 0.0),\nvec3( 0.7,  1.13, 0.0),\nvec3(-0.7, -1.13, 0.0),\nvec3( 0.7, -1.13, 0.0),\nvec3(0.0, -0.7,  1.13),\nvec3(0.0,  0.7,  1.13),\nvec3(0.0, -0.7, -1.13),\nvec3(0.0,  0.7, -1.13),    \nvec3( 1.13, 0.0, -0.7),\nvec3( 1.13, 0.0,  0.7),\nvec3(-1.13, 0.0, -0.7),\nvec3(-1.13, 0.0,  0.7)\n);\n \nvec3 grani[20] = vec3[20]\n(\nvec3(0, 1, 7),\nvec3(0, 10, 11),\nvec3(1, 8, 9),\nvec3(1, 7, 8),\nvec3(2, 3, 4),\nvec3(2, 3, 6),\nvec3(2, 4, 11),\nvec3(2, 6, 10),\nvec3(3, 4, 9),\nvec3(4, 5, 11),\nvec3(3, 8, 9),\nvec3(3, 6, 8),\nvec3(6, 7, 10),\nvec3(1, 5, 9),\nvec3(2, 10, 11),\nvec3(6, 7, 8),\nvec3(0, 1, 5),\nvec3(4, 5, 9),\nvec3(0, 7, 10),\nvec3(0, 5, 11)\n);\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 object[3], out vec3 normal){ \n    vec3 edge1 = object[1] - object[0];\n    vec3 edge2 = object[2] - object[0];\n    vec3 tmp = cross(edge1, edge2);\n    float t = dot(tmp, object[0] - pos) / dot(tmp, dir);\n\n    if (abs(dot(tmp, dir)) < 0.01 || t < 0.0) return INF;\n\n    vec3 worldPos = t * dir + pos;\n    bool flag = true;\n    int permutations[9] = int[9]\n    (\n    0, 1, 2,\n    1, 2, 0,\n    2, 0, 1\n    );\n    for (int i = 0; i < 3; i++) {\n        vec3 f = object[permutations[i * 3 + 0]];\n        vec3 s = object[permutations[i * 3 + 1]];\n        vec3 t = object[permutations[i * 3 + 2]];\n        vec3 cur = t-s;\n        if (dot(cross(worldPos - s, cur), cross(f - s, cur)) < 0.0) {\n            flag = false;\n            break;\n        }\n    }\n    if (flag == false) return INF;\n    normal = normalize(tmp);\n    if (length(object[0] + 0.01 * normal) < length(object[0])) {\n        normal = -normal;\n    }\n    return t;\n}\n \nfloat traceIco(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = INF;\n    for (int i = 0; i < 20; i++) {\n        vec3 nn;\n        vec3 plane[3] = vec3[3]\n        (\n        icosVertex[int(grani[i].x)],\n        icosVertex[int(grani[i].y)],\n        icosVertex[int(grani[i].z)]\n        );\n        float tmp_t = traceTriangle(pos, dir, plane, nn);\n        if (tmp_t < t) {\n            t = tmp_t;\n            normal = nn;\n        }\n    }\n    return t;\n}\n\n\n//освещение по Ламберту диффузное + амбиент\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) { // точка и нормаль\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float dist1 = dot(toLight1, toLight1);\n    float att1 = 20.0f / dist1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float dist2 = dot(toLight2, toLight2);\n    float att2 = 10.0f / dist2;\n    \n    vec3 toLight3 = LIGHT3_POS - pos;\n    float dist3 = dot(toLight3, toLight3);\n    float att3 = 15.0f / dist3;\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n    );\n}\n\n#define TAU 6.28318530718\n#define MAX_ITER 5\n\nvec2 hash2(vec2 p ) {\n   return fract(sin(vec2(dot(p, vec2(123.4, 748.6)), dot(p, vec2(547.3, 659.3))))*5232.85324);   \n}\n\nfloat hash(vec2 p) {\n  return fract(sin(dot(p, vec2(43.232, 75.876)))*4526.3257);   \n}\n\nvec3 prev_color = vec3(0,0,0);\n\nfloat genWhiteWave(vec2 p) {\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    float md = 5.0;\n    vec2 m = vec2(0.0);\n    for (int i = -1; i < 2; i++) {\n        for (int j = -1; j < 2; j++) {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n + g);\n            o = 0.6 + 0.5 * sin(1.0 + 5.038 * o);\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n            if (d < md) {\n              md = d;\n              m = n+g+o;\n            }\n        }\n    }\n    return md;\n}\n\nfloat ov(vec2 p) {\n    float v = 0.0;\n    float a = 0.4;\n    for (int i = 0; i < 3; i++) {\n        v += genWhiteWave(p) * a;\n        p *= 2.0;\n        a *= 0.5;\n    }\n    return v;\n}\n\nconst float PI = 3.14159265359;\n#define time -10.0\n\nfloat genWave(float len)\n{\n\tfloat wave = sin(8.0 * PI * len + time);\n\twave = (wave + 1.0) * 0.5; // <0 ; 1>\n\twave -= 0.3;\n\twave *= wave * wave;\n\treturn wave;\n}\n\nfloat scene(float len)\n{\n\treturn genWave(len);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // 3 rand nums\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    \n    // uv с геом пропорциями\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) /iResolution.x;\n    vec3 front = normalize(vec3(- CAMERA_POS));\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DEFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float AIR_N = 1.0;\n    const float GLASS_N = 1.5; // коэф-ты преломления\n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    // коэф-т Френеля для Reflection, GLASS_R + GLASS_T = 1, второй для рефракции\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    int water = 1;\n    for (int i = 0; i < 10; i++) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        vec3 planeNorm;\n        \n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) { //got intersection\n            t = planeT;\n            materialType = DEFFUSE;\n            vec3 worldPos = t * curDir+ curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n            \n            if (randVals.y < 0.1) {\n                materialType = REFLECTION;\n            }\n        }\n        vec3 l1norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1norm);\n        if (light1T < t) { //got intersection\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1norm;\n        }\n        vec3 l2norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2norm);\n        if (light2T < t) { //got intersection\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2norm;\n        }\n        vec3 l3norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3norm);\n        if (light3T < t) { //got intersection\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3norm;\n        }\n        vec3 shpNorm;\n        //float sphT = traceSphere(curPos + vec3(0, -1.01e-5, 0), curDir, 1.0, shpNorm);\n        float sphT = traceIco(curPos + vec3(0, -0.1+1.01e-5, 0), curDir, shpNorm);\n        if (sphT < t) { //got intersection\n            t = sphT;\n            normal = shpNorm;\n            if (randVals.x * 0.2 < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n            }\n            \n        }\n        sphT = traceSphere(curPos + randVals / 20. * 1.0 + vec3(0, -1.01e-5, 0), curDir, 0.5, shpNorm);\n        sphT += randVals.x;\n        if (sphT < t) { //got intersection\n            t = sphT;\n            normal = shpNorm;\n            if (randVals.x * 0.11 < GLASS_R) {\n                materialType = REFRACTION;\n            } else {\n                materialType = EMISSION;\n            }\n            vec4 a = vec4(0.2, 0.4, 1.0, 1.0);\n            vec4 b = vec4(0.85, 0.9, 1.0, 1.0);\n            vec2 uv = fragCoord.xy / iResolution.xy;\n            vec2 pos2 = vec2(uv); \t  //wave origin\n            vec2 pos2n = normalize(pos2);\n\n            float len = length(pos2);\n            float wave = scene(len); \n\n            vec2 uv2 = -pos2n * wave/(0.5 + 0.5 * len);\n            color = vec4(mix(a, b, smoothstep(0.0, 0.5, ov((uv + uv2) * 10.01)))).xyz;\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) { //got intersection\n            t = cylT;\n            materialType = DEFFUSE;\n            vec3 worldPos = t * curDir+ curPos;\n            color = texture(iChannel2, worldPos.y * worldPos.xz).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir+ curPos;\n            //fragColor = vec4(worldPos,1.0);\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color;\n                \n                break; // предположим, что эмиссвиные материалы не отражают\n            } else if (materialType == DEFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal);\n                \n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5; \n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, n2);\n                curPos = worldPos + curDir * 1e-5;\n                //меняем среду луча\n                float tmp = n1;\n                n1 = n2;\n                n2 = tmp;\n            }\n        } else {\n            fragColor = texture(iChannel1, curDir);\n        } \n        \n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //ve\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}    \n    \n    ","name":"Buffer B","description":"","type":"buffer"}]}