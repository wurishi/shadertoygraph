{"ver":"0.1","info":{"id":"msVXWh","date":"1681059764","viewed":56,"name":"Fork Polar Weav","username":"mehow_one","description":"Trying to make this a proper SDF so i can stick texture onto it. Still an issue where the ribbons overlap.\n\n( golfed here: [url]https://www.shadertoy.com/view/3l2fzw [/url] )","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","repetition","pattern","polar","short","weave"],"hasliked":0,"parentid":"wtBfRm","parentname":"Polar Weave Pattern - simple"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define segAngle 6.28 / 8.0\n\n\n\nvec2 ribbonSDF(vec2 p, float angle){\n    \n    float radius = 0.6;\n    float fromCenter = length(p - vec2(radius, 0.0)) - radius * sin(segAngle / 2.0);\n    float dist = abs(fromCenter);\n    float mask = clamp(1.0 - R.y / 4.0 * (dist - 0.1), 0.0, 1.0);\n    return vec2(dist,mask);\n}\n\n\nvoid mainImage(out vec4 O, vec2 u) {\n    // Set output color to black\n    O = vec4(0.0);\n    vec2 pos = 2.0 * u - R;\n    // Angle of each pie segment\n    float radius = 0.6; // Radius of the ribbon\n    float dist, distFromCenter, aaMask, textureVal, opacity = 1.0,\n        angle = mod(atan(pos.y, pos.x) + iTime / 4.0, segAngle), // Wrap all to main 1/8 pie slice\n        distFromCenterDisk = length(pos) / R.y,\n        distFromCenterPie = distFromCenterDisk * cos(angle - segAngle / 2.0) / cos(segAngle / 2.0);\n\n    // Line between the two disk centers\n    angle -= distFromCenterPie > radius ? segAngle : 0.0; // At crossing, decide which pie wins (i.e. is on top)\n    pos = distFromCenterDisk * cos(angle + vec2(0, 11));\n    \n    vec2 ribBack = ribbonSDF(pos,angle);\n    textureVal = min(1.0 + 0.5 * cos(2e2 * ribBack.x), 1.0); // Pattern in ribbon\n    O += opacity * ribBack.y * textureVal;\n    opacity *= 1.0 - ribBack.y; \n    angle += distFromCenterPie > radius ? segAngle : -segAngle;\n    \n    //ribBack.x *= 1.-opacity;\n    pos = distFromCenterDisk * cos(angle + vec2(0, 11));\n    vec2 ribFront = ribbonSDF(pos,angle);\n    textureVal = min(1.0 + 0.5 * cos(2e2 * ribFront.x), 1.0); // Pattern in ribbon\n    O += opacity * ribFront.y * textureVal;\n    O.r -= min(ribFront.x,ribBack.x);\n    //O.y -= max(ribFront.y,ribBack.y)*8.;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}