{"ver":"0.1","info":{"id":"WdKcR1","date":"1602236268","viewed":82,"name":"Spiral Loop","username":"nanase","description":"Forever loops.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["loop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 lightDir = normalize(vec3(1.,1.,1.));\n\nvec3 rotate(vec3 p, float angle, vec3 axis) {\n\tvec3 a = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat r = 1.0 - c;\n\tmat3 m = mat3(\n\t\ta.x * a.x * r + c,\n\t\ta.y * a.x * r + a.z * s,\n\t\ta.z * a.x * r - a.y * s,\n\t\ta.x * a.y * r - a.z * s,\n\t\ta.y * a.y * r + c,\n\t\ta.z * a.y * r + a.x * s,\n\t\ta.x * a.z * r + a.y * s,\n\t\ta.y * a.z * r - a.x * s,\n\t\ta.z * a.z * r + c\n\t);\n\treturn m * p;\n}\n\nfloat spiral(vec3 p) {\n\tp.xy *= mat2(sin(vec4(0,11,11,0)));\n\tp.yz *= mat2(sin(vec4(0,11,11,0)));\n\tfloat l = length(p.xy);\n\tfloat d = sin(atan(p.y, p.x)-p.z);\n\tfloat dist = length(vec2(l-3.,d)) - 0.1;\n\treturn dist;\n}\n\nfloat sceneDist(vec3 p) {\n    float time = iTime;\n\tvec3 q = rotate(p,50.,vec3(1.,-4.4,1.3));\n\tfloat s2 = spiral(vec3(q.x + time,q.y-4.,q.z-50.));\n\tq = rotate(p,50.,vec3(0.5,1.,1.));\n\tfloat s3 = spiral(vec3(q.x + time,q.y-10.,q.z-30.));\n\tq = rotate(p,150.,vec3(0.5,0.5,1.));\n\tfloat s4 = spiral(vec3(q.x + time,q.y-10.,q.z-30.));\n\tq = rotate(p,50.,vec3(0.5,0.8,0.9));\n\tfloat s5 = spiral(vec3(q.x + time,q.y,q.z-40.));\n\tq = rotate(p,90.,vec3(0.5,0.4,1.));\n\tfloat s6 = spiral(vec3(q.x + time,q.y,q.z-50.));\n\tq = rotate(p,30.,vec3(1.,10.,-1.));\n\tfloat s7 = spiral(vec3(q.x + time,q.y + 7.,q.z-20.));\n\tq = rotate(p,46.,vec3(0.7,1.,1.));\n\tfloat s8 = spiral(vec3(q.x + time + 3.,q.y,q.z-40.));\n\tq = rotate(p,140.,vec3(1.,1.,1.));\n\tfloat s9 = spiral(vec3(q.x + time,q.y+15.,q.z-30.));\n\n\treturn min(min(min(min(min(min(min(s2,s3),s4),s5),s6),s7),s8),s9);\n}\n\nconst float EPS = 0.01;\nvec3 getNormal(vec3 p) {\n\treturn normalize(vec3(\n\t\tsceneDist(p + vec3(EPS,0.,0.)) - sceneDist(p + vec3(-EPS,0.,0.)),\n\t\tsceneDist(p + vec3(0.,EPS,0.)) - sceneDist(p + vec3(0.,-EPS,0.)),\n\t\tsceneDist(p + vec3(0.,0.,EPS)) - sceneDist(p + vec3(0.,0.,-EPS))\n\t));\n}\n\nvec4 spiralLoop(vec2 uv) {\n\tvec3 ro = vec3(0.,0.,-5.);\n\n\tfloat screenZ = 4.;\n\tvec3 rd = normalize(vec3(uv, screenZ));\n\n\tfloat d = 0.0;\n\tvec3 col = vec3(0.95);\n\n\tfor (int i=0; i<60; i++) {\n\t\tvec3 rayPos = ro + rd * d;\n\t\tfloat dist = sceneDist(rayPos);\n\n\t\tif(dist < 0.1) {\n\t\t\td += dist;\n\t\t\trayPos = ro + rd * d;\n\t\t\tvec3 normal = getNormal(rayPos);\n\t\t\tfloat diff = dot(normal, lightDir);\n            col = vec3(diff);\n\t\t\tbreak;\n\t\t}\n\n\t\td += dist;\n\t}\n\n\treturn vec4(col, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 resolution = iResolution.xy;\n    vec2 uv = (fragCoord.xy * 2.0 - resolution.xy) / min(resolution.x, resolution.y);\n\tfragColor = spiralLoop(uv);\n}","name":"Image","description":"","type":"image"}]}