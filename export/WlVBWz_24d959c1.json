{"ver":"0.1","info":{"id":"WlVBWz","date":"1614187004","viewed":227,"name":"Metaball, glass, bloom","username":"csgradle","description":"Learning how to make metaballs for a physics engine i'm working on.\nThe noise 'glass' on the left side was to make it more interesting.\nthe bloom is a byproduct of metaballs, might be fun to use.\nmouse to control one metaball","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["metaball","glass","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\nfloat smin(float a, float b, float k) {\n  float res = exp(-k * a) + exp(-k * b);\n  return -log(res) / k;\n}\n\nfloat metaball(vec2 center, vec2 st) {\n    return 1./((st.x-center.x)*(st.x-center.x) + (st.y-center.y)*(st.y-center.y));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates and mouse\n    vec2 uv =  ( fragCoord - .5*iResolution.xy ) / iResolution.y,\n       mouse=  ( iMouse.xy - .5*iResolution.xy ) / iResolution.y;\n\n    \n    // simulate metaballs\n    float value = metaball(vec2(0.), uv);\n    value += metaball(vec2(0.5, 0.), uv);\n    value += metaball(vec2(0.25, -0.25), uv);\n    value += metaball(vec2(sin(iTime*0.5), .3), uv);\n    value += metaball(mouse, uv);\n    \n    // add noise to the left side\n    value += clamp(smoothstep(0.1, -0.1, uv.x) * noise(uv*50.)*100.,-200., 200.);\n    \n    // solid colors\n    vec3 col = vec3(step(100.,value));\n    \n    // calculate bloom\n    vec3 bloom = vec3(smoothstep(30.,100.,value));\n    bloom *= step(0., 1.-bloom)*step(0.5,1.-fract(iTime/10.));\n    \n    // Output to screen\n    fragColor = vec4(col + bloom,1.0);\n}","name":"Image","description":"","type":"image"}]}