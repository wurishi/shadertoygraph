{"ver":"0.1","info":{"id":"slyXRW","date":"1640252423","viewed":116,"name":"pulsar explosion","username":"gurkanizmirligil","description":"first shader yay!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 circle(vec2 pos, vec2 center, float r)\n{\n    return vec3(1.0 * smoothstep(r, r + .5, distance(pos, center))) - vec3(1.0 * smoothstep(r + 5.0, r + 5.5, distance(pos, center)));\n}\n\nvec3 loop(vec2 fragCoord, vec2 os)\n{\n    vec3 col = vec3(0.0);\n    vec2 cnt = vec2(iResolution.x / 2.0, 0.0);\n    for(int i = 0; i < 100; i++)\n    {\n    col += circle(fragCoord, cnt + vec2(cos(iTime* float(i)) * 10. , (float(i)) * os.y * 5.0), \n    (distance(iResolution.xy / 2.0, cnt + vec2(0.0, (float(i)) * os.y * 5.0))) / (cos(iTime * .7) + 1.) * .1);\n    }\n    col *= vec3(.1,0.1,0.4);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float uvd = distance(uv, vec2(.5));\n    vec3 bg = vec3(0.0,-0.9,0.5) - vec3(uvd);\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < 5; i++)\n    {\n    col +=clamp(loop(fragCoord, vec2(float(i))), vec3(.0, .0, .0), vec3(.2, .0, .1));\n    }\n    \n    col = col + bg;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}