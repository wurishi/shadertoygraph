{"ver":"0.1","info":{"id":"7ttSR8","date":"1638863841","viewed":126,"name":"Snowflake Generation 3","username":"soudfv","description":"Snowflake Generation 3","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["automata","cellular","snowflake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(\n        mix(vec3(0.05, 0.07, 0.1), vec3(1.), (texture(iChannel0, uv).rgb-vec3(0.5))*2.),\n        1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define T(uv) texture(iChannel0, fract((uv)/iResolution.xy)).x\n\n#define PI 3.141592653589793238462643383\n\nconst float an = 60.;\nconst vec2 dir0 = vec2(cos(an * PI/180.), sin(an * PI/180.));\n\nconst float alpha = 1.5;\nconst float gamma = 0.0001;\nconst float beta = 0.012;\nconst float th0 = 0.5;\n\n// Hash without sine by Dave_Hoskins\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec2 tuv0 = fragCoord;\n    vec2 ratio = vec2(1.,iResolution.y/iResolution.x);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec2 uv = (uv0 - vec2(.5)) * ratio;\n    vec3 col;\n\n    vec2 step0 = 0.5/iResolution.xy;\n    vec2 mc = abs(uv0-mouse)*ratio;\n\n    if (iFrame == 0) {\n        col = length(uv) < length(step0) ? vec3(1.) : vec3(beta);\n    }\n    else if (iMouse.z > 0. && dot(mc, dir0) < 0.2 && dot(mc, vec2(1.0,0.)) < 0.2) {\n        col = length(mc) < length(step0) ? vec3(1.) : vec3(beta);\n    }\n    else {\n        col = vec3(0.0);\n        vec2 step1 = vec2(2.0);\n        vec2 dir = dir0 * step1;\n        \n        float ul = T(tuv0 - dir);\n        float ur = T(tuv0 + vec2(dir.x, -dir.y));\n        float  r = T(tuv0 + vec2(step1.x, 0.));\n        float dr = T(tuv0 + dir);\n        float dl = T(tuv0 + vec2(-dir.x, dir.y));\n        float  l = T(tuv0 + vec2(-step1.x, 0.));\n\n        vec3 c0 = texture(iChannel0, uv0).rgb;\n        float u = c0.x;\n        float th = th0 - .05 + hash11(iTime) * 0.1;\n        bool ulb = ul > th;\n        bool urb = ur > th;\n        bool  lb =  l > th;\n        bool dlb = dl > th;\n        bool drb = dr > th;\n        bool  rb =  r > th;\n        int b = int(ulb) + int(urb) + int(lb) + int(dlb) + int(drb) + int(rb);\n        float u2 = u > th || b > 0 ? u + gamma : 0.;\n        if (ulb) ul = 0.;\n        if (urb) ur = 0.;\n        if (rb) r = 0.;\n        if (dlb) dl = 0.;\n        if (drb) dr = 0.;\n        if (lb) l = 0.;\n        if (u > th /*|| b > 0*/) u = 0.;\n        float sum = ul + ur + r + dr + dl + l;\n        float u1 = u + alpha*(-6.*u+sum)/12. + u2;\n        col = clamp(vec3(u1), 0.,1.);\n    }\n    fragColor = vec4(col,1.);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}