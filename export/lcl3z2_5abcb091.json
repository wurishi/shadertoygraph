{"ver":"0.1","info":{"id":"lcl3z2","date":"1703280135","viewed":56,"name":"Time Crystal","username":"raphaeljmu","description":"First attempt while following kishimisu's tutorial.\n\nhttps://www.youtube.com/watch?v=f4s1h2YETNY","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MddGzf","filepath":"https://soundcloud.com/human_2_hr_delay/foresight-1","previewfilepath":"https://soundcloud.com/human_2_hr_delay/foresight-1","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float PI = 3.14159265358979;\n\nfloat oscillate(in float midpoint, in float amplitude, in float phase) {\n    return midpoint + amplitude * sin(phase * PI);\n}\n\nvec3 palette(float t) {\n    vec3 e = vec3(1., 1., 1.);\n    vec3 a = .5 * e;\n    vec3 b = .5 * e;\n    vec3 c = .5 * e;\n    vec3 d = vec3(.263, .416, .557);\n    \n    return a + b * cos(2. * PI * (c * t + d));\n}\n\nfloat proximity(in float d, in float curvature, in float min_x, in float min_y) {\n    if (d <= min_x) {\n        return 1.;\n    }\n    \n    float a = curvature;\n    float X = min_x;\n    float Y = min_y;\n    float X2 = X * X;\n    float Y2 = Y * Y;\n    float XY = X * Y;\n    \n    float disc4 = 4. * (a * (XY - X - Y + 1.) + XY);\n    float disc2 = 2. * (X + Y) * (XY + 1.);\n    float disc = disc4 - disc2 + XY * XY + X2 + Y2 + 1.;\n    float c = ((X - 1.) * (Y + 1.) + sqrt(disc)) / (2. * (X - 1.));\n    \n    float b = a / (1. - c) - X;\n    \n    return a / (d + b) + c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec2 uv0 = uv;\n    \n    vec3 color = vec3(0.);\n    \n    for (float i = 0.; i < 6.; i++) {\n        uv = fract(uv) * 2. - 1.;\n\n        float d = length(uv) * exp(- length(uv0) / 3.);\n        // float d = length(uv0) * exp(- length(uv));\n\n        float d2 = sin(d * 4. * PI + 2. * iTime);\n        // d = smoothstep(-.1, .1, d);\n        // d = oscillate(.2, .05, 2. * iTime) / abs(d);\n        // d = .2 / abs(d);\n        float strength = proximity(abs(d2) + sin(PI * d), .1, .1, .05);\n\n        color += palette(length(uv0) + i * .1 + .5 * iTime) * strength;\n        // vec3 color = strength * vec3(1., 1., 1.);\n    }\n    \n    // fragColor = vec4(d * (sin(2.0 * iTime) / 2. + .5), sin(iTime) / 2. + .5, d - (sin(4.0 * iTime) / 2. + .5), 1.);\n    // fragColor = vec4(d * (sin(2.0 * iTime) / 2. + .5), d * (sin(2.0 * iTime + PI / 2.) / 2. + .5), d * (sin(2.0 * iTime + PI) / 2. + .5), 1.);\n    fragColor = vec4(color, 1.);\n}\n\n","name":"Image","description":"","type":"image"}]}