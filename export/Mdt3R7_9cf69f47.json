{"ver":"0.1","info":{"id":"Mdt3R7","date":"1448746930","viewed":700,"name":"Texture distort","username":"TambakoJaguar","description":"Another test: the camera picture (channel 0) is distorted by the texture on the channel 1","likes":4,"published":1,"flags":2,"usePreview":0,"tags":["test","distortion","texture","camera","webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"const int DIST_DELTA = 4;\nconst float DIST_STRENGTH = 0.7;\n\nconst int AA_SAMPLES = 4;\nconst float AA_WIDTH = 0.7;\n\nconst vec3 vLampPos = vec3(0., 0.1, -1.);\nconst float fSpecularPower = 27.;\nconst float fSpecularIntensity = 0.7;\nconst vec3 fSpecularColor = vec3(1.0, 0.98, 0.92);\nconst float rotate_freq = 2.;\n\nvec4 distort(vec2 fragCoord, vec2 dxy)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv2 = (fragCoord.xy + vec2(DIST_DELTA/2, -DIST_DELTA/2) + dxy) / iResolution.xy;\n    vec2 uv3 = (fragCoord.xy + vec2(-DIST_DELTA/2, DIST_DELTA/2) + dxy) / iResolution.xy;\n    float dx = length(texture(iChannel1,uv) - texture(iChannel1,uv2));\n    float dy = length(texture(iChannel1,uv) - texture(iChannel1,uv3));\n\n    vec2 dist = vec2(dx, dy);\n\n    return texture(iChannel0,uv + DIST_STRENGTH*(dist-0.06));\n}\n\nfloat GetSpecularIntensity(vec2 fragCoord, vec3 vEyePos, float fSpecularIntensity, float fSpecularPower, vec3 vLampPos, vec2 dxy)\n{\n   vec2 uv = fragCoord.xy / iResolution.xy;\n   vec2 uv2 = (fragCoord.xy + vec2(DIST_DELTA, 0) + dxy) / iResolution.xy;\n   vec2 uv3 = (fragCoord.xy + vec2(0, DIST_DELTA) + dxy) / iResolution.xy;\n   float dx = length(texture(iChannel1,uv) - texture(iChannel1,uv2));\n   float dy = length(texture(iChannel1,uv) - texture(iChannel1,uv3));\n   vec3 vNormal = normalize(vec3(dx, -dy, 1.));\n    \n   vec3 vReflectedVector = normalize(reflect(normalize(vLampPos), vNormal));\n   vec3 vVertexToEyeVector = normalize(vEyePos);\n   float fSpecularFactor = clamp(dot(vVertexToEyeVector, vReflectedVector), 0., 1.);\n   fSpecularFactor = pow(fSpecularFactor, fSpecularPower);\n   float vResult = fSpecularIntensity * fSpecularFactor;\n   \n   return clamp(vResult, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 vEyePos = vec3(sin(iTime*rotate_freq), cos(iTime*rotate_freq), 5.);\n    vec4 vs = vec4(0.);\n    float specular = 0.;\n    for (int j=0;j<AA_SAMPLES ;j++)\n    {\n       float oy = float(j)*AA_WIDTH;\n       for (int i=0;i<AA_SAMPLES ;i++)\n       {\n          float ox = float(i)*AA_WIDTH;\n          vs+= distort(fragCoord, vec2(ox, oy));\n          specular+= GetSpecularIntensity(fragCoord, vEyePos, fSpecularIntensity, fSpecularPower, vLampPos, vec2(ox, oy));\n       }\n    }\n    vs/= vec4(AA_SAMPLES*AA_SAMPLES);\n    specular/= float(AA_SAMPLES*AA_SAMPLES);\n    \n    fragColor = mix(vs, vec4(fSpecularColor, 1.0), specular);\n    //fragColor = vec4(specular, specular, specular, 1.);\n}","name":"","description":"","type":"image"}]}