{"ver":"0.1","info":{"id":"clKBRK","date":"1703178161","viewed":19,"name":"Swirly shader","username":"boomji","description":"swirl shader break down","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["swirl","tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//REF https://youtu.be/Y2IADn-wAZM\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //TIP ALT + ENTER to compile\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Coords start with bottom corner going 0-1. We have to Shift coords to the center. \n    uv -= 0.5;\n    \n    // The previous operation made coords go from -0.5 to 0.5.We need them to go from -1 to 1\n    // So multyply Coords by 2 \n    uv*=2.0;\n    \n    // set Image aspect to square or you will get an oval gradient instaed of a circular gradient    \n    uv *= iResolution.xy  / iResolution.y;\n    \n    // Calculate Dist from center\n    float dist = length(uv);\n    \n    \n    // Calculate Angle of each pixel\n    //Angle to each pixel gives us values between 0 - 360 but we generally use Radiansfor rotation so we divide by 2PI radians = 6.2831\n    //but this will only give us results from 0 to 0.5 (180 degrees) so we add another half 0.5 to give us a full sweep\n    //float angle  = radians ( atan(uv.x,uv.y) );\n    float angle_degrees  = atan(uv.x,uv.y);\n    float angle_radians  = ( (angle_degrees * TWO_PI ) / 360.0 ) + 0.5 ;\n     \n    \n    float sinD = sin(dist * 20.0 + angle_degrees - iTime) ;\n    float sinD1 = sin(dist * 20.0 + angle_degrees - iTime + 1.3) ;\n    float sinD2 = sin(dist * 20.0 + angle_degrees - iTime + 3.3) ;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // VISUALIZERS - Output to screen - paste the visualizer you want right at the bottom\n    \n    // Animated UV visualizer\n    fragColor = vec4(col,1.0);\n    \n    // UV visualizer from center\n    fragColor = vec4(uv,0,0.0);\n    \n    // Visualize Dist from center\n    fragColor = vec4(dist,dist,dist,0);\n    \n    // Visualize sine distance from center\n    fragColor = vec4(sinD,sinD1,sinD2,0);\n    \n    // Visualize angle from center\n    //fragColor = vec4(angle_radians,angle_radians,angle_radians,0);\n    \n    \n    \n   \n}","name":"Image","description":"","type":"image"}]}