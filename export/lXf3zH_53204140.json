{"ver":"0.1","info":{"id":"lXf3zH","date":"1707160107","viewed":118,"name":"BW Dithering w. Three Functions","username":"ErgunAkleman","description":"We use three functions","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float pi=3.14;\n    float size = 1.00;\n    vec2 pos = fragCoord - floor(fragCoord / size) * size;\n    vec3 col = vec3(0.0,0.0,0.0);\n    vec4 img = texture(iChannel0, uv);\n   // float comp = /64.0;\n   \n    \n    \n    // grayscale = 0.299 ∙ Red + 0.587 ∙ Green + 0.114 ∙ Blue\n    //float grays = 0.299 * img.x + 0.587 * img.y + 0.114 * img.z;\n    //float grays=0.5*(grays+(fragCoord.x)/(iResolution.x));\n    float grays=(fragCoord.x)/(iResolution.x);\n    \n    float periodT,periodT0,periodT1,periodT2;\n    float numDis = 1.00;\n    float width = 16.0;\n    periodT= width*(1.0 - floor(grays*numDis)/numDis);\n    //periodT=10.00;\n    periodT0=1.0*periodT;\n    periodT1=1.0*periodT;\n    periodT2=1.0*periodT;\n    \n    float func0,func1,func2,func;\n    //float theta=1.5*iMouse.x*iTime; //Temporal Aliasing mouse control\n    float theta=2.5*iTime;  //Changing with time\n    //float theta=0.0;\n    \n    vec2 po = vec2(0, 0);\n    vec2 dir0 = vec2(cos(pi*theta/180.0), sin(pi*theta/180.));\n    \n    vec2 p1 = vec2(0, 0);\n    vec2 dir1 = vec2(cos(pi*(theta+120.0)/180.0), sin(pi*(theta+120.0)/180.0));\n            \n    vec2 p2 = vec2(0, 0);\n    vec2 dir2 = vec2(cos(pi*(theta+240.0)/180.0), sin(pi*(theta+240.0)/180.0));\n    \n    func0 = dot((fragCoord-po), dir0);\n    func1 = dot((fragCoord-p1), dir1);\n    func2 = dot((fragCoord-p2), dir2);\n    \n    // func = func / periodT\n    func0 = func0 / periodT0;\n    func0 = abs(func0 - floor(func0+0.5));\n    \n    func1 = func1 / periodT1;\n    func1 = abs(func1 - floor(func1+0.5));\n    \n    func2 = func2 / periodT2;\n    func2 = abs(func2 - floor(func2+0.5));\n    \n    func= sqrt(sqrt(func0 * func1)*func2)*1.25; //multiplication\n    //func= min(max(func0 , func1), func2); //min\n    //func= min(min(func0 , func1), func2)*1.450; //min\n    //func= max(max(func0 , func1),func2); //max\n    //func= (func0 + func1 + func2)/2.30; //Rhombus: L1 norm\n    //func= sqrt(func0*func0 + func1*func1 + func2*func2)*0.75; //Circular: L2 Norm\n    //func= func0; //Lines\n    \n    //func = sin(func);\n       \n   //col = vec3(0.1,0.2,0.3);\n  \n    float r=0.10; //Amount of noise for antialising \n    col = vec3(ceil(grays - 2.0*func + r*(random (fragCoord)-0.5))); //only black and white\n  \n  \n    // Color Dithering start\n    float red, green,blue; \n    //red = ceil(img.x - 2.0*func0 + r*(random(fragCoord)-0.5));\n    //green = ceil(img.y - 2.0*func1 + r*(random(fragCoord)-0.5));\n    //blue = ceil(img.z - 2.0*func2 + r*(random(fragCoord)-0.5));\n    ///grays=0.33*red+0.33*green+0.34*blue; \n    //col=vec3(grays);\n    //col = vec3(red,green,blue);\n    //Color dithering ends\n\n    // Output to screen\n    fragColor = vec4(col,1.0);//vec4(col,1.0); img;\n}","name":"Image","description":"","type":"image"}]}