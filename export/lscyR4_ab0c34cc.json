{"ver":"0.1","info":{"id":"lscyR4","date":"1518080057","viewed":132,"name":"Triple function drawer","username":"Ultraviolet","description":"Extending [url=https://www.shadertoy.com/view/4d3cRN]this[/url] entry to multi-channel function drawing.\nUse [b]R[/b], [b]G[/b], and [b]B[/b] for writing into specific components.\nUse SPACE for switching between color composition methods.","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["curve","graph","function","draw"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define BG_COLOR vec3(.9)\n\nfloat PointSegDistance(vec2 p, vec2 a, vec2 b)\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat valR(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).r;\n}\n\nfloat valG(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).g;\n}\n\nfloat valB(int n)\n{\n    return texelFetch(iChannel0, ivec2(n, 0),0).b;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    int x = int(fragCoord.x);\n    float dx = 1./iResolution.x;\n    \n    float v, dp;\n    vec2 p, pp, pm;\n    \n    v = valR(x);\n    p  = vec2(uv.x   , v       );\n    pp = vec2(uv.x+dx, valR(x+1));\n    pm = vec2(uv.x-dx, valR(x-1));\n    \n    if(x == 0)\n        pm = pp;\n    if(x == int(iResolution.x)-1)\n        pp = pm;\n        \n    dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    float stroke_alpha_R = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    float bg_alpha_R = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    \n    \n    \n    v = valG(x);\n    p  = vec2(uv.x   , v       );\n    pp = vec2(uv.x+dx, valG(x+1));\n    pm = vec2(uv.x-dx, valG(x-1));\n    \n    if(x == 0)\n        pm = pp;\n    if(x == int(iResolution.x)-1)\n        pp = pm;\n        \n    dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    float stroke_alpha_G = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    float bg_alpha_G = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    \n    \n    \n    \n    v = valB(x);\n    p  = vec2(uv.x   , v       );\n    pp = vec2(uv.x+dx, valB(x+1));\n    pm = vec2(uv.x-dx, valB(x-1));\n    \n    if(x == 0)\n        pm = pp;\n    if(x == int(iResolution.x)-1)\n        pp = pm;\n        \n    dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    float stroke_alpha_B = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    float bg_alpha_B = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    \n    \n    \n    \n    \n    \n    vec3 c = mix(vec3(.9), vec3(.8), vec3(bg_alpha_R, bg_alpha_G, bg_alpha_B));\n    c = mix(c, vec3(0.1), vec3(stroke_alpha_R, stroke_alpha_G, stroke_alpha_B));\n    if(texelFetch(iChannel1, ivec2(32,2),0).x>.5)\n        c = 1.-c;\n    \n    fragColor = vec4(c, 1.0);\n    //fragColor = vec4(1.-c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nbool getKey(int key)\n{\n    return texelFetch(iChannel1, ivec2(key,0),0).x>.5;\n}\n\nbvec3 getKeys()\n{\n    return bvec3(getKey(64+18), getKey(64+7), getKey(64+2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        if(ifragCoord == ivec2(0,1))\n            fragColor = iMouse;\n        else if(ifragCoord == ivec2(1,1))\n            fragColor = vec4(getKeys(), 1.);\n        else\n            fragColor = vec4(0.);\n        return;\n    }\n    \n    vec4 val = texelFetch(iChannel0, ifragCoord,0);\n    vec4 prevMouse = texelFetch(iChannel0, ivec2(0,1),0);\n    \n    bvec3 prevKeys = greaterThan(texelFetch(iChannel0, ivec2(1,1),0).xyz,vec3(.5));\n    bvec3 keys = getKeys();\n    \n    if(iFrame < 2)\n    {\n        val.x = 0.5+0.2*sin(10.*fragCoord.x/iResolution.x);\n        val.y = 0.5+0.2*sin(10.*fragCoord.x/iResolution.x+1.);\n        val.z = 0.5+0.2*sin(10.*fragCoord.x/iResolution.x+2.);\n    }\n    \n    //*\n    if(iMouse.z>.5 && prevMouse.z<.5 && int(iMouse.x) == ifragCoord.x)\n    {\n        float vm = iMouse.y/iResolution.y;\n        if(keys.x)\n            val.x = vm;\n        else if(keys.y)\n            val.y = vm;\n        else if(keys.z)\n            val.z = vm;\n         else \n            val.xyz = vec3(vm);\n    }\n    //*/\n    \n    if(iMouse.z>.5 && prevMouse.z>.5)\n    {\n        float t = (fragCoord.x - prevMouse.x)/(iMouse.x - prevMouse.x);\n        if(0.<t && t<1.)\n        {\n            float vm = mix(prevMouse.y/iResolution.y, iMouse.y/iResolution.y, t);\n            if(keys.x)\n            {\n            \tval.x = vm;\n            \t//val.y = vm;\n            \t//val.z = vm;\n            }\n            else if(keys.y)\n            {\n            \tval.y = vm;\n            \t//val.z = vm;\n            \t//val.x = vm;\n            }\n            else if(keys.z)\n            {\n            \tval.z = vm;\n            \t//val.x = vm;\n            \t//val.y = vm;\n            }\n            else \n                val.xyz = vec3(vm);\n        }\n    }\n    \n    fragColor = val;\n}","name":"Buf A","description":"","type":"buffer"}]}