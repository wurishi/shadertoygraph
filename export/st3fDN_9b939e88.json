{"ver":"0.1","info":{"id":"st3fDN","date":"1663089581","viewed":58,"name":"Lava Shader - Nicholas Lewis","username":"technologenius64","description":"\"Sample a background texture using distorted UVs. Oh, also sample a \"detail\" texture and have it scroll. Mix this detail texture on top of your background.\"","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["intro","computer","to","graphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Color Constants\nconst vec3 lavaColorBrightOrange = vec3(1.0, 0.6471, 0.0);\nconst vec3 lavaColorBrightRed = vec3(0.9333, 0.2941, 0.1686);\nconst vec3 lavaColorDarkRed = vec3(0.6471, 0.1647, 0.1647);\nconst vec3 lavaColorBrownishRed = vec3(0.5451, 0.0, 0.0);\nconst vec3 lavaColorBlack = vec3(0.1, 0.1, 0.1);\n\n// Weight Constants\nconst float lavaWeightBrightOrange = 0.05;\nconst float lavaWeightBrightRed = 0.12;\nconst float lavaWeightDarkRed = 0.24;\nconst float lavaWeightBrownishRed = 0.48;\nconst float lavaWeightBlack = 0.9;\n\n// Lava Physics Constants\nconst float lavaFlowSpeed = 0.02;\n\n// Self defined functions\nvec3 stepMix(vec3[5] color, float[5] weight, float coord) // Mixes (or lerps) more than two color values (for use with multi-color gradients)\n{\n    vec3[4] result;\n    \n    result[0] = mix(color[0], color[1], step(weight[0], coord));\n    result[1] = mix(result[0], color[2], step(weight[1], coord));\n    result[2] = mix(result[1], color[3], step(weight[2], coord));\n    result[3] = mix(result[2], color[4], step(weight[3], coord));\n    \n    return result[3];\n}\n\nvec3 smoothstepMix(vec3[5] color, float[5] weight, float coord) // Same as mixMore(), only with smoothstep()\n{\n    vec3[4] result;\n    \n    result[0] = mix(color[0], color[1], smoothstep(weight[0], weight[1], coord));\n    result[1] = mix(result[0], color[2], smoothstep(weight[1], weight[2], coord));\n    result[2] = mix(result[1], color[3], smoothstep(weight[2], weight[3], coord));\n    result[3] = mix(result[2], color[4], smoothstep(weight[3], weight[4], coord));\n    \n    return result[3];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv += texture(iChannel1, uv * 0.2 + vec2(iTime* 0.02, 0.0)).rr * 0.03;\n    \n    // Getting the first input channel\n    vec3 col = texture(iChannel0, uv).rrr;\n    \n    // Defining the Color and Weight arrays for the gradient\n    vec3[5] lavaColors = vec3[] (lavaColorBrightOrange, lavaColorBrightRed, lavaColorDarkRed, lavaColorBrownishRed, lavaColorBlack);\n    float[5] lavaWeights = float[] (lavaWeightBrightOrange, lavaWeightBrightRed, lavaWeightDarkRed, lavaWeightBrownishRed, lavaWeightBlack);\n    \n    // Creating the Lava Gradient\n    vec3 lavaGradient = smoothstepMix(lavaColors, lavaWeights, uv.x);\n    \n    // Flowing Lava Effect (Texture)\n    vec2 addUV = uv + vec2(iTime * lavaFlowSpeed, 0.0) + vec2(texture(iChannel1, uv).r * 0.1, 0.0);\n    float add = texture(iChannel1, addUV).r;\n    add = smoothstep(0.65, 0.75, add);\n    col += add;\n    \n    //Lava gradient effect\n    col *= lavaGradient;\n    \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}