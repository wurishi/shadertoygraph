{"ver":"0.1","info":{"id":"ltcSRS","date":"1480185362","viewed":426,"name":"Random Blur","username":"rizvanner","description":"experiment","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["randomblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int Samples = 64; //multiple of 2\nfloat Intensity = 0.01;\n\nconst bool UseNoise = false;\nconst float NoiseScale = 1.0;\nconst float NoiseStrength = 0.1;\n\nvec4 DirectionalBlur(in vec2 UV, in vec2 Direction, in float Intensity, in sampler2D Texture)\n{\n    vec4 Color = vec4(0.0);  \n    float Noise = texture(iChannel1,UV*NoiseScale).x-0.485;\n    \n    if (UseNoise==false)\n    for (int i=1; i<=Samples/2; i++)\n    {\n    Color += texture(Texture,UV+float(i)*Intensity/float(Samples/2)*Direction);\n    Color += texture(Texture,UV-float(i)*Intensity/float(Samples/2)*Direction);\n    }\n\telse      \n    for (int i=1; i<=Samples/2; i++)\n    {\n    Color += texture(Texture,UV+float(i)*Intensity/float(Samples/2)*(Direction+NoiseStrength*Noise));\n    Color += texture(Texture,UV-float(i)*Intensity/float(Samples/2)*(Direction+NoiseStrength*Noise));  \n    }    \n    return Color/float(Samples);    \n}\n\nfloat hash( vec2 p )\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n\t\n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.yy * vec2(1.0,-1.0);\n\n    float randomAngle = noise(uv*(1.0 / 0.1)) * 360.0;\n    vec2 Direction = vec2(-sin(radians(randomAngle)), cos(radians(randomAngle)));    \n    vec4 Color = DirectionalBlur(uv, normalize(Direction), /*Noise**/0.01, iChannel0);\n    \n\tfragColor = vec4(vec3(Color.r), 1.0);\n}","name":"Image","description":"","type":"image"}]}