{"ver":"0.1","info":{"id":"DdXSzs","date":"1704006355","viewed":77,"name":"Noise value/gradient/voroni/fbm","username":"nrebei2","description":"Value, gradient, voroni with FBM","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(float p) {\n    return fract(sin(dot(vec2(p), vec2(12.121213, 432.1231))) * 43256.12039);\n}\n\nfloat random2(vec2 p) {\n    return fract(sin(dot(p, vec2(12.121213, 4.1231))) * 43256.12039);\n}\n\nvec2 random2_2(vec2 p) {\n    return 2.0 * fract(\n    sin(\n        vec2(\n            dot(p, vec2(12.121213, 15.1231)),\n            dot(p, vec2(2.9383, 8.1234))\n            )) * 43256.12039) - 1.0;\n}\n\nfloat noise(vec2 p) {\n    vec2 i_pos = floor(p);\n    vec2 f_pos = fract(p);\n        \n    float col = 0.0;\n    \n    // value noise\n    float ll = random2(i_pos);\n    float lr = random2(i_pos + vec2(1.0, 0.0));\n    float ul = random2(i_pos + vec2(0.0, 1.0));\n    float ur = random2(i_pos + vec2(1.0, 1.0));\n    \n    // gradient noise\n    //float ll = dot(random2_2(i_pos), f_pos);\n    //float lr = dot(random2_2(i_pos + vec2(1.0, 0.0)), f_pos - vec2(1.0, 0.0));\n    //float ul = dot(random2_2(i_pos + vec2(0.0, 1.0)), f_pos - vec2(0.0, 1.0));\n    //float ur = dot(random2_2(i_pos + vec2(1.0, 1.0)), f_pos - vec2(1.0, 1.0));\n        \n    // cubic interpolation (smoothstep)\n    //vec2 u = f_pos*f_pos*(3.0-2.0*f_pos);\n    \n    // quintic interpolation\n    vec2 u = f_pos * f_pos * f_pos * (6.0 * f_pos * f_pos - 15. * f_pos + 10.);\n    \n    col = mix (\n            mix( ll, lr, u.x),\n            mix( ul, ur, u.x),\n            u.y);\n    \n    return col;\n\n}\n\nfloat voroni(vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float min_d = 1.;\n    \n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            //vec2 q = random2_2(i + vec2(x, y));\n            //q = q/2. + 0.5 + n/2.;\n            \n            vec2 idx = i + vec2(x, y);\n            vec2 offset = random2_2(idx);\n            \n            float qx = (2.*noise(idx + 1.15462*iTime)-1.)/10.;\n            float qy = (2.*noise(idx + cos(0.75235*iTime))-1.)/10.; \n            \n            vec2 q = clamp(vec2(qx, qy) + 0.5 + 0.5*sin(123.*offset + iTime), 0., 1.);\n            \n            float dist = length(-f + vec2(x, y) + q);\n            min_d = min(min_d, min_d * dist);\n        }\n    }\n    \n    return min_d;\n\n}\n\n\nfloat circle( in vec2 p, in float r ) {\n    return length(p) - r;\n}\n\nfloat fbm (in vec2 p ) {\n    const int octaves = 4;\n    float lacunarity = 2.0;\n    float gain = 0.5;\n\n    float amp = 0.5;\n    float freq = 1.;\n    \n    float h = 0.;\n    \n    for (int i = 0; i <= octaves; i++) {\n        float b = noise(freq * p);\n        h += amp * b;\n        freq *= lacunarity;\n        amp *= gain;\n    }\n    \n    return h;\n}\n\nvec3 pattern (in vec2 p) {\n    //return fbm(p+iTime)*vec3(;\n    \n    // Domain warping\n    vec2 q = vec2( fbm( p + vec2(0.0,0.0) ),\n                   fbm( p + vec2(5.2,1.3) ) );\n                   \n    vec2 r = vec2( fbm( p + 4.0*q + vec2(1.7,9.2) + cos(iTime/2.) ),\n                   fbm( p + 4.0*q + vec2(8.3,2.8) + iTime/3. ) );\n                   \n    float f = fbm( p + 4.0*r );\n                   \n    vec3 col = vec3(smoothstep(0.0, 1.0, f));\n    col = mix(col, vec3(165.,125.,89.)/255., smoothstep(0.0, 1.0, length(q)));\n    col = mix(col, vec3(63.,73.,72.)/400., smoothstep(0.0, 1.0, r.y));\n\n    return col;\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = 2.*uv - 1.;\n    uv.x *= iResolution.x/iResolution.y; \n    \n    vec2 p = uv;\n    \n    vec3 col = vec3(0.0);\n    \n    // Noise\n    //p *= 10.;\n    //col = vec3(noise(p));\n    \n    \n    // Voroni\n    //float v_d = voroni(p);\n    //col = vec3(0.9,0.6,0.3);\n    //col *= (1.0-exp(-6.0*abs(v_d))) * (0.8 + 0.2*cos(80.*v_d));\n    //col = vec3(smoothstep(0.09, 0.11, v_d));\n    \n    \n    // Cool circle thing\n    //float r = 0.3 + 1.*(2.*noise(p + 2.*iTime) - 1.);\n    //col = vec3(smoothstep(-0.03, 0.0, circle(uv, r)) - smoothstep(0.0, 0.03, circle(uv, r)));\n    \n    \n    // FBM\n    p *= 3.0;\n    col = vec3(pattern(p));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}