{"ver":"0.1","info":{"id":"4lGSzh","date":"1482689262","viewed":128,"name":"formula bounded fractal mapper","username":"towc","description":"other small experiment to get to grasps with glsl :)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 v3( float x, float y, float z ){\n\treturn vec3( x, y, z );\n}\n\nvec3 h2rgb( float hue ){\n    \n  float h = abs(hue - floor(hue)) * 6.;\n  vec3 c = vec3( 0., 0., 0. );\n   \n  int f = int(floor( h ));\n    \n  if(f==0)c=v3(1.,h,0.);else if(f==1)c=v3(2.-h,1.,0.);else if(f==2)c=v3(0.,1.,h-2.);else if(f==3)c=v3(0.,4.-h,1.);else if(f==4)c=v3(h-4.,0.,1.);else c=v3(1.,0.,6.-h);\n  return c;\n}\n\nvec2 r( vec2 p, vec2 c ){\n    \n   \treturn vec2( p.x*p.x - p.y*p.y + c.x, 2.*p.x*p.y + c.y );\n}\n\nfloat dist( vec2 v ){\n\treturn sqrt( v.x*v.x + v.y*v.y );\n}\nfloat f( float x, float y ){\n    \n    vec2 val = vec2( 0, 0 );\n    for( int i = 0; i < 500; ++i )\n        val = r( val, vec2( x, y ) );\n    \n\treturn dist(val);\n}\nvec2 rotate( vec2 v, float d ){\n\tfloat c = cos( d );\n    float s = sin( d );\n    \n    float v_x = v.x;\n    v.x = v.x * c - v.y * s;\n    v.y = v_x * s + v.y * c;\n    \n    return v;\n}\nconst float tx = -.156;\nconst float ty = 1.038;\nconst float threshold = 100000.;\n    \nconst float baseWaveAmount = .5;\nconst float addedWaveAmount = .4999;\nconst float waveFrequency = .5;\nconst float coordinateMultiplier = 1./90.;\n    \nconst float rotSpeed = .25;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    \n\tvec2 q = fragCoord.xy - iResolution.xy / 2.;\n    q *= ( baseWaveAmount + addedWaveAmount * sin( iTime * waveFrequency ) ) * coordinateMultiplier;\n    \n    q = rotate( q, iTime * rotSpeed );\n    \n    float fx = f( q.x + tx, q.y + ty );\n    \n    bool isConsidered = fx < threshold && fx > -threshold;\n    vec3 rgb = h2rgb( fx + iTime / 2.);\n\tfragColor = vec4( \n        rgb * ( isConsidered ? 1. : 0. ), 1 );\n}","name":"Image","description":"","type":"image"}]}