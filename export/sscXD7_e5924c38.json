{"ver":"0.1","info":{"id":"sscXD7","date":"1634810290","viewed":269,"name":"UNIVERSAL_FLOW","username":"boldo","description":"WIP","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["wip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//ADJUST THESE as you like\n#define SPARKLESPEED .05\n#define ROTATIONSPEED .01\n#define MOVEMENTSPEED .05\n\n#define LAYERZOOM 10.\n#define LAYERMOVEMENTSPEED 0.03\n\n#define BGCOLOR vec3(0.024, 0.247, 0.306) * .5\n\n#define FGCOLOR vec3(0.475, 0.696, 0.702)\n\n//DON'T TOUCH THE REST :)\n\nmat2 Rot(float a) {\n   float s=sin(a), c=cos(a);\n   return mat2(c,s,-s,c);\n}\n\n\nfloat Hash21(vec2 p) {\n    p = fract(p * vec2(123.21, 552.53));\n    p += dot(p, p+34.21);\n    return fract(p.x * p.y);\n}\n\nvec2 Hash22(vec2 p) {\n   vec3 p3 = fract(vec3(p.xyx) * vec3(231.23,423.24, 521.23));\n   p3 += dot(p3, p3.yzx + 23.42);\n   return fract((p3.xx + p3.zy) * p3.zy);\n}\n\nfloat DistanceFromLine( in vec2 a, in vec2 b, in vec2 p) {\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) / dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nfloat SimpleLine(vec2 a, vec2 b, vec2 uv) {\n    float d = DistanceFromLine(a, b, uv);\n    float m = smoothstep(.03, .01, d);\n    m*=smoothstep(1.2, .8, length(a-b));\n    return m;\n}\n\n\nvec2 GetPos(vec2 id, vec2 offs) {\n    vec2 n = Hash22(id + offs) * (223.23 + iTime * MOVEMENTSPEED);\n    return offs + sin(n) * .4;\n}\n\n\nfloat Layer(vec2 uv, float n) {\n    uv *= Rot(n * 20. + iTime * ROTATIONSPEED);\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    \n    vec2 p[9];\n    int i=0;\n    for (float y=-1.;y<=1.;y++) {\n        for (float x=-1.;x<=1.;x++) {\n            p[i++] = GetPos(id, vec2(x,y));// + Hash22(id - offs) * 0.5 * Rot(iTime * Hash21(id - offs) * 0.5);\n        }\n    }\n    \n    float m = 0.;\n    for (i = 0; i<9; i++) {\n        \n        vec2 j = (p[i] - gv) * 30.;\n        float sparkle = 1./dot(j,j);\n        m+=sparkle * (sin(iTime * SPARKLESPEED + (Hash21(p[i]) )) * .5 + .5);\n        \n        m += SimpleLine(p[4], p[i], gv);\n    }\n    m+= SimpleLine(p[1], p[3], gv);\n    m+= SimpleLine(p[1], p[5], gv);\n    m+= SimpleLine(p[7], p[3], gv);\n    m+= SimpleLine(p[7], p[5], gv);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   \n    float t = iTime * LAYERMOVEMENTSPEED;\n    \n    // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(0.2,0), 0 ).x; \n    \n    float m = 0.;\n    for (float i=0.; i<1.; i+=1./4.) {\n        float z = fract(t + i);\n        float size = mix(LAYERZOOM, 1., z);\n        float fade = smoothstep(0., .6, z) * smoothstep(1., .8, z);\n        m += Layer(uv * size, i) * fade;\n    }\n    \n    //vec3 currentCol = vec3(sin(iTime) * 0.5 + 0.5,cos(iTime) * 0.5 + 0.5,.9);\n    //m = mix(m, .1, smoothstep(.0, 2.0, (fft-uv.y)));\n    vec3 currentCol = m * FGCOLOR + (1. - m) * BGCOLOR;\n    vec3 col =  currentCol;\n    \n    \n    //col = (1.-step(.5, length(uv))) * col;\n    //col = i.xyz;\n\n    \n    //col = smoothstep(.5, .3, length(uv) - fft) * vec3(1.);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}