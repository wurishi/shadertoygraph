{"ver":"0.1","info":{"id":"tdsXRs","date":"1552250924","viewed":61,"name":"11koroch","username":"korochucha","description":"1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MXM_ITER 200\n#define MXM_LENGTH 200.0\n#define TOUCH_LENGTH 0.001\n\nfloat sdSphere(vec3 p, float s)\n{\n  return length(p)-s;\n}\n\nfloat sdCone( vec3 p, vec2 c )\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\nvec4 Dist(vec3 p){\n\t\n    float pld = p.y;\n    \n    float sd = sdSphere(p - vec3(0.6, 4.29, 2.5), 1.7 );\n    float bd = udBox(p - vec3(0.6, 1.3, 2.9), vec3 (2.5, 1.3, 1.3));\n   \tfloat cod = sdCone(p - vec3(3.6, 01.3, 1.5), normalize(vec2 (5.1, .3)));\n    float cod1 = sdCone(p - vec3(-3.6, 01.3, 1.5), normalize(vec2 (5.1, .3)));\n    float cod2 = sdCone(p - vec3(.0, 1.8, 1.5), normalize(vec2 (5.1, .3)));\n    float cyd = sdCylinder(p +  vec3(.0, 1.8, -12.5), vec3(2.,5.,2.));\n    float cyd1 = sdCylinder(p +  vec3(6.0, 1.8, -12.5), vec3(2.,5.,2.));\n    float cyd2 = sdCylinder(p +  vec3(-6.0, 1.8, -12.5), vec3(2.,5.,2.));\n    \n    \n    float d = min(sd, pld);\n    d = min(bd,d);\n    d = min(cod,d);\n    d = min(cod1,d);\n    d = min(cod2,d);\n    d = min(cyd,d);\n    d = min(cyd1,d);\n    d = min(cyd2,d);\n    \n    \n    if ((d == cod) || (d == cod1) || (d == cod2)) {return vec4 (d, 0.8, 0., 0.3);\n    } else if (d == bd) {return vec4 (d, 0., 1., 0.7);\n    } else if (d == sd) {return vec4 (d, 0.1, 0.7, 1.);\n    } else if ((d == cyd) || (d == cyd1) || (d == cyd2)) {return vec4 (d, 1., .4, 0.2);\n    } else{return vec4(d, 1., 1., 1.);\n    }\n}\n\nvec4 RayMarching(vec3 cPos, vec3 rDir){\n\tfloat dPos=0.;\n\tvec4 v;\n    int i=0;\n    while (i<MXM_ITER) {\n    \tvec3 p = cPos + rDir*dPos;\n        v = Dist(p);\n        float d = v.x;\n        dPos += d;\n        if (dPos>MXM_LENGTH || d<TOUCH_LENGTH) break;\n        i++;\n    }\n    return vec4(dPos, v.y, v.z, v.w);\n\n}\n\nvec3 Normal(vec3 p){\n    vec4 v = Dist(p);\n\tfloat d = v.x;\n    \n     vec4 q1 = Dist(p - vec3(0.005, .0, .0));\n     vec4 q2 = Dist(p - vec3(0.0, .005, .0));\n     vec4 q3 = Dist(p - vec3(0.0, .0, .005));\n    \n    vec3 n = d - vec3(\n        q1.x,\n        q2.x,\n        q3.x);\n    return normalize(n);\n}\n\nfloat Light1(vec3 p){\n\tvec3 lpos = vec3 (0,7,-1);\n    lpos.xz += vec2(cos(iTime), 1.-cos(iTime)*2.);\n    vec3 l = normalize(lpos - p);\n    vec3 n = Normal(p);\n    \n    float diff = clamp(dot(n,l), 0., 1.);\n    vec4 vc = RayMarching(p+n*TOUCH_LENGTH*3.,l);\n    float d = vc.x;\n    if (d < length(lpos - p)) diff *= 0.1;\n    \n    return diff;\n}\n\nfloat Light2(vec3 p){\n\tvec3 lpos = vec3 (-10,5,-4);\n   // lpos.xy += vec2(sin(iTime), cos(iTime)*2.);\n    vec3 l = normalize(lpos - p);\n    vec3 n= Normal(p);\n    \n    float diff = clamp(dot(n,l), 0., 1.);\n    vec4 vc = RayMarching(p+n*TOUCH_LENGTH*2.0,l);\n    float d = vc.x;\n    if (d < length(lpos - p)) diff *= .001;\n    \n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //координата на экране\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n\t//vec3 col1 = vec3(.8, 0.3, 1.5);\n\t// позиция камеры\n    vec3 cPos = vec3(0,5,-17);\n    //ray direction\n    vec3 rDir = normalize(vec3(uv.x, uv.y, 1)); \n    \n    vec4 v = RayMarching(cPos, rDir);\n\n    vec3 p = cPos + rDir*v.x;\n    \n\tfloat diff = Light1(p);\n    diff += Light2(p);\n   \n   \n\tvec3 col1 = vec3(v.y, v.z, v.w);\n    col = vec3(diff)*col1;\n    \n    //цвет пикселя\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}