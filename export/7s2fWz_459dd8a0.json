{"ver":"0.1","info":{"id":"7s2fWz","date":"1646055419","viewed":64,"name":"Basic Shapes init()","username":"metalfinger","description":"Learning to draw basic shapes","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01 \n\nfloat sdCapcule(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap)/dot(ab, ab);\n    t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    \n    return length(c-p) - r;\n}\n\nfloat sdTorus(vec3 p, float r1, float r2)\n{\n    float x = length(p.xz) - r1;\n    float y = p.y;\n    float d = length(vec2(x, y)) - r2;\n\n    return d;\n}\n\nfloat GetDist(vec3 p)\n{\n    vec4 s = vec4(0., 1., 6., 1.);\n    \n    vec4 s1 = vec4(1., 1., 6. + (sin(iTime)), .5);\n    \n    float sphereDist = length(p - s.xyz) - s.w;\n    float planeDist = p.y;\n    \n    float cd = sdCapcule(p, vec3(0., 1., 3.), vec3(2., 2., 3.), .2);\n    \n    float td = sdTorus(p - vec3(0., 0.5, 6.), 1.5, 0.3);\n    \n    float d = min(cd, planeDist);\n    \n    d = min(d, td);\n    \n\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p)\n{\n    float d = GetDist(p);\n    vec2 e = vec2(0.01, .0);\n    \n    vec3 n = d - vec3(\n            GetDist(p-e.xyy),\n            GetDist(p-e.yxy),\n            GetDist(p-e.yyx)\n        );\n        \n    return normalize(n);\n}\n\n\n\nfloat RayMarch(vec3 ro, vec3 rd)\n{\n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++)\n    {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        \n        dO += dS;\n        \n        if(dS<SURF_DIST || dO > MAX_DIST) break;\n    }\n    \n    return dO;\n}\n\nfloat GetLight(vec3 p)\n{\n    vec3 lightPos = vec3(0., 5., 6.);\n    \n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p);\n    \n    float diff = dot(l, n);\n    \n    diff = clamp(diff, 0., 1.);\n    \n    float d = RayMarch(p + n*SURF_DIST, l);\n    if(d < length(lightPos - p)) diff *= 0.1;\n    \n    return diff;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0., 1., 0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y-.2 , 1.));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    \n    float diff = GetLight(p);\n    \n    diff = GetLight(p);\n    \n    d /= 6.;\n    \n    col = vec3(diff);\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}