{"ver":"0.1","info":{"id":"wdtcR2","date":"1602783906","viewed":149,"name":"ver 0.2454367","username":"Coedo","description":"A \"thing\" I made while learning raymarching","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sdf","spheres","space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON 0.001\n#define SPHERESCOUNT 8\n\nvec3 glow = vec3(0.0);\n\nfloat random (vec2 _st) {\n    // based on https://thebookofshaders.com/10/\n    return fract(sin(dot(_st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat sphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sceneSDF(vec3 point) {\n    float sdf = 100.0;\n\n    for(int j = 0; j < 2; j++) {\n        \n        float circleRadius = float(j) * 1.2 + 2.0;\n        \n        for(int i = 0; i <= SPHERESCOUNT; i++) {\n            float anglePercent = float(i) / (float(SPHERESCOUNT));\n            float angle = 2.0 * 3.14 * anglePercent + iTime;\n\n            float c = j == 0 ? 1.0 : -1.0;\n\n            vec3 pos = circleRadius * vec3(cos(angle), sin(c * (iTime * 0.5 + angle)), sin(angle));\n            float sphereRadius = (float(i % 2) * 0.2) + 0.3;\n            float s = sphere(point - pos, sphereRadius);\n\n            vec3 g = 1.0 / vec3(clamp(s, 0.0, 20.0)) * 0.1;\n            glow = max(g, glow);\n\n            sdf = min(sdf, s);\n        }\n    }\n\t\n                 \n    return sdf;\n}\n\nmat4 viewMatrix(vec3 pos, vec3 target, vec3 up) {\n\tvec3 f = normalize(target - pos);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\n\nfloat rayMarch(vec3 rayOrigin, vec3 rayDirection, float start, float end) {\n    float depth = start;\n    for(int i = 0; i < 70; i++) {\n        vec3 point = rayOrigin + depth * rayDirection;\n        float dist = sceneSDF(point);\n        \n        if(dist < EPSILON) {\n            return depth;\n        }\n        \n        depth += dist;\n        if(depth >= end) {\n            return (end);\n        }\n    }\n    \n    return (end);\n}\n\nvec3 calcNormal(vec3 p) {\n    // Based on iq's blog post:\n\t// https://iquilezles.org/articles/normalsSDF\n    const float h = 0.001;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*sceneSDF( p + k.xyy*h ) + \n                      k.yyx*sceneSDF( p + k.yyx*h ) + \n                      k.yxy*sceneSDF( p + k.yxy*h ) + \n                      k.xxx*sceneSDF( p + k.xxx*h ) );\n}\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nvec3 frasnel(vec3 normal, vec3 view) {\n    float c = dot(normal, view) * 0.5 + 0.5;\n    c *= 2.5;\n    \n    return vec3(c * c * c);\n}\n\nvec3 lightning(vec3 camPos, vec3 point, vec3 viewDir) {\n    vec3 normal = calcNormal(point);\n    vec3 lightPos = vec3(0.0);\n\n  \tfloat ndotl = dot(normal, lightPos - point) * 0.5 + 0.5;\n    \n    vec3 col = vec3(0.1, 0.2, 0.6) * ndotl;\n    \n    vec3 V = normalize(point - camPos);\n\tvec3 f = frasnel(normal, V);\n    \n    return col + f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 dir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 cameraPos = vec3(7.0, 4.0, 25.0);\n    \n    mat4 cam = viewMatrix(cameraPos, vec3(0.0, 0.0, 0.0), vec3(0.0, 1.0, 0.0));\n    dir = (cam * vec4(dir, 0.0)).xyz;\n    \n    float dist = rayMarch(cameraPos, dir, 0.0, 100.0);\n    \n    if(dist > 100.0 - EPSILON) {\n        vec2 coord = fragCoord;\n        coord.x += iTime * 2.0;\n\t\t\n        // Stars\n        vec3 col = vec3(step(random(fragCoord), 0.001) * (sin(coord.x + coord.y) * .5 + .5));\n    \tfragColor = vec4(col + glow, 1.0);\n        return;\n    }\n\t\n    vec3 hitPoint = cameraPos + dist * dir;\n    vec3 col = lightning(cameraPos, hitPoint, dir);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}