{"ver":"0.1","info":{"id":"mdcSRB","date":"1680013200","viewed":114,"name":"Artistic Network of Nodes","username":"falldeaf","description":"Created by ChatGPT! (GPT-4)\nPrompt: Can you please write a shader for shadertoy.com that depicts an artistic representation of a network of nodes moving around with 'data' passing between them as they move around, almost reminiscent of a neural network?","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["neuralnetwork","nodes","chatgpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Artistic Network of Nodes by ChatGPT\n// ShaderToy.com compatible code\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = vec3(0.0);\n    float time = iTime * 0.5;\n    \n    int numNodes = 12;\n    float nodeRadius = 0.02;\n    float connectionDistance = 0.25;\n    \n    // Generate the nodes\n    for (int i = 0; i < numNodes; i++) {\n        float angle = float(i) * 2.0 * 3.141592653589793238 / float(numNodes);\n        vec2 nodePos = vec2(0.5) + vec2(cos(angle + time), sin(angle + time)) * 0.25;\n        \n        // Node glow\n        float nodeDist = length(uv - nodePos);\n        color += vec3(0.5, 0.6, 1.0) * smoothstep(nodeRadius * 1.0, 40.1, nodeDist * 10.0);\n        \n    // Draw the nodes\n    color += vec3(1.0) * smoothstep(nodeRadius, nodeRadius - 0.005, nodeDist);\n\n    // Generate connections between nodes\n    for (int j = i + 1; j < numNodes; j++) {\n        float angle2 = float(j) * 2.0 * 3.141592653589793238 / float(numNodes);\n        vec2 nodePos2 = vec2(0.5) + vec2(cos(angle2 + time), sin(angle2 + time)) * 0.25;\n\n        // Calculate line properties\n        vec2 dir = nodePos2 - nodePos;\n        float dist = length(dir);\n        vec2 dirNormalized = dir / dist;\n\n        if (dist < connectionDistance) {\n            float t = dot(uv - nodePos, dirNormalized) / dist;\n            t = clamp(t, 0.0, 1.0);\n            vec2 linePos = nodePos + t * dir;\n\n            // Draw the connections\n            float lineDist = length(uv - linePos);\n            float lineWidth = 0.02;\n            float lineGlow = smoothstep(lineWidth * 1.0, 0.0, lineDist * 10.0);\n            color += vec3(0.5, 0.6, 1.0) * lineGlow * (1.0 - t) * (1.0 - pow(abs(t - 0.5) * 2.0, 0.5));\n            \n            // Animate data passing between nodes\n            float dataSpeed = 1.3;\n            float dataWidth = 0.01;\n            float dataGlowWidth = 0.05;\n            float dataPos = fract(time * dataSpeed + float(i + j) * 0.1);\n            float dataT = clamp((t - dataPos) / dataWidth, 0.0, 1.0);\n            float dataGlow = smoothstep(1.0, 0.0, dataT);\n            float dataGlowOuter = smoothstep(dataGlowWidth, dataWidth, abs(t - dataPos));\n            color += vec3(0.02, 0.02, 0.02) * dataGlow * dataGlowOuter * 0.8;\n        }\n    }\n}\n\n    // Background color\n    vec3 backgroundColor = vec3(0.1, 0.15, 0.2);\n    //color = mix(backgroundColor, color, smoothstep(0.0, 1.0, length(color)));\n    // Vignette\n    float vignette = smoothstep(0.0, 1.0, 1.3 - length(uv * 2.0 - 1.0));\n    color = mix(color, backgroundColor, 1.0 - vignette);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}