{"ver":"0.1","info":{"id":"XtXyz7","date":"1503968677","viewed":123,"name":"Sierpinski Triangle (Test)","username":"zaiyugi","description":"Testing a Sierpinski triangle formula","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Iterations 4\n#define Scale 2.0\n#define Eps 0.01\n\nfloat DE(vec2 z)\n{\n\tvec2 a1 = vec2( 0.0, 1.0);\n\tvec2 a2 = vec2(0.7071,  -0.7071);\n\tvec2 a3 = vec2(-0.7071, -0.7071);\n    \n\tvec2 c;\n\tfloat dist, d;\n\tfor(int n = 0; n < Iterations; ++n)\n    {\n        c = a1;\n        dist = length(z - a1);\n        \n        d = length(z - a2);\n        if(d < dist)\n        {\n            c = a2;\n            dist = d;\n        }\n        \n        d = length(z - a3);\n        if(d < dist)\n        {\n            c = a3;\n            dist = d;\n        }\n        \n        z = Scale * z - c * (Scale - 1.0);\n    }\n\n\treturn length(z);// * pow(Scale, float(-Iterations));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t// Scale uv to -1..1 range\n    uv = 2.0 * uv - 1.0;\n    uv.y += 0.1;\n    \n    float d = DE(uv);\n    \n   \t// Convert distance d to color\n    //vec3 color = mix(vec3(0.0), vec3(1.0), step(Eps, d));\n    \n    // Use d as color directly\n    vec3 color = vec3(d);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}