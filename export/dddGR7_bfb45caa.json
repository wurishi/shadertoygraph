{"ver":"0.1","info":{"id":"dddGR7","date":"1677100238","viewed":111,"name":"Fork moire frac sleeplessm 790","username":"sleeplessmonk","description":"forked my own shader with audioreactivity\n","likes":1,"published":1,"flags":4,"usePreview":0,"tags":["2d","fractal","sound","mandelbrot","reactive","music","kaleidoscope","visualiser","snowflake","set","koch"],"hasliked":0,"parentid":"md2SWz","parentname":"moire fractal test"},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // calculate screen coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // calculate moire pattern\n    vec2 moire = vec2(length(uv), atan(uv.x, uv.y));\n\n    // calculate fractal geometry\n    float fractal = 0.0;\n    for(int i = 5; i < 70; i++)\n    {\n        fractal += .25 * abs(sin(moire.x * 5.0 + iTime));\n    }\n\n    // get audio input\n    vec3 audioInput = texture(iChannel1, vec2(0.5, 0.5)).rgb;\n\n    // calculate psychedelic colors using audio input\n    vec3 color = vec3(0.318,0.0804,0.792);\n    color += vec3(audioInput.r, audioInput.b, audioInput.g) * sin(moire.y * 52.0 + fractal);\n    color += vec3(audioInput.g, audioInput.r, audioInput.b) * cos(moire.x * 124.0 + fractal);\n    color += vec3(audioInput.r, audioInput.g, audioInput.b) * sin(moire.y * 54.0 + fractal);\n\n    // output final color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}