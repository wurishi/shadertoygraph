{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n\nconst float MAX_TRACE_DISTANCE = 10.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 140;\n\t\nvec4 spherePos[10];\n    \n\n\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) / (w.x+w.y+w.z);\n}\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdPlane( vec3 p )\n{\n    \n    float f = sin( p.z * 5. ) * sin( p.x * 5. );\n    //f = 5. * smoothstep( abs(f) , 0.4 , 0.8 );\n\treturn p.y - (abs( f) * .3)/ max( 1. , pow( length( p ), 1.));\n\n}\n\n\nfloat sdSphere( vec3 p, float s , float offset)\n{\n    //p.x += 0.1*sin( 60.0*p.y * p.x * p.z * abs(sin(offset *iTime)) + iTime );\n    //p.y += 0.1*sin( 60.0*p.y * p.x * p.z * abs(sin(offset *iTime * .4)) + iTime );\n  //  p.y += 0.1*sin( 10.0*p.z + iTime *10.);\n  //  p.z += 0.1*sin( 30.0*p.x + iTime *3.);\n    /*p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );\n    p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );\n    p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );*/\n\n    float d1 = length(p) - .1*smoothstep(0.0,1.0,iTime);;\n    d1 *= .8;\t\n    \n   // vec3 nP = vec3( x , y , z );\n    return d1 -s;\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n\n    float d1 = -p.y-c.z;\n    float d2 = max( dot(q,c.xy), p.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n\n}\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),1.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n    float field = length( pos - vec3( 0. , 0. , 1.)) - 5.;\n    \n    vec2 res = vec2( field , 1. );\n   \t/*vec2 res = vec2( sdPlane( pos - vec3( 0. , -1. , 0. )), 0.0 );\n   \n    for( int i = 0; i < 10; i++ ){\n   \t\t\n        vec2 res2 = vec2( sdSphere( (pos - spherePos[i].xyz) , spherePos[i].w  , float( i )) , float(i) + 1.);\n        //vec2 res2 = vec2( udRoundBox( (pos - spherePos[i].xyz) , vec3( spherePos[i].w  ) ,spherePos[i].w * .2 ) , float(i) + 1.);\n   \t\tres = opU( res ,  res2 );\n        \n   \t}*/\n    \n   \treturn res;\n    \n}\n\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 20.*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n\n    for( int i =0; i < 10; i++ ){\n        \n        float x = 1. * cos(iTime *.13 * (float( i )+2.));\n        float y = 1. * sin(iTime * .075 * (float( i )+4.));\n        float z = 1. * sin(iTime * .1 * (float( i )+3.3));\n        float r = .1 * ( sin( iTime * .1  *( float( i) +1.))+2.);\n    \tspherePos[i] = vec4( x ,  y+1. ,  z , r  );\n        \n        \n    }\n\n    \n    \n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    m.x = sin(iTime * .01) + cos(( iTime + 4. )* .135 );\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n    \n    \n    vec3 col = vec3( 0. , 0. , 0. ); \n   \n    // If we have hit something lets get real!\n    if( res.y > -.5 ){\n\n    \tvec3 pos = ro + rd * res.x;\n    \tvec3 nor = calcNormal( pos );\n        \n        vec3 pat = texCube( iChannel0, 0.5*pos, nor, 10.0 ).xyz;\n        col = pat * normalize(vec3(1. ) + vec3( abs(sin( res.y )) , .3  , abs(cos(res.y)) ));\n        if( res.y < .5 ){ col = vec3(1.) * pat; }\n        \n        float AO = calcAO( pos , nor );\n        \n        vec3 light1 =  normalize(vec3( 0. , 1. , 1. ));\n        vec3 color1 = vec3( .1 , .05 , .02 );\n        color1 *=10.;\n        float shadow1 = softshadow( pos , light1 ,  0.1 , 20. );\n        \n        vec3 light2 =  normalize(vec3( 1. , 1. , -1. ));\n        vec3 color2 = vec3( .02, .05 , 0.1 );\n        color2 *= 8.;\n        float shadow2 = softshadow( pos , light2 ,  0.1 , 20. );\n        \n        vec3 light3 =  normalize(vec3( 1. , 1. , 0. ));\n        vec3 color3 = vec3( .02, .1 , .05 );\n        color3 *= 8.;\n        float shadow3 = softshadow( pos , light3 ,  0.1 , 20. );\n        \n        \n\n   \n        // vec3 = calcColor( ro , rd );\n    \n        color1 *= max( 0. , dot( light1 , nor ) );\n        color1 *= shadow1;\n        \n        color2 *= max( 0. , dot( light2 , nor ) );\n        color2 *= shadow2;\n        \n        color3 *= max( 0. , dot( light3 , nor ) );\n        color3 *= shadow3;\n        \n\n        //col = vec3( AO );\n        col *= color1 + color2 + color3; //* ((nor * .5 ) +.5);\n\n        col *= AO;// * .4 * ( nor * .5 + .5 );\n        \n        if( res.y < .5 ){\n            \n            //float f = sin( pos.z * 5. ) * sin( pos.x * 5. );\n            //col *= 5. * smoothstep( abs(f) , 0.4 , 0.8 );\n           // col *= abs( f );\n           // col /= pow( length( pos ), 4.);\n        }\n        \n        col = color1 + color2 + color3;\n    }\n    // apply gamma correction\n    col = pow( col, vec3(0.4545) );\n\n    fragColor = vec4( col , 1. );\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tl3z2","date":"1423593754","viewed":275,"name":"SHADE A DAY ( 2 / 10 / 2015 )","username":"cabbibo","description":"I made a mistake, but don't know what it was...\nI think its in the map function though....","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytrace","bug"],"hasliked":0,"parentid":"","parentname":""}}