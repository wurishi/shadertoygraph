{"ver":"0.1","info":{"id":"4dlBWS","date":"1497883713","viewed":500,"name":"3D Glasses Test","username":"slerpy","description":"Simple 3D Demo","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n\n#define FAR 250.\n#define FOG 4.\n#define ITER 128\n#define QUA .0\n#define NORK 5e-3\n\n// EOFF (Eye-OFFset) is half the distance between both cameras in meters.\n// Invert this number to invert the colors or set it to .0 for a non-3D shader.\n\n#define EOFF .03\n\nmat3 rx(float a){ float sa = sin(a), ca = cos(a); return mat3(1.,0.,0.,0.,ca,sa,0.,-sa,ca); }\nmat3 ry(float a){ float sa = sin(a), ca = cos(a); return mat3(ca,0.,sa,0.,1.,0.,-sa,0.,ca); }\nmat3 rz(float a){ float sa = sin(a), ca = cos(a); return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.); }\n\nfloat map(vec3 p)\n{\n    vec3 v = abs(round(p)-p);\n\treturn max(max(v.x,v.y),v.z)-.1;\n}\n\nvec3 normal(vec3 p, float k)\n{\n\tvec2 e = vec2(.0,k);\n\treturn normalize(vec3(\n\t\tmap(p) - map(p - e.yxx),\n\t\tmap(p) - map(p - e.xyx),\n\t\tmap(p) - map(p - e.xxy)\n\t));\n}\n\nfloat tracer(vec3 ro, vec3 rd)\n{    \n    float t = .0, d;\n    for(int i=0; i < ITER; i++){        \n        d = map(ro + rd*t);\n        if (d < QUA*t || t > FAR) break;\n        t += d;\n    } \n    return t + QUA;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    \n    uvec2 tmp = uvec2(fragCoord) & 1u;\n    bool alt = tmp.x == tmp.y;\n\n\tvec3 ro = vec3(vec2(.5),iTime);\n    vec3 rd = normalize(vec3(uv,2));\n    vec3 dp = vec3(EOFF/2.,vec2(0));\n    \n    mat3 rt = rx(iTime/32.)*ry(iTime/32.);\n    rd *= rt; dp *= rt;\n    \n    if(alt) ro += dp;\n    else ro -= dp;\n    \n    float t = tracer(ro,rd);\n\tvec3 sp = ro + rd*t;\n    \n\tvec3 sn = normal(sp,NORK);\n    vec3 ld = normalize(ro-sp);\n\tfloat diff = max(dot(sn,ld),0.);\n    \n    vec3 col = vec3(1.);\n    col *= (1.+diff)/2.;\n    col *= exp(-t/FOG);\n    \n    if(alt) col.x *= .0;\n    else col.yz *= .0;\n    \n\tfragColor = vec4(col,1.);\n}\n","name":"Image","description":"","type":"image"}]}