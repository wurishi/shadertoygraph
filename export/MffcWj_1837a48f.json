{"ver":"0.1","info":{"id":"MffcWj","date":"1721588609","viewed":92,"name":"Belousov-Zhabotinsky continuous","username":"draradech","description":"Belousov-Zhabotinsky reaction\n\nIn comparision with the CA version this is smoother and has much bigger spirals. Emergent behaviour from simple rules.\nClick to reset.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["2d","spirals","emergent"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COLORS 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float v = texture(iChannel0, (fragCoord + .5) / iResolution.xy).x / 1.1;\n    v = pow(v, 1.3);\n\n#if COLORS == 1\n    fragColor = vec4(pow(v, 1.0), pow(v, 2.5), pow(v, 6.0), 1.0);\n#elif COLORS == 2\n    fragColor = mix(vec4(0., .45, .9, 1.), vec4(1., .45, 0., 1.), v);\n#endif\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define F 10.\n#define G .9\n#define S .007\n#define K 4.\n#define KL (2. * K + 1.)\n#define KS (KL * KL)\n\nvec4 wrapFetch(ivec2 p)\n{\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p + r) % r;\n    return texelFetch(iChannel0, p, 0);\n}\n\nfloat hash(float v)\n{\n    return fract(sin(v) * 5897.);\n}\n\nfloat frand(vec2 c)\n{\n    return hash(c.x + 983. * hash(c.y + 911. * hash(iDate.w)));\n}\n\nfloat init(vec2 c)\n{\n    vec2 uv = c / iResolution.xy;\n    float d = 2.;\n    for (float i = 0.; i < 50.; i++)\n    {\n        vec2 u = vec2(frand(vec2(i, 0)), frand(vec2(i, 1)));\n        d = min(d, length(u - uv));\n    }\n    return 1. - step(.05, d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 px = ivec2(fragCoord);\n\n    if (iFrame == 0 || iMouse.w > 0.)\n    {\n        fragColor.x = init(fragCoord);\n        fragColor.y = 0.;\n        return;\n    }\n    \n    float vsum = 0.;\n    vec4 self = wrapFetch(px);\n\n    for (float dx = -K; dx <= K; dx++)\n    {\n        for (float dy = -K; dy <= K; dy++)\n        {\n            vec4 n = wrapFetch(px + ivec2(dx, dy));\n            vsum += (n.x + n.y / (F * G));\n        }\n    }\n\n    if (self.x > 1.)\n    {\n        fragColor.x = 0.;\n        fragColor.y = F;\n    }\n    else\n    {\n        fragColor.y = max(self.y - 1., 0.);\n        fragColor.x = (vsum / KS) * ((F - self.y) / F);\n        if (self.y == 0.) fragColor.x += S * self.x;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}