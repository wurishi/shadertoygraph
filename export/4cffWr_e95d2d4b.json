{"ver":"0.1","info":{"id":"4cffWr","date":"1723579822","viewed":33,"name":"space filling cube and half cube","username":"jt","description":"Filling space with a regular arrangement of 1x1x1 and 2x2x2 cubes.\n\"there is only one unilateral tiling of R^3 by cubes of two sizes and that is necessarily equitransitive\"\n(see source for article link)\nNote that cubes at border are visualized incomplete.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cube","space","tiling","2","double","one","8","1","1","tesselation","two","filling","size","half","eight","1x1x1","2x2x2"],"hasliked":0,"parentid":"McffzM","parentname":"chiral combined cube composition"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4cffWr space filling cube and half cube, 2024 jt\n// using the chiral arrangement from\n// https://www.shadertoy.com/view/McffzM chiral combined cube composition\n\n// Filling space with a regular arrangement of 1x1x1 and 2x2x2 cubes.\n// According to this article\n// https://www.researchgate.net/publication/268669950_Filling_space_with_cubes_of_two_sizes\n// BÃ¶lcskei, Attila. (2001). Filling space with cubes of two sizes. Publicationes Mathematicae. 59. 10.5486/PMD.2001.2480.\n// \"there is only one unilateral tiling of R^3 by cubes of two sizes and that is necessarily equitransitive\"\n\n// Note that cubes at border are visualized incomplete.\n\n// tags: cube, space, tiling, 2, double, one, 8, 1, 1, tesselation, two, filling, size, half, eight, 1x1x1, 2x2x2\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nint div_floor(int a, int b) // vector version thanks to Fabrice\n{\n    int    S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\n// https://www.shadertoy.com/view/DtjyWD integer modulo strictly positive\nint mod_positive(int a, int b) // vector version thanks to Fabrice\n{\n    return a - div_floor(a, b) * b;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, ivec3 b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\n// https://www.shadertoy.com/view/DtjyWD integer modulo strictly positive\nivec3 mod_positive(ivec3 a, ivec3 b) // vector version thanks to Fabrice\n{\n    return a - div_floor(a, b) * b;\n}\n\nuint filling_space_with_two_cubes(ivec3 c)\n{\n    ivec3 d = div_floor(c, ivec3(3));\n    //if(d.y < -1 || d.y >= 1) return 0u;\n    if(any(lessThan(d, ivec3(-2))) || any(greaterThanEqual(d, ivec3(3)))) return 0u;\n\n    //bvec3 b = equal(d % 1, ivec3(1));\n    bvec3 b = equal(d&1, ivec3(1));\n\n    //c = c % 3; // XXX WARNING: NEGATIVE % BREAKS ON WINDOWS? XXX\n    c = mod_positive(c, ivec3(3)); // NOTE: Need strictly positive modulo here (why isn't that a built-in operator?!)\n\n    // mirror every other cube\n    if(b.x) c.x = 2 - c.x;\n    if(b.y) c.y = 2 - c.y;\n    if(b.z) c.z = 2 - c.z;\n\n    // axis\n    if(c == ivec3(0)) return 8u;\n    if(c == ivec3(1)) return 7u;\n    if(c == ivec3(2)) return 15u;\n\n    // chiral\n    if(c.z == 0 && c.x >= 1 && c.y < 2) return 1u + (b.x!=b.y?8u:0u);\n    if(c.x == 0 && c.y >= 1 && c.z < 2) return 2u + (b.y!=b.z?8u:0u);\n    if(c.y == 0 && c.z >= 1 && c.x < 2) return 4u + (b.z!=b.x?8u:0u);\n    // chiral\n    if(c.z == 2 && c.y >= 1 && c.x < 2) return 6u + (b.x!=b.y?8u:0u);\n    if(c.y == 2 && c.x >= 1 && c.z < 2) return 3u + (b.z!=b.x?8u:0u);\n    if(c.x == 2 && c.z >= 1 && c.y < 2) return 5u + (b.y!=b.z?8u:0u);\n\n    return 0u;\n}\n\n#define BLACK vec3(0)\n#define RED vec3(1,0,0)\n#define GREEN vec3(0,1,0)\n#define YELLOW vec3(1,1,0)\n#define BLUE vec3(0,0,1)\n#define MAGENTA vec3(1,0,1)\n#define CYAN vec3(0,1,1)\n#define WHITE vec3(1,1,1)\n#define DARKGREY vec3(1.0/3.0)\n#define REDGREY vec3(0.5,0,0)\n#define GREENGREY vec3(0,0.5,0)\n#define YELLOWGREY vec3(0.5,0.5,0)\n#define BLUEGREY vec3(0,0,0.5)\n#define MAGENTAGREY vec3(0.5,0,0.5)\n#define CYANGREY vec3(0,0.5,0.5)\n#define LIGHTGREY vec3(2.0/3.0)\n\n#define COLORS vec3[](BLACK,RED,GREEN,YELLOW,BLUE,MAGENTA,CYAN,WHITE,DARKGREY,REDGREY,GREENGREY,YELLOWGREY,BLUEGREY,MAGENTAGREY,CYANGREY,LIGHTGREY)\n\nvec3 code(uint c)\n{\n    //return COLORS[c % 16u]; // NOTE: % seems to breaks on windows for negative int - uint ok? XXX\n    return COLORS[c & 15u];\n}\n\n#define MAX_RAY_STEPS 64\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = max(iMouse.x, iMouse.y) < 5.0;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // thanks Fabrice for reminding me (repeatedly) to use this nice one-liner :D\n    vec3 rd = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    vec3 ro = vec3(0.0,-25.0, 0.0);\n\n    float mx = -2.0 * pi * float(iMouse.x) / R.x;\n    float my = -pi / 2.0 + pi * float(iMouse.y) / R.y;\n    //mx = !demo ? mx : +pi / 4.0 + 2.0 * pi * fract(iTime * 0.01);\n    mx = !demo ? mx : +pi / 2.0 + 2.0 * pi * fract(iTime * 0.01);\n    my = !demo ? my : -pi / 5.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro += 1.5;\n\n    vec3 color = vec3(0.0);\n\n    {\n        // Based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 (somewhat reduced)\n        // \"The raycasting code is somewhat based around a 2D raycasting toutorial found here:\n        //  http://lodev.org/cgtutor/raycasting.html\" (fb39ca4)\n        bvec3 mask;\n        ivec3 cell = ivec3(floor(ro));\n        vec3 dd = 1.0 / abs(rd);\n        ivec3 rs = ivec3(sign(rd));\n        vec3 sd = (sign(rd) * (vec3(cell) - ro) + (sign(rd) * 0.5) + 0.5) * dd;\n        for (int i = 0; i < MAX_RAY_STEPS; i++)\n        {\n            uint q = filling_space_with_two_cubes(cell);\n            //if(q > 0u && (1.0 - fract(iTime/9.0)) * 9.0 < float(q))\n            if(q > 0u && (1.0 - fract(iTime/15.0)) * 15.0 <= float(q))\n            {\n                color = code(q);\n                break;\n            }\n\n            mask = lessThanEqual(sd.xyz, min(sd.yzx, sd.zxy));\n            sd += vec3(mask) * dd;\n            cell += ivec3(vec3(mask)) * rs;\n        }\n\n        color *= mask.x ? vec3(0.25) : mask.y ? vec3(0.5) : mask.z ? vec3(1.0) : vec3(0.0);\n    }\n\n    fragColor = vec4(sqrt(color), 1.0); // gamma corrected\n}\n","name":"Image","description":"","type":"image"}]}