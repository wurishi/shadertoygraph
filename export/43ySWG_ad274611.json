{"ver":"0.1","info":{"id":"43ySWG","date":"1720394339","viewed":41,"name":"Ray Marching Noise","username":"Shrimp","description":"This shader toy is created to showcase an issue I am having with my ray marching code","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader is a modified version of a tutorial on YouTube\n// https://youtu.be/PGtv-dBi2wE\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nvec3 rayAt(in Ray ray, in float time) {\n    return ray.origin + ray.direction * time;\n}\n\nfloat corner(vec2 p) {\n    vec2 fr = fract(p / 3.14159) * 50.0;\n    float d = fract(fr.x * fr.y * (fr.x + fr.y));\n    return 2.0 * d - 1.0;\n}\n\nfloat S(float s) {\n    return 3.0 * s * s - 2.0 * s * s * s;\n}\n\nfloat planeHeight(vec2 p) {\n    float i = floor(p.x);\n    float j = floor(p.y);\n\n    float a = corner(vec2(i + 0.0, j + 0.0));\n    float b = corner(vec2(i + 1.0, j + 0.0));\n    float c = corner(vec2(i + 0.0, j + 1.0));\n    float d = corner(vec2(i + 1.0, j + 1.0));\n\n    float dist =\n    a +\n    (b - a) * S(p.x - i) +\n    (c - a) * S(p.y - j) +\n    (a - b - c + d) * S(p.x - i) * S(p.y - j);\n\n    return dist;\n}\n\nfloat getDistance(vec3 p) {\n    vec2 worldPos = p.xz - vec2(33.0, 101.0);\n\n    float slowStep = 0.1;\n    float plane = planeHeight(worldPos);\n\n    return abs(p.y + plane + 1.0) * slowStep;\n}\n\nfloat rayMarch(Ray ray) {\n    float totalDist = 0.0;\n\n    for (int i = 0; i < 1000; i++) {\n        vec3 pos = rayAt(ray, totalDist);\n        float dist = getDistance(pos);\n        totalDist += dist;\n        if (abs(totalDist) > 20.0 || abs(dist) < 0.001) break;\n    }\n\n    return totalDist;\n}\n\nvec3 getNormal(vec3 pos) {\n    vec2 epsilon = vec2(0.0001, 0.0);\n\n    float centDist = getDistance(pos);\n    float xDist = getDistance(pos + epsilon.xyy) - getDistance(pos - epsilon.xyy);\n    float yDist = getDistance(pos + epsilon.yxy) - getDistance(pos - epsilon.yxy);\n    float zDist = getDistance(pos + epsilon.yyx) - getDistance(pos - epsilon.yyx);\n    return normalize(vec3(xDist, yDist, zDist));\n}\n\nvec3 getColor(Ray ray) {\n    float dist = rayMarch(ray);\n    if (dist < 20.0) {\n        vec3 pos = rayAt(ray, dist);\n        vec3 norm = getNormal(pos);\n\n        return norm * 0.5 + 0.5;\n    }\n\n    vec3 unitDir = normalize(ray.direction);\n    float a = (unitDir.y + 1.0) / 2.0;\n    return (1.0 - a) * vec3(1.0, 1.0, 1.0) + (a) * vec3(0.5, 0.7, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n    vec3 col = vec3(0);\n\n    vec3 ro = vec3(0, 6, 0);\n    vec3 rd = normalize(vec3(uv.x - .15, uv.y - .8, 1));\n\n    vec3 color = getColor(Ray(ro, rd));\n    color = pow(color, vec3(.4545));\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}