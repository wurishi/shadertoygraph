{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// since (orthodox) easter in .ro was on May 5th i thought of trying an easter egg! :)\n// based on iq's work (apple + clover demos). \n// modded by nervus (nervus@nervus.org)\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f/0.9375;\n}\n\nfloat maxcomp(in vec3 p ) { return max(p.x,max(p.y,p.z));}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nfloat eggShape( in vec3 p )\n{\n\n    p.y *= 0.8;\n    float f = pow(1.9*dot(p.xz, p.xz), 0.65);\n    p.y += 0.15 * f;\n    return  (length(p) - 1.0);\n}\n\nfloat tableShape( in vec3 p )\n{\n    return p.y + 1.2;\n}\n\n\nvec2 map( in vec3 p )\n{\n    vec2 dist1 = vec2(eggShape(p), 1.0);\n    vec2 dist2 = vec2(tableShape(p), 2.0);\n    \n    if (dist2.x < dist1.x)\n        dist1 = dist2;\n\n    return dist1;\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n    float t=0.0;\n    float dt = 0.06;\n    float nh = 0.0;\n    float lh = 0.0;\n    float lm = -1.0;\n    \n    for(int i=0;i<100;i++)\n    {\n        vec2 ma = map(ro+rd*t);\n        nh = ma.x;\n        if(nh>0.0)\n        {\n            lh=nh;\n            t+=dt;\n        }\n        lm=ma.y;\n    }\n    \n    if( nh>0.0 )\n        return vec2(-1.0);\n    \n    t = t - dt*nh/(nh-lh);\n    return vec2(t,lm);\n}\n\nvec3 calcNormal(in vec3 pos)\n{\n    vec3  eps = vec3(.001,0.0,0.0);\n    vec3 nor;\n    nor.x = map(pos+eps.xyy).x - map(pos-eps.xyy).x;\n    nor.y = map(pos+eps.yxy).x - map(pos-eps.yxy).x;\n    nor.z = map(pos+eps.yyx).x - map(pos-eps.yyx).x;\n    return normalize(nor);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float dt = 0.1;\n    float t = mint;\n    for( int i=0; i<30; i++ )\n    {\n        float h = map(ro + rd*t).x;\n        if( h>0.001 )\n            res = min( res, k*h/t );\n        else\n            res = 0.0;\n        t += dt;\n    }\n    return res;\n}\n\nvec3 eggColor( in vec3 pos, in vec3 nor, out vec2 spe )\n{\n    spe.x = 1.0;\n    spe.y = 1.0;\n    \n    float a = atan(pos.y,pos.x);\n    float r = length(pos.xy);\n    \n    // red\n    vec3 col = vec3(1.0,0.0,0.0);\n    float f = smoothstep( 0.0, 1.0, fbm(pos*4.0) );\n    col *= 0.8+0.2*f;\n    \n    // frekles\n    f = smoothstep( 0.0, 1.0, fbm(pos*48.0) );\n    f = smoothstep( 0.7,0.9,f);\n    col = mix( col, vec3(0.9,0.9,0.6), f*0.5 );\n    \n    \n    // stripes\n    f = fbm( vec3(a*7.0 + pos.z,3.0*pos.y,pos.x)*2.0);\n    f = smoothstep( 0.2,1.0,f);\n    f *= smoothstep(0.4,1.2,pos.y + 0.75*(noise(4.0*pos.zyx)-0.5) );\n    col = mix( col, vec3(0.4,0.2,0.0), 0.5*f );\n    spe.x *= 1.0-0.35*f;\n    spe.y = 1.0-0.5*f;\n        \n    float ao = 0.5 + 0.5 * nor.y;\n    col *= ao*1.2;\n    \n    vec2 sc = vec2(cos(a), sin(a));\n    a = atan(sc.y, sc.x);\n    float sss = 0.5 + 0.5*sin(4.0*a);\n    float ttt = 0.2 + 0.4*pow(sss,0.3);\n    ttt += 0.1*pow(0.5+0.5*cos(8.0*a), 1.0);\n    float fff = 0.0;\n    if (r<ttt)\n        fff = col.r;\n    col = mix(col, vec3(0.0,1.0,0.0), 1.0*(1.0-r)*fff);\n        \n    spe.x *= 1.0-0.35*fff;\n    spe.y = 1.0-0.5*fff;\n    \n    return col;\n}\n\nvec3 tableColor( in vec3 pos, in vec3 nor, out vec2 spe )\n{\n    spe.x = 1.0;\n    spe.y = 1.0;\n    vec3 col = vec3(0.5,0.4,0.3)*1.7;\n    \n    float f = fbm( 4.0*pos*vec3(6.0,0.0,0.5) );\n    col = mix( col, vec3(0.3,0.2,0.1)*1.7, f );\n    spe.y = 1.0 + 4.0*f;\n    \n    f = fbm( 2.0*pos );\n    col *= 0.7+0.3*f;\n    \n    // frekles\n    f = smoothstep( 0.0, 1.0, fbm(pos*48.0) );\n    f = smoothstep( 0.7,0.9,f);\n    col = mix( col, vec3(0.2), f*0.75 );\n    \n    // fake ao\n    f = smoothstep( 0.1, 1.55, length(pos.xz) );\n    col *= f*f*1.4;\n    col.x += 0.1*(1.0-f);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n\n    // light\n    vec3 light = normalize(vec3(1.0,0.8,-0.6));\n\n    float ctime = iTime;\n    // camera\n    vec3 ro = 1.1*vec3(2.5*cos(1.5*ctime),(0.5*cos(ctime*.23)+0.5),2.5*sin(1.5*ctime));\n\n    vec3 ww = normalize(vec3(0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    vec3 col = vec3(0.0);\n    vec2 tmat = intersect(ro,rd);\n    if( tmat.x>0.0 )\n    {\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd,nor);\n        vec3 lig = normalize(vec3(1.0,0.8,-0.6));\n        \n        float con = 1.0;\n        float amb = 0.5 + 0.5*nor.y;\n        float dif = max(dot(nor,lig),0.0);\n        float bac = max(0.2 + 0.8*dot(nor,vec3(-lig.x,lig.y,-lig.z)),0.0);\n        float rim = pow(1.0+dot(nor,rd),3.0);\n        float spe = pow(clamp(dot(lig,ref),0.0,1.0),16.0);\n        \n        // shadow\n        float sh = softshadow( pos, lig, 0.06, 4.0, 4.0 );\n        \n        // lights\n        col  = 0.10*con*vec3(0.80,0.90,1.00);\n        col += 0.70*dif*vec3(1.00,0.97,0.85)*vec3(sh, (sh+sh*sh)*0.5, sh*sh );\n        col += 0.15*bac*vec3(1.00,0.97,0.85);\n        col += 0.20*amb*vec3(0.10,0.15,0.20);\n\n        // color\n        vec2 pro;\n        if( tmat.y<1.5 )\n            col *= eggColor(pos,nor,pro);\n        else\n            col *= tableColor(pos,nor,pro);\n        \n        // rim and spec\n        col += 0.60*rim*vec3(1.0,0.97,0.85)*amb*amb;\n        col += 0.60*pow(spe,pro.y)*vec3(1.0)*pro.x*sh;\n        \n        col = 0.3*col + 0.7*sqrt(col);\n    }\n\n\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lssGWn","date":"1367777076","viewed":331,"name":"Easter Egg","username":"nervus","description":"since (orthodox) easter in .ro was on May 5th i thought of trying an easter egg! :)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching"],"hasliked":0,"parentid":"","parentname":""}}