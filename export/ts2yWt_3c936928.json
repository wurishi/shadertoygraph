{"ver":"0.1","info":{"id":"ts2yWt","date":"1588866505","viewed":56,"name":"CIS461: Penumbra Shadows","username":"raykim1996","description":"Penumbra Shadows practice","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cis461"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float FOVY = 3.14159 * 0.25;\nconst int RAY_STEPS = 256;\nconst float PI = 3.14159;\nconst float TWO_PI = 3.14159 * 2.0;\nconst vec3 matteWhite = vec3(0.85, 0.81, 0.78);\nconst vec3 matteRed = vec3(0.63, 0.065, 0.05);\nconst vec3 matteGreen = vec3(0.14, 0.45, 0.091);\nconst vec3 lightPos = vec3(-4.0, 10.5, -10);\nconst float SHADOW_HARDNESS = 6.0;\n\n\n//Intersection\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object; // unique ID for every object\n};    \n\n// Box with side lengths b\nfloat cube(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\n// SquarePlane SDF\nfloat plane(vec3 p, vec4 n)\n{\n    n = normalize(n);\n    return dot(p, n.xyz) + n.w;\n}\n\n// Sphere with radius r at center c\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\n#define BACK_WALL 0\n#define LEFT_WALL 1\n#define RIGHT_WALL 2\n#define FLOOR 3\n#define SPHERE1 4\n#define SHORT_CUBE 5\n#define BIG_CUBE 6\n#define BACK_WALL_SDF plane(pos, vec4(0.0, 0.0, -1.0, 15.0))\n#define LEFT_WALL_SDF plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL_SDF plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING_SDF plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR_SDF plane(pos, vec4(0.0, 1.0, 0.0, 4.0))\n#define SPHERE1_SDF sphere(rotateY(pos, 15.0 * 3.14159 / 180.0), 3.5, vec3(-7.0, 2.0, -1.0))\n#define SHORT_CUBE_SDF cube(rotateY(pos + vec3(-2, 1.5, -0.75), -17.5 * 3.14159 / 180.0), vec3(2.2, 3, 2.2))\n\nvec3 rotateY(vec3 p, float a)\n{\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);   \n}\n\n// function to create whole scene\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = FLOOR_SDF;\n    obj = FLOOR;\n    \n    float t2;\n    if ((t2 = SPHERE1_SDF) < t) {\n        t = t2;\n        obj = SPHERE1;\n    }\n    if ((t2 = SHORT_CUBE_SDF) < t) {\n        t = t2;\n        obj = SHORT_CUBE;\n    }\n}\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = FLOOR_SDF;\n    \n    float t2;\n    if ((t2 = SPHERE1_SDF) < t) {\n        t = t2;\n    }\n    if ((t2 = SHORT_CUBE_SDF) < t) {\n        t = t2;\n    }\n    return t;\n}\n\n\n// Soft Shadow for Penumbra Effect\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for (int i = 0; i < RAY_STEPS; ++i) {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if (m < 0.001) {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 lightVec, vec3 view)\n{\n    switch(hitObj) {\n        case FLOOR:\n        return matteWhite;\n        break;\n        case SPHERE1:\n        return vec3(0.85, 0.41, 0.2);\n        break;\n        case SHORT_CUBE:\n        return vec3(0.1, 0.31, 0.6);\n        break;\n        case -1:\n        return vec3(0, 0, 0);\n        break;\n    }\n    return vec3(0, 0, 0);\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize(vec3(sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                         sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                         sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n    \n    vec3 isect = eye + (t * dir);\n    vec3 nor = computeNormal(isect);\n\n    vec3 lightDir = normalize(lightPos - isect);\n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    vec3 warmDir = rotateY(normalize(lightDir), sin(iTime * 0.25));\n\n    float warmDot = max(0.0, dot(nor, warmDir));\n\n    vec3 overallColor = warmDot * vec3(1.0, 0.88, 0.7) * surfaceColor * softShadow(warmDir, isect, 0.1, SHADOW_HARDNESS);\n    \n    vec3 sdfColor = overallColor;\n\n    return Intersection(t, sdfColor, isect, hitObj);\n}\n\n// Returns direction of ray\nvec3 rayCast(vec3 eye, vec3 ref, vec2 ndc)\n{\n    vec3 F = ref - eye;\n    vec3 R = normalize(cross(vec3(0, 1, 0), F));\n    vec3 U = normalize(cross(R, -F));\n    \n    vec3 V = U * length(F) * tan(FOVY * 0.5);\n    vec3 H = R * length(F) * tan(FOVY * 0.5) * float(iResolution.x) / iResolution.y;\n    \n    vec3 p = ref + ndc.x * H + ndc.y * V;\n    \n    return normalize(p - eye);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Convert range to [-1, 1]\n    uv = uv * 2.0 - vec2(1.0, 1.0);\n    \n    vec3 eye = vec3(9, 5.5, -24);\n    vec3 ref = vec3(-2, 1.5, 0);\n    \n    vec3 rayDir = rayCast(eye, ref, uv);\n    \n    Intersection isect = sdf3D(rayDir, eye);\n    \n    fragColor = vec4(isect.color, 1.0);\n}","name":"Image","description":"","type":"image"}]}