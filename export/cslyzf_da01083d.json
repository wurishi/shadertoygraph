{"ver":"0.1","info":{"id":"cslyzf","date":"1687055432","viewed":87,"name":"Quake Water Effect v2","username":"Xonatron","description":"Same as version 1 -- https://www.shadertoy.com/view/ctKSWD -- except with a \"spectral synthesis\" of multiple layers. Set LAYERS = 1 to see the identical effect of version 1 (only a bit zoomed in).","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["demoscene","quake","mode13h"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Matthew Doucette, Xona Games\n// https://xona.com/\n// Tuesday, June 17th, 2023\n// ----------------------------\n\n// Previous Versions:\n// ------------------\n// https://www.shadertoy.com/view/ctKSWD (version 1)\n\n// Inspiration:\n// ------------\n// Originally coded in Mode 13h (320x200x256),\n// back in my demoscene graphics programming days:\n// https://xona.com/mode13h/\n//\n// My brother, Jason Doucette, also coded it in mode 13h, more optimized:\n// http://jasondoucette.com/graphics.html\n// (see \"Bitmap Plasma Distortion\")\n//\n// Also inspired by my brother's GLSL implementation of it:\n// https://www.shadertoy.com/view/MsKXzD\n\n// Known Issues:\n// -------------\n// Not aspect-ratio independent.\n\n#define PI               3.14159265\n#define TAU              6.28318530718\n#define NUM_WAVES        1.0\n#define DISTORTION_PERC  0.025\n#define LAYERS           6\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalize pixel coordinates (0.0..1.0)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // process multiple \"layers\" of the \"quake water effect\"\n    // (each successive layer has twice the waves and half the movement)\n    float scale = 1.0;\n    for(int i = 1; i <= LAYERS; i++)\n    {\n        // layer 2 - phase 1 - left/right sine wave distortion\n        uv.x += sin(uv.y * TAU * NUM_WAVES * scale + iTime * scale) * DISTORTION_PERC / scale;\n        // layer 2 - phase 2 - up/down sine wave distortion\n        uv.y += sin(uv.x * TAU * NUM_WAVES * scale + iTime * scale) * DISTORTION_PERC / scale;\n\n        scale *= 2.0;\n    }\n\n    // pull texture color (using distorted uv coordinates)\n    vec3 textureCol = texture(iChannel0, uv).xyz;\n    \n    // adjust color to blue (idea from Jason Doucette: https://www.shadertoy.com/view/MsKXzD)\n    textureCol *= vec3(0.25, 0.5, 2.0);\n\n    // output to screen\n    fragColor = vec4(textureCol,1.0);\n}","name":"Image","description":"","type":"image"}]}