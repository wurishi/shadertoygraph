{"ver":"0.1","info":{"id":"WsXcDS","date":"1585422655","viewed":258,"name":"Circle Viz","username":"NPWR","description":"[Epilespy warning]\nSimple music visualizer. Works best with energetic EDM, funk, disco, rock music.\nNot great for deep house.","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["visualizer","trippy","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltj3WR","filepath":"https://soundcloud.com/hijackinggaming/flight-by-tristam-braken-monstercat-release","previewfilepath":"https://soundcloud.com/hijackinggaming/flight-by-tristam-braken-monstercat-release","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float box( in vec2 uv, in vec2 pos, in vec2 size )\n{\n    float x = step(pos.x - size.x, uv.x) * step(uv.x, pos.x + size.x);\n    float y = step(pos.y - size.y, uv.y) * step(uv.y, pos.y + size.y);\n    \n    return x * y;\n}\n\nmat2 rot( in vec2 uv, in float r)\n{\n    float s = sin(r);\n    float c = cos(r);\n\t\n    return mat2(c, s, -s, c); \n}\n        \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 baseColor = vec3(0.5, 0.0, 1.0);\n    \n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.y /= aspect;\n    \n    float rad = .9; // Circle radius\n    float dToCntr = length(uv - vec2(.5, .5/aspect));\n    float cCoord = dToCntr / rad;\n    float cMul = 0.8;\n    \n    if (dToCntr > rad) { cMul = 0.0; }\n    \n    const float nBands = 256.0; //How many bands to show\n    const float bandThickness = .35; //0.5 will make half band, half gap\n    \n    float raw = pow(cCoord, 1.8)*nBands;\n    float i = floor(raw);\n\tfloat bd = raw - i;\n    \n    if (bd > bandThickness) { cMul = 0.3; }\n    \n    \n    \n    \n    float band = i/nBands;\n    float spos = (pow(band, 1.2));\n    \n    float sb = texture(iChannel0, vec2(spos, 0.0)).x; // Blue = high sampling duration\n    float sg = pow(texture(iChannel0, vec2(spos, .6)).x, 1.5);  // Green = low sampling duration\n    float sr = pow(texture(iChannel0, vec2(spos, 0.7)).x, 1.0); // Red = low sampling duration\n                       \n    vec3 s = vec3(sr, sg, sb);\n    \n    s = pow(s, vec3(4.0)); // Increases contrast between loud and quiet\n    if (s.z < 0.05) {s = vec3(0.0);} // Don't show circle at all below threshold\n    \n    fragColor = vec4(s * cMul, 1.0);\n}","name":"Image","description":"","type":"image"}]}