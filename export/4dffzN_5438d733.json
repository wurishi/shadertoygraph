{"ver":"0.1","info":{"id":"4dffzN","date":"1494979668","viewed":967,"name":"7/100","username":"yahe","description":"7/100","likes":28,"published":3,"flags":0,"usePreview":0,"tags":["noise","wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise(in vec2 position) {\n    return fract(sin(dot(position.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Value Noise courtesy of Book of Shaders\n// https://thebookofshaders.com/11/\nfloat noise2d(vec2 uv) {\n    \n    vec2 pos = floor(uv);\n    vec2 fractional = fract(uv);\n    \n    // four corners\n    float a = noise(pos);\t\t\t\t\t// bottom left\n    float b = noise(pos + vec2(1., 0.));\t// bottom right\n    float c = noise(pos + vec2(1., 1.));\t// top right\n    float d = noise(pos + vec2(0., 1.));\t// top left\n    \n    vec2 intermix = smoothstep(0., 1., fractional);\n    \n    float value = mix(a, b, intermix.x);\n    value += (d - a) * intermix.y * (1.0 - intermix.x);\n    value += (c - b) * intermix.x * intermix.y;\n    \n    return value;\n}\n\n// Fractal noise courtesy of iq\n// https://www.shadertoy.com/view/XdXGW8\nfloat fractalNoise2d(vec2 uv) {\n    uv *= 3.0;\n    uv.x -= iTime / 5.0;\n    uv.y += sin(iTime / 5.0) * 2.0;\n    \n    mat2 rotate = mat2(1.6 - sin(iTime / 100.0) / 10.0, 1.2, -1.2, 1.6);\n    \n    float value = 0.5 * noise2d(uv);\n    uv *= rotate;\n    value += 0.25 * noise2d(uv);\n    uv *= rotate;\n    value += 0.125 * noise2d(uv);\n    uv *= rotate;\n    value += 0.0625 * noise2d(uv);\n    \n    return value;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\n    uv.y *= iResolution.y/iResolution.x;\n    \n    // use josemorval paper sheet for reference\n    float dist,dist1,mask,l,final = 1.0;\n\t//This parameter controls how many sheets are in the picture\n    float s = 0.01;\n\t\n    float amp,freq;\n\tuv.y -=iResolution.y/iResolution.x;\n    \n    float value = fractalNoise2d(uv)*5.;\n    \n    //This parameter controls when the algorithm stop drawing sheets (-1 is no sheet, 1 all sheets)\n    float factorSheets = iResolution.y/iResolution.x;\n    \n    for(float f = -iResolution.y/iResolution.x; f < factorSheets; f+=s){\n        uv.y += s;\n        //This parameter controls the frequency of the waves, modulated by an exp along the x-axis \n        freq = 5.0*exp(-10.0*(f*f)) + value*sin(iTime);\n        //This parameter controls the amplitude of the waves, modulated by an exp along the x-axis \n        amp = 0.12*exp(-10.0*(f*f)) + value / 20. *cos(iTime);\n        dist = amp*pow(sin(freq*uv.x + iTime + 100.0),2.0)*exp(-5.0*uv.x*uv.x)-uv.y;\n        mask = 1.0-smoothstep(0.0,0.005,dist);\n\n        //Draw each line of the sheet\n        dist1 = abs(dist);\n        dist1 = smoothstep(0.0,0.01,dist1);\n\t\t\n        final = mix(dist1, -dist1*final,mask);\n\t}\n\n\tfragColor = vec4(final*2.,final,final*uv.y*3., 1.0);\n}","name":"Image","description":"","type":"image"}]}