{"ver":"0.1","info":{"id":"MXdXW7","date":"1719172055","viewed":34,"name":"Unusual tiling","username":"Cotterzz","description":"From facebook post","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math","graph","equations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 u )\n{\n    vec2  G = 10.* u/iResolution.y - 10.,\n          s = sin(G),\n          c = cos(G),\n          r = (2.*s*c).yx/(c*c) - c;\n    \n    float v = r.x*r.y;\n \n    O = vec4( v*v*v, \n              1. - ( abs(v) - 1. ) / min(fwidth(v), 10.) , \n              -v*v*v, \n              1 \n            );\n}\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 guv = (uv*10.0)-10.0;\n    float x = guv.x;\n    float y = guv.y;\n    \n\n    float ys = sin(y);\n    float y2s = sin(2.0*y);\n    float yc = cos(y);\n    float ycc = yc*yc;\n    float yss = ys*ys;\n    \n    float xs = sin(x);\n    float x2s = sin(2.0*x);\n    float xc = cos(x);\n    float xcc = xc*xc;\n    float xss = xs*xs;\n    \n    float result = ((y2s/xcc)-xc)*((x2s/ycc)-yc);\n\n    // Output to screen\n    float blue = result;\n    float red = -result;\n    float green=0.0;\n    if (result>-1.0&&result<1.0) {green=1.0;}\n\n    fragColor = vec4(red*red*red, green ,blue*blue*blue,1.0);\n}\n*/","name":"Image","description":"","type":"image"}]}