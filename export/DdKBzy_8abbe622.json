{"ver":"0.1","info":{"id":"DdKBzy","date":"1698343077","viewed":113,"name":"krajsy island","username":"iffn","description":"by krajsyboys\nThe resulting shape will depend on your graphics card. This is caused by different implementations of transcendental functions such as sin.\nhttps://docs.google.com/spreadsheets/d/1xgawYWYQlfzUGyZgxV9Ug9qwfCCQPKszhYBCimyBqWE","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random","number","generator","accuracy","difference","gpu","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noiseMethod(vec2 uv)\n{\n    float _lacunarity = 2.0; // Noiseness\n    float _gain = 0.5; // Crispyness\n    float _amplitude = 1.5; // How much is does\n    float _frequency = 2.0; // Another kind of scale?\n    float _power = 1.0; // Color sharpness\n\n    int _octaves = 1;\n\n    float _finalValue = 0.0;\n\n    vec2 p = uv;\n\n    //p = p * _scale + vec2(_offsetX,_offsetY);\n\n    float fpA = 127.1; // 127.1\n    float fpB = 311.7; // 311.7\n    float fpC = 269.5; // 269.5\n    float fpD = 183.3; // 183.3\n    float fpE = 43758.5453123; // 43758.5453123\n\n    for( int j = 0; j < _octaves; j++ )\n    {\n        vec2 i = floor( p * _frequency );\n        vec2 f = fract( p * _frequency );      \n        vec2 t = f * f * f * ( f * ( f * 6.0 - 15.0 ) + 10.0 );\n        vec2 a = i + vec2( 0.0, 0.0 );\n        vec2 b = i + vec2( 1.0, 0.0 );\n        vec2 c = i + vec2( 0.0, 1.0 );\n        vec2 d = i + vec2( 1.0, 1.0 );\n        a = -1.0 + 2.0 * fract( sin( vec2( dot( a, vec2( fpA, fpB ) ),dot( a, vec2( fpC, fpD ) ) ) ) * fpE );\n        b = -1.0 + 2.0 * fract( sin( vec2( dot( b, vec2( fpA, fpB ) ),dot( b, vec2( fpC, fpD ) ) ) ) * fpE );\n        c = -1.0 + 2.0 * fract( sin( vec2( dot( c, vec2( fpA, fpB ) ),dot( c, vec2( fpC, fpD ) ) ) ) * fpE );\n        d = -1.0 + 2.0 * fract( sin( vec2( dot( d, vec2( fpA, fpB ) ),dot( d, vec2( fpC, fpD ) ) ) ) * fpE );\n        float A = dot( a, f - vec2( 0.0, 0.0 ) );\n        float B = dot( b, f - vec2( 1.0, 0.0 ) );\n        float C = dot( c, f - vec2( 0.0, 1.0 ) );\n        float D = dot( d, f - vec2( 1.0, 1.0 ) );\n        float noise = ( mix( mix( A, B, t.x ), mix( C, D, t.x ), t.y ) );              \n        _finalValue += _amplitude * noise;\n        _frequency *= _lacunarity;\n        _amplitude *= _gain;\n    }\n    _finalValue = clamp(_finalValue, -1.0, 1.0 );\n    return pow(_finalValue * 0.5 + 0.5, _power);\n}\n\nfloat getFalloff(vec2 uv)\n{\n    float land;\n\n    land = smoothstep(0.2, .5, length(uv - 0.5));\n\n    land = 1.-clamp(land, 0.0, 1.0);\n    return land;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    float ScaleValue = 2.0;\n    float OffsetValue = 100.0;\n    \n    vec4 col = vec4(1.0,1.0,1.0,1.0);\n    \n    // Output to screen\n    float a = noiseMethod(uv*ScaleValue + OffsetValue);\n    \n    float b = getFalloff(uv)*a;\n    \n    col *= b<.5?0.:1.;\n    \n    col += vec4(0.83,0.83,0.83,0) * (sign(uv.x-1.0) * 0.5 + 0.5);\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}