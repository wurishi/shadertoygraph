{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"webcam","id":"4sf3zn","filepath":"/presets/webcam.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"video","id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define pi 3.14159265359\n\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n/////////////////////////////////////\n/////////////////////////////////////\n\nmat2 get_rotation_matirx(float rot) {\n    return mat2(\n        cos(rot), -sin(rot), \n        sin(rot), cos(rot)\n    );\n}\n\nvec2 rotate_uv(vec2 uv, vec3 iResolution, mat2 rotation, float zoom) {\n    uv -= 0.5;\n    uv.x = uv.x * iResolution.x / iResolution.y;\n    uv = rotation * uv;\n    \n    uv *= 1. - zoom;\n    \n    uv.x = uv.x / iResolution.x * iResolution.y;\n    uv += 0.5;\n    uv = abs(uv);\n    uv = step(1., uv) * 2. + sign(1.-uv) * uv;\n    return uv;\n}\n\n/////////////////////////////////////\n/////////////////////////////////////\n\n\n\nconst float rotation_count = 3.;\nconst float speed = 3.;\n// const float diameter = 0.2;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float rotation_ratio = 2. * rotation_count * pi;\n    float time = mod(speed * iTime, 2.*pi) - pi;\n    time *= step(0., time);\n    \n    \n    float diameter = 0.2 + 0.07 * (-(cos(2.*time)-1.)/2.);\n    \n    \n    vec2 uv = (fragCoord/iResolution.x - \n               vec2(0.5, 0.5*iResolution.y/iResolution.x));\n    \n    float rot = rotation_ratio * (-(cos(time)-1.)/2.);\n    bool is_inside = length(uv) < diameter;\n    float zoom = 0.;\n    if (is_inside) {\n        rot *= -1.;\n        // zoom = 0. * (-(cos(2.*time)-1.)/2.);\n    }\n    \n    mat2 rotation = get_rotation_matirx(rot);\n    uv = fragCoord/iResolution.xy;\n    uv = rotate_uv(uv, iResolution, rotation, zoom);\n    \n    bool change_scene = int((speed*iTime+pi/2.)/(2.*pi)) % 2 == 0;\n    vec3 col = (change_scene) \n        ? texture(iChannel0, uv).rgb \n        : texture(iChannel1, uv).rgb;\n    \n    \n    //////////////////////////\n    ///    Spining blur    ///\n    //////////////////////////\n    \n    float numSteps = float(int(15. * (-(cos(2.*time)-1.)/2.)));\n    float sigma = 0.01;\n    for (float i=1.; i<numSteps; i++)\n    {\n        rotation = get_rotation_matirx(i*sigma);\n        uv = rotate_uv(uv, iResolution, rotation, zoom);\n        col += (change_scene) \n            ? texture(iChannel0, uv).rgb \n            : texture(iChannel1, uv).rgb;\n    }\n    if (numSteps != 0.)\n        col /= numSteps;\n    \n    //////////////////////////\n    //////////////////////////\n    \n    if (!is_inside) {\n        vec3 hsv = rgb2hsv(col);\n        hsv.g *= 1. - (-(cos(2.*time)-1.)/2.);\n        col = hsv2rgb(hsv);\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":true,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"3dVcDV","date":"1734427095","viewed":26,"name":"Transition.CircleSpin.No.1","username":"avartation","description":"zdckjhb","likes":1,"published":1,"flags":2,"usePreview":0,"tags":["sdjkb"],"hasliked":0,"parentid":"","parentname":""}}