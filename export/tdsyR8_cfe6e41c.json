{"ver":"0.1","info":{"id":"tdsyR8","date":"1584218128","viewed":101,"name":"cs180 Dream Team Final Project","username":"mopo4546","description":"first shader for final project","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\nfloat fbm(vec2 x) {\n\tfloat t = 0.0;\n    float c = 2.0;\n    for( int i=0; i<10; i++ )\n    {\n        float f = pow( 2.0, float(i)/iTime );\n        t += noise(f*x)/c;\n    \tc *= 2.0;\n    }\n    return t;\n}\nfloat circle(vec2 pos) {\n\treturn length(pos) - 1.0;\n}\nfloat getcircle(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\nfloat Circle(vec2 uv,vec2 pos, float r, float blur){\n    float d= length(uv-pos);\n float c=smoothstep(r, r-blur,d);\n    return c;\n}\nfloat band(float t , float start,float end ,float blur){\n float st1= smoothstep(start-blur, start+ blur,t);\n    float st2 = smoothstep(end+blur, end-blur, t);\n    return st1*st2;\n} \nfloat Rectangle(vec2 uv, float left, float right, float bot, float top, float blur){\n    float b1= band(uv.x, left,right, blur);\n    float b2= band(uv.y, bot, \ttop,   blur);\n    return b1*b2;\n}\nfloat Smiley (vec2 uv ,vec2 pos , float size){\n    uv-=pos;\n    uv /=size;\n    float mask = Circle(uv, vec2(0), .4,0.01);\n     mask -= Circle(uv, vec2(.11,.1), .07,0.001);\n     mask -= Circle(uv, vec2(-.11,.1), .07,0.001);\n    float mouth = Circle(uv, vec2(0), .3,0.02);\n    mouth -= Circle(uv, vec2(0,.1), .3,0.02);\n    mask -= mouth;\n    return mask;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    float t = iTime*.2;\n    //camera\n    vec3 ro = vec3(0,0,-1);\n    vec3 look = vec3(0);\n    float zoom = mix(.4, .9, sin(3.*t)*.5+.5) ;\n    vec3 f = normalize(look - ro),\n        r = normalize(cross(vec3(0,1,1), f)),\n        u = cross(f,r),\n        c = ro + f*zoom,\n        i = c + uv.x*r + uv.y*u,\n        rd = normalize(i-ro);\n    float dSurf, d0rigin;\n    vec3 pos;\n    for(int i = 0; i < 90; i++)\n    {\n        pos = ro + rd*d0rigin;\n        //pos *= sin(fbm(pos.xy));\n        dSurf = -(length(vec2(length(pos.xz) - 1., pos.y)) - .75);\n        if(dSurf < 0.001) break;\n        d0rigin += dSurf;\n    }\n    // Time varying pixel color\n    vec3 col = vec3(0);\n    if(dSurf < .001){\n        float x = atan(pos.x,pos.z)+t*.5;\n        float y = atan(length(pos.xz) - 1., pos.y);\n        float bands =sin(y*10.+x*30.);\n        float ripples =sin((x*10.-y*30.)*3.)*.5+.5;\n        float waves =sin(x*2.*fbm(pos.xy)-y*6.*fbm(pos.xy)+t*20.);                      \n        float b1 = smoothstep(-.2,.2,bands);\n        float b2 = smoothstep(-.2,.2,bands-.5);\n        float m = b1*(1.-b2);\n        m = max(m, ripples*b2*max(0.,waves));\n        m+= max(0., waves*.3*b2);\n        float mask ;\n        float t = iTime;\n        vec2 p = vec2(.6*sin(.5*t),.2*cos(.5*t));\n        vec2 p1 = -p;\n        vec2 p2 = vec2(.9*sin(.5*t),.5*cos(.5*t));\n        vec2 p3 = -p2;\n        vec2 p4 = vec2(.4*sin(.5*t),.1*cos(.5*t));\n        vec2 p5 = -p4;\n        vec2 p6 = vec2(.2*sin(.5*t),.7*cos(.5*t));\n        vec2 p7 = -p6;\n        vec2 p8 = vec2(.3*sin(.5*t),.4*cos(.5*t));\n        vec2 p9 = -p8;\n        vec2 p10 = vec2(.5*sin(.5*t),.5*cos(.5*t));\n        vec2 p11 = -p10;\n        vec2 p12 = vec2(.25*sin(t),.25*cos(t));\n        vec2 p13 = -p12;\n        mask-=Smiley(uv, p,.2);\n       \tmask-=Smiley(uv, p1,.2);\n        mask-=Smiley(uv, p2,.2);\n       \tmask-=Smiley(uv, p3,.2);\n         mask-=Smiley(uv, p4,.2);\n       \tmask-=Smiley(uv, p5,.2);\n         mask-=Smiley(uv, p6,.2);\n       \tmask-=Smiley(uv, p7,.2);\n         mask-=Smiley(uv, p8,.2);\n       \tmask-=Smiley(uv, p9,.2);\n         mask-=Smiley(uv, p10,.2);\n       \tmask-=Smiley(uv, p11,.2);\n         mask-=Smiley(uv, p12,.2);\n       \tmask-=Smiley(uv, p13,.2);\n        mask -= Rectangle(uv,-1.,1.,-1.,-.45,.009);\n  \tmask -= Rectangle(uv,.83,1.,-1.,1.,.009);\n    mask -= Rectangle(uv,-1.,1.,.45,1.,.009);\n    mask -= Rectangle(uv,-1.,-.83,-.5,.5,.009); \n                        col = vec3(0,1,0.)*mask;\n                        col = col+ mix(m, 1.-m, smoothstep(-.3, .3, sin(x*2.+t)));\n                    }\n    float scale = 500.;\n    float radius = 0.1;\n    float intensity = 1.0;\n    vec2 p = vec2(0.5,0.5);\n    float dist;\n    float glow;\n    float depth;\n    vec3 green = vec3(0.133, 0.62, 0.698);  \n    for(float i = 0.0; i <10.; i++){\n        depth = fract(i/10. +iTime*0.04);\t\n        p =  vec2(0.,0.)-uv ;\n    \tp *= mix(scale, 0.0, depth);\n       dist = abs(circle(p));  \n        float  mask = -Smiley(uv, p,2.);\n         col += vec3(0,1,0.)*mask;\n    \tglow = getcircle(dist, radius+(1.0-depth)*2.0, intensity + depth);\n     \tcol += glow * col;\n\t}\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}