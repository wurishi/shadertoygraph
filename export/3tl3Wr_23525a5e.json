{"ver":"0.1","info":{"id":"3tl3Wr","date":"1556070733","viewed":122,"name":"Torus attack","username":"Domenicobrz","description":"sketch","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float reptorus(vec3 p, vec2 t) {\n    \n      float tr = 25.0;\n      float htr = tr * 0.5;\n      float px = mod(p.x + htr, tr) - htr;\n      float py = mod(p.y + htr, tr) - htr;\n      float pz = mod(p.z + htr, tr) - htr;\n    \n      p = vec3(px, py, pz);       \n      \n      \n  \t  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  \t  return length(q)-t.y;\n}\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nfloat trace(vec3 p) {\n    float d = 99999.0;\n    \n    \n    float s1 = reptorus(vec3(p) * mat3(rotationMatrix(vec3(1.0, sin(iTime), 0.0), iTime + p.z * 0.001)), vec2(3.0, 1.0));\n    if(s1 < d) d = s1;\n    \n\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n\n\n    vec3 ro = vec3(0.0 + sin(iTime) * 10.0, 0.0, -15.0);\n    vec3 rd = normalize(vec3(uv, 2.0)); \n    \n   \n    vec3 lightDir = vec3(1.0, -1.0, 1.0);\n    \n    \n    vec3 p = ro;\n    float d = 0.0;\n    for(int i = 0; i < 100; i++) {\n        p += rd * d;\n        d = trace(p);\n       \n        if(d < 0.001) {\n            \n            float epsilon = 0.001;\n            \n            float px = trace(p + vec3(+epsilon, 0.0, 0.0));\n            float nx = trace(p + vec3(-epsilon, 0.0, 0.0));\n            \n            float py = trace(p + vec3(0.0, +epsilon, 0.0));\n            float ny = trace(p + vec3(0.0, -epsilon, 0.0));\n            \n            float pz = trace(p + vec3(0.0, 0.0, +epsilon));\n            float nz = trace(p + vec3(0.0, 0.0, -epsilon));\n            \n            vec3 n = normalize(vec3(px - nx, py - ny, pz - nz));\n            \n                               \n            float diffuse = max(  dot(n, -lightDir)  , 0.0);\n            vec3 surfaceColor = vec3(1.0);                   \n                       \n            \n            fragColor = vec4(surfaceColor * diffuse, 1.0);\n            return;\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}