{"ver":"0.1","info":{"id":"tdfXRj","date":"1551662126","viewed":255,"name":"Diablo Orb 2","username":"Ion824","description":"My second iteration on diablo 3 health/resource orbs.\nInspired by: https://www.shadertoy.com/view/llcSRf\nAmazing noise from: https://www.shadertoy.com/view/4sc3z2\nBackground warp effect: http://iquilezles.org/articles/warp/warp.htm","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["orb","multitexture","diablo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Ion Ureche\n// Year: 2019\n\nstruct Orb{\n    float value;\n    vec2 center;\n    float radius;\n    vec3 colour0;\n    vec3 colour1;\n    vec3 colour2;\n};\n    \nstruct Light{\n\tvec3 pos;\n};\n    \nfloat isColoured(in vec2 uv, in Orb orb){\n    float orbBottom = orb.center.y - orb.radius;\n    float level = orbBottom + orb.value * orb.radius * 2.;\n    \n    if (distance(uv,orb.center) < orb.radius && (uv.y < level)) {\n        if (uv.y / level > .99){\n        \tfloat textVar = texture(iChannel0, uv).x;\n            if (textVar < .3){\n                return 0.;\n            }\n            return textVar;\n        }\n\t\treturn 1.;\n    }\n\treturn 0.;\n}\n    \nvec3 getColour(in vec2 uv, in Orb orb){\n    vec3 colour = vec3(0.);\n    float borderDist = orb.radius - distance(uv, orb.center);\n    float intensity = isColoured(uv, orb);\n\tif (intensity != 0.){\n        // uv mapping: \n        // https://en.wikipedia.org/wiki/UV_mapping#Finding_UV_on_a_sphere\n        vec2 distFromCent = uv - orb.center;\n        float uvHeight = exp(sqrt(orb.radius - (pow(distFromCent.x,2.) + pow(distFromCent.y,2.))) \n            / orb.radius) / exp(1.);\n        vec3 d = normalize(vec3(orb.center, 0.) - vec3(uv, uvHeight));        \n        float u = (.5 + atan(d.z, d.x)\n            \t\t\t/ (2. * 3.14159)) / orb.radius / .5;\n        float v = (.5 - asin(d.y) / 3.14159) / orb.radius / .5;\n        \n        float s0 = 4.0;\n        float s1 = 5.0;\n        float s2 = 6.0;\n        \n        vec3 coord0 = vec3(u * s0 + 3.0 * iTime * 0.022, v * s0 + 3.0 * iTime * -0.03, 0.0f);\n        vec3 coord1 = vec3(u * s1 + 2.2 * iTime * -0.032, v * s1 + 2.2 * iTime * -.05, 1.0);\n        vec3 coord2 = vec3(u * s2 - 2.2 * iTime * 0.1, v * s2 - 2.2 * iTime * 0.08, 2.0);\n        \n        colour =  vec3(noise_sum(coord0)) * orb.colour0 * 0.75;\n        colour += vec3(noise_sum(coord1)) * orb.colour1 * 0.53;\n        colour += vec3(noise_sum(coord2)) * orb.colour2 * 0.27;\n\n        // border darkening\n        colour /= pow(2.71, orb.radius * .06 / borderDist);\n    }\n    \n    return colour;\n}\n\n// Add in a bevelled border\nvec3 applyBorder(in vec2 uv, in Orb orb, vec3 currentColour){\n    vec3 colour = currentColour;\n    float borderDist = orb.radius - distance(uv, orb.center);\n\t// Add in a bevelled border\n    if (abs(borderDist) < .005) {\n        colour = vec3(0.3,0.3,0.3);\n        colour += vec3(.7 - abs(borderDist)/.005) * .25;\n    }\n    return colour;\n}\n\n// Apply a specular highlight\n// https://en.wikibooks.org/wiki/GLSL_Programming/GLUT/Specular_Highlights\nvec3 applyHighlight(in vec2 uv, in Orb orb, in Light light, in vec3 eye){\n    vec3 colour = vec3(0.);\n    if (distance(orb.center, uv) >= orb.radius){\n        return colour;\n     }\n    \n    vec2 distFromCent = uv - orb.center;    \n    float uvHeight = sqrt(orb.radius - (pow(distFromCent.x,2.) + pow(distFromCent.y,2.)));\n    vec3 uvw = vec3(uv, uvHeight);\n    vec3 normal = normalize(vec3(uv, uvHeight) - vec3(orb.center, 0.));\n    //return normal;\n    vec3 orbToLight = normalize(light.pos - vec3(orb.center, 0.));\n    \n    return vec3(pow(dot(reflect(normalize(uvw - light.pos),\n                                normal),\n                        normalize(eye - uvw)),\n                    55.));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.x;\n    vec3 view = vec3(9., -2., 10.);\n    \n    Light l1 = Light(vec3(0.5,.7, 1.));\n    // Set up the orbs\n    Orb orb1 = Orb(1.0,\n                     vec2(.5, .28),\n                     .27,\n                     vec3(.57, 0., 0.0),\n                     vec3(.856429, 0.05, 0.0),\n                     vec3(.809524, 0.589429, 0.0));\n    \n    Orb orb2 = Orb(1.0,\n                   vec2(.87, 0.12),\n                   .1,\n                   vec3(0.2, 0.6, .97),\n                   vec3(.27, 0.7, 0.89),\n                   vec3(.37, 0.3, 0.91));\n    \n    Orb orb3 = Orb(1.0,\n                   vec2(.13, 0.12),\n                   .1,\n                   vec3(0.4, 0.8, .17),\n                   vec3(.27, 0.99, 0.13),\n                   vec3(.37, 0.8, 0.91));\n    \n    Orb orb4 = Orb(1.0,\n                   vec2(.13, 0.44),\n                   .1,\n                   vec3(0.9, 0.8, .47),\n                   vec3(.97, 0.99, 0.33),\n                   vec3(.77, 0.8, 0.71));\n    \n    Orb orb5 = Orb(1.0,\n                   vec2(.87, 0.44),\n                   .1,\n                   vec3(0.8, 0.0, .85),\n                   vec3(.95, 0.3, 0.83),\n                   vec3(.6, 0.14, 0.91));\n    \n    \n    // background domain warping noise\n    vec3 pos = vec3(uv, iTime * SPEED * 0.1);\n    float noi = pattern(pos);\n    fragColor = vec4(noi * 0.5, noi * 0.25, noi*0.5, 1.0f);  \n    \n    vec3 redOrb = vec3(getColour(uv, orb1));\n    if (redOrb.x > 0.0){\n        fragColor = vec4(redOrb, 1.);\n    }\n  \tfragColor = vec4(applyBorder(uv, orb1, fragColor.xyz), 1.);  \n    \n    vec3 blueOrb = vec3(getColour(uv, orb2));\n    if (blueOrb.z > 0.0){\n        fragColor = vec4(blueOrb, 1.);        \n    }\n    \n    fragColor = vec4(applyBorder(uv, orb2, fragColor.xyz), 1.);        \n    \n    vec3 greenOrb = vec3(getColour(uv, orb3));\n    if (greenOrb.z > 0.0){\n        fragColor = vec4(greenOrb, 1.);        \n    }\n    fragColor = vec4(applyBorder(uv, orb3, fragColor.xyz), 1.);\n    \n    vec3 yellowOrb = vec3(getColour(uv, orb4));\n    if (yellowOrb.z > 0.0){\n        fragColor = vec4(yellowOrb, 1.);        \n    }\n    fragColor = vec4(applyBorder(uv, orb4, fragColor.xyz), 1.);  \n    \n    vec3 violetOrb = vec3(getColour(uv, orb5));\n    if (violetOrb.z > 0.0){\n        fragColor = vec4(violetOrb, 1.);        \n    }\n    fragColor = vec4(applyBorder(uv, orb5, fragColor.xyz), 1.);  \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define e 2.71\n#define NUM_NOISE_OCTAVES 5\n#define SPEED 0.05\n//#define Use_Perlin\n//#define Use_Value\n#define Use_Simplex\n\n// ========= Hash ===========\n\nvec3 hashOld33(vec3 p)\n{   \n\tp = vec3( dot(p,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(p,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(p,vec3(113.5,271.9,124.6)));\n    \n    return -1.0 + 2.0 * fract(sin(p)*43758.5453123);\n}\n\nfloat hashOld31(vec3 p)\n{\n    float h = dot(p,vec3(127.1,311.7, 74.7));\n    \n    return -1.0 + 2.0 * fract(sin(h)*43758.5453123);\n}\n\n// Grab from https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(.1031,.11369,.13787)\n//#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash31(vec3 p3)\n{\n\tp3  = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return -1.0 + 2.0 * fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\n// ========= Noise ===========\n\nfloat value_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n        \t\t\tmix(hash31(pi + vec3(0, 0, 0)), hash31(pi + vec3(1, 0, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 0, 1)), hash31(pi + vec3(1, 0, 1)), w.x), \n                    w.z),\n        \t\tmix(\n                    mix(hash31(pi + vec3(0, 1, 0)), hash31(pi + vec3(1, 1, 0)), w.x),\n        \t\t\tmix(hash31(pi + vec3(0, 1, 1)), hash31(pi + vec3(1, 1, 1)), w.x), \n                    w.z),\n        \t\tw.y);\n}\n\nfloat perlin_noise(vec3 p)\n{\n    vec3 pi = floor(p);\n    vec3 pf = p - pi;\n    \n    vec3 w = pf * pf * (3.0 - 2.0 * pf);\n    \n    return \tmix(\n        \t\tmix(\n                \tmix(dot(pf - vec3(0, 0, 0), hash33(pi + vec3(0, 0, 0))), \n                        dot(pf - vec3(1, 0, 0), hash33(pi + vec3(1, 0, 0))),\n                       \tw.x),\n                \tmix(dot(pf - vec3(0, 0, 1), hash33(pi + vec3(0, 0, 1))), \n                        dot(pf - vec3(1, 0, 1), hash33(pi + vec3(1, 0, 1))),\n                       \tw.x),\n                \tw.z),\n        \t\tmix(\n                    mix(dot(pf - vec3(0, 1, 0), hash33(pi + vec3(0, 1, 0))), \n                        dot(pf - vec3(1, 1, 0), hash33(pi + vec3(1, 1, 0))),\n                       \tw.x),\n                   \tmix(dot(pf - vec3(0, 1, 1), hash33(pi + vec3(0, 1, 1))), \n                        dot(pf - vec3(1, 1, 1), hash33(pi + vec3(1, 1, 1))),\n                       \tw.x),\n                \tw.z),\n    \t\t\tw.y);\n}\n\nfloat simplex_noise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    // thx nikita: https://www.shadertoy.com/view/XsX3zB\n    vec3 w = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = w * (1.0 - w.zxy);\n\tvec3 i2 = 1.0 - w.zxy * (1.0 - w);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat noise(vec3 p) {\n#ifdef Use_Perlin\n    return perlin_noise(p * 2.0);\n#elif defined Use_Value\n    return value_noise(p * 2.0);\n#elif defined Use_Simplex\n    return simplex_noise(p);\n#endif\n    \n    return 0.0;\n}\n\n// ========== Different function ==========\n\nfloat noise_itself(vec3 p)\n{\n    return noise(p * 8.0);\n}\n\nfloat noise_sum(vec3 p)\n{\n    float f = 0.0;\n    p = p * 4.0;\n    f += 1.0000 * noise(p); p = 2.0 * p;\n    f += 0.5000 * noise(p); p = 2.0 * p;\n\tf += 0.2500 * noise(p); p = 2.0 * p;\n\tf += 0.1250 * noise(p); p = 2.0 * p;\n\tf += 0.0625 * noise(p); p = 2.0 * p;\n    \n    return f / 1.9375 * 0.5 + 0.5;\n}\n\n// ============ fbm magic ================\nfloat pattern( in vec3 p )\n{\n      vec3 q = vec3( noise_sum( p + vec3(0.0,0.0,0.0) ),\n                     noise_sum( p + vec3(5.2,1.3,0.0) ), p.z );\n\n      vec3 r = vec3( noise_sum( p + 1.0*q + vec3(1.7,9.2,0.0) ),\n                     noise_sum( p + 1.0*q + vec3(8.3,2.8,0.0) ),  p.z);\n\n      return noise_sum( p + 4.0*r );\n}","name":"Common","description":"","type":"common"}]}