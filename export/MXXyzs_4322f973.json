{"ver":"0.1","info":{"id":"MXXyzs","date":"1726558694","viewed":12,"name":"antonkrynitsyn_002","username":"antonkrynitsyn","description":"test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"l3fczl","parentname":"antonkrynitsyn_001"},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2[] points = vec2[](\n    vec2(0.1, 0.5),\n    vec2(0.3, 0.7),\n    vec2(0.5, 0.9),\n    vec2(0.7, 0.5),\n    vec2(0.9, 0.9)\n);\nfloat[] speeds = float[](\n    1.0,\n    0.4,\n    0.5,\n    0.3,\n    0.2\n);\nvec4[] colors = vec4[](\n    vec4(0.74, 0.93, 0.37, 1.0),\n    vec4(0.37, 0.93, 0.81, 1.0),\n    vec4(0.93, 0.37, 0.44, 1.0),\n    vec4(0.93, 0.79, 0.37, 1.0),\n    vec4(0.8, 0.37, 0.93, 1.0)\n);\n\nfloat speedCoef = 0.4;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float color = 0.0;\n    float minColor = 0.0;\n    float maxColor = 0.0;\n    vec4 color1;\n    \n    float bitSpeedCoef = 0.2;\n    //float bitCoef = max(0.0, sin(iTime*10.0*bitSpeedCoef) - 0.6) * 2.5;\n    //float bitCoef = 1.0;\n    \n    \n    for (int i = 0; i < points.length(); i++) {\n        float bitCoef  = texture( iChannel0, vec2(float(i), 0.0) ).x;\n        vec2 point = points[i];\n        float speed = bitCoef*0.3;\n        vec4 g = colors[i];\n        float m = sin(iTime);\n        vec2 pointMoved1 = point + vec2(sin(iTime)*speed, 0.0);\n        vec2 pointMoved = mix(vec2(0.3, 0.3), vec2(0.7, 0.7), pointMoved1);\n        vec2 pointInPixels = pointMoved * iResolution.xy;\n        float dist = distance(pointInPixels, fragCoord);\n        float minSide = min(iResolution.x, iResolution.y);\n        float circleRadius = minSide * (0.20 + bitCoef*0.2);\n\n        bool isInsideCircle = dist < circleRadius;\n\n\n        vec4 black = vec4(0.0, 0.0, 0.0 ,1.0);\n\n        if (isInsideCircle) {\n            float distRelative = dist / circleRadius;\n            float segment = 0.7;\n            if (distRelative < segment) {\n                float a = distRelative / segment;\n                float b = -1.0 * pow(a, 1.2)+ 1.0;\n\n                vec4 col = vec4(b, b, b, 1.0);\n                colors[i] += b;\n                \n                minColor = min(b, minColor);\n                maxColor = max(b, maxColor);\n                if (b > color) {\n                    //color += b;\n                    color = b;\n                    color1 = g;\n                }\n             \n            } else {\n            }\n            \n        } else {\n\n        }\n    }\n    float n = maxColor;\n    float b = clamp(n, 0.0, 1.0);\n    vec4 h = color1 * b;\n    fragColor = vec4(h.xyz, 1.0);\n     \n\n    // Output to screen  \n}\n\n","name":"Image","description":"","type":"image"}]}