{"ver":"0.1","info":{"id":"wllcD2","date":"1593176684","viewed":179,"name":"It is frosting out there","username":"Iranon","description":"A variation of the precedent shader.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fbm","domainwarping","frost"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n=== VARIATION OF\n\thttps://www.shadertoy.com/view/WtsyW2 ===\n\nMain references and functions from https://thebookofshaders.com/13/ and https://iquilezles.org/articles/warp\n\nCode structure from Low Pattern(https://www.shadertoy.com/view/WlsyWj)\n\n*/\n\n\n\n\n//2D Random and Noise functions\n\nfloat rand(in vec2 sd) {\n    \n    return fract( sin( dot( sd.xy, vec2(9.128, 3.256) * 293699.963 ) ) );\n}\n\n\nfloat n2D(in vec2 sd) {\n    \n    vec2 iComp = floor(sd);\n    \t\t\t\t\t\t//integer and fractional components\n    vec2 fComp = fract(sd);\n    \n    \n    float a = rand(iComp + vec2(0.0, 0.0));\t//\n    float b = rand(iComp + vec2(1.0, 0.0));\t// interpolation points\n    float c = rand(iComp + vec2(0.0, 1.0));\t// (4 corners)\n    float d = rand(iComp + vec2(1.0, 1.0));\t//\n    \n    vec2 fac = smoothstep(0.0, 1.0, fComp);\t//interpolation factor\n    \n    //Quad corners interpolation\n    return\n        mix(a, b, fac.x) +\n        \n        \t(c - a) * fac.y * (1.0 - fac.x) +\n        \n        \t\t(d - b) * fac.x * fac.y ;\n}\n\n\n\n//fractal Brownian Motion and Motion Pattern\n\n#define OCTAVES 6\n\nfloat fBM(in vec2 sd) {\n    \n    //init values\n    float val = 0.0;\n    float freq = 1.0;\n    float amp = 0.5;\n    \n    float lacunarity = 2.0;\n    float gain = 0.5;\n    \n    //Octaves iterations\n    for(int i = 0; i < OCTAVES; i++) {\n        \n        val += amp * n2D(sd * freq);\n        \n        freq *= lacunarity;\n        amp *= gain;\n    }\n    \n    return val;\n}\n\n\nfloat mp(in vec2 p) {\n    \n    float qx = fBM(p + vec2(0.0, 0.0));\n    float qy = fBM(p + vec2(6.8, 2.4));\n    \n    vec2 q = vec2(qy,qx);\n    \n    float tm = 0.008 * iTime * 1.3;\t//time factor\n    \n    float rx = fBM(p + (1.1 * tm*1.2) * q + vec2(9.5, 9.3) * tm);\n    float ry = fBM(p + (18.5 * tm/1.3) * q + vec2(7.2, 1.5) * -(tm + 0.002));\n    \n    vec2 r = vec2(rx, ry);\n    \n    return fBM(p + (2.0 * r));\n}\n\n\n//From https://www.shadertoy.com/view/XlKSDR\nvec3 Tonemap_ACES(const vec3 t) {\n    // Narkowicz 2015, \"ACES Filmic Tone Mapping Curve\"\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return (t * (a * t + b)) / (t * (c * t + d) + e);\n}\n\n\n\n//========================================================================\n\n//main()\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n    \n    vec3 col = vec3(0.0);\n    //col += fBM(uv*3.0);\n    \n    vec3 mask = texture(iChannel0, uv).rgb;\n    \n    float wFac = mp(uv*3.0); //warping factor\n   \n    col = mix(vec3(0.101961, 0.29608, 0.26567), vec3(0.66667,0.45667,0.89839), clamp(pow(wFac, 2.5), 0.0, 1.0));\n    col = mix(col, vec3(0.24467,0.00567,0.19809), clamp(pow(wFac, 0.4), 0.0, 1.0));\n    col = mix(col, vec3(0.32467,0.22567,0.31809), clamp(wFac * wFac, 0.0, 1.0));\n    col = mix(col, vec3(0.64467,0.32567,0.13809), clamp(smoothstep(0.0, 1.0, wFac), 0.0, 1.0));\n    \n    vec3 bg = mix(col, vec3(0.00467,0.32567,0.93809), clamp(smoothstep(0.0, 1.0, wFac), 0.0, 1.0));\n    bg = mix(bg, vec3(0.12467,0.92567,0.61809), clamp(wFac * wFac, 0.0, 1.0)) * 1.4;\n    \n    \n    col = mix(bg, col, mask);\n    //col = Tonemap_ACES(col);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}