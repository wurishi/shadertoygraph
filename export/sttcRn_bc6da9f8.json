{"ver":"0.1","info":{"id":"sttcRn","date":"1659148204","viewed":116,"name":"fk","username":"DarkCat5501","description":"don't look","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarchingexperiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 sdSpereVoxels(vec3 p)\n{\n  vec3 ap = ceil(p+7.);\n  vec3 idx = ceil(ap);\n  float n = texture(iChannel0,idx/16.).x;\n  float vxo = float(n>=0.7);\n \n  vec3 fp = abs(p)-8.0*(0.1+(sin(iTime)*.5+.5));\n  vec3 fp2 = abs(fp)-4.0*(1.+cos(iTime+123.123));\n  vec3 fp3 = abs(fp2)-2.0*(0.5+sin(iTime+128.36)*.5+.5);\n  //vec3 fp4 = abs(fp3)-1.;\n  //vec3 q = abs(fp3)-2.*vxo;\n  vec3 q = abs(fp3)-1.0;\n  \n  float d = length(q) - 0.5*n;\n  //float d = length(max(q,0.)) + min(max(q.x,max(q.y,q.z)),0.);\n  \n  return vec4(d,normalize(p));\n}\n\nvec4 map( in vec3 pos )\n{\n   return sdSpereVoxels(pos);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ).x );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.8*iTime;\n\tvec3 ro = vec3( 20.0*sin(an), 10.0, -20.0*cos(an) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        #else    \n        vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n        #endif\n\n\t    // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 100.0;\n        float t = 0.0;\n        vec3 color = vec3(0);\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            vec4 h = map(pos);\n            if( h.x<0.0001 || t>tmax ){\n                color = h.yzw;\n                break;\n            }\n            t += h.x;\n        }\n        \n \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        \n        }\n        \n        col *= color;\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}