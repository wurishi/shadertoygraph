{"ver":"0.1","info":{"id":"4l2GDc","date":"1433185188","viewed":215,"name":"basic voronoi","username":"flyingcarskill","description":"Teaching myself how to write a voronoi shader from Inigo Quilez's articles","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// I totally stole this algorithm from iq, who has the simplest GLSL-optimized voronoi algo\n// I'm sure he's already implemented this here, and I'm not trying to take credit for it, since I'm experimenting\n// link: https://iquilezles.org/articles/smoothvoronoi\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat voronoi(vec2 coord)\n{\n    vec2 coordInt = floor(coord);\n    vec2 coordFraction = fract(coord);\n    \n\tfloat result = 8.0;\n    for (int i = -1; i <= 1; i++)\n    \tfor (int j = -1; j <= 1; j++)\n        {\n         \tvec2 cellPoint = vec2(float(i), float(j));\n            \n            float offset = rand(coordInt + cellPoint);\n            offset = 0.5 + 0.5*sin( iTime + 6.2831*offset );\n            \n            vec2 randomPoint = cellPoint + offset - coordFraction;\n            float d = dot(randomPoint, randomPoint);\n            \n            result = min(result, d);\n            \n        } \n    return (sqrt(result));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float color = voronoi(8.0 * uv);\n    fragColor = vec4(vec3(0.5 * color, 1.5 * color, 0.5 * color), 1.0);\n}\n    \n\n    \n\t","name":"","description":"","type":"image"}]}