{"ver":"0.1","info":{"id":"NtsXz2","date":"1626097216","viewed":55,"name":"MRR_Smiley","username":"MiguelRodRic","description":"Simple shapes using basic geometry","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circle","rectangle","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Circle(vec2 uv, vec2 pos, float r, float blurAmount)\n{\n    vec2 origin = uv - pos;\n    float d = length(origin);\n    \n    //Not smooth\n    //float c = step(d, r);\n    \n    //Smooth\n    float c = smoothstep(r, r - blurAmount, d);\n    \n    return c;\n}\n\nfloat SemiCircle(vec2 uv, vec2 pos, float r, float blurAmount, float top)\n{\n    vec2 origin = uv - pos;\n    float d = length(origin);\n    \n    //Not smooth\n    //float c = step(d, r);\n    \n    //Smooth\n    float c = smoothstep(r, r - blurAmount, d);\n    \n    c = step(origin.y, 0.0 - top) * c;\n    \n    return c;\n}\n\nfloat Rectangle(vec2 pos, vec2 horizontalEdges, vec2 verticalEdges, float blurAmount)\n{\n    //not smooth\n    //float w = step(horizontalEdges.x, pos.x) * step(pos.x, horizontalEdges.y);\n    //float h = step(verticalEdges.x, pos.y) * step(pos.y, verticalEdges.y);\n    \n    //smooth\n    float w1 = smoothstep(horizontalEdges.x - blurAmount, horizontalEdges.x + blurAmount, pos.x);\n    float w2 = smoothstep(horizontalEdges.y + blurAmount, horizontalEdges.y - blurAmount, pos.x);\n    float w = w1 * w2;\n    \n    float h1 = smoothstep(verticalEdges.x - blurAmount, verticalEdges.x + blurAmount, pos.y);\n    float h2 = smoothstep(verticalEdges.y + blurAmount, verticalEdges.y - blurAmount, pos.y);\n    float h = h1 * h2;\n    \n    return h * w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= vec2(0.5);\n    uv.x *= iResolution.x / iResolution.y;\n   \n    float circle = Circle(uv, vec2(0.0), 0.4, 0.02);\n       \n    //Random Holes\n    //float circleHole1 = Circle(uv, vec2(0.0, 0.2), 0.1, 0.01);\n    //float circleHole2 = Circle(uv, vec2(0.0, -0.2), 0.1, 0.01);\n    //float circleHole3 = Circle(uv, vec2(0.2, 0.0), 0.1, 0.01);\n    //float circleHole4 = Circle(uv, vec2(-0.2, 0.0), 0.1, 0.01);\n    \n    //circle -= circleHole1;\n    //circle -= circleHole2;\n    //circle -= circleHole3;\n    //circle -= circleHole4;\n    \n    //Face\n    float eye1 = Circle(uv, vec2(0.15, 0.18), 0.1, 0.01);\n    float eye2 = Circle(uv, vec2(-0.15, 0.18), 0.1, 0.01);\n    \n    circle -= eye1;\n    circle -= eye2;\n    \n    float face = circle;\n    \n    //Smile using circles\n    float mouthHole = SemiCircle(uv, vec2(0.0, -0.05), 0.3, 0.01, 0.1);\n    float mouthMask = SemiCircle(uv, vec2(0.0, -0.05), 0.2, 0.01, 0.1);   \n    \n    mouthMask -= mouthHole;\n    \n    //face += mouthMask;\n    \n    //Smile using rectangle    \n    vec2 rectanglePos = vec2(0.0, 0.0);\n    \n    rectanglePos = vec2(uv.x - rectanglePos.x, uv.y - rectanglePos.y);\n    \n    float m = (rectanglePos.x - 0.42) * (rectanglePos.x + 0.42);\n    rectanglePos.y = rectanglePos.y - m * 1.9;\n        \n    vec2 horizontalEdges = vec2(-0.3, 0.3);\n    vec2 verticalEdges = vec2(0.0, 0.1);    \n    \n    float rectangleMouth = Rectangle(rectanglePos, horizontalEdges, verticalEdges, 0.005);\n    \n    face -= rectangleMouth;\n    \n    // Output to screen\n    \n    float background = Rectangle(vec2(uv.x - 0.0, uv.y - 0.0), vec2(-0.5, 0.5), vec2(-0.5, 0.5), 0.0001);\n    \n    vec3 backgroundColor = vec3(clamp(background - face, 0.0, 0.9));\n    \n    vec3 faceColor = vec3(face, 0.0, 0.0);\n    \n    fragColor = vec4(faceColor + backgroundColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}