{"ver":"0.1","info":{"id":"DsfGWr","date":"1665929523","viewed":114,"name":"Nornight","username":"Gijlf","description":"some tranformation inspired by evvvvil","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["glow","fold","wrap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535898;\nconst float tau = 2.0 * pi;\n\nmat2 rot(float a) {\n    float c = cos(a), s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat box(vec3 p, vec3 s) {\n    p = abs(p) - s;\n    return min(0.0, max(max(p.x,p.y),p.z)) + length(max(vec3(0), p));\n}\n\nfloat trfn(float x) {\n    x = fract(x);\n    return clamp(min(08.0*(x-0.30), 1.0-08.0*(x-0.600) ), 0.0, 1.0);\n}\n\nfloat dtrfn(float x) {\n    x = fract(x);\n    return clamp(min(24.0*(x-0.296), 1.0-24.0*(x-0.390) ), 0.0, 1.0) +\n           clamp(min(24.0*(x-0.596), 1.0-24.0*(x-0.688) ), 0.0, 1.0);\n}\n\nfloat gl = 0.0;\nvec2 map(vec3 p, float time) {\n    float z = p.z;\n    p.y += sin(0.18*p.z + time) * 0.23;\n    p.y += sin(0.01*p.z + time * 0.5) * 0.8;\n    p.z = abs(p.z) - (8.0 + cos(0.25*time) * 4.0);\n\n    // 2.2, 3.8, 5.2\n    float r = mix(5.2, 2.2, trfn(time*0.25))+sin(time*0.0125)*0.12;\n\n    for (int i=0; i<5; i++) {\n        p.xz = abs(p.xz) - vec2(1.2, 2.8);\n        p.xy *= rot(r); p.yz *= rot(r);\n    }\n\n    vec2 dm = vec2(box(p, vec2(1.44, 1.6).xxy), 1.0);\n\n    p.x -= 2.4;\n    float d = box(p-vec3(0,0.5,0.4), vec3(0.12, 9., 0.12));\n    dm = d < dm.x ? vec2(d, 2.0) : dm;\n\n    d = box(p+vec3(0,0.3,0.5), vec3(0.12, 2.8, 0.12));\n    dm = d < dm.x ? vec2(d, 2.0) : dm;\n\n    p.x += 3.75;\n    d = box(p, vec2(0.12, 4.8).xyx);\n    dm = d < dm.x ? vec2(d, 3.0) : dm;\n    float ma = (0.5*sin((p.z*24.0+z)*0.10+time*8.0)+0.5);\n    gl += max(ma * 0.6, 0.05 / (1e-4+d)) * ma * 1.8;\n\n    return dm;\n}\n\nvec3 norm(vec3 p, float time) {\n    const vec2 o = vec2(1e-3, 0);\n    return normalize(vec3(\n        map(p+o.xyy, time).x - map(p-o.xyy, time).x,\n        map(p+o.yxy, time).x - map(p-o.yxy, time).x,\n        map(p+o.yyx, time).x - map(p-o.yyx, time).x\n    ));\n}\n\nconst float md = 100.0;\nfloat trace(vec3 st, vec3 rd, float time) {\n    float td = 0.0;\n    for (int i=0; i<128; i++) {\n        float d = map(st + rd * td, time).x;\n        td += d;\n        if (d < 1e-4 || td >= md) break;\n    }\n    return min(td, md);\n}\n\nfloat shadow(vec3 p, vec3 rd, vec2 mm, float k, float time) {\n    float res = 1.0;\n    float ph = 1e20;\n    for (float t=mm.x; t<mm.y;) {\n        float h = map(p + rd * t, time).x;\n        if (h < 1e-3) return 0.0;\n        float y = h*h/(2.0*ph);\n        res = min(res, k*h/max(0.0,t-y));\n        ph = h; t += h;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec3 col = vec3(0);\n    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.y;\n    float time = iTime * 0.25;\n    vec3 st = vec3(38, 24, -38);\n    //float ti = tau * Mouse.x / Resolution.x;\n    float ti = 0.9*tau;\n    ti -= trfn(time*0.25) * tau * 5.0;\n    st = vec3(cos(ti), 24, sin(ti)); st.xz *= 38.0;\n    vec3 ta = vec3(0);\n    vec3 cz = normalize(ta-st);\n    vec3 cx = normalize(cross(cz, vec3(0,1,0)));\n    vec3 cy = normalize(cross(cx, cz));\n    vec3 rd = mat3(cx, cy, cz) * normalize(vec3(uv, mix(1.0, 0.7, dtrfn(time*0.25))));\n    //vec3 rd = mat3(cx, cy, cz) * normalize(vec3(uv, 0.82));\n\n    float td = trace(st, rd, time);\n    vec3 po = st + rd * td;\n    float mat = map(po, time).y;\n    vec4 matcol = vec4(1,1,1,18.0);\n    if (mat > 0.0 && mat < 2.0) {\n        matcol = vec4(0.8, 0.7, 1.0, 18.0);\n    } else if (mat < 3.0) {\n        matcol = vec4(1.4,0.8,0.18, 4.0);\n    } else if (mat < 4.0) {\n        matcol = vec4(0.2,0.3,1.0, 18.0);\n    }\n\n    float fo = 1.0 - (td/md);\n    const vec3 sd = normalize(vec3(0.8, 0.4, -0.15));\n    vec3 no = norm(po, time);\n    float sdif = max(0.0, dot(no, sd));\n    float cdif = max(0.0, dot(no, vec3(0,1,0)));\n    float spec = pow(clamp(dot(no, normalize(sd-rd)), 0.0, 1.0), matcol.a);\n\n    col += 0.01 * gl * vec3(0.2,0.3,1.0);\n\n    float shad = shadow(po, -sd, vec2(1e-3, md), 20.0, time);\n    float ao = map(po+no*0.1, time).x;\n\n    col += (sdif+2e-5) * vec3(1.00, 0.7, 0.48) * shad;\n    col += (cdif+6e-4) * vec3(0.08, 0.2, 0.40);\n    col += spec;\n    col *= matcol.rgb;\n    col = fo * clamp(col - ao * matcol.rgb, vec3(0), vec3(1));\n    col += texture(iChannel0, rd).rgb * 0.2 * vec3(0.08, 0.2, 0.40) * float(td==md);\n    col = pow(col, vec3(0.4545));\n\n    // helper for animation fn (trfn, dtrfn)\n    //float o = Mouse.x / Resolution.x;\n    //col += smoothstep(0.001, 0.0, abs(uv.x-o)-0.0001);\n    //uv.y *= 4.0; uv.x = 1.0 * (uv.x-0.5);\n    //float y2 = dtrfn(uv.x);\n    //float y3 = trfn(uv.x);\n    //col.g += (step(abs(y2 - uv.y) - 0.01, 0.0));\n    //col.b += (step(abs(y3 - uv.y) - 0.01, 0.0));\n    //col += step(fract(uv.x), 0.01)*0.5;\n    //col += step(fract(uv.y), 0.01)*0.5;\n\n    fragColor = vec4(col, 1);\n}\n","name":"Image","description":"","type":"image"}]}