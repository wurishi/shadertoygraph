{"ver":"0.1","info":{"id":"lcj3RK","date":"1719359877","viewed":34,"name":"Tutorial intro to Shader Art","username":"K4l4N1k0","description":"Created by following Kishimisu's Shader Art tutorial\nhttps://youtu.be/f4s1h2YETNY?si=cAQcHvSo40sn-9pt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["experiment","shader","art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*vec3 palette( float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos(6.28318*(c*t+d));\n}*/\n\n/*Funcion que crea una paleta de colores*/\n\nvec3 palette( float t ) { // t es tiempo\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) ); // variación con el tiempo, son transiciones, utilizan coseno\n}\n\n// función principal, todo lo interesante pasa aquí\n\n\n//fragCoord - input: tipo vec2(x, y) un vector con dos valores, que son coordenadas del lienzo.\n//fragColor - output: tipo vec4(r,g,b,a) -> son colores, su valor es de 0 a 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    // iResolution, constante - vec3(x,y,z);  3 componentes que son el tamaño del canvas en pixeles. X-width, y-height, z-depth (para 3D).\n    vec2 uv = (fragCoord * 2.0 - 1.0 - iResolution.xy) / iResolution.y; // es un fondo en el lienzo, esas operaciones garantizan centrar esas coordenadas.\n    vec2 uv0 = uv; // copia de uv\n    vec3 finalColor =  vec3(0.0); // vec3 es un vector rgb, aqui todos estan en 0, lo que equivale a negro\n    \n     // las iteraciones le dan apariencia de fractal, por eso usamos un loop\n    for (float i = 0.0; i < 4.0; i++) {\n\n    //fract(x) - output 0 a 1. Retorna la parte fraccionaria del input. Ej. 1.45, retorna .45.  \n    //Fract está permitiendo la repetición de las coordenadas en un patrón fractal.\n        uv = fract(uv * 1.5) - 0.5; \n     // length es una fn que calcula la distancia de uv al origen (que centramos previamente)\n        float d = length(uv) * exp(-length(uv0));\n        //col obtiene un color de la paleta (función pallete), variando con el tiempo (iTime).\n        vec3 col = palette(length(uv0) + i*0.4 + iTime * 0.4); \n        // Se ajusta d con una función seno y otras operaciones para crear patrones interesantes.\n        d = sin(d*8.0 + iTime)/8.0;\n        d = abs(d);\n        d = pow(0.01 / d, 1.3);\n\n        finalColor += col * d;\n        // Asignación del Color al Fragmento:\n        fragColor = vec4(finalColor, 1.0);\n    \n    }\n    \n}","name":"Image","description":"","type":"image"}]}