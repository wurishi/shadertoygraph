{"ver":"0.1","info":{"id":"3dVBzm","date":"1607048089","viewed":194,"name":"_Perlin Noise 3D_","username":"Paulo_Silva","description":"Perlin Noise 3D","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["perlinnoise3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int p[512] = int[](151,160,137,91,90,15,\n   131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n   190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n   88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n   77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n   102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n   135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n   5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n   223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n   129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n   251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n   49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n   138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180, \n                   \n   151,160,137,91,90,15,\n   131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n   190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n   88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n   77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n   102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n   135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n   5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n   223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n   129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n   251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n   49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n   138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180\n   );\n\nfloat smooths(float t)\n{\n    return t * t * t * (t * (t * 6.0 - 15.0) + 10.0); \n}\n\nfloat lerp(float a, float b, float t)\n{\n    return a * (1.0 - t) + b * t;\n}\n\nfloat grad(int hash, float x, float y, float z)\n{\n    switch(hash & 15)\n    {\n        case 0: return  x + y;\n        case 1: return -x + y;\n        case 2: return  x - y;\n        case 3: return -x - y;\n        case 4: return  x + z;\n        case 5: return -x + z;\n        case 6: return  x - z;\n        case 7: return -x - z;\n        case 8: return  y + z;\n        case 9: return -y + z;\n        case 10: return  y - z;\n        case 11: return -y - z;\n        case 12: return  y + x; // valores 12, 13, 14, 15 são repetidos pois a não-uniformidade da seleção permite usar hash & 15 em vez de hash % 15 que é mais pesado.\n        case 13: return -y + z;\n        case 14: return  y - x;\n        case 15: return -y - z;\n        default: return 0.0; // never happens\n    }\n}\n\nfloat evalNoise(float x, float y, float z)\n{\n    int xi = int(x) - int((x < 0.0 && x != float(int(x))));\n    int yi = int(y) - int((y < 0.0 && y != float(int(y))));\n    int zi = int(z) - int((z < 0.0 && z != float(int(z))));\n\n    int xMin = xi & 255;\n    int xMax = (xMin + 1) & 255;\n\n    int yMin = yi & 255;\n    int yMax = (yMin + 1) & 255;\n\n    int zMin = zi & 255;\n    int zMax = (zMin + 1) & 255;\n\n    float xf = x - float(xi);\n    float yf = y - float(yi);\n    float zf = z - float(zi);\n\n    float u = smooths(xf);\n    float v = smooths(yf);\n    float w = smooths(zf);\n\n    int c000_index = p[p[p[xMin] + yMin] + zMin];\n    int c100_index = p[p[p[xMax] + yMin] + zMin];\n    int c010_index = p[p[p[xMin] + yMax] + zMin];\n    int c110_index = p[p[p[xMax] + yMax] + zMin];\n    int c001_index = p[p[p[xMin] + yMin] + zMax];\n    int c101_index = p[p[p[xMax] + yMin] + zMax];\n    int c011_index = p[p[p[xMin] + yMax] + zMax];\n    int c111_index = p[p[p[xMax] + yMax] + zMax];\n\n    float c000 = grad(c000_index, xf  , yf  , zf);\n    float c100 = grad(c100_index, xf - 1.0, yf  , zf);\n    float c010 = grad(c010_index, xf  , yf - 1.0, zf);\n    float c110 = grad(c110_index, xf - 1.0, yf - 1.0, zf);\n    float c001 = grad(c001_index, xf  , yf  , zf - 1.0);\n    float c101 = grad(c101_index, xf - 1.0, yf  , zf - 1.0);\n    float c011 = grad(c011_index, xf  , yf - 1.0, zf - 1.0);\n    float c111 = grad(c111_index, xf - 1.0, yf - 1.0, zf - 1.0);\n\n    return \n    lerp (\n        lerp(\n            lerp(c000, c100, u), \n            lerp(c010, c110, u), \n        v), \n        lerp(\n            lerp(c001,c101, u), \n            lerp(c011, c111, u), \n        v),\n    w);                     \n}\n    \n\nfloat fbm(vec3 point, float persistence, float frequency, int octaves) {\n\n    float amplitude = 1.0;\n    float maxValue = 0.0;\n    float noise = 0.0;\n\n    for (int i = 0; i < octaves; i++)\n    {\n        noise += evalNoise(point.x * frequency, point.y * frequency, point.z * frequency) * amplitude;\n\n        maxValue += amplitude;\n        frequency *= 2.0;\n        amplitude *= persistence;\n    }\n    \n    noise /= maxValue;\n    noise += 1.0;\n    noise *= 0.5;\n\n    return noise;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 scrCoord = fragCoord.xy;\n    \n    float persistence = 0.5;\n\tfloat frequency = 0.01;\n\tint octaves = 1;\n\n    float noise = fbm(vec3(scrCoord.x + iTime * 20.0, scrCoord.y, iTime * 30.0), persistence, frequency, octaves);\n\n    fragColor = vec4(vec3(noise), 1.0);\n}","name":"Image","description":"","type":"image"}]}