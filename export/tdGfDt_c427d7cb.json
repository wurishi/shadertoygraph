{"ver":"0.1","info":{"id":"tdGfDt","date":"1608231424","viewed":126,"name":"Parabol Rays","username":"StarikTenger","description":"Rays are affected by gravity so they move by parabolas\nUse mouse to rotate camera","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tracing","parabol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141693\n#define EPS 0.0000001\n\nfloat chess_size = 20.;\nfloat gravity = 0.001;\nfloat shade_k = 0.0003;\nfloat cam_width = 2.;\nfloat height = 100.;\n\nvec2 rotate(vec2 v, float a) {\n\treturn vec2(v.x * cos(a) - v.y * sin(a), v.x * sin(a) + v.y * cos(a));\n}\n\nvec3 rotate(vec3 v, vec2 ang){\n    v = v.zxy;\n    vec2 p = rotate(vec2(v.x, v.z), ang.y);\n\tv = vec3(p.x, v.y, p.y);\n    v = vec3(rotate(vec2(v.x, v.y), ang.x), v.z);\n    return v.xzy;\n}\n\n\n\nbool chess(vec2 pos, float ko){\n    float k = ko / chess_size;\n\treturn (sign(sin(pos.x*k)) == sign(sin(pos.y*k)));\n}\n\nvec3 trace(vec3 pos, vec3 vel, float g) {\n    float t = (vel.y + sqrt(vel.y*vel.y + 2. * g * pos.y)) / g;\n    if (abs(g) <= EPS)\n        t = -pos.y / vel.y;\n    vec2 land = pos.xz + vel.xz * t;\n    vec3 col;\n    if (t > 0. && chess(land, 1.)) col.r = 1.;\n    if (t > 0. && chess(land, 1.)) col.g = 1.;\n    if (t > 0. && chess(land, 1.)) col.b = 1.;\n    col -= abs(t*shade_k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\n    height += + sin(iTime)*50.;\n    vec2 cam_dir = vec2(2.*PI*(iMouse.x/iResolution.x - 0.5), PI* (1./2.0*(iMouse.y/iResolution.y - 1.0) +0.25)) * 2.;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy- vec2(0.5, 0.5)) * iResolution.xy * 0.001;\n\n    // Time varying pixel color\n    vec3 col = vec3(0,0,0);\n    \n    vec3 pos = vec3(0.,height,iTime*50.0);\n    \n    float delta = 0.01;\n    \n    col.g += trace(pos, rotate(normalize(vec3(uv.xy, (1. ) / cam_width)), cam_dir), gravity).r;\n    col.r += trace(pos, rotate(normalize(vec3(uv.xy, (1. + delta) / cam_width)), cam_dir), gravity).g;\n    col.b += trace(pos, rotate(normalize(vec3(uv.xy, (1. - delta) / cam_width)), cam_dir), gravity).b;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}