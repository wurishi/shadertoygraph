{"ver":"0.1","info":{"id":"tlS3Wm","date":"1559758447","viewed":77,"name":"MandelToast","username":"cafe","description":"Toast of mandels","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["mandeltoast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 300\n#define AA 2\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );   \n    \n}\n\nvec2 zoom(vec2 uv, vec2 A, vec2 B){\n    return A + (B-A)*uv;\n}\n\nvec2 zoomOn(vec2 uv, vec2 p, float z){\n \treturn (uv/z+p);    \n}\n\nvec2 complexSquare(vec2 c){\n    return vec2(c.x*c.x - c.y*c.y, 2.*c.x * c.y);\n}\n\nfloat mandelbrot(vec2 uv){\n    \n    vec2 c = vec2(0.);\n    \n    int i=0;\n    \n    for(i ; i<ITERATIONS ; i++){\n        c = complexSquare(c) + uv;\n        \n        if(dot(c,c) > 4.){\n            break;\n        }\n        \n    }\n    return float(i)/float(ITERATIONS);\n}\n\nvec3 color(vec2 uv){\n    \n    float zoom = pow(2.,iTime);\n    \n    //uv = zoom(uv,vec2(-0.5),vec2(-0.4));\n    //uv = zoomOn(uv, vec2(-0.99,-.3), 10000.);\n    uv = zoomOn(uv, vec2(\n        0.3602404434376143632361252444495453084826078079585857504883758147401953460592,\n        -0.6413130610648031748603750151793020665794949522823052595561775430644485741727),\n        zoom);\n\n    // Time varying pixel color\n    float mandel = mandelbrot(uv);\n    \n    //mandel = pow(mandel,1./(log2(zoom)/2.));\n    \n    mandel = pow(mandel,0.2 + log2(zoom)/18.);\n    \n   \treturn palette(mandel, \n                  vec3(0.5, 0.5, 0.5), \n                  vec3(0.5, 0.5, 0.5), \n                  vec3(1.0, 1.0, 1.0), \n                  vec3(0.30, 0.20, 0.20));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y * vec2(1.,-1.);\n    \n    // (x,y), (x+.5,y) , (x+.5,y+.5) , (x, y+.5)\n    \n    vec3 col = vec3(0.);\n    \n    for(int i=0 ; i<AA ; i++){\n        for(int j=0 ; j<AA ; j++){\n            col += color(uv+vec2(float(2.*float(i)/float(AA)),\n                                 float(2.*float(j)/float(AA))\n                                )/iResolution.xy);\n        }\n    }\n    \n    col /= float(AA)*float(AA);\n    \n    uv += vec2(2.)/iResolution.xy;\n   \n\n    //vec3 col = color(uv);\n\n    fragColor = vec4(col,0.0);\n}","name":"Image","description":"","type":"image"}]}