{"ver":"0.1","info":{"id":"XcdyDH","date":"1730587935","viewed":193,"name":"BBC Test Card G","username":"sh1boot","description":"BBC Test card G.\n\nJust a little more to fix with the anti-aliasing between frequency bars...","likes":10,"published":3,"flags":16,"usePreview":0,"tags":["golf","testpattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sinpi(float x) { return sin(3.1415926536 * x); }\nvec2 sinpi(vec2 x) { return sin(3.1415926536 * x); }\nfloat sin1mhz(float x) {\n    x *= 5.76;\n    return mix(sinpi(x), 0.0, smoothstep(0.8, 1.0, fwidth(x)));\n}\nfloat aastep(float g, float x) {\n    float fw = fwidth(g);\n    return smoothstep(-fw, fw, x);\n}\nfloat aastep(float x) { return aastep(x, x); }\nfloat aasign(float x) {\n    return aastep(x) * 2.0 - 1.0;\n}\nfloat lt(float x, float y) {\n    return aastep(x, y - x);\n}\nvec2 ppfract(vec2 x) {\n    return abs(fract(x * 0.5) * 2.0 - 1.0);\n}\n\nconst float cw = 42.0;\nconst float lw = 1.0 / cw;\n\nfloat line(float x) {\n    return aastep(x, lw - abs(x));\n}\nvoid centre(inout vec3 c, float x, int y) {\n    // apparently abs(y)==1 doesn't work on my phone.\n    if (y == 1 || y == -1) {\n        c *= 1.0 - lt(abs(x), 0.5 - lw);\n        c += line(x);\n    }\n}\nvec4 testcard(vec2 uv) {\n    uv = uv * 576.0 / cw;\n//    if (abs(uv.x) > 384.0 / cw) return vec4(0);\n\n    ivec2 i = ivec2(round(abs(uv)));\n    ivec2 j = ivec2(floor(abs(uv)));\n    vec2 lines = ppfract(uv) - 0.5;\n    lines = vec2(line(lines.x), line(lines.y));\n    vec3 b = vec3((i.x ^ i.y) & 1);\n    if (i.x <= 8 && i.y <= 6) {\n        vec3 m = mix(vec3(0.0, 0.085, -0.435),\n                     vec3(-0.237, 0.125, 0.0),\n                     float(uv.x < 0.0));\n        m = mix(m, vec3(-0.14, 0.0, 0.36), lt(abs(uv.x), 6.5));\n        m *= aasign(uv.y);\n        m *= float(i.y < 6\n                && i.x / 2 == 3\n                && (i.x != 6 || i.y >= 4));\n        b = m + 0.475;\n\n        lines.y *= float(!(i.x == 7 && j.y <= 4)\n                      && !(i.x == 6 && j.y == 4));\n        lines.x *= float(!(j.x == 6 && i.y / 2 == 2));\n    }\n    b += lines.x + lines.y;\n    vec3 c;\n    vec3 cc[2];\n    vec2 rw = fract((uv.y + vec2(1,0)) * 0.5) * 2.0 - 1.0;\n    ivec2 r = ivec2(round(uv.y - rw));\n    for (int rn = 0; rn < 2; ++rn) {\n        int row = r[rn];\n        c = vec3(line(uv.x) + line(uv.y) + lines.x);\n        switch (row) {\n            case 6:\n                c = vec3(1);\n                break;\n            case 5:\n                c = vec3(lt(-abs(uv.x), -2.0));\n                break;\n            case 4: case -4:\n                c = vec3(abs(lt(abs(uv.x), 3.0) - lt(uv.y, 0.0)));\n                c *= 1.0 - line(uv.x + 2.5);\n                break;\n            case 3:\n                c = vec3(mix(0.25, 1.0, lt(sin1mhz(uv.x * 0.25), 0.0)));\n                break;\n            case 1: case 2:\n                c = vec3(lt(-sinpi(uv.x / 4.0), 0.0),\n                         lt(uv.x, 0.0),\n                         lt(-sinpi(uv.x / 2.0), 0.0)) * 0.7125 + 0.2375;\n                centre(c, uv.x, row);\n                break;\n            case -1: case -2:\n                // TODO: anti-aliasing\n                float w = floor(uv.x / 2.0) + 3.0;\n                // Official frequencies for this bar are:\n                // w=0,    w=1,    w=2,    w=3,    w=4,    w=5\n                // 1.5MHz, 2.5MHz, 3.5MHz, 4.0MHz, 4.5MHz, 5.25MHz\n                w += 1.5;\n                c = vec3(sin1mhz(uv.x * w) * 0.5 + 0.5);\n                centre(c, uv.x, row);\n                break;\n            case -3:\n                //c = vec3(floor((uv.x + 6.0) / 2.0) / 5.0);\n                c = vec3(1.0);\n                for (int t = -2; t <= 2; t++) c -= lt(uv.x / 2.0, float(t)) * 0.2;\n                break;\n            case -5: case -6:\n                c = vec3(1, lt(-abs(uv.x), -0.5), 0) * 0.7125 + 0.2375;\n        }\n        cc[rn] = c;\n    }\n    rw = abs(rw);\n    c = mix(cc[0], cc[1], lt(rw[1] - rw[0], 0.0));\n    b = mix(b, c, lt(length(uv), 6.0));\n    vec4 b4 = vec4(b, 1);\n    b4 *= lt(abs(uv.x), 384.0 / cw);\n    return b4;\n}\n\nvoid mainImage(out vec4 fragColour, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    if (texelFetch(iChannel3, ivec2(32, 2), 0).x > 0.5) {\n        vec2 sc = sinpi(vec2(0,0.5) + iTime * 0.1); //* (1.1 + cos(iTime * 0.1)) * 0.4;\n        uv = uv * mat2x2(sc.x, sc.y, -sc.y, sc.x);\n    }\n    //fragColour = pow(testcard(uv), vec4(1.0/2.2));\n    fragColour = testcard(uv);\n}","name":"Image","description":"","type":"image"}]}