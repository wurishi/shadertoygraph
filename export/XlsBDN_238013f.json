{"ver":"0.1","info":{"id":"XlsBDN","date":"1511916786","viewed":157,"name":"Anstis Inchworm Illusion","username":"blevin","description":"Inchworm illusion from Stuart Anstis.  https://t.co/gkRKyfNnyI","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["illusionperception"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Inchworm Illusion from Stuart Anstis,\n// \"Footsteps and inchworms: Illusions show that contrast affects\n//  apparent speed\".  Perception, 2001.  https://t.co/gkRKyfNnyI\n//\n// This illusion demonstrates how perception of motion depends on\n// contrast with the surroundings.\n//\n// Here the blocks phase between bright yellow/dark blue, and a shared\n// middle gray.  In the color phase they contrast with alternate sets\n// background stripes, causing them to appear to judder alternately.\n// In the second gray phase they contrast with both sets of background\n// stripes and it is clear that they are moving continuously together.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n \n    const int NUM_STRIPES = 16;\n    const float SPEED = 0.08;\n    const float sep = 0.20;\n    const float h = 1.0/16.0;\n    const float w = 1.0/16.0;\n    \n    const vec3 BAR1 = vec3(1.0, 1.0, 0.2);\n    const vec3 BAR2 = vec3(0.0, 0.0, 0.2);\n    const vec3 BG1 = vec3(1.0);\n    const vec3 BG2 = vec3(0.0);\n    \n    vec3 c;\n    \n    // Stripe pattern signal\n    float bg = step(mod(uv.x * float(NUM_STRIPES), 1.0), 0.5);\n    // Background color.\n    c = mix(BG1, BG2, bg);\n\n    float x = mod(uv.x-iTime*SPEED, 1.0);\n    if (x < w) {\n        // Phase between low and high contrast.\n        // Use smoothstep to give some hang time at each end.\n        float m = smoothstep(0.0, 0.5, sin(iTime)*0.5+0.5);\n        if (uv.y-0.5 >= sep && uv.y-0.5 < sep+h) {\n            c = mix(vec3(0.5),BAR1,m);\n        } else if (0.5-uv.y >= sep && 0.5-uv.y < sep+h) {\n      \t    c = mix(vec3(0.5),BAR2,m);\n        }\n    }\n    \n    // Convert to gamma 2.2 for display.\n    c = pow(c.rgb, vec3(1.0 / 2.2));\n\n    fragColor.rgb = c;\n}","name":"Image","description":"","type":"image"}]}