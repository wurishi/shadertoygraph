{"ver":"0.1","info":{"id":"cdKSDR","date":"1680955340","viewed":28,"name":"TrippyTrippyMandelbrot","username":"MilneyAth","description":"Mandelbrot to your face WUB WUB WUUUUUUBBBBUUBBBBA WOOOOOWAAA","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord / iResolution.xy) * 2.0 - vec2(1.0);\n\n    // Apply affine transformation\n    float angle = 0.2 * iTime;\n    mat2 rotation = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n    \n   vec2 translate = vec2(-0.5, 0.0); // Move fractal to the left\nfloat zoom = pow(1.5, -1.0 + 5.0 * sin(0.1 * iTime)); // Zoom in instead of out\nvec2 scale = vec2(1.0) / zoom; // Zoom in closer\nvec2 z = rotation * ((uv - translate) * scale);\n\n\n    vec2 c = z;\n    int maxIter = 100;\n    int i;\n    for (i = 0; i < maxIter; i++) {\n        float x = (z.x * z.x - z.y * z.y) + c.x;\n        float y = (2.0 * z.x * z.y) + c.y;\n        z = vec2(x, y);\n        if (length(z) > 2.0) break;\n    }\n\n    // Create a psychedelic color scheme using HSV color space\n    float hue = mod(float(i) / float(maxIter) + 0.5 * iTime, 1.0);\n    float saturation = 1.0;\n    float value = (i < maxIter) ? 1.0 : 0.0;\n    vec3 col = hsv2rgb(vec3(hue, saturation, value));\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}