{"ver":"0.1","info":{"id":"tddcDn","date":"1600772395","viewed":99,"name":"Linear vs Gamma Color Blending","username":"ming","description":"A simple test on Linear vs Gamma Space Color Blending (Top: Lerp; Bottom: Additive)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lineargamma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 a = vec4(0.0);\n    vec4 b = vec4(0.0);\n    \n    vec4 linear_2_gamma = vec4(1.0 / 2.2);\n    vec4 gamma_2_linear = vec4(2.2);\n    \n    // assume iChannel0 and iChannel1 are stored in gamma space\n    // assume the screen should be output in gamma space\n    \n\tif (uv.x < 0.499) { // simulate linear space blending\n    \tuv = min(vec2(1.0), uv * vec2(2.0, 1.0));\n       \ta = pow(texture(iChannel0, uv), gamma_2_linear);\n        b = pow(texture(iChannel1, uv), gamma_2_linear);\n        \n        if (uv.y > 0.5)\n        \tfragColor = mix(a, b, uv.x);\n       \telse\n        \tfragColor = a + b;\n        \n        fragColor = pow(fragColor, linear_2_gamma);\n    }\n    else if (uv.x > 0.501) { // simulate gamma space blending\n        uv = min(vec2(1.0), (uv - vec2(0.5, 0.0)) * vec2(2.0, 1.0));\t\n       \ta = texture(iChannel0, uv);\n        b = texture(iChannel1, uv);\n        \n        if (uv.y > 0.5)\n        \tfragColor = mix(a, b, uv.x);\n       \telse\n        \tfragColor = a + b;\n    }\n    else { // the separator\n        fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}