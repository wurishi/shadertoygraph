{"ver":"0.1","info":{"id":"dlXGDl","date":"1680337192","viewed":129,"name":"Learning voronoi tracking","username":"Nemerix","description":"Forked from a friend's boid shader -- this is just a shader I used to learn voronoi tracking for particles\n\nThis technique is so sweet -- this shader uses 150k particles x 1M pixels x 120 frames per second, and takes about 20% of my ancient 1070ti GPU.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["fish","birds","flock","flocking","boids"],"hasliked":0,"parentid":"stfyRs","parentname":"Boidsh"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define SHOW_CHANNEL_0\n#define SHOW_VORONOI_TERRITORY\n\nvoid mainImage(out vec4 c, in vec2 f)\n{\n    c = vec4(vec3(0.0), 1.0);\n#ifdef SHOW_CHANNEL_0\n    c = texelFetch(iChannel0, ivec2(f), 0);\n    return;\n#endif\n#ifdef SHOW_VORONOI_TERRITORY\n    c = texelFetch(iChannel1, ivec2(f), 0);\n    uint id = uint(c.x);\n    c = ParticleCol(id);\n    c *= 0.5;\n    //return;\n#endif\n    uvec4 particleBuffer = uvec4(VorBuffer(f));\n    for (int i = 0; i < 4; ++i)\n    {\n        uint id = particleBuffer[i];\n        vec4 pos = ParticlePos(id);\n        vec4 col = ParticleCol(id);\n        vec2 relativePixelPos = f - pos.xy;\n        float dist = length(relativePixelPos);\n        float scale = 1.0 - smoothstep(0.5, 1.5, dist);\n        c += mix(vec4(0.0,0.0,0.0,1.0), col, scale * sqrt(1.0 - pos.w / maxAge));\n    }\n    //vec2 v = texelFetch(iChannel0, ivec2(j & 63u, j >> 6u), 0).zw;\n    //float h = atan(v.y, v.x) * (6.0/6.28318530718);\n    //c.xyz = clamp(abs(mod(h + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\n    \n    //c = texelFetch(iChannel0, ivec2(f), 0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define LSW 8\n#define SW (1U << LSW)\n#define SWM1 (SW - 1U)\n\n#define ParticlePos(i) texelFetch(iChannel0, ivec2(i & SWM1, i >> LSW), 0)\n#define ParticleVel(i) texelFetch(iChannel0, ivec2(SW + (i & SWM1), i >> LSW), 0)\n#define ParticleCol(i) texelFetch(iChannel0, ivec2(2U*SW + (i & SWM1), i >> LSW), 0)\n\n#define VorBuffer(xy) texelFetch(iChannel1, ivec2(xy), 0)\n  \n\nconst uint kNumBoids = 150000u;\nconst float kBoidLen = 11.0;\nconst float kInitialVel = 50.0;\nconst float kMaxVel = 150.0;\nconst float kNeighborDist = 78.0;\nconst float kRepelFactor = 200.0;\nconst float kCmFactor = 11.0;\nconst float kAlignFactor = 0.39;\nconst float kMouseFactor = 300.0;\nconst uvec2 kSectionOffset = uvec2(SW, 0u);\nconst float maxAge = 300.0;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Particle state buffer\n\nfloat rand(float x)\n{\n    return fract(sin(mod(x*91.3458, 6.28318530718)) * 47453.5453);\n}\n\nfloat srand(float x)\n{\n    return 2.0*rand(x) - 1.0;\n}\n\nvoid mainImage(out vec4 c, in vec2 f)\n{\n    uvec2 uf = uvec2(f.x, f.y);\n    uvec2 xy = uf;\n    if (xy.x >= SW*3u) return;\n    xy.x = xy.x & SWM1;\n    uint idx = (xy.y << LSW) + (xy.x);\n    if (idx > kNumBoids) return;\n    float idxFloat = float(idx);\n    uint updateType = uf.x >> LSW;\n    \n    if (iFrame == 0)\n    {\n      if (updateType == 0u)\n      {\n        c = vec4(iResolution.x * rand(idxFloat), iResolution.y * rand(idxFloat + float(kNumBoids)), 0, 100.0*rand(idxFloat + 0.5*float(kNumBoids)));\n      }\n      else if (updateType == 1u)\n      {\n        c = vec4(kMaxVel * srand(idxFloat + 2.0*float(kNumBoids)), kMaxVel * srand(idxFloat + 3.0*float(kNumBoids)), 0, 0);\n      }\n      else if (updateType == 2u)\n      {\n        c = vec4(rand(idxFloat + 4.0*float(kNumBoids)), rand(idxFloat + 5.0*float(kNumBoids)), rand(idxFloat + 6.0*float(kNumBoids)), 1.0);\n      }\n      return;\n    }\n    // update position\n    if (updateType == 0u)\n    {\n      c = texelFetch(iChannel0, ivec2(xy), 0);\n      vec4 vel = texelFetch(iChannel0, ivec2(xy + kSectionOffset), 0);\n      c.xy += vel.xy * iTimeDelta;\n      c.w += 1.0;\n      if (c.w >= maxAge)\n      {\n        c = vec4(iResolution.x * rand(idxFloat + 157.0 * iTime), iResolution.y * rand(idxFloat + float(kNumBoids) + 157.0 * iTime), 0, 0);\n      }\n    }\n    // update velocity\n    else if (updateType == 1u)\n    {\n      vec4 pos = texelFetch(iChannel0, ivec2(xy), 0);\n      c = texelFetch(iChannel0, ivec2(xy + kSectionOffset), 0);\n      c.y -= 10.0 * iTimeDelta;\n      if (pos.w >= maxAge || pos.w == 0.0)\n      {\n        c = vec4(kMaxVel * srand(idxFloat + 2.0*float(kNumBoids) + 157.0 * iTime), kMaxVel * srand(idxFloat + 3.0*float(kNumBoids) + 157.0 * iTime), 0, 0);\n      }\n    }\n    else if (updateType == 2u)\n    {\n      c = texelFetch(iChannel0, ivec2(uf), 0);      \n    }\n}\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// inserts the given new id if it's closer than one of the existing ones\nvoid tryInsert(inout vec4 ids, inout vec4 dists, in float newId, in float newDist)\n{\n  if (newDist >= dists.w || newId == 0.0) return;\n  if (any(equal(ids, vec4(newId)))) return;\n  if (newDist < dists.x)\n  {\n    ids = vec4(newId, ids.xyz);\n    dists = vec4(newDist, dists.xyz);\n    return;\n  }\n  if (newDist < dists.y)\n  {\n    ids = vec4(ids.x, newId, ids.yz);\n    dists = vec4(dists.x, newDist, dists.yz);\n    return;\n  }\n  if (newDist < dists.z)\n  {\n    ids = vec4(ids.xy, newId, ids.z);\n    dists = vec4(dists.xy, newDist, dists.z);\n    return;\n  }\n  ids = vec4(ids.xyz, newId);\n  dists = vec4(dists.xyz, newDist);\n}\n\n// distance between a point and the center of a particle w/ given ID\nfloat particleDist(vec2 thisPos, float particle)\n{\n  vec2 pos = ParticlePos(uint(particle)).xy;\n  float dist = dot(thisPos - pos, thisPos - pos);\n  //dist = (particle == 0) ? 999999.0 : dist;\n  return dist;\n}\n\nconst int nOffsets = 5;\nconst ivec2 offsets[nOffsets] = ivec2[nOffsets](ivec2(0, 0),\nivec2(1, 0), ivec2(0, 1), ivec2(-1, 0), ivec2(0, -1)\n//ivec2(3, 0), ivec2(0, 3), ivec2(-3, 0), ivec2(0, -3),\n//ivec2(9, 0), ivec2(0, 9), ivec2(-9, 0), ivec2(0, -9)\n);\n\n// main image\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  ivec2 thisPixel = ivec2(fragCoord);\n  vec4 ids = vec4(0.0);\n  vec4 dists = vec4(999999999.0);\n  \n  for (int offsetIdx = 0; offsetIdx < nOffsets; ++offsetIdx)\n  {\n    ivec2 otherPixel = (thisPixel + offsets[offsetIdx]) % ivec2(iResolution.xy);\n    //ivec2 otherPixel = thisPixel + offsets[offsetIdx];\n    vec4 otherIds = VorBuffer(otherPixel);\n    for(int i = 0; i < 4; i++)\n    { \n      tryInsert(ids, dists, otherIds[i], particleDist(fragCoord, otherIds[i]));\n    } \n  }\n  \n  int hash = 0;\n  for (int i = 0; i < 1; ++i)\n  {\n    hash = thisPixel.x * 98689 + thisPixel.y * 69313 + iFrame * 3307 + hash * 26227;\n    //hash = thisPixel.x + thisPixel.y * 1200;\n    float otherId = 1.0 + float(uint(hash) % kNumBoids);\n    //otherId = 4U;\n    tryInsert(ids, dists, otherId, particleDist(fragCoord, otherId));\n  }\n  fragColor = ids;\n}","name":"Buffer B","description":"","type":"buffer"}]}