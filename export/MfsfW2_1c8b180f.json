{"ver":"0.1","info":{"id":"MfsfW2","date":"1724410292","viewed":95,"name":"paths in random hexagonal grid","username":"FabriceNeyret2","description":"Pathes / islands in hexagonal binary noise.\nmouse.x controls the threshold","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["illusion","graph","hexagonaltiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// hexagon tiling from https://shadertoy.com/view/ldcXW8\n// variant: triangle https://www.shadertoy.com/view/lflfW2\n\n#define hash(p)  fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453)\n\nvoid mainImage( out vec4 o,  vec2 p ) {\n // p -= 5.*iTime;\n    p *= mat2(1,1./1.73, 0,2./1.73) / 4.;     // to diamond coordinates\n    vec2  g = fract( p ),                     // local diamond coordinate\n          i = floor( p );                     // diamond id\n    float k = mod(i.x+i.y,3.);\n\n    i = k < 2. ?  i + k  :  i + step(g.yx,g); // hexagon id\n    o = vec4( hash(i) < ( length(iMouse.xy) < 10. ? .5 : iMouse.x/iResolution.x ) );\n                                                  // threshold\n // o = vec4( hash(i) );                      // debug: show hexagons\n}\n\n","name":"Image","description":"","type":"image"}]}