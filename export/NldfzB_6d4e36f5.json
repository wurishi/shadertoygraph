{"ver":"0.1","info":{"id":"NldfzB","date":"1663281869","viewed":71,"name":"circular symmetrical fractal","username":"benhardy","description":"circly fractal thing","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 origin = vec2(0,0);\n#define PI 3.1415926536\n\n#define CIRCLE_RADIUS 0.10\n#define CIRCLE_BORDER 0.03\n\nfloat d_rect(vec2 where, vec2 dims, float rounding) {\n    return length(max(origin, abs(where)-dims)) - rounding;\n}\nfloat d_circle(vec2 where, float radius) {\n    return length(where) - radius;\n}\nfloat d_base2(vec2 where) {\n    return d_rect(where, vec2(0.01,0.1), 0.01);\n}\nfloat d_base(vec2 where) {\n    return d_circle(where, CIRCLE_RADIUS);\n}\nvec2 d_fract(vec2 where2) {\n    float ang = iTime;\n    mat3 rot = mat3(\n        cos(ang), -sin(ang), 0,\n        sin(ang), cos(ang), 0,\n        0, 0, 1);\n    float dcycle = sin(iTime*0.21387646);\n    float ecycle = sin(iTime*0.41387646);\n    mat3 disp = mat3(\n        1, 0, -0.2 * (dcycle + 0.9), \n        0, 1, -0.2 * (ecycle + 0.5),\n        0, 0, 1.0);\n    float rcycle = 1.6 + 0.45 *sin(iTime*0.2711387646);\n    float scycle = 1.6 + 0.45 *sin(iTime*0.1511387646);\n    mat3 scale = mat3(\n        rcycle, 0.0, 0.0,\n        0.0, scycle, 0.0,\n        0.0, 0.0, 1.0);\n    mat3 tran = disp * rot * scale;\n    \n    vec3 where = vec3(where2, 1);\n    float d = d_base(where.xy);\n    int t;\n    for (t = 0; d >= 0.0 && t< 20; t++) {\n        where.x = abs(where.x);\n        where = where * tran;\n        d = min(d, d_base(where.xy));\n    }\n    return vec2(d, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy - 0.5)* vec2(1, iResolution.y/iResolution.x);\n\n    vec2 res = d_fract(uv);\n    vec3 col = vec3(0);\n    if (res.x <= 0.0 && res.x >= -CIRCLE_BORDER) {\n        float bp = 1.0 +res.x / CIRCLE_BORDER;\n        float cd = res.y *0.4;\n        float level = 1.0 / (1.0 + cd * cd);\n        col = bp * vec3(0.4-level, 0.6, 0.5+level*0.5);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}