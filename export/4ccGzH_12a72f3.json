{"ver":"0.1","info":{"id":"4ccGzH","date":"1712252673","viewed":86,"name":"Grafika komputerowa - labirynt","username":"Dar3cz3Q","description":"Labirynt ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["gk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SIZE 0.4\n#define SE_SQUARE_SIZE 0.1\n#define CHRZAN vec4(0.8, 0.8, 0.7, 1.0)\n#define CWIKLA vec4(0.619, 0.2, 0.32, 1.0)\n#define LICZBA_SCIAN 35\n#define FACTOR 0.01\n\nbool Square(vec2 uv, vec2 p, float d){\n     bool c = false;\n\n     if((uv.x > (p.x-d)) && (uv.x < (p.x + d))\n     && (uv.y > (p.y-d)) && (uv.y < (p.y + d))){\n\n     c = true;\n\n     }\n\n     return c;\n}\n\n// 0 - x left\n// 1 - x right\n// 2 - y up\n// 3 - y down\nvec4 baza_danych[] = vec4[]( \n    vec4(-.3, -.3 + FACTOR, .4, .2),\n    vec4(-SIZE, -SIZE + SE_SQUARE_SIZE, .1, .1 - FACTOR),\n    vec4(-SIZE, -SIZE + SE_SQUARE_SIZE, .0, .0 - FACTOR),\n    vec4(-.3, -.3 + FACTOR, -.1, -.3),\n    vec4(-.3, .3, -.1, -.1 - FACTOR),\n    vec4(-.2, -.2 + FACTOR, -.2, -.4),\n    vec4(-.1, -.1 + FACTOR, -.1, -.3),\n    vec4(-.1, .1, -.3, -.3 - FACTOR),\n    vec4(.1, .1 + FACTOR, -.2, -.3 - FACTOR),\n    vec4(.0, .1, -.2, -.2 - FACTOR),\n    vec4(.2, .2 + FACTOR, -.1, -.4),\n    vec4(-.2, -.2 + FACTOR, .3, .0),\n    vec4(-.1, -.1 + FACTOR, .1, .0),\n    vec4(-.1, .0, .1, .1 - FACTOR),\n    vec4(.0, .0 + FACTOR, .1, .0),\n    vec4(.3, .3 + FACTOR, -.2, -.3),\n    vec4(.3, .4, -.3, -.3 - FACTOR),\n    vec4(-.1, -.1 + FACTOR, .3, .2),\n    vec4(-.1, .0, .2, .2 - FACTOR),\n    vec4(.0, .0 + FACTOR, .3, .2),\n    vec4(.1, .4, .3, .3 - FACTOR),\n    vec4(.1, .4, .2, .2 - FACTOR),\n    vec4(.1, .1 + FACTOR, .2, .0),\n    vec4(.2, .2 + FACTOR, .1, .0),\n    vec4(.2, .3, .1, .1 - FACTOR),\n    vec4(.3, .3 + FACTOR, .1, -.1)\n);\n\nbool Sciana(vec2 coords) {\n    for(int i = 0; i < LICZBA_SCIAN; i++) {\n        if (coords.x > baza_danych[i].x && coords.x < baza_danych[i].y && coords.y > baza_danych[i].a && coords.y < baza_danych[i].z) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvec4 labirynt(vec2 coords) {\n    // Narysowanie poczatku i konca\n    bool start = Square(coords, vec2(-SIZE, SIZE), SE_SQUARE_SIZE);\n    bool end = Square(coords, vec2(SIZE, -SIZE), SE_SQUARE_SIZE);\n    \n    if (start) {\n        return vec4(0., 1., 0., 1.);\n    } \n    \n    if (end) {\n        return vec4(1., 0., 0., 1.);\n    }\n    \n    // Rysujemy sciany\n    bool sciana = Sciana(coords);    \n    \n    return (sciana ? CWIKLA : CHRZAN);\n}\n\nvec4 border(vec2 coords) {\n    if (coords.x < -SIZE || coords.x > SIZE) {\n        return CWIKLA;\n    }\n    \n    if (coords.y > SIZE || coords.y < -SIZE) {\n        return CWIKLA;\n    }\n    \n    return labirynt(coords);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    \n    uv.x *= iResolution.x/iResolution.y;\n\n    // Output to screen\n    fragColor = border(uv);\n}","name":"Image","description":"","type":"image"}]}