{"ver":"0.1","info":{"id":"7ldGDs","date":"1715439236","viewed":71,"name":"anuraghazra_raymarch_reflection","username":"anuraghazra","description":"Raymarch shaders","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","template","artofcode"],"hasliked":0,"parentid":"WtGXDD","parentname":"RayMarching starting point"},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\nconst int MAT_NONE = 0;\nconst int MAT_BASE = 1;\nconst int MAT_BALL = 2;\nconst int MAT_BARS = 3;\nconst int MAT_BASE2 = 4;\n\nfloat smoothMin(float da, float db, float k) {\n  float h = max(k-abs(da-db), 0.0) / k;\n  return min(da, db) - h*h*h*k*1.0/6.0;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdBox(vec2 p, vec2 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, p.y), 0.);\n}\n\nfloat sdBall(vec3 p, float size) {\n    return length(p)-size;\n}\n\nvec2 GetDist(vec3 p) {\n    float base = sdBox(p, vec3(1,.1,.5)) - 0.2;\n    float base2 = sdBox(p-vec3(0, .8, -.8), vec3(.9,.4,.0)) - 0.1;\n\n    float bar = length(vec2(sdBox(p.xy, vec2(.8, 1.4))-0.1, abs(p.z)-.4)) - 0.05;\n    float ball1 = sdBall(p-vec3(-0.4, .8-sin(iTime*1.9)*0.2, 0), .2);\n    float ball2 = sdBall(p-vec3(0.0, .8-sin(iTime*1.8)*0.2, 0), .2);\n    float ball3 = sdBall(p-vec3(0.4, .8-sin(iTime*1.7)*0.2, 0), .2);\n\n\n    float d = min(smoothMin(base, bar, 0.3), base2);\n    base = max(d, -p.y);\n    d = max(d, -p.y);\n    float balls = smoothMin(ball1, smoothMin(ball2, ball3, 0.4), 0.4);\n    d = min(d, balls);\n    \n    int mat = MAT_NONE;\n    if (d == base) {\n        mat = MAT_BASE;\n    }\n    if (d == balls) {\n        mat = MAT_BALL;\n    }\n    if (d == bar) {\n        mat = MAT_BARS;\n    }\n    if (d == base2) {\n      mat = MAT_BASE2;\n    }\n    \n    return vec2(d, mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float mat = 0.0;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 result = GetDist(p);\n        float dS = result.x;\n        mat = result.y;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, mat);\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p).x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 RenderMat(inout vec3 ro, inout vec3 rd, inout vec3 ref, bool last) {\n    vec3 col = texture(iChannel0, rd).rgb;\n    vec2 d = RayMarch(ro, rd);\n    \n    ref = vec3(0);\n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        vec3 refTex = texture(iChannel0, r).rgb;\n        float fresnel = pow(clamp(1.0-dot(n, -rd), 0.0, 1.0), 5.0);\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n        \n        int mat = int(d.y);\n        if (mat == MAT_BASE) {\n          col = vec3(0.1*dif);\n          // +mix(fresnel, .02, .5)\n          ref = vec3(1, .8, 0);\n        } else if (mat == MAT_BALL) {\n          col = vec3(0.1*dif);\n          ref = vec3(0.9);\n          if (last) col += ref*refTex;\n        } else if (mat == MAT_BASE2) {\n          col = vec3(0.1*dif);\n          ref = vec3(.7, .2, 0.3);\n        } else if (mat == MAT_BARS) {\n          col = vec3(0.1*dif);\n          ref = vec3(0.8);\n        }\n        \n        ro = p + n * SURF_DIST * 3.0;\n        rd = r;\n    }\n    \n    return col;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 ro = vec3(0, 3, -3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.75,0), 2.5);\n    \n    vec3 ref = vec3(0.0);\n    vec3 fil = vec3(1);\n    vec3 col = RenderMat(ro, rd, ref, false);\n   \n    \n    const int NUM_BOUNCES = 4;\n    for(int i = 0; i < NUM_BOUNCES; i++) {\n        fil *= ref;\n        vec3 bounce = fil*RenderMat(ro, rd, ref, i==NUM_BOUNCES-1);\n        col += bounce;\n    }\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}