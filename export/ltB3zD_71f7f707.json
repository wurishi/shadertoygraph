{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Generate Gold Noise image\n\n   precision lowp    float;\n// precision mediump float;\n// precision highp   float;\n\nvoid mainImage(out vec4 rgba, in vec2 xy)\n{\n    float seed = fract(iTime);                    // fractional base seed\n    rgba       = vec4 (gold_noise(xy, seed+0.1),  // r\n                       gold_noise(xy, seed+0.2),  // g\n                       gold_noise(xy, seed+0.3),  // b\n                       gold_noise(xy, seed+0.4)); // α\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"// Generate Gold Noise sound\n\n\n\nvec2 mainSound( in int samp,float time)\n{\n    return vec2(gold_noise(vec2(iSampleRate*fract(time/100.0)), 1.0));\n}","name":"Sound","description":"","type":"sound"},{"outputs":[],"inputs":[],"code":"// Gold Noise ©2015 dcerisano@standard3d.com\n// - based on the Golden Ratio\n// - uniform normalized distribution\n// - fastest static noise generator function (also runs at low precision)\n// - use with indicated fractional seeding method\n\n  const float PHI = 1.61803398874989484820459; // Φ = Golden Ratio \n\n  float gold_noise(in vec2 xy, in float seed)\n  {\n    return fract(tan(distance(xy*PHI, xy)*seed)*xy.x);\n  }\n","name":"Common","description":"","type":"common"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ltB3zD","date":"1427241319","viewed":21172,"name":"Gold Noise Uniform Random Static","username":"dcerisano","description":"- based on the Golden Ratio\n- uniform normalized distribution\n- fastest static noise generator function (also runs at low precision)\n- use with indicated fractional seeding method\n","likes":105,"published":3,"flags":8,"usePreview":0,"tags":["noise","random","static","generator"],"hasliked":0,"parentid":"","parentname":""}}