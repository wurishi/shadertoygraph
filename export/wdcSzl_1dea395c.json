{"ver":"0.1","info":{"id":"wdcSzl","date":"1572598443","viewed":435,"name":"video transition 4","username":"ankd","description":"my video transition pattern.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["effect","transition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This source code is under Public Domain CC0 1.0.\n// https://creativecommons.org/publicdomain/zero/1.0/deed.en\n\n#define GRID_SIZE 20.\n\nconst float PI = acos(-1.);\n\nfloat screenIn(in vec2 uv) { return step(abs(uv.x-0.5), 0.5) * step(abs(uv.y-0.5), 0.5); }\nmat2 rotate(in float r) { float c=cos(r),s=sin(r); return mat2(c,-s,s,c); }\nfloat hash(in float v) { return fract(sin(v)*43237.5324); }\nfloat hash(in vec2 v) { return fract(sin(dot(v, vec2(12.9898, 78.233)))*43237.5324); }\n\n// video getter\nvec4 tex1(in vec2 st) { return texture(iChannel0, st); }\nvec4 tex2(in vec2 st) { return texture(iChannel1, st); }\n\n// transition\n// ratio - value to select video, 0~1\n// st - uv coordination of the pixel.\nvec4 transition(float ratio, in vec2 st) {\n    vec2 uv = st;\n    uv *= rotate(PI/6.);\n    \n    uv.y *= GRID_SIZE;\n    vec2 id = vec2(0.);\n    id.y = floor(uv.y);\n    uv.x *= GRID_SIZE*hash(id.y);\n    id.x = id.y + floor(uv.x);\n    \n    float angle = sign(hash(id.x)*2.-1.);\n    float offset = hash(id.x + id.y)+1.414;\n    \n    vec2 uv1 = st;\n    vec2 uv2 = st + vec2(angle * offset * ratio, 0.)*rotate(-PI/6.);\n    \n    return screenIn(uv2)<1. ? tex2(uv1) : tex1(uv2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float ratio = smoothstep(-1., 1., sin(iTime));\n    vec4 video = transition(ratio, uv);\n    \n    vec3 col = uv.y<0.04 ? vec3(step(uv.x, ratio)) : video.rgb;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}