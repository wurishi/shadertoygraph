{"ver":"0.1","info":{"id":"4t23Rd","date":"1434474171","viewed":476,"name":"Harrison Hue","username":"glitchwizard","description":"hue","likes":2,"published":1,"flags":2,"usePreview":0,"tags":["hehehue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define whitePoint vec3(1, 0.19784, 0.46834)\n\nfloat maxChroma(vec2 hl) {\n    vec3 M[3];\n    M[0] = vec3(3.2406, -1.5372, -0.4986);\n    M[1] = vec3(-0.9689, 1.8758,  0.0415);\n    M[2] = vec3(0.0557, -0.2040,  1.0570);\n    \n    vec3 w = whitePoint;\n    float wu = w.y;\n    float wv = w.z;\n    \n    float h = hl.x;\n    float l = hl.y;\n    float sh = sin(h);\n    float ch = cos(h);\n    float Y = l < 8.0 ?\n    l * pow(3.0/29.0, 3.0) :\n    pow((l+16.0)/116.0, 3.0);\n    Y *= w.x;\n    float A = ch / (13.0 * l);\n    float B = sh / (13.0 * l);\n    \n    float r = 10000.0;\n    for (int i = 0; i < 3; ++i) {\n        vec3 m = M[i] * Y;\n        \n        float cpart = dot(m, vec3(9.0 * A, 4.0 * B, -3.0 * A - 20.0 * B));\n        float hlpart = dot(m, vec3(9.0 * wu, 4.0 * wv, 12.0 - 3.0 * wu - 20.0 * wv));\n        \n        for (int j = 0; j <= 1; ++j) {\n            //solve\n            \n            float xleft = float(j) * 4.0 * B;\n            float left = float(j) * 4.0 * wv;\n            \n            xleft -= cpart;\n            left -= hlpart;\n            \n            float c = -left/xleft;\n            \n            if (c >= 0.0 && c < r) {\n                r = c;\n            }\n        }\n    }\n    return r;\n}\n\nvec3 RGB_XYZ(vec3 c) {\n    vec3 xt = vec3(0.4124, 0.3576, 0.1805);\n    vec3 yt = vec3(0.2126, 0.7152, 0.0722);\n    vec3 zt = vec3(0.0193, 0.1192, 0.9505);\n    \n    return vec3(dot(c,xt), dot(c, yt), dot(c, zt));\n}\n\nvec3 XYZ_Yuv(vec3 c) {\n    float u = 4.0 * c.x / dot(c, vec3(1.0, 15.0, 3.0));\n    float v = 9.0 * c.y / dot(c, vec3(1.0, 15.0, 3.0));\n    return vec3(c.y, u, v);\n}\n\nvec3 RGB_Yuv(vec3 c) {\n    return XYZ_Yuv(RGB_XYZ(c));\n}\n\nvec3 Yuv_LUV(vec3 c) {\n    vec3 w = whitePoint;\n    float yyn = c.x/w.x;\n    float L = yyn <= pow(6.0/29.0, 3.0) ?\n    pow(29.0/3.0,3.0) * yyn :\n    116.0 * pow(yyn, 1.0/3.0) - 16.0;\n    \n    float U = 13.0 * L * (c.y - w.y);\n    float V = 13.0 * L * (c.z - w.z);\n    return vec3(L,U,V);\n}\n\nvec3 RGB_LUV(vec3 c) {\n    return Yuv_LUV(RGB_Yuv(c));\n}\n\nvec3 LUV_HCL(vec3 c) {\n    float C = sqrt(dot(c.yz, c.yz));\n    float H = atan(c.z, c.y);\n    return vec3(H,C,c.x);\n}\n\nvec3 RGB_HCL(vec3 c) {\n    return LUV_HCL(RGB_LUV(c));\n}\n\n\n\nvec3 HCL_LUV(vec3 c) {\n    float u = c.y * cos(c.x);\n    float v = c.y * sin(c.x);\n    return vec3(c.z, u, v);\n}\n\n\nvec3 Yuv_XYZ(vec3 c) {\n    float X = c.x * (9.0*c.y)/(4.0*c.z);\n    float Z = c.x * (12.0-3.0*c.y-20.0*c.z) / (4.0*c.z);\n    return vec3(X, c.x, Z);\n}\n\n\nvec3 XYZ_RGB(vec3 c) {\n    vec3 rt = vec3(3.2406, -1.5372, -0.4986);\n    vec3 gt = vec3(-0.9689, 1.8758, 0.0415);\n    vec3 bt = vec3(0.0557, -0.2040, 1.0570);\n    \n    return vec3(dot(c,rt), dot(c,gt), dot(c,bt));\n}\n\n\nvec3 LUV_Yuv(vec3 c) {\n    vec3 w = whitePoint;\n    float u = c.y / (13.0 * c.x) + w.y;\n    float v = c.z / (13.0 * c.x) + w.z;\n    \n    float Y = c.x <= 8.0 ?\n    w.x * c.x * pow(3.0/29.0, 3.0) :\n    w.x * pow((c.x+16.0)/116.0, 3.0);\n    \n    return vec3(Y,u,v);\n}\n\nvec3 Yuv_RGB(vec3 c) {\n    return XYZ_RGB(Yuv_XYZ(c));\n}\n\nvec3 LUV_RGB(vec3 c) {\n    return Yuv_RGB(LUV_Yuv(c));\n}\n\nvec3 HCL_RGB(vec3 c) {\n    return LUV_RGB(HCL_LUV(c));\n}\n\n\nvec3 HueShiftRGB(vec3 c, float shift, bool clamp) {\n    c = RGB_HCL(c);\n    c.x += shift;\n    if(clamp) {\n        c.y = min(c.y, maxChroma(c.xz));\n    }\n    return HCL_RGB(c);\n    //return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n\tfragColor = vec4(HueShiftRGB(color.xyz, iTime, true), 1.0);\n }","name":"","description":"","type":"image"}]}