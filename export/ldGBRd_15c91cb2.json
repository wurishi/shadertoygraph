{"ver":"0.1","info":{"id":"ldGBRd","date":"1529961797","viewed":486,"name":"Rotating Point Cube","username":"Zeppelin7","description":"A cube made up of points with a camera rotating around it.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["cube","rotating","point"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distLine(vec3 ro, vec3 rd, vec3 p) {\n    return length(cross(p-ro, rd)) / length(rd);\n}\n\nfloat drawPoint(vec3 ro, vec3 rd, vec3 p) {\n    p -= .5; // move cube to center of screen\n    float d = distLine(ro, rd, p);\n    d = smoothstep(.06, .05, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(3.*sin(iTime), 2., -3.*cos(iTime)); // ray origin\n    \n    vec3 lookAt = vec3(0.);\n    \n    float zoom = 1.3;\n    vec3 f = normalize(lookAt - ro);\n    vec3 r = cross(vec3(0.,1.,0.), f);\n    vec3 u = cross(f, r);\n    \n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    vec3 rd = i-ro; // ray dir.\n    \n    float t = iTime;\n    \n    float d = 0.;\n    \n    d += drawPoint(ro, rd, vec3(0., 0., 0.));\n    d += drawPoint(ro, rd, vec3(0., 0., 1.));\n    d += drawPoint(ro, rd, vec3(0., 1., 0.));\n    d += drawPoint(ro, rd, vec3(0., 1., 1.));\n    d += drawPoint(ro, rd, vec3(1., 0., 0.));\n\td += drawPoint(ro, rd, vec3(1., 0., 1.));\n    d += drawPoint(ro, rd, vec3(1., 1., 0.));\n    d += drawPoint(ro, rd, vec3(1., 1., 1.));\n    \n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}