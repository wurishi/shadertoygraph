{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"/*\nColorized Vector Reflections -- svenofnine\nhttps://www.shadertoy.com/view/XXcyDH\n*/\n\n#define TAU float(6.28318530718)                               // as handy as 2*PI\n#define rotate2d(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define cam_pos vec3(0.)                                       // defining a point to stand in Space.\n#define ar float(iResolution.x/iResolution.y)            // aspect ratio\n#define unit float(ar/iResolution.x)                     // the smallest unit at current resolution \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord / iResolution.xy;     \n    uv.x = (uv.x-.5)*ar + .5;\n    vec2 mouse = iMouse.xy / iResolution.xy;  \n    mouse.x = (mouse.x-.5)*ar + .5;\n\n    uv *= rotate2d( -iTime*0.05 );\n    \n    // and a second point to watch at, z. the center one unit in front of me, \n    // all other points should be a bit right,up,left,down from it. like a camera.\n    vec3 cam_lookat = cam_pos+vec3(uv,1.);   // uv is -0.5 .. 0.5 in x and y\n    \n    // this is a vector in the opposite direction.\n    vec3 normal = normalize(   // one unit length vector from:\n        vec3( \n            sin( (uv.x+fract(iTime*0.1))*TAU),          // -1. ... +1. horizontal structures\n            cos(uv.y*TAU)+sin(fract(TAU*0.25+iTime*0.1)*TAU),   // -1. ... +1. vertical structures\n            -1.0                                        // backwards to camera\n        ) );\n    \n    // then make several reflections between the camera-ray and the normal at this fraction / pixel\n    vec3 result = reflect(cam_lookat, normal);\n    for(int i=0; i<10; i++) {\n        result = reflect(result, vec3(mouse, 1.0) );\n        result = reflect(result, normal);\n    }\n    \n    // we have a lot of colours from reflections between two imaginary vectors\n    fragColor = vec4( clamp(normalize( result ), 0., 1.) ,1. );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XXcyDH","date":"1734988282","viewed":95,"name":"Colorized Vector Reflections","username":"Svenofnine","description":"Here I use the reflect()-function to calculate multiple reflections between vectors which are changed with sin() and cos() to build a wavy pattern. The normalized resulting vector in xyz space is used as rgb value then.\nEnjoy!","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["test","reflection","pattern","reflect"],"hasliked":0,"parentid":"","parentname":""}}