{"ver":"0.1","info":{"id":"XlcBWr","date":"1541282680","viewed":91,"name":"TP Blobs","username":"justin_darlet","description":"TP modélisation géométrique","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blobs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Blobs\n// Eric Galin\n\nconst int Steps = 1000;\nconst float Epsilon = 0.01; // Marching epsilon\nconst float T=0.5;\n\nconst float rA=10.0; // Maximum ray marching or sphere tracing distance from origin\nconst float rB=40.0; // Minimum\n\n// Transforms\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);\n}\n\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);\n}\n\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca*p.x + sa*p.y, -sa*p.x + ca*p.y, p.z);\n}\n\n\n// Smooth falloff function\n// r : small radius\n// R : Large radius\nfloat falloff( float r, float R )\n{\n  float x = clamp(r/R,0.0,1.0);\n  float y = (1.0-x*x);\n  return y*y*y;\n}\n\n// Primitive functions\n\n// Point skeleton\n// p : point\n// c : center of skeleton\n// e : energy associated to skeleton\n// R : large radius\nfloat point(vec3 p, vec3 c, float e,float R)\n{\n  return e*falloff(length(p-c),R);\n}\n\nfloat segment(vec3 p, vec3 a, vec3 b, float e, float R)\n{\n\tvec3 u = (b-a) / length(b-a);\n    float l = dot(p-a,u);\n    float res=0.0;\n    if(l < 0.0)              res = length(p-a);\n    else if(l > length(b-a)) res = length(p-b);\n    else                     res = sqrt(length(p-a)*length(p-a)- l*l);\n\treturn e*falloff(res,R);\n}\n\n// Torus\nfloat cercle(vec3 p, vec3 c, vec3 n, float r, float e, float R)\n{     \n    float l = dot(p-c,n);\n    float pc = sqrt((p.x-c.x)*(p.x-c.x) + (p.y-c.y)*(p.y-c.y) + (p.z-c.z)*(p.z-c.z));\n    float hc = sqrt(pc*pc - l*l);\n    float hcr = hc-r;\n    float d = sqrt(hcr*hcr + l*l);\n    return e*falloff(d, R); \n}\n\n// Cube\nfloat cube(vec3 p, vec3 c, float e, float R)\n{\n\tvec3 pc = p-c;\n    float d = max(max(abs(pc.x), abs(pc.y)), abs(pc.z));\n    return e*falloff(d, R);\n}\n\n// Disque\nfloat disque(vec3 p, vec3 c, vec3 n, float r, float e, float R)\n{\n    vec3 pc = p-c;\n    float l = dot(n, pc);\n    vec3 hc = pc - l*n;\n    vec3 k = c + (r*hc)/length(hc);\n\tfloat res = 0.0;\n    if(length(hc)>=r){\n        res =  length(p-k);\n    } else{\n        res = length(pc-hc);\n    }\n\treturn e*falloff(res,R);\n}\n\n// Blending\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Blend(float a,float b)\n{\n    return a+b;\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n    return max(a,b);\n}\n\n// Intersection\nfloat Intersect(float a, float b)\n{\n    return min(a,b);\n}\n\n// Soustraction\nfloat Minus(float a, float b)\n{\n    return min(a,2.0*T-b);\n}\n\n// Objet \"os\"\nfloat bone(vec3 p){\n\tfloat v = Blend(segment(p, vec3( 0.0, 0.0, 0.0), vec3( 5.0, 0.0, 0.0), 1.0, 2.5),\n               \t\tpoint(p,vec3(-2.0, 1.35, 0.0),1.0,2.5));\n  \tv = Blend(v,\n              point(p, vec3(-2.0,-1.35,0.0),1.0,2.5));\n \tv = Blend(v,\n              point(p, vec3(7.0,1.35,0.0),1.0,2.5));\n    v = Blend(v,\n              point(p, vec3(7.0,-1.35,0.0),1.0,2.5));\n    v = Blend(v,\n              segment(p, vec3(2.0,1.0,0.0),vec3( 3.0, 1.0, 0.0), -0.25, 2.0));\n    v = Blend(v,\n              segment(p, vec3(2.0,-1.0,0.0),vec3( 3.0, -1.0, 0.0), -0.25, 2.0));\n    v = Minus(v,\n              point(p, vec3(-3.0,-1.9,0.0),1.0,1.5));\n    v = Minus(v,\n              point(p, vec3(-3.0,1.5,0.0),1.0,1.5));\n    v = Minus(v,\n              point(p, vec3(8.0,-1.9,0.0),1.0,1.5));\n    v = Minus(v,\n             point(p, vec3(8.0,1.5,0.0),1.0,1.5));\n\treturn v;\n}\n\n// Objet cube avec sphere interne\nfloat cubeCreuse(vec3 p){\n\tfloat v = cube(p, vec3( 0.0, 0.0, 0.0), 1.0, 5.0);\n  \tv = Minus(v, \n             point(p, vec3( 0.0, 0.0, 0.0), 1.0, 6.5));\n  \treturn v;\n}\n\n// Sphere entourée de tores\nfloat trappedSphere(vec3 p){\n    float v = Blend(cercle(p, vec3( 0.0, 1.0, 1.0),vec3(1.0, 0.0, 0.0), 3.0, 1.0, 0.5),\n                    point(p,vec3( 0.0, 1.0,1.0),1.0,3.5));\n\tv = Blend(v, \n              cercle(p, vec3( 0.0, 1.0, 1.0),vec3(0.0, 1.0, 0.0), 3.0, 1.0, 0.5));\n  \tv = Blend(v, \n              cercle(p, vec3( 0.0, 1.0, 1.0),vec3(0.5, 0.5, 0.0), 3.0, 1.0, 0.5));\n  \tv = Blend(v, \n              cercle(p, vec3( 0.0, 1.0, 1.0),vec3(-0.5, 0.5, 0.0), 3.0, 1.0, 0.5));\n    return v;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  p.z=-p.z;\n  \n  // exemple fourni\n  /*  \n  float v = Blend(point(p,vec3( 0.0, 1.0, 1.0),1.0,4.5),\n                  point(p,vec3( 2.0, 0.0,-3.0),1.0,4.5));\n  v=Blend(v,point(p,vec3(-3.0, 2.0,-3.0),1.0,4.5));\n  v=Union(v,point(p,vec3(-1.0, -1.0, 0.0),1.0,4.5));\n  //v=Intersect(v, point(p,vec3(-5.0, 2.0,-5.0),1.0,4.5));\n  */\n\n  // formes classiques\n  //float v = cercle(p, vec3( 0.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), 1.0, 1.0, 1.0);\n  //float v = disque(p, vec3( 0.0, 0.0, 0.0), vec3(1.0, 0.0, 0.0), 1.0, 1.0, 1.0);\n  \n  // formes composées\n  //float v = bone(p);\n  //float v = cubeCreuse(p);\n  float v = trappedSphere(p);\n\n  return v-T;\n}\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.0001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat Trace(vec3 o, vec3 u, out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += Epsilon;\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Trace ray using sphere tracing\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,abs(v)/4.0);\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n\n// Enhanced Sphere Tracing\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat EnhancedSphereTrace(vec3 o, vec3 u, out bool h,out int s)\n{\n  h = false;\n\n    // Don't start at the origin, instead move a little bit forward\n    float t=rA;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v > 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      // Ajout de 20% pour la distance du pas\n      t += max(Epsilon,(abs(v)/4.0)+0.2*(abs(v)/4.0));\n      // Escape marched far away\n      if (t>rB)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(0.4, 0.3, 0.0), vec3(0.7, 0.8, 1.0), rd.y*0.5+0.5);\n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n  // point light\n  const vec3 lightPos = vec3(5.0, 5.0, 5.0);\n  const vec3 lightColor = vec3(0.5, 0.5, 0.5);\n\n  vec3 c = 0.25*background(n);\n  vec3 l = normalize(lightPos - p);\n\n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff = 0.5*(1.0+dot(n, l));\n\n  c += diff*lightColor;\n\n  return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return vec3(t,0.25+0.75*t,0.5-0.5*t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 pixel = (gl_FragCoord.xy / iResolution.xy)*2.0-1.0;\n\n  // compute ray origin and direction\n  float asp = iResolution.x / iResolution.y;\n  vec3 rd = normalize(vec3(asp*pixel.x, pixel.y, -4.0));\n  vec3 ro = vec3(0.0, 0.0, 20.0);\n\n  // vec2 mouse = iMouse.xy / iResolution.xy;\n  float a=iTime*0.25;\n  ro = rotateY(ro, a);\n  rd = rotateY(rd, a);\n\n  // Trace ray\n  bool hit;\n\n  // Number of steps\n  int s;\n  \n  // Sphere tracing classique  \n  //float t = SphereTrace(ro, rd, hit, s);\n  // Enhanced sphere tracing  \n  float t = EnhancedSphereTrace(ro, rd, hit, s);  \n  \n  vec3 pos=ro+t*rd;\n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pos);\n\n    // Shade object with light\n    rgb = Shade(pos, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  //rgb = ShadeSteps(s);\n\n  fragColor=vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}