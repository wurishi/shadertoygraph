{"ver":"0.1","info":{"id":"dd2XDw","date":"1673434577","viewed":248,"name":"Tentacles rings","username":"Alpaga","description":"Glow","likes":26,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","glow","tentacles"],"hasliked":0,"parentid":"dsSSDz","parentname":"Ten tacles"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// There are still some raymarching artifacts, I may fix it later.\n// We decrease the max number of marching steps as we approach the edges of the screen,\n// which produces some kind of blur on the sides.\n\nint STEPS = 30;\nconst float FAR = 30.;\n\n// Taken from vgs\n// https://www.shadertoy.com/view/Ml3Gz8\n// Polynomial smooth min (for copying and pasting into your shaders)\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n    return mix(a, b, h) - k*h*(1.0-h);\n}\n// Hash function from Dave_Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 position(float z) {\n    return vec2(cos(z-1.5*iTime),sin(.7*z+iTime));\n}\n\nfloat sdBall(vec3 p, out vec3 color) {\n    vec2 id = floor((p.xy)/6.);\n    p.xy = mod(p.xy,6.)-3.;\n\n    float shift = dot(vec2(3.45,12.8),id);\n    p.z += shift;\n        \n    color = vec3(1);\n\n    float speed = 6.*hash12(id+35.156)+4.;\n    float direction = 2.*step(.5,hash12(id+315.81))-1.;\n    \n    shift = direction*speed*iTime;\n    vec3 iid = vec3(id,round((p.z-shift)/8.));\n    vec3 c;\n    float h1 = .24*hash13(iid);\n    float h2 = hash13(iid+153.42);\n    c.z = 8.*iid.z+direction*speed*mix(iTime,floor(iTime)+smoothstep(h1,1.-h1,fract(iTime)),h2);\n    \n    c.xy = position(c.z).xy;\n    return length(p-c)-1.;\n}\n\nfloat sdTube(vec3 p, out vec3 color) {\n    vec2 id = floor((p.xy)/6.);\n    p.xy = mod(p.xy,6.)-3.;\n\n    float shift = dot(vec2(3.45,12.8),id);\n    p.z += shift;\n    \n    // Tube\n    vec2 pos = position(p.z);\n    float tubes = .4*(length(p.xy-pos)-.5+.2*cos(p.z));\n    \n    // Balls\n    float speed = 6.*hash12(id+35.156)+4.;\n    float direction = 2.*step(.5,hash12(id+315.81))-1.;\n    \n    shift = direction*speed*iTime;\n    vec3 iid = vec3(id,round((p.z-shift)/8.));\n    vec3 c;\n    float h1 = .24*hash13(iid);\n    float h2 = hash13(iid+153.42);\n    c.z = 8.*iid.z+direction*speed*mix(iTime,floor(iTime)+smoothstep(h1,1.-h1,fract(iTime)),h2);\n    \n    c.xy = position(c.z).xy;\n    float balls = length(p-c)-1.;\n    \n    float k = .05+.95*smoothstep(1.,.1,balls);\n    color = k*(.5+.5*cos(vec3(2,3,3)+.8*cos(id.xyx)));\n\n    return smin(tubes,balls,1.);\n}\n\nfloat sd(vec3 p, out vec3 color) {\n    float d = 1e3;\n    \n    for(float i=-1.; i<=1.; i++) {\n        vec3 q = p;\n        q.z = .5*(round(2.*p.z)+i);\n        d = min(d,length(max(vec2(abs(sdTube(q,color)),abs(q.z-p.z)),0.))-.1);\n    }\n    vec3 c;\n    float ball = sdBall(p,c);\n    color = ball<d ? c : color;\n    \n    return min(d,ball);\n}\nvec3 rayColor(vec3 ro, vec3 rd) {\n    float e = .2/iResolution.y;\n    float t;\n    vec3 glow;\n    for(int i=0; i<STEPS; i++) {\n        vec3 p = ro+t*rd;\n        vec3 c;\n        float d = sd(p,c);\n        glow += c/(1.+100.*d*d)*exp(-.005*t*t);\n        if(d<e) break;\n        t += d;\n        if(t>FAR) break;\n    }\n    return glow;\n}\nmat3 viewMatrix(vec3 forward, vec3 up) {\n \tvec3 w = -normalize(forward);\n    vec3 u = normalize(cross(up, w));\n    vec3 v = cross(w, u);\n    \n    return mat3(u,v,w);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float t = .5*iTime;\n    vec3 ro = vec3(-8.*t,.5,2.5*iTime);\n    vec3 rd = normalize(vec3(.6*(2.*fragCoord-iResolution.xy)/iResolution.y,-1.));\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    STEPS = int(10.+100.*16.*uv.x*(1.-uv.x)*uv.y*(1.-uv.y));\n    vec3 forward = vec3(-1,.8,.5*cos(2.*t));\n    vec3 up = vec3(0,1,0);\n    mat3 m = viewMatrix(forward,up);\n    rd = m*rd;\n    \n    vec3 col = rayColor(ro,rd);\n\n    col = min(col,1.);\n    col = pow(col,vec3(.45));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}