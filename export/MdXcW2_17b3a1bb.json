{"ver":"0.1","info":{"id":"MdXcW2","date":"1489884585","viewed":110,"name":"Experimental II","username":"pocketmoon","description":"shadows in light","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["shadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Air Lights by Rob James  \"Flying Streetlights in Fog\"\n// Resuurecting my demo's from 2004/2006 \n// initial set up for inscatter calcs.\n// Integrates in-scatter along the eye/fragment line for a number of light sources.\n vec3 LightPosition[5];\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tfloat itotal = 0.0;\n    \n    float brightness = 0.21;\n    \n    LightPosition[0]=vec3(0.01,0,-110.0);\n    LightPosition[1]=vec3(0.06,0,-110.0);\n    LightPosition[2]=vec3(0,0,-110.0);\n    \n    LightPosition[0].x += 0.02* sin(3.32 * iTime); \n    LightPosition[0].y += 0.01* sin(1.37 * iTime); \n    LightPosition[0].z += 30.315* sin(4.22 * iTime)-5.0; \n    \n    LightPosition[1].x -= 0.01* sin(2.11 * iTime); \n    LightPosition[1].y += 0.01* sin(2.132 * iTime); \n    LightPosition[1].z += 25.315* sin(1.33 * iTime)-10.0; \n    \n    LightPosition[2].x += 0.01* sin(2.21 * iTime); \n    LightPosition[2].y -= 0.02* sin(3.12 * iTime); \n    LightPosition[2].z = 200.315* sin(2.08 * iTime)+00.0; \n    \n    float hres = iResolution.y/2.0;\n    vec3 surf = vec3((fragCoord-hres)/iResolution.y,  -1000.0);\n    \n\tfloat fEye ;   \n    float fEye2 ; \n    float U ;\n    vec3 Pi ;\n    float rDist ;\n    float ooDp ;\n\n    // calulate the magnitude of the pixel - far plane vector\n    float mag =dot (surf,surf);//dot prod of v with itself is length squared...\n \n    for (int i = 0 ; i < 3; i++)\n    {\n        U =dot( LightPosition[i], surf)/mag;      // Signed\n\n        //Gives us the point along the eye/frag line that is closest to light soure.\n        // in a roundabout way we normalise the vector and then multiply it back up to\n        // get the point along it closet to the light\n        Pi =  surf * U;\n\n        //The distance between pI and light\n        vec3 t = Pi - LightPosition[i];\n        \n        rDist = length(t);\n\n        ooDp = 1.0/rDist;\n        \n        float len = length(Pi);        \n        \n\n        // inscatter from Pi to infinity\n        fEye = ooDp * 1.570796; // Arctan tends to pi.2 at infinity\n        \n        //Approximate Estimate of Accumulated in-scatter betweeb eye and Pi\n        fEye2 = ooDp * atan(ooDp * len);            \n        \n        fEye += fEye2 ; \n\n        //itotal = itotal + (brightness*fEye)/-LightPosition[i].z;\n        itotal = itotal + (brightness*fEye)/200.0;      \n    }\n    \n   fragColor =vec4 (itotal);    \n   // fragColor =vec4(fEye/200.0,fEye2/200.0, rDist*100.0, 1.0);    \n   // fragColor =vec4(0.0, 0.0, rDist*20.0, 1.0);    \n  \n}","name":"Image","description":"","type":"image"}]}