{"ver":"0.1","info":{"id":"MtBGW1","date":"1428603281","viewed":182,"name":"Shadow Hall","username":"purton","description":"Testing shadows with raymarching.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","shadows","ao"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float map(in vec3 pos)\n{\n    float negCircle = length(pos) - 1.37;\n    float cube = length(max(abs(pos) - 0.95, 0.0)) - 0.05;\n    float shape = max(-negCircle, cube);\n    \n    float ground = dot(pos, vec3(0.0, 1.0, 0.0)) + 1.0;\n    \n    vec2 repeatPos = mod(pos.xz, 2.5) - 0.5 * 2.5;\n    float pillars = length(max(abs(repeatPos) - 0.075, 0.0)) - 0.025;\n    \n    return min(min(shape, ground), pillars);\n}\n\nvec3 castRay(in vec3 ro, in vec3 rd, in float mint, in float maxt)\n{\n    float t = mint;\n    \n    for(int i = 0; i < 96; i++)\n    {\n        vec3 p = ro + rd*t;\n        float dist = map(p);\n        \n        if (dist <= 0.0 || t > maxt)\n            break;\n        \n        t += max(dist, 0.0001);\n    }\n    \n    return ro + rd*min(t, maxt);\n}\n\nvec3 getNormal(in vec3 pos)\n{\n    vec2 eps = vec2(0.001, 0.0);\n    vec3 normal = vec3(\n        map(pos + eps.xyy) - map(pos - eps.xyy),\n        map(pos + eps.yxy) - map(pos - eps.yxy),\n        map(pos + eps.yyx) - map(pos - eps.yyx));\n    return normalize(normal);\n}\n\nfloat getAO(in vec3 hitp, in vec3 normal)\n{\n    float dist = 0.02;\n    vec3 spos = hitp + normal * dist;\n    float sdist = map(spos);\n    return clamp(sdist / dist, 0.0, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0 + 2.0*uv;\n    p.y *= iResolution.y/iResolution.x;\n    \n    vec3 ro = vec3(0.0, 0.0, -3.0);\n    vec3 rd = normalize(vec3(p.x, p.y, 0.75));\n    \n    vec3 hitp = castRay(ro, rd, 1.5, 32.0);\n    vec3 normal = getNormal(hitp);\n    \n    vec3 lightPos = vec3(cos(iTime * 0.1) * 3.0, 0.0, sin(iTime * 0.4) * 3.0);\n    vec3 lightDir = normalize(lightPos - hitp);\n    vec3 lightHit = castRay(hitp, lightDir, 0.01, distance(hitp, lightPos));\n\t\n    float ao = getAO(hitp, normal);\n    float ndist = distance(ro, hitp) / 32.0;\n    float shadow = pow(distance(hitp, lightHit) / distance(hitp, lightPos), 64.0);\n    float diffuse = clamp(dot(normal, lightDir), 0.0, 1.0);\n    float attenuation = 1.0 / pow(distance(hitp, lightPos), 2.0);\n    float specular = pow(clamp(dot(normalize(lightDir - rd), normal), 0.0, 1.0), 64.0);\n    \n    vec4 diffuseColor = vec4(1.0) * diffuse * attenuation;\n    vec4 specularColor = vec4(1.0) * specular * diffuse * attenuation;\n    vec4 fogColor = vec4(0.5, 0.5, 0.0, 1.0) * pow(ndist, 3.0) +\n        \t\t\tvec4(1.0, 0.0, 0.0, 1.0) * pow(ndist, 2.0);\n    \n    fragColor = sqrt((diffuseColor + specularColor) * min(ao, shadow) + fogColor);\n}\n","name":"","description":"","type":"image"}]}