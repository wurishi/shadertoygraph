{"ver":"0.1","info":{"id":"Wt2Xzz","date":"1564842658","viewed":149,"name":"Bouncing ball","username":"xigh","description":"Simple ray marching test ...\n\nyes ...  I'm a big fan of Andromeda Nexus 7 :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d","spheremarching","bouncingball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 eps = vec2(1e-4, 0.);\n\nvec3 rotateZ(vec3 p, float a) \n{\n\treturn vec3(cos(a)*p.xy+sin(a)*vec2(p.y,-p.x), p.z);\n}\n\nvec3 rotateY(vec3 p, float a) \n{\n    vec2 u = cos(a)*p.xz+sin(a)*vec2(p.z,-p.x);\n\treturn vec3(u.x, p.y, u.y);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\t\n    vec3 d = abs(p)-b;\n    return min(max(d.x,max(d.y, d.z)),0.)+length(max(d,0.));\n}\n\nfloat sdSphere(vec3 p, vec3 c, float r)\n{\n    return length(p - c) - r;\n}\n\nvec2 bounce;\n\nfloat map(vec3 p)\n{\n    p -= vec3(bounce, 0.);\n    p = rotateZ(p, iTime);\n    p = rotateY(p, iTime);\n    return \n        max(\n        \tmax(\n            \tmax(\n            \t\t-sdBox(p + vec3(0., -0.3, 0.), vec3(2.0, 0.15, 2.0)),\n        \t\t\t-sdBox(p + vec3(0., +0.3, 0.), vec3(2.0, 0.15, 2.0))\n        \t\t),\n        \t\tmax(\n            \t\t-sdBox(p + vec3(0., -0.9, 0.), vec3(2.0, 0.15, 2.0)),\n        \t\t\t-sdBox(p + vec3(0., +0.9, 0.), vec3(2.0, 0.15, 2.0))\n        \t\t)\n        \t),\n            max(\n        \t\t-sdSphere(p, vec3(0., 0., 0.), 1.4),\n            \tsdSphere(p, vec3(0., 0., 0.), 1.5)\n            )\n    \t);\n}\n\nvec3 normal(vec3 p)\n{\n    return normalize(vec3(\n        map(p+eps.xyy)-map(p-eps.xyy),\n\t\tmap(p+eps.yxy)-map(p-eps.yxy),\n        map(p+eps.yyx)-map(p-eps.yyx)));\n}\n\nconst vec3 light = vec3(1.0, 1.0, -2.0);\n#define rgb(r,g,b) vec3(r,g,b)/256.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord-iResolution.xy*.5) / iResolution.x;\n\n\t// camera    \n    vec3 org = vec3(0., 0., -5.0);  \n    vec3 dir = normalize(vec3(uv, 1.0));\n\n    vec3 col = rgb(55, 15, 18);\n    \n    bounce.x = abs(.5-fract(0.1*iTime))*5.-1.;\n    bounce.y = abs(.5-fract(0.3*iTime))*5.-1.;\n    \n    // sphere tracing\n    float d, r = 0.;\n    for (int i = 0; i < 200; i++) {\n        vec3 p = org + dir * d;\n        r = map(p);\n        if (d > 100.0)\n            break;\n        if (r < eps.x) {\n            vec3 n = normal(p);\n            vec3 pl = light-p;\n        \tfloat diffuse = max(0.0, dot(n, normalize(pl)));\n            // TODO: blinn-phong\n            col = vec3(.8, .6, .7) * diffuse + rgb(207, 163, 21);\n            break;\n        }\n        d += r;\n    }\n    \n    vec3 gamma = vec3(1.0/2.2);\n    fragColor = vec4(pow(col, gamma), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}