{"ver":"0.1","info":{"id":"wtfGzs","date":"1557297630","viewed":115,"name":"Value-Gradient Noise_0","username":"CGLLAW","description":"A value-gradient noise with weighted sum","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","valuenoise","gradientnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"int perm[256] = int[256](225, 155, 210, 108, 175, 199, 221, 144, 203, 116, 70, 213, 69, 158, 33, 252,\n5, 82, 173, 133, 222, 139, 174, 27, 9, 71, 90, 246, 75, 130, 91, 191,\n169, 138, 2, 151, 194, 235, 81, 7, 25, 113, 228, 159, 205, 253, 134, 142,\n248, 65, 224, 217, 22, 121, 229, 63, 89, 103, 96, 104, 156, 17, 201, 129,\n36, 8, 165, 110, 237, 117, 231, 56, 132, 211, 152, 20, 181, 111, 239, 218,\n170, 163, 51, 172, 157, 47, 80, 212, 176, 250, 87, 49, 99, 242, 136, 189,\n162, 115, 44, 43, 124, 94, 150, 16, 141, 247, 32, 10, 198, 223, 255, 72,\n53, 131, 84, 57, 220, 197, 58, 50, 208, 11, 241, 28, 3, 192, 62, 202,\n18, 215, 153, 24, 76, 41, 15, 179, 39, 46, 55, 6, 128, 167, 23, 188,\n106, 34, 187, 140, 164, 73, 112, 182, 244, 195, 227, 13, 35, 77, 196, 185,\n26, 200, 226, 119, 31, 123, 168, 125, 249, 68, 183, 230, 177, 135, 160, 180,\n12, 1, 243, 148, 102, 166, 38, 238, 251, 37, 240, 126, 64, 74, 161, 40,\n184, 149, 171, 178, 101, 66, 29, 59, 146, 61, 254, 107, 42, 86, 154, 4,\n236, 232, 120, 21, 233, 209, 45, 98, 193, 114, 78, 19, 206, 14, 118, 127,\n48, 79, 147, 85, 30, 207, 219, 54, 88, 234, 190, 122, 95, 67, 143, 109,\n    137, 214, 145, 93, 92, 100, 245, 0, 216, 186, 60, 83, 105, 97, 204, 52);\n\nint STABMASK(int i){\n\treturn i&255;\n}\n\nint PERM(int i){\n\treturn perm[STABMASK(i)];\n}\n\nint INDEX(int ix, int iy, int iz){\n\treturn PERM(ix+PERM(iy+PERM(iz)));\n}\n\nfloat hash(vec2 coord){\n    return float(INDEX(int(floor(coord.x)),\n                       int(floor(coord.y)),\n                       1)\n                )/256.0;\n}\n\nvec2 hash2(vec2 integerCoord){\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    vec2 x = integerCoord*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)));//Copy from https://www.shadertoy.com/view/XdXGW8\n}//减掉1.0去掉了一些不希望的图案，分布在了-1到1，所以后面需要*0.5+0.5来重新映射\n\nfloat gradientNoise(vec2 coord){\n\tvec2 fCoord = fract(coord);\n    vec2 integerCoord = floor(coord);\n    \n    vec2 interpolation = fCoord * fCoord * (3.0 - 2.0*fCoord);\n    \n    return 0.5+0.5*mix( mix(dot(hash2( integerCoord + vec2(0.0,0.0) ), fCoord - vec2(0.0,0.0) ), \n                     dot( hash2( integerCoord + vec2(1.0,0.0) ), fCoord - vec2(1.0,0.0) ), interpolation.x),\n                mix( dot( hash2( integerCoord + vec2(0.0,1.0) ), fCoord - vec2(0.0,1.0) ), \n                     dot( hash2( integerCoord + vec2(1.0,1.0) ), fCoord - vec2(1.0,1.0) ), interpolation.x), interpolation.y);\n}\n\nfloat CatmullRom(vec4 p, float t){\n\tvec4 T = vec4(t*t*t,t*t,t,1);\n    mat4 M = mat4(vec4(-0.5,1.0,-0.5,0.0),\n                  vec4(1.5,-2.5,0.0,1.0),\n                  vec4(-1.5,2.0,0.5,0.0),\n                  vec4(0.5,-0.5,0.0,0.0));\n    vec4 MP = M*p;\n    return dot(T,MP);\n}\n\nfloat valueNoise(vec2 coord){\n    vec2 fCoord = fract(coord);\n    coord = floor(coord);\n    \n    vec4 x;\n    vec4 y;\n    for(int j = -1; j <=2; j++){\n        for(int i = -1; i <=2; i++){\n           x[i+1] = hash(coord + vec2(float(i),float(j)));\n        }\n        y[j+1] = CatmullRom(x,fCoord.x);\n    }\n    return CatmullRom(y,fCoord.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 26.0;\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 coord = uv * scale;\n    \n    float weight = 0.6;\n    \n    float noise = mix(valueNoise(coord), gradientNoise(coord),weight);\n    \n    fragColor = vec4(noise,noise,noise,1.0);\n}","name":"Image","description":"","type":"image"}]}