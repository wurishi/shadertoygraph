{"ver":"0.1","info":{"id":"7l2BDD","date":"1659843907","viewed":101,"name":"circles zooming deeper closer","username":"HaleyHalcyon","description":"a,.u.u","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circlezoomring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TURN 6.2831853\n#define zigzag(x) abs(1. - 2. * fract(x))\n#define angleVec(theta) vec2(cos(theta), sin(theta))\n\nvec3 color(float r) {\n    vec3 c = vec3(\n        cos( r          * TURN * .5),\n        cos((r + 1./3.) * TURN * .5),\n        cos((r + 2./3.) * TURN * .5)\n    );\n    return c*c;\n}\n\nfloat sepMagn(float t) {\n    return 0.04 * (1.0 + 0.4 * sin(2. * t * TURN));\n}\n\nfloat dist2(vec2 uv){\n    return 1. / (0.02 + length(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float time = fract(iTime / 4.0);\n  float t0 =  time       / 3.;\n  float t1 = (time + 1.) / 3.;\n  float t2 = (time + 2.) / 3.;\n  // make the center of the canvas (0.0, 0.0) and\n  // make the long edge of the canvas range from -1.0 to +1.0\n  float scale = max(iResolution.x, iResolution.y);\n  vec2 uv = (fragCoord.xy - 0.50 * iResolution.xy) / scale;\n  \n  const float zoomSpeed = 6.;\n  const float ringSpacing = .1;\n  const float ringThickness = 0.1;\n\n  float dist = log(length(uv));\n  float distA = dist2(\n      uv + sepMagn(t0) * angleVec(TURN * t0)\n  ) * ringSpacing + zoomSpeed * time;\n  float distB = dist2(\n      uv + sepMagn(t1) * angleVec(TURN * t1)\n  ) * ringSpacing + zoomSpeed * time;\n  float distC = dist2(\n      uv + sepMagn(t2) * angleVec(TURN * t2)\n  ) * ringSpacing + zoomSpeed * time;\n  \n  float alphaA = smoothstep(\n      -min(0.2, 4. * fwidth(distA)), 0.,\n      zigzag(distA + t0) - 1. + ringThickness\n  );\n  float alphaB = smoothstep(\n      -min(0.2, 4. * fwidth(distB)), 0.,\n      zigzag(distB + t1) - 1. + ringThickness\n  );\n  float alphaC = smoothstep(\n      -min(0.2, 4. * fwidth(distC)), 0.,\n      zigzag(distC + t2) - 1. + ringThickness\n  );\n\n  vec3 colA = alphaA * color(t0);\n  vec3 colB = alphaB * color(t1);\n  vec3 colC = alphaC * color(t2);\n  \n  vec3 col = colA + colB + colC;\n  \n  // Output to screen\n  fragColor = vec4(\n    col, 1.0\n  );\n}","name":"Image","description":"","type":"image"}]}