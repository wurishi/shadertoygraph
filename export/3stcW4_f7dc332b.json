{"ver":"0.1","info":{"id":"3stcW4","date":"1600962575","viewed":469,"name":"make blue_max hyperspace funnier","username":"allikrid","description":"// There is a lot of cool hyperspace shaders here. Why not fuse them all ?\n// I know it's really dirty, I'm just learning basics on the fly to create game mods.\n//Saved the previous one as backup, I don't understand restore shaders from this website yet","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["space","hyperspace","sh17a","bluemax"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//blue_max https://www.shadertoy.com/view/wtd3zM\n//Ethan Alexander Shulman 2017 (SH17A) https://www.shadertoy.com/view/XdBBDz\n\n// There is a lot of cool hyperspace shaders here. Why not fuse them all ?\n// I know it's really dirty, I'm just learning basics on the fly to create game mods.\n\n// TODO : Remove periodic circle from end of vortex loop\n// TODO : Make stars look bigger in fullscreen.\n// TODO : Start with Blue_max ROTJ Jump instead.\n// TODO : Add Warp Speed 2 : https://www.shadertoy.com/view/4tjSDt\n\n// blue_max https://www.shadertoy.com/view/wtd3zM\n// Based on theGiallo's https://www.shadertoy.com/view/MttSz2\n// MIT License. Use freely; but attribution is expected.\n#define TAU 6.28318\n#define PI 3.141592\nconst float period = 1.0;\nconst float speed  = 2.0;\nconst float rotation_speed = 0.3;\nconst float t2 = 4.0; // Length in seconds of the effect\n\n// This effect fades in and out of white every t2 seconds\n// Remove the next def to get an infinite tunnel instead.\n//#define WHITEOUT 1\n\n// From https://www.shadertoy.com/view/4sc3z2\n// and https://www.shadertoy.com/view/XsX3zB\n#define MOD3 vec3(.1031,.11369,.13787)\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return -1.0 + 2.0 * fract(vec3((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nfloat simplexNoise(vec3 p)\n{\n    const float K1 = 0.333333333;\n    const float K2 = 0.166666667;\n    \n    vec3 i = floor(p + (p.x + p.y + p.z) * K1);\n    vec3 d0 = p - (i - (i.x + i.y + i.z) * K2);\n    \n    vec3 e = step(vec3(0.0), d0 - d0.yzx);\n\tvec3 i1 = e * (1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy * (1.0 - e);\n    \n    vec3 d1 = d0 - (i1 - 1.0 * K2);\n    vec3 d2 = d0 - (i2 - 2.0 * K2);\n    vec3 d3 = d0 - (1.0 - 3.0 * K2);\n    \n    vec4 h = max(0.6 - vec4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);\n    vec4 n = h * h * h * h * vec4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));\n    \n    return dot(vec4(31.316), n);\n}\n\nfloat fBm3(in vec3 p)\n{\n    //p += vec2(sin(iTime * .7), cos(iTime * .45))*(.1) + iMouse.xy*.1/iResolution.xy;\n\tfloat f = 0.0;\n\t// Change starting scale to any integer value...\n\tfloat scale = 5.0;\n    p = mod(p, scale);\n\tfloat amp   = 0.75;\n\t\n\tfor (int i = 0; i < 5; i++)\n\t{\n\t\tf += simplexNoise(p * scale) * amp;\n\t\tamp *= 0.5;\n\t\t// Scale must be multiplied by an integer value...\n\t\tscale *= 2.0;\n\t}\n\t// Clamp it just in case....\n\treturn min(f, 1.0);\n}\n\n// From: https://www.shadertoy.com/view/4dBcWy\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(0.1666666666666667, 0.3333333333333333) ; // 1.0/6.0, 1.0/3.0\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n// Original code ends here.\n\n\nfloat getnoise(int octaves, float persistence, float freq, vec3 coords) {\n\n    float amp= 1.; \n    float maxamp = 0.;\n    float sum = 0.;\n\n    for (int i=0; i < octaves; ++i) {\n\n        sum += amp * snoise(coords*freq); \n        freq *= 2.;\n        maxamp += amp;\n        amp *= persistence;\n    }\n    \n    return (sum / maxamp) * .5 + .5;\n}\n\n/* \n * Based on https://www.shadertoy.com/view/Wl2GRz\n * Created by Louis Sugy, 2019\n * You can use it under the terms of the MIT license\n * (free to use even in commercial projects, attribution required)\n */\n\n#define ATAN5 1.37340076695\n\nvec3 blue_col = vec3(0.1,0.4,1);\n\n\nvec2 cart2polar(vec2 cart) {\n    return vec2(atan(cart.y, cart.x), length(cart));\n}\n\n// From https://www.shadertoy.com/view/4sc3z2\n// and https://www.shadertoy.com/view/XsX3zB\n#define MOD3 vec3(.1031,.11369,.13787)\n\n\n\nfloat jumpstep(float low, float high, float val)\n{\n    /*\n     This curve is plotted here:\n\n     https://iquilezles.org/apps/graphtoy/?f1(x)=atan(10%20*%20x%20-%205.0)%20/%20(2%20*%20atan(5.0))%20+%200.5&f2(x)=clamp(f1(x),%200,%201)&f3(x)=(10%20*%20x%20-%205.0)%20/%20(2%20*%20atan(5.0))%20+%200.5\n    */\n    // This part of the curve looks like a smoothstep going from 0\n    // to halfway up the curve\n    float f1 =  clamp(\n       atan(8.0 * (val-low) / (high-low) - 8.0) / (2.0 * ATAN5) + 0.5, \n       0.0, 1.0\n    );\n    // This is a linear curve\n    float f2 = (8.0 * (val-low) / (high-low) - 8.0) / (2.0 * ATAN5) + 0.5;\n    return max(f1, f2);\n}\n\nvec3 pixelVal(vec2 coord)\n{    \n    // Pixel to point (the center of the screen is (0,0)\n    //float t1 = 2.8, t2 = 4.5;\n    vec3 resolution = iResolution * 4.0;\n    vec2 uv = (2.0 * coord - resolution.xy) / resolution.x;\n    vec2 ad = cart2polar(uv);\n    // ad: polar coords\n    // ad.x = angle\n    // ad.y = radius\n    \n    // Loop forever\n    float time = mod(iTime, t2);\n    \n    // Uncomment this line to revert the effect\n    //time = t2 - time;\n    \n    //time = 0.5 * t2; // DEBUG\n    float t = time / t2; // normalized [0..1] time\n    \n    vec3 bg = vec3(0.0);\n    vec3 fg = 0.75 * vec3(0.082, 0.443, 0.7);\n    vec3 col = mix(bg, fg, t);\n    // whiteout:\n    col = mix(col, vec3(1.0), smoothstep(0.5, 0.9, t));\n \n    //time = 1.25; // DEBUG\n    float intensity = 1.0;\n    // Smaller r's produce longer streaks\n    float r = ad.y;\n    r = r * 50.0 / (5.0 + 60.0 * jumpstep(0.0, t2, 0.5*pow(time, 3.5)));\n\n    // Lower values in the multiplier for ad.x yield thicker streaks\n    float noiseVal = simplexNoise(vec3(60.0 * ad.x, r, 0.0));\n    float noiseGain = 1.0 + 2.0 * smoothstep(0.5, 0.9, t);\n    noiseVal *= noiseGain;\n    \n    // Let's remove a few streaks:\n    float lo_t = clamp(mix(0.25, 0.0, t), 0.0, 1.0);\n    noiseVal = smoothstep(lo_t, 1.0, noiseVal);\n    \n    // Overall intensity of the streaks\n    intensity = mix(0.0, 10.0, t * 1.5);\n    // Multiplying by ad.y darkens the center streaks a little bit\n    noiseVal *= ad.y * intensity * noiseVal;\n    float white_level = smoothstep(0.0, 1.0, noiseVal);\n    white_level *= white_level;\n\n    col += intensity * blue_col * vec3(noiseVal) + vec3(white_level);\n    \n    ///////////////////////////////////////\n    // Add the white disk in the center\n    ///////////////////////////////////////\n    float disk_size = 0.025, falloff, disk_col;\n    float disk_intensity;\n    disk_intensity = smoothstep(0.25, 0.65, t);\n    disk_size = jumpstep(0.0, t2*1.1, 0.5*pow(time, 3.5));\n        \n    falloff = 5.0; // 100 = short fallof, 3.0 = bigger, nicer falloff\n    // Negative fallofs will make a black disk surrounded by a halo\n    disk_col = exp(-(ad.y - disk_size) * falloff);\n    col += disk_intensity * disk_col * vec3(0.913, 0.964, 0.980);\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iTime < 2.5)\n    {\n        // Jump\n        \n        vec3 avgcol = vec3(0.);\n    \n        for(int i = -1; i <= 1; i++)\n            for(int j = -1; j <= 1; j++)\n                avgcol += pixelVal(4.0 * fragCoord + vec2(i, j));\n        avgcol /= 9.0;\n        \n        // Output to screen\n        fragColor = vec4(avgcol, 1.0);\n    }\n    else\n    {\n        ///\n        // A large part was for mouse interaction and needs to be cleaned        \n        ///\n        \n        float t = mod(iTime, t2);\n        \n        t = t / t2; // Normalized time\n\n        vec4 col = vec4(0.0);\n        vec2 q = fragCoord.xy / iResolution.xy;\n        vec2 p = ( 2.0 * fragCoord.xy - iResolution.xy ) / min( iResolution.y, iResolution.x );\n        \n        // Offset initial\n        p += vec2(0.0, -0.0);\n\n        float ay = 0.0, ax = 0.0, az = 0.0;\n\n        mat3 mY = mat3(\n             cos(ay), 0.0,  sin(ay),\n             0.0,     1.0,      0.0,\n            -sin(ay), 0.0,  cos(ay)\n        );\n\n        mat3 mX = mat3(\n            1.0,      0.0,     0.0,\n            0.0,  cos(ax), sin(ax),\n            0.0, -sin(ax), cos(ax)\n        );\n        mat3 m = mX * mY;\n\n        vec3 v = vec3(p, 1.0);\n        v = m * v;\n        float v_xy = length(v.xy);\n        float z = v.z / v_xy;\n\n        // The focal_depth controls how \"deep\" the tunnel looks. Lower values\n        // provide more depth.\n        float focal_depth = 0.15;\n        \n        #ifdef WHITEOUT\n        focal_depth = mix(0.15, 0.015, smoothstep(0.65, 0.9, t));\n        #endif\n\n        vec2 polar;\n        //float p_len = length(p);\n        float p_len = length(v.xy);\n        //polar.y = focal_depth / p_len + iTime * speed;\n        polar.y = z * focal_depth + iTime * speed;\n        //polar.y = z;\n        float a = atan(v.y, v.x);\n        //float a = atan(q.y, q.x);\n        // atan returns a value in the range -PI to PI, let's normalize\n        // that into the range [0..1]\n        a = 0.5 + 0.5 * a / (1.0 * PI);\n        //a -= iTime * rotation_speed;\n        float x = fract(a);\n        // Remove the seam by reflecting the u coordinate around 0.5:\n        if (x >= 0.5) x = 1.0 - x;\n        polar.x = x;\n\n        // Colorize blue\n        float val = 0.45 + 0.55 * fBm3(\n            vec3(vec2(2.0, 0.5) * polar, 0.15 * iTime));\n        //float val = getnoise(8, 0.65, 1.0, vec3(polar, 0));\n        val = clamp(val, 0.0, 1.0);\n        col.rgb = vec3(0.15, 0.4, 0.9) * vec3(val);\n\n        // Add white spots\n        vec3 white = 0.35 * vec3(smoothstep(0.55, 1.0, val));\n        col.rgb += white;\n        col.rgb = clamp(col.rgb, 0.0, 1.0);\n\n        float w_total = 0.0, w_out = 0.0;\n        #ifdef WHITEOUT\n        \n        // Fade in and out from white every t2 seconds\n        float w_in = 0.0;\n        w_in = abs(1.0 - 1.0 * smoothstep(0.0, 0.25, t));\n        w_out = abs(1.0 * smoothstep(0.8, 1.0, t));\n        w_total = max(w_in, w_out);\n        #endif\n\n\n        // Add the white disk at the center\n        float disk_size = max(0.025, 1.5 * w_out);\n        //disk_size = 0.001;\n        float disk_col = exp(-(p_len - disk_size) * 4.0);\n        //col.rgb += mix(col.xyz, vec3(1,1,1), disk_col);\n        col.rgb += clamp(vec3(disk_col), 0.0, 1.0);\n\n\n        #ifdef WHITEOUT\n        col.rgb = mix(col.rgb, vec3(1.0), w_total);\n        #endif\n\n        fragColor = vec4(col.rgb,1);\n\n        //Star Part\n        //Ethan Alexander Shulman 2017 https://www.shadertoy.com/view/XdBBDz\n\n        //fragColor -= fragColor;\n        \n        \n        for (int s = 0; s < 32; s++) {\n            vec2 u = (fragCoord*2.-iResolution.xy+vec2(s%8,s/8)/4.-2.)/iResolution.xy.x;\n            u = floor((6.-vec2(atan(u.y,u.x)/3.,length(u)))*iResolution.xy)+.5;\n\n            float star_period = 0.61;\n            float star_speed = 1.;\n            float star_density = 10.;\n            vec4 chroma = vec4(7,6,4,0);\n\n            fragColor += max(1.-fract(chroma*.02+(u.y*.02+u.x*.4)*fract(u.x*star_period)+iTime*star_speed)*star_density, 0.)/64.;\n        }\n        \n        fragColor = fragColor + vec4(vec3(max(3.5-iTime, 0.)),1.0);\n   }\n    \n}","name":"Image","description":"","type":"image"}]}