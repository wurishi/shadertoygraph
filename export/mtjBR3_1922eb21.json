{"ver":"0.1","info":{"id":"mtjBR3","date":"1694335987","viewed":46,"name":"[DFT] line (roatation & blur)","username":"Fuergu","description":"Move Your Mouse:\nleft & right: blurry\nup & down: rotate","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","dft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/***************************************************\n\nMove Your Mouse:\nleft & right: blur\nup & down: rotate\n\n***************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n  vec2 uv = fragCoord/iResolution.xy;\n// small window\n  if(fragCoord.x < 0.25 * iResolution.x && fragCoord.y > 0.75 * iResolution.y) {\n    uv = fragCoord.xy / vec2(0.25 * iResolution.x, 0.25 * iResolution.y); \n    fragColor = texture(iChannel0, uv); \n  }\n  else {\n    // display iChannel1\n    fragColor = texture(iChannel1, uv); \n    fragColor *=2.5;\n  }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/*DFT*/\n\n/*\nreferenceï¼šhttps://www.shadertoy.com/view/MllGRX\n*/\nvec2 fft(vec2 uv,vec2 FFT_SIZE)\n{\n    \n    vec2 complex = vec2(0,0);\n    \n    uv *= FFT_SIZE;\n    \n    vec2 size = FFT_SIZE;\n    \n    for(int x = 0;x < int(FFT_SIZE.x);x++)\n    {\n    \tfor(int y = 0;y < int(FFT_SIZE.y);y++)\n    \t{\n            float a = 2.0 * PI * (uv.x * (float(x)/size.x) + uv.y * (float(y)/size.y));\n            vec3 samplev = texture(iChannel0,vec2(x,y)/size).rgb;\n            complex += avg(samplev)*vec2(cos(a),sin(a));\n        }\n    }\n    \n    return complex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    uv.x += (1.0-res.x)/2.0;\n    uv.y = 1.0-uv.y;\n    \n    vec3 color = vec3(0.0);\n    float angle=iMouse.y/iResolution.y*5.;\n    mat2 rotMat = mat2(cos(angle), -sin(angle),sin(angle), cos(angle));\n\n    vec2 FFT_SIZE = iResolution.xy/10.;\n    color = vec3(length(fft(uv-0.5,FFT_SIZE))/float(FFT_SIZE.x+FFT_SIZE.y)/2.);\n\tcolor = log(1.+abs(color));\n    fragColor = vec4(color,1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/* line SDF settings */\n\n#define thickness 0.01\n#define linelength 1.5\n\n\n/*constant*/\n#define PI 3.14159265359\n\n/*Function*/\n#define S(a,b,t) smoothstep(a,b,t)\n#define avg(v) ((v.x+v.y+v.z)/3.0)","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* line SDF */\n\nfloat sdfSegment(vec2 p, vec2 a, vec2 b) {\n    float h = min(1.0, max(0.0, dot(p - a, b - a) / dot(b - a, b - a))); //dot(b - a, b - a) == b-a * b-a\n    return length(p - (a + h * (b - a))); // return distance from point to line\n\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    float angle=iMouse.y/iResolution.y*5.;\n    mat2 rotMat = mat2(cos(angle), -sin(angle),sin(angle), cos(angle));\n    \n    vec2 uv = fragCoord / iResolution.xy-.5;\n    \n    vec3 col = vec3(0);\n    \n    vec2 pointA = vec2(0., linelength/2.);\n    vec2 pointB = vec2(0., -linelength/2.);\n    float distance = sdfSegment(uv*rotMat, pointA, pointB);\n    float crispness = pow(iMouse.x/iResolution.x,2.);\n    float smoothStep = smoothstep(thickness, (thickness + crispness), distance);\n    \n    col = 1.0 - vec3(smoothStep);\n    \n    //col = 1.0 - vec3(distance - thickness) * 50.0;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}