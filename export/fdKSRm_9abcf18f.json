{"ver":"0.1","info":{"id":"fdKSRm","date":"1678314210","viewed":95,"name":"Train Ride 3Engine ver1","username":"DENFOR","description":"2021 10 17 try1","likes":5,"published":1,"flags":0,"usePreview":1,"tags":["raymarching","engine"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// \"Train Ride 2\" by dr2 - 2018\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define TREES  1   // optional trees\n\nfloat PrBoxDf (vec3 p, vec3 b);   float PrSphDf(vec3,float r);\nfloat PrBox2Df (vec2 p, vec2 b);\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r);\nfloat PrCapsDf (vec3 p, float r, float h);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo);\nfloat PrFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h);\nfloat Maxv3 (vec3 p);\nvec2 Rot2D (vec2 q, float a);\nfloat SmoothBump (float lo, float hi, float w, float x);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDst (vec2 p);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (vec2 vId);\n\nconst float cHashM = 43758.54;   //  ad for Smoke\nfloat Hashff (float p){  return fract (sin (p) * cHashM); }\n\n\n//--------------------------------------------- ad White Path Route\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n//--------------------------------------------- ad Train Ride Loop\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\n// const float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\nvec3 Noisev3v2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  vec2 ff = f * f;\n  vec2 u = ff * (3. - 2. * f);\n  vec2 uu = 30. * ff * (ff - 2. * f + 1.);\n  vec4 h = Hashv4f (dot (i, cHashA3.xy));\n  return vec3 (h.x + (h.y - h.x) * u.x + (h.z - h.x) * u.y +\n     (h.x - h.y - h.z + h.w) * u.x * u.y, uu * (vec2 (h.y - h.x, h.z - h.x) +\n     (h.x - h.y - h.z + h.w) * u.yx));\n}\n\n//---------------------------------------------- ad   End\n\n#define N_CAR 10\n\nmat3 carMat[N_CAR], trMat;\nvec3 carPos[N_CAR], trPos, qHit, trkAx, trkFx, trkAy, trkFy, sunDir, vnSmk;\nfloat dstFar, tCur, trMid, trLen, tunSep, tunLen, tunRad,  idCyc,tCyc,engFac,trMov, trVel,trDir;\n#if TREES\nvec2 gId, trOff;\nfloat grHt, szFac, hgSize, trkWid ;   // ad\n#endif\nint idObj;\nconst int idRail = 1, idRbase = 2, idSlp = 3, idVia = 4, idTun = 5, idGrnd = 6, \n /* idCar = 11,   idFCar = 12, idBCar = 13, idWhl = 14, idCon = 15, idBLamp = 16, idFLamp = 17, */\n   idTrnk = 18, idLvs = 19,  // 21=>18, 22=>19 change   \n   //--------------------------------id ad\n    idEng = 11, idAxle = 12, idCar = 13, idWheel = 14, idCrod = 15, idFun = 16, idCpl = 17, idLamp = 18,\n   idBand =21,idBase=22, idRoof =23,idCabin=24, idCoal =25,idSpoke =26, \n   idFunl=27,idFunt=28,   idStripe =29   , idSmk =30 ;\n//---------------------------------------\n   \nconst float pi = 3.14159, sqrt3 = 1.7320508;\n//---------------------------------------------------- id end \n\n\n\nvec3 TrackPath (float t)               // line 1002\n{        // de 0.0                            de 0.3\n  return vec3 (0.5+dot (trkAx, sin (trkFx * t)), 2.5 + dot (trkAy, sin (trkFy * t)), t);\n}   \n//-----------------------------------------------------------\n /* vec3 TrackPath (float t)\n{                      //0.021*2.*t  jetcoaster      0.023*t\n  float y = 0.01 + sin (0.021*1. * t) * sin (1. + 0.023 * t);\n                       // 0.035*2.*t\n  return vec3 (15. * sin (0.035*1. * t) * sin (0.012 * t) * cos (0.01 * t) +\n     11. * sin (0.0032 * t)   + 100. * trkOffset.x , 8. * y * y, t);\n}    */\n\n//------------------------------------------------------------------\nvec3 TrackDir (float t)\n{\n  return vec3 (dot (trkFx * trkAx, cos (trkFx * t)), dot (trkFy * trkAy, cos (trkFy * t)), 1.);\n}\n\nfloat GrCentHt (vec2 p)\n{\n  return mix (- (3. + 0.2 * sin (0.1 * 2. * pi * p.y)) *\n     SmoothBump (tunLen + 20., tunSep - tunLen - 20., 20., mod (p.y, tunSep)),\n     0., smoothstep (6., 12., clamp (abs (p.x), 6., 12.)));\n}\n\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; /* qHit = q; */} //ad\n\n\nfloat GrCentDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p.xy -= TrackPath (p.z).xy;\n  q = p;\n  q.z = mod (q.z + 0.5 * tunSep, tunSep) - 0.5 * tunSep;\n  q.y -= -1. - 4. * smoothstep (20., 40., abs (q.x));\n  d = PrFlatCyl2Df (q.zy, tunLen - 4. + 0.03 * q.x * q.x, 4. + 0.02 * cos (0.2 * 2. * pi * q.x));\n  d = max (d, - PrFlatCyl2Df (p.yx, 0.7 * tunRad, tunRad));\n  DMINQ (idGrnd);\n  q = p;\n  d = q.y - GrCentHt (q.xz);\n  DMINQ (idGrnd);\n  return dMin;\n}\n\n/*\nfloat GrndHt (vec2 p)\n{\n  mat2 qRot;\n  vec2 q;\n  float wAmp, h, w;\n  w = smoothstep (2., 30., abs (p.x));\n  h = 0.;\n  if (w > 0.) {\n    q = 0.07 * p;\n    qRot = 2.2 * mat2 (0.8, -0.6, 0.6, 0.8);\n    wAmp = 25.;\n    for (int j = 0; j < 4; j ++) {\n      h += wAmp * Noisefv2 (q);\n      wAmp *= -0.35;\n      q *= qRot;\n    }\n  }\n  if (w < 1.) h = mix (GrCentHt (p), h, w);\n  return h;\n}\n*/\n//-----------------------------------------------------Train Ride Loop insert\nfloat GrndHt (vec2 p, int hiRes)\n{\n  const vec2 vRot = vec2 (1.4624, 1.6721);\n  vec2 q = p * 0.06;   // :0.06\n  float w = smoothstep(2.,25.,abs(p.x));    // enlage width of mountains\n  //  w *= (0.75 * Noisefv2 (0.25 * q) + 0.15) ;  // w=( )*0.0 sea\n  w *= 36.*(1.0+0.4*sin(iTime*0.205)) * w;              // de 36.0 ;   96.~~150.\n  vec2 vyz = vec2 (0.);\n  float ht = 0.;\n  for (int j = 0; j < 10; j ++) {\n    vec3 v = Noisev3v2 (q);\n    vyz += v.yz;\n    ht += w * v.x / (1. + dot (vyz, vyz));\n    if (j == 4) {\n      if (hiRes == 0) break;\n    }\n    w *= -0.41 ;     // de -0.37;      \n    q *= mat2 (vRot.x, vRot.y, - vRot.y, vRot.x)*1.;// de mat2( )*1.\n     }\n  vec3 pt = TrackPath (p.y);\n  pt.y -= 0.05;      //-=8.;    de -=2.;\n  float g = smoothstep (1.5, 4.5*(1.+0.*sin(iTime*0.2)), \n           /*sqrt*/(sqrt (abs (p.x - pt.x))));// de (1.5,4.5 )\n  return min (ht, pt.y * (1. - g) + ht * g);  // out of TrackPath\n // return pt.y *  g + ht *(1.- g);     // GrndHt && Moth on the TrackPath\n}\n//------------------------------------------------ Grnd Col insert\nvec4 GrndCol (vec3 p, vec3 n)\n{\n /* const*/ vec3 gCol1 = vec3 (0.6, 0.7, 0.7), gCol2 = vec3 (0.2, 0.1, 0.1),\n     gCol3 = vec3 (0.4, 0.3, 0.3), gCol4 = vec3 (0.1, 0.2, 0.1),\n     gCol5 = vec3 (0.7, 0.7, 0.8),     // upper eria  white\n     gCol6 = vec3 ( 0.05,0.38,0.03) ,   // de(0.05, 0.3, 0.03),middle eria green\n     gCol7 = vec3 (0.1, 0.08, 0.);     // lower eria black\n  vec2 q = p.xz;\n  float f, d;\n  float cSpec = 0.;\n  f = 0.5 * (clamp (Noisefv2 (0.1 * q), 0., 1.) +\n      0.8 * Noisefv2 (0.2 * q + 2.1 * n.xy + 2.2 * n.yz));\n  vec3 col = f * mix (f * gCol1 + gCol2, f * gCol3 + gCol4, 0.65 * f);\n  if (n.y < 0.5) {   // de n.y<0.5\n    f = 0.4 * (Noisefv2 (0.4 * q + vec2 (0., 0.57 * p.y)) +\n       0.5 * Noisefv2 (6. * q));\n    d = 4. * (0.5 - n.y);\n    col = mix (col, vec3 (f), clamp (d * d, 0.1, 1.));\n    cSpec += 0.1;\n  }\n  if (p.y > 22.) {    // de p.y>22.\n    if (n.y > 0.25) {\n      f = clamp (0.07 * (p.y - 22. - Noisefv2 (0.2 * q) * 15.), 0., 1.);\n      col = mix (col, gCol5, f);\n      cSpec += f;\n    }\n  } else {\n    if (n.y > 0.45) {      \n      vec3 c = (n.y - 0.3) * (gCol6 * vec3 (Noisefv2 (0.4 * q),\n         Noisefv2 (0.34 * q), Noisefv2 (0.38 * q)) + vec3 (0.02, 0.1, 0.02));\n      col = mix (col, c, smoothstep (0.45, 0.65, n.y) *\n         (1. - smoothstep (15., 22., p.y - 1.5 + 1.5 * Noisefv2 (0.2 * q))));\n    }\n    if (p.y < 0.35 && n.y > 0.84) {    // de p.y<0.65 && n.y>0.4\n      d = n.y - 0.4;\n      col = mix (col, d * d + gCol7, 2. * clamp ((0.65 - p.y -\n         0.35 * (Noisefv2 (0.4 * q) + 0.5 * Noisefv2 (0.8 * q) +\n         0.25 * Noisefv2 (1.6 * q))), 0., 0.3));\n      cSpec += 0.1;\n    }\n  }\n  return vec4 (col, cSpec);\n}\n\n//------------------------------------------------------\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    p.x -= TrackPath (p.z).x;\n    h = p.y - GrndHt (p.xz,0);\n    if (h < 0. || s > dstFar) break;\n    sLo = s;\n    s += max (0.01 * s, 0.4 * h);\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      p.x -= TrackPath (p.z).x;\n      if (p.y > GrndHt (p.xz,0)) sLo = s;\n      else sHi = s;\n    }\n    dHit = 0.5 * (sLo + sHi);\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  vec2 e;\n  e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  p.x -= TrackPath (p.z).x;\n  return normalize (vec3 (GrndHt (p.xz,0) - vec2 (GrndHt (p.xz + e.xy,0), GrndHt (p.xz + e.yx,0)), e.x).xzy);\n}\n\n//------------------------------------------------------- CarDf()  END\n\n//------------------------------------------------------ EngDf() CarDf() ad start\n//------------------------------------------------          cf  Thoms 3X insert\nfloat EngDf (vec3 p, float dMin)\n{\n  vec3 q;    p /=engFac ;  p *=1.2 ; // ad\n  p *=vec3(1.,1.,-1.) ; //shrink by 3.\n  float d, aw, a, sx, wRad, tw;       p.y +=0.10; //down\n  wRad = 0.8;     float szFacX=0.07 ; float trkWidX= 0.07095; // ad\n//xxx  tw = 214. * szFacX * trkWidX ;  // 0.22/0.07=WhitePath/Thomas 3X ratio\n  tw = 1.30970423; // trkWid/engFac;     ///////////////////////////////////////////TRY Pending\n  \n  q = p;\n  q -= vec3 (0., -0.2, 0.5);\n  d = max (PrCapsDf (q, 1., 2.), - (q.z + 1.7));\n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp +*/ idEng; }\n  //----------------------------------------------------------- smoke\n  q = p;  q.z = abs (q.z - 0.85);  q -= vec3 (0., -0.2, 1.8);\n  d = PrCylDf (q, 1.05, 0.05);   \n  \n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp +*/ idBand; }\n  //---------------------------------------------------------smoke\n\n  \n  //--------------------------------------------------------  smoke\n  q = p;  q -= vec3 (0., -1.3, -0.25);\n  d = PrBoxDf (q, vec3 (1., 0.1, 3.2));\n  q = p;  q -= vec3 (0., -1.4, 3.);\n  d = min (d, PrBoxDf (q, vec3 (1.1, 0.2, 0.07)));\n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp +*/ idBase; }\n  q.x = abs (q.x);  q -= vec3 (0.6, 0., 0.1);\n  d = PrCylDf (q, 0.2, 0.1);\n  q = p;  q -= vec3 (0., -2.4, -1.75);\n  d = min (d, max (PrCylDf (q, 4., 0.65), - (q.y - 3.75)));\n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp + */idRoof; }\n  q = p;  q -= vec3 (0., 0.01, -1.75);\n  d = max (max (PrBoxDf (q, vec3 (1., 1.4, 0.6)),\n     - PrBoxDf (q - vec3 (0., 0., -0.2), vec3 (0.95, 1.3, 0.65))),\n     - PrBoxDf (q - vec3 (0., 0.7, 0.), vec3 (1.1, 0.4, 0.5)));\n  q.x = abs (q.x);  q -= vec3 (0.4, 1., 0.4);\n  d = max (d, - PrBoxDf (q, vec3 (0.35, 0.15, 0.3)));\n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp +*/ idCabin;  qHit = q; }\n  q = p;  q -= vec3 (0., -0.5, -3.15);\n  d = PrBoxDf (q, vec3 (1., 0.7, 0.3));\n  if (d < dMin) { dMin = d;  idObj =/* idObjGrp +*/ idCoal;  qHit = q; }\n  q = p;  q -= vec3 (0., -1.4, -3.5);\n  d = PrCylDf (q.xzy, 0.4, 0.03);\n  if (d < dMin) { dMin = d;  idObj =/* idObjGrp +*/ idCpl; }\n  \n  //-----------------------------------------------------Delete idWheel => OK\n  q = p;  q.xz = abs (q.xz);  //q -= vec3(1.30, -1.4, 1.1);　　　　//tw =1.42\n  q -=vec3(1.3,-1.4,1.1);\n  d = PrCylDf (q.zyx, wRad, 0.1); \n  float trSpd =0.8 ;\n // aw = - trSpd * tCur / (szFac * wRad);   //Black Plane is cut by delete 215line?// aw eqution\n  if (d < dMin) {\n    d = min (max (min (d, PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n       - PrCylDf (q.zyx, wRad - 0.1, 0.12)), PrCylDf (q.zyx, 0.15, 0.10));\n    if (d < dMin) { dMin = d;  idObj = idWheel; }  }\n  //--------------------------------------------------------------  \n    \n    q = p;  q.x = abs (q.x);  q -= vec3 (tw - 0.17, -1.4, 1.1 * sign (q.z));\n    q.yz = q.yz * cos (/*aw*/ tCur*5.) + q.zy * sin (/*aw*/tCur*5.) * vec2 (-1., 1.);                 //////aw\n    a = floor ((atan (q.y, q.z) + pi) * 8. / (2. * pi) + 0.5) / 8.;\n    q.yz = q.yz * cos (2. * pi * a) + q.zy * sin (2. * pi * a) * vec2 (-1., 1.);\n    q.z += 0.5 * wRad;\n    d = PrCylDf (q, 0.05, 0.5 * wRad);\n    if (d < dMin) { dMin = d;  idObj =  idSpoke; }\n // }\n  \n  q = p;  sx = sign (q.x);  q.x = abs (q.x);\n  q -= vec3 (/*tw*/1.42 + 0.08, -1.4, 0.);                                         // tw\n  aw -= 0.5 * pi * sx; \n  q.yz -= 0.3 * vec2 (cos (-aw*tCur*5.),  sin (-aw*tCur*5.));                                /// aw\n  d = PrCylDf (q, 0.04, 1.2);\n  q.z = abs (q.z);  q -= vec3 (-0.1, 0., 1.1);\n  d = min (d, PrCylDf (q.zyx, 0.06, 0.15));\n  if (d < dMin) { dMin = d;  idObj =/* idObjGrp + */idCrod; }\n  \n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 1.1);\n  d = PrCylDf (q.zyx, 0.1, /*tw*/1.42 - 0.1);                                     //tw\n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp +*/ idAxle; }\n  //------------------------------------------------------------------ smoke\n  q = p;  q -= vec3 (0., 1.1, 2.15);  d = PrCylDf (q.xzy, 0.3, 0.5);\n  if (d < dMin) { dMin = d;  idObj =/* idObjGrp +*/ idFunl; }\n  //------------------------------------------------------------------ smoke\n\n  //----------------------------------------------------             \n  q = p;  q -= vec3 (0., 1.5, 2.15);\n  d = max (PrCylDf (q.xzy, 0.4, 0.15), - PrCylDf (q.xzy, 0.3, 0.2));\n  q = p;  q -= vec3 (0., 0.8, 0.55);\n  d = min (d, PrCapsDf (q.xzy, 0.3, 0.2));\n  if (d < dMin) { dMin = d;  idObj =/* idObjGrp +*/ idFunt; }\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, 0.85);\n  d = PrBoxDf (q, vec3 (0.05, 0.1, 1.8));\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, -1.75);\n  d = min (d, PrBoxDf (q, vec3 (0.05, 0.1, 0.6)));\n  q = p;  q.x = abs (q.x);  q -= vec3 (1., -0.2, -3.15);\n  d = min (d, PrBoxDf (q, vec3 (0.05, 0.1, 0.3)));\n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp + */idStripe; }\n  q = p;  q -= vec3 (0., -0.2, 3.5);\n  d = PrCylDf (q, 0.2, 0.1);\n  if (d < dMin) { dMin = d;  idObj = /*idObjGrp +*/ idLamp; }\n  \n     \n  return dMin*engFac  /**0.22/0.07 */ ;\n}\n\n//------------------------------------------------- Thomas 3X END\n\n\nfloat CarDf (vec3 p, float dMin)       //---------- White Pass CarDf() ad\n{\n  vec3 q;\n  float wRad, d, tw;\n  wRad = 0.35;       \n    p /= engFac;  p *=1.2; // ad\n // p /= szFac;\n  tw = trkWid / engFac;\n  q = p;\n  d = min (min (PrBoxDf (q, vec3 (1.3, 1.4, 2.8)),\n     max (PrCylDf (q - vec3 (0., -2.35, 0.), 4., 2.8), - (q.y - 1.4))),\n     PrBoxDf (q - vec3 (0., -1.6, 0.), vec3 (0.8, 0.3, 2.)));\n  DMINQ (idCar);\n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.4, 2.9);\n  d = PrCylDf (q.xzy, 0.4, 0.03);\n  DMIN (idCpl);\n                                      //tw =trkWid/szFac =0.31/0.22=1.41;\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (/*tw*/1.41 - 0.1, -1.85, 1.1);   //---- tw\n  d = min (min (PrCylDf (q.zyx, wRad, 0.1),\n     PrCylDf (q.zyx - vec3 (0.,0., -0.07), wRad + 0.05, 0.03)),\n     PrCylDf (q.zyx, 0.15, 0.10));\n  q.x -= 0.1;\n  d = max (d, - PrCylDf (q.zyx, 0.2, 0.05));\n  DMIN (idWheel);\n  \n  q = p;  q.z = abs (q.z);  q -= vec3 (0., -1.85, 1.1);\n  d = PrCylDf (q.zyx, 0.1, /*tw*/1.41 - 0.15);                          //--- tw\n  DMIN (idAxle);    \n   \n   //dMin /=2.2;\n  return dMin;\n}\n\n//------------------------------------------------------ EngDf(),CarDf()  END\n\nfloat TrackDf (vec3 p, float dMin)\n{\n  vec3 q;\n  vec2 b;\n  float d;\n  p.xy -= TrackPath (p.z).xy;\n  q = p;\n  q.z = mod (q.z + 0.5 * tunSep, tunSep) - 0.5 * tunSep;\n  d = min (PrFlatCylAnDf (q.yxz, 0.7 * tunRad, tunRad, 0.05, tunLen),\n     PrBoxDf (q, vec3 (tunRad, 0.15, tunLen)));\n  DMINQ (idTun);\n  q = p;\n  q.y += 3.6;\n  q.z = mod (q.z + 2., 4.) - 2.;\n  b = abs (q.xz) - vec2 (0.35, 1.8);\n  d = max (max (abs (q.x) - 0.7, q.y - 3.82),\n     - max (length (q.yz + vec2 (clamp (q.y, -2., 2.), 0.)) - 5.5, min (b.x, b.y)));\n  DMINQ (idVia);\n  q = p;\n  q.y -= 0.17;\n  d = PrBox2Df (q.xy, vec2 (0.6, 0.05));\n  DMINQ (idRbase);\n  q = p;\n  q.y -= 0.15;\n  q.z = mod (q.z + 1., 2.) - 1.;\n  d = PrBoxDf (q, vec3 (0.6, 0.1, 0.15));\n  DMINQ (idSlp);\n  q = p;\n  q.x = abs (q.x) - 0.4;\n  q.y -= 0.33;\n  d = PrRoundBox2Df (q.xy, vec2 (0.012, 0.027), 0.02);\n  DMINQ (idRail);\n  return dMin;\n}\n//-------------------------------------  SmkDf  one smoke~multi\n//-------------------------------------\n float SmkDf(vec3 p, float dMin){  dMin = dstFar;   float nsShow =20. ;  float d;\n     vec3 q =p  ; q.y -=0.9 ; q.z +=0.5 ;\n     d = min( dMin, PrSphDf(q-vec3 (0.,-0.3,-0.16 ), 0.122)) ;\n     d = min( d,    PrSphDf(q-vec3 (0.,-0.1 ,-0.1 ), 0.162)) ;\n     d = min( d,    PrSphDf(q-vec3( 0.1,0.1,0.2 ),  0.1752 )) ;     // ad yaxis 0.5 up\n     d = min( d,    PrSphDf(q-vec3( 0.0,0.1,0.5 ),  0.18752 )) ;\n     d = min( d,    PrSphDf(q-vec3( 0.0,0.1,0.7 ),  0.19852 )) ;\n     d = min( d,    PrSphDf(q-vec3( 0.0,0.1,0.99 ), 0.2052 )) ;\n     d = min( d,    PrSphDf(q-vec3( 0.0,0.1,1.3  ), 0.2152 )) ;\n     d = min( d,    PrSphDf(q-vec3( 0.0,0.1,1.6  ), 0.2252 )) ;\n     d = min( d,    PrSphDf(q-vec3( 0.0,0.1,1.99  ), 0.2452 )) ;   DMINQ(idSmk );\n     //----------Second Engine smoke ad\n     for(int i = 0; i <12 ; i ++){\n      vec3 offset = vec3(0.3*sin(tCur*0.8), 0.04+float(i)*0.03,2.50+float(i)*0.3)*(1.+0.2*Hashff(3.*tCur+1.1 ));    // x axis noiseFn\n     d = min( d,   PrSphDf(q- offset, 0.18*(1.+0.13*float(i))) ); }  DMINQ(idSmk ) ;\n     //----------------------------- Second Engine smoke END     \n      //----------Third Engine smoke ad\n  /*   for(int i = 0; i <9 ; i ++){\n      vec3 offset = vec3(0.03*sin(tCur), 0.02+float(i)*0.03,12.3+float(i)*0.3)*(1.+0.05*Hashff(2.*tCur+1.1 ));    // x axis noiseFn\n     d = min( d,   PrSphDf(q- offset, 0.16*(1.+0.15*float(i))) ); }  */\n      // DMINQ (idSmk) ;  \n     //----------------------------- Third Engine smoke END     \n      \n                          //        \n       return dMin;  }\n\nfloat transSmkDf(vec3 p) {float dMin; dMin =dstFar ;\n  dMin = SmkDf(carMat[0]*(p-carPos[0].xyz),dMin ); return dMin; }\n\nfloat transSmkRay(vec3 ro,vec3 rd) { float dHit,d; dHit =0.;\n  for(int j =0; j<120; j++ ){ d = transSmkDf(ro+dHit*rd) ; dHit +=d;\n  if(d<0.001 || dHit>dstFar ) break ; } return dHit   ;}\n\nvec3 SmkNf (vec3 p){  vec4 v;    vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (transSmkDf (p + e.xxx), transSmkDf (p + e.xyy), transSmkDf (p + e.yxy), transSmkDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw); }\n//----------------------------------------------------------- Smoke END\n//----------------------------------\nfloat ObjDf (vec3 p)\n{\n  float dMin;  vec3 q ;   float d; \n  dMin = dstFar;\n  dMin = GrCentDf (p, dMin);\n  dMin = TrackDf (p, dMin);\n   \n  //----------------------------------------------  EngDf() CarDf() insert\n  for (int k = 0; k < N_CAR; k ++) {\n    // if (k == nCar) break;\n    q = carMat[k]*(p - carPos[k].xyz );\n      d = PrCylDf (q.xzy, 3.4 * engFac*0.726905, 2.2 * engFac*0.7269505);\n    \n    if (d <  0.20 ) {\n\n    //           first 1   forth4   eigth 8 =>EngDf()\n      dMin = (k== 0 || k ==1 ||k == 3) ? EngDf (q, dMin) : CarDf (q, dMin);\n            \n      \n    } else dMin = min (dMin, d*0.99);   // ???????\n  }\n  //-----------------------------------------------\n  return  dMin;            \n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 250; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.001, -0.001);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy), ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.05, 0.2);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\n#if TREES\n\nfloat TreesDf (vec3 p)\n{\n  vec3 q, qq;\n  float dMin, d, ht;\n  dMin = dstFar;\n  if (szFac > 0.) {\n    p.xz -= HexToPix (gId * hgSize) + trOff;\n    p.y -= grHt;\n    dMin /= szFac;\n    p /= szFac;\n    ht = 2.;\n    q = p;\n    q.y -= ht - 0.1;\n    d = PrCylDf (q.xzy, 0.15 - 0.03 * q.y / ht, ht);\n //   DMINQ (idTrnk);                       // tree delete\n    q = p;\n    q.y -= ht + 2.5;\n    d = PrCapsDf (q.xzy, 1. - 0.2 * q.y, 1.5);\n //   DMINQ (idLvs);                       // tree delete\n    dMin *= szFac;\n  }\n  return dMin;\n}\n\nvoid SetTrParms ()\n{\n  vec2 g, w;\n  float t;\n  szFac = 0.2 + 0.3 * Hashfv2 (17. * gId + 99.);\n  w = Hashv2v2 (33. * gId);\n  g = HexToPix (gId * hgSize);\n  g.x -= TrackPath (g.y).x;\n  trOff = hgSize * max (0., 0.5 * sqrt3 - szFac) * w.x * sin (2. * pi * w.y + vec2 (0.5 * pi, 0.));\n  t = abs (mod (g.y + 0.5 * tunSep, tunSep) - 0.5 * tunSep);\n  grHt = (t > tunLen) ? GrndHt (g + trOff,1) : 3.2;          // GrntHt(  , 1?0?):3.2\n  if (! (grHt < -0.5 && abs (g.x) >  2. * tunRad || t < 0.5 * tunLen && abs (g.x) < 10.)) szFac = 0.;\n}\n\nfloat TreesRay (vec3 ro, vec3 rd, float dstLim)\n{\n  vec3 vri, vf, hv, p;\n  vec2 edN[3], pM, gIdP;\n  float dHit, d, s;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= sign (dot (edN[k], rd.xz));\n  vri = hgSize / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]),\n     dot (ro.xz, edN[2])) / hgSize;\n  pM = HexToPix (PixToHex (ro.xz / hgSize));\n  gIdP = vec2 (-99.);\n  dHit = 0.;\n  for (int j = 0; j < 80; j ++) {\n    hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n    s = min (hv.x, min (hv.y, hv.z));\n    p = ro + dHit * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    d = TreesDf (p);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + 0.002;\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n    }\n    if (d < 0.0005 || dHit > dstLim || p.y < -5. || rd.y > 0. && p.y > 25.) break;\n  }\n  if (d >= 0.0005) dHit = dstFar;\n  return dHit;\n}\n\nvec3 TreesNf (vec3 p)\n{\n  vec4 v;\n  vec2 e = vec2 (0.0005, -0.0005);\n  v = vec4 (TreesDf (p + e.xxx), TreesDf (p + e.xyy), TreesDf (p + e.yxy), TreesDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat TreesSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 gIdP;\n  float sh, d, h;\n  sh = 1.;\n  gIdP = vec2 (-99.);\n  d = 0.01;\n  for (int j = 0; j < 20; j ++) {\n    p = ro + d * rd;\n    gId = PixToHex (p.xz / hgSize);\n    if (gId.x != gIdP.x || gId.y != gIdP.y) {\n      gIdP = gId;\n      SetTrParms ();\n    }\n    h = TreesDf (p);\n    sh = min (sh, smoothstep (0., 0.05 * d, h));\n    d += clamp (3. * h, 0.1, 0.2);\n    if (sh < 0.05) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\n#endif\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.3, 0.3, 0.9), vec3 (0.45, 0.45, 0.6), 1. - max (rd.y, 0.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  rd.y = abs (rd.y);\n  ro.xz += 2. * tCur;\n  col = SkyBg (rd) + 0.1 * vec3 (1., 1., 0.9) * pow (max (dot (rd, sunDir), 0.), 64.);\n  col = mix (col, vec3 (0.8), clamp (0.2 + Fbm2 (0.05 *\n     (ro.xz + rd.xz * (100. - ro.y) / max (rd.y, 0.001))) * rd.y, 0., 1.));\n  return col;\n}\n\nvec4 ObjCol ()\n{\n  vec4 col4, carCol, carCol2, objCol;  // ad\n  col4 = vec4 (0.);\n  carCol = vec4 (0.1, 0.3, 1., 0.3);\n  \n    //--------------------------------------------- thomas X3  Eng color\n  const vec4 cR = vec4 (1., 0., 0., 1.), cY = vec4 (1., 1., 0., 1.),\n     cG = vec4 (0., 1., 0., 1.), cB = vec4 (0., 0., 1., 1.),\n     cBlk = vec4 (0.03, 0.03, 0.03, 0.1), cLB = vec4 (0.4, 0.4, 1., 1.);\n  //col4 = vec4 (0.);\n  //--------------------------------------------- white Path Route Car color\n   float idCyc = floor(tCur/ (3.0*pi)) ;      //  de  /( 8./pi)pending  toriaezu??\n  float h = Hashff (5. * idCyc + 17.1);\n    carCol = vec4 (HsvToRgb (vec3 (mod (h, 3.), 0.8, 0.9)), 0.2); // de mod(h,1.)\n    carCol2 = vec4 (HsvToRgb (vec3 (mod (h + 0.5, 3.), 0.8, 0.9)), 0.3);\n  //--------------------------------------------------------\n  \n  if (idObj == idTun) {\n    if (abs (qHit.x) < tunRad && (qHit.y < 0.7 * tunRad ||\n       length (vec2 (qHit.x, qHit.y - 0.7 * tunRad)) < tunRad))\n       col4 = (abs (qHit.x) < 0.03 && abs (mod (4. * qHit.z / tunLen + 0.5, 1.) - 0.5) < 0.1) ?\n       vec4 (0.8, 0.8, 0.4, -1.) : 0.2 * vec4 (0.5, 0.3, 0.1, 0.);\n    else col4 = vec4 (0.5, 0.3, 0.1, 0.);\n  } else if (idObj == idVia) {\n    col4 = vec4 (0.6, 0.4, 0.2, 0.05) * (0.6 + 0.4 * SmoothBump (0.05, 0.95, 0.02,\n       mod (4. * qHit.y, 1.)));\n  } else if (idObj == idRbase) {\n    col4 = vec4 (0.5, 0.3, 0.2, 0.05) * (1. - 0.5 * Noisefv2 (128. * qHit.xz));\n  } else if (idObj == idSlp) {\n    col4 = vec4 (0.65, 0.6, 0.6, 0.1);\n  } else if (idObj == idRail) {\n    col4 = vec4 (0.3, 0.3, 0.4, 0.4);\n  } \n\n  \n  //------------------------------------------------  EngDf()  CarDf() color insert\n  //------------------------------------------------------------------ Thomas X3 Eng \n    else if (idObj == idEng ) col4 = cG;\n    \n      else if (idObj == idCabin) col4 = (qHit.y > -1.3) ? cLB : cB;\n    else if (idObj == idCoal)\n       col4 = (qHit.y > 0.3) ?  cBlk  : cB;\n    else if (idObj == idBase || idObj == idBand || idObj == idAxle)\n       col4 = vec4 (0.3, 0.2, 0.2, 0.3);\n    else if (idObj == idRoof || idObj == idCpl || idObj == idFunl )\n       col4 =  cG ;\n    else if (idObj == idFunl ) col4 = cBlk;\n    else if (idObj == idWheel || idObj == idSpoke) {col4 = vec4 (0.6, 0.7, 0.7, 0.5);}\n    else if (idObj == idCrod) col4 = cY;\n    else if (idObj == idStripe || idObj == idFunt) col4 =  cG ;\n    else if (idObj == idSmk ) col4 = vec4(1.0,1.0,1.0,0.9)  ;     // ad\n    else if (idObj == idLamp ) {col4 =(mod(tCur+0.667*float(1),2.)<1.)?vec4(1.,1.,1.,-1.):vec4(0.6,0.6,0.6,-1.);}\n //------------------------------------------------------------------ Thomas X3   \n //------------------------------------------------------------White Path Route Car\n    else if (idObj == idCar) \n      col4 = (abs (qHit.y + 0.2) < 0.05 || qHit.y > 1.4) ? carCol2 : carCol;\n      if (qHit.y < -1.15) col4 *= 0.5;\n      if (abs (qHit.y - 0.6) < 0.6 && (abs (qHit.x) < 0.5 || abs (abs (qHit.z) - 1.2) < 1.1))\n         col4 *= 0.7;\n    else if (idObj == idFun) \n      col4 = (qHit.y > 1.35) ? carCol : carCol2;\n \n \n \n  //-----------------------------------------------------EngDf() CarDf() color end\n  \n  return col4;\n}\n\n\n\n//-------------------------------------------------------\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;    vec3 col, colS, vn, vnn, smkvn;\n  float dstHit, dstObj, dstTrees, dstGrnd, dstMin, f, dFac, dkTun, sh,h ,dstSmk;\n  int idObjS; \n  //----------------------------------------------------Smoke\n  dstSmk =transSmkRay(ro,rd);    smkvn=  SmkNf(ro);  //-------------SmkBallHit ad\n   if (dstSmk < dstFar) vnSmk = VaryNf (32. * (ro + dstSmk * rd), smkvn /*vnSmk*/, 2.);    \n  //-------------------------------------------------------Smoke END\n  \n  \n#if TREES\n  vec2 vf;\n  int idObjT;\n#endif\n  bool isWind, isGrnd, isCar;\n  dstGrnd = GrndRay (ro, rd);\n  dstObj = ObjRay (ro, rd);\n  dstMin = min (min (dstGrnd, dstObj), dstFar);\n#if TREES\n  idObjT = idObj;\n  dstTrees = TreesRay (ro, rd, dstMin);\n  if (dstTrees > dstObj) idObj = idObjT;\n  dstMin = min (dstMin, dstTrees);\n#else\n  dstTrees = dstFar;\n#endif //------------------------------------\n\n  isWind = false;\n  isGrnd = false;\n  if (dstMin < dstFar) {\n    col4 = vec4 (0.);\n    if (dstTrees < min (dstGrnd, dstObj)) {\n#if TREES\n      ro += dstTrees * rd;\n      gId = PixToHex (ro.xz / hgSize);\n      vn = TreesNf (ro);\n      if (idObj == idTrnk) {\n        col4 = vec4 (0.4, 0.2, 0.1, 0.);\n        vf = vec2 (32., 2.);\n      } else if (idObj == idLvs) {\n        col4.rgb = mix (vec3 (0.2, 0.4, 0.2), vec3 (0.9, 0.9, 0.95), 0.2 +\n           0.8 * smoothstep (-0.6, -0.4, vn.y));\n        col4.a = 0.2;\n        vf = vec2 (16., 2.);\n      }\n      if (vf.x > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      col = col4.rgb * (0.3 + 0.7 * max (0., dot (sunDir, vn))) +\n         col4.a * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 16.);\n#endif\n    } \n    \n    else {\n      dkTun = 1.;\n      if (dstObj < dstGrnd) {  //////////////////////////////////658\n        ro += dstObj * rd;\n        vn = ObjNf (ro);\n        vnn = vn;\n        dkTun = max (SmoothBump (tunLen, tunSep - tunLen, 3., mod (ro.z, tunSep)),\n           step (1.7 * tunRad + 0.5, ro.y));\n        if (idObj == idGrnd) isGrnd = true;\n        else {\n          col4 = ObjCol ();\n          col = col4.rgb;\n          if (idObj == idTun || idObj == idVia) vn = VaryNf (8. * ro, vn, 1.);\n          isCar = (idObj == idCar || idObj == idEng/* idFcar*/ || idObj == idFun/* idBcar*/);  //repair\n          \n          if (dkTun == 0.) {\n            col += vec3 (1., 1., 0.8) * (0.1 + 0.4 * max (dot (normalize (vn.xy),\n               normalize (vec2 (0., 1.7 * tunRad) - (ro.xy - TrackPath (ro.z).xy))), 0.)) * \n               (1. - smoothstep (0.1, 0.3, abs (mod (4. * ro.z / tunLen + 0.5, 1.) - 0.5)));\n            if (! isCar) col *= 0.3 + 0.7 * smoothstep (-1., 0., abs (ro.z - trMid) - 0.5 * trLen);\n          }\n          \n          if (col4.a >= 0.) {\n            col = col * mix (0.3, 0.1 + 0.1 * max (vn.y, 0.) + 0.8 * max (0., dot (sunDir, vn)), dkTun) +\n               col4.a * dkTun * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 32.);\n        //    if (dkTun == 1. && isCar) {\n          \n              //--------------------------------     EngDf() carDf() color ad\n              \n        if (idObj == idEng || idObj == idCar || idObj == idFun) {\n    h = Hashff (5. * idCyc + 17.1);\n    vec4 carCol = vec4 (HsvToRgb (vec3 (mod (h, 1.), 0.8, 0.9)), 0.2);\n    vec4 carCol2 = vec4 (HsvToRgb (vec3 (mod (h + 0.5, 1.), 0.8, 0.9)), 0.3);\n    \n    if (idObj == idEng) {\n      col = (abs (qHit.y + 0.2) < 0.05 || qHit.y > 1.35) ? carCol2.rgb : carCol.rgb;\n     // col =objCol.rgb ;\n      if (qHit.y < -1.15) col *= 0.5;\n      if (abs (abs (qHit.x) - 0.5) < 0.4 && abs (qHit.y - 1.1) < 0.2) col *= 0.7;\n      else if (abs (abs (qHit.z - 1.) - 1.5) < 0.1 && qHit.y > -1.1) col *= 0.7;\n      if (qHit.z > 3.1 && qHit.y < -1.) col = carCol.rgb;\n      if (qHit.z < - 2.8 && qHit.y > 0.1) col =  vec3 (0.01) ;\n    } else if (idObj == idCar) {\n      col = (abs (qHit.y + 0.2) < 0.05 || qHit.y > 1.4) ? carCol2.rgb : carCol.rgb;\n      if (qHit.y < -1.15) col *= 0.5;\n      if (abs (qHit.y - 0.6) < 0.6 && (abs (qHit.x) < 0.5 || abs (abs (qHit.z) - 1.2) < 1.1))\n         col *= 0.7;\n    } else if (idObj == idFun) {\n      col = (qHit.y > 1.35) ? carCol.rgb : carCol2.rgb;\n    }\n  } \n              \n              //---------------------------------------   \n              col = mix (col, SkyCol (ro, reflect (rd, vn)), /*(isWind ? 0.7 : */\n                 0.2 * smoothstep (0.1, 0.3, vn.y))   ;\n            }\n            \n \n  //-------------------------------------------------------------   \n       else if (idObj == idAxle) col = vec3 (0.4, 0.4, 0.5);\n  else if (idObj == idWheel) col = vec3 (0.5, 0.5, 0.6);\n  else if (idObj == idCrod) col = vec3 (0.7, 0.7, 0.1);\n  else if (idObj == idSmk ) col = vec3 (0.9, 0.8, 0.8) ;    // ad smoke???\n  else if (idObj == idLamp) col = (mod (tCur, 2.) < 1.) ? vec3 (1., 1., 0.7) :\n     vec3 (0.8, 0.8, 0.4);\n          \n      //-----------------------------------------      EngDf() CarDf() color ad End  \n  \n           \n          }\n        }\n    //  }         // Train Ride 2  Delete    //////////////////////////////690\n      \n     \n  \n    else {\n        ro += dstGrnd * rd;\n        vn = GrndNf (ro, dstGrnd);\n        isGrnd = true;\n      }\n     }\n    //--------------------------------------------------- under ok\n    dFac = (1. - smoothstep (0.3, 0.4, min (dstObj, dstGrnd) / dstFar)) *\n       (1. - smoothstep (-0.2, -0.1, dot (rd, vn)));\n    if (isGrnd) {\n      vnn = vn;\n      col = vec3 (0.);\n      colS = vec3 (0.);\n      if (vnn.y < 0.8) {\n        f = length (ro.xz);\n        col = mix (vec3 (0.37, 0.35, 0.25), vec3 (0.27, 0.25, 0.3),\n           mix (0.5, smoothstep (0.2, 0.8, Fbm2 (4. * vec2 (8. * f, ro.y))), dFac));\n        col *= mix (1., 0.8 + 0.2 * Noisefv2 (64. * vec2 (f, ro.y)), dFac);\n        vn = VaryNf (vec3 (1., 0.05, 1.) * ro, vnn,\n           6. * (1. - smoothstep (0.4, 0.85, vnn.y)) * dFac);\n        vn = VaryNf (32. * ro, vn, 0.5 * (1. - smoothstep (0.8, 1., dstGrnd / 25.)));\n      } else {\n        vn = VaryNf (8. * ro, vnn, 2. * smoothstep (0.75, 0.85, vnn.y) * dFac);\n      }\n    }\n    if (dstObj < dstGrnd && idObj == idTun && vnn.y > 0.65 && qHit.y > 1.) isGrnd = true;\n    \n    //---------------------------------------------------------------\n    if (isGrnd) {\n      //--------------Snow case start\n      if (vnn.y > 0.65) colS = mix (vec3 (0.8, 0.8, 0.85), vec3 (0.9, 0.9, 0.95),\n           mix (0.5, smoothstep (0.2, 0.8, Fbm3 (8. * ro)), dFac));\n      col = mix (col, colS, smoothstep (0.75, 0.8, vnn.y + 0.1 * Fbm2 (32. * ro.xz)));\n      col *= 0.1 + 0.1 * max (vn.y, 0.) + 0.8 * max (dot (sunDir, vn), 0.);  \n      //----------------- Snow case end\n     //-------------------------------------------- use GrndCol() Start\n        vn = GrndNf (ro, dstHit);\n    col4 = GrndCol (ro, vn);\n    col = col4.xyz*1.0  /*refFac */;\n      //-------------------------------------------   GrndCol() end\n    }\n    if (dkTun > 0. && col4.a >= 0.) {\n      idObjS = idObj;\n      sh = ObjSShadow (ro, sunDir);\n      if ((idObjS == idRbase || idObjS == idSlp || idObjS == idRail) && sh < 1.) sh *= 0.5;\n#if TREES\n      sh = min (sh, TreesSShadow (ro, sunDir));\n#endif\n      col *= min (sh, 1. - 0.5 * max (1.2 * Fbm2 (0.1 * ro.xz - tCur * vec2 (0.15, 0.)) - 0.2, 0.));\n    }\n    col = mix (SkyBg (rd), col, exp (32. * min (0., 0.7 - dstMin / dstFar)));\n   } \n  else {\n    col = SkyCol (ro, rd);\n  }\n  //----------------------------------------------------SmkBallHit ad\n                                                       //de (0.8, 0.8, 0.75)\n   if (dstSmk < min (dstObj, dstFar))  col = mix (col, vec3 (0.6, 0.6, 0.55) *\n     (0.5 + 0.5 * max (dot (vnSmk, sunDir), 0.)), 0.85);   \n  //----------------------------------------------------\n  \n  return clamp (mix (col, vec3 (col.b), 0.2) * mix (1., smoothstep (0., 1., Maxv3 (col)), 0.2), 0., 1.);\n}\n\nvoid TrainCarPM (float t)\n{\n  vec3 vp, vd, ve, vf;\n  trPos = TrackPath (t);\n  vp = TrackDir (t);\n  vd = - normalize (vec3 (vp.x, 0., vp.z));\n  ve = normalize (vec3 (0., vp.yz));\n  trPos.y += 1.3;\n  trMat = mat3 (vec3 (1., 0., 0.), vec3 (0., ve.z, - ve.y), ve) *\n      mat3 (vec3 (- vd.z, 0., vd.x), vec3 (0., 1., 0.), vd);\n}\n\n#define N_VU 5\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr, dateCur, stDat;\n  vec3 ro, rd, vd, vDir, col;\n  vec2 canvas, uv, ori, ca, sa, mSize, mMid[N_VU], ut[N_VU];\n  float nVu, el, az, zmFac, vuMode, centMode, asp, smMode, cGap, tz, trVel, dx, gh;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= canvas.x / canvas.y;\n  tCur = iTime*0.7;  \n  //------------------------------------ White Path Route ad   // SmkBallHit ad\n  tCyc =2.*pi/8.0 ;  /* trVel=8.0  */  trVel =0.25;\n  idCyc =floor(tCur/(tCyc*10.)) ;    trDir =2.*floor( 2.*Hashff(99.*idCyc+1.1))-1.;\n  trMov =trVel*mod(tCur,tCyc )+pi ;\n  //------------------------------------\n  \n  dateCur = iDate;\n  stDat = Loadv4 (vec2 (0., 0.));\n  mPtr.xyz = stDat.xyz;\n //  vuMode = 0.; // vu = stDat.w;   // vuMode = 0. ; vuMode =1.0 ~4. ;\n   vuMode =mod( floor(tCur/20.),5.);\n  \n  tCur = mod (tCur, 2400.) + 30. * floor (dateCur.w / 7200.);\n  nVu = float (N_VU);\n  centMode = (vuMode >= 0.) ? vuMode : mod (floor (tCur / 30.), nVu);\n  asp = canvas.x / canvas.y;\n  mSize = vec2 (asp / nVu, 1. / (nVu + 1.))*0.;  // mSize elete\n  for (int k = 0; k < N_VU; k ++) {\n    mMid[k] = - vec2 (mSize.x / mSize.y, 1.) + vec2 (2 * (k + 1), 1) * mSize;\n    ut[k] = abs (uv - mMid[k]) - mSize;\n  }\n  smMode = -1.;\n  for (int k = 0; k < N_VU; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      smMode = float (k);\n      break;\n    }\n  }\n  if (smMode >= 0.) {\n    vuMode = smMode;\n  } else {\n    vuMode = centMode;\n    uv.y -= mSize.y;\n    uv /= 1. - mSize.y;\n  }\n  //----------------------------line 93--Track Pass factor\n  // x axis   \n  float fx=1.8;    // de 3. swing left & right 1.0~3.0\n  trkAx = vec3 (1.9*fx, 2.9, 4.3)*2.;    // de vec3( )*1. ;\n  trkFx = 0.15 * vec3 (0.23*fx, 0.17, 0.13);\n  \n  // y axis   \n  float fy =1.7;    // de 3. move up  & down 1.0~3.0\n  trkAy = 0.03 * vec3 (1.9*fy, 2.9*2., 4.3)*3.; // de 0.03*vec3( )*1.\n  trkFy = 0.5 * vec3 (0.23*fy, 0.17, 0.13);\n  //---------------------------------------\n  tunSep = 250.;  //  de 150.;\n  tunLen = 25.;  //  de  15.;\n  tunRad = 1.4;\n#if TREES\n  hgSize = 1.5;\n#endif\n\n  trVel = 8.;     //   de 8. ~12.\n  trMid = trVel * tCur;\n  vDir = TrackDir (trMid);\n  cGap = 1.9 * 2.2 * sqrt (1. - vDir.x * vDir.x)*0.6 ;   // de ( )*1.\n  trLen = float (N_CAR) * cGap;\n  for (int n = 0; n < N_CAR; n ++) {\n    TrainCarPM (trMid - 0.5 * float (2 * n - N_CAR + 1) * cGap);\n    carPos[n] = trPos - vec3 (0., 0.15, 0.); \n    carMat[n] = trMat;\n  }\n  az = 0.;\n  el = -0.01;\n  if (smMode == -1. && mPtr.z > 0. && mPtr.y > -0.5 + (1. / (nVu + 1.))) {\n    az += 2. * pi * mPtr.x;\n    el += 0.25 * pi * mPtr.y;\n  }\n  zmFac = 5.50;                     // de 3.\n  if (vuMode == 0.) {\n    tz = floor (trMid / tunSep) * tunSep;\n    ro = TrackPath (tz + 0.5 * tunSep);\n    dx = 2. * step (2.5, mod (tz / tunSep, 6.)) - 1.;\n    ro.x += 13. * dx;\n    gh = GrndHt (ro.xz,1);      // GrntHt(  ,1) ?\n    ro.xy += vec2 (-3. * dx, min (5. + 0.2 * gh * gh, 20.));\n    vd = TrackPath (trMid) - ro;\n  } else if (vuMode == 1.) {\n    tz = trMid - 0.5 * trLen - 8.;\n    ro = TrackPath (tz);\n    ro.y += 2.;\n    vd = TrackDir (tz);\n    vd.y = 0.;\n  } else if (vuMode == 2.) {\n    tz = trMid + 0.5 * trLen + 8.;\n    ro = TrackPath (tz);\n    ro.y += 2.;\n    vd.xz = Rot2D (TrackDir (tz).xz, pi);\n    vd.y = 0.;\n  } else if (vuMode == 3.) {\n    tz = trMid + 0.5 * trLen + 6.;\n    ro = TrackPath (tz);\n    ro.y += 1.5;\n    vd.xz = TrackDir (tz).xz;\n    vd.y = 0.;\n  } else if (vuMode == 4.) {\n    tz = trMid - 25.;\n    ro = TrackPath (tz);\n    ro.y += 7.;\n    vd = TrackPath (trMid + 0.6 * trLen) - ro;\n  }\n  vd = normalize (vd);\n  ori = vec2 (el + asin (vd.y), az + 0.5 * pi - atan (vd.z, vd.x));\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n          mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  sunDir = normalize (vec3 (0., 3., 1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.01 * 2. * pi * tCur);\n  dstFar = 250.;                           engFac =0.3840;  // de 10.\n  col = pow (ShowScene (ro, rd), vec3 (0.8));\n  for (int k = 0; k < N_VU; k ++) {\n    if (max (ut[k].x, ut[k].y) < 0. && min (abs (ut[k].x), abs (ut[k].y)) * canvas.y < 2.)\n       col = (float (k) == centMode) ? vec3 (0.8, 0.3, 0.3) : vec3 (0.5, 0.8, 0.5);\n  }\n  fragColor = vec4 (col, 1.);\n}\n\n/////////////////////////////////////////////////////////\n////////////////////////////////////////////////////////  appendix\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n float PrSphDf(vec3 p,float r){      // ad   for smoke\n  return length(p)-r ;}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d;\n  d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrRoundBox2Df (vec2 p, vec2 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCyl2Df (vec2 p, float rhi, float rlo)\n{\n  return length (p - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo;\n}\n\nfloat PrFlatCylAnDf (vec3 p, float rhi, float rlo, float w, float h)\n{\n  return max (abs (length (p.xy - vec2 (rhi * clamp (p.x / rhi, -1., 1.), 0.)) - rlo) - w, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, - h, h))) - r;\n}\n\nfloat Maxv3 (vec3 p)\n{\n  return max (p.x, max (p.y, p.z));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\n#if TREES\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDst (vec2 p)\n{\n  p = abs (p);\n  return 0.5 * sqrt3 - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\n#endif\n\n// const float cHashM = 43758.54;\n\n/*\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, vec2 (37., 39.))) * cHashM);\n}  */\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (vec2 (dot (p, cHashVA2), dot (p + vec2 (1., 0.), cHashVA2))) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  vec2 e = vec2 (1., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);  \n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  if (f > 0.001) {\n    g = vec3 (Fbmn (p + e.xyy, n), Fbmn (p + e.yxy, n), Fbmn (p + e.yyx, n)) - Fbmn (p, n);\n    n += f * (g - n * dot (n, g));\n    n = normalize (n);\n  }\n  return n;\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (vec2 vId)\n{\n  return texture (txBuf, (vId + 0.5) / txSize);\n}\n","name":"Image","description":"","type":"image"}]}