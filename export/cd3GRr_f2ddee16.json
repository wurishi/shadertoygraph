{"ver":"0.1","info":{"id":"cd3GRr","date":"1676848977","viewed":118,"name":"Solar Eclipse Graphic","username":"MN8R","description":"an eclipse drawing","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","eclipse","art","design"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat wispyTurbulence(vec2 uv, float time, float scale, float density, float amplitude, float turbulence)\n{\n    float wisp = 0.0;\n    float frequency = 1.0;\n    float amplitudeFactor = 1.0;\n\n    for (int i = 0; i < 3; i++) { // Use three octaves for fractal-like effect\n        float noise = noise(uv * frequency + vec2(0.0, time), 0.0); // Add time for animation\n        wisp += pow(abs(noise), density) * amplitude * amplitudeFactor;\n        frequency *= scale;\n        amplitudeFactor *= turbulence;\n    }\n\n    return wisp;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Resolution\n    vec3 res = iResolution;\n    float ratio = res.x / res.y;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 px = fragCoord/res.xy;\n    px.x *= ratio;\n    float x = px.x, y = px.y;\n    float cx = x - ratio*0.5;\n    float cy = y - 0.5;\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n\n    // Stars (noise threshold)\n    float n = noise(x*100.0, fmod(y*100.0 + iTime*10.0, iResolution.y), 0.0);\n    n = pow(n, 40.0);\n    col = vec3(n, n, n);\n\n    // Eclipse\n    float offx = -0.01;\n    float offy = 0.01;\n    float d = sqrt(pow(cx, 2.0) + pow(cy, 2.0));\n    float d2 = sqrt(pow(cx-offx, 2.0) + pow(cy-offy, 2.0));\n    float a = atan2(cx, cy);\n    a = abs(a);\n    \n    // Black circle\n    if (d < 0.35) col = vec3(0.0, 0.0, 0.0); else\n    \n    // White sliver\n    if (d2 < 0.35) {\n        float v = (d2 - 0.34) * 100.0;\n        col = vec3(v, v, v);\n    }\n\n    // Ring of fire\n    float maxd = noise(a*3.0, iTime*0.3, iTime*0.6) * 0.3 + 0.5;\n    if (d < maxd && d > 0.35) {\n        // float strength = noise(a*4.0, iTime, 0.0);\n        // strength = (strength + 1.0) * 0.1;\n        float strength = 1.0;\n        \n        // Wispy\n        // strength = wispyTurbulence(px*0.1, iTime, 1.0, 1.0, 1.0, 1.0);\n        \n        strength *= 1.0 - d / maxd;\n        col += strength;\n    }\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define PI 3.14159265358\n#define TWO_PI PI * 2.0\n\nfloat fmod(float x, float y) {\n    return x - y * floor(x / y);\n}\n\nfloat rand (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat atan2(float y, float x)\n{\n    //http://pubs.opengroup.org/onlinepubs/009695399/functions/atan2.html\n    //Volkan SALMA\n\n    float ONEQTR_PI = PI / 4.0;\n\tfloat THRQTR_PI = 3.0 * PI / 4.0;\n\tfloat r, angle;\n\tfloat abs_y = abs(y) + 1e-10f;      // kludge to prevent 0/0 condition\n\tif ( x < 0.0f )\n\t{\n\t\tr = (x + abs_y) / (abs_y - x);\n\t\tangle = THRQTR_PI;\n\t}\n\telse\n\t{\n\t\tr = (x - abs_y) / (x + abs_y);\n\t\tangle = ONEQTR_PI;\n\t}\n\tangle += (0.1963f * r * r - 0.9817f) * r;\n\tif ( y < 0.0f )\n\t\treturn( -angle );     // negate if in quad III or IV\n\telse\n\t\treturn( angle );\n\n\n}\n\n//IQs noise\nfloat noise(float a, float b, float c) {\n    vec3 rp = vec3(a, b, c);\n    vec3 ip = floor(rp);\n    rp -= ip; \n    vec3 s = vec3(7, 157, 113);\n    vec4 h = vec4(0.0, s.yz, s.y + s.z) + dot(ip, s);\n    rp = rp * rp * (3.0 - 2.0 * rp); \n    h = mix(fract(sin(h) * 43758.5), fract(sin(h + s.x) * 43758.5), rp.x);\n    h.xy = mix(h.xz, h.yw, rp.y);\n    return mix(h.x, h.y, rp.z); \n}\n\nfloat noise(vec2 ab, float c) {\n    return noise(ab.x, ab.y, c);\n}\n","name":"Common","description":"","type":"common"}]}