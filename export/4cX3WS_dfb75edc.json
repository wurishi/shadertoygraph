{"ver":"0.1","info":{"id":"4cX3WS","date":"1703412753","viewed":185,"name":"Cloudish Featherly Spiralum","username":"leon","description":"the kind of shapes I like, a bit baroquish","likes":21,"published":3,"flags":32,"usePreview":0,"tags":["weird"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Cloudish Featherly Spiralum\n// fork of Flamished Fractalited Formings\n// https://www.shadertoy.com/view/4cs3Rs\n// leon denise 2023-12-25\n\n// render pass\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 map = texture(iChannel0, uv);\n    \n    // dim \n    map.r -= 0.2;\n    \n    // blured normal\n    #define T(u) textureLod(iChannel0, uv+u, 4.).r\n    vec3 ep = vec3(20./iChannelResolution[0].xy,0);\n    vec3 normal = normalize(vec3(T(-ep.xz)-T(ep.xz), T(-ep.zy)-T(ep.zy), map.r));\n    \n    // lighting\n    float light = dot(normal, normalize(vec3(0,1,1)))*.5+.5;\n    vec3 color = vec3(light*light);\n    \n    // coloring\n    vec3 tint = 0.5 + 0.5 * cos(vec3(0,1,2) - normal.z* 4. - 4.);\n    light = dot(normal, normalize(vec3(0,-1,-1)))*.5+.5;\n    color += tint * light;\n    \n    // stencil\n    color *= smoothstep(.0,.01,map.r);\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// Cloudish Featherly Spiralum\n// fork of Flamished Fractalited Formings\n// https://www.shadertoy.com/view/4cs3Rs\n// leon denise 2023-12-25\n\n// feedback displace pass\n\nfloat gyroid (vec3 seed) { return dot(sin(seed),cos(seed.yzx)); }\n\n// noise\nfloat fbm (vec2 pos)\n{\n    vec3 p = vec3(pos*2., iTime*.1 - length(pos));\n    float result = 0., a = .5;\n    for (int i = 0; i < 4; ++i, a /= 2.) {\n        //p.z += result*.5;\n        result += abs(gyroid(p/a)*a);\n    }\n    return result;\n}\n\nmat2 rot (float a) { float c=cos(a),s=sin(a); return mat2(c,-s,s,c); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec4 frame = texture(iChannel0, uv);\n    vec2 offset = vec2(0);\n    \n    // curl noise\n    vec2 e = vec2(1./iResolution.y,0);\n    vec2 curl = vec2(fbm(p+e.xy)-fbm(p-e.xy), fbm(p+e.yx)-fbm(p-e.yx)) / (2.*e.x);\n    curl = vec2(curl.y, -curl.x);\n    \n    // normal\n    #define T(u) texture(iChannel0, uv+u).r\n    vec3 ep = vec3(1./iChannelResolution[0].xy,0);\n    vec3 normal = normalize(vec3(T(-ep.xz)-T(ep.xz), T(-ep.zy)-T(ep.zy), frame.r + 0.001));\n    \n    // spawn shape\n    float dist = abs(length(uv-.5)-.25);\n    float shape = smoothstep(.01, 0., dist);\n    \n    // displace\n    offset = curl * 2. - normal.xy;\n    frame = texture(iChannel0, uv + offset * 0.0018 * vec2(ep.x/ep.y, 1));\n\n    // feedback\n    float mask = max(shape, frame.r - iTimeDelta * 2.);\n    \n    fragColor = vec4(mask, shape, 0, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}