{"ver":"0.1","info":{"id":"mtlcRn","date":"1690456453","viewed":73,"name":"ShadowFighterX","username":"float1987","description":"Shooting game, leave ur best score below~","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["cool"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FIGHTER_SCALE  1.0\n#define FIGHTER_WIDTH 0.01\n#define FIGHTER_HEIGHT 0.05\n#define FIGHTER_WING_ANGLE 0.035\n#define FIGHTER_TAIL_ANGLE 0.05\n\nfloat seed = 0.32; //----------------------------------------------------------starting seed\nconst float particles = 16.0; //----------------------------------------------change particle count\nfloat res = 16.0; //-----------------------------------------------------------pixel resolution\nfloat gravity = -0.72; //-------------------------------------------------------set gravity\n\nfloat DrawFighter(vec2 pos, vec2 uv) {\n\n    float d = 0.;\n    uv = uv - pos;\n    \n    //body\n    float g = clamp(sqrt(mix(1.,0.,uv.y / FIGHTER_SCALE / FIGHTER_HEIGHT)),0.,.7);\n    float b = step(abs(uv.x),FIGHTER_WIDTH * FIGHTER_SCALE * g);\n    b *= step(abs(uv.y),FIGHTER_HEIGHT * FIGHTER_SCALE);\n    d += b;\n    \n    //wings\n    uv.y += 0.025 * FIGHTER_SCALE ;\n    g = mix(1.,0.,uv.y/FIGHTER_SCALE/FIGHTER_HEIGHT);\n    float w = step(abs(uv.x),FIGHTER_WING_ANGLE * FIGHTER_SCALE * g);\n    w *= step(.001 * FIGHTER_WING_ANGLE * FIGHTER_SCALE,uv.y);\n    d += w;\n    \n    //tails\n    uv.y += 0.055 * FIGHTER_SCALE ;\n    g = mix(1.,0.,uv.y/FIGHTER_SCALE/FIGHTER_HEIGHT);\n    float t = step(abs(uv.x),FIGHTER_TAIL_ANGLE * FIGHTER_SCALE * g);\n    t *= step(0.6 * FIGHTER_TAIL_ANGLE * FIGHTER_SCALE,uv.y);\n    d += t;\n    \n    return d;\n}\n\nfloat DrawBullets(vec2 pos, vec2 uv) {\n\n    uv = uv - pos - vec2(0,0);\n    float b = .001/ length(uv);\n    b = step(0.15 *FIGHTER_SCALE ,b);\n    return b;\n}\n\nfloat DrawEnemies(vec2 pos, vec2 uv,ivec2 id) {\n    uv *= -1.;\n    return DrawFighter(pos,uv);\n    //return DrawFighter(pos,uv * (1. - N21(vec2(id)) * .2 ));\n}\n\nfloat DrawHpBar(float hp, vec2 uv) {\n    uv += vec2(0.,-.451);\n    uv.y = abs(uv.y);\n    float d = 1. - step(-0.005,uv.x + 1. - hp / PLAYER_HP);\n    d *= step(-0.84,uv.x);\n    d *=  1. - step(0.015,uv.y);    \n  \n    return d;\n}\n\nfloat DrawHpBarBG(vec2 uv) {\n    uv += vec2(0.,-.45);\n    uv.y = abs(uv.y);\n    float d = 1. - step(0.,uv.x);\n    d *= step(-0.845,uv.x);\n    d *=  1. - step(0.02,uv.y);    \n  \n    return d;\n}\n\nfloat DrawTimer( vec2 fragCoord, float t) {\n    // Print Mouse Y\n    // Multiples of 4x5 work best\n\tvec2 vFontSize = vec2(18.0, 25.0);\n\tvec2 vPixelCoord3 = vec2(float(iResolution.x) - 100., float(iResolution.y) - 50.);\n\tfloat fValue3 = t;\n\tfloat fDigits = 1.0;\n    float fIsDigit3 = PrintValue( (fragCoord - vPixelCoord3) / vFontSize, fValue3, fDigits, 1.);\n    return fIsDigit3;\n}\n\n\n//Credit to @Leukbaars https://www.shadertoy.com/view/lldGzr\nfloat DrawExplosion(vec2 pos,vec2 uv,float t) {\n    uv = uv - pos;\n    uv *= 10.;\n    \n    if(iTime - t > .25) return 0.;\n   \tfloat clr = 0.0;\n    float tt = iTime * 2.;  \n    float timecycle = tt-floor(tt);  \n    seed = (seed+floor(tt));\n    \n    float invres=1.0/res;\n    float invparticles = 1.0/particles;\n\n    \n    for( float i=0.0; i<particles; i+=1.0 )\n    {\n\t\tseed+=i+tan(seed);\n        vec2 tPos = (vec2(cos(seed),sin(seed)))*i*invparticles;\n        \n        vec2 pPos = vec2(0.0,0.0);\n        pPos.x=((tPos.x) * timecycle);\n\t\tpPos.y = -gravity*(timecycle*timecycle)+tPos.y*timecycle+pPos.y;\n        \n        //pPos = floor(pPos*res)*invres; //-----------------------------------------comment this out for smooth version \n\n    \tvec2 p1 = pPos;\n    \tvec4 r1 = vec4(vec2(step(p1,uv)),1.0-vec2(step(p1+invres,uv)));\n    \tfloat px1 = r1.x*r1.y*r1.z*r1.w;\n        float px2 = smoothstep(0.0,200.0,(1.0/distance(uv, pPos+.015)));//added glow\n        px1=max(px1,px2);\n        \n\t    clr += px1*(sin(iTime*20.0+i)+1.0);\n    }\n    \n    return clr;\n}\n\n\n\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch( iChannel0, re, 0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 mouse = (iMouse.xy - .5 * iResolution.xy) / iResolution.y;\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    col += DrawHpBarBG(uv) * vec3(0.9,0,0);;\n    \n    ivec2 txHpPos = ivec2(4,1);\n    vec4 hpVec = loadValue(txHpPos);\n    float hp = hpVec.x;\n    col += DrawHpBar(hp,uv) * vec3(0,0.9,0);\n    \n    if(hp  <= .001) {\n        col += DrawTimer(fragCoord,hpVec.y) * 1000.;\n        fragColor = vec4(col,1.0);\n        return;\n    }\n    \n    col += DrawFighter(mouse,uv) * vec3(0.85);\n    \n    int NUM_BULLET = int(FIRE_SPEED);\n    for(int i = 0; i < NUM_BULLET; i++) {\n        ivec2 txBulletPos = ivec2(1,i+1);\n        vec4 bPos = loadValue(txBulletPos);\n        \n        if(bPos.z < 0.99){\n            col += DrawBullets(bPos.xy + vec2(0,FIGHTER_HEIGHT),uv);// * vec3(float(i)+.5);\n        }\n    }\n    \n    for(int i = 0; i < ENEMY_NUM; i++) {\n        ivec2 txEnemyBulletPos = ivec2(3,i+1);\n        vec4 ebPos = loadValue(txEnemyBulletPos);\n        \n        if(abs(ebPos.x) + abs(ebPos.y) > 0.0001 && ebPos.x < 900.){\n            col += DrawBullets(ebPos.xy - vec2(0,FIGHTER_HEIGHT),uv) * vec3(1.,.2,0.);\n        }\n    }\n    \n    for(int i = 0; i < ENEMY_NUM ; i++){\n         ivec2 txEnemyPos = ivec2(2,i+1);\n         vec4 ePos = loadValue(txEnemyPos);\n         \n         if(ePos.z < 0.99 && ePos.x != 0. && ePos.y != 0.) {\n            col += DrawEnemies(ePos.xy,uv,txEnemyPos) * vec3(0.75,0,0);\n         }\n         else {\n            col += DrawExplosion(-1. * ePos.xy,uv, ePos.w) * vec3(1.,.2,0.);\n         }\n    }\n    \n   \n\n    col += DrawTimer(fragCoord,iTime) * 1000.;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid storeValue( in ivec2 re, in vec4 va, inout vec4 fragColor, in ivec2 fragCoord )\n{\n    fragColor = ( re.x==fragCoord.x && re.y==fragCoord.y ) ? va : fragColor;\n}\n\nvec4 loadValue( in ivec2 re )\n{\n    return texelFetch(iChannel0, re, 0);\n}\n\nvoid SpawnEnemies(inout vec4 fragColor,in ivec2 ifragCoord){\n    vec2 pos = vec2((N21(vec2(sin(iTime * 3.1415),fract(iTime * 234.34)))-.5) * 1.5,-.5);\n    ivec2 txEnemyPos = ifragCoord;\n    storeValue(txEnemyPos,vec4(pos,0,0),fragColor,ifragCoord);\n}\n\n\nvoid SpawnEnemyBullet(inout vec4 fragColor,in ivec2 ifragCoord, vec2 pPos, vec2 ePos){\n    vec2 dir = normalize(pPos + ePos);\n    ivec2 txEnemyBulletPos = ifragCoord;\n    storeValue(txEnemyBulletPos,vec4(-ePos,dir),fragColor,ifragCoord);\n}\n\n\nvoid InitPlayData(inout vec4 fragColor,in ivec2 ifragCoord) {\n    ivec2 txHpPos = ivec2(4,1);\n    storeValue(txHpPos,vec4(PLAYER_HP,0,0,0),fragColor,ifragCoord);\n}\n\n\nvoid UpdateHP(float v,inout vec4 fragColor,in ivec2 ifragCoord) {\n    ivec2 txHpPos = ivec2(4,1);\n    \n    if(iFrame == 1) {\n        InitPlayData(fragColor,ifragCoord);\n    } else {\n        \n        vec4 hp = loadValue(txHpPos);\n        \n        if(hp.x < 0.) {\n            storeValue(txHpPos,vec4(hp),fragColor,ifragCoord);\n        }\n        else {\n            storeValue(txHpPos,vec4(hp.x-v,iTime,0,0),fragColor,ifragCoord);\n        }\n    }\n}\n\nivec2 CheckBulletHit(vec2 bPos) {\n    for(int i = 0; i < ENEMY_NUM ; i++){\n         ivec2 txEnemyPos = ivec2(2,i+1);\n         vec4 ePos = loadValue(txEnemyPos);\n         \n         float d = length(bPos + ePos.xy + vec2(0,0.05)); \n         if(d < FIGHTER_COLLISION_SIZE && ePos.z < 0.99) {\n             return txEnemyPos;\n         }\n    }\n    \n    return ivec2(0,0);\n}\n\nivec2 CheckEnemyHit(vec2 ePos) {\n    int NUM_BULLET = int(FIRE_SPEED);\n    for(int i = 0; i < NUM_BULLET; i++) {\n        ivec2 txBulletPos = ivec2(1,i+1);\n        vec4 bPos = loadValue(txBulletPos);\n        \n        float d = length(bPos.xy + ePos + vec2(0,0.05)); \n        if(d < FIGHTER_COLLISION_SIZE && bPos.z < 0.99) {\n            return txBulletPos;\n        }\n    }\n    \n    return ivec2(0,0);\n}\n\nfloat CheckPlayerHit(vec2 pPos,vec2 ebPos) {\n    float d = length(pPos-ebPos);\n    if(d < FIGHTER_COLLISION_SIZE && ebPos.x < 900.) {\n        return 999.;\n    }\n    \n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n   \n    ivec2 ifragCoord = ivec2( fragCoord-0.5 );\n    \n\n    // don't compute gameplay outside of the data area\n    if( ifragCoord.x != 1 &&  ifragCoord.x != 2 &&  ifragCoord.x != 3 && ifragCoord.x != 4) discard;\n    \n    vec2 mouse = (iMouse.xy - .5 * iResolution.xy) / iResolution.y;\n    \n    float t = fract(iTime);\n    float m = 1./FIRE_SPEED; \n    int curIndex = int(floor(t / m)+1.); \n    int fragIndex = ifragCoord.y;   \n    \n    float tt =  mod(iTime + float(fragIndex-1) * m,BULLET_RANGE);   //0 - BULLET_RANGE\n    ivec2 txBulletPos = ivec2(1,fragIndex);\n    vec4 bPos = loadValue(txBulletPos);\n\n\n    fragColor = vec4(0.0);\n\n   \n    // enemy movement\n    if(ifragCoord.x == 2 && ifragCoord.y <= ENEMY_NUM) {\n        float index = float(ifragCoord.y);\n        float deltaTime = float(iFrame) + 30. * index;\n        ivec2 txEnemyPos = ifragCoord;\n        vec4 ePos = loadValue(txEnemyPos);\n        \n        if(ePos.z < 0.99) {\n            if(mod(deltaTime,500.) <= 0.1) {\n                SpawnEnemies(fragColor,ifragCoord);\n            }\n            else{\n                storeValue(txEnemyPos,ePos + vec4(0, ENEMY_SPEED * (0.8 + N21(vec2(txEnemyPos)/8.)),0,0),fragColor,ifragCoord);\n            }\n        }\n        else {\n            if(mod(deltaTime,500.) <= 0.1) {\n                SpawnEnemies(fragColor,ifragCoord);\n            }\n            \n            else {\n                storeValue(txEnemyPos,vec4(ePos.xy,1,ePos.w),fragColor,ifragCoord);\n            }\n        }\n        \n        ivec2 hit = CheckEnemyHit(ePos.xy);\n        \n        if(hit.x > 0 && ePos.z < 0.99){\n            storeValue(txEnemyPos,vec4(ePos.xy,1,iTime),fragColor,ifragCoord);\n        }\n    }\n    \n    //player bullet movement\n    if(ifragCoord.x == 1) {\n        if(bPos.z > 0.99){\n            if(tt > BULLET_RANGE - .1) {\n                storeValue(txBulletPos,vec4(mouse,0,0),fragColor,ifragCoord);\n            }\n            else{\n                storeValue(txBulletPos,vec4(bPos.xy,1,0),fragColor,ifragCoord);\n            }\n            return;\n        }\n    \n        ivec2 hit = CheckBulletHit(bPos.xy);\n        \n        if(hit.x > 0){\n            storeValue(txBulletPos,vec4(bPos.xy,1,0),fragColor,ifragCoord);\n        }\n       \n    \n        else if(curIndex == fragIndex && tt < 0.01) {\n            storeValue(txBulletPos,vec4(mouse,0,0),fragColor,ifragCoord);\n        }\n        else if( tt > BULLET_RANGE - .1) \n        {\n            storeValue(txBulletPos,vec4(mouse,0,0),fragColor,ifragCoord);\n        }\n        else\n        {\n            storeValue(txBulletPos,bPos + vec4(0, BULLET_SPEED,0,0),fragColor,ifragCoord);\n        }\n    }\n    \n    // enemy bullet movement\n    if(ifragCoord.x == 3) {\n        float index = float(ifragCoord.y);\n        float deltaTime = float(iFrame);\n        ivec2 txEnemyBulletPos = ifragCoord;\n        vec4 ebPos = loadValue(txEnemyBulletPos);\n        \n        if(ebPos.x > 900.) {\n            storeValue(txEnemyBulletPos,vec4(9999.),fragColor,ifragCoord);\n        }\n        \n        ivec2 txEnemyPos = ivec2(2,ifragCoord.y);\n        vec4 ePos = loadValue(txEnemyPos);\n        \n        if(ePos.z > 0.99) {\n            storeValue(txEnemyBulletPos,vec4(0.),fragColor,ifragCoord);    \n        }\n        \n        else if( ePos.y < -0.3 && ePos.y > -.9) { \n            SpawnEnemyBullet(fragColor,ifragCoord,mouse - vec2(0, -.05),ePos.xy);            \n        }\n        else{\n            vec2 p = ebPos.xy + ebPos.zw * .01;\n            storeValue(txEnemyBulletPos,vec4(p,ebPos.zw),fragColor,ifragCoord);      \n        }\n       \n        \n        float hit = CheckPlayerHit(mouse,ebPos.xy);\n        \n        if(hit > 0.){\n            storeValue(txEnemyBulletPos,vec4(999.),fragColor,ifragCoord);\n        }\n    }\n    \n    \n    //HP \n    if(ifragCoord.x == 4 && ifragCoord.y == 1) {\n    \n      \n        float minus = 0.;\n        for(int i = 0; i < ENEMY_NUM; i++) {\n            ivec2 txEnemyBulletPos = ivec2(3,i+1);\n            vec4 ebPos = loadValue(txEnemyBulletPos);\n\n            if(ebPos.x > 900. && ebPos.x < 1000.){\n                minus += 1.;\n            }\n        }\n        \n        UpdateHP(minus,fragColor,ifragCoord);\n    }\n    \n    \n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define BULLET_SPEED .02\n#define FIRE_SPEED 5.\n#define BULLET_RANGE 1.\n#define ENEMY_NUM 50\n#define ENEMY_SPEED .005\n#define FIGHTER_COLLISION_SIZE .05\n\n#define PLAYER_HP 10.\n\nfloat N21(vec2 p) {\n    return fract(sin(p.x*100. +p.y * 6574.) * 5647.);\n}\n\n\n// ---- 8< ---- GLSL Number Printing - @P_Malin ---- 8< ----\n// Creative Commons CC0 1.0 Universal (CC-0) \n// https://www.shadertoy.com/view/4sBSWW\n\nfloat DigitBin( const int x )\n{\n    return x==0?480599.0:x==1?139810.0:x==2?476951.0:x==3?476999.0:x==4?350020.0:x==5?464711.0:x==6?464727.0:x==7?476228.0:x==8?481111.0:x==9?481095.0:0.0;\n}\n\nfloat PrintValue( vec2 vStringCoords, float fValue, float fMaxDigits, float fDecimalPlaces )\n{       \n    if ((vStringCoords.y < 0.0) || (vStringCoords.y >= 1.0)) return 0.0;\n    \n    bool bNeg = ( fValue < 0.0 );\n\tfValue = abs(fValue);\n    \n\tfloat fLog10Value = log2(abs(fValue)) / log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n\t\t\tif((bNeg) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;\n\t\t} else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;\n\t\t\t} else {\n                float fReducedRangeValue = fValue;\n                if(fDigitIndex < 0.0) { fReducedRangeValue = fract( fValue ); fDigitIndex += 1.0; }\n\t\t\t\tfloat fDigitValue = (abs(fReducedRangeValue / (pow(10.0, fDigitIndex))));\n                fCharBin = DigitBin(int(floor(mod(fDigitValue, 10.0))));\n\t\t\t}\n        }\n\t}\n    return floor(mod((fCharBin / pow(2.0, floor(fract(vStringCoords.x) * 4.0) + (floor(vStringCoords.y * 5.0) * 4.0))), 2.0));\n}\n\n","name":"Common","description":"","type":"common"}]}