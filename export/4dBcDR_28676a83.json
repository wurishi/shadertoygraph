{"ver":"0.1","info":{"id":"4dBcDR","date":"1491901594","viewed":473,"name":"Anisotropic Diffusion Experiment","username":"djedge","description":"An implementation of Anisotropic Diffusion from Perona & Malik\n\n(re-initialize if image is black)\n","likes":9,"published":1,"flags":32,"usePreview":0,"tags":["2d","imageprocessing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Display resulting image and its gradient\n */\n\nvoid\nmainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    if (uv.x < 0.5)\n\t    fragColor = texture(iChannel0, uv);\n    else\n\t    fragColor = texture(iChannel1, vec2(1.0 - uv.x, uv.y));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n * Copy buffer at iteration i-1 for computation at iteration i\n */\n\n\nvoid\nmainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    if (iFrame < 10)\n\t    fragColor = texture(iChannel0, uv);\n    else\n\t    fragColor = texture(iChannel1, uv);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/**\n * Apply an iteration of anisotropic diffusion.\n * See Perona & Malik for details.\n */\n\n\nvec4\nfluxFunction1( in vec4 t, in float K )\n{\n    vec4 a = abs(t) / K;\n    return exp(-a*a)*t;\n}\n\n\nvec4\nfluxFunction2( in vec4 t, in float K )\n{\n    vec4 a = abs(t) / K;\n    return (1.0 / (1.0 + a*a))*t;\n}\n\nvec4\nfluxFunction( in vec4 t, in float K )\n{\n    return fluxFunction1(t, K);\n}\n\nvec4\nanisotropicDiffusion( in sampler2D tex, in vec2 fragCoord, in float lambda, in float K )\n{\n    vec4 p = texture(tex, fragCoord.xy / iResolution.xy);\n    \n    vec4 fpn = texture(tex, (fragCoord.xy - vec2(0.0, 1.0)) / iResolution.xy) - p ;\n    vec4 fpw = texture(tex, (fragCoord.xy - vec2(1.0, 0.0)) / iResolution.xy) - p;\n    vec4 fps = texture(tex, (fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy) - p;\n    vec4 fpe = texture(tex, (fragCoord.xy + vec2(1.0, 0.0)) / iResolution.xy) - p;\n    \n    fpn = fluxFunction(fpn, K);\n    fpw = fluxFunction(fpw, K);\n    fps = fluxFunction(fps, K);\n    fpe = fluxFunction(fpe, K);\n    \n    return p + lambda * (fpn + fpw + fps + fpe);\n}\n\nvoid\nmainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float lambda = 0.15;\n    const float K = 0.03;\n    \n    fragColor = anisotropicDiffusion(iChannel0, fragCoord, lambda, K);\n}","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"/**\n * Sobel filter\n */\n\nvec4\nsobel ( in sampler2D tex, in vec2 fragCoord )\n{\n    vec4 pnw = texture(tex, (fragCoord.xy - 1.0) / iResolution.xy);\n    vec4 pn  = texture(tex, (fragCoord.xy - vec2(0.0, 1.0)) / iResolution.xy);\n    vec4 pne = texture(tex, (fragCoord.xy - vec2(-1.0, 1.0)) / iResolution.xy);\n    vec4 pw  = texture(tex, (fragCoord.xy - vec2(1.0, 0.0)) / iResolution.xy);\n    vec4 pe  = texture(tex, (fragCoord.xy + vec2(1.0, 0.0)) / iResolution.xy);\n    vec4 psw = texture(tex, (fragCoord.xy + vec2(-1.0, 1.0)) / iResolution.xy);\n    vec4 ps  = texture(tex, (fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy);\n    vec4 pse = texture(tex, (fragCoord.xy + 1.0) / iResolution.xy);\n\n\n    vec4 gx = -pnw - 2.0*pw - psw + pne + 2.0*pe + pse;\n    vec4 gy = -pnw - 2.0*pn - pne + psw + 2.0*ps + pse;\n\n    return sqrt(gx*gx + gy*gy);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = sobel(iChannel0, fragCoord);\n}\n","name":"Buf C","description":"","type":"buffer"}]}