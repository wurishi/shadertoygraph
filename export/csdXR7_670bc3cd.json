{"ver":"0.1","info":{"id":"csdXR7","date":"1679581178","viewed":83,"name":"02563 - Wave Simulation","username":"thw","description":"Shader for simulating waves using the wave equation.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"DsdXRM","parentname":"HelloPDE"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 grad(vec2 uv) {\n    // Compute the gradient of the. channel used for shading\n    return vec2(0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 g = grad(uv);\n    vec3 t1 = vec3(1,0,20.0*g.x);\n    vec3 t2 = vec3(0,1,20.0*g.y);\n    vec3 N = normalize(cross(t1,t2));\n    vec3 L = normalize(vec3(1,3,5));\n    float illum = (0.4+0.4*smoothstep(0.97,0.98, dot(N,L)) + 0.2 * max(0.0, dot(N,L)));\n\n    float substance = 2.0*texture(iChannel0, uv).g;\n    // Output to screen\n    fragColor = illum*vec4(0.3, 0.7, 0.5,0.0) + (1.0-substance)*vec4(0.6,0.4,0.1, 0.0);\n\n   fragColor = vec4(1.0)-vec4(1.0,1.,1.,0.0)*texture(iChannel0, uv).g;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec4 lap(vec2 uv) {\n    // Compute the Laplacian of all four elements of iChannel0\n    \n    float dx = 1. / iResolution.x;\n    float dy = 1. / iResolution.y;\n    \n    vec4 res = vec4(0);\n    res = 1. / 4. * (texture(iChannel0, vec2(uv.x+dx, uv.y)) +\n                     texture(iChannel0, vec2(uv.x-dx, uv.y)) +\n                     texture(iChannel0, vec2(uv.x, uv.y+dy)) +\n                     texture(iChannel0, vec2(uv.x, uv.y-dy)) -\n                4. * texture(iChannel0, uv));\n   \n    return res;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 BufferA = texture(iChannel0, uv);\n    \n    // Suggested time step\n    float dt = 0.5;\n\n    // Wave simulation constants\n    float kd = 1.;\n    float c = 2.;\n           \n    float A = texture(iChannel0, uv).r; // Substance A\n    float B = texture(iChannel0, uv).g; // Substance B\n    \n    // Update velocity and height    \n    float Ap = A * kd + dt * c * c * lap(uv).g;\n    float Bp = B + Ap * dt;\n    \n    \n    vec2 V = fragCoord - iMouse.zw;\n    if (iTime < 0.05 )\n        fragColor = vec4(0,0,0,0);\n    else\n        fragColor = exp(-0.005*dot(V,V))*vec4(0,1.0,0,0) + vec4(Ap, Bp, 0.0, 0.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}