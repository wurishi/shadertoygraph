{"ver":"0.1","info":{"id":"slf3DB","date":"1622735434","viewed":61,"name":"TriCapsule Grid","username":"Farini","description":"Drawing 2D Shapes, looking for cool patterns. Based from the awesome IQ: https://iquilezles.org/articles/distfunctions2d/distfunctions2d.htm","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","capsule"],"hasliked":0,"parentid":"4lcBWn","parentname":"Uneven Capsule - distance 2D"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Inspired By Inigo Quilez,\n// Created by: Carlos Farini\n\n/* Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), \nto deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, \nsublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, \nsubject to the following conditions: The above copyright notice and this permission notice shall be included in all copies \nor substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, \nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. */\n\n\n// Distance to an uneven capsule. Uses between 1 and 2 square roots\n// Extracted from the article: \n// https://iquilezles.org/articles/distfunctions2d\n\n// SDF = Sign Distance Function\n\nfloat cro(in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n// Matrix rotation\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n// A Circle\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\n// uneven capsule\nfloat sdUnevenCapsuleY( in vec2 p, in float ra, in float rb, in float h )\n{\n\tp.x = abs(p.x);\n    \n    float b = (ra-rb)/h;\n    vec2  c = vec2(sqrt(1.0-b*b),b);\n    float k = cro(c,p);\n    float m = dot(c,p);\n    float n = dot(p,p);\n    \n         if( k < 0.0   ) return sqrt(n)               - ra;\n    else if( k > c.x*h ) return sqrt(n+h*h-2.0*h*p.y) - rb;\n                         return m                     - ra;\n}\n\n// hmmm. pie!\nfloat sdPie( in vec2 p, in vec2 c, in float r )\n{\n    p.x = abs(p.x);\n    float l = length(p) - r;\n    float m = length(p-c*clamp(dot(p,c),0.0,r)); // c=sin/cos of aperture\n    return max(l,m*sign(c.y*p.x-c.x*p.y));\n}\n\nfloat sdBlobbyCross( in vec2 pos, float he )\n{\n    pos = abs(pos);\n    pos = vec2(abs(pos.x-pos.y),1.0-pos.x-pos.y)/sqrt(2.0);\n\n    float p = (he-pos.y-0.25/he)/(6.0*he);\n    float q = pos.x/(he*he*16.0);\n    float h = q*q - p*p*p;\n    \n    float x;\n    if( h>0.0 ) { float r = sqrt(h); x = pow(q+r,1.0/3.0)-pow(abs(q-r),1.0/3.0)*sign(r-q); }\n    else        { float r = sqrt(p); x = 2.0*r*cos(acos(q/(p*r))/3.0); }\n    x = min(x,sqrt(2.0)/2.0);\n    \n    vec2 z = vec2(x,he*(1.0-2.0*x*x)) - pos;\n    return length(z) * sign(z.y);\n}\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat sdRoundedCross( in vec2 p, in float h )\n{\n    float k = 0.5*(h+1.0/h); // k should be const at modeling time\n    p = abs(p);\n    return ( p.x<1.0 && p.y<p.x*(k-h)+h ) ? \n             k-sqrt(dot2(p-vec2(1,k)))  :\n           sqrt(min(dot2(p-vec2(0,h)),\n                    dot2(p-vec2(1,0))));\n}\n\nfloat sdVesica(vec2 p, float r, float d)\n{\n    p = abs(p);\n    float b = sqrt(r*r-d*d);\n    return ((p.y-b)*d>p.x*b) ? length(p-vec2(0.0,b))\n                             : length(p-vec2(-d,0.0))-r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    \n    // Number of tiles\n    uv *= 4.;\n    \n    // Tile them up\n\tvec2 p = fract(uv) - 0.5;\n    \n    // Inverse Scale of individual tile\n    p *= 2.38; \n    \n    // Radius of capsule\n    float r1 = 0.3; \n    float r2 = 0.3; \n    \n    // Rotation of capsule\n    mat2 third1 = rotate2d(2. * 3.1415926535897/3.);\n    mat2 third2 = rotate2d(2. * 3.1415926535897/3. * 2.);\n    mat2 third3 = rotate2d(2. * 3.1415926535897/3. * 3.);\n    \n    // Capsules\n\tfloat cap1 = sdUnevenCapsuleY(third1*p, r1, r2, 0.9);\n    float cap2 = sdUnevenCapsuleY(third2*p, r1, r2, 0.9);\n    float cap3 = sdUnevenCapsuleY(third3*p, r1, r2, 0.9);\n    \n    // Circle in middle\n    float circle = sdCircle(p, 0.5);\n    \n    // Coloring\n    vec3 col = vec3(0.0);\n    col += sign(circle)*vec3(1.,1.,1.);\n    col += sign(cap1)*col;\n    col += sign(cap2)*col;\n    col += sign(cap3)*col;\n    \n    // Adjustments\n    \n    // uncomment to invert color\n    // col = 1.-col;\n    \n    float outline = sdCircle(p, 1.3);\n    // Uncomment to show border\n\t// col = mix( col, vec3(0.5), 1.0-smoothstep(0.0,0.015,abs(outline)) );\n    \n    \n    /*\n    SORRY - IM GOING TO KEEP THIS CODE HERE FOR MORE IDEAS\n    \n    \n    float e = sdPie(p * 0.2, vec2(0.4,-0.2), 0.25);\n    col += sign(e)*vec3(1.0,0.5,0.5);\n    p *= 2.;\n    \n    float bob = sdBlobbyCross(vec2(p.x + 1.5, p.y + 1.5), 0.2);\n    col += sign(bob)*vec3(0.9,0.5,0.5);\n    float bob2 = sdBlobbyCross(vec2(p.x - 1.5, p.y + 1.5), 0.2);\n    col += sign(bob2)*vec3(0.9,0.5,0.5);\n    \n    float rcross = sdRoundedCross(vec2(p.x, p.y + 1.8), 0.2);\n    col += sign(rcross)*vec3(0.9,0.5,0.5);\n    \n    float vesica = sdVesica(vec2(p.x + 4.0, p.y), 1.5, 0.5);\n    col += sign(vesica)*vec3(0.9,0.5,0.5);\n    \n\t// col *= 1.0 - exp(-3.0*abs(d));\n\t// col *= 0.8 + 0.2*cos(120.0*d);\n    */\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}