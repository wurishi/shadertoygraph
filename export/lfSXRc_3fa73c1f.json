{"ver":"0.1","info":{"id":"lfSXRc","date":"1706702376","viewed":181,"name":"Volumetric raymarched cloud","username":"toninoni","description":"Fork of \"Simple LoDless Shaded Clouds\" with some changes:\n\n- substitute original plane at x=-y with a sphere with a RADIUS at a position.\n- added mouse look (MOUSE_LOOK).\n- camera movement (CAMERA_MOVE).\n- light source movement (SUN_MOVE).","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","clouds","sphere","volumetric"],"hasliked":0,"parentid":"dtjSWW","parentname":"Simple LoDless Shaded Clouds"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Comment out to use a static camera\n//#define CAMERA_MOVE\n// Comment out to use a static sun\n#define SUN_MOVE\n// Comment out to let the clouds flow\n#define ANIMATE_CLOUDS\n// Comment out to omit mouse look\n#define MOUSE_LOOK\n\n// Sphere radius\n#define RADIUS 4.0\n// Sky color\n#define SKY_COLOR vec3(0.01, 0.1, 0.1)\n// Light color\n#define LIGHT_COLOR vec3(0.99, 0.99, 1.0)\n// Cloud color\n#define CLOUD_COLOR vec3(1.0, 1.0, 1.0)\n// Global cloud density\n#define CLOUD_DENSITY 0.6\n\n#define ITERATIONS 90\n\nfloat rand(vec3 p){\n    return fract(sin(dot(p, vec3(12.345, 67.89, 412.12))) * 42123.45) * 2.0 - 1.0;\n}\n\nfloat valueNoise(vec3 p){\n    vec3 u = floor(p);\n    vec3 v = fract(p);\n    vec3 s = smoothstep(0.0, 1.0, v);\n    \n    float a = rand(u);\n    float b = rand(u + vec3(1.0, 0.0, 0.0));\n    float c = rand(u + vec3(0.0, 1.0, 0.0));\n    float d = rand(u + vec3(1.0, 1.0, 0.0));\n    float e = rand(u + vec3(0.0, 0.0, 1.0));\n    float f = rand(u + vec3(1.0, 0.0, 1.0));\n    float g = rand(u + vec3(0.0, 1.0, 1.0));\n    float h = rand(u + vec3(1.0, 1.0, 1.0));\n    \n    return mix(mix(mix(a, b, s.x), mix(c, d, s.x), s.y),\n               mix(mix(e, f, s.x), mix(g, h, s.x), s.y),\n               s.z);\n}\n\nfloat fbm(vec3 p, vec3 center){\n    #ifdef ANIMATE_CLOUDS\n    vec3 q = p - vec3(0.5, 0.5, 0.0) * iTime;\n    #else\n    vec3 q = p;\n    #endif\n    q *= 3.0 / RADIUS;\n    // fbm\n    float ret = 0.5 * valueNoise(q); q *= 2.0;\n    ret += 0.25 * valueNoise(q); q *= 2.0;\n    ret += 0.125 * valueNoise(q);\n\n    return ret - (length(p - center) - RADIUS);\n}\n\n\n\nvec4 volumetricMarch(vec3 camPos, vec3 rayDir, vec3 objPos, vec3 sunDir)\n{\n    float depth = 0.0;\n    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n   \n    for (int i = 0; i < ITERATIONS; i++)\n    {\n        vec3 p = camPos + depth * rayDir;\n        float density = fbm(p, objPos);\n        \n        // If density is unignorable...\n        if (density > 1e-2)\n        {\n            // We estimate the color with w.r.t. density\n            vec4 c = vec4(mix(CLOUD_COLOR, vec3(0.0, 0.0, 0.0), density), density);\n            // Multiply it by a factor so that it becomes softer\n            float dif = clamp(density - fbm(p + 0.3 * sunDir, objPos) / 0.3, 0.0, 1.0);\n            vec3 lig = vec3(1.0) + pow(LIGHT_COLOR, vec3(54.0)) * dif;\n            c.rgb *= lig;\n            \n            c.a *= CLOUD_DENSITY;\n            c.rgb *= c.a;\n            color += c * (1.0 - color.a);\n        }\n        \n        // March forward a fixed distance\n        depth += max(RADIUS * 0.04, (RADIUS * 0.01) * depth);\n    }\n    \n    return vec4(clamp(color.rgb, 0.0, 1.0), color.a);\n}\n\nvec3 getSky(vec3 rayDir, vec3 sunDir)\n{\n    vec3 sc = mix(vec3(0.2), SKY_COLOR, clamp(rayDir.y, -1.0, 1.0) * 0.5 + 0.5);\n    sc += max(vec3(0.0), pow(dot(rayDir, sunDir) * LIGHT_COLOR, vec3(54.0)));\n    return sc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    #ifdef CAMERA_MOVE\n    vec3 camPos = vec3(cos(iTime) * 3.0, 0.0, 0.0);\n    #else\n    vec3 camPos = vec3(0.0, 0.0, 0.0);\n    #endif\n    \n    #ifdef MOUSE_LOOK\n    vec3 front = normalize(vec3(sin((iMouse.x / iResolution.x - 0.5) * 2.0), -1.0, sin((iMouse.y / iResolution.y - 0.5) * -2.0)));\n    #else\n    vec3 front = normalize(vec3(0.0, -1.0, 0.0));\n    #endif\n    vec3 right = normalize(cross(front, vec3(0.0, 0.0, 1.0)));\n    vec3 up = normalize(cross(right, front));\n    mat3 lookAt = mat3(right, up, front);\n    vec3 rayDir = lookAt * normalize(vec3(uv, 1.0));\n    \n    #ifdef SUN_MOVE\n    vec3 sunDir = normalize(vec3(cos(iTime) * 2.0, (sin(iTime)), 0.0));\n    #else\n    vec3 sunDir = normalize(vec3(2.6, -1.0, 1.0));\n    #endif\n    \n    vec3 cloudPos = vec3(0.0, -8.0, 0.0);\n    \n    vec3 skyColor = getSky(rayDir, sunDir);\n    vec4 cloudColor = volumetricMarch(camPos, rayDir, cloudPos, sunDir);\n    \n    // Alpha composite with sky\n    vec3 c = clamp(cloudColor.rgb + (1.0 - cloudColor.a) * skyColor, 0.0, 1.0);\n    \n    // Gamma correction\n    c = pow(c, vec3(0.4545));\n    \n    fragColor = vec4(\n        c,\n        1.0);\n}\n","name":"Image","description":"","type":"image"}]}