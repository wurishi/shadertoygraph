{"ver":"0.1","info":{"id":"dd33WS","date":"1677872407","viewed":49,"name":"Fork TP1__Pierr PierreModo 316","username":"PierreModot","description":"le TP1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bonnenote"],"hasliked":0,"parentid":"ds3GDn","parentname":"TP1__Pierre_Modot"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Plan\n// p : point\n// o : point du plan\n// n : normale de o\nfloat Plan(vec3 p, vec3 o, vec3 n){\n    return dot((p-o),n);\n}\n\n\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersect(float a,float b)\n{\n  return max(a,b);\n}\n\n// Eric Galin\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Eric Galin\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n\n// Boite toujours parallèle au sol\n// p : point\n// o : centre de la base de la boite\n// hauteur : hauteur de la boite\n// largeur : largeur de la boite\n// profondeur : profondeur de la boite\nfloat BoiteSimple(vec3 p, vec3 o, float hauteur, float largeur, float profondeur){\n    float b;\n    b = Plan(p, o, vec3(0,0,-1));\n    b = Intersect(b, -(Plan(p, vec3( o.x, (o.y), (o.z)+hauteur), vec3(0,0,-1))));\n    \n    b = Intersect(b, -(Plan(p, vec3( (o.x), (o.y)-(largeur/2.), (o.z)), (vec3 (0,1,0)))));\n    b = Intersect(b, -(Plan(p, vec3( (o.x), (o.y)+(largeur/2.), (o.z)), (vec3 (0,-1,0)))));\n    \n    b = Intersect(b, -(Plan(p, vec3( (o.x)-(profondeur/2.), (o.y), (o.z)), (vec3 (1,0,0)))));\n    b = Intersect(b, -(Plan(p, vec3( (o.x)+(profondeur/2.), (o.y), (o.z)), (vec3 (-1,0,0)))));\n\n    return b;\n}\n\n\n// Cylindre allongé sur l'axe Y\n// p : point\n// o : centre de la base du cylindre\n// rayon : rayon\n// hauteur : hauteur du cylindre\nfloat CylindreAllongeY(vec3 p, vec3 o, float rayon, float hauteur){\n    float c;\n    \n    c = length(vec3(p.x, p.z, 0)-vec3(o.x, o.z, 0))-rayon;\n    \n    c = Intersect(c, Plan(p, o, vec3(0,-1,0))); \n    c = Intersect(c, Plan(p, vec3(o.x, o.y+hauteur, o.z), vec3(0,1,0))); \n    \n    \n    return c;\n}\n\n\n// Cylindre allongé sur l'axe X\n// p : point\n// o : centre de la base du cylindre\n// rayon : rayon\n// hauteur : hauteur du cylindre\nfloat CylindreAllongeX(vec3 p, vec3 o, float rayon, float hauteur){\n    float c;\n    \n    c = length(vec3(p.y, p.z, 0)-vec3(o.y, o.z, 0))-rayon;\n    \n    c = Intersect(c, Plan(p, o, vec3(-1,0,0))); \n    c = Intersect(c, Plan(p, vec3(o.x+hauteur, o.y, o.z), vec3(1,0,0))); \n    \n    \n    return c;\n}\n\n// Cylindre\n// p : point\n// o : centre de la base du cylindre\n// rayon : rayon\n// hauteur : hauteur du cylindre\nfloat CylindreDroit(vec3 p, vec3 o, float rayon, float hauteur){\n    float c;\n    \n    c = length(vec3(p.x, p.y, 0)-vec3(o.x, o.y, 0))-rayon;\n    \n    c = Intersect(c, Plan(p, o, vec3(0,0,-1))); \n    c = Intersect(c, Plan(p, vec3(o.x, o.y, o.z+hauteur), vec3(0,0,1))); \n    \n    \n    return c;\n}\n\n// Capsule\n// p : point\n// o : centre de la base de la capsule\n// rayon : rayon\n// hauteur : hauteur du cylindre dans la capsule (hauteur finale = hauteur-2rayon)\nfloat CapsuleDroite(vec3 p, vec3 o, float rayon, float hauteur){\n\n    float c;\n    \n    if (p.z > o.z+hauteur)\n        return length(p-vec3(o.x, o.y, o.z+hauteur))-rayon;\n    else if (p.z < o.z)\n        return length(p-o)-rayon;\n    else {\n        c = length(vec3(p.x, p.y, 0)-vec3(o.x, o.y, 0))-rayon;\n    \n        c = Intersect(c, Plan(p, o, vec3(0,0,-1))); \n        c = Intersect(c, Plan(p, vec3(o.x, o.y, o.z+hauteur), vec3(0,0,1))); \n    return c;\n    }\n}\n\n\n// Capsule allongée sur l'axe X\n// p : point \n// o : centre de la base de la capsule\n// rayon : rayon\n// hauteur : hauteur du cylindre dans la capsule (hauteur finale = hauteur-2rayon)\nfloat CapsuleAllongeeX(vec3 p, vec3 o, float rayon, float hauteur){\n\n    float c;\n    \n    if (p.x > o.x+hauteur)\n        return length(p-vec3(o.x+hauteur, o.y, o.z))-rayon;\n    else if (p.x < o.x)\n        return length(p-o)-rayon;\n    else {\n        c = length(vec3(p.z, p.y, 0)-vec3(o.z, o.y, 0))-rayon;\n    \n        c = Intersect(c, Plan(p, o, vec3(-1,0,0))); \n        c = Intersect(c, Plan(p, vec3(o.x+hauteur, o.y, o.z), vec3(1,0,0))); \n    return c;\n    }\n}\n\n\n// Roue\n// p : point\n// o : centre \n// rayon : rayon\n// largeur : largeur\nfloat Roue(vec3 p, vec3 o, float rayon, float largeur){\n    float c;\n    \n    c = Sphere(p, o, rayon);\n    \n    c = Intersect(c, Plan(p, vec3(o.x, o.y-largeur, o.z), vec3(0,-1,0))); \n    c = Intersect(c, Plan(p, vec3(o.x, o.y+largeur, o.z), vec3(0,1,0))); \n    \n    c = Intersect(c, -CylindreAllongeY(p, vec3(o.x, o.y+largeur*0.8, o.z), rayon*0.5, largeur*0.2));\n    c = Intersect(c, -CylindreAllongeY(p, vec3(o.x, o.y-largeur, o.z), rayon*0.5, largeur*0.2));\n    \n    \n    return c;\n}\n\n\n// Panneau\n// p : point\n// o : position du bas du pied \n// hauteur : hauteur du pied\nfloat Panneau(vec3 p, vec3 o, float hauteur){\n    float pa;\n    pa = CapsuleDroite(p, o, 0.4, hauteur);\n    pa = Union(pa, BoiteSimple(p, vec3(o.x+0.5,o.y,o.z+hauteur-3.), 2., 5., 0.5));\n    \n    return pa;\n}\n\n\n\n// Modeling - 2023.02.06\n// Eric Galin\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(37.,0.,14.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n\n// Primitives\n\n\n// Operators\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n    float v;\n    \n    // panneau\n    v = Panneau(p, vec3(-15, -10, 0), 10.);\n    \n        \n    // voiture\n    //carrosserie\n    v = Union(v, BoiteSimple(p, vec3(3,0,2), 4., 10., 24.));\n    v = Union(v, BoiteSimple(p, vec3(5,0,5.9), 4.1, 10., 14.));\n    //vitres\n    //pare brise avant\n    v = Intersect(v, -BoiteSimple(p, vec3(-2,0,6), 3.5, 9., 0.5));\n    //pare brise arrière\n    v = Intersect(v, -BoiteSimple(p, vec3(11.5,0,6), 3.5, 9., 1.));\n    //fenetres\n    v = Intersect(v, -BoiteSimple(p, vec3(8,5,6), 3.5, 0.5, 5.));\n    v = Intersect(v, -BoiteSimple(p, vec3(2,5,6), 3.5, 0.5, 5.));\n    v = Intersect(v, -BoiteSimple(p, vec3(8,-5,6), 3.5, 0.5, 5.));\n    v = Intersect(v, -BoiteSimple(p, vec3(2,-5,6), 3.5, 0.5, 5.));\n    // poignets\n    v = Intersect(v, -Sphere(p, vec3(9.5,5,5.2), 0.5));\n    v = Union(v, CapsuleAllongeeX(p, vec3(9,5,5.2), 0.2, 1.));\n    v = Intersect(v, -Sphere(p, vec3(3.5,5,5.2), 0.5));\n    v = Union(v, CapsuleAllongeeX(p, vec3(3,5,5.2), 0.2, 1.));\n    \n    v = Intersect(v, -Sphere(p, vec3(9.5,-5,5.2), 0.5));\n    v = Union(v, CapsuleAllongeeX(p, vec3(9,-5,5.2), 0.2, 1.));\n    v = Intersect(v, -Sphere(p, vec3(3.5,-5,5.2), 0.5));\n    v = Union(v, CapsuleAllongeeX(p, vec3(3,-5,5.2), 0.2, 1.));\n    \n    //phares\n    v = Union(v, CylindreAllongeX(p, vec3(-9.5,3,4), 1., 0.5));\n    v = Union(v, CylindreAllongeX(p, vec3(-9.5,-3,4), 1., 0.5));\n    \n    //trous pour les roues\n    v = Union(v, CylindreAllongeY(p, vec3(-4,-5.2,2),2.8,10.4));\n    v = Union(v, CylindreAllongeY(p, vec3(11.5,-5.2,2),2.8,10.4));\n    v = Intersect(v, -BoiteSimple(p,vec3(0,0,0),2.,13.,29.));\n    v = Intersect(v, -CylindreAllongeY(p, vec3(-4,-5.2, 2), 2.5, 10.4));\n    v = Intersect(v, -CylindreAllongeY(p, vec3(11.5,-5.2, 2), 2.5, 10.4));\n    //barre entre les roues\n    v = Union(v, CylindreAllongeY(p, vec3(-4,-5,2), 0.3 ,10.));\n    v = Union(v, CylindreAllongeY(p, vec3(11.5,-5,2), 0.3 ,10.));\n    //roues\n    v = Union(v, Roue(p, vec3(-4,5, 2.), 2., 1.));\n    v = Union(v, Roue(p, vec3(-4,-5, 2.), 2., 1.));\n    v = Union(v, Roue(p, vec3(11.5,5, 2.), 2., 1.));\n    v = Union(v, Roue(p, vec3(11.5,-5, 2.), 2., 1.));\n    \n    //fumée\n    //gauche\n    v = Union(v, Sphere(p, vec3(18,-4,1), 1.));\n    v = Union(v, Sphere(p, vec3(20,-5,1), 2.));\n    v = Union(v, Sphere(p, vec3(23,-4,3), 1.5));\n    v = Union(v, Sphere(p, vec3(24,-6,4.2), 1.));\n    v = Union(v, Sphere(p, vec3(25,-5,5), 0.5));\n    //droite\n    v = Union(v, Sphere(p, vec3(18,6,1), 1.));\n    v = Union(v, Sphere(p, vec3(20,5,1), 2.));\n    v = Union(v, Sphere(p, vec3(23,6,3), 1.5));\n    v = Union(v, Sphere(p, vec3(24,4,4.2), 1.));\n    v = Union(v, Sphere(p, vec3(25,5,5), 0.5));\n    \n    \n    \n    //sol\n    v = Union(v, Plan(p,vec3(0,0, 0),vec3(0,0,1)));\n  \n    return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float e,out bool h,out int s)\n{\n  h=false;\n  \n  // Start at the origin\n  float t=0.;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    float v=object(p);\n    // Hit object\n    if(v<0.)\n    {\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,v);\n    // Escape marched too far away\n    if(t>e)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n  bool h;\n  int s;\n  float t=SphereTrace(p+Epsilon*n,l,100.,h,s);\n  if(!h)\n  {\n    return 1.;\n  }\n  return 0.;\n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p,vec3 n,vec3 e)\n{\n  // Point light\n  const vec3 lp=vec3(-10.,10.,25.);\n  \n  // Light direction to point light\n  vec3 l=normalize(lp-p);\n  \n  // Ambient color\n  vec3 ambient=.25+.25*background(n);\n  \n  // Shadow computation\n  float shadow=Shadow(p,n,l);\n  \n  // Phong diffuse\n  vec3 diffuse=.35*clamp(dot(n,l),0.,1.)*vec3(1.,1.,1.);\n  \n  // Specular\n  vec3 r=reflect(e,n);\n  vec3 specular=.15*pow(clamp(dot(r,l),0.,1.),35.)*vec3(1.,1.,1.);\n  vec3 c=ambient+shadow*(diffuse+specular);\n  return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return.5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=false;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=ro+t*rd;\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,rd);\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  //rgb=ShadeSteps(s);\n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}