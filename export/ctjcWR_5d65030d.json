{"ver":"0.1","info":{"id":"ctjcWR","date":"1730396388","viewed":91,"name":"gaussian blur fast","username":"bluechu","description":"mouse.y to choose filter size.\nFast Gaussian blur using MIPmap LOD (left circle) + separability : 60fps whatever the filter size.\nCommon: set N for quality:  ( cost = 2*N )\n  13 (default) = almost identical to full convolution.\n    7 is still pretty cool.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["blur","filter","mipmap","convolution","gaussian","tuto"],"hasliked":0,"parentid":"WtKfD3","parentname":"tuto:smart gaussian blur (video)"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fast Gaussian blur using MIPmap LOD + separability : 60fps whatever the filter size.\n// Common: set N for quality:  ( cost = 2*N )\n//  13 (default) = almost identical to full convolution.\n//   7 is still pretty cool.\n// See https://www.shadertoy.com/view/wtVfWK for experimentation\n\n\n// === second pass of separable convolution\n\n#define D(p,r) O = mix(O, vec4(1,0.3,0.6,1), smoothstep(3.0/R.y,0.,abs(length(u-p)-r)) ) // draw ring\n\nvoid mainImage(out vec4 O, vec2 U)\n{\n    Init \n    O = blur1D(iChannel0, R, U, vec2(0,1)); // vertical blur\n\n    //O = texelFetch(iChannel0, ivec2(u), 0);\n\n    vec2 u = .5 + (U - .5*R) / R.y;\n\n    D(.5, w); // draw filter\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = textureLod(iChannel0, U / R, 0.0);\n    //O = texture(iChannel0, U / R);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"int           N = 19; // 7                     // target sampling rate\nfloat         w,                               // blur radius width %, 0..1\n              z;                               // texture lod\n#define Init  w = length(iMouse.xy)<20. ? .25+.25*sin(iTime): abs(iMouse.y/R.y-.5); \\\n              z = ceil(log2(w*R.y*1.0/float(N)));   // N/w = res/2^z\n\n#define R     iResolution.xy\n\n// gaussian kernel function\n// f(x,x') = exp(-|x-x'|^2 / 2Ïƒ^2)\n#define gk(x) exp(-x*x*2.0)\n\nvec4 blur1D(sampler2D tex, vec2 iR, vec2 U, vec2 D) {\n    float x = -1.0, t = 0.0, g;\n    float step = 1.0/float(N-1);\n    vec2  u = U / iR.y;\n    vec2  s = iR.y / iR; // iResolution\n    vec4  o = textureLod(tex, u*s, z);\n\n    do {\n        g = gk(x);\n        o += (\n            textureLod(tex, (u-x*w*D)*s, z) +\n            textureLod(tex, (u+x*w*D)*s, z)) * g;\n        t += g;\n        x += step;\n    } while(x < 0.0);\n\n    return o/(t*2.0+1.0);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// === source image to gaussian-blur\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\n    Init\n    O = blur1D(iChannel0, R, U, vec2(1,0)); // horizontal blur\n}","name":"Buffer B","description":"","type":"buffer"}]}