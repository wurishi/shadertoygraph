{"ver":"0.1","info":{"id":"4fccWf","date":"1732547882","viewed":391,"name":"Glow experiment","username":"afoksha","description":"Experimental shader","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","bloom","glow"],"hasliked":0,"parentid":"3s3GDn","parentname":"GLOW TUTORIAL"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(vec2 p) \n{\n\tfloat h = dot(p, vec2(127.1, 311.7));\t\n    return fract(sin(h) * 43758.5453123);\n}\n\nfloat noise(in vec2 p) \n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\t\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n    return -1.0 + 2.0 * mix(mix(hash(i + vec2(0.0,0.0)), \n                                hash(i + vec2(1.0,0.0)), u.x),\n                            mix(hash(i + vec2(0.0,1.0)), \n                                hash(i + vec2(1.0,1.0)), u.x), u.y);\n}\n\nmat2 rot = 2.17 * mat2(0.8, 0.6, -0.6, 0.8);\n\nfloat fbm_noise(vec2 p)\n{\n    float fbm = noise(p);\n    float amplitude = 0.617;\n    for (int i = 0; i < 4; ++i)\n    {\n        p = rot * p;\n        fbm += amplitude * noise(p);\n        amplitude *= 0.617;\n    }\n    return fbm;\n}\n\nfloat smooth_max(float p, float q, float delta)\n{\n    float h = clamp(0.5f + 0.5f * (p - q) / delta, 0.0f, 1.0f);\n    return mix(q, p, h) + delta * h * (1.0f - h);\n}\n\nfloat pattern(vec2 p)\n{\n    const float Q = 0.025;\n\n    float fade0 = smoothstep(-1.0, -1.0 + Q, p.x);\n    float fade1 = 1.0 - smoothstep(1.0 - Q, 1.0, p.x);\n    float fade2 = smoothstep(-1.0, -1.0 + Q, p.y);\n    float fade3 = pow(clamp(0.5 - 0.5 * p.y, 0.0, 1.0), 2.8);\n\n    float fade = fade0 * fade1 * fade2 * fade3;\n\n    vec2 uv0 = 36.0 * p;\n    vec2 uv1 = 0.5 + 3.0 * p;\n\n    vec2 t = floor(uv1);\n    float e = 0.5 * (t.x + t.y);\n\n    float g = (fract(e) < 0.25) ? 0.05 : 0.8;\n\n    float s = 1.0 - length(fract(uv0) - vec2(0.5));\n    s = pow(s, 3.0);\n    return s * g * fade;\n}\n\n//cosmic glow\n//const vec3 internalGlowColor = vec3(0.513, 0.302, 0.207); // 105, 77, 53     #694d35\n//const vec3 externalGlowColor = vec3(0.907, 0.613, 0.542); // 231, 156, 138   #e79c8a\n//const vec3 patternColor = vec3(0.967, 0.673, 0.602);      // 247, 172, 154   #f7ac9a\n\n//nordic\n//const vec3 internalGlowColor = vec3(0.143, 0.107, 0.767); // 36, 27, 196   #241bc4\n//const vec3 externalGlowColor = vec3(0.127, 0.139, 0.894); // 32, 35, 228   #2023e4\n//const vec3 patternColor = vec3(0.487, 0.435, 0.973);      // 124, 111, 248 #7c6ff8\n\n//yellow\nconst vec3 internalGlowColor = vec3(0.753, 0.371, 0.134); // 192, 95, 34   #c05f22\nconst vec3 externalGlowColor = vec3(0.814, 0.392, 0.077); // 208, 100, 19  #d06413\nconst vec3 patternColor = vec3(0.731, 0.493, 0.114);      // 186, 126, 29  #ba7e1d\n\n//asphalt-orange\n//const vec3 internalGlowColor = vec3(0.627, 0.157, 0.066); // 160, 40, 16   #a02810\n//const vec3 externalGlowColor = vec3(0.941, 0.204, 0.081); // 240, 52, 21   #f03415\n//const vec3 patternColor = vec3(0.941, 0.437, 0.032);      // 241, 111, 8   #f16f08\n\n//calmdepth\n//const vec3 internalGlowColor = vec3(0.101, 0.467, 0.667); // 26, 119, 170  #1a77aa\n//const vec3 externalGlowColor = vec3(0.077, 0.701, 0.651); // 20, 179, 166  #14b3a6\n//const vec3 patternColor = vec3(0.143, 0.713, 0.798);      // 37, 182, 203  #25b6cb\n\n//red\n//const vec3 internalGlowColor = vec3(0.962, 0.094, 0.103); // 245, 24, 26   #f5181a\n//const vec3 externalGlowColor = vec3(0.931, 0.106, 0.097); // 237, 27, 25   #ed1b19\n//const vec3 patternColor = vec3(0.977, 0.094, 0.097);      // 249, 24, 25   #f91819\n              \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.xx;\n    vec2 pos = 4.0 * uv;\n\n    /* fbm noise */\n    float t = 0.0225 * iTime;\n    float c = cos(t);\n    float s = sin(t);\n    mat2 r = mat2(c, s, -s, c); \n    vec2 n = vec2(fbm_noise(7.0 * uv + r * vec2( 4.0, -7.0)),\n                  fbm_noise(7.0 * uv + r * vec2(-5.0,  6.0)));\n\n    /* internal and external glow */\n    const float radius = 0.067;\n    \n    pos += 0.0075 * n;    \n    vec2 q = abs(pos);\n\n    float d = smooth_max(q.x, q.y, radius);\n    float di = smooth_max(min(d, 1.0), 0.7, 0.2); /* = 1 outside square, < 1 inside  */\n    float de = max(d, 1.0); /* = 1  inside square, > 1 outside */\n\n    di = pow(di, -0.8);       /* >= 1 everywhere */\n    de = pow(de,  2.8);       /* >= 1 everywhere */\n\n\n    float d0 = max(di, de) - 1.0f;\n    d0 = 0.07 / d0;               /* radius */\n    d0 = pow(d0, 0.8);            /* fade behavior */\n\n\n    /* internal fog */\n    de = pow(de, 14.5);\n    float d1 = max(di, de) - 1.0f;\n    d1 *= 1.0 + 0.25 * (abs(n.x) + abs(n.y));\n    d1 = 0.7 / d1;                /* radius */\n    d1 = pow(d1, 0.4);            /* fade behavior */\n\n    //fragColor = vec4(vec3(d1), 1.0);\n    //return;\n\n    float fade3 = pow(clamp(0.5 - 0.5 * pos.y, 0.0, 1.0), 1.8);\n\n    vec3 color = d1 * internalGlowColor + \n                 d0 * externalGlowColor;    \n\n    float p = 0.0 * pow(d1, 2.2) * pattern(pos) * length(color);\n\n    color = fade3 * color + p * patternColor;\n    color = 1.0 - exp(-color);\n\n    //float d2 = pow(min(d1, 1.0), 4.0);\n\n    fragColor = vec4(color, 1.0);\n    \n    //fragColor = vec4(d1 * internalGlowColor, 1.0);\n    //fragColor = vec4(d0 * externalGlowColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}