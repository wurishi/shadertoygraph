{"ver":"0.1","info":{"id":"Dsj3Wm","date":"1667713356","viewed":96,"name":"Tangent Plotter (Implicit)","username":"Envy24","description":"Template for plotting tangent lines for implicit functions.\nUse mouse to pick point.\nFor more info read Image Tab header.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["template","implicit","plotter","tangent","graphs"],"hasliked":0,"parentid":"stVcDz","parentname":"Minimal Plotter"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Implicit function    f(x,y) = d\n   Gradient             vec2(∂f/∂x, ∂f/∂y)\n   Implicit derivative  -(∂f/∂x) / (∂f/∂y) \n   \n   implicit(x, y)  - redefine.\n   delf_delx(x, y) - redefine or pick numeric.\n   delf_dely(x, y) - redefine or pick numeric.\n   gradient        - don't change.\n   implicit_deriv  - don't change.\n\n   Recompile. */\n#define R                         ( iResolution )\n#define SCENE_SCALE               ( 5.5 )\n#define AR                        ( R.x / R.y )                      // Aspect ratio.\n#define UNIT                      ( (SCENE_SCALE*5.) / R.y )                      // Affects AA and thickness\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_explicit_func(vec2 NDC, float fx, float dfdx)\n{\n    float sdf = NDC.y - fx;\n    return SMAA(abs(sdf) / sqrt(1.0 + dfdx * dfdx)); // absolute value / arclenght over unit length interval\n}\nfloat draw_implicit_func(vec2 NDC, float fxy, vec2 grad) { return SMAA(abs(fxy) / sqrt(grad.x*grad.x + grad.y*grad.y)); }\nfloat draw_implicit_func(vec2 NDC, float fxyz, vec3 grad) { return SMAA(abs(fxyz) / sqrt(grad.x*grad.x + grad.y*grad.y + grad.z*grad.z)); }\n// e.t.c.\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse)\n{\n    vec2 M = MOUSE_OFFSET * (mouse == true ? 1. : 0.);\n    return ((2. * (SC - M) - R.xy) / R.y) * scale - origin;\n}\n\n//float implicit(float x, float y) { return 3.*x*x*y*y - 5.*x + sin(y) - 3.*y + 1.; }\nfloat implicit(float x, float y) { return sin(x+y)-cos(x*y)+1.; }\n//float implicit(float x, float y) { return x*x+y*y-1.; }\n//float implicit(float x, float y) { return y - (sin(x*3.141592*2.)*0.5+0.5); }\nfloat delf_delx(float x, float y) \n{ \n    /* Numeric derivative. */\n    const float dx=0.01;\n    return ( implicit(x+dx, y)-implicit(x-dx, y) ) / (2.*dx);\n    // Analytic derivative.\n    //return 6.*x*y*y - 5.; \n}\nfloat delf_dely(float x, float y) \n{ \n    /* Numeric derivative. */\n    const float dy=0.01;\n    return ( implicit(x, y+dy)-implicit(x, y-dy) ) / (2.*dy);\n    // Analytic derivative.\n    //return 6.*x*x*y + cos(y) - 3.; \n}\nvec2 gradient(float x, float y) { return vec2(delf_delx(x, y), delf_dely(x, y)); }\nvec2 normal(float x, float y) { return vec2(delf_delx(x, y), delf_dely(x, y)); }\nvec2 tangent(float x, float y) { return vec2(delf_dely(x, y), -delf_delx(x, y)); }\nfloat dydx(float x, float y) { return -delf_delx(x, y) / delf_dely(x, y); }\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0), false);\n\n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n \n \n \n    /* Implicit function f(x,y) */\n    color = mix(color, vec3(1,0,0), draw_implicit_func(NDC, implicit(NDC.x, NDC.y), gradient(NDC.x, NDC.y)));\n\n\n\n    /* Current mouse position */\n    vec2 M = map_to_centered_ndc(iMouse.xy, SCENE_SCALE, vec2(0), false);\n    color = mix( color, vec3(0,0,1), SMAA(diskSDF_L2(NDC, M, 2.*UNIT)) );\n\n\n\n    /* Tangent line */\n    if (abs(implicit(M.x, M.y)) < 0.35)\n    {\n        float x0 = M.x, fx0 = M.y;\n        float slope = dydx(x0, fx0); // dy/dx\n#define TANGENT(x) ( slope*((x)-x0)+fx0 )\n\n        // Tangent line.\n        color = mix(color, vec3(0,0,1), draw_explicit_func(NDC, TANGENT(NDC.x), slope));\n      \n        // Gradient direction (normal, gradient).\n        vec2 B = vec2(M.x, M.y);\n        vec2 G = gradient(M.x, M.y);\n        vec2 E = B + normalize(G);   \n        color = mix(color, vec3(1,0,0), SMAA(segmentSDF_L2(NDC, B, E, 0.02)) );\n        \n        // Tangent direction.\n        vec2 T = tangent(M.x, M.y);\n        E = B + normalize(T);\n        color = mix(color, vec3(0,1,0), SMAA(segmentSDF_L2(NDC, B, E, 0.02)) );\n        \n        // Tangent point.\n        color = mix(color, vec3(1,0,1), SMAA(diskSDF_L2(NDC, vec2(x0, fx0), UNIT)) );\n    }\n\n \n \n    /* Cells */\n#define CELL_SIZE 1\n         NDC = mod(NDC, vec2(CELL_SIZE)); \n         color -= vertical_line(NDC, 0.)*.2;  color -= horizontal_line(NDC, 0.)*.2; // comment this line if you not use mod\n         color -= vertical_line(NDC, -1.)*.2; color -= horizontal_line(NDC, -1.)*.2;         \n         color -= vertical_line(NDC, 1.)*.2;  color -= horizontal_line(NDC, 1.)*.2; \n    /* */ \n        \n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/**\n//#define DFDX(x, y) ( ( -implicit(x+2.*INC, y)+8.*implicit(x+INC, y)-8.*implicit(x-INC, y) + implicit(x-2.*INC, y) ) / ( 12.*INC ) )\n//#define DFDY(x, y) ( ( -implicit(x, y+2.*INC)+8.*implicit(x, y+INC)-8.*implicit(x, y-INC) + implicit(x, y-2.*INC) ) / ( 12.*INC ) )\n/**/\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R) { return length(C - NDC)-R; }\n\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E,\n    float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}","name":"Common","description":"","type":"common"}]}