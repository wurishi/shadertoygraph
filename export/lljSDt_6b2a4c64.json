{"ver":"0.1","info":{"id":"lljSDt","date":"1447430594","viewed":204,"name":"Orbiting Planets","username":"AlphaRogue","description":"3 little orbiting planets.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","planet","orbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define RADIUS .1\n#define Z 1.\n#define BLUE vec4(.11, .15, .2, 1.)\n#define AAW aalias(RADIUS, dist1, BLUE, shader1, .9)\n#define AARED aalias(radius3, dist3, BLUE, shader3, .7)\n#define AAGREEN aalias(radius2, dist2, BLUE, shader2, .9)\n#define AAWRED aalias(radius3, dist3, AAW, shader3, .7)\n#define AAWGREEN aalias(radius2, dist2, AAW, shader2, .9)\n\nvec4 aalias(float radius, float dist, vec4 bg, vec4 color, float ratio){\n    return mix(bg, color, smoothstep(radius, radius * ratio, dist));\n}\n\nvec4 shader(vec4 color, float dist, float radius){\n\treturn vec4(mix(vec4(1.), color, .5 + min(.5, dist / radius / 2.)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 lM = vec2(max(iResolution.x, iResolution.y), min(iResolution.x, iResolution.y));\n    vec2 pos = (fragCoord - .5 * lM) / lM.x;\n\n    pos += vec2(sin(iTime * .1) * .01, sin(iTime * .25) * .05);\n\n    float pi4 = /* (PI / 4) */ .7853981 - mod(iTime / 20., 2. * /* (PI * 2) */ 6.2831853);\n    \n    vec2 newPos = pos * mat2(cos(pi4), sin(pi4), -sin(pi4), cos(pi4));\n    vec3 circle1 = vec3(0., 0., Z);\n    \n    vec3 circle2 = vec3(sin(iTime) / 4., 0., cos(iTime) / 4. + Z);\n    float radius2 = circle2.z * .05;\n    \n    vec3 circle3 = vec3(circle2.x + circle2.z * 2. * radius2 * sin(iTime * 3.), .0, circle2.z + (.2 * radius2 * cos(iTime * 3.)));\n    float radius3 = circle3.z * .01;\n    \n    float dist1 = distance(newPos, circle1.xy);\n    float dist2 = distance(newPos, circle2.xy);\n    float dist3 = distance(newPos, circle3.xy);\n    \n    vec4 shader1 = shader(vec4(1., .98, .9, 1.), dist1, RADIUS); // WHITE\n    vec4 shader2 = shader(vec4(.71, .79, .73, 1.), dist2, radius2); // GREEN\n    vec4 shader3 = shader(vec4(.6, .09, .08, 1.), dist3, radius3); // RED\n  \n    if (dist3 < radius3) {\n        if (dist1 < RADIUS && dist3 < radius3) {\n        \tif (Z > circle3.z) {\n        \t\tfragColor = aalias(RADIUS, dist1, AARED, shader1, .9);\n        \t}\n        \telse {\n        \t\tif (dist2 < radius2) {\n\t\t        \tif (circle3.z > circle2.z) fragColor =  aalias(radius3, dist3, AAWGREEN, shader3, .7);\n\t\t        \telse fragColor = aalias(radius2, dist2, AAWRED, shader2, .9);\n\t\t        }\n        \t\telse fragColor = AAWRED;\n        \t}\n        }\n        else if (dist2 < radius2 && dist3 < radius3) {\n        \tif (circle2.z > circle3.z) fragColor = aalias(radius2, dist2, AARED, shader2, .9);\n        \telse fragColor = aalias(radius3, dist3, AAGREEN, shader3, .7);\n        }\n        else fragColor = AARED;\n    }\n    else if (dist2 < radius2) {\n        if (dist1 < RADIUS && dist2 < radius2) {\n        \tif (Z > circle2.z) fragColor = aalias(RADIUS, dist1, AAGREEN, shader1, .9);\n        \telse fragColor = AAWGREEN;\n        }\n        else fragColor = AAGREEN;\n    }\n    else if (dist1 < RADIUS) fragColor = AAW;\n    else fragColor = BLUE;\n}","name":"Image","description":"","type":"image"}]}