{"ver":"0.1","info":{"id":"NtX3Ds","date":"1623079748","viewed":57,"name":"CubeMap Original","username":"kithy","description":"how to make Original CubeMap.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["texture","cubemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//main\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define SURF_DIST 0.001\n\nmat2 rot(float a){\n    float s=sin(a),c=cos(a);\n    return mat2(c,s,-s,c);\n}\n\nfloat sphere(vec3 p){\n    return length(p)-0.2;\n}\n\nfloat octahedron(vec3 p,float s){\n\tp=abs(p);\n\tfloat m=p.x+p.y+p.z-s;\n\tvec3 r=3.0*p-m;\n\t\n\tvec3 q;\n\tif(r.x<0.0)q=p.xyz;\n\telse if(r.y<0.0)q=p.yzx;\n\telse if(r.z<0.0)q=p.zxy;\n\telse return m*0.57735027;\n\n\tfloat k=clamp(0.5*(q.z-q.y+s),0.0,s);\n\treturn length(vec3(q.x,q.y-s+k,q.z-k));\n}\n\nfloat GetDist(vec3 p){\n    p.xz*=rot(iTime);\n    float s=sphere(p);\n    float d=octahedron(p,1.5);\n    float a=sin(iTime*2.0)*0.5+0.5;\n    return mix(s,d,a);\n}\n\nfloat RayMarch(vec3 ro,vec3 rd,float side){\n    float dO=0.0;\n    \n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p=ro+rd*dO;\n        float dS=GetDist(p)*side;\n        dO+=dS;\n        if(dO>MAX_DIST||abs(dS)<SURF_DIST)break;\n      }\n      return dO;\n}\n\nvec3 GetNormal(vec3 p){\n        float d=GetDist(p);\n        vec2 e=vec2(0.001,0.0);\n        \n        vec3 n=d-vec3(\n            GetDist(p-e.xyy),\n            GetDist(p-e.yxy),\n            GetDist(p-e.yyx));\n \n        return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv,vec3 p,vec3 l,float z){\n    vec3 f=normalize(l-p),\n    r=normalize(cross(vec3(0.0,1.0,0.0),f)),\n    u=cross(f,r),\n    c=f*z,\n    i=c+uv.x*r+uv.y*u,\n    d=normalize(i);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n   vec2 uv=(fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    vec2 m=iMouse.xy/iResolution.xy;\n    \n    vec3 ro=vec3(0.0,0.0,-5.0);\n    ro.yz*=rot(-m.y*3.14+1.0);\n    ro.xz*=rot(-m.x*6.2831);\n   \n    \n    vec3 rd=GetRayDir(uv,ro,vec3(0.0),1.0);\n    vec3 col=texture(iChannel0,rd).rgb;\n    \n    float d=RayMarch(ro,rd,1.0);\n    float IOR=1.45;\n    \n    if(d<MAX_DIST){\n        vec3 p=ro+rd*d;\n        \n        vec3 n=GetNormal(p);\n        vec3 r=reflect(rd,n);\n        \n        vec3 rdIn=refract(rd,n,1.0/IOR);\n        \n        vec3 pEnter=p-n*SURF_DIST*3.0;\n        float dIn=RayMarch(pEnter,rdIn,-1.0);\n        \n        vec3 pExit=pEnter+rdIn*dIn;\n        vec3 nExit=-GetNormal(pExit);\n        \n        vec3 rdOut=refract(rdIn,nExit,IOR);\n        if(dot(rdOut,rdOut)==0.0)rdOut=reflect(rdIn,nExit);\n        \n        vec3 refTex=texture(iChannel0,rdOut).rgb;\n        col=vec3(refTex);\n    }\n   \n    \n    //fragColor=vec4(texture(iChannel1,uv).rgb,1.0);\n    fragColor = vec4(10.0*col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"//cubemap\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    vec3 A=abs(rayDir);\n    int i=0;\n    float M=A.x;\n    if(A.y>M)M=A.y,i=1;\n    if(A.z>M)M=A.z,i=2;\n    int faceID=i+3*int(rayDir[i]<0.0);\n   \n    vec4 face=vec4(float(faceID)/6.);\n    fragColor=vec4(texture(iChannel1,A.xy).rgb,1.0);\n    \n    fragCoord=(fragCoord+fragCoord-iResolution.xy)/iResolution.y;\n    fragColor*=vec4(length(fragCoord));\n}","name":"Cube A","description":"","type":"cubemap"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//2D galaxy\n\n#define MAX_STEPS 30\n#define ITR 8\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n\tvec2 uv=(fragCoord.xy/iResolution.xy)-0.5;\n\tfloat t=iTime*0.1+((0.25+0.05*sin(iTime*0.1))/(length(uv.xy)+0.07))*2.0;\n\tfloat s=sin(t);\n\tfloat c=cos(t);\n\tmat2 rot=mat2(c,s,-s,c);\n\n\tfloat v1,v2,v3;\n\tv2=v2=v3=0.0;\n\n\tfloat st=0.0;\n\tfor(int i=0;i<MAX_STEPS;i++){\n\t\tvec3 p=st*vec3(uv,0.0);\n\t\t//p.xy*=rot;\n\t\tp+=vec3(0.22,0.3,st-1.5-sin(iTime*0.13)*0.1);\n\t\tfor(int i=0;i<ITR;i++)p=abs(p)/dot(p,p)-0.659;\n\t\tv1+=dot(p,p)*0.0015*(1.8+sin(length(uv.xy*13.0)+0.5-iTime*0.2));\n\t\tv2+=dot(p,p)*0.0013*(1.5+sin(length(uv.xy*14.5)+1.2-iTime*0.3));\n\t\tv3+=length(p.xy*10.0)*0.0003;\n\t\tst+=0.035;\n\t}\n\n\tfloat len=length(uv);\n\tv1*=smoothstep(0.7,0.0,len);\n\tv2*=smoothstep(0.5,0.0,len);\n\tv3*=smoothstep(0.9,0.0,len);\n\n\tvec3 col=vec3(v3*(1.5+sin(iTime*0.2)*0.4),\n\t\t(v1+v3)*0.3,\n\t\tv2)+smoothstep(0.2,0.0,len)*0.85+smoothstep(0.0,0.6,v3)*0.3;\n\n\tfragColor=vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}