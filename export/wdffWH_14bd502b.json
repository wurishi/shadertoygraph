{"ver":"0.1","info":{"id":"wdffWH","date":"1588136132","viewed":513,"name":"SDF 2D Convex Polygon Shape","username":"RiggsDK","description":"This variant of a generic (convex) polygon shader uses \"point-in-polygon\" testing if a point is at a right-hand turn away from all the line segments of the polygon.\nThe approach requires all line segments to be in clockwise order. (invert sign otherwise)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","convex","distance","polygon","shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Anders Riggelsen\n// Based uppon Inigo Quilez original code\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nstruct Result{\n    float dist;     //Regular SDF distance\n    float side;     //Which side of the line segment the point is (-1,0,1)\n};\n   \nResult udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    Result res;\n    //All this is basically Inigo's regular line SDF function - but store it in 'dist' instead: \n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    res.dist = length(pa-h*ba);\n    //Is the movement (a->b->p) a righthand turn? (cross product)\n    res.side = sign( (b.x - a.x)*(p.y - a.y) - (b.y - a.y)*(p.x - a.x) ); \n    return res;\n}\n\nvec2 jiggle(vec2 p)\n{\n    return p + vec2(sin(iTime*p.y), cos(iTime*p.x))*0.25;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    \n    //List of points. All could be put into a loop if need be.\n    //Jiggled for your viewing pleasure.\n    vec2 pA = jiggle(vec2(-0.8,  0.7));\n    vec2 pB = jiggle(vec2( 1.0,  0.8));\n    vec2 pC = jiggle(vec2( 1.0, -0.4));\n    vec2 pD = jiggle(vec2( 0.0, -1.2));\n    vec2 pE = jiggle(vec2(-1.0, -0.6));\n\n    //Get the SDF distances for the line segments along with the 'side':\n    Result rA = udSegment( p, pA, pB);\n    Result rB = udSegment( p, pB, pC );\n    Result rC = udSegment( p, pC, pD );\n    Result rD = udSegment( p, pD, pE );\n    Result rE = udSegment( p, pE, pA );\n    \n    //Union of all distances\n    float d =  rA.dist;\n    d = min(d, rB.dist);\n    d = min(d, rC.dist);\n    d = min(d, rD.dist);\n    d = min(d, rE.dist);\n    //At this point all we have is a SDF of an infinitely thin shape.\n    //To make it \"solid\" we have to give all the points on the inside a negative distance.\n    \n    //But which side is the point on?\n    //If the \"side\" is negative for *all* N segments the sum will be -N.\n    //Adding N and subtracting a small value ]0-1[ before getting the sign\n    //of this sum makes it either 1 (outside of shape) or -1 (inside of shape)\n    d = d * sign(rA.side + rB.side + rC.side + rD.side + rE.side + 5.0 - 0.5);\n        \n    //Inigo's pretty colors:\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n    col *= 0.8 + 0.2*cos(120.0*d);\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}