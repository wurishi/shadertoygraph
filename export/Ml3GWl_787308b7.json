{"ver":"0.1","info":{"id":"Ml3GWl","date":"1472373739","viewed":1335,"name":"permutation cycles","username":"FabriceNeyret2","description":"Creates a permutation table (see bufA for deterministic vs varying).\n\nDisplay: permutation value (grey), position (small), orbit length (color), orbit ID (small)\n( you can compare to Bayer Matrix (checkboard) instead of BufA ).","likes":10,"published":3,"flags":32,"usePreview":0,"tags":["cycles","orbits","permutations"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// analyze a permutation matrix.\n// use either custom permutation BufA or Bayer matrix (checkboard)\n// ( see also https://www.shadertoy.com/view/XsdXRM )\n\n#define N 8.\n#define M (N*N-1.)\n\nbool char(vec2 p, float n) {                             // digit sprite\n    int i=int(p.y), b=int(exp2(floor(30.-p.x-n*3.)));\n    i = ( p.x<0.||p.x>3.? 0:\n    i==5? 972980223: i==4? 690407533: i==3? 704642687: i==2? 696556137:i==1? 972881535: 0 )/b;\n \treturn i-i/2*2==1;\n}\nvec4 D(float s, int x, int y, float C, vec2 U, vec4 O) { // display 2 digits\n    return    char(U*s-vec2(x  ,y), floor(C/10.) )\n           || char(U*s-vec2(x+4,y), mod(floor(C),10.))\n           ? fract(O+.5) : O;\n}\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 R = iResolution.xy;\n\n/**/  \n    // --- display the permutation matrix\n    vec2 P = floor((U-.5)/R*N);\n    O = texture(iChannel0,(.5+P)/iChannelResolution[0].xy);\n    float T = P.x+N*P.y, m,               // position\n          C = floor(O.x *M+.5);           // permutation\n\tU = fract(U/R*N);\n    O = D(32., 0,14, T, U, O);           // display pos\n    O = D(16., 4, 9, C, U, O);           // display permutation\n\n    T = C; m=T;\n    for (float i = 1.; i < N*N+1.; i++) { // itered permutations\n        T = floor(.5+ M* texture(iChannel0,(.5+vec2(mod(T,N),floor(T/N)))/iChannelResolution[0].xy).x);\n        m = min(m,T);\n        if (T==C) { C=i; break; }\n    }\n    O.r  = D(16., 4, 1, C, U, O).r;      // display orbit length\n    O.rg = D(32.,24, 4, m, U, O).rg;     // display orbit ID\n\n/**   \n    // --- display iterated permutations \n    O -= O;\n\tU = (U-.5)/R * (N*N);\n    \n    float t = floor(U.x);\n    for (int i = 0; i < int(N*N); i++)   // itered permutations\n        if (i < int(U.y))\n            t = floor(.5+ M* texture(iChannel0,(.5+vec2(mod(t,N),floor(t/N)))/iChannelResolution[0].xy).x);\n\tO += (t+1.)/(N*N);\n/**/\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// generates a permutation table\n\n#define N 8.\n\n#define t float(iFrame)          // deterministic seed\n//#define t (60.*iTime)    // time seed\n\n#define rnd(x)    fract(4563.*sin(1e4*(x)-17.53*t))\n#define rnd2(x,y) fract(4563.*sin(1e4*((x)+.017*(y))-17.53*t))\n#define T(U) texture(iChannel0, mod(.5+U,N)/iResolution.xy)\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U -= .5;                               // we want integer index\n    if (iFrame<1) {\n        O +=  ( U.x + N*U.y +.0*.5 ) / (N*N-1.) -O; // start with ordered list\n        return;\n    }\n    \n    O = T(U);\n    \n    if (iFrame > 150) return;\n    \n    float n = mod(float(iFrame),3.);      // alternate 3 phases in time\n    \n    if (n==0.) O = T(U+1.);               // offset\n    \n    if (n==1. &&\n        rnd2(floor(U.x/2.),U.y) < .5 )    // random twin-lines permutations\n           O = T(U-vec2(2.*mod(U.x,2.)-1., 0));\n    \n    if (n==2. &&\n        rnd2(U.x,floor(U.y/2.)) < .5 )    // random twin-columns permutations\n           O = T(U-vec2(0, 2.*mod(U.y,2.)-1.));\n}","name":"Buf A","description":"","type":"buffer"}]}