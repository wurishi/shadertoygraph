{"ver":"0.1","info":{"id":"DtVSDm","date":"1686142336","viewed":73,"name":"Circles and noise","username":"motus_art","description":"Playing around with circles and noise.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n\nfloat ring(int i, vec2 fragCoord) {\n\n    vec2 center = iResolution.xy * 0.5;\n    center.y -= 100.0;\n    \n    float maxRadius = min(center.x, center.y) * 1.5;\n    float thickness = 1.5;\n\n    // Calculate the normalized y-coordinate\n    float normalizedY = fragCoord.y / iResolution.y;\n\n    // Calculate the target radius based on the normalized y-coordinate\n    float noiseValue = noise(fragCoord * 0.01 + iTime * float(i) * 0.1);\n    float targetRadius = mix(0.0, maxRadius, normalizedY) + noiseValue * 20.0;\n\n    // Calculate the current radius based on the fragment's distance from the center\n    float currentRadius = length(fragCoord - center);\n\n    // Calculate the alpha based on the stroke thickness and the difference between current and target radius\n    float alpha = smoothstep(targetRadius - thickness, targetRadius, currentRadius) -\n                  smoothstep(targetRadius, targetRadius + thickness, currentRadius);\n\n    return alpha;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float alpha = 0.0;\n    \n    for (int i = 0; i < 10; i++) {\n      alpha += ring(i, fragCoord);\n    }\n    \n    // Set the color to black with the calculated alpha\n    fragColor = vec4(mix(vec3(0.0), vec3(1.0), alpha), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}