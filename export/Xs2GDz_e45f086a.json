{"ver":"0.1","info":{"id":"Xs2GDz","date":"1619549923","viewed":44,"name":"No Idea","username":"pix","description":"No Idea","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.141592\n\nmat3 lookAt(vec3 p, vec3 t) {\n\tvec3 f = normalize(p - t);\n\tvec3 r = cross(vec3(0.0,1.0,0.0), f);\n\treturn mat3(r, cross(f, r), f);\n}\n\nfloat dist_field(vec3 p) {\n\treturn length(p)+sin(iTime/20.);\n}\n\n#define EPS 0.01\nvec4 raymarch(vec3 ro, vec3 rd) {\n\tfloat d = 0.0, h = 0.0, maxd = 16.0;\n\tvec3 p = ro;\n\tfor (int i = 0; i < 64; ++i) {\n\t\td = dist_field(p);\n\t\tif (d < EPS || h > maxd)\n\t\t\tbreak; // return vec4(point,distance)\n\t\th += d; p += d * rd;\n\t}\n\treturn vec4(p, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -01.0+2.0*fragCoord.xy/iResolution.xy;\n\tuv.y *= iResolution.y/iResolution.x;\n\t\n\tfloat stime = sin(2.1*PI*iTime/25.0);\n\tfloat ctime = cos(2.0*PI*iTime/25.0);\n\t\n\tvec3 ro = vec3(4.0*ctime, 3.0, 4.0*stime);\n\tvec3 rd = normalize(lookAt(ro, vec3(0.0,0.6,0.0))*vec3(uv, -1.0));\n\t\n\tvec4 res = raymarch(ro, rd);\n\n\tvec3 col = vec3(res.z, sin(res.z), sin(rd*4.));\t\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}