{"ver":"0.1","info":{"id":"lXlfRM","date":"1728200393","viewed":45,"name":"colorful spriral","username":"nayk","description":"colorful  https://www.shadertoy.com/view/stsXDl#","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fractal","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*1.5+.5)\n#define PI 3.14159265359\n\nfloat hash21(vec2 p) {\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nfloat sdCircle(vec2 p, float r) {\n    return length(p) - r;\n}\n\n\nvec3 neonColor(float t) {\n    vec3 color = 0.5 + 0.5 * cos(6.28318 * (t * vec3(1.0, 1.0, 0.5) + vec3(0.0, 0.33, 0.67)));\n    return pow(color, vec3(0.6)); // Restore original color intensity for a balanced vibrancy\n}\n\n#define h22(p) fract(29. * sin(p) * sin(2. * (p).yx))\n#define h32(p) vec3(h22(p), dot(h22(p + 1.), h22(p + 2.)))\n#define sgn(a) (step(0., a) * 2. - 1.)\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a) * step(a.zxy, a) * sign(p);\n}\n\nvec3 edge(vec3 p) {\n    vec3 b = 1. - abs(face(p));\n    vec3 a = sgn(p) * b.zxy; \n         b = sgn(p) * b.yzx;\n    \n    return length(p - a) < length(p - b) ? a : b;\n}\nvoid drawRings(vec2 uv, inout vec3 col, float timeOffset) {\n    // Original pulsating rings\n   \n    \n    // Additional outer rings for a larger effect\n    for (int i = 15; i < 25; i++) {\n        float t = (iTime + timeOffset) * (0.5 + 0.2 * sin(iTime)); // Modulate speed in sync with music\n        t += float(i) * PI / 6.0;\n        float d = sdCircle(uv, 0.3 + 0.05 * sin(t * 2.0)); // Larger rings further out\n        vec3 ringColor = neonColor(float(i) / 25.0 + (iTime + timeOffset) * 0.15);\n        col += ringColor * smoothstep(0.015, 0.0, abs(d)) * 0.5; // Softer outer rings\n    }\n}\n\n\nvoid mainImage(out vec4 O, vec2 C)\n\n{\n    O=vec4(0);\n    \n      vec3 col = vec3(0.0, 0.0, 0.0); // Black background\n        vec2 uv = (C - 0.5 * iResolution.xy) / min(iResolution.x, iResolution.y);\n          vec2 leftUV = uv + vec2(0.4, 0.0); // Move further to the left\n          float c23=hash21(uv);\nfloat timeOffset =1.;\n\n for (int i = 0; i < 150; i++) {\n        float t = (iTime + timeOffset) * (0.6 + 0.2 * sin(iTime)); // Modulate speed in sync with music\n        t += float(i) * PI / 71.5;\n        float d = sdCircle(uv*0.1, 0.1 + 0.03 * sin(t * 3.0));\n        vec3 ringColor = neonColor(float(i) / 15.0 + (iTime + timeOffset) * 0.2);\n        col += ringColor * smoothstep(0.01, 0.0, abs(d)) * 0.7; // Sharper, more intense rings\n    }\n\n\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(0.,1.2,2.),H(g*.1),.8)*3./e/8e3\n    )\n    {\n        p=g*d;\n         vec2 r2 = iResolution.xy;\n         vec2  u=C;\n         vec4 o=O;\n    u = (u - r2 / 2.) / r2.y;\n    \n    u = vec2(\n            log(length(u)),\n            atan(u.x, u.y)\n        ) * 7.;\n    \n    u = fract(u / 6.28) - .5;\n    u *= 7.;\n    u += iTime;\n    \n    float z = dot(\n          cos(u * 5.) * 2.5, \n          sin(u * 2.)\n      ) * .1;\n    \n    vec3 p2 = vec3(u, z),\n         id = floor(p) + .5;\n    \n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 5.2;\n\tfloat si = sin(t);\n\tfloat co = cos(t);\n\tmat2 ma = mat2(co, si, -si, co);\n    p2.xy*=ma;\n    o = vec4(1);\n    vec3 m = sign(mod(id, 2.) - 1.);\n    \n    if(m.x * m.y * m.z < 0.) \n        id += face(p2 - id);\n    \n    p2 *= id;\n    p.z-=iTime*10.;\n    p.xy*=ma;\n    o = vec4(h32(id.xy) * (.5 - 1. * (length(p2) - .6)), 0);\n  vec3 pr2 = edge(p);\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.x<p.y?p=p.xzy:p;\n          \n            s*=e=1.8+sin(iTime*0.51)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+sin(iTime*.3)*3.,\n                    120,\n                    8.+cos(iTime*.5)*5.\n                 )+col*c23*pr2;\n         }\n         g+=e=length(p.xxyz )/s;\n    }\n     \n    \n}","name":"Image","description":"","type":"image"}]}