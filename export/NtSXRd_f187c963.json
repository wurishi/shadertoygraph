{"ver":"0.1","info":{"id":"NtSXRd","date":"1628333867","viewed":60,"name":"Draw With Cellular Automata","username":"resontone","description":"A grid with 12 different rules\n\nDraw: Hold Left Mouse \nErase: Ctrl+ Left Mouse\nReset: Backspace\nSpace: Smaller brush\n","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand( float n){\n    return fract ( sin (n) * 43758.5453123 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    \n\n\n    // Time varying pixel color\n    float angle = rand(iTime*2.);\n    float amplitude = 0.;//0.01 * rand(iTime);\n    vec2 disp = vec2(sin(angle), cos(angle));\n    \n    vec4 col = texture(iChannel0, uv + disp*amplitude);\n\n    \n    \n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int KEY_SPACE = 32;\nconst int KEY_ENTER = 13;\nconst int KEY_CTRL = 17;\nconst int KEY_1 = 49;\nconst int KEY_2 = 50;\nconst int KEY_3 = 51; \nconst int KEY_BACKSPACE = 8;\nconst int KEY_DELETE = 127;\n\n\n\nfloat rand( float n){\n    return fract ( sin (n) * 43758.5453123 );\n}\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvec4 cellGLES2(sampler2D tex, in vec2 pixelCoord)\n{\n    // do wrapping\n    ivec2 r = ivec2(iResolution.x, iResolution.y);\n    \n    //Wrap pixel coordinates to screen\n    pixelCoord = fract(pixelCoord);\n    if(pixelCoord.x >= 0. && pixelCoord.x <= 1.)\n    {\n        if(pixelCoord.y >= 0. && pixelCoord.y <= 1.)\n        {\n            return (texture(tex, pixelCoord, 0.));\n        }\n    }\n    \n    return(vec4(0.));\n}\n\n\nbool isAlive(vec4 cell)\n{\n    return(cell.a >= 0.99);\n}\n\n\nfloat keyPressed(int keyCode) {\n\treturn texture(iChannel1, vec2((float(keyCode) + 0.5) / 256., .5/3.)).r;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pixelSize = 1./iResolution.xy;\n    \n\n   // texture(iChannel0, uv);\n\n    fragColor = vec4(0.);\n        \n    float bpm = 87.7;    \n    float mult = 16.;\n    \n    float columns = 4.; \n    float rows = 3.;\n    \n        \n    float currentBeat = 0.;//floor(iTime*bpm*mult/60.);\n    float distanceFromBeatAttack = fract(iTime*bpm*mult/60.);\n    vec2 beatPos = vec2(floor(rand(currentBeat)*columns)/columns, \n                    floor(rand(currentBeat + 26838.)*rows)/rows);\n                    \n    beatPos.x += 0.5/columns;\n    beatPos.y += 0.5/rows;\n    \n    //Replicator    B1357/S1357\t\n    //Seeds    B2/S   \n    //B25/S4\n    //B3/S012345678   Life without Death\n    //B3/S23  Standard Life\n    //B34/S34\t34 Life (unstable)\n\n\n    //0,1,2,3,4,5,6,7,8\n    float birth[9] = float[](0., 0., 0., 0., 0., 0., 0., 0., 0.);\n    float survive[9] = float[](0., 0., 0., 0., 0., 0., 0., 0., 0.);\n\n    float initThreshold = 0.5;\n\n    \n    \n\n    \n    \n    float pos_y = (uv.y);\n    float pox_x = uv.x;\n\n\n    float cellAgeRate = 0.001;\n    float slimeEvaporationRate = 0.001;\n    float border = 1.1; //setting this to > 1. removes the border entirely\n    bool treatDrawAsErase = false;\n    \n    \n    float automataCellID =  floor((pos_y)*rows)*columns + floor(pox_x*columns); //mod(floor(iTime), 12.);\n    \n    vec2 automataCellUV = fract(vec2(pox_x*columns, (pos_y)*rows));\n    automataCellUV -= 0.5;\n    if(max(abs(automataCellUV.x), abs(automataCellUV.y)) > border*0.5)\n    {\n        //enforce black border to prevent cross contamination\n        fragColor = vec4(0.) ;\n         \n    } else\n    {\n        highp int index = int(automataCellID)+1;\n        switch (index) \n        {\n        case 0:\n            break;\n        case 1:\n            //B3/S23    Life \n            birth[3] = 1.;\n\n            survive[2] = 1.;\n            survive[3] = 1.;\n            break;\n        case 2:\n            treatDrawAsErase = true;\n            initThreshold = 0.515;\n            //B35678/S5678   Diamoeba  \n            birth[3] = 1.;\n            birth[5] = 1.;\n            birth[6] = 1.;\n            birth[7] = 1.;\n            birth[8] = 1.;\n\n            survive[5] = 1.;\n            survive[6] = 1.;\n            survive[7] = 1.;\n            survive[8] = 1.;\n            break;\n        case 3:\n            treatDrawAsErase = true;\n            initThreshold = 0.9995;;\n            //B1357/S1357\tReplicator\n            birth[1] = 1.;\n            birth[3] = 1.;\n            birth[5] = 1.;\n            birth[7] = 1.;\n\n            survive[1] = 1.;\n            survive[3] = 1.;\n            survive[5] = 1.;\n            survive[7] = 1.;\n            break;\n        case 4:\n            //B3/S012345678   Life without Death\n            treatDrawAsErase = true;\n            birth[3] = 1.;\n\n            survive[0] = 1.;\n            survive[1] = 1.;\n            survive[2] = 1.;\n            survive[3] = 1.;\n            survive[4] = 1.;\n            survive[5] = 1.;\n            survive[6] = 1.;\n            survive[7] = 1.;\n            survive[8] = 1.;\n            break;\n        case 5:\n        \n            treatDrawAsErase = true;\n            \n            //B34/S34    34 Life \n            birth[3] = 1.;\n            birth[4] = 1.;\n\n            survive[3] = 1.;\n            survive[4] = 1.;\n            break;\n        case 6:\n            //B36/S125\t2x2\n            birth[3] = 1.;\n            birth[6] = 1.;\n\n            survive[1] = 1.;\n            survive[2] = 1.;\n            survive[5] = 1.;\n            break;\n        case 7:\n            //B36/S23\tHighLife\n            birth[3] = 1.;\n            birth[6] = 1.;\n\n            survive[2] = 1.;\n            survive[3] = 1.;\n            break;\n        case 8:\n            //B3678/S34678\tDay & Night\n            birth[3] = 1.;\n            birth[6] = 1.;\n            birth[7] = 1.;\n            birth[8] = 1.;\n\n            survive[3] = 1.;\n            survive[4] = 1.;\n            survive[6] = 1.;\n            survive[7] = 1.;\n            survive[8] = 1.;\n            break;\n        case 9:\n            //B368/S245\tMorley\n            birth[3] = 1.;\n            birth[6] = 1.;\n            birth[8] = 1.;\n\n            survive[2] = 1.;\n            survive[4] = 1.;\n            survive[5] = 1.;\n            break;\n        case 10:\n            treatDrawAsErase = true;\n            \n            //B25/S4\n            birth[2] = 1.;\n            birth[5] = 1.;\n            \n            survive[4] = 1.;\n            break;\n        case 11:\n            //B4678/S35678\tAnneal\n            birth[4] = 1.;\n            birth[6] = 1.;\n            birth[7] = 1.;\n            birth[8] = 1.;\n\n            survive[3] = 1.;\n            survive[5] = 1.;\n            survive[6] = 1.;\n            survive[7] = 1.;\n            survive[8] = 1.;\n            break;\n        case 12:\n            treatDrawAsErase = true;\n            \n            initThreshold = 0.99215;\n            //B2/S\t      Seeds\n            birth[2] = 1.;\n            break;\n        }\n\n\n\n        if(iTime < 0.1)\n        {\n            fragColor = vec4(0.);\n        } else\n        {\n            int neighbour_count = 0;\n\n            float neighbour_alpha_sum = 0.; //this is analogous to count\n\n            for(float ax = -1.; ax < 1.5; ax+= 1.)\n            {\n                for(float ay = -1.; ay < 1.5; ay += 1.)\n                {\n                    if(abs(ay) < 0.1 && abs(ax) < 0.1)\n                    {\n                    } else\n                    {\n                        vec2 newPos = uv + vec2(pixelSize.x*ax, pixelSize.y*ay);\n                        if(newPos.x >= 0. && newPos.x < 1. && newPos.y >= 0. && newPos.y < 1.)\n                        {\n   \n                            if(isAlive(cellGLES2(iChannel0, uv + vec2(pixelSize.x*ax, pixelSize.y*ay)))) //alive\n                            {\n                                neighbour_count ++;\n                            }\n                            neighbour_alpha_sum += cellGLES2(iChannel0, uv + vec2(pixelSize.x*ax, pixelSize.y*ay)).a;\n                        }\n                    }\n                }\n            }\n\n\n            \n            \n            \n\n            if(isAlive(cellGLES2(iChannel0, uv)))\n            {\n                //Survival\n                if(survive[neighbour_count] > 0.5)\n                {\n                    fragColor = cellGLES2(iChannel0, uv);\n                    \n                    //Stays alive, ages\n                    if(fragColor.b > 0.1)\n                    {\n                        fragColor.b -= cellAgeRate;\n                    }\n                    if(fragColor.g > 0.4)\n                    {\n                       \n                       fragColor.g -= cellAgeRate;\n                    }\n                    if(fragColor.r > 1.)\n                    {\n                       \n                       fragColor.r -= cellAgeRate;\n                    }\n                    if(length(fragColor.rgb) > 0.01)\n                    {\n                        fragColor.rgb -= cellAgeRate;\n                        fragColor.a = 1.;\n                    } else\n                    { \n                        fragColor.a -= 0.1; //cell dies of old age\n                    }\n                    \n                } else //analogous to the cell dying from overcrowding\n                {\n                    fragColor = cellGLES2(iChannel0, uv); //retains the cell\n                    fragColor.a -= 0.1; //dies\n                \n                }\n                \n            } else //is currently dead, so look at birth\n            {   \n                if(birth[neighbour_count] > 0.5) //revives\n                {\n                    fragColor = vec4(1.);\n                } else //stays dead\n                {\n                    //Cells that stay dead turn blue and eventually die\n                    fragColor = cellGLES2(iChannel0, uv);\n                    fragColor.r -= 0.01;\n                    fragColor.g -= 0.01;\n                    fragColor.a -= 0.01;\n                    if(length(fragColor.rgb) > 0.1)\n                    {\n                        fragColor.rgb -= slimeEvaporationRate;\n                    }\n                   \n                    //fragColor.a = 1.;\n                \n                }\n            }\n\n\n\n            float mouseDist = length(fragCoord/iResolution.y - iMouse.xy/iResolution.y);\n            \n            \n            float drawRadius;\n            \n            if(keyPressed(KEY_SPACE)> 0.5)\n            {\n                drawRadius  = 0.005 + 0.001*rand(iTime);\n            } else\n            {\n                drawRadius = 0.01 + 0.01*rand(iTime);\n            }\n            \n            if(mouseDist <= 0.1 && iMouse.z > 0.5)\n            {\n                bool erase = treatDrawAsErase;\n                if(keyPressed(KEY_CTRL) > 0.5)\n                {\n                    erase = true;\n                }\n            \n            \n                if(erase)\n                {\n                    //ERASE\n                    if(mouseDist <= 0.05 + 0.01*rand(iTime))\n                    {\n                        fragColor = vec4(0.);\n                    }\n                    \n                    if(treatDrawAsErase && keyPressed(KEY_CTRL) < 0.5)\n                    {\n                        if(mouseDist <= 0.025)\n                        {\n                            fragColor = vec4(1.);\n                        }\n                    }\n                    \n                } else\n                {\n                    if(mouseDist <= drawRadius)\n                    {\n                        fragColor = vec4(1.);\n                    }\n                }\n\n           }\n        } \n    }\n    if(keyPressed(KEY_BACKSPACE)> 0.5)\n    {\n        fragColor = vec4(0.);\n    }\n    \n    \n\n    if(abs((uv.x-beatPos.x)) < 0.01 - 0.005*(1.-cos(distanceFromBeatAttack*0.5*3.1425)))\n    {\n        if(treatDrawAsErase)\n        {\n            fragColor = vec4(0.);\n            if(length(uv-beatPos) < 0.01)\n            {\n                fragColor = vec4(1.);\n            }\n    \n        } else\n        {\n            fragColor = vec4(1.);\n        }\n    }\n    \n    fragColor = clamp(fragColor, 0., 1.);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}