{"ver":"0.1","info":{"id":"dlGfzz","date":"1701777464","viewed":74,"name":"moebius map b triangle pair anim","username":"jt","description":"Möbius Transformation that maps one triangle onto another (animated using circle bounce by oneshade).\nUsing this transformation because it maps generalized circles to generalized circles.\nThanks to mla for fixing missing complex multiplication!\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["triangle","map","animation","learning","complex","transformation","moebius"],"hasliked":0,"parentid":"cltBDs","parentname":"try moebius map by triangle pair"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dlGfzz moebius map b triangle pair anim, 2023 by jt\n// based on https://www.shadertoy.com/view/cltBDs try moebius map by triangle pair\n// using https://www.shadertoy.com/view/DlsGWN Bouncy Ball in a Disk by oneshade \n\n// Möbius Transformation that maps one triangle onto another.\n// Using this transformation because it maps generalized circles to generalized circles.\n// Thanks to mla for fixing missing complex multiplication!\n// Thanks to oneshade for the wonderful circle bounce function!\n\n// see e.g.\n// https://en.wikipedia.org/wiki/Moebius_transformation\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node10.html\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node11.html\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node12.html\n\n// tags: triangle, map, animation, learning, complex, transformation, moebius\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat2 rotate(float phi)\n{\n    float c = cos(phi), s = sin(phi);\n    return mat2(c,s,-s,c);\n}\n\n// Thanks to oneshade for this wonderful disk_bounce function!\nvec4 disk_bounce(float r, vec4 pv, float t) // https://www.shadertoy.com/view/DlsGWN Bouncy Ball in a Disk by oneshade\n{\n    vec2 p0 = pv.xy;\n    vec2 v0 = pv.zw;\n    vec2 pos;\n    vec2 vel;\n    float a = dot(v0, v0);\n    float b = dot(p0, v0);\n    float c = dot(p0, p0) - r * r;\n    float dis = b * b - a * c;\n    if (dis >= 0.0 && c <= 0.0)\n    {\n        dis = sqrt(dis);\n        t += (dis + b) / a;\n\n        vec2 hit = p0 + v0 * (dis - b) / a;\n        float reflDelta = 2.0 * asin((p0.y * v0.x - p0.x * v0.y) / (r * sqrt(a))) - pi;\n\n        float pathLen = 2.0 * dis / a;\n        float hitIndex = floor(t / pathLen);\n\n        float angle = reflDelta * hitIndex;\n        vec2 startPos = rotate(angle - reflDelta) * hit;\n        vec2 startVel = rotate(angle) * v0;\n\n        t -= pathLen * hitIndex;\n        pos = startPos + startVel * t, vel = startVel;\n    }\n    return vec4(pos,vel);\n}\n\nvec4 hash41(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n// Möbius transform:\n// Complex numbers\n//     a z + b\n//     -------\n//     c z + d\n\n#define real(z) (z).x\n#define imag(z) (z).y\n\nvec2 cmul(vec2 a, vec2 b)\n{\n    return\n        vec2\n        (\n            a.x*b.x-a.y*b.y,\n            a.x*b.y+a.y*b.x\n        );\n}\n\nvec2 cdiv(vec2 a, vec2 b)\n{\n    return\n        vec2\n        (\n            a.x*b.x+a.y*b.y,\n            a.y*b.x-a.x*b.y\n        )\n        /\n        dot(b,b);\n}\n\nstruct cmat2\n{\n    vec2 a, b, c, d;\n};\n\n// / a b \\   / A B \\   / aA+bC aB+bD \\\n// |     | * |     | = |             |\n// \\ c d /   \\ C D /   \\ cA+dC cB+dD /\ncmat2 cmul(cmat2 p, cmat2 q)\n{\n    return\n        cmat2\n        (\n            p.a * q.a + p.b * q.c, p.a * q.b + p.b * q.d,\n            p.c * q.a + p.d * q.c, p.c * q.b + p.d * q.d\n        );\n}\n\n// https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Formula_for_the_inverse_transformation\ncmat2 inverse_moebius(cmat2 m)\n{\n    return\n        cmat2\n        (\n            m.d,-m.b,\n            -m.c,m.a\n        );\n}\n\n// https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Specifying_a_transformation_by_three_points\ncmat2 moebius_by_triangle(vec2 z1, vec2 z2, vec2 z3)\n{\n    return // transform from three points to 0,1,infty\n        cmat2\n        (\n            // Thanks to mla for debugging missing complex multiplication here!!!\n            z2-z3,-cmul(z1,z2-z3),\n            z2-z1,-cmul(z3,z2-z1)\n        );\n}\n\n// https://en.wikipedia.org/wiki/M%C3%B6bius_transformation#Specifying_a_transformation_by_three_points\ncmat2 moebius_by_triangles(vec2 p0, vec2 q0, vec2 p1, vec2 q1, vec2 p2, vec2 q2)\n{\n    // map triangle to 0,1,infinity then 0,1,infinity to other triangle\n    if(false) // which direction?\n    {\n    return\n        cmul\n        (\n            moebius_by_triangle(p0,p1,p2),\n            inverse_moebius(moebius_by_triangle(q0,q1,q2))\n        );\n    }\n    return\n        cmul\n        (\n            inverse_moebius(moebius_by_triangle(p0,p1,p2)),\n            moebius_by_triangle(q0,q1,q2)\n        );\n}\n\n// Thanks to mla for the (in retrospect) obvious concise implementation:\n// mla: \"How about just defining complex multiplication\n//       and division as cmul and cdiv say,\n//       and doing return cdiv(cmul(z,a)+b,cmul(z,c)+d) ?\"\nvec2 apply_moebius(vec2 a, vec2 b, vec2 c, vec2 d, vec2 z)\n{\n    return cdiv(cmul(z,a)+b,cmul(z,c)+d);\n}\n\nvec2 apply_moebius(cmat2 m, vec2 z)\n{\n    return cdiv(cmul(z,m.a)+m.b,cmul(z,m.c)+m.d);\n}\n\n#define pi 3.1415926\n\nfloat checker(vec2 p)\n{\n    float d = 10.0/iResolution.y;\n    if(true)\n    {\n        p = sin(2.0*pi*p);\n        return smoothstep(-d,+d, p.x*p.y);\n    }\n    p = fract(p)-0.5;\n    return smoothstep(-d,+d,max(min(p.x,p.y),-max(p.x,p.y))); // fuzzy logic\n}\n\nvec2 polar(float phi)\n{\n    return vec2(cos(phi), sin(phi));\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise to-unit map thanks to Fabrice\n    o = vec4(0);\n    //if(all(lessThan(abs(I), vec2(1))))\n    {\n        I *= 2.0;\n        //I = apply_moebius(vec2(1,0), vec2(0), vec2(0), vec2(1,0), I); // identity\n        //I = apply_moebius(vec2(0), vec2(1,0), vec2(1,0), vec2(0), I); // inversion\n        /*\n        vec2 p0 = vec2(-1,-1), q0 = vec2(-1,-1);\n        vec2 p1 = vec2(+1,-1), q1 = vec2(+1,-1);\n        vec2 p2 = vec2(-1,+1), q2 = vec2(-1,+1);\n        */\n        float r = 2.0;\n        vec2 p0 = polar(radians( 30.0)), q0 = disk_bounce(r, hash41(123.0), iTime/10.0).xy;\n        vec2 p1 = polar(radians(150.0)), q1 = disk_bounce(r, hash41(456.0), iTime/10.0).xy;\n        vec2 p2 = polar(radians(270.0)), q2 = disk_bounce(r, hash41(789.0), iTime/10.0).xy;\n\n        // bounce circle\n        float u = 1.0-smoothstep(0.0,10.0/R.y,abs(length(I)-r));\n        // source\n        vec3 s =\n            smoothstep\n            (\n                0.0,\n                10.0/R.y, \n                vec3\n                (\n                    length(I-p0),\n                    length(I-p1),\n                    length(I-p2)\n                )\n                -\n                0.05\n            );\n        // dest\n        vec3 d =\n            1.0\n            -\n            smoothstep\n            (\n                0.0,\n                10.0/R.y, \n                vec3\n                (\n                    length(I-q0),\n                    length(I-q1),\n                    length(I-q2)\n                )\n                -\n                0.05\n            );\n\n        cmat2 m = moebius_by_triangles(p0, q0, p1, q1, p2, q2);\n\n        I = apply_moebius(m, I);\n\n        o.xyz = vec3(mix(0.25,0.75,checker(I)));\n        // show points BEFORE transform\n        o.xyz = max(o.xyz, u);\n        o.xyz = min(o.xyz, s.x);\n        o.xyz = min(o.xyz, s.y);\n        o.xyz = min(o.xyz, s.z);\n        o.xyz = max(o.xyz, d.x);\n        o.xyz = max(o.xyz, d.y);\n        o.xyz = max(o.xyz, d.z);\n    }\n}\n","name":"Image","description":"","type":"image"}]}