{"ver":"0.1","info":{"id":"4cVcDV","date":"1732410092","viewed":84,"name":"HW1 GRAPHICS","username":"fxsbt","description":"Ball with shadows in a room.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 8.0;\nconst float PRECISION = 1e-3;\nconst float LH = -2.0 - PRECISION;\nconst float RH = 2.0 + PRECISION;\nconst float LD = -2.0 - PRECISION;\nconst float RD = 6.0 + PRECISION;\nconst float LV = -1.0 - PRECISION;\nconst float RV = 3.0 + PRECISION;\nconst float RAD = 1.0;\nconst vec3 SPHERE_CENTER = vec3(0.0, 1.0, -1.0);\n\n\nfloat shadowAmount(vec3 lightPos, vec3 surfPos) {\n    vec3 lightDir = surfPos - lightPos;\n    vec3 radDir = SPHERE_CENTER - lightPos;\n    float angleCos = dot(normalize(lightDir), normalize(radDir));\n    float doubleAngleCos = 2.0 * pow(angleCos, 2.0) - 1.0;\n    float len = sqrt(pow((SPHERE_CENTER.x - lightPos.x), 2.0) + pow((SPHERE_CENTER.y - lightPos.y), 2.0) + pow((SPHERE_CENTER.z - lightPos.z), 2.0));\n    float difference = (2.0 * pow(len, 2.0) - 2.0 * pow(len, 2.0) * doubleAngleCos) / 2.0;\n    if (difference < RAD) {\n        if (angleCos < 0.0) {\n            return 1.5;\n        }\n        return 0.3;\n    }\n    return 1.0;\n}\n\nbool isInRoom(vec3 pos) {\n    return pos.x > LH && pos.x < RH && pos.z > LD && pos.z < RD && pos.y > LV && pos.y < RV;\n}\n\nvec4 rayPlaneIntersection(float plane, vec3 ro, vec3 rd, vec3 lightPos, vec3 N, vec3 col) {\n    if (plane > 0.0) {\n        vec3 pos = ro + rd * plane;\n        if (isInRoom(pos)) {\n            float shadow = shadowAmount(lightPos, pos);\n            vec3 L = normalize(lightPos - pos);\n            float diffuse = max(0.0, dot(N, L));\n            return vec4(col * diffuse * shadow, 1.0);\n        }\n    }\n    return vec4(0.0);\n}\n\nfloat sdSphere(vec3 p) {\n  return length(p - SPHERE_CENTER) - RAD;\n}\n\nfloat rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    float d = sdSphere(p);\n    depth += d;\n    if (d < PRECISION || depth > end) break;\n  }\n\n  return depth;\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * PRECISION;\n    float r = 1.;\n    return normalize(\n      e.xyy * sdSphere(p + e.xyy) +\n      e.yyx * sdSphere(p + e.yyx) +\n      e.yxy * sdSphere(p + e.yxy) +\n      e.xxx * sdSphere(p + e.xxx));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    if (iMouse.xy==vec2(0, 0)) {\n        mouse = vec2(0.3, 0.5);\n    }\n    float yaw = (mouse.x * 2.0 - 1.0) * 3.14159;\n    float pitch = (mouse.y - 0.5) * 3.14159;\n\n    // Camera rotation\n    vec3 forward = vec3(cos(yaw) * cos(pitch), sin(pitch), sin(yaw) * cos(pitch));\n    vec3 right = normalize(cross(vec3(0.0, 1.0, 0.0), forward));\n    vec3 up = normalize(cross(forward, right));\n\n    // Ray origin\n    vec3 ro = vec3(0.0, 1.5, 3.0);\n\n    // Ray direction\n    vec3 rd = normalize(forward + (uv.x - 0.5) * right * (iResolution.x/iResolution.y) + (uv.y - 0.5) * up);\n\n    // Light position\n    vec3 lightPos = vec3(1.5, 1.8, 0.8);\n    \n    // Distance to sphere\n    float d = rayMarch(ro, rd, MIN_DIST, MAX_DIST);\n    \n    vec3 col = vec3(0);\n    if (d > MAX_DIST) {\n        col = vec3(0.0, 0.0, 0.0);\n    } else {\n        vec3 p = ro + rd * d;\n        vec3 normal = calcNormal(p);\n        vec3 lightDirection = normalize(lightPos - p);\n        float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n        col = dif * vec3(0.7, 0.4, 0.4);\n    }\n\n    if (col != vec3(0.0, 0.0, 0.0)) {\n        fragColor = vec4(col, 1.0);\n        return;\n    }\n    \n    // Floor\n    fragColor = rayPlaneIntersection(-ro.y / rd.y, ro, rd, lightPos, vec3(0.0, 1.0, 0.0), vec3(0.5, 0.3, 0.1));\n    if (fragColor.a > 0.0) return;\n\n    // Ceiling\n    fragColor = rayPlaneIntersection((3.0 - ro.y) / rd.y, ro, rd, lightPos, vec3(0.0, -1.0, 0.0), vec3(0.8, 0.8, 0.8));\n    if (fragColor.a > 0.0) return;\n\n    // Wall 1 (Green)\n    fragColor = rayPlaneIntersection((-2.0 - ro.x) / rd.x, ro, rd, lightPos, vec3(1.0, 0.0, 0.0), vec3(0.2, 0.5, 0.2));\n    if (fragColor.a > 0.0) return;\n    \n    // Wall 2 (Blue)\n    fragColor = rayPlaneIntersection((2.0 - ro.x) / rd.x, ro, rd, lightPos, vec3(-1.0, 0.0, 0.0), vec3(0.2, 0.2, 0.5));\n    if (fragColor.a > 0.0) return;\n\n    // Wall 3 (Red)\n    fragColor = rayPlaneIntersection((-2.0 - ro.z) / rd.z, ro, rd, lightPos, vec3(0.0, 0.0, 1.0), vec3(0.5, 0.2, 0.2));\n    if (fragColor.a > 0.0) return;\n    \n    // Wall 3 (Yellow)\n    fragColor = rayPlaneIntersection((6.0 - ro.z) / rd.z, ro, rd, lightPos, vec3(0.0, 0.0, -1.0), vec3(0.5, 0.5, 0.2));\n    if (fragColor.a > 0.0) return;\n    \n}","name":"Image","description":"","type":"image"}]}