{"ver":"0.1","info":{"id":"MsyfRK","date":"1529510257","viewed":115,"name":"MandelBrot-rotation","username":"x33ch0u","description":"mandelbrot shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pixel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 complex_mul(vec2 u, vec2 v)\n{\n    return vec2(u.x*v.x - u.y*v.y, u.x*v.y+v.x*u.y);\n}\n\nint escape(vec2 c, int limit)\n{\n    vec2 z = vec2(0.0);\n    for (int i = 0; i < limit; i++) {\n    \tz = complex_mul(z,z) + c;\n        if (length(z) > 2.0)\n            return i;\n    }\n    return 0;\n}\n\n\n\n\nvec4 plot(vec2 uv)\n{\n    int iteration = escape(uv, 300);\n    vec3 col = iteration == 0 ?\n        vec3(0.0) : vec3((255.0 - float(iteration)) / 255.0);\n    return vec4(col, 1.0);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/max(iResolution.x, iResolution.y);\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    mat2 rot = mat2(vec2(cos(iTime), sin(iTime)), \n             vec2(-sin(iTime), cos(iTime)));\n    mat2 scl = mat2(vec2(cos(iTime/20.0), 0.0), \n                    vec2(0.0, cos(iTime/20.0)));\n    vec2 coord = rot * vec2(uv.x, -uv.y) - sin(iTime);\n    coord = scl * coord;\n    \n    fragColor = vec4(plot(coord));\n    //we need to add rotation to it\n\n}","name":"Image","description":"","type":"image"}]}