{"ver":"0.1","info":{"id":"3slXRS","date":"1551546483","viewed":98,"name":"Shader3 - candle","username":"EmperorLem","description":"A simple candle light","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 black = vec3(0.0,0.0,0.0);\nvec3 maroon = vec3(0.7,0.0,0.0);\nvec3 blue = vec3(0.0,0.0,0.8);\nvec3 gold = vec3(0.9,0.9,0.0);\nvec3 white = vec3(1.0,1.0,1.0);\n\nfloat rand(vec2 uv)\n{\n    //return fract(sin(dot(uv, vec2(12.9898,78.233)))*10000.*iTime);\n\t//return fract(sin(dot(uv, iMouse.xy))*10000.);\n\t//return (fract(sin(dot(uv, vec2(12., 70.)))*100000.));\n    return (fract(sin(dot(uv, vec2(12., 70.)))*43758.5453123));\n}\n\n// Value noise\nfloat noise(in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand(i);\n    float b = rand(i + vec2(1.0, 0.0));\n    float c = rand(i + vec2(0.0, 1.0));\n    float d = rand(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1.0 - u.x) + \n            (d - b) * u.x * u.y;\n}\n\nvec3 circle(vec2 uv, vec2 pos)\n{       \n\tvec3 green = vec3(0.0 , 1.0, 0.2);\n    vec3 blue = vec3(0.2, 0.2, 1.0);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float d = length(uv - pos);    \n    \n    float offset = noise(uv*4.+vec2(.0, -iTime*4.))*.1;\n    \n    float r = 0.09;\n    float rate = clamp(sin(20.0 * r * iTime)*r , 0.25, 0.30);\n    float circle = smoothstep(rate, r, d+offset);\n    vec3 mixed = mix(black, gold, circle);\n    \n    return mixed;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float height = step(0.0,uv.y) - step(0.35,uv.y);\n    float width = step(0.4,uv.x) -step(0.6,uv.x);\n                                          \n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 image = mix(black, maroon, height * width);\n    \n    height = step(0.35,uv.y) - step(0.45,uv.y);\n    width = step(0.5,uv.x) -step(0.51,uv.x);\n        \n    image = mix(image, white, height * width);\n    \n    vec3 mCircle = circle(uv, vec2(0.89,0.52));\n    \n    image = mix(mCircle, image, image);\n    \n\n    // Output to screen\n    fragColor = vec4(image,1.0);\n}","name":"Image","description":"","type":"image"}]}