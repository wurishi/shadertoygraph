{"ver":"0.1","info":{"id":"NlKSDt","date":"1645571486","viewed":54,"name":"Frequency music ball","username":"Chosko","description":"attack release","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["attackrelease"],"hasliked":0,"parentid":"NtKSWt","parentname":"Attack Release freq bars"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv2 = uv - 0.5;\n    uv2 = vec2(atan(uv2.x, uv2.y) / (PI * 2.0) + 0.5, length(uv2) * 2.0);\n    fragColor = texture(iChannel0, uv2);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define LINE_WIDTH 0.001\n#define BAR_WIDTH 0.02\n#define SLOT_WIDTH 0.03\n\n#define C_BG    vec4(0.0, 0.0, 0.0, 1.0)\n#define C_A  vec4(0.60196, 0.81765, 0.94902, 2.5)\n#define C_B   vec4(0.50196, 0.60784, 0.74902, 0.5)\n#define C_C  vec4(0.62745, 0.74510, 0.85098, -1.0)\n#define C_D  vec4(0.04314, 0.14902, 0.08235, 0.3)\n#define C_E vec4(0.85098, 0.73333, 0.51765, 2.0)\n\n#define ATTACK 0.8\n#define RELEASE 4.0\n\nvec4 alphaBlend (in vec4 src, in vec4 dst) {\n    return vec4(src.a * src.rgb + (1.0 - src.a) * dst.rgb, src.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 absUV = fragCoord/iResolution.xy;\n    vec2 uv = absUV;\n\t\n    float wave = texture(iChannel0, vec2(uv.x, 1.0)).r;\n    float waveCurve = step(uv.y, wave);\n    float signal = texture(iChannel0, vec2(uv.x, 0.0)).r;\n    float signalCurve = step(uv.y, signal);\n    \n    float slot = floor(uv.x / SLOT_WIDTH) * SLOT_WIDTH + 0.5 * SLOT_WIDTH;\n    \n    float cursor = slot;\n    vec2  cursorUv = vec2(cursor, 0.0);\n    float cursorLine = step(uv.x-LINE_WIDTH/2.0, cursor) * step(cursor, uv.x+LINE_WIDTH/2.0);\n    \n    float barWidth = step(cursor-BAR_WIDTH * 0.5, uv.x) * step(uv.x, cursor+BAR_WIDTH * 0.5);\n    float curSample = texture(iChannel0, cursorUv).r;\n    float curSampleBar = step(uv.y, curSample) * barWidth;\n    \n    // value and target\n    vec2 vt = texture(iChannel1, vec2(slot,0.0)).xy;\n    vt.y = max(vt.y,curSample);\n    if(vt.y > vt.x)\n    {\n        vt.x = min(vt.x + iTimeDelta/ATTACK, vt.y);\n    }\n    else\n    {\n        vt.x = max(vt.x - iTimeDelta/RELEASE, curSample);\n        vt.y = curSample;\n    }\n    \n    float valueLine = step(uv.y - LINE_WIDTH, vt.x) * step(vt.x, uv.y + LINE_WIDTH * 0.5) * barWidth;\n    \n    \n    vec4 o = C_BG;\n    \n    o = alphaBlend(C_B * waveCurve, o);\n    o = alphaBlend(C_C * signalCurve, o);\n    o = alphaBlend(C_A * max(vt.y, 0.3) * curSampleBar, o);\n    o = alphaBlend(C_D * cursorLine, o);\n    o = alphaBlend(C_E * valueLine, o);\n    o.a = 1.0;\n    \n    fragColor = o;\n    \n    \n    if(cursorLine > 0.5 && absUV.y <= 0.001)\n       fragColor = vec4(vt,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}