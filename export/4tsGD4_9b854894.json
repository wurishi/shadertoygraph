{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec2 rotate(in vec2 p, in float t)\n{\n\treturn p * cos(-t) + vec2(p.y, -p.x) * sin(-t);\n}\n\nfloat shapeRad1(in vec3 p)\n{\n    float a = atan(p.z, p.x);\n    return 0.5 * ((sin(5.0 * a)) + 3.0);\n}\n\nfloat shapeRad2(in vec3 p)\n{\n    float a = atan(p.z, p.x);\n    return abs(sin(2.0 * a)) + 1.0;\n}\n\nfloat deQuad(in vec2 p, in float h)\n{\n     return max(abs(p.x), abs(p.y)) - h;\n}\n\nfloat deTri(in vec2 p, in float h)\n{\n     return abs(p.x) + abs(p.y) - h;\n}\n\nfloat deCircle(in vec2 p, in float r)\n{\n     return length(p) - r;\n}\n\nfloat deShape(in vec2 p)\n{\n    \n    return max(max(deTri(p, 1.0), -p.y*p.y+p.x-0.7), -p.x*p.x+ abs(p.y)-0.6);\n}\n\nfloat shape1(in vec3 p, vec2 q)  {return          deQuad(q, 1.0);}\nfloat shape2(in vec3 p, vec2 q)  {return     deTri(q, 1.0);}\nfloat shape3(in vec3 p, vec2 q)  {return        deCircle(q, 1.0);}\nfloat shape4(in vec3 p, vec2 q)  {return   deShape(q);}\nfloat shape5(in vec3 p, vec2 q)  {return    deQuad(q * vec2(shapeRad1(p), 1.0), 1.0);}\nfloat shape6(in vec3 p, vec2 q)  {return     deTri(q * vec2(shapeRad1(p), 1.0), 1.0);}\nfloat shape7(in vec3 p, vec2 q)  {return  deCircle(q * vec2(shapeRad1(p), 1.0), 1.0);}\nfloat shape8(in vec3 p, vec2 q)  {return   deShape(q * vec2(shapeRad1(p), 1.0));}\nfloat shape9(in vec3 p, vec2 q)  {return    deQuad(q * vec2(shapeRad2(p), 1.0), 1.0);}\nfloat shape10(in vec3 p, vec2 q) {return     deTri(q * vec2(shapeRad2(p), 1.0), 1.0);}\nfloat shape11(in vec3 p, vec2 q) {return  deCircle(q * vec2(shapeRad2(p), 1.0), 1.0);}\nfloat shape12(in vec3 p, vec2 q) {return   deShape(q * vec2(shapeRad2(p), 1.0));}\nfloat shape13(in vec3 p, vec2 q) {return  max(abs(p.y) - 1.0, deShape(p.xz));}\nfloat shape14(in vec3 p, vec2 q) {return  max(abs(p.y) - 1.0, deShape(p.xz * (abs(p.y) + 1.0)));}\n\nfloat map(in vec3 p)\n{    \n    p *= 0.35;\n\tvec2 q = vec2(length(p.xz), p.y);    \n    float t = mod(iTime * 0.8, 42.0);\n    if (t < 3.0)  return mix( shape1(p, q),  shape2(p, q), smoothstep( 1.0,  2.0, t));\n    if (t < 6.0)  return mix( shape2(p, q),  shape3(p, q), smoothstep( 4.0,  5.0, t));\n    if (t < 9.0)  return mix( shape3(p, q),  shape4(p, q), smoothstep( 7.0,  8.0, t));\n    if (t < 12.0) return mix( shape4(p, q),  shape5(p, q), smoothstep(10.0, 11.0, t));\n    if (t < 15.0) return mix( shape5(p, q),  shape6(p, q), smoothstep(13.0, 14.0, t));\n    if (t < 18.0) return mix( shape6(p, q),  shape7(p, q), smoothstep(16.0, 17.0, t));\n    if (t < 21.0) return mix( shape7(p, q),  shape8(p, q), smoothstep(19.0, 20.0, t));\n    if (t < 24.0) return mix( shape8(p, q),  shape9(p, q), smoothstep(22.0, 23.0, t));\n\tif (t < 27.0) return mix( shape9(p, q), shape10(p, q), smoothstep(25.0, 26.0, t));    \n\tif (t < 30.0) return mix(shape10(p, q), shape11(p, q), smoothstep(28.0, 29.0, t));    \n\tif (t < 33.0) return mix(shape11(p, q), shape12(p, q), smoothstep(31.0, 32.0, t));    \n\tif (t < 36.0) return mix(shape12(p, q), shape13(p, q), smoothstep(34.0, 35.0, t));\n\tif (t < 39.0) return mix(shape13(p, q), shape14(p, q), smoothstep(37.0, 38.0, t));\n\tif (t < 42.0) return mix(shape14(p, q),  shape1(p, q), smoothstep(40.0, 41.0, t));\n    return 1.0;\n}\n\nvec3 calcNormal(in vec3 p)\n{\n\tconst vec2 e = vec2(0.0001, 0.0);\n\treturn normalize(vec3(\n\t\tmap(p + e.xyy) - map(p - e.xyy),\n\t\tmap(p + e.yxy) - map(p - e.yxy),\n\t\tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\nfloat march(in vec3 ro, in vec3 rd)\n{\n\tconst float maxd = 50.0;\n\tconst float precis = 0.001;\n    float h = precis * 2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for(int i = 0; i < 256; i++)\n    {\n        if(h < precis || t > maxd) break;\n\t    h = map(ro + rd * t);\n        t += h;\n    }\n    if(t < maxd) res = t;\n    return res;\n}\n\nvec3 transform(in vec3 p)\n{\n    p.yz = rotate(p.yz, iTime * 0.5);\n    p.zx = rotate(p.zx, iTime * 0.7);\n    return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec3 col = vec3(0.1 + p.y * 0.15);\n   \tvec3 rd = normalize(vec3(p, -1.8));\n\tvec3 ro = vec3(0.0, 0.0, 10.0);\n    vec3 li = normalize(vec3(0.5, 0.8, 3.0));\n    ro = transform(ro);\n\trd = transform(rd);\n\tli = transform(li);\n    float t = march(ro, rd);\n    if(t > -0.001)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 n = calcNormal(pos);\n\t\tfloat dif = clamp((dot(n, li) + 0.5) * 0.7, 0.3, 1.0);\n        col = vec3(0.9, 0.95, 0.8) * dif;\n    }\n   \tfragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4tsGD4","date":"1422107684","viewed":513,"name":"3D shapes ","username":"gaz","description":"Solid of revolution. Pull 2D","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","de"],"hasliked":0,"parentid":"","parentname":""}}