{"ver":"0.1","info":{"id":"MXB3WK","date":"1708880770","viewed":65,"name":"Trivial chromatic aberration","username":"retchut","description":"Just a simple chromatic aberration shader. Added some time variance to the offsets to give it some pizazz ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["vfx","chromaticabberation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // component offsets (added some time variance with a sine and cosine to the R and B offset)\n    float offsetR = -0.01 * sin(iTime);\n    float offsetG = 0.0;\n    float offsetB = 0.01 *  cos(iTime);\n    \n    // get offsetted components from the texture\n    float aberratedR = texture(iChannel0, uv + offsetR).r;\n    float aberratedG = texture(iChannel0, uv + offsetG).g;\n    float aberratedB = texture(iChannel0, uv + offsetB).b;\n\n\n    // Output to screen\n    fragColor = vec4(aberratedR, aberratedG, aberratedB, 1.0);\n}","name":"Image","description":"","type":"image"}]}