{"ver":"0.1","info":{"id":"3sSXz1","date":"1553811611","viewed":798,"name":"Falling Snowflakes","username":"fizzer","description":"Snow crystal growth simulation based on the paper \"A local cellular model for snow crystal growth\".\nAuto-generated mipmaps are used here for texture anti-aliasing and also a defocus effect. There are two types of snowflake, one grows much slower.","likes":34,"published":1,"flags":32,"usePreview":0,"tags":["ice","snowflake","snow","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 sampleSnowflakes(vec2 p, float lod)\n{\n    return textureLod(iChannel0, vec3(1., -p.yx), min(lod, 7.)).rg;\n}\n\nmat3 rotX(float a)\n{\n    return mat3(1, 0, 0,  0, cos(a), sin(a), 0, -sin(a),cos(a));\n}\n\nmat3 rotY(float a)\n{\n    return mat3(cos(a), 0, sin(a), 0, 1, 0, -sin(a), 0,cos(a));\n}\n\nmat3 rotZ(float a)\n{\n    return mat3(cos(a), sin(a), 0, -sin(a),cos(a), 0, 0, 0, 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    fragColor.a = 1.;\n\tfragColor.rgb = vec3(0);\n    \n    vec3 ro = vec3(0, 0, 5.), rd = vec3(uv, -3.);\n    vec3 rdx = rd + dFdx(rd);\n    vec3 rdy = rd + dFdy(rd);\n    \n    vec3 c = vec3(0);\n    \n    float time = iTime + texelFetch(iChannel1, ivec2(fragCoord) & 1023, 0).r * 0.05;\n    \n    // Falling snowflakes\n    for(int i = 0; i < 50; ++i)\n    {\n        vec3 fp = cos(vec3(i)*vec3(10,2,43))*vec3(1,2,2);\n        fp.y = mod(fp.y - time/3. * (.7 + .3 * cos(float(i) * 11.)), 4.) - 2.;\n        \n        mat3 rot = rotX(float(i) + time / 3.) * rotZ(float(i) * 3. + time / 4.) * 4.;\n        vec3 lp = (rot * (ro - fp));\n        \n        // Ray intersection\n    \tfloat t = -lp.z / (rot * rd).z;\n        if(t > 0.)\n        {\n            vec3 rp = rot * (ro + rd * t - fp);\n            if(max(abs(rp.x), abs(rp.y)) < 1.)\n            {\n                vec3 rpx = rot * (ro + rdx * -lp.z / (rot * rdx).z - fp);\n                vec3 rpy = rot * (ro + rdy * -lp.z / (rot * rdy).z - fp);\n                \n                // LOD bias for some fake defocus\n                float lodbias = smoothstep(0., 2., abs((ro.z + rd.z * t) - -.1)) * 4.;\n                \n                vec2 s = sampleSnowflakes(rp.xy, lodbias + log2(256. * max(distance(rp, rpx), distance(rp, rpy))));\n                \n                c += vec3(s[i & 1]) * exp2(-t);\n            }\n        }\n    }\n    \n    // Small floating bits\n    for(int i = 0; i < 50; ++i)\n    {\n        vec3 fp = cos(vec3(i) * vec3(15, 1, 73)) * vec3(2, 2, 3);\n        fp.z -= 3.;\n        fp.x += cos(time + float(i)) * .2;\n        fp.y = mod(fp.y - time/2. * (.7 + .3 * cos(float(i) * 11.)), 4.) - 2.;\n\n        float d = dot(normalize(fp - ro), normalize(rd));\n        \n        c += pow(smoothstep(.9999 + cos(float(i)) * 0.0001, 1., d), 256.) * .1;\n    }\n    \n    // Backdrop\n    c += texture(iChannel2, rd * rotY(time / 6.)).rgb;\n    \n    // \"Colourgrading\"\n    c = pow(c, vec3(1.5, 1.2, 1));    \n    fragColor.rgb = c + .2;\n    \n    fragColor.rgb *= 1. - (pow(abs(uv.x * .7), 4.) + pow(abs(uv.y * 1.3), 4.)) * .9;\n    \n    // \"Tonemapping\"\n    fragColor.rgb = smoothstep(0., 1., fragColor.rgb);\n    \n    // Gamma + Dither\n    fragColor.rgb = pow(fragColor.rgb, vec3(1. / 2.2)) + texelFetch(iChannel1, ivec2(fragCoord) & 1023, 0).g * 0.02;\n\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Snow crystal growth simulation based on the paper \"A local cellular model for snow crystal growth\" by Clifford A. Reiter\n// https://pdfs.semanticscholar.org/26f9/a97b0da14d8d555a17b610ba3b7726457535.pdf\n\n// Two separated simulations are packed together, to create two different crystals simultaneously.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 s = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    \n    vec2 value = s.rb;\n    vec2 receptive = s.ga;\n\n    if(x < 256 && y < 256)\n    {\n        if(iFrame == 0)\n        {\n            value = beta;\n            if(x == 128 && y == 128)\n                value += vec2(1);\n            receptive = vec2(0);\n        }\n\n        receptive = step(vec2(0.9999), value);\n\n        vec4 a[6];\n        getNeighbours(x, y, iChannel0, a[0], a[1], a[2], a[3], a[4], a[5]);\n        for(int i = 0; i < 6; ++i)\n        {\n            receptive = receptive + (vec2(1) - receptive) * step(vec2(0.9999), a[i].rb);\n        }\n    }\n    \n    if(iFrame >= 400)\n    {\n        value.r = s.r;\n        receptive.r = s.g;\n    }\n    \n    if(iFrame >= 2000)\n    {\n        value.g = s.b;\n        receptive.g = s.a;\n    }\n    \n    fragColor.rb = value;\n    fragColor.ga = receptive;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 beta = vec2(0.7, 0.45);\nvec2 gamma = vec2(0.001, 0.0001);\n\n// Obtains the neighbours of a cell in a hexgrid\nvoid getNeighbours(int x, int y, sampler2D tex,\n         out vec4 a,\n         out vec4 b,\n         out vec4 c,\n         out vec4 d,\n         out vec4 e,\n         out vec4 f\n         )\n{\n    a = texelFetch(tex, ivec2(x - 1, y + 0), 0);\n    b = texelFetch(tex, ivec2(x + 1, y + 0), 0);\n    \n    c = texelFetch(tex, ivec2(x - 1 + (y & 1), y - 1), 0);\n    d = texelFetch(tex, ivec2(x + 0 + (y & 1), y - 1), 0);\n    e = texelFetch(tex, ivec2(x - 1 + (y & 1), y + 1), 0);\n    f = texelFetch(tex, ivec2(x + 0 + (y & 1), y + 1), 0);\n}\n\n// Cheap resampling of a hexgrid\nvec4 hexsample(vec2 p, sampler2D tex)\n{\n    float an = acos(-1.) / 3.;\n    float hr = sin(an) * 2.;\n\n    p.x -= min(fract(p.y / 2.) * 2., 2. - fract(p.y / 2.) * 2.) * .5;\n\n    vec2 c = floor(p);\n    vec2 cf = p - c;\n\n    vec4 va = texelFetch(tex, ivec2(c + vec2(0, 0)), 0);\n    vec4 vb = texelFetch(tex, ivec2(c + vec2(1, 0)), 0);\n    vec4 vc = texelFetch(tex, ivec2(c + vec2(0, 1)), 0);\n    vec4 vd = texelFetch(tex, ivec2(c + vec2(1, 1)), 0);\n\n    vec4 r = mix(mix(va, vb, cf.x), mix(vc, vd, cf.x), cf.y);\n\n    return r;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Snow crystal growth simulation based on the paper \"A local cellular model for snow crystal growth\" by Clifford A. Reiter\n// https://pdfs.semanticscholar.org/26f9/a97b0da14d8d555a17b610ba3b7726457535.pdf\n\n// Two separated simulations are packed together, to create two different crystals simultaneously.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 s = texelFetch(iChannel0, ivec2(fragCoord.xy), 0);\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n\n    vec2 value = s.rb;\n    vec2 receptive = s.ga;\n\n    if(x < 256 && y < 256 && iFrame < 2000)\n    {\n        vec4 a[6];\n        getNeighbours(x, y, iChannel0, a[0], a[1], a[2], a[3], a[4], a[5]);\n\n        vec2 average = step(receptive, vec2(0.5)) * (value * 6.);\n\n        for(int i = 0; i < 6; ++i)\n            average += a[i].rb * step(a[i].ga, vec2(.5));\n\n        average /= 12.;\n\n        value = average + (value + gamma) * step(vec2(.5), receptive);\n\n    }\n    \n    if(iFrame >= 400)\n    {\n        value.r = s.r;\n        receptive.r = s.g;\n    }\n    \n    if(iFrame >= 2000)\n    {\n        value.g = s.b;\n        receptive.g = s.a;\n    }\n    \n    fragColor.rb = value;\n    fragColor.ga = receptive;\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"vec2 sampleSnowflakes(vec2 p)\n{\n    vec4 s = hexsample(p * 256., iChannel0);\n    return s.rb * s.ga;\n}\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    // Project ray direction on to the unit cube.\n    vec3 absRayDir = abs(rayDir);\n    rayDir /= max(absRayDir.x, max(absRayDir.y, absRayDir.z));\n\n    \n    // Get the index of the current face being rendered.\n    \n    int faceIndex = 0;\n\n    if(absRayDir.y > absRayDir.x && absRayDir.y > absRayDir.z)\n    {\n        faceIndex = 2;\n    }\n    else if(absRayDir.z > absRayDir.x && absRayDir.z > absRayDir.y)\n    {\n        faceIndex = 4;\n    }\n\n    if(rayDir[faceIndex / 2] > 0.)\n        faceIndex |= 1;\n\n    fragColor = vec4(0);\n\n    if(faceIndex != 1)\n        return;\n\n    vec2 uv = fragCoord.xy / 1024.;\n    \n    // Resample\n    fragColor.rg = sampleSnowflakes(uv);\n}\n","name":"Cube A","description":"","type":"cubemap"}]}