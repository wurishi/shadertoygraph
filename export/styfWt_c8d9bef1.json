{"ver":"0.1","info":{"id":"styfWt","date":"1665510069","viewed":65,"name":"Real goast detector (not clickba","username":"Retard_Gaming","description":"Hunt Down the Freeman","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["radar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n\nvec2 blip(float angle, float offset) {\n    float l = mod(pow(10.0,4.0)*sin(pow(10.0, 4.0)*(angle + offset)),1.0);\n    l*=100.0;\n    l+=25.0;\n    \n    float x = l*cos(angle + offset);\n    float y = l*sin(angle + offset);\n   \n    x+= sin(angle + offset) * 17.0;\n    y-= cos(angle + offset) * 17.0;\n    \n    return vec2(x,y);\n}\n\n\nfloat addBlip(float time, vec2 fragCoord, float offset) {\n    vec2 pos = blip(-1.0*floor((time + offset)/3.0)*3.0, offset) + iResolution.xy/2.0;\n    \n    float size = distance(iResolution.xy,vec2(0))/40.0;\n    \n    vec2 uv = (fragCoord-pos)/iResolution.xy;\n    \n    uv *= size;\n    \n    uv.x /= iResolution.y;\n    uv.x *= iResolution.x;\n    \n    uv += vec2(0.5,0.5);\n    \n    \n    float s = iResolution.y / size;\n    \n    \n    \n    float value = 1.0 - floor(clamp((abs(fragCoord.x-fragCoord.y-pos.x+pos.y)+abs(fragCoord.x+fragCoord.y-pos.x-pos.y))/s,0.0,1.0));\n    value *= texture(iChannel0, uv).g;\n    \n    //float value = clamp(1.0 - distance(pos, fragCoord.xy) / 15.0f, 0.0, 1.0);\n    return value;\n}\n\nfloat line(float angle, float len, vec2 fragCoord) {\n    vec2 cen = iResolution.xy / 2.0;\n    vec2 end = vec2(cos(angle) * len, sin(angle) * len) + cen;\n    \n    vec2 d = fragCoord - cen;\n    vec2 l = end - cen;\n    \n    float h = clamp(dot(d, l)/dot(l, l), 0.0, 1.0);\n    \n    return clamp(ceil(1.0 - length(d - l * h)), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord+vec2(iResolution.y/2.0 - iResolution.x/2.0,0.0))/iResolution.y;\n\n    float value = -1.0*atan(2.0*uv.y-1.0, 2.0*uv.x-1.0);\n    value = mod(value - iTime, 2.0*PI);\n    float value2 = smoothstep(PI,5.0*PI, value) * 4.0;\n    value /= 4.0*PI;\n    \n    vec4 col;\n    col.g = value;\n\n    // add blips\n    col.g += addBlip(iTime, fragCoord, 0.0) * value2;\n    col.g += addBlip(iTime, fragCoord, 1.7) * value2;\n    col.g += addBlip(iTime, fragCoord, 3.4) * value2;\n    \n    //line\n    col.g += line(-iTime, iResolution.y, fragCoord);\n    for(int i = 0; i < 12; i++) {\n        float t = float(i) / 6.0;\n        col.g += line(t*PI, iResolution.y, fragCoord) / 5.0;\n    }\n    \n    //color outside area black\n    float dist = pow(fragCoord.x - iResolution.x/2.0, 2.0) + pow(fragCoord.y - iResolution.y/2.0, 2.0);\n    dist /= pow(iResolution.y / 2.0, 2.0);\n    col.g *= 1.0 - clamp(floor(dist), 0.0, 1.0);\n    \n    // circles\n    col.g += clamp(1.0 - abs(distance(fragCoord, iResolution.xy/2.0) - iResolution.y / 2.0) + 1.0, 0.0, 1.0);\n    col.g += clamp(1.0 - abs(distance(fragCoord, iResolution.xy/2.0) - 3.0*iResolution.y / 8.0) + 0.7, 0.0, 1.0) / 5.0;\n    col.g += clamp(1.0 - abs(distance(fragCoord, iResolution.xy/2.0) - iResolution.y / 4.0) + 0.7, 0.0, 1.0) / 5.0;\n    col.g += clamp(1.0 - abs(distance(fragCoord, iResolution.xy/2.0) - iResolution.y / 8.0) + 0.7, 0.0, 1.0) / 5.0;\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}