{"ver":"0.1","info":{"id":"lXsfD7","date":"1728496604","viewed":32,"name":"Limeeee","username":"empathy","description":"smth","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float complexShape(vec2 uv, float numSides, float layers, float radius) {\n    float angle = atan(uv.y, uv.x);\n    float dist = length(uv);\n    float shape = 0.0;\n    for (float i = 1.0; i <= layers; i++) {\n        shape += cos(angle * numSides * i) * 0.5 / i;\n    }\n    float finalShape = smoothstep(radius, radius - 0.1, dist + shape * 0.3);\n    return finalShape;\n}\nfloat noise(vec2 uv) {\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\nfloat fractalNoise(vec2 uv) {\n    float value = 0.0;\n    float scale = 1.0;\n    for (int i = 0; i < 6; i++) {\n        value += noise(uv * scale) / scale;\n        scale *= 2.0;\n    }\n    return value;\n}\nfloat chaoticPattern(vec2 uv) {\n    float pattern = fractalNoise(uv * 3.0);\n    pattern += fractalNoise(uv * 10.0) * 0.5;\n    pattern += fractalNoise(uv * 30.0) * 0.25;\n\n    return pattern;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 centerPos = vec2(0.0, 0.0);\n    float time = iTime * 0.5;\n    mat2 rotation = mat2(cos(time), -sin(time), sin(time), cos(time));\n    uv = uv * rotation;\n    float numSides = 6.0;\n    float layers = 8.0; \n    float radius = 0.6;\n    float shape = complexShape(uv, numSides, layers, radius);\n    float pulsate = 0.3 + 0.2 * sin(iTime * 5.0);\n    shape *= smoothstep(0.7 + pulsate, 0.4 + pulsate, length(uv));\n    vec3 shapeColor = vec3(0.0, 1.0, 0.5); \n    vec3 backgroundColor1 = vec3(0.2, 0.0, 0.4);\n    vec3 backgroundColor2 = vec3(0.1, 0.1, 0.3); \n    float chaoticNoise = chaoticPattern(uv + vec2(iTime * 0.2, iTime * 0.1)) * 0.5 + 0.5;\n    chaoticNoise = pow(chaoticNoise, 3.0);\n    vec3 background = mix(backgroundColor1, backgroundColor2, chaoticNoise); \n    vec3 color = mix(background, shapeColor, shape);\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}