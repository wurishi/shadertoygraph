{"ver":"0.1","info":{"id":"dtfSRn","date":"1674167110","viewed":118,"name":"Bipolar Play","username":"Crystalize","description":"Took some code from mla and applied it to some stuff I was working on. :)\nEdited to be less eyebleed If anyone can think of a fix for the cuts on the sides, I'd appreciate it. :D","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["domain","coloring","jacobi","cn","theta"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//if you start with a megenta screen, try moving the y position of the mouse ;)\n\n#define TWOPI 6.283185307179586476\n#define PI 3.141592653589793238\n\n\n#define inf 25\n#define speed 2.\n\n\nvec2 cmul(vec2 z, vec2 c) {\n    return vec2(z.x * c.x - z.y * c.y, z.x * c.y + z.y * c.x);\n}\n\nvec2 cdiv(vec2 z, vec2 c) {\n    float r = dot(c, c);\n    return vec2(z.x * c.x + z.y * c.y, z.y * c.x - z.x * c.y) / r;\n}\n\n//not using cpow here, but it's a nifty function so we'll leave it alone :P\nvec2 cpow(vec2 z, vec2 p) {\n    float a = atan(z.y, z.x);\n    float lnr = 0.5 * log(dot(z,z));\n    float m = exp(p.x * lnr - p.y * a);\n    float angle = p.x * a + p.y * lnr + TWOPI;\n    return vec2(cos(angle), sin(angle)) * m;\n}\n\nvec2 cexp(vec2 z) {\n    return vec2(cos(z.y), sin(z.y)) * exp(z.x);\n}\n\nvec2 clog(vec2 z) {\n    return vec2(0.5 * log(dot(z,z)), atan(z.y,z.x));\n}\n\n\nvec2 ctanh(vec2 z) {\n    return vec2(sinh(z.x), sin(z.y)) / (cos(z.y) + cosh(z.x));\n}\n\nvec2 catanh(vec2 z) {\n    return clog(cdiv(z+vec2(1.0,0.0), -z+vec2(1.0,0.0)));\n}\n\nvec2 jacTheta(vec2 z, float time, float t) {\n    vec2 T = vec2(time, abs(t));\n    vec2 sum = vec2(0.0);\n    for(int i = -inf; i < inf; i++) {\n        vec2 f = cexp(cmul(cmul(vec2(0.0, PI), vec2(i*i,0.0)), T) + cmul(cmul(vec2(0.0, TWOPI), vec2(i,0.0)), z));\n        sum += f;\n    }\n    return sum;\n}\n\n//take some stuff from talented people like mla and call it \"research\" instead of plagiarism\nvoid sncndn(float u, float k2,\n            out float sn, out float cn, out float dn) {\n  float emc = 1.0-k2;\n  float a,b,c;\n  const int N = 4;\n  float em[N],en[N];\n  a = 1.0;\n  dn = 1.0;\n  for (int i = 0; i < N; i++) {\n    em[i] = a;\n    emc = sqrt(emc);\n    en[i] = emc;\n    c = 0.5*(a+emc);\n    emc = a*emc;\n    a = c;\n  }\n  // Nothing up to here depends on u, so\n  // could be precalculated.\n  u = c*u; sn = sin(u); cn = cos(u);\n  if (sn != 0.0) {\n    a = cn/sn; c = a*c;\n    for(int i = N-1; i >= 0; i--) {\n      b = em[i];\n      a = c*a;\n      c = dn*c;\n      dn = (en[i]+a)/(b+a);\n      a = c/b;\n    }\n    a = 1.0/sqrt(c*c + 1.0);\n    if (sn < 0.0) sn = -a;\n    else sn = a;\n    cn = c*sn;\n  }\n}\n\nvec2 cn(vec2 z, float k2) {\n  float snu,cnu,dnu,snv,cnv,dnv;\n  sncndn(z.x,k2,snu,cnu,dnu);\n  sncndn(z.y,1.0-k2,snv,cnv,dnv);\n  float a = 1.0/(1.0-dnu*dnu*snv*snv);\n  return a*vec2(cnu*cnv,-snu*dnu*snv*dnv);\n}\n\nfloat l(float r) {\n    //let's get funky and use hyperbolic atan\n    return 1.0 / PI * atanh(1.0/r);\n}\n\n\nfloat hue2rgb(float p, float q, float t) {\n    do{\n      if(t < 0.0) t += 1.0;\n      if(t > 1.0) t -= 1.0;\n    } while (t < 0.0 || t > 1.0);\n\n  if(t < 1.0 / 6.0) return p + (q - p) * 6.0 * t;\n  if(t < 1.0 / 2.0) return q;\n  if(t < 2.0 / 3.0) return p + (q - p) * (2.0 / 3.0 - t) * 6.0;\n  return p;\n}\n\nvec3 hslToRgb(float h, float s, float l) {\n  float r, g, b;\n\n  if(s == 0.0) {\n    r = g = b = l; // achromatic\n  } else {\n    float q = l < 0.5 ? l * (1.0 + s) : l + s - l * s;\n    float p = 2.0 * l - q;\n\n    r = hue2rgb(p, q, h + 1.0 / 3.0);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1.0 / 3.0);\n  }\n\n  return vec3(r,g,b);\n}\n\nvec3 domainColoring(vec2 z) {\n    float H = mod((atan(z.y/z.x)/PI),0.25)+0.5 - TWOPI / 3.0;\n    float S = 1.0;\n    float L = l(length(z));\n    return hslToRgb(H,S,L);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * (fragCoord.xy - 0.5*iResolution.xy) / -iResolution.y;\n    \n    uv = cdiv(uv+vec2(1.0,0.0), -uv+vec2(1.0,0.0));\n    \n    uv = clog(uv);\n    \n    uv /= PI*0.064;\n    \n    uv = cmul(uv, vec2(1.0/sqrt(2.)));\n    \n    uv = cn(uv, sin(iTime)*0.25+0.5);\n    \n    uv = cdiv(uv+vec2(1.0,0.0), -uv+vec2(1.0,0.0));\n    \n    uv.x = abs(uv.x);\n    \n    uv = cdiv(uv+vec2(-1.0,0.0), uv+vec2(1.0,0.0));\n    \n    uv = catanh(uv);\n    \n    \n    uv = jacTheta(uv, iTime*speed, iMouse.y/iResolution.y*5.0-2.5);\n    \n    vec3 col = domainColoring(uv);\n    \n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}