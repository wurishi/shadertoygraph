{"ver":"0.1","info":{"id":"mlXGWn","date":"1671573358","viewed":122,"name":"pythagorean quadruples","username":"jt","description":"Visualizing [url=https://en.wikipedia.org/wiki/Pythagorean_quadruple]Pythagorean Quadruples[/url], i.e. integer solutions for a*a+b*b+c*c=d*d where d is distance to center.\nColor-coded by value of d, e.g. yellow: 1*1+2*2+2*2=3*3, magenta 0*0+3*3+4*4=5*5","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["voxels","dda","pythagorean","quadruples"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlXGWn pythagorean quadruples by jt\n// using https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n\n// Visualizing https://en.wikipedia.org/wiki/Pythagorean_quadruple \n// i.e. integer solutions for a*a + b*b + c*c = d*d where d is distance to center.\n// Color-coded by value of d, e.g. some non-trivial quadruples:\n//     1*1 + 2*2 + 2*2 = 3*3 (yellow)\n//     0*0 + 3*3 + 4*4 = 5*5 (magenta)\n//     2*2 + 4*4 + 4*4 = 6*6 (cyan)\n//     2*2 + 3*3 + 6*6 = 7*7 (white)\n//     1*1 + 4*4 + 8*8 = 9*9 (red)\n//     4*4 + 4*4 + 7*7 = 9*9 (red)\n//     0*0 + 6*6 + 8*8 = 10*10 (green)\n// The axes represent the trivial solutions 0*0+0*0+c*c=d*d\n// Slicing the structure along xy (or yz or zx) plane gives Pythagorean Triples.\n\n// Pythagorean Triples can be visualized as intersections of an integer grid with a circle of integer radius.\n// Pythagorean Quadruples can be visualized as intersecions of an integer grid with a sphere of integer radius.\n\n// The visualization works by traversing voxel by voxel, checking if d is an integer.\n// (NOTE: I'm ignoring that the greatest common divisor should be one!)\n// This is equivalent to the brute-force three-nested-loops approach,\n// but because the light-rays traverse the voxels anyway this is done implicitly.\n\n// tags: voxels, dda, pythagorean, quadruples\n\n// The MIT License\n// Copyright (c) 2022 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat mirror(float t)\n{\n    return 1.0 - 2.0 * abs(t / 2.0 - floor(t / 2.0) - 0.5);\n}\n\nuint pythagorean_quadruple(ivec3 c) // returns sqrt(x*x+y*y+z*z) if integer otherwise zero\n{\n    float l = length(vec3(c));\n    //if(l > fract(iTime/10.0) * 10.0 + 1.0)\n    if(l > mirror(iTime/10.0) * 10.0 + 1.0) // cut out a sphere for nicer visualization\n        return 0u;\n    // This might be fragile\n    return fract(l) == 0.0 ? uint(l) : 0u; // check if x*x+y*y+z*z is an integer\n    // Try this one if the above doesn't work\n    //return abs(fract(l+0.5)-0.5) < 0.0001 ? uint(l) : 0u; // check if x*x+y*y+z*z is an integer\n}\n\n#define COLORS vec3[](vec3(0.5),vec3(1,0,0),vec3(0,1,0),vec3(1,1,0),vec3(0,0,1),vec3(1,0,1),vec3(0,1,1),vec3(1,1,1))\n\nvec3 code(uint c)\n{\n    //return COLORS[c % 8u]; // % sometimes breaks on windows\n    return COLORS[c & 7u];\n}\n\n#define MAX_RAY_STEPS 64\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = max(iMouse.x, iMouse.y) < 5.0;\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // thanks Fabrice for reminding me (repeatedly) to use this nice one-liner :D\n    vec3 rd = normalize(vec3(I.x, 2.0, I.y)); // must be normalized!\n    vec3 ro = vec3(0.0,-25.0, 0.0);\n\n    float mx = -2.0 * pi * float(iMouse.x) / R.x;\n    float my = -pi / 2.0 + pi * float(iMouse.y) / R.y;\n    mx = !demo ? mx : +pi / 4.0 + 2.0 * pi * fract(iTime * 0.01);\n    my = !demo ? my : -pi / 6.0;\n\n    mat3 M = yaw_pitch_roll(mx, my, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    vec3 color = vec3(0.0);\n\n    {\n        // Based on https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 (somewhat reduced)\n        // \"The raycasting code is somewhat based around a 2D raycasting toutorial found here: \n        //  http://lodev.org/cgtutor/raycasting.html\" (fb39ca4)\n        bvec3 mask;\n        ivec3 cell = ivec3(floor(ro));\n        vec3 dd = 1.0 / abs(rd);\n        ivec3 rs = ivec3(sign(rd));\n        vec3 sd = (sign(rd) * (vec3(cell) - ro) + (sign(rd) * 0.5) + 0.5) * dd; \n        for (int i = 0; i < MAX_RAY_STEPS; i++)\n        {\n            uint q = pythagorean_quadruple(cell);\n            if(q > 0u)\n            {\n                color = code(q);\n                break; // forked shader used continue here\n            }\n\n            mask = lessThanEqual(sd.xyz, min(sd.yzx, sd.zxy)); // Thanks kzy for the suggestion!\n            sd += vec3(mask) * dd;\n            cell += ivec3(vec3(mask)) * rs;\n        }\n\n        color *= mask.x ? vec3(0.25) : mask.y ? vec3(0.5) : mask.z ? vec3(1.0) : vec3(0.0);\n    }\n\n\tfragColor = vec4(sqrt(color), 1.0); // gamma corrected\n}\n","name":"Image","description":"","type":"image"}]}