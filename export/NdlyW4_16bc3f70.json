{"ver":"0.1","info":{"id":"NdlyW4","date":"1642097111","viewed":209,"name":"Super Collider #2 [Noise]","username":"Yusef28","description":"I first learned of the super collider tutorials from athibaul in the comments of his featured sahder \"Techno Song (sound)\"\nhttps://www.shadertoy.com/view/sls3WM\nThe link to those tutorials is in those comments, and in the sound tab of this shader.","likes":4,"published":3,"flags":8,"usePreview":0,"tags":["noise","sound","super","collider","supercollider"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define LETTER_SIZE 1./16.\n#define STEP_SIZE 1./8.\n#define FIRST_LETTER 64.\n#define FIRST_NUMBER 48.\n\nvec2 numToCoord(float a){\n    return vec2( mod(a,16.), 15.-floor(a/16.) );\n}\n\nvec3 C(vec2 uv, vec2 start, inout float moveX,float num){\n    moveX += STEP_SIZE/2.3;\n    if(uv.x < start.x           || \n       uv.x > start.x+STEP_SIZE || \n       uv.y < start.y           || \n       uv.y > start.y+STEP_SIZE){\n       return vec3(0.);\n    }\n    \n    uv -= start; uv /= STEP_SIZE; uv *= LETTER_SIZE;\n    uv += vec2(LETTER_SIZE*numToCoord(num));\n    return textureGrad(iChannel0,uv,dFdx(uv),dFdy(uv)).rrr;\n}\n\nvoid addC(vec2 st, float char, inout float moveX, inout vec3 col){\n    col = mix(col,vec3(1.),\n             C(st,vec2(moveX,STEP_SIZE/2.),moveX,FIRST_LETTER+char));\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 st = uv;\n    float moveX = STEP_SIZE/4.;\n    col = mix(col,vec3(1.),C(st,vec2(moveX,STEP_SIZE/2.),moveX,FIRST_LETTER+_s));\n    col = mix(col,vec3(1.),C(st,vec2(moveX,STEP_SIZE/2.),moveX,FIRST_LETTER+_o));\n    addC(st,_u,moveX,col);  \n    addC(st,_n,moveX,col);\n    addC(st,_d,moveX,col);\n    addC(st,_z+5.,moveX,col);\n    addC(st,_i,moveX,col);\n    addC(st,_n,moveX,col);\n   // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n\n// Super Collider Tutorials\n// https://www.youtube.com/playlist?list=PLPYzvS8A_rTaNDweXe6PX4CXSGq4iEWYC\n#define PI acos(-1.)\n\nfloat rnd(float a){\n    return fract(sin(a*927.722)*41925.245);\n}\n\n//I don't know what exprange actually is but for completeness\n//I am using this. Maybe it's exp(something) instead. I don't know.\nfloat expRange(float val){return pow(val,1./1.5);}\n\nfloat LFNoise(float t, float freq, float low, float high){\n    float beat = floor(t*freq);//beats per second\n    float seed = expRange(rnd(beat));//get the random seed from 0 to 1\n    float range = abs(high-low);//get the range from low to high\n    //scale the seed by range, floor it,\n    //shift by low, and return \n    return floor(seed*range) + low;\n}\n\nfloat SinOsc(float t, float freq, float phase, float mul, float amp){\n    return sin(2.*PI*freq*t + phase)*mul + amp;\n}\n\n\nvec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    float seed = floor(rnd(floor(time))*12.);\n    float varFreq = LFNoise(time, seed, 200., 1000.);\n    //only this varMul doesn't seem to be working right now\n    float varMul = LFNoise(time, 12., 0.20, 1.);\n    return vec2( SinOsc(time,varFreq,0.,varMul, 0.));\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define _a 1.\n#define _b 2.\n#define _c 3.\n#define _d 4.\n#define _e 5.\n#define _f 6.\n#define _g 7.\n#define _h 8.\n#define _i 9.\n#define _j 10.\n#define _k 11.\n#define _l 12.\n\n#define _m 13.\n#define _n 14.\n#define _o 15.\n#define _p 16.\n#define _q 17.\n#define _r 18.\n#define _s 19.\n#define _t 20.\n#define _u 21.\n#define _v 22.\n#define _w 23.\n#define _x 24.\n#define _y 25.\n#define _z 26.","name":"Common","description":"","type":"common"}]}