{"ver":"0.1","info":{"id":"lXBfz1","date":"1729205088","viewed":98,"name":"simple terrain generator","username":"brandonczt","description":"simple terrain generator","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["terrain","gradientnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Gradient noise form iq \"Noise - gradient - 2D\" (https://www.shadertoy.com/view/XdXGW8)\n\nvec2 grad(ivec2 z)  // replace this anything that returns a random vector\n{\n    // 2D to 1D  (feel free to replace by some other)\n    int n = z.x + z.y * 11111;\n\n    // Hugo Elias hash (feel free to replace by another one)\n    n = (n << 13) ^ n;\n    n = (n * (n * n * 15731 + 789221) + 1376312589) >> 16;\n\n    // Perlin style vectors\n    n &= 7;\n    vec2 gr = vec2(n & 1, n >> 1) * 2.0 - 1.0;\n    return (n >= 6) ? vec2(0.0, gr.x) :\n           (n >= 4) ? vec2(gr.x, 0.0) :\n                      gr;\n}\n\nfloat noise(in vec2 p)\n{\n    ivec2 i = ivec2(floor(p));\n    vec2 f = fract(p);\n\n    vec2 u = f * f * (3.0 - 2.0 * f); // feel free to replace by a quintic smoothstep instead\n\n    return mix(mix(dot(grad(i + ivec2(0, 0)), f - vec2(0.0, 0.0)),\n                   dot(grad(i + ivec2(1, 0)), f - vec2(1.0, 0.0)), u.x),\n               mix(dot(grad(i + ivec2(0, 1)), f - vec2(0.0, 1.0)),\n                   dot(grad(i + ivec2(1, 1)), f - vec2(1.0, 1.0)), u.x), u.y);\n}\n\nvec3 terrainColor(float height)\n{\n    if (height < 0.4) {\n        return vec3(0.196, 0.584, 0.827); // 水\n    } else if (height < 0.45) {\n        return vec3(0.941, 0.847, 0.592); // 沙地\n    } else if (height < 0.65) {\n        return vec3(0.412, 0.788, 0.243); // 草地\n    } else if (height < 0.85) {\n        return vec3(0.651, 0.459, 0.349); // 山地\n    } else {\n        return vec3(1.0, 1.0, 1.0); // 雪\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float mosaicSize = 10.0;\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec2 mosaicIndex = floor(uv * iResolution.xy / mosaicSize);\n\n    vec2 mosaicCenter = (mosaicIndex + 0.5) * mosaicSize / iResolution.xy;\n\n    vec2 centerUV = mosaicCenter * vec2(iResolution.x / iResolution.y, 1.0) + iTime * 0.05;\n    float f = noise(6.0 * centerUV);\n\n    f = 0.5 + 0.5 * f;\n\n    vec3 color = terrainColor(f);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}