{"ver":"0.1","info":{"id":"XsfyWl","date":"1490215327","viewed":254,"name":"Blob sphere","username":"jgreen23","description":"Code derived from user at https://www.shadertoy.com/view/4sj3zy#\n\nwater effect from: https://gamedevelopment.tutsplus.com/tutorials/using-displacement-shaders-to-create-an-underwater-effect--cms-27191","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["blobspheretutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereScale = 0.7;\nfloat sphereShine = 0.5;\nvec3 sphereSpec = vec3(1.0, 1., 0.);\nvec3 sphereDiff = vec3(0.2, 0.2, 0.2);\n\nvec2 specPoint = vec2(0.2, -0.1);\n\n//Main method/function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\n    vec2 mouse = iMouse.xy / iResolution.xy;\n   \t//for the floor texture\n    vec2 xy = fragCoord.xy / iResolution.xy;\n    vec4 texColor = texture(iChannel0,xy);\n\tvec2 uv = fragCoord.xy / iResolution.xy; //for the scene\n\tfloat X = xy.x*25.+iTime; //ripple effect\n\tfloat Y = xy.y*25.+iTime;\n\tuv.y += cos(X+Y)*0.01*cos(Y);\n\tuv.x += sin(X-Y)*0.01*sin(Y);\n\t//Sets the position of the camera\n\tvec2 p = uv * 2.3 - 1.0;\n    \n    \n\tp.x *= iResolution.x / iResolution.y;\n\t\n    //rotate in circle\n\tp.x += cos(-iTime) * 0.35;\n\t//p.y += sin(-iTime) * 0.35;\n\t\n\t//rotate shiny point\n\tspecPoint.x += cos(-iTime) * 0.35;\n\t//specPoint.y += sin(-iTime) * 0.35;\n    xy.x += cos(-iTime);\n\txy.y += sin(-iTime);\n    \n\n\n\t\n\t//Sets the radius of the sphere to the middle of the screen\n\tfloat radius = sqrt(dot(p, p));\n    mouse -= 0.5;\n\t if (length(mouse) < sphereScale)\n        specPoint = mouse;\n\tvec3 col = texColor.rgb;\n\t\n\t//Sets the initial dark shadow around the edge of the sphere\n\tfloat f = smoothstep(sphereScale * 0.8, sphereScale, length(p + specPoint));\n\tcol -= mix(col, vec3(0.0), f) * 0.2;\n\t\n\t//Only carries out the logic if the radius of the sphere is less than the scale\n\tif(radius < sphereScale) {\n\t\tvec3 bg = col;\n\t\t\n\t\t//Sets the diffuse colour of the sphere (solid colour)\n\t\tcol = sphereDiff;\n\t\t\n\t\t//Adds smooth dark borders to help achieve 3D look\n\t\tf = smoothstep(sphereScale * 0.7, sphereScale, radius);\n\t\tcol = mix(col, sphereDiff * 0.45, f);\n\t\t\n\t\t//Adds specular glow to help achive 3D look\n\t\tf = 1.0 - smoothstep(-0.2, 0.6, length(p - specPoint));\n\t\tcol += f * sphereShine * sphereSpec;\n\t\t\n\t\t//Smoothes the edge of the sphere\n\t\tf = smoothstep(sphereScale - 0.07, sphereScale, radius);\n\t\tcol = mix(col, bg, 0.2);\n\t}\t\n\t\n\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}