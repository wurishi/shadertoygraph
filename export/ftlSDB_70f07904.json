{"ver":"0.1","info":{"id":"ftlSDB","date":"1626453113","viewed":120,"name":"[RGR] Ordered Dithering","username":"deeplo","description":"dithering test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 RGB2YUV( vec3 rgb ){\n\n    mat3 matrix = mat3(  0.299, -0.14713,  0.615  ,\n                         0.587, -0.28886, -0.51498,\n                         0.114,  0.436  , -0.10001 );\n    return matrix * rgb; \n\n}\n\nvec3 dither16( vec2 pos, vec3 clr ){\n    // dithering matrix (16 levels)\n    float M[16] = float[16](  0.,  8.,  2., 10.,\n                             12.,  4., 14.,  6.,\n                              3., 11.,  1.,  9.,\n                             15.,  7., 13.,  5.  );\n\n    // Get position in the matrix and threshold\n    int   x     = int(pos.x) % 4;\n    int   y     = int(pos.y) % 4;\n    float thres = M[x+4*y] / 16.;\n\n    // Saturate input and Init output var\n    clr = min(vec3(1.0),max(vec3(0.0),clr));\n    vec3 result = vec3( clr.x<0.5, clr.y<0.5, clr.z<0.5 );\n\n    // check if the current pixel exceed the threshold\n    vec3  dist  = abs(result - clr);\n    if (dist.r < thres){\n        result.r = 1.0 - result.r;\n    }\n    if (dist.g < thres){\n        result.g = 1.0 - result.g;\n    }\n    if (dist.b < thres){\n        result.b = 1.0 - result.b;\n    }\n\n\n    // return result\n    return 1.0 - result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get full screen from 0/0 to 1/1\n    // image may be stretched depending on screen and texture sizes\n    // but that allows to see the image full screen\n    vec2 uv = (fragCoord)/iResolution.xy;\n\n    // INPUT PIXEL (here a simple color gradient according to position)\n//    vec3 pixel = vec3(uv.y, uv.y, 0);\n    // INPUT PIXEL (from texture)\n    vec3 pixel = texture(iChannel0, uv).rrr;\n    \n    // Apply ordered dithering\n    vec3 col = dither16(fragCoord, pixel);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}