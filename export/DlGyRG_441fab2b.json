{"ver":"0.1","info":{"id":"DlGyRG","date":"1700316964","viewed":76,"name":"Spherical waves interference","username":"eliuz","description":"Spherical waves interference","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["waves","interference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ORIGIN vec2(0.0,0.0)\n#define GAMMA 1.\n#define KAPPA1 90.\n#define KAPPA2 60.\n#define KAPPA3 30.\n#define DPHI 0.\n#define INT1 (abs(sin(iTime/3.))*0.06 + 0.06)\n#define INT2 (abs(cos(iTime/3.))*0.06 + 0.06)\n#define INT3 (abs(cos(iTime/3.))*0.06 + 0.06)\n#define RED   vec3(1.0, 0.0, 0.0)\n#define BLUE  vec3(0.0, 0.0, 1.0)\n#define GREEN vec3(0.0, 1.0, 0.0)\n\n\nfloat pointSDF(vec2 uv, vec2 P){\n    return distance(P, uv);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord - iResolution.xy/2.)/iResolution.y;\n    vec2 muv =  2.*(iMouse.xy - iResolution.xy/2.)/iResolution.y;\n    \n    float rho1 = 1. * cos(iTime/2.5);\n    float rho2 = 1. * sin(iTime/2.5);\n    vec2 pos1 = rho1*vec2(cos(iTime/5.), sin(iTime/5.)) * (iResolution.xy / iResolution.y);\n    vec2 pos2 = rho2*vec2(cos(iTime/5.), sin(iTime/5.)) * (iResolution.xy / iResolution.y);\n    float col = 0.0;\n    \n    vec2 p1 = pos1;\n    vec2 p2 = - pos2;\n    vec2 p3 = ORIGIN;\n    \n    float r1 = pointSDF(uv, p1);\n    float r2 = pointSDF(uv, p2);\n    float r3 = pointSDF(uv, p3);\n    \n    float i1 = (INT1 / r1);\n    \n    float i2 = (INT2 / r2);\n    \n    float i3 = (INT3 / r3);\n    \n    float interference12 = 2.*i1*i2*cos(KAPPA1*r1 - KAPPA2*r2 + DPHI);\n    float interference23 = 2.*i2*i3*cos(KAPPA2*r2 - KAPPA3*r3 + DPHI);\n    float interference13 = 2.*i1*i3*cos(KAPPA1*r1 - KAPPA3*r3 + DPHI);\n    \n    \n    float intensity = i1 * i1 + i2 * i2 + i3 * i3 + interference12 + interference23 + interference13;\n    vec3 color = normalize(i1*RED + i2*BLUE + i3*GREEN) * pow(intensity, GAMMA);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}