{"ver":"0.1","info":{"id":"fdVcWh","date":"1654774380","viewed":154,"name":"Another infinite CA","username":"laserbat","description":"Looks better if full screen. The main computation is done in \"Buffer A\" tab.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["feedback","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Colorization and output stuff here.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    float val = texelFetch(iChannel0, ivec2(fragCoord / 4.0), 0).x / float(N);\n    \n    fragColor.r = fract(val * 137.0);\n    fragColor.g = fract(val * 713.0);\n    fragColor.b = fract(val * 435.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define GET(d) int(texelFetch(iChannel0, ivec2(mod(fragCoord + vec2(d) + res, res)), 0).x)\n\n// Simple time-dependant noise function, for seeding CA\nfloat noise(in vec2 co){\n    float a = fract(co.x * 10.5 + co.y * 7.5 + fract(iDate.a));\n    a = fract(715.5 * a * a + 57.1 * co.x);\n    a = fract(1371.5 * a * a + 757.1 * co.y);\n    return a;\n}\n\n// Main CA computation\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 res = iResolution.xy;\n    \n    if (iFrame > 0) {\n    \tivec2 d;\n        int vals[9];\n\n        int i = 1;\n\n        vals[0] = GET(ivec2(0, 0));\n        vals[1] = GET(ivec2(0, 1));\n        vals[2] = GET(ivec2(1, 0));\n        vals[3] = GET(ivec2(0, -1));\n        vals[4] = GET(ivec2(-1, 0));\n        vals[5] = GET(ivec2(1, 1));\n        vals[6] = GET(ivec2(1, -1));\n        vals[7] = GET(ivec2(-1, 1));\n        vals[8] = GET(ivec2(-1, -1));\n\n\n        int k = 0;\n        for (i = 1; i < 9; i += 1)\n            k |= vals[i];\n        \n        int m = N;\n        int v = 0;\n        \n        for (i = 0; i < 9; i += 1){\n            int q = vals[i];\n            q = ((((5 * q) & N) + N - k) ^ k);\n            \n            if (q <= m) {\n                m = q;\n                v = i;\n            }\n        }\n\n        fragColor.x = float(vals[v]);\n\n    } else {\n        // Randomize initial state on zeroth frame\n        fragColor.x = float(N) * noise(fragCoord/res);\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define N 0x0FFFFFFF\n","name":"Common","description":"","type":"common"}]}