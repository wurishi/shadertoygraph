{"ver":"0.1","info":{"id":"tdGSzd","date":"1574734695","viewed":136,"name":"Heightmap raymarcher","username":"BFrizzFoShizz","description":"A raymarched heightmap renderer. \nsampleSignal() is the heightmap function.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["heightmapraymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray\n{\n    vec3 origin;\n    vec3 dir;\n};\n\nRay generateRayFromPixel(vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    vec3 eyeOrigin = vec3(cos(iTime * 1.41) * 2.0f,sin(iTime),sin(iTime * 1.325) * 0.5f);\n    \n    float nearPlaneDist = 0.1f;\n    \n    // horizontal FoV\n    float FoV = (60.0f / 180.0f) * 3.1415926535f;\n    \n    float halfNearPlaneWidth = (sin(FoV / 2.0f));\n    \n    float aspect = iResolution.x / iResolution.y;\n    \n    vec3 nearPlaneOrigin = eyeOrigin + vec3(-halfNearPlaneWidth, -halfNearPlaneWidth / aspect, nearPlaneDist);\n    \n    vec3 rayOrigin = nearPlaneOrigin + vec3(uv.x * halfNearPlaneWidth*2.0f, uv.y * (halfNearPlaneWidth / aspect) * 2.0f, 0.0f);\n    \n    vec3 rayDir = normalize(rayOrigin - eyeOrigin);\n    \n    Ray ray;\n    ray.origin = rayOrigin;\n    ray.dir = rayDir;\n    \n    return ray;\n}\n\n// returns whether a position is below the signal\nbool sampleSignal(vec3 position)\n{\n    float signal = (cos(position.x) * cos(position.z) * cos(iTime * 4.0)) - 2.0f;\n    return (signal > position.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    Ray ray = generateRayFromPixel(fragCoord);\n    \n    int numIterations = 400;\n    float farDist = 20.0;\n    \n    for(int iteration = 0; iteration < numIterations; iteration++)\n    {\n        float dist = (float(iteration) / float(numIterations)) * farDist;\n\t\tvec3 position = ray.origin + (ray.dir * dist);\n        if(sampleSignal(position))\n        {\n            float scaledDist = dist / farDist;\n            fragColor = vec4(cos(position.x), sin(position.z), dist / farDist, 1);\n            return;\n        }\n        \n    }\n\n    // Output to screen\n    fragColor = vec4(0,0,1,1.0);\n}","name":"Image","description":"","type":"image"}]}