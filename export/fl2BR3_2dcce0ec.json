{"ver":"0.1","info":{"id":"fl2BR3","date":"1652530608","viewed":126,"name":"box2d","username":"storycraft","description":"Prototype shader for my 2D gui renderer.\nClick or drag to move rect.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Returns vec3(distanceX, distanceY, borderRadius)\nvec3 box2d(vec4 rect, vec4 vertexRadius, vec2 coord) {\n    vec2 halfSize = rect.zw / 2.0;\n    vec2 center = rect.xy + rect.zw / 2.0;\n    \n    float borderRadius = vertexRadius[int(center.y - coord.y <= 0.0) * 2 + int(center.x - coord.x <= 0.0)];\n    \n    vec2 dist = max(abs(center - coord) - halfSize + borderRadius, vec2(0.0, 0.0));\n    \n    return vec3(dist, borderRadius);\n}\n\nfloat boxDistance(vec3 box2d) {\n    return max(sqrt(dot(box2d.xy, box2d.xy)) - box2d.z, 0.0);\n}\n\nvec4 blend(vec4 source, vec4 dest, float alpha) {\n    return source * (1.0 - alpha) + dest * alpha;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Fix initial mouse position to center\n    vec2 mouse = mix(iMouse.xy, iResolution.xy / 2.0, float(iMouse.x * iMouse.y == 0.0));\n    vec2 coord = vec2(fragCoord.x, iResolution.y - fragCoord.y);\n    \n    vec4 rect = vec4(mouse.x - 100.0, iResolution.y - mouse.y - 100.0, 200.0, 200.0);\n    vec4 fillColor = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 borderColor = vec4(1.0, 0.0, 0.0, 0.8);\n    vec2 shadowOffset = vec2(20.0, 20.0);\n    vec4 shadowColor = vec4(0.3, 0.3, 0.3, 0.3);\n    vec4 glowColor = vec4(0.3, 0.3, 0.0, 0.5);\n    // left-top, left-bottom, right-top, right-bottom\n    vec4 boxBorderRadius = vec4(10.0, 100.0, 100.0, 10.0);\n    float borderThickness = 10.0;\n    float glowRadius = 10.0;\n    float shadowRadius = 10.0;\n\n    vec3 box = box2d(rect, boxBorderRadius, coord);\n    vec3 shadowBox = box2d(rect, boxBorderRadius, coord - shadowOffset);\n    \n    float d = boxDistance(box);\n    float shadowD = boxDistance(shadowBox);\n\n    fragColor = texture(iChannel0, fragCoord / iChannelResolution[0].xy);\n    \n    if (shadowD < shadowRadius) {\n        float t = mix(0.0, shadowD / shadowRadius, float(shadowRadius != 0.0));\n        fragColor = blend(fragColor, shadowColor, shadowColor.w * (1.0 - t * t));\n    }\n    \n    if (d <= borderThickness + glowRadius && d > borderThickness) {\n        float t = mix(0.0, (d - borderThickness) / glowRadius, float(glowRadius != 0.0));\n        fragColor = blend(fragColor, glowColor, glowColor.w * (1.0 - t * t));\n    }\n    \n    if (d <= box.z + borderThickness && d < borderThickness + 1.0 && d > 0.0) {\n        float t = max(d - borderThickness, 0.0);\n        fragColor = blend(fragColor, borderColor, borderColor.w * (1.0 - t * t));\n    }\n\n    if (d <= box.z && d < 1.0) {\n        fragColor = blend(fragColor, fillColor, fillColor.w * (1.0 - d * d));\n    }\n}","name":"Image","description":"","type":"image"}]}