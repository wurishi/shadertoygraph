{"ver":"0.1","info":{"id":"MX3SR2","date":"1719266582","viewed":79,"name":"Mouse move with any key","username":"smarchevsky","description":"You can move 2d values WITH MOUSE every corresponding keyboard key.\nKeep pressing A, while mouse drag (grid, corresponding to 'A' will move);\nKeep pressing 1, while mouse drag (grid, corresponding to '1' will move);","likes":3,"published":1,"flags":48,"usePreview":0,"tags":["mouse","grid","keyboard","navigation","viewport","modifier"],"hasliked":0,"parentid":"X3dSRB","parentname":"Mouse move with key mod"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define TWO_PI (PI * 2.)\n\nfloat grid(vec2 uv, float thickness) { \n    vec2 g = abs(fract(uv) * 2. - 1.);\n    g = smoothstep(1. - thickness, 1., g);\n    return max(g.x,g.y);\n    return clamp(pow(max(g.x,g.y), 100.) , 0.,1.);\n}\n\nvec3 pal( in float t, vec3 c, vec3 d ){ return .5 + .5 * cos( TWO_PI*(c*t + d) ); }\n\nmat2 rotate2d(float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(c,-s,s,c);\n}\n\n#define DATA_BUFFER iChannel0\n\n// Visualize every corresponding key as grid\nvoid accumulate(int keyStart, int keyEnd, in vec2 uv,  float thickness, inout vec3 acc){\n    for(int i = keyStart; i <= keyEnd; ++i){\n        float fraction = float(i - keyStart) / float(keyEnd - keyStart);\n        vec2 texelWithData = TEXEL_FROM(i).rg;\n        \n        acc += pal( float(i)/10., vec3(1), vec3(0,0.333,0.667)) \n             * grid((uv - texelWithData)*rotate2d(float(i)) * (2. + fract(float(i)/30.)), thickness);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nvec2 uv = TO_NORMALIZED_COORD(fragCoord);\n    vec3 acc = vec3(0);\n    \n    \n    accumulate(POS_NOMOD_TEXEL, POS_NOMOD_TEXEL, uv, 0.05, acc); // move grid with no keys pressed\n    accumulate(12, 18, uv, 0.01, acc);    // Shift, Ctrl, Alt\n    accumulate(48, 48+9, uv, 0.01, acc);  // 0...9\n    accumulate(65, 90, uv, 0.01, acc); // A...Z\n    \n    \n    fragColor = vec4(acc, 1);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD(key) bool(texelFetch(iChannel0, ivec2(key, 0), 0).x > 0.5)\n\n#define IS_TEXEL(texelPos) (iCoord.x == texelPos && iCoord.y == 0)\n\n#define DATA_BUFFER     iChannel1\n#define KEYBOARD_BUFFER iChannel0\n\nvec2 toNormalizedCoord(vec2 fragCoord) {\n    vec2 n = fragCoord/iResolution.xy;\n    //n.x *= iResolution.x / iResolution.y;\n    return n;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iCoord = ivec2(fragCoord);\n    if(iCoord.y > 0 || iCoord.x > KEY_PRINTABLE_END)\n        return;\n        \n    //vec2 uv = fragCoord/iResolution.xy;\n    \n    bool keyPressedAtTexel = texelFetch(KEYBOARD_BUFFER, ivec2(iCoord.x,0), 0).x > 0.5;\n    \n    bool anyKeyPressed = false;\n    // it makes all these texelfetches to verify, no key pressed\n    // to move when no key pressed\n    for(int i = POS_NOMOD_TEXEL + 1; i < KEY_PRINTABLE_END; ++i)\n        if(texelFetch(KEYBOARD_BUFFER, ivec2(i,0), 0).x > 0.5) anyKeyPressed = true;\n    \n    \n    vec4 currentTexel = texelFetch(DATA_BUFFER, ivec2(iCoord.x,0), 0);\n    vec4 mousePrev    = texelFetch(DATA_BUFFER, ivec2(MOUSE_POS_TEXEL,0), 0);\n    \n    vec2 mousePos = iMouse.xy;\n    mousePos = TO_NORMALIZED_COORD(mousePos);\n    \n    vec2 delta = vec2(0);\n    if(iMouse.z > 0.5f && mousePrev.z > 0.5) {\n        delta = mousePos - mousePrev.xy;\n    }\n    \n    if(iFrame == 0) fragColor = vec4(0); else fragColor = currentTexel;\n    \n    if(IS_TEXEL(MOUSE_POS_TEXEL)) {\n        fragColor = vec4(mousePos, iMouse.z, 0);\n    } else {\n       if(keyPressedAtTexel)\n            fragColor = vec4(currentTexel.rg + delta, 0, 0);\n       else if(IS_TEXEL(POS_NOMOD_TEXEL) && !anyKeyPressed)\n            fragColor = vec4(currentTexel.rg + delta, 0, 0);\n \n    }\n    \n    \n\n    //digit = max(digit, PrintValue( (uv-vec2(0,0.5)) * 10., num, 4., 1.));\n    //fragColor = vec4(shift, ctrl, alt, 1.);\n \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int POS_NOMOD_TEXEL = 2;\n\n\n// check keys with key tester https://www.shadertoy.com/view/XsycWw\n\nconst int KEY_A = 65;\nconst int KEY_Z = 90;\n\nconst int KEY_0  = 48;\nconst int KEY_9  = 57;\n\n\n// TODO: MAKE ARRAY TO ITERATE ONLY THESE KEYS\n// WIP\nconst int KEY_ENTER = 13;\nconst int KEY_SHIFT = 16;\nconst int KEY_CTRL  = 17;\nconst int KEY_ALT   = 18;\nconst int KEY_ESC = 27;\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nconst int KEY_IN  = 45;\nconst int KEY_DEL  = 46;\nconst int KEY_END  = 35;\nconst int KEY_HOME  = 36;\nconst int KEY_PGUP  = 33;\nconst int KEY_PGDN  = 34;\n\n\n//\n\n\nconst int KEY_PRINTABLE_START  = 32;\nconst int KEY_PRINTABLE_END  = 96;\n\nconst int MOUSE_POS_TEXEL = 1;\n\n\n#define TEXEL_FROM(texelPos) texelFetch(DATA_BUFFER, ivec2(texelPos, 0), 0)\n\n#define TO_NORMALIZED_COORD(coord) coord/iResolution.xy * vec2(iResolution.x / iResolution.y, 1);\n\n","name":"Common","description":"","type":"common"}]}