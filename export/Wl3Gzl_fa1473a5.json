{"ver":"0.1","info":{"id":"Wl3Gzl","date":"1577145483","viewed":244,"name":"Non-spherical noise kernel test","username":"KdotJPG","description":"Experimental Simplex-style noise, but with a non-spherical kernel as a compromise in smoothness between 8-point noise and 4-point noise with spherical kernels. Not actually simplex noise, but an alternative. Original: https://www.shadertoy.com/view/wt3GRf","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////// K.jpg's Simplex-Style Re-oriented 4Point BCC Noise ///////////////\n///////////////////// Experimantal non-spherical kernel test ////////////////////\n\n// Inspired by Stefan Gustavson's noise\nvec4 permute(vec4 t) {\n    return t * (t * 34.0 + 133.0);\n}\n\n// Gradient set is a normalized expanded rhombic dodecahedron\nvec3 grad(float hash) {\n    \n    // Random vertex of a cube, +/- 1 each\n    vec3 cube = mod(floor(hash / vec3(1.0, 2.0, 4.0)), 2.0) * 2.0 - 1.0;\n    \n    // Random edge of the three edges connected to that vertex\n    // Also a cuboctahedral vertex\n    // And corresponds to the face of its dual, the rhombic dodecahedron\n    vec3 cuboct = cube;\n    cuboct[int(hash / 16.0)] = 0.0;\n    \n    // In a funky way, pick one of the four points on the rhombic face\n    float type = mod(floor(hash / 8.0), 2.0);\n    vec3 rhomb = (1.0 - type) * cube + type * (cuboct + cross(cube, cuboct));\n    \n    // Expand it so that the new edges are the same length\n    // as the existing ones\n    vec3 grad = cuboct * 1.22474487139 + rhomb;\n    \n    // To make all gradients the same length, we only need to shorten the\n    // second type of vector. We also put in the whole noise scale constant.\n    // The compiler should reduce it into the existing floats. I think.\n    grad *= (1.0 - 0.042942436724648037 * type) * 2.0; //TODO we can find a better normalization constant probably\n    \n    return grad;\n}\n\n// BCC lattice split up into 2 cube lattices\nfloat bccNoiseBase(vec3 X) {\n    \n    // First half-lattice, closest edge\n    vec3 v1 = round(X);\n    vec3 d1 = X - v1;\n    vec3 score1 = abs(d1);\n    vec3 dir1 = step(max(score1.yzx, score1.zxy), score1);\n    vec3 v2 = v1 + dir1 * sign(d1);\n    vec3 d2 = X - v2;\n    \n    // Second half-lattice, closest edge\n    vec3 X2 = X + 144.5;\n    vec3 v3 = round(X2);\n    vec3 d3 = X2 - v3;\n    vec3 score2 = abs(d3);\n    vec3 dir2 = step(max(score2.yzx, score2.zxy), score2);\n    vec3 v4 = v3 + dir2 * sign(d3);\n    vec3 d4 = X2 - v4;\n    \n    // Gradient hashes for the four points, two from each half-lattice\n    vec4 hashes = permute(mod(vec4(v1.x, v2.x, v3.x, v4.x), 289.0));\n    hashes = permute(mod(hashes + vec4(v1.y, v2.y, v3.y, v4.y), 289.0));\n    hashes = mod(permute(mod(hashes + vec4(v1.z, v2.z, v3.z, v4.z), 289.0)), 48.0);\n    \n    // One 1D bump function between each pair of opposing faces on the lattice neighborhood figure.\n    // All multiplied together, then squared at the end.\n    // Should be possible in any number of dimensions.\n    // May not achieve as high a degree of continuity.\n    vec3 d1c = d1.xxy + d1.yzz; vec3 d2c = d2.xxy + d2.yzz;\n    vec3 d3c = d3.xxy + d3.yzz; vec3 d4c = d4.xxy + d4.yzz;\n    vec3 d1d = d1.xxy - d1.yzz; vec3 d2d = d2.xxy - d2.yzz;\n    vec3 d3d = d3.xxy - d3.yzz; vec3 d4d = d4.xxy - d4.yzz;\n    d1c = 1.0 - d1c * d1c; d2c = 1.0 - d2c * d2c;\n    d3c = 1.0 - d3c * d3c; d4c = 1.0 - d4c * d4c;\n    d1d = 1.0 - d1d * d1d; d2d = 1.0 - d2d * d2d;\n    d3d = 1.0 - d3d * d3d; d4d = 1.0 - d4d * d4d;\n    vec4 b = vec4(d1c.x * d1c.y * d1c.z, d2c.x * d2c.y * d2c.z, d3c.x * d3c.y * d3c.z, d4c.x * d4c.y * d4c.z);\n    b *= vec4(d1d.x * d1d.y * d1d.z, d2d.x * d2d.y * d2d.z, d3d.x * d3d.y * d3d.z, d4d.x * d4d.y * d4d.z);\n    vec4 bb = b * b;\n    \n    // Gradient extrapolations\n    vec3 g1 = grad(hashes.x); vec3 g2 = grad(hashes.y);\n    vec3 g3 = grad(hashes.z); vec3 g4 = grad(hashes.w);\n    vec4 extrapolations = vec4(dot(d1, g1), dot(d2, g2), dot(d3, g3), dot(d4, g4));\n    \n    return dot(bb, extrapolations);\n}\n\n// Use this if you don't want Z to look different from X and Y\nfloat bccNoiseClassic(vec3 X) {\n    \n    // Rotate around the main diagonal. Not a skew transform.\n    return bccNoiseBase(dot(X, vec3(2.0/3.0)) - X);\n}\n\n// Use this if you want to show X and Y in a plane, and use Z for time, etc.\nfloat bccNoisePlaneFirst(vec3 X) {\n    \n    // Rotate so Z points down the main diagonal. Not a skew transform.\n    mat3 orthonormalMap = mat3(\n        0.788675134594813, -0.211324865405187, -0.577350269189626,\n        -0.211324865405187, 0.788675134594813, -0.577350269189626,\n        0.577350269189626, 0.577350269189626, 0.577350269189626);\n    \n    return bccNoiseBase(orthonormalMap * X);\n}\n\n\n//////////////////////////////// End noise code ////////////////////////////////\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Normalized pixel coordinates (from 0 to 1 on largest axis)\n    vec2 uv = fragCoord / max(iResolution.x, iResolution.y) * 12.0;\n    \n    // Input point\n    vec3 X = vec3(uv, mod(iTime, 578.0) * 0.8660254037844386);\n    \n    // Evaluate noise\n    float noiseResult = bccNoisePlaneFirst(X);\n\n    // Time varying pixel col\n    vec3 col = vec3(noiseResult) * 0.5 + 0.5;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}