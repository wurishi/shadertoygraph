{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define MAX_STEPS 64\n#define MAX_REFLECTIONS 4\n#define PI 3.1415926536\n\nstruct Ray {\n\tvec3 o;\n\tvec3 d;\n};\nstruct Sphere {\n\tvec3 o;\n\tfloat r;\n};\nstruct Box {\n\tvec3 o;\n\tvec3 s;\n};\nstruct Torus {\n\tvec3 o;\n\tvec2 s;\n};\n\nvec2 rotate2d(in vec2 v, in float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nfloat sdSphere(in vec3 p, in Sphere s) {\n\treturn length(p-s.o)-s.r;\n}\nfloat sdBox(in vec3 p, in Box b) {\n\tvec3 d = abs(p-b.o) - b.s;\n\treturn min(max(d.x,max(d.y,d.z)),0.0) +\n\t\tlength(max(d,0.0));\n}\nfloat sdTorus(in vec3 p, in Torus t) {\n\tp -= t.o;\n\tvec2 q = vec2(length(p.xz)-t.s.x,p.y);\n\treturn length(q)-t.s.y;\n}\nfloat world(in vec3 p) {\n\tfloat ti = mod(iTime,10.);\n\tif(ti > 2.) {\n\t\tSphere s0 = Sphere(vec3(0),1.);\n\t\tBox b0 = Box(vec3(0),vec3(.8));\n\t\tif(ti < 4.) {\n\t\t\treturn max(-sdSphere(p,s0),sdBox(p,b0));\n\t\t} else if(ti < 6.) {\n\t\t\treturn min(sdSphere(p,s0),sdBox(p,b0));\n\t\t} else if(ti < 8.) {\n\t\t\treturn max(sdSphere(p,s0),sdBox(p,b0));\n\t\t} else {\n\t\t\treturn max(sdSphere(p,s0),-sdBox(p,b0));\n\t\t}\n\t} else {\n\t\tvec3 pr = p.xzy;\n\t\treturn sdTorus(pr, Torus(vec3(0),vec2(1.,.5)));\n\t}\n}\nvec3 getNormal(in vec3 p) {\n\tvec3 d = vec3(.005,0,0);\n\tvec3 n;\n\tn.x = world(p+d.xyy);\n\tn.y = world(p+d.yxy);\n\tn.z = world(p+d.yyx);\n\treturn normalize(n);\n}\n\nbool march(in Ray r, out vec3 p) {\n\tp = r.o;\n\tfloat d;\n\tfor(int i = 0; i < MAX_STEPS; i++) {\n\t\td = world(p);\n\t\tp += r.d*d;\n\t}\n\treturn d<=0.01;\n}\n\nvec3 colorMarch(in Ray r) {\n\tvec3 p;\n\tvec3 col = vec3(0);\n\tfor(int i = 0; i < MAX_REFLECTIONS; i++) {\n\t\tif(march(r,p)) {\n\t\t\tvec3 ldir = normalize(vec3(1,-1,.5));\n\t\t\tvec3 n = getNormal(p);\n\t\t\tcol += vec3(dot(n,-ldir))*.25;\n\t\t\tr = Ray(p,reflect(r.d,n));\n\t\t\tr.o += r.d*0.2;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\tcol += texture(iChannel0,r.d).rgb;\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = 2.*fragCoord.xy/iResolution.xy-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tRay r = Ray(vec3(0,0,-2),normalize(vec3(uv,1)));\n\tr.o.xz = rotate2d(r.o.xz,iTime*.5);\n\tr.d.xz = rotate2d(r.d.xz,iTime*.5);\n\tfragColor.rgb = colorMarch(r);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsB3DW","date":"1387740107","viewed":425,"name":"Reflective Shapes","username":"Pitzik4","description":"A cycle of simple reflective shapes in a cubemapped environment.\nThis is my first try at raymarching. I am very impressed by the simplicity and power of it!","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","reflection"],"hasliked":0,"parentid":"","parentname":""}}