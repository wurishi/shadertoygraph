{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Shader for a clay-like waving humanoid figure\n// Procedural geometry with animation and fixed shading\n\nfloat sphere(vec3 ro, vec3 rd, vec3 center, float radius, out vec3 normal) {\n    vec3 oc = ro - center;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - radius * radius;\n    float h = b * b - c;\n    if (h < 0.0) return -1.0; // No hit\n    h = sqrt(h);\n    float t = -b - h > 0.0 ? -b - h : -b + h;\n    normal = normalize((ro + t * rd) - center);\n    return t;\n}\n\nfloat capsule(vec3 ro, vec3 rd, vec3 a, vec3 b, float radius, out vec3 normal) {\n    vec3 ba = b - a;\n    vec3 oa = ro - a;\n    float baba = dot(ba, ba);\n    float bard = dot(ba, rd);\n    float baoa = dot(ba, oa);\n    float rdoa = dot(rd, oa);\n    float oaoa = dot(oa, oa);\n\n    float a_ = baba - bard * bard;\n    float b_ = baba * rdoa - baoa * bard;\n    float c_ = baba * oaoa - baoa * baoa - radius * radius * baba;\n    float h = b_ * b_ - a_ * c_;\n    if (h < 0.0) return -1.0;\n    h = sqrt(h);\n    float t = (-b_ - h) / a_;\n    float y = baoa + t * bard;\n\n    if (y > 0.0 && y < baba) {\n        vec3 hitPoint = ro + t * rd;\n        vec3 ca = hitPoint - a;\n        normal = normalize(ca - ba * dot(ca, ba) / baba);\n        return t;\n    }\n\n    return -1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Camera setup\n    vec3 camPos = vec3(0.0, 1.0, 3.0);\n    vec3 rayDir = normalize(vec3(uv, -1.0));\n\n    // Light setup\n    vec3 lightDir = normalize(vec3(-1.0, 2.0, 1.0));\n\n    // Background gradient\n    vec3 bgColor = mix(vec3(1.0), vec3(0.9, 0.8, 0.7), uv.y + 0.5);\n    vec3 color = bgColor;\n\n    // Humanoid figure\n    vec3 normal;\n    float tMin = 1e9;\n    vec3 matColor = vec3(0.8, 0.4, 0.3);\n\n    // Body (cylinder)\n    float tBody = capsule(camPos, rayDir, vec3(0.0, 0.0, -3.0), vec3(0.0, 1.2, -3.0), 0.3, normal);\n    if (tBody > 0.0 && tBody < tMin) {\n        tMin = tBody;\n        color = matColor;\n        color *= max(dot(normal, lightDir), 0.3); // Diffuse lighting\n    }\n\n    // Head (sphere)\n    float tHead = sphere(camPos, rayDir, vec3(0.0, 1.5, -3.0), 0.4, normal);\n    if (tHead > 0.0 && tHead < tMin) {\n        tMin = tHead;\n        color = matColor;\n        color *= max(dot(normal, lightDir), 0.3);\n    }\n\n    // Waving arm (animated cylinder)\n    float armWave = sin(iTime) * 0.5;\n    float tArm = capsule(camPos, rayDir, vec3(0.0, 1.2, -3.0), vec3(armWave, 1.5, -3.0), 0.15, normal);\n    if (tArm > 0.0 && tArm < tMin) {\n        tMin = tArm;\n        color = matColor;\n        color *= max(dot(normal, lightDir), 0.3);\n    }\n\n    // Specular lighting for clay effect\n    vec3 viewDir = normalize(camPos - (camPos + tMin * rayDir));\n    vec3 reflectDir = reflect(-lightDir, normal);\n    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);\n    color += vec3(0.2) * spec;\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MftfWs","date":"1733658580","viewed":19,"name":"Animation test #1","username":"thatsience","description":"This is the first animation test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""}}