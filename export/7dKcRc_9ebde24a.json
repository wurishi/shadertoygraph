{"ver":"0.1","info":{"id":"7dKcRc","date":"1655738198","viewed":109,"name":"Segment SDF With L2 Metric","username":"Envy24","description":"Segment SDF With L2 Metric of P(t) = S*(1-t) + E*t.\nhttps://www.desmos.com/calculator/ncoaxd4dl5\n\nOther implementation:\nhttps://www.shadertoy.com/view/3tdSDj","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","bezier","distance","linear","equation","segment","parametric","metric","euclid","l2"],"hasliked":0,"parentid":"fsGcRc","parentname":"Line SDF with L2 (Euclid) Metric"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R                           iResolution\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define NZMX                      ( (iMouse.x+iMouse.x-R.x) / R.x )  // in range [-1.0; 1.0]\n#define NZMY                      ( (iMouse.y+iMouse.y-R.y) / R.y )  // in range [-1.0; 1.0]\n#define LMB_IS_HOLD               ( iMouse.z > 0.0 )\n\nfloat L2(vec2 B, vec2 E)\n{\n    vec2 D = E - B;\n    return sqrt(D.x*D.x + D.y*D.y);\n}\n\n/* Solution from https://www.desmos.com/calculator/ncoaxd4dl5 *\nfloat segmentSDF_L2(\n    vec2 NDC,\n    vec2 S,\n    vec2 E)\n{\n    float y0 = S.y, y1 = E.y, x0 = S.x, x1 = E.x, a = NDC.x, b = NDC.y;\n\n    float numer = (x1 - x0)*( a - x0) + (y1 - y0)*( b - y0);\n    float denom = (x1 - x0)*(x1 - x0) + (y1 - y0)*(y1 - y0);\n    \n    float t = clamp((numer / denom), 0.0, 1.0);\n    \n    vec2 C = vec2(x0 - x0*t + x1*t, y0 - y0*t + y1*t);\n    \n    float R = sinOSC(0.0, 0.3, iTime);\n    return L2(C, NDC) - R;\n}\n/* OR */\nfloat segmentSDF_L2(\n    in vec2 NDC,\n    in vec2 B,   \n    in vec2 E)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    float R = sinOSC(0.0, 0.3, iTime);\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n/**/\n\n/* https://www.shadertoy.com/view/ddfGz2 */\nvec3 colorize_field(float dist, vec3 color)\n{    \n    float F = 30., freq = F*dist, aa = 1./F, C = 0.7, amp = 0.2, width = 0.3,\n          waves_sdf = C + amp*smoothstep(8./R.y, 0., (width+cos(freq)) * aa),\n          exp_raise = 1. - exp(-4.*abs(dist));\n        \n    color = 1.0 - sign(dist) * color; // Change color if dist is negative. \n    color *= exp_raise;               // Attenuate color around edges.     \n    color *= waves_sdf;               // Add waves.\n    \n    return mix(color, vec3(1), smoothstep(8./R.y, 0., abs(dist)) );\n}\n\nvec3 add_metric_circle(\n    vec2 NDC,\n    vec2 S,\n    vec2 E,\n    vec3 color)\n{\n    float unit = 7.0 / R.y;\n\n    vec2 M = \n        LMB_IS_HOLD ?\n            TO_CENTERED_NDC(iMouse.xy) * 2.0 :\n            rotateAroundZ(vec2(1, 0), iTime * 0.5) * 1.5;\n            //vec2(0);\n    \n    // Add point\n    color = mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, length(NDC - M) - 0.008));\n\n    float dist_form_point_to_box_edge = L2(NDC, M) - abs(segmentSDF_L2(M, S, E));\n    float outline = abs(dist_form_point_to_box_edge);\n    \n    // Add metric circle\n    return mix(color, vec3(1.0, 1.0, 0.0), smoothstep(unit, 0.0, outline));\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    float offs = sinOSC(-0.5, 0.5, iTime * 0.5);\n    vec2 NDC = TO_CENTERED_NDC(SC) * 2.0;\n    \n    vec2 S = vec2(-1.0, -1.0) * 0.65; \n    vec2 E = vec2(1.0, 1.0) * 0.65;\n    \n    S = rotateAroundZ(S, iTime * 0.1) + vec2(offs, -offs);\n    E = rotateAroundZ(E, iTime * 0.1) + vec2(-offs, offs);\n    \n    float minDist = segmentSDF_L2(NDC, S, E);\n    \n    // Blending.\n    vec3 color = colorize_field(minDist, vec3(0.1, 0.4, 0.7));\n    color = add_metric_circle(NDC, S, E, color);\n\n    O = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nvec2 rotateAroundZ(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n\n    return vec2(\n        p.x * c - p.y * s,\n        p.y * c + p.x * s);\n}","name":"Common","description":"","type":"common"}]}