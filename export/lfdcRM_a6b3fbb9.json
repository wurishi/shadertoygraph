{"ver":"0.1","info":{"id":"lfdcRM","date":"1730419151","viewed":16,"name":"Rectangle Mask Experiment","username":"tepSHATOY","description":"Experiment on different ways on how to create rectangle mask.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","mask"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Experiment with various ways to create rectangle mask\nvec3 rectangleMask(vec2 p, vec2 r)\n{    \n    vec3 color = vec3(abs(p) / (iResolution.xy * 0.5), 0.0);  // for debugging\n\n#if 0\n    // taking advantage of symmetry\n    vec2 d = max(vec2(0.0), abs(p) - r);\n#endif\n\n#if 1\n    // p gives us the clamped point\n    vec2 p_clamped = clamp(p, -r, r);\n    vec2 d = p - p_clamped;\n#endif\n\n    // multiplication with self doesn't really matter (might be useful because, this is basically distance)\n    d *= d;\n\n    if (d.x + d.y == 0.0)\n        color = vec3(1.0, 1.0, 1.0);\n    else\n        color = vec3(0.0, 0.0, 0.0);\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 origin = iResolution.xy * 0.5;\n    \n    vec2 p = fragCoord - origin;\n    vec2 r = vec2(300.0, 175.0);\n    \n    vec3 col = rectangleMask(p, r);\n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}