{"ver":"0.1","info":{"id":"dt2fDd","date":"1694640970","viewed":65,"name":"Kisrhombille DDA","username":"jt","description":"Implementation of a [url=https://en.wikipedia.org/wiki/Kisrhombille]Kisrhombille[/url] DDA\nas XOR of triangular grids, one orthogonal to the other and scaled by sqrt(3),\nwhich in turn are rendered by 3d cubic DDA sliced  orthogonally to the main diagonal\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","raytracing","raycasting","triangle","voxel","prism","honeycomb","dda","tesselation","kisrhombille","triangular","interlocked","6d"],"hasliked":0,"parentid":"cl2fRd","parentname":"DDA test site 2d"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/dt2fDd Kisrhombille DDA, 2023 by jt\n// based on https://www.shadertoy.com/view/cl2fRd DDA test site 2d\n\n// DDA originally inspired by https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// and tutorial http://lodev.org/cgtutor/raycasting.html\n// 3d-texture on voxels addon, normals reconstruction and grid transform by jt\n\n// Proof of concept: implementation of https://en.wikipedia.org/wiki/Kisrhombille DDA\n// as XOR of two triangular grids, one orthogonal to the other and scaled by sqrt(3),\n// which in turn are rendered by 3d cubic DDA sliced orthogonally to the main diagonal.\n\n// (See also: https://www.shadertoy.com/view/cdGcDt trigonally interlocked grids dda\n//  which uses three 2d rectangular grids instead of two triangular grids).\n\n// tags: 2d, 3d, raytracing, raycasting, triangle, voxel, prism, honeycomb, dda, tesselation, kisrhombille, triangular, interlocked, 6d\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 128\n\n\n// Is there a shorter way to implement strictly POSITIVE integer-modulo?\nint mod_positive(int a, int b)\n{\n    // TODO: codegolf this line\n    return (a > 0 && b < 0) ? (a - 1) % b + b + 1 : (a < 0 && b > 0) ? (a + 1) % b + b - 1 : a % b;\n}\n\n// Emulate 6d vector. Would be so much easier if GLSL supported vec6...\n\nstruct VEC6\n{\n    vec3 a;\n    vec3 b;\n};\n\nstruct BVEC6\n{\n    bvec3 a;\n    bvec3 b;\n};\n\nstruct IVEC6\n{\n    ivec3 a;\n    ivec3 b;\n};\n\nVEC6 RECIPROCAL(VEC6 v)\n{\n    return VEC6(1.0 / v.a, 1.0 / v.b);\n}\n\nVEC6 SCALAR_TO_VEC6(float s)\n{\n    return VEC6(vec3(s), vec3(s));\n}\n\nIVEC6 SCALAR_TO_IVEC6(int s)\n{\n    return IVEC6(ivec3(s), ivec3(s));\n}\n\nVEC6 TO_FLOAT(BVEC6 v)\n{\n    return VEC6(vec3(v.a), vec3(v.b));\n}\n\nVEC6 TO_FLOAT(IVEC6 v)\n{\n    return VEC6(vec3(v.a), vec3(v.b));\n}\n\nIVEC6 TO_INT(BVEC6 v)\n{\n    return IVEC6(ivec3(v.a), ivec3(v.b));\n}\n\nIVEC6 TO_INT(VEC6 v)\n{\n    return IVEC6(ivec3(v.a), ivec3(v.b));\n}\n\nVEC6 ABS(VEC6 v)\n{\n    return VEC6(abs(v.a), abs(v.b));\n}\n\nVEC6 SIGN(VEC6 v)\n{\n    return VEC6(sign(v.a), sign(v.b));\n}\n\nVEC6 NEG(VEC6 v)\n{\n    return VEC6(-v.a, -v.b);\n}\n\nIVEC6 NEG(IVEC6 v)\n{\n    return IVEC6(-v.a, -v.b);\n}\n\nVEC6 FLOOR(VEC6 v)\n{\n    return VEC6(floor(v.a), floor(v.b));\n}\n\nVEC6 SCALE(VEC6 v, float s)\n{\n    return VEC6(v.a * s, v.b * s);\n}\n\nVEC6 ADD_HALF(VEC6 v)\n{\n    return VEC6(v.a + 0.5, v.b + 0.5);\n}\n\nVEC6 ADD(VEC6 v, VEC6 w)\n{\n    return VEC6(v.a + w.a, v.b + w.b);\n}\n\nIVEC6 ADD(IVEC6 v, IVEC6 w)\n{\n    return IVEC6(v.a + w.a, v.b + w.b);\n}\n\nVEC6 SUB(VEC6 v, VEC6 w)\n{\n    return VEC6(v.a - w.a, v.b - w.b);\n}\n\nVEC6 MUL(VEC6 v, VEC6 w)\n{\n    return VEC6(v.a * w.a, v.b * w.b);\n}\n\nIVEC6 MUL(IVEC6 v, IVEC6 w)\n{\n    return IVEC6(v.a * w.a, v.b * w.b);\n}\n\nVEC6 DIV(VEC6 v, VEC6 w)\n{\n    return VEC6(v.a / w.a, v.b / w.b);\n}\n\nIVEC6 DIV(IVEC6 v, IVEC6 w)\n{\n    return IVEC6(v.a / w.a, v.b / w.b);\n}\n\nfloat DOT(VEC6 v, VEC6 w)\n{\n    return dot(v.a, w.a) + dot(v.b, w.b);\n}\n\nfloat LENGTH(VEC6 v)\n{\n    return sqrt(DOT(v, v));\n}\n\nVEC6 MIN(VEC6 v, VEC6 w)\n{\n    return VEC6(min(v.a, w.a), min(v.b, w.b));\n}\n\nVEC6 MAX(VEC6 v, VEC6 w)\n{\n    return VEC6(max(v.a, w.a), max(v.b, w.b));\n}\n\nBVEC6 LTE(VEC6 v, VEC6 w)\n{\n    return BVEC6(lessThanEqual(v.a, w.a), lessThanEqual(v.b, w.b));\n}\n\nBVEC6 GTE(VEC6 v, VEC6 w)\n{\n    return BVEC6(greaterThanEqual(v.a, w.a), greaterThanEqual(v.b, w.b));\n}\n\n// sets bit to true if corresponding component is the minimum (multiples possible)\nBVEC6 LEAST(VEC6 v)\n{\n    float minimum = min(min(min(v.a.x, v.a.y), v.a.z), min(min(v.b.x, v.b.y), v.b.z));\n    return LTE(v, SCALAR_TO_VEC6(minimum));\n}\n\nbool get_voxel(IVEC6 v)\n{\n    return ((v.a.x^v.a.y^v.a.z^v.b.x^v.b.y^v.b.z) & 1) != 0; // checker\n}\n\n#define ESSENTIAL_MATRIX\n\n#ifdef ESSENTIAL_MATRIX\nvec2 apply_project(mat2x3 T, mat2x3 TR, VEC6 v) // NOTE: apparently the scale-factor should NOT be inverted when applying this to normals (would result in non-normalized vectors)\n{\n    return transpose(T)*v.a + transpose(TR)*v.b;\n}\n#else\nvec2 apply_project(mat3 T, mat3 TR, VEC6 v) // NOTE: apparently the scale-factor should NOT be inverted when applying this to normals (would result in non-normalized vectors)\n{\n    return (transpose(T)*v.a + transpose(TR)*v.b).xy;\n}\n#endif\n\nvec4 kisrhombille_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (additional fourth dimension to step along prism height) by jt\n{\n    float h = 0.25;\n\n    float plate_dist = abs(ray_pos_orig.z) <= h ? 0.0 : min((-h-ray_pos_orig.z)/ray_dir_orig.z, (+h-ray_pos_orig.z)/ray_dir_orig.z); // distance from camera to plate\n\n    if(plate_dist < 0.0) return vec4(-ray_dir_orig, DIST_MAX); // if entire plate missed return sky\n\n    ray_pos_orig += plate_dist * ray_dir_orig; // snap camera to nearest border of plate\n#ifdef ESSENTIAL_MATRIX\n    // The last vector of the matrix can be removed,\n    // because the corresponding value is ignored.\n    // Because this essential matrix is no longer invertible\n    // it must be split into rotation and scale\n    // so that we can use transpose on the rotational part\n    // and reciprocal on the scale part (instead of inverse).\n\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1, 2))\n        );\n    float s = 1.0/sqrt(3.0);\n/*\n    mat2x2 R =\n        mat2x2\n        (\n            normalize(vec2(sqrt(3.0)/2.0, 1.0/2.0)),\n            normalize(vec2(-1.0/2.0, sqrt(3.0)/2.0))\n        );\n    mat2x3 TR = T * R;\n*/\n    // NOTE: TR differs from T bei sign flip and permutation of the upper right 2x2 submatrix\n    mat2x3 TR =\n        mat2x3\n        (\n            normalize(vec3(+1,-2,+1)),\n            normalize(vec3(-1, 0,+1))\n       );\n\n    VEC6 ray_pos = VEC6(T * ray_pos_orig.xy, TR * s * ray_pos_orig.xy);\n    VEC6 ray_dir = VEC6(T * ray_dir_orig.xy, TR * s * ray_dir_orig.xy);\n#else\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T =\n        mat3\n        (\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1, 2)),\n            normalize(vec3(-1,-1,-1))\n        );\n    float s = 1.0/sqrt(3.0);\n/*\n    mat3 R =\n        mat3\n        (\n            normalize(vec3(sqrt(3.0)/2.0, 1.0/2.0, 0)),\n            normalize(vec3(-1.0/2.0, sqrt(3.0)/2.0, 0)),\n            normalize(vec3(0,0,1))\n        );\n    mat3 TR = T * R;\n*/\n    // NOTE: TR differs from T bei sign flip and permutation of the upper right 2x2 submatrix\n    mat3 TR =\n        mat3\n        (\n            normalize(vec3(+1,-2,+1)),\n            normalize(vec3(-1, 0,+1)),\n            normalize(vec3(-1,-1,-1))\n       );\n\n    VEC6 ray_pos = VEC6(T * vec3(ray_pos_orig.xy, 0), TR * s * vec3(ray_pos_orig.xy, 0));\n    VEC6 ray_dir = VEC6(T * vec3(ray_dir_orig.xy, 0), TR * s * vec3(ray_dir_orig.xy, 0));\n#endif\n    // initialization (four lines) adapted from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    IVEC6 tile_pos = TO_INT(FLOOR(ray_pos));\n    VEC6 delta_dist = RECIPROCAL(ABS(ray_dir));\n    IVEC6 ray_step = TO_INT(SIGN(ray_dir));\n    VEC6 side_dist = MUL(ADD_HALF(MUL(TO_FLOAT(ray_step), ADD_HALF(SUB(TO_FLOAT(tile_pos), ray_pos)))), delta_dist); // initial distances to nearest walls by dimension\n\n    if(get_voxel(tile_pos)) return vec4(vec3(0,0,sign(ray_pos_orig.z)), plate_dist); // if starting point at filled volume return surface normal (comment this out to remove floors & ceilings)\n\n    for(int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        // core (three lines) adapted from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 (somewhat reduced)\n        BVEC6 nearest = LEAST(side_dist); // component is true if nearest wall in that dimension\n        side_dist = ADD(side_dist, MUL(TO_FLOAT(nearest), delta_dist)); // update distances to nearest walls by dimension\n        tile_pos = ADD(tile_pos, MUL(TO_INT(nearest), ray_step)); // step to next tile in direction of nearest wall\n\n        float d = LENGTH(MUL(TO_FLOAT(nearest), SUB(side_dist, delta_dist)));\n\n        if(abs(ray_pos_orig.z + d * ray_dir_orig.z) > h) return vec4(-ray_dir_orig, DIST_MAX); // leaving plate? sky\n\n        if(get_voxel(tile_pos))\n        {\n#ifdef ESSENTIAL_MATRIX\n            return vec4(apply_project(T,TR,MUL(TO_FLOAT(nearest),TO_FLOAT(NEG(ray_step)))), 0, d + plate_dist);\n#else\n            return vec4(apply_project(T,TR,MUL(TO_FLOAT(nearest),TO_FLOAT(NEG(ray_step)))), 0, d + plate_dist);\n#endif\n        }\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    //float pitch = pi/2.0 + pi/2.0 * float(iMouse.y) / float(R.y);\n    float pitch = pi - 1.0 * pi * float(iMouse.y) / float(R.y);\n\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -12.5);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    ray_dir = normalize(ray_dir);\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n\n    vec3 color = vec3(0);\n    vec4 result = kisrhombille_trace(ray_pos, ray_dir);\n    if(result.w < DIST_MAX)\n    {\n        color = vec3(1);\n        vec3 dst = ray_pos + ray_dir * result.w;\n        //vec3 light_dir = normalize(vec3(5,2,1));\n        vec3 light_dir = normalize(vec3(1,2,3));\n        //vec3 light_dir = normalize(vec3(vec2(cos(iTime), sin(iTime)),1));\n\n        float diffuse = max(0.0, dot(light_dir, result.xyz));\n        //float diffuse = abs(dot(light_dir, n));\n        float shadow = diffuse > 0.0 ? kisrhombille_trace(dst+result.xyz*0.001, light_dir).w < DIST_MAX ? 0.0 : 1.0 : 0.0;\n        float ambient = 0.5;\n        float specular = max(0.0, dot(result.xyz, normalize(-normalize(ray_dir) + light_dir)));\n        color = vec3(1);\n        //color *= mix(vec3(0.5), vec3(1.0), checker(dst*2.0)); // texture\n        color *= vec3(0.5 + 0.5 * result.xyz); // debug normals\n        color *= shadow * diffuse + ambient;\n        color += shadow * 0.5 * pow(specular, 50.0);\n    }\n    else\n    {\n        color = vec3(0);\n    }\n\n    //color = vec3(fract(result.w)); // debug distance\n\n    vec3 fogcolor = vec3(0); // fog\n    color *= mix(fogcolor, color, exp(-pow(result.w, 2.0) / 500.0)); // fog for depth impression & to suppress flickering\n\n    color = tanh(color); // roll-off / soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n    //fragColor = vec4(color, 1.0); // no gamma\n}\n","name":"Image","description":"","type":"image"}]}