{"ver":"0.1","info":{"id":"M3fBRj","date":"1728593523","viewed":87,"name":"sphere union","username":"jt","description":"Exact euclidean SDF of the union of two spheres.\n(Simply using the min operator results in broken interior distance).\nFor exact union of spheres [i]positive[/i] offset results in exact smooth union!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["ray","sphere","marching","geometry","debug","union","verify"],"hasliked":0,"parentid":"43fBz2","parentname":"sphere intersection verification"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/M3fBRj sphere union, 2024 by jt\n// based on https://www.shadertoy.com/view/43fBz2 sphere intersection verification\n// sdf check https://www.shadertoy.com/view/DdX3z4 euclidean distance sdf debugger\n\n// Exact euclidean SDF of the union of two spheres.\n// (Simply using the min operator results in broken interior distance).\n\n// Different SDFs must be joined where perpendicular to surface!\n\n// For exact union of spheres positive offset results in exact smooth union.\n\n// TODO: Can exact union of spheres be generalized to more than two spheres?\n\n// tags: ray, sphere, marching, geometry, debug, union, verify\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n#define VERIFY_INTERIOR /* thanks to spalmer - detects broken SDFs (can cause more false alarms) */\n#define VERIFY_EXTERIOR /* thanks to spalmer - detects broken SDFs (can cause more false alarms) */\n// (See e.g. https://www.shadertoy.com/view/ddXGDr verify SDF error detection for test on deliberately incorrect SDF)\n// #define VERIFY_GRADIENT_CONTINUITY_ALONG /* WARNING: detects change of direction along gradients but causes false alarms e.g. outwards from box vertices */\n#define VERIFY_GRADIENT_CONTINUITY_SIDEWAYS /* WARNING: detects change of direction in \"parallel\" gradients but causes false alarms where gradients curve (e.g. towards sphere center) or at reflections/symmetries */\n\n#define AA 1\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nfloat slice_z()\n{\n    //return cos(iTime*0.5)*0.4-0.4; // TWEAK SLICE-PLANE HERE\n    return -0.4;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat ring(vec3 p, vec3 n, float r) // https://www.shadertoy.com/view/MffcWr oriented ring (jt)\n{\n    n = normalize(n);\n    float z = dot(p,n);\n    return length(vec2(length(p - n*z)-r,z));\n}\n\nfloat angle(vec2 p, vec2 c) // based on https://iquilezles.org/articles/distfunctions/\n{\n    c = normalize(c);\n    vec2 q = vec2(abs(p.x), p.y);\n    return length(q-c*max(dot(q,c),0.0))*((q.x*c.y-q.y*c.x<0.0)?-1.0:1.0);\n}\n\nfloat dot2(vec3 v)\n{\n    return dot(v,v);\n}\n\n// returns vector from sphere s0 to center of circle and circle radius\nvec4 sphere_sphere_intersection(vec4 a, vec4 b) // https://www.shadertoy.com/view/M3lBRS sphere sphere intersection (jt)\n{\n    float c = dot2(b.xyz-a.xyz);\n    float e = a.w*a.w;\n    float f = b.w*b.w;\n    return\n        vec4\n        (\n            (b.xyz-a.xyz)*(c-f+e)/c,\n            sqrt((-c*c+2.0*c*e+2.0*c*f-e*e-f*f+2.0*e*f)/c) // WARNING: Intermediate values can become too large (power-of-four)! Rewrite?\n        )\n        /\n        2.0;\n}\n\nvec2 project_on_line(vec3 p, vec3 d)\n{\n    //return vec2(length(p-d*dot(p,d)/dot2(d)),dot(p,d)/length(d));\n    d = normalize(d);\n    return vec2(length(p-d*dot(p,d)),dot(p,d));\n}\n\nfloat sphere_sphere_intersection(vec3 p, vec4 s0, vec4 s1) // https://www.shadertoy.com/view/MXlfRB sphere intersection construction (jt)\n{\n    vec4 q = sphere_sphere_intersection(s0, s1);\n    float a0 = +angle(project_on_line(p-s0.xyz,q.xyz),vec2(q.w,+length(q.xyz)));\n    float a1 = -angle(project_on_line(p-s1.xyz,q.xyz),vec2(q.w,+length(q.xyz)-distance(s0.xyz,s1.xyz)));\n    return\n        a0 > 0.0 && a1 > 0.0\n        ?\n        ring(p-s0.xyz-q.xyz,normalize(q.xyz),q.w)\n        :\n        max(sphere(p-s0.xyz, s0.w),sphere(p-s1.xyz,s1.w));\n}\n\nfloat sphere_sphere_union(vec3 p, vec4 s0, vec4 s1) // https://www.shadertoy.com/view/M3fBRj sphere union (jt)\n{\n    // uncomment to compare with simple minimum union, which breaks sphere interiors (SDF errors marked by white flashing areas).\n    //return min(sphere(p-s0.xyz,s0.w),sphere(p-s1.xyz,s1.w)); // inexact interior if spheres not disjoint\n    if(distance(s0.xyz,s1.xyz) >= s0.w+s1.w) return min(sphere(p-s0.xyz,s0.w),sphere(p-s1.xyz,s1.w)); // Disjoint\n    if(distance(s0.xyz,s1.xyz) + s0.w < s1.w) return sphere(p-s1.xyz,s1.w); // Contained\n    if(distance(s0.xyz,s1.xyz) + s1.w < s0.w) return sphere(p-s0.xyz,s0.w); // Contained\n    vec4 q = sphere_sphere_intersection(s0, s1);\n    float a0 = +angle(project_on_line(p-s0.xyz,q.xyz),vec2(q.w,+length(q.xyz)));\n    float a1 = -angle(project_on_line(p-s1.xyz,q.xyz),vec2(q.w,+length(q.xyz)-distance(s0.xyz,s1.xyz)));\n    return\n        a0 > 0.0 || a1 > 0.0\n        ?\n        min(sphere(p-s0.xyz, s0.w),sphere(p-s1.xyz,s1.w))\n        :\n        -ring(p-s0.xyz-q.xyz,normalize(q.xyz),q.w);\n}\n\nfloat map(vec3 p) // PLACE SDF TO DEBUG HERE\n{\n    float r = 0.5*(0.5+0.5*cos(iTime/3.0)); // smoothness (increase radii and offset)\n    float t = tau*iTime/10.0;\n    vec4 s0 = vec4(0.0,0.0,-1.5,2.0+r);\n    vec4 s1 = vec4(cos(t)*2.5,0.0,-0.3,1.0+r);\n\n    return sphere_sphere_union(p, s0, s1)+r; // For exact union of spheres positive offset results in exact smooth union.\n}\n\nvec3 gradient(vec3 p) // NOT normalized so we can use it's length to detect errors in the SDF.\n{\n    vec2 h = vec2(EPSILON,0);\n    return (vec3(map(p+h.xyy) - map(p-h.xyy),\n                 map(p+h.yxy) - map(p-h.yxy),\n                 map(p+h.yyx) - map(p-h.yyx)))/EPSILON/2.0;\n}\n\nfloat trace(vec3 ro, vec3 rd) // iteration count limited to avoid stalling if ray passes very close to surface\n{\n    float t;\n    uint i;\n    for(i = 0u, t = 0.0; i < ITER_MAX && t < DIST_MAX; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n/*\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons' https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n*/\nvec4 trace_slice(vec3 ro, vec3 rd)\n{\n    vec3 planecolor = vec3(0);\n    // z = ro.z+d*rd.z\n    // z-ro.z = d*rd.z\n    // (z-ro.z)/rd.z = d\n    float dist = (slice_z()-ro.z)/rd.z;\n    if(dist > 0.0)\n    {\n        vec3 dst = ro + rd * dist;\n        float d = map(dst);\n        float n = length(gradient(dst));\n\n        d /= 5.0; // SCALE SDF VISUALIZATION\n\n        // iq's sdf visualization colors\n        planecolor = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n        planecolor *= 1.0 - exp(-24.0 * abs(d));\n        planecolor *= 0.8 + 0.2 * cos(240.0*d);\n        planecolor = mix(planecolor, vec3(1.0), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n\n        planecolor = mix(planecolor, vec3(0,1,0), smoothstep(1.0,1.0-EPSILON, n)); // gradient too small? GREEN\n        planecolor = mix(planecolor, vec3(1,0,0), smoothstep(1.0,1.0+EPSILON, n)); // gradient too large? RED\n        //planecolor = mix(planecolor, vec3(0,0,1), smoothstep(0.0+EPSILON,0.0, n)); // gradient zero? BLUE\n\n        // The error detection is basically, quoting spalmer,\n        // \"one iteration of snap-point-to-(nearest-)surface algorithm\".\n        // Jump the distance given by the SDF at the current position\n        // along the gradient given by the SDF at the current position\n        // (direction to the nearest surface) and evaluate the SDF there.\n        // Because the SDF is supposed to describe the distance to the surface,\n        // the result should be (close to) zero.\n        //float error = map(dst - gradient(dst) * map(dst)); // SDF error detection thanks to spalmer!\n        float distance_towards_nearest_surface = map(dst);\n        vec3 direction_towards_nearest_surface = gradient(dst);\n        float error = map(dst - direction_towards_nearest_surface * distance_towards_nearest_surface);\n#ifdef VERIFY_INTERIOR\n        planecolor += smoothstep(0.0, sqrt(EPSILON),-error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF interior otherwise broken? WHITE, BLINKING (can cause false alarms)\n#endif\n#ifdef VERIFY_EXTERIOR\n        planecolor += smoothstep(0.0, sqrt(EPSILON),+error) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF exterior otherwise broken? WHITE, BLINKING (can cause false alarms)\n#endif\n        //planecolor += smoothstep(0.0,sqrt(EPSILON), abs(error)) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF otherwise broken? WHITE, BLINKING\n#ifdef VERIFY_GRADIENT_CONTINUITY_ALONG\n        vec3 cross_surface_direction = gradient(dst - direction_towards_nearest_surface * (distance_towards_nearest_surface + sign(distance_towards_nearest_surface) * EPSILON));\n        float dir_error = dot(gradient(dst), cross_surface_direction);\n        planecolor += smoothstep(0.0,sqrt(EPSILON), abs(dir_error - 1.0)) * (cos(iTime*2.0*pi)*0.5+0.5); // SDF otherwise broken? WHITE, BLINKING\n#endif\n#ifdef VERIFY_GRADIENT_CONTINUITY_SIDEWAYS\n        //vec3 epsilon = (hash33(dst*100.0) * 2.0 - 1.0) * 0.1/*step-size*/;\n        vec3 epsilon = (hash33(dst*100.0) * 2.0 - 1.0) * 0.01/*step-size*/;\n        //if(abs(dot(gradient(dst-epsilon), gradient(dst+epsilon)) - 1.0) > 0.5/*sensitivity*/)\n        if(abs(dot(gradient(dst-epsilon), gradient(dst+epsilon)) - 1.0) > 0.05/*sensitivity*/)\n            //planecolor.z += 1.0;\n            planecolor += mix(vec3(1,0,1),vec3(0,1,1), 0.5 + 0.5 * cos(iTime * 5.0));\n#endif\n    }\n\n    return vec4(planecolor, dist);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 o = ivec2(0);\n    vec3 sum = vec3(0);\n    for(o.y = 0; o.y < AA; o.y++)\n    {\n        for(o.x = 0; o.x < AA; o.x++)\n        {\n            vec2 uv = (fragCoord.xy + vec2(o) - vec2(AA-1)*0.5) / iResolution.xy;\n            vec2 ndc = 2.0 * uv - 1.0;\n            ndc.x *= float(iResolution.x) / float(iResolution.y);\n            float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n            float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n            mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.05);\n            my = (iMouse.y > 10.0) ? my : 1.25 * pi / 2.0;\n\n            mat2 yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n            vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n            //mat2 Pitch = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n            mat2 pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n            ro.yz = pitch * ro.yz;\n            ro.xy = yaw * ro.xy;\n\n            vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n            rd.yz = pitch * rd.yz;\n            rd.xy = yaw * rd.xy;\n\n            vec4 slice = trace_slice(ro, rd);\n            vec3 scenecolor = vec3(0);\n\n            float dist = trace(ro, rd);\n            if(dist < DIST_MAX)\n            {\n                if(slice.w < 0.0)\n                    slice.w = DIST_MAX;\n                bool above = dist < slice.w;\n                if(above) // view only part above plane (comment-out to view whole shape)\n                {\n                    vec3 dst = ro + rd * dist;\n                    //vec3 dst = ro + rd * (dist - 0.005); // https://www.shadertoy.com/view/dldfW8 \"normal back-off\" method by elenzil\n                    vec3 n = normalize(gradient(dst)); // NOTE: gradient is unnormalized in case of errors!\n\n                    //vec3 lightdir = normalize(vec3(1, 1, 1));\n                    vec3 lightdir = normalize(vec3(0, 0, 1));\n                    vec3 ambient = vec3(0.1);\n                    float diffuse = max(dot(lightdir, n), 0.0);\n                    float specular = pow(max(dot(normalize(lightdir - rd), n), 0.0), 50.0);\n\n                    scenecolor = vec3(.1); // object color\n                    scenecolor = /*specular+*/ (ambient + diffuse) * scenecolor;\n\n                    {\n                        // transform normal to local coordinates\n                        n.xy = n.xy*yaw;\n                        n.yz = n.yz*pitch;\n                        scenecolor = max(scenecolor, smoothstep(0.8, 1.0, length(n.xy))); // rim-light\n                    }\n\n                    scenecolor = sqrt(scenecolor); // approximate gamma\n                }\n            }\n\n            vec3 planecolor = 1.5*slice.xyz*exp2(-slice.w*slice.w/20.0); // workaround: \"fog\" hides moiree pattern\n\n            vec3 color = scenecolor + planecolor; // TRANSPARENT\n            //vec3 color = mix(scenecolor, planecolor, step(slice.w, dist)); // SOLID\n            sum += color;\n        }\n    }\n\n    fragColor = vec4(sum/float(AA*AA), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}