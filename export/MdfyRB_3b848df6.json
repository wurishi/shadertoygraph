{"ver":"0.1","info":{"id":"MdfyRB","date":"1488667497","viewed":311,"name":"Doge","username":"levonchic","description":"Doge!\ndoge doge doge doge doge doge doge doge!","likes":14,"published":1,"flags":96,"usePreview":0,"tags":["sound","visualization","audio","doge","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XtXXzr","filepath":"https://soundcloud.com/tanner-coval/doge-adventure","previewfilepath":"https://soundcloud.com/tanner-coval/doge-adventure","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415\n\nmat2 rotate(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\n    // Editable\n    \n    float radius = iResolution.y * 0.333 * smoothstep(0.0, 1.0, iTime * 1.6);\n    float outline  = 3.0 * (iResolution.y * 0.005);\n    \n    float time_factor = iTime * 2.4;\n    float cs = cos(time_factor * 2.0);\n    float rotation = (sin(time_factor * 0.5) * cs) *0.1818 + -PI * (1.0 - smoothstep(0.0, 1.0, iTime));\n    float scale = 1.0 + sin(time_factor) * cs * 0.25;\n    \n    vec4 inner   = vec4(0.88235295, 0.7647059, 0.3647059, 1.0);\n    vec4 border  = vec4(0.6, 0.4, 0.2, 1.0);\n    vec4 outer   = vec4(1.0, 0.87058824, 0.67058825, 1.0);\n    \n    // Can't touch this\n    radius *= scale;\n    \n    // BG calculator\n    vec2 dist    = fragCoord.xy - iResolution.xy * 0.5;\n    // Get rotation angle [0.0 - 1.0]\n    float angle  = atan(dist.y / dist.x) * 0.1592 + 0.25;\n    if(dist.x <= 0.0)\n        angle += 0.5;\n    \n    int iangle = int(360.0 * angle) + iFrame / 2;\n    if(iangle % 20 <= 10)\n        outer = vec4(1.0);\n    \n    \n    // Circle calculator\n    float dist_center = distance(fragCoord.xy, iResolution.xy * 0.5);\n    if(dist_center < radius) {\n    \t// Doge\n\t\t// doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge\n\t\t// doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge\n\t\t// doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge\n\t\t// doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge\n\t\t// doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge doge\n        // fragCoord = dist_center * vec2(sin(rotation), cos(rotation));       \n        fragColor = inner;\n        \n        vec2 relative = (dist * rotate(sin(rotation) * PI) + vec2(radius / 1.4)) / 1.5;\n        \n        if(relative.x < 0.0 || relative.y < 0.0 || relative.x > radius || relative.y > radius) {\n            fragColor = inner;\n            return;\n        }\n        \n        vec4 resultColor = texture(iChannel0, relative / radius);\n        \n        //if (resultColor.a > 0.0)\n        \tfragColor = resultColor * resultColor.a + (1.0 - resultColor.a) * fragColor;\n        \n        //if(resultColor.w == 0.0 || resultColor.x == 0.0)\n        //    fragColor = inner;\n    } else if(dist_center < radius + outline) {\n        float scalar = 1.0 - 2.0 * abs(dist_center - radius - outline * 0.5) / outline;\n        fragColor = border * scalar;\n        if(dist_center < radius + outline / 2.0)\n       \t\tfragColor += inner * (1.0 - scalar);\n        else \n       \t\tfragColor += outer * (1.0 - scalar);\n    }\n\telse \n        fragColor = outer;\n    \n    // 2 Days of work\n    // 4 Attempts of binary generator debugs\n    // 3 Cups of coffe\n    // 1 Doge!\n    \n    // Updated doge\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragCoord *= vec2(WIDTH, HEIGHT) / iResolution.xy;\n    ivec2 frag = ivec2(fragCoord);\n    \n    if (frag.x >= WIDTH || frag.y >= HEIGHT /* || iFrame > 2 */) {\n        //fragColor = texelFetch(iChannel0, frag, 0);\n        return;\n    } else {       \n\n        int px = frag.y * WIDTH + frag.x;\n        int pind = px / POINTS4INT;\n        int bind = px % POINTS4INT;\n\n        fragColor = palette[(matrix[pind] >> (bind * COLORBITS)) & COLORMASK];\n        //fragColor *= fragColor.a;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define WIDTH 47\n#define HEIGHT 51\n#define COLORS 16\n#define COLORBITS 4\n#define COLORMASK 15\n#define POINTS4INT 8\n#define INTPERFRAME 300\n#define FRAMES 1\n\nvec4[16] palette = vec4[16] (\n\tvec4(0.8823529411764706, 0.7647058823529411, 0.36470588235294116, 1.0),\n\tvec4(1.0, 0.8705882352941177, 0.6705882352941176, 1.0),\n\tvec4(1.0, 1.0, 0.0, 0.0),\n\tvec4(0.7176470588235294, 0.5176470588235295, 0.3176470588235294, 1.0),\n\tvec4(0.7647058823529411, 0.6470588235294118, 0.24705882352941178, 1.0),\n\tvec4(0.0, 0.0, 0.0, 1.0),\n\tvec4(0.6, 0.4, 0.2, 1.0),\n\tvec4(0.35294117647058826, 0.35294117647058826, 0.35294117647058826, 1.0),\n\tvec4(0.6470588235294118, 0.6470588235294118, 0.6470588235294118, 1.0),\n\tvec4(1.0, 1.0, 1.0, 1.0),\n\tvec4(0.0, 0.0, 0.0, 1.0),\n\tvec4(0.0, 0.0, 0.0, 1.0),\n\tvec4(0.0, 0.0, 0.0, 1.0),\n\tvec4(0.0, 0.0, 0.0, 1.0),\n\tvec4(0.0, 0.0, 0.0, 1.0),\n\tvec4(0.0, 0.0, 0.0, 1.0)\n);\n\nint[300] matrix = int[300] (\n\n\n// Frame 0\n\t0x22222222,\n\t0x44444222,\n\t0x44444444,\n\t0x22222224,\n\t0x22222222,\n\t0x22222222,\n\t0x22222222,\n\t0x44444444,\n\t0x44444444,\n\t0x22222244,\n\t0x22222222,\n\t0x22222222,\n\t0x44222222,\n\t0x11333344,\n\t0x43333111,\n\t0x22222244,\n\t0x22222222,\n\t0x22222222,\n\t0x44442222,\n\t0x11111113,\n\t0x33111111,\n\t0x22222244,\n\t0x22222222,\n\t0x22222222,\n\t0x13344422,\n\t0x11111111,\n\t0x31111111,\n\t0x22222244,\n\t0x22222222,\n\t0x22222222,\n\t0x11114444,\n\t0x11111111,\n\t0x31111111,\n\t0x40000044,\n\t0x22222222,\n\t0x44222222,\n\t0x111114,\n\t0x11000000,\n\t0x11111111,\n\t0x40000011,\n\t0x22222244,\n\t0x14422222,\n\t0x1111,\n\t0x11000000,\n\t0x11111111,\n\t0x40000011,\n\t0x22222244,\n\t0x11132222,\n\t0x1,\n\t0x11100000,\n\t0x11111111,\n\t0x40000001,\n\t0x22222444,\n\t0x1111222,\n\t0x0,\n\t0x11111000,\n\t0x11111111,\n\t0x40000001,\n\t0x22224443,\n\t0x11113,\n\t0x0,\n\t0x11111110,\n\t0x11111111,\n\t0x40000011,\n\t0x32244334,\n\t0x111,\n\t0x11111100,\n\t0x11111111,\n\t0x11111111,\n\t0x40000011,\n\t0x11324433,\n\t0x11000011,\n\t0x11111111,\n\t0x11111111,\n\t0x11111111,\n\t0x44000001,\n\t0x11132433,\n\t0x11111000,\n\t0x11111111,\n\t0x11111111,\n\t0x11111111,\n\t0x34000001,\n\t0x1111333,\n\t0x88883311,\n\t0x11331188,\n\t0x11111111,\n\t0x11111111,\n\t0x64000001,\n\t0x11111136,\n\t0x77777883,\n\t0x11111187,\n\t0x11111111,\n\t0x11111111,\n\t0x63400000,\n\t0x73111113,\n\t0x55557777,\n\t0x11111187,\n\t0x11111111,\n\t0x11111111,\n\t0x16340000,\n\t0x77551111,\n\t0x58888555,\n\t0x11111885,\n\t0x11111111,\n\t0x1111111,\n\t0x11630000,\n\t0x75577311,\n\t0x11111887,\n\t0x11111155,\n\t0x11111111,\n\t0x111111,\n\t0x11163000,\n\t0x88558881,\n\t0x11111718,\n\t0x11111111,\n\t0x11111111,\n\t0x11111,\n\t0x11113400,\n\t0x18555580,\n\t0x11111111,\n\t0x11111111,\n\t0x11111111,\n\t0x1111,\n\t0x1111340,\n\t0x71555555,\n\t0x11117171,\n\t0x11100001,\n\t0x11111111,\n\t0x111,\n\t0x50111134,\n\t0x11555555,\n\t0x111111,\n\t0x11000000,\n\t0x11111111,\n\t0x40000001,\n\t0x75011113,\n\t0x11115777,\n\t0x111,\n\t0x10000000,\n\t0x11111111,\n\t0x34000000,\n\t0x55031111,\n\t0x11110055,\n\t0x55550001,\n\t0x0,\n\t0x111111,\n\t0x13400000,\n\t0x30111,\n\t0x1111000,\n\t0x55555500,\n\t0x0,\n\t0x1110,\n\t0x11230000,\n\t0x30011,\n\t0x0,\n\t0x55555595,\n\t0x0,\n\t0x0,\n\t0x11323000,\n\t0x550001,\n\t0x95000000,\n\t0x15559959,\n\t0x1,\n\t0x0,\n\t0x11132200,\n\t0x559500,\n\t0x95100000,\n\t0x11155559,\n\t0x0,\n\t0x0,\n\t0x1113220,\n\t0x559950,\n\t0x95110000,\n\t0x41111599,\n\t0x0,\n\t0x0,\n\t0x13222,\n\t0x55595,\n\t0x55110000,\n\t0x4111115,\n\t0x0,\n\t0x23000000,\n\t0x10003222,\n\t0x11551,\n\t0x11110000,\n\t0x31111,\n\t0x0,\n\t0x22230000,\n\t0x11000322,\n\t0x1111,\n\t0x11111000,\n\t0x4111,\n\t0x0,\n\t0x22223003,\n\t0x11000322,\n\t0x4000111,\n\t0x11111000,\n\t0x44,\n\t0x30000000,\n\t0x22222230,\n\t0x11000032,\n\t0x340011,\n\t0x111100,\n\t0x0,\n\t0x33300000,\n\t0x22222222,\n\t0x2,\n\t0x34000,\n\t0x0,\n\t0x0,\n\t0x22033000,\n\t0x22222222,\n\t0x3,\n\t0x44000,\n\t0x0,\n\t0x0,\n\t0x22303600,\n\t0x22222222,\n\t0x3,\n\t0x4400,\n\t0x0,\n\t0x0,\n\t0x22234366,\n\t0x22222222,\n\t0x3,\n\t0x4300,\n\t0x0,\n\t0x60000000,\n\t0x22223436,\n\t0x22222222,\n\t0x2,\n\t0x4400,\n\t0x0,\n\t0x66600000,\n\t0x22223043,\n\t0x22222222,\n\t0x13,\n\t0x0,\n\t0x0,\n\t0x36666300,\n\t0x22222304,\n\t0x12222222,\n\t0x1,\n\t0x0,\n\t0x0,\n\t0x43666633,\n\t0x22222230,\n\t0x11222222,\n\t0x300,\n\t0x0,\n\t0x43400000,\n\t0x4366633,\n\t0x22222223,\n\t0x1122222,\n\t0x33330000,\n\t0x33322223,\n\t0x44300033,\n\t0x30433633,\n\t0x22222222,\n\t0x112222,\n\t0x23300000,\n\t0x22222222,\n\t0x44600033,\n\t0x23043363,\n\t0x22222222,\n\t0x11222,\n\t0x22223000,\n\t0x22222222,\n\t0x34460033,\n\t0x22304436,\n\t0x22222222,\n\t0x11122,\n\t0x22222200,\n\t0x22222222,\n\t0x34463033,\n\t0x22230443,\n\t0x22222222,\n\t0x30011132,\n\t0x22222222,\n\t0x22222222,\n\t0x44463032,\n\t0x22222304,\n\t0x22222222,\n\t0x22301132,\n\t0x22222222,\n\t0x22222222,\n\t0x4463032,\n\t0x22222220,\n\t0x22222222,\n\t0x22223132,\n\t0x22222222,\n\t0x22222222,\n\t0x30003033,\n\t0x22222222,\n\t0x22222222,\n\t0x22222232,\n\t0x22222222,\n\t0x22222222,\n\t0x23366333,\n\t0x22222\n);","name":"Common","description":"","type":"common"}]}