{"ver":"0.1","info":{"id":"XcGcWD","date":"1731848029","viewed":18,"name":"behoney - Day 2 (wip)","username":"behoney","description":"2D, Rect","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["track"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float turnAroundTime = 2.0;\n    vec2 rectSize = vec2(200.0); // Define rectangle size\n\n    float posX = 0.0;\n    float posY = 0.0;\n    float wrappedTime = mod(iTime, turnAroundTime);\n\n    if (0.0 <= wrappedTime && wrappedTime < turnAroundTime * 0.25) {\n        // sliding top edge (left to right)\n        posX = wrappedTime / (turnAroundTime * 0.25);\n        posY = 0.0;\n    } else if (turnAroundTime * 0.25 <= wrappedTime && wrappedTime < turnAroundTime * 0.50) {\n        // sliding right edge (top to bottom)\n        posX = 1.0;\n        posY = wrappedTime / (turnAroundTime * 0.25);\n    } else if (turnAroundTime * 0.5 <= wrappedTime && wrappedTime < turnAroundTime * 0.75) {\n        // sliding bottom edge (right to left)\n        posX = 1.0 - (wrappedTime - turnAroundTime * 0.5) / (turnAroundTime * 0.25);\n        posY = 1.0;\n    } else if (turnAroundTime * 0.75 <= wrappedTime)\n    {\n        // sliding left edge (bottom to top)\n        posX = 0.0;\n        posY = 1.0 - (wrappedTime - turnAroundTime * 0.75) / (turnAroundTime * 0.25);\n    }\n    \n    // Adjust rectPos based on posX and posY\n    vec2 rectPos = vec2(\n        posX * iResolution.x,\n        posY * iResolution.y\n    );\n    \n    // Calculate the distance from the rectangle's center to the fragment coordinate\n    vec2 halfSize = rectSize * 0.5;\n    vec2 rectUV = abs(uv * iResolution.xy - rectPos) - halfSize;\n    \n    // Use step function to create the rectangle with border\n    vec3 rectColor = vec3(\n        step(max(rectUV.x, rectUV.y), 0.0)\n    );\n    \n    // Output to screen\n    fragColor = vec4(col + rectColor,1.0);\n}","name":"Image","description":"","type":"image"}]}