{"ver":"0.1","info":{"id":"fssXD4","date":"1618680567","viewed":198,"name":"Audio pulsar","username":"atutahi","description":"radial audio pulse thingy","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["audioreactive"],"hasliked":0,"parentid":"7s23DK","parentname":"FFT square shape"},"renderpass":[{"inputs":[{"id":"MlfSRS","filepath":"https://soundcloud.com/pnl_music/blanka","previewfilepath":"https://soundcloud.com/pnl_music/blanka","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Catmull_Rom(float x, float v0,float v1, float v2,float v3) \n{\n\tfloat c2 = -.5 * v0\t+ 0.5*v2;\n\tfloat c3 = v0\t\t+ -2.5*v1 + 2.0*v2 + -.5*v3;\n\tfloat c4 = -.5 * v0\t+ 1.5*v1 + -1.5*v2 + 0.5*v3;\n\treturn(((c4 * x + c3) * x + c2) * x + v1);\n}\n\nfloat sampleFFT(float fftCoord)\n{\n    float atten = smoothstep(0.0, 0.05, 1.0 - fftCoord) * smoothstep(0.0, 0.05, fftCoord); \n    return atten * texture( iChannel0, vec2(fftCoord,0.25) ).x;\n}\n\nvec2 opRep( in vec2 p, in vec2 c)\n{\n    return mod(p+0.5*c,c)-0.5*c;\n}\n\n#define PI 3.14159\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x /= iResolution.y / iResolution.x;\n    uv += 0.3 * vec2(sin(-iTime * 0.3), cos(iTime * 0.5));\n    // second texture row is the sound wave\n    \n\tfloat wave = texture( iChannel0, vec2(0.5,0.75) ).x;\n    \n    float angle = atan(uv.y, uv.x);  // atan2\n    vec2 range = vec2(-PI, PI);  // The range of atan2 is [-pi / 1; pi / 1]\n    float theta = smoothstep(range[0], range[1], angle);  // Normalize the range of atan to [0;1]\n    theta = mod(theta + iTime * 0.05, 1.0);\n    \n    float ro = length(uv);\n    ro *= 3.0 - 0.2 * clamp(0.0, 1.0, (pow(wave, 0.4)));\n    uv = vec2(theta, ro);\n    \n    uv.y -= iTime * 0.65;\n    uv.y = opRep(uv, vec2(1.5)).y;\n        \n    // Small perturbation of base circle\n    uv.y += 0.005 * (sin(-iTime * 1.8 + theta * 8.0 * PI) + sin(iTime * 4.0 + theta * 32.0 * PI));\n        \n    float fftFreq = wave * clamp(0.0, 1.0, ro * 1.0) * 2.0 + 64.0;//10.0 + wave * 128.0;\n    float fftX = floor(uv.x * fftFreq);\n    float fftCoord1 = clamp(0.0, 1.0, fftX / fftFreq);\n\tfloat fft1 = sampleFFT(fftCoord1);\n    \n    float fftCoord = (fftX - 1.0) / fftFreq;\n    float fft = sampleFFT(fftCoord);\n    \n    float fftCoord2 = (fftX + 1.0) / fftFreq;\n    float fft2 = sampleFFT(fftCoord2);       \n    \n    float fftCoord3 = (fftX + 2.0) / fftFreq;\n    float fft3 = sampleFFT(fftCoord3);       \n    \n    float f = 0.6 * Catmull_Rom(fract(uv.x * fftFreq), fft, fft1, fft2, fft3); \n\n    float s = (0.01 + 1.6 * f) / abs(f-uv.y);\n    s = pow(s, 2.0 - wave * 0.6 - ro * 0.45 * (0.8 + 0.4 * wave));\n    s *= smoothstep(0.8, 0.0, uv.y);\n    s *= smoothstep(0.8, 0.0, -uv.y);\n    \n\tcol += s;\n    col += 1.0 - smoothstep(0.0, 0.1, ro);\n    //col += fft - uv.y;\n    col *= vec3(0.1 + f * 1.5, 0.2,1.0 - f * 1.0);\n   \n\t// output final color\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}