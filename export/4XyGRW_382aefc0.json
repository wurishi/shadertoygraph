{"ver":"0.1","info":{"id":"4XyGRW","date":"1717443608","viewed":82,"name":"GBL Flag","username":"Lord_Hypersonic","description":"Gameberry Lab's Flag\nProcedurally generated","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["procedural","flag","gameberry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 FLAG_COLOR = vec3(88.0, 28.0, 88.0) / 255.0;\n\nvec3 LOGO_BG_SHADOW_COLOR = vec3(50.0, 16.0, 50.0) / 255.0;\nvec3 LOGO_BG_HEIGHT_COLOR = vec3(184.0, 29.0, 93.0) / 255.0;\nvec3 LOGO_BG_HIGHLIGHT_COLOR = vec3(255.0, 110.0, 177.0) / 255.0;\nvec3 LOGO_BG_COLOR = vec3(224.0, 43.0, 126.0) / 255.0;\n\nvec3 LOGO_CIRCLE_DROP_SHADOW_COLOR = vec3(175.0, 34.0, 98.0) / 255.0;\nvec3 LOGO_CIRCLE_HIGHLIGHT_COLOR = vec3(253.0, 166.0, 206.0) / 255.0;\nvec3 LOGO_CIRCLE_COLOR = vec3(255.0, 110.0, 177.0) / 255.0;\n\nvec3 LOGO_LEAF_DROP_SHADOW = vec3(15.0, 132.0, 78.0) / 255.0;\nvec3 LOGO_LEAF_DARK_COLOR = vec3(24.0, 170.0, 103.0) / 255.0;\nvec3 LOGO_LEAF_LIGHT_COLOR = vec3(101.0, 229.0, 41.0) / 255.0;\n\nfloat smin( float a, float b, float k )\n{\n    k *= 6.0;\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min(a,b) - h*h*h*k*(1.0/6.0);\n}\n\nfloat sdBox( in vec2 p, in vec2 b, float r)\n{\n    vec2 d = abs(p)-b+r;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0) - r;\n}\n\nfloat sdCircle( vec2 p, float r )\n{\n    return length(p) - r;\n}\n\nfloat sdOrientedVesica( vec2 p, vec2 a, vec2 b, float w )\n{\n    float r = 0.5*length(b-a);\n    float d = 0.5*(r*r-w*w)/w;\n    vec2 v = (b-a)/r;\n    vec2 c = (b+a)*0.5;\n    vec2 q = 0.5*abs(mat2(v.y,v.x,-v.x,v.y)*(p-c));\n    vec3 h = (r*q.x<d*(q.y-r)) ? vec3(0.0,r,0.0) : vec3(-d,0.0,d+w);\n    return length( q-h.xy) - h.z;\n}\n\nfloat sdTriangle( in vec2 p, in vec2 p0, in vec2 p1, in vec2 p2 )\n{\n    vec2 e0 = p1-p0, e1 = p2-p1, e2 = p0-p2;\n    vec2 v0 = p -p0, v1 = p -p1, v2 = p -p2;\n    vec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n    vec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n    vec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    float s = sign( e0.x*e2.y - e0.y*e2.x );\n    vec2 d = min(min(vec2(dot(pq0,pq0), s*(v0.x*e0.y-v0.y*e0.x)),\n                     vec2(dot(pq1,pq1), s*(v1.x*e1.y-v1.y*e1.x))),\n                     vec2(dot(pq2,pq2), s*(v2.x*e2.y-v2.y*e2.x)));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nmat2 rotationMatrix(float angle)\n{\n    angle *= 0.0174533;\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nvec4 drawGblLogoCircle(vec2 uv, vec2 scaleAdjustment, vec2 position, float radius)\n{\n    vec4 outputColor = vec4(0.0);\n    uv *= scaleAdjustment;\n    float embossAdjustment = 0.015;\n    \n    float highlight = sdCircle(uv - position - vec2(0.0, embossAdjustment), radius);\n    highlight = smoothstep(fwidth(highlight), -fwidth(highlight), highlight);\n    vec4 highlightColor = vec4(LOGO_CIRCLE_HIGHLIGHT_COLOR, highlight);\n    \n    float height = sdCircle(uv - position + vec2(0.0, embossAdjustment), radius);\n    height = smoothstep(fwidth(height), -fwidth(height), height);\n    vec4 heightColor = vec4(LOGO_CIRCLE_DROP_SHADOW_COLOR, height);\n    \n    float circle = sdCircle(uv - position, radius);\n    circle = smoothstep(fwidth(circle), -fwidth(circle), circle);\n    \n    outputColor = mix(highlightColor, heightColor, heightColor.a);\n    outputColor = mix(outputColor, vec4(LOGO_CIRCLE_COLOR, 1.0), circle);\n    \n    return outputColor;\n}\n\nvec4 drawGblLogoLeaf(vec2 uv)\n{\n    vec4 outputColor = vec4(0.0);\n    \n    //Drawing Leaf's Height\n    vec2 leftLeafHeightBottomPointPos = vec2(0.0, 0.26);\n    vec2 leftLeafHeightTopPointPos = vec2(-0.24, 0.55);\n    float leftLeafHeightThickness = 0.1;\n    float leftLeafHeight = sdOrientedVesica(uv, leftLeafHeightBottomPointPos, leftLeafHeightTopPointPos, leftLeafHeightThickness);\n\n    vec2 rightLeafHeightBottomPointPos = vec2(0.04, 0.26);\n    vec2 rightLeafHeightTopPointPos = vec2(0.2, 0.5);\n    float rightLeafHeightThickness = 0.08;\n    float rightLeafHeight = sdOrientedVesica(uv, rightLeafHeightBottomPointPos, rightLeafHeightTopPointPos, rightLeafHeightThickness);\n\n    float leafHeight = min(leftLeafHeight, rightLeafHeight);\n    leafHeight = smoothstep(\n                            fwidth(leafHeight),\n                            -fwidth(leafHeight), \n                            leafHeight\n                           );\n    outputColor = mix(outputColor, vec4(LOGO_LEAF_DROP_SHADOW, 1.0), leafHeight);\n    \n    //Drawing Leaf's Half Color Part-1\n    vec2 leftLeafBottomPointPos = vec2(0.0, 0.28);\n    vec2 leftLeafTopPointPos = vec2(-0.24, 0.57);\n    float leftLeafThickness = 0.1;\n    float leftLeaf = sdOrientedVesica(uv, leftLeafBottomPointPos, leftLeafTopPointPos, leftLeafThickness);\n\n    vec2 rightLeafBottomPointPos = vec2(0.04, 0.28);\n    vec2 rightLeafTopPointPos = vec2(0.2, 0.52);\n    float rightLeafThickness = 0.08;\n    float rightLeaf = sdOrientedVesica(uv, rightLeafBottomPointPos, rightLeafTopPointPos, rightLeafThickness);\n\n    float leafPart1 = min(leftLeaf, rightLeaf);\n    leafPart1 = smoothstep(\n                            fwidth(leafPart1),\n                            -fwidth(leafPart1), \n                            leafPart1\n                           );\n    outputColor = mix(outputColor, vec4(LOGO_LEAF_DARK_COLOR, 1.0), leafPart1);\n    \n    //Leaf's light color masking\n    float lightColorMask = sdTriangle(uv, vec2(0.02, 0.25), vec2(-0.24, 0.57), vec2(0.2, 0.52));\n    lightColorMask = smoothstep(fwidth(lightColorMask), -fwidth(lightColorMask), lightColorMask);\n    lightColorMask *= leafPart1;\n    outputColor = mix(outputColor, vec4(LOGO_LEAF_LIGHT_COLOR, 1.0), lightColorMask);\n    return outputColor;\n}\n\nvec4 drawGblLogo(vec2 uv, vec2 position)\n{\n    vec4 outputColor = vec4(0.0);\n    \n    uv /= 1.0;\n    //Values\n    vec2 bgSize = vec2(0.42, 0.25);\n    vec2 topBgSize = bgSize + vec2(0.0, 0.0);\n    vec2 bottomBgSize = bgSize + vec2(0.0, 0.01);\n    float topBgRoundness = 0.16;\n    float bottomBgRoundness = 0.25;\n    vec2 topBgPos = vec2(0.0, 0.0);\n    vec2 bottomBgPos = vec2(0.0, -0.18);\n    \n    //Logo's background shadow \n    float bgShadowBlur = 0.05;\n    vec2 topBgShadowSize = topBgSize + vec2(0.0, 0.0);\n    vec2 bottomBgShadowSize = bottomBgSize + vec2(0.0, 0.0);\n    vec2 shadowPosition = vec2(0.0, -0.03);\n    float bgShadowBottom = sdBox(uv - bottomBgPos - shadowPosition, bottomBgShadowSize, bottomBgRoundness);\n    float bgShadowTop = sdBox(uv - topBgPos - shadowPosition, topBgShadowSize, topBgRoundness);\n    vec2 a1 = vec2(0.0, 0.26);\n    vec2 b1 = vec2 (-0.24, 0.55);\n    float w1 = 0.1;\n    float leftLeafShadow = sdOrientedVesica(uv, a1, b1, w1);\n    vec2 a2 = vec2(0.04 , 0.26);\n    vec2 b2 = vec2 (0.2, 0.5);\n    float w2 = 0.08;\n    float rightLeafShadow = sdOrientedVesica(uv, a2, b2, w2);\n    \n    float bgShadow = min(bgShadowBottom, bgShadowTop);\n    bgShadow = min(bgShadow, min(leftLeafShadow, rightLeafShadow));\n    \n    bgShadow = smoothstep(\n                              fwidth(bgShadow) + bgShadowBlur,\n                             -fwidth(bgShadow) - bgShadowBlur,\n                              bgShadow\n                             );\n    outputColor = vec4(LOGO_BG_SHADOW_COLOR, 1.0) * bgShadow * 0.5;\n    \n    //Logo's background Highlight and hight (Embossment)\n    float bgHeight = sdBox(uv - bottomBgPos, bottomBgSize, bottomBgRoundness);\n    float bgHighlight = sdBox(uv - topBgPos, topBgSize, topBgRoundness);\n    float bgEmboss = min(bgHeight, bgHighlight);\n    \n    float bgHeightSharp = smoothstep(fwidth(bgHeight), -fwidth(bgHeight), bgHeight);\n    float bgHighlightSharp = smoothstep(fwidth(bgHighlight), -fwidth(bgHighlight), bgHighlight);\n    \n    bgEmboss = smoothstep(fwidth(bgEmboss), -fwidth(bgEmboss), bgEmboss);\n    vec3 bgEmbossColor = max(\n                             LOGO_BG_HEIGHT_COLOR * bgHeightSharp, \n                             LOGO_BG_HIGHLIGHT_COLOR * bgHighlightSharp\n                            );\n    outputColor = mix(outputColor, vec4(bgEmbossColor, 1.0), bgEmboss);\n    \n    //Logo's Background\n    float topBottomPadding = 0.023;\n    float bgTop = sdBox(uv - vec2(topBgPos.x, topBgPos.y - topBottomPadding), topBgSize, topBgRoundness);\n    float bgBottom = sdBox(uv - vec2(bottomBgPos.x, bottomBgPos.y + topBottomPadding), bottomBgSize, bottomBgRoundness);\n    float bg = min(bgTop, bgBottom);\n    bg = smoothstep(fwidth(bg), -fwidth(bg), bg);\n    outputColor = mix(outputColor, vec4(LOGO_BG_COLOR, 1.0), bg);\n    \n    //Logo's Circle\n    vec2 circleScaleAdjust = vec2(0.95, 1.0);\n    float circleRadius = 0.08;\n    vec4 logoCircleTop = drawGblLogoCircle(uv, circleScaleAdjust, vec2(0.0, 0.04), circleRadius);\n    vec4 logoCircleBottom = drawGblLogoCircle(uv, circleScaleAdjust, vec2(0.0, -0.25), circleRadius);\n    vec4 logoCircleRight = drawGblLogoCircle(uv, circleScaleAdjust, vec2(0.18, -0.1), circleRadius);\n    vec4 logoCircleLeft = drawGblLogoCircle(uv, circleScaleAdjust, vec2(-0.18, -0.1), circleRadius);\n    outputColor = mix(outputColor, logoCircleTop, logoCircleTop.a);\n    outputColor = mix(outputColor, logoCircleBottom, logoCircleBottom.a);\n    outputColor = mix(outputColor, logoCircleRight, logoCircleRight.a);\n    outputColor = mix(outputColor, logoCircleLeft, logoCircleLeft.a);\n    \n    //Logo's Leaf\n    vec4 leaf = drawGblLogoLeaf(uv);\n    outputColor = mix(outputColor, leaf, leaf.a);\n    \n    return outputColor;\n}\n\nvec3 drawGblFlag(vec2 uv)\n{\n    vec3 col = FLAG_COLOR;\n    vec4 gblLogo = drawGblLogo(uv, vec2(0.0));\n    col = mix(col, gblLogo.rgb, gblLogo.a);\n    \n    //making color black if uv goes outside the range of (-1, 1)\n    col *= smoothstep(0.01, 0.0, uv.y - 1.0);\n    col *= smoothstep(0.0, 0.01, uv.y + 1.0);\n    col *= smoothstep(0.8, 0.75, uv.x - 1.0);\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv = fract(uv*1.0);\n    vec2 shapeUV = (uv - 0.5) * 2.0;\n    shapeUV *= vec2(iResolution.x / iResolution.y, 1.0);\n    //scaling\n    shapeUV *= 1.1;\n    //cloth sim start\n    float t = shapeUV.x * 3.0 - iTime * 5.0;\n    shapeUV.y += sin(t) * 0.1 * uv.x;\n    //cloth sim end\n    vec3 col = drawGblFlag(shapeUV);\n    //cloth sim light/shading\n    col *= 0.92 + cos(t + shapeUV.y * 2.0) * 0.08 * pow(uv.x, 0.2);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}