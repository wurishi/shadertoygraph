{"ver":"0.1","info":{"id":"4dcczr","date":"1517714585","viewed":607,"name":"Soft Life","username":"dexterwritescode","description":"Cloudy","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["shaderclub"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0, uv);\n   \n    float col = 0.0;\n    \n    \n   \tcol = texture(iChannel0, uv).g * 0.01;\n    \n\n    fragColor = vec4(hsv2rgb(vec3(col + 0.7, 1.0, 0.9)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat getState(vec2 pos) {\n\treturn texture(iChannel1, pos).r > 0.2 ? 1.0 : 0.0;   \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{      \n    vec2 st = fragCoord.st/iResolution.st;\n    \n    vec2 texel = 1.0/iResolution.xy;\n    \n    vec2 offset[9];\n    \n    offset[0] = vec2(-texel.x, -texel.y);\n    offset[1] = vec2(     0.0, -texel.y);\n    offset[2] = vec2( texel.x, -texel.y);\n    offset[3] = vec2(-texel.x,      0.0);\n    offset[4] = vec2(     0.0,      0.0);\n    offset[5] = vec2( texel.x,      0.0);\n    offset[6] = vec2(-texel.x,  texel.y);\n    offset[7] = vec2(     0.0,  texel.y);\n    offset[8] = vec2( texel.x,  texel.y);\n    \n    float sum = 0.0;\n    \n    float state = getState(st);\n\tfloat times_alive = texture(iChannel1, st).g;\n    float consecutive_times_alive = texture(iChannel1, st).b;\n    \n    for (int i = 0; i < 9; i++){\n        sum += getState(st + offset[i]);\n    }\n    \n    sum -= state;\n    float next = state;\n    \n    if ( state == 1.0 ) {\n        if (( sum < 2.0 ) || ( sum > 3.0 )) {\n            next = 0.0;\n        } else if (( sum == 2.0 ) || ( sum == 3.0 )) {\n         \tnext = 1.0;   \n        }\n    } else {\n        if ( sum == 3.0 ) {\n        \tnext = 1.0;   \n        }\n    }\n    \n    if ( next == 1.0 ) {\n    \ttimes_alive += 1.0;   \n    }\n    \n    if( state == next && state == 1.0) {\n    \tconsecutive_times_alive += 1.0;   \n    } else {\n        consecutive_times_alive = 0.0;\n    }\n    \n    times_alive *= 0.99;\n    vec4 color = vec4(0.0);\n    \n   \tif (iFrame <= 10 || iMouse.z > 0.0) {\n        color = vec4(texture(iChannel0, st).r, 0.0, 0.0, 1.0);\n    } else {\n    \tcolor = vec4(next, times_alive, state, 1.0);   \n    }\n        \n    \n    fragColor = color;\n}\n\n\n\n","name":"Buf A","description":"","type":"buffer"}]}