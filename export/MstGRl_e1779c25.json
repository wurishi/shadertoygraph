{"ver":"0.1","info":{"id":"MstGRl","date":"1451818833","viewed":2796,"name":"Worley-Noise","username":"tobspr","description":"Simple implementation of Worley Noise. Can be used for clouds, stones, etc ...","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","worley"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// Determines how many cells there are\n#define NUM_CELLS 16.0\n\n// Arbitrary random, can be replaced with a function of your choice\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n// Returns the point in a given cell\nvec2 get_cell_point(ivec2 cell) {\n\tvec2 cell_base = vec2(cell) / NUM_CELLS;\n\tfloat noise_x = rand(vec2(cell));\n    float noise_y = rand(vec2(cell.yx));\n    return cell_base + (0.5 + 1.5 * vec2(noise_x, noise_y)) / NUM_CELLS;\n}\n\n// Performs worley noise by checking all adjacent cells\n// and comparing the distance to their points\nfloat worley(vec2 coord) {\n    ivec2 cell = ivec2(coord * NUM_CELLS);\n    float dist = 1.0;\n    \n    // Search in the surrounding 5x5 cell block\n    for (int x = 0; x < 5; x++) { \n        for (int y = 0; y < 5; y++) {\n        \tvec2 cell_point = get_cell_point(cell + ivec2(x-2, y-2));\n            dist = min(dist, distance(cell_point, coord));\n\n        }\n    }\n    \n    dist /= length(vec2(1.0 / NUM_CELLS));\n    dist = 1.0 - dist;\n    return dist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n\tfragColor = vec4(worley(uv));\n}","name":"","description":"","type":"image"}]}