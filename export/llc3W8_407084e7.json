{"ver":"0.1","info":{"id":"llc3W8","date":"1468993055","viewed":380,"name":"[SH16C] River Raid (In progress)","username":"vug","description":"(Work in progress) River Raid.\n\nUP to accelerate. DOWN to slow down. LEFT to go left. RIGHT to go right. SPACE to fire.","likes":4,"published":1,"flags":56,"usePreview":0,"tags":["shadertoycompetition","80sgame"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(texture(iChannel0, uv).xyz, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* \n  Game state storing, controller input ideas/code taken from \n  \"Bricks Game\" https://www.shadertoy.com/view/MddGzf\n\n  TODO\n  + Classic River Raid engine sound\n  + river/land generation\n  + static enemies\n  + moving enemies\n  + bullet\n  ~ plane/bullet hit detection with enemies\n  - Because enemy coordinates are generated via a hash function\n    I don't know how to erase them after hit detection with bullet.\n    Maybe I should save their coordinates in game state variables\n    With a constraint up to N enemies possible on the screen.\n  -- have 4 enemy positions\n  -- give them initial y values\n  -- whenever one of the y values falls behind \"travelled\", or hit by bullet\n     givem them a new y-value that is higher than biggest y-value\n  - fix enemy distortions at diagonals\n*/\n\n// storage register/texel addresses\nconst vec2 txGameState = vec2(0.0,0.0);\nconst vec2 txPlanePos = vec2(1.0,0.0);\nconst vec2 txPlaneSpeed = vec2(2.0,0.0);\nconst vec2 txTravelled = vec2(3.0,0.0);\nconst vec2 txSpaceReleased = vec2(4.0,0.0);\nconst vec2 txBulletFired = vec2(5.0,0.0);\nconst vec2 txBulletPos = vec2(6.0,0.0);\n\n// state storage related functions\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\n\nvec4 loadValue( in vec2 re )\n{\n    return texture( iChannel0, (0.5+re) / iChannelResolution[0].xy, -100.0 );\n}\n\nvoid storeValue( in vec2 re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = ( isInside(fragCoord,re) > 0.0 ) ? va : fragColor;\n}\n\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\nfloat hash1( float n ) { return fract(sin(n)*138.5453123); }\n\n/* y is distance travelled from starting point */\nfloat riverWidth(float y) { // half width actually\n    float section = floor(y * 0.5); // divide map into sections\n    float f = fract(y * 0.5); // position in the section\n    \n    float currWidth = nrand(vec2(section, 0.1)); // width of current section\n    float prevWidth = nrand(vec2(section - 1.0, 0.1)); // width of previous section\n    \n    float m = (f > 0.9) ? (f - 0.9) * 10.0 : 0.0; // make the width change in the last 0.1th of a section\n    m = floor(m * 5.) / 5.; // make it pixellated (not a straight line)\n    return mix(prevWidth, currWidth, m) + 0.2; // minimum width is 0.2\n}\n\n\n// Constants\nconst vec3 riverColor = vec3(0.16078431,  0.18823529,  0.74117647);\nvec3 planeColor = vec3(0.93333333,  0.93333333,  0.26666667);\nconst vec3 landColor = vec3(0.43137255,  0.61176471,  0.25882353);\nconst vec2 planeDim = vec2(0.1, 0.16);\nconst float inputSpeed = 1.0;\nconst float bulletSpeed = 0.06;\nconst vec2 bulletDim = vec2(0.01, 0.03);\n\nconst float KEY_SPACE = 32.5/256.0;\nconst float KEY_LEFT  = 37.5/256.0;\nconst float KEY_UP    = 38.5/256.0;\nconst float KEY_RIGHT = 39.5/256.0;\nconst float KEY_DOWN  = 40.5/256.0;\n\nconst float INIT = -1.0;\nconst float PLAYING = 0.0;\nconst float END = 1.0;\n\n// Distance Functions\n// https://www.shadertoy.com/view/ltBGzK\nfloat signedDistanceBox(in vec2 p, in vec2 b) { return length(max((abs(p)-b),0.0)); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n    // Load Game Variables\n    float gameState = loadValue( txGameState ).x;\n    vec2 planePos = loadValue( txPlanePos ).xy;\n    float planeSpeed = loadValue( txPlaneSpeed ).x;\n    float travelled = loadValue( txTravelled ).x;\n    float spaceReleased = loadValue( txSpaceReleased ).x;\n    float bulletFired = loadValue( txBulletFired ).x;\n    vec2 bulletPos = loadValue( txBulletPos ).xy; \n    \n    // Initialize\n    if( iFrame==0 ) gameState = INIT;\n    \n    if( gameState < -0.5 ) {\n        gameState = PLAYING;\n        planePos = vec2(0.0, -0.7);\n        planeSpeed = 1.5;\n        travelled = 0.0;\n        spaceReleased = 1.0;\n        bulletFired = 0.0;\n        bulletPos = vec2(-100.);\n    }\n    \n    // play game\n    else if( gameState < 0.5 ) \n\t{\n        //float oldPaddlePos = paddlePos;\n        if( false && iMouse.w>0.01 )\n        {\n            // move with mouse\n            //paddlePos = (-1.0 + 2.0*iMouse.x/iResolution.x)*iResolution.x/iResolution.y;\n        }\n        else\n        {\n            // move with keyboard\n            float keyRight = texture( iChannel1, vec2(KEY_RIGHT, 0.25) ).x;\n            float keyLeft  = texture( iChannel1, vec2(KEY_LEFT, 0.25) ).x;\n            float keyUp = texture( iChannel1, vec2(KEY_UP, 0.25) ).x;\n            float keyDown = texture( iChannel1, vec2(KEY_DOWN, 0.25) ).x;\n            float keySpace = texture( iChannel1, vec2(KEY_SPACE, 0.25) ).x;\n            planePos += vec2(1.0, 0.0) * 0.04*inputSpeed*(keyRight - keyLeft);\n            planeSpeed += 0.03*inputSpeed*(keyUp - keyDown);\n            planeSpeed = clamp(planeSpeed, 1.0, 3.5);\n            travelled += 0.02*planeSpeed; // * timeConstant\n            \n            if (bulletPos.y > 1.0) { \n                bulletFired = 0.0;\n            \tbulletPos = vec2(-100.);\n            }\n            if (keySpace == 1.0 && spaceReleased == 1.0 && bulletFired == 0.0) { \n                spaceReleased = 0.0;\n                bulletFired = 1.0;\n                bulletPos = planePos;\n            }\n            else if (keySpace == 0.0) {\n                spaceReleased = 1.0;\n            }\n        }\n        //paddlePos = clamp( paddlePos, -1.0+0.5*paddleSize+paddleWidth*0.5, 1.0-0.5*paddleSize-paddleWidth*0.5 );\n    }  \n    \n    vec3 color = riverColor;\n    \n    float rw = riverWidth(travelled + uv.y);\n    if (uv.x < -rw || uv.x > rw) {\n        color = landColor;\n    }\n    \n    for (float i=0.0; i<1.0; i+=1.0) {\n        float dist = travelled + uv.y;\n        float section = floor(1.0*dist);\n        float f = fract(1.0*dist);\n        \n        float dy = nrand(vec2(section, i));\n        float phase = nrand(vec2(section, i + 55.));\n        float speed = nrand(vec2(section, i + 155.));\n        speed = (speed < 0.3) ? 0.0 : speed;\n        \n        float theta = abs(mod(speed * iTime + phase, 2.0) - 1.0) - 0.5;\n        \n        vec2 enemyPos = vec2(1.4*riverWidth(travelled + uv.y) * theta, section + dy - travelled);\n        float enemyBoxDist = signedDistanceBox(uv - enemyPos, planeDim / 2.0);\n        float enemyBox = 1.0 - smoothstep(0.0, 0.001, enemyBoxDist);\n        vec3 enemyColor = vec3(0.5);\n        if (mod(section, 2.0) == 1.0) { enemyColor = vec3(0.75); }\n        if (length(bulletPos - enemyPos) < 0.1) { enemyColor = riverColor; }\n        color = mix(color, enemyColor*enemyBox, enemyBox);\n    }\n    \n    \n    float boxDist = signedDistanceBox(uv - planePos, planeDim);\n    float box = 1.0 - smoothstep(0.0, 0.001, boxDist);\n    if (planePos.x - planeDim.x * 0.5 < -rw || planePos.x + planeDim.x * 0.5 > rw) {\n        planeColor = vec3(1.0, 0.0, 0.0);\n    }\n    color = mix(color, planeColor*box, box);\n    \n    if (bulletFired == 1.0) {\n        float bulletBoxDist = signedDistanceBox(uv - bulletPos, bulletDim);\n        float bulletBox = 1.0 - smoothstep(0.0, 0.001, bulletBoxDist);\n        color = mix(color, planeColor*bulletBox, bulletBox);\n        bulletPos += vec2(0.0, bulletSpeed);\n    }\n    \n    \n    fragColor = vec4(color, 1.0);\n    \n    // Save Game Variables\n    //fragColor = vec4(0.0);\n    storeValue( txPlanePos, vec4(planePos, 0.0, 0.0), fragColor, fragCoord );\n    storeValue( txPlaneSpeed, vec4(planeSpeed, 0.0, 0.0, 0.0), fragColor, fragCoord );\n    storeValue( txTravelled, vec4(travelled, 0.0, 0.0, 0.0), fragColor, fragCoord );\n    storeValue( txSpaceReleased, vec4(spaceReleased, 0.0, 0.0, 0.0), fragColor, fragCoord );\n    storeValue( txBulletFired, vec4(bulletFired, 0.0, 0.0, 0.0), fragColor, fragCoord );\n    storeValue( txBulletPos, vec4(bulletPos, 0.0, 0.0), fragColor, fragCoord );\n}\n\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsfGRr","channel":0}],"code":"// Noise distributions from: https://www.shadertoy.com/view/4ssXRX\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\nfloat n2rand( vec2 n )\n{\n\tfloat nrnd0 = nrand( n + 0.07 );\n\tfloat nrnd1 = nrand( n + 0.11 );\n\treturn (nrnd0+nrnd1) / 2.0;\n}\n\n//float hash1( float n ) { return fract(sin(n*n)*138.5453123); }\n\nvec2 mainSound( in int samp, float time )\n{\n    float freq = 1700.0;\n    // freq += mod(time*100., 100.); (?)\n    \n    float period = 1.0 / freq;\n    float n = floor(time / period);\n    float f = fract(time / period);\n    float amp = n2rand(vec2(n, 0.0));\n    float amp_prev = n2rand(vec2(n - 1.0, 0.0));\n    float val = mix(amp_prev, amp, f);\n    return vec2( 0.7 * val );\n}","name":"Sound","description":"","type":"sound"}]}