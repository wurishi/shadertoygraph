{"ver":"0.1","info":{"id":"wl3SDH","date":"1589542645","viewed":172,"name":"Sine Distance Redux","username":"spalmer","description":"golfing some other sinusoid SDFs - mouse-interactive","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// interface shim\n// can scale and unscale to map the wave\n// Distance to y(x) = sin(x * s.x)*s.y\n// s.x is frequency, s.y is amplitude?\nfloat dSinus(vec2 p, float freq, float amp)\n{\n    return dSineDisplay(p / amp, amp * freq) * amp;\n}\n\nvec2 StoQ(vec2 s, vec2 r)\n{\n\treturn (s+s-r)/r.y;\n}\n\n// iq's, more or less, fairly standard sdf isoline inside/outside colorization\nvec3 DebugSDF(float d)\n{\n    vec3 col = vec3(1) - sign(d) * vec3(.1,.5,.9);\n\tcol *= 1.05 - exp(-4. * abs(d));\n\tcol *= .8 + .2 * cos(110. * d);\n\tcol = mix(col, vec3(1), 1. - smoothstep(.0,.015,abs(d)));\n    return col;\n}\n\nvoid mainImage(out vec4 c, vec2 p)\n{\n\tvec2 R = iResolution.xy;\n    p = StoQ(p,R);        \n    // the mouse drag vector!\n    vec2 m0 = StoQ(iMouse.xy,R)\n       , m1 = StoQ(iMouse.zw,R);\n    bool mdown = iMouse.z >= 0.;\n    // animate\n    float t = mdown ? 0. : iTime/30.;\n    float ca = 0.0 + 0.4*sin(t*1.1); // offset    (y position)\n    float cb = 0.3 + 0.2*cos(t*1.2); // amplitude (y scale)\n    float cc = 3.7 + 6.0*cos(t*1.3); // frequency (x scale) - in radians\n    float cd = 0.0 + 0.0*cos(t*1.0); // phase     (x position)\n\t// map sinusoid along mouse drag\n    if (mdown && abs(m1.x - m0.x) > 2./R.y) {\n\t\tt = 0.; ca = m0.y; cb = .125; cc = 1./abs(m1.x-m0.x); cd = m1.x;\n    }\n    float d = dSinus(p -= vec2(cd,ca), cc, cb);\n    vec3 col = DebugSDF(d);\n    c = vec4(pow(col, vec3(.4545)), 1); // gamma\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float\n  pi = acos(-1.)\n, tau = 2.*pi\n;\n\n// TODO better initial guess, maybe won't need as many iterations\n\n// f = frequency in radians.  amplitude is 1.\nfloat dSineSpalmer(vec2 p, float f)\n{\n    float q = p.x;\n    q = mod(q * f + pi, tau) - pi;\n    if (abs(q) > .5 * pi) q = sign(q) * pi - q;\n    p.x = q / f;\n    float x, a = -.5 * pi, b = .5 * pi;\n    for (int i = 12; --i >= 0; ) { // bisect\n        x = .5 * (a + b);\n        float y = x - q - f * f * cos(x) * (p.y - sin(x));\n        if (y < 0.) a = x; else b = x;\n    }\n    return distance(p, vec2(x / f, sin(x)));\n}\n\n\n#if 0\n// iq's from https://shadertoy.com/view/3t23WG\n// just using it for reference; this block of license boilerplate\n// is annoying AF and is what keeps me from using this more.\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// I didn't change much except used tau vs. TWO_PI\nfloat udCos(vec2 p, float a, float b, float c, float d)\n{\n    // convert all data to a primitive cosine wave\n    p = c*(p-vec2(d,a));\n    // reduce to principal half cycle\n    p.x = mod(p.x, tau); if (p.x > 0.5*tau) p.x = tau - p.x;\n    // find zero of derivative (minimize distance)\n    float xa = 0.0, xb = pi; // I reduced the range here to avoid wasting an iteration\n    for (int i=0; i<24; ++i) { // 24 bit precision, but 12 should be plenty\n        float x = 0.5*(xa+xb);\n        float y = x-p.x+b*c*sin(x)*(p.y-b*c*cos(x));\n        if (y < 0.0) xa = x; else xb = x;\n    }\n    float x = 0.5*(xa+xb);\n    // compute distance    \n    vec2 q = vec2(x,b*c*cos(x));\n    return length(p-q)/c;\n}\n// note that diff(cos(x),x) = -sin(x)\n// orig but with a shim for my new pre-scaling parameterization\n// don't freaking ask me why this phase offset works!  But it does.\nfloat dSineIqShim(vec2 p, float f)\n{\n    return udCos(p, 0., 1., f, .32); //1./3.); //pi/2.);\n}\n#endif\n\n\n// btw Fabrice Neyret did one too, check it out:\n// https://shadertoy.com/view/tsXXRM\n    \n// blackle took a different approach with smoothmin:\n// https://shadertoy.com/view/tdXBWX\n\n// there's an approximation here too by abje:  \n// https://shadertoy.com/view/3t2GDy\n\n#if 0 // heightfield HACK that otherwise works as desired\nfloat dSineHeight(vec2 p, float f)\n{\n   \treturn abs(p.y - sin(p.x * f));\n}\n#endif // useful for verifying phase and frequency and general distance scale\n\n#if 0\nfloat dSineReference(vec2 p, float f)\n{\n    return\n      dSineHeight // naive way to debug some obvious problems\n//      dSineIqShim // trying to correct for the cosine phase shift, didn't quite get it\n        (p, f);\n}\n#endif\n\n// my new interface shim, takes frequency in radians\n// can try different core methods\nfloat dSineDisplay(vec2 p, float f)\n{\n\treturn\n      dSineSpalmer\n//      dSineReference\n        (p, f);\n}\n// amplitude is always 1.0 here, but can scale p in caller\n// just remember to divide frequency and result by scale also!\n\n","name":"Common","description":"","type":"common"}]}