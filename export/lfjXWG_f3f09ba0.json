{"ver":"0.1","info":{"id":"lfjXWG","date":"1706783013","viewed":65,"name":"Simple droplet wave","username":"Chango","description":"Simple droplet wave","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["wave","impulse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = fragCoord/iResolution.y;\n    float y = f(uv,iTime);\n    \n    \n    //!!! numerical form\n    //??? strange why I have to get rid of /2./delta to make it right\n    float delta = 0.01f;\n\tvec2 n = normalize(vec3(\n            (f(uv + vec2(delta, 0.),iTime) - f(uv - vec2(delta, 0.),iTime)),\n\t\t\t(f(uv + vec2( 0., delta),iTime) - f(uv - vec2(0., delta),iTime)),\n            -1.\n            )).xy;\n            \n            \n                \n                \n    // Time varying pixel color\n    vec3 col1 = texture(iChannel0,uv+DISTORTION*n).xyz+vec3(0,0.2,0.4)*y;\n    vec3 col2 = texture(iChannel0,uv).xyz;\n    vec3 col = mix(col2,col1,y);\n\n    // Output to screen\n    if(uv.x<1.&&uv.y>0.5)\n    {\n        fragColor = vec4(col,1.0);\n    }\n    else\n    {\n        fragColor = vec4((n+1.)*0.5,0.,1.0);\n        if(uv.y<0.5)\n        {\n            fragColor = vec4(y,y,y,1.0);\n        }\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define WAVEFreq 4.4\n#define WAVEMoveSpeed 2.0\n#define DISTORTION 0.1\n\n//float cubic(float x)\n//{\n    //return x*x*(3.0-2.0*x);\n//}\n    \nfloat f( vec2 p ,float t)\n{  \n    //float f1 = sin(1.*WAVEFreq*p.x-WAVEMoveSpeed*t);\n    //float s = (1.0)/(1.0+exp(-p.x));\n    \n    \n    float u = 0.0;\n    \n    //float a=0.99;\n    //float f2 = 1.0*sin(WAVEFreq*p.x-WAVEMoveSpeed*t);\n    //u = max(0.0,f2-a)/(1.0-a);\n    //u = smoothstep(0.,1.,u);\n    \n    float coreX = length(p-vec2(1.0,0.5));\n    \n    float pos = fract(t);\n    float damp = 1.0-pos;\n    float width = 0.1;\n    u = max(0.,1.0-abs(coreX-pos)/width);\n    u = smoothstep(0.,1.,u)*damp;\n    return u;\n}\n","name":"Common","description":"","type":"common"}]}