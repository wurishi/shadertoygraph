{"ver":"0.1","info":{"id":"MlG3RD","date":"1473493703","viewed":157,"name":"Geometric distortion correction","username":"kaanaksit","description":"A quick experiment on a geometric distortion correction","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["simpleshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Kaan Aksit - kunguz@gmail.com\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Circular aperture size in normalized screen size.\n    float aper   = 0.8;\n    // Define the center of the screen.\n    vec2 center  = vec2(0.5,0.5);\n    // Polynomial definition for x and y axes.\n    vec3 polxb   = vec3(0.,0.9,0.2);\n    vec3 polxg   = vec3(0.,1.0,0.1);\n    vec3 polxr   = vec3(0.,1.0,0.4);\n    vec3 polyb   = vec3(0.,0.9,0.2);\n    vec3 polyg   = vec3(0.,1.0,0.1);    \n    vec3 polyr   = vec3(0.,1.0,0.4);\n    // Image projection.\n    vec2 uv      = vec2(fragCoord.x/iResolution.x,fragCoord.y/iResolution.y);\n    vec2 uvo     = vec2(uv.x-center.x,uv.y-center.y);\n    vec2 red     = vec2(polxr.x+polxr.y*pow(uvo.x,1.)+polxr.z*pow(uvo.x,3.)+center.x,polyr.x+polyr.y*pow(uvo.y,1.)+polyr.z*pow(uvo.y,3.)+center.y);\n    vec2 green   = vec2(polxg.x+polxg.y*pow(uvo.x,1.)+polxg.z*pow(uvo.x,3.)+center.x,polyg.x+polyg.y*pow(uvo.y,1.)+polyg.z*pow(uvo.y,3.)+center.y);\n    vec2 blue    = vec2(polxb.x+polxb.y*pow(uvo.x,1.)+polxb.z*pow(uvo.x,3.)+center.x,polyb.x+polyb.y*pow(uvo.y,1.)+polyb.z*pow(uvo.y,3.)+center.y);\n    vec4 vResult = vec4(texture(iChannel0, red).r,texture(iChannel0, green).g, texture(iChannel0, blue).b,1.);\n    // Apply an circular aperture.\n    if (sqrt(pow(uvo.x,2.)+pow(uvo.y,2.))<=aper/2.)\n    {\n        fragColor = vResult;\n    }\n    else\n    {\n        fragColor = vec4(0.,0.,0.,0.);\n    }\n}","name":"Image","description":"","type":"image"}]}