{"ver":"0.1","info":{"id":"MldcW8","date":"1532484114","viewed":263,"name":"Popsicle","username":"belfry","description":"It's way too hot outside.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","fbm","ao","ice","translucent","ibm","popsicle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3zn","filepath":"/media/a/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","previewfilepath":"/media/ap/550a8cce1bf403869fde66dddf6028dd171f1852f4a704a465e1b80d23955663.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(float angle, vec2 v) {\n    return mat2x2(cos(angle), -sin(angle), sin(angle), cos(angle)) * v;\n}\n\nvec3 rotate3(vec3 angle, vec3 v) {\n    v.xy = rotate(angle.z, v.xy);\n    v.xz = rotate(-angle.y, v.xz);\n    v.yz = rotate(angle.x, v.yz);\n    return v;\n}\n\nfloat basicBox(vec3 p, vec3 extent) {\n    vec3 q = abs(p) - extent;\n    return max(q.x, max(q.y, q.z));\n}\n\nfloat basicCapsule(vec3 p, float height, float radius) {\n    vec3 q = abs(p);\n    q.y -= q.y < height ? q.y : height;\n    return length(q) - radius;\n}\n\nfloat stick(vec3 p) {\n    p -= vec3(0., -1., 0.);\n    float b = basicBox(vec3(p.x, p.y, abs(p.z) - 0.2), vec3(0.3, 1.5, 0.15));\n    return max(basicCapsule(p, 1.2, 0.2), -b);\n}\n\nfloat ice(vec3 p) {\n    p -= vec3(0., 1., 0.);\n    float c = basicCapsule(p, 1.2, 0.7);\n    float b = basicBox(vec3(p.x, p.y, abs(p.z) - 0.5), vec3(0.8, 1.9, 0.25));\n    float b2 = basicBox(p - vec3(0., -1.75, 0.), vec3(0.8, 0.3, 0.3));\n    float c2 = basicCapsule(vec3(abs(p.x) - 0.27, p.y, abs(p.z) - 0.4), 1.8, 0.22);\n    float c3 = basicCapsule(vec3(abs(p.x) - 0.67, p.y, abs(p.z) - 0.4), 1.7, 0.32);\n    return smin(smin(smin(smin(c, -b, -0.1), -b2, -0.1), -c2, -0.1), -c3, -0.1);\n}\n\nfloat popsickle(vec3 p, vec3 pos, vec3 rot, out int id) {\n    vec3 q = rotate3(rot, p - pos);\n    q = rotate3(vec3(0., iTime, 0.), q);\n    float s = stick(q);\n    float i = ice(q);\n    id = s < i ? 0 : 1;\n    return min(s, i);\n}\n\nfloat sdf(vec3 p, out int id) {\n    return popsickle(p, vec3(0., -0.3, 5.), vec3(0., 0., -0.2), id);\n}\n\nvec3 gradient(vec3 p, float dist) {\n    vec2 eps = vec2(0.005, 0.);\n    int id;\n    float dx = sdf(p + eps.xyy, id) - dist;\n    float dy = sdf(p + eps.yxy, id) - dist;\n    float dz = sdf(p + eps.yyx, id) - dist;\n    return normalize(vec3(dx, dy, dz));\n}\n\nfloat ambientOcclusion(vec3 p, vec3 normal, float len, float steps) {\n    float ao = 0.;\n    for (float i = len / steps; i <= len; i += len / steps) {\n        vec3 q = p + i * normal;\n        int id;\n        float d = sdf(q, id);\n        ao += max(0., 1. - d/i);\n    }\n    return clamp(ao, 0., 1.);\n}\n\nfloat translucency(vec3 p, vec3 normal, float len, float steps) {\n    float ao = 0.;\n    for (float i = len / steps; i <= len; i += len / steps) {\n        vec3 q = p - i * normal;\n        int id;\n        float d = -sdf(q, id);\n        ao += max(0., 1. - d/i);\n    }\n    return clamp(ao, 0., 1.);\n}\n\nvec3 vnoise(vec3 p, float s) {\n    vec3 q = floor(p / s) * s;\n    vec3 i = (p - q) / s;\n    i = smoothstep(vec3(0.), vec3(1.), i);\n    vec2 eps = vec2(s, 0.);\n    vec3 lbf = hash33(q);\n    vec3 lbb = hash33(q + eps.yyx);\n    vec3 luf = hash33(q + eps.yxy);\n    vec3 lub = hash33(q + eps.yxx);\n    vec3 rbf = hash33(q + eps.xyy);\n    vec3 rbb = hash33(q + eps.xyx);\n    vec3 ruf = hash33(q + eps.xxy);\n    vec3 rub = hash33(q + eps.xxx);\n    vec3 BF = mix(lbf, rbf, i.x);\n    vec3 BB = mix(lbb, rbb, i.x);\n    vec3 UF = mix(luf, ruf, i.x);\n    vec3 UB = mix(lub, rub, i.x);\n    vec3 F = mix(BF, UF, i.y);\n    vec3 B = mix(BB, UB, i.y);\n    return mix(F, B, i.z);\n}\n\nvec3 fbm(vec3 p, float a) {\n    float t = 0.;\n    vec3 n = vec3(0.);\n    for (float s = 1.; s > a; s *= .5) {\n        n += vnoise(p, s) * s;\n        t += s;\n    }\n    return n / t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float fov = radians(60.);\n    vec3 dir = vec3(uv * 2. - 1., 1. / tan(fov * .5));\n    dir.x *= iResolution.x / iResolution.y;\n    dir = normalize(dir);\n    float t = 0.;\n    float dist;\n    float i = 0.;\n    int id;\n    bool hit = false;\n    vec3 p;\n    for (; i < 100.; i++) {\n        p = dir * t;\n        dist = sdf(p, id);\n        if (abs(dist) < 0.01) {\n            hit = true;\n            break;\n        }\n        if (t > 100.)\n            break;\n        t += dist;\n    }\n    vec3 normal = gradient(p, dist);\n    vec3 f = fbm(p, 0.1);\n    vec3 detail = id == 0 ? hash33(p) * 0.1 : hash33(p) * 0.03;\n    normal = normalize(normal + detail);\n    vec3 diffuse = texture(iChannel1, normal).rgb;\n    vec3 diffuseBack = texture(iChannel1, -normal).rgb;\n    vec3 specular = texture(iChannel0, reflect(-dir, normal)).rgb;    \n    specular = id == 0 ? vec3(0.) : pow(max(0., 1. - abs(dot(normal, -dir))), f.g * 8.) * specular * 20. * f.b;\n    vec3 col = id == 0 ? vec3(0.6, 0.5, 0.5) : vec3(0.3, 0.75, 0.9);\n    vec3 lighting = vec3(0.3) + diffuse * 0.8 + specular * 0.8;\n    float translucent = id == 0 ? 0. : translucency(p, normal, 0.3, 2.);\n    lighting += (diffuseBack) * (translucent * 0.7);\n    float ao = ambientOcclusion(p, normal, 0.3, 2.);\n    lighting *= (1. - ao * 0.2);\n    col += id == 0 ? vec3(0.) : f.rrr * 0.3;\n    vec3 bg = texture(iChannel0, dir).rgb;\n    vec3 fg = col * lighting;\n    fg *= id == 1 ? 1. - f.b  * 0.3: 1.;\n    fg += id == 1 ? f.b * 0.3 : 0.;\n    fragColor = vec4(hit ? fg : bg, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//----------------------------------------------------------------------------------------\n//----------  taken from: https://iquilezles.org/articles/smin -----------\n//----------------------------------------------------------------------------------------\n\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n//----------------------------------------------------------------------------------------\n//----------------  taken from: https://www.shadertoy.com/view/4djSRW  -------------------\n//----------------------------------------------------------------------------------------\n\n//#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE3 vec3(443.897, 441.423, 437.195)\n\n///  3 out, 3 in...\nvec3 hash33(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n//----------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------","name":"Common","description":"","type":"common"}]}