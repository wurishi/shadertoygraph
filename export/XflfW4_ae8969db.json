{"ver":"0.1","info":{"id":"XflfW4","date":"1723779362","viewed":18,"name":"Ray March 0","username":"tangerine8","description":" My first experiment with sdf raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot_2d(float rads) {\n    return mat2(\n        cos(rads), -sin(rads),\n        sin(rads), cos(rads)\n    );\n}\n\nvec3 pallete(float t) {\n    const vec3 a = vec3(0.5);\n    const vec3 b = vec3(0.5);\n    const vec3 c = vec3(2.0, 1.0, 0.0);\n    const vec3 d = vec3(0.5, 0.2, 0.25);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nfloat sdf_sphere(vec3 ray_position, float radius) {\n    return length(ray_position) - radius;\n}\n\nfloat sdf_box(vec3 ray_position, vec3 size) {\n    vec3 q = abs(ray_position) - size;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdf_ground(vec3 ray_position, float height) {\n    return ray_position.y - height;\n}\n\nfloat get_distance(vec3 ray_position) {\n    vec3 boxPos = vec3(sin(iTime * 2.0) * 3.0, 1.0, 0.0);\n    float box = sdf_box(boxPos - ray_position, vec3(0.75));\n\n    vec3 spherePos = vec3(0.0, 1.0, 0.0);\n    vec3 sphereQ = ray_position;\n    sphereQ = mod(ray_position, 3.0) - 1.5;\n    float sphere = sdf_sphere(sphereQ, 0.5);\n\n    float ground = sdf_ground(ray_position, 0.0);\n\n    return min(sphere, min(ground, box));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 center_uv = uv * 2.0 - 1.0;\n    center_uv.x *= iResolution.x / iResolution.y;\n\n    vec2 m = iMouse.xy / iResolution.xy;\n    m = m * 2.0 - 1.0;\n    m *= iResolution.x / iResolution.y;\n    m *= 2.0;\n\n    vec3 color = vec3(0.0);\n\n    vec3 ray_origin = vec3(0.0, 0.0, -5.0);\n    vec3 ray_direction = normalize(vec3(center_uv, 1.0));\n    float ray_distance = 0.0;\n\n    ray_origin.yz *= rot_2d(clamp(-m.y, 0.5, 1.5));\n    ray_direction.yz *= rot_2d(clamp(-m.y, 0.5, 1.5));\n\n    ray_origin.xz *= rot_2d(-m.x);\n    ray_direction.xz *= rot_2d(-m.x);\n\n    int i = 0;\n    for (i = 0; i < 80; i++) {\n        vec3 ray_position = ray_origin + ray_direction * ray_distance;\n        float d = get_distance(ray_position);\n        ray_distance += d;\n\n        if (d < 0.0001)\n        {\n            break;\n        }\n        if (ray_distance > 100.0)\n        {\n            break;\n        }\n    }\n\n    color = pallete(ray_distance * 0.05 + float(i) * 0.005);\n\n    vec3 fog_color = normalize(pallete(iTime * 0.2));\n    float fog_density = 1.0;\n    float fog_factor = pow(2.0, -pow(ray_distance * 0.05 * fog_density, 2.0));\n    fog_factor = clamp(fog_factor, 0.0, 1.0);\n    color = mix(fog_color, color, fog_factor);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}