{"ver":"0.1","info":{"id":"l32BDw","date":"1729551094","viewed":34,"name":"Hex - Shadetober24 #21","username":"franke333","description":"Day 21 of shadetober","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shadetober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash2(vec2 p)\n{\n    return fract(\n      sin(vec2(dot(p, vec2(1.71, mod(floor(0.75*iTime),10.)*17.03)), dot(p, vec2(53.91, 173.17)))));\n}\n\nvec3 getColor1(float t)\n{\n    vec3 c1 = vec3(0.55,0.5,0.9);\n    vec3 c2 = vec3(0.3,0.3,0.48);\n    return mix(c1,c2,t);\n}\n\nvec3 getColor2(float t)\n{\n    vec3 c1 = vec3(0.9,0.7,0.1);\n    vec3 c2 = vec3(0.6,0.55,0.28);\n    return mix(c1,c2,t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n    uv.y /= sqrt(3.)/2.;\n    uv.y += 0.125;\n    uv.x += 0.03*iTime;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    vec3 vor = voronoiDistance(uv*10.);\n    vec2 h = hash2(vor.yz);\n    // Output to screen\n    fragColor = vec4(h.y > 0.95 ^^ vor.x < 0.125 ? getColor2(h.x) : getColor1(h.x),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 hexhash(vec2 p) {\n  return vec2(0.5*mod(p.y,2.),0.);\n}\n\n// big thanks to https://iquilezles.org/articles/voronoilines/ for this lovely solution <3\nvec3 voronoiDistance( in vec2 x )\n{\n    vec2 p = vec2(floor( x ));\n    vec2 f = fract( x );\n\n    vec2 mb;\n    vec2 mr;\n    vec2 closest;\n\n    float res = 8.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 b = vec2(i, j);\n        vec2  r = vec2(b) + hexhash(p+b)-f;\n        float d = dot(r,r);\n\n        if( d < res )\n        {\n            res = d;\n            mr = r;\n            mb = b;\n            closest = hexhash(p+b)+b+x-f;\n        }\n    }\n\n    res = 8.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 b = mb + vec2(i, j);\n        vec2  r = vec2(b) + hexhash(p+b) - f;\n        if(r==mr)\n            continue;\n        float d = dot(0.5*(mr+r), normalize(r-mr));\n        res = min( res, d );\n    }\n\n    return vec3(res,closest);\n}","name":"Common","description":"","type":"common"}]}