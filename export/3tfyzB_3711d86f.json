{"ver":"0.1","info":{"id":"3tfyzB","date":"1592311534","viewed":80,"name":"Torus Distance Normals","username":"jt","description":"Experimenting with rendering a torus.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["torus","normals","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// rendering torus experiments - 2020 jt\n\nfloat TorusDistance(float R, float r, vec3 v)\n{\n    return length(vec2(length(v.xy) - R, v.z)) - r;\n}\n\nvec3 TorusNormal(float R, vec3 v)\n{\n    vec2 w = normalize(vec2(length(v.xy) - R, v.z));\n    return vec3(w.x * normalize(v.xy), w.y);\n}\n\n#define pi 3.1415926\n\nvec2 TorusCoord(float R, vec3 v)\n{\n    return 0.5 + vec2((atan(v.y, v.x)), (atan(v.z, length(v.xy) - R))) / pi / 2.0;\n}\n\nvoid mainImage( out vec4 o, in vec2 I )\n{\n    {\n        vec2 R = iResolution.xy;\n        I += I - R;\n        I /= R.y;\n    }\n\n    float R = 0.8;\n    float r = 0.1;\n    float d = TorusDistance(R, r, vec3(I, 0.0)); // plane cuts through torus at z=0\n    //o = vec4(TorusNormal(R, vec3(I, 0.0)), 1.0);\n    //o = vec4(d/r);\n    float h = r * sqrt(1.0 - pow(1.0+min(0.0, d/r), 2.0)); // recalculate zheight from distance to surface\n    //o = vec4(h / r);\n    float m = step(d/r, 0.0); // mask\n    //o = m*vec4(-d/r);\n    vec3 p = vec3(I, h);\n    d = TorusDistance(R, r, p);\n    //float m = step(d/r, 0.0); // mask\n    //o = vec4(d/r);\n    //o = vec4(m);\n    //o = vec4(vec3(m), 1.0);\n    vec3 n = TorusNormal(R, p);\n    o = vec4(n, 1.0);\n    //vec3 l = vec3(2,3,6) / 7.0;\n    vec3 l = vec3(sin(iTime) * cos(iTime / 12.0), sin(iTime / 12.0), cos(iTime));\n    //vec3 l = normalize(vec3(1,0,1));\n    //o = vec4(vec3(n * m * max(0.0, dot(l, n))), 1.0);\n    vec2 s = TorusCoord(R, p);\n    //o = vec4(c, 0.0, 1.0);\n    vec4 c = texture(iChannel0, s * vec2(12.0, 3.0));\n    //o = c;\n    o = c * vec4(vec3(m * max(0.0, dot(l, n))), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}