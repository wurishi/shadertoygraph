{"ver":"0.1","info":{"id":"4sscz2","date":"1515686222","viewed":598,"name":"Greetings, Mercury","username":"Zavie","description":"This shader draws the logo of the German demogroup \"Mercury\".\n\nIt served as a prototype for a procedural texture during the creation of the 64kB intro \"H - Immersion\". The logo appeared, hidden in plain sight, as a nod to the group.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["demoscene","logo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nThis shader draws the logo of the German demogroup \"Mercury\".\n\nIt served as a prototype for a procedural texture during the\ncreation of the 64kB intro \"H - Immersion\". The logo appeared,\nhidden in plain sight, as a nod to the group.\n\n\nH - Immersion, by Ctrl-Alt-Test:\n > http://www.ctrl-alt-test.fr/?page_id=444\n > https://www.youtube.com/watch?v=27PN1SsXbjM\n   (logo visible at 2mn28s)\n\n\nMercury:\n > http://mercury.love/\n > https://www.youtube.com/watch?v=gX7ESVZ7T6Y\n\n--\nZavie / Ctrl-Alt-Test\n\n*/\n\nvec3 debugDistance(float d, vec3 color)\n{\n    float iso =\n        smoothstep(0.92, 0.98, abs(fract(d) * 2. - 1.)) +\n        smoothstep(0.8, 0.95, abs(fract(5.*d) * 2. - 1.))*0.5;\n    return mix(vec3(1.), color, iso)* mix(0.8, 1., float(d > 0.)) * smoothstep(0.02,0.06, abs(d));\n}\n\nfloat Box(vec2 p, vec2 size)\n{\n    vec2 u = abs(p) - size;\n    return max(u.x, u.y);\n}\n\nfloat MercuryLogo(vec2 p)\n{\n    float d1 = (abs(fract(p.y * 4. + 0.5) * 2. - 1.) - 0.6) / 6.;\n    d1 = max(d1, Box(p, vec2(0.4)));\n    \n    float d2 = (abs(fract(p.x * 3.5 + 0.5) * 2. - 1.) - 0.6) / 6.;\n    p.y = mix(-0.1-p.y, p.y, smoothstep(0.149, 0.151, abs(p.x)));\n    d2 = max(d2, -Box(p + vec2(0., 0.3), vec2(0.5, 0.25)));\n\n    \n    float d = min(d1, d2);\n    d = max(d, Box(p, vec2(0.35, 0.45)));\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n\n    float d = MercuryLogo(1.25 * (uv - vec2(0.8, 0.5)));\n\n    vec3 color = debugDistance(10.*d, vec3(0.8, 0.5, 1.));\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}