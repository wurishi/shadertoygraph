{"ver":"0.1","info":{"id":"tdfSzX","date":"1551994327","viewed":149,"name":"path tracing noise","username":"Zoz","description":"Experimenting path traced 3d noise, bounded by an implicit surface.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nmat3 Rotate(vec3 angles)\n{\n    vec3 c = cos(angles);\n    vec3 s = sin(angles);\n    \n    mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0,c.x,s.x, 0.0,-s.x, c.x);\n    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.0,0.0, s.y, 0.0, c.y);\n    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);\n\n    return rotX*rotY*rotZ;\n}\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n    \n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return max(0., 2.2 * n_xyz);\n}\n\nfloat fbm(vec3 p) {\n    p *= .5;\n    \n \tfloat t = 1.;\n    float s = 1.;\n    float a = 0.;\n    for (int i = 0; i < 6; i++) {\n     \ta += t * cnoise(p * s + cnoise(p*s));\n        t *= 0.6;\n        s *= 2.;\n    }\n    \n    return a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n   \n    \n    //Compute rotation matrix from mouse coordinates\n    vec3 angles = vec3((iMouse.xy/iResolution.xy)*PI,0);\n    angles.xy *= vec2(2.0,1.0);\n    angles.y = clamp(angles.y,0.0,PI/2.0);\n    mat3 rotate = Rotate(angles.xyz);\n    rotate = Rotate(vec3(iTime*2., iTime, 0));\n    \n    //Calculate ray direction\n    vec3 o = vec3(0., 0., -3.);\n    vec3 r = normalize(vec3(uv, 2.));\n    \n    //mouse rotation\n    o = rotate * o;\n    r = rotate * r;\n    \n\n    float radius = 1.;// + pow(sin(iTime * 5.), 3.) * .05;\n    float d = 0.;\n    for (int i = 0; i < 20; i++) {        \n        vec3 p = o + r * d;\n        d += length(p) - radius;\n        //d += p.y + .5;\n    }\n    \n    float step_size = .04;\n    float t = 1.;\n    vec3 c = vec3(0.);\n    float a = 0.;\n    for (int i = 0; i < 50; i++) {\n     \tvec3 p = o + r * (d + float(i) * step_size);\n        //if (p.y > 0.1) continue;\n        if (length(p) > 2.) break;\n        if (length(p) > radius) continue;\n        \n        float n = pow(cnoise(p * 2.), (sin(iTime*2.)  + 2.) * .5);\n        n += smoothstep(0., 1., length(p) - 1.);\n        vec3 c_t = vec3(sin(n*8. + PI/.3),  sin(n*12. + PI /.5), sin(n*4. + PI / 2.)) * .5 + .5;\n        float t = n * 1.5;\n        //vec3 c_t = vec3(.1, .1, 1.);\n        c += (1. - a) * t * c_t;\n        //t = (1. - a);    \t\n        a += t * (1. - a);\n       \n        if (a >= 1.) break;\n        \n    }\n    \n    //c = max(c, 0.);\n    //c = min(c, 1.);\n    \n\n    // Time varying pixel color\n    vec3 col = c;//vec3(.1, .1, 1.) * c;\n\t//col = vec3(x) / 50.;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}