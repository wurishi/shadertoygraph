{"ver":"0.1","info":{"id":"tslSzn","date":"1550509625","viewed":1393,"name":"Lights Shapes and Refraction","username":"synergyseeker1","description":"Experiment using shape drawing with distance fields. Adding color affected lights, and background shading , reflected and refracted in the shape. WiP, still cleaning the edges","likes":26,"published":3,"flags":64,"usePreview":0,"tags":["distancefield","triangle","color","learning","shapes","artofshaders","colorshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltXXRn","filepath":"https://soundcloud.com/konstvntinov/pixies-where-is-my-mind-mt-eden-remix","previewfilepath":"https://soundcloud.com/konstvntinov/pixies-where-is-my-mind-mt-eden-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14;\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),sin(_angle),cos(_angle));\n}\n\nvec4 drawShape(vec2 uv, vec2 position, int sides,float size, vec3 color) {\n\t// Angle from current pixel\n    uv = rotate2d((iTime*-.2)*3.14)*uv;\n  \tfloat a = atan(uv.x,uv.y)+PI;\n    // radius from current pixel\n \tfloat r = 2.0*PI/float(sides);\n  \t// modulate the distance\n    \n  \tfloat d = cos(floor(.5+a/r)*r-a)*length(uv);\n\t//define the edges, and make smooth\n  \tvec4 shape = vec4(1.0-smoothstep(size,size+.08,d));\n  \t//color the shape\n    shape.rgb*=color;\n\treturn shape;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){   \n\t// normalize and adjust for aspect ratio\n    vec2 res = iResolution.xy,\n    uv = (fragCoord*2.0- res ) / res.y;\n    uv = rotate2d(sin(iTime*.01)*6.28)*uv;\n\t\n    //initilize colors\n\tvec4 background = vec4(.2,.6,.9,1.0); \n    background*=-uv.y*.7*cos(uv.x);\n    vec4 color = vec4(1.0,.7,.3,1.0);\n    \n    // set shape properties\n    int sides = 3;\n    float size = .5;\n\tvec2 position = vec2(0.0);\n    vec4 shape = drawShape(uv,position,sides,size,color.rgb);\n   \n    // distance field\n    float d = length(shape*1.1)-.5;\n    uv = rotate2d((iTime*.2)*3.14)*uv;\n    uv-=clamp(1.0-d,0.0,1.0)*(cos(d - iTime*.5) );\n\t\n    //combine\n    color*=vec4(.1/length(mod(uv,1.0)-.5) );\n    background*=shape*2.0-d -shape*cos(uv.y)*1.5;\n    \n\t//output final color\n\tfragColor = mix(background, color, color.a);\n}","name":"Image","description":"","type":"image"}]}