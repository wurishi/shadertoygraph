{"ver":"0.1","info":{"id":"4XScWc","date":"1727788171","viewed":34,"name":"Fast quasi montecarlo volumetric","username":"DerShade","description":"It's fast. The only reason i like it. Just the volumetric continuum where are regular dense areas and they are clipped by s. Lot of the parameters missing, but it's nice to have something with the infinity space and resolution running oneframe at intelHD ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","blobs","volumetric","continuum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// super cheap volumetric display based on the \"density continuum\" ss.\n// no rotation just the bare minimum. \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{    \n    float r,g,s,e,b,z,x,y,ss,l=42.;          // l = # of noise iterations\n    e = sin(iTime*5.)+1.;                    // z movement for r\n    s = 0.5+(cos(iTime/1.5)/2.);             // brightness pulsing/region/thickness\n    for(float f=0.;f<l;f+=1.){               // z montecarlo cumulation\n    z = 1.0+f/l;                             // continuum z possition\n    z+= sin((fragCoord.x*f)*373.*            // cheap z noise -1/+1\n        cos((fragCoord.y*f)*791.)*\n        mod(iTime,10.));                     \n    \n  \n    x = (fragCoord.x/iResolution.x-0.5)*     // coords -0.5 to 0.5\n        (iResolution.x/iResolution.y)  *z;   // aspect r.   \n    y = (fragCoord.y/iResolution.y-0.5)*z;\n    \n    x+= sin(iTime/2.3)/2.; //x movement\n    y+= cos(iTime/2.7)/2.; //y movement\n    \n    ss= (sin(x*13.)*cos(y*13.)*sin(z*13.))/3.;  // the continuum density\n                                                // frequency / amplitude\n        \n    r+= float(x+ss  >-s && x-ss  <s &&          // red box x square\n              y+ss  >-s && y-ss  <s &&          // red box y square\n              z+ss-e>-s && z-ss-e<s    )/       // red box z square\n              (2.+(z*l/5.));                    // bright. fade to z\n              \n    g+= float(x+ss>-s && x-ss< s &&             // green box, z undefined = infinity\n              y+ss>-s && y-ss< s)/              \n              (2.+(z*l));\n    \n    }\n    // Output to screen\n    fragColor = vec4(r,g,ss,1.0);               //the blue is the cont. hint\n    \n}","name":"Image","description":"","type":"image"}]}