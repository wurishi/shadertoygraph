{"ver":"0.1","info":{"id":"4llSWj","date":"1439759023","viewed":260,"name":"Basic Main Sequence Star","username":"martin","description":"A star","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Based on:\n// - https://www.shadertoy.com/view/4dXGR4\n// - https://www.shadertoy.com/view/lsf3RH\n\n//Tweakables\nconst float SIZE = 3.25;\nconst float CORONA_SCALE = 0.25;\nconst int CORONA_SAMPLES = 12;\nconst float CORONA_SAMPLE_STEP = 1.5;\nconst float ANIMTION_SPEED = 1.5;\n\nconst vec3 BASE_COLOR = vec3(1, 0.45, 0.15);\n\nconst float MIN_SPOT = 0.0;\nconst float MAX_SPOT = 1.0;\nconst float SPOT_INTENSITY = 0.55;\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1.0, 100.0, 1000.0);\n\t\n\tuv *= res;\n\t\n\tvec3 uv0 = floor(mod(uv, res)) * s;\n\tvec3 uv1 = floor(mod(uv + vec3(1.0), res)) * s;\n\t\n\tvec3 f = fract(uv);\n    f = f * f * (3.0 - 2.0 * f);\n\n\tvec4 v = vec4(uv0.x + uv0.y + uv0.z, uv1.x + uv0.y + uv0.z,\n\t\t      \t  uv0.x + uv1.y + uv0.z, uv1.x + uv1.y + uv0.z);\n\n\tvec4 r = fract(sin(v * 0.1) * 1000.0);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\tr = fract(sin((v + uv1.z - uv0.z) * 0.1) * 1000.0);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\t\n\treturn mix(r0, r1, f.z) * 2.0 - 1.0;\n}\n\nfloat body(in vec2 uv)\n{\n\tfloat brightness\t= 0.25;\n\tfloat radius\t\t= 0.24 + brightness * 0.2;\n\tfloat invRadius \t= 1.0/radius;\n\t\n\tvec3 orange\t\t\t= vec3( 0.8, 0.65, 0.3 );\n\tvec3 orangeRed\t\t= vec3( 0.8, 0.35, 0.1 );\n\tfloat time\t\t= iTime * ANIMTION_SPEED * 0.1;\n\tfloat aspect\t= iResolution.x / iResolution.y;\n\tvec2 p \t\t\t= (-0.5 + uv);\n\t\n\tfloat dist\t\t= length(p);\n\n\tvec3 starSphere\t\t= vec3( 0.0 );\n\t\n\tvec2 sp = -1.0 + 2.0 * uv;\n\tsp *= (2.0 - brightness);\n  \tfloat r = dot(sp, sp);\n\tfloat f = (1.0-sqrt(abs(1.0-r)))/(r) + brightness * 0.5;\n\tif( dist < radius ){\n  \t\tvec2 newUv;\n \t\tnewUv.x = sp.x*f;\n  \t\tnewUv.y = sp.y*f;\n\t\t\n\t\tvec3 texSample \t= texture( iChannel0, newUv ).rgb;\n\t\tfloat uOff\t\t= ( texSample.g * brightness * 4.5 + time );\n\t\tvec2 starUV\t\t= newUv + vec2( uOff, 0.0 );\n\t\tstarSphere\t\t= texture( iChannel0, starUV ).rgb;\n\t}\n\t\n    return length(starSphere);\n}\n\nfloat corona(in vec2 p)\n{\n    //Calculate the color intensity of this pixel (based on distance from center)\n\tfloat color = (1.0 / CORONA_SCALE) * (SIZE - (length(6.0 * p)));\n\t\n    //Calculate polar coordinate\n\tvec3 coord = vec3(atan(p.x, p.y) / 6.2832, length(p) * 0.5, 0);\n    \n    //Offset coordinate by time for animation\n    coord += vec3(0.0, -iTime * (ANIMTION_SPEED / 150.0), iTime * (ANIMTION_SPEED / 750.0));\n\t\n    //Sum up samples\n\tfor(int i = 1; i <= CORONA_SAMPLES; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor += (1.5 / power) * snoise(coord, power * float(CORONA_SAMPLES) * CORONA_SAMPLE_STEP);\n\t}\n    \n    return max(color * CORONA_SCALE, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    //Correct for screen size and aspect ratio\n\tvec2 p = -0.5 + fragCoord.xy / iResolution.xy;\n\tp.x *= iResolution.x/iResolution.y;\n\t\n    //Calculate the color intensity of this pixel (based on distance from center)\n\tfloat color = corona(p);\n    vec3 coronaColor = vec3(\n        clamp(color * BASE_COLOR.r, 0.0, 1.0),\n        clamp(pow(max(color, 0.0), 2.0) * BASE_COLOR.g, 0.0, 1.0),\n        clamp(pow(max(color, 0.0), 3.0) * BASE_COLOR.b, 0.0, 1.0)\n    );\n    \n    //Calculate spots on the star body\n    float spots = mix((1.0 - SPOT_INTENSITY), 1.0, clamp(1.0 - body(p + 0.5), 0.0, 1.0));\n    vec3 spotColor = vec3(\n        clamp(spots * 1.0 / (1.0 - BASE_COLOR.r), 0.0, 1.0),\n        clamp(spots * 1.0 / (1.0 - BASE_COLOR.g), 0.0, 1.0),\n        clamp(spots * 1.0 / (1.0 - BASE_COLOR.b), 0.0, 1.0)\n\t);\n    \n    fragColor = vec4(\n        coronaColor * spotColor,\n        1.0\n    );\n}\n\n","name":"","description":"","type":"image"}]}