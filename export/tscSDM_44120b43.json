{"ver":"0.1","info":{"id":"tscSDM","date":"1572102222","viewed":208,"name":"Base fractal with smooth count","username":"trinketMage","description":"Base fractal implementation from https://en.wikibooks.org/wiki/Fractals/shadertoy\nwith smooth iteration count from http://iquilezles.org/articles/mset_1bulb/mset1bulb.htm","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int i_max = 120;\nvec2 c = vec2( -0.01625, -0.6875);\n// vec2 c = vec2( -0.625, -0.9875);\nfloat threshold = 10.0;\n\n\n// vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n// {\n//     return a + b*cos( 6.28318*(c*t+d) );\n// }\n\nvec2 complex_square( vec2 v ) {\n\treturn vec2(\n\t\tv.x * v.x - v.y * v.y,\n\t\tv.x * v.y * 2.0\n\t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 z = fragCoord.xy - iResolution.xy * 0.5;\n\tz *= 2.5 / min( iResolution.x, iResolution.y );\n\t\n\t\n\tfloat scale = 0.1;\n\n\tint count = 0;\n\t\n    \n    float k = 2.0 + mod(floor(.125), 10.0 );\n    vec3 col = vec3(0.0);\n    c.x += sin(iTime * .25) * 1.3125;\n\tfor ( int i = 0 ; i < i_max; i++ ) {\n        z = c + complex_square( z );\n\t\tcount = i;\n        if ( dot(z,z) > threshold ) {  break; }\n\t}\n    vec3 tmp = vec3(0.0);\n   \n    if( float(count)<20.5 )\n    {\n        // smooth iteration count\n        float sit = float(count) - log2(log2(dot(z,z))/(log2(threshold)))/log2(k);\n        tmp = 0.5 + 0.5*cos( 3.0 + sit*0.075*k + vec3(0.4,0.1,1.));\n    } else {\n        col += vec3(1.0, 1.0, 1.0);\n    }\n\t\n    col += tmp;\n    // float shade = 1.0- float( count ) * scale;\n    // vec3 col = palette(shade, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67));\n    \n    fragColor = vec4(col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}