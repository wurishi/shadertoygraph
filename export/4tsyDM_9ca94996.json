{"ver":"0.1","info":{"id":"4tsyDM","date":"1505086906","viewed":105,"name":"Mandelbrot times table","username":"e8jms1","description":"Mandelbrot times table from this youtube video.\nhttps://www.youtube.com/watch?v=qhbuKbxJsk8\n\nalso inspired by\nhttps://www.shadertoy.com/view/4lcSWs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrotcardioid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Thickness 0.003\n#define PI 3.14159265359\n#define SMOOTH(r,R) (1.0-smoothstep(R-1.0,R+1.0, r))\n\n#define degToRad(d) (d*PI/180.0)\n\n#define time iTime\n#define resolution iResolution\n\nmat2 rot(in float a){float c = cos(a), s = sin(a);return mat2(c,s,-s,c);}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\n//https://iquilezles.org/articles/palettes\n// cosine based palette, 4 vec3 params\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n//https://www.shadertoy.com/view/XdXGW8\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\nmat2 rotate2d(float _angle){\n \treturn mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\n\n//https://stackoverflow.com/questions/15276454/is-it-possible-to-draw-line-thickness-in-a-fragment-shader\nfloat drawLine(vec2 uv, vec2 p1, vec2 p2) {\n\n  float a = abs(distance(p1, uv));\n  float b = abs(distance(p2, uv));\n  float c = abs(distance(p1, p2));\n\n  if ( a >= c || b >=  c ) return 0.0;\n\n  float p = (a + b + c) * 0.5;\n\n  // median to (p1, p2) vector\n  float h = 2.0 / c * sqrt( p * ( p - a) * ( p - b) * ( p - c));\n    \n  //return smoothstep(0.5 * Thickness, 1.5 * Thickness, h);\n\n  return mix(1.0, 0.0, smoothstep(1.5 * Thickness, 1.5 * Thickness, h));\n}\n\nfloat drawCircle(in vec2 pos, in float rad){\n \tfloat l = length(pos);\n    //return l-rad;\n    return smoothstep(rad+0.02,rad-0.02,l);\n}\n\nfloat _circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / resolution.xy;\n    uv = -1.0+2.0*uv;\n    uv.x *= resolution.x/resolution.y;\n    \n    float sinNor = (sin(time)-(-1.0))/(1.0 - (-1.0));\n    vec4 wave = textureLod( iChannel0, vec2(fract(uv.x*.2),.75),-100. );\n    \n    uv = scale( vec2( pow(wave.x*1.2,.5)*1.5) ) * uv;\n    \n    //vec2 uv = fragCoord.xy / iResolution.xy*2.0-1.0;\n    //uv.x *= iResolution.x/iResolution.y;\n    \n    //float totalPoints = floor(50.0*abs(sin(time*0.001*wave.x))) + 10.0;\n    float totalPoints = floor( 50.0-sin(time)*10.0) + 10.0;\n    \n    float radian = degToRad(360.0/totalPoints);\n    \n    float y = 0.0;\n    float multiplier = floor(10.0 + wave.x + wave.y) + 10.0;\n    \n    int points = int(totalPoints);\n    for(int i=0; i<points; ++i){\n        float product = float(i) * multiplier;\n        \n     \tvec2 start = vec2(cos(float(i)*radian), sin(float(i)*radian));\n        \n        mat2 r = rot(pow(time,1.5)*0.007);\n        \n        start = r * start;\n        \n        //vec2 end = rotate2d(degToRad( sin(time)*180.0 )) * start;\n        \n        vec2 end = vec2(cos(product*radian), sin(product*radian));\n        \n        //mat2 r2 = rot(2.0*PI*noise(uv)*0.01);\n        end = r * end;\n        \n        y += drawLine(uv,start,end);\n        \n        //y += drawCircle(start-uv,0.1);\n    }\n    \n    vec2 start = vec2(1.0,1.0);\n    vec2 translate = vec2(cos(time),sin(time));\n    //translate *= 0.5;\n    start = translate;\n    vec2 end = vec2(-cos(time),-sin(time));\n    \n    //float y = drawLine(uv,start,end);\n    //float b2;\n    \n    //y += drawCircle(start-uv,0.1);\n    //b2 = drawCircle(end-uv,0.1);\n    \n    //y += _circle(uv,0.3);\n    vec3 pal = palette(0.5,vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.5,0.9), vec3(0.5,0.5,0.5));\n    vec3 pal2 = palette(0.3,vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.5,0.9), vec3(0.5,0.5,0.5));\n    \n\tvec3 col = vec3(y, y, y) * pal;\n    \n    //col = mix(col,pal2,noise(wave.xy));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}