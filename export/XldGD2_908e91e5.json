{"ver":"0.1","info":{"id":"XldGD2","date":"1471723661","viewed":212,"name":"Smooth Spiral","username":"revers","description":"Simple 2D spiral. The spiral formula is taken from [url=https://www.shadertoy.com/view/MddSRB]\"spiraling video\" by FabriceNeyret2.[/url]","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Created by Kamil Kolaczynski (revers) - 2016\n *\n * Licensed under Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n *\n * The spiral formula is taken from \"spiraling video\" by FabriceNeyret2 ( https://www.shadertoy.com/view/MddSRB )\n * \n * The shader was created and exported from Synthclipse (http://synthclipse.sourceforge.net/)\n */\n\n// You can play with this value to get different shapes of spiral:\nconst int Spiral = 1;\n\nconst float Multiplier = 0.607;\nconst float Power = 1.0;\n\n#define PI 3.141592\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    vec2 p = uv;\n\tp.x *= iResolution.x / iResolution.y;\n\n\tfloat a = (atan(p.y, p.x) * 6.0 / PI) * 0.5 + 0.5;\n\tfloat r = length(p);\n\n\tvec2 q = vec2(a, log(r) * Multiplier);\n\n\tq.y += q.x * float(Spiral) / 6.0;\n\n\tfloat g = fract(q.y);\n\tfloat m = sqrt(g);\n\tfloat n = sqrt(1.0 - g);\n\tfloat f = mix(m, n, m);\n\n\ta = fract(a * 0.5 - iTime * 0.5);\n\ta = smoothstep(0.0, 0.8, a) - smoothstep(0.8, 1.0, a);\n\n    vec3 col = vec3(mix(a, 0.0, max(0.0, f * 2.0 - 0.2)) * Power, f, 1.0);\n    col = col * col;\n    col = pow(col, vec3(0.4545));\n    \n    // vignette by iq\n\tcol *= 0.5 + 0.5 * pow((uv.x + 1.0) * (uv.y + 1.0) * (uv.x - 1.0) * (uv.y - 1.0), 0.2);\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}