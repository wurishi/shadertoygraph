{"ver":"0.1","info":{"id":"McccDn","date":"1730477635","viewed":173,"name":"random spawner with color","username":"nayk","description":"source  https://www.shadertoy.com/view/XfdcR7 https://www.shadertoy.com/view/ldBXDD https://www.shadertoy.com/view/mtyGWy","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["noise","random","particles","hash","bound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Random function from https://thebookofshaders.com/\nfloat random(vec2 st) {\n    return fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n#define DOT_SPACING 30.0   // Increase for more space between dots\n#define DOT_SIZE 0.3      // Dot radius (0.0 to 1.0)\n#define SPAWN_WIDTH 1.5   // Width of spawn area (0.0 to 1.0)\n#define SPAWN_HEIGHT 1.3  // Height of spawn area (0.0 to 1.0)\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    \n    uv.x  *= iResolution.x/iResolution.y;\n    \tvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // distance of current pixel from center\n\tfloat cLength = length(cPos);\n\n\tuv+= (cPos/cLength)*cos(cLength*5.0-iTime*1.0) * 0.03;\n    // Calculate the grid size in UV space\n    float gridSize = 1.0/DOT_SPACING;\n    \n    // Calculate spawn area boundaries in grid space\n    vec2 spawnMin = vec2(-SPAWN_WIDTH, -SPAWN_HEIGHT);\n    vec2 spawnMax = vec2(SPAWN_WIDTH, SPAWN_HEIGHT);\n    \n    // Get cell center position first\n    vec2 cell = floor(uv * DOT_SPACING);\n    vec2 cell_center = (cell + 0.5) / DOT_SPACING;\n   \n    // Check if cell center is within spawn bounds before drawing\n    bool validSpawnPoint = \n        cell_center.x >= spawnMin.x && \n        cell_center.x <= spawnMax.x && \n        cell_center.y >= spawnMin.y && \n        cell_center.y <= spawnMax.y;\n    \n    // Calculate distance from current pixel to cell center\n    float dist = length(uv - cell_center);\n    \n    // Generate random value for this cell\n    float rnd = random(cell);\n         vec2 uv3 = fragCoord/iResolution.xy-0.5;\n    vec2 uv0 = uv3;\n    vec3 finalColor = vec3(0.0);\n    vec3 col;\n    for (float i = 0.0; i < 4.0; i++) {\n        uv3 = fract(uv3 * 1.5) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n\n         col = palette(length(uv0) + i*.4 - iTime*.4);\n\n        d = sin(d*7. + iTime)/8.;\n        d = abs(d);\n\n        d = pow(0.01 / d, 1.2);\n\n        finalColor += col * d;\n    }\nrnd+=random(cell*0.002*cos(iTime*1.001))+col.x;\n\n    float dot_visible = (rnd > 0.7 && validSpawnPoint) ? 1.0 : 0.0;\n    \n    // Draw dot if within radius and visible\n    float dot = dist < (DOT_SIZE / DOT_SPACING) ? dot_visible : 0.0;\n   \n    \n    fragColor = vec4(vec3(dot)*col, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}