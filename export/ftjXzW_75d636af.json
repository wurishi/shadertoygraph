{"ver":"0.1","info":{"id":"ftjXzW","date":"1627202928","viewed":90,"name":"Drag and Drop Rectangle","username":"AshutoshR","description":"A simple Drag and Drop implementation on a rectangle","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","primitive","draganddrop"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Rect {\n    float x1;\n    float y1;\n    float width;\n    float height;\n} rect;\n\nvoid setupScene() {\n    rect.x1 = 100.0;\n    rect.y1 = 100.0;\n    rect.width = 100.0;\n    rect.height = 90.0;\n}\n\nvec3 getPixelColor(vec2 cord) {\n    if (cord.x > rect.x1 && cord.x < (rect.x1 + rect.width) && cord.y > rect.y1 && cord.y < (rect.y1 + rect.height)) {\n        return vec3(1 , 1, 1);\n    }\n    return vec3(0 ,0 , 0);\n}\n\nvoid setRectPosition(vec2 pos) {\n    rect.x1 = pos.x;\n    rect.y1 = pos.y;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    setupScene();\n    vec2 rectNewPos = vec2(iMouse.x - rect.width/2.0,iMouse.y - rect.height/2.0);\n    setRectPosition(rectNewPos);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = getPixelColor(fragCoord);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}