{"ver":"0.1","info":{"id":"MXsGzf","date":"1707788199","viewed":77,"name":"bad raymarched heart","username":"int_45h","description":"Inspired by the following video: https://www.youtube.com/watch?v=aNR4n0i2ZlM","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["e"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n#define STEPS 80\n#define MIN_DIST .001\n#define MAX_DIST 100.\n#define FOV 60.\n#define FOV_RADIANS (60.*PI/180.)\n\n\n//#define STYLIZED\n#define POST_STEPS 8.\n\nint dither_matrix[64] = int[](\n    0,32,8,40,2,34,10,42,\n    48,16,56,24,50,18,58,26,\n    12,44,4,36,14,46,6,38,\n    60,28,52,20,62,30,54,22,\n    3,35,11,43,1,33,9,41,\n    51,19,59,27,49,17,57,25,\n    15,47,7,39,13,45,5,37,\n    63,31,55,23,61,29,53,21\n);\n\nvec4 posterize(vec4 col, float steps)\n{\n    return floor(col*steps)/steps;\n}\n\nvec4 nearest_palette(vec4 x)\n{\n    return posterize(x, POST_STEPS);\n}\n\nfloat luma(vec4 c)\n{\n    return dot(c, vec4(.2126,.7152,.0722,0.));\n}\n\nvec4 dither(vec4 col, vec2 uv)\n{\n    int x_m = int(uv.x) % 8;\n    int y_m = int(uv.y) % 8;\n    float M = float(dither_matrix[y_m*8+x_m])/64.;\n    \n    return nearest_palette(col+(M-.5f));\n}\n\nvec4 brightness(vec4 col, float b)\n{\n    return (col + vec4(b-1.0));\n}\n\nvec4 contrast(vec4 col, float c)\n{\n    return (col*c + ((1.0-c)/2.));\n}\n\nbool threshold(vec4 v, float c)\n{\n    bvec4 res = lessThan(v, vec4(c));\n    return (res.x && res.y && res.z);\n}\n\n\nvec4 default_color(vec3 p)\n{\n    vec2 uv = p.xy;\n    uv = uv*2.-1.;\n    \n    float screen_dist = sqrt(uv.x*uv.x+uv.y*uv.y);\n    return mix(\n        vec4(92, 60, 130, 0)/255.99,\n        vec4(139, 96, 189, 0)/255.99,\n        1.-screen_dist\n    );\n}\n\nfloat sd_sphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\n// Taken from https://www.youtube.com/watch?v=aNR4n0i2ZlM\nfloat sd_heart(vec3 p, float r)\n{\n    vec3 p_prime = p;\n    p_prime.z = p_prime.z*(1.-p_prime.y/15.);\n    p_prime.y = 1.3*p_prime.y - abs(p_prime.x)*sqrt((20.-p_prime.x)/40.);\n    return length(p_prime)-r;\n}\n\nfloat get_dist(vec3 p)\n{\n    float r = 1. + .2*(.5+.5*sin(2.*PI*iTime));\n    return sd_heart(p-vec3(0.,0.,5.), r);\n}\n\nvec3 get_normal(vec3 p)\n{\n    vec2 offset = vec2(0., .001);\n    vec3 dP = vec3(\n        get_dist(p-offset.yxx) - get_dist(p+offset.yxx),\n        get_dist(p-offset.xyx) - get_dist(p+offset.xyx),\n        get_dist(p-offset.xxy) - get_dist(p+offset.xxy)\n    );\n    \n    return normalize(dP);\n}\n\n\nfloat lambert(vec3 pos, vec3 n, float e)\n{\n    float l = max(length(pos), .001);\n    float a = e / (l*l + l);\n    \n    float n_dot_l = max(dot(normalize(n), pos), 0.);\n    return n_dot_l * a;\n}\n\nfloat bp_specular(vec3 v, vec3 l, vec3 n, float g)\n{\n    vec3 h = normalize(l + v);\n    return pow(max(dot(n, h), 0.), g);\n}\n\nvec3 blinn_phong(   vec3 v,\n                    vec3 l, \n                    vec3 n, \n                    vec3 c,\n                    vec3 a_c,\n                    float e,\n                    float g)\n{\n    vec3 k_D = lambert(l, n, e) * c;\n    vec3 k_S = 0. * vec3(1.) * bp_specular(v, l, n, g);\n    return c * (a_c + k_D + k_S);\n}\n\nvec4 raymarch(vec2 uv)\n{\n    float tan_fov = tan(FOV_RADIANS*.5);\n    //uv = vec2(uv.x, 1.-uv.y);\n    vec2 uv_prime = uv*2.-1.;\n    uv_prime *= vec2(1., iResolution.y/iResolution.x)*tan_fov;\n    \n    vec3 O = vec3(0.);\n    vec3 D = normalize(vec3(uv_prime, 1.));\n    float t = 0.;\n    \n    for (int i=0; i<STEPS; i++)\n    {\n        vec3 p = O+D*t;\n        float dist = get_dist(p);\n        t += dist;\n        \n        if (t > MAX_DIST)\n            break;\n        \n        if (dist < MIN_DIST)\n        {\n            vec3 n = get_normal(p);\n            vec3 k_A = vec3(1., .5, .5) * 0.4;\n            vec3 c = blinn_phong(\n                p, \n                vec3(0., -1., 1.),\n                n,\n                vec3(.9, .7, .8),\n                k_A,\n                1.,\n                100.\n            );\n            \n            //return vec4(n*.5+.5, 1.);\n            return vec4(c, 1.);\n        }\n    }\n    \n    vec4 default_col = default_color(vec3(uv, 1.));\n    #ifdef STYLIZED\n    default_col *= .6;\n    #endif\n    return default_col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = raymarch(uv);\n    \n    #ifdef STYLIZED\n    color = contrast(color, 1.2);\n    color = threshold(color, .4) ? color*1.4 : brightness(color, 1.7);;\n    color = mix(\n        vec4(.2,0.,0.,0.),\n        vec4(.8,0.,0.,0.),\n        luma(color)\n    );\n    color = dither(color, fragCoord);\n    #endif\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}