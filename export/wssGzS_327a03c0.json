{"ver":"0.1","info":{"id":"wssGzS","date":"1546761828","viewed":201,"name":"Tunnel hidding","username":"rodgzilla","description":"tunnel widening","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MIN_DIST 0.01\n#define MAX_DIST 100.\n#define MAX_STEPS 100\n#define SURF_SHIFT 0.1\n#define FOV_PARAM 2.\n#define FORWARD_SPEED 10.\n\nvec3 palette(float t) {\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1, 1, 0.5);\n    vec3 d = vec3(0.8, 0.9, 0.3);\n \treturn (a + b * cos(6.28138 * (c * t + d)));\n}\n\nfloat cubicPulse(float c, float w, float x) {\n\tx = abs(x - c);\n    if (x > w) return 0.;\n    x /= w;\n    \n    return 1. - x * x * (3. - 2. * x);\n}\n\nmat2 rot2d(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    \n    return mat2(c, s, -s, c);\n}\n\nfloat GetDistSphere(vec3 p, vec4 sphere){\n    return length(sphere.xyz - p) - sphere.w;\n}\n\nfloat GetDistSphereRep(vec3 p, vec3 c, vec4 sphere) {\n    vec3 q = mod(p, c) - 0.5 * c;\n    \n    return GetDistSphere(q, sphere);\n}\n\nfloat GetDistPlane(vec3 p) {\n\tfloat dist = 2.5 + cubicPulse(0.85, 0.15, fract(iTime / 5.)) * 100.; \n    float d = p.y + dist; // floor\n\td = min(d, dist - p.y); // roof\n    d = min(d, p.x + dist); // left\n    d = min(d, dist - p.x); // right\n    \n    \n    return d;\n}\n\nfloat GetDist(vec3 p){\n    p.xy *= rot2d(p.z / 100.);\n//    p.xy *= rot2d(sin(iTime) * sin(p.z));\n//    p.xy *= rot2d(.4 * sin(4. * iTime) * sin(0.5 * p.z));\n    vec4 sphere = vec4(0, 0, 3., 1.);\n    vec3 rep = vec3(5., 5., 5.);\n    float dSphere = GetDistSphereRep(p, rep, sphere);\n    float dPlane = GetDistPlane(p);\n        \n    return min(dSphere, dPlane);\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n    float d = 0.;\n    \n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + d * rd;\n        float dScene = GetDist(p);\n        d += dScene;\n        \n        if (dScene < MIN_DIST || dScene > MAX_DIST) {\n            break;\n        }\n    }\n    \n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    \n    vec3 n = GetDist(p) - vec3(\n        GetDist(p - e.xyy),\n        GetDist(p - e.yxy),\n        GetDist(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 light = vec3(0, 0, FORWARD_SPEED * iTime + 1.);\n//    light.xz = (light.xz - vec2(0, 4)) * rot2d(iTime) + vec2(0, 4);\n    vec3 toLight = light - p;\n    vec3 n = GetNormal(p);\n    float dif = dot(n, normalize(toLight));\n    float d = RayMarch(p + SURF_SHIFT * n, normalize(toLight));\n    \n    if (d < length(toLight)) {\n        dif *= .1;\n    } \n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= FOV_PARAM;\n\tvec3 col = vec3(0);\n//    vec3 ro = vec3(0);\n    vec3 ro = vec3(0, 0, FORWARD_SPEED * iTime);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n\tfloat d = RayMarch(ro, rd);\n    vec3 p = ro + d * rd;\n    float dif = GetLight(p);\n    col = dif * palette(d / MAX_DIST);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}