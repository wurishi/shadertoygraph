{"ver":"0.1","info":{"id":"NtGfRh","date":"1663969209","viewed":151,"name":"Tiles with lighting","username":"MrHAX00","description":"Wanted to see if I could make something within less than an hour and this is what I ended up with!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["2d","lighting","fake3d","uvbending"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Zoom .25\n#define LightReach 50.\n\n//from iq\nvec3 Hash23(vec2 Point){\n    return vec3(\n        fract(cos(dot(Point, vec2(67.47834, 52.5363)))*45363.46356),\n        fract(cos(dot(Point, vec2(84.25652, 34.5474)))*34364.57434),\n        fract(cos(dot(Point, vec2(56.74834, 87.2445)))*67343.64473)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 LightSource = vec3(cos(iTime) * 2. - iTime * .25, sin(iTime) * 2. + iTime * .25, 2. + cos(iTime * .4));\n\n    vec2 LocalUv = fract((fragCoord - iResolution.xy * .5) / iResolution.y / Zoom + vec2(-iTime, iTime) * .25) - .5;\n    vec2 GlobalUv = floor((fragCoord - iResolution.xy * .5) / iResolution.y / Zoom + vec2(-iTime, iTime) * .25);\n\n    vec3 Normal = normalize(vec3(LocalUv, 1.));\n    vec3 Position = vec3(LocalUv + GlobalUv, 0.);\n    \n    if (mod(GlobalUv.y + GlobalUv.x, 2.) == 1. && LocalUv != clamp(LocalUv, -.4, .4)) {\n        if (abs(LocalUv.x) > abs(LocalUv.y)) {\n            GlobalUv -= vec2(-sign(LocalUv.x), 0.);\n            Normal = normalize(vec3(-sign(LocalUv.x), 0., 1.));\n        } else {\n            GlobalUv -= vec2(0., -sign(LocalUv.y));\n            Normal = normalize(vec3(0., -sign(LocalUv.y), 1.));\n        }\n    }\n    \n\n    vec3 col = Hash23(GlobalUv) * pow(dot(Normal, normalize(LightSource - Position)) * clamp(1. - length(LightSource - Position) / LightReach, 0., 1.), 3.);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}