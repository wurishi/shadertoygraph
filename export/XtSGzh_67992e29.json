{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Mostly taken from \n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n\nconst float MAX_TRACE_DISTANCE = 6.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 40;\n\n\nconst float loopSpeed   = .1;\nconst float loopTime    = 5.;\nconst float impactTime  = 1.;\nconst float impactFade  = .3;\nconst float fadeOutTime = .03;\nconst float fadeInTime  = .4;\nconst float whiteTime   = .3; // fade to white\n    \n  \n  \n\n// Trying to sync by using AND's code from\n// https://www.shadertoy.com/view/4sSSWz\n#define WARMUP_TIME     (2.0)\n\n// Shadertoy's sound is a bit out of sync every time you run it :(\n#define SOUND_OFFSET    (-0.0)\n\n\n\nconst int NUM_PLANETS = 1;\nvec3 planets[ NUM_PLANETS ];\n\nconst vec3 sun = vec3( 0. );\n\nvec2 impactLU[ 58 ];\n\n\n\n\n\n\n\n//-------\n// Extra Util Functions\n//-------\n\n\nvec3 hsv(float h, float s, float v)\n{\n  return mix( vec3( 1.0 ), clamp( ( abs( fract(\n    h + vec3( 3.0, 2.0, 1.0 ) / 3.0 ) * 6.0 - 3.0 ) - 1.0 ), 0.0, 1.0 ), s ) * v;\n}\n\n\n\n\nfloat hash (float n)\n{\n\treturn fract(sin(n)*43758.5453);\n}\n\nfloat noise (in vec3 x)\n{\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\n\tf = f*f*(3.0-2.0*f);\n\n\tfloat n = p.x + p.y*57.0 + 113.0*p.z;\n\n\tfloat res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n\t\t\t\t\t\tmix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n\t\t\t\t\tmix(mix( hash(n+113.0), hash(n+114.0),f.x),\n\t\t\t\t\t\tmix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n\treturn res;\n}\n\n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec3 tri3(in vec3 p){return vec3( tri(p.z+tri(p.y*1.)), tri(p.z+tri(p.x*1.)), tri(p.y+tri(p.x*1.)));}\n                                 \n\n// Taken from https://www.shadertoy.com/view/4ts3z2\nfloat triNoise3D(in vec3 p, in float spd)\n{\n    float z=1.4;\n\tfloat rz = 0.;\n    vec3 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec3 dg = tri3(bp*2.);\n        p += (dg+iTime*.1*spd);\n\n        bp *= 1.8;\n\t\tz *= 1.5;\n\t\tp *= 1.2;\n        //p.xz*= m2;\n        \n        rz+= (tri(p.z+tri(p.x+tri(p.y))))/z;\n        bp += 0.14;\n\t}\n\treturn rz;\n}\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time , in float timeInLoop, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n    float r = time;\n    \n    float extraSweep =  pow((clamp( timeInLoop , 1. , 3. ) - 3.), 2.);\n    float x = ( timeInLoop/2. + 2. ) *cos( 1.3 + .4 * timeInLoop - .3 * extraSweep );\n    float z = ( timeInLoop/2. + 2. ) *sin( 1.3 + .4 * timeInLoop - .3 * extraSweep );\n    \n   \n\tcamPos = vec3(x,.7,z);\n    camTar = vec3(timeInLoop / 2.,0.0,0.0);\n}\n\n\n\n//----\n// Distance Functions\n// https://iquilezles.org/articles/distfunctions\n//----\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)- s* (1.+ .4 * triNoise3D( p * .1 ,.3 ) + .2* triNoise3D( p * .3 ,.3 )) ;\n}\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n\n\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n    vec3 rot = vec3( 0. );//vec3( iTime * .05 + 1., iTime * .02 + 2. , iTime * .03  );\n    // Rotating box\n   \t//vec2 res = vec2( rotatedBox( pos , rot , vec3( 0.7 ) , .1 ) , 1.0 );\n   \t\n    vec2 res = vec2( sdSphere( pos , .8 ) , 1. );\n    \n    for( int i = 0; i < NUM_PLANETS; i++){\n    \tvec2 res2 = vec2( sdSphere( pos - planets[i] , .1 ), 2. );\n   \t\tres = opU( res , res2 );\n    }\n    \n   \treturn res;\n    \n}\n\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n    \n}\n\n\n\n//------\n// Volumetric funness\n//------\n\nfloat posToFloat( vec3 p ){\n \n    float f = triNoise3D( p * .2 + vec3( iTime * .01 , 0. , 0.), .1 );\n    return f;\n    \n}\n\n\n\n// box rendering for title at end\nfloat inBox( vec2 p , vec2 loc , float boxSize ){\n \t\n    if( \n        p.x < loc.x + boxSize / 2. &&\n        p.x > loc.x - boxSize / 2. &&\n        p.y < loc.y + boxSize / 2. &&\n        p.y > loc.y - boxSize / 2. \n    ){\n        \n     return 1.;  \n        \n    }\n    \n\n   \n    return 0.;\n    \n    \n}\n\n\nfloat impact( vec2 p , float stillness ){\n  \n\n    float f = 0.;\n    \n    for( int i = 0; i < 58; i++ ){\n    \t\n        for( int j = 0; j < 8; j++ ){\n            \n            float size = (0.+( 20. * float( j ))) * stillness + 10.;\n            vec2 lu = impactLU[ i ] * size;\n            f += inBox( p , vec2( iResolution / 2. ) + lu , size );\n            \n            \n        }\n \n    }\n    \n\n \n  \n    \n    return f/8.;\n    \n    \n}\n\n#define FOG_STEPS 20\nvec4 overlayFog( vec3 ro , vec3 rd , vec2 screenPos , float hit ){\n \n    float lum = 0.;\n    vec3 col = vec3( 0. );\n    \n    float nSize = .002 * hit;\n   \tfloat n = (noise(vec3(2.0*screenPos, abs(sin(iTime * 10. ))*.1))*nSize) -.5* nSize;\n    for( int i = 0; i < FOG_STEPS; i++ ){\n        vec3 p = ro * ( 1. + n )  + rd  * ( MAX_TRACE_DISTANCE / float( FOG_STEPS))  * float( i );\n        \n        vec2 m  = map( p );\n\n        if( m.x < 0.0 ){ return vec4( col , lum ) / float( FOG_STEPS ); }\n        \n        \n      //\tm.x =  pow(clamp( m.x , 0. , 1. ),.1) * 10.;\n        float ss =  pow( clamp(pow( m.x * 10. , 3.)  , 0. , 5. )/5. , 1. );//m.x;// smoothstep( m.x , 0.2, .5 ) / .5;\n        \n        \n        float planetFog = 0.;\n        //planetFog += (1. / length( p-sun ));\n        \n        //for( int i  = 0; i < NUM_PLANETS; i++ ){\n            \n        planetFog += (10./ (length( p-planets[0] ) * length( planets[0] )));\n            \n        //}\n        \n        //Check to see if we\n        \n        if( length( p ) < 1.4 && length( p ) > .8 ){\n           \n            \n         \n            float d = (1.4 - length( p )) / .6;\n            lum += ss * 20. * posToFloat( p * (3. / length( p )) ) * d;//30. / length( p );\n            col += ss * vec3( 1. , 0. , 0. ) * 50. *  d* posToFloat( p* (3. / length( p )) );//* lum;\n        \n        }\n        \n        // TODO: MAKE THIS BETTER!!!!\n        //float fleck = noise( p * 10.);\n        //if( fleck > .99 ){ lum += 10.; col = vec3( 100000. ); }\n        \n        \n        lum += ss * pow( planetFog , 2. ) * .3 * posToFloat( p * .3 * planetFog  + vec3( 100. ));//// + sin( p.y * 3. ) + sin( p.z * 5.);\n        col += ss * planetFog * hsv( lum * .7 * (1. / float( FOG_STEPS))+ .5 , 1. , 1. );\n    }\n    \n    return vec4( col , lum ) / float(FOG_STEPS);\n    \n}\n\n\n\n\n\n/*vec3 doLighting( vec3 ro , vec3 rd ){\n    \n    \n    \n}*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    // CREATING 'IMPACT' \n    \n    \n    // I\n    impactLU[0] = vec2( -16. , 2. );\n\timpactLU[1] = vec2( -16. , 1. );\n\timpactLU[2] = vec2( -16. , 0. );\n\timpactLU[3] = vec2( -16. , -1. );\n\timpactLU[4] = vec2( -16. , -2. );\n    \n    \n    // M\n    impactLU[5] = vec2( -12. , 2. );\n\timpactLU[6] = vec2( -12. , 1. );\n\timpactLU[7] = vec2( -12. , 0. );\n\timpactLU[8] = vec2( -12. , -1. );\n\timpactLU[9] = vec2( -12. , -2. );\n    \n    impactLU[10] = vec2( -10. , 2. );\n\timpactLU[11] = vec2( -10. , 1. );\n\timpactLU[12] = vec2( -10. , 0. );\n\timpactLU[13] = vec2( -10. , -1. );\n\timpactLU[14] = vec2( -10. , -2. );\n    \n    impactLU[15] = vec2( -8. , 2. );\n\timpactLU[16] = vec2( -8. , 1. );\n\timpactLU[17] = vec2( -8. , 0. );\n\timpactLU[18] = vec2( -8. , -1. );\n\timpactLU[19] = vec2( -8. , -2. );\n    \n    // P\n    impactLU[20] = vec2( -4. , 2. );\n\timpactLU[21] = vec2( -4. , 1. );\n\timpactLU[22] = vec2( -4. , 0. );\n\timpactLU[23] = vec2( -4. , -1. );\n\timpactLU[24] = vec2( -4. , -2. );\n\n\timpactLU[25] = vec2( -2. , 2. );\n\timpactLU[26] = vec2( -2. , 1. );\n\timpactLU[27] = vec2( -2. , 0. );\n\n  \n\t// A\n    impactLU[28] = vec2( 2. , 2. );\n\timpactLU[29] = vec2( 2. , 1. );\n\timpactLU[30] = vec2( 2. , 0. );\n\timpactLU[31] = vec2( 2. , -1. );\n\timpactLU[32] = vec2( 2. , -2. );\n    \n    impactLU[33] = vec2( 3. , 2. );\n    \n    impactLU[34] = vec2( 4. , 2. );\n\timpactLU[35] = vec2( 4. , 1. );\n\timpactLU[36] = vec2( 4. , 0. );\n\timpactLU[37] = vec2( 4. , -1. );\n\timpactLU[38] = vec2( 4. , -2. );\n    \n    \n    // extra hooks for p and m...\n    impactLU[39] = vec2( -3. , 2. );\n    impactLU[40] = vec2( -11. , 2. );\n    impactLU[41] = vec2( -9. , 2. );\n    \n    \n    // C\n    \n    impactLU[42] = vec2( 8. , 2.  );\n\timpactLU[43] = vec2( 8. , 1.  );\n\timpactLU[44] = vec2( 8. , 0.  );\n\timpactLU[45] = vec2( 8. , -1. );\n\timpactLU[46] = vec2( 8. , -2. );\n    \n    impactLU[47] = vec2( 9. , 2.  );\n\timpactLU[48] = vec2( 10. , 2.  );\n\n    impactLU[49] = vec2( 9. , -2.  );\n\timpactLU[50] = vec2( 10. , -2.  );\n    \n      \n    // T\n    \n    impactLU[51] = vec2( 15. , 2.  );\n\timpactLU[52] = vec2( 15. , 1.  );\n\timpactLU[53] = vec2( 15. , 0.  );\n\timpactLU[54] = vec2( 15. , -1. );\n\timpactLU[55] = vec2( 15. , -2. );\n    \n    impactLU[56] = vec2( 14. , 2.  );\n\timpactLU[57] = vec2( 16. , 2.  );\n\n\n    \n    \n\n\t\n\n\n\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    \n    \n    \n    float time = max(0.0, iTime - WARMUP_TIME);\n\n    float tInput = time;\n    float timeInLoop = loopTime - time * loopSpeed;\n    \n    for( int i = 0; i < 1; i++ ){\n     \n        float f = float( i );\n        //float r = 5. - mod( tInput , 5. );\n        \n        \n    \tfloat extraSweep =  pow((clamp( timeInLoop , 1. , 3. ) - 3.), 2.);\n        //float extraSweep = 2. - clamp( timeInLoop , 1. , 2. );\n        float r = 4.  - extraSweep * 1. ;\n        \n        \n        planets[i].x = r *(cos( .3 + .03 * timeInLoop));\n        planets[i].z = r *(sin( .3 + .03 * timeInLoop ));\n        \n        \n    }\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, tInput , timeInLoop , m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    //vec2 res = calcIntersection( ro , rd  );\n    \n    vec3 col = vec3( 0. ,0.,0. );\n  \n    if( timeInLoop > impactTime ){ \n        \n        vec2 res = calcIntersection( ro, rd );\n\n        if( res.y == 1. || res.y == 2. ){\n\n           vec3 pos = ro + rd * res.x;\n           vec3 nor = calcNormal( pos );\n\n           vec3 lightDir = pos - planets[0].xyz;\n\n           float lightL = length( lightDir );\n           lightDir = normalize( lightDir );\n\n\n           float match = max(  0. , dot( -nor , lightDir ));\n\n           vec3 refl = reflect( lightDir , nor );\n           float reflMatch = max( 0. , dot( -rd , refl ) );\n\n           //float\n\n           vec3 ambi = vec3( .1 );\n           vec3 lamb = vec3( 1. , .5 , .3 ) * match;\n           vec3 spec = vec3( 1. , .3 , .2 ) * pow(reflMatch,20.);\n           col =  (ambi + lamb + spec) * 3. / lightL; //nor  * .5 + .5;   \n\n        }\n        \n        float hit = 0.;\n        if( res.y == 1. || res.y == 2. ){ hit = 1.; }\n        //vec4 fog = overlayFog( ro , rd , fragCoord.xy , hit );\n        //col += .6 * fog.xyz * fog.w;\n        \n    }\n   \n    \n    // Fading in / fading out\n    float fadeIn = ((loopTime - clamp( timeInLoop , loopTime - fadeInTime , loopTime ))) / fadeInTime;\n    \n    float fadeOut = ((loopTime - clamp( (loopTime- timeInLoop) , loopTime - fadeOutTime , loopTime ))) / fadeOutTime;\n    \n    \n    // Gives us a straight fade to white\n    // to hide some weird noise we were \n    // seeing\n    if( timeInLoop < impactTime + whiteTime ){ col += vec3( 10. * (impactTime + whiteTime - timeInLoop) ); }\n    \n    \n   // if( fadeOut < .99 ){ col = vec3( 1. ); }\n    \n    \n    // TEXT\n    /*if( timeInLoop < impactTime ){ \n        \n        col = vec3( 1. );\n        \n        float imp = impact( fragCoord.xy , max( 0.2 , timeInLoop - fadeOutTime) -.2 );\n        float textFade = pow( max( 0. , timeInLoop - (impactTime - impactFade) ) / impactFade , 2. );\n\t\tcol = vec3( imp ) + vec3( textFade );      \n       // col = vec3( fragCoord.x ,  , 1. );\n        //col = texture( iChannel0 , sin(fragCoord.xy * 10. )).xyz;// vec3( 1. , 1. ,1. ); \n    }*/\n    \n    //col = pow( clamp(col,0.0,1.0), vec3(.8545) );\n   // col += dot(p,p*0.035);\n   // col.r = smoothstep(0.1,1.1,col.r);\n  //  col.g = pow(col.g, 1.1);\n    \n   // col = pow( col , .8 );\n    \n    //float per = ( (loopTime - timeInLoop) / loopTime ); \n    //if(per > .44 && per < .49 ){ col += vec3( 1. , 0. , 0. ); }\n\tfragColor = min( fadeOut , fadeIn )  * vec4(col,1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XtSGzh","date":"1426736041","viewed":167,"name":"impactSoundTest","username":"cabbibo","description":"testing bugs.YAY!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sound","draft","debug"],"hasliked":0,"parentid":"","parentname":""}}