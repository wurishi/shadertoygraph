{"ver":"0.1","info":{"id":"MsfBz4","date":"1495023499","viewed":223,"name":"2D Copper Bars","username":"MarcoLizza","description":"2D old-school copper-bars.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","oldschool","copperbars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Basic colors.\nconst vec4 BRIGHT_RED = vec4(1.0, 0.0, 0.0, 1.0);\nconst vec4 BRIGHT_YELLOW = vec4(1.0, 1.0, 0.0, 1.0);\nconst vec4 BRIGHT_GREEN = vec4(0.0, 1.0, 0.0, 1.0);\nconst vec4 BRIGHT_CYAN = vec4(0.0, 1.0, 1.0, 1.0);\nconst vec4 BRIGHT_BLUE = vec4(0.0, 0.0, 1.0, 1.0);\nconst vec4 BRIGHT_PURPLE = vec4(1.0, 0.0, 1.0, 1.0);\nconst vec4 RED = vec4(0.8, 0.0, 0.0, 1.0);\nconst vec4 YELLOW = vec4(0.8, 0.8, 0.0, 1.0);\nconst vec4 GREEN = vec4(0.0, 0.8, 0.0, 1.0);\nconst vec4 CYAN = vec4(0.0, 0.8, 0.8, 1.0);\nconst vec4 BLUE = vec4(0.0, 0.0, 0.8, 1.0);\nconst vec4 PURPLE = vec4(0.8, 0.0, 0.8, 1.0);\nconst vec4 DARK_RED = vec4(0.4, 0.0, 0.0, 1.0);\nconst vec4 DARK_YELLOW = vec4(0.4, 0.4, 0.0, 1.0);\nconst vec4 DARK_GREEN = vec4(0.0, 0.4, 0.0, 1.0);\nconst vec4 DARK_CYAN = vec4(0.0, 0.4, 0.4, 1.0);\nconst vec4 DARK_BLUE = vec4(0.0, 0.0, 0.4, 1.0);\nconst vec4 DARK_PURPLE = vec4(0.4, 0.0, 0.4, 1.0);\nconst vec4 WHITE = vec4(1.0, 1.0, 1.0, 1.0);\nconst vec4 BRIGHT_GRAY = vec4(0.8, 0.8, 0.8, 1.0);\nconst vec4 DARK_GRAY = vec4(0.4, 0.4, 0.4, 1.0);\nconst vec4 BLACK = vec4(0.0, 0.0, 0.0, 1.0);\n\n// Shader parameters, you would probably define them as \"uniform\".\nconst float FREQUENCY_MULTIPLIER = 5.0;\nconst float AMPLITUDE_MULTIPLIER = 0.25;\nconst float BASE_POSITION = 0.5;\nconst float HEIGHT = 0.0500;\n\n// Computes the copperbar colors for the [uv] pixel.\nvec4 copperbar(in vec2 uv,\n               in float base, in float offset, in float frequency, in float amplitude,\n               in vec4 innerColor, in vec4 outerColor) {\n    float alpha = (iTime + offset) * frequency; // Offset and scale current time.\n    float position = base + (sin(alpha) * amplitude); // Get the copperbar middle position.\n    float ratio = abs(uv.y - position) / HEIGHT; // Normalized (to height) distance.\n    if (ratio > 1.0) { // Pixel is beyond copperbar limit, set to black.\n        return BLACK;\n    }\n    return mix(innerColor, outerColor, ratio); // Mix to generate a gradient.\n}\n\n// Picks the first non-black color in the array.\nvec4 choose(in vec4[5] colors) {\n    for (int i = 0; i < colors.length(); ++i) {\n        vec4 color = colors[i];\n        if (color != BLACK) {\n            return color;\n        }\n    }\n    return BLACK;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = choose(vec4[](\n        copperbar(uv, BASE_POSITION + 0.0, 0.00, FREQUENCY_MULTIPLIER * 1.0, AMPLITUDE_MULTIPLIER * 1.0, BRIGHT_CYAN,    DARK_BLUE),\n        copperbar(uv, BASE_POSITION + 0.0, 0.10, FREQUENCY_MULTIPLIER * 1.0, AMPLITUDE_MULTIPLIER * 1.0, BRIGHT_YELLOW, DARK_RED),\n        copperbar(uv, BASE_POSITION + 0.0, 0.20, FREQUENCY_MULTIPLIER * 1.0, AMPLITUDE_MULTIPLIER * 1.0, BRIGHT_YELLOW, DARK_GREEN),\n        copperbar(uv, BASE_POSITION + 0.0, 0.30, FREQUENCY_MULTIPLIER * 1.0, AMPLITUDE_MULTIPLIER * 1.0, PURPLE, DARK_YELLOW),\n        copperbar(uv, BASE_POSITION + 0.0, 0.40, FREQUENCY_MULTIPLIER * 1.0, AMPLITUDE_MULTIPLIER * 1.0, BRIGHT_GRAY, BLUE)\n    ));\n}\n","name":"Image","description":"","type":"image"}]}