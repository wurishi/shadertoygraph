{"ver":"0.1","info":{"id":"4fV3RD","date":"1712497448","viewed":60,"name":"rotating 3D square (points)","username":"Icaka","description":"Totorial","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ew"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistLine(vec3 ro, vec3 rd, vec3 p){\n    return length(cross(p-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 p){\n    float d = DistLine(ro, rd, p);\n    d = smoothstep(.06, .05, d);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float t = iTime;\n\n    vec3 ro = vec3(3.*sin(t), 2., -3.*cos(t));\n    \n    vec3 lookat = vec3(0.);\n    \n    vec3 f = normalize(lookat-ro);\n    vec3 r = cross(vec3(0., 1., 0.), f);\n    vec3 u = cross(f, r);\n    \n    float zoom = 0.5;\n    vec3 c = ro + f*zoom;\n    vec3 i = c + uv.x*r + uv.y*u;\n    \n    vec3 rd = i-ro;\n    \n   \n    \n    float d = 0.;\n    \n    d += DrawPoint(ro, rd, vec3(1, 1, 1));\n    d += DrawPoint(ro, rd, vec3(-1, 1, 1));\n    d += DrawPoint(ro, rd, vec3(-1, -1, 1));\n    d += DrawPoint(ro, rd, vec3(1, -1, 1));\n    d += DrawPoint(ro, rd, vec3(1, 1, -1));\n    d += DrawPoint(ro, rd, vec3(-1, 1, -1));\n    d += DrawPoint(ro, rd, vec3(-1, -1, -1));\n    d += DrawPoint(ro, rd, vec3(1, -1, -1));\n    \n    // Output to screen\n    fragColor = vec4(d);\n}","name":"Image","description":"","type":"image"}]}