{"ver":"0.1","info":{"id":"tdBXzR","date":"1552683619","viewed":839,"name":"Iridescent Box","username":"polymonster","description":"Experimenting with iridescent effect.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["sdf","box","iridescence"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14\n\nmat3 create_camera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = cross(cu,cw);\n    \n    return mat3( cu, cv, cw );\n}\n\nfloat sd_sphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sd_box( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat bsin(float v)\n{\n    return sin(v) * 0.5 + 1.0;\n}\n\nfloat bcos(float v)\n{\n    return cos(v) * 0.5 + 1.0;\n}\n\nfloat op_union( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat map(vec3 p)\n{\n    return sd_box(p, vec3(2.5));\n}\n\nvec3 sky(vec3 v)\n{\n    vec3 grad_a = vec3(0.9, 0.85, 0.7);\n    vec3 grad_b = vec3(0.5, 0.0, 1.0) * 0.5;\n    \n    float grad_t = v.y * 0.5 + 0.5;\n    \n    return mix(grad_b, grad_a, grad_t);\n}\n\nvec3 calc_normal(in vec3 pos)\n{\n    vec3 eps = vec3(0.001, 0.0, 0.0);\n    vec3 nor;\n    \n    nor.x = map(pos+eps.xyy) - map(pos-eps.xyy);\n    nor.y = map(pos+eps.yxy) - map(pos-eps.yxy);\n    nor.z = map(pos+eps.yyx) - map(pos-eps.yyx);\n    \n    return normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float eps = 0.05;\n    \n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 15.0 + iTime;\n\n    vec3 ro = vec3(cos(iTime) * 10.0, 0.0, sin(iTime) * 10.0);\n    \n    vec3 ta = vec3( -0.5, -0.4, 0.5 );\n    mat3 cam = create_camera( ro, ta, 0.0 );\n    \n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n\tvec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;  \n    \n    vec3 rd = cam * normalize( vec3(p.xy,2.0) );\n    \n    float d = 10.0;\n    float xt = 0.0;\n    vec3 pp = ro;\n   \n    vec3 l = normalize(vec3(0.0, 1.0, 1.0));\n    \n    for(float t = 0.0; t < 20.0; ++t)\n    {\n        pp = ro + rd * xt;\n        d = map(pp);\n        \n        if(d < eps)\n            break;\n        \n        xt += d;\n    }\n    \n    vec3 n = calc_normal(pp);\n    \n    float nv = dot(n, -rd);\n\n    col += sin(nv * vec3(0.0, 1.0, 0.0) * 10.0 * 1.5) * 0.5 + 0.5;  \n    col += sin(nv * vec3(1.0, 0.0, 0.0) * 20.0 * 1.5) * 0.5 + 0.5;  \n    col += sin(nv * vec3(0.0, 0.0, 1.0) * 5.0 * 1.5) * 0.5 + 0.5;\n    col = clamp(normalize(col), 0.0, 1.0);\n    \n    float mask = step(d, eps);\n    float inv_mask = 1.0 - mask;\n    \n    vec3 csky = sky(rd);\n    \n    fragColor = vec4(csky * inv_mask + col * mask, 1.0);\n}","name":"Image","description":"","type":"image"}]}