{"ver":"0.1","info":{"id":"tsScR1","date":"1586081759","viewed":284,"name":"truchet all my own","username":"scry","description":"First truchet done with no tutorial or reference (except of course the noise/rand functions). messy code of course as a result, but fact is the goal was reached!","likes":2,"published":3,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0,uv).rgb*3.;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define time iTime\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n    \n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \n    vec2 ouv = fragCoord/iResolution.xy;\n    vec2 uv = -1. + 2. * ouv;\n    float ar = iResolution.x/iResolution.y;\n    float scroll = time*0.05;\n    vec2 itv = uv;\n    vec2 tuv = itv;\n    itv += scroll;\n    vec2 tv = itv;\n    tv.x *= ar;\n    itv.x *= ar;\n\n    vec3 col = vec3(0.);\n    float s = 3.;\n    col.rg = floor(tv*s)/s;\n    float rt = noise(col.rg*10.);\n    float rt1 = noise(col.rg*1000.);\n    float checker = mod(floor(itv*s).x+floor(itv*s).y,2.);\n    col *= 0.;\n    vec2 uvu = tv;\n    vec2 fv = fract(tv*s)-0.5;\n    vec2 t2 = tv;\n    bool cm = false;\n    if (rt > 0.5) {\n        tv.x = 1.- tv.x;\n        cm = true;\n    }\n    if (rt1 > 0.3) {\n        t2.x = 1.- t2.x;\n    }\n    vec2 sl = fract(tv*s);\n    vec2 sv = mod(floor(itv*s),2.);\n    vec2 slc = sl;\n    if (sl.x+sl.y > 1.) {\n        sl = 1.-sl;\n\n    }\n    float c= length(sl);\n    float c2 = length(1.-sl);\n    if (checker < 1.) {\n        sl = -sl.yx;\n        c = 1.-c;\n    }\n    if (cm == true) {\n        c = 1.-c;\n    }\n    float l = 0.2;\n    vec2 cuv = vec2(sin(atan(sl.x,sl.y)*4.+time*3.)*0.5+0.5,c);\n    \n    cuv.y *= 4.;\n    cuv *= 0.25;\n    float sn = 0.;\n    if (c > 0.5-l && c < 0.5+l || c2 > 0.5-l && c2 < 0.5+l) {\n        col += 1.;\n        sn += 1.;\n    }\n    col *= c*0.5;\n    col += sin(cuv.y*60.);\n\n    col.rg -= sin(cuv.x*20.)*0.5;\n    col.bg = vec2(sin(col.r*3.5),sin(col.b*2.));\n    col.rgb = col.rrb;\n    vec3 bak = texture(iChannel0,tuv).rgb;\n    //cuv -= scroll*0.25;\n    cuv *= 0.1;\n    float ra = 0.45;\n    cuv *= mat2(sin(ra),cos(ra),\n                -cos(ra),sin(ra));\n    cuv = sin(cuv*4.);\n    cuv += 0.5;\n    cuv -= 0.5;\n    cuv *= 8.;\n    cuv *= 0.15;\n    cuv -= scroll*0.5;\n    cuv = mix(cuv,tuv,0.89);\n    vec3 tex = texture(iChannel1,cuv).rgb;\n    vec3 sbak = texture(iChannel0,cuv).rgb;\n    col += 1.;\n    col *= 0.005;\n    col = sbak+0.05;\n    col *= sn;\n    //col.rg = vec2(sin(col.r),cos(col.g))*0.1;\n\n    fragColor = vec4(col,1.);\n    \n    //fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}