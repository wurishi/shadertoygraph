{"ver":"0.1","info":{"id":"XsKBzR","date":"1527475881","viewed":322,"name":"Mini Sequencer ","username":"Plento","description":"A sequencer I made as a challenge to do it with no if statements. Next I want to do it without the array of notes.","likes":11,"published":1,"flags":8,"usePreview":0,"tags":["sound","audio","sequencer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Cole Peterson\n\n// my rendition of a simple sequencer made as a personal challenge for myself.\n// I'm not sure how optimal this approach is but its something \n// Speed and step count can be changed in common tab\n// Graphics are simple and will stay showing 8 steps but you can have any number of steps \n// just make sure you have the same number of elements as steps in getNote()\n// I think later I will make the graphics change with number of steps then optimize them\n\n\n// you will have to restart the shader upon compliation to make it sync up\n// I really hope I dont blow out your ears I fiddled with the volume on multiple speakers \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = 2.0 * vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;\n\t\n    float r = 0.1; // circle radius\n    \n    vec2 loc = vec2(-1.5, 0.5); // initial red circle location\n    \n    loc.x += floor(mod(iTime * seqSpeed, 4.0)); // move circle right every step\n    loc.y -= floor(mod(iTime * seqSpeed / 4.0, 2.0)); // move circle down every 4 steps\n    \n    vec2 uf = vec2(fract(uv * 1.0)) - 0.5; // blue circle coords\n    float c = smoothstep(r , r - 0.008, length(uf)); // repeated blue circles\n    \n    vec2 sl = uv - loc;\n    float a = smoothstep(r + 0.09, (r + 0.04) - 0.2 * (mod(iTime * seqSpeed, 1.0)), length(sl)); // red circle\n    \n    vec3 col = vec3(a, c * 0.5, c * 0.5);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nconst float pi = 3.141592;\n\nfloat w(float hz){ \n    return hz * pi * 2.0;\n}\n\n// simple sine wave used as base for the sound\nfloat SineWave(float t, float hz){ \n    return 1.0 * (sin( w(hz) * t));\n}\n\n// A square wave with a decay \nfloat SquareBlip(float t, float pitch) \n{\n   float x = mod(t, 1.0 / seqSpeed); \n    \n   // will decay acoording to seqSpeed\n   float s = step(0.0, SineWave(t, pitch)) * exp(-9.0 * x); \n    \t\t\t\t\t\t\t\t\t\t\t\t\t\t \n   return s;\n}\n\n// returns next note to be played from index\nfloat getNote(int index) \n{\n    // This is where you program which note you want in which spot on the sequencer\n    \n\tfloat n[8];\n    \n    // C blues scale\n\tn[0] = 3.0;\n\tn[1] = 3.0;   \n    n[2] = 6.0; \n    n[3] = 8.0;\n    n[4] = 9.0;\n    n[5] = 10.0;\n    n[6] = 13.0;\n    n[7] = 15.0;\n    // add more elements when you change step count\n    \n    /*\n    n[0] = 3.0; // C\n\tn[1] = 5.0; // D\n    n[2] = 7.0; // E\n    n[3] = 8.0; // F\n    n[4] = 10.0; // G\n    n[5] = 8.0; // F\n    n[6] = 7.0; // E\n    n[7] = 5.0; // D\n    */\n    \n    return n[index];\n}\n\n// figures out next note to be played\nfloat Seq(float t, float ct)\n{\n    float ocataveBase = 110.0 ;       \n\tfloat root = pow(2.0, 1.0 / 12.0);\n   \n    highp int note = int(floor(t)); // will be a value between 0 and nSteps\n    float freq = ocataveBase * pow(root, getNote(note)); // makes a frequency in semitones\n    return SquareBlip(ct, freq);\n    \n}\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 m = vec2(0.0, 0.0);\n    \n    // will be a value between 0 and nSteps and increments by 1 every second / seqSpeed\n    float t = mod(time * seqSpeed, nSteps); \n  \n    m += vec2(Seq(t, time)) * 0.28; // seq volume\n    \n    return m * 0.2; // master volume\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Sequencer constants\n\n\n//sequencer speed\n#define seqSpeed 6.0\n\n// when you change this, go to getNote() in sound tab and add or remove elements \n#define nSteps 8.0 \n\n\n\n","name":"Common","description":"","type":"common"}]}