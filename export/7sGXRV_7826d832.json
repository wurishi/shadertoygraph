{"ver":"0.1","info":{"id":"7sGXRV","date":"1634912969","viewed":121,"name":"Angular Tetrahedra","username":"spalmer","description":"glowy perspective wireframe my cheap hack way","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["wireframe","lines","tetrahedra","perspective","segment","pill","capsule","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// see https://shadertoy.com/view/ssyXzy\n\n// connect the dots\n\n// angularSeg11 squared\nfloat A(vec3 d, vec3 a, vec3 b)\n{\n    vec3 n = b - a;\n    float m = dot(d, n),\n\t  e = dot(d, a),\n\t  v = clamp((e * m - dot(n, a)) / (dot(n, n) - m * m), 0., 1.),\n\t  u = v * m + e;\n\t//u = max(u, 0.); // not needed here\n    vec3 w = a + v * n - u * d;\n\treturn dot(w, w);\n}\n\nvoid mainImage(out vec4 o, vec2 q)\n{\n    vec2 r = iResolution.xy\n    , s = sin(vec2(0,11) + .5*iTime) * sqrt(2.)\n    , v = vec2(-1,1) * s.yx;\n    vec3 d = normalize(vec3(q - .5*r, r.y).xzy)\n    , a = vec3(0,4.,0)\n    , p[4] = vec3[4](vec3(s,1)+a,vec3(-s,1)+a,vec3(v,-1)+a,vec3(-v,-1)+a)\n    , x, m;\n    float h = 9e9;\n#define A(i, j) h = min(h, A(d, p[i], p[j]))\n    A(0, 1);\n    A(1, 2);\n    A(2, 3);\n    A(3, 0);\n    A(0, 2);\n    A(1, 3);\n    o = vec4(sqrt((.1 - sqrt(h)) * .08 * r.y));\n}","name":"Image","description":"","type":"image"}]}