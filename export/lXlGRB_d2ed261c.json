{"ver":"0.1","info":{"id":"lXlGRB","date":"1707639922","viewed":131,"name":"Plot It","username":"gee8sh","description":"Just a simple, although nowhere near perfect, way to plot an arbitrary function with a thick smooth curve.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["math","calculus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float Thickness = 0.025;\nconst float MaxX = 3.1415926535897932384626433832795;\nconst vec3 A = vec3(0.8, 0.4, 0.2);\nconst vec3 B = vec3(0.2, 0.4, 0.8);\nconst vec3 C = vec3(1.0, 1.0, 1.0);\n\nfloat f(float x) {\n    return 0.5 * (\n                             sin(    x - 0.3*iTime) \n        + 0.7*sin(0.9*iTime)*sin(3.0*x - 0.6*iTime) \n        + 0.5*sin(1.5*iTime)*sin(5.0*x - 0.9*iTime)\n        + 0.3*sin(2.1*iTime)*sin(7.0*x - 1.2*iTime)\n    );\n}\n\n// -------------------------------------------------- //\n\nconst float DivMaxX = 1.0 / MaxX;\n\nfloat factor;\n\nfloat derivative(float f) {\n    return dFdx(f) * factor; \n}\n\nvec3 colorAt(vec2 coord) {\n    float y = f(coord.x);\n    float dy = derivative(y);\n    vec2 p = vec2(coord.x, y);\n    vec2 n = normalize(vec2(-dy, 1.0));\n    vec2 delta = coord - p;\n    float d = abs(dot(n, delta));\n    return d > Thickness \n        ? coord.y > y \n            ? A * (1.0 + coord.y * DivMaxX) \n            : B * (1.0 - coord.y * DivMaxX) \n        : C;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float hps = MaxX / iResolution.x;\n    factor = iResolution.x * DivMaxX * 0.5;\n    vec2 coord = (2.0 * fragCoord - iResolution.xy) * hps;\n    fragColor = vec4(0.25 * (\n        colorAt(coord) +\n        colorAt(coord + vec2(hps, 0.0)) +\n        colorAt(coord + vec2(0.0, hps)) +\n        colorAt(coord + vec2(hps, hps))\n    ), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}