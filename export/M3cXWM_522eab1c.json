{"ver":"0.1","info":{"id":"M3cXWM","date":"1719113752","viewed":51,"name":"cloud noise - slimsag","username":"slimsag","description":"Simple cloud background using 3D simplex noise. Press keys [1], [2], [3] to see the different components that make up the final image.","likes":1,"published":1,"flags":16,"usePreview":0,"tags":["clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//------------------------------------------------------------------------\n// simplex3d algorithm\n// ported from https://www.shadertoy.com/view/XsX3zB\n// The MIT License, Copyright Â© 2013 Nikita Miropolskiy\n//------------------------------------------------------------------------\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat loopNoise(float x, float loopLen) {\n    x = mod(x, loopLen);\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * f * (f * (f * 6. - 15.) + 10.);\n    return mix(hash(i), hash(mod(i + 1.0,  loopLen)), u); \n}\n\n//------------------------------------------------------------------------\n// Cloud rendering by @slimsag\n// MIT or Apache licensed at your choosing: https://github.com/hexops/mach/blob/main/LICENSE\n//------------------------------------------------------------------------\nconst int KEY_ONE   = 49;\nconst int KEY_TWO   = 50;\nconst int KEY_THREE = 51;\nconst int KEY_FOUR  = 52;\n\nfloat keyPressed(int keyCode) {\n\treturn texture(iChannel0, vec2((float(keyCode) + 0.5) / 256., .5/3.)).r;   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime;\n\n    // Tunable parameters\n    vec3 sky_blue = vec3(0.529, 0.808, 0.922);\n    vec2 speed = vec2(-0.02, 0);\n    vec3 color = vec3(1, 1, 1);\n    float density = 2.0;\n    float density_speed = 0.025;\n    float noise = 4.0;\n    float noise_speed = 0.02;\n    float edge_sharpness_factor = 3.0;\n    float intensity_factor = 1.0;\n\n    // Cloud calculation\n    vec2 uvt = uv + vec2(speed * time);\n    float v_noise = 0.5 + simplex3d_fractal(vec3(uvt, time * noise_speed) * noise*1.);\n    v_noise = 1.-pow(1.-v_noise, intensity_factor);\n    float density_mask = min(0.5 + simplex3d(vec3(uvt, time * density_speed) * density) * edge_sharpness_factor, 1.);\n    float v = v_noise * density_mask;\n\n    if (keyPressed(KEY_ONE) > 0.) {\n        fragColor = vec4(v_noise);\n    } else if (keyPressed(KEY_TWO) > 0.) {\n       fragColor = vec4(density_mask);\n    } else if (keyPressed(KEY_THREE) > 0.) {\n       fragColor = vec4(v);\n    } else {\n        fragColor = vec4(mix(sky_blue, color, v), v);\n    }\n    return;\n}\n","name":"Image","description":"","type":"image"}]}