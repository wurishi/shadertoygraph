{"ver":"0.1","info":{"id":"4sSGDK","date":"1555485503","viewed":406,"name":"MattiasNewCRT","username":"Mattias","description":"crt for retro","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["crt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Loosely based on postprocessing shader by inigo quilez, License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nprecision highp float;\n\nvec3 xsample( sampler2D tex, vec2 tc )\n{\n\tvec3 s = pow(texture(tex,vec2(tc.x, tc.y)).rgb, vec3(2.2));\n\treturn s;\n}\n\nvec3 filmic( vec3 LinearColor )\n{\n\tvec3 x = max(vec3(0.0), LinearColor-0.004);\n\treturn (x*(6.2*x+0.5))/(x*(6.2*x+1.7)+0.06);\n}\n\nvec3 blur(sampler2D tex, vec2 tc, float offs)\n{\n\tvec4 xoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0) / iResolution.x;\n\tvec4 yoffs = offs * vec4(-2.0, -1.0, 1.0, 2.0) / iResolution.y;\n\t\n\tvec3 color = vec3(0.0, 0.0, 0.0);\n\tcolor += xsample(tex,tc + vec2(xoffs.x, yoffs.x)) * 0.00366;\n\tcolor += xsample(tex,tc + vec2(xoffs.y, yoffs.x)) * 0.01465;\n\tcolor += xsample(tex,tc + vec2(    0.0, yoffs.x)) * 0.02564;\n\tcolor += xsample(tex,tc + vec2(xoffs.z, yoffs.x)) * 0.01465;\n\tcolor += xsample(tex,tc + vec2(xoffs.w, yoffs.x)) * 0.00366;\n\t\n\tcolor += xsample(tex,tc + vec2(xoffs.x, yoffs.y)) * 0.01465;\n\tcolor += xsample(tex,tc + vec2(xoffs.y, yoffs.y)) * 0.05861;\n\tcolor += xsample(tex,tc + vec2(    0.0, yoffs.y)) * 0.09524;\n\tcolor += xsample(tex,tc + vec2(xoffs.z, yoffs.y)) * 0.05861;\n\tcolor += xsample(tex,tc + vec2(xoffs.w, yoffs.y)) * 0.01465;\n\t\n\tcolor += xsample(tex,tc + vec2(xoffs.x, 0.0)) * 0.02564;\n\tcolor += xsample(tex,tc + vec2(xoffs.y, 0.0)) * 0.09524;\n\tcolor += xsample(tex,tc + vec2(    0.0, 0.0)) * 0.15018;\n\tcolor += xsample(tex,tc + vec2(xoffs.z, 0.0)) * 0.09524;\n\tcolor += xsample(tex,tc + vec2(xoffs.w, 0.0)) * 0.02564;\n\t\n\tcolor += xsample(tex,tc + vec2(xoffs.x, yoffs.z)) * 0.01465;\n\tcolor += xsample(tex,tc + vec2(xoffs.y, yoffs.z)) * 0.05861;\n\tcolor += xsample(tex,tc + vec2(    0.0, yoffs.z)) * 0.09524;\n\tcolor += xsample(tex,tc + vec2(xoffs.z, yoffs.z)) * 0.05861;\n\tcolor += xsample(tex,tc + vec2(xoffs.w, yoffs.z)) * 0.01465;\n\t\n\tcolor += xsample(tex,tc + vec2(xoffs.x, yoffs.w)) * 0.00366;\n\tcolor += xsample(tex,tc + vec2(xoffs.y, yoffs.w)) * 0.01465;\n\tcolor += xsample(tex,tc + vec2(    0.0, yoffs.w)) * 0.02564;\n\tcolor += xsample(tex,tc + vec2(xoffs.z, yoffs.w)) * 0.01465;\n\tcolor += xsample(tex,tc + vec2(xoffs.w, yoffs.w)) * 0.00366;\n\n\treturn color;\n}\n\n//Credit: http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 curve(vec2 uv)\n{\n\tuv = (uv - 0.5) * 2.0;\n\tuv *= 1.1;\t\n\tuv.x *= 1.0 + pow((abs(uv.y) / 5.0), 2.0);\n\tuv.y *= 1.0 + pow((abs(uv.x) / 4.0), 2.0);\n\tuv  = (uv / 2.0) + 0.5;\n\tuv =  uv *0.92 + 0.04;\n\treturn uv;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Curve\n\tvec2 FragCoord = vec2( fragCoord.x, fragCoord.y );\n    vec2 q = FragCoord.xy / iResolution.xy;\n    vec2 uv = q;\n    uv = mix( curve( uv ), uv, 0.5 );\n    \n\tvec3 oricol = texture( iChannel0, vec2(q.x,q.y) ).xyz;\n    \n\t// Main color, Bleed\n\tvec3 col;\n\tfloat x =  sin(0.1*iTime+uv.y*13.0)*sin(0.23*iTime+uv.y*19.0)*sin(0.3+0.11*iTime+uv.y*23.0)*0.0012;\n\tfloat o =sin(FragCoord.y*1.5)/iResolution.x;\n\tx+=o*0.25;\n    col.r = blur(iChannel0,vec2(x+uv.x+0.0009,uv.y+0.0009),iResolution.y/800.0).x+0.02;\n    col.g = blur(iChannel0,vec2(x+uv.x+0.0000,uv.y-0.0011),iResolution.y/800.0).y+0.02;\n    col.b = blur(iChannel0,vec2(x+uv.x-0.0015,uv.y+0.0000),iResolution.y/800.0).z+0.02;\n\tfloat i = clamp(col.r*0.299 + col.g*0.587 + col.b*0.114, 0.0, 1.0 );\n\t\n\t// Glow\n\tvec3 glow = (12.5*i*i)*pow(clamp(blur(iChannel0,vec2(x+uv.x+0.2*sin(uv.x + 10.0*iTime)*0.012,uv.y + 0.2*sin( uv.y + 7.3*iTime)*0.012),4.0)-0.3,0.0,1.0),vec3(5.0));\n\tglow = 0.75*clamp( glow, 0.0, 1.0 );\n\tcol += glow;\n\t\n\ti = pow( 1.0 - pow(i,2.0), 1.0 );\n\ti = (1.0-i) * 0.96 + 0.04;\t\n\n\t// Ghosting\n    float ghs = 0.6;\n\tvec3 r = blur(iChannel0,vec2(x-0.014*1.0, -0.027)+0.003*vec2( 0.35*sin(1.0/7.0 + 35.0*uv.y + 0.9*iTime), 0.55*sin( 2.0/7.0 + 10.0*uv.y + 2.37*iTime) )+vec2(uv.x+0.001,uv.y+0.001),5.5+1.3*sin( 3.0/9.0 + 31.0*uv.y + 1.70*iTime)).xyz*vec3(0.5,0.25,0.25);\n\tvec3 g = blur(iChannel0,vec2(x-0.019*1.0, -0.020)+0.003*vec2( 0.35*sin(1.0/9.0 + 35.0*uv.y + 0.5*iTime), 0.55*sin( 2.0/9.0 + 10.0*uv.y + 2.50*iTime) )+vec2(uv.x+0.000,uv.y-0.002),5.4+1.3*sin( 3.0/3.0 + 71.0*uv.y + 1.90*iTime)).xyz*vec3(0.25,0.5,0.25);\n\tvec3 b = blur(iChannel0,vec2(x-0.017*1.0, -0.003)+0.003*vec2( 0.35*sin(2.0/3.0 + 35.0*uv.y + 0.7*iTime), 0.55*sin( 2.0/3.0 + 10.0*uv.y + 2.63*iTime) )+vec2(uv.x-0.002,uv.y+0.000),5.3+1.3*sin( 3.0/7.0 + 91.0*uv.y + 1.65*iTime)).xyz*vec3(0.25,0.25,0.5);\n\t\n\tcol += vec3(ghs*(1.0-0.299))*pow(clamp(3.0*r,0.0,1.0),vec3(2.0))*i;\n    col += vec3(ghs*(1.0-0.587))*pow(clamp(3.0*g,0.0,1.0),vec3(2.0))*i;\n    col += vec3(ghs*(1.0-0.114))*pow(clamp(3.0*b,0.0,1.0),vec3(2.0))*i;\n\t\n\t// Level adjustment (curves)\n    col = clamp(col*1.7 + 1.4*col*col + 2.5*col*col*col*col*col,0.0,10.0);\n\t\n\t// Vignette\n    float vig = (0.1 + 1.0*16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y));\n\tvig = 1.0*pow(vig,0.5);\n\tcol *= vec3(vig);\n\n\t// Scanlines\n\tfloat scans = clamp( 0.35+0.18*sin(6.0*iTime+uv.y*iResolution.y*1.5), 0.0, 1.0);\n\tfloat s = pow(scans,0.9);\n\tcol = col*vec3( s) ;\n\n\t// Vertical lines (aperture) \n\tcol*=1.0-0.23*vec3(clamp((mod(FragCoord.x, 2.0)-1.0)*2.0,0.0,1.0));\n\n\t// Flicker\n    col *= 1.0+0.0017*sin(300.0*iTime);\n\n\t// Noise\n\tvec2 seed = floor(uv*iResolution.xy*0.5)/iResolution.xy;\n\tcol *= vec3( 1.0 ) - 0.15*vec3( rand( seed+0.00001*iTime),  rand( seed+0.000011*iTime + 0.3 ),  rand( seed+0.000012*iTime+ 0.5 )  );\n\t\n\t// Tone map\n\tcol = filmic( col );\n\n\t// Clamp\n\tif (uv.x < 0.0 || uv.x > 1.0)\n\t\tcol *= 0.0;\n\tif (uv.y < 0.0 || uv.y > 1.0)\n\t\tcol *= 0.0;\n\t\t\n\n\t// Crossfade\n    float comp = smoothstep( 0.1, 0.9, sin(iTime) );\n    col = mix( col, oricol, comp );\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}