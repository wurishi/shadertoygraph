{"ver":"0.1","info":{"id":"WlsyR2","date":"1592776760","viewed":1054,"name":"Random Grid Shenanigans","username":"noobay","description":"Trying to be creative for once and play around with a grid.","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["grid","flow","electricity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14\n#define TARGET_COUNT 15\n#define GRID_CELL_SIZE 0.1\n#define RED vec3(1.0,0.0,0.0)\n#define GREEN vec3(0.0,1.0,0.0)\n#define BLUE vec3(0.0,0.0,1.0)\n\nvec2 getGridPosition(in vec2 uv)\n{\n\treturn vec2((uv.x / GRID_CELL_SIZE), (uv.y / GRID_CELL_SIZE));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized frag coordinates\n    vec2 uv = (fragCoord - (0.5 * iResolution.xy)) / iResolution.y;\n    \n    vec2 gridBoundUV = getGridPosition(uv);\n\n    vec2 cellBoundUV = gridBoundUV - round(gridBoundUV);\n    \n    float redIntensity = 0.0;\n    float blueIntensity = 0.0;\n \n    for (int targetIndex = 0; targetIndex < TARGET_COUNT; ++targetIndex)\n    {\n        float f_targetIndex = float(targetIndex);\n\n        float trigOffset = (PI / float(TARGET_COUNT)) * f_targetIndex;\n        vec2 targetPosition = vec2(sin(iTime + trigOffset) * 0.51 + tan(f_targetIndex + trigOffset), cos(iTime + trigOffset) * 0.1 + sin(f_targetIndex + trigOffset));\n        vec2 gridBoundTargetPosition = getGridPosition(targetPosition);\n        vec2 edgeBoundPosition = vec2(gridBoundTargetPosition.x, gridBoundTargetPosition.y);\n\n        // change the op between the lengths to subtraction for some extreme strobe effects\n        float distanceToTarget = length(gridBoundUV - round(gridBoundTargetPosition)) + length((gridBoundUV) - (edgeBoundPosition));\n\n    \tredIntensity += length(GRID_CELL_SIZE / (distanceToTarget * 9.5)  / cellBoundUV) * GRID_CELL_SIZE;\n    \n    }\n\n    for (int targetIndex = 0; targetIndex < TARGET_COUNT; ++targetIndex)\n    {\n        float f_targetIndex = float(targetIndex);\n\n        float trigOffset = (PI / float(TARGET_COUNT)) * f_targetIndex;\n\n        vec2 targetPosition = vec2(sin(iTime + trigOffset) * 0.51 + sin(f_targetIndex + trigOffset), tan(iTime + trigOffset) * 0.1 + sin(f_targetIndex + trigOffset));\n        vec2 gridBoundTargetPosition = getGridPosition(targetPosition);\n        vec2 edgeBoundPosition = vec2(gridBoundTargetPosition.x, gridBoundTargetPosition.y);\n\n        float distanceToTarget = length(gridBoundUV - round(gridBoundTargetPosition)) + distance(gridBoundUV, edgeBoundPosition);\n\n    \tblueIntensity += length(GRID_CELL_SIZE / (distanceToTarget * 15.5)  / cellBoundUV) * GRID_CELL_SIZE;\n    \n    }\n\n\n    vec3 col = vec3(smoothstep(0.2, 1.0, redIntensity + blueIntensity));\n\n\tcol += redIntensity * GREEN;\n   \tcol += blueIntensity * BLUE;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}