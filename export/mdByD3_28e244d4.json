{"ver":"0.1","info":{"id":"mdByD3","date":"1694056339","viewed":28,"name":"Marukyu Striptease","username":"aliendino","description":"A replica of the tiles in the battle scene of Marukyu Striptease from Persona 4\n\n\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define NUM_COLORS 5\n\nfloat dot2( in vec2 v) { return dot(v, v); }\n\n//float sdHeart( in vec2 p , in float s )\n//{\n//    float x = p.x / s;\n//    float y = p.y / s;\n//    \n//    float f = pow(x, 2.) + pow(y, 2.) - 1.;\n//    float g = pow(x, 2.) * pow(y, 3.);\n//    \n//    return pow(f, 3.) - g;\n//}\n\n\n// https://www.shadertoy.com/view/Xt23Ry LMAO\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }\nfloat rand(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n//float rand(vec3 co){ return rand(co.xy+rand(co.z)); }\n\nvec3 rgb(float r, float g, float b){\n    return vec3(r/255., g/255., b/255.);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdRoundedBox( in vec2 p, in vec2 b, in vec4 r )\n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat sdHeart( in vec2 p, in float s)\n{\n    float x = p.x / s;\n    float y = p.y / s;\n\n    x = abs(x);\n    \n    vec2 v = vec2(x, y);\n\n    if( y+x>1.0 )\n        return sqrt(dot2(v-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(v-vec2(0.00,1.00)),\n                    dot2(v-0.5*max(x+y,0.0)))) * sign(x-y);\n}\n\nvec3 colors[NUM_COLORS] = vec3[NUM_COLORS](\n                            vec3(1.0, 0.7, 0.0),\n                            vec3(1.0, 1.0, 1.0),\n                            vec3(1.0, 1.0, 0.0),\n                            vec3(0.0, 1.0, 0.0),\n                            vec3(0.0, 1.0, 1.0)\n                          );\n                          \n\n\nvec3 background_colors[NUM_COLORS] = vec3[NUM_COLORS](\n                            vec3(0.99, 0.33, 0.98),\n                            vec3(0.99, 0.55, 0.29),\n                            vec3(0.35, 0.70, 0.87),\n                            vec3(0.05, 0.34, 0.95),\n                            vec3(0.21, 0.62, 0.35)\n                          );\n\nvec3 heart_colors[NUM_COLORS] = vec3[NUM_COLORS](\n                            vec3(0.98, 0.69, 0.97),\n                            vec3(0.99, 0.83, 0.50),\n                            vec3(0.60, 0.86, 0.99),\n                            vec3(0.5, 1.00, 1.00),\n                            vec3(0.00, 0.60, 0.96)\n                          );\n\nmat2 rotation[4] = mat2[4](\n                            mat2(1.0),\n                            mat2( 0.0, -1.0, \n                                  1.0,  0.0),\n                            mat2(-1.0),\n                            mat2( 0.0,  1.0,\n                                 -1.0,  0.0)\n                          );\n\nvec3 bgColorPicker(float x)\n{\n    return background_colors[int(x) % NUM_COLORS];\n}\n\nvec3 hColorPicker(float x)\n{\n    return heart_colors[int(x) % NUM_COLORS];\n}\n\nmat2 rotationPicker(float x)\n{\n    return rotation[int(x) % 4];\n}\n\nvec3 dirPicker(float x)\n{\n    return colors[int(x) % NUM_COLORS];\n}\n\nfloat noise(in vec2 p){\n    vec4 val = texture(iChannel0, p);\n    return (val.x + val.y + val.z) / 3.0;\n}\n\n\nvec3 backgroundColor(vec2 tile_n){\n//    float n = noise(tile_n* 0.1 + 0.1*sin(iTime*0.01));\n   float n = rand(tile_n* 0.1 + float(int(iTime) % 10));\n   return bgColorPicker(40.*n);\n}\n\nvec3 heartColor(vec2 tile_n){\n//    float n = noise(tile_n* 0.1 + 0.1*sin(iTime*0.01));\n   float n = rand(tile_n* 0.1 + float(int(iTime) % 10));\n   return hColorPicker(40.*n);\n}\n\nmat2 orientation(vec2 tile_n){\n   float n = rand(tile_n* 0.1 + float(int(iTime) % 10));\n   return rotationPicker(40.*n);\n}\n\n\n#define XBORDER 1.12\n#define YBORDER 1.05\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *=  iResolution.x/iResolution.y;\n    \n    uv.x /= XBORDER;\n    uv.y /= YBORDER;\n    vec2 st = uv;  \n    \n    \n    st *= 6.;      // Scale up the space by 3\n    \n    vec2 tile_n = floor(st);\n    \n    st.y = fract(st.y) * YBORDER; // Wrap around 1.0\n    st.x = fract(st.x) * XBORDER;\n    \n    //st += 0.1;\n    \n    //vec2 st = uv * 2.0  - 1.0;\n    \n    st.y = st.y * 2. - YBORDER;\n    st.x = st.x * 2. - XBORDER;\n\n// st.x*=0.5;\n//    float m = (int(tile_n.x) % 5 == 4) ? 0. : 1. ;\n\n    st *= orientation(tile_n);\n    vec3 col = vec3(0.,0.,0.);\n    float s = sdBox(st, vec2(1.0));\n    if (s < 0.0){\n        //+vec2(0.+ noise(vec2(cos(iTime))), 0.7 + sin(iTime))\n        float d = sdHeart(st +vec2(0., 0.7), 1.2);\n        float r = (d > 0.) ? 1. : 0.;\n        \n        float q = sdRoundedBox(st, vec2(0.6), vec4(0.3));\n        col = (d>0.0) ? mix(backgroundColor(tile_n), backgroundColor(tile_n)*0.8, \n                            smoothstep(0.0, 0.5, q)) : \n                        mix(heartColor(tile_n) *1.7, heartColor(tile_n), \n                        smoothstep(0.0, 1.0, length(st)));\n        //col = (d>0.0) ? backgroundColor(tile_n): heartColor(tile_n);\n        \n        \n\n        col = mix( col, heartColor(tile_n)*1.5, 1.0-smoothstep(0.0,0.02,abs(d)) );\n       float n = sdBox(st, vec2(0.8));\n       if (n > 0.0) col =  mix(col, vec3(0.05), smoothstep(0.0, 0.4, n));\n    \n    }\n    //else if (abs(st.x) > 1.0){\n    else {\n        float q = sdRoundedBox(st, vec2(XBORDER, YBORDER), vec4(0.3));\n        col = mix(vec3(0.0), vec3(0.26, 0.18, 0.36), smoothstep(0.0, 0.05,abs(s)));\n    \n    } \n    //else if (abs(st.y) > 1.0){\n      //  col = mix(vec3(0.0), vec3(1.0, 0.1, 1.0), smoothstep(1.0,YBORDER,abs(st.y)));\n    //}\n    \n    \n    \n    \n    // wintergreen vec3(0.1, 1.0,0.3)\n    //vec4 col = vec4(st * r, 0.0, 1.0);\n\n    // Time varying pixel color\n    //vec4 texCol = texture(iChannel0, uv);\n    \n    \n    //col = mix(col, texCol, texCol.a);\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}