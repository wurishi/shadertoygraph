{"ver":"0.1","info":{"id":"4ljGzc","date":"1431210258","viewed":1996,"name":"Art by Numbers I","username":"mhnewman","description":"Inspired by the works of Piet Mondrian","likes":42,"published":1,"flags":0,"usePreview":0,"tags":["procedural","art","mondrian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float duration = 2.2;\n\nconst int maxIter = 8;\nconst float lineWidth = 0.004;\n\nconst vec3 red = vec3(0.7, 0.0, 0.0);\nconst vec3 yellow = vec3(0.9, 0.8, 0.0);\nconst vec3 blue = vec3(0.2, 0.2, 0.8);\n\n\n\nfloat hash11(float p) {\n    vec2 p2 = fract(p * vec2(443.8975, 397.2973));\n    p2 += dot(p2.xy, p2.yx + 19.19);\n    return fract(p2.x * p2.y);\n}\n\nfloat hash13(vec3 p) {\n\tp  = fract(p * vec3(443.8975, 397.2973, 491.1871));\n    p += dot(p.xyz, p.yzx + 19.19);\n    return fract(p.x * p.y * p.z);\n}\n\nvec2 hash21(float p) {\n    vec3 p3 = fract(p * vec3(443.8975, 397.2973, 491.1871));\n    p3 += dot(p3.xyz, p3.yzx + 19.19);\n    return fract(vec2(p3.x * p3.y, p3.z * p3.x));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pos = fragCoord.xy / iResolution.x;\n   \tfloat screenHeight = iResolution.y / iResolution.x;\n    float pixelWidth = lineWidth + 1.0 / iResolution.x;\n    \n    vec2 cellMin = vec2(lineWidth, lineWidth);\n    vec2 cellMax = vec2(1.0 - lineWidth, screenHeight - lineWidth);\n    float cellID = floor(iTime / duration);\n    float t = mod(iTime / duration, 1.0);\n    \n    vec2 imageDetailBias = vec2(0.1 + 0.5 * hash11(cellID + 0.9));\n    //vec2 imageDetailBias = vec2(0.1) + 0.5 * hash21(cellID + 0.9);\n    float imageColorBias = 0.25 + 0.5 * hash11(cellID + 0.8);\n    \n    for (int i = 0; i < maxIter; ++i) {\n        vec2 cellSize = cellMax - cellMin;\n        vec2 split = floor(2.0 * pow(cellSize, imageDetailBias) * hash21(cellID));\n        \n        vec2 cellDiv = vec2(0.2) + 0.6 * hash21(cellID + 0.1);\n        cellDiv = cellMin + split * cellDiv * cellSize;\n        \n        vec2 child = step(cellDiv, pos);\n        \n        cellMin = mix(cellMin, cellDiv, child);\n        cellMax = mix(cellDiv, cellMax, child);\n        cellID = hash13(vec3(cellID, child));\n    }\n    \n    vec3 color;\n    float cell = hash11(cellID) / imageColorBias;\n    if (cell < 0.2)\n        color = red;\n    else if (cell < 0.4)\n        color = yellow;\n    else if (cell < 0.6)\n        color = blue;\n    else if (cell < 0.64)\n        color = vec3(0.0);\n    else\n        color = vec3(1.0);\n        \n    color *= step(cellMin.x + lineWidth, pos.x) * step(pos.x, cellMax.x - lineWidth);\n    color *= step(cellMin.y + lineWidth, pos.y) * step(pos.y, cellMax.y - lineWidth);\n        \n    color *= smoothstep(0.0, 0.1, t) * smoothstep(1.0, 0.9, t);\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}