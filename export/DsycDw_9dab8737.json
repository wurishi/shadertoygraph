{"ver":"0.1","info":{"id":"DsycDw","date":"1696177698","viewed":82,"name":"Water and slime","username":"Gippogrife","description":"water","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2D(vec2 st) {\n    st = vec2(dot(st, vec2(127.1, 311.7)),\n              dot(st, vec2(269.5, 183.3)));\n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\nfloat gradientNoise(vec2 coord) {\n    vec2 i = floor(coord);\n    vec2 f = fract(coord);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    float a = dot(random2D(i), f);\n    float b = dot(random2D(i + vec2(1.0, 0.0)), f - vec2(1.0, 0.0));\n    float c = dot(random2D(i + vec2(0.0, 1.0)), f - vec2(0.0, 1.0));\n    float d = dot(random2D(i + vec2(1.0, 1.0)), f - vec2(1.0, 1.0));\n    return mix(mix(a, b, u.x), mix(c, d, u.x), u.y);\n}\n\nfloat fractalBrownianMotion(vec2 coord) {\n    float amplitude = 0.5;\n    float frequency = 1.0;\n    float total = 0.0;\n    float totalAmplitude = 0.0;\n    int octaves = 3;\n    float persistence = 0.5;\n    float lacunarity = 2.0;\n\n    for (int i = 0; i < octaves; i++) {\n        float noise = gradientNoise(coord * frequency + iTime * 0.5);\n        total += amplitude * noise;\n        totalAmplitude += amplitude;\n        frequency *= lacunarity;\n        amplitude *= persistence;\n    }\n\n    return total / totalAmplitude;\n}\n\nfloat wrappedFractalBrownianMotion(vec2 coord) {\n    float octave1 = fractalBrownianMotion(coord);\n    float octave2 = fractalBrownianMotion(coord + vec2(octave1) * 4.0);\n    return fractalBrownianMotion(coord + vec2(octave2) * 4.0);\n}\n\nfloat sphereSDF(vec3 p, float radius) {\n    return length(p) - radius;\n}\n\nvec2 rotate(vec2 v, float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return vec2(c * v.x - s * v.y, s * v.x + c * v.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = ((fragCoord/iResolution.xy) * 3.0 - 1.5);\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 color = vec3(0.0);\n\n    int numCircles = 6;\n    vec3 backgroundColor = vec3(abs(cos(iTime * 0.3)), abs(cos(iTime * 0.5)), abs(sin(iTime))) / 4.0;\n\n    for (int i = 0; i < numCircles; i++) {\n        vec2 circlePos = vec2(sin(float(i) + iTime / 2.0), cos(float(i) + iTime / 200.0));\n        float circleRadius = 0.2 + 0.3 * fractalBrownianMotion(uv + float(i));\n        vec3 baseColor = vec3(float(i) / float(numCircles), abs(cos(float(i))), abs(sin(float(i)))) * 2.0;\n        float colorVariation = wrappedFractalBrownianMotion(uv + float(i)) * 4.0;\n        vec3 circleColor = baseColor + 0.4 * colorVariation;\n        float distanceToCircle = length(uv - circlePos);\n        float circleSDFValue = distanceToCircle - circleRadius;\n        \n        color += mix(vec3(0.0), circleColor, smoothstep(-0.01, 0.01, circleSDFValue));\n    }\n    \n    color = mix(backgroundColor, color, 0.5);\n\n    fragColor = vec4(color / 5.0, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}