{"ver":"0.1","info":{"id":"7dsGWS","date":"1616491200","viewed":76,"name":"test-101","username":"tangyuan","description":"test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["img"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define STARFIELD_LAYERS_COUNT 12.0\n\nfloat PI = 3.1415;\nfloat MIN_DIVIDE = 64.0;\nfloat MAX_DIVIDE = 0.01;\n\nmat2 Rotate(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flaresize, float rotAngle, float randomN) {\n    float d = length(uv);\n\n    float starcore = 0.05/d;\n    uv *= Rotate(-2.0 * PI * rotAngle);\n    float flareMax = 1.0;\n\n    float starflares = max(0.0, flareMax - abs(uv.x * uv.y * 3000.0));\n    starcore += starflares * flaresize;\n    uv *= Rotate(PI * 0.25);\n\n    starflares = max(0.0, flareMax - abs(uv.x * uv.y * 3000.0));\n    starcore += starflares * 0.3 * flaresize;\n    starcore *= smoothstep(1.0, 0.05, d);\n\n    return starcore;\n}\n\nfloat PseudoRandomizer(vec2 p) {\n    p = fract(p*vec2(123.45, 345.67));\n    p += dot(p, p+45.32);\n\n    return (fract(p.x * p.y));\n}\n\nvec3 StarFieldLayer(vec2 uv, float rotAngle) {\n    vec3 col = vec3(0);\n    vec2 gv = fract(uv) -0.5;\n    vec2 id = floor(uv);\n\n    float deltaTimeTwinkle = iTime * 0.35;\n\n    for (int y = -1; y <= 1; y++) {\n        for (int x = -1; x <= 1; x++) {\n            vec2 offset = vec2(x, y);\n\n            float randomN = PseudoRandomizer(id + offset);\n            float randoX = randomN - 0.5;\n            float randoY = fract(randomN * 45.0) - 0.5;\n            vec2 randomPosition = gv - offset - vec2(randoX, randoY);\n\n            float size = fract(randomN * 1356.33);\n            float flareSwitch = smoothstep(0.9, 1.0, size);\n\n            float star = Star(randomPosition, flareSwitch, rotAngle, randomN);\n\n            float randomStarColorSeed = fract(randomN * 2150.0) * (3.0 * PI) * deltaTimeTwinkle;\n            vec3 color = sin(vec3(0.7, 0.3, 0.9) * randomStarColorSeed);\n\n            color = color * (0.4 * sin(deltaTimeTwinkle)) + 0.6;\n\n            color = color * vec3(1, 0.1,  0.9 + size);\n            float dimByDensity = 15.0/STARFIELD_LAYERS_COUNT;\n            col += star * size * color * dimByDensity;\n         }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv);\n\n    float deltaTime = iTime * 0.01;\n    vec3 col = vec3(0.0);\n    float rotAngle = deltaTime * 0.09;\n\n    for (float i=0.0; i < 1.0; i += (1.0/STARFIELD_LAYERS_COUNT)) {\n        float layerDepth = fract(i + deltaTime);\n        float layerScale = mix(MIN_DIVIDE,MAX_DIVIDE,layerDepth);\n        float layerFader = layerDepth * smoothstep(0.1, 1.1, layerDepth);\n        float layerOffset = i * (3430.00 + fract(i));\n        mat2 layerRot = Rotate(rotAngle * i * -10.0);\n        uv *= layerRot;\n        vec2 starfieldUv = uv * layerScale + layerOffset;\n        col += StarFieldLayer(starfieldUv, rotAngle) * layerFader;\n    }\n\n    fragColor += vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}