{"ver":"0.1","info":{"id":"wtfGzr","date":"1555477896","viewed":168,"name":"bonobono....","username":"suitzero","description":"I don't know why I suddenly writing this..","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hello"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float cloudscale = 1.1;\nconst float speed = 0.03;\nconst float clouddark = 0.5;\nconst float cloudlight = 0.3;\nconst float cloudcover = 0.2;\nconst float cloudalpha = 8.0;\nconst float skytint = 0.5;\nconst vec3 skycolour1 = vec3(0.2, 0.4, 0.6);\nconst vec3 skycolour2 = vec3(0.4, 0.7, 1.0);\n\nconst mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\nvec2 hash( vec2 p ) {\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\tvec2 i = floor(p + (p.x+p.y)*K1);\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));\n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot(n, vec3(70.0));\t\n}\n\nfloat fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 0.1;\n\tfor (int i = 0; i < 7; i++) {\n\t\ttotal += noise(n) * amplitude;\n\t\tn = m * n;\n\t\tamplitude *= 0.4;\n\t}\n\treturn total;\n}\n\n// https://www.shadertoy.com/view/4tdSWr\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x = uv.x*1.7;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec2 cenhead= vec2(0.5);\n    vec2 nose= cenhead;\n    nose.y -= 0.07;\n    vec2 cen = vec2(0.3,0.56);\n    vec2 cen2 = vec2(1.);\n    cen2.x = cenhead.x+(cenhead.x - cen.x);\n    cen2.y = cen.y;\n    vec2 body = vec2(0.5,-0.1);\n    vec2 lip1 = nose -vec2(0.045,0.05);\n    vec2 lip2 = nose +vec2(0.045,-0.05);\n    float r = .25;\n    float p = 2.1;\n    float zh = 3./4.;\n    float a = 0.3;\n\tvec2 fur1 = nose -vec2(0.05,0.05);\n    float noeye = 0.;\n    if((cen.x-uv.x)*(cen.x-uv.x)+(cen.y-uv.y)*(cen.y-uv.y)<.0005)\n    {\n        if(cos(iTime*2.)<0.7)\n        {\n\t\tfragColor = vec4(vec3(0.1),1.0);\n            noeye=1.;\n        }\n\t}if((cen.x-uv.x)<0.02 && -0.02<(cen.x-uv.x) && (cen.y-uv.y)<.01-0.2*(cen.x-uv.x) && (cen.y-uv.y)>-.005+-0.2*(cen.x-uv.x)){\n        if(cos(iTime*2.)>=0.7)\n        {\n            fragColor = vec4(vec3(0.1),1.0);\n            noeye=1.;\n        }\n\t}if((cen2.x-uv.x)*(cen2.x-uv.x)+(cen2.y-uv.y)*(cen2.y-uv.y)<.0005)\n    {\n        if(cos(iTime*2.)<0.7)\n        {\n\t\tfragColor = vec4(vec3(0.1),1.0);\n            noeye=1.;\n        }\n    }if((cen2.x-uv.x)<0.02 && -0.02<(cen2.x-uv.x) && (cen2.y-uv.y)<.01+0.2*(cen2.x-uv.x) && (cen2.y-uv.y)>-.005+0.2*(cen2.x-uv.x)){\n        if(cos(iTime*2.)>=0.7)\n        {\n            fragColor = vec4(vec3(0.1),1.0);\n            noeye=1.;\n        }\n\t}\n    if(noeye==1.){\n    }else{\n        float nofur = 1.;\n        for( float i = -1. ; i < 2. ; i++ )\n        {\n            for( float j = 0. ; j < 2. ; j++ )\n            {\n                vec2 fur =fur1;\n                fur.y= fur1.y - i*0.03;\n                a = i*0.3;\n                if( j == 1.){\n                    fur = nose+vec2(0.13,-0.05);;\n                    fur.y= fur.y - i*0.04;\n                    a = i*0.3 * -1.;\n                }\n                if((fur.x-uv.x)<0.07 && 0.0<(fur.x-uv.x) && (fur.y-uv.y)<.015+a*(fur.x-uv.x) && (fur.y-uv.y)>.013+a*(fur.x-uv.x))\n                {\n                    nofur = 0.;\n                    fragColor = vec4(vec3(0.1),1.0);\n                }\n            }\n        }\n        \n        if( nofur == 0. ){}\n        else if((nose.x-uv.x)*(nose.x-uv.x)+(nose.y-uv.y)*(nose.y-uv.y)<.0013)\n        {\n            fragColor = vec4(vec3(0.1),1.0);\n        }else if(pow((lip1.x-uv.x)*(lip1.x-uv.x),p)+pow((lip1.y-uv.y)*(lip1.y-uv.y)*0.6,p)<0.000002)\n        {\n            float a = length(lip1-uv);\n            a = smoothstep(0.09,0.01,a*.68);\n            fragColor = vec4(vec3(0.9)*a,1.0);\n        }else if(pow((lip2.x-uv.x)*(lip2.x-uv.x),p)+pow((lip2.y-uv.y)*(lip2.y-uv.y)*0.6,p)<0.000002)\n        {\n            float a = length(lip2-uv);\n            a = smoothstep(0.09,0.01,a*.68);\n            fragColor = vec4(vec3(0.9)*a,1.0);\n        }else if(pow((lip1.x-uv.x)*(lip1.x-uv.x),p)+pow((lip1.y-uv.y)*(lip1.y-uv.y)*0.6,p)<0.0000026)\n        {\n            fragColor = vec4(vec3(0.),1.0);\n        }else if(pow((lip2.x-uv.x)*(lip2.x-uv.x),p)+pow((lip2.y-uv.y)*(lip2.y-uv.y)*0.6,p)<0.0000026)\n        {\n            fragColor = vec4(vec3(0.),1.0);\n        }else if((cenhead.x-uv.x)*(cenhead.x-uv.x)+(cenhead.y-uv.y)*(cenhead.y-uv.y)<.1)\n        {\n            float a = length(cenhead-uv);\n            a = smoothstep(1.,0.0,a);\n            fragColor = vec4(vec3(0.31,0.5,0.7)*a,1.0);\n        }else if((cenhead.x-uv.x)*(cenhead.x-uv.x)+(cenhead.y-uv.y)*(cenhead.y-uv.y)<.103)\n        {\n            fragColor = vec4(vec3(0.1),1.0);\n        }else if((body.x-uv.x)*(body.x-uv.x)+(body.y-uv.y)*(body.y-uv.y)*0.2<0.09+0.004*sin(iTime))\n        {\n            float a = length(cenhead-uv);\n            a = smoothstep(1.,0.0,a);\n            fragColor = vec4(vec3(0.31,0.5,0.7)*a,1.0);\n        } \n        else{\n            vec2 p = fragCoord.xy / iResolution.xy;\n            float time = iTime * speed;\n        float q = fbm(uv * cloudscale * 0.5);\n        // Output to screen\n                //ridged noise shape\n        float r = 0.0;\n        uv *= cloudscale;\n        uv -= q - time;\n        float weight = 0.8;\n        for (int i=0; i<8; i++){\n            r += abs(weight*noise( uv ));\n            uv = m*uv + time;\n            weight *= 0.7;\n        }\n\n        //noise shape\n        float f = 0.0;\n        uv = p*vec2(iResolution.x/iResolution.y,1.0);\n        uv *= cloudscale;\n        uv -= q - time;\n        weight = 0.7;\n        for (int i=0; i<8; i++){\n            f += weight*noise( uv );\n            uv = m*uv + time;\n            weight *= 0.6;\n        }\n\n        f *= r + f;\n\n        //noise colour\n        float c = 0.0;\n        time = iTime * speed * 2.0;\n        uv = p*vec2(iResolution.x/iResolution.y,1.0);\n        uv *= cloudscale*2.0;\n        uv -= q - time;\n        weight = 0.4;\n        for (int i=0; i<7; i++){\n            c += weight*noise( uv );\n            uv = m*uv + time;\n            weight *= 0.6;\n        }\n\n        //noise ridge colour\n        float c1 = 0.0;\n        time = iTime * speed * 3.0;\n        uv = p*vec2(iResolution.x/iResolution.y,1.0);\n        uv *= cloudscale*3.0;\n        uv -= q - time;\n        weight = 0.4;\n        for (int i=0; i<7; i++){\n            c1 += abs(weight*noise( uv ));\n            uv = m*uv + time;\n            weight *= 0.6;\n        }\n\n        c += c1;\n\n        vec3 skycolour = mix(skycolour2, skycolour1, p.y);\n        vec3 cloudcolour = vec3(1.1, 1.1, 0.9) * clamp((clouddark + cloudlight*c), 0.0, 1.0);\n\n        f = cloudcover + cloudalpha*f*r;\n\n        vec3 result = mix(skycolour, clamp(skytint * skycolour + cloudcolour, 0.0, 1.0), clamp(f + c, 0.0, 1.0));\n\n        fragColor = vec4( result, 1.0 );\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}