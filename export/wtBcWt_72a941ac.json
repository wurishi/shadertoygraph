{"ver":"0.1","info":{"id":"wtBcWt","date":"1595678122","viewed":85,"name":"NoiseHashTest","username":"Mario8664","description":"Test the hash function of noise.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float x)\n{\n    x = 123.0 * fract(x * 67.0 + 0.1276795);\n    return fract(x*x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float factor = 0.002;\n    float scrollSpeed = 0.08;\n    float yOffset = 0.5;\n    float yScale = 0.5;\n    float xScale = 1.0;\n    float xPrecision = 500.0;\n    float fps = 60.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float inputTime = floor(iTime * fps) / fps * scrollSpeed;\n    \n    float noise = hash( floor((uv.x * xScale + inputTime) * xPrecision) / xPrecision);\n    vec3 col = (abs(uv.y - yOffset * yScale - noise * yScale) <= factor) \n        && uv.x >= 0.0 ? vec3(noise, 0.2, 0.2) : vec3(0.8,1.0,uv.y);\n    \n    col = (abs(uv.y - yOffset * yScale + 0.2 * yScale) <= 0.005) && uv.x >= 0.0 ? vec3(noise, noise, noise) : col; \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}