{"ver":"0.1","info":{"id":"ctdSD7","date":"1685474372","viewed":65,"name":"Raymarching countour lines","username":"franco1234811","description":"Raymarching uses a scalar field, the porpuse of this code is to make a visualizer of the contour lines","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sunion_sdf(float d1, float d2, float k)\n{\n    // Smooth union\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); \n}\n\nfloat circle_sdf(vec2 point, vec2 pos, float radius)\n{\n    return length(point - pos) - radius;\n}\n\nfloat box_sdf(vec2 point, vec2 center, vec2 size) {\n    center = point - center;\n\tvec2 r = abs(center) - size;\n    return min(max(r.x, r.y),0.) + length(max(r,vec2(0,0)));\n}\n\n\n\nvoid test_sample(inout float nearest_dist, float sample_distance)\n{\n    if (sample_distance < nearest_dist)\n    {\n        nearest_dist = sample_distance;\n    }\n}\n\nfloat sample_sdf(vec2 point)\n{\n    float nearest = 1e10;\n    \n    float circle_distance = circle_sdf(point, vec2(0.3f * sin(iTime)), 0.2f);\n    float circle_distance2 = circle_sdf(point, vec2(-0.5f, 0.1f), 0.25f * sin(iTime));\n    float box_distance = box_sdf(point, vec2(0.3f), vec2(0.25f));\n    \n    float k = 0.3f;\n    \n    float dist = sunion_sdf(circle_distance, box_distance, k);\n    dist = sunion_sdf(dist, circle_distance2, k);\n    test_sample(nearest, dist);\n    \n    return nearest;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 pos = 2.0f * (uv - 0.5f); // range [-1, 1]\n    pos.x *= iResolution.x / iResolution.y; // fix aspect ratio\n   \n    float dist = sample_sdf(pos);\n    \n    float fract_part = fract(15.0f * dist);\n    \n    float v = step(fract_part, 0.5f);\n    \n    // Calculates the base colors\n    vec3 color;\n    color = mix(vec3(1.000,0.251,0.000), vec3(0.827,0.051,0.051), v);\n    \n    if (sign(dist) == -1.0f)\n        color = vec3(1.0f) - color;\n    \n    // Decreases it's intensity the further away (note that the intensity stays at 1 when the distance is negative)\n    color *= exp(-abs((sign(dist) + 1.0f) * 0.5f * dist));\n    \n    // Draws the outline\n    float border_thickness = 0.02f;\n    if (abs(dist) < border_thickness)\n    {\n        float t = abs(dist) / border_thickness;       \n        color = mix(vec3(1.0f), color, t);\n    }\n      \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}