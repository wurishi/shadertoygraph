{"ver":"0.1","info":{"id":"XcsBD8","date":"1723684071","viewed":26,"name":"Raymarching Demo1","username":"kitrae","description":"Simple test","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nconst int MAX_STEPS = 100;\nconst float MAX_DIST = 100.0;\nconst float SURF_DIST = 0.01;\n\n// Signed distance functions\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\n// Scene description\nfloat getDist(vec3 p) {\n    float sphere = sdSphere(p - vec3(0, 1, 6), 1.0);\n    float box = sdBox(p - vec3(-2.5, 1, 6), vec3(0.75));\n    float torus = sdTorus(p - vec3(2.5, 1, 6), vec2(0.75, 0.25));\n    float plane = p.y;\n    \n    return min(min(min(sphere, box), torus), plane);\n}\n\n// Normal calculation\nvec3 getNormal(vec3 p) {\n    float d = getDist(p);\n    vec2 e = vec2(0.01, 0);\n    vec3 n = d - vec3(\n        getDist(p - e.xyy),\n        getDist(p - e.yxy),\n        getDist(p - e.yyx)\n    );\n    return normalize(n);\n}\n\n// Raymarching\nfloat rayMarch(vec3 ro, vec3 rd) {\n    float dO = 0.0;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = ro + rd * dO;\n        float dS = getDist(p);\n        dO += dS;\n        if(dO > MAX_DIST || dS < SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\n// Lighting\nfloat getLight(vec3 p) {\n    vec3 lightPos = vec3(2, 5, 3);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 3.0;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormal(p);\n    \n    float diff = clamp(dot(n, l), 0.0, 1.0);\n    float d = rayMarch(p + n * SURF_DIST * 2.0, l);\n    if(d < length(lightPos - p)) diff *= 0.1;\n    \n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 2, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = rayMarch(ro, rd);\n    vec3 p = ro + rd * d;\n    \n    float diff = getLight(p);\n    col = vec3(diff);\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}