{"ver":"0.1","info":{"id":"flyGRd","date":"1638144788","viewed":678,"name":"GPU-dependent UV precision","username":"Reedbeta","description":"Demo of hardware-dependent precision/rounding of UV coordinate for texture sampling. See code comments for full explanation.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["2d","precision","gpu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader demonstrates how GPU hardwares differ in how they\n// handle UV coordinate precision during texture sampling.\n//\n// The upper-left half of the screen is hardware texture sampling, with\n// the texture filter set to nearest, while the lower-right is emulating\n// nearest-neighbor sampling using floor() and texelFetch(). Depending on\n// what GPU you're using, you may see a slight discrepancy between these,\n// visible as stairsteps running along the texel boundaries. The discrepancy\n// is also highlighted in pulsing red.\n//\n// GPUs are only required to use 8 bits of sub-texel precision in their\n// samplers, per API spec. When narrowing from 32-bit floats down to the\n// internal sampler precision, some GPUs might use round-to-nearest, while\n// others might truncate, or simply calculate the nearest neighbor from the\n// full 32-bit input value. This can lead to a mismatch when the same\n// calculation is done at full 32-bit float precision.\n//\n// When the mouse button is pressed, we add a 1/512 texel offset to the UV\n// before floor()-ing it. This simulates the result of a round-to-nearest\n// narrowing conversion. On some hardware that has a disrepancy between the\n// two calculations, this offset fixes it. But on other hardware that was\n// getting it right to begin with, this offset introduces the very artifact\n// we were trying to avoid.\n//\n// Unfortunately, if we need this to work, there seems to be no option but to check\n// which hardware you are running on and apply the offset or not accordingly.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 screenUV = fragCoord / iResolution.xy;\n\n    // Zoom in on the texture and move it around\n    vec2 texUV = fragCoord * .2e-4 + .03;\n    texUV += vec2(.01, .001)*cos(iTime * vec2(0.31, 0.23) + vec2(0,2));\n\n    // HW nearest-neighbor sample\n    float hwSample = texture(iChannel0, texUV).r;\n\n    if (screenUV.x < screenUV.y)\n    {\n        // Upper-left: HW nearest sample\n        fragColor = vec4(vec3(hwSample), 1.0);\n    }\n    else\n    {\n        // Lower-right: emulated in code\n        float offset = (iMouse.z > 0.0) ? 1.0/512.0 : 0.0;\n        ivec2 texelCoord = ivec2(floor(texUV * iChannelResolution[0].xy + offset));\n        float emulatedSample = texelFetch(iChannel0, texelCoord, 0).r;\n        fragColor = vec4(vec3(emulatedSample), 1.0);\n        \n        // Highlight error with pulsing red\n        float errorAlpha = max(0.0, sin(2.0 * iTime));\n        if (hwSample != emulatedSample)\n        {\n            fragColor = mix(fragColor, vec4(1.0, 0.0, 0.0, 1.0), errorAlpha);\n        }\n    }\n}\n","name":"Image","description":"","type":"image"}]}