{"ver":"0.1","info":{"id":"3ldSDf","date":"1581879398","viewed":87,"name":"BassSounds","username":"Numero7","description":"This is just a test to learn how to make music.","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["music","sounds","bass","kickdrum"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define root12 pow(2.0, 1.0/12.0)\n#define tau 4.0*asin(1.0)\n\n// Utilities\nfloat getNoteFreq(float note) {\n    return pow(root12, note-49.0) * 440.0;\n}\n\n\n// Basic Sounds\nfloat sinWave(float time, float freq) {\n    return sin(tau * time * freq);\n}\n\nfloat squareWave(float time, float freq) {\n    return fract(0.5 * tau * time * freq) * 2.0 - 1.0;\n}\n\n\n// Instruments\nvec2 bass(float time, float note) {\n    if (time < 0.0) return vec2(0.0);\n    return vec2(sin(tau * time * getNoteFreq(note)) * exp(-3.0 * time));\n}\n\n\n// Drum set\nfloat noise(float time) {\n    return fract(sin(time * 65465.65132) * 3513651.06541631) * 2.0 - 1.0;\n}\n\n\nvec2 kick(float time) {\n    if (time < 0.0) return vec2(0.0);\n    float amp = sin(tau * time * 51.3) * exp(-12.0 * time);\n    amp += sin(tau * time * 51.3 * 2.0) * exp(-24.0 * time);\n    return vec2(amp);\n}\n\nvec2 snare(float time) {\n    if (time < 0.0) return vec2(0.0);\n    float amp = noise(time) * exp(-24.0 * time) * sinWave(time, 440.0);\n    return vec2(amp);\n}\n\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 sound = vec2(0);\n    \n    float playKick = min(mod(abs(sinWave(time, 0.25)), 0.5), mod(time + 0.25, 0.5));\n    sound += kick(playKick);\n    \n    float playSnare = mod(time + 0.5, 1.0);\n    sound += snare(playSnare);\n    \n    float playBass = min(mod(time, 1.0), mod(time + 0.5, 0.25));\n    \n    float t = sign(mod(time, 2.0) - 1.0) * 0.5 + 0.5;\n    float noteBass = 14.0 * t + 16.0 * (1.0 - t);\n    sound += bass(playBass, noteBass);\n    \n    return sound;\n}","name":"Sound","description":"","type":"sound"}]}