{"ver":"0.1","info":{"id":"ddyGWR","date":"1678377346","viewed":133,"name":"mean least variance cubemap","username":"lalaoopybee","description":"drag mouse around to view different angles!\n\nthis is my [url=https://www.shadertoy.com/view/mtSSzK]mlv shader[/url] in action.","likes":3,"published":1,"flags":32,"usePreview":1,"tags":["mouse","dither","cubemap","npr","mlv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define K 6//[3, 7]\n\n#define GRAY(a) dot(a, vec3(.299, .587, .114))\n\n//canvas effect?\n#define DITHER\n#ifdef DITHER\n#define SPREAD .23\nint bayer[16]=int[16](\n    0, 8, 2, 10,\n    12, 4, 14, 6,\n    3, 11, 1, 9,\n    15, 7, 13, 5\n);\n#endif\n\n#define SNAP(a, b) (round((a)/(b))*(b))\n#ifdef SNAP\n#define SNAP_AMT .18\n#endif\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n    \n    //optimizations?\n    float num=float(K*K);\n    float nWeight=1./num;\n    float n1Weight=1./(num-1.);\n    \n    //every possible kernel\n    float minVar=0.;\n    for(int oi=0;oi<K;oi++){\n        for(int oj=0;oj<K;oj++){\n            int ox=oi-K+1, oy=oj-K+1;\n            \n            //naive variance formula\n            vec4 sum=vec4(0.), sumSq=sum;\n            for(int ii=0;ii<K;ii++){\n                for(int ij=0;ij<K;ij++){\n                    vec2 offset=vec2(ox+ii, oy+ij)/iResolution.xy;\n                    vec3 col=texture(iChannel0, uv+offset).rgb;\n                    vec4 value=vec4(col, GRAY(col));\n                    sum+=value;\n                    sumSq+=value*value;\n                }\n            }\n            float var=(sumSq.a-sum.a*sum.a*nWeight)*n1Weight;\n            //\"sort\" while sampling\n            if((oi==0&&oj==0)||var<minVar){\n                minVar=var;\n                fragColor=vec4(sum.rgb*nWeight, 1.);\n            }\n        }\n    }\n    \n    #ifdef DITHER\n    int i=int(fragCoord.x)%4;\n    int j=int(fragCoord.y)%4;\n    float bayerValue=float(bayer[i+j*4])*.0625;\n    float mask=bayerValue-.5;\n    fragColor.rgb+=mask*SPREAD;\n    #endif\n    \n    #ifdef SNAP\n    fragColor.r=SNAP(fragColor.r, SNAP_AMT);\n    fragColor.g=SNAP(fragColor.g, SNAP_AMT);\n    fragColor.b=SNAP(fragColor.b, SNAP_AMT);\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/**\n * Trivial Cubemap shader by Anthony 'Bitzawolf' Pepe\n * @bitzawolf\n * bitzawolf.com\n */\n\n#define PI 3.1415927\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    //init image\n    vec2 mousePt=iMouse.xy;\n    if(iMouse.xy==vec2(0)) mousePt=iResolution.xy*.5;\n    \n    float rotX = (mousePt.x / iResolution.x) * 2. * PI;\n    float rotY = (mousePt.y / iResolution.y) * PI;\n    vec2 uv = 2.5 * (fragCoord.xy - .5 * iResolution.xy) / iResolution.xx;\n    vec3 camO = vec3(cos(rotX), cos(rotY), sin(rotX));\n    vec3 camD = normalize(vec3(0)-camO);\n    vec3 camR = normalize(cross(camD, vec3(0, 1, 0)));\n    vec3 camU = cross(camR,camD);\n   \tvec3 dir =  normalize(uv.x * camR + uv.y * camU + camD);\n    fragColor = texture(iChannel0, dir);\n}","name":"Buffer A","description":"","type":"buffer"}]}