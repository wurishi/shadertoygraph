{"ver":"0.1","info":{"id":"lftXWH","date":"1713888665","viewed":161,"name":"Supernova (entropy)","username":"smoothstep","description":"sperimenting with dots across the canvas with sine functions","likes":8,"published":3,"flags":0,"usePreview":0,"tags":["patterns","dots","neon","entropy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    INSPIRED BY\n    https://www.youtube.com/watch?v=sW56us0ZBEQ&t=15s\n    \n    SMOOTHSTEP\n    \n    SUPERNOVA\n*/\n\nvec2 rotate2D(vec2 uv, float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c) * uv;\n}\n\nvec2 hash12(float t) {\n    float x = fract(sin(t * 5.329));\n    float y = fract(sin((t + x) * 5.732));\n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - vec2(0.45, 0.5) * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0);\n\n\n    // tweak this to enlarge the entropy\n    float r = 0.2;\n    \n    // dots iteration number\n    for (float i=0.0; i < 120.0; i++) {\n        float factor = (sin(iTime*.1) * 0.5 + 0.5);\n        i += factor;\n\n        float a = i / 3.;\n        // This manipulates the dots spread in the x and y axis\n        float dx = 1. * r * cos(a) - r * cos(8. * a);\n        float dy = 1. * r * sin(a) - r * sin(8. * a);\n\n        col += 0.013 * factor / length(uv - vec2(dx + 0.1, dy) - 0.02 * hash12(i));\n    }\n    col *= sin(vec3(0.2, 0.7, 0.9) * iTime*.5) * 0.15 + 0.25;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}