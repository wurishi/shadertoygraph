{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define ITER 50\n\nconst vec3 colorBegin = vec3(0, 0, 1);\nconst vec3 colorEnd = vec3(1, 1, 0);\nconst float stepSize = 0.2;\nconst int horizontalDivide = 10;\nconst float scale = 100.0;\n\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}\n\nfloat read3DMap(vec3 coords)\n{\n    float size = iChannelResolution[0].x / float(horizontalDivide);\n    vec2 realCoords = coords.xy / vec2(size, 1);\n    \n    realCoords.x += size * floor(size / coords.z / float(horizontalDivide));\n    \n    return (texture(iChannel0, realCoords).r);\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float near = 1.0;\n    mat4 camMatrix = rotationMatrix(vec3(1, 0, 0), iTime * 0.2);\n    camMatrix[3].z = cos(iTime * 0.05) * 5.0;\n    vec3 direction = vec3(uv * 2.0 - 1.0, near);\n    direction = (camMatrix * vec4(direction, 1.0)).xyz;\n    vec3 stepDir = normalize(direction) * stepSize;\n    \n    \n    vec3 sumIntensity = vec3(0.0);\n    \n    for (int i = 0; i < ITER; ++i)\n    {\n        direction += stepDir;\n        vec3 colorToAdd = read3DMap(direction) * mix(colorBegin, colorEnd, float(i) / float(ITER));\n    \tsumIntensity += colorToAdd / float(ITER) * 3.0;\n\t}\n    \n    fragColor = vec4(vec3(sumIntensity),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MlX3WS","date":"1424711666","viewed":149,"name":"Raytrace 2D texture","username":"paulbaron","description":"Test of ugly 3D raytracing","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","texture","raytrace"],"hasliked":0,"parentid":"","parentname":""}}