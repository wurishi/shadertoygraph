{"ver":"0.1","info":{"id":"4sByzd","date":"1493240322","viewed":133,"name":"Horrible Organism","username":"kp1197","description":"Some experimentation with shape and texture blending, with reflections","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["distancefieldraymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time iTime\n\n// In addition to smin from IQ, this shader interpolates materials by returning\n// 3 additional components from the distance field which describes which how to blend\n// the 3 scene objects:  normalize(1/dist1, 1/dist2, 1/dist3)\n// The 'march' method also accepts a mask, which allows it to ignore scene objects\n\nvec2 mouseuv() {\n    return iMouse.xy / iResolution.yy - vec2(0.5*iResolution.x/iResolution.y,0.5);\n}\n\nvec3 sphereCenter()\n{\n    vec3 pos = 4. * vec3(0.,1.+mouseuv().y,0.) + vec3(0.5*sin(time),3.,7.+cos(time));\n    float bob = 0.5*cos(time + 0.5*pos.z);\n    pos.y += bob;\n    return pos;\n}\n\n//https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec4 worldColor(vec3 pos, vec3 _mix)\n{\n    \n    // sky\n    vec4 channel0 = textureLod(iChannel0,(pos.xy/length(pos.xyz)),1.0);//vec4(1.0,0.0,0.0,1.0);\n    \n    // sphere\n    vec3 relPos = pos - sphereCenter();\n    vec2 rot = vec2(cos(time),sin(time));\n    relPos.xy = vec2(relPos.x * rot.x - relPos.y * rot.y, relPos.x * rot.y + relPos.y * rot.x); // now x is something different than original vector x\n    vec4 channel1 = textureLod(iChannel1,0.1*relPos.xy,1.0);//vec4(0.0,1.0,0.0,1.0);\n     \n    // ground\n    vec4 channel2 = textureLod(iChannel1,0.1*pos.xz,1.0);\n    \n    // blend\n    return _mix.x * channel0 + _mix.y * channel1 + _mix.z * channel2;\n}\n\nfloat skyDist(vec3 pos)\n{\n    vec4 color = worldColor(pos, vec3(1.0,0.0,0.0));\n    return 55.- length(pos) - 0.1*color.x;\n}\n\n\nfloat floorDist(vec3 pos)\n{\n    float height = 3.;\n    return max(height+pos.y,0.);\n}\n\nfloat sphereDist(vec3 pos)\n{\n    float radius = 2.;\n    vec3 c = sphereCenter();\n    vec3 rel_pos = pos-c;\n    float hole = 2.0/(length(sin(rel_pos)));\n    vec3 flattening = vec3(0.5,1.,1.5);\n    float bumps = 0.25*length(2.*worldColor(pos,vec3(0.,1.,0.)));\n    return length(rel_pos*flattening) - radius - bumps - hole;\n}\n\nconst vec3 e = vec3(0.001,0.,0.);\n\nstruct world {\n float d;\n vec3 position;\n vec3 material;\n} lightVar;\n\n\nvec4 map(vec3 pos, vec3 mask)\n{\n    vec3 dists = vec3(skyDist(pos), sphereDist(pos), floorDist(pos)) * mask;\n    float dist = smin(smin(dists.x,dists.y,0.05),dists.z, 4.);\n    dists.xyz = max(dists + e.xxx, e.xxx) - 0.5 * e.xxx;\n    vec3 _mix = normalize(vec3(1./dists.x, 1./dists.y, 1./dists.z));    \n    return vec4(dist, _mix.xyz);\n}\n\nvec3 normal(vec3 pos, float l, vec3 mask)\n{\n    // i do wonder if i could scale eps by some function of distance?\n    float inv_l = (1.+e.x)/(l+e.x);\n    float d1 = map(pos+inv_l*e.xyy, mask).x - map(pos-inv_l*e.xyy, mask).x;\n    float d2 = map(pos+inv_l*e.yxy, mask).x - map(pos-inv_l*e.yxy, mask).x;\n    float d3 = map(pos+inv_l*e.yyx, mask).x - map(pos-inv_l*e.yyx, mask).x;\n    return normalize(vec3(d1,d2,d3));\n}\n\n\nworld march(vec3 r, vec3 pos, vec3 mask)\n{\n    float l =  length(pos);\n    vec4 m;\n    for (int i = 0; i < 128; i++)\n    {\n        m.xyzw = map(pos.xyz, mask);\n        l += m.x * 0.6;\n        pos = (r * l);        \n        if (m.x < 1e-6)\n        {\n            return world(m.x, pos.xyz, m.yzw);\n        }\n    }\n    return world(m.x, pos.xyz, m.yzw);\n}\n\n//Taken from https://www.shadertoy.com/view/Xds3zN\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nfloat pi = 3.14159265359;\n\nmat2 rot(float a) \n{\n    vec2 s = sin(vec2(a, a + pi/2.0));\n    return mat2(s.y,s.x,-s.x,s.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // taken from https://www.shadertoy.com/view/4slyRs\n    vec2 uv = (fragCoord.xy/iResolution.xy)*2.0-1.0;\n\tuv.x *= iResolution.x/iResolution.y;\n    vec3 cameraOrigin = vec3(0.0, 0.0, 1.0);\n    vec3 cameraTarget = sphereCenter();\n\tmat3 cam = setCamera(cameraOrigin, cameraTarget, 0.1 );\n    vec3 rayDir = cam* normalize( vec3(uv.xy,2.0) );\n    vec3 mask = vec3(1.,1.,1.);\n    \n    // initial ray, query all objects\n    world w1 = march(rayDir, cameraOrigin, mask);\n    vec3 n = normal(w1.position, w1.d, mask);\n    w1.position += e.x * n.xyz;\n    fragColor = 0.5 * worldColor(w1.position, w1.material);\n    \n    // ray casting\n\n    //vec3 dirToLight = normalize(w1.position - sphereCenter());\n    //world w2 = march(dirToLight, w1.position, vec3(1.,1.,1.));\n    //fragColor += 0.3*worldColor(w2.position, w2.material) * (1.-w1.material.x);\n    //fragColor.xyzw = vec4(0.,1.,0.,1.);  \n    \n    // reflection\n    rayDir = reflect(rayDir,n);\n    world w3 = march(rayDir - 0.01 * n, w1.position, mask);\n    n = normal(w3.position, w1.d, mask);\n    fragColor += 0.2 * worldColor(w3.position, w3.material);\n    \n\n    \n}\n//https://www.shadertoy.com/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","name":"Image","description":"","type":"image"}]}