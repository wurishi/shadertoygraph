{"ver":"0.1","info":{"id":"DdjXRd","date":"1670745839","viewed":397,"name":"Bubble Hell 2","username":"ChunderFPV","description":"Mouse rotates.  See comments for key toggles.","likes":32,"published":1,"flags":16,"usePreview":0,"tags":["3d","raymarch","spheres","aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// key toggles\n// M: mode 1 or 2\n// A: anti-aliasing\n#define KT(i) texelFetch(iChannel0, ivec2(i, 2), 0).x              // key toggle\n#define H(a) (cos(radians(vec3(90, 30, -30))-((a)*6.2832))*.5+.5)  // hue pallete\n#define RT(a) mat2(cos(m.a*1.571+vec4(0,-1.571,1.571,0)))          // rotate\nvoid mainImage( out vec4 RGBA, in vec2 XY )\n{\n    bool  km = KT(77) > 0.;      // switch mode: key M\n    float t = iTime/15.+.001,\n          aa = 2.-KT(65),        // anti-aliasing: key A\n          d, s;\n    vec2  R = iResolution.xy,\n          m = iMouse.xy/R*4.-2., // mouse coords\n          o;\n    vec3  bg = vec3(0),          // background\n          ro = vec3(.5, 0, t),   // camera (ray origin)\n          rd, l, c;\n    if (iMouse.z < 1.) m = vec2(-cos(t)*.4+.4)+vec2(0,.1); // rotate with time\n    mat2 pitch = RT(y), \n         yaw   = RT(x);\n    for (int k = 0; k < int(aa*aa); k++) // aa loop\n    {\n        o = vec2(k%2, k/2)/aa; // offset for aa\n        rd = normalize(vec3((XY-.5*R+o)/R.y, 1)); // 3d uv (ray direction)\n        rd.yz *= pitch;\n        rd.xz *= yaw;\n        d = 0.; // step dist for raymarch\n        for (int i = 0; i < 100; i++)\n        {\n            vec3 p = ro+rd*d; // position along ray\n            if (km) p.xz += round(p.y)*t;            // mode 2\n            else    p.z  += sqrt(round(p.y)*t*t*2.); // mode 1\n            s = smoothstep(.23, .27, length(p-round(p)) ); // sphere grid\n            if (s < 0.001) break;\n            d += s;\n        }\n        l = 1.-vec3( length(rd.yz), length(rd.xz), length(rd.xy) ); // spots at xyz\n        c = vec3(d*.013); // objects\n        c += vec3(.9, .5, .2)-min(1.-l.x, 1.-l.z); // firey glow\n        c.b += l.x*.5 + l.y*1.5; // x & y tint\n        if (km) c = c.gbr;   // change color with mode\n        c = max(c, .5-H(d)); // rainbow fringe\n        bg += c; // add to bg\n    }\n    bg /= aa*aa; // fix brightness after aa pass\n    bg *= sqrt(bg)*.8; // contrast\n    RGBA = vec4(bg, 1.);\n} ","name":"Image","description":"","type":"image"}]}