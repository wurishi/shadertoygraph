{"ver":"0.1","info":{"id":"MsyyzG","date":"1522435925","viewed":113,"name":"SphereSound","username":"paulo69","description":" ","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["raytracing","sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MsSSDw","filepath":"https://soundcloud.com/deadmau5isawesome/deadmau5-i-remember-vocal-mix","previewfilepath":"https://soundcloud.com/deadmau5isawesome/deadmau5-i-remember-vocal-mix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n\nstruct CAMERA {\n    vec3 Direction;\n    vec3 Position;\n};\n\nstruct RENDER {\n    float Intersection;\n    vec3 OutputImage;\n};\n    \nfloat plane (vec3 pos, vec3 dir) {\n      return -pos.y/dir.y;  \n}\n\nvec3 signal (float x, float y,float deform) {\n return vec3(1.0/(abs(fract((x)*5.0))*(5.0+deform*50.0)))+vec3(1.0/(abs(fract((y)*(10.0)))*100.0));   \n}\n\nfloat sphere (vec3 pos,vec3 p, vec3 dir,vec2 uv,float sound) {\n    float y = iTime;\n    float a = dot(dir,dir);\n    float b = ((2.0+0.03*sound)*dot(pos+p,dir));\n    float c = dot(pos+p,pos+p) -1.0;\n    float d = b*b-4.0*a*c;\n    return (-b-sqrt(d))/(2.0*a);\n\t\n}\n\n\nvec3 CheckerTexture (float sound,vec3 dir, float inter, float a, float b) {\n    float x = dir.x*inter;\n    float y = dir.z*inter;\n    vec3 result = vec3 (mod(floor(x*a/2.0)+floor(y*b/16.0),2.0));\n    float n = 5.5;\n    result *= vec3(fract(max(sin(floor((x)*n)),sin(floor(y*n)))*iTime));\n    return result;\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n  vec2 uv = gl_FragCoord.xy / max(iResolution.x,iResolution.y);\n    vec2 posmdr = uv;\n    float sound = smoothstep(0.0,5.0,texture( iChannel0, vec2(uv.x,1.0)).x);\n    float son = texture( iChannel0, vec2(uv.x,1.0)).x;\n    vec4 color;\n    \n    uv+=vec2(-0.5,-.7);\n    float t = iTime;\n    \n    CAMERA cam;\n    RENDER rt;\n    \n    float y = -(iMouse.x/iResolution.x-0.5);\n    float x = iMouse.y/iResolution.y-0.5;\n    \n    cam.Position = vec3 (0.0,5.0,-18.0);\n    cam.Direction = normalize(vec3(uv,2.0));\n    cam.Direction *= mat3 (1.0,0.0,0.0,\n                           0.0,cos(x),-sin(x),\n                           0.0,sin(x),cos(x))+mat3 (cos(y),0.0,sin(y),\n                           \t\t\t\t\t\t\t0.0,1.0,0.0,\n                           \t\t\t\t\t\t\t-sin(y),0.0,cos(y));\n    vec3 p =vec3(cos(iTime)*clamp(0.0,3.0,iTime*0.1),-3.0,sin(iTime)*clamp(0.0,5.0,iTime*0.1));\n    \n    rt.Intersection = min(sphere(cam.Position,p,cam.Direction,uv,sound),plane(cam.Position,cam.Direction));\n    \n    rt.OutputImage = vec3(0.0);\n    \n    \n    float s = sphere(cam.Position,p,cam.Direction,uv,sound);\n    \n    \n    if (rt.Intersection == s ) {\n        color = vec4(vec3(cam.Position+rt.Intersection*cam.Direction)*vec3(1.0,0.3,1.0),0.0);\n        color *= vec4(signal (s,s,sound),1.0);\n        color += vec4 (sound*50.0)*0.2;\n        color *= vec4 (sin(sound*iTime),sin(iTime),sin(iTime),1.0);\n    }\n    else if (rt.Intersection==plane(cam.Position,cam.Direction)){  \n        if (rt.Intersection >uv.y) {\n            color = vec4(CheckerTexture(sound,cam.Direction,rt.Intersection,(3.0+sound)+cam.Position.x,(2.0+sound*3.0)+cam.Position.z)*2.0/rt.Intersection,1.0)*vec4(0.5,0.3,0.1,0.0)*8.0;\n        } else {\n     \t\tcolor = vec4(0.0);   \n        }\n    }\n    \n    fragColor = vec4(color*vec4(signal(abs(uv.x*0.1),abs(uv.y),son),1.0)*5.0);\n}   ","name":"Image","description":"","type":"image"}]}