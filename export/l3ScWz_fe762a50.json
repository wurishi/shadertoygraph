{"ver":"0.1","info":{"id":"l3ScWz","date":"1727136003","viewed":11,"name":"Crazy Fluid","username":"arminkz","description":"fluid like effect using fBM","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fbm","fluid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// colormap\nvec3 palette(float t) {\n    vec3 a = vec3(0.5);\n    vec3 b = vec3(0.5);\n    vec3 c = vec3(1.);\n    vec3 d = vec3(0.563,0.416,0.457 + .2*sin(0.4*iTime));\n    \n    return a + b*cos( 6.28 * c * (t+d)); // A + B * cos ( 2pi * (Cx + D) )\n}\n\nfloat rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\n// used to rotate domain of noise function\nconst mat2 rot = mat2( 0.80,  0.60, -0.60,  0.80 );\n\n// fast implementation of fBM\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*noise( p + 0.1 * sin(iTime ) + 0.2 * iTime); p = rot*p*2.02;\n    f += 0.031250*noise( p  ); p = rot*p*2.01;\n    f += 0.250000*noise( p ); p = rot*p*2.03;\n    f += 0.125000*noise( p + 0.1 * sin(iTime) + 0.2 * iTime ); p = rot*p*2.01;\n    f += 0.062500*noise( p + 0.3 * sin(iTime) ); p = rot*p*2.04;\n    f += 0.015625*noise( p );\n    return f/0.96875;\n}\n\n// nested fBM\nfloat pattern( vec2 p ) {\n    return fbm( p + fbm( p + fbm(p) ) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec3 col = palette(pattern(uv));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}