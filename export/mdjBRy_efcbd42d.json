{"ver":"0.1","info":{"id":"mdjBRy","date":"1689903628","viewed":109,"name":"volume Sphere","username":"nicelee","description":"simulation for siri like sound visulization\n音量可视化","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["volume","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright nicelee, 2023 - nicelee@126.com\n\n// I am the sole copyright owner of this Work.\n// You cannot host, display, distribute or share this Work neither\n// as it is or altered, here on Shadertoy or anywhere else, in any\n// form including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it or train a neural\n// network with it without permission. I share this Work for educational\n// purposes, and you can link to it, through an URL, proper attribution\n// and unmodified screenshot, as part of your educational material. If\n// these conditions are too restrictive please contact me and we'll\n// definitely work it out.\nfloat spheres(vec2 uv)\n{\n    return 0.5;\n}\nfloat  Ellipse(vec2 UV,float  Width,float Height){\n\tfloat d = length(((UV * 2.0) - vec2(1.0)) / vec2(Width, Height)); \n    return clamp((1.0 - d) / d, 0.0, 1.0);\n}\nfloat freqs[16];\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -=0.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    vec4 _pin_104 = vec4(0.839999973773956298828125, 0.37999999523162841796875, 0.0, 1.0); \n    vec4 _pin_113 = vec4(0.519999980926513671875, 0.61000001430511474609375, 0.0, 1.0); \n    vec2 _pin_253 = fragCoord; \n    float _pin_224 = _pin_253.x; \n    float _pin_225 = _pin_253.y; \n    vec2 _pin_232 = vec2(_pin_224, _pin_225); \n    //vec2 _pin_244 = iResolution; \n    //vec2 _pin_238 = _pin_232 / _pin_244;\n    \n    //uv = _pin_238; \n     \n    uv*=2.; \n    vec2 uv2=uv; \n    for( int i=0; i<16; i++ )\n\t    freqs[i] = clamp( 1.9*pow( texture( iChannel0, vec2( 0.05 + 0.5*float(i)/16.0, 0.25 ) ).x, 3.0 ), 0.0, 1.0 );\n\tfloat vol1=(freqs[10]+freqs[7]+freqs[14])/3.-.15;\n    uv.y+=vol1;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    \n    float ssc=vol1*0.4+.9;\n    uv2*=ssc;\n    float le=length(uv2*1.2); \n    float as; \n    float le2=le<1.?le:.0;\n    as=tan(asin(le2)); \n    vec2 n=normalize(uv2*1.2); \n    as*=0.196; n *= as; \n    vec4 color1=vec4(1.0,0.6,0.0,1.0); \n    vec4 color2=vec4(.30,0.6,0.0,1.0)*1.8; \n    vec4 color3=vec4(.130,0.36,.80,1.0)*2.5; \n    vec4 color4=vec4(.630,0.16,.80,1.0)*1.4; \n    vec4 color5=vec4(.730,0.56,.80,1.0)*1.1; \n    vec2 fnR=vec2(fract(n.x+cos(iTime)*1.1),fract(n.y+0.325+iTime*0.21));\n    \n    float c1=Ellipse(fnR,.645*ssc,.85); \n    float c1b=Ellipse(vec2(fract((n.x*-1.+0.5)+cos(iTime)*1.1),fnR.y),.645,.85); \n    c1=max(c1,0.9*c1b); \n    vec2 fnG=vec2(fract(n.x+iTime*0.521),fract(n.y+0.125+sin(iTime)*1.421)); \n    float c2=Ellipse(fnG,.6145,.95); \n    vec2 fnB=vec2(fract(n.x+iTime*0.1521),fract(n.y+0.125+cos(iTime)*2.421)); \n    float c3=Ellipse(fnB,.6145*ssc,.795); \n    vec2 fnY=vec2(fract(n.x+iTime*0.3521),fract(n.y+0.125+sin(cos(iTime)*2.421))); \n    float c4=Ellipse(fnY,.6145,.795); \n    vec2 fnY2=vec2(fract(n.x+iTime*0.7521),fract(n.y+0.125+iTime*1.421)); \n    float c5=Ellipse(fnY,.2145,.895);\n    color1*=c1; color2*=c2; color3*=c3; color4*=c4; color5*=c5; \n    vec4 outColor = color1+color2+color3+color4+color5; \n    outColor = mix(outColor,vec4(as,as,as,as),0.55); \n    outColor = outColor+vec4(as,as,as,as); \n    le=(le<1.0)?1.0:0.0; \n    fragColor= outColor*1.2*le;\n    \n    \n    // Output to screen\n    fragColor = mix (vec4(col,1.0),fragColor,0.3824);\n}","name":"Image","description":"","type":"image"}]}