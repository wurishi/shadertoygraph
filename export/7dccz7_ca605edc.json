{"ver":"0.1","info":{"id":"7dccz7","date":"1653232095","viewed":485,"name":"CCTV","username":"Xor","description":"Based on [url=https://www.shadertoy.com/view/sd3czM]The Typist[/url]","likes":34,"published":1,"flags":32,"usePreview":0,"tags":["3d","bokeh","lcd","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Fibonacci Bokeh Pass\n    \n    The Typist: https://www.shadertoy.com/view/sd3czM\n    Bokeh from: https://www.shadertoy.com/view/fljyWd\n    \n*/\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Resolution for texel calculation\n    vec2 r = iResolution.xy,\n    //Sample point starting at vec2(scale, 0)\n    p = vec2(dot(I+I-r,vec2(1,-9)/1e4), O-=O);\n    \n    //\"i\" approximating the sqrt of the number of iterations.\n    //So i < 16 means roughly 256 texture samples.\n    for(float i=1.; i<16.; i+=1./i)\n    \n        //Rotate sample point by golden angle (for even spacing).\n        p *= mat2(0,.061,1.413, 0)-.737,\n        //Add samples exponentially (a bit like a \"smooth maximum\").\n        O += T/r+p*i/r);\n        \n    //Convert back to linear color (making brighter pixel stand out)\n    //Average by total sample weight via alpha channel.\n    O = sqrt(O/O.a)*3.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":2,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n    CCTV Pass\n    \n    Renders a bunch of randomized cubemaps\n*/\n\n//Sample randomized texture\n#define S(U,B) (O.g>0.?texture(iChannel1,U,B):texture(iChannel2,U,B))\n//Sample Cubemap with rotation\n#define C(D,B) S(mat3(v.x,0,-v.y,v.y,0,v.x,0,1,0)*vec3(O.b+.8,O.a+fract(I+I)-.5 D),B+0.)\nvoid mainImage(out vec4 O, vec2 I)\n{\n    //Time shortened \n    float t = iTime*.1,\n    //Resolution scale factor\n    r = .2/iResolution.y;\n    //Rotate coordinates with perspective and scrolling\n    I = (I*mat2(9,1,-1,9)*r-2.)*.7/(2.-I.y*r)+t*.2;\n    //Sample bluenoise texture (one-pixel per letter)\n    O = fract(ceil(T/512.)*16.+t)/16.)-.5;\n    //Add random offset and parallax\n    vec2 p = I*6e2,\n    //Chromatic aberration delta\n    d = vec2(6e-3,0),\n    //Screen borders\n    b = min(abs(fract(I+I+.5)-.5)*48.,1.),\n    //Rotation angle vector\n    v = sin(O.r*t+vec2(0,11)-O.g/.1);\n    //Sample cubemap with aberration\n    O = max((vec4(C(-d,).r,C(,).g,C(+d.yx,).ba)*2.-C(,3.)) *b.x*b.y\n    //Apply LCD color effect\n    * sin(p.x+vec4(0,2,4,6))*sin(p.y),0.);\n    //Make sure the alpha is 1 for bokeh pass!\n    O.a = 1.; O*=O;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*\n    We need to sample textures a lot, so here's a macro for it\n*/\n#define T texture(iChannel0, I","name":"Common","description":"","type":"common"}]}