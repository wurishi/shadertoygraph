{"ver":"0.1","info":{"id":"slXfRj","date":"1651104364","viewed":99,"name":"Anti-aliased triangle","username":"Dubswitcher","description":"Just a triangle. Probably not optimized, but useable. Borrow it if you want to. Don't eat it.\n\nIntended as a basis for creating 2d meshes.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","basic","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.14159265;\n\nfloat dtl(in vec2 a, in vec2 b, in vec2 uv) //distance to line\n{\n    return dot(normalize(vec2(b.y-a.y,0.-(b.x-a.x))), a - uv);\n}\n\nfloat edge(in vec2 a, in vec2 b, in vec2 uv, in float s) //edge from line\n{\n    return smoothstep(-1.5/iResolution.x,1.5/iResolution.x,s*dtl(a,b,uv));\n}\n\nfloat triangle (in vec2 a, in vec2 b, in vec2 c, in vec2 uv) {\n    float s = sign(dtl(a,b,c));\n    return edge(a,b,uv,s)*edge(b,c,uv,s)*edge(c,a,uv,s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // square, image-centered UV (for coords relative to center)\n    vec2 sq = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    //Varying vertices for testing\n    vec2 a = vec2(-0.3+sin(iTime*pi)/30.,-0.4+cos(iTime*pi)/30.);\n    vec2 b = vec2(-0.1+sin(iTime*pi*0.5)/30.,0.4+cos(iTime*pi*0.5)/30.);\n    vec2 c = vec2(0.5+sin(iTime*pi*1.4)/30.,-0.1+cos(iTime*pi*1.4)/30.);\n\n    vec3 col = vec3(triangle(a,b,c,sq));\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}