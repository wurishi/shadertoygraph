{"ver":"0.1","info":{"id":"mdVcWh","date":"1696075366","viewed":36,"name":"fishee","username":"suttree","description":"fisheye lens","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lens"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Center the coordinate system\n    uv = uv * 2.0 - 1.0;\n    \n    // Calculate the radial distance from the center\n    float r = length(uv);\n    \n    // If the radial distance is less than 1.0, we are inside the unit circle\n    if(r < 1.0)\n    {\n        // Calculate the angle of the current pixel from the center\n        float theta = atan(uv.y, uv.x);\n        \n        // Apply the fisheye effect by modifying the radial distance\n        float fisheyeR = 2.0 * asin(r) / 3.14;\n        \n        // Convert the polar coordinates back to Cartesian coordinates\n        vec2 fisheyeUV = vec2(cos(theta) * fisheyeR, sin(theta) * fisheyeR) * 0.5 + 0.5;\n        \n        // Sample the original image at the calculated coordinates and set the output color\n        fragColor = texture(iChannel0, fisheyeUV);\n    }\n    else\n    {\n        // If we are outside the unit circle, set the output color to black\n        fragColor = vec4(0.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}