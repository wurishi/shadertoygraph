{"ver":"0.1","info":{"id":"ftSGzz","date":"1623184619","viewed":46,"name":"2d-Isolinea--v1","username":"jorge2017a1","description":"2d-Isolinea--v1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2disolineav1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//referencia\n//https://iquilezles.org/articles/distance\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n#define S(d,b) smoothstep(antialiasing(1.0),b,d)\n#define S2(d,b) smoothstep(antialiasing(0.5),b,d)\n\n\n//----------oPeraciones de Repeticion\nfloat opRep1D( float p, float c )\n\t{ float q = mod(p+0.5*c,c)-0.5*c; return  q ;}\n  \n\n//Corrected by FabriceNeyret2,\nvec3 ponerBorde2(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = distObj > 0. ? colOut : pColObj;\n  colOut = mix(colOut,vec3(0) ,smoothstep( fwidth(distObj), 0., abs(distObj) ));\n  return colOut;\n}\n\n/*\nvec3 ponerBorde2(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S(abs( distObj),0.0));\n  return colOut;\n}\n*/\n\nvec3 ponerBorde(vec3 pColObj, vec3 colOut, float distObj )\n{\n  colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj),0.0));\n  return colOut;\n}\n\nfloat f(vec2 x)                                 \n{\n    float r = length(x);\n    float a = atan(x.y,x.x);\n    return r - 1.0 + 0.5*sin(3.0*a+2.0*r*r);\n}                                                   \n\nvec2 grad( vec2 x )\t\t\t\t\t\t\t\t\t\t\t\t \n{\n    float r = length(x);\n    float a = atan(x.y,x.x);\n    vec2 da = vec2(x.y,-x.x)/(r*r);\n    return (x/r) + (1.5*da+2.0*x)*cos(3.0*a+2.0*r*r);\n}\n\n\nfloat colorIsolinea( in vec2 x )\n{\n    float v = f( x );\n    vec2  g = grad( x );\n    float de = abs(v)/length(g);\n    float eps =1.0; /*size_of_a_pixel*/;\n    return smoothstep( 1.0*eps, 2.0*eps, de );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    uv*=1.5;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    float cisl1=colorIsolinea(uv);\n    col= ponerBorde(vec3(0.5), col, cisl1 );\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}