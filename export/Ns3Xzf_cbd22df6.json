{"ver":"0.1","info":{"id":"Ns3Xzf","date":"1633603202","viewed":293,"name":"end of the Hilbert curve","username":"Carandiru","description":"fork of  playersteve19's  \"3Blue1Brown's Hilbert Curve\"\n\nme: trying to find the end of the Hilbert curve...\n\ntry: different textures\n","likes":8,"published":3,"flags":32,"usePreview":1,"tags":["sound","visualizer","hilbert"],"hasliked":0,"parentid":"fddXRj","parentname":"3Blue1Brown's Hilbert Curve"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// fork of  playersteve19's  \"3Blue1Brown's Hilbert Curve\"\n\n// me: trying to find the end of the Hilbert curve...\n\n// try: different textures\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n\n    fragColor = vec4(textureLod(iChannel0, uv, 0.0f).rgb, 1.0f);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SPEED 100.0 // dependent on the frequency of unique data in texture\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// fork of  playersteve19's  \"3Blue1Brown's Hilbert Curve\"\n\n// me: trying to find the end of the Hilbert curve...\n\n// try: different textures\n\n\n#define LEVEL 15U\n#define WIDTH ((1U << LEVEL))\n#define AREA (WIDTH*WIDTH)\nfloat HilbertIndex(uvec2 Position){   \n    uvec2 Regions;\n    uint Index=0U;\n    for(uint CurLevel=WIDTH/2U;CurLevel>0U;CurLevel/=2U){\n        uvec2 Region=uvec2(greaterThan((Position&uvec2(CurLevel)),uvec2(0U)));\n        Index +=CurLevel*CurLevel*((3U*Region.x)^Region.y);\n        if(Region.y==0U){\n            if(Region.x==1U){\n                Position=uvec2(WIDTH-1U)-Position;\n            }\n            Position.xy=Position.yx;\n        }\n    }\n    return float(Index)/float(AREA);\n}\n//from https://stackoverflow.com/questions/35799286\nfloat toLog(float value,float Min,float Max){\n\tfloat Exp=(value-Min)/(Max-Min);\n\treturn Min*pow(Max/Min,Exp);\n}\nfloat getLevel(float samplePos){\n\tint tx=int(samplePos*512.0);\n\treturn texelFetch(iChannel0,ivec2(tx,0),0).x; \n}\n//function from Inigo Quilez \n//shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c){\n    vec3 rgb=clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z*mix(vec3(1.0),rgb,c.y);\n}\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n\n    float xPos;\n    float fft;\n    ivec2 HilCoord=ivec2((1.0f-uv)*float(WIDTH));\n    ivec2 FragCoord=ivec2(uv*float(WIDTH));\n    \n    float Index=HilbertIndex(uvec2(abs(HilCoord - FragCoord)));\n    float R0, R1, R2, R3;\n\n    Index = toLog(1.0f-Index,0.01875,1.0f);\n    \n    Index += iTime * (SPEED/float(WIDTH));\n    \n    R0=texture(iChannel0,vec2(0.0f,Index)).x;\n    R1=texture(iChannel0,vec2(Index,0.0f)).x;\n    R2=texture(iChannel0,vec2(0.0f,1.0f-Index)).x;\n    R3=texture(iChannel0,vec2(1.0f-Index,0.0f)).x;\n\t\n    float abyss = abs(abs(R0-R1) - abs(R2-R3));\n    \n    abyss = pow(abyss, 1.0f / R0) * 0.5f\n           +pow(abyss, 2.0f / R1) * 0.5f\n           +pow(abyss, 3.0f / R2) * 0.5f\n           +pow(abyss, 4.0f / R3) * 0.5f;\n    \n    vec3 color = mix(vec3(0), vec3(1,0,0.42), smoothstep(0.333f, 1.0f, 3.4f * abyss));\n    color = mix(vec3(abyss), color, color.r);\n    \n    vec3 hi = (color*color + textureLod(iChannel1, uv, 0.0f).rgb) * 0.95f;\n\n    color = color * color + mix(hi, color, color.r);// + history;\n\n    fragColor = vec4(color, 1.0f);\n}","name":"Buffer A","description":"","type":"buffer"}]}