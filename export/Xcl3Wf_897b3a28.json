{"ver":"0.1","info":{"id":"Xcl3Wf","date":"1703652136","viewed":74,"name":"how it feels to chew 5 gum","username":"kyle_","description":"shader","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Scene distance\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(0.818, 0.238, 0.568);\n    vec3 b = vec3(-1.222, 0.500, -0.292);\n    vec3 c = vec3(1.000, 0.938, 1.188);\n    vec3 d = vec3(0.000, 0.333, 0.667);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nmat2 rot2D (float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return mat2(c, s, -s, c);\n}\n\nfloat smin (float a, float b, float k)\n{\n    float h = max(k - abs(a-b), 0.0) / k;\n    return min(a, b) - h*h*h*h*(1.0/6.0);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat map(vec3 p) {\n\n    p.z += iTime * 2.4;\n    p.y += iTime * 0.4;\n    \n    p.xy *= .25;\n    \n    p.xy = fract(p.xy) - .5;\n    p.z = mod(p.z, .001) - .25;\n    \n       \n    p.yz *= rot2D(0.5 * iTime);\n    p.xy *= rot2D(sin(0.1) * iTime);\n    \n    float box = sdTorus(p, vec2(0.25, 0.1));\n    \n    return box;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    //vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n\n    // Initialization\n    vec3 ro = vec3(0, 0, -3);         // ray origin\n    vec3 rd = normalize(vec3(uv * 2., 1)); // ray direction\n    vec3 col = vec3(0);               // final pixel color\n\n    float t = 0.; // total distance travelled\n\n    //ro.yz *= rot2D(-m.y);\n    //rd.yz *= rot2D(-m.y);\n\n    //ro.xz *= rot2D(-m.x);\n    //rd.xz *= rot2D(-m.x);\n\n    // Raymarching\n    \n    int i;\n    for (i = 0; i < 80; i++) {\n        vec3 p = ro + rd * t;     // position along the ray\n        \n        p.xy *= rot2D(t*.2);\n        p.xz *= rot2D(t*.1);\n        \n        p.y += cos(t+0.2*iTime);\n\n        float d = map(p);         // current distance to the scene\n\n        t += d;                   // \"march\" the ray\n\n        if (d < .001) break;      // early stop if close enough\n        if (t > 100.) break;      // early stop if too far\n    }\n\n    // Coloring\n    col = palette(t*.04 + float(i)*0.005);          // color based on distance\n\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}