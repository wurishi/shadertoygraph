{"ver":"0.1","info":{"id":"lctSDj","date":"1714625942","viewed":76,"name":"Cello: Alife2","username":"JupiterDude","description":"Another take on Conway's Game of Life.\n\nControls:\n* Press <space> to reset.\n* LMB zoom & pan - Microscope mode!\n* See Buffer A for configuration values.","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["artificiallife"],"hasliked":0,"parentid":"MftSRf","parentname":"Cello: Alife"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (fragCoord.y > 10.0 && fragCoord.y < (iResolution.y - 10.0) &&\n        fragCoord.x > 10.0 && fragCoord.x < (iResolution.x - 10.0) )\n    {\n    \n        if (iMouse.z > 0.0) {\n            float cx = iMouse.x;\n            float cy = iMouse.y;\n            fragCoord -= vec2(cx, cy);\n            fragCoord /= 4.0;\n            fragCoord += vec2(cx, cy);\n        }\n\n    vec4 t = texelFetch( iChannel0, ivec2(fragCoord), 0);\n    vec4 t0 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(-1,-1), 0);\n    vec4 t1 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 0,-1), 0);\n    vec4 t2 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 1,-1), 0);\n    vec4 t3 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0);\n    vec4 t4 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 1, 0), 0);\n    vec4 t5 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(-1, 1), 0);\n    vec4 t6 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 0, 1), 0);\n    vec4 t7 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 1, 1), 0);\n\n    // float CENTER_WEIGHT = 9.; // 5.6 was good\n    // float DIV = (CENTER_WEIGHT + 8.0);\n    // float r = (t.r * CENTER_WEIGHT + t0.r + t1.r + t2.r + t3.r + t4.r + t5.r + t6.r + t7.r) / DIV;\n    // float g = (t.g * CENTER_WEIGHT + t0.g + t1.g + t2.g + t3.g + t4.g + t5.g + t6.g + t7.g) / DIV;\n    // float b = (t.b * CENTER_WEIGHT + t0.b + t1.b + t2.b + t3.b + t4.b + t5.b + t6.b + t7.b) / DIV;\n    float r, g, b;\n    float c =   t.r + t0.r + t1.r + t2.r + t3.r + t4.r + t5.r + t6.r + t7.r +\n                t.g + t0.g + t1.g + t2.g + t3.g + t4.g + t5.g + t6.g + t7.g +\n                t.b + t0.b + t1.b + t2.b + t3.b + t4.b + t5.b + t6.b + t7.b;\n    c /= 24.0;\n    float col = 0.0;\n\n    if (t.r > 0. || t0.r > 0. || t1.r > 0. || t2.r > 0. || t3.r > 0. || t4.r > 0. || t5.r > 0. || t6.r > 0. || t7.r > 0.) {\n        col += t.r;\n        r = 1.0; g = 1.0; b = 1.0;\n    }\n    if (t.g > 0. || t0.g > 0. || t1.g > 0. || t2.g > 0. || t3.g > 0. || t4.g > 0. || t5.g > 0. || t6.g > 0. || t7.g > 0.) {\n        col += t.g;\n        r = 1.0; g = 1.0; b = 1.0;\n    }\n    if (t.b > 0. || t0.b > 0. || t1.b > 0. || t2.b > 0. || t3.b > 0. || t4.b > 0. || t5.b > 0. || t6.b > 0. || t7.b > 0.) {\n        col += t.b;\n        r = 1.0; g = 1.0; b = 1.0;\n    }\n\n    fragColor = vec4(c, c, c, 1.0);\n        //fragColor = texelFetch( iChannel0, ivec2(fragCoord), 0);\n        //if (fragColor.r > 0.0 || fragColor.g > 0.0 || fragColor.b > 0.0) {\n//            fragColor = vec4(1.0);\n//        }\n        // if (fragColor.r > 0.0) fragColor.r = 1.0;\n        // if (fragColor.g > 0.0) fragColor.g = 1.0;\n        // if (fragColor.b > 0.0) fragColor.b = 1.0;\n        //  fragColor = texture( iChannel0, (fragCoord + vec2(.5, .5)) / iResolution.xy);\n        // fragColor = texelFetch( iChannel0, (fragCoord + vec2(.5, .5)) / iResolution.xy);\n        \n    } else {\n        fragColor = vec4(1.0, 0.6, .25, 1.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 init( vec2 fragCoord ) {\n\n    vec4 fragColor = vec4(\n        gold_noise(fragCoord, fract(iTime * 1.1) * .7 + .3),\n        gold_noise(fragCoord, fract(iTime * 2.9) * .7 + .3),\n        gold_noise(fragCoord, fract(iTime * 3.9) * .7 + .3),\n        1.0);\n\n    return fragColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // INITIALIZE\n    if( iFrame==0 || keypressed(32) ) {\n        fragColor = init(fragCoord);\n        return;\n    }\n    \n    vec4 t = texelFetch( iChannel0, ivec2(fragCoord), 0);\n    vec4 t0 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(-1,-1), 0);\n    vec4 t1 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 0,-1), 0);\n    vec4 t2 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 1,-1), 0);\n    vec4 t3 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0);\n    vec4 t4 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 1, 0), 0);\n    vec4 t5 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2(-1, 1), 0);\n    vec4 t6 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 0, 1), 0);\n    vec4 t7 = texelFetch( iChannel0, ivec2(fragCoord) + ivec2( 1, 1), 0);\n\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    float CENTER_WEIGHT = 7.75;\n    float DIV = (CENTER_WEIGHT + 8.0);\n    float r = (t.r * CENTER_WEIGHT + t0.r + t1.r + t2.r + t3.r + t4.r + t5.r + t6.r + t7.r) / DIV;\n    float g = (t.g * CENTER_WEIGHT + t0.g + t1.g + t2.g + t3.g + t4.g + t5.g + t6.g + t7.g) / DIV;\n    float b = (t.b * CENTER_WEIGHT + t0.b + t1.b + t2.b + t3.b + t4.b + t5.b + t6.b + t7.b) / DIV;\n\n    float MIN = 0.212;\n    float MAX = 0.613;\n\n    if (r >= MIN && r <= MAX) {\n        color.r = r / MAX + g / MAX + b / MAX;\n    }\n    if (g >= MIN && g <= MAX) {\n        color.g = g / MAX + b / MAX + r / MAX;\n    }\n    if (b >= MIN && b <= MAX) {\n        color.b = b / MAX + r / MAX + g / MAX;\n    }\n    fragColor = color;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define keypressed(ascii) ( texelFetch(iChannel3,ivec2(ascii,1),0).x > 0. )\n\n#define qrand(uv, n) (floor( gold_noise(uv, n) * 10.0) / 10.0)\n\n// gold_noise from dcerisano at  \n// Gold Noise ©2015 dcerisano@standard3d.com\n// - based on the Golden Ratio\n// - uniform normalized distribution\n// - fastest static noise generator function (also runs at low precision)\n// - use with indicated fractional seeding method\n// NOTE: Sometimes this random number generator creates obviously aliased / moire\n// patterns. Still, usually it works good. Need something better here.\n\nconst float PHI = 1.61803398874989484820459; // Φ = Golden Ratio \n\nfloat gold_noise(in vec2 xy, in float seed)\n{\n    // return fract(tan(distance(atan(xy*PHI), xy)*seed)*xy.x);\n    return fract(tan(distance(atan(xy*PHI) * seed, xy)*seed)*xy.x);\n}\n\nfloat gold_noise2( in vec2 xy, in float seed )\n{\n    return .5 + .5 * sin(cos(sin(xy.x * seed)*xy.y*seed)*xy.x*seed); // fract(fract(sin(xy.x * seed)*12138.5453123) + fract(cos(xy.y*seed)*13138.5453123) * seed);\n}\n\n\n\n","name":"Common","description":"","type":"common"}]}