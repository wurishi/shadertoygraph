{"ver":"0.1","info":{"id":"MfSXDw","date":"1706391553","viewed":115,"name":"Mandelbrot set as height map","username":"wafer_ex","description":"I wrote this on HLSL last year but didn't uploaded it here... It's just an usual mandelbrot set with smoothed iterations, but I used the iterations as height map and added some light","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getMandelbrotIters(vec2 c) {\n    float maxIters = 32.0;\n    float threshold = 256.0;\n\n    vec2 z = vec2(0);\n    for (float i = 0.0; i < maxIters; i++) {\n        z = vec2(\n            z.x * z.x - z.y * z.y,\n            z.x * z.y + z.y * z.x\n        ) + c;\n        if (length(z) > threshold) {\n            // make iterations smooth\n            return maxIters - log(log(length(z)) / log(threshold)) / log(2.0);\n        }\n    }\n    return 0.0;\n}\n\n// just convers mandelbrot iterations to normal map as like it's a height map\nvec3 getMandelbrotNormal(vec2 c) {\n    // pixel size is so small to hide lines around set, but it makes image noisy\n    vec2 pixelSize = 0.01 / iResolution.xy;\n    \n    float height = getMandelbrotIters(c);\n    float scale = 0.02 + (cos(iTime + 2.0) + 1.0) / 10.0;\n    \n    vec2 dxy = height - vec2(\n        getMandelbrotIters(c + vec2(pixelSize.x, 0.0)),\n        getMandelbrotIters(c + vec2(0.0, pixelSize.y))\n    );\n    \n    return normalize(vec3(dxy * scale / pixelSize, 1.0));\n}\n\nfloat getLight(vec3 lightPos, vec3 normal, vec2 uv) {\n    vec3 lightDir = lightPos - vec3(uv, 0.0);\n    float light = max(dot(lightDir, normal), 0.0);\n    return light;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 camPos = vec2(-0.15, 0.0);\n    float camZoom = 0.35 + sin(iTime / 2.0) / 30.0;\n\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / iResolution.y;\n    uv = (uv + camPos) / camZoom;\n\n    vec3 normal = getMandelbrotNormal(uv);\n    \n    vec3 lightPosR = vec3(sin(iTime) * 3.0, cos(iTime) * 2.0, 0.75);\n    vec3 lightPosG = vec3(sin(iTime + 0.75), cos(iTime + 0.75) * 2.0, 0.75);\n    vec3 lightPosB = vec3(sin(iTime + 1.5) * 2.0, cos(iTime + 1.5) * 2.0, 0.75);\n\n    vec3 color = vec3(\n        getLight(lightPosR, normal, uv),\n        getLight(lightPosG, normal, uv),\n        getLight(lightPosB, normal, uv)\n    ) / 1.2 + vec3(0.2, 0.1, 0.0);\n\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}