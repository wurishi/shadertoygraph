{"ver":"0.1","info":{"id":"MXSyzc","date":"1727498008","viewed":30,"name":"Satisfying Raymarched Thingy","username":"Dipper98","description":"A satisfying thing I made in about 30 minutes because I was bored. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","satisfying"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nCredit to this website for the raymarching tutorial:\nhttps://inspirnathan.com/posts/47-shadertoy-tutorial-part-1\nCredit to Inigo Quilez for his 3D Primitives.\n\nYou can change the speed and color below if you want.\nThe higher the speed number, the lower it goes. kinda confusing lol\n*/\nconst float SPEED = 2.5;\nconst vec3 COLOR = vec3(0.478, 0.686, 0.961);\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nstruct Surface {\n    float sd;\n    vec3 col;\n};\nSurface sdSphere(vec3 p, float r, vec3 offset, vec3 col){\n  float d = length(p - offset) - r;\n  return Surface(d, col);\n}\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return Surface(d, col);\n}\nSurface minWithColor(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2; // The sd component of the struct holds the \"signed distance\" value\n  return obj1;\n}\nSurface sdScene(vec3 p) {\n  float newITime = iTime / SPEED;\n  Surface sphere = sdSphere(vec3(sin(p.x) / 2., p.y + sin(newITime + p.y), cos(p.z) / 2.), fract(1.5 + sin(newITime) / 1.), vec3(0.0), COLOR);\n  vec3 floorColor = vec3(0.5);\n  \n  Surface co = minWithColor(sphere, sdFloor(p, floorColor));\n  return co;\n}\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co;\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n\n  co.sd = depth;\n\n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005;\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(-iMouse.x / 20., 10.5, iMouse.y / 20.);\n  vec3 rd = normalize(vec3(uv.x, uv.y - 0.5, -1));\n\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST);\n\n  if (co.sd > MAX_DIST) {\n    col = vec3(0.835, 1, 1);\n  } else {\n    vec3 p = ro + rd * co.sd;\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(ro.x, 15.0, ro.z);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    float dif = clamp(dot(normal, lightDirection), 0.3, 1.);\n      col = dif * co.col + vec3(0.835, 1, 1) * .2;\n  }\n\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}