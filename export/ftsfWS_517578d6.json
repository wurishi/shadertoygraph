{"ver":"0.1","info":{"id":"ftsfWS","date":"1651400038","viewed":72,"name":"detecting Diameter","username":"Behzod","description":"detection","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["obj"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a regular pentagon, without trigonometric functions. \n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n#define  t    iTime\n#define  pi   3.14159265\n#define  Rhx  0.15\n#define  RDetect    1.9\n\nvec2 off = vec2(-0.9, -0.3);\nvec2 detectedP;\nfloat detectedR = 0.25;\n\nfloat Line(in vec2 p, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = p - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn length(pa - h * ba);\n}\n\nfloat sdHexagram( in vec2 p, in float r )\n{\n    const vec4 k = vec4(-0.5,0.86602540378,0.57735026919,1.73205080757);\n    \n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= 2.0*min(dot(k.yx,p),0.0)*k.yx;\n    p -= vec2(clamp(p.x,r*k.z,r*k.w),r);\n    float rtn = length(p)*sign(p.y);\n    return rtn;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec2 M = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n\tfloat d = sdHexagram( p + off, Rhx );\n    float D = sdHexagram( p + off, Rhx );\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\t\n    col *= 1.05 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(110.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    \n    vec2 Pred = vec2(RDetect*sin(t),    RDetect*cos(t));\n    vec2 Pblu = vec2(RDetect*sin(t+pi), RDetect*cos(t+pi));\n    float Ddetect = length(Pred - Pblu);\n    \n    float whtLine = 1.0 - smoothstep(0.0, 0.01, Line(p, Pred, Pblu));\n    col = mix(col, vec3(1), whtLine );\n    \n    vec3 blue = vec3(0.0, 0.0, 1.0);\n    vec3 red  = vec3(1.0, 0.0, 0.0);\n    vec3 yelw = vec3(1.0, 1.0, 0.0);\n    vec3 grn  = vec3(0.0, 1.0, 0.0);\n    vec3 cyan = vec3(0.0, 1.0, 1.0);\n    vec3 magnt= vec3(1.0, 0.0, 1.0);\n    // if( iMouse.z>0.001 )\n    {\n    d = sdHexagram( Pred + off, Rhx );\n    D = sdHexagram( Pblu + off, Rhx );\n    // blue lined cycle\n    col = mix(col, blue, 1.0 - smoothstep(0.0, 0.005, \n    /* red point */               abs( length(p-Pred)-abs(d)) ) );\n    col = mix(col, red , 1.0 - smoothstep(0.0, 0.005, \n                                  length(p-Pred)-0.015));\n    \n    // red lined cycle\n    col = mix(col, red , 1.0 - smoothstep(0.0, 0.005, \n    /* blue point */              abs( length(p-Pblu)-abs(D)) ) );\n    col = mix(col, blue, 1.0 - smoothstep(0.0, 0.005, \n                                  length(p-Pblu)-0.015) );\n    //yellow point\n    vec2 Pyllw = mix(Pblu, Pred, abs(D) / Ddetect );\n    float pylw = 1.0 - smoothstep(0.0, 0.01, length(p - Pyllw) - 0.01);\n    col = mix(col, yelw, pylw );\n    \n    //green point\n    vec2 Pgrn = mix(Pred, Pblu, abs(d) / Ddetect );\n    float pgrn = 1.0 - smoothstep(0.0, 0.01, length(p - Pgrn) - 0.01);\n    col = mix(col, grn, pgrn );\n    \n    vec2 medianPoint = mix(Pyllw, Pgrn, 0.5);\n    float pMed = 1.0 - smoothstep(0.0, 0.01, length(p - medianPoint) - 0.01);\n    col = mix(col, vec3(0), pMed );\n    \n    float mainR = length(medianPoint - Pyllw);\n    // cyan lined cycle\n    col = mix(col, cyan , 1.0 - smoothstep(0.0, 0.005, \n    /* blue point */              abs( length(p-medianPoint)-mainR) ) );\n    \n    //if( t <= 2.0 * pi )\n    detectedR = max(detectedR, mainR);\n    /*\n    if((t >= 2.0 * pi) && (detectedR <= mainR - 0.01))\n      detectedP = medianPoint;\n      */\n    }\n    \n    // detected body\n    if(t >= 2.0 * pi){\n    // magenta lined cycle\n    col = mix(col, magnt , 1.0 - smoothstep(0.0, 0.01, \n    /* black point */              abs( length(p-detectedP)-detectedR)));\n    col = mix(col, vec3(0), 1.0 - smoothstep(0.0, 0.01, \n                                  length(p-detectedP)-0.015) );\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}