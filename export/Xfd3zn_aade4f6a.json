{"ver":"0.1","info":{"id":"Xfd3zn","date":"1711315290","viewed":87,"name":"smooth_life","username":"0x177","description":"followed tsoding's stream vod on smoothlife as a tutorial ","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["gameoflife","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0,uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// SOURCE: this paper (https://arxiv.org/abs/1111.1567)\n\nfloat ra = 21.;\nfloat b1 = 0.257;\nfloat b2 = 0.336;\nfloat d1 = 0.365;\nfloat d2 = 0.549;\nfloat alpha_n = 0.028;\nfloat alpha_m = 0.147;\n\n#define SPEED 0.025\n\nfloat sigma(float x, float a, float alpha)\n{\n    return 1.0/(1.0 + exp(-(x - a)*4.0/alpha));\n}\n\nfloat sigma_n(float x, float a, float b)\n{\n    return sigma(x, a, alpha_n)*(1.0 - sigma(x, b, alpha_n));\n}\n\nfloat sigma_m(float x, float y, float m)\n{\n    return x*(1. - sigma(m, 0.5, alpha_m)) + y*sigma(m, 0.5, alpha_m);\n}\n\nfloat s(float n, float m)\n{\n    return sigma_n(n, sigma_m(b1, d1, m), sigma_m(b2, d2, m));\n}\n\nfloat vmax(vec3 x) {\n    return max(max(x.x,x.y),x.z);\n}\n\nfloat sample_prev(vec2 norm)\n{\n    norm /= iResolution.xy;\n    vec4 t = texture(iChannel0, norm);\n    return vmax(t.xyz);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10) {\n        fragColor = texture(iChannel1,fragCoord/iResolution.xy).xxxw;\n    } else {\n    float cx = fragCoord.x;\n    float cy = fragCoord.y;\n    float ri = ra/3.0;\n    float m = 0.;\n    float M = 3.1415*pow(ri,2.0);\n    float n = 0.;\n    float N = 3.1415*ra*ra - M;\n\n    for (float dy = -ra; dy <= ra; dy += 1.0) {\n        for (float dx = -ra; dx <= ra; dx += 1.0) {\n            float x = cx + dx;\n            float y = cy + dy;\n            if (dx*dx + dy*dy <= ri*ri) {\n                m += sample_prev(vec2(x,y));\n            } else if (dx*dx + dy*dy <= ra*ra) {\n                n += sample_prev(vec2(x,y));\n            }\n        }\n    }\n    m /= M;\n    n /= N;\n    float q = s(n, m);\n    float diff = 2.0*q - 1.0;\n    float v = clamp(sample_prev(vec2(cx, cy)) + diff*SPEED, 0.0, 1.0);\n\n    fragColor = vec4(vec3(v), 1);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}