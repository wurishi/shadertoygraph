{"ver":"0.1","info":{"id":"clsBWl","date":"1693603547","viewed":79,"name":"three directional grid patches","username":"jt","description":"Random patches of grid pattern walls oriented in three directions.\n[url=https://www.shadertoy.com/view/mlXfDs]twin[/url]\nTODO: Fix some glitches where walls cross underlying triangular grid.\nTODO: Understand several constants obtained by trial and error.\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","grid","raycasting","triangle","voxel","hexagon","slice","dda","maze","step","triangular"],"hasliked":0,"parentid":"ctXBWl","parentname":"triangular maze"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/DtsBWl three directional grid patches, written 2023 by jt\n// (variant of on https://www.shadertoy.com/view/mlXfDs three directional brick patches)\n// based on https://www.shadertoy.com/view/ctXBWl triangular maze\n// based on https://www.shadertoy.com/view/DlXfR2 triangular with orthogonal grid\n// based on https://www.shadertoy.com/view/DtScRy Basalt Columns Triangular Hills\n// based on https://www.shadertoy.com/view/dtjcDW hexagonal rocks - triangular sea\n// based on https://www.shadertoy.com/view/dlByWW Hexagonally Grouped Triangle DDA\n// and https://www.shadertoy.com/view/DtfXzS Triangle Terrain (via Voxel DDA)\n// abd https://www.shadertoy.com/view/mlfXD7 Triangle DDA via Voxel DDA Slice\n// based on https://www.shadertoy.com/view/mtfXDM Branchless Voxel Raycasting Tex2\n// clean-up of https://www.shadertoy.com/view/7dK3D3 Branchless Voxel Raycasting Tex\n// using voxel DDA of https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4\n// (with loop optimization by kzy), DDA based on http://lodev.org/cgtutor/raycasting.html\n\n// Random patches of grid pattern walls oriented in three directions.\n\n// TODO: Fix some glitches where walls cross underlying triangular grid.\n// TODO: Understand several constants obtained by trial and error.\n\n// tags: 3d, raytracing, grid, terrain, raycasting, triangle, voxel, hexagon, heightmap, slice, rocks, dda, step, columns, hill, basalt\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nuint uhash(ivec3 v)\n{\n    return triple32(uint(v.x) + triple32(uint(v.y) + triple32(uint(v.z))));\n}\n\nbool bhash(ivec3 v)\n{\n    return (uhash(v) & 1u) != 0u;\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n#define DIST_MAX 1000.0\n\n#define MAX_RAY_STEPS 64\n\n#define USE_SHADOWS\n\n// modified https://iquilezles.org/articles/intersectors\nvec2 boxIntersection(vec3 ro, vec3 rd, vec3 s)\n{\n    vec3 m = 1.0 / rd;\n    vec3 n = m * ro;\n    vec3 k = abs(m) * s;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max(max(t1.x, t1.y), t1.z);\n    float tF = min(min(t2.x, t2.y), t2.z);\n    if(tN > tF || tF < 0.0) return vec2(DIST_MAX);\n    return vec2(tN, tF);\n}\n\nvec3 boxNormal(vec3 e, vec3 p)\n{\n    vec3 d = abs(p) - e;\n    vec3 s = sign(p);\n\n    if (d.z > d.y && d.z > d.x)\n    {\n        return vec3(0, 0, s.z);\n    }\n    else\n    {\n        if (d.y > d.x)\n        {\n            return vec3(0, s.y, 0);\n        }\n        else\n        {\n            return vec3(s.x, 0, 0);\n        }\n    }\n\n    return vec3(0);\n}\n\nvec3 triangle_center(vec3 a, vec3 b, vec3 c)\n{\n    return (a+b+c)/3.0;\n}\n\nvec3 triangle_normal(vec3 a, vec3 b, vec3 c)\n{\n    return normalize(cross(a - b, c - b));\n}\n\nfloat plane_intersection(vec3 pp, vec3 pn, vec3 ro, vec3 rd)\n{\n    return dot(pp - ro,pn)/dot(rd,pn);\n}\n\n// Is there a better way to implement integer-division that always round DOWN ?!\nint div_floor(int a, int b)\n{\n    return (a > 0 && b < 0) ? ((a - 1) / b) - 1 : (a < 0 && b > 0) ? (a + 1) / b - 1 : a / b;\n}\n/*\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    bool lane = (i.x&1)!=0;\n    int parity = ((abs(i.x+i.y+i.z)) == 2) ? 1 : 0;\n\n    if(lane)\n        return ivec3\n            (\n                div_floor(parity+i.y*2+i.x,3),\n                div_floor(parity+i.z*2+i.y,3),\n                div_floor(parity+i.x*2+i.z,3)\n            );\n\n    return ivec3\n        (\n            div_floor(parity+i.y*2+i.x,3),\n            div_floor(parity+i.z*2+i.y,3),\n            div_floor(parity+i.x*2+i.z,3)\n        );\n}\n*/\n// TODO: verify if this simplified implementation can be safely used in different context.\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    int parity = ((abs(i.x+i.y+i.z)) == 2) ? 1 : 0;\n\n    return ivec3\n        (\n            div_floor(parity+i.y*2+i.x,3),\n            div_floor(parity+i.z*2+i.y,3),\n            div_floor(parity+i.x*2+i.z,3)\n        );\n}\n\nbool ledge(ivec3 i)\n{\n    i = hexagonal(i);\n    i = i % 6;\n    return i.x*i.x+i.y*i.y+i.z*i.z < 12;\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec4 triangle_trace(vec3 ray_pos_orig, vec3 ray_dir_orig) // step triangles by stepping through voxels along plane orthogonal to main diagonal (jt)\n{\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T =\n        mat3\n        (\n            vec3(+1.0/sqrt(2.0),-1.0/sqrt(2.0), 0.0),\n            vec3(-1.0/sqrt(6.0),-1.0/sqrt(6.0), 2.0/sqrt(6.0)),\n            vec3(-1.0/sqrt(3.0),-1.0/sqrt(3.0),-1.0/sqrt(3.0))\n        );\n\n    // step through voxels along plane orthogonal to main diagonal (1,1,1)\n    vec3 ray_pos = T * vec3(ray_pos_orig.xy, 0);\n    vec3 ray_dir = T * vec3(ray_dir_orig.xy, 0);\n\n    // initialization from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n    ivec3 map_pos = ivec3(floor(ray_pos));\n    vec3 delta_dist = 1.0 / abs(ray_dir);\n    ivec3 ray_step = ivec3(sign(ray_dir));\n    vec3 side_dist = (sign(ray_dir) * (vec3(map_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * delta_dist;\n    bvec3 mask = bvec3(0);\n    for (int i = 0; i < MAX_RAY_STEPS; i++)\n    {\n        vec4 content = vec4(-ray_dir_orig, DIST_MAX);\n   \n        float dist_to_plane = -ray_pos_orig.z/ray_dir_orig.z;\n        if(dist_to_plane > 0.0)\n        {\n            content = vec4(vec3(0,0,1), dist_to_plane);\n        }\n\n        {\n            float flip = ((map_pos.x ^ map_pos.y ^ map_pos.z) & 1) != 0 ? +1.0 : -1.0;\n\n            uint choice = uhash(map_pos / 5) % 3u;\n            {\n                float HACK = choice == 1u ? -1.0 : +1.0; // XXX WTF is this necessary?! XXX\n                {\n                    //vec3 c = vec3(-1.,-1.,-1.)*T+vec3(0,flip*0.2,0.+flip*sqrt(3.0)/6.0);\n                    vec3 c = vec3(0,HACK*flip*sqrt(1.0/24.0)/*VERIFY*/,-0.6/*???*/+flip*sqrt(3.0)/6.0);\n                    vec3 e = vec3(0.4/*verify*/, 0.05, 0.25);\n                    float phi = radians(0.0-float(choice)*60.0);\n                    mat3 m = mat3( cos(phi), sin(phi), 0,-sin(phi), cos(phi), 0, 0, 0, 1);\n                    vec2 bounds = boxIntersection(m*(ray_pos_orig - vec3(map_pos)*T) - c, m*ray_dir_orig, e); // bounding box\n                    //bounds.x = max(bounds.x, tmin);\n                    if(bounds.x >= 0.0 && bounds.x < DIST_MAX)\n                        content = combine(content, vec4(boxNormal(e, m*(ray_pos_orig - vec3(map_pos)*T + ray_dir_orig * bounds.x) - c)*m, bounds.x));\n                }\n                {\n                    //vec3 c = vec3(-1.,-1.,-1.)*T+vec3(0,flip*0.2,0.+flip*sqrt(3.0)/6.0);\n                    vec3 c = vec3(HACK*flip*0.1/*???*/,0,-0.6/*???*/+flip*sqrt(3.0)/6.0);\n                    vec3 e = vec3(1.0, 0.05, 0.25);\n                    float phi = radians(90.0-float(choice)*60.0);\n                    mat3 m = mat3( cos(phi), sin(phi), 0,-sin(phi), cos(phi), 0, 0, 0, 1);\n                    vec2 bounds = boxIntersection(m*(ray_pos_orig - vec3(map_pos)*T) - c, m*ray_dir_orig, e); // bounding box\n                    //bounds.x = max(bounds.x, tmin);\n                    if(bounds.x >= 0.0 && bounds.x < DIST_MAX)\n                        content = combine(content, vec4(boxNormal(e, m*(ray_pos_orig - vec3(map_pos)*T + ray_dir_orig * bounds.x) - c)*m, bounds.x));\n                }\n            }\n        }\n\n        float tmin = length(vec3(mask) * (side_dist - delta_dist)); // assume ray_dir normalized\n\n        // core from https://www.shadertoy.com/view/4dX3zl Branchless Voxel Raycasting by fb39ca4 implementing https://lodev.org/cgtutor/raycasting.html\n        mask = lessThanEqual(side_dist.xyz, min(side_dist.yzx, side_dist.zxy)); // fb39ca4: \"Thanks kzy for the suggestion!\"\n        side_dist += vec3(mask) * delta_dist;\n        map_pos += ivec3(vec3(mask)) * ray_step;\n        float tmax = length(vec3(mask) * (side_dist - delta_dist)); // assume ray_dir normalized\n\n        if(content.w < tmax)\n            return content;\n    }\n\n    return vec4(-ray_dir_orig, DIST_MAX); // sky-sphere\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 I )\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    //I = 2.0 * I.xy / R - 1.0;\n    //I.x *= R.x / R.y;\n    I = (2.0 * I - R) / R.y; // concise pixel-position mapping thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 1.25 * pi/2.0;\n\n    vec3 ray_pos = vec3(0.0, 0.0, -24.0);\n    vec3 ray_dir = vec3(I.x, I.y, 2.0); // NOTE: un-normalized direction appears to work fine here!\n    //ray_dir = normalize(ray_dir); // looks like ray-direction does not need to be normalized\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ray_pos = M * ray_pos;\n    ray_dir = M * ray_dir;\n    \n    ray_pos.z -= 5.0;\n\n    vec3 color = vec3(0);\n    vec4 result = triangle_trace(ray_pos, ray_dir);\n    if(result.w < DIST_MAX)\n    {\n        result.xyz *= dot(result.xyz, ray_dir) < 0.0 ? +1.0 : -1.0; // repair front-back\n        color = vec3(1);\n        if(false)\n        {\n            vec3 light_dir = normalize(vec3(1,2,3));\n            //vec3 light_dir = normalize(vec3(cos(iTime),sin(iTime),1));\n            float diffuse = max(0.0, dot(result.xyz, light_dir));\n            color *= diffuse;\n        }\n        else\n        {\n            vec3 dst = ray_pos + ray_dir * result.w;\n            //vec3 light_pos = vec3(0,0,5);\n            vec3 light_pos = vec3(vec2(-sin(yaw),cos(yaw))*15.0,5);\n            //vec3 light_pos = vec3(5.0*vec2(cos(iTime/5.0),sin(iTime/5.0)),5);\n            vec3 light_diff = light_pos - dst;\n            float light_dist = length(light_diff);\n            vec3 light_dir = light_diff / light_dist;\n#ifdef USE_SHADOWS\n            bool shadow = triangle_trace(dst+result.xyz*0.001, light_dir).w < DIST_MAX;\n#else\n            bool shadow = false;\n#endif\n            vec3 light_color = vec3(1) * 50.0;\n            vec3 diffuse = shadow ? vec3(0) : light_color * max(0.0, dot(result.xyz, light_dir)) / (light_dist * light_dist);\n            float ambient = 0.01;\n            color *= (0.5 + 0.5 * result.xyz); // visualize normals\n            //color *= mix(1.0, 0.1, abs(result.z)); // darken horizontal surfaces for more contrast\n            color *= mix(0.2, 1.0, step(0.01, dst.z)); // darken floor for more contrast\n            color *= (diffuse + ambient); // apply light\n        }\n    }\n    color = tanh(color); // soft-clamp overly bright colors\n    fragColor = vec4(sqrt(color), 1.0); // gamma\n}\n","name":"Image","description":"","type":"image"}]}