{"ver":"0.1","info":{"id":"ctV3Dy","date":"1684592078","viewed":141,"name":"Powder Simulation","username":"Maticzpl","description":"Click with mouse to place sand\nQ to make brush smaller\nE to make brush bigger\n\nWorks with fullscreen","likes":10,"published":1,"flags":48,"usePreview":0,"tags":["simulation","powder","tpt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Use mouse to place sand\n// Q to make brush smaller\n// E to make brush bigger\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 screenScale = max(iResolution.xy / vec2(640, 360), vec2(1.0));\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\n    fragColor = texture(iChannel0, uv / screenScale);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SAND vec4(1, 1, 0, 1)\n#define BRCK vec4(0.4, 0.4, 0.4, 1)\n#define NONE vec4(0)\n\n#define PT(x, y) pt(pos, vec2(x, y))\n\n// https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec4 pt(vec2 pos, vec2 rel) {\n    return texture(iChannel0, (pos + rel) / iResolution.xy);\n}\n\n// Checks if particle would move to target pos\n// pos - position of particle\n// tg - target pos\nbool falls(vec2 pos, vec2 tg) {\n\n    if(pt(pos, vec2(0)) != SAND)\n        return false;\n\n    vec2 rel = vec2(0, -1);\n    if (pt(pos, rel) == NONE)\n    {\n        return rel == tg;\n    }\n    \n    \n    float random = rand(pos + vec2(iTime));\n    int randomDirection = (int(floor(random * 2.0)) % 2) * 2 + 1;    \n    \n    rel = vec2(randomDirection, -1);\n    if (pt(pos, rel) == NONE)\n    {\n        return rel == tg;\n    }\n    \n    rel = vec2(-randomDirection, -1);\n    if (pt(pos, rel) == NONE)\n    {\n        return rel == tg;\n    }\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float brushSize = max(texture(iChannel1, vec2(0)).r * 30.0, 0.1);\n\n    vec2 screenScale = iResolution.xy / vec2(640, 360);\n\n    vec2 pos = fragCoord;\n\n    vec4 here = PT(0, 0);\n    fragColor = here;\n\n    // On Create\n    if(iFrame == 0)\n    {\n        if(distance(fragCoord, vec2(320, 300) * screenScale) < 30.0)\n        {\n            fragColor = SAND;\n        }    \n        else if ( // Some wall\n            fragCoord.x > 100.0 * screenScale.x &&\n            fragCoord.x < 540.0 * screenScale.x &&\n            distance(fragCoord.y, 50.0 * screenScale.y ) < 1.0\n        )\n        {\n            fragColor = BRCK;\n        }\n        else\n        {\n            fragColor = NONE;\n        }\n    }\n    \n    // Mouse Create\n    else if(iMouse.z > .0 && distance(floor(fragCoord), floor(iMouse.xy / screenScale)) < brushSize) \n    {\n        fragColor = SAND;\n    }\n    \n    // Movement\n    else if(here == NONE) // Make empty cells full\n    {\n        for(int i = -1; i <= 1; i++)\n        {\n            vec2 rel = vec2(i, 1);\n            if(falls(pos + rel, -rel))\n                fragColor = SAND;            \n        }\n    }\n    else if(here == SAND) // Make full cells empty\n    {\n    \n        for(int i = -1; i <= 1; i++)\n        {\n            vec2 rel = vec2(i, -1);\n            if(falls(pos, rel))\n                fragColor = NONE;            \n        }\n    }   \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// this buffer is only for some variables :P\n\nbool keyPressed(int code) {    \n    return texture(iChannel0, vec2(float(code) / 256.0, 0.0)).r > 0.1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float brushSize = texture(iChannel1, vec2(0)).r;\n    \n    if(iFrame == 0)\n        brushSize = 0.16;\n\n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \n    if(length(fragCoord) < 1.0)\n    {\n        float offset = 0.0;\n        if(keyPressed(81))\n            offset -= 0.01;\n        if(keyPressed(69))\n            offset += 0.01;\n            \n        fragColor = vec4(clamp(brushSize + offset, 0.0, 1.0), 0.0, 0.0, 1.0);\n        \n    }\n}","name":"Buffer B","description":"","type":"buffer"}]}