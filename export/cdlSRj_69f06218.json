{"ver":"0.1","info":{"id":"cdlSRj","date":"1669208696","viewed":100,"name":"Simple Sin/Cos Waves","username":"_bryan","description":"A straight forward simple shader that adds a sin and cos wave together","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["waves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float wave1(float x, float t) {\n    float val = (cos(64. * x + t) + 1.) / 2.;\n    return val;\n}\n\nfloat wave2(float x, float t) {\n    float val = (sin(16. * x + t) + 1.) / 2.;\n    return val;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    float w1 = wave1(uv.x, iTime*1.);\n    float w2 = wave2(uv.x, iTime*1.);\n    float w3 = wave1(uv.x/2., iTime*16.);\n    float w4 = (w1 + w2 + w3) / 3.;\n    float d1 = abs(w4 - uv.y);\n    \n    if (d1 <= 0.001) {\n        //fragColor = vec4(0., 1., 0., 1.);\n        //float c = rand(uv);\n        fragColor = vec4(0., 1. - d1, 0., 1.);\n    }\n    else {\n        float color = 1.0 - (d1 * 16.);\n        float rcolor = rand(uv);\n        float avg = (color + rcolor) / 2.;\n        fragColor = vec4(0., avg, 0., 1.);\n    }\n    \n}","name":"Image","description":"","type":"image"}]}