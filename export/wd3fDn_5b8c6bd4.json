{"ver":"0.1","info":{"id":"wd3fDn","date":"1604787418","viewed":68,"name":"Pixels in chessboard pattern","username":"DmitRex","description":"Utility shader for drawing pixels in a checkerboard pattern, useful for depth downsampling.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pixel","checkerboard","pattern","pixels","chess","chessboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// draw pixels in a checkerboard pattern,\n// useful for depth downsampling,\n// example: ( pixelIndex % 2 == 0 ) ? depthmin : depthmax;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    int pixelIndex = int( fragCoord.x ) + int( fragCoord.y );\n    \n    vec3 col = vec3( 0.0, 1.0, 0.0 );\n    \n    if( pixelIndex % 2 == 0 )\n    {\n        col = vec3( 1.0, 0.0, 0.0 );\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}