{"ver":"0.1","info":{"id":"MfjyW1","date":"1722288995","viewed":31,"name":"The Knight | Hollow Knight","username":"dd2d","description":"I created a simple fan art of the protagonist of the Hollow Knight game.\n\nRender settings: https://www.shadertoy.com/view/lslXRj","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","distancefield","sdf","fanart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 background = vec3(0.02,0.03,0.05);\n\n\nfloat ndot(vec2 a, vec2 b){\n    return a.x*b.x - a.y*b.y;\n}\n\nvec2 noise(in vec3 x){\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.- 2.*f);\n\tvec2 uv = (p.xy + vec2(37.,17.)*p.z) + f.xy;\n\tvec4 rg = textureLod(iChannel0,(uv+0.5)/256.,0.);\n\treturn mix(rg.yw,rg.xz,f.z);\n}\n\nmat2 rotate(float k){\n\tfloat cs = cos(k), sn = sin(k);\n\treturn mat2(vec2(cs,-sn), vec2(sn,cs));\n}\n\nvec3 rotate3d(inout vec3 v, vec2 a){\n\tvec4 cs = vec4(cos(a.x),sin(a.x), cos(a.y),sin(a.y));\n\t\n\tv.yz = v.yz*cs.x+v.zy*cs.y*vec2(-1,1);\n\tv.xz = v.xz*cs.z+v.zx*cs.w*vec2(1,-1);\n\t\n\tvec3 p;\n\tp.xz = vec2(-cs.w,-cs.z)*cs.x;\n\tp.y = cs.y;\n\treturn p;\n}\n\nfloat len(in vec3 p, float k){\n\tp = pow(abs(p), vec3(k));\n\treturn pow(p.x + p.y + p.z, 1./k);\n}\n\nfloat len(in vec2 p, float k){\n\tp = pow(abs(p), vec2(k));\n\treturn pow(p.x + p.y, 1./k);\n}\n\nfloat sdmin(float a, float b, float k){\n\tfloat h = max(k - abs(a - b), 0.);\n\treturn min(a,b) - h*h/k*0.25;\n}\n\nfloat sdmax(float a, float b, float k){\n\tfloat h = max(k - abs(a - b), 0.);\n\treturn max(a,b) + h*h/k*0.25;\n}\n\nfloat sabs(float p, float k){\n\treturn sqrt(p*p + k*k) - k;\n}\n\nfloat smoothMax(float a, float b, float s){\n\treturn a - sqrt(s*s + pow(max(0.,a - b),2.));\n}\n\n\nfloat stick0(vec3 p, vec3 a, vec3 b, float r0, float r1, float f) {\n\tvec3 d = b - a;\n\tfloat h = length(d); d = normalize(d);\n\tfloat t = dot(p - a, d), th = t/h;\n\treturn length(a + clamp(t,0.,h)*d - p) - mix(r0,r1,th)*max(0.,1. + f - f*4.*abs(th - 0.5)*abs(th - 0.5));\n}\n\nfloat stick(vec3 p, vec3 a, vec3 b, float r0, float r1) {\n\tvec3 d = b - a; \n    float h = length(d);\n\td = normalize(d); \n    float t = clamp(dot(p - a, d), 0., h);\n\treturn length(a + t*d - p) - mix(r0, r1, t/h);\n}\n\nfloat torus(vec3 p, float h, float r){\n\tvec2 q = vec2(length(p.xz) - h, p.y);\n\treturn length(q) - r;\n}\n\nfloat torus0(vec3 p, float h, float r, float k, float k2){\n\tvec2 q = vec2(len(p.xz, k) - h, p.y);\n\treturn len(q, k2) - r;\n}\n\nfloat ellipsoid(vec3 p, vec3 r){\n\tfloat k0 = length(p/r);\n\tfloat k1 = length(p/(r*r));\n\treturn k0*(k0 - 1.)/k1;\n}\n\nfloat ellipsoid0(vec3 p, vec3 r, float k){\n\tfloat k0 = len(p/r, k);\n\tfloat k1 = len(p/(r*r), k);\n\treturn k0*(k0 - 1.)/k1;\n}\n\nfloat capsule(vec3 p, float h, float r){\n\tp.y -= clamp(p.y, 0., h);\n\treturn len(p, 1.5) - r;\n}\n\nfloat rhombus(vec3 p, float la, float lb, float h, float ra){\n\tp = abs(p);\n\tvec2 b = vec2(la, lb);\n\tfloat f = clamp((ndot(b, b - 2.*p.xz))/dot(b, b), -1., 1.);\n\tvec2 q = vec2(length(p.xz - 0.5*b*vec2(1. - f,1. + f))*sign(p.x*b.y + p.z*b.x - b.x*b.y) - ra, p.y - h);\n\treturn min(max(q.x, q.y),0.) + length(max(q, 0.));\n}\n\n\nvec2 knife(in vec3 p){\n\tp.xyz = p.zyx;\n\tfloat d2 = rhombus(p, max(0.06 + 0.08*clamp(p.y,-0.8,0.5),0.), max(0.05 + 0.06*p.y,0.), 0.7, 0.001) - 0.01;\n    \n\tp.y -= 0.5;\n\tfloat d = capsule(p, 0.45, 0.03);\n\td = sdmin(d, d2, 0.04);\n    \n\treturn vec2(d, 2.);\n}\n\nvec2 head(in vec3 p){\n\tfloat d0, d, res = 2.;\n    \n\tvec3 q = p - vec3(0.4,-0.08,0.);\n\td = ellipsoid0(p, vec3(0.4,0.5,0.5 + 0.06*max(p.y,-0.4)), 2.4 + 0.2*max(p.y,0.));\n\t\n\tp.y -= 0.7; p = p.yxz;\n\td0 = sdmin(torus(p, 0.4 + 0.3*abs(p.z), 0.08), d, 0.04);\n\t\n    //\n        p.x -= 0.4;\n        d0 = sdmax(-ellipsoid0(p, vec3(0.15,0.15,0.4), 1.4), d0, 0.04) - 0.01;\n        d = min(d, d0);\n    //\n    /*\n        p.x -= 0.38;\n        d0 = sdmax(0.01-rhombus(p, 0.25, 0.25, 0.4, 0.01), d0, 0.05) - 0.02;\n        d = min(d, d0);\n        p.x += 0.02;\n    */\n\t\n\tq.z = abs(q.z) - 0.24; p = q; q.yz *= rotate(0.15);\n\td = sdmax(-ellipsoid(q, vec3(0.16,0.18,0.16)), d, 0.02);\n\t\n\td0 = ellipsoid(q + vec3(0.21,-0.055,0.05), vec3(0.2,0.3,0.2));\n\tif( d > d0 ){ d = d0; res = 3.; }\n\treturn vec2(d, res);\n}\n\nvec2 tors(in vec3 p){\n\tfloat d = ellipsoid0(p, vec3(0.2,0.33,0.29), 2.5);\n\treturn vec2(d, 3.);\n}\n\nvec2 foot(in vec3 p){\n\tp.z = abs(p.z) - 0.18;\n\tfloat d = stick0(p, vec3(0.,0.5,0.), vec3(0.), 0.06, 0.03, 1.);\n\treturn vec2(d, 3.);\n}\n\nvec2 robe(in vec3 p){\n\tconst int n = 13;\n\tconst float b = 6.28/float(n);\n\tp.xz = rotate(b*round(atan(p.z, p.x)/b))*p.xz;\n\t\n\tp.x -= 0.3 - 0.5*pow(p.y, 2.5);\n\tfloat d = stick(p, vec3(0.,0.6,0.), vec3(0.,0.1,0.), 0.06, 0.1);\n\treturn vec2(d, 1.);\n}\n\n\n\nvec2 map(in vec3 p){\n\tp.y += 1.8;\n    vec2 d2, d = vec2(100.,0.);\n\t\n\tp.y -= 2.;\n\td2 = head(p);\n\tif( d.x > d2.x ) d = d2;\n\t\n\tp.y += 0.84;\n\td2 = tors(p);\n\tif( d.x > d2.x ) d = d2;\n\t\n\tp.y += 0.6;\n\td2 = foot(p);\n\td.x = sdmin(d2.x, d.x, 0.1);\n\t\n\tp.y -= 0.3;\n\td2 = robe(p);\n\tif( d.x > d2.x ) d = d2;\n\t\n\tp += vec3(0.7,-0.3,0.25);\n\tp.xz *= rotate(0.3); p.yz *= rotate(-1.8); p.xy *= rotate(0.3);\n\td2 = knife(p*0.7);\n\tif( d.x > d2.x ) d = d2;\n\t\n\td.x -= 0.001; d.x *= 0.7;\n\treturn d;\n}\n\n\n\nvec3 sky(vec3 ray){\n\treturn background*mix(vec3(0.8), vec3(0.), exp2(-(1./max(ray.y,0.01))*vec3(0.4,0.6,1.)));\n}\n\nvec3 shade(vec3 pos, vec3 ray, vec3 normal, vec3 lightDir1, vec3 lightDir2, vec3 lightCol1, vec3 lightCol2, float shadowMask1, float shadowMask2, float distance){\n\tvec3 ambient = background*mix(vec3(0.2,0.27,0.4), vec3(0.4), 0.5 - normal.y*0.5);\n\tfloat aoRange = distance*0.05;\n\t\n\tfloat occlusion = max(0.,1. - map(pos + normal*aoRange).x/aoRange);\n\tocclusion = exp2(-2.*pow(occlusion,2.));\n\tambient *= occlusion*0.8 + 0.2;\n\n\tfloat ndotl1 = max(0.,dot(normal,lightDir1));\n\tfloat ndotl2 = max(0.,dot(normal,lightDir2));\n\tfloat lightCut1 = smoothstep(0.,0.1,ndotl1);\n\tfloat lightCut2 = smoothstep(0.,0.1,ndotl2);\n\n\tvec3 light = ambient;\n\tlight += lightCol1*shadowMask1*ndotl1;\n\tlight += lightCol2*shadowMask2*ndotl2;\n\n\n\tfloat specularity = noise(pos/vec3(0.05,0.2,0.05)).x;\n\t\n\tvec3 h1 = normalize(lightDir1-ray);\n\tvec3 h2 = normalize(lightDir2-ray);\n\tfloat specPower = exp2(3. + 5.*specularity);\n\tvec3 specular1 = lightCol1*shadowMask1*pow(max(.0,dot(normal,h1))*lightCut1, specPower)*specPower/32.;\n\tvec3 specular2 = lightCol2*shadowMask2*pow(max(.0,dot(normal,h2))*lightCut2, specPower)*specPower/32.;\n\t\n\tvec3 rray = reflect(ray,normal);\n\tvec3 reflection = sky(rray);\n\t\n\t\n\tfloat specOcclusion = max(0.,1. - map(pos + rray*aoRange).x/(aoRange*max(0.01,dot(rray,normal))));\n\tspecOcclusion = exp2(-2.*pow(specOcclusion,2.));\n\tspecOcclusion *= occlusion;\n    reflection *= specOcclusion;\n\t\n\tfloat fresnel = pow(1. + dot(normal,ray), 5.);\n\tfresnel = mix(mix(0., 0.01, specularity), mix(0.4, 1., specularity), fresnel);\n\t\n    float res = map(pos).y;\n\tvec3 mate = vec3(1,0.95,0.9);\n    \n\tif( abs(res-1.) < 1e-2 ){ mate = 2.5*vec3(0.,0.04,0.1); specular1 *= 0.1; specular2 *= 0.1;  }\n\telse if( abs(res-2.) < 1e-2 ){ mate = vec3(0.9); }\n\telse if( abs(res-3.) < 1e-2 ){ mate = vec3(0.01); specular1 *= 0.1; specular2 *= 0.01; }\n\t\n\tvec3 result = light*mate;\n\tresult = mix(result, reflection, fresnel);\n\tresult += specular1 + specular2;\n\n\treturn result;\n}\n\nfloat trace(vec3 pos, vec3 ray, float traceStart, float traceEnd){\n\tfloat t = traceStart, h;\n\tfor( int i=0; i < 60; i++ ){\n\t\th = map(pos+t*ray).x;\n\t\tif( h < 0.002 || t > traceEnd ) break;\n\t\tt = t+h;\n\t} if( t > traceEnd || h > 0.01 ) return 0.;\n\t\n\treturn t;\n}\n\nvec3 normal(vec3 pos, vec3 ray, float t){\n    float pitch = 0.2*t/iResolution.x;\n\t\n\tvec2 d = vec2(-1,1)*pitch;\n\n\tvec3 p0 = pos+d.xxx;\n\tvec3 p1 = pos+d.xyy;\n\tvec3 p2 = pos+d.yxy;\n\tvec3 p3 = pos+d.yyx;\n\t\n\tfloat f0 = map(p0).x;\n\tfloat f1 = map(p1).x;\n\tfloat f2 = map(p2).x;\n\tfloat f3 = map(p3).x;\n\t\n\tvec3 grad = p0*f0+p1*f1+p2*f2+p3*f3 - pos*(f0+f1+f2+f3);\n\t\n\tfloat gdr = dot(grad, ray);\n\tgrad -= max(0.,gdr)*ray;\n\t\n\treturn normalize(grad);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\t\n\tvec3 ray = normalize(vec3( fragCoord.xy-iResolution.xy*0.5, iResolution.x ));\n\tvec3 localRay = ray;\n\n\tvec2 mouse = 0.5 - iMouse.yx/iResolution.yx;\n\t\t\n\tvec3 pos = 5.5*rotate3d(ray, vec2(0.2,1.- 0.1*iTime) - vec2(1.,6.)*mouse);\n\t\n\tvec3 col;\n\n\tvec3 lightDir1 = normalize(vec3(3,1,-2));\n\tvec3 lightPos = vec3(-4.,4.,4.);;\n\t\n\tvec3 lightCol1 = vec3(1.1,1.,0.9)*3.5*background;\n\tvec3 lightCol2 = vec3(0.9,0.6,0.4)*9.;\n\t\n\tfloat lightRange2 = 0.4;\n\t\n\tfloat traceStart = 0.5;\n\tfloat traceEnd = 40.;\n\t\n\tfloat t = trace(pos, ray, traceStart, traceEnd);\n    \n\tif( t > 0. ){\n\t\tvec3 p = pos + ray*t;\n\t\tvec3 lightDir2 = lightPos - p;\n\t\tfloat lightIntensity2 = length(lightDir2);\n\t\tlightDir2 /= lightIntensity2;\n\t\tlightIntensity2 = lightRange2/(0.1 + lightIntensity2*lightIntensity2);\n\t\t\n\t\tfloat s1 = (trace(p, lightDir1, 0.05, 2.) > 0.) ? 0. : 1.;\n\t\tfloat s2 = (trace(p, lightDir2, 0.05, 2.) > 0.) ? 0. : 1.;\n\t\t\n\t\tvec3 n = normal(p, ray, t);\n\t\tcol = shade(p, ray, n, lightDir1, lightDir2, lightCol1, lightCol2*lightIntensity2, s1, s2, t);\n\t\t\n\t\tcol = mix(vec3(0.8), col, exp2(-t*vec3(0.4,0.6,1.)/200.));\n\t}\n\telse{ \n        col = sky(ray);\n    }\n\n\tcol *= smoothstep(0.5, 0., dot(localRay.xy,localRay.xy));\n\tvec3 c = col - 1.;\n\tc = sqrt(c*c + 0.05);\n\tcol = mix(col, 1. - c, 0.48);\n\t\n\tfloat l = max(max(col.x,max(col.y,col.z)), 0.01);\n\tfloat l2 = smoothMax(l,1.,0.01);\n\tcol *= l2/l;\n\t\n\tfragColor = vec4(pow(col,vec3(0.45)),1);\n}\n","name":"Image","description":"","type":"image"}]}