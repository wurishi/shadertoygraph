{"ver":"0.1","info":{"id":"stBBD1","date":"1666304353","viewed":130,"name":"Light is not particles","username":"jean80it","description":"shows light cannot be made of particles","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["simulation","light","particle","particlesystem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader is part of several I wrote to create animations\n// to support a presentation about Quantum Electrodynamics.\n// it is not supposed to be \"proof\" for anything, but to provide \n// good visualization of some concepts to help intuition.\n\n#define N 300\n#define P_STRIDE 100\n#define VEL_LEN 0.007\n\n#define PI 3.1415926\n#define TAU 6.2831852\n\n#define FLOATMAX 1000.0\n#define R 0.007\n#define PART_HARDNESS 0.7\n\n#define sqr(x) (x * x)\n\nvec4 loadPStatus(int idx)\n{\n    // fetch particle data\n    vec2 fPos = vec2(float(idx % P_STRIDE) + 0.5, float(idx / P_STRIDE) + 0.5) / iResolution.xy;\n    vec4 pack = texture(iChannel0, fPos);\n    \n    // unpack3\n    vec2 pos = pack.xy;\n    pack.z *= TAU;\n    vec2 vel = VEL_LEN * vec2(cos(pack.z), sin(pack.z));\n    \n    return vec4(pos, vel);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.x;\n    \n    vec2 d = vec2(FLOATMAX);\n    float mind = FLOATMAX;\n    vec2 minPos = vec2(0,0);\n    \n    // for current fragment, consider distance from all particles\n    for (int i = 0; i < N; ++i)\n    {\n        bool redBlue = ((i % 2) == 0);\n        \n        // fetch currently considered particle\n        vec4 s = loadPStatus(i);\n        vec2 pos = s.xy;\n        vec2 vel = s.zw;\n        \n        float dist = distance(pos, uv);\n        \n        d = min(d, redBlue ? vec2(dist, FLOATMAX) : vec2(FLOATMAX, dist));\n        \n        if (dist < mind)\n        {\n            mind = dist;\n            minPos = pos;\n        }\n    }\n    \n    vec4 back = sqrt(mix(sqr(vec4(0.25, 0.2, 0.1, 1.0)), sqr(vec4(0.1, 0.22, 0.3, 1.0)), uv.y + uv.x / 2.0));\n    \n    float redF = distance(minPos + vec2(R) / 4.0, uv) / R;\n    vec4 red1Col = vec4(1.0, 0.0, 0.0, 1.0);\n    vec4 red2Col = vec4(1.0, 0.7, 0.8, 1.0);\n    vec4 red = mix(red2Col, red1Col, redF);\n    \n    vec4 blue1Col = vec4(0.0, 0.0, 1.0, 1.0);\n    vec4 blue2Col = vec4(0.9, 0.8, 1.0, 1.0);\n    vec4 blue = mix(blue2Col, blue1Col, redF);\n    \n    float back_mask = smoothstep(R, R * PART_HARDNESS, min(d.x, d.y));\n    float red_blue_mask = smoothstep(0.49, 0.51, d.x / (d.x + d.y));\n    \n    vec4 red_blue = mix(red, blue, red_blue_mask);\n    vec4 col = mix(back, red_blue, back_mask);\n    \n    \n    fragColor = col; // vec4(smoothstep(0.01, 0.0, d.x), 0.0, smoothstep(0.01, 0.0, d.y), 1.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This shader is part of several I wrote to create animations\n// to support a presentation about Quantum Electrodynamics.\n// it is not supposed to be \"proof\" for anything, but to provide \n// good visualization of some concepts to help intuition.\n\n#define N 300\n#define VEL_LEN 0.007\n#define P_STRIDE 100\n\n#define PI 3.1415926\n#define TAU 6.2831852\n\n#define DIR1 vec2(0.5, 0.37)\n#define DIR2 vec2(-DIR1.x, DIR1.y)\n\n// cheap \"stretch and fold\" for pseudo-random\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// we're going to store \nvec4 loadPStatus(int idx)\n{\n    // fetch particle data\n    vec2 fPos = vec2(float(idx % P_STRIDE) + 0.5, float(idx / P_STRIDE) + 0.5) / iResolution.xy;\n    vec4 pack = texture(iChannel0, fPos);\n    \n    // unpack\n    vec2 pos = pack.xy;\n    pack.z *= TAU;\n    vec2 vel = VEL_LEN * vec2(cos(pack.z), sin(pack.z));\n    \n    return vec4(pos, vel);\n}\n\nvec4 storePStatus(vec2 pos, vec2 vel)\n{\n    // re-pack\n    return vec4(pos.x, \n            pos.y,  \n            fract((atan(vel.y, vel.x) + TAU) / TAU), \n            1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // get idx from tex position\n    int idx = (int(fragCoord.x) + int(fragCoord.y) * P_STRIDE);\n    \n    if ((idx < 0) || (int(fragCoord.x) >= P_STRIDE) || (idx >= N))\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n\n    vec4 s;\n    vec2 pos;\n    vec2 vel;\n    \n    // fetch currently considered particle\n    s = loadPStatus(idx);\n        \n    pos = s.xy;\n    vel = s.zw;\n    \n    bool collision = false;\n    \n    // TODO: CHECK FOR COLLISIONS / update vel\n    for (int i = 1 - (idx % 2); i < N; i += 2)\n//    for (int i = 0; i < N; i += 1)\n    {\n        vec4 s2 = loadPStatus(i);\n        vec2 pos2 = s2.xy;\n        vec2 vel2 = s2.zw;\n        \n        vec2 pd = (pos2 - pos);\n        if (length(pd) < 0.008)\n        {\n            vel -= normalize(pd) * VEL_LEN + vec2((rand(uv) - 0.5) * 0.001, (rand(uv) - 0.5) * 0.001);\n            vel = normalize(vel) * VEL_LEN;\n        }\n    }\n    \n    // respawning of particles that are out of bound\n        \n    if ((iFrame < 1) || (pos.y >= 1.0) || (pos.x <= 0.0) || (pos.x >= 1.0) || (pos.y <= 0.0))\n    {\n        float rnd1 = rand(uv);  // long axis\n        float rnd2 = (rand(uv.yx * 123.456) - 0.5) * 0.1;  // short axis\n        \n        if ((idx % 2) == 0)\n        {\n            pos = vec2(0.02, 0.02) + DIR2 * rnd2 + ((iFrame < 1) ? + DIR1 * rnd1 : vec2(0));\n            vel = DIR1;\n        }\n        else\n        {\n            pos = vec2(0.98, 0.02) + DIR1 * rnd2 + ((iFrame < 1) ? DIR2 * rnd1 : vec2(0));\n            vel = DIR2;\n        }\n    }\n    else\n    {\n        // update position\n        pos += vel / 2.0;\n    }\n    \n    \n    fragColor = storePStatus(pos, vel);\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}