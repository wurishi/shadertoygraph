{"ver":"0.1","info":{"id":"M3XBDn","date":"1728251864","viewed":47,"name":"random overlap cube sphere xored","username":"jt","description":"Overlapping random spheres and random rotated cuboids in a grid, combined by sdf xor operator and intersected with cube for visualization.\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","sdf","cube","sphere","random","rotate","xor","overlap","cuboid"],"hasliked":0,"parentid":"MXfyDS","parentname":"rnd overlap rotate cuboids xored"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/M3XBDn random overlap cube sphere xored, 2024 by jt\n// combining https://www.shadertoy.com/view/MXfyDS rnd overlap rotate cuboids xored\n// with https://www.shadertoy.com/view/M3fcWS random overlapping spheres xored\n// using https://www.shadertoy.com/view/ssG3WK XOR SDF\n\n// 2d version: https://www.shadertoy.com/view/MXXfWn random overlap circle square xor\n\n// Searching for simple, efficient, seemingly random patterns:\n// Overlapping random spheres and random rotated cuboids in a grid,\n// combined by sdf xor operator and intersected with cube for visualization.\n\n// tags: raymarch, sdf, cube, sphere, random, rotate, xor, overlap, cuboid\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat hash13(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec4 hash43(vec3 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat xor(float a, float b) // https://www.shadertoy.com/view/ssG3WK XOR SDF (jt)\n{\n    // NOTE: XOR can be implemented via sign, but sign is buggy on some platforms as spalmer found out.\n    return max(min(a, b), -max(a, b));\n}\n\nvec4 random_unit_quaternion(vec3 r) // r in [0,1] https://stackoverflow.com/questions/31600717/how-to-generate-a-random-quaternion-quickly\n{\n    return\n        vec4\n        (\n            sqrt(1.0-r.x) * sin(2.0*pi*r.y),\n            sqrt(1.0-r.x) * cos(2.0*pi*r.y),\n            sqrt(    r.x) * sin(2.0*pi*r.z),\n            sqrt(    r.x) * cos(2.0*pi*r.z)\n        );\n}\n\n// https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\nmat3 quaternion_to_matrix(vec4 q) // https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n{\n    float s = dot(q,q); // just in case, not needed for uniform quaternions\n    return\n        /*\n        mat3\n        (\n            vec3(1.0-2.0*(q.y*q.y+q.z*q.z),       2.0*(q.x*q.y-q.z*q.w),       2.0*(q.x*q.z+q.y*q.w)),\n            vec3(    2.0*(q.x*q.y+q.z*q.w), 1.0 - 2.0*(q.x*q.x+q.z*q.z),       2.0*(q.y*q.z-q.x*q.w)),\n            vec3(    2.0*(q.x*q.z-q.y*q.w),       2.0*(q.y*q.z+q.x*q.w), 1.0 - 2.0*(q.x*q.x+q.y*q.y))\n        );\n        */\n        mat3(1) // identity\n        +\n        2.0\n        *\n        mat3 // could swizzle with cross-product be used to compactify this?\n        (\n            vec3(-q.y*q.y-q.z*q.z,+q.x*q.y-q.z*q.w,+q.x*q.z+q.y*q.w),\n            vec3(+q.x*q.y+q.z*q.w,-q.x*q.x-q.z*q.z,+q.y*q.z-q.x*q.w),\n            vec3(+q.x*q.z-q.y*q.w,+q.y*q.z+q.x*q.w,-q.x*q.x-q.y*q.y)\n        )\n        /\n        s;\n}\n\nmat3 random_rotation(vec3 r)\n{\n    return quaternion_to_matrix(random_unit_quaternion(r));\n}\n\nfloat sphere(ivec3 t, vec3 q)\n{\n    vec4 r = (hash43(vec3(t)*134.567)*0.5+0.5);\n    return length(q-r.xyz)-r.w;\n}\n\nfloat box(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat element(ivec3 t, vec3 q)\n{\n    if(hash13(vec3(t)) < 0.5) return sphere(t, q);\n    mat3 R = random_rotation(hash33(vec3(t)*123.456));\n    vec4 r = (hash43(vec3(t)*134.567)*0.5+0.5);\n    return box(R*(q-0.5)+0.5-r.xyz, vec3(r.w));\n}\n\nfloat random_overlapping_cuboids_xored(vec3 p) // https://www.shadertoy.com/view/lXfyDS random overlapping cuboids xored (jt)\n{\n    ivec3 t = ivec3(floor(p));\n    vec3 q = fract(p);\n\n    float d = DIST_MAX;\n    for(int z = -1; z <= +1; z++)\n        for(int y = -1; y <= +1; y++)\n            for(int x = -1; x <= +1; x++)\n                d = xor(d,element(t+ivec3(x,y,z),q-vec3(x,y,z)));\n\n    return d;\n}\n\nfloat map(vec3 p)\n{\n    float n = 1.0;\n    if(fract(iTime/10.0)<0.5)\n        //return abs(random_overlapping_cuboids_xored(p*n)/n)-0.005; // shells\n        return max(box(p,vec3(1)),abs(random_overlapping_cuboids_xored(p*n)/n)-0.005); // shells\n    //return max(length(p)-1.0,random_overlapping_cuboids_xored(p*n)/n); // solids\n    return max(box(p,vec3(1)),random_overlapping_cuboids_xored(p*n)/n); // solids\n}\n\nvec3 normal(vec3 p) // https://iquilezles.org/articles/normalsSDF tetrahedron normals\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h) +\n                     k.yyx*map(p + k.yyx*h) +\n                     k.yxy*map(p + k.yxy*h) +\n                     k.xxx*map(p + k.xxx*h));\n}\n/*\nvec2 sphere_intersect(vec3 ro, vec3 rd, vec3 ce, float ra) // https://iquilezles.org/articles/intersectors/\n{\n    vec3 oc = ro - ce;\n    float b = dot( oc, rd );\n    vec3 qc = oc - b*rd;\n    float h = ra*ra - dot( qc, qc );\n    if( h<0.0 ) return vec2(DIST_MAX); // no intersection\n    h = sqrt( h );\n    return vec2( -b-h, -b+h );\n}\n*/\nvec2 box_intersect( in vec3 ro, in vec3 rd, vec3 sz) // https://iquilezles.org/articles/intersectors/\n{\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*sz;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(-1.0); // no intersection\n    return vec2( tN, tF );\n}\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    //vec2 bounds = sphere_intersect(ro, rd, vec3(0), 1.0); // unit-sphere cut-out WORKAROUND until included in sdf\n    vec2 bounds = box_intersect(ro, rd, vec3(1)); // unit-cube cut-out WORKAROUND until included in sdf\n\n    if(bounds.x < DIST_MAX)\n    {\n        t0 = max(t0,bounds.x);\n        t1 = min(t1,bounds.y);\n\n        // NOTE: Limited number of iterations to avoid stalling\n        //       when ray passes closely (just above EPSILON)\n        //       in parallel to a surface.\n        uint i;\n        float t;\n        for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n        {\n            float h = map(ro + rd * t);\n            if(h < EPSILON)\n                return t;\n            t += h;\n        }\n    }\n\n    return DIST_MAX;\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1) < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // plain\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : acos(sqrt(2.0/3.0))+pi/2.0;\n    //pitch = !demo ? pitch : pi-asin(sqrt(2.0/3.0));\n\n    vec3 ro = vec3(0.0, 0.0,-3.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    vec3 color = vec3(1);\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, bounds.y, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0.2);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        //color *= mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z)); // sky\n        color *= 0.0;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}