{"ver":"0.1","info":{"id":"dtByDd","date":"1692436714","viewed":224,"name":"instant histogram equalization","username":"FabriceNeyret2","description":"does realtime histogram equalization ( top right ).\nclick for quantization.\nBuffA: realtime histogram, adapted \"instant histogramming\" https://shadertoy.com/view/fsV3Dy\nBuffB: antiderivative of the histogram.","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["histogram","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// input video in CubeA:buffA  + #define T()\n// adapted from \"instant histogramming\" https://shadertoy.com/view/fsV3Dy\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= R;\n    O *= 0.;\n    int i = int(U.x*256.);\n    O.r = step( U.y/64. , H(iChannel0, i ) ) ;          // histogram\n    O.b = step( U.y/64. , H(iChannel1, i ) ) ;          // anti-derivative\n    \n    if (U.x<.5 && U.y>.5)  O += texture(iChannel0,2.*U-1.).y;  // top left : draw source\n    if (U.x>.5 && U.y>.5) {                                    // top right: equalize histogram\n        i = int(255.9 * texture(iChannel0,2.*U-1.).y );\n        O +=   H(iChannel1, i ) \n             / H(iChannel1, 255) ;                      // sum of histogram\n    }\n    if (iMouse.z > 0.) O = floor(O*4.)/3.;              // compared quantizations\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"// === histogram computation ===============================\n// from \"instant histogramming\" https://shadertoy.com/view/fsV3Dy :\n// isolate tiles following one given signal values in 8x8 tiles, 4 channels, 4 faces of a CubeMap.\n// use MIPmap to count the bits in this.\n// ( Coding-decoding locations in CubeMaps is always a nightmare )\n\n   #define T(U)  texture(iChannel0, (U)/128.).r   // Britney\n// #define T(U)  length(texture(iChannel0, (U)/128.).rgb)/1.7   // Britney\n// #define T(U)  texture(iChannel1, (U+iMouse.xy/R)/256.).r // white noise with interpolation offset\n// #define T(U)  texture(iChannel2, (U)/1024.).r  // Blue noise\n\nvoid mainCubemap( out vec4 O, vec2 U,  vec3 C, vec3 D )\n{\n    ivec2 I = ivec2(U)/128;                                      // tile bi-Id\n    vec3 A = abs(D);\n    int  f = A.x > A.y ? A.x > A.z ? 0 : 2 : A.y > A.z ? 1 : 2,  // faceId\n         s = I.x + 8*I.y,                                        // tile Id\n         i = int(1023.* T( mod(U,128.) ) );                      // discretize signal\n    if ( D[f] < 0. ) f += 3;                                     // full face Id.\n    O = f<4 ? vec4( equal( ivec4(i), s + 64*ivec4(0,1,2,3) + 256*f )) // isolate one value within 256                                \n            : vec4(T(U/R*128.),0,0,0);                           //  2 useless : free to show the image ! \n // O = .5*vec4(  ( s + 64*ivec4(0,1,2,3) + 256*f) );    // cubeMap calibration\n}","name":"Cube A","description":"","type":"cubemap"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy\n#define H(ch,i) texelFetch(ch, ivec2((i)%16,(i)/16) ,0 ).x   // histogram(i)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// === ready-to-use histogram =======================\n// read histogram(i) with texelFetch(iChannel, ivec2(i%16,i/16) ,0 ).x  or H(ch,i)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = 1.-u/R;  O.y = texture(iChannel0,vec3(2.*U-1.,-1)).x; // source video\n    \n    if ( u.x > 16. || u.y > 16. ) return;        // we use only the 16x16 tile \n    \n    u -= .5;\n    int  v = int( 1024.*(u.x+16.*u.y)/256. ),    // histogram value 16x16 stored in:\n         f = (v/256 + 5 ) %6,                    //    face \n         c = (v%256)/64,                         //    color field\n         t =  v%64,                              //    tile id\n         x = t%8, y = t/8;                       //    tile coords\n    if (f>2) x = 7-x;\n    vec3 V = vec3( 2.* (vec2(x,7-y)+.5)/8. - 1., // location in cubeMap\n                   f > 2 ? -1 : 1 \n                );\n    if (f==0) V.y = -V.y;\n    if (f==3) V.x = -V.x;\n    f = f%3; if (f==2) V.z=-V.z;\n    V = f==0 ? V.xzy : f==2 ? V.zyx : V; \n    O.x = textureLod(iChannel0, V ,7.)[c];       // histogram\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// === ready-to-use antiderivative of the histogram ==================\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if ( u.x > 16. || u.y > 16. ) return;        // we use only the 16x16 tile \n    \n    u -= .5;\n    int p = int(u.x) + 16*int(u.y);\n    float s = 0.;\n    for (int i = 0; i <= p; i++ )\n        s += H( iChannel0, i );\n\n     O.x = s / 64.;\n}","name":"Buffer B","description":"","type":"buffer"}]}