{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/**\n\tModified version of: https://www.shadertoy.com/view/XdsXWH\n\tBy: Ehsan Kia\n\tInspired by http://www.reddit.com/r/mathpics/comments/261cd8/colorful_newtons_method_gif/\n **/\n\n#define ITERATIONS 30\n#define EPSILON 0.005\n#define PI 3.141592653589\n\n// Give types descriptive names\n#define complex vec2\n#define Color3 vec3\n\n/////// Helper functions for complex numbers ///////\nfloat im(complex a) {\n\treturn a.y;\n}\n\nfloat real(complex a) {\n\treturn a.x;\n}\n\ncomplex conj(complex a) {\n\treturn complex(a.x, -a.y);\n}\n\ncomplex mul(complex a, complex b) {\n\treturn complex(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\ncomplex div(complex a, complex b) {\n\treturn mul(a,conj(b)) / real(mul(b, conj(b)));\n}\n\nfloat cabs(complex a) {\n\treturn sqrt(a.x*a.x + a.y*a.y);\n}\n\n/////////////////////////////////////////////////////\n\n\n// x^3-1 / 3x^2\ncomplex f(complex z, complex alpha, complex beta) {\n\treturn mul(mul(z, z - alpha), z - beta);\n}\n\ncomplex df(complex z, complex alpha, complex beta) {\n\treturn mul(z-alpha, z-beta) + mul(z, z-beta) + mul(z, z-alpha);\n}\n\ncomplex ddf(complex z, complex alpha, complex beta) {\n    return -2.0 * (alpha + beta - 3.0 * z);\n}\n\ncomplex newtonIteration(complex z, complex a, complex b) {\n\treturn z - div(f(z, a, b), df(z, a, b));\n}\n\ncomplex eulerChebyshevIteration(complex z, complex a, complex b) {\n   complex dfz = df(z, a, b);\n   complex s = -div(f(z, a, b), dfz);\n   complex t = -0.5 * div(mul(mul(ddf(z, a, b), s), s), dfz);\n   return z + s + t;\n}\n\ncomplex halleyIteration(complex z, complex a, complex b) {\n   complex fz = f(z, a, b);\n   complex dfz = df(z, a, b);\n   return z - div((2.0 * mul(fz, dfz)), (2.0 * mul(dfz, dfz) - mul(fz, ddf(z, a, b))));\n}\n\nfloat timeToZoom(float time) {\n\treturn sin(time*0.2)*3.0 + 3.1;\n}\n\nfloat psi(float percent) {\n    return 0.5 - (0.5 * cos(percent * PI));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Set center of screen to (0,0), and scale so x and y are the same scale\n\tcomplex z = (fragCoord.xy - (iResolution.xy*0.5)) / iResolution.y;\n\tfloat gamma = 2.0 * PI * psi(psi(iTime * 0.2));\n\tcomplex alpha = complex(1.0 - cos(gamma), sin(gamma));\n\tcomplex beta = complex(-1.0 + cos(gamma), sin(gamma));\n\n\tColor3 color = Color3(0.0, 0.0, 0.0);\n\tfor(int i = 0; i < ITERATIONS; ++i) {\n\t\tz = newtonIteration(z, alpha, beta);\n\t\tif (cabs(z) < EPSILON) {\n\t\t\tcolor = Color3(float(i) / float(ITERATIONS), 0.0, 0.0);\n\t\t\tbreak;\n\t\t}\n\t\tif (cabs(z-alpha) < EPSILON) {\n\t\t\tcolor = Color3(0.0, float(i) / float(ITERATIONS), 0.0);\n\t\t\tbreak;\n\t\t}\n\t\tif (cabs(z-beta) < EPSILON){\n\t\t\tcolor = Color3(0.0, 0.0, float(i) / float(ITERATIONS));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdXSD4","date":"1400706956","viewed":189,"name":"Newton's Method Fractal","username":"EhsanKia","description":"Shader version of:\nhttp://www.reddit.com/r/mathpics/comments/261cd8/colorful_newtons_method_gif/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton","newtonsmethod"],"hasliked":0,"parentid":"","parentname":""}}