{"ver":"0.1","info":{"id":"mdsSDX","date":"1669667718","viewed":129,"name":"Night Starburst Effect","username":"jfakult15","description":"Produce a starburst effect from bright enough light sources","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["lens","starburst","night","flare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926538\n\nfloat brightness(vec4 col)\n{\n    return (col.r + col.g + col.b) / 3.0;\n}\n\nbool isInside(float x, float y, vec2 res)\n{\n    return !(x < 0.0 || y < 0.0 || x > res.x || y > res.y);\n}\n\nvec4 blur(float x, float y, vec2 res, float blurAmount)\n{\n    vec4 px = vec4(0, 0, 0, 0);\n    for (float xx = x - blurAmount; xx <= x + blurAmount; xx++)\n    {\n        for (float yy = y - blurAmount; yy <= y + blurAmount; yy++)\n        {\n            px += texture(iChannel0, vec2(xx, yy) / res);\n        }\n    }\n    \n    float numSamples = (blurAmount * 2.0 + 1.0) * (blurAmount * 2.0 + 1.0);\n    \n    return px / numSamples;\n}\n\nconst float burstMaxSize = 0.05;\nconst float burstMinSize = 0.05;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec4 pixel = texture(iChannel0, uv);\n    \n    float burstMaxDistance = length(burstMaxSize * iResolution.xy);\n    float burstMinDistance = length(burstMinSize * iResolution.xy);\n    \n    // Semi-random. Some stars will have different numbers of spikes\n    float numBurstSpikes = 6.0; //int((fragCoord.x + fragCoord.y) % 3) * 2 + 4;\n    \n    float rotationOffset = iTime / 4.0;\n    for (float a = rotationOffset; a < numBurstSpikes + rotationOffset; a++)\n    {\n        float angle = (a / numBurstSpikes) * 2.0 * PI;\n        float maxXLength = cos(angle) * burstMaxDistance;\n        float maxYLength = sin(angle) * burstMaxDistance;\n        \n        float roundX = fragCoord.x;\n        float roundY = fragCoord.y;\n        float realX = fragCoord.x;\n        float realY = fragCoord.y;\n        float x = fragCoord.x;\n        float y = fragCoord.y;\n        float dist = 0.0;\n        \n        float strength = 1.0;\n        if (a == 0.0 || a == 3.0)\n            strength = 2.0;\n        \n        while (isInside(x, y, iResolution.xy) && dist < (burstMaxDistance / strength) && brightness(texture(iChannel0, vec2(x, y) / iResolution.xy)) < 0.9)\n        //while (isInside(x, y, iResolution.xy) && dist < (burstMaxDistance / strength) && brightness(blur(x, y, iResolution.xy, 2.0)) < 0.9)\n        {\n            x += cos(angle);\n            y += sin(angle);\n            dist = length(fragCoord - vec2(x, y));\n        }\n        \n        if (isInside(x, y, iResolution.xy) && dist < (burstMaxDistance / strength))\n        {\n            // texture(iChannel0, vec2(x, y) / iResolution.xy);\n            // blur(x, y, iResolution.xy, 2.0);\n            vec4 foundPixel = texture(iChannel0, vec2(x, y) / iResolution.xy);\n            float distFactor = (1.0 - (dist / burstMaxDistance));\n            pixel = (pixel + foundPixel * distFactor / strength);\n            //pixel = vec4(distFactor, 0, 0, 1);\n        }\n        else\n        {\n        }\n    }\n    \n    fragColor = pixel;\n}","name":"Image","description":"","type":"image"}]}