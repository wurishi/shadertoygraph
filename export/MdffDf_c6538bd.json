{"ver":"0.1","info":{"id":"MdffDf","date":"1498503077","viewed":144,"name":"z = f(x, y) surface plot","username":"yumcyawiz","description":".","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float f(vec3 p) {\n    float t = iTime;\n    float x = p.x;\n    float y = p.y;\n    return sin(t*x) + cos(t*y);\n}\n\n\nvec3 calcNormal(vec3 p) {\n    float eps = 0.001;\n    float dfdx = (f(p + vec3(eps, 0, 0)) - f(p - vec3(eps, 0, 0)))/(2.0*eps);\n    float dfdy = (f(p + vec3(0, eps, 0)) - f(p - vec3(0, eps, 0)))/(2.0*eps);\n    return normalize(vec3(dfdx, dfdy, -1));\n}\n\n\n\nstruct Ray {\n    vec3 position;\n    int steps;\n    float t;\n    vec3 normal;\n};\nconst int maxSteps = 300;\nRay trace(vec3 from, vec3 rayDir) {\n    vec3 p = vec3(0);\n    int steps = 0;\n    float t = 0.0;\n    vec3 normal = vec3(0);\n    for(int i = 0; i < maxSteps; i++) {\n        p = from + t*rayDir;\n        float d = abs(p.z - f(p)/2.0);\n        if(d < 0.1) {\n            p -= 0.05*d*rayDir;\n            steps = i;\n            normal = calcNormal(p);\n            break;\n        }\n        t += d*0.05;\n    }\n    return Ray(p, steps, t, normal);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //(-1, -1) ~ (1, 1)\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy)/iResolution.y;\n    \n    //camera settings\n    float t = iTime;\n    vec3 camPos = vec3(0, 0, -3);\n    vec3 camFront = vec3(0, 0, 1);\n    vec3 camUp = vec3(0, 1, 0);\n    vec3 camRight = cross(camUp, camFront);\n    float focus = 1.0;\n    \n    //ray direction\n    vec3 rayDir = uv.x*camRight + uv.y*camUp + focus*camFront;\n    \n    //trace\n    Ray tr = trace(camPos, rayDir);\n    \n    //coloring\n    vec3 ao = pow((1.0 - float(tr.steps)/float(maxSteps)), 1.0) * vec3(1);\n    vec3 sunDir = normalize(vec3(0.5, 0.5, -1));\n    vec3 diffuse = max(dot(tr.normal, sunDir), 0.) * vec3(1);\n    vec3 color = 0.5*ao + 0.5*diffuse;\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}