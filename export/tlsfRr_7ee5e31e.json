{"ver":"0.1","info":{"id":"tlsfRr","date":"1595890795","viewed":282,"name":"Black and White Shader","username":"t420babe","description":"ALL BLACK UP UNTIL 9.0s\n\nYoutube video: https://youtu.be/usVxTeldjT4\nYoutube video of live code: https://youtu.be/cJkWkwR7FUM\n\nMusic: Bright Lights in Silent Rooms by Home\n\nHUGE thanks to @FabriceNeyret2 for helping me with resolution & antialiasing","likes":0,"published":3,"flags":64,"usePreview":0,"tags":["blackandwhite"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ltj3Rt","filepath":"https://soundcloud.com/home-2001/bright-lights-in-silent-rooms","previewfilepath":"https://soundcloud.com/home-2001/bright-lights-in-silent-rooms","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCENE(a, b, t) smoothfloor(t * 0.5 + a * t / b ) * b - a;\n#define CURVE(f) vec3(smoothstep(-0.75, 0.75, (f - 0.1) / fwidth(f)))\n#define SmoothWidth .2\n\n/* Smoothfloor function by FabriceNeyret2: https://www.shadertoy.com/view/4t3SD7 */\nfloat smoothfloor(float x) {\n#if 1\n    float F = floor(x), \n          f = clamp( 1.-(1.-fract(x))/SmoothWidth, 0.,1.);\n   \n    return F + smoothstep(0.,1., f) ;                    // C1   NB: 3.x^2 - 2.x^3\n#else\n  #define b(x) ( abs(x)>1. ? sign(x) : (x) * (3.-(x)*(x) ) /2. )  // (3x-x^3)/2\n  return floor(x-.5)+.5 + .5 * b( ( mod(2.*x-1.,2.) -1. ) / SmoothWidth ) ; // C1\n#endif\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n   \n  // [-1, 1]\n  vec2 pos = (2.0 * fragCoord - iResolution.xy) /iResolution.y;\n\n\n  float song_duration = 193.0;  // seconds\n  float mod_time = mod(iTime, song_duration);\n  float time_scale = 0.5;\n  float time = tan(time_scale * mod_time);\n    \n  vec3 color = vec3(0.0);\n  float curve = 0.0;\n  \n  int N = 50;\n  float a = atan(pos.x, pos.y);\n  float b = 6.28319 / float(N);\n  float curve_param = SCENE(a, b, time);\n    \n\n  if ((mod_time >= 9.0 && mod_time < 26.0) || \n      (mod_time >= 80.0 && mod_time < 98.0)) {\n      \n    // Scene 0\n    curve = sin(curve_param) * length(pos.xy);\n        \n  } else if (mod_time >= 26.0 && mod_time < 44.0) {\n      \n    // Scene 1\n    curve = asin(curve_param) * length(pos.xy);\n        \n  } else if ((mod_time >= 44.0 && mod_time < 62.0) ||\n    \t\t(mod_time >= 98.0 && mod_time < 115.0) || \n   \t\t    (mod_time >= 169.0) ) {\n      \n    // Scene 2\n    curve = atan(curve_param) * length(pos.xy);\n        \n  } else if ((mod_time >= 62.0 && mod_time < 80.0) ||\n            (mod_time >= 115.0 && mod_time < 134.0)) {\n      \n    // Scene 3\n    curve = cos(curve_param) * length(pos.xy);\n        \n  } else if (mod_time >= 134.0 && mod_time < 169.0) {\n      \n    // Scene 4\n    curve = tan(curve_param) * length(pos.xy);\n        \n  }\n    \n  color = CURVE(curve);\t\n    \n  fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}