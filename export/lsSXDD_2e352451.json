{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Ref: http://adrianboeing.blogspot.in/2011/01/xor-demoeffect-in-webgl.html\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = sin(iTime);\n    float offset = 0.3 * time;\n    \n    // The first step is to calculate the position of the pixel on the screen \n    // (or canvas in case of WebGL) normalised from -1 to 1\n\tvec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    \n    // 0,0 is origin we calculate distance from origin and set is as color \n    // r = x^2 + y^2\n    vec2 p1 = p - offset;\n\tfloat radius = sqrt(dot(p1, p1)) * time;\n    \n    // get a second circle radius\n    vec2 p2 = p + offset;\n    float radius2 = sqrt(dot(p2, p2)) * time;\n    \n    /*\n\t* If we want to generate concentric circles we could set a boolean value on or off\n\t* depending on a modulo operation. If we take the modulo of a value and then test \n\t* whether it is above half-way then we can generate an on-off pulse. For example, \n\t* if we get a value ranging from 0 to 1, module 0.1, we can generate a on/off pulse \n\t* by testing if it is greater than 0.05.\n\t*/\n    \n    bool toggle = mod(radius,0.1) > 0.05;\n    bool toggle2 = mod(radius2,0.1) > 0.05;\n    \n    //XOR truth table:\n\n\t//xor via if statements\n\tfloat col = 0.0;\n\tif (toggle) col = 1.0; \n\tif (toggle2) col = 1.0;\n\tif ((toggle) && (toggle2)) col = 0.0;\n    \n    // just some tweaking here to make animation more appealing\n    // clamp time in [0,1]\n    time = 0.5* (time + 1.0);\n    \n\tfragColor = vec4(col, time, col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsSXDD","date":"1412076162","viewed":280,"name":"ConcentricCirclesAnimation","username":"abhi_bansal","description":"Overlapping concentric circles with animated position and radius","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","circles","animation","cocentric"],"hasliked":0,"parentid":"","parentname":""}}