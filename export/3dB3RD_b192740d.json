{"ver":"0.1","info":{"id":"3dB3RD","date":"1548238536","viewed":351,"name":"啥是佩奇？What's Peppa?","username":"ixulin","description":":D    2333333333333333","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["cartoon","china","pig"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2013 ixulin \n// Site  www.ixulin.com\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A list of useful distance function to simple primitives, and an example on how to\n// do some interesting boolean operations, repetition and displacement.\n//\n\n#define AA 1 // make this 1 is your machine is too slow\n\n//------------------------------------------------------------------\n\nfloat sdPlane(vec3 p)\n{\n    return p.y;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdEllipsoid(in vec3 p, in vec3 r) // approximated\n{\n    float k0 = length(p / r);\n    float k1 = length(p / (r * r));\n    return k0 * (k0 - 1.0) / k1;\n}\n\nfloat sdHexPrism(vec3 p, vec2 h)\n{\n    vec3 q = abs(p);\n#if 1\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0 * min(dot(k.xy, p.xy), 0.0) * k.xy;\n    vec2 d = vec2(\n        length(p.xy - vec2(clamp(p.x, -k.z * h.x, k.z * h.x), h.x)) * sign(p.y - h.x),\n        p.z - h.y);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n#endif\n#if 0    \n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#endif\n}\n\n// vertical\nfloat sdCylinder(vec3 p, vec2 h)\n{\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdCappedCylinder(vec3 p, vec2 h)\n{\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\n// arbitrary orientation\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 pa = p - a;\n    vec3 ba = b - a;\n    float baba = dot(ba, ba);\n    float paba = dot(pa, ba);\n#if 0    \n    float ibal = inversesqrt(baba);\n    float x = length(pa-ba*paba*ibal*ibal) - r;\n    float y = (abs(paba-baba*0.5)-baba*0.5)*ibal;\n    return min(max(x,y),0.0) + length(max(vec2(x,y),0.0));\n#else\n    float x = length(pa * baba - ba * paba) - r * baba;\n    float y = abs(paba - baba * 0.5) - baba * 0.5;\n    float x2 = x * x;\n    float y2 = y * y * baba;\n    float d = (max(x, y) < 0.0) ? -min(x2, y2) : (((x > 0.0) ? x2 : 0.0) + ((y > 0.0) ? y2 : 0.0));\n    return sign(d) * sqrt(abs(d)) / baba;\n#endif\n}\n\n//------------------------------------------------------------------\n\nvec2 opU(vec2 d1, vec2 d2)\n{\n    return (d1.x < d2.x) ? d1 : d2;\n}\n\nfloat opUnion(float d1, float d2) { return min(d1, d2); }\n\nfloat opSubtraction(float d1, float d2) { return max(-d1, d2); }\n\nfloat opIntersection(float d1, float d2) { return max(d1, d2); }\n\nfloat opSmoothUnion(float d1, float d2, float k)\n{\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nfloat opSmoothSubtraction(float d1, float d2, float k)\n{\n    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);\n    return mix(d2, -d1, h) + k * h * (1.0 - h);\n}\n\nfloat opSmoothIntersection(float d1, float d2, float k)\n{\n    float h = clamp(0.5 - 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) + k * h * (1.0 - h);\n}\n\nvec3 opTwist(vec3 p)\n{\n    float c = cos(10.0 * p.y + 10.0);\n    float s = sin(10.0 * p.y + 10.0);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\nvec3 opRot(vec3 p, float angle)\n{\n    angle = angle * 3.1415 / 180.0;\n    float c = cos(angle);\n    float s = sin(angle);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.zy, p.x);\n}\nvec3 opCheapBend(vec3 p)\n{\n    float angle = -180.0 * 3.1415 / 180.0;\n    float c = cos(angle * p.y);\n    float s = sin(angle * p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xy, p.z);\n}\n\n//------------------------------------------------------------------\n\n#define ZERO (min(iFrame, 0))\n\n//------------------------------------------------------------------\n\nvec2 map(in vec3 pos)\n{\n    float body = sdEllipsoid(pos - vec3(0, 0.5, 0), vec3(0.18, 0.5, 0.5));\n    float box = sdBox(pos, vec3(0.13, 1, 1));\n    body = opSmoothIntersection(box, body, 0.01);\n\n    float nose1 = sdCappedCylinder((pos - vec3(0, 0.89, 0.3)).xzy, vec2(0.125, 0.3));\n    float nose2 = sdCappedCylinder((pos - vec3(0, 0.89, 0.46)).xzy, vec2(0.132, 0.005));\n    nose1 = opSmoothUnion(nose1, nose2, 0.01);\n    body = opSmoothUnion(body, nose1, 0.03);\n\n    float nares = 9999.0;\n    float nares1 = sdHexPrism((pos - vec3(-0.1, 0.9, 0.4)).zyx, vec2(0.03, 0.06));\n    float nares1_1 = sdCylinder((pos - vec3(-0.1, 0.9, 0.4)).yxz, vec2(0.015, 0.1));\n    nares1 = opSubtraction(nares1_1, nares1);\n    nares = opSmoothUnion(nares, nares1, 0.0);\n    float nares2 = sdHexPrism((pos - vec3(-0.1, 0.9, 0.5)).zyx, vec2(0.03, 0.06));\n    float nares2_1 = sdCylinder((pos - vec3(-0.1, 0.9, 0.5)).yxz, vec2(0.015, 0.1));\n    nares2 = opSubtraction(nares2_1, nares2);\n    nares = opSmoothUnion(nares, nares2, 0.0);\n\n    float ear1 = sdBox(pos - vec3(0, 0.9, -0.28), vec3(0.05, 0.18, 0.09));\n    float ear2 = sdBox(pos - vec3(0, 0.9, 0.28), vec3(0.05, 0.18, 0.09));\n    float ear3 = sdBox(pos - vec3(0, 0.885, 0), vec3(0.05, 0.1, 0.3));\n    body = opSmoothUnion(body, ear1, 0.0);\n    body = opSmoothUnion(body, ear2, 0.0);\n    body = opSmoothUnion(body, ear3, 0.0);\n\n    float eyes = 9999.0;\n    float eye1 = sdHexPrism((pos - vec3(-0.1, 0.86, 0.13)).zyx, vec2(0.08, 0.06));\n    float eyeball1 = sdCylinder((pos - vec3(-0.1, 0.86, 0.13)).yxz, vec2(0.055, 0.1));\n    eye1 = opSubtraction(eyeball1, eye1);\n    eyes = opSmoothUnion(eyes, eye1, 0.0);\n    float eye2 = sdHexPrism((pos - vec3(-0.1, 0.76, -0.11)).zyx, vec2(0.06, 0.06));\n    float eyeball2 = sdCylinder((pos - vec3(-0.1, 0.76, -0.11)).yxz, vec2(0.045, 0.1));\n    eye2 = opSubtraction(eyeball2, eye2);\n    eyes = opSmoothUnion(eyes, eye2, 0.0);\n\n    float face1 = sdCappedCylinder((pos - vec3(-0.1, 0.5, 0)).yxz, vec2(0.19, 0.045));\n    body = opSmoothUnion(body, face1, 0.0);\n\n    float face2 = sdCappedCylinder((pos - vec3(-0.1, 0.6, -0.26)).yxz, vec2(0.08, 0.045));\n    body = opSmoothUnion(body, face2, 0.0);\n\n    float mouth = sdCappedCylinder((opCheapBend(opRot(pos - vec3(-0.14, 0.24, 0.12), 105.0))).xyz, vec2(0.01, 0.24));\n    // body = opSmoothUnion(body, mouth, 0.0);\n\n    vec2 res = opU(vec2(sdPlane(pos), 1.0), vec2(body, 2.0));\n    res = opU(res, vec2(eyes, 3.0));\n    res = opU(res, vec2(mouth, 3.0));\n    res = opU(res, vec2(nares, 3.0));\n    return res;\n}\n\nvec2 castRay(in vec3 ro, in vec3 rd)\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n\n#if 1\n    // bounding volume\n    float tp1 = (0.0 - ro.y) / rd.y;\n    if (tp1 > 0.0)\n        tmax = min(tmax, tp1);\n    float tp2 = (1.6 - ro.y) / rd.y;\n    if (tp2 > 0.0)\n    {\n        if (ro.y > 1.6)\n            tmin = max(tmin, tp2);\n        else\n            tmax = min(tmax, tp2);\n    }\n#endif\n\n    float t = tmin;\n    float m = -1.0;\n    for (int i = 0; i < 64; i++)\n    {\n        float precis = 0.0004 * t;\n        vec2 res = map(ro + rd * t);\n        if (res.x < precis || t > tmax)\n            break;\n        t += res.x;\n        m = res.y;\n    }\n\n    if (t > tmax)\n        m = -1.0;\n    return vec2(t, m);\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow(in vec3 ro, in vec3 rd, in float mint, in float tmax)\n{\n    float res = 1.0;\n    float t = mint;\n    for (int i = ZERO; i < 16; i++)\n    {\n        float h = map(ro + rd * t).x;\n        res = min(res, 8.0 * h / t);\n        t += clamp(h, 0.02, 0.10);\n        if (res < 0.005 || t > tmax)\n            break;\n    }\n    return clamp(res, 0.0, 1.0);\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 pos)\n{\n#if 0\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.0005;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#else\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\n    vec3 n = vec3(0.0);\n    for (int i = ZERO; i < 4; i++)\n    {\n        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.0);\n        n += e * map(pos + 0.0005 * e).x;\n    }\n    return normalize(n);\n#endif\n}\n\nfloat calcAO(in vec3 pos, in vec3 nor)\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for (int i = ZERO; i < 5; i++)\n    {\n        float hr = 0.01 + 0.12 * float(i) / 4.0;\n        vec3 aopos = nor * hr + pos;\n        float dd = map(aopos).x;\n        occ += -(dd - hr) * sca;\n        sca *= 0.95;\n    }\n    return clamp(1.0 - 3.0 * occ, 0.0, 1.0);\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGradBox(in vec2 p)\n{\n    // filter kernel\n    vec2 w = fwidth(p) + 0.001;\n    // analytical integral (box filter)\n    vec2 i = 2.0 * (abs(fract((p - 0.5 * w) * 0.5) - 0.5) - abs(fract((p + 0.5 * w) * 0.5) - 0.5)) / w;\n    // xor pattern\n    return 0.5 - 0.5 * i.x * i.y;\n}\n\nvec3 render(in vec3 ro, in vec3 rd)\n{\n    vec3 col = vec3(0.7, 0.9, 1.0) + rd.y * 0.8;\n    vec2 res = castRay(ro, rd);\n    float t = res.x;\n    float m = res.y;\n    if (m > -0.5)\n    {\n        vec3 pos = ro + t * rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd, nor);\n\n        // material\n        col = vec3(247.0 / 255.0, 100.0 / 255.0, 100.0 / 255.0); //0.45 + 0.35 * sin(vec3(0.05, 0.08, 0.10) * (m - 1.0));\n        if (m < 1.5)\n        {\n            float f = checkersGradBox(5.0 * pos.xz);\n            col = 0.3 + f * vec3(0.1);\n        }\n        if (m > 2.5)\n        {\n            col = vec3(72.0 / 255.0, 59.0 / 255.0, 53.0 / 255.0);\n        }\n\n        // lighitng\n        float occ = calcAO(pos, nor);\n        vec3 lig = normalize(vec3(-0.4, 0.7, -0.6));\n        vec3 hal = normalize(lig - rd);\n        float amb = clamp(0.5 + 0.5 * nor.y, 0.0, 1.0);\n        float dif = clamp(dot(nor, lig), 0.0, 1.0);\n        float bac = clamp(dot(nor, normalize(vec3(-lig.x, 0.0, -lig.z))), 0.0, 1.0) * clamp(1.0 - pos.y, 0.0, 1.0);\n        float dom = smoothstep(-0.2, 0.2, ref.y);\n        float fre = pow(clamp(1.0 + dot(nor, rd), 0.0, 1.0), 2.0);\n\n        dif *= calcSoftshadow(pos, lig, 0.02, 2.5);\n        dom *= calcSoftshadow(pos, ref, 0.02, 2.5);\n\n        float spe = pow(clamp(dot(nor, hal), 0.0, 1.0), 16.0) *\n                    dif *\n                    (0.04 + 0.96 * pow(clamp(1.0 + dot(hal, rd), 0.0, 1.0), 5.0));\n\n        vec3 lin = vec3(0.0);\n        lin += 1.30 * dif * vec3(1.00, 0.80, 0.55);\n        lin += 0.30 * amb * vec3(0.40, 0.60, 1.00) * occ;\n        lin += 0.40 * dom * vec3(0.40, 0.60, 1.00) * occ;\n        lin += 0.50 * bac * vec3(0.25, 0.25, 0.25) * occ;\n        lin += 0.25 * fre * vec3(1.00, 1.00, 1.00) * occ;\n        col = col * lin;\n        col += 9.00 * spe * vec3(1.00, 0.90, 0.70);\n\n        col = mix(col, vec3(0.8, 0.9, 1.0), 1.0 - exp(-0.0002 * t * t * t));\n    }\n\n    return vec3(clamp(col, 0.0, 1.0));\n}\n\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr)\n{\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 mo = iMouse.xy / iResolution.xy;\n    float time = 30.0 + iTime * 0.1;\n\n    vec3 tot = vec3(0.0);\n#if AA > 1\n    for (int m = ZERO; m < AA; m++)\n        for (int n = ZERO; n < AA; n++)\n        {\n            // pixel coordinates\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n#else\n    vec2 p = (-iResolution.xy + 2.0 * fragCoord) / iResolution.y;\n#endif\n\n            // camera\n            vec3 ro = vec3(2.3 * cos(0.1 * time + 6.0 * mo.x), 1.0 + 2.0 * mo.y, 0.5 + 2.3 * sin(0.1 * time + 6.0 * mo.x));\n            vec3 ta = vec3(0.0, 0.4, 0.0);\n            // camera-to-world transformation\n            mat3 ca = setCamera(ro, ta, 0.0);\n            // ray direction\n            vec3 rd = ca * normalize(vec3(p.xy, 2.0));\n\n            // render\n            vec3 col = render(ro, rd);\n\n            // gamma\n            col = pow(col, vec3(0.4545));\n\n            tot += col;\n#if AA > 1\n        }\n    tot /= float(AA * AA);\n#endif\n\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}