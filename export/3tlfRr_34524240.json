{"ver":"0.1","info":{"id":"3tlfRr","date":"1715638068","viewed":81,"name":"Shader Nouveau","username":"mathieu_h","description":"Radial Ornament Design","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["radialornamentdesign"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 col, in vec2 uv )\n{\n    // Declare Main Parameters ////////////////////////////////////////////////\n    \n    float x,y;\n    float c0,c1,c2,c3,c4;\n    float idv;\n    vec2 res;\n    vec2 worldPos, localPos, pan;\n    vec3 c;\n    \n    \n    \n    // Image Specs ///////////////////////////////////////////////////////////\n    \n    res = iResolution.xy;\n    worldPos = ( 2.*uv - res ) / res.y; \n    \n    \n    \n    // Animation Parameters ////////////////////////////////////////////////////////\n    \n    float dStyle = 6.0;\n    float dSpeed = .50;\n    float baseSpeed = 1.0;\n    \n    bool animate = true;    \n    vec2 pan_dir = vec2(1.0,1.0);\n    float pan_speed = 0.2;\n    float timeOffset;\n    if (animate)\n    {\n        timeOffset = iTime;\n    }\n    else\n    {\n        timeOffset = 0.0;\n    }\n    \n    float maxTime = 34.0;\n    timeOffset = mod(timeOffset, maxTime);\n    \n    pan = pan_dir * pan_speed * timeOffset;\n  \n  \n    float rotSpeed = 0.0;\n    float zoomTime = 2.5;\n    float switchPoint = 13.1;\n    float dynZoom = round(cos(timeOffset / zoomTime)); \n    \n    if (timeOffset > switchPoint && timeOffset < 38.0)\n    {\n        rotSpeed = 0.2;\n    }\n    \n    \n    worldPos = rotate(worldPos, (timeOffset - switchPoint) * rotSpeed);\n    \n    \n    // Tile Canvas //////////////////////////////////////////////////////////////\n    \n    float canvas_zoom = .80 + dynZoom;\n    vec2 canvas_pos = vec2(0.0, 0.0) + pan;\n    float tile_zoom = 0.22;\n    vec2 tile_pos = vec2(2.0, 2.0);\n    localPos = fract(worldPos/canvas_zoom - canvas_pos) / tile_zoom - tile_pos;\n    \n    \n    // Generate Tile IDs ////////////////////////////////////////////////////////////// \n    \n    float maxId = 6.0;\n    vec2 id;  \n    float size = .8;\n    id = round((worldPos)/ vec2(size + dynZoom) - .45 - pan);  \n    id = mod(id, maxId);\n    idv = mod(id.x + id.y, maxId + 1.0) / maxId;\n    idv = noise(id);\n    \n    \n    \n    // Image Debug //////////////////////////////////////////////////////////////\n    \n    bool debugTileIndex = false;\n    bool debugLocalSpace = false;\n    bool debugWorldSpace = false;\n    if (debugWorldSpace)\n    {\n        col = vec4(worldPos.x, worldPos.y, 0.0, 0.0);\n        return;\n    }\n    else if (debugLocalSpace)\n    {\n        col = vec4(localPos.x, localPos.y, 0.0, 0.0);\n        return;\n    }\n    else if (debugTileIndex)\n    {    \n        c = vec3(idv, idv, idv);\n    }\n    \n    \n    \n    // Compose Image //////////////////////////////////////////////////////////\n    \n    \n    float vin = 1.0 - length(worldPos / 5.0);\n    float brightness = 0.5;\n    float h = ornaDisc(localPos, timeOffset, baseSpeed, idv, dStyle, dSpeed);\n    \n    float duration = 30.0;\n    float fadeInSpeed = 2.;\n    float fadeIn = clamp(timeOffset / fadeInSpeed , 0.0,1.0);\n    \n    float fadeOutSpeed = 5.3;\n    float fadeOutDuraction = -3.0;\n    float fadeOut = clamp((duration - timeOffset - fadeOutDuraction) / fadeOutSpeed , 0.0,1.0);\n    \n    h *= brightness;\n    h = 1.0 - h;\n    h *= vin;\n    h *= fadeIn;\n    h *= fadeOut;\n    \n    if (timeOffset > 126.0)\n    {\n        h = 0.0;\n    }\n    \n    if (debugTileIndex)\n    {\n        float t = 0.5;\n        c = vec3(h) * (t - 1.0) + c * t;\n    }\n    else\n    {\n        c = vec3(h);        \n    }\n    \n    \n    \n    col = vec4(c,1.0);\n}  ","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define epsilon 0.000001\n\nvec2 rotate (vec2 uv, float phi)\n{\n    float x = cos(phi) * uv.x - sin(phi) * uv.y;\n    float y = sin(phi) * uv.x + cos(phi) * uv.y;\n    return vec2(x,y);\n}\n\nfloat noise (vec2 uv)\n{\n    vec2 w = vec2(.50,.25);\n    float h = sin(uv.x / w.x) + sin(uv.y / w.y);\n    return fract(h);\n}\n\nvec2 radial (vec2 uv)\n{\n    float r = 1.,                                   \n        //n = 3. + 8. * (1.+sin(iTime))/2.,\n        n = 5.,\n        l = length(uv),                             \n        a = atan(uv.y,uv.x),\n        u = r * ( fract( a*n/6.283 ) - .5 ) / (n/6.283),\n        v = l - r;    \n    return vec2(u,v);\n        \n}\n\nfloat level (float a, float b, float x)\n{\n    float l = (x - a) / (a-b+epsilon);\n    \n    return l;\n}\n\nvec3 spot(vec2 uv, vec2 pos, vec3 col, float radius)\n{\n    return clamp(1.-length((uv-pos)/radius), 0.0,1.0) * col;\n}\n\nfloat ornaDisc(vec2 uv, float time, float speed, float idv, float dStyle, float dSpeed)\n{    \n    float x,y;\n    float c, c0, c1, c2, c3, c4;\n    vec2 uv0, uv1, uv2;\n    \n    uv0 = uv;\n    uv = radial(uv);\n    x = uv.x;\n    y = uv.y;  \n    \n    \n    \n    // Animation //////////////////////////////////////////////////////////////\n    \n    float localSpeed = speed + idv * dSpeed;\n    x = x + sin(time * localSpeed) + idv * dStyle;\n    \n    \n    \n    // Pattern //////////////////////////////////////////////////////////////\n    \n    x = sign(y)*x - 1.35;\n    x = abs(x - y);\n    y = fract(y*sin(1.7)*1.15);    \n    x = sin(mod(x,1./y));\n    y = sin(mod(y,x)/x);    \n    y = 2.*x*y;\n    c0 = (1. - mod(0.5*x,y));\n    \n    uv = radial(vec2(x-1.,y-1.));\n    x = uv.x;\n    y = uv.y;    \n    x = sin(x-.1);\n    y = sin(y);    \n    x = x * sin(y-.1);\n    y = y * sin(y);    \n    c1 = (1. - mod(0.5*x,y));\n    \n    uv = radial(vec2(x-1.,y-1.));\n    x = uv.x;\n    y = uv.y;    \n    x = sin(pow(x, sin(4.01) )-.1);\n    y = sin(y);    \n    c2 = (1. - mod(0.5*x,y));  \n    \n    //Disc\n    float ct = 1.-clamp(pow(length(uv0/ 2.05), 64.0), 0.0, 1.0);\n    \n    \n    c3 = max(c0,c2);\n    c3 = min(c3,c1);\n    c3 = max(c3,c2);\n    \n    c3 = pow(c3, 2.);\n    c3 = level(0.8, 0.85, c3);\n    \n    float d = 1.0;\n    uv1 = uv0;    \n    uv1 = radial(uv1/1.60);\n    x = uv1.x;\n    y = uv1.y;    \n    y = pow(max(y-1.5, 0.5),1.5);\n    uv1 = vec2(x,y);\n        \n    c4 = pow(length(uv1), 3.0);\n    c4 = clamp(1.-level(0.45, 0.7, c4),0.,1.);\n    \n    c4 = (1.- c4);\n    c4 *= c3;\n    \n        \n    //Compose\n    c = c4;\n    vec3 pamb =  vec3(0.5);\n    vec3 light = vec3(0.0);\n    light += spot(uv0, vec2(0.0,-1.0), vec3(1.,0.5,0.1), 2.);\n    light += spot(uv0, vec2(1.0,-2.0), vec3(1.,1.,1.), 2.);\n    light += spot(uv0, vec2(1.0,2.0), vec3(0.2,0.3,1.), 2.);\n    \n    c = ct*c + (1.-ct)* .125 ;\n    c = clamp(c, 0.0, 1.0);\n    return c;\n}","name":"Common","description":"","type":"common"}]}