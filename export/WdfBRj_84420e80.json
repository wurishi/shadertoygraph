{"ver":"0.1","info":{"id":"WdfBRj","date":"1588565994","viewed":72,"name":"Quarantine.. Look out the window","username":"kimny1998","description":"CIS 561 Final Project","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["window"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 100;\nconst int AO_SAMPLES = 30;\nconst float AO_DIST = 0.3;\nconst float FIVETAP_K = 1.0;\n\nconst float HALF_PI = 3.14159 * 0.5;\n\n#define AO_ONLY;\n//#define LAMBERT_ONLY;\n//#define BOTH;\n\n//#define FIVE_TAP\n#define HEMISPHERE\n\nvoid coordinateSystem(const vec3 v1, out vec3 v2, out vec3 v3) {\n    \n    if (abs(v1.x) > abs(v1.y)) {\n        v2 = vec3(-v1.z, 0, v1.x) / length(v1.xz);\n    }\n    else {\n        v2 = vec3(0, v1.z, -v1.y) / length(v1.yz);\n    }\n    v3 = cross(v1, v2);\n}\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n};\n\nvec3 rotateY(vec3 p, float a) {\n    a = radians(a);\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(-15.0, -2, -40.0);\n    ref = vec3(-15.0, -2, 0.0);\n    \n    float len = radians(50.0 / 2.0) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    b = b / 2.0;\n    vec3 absP = abs(p);\n    if(-b.x < absP.x && absP.x < b.x) {\n        if(-b.y < absP.y && absP.y < b.y) {\n            if(-b.z < absP.z && absP.z < b.z) {\n                return -1.0;\n            }\n        }\n    }\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    t = min(t, box(pos + vec3(15, 13, 20), vec3(80, 3, 30)));\n    \n    float wall1 = box(pos - vec3(19, 0, 0), vec3(30, 40, 2));\n    float wall2 = box(pos + vec3(26.2, 0, 0), vec3(45, 40, 2));\n    float wall3 = box(pos + vec3(0, -20, 0), vec3(20, 15, 2));\n    float wall4 = box(pos + vec3(0, 6, 0), vec3(20, 15, 2));\n    float union12 = opUnion(wall1, wall2);\n    float union123 = opUnion(union12, wall3);\n    float union1234 = opUnion(union123, wall4);\n    t = min(t, union1234);\n    \n    float a = box(pos + vec3(0, 6, 0), vec3(20, 15, 2));\n    float b = box(pos + vec3(0.4, -2, 0), vec3(20, 2, 2));\n    t = min(t, opSubtraction(a, b));\n    \n    t = min(t, box(rotateY(pos + vec3(0.5, -1, 2.2), -10.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(1.0, 0.2, 3.8), -17.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(1.8, 1.4, 5.6), -24.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(2.8, 2.6, 7.2), -31.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(3.9, 3.8, 8.7), -38.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(5.4, 5.0, 9.8), -45.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(7.2, 6.2, 10.8), -52.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(9.1, 7.4, 11.6), -59.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(10.9, 8.6, 12.3), -66.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(12.7, 9.8, 12.9), -73.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(14.5, 11.0, 13.3), -80.0), vec3(7, 1.2, 2)));\n    return t;\n}\n\nfloat march(vec3 origin, vec3 dir)\n{\n    float t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m = sceneMap3D(pos);\n        if(m < 0.01)\n        {\n            return t;\n        }\n        t += m;\n    }\n    return -1.0;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                            sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                            sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec2 random2(vec3 p) {\n    return fract(sin(vec2(p.x, p.x + 1.0)) * vec2(43758.5453123, 22578.1459123));\n}\n\nfloat computeAO(vec3 p, vec3 n, float dist) {\n    float aoSum = 0.0;\n    // Sample a few points in the hemisphere around n at p\n    vec3 t, b;\n    // Make a tangent and bitangent vector\n    coordinateSystem(n, t, b);\n    for(int i = 0; i < AO_SAMPLES; ++i) {\n        // Generate a pair of random [0, 1] floats\n        vec2 xi = random2(p + float(i) * 203.1);\n        // Convert the xi pair to a vector in the hemisphere\n        float len = sqrt(xi.y);\n        float rx = len * cos(6.2831 * xi.x);\n        float ry = len * sin(6.2831 * xi.x);\n        float rz = sqrt(1.0 - xi.y); // z = sqrt(1 - x*x - y*y)\n        vec3 dir = vec3(rx * t + ry * b + rz * n);\n        aoSum += step(0.0, sceneMap3D(p + dir * dist));\n    }\n    return aoSum / float(AO_SAMPLES);\n}\n\nfloat fiveTapAO(vec3 p, vec3 n, float k) {\n    float aoSum = 0.0;\n    for(float i = 0.0; i < 5.0; ++i) {\n        float coeff = 1.0 / pow(2.0, i);\n        aoSum += coeff * (i * AO_DIST - sceneMap3D(p + n * i * AO_DIST));\n    }\n    return 1.0 - k * aoSum;\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye)\n{\n    float t = march(eye, dir);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n\n    float warmDot = max(0.0, dot(nor, normalize(vec3(-1.0,1.0,-0.1))));\n    float coolDot = max(0.0, dot(nor, normalize(vec3(-1.0,0.0,-1.0))));\n\n    vec3 overallColor = warmDot * vec3(0.7, 0.88, 0.7);\n    overallColor += coolDot * vec3(0.3);\n    overallColor = clamp(overallColor + vec3(0.2), 0.0, 1.0);\n    \n    #ifdef HEMISPHERE\n    float ao = computeAO(isect, nor, AO_DIST);\n    #endif\n    #ifdef FIVE_TAP\n    float ao = fiveTapAO(isect, nor, FIVETAP_K);\n    #endif\n    \n    \n    #ifdef AO_ONLY\n    vec3 sdfColor = vec3(ao);\n    #endif\n    #ifdef LAMBERT_ONLY\n    vec3 sdfColor = overallColor;\n    #endif\n    #ifdef BOTH \n    vec3 sdfColor = ao * overallColor;\n    #endif\n\n    return Intersection(t, sdfColor);\n}\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    vec3 dir, eye, ref;\n    raycast(uv2, dir, eye, ref);\n    \n    Intersection isect = sdf3D(dir, eye);\n    vec4 original_color = texture(iChannel0, uv);\n    \n    const int mSize = 7;\n    const int kSize = (mSize-1)/2;\n    float kernel[mSize];\n    vec3 final_color = vec3(0.0);\n\n    //create the 1-D kernel\n    float sigma = 10.0;\n    float Z = 0.0;\n    for (int j = 0; j <= kSize; ++j) {\n        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n    }\n\n    //get the normalization factor (as the gaussian has been clamped)\n    for (int j = 0; j < mSize; ++j) {\n        Z += kernel[j];\n    }\n    \n    //read out the texels\n    for (int i=-kSize; i <= kSize; ++i) {\n        for (int j=-kSize; j <= kSize; ++j) {\n            final_color += kernel[kSize+j]*kernel[kSize+i]*texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n\n        }\n    }\n    \n    final_color = vec3(final_color) * isect.color * step(0.0, isect.t);\n    vec4 unblurredColor = texture(iChannel0, uv);\n\t\n    fragColor = vec4(mix(unblurredColor.rgb, final_color/(Z*Z), unblurredColor.a), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define NUM_OCTAVES 7\n\nfloat rand(float n){return fract(sin(n) * 43758.5453123);}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n) {\n\tconst vec2 d = vec2(0.0, 1.0);\n  vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\n\treturn mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\n}\n\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const int RAY_STEPS = 100;\nconst float SHADOW_HARDNESS = 6.0;\n// 0 for penumbra shadows, 1 for hard shadows\n#define HARD_SHADOW 0\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\nvec3 rotateY(vec3 p, float a) {\n    a = radians(a);\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(-15.0, -2, -40.0);\n    ref = vec3(-15.0, -2, 0.0);\n    \n    float len = radians(50.0 / 2.0) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nfloat box(vec3 p, vec3 b)\n{\n    b = b/2.0;\n    return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  return dot(p,n.xyz) + n.w;\n}\n\nfloat opUnion( float d1, float d2 ) { return min(d1,d2); }\n\nfloat opSubtraction( float d1, float d2 ) { return max(-d1,d2); }\n\nfloat opIntersection( float d1, float d2 ) { return max(d1,d2); }\n\nfloat sceneMap3D(vec3 pos)\n{\n    float t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    t = min(t, box(pos + vec3(15, 13, 20), vec3(80, 3, 30)));\n    \n    float wall1 = box(pos - vec3(19, 0, 0), vec3(30, 40, 2));\n    float wall2 = box(pos + vec3(26.2, 0, 0), vec3(45, 40, 2));\n    float wall3 = box(pos + vec3(0, -20, 0), vec3(20, 15, 2));\n    float wall4 = box(pos + vec3(0, 6, 0), vec3(20, 15, 2));\n    float union12 = opUnion(wall1, wall2);\n    float union123 = opUnion(union12, wall3);\n    float union1234 = opUnion(union123, wall4);\n    t = min(t, union1234);\n    \n    float a = box(pos + vec3(0, 6, 0), vec3(20, 15, 2));\n    float b = box(pos + vec3(0.4, -2, 0), vec3(20, 2, 2));\n    t = min(t, opSubtraction(a, b));\n    \n    t = min(t, box(rotateY(pos + vec3(0.5, -1, 2.2), -10.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(1.0, 0.2, 3.8), -17.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(1.8, 1.4, 5.6), -24.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(2.8, 2.6, 7.2), -31.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(3.9, 3.8, 8.7), -38.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(5.4, 5.0, 9.8), -45.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(7.2, 6.2, 10.8), -52.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(9.1, 7.4, 11.6), -59.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(10.9, 8.6, 12.3), -66.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(12.7, 9.8, 12.9), -73.0), vec3(7, 1.2, 2)));\n    t = min(t, box(rotateY(pos + vec3(14.5, 11.0, 13.3), -80.0), vec3(7, 1.2, 2)));\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj)\n{\n    t = plane(pos, vec4(0.0, 0.0, -1.0, 5.0));\n    obj = 1;\n    float t2;\n    if((t2 = box(pos + vec3(15, 13, 20), vec3(80, 3, 30))) < t) {\n        t = t2;\n        obj = 2;\n    }\n\n    float wall1 = box(pos - vec3(19, 0, 0), vec3(30, 40, 2));\n    float wall2 = box(pos + vec3(26.2, 0, 0), vec3(45, 40, 2));\n    float wall3 = box(pos + vec3(0, -20, 0), vec3(20, 15, 2));\n    float wall4 = box(pos + vec3(0, 6, 0), vec3(20, 15, 2));\n    float union12 = opUnion(wall1, wall2);\n    float union123 = opUnion(union12, wall3);\n    float union1234 = opUnion(union123, wall4);\n    if((t2 = union1234) < t) {\n        t = t2;\n        obj = 3;\n    }\n    \n    float a = box(pos + vec3(0, 6, 0), vec3(20, 15, 2));\n    float b = box(pos + vec3(0.4, -2, 0), vec3(20, 2, 2));\n    if((t2 = opSubtraction(a, b)) < t) {\n        t = t2;\n        obj = 4;\n    }\n    \n    if((t2 = box(rotateY(pos + vec3(0.5, -1.0, 2.2), -10.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(1.0, 0.2, 3.8), -17.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(1.8, 1.4, 5.6), -24.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(2.8, 2.6, 7.2), -31.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(3.9, 3.8, 8.7), -38.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(5.4, 5.0, 9.8), -45.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(7.2, 6.2, 10.8), -52.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(9.1, 7.4, 11.6), -59.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(10.9, 8.6, 12.3), -66.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(12.7, 9.8, 12.9), -73.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n    if((t2 = box(rotateY(pos + vec3(14.5, 11.0, 13.3), -80.0), vec3(7, 1.2, 2))) < t) {\n        t = t2;\n        obj = 5;\n    }\n}\n\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n        float m;\n        sceneMap3D(pos, m, hitObj);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3(sceneMap3D(pos + epsilon.yxx) - sceneMap3D(pos - epsilon.yxx),\n                           sceneMap3D(pos + epsilon.xyx) - sceneMap3D(pos - epsilon.xyx),\n                           sceneMap3D(pos + epsilon.xxy) - sceneMap3D(pos - epsilon.xxy)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec2 uv) {\n    if (hitObj == 1) {\n        vec2 new_uv = uv - vec2(iTime / 8.0);\n        vec3 noise = 0.6 * vec3(fbm(new_uv));\n        return vec3(0.18, 0.3, 0.65) + noise;\n    } else if (hitObj == 2) {\n        return vec3(0.4, 0.4, 0.5);\n    } else if (hitObj == 3) {\n        return vec3(0.9, 0.8, 0.9);\n    } else if (hitObj == 4) {\n        return vec3(0.6, 0.6, 0.7);\n    } else if (hitObj == 5) {\n        return vec3(0.6, 0.6, 0.7);\n    }\n}\n\nfloat hardShadow(vec3 dir, vec3 origin, float min_t) {\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        t += m;\n    }\n    return 1.0;\n}\n\nfloat softShadow(vec3 dir, vec3 origin, float min_t, float k) {\n    float res = 1.0;\n    float t = min_t;\n    for(int i = 0; i < RAY_STEPS; ++i) {\n        float m = sceneMap3D(origin + t * dir);\n        if(m < 0.0001) {\n            return 0.0;\n        }\n        res = min(res, k * m / t);\n        t += m;\n    }\n    return res;\n}\n\nfloat shadow(vec3 dir, vec3 origin, float min_t) {\n    #if HARD_SHADOW\n    return hardShadow(dir, origin, min_t);\n    #else\n    return softShadow(dir, origin, min_t, SHADOW_HARDNESS);\n    #endif\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec2 uv)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj);\n   \n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect);\n    \n    if (hitObj == 1) {\n        vec3 surfaceColor = computeMaterial(hitObj, isect, nor, uv);\n    \n        return Intersection(t, surfaceColor, isect, hitObj);\n    }\n    \n    vec3 material = computeMaterial(hitObj, isect, nor, uv);\n    \n    vec3 warmDir = normalize(vec3(-1.0, 1.0, -0.1));\n    vec3 coolDir = normalize(vec3(-1.0, 1.0, -1.0));\n\n    float warmDot = max(0.0, dot(nor, warmDir));\n    float coolDot = max(0.0, dot(nor, coolDir));\n\n    vec3 overallColor = warmDot * vec3(0.7, 0.88, 0.7) * shadow(warmDir, isect, 0.1);\n    overallColor += coolDot * vec3(0.3);\n    overallColor *= material;\n    overallColor = clamp(overallColor + vec3(0.2), 0.0, 1.0);\n    \n    vec3 sdfColor = overallColor;\n    \n    return Intersection(t, sdfColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    Intersection aaIsects[4];\n    vec3 dir, eye, ref;\n    for(float i = 0.0; i < 1.0; i += 0.5) {\n        for(float j = 0.0; j < 1.0; j += 0.5) {\n            raycast(uv2 + vec2(i, j) / iResolution.xy, dir, eye, ref);;\n            aaIsects[int(i * 4.0 + j * 2.0)] = sdf3D(dir, eye, uv);\n        }\n    }\n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 4; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n    \n    avgColor *= 0.5;\n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), 1.0);\n    float fogT = smoothstep(20.0, 100.0, distance(aaIsects[0].p, eye));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0), fogT);\n    \n    float FOCAL_LENGTH = 30.0;\n    float FOCAL_RANGE = 50.0;\n    \n    float distAlongCamZ = abs(dot(normalize(ref - eye), (aaIsects[0].p - eye)));\n    float dofZ = min(1.0, abs(distAlongCamZ - FOCAL_LENGTH) / FOCAL_RANGE);\n    dofZ = pow(dofZ, 0.5);\n    \n    fragColor.a = dofZ;\n}","name":"Buffer A","description":"","type":"buffer"}]}