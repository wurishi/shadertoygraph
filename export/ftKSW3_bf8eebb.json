{"ver":"0.1","info":{"id":"ftKSW3","date":"1641466231","viewed":124,"name":"Box Union with Polygon","username":"kastorp","description":"While reading some literature on polygon union, I tried to derive my own for the simplest case.\nThe polygon sdf should be exact in the interior,  so it could be useful for collision detection.\nUse mouse to move the second box.\n","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["box","polygon","union","interior"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Box Union with Polygon by Kastorp\n// simple union of two boxes\n// this sdf should preserve the exact distance on interior\n// in the worst case 12 segments are evaluated\n// 3D case should be similar, with 8 corners, 8 combinations for each corner and 28 quads\n//----------------------------\n\n\n//square distance to segment\nfloat sqdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 f = a + (b-a)*clamp( dot(p-a,b-a)/dot(b-a,b-a), 0.0, 1.0 ); //closest point\n    return dot(p-f,p-f);\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// b= first  box size\n// c2= second  box center\n// b2= second  box size\nfloat sdBoxUnion( in vec2 p,vec2 b, vec2 c2,vec2 b2)\n{\n    //min(...)  for exterior is exact\n    float de= min(  sdBox(p,b),sdBox(p-c2,b2));\n    \n    vec2 a= c2+b2-b, //a= relative position of corner 0 \n         c= c2-b2+b;  //a= relative position of corner 2\n      \n    //if exterior or not intersection, use the basic union\n    if(de>0.||max(c.x-2.*b.x,c.y-2.*b.y)>0. || min(a.x+2.*b.x,a.y+2.*b.y)<0.  ) return de;\n    \n    vec2 vi,vf; //previous and first vertex\n \n    float di =1e10; //interior distance, unsigned\n    for(int i=0;i<4;i++) // iterate clockwise on first box corners\n    {\n        bool inv=(i==1 || i==3), //invert vertex order\n             skip=false, //just one vertex for the current corner\n             first=(i==0), //first corner\n             last=(i==3); //last corner\n\n        //corner parameters\n        vec2 e = vec2(1) - vec2(i/2,(i%2)^(i/2) )*2., //sign of current corner\n             f =vec2(i<2? a.x:-c.x, i==0 || i==3 ? a.y:-c.y), // second box relative corner\n             g=b*e; //current corner\n              \n        //internal connection points \n        vec2 v1,v2,v3,vt; //NB: v2 is the intersection point between the two boxes\n        //4 cases for each corner:\n        if( max(f.x,f.y)<=0.) {v1=g;v2=v1;v3=v1;skip=true;} //second box corner is inside\n        else if(min(f.x,f.y)>0.){ v1= g+f*e ;v2=v1;v3=v1;skip=true;} //second box corner is outside\n        else if(f.x>0.){v1=g; v2=g + e* vec2(0,f.y);v3=g+f*e;} //second box corner is after\n        else {v3=g; v2=g + e* vec2(f.x,0);v1=g+f*e;}   //second box corner is before           \n        if(inv) {vt=v1;v1=v3;v3=vt;} //invert order\n        \n        //draw:\n        if(!first) di=min(di,sqdSegment(p,vi,v1)); else vf=v1; //trace first vertex\n        if(!skip) {di=min(di,sqdSegment(p,v1,v2)); di=min(di,sqdSegment(p,v2,v3));}\n        if(last) di=min(di,sqdSegment(p,v3,vf)); //close polygon\n        vi=v3;   \n    }       \n    return -sqrt(di); //it's interior so invert sign\n\n}\n\n//cloned from Iq's\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m1 = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    // distance\n    float d = sdBoxUnion(p,vec2(.7,.5),vec2(.6*sin(iTime),.5*cos(iTime)),vec2(.4+.3*sin(iTime*3.1),.4+.2*cos(iTime*3.1))); \n      \n    // custom box\n    if( iMouse.z>0.001 )\n    {\n       d = sdBoxUnion(p,vec2(.7,.5),m1,vec2(.3));\n    }\n    \n    // coloring\n    vec3 col = (d>0.0) ? vec3(0.3,0.6,0.3) : vec3(0.7,0.3,.3);\n    col *= 1.0 - exp(-7.0*abs(d));\n    col *= 0.8 + 0.2*cos(128.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n\tfragColor = vec4(col, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}