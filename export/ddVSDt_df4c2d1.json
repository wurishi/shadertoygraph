{"ver":"0.1","info":{"id":"ddVSDt","date":"1681981908","viewed":163,"name":"Gerstner wave simulation","username":"Sergio_2357","description":"Gerstner wave to simulate water","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["math","simulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst float PI = 3.14159265358979323846264338327950288;\n\nuint hash(uint s) {\n    s ^= 2747636419u;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    return s;\n}\n\nfloat randf(uint inseed, out uint nseed) {\n    nseed = hash(inseed);\n    float rs = float(nseed%1000000u)/1000000.0;\n    return rs;\n}\n\nuint seed = 5u;\n\nfloat rand() {\n    return randf(uint(seed), seed);\n}\n\nfloat rand(float a, float b) {\n    return rand()*(b-a)+a;\n}\n\nvec2 rot(vec2 v, float ang) {\n    float cs = cos(ang);\n    float sn = sin(ang);\n    mat2 rt = mat2(cs, -sn, sn, cs);\n    return v * rt;\n}\n\nvoid Gerstner(vec3 psin, out vec3 ps, float a, float w, float dir, float xyscaling, float zscaling) {\n    \n    vec2 uv = psin.xy;\n    uv = rot(uv, dir);\n    uv *= xyscaling;\n    \n    float x = uv.x + iTime*w*xyscaling;\n    for (uint i = 0u; i < 10u; i++) {\n        x = uv.x + iTime*w*xyscaling - a*cos(x);\n    }\n    \n    float dx = x-uv.x;\n    uv.x = x;\n    uv /= xyscaling;\n    uv = rot(uv, -dir);\n    ps.xy = uv;\n    ps.z = psin.z + sin(x) * zscaling;\n}\n\nfloat waterH(vec2 uv) {\n    vec3 ps = vec3(uv, 0.0);\n    \n    float am = .8;\n    float aml = .85;\n    float wm = .1;\n    float wml = .8;\n    float xysm = 20.0;\n    float xysml = 1.2;\n    float zsm = 1.0;\n    float zsml = 0.7;\n    float sH = 0.0;\n    for (uint sz = 0u; sz < 5u; sz++) {\n        for (float i = 0.0; i < sqrt(float(sz+1u)); i++) {\n            float Hm = rand(.8, 1.2)*zsm;\n            Gerstner(vec3(ps), ps, rand(.8, 1.2)*am, rand(.8, 1.2)*wm, rand(0.0, PI), \n                     rand(.8, 1.2)*xysm, Hm);\n            sH += Hm;\n            am *= aml;\n            wm *= wml;\n            xysm *= xysml;\n            zsm *= zsml;\n        }\n    }\n    \n    ps.z /= sH;\n    ps.z += 0.5;\n    return ps.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.y;\n    \n    \n    vec3 col = mix(vec3(0.0, 0.0, 1.0), vec3(1.0), waterH(uv)*0.25+0.5);\n    //col = vec3(uv.xy, 1.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}