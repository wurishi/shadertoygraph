{"ver":"0.1","info":{"id":"lsyGRw","date":"1453671578","viewed":334,"name":"Falling sand test (simple)","username":"ostkaka","description":"Falling sand ;-)","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["fallingsand"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Output image\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(vec3(texture(iChannel1, uv).x), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Falling sand cellural automata\n\n\n#define SAND_CONSTANT 0.5\n\nvec4 getTexture(vec2 uv) {\n    if (uv.x < 0.0 || uv.y < 0.0 || uv.x > 1.0 || uv.y > 1.0)\n        return vec4(1.0, 0.0, 0.0, 1.0);\n    else\n        return texture(iChannel0, uv);\n}\n\nfloat calcMove(mat3 state) {\n    if (state[1].y == 0.0)\n        return 0.0;\n    if (state[1].x == 0.0)\n        return 1.0;\n    \n    return 0.0;\n}\n\nfloat calcMoving(mat3 state, mat3 move, mat3 moving) {\n    if (state[1].z == 1.0 && state[1].y == 0.0 && move[1].z == 1.0 && moving[1].y == 0.0)\n    \treturn 1.0;\n    return 0.0;\n}\n\nfloat calcState(mat3 state, mat3 moving) {\n    if (moving[1].x == 1.0)\n        return state[1].x;\n    if(moving[1].y == 1.0)\n        return state[1].z;\n    return state[1].y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy + vec2(1.0)) / iResolution.xy;\n    \n    if (iFrame <= 20) {\n        if (texture(iChannel1, uv).x > SAND_CONSTANT)\n        \tfragColor = vec4(1.0, 0.0, 0.0, 1.0);\n        else\n            fragColor = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    vec3 xx = vec3(-1.0/iResolution.x, 0.0, 1.0/iResolution.x);\n    vec3 yy = vec3(-1.0/iResolution.y, 0.0, 1.0/iResolution.y);\n    \n    vec3 a = getTexture(uv + xx.xx + yy.xx).xyz;\n    vec3 b = getTexture(uv + xx.xy + yy.xx).xyz;\n    vec3 c = getTexture(uv + xx.xz + yy.xx).xyz;\n    vec3 d = getTexture(uv + xx.xx + yy.yx).xyz;\n    vec3 e = getTexture(uv + xx.xy + yy.yx).xyz;\n    vec3 f = getTexture(uv + xx.xz + yy.yx).xyz;\n    vec3 g = getTexture(uv + xx.xx + yy.zx).xyz;\n    vec3 h = getTexture(uv + xx.xy + yy.zx).xyz;\n    vec3 i = getTexture(uv + xx.xz + yy.zx).xyz;\n    \n    mat3 state  = mat3(a.r, b.r, c.r, d.r, e.r, f.r, g.r, h.r, i.r);\n    mat3 move   = mat3(a.g, b.g, c.g, d.g, e.g, f.g, g.g, h.g, i.g);\n    mat3 moving = mat3(a.b, b.b, c.b, d.b, e.b, f.b, g.b, h.b, i.b);\n    \n    float newMove = calcMove(state);\n    float newMoving = calcMoving(state, move, moving);\n    float newState = calcState(state, moving);\n    \n    if (length(iMouse.xy - fragCoord.xy) < 8.0)\n        newState = 1.0;\n    \n    fragColor = vec4(newState, newMove, newMoving, 1.0);;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Shader\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if (iFrame == 0) {\n    \tfragColor = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    fragColor = 0.1 * texture(iChannel0, uv) + 0.9 * texture(iChannel1, uv);\n}","name":"Buf B","description":"","type":"buffer"}]}