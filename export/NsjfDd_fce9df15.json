{"ver":"0.1","info":{"id":"NsjfDd","date":"1647386194","viewed":83,"name":"Atomic Bubbles","username":"uiop","description":"My first shader on shadertoy, Tried to do raymarching and cool stuff.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 bg(vec3 n){\n    return vec3(10.f*n.y-9.5f,10.f*n.y-9.5f,10.f*n.y-9.5f);\n}\nvec3 rotx(vec3 p, float a){\n    float s = sin(a);\n    float c = cos(a);\n    return(vec3(p.x*c+p.y*s,-p.x*s+p.y*c,p.z));\n}\nvec3 radialz(vec3 p, float n,float r){\n    float dir = atan(p.x,p.y)+r;\n    float len = length(vec2(p.x,p.y));\n    dir = abs(mod(dir,3.141592f*2.0f/n)-3.141592f/n);\n    return vec3(sin(dir)*len, cos(dir)*len, p.z);\n}\n\nfloat sdSph(vec3 p, float r){\n    return length(p) - r;\n}\n\nfloat getSDF(vec3 p,float time){\n    float n = 1.f + round(abs(p.x)-0.5f);\n    float m = 1.f + round(abs(p.y)-0.5f);\n    float s = 1.f + 0.1f*round(abs(p.z)-0.5f);\n    float q = round(p.x - 0.5f) + round(p.y - 0.5f) + round(p.z-0.5f);\n    float r = 0.0825f+0.0425f*sin(round(p.x - 0.5f) + round(p.y - 0.5f) + round(p.z-0.5f));\n    float t = sdSph((radialz(radialz(rotx((mod(p.xyz,1.f)-0.5f).xzy,time*q*0.1f).xzy,n,time*s)+vec3(0,0,-0.1f).xzy,m,time*s*2.f)+vec3(0,-0.1,0)).xzy,r);\n    return (t);\n    \n}\n\nvec3 refl(vec3 d, vec3 n){\n    return d - 2.f * n * dot(d,n);\n}\n\nvec3 findNormal(vec3 p, float d,float t){\n    return normalize(vec3(getSDF(p + vec3(d,0,d),t) - getSDF(p - vec3(d,0,0),t),\n    getSDF(p + vec3(0,d,0),t) - getSDF(p - vec3(0,d,0),t),\n    getSDF(p + vec3(0,0,d),t) - getSDF(p - vec3(0,0,d),t)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\nfloat speed = 1.f;\nfloat time = iTime*speed;\n\n    vec2 uv = (fragCoord-0.5f*iResolution.xy)/iResolution.x;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(time+uv.xyx+vec3(0,2,4));\n    \n    // Setup\n    vec3 pos = vec3(6.0f*sin(time*0.125f),6.0f*cos(time*0.12f),-3.f+2.5f*sin(time*0.08f));\n    vec3 dir = normalize(rotx(rotx(vec3(uv.x,uv.y,1),time*0.2f).zxy,time*0.1f).zxy);\n    \n    int ma = 300;\n    \n    float s = 0.0f;\n    float mins = 100000.0f;\n    float glow = -0.00f;\n    float mdis = 0.f;\n    // March Ray\n    float lasts = s;\n   // bool isn = false;\n    for(int i = 0; i < ma; i++){\n        lasts = s;\n        s = min(getSDF(pos,time),0.25f);\n        \n        mins = min(s,mins);\n        pos = pos + dir * s;\n        mdis += s;\n        if(s < 0.001f){\n            i = ma;\n        }\n        if(s - lasts  > 0.f){\n            glow += min(0.001f/s,0.2f/mdis/mdis);\n        }\n\n    }\n    vec3 pos2 = pos + dir * 0.01f;\n    float tran = 0.f;\n    for(int i = 0; i < ma/2; i++){\n        //lasts = s;\n        s = abs(min(getSDF(pos2,time),0.1f));\n        tran += s;\n        pos2 = pos2 + dir * s;\n        //mdis += s;\n        if(s < 0.001f){\n            i = ma/2;\n        }\n        //if(s - lasts  > 0.f){\n          //  glow += min(0.001f/s,0.2f/mdis/mdis);\n        //}\n\n    }\n\n\n\n        //col = 0.5f + findNormal(pos,0.0001f,iTime)*0.5f;\n    vec3 norm = findNormal(pos,0.0001f,time);\n    col = (bg(refl(dir,norm)));\n    col = max(col*1.0f,0.f) + 0.5f*(dir+0.5f)*1.0f;\n    col = col + min(tran,1.0f)*0.5f;\n    col = max(col - 0.005f*mdis*mdis,0.f) + 0.5f*glow;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n   // fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}