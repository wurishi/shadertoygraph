{"ver":"0.1","info":{"id":"msBSDD","date":"1670452365","viewed":64,"name":"Orbiting particles v1","username":"thom_bahm","description":"Messing around with cos/sin / ''orbits' - high particle count makes it appear buggy, messing with speed gives some interesting results (interesting speeds = 0.5, 2, 5, 10, 100 for example)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["particles","orbit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define particleCount 20\n#define speed 2.\n\nvec2 uv;\n\nfloat drawCircle(vec2 center, float radius)\n{\n    return 1.0 - smoothstep(0.0, radius, length(uv - center));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    uv = fragCoord/iResolution.xy;\n    uv -= 0.5; //normalize between <-0.5, 0.5>\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 50.f; //<-25, 25>\n    // Time varying pixel color\n    vec3 col = vec3(0.f);\n    \n    //Loop through the defined particle count\n    for (int i = 0; i < particleCount; i++) {\n        //offset (orbit) is a result of circular motion with respect to time\n        vec2 offset = vec2(cos(iTime*speed)*10.f, sin(iTime*speed)*10.f);\n        //particle offset is the same, but the speed in which the particles\n        //orbit is slowed down and unique to each particle\n        vec2 particleOff = vec2(cos(iTime*0.2*float(i)), sin(iTime*0.2*float(i)));\n        offset *= particleOff; //combine general orbit and particle offset\n        // Create the circle(s) and add to the background.\n        vec3 circle = vec3(1.0, 0.5, 0.0) * drawCircle(offset, 0.5);\n        col += circle;\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}