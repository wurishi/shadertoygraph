{"ver":"0.1","info":{"id":"4cXBWN","date":"1723737168","viewed":46,"name":"Numeric Millitext Only","username":"Lokno","description":"Display a sub-pixel font with 5x2 pixel characters designed by Matt Sarnoff\n\nDisplays dynamic floats in a sub-pixel font\n\nUpdate: spalmer was so kind as to demonstrate how this text can scaled/magnified","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["text","pain","debug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// MILLITEXT METHODS START\n\n// \"\"\"0123456789.- \"\"\"\nconst uint millitext_digits[13] = uint[]( 576339299u,536883801u,814381255u,579498183u,617742820u,579039719u,578959843u,9114119u,579483875u,583676131u,4096u,12583360u,0u );\n\n\nint getDigit(float x, int position, int sign, int integer_length, int decimal_length) {\n\n    const int ASCII_ZERO = 0;    // '0'\n    const int ASCII_PERIOD = 10; // '.'\n    const int ASCII_SPACE = 12;  // ' '\n    const int ASCII_DASH = 11;   // '-'\n    \n    float absX = abs(x);\n    int actualIntLength = max(1, int(log(absX) / log(10.0)) + 1);\n    int totalLength = max(integer_length, actualIntLength) + (decimal_length > 0 ? (1 + decimal_length) : 0);\n    \n    if (sign == 1) {\n        totalLength += 1;\n    }\n    \n    if (position < 0 || position >= totalLength) {\n        return ASCII_SPACE;\n    }\n    \n    if (sign == 1 && position == 0) {\n        return (x < 0.0) ? ASCII_DASH : ASCII_SPACE;\n    }\n    \n    if (sign == 1) {\n        position -= 1;\n    }\n    \n    int offset = max(0, actualIntLength - integer_length);\n    int paddedPosition = position - max(0, integer_length - actualIntLength);\n\n    if (paddedPosition < 0) {\n        return ASCII_SPACE;\n    }\n\n    if (paddedPosition < actualIntLength) {\n        int intPos = actualIntLength - 1 - paddedPosition - offset;\n        int digit = int(mod(floor(absX / pow(10.0, float(intPos))), 10.0));\n        return digit + ASCII_ZERO;\n    }\n\n    if (paddedPosition == actualIntLength && decimal_length > 0) {\n        return ASCII_PERIOD;\n    }\n\n    int fracPos = paddedPosition - actualIntLength - 1;\n    if (fracPos >= 0 && fracPos < decimal_length) {\n        float fracPart = absX - floor(absX);\n        fracPart *= pow(10.0, float(fracPos + 1));\n        int digit = int(mod(floor(fracPart), 10.0));\n        return digit + ASCII_ZERO;\n    }\n\n    return ASCII_SPACE;\n}\n\n\nvec3 getMilliTextColorAt(uint c, uint x, uint y) {\n    uint bitPos = (x * 5u + (4u-y)) * 3u;\n    const uint mask = 7u;\n    uint bitCol = (c >> bitPos) & mask;\n    return vec3(float(bitCol >> 2u & 1u), float(bitCol >> 1u & 1u), float(bitCol & 1u));\n}\n\n// Display any float within a fixed display format ([sign]integer_length[.decimal_length])\nvec3 displayFloat( vec2 bottomLeft, vec2 uv, float value, int sign, int integer_length, int decimal_length )\n{\n    int lengthNum = int(integer_length + decimal_length + (decimal_length > 0 ? (1 + decimal_length) : 0));\n    vec3 color = vec3(0,0,0);\n    vec2 subPos = uv - bottomLeft;\n    vec2 upperRight = vec2( float(2 * lengthNum), 5.0 );\n    \n    if( all(greaterThanEqual(subPos, vec2(0.0))) && all(lessThanEqual(subPos, upperRight)) )\n    {\n        subPos.x = subPos.x / 2.0; \n        subPos.y = subPos.y / 5.0; \n        \n        int p = int(floor(subPos.x)) % lengthNum;\n        \n        uint character = millitext_digits[getDigit(value,p,sign,integer_length,decimal_length)];\n        \n        uint subX = uint(fract(subPos.x) * 2.0);\n        uint subY = uint(fract(subPos.y) * 5.0);\n    \n        color = getMilliTextColorAt(character, subX, subY);\n    }\n    \n    return color;\n}\n\n// MILLITEXT METHODS END\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Standard Millitext\n    vec3 color = displayFloat( vec2(10.0,10.0), fragCoord, iTime, 1, 6, 4 );   // iTime\n    color += displayFloat( vec2(10.0,20.0), fragCoord, -123456.7890, 1, 6, 4 ); // 123456.7890\n    \n    vec2 scaledCoord = fragCoord / 8.0;\n    \n    // Magnified Text (by spalmer)\n    color += displayFloat( vec2(1.0,15.0), scaledCoord, -123456.7890, 1, 6, 4 ).rgb;\n    color += displayFloat( vec2(1.0, 8.0), scaledCoord, iTime, 1, 6, 4 ).rgb;\n     \n    color += displayFloat( vec2(27.0,15.0), scaledCoord, -123456.7890, 1, 6, 4 )[int(scaledCoord * 3.) % 3];\n    color += displayFloat( vec2(27.0, 8.0), scaledCoord, iTime, 1, 6, 4 )[int(scaledCoord * 3.) % 3];\n\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}