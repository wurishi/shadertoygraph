{"ver":"0.1","info":{"id":"WtV3Dd","date":"1580211298","viewed":173,"name":"Trippy Visualizer","username":"MinimilisticBits","description":"My first attempt at making an audio visualizer.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["audio","trippy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//const float pi = 3.14159265358979323846264338327950288419716939937510; //just pi\nconst float ni = 3.0778979877877658472;\n\n/*vec2 rot(vec2 a, float c){\nfloat g = c*pi/180.0;\nvec2 b = vec2(cos(g),sin(g));        \nreturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}*/\n\nvec2 rot(vec2 a, float c){ //mine\n//acos 1 to -1 = 0 to pi\nfloat p = length(a);\na = normalize(a);\nfloat ang_x = atan(a.y,a.x);\nang_x +=  c*ni/180.0;\nreturn vec2(p*cos(ang_x), p*sin(ang_x));    \n}\n\n\nfloat box(vec3 p, vec3 s){//mine\nvec3 a = abs(p)-s;\nreturn max(max(a.x, a.y),a.z);\n}\n\n/*\nvec3 r(vec3 p, vec3 c){//not originally thought by me\nreturn mod(p,c)-0.5*c; \n}\n*/\n\nvec3 r(vec3 p, vec3 c){ \nreturn ((p/c - floor(p/c))*c)-0.5*c;\n}\n\n\nfloat dis(vec3 p){ \nreturn min(length(mod(p,8.0)-4.0)-1.3,\n          box(r(vec3(0.0, -4.0, 0.0)-p, vec3(20.0,20.0,3.0)), vec3(40.0,0.5,0.5))\n          );\n}\n\nbool trac(out vec3 p, vec3 d, out float dd){\n    for(int i = 0; i < 40; i++){\n        dd = dis(p);\n        if(dd < 0.01){return true;}\n        p+=d*dd;\n    }\n    return false;\n}\n\n/*\nvec3 norm(vec3 p){//not originally by me\nvec2 k = vec2(0.1,0.0);\nreturn normalize(\nvec3(\ndis(p+k.xyy)-dis(p-k.xyy),\ndis(p+k.yxy)-dis(p-k.yxy),\ndis(p+k.yyx)-dis(p-k.yyx)\n));\n}\n*/\n\nvec3 norm(vec3 p, float dist){ \n    return normalize(vec3(dist-dis(vec3(p.x-0.1,p.yz)),dist-dis(vec3(p.x,p.y-0.1,p.z)),\n                          dist-dis(vec3(p.xy,p.z-0.1))));\n}\n\n\n\nvec3 shadow(vec3 p, vec3 lig){\n    vec3 d = normalize(lig - p);\n    float dist,lgg;\n    for(int i = 0; i < 40; i++){\n     lgg = length(lig-p)-1.3;\n     dist = min(lgg, dis(p));\n     if(dist < 0.01)break;  \n     p+=d*dist;    \n    } \n    if(dist < 0.01 && dist == lgg){\n    return vec3(1.0);\n    }\n    \n    vec3 n = norm(p,dist);\n    float ang = 1.0-dot(-d,n);\n    vec3 c = vec3((cos(iTime-ang*2.0)+1.0)*0.5, (sin(iTime+ang*12.0)+1.0)*0.5, 0.5);\n    return c*ang;\n}\n\nvec3 volumetrics(vec3 prevp, vec3 p, vec3 lig){\n    const int iter = 7;\n    vec3 dp = (p-prevp)/float(iter);\n    \n    vec3 vcol;\n    \n    for(int i = 0; i < iter; i++){\n    vcol += shadow(prevp+dp*float(i+1), lig);\n    }\n    \n    return vcol/float(iter);\n}\n\nfloat rough(float a, float c){\nreturn exp(-pow(12.0*(1.0-a)*(c-1.0) - a ,2.0))/(ni*a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sp = texture(iChannel0, vec2(0.0 / 512.0, 0.0)).x;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    uv *= vec2(2.0+sp*2.0);\n    \n    vec3 d = normalize(vec3(uv.x, 1.0, uv.y));\n    vec2 mouse = iMouse.xy / iResolution.xy;\n    mouse = mouse * 2.0 - 1.0;\n    \n    d = abs(-vec3(rot(d.xz, iTime*6.0),d.y));\n    d.yz = rot(d.yz, cos(iTime*0.4 - sp*1.6)*90.0);\n    d.xy = rot(d.xy, sin(iTime*0.2 + sp*1.3)*180.0);\n    vec3 p = vec3(0.0);\n    vec3 prevp = p;\n    vec3 col = vec3(0.0);\n    vec3 lig = vec3(sin(iTime)*5.0,10.0,2.0+cos(iTime)*6.0);\n    float dd;\n    if(trac(p,d,dd)){\n        vec3 n = norm(p,dd);\n        vec3 light = normalize(lig-p);\n        \n        col = vec3(0.6)*max(dot(n,light),0.1);\n        col+= rough(0.4, dot(reflect(d,n),light));\n        col*=shadow(p-d*0.1, lig);\n    }\n    \n    col += volumetrics(prevp,p, lig)*0.7;\n    //col = mix(volumetrics(prevp,p, lig), col, 0.5);\n    \n    float dist = abs(length(vec2(0.5) - fragCoord/iResolution.xy));\n    col-= dist*dist*0.6;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}