{"ver":"0.1","info":{"id":"NltXR7","date":"1638876800","viewed":305,"name":"Snowflake Generation 4","username":"soudfv","description":"Snowflake Generation 4 (more physically correct)\nFrom:\nA local cellular model for snow crystal growth\nClifford A. Reiter*\nDepartment of Mathematics, Lafayette College, Easton, PA 18042, USA\nAccepted 8 June 2004","likes":26,"published":1,"flags":32,"usePreview":0,"tags":["simulation","automata","cellular","snowflake","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// iq's palette\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n//#define PAL vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25)\n//#define PAL vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20)\n//#define PAL vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30)\n//#define PAL vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20)\n#define PAL vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20)\n//#define PAL vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = vec3(clamp(texture(iChannel0, uv).x,0.,1.));\n    if (usePalette) {\n        col = pal(col.x*.7+.2, PAL);\n    }\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define T(uv) texture(iChannel1, fract((uv)/iResolution.xy)).x\n\n#define PI 3.141592653589793238462643383\n\nconst float an = 60.;\nconst vec2 dir0 = vec2(cos(an * PI/180.), sin(an * PI/180.));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec2 tuv0 = fragCoord;\n    vec2 ratio = vec2(1.,iResolution.y/iResolution.x);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec2 uv = (uv0 - vec2(.5)) * ratio;\n    vec3 col;\n\n    vec2 step0 = 0.5/iResolution.xy;\n    vec2 mc = abs(uv0-mouse)*ratio;\n    float ptSize = length(step0);\n\n    if (iFrame == 0) {\n        col = length(uv) < ptSize ? vec3(1.) : vec3(beta);\n    }\n    else if (iMouse.z > 0. && dot(mc, dir0) < 0.2 && dot(mc, vec2(1.0,0.)) < 0.2) {\n        col = length(mc) < ptSize ? vec3(1.) : vec3(beta);\n    }\n    else {\n        if (iFrame == 20 && distance(uv, vec2(.4,.28)) < ptSize ||\n            iFrame == 40 && distance(uv, vec2(-.4,.28)) < ptSize)\n        {\n            col = vec3(1.);\n        }\n        else {\n            vec2 step1 = vec2(2.0);\n            vec2 step2 = vertical ? vec2(0., step1.y) : vec2(step1.x, 0.);\n            vec2 dir = vertical ? vec2(2.,1.) : vec2(1.,2.);\n\n            float ul = T(tuv0 - dir);\n            float ur = T(tuv0 + vec2(dir.x, -dir.y));\n            float dr = T(tuv0 + dir);\n            float dl = T(tuv0 + vec2(-dir.x, dir.y));\n            float  r = T(tuv0 + step2);\n            float  l = T(tuv0 - step2);\n\n            float u = texture(iChannel0, uv0).x;\n            float u_th = texture(iChannel1, uv0).x;\n            float u2 = u_th == 0. ? u + gamma : 0.;\n            float sum = ul + ur + r + dr + dl + l;\n            float u1 = u_th + alpha*(-6.*u_th+sum)/12. + u2;\n            col = vec3(u1);\n        }\n    }\n    fragColor = vec4(col,1.);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define T(uv) texture(iChannel0, fract((uv)/iResolution.xy)).x\n\nconst float th0 = 0.5;\n\n// Hash without sine by Dave_Hoskins\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec2 tuv0 = fragCoord;\n    vec3 col;\n\n    col = vec3(0.0);\n    vec2 step1 = vec2(2.0);\n    vec2 step2 = vertical ? vec2(0., step1.y) : vec2(step1.x, 0.);\n    vec2 dir = vertical ? vec2(2.,1.) : vec2(1.,2.);\n\n    float ul = T(tuv0 - dir);\n    float ur = T(tuv0 + vec2(dir.x, -dir.y));\n    float dr = T(tuv0 + dir);\n    float dl = T(tuv0 + vec2(-dir.x, dir.y));\n    float  r = T(tuv0 + step2);\n    float  l = T(tuv0 - step2);\n\n    float u = texture(iChannel0, uv0).x;\n    float th = th0;\n    if (randomize) th += -.05 + hash11(iTime) * 0.1;\n    bool ulb = ul > th;\n    bool urb = ur > th;\n    bool  lb =  l > th;\n    bool dlb = dl > th;\n    bool drb = dr > th;\n    bool  rb =  r > th;\n    int b = int(ulb) + int(urb) + int(lb) + int(dlb) + int(drb) + int(rb);\n    if (u > th || b > 0) u = 0.;\n    col = vec3(u);\n\n    fragColor = vec4(col,1.);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const bool usePalette = true;\nconst bool vertical = false;\n\n#define STYLE 3\n\n#if STYLE == 0\n    const float alpha = 0.5;    // laplacian feedback coefficient\n    const float gamma = 0.0005; // additive component\n    const float beta = 0.3;     // initial surrounding temperature\n    const bool randomize = true;\n#elif STYLE == 1\n    const float alpha = 1.0;    // laplacian feedback coefficient\n    const float gamma = 0.005; // additive component\n    const float beta = 0.45;     // initial surrounding temperature\n    const bool randomize = false;\n#elif STYLE == 2\n    const float alpha = 2.54;    // laplacian feedback coefficient\n    const float gamma = 0.0005; // additive component\n    const float beta = 0.15;     // initial surrounding temperature\n    const bool randomize = false;\n#else\n    const float alpha = 2.54;    // laplacian feedback coefficient\n    const float gamma = 0.0005; // additive component\n    const float beta = 0.25;     // initial surrounding temperature\n    const bool randomize = true;\n#endif\n","name":"Common","description":"","type":"common"}]}