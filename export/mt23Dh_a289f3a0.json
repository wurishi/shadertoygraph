{"ver":"0.1","info":{"id":"mt23Dh","date":"1673267849","viewed":110,"name":"Sky fbm","username":"Elise","description":"Sky shader using fractal brownian motion","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","sky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nmat2 rotate2d(float _angle){\n\n    return mat2(cos(_angle), -sin(_angle), sin(_angle), cos(_angle));\n}\n#define OCTAVES 7\nfloat fbm(in vec2 st) {\n    // Initial values\n    float value = 0.;\n    float amplitude = 0.5;\n    // float frequency = 2.;\n    vec2 shift = vec2(100.);\n    mat2 rot = mat2(cos(.5), sin(.5),\n                -sin(.5), cos(.5));\n\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        // st = rotate2d(1.)*st * 2. + shift;\n        st = rot*st * 2.4 + shift;\n\n        amplitude *= 0.520;\n    }\n    return value;\n}\nfloat fbm_wrap(in vec2 st) {\n    // Initial values\n    float value = 0.;\n    float amplitude = 0.5;\n    float frequency = 2.;\n    vec2 shift = vec2(100.);\n    mat2 rot = mat2(cos(.5), sin(0.5),\n                -sin(0.5), cos(0.50));\n\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 2.192;\n        amplitude *= 0.420;\n    }\n    return value;\n}\n\nfloat fbm_ridge(in vec2 st) {\n    // Initial values\n    float value = 0.;\n    float amplitude = .5;\n    float frequency = 2.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * abs(noise(st));\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return value;\n}\n\nfloat pattern(in vec2 p, out vec2 q, out vec2 r){\n    q.x = fbm(p + vec2(0.));\n    q.y = fbm(p + vec2(5.2,1.3));\n\n    r.x = fbm(p + 4.0*q + vec2(1.7,9.2));\n    r.y = fbm(p + 4.*q + vec2(8.3,2.8));\n\n    return fbm(p +4.0+r); \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n\n    vec3 color = vec3(0.0);\n\n\n    //\"folded\" texture\n    vec2 q = vec2(0.);\n    q.x = fbm(st+iTime*0.01);\n    q.y = fbm(st+iTime*0.01);\n\n    // preview q\n    color += vec3(q.x, 0., 0.);\n\n    vec2 r = vec2(0.);\n    r.x = fbm(st+q+iTime*0.05);\n    r.y = fbm(st+q+vec2(.4,0.7)+iTime*0.08);\n    // preview r\n    color += vec3(r.x, r.y, 0.);\n\n    float f = fbm(st+r);\n    //preview f\n    color = vec3(0.);\n    color += vec3(f,0.,0.);\n\n    color = mix(vec3(0.6, 0.5255, 0.6078),\n                vec3(0.1255, 0.4784, 0.8078),\n                clamp((f*f)*1.0,0.08,1.));\n\n    color = mix(color,\n                vec3(0.0157, 0.3294, 0.8667),\n                clamp(length(q),0.0,1.0));\n\n    color = mix(color,\n                vec3(0.9529, 0.9529, 0.9255),\n                clamp(length(r.x),0.0,1.0));\n\n    //regular color mapping\n    fragColor = vec4(color,1.);\n}","name":"Image","description":"","type":"image"}]}