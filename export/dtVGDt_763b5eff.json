{"ver":"0.1","info":{"id":"dtVGDt","date":"1684895865","viewed":62,"name":"Basic patterns 1 - sin & mod","username":"rafaelbeckel","description":"Some of the basic patterns I've got from Char Stiles:\nhttps://www.youtube.com/watch?v=0kcbWQg99TA","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sin","mod","basics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize the coordinates\n    vec2 normCoord = fragCoord/iResolution.xy;\n    \n    // Shift the origin to the center\n    vec2 uv = -1. + 2. * normCoord;\n\n    // You can accelerate or slow down time by\n    // multiplying or dividing it by a constant\n    float fast = iTime*2.;\n    float slow = iTime/4.;\n    \n    // uv.x is left to right\n    // sin is a wavy function from -1 to 1\n    // you can increase or decrese the frequency \n    // by multiplying or dividing it by a constant\n    float r = sin(slow + uv.x * 40.);\n    \n    // uv.y is top to bottom\n    // inverted time changes direction\n    float g = sin(-fast + uv.y * 20.);\n    \n    // mod is a sawtooth-shaped function.\n    // You can also play with the frequency just like above.\n    // For example: float b = mod(uv.y * 20. ,1.);\n    \n    // Dividing the coordinates by each other will \n    // create this star-like effect\n    float b = mod(uv.y/uv.x * 2. ,1.);\n\n    // Output to screen\n    fragColor = vec4(r, g, b, 1.0);\n}","name":"Image","description":"","type":"image"}]}