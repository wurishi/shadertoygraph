{"ver":"0.1","info":{"id":"lsKcDW","date":"1522216335","viewed":200,"name":"Five-fingered hand of Eris","username":"chao_mu","description":"All Hail Discordia! Practicing some basic shape drawing.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["simple","symbols","discordianism"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Produce a 1 if the provided value is <= 0, with a small transitional blur\n#define S(v) smoothstep(blur, 0., v)\n\n// Draw (return 1) a circle at the origin with the radius of r. \n#define circle(U, r) S(length(U) - r)\n\n// Draw (return 1) a crescent made from two overlapping circles.\n// The overlap is controlled by the provided offset. The two radiuses are determined by r.\n#define crescent(U, offset, r) circle(U, r) - circle( U - vec2(offset,0), r)\n\n// Draw a line segment of length and width. \n#define segment(U, len, width)  S( abs(U.x)-width ) * S( abs(U.y)-len )\n\n// Multiple the result of this function call to rotate the coordinates by the given angle.\n#define rotate(angle) mat2(cos(angle),-sin(angle), sin(angle),cos(angle));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1) so that 0,0 is the center\n    vec2 uv = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n\n    // Define a gradient to use at edges that is small relative to the size of the screen\n    // this allows to work on multiple resolutions\n    // This value is used in our macros.\n    float blur = 4./iResolution.y;\n    \n    // Bounce!\n    uv /= abs(sin(iTime * 1.5) * 1.5) + 0.5;\n    \n    // Rotate!\n    uv *= rotate(sin(iTime * 1.5));\n    \n    float mask = 0.;\n    mask += crescent(uv - vec2(.37, 0),  .18, .4);\n    mask += segment(uv, .7, .075);\n    mask += crescent(uv + vec2(.37, 0),  -.18, .4);\n    \n    mask = clamp(mask, 0., 1.);\n    \n    if (mask > 0.) {\n        fragColor = mask * texture(iChannel1, fragCoord/iResolution.xy);\n    } else {\n\t\tfragColor = texture(iChannel0, fragCoord/iResolution.xy);\n    }\n\n}","name":"Image","description":"","type":"image"}]}