{"ver":"0.1","info":{"id":"XXt3D7","date":"1716576326","viewed":8,"name":"Wavz interactive","username":"piet_inator","description":"Wavz but interactive with velocity","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["interactive","hypnosis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RING_SPEED 0.3\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 point = load(WAVE_ORIGIN_ADRESS).xy/iResolution.xy;\n    vec2 uv = fragCoord / iResolution.xy;\n    float posOffset = distance(point, uv);\n    vec3 rgb = vec3(loop(1.0,iTime + posOffset),loop(1.0,iTime + 1.0 + posOffset),loop(1.0,iTime + 2.0 + posOffset));\n    if(isring(posOffset - iTime * RING_SPEED, 0.1, interpolate(0.025, 0.05, loop(2.0, 1.0))))\n    {\n        rgb = vec3(0,0,0);\n    }\n    fragColor = vec4(rgb,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SPEED 1000\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 intfragCoord = ivec2(fragCoord);\n    if(intfragCoord == WAVE_ORIGIN_ADRESS)\n    {\n        vec2 point = load(intfragCoord).xy;\n        point += load(VELOCITY_ADRESS).xy * iTimeDelta;\n        fragColor = vec4(point,0.0,0.0);\n    }\n    if(intfragCoord == VELOCITY_ADRESS)\n    {\n        vec2 velocity = load(intfragCoord).xy;\n        vec2 way = iMouse.xy - load(WAVE_ORIGIN_ADRESS).xy;\n        velocity += normalize(way) * float(SPEED) * iTimeDelta;\n        velocity = clampLength(velocity, length(way));\n        fragColor = vec4(velocity,0.0,0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define WAVE_ORIGIN_ADRESS ivec2(0,0)\n#define VELOCITY_ADRESS ivec2(1,0)\n#define load(pixelcoord) texelFetch(iChannel0, pixelcoord, 0)\n\nfloat loop(in float speed, in float time)\n{\n     return(1.0+cos(time * speed))/2.0;\n}\nbool isring(in float radius, in float interval, in float thickness)\n{\n    return mod(radius, interval) <= thickness;\n}\nfloat interpolate(float a, float b, float t)\n{\n    return a + (b-a) * t;\n}\nvec2 clampLength(vec2 vec, float max_length)\n{\n    if(length(vec)>max_length)\n    {\n        return normalize(vec) * max_length;\n    }\n    else\n    {\n        return vec;\n    }\n}\nvec2 moveTo(vec2 a, vec2 b, float speed)\n{\n    vec2 way = b - a;\n    return a + clampLength(way, speed);\n}","name":"Common","description":"","type":"common"}]}