{"ver":"0.1","info":{"id":"DsVBWV","date":"1698679325","viewed":70,"name":"An example of complex topology","username":"TheoWU","description":"Complex topology in an animation using implicit function of turos","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nvec4 sdgTorus( vec3 p, float ra, float rb )\n{\n    float h = length(p.xz);\n    return vec4( length(vec2(h-ra,p.y))-rb,\n                 normalize(p*vec3(h-ra,h,h-ra)) );\n}\n\nfloat map(vec3 p, float ra, float rb )\n{\n\tfloat d = 2.0;\n\tfor (int i = 0; i < 8; i++) {\n        float fi = float(i);\n\t\tfloat time = iTime * (fract(fi * 412.531 + 0.513) - 0.5) * 2.0;\n\t\td = opSmoothUnion(sdgTorus(p+sin(time + fi * vec3(52.5126, 64.62744, 632.25)) * vec3(0.5,0.5,0.5),ra,rb).x,d,0.2);\n\t}\n\treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera movement\t\n\tfloat an = 0.5*(iTime-10.0);\n\tvec3 ro = 1.0*vec3( 1.0*cos(an), 1.5, 1.0*sin(an) );\n    vec3 ta = vec3( 0.0, -0.15, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n   \n    // animate torus\n    float ra = 0.3;\n    float rb = 0.1;\n    \n    // render    \n    vec2 p = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n\n    // create view ray\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    // raymarch\n    const float tmax = 5.0;\n    float t = 0.0;\n    for( int i=0; i<256; i++ )\n    {\n        vec3 pos = ro + t*rd;\n        //float h = sdgTorus(pos,ra,rb).x;\n        float h = map(pos,ra,rb);\n        if( h<0.0001 || t>tmax ) break;\n        t += h;\n    }\n\n    // shading/lighting\t\n    vec3 col = vec3(0.0);\n    if( t<tmax )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = sdgTorus(pos,ra,rb).yzw;\n\n        float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n        float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n        col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n\n    }\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}