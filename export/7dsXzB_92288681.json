{"ver":"0.1","info":{"id":"7dsXzB","date":"1618832812","viewed":226,"name":"Okayish Worley Clouds","username":"Zerofile","description":"It's pretty okay","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INVERSE_CLOUD_SIZE 0.5\n#define CLOUD_FALLOFF      0.15\n\n/*\nThis is rendering 6 overlapped 3D Worley Maps\n\nBy: Sir Bird / Zerofile\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    col = pow(col,vec3(INVERSE_CLOUD_SIZE))*(col*col*col+col*col);\n    col -= CLOUD_FALLOFF;\n    col = max(col,vec3(0.));\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 hash33(ivec3 p3)\n{   // HASH FUNCTION CREDIT: Dave_Hoskins\n    vec3 vp3 = vec3(p3);\n\tvp3 = fract(vp3 * vec3(.1031, .1030, .0973));\n    vp3 += dot(vp3, vp3.yxz+33.33);\n    return fract((vp3.xxy + vp3.yxx)*vp3.zyx);\n\n}\n\nfloat worleyNoise (vec3 uv) {\n\n    ivec3 pixelCoord = ivec3(uv);\n    vec3 local = fract(uv);\n    \n    float minLen = 3.;\n    \n    for (int x = -1; x <= 1; x++) {\n        vec3 relativeDistance;\n        relativeDistance = hash33(pixelCoord+ivec3(x,-1,-1))+vec3(x,-1.,-1.)-local;\n        float a = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,-1,0))+vec3(x,-1.,0.)-local;\n        float b = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,-1,1))+vec3(x,-1.,1.)-local;\n        float c = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,0,-1))+vec3(x,0.,-1.)-local;\n        float a2 = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,0,0))+vec3(x,0.,0.)-local;\n        float b2 = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,0,1))+vec3(x,0.,1.)-local;\n        float c2 = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,1,-1))+vec3(x,1.,-1.)-local;\n        float a3 = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,1,0))+vec3(x,1.,0.)-local;\n        float b3 = dot(relativeDistance,relativeDistance);\n        relativeDistance = hash33(pixelCoord+ivec3(x,1,1))+vec3(x,1.,1.)-local;\n        float c3 = dot(relativeDistance,relativeDistance);\n        minLen = min(min(min(min(min(a,b),min(c,a2)),min(min(b2,c2),min(a3,b3))),c3),minLen);\n        \n    }\n    return sqrt(minLen);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col;\n    col = mix(col,1.-vec3(worleyNoise(vec3(uv*5.,iTime/6.))),1.);\n    col = mix(col,1.-vec3(worleyNoise(vec3(7.)+vec3(uv*7.,iTime/5.))),0.4);\n    col = mix(col,1.-vec3(worleyNoise(vec3(uv*10.,iTime/2.))),0.3);\n    col = mix(col,1.-vec3(worleyNoise(vec3(uv*20.,iTime))),0.1);\n    col = mix(col,1.-vec3(worleyNoise(vec3(uv*30.,iTime))),0.08);\n    col = mix(col,1.-vec3(worleyNoise(vec3(uv*50.,iTime))),0.05);\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}