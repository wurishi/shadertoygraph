{"ver":"0.1","info":{"id":"fsjXzz","date":"1619566027","viewed":157,"name":"Spinning Crosses","username":"reaxt","description":"mess with some of them floats!\nAnother daily, this time using spiiin and also LOTS OF PROBLEMS lmao.\nBit of a mess, honestly, but I know how to avoid that mess next time now.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beginner","learning","mosaic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float tangentLine(float angleR, float ratiodX, float perUV, float radius) {\n return (tan(angleR)) * ((ratiodX-(perUV/2.))-radius*sin(angleR))-radius*cos(angleR);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//MESS WITH THESE NUMBERS!! :D\n    vec4 image;\n    float perUV = 0.023;\n    float borderAmount = 0.;\n    float width = 0.45;\n    float radius = 0.16;\n    float angle = iTime*90.;\n    //--------\n// Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ratio = iResolution.x/iResolution.y;\n    float currentSpotY = mod(uv.y, perUV);\n    float currentSpotX = mod(uv.x, perUV/ratio);\n    vec2 currentSpot = vec2(currentSpotX, currentSpotY);\n    currentSpot = uv-currentSpot;\n    vec4 averageCol = vec4(0.,0.,0.,0.);\n    vec3 xPixels = iResolution * perUV;\n    //get the average\n    //TODO:\n    averageCol = texture(iChannel0, uv);\n    \n    float borderBoundY = (perUV * borderAmount);\n    float borderBoundX = (perUV * borderAmount);\n    //make cross\n    float angleR = radians(mod(angle,269.-90.)+90.);\n    float angleRInv = radians(mod(angle+90.,269.-90.)+90.);\n    if((currentSpotY > (borderBoundY) && currentSpotY < perUV-(borderBoundY)) && ((currentSpotX > borderBoundX) && (currentSpotX < perUV-borderBoundX))) {\n        radius = (radius*(perUV));\n        float radiusOfCube = perUV/1.8;\n        float inverseRadius = -radius;\n        float ratiodX = currentSpotX * ratio;\n        float circWidth = borderBoundX + ((perUV-borderBoundX)*width);\n        float yValue = ((currentSpotY)-(perUV/2.));\n        //float lineFunction = ((ratiodX-(perUV/2.))*(tan(angleR)));\n        float lineFunction = (tan(angleR)) * ((ratiodX-(perUV/2.))-radius*sin(angleR))-radius*cos(angleR);\n        float lineFunctionInv = (tan(angleR)) * ((ratiodX-(perUV/2.))-inverseRadius*sin(angleR))-inverseRadius*cos(angleR);\n        float otherLineFunction = (tan(angleRInv)) * ((ratiodX-(perUV/2.))-radius*sin(angleRInv))-radius*cos(angleRInv);\n        float otherLineFunctionInv = (tan(angleRInv)) * ((ratiodX-(perUV/2.))-inverseRadius*sin(angleRInv))-inverseRadius*cos(angleRInv);\n\n        if ((yValue < lineFunction && yValue > lineFunctionInv) ||(yValue < otherLineFunction && yValue > otherLineFunctionInv) ) {\n            //god im so fucking sorry\n            float barrier = tangentLine(angleR, ratiodX, perUV, radiusOfCube);\n            float negBarrier = tangentLine(angleR, ratiodX, perUV, -radiusOfCube);\n            float barrierInv = tangentLine(angleRInv, ratiodX, perUV, radiusOfCube);\n            float negBarrierInv = tangentLine(angleRInv, ratiodX, perUV, -radiusOfCube);\n            if((yValue <  barrier && yValue > negBarrier) && (yValue <  barrierInv && yValue > negBarrierInv)) {\n            \n            image = texture(iChannel0, currentSpot);\n            }\n        } else {\n            image = vec4(0.,0.,0.,0.);\n        }\n    }\n    \n    // Output to screen\n    fragColor = image;\n}","name":"Image","description":"","type":"image"}]}