{"ver":"0.1","info":{"id":"Dl23WG","date":"1705581027","viewed":75,"name":"3d_sdf_球体","username":"invi","description":"利用SDF和remarching技术绘制球体和打光","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TMIN 0.1\n#define TMAX 20.\n#define RAYMARCH_TIME 128   // 最大迭代次数\n#define PRECISION   0.001   // 定义精度\n#define AA 3\n#define PI 3.1415936\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\n// 定义平面\nfloat sdfPlane(in vec3 p) {\n    return p.y;\n}\n// 定义3维SDF球体\nfloat sdfSphere(in vec3 p) {\n    // 空间中的点到球体的距离就是坐标的长度减去球体的半径\n    return length(p) - 1.;\n}\n\n// 3维立方体\nfloat sdfRect(in vec3 p, in vec3 b) {\n    vec3 d = abs(p) - b;\n    return length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.);\n}\n\nfloat map(in vec3 p) {\n    float d = sdfSphere(p);\n    // float d = sdfRect(p, vec3(0.4, 1., 0.3));\n    d = min(d, sdfPlane(p + vec3(0., 1., 0.)));\n    return d;\n}\n\n// 射线源头，射线方向\nfloat rayMarch(in vec3 ro, in vec3 rd) {\n    // 走的距离t\n    float t = TMIN;\n    for (int i = 0; i < RAYMARCH_TIME && t < TMAX; i++) {\n        vec3 p = ro + t * rd;\n        // float d = sdfSphere(p);\n        float d = map(p);\n        // float d = sdfRect(p, vec3(.4, .4, .5));\n        if (d < PRECISION) {\n            break;\n        }\n        t += d;\n    }\n    return t;\n}\n\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(\n        k.xyy * map(p + k.xyy*h) +\n        k.yyx * map(p + k.yyx*h) +\n        k.yxy * map(p + k.yxy*h) +\n        k.xxx * map(p + k.xxx*h)\n    );\n}\n\n// 设置相机（target, 摄像机位置，还有θ角）\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    // 确定z轴\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    // x轴 z叉乘cp，然后正则化（归一化，单位向量）\n    vec3 x = normalize(cross(z, cp));\n    // y轴 x叉乘z\n    vec3 y = cross(x, z);\n\n    return mat3(x, y, z);\n}\n\n// 软阴影\nfloat softShadow(in vec3 ro, in vec3 rd, float k) {\n    // float res = 1.0;\n    // for (float t = TMIN; t < TMAX;) {\n    //     float h = map(ro + rd*t);\n    //     if (h < 0.001) {\n    //         return 0.0;\n    //     }\n    //     res = min(res, k*h/t);\n    //     t += h;\n    // }\n    // return res;\n\n    // 改良版本\n    float res = 1.0;\n    float ph = 1e20;\n    for (float t = TMIN; t < TMAX;) {\n        float h = map(ro + rd * t);\n        if (h < 0.001) {\n            return 0.0;\n        }\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\nvec3 render(vec2 uv) {\n    vec3 color = vec3(0.);\n    // 定义摄像机\n    vec3 ro = vec3(0., 1., -2.);\n    // vec3 ro = vec3(2. * cos(iTime), 1., 2. * sin(iTime));\n\n    if (iMouse.z > 0.01) {\n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        float thetay = iMouse.y / iResolution.y *2. *PI;\n        ro = vec3(2. * cos(theta), 2. * sin(thetay), 2. * sin(theta));\n    }\n\n    // 目标方向，朝向中心即可\n    vec3 ta = vec3(0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n\n    // 定义射线方向（从摄像机到屏幕上任意点的方向）,然后归一化（单位向量）\n    vec3 rd = normalize(cam * vec3(uv, 1.));\n\n    float t = rayMarch(ro, rd);\n\n    if (t < TMAX) {\n        // 焦点坐标（在这个例子中就是球体表面坐标\n        vec3 p = ro + t*rd;\n        // 法向量\n        vec3 n = calcNormal(p);\n        // 定义光线源\n        vec3 light = vec3(cos(iTime), 2., sin(iTime) - 2.);\n        // vec3 light = vec3(2., 3., 0.);\n        // 计算光线和法向量的夹角余弦（做点乘）\n        float dif = clamp(dot(normalize(light - p), n), 0.1, 1.);\n\n        // 添加阴影\n        p += PRECISION * n;\n        float st = softShadow(p, normalize(light - p), 10.);\n        dif *= st;\n\n        // 添加环境光\n        float amp = 0.5 + 0.3 * dot(n, vec3(0., 0., -1.));\n        color = amp * vec3(1, 0.2, 0.5) + dif * vec3(0.8);\n    }\n\n    // 伽马校正（对0-1取一个n次幂，以防环境光太低导致模型暗部过暗），这里就取1/2次幂\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++){\n        for (int n = 0; n < AA; n++){\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - 0.5);\n            vec2 uv = fixUV(fragCoord + offset);\n            color += render(uv);\n\n        }\n    }\n\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n\n// 3维的SDF绘制比2维SDF要难很多，因为涉及到很多立体操作，光线，材质等","name":"Image","description":"","type":"image"}]}