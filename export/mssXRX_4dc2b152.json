{"ver":"0.1","info":{"id":"mssXRX","date":"1669336992","viewed":207,"name":"Something breathing ðŸ”Š","username":"blurryroots","description":"Thin organic veil, covering something breathing. Focus on the flow. Breath in - hold it, breath out.","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["sound","music","audio","loop","organic","weird","breath"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n// === icon message: \"sound in\". link: https://www.shadertoy.com/view/MtyXRW\n\nfloat message(vec2 uv) { // to alter in the icon\n    uv-=vec2(1.,10.); if ((uv.x<0.)||(uv.x>=32.)||(uv.y<0.)||(uv.y>=3.)) return -1.; \n    int i=1, bit=int(pow(2.,floor(32.-uv.x)));\n    if (int(uv.y)==2) i=  928473456/bit; // 00110111 01010111 01100001 01110000\n    if (int(uv.y)==1) i=  626348112/bit; // 00100101 01010101 01010000 01010000\n    if (int(uv.y)==0) i= 1735745872/bit; // 01100111 01110101 01100001 01010000\n \treturn float(i-2*(i/2));\n}\n\n// Messed up the values for linear and sRGB by accident, left it because\n// it looked interesting :)\n\nvec3 to_linear (vec3 c) {\n    return pow (c, vec3 (0.4545)); // Wrong by design.\n}\n\n\nvec3 to_sRGB (vec3 c) {\n    return pow (c, vec3 (2.2)); // ^^\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    if (iResolution.y<2000.) {float c=message(fragCoord.xy/8.);if(c>=0.){fragColor=vec4(c);return;}}  \n\n    vec2 uv_r = (fragCoord.xy * 2.0 - iResolution.xy)\n            / min(iResolution.x, iResolution.y)\n            ;    \n    vec2 uv_n = fragCoord.xy / iResolution.xy;\n    vec2 uv = uv_n;\n    uv.x = (1.0 - sqrt (uv.y)) / 2.0;\n    \n    vec2 dpos = vec2 (0.0, 0.0);\n    float d0 = exp (distance (uv_r, dpos));\n    float dx = pcos (iTime/PI * SPEED);\n        float d = 0.9 / (9.5 - mix (1.05*PI * sqrt (d0), 1.*d0, dx));\n    \n    uv   *= d - 0.1;\n    uv.x -= 0.1 * fract (uv.y*uv.x);\n    \n    vec2 fore_uv = vec2 (uv_r.x, uv_r.y + 0.5);\n    fore_uv = mix (\n        fore_uv,\n        uv,\n        0.5 + 0.2 * texture (iChannel2, vec2 (0.22, 0.00)).x\n    );\n    vec3 foreg = texture (iChannel0, fore_uv).rrr;\n    foreg = to_linear (foreg);\n    foreg = (foreg * d);\n    foreg *= 4.0 * vec3 (0.5, 0.1, 0.4);\n    \n    float thresh = 0.4;\n    vec3 backg = texture (iChannel1, mix (uv_r, uv, 0.4)).rgb;\n    backg  = to_linear (backg);\n    backg  = desat (backg) * (1.0 * d);\n    backg  = (backg.r > thresh) ? vec3 (thresh) : backg.rrr;\n    backg *= 8.0 * vec3 (0.5, 0.1, 0.1);\n    \n    vec3 color = to_sRGB (mix (backg, foreg, 0.4));\n    \n    //color += vec3 (0.6, 0.2, 0.1) * (0.0 + d) * 1.0;\n    //color += vec3 (0.0, 0.0, 0.9) * (1.0 - d) * 0.1;\n    //color *= 0.618;\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\nconst float phi = (1. + sqrt (5.)) / 2.;\nconst float phi0 = phi - 1.;\nconst vec4 linear_space = vec4(2.2);\nconst vec4 sRGB_space = vec4(0.4545);\nconst float PI = 355./113.;\nconst float TWOPI = 2.0*PI;\nconst float SPEED = 1.5 / 1.0;\n\nfloat psin (float t) {\n    return (sin (PI*t - PI/2.) + 1.) / 2.;\n}\n\nfloat pcos (float t) {\n    return (cos (PI*t) + 1.) / 2.;\n}\n\nvec3 desat (vec3 c) {\n    return vec3(0.299*c.r + 0.587*c.g + 0.114*c.b);\n}\n\nvec4 desat (vec4 c) {\n    vec4 d = vec4(0.299*c.r + 0.587*c.g + 0.114*c.b);\n    d.a = 1.0;\n    return d;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"// Shadertoy Educational License\n// You cannot host, display, distribute or share this Work in any form,\n// including physical and digital. You cannot use this Work in any\n// commercial or non-commercial product, website or project. You cannot\n// sell this Work and you cannot mint an NFTs of it.\n// I share this Work for educational purposes, and you can link to it,\n// through an URL, proper attribution and unmodified screenshot, as part\n// of your educational material. If these conditions are too restrictive\n// please contact me and we'll definitely work it out.\n// You are free however, to incorporate this work within the Shadertoy\n// ecosystem, e.g. by forking.\n// This work may incorporate other permissivly shared, educational work,\n// which is attributed appropriatly. Please do so as well.\n// Thanks to https://www.shadertoy.com/user/iq for inspiring this license.\n\n// Inspired by https://www.shadertoy.com/view/MslfW7\nfloat rand (vec2 co) {\n    const vec2 vv = vec2 (12.9898, 78.233);\n    const float sv = 43758.5453;\n    float dv = dot (co.xy, vv);\n    \n    return fract (sin (dv) * sv);\n}\n\n// Inspired by https://www.shadertoy.com/view/MslfW7\nfloat octaves (vec2 p, float k) {\n    float a = 0.04;\n    float b = a / 0.97;\n    float c = b / 3.0;\n    float d = c / 1.5;\n    float abcd = (a + b + c + d);\n    \n    float value = 0.0;\n    value += a * rand(p * k); p *= 1.61;\n    value += b * rand(p * k); p *= 1.14;\n    value += c * rand(p * k); p *= 1.01;\n    value += d * rand(p * k); p *= 1.09;\n    // value /= (a + b + c + d);\n    \n    return value;\n}\n\nvec2 mainSound( int samp, float time ) {\n    float volume = phi; //phi0 / 1.0;\n    float base = 440.0;\n    float periode = TWOPI;\n    \n    float rs1 = periode * base / phi * (time);\n    float bs = sin (rs1);\n    float ts = (1.0 - pcos (time * SPEED * 1.0));\n    float s1 = bs * ts;\n    \n    float bs2 = cos (periode * base / PI * (time) + PI/4.0);\n    float ts2 = (1.0 - pcos (time * SPEED * 1.0));\n    float s2 = bs2 * ts2;\n    \n    float tr = time;\n    float t = tr * SPEED;\n    float noise = octaves(200.*vec2(cos (t)), -4.0);\n    \n    float s = mix (sin (t) * noise\n        , mix (s1, s2, 0.5)\n        , 0.16\n    );\n    vec2 signal = 0.0\n        + vec2 (s)\n        ;\n    return volume * signal;\n\n}","name":"Sound","description":"","type":"sound"}]}