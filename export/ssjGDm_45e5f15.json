{"ver":"0.1","info":{"id":"ssjGDm","date":"1617535616","viewed":75,"name":"Yet Another Sphere","username":"Iranon","description":"A simple shaded sphere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ray","sphere","camera","origin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Blending function\nfloat blend(float a, float b, float fac) {\n    return ((1.0 - fac)*a + b*fac);\n}\n\n//Sphere function\nvec4 sphere(vec3 center, float radius, vec3 rayOrigin, vec3 rayDirection) {\n    float t = dot(center - rayOrigin, rayDirection); //parameter (belong to the line)\n    vec3 point = rayOrigin + (rayDirection * t); //point on the line\n    //Value used to calculate intersections t1 and t2 (Pitagora)\n    float y = length(center - point);\n    if (y < radius) {\n        float x = sqrt(radius*radius - y*y);\n        float t1 = t - x;\n        float t2 = t + x;\n        \n        float grad = blend(center.z, center.z-radius, t1);\n        vec3 colorGrad = vec3(grad*0.9, grad*0.9, grad*0.8);\n        return vec4( colorGrad, 1.0 );\n    }\n    \n    return vec4(vec3(0.0), 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    //Center UVs\n    vec2 uv = ( fragCoord - (0.5*iResolution.xy) ) / iResolution.y;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    //Ray Origin and Direction (camera system)\n    vec3 ro = vec3(0.0);\n    vec3 rd = normalize( vec3(uv.x, uv.y, 1.0) );\n    \n    //Sphere Center and Radius\n    vec3 sc = vec3(uv.x, uv.y, 4.2);\n    float sr = 1.0;\n    \n    vec4 col = sphere(sc, sr, ro, rd);\n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}