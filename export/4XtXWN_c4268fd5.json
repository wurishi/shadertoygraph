{"ver":"0.1","info":{"id":"4XtXWN","date":"1719054573","viewed":51,"name":"Volcano obj","username":"Kenzodabarra","description":"on objkt.com\na 3-layered lava","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["volcano"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Volcano\n// 06-22-2024\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\nfloat iCamera = 0.9;\n\n#define MAX_STEPS 5\n#define MAX_DISTANCE 10000.0\n#define MIN_DIST 0.1\n#define ab 16\n\nvec3 mB(vec3 z, float scale, float minRadius) {\n    float r = length(z);\n    z = clamp(z * scale, -1.0, 1.0) * 1.0 - z;\n    if (r < minRadius) {\n        z = z * minRadius / r;\n    }\n    return z;\n}\n\nfloat scene(vec3 pos) {\n    vec3 z = pos;\n    float dr = 1.0;\n    float r = 0.0;\n    float scale = 9.0;\n    for (int i = 0; i < ab; i++) {\n        z = abs(z) / dot(z, z) - vec3(0.25, 0.2, 0.1);\n        r = length(z);\n        if (r > dr) {\n            dr = r;\n        }\n        z *= scale;\n    }\n    return 0.5 * log(r) * r / dr;\n}\n\nvec3 normal(vec3 pos) {\n    vec3 eps = vec3(0.1, 0.0, 0.0);\n    return normalize(vec3(\n        scene(pos + eps.xyy) - scene(pos - eps.xyy),\n        scene(pos + eps.yxy) - scene(pos - eps.yxy),\n        scene(pos + eps.yyx) - scene(pos - eps.yyx)\n    ));\n}\n\nvec3 lighting(vec3 eye, vec3 rayDir, vec3 materialColor) {\n    vec3 lightPos = vec3(3.0, 3.0, -3.0);\n    vec3 lightColor = vec3(1.0, 1.0, 1.0);\n    vec3 ambientColor = vec3(0.2, 0.1, 0.1);\n    vec3 normalDir = normal(eye);\n    vec3 lightDir = normalize(lightPos - eye);\n    float diffuse = max(dot(normalDir, lightDir), 0.0);\n    vec3 reflectionDir = reflect(-lightDir, normalDir);\n    vec3 viewDir = normalize(-eye);\n    float specular = pow(max(dot(reflectionDir, viewDir), 0.0), 7.0);\n    return ambientColor + materialColor * lightColor * diffuse + vec3(specular);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    float layer1 = 0.01;\n    float layer2 = 0.05;\n    float layer3 = 0.08;\n    vec3 cameraPos = vec3(0.0, 0.0, 0.0) - vec3(cos(iTime * 0.02), sin(iTime * 0.01), 0.0);\n    vec3 rayDir = normalize(vec3(uv, iCamera));\n    vec3 eye1 = cameraPos + rayDir * layer1;\n    vec3 eye2 = cameraPos + rayDir * layer2;\n    vec3 eye3 = cameraPos + rayDir * layer3;\n    float depth1 = scene(eye1);\n    float depth2 = scene(eye2);\n    float depth3 = scene(eye3);\n    vec3 color1 = vec3(7.8, 0.3, 0.2) + vec3(0.1 * cos(iTime * 0.1), 0.05 * sin(iTime * 0.1), 0.0);\n    vec3 color2 = vec3(0.2, 0.6, 0.8) + vec3(0.05 * cos(iTime * 0.1), 0.1 * sin(iTime * 0.1), 0.0);\n    vec3 color3 = vec3(7.4, 0.9, 0.3) + vec3(0.075 * cos(iTime * 0.1), 0.075 * sin(iTime * 0.1), 0.0);\n    vec3 finalColor1 = lighting(eye1, rayDir, color1);\n    vec3 finalColor2 = lighting(eye2, rayDir, color2);\n    vec3 finalColor3 = lighting(eye3, rayDir, color3);\n    vec3 finalColor = mix(mix(finalColor1, finalColor2, 0.5), finalColor3, 0.5);\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}