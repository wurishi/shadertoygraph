{"ver":"0.1","info":{"id":"4ltyWs","date":"1551631851","viewed":257,"name":"Sphere phong shading","username":"Bridgy","description":"phong shading","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rotateInX(in vec3 vector, float angle)\n{\n    vec3 newVec = vec3(0.0);\n    \n    newVec.x = vector.x;\n    newVec.y = (cos(angle) * vector.y) + (-sin(angle) * vector.z);\n    newVec.z = (sin(angle) * vector.y) + (cos(angle) * vector.z);\n    \n\treturn newVec;\n}\n\nvec3 rotateInY(in vec3 vector, float angle)\n{\n    vec3 newVec = vec3(0.0);\n    \n    newVec.x = (cos(angle) * vector.x) + (sin(angle) * vector.z);\n    newVec.y = vector.y;\n    newVec.z = (-sin(angle) * vector.x) + (cos(angle) * vector.z);\n        \n\treturn newVec;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    float aspectRatio = iResolution.x / iResolution.y;\n    \n    float radius = 0.3;\n    vec2 center = vec2(0.5, 0.5);\n    \n    uv.x *= aspectRatio;\n    center.x *= aspectRatio;\n    \n    float dist = length(uv - center);\n    \n    vec3 color = vec3(0.0);\n    \n    if(dist < radius)\n    {\n        //90 degrees in radians\n        float rightAngle = (3.141592 / 2.0);\n        \n        //Draw circle\n    \tcolor = vec3(1.0,0.0,0.0);\n        \n        vec3 norm = vec3(0.0, 0.0, 1.0);\n        \n        //Recalculate normal\n        //rotate in x\n        float x = (uv.y - center.y) / radius;\n        float xAngle = rightAngle * x;\n        \n        norm = rotateInX(norm, xAngle);\n        \n        \n        //rotate in y\n        float y = (uv.x - center.x) / radius;\n        float yAngle = rightAngle * y;\n        \n        norm = rotateInY(norm, yAngle);\n        norm = normalize(norm);\n        \n        vec3 lightDirection = vec3(1.0, -1.0, 0.0);\n        vec3 lightColor = vec3(0.6, 0.6, 0.6);\n        \n        \n        //\n        //Rotate light vector over time around y axis\n        //\n        \n        float angle = iTime;    \n        lightDirection = rotateInY(lightDirection, angle);\n        \n        lightDirection = normalize(lightDirection);\n        \n        //ambient\n        vec3 ambient = color * 0.1;\n\n        //diffuse\n        vec3 diffuse = max(dot(lightDirection, norm),0.0) * (color * lightColor);\n\n        //specular\n        vec3 eyePos = vec3(0.0,0.0,-1.0);\n        vec3 point = vec3(0.0, 0.0, 0.0) + 5.0 * norm;\n        \n        vec3 toEye = normalize(eyePos - point);\n        vec3 reflectLight = normalize(reflect(lightDirection, norm));\n        float specPower = 30.0;\n        vec3 specMaterial = vec3(1.0, 1.0, 0.75);\n\n        vec3 specColor = lightColor * specMaterial * pow(max(dot(toEye, reflectLight), 0.0), specPower);\n        \n        color = ambient + diffuse + specColor;\n    }\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}