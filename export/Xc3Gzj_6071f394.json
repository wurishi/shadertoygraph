{"ver":"0.1","info":{"id":"Xc3Gzj","date":"1711879930","viewed":36,"name":"Revision Logo 2","username":"seniltai","description":"based on iQ's rotating structures but with a custom distance field","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["revision"],"hasliked":0,"parentid":"lly3WK","parentname":"Split Poly-shader"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iChannelResolution[0].xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Created by inigo quilez - iq/2015\n// Modified by sen\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n// set AA to 1 if you have a slow machine\n\n#define AA 1\n\nmat2 rotationMatrix(float angle)\n{\n\t//angle *= 3.14159 / 180.0;\n    float sine = sin(angle), cosine = cos(angle);\n    return mat2( cosine, -sine,\n                 sine,    cosine );\n}\n\nfloat sdRing( in vec2 p, in vec2 n, in float r, in float th )\n{\n    p.x = abs(p.x);\n\n    p = mat2(n.x,n.y,-n.y,n.x)*p;\n\n    return max( abs(length(p)-r)-th*0.5,\n                length(vec2(p.x,max(0.0,abs(r-p.y)-th*0.5)))*sign(p.x) );\n}\n\nfloat sdRingFull( in vec2 p, in vec2 n, in float r, in float th )\n{\n    p.x = abs(p.x);\n\n    p = mat2(n.x,n.y,-n.y,n.x)*p;\n\n    return abs(length(p)-r)-th*0.5;\n}\n\n\nconst float rd = 0.3;\nconst float th = rd;\n\nfloat ring(vec2 p, float i, float angStart, float angEnd)\n{\n    float ra = i * rd;\n    if(angEnd == -100.0)\n    {\n        vec2 cs = vec2(1.0,0.0);\n        return sdRingFull(p, cs, ra, th);\n    }\n\n    float t = mod(iTime, 10000.0);\n\n    angStart += 3.1415f * 1.5f + t * i * .1;\n    angEnd += 3.1415f * 1.5f + t * i * .1;\n\n    if(angEnd < angStart)\n        angEnd = angEnd + 2.0f * 3.14159f;\n\n    float dt = abs(angEnd - angStart);\n\n    if(dt > 2.0f * 3.14159f)\n        dt -= 2.0f * 3.14159f;\n\n    float angStartCompensated = angStart + (dt / 2.0);\n    mat2 m = rotationMatrix(angStartCompensated);\n    p = p*m;\n\n    vec2 cs = vec2(cos(dt * .5),sin(dt * .5));\n    return sdRing(p, cs, ra, th);\n}\n\nfloat logo(vec2 p) {\n\n    // distance\n    float d = 10000000000.0f;\n\n    // 1\n    d = min(d, ring(p, 1.0, 0.0f, -100.0f));\n\n    // 2\n    d = min(d, ring(p, 2.0, -1.45, -0.32));\n\n    // 3\n    d = min(d, ring(p, 3.0, 0.1, 0.35));\n    d = min(d, ring(p, 3.0, 1.7, 2.3));\n    d = min(d, ring(p, 3.0, -2.6, -1.9));\n\n    // 4\n    d = min(d, ring(p, 4.0, -0.2, 0.75));\n    d = min(d, ring(p, 4.0, 1.0, 2.70));\n    d = min(d, ring(p, 4.0, 2.95, -1.65));\n\n    // 5\n    d = min(d, ring(p, 5.0, 0.0f, -100.0f));\n\n    // 6 empty ring\n\n    // 7\n    d = min(d, ring(p, 7.0, -2.87, -2.6));\n    d = min(d, ring(p, 7.0, -2.37, -2.17));\n    d = min(d, ring(p, 7.0, -1.75, -1.2));\n    d = min(d, ring(p, 7.0, -0.75, 0.23));\n    d = min(d, ring(p, 7.0, .95, 1.35));\n    d = min(d, ring(p, 7.0, 1.65, 1.85));\n    //d = min(d, ring(p, 7.0, 2.95, -1.65));\n\n    // 8\n    d = min(d, ring(p, 8.0, 0.0f, -100.0f));\n\n    // 9\n    d = min(d, ring(p, 9.0, 2.16, 3.11));\n    d = min(d, ring(p, 9.0, .7 + 3.14159*1.5, .85+ 3.14159*1.5));\n\n    return d;\n}\n\n//-------------------------------------------------\n\nfloat opExtrusion( in vec3 p, in float sdf, in float h )\n{\n    vec2 w = vec2( sdf, abs(p.z) - h );\n  \treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\n\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nvec3 deform( in vec3 p, in float time, out float sca )\n{\n    float s = 0.2*sqrt(dot(p*p,p*p));\n    //float s = 1.0;\n\n    p = p/s;\n\n    p.xyz += 4.0*sin(0.5*vec3(1.0,1.1,1.3)*time+vec3(0.0,2.0,4.0));\n    \n    sca = s;\n    \n\treturn p;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat udTriangle( vec3 p, vec3 a, vec3 b, vec3 c )\n{\n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nor = cross( ba, ac );\n\n    return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\nfloat shape( vec3 p )\n{\n\n\n    \n    float scl = 0.1*sin(iTime*3.0) * cos(iTime*2.0);\n    p *= 0.8;\n    vec3 q = mod( p+1.0, 2.0 ) -1.0;\n    \n    {\n    float s = 3.5;\n    float d = opExtrusion( q.yxz, logo( q.yx * s ), 0.1 ) / (s/2.0);\n    return d;\n    }\n    \n    //vec3 q = p;\n        \n    float d1 = sdTorus(q+vec3(0.0,0.5,0.0), vec2(0.3 + cos(iTime*5.0) * 0.06, 0.03));\n    float l=0.6+scl;\n    float h=0.7;\n    float d2 = udTriangle(q, vec3(l, h, 0.0), vec3(-l, h+0.1, 0.0), vec3(0.0, -h, 0.0))-0.01;\n    float i=0.05+scl;\n    float io=0.1;\n    float d3 = udTriangle(q, vec3(i+io, h+0.1, 0.0), vec3(-i+io, h+0.1, 0.0), vec3(0.0, -h, 0.0))-0.03;\n\treturn min(d1, max(d2,-d3));\n}\n\n\n/*float shape( vec3 p )\n{\n    vec3 q = mod( p+1.0, 2.0 ) -1.0;\n\n    float d1 = udRoundBox(q,vec3(0.10,0.02,1.00),0.02);\n    float d2 = udRoundBox(q,vec3(0.02,1.00,0.10),0.02);\n    float d3 = udRoundBox(q,vec3(1.00,0.10,0.02),0.02);\n    float d4 = udRoundBox(q,vec3(0.30,0.30,0.30),0.02);\n\n    return min( min(d1,d2), min(d3,d4) );\n}*/\n\n\nfloat map( vec3 p, float t )\n{\n    float s = 1.0;\n    p = deform( p, t, s );\n    return shape( p ) * s;\n}\n\nvec3 calcNormal( in vec3 pos, in float eps, in float t )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*map( pos + e.xyy, t ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx, t ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy, t ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx, t ) );\n}\n\nvec3 calcNormal2( in vec3 pos, in float eps )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps;\n    return normalize( e.xyy*shape( pos + e.xyy ) + \n\t\t\t\t\t  e.yyx*shape( pos + e.yyx ) + \n\t\t\t\t\t  e.yxy*shape( pos + e.yxy ) + \n\t\t\t\t\t  e.xxx*shape( pos + e.xxx ) );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.01 + 0.5*float(i)/7.0;\n        occ += (h-shape( pos + h*nor ));\n    }\n    return clamp( 1.0 - 4.0*occ/8.0, 0.0, 1.0 );    \n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k, in float time )\n{\n    float res = 1.0;\n    float t = 0.01;\n    for( int i=0; i<32; i++ )\n    {\n        float h = map(ro + rd*t, time);\n        res = min( res, smoothstep(0.0,1.0,k*h/t) );\n        t += clamp( h, 0.04, 0.1 );\n\t\tif( res<0.01 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n    vec3 m = pow( abs( n ), vec3(k) );\n\tvec4 x = texture( sam, p.yz );\n\tvec4 y = texture( sam, p.zx );\n\tvec4 z = texture( sam, p.xy );\n\treturn (x*m.x + y*m.y + z*m.z) / (m.x + m.y + m.z);\n}\n\nvec3 shade( in vec3 ro, in vec3 rd, in float t, float time )\n{\n    float eps = 0.003;\n    \n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos, eps, time );\n    float kk;\n    vec3 qos = deform( pos, time, kk );\n    vec3 qor = calcNormal2( qos, eps );\n\n    vec3 tex = texcube( iChannel0, qos*0.5, qor, 1.0 ).xyz;\n\n    vec3 lig = normalize(vec3(3.0,1.0,0.2) );\n\n    float fre = pow( clamp(1.0+dot(nor,rd), 0.0, 1.0 ), 2.0 );\n    float occ = calcAO( qos, qor );\n\n    float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n    float sha = softshadow( pos, lig, 64.0, time ); \n    dif *= sha;\n        \n    vec3 col = 2.0*vec3(2.1,0.8,0.6)*dif*(0.5+0.5*occ) + 0.6*vec3(0.1,0.27,0.4)*occ;\n    col += 1.0*fre*(0.5+0.5*dif)*occ;\n    float sh = 4.0 + tex.x*64.0;\n    col += 0.1*sh*pow(clamp(-dot(rd,nor),0.0,1.0),sh)*occ*sha;\n    col *= clamp(2.0*dot(pos,pos),0.0,1.0);\n\n    col *= 1.0*tex;\n    \n    col *= exp( -1.5*t );\n\n    return col;        \n}\n\nfloat intersect( in vec3 ro, in vec3 rd, const float maxdist, float time )\n{\n    float res = -1.0;\n    vec3 resP = vec3(0.0);\n    float t = 0.1;\n    for( int i=0; i<150; i++ )\n    {\n        vec3 p = ro + t*rd;\n        float h = map( p, time );\n        res = t;\n\n        if( h<(0.001*t) || t>maxdist ) break;\n        \n        t += h*0.5;\n    }\n\treturn res;\n}\n\nvec3 render( in vec3 ro, in vec3 rd, float time )\n{\n    vec3 col = vec3(0.0);\n    \n    const float maxdist = 128.0;\n    float t = intersect( ro, rd, maxdist, time );\n    if( t < maxdist )\n    {\n        col = shade( ro, rd, t, time );\n    }\n\n    return pow( col, vec3(0.55) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n#if AA>1\n    vec3 col = vec3(0.0);\n    \n    float r = texture( iChannel1, fragCoord/iChannelResolution[1].xy ).x;\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 p = (-iResolution.xy+2.0*(fragCoord.xy+vec2(i,j)/float(AA)))/iResolution.y;\n\n        float time = iTime + (r+float(AA*j + i))/float(AA*AA) * (0.4/30.0);\n        \n        time = 41.73 + time;\n        \n        float an = 6.0 + 0.1*time;\n\n        vec3 ro = vec3(0.0,1.0,0.5) + 2.0*vec3(cos(an),0.0,sin(an));\n        vec3 ta = vec3(0.0,0.0,0.0);\n        mat3 ca = setCamera( ro, ta, 0.3 );\n        vec3 rd = normalize( ca * vec3(p,-1.5) );\n        \n        col += render( ro, rd, time );\n    }\n    col /= float(AA*AA);\n#else\n    vec2 p = (-iResolution.xy+2.0*(fragCoord.xy))/iResolution.y;\n    \n    float time = iTime;\n    time = 41.73 + time;\n    float an = 6.0 + 0.1*time;\n\n    vec3 ro = vec3(0.0,1.0,0.5) + 2.0*vec3(cos(an),0.0,sin(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    mat3 ca = setCamera( ro, ta, 0.3 );\n    vec3 rd = normalize( ca * vec3(p,-1.5) );\n\n    vec3 col = render( ro, rd, time );\n#endif    \n\tfragColor = vec4( col, 1.0 );\n}\n","name":"Buffer A","description":"","type":"buffer"}]}