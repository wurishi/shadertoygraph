{"ver":"0.1","info":{"id":"wd33WB","date":"1569199411","viewed":146,"name":"inversion playground","username":"Feniks","description":"the demo of how geometric inversion works. Use the mouse to move the diamond. Thanks to all who left the insightful comments to make this demonstration better.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circle","geometry","invertion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define center ( iResolution.xy / 2. )\n\nfloat radius = 60.;\n\nfloat eps = 1.;\n\nbool grid = false;\n\nfloat smoothedStep(float f) { \n    return smoothstep(0.1 * eps, 0.9 * eps, abs(f / fwidth(f)));\n}\n\n//function that says if the given pixel has any curve to draw over it\nfloat isHit(vec2 inverted) {\n    \n    //draw a line that slides around \n    float f = dot(inverted, vec2(1., 1.0)) + sin(iTime) * 100.;\n    float d = smoothedStep(f);\n    \n    //draw a stationary circle\n    f = length(inverted + vec2(30., 50.)) - 30.;\n    d *= smoothedStep(f);\n    \n    \n    //draw a diamond\n    f = abs(inverted.x - iMouse.x + center.x) + abs(inverted.y - iMouse.y+ center.y) - 30.;\n    d *= smoothedStep(f);\n    \n    //draw a grid\n    if (grid) {\n        f = mod(inverted.x, 100.) * mod(inverted.y, 100.);\n        d *= smoothedStep(f);\n    }\n    \n    return 1.0 - d;\n}\n\n// read more about inversion here: http://whistleralley.com/inversion/inversion.htm\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 from_center = fragCoord - center;\n    \n    //the inversion happens here\n    vec2 inverted = from_center * radius * radius / length(from_center) / length(from_center); \n    \n    //background\n    fragColor = vec4(0.,0.,0.,1.0);\n    \n    // draw the origin with blue\n    fragColor += (1. - smoothedStep(length(from_center) - 3.0)) * vec4(0.,0.,1.,1.0);\n    // draw the circle we invert the space around with green\n    fragColor += (1. - smoothedStep(length(from_center) - radius)) * vec4(0.,1.,0.,1.0);\n    \n    //draw the original space\n    fragColor += isHit(from_center) * vec4(1.,0.,1.,1.0);\n\t//draw the inverted space\n    fragColor += isHit(inverted) * vec4(1.,1.,1.,1.0);\n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}