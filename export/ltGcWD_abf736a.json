{"ver":"0.1","info":{"id":"ltGcWD","date":"1537929999","viewed":378,"name":"Ganeralized Kuwahara","username":"kam19_77","description":"Generalized Kuwahara by Jan Eric Kyprianidis","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979323846;\nconst int N = 8;\nconst int radius = 4;\nconst float q = 8.0f;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 src_size = iResolution.xy;\n    vec2 uv = fragCoord/src_size;\n\n    vec4 m[8];\n    vec3 s[8];\n    for (int k = 0; k < N; ++k) {\n        m[k] = vec4(0.0);\n        s[k] = vec3(0.0);\n    }\n    \n    float piN = 2.0 * PI / float(N);\n    mat2 X = mat2(cos(piN), sin(piN), -sin(piN), cos(piN));\n    \n    for ( int j = -radius; j <= radius; ++j ) {\n        for ( int i = -radius; i <= radius; ++i ) {\n            vec2 v = 0.5 * vec2(i,j) / float(radius);\n            if (dot(v,v) <= 0.25) {\n                vec4 c_fix = texture(iChannel0, uv + vec2(i,j) / src_size);\n                vec3 c = c_fix.rgb; \n                for (int k = 0; k < N; ++k) {\n                    float w = texture(iChannel1, vec2(0.5, 0.5) + v).x;\n\n                    m[k] += vec4(c * w, w);\n                    s[k] += c * c * w;\n\n                    v *= X;\n                }\n            }\n        }\n    }\n\n    vec4 o = vec4(0.0);\n    for (int k = 0; k < N; ++k) {\n        m[k].rgb /= m[k].w;\n        s[k] = abs(s[k] / m[k].w - m[k].rgb * m[k].rgb);\n\n        float sigma2 = s[k].r + s[k].g + s[k].b;\n        float w = 1.0 / (1.0 + pow(255.0 * sigma2, 0.5 * q));\n\n        o += vec4(m[k].rgb * w, w);\n    }\n    \n    // Output to screen\n    fragColor = vec4(o.rgb / o.w, 1.0f);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = 3.14159265358979323846;\nconst int N = 8;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 src_size = iResolution.xy;\n    vec2 uv = fragCoord/src_size;\n\n    float PIN = 2.0 * PI / float(N);\n    float halfPIN = 0.5f * PIN;\n    mat2 X = mat2(cos(PIN), sin(PIN), -sin(PIN), cos(PIN));\n    \n    vec2 l0 = vec2(1.0f, 0.0f);\n    vec2 l1 = uv - vec2(0.5f, 0.5f);\n    \n    vec4 col = vec4(0.0f);\n    if (dot(l1, l1) < 0.25f) {\n        if (acos(dot(l0, normalize(l1))) <= halfPIN) {\n            col.r = 1.0f;\n        }\n    }\n    \n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float PI = 3.141592653589793238f;\n\nconst float Sigma = 7.0f;\nconst float Sigma2 = Sigma * Sigma;\nconst int Radius = int(Sigma * 3.0f);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 src_size = iResolution.xy;\n    vec2 uv = fragCoord/src_size;\n    \n    float accum = 0.0f;\n    for (int y = -Radius; y < Radius; ++y) {\n        for (int x = -Radius; x < Radius; ++x) {\n            float w = texture(iChannel0, uv + vec2(x, y) / src_size).x;\n            float r = float(x) * float(x) + float(y) * float(y);\n            accum += exp(-r / (2.0f * Sigma2)) / (2.0f * PI * Sigma2) * w;\n        }\n    }\n    \n    fragColor = vec4(accum, 0.0f, 0.0f, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}