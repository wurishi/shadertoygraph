{"ver":"0.1","info":{"id":"4fSSRW","date":"1706057692","viewed":40,"name":"Test Shader 1706057684","username":"ShadedSky","description":"anisotropic \n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["blue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Define time variable\n    float time = iTime;\n\n    // Calculate normalized coordinates\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    // Center the coordinates\n    uv -= 0.5;\n\n    // Adjust aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Calculate distance from the center\n    float dist = length(uv);\n\n    // Anisotropic shading\n    float angle = atan(uv.y, uv.x);\n    float intensity = abs(sin(angle * 10.0));\n\n    // Create a reflective water effect\n    vec3 color = vec3(0.1, 0.5, 1.0) + intensity * vec3(0.2, 0.7, 1.0);\n\n    // Apply time-based animation\n    color *= abs(sin(time));\n\n    // Output the final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}