{"ver":"0.1","info":{"id":"MlfSzn","date":"1433989231","viewed":497,"name":"Skin detection","username":"carlolsson","description":"Skin detection shader","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float normalizeColorChannel(in float value, in float min, in float max) {\n    return (value - min)/(max-min);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // PART 1: View webcam texture\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec4 color = texture(iChannel0, uv);\n    fragColor = color;\n    \n    // PART 2: Convert to YCbCr color space\n    vec4 rgb = color*255.0;\n    // See http://www.equasys.de/colorconversion.html for conversion\n    vec4 ycbcr = rgb;\n    ycbcr.x = 16.0 + rgb.x*0.257 + rgb.y*0.504 + rgb.z*0.098;\n    ycbcr.y = 128.0 - rgb.x*0.148 - rgb.y*0.291 + rgb.z*0.439;\n    ycbcr.z = 128.0 + rgb.x*0.439 - rgb.y*0.368 - rgb.z*0.071;\n    // View channels\n    fragColor = vec4(normalizeColorChannel(ycbcr.x,16.0,235.0),\n                     normalizeColorChannel(ycbcr.y,16.0,240.0),\n                     normalizeColorChannel(ycbcr.z,16.0,240.0),\n                    1.0);\n    \n    // PART 3: Skin detection\n    if (ycbcr.y > 100.0 && ycbcr.y < 118.0 &&\n        ycbcr.z > 121.0 && ycbcr.z < 161.0) {\n     \tfragColor = vec4(color.x*0.6,\n                         color.y*0.6,\n                         1.0,\n                        1.0);\n    } else {\n     \tfragColor = color;   \n    }\n}\n\n","name":"","description":"","type":"image"}]}