{"ver":"0.1","info":{"id":"XlSGRt","date":"1431179674","viewed":313,"name":"2D Softshadows","username":"Diede","description":"simple 2D shape rendering with softshadows","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"///////////////////////////////////////////////////////////\n// COPYRIGHT 2015 BY DIEDE APERS\n// Realtime 2D volumetric light\n// NOT optimized algorithm: Foreach pixel, Foreach light\n// Foreach sample, Foreach object.\n// Only sphere drawing and intersection\n//\n// TODO:\n// Revamp intersection, no need to calculate exact point\n// Add more lights\n// Add more primitives (triangle, line, polygon)\n// Animation\n// Optimize\n///////////////////////////////////////////////////////////\n\nstruct Ray\n{\n    vec2 origin;\n    vec2 end;\n};\n    \nstruct Circle\n{\n    vec2 position;\n    float radius;\n    vec3 color;\n};\n\nbool drawLine(vec2 position, Ray line, int thickness)\n{\n\treturn false;\n}\n    \nfloat intersectCircle(Ray ray, Circle circle)\n{\n    float dist = distance(ray.origin, ray.end);\n    \n    vec2 d = ray.origin - ray.end;\n    \n    float a = dot(d, d);\n    float b = 2.0 * dot(d, ray.origin - circle.position);\n    float c = dot(circle.position, circle.position) + dot(ray.origin, ray.origin) - 2.0 * dot(circle.position, ray.origin) - circle.radius*circle.radius;\n\n    float test = b*b - 4.0*a*c;\n\n    if (test >= 0.0) \n    {\n        dist = (-b - sqrt(test)) / (2.0 * a);\n    }\n    \n    return dist;\n}\n\nbool intersectCircleShadow(Ray ray, Circle circle)\n{\n    bool inShadow = false;\n    \n    float intersection = intersectCircle(ray, circle);\n    if(!(intersection > 0.0 || intersection < -1.0))\n    {\n        inShadow = true;\n    }\n    \n    return inShadow;\n}\n\nfloat drawCircle(vec2 position, Circle circle)\n{\n    float xd = circle.position.x-position.x;\n\tfloat yd = circle.position.y-position.y;\n\n    if((xd*xd + yd*yd) <= circle.radius * circle.radius)\n    {\n        return 1.0;\n    }\n    \n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 rgb = vec3(0.1, 0.1, 0.1);\n\tvec2 origin = fragCoord.xy;\n    \n    float lightIntensity = 1.0;\n    vec3 lightColor = vec3(0.0, 0.9, 0.6);\n    \n    Circle circle1, circle2, circle3;\n    circle1.position = vec2(iResolution.x/4.0, iResolution.y/2.0);\n    circle1.radius = 50.0;\n    circle1.color = vec3(0.2, 0.2, 0.2);\n    \n    circle2.position = vec2(circle1.position.x / 2.0 + ((sin(iTime) +1.0) * 1.5) * circle1.position.x, circle1.position.y / 2.0 + ((sin(iTime * 2.0) * 0.5) + 0.5) * circle1.position.y);\n    //circle2.position = vec2(iMouse.x, iMouse.y);\n    circle2.radius = 10.0;\n    circle2.color = vec3(1.0, 1.0, 1.0);\n    \n    circle3.position = vec2(iResolution.x - iResolution.x/4.0, iResolution.y/2.0);\n    circle3.radius = 50.0;\n    circle3.color = vec3(0.2, 0.2, 0.2);\n    \n    rgb += drawCircle(origin, circle1) * circle1.color; // First object\n    rgb += drawCircle(origin, circle2) * circle2.color; // First light\n    rgb += drawCircle(origin, circle3) * circle3.color; // Second light\n    \n    const float samples = 20.0; // TODO: include in circle\n    Ray ray;\n    ray.origin = origin;\n    ray.end = circle2.position;\n    \n    // Light \n    for(float i = 1.0; i <= samples; ++i)\n    {\n        bool inShadow = false;\n        \n        // Resample\n        // Perendicular to the surface of the light\n        vec2 vec = normalize(ray.end - ray.origin);\n        vec2 sampleVec = vec2(vec.y, -vec.x);\n        vec2 resample = sampleVec * (i - samples/2.0);\n        ray.end = circle2.position + resample;\n        \n        // FOR EACH OBJECT\n        {\n            inShadow = intersectCircleShadow(ray, circle1) || intersectCircleShadow(ray, circle3);\n        }\n        \n        if(!inShadow)\n        {\n            float dist = distance(ray.origin, ray.end);\n            rgb += lightColor / dist * lightIntensity;\n        }\n    }\n    \n\tfragColor = vec4(rgb, 1.0);\n}","name":"","description":"","type":"image"}]}