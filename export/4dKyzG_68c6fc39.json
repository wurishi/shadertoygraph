{"ver":"0.1","info":{"id":"4dKyzG","date":"1586638090","viewed":67,"name":"Tutorial Shader nmaga","username":"nmaga23","description":"cool and nice\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// we want a pseudo random value\n// this is an example of two functions function which takes in the position \n// of a pixel and returns a \"random\" value given the position!\n// NOTE: it returns a value between -1 and 1, not 0 and 1!\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233))) * 43758.5453123 );\n}\n\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\n// our actual FBM function\n// as we saw earlier with the \n#define OCTAVES 10\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    \n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        float n = noise(st) * 2.0 - 1.0;\n        value += amplitude * fract(n);\n        st *= 2.;\n        amplitude *= .5;\n    }\n    return (value);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // OUR UNIFORMS\n    float time = iTime;\n    vec2 resolution = iResolution.xy;\n\n    // Right now, each pizel is represented as an (x, y) coordinate in\n    // screen space, for example (300, 200). \n    // In order to better work with the pixels, we want to get the coordinate\n    // of each pixel as a fraction of the screen space.\n    // We call this the NDC (normalized screen space).\n    // Now, every value will be from 0 to 1.\n    vec2 uv = fragCoord / resolution;\n\n    // Our color is a vec3 (vector of size 3)\n    // The values in the color represent R G B.\n    // 0 means none of that color, 1 means maxiumum intensity of that color.\n    // Try it out!\n    // NOTE: R + G = Yellow, R + B = Purple, G + B = Cyan\n    vec3 col = vec3(0.56, 0.22, 0.67); //+ vec3(0.0,0.0, sin(time));\n    col += vec3(0.0,fbm(12.0 * uv),0.0);\n  \n\n    // Output to screen\n    // Our col\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}