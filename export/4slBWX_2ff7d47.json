{"ver":"0.1","info":{"id":"4slBWX","date":"1556827165","viewed":264,"name":"Visibility in Plucker space","username":"mailice","description":"The two yellow sources are visible to each other if they have at least one free segment that is not blocked by any blue occluder (right)\nThe visibility information computed and encoded in the dual Plucker space (left)","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["2d","plucker","visibility"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2019 Denis Haumont\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//=========================================================================\nconst int   LINES      = 300;\n//=========================================================================\n\n//Routines From Iq\nvec2  hash2( float n ) { return fract(sin(vec2(n,n+1.0))*43758.5453123); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n//=========================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Pre-compute constants\n    float h = 1.0/iResolution.y;\n \tvec2 p = fragCoord.xy/iResolution.xy;\n    vec2 s[128];\n    int index = defineScene(s,iTime);\n    \n    vec3 col = vec3( 0.0 );\n \n    //split screen\n    if (p.x>=0.3)\n    {   \n        // Display the scene and draw random stabbing lines (right part of the screen)\n        \n        //Draw the two source segments       \n        for (int i= 0;i< 4;i+=2)\n        {\n          col = mix( col, 1.0*vec3(1.0,0.7,0.2), 1.0-smoothstep(h,4.0*h,sdSegment(p,s[i],s[i+1])));\n          col = mix( col, 1.5*vec3(1.0,0.7,0.2), 1.0-smoothstep(h,1.0*h,sdSegment(p,s[i],s[i+1])));\n        }\n        \n        //Draw the occluders\n        for (int i= 4;i< index;i+=2)\n        {\n          col = mix( col, vec3(0.4,0.4,0.8), 1.0-smoothstep(h,3.0*h,sdSegment(p,s[i],s[i+1])));\n        }\n        \n        //Random casting of lines        \n        for (int i=0;i<LINES;i++)\n        {\n            //Select randomly a stabbing line, piercing the two yellow source segments\n            \n            vec2 noise = hash2(float(i)+iTime);\n            vec2 a = mix(s[0],s[1],noise.x); \n            vec2 b = mix(s[2],s[3],noise.y); \n\n            //Retrieve the line in Plucker space to determine its visibility\n            vec3 l = pluckerLine(a,b);\n            vec2 dualUV = pluckerToSpherical(l);\n            dualUV /= PI;\n            vec4 dual = texture(iChannel1,dualUV);\n\n            //The alpha coordinates provide the visibility (0.0 is non blocked)\n            \n            //The color indicates the visility state of the line (yellow is visible, blue is blocked)\n            \n            vec3 lineColor = mix(vec3(1.0,0.7,0.2),0.3*vec3(0.4,0.4,0.8),dual.w);\n          \n            col += 0.05*lineColor * (1.0-smoothstep(h,8.0*h,sdSegment(p,a,b)));\n            col += 0.10*lineColor * (1.0-smoothstep(h,2.0*h,sdSegment(p,a,b)));\n            col += 0.10*lineColor * (1.0-smoothstep(h,1.0*h,sdSegment(p,a,b)));  \n        }\n    \n        //For illustration, draw a green laser line\n        float sint=sin(iTime)*0.5+0.5;\n        vec2 a = mix(s[0],s[1],sint); \n        vec2 b = mix(s[2],s[3],sint); \n\n        col += 0.2*vec3(0.0,1.0,0.0)* (1.0-smoothstep(h,6.0*h,sdSegment(p,a,b)));\n        col += 0.2*vec3(0.0,1.0,0.0)* (1.0-smoothstep(h,1.0*h,sdSegment(p,a,b))); \n    }\n    else\n    {\n        //Display the occluder map in Plucker space (left part of the screen)        \n \n        float scaling = 2.0*iResolution.y/iResolution.x;\n        vec2 uv=fragCoord.xy;\n        uv*=scaling;\n        uv/=iResolution.y;     \n      \n        uv.y += (1.0-scaling)+0.05;\n        uv.x += 0.22;\n        if (uv.x>=0.0&&uv.x<=1.0&&uv.y>=0.0&&uv.y<=1.0)\n        col +=texture(iChannel1,uv.xy).xyz;             \n    }\n    \n    col = mix( col,0.3* vec3(1.0,1.0,1.0), 1.0-smoothstep(h,1.0*h,sdSegment(p,vec2(0.3,0.0),vec2(0.3,1.0))));\n         \n    \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// The MIT License\n// Copyright © 2019 Denis Haumont\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// This texture encodes the 2D line space in the dual Plucker space.\n// The Plucker space being a 3D projective space, Plucker points coordinates are encoded in a 2D map \n// by performing a 3D normalization (equivalent to a projection of the 3D point onto a unit sphere) and\n// converting the projected point into spherical coordinates. Thanks to the normalization, R = 1 and do not have\n// to be encoded in spherical coordinates.\n\n// The visibility between the source segment is computed by performing some CSG operations in Plucker space.\n// The alpha coordinates encodes the visibility (w==0.0:line non occluded, w>0.0: line occluded)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 s[128];\n\n    int index = defineScene(s,iTime);\n\n    //Decoding the map from 2D spherical space back to plucker space \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv *= PI;\n\n    vec3 l = sphericalToPlucker(uv);\n\n    vec4 col = vec4(0.0);\n\n    \n    // Perform some CSG in Plucker space to determine visibility, alpha encodes visibility\n    \n    // Step 1 - Draw initial yellow area, representing the set of lines stabbing the source segments\n  \n    if (   pluckerDot(s[0],l)<=0.0 && pluckerDot(s[1],l)>=0.0  \n        && pluckerDot(s[2],l)<=0.0 && pluckerDot(s[3],l)>=0.0)\n    {\n        col += vec4(1.0,0.7,0.2,0.0);\n    }\n\n    // Step 2 - Draw the area corresponding to lines blocked by each occluder (CSG)\n    \n    for (int i=4;i<index;i+=2)\n    {\n        vec2 e0 = s[i];\n        vec2 e1 = s[i+1];\n        if   ((pluckerDot(e0,l)<0.0&&pluckerDot(e1,l)>0.0) //front facing\n           || (pluckerDot(e0,l)>0.0&&pluckerDot(e1,l)<0.0)) //back facing\n        {\n            col.w=1.0; //occluded\n            col.xyz = mix(col.xyz,vec3(0.4,0.4,0.8), 0.4);\n        }\n        \n    } \n    //At this point, the visibility of all the lines is encoded in the texture:\n    // - Lines that are stabbing the source segments are represented by a yellow point, with an alpha = 0.0\n    // - Lines blocked by at least one occluder are represented by a blue point, with an alpha > 0.0\n  \n    //For illustration purpose, draw a green point corresponding to the green laser\n\n    float sint=sin(iTime)*0.5+0.5;\n    vec2 a = mix(s[0],s[1],sint); \n    vec2 b = mix(s[2],s[3],sint); \n    vec2 dl = pluckerToSpherical(pluckerLine(a,b));\n    float le=length(dl-uv);\n    if (le<0.0500) col.xyz = mix(col.xyz, vec3(0.0,1.0,0.0),0.5);        \n    if (le<0.0250) col.xyz = mix(col.xyz, vec3(0.0,1.0,0.0),0.5);        \n    if (le<0.0125) col.xyz = mix(col.xyz, vec3(0.0,1.0,0.0),0.9);\n\n    fragColor = col;\n}\n ","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// The MIT License\n// Copyright © 2019 Denis Haumont\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//=========================================================================\nconst int   OCCLUDERS  = 10; //min:1, max:62\nconst float SIZE       = 1.5 / float(OCCLUDERS);\n//=========================================================================\n\n//Plucker coordinates computation\nvec3 pluckerLine(vec2 p, vec2 q)\n{    \n    //Lines in plucker space (3D projective space)\n    vec3 r = vec3(p.y-q.y,q.x-p.x,p.x*q.y-q.x*p.y);\n    \n    //projection onto unit sphere (2D space)\n    return normalize(r);\n}\n\nfloat pluckerDot(vec2 p1, vec3 line)\n{\n    //The sign of the dot product gives the relative orientation of the two lines\n    return dot(p1,line.xy) + line.z;\n}\n\n//Converting coordinates from spherical to plucker space\nvec3 sphericalToPlucker(vec2 spherical)\n{\n    // Cartesian coordinates computation\n    float theta = spherical.x;\n    float phi   = spherical.y;\n    \n    return vec3(sin(theta)* cos(phi), sin(theta) * sin(phi),cos(theta));\n}\n\n//Converting coordinates from plucker space to spherical\nvec2 pluckerToSpherical(vec3 plucker)\n{\n    //Spherical coordinates computation\n \n    float theta = acos(plucker.z);\n    float phi   = atan(plucker.y, plucker.x);\n  \n    return vec2(theta, phi);\n}\n\n//=========================================================================\n//Define the segments coordinates\nint defineScene(out vec2 s[128],float iTime)\n{\n     //Start at an interesting configuration\n    float t=iTime;\n   \n    int index = 0;\n   //Define the source segments \n    s[index++] = vec2(0.35,0.05);\n    s[index++] = vec2(0.35,0.95);\n    s[index++] = vec2(0.95,0.05);\n    s[index++] = vec2(0.95,0.95);\n\n    float d = 0.4;\n    float di = (0.9-0.4)/float(OCCLUDERS-1);\n    \n    //Define the occluders\n    for (int i=0;i<OCCLUDERS;i++)            \n    {\n        s[index++] = vec2(d,0.5-SIZE+0.42*cos(t*d*5.0));\n        s[index++] = vec2(d,0.5+SIZE+0.42*cos(t*d*5.0));  \n        d+=di;\n    } \n    \n    return index;\n}\n//=========================================================================\n\n#define PI 3.1415926535897\n","name":"Common","description":"","type":"common"}]}