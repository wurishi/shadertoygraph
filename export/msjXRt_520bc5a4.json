{"ver":"0.1","info":{"id":"msjXRt","date":"1671004813","viewed":75,"name":"ychen_rayMarching_basic&Sphere","username":"ychen","description":"light, shadow, basic raymarching\nsphere","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Ray Marching/ Sphere Tracing\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n//distance from camera to object\nfloat GetDist(vec3 p){\n    vec4 s = vec4(0,1,6,1);\n    float sphereDist = length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    float d = min(sphereDist,planeDist);\n    return d;\n}\n\n//ro:ray orgin; rd: ray direction; p: blue conter point each time of sphere tracing\n//input: origin point & direction; output: distance to object\nfloat RayMarch(vec3 ro, vec3 rd){\n    float  dO=0.;//step?\n    for(int i=0;i<MAX_STEPS;i++){\n        vec3 p = ro + rd*dO;// location of step\n        float dS = GetDist(p);//distance to the closest object\n        dO += dS;//location/step++\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    return dO;\n}\n\n//light system\n    //normal vector,perpendicular to surface\nvec3 GetNormal(vec3 p){\n    float d = GetDist(p);\n    vec2 e = vec2(.01,0);\n    vec3 n = d-vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx)\n    );\n    return normalize(n);\n}\n    //light vector\nfloat GetLight(vec3 p){\n    vec3 lightPos = vec3(0,5,6);\n    lightPos.xz += vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    //float dif = dot(n,l);//-1,1\n    float dif = clamp(dot(n,l),0.,1.);//0,1\n    //shadow\n    float d = RayMarch(p+n*SURF_DIST*2.,l);\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n    // p = surfacePos\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;//make zero uv in the middle\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0,1,0);//position of camera\n    vec3 rd = normalize(vec3(uv.x,uv.y,1));//ray direction /camera\n    float d = RayMarch(ro,rd);\n    vec3 p = ro + rd*d;\n    float dif =  GetLight(p);\n    col = vec3(dif);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}