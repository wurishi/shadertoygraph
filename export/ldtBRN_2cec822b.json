{"ver":"0.1","info":{"id":"ldtBRN","date":"1524340951","viewed":2470,"name":"Round Audio Spectrum Remastered","username":"Rafbeam","description":"Remastered Round Audio Spectrum Visualizer - Added capsules, increased rays' lengths.\n\nMusic: Far Cry 3 by Brian Tyler ","likes":27,"published":1,"flags":64,"usePreview":0,"tags":["2d","ray","spectrum","round","music","circle","audio","capsule","soundcloud","remastered"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ls2SRG","filepath":"https://soundcloud.com/briantyler/far-cry-3","previewfilepath":"https://soundcloud.com/briantyler/far-cry-3","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265359\n\nvec4 rectangle(vec4 color, vec4 background, vec4 region, vec2 uv);\nvec4 capsule(vec4 color, vec4 background, vec4 region, vec2 uv);\nvec2 rotate(vec2 point, vec2 center, float angle);\nvec4 bar(vec4 color, vec4 background, vec2 position, vec2 diemensions, vec2 uv);\nvec4 rays(vec4 color, vec4 background, vec2 position, float radius, float rays, float ray_length, sampler2D sound, vec2 uv);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Prepare UV and background\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= aspect;\n    vec4 color = mix(vec4(0.0, 1.0, 0.8, 1.0), vec4(0.0, 0.3, 0.25, 1.0), distance(vec2(aspect/2.0, 0.5), uv));\n    \n    //VISUALIZER PARAMETERS\n    const float RAYS = 96.0; //number of rays //Please, decrease this value if shader is working too slow\n    float RADIUS = 0.4; //max circle radius\n    float RAY_LENGTH = 0.3; //ray's max length //increased by 0.1\n    \n    color = rays(vec4(1.0), color, vec2(aspect/2.0, 1.0/2.0), RADIUS, RAYS, RAY_LENGTH, iChannel0, uv);\n    \n    fragColor = color;\n}\n\nvec4 rays(vec4 color, vec4 background, vec2 position, float radius, float rays, float ray_length, sampler2D sound, vec2 uv)\n{\n    float inside = (1.0 - ray_length) * radius; //empty part of circle\n    float outside = radius - inside; //rest of circle\n    float circle = 2.0*M_PI*inside; //circle lenght\n    for(int i = 1; float(i) <= rays; i++)\n    {\n        float len = outside * texture(sound, vec2(float(i)/rays, 0.0)).x; //length of actual ray\n        background = bar(color, background, vec2(position.x, position.y+inside), vec2(circle/(rays*2.0), len), rotate(uv, position, 360.0/rays*float(i))); //Added capsules\n    }\n    return background; //output\n}\n\nvec4 bar(vec4 color, vec4 background, vec2 position, vec2 diemensions, vec2 uv)\n{\n    return capsule(color, background, vec4(position.x, position.y+diemensions.y/2.0, diemensions.x/2.0, diemensions.y/2.0), uv); //Just transform rectangle a little\n}\n\nvec4 capsule(vec4 color, vec4 background,  vec4 region, vec2 uv) //capsule\n{\n    if(uv.x > (region.x-region.z) && uv.x < (region.x+region.z) &&\n       uv.y > (region.y-region.w) && uv.y < (region.y+region.w) || \n       distance(uv, region.xy - vec2(0.0, region.w)) < region.z || \n       distance(uv, region.xy + vec2(0.0, region.w)) < region.z)\n        return color;\n    return background;\n}\n\nvec2 rotate(vec2 point, vec2 center, float angle) //rotating point around the center\n{\n    float s = sin(radians(angle));\n    float c = cos(radians(angle));\n    \n    point.x -= center.x;\n    point.y -= center.y;\n    \n    float x = point.x * c - point.y * s;\n    float y = point.x * s + point.y * c;\n    \n    point.x = x + center.x;\n    point.y = y + center.y;\n    \n    return point;\n}","name":"Image","description":"","type":"image"}]}