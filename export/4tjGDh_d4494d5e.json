{"ver":"0.1","info":{"id":"4tjGDh","date":"1428584669","viewed":193,"name":"water...","username":"jpweiyi","description":"2d water","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"\n// get wave height based on distance-to-center\nfloat waveHeight(vec2 p) {\n    float cLength = length(p);\n    return cos(cLength * 12.0 - iTime * 4.0) * 0.03;\n}\n\n// get point fake normal\nvec3 waveNormal(vec2 p) {\n    \n    float scale = 200.0;\n    float waveHeightRight = waveHeight(p + vec2(2.0 / iResolution.x, 0)) * scale;\n    float waveHeightLeft = waveHeight(p - vec2(2.0 / iResolution.x, 0)) * scale;\n    float waveHeightTop = waveHeight(p + vec2(0, 2.0 / iResolution.y)) * scale;\n    float waveHeightBottom = waveHeight(p - vec2(0, 2.0 / iResolution.y)) * scale;\n     \n    vec3 t = vec3(1, 0, waveHeightRight - waveHeightLeft);\n    vec3 b = vec3(0, 1, waveHeightTop - waveHeightBottom);\n    vec3 n = cross(t, b);\n     \n    return normalize(n);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 cPos = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    vec2 uv = gl_FragCoord.xy / iResolution.xy;\n    vec2 normal = normalize(cPos);\n    uv += normal * waveHeight(cPos);\n    \n\tvec3 lightColor = vec3(1., 1., 1.);\n    vec3 lightDir = vec3(iMouse.x/iResolution.x, iMouse.y/iResolution.y, 1.);\n    \n    vec3 col = texture(iChannel0, uv).xyz * lightColor * \n        max(0., dot( lightDir,\n                     waveNormal(cPos)\n                   )\n            );\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}