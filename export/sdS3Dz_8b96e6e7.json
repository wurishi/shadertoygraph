{"ver":"0.1","info":{"id":"sdS3Dz","date":"1617226198","viewed":47,"name":"Moving Mold","username":"iamyou__","description":"wow","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["mold"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926535897932384;\n\nfloat map (in vec3 p) {\n    // Sphere\n    float d = length(p) - 0.15;\n    \n    // Plane\n    float bend = 1.1;\n    float zoom = 1.8;\n    float d2 = max(p.y + length(vec2(p.x, p.z)) -  bend, zoom);\n    \n    return smoothstep(d, d2, 1.2);\n}\n\nvec3 sn ( in vec3 p) {\n    vec2 e = vec2(0.0001, 0.0);\n    return normalize(vec3(map(p + e.xyy) - map(p - e.xyy),\n                             map(p + e.yxy) - map(p - e.yxy),   \n                             map(p + e.yyx) - map(p - e.yyx)));               \n}\n\nfloat march(in vec3 o, in vec3 d)\n{\n    float t = 0.0;\n    for (int i = 0; i <=100; i++) {\n        vec3 pos = o + t * d;\n        float h = map(pos);\n        \n        if (h < 0.0001) break;\n        t += h;\n        if (t > 20.0) break;\n    }\n    if (t < 20.0) {\n        return t;\n    }\n    return -1.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    // Camera parameters\n    float mi = 5.0 * iMouse.x / iResolution.x;\n    mi = iTime;\n    vec3 o = vec3(1.0 * sin(mi), 0.0, 1.0 * cos(mi));\n    vec3 lookat = vec3(0.0);    \n    vec3 forward = normalize(lookat - o);\n    vec3 camRight = normalize ( cross(forward, vec3(0, 1, 0)));\n    vec3 camUp = normalize ( cross(camRight, forward));\n    vec3 d = normalize( uv.x * camRight + uv.y * camUp + 1.0 * forward);\n    \n    // Lights\n    vec3 lc = vec3(2.0);\n    vec3 lp = vec3(4.5, 4.2, 3.5);\n   \n    // colors\n    vec3 sc = vec3(0.17, 0.15, 0.4);\n    \n    float t = march(o, d);\n    if (t > 0.0) {\n        vec3 p = o + t * d;\n        vec3 ld = normalize(lp - p);\n        vec3 n = sn(p);\n        float diff = max(dot(n, ld), 0.0) / pi;\n        col = sc + diff * lc;\n    }\n    fragColor = vec4(col, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}