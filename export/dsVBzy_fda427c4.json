{"ver":"0.1","info":{"id":"dsVBzy","date":"1698357874","viewed":63,"name":"Hamster CGA ","username":"starmole2","description":"simple cga dither filter, inspired by the cga palette from https://int10h.org/blog/2022/06/ibm-5153-color-true-cga-palette/","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["filter","pixels","cga"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nconst float pi = 3.141;\n\nfloat fG (float x, float sigma) {\n  return (1.0 / sqrt(2.0 * pi * sigma * sigma)) * exp(-(x * x) / (2.0 * sigma * sigma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iChannelResolution[1].xy;\n    vec2 duv = vec2(1.0) / iChannelResolution[1].xy;\n    \n    vec3 col = texture(iChannel1, uv).xyz;\n    \n    int blur = int(ceil(iResolution.x / (res.x/4.0)))+1;\n    float sigma = float(blur*2+1) / 12.0;\n    float s = fG(0.0, sigma);\n    col *= s;\n    for ( int i=1; i<=blur; i++ ) {\n        float g = fG(float(i), sigma);\n        col += texture(iChannel1, uv + vec2(duv.x,0.0) * float(i)).xyz * g;\n        col += texture(iChannel1, uv - vec2(duv.x,0.0) * float(i)).xyz * g;\n    }\n\n    if ( uv.y > .9 ) \n        col = pal[int(floor(uv.x * float(pal.length())))] / 255.0;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// inspired by https://int10h.org/blog/2022/06/ibm-5153-color-true-cga-palette/\n\n#define PAL_16\n\n#ifdef PAL_16\nvec3 pal[] = vec3[](\n    vec3(0,0,0),    vec3(0,0,0xc4),    vec3(0,0xc4,0),       vec3(0,0xc4,0xc4),   \n    vec3(0xc4,0,0), vec3(0xc4,0,0xc4), vec3(0xc4,0x7e,0), vec3(0xc4,0xc4,0xc4),\n    vec3(0x4e,0x4e,0x4e), vec3(0x4e,0x4e,0xdc), vec3(0x4e,0xdc,0x4e), vec3(0x4e,0xf3,0xf3),\n    vec3(0xdc,0x4e,0x4e), vec3(0xf3,0x4e,0xf3), vec3(0xf3,0xf3,0x4e), vec3(0xff,0xff,0xff)\n);\nvec2 res = vec2(320,200); // actually 160x100...\n#endif\n\n#ifdef PAL_MONO\nvec3 pal[] = vec3[](\n    vec3(0,0,0), vec3(0xff,0xff,0xff) \n);\nvec2 res = vec2(640,200);\n#endif\n\n#ifdef PAL_CYAN\nvec3 pal[] = vec3[](\n    vec3(0,0,0), vec3(0x4e,0xf3,0xf3), vec3(0xf3,0x4e,0xf3), vec3(0xff,0xff,0xff) \n);\nvec2 res = vec2(320,200);\n#endif\n\n\n#ifdef PAL_RED\nvec3 pal[] = vec3[](\n    vec3(0xdc,0x4e,0x4e), vec3(0xf3,0xf3,0x4e), vec3(0x4e,0xdc,0x4e), vec3(0,0,0) \n);\nvec2 res = vec2(320,200);\n#endif\n\nfloat err (vec3 a, vec3 b) {\n    //vec3 err = pow(a,vec3(2.2)) - pow(b,vec3(2.2));\n    vec3 err = a-b;\n    return dot(err, err);\n}\n\nint qpbest ( vec3 c ) {\n    int best = 0;\n    float beste = err(pal[0] / 255.0, c);\n    for ( int i=1; i<pal.length(); i++ ) {\n        float d = err(pal[i] / 255.0,c);\n        if ( d<beste ) {\n            beste = d;\n            best = i;\n        }\n    }\n    return best;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 qp0 ( vec3 c ) {\n    return pal[qpbest(c)] / 255.0;\n}\n\nvec3 qp1 ( vec3 c, vec3 cleft ) {\n    vec3 l = qp0(cleft);\n    c -= (l-cleft) * 1.0;\n    return  qp0(c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n    vec2 uv = fragCoord/iResolution.xy;\n    //uv.x = 1.0 - uv.x;\n    \n    vec3 prev = texture(iChannel1,uv).xyz;\n    \n    \n    vec2 dudv = vec2(1.0) / res; \n    ivec2 iuv = ivec2(floor(uv * res));\n    uv = vec2(iuv) / res; \n\n    vec3 col = texture(iChannel0,uv).xyz;\n    vec3 colleft = texture(iChannel0,uv + vec2(dudv.x,0.0)).xyz;\n    vec3 colup = texture(iChannel0,uv + vec2(0.0,dudv.y)).xyz;\n    vec3 coldiag = texture(iChannel0,uv + vec2(dudv.x,dudv.y)).xyz;\n\n    vec3 col2;\n\n    if ( (iuv.x & 1)==0 ) {\n        if ( (iuv.y & 1)==0 ) {\n            col2 = qp0(col);\n        } else {\n            col2 = qp1(colleft, col);\n        }\n    } else {\n        if ( (iuv.y & 1)==1 ) {\n            col2 = qp0(coldiag);\n        } else {\n            col2 = qp1(colup, col);\n        }\n    }\n    \n    //col2 = mix(col2, prev, .25);\n    \n    fragColor = vec4(col2,0.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}