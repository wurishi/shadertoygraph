{"ver":"0.1","info":{"id":"MtScRK","date":"1509167476","viewed":133,"name":"Quick Game of Life","username":"Mx7f","description":"Quick hack for the game of life. New random initialization every run.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["procedural","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ((floor(fragCoord.xy*0.25)+0.5) / iResolution.xy) + vec2(0.5,0.5);\n    float state = texture(iChannel0, uv).x;\n    float v = 1.0-state;\n\tfragColor = vec4(v,v,v,v);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Random function from https://www.shadertoy.com/view/4ssXRX\n// note: uniformly distributed, normalized rand, [0;1]\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    \n    // Initialize the texture on the first frame with a random live or dead state\n    if (iFrame == 1) {\n        float val = round(nrand(fract(uv+iDate.ww*vec2(0.023471,0.014387))));\n\t\tfragColor = vec4(val,val,val,val);\n        return;\n    }\n    // apply update\n    float prevState = texture(iChannel0, uv).x;\n    float s = prevState;\n    if(iFrame % 8 == 0) {\n        int neighbors = 0;\n        for (int x = -1; x <= 1; x += 1) {\n            for (int y = -1; y <= 1; y += 1) {\n                if (x != 0 || y != 0) {\n                    neighbors += int(texture(iChannel0,uv + vec2(x,y)*pixelSize).x);   \n                }\n            }\n        }\n\n        //Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.\n        //Any live cell with two or three live neighbours lives on to the next generation.\n        //Any live cell with more than three live neighbours dies, as if by overpopulation.\n        //Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\n        s = float(neighbors == 3 || ((prevState > 0.0) && (neighbors == 2)));\n    }\n    fragColor = vec4(s,s,s,s);\n}","name":"Buffer A","description":"","type":"buffer"}]}