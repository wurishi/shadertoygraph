{"ver":"0.1","info":{"id":"4ftSWB","date":"1714486595","viewed":43,"name":"TriangleZoomOut","username":"dacoolboe","description":"I think Ill try to make this in 3d so depth is perceived right. What I'm trying to make is a sort of \"hallway\" of triangles, where multiple are on screen and slowly go into the distance as the viewer is perceived to get farther and farther.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["triangle","zoom","hallway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdEquilateralTriangle(  in vec2 p, in float r ) //not my code, makes a distance equilateral triangle\n{    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p=vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n//normalizes and fixes stretching of UV\nvec2 uv = ((fragCoord/iResolution.xy)-.5)*2.;\nuv.x = uv.x*(iResolution.x/iResolution.y);\n\n\n//makes triangle and also makes it go \"in and out\"\nfloat tri = sdEquilateralTriangle(uv, fract(-iTime)*8.);\n\n//makes it so negative values are positive on the triangle\ntri = abs(tri);\n\n//only lets values between .01 - .02 exist on the triangle, otherwise they are 1.\ntri = smoothstep(.0,.02,tri);\n\ntri = -tri + 1.;\n\n//makes triangle visible\nfragColor = vec4(tri,tri,tri, 1.);\n\n\n\n\n}","name":"Image","description":"","type":"image"}]}