{"ver":"0.1","info":{"id":"dslczj","date":"1688607953","viewed":48,"name":"Hello World - Shadertoy","username":"mohanjodaro","description":"This is my first try at shader coding. Tried something abstract with fractals. Enjoy! üéâ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This is my first try at Shader Coding. \n//Took inspiratin from this youtube video üôè https://www.youtube.com/watch?v=f4s1h2YETNY&t=740s\n\n\n\nvec3 palette( float t ){\n    //vector coordinates taken from http://dev.thi.ng/gradients/\n    //[[0.988 0.328 0.718] [0.659 0.438 0.328] [0.388 0.388 0.296] [2.538 2.478 0.168]]\n\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263, 0.416, 0.558);\n    \n    return a +b*cos( 6.28318*(c*t*d));\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord ) {\n    //iResolution.xy <=> vec2(iResoluton.x, iResolution.y)\n    //uv = uv - 0.5;\n    //uv = uv*2;  \n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) /iResolution.y;\n    //variable for local gradient repetitions\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 2.0; i++){\n        uv = fract(uv * 2.0) - 0.5;\n\n    //Changing aspect ratios\n    //uv.x *= iResolution.x / iResolution.y;\n\n        float f = length(uv);\n\n        vec3 col = palette(length(uv0) + iTime);\n\n        //Moving Pattern\n        f = sin(f*-2.0 + iTime*0.5)/5.0;\n        f = abs(f);\n\n        f = 0.02 / f;\n\n        finalColor += col * f;\n\n        //f = smoothstep(0.0, 0.06, f);\n    }\n    \n    fragColor = vec4 (finalColor, 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}