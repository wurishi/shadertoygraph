{"ver":"0.1","info":{"id":"clKBW1","date":"1702055831","viewed":37,"name":" TriangleHit2d","username":"gPlatl","description":"3 methods of checking 2d triangle hit using:\n- runtime optimization\n- triangle edge normals\n- determinants\nSet test position with mouse.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","triangle","intersection","hit","geometrie","inside"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//---------------------------------------------------------\n// TriangleHit2d.glsl   \n//   v1.0  2015-06-29  initial release\n//   v1.1  2017-02-28  show triangle hit with mouse\n//   v1.2  2023-12-08  TriangleHit2d runtime optimized\n//                     add runtime optimized TriangleHit2d\n// info:  3 methods of checking 2d triangle hit using:\n// url:   https://www.shadertoy.com/view/clKBW1\n// tags:  2d, triangle, hit, intersection, geometrie\n// ref.:  PointInsideTriangle.glsl\n//        https://www.shadertoy.com/view/wldczf   \n//---------------------------------------------------------\n\n//---------------------------------------------------------\n// get triangle hit - runtime optimized\n// return true, if point is inside the triangle\n// in: A,B,C   triangle points\n//     P       point position to check\n//---------------------------------------------------------\nbool TriangleHit2d(in vec2 A, in vec2 B, in vec2 C, in vec2 P) \n{\n  float r = (P.y - B.y) * (C.x - B.x) - (P.x - B.x) * (C.y - B.y);\n  float s = (P.y - A.y) * (B.x - A.x) - (P.x - A.x) * (B.y - A.y);\n  float t = (P.y - C.y) * (A.x - C.x) - (P.x - C.x) * (A.y - C.y);\n  return ((r * s) > 0.0) && ((r * t) > 0.0);\n}\n\n//---------------------------------------------------------\n// get triangle hit using triangle edge normals\n// return true, if point is inside the triangle\n// in: A,B,C triangle points\n//---------------------------------------------------------\nbool TriangleHitN2d(in vec2 A, in vec2 B, in vec2 C, in vec2 P) \n{\n/*\n  // CCW direction vectors along triangle edges.\n  vec2 u = B - A;\n  vec2 v = C - B;\n  vec2 w = A - C;\n    \n  // Normals point inward from triangle edges.  \n  // Just rotate triangle edges degrees CCW.\n  vec2 n1 = vec2(-u.y, u.x);\n  vec2 n2 = vec2(-v.y, v.x);\n  vec2 n3 = vec2(-w.y, w.x);\n*/    \n  vec2 n1 = vec2(A.y-B.y, B.x-A.x);\n  vec2 n2 = vec2(B.y-C.y, C.x-B.x);\n  vec2 n3 = vec2(C.y-A.y, A.x-C.x);\n\n  float r = dot(A-P, n1);\n  float s = dot(B-P, n2);\n  float t = dot(C-P, n3);\n \n//  return ((r >= 0.0) && (s >= 0.0) && (t >= 0.0))\n//      || ((r <= 0.0) && (s <= 0.0) && (t <= 0.0));\n  return ((r * s) > 0.0) && ((r * t) > 0.0);\n}\n\n//---------------------------------------------------------\nfloat Determinante2d(in vec2 u, in vec2 v)\n{ \n    return u.x * v.y - u.y * v.x; \n}\n//---------------------------------------------------------\n// get triangle hit using determinants\n// return true, if point is inside the triangle\n// in: A,B,C   triangle points\n//     P       point position to check\n//---------------------------------------------------------\nbool TriangleHitD2d(in vec2 A, in vec2 B, in vec2 C, in vec2 P) \n{\n  vec2 u = P - A;\n  vec2 v = P - B;\n  vec2 w = P - C;\n\n  float r = Determinante2d(u, v);\n  float s = Determinante2d(v, w);\n  float t = Determinante2d(w, u);\n\n  return ((r >= 0.0) && (s >= 0.0) && (t >= 0.0))\n      || ((r <= 0.0) && (s <= 0.0) && (t <= 0.0));\n}\n//---------------------------------------------------------\nvec4 TestTriangleHit2d(in vec2 A, in vec2 B, in vec2 C\n                      ,in vec2 P, in vec2 mp)\n{\n  vec2 d = vec2(0.8, 0.05); \n  d.y += sin(iTime)*0.1-0.1;\n\n  // colors\n  vec4 col1 =      vec4(0.2, 0.5, 0.6, 1.0);  // triangle 1\n  vec4 col2 =      vec4(0.4, 0.3, 0.5, 1.0);  // triangle 2\n  vec4 backColor = vec4(0.1, 0.1, 0.1, 1.0);  // background\n  vec4 hitColor =  vec4(1.0, 0.2, 0.2, 1.0);  // mouse hit triangle\n\n  if (TriangleHit2d (A, B, C, P))\n  {\n    if (TriangleHit2d (A, B, C, mp))\n         return hitColor;\n    else return col1;\n  }\n  else \n    if (TriangleHit2d (A+d, B+d, C+d, P))\n      if (TriangleHit2d (A+d, B+d, C+d, mp))\n           return hitColor;\n      else return col2;\n}\n//---------------------------------------------------------\n// draw circle at pos with given radius\n//---------------------------------------------------------\nvec2 uv = vec2(0);\nvec2 mp = vec2(0);\n\nfloat circle(in vec2 pos, in float radius, in float halo)\n{\n  return clamp (halo * (radius - length(uv-pos)), 0.0, 0.50);\n}\n\n//---------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  uv = fragCoord.xy / iResolution.y;\n  mp = iMouse.xy / iResolution.y;\n\n  // triangle vertices CCW, CW\n  vec2 A = vec2(0.1, 0.2);    vec2 E = vec2(0.4, 0.8);\n  vec2 B = vec2(0.6, 0.3);    vec2 F = vec2(0.8, 0.9);\n  vec2 C = vec2(0.4, 0.7);    vec2 G = vec2(0.7, 0.5);\n    \n  // test CCW\n  fragColor = TestTriangleHit2d (A, B, C, uv, mp);\n\n  // test CW\n  fragColor += TestTriangleHit2d (E, F, G, uv, mp);\n  \n  // mouse position \n  if (length(uv-mp) < 0.014) fragColor = vec4(1,1,0,0);\n  \n}\n","name":"Image","description":"","type":"image"}]}