{"ver":"0.1","info":{"id":"ctSSzD","date":"1675718786","viewed":234,"name":"Lego Truchet","username":"Flopine","description":"A quick doodle made for a VJ gig with 8rix!","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","truchet","pattern","pastel","extrude"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU (2.*PI)\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\n#define circ(u,s) (length(u)-s)\n\n#define noise(u) textureLod(iChannel0,u,0.).x\n\nstruct obj{\n    float d;\n    vec3 c;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d < b.d) return a;\n    else return b;\n}\n\nobj tile1 (vec2 uv)\n{\n    vec2 uu = uv;\n    \n    uv.x += .5;\n    obj d = obj(circ(uv,.49), vec3(.55, .9, .75)); \n    \n    uv = uu;\n    uv.y = abs(uv.y)-.5;\n    uv.x -= .5;\n    d = minobj(d, obj(circ(uv, .49),vec3(.3, .7, .9)));\n    \n    return d;\n}\n\nobj tile2 (vec2 uv, float sig)\n{\n   uv.x *= sig;\n   vec2 uu = uv;\n   \n   float s = (uv.x>-uv.y)?-1.:1.;\n   uv += .5*s;\n   obj d = obj(circ(uv, .49), vec3(.9, .3, .6));\n   \n   uv = uu;\n   s = (uv.x < uv.y)? 1. : -1.;\n   uv += vec2(.25, -.25)*s;\n   d = minobj(d, obj(circ(uv, .125), vec3(.95,.8,.1)));\n   \n   return d;\n}\n\nobj frame(vec2 uv)\n{\n    vec2 id = floor(uv);\n    uv = fract(uv)-.5;\n    obj O; float n = noise(id*.1);\n    if (n< 0.5) \n    {\n        n *= 2.;\n        float s = (n > .5)? 0.:1.;\n        uv *= rot(s*TAU/4.);\n        O = tile1(uv);\n    }\n    \n    else\n    {\n        O = tile2(uv, noise(id*.34)>.5?1.:-1.);\n    }   \n    return O;\n}\n\n\nobj extrude (vec3 p, obj O, float h)\n{\n    vec2 q = vec2(O.d,abs(p.z)-h);\n    return obj(min(0., max(q.x,q.y))+length(max(q,0.))-0.008, O.c);\n}\n\nobj SDF (vec3 p)\n{  \n    p.yz *= rot(TAU/30.);\n    p.y += iTime;\n    \n    obj scene = extrude(p, frame(p.xy), 0.05); \n    scene = minobj(scene, obj(abs(p.z)-.01, vec3(.025, .04, .1)));\n    \n    return scene;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n).d/e, 0., 1.); }\n\nfloat spec (vec3 rd, vec3 n, vec3 l)\n{return pow(max(dot(n,normalize(l-rd)),0.), 30.);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0.001,0.001,-2.5), rd=normalize(vec3(uv,1.)),p=ro,\n    col=vec3(0.), l=vec3(.15, 2., -1.5);\n    \n    bool hit=false; float shad; obj O;\n    for(float i=0.; i<64.; i++)\n    {\n        O = SDF(p);\n        if(O.d<0.01)\n        {\n            hit=true;break;\n        }\n        p += O.d*rd*.45;\n    }\n    \n    if (hit)\n    {\n        vec3 n = gn(p);\n        float li = max(dot(n,normalize(l)),0.); \n        float ao = AO(p,n,.01)+AO(p,n,.02)+AO(p,n,.1);\n        col = mix(vec3(0.05,.08,.2), O.c, li);\n        col += spec(rd, n, l);\n        col *= ao/3.;\n    }\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}