{"ver":"0.1","info":{"id":"fdX3WB","date":"1616440023","viewed":68,"name":"Raymarching 6234","username":"csgradle","description":"my first raymarching engine\n\nyou'll get dizzy if you stare at it for too long\n","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ray"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 1000.\n#define MIN_HIT 0.01\n\nvec3 rotation(vec3 point, vec3 axis, float angle){ // https://www.shadertoy.com/view/Wtl3zN\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    mat4 rot= mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,0.0,0.0,1.0);\n    return (rot*vec4(point,1.)).xyz;\n}\n// https://iquilezles.org/articles/distfunctions\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat ndot( in vec2 a, in vec2 b ) { return a.x*b.x - a.y*b.y; }\n\nfloat sdOctahedron( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nvec3 opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\n\n\nfloat getDist(vec3 p) {\n    float dist = MAX_DIST; \n    dist = min(dist,  p.y- (-0.5));\n    dist = min(dist, sdSphere(p-vec3(0, 0, 5.), 0.5));\n    vec3 fractp = p-vec3(5., 1., 0.);\n    fractp = rotation(fractp, vec3(1.,0.,0.), iTime);\n    dist = min( dist, sdOctahedron( opRep( fractp, vec3(10.)), 2. ) );\n    //dist = min( dist, sdSphere( opRep(p-vec3(5., 1., 0.), vec3(11.)), 1.3) );\n\n    return dist;\n}\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0.);\n    float d = getDist(p);\n    vec3 n = d-vec3(getDist(p-e.xyy), getDist(p-e.yxy), getDist(p-e.yyx));\n    return normalize(n);\n}\nfloat rayMarch(vec3 ro, vec3 rd) {\n\n    float rayDist = 0.;\n    for(int step = 0; step < MAX_STEPS; step++) {\n        vec3 pos = ro + rd*rayDist;\n        float distanceHit = getDist(pos);\n        rayDist += distanceHit;\n        if(distanceHit < MIN_HIT || rayDist > MAX_DIST) break;   \n    }\n    return rayDist;\n}\nfloat getLight(vec3 p, vec3 sun) {\n    \n    vec3 n = getNormal(p);\n    float lighting = dot(n, normalize(sun-p));\n    lighting = clamp(lighting, 0., 1.);\n    \n    float d = rayMarch(p+n*MIN_HIT*1.1, normalize(sun-p));\n    if(d < length(sun- p)) {\n        lighting = lighting * 0.5;\n    }\n    return lighting;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv =  ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    \n    vec3 col = vec3(100., 100., 100);\n    \n    vec3 rayOrigin = vec3(0.,30.*sin(iTime)+30.,sin(iTime)*50.-50.);\n    vec3 rayDir = normalize( \n                   rotation( \n                       vec3( uv.x, uv.y, 1.),\n                       vec3(0., 1., 0.),\n                       0.\n                       ) );\n    vec3 sun = vec3(0., 20., -20.);\n    \n    \n    float d = rayMarch(rayOrigin, rayDir);\n    vec3 p = rayOrigin+rayDir*d;\n    float l = getLight(p, sun);\n    col = vec3(l);\n    \n    \n    fragColor = vec4(col,1.);\n} \n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}