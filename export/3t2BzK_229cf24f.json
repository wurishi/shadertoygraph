{"ver":"0.1","info":{"id":"3t2BzK","date":"1599355835","viewed":55,"name":"my-work-room + -","username":"jorge2017a1","description":"my-work-room + -","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["myworkroom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a1-\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define MIN_DIST 0.001\n\nvec3 light_pos1   ;\nvec3 light_color1 ;\nvec3 light_pos2   ;\nvec3 light_color2 ;\n    \n//Box function\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\n///----------Operacion de Distancia--------\nfloat intersectSDF(float distA, float distB)\n{\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) \n{\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) \n{\n    return max(distA, -distB);\n}\n//-------------------------------------------\nvec3 opU3(vec3 d1, vec3 d2 )\n{\n  vec3 resp;\n    if (d1.x < d2.x){ \n        resp = d1;\n    }\n    else\n    {\n        resp = d2;\n    }\n     \n   return resp; \n}\n\n\n\n///------------------------------------\nvec3 GetDist(vec3 p  ) \n{\t\n\n    float d, dif1, dif2;\n    vec3 res;\n    vec3 pp,p1, p2,p3; \n    res = vec3(9999.0, -1.0,-1.0);\n    \n  \n    \n    //escala 100/20.0\n    p.z=p.z-10.0;\n    p.x=p.x+10.0;\n    p.y=p.y-5.0;\n    \n    float escala=10.0;\n    vec3 paredIzq=vec3(20.0,267.0,264.0)/escala;\n    float sdparedIzq= sdBox(p-vec3(0.0),  paredIzq );\n    \n    vec3 paredTecho=vec3(252.0,20.0,264.0)/escala;\n    float sdparedTecho= sdBox(p-vec3((262.0+10.0)/escala,(267.0+20.0)/escala,0.0),  paredTecho );\n    \n    \n    vec3 paredDer=vec3(20.0,267.0,264.0)/escala;\n    float sdparedDer= sdBox(p-vec3(2.0*(262.0+10.),0.0,0.0)/escala,  paredDer );\n    \n    \n    vec3 pisoInf=vec3(252.0,20.0,264.0)/escala;\n    float sdpisoInf= sdBox(p-vec3((262.0+10.0),(-220.0-20.0),0.0)/escala,  paredTecho );\n    \n    vec3 paredAtras=vec3(252.0,267.0,20.0)/escala;\n    float sdparedAtras= sdBox(p-vec3((252.0+15.0),0.0,264.0)/escala,  paredAtras );\n    \n    \n    vec3 paredFrente=vec3(252.0,267.0,20.0)/escala;\n    float sdparedFrente= sdBox(p-vec3((252.0+15.0),0.0,-264.0)/escala,  paredAtras );\n    \n    \n    vec3 puertaFrente=vec3(90.5,198.0,20.0+5.0)/escala;\n    vec3 posPuerta1=vec3((252.0+15.0+252.0/2.0+20.0+15.0),0.0,-264.0)/escala;\n    float sdPuertaFrente= sdBox(p-posPuerta1,  puertaFrente );\n    \n    \n    \n    vec3 puertaAtras=vec3(78.5,197.0,20.0+5.0)/escala;\n    vec3 posPuerta2=vec3((252.0+15.0+252.0/2.0+20.0+15.0+10.0),0.0-25.0,264.0)/escala;\n    float sdPuertaAtras= sdBox(p-posPuerta2,  puertaAtras );\n    \n    \n    vec3 ventanaAtras=vec3(101.5,115.5,20.0+5.0)/escala;\n    vec3 posVentana=vec3(252.0,82.0-25.0,264.0)/escala;\n    float sdVentanaAtras= sdBox(p-posVentana,  ventanaAtras );\n    \n    \n    \n    \n    \n    res =opU3(res, vec3(sdparedIzq,30.0,-1)); \n    res =opU3(res, vec3(sdparedTecho,1.0,-1)); \n    res =opU3(res, vec3(sdparedDer,30.0,-1)); \n    res =opU3(res, vec3(sdpisoInf,30.0,-1)); \n    \n    \n    \n    /*\n    float DifParedYFrente= differenceSDF(sdparedFrente, sdPuertaFrente);\n    res =opU3(res, vec3(DifParedYFrente,1.0,-1)); \n    */\n    \n    float DifParedYAtras= differenceSDF(sdparedAtras, sdPuertaAtras);\n    DifParedYAtras= differenceSDF(DifParedYAtras, sdVentanaAtras);\n    \n    res =opU3(res, vec3(DifParedYAtras,30.0,-1)); \n    \n    \n    \n    //-------mesa1\n    vec3 Mesa=vec3(120.0,2.0,80.0)/escala;\n    vec3 posMesa=vec3(252.0+10.0,-(70.0+70.0)/2.0,145.0)/escala;\n    float sdMesaTabla= sdBox(p-posMesa,  Mesa );\n    res =opU3(res, vec3(sdMesaTabla,1.0,-1)); \n    \n    //patas de mesa\n    vec3 pataA1=vec3(5.0,70.0,3.0)/escala;\n    vec3 posPata1=vec3((150.0+20.0),-(70.0+70.0),160.0)/escala;\n    float sdPata1=sdBox(p-posPata1,  pataA1 );    \n    res =opU3(res, vec3(sdPata1,3.0,-1)); \n    \n    \n    vec3 pataA2=vec3(5.0,70.0,3.0)/escala;\n    vec3 posPata2=vec3((150.0+120.0+54.0+30.0),-(70.0+70.0),160.0)/escala;\n    float sdPata2=sdBox(p-posPata2,  pataA2 );    \n    res =opU3(res, vec3(sdPata2,3.0,-1)); \n    \n    \n    vec3 pataA3=vec3(5.0,70.0,3.0)/escala;\n    vec3 posPata3=vec3((150.0+20.0),-(70.0+70.0),74.0)/escala;\n    float sdPata3=sdBox(p-posPata3,  pataA3 );    \n    res =opU3(res, vec3(sdPata3,3.0,-1)); \n    \n    \n    vec3 pataA4=vec3(5.0,70.0,3.0)/escala;\n    vec3 posPata4=vec3((150.0+120.0+54.0+30.0),-(70.0+70.0),74.0)/escala;\n    float sdPata4=sdBox(p-posPata4,  pataA4 );    \n    res =opU3(res, vec3(sdPata4,3.0,-1)); \n    \n    \n    \n    //--------mesa2\n    vec3 Mesa2=vec3(48.3,5.0,198.0)/escala;\n    vec3 posMesa2=vec3(100.0-15.0,(-83.0+20.0+10.0),0.0)/escala;\n    float sdMesa2Sup=sdBox(p-posMesa2,  Mesa2 );    \n    res =opU3(res, vec3(sdMesa2Sup,4.0,-1)); \n    \n    \n    vec3 Mesa2I=vec3(48.3,5.0,198.0)/escala;\n    vec3 posMesa2I=vec3(100.0-15.0,(-110.0-60.0),0.0)/escala;\n    float sdMesa2SupI=sdBox(p-posMesa2I,  Mesa2I);    \n    res =opU3(res, vec3(sdMesa2SupI,4.0,-1)); \n    \n    \n    vec3 Mesa2S=vec3(48.3,5.0,198.0)/escala;\n    vec3 posMesa2S=vec3(100.0-15.0,(150.0-60.0),0.0)/escala;\n    float sdMesa2SupS=sdBox(p-posMesa2S,  Mesa2S);    \n    res =opU3(res, vec3(sdMesa2SupS,4.0,-1)); \n    \n    \n    vec3 pataB1=vec3(3.3,146.5,3.3)/escala;\n    vec3 posPataB1=vec3(50.0-10.0,(-25.0-20.0-5.0),195.0)/escala;\n    float sdPataB1=sdBox(p-posPataB1,  pataB1);    \n    res =opU3(res, vec3(sdPataB1,4.0,-1)); \n    \n    \n    vec3 pataB2=vec3(3.3,146.5,3.3)/escala;\n    vec3 posPataB2=vec3(50.0+48.0+20.0+10.0,(-25.0-20.0-5.0),195.0)/escala;\n    float sdPataB2=sdBox(p-posPataB2,  pataB2);    \n    res =opU3(res, vec3(sdPataB2,4.0,-1)); \n    \n    \n    vec3 pataB3=vec3(3.3,146.5,3.3)/escala;\n    vec3 posPataB3=vec3(50.0-10.0,(-25.0-20.0-5.0),-195.0)/escala;\n    float sdPataB3=sdBox(p-posPataB3,  pataB3);    \n    res =opU3(res, vec3(sdPataB3,4.0,-1)); \n    \n    \n    vec3 pataB4=vec3(3.3,146.5,3.3)/escala;\n    vec3 posPataB4=vec3(50.0+48.0+20.0+10.0,(-25.0-20.0-5.0),-195.0)/escala;\n    float sdPataB4=sdBox(p-posPataB4,  pataB4);    \n    res =opU3(res, vec3(sdPataB4,4.0,-1)); \n    \n    \n    \n    d = res.x;\n    \n    //return (dist, id_color, id_material)\n    return vec3(res.x, res.y, res.z);\n}\n\n\n\n///-----------------------------------------\nvec3 LightShading(vec3 Normal,vec3 toLight,vec3 toEye,vec3 color)\n{\n    vec3 toReflectedLight=reflect(-toLight, Normal);\n    vec3 diffuse = max(0.,dot(Normal,-toLight))*color;\n    //vec3 specular = pow(max(0.,dot(Normal,normalize(-toLight-V))),100.)*vec3(1.,1.,1.); \n    float specularf=max(dot(toReflectedLight, toEye),0.0);\n    specularf=pow(specularf, 100.0);\n    vec3 specular =specularf*vec3(1.0);\n    \n    return diffuse + specular;\n}\n//------------------------------------------------\n\n\n\nvec3 GetNormal(vec3 p) \n{\n\tfloat d = GetDist(p).x;\n    //Texture of white and black in image\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\n\n//---------actualizacion por Shane---28-may-2020    ...gracias\nfloat RayMarch(vec3 ro, vec3 rd) \n{\n\t\n    // The extra distance might force a near-plane hit, so\n    // it's set back to zero.\n    float dO = 0.; \n    vec3 dS=vec3(9999.0,-1.0,-1.0);\n    float marchCount = 0.0;\n    vec3 p;\n    \n    //Determines size of shadow\n    for(int i=0; i<MAX_STEPS; i++) \n    {\n    \tp = ro + rd*dO;\n        dS = GetDist(p);\n        \n        if(dO>MAX_DIST || abs(dS.x)<MIN_DIST) break;\n        dO += dS.x;\n        //marchCount+= 1./dS.x*.75;\n        marchCount++;\n    }\n    \n    mObj.dist = dO;\n    mObj.id_color = dS.y;\n    mObj.marchCount=marchCount;\n    mObj.id_material=dS.z;\n    mObj.normal=GetNormal(p);\n    return dO;\n}\n\n//---------------------------------------------------\n\n\n\nfloat GetShadow(vec3 p, vec3 plig) \n{\n    vec3 lightPos = plig;\n    //Determine movement of light ex. shadow and light direction and diffusion\n   \n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*MIN_DIST*2., l );\n    if(d<length(lightPos-p)) dif *= .1;\n    \n    return dif;\n}\n\n//----------------------------------------------------\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\n\n//Creado por dr2 en 2020-07-28\n//https://www.shadertoy.com/view/3lfBz8\nvec3 getMouse(vec3 ro)\n{    \n     vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  float tCur = iTime;\n    \n  float az = 0.;\n  float el = -0.15 * PI;\n\n    az += 2. * PI * mPtr.x;\n    el += PI * mPtr.y;\n \n    \n    \n  mat3 vuMat = StdVuMat (el, az);\n\treturn ro*vuMat;\n}\n\n//-------------------------------------------\n\n\n//-------------------------------\nvec3 getColorTextura( vec3 p, vec3 nor,  int i)\n{\n    \n\tif (i==100 ) { return tex3D(iChannel0, p/32., nor); }\n\tif (i==101 ) { return tex3D(iChannel1, p/32., nor); }\n\tif (i==102 ) { return tex3D(iChannel2, p/32., nor); }\n\tif (i==103 ) { return tex3D(iChannel3, p/32., nor); }\n   \n    \n}\n//-------------------------------\nvec3 Getluz(vec3 p, vec3 ro, vec3 rd, vec3 nor , vec3 colobj ,vec3 plight_pos)\n{   \n     \n    vec3 lightPos = plight_pos;\n    float intensity=1.0;\n\tconst float shininess = 100.0;\n\tvec3 l = normalize( p-lightPos);\n    vec3 v = normalize( p-ro);\n    vec3 h = normalize(v + l);\n    float diff = dot(nor, l);\n    float spec = max(0.0, pow(dot(nor, h), shininess)) * float(diff > 0.0);\n\tvec3 result = LightShading(nor,l,v, colobj)*intensity;\n    \n    if (mObj.blnShadow==true)\n    {       \n    \tfloat fhadow=GetShadow(p,plight_pos);\n    \treturn result*fhadow;\n        \n        //vec3 psh= p_shadingv3(p,  nor,  ro,  rd,  plight_pos,   colobj );\n    \t//return result* psh;\n     }\n    else\n    {\n    \treturn result;\n    }\n   \t\n}\n///-------------------------------------\n\n//-------------------------------------------------\n\nvec3 GetColorYMaterial(vec3 p,  vec3 n, vec3 ro,  vec3 rd, int id_color, float id_material)\n{\n   \tvec3 colobj;\n    \n    \n    \n    \n    if (id_color<100)\n\t\t{ colobj=getColor(int( id_color)); }\n    \n    \n    if ( float( id_color)>=100.0  && float( id_color)<=199.0 ) \n \t{  vec3 coltex=getColorTextura(p, n, int( id_color));\n        colobj=coltex;\n\t}\n\n    \n    \n    \n    return colobj;\n}\n\n\n///---------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n   mObj.uv=uv;\n    \n    float t;\n    t=mod(iTime*1.0,360.0);\n    itime=t;\n\tmObj.blnShadow=true;\n        \n \n \tlight_pos1   = vec3(10.0, 6.0, 10.0 ); \n \tlight_color1 = vec3( 1.0 );\n\n \tlight_pos2   = vec3( -5.0, 3.0, -5.0 );\n \tlight_color2 = vec3( 1.0, 1.0, 1.0 );\n \n\n    \n    \n    vec3 ro=vec3(20.0,7.0,-20.0+15.0*sin(t));\n    //ro= getMouse(ro);       \n    vec3 rd=normalize(vec3(uv,1.0));\n    \n    \n    light_pos1+=ro;\n    light_pos2+=ro;\n    \n    \n    vec3 col = vec3(0);\n    \n    TObj Obj;\n    \n    \n    mObj.rd=rd;\n    mObj.ro=ro;\n\n\t \n    \n    float d = RayMarch(ro, rd);\n    Obj=mObj;\n    \n  \n    vec3 p = (ro + rd * d ); \n    \n    mObj.p=p;\n    mObj.dist =d;\n    vec3 nor=mObj.normal;\n\n    vec3 colobj;\n    colobj=GetColorYMaterial( p, nor, ro, rd,  int( Obj.id_color), Obj.id_material);\n    \n\n  \tfloat dif1=1.0;\n   \tvec3 col2,col3;\n    \n    vec3 result;\n    result=  Getluz( p,ro,rd, nor, colobj ,light_pos1);\n    result+= Getluz( p,ro,rd, nor, colobj ,light_pos2);\n    result/=1.25;\n    col3=result;\n    col= col3*dif1;\n    \n  \t\n    //sugerencia por dean_the_coder,\n    //col *= 1.0 - pow(d / 100.0, 1.5);\n    col *= 1.0 - pow(d /(100.0) , 3.5);    \n    col = pow(col, vec3(1.0/2.2));  \n    \n    fragColor = vec4(col,1.0);\n\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"///------------------------------------\nstruct TObj\n{\n    float id_color;\n    float id_objeto;\n    float id_material;\n    float dist;\n    vec3 normal;\n    vec3 ro;\n    vec3 rd;\n    vec2 uv;\n    vec3 color;\n    vec3 p;\n    vec3 rf;\n    float marchCount;\n    bool blnShadow; \n};\n\n\n  \n    \nTObj mObj;\nvec3 glpRoRd;\nvec2 gres2;\nfloat itime;\n\n\n\n#define PI 3.14159265358979323846264\n#define PI2 6.28318530717\n#define TriplePI (3.0 * PI)\n#define DoublePI (2.0 * PI)\n#define HalfPI (PI / 2.0)\n#define MATERIAL_NO -1.0\n\n\nfloat saturate(float f)\n{\n\treturn clamp(f,0.0,1.0);\n}\n\n\n\n\n///Gracias por la Ayuda de SHane...16-jun-2020\n// Creditos a Shane por su funcion tex3D\n// Tri-Planar blending function. Based on an old Nvidia writeup:\n// GPU Gems 3 - Ryan Geiss: http://http.developer.nvidia.com/GPUGems3/gpugems3_ch01.html\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){    \n    \n    // Ryan Geiss effectively multiplies the first line by 7. It took me a while to realize that \n    // it's largely redundant, due to the division process that follows. I'd never noticed on \n    // account of the fact that I'm not in the habit of questioning stuff written by Ryan Geiss. \n    n = max(n*n - .2, .001); // max(abs(n), 0.001), etc.\n    n /= dot(n, vec3(1)); \n    //n /= length(n); \n    \n    // Texure samples. One for each plane.\n    vec3 tx = texture(tex, p.yz).xyz;\n    vec3 ty = texture(tex, p.zx).xyz;\n    vec3 tz = texture(tex, p.xy).xyz;\n    \n    // Multiply each texture plane by its normal dominance factor.... or however you wish\n    // to describe it. For instance, if the normal faces up or down, the \"ty\" texture sample,\n    // represnting the XZ plane, will be used, which makes sense.\n    \n    // Textures are stored in sRGB (I think), so you have to convert them to linear space \n    // (squaring is a rough approximation) prior to working with them... or something like that. \n    // Once the final color value is gamma corrected, you should see correct looking colors.\n    return mat3(tx*tx, ty*ty, tz*tz)*n; // Equivalent to: tx*tx*n.x + ty*ty*n.y + tz*tz*n.z;\n\n}\n\n\n\n\nfloat random() \n{\n\treturn fract(sin(dot(mObj.uv, vec2(12.9898, 78.233)) ) * 43758.5453);\n}\n\n\n\nvec3 checkerBoard(float u, float v, float interval)\n{\n    float uu = floor(u/interval*2.0);\n    float vv = floor(v/interval*2.0);\n    float p =mod(uu+vv,2.0);\n    return vec3(0.1+0.9*p);\n}\n\n\n//----------------------------------------------------\n\n\nvec3 getColor(int i)\n{\n    \n    \n    float m;\nif (i==-2 ) { return mObj.color; }       \nif (i==0 ) { return vec3(0,0,0)/255.0; }\nif (i==1 ) { return vec3(255.,255.,255.)/255.0; }\nif (i==2 ) { return vec3(255,0,0)/255.0; }\nif (i==3 ) { return vec3(0,255,0)/255.0; }\nif (i==4 ) { return vec3(0,0,255)/255.0; }\nif (i==5 ) { return vec3(255,255,0)/255.0; }\nif (i==6 ) { return vec3(0,255,255)/255.0; }\nif (i==7 ) { return vec3(255,0,255)/255.0; }\nif (i==8 ) { return vec3(192,192,192)/255.0; }\nif (i==9 ) { return vec3(128,128,128)/255.0; }\nif (i==10 ) { return vec3(128,0,0)/255.0; }\nif (i==11 ) { return vec3(128,128,0)/255.0; }\nif (i==12 ) { return vec3(0,128,0)/255.0; }\nif (i==13 ) { return vec3(128,0,128)/255.0; }\nif (i==14 ) { return vec3(0,128,128)/255.0; }\nif (i==15 ) { return vec3(0,0,128)/255.0; }\n    \nif (i==16 ) { return vec3(255, 204, 188)/255.0; }\nif (i==17 ) { return vec3(0.8, 0.8, 0.8); }\nif (i==18 ) { return vec3(0.5, 0.5, 0.8); }\n\n    if(i== 19 )\n    {  return vec3(1, 0.5, 0);    } \n    if(i== 20 )\n    { return vec3(1.0, 1.0, 1.0); } \n    if(i== 21 )\n    {  return vec3(247./255., 168./255.,  184./255.);  } \n    if(i== 22 )\n    { return vec3(0, 1, 1);} \n    if(i== 23 )\n    { return vec3(85./255., 205./255., 252./255.); } \n    \n     if(i== 24 )\n    { return  vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );;  } \n    \n    \n    if(i== 25 )\n    { return vec3(0.8,0.8,0.8)*vec3( 0.3, 0.2, 1.0 ); } \n    \n    if(i== 26 )\n    { return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 ); } \n   \n    \n    if(i== 27 )\n    { \n        float c = 0.8+mod((floor(mObj.p.x) + floor(mObj.p.z) + floor(mObj.p.y)), 2.0);\n        return vec3(1.0,0.01,0.01)*vec3( 0.3, 0.2, 1.0 )*c; \n    } \n     \n    \n    if(i== 28 )\n    { \n    \treturn checkerBoard(mObj.p.x, mObj.p.z, 3.0);\n    } \n    \n    if(i== 29 )\n    { \n    \treturn checkerBoard(mObj.p.x, mObj.p.z, 3.0)*vec3(0.425, 0.56, 0.9)*vec3( 0.3, 0.2, 1.0 );\n    } \n    \n   if(i== 30 )\n    { \n      return vec3(252.0,195.0,172.0)/255.0;\n\t}\n}\n\n///--------------------------------------------\n\n","name":"Common","description":"","type":"common"}]}