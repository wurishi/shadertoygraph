{"ver":"0.1","info":{"id":"ltVXDG","date":"1485810816","viewed":477,"name":"Revealing the Van","username":"slarsen","description":"does a reveal thing","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["vandamme"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//global variables\n\n\t//kernels\nmat3 blur = mat3(\n 0.111, 0.111, 0.111, // first column (not row!)\n 0.111, 0.111, 0.111, // second column\n 0.111, 0.111, 0.111 // third column\n);\n\nmat3 identity = mat3(\n 0.0, 0.0, 0.0, // first column (not row!)\n 0.0, 1.0, 0.0, // second column\n 0.0, 0.0, 0.0 // third column\n);\n\nmat3 edgeDetect = mat3(\n 1.0, 0.0, -1.0, // first column (not row!)\n 0.0, 0.0, 0.0, // second column\n -1.0, 0.0, 1.0 // third column\n);\n\nmat3 sharpen = mat3(\n 0., -1, 0.0, // first column (not row!)\n -1, 5, -1, // second column\n 0., -1, 0.0 // third column\n);\n\n\t//pseudo-literals\nconst vec2 Location = vec2(0.5, 0.4);\nconst float Radius = 0.2;\nconst vec4 ZeroColor = vec4(0.0,0.0,0.0,0.0);\n\n//helper functions\n\n\t//conditionals\n\t//return either 0.0 or 1.0\nfloat when_eq(float x, float y) {\n  return 1.0 - abs(sign(x - y));\n}\n\nfloat when_neq(float x, float y) {\n  return abs(sign(x - y));\n}\n\nfloat when_gt(float x, float y) {\n  return max(sign(x - y), 0.0);\n}\n\nfloat when_lt(float x, float y) {\n  return max(sign(y - x), 0.0);\n}\n\n\t//image processing\nvec4 sample(const int x, const int y, vec2 fragCoord, sampler2D texture, vec2 textResolution)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy * textResolution.xy;\n\tuv = (uv + vec2(x, y)) / textResolution.xy ;\n \treturn texture(texture, uv);\n}\n\nvec4 filter(vec2 uv, mat3 kernel , sampler2D texture, vec2 textResolution)\n{\n \tvec4 sum = sample(-1, -1, uv, texture, textResolution) * kernel[0][0]\n \t\t\t + sample(-1, 0, uv, texture, textResolution) * kernel[0][1]\n \t\t\t + sample(-1, 1, uv, texture, textResolution) * kernel[0][2]\n \t\t\t + sample( 0, -1, uv, texture, textResolution) * kernel[1][0]\n \t\t\t + sample( 0, 0, uv, texture, textResolution) * kernel[1][1]\n \t\t\t + sample( 0, 1, uv, texture, textResolution) * kernel[1][2]\n \t\t\t + sample( 1, -1, uv, texture, textResolution) * kernel[2][0]\n \t\t\t + sample( 1, 0, uv, texture, textResolution) * kernel[2][1]\n \t\t\t + sample( 1, 1, uv, texture, textResolution) * kernel[2][2];\n \n return sum;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n \tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 m = iMouse / iResolution.xxxx;\n    \n \t//Correct for aspect ratio\n \tvec2 newUV = uv;\n    newUV.y *= iResolution.y / iResolution.x;\n    \n    \n//Kernels avalible: blur, sharpen, identity, edgeDetect  \n    \n    //kernel0 used on iChannel0\t\n    mat3 kernel0 = blur;\n    //kernel1 used on iChannel1\n    mat3 kernel1 = sharpen;\n    \n    vec4 Layer1 = filter(fragCoord.xy, kernel0, iChannel0, iChannelResolution[0].xy);\n \tvec4 Layer2 = filter(fragCoord.xy, kernel1, iChannel1, iChannelResolution[1].xy);\n    \n    vec4 color = ZeroColor; //must be zero initalized \n    \n    \t//color = layer1 when: length(m.xy - newUV) > Radius\n    color += when_gt(length(m.xy - newUV), Radius) * Layer1;\n    \n    \t//color = layer2 when: length(m.xy - newUV) < Radius\n \tcolor += when_lt(length(m.xy - newUV), Radius) * Layer2;\n    \n \tfragColor = color;\n}","name":"Image","description":"","type":"image"}]}