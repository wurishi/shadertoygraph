{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// Overly satisfying by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/Mts3zM\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//This might look like a lot of code but the base implementation of the gif itself is ~10loc\n\n#define time iTime*1.2\n#define pi 3.14159265\n\n#define NUM 20.\n#define PALETTE vec3(.0, 1.4, 2.)+1.5\n\n#define COLORED\n#define MIRROR\n//#define ROTATE\n#define ROT_OFST\n#define TRIANGLE_NOISE\n\n//#define SHOW_TRIANGLE_NOISE_ONLY\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\nfloat tri(in float x){return abs(fract(x)-.5);}\nvec2 tri2(in vec2 p){return vec2(tri(p.x+tri(p.y*2.)),tri(p.y+tri(p.x*2.)));}\nmat2 m2 = mat2( 0.970,  0.242, -0.242,  0.970 );\n\n//Animated triangle noise, cheap and pretty decent looking.\nfloat triangleNoise(in vec2 p)\n{\n    float z=1.5;\n    float z2=1.5;\n\tfloat rz = 0.;\n    vec2 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec2 dg = tri2(bp*2.)*.8;\n        dg *= mm2(time*.3);\n        p += dg/z2;\n\n        bp *= 1.6;\n        z2 *= .6;\n\t\tz *= 1.8;\n\t\tp *= 1.2;\n        p*= m2;\n        \n        rz+= (tri(p.x+tri(p.y)))/z;\n\t}\n\treturn rz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   float aspect = iResolution.x/iResolution.y;\n   float w = 50./sqrt(iResolution.x*aspect+iResolution.y);\n\n    vec2 p = fragCoord.xy / iResolution.xy*2.-1.;\n\tp.x *= aspect;\n    p*= 1.05;\n    vec2 bp = p;\n    \n    #ifdef ROTATE\n    p *= mm2(time*.25);\n    #endif\n    \n    float lp = length(p);\n    float id = floor(lp*NUM+.5)/NUM;\n    \n    #ifdef ROT_OFST\n    p *= mm2(id*11.);\n    #endif\n    \n    #ifdef MIRROR\n    p.y = abs(p.y); \n    #endif\n    \n    //polar coords\n    vec2 plr = vec2(lp, atan(p.y, p.x));\n    \n    //Draw concentric circles\n    float rz = 1.-pow(abs(sin(plr.x*pi*NUM))*1.25/pow(w,0.25),2.5);\n    \n    //get the current arc length for a given id\n    float enp = plr.y+sin((time+id*5.5))*1.52-1.5;\n    rz *= smoothstep(0., 0.05, enp);\n    \n    //smooth out both sides of the arcs (and clamp the number)\n    rz *= smoothstep(0.,.022*w/plr.x, enp)*step(id,1.);\n    #ifndef MIRROR\n    rz *= smoothstep(-0.01,.02*w/plr.x,pi-plr.y);\n    #endif\n    \n    #ifdef TRIANGLE_NOISE\n    rz *= (triangleNoise(p/(w*w))*0.9+0.4);\n    vec3 col = (sin(PALETTE+id*5.+time)*0.5+0.5)*rz;\n    col += smoothstep(.4,1.,rz)*0.15;\n    col *= smoothstep(.2,1.,rz)+1.;\n    \n    #else\n    vec3 col = (sin(PALETTE+id*5.+time)*0.5+0.5)*rz;\n    col *= smoothstep(.8,1.15,rz)*.7+.8;\n    #endif\n    \n    #ifndef COLORED\n    col = vec3(dot(col,vec3(.7)));\n    #endif\n    \n    #ifdef SHOW_TRIANGLE_NOISE_ONLY\n    col = vec3(triangleNoise(bp));\n    #endif\n    \n\tfragColor = vec4(col,1.0);\n    \n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Mts3zM","date":"1420431701","viewed":7561,"name":"Overly satisfying","username":"nimitz","description":"Saw this gif on [url=http://imgur.com/0het78q]imgur[/url], thought it would be nice to have an implementation here. Also using this as an opportunity to show a thing I call \"triangle noise\". Try undefining line 9 to 13.","likes":245,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","cheap","gif","imgur"],"hasliked":0,"parentid":"","parentname":""}}