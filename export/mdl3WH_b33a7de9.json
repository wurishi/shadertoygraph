{"ver":"0.1","info":{"id":"mdl3WH","date":"1666098237","viewed":75,"name":"HelloTriangle","username":"WMays287","description":"Basic example of triangle rasterization using barycentric coordinates","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rasterizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2[] vertices = vec2[] (\n    vec2(0.5, 0.1),\n    vec2(0.1, 0.9),\n    vec2(0.9, 0.9)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.y = 1. - uv.y; // Flip vertical\n    \n    // Convert to barycentric coordinates\n    float det   = (vertices[1].y - vertices[2].y) * (vertices[0].x - vertices[2].x)\n                + (vertices[2].x - vertices[1].x) * (vertices[0].y - vertices[2].y);\n    if (det == 0.) {\n        return;\n    }\n    \n    float alpha = (vertices[1].y - vertices[2].y) * (uv.x - vertices[2].x)\n                + (vertices[2].x - vertices[1].x) * (uv.y - vertices[2].y);\n    float beta  = (vertices[2].y - vertices[0].y) * (uv.x - vertices[2].x)\n                + (vertices[0].x - vertices[2].x) * (uv.y - vertices[2].y);\n    \n    alpha /= det; beta /= det;\n    float gamma = 1. - alpha - beta;\n    \n    // Check if we're inside the triangle\n    bool inTriangle = (alpha >= 0.) && (alpha <= 1.)\n                   && (beta  >= 0.) && (beta  <= 1.)\n                   && (gamma >= 0.) && (gamma <= 1.);\n    \n    fragColor = inTriangle ? vec4(alpha, beta, gamma, 1.) : vec4(0., 0., 0., 1.);\n}","name":"Image","description":"","type":"image"}]}