{"ver":"0.1","info":{"id":"4lKfzy","date":"1542989718","viewed":293,"name":"Mandelbulb Variant","username":"coler706","description":"I switched out some formulas in https://www.shadertoy.com/view/MsfGRr to create my own fractal.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","distancefield","mandelbulb","kindernoiser"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// A port of my 2007 demo Kindernoiser: https://www.youtube.com/watch?v=9AX8gNyrSWc (http://www.pouet.net/prod.php?which=32549)\n//\n// More (oudated, half broken) info here:  https://iquilezles.org/articles/juliasets3d\n\n\n// antialais level (1, 2, 3...)\n#define AA 2\n\n// undefine this to use numerical normals (central differences)\n//#define ANALYTIC\n\nvec4 qsqr( in vec4 a ) // square a quaterion\n{\n    return vec4( a.x*a.x - a.y*a.y - a.z*a.z - a.w*a.w,\n                 2.0*a.x*a.y,\n                 2.0*a.x*a.z,\n                 2.0*a.x*a.w );\n}\n\nconst int numIterations = 10;\nvoid powN(float p, inout vec3 z, float zr0, inout float dr)\n{\n    float zx0 = asin(z.x / zr0);\n    float zy0 = asin(z.y / zr0);\n    float zz0 = asin(z.z / zr0);\n    float zr = pow(zr0, p - 1.0);\n    float zx = zx0 * p;\n    float zy = zy0 * p;\n    float zz = zz0 * p;\n\n    dr = zr * dr * p + 1.0;\n    zr *= zr0;\n\n    z = zr * normalize(vec3(sin(zx),sin(zy), sin(zz)));\n}\n\nfloat map( in vec3 p, out vec4 oTrap, in vec4 c )\n{\n    vec3 zz=p;\n    vec3 cc=p;\n    vec4 z = normalize(vec4(p.x+p.y+p.z,p.x-p.y-p.z,-p.x-p.y+p.z,-p.x+p.y-p.z))*length(p);\n    vec4 c0 =vec4(p,0.0);// normalize(vec4(p.x+p.y+p.z,p.x-p.y-p.z,-p.x-p.y+p.z,-p.x+p.y-p.z))*length(p);//vec4(p,0.0);\n    float md2 = 1.0;\n    float mz2 = dot(z,z);\n\n    vec4 trap = vec4(abs(z.xyz),dot(z,z));\n\n    for( int i=0; i<numIterations; i++ )\n    {\n        //md2 *= 16.0*pow(length(z),15.0);   // dz -> 2·z·dz, meaning |dz| -> 2·|z|·|dz| (can take the 4 out of the loop and do an exp2() afterwards)\n        //z = qsqr(qsqr(qsqr(qsqr(z)))) + c0;  // z  -> z^2 + c\n        powN(5.0,zz,length(zz),md2);\n\t\tzz=zz+cc;\n        trap = min( trap, vec4(abs(zz.xyz),dot(zz,zz)) );\n\n        mz2 = dot(zz,zz);\n        if(mz2>4.0) break;\n    }\n    \n    oTrap = trap;\n\n    return 0.5*length(zz)/md2*log(length(zz));  // d = 0.5·|z|·log|z| / |dz|\n}\n\n#ifdef ANALYTIC\n// analytic normal\nvec3 calcNormal( in vec3 p, in vec4 c )\n{\n    vec4 z = vec4(p,0.0);\n\n    mat4x4 J = mat4x4(1,0,0,0,  // identity\n                      0,1,0,0,  \n                      0,0,1,0,  \n                      0,0,0,1 );\n\n  \tfor(int i=0; i<numIterations; i++)\n    {\n        J = J*mat4x4(z.x, -z.y, -z.z, -z.w, // chain rule of jacobians (removed the 2 factor)\n                     z.y,  z.x,  0.0,  0.0,\n                     z.z,  0.0,  z.x,  0.0, \n                     z.w,  0.0,  0.0,  z.x);\n\n        z = qsqr(z) + c; // z -> z2 + c\n        \n        if(dot(z,z)>4.0) break;\n    }\n\n    return normalize( (J*z).xyz );\n}\n#else\n// numerical method\nvec3 calcNormal( in vec3 pos, in vec4 c )\n{\n    vec4 kk;\n    vec2 e = vec2(1.0,-1.0)*0.5773*0.001;\n    return normalize( e.xyy*map( pos + e.xyy, kk, c ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx, kk, c ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy, kk, c ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx, kk, c ) );\n}\n#endif\n\nfloat intersect( in vec3 ro, in vec3 rd, out vec4 res, in vec4 c )\n{\n    vec4 tmp;\n    float resT = -1.0;\n\tfloat maxd = 20.0;\n    float h = 1.0;\n    float t = 0.0;\n    for( int i=0; i<300; i++ )\n    {\n        if( h<0.0001||t>maxd ) break;\n\t    h = map( ro+rd*t, tmp, c );\n        t += h;\n    }\n    if( t<maxd ) { resT=t; res = tmp; }\n\n\treturn resT;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k, in vec4 c )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<64; i++ )\n    {\n        vec4 kk;\n        float h = map(ro + rd*t, kk, c);\n        res = min( res, k*h/t );\n        if( res<0.001 ) break;\n        t += clamp( h, 0.01, 0.5 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec3 render( in vec3 ro, in vec3 rd, in vec4 c )\n{\n\tconst vec3 sun = vec3(  0.577, 0.577,  0.577 );\n    \n\tvec4 tra;\n\tvec3 col;\n    float t = intersect( ro, rd, tra, c );\n    if( t < 0.0 )\n    {\n     \tcol = vec3(0.7,0.9,1.0)*(0.7+0.3*rd.y);\n\t\tcol += vec3(0.8,0.7,0.5)*pow( clamp(dot(rd,sun),0.0,1.0), 48.0 );\n\t}\n\telse\n\t{\n        vec3 mate = vec3(1.0,0.8,0.7)*0.3;\n\t\t//mate.x = 1.0-10.0*tra.x;\n        \n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, c );\n        \n\t\tfloat occ = clamp(2.5*tra.w-0.15,0.0,1.0);\n\t\t\n\n        col = vec3(0.0);\n\n        // sky\n        {\n        float co = clamp( dot(-rd,nor), 0.0, 1.0 );\n        vec3 ref = reflect( rd, nor );\n        //float sha = softshadow( pos+0.0005*nor, ref, 0.001, 4.0, c );\n        float sha = occ;\n        sha *= smoothstep( -0.1, 0.1, ref.y );\n        float fre = 0.1 + 0.9*pow(1.0-co,5.0);\n            \n\t\tcol  = mate*0.3*vec3(0.8,0.9,1.0)*(0.6+0.4*nor.y)*occ;\n\t\tcol +=  2.0*0.3*vec3(0.8,0.9,1.0)*(0.6+0.4*nor.y)*sha*fre;\n        }\n\n        // sun\n        {\n        const vec3 lig = sun;\n        float dif = clamp( dot( lig, nor ), 0.0, 1.0 );\n        float sha = softshadow( pos, lig, 0.001, 64.0, c );\n        vec3 hal = normalize( -rd+lig );\n        float co = clamp( dot(hal,lig), 0.0, 1.0 );\n        float fre = 0.04 + 0.96*pow(1.0-co,5.0);\n        float spe = pow(clamp(dot(hal,nor), 0.0, 1.0 ), 32.0 );\n        col += mate*3.5*vec3(1.00,0.90,0.70)*dif*sha;\n        col +=  7.0*3.5*vec3(1.00,0.90,0.70)*spe*dif*sha*fre;\n        }\n\n        // extra fill\n        {\n        const vec3 lig = vec3( -0.707, 0.000, -0.707 );\n\t\tfloat dif = clamp(0.5+0.5*dot(lig,nor), 0.0, 1.0 );\n        col += mate* 1.5*vec3(0.14,0.14,0.14)*dif*occ;\n        }\n        \n        // fake SSS\n        {\n        float fre = clamp( 1.+dot(rd,nor), 0.0, 1.0 );\n        col += mate* mate*0.6*fre*fre*(0.2+0.8*occ);\n        }\n    }\n\n\treturn pow( col, vec3(0.4545) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // anim\n    float time = iTime*.15;\n    vec4 c = 0.45*cos( vec4(0.5,3.9,1.4,1.1) + time*vec4(1.2,1.7,1.3,2.5) ) - vec4(0.3,0.0,0.0,0.0);\n\n    // camera\n\tfloat r = 2.5+0.15*cos(0.0+0.29*time);\n\tvec3 ro = vec3(           r*cos(0.3+0.37*time), \n\t\t\t\t\tr*cos(1.0+0.33*time), \n\t\t\t\t\t          r*cos(2.2+0.31*time) );\n\tvec3 ta = vec3(0.0,0.0,0.0);\n    float cr = 0.1*cos(0.1*time);\n    \n    \n    // render\n    vec3 col = vec3(0.0);\n    for( int j=0; j<AA; j++ )\n    for( int i=0; i<AA; i++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord + vec2(float(i),float(j))/float(AA))) / iResolution.y;\n\n        vec3 cw = normalize(ta-ro);\n        vec3 cp = vec3(sin(cr), cos(cr),0.0);\n        vec3 cu = normalize(cross(cw,cp));\n        vec3 cv = normalize(cross(cu,cw));\n        vec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n        col += render( ro, rd, c );\n    }\n    col /= float(AA*AA);\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n\tcol *= 0.7 + 0.3*pow(16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y),0.25);\n    \n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}