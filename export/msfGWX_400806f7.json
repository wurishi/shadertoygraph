{"ver":"0.1","info":{"id":"msfGWX","date":"1666873659","viewed":105,"name":"Elementary Cellular Automata lks","username":"WhiteWalrus518","description":"Control the rule and starting values within buffer A","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["life"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 2.0; // determines square size\n    vec2 uv = fragCoord / iResolution.xy;\n    uv.x = (uv.x / scale) + (1.0 - 1.0 / scale) * 0.5;\n    uv.y = (uv.y / scale) + (1.0 - 1.0 / scale);\n    \n    /*\n    fragColor = vec4(texture(iChannel0, uv).x,\n                     texture(iChannel1, uv).x,\n                     texture(iChannel2, uv).x,\n                     0.0);\n    */\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define res iResolution\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int rule = 154; // rule between 0 and 255\n    float density = 0.01; // determines initial density of starting row\n    \n    vec2 seed = vec2(0.2, 0.5);\n    \n    if(fragCoord.y > res.y - 1.0){\n        if(density < random(fragCoord / res.xy + seed))\n            fragColor = vec4(0.0);\n        else{\n            fragColor = vec4(1.0);\n        }\n    }\n    else{\n        float leftPix = texture(iChannel0, (fragCoord + vec2(-1, 1))/res.xy).x;\n        float centPix = texture(iChannel0, (fragCoord + vec2( 0, 1))/res.xy).x;\n        float righPix = texture(iChannel0, (fragCoord + vec2( 1, 1))/res.xy).x;\n        \n        int ruleCase = int(4.0 * leftPix + 2.0 * centPix + righPix);\n        \n        if(pow(2.0, float(ruleCase)) <= mod(float(rule), pow(2.0, float(ruleCase) + 1.0))){\n            fragColor = vec4(1.0);\n        }\n        else{\n            fragColor = vec4(0.0);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}","name":"Common","description":"","type":"common"}]}