{"ver":"0.1","info":{"id":"4ttGWl","date":"1472401790","viewed":844,"name":"Henyey-Greenstein Function","username":"nlguillemot","description":"visualization of Henyey-Greenstein phase function. Hold left click and move mouse X to tweak the \"g\" parameter from -1 to +1.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["henyeygreenstein"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159265359\n\nfloat HenyeyGreenstein(float g, float costh)\n{\n    return (1.0 - g * g) / (4.0 * M_PI * pow(1.0 + g * g - 2.0 * g * costh, 3.0/2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // compute \"g\" from mouse X coordinate\n    float g = iMouse.x * 2.0 / iResolution.x - 1.0;\n    \n    // default input (for shadertoy preview)\n    if (iMouse.xy == vec2(0.0))\n        g = 0.7;\n    \n    // make position from -1 to 1 in x and y, with (0,0) in the center of the screen.\n    vec2 pos = fragCoord * 2.0 / iResolution.xy - vec2(1.0);\n    \n    // compute cos(theta) used as input to Henyey-Greenstein Phase Function\n    // = dot((1,0), pos) / (length((1,0)) * length(pos))\n    // = dot((1,0), pos) / length(pos)\n\tfloat costh = pos.x / length(pos);\n    \n    // compute Henyey-Greenstein Phase Function\n    float p = HenyeyGreenstein(g, costh);\n    \n    // convert to a color\n    vec4 color = vec4(vec3(p),1.0);\n    \n    // gamma-correct it\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // render it        \n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}