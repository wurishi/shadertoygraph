{"ver":"0.1","info":{"id":"4323Rz","date":"1708124185","viewed":117,"name":"Circular Repeating Noise","username":"GabeRundlett","description":"A demo to showcase how to make noise seamless on a circle.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["noise","polar","circular","repeating","seamless","polarnoise","circularnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// hash from https://www.shadertoy.com/view/WttXWX\nuint triple32(uint x) {\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n#define hashi(x)   triple32(x) \n#define hash(x)  ( float( hashi(x) ) / float( 0xffffffffU ) )\n// --------------------\n\nconst float PI = 3.14159256;\n\nfloat noise(float angle, int detail) {\n    // 0 to 1\n    float normalized_angle = angle / (2.0 * PI) + 0.5;\n    \n    // both are 0 to detail-1 \n    uint discrete_angle_0 = uint(floor(mod(normalized_angle * float(detail) + 0.0, float(detail))));\n    uint discrete_angle_1 = uint(floor(mod(normalized_angle * float(detail) + 1.0, float(detail))));\n\n    // both are 0 to 1\n    float noise_val0 = hash(discrete_angle_0);\n    float noise_val1 = hash(discrete_angle_1);\n\n    float lerp_factor = fract(normalized_angle * float(detail));\n    return mix(noise_val0, noise_val1, lerp_factor);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy * 2.0 - 1.0;\n    uv.x *= aspect;\n\n    float angle = atan(uv.y, uv.x);\n    \n    float noise_val = noise(angle, 32);\n\n    float dist = length(uv);\n    float ring_mask = step(dist, 0.8) * step(0.7, dist);\n    vec3 background_color = vec3(0.2, 0.4, 0.9);\n\n    fragColor = vec4(mix(background_color, vec3(noise_val), ring_mask), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}