{"ver":"0.1","info":{"id":"lsc3z4","date":"1448318369","viewed":1144,"name":"Simple star field","username":"bjarkeck","description":"I also wanted to give it a go.\n\nAdvice and imporvements is always welcome :)","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define STARDISTANCE 150.\n#define STARBRIGHTNESS 0.5\n#define STARDENSITY 0.05\n\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * vec3(.1031,.11369,.13787));\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat stars(vec3 ray)\n{\n    vec3 p = ray * STARDISTANCE;\n    float h = hash13(p);\n    float flicker = cos(iTime * 1. + hash13(abs(p) * 0.01) * 13.) * 0.5 + 0.5;\n    float brigtness = smoothstep(1.0 - STARDENSITY, 1.0, hash13(floor(p)));\n    return smoothstep(STARBRIGHTNESS, 0., length(fract(p) - 0.5)) * brigtness * flicker;\n}\n\nvec3 camera(vec2 fragCoord)\n{\n\tvec3 ray = normalize(vec3( fragCoord.xy-iResolution.xy*.5, iResolution.x));\n    vec2 angle = vec2(3. + iTime * -0.01, 10. + iTime * 0.10);\n    vec4 cs = vec4(cos(angle.x), sin(-angle.x), cos(angle.y), sin(angle.y));\n    ray.yz *= mat2(cs.xy,-cs.y,cs.x); \n    ray.xz *= mat2(cs.zw,-cs.w,cs.z); \n    return ray;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 ray = camera(fragCoord);\n    float s = stars(ray);\n\tfragColor = vec4(s, s ,s ,1.0);\n}","name":"Image","description":"","type":"image"}]}