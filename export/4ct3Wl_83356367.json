{"ver":"0.1","info":{"id":"4ct3Wl","date":"1713084441","viewed":29,"name":"square_shader","username":"max_render_in_shadertoy","description":"I am creating light. it`s my first work.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["square"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//box = (cord_box, size_box)\nvec4 box = vec4(-0.3, -0.3, 0.6, 0.6);\nvec4 box1 = vec4(-0.6, -0.075, 1.2, 0.15);\nvec4 box2 = vec4(-0.15, -0.6, 0.3, 1.2);\n\n//line = (start_doc, end_doc)\nvec4 line = vec4(0.0, 0.0, 0.0, 1.0);\n\nbool collision_square(vec2 p1, vec2 p2, vec4 box) {\n    vec2 cord_box = box.xy;\n    vec2 size_box = box.zw;\n\n    bool collision = false;\n    \n    vec2 p = p2 - p1;\n    float alpha = p.y / p.x;\n    \n    vec2 dcord_box = cord_box - p1;\n    \n    float lr1 = 1.0;\n    float lr2 = 1.0;\n    float lr3 = 1.0;\n    float lr4 = 1.0;\n    \n    if (dcord_box.x < 0.0) {lr1 = -1.0;}\n    if (dcord_box.x + size_box.x < 0.0) {lr2 = -1.0;}\n    if (dcord_box.y < 0.0) {lr3 = -1.0;}\n    if (dcord_box.y + size_box.y < 0.0) {lr4 = -1.0;}\n    \n    bool ops1 = 0.0 <= alpha * dcord_box.x - dcord_box.y && alpha * dcord_box.x - dcord_box.y <= size_box.y && p.x * lr1 >= dcord_box.x * lr1;\n    bool ops2 = 0.0 <= alpha * dcord_box.x - dcord_box.y + alpha * size_box.x && alpha * dcord_box.x - dcord_box.y + alpha * size_box.x <= size_box.y && p.x * lr2 >= (dcord_box.x + size_box.x) * lr2;\n    bool ops3 = 0.0 <= dcord_box.y / alpha - dcord_box.x && dcord_box.y / alpha - dcord_box.x <= size_box.x && p.y * lr3 >= dcord_box.y * lr3;\n    bool ops4 = 0.0 <= (dcord_box.y + size_box.y) / alpha - dcord_box.x && (dcord_box.y + size_box.y) / alpha - dcord_box.x <= size_box.x && p.y * lr4 >= (dcord_box.y + size_box.y) * lr4;\n    \n    if (ops1 || ops2 || ops3 || ops4) {collision = true;}\n    \n    return collision;\n}\n\nbool collision_line(vec2 p1, vec2 p2, vec4 line) {\n    vec2 p = p2 - p1;\n    vec2 start_line = line.xy - p1;\n    vec2 end_line = line.zw - p1;\n    float alpha = (start_line.y - end_line.y) / (start_line.x - end_line.x);\n    float beta = end_line.y - end_line.x * alpha;\n    float x0 = beta / (p.y / p.x - alpha);\n    float lr = 1.0;\n    if (p.x < 0.0) {lr = -1.0;}\n    if (min(start_line.x, end_line.x) <= x0 && max(start_line.x, end_line.x) >= x0 && abs(x0) <= abs(p.x) && x0 * lr >= 0.0 && start_line.x - end_line.x != 0.0) {return true;}\n    if (min(start_line.y, end_line.y) <= start_line.x * p.y / p.x && max(start_line.y, end_line.y) >= start_line.x * p.y / p.x && start_line.x - end_line.x == 0.0 && abs(start_line.x) <= abs(p.x) && start_line.x * lr >= 0.0) {return true;}\n    return false;\n}\n\nbool render_box(vec2 cord, vec4 box) {\n    vec2 cord_box = box.xy;\n    vec2 size_box = box.zw;\n    if (cord.x >= cord_box.x && cord.x <= cord_box.x + size_box.x && cord.y >= cord_box.y && cord.y <= cord_box.y + size_box.y) {\n        return true;\n    }\n    return false;\n}\n\nbool render_line(vec2 cord, vec4 line, float Res_y, float width) {\n    Res_y = Res_y / width;\n    vec2 start_doc = line.xy;\n    vec2 end_doc = line.zw;\n    vec2 cord_pixel = cord;\n    vec2 size_pixel = vec2(2.0, 2.0) / Res_y;\n    vec4 pixel = vec4(cord_pixel, size_pixel);\n    return collision_square(start_doc, end_doc, pixel);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    line = vec4(0.0, 0.0, cos(iTime), sin(iTime));\n    float light_radius = 3.0 / 2.0;\n    vec3 color_light  = vec3(0.1882, 0.8353, 0.7843);\n    \n    vec2 mouse = vec2(iMouse.x * 2.0 / iResolution.y - iResolution.x / iResolution.y, iMouse.y * 2.0 / iResolution.y - 1.0);\n    vec2 cord = vec2(fragCoord.x * 2.0 / iResolution.y - iResolution.x / iResolution.y, fragCoord.y * 2.0 / iResolution.y - 1.0);\n    \n    vec2 light_pos = mouse;\n    \n    float c = 1.0 - length(light_pos - cord) / light_radius;\n    \n    if (collision_square(mouse, cord, box) || collision_square(mouse, cord, box1) || collision_square(mouse, cord, box2) || collision_line(mouse, cord, line)) {c = 0.0;}\n    \n    vec3 color = color_light * c;\n    \n    if (render_box(cord, box) || render_box(cord, box1) || render_box(cord, box2)) {\n        color = vec3(1, 1, 1);\n    }\n    \n    if (render_line(cord, line, iResolution.y, 5.0)) {\n        color = vec3(1, 0, 0);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}