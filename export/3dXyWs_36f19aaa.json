{"ver":"0.1","info":{"id":"3dXyWs","date":"1585932984","viewed":109,"name":"Bring's surface - translation","username":"sl2c","description":"Similar to last one but with a translation along a line of symmetry.  Takes advantage of the periodicity of the tiling (and ability to permute colors) to avoid having to use distances too large that cause excessive numerical instability.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["tiling","hyperbolic","poincare"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright 2020 Google LLC\n// SPDX-License-Identifier: Apache-2.0\n// NOT an official Google project; see Google Open Source guidelines for more info on copyright transfer\n// written by William Cadegan-Schlieper \n\n#define swap(x,y) {t=x;x=y;y=t;}\n\nfloat rdot(vec3 r1, vec3 r2) {\n    return r1.y*r2.y+r1.z*r2.z-r1.x*r2.x;\n}\n\nvec3 refl(vec3 r, vec3 m) {\n    return r - 2.0 * rdot(r,m) * m;\n}\n\nvec3 color(vec3 p, float time) {\n    \n    int[5] s; // short for sigma, used in math to represent permutations\n    for (int j=0;j<5;j++) {\n        s[j]=j;\n    }\n    \n    int t;  // used as temp space by swap\n    \n    float period = 0.530637531;\n    time = mod(time, 6.0 * period);\n    while (time > 0.5 * period) {\n        time -= period;\n        swap(s[0],s[2]);\n        swap(s[2],s[4]);\n        swap(s[1],s[3]);\n    }\n    \n    \n    p = refl(p,vec3(0.0,1.0,0.0));\n    p = refl(p,vec3(sinh(time),cosh(time),0));\n    if (rdot(p,p) > -0.0) {\n        // floating point error, I think, is causing invalid points\n        return vec3(1.0,0.0,1.0);\n    }\n    // mirrors basically pulled from the Python code I wrote ages ago\n    vec3 mirror1 = vec3(0.0,1.0,0.0);\n    vec3 mirror2 = vec3(0.0,-sqrt(0.5),sqrt(0.5));\n    vec3 mirror3 = vec3(0.5558929702514214, 0.0, -1.1441228056353687);\n    \n\n    \n    int i;\n    for (i=0;i<100;i++) {\n        if (rdot(p,mirror1) > 0.0001) {\n            p = refl(p,mirror1);\n            swap(s[2],s[4]);\n            continue;\n        }\n        if (rdot(p,mirror2) > 0.0001) {\n            p = refl(p,mirror2);\n            swap(s[1],s[4]);\n            swap(s[2],s[3]);\n            continue;\n        }\n        if (rdot(p,mirror3) > 0.0001) {\n            p = refl(p,mirror3);\n            swap(s[0],s[1]);\n            swap(s[2],s[4]);\n            continue;\n        }\n        if (s[0]==0) {return vec3(1.0,0.0,0.0);}\n        if (s[0]==1) {return vec3(1.0,1.0,0.0);}\n        if (s[0]==2) {return vec3(0.0,1.0,0.0);}\n        if (s[0]==3) {return vec3(1.0,0.5,0.0);}\n        if (s[0]==4) {return vec3(0.0,0.0,1.0);}\n    }\n    return vec3(1.0,1.0,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * (fragCoord - iResolution.xy * 0.5)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float r2 = uv.x*uv.x+uv.y*uv.y;\n    \n    if (r2 < 1.0) {\n        vec3 p = vec3(1.0+r2,2.0*uv)/(1.0-r2);\n        vec3 col = color(p, iTime*0.04);\n        fragColor = vec4(col,1.0);\n    } else {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}