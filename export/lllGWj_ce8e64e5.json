{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"#define time (iTime*.15)\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d(uvec3 v) {\n  v = v * 1664525u + 1013904223u;\n\n  v.x += v.y*v.z;\n  v.y += v.z*v.x;\n  v.z += v.x*v.y;\n\n  v ^= v >> 16u;\n\n  v.x += v.y*v.z;\n  v.y += v.z*v.x;\n  v.z += v.x*v.y;\n\n  return v;\n}\n// https://www.shadertoy.com/view/XlGcRh#\nvec3 hash3(vec3 uvt) {\n  uvec3 hu = pcg3d(uvec3(uvt * 1717.));  // scale by approximate resolution\n  return vec3(hu) * (1.0/float(0xffffffffu));\n}\n\n// Basic 3D noise\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nvec3 noise3(vec3 x) {\n\tvec3 i = floor(x);\n\tvec3 f = fract(x);\n\tvec3 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix( hash3(i + vec3(0,0,0)), hash3(i + vec3(1,0,0)), u.x),\n                 mix( hash3(i + vec3(0,1,0)), hash3(i + vec3(1,1,0)), u.x), u.y),\n             mix(mix( hash3(i + vec3(0,0,1)), hash3(i + vec3(1,0,1)), u.x),\n                 mix( hash3(i + vec3(0,1,1)), hash3(i + vec3(1,1,1)), u.x), u.y), u.z);\n}\n\n// https://code.google.com/p/fractalt}erraingeneration/wiki/Fractional_Brownian_Motion\nvec3 fbm(in vec2 p)\n{\n    const float gain = 0.5;\n    const float lacunarity = 2.;\n\n    vec3 total = vec3(0);\n\tfloat amplitude = gain;\n\n\tfor (int i = 1; i < 7; i++) {\n\t\ttotal += noise3(vec3(p, time)) * amplitude;\n\t\tamplitude *= gain;\n\t\tp *= lacunarity;\n\t}\n\treturn total;\n}\n\n// Simplex Noise\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nconst float F3 = 0.3333333;\nconst float G3 = 0.1666667;\nfloat snoise(vec3 p) {\n\tvec3 s = floor(p + dot(p, vec3(F3)));\n\tvec3 x = p - s + dot(s, vec3(G3));\n\n\tvec3 e = step(vec3(0.0), x - x.yzx);\n\tvec3 i1 = e*(1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n\tvec3 x1 = x - i1 + G3;\n\tvec3 x2 = x - i2 + 2.0*G3;\n\tvec3 x3 = x - 1.0 + 3.0*G3;\n\n\tvec4 w, d;\n\n\tw.x = dot(x, x);\n\tw.y = dot(x1, x1);\n\tw.z = dot(x2, x2);\n\tw.w = dot(x3, x3);\n\n\tw = max(0.6 - w, 0.0);\n\n\td.x = dot(hash3(s), x);\n\td.y = dot(hash3(s + i1), x1);\n\td.z = dot(hash3(s + i2), x2);\n\td.w = dot(hash3(s + 1.0), x3);\n\n\tw *= w;\n\tw *= w;\n\td *= w;\n\n\treturn .5 + .5*dot(d, vec4(52.0));\n}\nvec2 snoise2(vec3 p) {\n  return vec2(snoise(p+vec3(17.1)), snoise(p+vec3(3.7)));\n}\n\n\nmat3 rotation(float angle, vec3 axis)\n{\n    vec3 a = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n\n    return mat3(oc * a.x * a.x + c,        oc * a.x * a.y - a.z * s,  oc * a.z * a.x + a.y * s,\n                oc * a.x * a.y + a.z * s,  oc * a.y * a.y + c,        oc * a.y * a.z - a.x * s,\n                oc * a.z * a.x - a.y * s,  oc * a.y * a.z + a.x * s,  oc * a.z * a.z + c);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tp.x *= iResolution.x/iResolution.y;\n\n    p.x = p.x*(1. + .2*sin(time*2.));\n    p.y = p.y*(1. + .2*sin(time*2.));\n    p += vec2(6.5, 6.5);\n\n    vec3 color = fbm(3.5*p);\n\n#if 0\n    color = mod(time + color*1.5, 1.);\n    color = hsv2rgb(vec3(color.x, .8, .8));\n#else\n    color = time*vec3(0.9, 0.7, 0.25) + color;\n\n    float c1 = color.x*3.;\n    float c2 = color.y*9.;\n    vec3 col1 = 0.5 + 0.5*sin(c1 + vec3(0.0,0.5,1.0));\n\tvec3 col2 = 0.5 + 0.5*sin(c2 + vec3(0.5,1.0,0.0));\n\tcolor = 2.0*pow(col1*col2,vec3(0.8));\n\n    vec3 axis = fbm(p*2.75);\n    color = rotation(.9*length(axis)*sin(8.*time), axis)*color;\n#endif\n\n    fragColor.xyz = color;\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lllGWj","date":"1425412359","viewed":1809,"name":"Alien magma","username":"mpcomplete","description":"Testing noise, fbm,and color rotation.","likes":12,"published":3,"flags":0,"usePreview":0,"tags":["noise","fbm","hsv"],"hasliked":0,"parentid":"","parentname":""}}