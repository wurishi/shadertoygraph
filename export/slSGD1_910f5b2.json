{"ver":"0.1","info":{"id":"slSGD1","date":"1623881671","viewed":112,"name":"starry Night","username":"Vinicius_Jesus","description":"in progress","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["star","night","comet","moom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 Rotate(vec2 uv,float t){\n\treturn vec2(uv.x*cos(t)-uv.y*sin(t),uv.y*cos(t)+uv.x*sin(t));\n}\n\nfloat R21(vec2 p) \n{\n    p = fract(p * vec2(123.34, 456.21));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nfloat Line(vec2 p, vec2 o, vec2 b, float sw, float ew){\n\tfloat d = distance(o, b);\n\tvec2  n = normalize(b - o);\n\tvec2 l = vec2( max(abs(dot(p - o, n.yx * vec2(-1.0, 1.0))), 0.0),\n\t               max(abs(dot(p - o, n) - d * 0.5) - d * 0.5, 0.0));\n\treturn smoothstep( mix(sw, ew, 1.-distance(b,p)/d) , 0., l.x+l.y);\n}\n\nvec3 Comet(vec2 p)\n{\n    float modu = 4.;        \n    float endPointY = -.1; \n    vec2 cmtVel = mod(iTime/modu+modu*.5, 2.) > 1. ? vec2(2., 1.4)*.5 : vec2(-2., 1.4)*.5;\n    vec2 cmtLen = vec2(.25)*cmtVel;\n    \n    vec2 cmtPt = 1. - mod(iTime*cmtVel, modu);\n    cmtPt.x +=1.;\n\n    vec2 cmtStartPt, cmtEndPt;\n\n    if(cmtPt.y < endPointY) {\n        cmtEndPt   = cmtPt + cmtLen;\n        if(cmtEndPt.y > endPointY) \n            cmtStartPt = vec2(cmtPt.x + cmtLen.x*((endPointY - cmtPt.y)/cmtLen.y), endPointY);\n        else\n            return vec3(.0);\n    }\n    else {\n        cmtStartPt = cmtPt;\n        cmtEndPt = cmtStartPt+cmtLen; \n    }\n\n    float bright = clamp(smoothstep(-.2,.65,distance(cmtStartPt, cmtEndPt)),0.,1.);\n\n    vec2 dlt = vec2(.003) * cmtVel;\n\n    float q = clamp( (p.y+.2)*2., 0., 1.);\n\n    return  vec3(bright * .75 * (smoothstep(0.993, 0.999, 1. - length(p - cmtStartPt)) + \n             Line(p, cmtStartPt, cmtStartPt+vec2(.06)*cmtVel,  0.009, 0.003)) +\n             vec3(1., .7, .2) * .33 * Line(p, cmtStartPt,         cmtEndPt,        0.003, .0003) +          \n             vec3(1., .5, .1) * .33 * Line(p, cmtStartPt+dlt,     cmtEndPt+dlt*2., 0.002 ,.0002) +         \n             vec3(1., .3, .0) * .33 * Line(p, cmtStartPt+dlt+dlt, cmtEndPt+dlt*4., 0.001, .0001)) \n             * (bright) * q;\n}\n\n\nfloat Circle(vec2 uv, vec2 p) {\n    float dist = length(uv-p);\n    float mask = smoothstep(.3, .29, dist);\n    return mask;\n}\n\nvec3 Moon(vec2 uv) {\n    uv *= 2.;\n    vec3 col = vec3(0.);\n    \n    vec2 p = vec2(1.2, -.5);\n    \n    col += Circle(uv, vec2(0.)-p);\n    col -= Circle(uv, vec2(.08)-p);\n    return col;\n}\n\nfloat Star(vec2 gv, float dist){\n    gv *= 1.9;\n    \n    float brigthness = .005;\n    brigthness *= sin(fract(iTime)*10.)*.5+.5;\n    \n    float star = brigthness/dist;\n    \n    float rays = max(0., 1.-abs(gv.x*gv.y*1000.));\n    star += rays;\n    \n    gv *= Rotate(gv, .8);\n    \n    rays = max(0., 1.-abs(gv.x*gv.y*1000000.));\n    star += rays;\n    \n    star *= smoothstep(.2, .1, dist);\n    \n    return star * .3;\n}\n\nvec3 Stars(vec2 uv) {\n    uv *= 6.;\n    \n    vec2 gv = fract(uv) - .5;\n    vec2 id = floor(uv);\n    \n    vec3 col = vec3(0.);\n\n    for (float y = -1.; y <= 1.; y ++)\n    {\n        for(float x = -1.; x <= 1.; x++)\n        {\n            vec2 offset = vec2(x,y);\n            float n = R21(id + offset);\n            \n            float dist = length(gv-offset-n);\n            \n            //float blink = sin(fract(iTime)*10.+ n)*.5+.5;\n            col += Star(gv-offset-n, dist);// * blink;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    col += Stars(uv);\n    col += Moon(uv);\n    col += Comet(uv);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}