{"ver":"0.1","info":{"id":"WlKyDm","date":"1611181267","viewed":200,"name":"voronoi exercise (vlllll)","username":"valalalalala","description":"Bit of fun with basic 2d voronoi. Busted out a bit into pieces. Background https://thebookofshaders.com/12/ and AoC's https://www.youtube.com/watch?v=l-07BXzNdPw . Looks a bit like clouds maybe :-D\n","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","exercise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"         //////////////////////////////////////////////////////////////////\n        //                                                            // //\n       //  \"voronoi exercise\"                                        //  //\n      //                                                            //   //\n     //  Bit of fun with basic 2d voronoi. Busted out a bit into   //    //\n    //  pieces. Background https://thebookofshaders.com/12/ and   //     //\n   //  AoC's https://www.youtube.com/watch?v=l-07BXzNdPw         //     //\n  //  Looks a bit like clouds maybe :-D                         //     //\n //                                                            //     //\n////////////////////////////////////////////////////////////////     // \n//                                                            //    //\n// Creative Commons Attribution-NonCommercial-ShareAlike      //   //\n// 3.0 Unported License                                       //  //\n//                                                            // //\n// by Val \"valalalalala\" GvM ðŸ’ƒ 2021                          ////\n//                                                            ///\n////////////////////////////////////////////////////////////////\n\n#define FROM_SCREEN(uv) ((2.*uv-iResolution.xy)/iResolution.y)\n\n////////////////////////////////////////////////////////////////\n// scene controls\n\n// alternative distance metrics\n\n#define MANHATTAN_\n#define DOTTY_\n\n// toggle grayscale single layer of voronoi\n#define BASIC_\n\n// in case the image gets too dark\n#define GAMMA 2.\n\n// alternative color scheme( may need to bump up GAMMA)\n#define GLASSY_\n\n// for some reason... mix isn't working for me...\n#define MIX(x,y,a)   (1.-a) * x + y * a\n#define MIX_(x,y,a)  mix(x,y,a)\n#define USE_MIX_INSTEAD_OF_IFS___NOT\n\n////////////////////////////////////////////////////////////////\n// functions \n\nvec2 hash22( in vec2 uv ) {\n    vec3 q = fract( uv.xyx * vec3( 19.191, 53.733, 73.761 ) );\n    q += dot( q, q + vec3( 41.557, 23.929, 37.983 ) );\n    return fract( vec2( q.x * q.y, q.y * q.z ) );\n}\n\nvec4 makeVoronoiPoint( in vec2 id ) {\n    vec2 n = hash22( id ) ;\n    vec2 point = sin( n * iTime ) * .5 + .5;\n    return vec4( point.xy, n.xy );\n}\n\nvec3 calculateVoronoiDistance( in vec2 st, in vec2 id, in vec2 neighbor ) {\n    vec4 voronoiPoint = makeVoronoiPoint( id + neighbor );\n    st -= voronoiPoint.xy + neighbor;\n    \n#ifdef MANHATTAN\n    float d = abs( st.x ) + abs( st.y );\n#else\n#ifdef DOTTY\n    st = abs( st );\n    float d = dot( st, st ) / ( st.x + st.y );\n#else\n    float d = length( st );\n    d = dot( st, st ) ;/// (abs(st.x) + abs(st.y));\n#endif\n#endif\n\n    return vec3( d, voronoiPoint.xy );\n    return vec3( d, id );\n}\n\nvec3 voronoiToColor( in vec2 v ) {\n    vec3 a = mix( vec3(1.,.0,.0), vec3(.0,.0,1.), sin( v.x ) );\n    vec3 b = mix( vec3(.0,1.,.0), vec3(.5,.0,.5), sin( v.y ) );\n    return mix( a, b, cos( v.x * v.y ) );\n}\n\nvec3 calculateVoronoiPoint( in vec2 st, in vec2 id ) {\n    vec3 voronoi_n1_n1 = calculateVoronoiDistance( st, id, vec2( -1., -1. ) );\n    vec3 voronoi_n1_n0 = calculateVoronoiDistance( st, id, vec2( -1., -0. ) );\n    vec3 voronoi_n1_p1 = calculateVoronoiDistance( st, id, vec2( -1., +1. ) );\n    vec3 voronoi_n0_n1 = calculateVoronoiDistance( st, id, vec2( -0., -1. ) );\n    vec3 voronoi_n0_n0 = calculateVoronoiDistance( st, id, vec2( -0., -0. ) );\n    vec3 voronoi_n0_p1 = calculateVoronoiDistance( st, id, vec2( -0., +1. ) );\n    vec3 voronoi_p1_n1 = calculateVoronoiDistance( st, id, vec2( +1., -1. ) );\n    vec3 voronoi_p1_n0 = calculateVoronoiDistance( st, id, vec2( +1., -0. ) );\n    vec3 voronoi_p1_p1 = calculateVoronoiDistance( st, id, vec2( +1., +1. ) );\n\n    vec3 closest = vec3( 1e33 );\n#ifdef USE_MIX_INSTEAD_OF_IFS\n    closest = MIX( closest, voronoi_n1_n1, step( voronoi_n1_n1.x, closest.x ) );\n    closest = MIX( closest, voronoi_n1_n0, step( voronoi_n1_n0.x, closest.x ) );\n    closest = MIX( closest, voronoi_n1_p1, step( voronoi_n1_p1.x, closest.x ) );\n    closest = MIX( closest, voronoi_n0_n1, step( voronoi_n0_n1.x, closest.x ) );\n    closest = MIX( closest, voronoi_n0_n0, step( voronoi_n0_n0.x, closest.x ) );\n    closest = MIX( closest, voronoi_n0_p1, step( voronoi_n0_p1.x, closest.x ) );\n    closest = MIX( closest, voronoi_p1_n1, step( voronoi_p1_n1.x, closest.x ) );\n    closest = MIX( closest, voronoi_p1_n0, step( voronoi_p1_n0.x, closest.x ) );\n    closest = MIX( closest, voronoi_p1_p1, step( voronoi_p1_p1.x, closest.x ) );\n#else\n    if ( voronoi_n1_n1.x < closest.x ) closest = voronoi_n1_n1;\n    if ( voronoi_n1_n0.x < closest.x ) closest = voronoi_n1_n0;\n    if ( voronoi_n1_p1.x < closest.x ) closest = voronoi_n1_p1;\n    if ( voronoi_n0_n1.x < closest.x ) closest = voronoi_n0_n1;\n    if ( voronoi_n0_n0.x < closest.x ) closest = voronoi_n0_n0;\n    if ( voronoi_n0_p1.x < closest.x ) closest = voronoi_n0_p1;\n    if ( voronoi_p1_n1.x < closest.x ) closest = voronoi_p1_n1;\n    if ( voronoi_p1_n0.x < closest.x ) closest = voronoi_p1_n0;\n    if ( voronoi_p1_p1.x < closest.x ) closest = voronoi_p1_p1;\n#endif\n    return closest;\n}\n\nvec3 vornoing( in vec2 uv, float scale ) {\n    uv *= scale;\n    \n    vec2 st = fract( uv );\n    vec2 id = uv - st;\n\n    vec3 closest = calculateVoronoiPoint( st, id );\n#ifdef GLASSY\n    return voronoiToColor( closest.yz ) * closest.x;\n#else\n    return vec3( closest.x );\n#endif\n}\n\n////////////////////////////////////////////////////////////////\n// main\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = FROM_SCREEN( fragCoord );\n    \n#ifdef BASIC\n    fragColor = vec4( vornoing( uv, 4. ), 1. );\n    return;\n#endif\n\n    float t = iTime * .01;\n    float s = sin( t );\n    \n    vec3 color = vec3( .0 );\n    color += .4 * vornoing( uv + 33. * s, 1. );\n    color += .3 * vornoing( uv + 17. * s, 3. );\n    color += .2 * vornoing( uv +  9. * s, 7. );\n    color += .1 * vornoing( uv +  5. * s, 13. );\n    \n    color *= .5 + .5 * vec3( cos( t ), sin( t ), cos( t * 2. ) - sin( t * 2. + .77 ) );\n    \n    fragColor = vec4( color * GAMMA, 1. );\n}\n\n// EOF\n////////////////////////////////////////////////////////////////","name":"Image","description":"","type":"image"}]}