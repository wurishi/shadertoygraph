{"ver":"0.1","info":{"id":"4ttSDS","date":"1481460213","viewed":122,"name":"null vier","username":"hencz","description":".","likes":1,"published":1,"flags":64,"usePreview":0,"tags":["cubes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"MdS3WD","filepath":"https://soundcloud.com/playmodul/playmodul-null-vier-b-zckr04","previewfilepath":"https://soundcloud.com/playmodul/playmodul-null-vier-b-zckr04","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DISTANCE_ITERATIONS 120\n#define PI 3.14159\n\nvec3 rY(in vec3 p, float a)\n{\n\tfloat c,s;vec3 q=p;\n\tc = cos(a); s = sin(a);\n\tp.x = c * q.x + s * q.z;\n\tp.z = -s * q.x + c * q.z;\n    return p;\n}\n\nvec3 rZ(in vec3 p, float a)\n{\n\tfloat c,s;vec3 q=p;\n\tc = cos(a); s = sin(a);\n\tp.x = c * q.x - s * q.y;\n\tp.y = s * q.x + c * q.y;\n    return p;\n}\n\nfloat udBox(in vec3 p, in vec3 b)\n{\n    return length(max(abs(p)-b,0.0));\n}\n\nfloat render(in vec3 p)\n{\n    float d = 10000.0;\n    vec3 q = p + vec3(0., 0., 4.0);\n            \n    d = min(d, udBox(rZ(rY(p + vec3(-.75, 0., 4.0), .125 * .125 * iTime * PI), .25 * PI), vec3(.15, .25 + abs(cos(iTime * PI)) * .5, .15)));\n    d = min(d, udBox(rZ(rY(p + vec3(.75, 0., 4.0), .125 * .125 * iTime * PI), .25 * PI), vec3(.15, .25 + abs(sin(iTime * PI * 2.)) * .5, .15)));\n    return d;\n}\n\nfloat trace(in vec3 o, in vec3 d)\n{\n    float t = 0.0;\n    for (int i = 0; i < DISTANCE_ITERATIONS; i++)\n    {\n        vec3 p = o + d * t;\n        t += render(p) * 0.5;\n    }\n    return t;\n}\n\nmat3 getCameraMatrix(in vec3 forward, in vec3 up)\n{\n    vec3 left = normalize(cross(forward, up));\n    vec3 realUp = normalize(cross(left, -forward));\n    return mat3(left, realUp, -forward);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    vec2 uvO = uv;\n    uv.x *= iResolution.x / iResolution.y; \n    vec3 o = vec3(0.0, 0.0, 10.0);\n    float fov = 8.0;\n    vec3 forward = vec3(0, 0, 1.);\n    vec3 d = getCameraMatrix(forward, vec3(0.0, 1.0, 0.0)) * normalize(vec3(uv, fov));\n    float t = trace(o, d);\n    if (t > 100.0)\n        fragColor = vec4(mix(vec3(0.878, 0.604, 0.969), vec3(0.251, 0.941, 0.69), 0.5 - uvO.y * .5), 1.);\n    else\n        fragColor = vec4(mix(vec3(0.878, 0.604, 0.969), vec3(0.251, 0.941, 0.69), uvO.y * .5 + .5), 1.);\n}","name":"Image","description":"","type":"image"}]}