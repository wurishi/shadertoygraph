{"ver":"0.1","info":{"id":"WsBcWy","date":"1587230469","viewed":100,"name":"Plasma in 3D","username":"themasmo","description":"Like the previous mandelbrot but using a different formula.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 64\n#define MAX_DIST 100.\n#define SURF_DIST .01\n#define MAXITE 32.0\n\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n\nfloat rnd(vec2 n){\n  return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat formula(vec2 p) {\n    vec3 col;\n    float t = iTime;\n    for(float j = 0.0; j < 3.0; j++){\n        for(float i = 1.0; i < 15.0; i++){\n            p.x += 0.1 / (i + j) * sin(i * 10.0 * p.y + t + cos((iTime / (12. * i)) * i + j));\n            p.y += 0.1 / (i + j)* cos(i * 10.0 * p.x + t + sin((iTime / (12. * i)) * i + j));\n        }\n        col[int(j)] = abs(p.x + p.y);\n    }\n    return (col.x+col.y+col.z)/3.;\n}\n\n// MandelBrot not used\nfloat mandel(vec2 p)\n{    \n    float zre=sin(iTime)/4.0;\n    float zim=cos(iTime)/3.0;\n    float cre=p.x;\n    float cim=p.y;\n    float col=0.;\n\n    for(float i=0.;i<MAXITE;i++)\n    {\n        float dam=zre*zre-zim*zim+cre;\n        zim=2.0*zre*zim+cim;\n        zre=dam;\n        col++;\n        if( (zre*zre+zim*zim)>4.0 )\n            break;\n    }\n    \n    return (col/MAXITE);\n}\n\n\nfloat GetDist(vec3 p) {\n    //float v=0.1*mandel(p.xz/6.0);\n    float v=0.;\n    if(p.x>-6. && p.x<6. && p.z>-6. && p.z<6.)\n    \tv=0.5*formula(p.xz/12.0);\n\tvec4 s1 = vec4(p.x,v,p.z,0.8);\n  \n    //float sphereDist1 =  length(p-s1.xyz)-s1.w;\n\tfloat cube = length(max(abs(p-s1.xyz)-vec3(0.01,0.01,0.01), 0.));\n    float planeDist = p.y;\n    \n    float d = min(cube, planeDist); //sphereDist1, planeDist);\n    return d;    \n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        \n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    float dif=0.;\n    if(p.x>-6. && p.x<6. && p.z>-6. && p.z<6.)\n    {\n\n        vec3 lightPos = vec3(0, 6, 2);\n        vec3 l = normalize(lightPos-p);\n        vec3 n = GetNormal(p);\n\n        dif = clamp(dot(n, l), 0., 1.);\n        float d = RayMarch(p+n*SURF_DIST*2., l);\n        if(d<length(lightPos-p)) dif *= .1;\n    }\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(-2., 6, -7.5);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    ro = ro*(rotx(-0.4));\n    ro.x=0.0+4.0*cos(iTime/2.0);\n    ro.z=-8.0+2.0*sin(iTime/1.5);\n    float d = RayMarch(ro, rd);\n\n    vec3 p = ro + rd * d;\n\n    float dif = GetLight(p);\n    col = vec3(dif)*vec3(0.0,0.6,0.9);\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}