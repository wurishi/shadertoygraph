{"ver":"0.1","info":{"id":"csdBD8","date":"1697119132","viewed":105,"name":"WATER_2D","username":"DR5","description":"water","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I'D LIKE CRATE SIMPLY CALCULAR AUTOMATA WATER - HELP\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{          \n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"precision highp float;\n\nvec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n\nvoid drawWater(vec2 fragCoord) {\n    if (iMouse.z > 0.0 && distance(iMouse.xy, fragCoord.xy) < 10.1) {\n        color.b += 1.0;\n    }\n}\n\nvoid drawWalls(vec2 uv) {\n    if (uv.y <= 0.05 || uv.y >= 0.95)color.r = 1.0;\n    if (uv.x >= 0.5 && uv.x <= 0.55 && uv.y >= 0.5)color.r = 1.0;\n    if (uv.x <= 0.05)color.r = 1.0;\n    if (uv.x >= 0.95)color.r = 1.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\n    vec2 u_textureSize = iResolution.xy;\n\n    vec2 uv = fragCoord.xy / u_textureSize;\n    color.rgb = texture(iChannel0, uv).rgb;\n\n    float P1 = 1.0/u_textureSize.x;\n    float P2 = 2.0/u_textureSize.x;\n            \n    vec4 T[8], D[4];\n\n\n    T[0] = texture(iChannel0, vec2(uv.x - P1, uv.y - P1));\n    T[1] = texture(iChannel0, vec2(uv.x, uv.y + P1));\n    T[2] = texture(iChannel0, vec2(uv.x + P1, uv.y + P1));\n    T[3] = texture(iChannel0, vec2(uv.x - P1, uv.y));\n    T[4] = texture(iChannel0, vec2(uv.x + P1, uv.y));\n    T[5] = texture(iChannel0, vec2(uv.x - P1, uv.y + P1));\n    T[6] = texture(iChannel0, vec2(uv.x, uv.y - P1));\n    T[7] = texture(iChannel0, vec2(uv.x + P1, uv.y - P1));\n\n    D[0] = texture(iChannel0, vec2(uv.x - P2, uv.y));\n    D[1] = texture(iChannel0, vec2(uv.x + P2, uv.y));\n    D[2] = texture(iChannel0, vec2(uv.x, uv.y - P2));\n    D[3] = texture(iChannel0, vec2(uv.x, uv.y + P2));\n\n\n    float s = 0.002;\n\n    \n\n    if (color.r <= 0.0) {\n/*\n        //v1\n        float acc = 0.0;\n        for (int idx=0; idx<8; idx++) {\n             acc += T[idx].b;\n        }\n        \n        color.b = acc / 8.0;\n        */\n        \n        color.b -= color.g;\n\n        if (color.b > T[4].b) {\n            color.g = color.b * 0.5;\n        }\n        if (color.b+color.g < T[3].b) {\n            color.b += T[3].g;\n            color.g = 0.0;\n        }\n  \n\n        //color.b = float(int(color.b * 10.0)) / 10.0;\n        \n\n\n        /*\n        acc = 0.0;\n        for (int idx=0; idx<8; idx++) {\n            if (color.b - acc > T[idx].b) {\n                acc += s;\n            }\n        }\n        \n        color.g = acc;\n        color.b -= acc;\n        */\n\n        \n        \n\n        \n        \n        \n    }\n     /*\n    color.g = 0.0;\n    if (color.b > 0.0) {\n        color.g = 0.05;\n    }\n    if (color.b > 0.001 && color.b < 0.002){\n        color.g = 1.0;\n    }\n*/\n      \n                \n    drawWater(fragCoord);\n    drawWalls(uv);\n\n\n    fragColor = vec4(color.rgb, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}