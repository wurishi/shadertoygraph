{"ver":"0.1","info":{"id":"3d3XRf","date":"1572457808","viewed":278,"name":"Fishies","username":"CoolerZ","description":"School of fish. Try clicking/dragging the fish.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["underwater","fish"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise21(vec2 xy)\n{\n    xy = fract(xy * 1234.56 + 0.3);\n    xy = fract(vec2(xy.x * 198.1, xy.y * 664.23));\n    float d = dot(xy, xy);\n    return fract(d * d * 947.2 + xy.y);\n}\n\nvec2 rot2d(vec2 uv, float angle)\n{\n    return uv * mat2(cos(angle), sin(angle), -sin(angle), cos(angle));\n}\n\nfloat degree_to_rad(float angle)\n{\n    return angle * PI / 180.;\n}\n\nfloat circle(vec2 uv, float blur)\n{\n    return smoothstep(1., 1.-blur, length(uv));\n}\n\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nfloat fish(vec2 uv)\n{\n    // body\n    float top = circle(vec2(uv.x, uv.y + 0.5), 0.01);\n    float bot = circle(vec2(uv.x, uv.y - 0.5), 0.01);\n    float body = top * bot;\n\n    // eye\n    vec2 eye_uv = uv * 10.;\n    eye_uv += vec2(5., -1.);\n    float eye = circle(eye_uv, 0.01);\n\n    // tail\n    vec2 tail_uv = uv;\n    tail_uv.x -= 0.95;\n    tail_uv *= 3.5;\n    tail_uv = rot2d(tail_uv, degree_to_rad(90.));\n    float tail_dist = sdEquilateralTriangle(tail_uv);\n    float tail = smoothstep(0.01, 0., tail_dist);\n\n    return body - eye + tail;\n}\n\nfloat sigmoid(float x)\n{\n    return 1. / (1. + exp(-x));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv *= 2.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    float t = iTime;\n\n    vec3 col = vec3(0., .1, .2);\n\n    // halo\n    float circle_mask = circle(uv, 0.8);\n    vec3 circle_col = vec3(0., .3, .7);\n    col = mix(col, circle_col, circle_mask);\n\n    // fish\n    const float step = 2. * PI / N_FISH;\n    const float radius = 0.5;\n    for(float i = 0.; i < N_FISH; i++)\n    {\n\t    vec2 fish_uv = uv;\n        vec4 fish_data = texelFetch(iChannel0, ivec2(i + 1., 0), 0);\n        vec2 fish_pos = fish_data.xy;\n        vec2 fish_vel = fish_data.zw;\n        float fish_angle = -abs(atan(fish_vel.y, fish_vel.x + 0.001));\n\t    fish_uv -= fish_pos;\n    \tfish_uv *= 16.;\n        fish_uv = rot2d(fish_uv, fish_angle);\n\t    float fish_mask = fish(fish_uv);\n    \tvec3 fish_col = mix(vec3(0., 1., 1.), vec3(1., 0., 0.), length(fish_vel));\n    \tcol = mix(col, fish_col, fish_mask);\n    }\n\n    \n\n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 get_target_fish_pos(vec2 shoal_pos, float id)\n{\n    float radius = .5;\n    float angle = id * 20. * PI / 180.;\n    return vec2(radius * cos(angle), radius * sin(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n    float delta_t = iTimeDelta * TIME_SCALE;\n    vec2 mouse_xy = iMouse.xy / iResolution.xy;\n    mouse_xy -= 0.5;\n    mouse_xy *= 2.;\n    mouse_xy.x *= iResolution.x/iResolution.y;\n\n    vec2 shoal_pos = vec2(0.);\n    float id = fragCoord.x;\n\n\tvec2 target_fish_pos = get_target_fish_pos(shoal_pos, id);\n    vec4 prev_fish_data = texelFetch(iChannel0, ivec2(id, 0), 0);\n    vec2 prev_fish_pos = prev_fish_data.xy;\n    vec2 prev_fish_vel = prev_fish_data.zw;\n\n    vec2 force_shoal = 40. * (target_fish_pos - prev_fish_pos);\n    vec2 total_force = force_shoal;\n    if(iMouse.z > 0.)\n    {\n        vec2 force_mouse = prev_fish_pos - mouse_xy;\n        force_mouse = normalize(force_mouse) * 10. / (length(force_mouse) + 0.01);\n        total_force += force_mouse;\n    }\n\n    vec2 curr_fish_acc = total_force / FISH_MASS;\n    vec2 curr_fish_vel = prev_fish_vel * VEL_KEPT + curr_fish_acc * delta_t;\n    vec2 curr_fish_pos = prev_fish_pos + curr_fish_vel * delta_t;\n\n    fragColor = vec4(curr_fish_pos, curr_fish_vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.14159265359\n#define N_FISH 16.\n#define FISH_MASS 10.\n#define VEL_KEPT 0.95\n#define TIME_SCALE 4.\n","name":"Common","description":"","type":"common"}]}