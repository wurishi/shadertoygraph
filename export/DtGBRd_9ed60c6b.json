{"ver":"0.1","info":{"id":"DtGBRd","date":"1702359577","viewed":8,"name":"Matthew Do A16325941 A","username":"m1do","description":"Base Code.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["b"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n//THIS JUST DOES COLORS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                              i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}\n\n\n/*\n\nNotes:\n_______\n\n -> vec2 is float, ivec2 is int\n -> .xy means position, .zw is velocity\n\n\n*/","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Initialization //\n            \n    if (iFrame == 0) {\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    \n    ////////////////////\n    \n    \n    ivec2 iFragCoord = ivec2(fragCoord); \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n    \n    vec2 F_separation = vec2(0.0, 0.0);\n    vec2 F_cohesion = vec2(0.0, 0.0);\n    vec2 F_alignment = vec2(0.0, 0.0);\n    vec2 F_boundary = vec2(0.0, 0.0);\n    \n    int safety_boids = 0;\n    int visible_boids = 0;\n    \n    vec2 p_avg = vec2(0.0, 0.0);\n    vec2 v_avg = vec2(0.0, 0.0);\n    \n    int a_a = 0;\n    int a_b = 0;\n    int b_a = 0;\n    int b_b = 0;\n    \n    for (int i = 0; i < int(iChannelResolution[0].x); i++) {\n    \n        if (i != my_id) {\n        \n            ivec2 tex_pos_i = ivec2(i % int(iChannelResolution[0].x),\n                                    i / int(iChannelResolution[0].x));\n            vec4 pos_vel_i = texelFetch(iChannel0, tex_pos_i, 0);\n            vec2 pos_i = pos_vel_i.xy;\n            vec2 vel_i = pos_vel_i.zw;\n            \n            if (distance(pos, pos_i) < dist_safety) {\n            \n                safety_boids += 1;\n                F_separation += pos - pos_i;\n       \n            }\n            \n            if (distance(pos, pos_i) < dist_visible) {\n            \n                visible_boids += 1;\n                p_avg += pos_i;\n                v_avg += vel_i;\n                \n            }\n      \n        }\n       \n    }\n    \n    if (pos.x < dist_left) {\n        a_a = 1;\n    }\n    if (pos.x > dist_right) {\n        a_b = 1;\n    }\n    if (pos.y < dist_top) {\n        b_a = 1;\n    }\n    if (pos.y > dist_bottom) {\n        b_b = 1;\n    }\n        \n    F_separation = F_separation / float(safety_boids);\n    F_cohesion = (p_avg / float(visible_boids)) - pos;\n    F_alignment = (v_avg / float(visible_boids)) - vel;\n    F_boundary = vec2( float(a_a - a_b), float(b_a - b_b) );\n    \n                       \n    vec2 F = a_separation * F_separation + \n             a_cohesion * F_cohesion +\n             a_alignment * F_alignment + \n             a_boundary * F_boundary; \n             \n    vel += F;\n    pos += vel;\n    \n    if ( length(vel) > 0.0 ) {\n    \n        if ( length(vel) > speed_max ) {  \n            vel = vel * (speed_max / length(vel));\n        }\n         if ( length(vel) < speed_min ) {  \n            vel = vel * (speed_min / length(vel));\n        }\n    \n    }\n    \n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n#define speed_max 10.0\n#define speed_min 5.0\n#define dist_safety 30.0\n#define dist_visible 0.02\n#define a_separation 0.02\n#define a_cohesion 0.001\n#define a_alignment 0.03\n#define a_boundary 0.5\n#define dist_left 200.0\n#define dist_right (iResolution.x - 200.0)\n#define dist_top 160.0\n#define dist_bottom (iResolution.y - 160.0)\n\n","name":"Common","description":"","type":"common"}]}