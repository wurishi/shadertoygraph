{"ver":"0.1","info":{"id":"4dVfRG","date":"1529314631","viewed":188,"name":"Cinnamon","username":"tokoro10g","description":"https://twitter.com/cinnamon_sanrio/status/997673217237045248","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdRoundBox(vec3 p, vec3 b, float r){\n\n  \tvec3 d = abs(p) - b;\n  \treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0)) - r;\n}\n\nfloat map(vec3 pos)\n{\n  return sdRoundBox(mod(pos,vec3(1.6,0,1.6))-0.8,vec3(0.3,0.3,0.3),0.8);\n}\n\nvec3 getNormal(vec3 p)\n{\n  const float d = 0.0001;\n  return\n    normalize\n    (\n      vec3\n      (\n        map(p+vec3(d,0.0,0.0))-map(p+vec3(-d,0.0,0.0)),\n        map(p+vec3(0.0,d,0.0))-map(p+vec3(0.0,-d,0.0)),\n        map(p+vec3(0.0,0.0,d))-map(p+vec3(0.0,0.0,-d))\n      )\n    );\n}\n\nvec3 myPhong(vec3 p, vec3 rayDir, vec3 lightDir)\n{\n    vec3 normal = getNormal(p);\n    float ld = dot(lightDir,normal);\n    vec3 ia = vec3(1,0.68,0.4);\n    vec3 id = vec3(1,1,1);\n    vec3 is = vec3(1,1,1);\n    float ka = 0.9;\n    float kd = 0.2;\n    float ks = 0.0;\n    float alpha = 2.0;\n    \n    return ka*ia+kd*ld*id+ks*pow(dot((2.0*ld*normal-lightDir),-rayDir),alpha)*is;\n}\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 pos = (fragCoord*2.0 - iResolution.xy) / iResolution.y;\n    fragColor = texture(iChannel0, pos);\n}\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord*2.0 - iResolution.xy) / iResolution.y;\n \n    vec3 camPos = vec3(40.0, 8.0, 4.0) + iTime*vec3(1.0,0.0,1.0)*0.5;\n    vec3 camDir = normalize(vec3(-0.5, -1.0, -1.2));\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    vec3 camSide = cross(camDir, camUp);\n    float focus = 4.0;\n\n    vec3 rayDir = normalize(camSide*pos.x + camUp*pos.y + camDir*focus);\n    \n    float t = 0.0, d;\n    vec3 posOnRay = camPos;\n\n    for(int i=0; i<128; ++i)\n    {\n        d = map(posOnRay);\n        t += d;\n        posOnRay = camPos + t*rayDir;\n    }\n    \n    vec3 lightPos = vec3(100.0, 40.0, 100.0);\n    \n    if(abs(d) < 0.001){\n    \tvec3 lightDir = normalize(lightPos-posOnRay);\n        fragColor = vec4(myPhong(posOnRay, rayDir, lightDir), 1.0);\n        \n        if(dot(vec3(1.0,0.0,0.0),getNormal(posOnRay))<-0.5 ||\n          dot(vec3(0.0,0.0,1.0),getNormal(posOnRay))<-0.5){\n            fragColor.rgb *= 0.6;\n        }\n        \n        vec4 textureColor = texture(iChannel0, -posOnRay.xz/1.6);\n        if(textureColor.a > 0.0){\n        \tfragColor = fragColor * (1.0-textureColor.a) + textureColor * textureColor.a;\n        }\n    }else {\n        fragColor = vec4(0.0);\n    }\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = (fragCoord*2.0 - iResolution.xy) / iResolution.y;\n    if(abs(pos.x)>0.4 && abs(pos.x)<0.8){\n        if(pow(abs(pos.x)-0.6,2.0)+pow(pos.y-0.2,2.0)<0.015){\n        \tfragColor = vec4(0.35,0.75,0.92,1.0);\n        } else {\n            fragColor = vec4(0.0);\n        }\n    } else if(abs(pos.x)<0.4){\n        if(abs(pos.y+0.1+pow(0.3*sin(6.0*pos.x),2.0))<0.02){\n            fragColor = vec4(0.6,0.2,0.2,1.0);\n        } else {\n            fragColor = vec4(0.0);\n        }\n    } else {\n    \tfragColor = vec4(0.0);\n    }\n    if(pos.y<0.0){\n        float a = 0.5*pow(abs(pos.x)-0.9,2.0)+5.0*pow(pos.y+0.1,2.0);\n        if(a<0.02){\n        \tfragColor = vec4(0.96,0.66,0.96,(0.02-a)/0.02);\n        }\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}