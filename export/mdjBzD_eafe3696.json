{"ver":"0.1","info":{"id":"mdjBzD","date":"1689518577","viewed":637,"name":"SDF - Inverted Round Union","username":"JohnKaz","description":"Based on https://www.shadertoy.com/view/3ltSW2 by iq\n\ninverted round union, interior distance needs some work.\nAgain based on Mercury's SDF functions https://mercury.sexy/hg_sdf/\n\nComparable in result to https://www.shadertoy.com/view/tdyBDm","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","union"],"hasliked":0,"parentid":"mdjBzh","parentname":"SDF - Asymmetric Chamfer Union"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2023 João Desager\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// inverted round Union\n\n// SDF primitives taken from:\n// and iquilezles.org/articles/distfunctions2d\n\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat sdCircle2( in vec2 p, in vec2 o, in float r ) \n{\n    return length(p-o)-r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdCircleSector(in vec2 p, in float r)\n{    \n    vec2 u = max(vec2(r + p.x,r + p.y), vec2(0));\n    // don't know a clean way to get rid of this if\n    if (length(u) <= 0.0)\n        return max(p.x-r, p.y-r);\n    return length(u)-2.0*r;\n}\n\nfloat sdCircleSectorv2(in vec2 p, in float r)\n{\n    vec2 ar = vec2(r,0.0);\n    \n    if (p.x-p.y < 0.0)\n        p = p.yx;\n        \n    float sign = 1.0;\n    if ( (p.y < 0.0) && (p.x-r < 0.0) )\n         sign = -1.0;\n\n    float corn = sign*length(p-ar);\n    if (clamp(p, vec2(-1.0, -1.0), vec2(0.0,0.0)) == vec2(0.0, 0.0))\n        corn = length(p)-r;\n        \n    return corn;\n}\n\n\nvec2 mirror2Dv2(in vec2 p, in vec2 N)\n{\n    float proj = min(dot(p, N), 0.0);\n    return p - 2.0*N*proj;\n}\n\nfloat sdCircleSectorv3(in vec2 p, in float r)\n{\n    // two lines with space for corner\n    vec2 q = p;\n    q = mirror2Dv2(q, normalize(vec2(-1,1)) );\n    q.y -= r;\n    q.y = min(0.0, q.y);\n    float ad = sign(q.x)*length(q);\n    \n    // inverted round corner\n    vec2 s = vec2(max(p.x, 0.0), max(p.y, 0.0));\n    float corn = length(s)-r ;\n    \n    return min(ad, corn);\n}\n\n// cheaper but inaccurate interior distance\nfloat opIRoundUnionv5(in float a, in float b, in float r)\n{\n    vec2 u = max(vec2(r + a,r + b), vec2(0));\n    float corn = length(u)-2.0*r;\n    // don't know a clean way to get rid of this if\n    if (length(u) <= 0.0)\n        corn = max(a-r, b-r);   \n    \n\treturn min(min(a,b), corn);\n}\n\n// better interior distance, but more ifs\nfloat opIRoundUnionv6(in float a, in float b, in float r)\n{\n    vec2 ar = vec2(r,0.0);\n    vec2 p = vec2(a,b);\n    \n    if (p.x-p.y < 0.0)\n        p = p.yx;\n        \n    float sign = 1.0;\n    if ( (p.y < 0.0) && (p.x-r < 0.0) )\n         sign = -1.0;\n        \n    float corn = sign*length(p-ar);\n    if (clamp(p, vec2(-1.0, -1.0), vec2(0.0,0.0)) == vec2(0.0, 0.0))\n        corn = length(p)-r;\n    \n\treturn min(min(a,b), corn);\n}\n\n// best of both worlds\nfloat opIRoundUnionv7(in float a, in float b, in float r)\n{\n    // two lines with space for corner\n    vec2 q = vec2(a,b);\n    q = mirror2Dv2(q, normalize(vec2(-1,1)) );\n    q.y -= r;\n    q.y = min(0.0, q.y);\n    float ad = sign(q.x)*length(q);\n    \n    // inverted round corner\n    vec2 s = vec2(max(a, 0.0), max(b, 0.0));\n    float corn = length(s)-r ;\n    \n    return min(ad, corn);\n}\n\n\n// opIRound is based on the logic of Mercury's round union\nfloat fOpUnionRound(float a, float b, float r) {\n\tvec2 u = max(vec2(r - a,r - b), vec2(0));\n\treturn max(r, min (a, b)) - length(u);\n}\n\n// from https://mercury.sexy/hg_sdf/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    float rad = (0.5 + 0.5*sin(iTime)) * 0.2;\n\n\tfloat d1 = sdCircle2(p, vec2(0,0.4), 0.5);\n    float d = opIRoundUnionv7(d1, sdBox( p, vec2(1.0, 0.5) ), rad);\n    \n    //uncomment to visualize the corner SDF\n    //d = sdCircleSectorv3(p, rad);\n    \n\t// coloring, iq style\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d1 = sdCircle2(m, vec2(0,0.4), 0.5);\n    d = opIRoundUnionv7(d1, sdBox( m, vec2(1.0, 0.5) ), rad);\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}