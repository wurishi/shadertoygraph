{"ver":"0.1","info":{"id":"sscXzl","date":"1633704676","viewed":219,"name":"Revolving planet","username":"jasonqiu","description":"A planet shader using this tutorial as a baseline:\nhttps://www.reddit.com/r/godot/comments/mobhb5/a_tutorial_for_my_pixel_planet_generator/","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","planet","dithering","fractalbrownianmotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Uses this tutorial as a baseline:\n// https://www.reddit.com/r/godot/comments/mobhb5/a_tutorial_for_my_pixel_planet_generator/\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define RADIUS 1.000\n#define PIXEL_RESOLUTION 90.\n#define BASE_COLOR vec4(1.)\n#define SIZE 5.\n#define OCTAVES 6\n#define SPEED 0.01\n\n#define RGB_BG vec3(235.,104.,100.)\n#define BG_COLOR vec3(RGB_BG.r/255.,RGB_BG.g/255.,RGB_BG.b/255.)\n#define HIGH_COLOR vec3(0.273,0.760,0.140)\n#define MED_COLOR vec3(0.252,0.865,0.183)\n#define LOW_COLOR vec3(0.440,0.505,0.960)\n\nfloat rand(vec2 coord) {\n        coord = mod(coord, floor(vec2(2.0,1.0)*SIZE));\n        return fract(sin(dot(coord.xy ,vec2(12.9898,78.233))) * 15.5453);\n}\n\nfloat noise(vec2 coord){\n        vec2 i = floor(coord);\n        vec2 f = fract(coord);\n\n        float a = rand(i);\n        float b = rand(i + vec2(1.0, 0.0));\n        float c = rand(i + vec2(0.0, 1.0));\n        float d = rand(i + vec2(1.0, 1.0));\n\n        vec2 cubic = f * f * (3.0 - 2.0 * f);\n\n        return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;\n}\n\nfloat fbm(vec2 coord){\n        float value = 0.0;\n        float scale = 0.5;\n\n        for(int i = 0; i < OCTAVES ; i++){\n                value += noise(coord) * scale;\n                coord *= 2.0;\n                scale *= 0.5;\n        }\n        return value;\n}\n\nvec2 spherify(vec2 uv) {\n    float z = sqrt(RADIUS - dot(uv, uv));\n    vec2 sphere = uv/(z + RADIUS);\n    return sphere;\n}\n\nfloat dither(vec2 uv1, vec2 uv2) {\n    return (mod(uv1.x+uv2.y,2.0/PIXEL_RESOLUTION) <= 1.0 / PIXEL_RESOLUTION) ? 0.6 : 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // center\n    vec2 st = fragCoord.xy / iResolution.xy;\n    vec2 uv = st;\n\n    st = st*2.-1.;\n    uv = uv*2.-1.;\n\n    // pixelize\n    uv = floor(uv * PIXEL_RESOLUTION) / PIXEL_RESOLUTION;\n\n    // get dither\n    float dith = dither(uv, st);\n\n    // fix aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    float d = distance(uv, vec2(0.0));\n    // spherify\n    uv = spherify(uv);\n\n    vec3 color = LOW_COLOR;\n    float n = fbm(uv * SIZE + iTime * SPEED);\n    if (n > 0.6) {\n        color = HIGH_COLOR;\n    } else if (n > 0.4) {\n        color = MED_COLOR;\n    }\n\n    // clouds\n    float cloudn = mix(fbm(uv * SIZE + iTime*(SPEED*1.0015)), fbm(uv * SIZE + iTime*(SPEED*1.0001)), sin(fbm(fbm(uv*SIZE)*uv*2. * SIZE + iTime*0.01)/10.));\n\n    // circle stencil\n    float a = 1.-step(RADIUS, d);\n\n    // lighting\n    vec2 lightpos = vec2(0.3,0.3);\n    vec2 mousepos = (iMouse.xy/iResolution.xy)*2.-1.;\n    if (iMouse.x <= iResolution.x*0.99 && iMouse.x >= iResolution.x*.01 && iMouse.y >= iResolution.y*.01 && iMouse.y <= iResolution.y*.99) {\n        lightpos = mousepos;\n        lightpos.x *= iResolution.x/iResolution.y;\n    }\n\n    float lightd = distance(uv, lightpos);\n    if (cloudn > 0.522 && cloudn < 0.928)  {\n        a -= 0.6 * step(0.9, lightd);\n\n    } else {\n        if (lightd >= 0.85) {\n                a -= 0.6;\n        } else {\n            // cloud shadow\n                vec2 offset = lightpos/10.;\n                float shadown = mix(fbm((uv+offset) * SIZE + iTime*(SPEED*1.0015)), fbm((uv+offset) * SIZE + iTime*(SPEED*1.0001)), sin(fbm(fbm(uv*SIZE)*uv*2. * SIZE + iTime*0.01)/10.));\n            if (shadown > 0.5 && shadown < 0.8) color = mix(color, vec3(0.), 0.2);\n        }\n        if (lightd >= 0.830 && lightd < 0.85) {\n            a -=  dith;\n        }\n    }\n\n    if (cloudn > 0.522 && cloudn < 0.8) color = mix(color, vec3(1.), 1.);\n\n    fragColor = vec4(mix(vec3(0.), color, a), 1.);\n    if (a==0.) fragColor = vec4(BG_COLOR, 1.);\n}\n","name":"Image","description":"","type":"image"}]}