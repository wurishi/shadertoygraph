{"ver":"0.1","info":{"id":"lsGBDW","date":"1529074427","viewed":102,"name":"Thank You Paris Mobile","username":"antonOTI","description":"Merci de m'avoir accueilli et appris autant!!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["bigbisoux"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n\nfloat noise(vec2 p)\n{\n    return fract(dot(sin(p.x * 123.12)*142.,cos(p.y *34.95)*165.47));\n}\n\nmat2 rot(float a)\n{\n    float ca = cos(a); float sa = sin(a);\n    return mat2(ca,-sa,sa,ca);\n}\n\nfloat halfCircle(vec2 uv, vec2 pos, float radius,float t, float a)\n{\n    uv -= pos;\n    uv *= rot(a);\n    float f = length(uv) - radius;\n    float h = t / 2.;\n    return smoothstep(h+.002,h-.002,abs(f)) * smoothstep(-.002,.002,uv.y);\n   \n}\n\nfloat bounce(float p, float b)\n{\n    return .5 - cos(p * PI) * .5 + sin(p * PI) * p * b ;\n}\n\nfloat multiplexer(float channel, float nbChannel, float t, float b)\n{\n    float ft = floor(t);\n    float mt = t- ft;\n    mt *= nbChannel;\n    channel = clamp(mt - channel,0.,1.);\n    channel = bounce(channel, b) ;\n    return ft + channel;\n}\n\nfloat ubi(vec2 uv)\n{\n    float time = iTime / 15.;\n    float nbChan = 24.;\n    float t1 = multiplexer(.0,nbChan,time,.5);\n    float t2 = multiplexer(nbChan -1.,nbChan,time,.0);\n    \n    uv *= rot(2.9 + (t1 - t2) * PI );\n    \n    \n    float t = .07 * (t1 - t2);\n    \n    float f = halfCircle(uv,vec2(-.01,.0),.288,t,0.);\n    f += halfCircle(uv,vec2(-.033,.0),.265,t,PI);\n    f += halfCircle(uv,vec2(.051,.0),.182,t,0.);\n    \n    \n    f += halfCircle(uv,vec2(-.01,.0),.12,t,PI);\n    f += halfCircle(uv,vec2( .005,.0),.105,t,.0);\n    f += halfCircle(uv,vec2( .053,.0),.183,t,PI + .3);\n\treturn f;\n}\n\nvec2 triChecker(vec2 p, float s)\n{\n    p.x += p.y * .5 ;\n    vec2 m = mod(p,s); \n    vec2 base = p - m;\n    p = m / s; \n    \n    base.x *= 2. + step(p.x,p.y);\n    \n    return base;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv.x /= iResolution.y / iResolution.x;\n\tuv.x*= -1.;\n    \n    vec3 color = vec3(ubi(uv));\n    \n    uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 LINE0_POSITION = vec2(0.1, 0.92 + sin(uv.x * 20. ) * .025);\n    vec2 LINE1_POSITION = vec2(0.1, 0.05 + sin(uv.x * 20. - 10.) * .025);\n    \n    uv.x = fract(uv.x * 2. + iTime * .1);\n    \n    float TEXT_SIZE = 0.04;\n    int LINE0[10] = int[](_T, _H, _A, _N, _K, _0, _Y, _O, _U, _0);\n    \n    for(int i = 0; i < 10; i++)\n        color = character(vec3(1.), color, LINE0[i], LINE0_POSITION + vec2(float(i) * (TEXT_SIZE + TEXT_SIZE/5.0), 0.0), TEXT_SIZE, uv );\n    int LINE1[11] = int[](_U,_B,_I,_0,_M,_O,_B,_I,_L,_E,_0);\n    \n    for(int i = 0; i < 21; i++)\n        color = character(vec3(1.), color, LINE1[i], LINE1_POSITION + vec2(float(i) * (TEXT_SIZE + TEXT_SIZE/5.0), 0.0), TEXT_SIZE, uv );\n    \n    uv = fragCoord.xy / iResolution.xy;\n    uv -= .5;\n    uv.x /= iResolution.y / iResolution.x;\n    vec2 tri = triChecker(uv + iTime * .01, .07);\n    color += noise(tri) * .1;\n    \n    fragColor = vec4(color,0.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define _0  0x00000000 //   \n#define _A  0x00E8FE31 // A \n#define _B  0x01E8FA3E // B \n#define _C  0x00F8420F // C \n#define _D  0x01E8C63E // D \n#define _E  0x01F87A1F // E \n#define _F  0x01F87A10 // F \n#define _G  0x00F84E2F // G \n#define _H  0x0118FE31 // H \n#define _I  0x01F2109F // I \n#define _J  0x01F0862F // J \n#define _K  0x01197251 // K \n#define _L  0x0108421F // L \n#define _M  0x01BAD6B1 // M \n#define _N  0x011CD671 // N \n#define _O  0x00E8C62E // O \n#define _P  0x01E8FA10 // P \n#define _Q  0x00E8D66E // Q \n#define _R  0x01E8FA31 // R \n#define _S  0x00F8383E // S \n#define _T  0x01F21084 // T \n#define _U  0x0118C62E // U \n#define _V  0x0118C544 // V \n#define _W  0x0118C6AA // W \n#define _X  0x01151151 // X \n#define _Y  0x0118A884 // Y \n#define _Z  0x01F9113F // Z \n\nvec3 character(vec3 color, vec3 background, int character, vec2 position, float size, vec2 uv)\n{\n    if((uv.x > position.x && uv.x < position.x + size) && (uv.y > position.y && uv.y < position.y + size))\n    {\n        ivec2 pixel = ivec2(ceil((uv.x-position.x)/size*5.0)-1.0, ceil((1.0-(uv.y-position.y)/size)*5.0)-1.0);\n        int bit_index = pixel.y*5 + pixel.x;\n        int bit = (character >> (24 - bit_index))&1;\n        if(bit > 0)\n            return color;\n    }\n    return background;\n}","name":"Common","description":"","type":"common"}]}