{"ver":"0.1","info":{"id":"mdB3WV","date":"1668146485","viewed":69,"name":"Arclength reparametrization","username":"Envy24","description":"My attempt to write general approximation for arclength reparametrization (blue).\nFirst function require 3500 segments, for smooth motion (still jaggy) )\nSecond function require 100 + 100 + 250 = 450 segments.\nI wanted to write binary search, but failed)","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["approximation","parametric","arclength","reparametrization"],"hasliked":0,"parentid":"Dd23Ww","parentname":"Tangent Plotter (Parametric)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Curve defined as parametric(t) = (x(t), y(t))     - redefine.\n    First derivative parametric is parametric_dydx(t) - redefine of use numeric (see function body).\n    First derivative of parametric_dydx is deriv(t)   - redefine of use numeric (see mainImage body).\n    Recompile.\n    \n    \n    Some interpretation:\n         p(t) = [x(t), y(t)] - parametric curve \n                       dy/dt - change of y(t) with respect to t\n                       dx/dt - change of x(t) with respect to t\n         dy/dx = (dy/dt) / (dx/dt) =\n               = (dy/dt) * (dt/dx)\n                             - change of y(t) with respect to x(t).\n    \n    Tangent line: ax + b\n        a = tan(theta) = dy/dx at t0 => theta = atan(dy/dx)\n        x = x - x(t0)\n        b = y(t0)\n        \n*/\n#define R                           iResolution\n#define AR                        (  R.x / R.y  )\n#define TO_CENTERED_NDC(SC)       ( ((SC)+(SC)-R.xy) / R.y )         // in range x=[-AR; AR], y=[-1.0; 1.0]\n#define UNIT                      ( 48.0 / R.y  )\n#define SMAA(x)                   ( smoothstep(UNIT, 0., x) )\n#define HASH(x,y)                 ( hash2to2(uint(x), uint(y)) )\n#define SCENE_SCALE               ( 20.0 )\n\nfloat vertical_line(vec2 NDC, float x0) { return SMAA(abs(NDC.x-x0)); }\nfloat horizontal_line(vec2 NDC, float y0) { return SMAA(abs(NDC.y-y0)); }\nfloat y_axis(vec2 NDC) { return SMAA(abs(NDC.x)); }\nfloat x_axis(vec2 NDC) { return SMAA(abs(NDC.y)); }\nfloat draw_explicit_func(vec2 NDC, float fx, float dfdx)\n{\n    float sdf = NDC.y - fx;\n    return SMAA(abs(sdf) / sqrt(1.0 + dfdx * dfdx)); // absolute value / arclenght over unit length interval\n}\n\n/**\nfloat x(float t) { return t - sin(t); }\nfloat y(float t) { return 1. - cos(t); }\n/**/\nfloat x(float t) { return sin(t)*t-cos(t*2.); }\nfloat y(float t) { return cos(t)*t-sin(t); }\n/**\nfloat x(float t) { return cos(t)*t- (sin(t)); }\nfloat y(float t) { return 6.*(cos(t) - cos(t*0.1*t)); }\n/**/\nvec2 parametric(float t) { return vec2(x(t), y(t)); }\n\n// https://www.shadertoy.com/view/NtVfWG\nfloat parametric_sdf(\n    in vec2 NDC,\n    in vec2 from, // NDC.x range\n    in vec2 to,   // t range\n    in float count)\n{\n    float dt = (from.y - from.x) / (count - 1.);\n    \n    float minimal_distance = 99.;\n    vec2 B = parametric(linear_remap(from.x, from, to));\n      \n    //for (float i = 1.; i < count && minimal_distance > 1e-3; i += 1.) // slower)\n    for (float i = 1.; i < count; i += 1.)\n    {\n        float t = linear_remap(from.x + dt * i, from, to);\n    \n        vec2 E = parametric(t);\n        minimal_distance = \n            min(minimal_distance, segmentSDF_L2(NDC, B, E, 0.));\n        B = E;\n    }\n    \n    //float thickness = sinOSC(-5., 20., iTime)/R.y;\n    return minimal_distance;//-thickness;\n}\n\nvec2 reparametrize(\n    float rel_s, // [0; 1]\n    float t0,\n    float t1,\n    float count)\n{\n    float dt = (t1-t0) / (count - 1.), t = t0, len = 0.;\n    vec2 B_ = parametric(t), E_;\n\n    float full_len = 0.;\n    for (float i = 1.; i < count; ++i)\n    {\n        E_ = parametric(t0 + i*dt);    \n        \n        full_len += length(E_-B_);\n        B_ = E_;\n    }   \n    rel_s = full_len * rel_s;\n    \n    // Reset.\n    B_ = parametric(t);\n    \n    // Search condition.\n    bool quit = len >= rel_s;\n    \n    for (float i = 1.; i < count && quit == false; ++i)\n    {\n        t= t0 + i*dt;\n        E_ = parametric(t);\n\n        len += length(E_-B_);\n        quit = len >= rel_s;\n        \n        B_ = E_;\n    }\n    \n    return parametric(t);\n}\n\nvec2 reparametrize(\n    float rel_s, // [0; 1]\n    float t0,\n    float t1,\n    float fp_count,\n    float sp_count,\n    float tp_count)\n{\n    float dt = (t1-t0) / (fp_count - 1.), t = t0, len = 0.;\n    vec2 B_ = parametric(t), E_;\n\n    // First pass - find arclength approximation.\n    float full_len = 0.;\n    for (float i = 1.; i < fp_count; i += 1.)\n    {\n        E_ = parametric(t0 + i*dt);          \n        full_len += length(E_-B_);\n        B_ = E_;\n    }   \n    rel_s = full_len * rel_s;\n    \n    // Second pass - find closest t where len >= rel_s (is range [t0; t1]).\n    B_ = parametric(t);\n    dt = (t1-t0)/(sp_count-1.);\n    bool quit = len >= rel_s;  \n    for (float i = 1.; i < sp_count && quit == false; i += 1.)\n    {\n        t= t0 + i*dt;\n        E_ = parametric(t);\n        len += length(E_-B_);\n        quit = len >= rel_s;        \n        B_ = E_;\n    }\n    \n    // Third pass - find closest t where len <= rel_s (in range [tp; t], small region).\n    dt = dt / (tp_count-1.);\n    float tp = t;\n    quit = len <= rel_s;\n    for (float i = 1.; i < tp_count && quit == false; i += 1.)\n    {\n        tp = t - i*dt;\n        B_ = parametric(tp);        \n        len -= length(E_-B_);\n        quit = len <= rel_s;        \n        E_ = B_;\n    }\n    \n    return parametric(tp);\n}\n\n/* https://www.shadertoy.com/view/DdsGDj */\n#define MOUSE_OFFSET ( iMouse.z > 0. ? iMouse.xy - R.xy * 0.5 : vec2(0) )\nvec2 map_to_centered_ndc(in vec2 SC, in float scale, in vec2 origin, in bool mouse)\n{\n    vec2 M = MOUSE_OFFSET * (mouse == true ? 1. : 0.);\n    return ((2. * (SC - M) - R.xy) / R.y) * scale - origin;\n}\n\nvoid mainImage( out vec4 O, in vec2 SC )\n{\n    vec2 NDC = map_to_centered_ndc(SC, SCENE_SCALE, vec2(0, 0), true);\n\n    vec3 color = vec3(1.);\n         color -= x_axis(NDC); color -= y_axis(NDC);\n         \n      \n      \n    /* Parametric function (x,y)=f(t) */\n    //                                                                         from                      to\n    //color = mix( color, vec3(1,0,0), SMAA(parametric_sdf(NDC, vec2(-AR*SCENE_SCALE, AR*SCENE_SCALE), vec2(0, 1), 64.)) );\n    color = mix( color, vec3(1,0,0), SMAA(parametric_sdf(NDC, vec2(-AR*SCENE_SCALE, AR*SCENE_SCALE), vec2(-20, 20), 1024.)) );\n\n    /* Dots. */\n    float t_min = -6.37*3.141592, t_max = 6.37*3.141592,\n    //float t_min = -1.5, t_max = 1.5, \n          T = fract(iTime*0.05),\n          RT = linear_remap(T, vec2(0, 1), vec2(t_min, t_max));\n    color = mix(color, vec3(0,0,0), SMAA(diskSDF_L2(NDC, parametric(RT), 2.*UNIT)) );\n    //color = mix(color, vec3(0,0.5,0), SMAA(diskSDF_L2(NDC, reparametrize(T, t_min, t_max, 3500.), 2.*UNIT)) );\n    color = mix(color, vec3(0,0,1), SMAA(diskSDF_L2(NDC, reparametrize(T, t_min, t_max, 100., 100., 250.), 2.*UNIT)) );\n\n    /* Cells */\n    #define CELL_SIZE 1\n    NDC = mod(NDC, vec2(CELL_SIZE)); \n    color -= vertical_line(NDC, 0.)*.2;  color -= horizontal_line(NDC, 0.)*.2; // comment this line if you not use mod\n    color -= vertical_line(NDC, -1.)*.2; color -= horizontal_line(NDC, -1.)*.2;         \n    color -= vertical_line(NDC, 1.)*.2;  color -= horizontal_line(NDC, 1.)*.2; \n    /* */ \n\n    O = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Returns sine modulated value in range [min, max]. */\nfloat sinOSC(in float min, in float max, in float T)\n{\n    float v = (sin(T) + 1.0) * 0.5; // map T to [0.0, 1.0];\n    return min + v * (max - min);   // map T to [min, max];\n}\n\nfloat diskSDF_L2(vec2 NDC, vec2 C, float R) { return length(C - NDC)-R; }\n\nfloat segmentSDF_L2(in vec2 NDC, in vec2 B, in vec2 E, in float R)\n{\n    vec2 BP = NDC - B, BE = E - B;\n    return length(BP - BE * clamp(dot(BP, BE) / dot(BE, BE), 0.0, 1.0)) - R;\n}\n\nfloat linear_remap(\n    float val,\n    vec2 from,\n    vec2 to)\n{\n    // inverse linear map from [from.x; from.y] to [0; 1].\n    val = (val - from.x) / (from.y - from.x);\n    // linear map from [0; 1] to [to.x; to.r].\n    return val * (to.y - to.x) + to.x;        \n}","name":"Common","description":"","type":"common"}]}