{"ver":"0.1","info":{"id":"mttcDs","date":"1699854612","viewed":49,"name":"aurora ytt","username":"zhy437488627","description":"aurora","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["aurora"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy的GLSL代码\n#define NUM_LAYERS 2.\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Star(vec2 uv, float flare) {\n\tfloat d = length(uv);\n    float m = .05/d;\n    \n    float rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    m += rays*flare;\n    uv *= Rot(3.1415/9.);\n    rays = max(0., 1.-abs(uv.x*uv.y*1000.));\n    //m += rays*.3*flare;\n    m += rays * flare / (d);\n    m *= smoothstep(.1, 0., d);\n    return m;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\nvec3 StarLayer(vec2 uv) {\n\tvec3 col = vec3(0);\n\t\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    for(int y=-1;y<=1;y++) {\n    \tfor(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            \n    \t\tfloat n = Hash21(id+offs); // random between 0 and 1\n            if (n < 0.8) continue;\n            float size = fract(n*345.32)*0.4;\n            \n    \t\tfloat star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.9, 1., size)*.6);\n\n            vec3 color = sin(vec3(.2, .3, .9)*fract(n*2345.2)*123.2)*.5+.5;\n            color = color*vec3(1,.25,1.+size)+vec3(.2, .2, .1)*2.;\n            \n            //star *= sin(iTime*3.+n*6.2831)*.5+1.;\n            star *= sin(iTime/4. * (1. + n) * 3. + n * 6.2831) * .1 + 0.1;\n            col += star*size*color;\n        }\n    }\n    return col;\n}\n// 定义全局变量\n#define TAU 6.28318530718\n\n// Perlin噪声的hash函数\nvec2 hash22(vec2 p) {\n    p = p * mat2(129.1, 311.7, 269.5, 183.3);\n    p = -1.0 + 2.0 * fract(sin(p) * 43758.5453123);\n    return sin(p * TAU + iTime * 0.1);\n}\n\n// 创建Perlin噪声的函数\nfloat perlinNoise(vec2 p) {\n    vec2 pi = floor(p);\n    vec2 pf = p - pi;\n    vec2 w = pf * pf * (3.0 - 2.0 * pf);\n    float f00 = dot(hash22(pi + vec2(0.0, 0.0)), pf - vec2(0.0, 0.0));\n    float f01 = dot(hash22(pi + vec2(0.0, 1.0)), pf - vec2(0.0, 1.0));\n    float f10 = dot(hash22(pi + vec2(1.0, 0.0)), pf - vec2(1.0, 0.0));\n    float f11 = dot(hash22(pi + vec2(1.0, 1.0)), pf - vec2(1.0, 1.0));\n    float xm1 = mix(f00, f10, w.x);\n    float xm2 = mix(f01, f11, w.x);\n    return mix(xm1, xm2, w.y);\n}\nmat2 rotate2d(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv1 = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    \n    float t = iTime*.0002;\n    \n    uv1 += M*4.;\n    \n    uv1 *= Rot(t);\n    vec3 col1 = vec3(0);\n    \n    for(float i=0.; i<1.; i+=1./NUM_LAYERS) {\n    \tfloat depth = fract(i+t);\n        \n        float scale = mix(20., .5, depth);\n        float fade = depth*smoothstep(1., .9, depth);\n        col1 += StarLayer(uv1*scale+i*453.2-M)*fade;\n    }\n    \n    col1 = pow(col1, vec3(.4545));\t// gamma correction\n    \n    // fragColor = vec4(col,1.0);\n    // 规范化坐标（从0到1）\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    // 缩小画面，展示更多内容\n    float zoom = 1.9; // 缩放系数，小于1表示缩小\n    uv = (uv - 0.1) / zoom + 0.5; // 将UV坐标缩放并重新定位到中心\n    mat2 rot = rotate2d(TAU / 3.0); // 90度旋转\n\n    // 将旋转中心移动到画面中心，应用旋转，然后移回\n    uv -= 0.5;\n    uv = rot * uv;\n    uv += 0.5;\n    uv.y = uv.y +1.0;\n    uv.x += 0.3; \n    // 纵横比校正\n    uv.x *= iResolution.x / iResolution.y;\n    // uv.x *= iResolution.x / iResolution.y; // 纵横比校正\n    uv.y = uv.y*.8-0.02;\n     // 例如，只有当UV的y坐标小于0.2时才应用噪声\n    //     n += 0.5000 * perlinNoise(uv * 1.0 - iTime * 0.2);\n    //     n += 0.2500 * perlinNoise(uv * 2.0 - iTime * 0.3);\n    //     n += 0.1250 * perlinNoise(uv * 4.0 - iTime * 0.5);\n    //     n += 0.0625 * perlinNoise(uv * 8.0 - iTime * 0.8);\n    // }\n    // Perlin噪声，用来创建波纹\n    float n = 0.0;\n    // if (uv.y < 0.2) {\n    n += 0.5000 * perlinNoise(uv * 1.0 - iTime * 0.1);\n    n += 0.2500 * perlinNoise(uv * 2.0 - iTime * 0.3*0.5);\n    n += 0.1250 * perlinNoise(uv * 4.0 - iTime * 0.5*0.5);\n    n += 0.0625 * perlinNoise(uv * 8.0 - iTime * 0.8*0.5);\n    uv.y += n * 1.1;\n    // }\n    // 北极光的强度\n    float intensity = smoothstep(0.1, 0.9, uv.y);\n    intensity *= sin(uv.y * 10.0 + n * 1.0 - 1. * 0.5) * 0.5;\n\n    // 添加颜色渐变，从紫色到蓝绿色\n    vec3 color1 = vec3(0.21, 0.07, 0.82); // 紫色\n    vec3 color2 = vec3(0.0, 0.3, 0.7); // 蓝绿色\n\n    // 使用垂直坐标(UV的y分量)来混合两种颜色\n    vec3 color = mix(color1, color2, uv.x);\n    \n    // 应用噪声强度到颜色上\n    color *= intensity*0.45;\n    // color = mix(col1,color,uv.x)\n    color += col1;\n    // 输出颜色\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}