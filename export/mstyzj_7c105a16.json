{"ver":"0.1","info":{"id":"mstyzj","date":"1695257581","viewed":66,"name":"resonance filter - rebug","username":"khlorghaal","description":"rebugging is the opposite of debugging\n\ni can taste the mpeg","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["complex","strobe","buffer"],"hasliked":0,"parentid":"Dd2BDK","parentname":"resonance filter"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sum(vec2 v){ return v.x+v.y; }\n\nvoid mainImage( out vec4 c, in vec2 fc ){\n\tvec2 uv = fc/iResolution.xy;\n    \n\tvec4 tx= texture(iChannel0, uv);\n    //float f= sum(tx);\n    //c= vec4(vec3(f),1.);\n    c= tx;\n    c= sqrt(c*2.+ETA)*3.;\n    //fragColor= vec4(0.,abs(tx.xy),1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//MIT License\n//author @khlorghaal\n//attribution appreciated\n\n\nvoid mainImage( out vec4 color, in vec2 fcf ){\n    ivec2 fc= ivec2(fcf);\n    \n    vec4  B=  texelFetch(iChannel0,fc,0);\n    vec4  T0= texelFetch(iChannel1,fc,0);\n\n    float a= lum(B.rgb)*.5;\n    #define  d(a,b) abs(a-b)\n    #define dv(a,b) d(T0.a,T0.b)\n    float b= //differences between frames\n    \n            +dv(x,y)*.5\n            +dv(x,z)*.4\n            +dv(x,w)*.2\n            +dv(y,z)*.2\n            +dv(y,w)*.2\n            +dv(z,w)*.2\n        ;\n    float c= //similarity between frames\n        (d(d(\n            dv(x,y),dv(y,z)),dv(z,w)\n            ));\n    b*= .5;\n    c= c;\n    //f*= .0;//decay\n    \n    //o= mix( o,B, .25);//smoothing\n\n    color= vec4(a,b,c,1.);\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define count(N) for(int i=0;i!=N;i++)\nfloat lum(vec3 c){ return dot(c,vec3(.3,.45,.25)); }\nfloat sum ( vec4 v){ return dot(v,vec4(1));}\nfloat maxv( vec4 a){ return max(a.w,max(a.z,max(a.x,a.y)));}\n\n\nfloat maxv( vec3 a){ return         max(a.z,max(a.x,a.y));}\nfloat minv( vec3 a){ return         min(a.z,min(a.x,a.y));}\n\nconst float TAU= 6.283185;\nconst float ETA= 1.e-8;\n#define len length\n#define lerp mix\n#define vec1 float\n\nvec2 clamps( vec2 x,  vec1 min,  vec1 max){ return clamp(x,  vec2(min), vec2(max));}\nvec3 clamps( vec3 x,  vec1 min,  vec1 max){ return clamp(x,  vec3(min), vec3(max));}\nvec4 clamps( vec4 x,  vec1 min,  vec1 max){ return clamp(x,  vec4(min), vec4(max));} \nvec1 sat(vec1 x){ return clamp (x, 0.,1.);}\nvec2 sat(vec2 x){ return clamps(x, 0.,1.);}\nvec3 sat(vec3 x){ return clamps(x, 0.,1.);}\nvec4 sat(vec4 x){ return clamps(x, 0.,1.);}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//hacky, replace when not shadertoy\n\nfloat m(vec3 c){\n    return (maxv(c))+(1.-minv(c));\n}\n\nvoid mainImage( out vec4 o, in vec2 f ){\nvec3 c = texelFetch(iChannel0,ivec2(f),0).rgb;\nvec4 t = texelFetch(iChannel1,ivec2(f),0);\no= vec4(m(c),t.xyz);}\n\n//push scalar onto vector left/x, discarding right/w\n//should use a scalar-texture array instead\n\n//swapchain limited to length 4 because\n//i dont want to fuck with invocation ordering under this hack","name":"Buffer B","description":"","type":"buffer"}]}