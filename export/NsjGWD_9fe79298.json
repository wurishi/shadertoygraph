{"ver":"0.1","info":{"id":"NsjGWD","date":"1617428783","viewed":95,"name":"codebreaker strips","username":"alice","description":"gonna just focus on making pretty things for a while, here's what i got from an evening of fiddling. code is a mess, don't look at it for examples.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Set this define for shadertoy\n#define shadertoy\n\n#ifndef shadertoy\n#define fragColor gl_FragColor\n#define fragCoord gl_FragCoord\n#define iResolution u_resolution\n#define iMouse u_mouse\n#define iTime u_time\n#endif\n#ifndef shadertoy\n#define fragColor gl_FragColor\n#define fragCoord gl_FragCoord\n#define iResolution u_resolution\n#define iMouse u_mouse\n#define iTime u_time\n#endif\n\n#define PI 3.1415926538\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nconst int MAX_STEPS = 1000;\nconst float MIN_RAY_LEN = 0.;\nconst float MAX_RAY_LEN = 1000.;\nconst float RAY_HIT_THRESH = 0.01;\n\nconst uint k = 1103515245U;  // GLIB C\n\nvec3 uhash(uvec3 x) {\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nvec3 hash(vec3 x) {\n    return uhash(uvec3(abs(x)));\n}\nvec3 tileColor(vec2 coord, float timestep) {\n    vec3 color = hash(vec3(coord, timestep));\n    color.g = pow(color.g, 2.2)*0.7+0.2;\n    color *= pow(hash(vec3(coord, timestep+9999999.)).x, .5);\n    color = pow(color, vec3(1.8))+0.2;\n    return clamp(pow(color, vec3(2.2)), 0., 1.).xyy;\n}\n\nfloat circle(vec2 posInTile) {\n    return smoothstep(0.49, 0.51, 2.*(0.7-distance(vec2(0.5), posInTile)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float f = 2.5;\n    float size = 35.;\n    float timestep = floor((iTime)*f);\n    fragCoord.x += iTime*100.;\n    float colOffset=(hash(vec3(floor(fragCoord.xxx/size))).x-0.5)*iTime*250.;\n    fragCoord.y += colOffset;\n    vec2 tile = floor(vec2(fragCoord.x, fragCoord.y)/size);\n    vec2 posInTile = fract(fragCoord/size);\n    float fadeT = fract(iTime*f);\n\n    float fadeLen = smoothstep(0.25, 0.75, hash(vec3(timestep, tile)).z);\n    float fadeOffset=(hash(vec3(timestep, tile)).x *2./-1.) * (1.-fadeLen)*0.5;\n    vec3 color = tileColor(tile, timestep);\n    vec3 prevColor = tileColor(tile, timestep-1.);\n    vec3 outColor = mix(prevColor, color, smoothstep(0.5-fadeLen/2., 0.5+fadeLen/2., clamp(fadeT+fadeOffset*0.5, 0., 1.)));\n    vec3 bgColor = tileColor(vec2(tile.x+999999., 0.), 0.)*0.2+0.04;\n    fragColor = vec4(mix(bgColor, outColor, circle(posInTile)), 1.);\n}\n\n#ifndef shadertoy\nvoid main() {\n    mainImage(fragColor, fragCoord.xy);\n}\n#endif\n","name":"Image","description":"","type":"image"}]}