{"ver":"0.1","info":{"id":"wt3yzf","date":"1616673876","viewed":69,"name":"7 Segment Display Clock GMT","username":"m1ke","description":"7 segment display. Displays GMT time.\nRed:Hours\nGreen:Minutes\nBlue:Seconds","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Line\n{\n    vec2 a;\n    vec2 b;\n    float thickness;\n    float l;\n};\nLine newLine(vec2 a, vec2 b, float t)\n{\n    Line l;\n    l.a = a;\n    l.b = b;\n    l.thickness = t;\n    l.l = length(a-b);\n    return l;\n}\nfloat dstToLine(Line l, vec2 c)\n{\n\tfloat s1 = -l.b.y + l.a.y;\n\tfloat s2 = l.b.x - l.a.x;\n\treturn abs((c.x - l.a.x) * s1 + (c.y - l.a.y) * s2) / sqrt(s1*s1 + s2*s2);\n}\n\nbool inLine(Line l, vec2 p)\n{\n    return (p.x-l.thickness < max(l.a.x,l.b.x) && p.x+l.thickness > min(l.a.x,l.b.x) && p.y-l.thickness < max(l.a.y,l.b.y) && p.y+l.thickness > min(l.a.y,l.b.y) && dstToLine(l,p) < l.thickness);\n}\nvoid DrawLine(inout vec3 col, vec2 p, Line l, vec3 c)\n{\n    if (inLine(l, p))\n    {\n        col = c;\n    }\n}\n\nstruct Display\n{\n    Line lines[7];\n    /*\n    middle\n    upper\n    lower\n    \n    upper left\n    upper right\n    lower left\n    lower right\n    */\n};\nDisplay newDisplay(vec2 middle, float t, float size)\n{\n    Display d;\n    d.lines[0] = newLine(vec2(middle.x-size,middle.y), vec2(middle.x+size, middle.y), t);\n    d.lines[1] = newLine(vec2(middle.x-size,middle.y+size*2.0f), vec2(middle.x+size, middle.y+size*2.0f), t);\n    d.lines[2] = newLine(vec2(middle.x-size,middle.y-size*2.0f), vec2(middle.x+size, middle.y-size*2.0f), t);\n    \n    d.lines[3] = newLine(vec2(middle.x-size,middle.y+size*2.0f), vec2(middle.x-size,middle.y), t);\n    d.lines[4] = newLine(vec2(middle.x+size,middle.y+size*2.0f), vec2(middle.x+size,middle.y), t);\n    d.lines[5] = newLine(vec2(middle.x-size,middle.y-size*2.0f), vec2(middle.x-size,middle.y), t);\n    d.lines[6] = newLine(vec2(middle.x+size,middle.y-size*2.0f), vec2(middle.x+size,middle.y), t);\n    \n    return d;\n}\n\nstruct TwoDigitDisplay\n{\n    Display ones;\n    Display tens;\n};\nTwoDigitDisplay newTwoDigitDisplay(vec2 middle, float t, float size)\n{\n    TwoDigitDisplay td;\n    vec2 offset = vec2(size + 10.0f,0);\n    td.tens = newDisplay(middle-offset, t, size);\n    td.ones = newDisplay(middle+offset, t, size);\n    return td;\n}\n\n\nvoid DrawDisplay(inout vec3 col, vec2 p, Display d, bool table[7], vec3 c)\n{\n    for (int i = 0; i < 7; i++)\n    {\n        if (table[i])\n        {\n            DrawLine(col,p,d.lines[i],c);\n        }\n    }\n}\nvoid DrawTDDisplay(inout vec3 col, vec2 p, TwoDigitDisplay t, bool a[7], bool b[7], vec3 co)\n{\n    DrawDisplay(col, p, t.tens, a, co);\n    DrawDisplay(col, p, t.ones, b, co);\n}\nstruct Numbers\n{\n    bool num[7];\n};\nNumbers newN(bool n[7])\n{\n    Numbers a;\n    a.num = n;\n    return a;\n}\nbool zero[7] = bool[7](false,true,true,true,true,true,true);\n\nvec2 GetDigits(float value)\n{\n    return vec2(floor(value/10.0f), value - (floor(value/10.0f) * 10.0f));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    Numbers n[10] = Numbers[10]\n    (\n        newN(bool[7](false,true,true,true,true,true,true)), //0\n        newN(bool[7](false,false,false,false,true,false,true)), //1\n        newN(bool[7](true,true,true,false,true,true,false)), //2\n        newN(bool[7](true,true,true,false,true,false,true)), //3\n        newN(bool[7](true,false,false,true,true,false,true)), //4\n        newN(bool[7](true,true,true,true,false,false,true)), //5\n        newN(bool[7](true,true,true,true,false,true,true)), //6\n        newN(bool[7](false,true,false,false,true,false,true)), //7\n        newN(bool[7](true,true,true,true,true,true,true)), //8\n        newN(bool[7](true,true,true,true,true,false,true)) //9\n    );\n    \n    \n    float hours = floor(iDate.w/60.0f/60.0f);\n    vec2 hourD = GetDigits(hours);\n    \n    float mins = floor(iDate.w /60.0f- (hours*60.0f));\n    vec2 minD = GetDigits(mins);\n    \n    float seconds = floor(iDate.w - (hours*60.0f*60.0f) - (mins*60.0f));\n    vec2 secondD = GetDigits(seconds);\n    \n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 middle = iResolution.xy / 2.0f;\n    float size = iResolution.y * 0.1f;\n\n    // Time varying pixel color\n    vec3 col = vec3(1,1,1);\n    \n    vec2 offset = vec2(200,0) * size * 0.02f;\n    \n    \n    TwoDigitDisplay hourDis = newTwoDigitDisplay(middle-(1.5f*offset), 5.0f, size);\n    DrawTDDisplay(col, fragCoord, hourDis, n[int(hourD.x)].num, n[int(hourD.y)].num, vec3(1,0,0));\n    \n    TwoDigitDisplay minDis = newTwoDigitDisplay(middle, 5.0f, size);\n    DrawTDDisplay(col, fragCoord, minDis, n[int(minD.x)].num, n[int(minD.y)].num, vec3(0,1,0));\n    \n    TwoDigitDisplay secondDis = newTwoDigitDisplay(middle+(offset*1.5f), 5.0f, size);\n    DrawTDDisplay(col, fragCoord, secondDis, n[int(secondD.x)].num, n[int(secondD.y)].num, vec3(0,0,1));\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}