{"ver":"0.1","info":{"id":"M3jGWz","date":"1708377224","viewed":39,"name":"Marching of Rays","username":"shadertoyusr","description":"raymarching tutorial","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p) {\n    return length(p) - 1.; // distance to a sphere of radius 1\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Ray origin\n    vec3 ro = vec3(0.0, 0.0, -3);\n    // Ray direction\n    vec3 rd = normalize(vec3(uv, 1));\n    // Final pixel color\n    vec3 col = vec3(0);\n    \n    \n    // Total distance traveled by ray\n    float t = 0.0;\n    \n    // Raymarching\n    for (int i = 0; i < 80; i++) {\n        // Position along the ray\n        vec3 p = ro + rd * t;\n        \n        // Current distance to the scene\n        float d = map(p);\n        \n        // Marhch the ray\n        t += d;\n        \n        col = vec3(i) / 80.0;\n        \n        if (d < 0.001 || d > 100.0)\n            break;\n    }\n    \n    col = vec3(t * 0.2);\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}