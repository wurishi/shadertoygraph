{"ver":"0.1","info":{"id":"ftXGWl","date":"1623143430","viewed":379,"name":"Neural CA-2","username":"Znah","description":"Two 588-parameter NCA rules in a single shader.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["neuralca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Neural CA\" by Znah. https://shadertoy.com/view/fd2XRV\n// 2021-06-07 08:09:14\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int W = int(iResolution.x) / 3;\n    vec2 p = fragCoord.yx;\n    p /= 2.0;\n    p.x = mod(p.x, float(W));\n \n    fragColor = texture(iChannel0, p/iResolution.xy)+0.5;\n    //fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy)*0.5+0.5;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 hash43(vec3 p)\n{\n\tvec4 p4 = fract(vec4(p.xyzx)  * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\nfloat W;\nvec2 pos;\n\nvec4 R(int dx, int dy, int c) {\n    vec2 p = mod(pos+vec2(dx, dy), vec2(W, iResolution.y));\n    p.x += W*float(c);\n    return texture(iChannel0, p/iResolution.xy);\n}\nvec4 nhood(int i) {\n  return vec4(R(0,1,i).x, R(-1,0,i).y, R(0,-1,i).z, R(1,0,i).w);\n}\n\nvec4 update1(float band, vec4 y[6]) {\n  #define M mat4\n  #define F(i,_a,_b) {M a=_a,b=_b; vec4 yi=y[i]; dx+=G(0)+G(1)+G(2)+G(3);}\n  #define G(i) yi[i]*((yi[i]>0.0)?a[i]:b[i])\n  vec4 dx;\n  if (band == 0.) { dx = vec4(-3,-1,10,4);\n    F(0, M(-33,-12,0,13,5,-65,-26,15,-7,-21,-22,-44,12,-5,-17,-21), M(-50,3,44,-18,29,-34,15,40,-25,1,-54,7,5,-13,3,-66));\n    F(1, M(6,1,13,-9,23,30,8,-12,10,-14,-7,7,2,-7,-4,24), M(-17,13,-9,9,-45,-10,-59,-16,-6,6,-10,-4,-13,-21,-12,11));\n    F(2, M(-8,12,14,3,-13,14,-8,14,4,9,-22,12,-21,-15,-8,2), M(-18,-6,13,-2,-9,-13,26,-8,4,5,3,-10,-6,11,-4,8));\n    F(3, M(6,4,-8,16,0,4,34,-18,-5,-10,48,-21,47,21,-49,92), M(6,12,9,-7,26,24,-4,7,8,-9,23,-21,-6,1,16,4));\n    F(4, M(15,-39,84,-93,6,3,-1,3,-52,-27,-45,12,-35,-10,-73,19), M(-1,14,-14,-2,-15,-15,8,28,32,-1,47,-32,8,-4,21,-24));\n    F(5, M(9,36,6,-31,-32,-25,22,-50,-35,17,-30,31,-49,-37,-33,-19), M(-2,-9,-8,16,-24,-16,-32,25,-24,-10,3,8,46,-23,17,-16));\n  } else if (band == 1.) { dx = vec4(18,6,-23,-2);\n    F(0, M(-7,5,-6,-17,-30,-42,6,41,-2,3,7,-16,-16,40,-13,-17), M(11,9,1,-13,7,26,0,-16,-9,3,-15,24,1,19,1,-14));\n    F(1, M(-21,17,6,-26,3,-27,52,-21,5,-21,-78,4,-10,12,-5,-32), M(-52,5,-7,8,-34,-93,-17,24,7,-13,-60,-8,0,10,-31,-46));\n    F(2, M(-4,-17,23,-28,14,3,2,-45,-24,-1,-47,16,6,-16,2,-29), M(-2,-5,-21,22,-7,-20,-2,-14,11,6,-37,-49,4,-20,13,-5));\n    F(3, M(-16,-2,7,7,26,18,8,-10,-4,-11,-9,17,-4,0,-13,-13), M(10,3,-7,2,11,4,6,13,22,1,-2,-2,11,12,18,-27));\n    F(4, M(69,14,10,-44,-23,26,14,20,-26,-42,11,35,-33,-40,-78,177), M(23,-27,-17,15,-3,46,14,35,7,44,48,-63,13,17,-13,23));\n    F(5, M(19,21,31,-26,-5,-36,-9,1,-4,-39,-67,55,-21,-41,5,3), M(-21,-1,13,-2,-23,-42,-25,27,-1,-43,-13,15,-2,15,-2,-9));\n  } else { dx = vec4(-3,-4,-4,-4);\n    F(0, M(3,21,-22,20,34,14,1,39,-16,9,-9,29,-22,-18,21,2), M(3,4,-28,23,-36,7,-37,-10,-24,-15,41,1,8,14,9,-2));\n    F(1, M(1,3,-7,5,-5,5,-33,-6,14,10,-6,-8,2,-6,12,13), M(-16,-22,37,-22,52,7,0,-15,14,-9,-8,-16,24,5,18,8));\n    F(2, M(-64,-11,15,-10,12,-42,34,-56,6,-16,-60,-34,11,-2,1,-49), M(-31,0,-5,-26,-10,-61,10,12,7,2,-50,-14,-9,16,12,-41));\n    F(3, M(-1,8,18,0,0,-37,-30,48,16,45,-1,32,5,-20,14,-19), M(1,3,-14,6,-17,-15,-15,39,3,23,-8,19,-1,50,-28,32));\n    F(4, M(1,75,-49,85,-31,-19,25,-30,5,5,24,7,54,-75,5,-36), M(8,-10,12,5,23,-42,19,-29,-16,26,-46,-9,6,2,-12,34));\n    F(5, M(20,-16,6,-7,35,65,10,-9,8,-8,156,-75,30,9,14,30), M(27,8,6,-40,-7,39,30,-42,13,10,20,-11,6,50,-32,146));\n  }\n  #undef M\n  #undef F\n  #undef G\n  return dx/500.0;\n}\n\nvec4 update2(float band, vec4 y[6]) {\n  #define M mat4\n  #define F(i,_a,_b) {M a=_a,b=_b; vec4 yi=y[i]; dx+=G(0)+G(1)+G(2)+G(3);}\n  #define G(i) yi[i]*((yi[i]>0.0)?a[i]:b[i])\n  vec4 dx;\n  if (band == 0.) { dx = vec4(-25,-1,-5,-3);\n    F(0, M(-95,12,-17,15,15,-59,-34,-25,22,12,-52,-18,3,-10,9,-42), M(-37,21,57,15,-26,-20,19,-6,5,-10,-61,-15,-7,25,17,-70));\n    F(1, M(15,7,14,3,39,4,14,3,12,-24,14,-13,6,-18,6,8), M(-2,17,4,-5,3,8,13,11,-28,20,-9,32,-8,12,7,-34));\n    F(2, M(44,42,15,19,8,-8,-4,22,5,-21,15,-8,9,-9,10,0), M(-19,-28,-22,-4,0,11,-2,-14,-5,-12,24,7,-34,-13,-45,-14));\n    F(3, M(22,5,9,10,-12,22,-6,-15,-1,10,19,7,-18,46,-14,44), M(37,1,18,5,-1,5,7,-21,13,-7,6,-6,1,-11,-27,37));\n    F(4, M(32,25,27,1,40,3,46,15,-10,8,-36,-45,-16,-3,-1,-6), M(24,15,26,9,-6,10,2,15,-7,34,1,-9,11,-22,7,-25));\n    F(5, M(-11,-5,-24,14,13,16,21,9,-21,-23,-37,-34,38,-29,37,5), M(-17,30,-17,31,4,-45,16,15,-29,-13,-33,-16,3,36,12,-14));\n  } else if (band == 1.) { dx = vec4(-12,-22,-3,-5);\n    F(0, M(6,-18,21,-10,26,47,-28,11,6,-8,-19,-15,4,-1,-7,9), M(-15,20,-3,-21,-8,-10,74,-39,-3,-10,-6,-12,-24,-2,17,15));\n    F(1, M(-61,49,-12,4,-1,-72,-7,2,41,-13,-74,4,7,24,-24,-36), M(-36,32,-1,-24,-12,-82,8,-16,14,-47,-31,-24,-27,25,-32,-62));\n    F(2, M(-17,-14,33,1,36,-5,-4,-10,19,-21,-78,18,-16,-23,29,-21), M(-11,-33,-21,41,-11,-1,-53,61,17,8,-57,9,1,-13,10,-3));\n    F(3, M(10,1,17,-13,-11,-12,39,-20,-8,-11,14,-18,-16,-24,50,-12), M(2,-1,15,-4,3,-21,-3,-13,-11,-6,-8,-5,-7,27,-9,0));\n    F(4, M(7,11,35,-37,21,36,17,-16,9,-16,17,-21,-24,33,-37,40), M(21,1,33,-32,6,16,18,-3,18,-9,60,-55,9,16,-40,41));\n    F(5, M(9,-11,-8,20,28,28,14,-17,-14,7,-71,17,1,-20,-23,-26), M(-35,9,19,15,-11,-2,-49,19,-9,-4,-27,35,8,-26,23,-30));\n  } else { dx = vec4(20,-5,-1,-17);\n    F(0, M(-12,-14,-12,29,-51,21,-5,17,-10,3,-72,28,-20,11,-23,21), M(39,-28,5,-17,61,-57,33,-21,4,-7,-21,8,14,-9,-2,-11));\n    F(1, M(0,-24,-26,7,32,-19,-8,54,-25,29,34,-20,-33,-33,-29,43), M(24,11,24,-12,16,27,4,13,58,-37,39,-66,-23,-20,-3,-4));\n    F(2, M(-38,-32,14,-24,-15,-54,7,19,-5,20,-42,-11,2,-39,10,-73), M(-85,5,-1,2,-14,-80,21,38,-6,19,-45,23,-29,-16,-36,-63));\n    F(3, M(12,-11,3,1,17,-16,4,-12,29,-22,5,-19,50,-8,11,-41), M(11,-24,6,-8,-7,11,17,-10,0,2,12,9,-19,-4,-8,4));\n    F(4, M(19,-25,9,2,15,-16,-36,11,-22,18,20,-3,-32,-18,-14,26), M(30,-27,-31,-13,11,-14,-31,26,15,-23,15,-16,-5,-27,26,15));\n    F(5, M(16,-13,27,-24,9,8,-4,-6,-58,23,120,42,-26,0,-48,56), M(13,-19,-10,-19,-38,55,6,48,-19,20,79,-17,20,-55,-6,54));\n  }\n  #undef M\n  #undef F\n  #undef G\n  return dx/500.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    W = floor(iResolution.x / 3.);\n    pos = fragCoord.xy;\n    pos.x = mod(pos.x, W);\n    float band = floor(fragCoord.x / W);\n\n    vec4 y[6];\n    y[0]=R(0,0,0); y[3]=(nhood(0)-y[0])*2.;\n    y[1]=R(0,0,1); y[4]=(nhood(1)-y[1])*2.;\n    y[2]=R(0,0,2); y[5]=(nhood(2)-y[2])*2.;\n    vec4 x = (band==0.) ? y[0] : ((band==1.) ? y[1] : y[2]);\n    vec4 dx;\n    if (fract((iTime-pos.x/100.0)/20.0)<0.5) {  // alternate btw two rules\n      dx = update1(band, y);\n    } else {\n      dx = update2(band, y);\n    }\n    \n    vec4 mask = floor(hash43(vec3(fragCoord, iFrame)) + 0.5);\n    float q = 128.0;\n    vec4 noise = hash43(vec3(fragCoord, iFrame+1000))-0.5;   \n    fragColor = clamp(round((x + dx*mask)*q+noise)/q, -1.0, 1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}