{"ver":"0.1","info":{"id":"3dV3zh","date":"1569768388","viewed":225,"name":"Visualiser 101","username":"Cotterzz","description":"I started this again, this time I have proper correspondence between colours and notes.\nAnd each cycle of the spectrum is one octave.\nI still can't always pick out individual notes because of the complex harmonies of various instruments.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fft","audio","visualisation","octaves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* I'm starting this again from scratch because I got the values totally wrong the first time around.\nI thought that the frequency range was logarithmic ie the octaves were the same distance apart,\nTurns out that's not the case,\nthe good news is that the frequency range in the samples is 0hz-10000hz or 10khz,\nwhich has been normalised to 0-1! So to get the frequency from the fft analysis,\njust multiply by 10,000!\nSo, to get the actual note, or the half steps from A4\nYou need to use: 69.00 + 12*log2(frequency/440.00);\n(halfsteps = 12 times the log2 of frequency divided by target frequency)\nnotes = fract(halfsteps/12.00) - this gives the position in the octave normalised to 0-1\nFractional values should indicate more dissonance, integers being representative of actual notes.\ndissonance = abs(fract(notes*12.00)-0.5); (number from 0 to 0.5 being the distance from a musical note)\n\nSo what I'm doing here is pulling individual notes as well as indicating level of dissonance\n\nI've loaded up my soundcloud account with some pure tones to test this out,\nand help me understand how the fft analysis treats the audio data\n\nI'll use this as a base for something more advanced\n\nHope that makes sense.\n\nMore importantly,\nI hope others can use this partial deciphering of the audio api to make something awesome!\n*/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float fftwaveform = texture(iChannel0, vec2(uv.x,0.0)).r;\n    \n    float frequency = uv.x * 10000.00;\n    \n    float halfsteps = 69.00 + 12.00*log2(frequency/440.00);\n    \n    float notes = fract(halfsteps/12.00);\n    \n    float notevolume = step(uv.y,fftwaveform);\n    \n    float dissonance = abs(fract(notes*12.00)-0.5);\n    \n    vec4 col = ( .6283+ .6283*cos( 6.2831853 * notes + vec4(0,23,21,0)  ) )*notevolume*(1.0-dissonance);\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}