{"ver":"0.1","info":{"id":"XsjcDh","date":"1492175684","viewed":237,"name":"Sketch_Dots2","username":"cexlearning","description":"Dots2ï¼Œ copy from https://github.com/keijiro/ShaderSketches","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotate(vec2 p, float theta)\n{\n    vec2 sncs = vec2(sin(theta), cos(theta));\n    return vec2(p.x * sncs.y - p.y * sncs.x, dot(p, sncs));\n}\n\nfloat swirl(vec2 coord, float t)\n{\n    float l = length(coord) / iResolution.x;\n    float phi = atan(coord.y, coord.x + 1e-6);\n    return sin(l * 10.0 + phi - t * 4.0) * 0.5 + 0.5;\n}\n\nfloat halftone(vec2 coord, float angle, float t, float amp)\n{\n    coord -= iResolution.xy * 0.5;\n    float size = iResolution.x / (60.0 + sin(iTime * 0.5) * 50.0);\n    vec2 uv = rotate(coord / size, angle / 180.0 * 3.14); \n    vec2 ip = floor(uv); // column, row\n    vec2 odd = vec2(0.5 * mod(ip.y, 2.0), 0.0); // odd line offset\n    vec2 cp = floor(uv - odd) + odd; // dot center\n    float d = length(uv - cp - 0.5) * size; // distance\n    float r = swirl(cp * size, t) * size * 0.5 * amp; // dot radius\n    return 1.0 - clamp(d  - r, 0.0, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    vec3 c1 = 1.0 - vec3(1, 0, 0) * halftone(fragCoord.xy,   0.0, iTime * 1.00, 0.7);\n    vec3 c2 = 1.0 - vec3(0, 1, 0) * halftone(fragCoord.xy,  30.0, iTime * 1.33, 0.7);\n    vec3 c3 = 1.0 - vec3(0, 0, 1) * halftone(fragCoord.xy, -30.0, iTime * 1.66, 0.7);\n    vec3 c4 = 1.0 - vec3(1, 1, 1) * halftone(fragCoord.xy,  60.0, iTime * 2.13, 0.4);\n    fragColor = vec4(c1 * c2 * c3 * c4,1);\n}","name":"Image","description":"","type":"image"}]}