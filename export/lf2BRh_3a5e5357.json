{"ver":"0.1","info":{"id":"lf2BRh","date":"1724666658","viewed":37,"name":"transforming sinewave","username":"Efim","description":"https://www.shadertoy.com/view/DtdBR4\nhttps://www.shadertoy.com/view/mttfzl\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","sdf","bisect","transforming"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI  3.14159265359\n#define TAU 6.28318530718\n#define rot(f) mat2(cos(f), -sin(f), sin(f), cos(f))\n#define nn 64.\n#define newton 5\n\nfloat dist_infin =2.2;\nfloat csurf = 0.;\nmat3 rotateX(float f) {\n    return mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(f), -sin(f)), vec3(.0, sin(f), cos(f)));\n}\nmat3 rotateY(float f) {\n    return mat3(vec3(cos(f), 0.0, sin(f)), vec3(0.0, 1.0, 0.0), vec3(-sin(f), 0.0, cos(f)));\n}\n\nfloat sdRound(vec3 p, float r, float f)\n{\n    float d = abs(length(p.xy) - r*cos(f));\n    d = length(vec2(p.z-r*sin(f), d));\n    return d;\n}\n//https://www.shadertoy.com/view/DtdBR4\nfloat sinewave(vec3 p, float a, float b, float m, float n)\n{\n    float fi = atan(p.y, p.x); //aafi(p.xy)\n    float w = dist_infin;\n    for (float i = 0.; i < 10.; i++ )\n    {\n        if (mod(i,m) == 0.0 && i > 0.)\n            break;\n        float t = (fi + TAU*i)/m;    \n        float wt = abs(p.z - b*sin(n*t));\n        w = min(w, wt);\n    }\n    float r = length(vec2(length(p.xy) - a, w))/2.0;\n    return r - 0.03;\n}\n\n//https://www.shadertoy.com/view/mttfzl\nfloat sdLonLat(vec3 p, float r)\n{\n        #define ll 20.\n        float fi = atan(p.x, p.y);\n        fi += step(p.y, 0.0)*TAU;\n        float ln = floor(fi/TAU*ll);\n        float l1 = ln * TAU/ll;\n        float l2 = l1 + TAU/ll;\n        float d = min(\n            sdRound(rotateX(l1)*rotateY(PI/2.)*p, r, 0.), \n            sdRound(rotateX(l2)*rotateY(PI/2.)*p, r, 0.));\n        \n        fi = atan(p.z, length(p.xy));\n        float mm = ll/4.0;\n        ln = floor(abs(fi)/PI*2.0*mm);\n        l1 = ln*PI/2.0/mm;\n        l2 = l1 + PI/2.0/mm;\n        float d2 = min(sdRound(p, r, l1*sign(p.z)), sdRound(p, r, l2*sign(p.z)));\n        d = min(d2, d);\n        return d - 0.05;\n}\n\n\nfloat glz() {\n    float t = iTime / 4.;\n    float st = mod(floor(t), 4.);\n    float res;\n    if(st == 0.)\n        res = 1.;\n    if(st == 1.)\n        res = cos(fract(t) * PI / 2.);//(1.- fract(t))*(1.- fract(t));\n    if(st == 2.)\n        res = 0.;\n    if(st == 3.)\n        res = sin(fract(t) * PI / 2.); //fract(t)*fract(t);   \n    return res;\n}\n\nfloat map( in vec3 p )\n{\n    if (csurf == 0.0)\n        return sinewave(p, .9, .4, 3.5, 9.);\n    else\n    if (csurf == 1.0)\n        return sdLonLat(p, 1.0);\n    else       \n        //return sdLonLat(p, 1.0)*csurf + (1.-csurf)*sinewave(p, .9, .4, 3.5, 9.);\n        return mix(sinewave(p, .9, .4, 3.5, 9.), sdLonLat(p, 1.0), csurf);\n    //return pown(pos);\n    //return queen(pos);\n}\n\n\nvec3 calcNormal(in vec3 p) {\n    const float eps = 0.0001;\n    vec2 q = vec2(0.0, eps);\n\tvec3 res =  vec3(map(p+q.yxx) - map(p-q.yxx), \n\t\t\t    map(p+q.xyx) - map(p-q.xyx),\n\t\t\t    map(p+q.xxy) - map(p-q.xxy));\n    return normalize(res);\n}\n\nvec3 getPoint(vec3 a, vec3 b, float v0, float v1) {\n            vec3 m;\n            //binary search with  n iterations, n = newton\n            for (int i = 0; i < newton; i++) {\n                m = (a+b)*0.5;\n                float v = map(m);\n                if (v == 0.)\n                    break;\n\n                if (sign(v) * sign(v0) <= 0.) {\n                    v1 = v;\n                    b = m;\n                }\n                else {\n                    v0 = v;\n                    a = m;\n                }\n            }\n            return m;\n        }\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l - p), r = normalize(vec3(f.z, 0, -f.x)), u = cross(f, r), c = f * z, i = c + uv.x * r + uv.y * u;\n    return normalize(i);\n}\n\n\n/*\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n*/\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    csurf = glz();\n    dist_infin = 1.2;\n    float    hh =2.5;\n        \n    vec3 light = normalize(vec3(0.0, 1.0, 1.0)); //light\n    vec3 light2 = normalize(vec3(0.0, -1.0, 2.5)); //light\n    vec2 mo = 1.5*cos(0.3*iTime + vec2(0,11));\n    if  (iMouse.z > 0.0)\n    {\n        mo = (-iResolution.xy + 2.0 * (iMouse.xy)) / iResolution.y;\n    }\n    vec3 ro = vec3(0.0, 0.0, hh ); // camera\n    //camera rotation\n    ro.yz *= rot(mo.y);\n    ro.xz *= rot(-mo.x-1.57);\n\n    const float fl = 1.5; // focal length\n    float dist = dist_infin;\n\n    //antialiasing\n    vec3 tot = vec3(0.0);\n    for(int m = 0; m < AA; m++) \n    for(int n = 0; n < AA; n++) {\n            vec2 o = vec2(float(m), float(n)) / float(AA) - 0.5;\n            vec2 p = (-iResolution.xy + 2.0 * (fragCoord + o)) / iResolution.y;\n            vec3 rd = GetRayDir(p, ro, vec3(0, 0., 0), fl); //ray direction\n            vec3 col = vec3(0.0);\n            \n            \n            //STEP 1. Calculating bounding sphere\n            float d = length(cross(ro, rd));\n            if (d >= dist)\n            {\n                 continue;\n            }\n            /*\n            STEP 2.\n            ray tracing inside the bounding sphere, \n            searching for a segment with different signs of the function value \n            at the ends of the segment\n            */\n            float td = abs(dot(ro, rd));\n            d = sqrt(dist*dist - d*d);\n            vec3 pos0 = ro + rd * (td - d);\n            vec3 pos1 = ro + rd * (td + d);\n            vec3 rd0 = pos1 - pos0;\n            vec3 pos = pos0;\n            float val0 = map(pos0);\n            for(float i = 1.; i < nn; i++) {\n                pos1 = pos0 + rd0 * i / (nn - 1.);\n                float val1 = map(pos1);\n                if (sign(val0)*sign(val1) <= 0.)\n                {\n                    //different signs of the function value  at the ends of the segment\n                    //STEP 3. binary search to clarify the intersection of a ray with a surface.\n                    \n                    pos = getPoint(pos, pos1, val0, val1);\n                    vec3 nor = calcNormal(pos);\n                    float dif = clamp( dot(nor,light), 0.2, 1.0 );\n                    float amb = 0.5 + 0.5*dot(nor,light2);\n                    col = vec3(0.2,0.3,0.4)*amb + vec3(0.85,0.75,0.65)*dif;\n                    break;\n                }\n                val0 = val1;\n                pos = pos1;\n            }\n            // gamma        \n            col = sqrt( col );\n            tot += col;\n        }\n    tot = tot / float(AA)/ float(AA);\n    //antialiasing\n    fragColor = vec4(tot, 1.0);\n}","name":"Image","description":"","type":"image"}]}