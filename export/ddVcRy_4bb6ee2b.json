{"ver":"0.1","info":{"id":"ddVcRy","date":"1696273733","viewed":18,"name":"shaders are cool","username":"kwyntes","description":"i dont fucking know how this works but it looks pretty neat?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat sdBox(vec2 p, vec2 b)\n{\n    vec2 d = abs(p) - b;\n    return length(max(d, 0.)) + clamp(d.x, d.y, 0.);\n}\n\nfloat sphIntersect(vec3 ro, vec3 rd, vec4 sph)\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - sph.w * sph.w;\n    float h = b * b - c;\n    if (h < 0.0) return -1.0;\n    h = sqrt(h);\n    return -b - h;\n}\n\nvoid mainImage(out vec4 fragColour, vec2 fragCoord)\n{\n    // Normalised vector adjusted for aspect ratio with origin at the center of the screen\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec3 finalColour = vec3(0., 0., 0.);\n    \n    float x = 9.;\n    \n    //float d = sdBox(uv, vec2(0.5, 0.5));\n    float d = sphIntersect(vec3(0., uv.yx), vec3(uv.yx, 3.0), vec4(0., 2., 3., 4.));\n    d = sin(d*x+iTime*2.)/x;\n    d = abs(d);\n    \n    d = 0.02 / d;\n    \n    finalColour += d * palette(length(uv), vec3(0.500, 0.500, 0.500), vec3(1.328, 0.500, 0.500), vec3(0.388, 0.748, 1.000), vec3(0.067, 0.262, 0.595));\n    \n    fragColour = vec4(finalColour, 1.);\n}","name":"Image","description":"","type":"image"}]}