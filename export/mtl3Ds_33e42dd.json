{"ver":"0.1","info":{"id":"mtl3Ds","date":"1672728296","viewed":287,"name":"Harmonic Starfield","username":"PHTest","description":"Make sure the music is playing! This could use some tweaking of values in the future.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["sdf","music","audio","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* https://www.shadertoy.com/view/XsX3zB\n *\n * The MIT License\n * Copyright Â© 2013 Nikita Miropolskiy\n * \n * ( license has been changed from CCA-NC-SA 3.0 to MIT\n *\n *   but thanks for attributing your source code when deriving from this sample \n *   with a following link: https://www.shadertoy.com/view/XsX3zB )\n *\n * ~\n * ~ if you're looking for procedural noise implementation examples you might \n * ~ also want to look at the following shaders:\n * ~ \n * ~ Noise Lab shader by candycat: https://www.shadertoy.com/view/4sc3z2\n * ~\n * ~ Noise shaders by iq:\n * ~     Value    Noise 2D, Derivatives: https://www.shadertoy.com/view/4dXBRH\n * ~     Gradient Noise 2D, Derivatives: https://www.shadertoy.com/view/XdXBRH\n * ~     Value    Noise 3D, Derivatives: https://www.shadertoy.com/view/XsXfRH\n * ~     Gradient Noise 3D, Derivatives: https://www.shadertoy.com/view/4dffRH\n * ~     Value    Noise 2D             : https://www.shadertoy.com/view/lsf3WH\n * ~     Value    Noise 3D             : https://www.shadertoy.com/view/4sfGzS\n * ~     Gradient Noise 2D             : https://www.shadertoy.com/view/XdXGW8\n * ~     Gradient Noise 3D             : https://www.shadertoy.com/view/Xsl3Dl\n * ~     Simplex  Noise 2D             : https://www.shadertoy.com/view/Msf3WH\n * ~     Voronoise: https://www.shadertoy.com/view/Xd23Dh\n * ~ \n *\n */\n\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n    \n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n    \n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n    \n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n    \n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n    \n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n    \n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n    \n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n    \n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) {\n    return   0.5333333*simplex3d(m*rot1)\n        +0.2666667*simplex3d(2.0*m*rot2)\n        +0.1333333*simplex3d(4.0*m*rot3)\n        +0.0666667*simplex3d(8.0*m);\n}\n\nvec3 opRep(in vec3 p, in vec3 c) {\n    vec3 q = mod(p, c) - 0.5 * c;\n    return q;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat loudness(float i, float mag) { return 10.0 * mag * sqrt(log(i + 1.0)); }\nvec3 map(in vec3 p) {\n    vec3 rep = vec3(18.0, 18.0, 18.0);\n    \n    vec3 r3 = random3(floor(p/rep));\n    // float f = 0.5 * noise3D(1.13 * floor(p.xyz / rep.xyz));\n    float f = r3.x;\n    // float spectrumRange = abs(f*1.0 + 1.0*rand);\n    float spectrumRange = abs(f)*1.0;\n    // float freqMag = texture(left_spectrum, spectrumRange).x;\n    // TODO: Shadertoy might already normalize for percieved loudness\n    float freqMag = texelFetch(iChannel0, ivec2(spectrumRange * 512.0,0), 0).x;\n    \n    // p.xy += 0.25 * rep.xy * xzyRand;\n    // p.z += f*rep.z*0.85;\n    p += 0.75*rep*r3;\n    p = opRep(p, rep);\n    // float d = sdBox(w.xzy, vec3(0.1));\n    float d = sdSphere(p, 0.1);\n    \n    vec3 result = vec3(d, f, freqMag);\n    \n    return result;\n}\n\n\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) { return a + b * cos(6.28318 * (c * t + d)); }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 q = fragCoord.xy / iResolution.xy; \n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x /iResolution.y;\n    \n    // Camera setup.\n    //float cam_zoom = 1.0 + 2.0 * iMouse.y / iResolution.y;\n    float cam_zoom = 2.0;\n    vec3 cam_pos = vec3(20.0, 20.0, 20.0) + iTime * vec3(0.0, 0.0, 20.0);\n    vec3 cam_view_dir = vec3(0.0, 0.0, 1.0);\n    vec3 cam_up = vec3(0.0, 1.0, 0.0);\n    vec3 u = cross(-cam_view_dir, cam_up);\n    vec3 v = vec3(0.0, 1.0, 0.0);\n    u *= cam_zoom;\n    v *= cam_zoom;\n    vec3 vcv = (cam_pos + cam_view_dir);\n    vec3 srcCoord = vcv + p.x * u + p.y * v;\n    vec3 rayDir = normalize(srcCoord - cam_pos);\n    \n    \n    vec4 c = vec4(0.0, 0.0, 0.0, 1.0);\n    vec3 result;\n    int steps;\n    float depth = 0.0;\n    float d = 0.0;\n    vec3 pos = vec3(0);\n    vec3 colorAcc = vec3(0);\n    \n    for (int i = 0; i < 94; i++) {\n        pos = cam_pos + rayDir * depth;\n        vec3 mapRes = map(pos);\n        d = mapRes.x;\n        // if ( d < 0.0001) break;\n        float lightFalloffFactor = 4.0 - 8.6*mapRes.z;\n        lightFalloffFactor = clamp(lightFalloffFactor, 0.8, 8.0);\n        // colorAcc += exp(-d * (1.8 + 1.8 * uSin(u_time + mapRes.y * 2.0 * PI))) *\n        // palette(mapRes.y + 0.2 * u_time, cA, cB, cC, cD);\n        vec3 cA = vec3(0.5, 0.5, 0.5);\n        vec3 cB = vec3(0.5, 0.2, 0.2);\n        vec3 cC = vec3(1.0, 1.0, 1.0);\n        vec3 cD = vec3(0.0, 0.3, 0.4);\n        colorAcc += exp(-d*lightFalloffFactor) * palette(mapRes.y + 0.2 * iTime, cA, cB, cC, cD); \n        depth += d*0.3;\n    }\n\n    for (int i = 0; i < 94; i++) {\n        pos = cam_pos + rayDir * depth;\n        float rand = 1.0 * simplex3d(pos.xyz * 0.01);\n        rand = abs(rand);\n        vec3 cA = vec3(0.1, 0.2, 0.5);\n        vec3 cB = vec3(0.2, 0.2, 0.2);\n        vec3 cC = vec3(1.0, 1.0, 1.0);\n        vec3 cD = vec3(0.0, 0.3, 0.4);\n        // colorAcc += 0.12*exp(-rand*0.1) * palette(2.0*rand + 0.2 * u_time, cA, cB, cC, cD); \n        colorAcc += 0.22*exp(-rand*0.1) * palette(2.0*rand + 0.2 * iTime, cA, cB, cC, cD) * smoothstep(0.0,1.0,rand); \n        depth += 6.0;\n    }\n    \n    \n    // Sum frequency ranges for lows, mids, and highs\n    float lows = 0.0;\n    float mids = 0.0;\n    // TODO: Do I need to normalize these for perceptual loudness?\n    // 8 * 23 = 184 hz...\n    for (int i = 0; i < 8; i++) {\n        //lows += loudness(float(i), texelFetch(iChannel0, ivec2(i,0), 0 ).x);\n        lows += texelFetch(iChannel0, ivec2(i,0), 0 ).x;\n    }\n    for (int i = 8; i < 32; i++) {\n        //mids += loudness(float(i), texelFetch(iChannel0, ivec2(i,0), 0 ).x);\n        mids += texelFetch(iChannel0, ivec2(i,0), 0 ).x;\n    }\n    lows /= 0.7;\n    mids /= 5.0;\n    colorAcc *= (8.5 + 8.0*mids)/exp((9.0 - 0.3*lows)*length(p));\n    //colorAcc *= (8.5)/exp((9.0)*length(p));\n    \n    fragColor = vec4(colorAcc * 0.08, 1.0);\n}","name":"Image","description":"","type":"image"}]}