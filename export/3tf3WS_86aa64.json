{"ver":"0.1","info":{"id":"3tf3WS","date":"1557499033","viewed":194,"name":"CIE Color Matching Functions","username":"tpfto","description":"Demonstrating [url=http://jcgt.org/published/0002/02/01/]approximations[/url] to the [url=https://en.wikipedia.org/wiki/CIE_1931_color_space#Color_matching_functions]CIE color matching functions[/url].","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["color","xyz","cie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 J. M.\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// demonstrating a modified approximation of the CIE XYZ color matching functions (CMFs) \n// fork of https://www.shadertoy.com/view/4ttBRB by TinyTexel\n\n#define PI 3.14159265359\n\nfloat GammaEncode(float x) {return pow(x, 1.0 / 2.2);}\nvec2 GammaEncode(vec2 x) {return pow(x, vec2(1.0 / 2.2));}\nvec3 GammaEncode(vec3 x) {return pow(x, vec3(1.0 / 2.2));}\nvec4 GammaEncode(vec4 x) {return pow(x, vec4(1.0 / 2.2));}\n\nfloat Graph(float f, float b)\n{\n    return smoothstep(0.0, 1.0, 1.5 - abs(f)/length(vec2(dFdx(f), dFdy(f))) + b); \n}\n\nfloat Line(float u, float b) { return Graph(u, b); }\nfloat Lines(float u, float b) { return Graph(sin(u * PI), b); }\n\nfloat Grid(vec2 uv, float b)\n{\n    return max(Lines(uv.x, b), Lines(uv.y, b));\n}\n\nfloat Cross(vec2 uv, float b)\n{\n    return max(Line(uv.x, b), Line(uv.y, b));\n}\n\n// XYZ to sRGB conversion\n\nvec3 XYZ_to_sRGB(vec3 xyz)\n{   \n    // conversion matrix from http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n    vec3 ct = xyz * mat3( 3.2404542,   -1.5371385, -0.49853141,\n                         -0.96926603,   1.8760108,  0.041556017,\n                          0.055643431, -0.20402591, 1.0572252);\n    \n    vec3 c = abs(ct);\n\n    // sRGB companding function from http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_RGB.html\n    c = mix(12.92 * c, 1.055 * pow(c, vec3(1.0/2.4)) - 0.055, step(vec3(0.0031308), c));\n    \n    return clamp(sign(ct) * c, 0.0, 1.0);\n}\n\n// original approximation from \"Simple Analytic Approximations to the CIE XYZ Color Matching Functions\"\n// http://jcgt.org/published/0002/02/01/\n\nvec3 XYZ2(float l)\n{\n    vec3 xyz;\n\n    {\n        float dParam1 = (l - 442.0) * ((l < 442.0) ? 0.0624 : 0.0374);\n        float dParam2 = (l - 599.8) * ((l < 599.8) ? 0.0264 : 0.0323);\n        float dParam3 = (l - 501.1) * ((l < 501.1) ? 0.0490 : 0.0382);\n        xyz.x = 0.362 * exp(-0.5 * dParam1 * dParam1) + 1.056 * exp(-0.5 * dParam2 * dParam2) - 0.065 * exp(-0.5 * dParam3 * dParam3);\n    }\n\n    {\n        float dParam1 = (l - 568.8) * ((l < 568.8) ? 0.0213 : 0.0247);\n        float dParam2 = (l - 530.9) * ((l < 530.9) ? 0.0613 : 0.0322);\n        xyz.y = 0.821 * exp(-0.5 * dParam1 * dParam1) + 0.286 * exp(-0.5 * dParam2 * dParam2);\n    }\n\n    {\n        float dParam1 = (l - 437.0) * ((l < 437.0) ? 0.0845 : 0.0278);\n        float dParam2 = (l - 459.0) * ((l < 459.0) ? 0.0385 : 0.0725);\n        xyz.z = 1.217 * exp(-0.5 * dParam1 * dParam1) + 0.681 * exp(-0.5 * dParam2 * dParam2);\n    }\n\n    return xyz;\n}\n\n// approximation derived with Mathematica; cf. https://mathematica.stackexchange.com/a/86962\n\n#define GAUSS(x) exp(-0.5 * (x) * (x))\n\nvec3 XYZ3(float l)\n{\n    vec3 xyz;\n    vec3 lx = vec3(440.76797, 599.44051, 493.87482);\n    vec2 ly = vec2(568.78966, 530.87379), lz = vec2(436.96247, 459.03433);\n    \n    xyz.x = dot(vec3(0.36263412, 1.05593554, -0.2122116),\n                GAUSS((l - lx) * (vec3(0.066588512, 0.027633445, 0.048888466) + vec3(-0.046583044, 0.004435177, -0.009793024) * step(lx, vec3(l)))));\n    \n    xyz.y = dot(vec2(0.82087906, 0.28579841),\n                GAUSS((l - ly) * (vec2(0.021328878, 0.061294726) + vec2(0.003364633, -0.02911659) * step(ly, vec2(l)))));\n    \n    xyz.z = dot(vec2(1.21649968, 0.68126275),\n                GAUSS((l - lz) * (vec2(0.084453906, 0.038519512) + vec2(-0.056665845, 0.033983249) * step(lz, vec2(l)))));\n\n    return xyz;\n}\n\nvoid mainImage( out vec4 outCol, in vec2 uv0 )\n{\n\tvec2 tex = 0.2875 * (8.0 * uv0 - iResolution.xy)/iResolution.x;\n    \n    vec3 col = vec3(0.16, 0.14, 0.13);\n\n    // wavelength\n    float lam = mix(385.0, 720.0, 0.6 * tex.x);\n    \n    float h = uv0.y / iResolution.y;\n    \n    if (h > 0.5) // CIE CMF plots\n    {\n\t    col = mix(vec3(0.992, 0.965, 0.89), vec3(0.396, 0.482, 0.514), Grid(tex.xy * 4.0, 0.0));            \n\t    col = mix(col, vec3(0.142), Cross(tex.xy * 1.0 - vec2(0.0, 0.55), 0.)); \t\n    \n        {\n    \tfloat sat = 0.3;   \n    \tcol = mix(col, vec3(1.0, 0.0, 0.0), Graph(0.3 * XYZ2(lam).x - tex.y + 0.55, 3.0) * sat);                  \n    \tcol = mix(col, vec3(0.0, 1.0, 0.0), Graph(0.3 * XYZ2(lam).y - tex.y + 0.55, 3.0) * sat);                  \n    \tcol = mix(col, vec3(0.0, 0.0, 1.0), Graph(0.3 * XYZ2(lam).z - tex.y + 0.55, 3.0) * sat);                  \n        }                \n\n        {\n    \tfloat sat = 0.9;   \n    \tcol = mix(col, vec3(1.0, 0.0, 0.0), Graph(0.3 * XYZ3(lam).x - tex.y + 0.55, 0.1) * sat);                  \n    \tcol = mix(col, vec3(0.0, 1.0, 0.0), Graph(0.3 * XYZ3(lam).y - tex.y + 0.55, 0.1) * sat);                  \n    \tcol = mix(col, vec3(0.0, 0.0, 1.0), Graph(0.3 * XYZ3(lam).z - tex.y + 0.55, 0.1) * sat);                  \n        }\n        \n        col = GammaEncode(clamp(col, 0.0, 1.0));\n        \n    } else { // visible spectrum demo\n        \n        if (0.3 < h && h < 0.4) col = XYZ_to_sRGB(XYZ3(lam));\n        if (0.1 < h && h < 0.2) col = XYZ_to_sRGB(XYZ2(lam));\n    }\n    \n    outCol = vec4(col, 1.0);    \n\n}","name":"Image","description":"","type":"image"}]}