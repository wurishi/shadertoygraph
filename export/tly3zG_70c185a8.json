{"ver":"0.1","info":{"id":"tly3zG","date":"1592396474","viewed":150,"name":"pixel line","username":"dtsmio","description":"moving pixel line","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["pixels"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n\n    float time = iTime / 2.;\n    //time = 0.8 + sin(iTime * 1.) * 0.2;\n\n    vec3 col = vec3(0);\n    \n    vec2 st = uv * 6. + vec2(2., 0.);\n    vec2 dt = uv * 8. + vec2(2., 0.);\n\t\n    vec3 c1 = vec3(0.2, 0.8, 0.8);\n    vec3 c2 = vec3(0.8, 0.6, 0.2);\n    vec3 c3 = vec3(0.8, 0.2, 0.8);\n    vec3 c4 = vec3(0.4, 0.7, 0.4);\n    \n    float rws = 12.;\n    float maxlen = 6.;\n    float sbp = 2.;\n    \n    float tx = time * 0.4 + 5.;\n    float prog = smoothstep(0.5, 1., sin(time * 2.) * 0.5 + 0.5);\n    float tprog = max(0., fract(tx * 0.5)- 0.5);\n    float stp = step(0.1, tprog);\n    \n    float f1 = floor(tx * maxlen * rws / sbp) / maxlen / rws * sbp;\n    float f3 = (max(0., fract(tx * 0.5) - 0.5) * 2. + floor(tx * 0.5)) * 2.;\n    prog = max(f1 - f3, step(0., fract(tx * 0.5)- 0.5) * (tx - f3));\n\n    float len = prog * maxlen;\n    \n    float border = len - 1.;\n    float pnum = rws * rws * maxlen;\n    float size = 1./ rws;\n    float spray = smoothstep(0., 0.1, tprog);\n    \n    for (float i = 0.; i < pnum; i++) {// < pnum\n\t        \n    \tvec2 pos = vec2(floor(i / rws)/rws, fract(i/rws));\n        \n        if (pos.x > len) { \n        \tcontinue;\n        }\n        float ab = step(border, pos.x); // after border space\n\n        // set movement discret\n        pos.x -= fract(pos.x * rws)/rws;\n        \n        vec2 npos = pos;\n        // add random movement after border when spray\n        npos.y += ab * (pos.x - border) * 1.2 * (pos.y - 0.5) * sin(i * 3.123) * spray;\n        npos.x += ab * (pos.x - border) * 0.4 * sin(i * 12.1) * spray;\n\t\n        float csize = size;\n        float p = step(npos.x, st.x) * step(npos.y, st.y);\n        p *= max(0., 1. - step(npos.x + csize, st.x) - step(npos.y + csize, st.y));\n        \n        vec3 c; // choose color\n        float rc = fract(sin(floor(i/2.) - mod(floor(i / rws), 2.) * rws / 2.) * 0.5 + 0.5);\n        if (0. <= rc && rc < 0.25) {\n            c = c1;\n        }\n        if (0.25 <= rc && rc < 0.5) {\n            c = c2;\n        }\n        if (0.5 <= rc && rc < 0.75) {\n            c = c3;\n        }\n        if (0.75 <= rc && rc < 1.) {\n            c = c4;\n        }\n\t\t\n        // add opacity\n        c *= smoothstep(len, len - 1./rws, pos.x);\n        \n        col += p * c;\n        \n        if (p > 0.) {\n        \tbreak;\n        }\n    }\n    \n    float block = step(0., st.x) * step(0., uv.y);\n    block *= max(0., 1. - step(maxlen, st.x) - step(1., st.y));\n    \n    col += block/6. ;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}