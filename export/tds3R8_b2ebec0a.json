{"ver":"0.1","info":{"id":"tds3R8","date":"1545000254","viewed":655,"name":"2D Texture To 3D Texture +","username":"chrisjj","description":" rizvanner's https://www.shadertoy.com/view/MlffW7 with rotation on mouse drag.\n\nIf anyone can tell me why the line 76 swizzling is causing a fail, please do! See more direct test at line 121.","likes":6,"published":1,"flags":0,"usePreview":1,"tags":["3d","volume","3dtexture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 200\n#define R 0.6\n\nfloat max_distance = 15.0;\nfloat epsilon = 0.0001;\nfloat bump_factor = 0.1;\n\nfloat getDistance(vec3 point)\n{\t\n\tfloat bump = 0.0;\n    \n\tif( length(point) < R + bump_factor) \n\t{\n\t\tbump = bump_factor * texture(iChannel0, point.xy * vec2(1.0,-1.0) + vec2(0.5, 0.5)).r;\n\t}\n    \n\treturn length(point) - R - bump;\n}\n\nfloat raycast(vec3 start_pos, vec3 ray_dir)\n{\n\tfloat d = 0.0;\n\t\n\tfor (int i = 0; i < MAX_STEPS; i++)\n\t{\n\t\tvec3 ray_pos = start_pos + ray_dir * d;\n        \n\t\tfloat s = getDistance(ray_pos);\n\t\t\n\t\t if (s < epsilon) return d;\t\n\t\t\n\t\td += s;\n\t\t\n\t\tif (d > max_distance) break;\n\t\t\n\t}\n\t\n\treturn max_distance;\n}\n\nvec3 getNormal(vec3 point)\n{\n\tfloat d0 = getDistance(point);\n    \n\tfloat dX = getDistance(point - vec3(epsilon, 0.0, 0.0));\n\tfloat dY = getDistance(point - vec3(0.0, epsilon, 0.0));\n\tfloat dZ = getDistance(point - vec3(0.0, 0.0, epsilon));\n\t\n\tvec3 r = vec3(dX-d0, dY-d0, dZ-d0);\n    \n\treturn normalize(r);\n}\n\nmat2 rot(float a) {\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.0*fragCoord.xy / iResolution.xy - 1.0;\n\t\t\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    \n    uv = uv * aspect;\n\n\tfloat dist = 1.1;\n\n\tvec3 eye_pos = vec3(0.0, 0.0, dist);\n\tvec3 ray_dir = normalize(vec3(uv.x, uv.y, -1.0));\n\n     // Turn object\n\tvec4 mouse = -(iMouse.xyzw/iResolution.xyxy-.5)*3.;\n    \n\tif(false)\n\t{\t// Fails thus: https://i.imgur.com/lbmpqO3.png \n  \t\teye_pos.xz *= rot(mouse.x);\n  \t\tray_dir.xz *= rot(mouse.x);\n\t\teye_pos.yz *= rot(mouse.y);\n  \t\tray_dir.yz *= rot(mouse.y);\n    }\n    else\n    {\t// Workaround\n        vec2 r;\n        r = eye_pos.xz ; r *= rot(mouse.x); eye_pos.xz = r;\n        r = ray_dir.xz ; r *= rot(mouse.x); ray_dir.xz = r;\n        r = eye_pos.yz ; r *= rot(mouse.y); eye_pos.yz = r;\n        r = ray_dir.yz ; r *= rot(mouse.y); ray_dir.yz = r;\n    }\n    \n\tfloat d = raycast(eye_pos, ray_dir);\n    \n\tvec3 point = eye_pos + ray_dir * d;\n    \n\tif (d < max_distance)\n\t{\n\t\tvec3 normal = getNormal(point);\n\n\t\tvec3 light = vec3(0.6);\n\t\t\t\t\n\t\tvec3 diff_color = vec3(0.4);\n        \n\t\tfloat diffuse = max(0.0, dot(-light, normal));\n        \n\t\tvec3 eye_vec = ray_dir;\n        \n\t\tvec3 halfa = normalize(eye_vec - light);\n        \n\t\tfloat sdot = dot(halfa, normal);\n        \n\t\tfloat specular = pow(sdot, 50.0);\n        \n\t\tvec3 color = (diffuse*diff_color + vec3(specular));\n\t\n\t\tfragColor = vec4(color, 1.0);\n\t}\n\telse\n\t{\n\t\tfragColor = vec4(vec3(0.5),1.0);\n\t}\n    \n    if(false) // Test operation on vector obtained by swizzle\n    {\n        fragColor *= 0.;\n        if(true)\n        \tuv.xy *= mat2(1,0,0,1); // FAILS On Chrome https://i.imgur.com/jW92u1B.png , Succeeds on Firefox https://i.imgur.com/QmraZDj.png\n        else\n        \tuv *= mat2(1,0,0,1); // Succeeds https://i.imgur.com/ncx1Q3c.png\n        fragColor.g = uv.x>0.?1.:0.; \n    }\n}\n","name":"Image","description":"","type":"image"}]}