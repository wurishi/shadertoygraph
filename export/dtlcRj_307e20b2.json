{"ver":"0.1","info":{"id":"dtlcRj","date":"1691057415","viewed":87,"name":"kishimishu's Introduction","username":"zer0cell","description":"https://youtu.be/f4s1h2YETNY","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","shader","youtube","introduction","kishimishu","aivoice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 PaletteA[4] = vec3[4](\n    vec3(0.538, 0.738, 0.918),\n    vec3(0.544, 0.097, 0.358),\n    vec3(1.541, 1.110, 1.574),\n    vec3(-1.783, -2.498, -2.165));\n    \nconst vec3 PaletteB[4] = vec3[4](\n    vec3(0.590, 0.811, 0.120),\n    vec3(0.410, 0.392, 0.590),\n    vec3(0.940, 0.548, 0.278),\n    vec3(-4.242, -6.611, -4.045)\n);\n\n//\n// http://www.flong.com/archive/texts/code/shapers_exp/\n//\nfloat doubleExponentialSigmoid(float x, float a) {\n  float epsilon = 0.00001;\n  float min_param_a = 0.0 + epsilon;\n  float max_param_a = 1.0 - epsilon;\n  \n  float y = 0.0;\n  \n  a = min(max_param_a, max(min_param_a, a));\n  a = 1.0 - a;\n  \n  x = min(1.0, max(0.0, x));\n  if (x <= 0.5) {\n    y = pow(2.0 * x, 1.0 / a) / 2.0;\n  } else {\n    y = 1.0 - pow(2.0 * (1.0 - x), 1.0 / a) / 2.0;\n  }\n  \n  return y;\n}\n\n//\n// https://iquilezles.org/articles/palettes/\n// http://dev.thi.ng/gradients/\n//\n// cosine based palette, 4 vec3 params\n//\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // CONFIG\n    float uvTileMulti = doubleExponentialSigmoid((sin(iTime) + 1.0) * 0.5, 0.3) + 0.5;\n    float iterCount = 3.0;\n    float iterLacunarity = 0.1;\n\n\n    // Initialize normalized UV\n    vec2 uv = fragCoord / iResolution.xy;\n    // Center UV\n    uv -= 0.5;\n    uv *= 2.0;\n    // Constraint UV aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n    // Preserve UV\n    vec2 uv0 = uv;\n    \n    // Initialize base color\n    vec3 finalColor = vec3(0.0);\n\n    for (float iter = 0.0; iter < iterCount; iter++) {\n\n        // Duplicate (tile) UVs\n        uv = fract(uv * uvTileMulti) - 0.5;\n\n        float d = length(uv) * exp(-length(uv0));\n        vec3 color = palette(length(uv0) + iter * iterLacunarity + iTime * iterLacunarity, PaletteA[0], PaletteA[1], PaletteA[2], PaletteA[3]);\n\n        d = sin(d * 8.0 + iTime) / 8.0;\n        d = abs(d);\n        d = pow(0.007 / d, 1.2);\n\n        finalColor += color *= d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}