{"ver":"0.1","info":{"id":"Wlccz8","date":"1608430048","viewed":114,"name":"Biohazard Snowflakes","username":"mherreshoff","description":"Biohazard snowflake, so called because the spiny part of the fractal resembles a biohazard symbol.  Switches between stationary and continuously rotating versions.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","morphing","snowflakes","biohazard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define CS(a) vec2(cos(a), sin(a))\n#define rot(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define hue(v) ( .6 + .6 * cos( 2.*PI*(v) + vec4(0,-2.*PI/3.,2.*PI/3.,0)))\nvec2 cmul(vec2 a, vec2 b) {\n    return mat2(a,-a.y,a.x)*b;\n}\nvec2 cpow(vec2 z, float n) {\n    float mag = pow(length(z),n), angle = atan(z.y, z.x)*n;\n    return mag*CS(angle);\n}\nfloat smoothHill(float a, float b, float c, float x) {\n    return smoothstep(a,b,x)-smoothstep(b,c,x);\n}\nfloat smoothParity(float x, float b) {\n    float m = mod(x-.5, 2.);\n    return smoothstep(.5-b, .5+b, m) - smoothstep(1.5-b, 1.5+b, m);\n}\n\n\nvec2 target (vec2 z, float twist) {\n    vec2 weightedSum=vec2(0); float weight=0.;\n#define N 3.\n    for (float i = 0.; i < N; i++) {\n        float theta = 6.28*(i/N);\n        vec2 point = CS(theta), d = z-point, d2 = cmul(CS(-theta+twist), cpow(d, 2.));\n        float L = length(d), w = pow(L, -10.);\n        weight += w;\n        weightedSum += w*2.5*mix(d2, d, (L > 1. ? 1. : pow(L, 15.)));\n    }\n    return weightedSum/weight;\n}\n\nvec4 render(in vec2 fragCoord){\n    vec2 R = iResolution.xy, pw = 1./R, uv = fragCoord*pw;\n    \n    float cycleT=30., t = fract(iTime/cycleT),\n          parity = smoothParity(iTime/cycleT, .05),\n          twistA = 2.*PI*(fract(2.*t+.5)-.5),\n          twist = mix(0., twistA, parity),\n          maxIt = 5., iterations = maxIt*(smoothHill(0.,.75,1.,t)),\n          zoom = 4.;\n\n    vec2 p = rot(radians(-90.))*((fragCoord-.5*R)/R.y)*zoom;\n    for (float i = 0.; i < 10.; i++){\n        if (i < floor(iterations)) p = target(p, twist);\n    }\n    p = mix(p, target(p, twist), fract(iterations));\n    \n    float mag = length(p);\n    vec4 col = mix(vec4(.1), vec4(.8), min(1., mag));\n    col = mix(col, hue(.3), smoothHill(1., 1.5, 2., mag));\n    col = col*min(1., pow(length(p), -2.));\n\treturn col;\n    //return hue(atan(p.y, p.x)/6.28);\n}\nvoid mainImage( out vec4 O, in vec2 u ) {\n    // 2D Antialiasing:\n    vec2 d = vec2(.5,0);\n    O = (render(u+d.xy)+render(u-d.xy)+render(u+d.yx)+render(u-d.yx))*.25;\n}","name":"Image","description":"","type":"image"}]}