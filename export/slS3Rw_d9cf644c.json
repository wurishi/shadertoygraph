{"ver":"0.1","info":{"id":"slS3Rw","date":"1623535074","viewed":857,"name":"Exact Ellipse SDF (Robust)","username":"weasel","description":"The best/most robust ellipse sdf I could come up with. It should (hopefully) have full floating point precision (32-bit) in every case.\n\nThis code is also easily extendible to work for ellipsoids in 3d.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","distance","ellipse"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2021 Henrik Dick\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// References\n//\n// => https://www.shadertoy.com/view/tt3yz7\n// quagnz ellipse function, with artifacts in line case.\n//\n// => https://www.shadertoy.com/view/4sS3zz\n// Iq's ellipse function.\n//\n// => https://www.shadertoy.com/view/4lsXDN\n// Iq's (slow) ellipse function II.\n//\n// => https://stackoverflow.com/questions/22959698/distance-from-given-point-to-given-ellipse\n// StackOverflow question that has had a community of people tackling this problem.\n//\n// => https://www.shadertoy.com/view/wtfyWj\n// An implementation based on wet-robots.ghost.io's blog post (in StackOverflow answer.)\n\n\n// Basic approach from\n// => https://www.geometrictools.com/Documentation/DistancePointEllipseEllipsoid.pdf\n// but improved using better first guess and newton bisection hybrid method\n// This method gives always stable results, in all cases I have observed so far,\n// even on the coordinate axes (special case)\n//\n// I am sorry that I am not using the vectorized functions here, this code is ported\n// from my private java lib\n//  - might improve when I get time to do it\n\nfloat msign(in float x) { return (x<0.0)?-1.0:1.0; }\n\nfloat sdEllipse(vec2 p, vec2 e, out int iterations) {\n    float x = p.x;\n    float y = p.y;\n    float ax = abs(p.x);\n    float ay = abs(p.y);\n    float a = e.x;\n    float b = e.y;\n    float aa = e.x*e.x;\n    float bb = e.y*e.y;\n    \n    vec2 closest = vec2(0.0);\n    iterations = 0;\n    \n    // edge special case, handle as AABB\n    if (a * b <= 1e-15) {\n        closest = clamp(p, -e, e);\n        return length(closest-p);\n    }\n\n    // this epsilon will guarantee float precision result\n    // (error<1e-6) for degenerate cases\n    float epsilon = 1e-3;\n    float diff = bb - aa;\n    if (a < b) {\n        if (ax <= epsilon * a) {\n            if (ay * b < diff) {\n                float yc = bb * y / diff;\n                float xc = a * sqrt(1.0 - yc * yc / bb);\n                closest = vec2(xc, yc);\n                return -length(closest-p);\n            }\n            closest = vec2(x, b * msign(y));\n            return ay - b;\n        }\n        else if (ay <= epsilon * b) {\n            closest = vec2(a * msign(x), y);\n            return ax - a;\n        }\n    }\n    else {\n        if (ay <= epsilon * b) {\n            if (ax * a < -diff) {\n                float xc = aa * x / -diff;\n                float yc = b * sqrt(1.0 - xc * xc / aa);\n                closest = vec2(xc, yc);\n                return -length(closest-p);\n            }\n            closest = vec2(a * msign(x), y);\n            return ax - a;\n        }\n        else if (ax <= epsilon * a) {\n            closest = vec2(x, b * msign(y));\n            return ay - b;\n        }\n    }\n\n    float rx = x / a;\n    float ry = y / b;\n    float inside = rx*rx + ry*ry - 1.0;\n\n    // get lower/upper bound for parameter t\n    float s2 = sqrt(2.0);\n    float tmin = max(a * ax - aa, b * ay - bb);\n    float tmax = max(s2 * a * ax - aa, s2 * b * ay - bb);\n\n    float xx = x * x * aa;\n    float yy = y * y * bb;\n    float rxx = rx * rx;\n    float ryy = ry * ry;\n    float t;\n    if (inside < 0.0) {\n        tmax = min(tmax, 0.0);\n        if (ryy < 1.0)\n            tmin = max(tmin, sqrt(xx / (1.0 - ryy)) - aa);\n        if (rxx < 1.0)\n            tmin = max(tmin, sqrt(yy / (1.0 - rxx)) - bb);\n        t = tmin * 0.95;\n    }\n    else {\n        tmin = max(tmin, 0.0);\n        if (ryy < 1.0)\n            tmax = min(tmax, sqrt(xx / (1.0 - ryy)) - aa);\n        if (rxx < 1.0)\n            tmax = min(tmax, sqrt(yy / (1.0 - rxx)) - bb);\n        t = tmin;//2.0 * tmin * tmax / (tmin + tmax);\n    }\n    t = clamp(t, tmin, tmax);\n\n    int newton_steps = 12;\n    if (tmin >= tmax) {\n        t = tmin;\n        newton_steps = 0;\n    }\n\n    // iterate, most of the time 3 iterations are sufficient.\n    // bisect/newton hybrid\n    int i;\n    for (i = 0; i < newton_steps; i++) {\n        float at = aa + t;\n        float bt = bb + t;\n        float abt = at * bt;\n        float xxbt = xx * bt;\n        float yyat = yy * at;\n\n        float f0 = xxbt * bt + yyat * at - abt * abt;\n        float f1 = 2.0 * (xxbt + yyat - abt * (bt + at));\n        // bisect\n        if (f0 < 0.0)\n            tmax = t;\n        else if (f0 > 0.0)\n            tmin = t;\n        // newton iteration\n        float newton = f0 / abs(f1);\n        newton = clamp(newton, tmin-t, tmax-t);\n        newton = min(newton, a*b*2.0);\n        t += newton;\n\n        float absnewton = abs(newton);\n        if (absnewton < 1e-6 * (abs(t) + 0.1) || tmin >= tmax)\n            break;\n    }\n    iterations = i;\n\n    closest = vec2(x * a / (aa + t), y * b / (bb + t));\n    // this normalization is a tradeoff in precision types\n    closest = normalize(closest);\n    closest *= e;\n    return length(closest-p) * msign(inside);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\t\n    vec2 m = iMouse.xy/iResolution.xy;\n\tm.x *= iResolution.x/iResolution.y;\n    \n    if (iMouse.xy == vec2(0.0, 0.0)) {\n        m = vec2(0.9, 0.6);\n    }\n\t\n    int i = 0;\n    vec2 ab = m;\n    //vec2 ab = vec2(1.4, 0.04);\n    float d = sdEllipse( uv*1.0-vec2(0.,0.), ab, i );\n    // show iterations\n    //vec3 col = mix(vec3(1,0,0),vec3(0,0,1),float(i)/10.0);\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(120.0*d);\n\tcol = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)));\n\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}