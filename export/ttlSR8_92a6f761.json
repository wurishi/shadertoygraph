{"ver":"0.1","info":{"id":"ttlSR8","date":"1562099142","viewed":138,"name":"VoxelSphere","username":"ankd","description":"this is not good at get normal vector.\nmaybe normal vector become vec3(0.) by floor coordinate in map().","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","voxel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = acos(-1.0);\nconst float PI2 = PI*2.0;\n\nmat2 rotate(in float r) { \n    float c=cos(r), s=sin(r); \n    return mat2(c, -s, s, c);\n}\n\nfloat sphere(in vec3 p, in float r) {\n\treturn length(p) - r;\n}\nfloat box(in vec3 p, in vec3 b) {\n\tvec3 d = abs(p) - b;\n    return length(max(d, 0.)) + min(max(d.x, max(d.y, d.z)), 0.);\n}\n\nfloat map(in vec3 p) {\n    vec3 q = p;\n    float n = 16.;\n    q = floor(q*n)/n;\n    float d = 1e8;\n\tfor(int i=0;i<8;i++) {\n\t    float fi = float(i)+1.0;\n\t\td = min(d, sphere(q-sin(PI*2.0*fi/8. + 0.3*fi*iTime*vec3(.5, .7, .9)), 0.5-0.05*fi));\n\t}\n\treturn d;\n}\n\nvec3 calcNormal(in vec3 p) {\n#if 0\n\tvec2 e = vec2(1., -1.) * 1e-3;\n    return normalize(\n    \te.xyy * map(p+e.xyy) +\n    \te.yxy * map(p+e.yxy) +\n    \te.yyx * map(p+e.yyx) +\n    \te.xxx * map(p+e.xxx)\n    );\n#else\n\tvec2 e = vec2(1., 0.) * 1e-3;\n    return normalize(vec3(\n    \tmap(p+e.xyy) - map(p-e.xyy),\n    \tmap(p+e.yxy) - map(p-e.yxy),\n    \tmap(p+e.yyx) - map(p-e.yyx)\n    ));\n#endif\n}\n\nfloat diffuse(in vec3 n, in vec3 l, in float s) {\n\treturn pow(clamp(dot(l, n), 0.01, 1.), s);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord*2.0-iResolution.xy) / min(iResolution.x, iResolution.y);\n\n    vec3 ro = vec3(0., 0., 1.5);\n    vec3 rd = normalize(vec3(p, -1.));\n    \n    float d = 0.;\n    for(int i=0;i<100;i++) {\n    \tvec3 pos = ro + rd*d;\n        float tmp = map(pos);\n\t\tif(tmp<1e-5) break;\n        d += tmp * 0.5;\n    }\n    \n    vec3 pos = ro + rd*d;\n    vec3 nor = calcNormal(pos);\n    \n    vec3 col = vec3(exp(-1.0 * d));\n    \n    vec3 ld = normalize(vec3(1.0));\n    \n    col *= diffuse(nor, ld, 2.);\n    \n    col = pow(col, vec3(0.4545));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}