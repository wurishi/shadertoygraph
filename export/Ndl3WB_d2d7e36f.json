{"ver":"0.1","info":{"id":"Ndl3WB","date":"1616520409","viewed":56,"name":"some heavy aliasing","username":"capslpop","description":"Just a lot of aliasing :)","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["aliasing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //float time = clamp(iTime, iTime * 0.001 + 2.0, 9999999999.0);\n    float time = iTime * 0.01 + 3.0;\n    \n    //vec2 uv = -abs(  (  fragCoord + (iMouse.xy - iResolution.xy/2.0)*0.1   )/iResolution.xy * (1.0/(pow(time,time))));  //   - (10.0 / (iTime / 2.0)) ); //   * (iMouse.y - iResolution.y/2.0)/20.0;\n                                                                             //1.0/\n    vec2 uv = -abs(  (  fragCoord - (iResolution.xy/2.0))/iResolution.yx * (   1000.0   /(pow(time,time))));\n    \n    \n    //vec2 HH = vec2(pow(0.5, uv.x), pow(0.5, uv.y));\n    \n    float ts = (sin(time) * 100.0);\n    float tc = (cos(time) * 100.0);\n    \n    //vec2 HH = vec2(1.0/(cos(uv.x) * sin(uv.x) - uv.y) * tc, 1.0/(uv.y * cos(uv.y) - uv.x) * ts);\n    \n    // change uv.x and uv.y to what ever function you want:\n    vec2 HH = vec2(sin(uv.x) * tc - uv.y, ts/uv.y) + uv.x;\n    \n    //vec2 HA = vec2(-sin(tan(uv.x * t)), cos(uv.y));\n    \n    // sample texture and output to screen\n    fragColor = texture(iChannel0, HH);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    if(uv.x > 0.5)\n    {\n    if (uv.y - uv.x > 0.0)\n    {\n        col = vec3(1.0, 1.0, 1.0);\n    \n    }\n    \n    if (uv.y + uv.x < 1.0)\n    {\n        col = vec3(1.0, 1.0, 1.0);\n    }\n    }\n    else\n    {\n    if (uv.y - uv.x < 0.0)\n    {\n        col = vec3(1.0, 1.0, 1.0);\n    \n    }\n    \n    if (uv.y + uv.x > 1.0)\n    {\n        col = vec3(1.0, 1.0, 1.0);\n    }\n    \n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}