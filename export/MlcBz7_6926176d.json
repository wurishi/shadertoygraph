{"ver":"0.1","info":{"id":"MlcBz7","date":"1539029935","viewed":109,"name":"sphere tracing 1","username":"stuxxnet42","description":"sphere tracing 1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simplespheretracingexample"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//threshold for hit testing\nconst float epsilon = 1.;\n\n// Distance field of a sphere at c with radius r, sampled at p.\nfloat sphere(vec3 c, float r, vec3 p) {\n\treturn length(p - c) - r;\n}\n// The Scene\nfloat distanceField(vec3 pos) {\n\tfloat s1 = sphere(vec3(1.0,1.0,0.0), 100., pos);\n\treturn s1;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat near = -iResolution.x * 1.2 / 2.;\n\tfloat far  =  iResolution.x * 1.2 / 2.;\n\t\n\tvec3 cameraPosition = vec3(0, 0, -1);\n\t\n\tvec3 pos = vec3(fragCoord.xy - iResolution.xy / 2., near);\n\t\n\tvec3 npos = pos / iResolution.x;\n\t\n\tvec3 dir = normalize(npos - cameraPosition);\n\tvec3 toEye = -dir;\n\tfragColor = vec4(0.0, 0.0, 0.0, 1);\n    int stepsTaken = 0;\n    for (int steps = 0; steps < 50; ++steps) {\n\t\tstepsTaken = steps;\n\t\tfloat d = distanceField(pos);\n\n\t\tif (d < epsilon) {\n\t\t\tfragColor = vec4(1.0, 1.0, 0.0, 1);\n\t\t\treturn;\n\t\t} else {\n\t\t\tpos += d * dir;\n\t\t}\n\t}\n}","name":"Image","description":"","type":"image"}]}