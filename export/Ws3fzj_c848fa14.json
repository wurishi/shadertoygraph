{"ver":"0.1","info":{"id":"Ws3fzj","date":"1605798226","viewed":209,"name":"gumbel DW","username":"thu","description":"yee yee yee yee yee yee yee yee yee yee ","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nfloat snoise(vec3 p) {\n    const float F3 =  0.3333333;\n    const float G3 =  0.1666667;\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}\n\nvec3 normalNoise(vec2 _st, float _zoom, float _speed){\n\tvec2 v1 = _st;\n\tvec2 v2 = _st;\n\tvec2 v3 = _st;\n\tfloat expon = pow(10.0, _zoom*2.0);\n\tv1 /= 1.0*expon;\n\tv2 /= 0.62*expon;\n\tv3 /= 0.83*expon;\n\tfloat n = iTime * _speed;\n\tfloat nr = (snoise(vec3(v1, n)) + snoise(vec3(v2, n)) + snoise(vec3(v3, n))) / 6.0 + 0.5;\n\tn = iTime * _speed + 1000.0;\n\tfloat ng = (snoise(vec3(v1, n)) + snoise(vec3(v2, n)) + snoise(vec3(v3, n))) / 6.0 + .5;\n\treturn vec3(nr,ng,0.5);\n}\n\nvec3 gumbelNoise(vec3 vec) {\n    return -log(-log(vec));\n}\n\n#define NUM_OCTAVES 6\nvec3 fbm(vec2 _st, float zoom, vec2 shift, float shiftSpeed, float rad) {\n    vec3 v = vec3(0.0);\n    float a = 0.5;\n    mat2 rot = mat2(cos(rad), sin(rad), -sin(rad), cos(rad));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * gumbelNoise(normalNoise(_st * 5. , zoom, shiftSpeed));\n        _st = rot * _st * 2.0 + shift;\n        a *= .5;\n    }\n    return v;\n}\n\nvec3 pattern(vec2 _st) {\n    vec3 fbm0 = fbm(_st, .25, vec2(100.), 0.01, 10.);\n\n    vec3 fbm1 = fbm(\n        _st + fbm0.xy,\n        fbm0.z * 1.88,\n        vec2(fbm0.xy * .5),\n        fbm0.z * 0.01657,\n        fbm0.x * 0.00005\n    );\n\n    vec3 fbm2 = fbm(\n            _st + fbm1.xy,\n            fbm1.z * .87,\n            vec2(fbm1.xy * 3.5),\n            fbm1.z * 0.1659,\n            fbm1.x * 0.05\n        );\n\n    vec3 fbm3 = fbm(\n            _st + fbm2.xy,\n            fbm2.z * .88,\n            vec2(fbm2.xy * 1.8),\n            fbm2.z * 0.1658,\n            fbm2.x * 0.0097\n        );\n\n    return fbm3;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = (fragCoord.xy * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    fragColor = vec4(pattern(st), 1.0);\n}","name":"Image","description":"","type":"image"}]}