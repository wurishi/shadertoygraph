{"ver":"0.1","info":{"id":"ttlXDf","date":"1564535163","viewed":108,"name":"Broken Clouds","username":"Chezzik","description":"It's not doing exactly what I wanted, but it is interesting.  The undulating colors are slight variations based on neighboring cells.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","grid","subtle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 t = uv;      \n    t.x*=iResolution.x/iResolution.y;\n    vec2 t2=fract(5.*t);\n    \n    \n    vec3 col=vec3(0.,0.,0.);\n    for (float i=-1.5; i<=0.5; i++) {\n        for (float j=-1.5; j<=0.5; j++) {\n            \n            vec2 unit = t2 + vec2(i, j);\n    \t\tvec2 t3=floor(5.* (t + vec2(i,j)));\n            \n            unit.x += 0.2*sin(iTime+t3.y) + 0.1*sin(iTime+t3.x);\n            unit.y += 0.1*sin(iTime+t3.y) + 0.2*sin(iTime+t3.x);\n\n            float d=clamp(length(unit), 0., 1.);\n    \n            vec3 a =  (1.-d) * (0.4 + 0.4*cos(iTime+uv.xxx+vec3(0,2,0)));\n            col += a;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}