{"ver":"0.1","info":{"id":"3tlSD7","date":"1563220685","viewed":410,"name":"Sin visualization","username":"DDave","description":"A sin visualizer over time.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sin","shader","itime"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//line interpolation functions\nfloat plot(vec2 st, float pct){\n\treturn smoothstep(pct-0.02, pct, st.y) - smoothstep(pct, pct+0.02, st.y); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 st = fragCoord.xy/vec2(iResolution);\n    \n    //Adding time to x value for continuos sin\n    st.x += 1.4*iTime;\n    //Smoothstepping between max sin values, 1 and 0. \n    float y = smoothstep(-1.0, 0.0, sin(st.x)) - smoothstep(0.0, 1.0, sin(st.x));\n    \n    //line drawing to the screen\n    vec3 color = vec3(y);\n    float line = plot(st, y);\n    \n    color = line * vec3(0.0, 1.0, 0.0);\n    fragColor =vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}