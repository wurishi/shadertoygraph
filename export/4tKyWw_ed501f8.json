{"ver":"0.1","info":{"id":"4tKyWw","date":"1536562694","viewed":72,"name":"Funky Spiralzzz","username":"domorin","description":"Funky Spiral","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653589\n\nfloat in_angle_range(float a, float a1, float a2) {\n    a1 = mod(a1, PI * 2.);\n    a2 = mod(a2, PI * 2.);\n       \n    float f1 = a - a1;\n    float f2 = a2 - a1;\n    if(f1 < .0) {\n        f1 += 2. * PI;\n    }\n    if(f2 < 0.) {\n        f2 += 2. * PI;\n    }\n    \n    return 1.-step(f2, f1);    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy * 2.) - 1.;\n    \n    \n    //(sqrt(2)) i.e. max length(uv) can be\n    float R = 1.41421356237;\n    \n    // sin(iTime) makes it zoom in and shit its funky as fuck\n    float r = length(uv) * sin(iTime/2.);\n    float b = 0.5 + abs(r/R) * (PI-0.5);\n    float a = atan(uv.y, uv.x) + PI * iTime * 5.;\n    \n    //r/f = a (equation of a spiral)\n    float desired_angle = mod(r/0.025, 2.*PI);\n    \n    // See if the desired angle is within the current angle (a)\n    float result = in_angle_range(desired_angle, a-b, a+b);   \n    fragColor = (vec4(0,0,1,1) * (1.-abs(r/R)) + (abs((r/R)) * vec4(0,1,0,1))) * result + vec4(.25,0,.5,1) * (1.-result);   \n    \n}","name":"Image","description":"","type":"image"}]}