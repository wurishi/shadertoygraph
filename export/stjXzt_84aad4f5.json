{"ver":"0.1","info":{"id":"stjXzt","date":"1628424247","viewed":178,"name":"ancient horology","username":"sukupaper","description":"An advanced piece of technology from an ancient civilisation with some odd glyphs..\n\nI just wanted to make my own procedural glyphs generator, and it ended up like that","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","abstract","ancient","horology","astrology"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: paperu\n// Title: ancient horology\n\n#define P 6.283185307\n\nfloat t;\nmat2 rot(in float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\nfloat c(vec2 p, float s) { return length(p) - s; }\nconst int NS = 7;\nfloat S[NS];\n\nfloat mask(vec2 p) { p = abs(p) - .5; return max(p.x,p.y); }\n\nfloat a0(vec2 p) { p = abs(p) - 0.320; return max(c(p, 0.300),-c(p + -0.296, 0.658)); }\nfloat a1(vec2 p) { return max(c(p, .35),-c(p + -0.104, 0.250)); }\nfloat a2(vec2 p) { p = -p; return max(c(p, .35),-min(c(p + -0.104, 0.250),c(p + 0.120, 0.114)));}\nfloat a3(vec2 p) { p = p.yx; float px = p.x;p.x = abs(p.x);p.y -= sign(px)*-.1; return max(c(p, 0.230),-c(p +vec2(1,0)*0.096, .25)); }\nfloat a4(vec2 p) { vec2 pp = p; float px = p.x;p.x = abs(p.x);p.y -= sign(px)*-0.1; return min(c(pp,0.068), max(c(p, 0.230),-c(p +vec2(1,0)*0.096, .25))); }\nfloat a5(vec2 p) { vec2 pp = -p*1.624 + 0.172; pp *=rot(step(.24,length(pp))*5.504 + t*P/5.);return min(max(c(pp, .35),-c(vec2(abs(pp))-0.200, 0.210))/1.624, max(c(p, .35),-c(p + -0.104, 0.250))); }\nfloat a6(vec2 p) {\n    vec2 pp = p.yx*rot(-0.096)*2. + vec2(-0.250,0.010);\n    return min(\n        max(abs(c(p -  vec2(0.,.045),0.285)) - 0.042, abs(c(p + vec2(0.,.045),0.285)) - 0.042),\n        max(abs(c(pp - vec2(0.,.045),0.285)) - 0.042, abs(c(pp + vec2(0.5,0.),0.277)) - 0.042)\n    );\n}\n\nfloat shapesGen(vec2 p) {\n    const vec2 s = vec2(0.,1.);\n    S[0] = a0(p);\n    S[1] = a1(p+s*1.);\n    S[2] = a2(p+s*2.);\n    S[3] = a3(p+s*3.);\n    S[4] = a4(p+s*4.);\n    S[5] = a5(p+s*5.);\n    S[6] = a6(p+s*6.);\n    \n    float d = S[0];\n    for(int i = 1; i < NS; i++)\n        d = min(d, S[i]);\n    \n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = (fragCoord.xy - iResolution.xy*.5)/iResolution.y;\n    float aa = 1./iResolution.x;\n    \n    t = P*.515 + iTime;\n    \n    float scale1 = 20.;\n    vec2 p1 = st*scale1;\n    p1 += t*.5;\n    p1 = vec2(mod(p1.x, 1.) - .5, mod(floor(p1.x)*2.5 + p1.y, float(NS)) - float(NS) + .5);\n    float d_bg = shapesGen(p1);\n    d_bg = abs(d_bg) - .005;\n    d_bg /= scale1;\n    \n    float scale2 = 5.;\n    float nb = 7.;\n    vec2 ptemp = st;\n    float rot_s = -P/20.;\n    ptemp *= rot(t*rot_s);\n    float a = floor((atan(ptemp.x,ptemp.y)/P + .5)*nb);\n    float a_2 = (a/nb)*P + (P/nb)/2.;\n    float kk = (cos(-t*rot_s + a*3.5)*.5+.5)*1.;\n    ptemp *= scale2;\n    vec2 p2 = ptemp + vec2(sin(a_2),cos(a_2)) *(1.785 - kk*kk*kk*kk*kk*kk*kk*5.);\n    p2 *= rot(-t*rot_s);\n    \n    float d_ft = shapesGen(p2 + vec2(0.,-a));\n    d_ft = max(d_ft,mask(p2));\n    d_ft = max(d_ft, -c(ptemp, 1.436));\n    \n    p2 *= rot(t*rot_s - a_2);\n    float lines = max(abs(p2.x) - .01, -p2.y);\n    lines = max(-lines, (abs(c(ptemp, 1.300)) - 0.044));\n    d_ft = min(d_ft, lines);\n    \n    float d_ft2 = (abs(d_ft + .02)) - 0.01;\n    d_ft = max(d_ft, -d_ft2);\n    d_ft /= scale2;\n    \n    vec2 p = st;\n    \n    float S = 1.5;\n    p *= S;\n    float s = 0.408;\n    float d_set = a1(p);\n    s = 1.6;\n    float pdlm = cos(P*t*.25)*.5;\n    p = (p - .1)*s*rot(pdlm);\n    d_set = min(d_set, a2(p)/s);\n    float t_s = 1.72;\n    d_set = min(d_set, a5((p + .1)*t_s*rot(-pdlm))/s/t_s);\n    t_s = 4.;\n    d_set = min(d_set, a6((p - .12)*t_s*rot(-pdlm))/s/t_s);\n    d_set /= S;\n    d_set = max(d_set, -(abs(d_set + .005) - 0.002));\n    \n    float d = -min(d_bg, (d_ft));\n    d = max(d, -d_set);\n    \n    vec3 c = d == -d_set ? vec3(1.)\n        : d == -d_ft ? mix(vec3(0.880,0.584,0.077),vec3(1.000,0.994,0.000),st.y+.5)\n        : vec3(0.208,0.171,0.335);\n    vec3 color = smoothstep(-aa,aa, d)*c;\n    \n    float l = length(st);\n    fragColor = vec4(color - l*l*l*.3,1.0);\n}","name":"Image","description":"","type":"image"}]}