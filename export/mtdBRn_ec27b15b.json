{"ver":"0.1","info":{"id":"mtdBRn","date":"1700893707","viewed":29,"name":"*FLASHING IMAGES* Huygen's pr.","username":"Fl0wless","description":"Huygen's principle:\nA superposition of circular waves form a symmetric plane wave front,\nAlternatively: A superposition of radially arranged half plane waves form a circular wave front.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["math","physics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.283185307179586\n\n\nfloat circwave(vec2 p, float t) {\n    return sin(length(p) - t);\n}\n\nfloat planewave(vec2 p, vec2 d, float t) {\n    return sin(dot(p, d) - t);\n}\n\nfloat halfplane(vec2 p, vec2 d, float t) {\n    float f = dot(p, d);\n    return f < 0.0 ? 0.0 : sin(f - t);\n}\n\nfloat wavefront1(vec2 p, float t, float phase) {\n    float v = 0.0;\n    int num = int(100.0*sin(t*0.1*TAU/6.0)*sin(t*0.1*TAU/6.0)) + 1;    \n    vec2 d = vec2(0.0, 200.0) / float(num);\n\n    for(int i = 1; i <= num; i++) {\n        v += circwave(p + (float(i) - float(num)*0.5) * d, phase);\n    }\n    return v; //  / float(num);\n}\n\n\nfloat wavefront2(vec2 p, float t, float phase) {\n    float v = 0.0;\n    int num = int(300.0 * sin(t*0.1*TAU/6.0)*sin(t*0.1*TAU/6.0)) + 1;\n    for(int i = 1; i <= num; i++) {\n        float phi = TAU/float(num) * float(i);\n        vec2 d = vec2(cos(phi), -sin(phi));\n        v += halfplane(p, d, phase);\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float scale = 500.0;\n    uv = (uv * scale) - vec2(scale/2.0);    \n    uv.y *= iResolution.y/iResolution.x;\n\n    float t = mod(iTime * 1.0, 60.0);\n    float phase = iTime * 2.0;\n    float d = 0.0;\n\n    if(mod(iTime, 60.0) < 30.0) {\n        d = wavefront1(uv, t, phase);\n    } else {\n        d = wavefront2(uv, t - 30.0, phase);\n    }\n\n    vec3 col = mix(vec3(1.0, 0.3, 0.1), vec3(0.1), smoothstep(-1.0, 1.0, d/(fwidth(d)*1.5)));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}