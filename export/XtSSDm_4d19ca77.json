{"ver":"0.1","info":{"id":"XtSSDm","date":"1444006861","viewed":398,"name":"Babby's First Mandelbrot","username":"lainga","description":"Very simple static display of the Mandelbrot fractal, z' = z^n + c. Traditionally, n=2.","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//Mess with my variables!\n\nfloat X_OFFSET \t= 0.5;\nfloat Y_OFFSET \t= 0.5;\nfloat ZOOM\t\t= 0.4;\t//Scale to display the set at; reduce if it goes off the sides\nfloat POW_LIMIT = 3.0;\t//Adjust the maximum power the cycle reaches\nfloat CONTOUR\t= 0.2;\t//Scale of the colour contours around the fractal\n\nvec2 zPow(vec2 z, float c){\n    float arg = atan(z.y, z.x);\n\treturn pow(length(z), c) * vec2(cos(arg*c), sin(arg*c));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 c = fragCoord.xy - vec2(iResolution.x*X_OFFSET, iResolution.y*Y_OFFSET);\n    c /= (iResolution.y * ZOOM);\n    vec2 z = c;\n    float power = (sin(iTime * 0.2) + 1.) * POW_LIMIT + 1.; \n    fragColor = vec4(0., 0., 0., 0.);\n    for (int i = 0; i < 256; i++){\n        z = zPow(z, power) + c; //Complex squaring: z' = z^2 + c\n        if (length(z) > 2.0){\n        \tfragColor = vec4(float(i) * CONTOUR, float(i) * 2. * CONTOUR, 1., 0.);\n            break;\n    \t}\n    }\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp,float time)\n{\n    return vec2(0.0);\n}","name":"","description":"","type":"sound"}]}