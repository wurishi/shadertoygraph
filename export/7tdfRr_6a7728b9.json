{"ver":"0.1","info":{"id":"7tdfRr","date":"1662862609","viewed":28,"name":"homework1 - SN","username":"sNeiswanger","description":"homework submission","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["circles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/distfunctions/\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nvec3 northernLights (vec2 uv, float time) {\n    return vec3(sin(time+uv.x*15.0), sin(time+uv.x*8.0), sin(time+uv.x*4.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //black background\n    vec3 color = northernLights(uv, iTime);\n    \n    //camera\n    vec3 eye = vec3(0.0,0.0,-50);\n    \n    //view direction\n    vec3[3] dir = vec3[3](normalize(vec3(uv.x, uv.y, 4.0)),\n                        normalize(vec3(uv.x + 0.001, uv.y, 4.0)),\n                        normalize(vec3(uv.x, uv.y + 0.001, 4.0)));\n    \n    float[3] t = float[3](0.0, 0.0, 0.0);\n\n    for(int i = 0; i < 100; i++) {\n        //sample point along view ray\n        vec3[3] pos = vec3[3](vec3(0.0),vec3(0.0),vec3(0.0));\n        for (int j = 0; j < 3; j++) { pos[j] = eye + dir[j] * t[j]; }\n                            \n        float[3] dist = float[3](0.0,0.0,0.0);\n        for (int j = 0; j < 3; j++) { dist[j] = opSmoothUnion(sdSphere(pos[j], 4.0f), \n                        sdSphere(vec3(pos[j].x+sin(iTime*2.0)*3.0, pos[j].y+sin(iTime*3.0)*3.0, pos[j].z+cos(iTime*2.0)*4.0), 2.0f), 0.5); }\n                    \n        //check if pos was close to sphere (e.g. small dist)\n        if (dist[0] < 0.01 && dist[1] < 0.01 && dist[2] < 0.01) {\n            //I hit the shape\n            vec3 BA = normalize(pos[1] - pos[0]);\n            vec3 CA = normalize(pos[2] - pos[0]);\n            vec3 normal = cross(CA, BA);\n\n            vec3 lightDir = normalize(vec3(-(iMouse.xy/iResolution.xy- vec2(0.5)),1));\n\n            color = dot(-lightDir,normal)*(texture(iChannel0, vec2(normal/2.0)).rgb);\n        }\n        \n        //move forward on the ray for next check\n        for (int j = 0; j < 3; j++) { t[j] += dist[j]; }\n    }\n    \n    color += texture(iChannel1, vec2(uv.x+cos(iTime/4.0),uv.y+sin(iTime/4.0))).rgb - vec3(0.2);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}