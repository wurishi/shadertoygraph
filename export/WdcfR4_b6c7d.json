{"ver":"0.1","info":{"id":"WdcfR4","date":"1604414322","viewed":79,"name":"Raymarching folded space","username":"ichko","description":"Raymarching folded space","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","spheres"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX 64\n#define EPS 0.05\n\nfloat distance_estimator(vec3 pos) {\n    pos = mod(pos, 2.0) - 1.0;\n    return length(pos) - 0.2;\n}\n\nfloat march(vec3 ro, vec3 rd) {\n    float dist = 0.0;\n    for(int i = 0;i < MAX;++i) {\n        vec3 pos = ro + rd * dist;\n        float d = distance_estimator(pos);\n        dist += d;\n        if(d < EPS) break;\n    }\n\n    return dist / float(MAX) * 3.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float ar = iResolution.x / iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.y - vec2(ar * 0.5, 0.5);\n\n    vec3 ray_origin = vec3(sin(iTime), cos(iTime / 32.0) * 15.0, sin(iTime) / 45.0) * 10.0;\n    vec3 ray_direction = normalize(vec3(uv, 1.0));\n    \n    float angle = iTime / 5.0;\n    float s = sin(angle), c = cos(angle);\n    mat2 rot = mat2(c, -s, s, c);\n    ray_direction.xy *= rot;\n    ray_direction.yz *= rot;\n    \n    float i = march(ray_origin, ray_direction);\n    vec3 color = vec3(i, 0.0, 0.5);\n\n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}