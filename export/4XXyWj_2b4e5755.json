{"ver":"0.1","info":{"id":"4XXyWj","date":"1732091417","viewed":18,"name":"Circle_Lyrith","username":"Lyrith","description":"just to learn for myself","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//MAKE SURE TO PUT METHODS ON TOP\nvec3 sdSphere(vec2 uv, vec2 pos, float s)\n{\n    //convert screen pos (0-1) to pixel position, adjust pixel position to aspect ration\n    vec2 pixelPos = uv - pos;\n    pixelPos.x *= iResolution.x/iResolution.y;\n    \n    //get the length from the position point\n    float l = length(pixelPos);\n    \n    //makes smooth edges while claming the value between s and s - feather distance\n    float outCol = smoothstep(s, s - 0.001, l);\n    \n    //return the values\n    return vec3(outCol);\n}\n\n//create the compound SDF of multiple shapes and outputs it as either color or black\nvec3 Smile(vec2 pos, vec3 col, float scale, vec2 uv)\n{\n    uv /= scale;\n    pos /= scale;\n    \n    vec3 smileyMask = vec3(0);\n    smileyMask += sdSphere(uv, pos, 0.4);\n    smileyMask -= sdSphere(uv, pos + vec2(-0.1, 0.1), 0.08);\n    smileyMask -= sdSphere(uv, pos + vec2(0.1, 0.1), 0.08);\n    smileyMask = clamp(smileyMask, vec3(0), vec3(1));\n    \n    vec3 mouthMask = vec3(0);\n    mouthMask += sdSphere(uv, pos, 0.3);\n    mouthMask -= sdSphere(uv, pos + vec2(0, 0.15), 0.4);\n    mouthMask = clamp(mouthMask, vec3(0), vec3(1));\n    \n    smileyMask -= mouthMask;\n    smileyMask = clamp(smileyMask, vec3(0), vec3(1));\n    \n    return col * smileyMask;\n}\n\nvec3 constructColBuffer(vec2 uv)\n{\n    vec3 colorBuffer = vec3(0);\n    \n    //input = Position, Color, Scale and UV\n    if (colorBuffer == vec3(0)) colorBuffer += Smile(vec2(0.5,0.35), vec3(1,1,0), 0.8, uv);\n    if (colorBuffer == vec3(0)) colorBuffer += Smile(vec2(0.7,0.55), vec3(0,0,1), 0.5, uv);\n    if (colorBuffer == vec3(0)) colorBuffer += Smile(vec2(0.3,0.65), vec3(0,1,1), 0.85, uv);\n    if (colorBuffer == vec3(0)) colorBuffer += Smile(vec2(0.3,0.15), vec3(1,0,1), 0.2, uv);\n\n    return colorBuffer;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n      \n    // Output to screen\n    fragColor = vec4(constructColBuffer(uv), 1.0);\n}","name":"Image","description":"","type":"image"}]}