{"ver":"0.1","info":{"id":"WsjBRm","date":"1590047126","viewed":88,"name":"Hearth","username":"schnautzi","description":"A glowing circle","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//\t3D Cubic Noise\n//\n//  https://github.com/jobtalle/CubicNoise\n\nfloat random(vec3 x) {\n    return texture(iChannel0, (x.xy + x.z) * vec2(x.z * 1.03, x.z * -0.921)).r;\n}\n\nfloat interpolate(float a, float b, float c, float d, float x) {\n    float p = (d - c) - (a - b);\n    \n    return x * (x * (x * p + ((a - b) - p)) + (c - a)) + b;\n}\n\nfloat sampleX(vec3 at) {\n    float floored = floor(at.x);\n    \n    return interpolate(\n        random(vec3(floored - 1.0, at.yz)),\n        random(vec3(floored, at.yz)),\n        random(vec3(floored + 1.0, at.yz)),\n        random(vec3(floored + 2.0, at.yz)),\n    \tat.x - floored) * 0.5 + 0.25;\n}\n\nfloat sampleY(vec3 at) {\n    float floored = floor(at.y);\n    \n    return interpolate(\n        sampleX(vec3(at.x, floored - 1.0, at.z)),\n        sampleX(vec3(at.x, floored, at.z)),\n        sampleX(vec3(at.x, floored + 1.0, at.z)),\n        sampleX(vec3(at.x, floored + 2.0, at.z)),\n        at.y - floored);\n}\n\nfloat cubicNoise(vec3 at) {\n    float floored = floor(at.z);\n    \n    return interpolate(\n        sampleY(vec3(at.xy, floored - 1.0)),\n        sampleY(vec3(at.xy, floored)),\n        sampleY(vec3(at.xy, floored + 1.0)),\n        sampleY(vec3(at.xy, floored + 2.0)),\n        at.z - floored);\n}\n\n#define RADIUS 0.54\n#define SCALE 0.015\n#define SPEED 250.0\n#define PIXEL 8.5\n#define PIXEL_POWER 0.03\n#define EYE_SIDE 0.2\n#define EYE_UP 0.1\n#define EYE_SHIFT 0.02\n#define EYE_RADIUS_MAX 0.08\n#define EYE_RADIUS_MIN 0.03\n#define SHIFT_AMP 8.0\n#define SHIFT_SPEED 3.5\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 shift = vec2(0.0, cubicNoise(vec3(0.0, 0.0, iTime * SHIFT_SPEED))) * SHIFT_AMP;\n    vec2 targetCoord = fragCoord / PIXEL;\n    vec2 targetCoordRounded = round(targetCoord);\n    \n    float radius = min(iResolution.x, iResolution.y) * RADIUS;\n    vec2 delta = targetCoordRounded * PIXEL - iResolution.xy * 0.5 + shift;\n    vec2 ring = normalize(delta);\n    float centerDist = length(delta) * 2.0;\n    \n    vec3 a = vec3(0.9, 0.8, 0.25);\n    vec3 b = vec3(0.8, 0.35, 0.35);\n    \n    if (centerDist <= radius) {\n        vec2 eyeLeft = iResolution.xy * vec2(0.5) + radius * vec2(-EYE_SIDE, EYE_UP) - shift;\n        vec2 eyeRight = iResolution.xy * vec2(0.5) + radius * vec2(EYE_SIDE, EYE_UP) - shift;\n        \n        float eyeDist = min(\n            length(targetCoordRounded * PIXEL - eyeLeft),\n            length(targetCoordRounded * PIXEL - eyeRight));\n        \n        if (eyeDist < radius * EYE_RADIUS_MAX && eyeDist > radius * EYE_RADIUS_MIN)\n            fragColor = vec4(1.0);\n        else\n        \tfragColor = vec4(vec3(0.2), 1.0);\n    } else {\n        float offset = pow(centerDist - radius, 0.9);\n        float v = cubicNoise(SCALE * vec3(ring * (radius + offset), offset - iTime * SPEED));\n        float ramp = (centerDist - radius) / (min(iResolution.x, iResolution.y) * (1.0 - RADIUS));\n        \n        fragColor = vec4(v > ramp ? a : b, 1.0);\n    }\n    \n    vec2 coordOrigin = targetCoord - .5;\n    float nearestEdge = min(fract(coordOrigin.y), fract(1.0 - coordOrigin.y));\n    float crt = pow(nearestEdge, PIXEL_POWER);\n    \n    fragColor.rgb *= crt;\n}","name":"Image","description":"","type":"image"}]}