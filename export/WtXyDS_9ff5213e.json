{"ver":"0.1","info":{"id":"WtXyDS","date":"1644418850","viewed":214,"name":"draw with something blue","username":"ericrosenbizzle","description":"Find something light blue and draw with it. Works best with painter's tape.","likes":4,"published":1,"flags":34,"usePreview":0,"tags":["webcam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 pos = fragCoord/iResolution.xy;\n    pos = vec2(1.0 - pos.x, pos.y);\n    vec3 cam = texture(iChannel1,pos).xyz;\n\n    vec3 img = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n    \n\tvec3 mixed = cam + img *2.; \n    \n    //vec3 mixed = img;\n    \n   \tfragColor = vec4(mixed, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float rand(float co){\n    return fract(sin(co * 12.9898)) * 43758.5453;\n}\n\nvec2 uv;\n\nconst float eps = 216.f/24389.f;\nconst float kap = 24389.f/27.f;\nconst vec3  d65_2deg = vec3(0.95047,1.00000,1.08883);\nconst mat3 rgb2xyz_mat = \n    mat3(0.4124564,0.3575761,0.1804375,\n         0.2126729,0.7151522,0.0721750,\n         0.0193339,0.1191920,0.9503041);\nconst mat3 xyz2rgb_mat =\n\tmat3( 3.2404542, -1.5371385, -0.4985314,\n\t\t -0.9692660,  1.8760108,  0.0415560,\n\t      0.0556434, -0.2040259,  1.0572252);\n\nfloat compand(float f){\n    return pow(f,2.2f);//>0.04045? pow(((f+0.055f)/1.055f),2.4f): f/12.92f;\n}\nfloat invcompand(float f){\n    return pow(f,1.f/2.2f);\n}\n\n\nvec3 rgb2xyz(vec3 rgb){\n\trgb.r = compand(rgb.r);\n\trgb.g = compand(rgb.g);\n\trgb.b = compand(rgb.b);\n    return rgb*rgb2xyz_mat;\n}\nvec3 xyz2rgb(vec3 xyz){\n    xyz *= xyz2rgb_mat;\n\txyz.x = invcompand(xyz.x);\n\txyz.y = invcompand(xyz.y);\n\txyz.z = invcompand(xyz.z);\n    return xyz;\n}\n\nvec3 xyz2lab(vec3 xyz){\n    vec3 f;\n    f.x = xyz.x>eps? pow(xyz.x,1.f/3.f) : (kap*xyz.x+16.f)/116.f;\n    f.y = xyz.y>eps? pow(xyz.y,1.f/3.f) : (kap*xyz.y+16.f)/116.f;\n    f.z = xyz.z>eps? pow(xyz.z,1.f/3.f) : (kap*xyz.z+16.f)/116.f;\n    return vec3(116.f* f.y-16.f,\n                500.f*(f.x-f.y),\n                200.f*(f.y-f.z))/vec3(100)/d65_2deg;\n}\n\nvec3 lab2xyz(vec3 lab){\n    lab *= 100.f;\n    lab *= d65_2deg;\n    float fy = (lab.x+16.f)/116.f;\n    float fx = lab.y/500.f + fy;\n    float fz = fy - (lab.z/200.f);\n    float fx3 = pow(fx,3.f);\n    float fz3 = pow(fz,3.f);\n    return vec3(\n    \tfx3>eps? fx3: (116.f*fx-16.f)/kap,\n        lab.x > (kap*eps)? pow((lab.x+16.f)/116.f,3.f): lab.x/kap,\n        fz3>eps? fz3: (116.f*fz-16.f)/kap);\n}\n\nfloat rgbToGray(vec3 rgb) {\n\tconst vec3 W = vec3(0.2125, 0.7154, 0.0721);\n    return dot(rgb, W);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // mirror reverse the camera input\n    vec2 pos = fragCoord/iResolution.xy;\n    pos = vec2(1.0 - pos.x, pos.y);\n    \n    vec3 cam = texture(iChannel0,pos).xyz;\n\tvec3 lab = xyz2lab(rgb2xyz(cam));\n    \n    vec3 image = texture(iChannel1,fragCoord/iResolution.xy).xyz;\n    \n    /*\n    //if (distance(lab, vec3(0.5, 0.5, -0.25)) < 0.25) { // green LEGO\n    //if (distance(lab, vec3(0.4, 0.4, 0.125)) < 0.2) { // pink marker\n    if (distance(lab, vec3(0.4, 0.1, -0.4)) < 0.25) { // blue painter's tape\n\t    //fragColor = vec4(cam, 1.);\n        fragColor = vec4(1.,0.,1.,1.); // pink\n    } else {\n\t    fragColor = vec4(image, 1.);  \n        //fragColor = vec4(0.,0.,0.,1.);\n    }\n\t*/\n    \n    /*\n    if (distance(lab.yz, vec2(0.1, -0.4)) < 0.25) { // blue painter's tape\n        fragColor = vec4(1.,0.,1.,1.); // pink\n    } else {\n\t    fragColor = vec4(image, 1.);  \n    }\n\t*/\n    \n    vec4 trailColor = vec4(1.,0.5,1.,1.); // pink\n    //trailColor *= 1. + sin(iTime * 10.) / 2.;\n    //vec4 trailColor = vec4(1.,1.,1.,1.);\n    //vec4 trailColor = vec4(0.5,0.25,0.,1.); // orange\n    //trailColor.b = sin(iTime * 2.) * 2.;\n    \n    if (distance(lab.yz, vec2(0.1, -0.4)) < 0.075) { // blue painter's tape\n        fragColor = trailColor;\n    } else {\n        //if (distance(lab.yz, vec2(0.1, 0.3)) < 0.1) { // orange\n        //    fragColor = vec4(0.,1.,0.,1.);\n        //} else {\n            fragColor = vec4(image, 1.);  \n        //}\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 filtered = texture(iChannel0,fragCoord/iResolution.xy).xyz;\n        \n    // Slow fade\n    vec3 faded = vec3(filtered * 0.99);\n        \n    fragColor = vec4(faded, 1.);\n        \n    // Click to clear\n    vec4 m = iMouse / iResolution.xxxx;\n    if(m.z>0.0 ) {\n        fragColor = vec4(0.,0.,0.,1.);\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float PI = 3.14159265359;\n\nfloat rand(float co){\n    return fract(sin(co * 12.9898)) * 43758.5453;\n}\n\nfloat rand2(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord/iResolution.xy;\n    \n    vec3 faded = texture(iChannel0,pos).xyz;\n    \n    float cycle = faded.r;\n    cycle = faded.r * (sin(faded.r * 100.) - 0.5) / 2.;\n    \n    //cycle += cycle * rand2(pos) * rand2(pos);\n\t\n    //float cycle = rand2(faded.xy);\n        \n    fragColor = vec4(faded + faded * cycle, 1.);\n    \n}","name":"Buffer C","description":"","type":"buffer"}]}