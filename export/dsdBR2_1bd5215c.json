{"ver":"0.1","info":{"id":"dsdBR2","date":"1697575472","viewed":43,"name":"Fast XDoG","username":"ascomycody","description":"Precalculated 13x13 kernels that make use of texel sampling to reduce 121 hits per kernel down to 41. Extended Difference of Gaussians approximates a 2D Laplacian. Try on webcam, works in real time in full screen on most hardware","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["blur","fast","1pass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Cody Crossley 2023\n// Inspired by this 1-sample blur by iq https://www.shadertoy.com/view/MsdGD2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.xy;\n    vec4 c = xDoG(ic0, 6.+5.*sin(iTime), .45, .01, 1, fragCoord, iResolution);\n    \n    //vec4 c_debug = (p.x<.33) ? blur1(ic0, fragCoord, iResolution) : (p.x>.66) ? blur2(ic0, fragCoord, iResolution) : texture(ic0, p);\n    \n    fragColor = (.5+.5*cos(p.x+iTime)*sin(p.y+iTime) <.5) ? texture(ic0, p) : c;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define ic0 iChannel0\n#define ic1 iChannel1\n#define ic2 iChannel2\n#define ic3 iChannel3\n\nfloat lum(vec4 col){\n    return (dot(col.rgb, vec3(0.21,0.72,0.07)));\n}\n\n//sd = 1\n#define blur1wt vec3[11](vec3(0., 0., 0.1591549431),vec3(1.1824255, 0.37754067, 0.0455986550),vec3(3.0293122, 0.37754067, 0.0003072413),vec3(5.0040701, 0.37754067, 0.0000000379),vec3(1.1824255, 2.07585820, 0.0022702233),vec3(3.0293122, 2.07585820, 0.0000152966),vec3(1.1824255, 4.01098690, 0.0000010702),vec3(5., 2.07585820, 0.0000000261),vec3(3.0293122, 4., 0.0000001168),vec3(1., 6., 0.0000000015),vec3(3., 5., 0.0000000066))\n//sd = 1.6\n#define blur2wt vec3[11](vec3(0., 0., 0.0621698996),vec3(1.3575675, 0.45132651, 0.0381524400),vec3(3.2030746, 0.45132651, 0.0054111666),vec3(5.1044773, 0.45132651, 0.0001608697),vec3(1.3575675, 2.27357440, 0.0118190740),vec3(3.2030746, 2.27357440, 0.0016763012),vec3(1.3575675, 4.14706450, 0.0007674666),vec3(5., 2.27357440, 0.0001389495),vec3(3.2030746, 4., 0.0002496470),vec3(1., 6., 0.0000451984),vec3(3., 5., 0.0000812070))\n\nvec4 blur1(in sampler2D a, in vec2 f, in vec3 rez){\n    vec3 b;\n    float gsum = blur1wt[0].z;\n    b += gsum * texture(a, (f + vec2(blur1wt[0].x, blur1wt[0].y))/rez.xy).rgb;\n    \n    for(int i = 1; i < 11; i++){\n        b += blur1wt[i].z * texture(a, (f + vec2(blur1wt[i].x, blur1wt[i].y))/rez.xy).rgb;\n        b += blur1wt[i].z * texture(a, (f + vec2(-blur1wt[i].y, blur1wt[i].x))/rez.xy).rgb;\n        b += blur1wt[i].z * texture(a, (f + vec2(-blur1wt[i].x, -blur1wt[i].y))/rez.xy).rgb;\n        b += blur1wt[i].z * texture(a, (f + vec2(blur1wt[i].y, -blur1wt[i].x))/rez.xy).rgb;\n        gsum += blur1wt[i].z * 4.;\n    }\n    \n    return vec4(b/gsum, 1.);\n}\n\nvec4 blur2(in sampler2D a, in vec2 f, in vec3 rez){\n    vec3 b;\n    float gsum = blur2wt[0].z;\n    b += gsum * texture(a, (f + vec2(blur2wt[0].x, blur2wt[0].y))/rez.xy).rgb;\n    \n    for(int i = 1; i < 11; i++){\n        b += blur2wt[i].z * texture(a, (f + vec2(blur2wt[i].x, blur2wt[i].y))/rez.xy).rgb;\n        b += blur2wt[i].z * texture(a, (f + vec2(-blur2wt[i].y, blur2wt[i].x))/rez.xy).rgb;\n        b += blur2wt[i].z * texture(a, (f + vec2(-blur2wt[i].x, -blur2wt[i].y))/rez.xy).rgb;\n        b += blur2wt[i].z * texture(a, (f + vec2(blur2wt[i].y, -blur2wt[i].x))/rez.xy).rgb;\n        gsum += blur2wt[i].z * 4.;\n    }\n    \n    return vec4(b/gsum, 1.);\n}\n\nvec4 xDoG(in sampler2D a, in float tau, in float thr, in float rng, in int cm, in vec2 f, in vec3 rez){\n    vec4 g = (1. + tau) * blur1(a, f, rez) - tau * blur2(a, f, rez);\n    \n    switch (cm){\n      case 0:\n          return smoothstep(thr - rng*.5, thr + rng*.5, vec4(lum(g)));\n      case 1:\n          return smoothstep(thr - rng*.5, thr + rng*.5, g);\n  }\n}","name":"Common","description":"","type":"common"}]}