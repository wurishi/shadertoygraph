{"ver":"0.1","info":{"id":"cdfGR2","date":"1666654003","viewed":86,"name":"Phasors - straight lines","username":"jean80it","description":"Phasors - straight lines.\nShowing an intuition of why we only consider straight lines when summing contributions to the wave function in QED- any other path would have a corresponding one that is shorter enough that the two are in opposition of phase.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["phasorsstraightlines"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This shader is part of several I wrote to create animations\n// to support a presentation about Quantum Electrodynamics.\n// it is not supposed to be \"proof\" for anything, but to provide \n// good visualization of some concepts to help intuition.\n\n\n#define PI 3.1415926\n\n#define sqr(x) (x * x)\n\nfloat dot2( in vec2 v ) { return dot(v,v); }\nfloat cro( in vec2 a, in vec2 b ) { return a.x*b.y - a.y*b.x; }\n\n// from iq\nfloat sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n\n        #if 0\n        // When p≈0 and p<0, h-q has catastrophic cancelation. So, we do\n        // h=√(q²+4p³)=q·√(1+4p³/q²)=q·√(1+w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1+½w) so that the q's\n        // cancel each other in h-q. Expanding and simplifying further we\n        // get x=vec2(p³/q,-p³/q-q). And using a second degree Taylor\n        // expansion instead: x=vec2(k,-k-q) with k=(1-p³/q²)·p³/q\n        if( abs(p)<0.001 )\n        {\n            float k = p3/q;              // linear approx\n          //float k = (1.0-p3/q2)*p3/q;  // quadratic approx \n            x = vec2(k,-k-q);  \n        }\n        #endif\n\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        res = dot2(q);\n    \tsgn = cro(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cro(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cro(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n    }\n    \n    return sqrt( res )*sign(sgn);\n}\n\n// modified from iq\nfloat sdBezierWavy( in vec2 pos, in vec2 A, in vec2 B, in vec2 C, float freq, float ampli)\n{    \n    vec2 a = B - A;\n    vec2 b = A - 2.0*B + C;\n    vec2 c = a * 2.0;\n    vec2 d = A - pos;\n\n    float kk = 1.0/dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.0*dot(a,a)+dot(d,b))/3.0;\n    float kz = kk * dot(d,a);      \n\n    float res = 0.0;\n    float sgn = 0.0;\n\n    float p  = ky - kx*kx;\n    float q  = kx*(2.0*kx*kx - 3.0*ky) + kz;\n    float p3 = p*p*p;\n    float q2 = q*q;\n    float h  = q2 + 4.0*p3;\n\n    float tt = 0.0;\n\n    if( h>=0.0 ) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h,-h)-q)/2.0;\n\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0/3.0));\n        float t = clamp( uv.x+uv.y-kx, 0.0, 1.0 );\n        vec2  q = d+(c+b*t)*t;\n        tt = t;\n        \n        res = dot2(q);\n    \tsgn = cro(c+2.0*b*t,q);\n    }\n    else \n    {   // 3 roots\n        float z = sqrt(-p);\n        float v = acos(q/(p*z*2.0))/3.0;\n        float m = cos(v);\n        float n = sin(v)*1.732050808;\n        tt = z-kx;\n        vec3  t = clamp( vec3(m+m,-n-m,n-m)*z-kx, 0.0, 1.0 );\n        vec2  qx=d+(c+b*t.x)*t.x; float dx=dot2(qx), sx = cro(c+2.0*b*t.x,qx);\n        vec2  qy=d+(c+b*t.y)*t.y; float dy=dot2(qy), sy = cro(c+2.0*b*t.y,qy);\n        if( dx<dy ) { res=dx; sgn=sx; } else {res=dy; sgn=sy; }\n    }\n    \n    return smoothstep(1.0, 0.99, tt) * sin(tt * freq) * ampli + sqrt( res )*sign(sgn);\n}\n\nvec2 rotate(vec2 p, float a)\n{\n    mat2 r = mat2(\n        cos(a), sin(a),\n        -sin(a), cos(a)\n        );\n        \n    return p * r;\n}\n\nvec2 translate(vec2 p, vec2 newPos)\n{\n    return p - newPos;\n}\n\nfloat sdRect(vec2 p, vec2 size) \n{\n    vec2 d = abs(p) - size / 2.0;\n    return max(d.x, d.y);\n}\n\nfloat combineSdUnion(inout float sd1, float sd2)\n{\n    sd1 = min(sd1, sd2);\n    return sd1;\n}\n\nfloat sdEllipse(vec2 p, vec2 r)\n{\n    return length(p * r.x / r) - r.x;\n}\n\nfloat sdEllipse(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdOutline(float sd, float thickness)\n{\n    return abs(sd) - thickness * 0.5;\n}\n\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\nfloat sdVector(in vec2 p, in float len, in float thickness, in float appPointR, vec2 arrowHeadSize)\n{\n    vec2 arrowLineSize = vec2(thickness, len);\n    float c = sdRect(p - vec2(0.0, (arrowLineSize.y - arrowHeadSize.y) / 2.0), arrowLineSize - vec2(0.0, arrowHeadSize.y));\n    c = min(c, sdEllipse(p, vec2(appPointR)));\n    c = min(c, sdTriangleIsosceles(p - vec2(0.0, arrowLineSize.y), vec2(arrowHeadSize.x, -arrowHeadSize.y)));\n    \n    return c;\n}\n\nvec3 drawSd(float d, inout vec3 prevCol, vec3 newCol, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\nvec3 drawSd(float d, inout vec3 prevCol, vec3 newCol, float mask, float aaTransitionWidth)\n{\n    prevCol = mix(prevCol, newCol, clamp(mask, 0.0, 1.0) * smoothstep(aaTransitionWidth, 0.0, d));\n    return prevCol;\n}\n\nvoid drawPhasorDiagram(vec2 p, inout vec3 color, float aaTransitionWidth, float frequency, float amplitude, float currentPhase, float thickness, vec3 vecCol, float alpha)\n{\n    vec2 phasorHOffs = vec2(0.0, 0.0);\n    \n    float appPointR = thickness * 2.0;\n    vec2 arrowHeadSize = thickness * vec2(4, 8);\n    \n    \n    drawSd(sdOutline(sdEllipse(translate(p, phasorHOffs),  vec2(amplitude)), thickness), color, vec3(1.0), alpha, aaTransitionWidth);\n    drawSd(sdVector(rotate(translate(p, phasorHOffs), currentPhase), amplitude, thickness, appPointR, arrowHeadSize), color, vecCol, alpha, aaTransitionWidth);    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 size = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 center = size * 0.5;\n    float aaTransitionWidth = 1.0 / (min(iResolution.x, iResolution.y)) * 2.0;\n\n    vec3 col1 = vec3(1.0, 0.3, 0.3);\n    vec3 col2 = vec3(0.3, 0.3, 1.0);\n\n    vec2 A = vec2(0.2, 0.5);  // left endpoint - source\n    vec2 B = vec2(1.4, 0.6);  // right endpoint - absorber\n    vec2 C1 = vec2(0.7, 1.0); // control\n    vec2 C2 = vec2(0.7, 0.7);\n    float f1 = 25.1;\n    float f2 = 22.0;\n    \n    \n    float thickness = 0.002;\n\n    // background gradient\n    vec3 colBackground = clamp(sqrt(mix(sqr(vec3(0.25, 0.2, 0.1)), \n                                   sqr(vec3(0.1, 0.22, 0.3)), \n                                   uv.y + uv.x / 2.0)),\n                                   0.0, 1.0);\n                                   \n    vec3 col = colBackground;\n    \n    float animMixK = cos(iTime * 0.5) * 0.5 + 0.5;\n    vec2 controlPoint = mix(C2, C1, animMixK);\n    float freq = mix(f2, f1, animMixK);\n\n    float wavesAmpli = 0.1 * clamp(iTime - 10.0, 0.0, 1.0);\n\n    drawSd(abs(sdBezier(uv, A, controlPoint, B)) - thickness,\n            col, col1, aaTransitionWidth);\n\n    drawSd(abs(sdBezierWavy(uv, A, controlPoint, B, freq, wavesAmpli)) - thickness,\n            col, col1, 0.5, aaTransitionWidth);\n\n    drawSd(abs(sdBezier(uv, A, C1, B)) - thickness,\n            col, col2, aaTransitionWidth);\n\n    drawSd(abs(sdBezierWavy(uv, A, C1, B, 25.1, wavesAmpli)) - thickness,\n            col, col2, 0.5, aaTransitionWidth);\n\n    // endpoints\n    drawSd(sdEllipse(translate(uv, A), 0.01),\n            col, vec3(1.0), 1.0, aaTransitionWidth);\n\n    drawSd(sdEllipse(translate(uv, B), 0.01),\n            col, vec3(1.0), 1.0, aaTransitionWidth);\n\n    float phase1 = PI * 1.5;\n    float phase2 = PI * 0.5;\n    float phase = mix(phase2, phase1, animMixK);\n\n    float phasorDiagramsAlpha = clamp(iTime - 15.0, 0.0, 1.0);\n\n    drawPhasorDiagram(translate(uv, A + vec2(0.0, -0.25)), col, aaTransitionWidth, 1.0, 0.15, phase1, 0.002, col1, phasorDiagramsAlpha);\n    drawPhasorDiagram(translate(uv, A + vec2(0.0, -0.255)), col, aaTransitionWidth, 1.0, 0.15, phase1, 0.002, col2, phasorDiagramsAlpha);\n    \n    drawPhasorDiagram(translate(uv, vec2(B.x, A.y) + vec2(0.0, -0.25)), col, aaTransitionWidth, 1.0, 0.15, phase, 0.002, col1, phasorDiagramsAlpha);\n    drawPhasorDiagram(translate(uv, vec2(B.x, A.y) + vec2(0.0, -0.255)), col, aaTransitionWidth, 1.0, 0.15, phase1, 0.002, col2, phasorDiagramsAlpha);\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}