{"ver":"0.1","info":{"id":"4tfBWl","date":"1513771979","viewed":682,"name":"ZX Spectrum loader","username":"dean_the_coder","description":"Recreates the effect of loading a game on the ZX Spectrum.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["retro","spectrum","zx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Dean Edis\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define BLUE vec3(0, 0, 0.84)\n#define YELLOW vec3(0.84, 0.84, 0)\n#define CYAN vec3(0.0, 0.84, 0.84)\n#define MAGENTA vec3(0.84, 0.0, 0.0)\n#define WHITE vec3(0.84, 0.84, 0.84)\n#define BLACK vec3(0)\n\n#define BORDER 0.10\n\n#define TIME iTime\n\n#define NOTHING 0\n#define WAIT_FLASH 1\n#define PROGRAM 2\n#define DATA 3\n#define SCREEN_LINES 4\n#define COLOR_FILL 5\n#define DONE 6\n\n\nfloat rand()\n{\n    return fract(sin(dot(vec2(TIME), vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat inMiddle(in vec2 xy)\n{\n    vec2 bottomLeft = vec2(BORDER);\n    vec2 topRight = vec2(1.0) - bottomLeft;\n    vec2 s = step(bottomLeft, xy) - step(topRight, xy);\n    return s.x * s.y;   \n}\n\nbool inMiddleBool(in vec2 xy)\n{\n    return inMiddle(xy) == 1.0;\n}\n\nvec3 screen(in vec2 uv)\n{\n    return texture(iChannel0, vec2(uv.x, 1.0 - uv.y)).xyz;\n}\n\nvec2 pixellate(in vec2 uv)\n{\n\treturn floor(uv * vec2(192.0, 256.0)) / vec2(192.0, 256.0);\n}\n\nvec3 blueYellowLoadPattern(in vec2 uv)\n{\n    float r = rand();\n    float lines = mix(20.0, 30.0, r);\n    float offset = dot(pixellate(uv), vec2(0.1, lines)) + r;\n    float f = step(fract(offset), 0.5);\n    return mix(BLUE, YELLOW, step(f, 0.0));\n}\n\nvec3 cyanMagentaLoadPattern(in vec2 uv, float t)\n{\n    float lines = 15.0;\n    float offset = dot(pixellate(uv), vec2(0.1, lines)) + t;\n    float f = step(fract(offset), 0.5);\n    return mix(MAGENTA, CYAN, step(f, 0.0));\n}\n\nvec3 toBWPixel(in vec3 pixel)\n{\n    return mix(WHITE, BLACK, step(dot(pixel, vec3(0.2126, 0.7152, 0.0722)), 0.5));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y = 1.0 - uv.y;\n\n    vec3 rgb;\n    \n    // Select phase.\n    float t;\n    int PHASE;\n\n    if (TIME > 32.9)\n        PHASE = DONE, t = TIME - 32.9;\n    else if (TIME > 28.9)\n        PHASE = COLOR_FILL, t = TIME - 28.9;\n    else if (TIME > 9.7)\n        PHASE = SCREEN_LINES, t = TIME - 9.7;\n    else if (TIME > 8.7)\n        PHASE = PROGRAM, t = TIME - 8.7;\n    else if (TIME > 6.7)\n        PHASE = WAIT_FLASH, t = TIME - 6.7;\n    else if (TIME > 5.7)\n        PHASE = NOTHING, t = TIME - 5.7;\n    else if (TIME > 5.5)\n        PHASE = DATA, t = TIME - 5.5; // 'BLIP'\n    else if (TIME > 4.0)\n        PHASE = PROGRAM, t = TIME - 4.0;\n    else\n        PHASE = WAIT_FLASH, t = TIME;\n\n    if (PHASE == NOTHING)\n    {\n        rgb = WHITE;\n    }\n    else if (PHASE == WAIT_FLASH)\n    {\n        rgb = mix(mix(MAGENTA, CYAN, step(mod(t, 2.0), 1.0)),\n                  WHITE,\n                  inMiddle(uv));\n    }\n    else if (PHASE == PROGRAM)\n    {\n        if (inMiddleBool(uv))\n        {\n            rgb = WHITE;\n        }\n        else\n        {\n            float lines = 15.0;\n            float offset = dot(pixellate(uv), vec2(0.1, lines)) + t;\n            float f = step(fract(offset), 0.5);\n\n            rgb = mix(MAGENTA, CYAN, step(f, 0.0));\n        }\n    }\n    else if (PHASE == DATA)\n    {\n        rgb = mix(blueYellowLoadPattern(uv), WHITE, inMiddle(uv));\n    }\n    else if (PHASE == SCREEN_LINES)\n    {\n        if (inMiddleBool(uv))\n        {\n            float lines_revealed = t * 10.0;\n\n            float y = (uv.y - BORDER) / (1.0 - BORDER * 2.0);\n            float line = floor(y * 192.0);\n            \n            float block = mod(floor(line / 8.0), 8.0);\n            float block_offset = fract(line / 8.0) * 8.0;\n            \n            float section_start_t = floor(line / 64.0) * 64.0;\n            \n            float third_blocks = 8.0;\n            float draw_from_t = section_start_t + block + block_offset * third_blocks;\n            \n            vec3 pixel = screen(pixellate(uv));\n            rgb = mix(WHITE, toBWPixel(pixel), step(draw_from_t, lines_revealed));\n        }\n        else\n        {\n            rgb = blueYellowLoadPattern(uv);\n        }\n    }\n    else if (PHASE == COLOR_FILL)\n    {\n        if (inMiddleBool(uv))\n        {\n            float y = (uv.y - BORDER) / (1.0 - BORDER * 2.0);\n            float x = (uv.x - BORDER) / (1.0 - BORDER * 2.0);\n\n            float block = floor(x * 32.0) + floor(y * 24.0) * 32.0;\n            float blocks_to_show = mix(0.0, 768.0, t / 4.0);\n            \n            rgb = mix(toBWPixel(screen(pixellate(uv))), screen(uv), step(block, blocks_to_show));\n        }\n        else\n        {\n            rgb = blueYellowLoadPattern(uv);\n        }\n    }\n    else if (PHASE == DONE)\n    {\n        rgb = mix(WHITE, screen(uv), inMiddle(uv));\n    }\n\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}