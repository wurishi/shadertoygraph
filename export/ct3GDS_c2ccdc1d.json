{"ver":"0.1","info":{"id":"ct3GDS","date":"1682976070","viewed":126,"name":"Fire Shader Test (Question SE)","username":"araesmojo","description":"A reimplementation of https://www.shadertoy.com/view/MdKfDh using methods of https://stackoverflow.com/questions/76117105/android-gles-flame-shader to answer questions about what could be wrong.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fire","question","stackexchange"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copy of https://www.shadertoy.com/view/MdKfDh\n// Reimplemented using format from: https://stackoverflow.com/questions/76117105/android-gles-flame-shader\n// Proving that varied implementation from StackExchange still works.\n\n// This is just a spin off from https://www.shadertoy.com/view/XsXSWS applying some distortion and minor tweaks\n\n#define timeScale           iTime * 1.0\n#define fireMovement        vec2(-0.01, -0.5)\n#define distortionMovement  vec2(-0.01, -0.3)\n#define normalStrength      40.0\n#define distortionStrength  0.1\n\nuniform vec2 screenSize;\nuniform float progress;\n\n// #define DEBUG_NORMAL\n\n/** NOISE **/\nfloat rand(vec2 co) {\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 hash( vec2 p ) {\n    p = vec2( dot(p,vec2(127.1,311.7)),\n    dot(p,vec2(269.5,183.3)) );\n\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p ) {\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n    vec2 i = floor( p + (p.x+p.y)*K1 );\n\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = step(a.yx,a.xy);\n    vec2 b = a - o + K2;\n    vec2 c = a - 1.0 + 2.0*K2;\n\n    vec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\n    vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\n    return dot( n, vec3(70.0) );\n}\n\nfloat fbm ( in vec2 p ) {\n    float f = 0.0;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    f  = 0.5000*noise(p); p = m*p;\n    f += 0.2500*noise(p); p = m*p;\n    f += 0.1250*noise(p); p = m*p;\n    f += 0.0625*noise(p); p = m*p;\n    f = 0.5 + 0.5 * f;\n    return f;\n}\n\n/** DISTORTION **/\nvec3 bumpMap(vec2 uv, vec2 resolution) {\n    vec2 s = 1. / resolution;\n    float p =  fbm(uv);\n    float h1 = fbm(uv + s * vec2(1., 0));\n    float v1 = fbm(uv + s * vec2(0, 1.));\n\n    vec2 xy = (p - vec2(h1, v1)) * normalStrength;\n    return vec3(xy + .5, 1.);\n}\n\nvec3 constructCampfire(vec2 resolution, vec2 uv, float time) {\n    vec3 normal = bumpMap(uv * vec2(1.0, 0.3) + distortionMovement * time, resolution);\n\n    vec2 displacement = clamp((normal.xy - .5) * distortionStrength, -1., 1.);\n    uv += displacement;\n\n    vec2 uvT = (uv * vec2(1.0, 0.5)) + time * fireMovement;\n    float n = pow(fbm(8.0 * uvT), 1.0);\n\n    float gradient = pow(1.0 - uv.y, 2.0) * 5.;\n    float finalNoise = n * gradient;\n    return finalNoise * vec3(2.*n, 2.*n*n*n, n*n*n*n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 resolution = iResolution.xy;\n    vec2 uv = fragCoord / resolution;\n    vec3 campfire = constructCampfire(resolution, uv, iTime);\n    fragColor = vec4(campfire, 1.0);\n}","name":"Image","description":"","type":"image"}]}