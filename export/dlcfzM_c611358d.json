{"ver":"0.1","info":{"id":"dlcfzM","date":"1701491501","viewed":25,"name":"sharingan_test","username":"EyeOnHand","description":"sharingan effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define roundRadius 0.2\n#define blurFactor 20.0\n#define pi 3.1415926\n\nmat2 rot(in float a) { float c = cos(a); float s = sin(a); return mat2(c, s, -s, c); }\n\nfloat sdfRound2(vec2 pos,float r)\n{\n    return length(pos)-r;\n}\n\nvec3 blur(float sdf)\n{\n    return 1.0-exp(- abs(10.0* sdf))*vec3(1,1,1);\n}\n\nvec3 col_roundlinegrow(float sdf)\n{\n    float s= sign(sdf);\n    float stemp= mod((iTime*1.5)+3.0,2.0*pi)/1.0;\n    if(sdf>0.0+stemp &&sdf<0.01+stemp){\n        float stepV= (1.0-step(0.9 ,sin(sdf*10.0)/2.0));\n    \n        if(stepV>0.0)\n            return stepV*vec3(1,0,1);\n        else\n            return vec3(0.5,0.2,0.2);\n    }else{\n        return vec3(1,1,1);\n    }\n    return vec3(1,1,1);\n}\n\nvec3 col_roundline(float sdf)\n{\n    float s= sign(sdf);\n    if(s<=0.0){\n        float stepV= (1.3-step(0.9 ,sin(sdf*60.0)));\n    \n        if(stepV>0.0)\n            return stepV*vec3(1,0,0);\n        else\n            return vec3(0.5,0.2,0.2);\n    }else{\n        return vec3(1,1,1);\n    }\n}\n\nvec3 col_out(float sdf,vec2 uv)\n{\n    float s= sign(sdf);\n    if(s>=0.0){\n        return s*(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)));\n    }else{\n        return vec3(1,1,1);\n    }\n}\n\nvec3 col_midround(float sdf)\n{\n    return sign(sdf)*vec3(1,1,1);\n}\n\nfloat gouyu(vec2 pos,float angle)\n{\n    float an=radians(angle);\n    pos*= (0.15*sin(iTime*1.5)+1.0)*1.5;\n    pos+=vec2(0.1*sin(an+(0.5*sin(iTime*1.5))),-0.1*cos(an+(0.5*sin(iTime*1.5))));\n    pos*=rot(an+(0.5*sin(iTime*1.5)));\n    float p2=sdfRound2(pos-vec2(roundRadius/2.1,0.0),roundRadius/1.9);\n    float p3=sdfRound2(pos+vec2(roundRadius/2.1,0.0),roundRadius/1.9);\n    float combine=max(sdfRound2(pos,roundRadius),-p2);\n    float halfimage=max(combine,-pos.y);\n    float reuslt=min(halfimage,p3);\n    return  reuslt;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n    float w=iResolution.x/iResolution.y;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col =vec3(1,0.5,0);\n    float sdfr=sdfRound2(p,roundRadius*2.3);\n    float gouyu3=min( min( gouyu(p-vec2(-0.2,-0.1),180.0),gouyu(p-vec2(0.05,0.2),40.0)),gouyu(p-vec2(0.15,-0.15),280.0));\n\n    vec3 col_result=col_roundline(sdfr);\n    \n    col_result*=blur(sdfr);\n    col_result*=col_out(sdfr,uv);\n    col_result*=sign( gouyu3)*vec3(1,1,1);    \n    col_result=mix( col_result,gouyu3*vec3(1,1,1),0.3);\n    col_result*=col_midround(sdfRound2(p,0.06));\n    col_result*=col_roundlinegrow(sdfr);\n    \n    fragColor = vec4(col_result,1.0);\n}","name":"Image","description":"","type":"image"}]}