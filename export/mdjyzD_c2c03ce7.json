{"ver":"0.1","info":{"id":"mdjyzD","date":"1687488075","viewed":72,"name":"Shaded Gyroid Ball","username":"CoffeeImpliesCode","description":"A Gyroid Ball","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf","gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Gyroid Ball by CoffeeImpliesCode, based on template:\n\n// // \"RayMarching starting point\" \n// // by Martijn Steinrucken aka The Art of Code/BigWings - 2020\n// // The MIT License\n// // Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// // Email: countfrolic@gmail.com\n// // Twitter: @The_ArtOfCode\n// // YouTube: youtube.com/TheArtOfCodeIsCool\n// // Facebook: https://www.facebook.com/groups/theartofcode/\n// //\n// // You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 1000\n#define MAX_DIST 100.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n#define S smoothstep\n#define T iTime\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat sdBall(vec3 p, vec3 s, float r) {\n    return distance(p, s) - r;\n}\n\nfloat sdGyroid(vec3 p) {\n    // gyroid is approximated by sin(x)*cos(y) + sin(y)*cos(z) + sin(z)*cos(x) == 0\n    // we use iq's approximation for the distance to a surface described by \n    // an implicit equation:\n    // for a point close enough to the surface, the distance is approximately\n    // |d| >= |f|/|Grad(f)|\n    \n    float f = dot(sin(p), cos(p.yzx));\n    vec3 grad = abs(cos(p)*cos(p.yzx) - sin(p)*sin(p.zxy));\n    return abs(f)/length(grad);\n}\n\nfloat Gyroid(vec3 p, vec3 displacement, float scale, float thickness) {\n    // as sdGyroid is only an approximation for points close to the surface, \n    // we need to give a maximum step size for the case when the gradient vanishes\n    // and the distance falsely approaches infinity, in which case the raymarcher \n    // marches through the surface.\n    float max_step = 1./(10.*scale);\n    return min((sdGyroid((p+displacement)*scale)/scale - thickness), max_step);\n}\n\nfloat GetDist(vec3 p) {\n    float t = iTime * .02;\n    t = mix(10., 100., sin(t)*sin(t));\n    \n    float d;\n    d = Gyroid(p, vec3(0.), t, 0.001);\n    d = max(d, sdBall(p, vec3(0.), 1.));\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) {\n            break;\n        }\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n\n    float s = 1.4;\n    vec3 ro = vec3(0, s, -s);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n    \n    vec3 rd = GetRayDir(uv, ro, vec3(0,0.,0), 1.);\n    vec3 col = vec3(0);\n   \n    float d = RayMarch(ro, rd);\n\n    if(d<MAX_DIST) {\n        vec3 light = normalize(vec3(1, 2, 3));\n    \n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n        \n        // direct shadow\n        d = RayMarch(p+n*.005, light);\n\n        float dif = dot(n, light)*.5+.5;\n        if(d<MAX_DIST) {\n            dif *= .2;\n        }\n        col = vec3(dif);\n    }\n    \n    col = pow(col, vec3(.4545));\t// gamma correction // pretentious way to write 1/2.2 ;)\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}