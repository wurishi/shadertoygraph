{"ver":"0.1","info":{"id":"dsVXWV","date":"1681717698","viewed":51,"name":"fractal triangular pattern","username":"erndmrcn","description":"random fractal shape after some value, it creates a triangular fractal shape\nYou an use your mouse to determine the center of the triangle\n\nAny recommendation, optimization and criticism is appreciated.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","triangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy;\n    \n    float radius = 0.003 * iResolution.y;\n    vec2 center = iMouse.xy - 0.5 * iResolution.xy;\n    \n    vec2 vert1 = vec2(0.5, 0.8) * iResolution.xy;\n    vec2 vert2 = vec2(0.5 - 0.55 / sqrt(3.0), 0.25) * iResolution.xy;\n    vec2 vert3 = vec2(0.5 + 0.55 / sqrt(3.0), 0.25) * iResolution.xy;\n    \n    vec3 rgb = vec3(0.9, 0.9, 0.1);\n    vert1 += center;\n    vert2 += center;\n    vert3 += center;\n    \n    vec4 layer1 = drawCircle(uv, vert1, radius, rgb);\n    layer1 += drawCircle(uv, vert2, radius, rgb);\n    layer1 += drawCircle(uv, vert3, radius, rgb);\n    \n    vert1-=center;    \n    vert2-=center;\n    vert3-=center;\n\n    vec4 layer2 = vec4(vec3(abs(sin(iTime)) * 0.5), 1.0);\n    vec2 lastDrawnPos = vec2(0.5, 0.7) * iResolution.xy;\n    vec4 outputColor = layer1;\n    uv -= center;\n    outputColor += drawCircle(uv, lastDrawnPos, radius, rgb);\n    uv += center;\n    vec2 random = lastDrawnPos;\n\n    samples += abs(sin(iTime));\n    \n    for (int i = 0; i < int(samples); i++)\n    {\n        samples += abs(sin(iTime)) * 1.1;\n        float vertex = rand(random);\n        \n        if (vertex <= 0.33 && vertex >= 0.0)\n        {\n            random = halfway(vert3, random);\n        }\n        else if (vertex <= 0.67 && vertex > 0.33)\n        {\n            random = halfway(vert1, random);\n        }\n        else\n        {\n            random = halfway(vert2, random);\n        }\n        \n        rgb *= (cos((uv.x * uv.y)/.1+vec4(0,1,2,3))+1.).rgb;\n\n        uv -= center;\n        outputColor += drawCircle(uv, random, radius, rgb);\n        uv += center;\n        if (samples > 1000.0) break;\n    }\n    \n    fragColor = mix(layer2, outputColor / samples, outputColor.a);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//if you want to change project resolution, change this variable as well\nconst vec2 resolution = vec2(1280.0, 720.0);\n\nfloat rand(vec2 co)\n{\n   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 halfway(vec2 point1, vec2 point2)\n{\n    vec2 result = point1 + point2;\n    result *= 0.5;\n    result = clamp(result, vec2(0.0), vec2(1.0) * resolution);\n    return result;\n}\n\nvec4 drawCircle(vec2 uv, vec2 pos, float radius, vec3 color)\n{\n    float d = length(pos - uv) - radius;\n    float t = clamp(d, 0.0, 1.0);\n    return vec4(color, 1.0 - t);\n}\n\nfloat samples = 5.0f;","name":"Common","description":"","type":"common"}]}