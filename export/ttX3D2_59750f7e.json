{"ver":"0.1","info":{"id":"ttX3D2","date":"1557693235","viewed":391,"name":"Asensio - Ray","username":"Asensio12","description":"Procedural generated ray.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["ray","electricity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define nCos(x)\t\t(cos(x)+1.0)*0.5\n//#define bell(x)\t\t(1.0/((x*x+1.0)*(x*x+1.0)))\n#define bell(x)\t\t(1.0/((1.0+abs(x))*(1.0+abs(x))))\n#define rayGen(x) \t((abs((fract(x)-0.5)*2.0)-0.5)*2.0)\n\n\n#define ITERATIONS 6\n\n//#define USE_BLUE\n#define USE_RED\n//#define USE_GREEN\n\nfloat rand(in int x) {\n    return fract(sin(0.123456 + 9.87654*float(x))*10000.0);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy-0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // Ray\n    float speed     = 1.5;\n    float amplitude = 0.10;\n    float freq      = 1.0;\n    float parity    = 0.0;\n    float dir       = 1.0;\n    \n    float halo = 0.7 * amplitude;\n    \n    float ray = 0.0;\n    \n    // Generate ray that evolve in X and Time with alternative directions (X+, X-)\n    for (int i = 0; i < ITERATIONS; i++) {\n        ray += amplitude * rayGen(rand(i) + uv.x * (freq + parity) + dir*speed*iTime);\n        \n        amplitude *=  0.5;\n        freq\t  *=  2.0;\n        parity     =  0.5 - parity;\n        dir       *= -1.0;\n    }\n    \n    float intensity = bell(abs(uv.y - ray)/halo);\n    \n    vec4 color = vec4(0.0,0.0,0.0, 1.0);\n    \n    #ifdef USE_RED\n    \tcolor.x = intensity;\n    #endif\n    #ifdef USE_GREEN\n    \tcolor.y = intensity;\n    #endif\n    #ifdef USE_BLUE\n    \tcolor.z = intensity;\n    #endif\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}