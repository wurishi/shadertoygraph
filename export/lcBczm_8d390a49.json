{"ver":"0.1","info":{"id":"lcBczm","date":"1722047988","viewed":37,"name":"ccbFractalShadertest","username":"Personpac","description":"Fractal Shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractalshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Complex Number Functions\nvec2 complexSquare(vec2 z) {\n    float newReal = z.x * z.x - z.y * z.y;\n    float newImaginary = 2.0 * z.x * z.y;\n\n    return vec2(newReal, newImaginary);\n}\n\n//Main Fragment Shader\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 mousePos = (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 mouseDrag = (iMouse.zw * 2.0 - iResolution.xy) / iResolution.y;\n    \n    //Mouse + Camera Control\n    vec2 zoomCoordinates = -mousePos;\n    float zoomSpeed = 2.0;\n    float movementScale = 1.0;\n    float timeZoom = pow(zoomSpeed, - iTime);\n    float dragZoom = length(mouseDrag);\n    vec2 c = vec2((uv)*movementScale) * timeZoom;\n\n    vec2 z0 = vec2(0.0, 0.0);\n    int maxSteps = 50 + int(20.0*iTime);\n    int steps = 0;\n    \n    for (int i = 0; i < maxSteps; i++) {\n    \n        z0 = complexSquare(z0) + c + zoomCoordinates;\n        \n        if (length(z0) > 2.0) {\n            break;\n        }\n        steps++;\n    }\n\n    float stepsCalc = float(steps) / float(maxSteps);\n    \n    vec3 col = vec3(stepsCalc);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}