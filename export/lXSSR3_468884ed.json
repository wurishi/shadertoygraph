{"ver":"0.1","info":{"id":"lXSSR3","date":"1710856369","viewed":117,"name":"All 8x8 1bit sprites","username":"StrongestPassword","description":"Arrows to move, hold shift to move faster. Inspired by \"https://github.com/Michaelangel007/nanofont3x4?tab=readme-ov-file#uber-4x4-texture-atlas-all-permutations\".","likes":4,"published":1,"flags":48,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec2 cell_size = vec2(16.0, 16.0);\nconst uvec2 cell_bits = uvec2(8, 8);\nconst vec2 border_width = vec2(2.0, 2.0);\nconst float scale = 1.0;\n\nconst vec3 col_out_of_range = vec3(0.7, 0.0, 0.7);\nconst vec3 col_border = vec3(0.0, 1.0, 1.0);\nconst vec3 col_cell_white = vec3(1.0, 1.0, 1.0);\nconst vec3 col_cell_black = vec3(0.0, 0.0, 0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offset = texelFetch( iChannel0, ivec2(0,0), 0 ).xy * 10.0;\n    vec2 fragCoord_transformed = fragCoord / scale + offset;\n    vec2 cellCoord = floor(fragCoord_transformed / (cell_size + border_width));\n    uvec2 cellIndex = uvec2(cellCoord);\n    uvec2 cellBitIndex = uvec2(floor(\n        (fragCoord_transformed - cellCoord * (cell_size + border_width))\n            / cell_size * vec2(cell_bits)\n    ));\n    uint bitIndex = cellBitIndex.y * cell_bits.x + cellBitIndex.x;\n    uint bitValue;\n    if (bitIndex < 32u) {\n      bitValue = cellIndex.x & (1u << bitIndex);\n    } else {\n      bitValue = cellIndex.y & (1u << (bitIndex - 32u));\n    }\n\n    vec3 col;\n    if (fragCoord_transformed.x < 0.0 || fragCoord_transformed.y < 0.0) {\n      col = col_out_of_range;\n    } else if (cellBitIndex.x >= cell_bits.x || cellBitIndex.y >= cell_bits.y) {\n      col = col_border;\n    } else if (bitValue > 0u) {\n      col = col_cell_black;\n    } else {\n      col = col_cell_white;\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// https://www.shadertoy.com/view/sdf3RS\n\nconst int KEY_SHIFT = 16;\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\nvec2 handleKeyboard(vec2 offset) {\n    // texelFetch(iChannel1, ivec2(KEY, 0), 0).x will return a value of one if key is pressed, zero if not pressed\n    vec2 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec2(-1, 0);\n    vec2 up = texelFetch(iChannel1, ivec2(KEY_UP,0), 0).x * vec2(0, 1);\n    vec2 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec2(1, 0);\n    vec2 down = texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x * vec2(0, -1);\n    float scale = 1.0 + texelFetch(iChannel1, ivec2(KEY_SHIFT, 0), 0).x * 3.0;\n\n    offset += (left + up + right + down) * scale;\n\n    return offset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Return the offset value from the last frame (zero if it's first frame)\n    vec2 offset = texelFetch( iChannel0, ivec2(0, 0), 0).xy;\n\n    // Pass in the offset of the last frame and return a new offset based on keyboard input\n    offset = handleKeyboard(offset);\n\n    // Store offset in the XY values of every pixel value and pass this data to the \"Image\" shader and the next frame of Buffer A\n    fragColor = vec4(offset, 0, 0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}