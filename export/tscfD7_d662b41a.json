{"ver":"0.1","info":{"id":"tscfD7","date":"1605277443","viewed":268,"name":"Wednesday","username":"levonchic","description":"It is wednesday my dudes\n\nBitmap + simple bg, laggy","likes":8,"published":1,"flags":96,"usePreview":0,"tags":["bitmap","image","meme","frog","wednesday","dudes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XlfXRn","filepath":"https://soundcloud.com/hawestt/it-is-wednesday-my-dudes","previewfilepath":"https://soundcloud.com/hawestt/it-is-wednesday-my-dudes","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MIT License (c) bitrate16\n// Main image, bg + bitmap\n\n#define BG_SPEED 2\n\n#define RAINBOW_COLORS 8\n#define RAINBOW_HEIGHT 4\n#define RAINBOW_WIDTH 16\n\n#define BRIGHT_COLORS\n\nvec4[RAINBOW_COLORS] rainbow = vec4[RAINBOW_COLORS] (\n#ifdef BRIGHT_COLORS\n    // 8\n    vec4(64.  / 255., 164. / 255., 216. / 255., 1.0),\n    vec4(178. / 255., 194. / 255., 37.  / 255., 1.0),\n    vec4(254. / 255., 204. / 255., 47.  / 255., 1.0),\n    vec4(249. / 255., 162. / 255., 40.  / 255., 1.0),\n    vec4(246. / 255., 98.  / 255., 31.  / 255., 1.0),\n    vec4(219. / 255., 56.  / 255., 56.  / 255., 1.0),\n    vec4(238. / 255., 101. / 255., 122. / 255., 1.0),\n    vec4(163. / 255., 99.  / 255., 217. / 255., 1.0)\n#else\n    // 8\n    vec4(255. / 255., 171. / 255., 171. / 255., 1.0),\n    vec4(255. / 255., 218. / 255., 171. / 255., 1.0),\n    vec4(221. / 255., 255. / 255., 171. / 255., 1.0),\n    vec4(171. / 255., 228. / 255., 255. / 255., 1.0),\n    vec4(217. / 255., 171. / 255., 255. / 255., 1.0),\n    vec4(171. / 255., 228. / 255., 255. / 255., 1.0),\n    vec4(221. / 255., 255. / 255., 171. / 255., 1.0),\n    vec4(255. / 255., 218. / 255., 171. / 255., 1.0)\n#endif\n);\n\nvec4 bg(ivec2 frag) {\n    if (((frag.x - iFrame * BG_SPEED) / RAINBOW_WIDTH) % 2 == 0)\n        frag.y += RAINBOW_HEIGHT / 2;\n    return rainbow[(frag.y / RAINBOW_HEIGHT /**/) % RAINBOW_COLORS];\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\tivec2 frag = ivec2(fragCoord);\n    \n    fragColor = bg(frag / 4);\n    \n    vec4 froge = texture(iChannel0, uv);\n    fragColor = fragColor * (1.0 - froge.a) + froge * froge.a;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// MIT License (c) bitrate16\n// Animated texture, no buffering\n\n// ! - Prevent compile entire shader and freeze\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ivec2 frag = ivec2(fragCoord);\n    \n    fragColor = vec4(0.0);\n    if (frag.x >= WIDTH || frag.y >= HEIGHT)\n        return;\n    else {\n        int frame = iFrame;\n        if ((frame / FRAMES) % 2 == 0)\n        \tframe = frame % FRAMES;\n        else\n        \tframe = FRAMES - frame % FRAMES - 1;\n            \n\n        int px = frag.y * WIDTH + frag.x;\n        int pind = px / POINTS4INT + frame * INTPERFRAME;\n        int bind = px % POINTS4INT;\n\t\t\n        int colind = (matrix[pind] >> (bind * COLORBITS)) & COLORMASK;\n        \n        fragColor = palette[colind];\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// MIT License (c) bitrate16\n#define WIDTH 40\n#define HEIGHT 32\n#define COLORS 16\n#define COLORBITS 4\n#define COLORMASK 15\n#define POINTS4INT 8\n#define INTPERFRAME 160\n#define FRAMES 1\n\nvec4[16] palette = vec4[16] (\n\tvec4(0.6901960784313725, 0.5843137254901961, 0.3764705882352941, 1.0),\n\tvec4(0.8627450980392157, 0.8117647058823529, 0.6627450980392157, 1.0),\n\tvec4(0.788235294117647, 0.6705882352941176, 0.4392156862745098, 1.0),\n\tvec4(0.7294117647058823, 0.6705882352941176, 0.5215686274509804, 1.0),\n\tvec4(0.7725490196078432, 0.6745098039215687, 0.5176470588235295, 1.0),\n\tvec4(0.5882352941176471, 0.43529411764705883, 0.17647058823529413, 1.0),\n\tvec4(0.6274509803921569, 0.4745098039215686, 0.2823529411764706, 1.0),\n\tvec4(0.9019607843137255, 0.8784313725490196, 0.7647058823529411, 1.0),\n\tvec4(0.6196078431372549, 0.5372549019607843, 0.24313725490196078, 1.0),\n\tvec4(0.8196078431372549, 0.7529411764705882, 0.49019607843137253, 1.0),\n\tvec4(0.7372549019607844, 0.7647058823529411, 0.5725490196078431, 1.0),\n\tvec4(0.4196078431372549, 0.41568627450980394, 0.2823529411764706, 1.0),\n\tvec4(0.403921568627451, 0.396078431372549, 0.24313725490196078, 1.0),\n\tvec4(0.0, 0.0, 0.0, 0.0),\n\tvec4(0.8470588235294118, 0.792156862745098, 0.6588235294117647, 1.0),\n\tvec4(0.796078431372549, 0.7176470588235294, 0.5529411764705883, 1.0)\n);\n\nint[160] matrix = int[160] (\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xddddd1dd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xfddddddd,\n\t0xddddd1dd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddd2204,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdd00000d,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xfdddddd,\n\t0xdd060020,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xd06000dd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0x5008dd,\n\t0xdddddddd,\n\t0xddd1dddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0x6600ddd,\n\t0xdddddddd,\n\t0xddd1dddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xddd,\n\t0xdddddddd,\n\t0xddd1dddd,\n\t0x11dddddd,\n\t0x3333ff,\n\t0x5550,\n\t0xddddddd3,\n\t0xdd21d11,\n\t0x111edddd,\n\t0x33f111,\n\t0x4055500,\n\t0xdddddddf,\n\t0x506201dd,\n\t0x222221dd,\n\t0x22222222,\n\t0x2f050000,\n\t0xddddddf2,\n\t0x50222ddd,\n\t0x292,\n\t0x22222000,\n\t0x22000022,\n\t0xddddf1f0,\n\t0x20221ddd,\n\t0x2f,\n\t0x22200000,\n\t0x22,\n\t0xddd1f120,\n\t0xf002dddd,\n\t0x0,\n\t0x20020000,\n\t0x22ff,\n\t0xdd1fff20,\n\t0xf100dddd,\n\t0x2,\n\t0x0,\n\t0x2000,\n\t0xd11f2220,\n\t0xf12ddddd,\n\t0x3,\n\t0x320000,\n\t0x60000000,\n\t0xd1f22000,\n\t0xf1eddddd,\n\t0xf00f3,\n\t0x43000,\n\t0x60030000,\n\t0xd1ff0000,\n\t0x11dddddd,\n\t0x101ee00f,\n\t0x1fff3f01,\n\t0xfffe1e,\n\t0x11f20000,\n\t0xe1dddddd,\n\t0xee050f,\n\t0x111eee0b,\n\t0xf11f4e,\n\t0x1ff22000,\n\t0xe7dddddd,\n\t0x11ee0891,\n\t0xe1eee111,\n\t0xfee11,\n\t0x11402000,\n\t0x1ddddddd,\n\t0xeee1a1ce,\n\t0xeee1e11e,\n\t0x4f1e,\n\t0x7f224200,\n\t0xdddddddd,\n\t0x1eeeeeee,\n\t0xeeee11ee,\n\t0xfff03fff,\n\t0xdf222234,\n\t0xdddddddd,\n\t0x1eeeee17,\n\t0x1ee11111,\n\t0xffff1fee,\n\t0xdf4424f1,\n\t0xdddddddd,\n\t0x11ee111d,\n\t0xeee11111,\n\t0xe1111e11,\n\t0xde4422fe,\n\t0xdddddddd,\n\t0x1eeee1dd,\n\t0x11111111,\n\t0xe1711e11,\n\t0xd7f4fff1,\n\t0xdddddddd,\n\t0xeeef1ddd,\n\t0xe111eee1,\n\t0x1111ee11,\n\t0xdd1fff11,\n\t0xdddddddd,\n\t0xeeff1ddd,\n\t0x111eeeee,\n\t0x111eee1e,\n\t0xddde111e,\n\t0xdddddddd,\n\t0xe1eddddd,\n\t0x11eeeeee,\n\t0x11ee1e11,\n\t0xddddd111,\n\t0xdddddddd,\n\t0xe1dddddd,\n\t0x1eeeeeee,\n\t0x1111e111,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xeeeeeeee,\n\t0xddd11111,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0xdddddddd,\n\t0x11111ddd,\n\t0xddddddd1,\n\t0xdddddddd\n);","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// MIT License (c) bitrate16\n#define SCALE 0.2\n// Tail effect\n\n#define RAINBOW_COLORS 8\n\nvec4[RAINBOW_COLORS] rainbow = vec4[RAINBOW_COLORS] (\n    vec4(255. / 255., 171. / 255., 171. / 255., 0.94),\n    vec4(255. / 255., 218. / 255., 171. / 255., 0.94),\n    vec4(221. / 255., 255. / 255., 171. / 255., 0.94),\n    vec4(171. / 255., 228. / 255., 255. / 255., 0.94),\n    vec4(217. / 255., 171. / 255., 255. / 255., 0.94),\n    vec4(171. / 255., 228. / 255., 255. / 255., 0.94),\n    vec4(221. / 255., 255. / 255., 171. / 255., 0.94),\n    vec4(255. / 255., 218. / 255., 171. / 255., 0.94)\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    // Angle & translate\n    float a = float(iFrame % 50) * 3.14 * 0.04;\n    float transsin = sin(a);\n    float transcos = cos(a);\n    vec2 froga = (fragCoord - iResolution.xy * 0.5 + (1.0 / SCALE) * 0.5 * vec2(WIDTH, HEIGHT) + 16.0 * vec2(transsin, transsin * transcos)) * SCALE;\n    // Change angle\n    a = a * 0.5 + 1.;\n    a = sin(a) * cos(a) * 0.25;\n    // Rotate\n    float s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\tfroga = m * froga;\n    vec4 froge = texelFetch(iChannel0, ivec2(froga), 0);\n    fragColor = texture(iChannel1, uv - vec2(0.02, 0.0)) * (1.0 - froge.a) * rainbow[(iFrame / 10) % RAINBOW_COLORS] + froge * froge.a;\n}","name":"Buffer B","description":"","type":"buffer"}]}