{"ver":"0.1","info":{"id":"7sGXRm","date":"1634408279","viewed":192,"name":"Meromorphic functions","username":"rarora7777","description":"Based on https://twitter.com/keenanisalive/status/1448011475231117315/photo/1","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["patterns","complex","polynomial","meromorphic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cmag2(vec2 a)\n{\n    return a[0] * a[0] + a[1] * a[1];\n}\n\nfloat cmag(vec2 a)\n{\n    return sqrt(cmag2(a));\n}\n\nfloat carg(vec2 a)\n{\n    return atan(a[1], a[0]);\n}\n\nvec2 cmul(vec2 a, vec2 b)\n{\n    vec2 res;\n    float a0b0 = a[0] * b[0];\n    float a1b1 = a[1] * b[1];\n    res[0] = a0b0 - a1b1;\n    res[1] = (a[0] + a[1]) * (b[0] + b[1]) - a0b0 - a1b1;\n    return res;\n}\n\nvec2 cdiv(vec2 a, vec2 b)\n{\n    vec2 res;\n    res[0] = a[0] * b[0] + a[1] * b[1];\n    res[1] = a[1] * b[0] - a[0] * b[1];\n    float b2 = cmag2(b);\n    return res / b2;\n}\n\nfloat clogre(vec2 a)\n{\n    return log(cmag(a));\n}\n\nfloat clogim(vec2 a)\n{\n    return atan(a[1], a[0]);\n}\n\nvec2 clog(vec2 a)\n{\n    return vec2(clogre(a), clogim(a));\n}\n\nvec2 cpow(vec2 a, int n)\n{\n    vec2 res = vec2(1, 0);\n    \n    if (n == 0)\n        return res;\n    else if (n < 0)\n    {\n        if (cmag2(a) < 1e-6)\n            return vec2(0, 0);\n        a = cdiv(res, a);\n        n = -n;\n    }\n\n    \n    while (n > 1)\n    {\n        if (n % 2 == 0)\n        {\n            a = cmul(a, a);\n            n = n / 2;\n        }\n        else\n        {\n            res = cmul(a, res);\n            a = cmul(a, a);\n            n = (n - 1) / 2;\n        }\n    }\n    return cmul(a, res);\n}\n\nvec2 cpolyeval(vec2 z, vec2 coeff[10], int k)\n{\n    vec2 res = vec2(0.0f, 0.0f);\n    for (int i = 0; i < k; ++i)\n    {\n        res += cmul(coeff[i], cpow(z, i));\n    }\n\n    return res;\n}\n\nfloat random(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 z = 2.0f*uv - vec2(1.0f, 1.0f);\n\n    vec2 p = vec2(0,0);\n    if (iMouse.w < 0.0f)\n        p = 2.0f*iMouse.xy/iResolution.xy - vec2(1.0f,1.0f);\n    \n    float R = 0.9f;\n    vec3 _ColorA = vec3(1.0f, 0.0f, 0.0f);\n    vec3 _ColorB = vec3(0.0f, 1.0f, 1.0f);\n    const float PI = 3.14159265f;\n    float t = 2.0f * PI * iTime / 10.0f;\n\n\n    vec2 q = p + vec2(R * cos(t), R * sin(t));\n\n\n\n    int k = 6;\n    vec2 coeffa[10];\n    vec2 coeffb[10];\n    vec2 seed;\n    float num1, num2, num3, num4;\n\n    for (int i = 0; i < k; ++i)\n    {\n        coeffa[i] = vec2(0, 0);\n        coeffb[i] = vec2(0, 0);\n    }\n\n    coeffa[0] = -p;\n    coeffb[0] = -q;\n    coeffa[1] = vec2(1, 0);\n    coeffb[1] = vec2(1, 0);\n\n    for (int i = 2; i < k; ++i)\n    {\n        seed[0] = seed[1] = 4.0f * float(i);\n        num1 = 10.0f*random(seed);\n        seed[0] = seed[1] = 4.0f * float(i) + 1.0f;\n        num2 = random(seed);\n        seed[0] = seed[1] = 4.0f * float(i) + 2.0f;\n        num3 = 10.0f * random(seed);\n        seed[0] = seed[1] = 4.0f * float(i) + 3.0f;\n        num4 = random(seed);\n        coeffa[i] = vec2(num2 * cos(num1 * t), num2 * sin(num1 * t));\n        coeffb[i] = vec2(num4 * cos(num3 * t), num4 * sin(num3 * t));\n    }\n\n\n    vec2 num;\n    vec2 denom;\n\n    num = cpolyeval(z, coeffa, k);\n    denom = cpolyeval(z, coeffb, k);\n\n    float alpha;\n\n    if (cmag2(denom) < 1e-6f)\n        alpha = 0.0f;\n    else\n        alpha = clogim(cdiv(num, denom)) / PI;\n\n    vec3 neutral = vec3(0, 0, 0);\n    // Albedo comes from a texture tinted by color\n    //fixed alpha = sin(_Time[1]);\n    vec3 color;\n\n    if (alpha < 0.0)\n        color = mix(neutral, _ColorA, -alpha);\n    else\n        color = mix(neutral, _ColorB, alpha);\n\n    if (cmag2(denom) < 1e-6f)\n        color = vec3(1,1,1);\n\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}