{"ver":"0.1","info":{"id":"WtyyDD","date":"1610991846","viewed":282,"name":"Game of life in three colors","username":"Fjante","description":"three-dimensional in the sense of 3 colors in 2 dimensions. \n\nSorry to be clear: \nHold enter to run game of life. \nSpace will reset the frame to black. \nAll colors will roof to 1. This was a decision to make it easier to distinguish the color changes.","likes":0,"published":3,"flags":48,"usePreview":0,"tags":["keyboard","buffer","conway","pixelated","gol"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Press space to clear frame\n//Hold enter to run game of life\n\n\n//Pixel size\nfloat size = 0.005;\n//Run game of life on red pixels\nbool useX = true;\n//Run game of life on green pixels\nbool useY = true;\n//Run game of life on blue pixels\nbool useZ = true;\n//Game of life update speed. Lower is faster.\nfloat speed = 25.;\n\nfloat ratio() \n{\n    return iResolution.x / iResolution.y;\n}\n\nfloat newfract(float size, float n) \n{\n    return floor(n * (1./(size*2.))) * (size*2.) + size;\n}\n\nvec4 clamp4(float low, float high, vec4 value)\n{\n    float x = min(high,max(low, value.x)),\n          y = min(high,max(low, value.y)),\n          z = min(high,max(low, value.z)),\n          w = min(high,max(low, value.w));\n    return vec4(x, y, z, w);\n\n}\n\nbool shouldLive(float current, float n)\n{\n    //alive\n    if(current > 0.1)\n    {\n        if(n * 8. < 2.1)\n            return false;\n    }\n    //dead\n    else\n    {\n        if(n > 2.1 && n < 3.1)\n            return true;\n    }\n    if(n * 8. > 2.1 && n * 8. < 3.1)\n        return true;\n    \n    return false;\n}\n\nvec4 neighbors(float size, vec2 uv)\n{\n    vec2 s = vec2(size, size * ratio());\n    vec4 color = vec4(0.);\n    vec4 c1 = clamp4(0., 1., texture(iChannel0, uv + vec2(-s.x, s.y)) * 8.);\n    vec4 c2 = clamp4(0., 1., texture(iChannel0, uv + vec2(0., s.y)) * 8.);\n    vec4 c3 = clamp4(0., 1., texture(iChannel0, uv + vec2(s.x, s.y)) * 8.);\n    vec4 c4 = clamp4(0., 1., texture(iChannel0, uv + vec2(-s.x, 0.)) * 8.);\n    vec4 c5 = clamp4(0., 1., texture(iChannel0, uv + vec2(s.x, 0.)) * 8.);\n    vec4 c6 = clamp4(0., 1., texture(iChannel0, uv + vec2(-s.x, -s.y)) * 8.);\n    vec4 c7 = clamp4(0., 1., texture(iChannel0, uv + vec2(0., -s.y)) * 8.);\n    vec4 c8 = clamp4(0., 1., texture(iChannel0, uv + vec2(s.x, -s.y)) * 8.);\n    color += c1;\n    color += c2;\n    color += c3;\n    color += c4;\n    color += c5;\n    color += c6;\n    color += c7;\n    color += c8;\n    \n    return color / 8.;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    //Mouse position normalized and uv normalized.\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 muv = iMouse.xy / iResolution.xy;\n    \n    //Floor the uv's to steps of size\n    muv.x = newfract(size, muv.x);\n    muv.y = newfract(size*ratio(), muv.y);\n    uv.x = newfract(size, uv.x);\n    uv.y = newfract(size*ratio(), uv.y);\n\n    //To save color to buffer\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    // Time varying pixel color\n    if(abs(muv.x - uv.x) < size && abs(muv.y - uv.y) < size * ratio() && iMouse.z > 0.)\n        col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    //Setting the paint color to a changing rainbow color\n    fragColor = vec4(col,1.0);\n    \n    \n    //If space is pressed, frame is cleared to black\n    if(texelFetch(iChannel1, ivec2(32, 0), 0).x > 0. )\n        fragColor = vec4(0.);\n        \n    //While enter is pressed, game of life is running.\n    if(texelFetch(iChannel1, ivec2(13, 0), 0).x > 0. && int(mod(float(iFrame), speed)) == 0) \n    {\n        vec4 n = neighbors(size, uv);\n        vec4 c = texture(iChannel0, uv);\n        bool x = shouldLive(c.x, n.x);\n        bool y = shouldLive(c.y, n.y);\n        bool z = shouldLive(c.z, n.z);\n        if(x && useX)\n            c.x = 1.;\n        else\n            c.x = 0.;\n        if(y && useY)\n            c.y = 1.;\n        else\n            c.y = 0.;\n        if(z && useZ)\n            c.z = 1.;\n        else\n            c.z = 0.;\n        fragColor = c;\n    }\n\n    \n}\n\n\n\n\n","name":"Buffer A","description":"","type":"buffer"}]}