{"ver":"0.1","info":{"id":"Mf33DN","date":"1711699691","viewed":105,"name":"noise_flow_v2","username":"yufengjie","description":"可以重叠线段的flow，here is my last version：https://www.shadertoy.com/view/Xfc3WH","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["noise","sdf","flow","segement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define resolution 16.\n#define lineWidth 0.12\n#define lineLen 3.\n\nfloat PI = 3.1415926;\nfloat pix;\n\n// p屏幕坐标，a起点，b终点\nfloat sdSegment(in vec2 p, in vec2 a, in vec2 b) {\n  vec2 pa = p - a, ba = b - a;\n  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  return length(pa - ba * h);\n}\nfloat plotLine(in vec2 uv,in vec2 start,in vec2 end) {\n  float l = sdSegment(uv, start, end) - lineWidth;\n  \n  return smoothstep(3. * pix, 0., l );\n}\n\nfloat plotPoint(vec2 uv, vec2 pos) {\n    float r = .2;\n    float point = distance(uv, pos) - r;\n    return smoothstep(0.1, 0., point);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  \n  vec2 uv = fragCoord.xy / iResolution.y * resolution;\n  pix = 1. / iResolution.y * resolution;\n\n  vec2 uvi = floor(uv);\n  vec2 uvf = fract(uv);\n  vec3 fin_c = vec3(0.);\n\n  \n  float range = ceil(lineLen);\n\n  if(false) {\n      float noiseVal = noise(uvi / resolution + iTime) * 0.5 + 0.5;\n      float angle = noiseVal * PI * 2.;\n      vec2 start = vec2(0.5) + uvi;\n      vec2 end = vec2(cos(angle) * lineLen, sin(angle) * lineLen) + start;\n      float line = plotLine(uv, start, end);\n      vec3 color = palette(noiseVal);\n      fin_c += color * line;\n  } else {\n      for(float x = -range; x <= range; x += 1.) {\n          for(float y = -range; y <= range; y += 1.) {\n          \n              vec2 start = vec2(0.5) + uvi + vec2(x,y);\n              \n              vec2 p = (uvi + vec2(x,y))/resolution + iTime;\n              \n              float noiseVal = noise(p);\n              float angle = noiseVal * PI * 4.;\n              vec3 color = palette(noiseVal+iTime);\n              float len = (noiseVal * 0.9 + 0.1) * lineLen;\n\n              vec2 end = vec2(cos(angle) * len, sin(angle) * len) + start;\n              float line = plotLine(uv, start, end);\n\n              fin_c += color * line;\n              //fin_c = mix(fin_c, color, line);\n              //fin_c = max(fin_c, color*line);\n          }\n      }\n  \n  }\n\n  \n  fragColor = vec4(fin_c, 1.);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// https://www.shadertoy.com/view/4dS3Wd\nfloat hash(float p) {\n  p = fract(p * 0.011);\n  p *= p + 7.5;\n  p *= p + p;\n  return fract(p);\n}\nfloat hash(vec2 p) {\n  vec3 p3 = fract(vec3(p.xyx) * 0.13);\n  p3 += dot(p3, p3.yzx + 3.333);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise(vec2 x) {\n  vec2 i = floor(x);\n  vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n  float a = hash(i);\n  float b = hash(i + vec2(1.0, 0.0));\n  float c = hash(i + vec2(0.0, 1.0));\n  float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n  vec2 u = f * f * (3.0 - 2.0 * f);\n  return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\nfloat noise(vec3 x) {\n  const vec3 step = vec3(110, 241, 171);\n\n  vec3 i = floor(x);\n  vec3 f = fract(x);\n\n    // For performance, compute the base input to a 1D hash from the integer part of the argument and the \n    // incremental change to the 1D based on the 3D -> 1D wrapping\n  float n = dot(i, step);\n\n  vec3 u = f * f * (3.0 - 2.0 * f);\n  return mix(mix(mix(hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x), mix(hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y), mix(mix(hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x), mix(hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\nvec3 palette(float t) {\n  vec3 a = vec3(0.731, 1.098, 0.192);\n  vec3 b = vec3(0.358, 1.090, 0.657);\n  vec3 c = vec3(1.077, 0.360, 0.328);\n  vec3 d = vec3(0.965, 2.265, 0.837);\n  return a + b * cos(6.28318 * (c * t + d));\n}\n\nvec3 palette2(float t) {\n    vec3 c1 = vec3(0.909,0.262,0.576);\n    vec3 c2 = vec3(0.423,0.361,0.906);\n    return mix(c1, c2, t);\n}","name":"Common","description":"","type":"common"}]}