{"ver":"0.1","info":{"id":"Ndf3WH","date":"1615839351","viewed":112,"name":"Box - interaction ","username":"Bushra","description":"Apply box-interaction technique to draw two boxes. Find out what happens when two box's intersect each other. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["boxinteraction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Ray-Box intersection, by convertig the ray to the local space of the box.\n//\n// Form https://iquilezles.org/articles/intersectors\n//\n// If this was used to raytace many equally oriented boxes (say you are traversing\n// a BVH), then the transformations in line 34 and 35 could be skipped, as well as\n// the normal computation in line 50. One over the ray direction is usually accessible\n// as well in raytracers, so the division would go away in real world applications.\n\n\n// Other intersectors: https://iquilezles.org/articles/intersectors\n//\n// Box:             https://www.shadertoy.com/view/ld23DV\n\n// Other Box functions (https://iquilezles.org/articles/boxfunctions)\n//\n// Intersection:     https://www.shadertoy.com/view/ld23DV\n\n// https://iquilezles.org/articles/boxfunctions\nvec2 iBox( in vec3 ro, in vec3 rd, in mat4 txx, in mat4 txi, in vec3 rad ) \n{\n    // convert from ray to box space\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n\t// ray-box intersection in box space\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\t\n\tif( tN > tF || tF < 0.0) return vec2(-1.0);\n\n\tvec3 nor = -sign(rdd)*step(t1.yzx,t1.xyz)*step(t1.zxy,t1.xyz);\n\n    // convert to ray space\n\t\n\tnor = (txi * vec4(nor,0.0)).xyz;\n\n\treturn vec2( tN, tF );\n}\n\n\n/*\n// https://iquilezles.org/articles/boxfunctions\nfloat sBox( in vec3 ro, in vec3 rd, in mat4 txx, in vec3 rad ) \n{\n\tvec3 rdd = (txx*vec4(rd,0.0)).xyz;\n\tvec3 roo = (txx*vec4(ro,1.0)).xyz;\n\n    vec3 m = 1.0/rdd;\n    vec3 n = m*roo;\n    vec3 k = abs(m)*rad;\n\t\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n\n\tfloat tN = max( max( t1.x, t1.y ), t1.z );\n\tfloat tF = min( min( t2.x, t2.y ), t2.z );\n\tif( tN > tF || tF < 0.0) return -1.0;\n\t\n\treturn tN;\n}\n*/\n\n//-----------------------------------------------------------------------------------------\n\nmat4 rotationAxisAngle( vec3 v, float angle )\n{\n    float s = sin( angle );\n    float c = cos( angle );\n    float ic = 1.0 - c;\n\n    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,\n                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,\n                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,\n\t\t\t     0.0,                0.0,                0.0,                1.0 );\n}\n\nmat4 translate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*gl_FragCoord.xy) / iResolution.y; // iResolution, viewport resolution (in pixels)\n\n    // camera movement\t\n\tfloat an = iTime;      \n\tvec3 ro = vec3( 2.5*cos(an), 1.0, 2.5*sin(an) );\n    vec3 ta = vec3( 0.0, 0.80, 0.0 );                    //LookAt position\n\n    // camera matrix\n    vec3 ww = normalize(ta - ro );                       //calculate forward\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) ); //calculate right; right = forward cross y\n    vec3 vv = normalize( cross(uu,ww));                  //calculate up; up = forward cross right \n\n    float zoom = 1.80;      //zoom the camera\n\t// create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + zoom*ww );\n\n    // rotate and translate box\t1: proxy geometry\n    float angle = 0.0;\n\tmat4 rot = rotationAxisAngle( normalize(vec3(1.0,1.0,0.0)), angle );\n\tmat4 tra = translate( 0.0, 1.0 , 0.0 );\n\tmat4 txi = tra * rot; \n\tmat4 txx = inverse( txi );\n    \n\n    // rotate and translate box 2: clip geometry\n    float trans = 0.80 * iTime;\n    float angle_clip = 0.0;\n\tmat4 rot_clip = rotationAxisAngle( normalize(vec3(1.0,1.0,0.0)), angle_clip );\n\tmat4 tra_clip = translate( 1. * cos(trans), 1.0 , 0.0 );\n    //mat4 tra_clip = translate( 0.50, 1.0 , 0.0 );\n\tmat4 txi_clip = tra_clip * rot_clip; \n\tmat4 txx_clip = inverse( txi_clip );\n    \n    // raytrace\n\tfloat tmin = 10000.0;\n\tvec3  nor = vec3(0.0);\n\tvec3  pos = vec3(0.0);\n\t\n\t\n\t// raytrace box\n\tvec3 box_proxy = vec3(0.35,0.35,0.35) ;\n    vec3 box_clip = vec3(0.2,0.2,0.2) ;\n    \n    float occ = 1.0;\n    vec3  mate;\n\n\tvec2 res_proxy = iBox( ro, rd, txx, txi, box_proxy);          //function return near and far distance \n    vec2 res_clip = iBox( ro, rd, txx_clip, txi_clip, box_clip);  //function return near and far distance \n    \n    //claculating the intersection position of two boxes (clip and proxy geometry)\n    float t_start = max(res_proxy.x, res_clip.x);\n    float t_end = min(res_proxy.x, res_clip.x);        \n    \n    vec3 col;\n    \n    \n    if( res_proxy.x>0.0 && res_proxy.x<tmin && res_clip.x>0.0 && res_clip.x<tmin)\n    {\n        \n        //here ray is starting from the proxy near point and exit in clip far point\n        // if  proxy near distance is less than clip far distance\n        if(res_proxy.x < res_clip.y)\n        {           \n            tmin = res_proxy.x; \n            mate = vec3(1.0,1.0,0.0); //yellow, intersection position            \n         }  \n             \n        \n        /*\n        else if (res_clip.x < res_clip.y)\n        {\n            tmin = res_clip.x; \n            mate = vec3(1.0,1.0,0.0); //yellow, intersection position\n        } */\n    } \n    \n    //clip\n    if( res_clip.x>0.0 && res_clip.x<tmin  )\n    {\n        tmin = res_clip.x; \n        //nor = res_2.yzw;\n\t\t\n        // material\n        mate = vec3(0.0,1.0,0.0); //green, clip geometry\n     }\n        \n     //proxy\n     if( res_proxy.x>0.0 && res_proxy.x<tmin)\n     {\n        tmin = res_proxy.x; \n        //nor = res.yzw;\n\n        // material\n        mate = vec3(1.0,0.0,0.0); //red, proxy geometry  \n     }\n     \n       \n    col = vec3(1.0); //background color    \t\n       \n   \n    if( tmin<100.0 )\n    {      \n       col = mate;\n    }\n    \n    //discard non-interaction part of two boxes(clip and proxy geometry)\n    /*\n    if (t_end <t_start)\n    {\n      //discard;\n      \n    }    \n    */\n        \n    \n\t//col = sqrt( col ); \n\n\tfragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}