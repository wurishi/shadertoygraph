{"ver":"0.1","info":{"id":"Xl33Ds","date":"1472501028","viewed":407,"name":"Space spheres","username":"Shadron","description":"This shader has been created with Shadron and used as a demo in its trailer.\nhttps://www.arteryengine.com/shadron/","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d","raytracing","raymarching","raycasting","sphere","shadron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Author: Viktor Chlumsk√Ω\n// Created with SHADRON\n// www.shadron.info\n\n// LIBRARY FILES\n\n// #include <math_constants>\n#define PI 3.1415926535897932384626433832795\n\n// #include <affine_transform>\nvec3 rotateY(vec3 p, float a) {\n\treturn vec3(\n\t\tcos(a)*p.x+sin(a)*p.z,\n\t\tp.y,\n\t\t-sin(a)*p.x+cos(a)*p.z\n\t);\n}\n\n// #include <perlin>\n//\n// Description : Array and textureless GLSL 2D/3D/4D simplex \n//               noise functions.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nfloat perlin_mod289(float x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 perlin_mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 perlin_mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 perlin_mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nfloat perlin_permute(float x) {\n     return perlin_mod289(((x*34.0)+1.0)*x);\n}\n\nvec3 perlin_permute(vec3 x) {\n  return perlin_mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 perlin_permute(vec4 x) {\n     return perlin_mod289(((x*34.0)+1.0)*x);\n}\n\nfloat perlin_taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 perlin_taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 perlin_grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n  }\n\nfloat perlinNoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = perlin_mod289(i); \n  vec4 p = perlin_permute( perlin_permute( perlin_permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = perlin_taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat perlinNoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\n                        0.276393202250021,  // 2 * G4\n                        0.414589803375032,  // 3 * G4\n                       -0.447213595499958); // -1 + 4 * G4\n\n// First corner\n  vec4 i  = floor(v + dot(v, vec4(0.309016994374947451)) ); // (sqrt(5) - 1)/4\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n// Permutations\n  i = perlin_mod289(i); \n  float j0 = perlin_permute( perlin_permute( perlin_permute( perlin_permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = perlin_permute( perlin_permute( perlin_permute( perlin_permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = perlin_grad4(j0,   ip);\n  vec4 p1 = perlin_grad4(j1.x, ip);\n  vec4 p2 = perlin_grad4(j1.y, ip);\n  vec4 p3 = perlin_grad4(j1.z, ip);\n  vec4 p4 = perlin_grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = perlin_taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= perlin_taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\n// #include <worley>\n// Cellular noise (\"Worley noise\") in 2D in GLSL.\n// Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n// This code is released under the conditions of the MIT license.\n// See LICENSE file for details.\n// https://github.com/stegu/webgl-noise\n// Modulo 289 without a division (only multiplications)\nvec3 worley_mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 worley_mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\n// Modulo 7 without a division\nvec3 worley_mod7(vec3 x) {\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\n}\n\n// Permutation polynomial: (34x^2 + x) mod 289\nvec3 worley_permute(vec3 x) {\n  return worley_mod289((34.0 * x + 1.0) * x);\n}\n\n// Cellular noise, returning F1 and F2 in a vec2.\n// 3x3x3 search region for good F2 everywhere, but a lot\n// slower than the 2x2x2 version.\n// The code below is a bit scary even to its author,\n// but it has at least half decent performance on a\n// modern GPU. In any case, it beats any software\n// implementation of Worley noise hands down.\nvec2 worleyNoise(vec3 P) {\n\tfloat K = 0.142857142857; // 1/7\n\tfloat Ko = 0.428571428571; // 1/2-K/2\n\tfloat K2 = 0.020408163265306; // 1/(7*7)\n\tfloat Kz = 0.166666666667; // 1/6\n\tfloat Kzo = 0.416666666667; // 1/2-1/6*2\n\tfloat jitter = 1.0; // smaller jitter gives more regular pattern\n\n\tvec3 Pi = worley_mod289(floor(P));\n \tvec3 Pf = fract(P) - 0.5;\n\n\tvec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);\n\tvec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);\n\n\tvec3 p = worley_permute(Pi.x + vec3(-1.0, 0.0, 1.0));\n\tvec3 p1 = worley_permute(p + Pi.y - 1.0);\n\tvec3 p2 = worley_permute(p + Pi.y);\n\tvec3 p3 = worley_permute(p + Pi.y + 1.0);\n\n\tvec3 p11 = worley_permute(p1 + Pi.z - 1.0);\n\tvec3 p12 = worley_permute(p1 + Pi.z);\n\tvec3 p13 = worley_permute(p1 + Pi.z + 1.0);\n\n\tvec3 p21 = worley_permute(p2 + Pi.z - 1.0);\n\tvec3 p22 = worley_permute(p2 + Pi.z);\n\tvec3 p23 = worley_permute(p2 + Pi.z + 1.0);\n\n\tvec3 p31 = worley_permute(p3 + Pi.z - 1.0);\n\tvec3 p32 = worley_permute(p3 + Pi.z);\n\tvec3 p33 = worley_permute(p3 + Pi.z + 1.0);\n\n\tvec3 ox11 = fract(p11*K) - Ko;\n\tvec3 oy11 = worley_mod7(floor(p11*K))*K - Ko;\n\tvec3 oz11 = floor(p11*K2)*Kz - Kzo; // p11 < 289 guaranteed\n\n\tvec3 ox12 = fract(p12*K) - Ko;\n\tvec3 oy12 = worley_mod7(floor(p12*K))*K - Ko;\n\tvec3 oz12 = floor(p12*K2)*Kz - Kzo;\n\n\tvec3 ox13 = fract(p13*K) - Ko;\n\tvec3 oy13 = worley_mod7(floor(p13*K))*K - Ko;\n\tvec3 oz13 = floor(p13*K2)*Kz - Kzo;\n\n\tvec3 ox21 = fract(p21*K) - Ko;\n\tvec3 oy21 = worley_mod7(floor(p21*K))*K - Ko;\n\tvec3 oz21 = floor(p21*K2)*Kz - Kzo;\n\n\tvec3 ox22 = fract(p22*K) - Ko;\n\tvec3 oy22 = worley_mod7(floor(p22*K))*K - Ko;\n\tvec3 oz22 = floor(p22*K2)*Kz - Kzo;\n\n\tvec3 ox23 = fract(p23*K) - Ko;\n\tvec3 oy23 = worley_mod7(floor(p23*K))*K - Ko;\n\tvec3 oz23 = floor(p23*K2)*Kz - Kzo;\n\n\tvec3 ox31 = fract(p31*K) - Ko;\n\tvec3 oy31 = worley_mod7(floor(p31*K))*K - Ko;\n\tvec3 oz31 = floor(p31*K2)*Kz - Kzo;\n\n\tvec3 ox32 = fract(p32*K) - Ko;\n\tvec3 oy32 = worley_mod7(floor(p32*K))*K - Ko;\n\tvec3 oz32 = floor(p32*K2)*Kz - Kzo;\n\n\tvec3 ox33 = fract(p33*K) - Ko;\n\tvec3 oy33 = worley_mod7(floor(p33*K))*K - Ko;\n\tvec3 oz33 = floor(p33*K2)*Kz - Kzo;\n\n\tvec3 dx11 = Pfx + jitter*ox11;\n\tvec3 dy11 = Pfy.x + jitter*oy11;\n\tvec3 dz11 = Pfz.x + jitter*oz11;\n\n\tvec3 dx12 = Pfx + jitter*ox12;\n\tvec3 dy12 = Pfy.x + jitter*oy12;\n\tvec3 dz12 = Pfz.y + jitter*oz12;\n\n\tvec3 dx13 = Pfx + jitter*ox13;\n\tvec3 dy13 = Pfy.x + jitter*oy13;\n\tvec3 dz13 = Pfz.z + jitter*oz13;\n\n\tvec3 dx21 = Pfx + jitter*ox21;\n\tvec3 dy21 = Pfy.y + jitter*oy21;\n\tvec3 dz21 = Pfz.x + jitter*oz21;\n\n\tvec3 dx22 = Pfx + jitter*ox22;\n\tvec3 dy22 = Pfy.y + jitter*oy22;\n\tvec3 dz22 = Pfz.y + jitter*oz22;\n\n\tvec3 dx23 = Pfx + jitter*ox23;\n\tvec3 dy23 = Pfy.y + jitter*oy23;\n\tvec3 dz23 = Pfz.z + jitter*oz23;\n\n\tvec3 dx31 = Pfx + jitter*ox31;\n\tvec3 dy31 = Pfy.z + jitter*oy31;\n\tvec3 dz31 = Pfz.x + jitter*oz31;\n\n\tvec3 dx32 = Pfx + jitter*ox32;\n\tvec3 dy32 = Pfy.z + jitter*oy32;\n\tvec3 dz32 = Pfz.y + jitter*oz32;\n\n\tvec3 dx33 = Pfx + jitter*ox33;\n\tvec3 dy33 = Pfy.z + jitter*oy33;\n\tvec3 dz33 = Pfz.z + jitter*oz33;\n\n\tvec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;\n\tvec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;\n\tvec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;\n\tvec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;\n\tvec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;\n\tvec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;\n\tvec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;\n\tvec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;\n\tvec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;\n\n\t// Sort out the two smallest distances (F1, F2)\n\tvec3 d1a = min(d11, d12);\n\td12 = max(d11, d12);\n\td11 = min(d1a, d13); // Smallest now not in d12 or d13\n\td13 = max(d1a, d13);\n\td12 = min(d12, d13); // 2nd smallest now not in d13\n\tvec3 d2a = min(d21, d22);\n\td22 = max(d21, d22);\n\td21 = min(d2a, d23); // Smallest now not in d22 or d23\n\td23 = max(d2a, d23);\n\td22 = min(d22, d23); // 2nd smallest now not in d23\n\tvec3 d3a = min(d31, d32);\n\td32 = max(d31, d32);\n\td31 = min(d3a, d33); // Smallest now not in d32 or d33\n\td33 = max(d3a, d33);\n\td32 = min(d32, d33); // 2nd smallest now not in d33\n\tvec3 da = min(d11, d21);\n\td21 = max(d11, d21);\n\td11 = min(da, d31); // Smallest now in d11\n\td31 = max(da, d31); // 2nd smallest now not in d31\n\td11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;\n\td11.xz = (d11.x < d11.z) ? d11.xz : d11.zx; // d11.x now smallest\n\td12 = min(d12, d21); // 2nd smallest now not in d21\n\td12 = min(d12, d22); // nor in d22\n\td12 = min(d12, d31); // nor in d31\n\td12 = min(d12, d32); // nor in d32\n\td11.yz = min(d11.yz,d12.xy); // nor in d12.yz\n\td11.y = min(d11.y,d12.z); // Only two more to go\n\td11.y = min(d11.y,d11.z); // Done! (Phew!)\n\treturn sqrt(d11.xy); // F1, F2\n}\n\n// Main script\n\nconst float startDistance = 3.325;\nconst float hRot = -3.0;\nconst float vRot = 0.0;\nconst float refractEta = 0.875;\nconst int RAYSTEPS = 128;\nconst int REFLECTIONS = 4;\nconst float EPSILON = 0.001;\n\n\n#define SHTIME iTime\n#define TIME (2.5*(2.0*SHTIME+0.9*sin(1.5+2.0*SHTIME)))\n\nstruct Sphere {\n\tvec3 center;\n\tfloat r;\n\tvec3 color1, color2;\n};\n\nfloat sphereSDF(vec3 p, Sphere s) {\n\treturn distance(p, s.center)-s.r;\n}\n\nvec3 sphereNormal(vec3 p, Sphere s) {\n\treturn normalize(p-s.center);\n}\n\nfloat planeSDF(vec3 p) {\n\treturn p.y;\n}\n\nvec3 planeNormal(vec3 p) {\n\treturn vec3(0.0, 1.0, 0.0);\n}\n\nfloat fbm(vec4 p) {\n\tfloat total = 0.0;\n\tfloat s = 1.0;\n\ttotal += 0.5*perlinNoise(s*p);\n\ttotal += 0.25*perlinNoise(2.0*s*p);\n\ttotal += 0.125*perlinNoise(4.0*s*p);\n\ttotal += 0.0625*perlinNoise(8.0*s*p);\n\treturn total;\n}\n\nfloat wnt(vec3 p) {\n    vec2 w = worleyNoise(p);\n    return w.y/w.x-1.5;\n}\n\nfloat fworley(vec3 p) {\n    float total = 0.0;\n    float s = 4.0;\n    total += 0.5*wnt(s*p);\n    total += 0.25*wnt(2.0*s*p);\n    total += 0.125*wnt(4.0*s*p);\n    total += 0.0625*wnt(8.0*s*p);\n    //total += worleyNoise(16.0*s*p).x;\n    return total;\n}\n\nfloat marble(vec3 p) {\n    //vec4 p4 = vec4(p, 0.015625*SHTIME);\n    vec4 p4 = vec4(p.xz, (-1.0+p.y)*vec2(sin(0.5*SHTIME), cos(0.5*SHTIME)));\n\tp4 += fbm(p4);\n\tp4 += fbm(p4);\n\treturn 0.5*(fbm(p4)+1.0);\n\t//return 0.5*(fbm(p)+1.0);\n}\n\nvec4 shader(vec2 pos) {\n    float rhrot = hRot+0.1*TIME;\n\tvec3 start = rotateY(vec3(0.0, 0.7, -startDistance), rhrot);\n\tvec3 direction = rotateY(normalize(vec3((2.0*pos-1.0)*vec2(1.0, iResolution.y/iResolution.x), 1.0)), rhrot);\n\tvec3 lightDirection = normalize(vec3(2.0, -1.0, 3.0));\n\tvec3 color = vec3(0.0);\n\n\tSphere sphere0, sphere1, sphere2, sphere3;\n\tsphere0.center = vec3(0.0, 1.0, 0.0); sphere0.r = 1.0; sphere0.color1 = vec3(1.0, 0.0, 0.125); sphere0.color2 = vec3(1.0, 1.0, 0.125);\n\tsphere1.center = vec3(-1.0, 0.75, -1.5); sphere1.r = 0.75; sphere1.color1 = vec3(0.125, 0.125, 0.125); sphere1.color2 = vec3(0.25, 0.125, 0.0);\n\tsphere2.center = vec3(+1.0, 0.5, -1.0); sphere2.r = 0.5; sphere2.color1 = vec3(0.0, 0.125, 0.25); sphere2.color2 = vec3(0.0625, 0.185, 0.25);\n    sphere3.center = vec3(0.0, -64.0, 0.0); sphere3.r = 64.0; sphere3.color1 = vec3(1.0); sphere3.color2 = vec3(1.0);\n\n\tint ignore = 0;\n\tvec3 p = start;\n\n    float atten = 1.0;\n\tfor (int h = 0; h < REFLECTIONS; ++h) {\n\t\tvec3 normal;\n\t\tvec3 difColor1 = vec3(1.0);\n        vec3 difColor2 = vec3(1.0);\n\t\tfloat ripple = 0.0;\n\t\tbool hit = false;\n\t\tbool seeThrough = false;\n        float natten = atten;\n        float emissive = 0.0;\n\t\tfor (int i = 0; i < RAYSTEPS; ++i) {\n            if (length(p) >= 256.0)\n                break;\n\n\t\t\tfloat distance = 99999999.9;\n\n\t\t\tif (ignore != 1) {\n\t\t\t\t//distance = planeSDF(p);\n                distance = sphereSDF(p, sphere3);\n\t\t\t\tif (distance < EPSILON) {\n\t\t\t\t\thit = true;\n\t\t\t\t\t//normal = planeNormal(p);\n                    normal = sphereNormal(p, sphere3);\n\t\t\t\t\tripple = 0.0625;\n\t\t\t\t\tignore = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignore != 2) {\n\t\t\t\tdistance = min(distance, sphereSDF(p, sphere0));\n\t\t\t\tif (distance < EPSILON) {\n\t\t\t\t\thit = true;\n\t\t\t\t\tnormal = sphereNormal(p, sphere0);\n\t\t\t\t\tdifColor1 = sphere0.color1;\n                    difColor2 = sphere0.color2;\n                    natten *= 0.25;\n                    emissive = 1.0;\n\t\t\t\t\tignore = 2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignore != 3) {\n\t\t\t\tdistance = min(distance, sphereSDF(p, sphere1));\n\t\t\t\tif (distance < EPSILON) {\n\t\t\t\t\thit = true;\n\t\t\t\t\tnormal = sphereNormal(p, sphere1);\n\t\t\t\t\tdifColor1 = sphere1.color1;\n                    difColor2 = sphere1.color2;\n\t\t\t\t\tignore = 3;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (ignore != 4) {\n\t\t\t\tdistance = min(distance, sphereSDF(p, sphere2));\n\t\t\t\tif (distance < EPSILON) {\n\t\t\t\t\thit = true;\n\t\t\t\t\tseeThrough = true;\n\t\t\t\t\tnormal = sphereNormal(p, sphere2);\n\t\t\t\t\tdifColor1 = sphere2.color1;\n                    difColor2 = sphere2.color2;\n\t\t\t\t\tignore = 4;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp += distance*direction;\n\n\t\t}\n\n\t\tif (hit) {\n\t\t\t// SHADOW\n\t\t\tvec3 sp = p;\n\t\t\tfloat shadow = 1.0;\n\t\t\tfloat highlight = 0.0;\n\t\t\tfor (int i = 0; i < RAYSTEPS; ++i) {\n\n\t\t\t\tfloat sdistance = 99999999.9;\n\n\t\t\t\tif (ignore != 1) sdistance = sphereSDF(sp, sphere3); //planeSDF(sp);\n\t\t\t\tif (ignore != 2) sdistance = min(sdistance, sphereSDF(sp, sphere0));\n\t\t\t\tif (ignore != 3) sdistance = min(sdistance, sphereSDF(sp, sphere1));\n\t\t\t\tfloat prevSdist = sdistance;\n\t\t\t\tif (ignore != 4) sdistance = min(sdistance, sphereSDF(sp, sphere2));\n\t\t\t\tif (sdistance < 0.03125) {\n\t\t\t\t\tfloat shadeDist = distance(p, sp);\n\t\t\t\t\tshadow = 1.0-1.0/(1.0+shadeDist);\n\t\t\t\t\tif (prevSdist != sdistance) {\n\t\t\t\t\t\t// refract light instead of block\n\t\t\t\t\t\tvec3 nd = refract(-lightDirection, sphereNormal(sp, sphere2), refractEta);\n\t\t\t\t\t\thighlight = pow(max(0.0, dot(nd, -lightDirection)), 4096.0)*(1.0-shadow);\n\t\t\t\t\t\tshadow = 1.0-0.5*(1.0-shadow);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tsp -= sdistance*lightDirection;\n\n\t\t\t}\n\n            float marblePattern = marble(p);\n\t\t\tfloat diffuse = 0.03125+max(0.0, dot(lightDirection, -normal));\n\t\t\tif (seeThrough)\n\t\t\t\tdirection = normalize(refract(direction, normal, refractEta)+ripple*perlinNoise(8.0*p));\n\t\t\telse\n\t\t\t\tdirection = normalize(reflect(direction, normal)+ripple*perlinNoise(8.0*p));\n            vec3 emit = 4.0*emissive*difColor1*max(0.0, marblePattern-0.5);\n\t\t\t//float specular = pow(max(0.0, dot(lightDirection, -direction)), 16.0);\n\t\t\tcolor += (emit+highlight+shadow*(mix(difColor1, difColor2, marblePattern)*diffuse)/(1.0+0.5*distance(start, p)))*atten;\n\t\t\t//return vec4(0.5*(normal+1.0), 1.0);\n\t\t} else {\n\t\t\tcolor += 0.5*vec3(0.1, 0.0, 0.1)*atten*fworley(normalize(p-start)-0.125*lightDirection*cos(SHTIME));\n\t\t\tfloat sun = 0.0;\n\t\t\tsun += 0.9375*pow(max(0.0, dot(direction, -lightDirection)), 16.0+sin(16.0*SHTIME));\n\t\t\tcolor += sun*vec3(1.5, 0.8, 0.4)*atten;\n\t\t\tbreak;\n\t\t}\n\n        atten = natten;\n\t}\n\n\treturn vec4(color, 1.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = shader(fragCoord/iResolution.xy);\n}\n","name":"Image","description":"","type":"image"}]}