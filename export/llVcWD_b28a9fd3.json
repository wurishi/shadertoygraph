{"ver":"0.1","info":{"id":"llVcWD","date":"1536353843","viewed":104,"name":"beginner's-video-followthrough","username":"tqle","description":"Follow along of 'Shadertoy for Absolute Beginners'","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["followthrough"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//predefine functions, variable, so as to not repeat\n#define S(a, b, t) smoothstep (a, b, t)\n#define sat(x) clamp(x, 0., 1.)\n\nfloat remap(float a, float b, float c, float d, float t) {\n    return sat((t - a)/(b - a)) * (d - c) + c;\n}\n\nfloat remap01(float a, float b, float t) {\n    return sat((t - a)/(b - a)); //remapping value to 0 - 1\n}\n\nvec2 within(vec2 uv, vec4 rect) {\n    return (uv - rect.xy)/(rect.zw - rect.xy);\n}\n//create eyes, uv vector to modify \nvec4 Eye(vec2 uv) {\n    uv -= 0.5;\n\tfloat d= length(uv); \n\n    vec4 irisCol = vec4(.3, .5, 1., 1.);\n    \n    vec4 col = mix(vec4(1.), irisCol , S(.1, .7, d) * .5); //mixing eye color\n    \n    col.rgb *= 1. - S(.45, .5, d) * .5 * sat(-uv.y - uv.x); //create shadowy contrast for eye\n    \n    col.rgb = mix(col.rgb, vec3(0.),S(.3, .28, d)); //iris, outline\n    \n    irisCol.rgb *= 1. + S(.3, .05, d);  //increase brightness of eyeballs\n    col.rgb = mix(col.rgb, irisCol.rgb ,S(.28, .25, d)); //smaller eyeballs\n    \n    col.rgb = mix(col.rgb, vec3(0.),S(.16, .14, d)); //mixing color for pupils\n    \n    float hl = S(.1, .09, length(uv - vec2(-.15, .15)));\n    hl += S(.07, .05, length(uv + vec2(-.08, .08))); //adding highlights on iris\n    col.rgb = mix(col.rgb, vec3(1.), hl);\n    \n    col.a = S(.5,.48,d); //two eyes\n    return col;\n}\n\nvec4 Mouth(vec2 uv){\n    uv -= .5;\n    vec4 col = vec4(.5, .18, .05, 1.);\n    \n    //uv.y *= 1.5; \n    uv.y -= uv.x * uv.x * 2.; //create curvature, parabolic\n   \n    float d = length(uv);\n    \n    col.a = S(.5, .48, d);\n    \n    \n    float td = length(uv - vec2(0., .6)); //adding teeth\n    \n    vec3 toothCol = vec3(1.) * S(.6, .35, d);\n    \n    col.rgb = mix(col.rgb, toothCol, S(.4, .37, td));\n    \n    td = length(uv + vec2(0., .5));\n    \n    col.rgb = mix(col.rgb, vec3(1., .5, .5), S(.5, .2, td)); //adding texture for tongue, blurry\n    return col;\n}\n\nvec4 Head(vec2 uv){\n    vec4 col = vec4(.9, .65, .1, 1.);\n    \n    float d = length(uv); \n    \n    col.a = S(.5, .49, d); //carve out circle (alpha value)\n    \n    float edgeShade = remap01(0.35, .5, d);\n    \n    edgeShade *= edgeShade;\n        \n    col.rgb *= 1. - edgeShade * 0.5;\n    \n    col.rgb = mix(col.rgb, vec3(.6, .3, .1), S(.47, .48, d)); //outline of head (mix color)\n    \n    float hl = S(.41, .405, d); //create float highlight\n    hl *= remap(.41, -0.1, .75, 0., uv.y);\n    col.rgb = mix(col.rgb, vec3(1.), hl); \n    \n    d = length(uv - vec2(.25, -.2)); //defining distance from camera to object\n    float cheek = S(.2, .01, d) * 0.4;\n    cheek +- S(.17, .16, d); //edge sharper\n    col.rgb = mix(col.rgb, vec3(1.,.1,.1),cheek);\n    return col;\n}\n\nvec4 Smiley(vec2 uv){\n    vec4 col = vec4(0);\n    uv.x = abs(uv.x); //mirror\n    \n    vec4 head = Head(uv);\n    vec4 eye = Eye(within(uv, vec4(.03, -.1, .37, .25)));\n    vec4 mouth = Mouth(within(uv, vec4(-.3, -.4, .3, -.1)));\n\n    //color blending\n    col = mix(col, head, head.a); \n    col = mix(col, eye, eye.a); \n    col = mix(col, mouth, mouth.a);\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord/iResolution.xy;\n\tuv-=0.5;\n    uv.x*=iResolution.x/iResolution.y; //normalizing vector, making the maths easier\n    fragColor=Smiley(uv);\n}","name":"Image","description":"","type":"image"}]}