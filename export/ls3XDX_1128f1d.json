{"ver":"0.1","info":{"id":"ls3XDX","date":"1461772887","viewed":433,"name":"Squares Background","username":"vamoss","description":"Square animation for background","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["square","rectangle","background"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float total = 60.;//number of rectangles\nconst float minSize = 0.01;//rectangle min size\nconst float maxSize = 0.1-minSize;//rectangle max size\nconst float yDistribution = 0.5;\n\nvec4 bgColor = vec4(0.01, 0.16, 0.42, 1.0);\nvec4 rectColor = vec4(0.01, 0.26, 0.57, 1.0);\n\nfloat rectangle(vec2 uv, vec2 pos, float width, float height) {\n\treturn step(pos.x, uv.x) * step(uv.x, pos.x + width) * step(pos.y, uv.y) * step(uv.y, pos.y + height);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float velX = iTime/8.;\n    float velY = iTime/10.;\n    \n    vec4 color = bgColor*(2.-abs(uv.y*2.));\n    \n    for(float i=0.; i<total; i++){\n        float index = i/total;\n        float rnd = rand(vec2(index));\n        vec3 pos = vec3(0, 0., 0.);\n        pos.x = fract(velX*rnd+index)*4.-2.0;\n        pos.y = sin(index*rnd*1000.+velY) * yDistribution;\n        pos.z = maxSize*rnd+minSize;\n        vec2 uvRot = uv - pos.xy + pos.z/2.;\n    \tuvRot = rotate2d( i+iTime/2. ) * uvRot;\n        uvRot += pos.xy+pos.z/2.;\n        float rect = rectangle(uvRot, pos.xy, pos.z, pos.z);\n\t    color += rectColor * rect * pos.z/maxSize;\n    }\n\tfragColor = color;\n}","name":"Image","description":"","type":"image"}]}