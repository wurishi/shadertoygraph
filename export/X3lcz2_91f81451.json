{"ver":"0.1","info":{"id":"X3lcz2","date":"1726792249","viewed":61,"name":"Monopteros","username":"fishe","description":"Some classical architecture.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["sdf","architecture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float infinity = 999.9; // 1.0 / 0.0;\nconst float pi = atan(1.0, 1.0) * 4.0;\nconst float epsilon = 0.001;\n\n// https://iquilezles.org/articles/distfunctions/\n\nfloat sphere(vec3 p, float r){\n    return length(p) - r;\n}\n\nfloat cylinder(vec3 p, float r, float h){\n    vec2 d = abs(vec2(length(p.xz), p.y)) - vec2(r, h);\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat box(vec3 p, vec3 b){\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat torus(vec3 p, float x, float y){\n    vec2 q = vec2(length(p.xz)-x,p.y);\n    return length(q)-y;\n}\n\nfloat solidangle(vec3 p, float a, float r){\n    vec2 c = vec2(sin(a), cos(a));\n    vec2 q = vec2(length(p.xz), p.y);\n    float l = length(q) - r;\n    float m = length(q - c*clamp(dot(q,c),0.0,r));\n    return max(l,m*sign(c.y*q.x-c.x*q.y));\n}\n\nfloat hexprism(vec3 p, vec2 h){\n    const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n    p = abs(p);\n    p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;\n    vec2 d = vec2(\n        length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),\n        p.z-h.y );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat smoothunion(float d1, float d2, float k){\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat column(vec3 p){\n    float t = infinity;\n    float h = 0.95;\n    float r = 0.12;\n    t = min(t, cylinder(p, r, h));\n    p.y = abs(p.y);\n    t = smoothunion(t, torus(p + vec3(0.0, -(h - 0.04), 0.0), 0.13, 0.04), 0.02);\n    t = smoothunion(t, torus(p + vec3(0.0, -(h - 0.09), 0.0), 0.13, 0.02), 0.01);\n    float b = pi*2.0/16.0;\n    float i = round(atan(p.z,p.x)/b);\n    float c = b*i;\n    p.xz = mat2(cos(c),-sin(c),sin(c),cos(c))*p.xz;\n    p.x -= r + 0.02;\n    t = max(t, -(cylinder(p, 0.0, h - 0.18) - 0.03));\n    return t;\n}\n\nfloat slate(vec2 p){\n    vec2 q = vec2(atan(p.x, p.y), length(p));\n    float u = 5.0;\n    float v = 3.0;\n    float f = fract(q.y * v);\n    float i = floor(q.y * v) + 1.0;\n    return (abs(sin(q.x * u * i)) + sin(f * pi) * 0.5) * 0.03;\n}\n\nfloat material1(vec3 p){\n    float t = infinity;\n    t = min(t, hexprism(p.xzy + vec3(0.0, 0.0, 0.95), vec2(0.3, 0.25)));\n    t = min(t, sphere(p + vec3(0.0, -2.18, 0.0), 0.15));\n    t = min(t, cylinder(p + vec3(0.0, -1.23, 0.0), 1.75, 0.1));\n    t = min(t, cylinder(p + vec3(0.0, -1.3, 0.0), 1.79, 0.1));\n    t = min(t, cylinder(p + vec3(0.0, -1.45, 0.0), 1.82, 0.05));\n    t = min(t, cylinder(p + vec3(0.0, 1.2, 0.0), 1.75, 0.05));\n    t = min(t, cylinder(p + vec3(0.0, 1.1, 0.0), 1.65, 0.05));\n    t = max(t, -cylinder(p + vec3(0.0, -1.1, 0.0), 1.45, 0.25));\n    float b = pi*2.0/8.0;\n    float i = round(atan(p.z,p.x)/b);\n    float c = b*i;\n    p.xz = mat2(cos(c),-sin(c),sin(c),cos(c))*p.xz;\n    p.x -= 1.6;\n    t = min(t, column(p + vec3(0.0, -0.15, 0.0)));\n    t = min(t, box(p + vec3(0.0, 1.0, 0.0), vec3(0.2, 0.2, 0.17)));\n    t = min(t, box(p + vec3(0.0, 0.87, 0.0), vec3(0.23, 0.02, 0.2)));\n    t = min(t, box(p + vec3(0.0, 1.2, 0.0), vec3(0.23, 0.05, 0.2)));\n    t = min(t, box(p + vec3(0.0, -1.11, 0.0), vec3(0.18, 0.02, 0.18)));\n    return t;\n}\n\nfloat material2(vec3 p){\n    float t = infinity;\n    t = min(t, solidangle(p + vec3(0.0, 1.66 -0.05, 0.0), 0.55, 3.63) - slate(p.xz));\n    t = max(t, -(dot(p, vec3(0.0, 1.0, 0.0)) - 1.38-0.05));\n    return t;\n}\n\nvec2 map(vec3 p){\n    float a = material1(p);\n    float b = material2(p);\n    return a < b ? vec2(a, 0.0) : vec2(b, 1.0);\n}\n\nvec3 nor(vec3 p){\n    float e = 0.001;\n    return normalize(\n        map(p).x - vec3(map(p - vec3(e, 0.0, 0.0)).x,\n                        map(p - vec3(0.0, e, 0.0)).x,\n                        map(p - vec3(0.0, 0.0, e)).x)\n    );\n}\n\nvec4 surface(sampler2D t, vec3 p, vec3 n){\n    vec4 cx = texture(t, p.yz);\n    vec4 cy = texture(t, p.xz);\n    vec4 cz = texture(t, p.xy);\n    vec3 m = n * n;\n    return (cx * m.x + cy * m.y + cz * m.z) / (m.x + m.y + m.z);\n}\n\nvec2 march(vec3 origin, vec3 direction){\n    float t = 0.0;\n    for(int i = 0; i < 150; i++){\n        if(t > 10.0) return vec2(infinity, 0.0);\n        vec2 d = map(origin + direction * t);\n        if(d.x < epsilon) return vec2(t, d.y);\n        t += d.x;\n    }\n    return vec2(-1.0, 0.0);\n}\n\nvec3 background(vec3 direction){\n    vec3 a = vec3(0.9, 0.9, 0.9);\n    vec3 b = vec3(0.6, 0.8, 1.0);\n    return mix(a, b, direction.y * 0.5 + 0.5);\n}\n\nvec3 gen(vec2 p, float fov, vec3 from, vec3 to){\n    p = p / iResolution.xy * 2.0 - 1.0;\n    p.x *= iResolution.x/iResolution.y;\n    vec3 n = normalize(vec3(p, -1.0 / tan(fov / 2.0))); \n    vec3 z = normalize(from-to);\n    vec3 x = normalize(cross(vec3(0.0, 1.0, 0.0), z));\n    vec3 y = cross(z, x);\n    return x * n.x + y * n.y + z * n.z;\n}\n\nvoid mainImage(out vec4 c, in vec2 p){\n    \n    float theta, phi;\n    if(iMouse.z > 0.0){\n        theta = iMouse.x/iResolution.x * 2.0 * pi;\n        phi = iMouse.y/iResolution.y * pi;\n    }else{\n        theta = -iTime/8.0;\n        phi = 1.45;\n    }\n\n    vec3 origin  = vec3(\n        cos(theta) * sin(phi),\n        cos(phi),\n        sin(theta) * sin(phi)\n    ) * 5.0;\n\n    vec3 direction = gen(p, 1.2, origin, vec3(0.0));\n        \n    vec2 h = march(origin, direction);\n    float t = h.x;\n    float m = h.y;\n    \n    if(t < 0.0) c = vec4(0.0, 0.0, 0.0, 1.0);\n\n    else if(t < infinity){\n    \n        vec3 light1 = normalize(vec3(1.0, 0.9, -0.7));\n        vec3 light1_col = vec3(1.0, 0.9, 0.8);\n        vec3 light2 = normalize(vec3(0.5, 1.0, 0.8));\n        vec3 light2_col = vec3(0.3, 0.4, 0.5);\n        vec3 light3 = normalize(vec3(-1.0, -0.4, 0.2));\n        vec3 light3_col = vec3(0.4, 0.4, 0.5);\n\n        vec3 p = origin + direction * t;\n        vec3 normal = nor(p);\n        vec3 colour = m == 0.0 ? surface(iChannel0, p, normal).rgb\n                               : surface(iChannel1, p, normal).rgb;\n        \n        float s = march(origin + direction * (t - 0.05), light1).x < infinity ? 0.0 : 1.0;\n        c.rgb = colour * max(0.0, dot(normal, light1)) * s * light1_col;\n        c.rgb += colour * max(0.0, dot(normal, light2)) * light2_col;\n        c.rgb += colour * max(0.0, dot(normal, light3)) * light3_col;\n        c.a = 1.0;\n        \n    }else c = vec4(background(direction), 1.0);\n\n}","name":"Image","description":"","type":"image"}]}