{"ver":"0.1","info":{"id":"sdlyRf","date":"1642489904","viewed":236,"name":"Ben Day Dots","username":"eventua11y","description":"My attempt to achieve ben-day dots effect in the comic books. Github repo: https://github.com/jingtaoh/Ben-Day-Dots-Shading.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bendaydot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 B = vec3(0., 0.678, 0.937);\nconst vec3 R = vec3(0.929, 0., 0.549);\nconst vec3 Y = vec3(0.996, 0.949, 0.);\nconst vec3 K = vec3(0.);\nconst vec3 W = vec3(1.);\n\nconst float DOT_SIZE = 0.0015;\n\nfloat sdCircle(vec2 uv, float r, vec2 offset) {\n  float x = uv.x - offset.x;\n  float y = uv.y - offset.y;\n\n  return length(vec2(x, y)) - r;\n}\n\nfloat opRepeat(vec2 p, float r, vec2 c) {\n  vec2 q = mod(p + 0.5 * c, c) - 0.5 * c;\n  return sdCircle(q, r, vec2(0));\n}\n\nvec2 rotate(vec2 uv, float th) {\n  return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\nvec3 drawDots(vec2 uv, vec3 col, float size, vec2 space, float th) {\n  vec2 new_uv = uv - 0.5;                    // <-0.5,0.5>\n  new_uv.x *= iResolution.x / iResolution.y; // fix aspect ratio\n  new_uv = rotate(new_uv, radians(180. - th));\n\n  float res = opRepeat(new_uv, size, space);\n  res = step(0., res); // Same as res > 0. ? 1. : 0.;\n  return mix(col, W, res);\n}\n\nvec3 drawLines(vec2 uv, vec3 col, float size, vec2 space, float th) {\n  return drawDots(uv, col, size, space, th);\n}\n\nvec3 drawSolid(vec2 uv, vec3 col, float size, float space, float th) {\n  return drawDots(uv, col, size, vec2(space), th);\n}\n\nvec4 RGBtoCMYK(vec3 rgb) {\n  float K = 1.0 - max(max(rgb.r, rgb.g), rgb.b);\n  return vec4((1.0 - rgb.r - K) / (1.0 - K), (1.0 - rgb.g - K) / (1.0 - K),\n              (1.0 - rgb.b - K) / (1.0 - K), K);\n}\n\n// Credit to https://www.shadertoy.com/view/td2yDm\nvec3 outline(vec2 fragCoord, sampler2D tex) {\n  vec4 n = texture(tex, (fragCoord + vec2(0, 1)) / iResolution.xy);\n  vec4 e = texture(tex, (fragCoord + vec2(1, 0)) / iResolution.xy);\n  vec4 s = texture(tex, (fragCoord + vec2(0, -1)) / iResolution.xy);\n  vec4 w = texture(tex, (fragCoord + vec2(-1, 0)) / iResolution.xy);\n\n  vec4 dy = (n - s) * .5;\n  vec4 dx = (e - w) * .5;\n\n  vec4 edge = sqrt(dx * dx + dy * dy);\n\n  vec3 col = step(0.1, edge.rgb);\n\n  // set to black if any of the channle have value\n  return (1. - step(0.1, length(col))) * W;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv =\n      fragCoord / iResolution.xy; // Normalized pixel coordinates (from 0 to 1)\n\n  // light colors\n  vec3 b2 = drawDots(uv, B, DOT_SIZE, vec2(0.004), 135.);\n  vec3 r2 = drawDots(uv, R, DOT_SIZE, vec2(0.004), 75.);\n  vec3 y2 = drawDots(uv, Y, DOT_SIZE, vec2(0.004), 105.);\n  vec3 k2 = drawDots(uv, K, DOT_SIZE, vec2(0.004), 45.);\n\n  // dark colors\n  vec3 b3 = drawLines(uv, B, DOT_SIZE, vec2(0.0017, 0.004), 135.);\n  vec3 r3 = drawLines(uv, R, DOT_SIZE, vec2(0.0017, 0.004), 75.);\n  vec3 y3 = drawLines(uv, Y, DOT_SIZE, vec2(0.0017, 0.004), 105.);\n  vec3 k3 = drawLines(uv, K, DOT_SIZE, vec2(0.0017, 0.004), 45.);\n\n  // solid colors\n  vec3 b = drawSolid(uv, B, DOT_SIZE, 0.0017, 135.);\n  vec3 r = drawSolid(uv, R, DOT_SIZE, 0.0017, 75.);\n  vec3 y = drawSolid(uv, Y, DOT_SIZE, 0.0017, 105.);\n  vec3 k = drawSolid(uv, K, DOT_SIZE, 0.0017, 45.);\n\n  // Offset for misregistration\n  const float offset = 0.002;\n\n  vec3 col = texture(iChannel0, uv).rgb;\n  vec3 col_neg_off = texture(iChannel0, uv - vec2(offset)).rgb;\n  vec3 col_pos_off = texture(iChannel0, uv + vec2(offset)).rgb;\n\n  vec4 cmyk_k = RGBtoCMYK(col);\n  vec4 cmyk_b = RGBtoCMYK(col);\n  vec4 cmyk_r = RGBtoCMYK(col_neg_off);\n  vec4 cmyk_y = RGBtoCMYK(col_pos_off);\n\n  // Black: divide black into 4 levels + outline\n  vec3 col_k = mix(mix(W, k2, step(0.4, cmyk_k.a)),\n                   mix(k3, k, step(0.8, cmyk_k.a)), step(0.6, cmyk_k.a));\n  col_k *= outline(fragCoord, iChannel0);\n\n  // Blue: divide cyan into 4 levels\n  vec3 col_b = mix(mix(W, b2, step(0.15, cmyk_b.r)),\n                   mix(b3, b, step(0.6, cmyk_b.r)), step(0.3, cmyk_b.r));\n\n  // Red: divide magenta into 4 levels\n  vec3 col_r = mix(mix(W, r2, step(0.22, cmyk_r.g)),\n                   mix(r3, r, step(0.6, cmyk_r.g)), step(0.44, cmyk_r.g));\n\n  // Yellow: divide yellow into 4 levels\n  vec3 col_y = mix(mix(W, y2, step(0.22, cmyk_y.b)),\n                   mix(y3, y, step(0.6, cmyk_y.b)), step(0.44, cmyk_y.b));\n\n  // Blend 4 passes\n  col = col_y * col_r * col_b * col_k;\n\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}