{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Voronoi\n\nvec2 hash22(vec2 p) { return fract(sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) * 43758.5453123); }\n\nvec2 getPoint(vec2 t) {\n    return hash22(t);\n}\n\nfloat voronoi(vec2 uv, float tileCount) {\n    vec2 t = floor(vec2(uv*tileCount));\n    vec2 tuv = fract(vec2(uv*tileCount));\n\n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    float dist = 1.;\n    int scanDist = 1;\n    for (int x = -scanDist; x <= scanDist; x++) {\n        for (int y = -scanDist; y <= scanDist; y++) {\n            vec2 offset = vec2(x, y);\n            vec2 point = getPoint(t + offset) + offset;\n            float oldDist = dist;\n            dist = length(tuv - point);\n            dist = min(dist, oldDist);\n        }\n        \n    }\n    \n    return dist;\n}\n\nfloat fbm(vec2 uv, int n, float f) {\n    float dist = 0.;\n    float amp = 1.;\n    float freq = f;\n    float ampFact = 0.5;\n    float freqFact = 1.5;\n    float maxDist = 0.;\n    vec2 p = vec2(113.123, 55.1);\n    \n    for (int i = 0; i < n; i++) {\n        dist += voronoi(uv, freq)*amp;\n        maxDist += amp;\n        amp *= ampFact;\n        freq *= freqFact;\n        uv += p;\n        \n    }\n    return dist/maxDist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    float t = iTime * .2;\n    \n    float p = fbm(uv + vec2(0.,t*.3), 13, 3.);\n    \n    float q = fbm(uv + vec2(p - t, p + t), 5, 1.);\n    \n    float d = fbm(uv + vec2(q, q*0.2) + vec2(t*0.5, 0.), 5, 1.);\n    \n    vec3 col = 0.5 + 0.5*cos(t + uv.xyx+vec3(0,2,4) + d*8.);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lXccDH","date":"1735101525","viewed":97,"name":"Domain Warped Voronoi","username":"GarlicGraphix","description":"Following the classic Inigo Quilez tutorial https://iquilezles.org/articles/warp/ Using the colour scheme of the new shader","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["voronoi","noise","domainwarping"],"hasliked":0,"parentid":"4ccBDs","parentname":"Simple Voronoi Implementation"}}