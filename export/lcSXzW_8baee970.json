{"ver":"0.1","info":{"id":"lcSXzW","date":"1706086060","viewed":77,"name":"munching triangles","username":"sepia_sempervirens","description":"Similar to munching squares, but with an extra (y % VALUE) term. The effect looks the best with three colors but will work with any number of them. Try playing around with the tiling and subtile sizes.\n\nEach color is a time-shifted copy of the others.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","munchingsquares","tiling","looping","integerfunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Change these. Works best when SUBTILE_SIZE is a power of 2.\nconst int TILING_SIZE = 512;\nconst int SUBTILE_SIZE = 128;\n\nconst vec3 PALETTE[] = vec3[](\n    vec3(0.169, 0.125, 0.450),\n    vec3(0.941, 0.929, 0.263),\n    vec3(0.941, 0.773, 0.263)\n);\nconst float PIXEL_SIZE = 1.0;\n\n//////////////////////////////\n\nconst float SCALE_DOWN = float(PALETTE.length()) / float(TILING_SIZE);\n\nint f( int x, int y, int t )\n{\n    return (x ^ y) - (y % SUBTILE_SIZE) + t;\n}\n\nvec3 posterize( int v )\n{\n    int maybeNeg = int(SCALE_DOWN * float(v % TILING_SIZE));\n    int index = maybeNeg >= 0 ? maybeNeg : PALETTE.length() + maybeNeg;\n    return PALETTE[index];\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 pxCoord = ivec2(fragCoord / PIXEL_SIZE);\n    int t = int(iTime * 30.0);\n    \n    vec3 col = posterize(f(pxCoord.x, pxCoord.y, t));\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}