{"ver":"0.1","info":{"id":"MlXXWr","date":"1435784266","viewed":253,"name":"1st Raymarching attempt","username":"nickvc","description":"Basic raymarching shader with interesting primitives and a plasma color effect. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","raymarching","plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"float sphere(vec3 p, float s){\n    return length(p) - s;}\n\nfloat plane(vec3 p){\n    return p.y;}\n\nfloat torus( vec3 p)\n{\n  vec2 t = vec2(0.9,0.05);\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\n\n//-------------------------------\n\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n    return (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec3 opTwist( vec3 p )\n{\n    float t = iTime;\n    float c = cos(17.0*cos(p.y) + 10.0);\n    float s = sin(17.0*cos(p.y) + 10.0);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xz,p.y);\n    return q;\n}\n\nvec3 opRz( vec3 p )\n{\n    float t = 3.0*iTime;\n    vec3 a = vec3( cos(t),-sin(t), 0.0);\n    vec3 b = vec3( sin(t), cos(t), 0.0);\n    vec3 c = vec3( 0.0, 0.0, 1.0);\n    mat3 m = mat3(a,b,c);\n    vec3 q = (m)*p;\n    return (q);\n}\n\nvec3 opRy( vec3 p)\n{\n    float t = 3.0*iTime;\n    vec3 a = vec3( cos(t),0.0, sin(t));\n    vec3 b = vec3( 0.0, 1.0, 0.0);\n    vec3 c = vec3( -sin(t), 0.0, cos(t));\n    mat3 m = mat3(a,b,c);\n    vec3 q = (m)*p;\n    return (q);\n}\n\nvec3 opRx( vec3 p)\n{\n    float t = 3.0*iTime;\n    vec3 a = vec3( 1.0,0.0, 0.0);\n    vec3 b = vec3( 0.0, cos(t), -sin(t));\n    vec3 c = vec3( 0.0, sin(t), cos(t));\n    mat3 m = mat3(a,b,c);\n    vec3 q = (m)*p;\n    return (q);\n}\n\nvec3 opRep( vec3 p)\n{\n    vec3 c = vec3(4.0+3.0*abs(sin(iTime)),4.0+3.0*abs(sin(iTime)),4.0+3.0*abs(sin(iTime)));\n    vec3 q = mod(p,c)-0.5*c;\n    return q;\n}\n\nfloat noise( float x )\n{\n    float random = fract(sin(floor(x))*99.0);\n    float smoothSaw = smoothstep(0.0,1.0,fract(x));\n    float firstHalf = smoothSaw * random;\n    return firstHalf + fract(sin(floor(x-1.0))*99.0)*(smoothstep(-1.0,0.0,fract(x-1.0))+1.0);\n}\n\nfloat roundBox( vec3 p)\n{\n    vec3 x = vec3(0.99);\n    float r = 0.15;\n    float t = (3.141592654)*sin((iTime));\n    vec3 a = vec3( 1.0,0.0, 0.0);\n    vec3 b = vec3( 0.0, cos(t), -sin(t));\n    vec3 c = vec3( 0.0, sin(t), cos(t));\n    mat3 m = mat3(a,b,c);\n    return length(max(abs(m*opRy(p))-x,0.0))-r;\n}\n\n//-------------------------------\n    \nvec2 map(in vec3 pos){\n    vec2 ret = opU(vec2(0.17*torus(opRx(opTwist(opRep(pos - vec3(-0.6,1.2,1.2)))))) , vec2(0.8*sphere(opRep(pos - vec3(-0.6,1.2,1.28)),0.01+abs(0.5*sin(iTime))),40.0));\n    //ret = opU( ret, vec2(0.2*torus(opTwist(pos - vec3(-0.6,1.2,1.2)))));\n    //ret = opU( ret, vec2(0.2*torus(opRz(pos - vec3(-0.6,1.2,1.2)))));\n    //ret = opU( ret, vec2(0.17*torus(opRx(opTwist(opRep(pos - vec3(-0.6,1.2,1.2)))))));\n    ret = opU( ret, vec2(opS( roundBox(opRep(pos - vec3(-0.6,1.2,1.2))),\n                              sphere(opRep(pos - vec3(-0.6,1.2,1.2)),1.45))));         \n    return ret;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 80.0;\n    \n\n    \n    float precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<299; i++ )\n    {\n        vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n        m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n        float h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n        map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n        map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n        map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n    return normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nvec3 getColor(vec3 r, vec3 eye, vec3 normal){\n    float t = iTime;\n    float v1 = sin(r.x +t);\n    float v2 = sin(r.y +t);\n    float v =  sin(r.z +t);\n    float v3 = sin(r.x+r.y +r.z+t);\n    float v4 = sin(sqrt(r.x*r.x+r.y*r.y + r.z*r.z) +1.7*t);\n    float v5 = v1+v2+v3+v4+v;\n    vec3 ret = vec3(0.5) - vec3(sin(v5), sin(0.9*3.24259*v5), cos(v5*0.7));\n    return ret*vec3(abs(dot(eye,normal)));}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.5, 0.9, 1.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n    float m = res.y;\n    if( m>-1.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        \n        //sphere color\n        if( m >5.0)\n        {\n            col = 0.45 + 0.3*sin( getColor(pos,ro,nor))*(m-1.0) ;\n        }\n        \n        //plane \"texture\"\n        if( m == 1.0 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.2*f*vec3(1.0);\n            col = col*abs((0.9-0.05*getColor(pos,ro,vec3(0.0,0.0,1.0))));\n        }\n        \n        //torus and box color\n        if(m<.98)\n        {\n            col = vec3(abs(sin(iTime)),abs(cos(iTime)),abs(0.5-sin(iTime)));\n        }\n        \n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n        vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n        float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n        vec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n        brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.60*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n        brdf += 0.02;\n        col = col*brdf;\n\n        col = mix( col, vec3(0.7,0.8,0.9), 1.0-exp( -0.0002*t*t ) );\n                        //sky color above\n    }\n\n    return vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr),cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n         \n    float time = 15.0 + iTime;\n\n    // camera   \n    vec3 ro = vec3( -0.5+3.2*cos(0.1*time + 6.0*mo.x), 0.75, 0.5 + 3.2*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    \n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,2.5) );\n\n    // render   \n    vec3 col = render( ro, rd );\n\n    col = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}