{"ver":"0.1","info":{"id":"tdffDX","date":"1589166208","viewed":112,"name":"Lurnin;CopyPasta","username":"nimda32","description":"credit: https://www.shadertoy.com/view/tsXBzS","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["nothing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sin01(float val, float speed){\n  return val * (1. + sin( speed * iTime ) /2.);\n}\n\n// --------[ Original ShaderToy begins here ]---------- //\nvec3 palette(float d){\n  float random = .01 * sin01( 50. , 2. );\n\treturn mix(vec3(random * 0.2, 0.7,random * 0.9), vec3(1., random / 5. ,1.), d);\n}\n\nhighp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nvec2 rotate(vec2 p,float a){\n\t  float c = cos(a);\n    float s = sin(a);\n    return p*mat2(c,s,-s,c);\n}\n\n\nfloat map(vec3 p){\n    for( int i = 0; i<8; ++i){\n        float t = iTime * sin01(.05,.0001) * 0.5;\n        p.xz = rotate(p.xz, t);\n        p.xy = rotate(p.xy, t*.89);\n        p.xz = abs(p.xz);\n        p.xz-= .5;\n\t}\n\treturn dot(sign(p),p)/5.;\n}\n\n\nvec3 rm (vec3 ro, vec3 rd){\n    float t = 0.;\n    vec3 col = vec3(0.);\n    for(float i = 0.; i < 64.; i++){\n\t\t    vec3 p = ro + rd * t;\n        float d = map(p) * .5;\n        if(d<0.02){\n            // break;\n        }\n        if(d>100.){\n        \tbreak;\n        }\n        // col+=vec3(0.6,0.8,0.8)/(400.*(d));\n        float varyingD = 600. + ( 300. * (1. + sin( 2. * iTime ))/2. );\n        col+= palette( length(p) * .1) / ( varyingD * d);\n        t+=d;\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - (iResolution.xy/2.))/iResolution.x;\n\n\t  vec3 ro = vec3(0.,0.,-50.);\n    ro.xz = rotate(ro.xz, iTime * (.0001 * sin( iTime * .0001 ) ) );\n\n    vec3 cf = normalize(-ro);\n    vec3 cs = normalize(cross(cf, vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cf,cs));\n\n    vec3 uuv = ro + cf * 4. + uv.x * cs + uv.y * cu;\n\n    vec3 rd = normalize(uuv-ro);\n\n    vec3 col = rm(ro,rd);\n\n\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}