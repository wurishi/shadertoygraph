{"ver":"0.1","info":{"id":"stXSR8","date":"1625106553","viewed":196,"name":"Mandelbrot Set Pixel Counting","username":"oneshade","description":"Using mipmaps to count the pixels in the mandelbrot set. Reference: [url=https://www.shadertoy.com/view/Ml2cDm]https://www.shadertoy.com/view/Ml2cDm[/url]\nTo get a better measurement in actual units, you'll need to manually set PIXEL_AREA.","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["mandelbrot","mipmap","area","gpmipmap","pixelcounting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// To get a better measurement in actual units, you'll need to\n// manually set PIXEL_AREA to the area of your screens' pixels\n// in millimeters² or better yet, directly measure the shader window.\n// You can change the mandelbrot set by dragging with the mouse.\n\n// Likely not accurate\n#define PIXEL_AREA 0.07000433851\n\n// Maximum string length\n#define MAX_LEN 7\n\n// Hue to RGB function from Fabrice's shadertoyunofficial blog\n#define hue2rgb(hue) (0.6 + 0.6 * cos(6.3 * hue + vec3(0.0, 23.0, 21.0)))\n\n// Modified version of font loader from https://www.shadertoy.com/view/ltcXzs\nvoid drawChar(inout vec3 pixel, in vec3 color, in vec2 uv, in vec2 pos, in vec2 size, in int char) {\n    uv = (uv - pos) / size + 0.5;\n    vec2 charUv = uv / 16.0;\n    vec2 dfdx = dFdx(charUv);\n    vec2 dfdy = dFdy(charUv);\n    if (all(lessThan(abs(uv - 0.5), vec2(0.5)))) {\n        float val = textureGrad(iChannel1, charUv + fract(vec2(char, 15 - char / 16) / 16.0), dfdx, dfdy).r;\n        pixel = mix(pixel, color, val);\n    }\n}\n\nvoid drawFloat(inout vec3 pixel, in vec3 color, in vec2 uv, in vec2 anchor, in vec2 size, in float spacing, in float num) {\n    num = round(num * 100.0) * 0.01;\n    for (float place=-2.0; place < 3.0; place++) {\n        int digit = int(num * pow(10.0, place)) - 10 * int(num * pow(10.0, place - 1.0));\n        drawChar(pixel, color, uv, anchor, size, ZERO + digit);\n        anchor.x += spacing;\n    }\n}\n\nvoid drawString(inout vec3 pixel, in vec3 color, in vec2 uv, in vec2 anchor, in vec2 size, in float spacing, in int[MAX_LEN] string, in int strLen) {\n    for (int char=0; char < strLen; char++) {\n        drawChar(pixel, color, uv, anchor, size, string[char]);\n        anchor.x += spacing;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; // Centered, aspect correct\n    vec2 st = fragCoord / iResolution.xy; // Normalize to [0...1] range\n\n    vec2 buf = texture(iChannel0, st).xy;\n    fragColor = vec4(pow(max(0.0, 1.0 - length(st - 0.5)), 0.8));\n\n    vec3 color = 0.5 * (hue2rgb(0.01 * buf.y) + cos(0.25 * buf.y + iTime));\n    fragColor.rgb = mix(fragColor.rgb, color, buf.x); // Display mandelbrot color\n\n    buf = texture(iChannel0, st, 100.0).xz;\n    float relativeArea = buf.x / buf.y; // Decimal percentage of screen area\n\n    vec2 anchor = vec2(-0.8, 0.35);\n\n    // Text message \"Pixels:\"\n    drawString(fragColor.rgb, vec3(0.0), uv, anchor, vec2(0.1), 0.08, int[MAX_LEN](P, i, x, e, l, s, COLON), 7);\n    anchor.y = 0.25;\n\n    // Relative area\n    drawFloat(fragColor.rgb, vec3(0.0), uv, anchor, vec2(0.1), 0.08, relativeArea * 100.0);\n    drawChar(fragColor.rgb, vec3(0.0), uv, anchor + vec2(0.20, 0.0), vec2(0.1), PERIOD);\n    drawChar(fragColor.rgb, vec3(0.0), uv, anchor + vec2(0.40, 0.0), vec2(0.1), PERCENT);\n\n    // Area (approximate)\n    float screenArea = iResolution.x * iResolution.y * PIXEL_AREA;\n    float mandelbrotArea = screenArea * relativeArea;\n    mandelbrotArea *= 0.01; // Convert to centimeters to shorten the number (100 millimeter² = 1 centimeter²)\n\n    anchor = vec2(-0.8, -0.25);\n\n    // Text message \"Area~\"\n    drawString(fragColor.rgb, vec3(0.0), uv, anchor, vec2(0.1), 0.08, int[MAX_LEN](A, r, e, a, TILDE, 0, 0), 5);\n    anchor.y = -0.35;\n\n    // Area (not relative)\n    drawFloat(fragColor.rgb, vec3(0.0), uv, anchor, vec2(0.1), 0.08, mandelbrotArea);\n    drawChar(fragColor.rgb, vec3(0.0), uv, anchor + vec2(0.20, 0.0), vec2(0.1), PERIOD);\n    drawChar(fragColor.rgb, vec3(0.0), uv, anchor + vec2(0.40, 0.0), vec2(0.1), c);\n    drawChar(fragColor.rgb, vec3(0.0), uv, anchor + vec2(0.48, 0.0), vec2(0.1), m);\n    drawChar(fragColor.rgb, vec3(0.0), uv, anchor + vec2(0.54, 0.0), vec2(0.1), SQUARE);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Complex power\nvec2 cpow(in vec2 z, in float n) {\n    float a = atan(z.y, z.x) * n;\n    return vec2(cos(a), sin(a)) * pow(dot(z, z), 0.5 * n);\n}\n\n// Mandelbrot set iterator\nvec2 mandelbrot(in vec2 pixel) {\n    vec2 c = (pixel - 0.5 * iResolution.xy) / iResolution.y * 3.0;\n    float n = iMouse.z > 0.0 ? iMouse.x / iResolution.x * 10.0 : mix(2.0, 8.0, 0.5 + 0.5 * sin(0.5 * iTime));\n    vec2 z = vec2(0.0, 0.0);\n    float a = 0.0;\n    for (float i=0.0; i < 50.0; i++) {\n        z = cpow(z, n) + c;\n        if (i > 15.0) {\n            return vec2(1.0, a);\n        }\n\n        if (length(z) > 2.0) break;\n        a += (c.y - z.y) / (length(z - c) + 0.001); // cross(normalize(z - c), vec2(1, 0))\n    }\n\n    return vec2(0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(0.0);\n    float spp = 4.0; // Really sqrt(SPP)\n\n    // Accumulate and average pixel samples to approximate local area\n    for (float x=0.0; x < spp; x++) {\n        for (float y=0.0; y < spp; y++) {\n            fragColor.xy += mandelbrot(fragCoord + vec2(x, y) / spp);\n        }\n    }\n\n    fragColor.xy /= spp * spp;\n    fragColor.z = 1.0; // To count total pixels\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Character codes for convenience (with unused ones removed)\n// Generated with a python script I wrote to save me the trouble ;)\n// I'm not using macros because otherwise every piece of my code starts burning\nconst int PERCENT = 37;\nconst int PERIOD = 46;\nconst int ZERO = 48;\nconst int COLON = 58;\nconst int A = 65;\nconst int E = 69;\nconst int P = 80;\nconst int a = 97;\nconst int c = 99;\nconst int e = 101;\nconst int i = 105;\nconst int l = 108;\nconst int m = 109;\nconst int r = 114;\nconst int s = 115;\nconst int x = 120;\nconst int TILDE = 126;\nconst int SQUARE = 178;","name":"Common","description":"","type":"common"}]}