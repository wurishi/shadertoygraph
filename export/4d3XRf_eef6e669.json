{"ver":"0.1","info":{"id":"4d3XRf","date":"1460477489","viewed":121,"name":"whitecircle","username":"tejas","description":"draws a white circle on red background","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MACTIME13BIT 78945\n#define KEY 60000\n#define RNDSEED 1234596\n\nfloat hash( float n )\n{\n    float multiplier = mod(abs(float(MACTIME13BIT)+float(KEY)), 104723.);\n    return fract(sqrt(abs(n/float(RNDSEED))))*multiplier;\n    //return fract(sqrt(abs(n)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tfloat aspect = iResolution.x / iResolution.y;\n    \n    vec2 uv = fragCoord.xy/ iResolution.xy;\n    \n    uv = vec2(aspect*(2.0*uv.x - 1.0), 2.0*uv.y - 1.0);\n    \n    //vec2 uv = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    // UV hesaplamalari\n    uv = floor(uv*50.);\n    \n    // Noise function\n    float value1 = fract(hash(.81 * uv.x + .89*uv.y) * fract(hash(.56*uv.x - .23*uv.y)));\n    float value2 = fract(hash(.185 * uv.x + .48*uv.y) * fract(hash(.77*uv.x - .92*uv.y)));\n    float value = value1 * value2;\n    \n    // Clamp values\n   \tfloat multR = (value >= 0.985 && value <= 1.0) ? 0.0 : 1.0;\n    \n\tvec4 multColor = vec4(multR,multR,multR,multR);\n    \n    fragColor = multColor;\n    \n/*    \n    fragColor = vec4(uv.x, 0.0, 0.0, 1.0);\n    */\n    \n}","name":"Image","description":"","type":"image"}]}