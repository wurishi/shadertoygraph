{"ver":"0.1","info":{"id":"mtKXRy","date":"1686177869","viewed":79,"name":"2D SDF of Poland","username":"mukaltin","description":"My first shader art :D Stumbled upon the amazing tutorial by kishimisu on YouTube earlier today. Geomapping is my other passion, so I decided to make this silly thing :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","map","signeddistance","poland","kishimisu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Based on kishimisu's amazing tutorial https://www.youtube.com/watch?v=f4s1h2YETNY\n\n//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(3.138, 0.730, 0.730);\n    vec3 b = vec3(0.718, 0.720, 0.720);\n    vec3 c = vec3(0.520, 0.520, 0.520);\n    vec3 d = vec3(-0.430, -0.083, -0.083);\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n// iq - polygon sdf: https://www.shadertoy.com/view/wdBXRW\nconst int N = 45;\n\nfloat sdPolygon( in vec2 p, in vec2[N] v )\n{\n    const int num = v.length();\n    float d = dot(p-v[0],p-v[0]);\n    float s = 1.0;\n    for( int i=0, j=num-1; i<num; j=i, i++ )\n    {\n        // distance\n        vec2 e = v[j] - v[i];\n        vec2 w =    p - v[i];\n        vec2 b = w - e*clamp( dot(w,e)/dot(e,e), 0.0, 1.0 );\n        d = min( d, dot(b,b) );\n\n        // winding number from http://geomalgorithms.com/a03-_inclusion.html\n        bvec3 cond = bvec3( p.y>=v[i].y, \n                            p.y <v[j].y, \n                            e.x*w.y>e.y*w.x );\n        if( all(cond) || all(not(cond)) ) s=-s;  \n    }\n    \n    return s*sqrt(d);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n//https://www.naturalearthdata.com/ Shape isolated and normalized in Python\n    vec2[] polygon = vec2[](vec2(0.8903399948092411, 0.5420286768881322),vec2(0.899060472359198, 0.42049971607041464),vec2(0.9547884765118066, 0.315999432140829),vec2(0.9536361276927038, 0.20648779102782602),vec2(0.8331585777316348, 0.15041169789892303),vec2(0.8951362574617193, 0.023126064735946236),vec2(0.8989670386711617, -0.09917660420213836),vec2(1.0, -0.3390190232822275),vec2(0.9784583441474163, -0.4160846110164717),vec2(0.8787645990137535, -0.4480550823395811),vec2(0.6963405138852853, -0.676547416240775),vec2(0.7481650661821947, -0.8),vec2(0.7043135219309626, -0.7839721749006255),vec2(0.5133973527121752, -0.6783787620670101),vec2(0.3687827666753209, -0.7172061328790452),vec2(0.273937191798601, -0.6889977285633191),vec2(0.15524526343109746, -0.7478776263486678),vec2(0.053932001038156034, -0.6505039750141965),vec2(-0.028663379185047837, -0.6877910278251029),vec2(-0.039999999999992465, -0.6712024417944353),vec2(-0.13245782507136894, -0.5359312890403197),vec2(-0.281816766156237, -0.5193356047700174),vec2(-0.3008772385154353, -0.4333191368540604),vec2(-0.43865040228392865, -0.4025979557069851),vec2(-0.468642616143259, -0.4735377626348664),vec2(-0.5777731637684846, -0.4167092561044868),vec2(-0.5652426680508598, -0.3411272004542879),vec2(-0.7154425123280488, -0.317227427597957),vec2(-0.8106618219569082, -0.2287833617262925),vec2(-0.8930080456786819, -0.053371663827370186),vec2(-0.8773527121723219, 0.0413401476433843),vec2(-0.9270594342070989, 0.18828790459966124),vec2(-1.0, 0.28620102214648446),vec2(-0.9439916947832768, 0.3595258375922807),vec2(-0.990926550739678, 0.49931856899489085),vec2(-0.8536724630158189, 0.5799971607041449),vec2(-0.5401609135738299, 0.7070414537194776),vec2(-0.2871632494160345, 0.8),vec2(-0.0866649364131777, 0.7535917092561053),vec2(-0.07151829743057087, 0.6865914253265215),vec2(0.12222164547106258, 0.6831203861442388),vec2(0.36964443290942195, 0.6519236229415121),vec2(0.7390604723591996, 0.6560477001703604),vec2(0.8420970672203488, 0.6266609880749588),vec2(0.8903399948092411, 0.5420286768881322));\n             \n    float d = sdPolygon(uv, polygon);\n\n    vec3 col = palette(length(uv0) + .4 + iTime*.4);\n\n    d = sin(d*8. + iTime)/64.;\n    d = abs(d);\n\n    d = pow(0.005 / d, 2.);\n\n    finalColor += col * d;\n    \n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}