{"ver":"0.1","info":{"id":"dstSzl","date":"1680282756","viewed":53,"name":"Kaleidoscope Study","username":"Desarius","description":"A study for a Kaleidoscope effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["kaleidoscope"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Define center of kaleidoscope\n    vec2 center = vec2(0.5, 0.5);\n\n    // Define number of sides of kaleidoscope (adjustable parameter)\n    float sides = 3.0;\n\n    // Define complexity of pattern (adjustable parameter)\n    float complexity = 19992.0;\n\n    // Calculate polar coordinates\n    vec2 polar = vec2(length(fragCoord - center), atan((fragCoord.y - center.y) / (fragCoord.x - center.x)));\n    polar.y += step(fragCoord.x, center.x) * 3.14159;\n\n    // Calculate kaleidoscope rotation\n    float angle = 6.28318 / sides;\n    polar.y = mod(polar.y + angle * 0.5, angle) - angle * 0.5;\n    polar.y = abs(polar.y);\n    polar.y = mod(polar.y + angle * 0.5, angle * 2.0) - angle;\n\n    // Calculate rotation of pattern\n    vec2 pattern = vec2(sin(polar.y * complexity), cos(polar.y * complexity));\n    pattern = vec2(pattern.x * cos(polar.x) - pattern.y * sin(polar.x), pattern.y * cos(polar.x) + pattern.x * sin(polar.x));\n\n    // Output color based on pattern\n    fragColor = vec4(vec3(pattern.x + pattern.y), 1.0);\n}","name":"Image","description":"","type":"image"}]}