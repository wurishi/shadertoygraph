{"ver":"0.1","info":{"id":"ttdXWX","date":"1581883326","viewed":255,"name":"Square / circle tutorial","username":"xfennec","description":"Basic shapes tutorial","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // map uv from 0..1 to -1..1 (x will be scaled using viewport ratio)\n    uv -= 0.5;\n  \tuv /= vec2(iResolution.y / iResolution.x, 1);\n \t\n    // naive square\n    float inside1 = 0.0;    \n    if (uv.x > -0.25 && uv.x < 0.25 &&\n        uv.y > -0.25 && uv.y < 0.25) {\n        inside1 = 1.0;\n    }\n    \n    // smarter square\n    // step(edge, value)\n    // we reverse step() usage: edge is dynamic and value is the square size\n    vec2 square = step(abs(uv), vec2(0.25));\n    float inside2 = square.x * square.y; // \"and\"\n\n    \n\t// circle (we reverse step() here too, to make things a bit simplier)\n    float inside3 = step(distance(uv, vec2(0)), 0.25);\n    \n    // Output to screen\n    fragColor = vec4(inside3, 0.0, 0.0 ,1.0);\n}\n","name":"Image","description":"","type":"image"}]}