{"ver":"0.1","info":{"id":"4X2yzV","date":"1728000231","viewed":16,"name":"Dithered Black Hole 5555","username":"CEichert3114","description":"Its pretty crazy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Constants\nconst float SPEED = 0.5;\nconst float FREQUENCY = 5.0;\nconst vec4 BACKGROUND_COLOR = vec4(0.3, 0.8, 0.3, 1.0);\nconst vec4 RIPPLE_COLOR = vec4(1.0, 0.0, 1.0, 1.0);\nconst float DITHER_THRESHOLD = 0.25;\n\nvec4 calculateGrayscale(vec4 texture)\n{\n    //float grayscale = (0.3 * texture.r) + (0.59 * texture.g) + (0.11 * texture.b);\n    \n    //Remove alpha\n    vec3 tex = texture.xyz;\n    float gray = dot(tex, vec3(0.2126, 0.7152, 0.0722));\n    \n    return vec4(gray, gray, gray, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Mouse position\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 mouse = mix(vec2(0.5), iMouse.xy * ps, step(0.01, iMouse.z));\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n    \n    //Divide up uv\n    uv = fract(uv);\n    \n    //Ripple effect\n    float t = length(uv);\n    //Subtract by time to move inward\n    t += iTime;\n    t = fract(t * FREQUENCY);\n    t = abs(t);\n    \n    //Colors\n    float circle = distance(uv, sin(mouse));\n    circle = smoothstep(0.2, 0.2, circle);\n    \n    vec4 optionalTexture = texture(iChannel1, uv);\n    optionalTexture = calculateGrayscale(optionalTexture);\n    \n    //Background\n    vec4 col = mix(RIPPLE_COLOR, optionalTexture, t);\n    \n    //Add horizontal movement with speed\n    uv.x = uv.x + (iTime * SPEED);\n    \n    //Add vertical sin movement that is affected by mouse position\n    uv.y += uv.y + (sin(iTime) * FREQUENCY) * mouse.y;\n    \n    //Dither pattern\n    vec4 ditherTex = texture(iChannel0, uv);\n    \n    //Scale dither texture to be slightly brighter\n    ditherTex *= 2.0;\n    \n    //Scale UV to be smaller\n    uv *= 0.25;\n    \n    //Calculate grayscale\n    ditherTex = calculateGrayscale(ditherTex);\n    \n    //Threshold Dithering    \n    if (col.r < DITHER_THRESHOLD)\n    {\n        if (col.g < DITHER_THRESHOLD)\n        {\n            if (col.b < DITHER_THRESHOLD)\n            {\n                col = mix(col, ditherTex, 1.0);   \n            }\n        }\n    }\n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}