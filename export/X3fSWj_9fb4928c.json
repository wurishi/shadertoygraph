{"ver":"0.1","info":{"id":"X3fSWj","date":"1732703609","viewed":16,"name":"My Voronoi Lava","username":"audifax","description":"voronoi lava","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["voronoilava"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void stuff( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n        vec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n            return a + b*cos( 6.28318*(c*t+d) );\n        }\n        vec2 random2( vec2 p ) {\n            return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n        }\n        \n        #define PI 3.14159265359\n        #define threshold 0.55\n        #define padding 0.2\n        #define METHOD 2\n        \n        float map(float value, float min1, float max1, float min2, float max2) {\n          return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n        }\n        \n        void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n            vec2 uv = fragCoord/iResolution.xy;\n\n            vec2 mouseC = iMouse.xy;\n      \n          //divide uv coord for tiling\n          const float def = 14.;\n          //get global tile coordinate of uv\n          //and tile coordinate of uv\n          vec2 i_st = floor(def*uv);\n          vec2 f_st = fract(def*uv);\n          vec3 col = 0.5 + 0.5*cos(.5*iTime+uv.xyx+vec3(0, 2, 4));\n      \n          vec2 localPoint = vec2(0.);\n          float dist = 1.;\n          //for each adjacent neighboring tiles\n          for(int i=-1;i<=1;i++) {\n              for(int j=-1;j<=1;j++) {\n                  vec2 neighborTile = vec2(float(i), float(j));\n                  //get tile random point in tile coordinate\n                  vec2 randomPt = random2(i_st +  neighborTile);\n                  \n                  //animate\n                  randomPt = 0.5 + 0.5*sin(iTime + 96.2831*randomPt);\n                  \n                  //get vector difference between random point and px\n                  //so as to calculate distance between the 2\n                  vec2 pxToPt = neighborTile + randomPt - f_st;\n      \n                  float lDist = length(pxToPt);\n                  if ( lDist < dist ) {\n                      // Keep the closer distance\n                      dist = lDist;\n      \n                      // Kepp the position of the closer point\n                      localPoint = randomPt;\n                  }\n      \n              }\n          }\n          float distFromMouse = length(mouseC - uv);\n          if (def * distFromMouse  < dist) {\n      \n              // Keep the closer distance\n              dist = def * distFromMouse;\n      \n              // Kepp the position of the closer point\n              localPoint = mouseC;\n                  \n          }\n          \n          col = vec3(dist);\n          // col *= 0.5 + 0.5*cos(PI /4. * iTime+localPoint.xyx+vec3(2, 4, 0));\n          col *= pal(uv.x+iTime*.1, vec3(0.1,0.5,0.5), vec3(.9,.5,.1), vec3(.5,.1,.5), vec3(.8,.5,.5));\n          //col = pal( vUv.x+iTime*.1, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n          \n          // Output to screen\n          fragColor = vec4(col,1.0);\n\n        }","name":"Image","description":"","type":"image"}]}