{"ver":"0.1","info":{"id":"flK3DR","date":"1637567557","viewed":285,"name":"Water foam test 1234","username":"sergei_am","description":"Water foam test using several shading/blending modes - additive, alpha-blended 1&2, additive with boosted & clamped upper values and normal-mapped.","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["water","foam"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float WATER_SPEED = 0.2;\nconst float VERTICAL_TILING = 2.0;\n\n\n\nfloat saturate(in float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\nvec2 normalize_point(in vec2 pt, in vec2 tl, in vec2 br)\n{\n    vec2 uv = (pt - tl) / (br - tl);\n    uv.y *= VERTICAL_TILING;\n    return uv;\n}\n\nbool is_point_inside(in vec2 pt)\n{\n    return pt.x >= 0.0 && pt.y >= 0.0 && pt.x <= 1.0 && pt.y <= VERTICAL_TILING;\n}\n\nfloat get_foam_height(in vec2 uv)\n{\n    float fade = saturate(uv.y*1.0 - pow(uv.x,4.0)*uv.y - pow(1.0-uv.x,4.0)*uv.y);\n\n    //uv *= 2.0;\n    uv.y += iTime * WATER_SPEED;\n    float h = texture(iChannel0, uv).x;\n    \n    //h += texture(iChannel3,uv*1.0).x * 0.2;\n    //h /= 1.0 + 0.2;\n   \n    h = 1.0 - h;\n    h = pow(h, 4.0);\n    \n    h *= fade;\n    \n    return h;\n}\n\nvec3 get_foam_normal(in vec2 uv)\n{\n    float eps = 0.0025;\n    float h  = get_foam_height(uv);\n    float hx = get_foam_height(uv + vec2(eps,0.0));\n    float hy = get_foam_height(uv + vec2(0.0,eps));\n    return normalize(vec3(hx-h, hy-h, eps*14.0));\n}\n\nfloat get_water_height(in vec2 uv)\n{\n    uv *= 0.5;\n    \n    uv.y += iTime * WATER_SPEED;\n    \n    float ripple_speed = WATER_SPEED * 0.25;\n\n    vec2 tc1 = uv;\n    tc1.x += iTime * ripple_speed;\n    tc1.y += iTime * ripple_speed;\n    \n    \n    float h = texture(iChannel1, tc1).x;\n    \n    vec2 tc2 = uv.xy;\n    tc2.x -= iTime * ripple_speed;\n    tc2.y += iTime * ripple_speed;\n    h += texture(iChannel1, tc2.yx).x;\n    \n    vec2 tc3 = uv.xy;\n    tc3.y -= iTime * ripple_speed;\n    h += texture(iChannel1, tc3.yx).x;\n    return h * 0.3333;\n}\n\nvec3 get_water_normal(in vec2 uv)\n{\n    float eps = 0.05;\n    float h = get_water_height(uv);\n    float hx = get_water_height(uv + vec2(eps,0.0));\n    float hy = get_water_height(uv + vec2(0.0,eps));\n    return normalize(vec3(hx-h, hy-h, eps));\n}\n\nvec3 get_water_color(in vec2 uv)\n{\n    vec3 N = get_water_normal(uv);\n    vec3 V = normalize(vec3(uv.x - 0.5, uv.y*2.0, 1.0));\n    \n    vec3 bottom = texture(iChannel2, uv + N.xy*0.02).xyz;\n    bottom = mix(bottom, vec3(0.1,0.5,0.4), 0.75);\n    \n    vec3 col = bottom;\n   \n \n    return col;\n}\n\nvec3 shade_additive_foam(in vec2 uv)\n{\n    vec3 w = get_water_color(uv);\n    vec3 N = get_water_normal(uv);\n    float f = get_foam_height(uv);\n    \n    w += vec3(f,f,f);\n   \n    return w;\n}\n\nvec3 shade_additive_twolobe_foam(in vec2 uv)\n{\n    vec3 w = get_water_color(uv);\n    vec3 N = get_water_normal(uv);\n    float f = get_foam_height(uv);\n    \n    \n    \n    if(f>0.3) f = 0.6; else f = pow(f,1.0);\n    \n    \n    \n    w += vec3(f,f,f);\n   \n    return w;\n}\n\nvec3 shade_blended_foam(in vec2 uv)\n{\n    vec3 w = get_water_color(uv);\n    vec3 N = get_water_normal(uv);\n    float f = get_foam_height(uv);\n    \n    w = mix(w, vec3(f,f,f)*4.0, saturate(f));\n   \n    return w;\n}\n\nvec3 shade_clamped_foam(in vec2 uv)\n{\n    vec3 w = get_water_color(uv);\n    vec3 N = get_water_normal(uv);\n    float f = get_foam_height(uv);\n    \n    f = saturate(f*2.0);\n    f = pow(f,1.0);\n    //f *= 0.95;\n    \n    w = mix(w, vec3(f,f,f), saturate(f));\n   \n    return w;\n}\n\nvec3 shade_normalmapped_foam(in vec2 uv)\n{\n    vec3 w = get_water_color(uv);\n    vec3 N = get_water_normal(uv);\n    \n    float f = get_foam_height(uv);\n    \n    f = saturate(f*4.0);\n    \n    vec3 L = normalize(vec3(1.0,0.0,1.0));\n    vec3 FN = get_foam_normal(uv);\n    \n    float NdotL = saturate(dot(FN,L));\n    \n    vec3 sky = vec3(0.4,0.8,1.0) * 0.25;\n    vec3 sun = vec3(1.0,1.0,0.8) * 1.0;\n    \n    //debug\n    //sky = vec3(0.0,1.0,0.0); sun = vec3(10.0,0.0,0.0);\n    \n    vec3 skylight = sun * NdotL + sky;\n    \n    w += skylight * f;\n    \n    //w = vec3(NdotL, NdotL, NdotL);\n    \n    //w = FN * f;\n   \n    return w;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    float one_pix = 1.0 / iResolution.x;\n    \n    vec2 pt = normalize_point(uv, vec2(0.0, 0.0), vec2(0.2 - one_pix,1.0));\n    if( is_point_inside(pt))\n        col = shade_additive_foam(pt);\n        \n    pt = normalize_point(uv, vec2(0.2, 0.0), vec2(0.4 - one_pix,1.0));\n    if( is_point_inside(pt))\n        col = shade_blended_foam(pt);\n        \n    pt = normalize_point(uv, vec2(0.4, 0.0), vec2(0.6 - one_pix,1.0));\n    if( is_point_inside(pt))\n        col = shade_clamped_foam(pt);\n        \n    pt = normalize_point(uv, vec2(0.6, 0.0), vec2(0.8 - one_pix,1.0));\n    if( is_point_inside(pt))\n        col = shade_additive_twolobe_foam(pt);\n        \n    pt = normalize_point(uv, vec2(0.8, 0.0), vec2(1.0,1.0));\n    if( is_point_inside(pt))\n        col = shade_normalmapped_foam(pt);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}