{"ver":"0.1","info":{"id":"flSGDK","date":"1624679763","viewed":792,"name":"Procedural 3D Voronoi noise","username":"Zyphery","description":"A procedural generation of Voronoi noise.\n\neval generates 2 values\nx: distance of uv to point (without the square root)\ny: hash value of closest point (the z calculated in rehash3())\n\nthe y can be used in rehash3() to generate a random color","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["voronoi","proceduralnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float x) { return fract(x + 1.3215 * 1.8152); }\n\nfloat hash3(vec3 a) { return fract((hash(a.z * 42.8883) + hash(a.y * 36.9125) + hash(a.x * 65.4321)) * 291.1257); }\n\nvec3 rehash3(float x) { return vec3(hash(((x + 0.5283) * 59.3829) * 274.3487), hash(((x + 0.8192) * 83.6621) * 345.3871), hash(((x + 0.2157f) * 36.6521f) * 458.3971f)); }\n\nfloat sqr(float x) {return x*x;}\nfloat fastdist(vec3 a, vec3 b) { return sqr(b.x - a.x) + sqr(b.y - a.y) + sqr(b.z - a.z); }\n\nvec2 eval(float x, float y, float z) {\n    vec4 p[27];\n    for (int _x = -1; _x < 2; _x++) for (int _y = -1; _y < 2; _y++) for(int _z = -1; _z < 2; _z++) {\n        vec3 _p = vec3(floor(x), floor(y), floor(z)) + vec3(_x, _y, _z);\n        float h = hash3(_p);\n        p[(_x + 1) + ((_y + 1) * 3) + ((_z + 1) * 3 * 3)] = vec4((rehash3(h) + _p).xyz, h);\n    }\n    float m = 9999.9999, w = 0.0;\n    for (int i = 0; i < 27; i++) {\n        float d = fastdist(vec3(x, y, z), p[i].xyz);\n        if(d < m) { m = d; w = p[i].w; }\n    }\n    return vec2(m, w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y * 5.0;\n    \n    vec2 n = eval(uv.x, uv.y, iTime);\n    vec3 col = (1.0 - sqrt(n.x)) * rehash3(n.y);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}