{"ver":"0.1","info":{"id":"MllyW4","date":"1504884838","viewed":160,"name":"You're here","username":"rougier","description":"A pin sign","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","csg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Python and OpenGL for Scientific Visualization\n// 2017 Nicolas P. Rougier\n// See also http://jcgt.org/published/0003/04/01/\n/*\nfloat pin(vec2 P, float size)\n{\n    vec2 c1 = vec2(0.0,-0.15)*size;\n    float r1 = length(P-c1)-size/2.675;\n    vec2 c2 = vec2(+1.49,-0.80)*size;\n    float r2 = length(P-c2) - 2.*size;\n    vec2 c3 = vec2(-1.49,-0.80)*size;\n    float r3 = length(P-c3) - 2.*size;\n    float r4 = length(P-c1)-size/5.0;\n    return max( min(r1,max(max(r2,r3),-P.y)), -r4);\n}\n*/\n\n// abje version: Better isolines (see comments)\nfloat pin(vec2 P, float size)\n{\n    vec2 c1 = vec2(0.0,-0.15)*size;\n    float len_p_minus_c1 = length(length(P-c1));\n    float r1 = len_p_minus_c1-size/2.675;\n    vec2 c3 = abs(P)-vec2(-1.49,-0.80)*size;\n    float r3 = length(c3) - 2.*size;\n    float r4 = -len_p_minus_c1+size/5.0;\n    return max( min(r1,max(r3,-P.y)), r4);\n}\n\n// Blue or red color according to distance d\nvec4 color(float d)\n{\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 blue  = vec3(0.1, 0.4, 0.7);\n    vec3 color = white - sign(d)*blue;\n    color *= (1.0 - exp(-4.0*abs(d))) * (0.8 + 0.2*cos(140.0*d));\n    color = mix(color, white, 1.0-smoothstep(0.0,0.02,abs(d)) );\n    return vec4(color, 1.0);\n}\n\n\n// Move circles using mouse\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{ \n    vec2 p = 2.0*(gl_FragCoord.xy/max(iResolution.x, iResolution.y))-1.0;\n    p = p * vec2(1.0,-1.0) - vec2(0.0,0.4);\n    fragColor = color(pin(p, .75));\n}","name":"Image","description":"","type":"image"}]}