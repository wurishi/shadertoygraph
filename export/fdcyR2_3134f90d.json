{"ver":"0.1","info":{"id":"fdcyR2","date":"1653694638","viewed":144,"name":"Small Newton Set","username":"MisterSirCode","description":"This one took a bit more because it just uses so much complex math... It could definitely be simplified\n\nPart of my Simple Fractals playlist: [URL]https://www.shadertoy.com/playlist/NfSGW3[/URL]","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton"],"hasliked":0,"parentid":"Ndcczj","parentname":"9 Line Julia"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y);\n    vec2 zp = vec2(uv);\n    vec2 z = vec2(uv);\n    fragColor = vec4(vec3(0.0), 1.0);\n    float l = 0.0;\n    for (l = 0.0; l < 100.0; l += 1.0) {\n        vec2 z0 = cDiv(cSub(cPow(z, 3.0), vec2(1.0, 0.0)), cMul(cPow(z, 2.0), vec2(3.0, 0.0)));\n        zp = z;\n        z = cSub(z, z0);\n        vec2 diff = abs(zp - z);\n        if (dot(diff, diff) < 0.00001) break;\n    }\n    fragColor = vec4(vec3(l / 20.0) * vec3(0.3, 0.4, 1.2), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Premade Roots (Solutions to z^3 - 1)\nvec2[3] roots = vec2[3](\n    vec2(1.0, 0.0),\n    vec2(-0.5, sqrt(3.0) / 2.0),\n    vec2(-0.5, -sqrt(3.0) / 2.0)\n);\n\nvec3[3] colrs = vec3[3](\n    vec3(0.0),\n    vec3(0.5),\n    vec3(1.0)\n);\n\n// Required Functions\n\nvec2 cAdd( vec2 a, vec2 s ) {\n  return a + s;\n}\n\nvec2 cSub( vec2 a, vec2 s ) {\n  return a - s;\n}\n\nvec2 cSqr(vec2 z) {\n        return vec2(z.x*z.x-z.y*z.y,2.*z.x*z.y);\n}\n\nvec2 cMul(vec2 a, vec2 b) {\n        return vec2( a.x * b.x -  a.y * b.y, a.x * b.y + a.y * b.x);\n}\n\nvec2 cDiv( vec2 a, vec2 b ) {\n  float d = dot(b,b);\n  return vec2( dot(a,b), a.y*b.x - a.x*b.y ) / d;\n}\n\nvec2 cExp(vec2 z) {\n        return exp(z.x) * vec2(cos(z.y), sin(z.y));\n}\n\nfloat cAbs(vec2 z) {\n        return length(z);\n}\n\nfloat cArg(vec2 a) {\n        return atan(a.y,a.x);\n}\n\nvec2 cLog(vec2 a) {\n        return vec2(log(cAbs(a)),cArg(a));\n}\n\nvec2 cPow(vec2 z, float a) {\n        return cExp(cLog(z) * a);\n}","name":"Common","description":"","type":"common"}]}