{"ver":"0.1","info":{"id":"tttfRj","date":"1613086053","viewed":302,"name":"Colored noise (sound)","username":"athibaul","description":"Generate noise restricted to a chosen frequency band.","likes":14,"published":1,"flags":8,"usePreview":0,"tags":["noise","sound","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// See Common tab\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    float ys = 6.*mainSound(0,iTime+0.005*uv.x).x;\n    float d = abs(uv.y-ys);\n    col += smoothstep(0.,1.5*(length(fwidth(uv))+fwidth(ys)),d);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// See Common tab","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"\n#define TAU (2.*3.1415926)\n\nfloat rand(float p)\n{\n    // Hash function by Dave Hoskins\n    // https://www.shadertoy.com/view/4djSRW\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat noise(float s){\n    // Noise is sampled at every integer s\n    // If s = t*f, the resulting signal is close to a white noise\n    // with a sharp cutoff at frequency f.\n    \n    // For some reason float(int(x)+1) is sometimes not the same as floor(x)+1.,\n    // and the former produces fewer artifacts?\n    int si = int(floor(s));\n    float sf = fract(s);\n    sf = sf*sf*(3.-2.*sf); // smoothstep(0,1,sf)\n    //sf = sf*sf*sf*(sf*(sf*6.0-15.0)+10.0); // quintic curve\n    // see https://iquilezles.org/articles/texture\n    return mix(rand(float(si)), rand(float(si+1)), sf) * 2. - 1.;\n}\n\n\nfloat coloredNoise(float t, float fc, float df)\n{\n    // Noise peak centered around frequency fc\n    // containing frequencies between fc-df and fc+df\n    \n    // Assumes fc is an integer, to avoid problems with sin(large number).\n    \n    // Modulate df-wide noise by an fc-frequency sinusoid\n    //float n1 = noise(t*df);\n    //float n2 = noise(t*df - 100000.);\n    //vec2 modul = vec2(cos(TAU*fc*t), sin(TAU*fc*t));\n    return sin(TAU*fc*fract(t))*noise(t*df);\n}\n\n\nvec2 mainSound( int samp, float time )\n{\n    float v = 0.;\n    //v += 0.1*noise(2000.*time);\n    //v += 0.1*coloredNoise(time, 200., 180.) + 0.02*coloredNoise(time, 1000., 200.);\n    float t = time;\n    float fc = 50.*pow(100.,rand(floor(t)));\n    float df = rand(floor(t)+0.5)*fc;\n    v += 0.1*coloredNoise(t, fc, df);\n    v *= smoothstep(0.,0.1,fract(t)) * smoothstep(1.0,0.9,fract(t));\n    return vec2(v);\n}","name":"Common","description":"","type":"common"}]}