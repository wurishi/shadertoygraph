{"ver":"0.1","info":{"id":"XlGSDG","date":"1485543046","viewed":137,"name":"Simple YT Raytracer","username":"Loeizd","description":"from tutorial https://www.youtube.com/watch?v=9g8CdctxmeU","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple","raytracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// from tutorial https://www.youtube.com/watch?v=9g8CdctxmeU\n\nfloat iSphere(in vec3 ro, in vec3 rd, in vec4 sph)\n{\n\t// a sphere centered at the origin has equation  |xyz| = r\n    // meaning |xyz|^2 = r^2, meaning <xyz,xyz> = r^2\n    //...\n    \n    vec3 oc=ro - sph.xyz;\n    float b=(2.0+sin(iTime*8.0)*0.002)*dot(oc,rd);\n    float c=dot(oc,oc) - sph.w*sph.w;\n    float h=b*b - 4.0*c;\n    if(h<0.0) return -1.0;\n    float t=(-b - sqrt(h))/2.0;\n    return t;\n}\n\nvec3 nSphere(in vec3 pos, in vec4 sph)\n{\n    return (pos - sph.xyz)/sph.w;\n}\n\nfloat iPlane(in vec3 ro, in vec3 rd)\n{\n \treturn -ro.y/rd.y;   \n}\n\nvec3 nPlane(in vec3 pos)\n{\n \treturn vec3(0.0, 1.0, 0.0);   \n}\n\n//vec4 sph1 = vec4(0.0, 1.0+sin(iTime*2.3), 0.0, 1.0);\nfloat intersect(in vec3 ro, in vec3 rd, out float resT)\n{\n    vec4 sph1 = vec4(0.0, 1.0+sin(iTime*2.3), 0.0, 1.0);\n    \n    resT= 1000.0;\n    float id = -1.0;\n    float tsph = iSphere(ro, rd, sph1); //intersect with sphere\n    float tpla = iPlane(ro, rd); //intersect with a plane\n    if(tsph > 0.0)\n    {\n        id=1.0;\n        resT=tsph;\n    }\n    if(tpla > 0.0 && tpla < resT)\n    {\n        id=2.0;\n        resT=tpla;\n    }\n    return id;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    //vec3 light = normalize(vec3(0.97,sin(iTime*3.0)*1.5+1.0,0.9));//0.57+sin(iTime*3.0)*1.5));//vec3(0.57703));\n\tvec3 light = normalize(vec3(0.57,0.57,0.57));\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n\t\n    //define ray origin and direction\n    vec3 ro = vec3(0.0,1.0,3.0*sin(iTime*0.4)+6.0);\n    vec3 rd = normalize(vec3(-1.0+2.0*uv*vec2(1.78,1.0),-1.0));\n    \n    //ray intersect with 3d scene\n    float t;\n    float id = intersect(ro, rd, t);\n    \n    vec4 sph1 = vec4(0.0, 1.0+sin(iTime*2.3), 0.0, 1.0);\n    \n    //draw black by default\n    vec3 c1 = vec3(1.0,1.0,1.0);\n    vec3 c2 = vec3(0.1,0.1,0.15);\n    vec3 col = mix(c2, c1, pow(vec3(uv.x*uv.y,uv.x*uv.y,uv.x*uv.y),vec3(4.0)));// vec3(0.3, 0.3, 0.3);\n    if(id>0.5 && id<1.5)    \n    {\n        //if we hit the sphere, we draw white\n        vec3 pos = ro + t*rd;\n        vec3 nor = nSphere(pos, sph1);\n        float dif = dot(nor, light) + pow(dot(nor, light),60.0);\n        col = vec3(0.71,0.7,0.73)*dif + vec3(0.3,0.3,0.3);\n    }\n    else if(id>1.5)\n    {\n        //we hit the plane\n        vec3 pos = ro+t*rd;\n        vec3 nor = nPlane(pos);\n        float amb = smoothstep(0.0, sph1.w+(sin(-iTime*2.3)*0.5+0.3), length(pos.xz-sph1.xz));\n        col = vec3(0.4,0.4,0.45) + amb*vec3(0.4,0.4,0.4);\n    }\n    \n\t//vec3 col = vec3(uv.y);\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}