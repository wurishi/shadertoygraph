{"ver":"0.1","info":{"id":"cttGz2","date":"1682772478","viewed":79,"name":"3D waveform example","username":"hugohil","description":"3D waveform","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 512\n#define MAX_DIST 25.\n#define SURF_DIST .001\n#define TAU 6.283185\n#define PI 3.141592\n\nfloat axL = 100.;\nfloat axR = 100.;\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat audioAtX (float x, int channel) {\n    return texture(iChannel0, vec2(x,  0.))[channel];\n}\n\nfloat opSmoothIntersection( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n\nfloat sdSegment( in vec3 p, in vec3 a, in vec3 b ){\n    vec3 pa = p-a;\n    vec3 ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return  length( pa - ba*h );\n}\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b ){\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return  length( pa - ba*h );\n}\n\nfloat audioDist(vec3 coord, float x, float atx) {\n    float dist = 999.9;\n\n    vec3 p1 = vec3(x,  atx, 5.);\n    vec3 p2 = vec3(x + 0.1,  atx, 5.);\n\n    dist = min(dist, sdSegment(coord, p1, p2));\n\n    return dist;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat sdSphere( vec3 p, float s ) {\n  return length(p)-s;\n}\n\n\nfloat GetDist(vec3 p) {\n    float amp = 3.;\n    \n    axR = audioAtX((p.x+10.)*.05, 1);\n\n    float distorsion = axR*amp;\n\n    vec3 pos = p - vec3(0, -2, 0);\n    float plane = dot(pos, normalize(vec3(0,1,0))) - distorsion;\n\n    float sphere = sdSphere(p, 8.);\n    float box = sdBox(p, vec3(16, 3, 8));\n\n    float d = opSmoothIntersection(sphere, plane*.5, 0.15);\n\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n\n        float dS = GetDist(p);\n        dO += 0.1*dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 \n        f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u;\n    return normalize(i);\n}\n\nvec3 GetNormal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    vec3 n = GetDist(p) - \n        vec3(GetDist(p-e.xyy), GetDist(p-e.yxy),GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv0 = fragCoord/iResolution.xy;\n    vec2 uv = (fragCoord - (.5 * iResolution.xy)) / iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv0).rgb;\n\n    axL = audioAtX(uv0.x, 0);\n    axR = audioAtX(uv0.x, 1);\n    float adR = audioDist(vec3(uv0.xy, 5.), uv0.x, axR);\n    float adL = audioDist(vec3(uv0.xy, 5.), uv0.x, axL);\n\n    vec3 ro = vec3(0, 10, -15);\n    ro.yz *= Rot(-m.y*PI+1.);\n    ro.xz *= Rot(-m.x*TAU);\n\n    vec3 rd = GetRayDir(uv, ro, vec3(0), 1.);\n\n    float d = RayMarch(ro, rd);\n\n    if(d < MAX_DIST) {\n        vec3 p = ro + rd * d;\n        vec3 n = GetNormal(p);\n        vec3 r = reflect(rd, n);\n\n        float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        col = vec3(dif);\n    }\n\n    //col += vec3(0, smoothstep(0.01, 0., adL), 0);\n    col += vec3(smoothstep(0.01, 0., adR), 0, 0);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// stubs audio data\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float audioL =  abs(cos(sin(iTime*.5 + uv.x) * 10.));\n    float audioR =  abs(cos(cos(iTime*.5 + 0.5 + uv.x) * 100.));\n    fragColor = vec4(audioL,audioR,0.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}