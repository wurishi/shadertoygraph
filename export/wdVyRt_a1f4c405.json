{"ver":"0.1","info":{"id":"wdVyRt","date":"1603528013","viewed":700,"name":" Infinite Gamecube - one pass","username":"athibaul","description":"Remake of [url=https://www.shadertoy.com/view/tdKyz3]Jinkweiq - Infinite Gamecube[/url].","likes":30,"published":1,"flags":8,"usePreview":0,"tags":["raytracing","demo","gamecube","nintendo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Remake of \"Infinite Gamecube\" by Jinkweiq\n// https://www.shadertoy.com/view/tdKyz3\n\n//\n\n\n\nfloat sdBox(vec3 p,vec3 r)\n{\n    p=abs(p)-r;\n    return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.);\n}\n\nfloat map(vec3 p)\n{\n    float t = SPEED*iTime;\n    vec3 q = p;\n    if(random(floor(t)) > 0.5)\n    {\n        q.xy = q.yx;\n    }\n    // Rotate in the y direction\n    q -= vec3(0,fract(t),0);\n    q -= vec3(0,-0.5,0.);\n    float th = PI/2.*fract(t);\n    q.yz *= R(th);\n    q -= vec3(0,0.5,0.5);\n    float rounded = 0.07;\n    float box = sdBox(q, vec3(0.5)-rounded)-rounded;\n    return min(p.z, box);\n}\n\n\nvec3 surfColor(vec3 p)\n{\n    if(p.z > 0.01) return vec3(0.3,0.2,1.);\n    \n    float t = SPEED*iTime;\n    \n    vec3 tileCenter = random(floor(t)) > 0.5 ? vec3(fract(t), 0,0) : vec3(0, fract(t),0);\n    float rounded = 0.1;\n    vec3 col = vec3(0);\n    for(float t_ = floor(t)-1.; t_ > floor(t) - 10.; t_--)\n    {\n        float d = sdBox(p-tileCenter, vec3(0.45)-rounded)-rounded;\n        float intensity = clamp(t-t_-1.2,0.,1.);\n        col += vec3(0.3,0.2,1.) * smoothstep(0.01,-0.01,d) * intensity;\n        if(random(floor(t_)) > 0.5)\n            tileCenter += vec3(1,0,0);\n        else\n            tileCenter += vec3(0,1,0);\n    }\n    return col;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = 0.002 * vec2(1,-1);\n    return normalize(e.xxx*map(p+e.xxx)\n                    +e.xyy*map(p+e.xyy)\n                    +e.yxy*map(p+e.yxy)\n                    +e.yyx*map(p+e.yyx));\n}\n\n\nvec3 render(vec3 ro, vec3 rd)\n{\n    float d, t=0.;\n    for(int i=0; i<256; i++)\n    {\n        d = map(ro+t*rd);\n        if(d < 0.001 || t > 100.) break;\n        t += d;\n    }\n    vec3 p = ro+t*rd;\n    vec3 n = normal(p);\n    vec3 c = surfColor(p);\n    \n    //return 0.5+0.5*n;\n    vec3 lig = normalize(vec3(0,-1,1));\n    float NdotL = dot(n, lig);\n    float RdotL = dot(reflect(rd, n), lig);\n    vec3 spec = pow(clamp(RdotL,0.,1.),5.) * vec3(p.z) * 0.5;\n    return c * (0.5+0.5*NdotL) + spec;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord*2.-iResolution.xy)/iResolution.y;\n\n    // Perspective camera\n    /*\n    vec3 ro = vec3(2);\n    vec3 camFwd = normalize(vec3(0,0,0.5) - ro);\n    vec3 camRight = normalize(cross(camFwd, vec3(0,0,1)));\n    vec3 camUp = cross(camRight, camFwd);\n    vec3 rd = normalize(camFwd + 0.5*(uv.x*camRight+uv.y*camUp));\n\t*/\n    \n    // Orthographic camera\n    vec3 rd = normalize(vec3(-1));\n    vec3 camRight = normalize(cross(rd, vec3(0,0,1)));\n    vec3 camUp = cross(camRight, rd);\n    vec3 ro = vec3(0,0,0.5) + (vec3(1)+uv.x*camRight + uv.y*camUp) * 2.5;\n    \n    vec3 col = render(ro, rd);\n    \n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nfloat fmSynth(float t, float f1, float f2, float level)\n{\n    float w1 = TAU*f1, w2=TAU*f2;\n    // At each instant, angular frequency is w1 * (1+level*cos(w2*t))\n    // Phase is the integral of that:\n    float phase = t*w1 + w1*level/w2 * sin(w2*t);\n    return sin(phase);\n}\n\n\nfloat marimba(float t, float freq, float dur)\n{\n    float env = smoothstep(0.,0.003,t) * exp(-25.*t) * smoothstep(dur,dur-0.01,t);\n    // Frequency modulation\n    return fmSynth(t, freq, 4300., exp(-100.*t)) * env;\n}\n\n\n\nvec2 mainSound( in int samp, float t )\n{\n    float SPEED2 = 8.;\n    vec2 sig = vec2(0);\n    for(float k=0.;k<5.;k++){\n    \tfloat i = (floor(t*SPEED2)-k)/SPEED2;\n        float t_ = t-i;\n    \tfloat freq = 440. * pow(2., round(random(i) * 12. + 7.)/12.);\n    \tsig += vec2(marimba(t_, freq, 1.));\n    }\n    return sig * 0.1;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"\n#define PI 3.1415926535\n#define TAU (2.*PI)\n#define R(a) mat2(cos(a), sin(a), -sin(a), cos(a))\n#define SPEED 5.\n\nfloat random(in float v){\n    return fract(sin(dot(vec2(v+2.),vec2(12.9898,78.233)))*43758.5453123);\n}\n","name":"Common","description":"","type":"common"}]}