{"ver":"0.1","info":{"id":"3lsczH","date":"1591459176","viewed":581,"name":"video temporal statistics","username":"FabriceNeyret2","description":"red = temporal mean, green = temporal std-dev, blue = temporal autocorrelation\n( relaxation time Common:relax )","likes":7,"published":3,"flags":34,"usePreview":0,"tags":["video"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    O = T(U);\n    float  m = O.r/O.a, s = O.b, c = s/m;     // mean, std-dev, autocorrelation\n    O = vec4( sqrt(m), sqrt(s), sqrt(c), 1);  // to sRGB\n  //O = O.zzzz;                               // display autocorrelation only\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    O.r = T(U).a;\n    O.g = O.r*O.r;\n    O.a = 1.;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float relax = 20. , // relaxation time in frames\n      b = 0.;       // LOD bias\n\n#define R iResolution.xy\n \n#define  T(U) texture(iChannel0,(U)/R, b)\n#define T1(U) texture(iChannel1,(U)/R ,b)\n#define T2(U) texture(iChannel2,(U)/R, b)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 O, vec2 U )\n{\n    U.x = R.x-U.x;           // video = mirror\n    O   =  T(U);\n    O.a = dot(O.rgb,O.rgb);  // sRGB to flat\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// --- compute temporal moments M1,M2 (.rg), and std-dev (.b) \n//     .a = normalization -> mean = .r/.a\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O = T2(U);\n  //b = 2.;                                    // use LOD input \n  //relax = mix(40., 2., clamp(4.*O.b,0.,1.)); // adaptive integration\n    O = mix( O , T(U), 1./relax );             // relaxation\n    \n    float m =               O.r/O.a,           // temporal mean \n          s = sqrt( max(0., O.g/O.a - m*m ) ); // temporal std dev\n    O.b = s;\n}","name":"Buffer C","description":"","type":"buffer"}]}