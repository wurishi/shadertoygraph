{"ver":"0.1","info":{"id":"cstBzM","date":"1696978724","viewed":122,"name":"RGB Flow [Sin Distortion]","username":"nextrix","description":"kinda cool ig\nfrom one of my unity shaders","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["distortion","rgb","flow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define power 1.\n#define zoomOut 3.\n#define rot 1.\n#define iter 10.\n#define huePower 0.7\n#define glow 0.5\n#define distortScale 0.8\n#define distortPower 0.45\n#define Speed 1.5\n#define WaveSpeed 2.\n#define Brightness 0.5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\tvec2 XYScale = vec2(1.,1.);\n\tvec2 XYMove = vec2(0.0,0.0);\n\n    uv *= zoomOut;\n\tuv.xy = uv.xy * XYScale;\n\tuv.xy = uv.xy + XYMove;\n\tvec3 finalCol = vec3(0,0,0);\n\tfloat halfDistort = distortScale / 0.5;\n\tfloat distortsc2 = distortScale / distortScale + halfDistort;\n    \n\tfor(float i = 1.0; i < iter; i++){\n\t\tuv.x += distortPower / i * sin(i * distortScale * uv.y - iTime * Speed);\n\t\tuv.y += distortPower / i * sin(i * distortsc2 * uv.x + iTime * Speed);\n\t}\n    \n\tvec3 col = vec3(vec3(glow,glow,glow)/sin(iTime*WaveSpeed-length(uv.yx) - uv.y));\n\tfinalCol = vec3(col*col);\n    vec3 Color = vec3(1.,1.,1.) * Brightness;\n\t\n    Color = Color*Color * 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)) * huePower;\n    //Color = Color*Color * 0.5 + 0.5*cos(iTime*uv.xyx+vec3(0,2,4)) * huePower;   // uncomment for a cool effect (replaced iTime+uv with iTime*uv)\n\n    // Output to screen\n    fragColor = vec4(finalCol.rgb * Color, 1) * power;\n}","name":"Image","description":"","type":"image"}]}