{"ver":"0.1","info":{"id":"WddSzj","date":"1572548440","viewed":66,"name":"CheckerBoard1.IntroToGraphics","username":"EvanTheBean","description":"checkerboard","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Choose number of Tiles\nfloat tilesx = 10.0;\nfloat tilesy = 10.0;\n\n//Checkerboard colors\nvec4 white = vec4(1.0,1.0,1.0,1.0);\nvec4 black = vec4(0.0,0.0,0.0,1.0);\nvec4 bkCol = vec4(0.0,1.0,0.0,1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Normalized pixel coordinates (from 0 to 1)\n\tvec2 uv = fragCoord/iResolution.xy;\n\n    //Tile the uv for the number of necassary tiles\n\tuv.x*=tilesx;\n    uv.y*=tilesy;\n    \n    //Determine what axis to modify depending on tile ratio\n    float uvModifier = step(tilesx / tilesy, iResolution.x/iResolution.y);\n        \n    //modify the x\n    float aspectRatioX = iResolution.x/iResolution.y;\n\tuv.x *= (aspectRatioX * (uvModifier)) + (1.0 - uvModifier); //use \"uvModifier\" to determine weather its 1 or aspectRatioX\n   \tuv.x /= (tilesx/tilesy * (uvModifier)) + (1.0 - uvModifier);//use \"uvModifier\" to determine weather its 1 or tiles\n    \n    //OR modify the y\n    float aspectRatioY = iResolution.y/iResolution.x;\n\tuv.y *= (aspectRatioY * (1.0 - uvModifier)) + (uvModifier);//use \"uvModifier\" to determine weather its 1 or aspectRatioY\n   \tuv.y /= (tilesy/tilesx * (1.0 - uvModifier)) + (uvModifier);//use \"uvModifier\" to determine weather its 1 or tiles\n    \n\t//Figure out which tiles are cut off (only ever in the y)\n\tfloat outOfBoundsY = step(floor(tilesy),uv.y);\n    float outOfBoundsX = step(floor(tilesx),uv.x);\n    \n\t//get tile number%2 (odd or even on each line)\n\tfloat onOffY = mod(floor(uv.y),2.0);\n\tfloat onOffX = mod(floor(uv.x),2.0);\n\n\t//Output to screen\n\tvec4 col = mix(white,black,abs(onOffY-onOffX)); //abs(onOffY-onOffX) makes it a checkerboard by relying on the value of the other direction\n\tcol = mix(col,bkCol,outOfBoundsY); //add the backround color over all cut off squares\n    fragColor = mix(col,bkCol,outOfBoundsX); //add the backround color over all cut off squares\n}","name":"Image","description":"","type":"image"}]}