{"ver":"0.1","info":{"id":"4dcfDS","date":"1537185341","viewed":381,"name":"Eternal Darkness - Team210","username":"nr4","description":"Evoke 2018 64k intro \"Eternal Night\" by Team210. Final size: 12k\nCode/GFX :: NR4\nCode/SFX :: QM","likes":5,"published":1,"flags":8,"usePreview":1,"tags":["procedural","raymarching","voronoi","tunnel","sound","text","demoscene","fm","spline","am","synth","team210"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Eternal Darkness by Team210\n * Copyright (C) 2018  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1., 0., -1.);\n\nvec2 vi;\nfloat t;\n#define T .4286\n\nfloat rand(vec2 a0)\n{\n    return -1.+2.*fract(sin(dot(a0.xy ,vec2(12.9898,78.233)))*43758.5453);\n}\n\nfloat rand3(vec3 a0)\n{\n    return .33333*(rand(a0.xy)+rand(a0.yz)+rand(a0.zx));\n}\n\n//distance to quadratic bezier spline with parameter t\nfloat dist(vec2 p0,vec2 p1,vec2 p2,vec2 x,float t)\n{\n    t = clamp(t, 0., 1.);\n    return length(x-pow(1.-t,2.)*p0-2.*(1.-t)*t*p1-t*t*p2);\n}\n\n//minimum distance to quadratic bezier spline\nfloat dsp(vec2 p0, vec2 p1, vec2 p2, vec2 x)\n{\n    //coefficients for 0 = t^3 + a * t^2 + b * t + c\n    vec2 E = x-p0, F = p2-2.*p1+p0, G = p1-p0;\n    vec3 ai = vec3(3.*dot(G,F), 2.*dot(G,G)-dot(E,F), -dot(E,G))/dot(F,F);\n\n\t//discriminant and helpers\n    float tau = ai.x/3., p = ai.y-tau*ai.x, q = - tau*(tau*tau+p)+ai.z, dis = q*q/4.+p*p*p/27.;\n    \n    //triple real root\n    if(dis > 0.) \n    {\n        vec2 ki = -.5*q*c.xx+sqrt(dis)*c.xz, ui = sign(ki)*pow(abs(ki), c.xx/3.);\n        return dist(p0,p1,p2,x,ui.x+ui.y-tau);\n    }\n    \n    //three distinct real roots\n    float fac = sqrt(-4./3.*p), arg = acos(-.5*q*sqrt(-27./p/p/p))/3.;\n    vec3 t = c.zxz*fac*cos(arg*c.xxx+c*pi/3.)-tau;\n    return min(\n        dist(p0,p1,p2,x, t.x),\n        min(\n            dist(p0,p1,p2,x,t.y),\n            dist(p0,p1,p2,x,t.z)\n        )\n    );\n}\n\n//distance to 3d spline with parameter t\nfloat dist(vec3 p0,vec3 p1,vec3 p2,vec3 x,float t)\n{\n    t = clamp(t, 0., 1.);\n    return length(x-pow(1.-t,2.)*p0-2.*(1.-t)*t*p1-t*t*p2);\n}\n\n//minimum distance to worm\nfloat worm(vec3 p0, vec3 p1, vec3 p2, vec3 x)\n{\n    //coefficients for 0 = t^3 + a * t^2 + b * t + c\n    vec3 E = x-p0, F = p2-2.*p1+p0, G = p1-p0,\n    \tai = vec3(3.*dot(G,F), 2.*dot(G,G)-dot(E,F), -dot(E,G))/dot(F,F);\n\n\t//discriminant and helpers\n    float tau = ai.x/3., p = ai.y-tau*ai.x, q = - tau*(tau*tau+p)+ai.z, dis = q*q/4.+p*p*p/27.;\n    \n    //triple real root\n    if(dis > 0.) \n    {\n        vec2 ki = -.5*q*c.xx+sqrt(dis)*c.xz, ui = sign(ki)*pow(abs(ki), c.xx/3.);\n        return dist(p0,p1,p2,x,ui.x+ui.y-tau)-(.03+.01*mod(t,T)/T-.005*cos(1.7*pi*(ui.x+ui.y-tau))+.01*abs(sin(2.*pi*10.*(ui.x+ui.y-tau))));\n    }\n    \n    //three distinct real roots\n    float fac = sqrt(-4./3.*p), arg = acos(-.5*q*sqrt(-27./p/p/p))/3.;\n    vec3 t = c.zxz*fac*cos(arg*c.xxx+c*pi/3.)-tau;\n    return min(\n        dist(p0,p1,p2,x, t.x)-(.03+.01*mod(iTime,T)/T-.005*cos(1.7*pi*t.x)+.01*abs(sin(2.*pi*10.*t.x))),\n        min(\n            dist(p0,p1,p2,x,t.y)-(.03+.01*mod(iTime,T)/T-.005*cos(1.7*pi*t.y)+.01*abs(sin(2.*pi*10.*t.y))),\n            dist(p0,p1,p2,x,t.z)-(.03+.01*mod(iTime,T)/T-.005*cos(1.7*pi*t.z)+.01*abs(sin(2.*pi*10.*t.z)))\n        )\n    );\n}\n\n//minimum distance to linear bezier spline\nfloat dsg(vec2 p0, vec2 p1, vec2 x)\n{\n    vec2 d = p1-p0;\n    float t = clamp(dot(x-p0,d)/dot(d,d),0.,1.);\n    return length(x-mix(p0,p1,t));\n}\n\nfloat smoothstep_noise1d(float x)\n{\n    float d = floor(x);\n    x = fract(x);\n    float x0 = rand(d*c.xx), x1 = rand((d+1.)*c.xx);\n    return mix(x0, x1, smoothstep(0., 1., x));\n}\n\nfloat smoothstep_noise2d(vec2 x)\n{\n    vec2 d = floor(x);\n    x = fract(x);\n    float x00 = rand(d),\n        x01 = rand(d+c.yx),\n        x10 = rand(d+c.xy), \n        x11 = rand(d+c.xx);\n    return mix(mix(x00, x01, smoothstep(0.,1., x.y)), mix(x10, x11, smoothstep(0.,1., x.y)), smoothstep(0.,1., x.x));\n}\n\n//TODO: optimize compile time\n/*\nfloat smoothstep_noise3d(vec3 x)\n{\n    vec3 d = floor(x);\n    x = fract(x);\n    float x000 = rand3(d),\n        x100 = rand3(d+c.xyy),\n        x010 = rand3(d+c.yxy),\n        x001 = rand3(d+c.yyx),\n        x110 = rand3(d+c.xxy),\n        x011 = rand3(d+c.yxx),\n        x101 = rand3(d+c.xyx),\n        x111 = rand3(d+c.xxx);\n    return mix(\n                mix(\n                    mix(x000, x001, smoothstep(0., 1., x.z)),\n                    mix(x100, x101, smoothstep(0., 1., x.z)),\n                    smoothstep(0., 1., x.x)),\n       \t\t\tmix(\n                    mix(x010, x011, smoothstep(0., 1., x.z)),\n                    mix(x110, x111, smoothstep(0., 1., x.z)),\n                    smoothstep(0., 1., x.x)),\n        \t\tsmoothstep(0., 1., x.y)\n    \t\t);\n}*/\n\nfloat mfsmoothstep_noise2d(vec2 x, float f0, float f1, float phi)\n{\n    float sum = 0.;\n    float a = 1.2;\n    \n    for(float f = f0; f<f1; f = f*2.)\n    {\n        sum = a*smoothstep_noise2d(f*x) + sum;\n        a = a*phi;\n    }\n    \n    return sum;\n}\n\n/*\nfloat mfsmoothstep_noise3d(vec3 x, float f0, float f1, float phi)\n{\n    float sum = 0.;\n    float a = 1.;//1.2;\n    \n    for(float f = f0; f<f1; f = f*2.)\n    {\n        sum = a*smoothstep_noise3d(f*x) + sum;\n        a = a*phi;\n    }\n    \n    return sum;\n}*/\n\nfloat cs(vec2 x, float r0, float w, float p0, float p1)\n{\n    float r = length(x), p = acos(x.x/r)*step(0.,x.y)-acos(x.x/r)*step(x.y,0.);\n    p = clamp(p, p0, p1);\n    vec2 y = r0*vec2(cos(p), sin(p));\n    return length(x-y)-w;\n}\n\nfloat b(vec2 x, vec2 a, vec2 b, float w)\n{\n    vec2 d = b-a;\n    return length(x-mix(a, b, clamp(dot(x-a, d)/dot(d,d), 0., 1.)))-w;\n}\n\nvoid wave(in int i, out float st, out float am, out vec2 di, out float fr, out float sp)\n{\n    //setup wave params\n\t//st = abs(.035*rand(vec2(float(i))));//qi\n\tst = 55.*rand(float(-i)*c.xx);\n    //am = .002*mod(float(i),4.5)+.005*mod(float(i),3.8)*rand(vec2(float(i+2)));//ai\n    am = 1.2e-4*pow(.9, float(i-1))*rand(float(i)*c.xx);\n    //di = (4.*mod(float(5*i),2.2)+mod(float(i),2.6)*5.*vec2(1.7e0*rand(vec2(i,i+1)), 2.e0*rand(vec2(i+1,i))));//di\n    //di = 2.*vec2(rand(float(i)*c.xx), rand(float(i+1)*c.xx));\n    di = c.yx*rand(float(i)*c.xx)+.3*c.xy*rand(float(i)*c.xy);\n    fr = pow(.5+.1*rand(float(i+1)*c.xx), float(i))*(1.+.2*rand(float(i)*c.xx))*7.e2;\n    sp = 12.e0*mod(float(i*3),2.5)*rand(vec2(float(i+4)));//phi\n}\n\nfloat gerst(vec2 x, int nwaves)\n{\n    //vec3 val = vec3(x.xy, 0.);\n    float val = 0.;\n    \n   \tfloat st,fr,sp,am;\n    vec2 di;\n    \n    for(int i=0; i<nwaves; ++i)\n    {\n   \t\twave(i, st, am, di, fr, sp);\n        \n        //gen values\n        float d = dot(di, x);\n        val += am*sin(fr*d+sp*t);\n\t\t//val += vec3(st*am*di*cos(fr*d+sp*t), am*sin(fr*d+sp*t));\n    }\n\n    return val;\n}\n\n/* compute voronoi distance and closest point.\n * x: coordinate\n * return value: vec3(distance, coordinate of control point)\n */\nvec3 vor(vec2 x)\n{\n    x += 12.;// mod(x,6.*2.*pi);\n    vec2 y = floor(x);\n   \tfloat ret = 1.;\n    \n    //find closest control point. (\"In which cell am I?\")\n    vec2 pf=c.yy, p;\n    float df=100., d;\n    \n    vec3 a = c.xyy*100.;\n    \n    for(float i=-2.; i<=2.; i+=1.)\n        for(float j=-2.; j<=2.; j+=1.)\n        {\n            p = y + vec2(i, j);\n            p += rand(p);\n            \n            d = length(x-p);\n            \n            a = mix(a, vec3(d,p), step(d, a.x));\n        }\n    \n    //compute voronoi distance: minimum distance to any edge\n    for(float i=-2.; i<=2.; i+=1.)\n        for(float j=-2.; j<=2.; j+=1.)\n        {\n            p = y + vec2(i, j);\n            p += rand(p);\n            \n            vec2 o = p - a.yz;\n            d = dot(.5*o-x+a.yz, o)/length(o);\n            ret = min(ret, d);\n        }\n    \n    return vec3(ret, pf);\n}\n\nvec3 rot(vec3 x, vec3 theta)\n{\n    vec3 c = cos(theta), s = sin(theta);\n    return mat3(c.x,0.,s.x,0.,1.,0.,-s.x,0.,c.x)\n        *mat3(1., 0., 0., 0., c.y, -s.y, 0., s.y, c.y)\n        *mat3(c.z,-s.z,0., s.z,c.z,0., 0.,0.,1.)*x;\n}\n\n// compute distance to regular star\nfloat dstar(vec2 x, float N, vec2 R)\n{\n    float d = pi/N,\n        p0 = acos(x.x/length(x)),\n        p = mod(p0, d),\n        i = mod(round((p-p0)/d),2.);\n    x = length(x)*vec2(cos(p),sin(p));\n    vec2 a = mix(R,R.yx,i),\n    \tp1 = a.x*c.xy,\n        ff = a.y*vec2(cos(d),sin(d))-p1;\n   \tff = ff.yx*c.zx;\n    return dot(x-p1,ff)/length(ff);\n}\n\n// compute distance to regular polygon\nfloat dpoly_min(vec2 x, float N, float R)\n{\n    float d = 2.*pi/N,\n        t = mod(acos(x.x/length(x)), d)-.5*d;\n    return R-length(x)*cos(t)/cos(.5*d);\n}\n\n//returns vec2(sdf, material)\nvec2 z10presents(vec2 x)\n{\n    vec2 sda = vec2(b(x, vec2(-.5, -.4), vec2(iResolution.x/iResolution.y,-.4), .05), 1.),\n        sdb = vec2(b(x, vec2(-.5, -.4), vec2(iResolution.x/iResolution.y,-.4), .02), 2.);\n    return mix(sda, sdb, step(1., sdb.x));\n}\n\n//dusk scene\nvec2 scene1(vec3 x)\n{\n    x += c.xyy*5.e-2*t;\n    return vec2(x.z+.5-.5*mfsmoothstep_noise2d(x.xy, .9, 1., .1)+.05*mfsmoothstep_noise2d(x.xy, 120., 180., 1.7), 1.);\n}\n\n//lake scene\nvec2 scene2(vec3 x)\n{\n    x += -13.*c.yxy + c.xxy * 25.+c.yxy*5.e-2*t;\n    float k =- .5*mfsmoothstep_noise2d(x.xy, .91, 2., .1);\n    if(x.z>-.19) k += .05*mfsmoothstep_noise2d(x.xy, 120., 180., 1.7);\n    vec2 sda = vec2(x.z+k, 1.),\n        sdb = vec2(x.z+.21-gerst(x.xy, 22), 2.);\n    return mix(sda,sdb,step(sdb.x,sda.x));\n}\n\n//tree fog scene\nvec2 scene3(vec3 x)\n{\n    x += c.yxy*5.e-1*t+.5*c.yyx;\n    vec3 y = vec3(mod(x.x, 2.)-1., mod(x.y, 2.)-1., x.z), z = x-y;\n    vec2 sda = vec2(length(y.xy-.5*vec2(rand(z.xy),rand(z.xy*1.1)))-.1, 1.), \n        sdb = vec2(x.z-.2*mfsmoothstep_noise2d(x.xy, .9, 1., .1), 1.);\n    float guard = -length(max(abs(y)-vec3(1.,2.,50.), 0.));\n    guard = abs(guard)+2.*.2;\n    sda.x = min(sda.x, guard);\n    \n    return mix(sdb, sda, step(sda.x, sdb.x));\n}\n\n//worm scene\nvec2 scene4(vec3 x)\n{\n    vec3 x0 = x;\n    x += 1.e0*t*c.yxy;\n    \n    vec3 y = x;\n    x = mod(x,1.)-.5;\n    \n    vec3 i = y-x;\n    float l = length(i);\n    vec3\n        dx = .25*vec3(rand(l*c.xx), rand(3.*l*c.xx), rand(6.*l*c.xx));\n    \n    vec2 sda = vec2(worm(c.yyy, vec3(.1*sin(5.*t+10.*rand(length(y-x)*c.xx)),0.,.1), .2*c.yyx, x-dx), 3.),\n        sdb = vec2(length(x-dx)-(.036+.01*mod(t,T)/T),4.),\n    \tsdf = mix(sda,sdb, step(sdb.x,sda.x)),\n        sdc = vec2(length(x-.2*c.yyx-dx)-(.036+.01*mod(t,T)/T),4.);\n    sdf = mix(sdf, sdc, step(sdc.x, sdf.x));\n\n   //vec2 sdf=c.xy,  sda;\n\n    float phi =3.*acos(min(y.z,y.x)/length(y.xz));\n    vec3 vp = .5*vor(vec2(y.y+phi,phi));//+.1*vor(2.*vec2(phi, y.y));//-.02*vor(5.*vec2(phi,y.y));\n    //vec3 vp = .5*vor(y.xy+20.);\n    float v = vp.x;\n    vi = vp.yz;\n    sda = vec2(abs(length(y.xz)-3.)-v, 5.);\n    //sda = vec2(y.z+2.5-v, 5.);\n    sdf = mix(sdf, sda, step(sda.x, sdf.x));\n    \n\n    float guard = -length(max(abs(x)-.5,0.));\n    guard = abs(guard)+1.*.1;\n    sdf.x = min(sdf.x, guard);\n\n    return sdf;\n}\n\n//party scene\nvec2 scene5(vec3 x)\n{   \n    vec3 x0 = x;\n    x += 1.e0*t*c.yxy;\n    \n    vec3 y = x;\n    x = vec3(mod(x.xy,1.)-.5, x.z);\n\n    vec3 index = y-x;\n    vi = index.xy;\n    float ang = 2.*pi*rand(index.xy)*t;\n    x.xy = mat2(cos(ang), sin(ang), -sin(ang), cos(ang))*x.xy;\n\n    float ds = dstar(x.xy, 3.+floor(7.*abs(rand(index.xy+6.))), vec2(.2+.05*rand(vi),.3+.05*rand(vi+3.)));\n    \n    //vec2 sdf = vec2(length(vec2(min(ds,0.), min(abs(x.z+1.3), 0.05))) ,6.);\n    vec2 d = abs(vec2(min(ds,0.),x.z+1.3)) -.4*c.yx- (.5+2.*mod(t,T))*.5*abs(rand(index.xy+t-mod(t,T)))*c.yx;\n    vec2 sdf = vec2(min(max(d.x,d.y),0.) + length(max(d,0.0)),6.);\n    \n\n    //ds = dstar(x.xy, 3.+7.*rand(index), vec2(.2,.4));\n    \n    //vec2 sda = vec2(length(vec2(min(ds,0.), min((x.z-1.3+(.5+mod(t,T))*.5*rand(index.xy+t-mod(t,T))), 0.))) ,6.);\n    d = abs(vec2(min(ds,0.),x.z-1.3)) -.4*c.yx- (.5+2.*mod(t,T))*.5*rand(index.xy+t-mod(t,T))*c.yx;\n    vec2 sda = vec2(min(max(d.x,d.y),0.) + length(max(d,0.0)),6.);\n    \n    sdf = mix(sdf, sda, step(sda.x, sdf.x));\n    \n    \n    float guard = -length(max(abs(x+50.*c.yyx)-vec3(.5,.5,100.),0.));\n    guard = abs(guard)+1.*.1;\n    sdf.x = min(sdf.x, guard);\n    \n    return sdf;\n}\n\nvec2 scene(vec3 x)\n{\n    if(t < 48.*.4286) return scene1(x);//TODO: direction\n    else if(t < 96.*.4286) return scene2(x);\n    else if(t < 144.*.4286) return scene3(x);\n    else if(t < 184.*.4286) return scene4(x);\n    else if(t < 7000.) return scene5(x);\n}\n\nconst float dx = 1.e-4;\nvec3 normal(vec3 x)\n{\n    float s = scene(x).x;\n    return normalize(vec3(\n        scene(x + dx*c.xyy).x-s,\n        scene(x + dx*c.yxy).x-s,\n        scene(x + dx*c.yyx).x-s\n    ));\n}\n\nvec3 bg(vec2 uv)\n{\n    if(t<20.)\n    {\n    \tuv += .01*t*c.yx;\n\n    \tvec2 x = mod(uv, .05)-.025, y=uv-x;\n    \tfloat sun = .17*exp(-2.e-1*t);\n    \treturn .15*c.xxx+mix(.4*c.xyy, .8*c.xxy, 1.-2.*(uv.y)-length(uv))*exp(-2.e-1*t)//sky\n        \t+c.xxx*smoothstep(sun+.01, sun-.01,length(uv))//sun\n        \t+2.*tanh(2.e-1*t)*smoothstep(.003, -.003, length(x-.02*vec2(rand(y), rand(.1*y+.1*c.xx)))-.002*rand(.1*y))\n        \t*(.2*vec3(rand(.1*y),rand(.1*y+.1*c.xx),rand(y+.3*c.xx))+.8)//stars\n    \t\t+(.4+.2*mfsmoothstep_noise2d(uv+cos(.5*t)*sin(.5*uv.x)*sin(.6*uv.y), 2.5, 1.e2, .55))*exp(-5.e-2*t);//clouds\n    }\n    else \n    {\n        return c.xxx;\n    }\n}\n\nfloat B(float ton)\n{\n    return smoothstep(ton-2., ton-1., iTime)*(1.-smoothstep(ton+2., ton+3., iTime));\n}\n\nvoid fore(out vec4 fragColor, in vec2 uv, float time)\n{\n    t = time;\n    \n    vec2 s;\n    vec3 x, o = .5+.5*mfsmoothstep_noise2d(c.yy, .9, 1., .1)-c.yxy+.5*c.yyx, ta = .25*c.yyx, r = c.xyy, u = c.yyx, \n        rt = ta + r * uv.x + u * uv.y, rd = normalize(rt-o);\n    if(t>144.*.43)\n    {\n        o = -c.yxy;\n        ta=c.yyy;\n    }\n    //raymarching\n    float d = 0., vc = 0., cd = 0., ci=15.;\n    int ni = 100;\n    if(time > 48.*.43) ci = 55.;\n    if(time > 96.*.43) \n    {\n        ci = 50.;\n        ni = 200;\n    }\n    else if(time > 144.*.43) ci = 200.;\n    for(int i=0; i<ni; ++i)\n    {\n        x = o + d * rd;\n        s = scene(x);\n        if(s.x<5.e-3)break;\n        if((d>ci) || (i==ni-1))\n        {\n            //fragColor = vec4(mix(bg(uv),c.xxx,vc/cd), 1.);\n            fragColor = vec4(bg(uv), 1.);\n            return;\n        }\n        d += s.x;\n        \n        //volumetric clouds\n        //cd += 5.e-1;\n\t    //vc += smoothstep(0.,1.5, x.z)*mfsmoothstep_noise3d(o+cd*rd, 1., 100., .35) ;\n    }\n    \n\t//illumination\n    vec3 n = normal(x), l = c.yxy, l2 = x+c.yyx, v = normalize(x-o), re = normalize(reflect(-l, n)), \n        re2 = normalize(reflect(-l2, n)), col;\n    if(s.y == 1.)\n    {\n        col = .01*c.xyy*dot(l,n)+.2*c.xxx*pow(abs(dot(re,v)), 4.)+(.05*c.xyy+.05*c.yxy)*pow(abs(dot(re,v)), 2.);\n    \tcol *= exp(-2.e-1*iTime);\n    }\n    else if(s.y == 2.)\n    {\n        col = .4*c.xxx*dot(l2,n)+.2*c.xxx*pow(abs(dot(re2,v)), 2.);\n    }\n    else if(s.y == 3.)//worm body\n    {\n        col = .6-(.8*c.yyx+.3*c.xyy)*dot(l,n)*mod(t,T)/T+.8*c.xxx*dot(l,n)+.2*c.xxx*pow(abs(dot(re,v)), 4.)+(.05*c.xyy+.05*c.yxy)*pow(abs(dot(re,v)), 2.);\n    }\n    else if(s.y == 4.)//worm ends\n    {\n        col = 1.+.8*c.xxx*dot(l,n)+.2*c.xxx*pow(abs(dot(re,v)), 4.)+(.05*c.yyx+.05*c.yyx)*pow(abs(dot(re,v)), 2.);\n    }\n    else if(s.y == 5.)//worm tunnel\n    {\n        l = normalize(x);\n        re = normalize(reflect(-l,n));\n        v = normalize(x-o);\n        col = .6+.3*vec3(.75+.1*rand(vi),.75+.1*rand(2.*vi), .6+.4*rand(5.*vi))*dot(l,n)*mod(t,T)/T+.8*c.xxx*dot(l,n)+.05*c.xxx*pow(abs(dot(re,v)), 2.);\n    }\n    else if(s.y == 6.)//dance\n    {\n        l = normalize(x-c.yxy);\n        re = normalize(reflect(-l,n));\n        v = normalize(x-c.yxy-o);\n        vec3 co = .5 + .5*cos(x+vec3(0.,2.,4.)+5.e-1*abs(rand(vi))+time), \n            co2 = .5 + .5*cos(x+vec3(0.,2.,4.)+6.e-1*abs(rand(vi+3.))+time),\n            co3 = .5 + .5*cos(x+vec3(0.,2.,4.)+7.e-1*abs(rand(vi+7.))+time);\n        col = co+co2*dot(l,n)+.1*co3*pow(abs(dot(re,v)), 2.);\n    }\n    \n    else col = c.yyy;\n    \n    //fog\n    if(time < 48.*.4286)\n\t    col = mix(col, .15*c.xxx, cosh(-2.e-0*x.z)*tanh(1.09e-1*x.y));\n    else if(time < 96.*.4286)\n        col = mix(col, c.xxx, tanh(1.e-1*x.y));\n    else if(time < 7000.)\n        col = mix(col, c.xxx, tanh(8.e-2*x.y));\n    fragColor = vec4(col,1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //camera setup\n    vec2 uv = fragCoord/iResolution.yy-.5, s;\n    \n    vec4 dt1, dt2, dt3;\n    fore(dt1, uv, iTime);\n    if(iTime < 40.)\n    {\n        fore(dt2, uv, iTime+1.e-2);\n        //fore(dt3, uv, iTime+2.e-2);\n        fragColor = .333*(dt1+dt2);\n    }\n    else\n    {\n        fragColor = dt1;\n    }\n\n    vec3 col = fragColor.xyz;\n    \n    //banner for text\n    if(iTime < 180.)\n    {\n        s = z10presents(uv);\n        float sc = step(s.x, 0.) ; //objects\n        if(s.y == 1.)\n            col = mix(col, mix(col, c.xxx, .1), sc);\n     }\n\n    //lens effect\n    vec2 u = uv+(.01*iTime-.12)*c.yx;\n    float ph = atan(abs(u.y/u.x)), ra = length(u);\n    col += 1.4*(.5+.25*sin(2.3*pi*ph)+.25*sin(4.*pi*ph)+.25*sin(1.5*pi*ph))*exp(-3.*ra)*c.xxx*exp(-9.e-1*t)*(1.-smoothstep(1.4,1.6,iTime));\n    \n    //text\n    float d = 1.;\n    if(iTime < 8.)\n    {\n        int end = 42;\n        const vec2 lin[84] = vec2[84](vec2(-3.88e-01,-4.15e-01),vec2(-3.88e-01,-3.68e-01),vec2(-4.00e-01,-3.68e-01),vec2(-3.77e-01,-3.68e-01),vec2(-3.53e-01,-4.15e-01),vec2(-3.41e-01,-4.15e-01),vec2(-3.64e-01,-4.03e-01),vec2(-3.41e-01,-4.03e-01),vec2(-3.05e-01,-4.15e-01),vec2(-3.05e-01,-3.92e-01),vec2(-2.93e-01,-4.15e-01),vec2(-2.93e-01,-3.92e-01),vec2(-2.70e-01,-4.15e-01),vec2(-2.70e-01,-4.03e-01),vec2(-2.47e-01,-4.15e-01),vec2(-2.47e-01,-4.03e-01),vec2(-2.34e-01,-4.15e-01),vec2(-2.11e-01,-4.15e-01),vec2(-1.99e-01,-3.80e-01),vec2(-1.87e-01,-3.68e-01),vec2(-1.87e-01,-3.68e-01),vec2(-1.87e-01,-4.15e-01),vec2(-1.75e-01,-4.03e-01),vec2(-1.75e-01,-3.80e-01),vec2(-1.51e-01,-4.03e-01),vec2(-1.51e-01,-3.80e-01),vec2(-1.15e-01,-4.38e-01),vec2(-1.15e-01,-3.92e-01),vec2(-1.15e-01,-3.92e-01),vec2(-1.04e-01,-3.92e-01),vec2(-1.15e-01,-4.15e-01),vec2(-1.04e-01,-4.15e-01),vec2(-7.97e-02,-4.15e-01),vec2(-7.97e-02,-3.92e-01),vec2(-2.02e-02,-3.92e-01),vec2(-2.02e-02,-4.03e-01),vec2(3.08e-03,-3.92e-01),vec2(3.08e-03,-4.15e-01),vec2(2.70e-02,-3.92e-01),vec2(3.87e-02,-3.92e-01),vec2(2.70e-02,-4.15e-01),vec2(3.87e-02,-4.15e-01),vec2(3.87e-02,-4.15e-01),vec2(3.87e-02,-3.68e-01),vec2(5.09e-02,-4.03e-01),vec2(5.09e-02,-3.68e-01),vec2(7.48e-02,-3.92e-01),vec2(7.48e-02,-4.03e-01),vec2(9.82e-02,-3.92e-01),vec2(9.82e-02,-4.27e-01),vec2(8.65e-02,-4.38e-01),vec2(7.48e-02,-4.38e-01),vec2(1.34e-01,-4.38e-01),vec2(1.34e-01,-3.92e-01),vec2(1.34e-01,-3.92e-01),vec2(1.46e-01,-3.92e-01),vec2(1.34e-01,-4.15e-01),vec2(1.46e-01,-4.15e-01),vec2(1.70e-01,-4.15e-01),vec2(1.70e-01,-3.92e-01),vec2(2.06e-01,-4.15e-01),vec2(2.17e-01,-4.15e-01),vec2(1.94e-01,-4.03e-01),vec2(2.17e-01,-4.03e-01),vec2(2.29e-01,-4.15e-01),vec2(2.41e-01,-4.15e-01),vec2(2.41e-01,-3.92e-01),vec2(2.53e-01,-3.92e-01),vec2(2.77e-01,-4.15e-01),vec2(2.88e-01,-4.15e-01),vec2(2.65e-01,-4.03e-01),vec2(2.88e-01,-4.03e-01),vec2(3.01e-01,-4.15e-01),vec2(3.01e-01,-3.92e-01),vec2(3.24e-01,-4.03e-01),vec2(3.24e-01,-4.15e-01),vec2(3.48e-01,-4.03e-01),vec2(3.48e-01,-3.68e-01),vec2(3.36e-01,-3.92e-01),vec2(3.60e-01,-3.92e-01),vec2(3.72e-01,-4.15e-01),vec2(3.83e-01,-4.15e-01),vec2(3.83e-01,-3.92e-01),vec2(3.95e-01,-3.92e-01)),\n        quad[141] = vec2[141](vec2(-3.41e-01,-4.03e-01),vec2(-3.41e-01,-3.92e-01),vec2(-3.53e-01,-3.92e-01),vec2(-3.53e-01,-3.92e-01),vec2(-3.64e-01,-3.92e-01),vec2(-3.64e-01,-4.03e-01),vec2(-3.64e-01,-4.03e-01),vec2(-3.64e-01,-4.15e-01),vec2(-3.53e-01,-4.15e-01),vec2(-3.17e-01,-3.92e-01),vec2(-3.29e-01,-3.92e-01),vec2(-3.29e-01,-4.03e-01),vec2(-3.29e-01,-4.03e-01),vec2(-3.29e-01,-4.15e-01),vec2(-3.17e-01,-4.15e-01),vec2(-3.17e-01,-4.15e-01),vec2(-3.05e-01,-4.15e-01),vec2(-3.05e-01,-4.03e-01),vec2(-3.17e-01,-3.92e-01),vec2(-3.05e-01,-3.92e-01),vec2(-3.05e-01,-4.03e-01),vec2(-2.93e-01,-4.03e-01),vec2(-2.93e-01,-3.92e-01),vec2(-2.82e-01,-3.92e-01),vec2(-2.82e-01,-3.92e-01),vec2(-2.70e-01,-3.92e-01),vec2(-2.70e-01,-4.03e-01),vec2(-2.70e-01,-4.03e-01),vec2(-2.70e-01,-3.92e-01),vec2(-2.58e-01,-3.92e-01),vec2(-2.58e-01,-3.92e-01),vec2(-2.47e-01,-3.92e-01),vec2(-2.47e-01,-4.03e-01),vec2(-2.34e-01,-3.68e-01),vec2(-1.99e-01,-3.57e-01),vec2(-2.34e-01,-4.15e-01),vec2(-1.75e-01,-4.03e-01),vec2(-1.75e-01,-4.15e-01),vec2(-1.63e-01,-4.15e-01),vec2(-1.63e-01,-4.15e-01),vec2(-1.51e-01,-4.15e-01),vec2(-1.51e-01,-4.03e-01),vec2(-1.51e-01,-3.80e-01),vec2(-1.51e-01,-3.68e-01),vec2(-1.63e-01,-3.68e-01),vec2(-1.63e-01,-3.68e-01),vec2(-1.75e-01,-3.68e-01),vec2(-1.75e-01,-3.80e-01),vec2(-1.04e-01,-4.15e-01),vec2(-9.20e-02,-4.15e-01),vec2(-9.20e-02,-4.03e-01),vec2(-9.20e-02,-4.03e-01),vec2(-9.20e-02,-3.92e-01),vec2(-1.04e-01,-3.92e-01),vec2(-7.97e-02,-4.03e-01),vec2(-7.97e-02,-3.92e-01),vec2(-6.81e-02,-3.92e-01),vec2(-4.42e-02,-4.15e-01),vec2(-5.58e-02,-4.15e-01),vec2(-5.58e-02,-4.03e-01),vec2(-5.58e-02,-4.03e-01),vec2(-5.58e-02,-3.92e-01),vec2(-4.42e-02,-3.92e-01),vec2(-4.42e-02,-3.92e-01),vec2(-3.25e-02,-3.92e-01),vec2(-3.25e-02,-4.03e-01),vec2(-3.25e-02,-4.03e-01),vec2(-3.25e-02,-4.15e-01),vec2(-4.42e-02,-4.15e-01),vec2(-2.02e-02,-4.03e-01),vec2(-2.02e-02,-4.15e-01),vec2(-8.58e-03,-4.15e-01),vec2(-8.58e-03,-4.15e-01),vec2(3.08e-03,-4.15e-01),vec2(3.08e-03,-4.03e-01),vec2(2.70e-02,-4.15e-01),vec2(1.53e-02,-4.15e-01),vec2(1.53e-02,-4.03e-01),vec2(1.53e-02,-4.03e-01),vec2(1.53e-02,-3.92e-01),vec2(2.70e-02,-3.92e-01),vec2(5.09e-02,-4.03e-01),vec2(5.09e-02,-4.15e-01),vec2(6.26e-02,-4.15e-01),vec2(7.48e-02,-4.03e-01),vec2(7.48e-02,-4.15e-01),vec2(8.65e-02,-4.15e-01),vec2(8.65e-02,-4.15e-01),vec2(9.82e-02,-4.15e-01),vec2(9.82e-02,-4.03e-01),vec2(9.82e-02,-4.27e-01),vec2(9.82e-02,-4.38e-01),vec2(8.65e-02,-4.38e-01),vec2(1.46e-01,-4.15e-01),vec2(1.58e-01,-4.15e-01),vec2(1.58e-01,-4.03e-01),vec2(1.58e-01,-4.03e-01),vec2(1.58e-01,-3.92e-01),vec2(1.46e-01,-3.92e-01),vec2(1.70e-01,-4.03e-01),vec2(1.70e-01,-3.92e-01),vec2(1.82e-01,-3.92e-01),vec2(2.17e-01,-4.03e-01),vec2(2.17e-01,-3.92e-01),vec2(2.06e-01,-3.92e-01),vec2(2.06e-01,-3.92e-01),vec2(1.94e-01,-3.92e-01),vec2(1.94e-01,-4.03e-01),vec2(1.94e-01,-4.03e-01),vec2(1.94e-01,-4.15e-01),vec2(2.06e-01,-4.15e-01),vec2(2.41e-01,-4.15e-01),vec2(2.64e-01,-4.09e-01),vec2(2.41e-01,-4.03e-01),vec2(2.41e-01,-4.03e-01),vec2(2.18e-01,-3.98e-01),vec2(2.41e-01,-3.92e-01),vec2(2.88e-01,-4.03e-01),vec2(2.88e-01,-3.92e-01),vec2(2.77e-01,-3.92e-01),vec2(2.77e-01,-3.92e-01),vec2(2.65e-01,-3.92e-01),vec2(2.65e-01,-4.03e-01),vec2(2.65e-01,-4.03e-01),vec2(2.65e-01,-4.15e-01),vec2(2.77e-01,-4.15e-01),vec2(3.12e-01,-3.92e-01),vec2(3.24e-01,-3.92e-01),vec2(3.24e-01,-4.03e-01),vec2(3.01e-01,-4.03e-01),vec2(3.01e-01,-3.92e-01),vec2(3.12e-01,-3.92e-01),vec2(3.48e-01,-4.03e-01),vec2(3.48e-01,-4.15e-01),vec2(3.60e-01,-4.15e-01),vec2(3.83e-01,-4.15e-01),vec2(4.07e-01,-4.09e-01),vec2(3.83e-01,-4.03e-01),vec2(3.83e-01,-4.03e-01),vec2(3.60e-01,-3.98e-01),vec2(3.83e-01,-3.92e-01));\n        for(int i=0; i<max(42,end);++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n        end = 47;\n        for(int i=0; i<max(47,end); ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n        col = mix(col, .8*c.xxx, B(5.)*smoothstep(.005, .002, d ));\n    }\n\telse if(iTime < 13.)\n    {\n        int end = 29;\n        const vec2 lin[58] = vec2[58](vec2(-3.99e-01,-4.15e-01),vec2(-3.99e-01,-3.68e-01),vec2(-3.99e-01,-4.15e-01),vec2(-3.76e-01,-4.15e-01),vec2(-3.99e-01,-3.92e-01),vec2(-3.76e-01,-3.92e-01),vec2(-3.99e-01,-3.68e-01),vec2(-3.76e-01,-3.68e-01),vec2(-3.52e-01,-4.03e-01),vec2(-3.52e-01,-3.68e-01),vec2(-3.64e-01,-3.92e-01),vec2(-3.41e-01,-3.92e-01),vec2(-3.17e-01,-4.15e-01),vec2(-3.05e-01,-4.15e-01),vec2(-3.28e-01,-4.03e-01),vec2(-3.05e-01,-4.03e-01),vec2(-2.93e-01,-4.15e-01),vec2(-2.93e-01,-3.92e-01),vec2(-2.69e-01,-4.15e-01),vec2(-2.69e-01,-3.92e-01),vec2(-2.45e-01,-4.03e-01),vec2(-2.45e-01,-4.15e-01),vec2(-2.10e-01,-4.15e-01),vec2(-2.10e-01,-3.92e-01),vec2(-1.98e-01,-4.03e-01),vec2(-1.98e-01,-3.68e-01),vec2(-1.50e-01,-4.15e-01),vec2(-1.50e-01,-3.68e-01),vec2(-1.50e-01,-3.68e-01),vec2(-1.38e-01,-3.68e-01),vec2(-1.50e-01,-4.15e-01),vec2(-1.38e-01,-4.15e-01),vec2(-1.26e-01,-4.03e-01),vec2(-1.26e-01,-3.80e-01),vec2(-9.08e-02,-4.15e-01),vec2(-9.08e-02,-3.92e-01),vec2(-7.86e-02,-4.15e-01),vec2(-7.86e-02,-3.92e-01),vec2(-5.47e-02,-4.15e-01),vec2(-5.47e-02,-3.68e-01),vec2(-5.47e-02,-4.03e-01),vec2(-4.30e-02,-4.03e-01),vec2(-1.91e-02,-4.15e-01),vec2(-1.91e-02,-3.92e-01),vec2(4.25e-03,-4.03e-01),vec2(4.25e-03,-4.15e-01),vec2(2.82e-02,-4.15e-01),vec2(3.98e-02,-4.15e-01),vec2(1.65e-02,-4.03e-01),vec2(3.98e-02,-4.03e-01),vec2(5.21e-02,-4.15e-01),vec2(6.38e-02,-4.15e-01),vec2(6.38e-02,-3.92e-01),vec2(7.54e-02,-3.92e-01),vec2(8.77e-02,-4.15e-01),vec2(9.93e-02,-4.15e-01),vec2(9.93e-02,-3.92e-01),vec2(1.11e-01,-3.92e-01)),\n        quad[90] = vec2[90](vec2(-3.52e-01,-4.03e-01),vec2(-3.52e-01,-4.15e-01),vec2(-3.41e-01,-4.15e-01),vec2(-3.05e-01,-4.03e-01),vec2(-3.05e-01,-3.92e-01),vec2(-3.17e-01,-3.92e-01),vec2(-3.17e-01,-3.92e-01),vec2(-3.28e-01,-3.92e-01),vec2(-3.28e-01,-4.03e-01),vec2(-3.28e-01,-4.03e-01),vec2(-3.28e-01,-4.15e-01),vec2(-3.17e-01,-4.15e-01),vec2(-2.93e-01,-4.03e-01),vec2(-2.93e-01,-3.92e-01),vec2(-2.81e-01,-3.92e-01),vec2(-2.57e-01,-3.92e-01),vec2(-2.45e-01,-3.92e-01),vec2(-2.45e-01,-4.03e-01),vec2(-2.69e-01,-4.03e-01),vec2(-2.69e-01,-3.92e-01),vec2(-2.57e-01,-3.92e-01),vec2(-2.22e-01,-3.92e-01),vec2(-2.33e-01,-3.92e-01),vec2(-2.33e-01,-4.03e-01),vec2(-2.33e-01,-4.03e-01),vec2(-2.33e-01,-4.15e-01),vec2(-2.22e-01,-4.15e-01),vec2(-2.22e-01,-4.15e-01),vec2(-2.10e-01,-4.15e-01),vec2(-2.10e-01,-4.03e-01),vec2(-2.22e-01,-3.92e-01),vec2(-2.10e-01,-3.92e-01),vec2(-2.10e-01,-4.03e-01),vec2(-1.98e-01,-4.03e-01),vec2(-1.98e-01,-4.15e-01),vec2(-1.86e-01,-4.15e-01),vec2(-1.38e-01,-3.68e-01),vec2(-1.26e-01,-3.68e-01),vec2(-1.26e-01,-3.80e-01),vec2(-1.38e-01,-4.15e-01),vec2(-1.26e-01,-4.15e-01),vec2(-1.26e-01,-4.03e-01),vec2(-1.02e-01,-3.92e-01),vec2(-1.14e-01,-3.92e-01),vec2(-1.14e-01,-4.03e-01),vec2(-1.14e-01,-4.03e-01),vec2(-1.14e-01,-4.15e-01),vec2(-1.02e-01,-4.15e-01),vec2(-1.02e-01,-4.15e-01),vec2(-9.08e-02,-4.15e-01),vec2(-9.08e-02,-4.03e-01),vec2(-1.02e-01,-3.92e-01),vec2(-9.08e-02,-3.92e-01),vec2(-9.08e-02,-4.03e-01),vec2(-7.86e-02,-4.03e-01),vec2(-7.86e-02,-3.92e-01),vec2(-6.69e-02,-3.92e-01),vec2(-4.30e-02,-4.03e-01),vec2(-3.13e-02,-4.03e-01),vec2(-3.13e-02,-3.92e-01),vec2(-4.30e-02,-4.03e-01),vec2(-3.13e-02,-4.03e-01),vec2(-3.13e-02,-4.15e-01),vec2(-7.42e-03,-3.92e-01),vec2(4.25e-03,-3.92e-01),vec2(4.25e-03,-4.03e-01),vec2(-1.91e-02,-4.03e-01),vec2(-1.91e-02,-3.92e-01),vec2(-7.42e-03,-3.92e-01),vec2(3.98e-02,-4.03e-01),vec2(3.98e-02,-3.92e-01),vec2(2.82e-02,-3.92e-01),vec2(2.82e-02,-3.92e-01),vec2(1.65e-02,-3.92e-01),vec2(1.65e-02,-4.03e-01),vec2(1.65e-02,-4.03e-01),vec2(1.65e-02,-4.15e-01),vec2(2.82e-02,-4.15e-01),vec2(6.38e-02,-4.15e-01),vec2(8.71e-02,-4.09e-01),vec2(6.38e-02,-4.03e-01),vec2(6.38e-02,-4.03e-01),vec2(4.04e-02,-3.98e-01),vec2(6.38e-02,-3.92e-01),vec2(9.93e-02,-4.15e-01),vec2(1.23e-01,-4.09e-01),vec2(9.93e-02,-4.03e-01),vec2(9.93e-02,-4.03e-01),vec2(7.60e-02,-3.98e-01),vec2(9.93e-02,-3.92e-01));\n        for(int i=0; i<max(end,29);++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n        end = 30;\n        for(int i=0; i<max(30,end); ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n\t\tcol = mix(col, .8*c.xxx, B(10.)*smoothstep(.005, .002, d ));\n    }\n    else if(iTime < 18.)\n    {\n        int end = 9;\n        const vec2 lin[18] = vec2[18](vec2(-4.00e-01,-3.68e-01),vec2(-4.00e-01,-4.03e-01),vec2(-3.77e-01,-3.68e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.53e-01,-3.68e-01),vec2(-3.53e-01,-4.03e-01),vec2(-3.29e-01,-4.15e-01),vec2(-3.18e-01,-4.15e-01),vec2(-3.41e-01,-4.03e-01),vec2(-3.18e-01,-4.03e-01),vec2(-2.58e-01,-4.15e-01),vec2(-2.58e-01,-3.92e-01),vec2(-2.46e-01,-4.15e-01),vec2(-2.46e-01,-3.92e-01),vec2(-2.10e-01,-4.15e-01),vec2(-1.99e-01,-4.15e-01),vec2(-2.22e-01,-4.03e-01),vec2(-1.99e-01,-4.03e-01)),\n        quad[45] = vec2[45](vec2(-4.00e-01,-4.03e-01),vec2(-4.00e-01,-4.15e-01),vec2(-3.88e-01,-4.15e-01),vec2(-3.88e-01,-4.15e-01),vec2(-3.77e-01,-4.15e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.77e-01,-4.15e-01),vec2(-3.65e-01,-4.15e-01),vec2(-3.65e-01,-4.15e-01),vec2(-3.53e-01,-4.15e-01),vec2(-3.53e-01,-4.03e-01),vec2(-3.18e-01,-4.03e-01),vec2(-3.18e-01,-3.92e-01),vec2(-3.29e-01,-3.92e-01),vec2(-3.29e-01,-3.92e-01),vec2(-3.41e-01,-3.92e-01),vec2(-3.41e-01,-4.03e-01),vec2(-3.41e-01,-4.03e-01),vec2(-3.41e-01,-4.15e-01),vec2(-3.29e-01,-4.15e-01),vec2(-2.70e-01,-3.92e-01),vec2(-2.82e-01,-3.92e-01),vec2(-2.82e-01,-4.03e-01),vec2(-2.82e-01,-4.03e-01),vec2(-2.82e-01,-4.15e-01),vec2(-2.70e-01,-4.15e-01),vec2(-2.70e-01,-4.15e-01),vec2(-2.58e-01,-4.15e-01),vec2(-2.58e-01,-4.03e-01),vec2(-2.70e-01,-3.92e-01),vec2(-2.58e-01,-3.92e-01),vec2(-2.58e-01,-4.03e-01),vec2(-2.46e-01,-4.03e-01),vec2(-2.46e-01,-3.92e-01),vec2(-2.34e-01,-3.92e-01),vec2(-1.99e-01,-4.03e-01),vec2(-1.99e-01,-3.92e-01),vec2(-2.10e-01,-3.92e-01),vec2(-2.10e-01,-3.92e-01),vec2(-2.22e-01,-3.92e-01),vec2(-2.22e-01,-4.03e-01),vec2(-2.22e-01,-4.03e-01),vec2(-2.22e-01,-4.15e-01),vec2(-2.10e-01,-4.15e-01));\n        for(int i=0; i<max(end,9);++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n        end = 15;\n        for(int i=0; i<max(end,15); ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n        col = mix(col, .8*c.xxx, B(15.)*smoothstep(.005, .002, d ));\n    }\n    else if(iTime < 23.)\n    {\n        int end = 64;\n        const vec2 lin[128] = vec2[128](vec2(-4.00e-01,-4.03e-01),vec2(-4.00e-01,-3.80e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.77e-01,-3.80e-01),vec2(-3.64e-01,-4.15e-01),vec2(-3.64e-01,-3.68e-01),vec2(-3.18e-01,-4.15e-01),vec2(-3.18e-01,-3.68e-01),vec2(-3.64e-01,-3.68e-01),vec2(-3.41e-01,-3.92e-01),vec2(-3.41e-01,-3.92e-01),vec2(-3.18e-01,-3.68e-01),vec2(-2.82e-01,-4.03e-01),vec2(-2.82e-01,-4.03e-01),vec2(-2.82e-01,-3.80e-01),vec2(-2.82e-01,-3.80e-01),vec2(-2.69e-01,-4.03e-01),vec2(-2.69e-01,-4.03e-01),vec2(-2.69e-01,-3.80e-01),vec2(-2.69e-01,-3.80e-01),vec2(-2.10e-01,-4.15e-01),vec2(-2.21e-01,-4.15e-01),vec2(-2.10e-01,-3.68e-01),vec2(-2.21e-01,-3.68e-01),vec2(-2.33e-01,-4.03e-01),vec2(-2.33e-01,-3.80e-01),vec2(-1.50e-01,-3.92e-01),vec2(-1.39e-01,-3.92e-01),vec2(-1.50e-01,-4.15e-01),vec2(-1.39e-01,-4.15e-01),vec2(-1.39e-01,-4.15e-01),vec2(-1.39e-01,-3.68e-01),vec2(-1.15e-01,-4.15e-01),vec2(-1.03e-01,-4.15e-01),vec2(-1.26e-01,-4.03e-01),vec2(-1.03e-01,-4.03e-01),vec2(-9.08e-02,-4.15e-01),vec2(-6.75e-02,-3.68e-01),vec2(-5.52e-02,-4.15e-01),vec2(-4.36e-02,-4.15e-01),vec2(-3.19e-02,-3.68e-01),vec2(-4.36e-02,-3.68e-01),vec2(-1.97e-02,-4.15e-01),vec2(-1.97e-02,-3.68e-01),vec2(-1.97e-02,-3.68e-01),vec2(3.67e-03,-3.68e-01),vec2(-1.97e-02,-3.92e-01),vec2(3.67e-03,-3.92e-01),vec2(1.59e-02,-4.15e-01),vec2(3.93e-02,-3.68e-01),vec2(1.59e-02,-3.68e-01),vec2(3.93e-02,-4.15e-01),vec2(9.88e-02,-4.15e-01),vec2(9.88e-02,-3.92e-01),vec2(1.11e-01,-4.15e-01),vec2(1.11e-01,-3.92e-01),vec2(1.34e-01,-4.03e-01),vec2(1.34e-01,-4.15e-01),vec2(1.58e-01,-3.92e-01),vec2(1.70e-01,-3.92e-01),vec2(1.58e-01,-4.15e-01),vec2(1.70e-01,-4.15e-01),vec2(1.70e-01,-4.15e-01),vec2(1.70e-01,-3.68e-01),vec2(2.06e-01,-4.15e-01),vec2(2.06e-01,-3.68e-01),vec2(2.06e-01,-3.68e-01),vec2(2.29e-01,-4.15e-01),vec2(2.29e-01,-4.15e-01),vec2(2.29e-01,-3.68e-01),vec2(2.42e-01,-4.15e-01),vec2(2.42e-01,-3.68e-01),vec2(2.42e-01,-3.68e-01),vec2(2.53e-01,-3.68e-01),vec2(2.42e-01,-3.92e-01),vec2(2.53e-01,-3.92e-01),vec2(2.65e-01,-4.03e-01),vec2(2.65e-01,-4.15e-01),vec2(3.01e-01,-3.68e-01),vec2(2.77e-01,-4.03e-01),vec2(2.77e-01,-4.03e-01),vec2(3.01e-01,-4.03e-01),vec2(3.01e-01,-3.92e-01),vec2(3.01e-01,-4.15e-01),vec2(3.37e-01,-4.03e-01),vec2(3.37e-01,-4.03e-01),vec2(3.37e-01,-3.80e-01),vec2(3.37e-01,-3.80e-01),vec2(3.49e-01,-4.03e-01),vec2(3.49e-01,-4.03e-01),vec2(3.49e-01,-3.80e-01),vec2(3.49e-01,-3.80e-01),vec2(4.09e-01,-4.15e-01),vec2(3.97e-01,-4.15e-01),vec2(4.09e-01,-3.68e-01),vec2(3.97e-01,-3.68e-01),vec2(3.85e-01,-4.03e-01),vec2(3.85e-01,-3.80e-01),vec2(4.68e-01,-3.92e-01),vec2(4.80e-01,-3.92e-01),vec2(4.68e-01,-4.15e-01),vec2(4.80e-01,-4.15e-01),vec2(4.80e-01,-4.15e-01),vec2(4.80e-01,-3.68e-01),vec2(5.04e-01,-4.15e-01),vec2(5.15e-01,-4.15e-01),vec2(4.92e-01,-4.03e-01),vec2(5.15e-01,-4.03e-01),vec2(5.27e-01,-4.15e-01),vec2(5.51e-01,-3.68e-01),vec2(5.75e-01,-3.92e-01),vec2(5.86e-01,-3.92e-01),vec2(5.86e-01,-3.92e-01),vec2(5.86e-01,-4.03e-01),vec2(5.63e-01,-4.03e-01),vec2(5.63e-01,-3.80e-01),vec2(5.75e-01,-3.68e-01),vec2(5.86e-01,-3.68e-01),vec2(5.99e-01,-4.15e-01),vec2(5.99e-01,-3.68e-01),vec2(5.99e-01,-3.68e-01),vec2(6.22e-01,-3.68e-01),vec2(5.99e-01,-3.92e-01),vec2(6.22e-01,-3.92e-01),vec2(6.34e-01,-4.15e-01),vec2(6.58e-01,-3.68e-01),vec2(6.34e-01,-3.68e-01),vec2(6.58e-01,-4.15e-01)),\n        quad[135] = vec2[135](vec2(-4.00e-01,-4.03e-01),vec2(-4.00e-01,-4.15e-01),vec2(-3.88e-01,-4.15e-01),vec2(-3.88e-01,-4.15e-01),vec2(-3.77e-01,-4.15e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.77e-01,-3.80e-01),vec2(-3.77e-01,-3.68e-01),vec2(-3.88e-01,-3.68e-01),vec2(-3.88e-01,-3.68e-01),vec2(-4.00e-01,-3.68e-01),vec2(-4.00e-01,-3.80e-01),vec2(-3.88e-01,-4.03e-01),vec2(-3.88e-01,-4.15e-01),vec2(-3.77e-01,-4.15e-01),vec2(-2.21e-01,-4.15e-01),vec2(-2.33e-01,-4.15e-01),vec2(-2.33e-01,-4.03e-01),vec2(-2.33e-01,-3.80e-01),vec2(-2.33e-01,-3.68e-01),vec2(-2.21e-01,-3.68e-01),vec2(-1.86e-01,-4.15e-01),vec2(-1.98e-01,-4.15e-01),vec2(-1.98e-01,-4.03e-01),vec2(-1.98e-01,-4.03e-01),vec2(-1.98e-01,-3.92e-01),vec2(-1.86e-01,-3.92e-01),vec2(-1.86e-01,-3.92e-01),vec2(-1.74e-01,-3.92e-01),vec2(-1.74e-01,-4.03e-01),vec2(-1.74e-01,-4.03e-01),vec2(-1.74e-01,-4.15e-01),vec2(-1.86e-01,-4.15e-01),vec2(-1.50e-01,-4.15e-01),vec2(-1.62e-01,-4.15e-01),vec2(-1.62e-01,-4.03e-01),vec2(-1.62e-01,-4.03e-01),vec2(-1.62e-01,-3.92e-01),vec2(-1.50e-01,-3.92e-01),vec2(-1.03e-01,-4.03e-01),vec2(-1.03e-01,-3.92e-01),vec2(-1.15e-01,-3.92e-01),vec2(-1.15e-01,-3.92e-01),vec2(-1.26e-01,-3.92e-01),vec2(-1.26e-01,-4.03e-01),vec2(-1.26e-01,-4.03e-01),vec2(-1.26e-01,-4.15e-01),vec2(-1.15e-01,-4.15e-01),vec2(-4.36e-02,-4.15e-01),vec2(-3.19e-02,-4.15e-01),vec2(-3.19e-02,-4.03e-01),vec2(-3.19e-02,-4.03e-01),vec2(-3.19e-02,-3.92e-01),vec2(-4.36e-02,-3.92e-01),vec2(-4.36e-02,-3.92e-01),vec2(-5.52e-02,-3.92e-01),vec2(-5.52e-02,-3.80e-01),vec2(-5.52e-02,-3.80e-01),vec2(-5.52e-02,-3.68e-01),vec2(-4.36e-02,-3.68e-01),vec2(8.71e-02,-3.92e-01),vec2(7.54e-02,-3.92e-01),vec2(7.54e-02,-4.03e-01),vec2(7.54e-02,-4.03e-01),vec2(7.54e-02,-4.15e-01),vec2(8.71e-02,-4.15e-01),vec2(8.71e-02,-4.15e-01),vec2(9.88e-02,-4.15e-01),vec2(9.88e-02,-4.03e-01),vec2(8.71e-02,-3.92e-01),vec2(9.88e-02,-3.92e-01),vec2(9.88e-02,-4.03e-01),vec2(1.23e-01,-3.92e-01),vec2(1.34e-01,-3.92e-01),vec2(1.34e-01,-4.03e-01),vec2(1.11e-01,-4.03e-01),vec2(1.11e-01,-3.92e-01),vec2(1.23e-01,-3.92e-01),vec2(1.58e-01,-4.15e-01),vec2(1.47e-01,-4.15e-01),vec2(1.47e-01,-4.03e-01),vec2(1.47e-01,-4.03e-01),vec2(1.47e-01,-3.92e-01),vec2(1.58e-01,-3.92e-01),vec2(2.53e-01,-3.68e-01),vec2(2.65e-01,-3.68e-01),vec2(2.65e-01,-3.80e-01),vec2(2.65e-01,-3.80e-01),vec2(2.65e-01,-3.92e-01),vec2(2.53e-01,-3.92e-01),vec2(2.53e-01,-3.92e-01),vec2(2.65e-01,-3.92e-01),vec2(2.65e-01,-4.03e-01),vec2(3.97e-01,-4.15e-01),vec2(3.85e-01,-4.15e-01),vec2(3.85e-01,-4.03e-01),vec2(3.85e-01,-3.80e-01),vec2(3.85e-01,-3.68e-01),vec2(3.97e-01,-3.68e-01),vec2(4.32e-01,-4.15e-01),vec2(4.21e-01,-4.15e-01),vec2(4.21e-01,-4.03e-01),vec2(4.21e-01,-4.03e-01),vec2(4.21e-01,-3.92e-01),vec2(4.32e-01,-3.92e-01),vec2(4.32e-01,-3.92e-01),vec2(4.44e-01,-3.92e-01),vec2(4.44e-01,-4.03e-01),vec2(4.44e-01,-4.03e-01),vec2(4.44e-01,-4.15e-01),vec2(4.32e-01,-4.15e-01),vec2(4.68e-01,-4.15e-01),vec2(4.56e-01,-4.15e-01),vec2(4.56e-01,-4.03e-01),vec2(4.56e-01,-4.03e-01),vec2(4.56e-01,-3.92e-01),vec2(4.68e-01,-3.92e-01),vec2(5.15e-01,-4.03e-01),vec2(5.15e-01,-3.92e-01),vec2(5.04e-01,-3.92e-01),vec2(5.04e-01,-3.92e-01),vec2(4.92e-01,-3.92e-01),vec2(4.92e-01,-4.03e-01),vec2(4.92e-01,-4.03e-01),vec2(4.92e-01,-4.15e-01),vec2(5.04e-01,-4.15e-01),vec2(5.63e-01,-3.80e-01),vec2(5.63e-01,-3.68e-01),vec2(5.75e-01,-3.68e-01),vec2(5.75e-01,-4.15e-01),vec2(5.63e-01,-4.15e-01),vec2(5.63e-01,-4.03e-01),vec2(5.75e-01,-4.15e-01),vec2(5.86e-01,-4.15e-01),vec2(5.86e-01,-4.03e-01));\n        for(int i=0; i<max(64,end);++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n        end = 45;\n        for(int i=0; i<max(end,45); ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n\t\tcol = mix(col, .8*c.xxx, B(20.)*smoothstep(.005, .002, d ));\n    }\n    else if(iTime < 28.)\n    {\n        int end = 12;\n        const vec2 lin[24] = vec2[24](vec2(-4.00e-01,-3.68e-01),vec2(-4.00e-01,-4.03e-01),vec2(-3.77e-01,-3.68e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.53e-01,-3.68e-01),vec2(-3.53e-01,-4.03e-01),vec2(-3.29e-01,-4.15e-01),vec2(-3.18e-01,-4.15e-01),vec2(-3.41e-01,-4.03e-01),vec2(-3.18e-01,-4.03e-01),vec2(-2.82e-01,-4.03e-01),vec2(-2.82e-01,-3.68e-01),vec2(-2.58e-01,-4.03e-01),vec2(-2.58e-01,-3.92e-01),vec2(-2.58e-01,-3.80e-01),vec2(-2.58e-01,-3.80e-01),vec2(-2.34e-01,-4.15e-01),vec2(-2.34e-01,-3.68e-01),vec2(-2.34e-01,-4.03e-01),vec2(-2.22e-01,-4.03e-01),vec2(-1.86e-01,-4.15e-01),vec2(-1.75e-01,-4.15e-01),vec2(-1.98e-01,-4.03e-01),vec2(-1.75e-01,-4.03e-01)),\n        quad[42] = vec2[42](vec2(-4.00e-01,-4.03e-01),vec2(-4.00e-01,-4.15e-01),vec2(-3.88e-01,-4.15e-01),vec2(-3.88e-01,-4.15e-01),vec2(-3.77e-01,-4.15e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.77e-01,-4.03e-01),vec2(-3.77e-01,-4.15e-01),vec2(-3.65e-01,-4.15e-01),vec2(-3.65e-01,-4.15e-01),vec2(-3.53e-01,-4.15e-01),vec2(-3.53e-01,-4.03e-01),vec2(-3.18e-01,-4.03e-01),vec2(-3.18e-01,-3.92e-01),vec2(-3.29e-01,-3.92e-01),vec2(-3.29e-01,-3.92e-01),vec2(-3.41e-01,-3.92e-01),vec2(-3.41e-01,-4.03e-01),vec2(-3.41e-01,-4.03e-01),vec2(-3.41e-01,-4.15e-01),vec2(-3.29e-01,-4.15e-01),vec2(-2.82e-01,-4.03e-01),vec2(-2.82e-01,-4.15e-01),vec2(-2.70e-01,-4.15e-01),vec2(-2.58e-01,-4.03e-01),vec2(-2.58e-01,-4.15e-01),vec2(-2.46e-01,-4.15e-01),vec2(-2.22e-01,-4.03e-01),vec2(-2.10e-01,-4.03e-01),vec2(-2.10e-01,-3.92e-01),vec2(-2.22e-01,-4.03e-01),vec2(-2.10e-01,-4.03e-01),vec2(-2.10e-01,-4.15e-01),vec2(-1.75e-01,-4.03e-01),vec2(-1.75e-01,-3.92e-01),vec2(-1.86e-01,-3.92e-01),vec2(-1.86e-01,-3.92e-01),vec2(-1.98e-01,-3.92e-01),vec2(-1.98e-01,-4.03e-01),vec2(-1.98e-01,-4.03e-01),vec2(-1.98e-01,-4.15e-01),vec2(-1.86e-01,-4.15e-01));\n        for(int i=0; i<max(end,12);++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n        end = 14;\n        for(int i=0; i<max(end,14); ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n\t\tcol = mix(col, .8*c.xxx, B(25.)*smoothstep(.005, .002, d ));\n    }\n    else if(iTime < 33.)\n    {\n        int end = 88;\n        const vec2 lin[176] = vec2[176](vec2(-4.00e-01,-4.15e-01),vec2(-4.00e-01,-3.80e-01),vec2(-3.77e-01,-4.15e-01),vec2(-3.77e-01,-3.80e-01),vec2(-4.00e-01,-3.92e-01),vec2(-3.77e-01,-3.92e-01),vec2(-3.64e-01,-4.15e-01),vec2(-3.64e-01,-3.68e-01),vec2(-3.64e-01,-3.68e-01),vec2(-3.41e-01,-4.15e-01),vec2(-3.41e-01,-4.15e-01),vec2(-3.41e-01,-3.68e-01),vec2(-3.29e-01,-4.15e-01),vec2(-3.29e-01,-3.68e-01),vec2(-3.29e-01,-3.68e-01),vec2(-3.17e-01,-3.68e-01),vec2(-3.29e-01,-4.15e-01),vec2(-3.17e-01,-4.15e-01),vec2(-3.05e-01,-4.03e-01),vec2(-3.05e-01,-3.80e-01),vec2(-2.69e-01,-4.03e-01),vec2(-2.69e-01,-4.03e-01),vec2(-2.69e-01,-3.80e-01),vec2(-2.69e-01,-3.80e-01),vec2(-2.57e-01,-4.03e-01),vec2(-2.57e-01,-4.03e-01),vec2(-2.57e-01,-3.80e-01),vec2(-2.57e-01,-3.80e-01),vec2(-2.21e-01,-4.15e-01),vec2(-2.21e-01,-3.92e-01),vec2(-1.74e-01,-3.92e-01),vec2(-1.74e-01,-4.27e-01),vec2(-1.85e-01,-4.38e-01),vec2(-1.97e-01,-4.38e-01),vec2(-1.61e-01,-4.15e-01),vec2(-1.61e-01,-3.68e-01),vec2(-1.61e-01,-4.15e-01),vec2(-1.50e-01,-4.15e-01),vec2(-1.61e-01,-3.92e-01),vec2(-1.50e-01,-3.92e-01),vec2(-1.02e-01,-4.15e-01),vec2(-1.02e-01,-3.92e-01),vec2(-6.63e-02,-4.03e-01),vec2(-6.63e-02,-4.03e-01),vec2(-6.63e-02,-3.80e-01),vec2(-6.63e-02,-3.80e-01),vec2(-5.41e-02,-4.03e-01),vec2(-5.41e-02,-4.03e-01),vec2(-5.41e-02,-3.80e-01),vec2(-5.41e-02,-3.80e-01),vec2(-6.25e-03,-4.03e-01),vec2(-6.25e-03,-3.80e-01),vec2(-1.79e-02,-3.92e-01),vec2(5.42e-03,-3.92e-01),vec2(4.10e-02,-4.15e-01),vec2(4.10e-02,-3.92e-01),vec2(5.33e-02,-4.15e-01),vec2(5.33e-02,-3.92e-01),vec2(7.72e-02,-4.15e-01),vec2(7.72e-02,-3.68e-01),vec2(7.72e-02,-4.15e-01),vec2(8.88e-02,-4.15e-01),vec2(7.72e-02,-3.92e-01),vec2(8.88e-02,-3.92e-01),vec2(1.13e-01,-4.15e-01),vec2(1.13e-01,-3.92e-01),vec2(1.60e-01,-4.15e-01),vec2(1.60e-01,-3.92e-01),vec2(1.72e-01,-3.92e-01),vec2(1.72e-01,-4.03e-01),vec2(1.96e-01,-3.92e-01),vec2(1.96e-01,-4.15e-01),vec2(2.08e-01,-4.15e-01),vec2(2.20e-01,-4.15e-01),vec2(2.20e-01,-3.92e-01),vec2(2.31e-01,-3.92e-01),vec2(2.67e-01,-3.92e-01),vec2(2.55e-01,-3.92e-01),vec2(2.67e-01,-4.15e-01),vec2(2.55e-01,-4.15e-01),vec2(2.79e-01,-4.15e-01),vec2(2.79e-01,-3.68e-01),vec2(3.02e-01,-4.15e-01),vec2(3.02e-01,-4.03e-01),vec2(2.91e-01,-3.92e-01),vec2(2.79e-01,-3.92e-01),vec2(3.39e-01,-4.03e-01),vec2(3.39e-01,-4.03e-01),vec2(3.39e-01,-3.80e-01),vec2(3.39e-01,-3.80e-01),vec2(3.51e-01,-4.03e-01),vec2(3.51e-01,-4.03e-01),vec2(3.51e-01,-3.80e-01),vec2(3.51e-01,-3.80e-01),vec2(3.87e-01,-4.15e-01),vec2(3.87e-01,-3.92e-01),vec2(4.10e-01,-4.15e-01),vec2(4.10e-01,-4.03e-01),vec2(4.34e-01,-4.15e-01),vec2(4.34e-01,-4.03e-01),vec2(4.58e-01,-4.15e-01),vec2(4.69e-01,-4.15e-01),vec2(4.46e-01,-4.03e-01),vec2(4.69e-01,-4.03e-01),vec2(4.81e-01,-4.15e-01),vec2(4.81e-01,-3.92e-01),vec2(5.29e-01,-3.92e-01),vec2(5.17e-01,-3.92e-01),vec2(5.29e-01,-4.15e-01),vec2(5.17e-01,-4.15e-01),vec2(5.41e-01,-3.92e-01),vec2(5.41e-01,-4.03e-01),vec2(5.64e-01,-3.92e-01),vec2(5.64e-01,-4.15e-01),vec2(5.77e-01,-4.15e-01),vec2(5.77e-01,-3.92e-01),vec2(6.00e-01,-3.92e-01),vec2(6.00e-01,-4.03e-01),vec2(6.24e-01,-3.92e-01),vec2(6.24e-01,-4.27e-01),vec2(6.12e-01,-4.38e-01),vec2(6.00e-01,-4.38e-01),vec2(6.60e-01,-4.03e-01),vec2(6.60e-01,-4.03e-01),vec2(6.60e-01,-3.80e-01),vec2(6.60e-01,-3.80e-01),vec2(6.72e-01,-4.03e-01),vec2(6.72e-01,-4.03e-01),vec2(6.72e-01,-3.80e-01),vec2(6.72e-01,-3.80e-01),vec2(7.32e-01,-4.15e-01),vec2(7.20e-01,-4.15e-01),vec2(7.32e-01,-3.68e-01),vec2(7.20e-01,-3.68e-01),vec2(7.08e-01,-4.03e-01),vec2(7.08e-01,-3.80e-01),vec2(7.56e-01,-4.03e-01),vec2(7.56e-01,-3.68e-01),vec2(7.44e-01,-3.92e-01),vec2(7.67e-01,-3.92e-01),vec2(7.79e-01,-4.15e-01),vec2(7.79e-01,-3.92e-01),vec2(8.03e-01,-4.03e-01),vec2(8.03e-01,-3.68e-01),vec2(8.27e-01,-3.92e-01),vec2(8.51e-01,-3.92e-01),vec2(8.63e-01,-4.15e-01),vec2(8.63e-01,-3.80e-01),vec2(8.86e-01,-4.15e-01),vec2(8.86e-01,-3.80e-01),vec2(8.63e-01,-3.92e-01),vec2(8.86e-01,-3.92e-01),vec2(8.98e-01,-4.03e-01),vec2(8.98e-01,-3.68e-01),vec2(9.34e-01,-4.03e-01),vec2(9.34e-01,-3.68e-01),vec2(9.22e-01,-3.92e-01),vec2(9.46e-01,-3.92e-01),vec2(9.58e-01,-3.92e-01),vec2(9.81e-01,-3.92e-01),vec2(1.01e+00,-4.15e-01),vec2(1.01e+00,-3.68e-01),vec2(9.94e-01,-3.68e-01),vec2(1.02e+00,-3.68e-01),vec2(1.04e+00,-4.15e-01),vec2(1.05e+00,-4.15e-01),vec2(1.03e+00,-4.03e-01),vec2(1.05e+00,-4.03e-01),vec2(1.06e+00,-4.15e-01),vec2(1.08e+00,-4.15e-01),vec2(1.08e+00,-3.92e-01),vec2(1.09e+00,-3.92e-01),vec2(1.11e+00,-4.03e-01),vec2(1.11e+00,-3.68e-01),vec2(1.10e+00,-3.92e-01),vec2(1.12e+00,-3.92e-01)),\n        quad[204] = vec2[204](vec2(-3.77e-01,-3.80e-01),vec2(-3.77e-01,-3.68e-01),vec2(-3.88e-01,-3.68e-01),vec2(-3.88e-01,-3.68e-01),vec2(-4.00e-01,-3.68e-01),vec2(-4.00e-01,-3.80e-01),vec2(-3.17e-01,-3.68e-01),vec2(-3.05e-01,-3.68e-01),vec2(-3.05e-01,-3.80e-01),vec2(-3.17e-01,-4.15e-01),vec2(-3.05e-01,-4.15e-01),vec2(-3.05e-01,-4.03e-01),vec2(-2.21e-01,-4.03e-01),vec2(-2.21e-01,-3.92e-01),vec2(-2.09e-01,-3.92e-01),vec2(-1.74e-01,-4.03e-01),vec2(-1.74e-01,-3.92e-01),vec2(-1.85e-01,-3.92e-01),vec2(-1.85e-01,-3.92e-01),vec2(-1.97e-01,-3.92e-01),vec2(-1.97e-01,-4.03e-01),vec2(-1.97e-01,-4.03e-01),vec2(-1.97e-01,-4.15e-01),vec2(-1.85e-01,-4.15e-01),vec2(-1.85e-01,-4.15e-01),vec2(-1.74e-01,-4.15e-01),vec2(-1.74e-01,-4.03e-01),vec2(-1.74e-01,-4.27e-01),vec2(-1.74e-01,-4.38e-01),vec2(-1.85e-01,-4.38e-01),vec2(-1.50e-01,-4.15e-01),vec2(-1.38e-01,-4.15e-01),vec2(-1.38e-01,-4.03e-01),vec2(-1.38e-01,-4.03e-01),vec2(-1.38e-01,-3.92e-01),vec2(-1.50e-01,-3.92e-01),vec2(-1.14e-01,-3.92e-01),vec2(-1.26e-01,-3.92e-01),vec2(-1.26e-01,-4.03e-01),vec2(-1.26e-01,-4.03e-01),vec2(-1.26e-01,-4.15e-01),vec2(-1.14e-01,-4.15e-01),vec2(-1.14e-01,-4.15e-01),vec2(-1.02e-01,-4.15e-01),vec2(-1.02e-01,-4.03e-01),vec2(-1.14e-01,-3.92e-01),vec2(-1.02e-01,-3.92e-01),vec2(-1.02e-01,-4.03e-01),vec2(-1.79e-02,-4.15e-01),vec2(-6.25e-03,-4.15e-01),vec2(-6.25e-03,-4.03e-01),vec2(-6.25e-03,-3.80e-01),vec2(-6.25e-03,-3.68e-01),vec2(5.42e-03,-3.68e-01),vec2(2.93e-02,-3.92e-01),vec2(1.77e-02,-3.92e-01),vec2(1.77e-02,-4.03e-01),vec2(1.77e-02,-4.03e-01),vec2(1.77e-02,-4.15e-01),vec2(2.93e-02,-4.15e-01),vec2(2.93e-02,-4.15e-01),vec2(4.10e-02,-4.15e-01),vec2(4.10e-02,-4.03e-01),vec2(2.93e-02,-3.92e-01),vec2(4.10e-02,-3.92e-01),vec2(4.10e-02,-4.03e-01),vec2(5.33e-02,-4.03e-01),vec2(5.33e-02,-3.92e-01),vec2(6.49e-02,-3.92e-01),vec2(8.88e-02,-4.15e-01),vec2(1.01e-01,-4.15e-01),vec2(1.01e-01,-4.03e-01),vec2(1.01e-01,-4.03e-01),vec2(1.01e-01,-3.92e-01),vec2(8.88e-02,-3.92e-01),vec2(1.13e-01,-4.03e-01),vec2(1.13e-01,-3.92e-01),vec2(1.24e-01,-3.92e-01),vec2(1.48e-01,-3.92e-01),vec2(1.37e-01,-3.92e-01),vec2(1.37e-01,-4.03e-01),vec2(1.37e-01,-4.03e-01),vec2(1.37e-01,-4.15e-01),vec2(1.48e-01,-4.15e-01),vec2(1.48e-01,-4.15e-01),vec2(1.60e-01,-4.15e-01),vec2(1.60e-01,-4.03e-01),vec2(1.48e-01,-3.92e-01),vec2(1.60e-01,-3.92e-01),vec2(1.60e-01,-4.03e-01),vec2(1.72e-01,-4.03e-01),vec2(1.72e-01,-4.15e-01),vec2(1.84e-01,-4.15e-01),vec2(1.84e-01,-4.15e-01),vec2(1.96e-01,-4.15e-01),vec2(1.96e-01,-4.03e-01),vec2(2.20e-01,-4.15e-01),vec2(2.43e-01,-4.09e-01),vec2(2.20e-01,-4.03e-01),vec2(2.20e-01,-4.03e-01),vec2(1.96e-01,-3.98e-01),vec2(2.20e-01,-3.92e-01),vec2(2.55e-01,-3.92e-01),vec2(2.43e-01,-3.92e-01),vec2(2.43e-01,-4.03e-01),vec2(2.43e-01,-4.03e-01),vec2(2.43e-01,-4.15e-01),vec2(2.55e-01,-4.15e-01),vec2(3.02e-01,-4.03e-01),vec2(3.02e-01,-3.92e-01),vec2(2.91e-01,-3.92e-01),vec2(3.87e-01,-4.03e-01),vec2(3.87e-01,-3.92e-01),vec2(3.99e-01,-3.92e-01),vec2(3.99e-01,-3.92e-01),vec2(4.10e-01,-3.92e-01),vec2(4.10e-01,-4.03e-01),vec2(4.10e-01,-4.03e-01),vec2(4.10e-01,-3.92e-01),vec2(4.22e-01,-3.92e-01),vec2(4.22e-01,-3.92e-01),vec2(4.34e-01,-3.92e-01),vec2(4.34e-01,-4.03e-01),vec2(4.69e-01,-4.03e-01),vec2(4.69e-01,-3.92e-01),vec2(4.58e-01,-3.92e-01),vec2(4.58e-01,-3.92e-01),vec2(4.46e-01,-3.92e-01),vec2(4.46e-01,-4.03e-01),vec2(4.46e-01,-4.03e-01),vec2(4.46e-01,-4.15e-01),vec2(4.58e-01,-4.15e-01),vec2(4.81e-01,-4.03e-01),vec2(4.81e-01,-3.92e-01),vec2(4.93e-01,-3.92e-01),vec2(5.17e-01,-3.92e-01),vec2(5.05e-01,-3.92e-01),vec2(5.05e-01,-4.03e-01),vec2(5.05e-01,-4.03e-01),vec2(5.05e-01,-4.15e-01),vec2(5.17e-01,-4.15e-01),vec2(5.41e-01,-4.03e-01),vec2(5.41e-01,-4.15e-01),vec2(5.53e-01,-4.15e-01),vec2(5.53e-01,-4.15e-01),vec2(5.64e-01,-4.15e-01),vec2(5.64e-01,-4.03e-01),vec2(5.77e-01,-4.03e-01),vec2(5.77e-01,-3.92e-01),vec2(5.88e-01,-3.92e-01),vec2(6.00e-01,-4.03e-01),vec2(6.00e-01,-4.15e-01),vec2(6.12e-01,-4.15e-01),vec2(6.12e-01,-4.15e-01),vec2(6.24e-01,-4.15e-01),vec2(6.24e-01,-4.03e-01),vec2(6.24e-01,-4.27e-01),vec2(6.24e-01,-4.38e-01),vec2(6.12e-01,-4.38e-01),vec2(7.20e-01,-4.15e-01),vec2(7.08e-01,-4.15e-01),vec2(7.08e-01,-4.03e-01),vec2(7.08e-01,-3.80e-01),vec2(7.08e-01,-3.68e-01),vec2(7.20e-01,-3.68e-01),vec2(7.56e-01,-4.03e-01),vec2(7.56e-01,-4.15e-01),vec2(7.67e-01,-4.15e-01),vec2(7.79e-01,-4.03e-01),vec2(7.79e-01,-3.92e-01),vec2(7.91e-01,-3.92e-01),vec2(8.03e-01,-4.03e-01),vec2(8.03e-01,-4.15e-01),vec2(8.15e-01,-4.15e-01),vec2(8.86e-01,-3.80e-01),vec2(8.86e-01,-3.68e-01),vec2(8.75e-01,-3.68e-01),vec2(8.75e-01,-3.68e-01),vec2(8.63e-01,-3.68e-01),vec2(8.63e-01,-3.80e-01),vec2(8.98e-01,-4.03e-01),vec2(8.98e-01,-4.15e-01),vec2(9.10e-01,-4.15e-01),vec2(9.34e-01,-4.03e-01),vec2(9.34e-01,-4.15e-01),vec2(9.46e-01,-4.15e-01),vec2(1.05e+00,-4.03e-01),vec2(1.05e+00,-3.92e-01),vec2(1.04e+00,-3.92e-01),vec2(1.04e+00,-3.92e-01),vec2(1.03e+00,-3.92e-01),vec2(1.03e+00,-4.03e-01),vec2(1.03e+00,-4.03e-01),vec2(1.03e+00,-4.15e-01),vec2(1.04e+00,-4.15e-01),vec2(1.08e+00,-4.15e-01),vec2(1.10e+00,-4.09e-01),vec2(1.08e+00,-4.03e-01),vec2(1.08e+00,-4.03e-01),vec2(1.05e+00,-3.98e-01),vec2(1.08e+00,-3.92e-01),vec2(1.11e+00,-4.03e-01),vec2(1.11e+00,-4.15e-01),vec2(1.12e+00,-4.15e-01));\n        for(int i=0; i<max(end,88);++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n        end = 68;\n        for(int i=0; i<max(end,68); ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n\t\tcol = mix(col, .8*c.xxx, B(30.)*smoothstep(.005, .002, d ));\n    }   \n    \n    if((iTime > 80.) && (iTime < 90.))\n    {\n        int end = 57;\n        const vec2 lin[114] = vec2[114](vec2(1.67e-02,1.00e-01),vec2(8.33e-03,1.00e-01),vec2(1.67e-02,1.33e-01),vec2(8.33e-03,1.33e-01),vec2(0.00e+00,1.08e-01),vec2(0.00e+00,1.25e-01),vec2(2.54e-02,1.00e-01),vec2(2.54e-02,1.33e-01),vec2(4.21e-02,1.00e-01),vec2(4.21e-02,1.08e-01),vec2(3.37e-02,1.17e-01),vec2(2.54e-02,1.17e-01),vec2(5.92e-02,1.00e-01),vec2(6.75e-02,1.00e-01),vec2(5.08e-02,1.08e-01),vec2(6.75e-02,1.08e-01),vec2(8.46e-02,1.00e-01),vec2(9.29e-02,1.00e-01),vec2(7.62e-02,1.08e-01),vec2(9.29e-02,1.08e-01),vec2(1.02e-01,1.00e-01),vec2(1.02e-01,1.17e-01),vec2(1.19e-01,1.00e-01),vec2(1.27e-01,1.00e-01),vec2(1.27e-01,1.17e-01),vec2(1.35e-01,1.17e-01),vec2(1.70e-01,1.08e-01),vec2(1.70e-01,1.33e-01),vec2(1.61e-01,1.17e-01),vec2(1.78e-01,1.17e-01),vec2(2.29e-01,1.00e-01),vec2(2.29e-01,1.33e-01),vec2(2.63e-01,1.00e-01),vec2(2.63e-01,1.33e-01),vec2(2.29e-01,1.33e-01),vec2(2.46e-01,1.17e-01),vec2(2.46e-01,1.17e-01),vec2(2.63e-01,1.33e-01),vec2(2.80e-01,1.00e-01),vec2(2.80e-01,1.33e-01),vec2(2.71e-01,1.00e-01),vec2(2.88e-01,1.00e-01),vec2(2.71e-01,1.33e-01),vec2(2.88e-01,1.33e-01),vec2(3.13e-01,1.00e-01),vec2(3.05e-01,1.00e-01),vec2(3.13e-01,1.33e-01),vec2(3.05e-01,1.33e-01),vec2(2.97e-01,1.08e-01),vec2(2.97e-01,1.25e-01),vec2(3.56e-01,1.00e-01),vec2(3.56e-01,1.17e-01),vec2(3.65e-01,1.00e-01),vec2(3.65e-01,1.17e-01),vec2(3.81e-01,1.08e-01),vec2(3.81e-01,1.00e-01),vec2(3.98e-01,1.17e-01),vec2(4.07e-01,1.17e-01),vec2(3.98e-01,1.00e-01),vec2(4.07e-01,1.00e-01),vec2(4.07e-01,1.00e-01),vec2(4.07e-01,1.33e-01),vec2(4.32e-01,1.00e-01),vec2(4.41e-01,1.00e-01),vec2(4.49e-01,1.33e-01),vec2(4.41e-01,1.33e-01),vec2(4.75e-01,1.17e-01),vec2(4.66e-01,1.17e-01),vec2(4.75e-01,1.00e-01),vec2(4.66e-01,1.00e-01),vec2(4.83e-01,1.00e-01),vec2(4.83e-01,1.33e-01),vec2(5.00e-01,1.00e-01),vec2(5.00e-01,1.08e-01),vec2(4.92e-01,1.17e-01),vec2(4.83e-01,1.17e-01),vec2(5.09e-01,1.00e-01),vec2(5.09e-01,1.17e-01),vec2(5.25e-01,1.08e-01),vec2(5.25e-01,1.00e-01),vec2(5.51e-01,1.00e-01),vec2(5.51e-01,1.17e-01),vec2(5.60e-01,8.33e-02),vec2(5.60e-01,1.17e-01),vec2(5.60e-01,1.17e-01),vec2(5.68e-01,1.17e-01),vec2(5.60e-01,1.00e-01),vec2(5.68e-01,1.00e-01),vec2(5.85e-01,8.33e-02),vec2(5.85e-01,1.17e-01),vec2(5.85e-01,1.17e-01),vec2(5.93e-01,1.17e-01),vec2(5.85e-01,1.00e-01),vec2(5.93e-01,1.00e-01),vec2(6.10e-01,1.00e-01),vec2(6.19e-01,1.00e-01),vec2(6.19e-01,1.17e-01),vec2(6.27e-01,1.17e-01),vec2(6.52e-01,1.17e-01),vec2(6.52e-01,9.17e-02),vec2(6.44e-01,8.33e-02),vec2(6.36e-01,8.33e-02),vec2(6.61e-01,1.08e-01),vec2(6.61e-01,1.17e-01),vec2(6.61e-01,1.25e-01),vec2(6.61e-01,1.25e-01),vec2(6.78e-01,1.00e-01),vec2(6.78e-01,1.17e-01),vec2(6.95e-01,1.08e-01),vec2(6.95e-01,1.33e-01),vec2(7.12e-01,1.00e-01),vec2(7.21e-01,1.00e-01),vec2(7.21e-01,1.17e-01),vec2(7.29e-01,1.17e-01)),\n\t\tquad[168] = vec2[168](vec2(8.33e-03,1.00e-01),vec2(0.00e+00,1.00e-01),vec2(0.00e+00,1.08e-01),vec2(0.00e+00,1.25e-01),vec2(0.00e+00,1.33e-01),vec2(8.33e-03,1.33e-01),vec2(4.21e-02,1.08e-01),vec2(4.21e-02,1.17e-01),vec2(3.37e-02,1.17e-01),vec2(6.75e-02,1.08e-01),vec2(6.75e-02,1.17e-01),vec2(5.92e-02,1.17e-01),vec2(5.92e-02,1.17e-01),vec2(5.08e-02,1.17e-01),vec2(5.08e-02,1.08e-01),vec2(5.08e-02,1.08e-01),vec2(5.08e-02,1.00e-01),vec2(5.92e-02,1.00e-01),vec2(9.29e-02,1.08e-01),vec2(9.29e-02,1.17e-01),vec2(8.46e-02,1.17e-01),vec2(8.46e-02,1.17e-01),vec2(7.62e-02,1.17e-01),vec2(7.62e-02,1.08e-01),vec2(7.62e-02,1.08e-01),vec2(7.62e-02,1.00e-01),vec2(8.46e-02,1.00e-01),vec2(1.02e-01,1.08e-01),vec2(1.02e-01,1.17e-01),vec2(1.10e-01,1.17e-01),vec2(1.27e-01,1.00e-01),vec2(1.44e-01,1.04e-01),vec2(1.27e-01,1.08e-01),vec2(1.27e-01,1.08e-01),vec2(1.10e-01,1.13e-01),vec2(1.27e-01,1.17e-01),vec2(1.70e-01,1.08e-01),vec2(1.70e-01,1.00e-01),vec2(1.78e-01,1.00e-01),vec2(1.95e-01,1.00e-01),vec2(1.87e-01,1.00e-01),vec2(1.87e-01,1.08e-01),vec2(1.87e-01,1.08e-01),vec2(1.87e-01,1.17e-01),vec2(1.95e-01,1.17e-01),vec2(1.95e-01,1.17e-01),vec2(2.03e-01,1.17e-01),vec2(2.03e-01,1.08e-01),vec2(2.03e-01,1.08e-01),vec2(2.03e-01,1.00e-01),vec2(1.95e-01,1.00e-01),vec2(3.05e-01,1.00e-01),vec2(2.97e-01,1.00e-01),vec2(2.97e-01,1.08e-01),vec2(2.97e-01,1.25e-01),vec2(2.97e-01,1.33e-01),vec2(3.05e-01,1.33e-01),vec2(3.47e-01,1.17e-01),vec2(3.39e-01,1.17e-01),vec2(3.39e-01,1.08e-01),vec2(3.39e-01,1.08e-01),vec2(3.39e-01,1.00e-01),vec2(3.47e-01,1.00e-01),vec2(3.47e-01,1.00e-01),vec2(3.56e-01,1.00e-01),vec2(3.56e-01,1.08e-01),vec2(3.47e-01,1.17e-01),vec2(3.56e-01,1.17e-01),vec2(3.56e-01,1.08e-01),vec2(3.73e-01,1.17e-01),vec2(3.81e-01,1.17e-01),vec2(3.81e-01,1.08e-01),vec2(3.65e-01,1.08e-01),vec2(3.65e-01,1.17e-01),vec2(3.73e-01,1.17e-01),vec2(3.98e-01,1.00e-01),vec2(3.90e-01,1.00e-01),vec2(3.90e-01,1.08e-01),vec2(3.90e-01,1.08e-01),vec2(3.90e-01,1.17e-01),vec2(3.98e-01,1.17e-01),vec2(4.41e-01,1.00e-01),vec2(4.49e-01,1.00e-01),vec2(4.49e-01,1.08e-01),vec2(4.49e-01,1.08e-01),vec2(4.49e-01,1.17e-01),vec2(4.41e-01,1.17e-01),vec2(4.41e-01,1.17e-01),vec2(4.32e-01,1.17e-01),vec2(4.32e-01,1.25e-01),vec2(4.32e-01,1.25e-01),vec2(4.32e-01,1.33e-01),vec2(4.41e-01,1.33e-01),vec2(4.66e-01,1.17e-01),vec2(4.58e-01,1.17e-01),vec2(4.58e-01,1.08e-01),vec2(4.58e-01,1.08e-01),vec2(4.58e-01,1.00e-01),vec2(4.66e-01,1.00e-01),vec2(5.00e-01,1.08e-01),vec2(5.00e-01,1.17e-01),vec2(4.92e-01,1.17e-01),vec2(5.17e-01,1.17e-01),vec2(5.25e-01,1.17e-01),vec2(5.25e-01,1.08e-01),vec2(5.09e-01,1.08e-01),vec2(5.09e-01,1.17e-01),vec2(5.17e-01,1.17e-01),vec2(5.42e-01,1.17e-01),vec2(5.34e-01,1.17e-01),vec2(5.34e-01,1.08e-01),vec2(5.34e-01,1.08e-01),vec2(5.34e-01,1.00e-01),vec2(5.42e-01,1.00e-01),vec2(5.42e-01,1.00e-01),vec2(5.51e-01,1.00e-01),vec2(5.51e-01,1.08e-01),vec2(5.42e-01,1.17e-01),vec2(5.51e-01,1.17e-01),vec2(5.51e-01,1.08e-01),vec2(5.68e-01,1.00e-01),vec2(5.76e-01,1.00e-01),vec2(5.76e-01,1.08e-01),vec2(5.76e-01,1.08e-01),vec2(5.76e-01,1.17e-01),vec2(5.68e-01,1.17e-01),vec2(5.93e-01,1.00e-01),vec2(6.02e-01,1.00e-01),vec2(6.02e-01,1.08e-01),vec2(6.02e-01,1.08e-01),vec2(6.02e-01,1.17e-01),vec2(5.93e-01,1.17e-01),vec2(6.19e-01,1.00e-01),vec2(6.35e-01,1.04e-01),vec2(6.19e-01,1.08e-01),vec2(6.19e-01,1.08e-01),vec2(6.02e-01,1.13e-01),vec2(6.19e-01,1.17e-01),vec2(6.52e-01,1.08e-01),vec2(6.52e-01,1.17e-01),vec2(6.44e-01,1.17e-01),vec2(6.44e-01,1.17e-01),vec2(6.36e-01,1.17e-01),vec2(6.36e-01,1.08e-01),vec2(6.36e-01,1.08e-01),vec2(6.36e-01,1.00e-01),vec2(6.44e-01,1.00e-01),vec2(6.44e-01,1.00e-01),vec2(6.52e-01,1.00e-01),vec2(6.52e-01,1.08e-01),vec2(6.52e-01,9.17e-02),vec2(6.52e-01,8.33e-02),vec2(6.44e-01,8.33e-02),vec2(6.61e-01,1.08e-01),vec2(6.61e-01,1.00e-01),vec2(6.70e-01,1.00e-01),vec2(6.78e-01,1.08e-01),vec2(6.78e-01,1.17e-01),vec2(6.87e-01,1.17e-01),vec2(6.95e-01,1.08e-01),vec2(6.95e-01,1.00e-01),vec2(7.04e-01,1.00e-01),vec2(7.21e-01,1.00e-01),vec2(7.37e-01,1.04e-01),vec2(7.21e-01,1.08e-01),vec2(7.21e-01,1.08e-01),vec2(7.04e-01,1.13e-01),vec2(7.21e-01,1.17e-01));\n\t\tfor(int i=0; i<max(end,57);++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n\t\tend = 56;\n        for(int i=0; i<max(end,56); ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n        col = mix(col, c.yyy, B(80.)*smoothstep(.005, .002, d ));\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/* Eternal Darkness by Team210\n * Copyright (C) 2018  Matthias Weinreuter <qm@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float PI = acos(-1.);\nfloat _sin(float a) { return sin(2. * PI * mod(a,1.)); }\nfloat _unisin(float a,float b) { return (.5*_sin(a) + .5*_sin((1.+b)*a)); }\nfloat _sq(float a) { return sign(2.*fract(a) - 1.); }\nfloat _squ(float a,float pwm) { return sign(2.*fract(a) - 1. + pwm); }\nfloat _tri(float a) { return (4.*abs(fract(a)-.5) - 1.); }\nfloat _saw(float a) { return (2.*fract(a) - 1.); }\nfloat quant(float a,float div,float invdiv) { return floor(div*a+.5)*invdiv; }\nfloat quanti(float a,float div) { return floor(div*a+.5)/div; }\nfloat clip(float a) { return clamp(a,-1.,1.); }\nfloat theta(float x) { return smoothstep(0., 0.01, x); }\nfloat freqC1(float note){ return 32.7 * pow(2.,note/12.); }\nfloat minus1hochN(int n) { return (1. - 2.*float(n % 2)); }\n\nconst float BPM = 140. * .125;\nconst float BPS = BPM/60.;\nconst float SPB = 60./BPM;\n\nfloat doubleslope(float t, float a, float d, float s)\n{\n   return smoothstep(-.00001,a,t) - (1.-s) * smoothstep(0.,d,t-a);\n}\n\nfloat s_atan(float a) { return 2./PI * atan(a); }\nfloat s_crzy(float amp) { return clamp( s_atan(amp) - 0.1*cos(0.9*amp*exp(amp)), -1., 1.); }\nfloat squarey(float a, float edge) { return abs(a) < edge ? a : floor(4.*a+.5)*.25; }\n\nfloat TRISQ(float t, float f, int MAXN, float MIX, float INR, float NDECAY, float RES, float RES_Q)\n{\n    float ret = 0.;\n   \n    int Ninc = 8; // try this: leaving out harmonics...\n   \n    for(int N=0; N<=MAXN; N+=Ninc)\n    {\n        float mode     = 2.*float(N) + 1.;\n        float inv_mode = 1./mode;         // avoid division? save table of Nmax <= 20 in some array or whatever\n        float comp_TRI = (N % 2 == 1 ? -1. : 1.) * inv_mode*inv_mode;\n        float comp_SQU = inv_mode;\n        float filter_N = pow(1. + pow(float(N) * INR,2.*NDECAY),-.5) + RES * exp(-pow(float(N)*INR*RES_Q,2.));\n\n        ret += (MIX * comp_TRI + (1.-MIX) * comp_SQU) * filter_N * _sin(mode * f * t);\n    }\n   \n    return ret;\n}\n\nfloat env_ADSR(float x, float L, float A, float D, float S, float R)\n{\n    float att = pow(x/A,8.);\n    float dec = S + (1.-S) * exp(-(x-A)/D);\n    float rel = (x < L-R) ? 1. : pow((L-x)/R,4.);\n\n    return (x < A ? att : dec) * rel;\n   \n}\n\nfloat macesaw(float t, float f, float CO, float Q, float det1, float det2, float res, float resQ)\n{\n    float s = 0.;\n    float inv_CO = 1./CO;\n    float inv_resQ = 1./resQ;\n    float p = f*t;\n        for(int N=1; N<=200; N++)\n        {\n            // saw\n            float sawcomp = 2./PI * (1. - 2.*float(N % 2)) * 1./float(N);\n            float filterN  = pow(1. + pow(float(N)*f*inv_CO,Q),-.5)\n                     + res * exp(-pow((float(N)*f-CO)*inv_resQ,2.));\n           \n            if(abs(filterN*sawcomp) < 1e-6) break;\n               \n            if(det1 > 0. || det2 > 0.)\n            {\n                s += 0.33 * (_sin(float(N)*p) + _sin(float(N)*p*(1.+det1)) + _sin(float(N)*p*(1.+det2)));\n            }\n            else\n            {\n                s += filterN * sawcomp * _sin(float(N)*p);\n            }\n        }\n    return s;\n}\n\nfloat snare(float t, float t_on, float vel)\n{\n    // #define _tri(a) (4.*abs(fract(a)-.5) - 1.)\n    t = t - min(t, t_on);\n    float f1 = 6000.;\n    float f2 = 800.;\n    float f3 = 350.;\n    float dec12 = 0.01;\n    float dec23 = 0.01;\n    float rel = 0.1;\n    float snr = _tri(t * (f3 + (f1-f2)*smoothstep(-dec12,0.,-t)\n                             + (f2-f3)*smoothstep(-dec12-dec23,-dec12,-t))) * smoothstep(-rel,-dec12-dec23,-t);\n       \n    //noise part\n    float noise = 2. * fract(sin(t * 90.) * 45000.) * doubleslope(t,0.05,0.3,0.3);\n  \n    return vel * clamp(1.7 * (2. * snr + noise), -1.5, 1.5) * doubleslope(t,0.0,0.25,0.3);\n}\n\nfloat hut(float t, float t_on, float vel)\n{\n    t = t - min(t, t_on);\n    float noise = fract(sin(t * 90.) * 45000.);\n    noise = 1./(1.+noise);\n    return vel * 2. * noise * doubleslope(t,0.,0.12,0.0);\n   \n    // might think of this one! - maybe tune length / pitch\n    //float kick_blubb = (1.-exp(-1000.*t))*exp(-30.*t) * _sin((400.-200.*t)*t * _saw(4.*f*t));\n}\n\nfloat shake(float t, float t_on, float vel) // shaker is just some mod of hihat (hut)\n{\n    t = t - min(t, t_on);\n    return vel * 0.5 * fract(sin(t * 90.) * 45000.) * doubleslope(t,0.03,0.15,0.15);\n}\n\nfloat hoskins_noise(float t) // thanks to https://www.shadertoy.com/view/4sjSW1 !\n{\n    float p = floor(t * (1500.0 * exp(-t*.100)));\n    vec2 p2 = fract(vec2(p * 5.3983, p * 5.4427));\n    p2 += dot(p2.yx, p2.xy + vec2(21.5351, 14.3137));\n    return fract(p2.x * p2.y * 3.4337) * .5 * smoothstep(-.3,0.,-t);   \n}\n\nfloat facekick(float t, float t_on, float vel)\n{\n    t = t - min(t, t_on); // reset time to Bon event\n   \n    float f   = 50. + 150. * smoothstep(-0.12, 0., -t);\n    float env = smoothstep(0.,0.015,t) * smoothstep(-0.08, 0., 0.16 - t);\n   \n    float kick_body = env * TRISQ(t, f, 3, 1., 0.8, 8., 4., 1.); // more heavy bass drum: increase reso parameters?\n   \n    float kick_click = 0.4 * step(t,0.03) * _sin(t*1100. * _saw(t*800.));\n   \n    float kick_blobb = (1.-exp(-1000.*t))*exp(-40.*t) * _sin((400.-200.*t)*t * _sin(1.*f*t));\n   \n    return vel * (kick_body + kick_blobb + 0.1*kick_click);\n}\n\nfloat hardkick(float t, float t_on, float vel)\n{\n    t = t - min(t, t_on); // reset time to Bon event\n   \n    float f   = 60. + 150. * smoothstep(-0.3, 0., -t);\n    float env = smoothstep(0.,0.01,t) * smoothstep(-0.1, 0.2, 0.3 - t);\n   \n    float kick_body = env * .1*TRISQ(t, f, 100, 1., 1., .1, 16., 10.); // more heavy bass drum: increase reso parameters?\n  \n    kick_body += .7 * (smoothstep(0.,0.01,t) * smoothstep(-0.2, 0.2, 0.3 - t)) * _sin(t*f*.5);\n\n    float kick_click = 1.5*step(t,0.05) * _sin(t*5000. * _saw(t*1000.));\n   \n    kick_click = s_atan(40.*(1.-exp(-1000.*t))*exp(-80.*t) * _sin((1200.-1000.*sin(1000.*t*sin(30.*t)))*t));\n   \n    float kick_blobb = s_crzy(10.*(1.-exp(-1000.*t))*exp(-30.*t) * _sin((300.-300.*t)*t));\n   \n    return vel * 2.*clamp(kick_body + kick_blobb + kick_click,-1.5,1.5);\n}\n\nfloat distsin(float t, float B, float Bon, float Boff, float note, int Bsyn)\n{\n    float Bprog = B-Bon;            // progress within Bar\n    float Bproc = Bprog/(Boff-Bon); // relative progress\n    float _t = SPB*(B - Bon); // reset time to Bon event\n    float f = freqC1(note);\n\n    float env = theta(B-Bon) * theta(Boff-B);\n    float sound = clamp(1.1 * _sin(freqC1(note)*t), -0.999,0.999);\n\n    if(Bsyn == -1) return 0.;\n   \n    if(Bsyn == 0)\n        return env * sound; // test reasons: just give out something simple\n\n    else if(Bsyn == 61)\n    {  \n        env = smoothstep(.0,.0002,Bprog) * smoothstep(.05, 0., B-Boff);\n\n        float filterQ = 20.;\n        float filterCO = 2000. + 1000. * env_ADSR(16. * Bprog,Boff-Bon,1.5,2.5,0.2,10.);\n\n        sound = 0.9*macesaw(t, .5*f, filterCO, filterQ, 0.010, 0.020, 0., 0.)\n               + .4 * macesaw(t, .499*f, filterCO, filterQ, 0.010, 0.020, 0., 0.);\n    }   \n\n    else if(Bsyn == 84)\n    {  \n        env = smoothstep(.0,.00001,Bprog) * smoothstep(.05, 0., B-Boff);\n      \n        float filterQ = 100.;\n        float filterCO = 1500. + 1000. * smoothstep(0.,0.25,Bproc);\n\n        sound = 0.9*macesaw(t, f, filterCO, filterQ, 0.010, 0.020, 0.3, 3.);\n    }       \n\n    if(Bsyn == 76)\n    {\n        sound = TRISQ(t, freqC1(note), 160, 0.4 + .3 * sin(32.*B * (1.+sin(3.*B))), .1 + .1*sin(24.*B), 0.5, 0.2, 0.1);\n    }\n//    float QTRISQ(float t, float f, float QUANT, int MAXN, float MIX, float INR, float NDECAY, float RES, float RES_Q)\n\n   \n    return clamp(env,0.,1.) * clamp(sound, -1., 1.);\n}\n\n\nfloat mainSynth(float time)\n{\n//int trk_syn[6] = int[6](76,84,61,61,6,6);\n// START TRACK INFO\nint NO_trks = 6;\nint trk_sep[7] = int[7](0,19,34,46,49,85,92);\nint trk_syn[6] = int[6](76,84,61,61,6,6);\nfloat mod_on[92] = float[92](0.,2.,6.,8.,10.,12.,14.,16.,18.,20.,21.,22.,23.,25.,27.,29.,31.,33.,35.,4.,6.,8.,10.,14.,16.,18.,20.,21.,22.,27.,29.,31.,33.,35.,6.,8.,10.,12.,16.,18.,23.,25.,27.,29.,31.,33.,6.,8.,10.,12.,14.,16.,18.,18.5,19.,19.5,20.,20.5,21.,21.5,22.,22.5,23.,23.5,24.,24.5,25.,25.5,26.,26.5,27.,27.5,28.,28.5,29.,29.5,30.,30.5,31.5,32.,32.5,33.,33.5,34.,34.5,24.5,26.5,28.5,30.5,32.5,34.5,36.);\nfloat mod_off[92] = float[92](2.,4.,8.,10.,12.,14.,16.,18.,20.,21.,22.,23.,25.,27.,29.,31.,33.,35.,37.,6.,8.,10.,12.,16.,18.,20.,21.,22.,23.,29.,31.,33.,35.,37.,8.,10.,12.,14.,18.,20.,25.,27.,29.,31.,33.,35.,8.,10.,12.,14.,16.,18.,18.5,19.,19.5,20.,20.5,21.,21.5,22.,22.5,23.,23.5,24.,24.5,25.,25.5,26.,26.5,27.,27.5,28.,28.5,29.,29.5,30.,30.5,31.,32.,32.5,33.,33.5,34.,34.5,35.,25.,27.,29.,31.,33.,35.,36.5);\nint mod_ptn[92] = int[92](1,1,5,5,5,6,6,7,8,9,9,9,10,10,10,10,10,10,0,2,2,2,2,7,7,2,9,9,9,10,10,10,10,16,3,3,3,6,7,3,11,11,11,11,11,11,4,4,4,12,12,12,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15);\nfloat mod_transp[92] = float[92](24.,24.,0.,0.,0.,12.,12.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,-12.,0.,0.,-12.,-12.,0.,0.,0.,0.,0.,0.,24.,12.,0.,0.,0.,0.,0.,12.,12.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.);\nfloat inv_NO_tracks = .16666666666666666;\nfloat max_mod_off = 37.;\nint drum_index = 6;\nfloat drum_synths = 11.;\nint NO_ptns = 17;\nint ptn_sep[18] = int[18](0,2,12,43,74,107,132,160,183,208,222,254,310,347,357,365,367,373);\nfloat note_on[373] = float[373](0.,.5,0.,.25,.375,.5,.625,1.,1.25,1.375,1.5,1.625,0.,.0625,.125,.1875,.25,.3125,.375,.4375,.5,.5625,.625,.6875,.8125,.875,.9375,1.,1.0625,1.125,1.1875,1.25,1.3125,1.375,1.4375,1.5,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,0.,.0625,.125,.1875,.25,.3125,.375,.4375,.5,.5625,.625,.6875,.8125,.875,.9375,1.,1.0625,1.125,1.1875,1.25,1.3125,1.375,1.4375,1.5,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,0.,0.,.0625,.125,.1875,.25,.3125,.375,.4375,.5,.5625,.625,.6875,.75,.8125,.875,.9375,1.,1.0625,1.125,1.1875,1.25,1.3125,1.375,1.4375,1.5,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,.0625,.125,.1875,.3125,.375,.4375,.5625,.625,.6875,.8125,.875,.9375,1.0625,1.125,1.1875,1.3125,1.375,1.4375,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,0.,0.,0.,0.,.375,.375,.375,.375,.5,.5,.5,.5,.875,.875,.875,.875,1.,1.,1.,1.,1.375,1.375,1.375,1.375,1.5,1.5,1.5,1.5,.0625,.125,.1875,.25,.3125,.375,.5625,.625,.6875,.75,.8125,.875,1.0625,1.125,1.1875,1.25,1.3125,1.375,1.5,1.5625,1.625,1.8125,1.875,.0625,.125,.1875,.3125,.375,.4375,.5625,.625,.6875,.8125,.875,.9375,1.0625,1.125,1.1875,1.3125,1.375,1.4375,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,.0625,.125,.1875,.25,.3125,.375,.4375,.5625,.625,.6875,.75,.8125,.875,.9375,0.,.0625,.125,.1875,.25,.3125,.375,.4375,.5,.5625,.625,.6875,.75,.8125,.875,.9375,1.,1.0625,1.125,1.1875,1.25,1.3125,1.375,1.4375,1.5,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,.0625,.0625,.0625,.125,.1875,.1875,.1875,.3125,.3125,.3125,.375,.4375,.4375,.4375,.5625,.5625,.5625,.625,.6875,.6875,.6875,.8125,.8125,.8125,.875,.9375,.9375,.9375,1.0625,1.0625,1.0625,1.125,1.1875,1.1875,1.1875,1.3125,1.3125,1.3125,1.375,1.4375,1.4375,1.4375,1.5625,1.5625,1.5625,1.625,1.6875,1.6875,1.6875,1.8125,1.8125,1.8125,1.875,1.9375,1.9375,1.9375,0.,.03125,.09375,.09375,.125,.28125,.3125,.34375,.375,.5,.53125,.5625,.59375,.75,.78125,.84375,.875,1.,1.,1.03125,1.0625,1.09375,1.28125,1.3125,1.34375,1.375,1.5,1.5,1.53125,1.5625,1.59375,1.6875,1.75,1.78125,1.8125,1.84375,1.875,0.,0.,.0625,.125,.1875,.25,.25,.3125,.375,.4375,0.,.0625,.125,.1875,.25,.3125,.375,.4375,.3125,.4375,0.,0.,0.,.5,.5,.5);\nfloat note_off[373] = float[373](.5,2.,.25,.5,.4375,1.,.6875,1.25,1.5,1.4375,2.,1.6875,.25,.125,.1875,.25,.5,.375,.4375,.5,1.,.625,.6875,.75,.875,.9375,1.,1.25,1.125,1.1875,1.25,1.5,1.375,1.4375,1.5,2.,1.625,1.6875,1.75,1.8125,1.875,1.9375,2.,.25,.125,.1875,.25,.5,.375,.4375,.5,1.,.625,.6875,.75,.875,.9375,1.,1.25,1.125,1.1875,1.25,1.5,1.375,1.4375,1.5,2.,1.625,1.6875,1.75,1.8125,1.875,1.9375,2.,.0625,.0625,.125,.1875,.25,.3125,.375,.4375,.5,.5625,.625,.6875,.75,.8125,.875,.9375,1.,1.0625,1.125,1.1875,1.25,1.3125,1.375,1.4375,1.5,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,2.,.125,.1875,.25,.375,.4375,.5,.625,.6875,.75,.875,.9375,1.,1.125,1.1875,1.25,1.375,1.4375,1.5,1.625,1.6875,1.75,1.8125,1.875,1.9375,2.,.25,.25,.25,.25,.5,.5,.5,.5,.75,.75,.75,.75,1.,1.,1.,1.,1.25,1.25,1.25,1.25,1.5,1.5,1.5,1.5,1.75,1.75,1.75,1.75,.09375,.1875,.25,.28125,.34375,.5,.59375,.6875,.75,.78125,.84375,1.,1.09375,1.1875,1.25,1.28125,1.34375,1.5,1.5625,1.59375,1.75,1.84375,2.,.125,.1875,.25,.375,.4375,.5,.625,.6875,.75,.875,.9375,1.,1.125,1.1875,1.25,1.375,1.4375,1.5,1.625,1.6875,1.75,1.8125,1.875,1.9375,2.,.125,.1875,.25,.3125,.375,.4375,.5,.625,.6875,.75,.8125,.875,.9375,1.,.0625,.125,.1875,.25,.3125,.375,.4375,.5,.5625,.625,.6875,.75,.8125,.875,.9375,1.,1.0625,1.125,1.1875,1.25,1.3125,1.375,1.4375,1.5,1.5625,1.625,1.6875,1.75,1.8125,1.875,1.9375,2.,.125,.125,.125,.1875,.25,.25,.25,.375,.375,.375,.4375,.5,.5,.5,.625,.625,.625,.6875,.75,.75,.75,.875,.875,.875,.9375,1.,1.,1.,1.125,1.125,1.125,1.1875,1.25,1.25,1.25,1.375,1.375,1.375,1.4375,1.5,1.5,1.5,1.625,1.625,1.625,1.6875,1.75,1.75,1.75,1.875,1.875,1.875,1.9375,2.,2.,2.,.0625,.0625,.125,.15625,.1875,.3125,.375,.375,.4375,.5625,.5625,.625,.625,.8125,.8125,.875,.9375,1.0625,1.0625,1.0625,1.125,1.125,1.3125,1.375,1.375,1.4375,1.5625,1.5625,1.5625,1.625,1.625,1.75,1.8125,1.8125,1.875,1.875,1.9375,.0625,.0625,.125,.1875,.25,.3125,.3125,.375,.4375,.5,.125,.125,.25,.25,.375,.375,.5,.5,.375,.5,.5,.46875,.46875,1.875,2.,1.96875);\nfloat note_pitch[373] = float[373](22.,17.,29.,36.,29.,37.,32.,29.,35.,32.,31.,24.,29.,17.,24.,17.,36.,24.,29.,24.,37.,25.,33.,25.,25.,34.,33.,30.,17.,24.,17.,35.,19.,26.,19.,31.,13.,24.,13.,10.,12.,13.,15.,41.,29.,36.,29.,48.,36.,41.,36.,49.,37.,45.,37.,37.,46.,45.,42.,29.,36.,29.,47.,31.,38.,31.,43.,25.,36.,25.,22.,24.,25.,29.,36.,36.,41.,48.,36.,37.,41.,44.,49.,37.,41.,44.,49.,34.,37.,41.,43.,44.,36.,37.,41.,43.,36.,44.,36.,43.,32.,31.,29.,36.,32.,31.,25.,17.,24.,17.,24.,29.,24.,25.,33.,25.,25.,34.,33.,17.,24.,17.,19.,26.,19.,13.,24.,13.,10.,12.,13.,15.,17.,32.,41.,48.,28.,12.,36.,43.,34.,6.,37.,49.,34.,10.,26.,53.,15.,56.,43.,27.,10.,26.,34.,53.,12.,53.,36.,31.,48.,46.,44.,43.,41.,43.,44.,43.,41.,40.,37.,40.,44.,46.,44.,43.,41.,44.,48.,49.,43.,41.,43.,29.,36.,29.,36.,41.,36.,37.,45.,37.,37.,46.,45.,29.,36.,29.,31.,38.,31.,25.,36.,25.,26.,28.,28.,28.,17.,29.,17.,20.,24.,28.,23.,17.,24.,17.,20.,25.,32.,27.,17.,17.,17.,17.,24.,24.,24.,24.,17.,17.,17.,17.,16.,16.,16.,16.,17.,17.,17.,17.,19.,19.,19.,19.,20.,20.,20.,20.,23.,23.,23.,23.,41.,17.,36.,29.,46.,17.,32.,36.,24.,41.,28.,40.,43.,24.,44.,41.,17.,24.,44.,36.,17.,43.,36.,16.,23.,43.,36.,16.,44.,36.,17.,24.,44.,36.,17.,43.,46.,19.,12.,46.,40.,19.,48.,44.,25.,22.,48.,44.,25.,52.,43.,29.,24.,52.,43.,29.,23.,26.,26.,23.,25.,26.,23.,26.,25.,25.,26.,23.,26.,23.,26.,26.,25.,25.,23.,26.,23.,26.,26.,23.,26.,25.,25.,23.,26.,23.,26.,23.,23.,26.,23.,26.,25.,23.,37.,35.,35.,34.,37.,34.,35.,35.,37.,23.,26.,23.,3.,23.,26.,23.,3.,25.,25.,22.,41.,53.,53.,17.,44.);\nfloat note_vel = 1.;\n\n\nfloat max_release = 0.3;\n   \nfloat global_norm = .6;\nfloat track_norm[7] = float[7](1.,1.,.9,.9,1.,.9,1.7);\n   \n    float r = 0.;\n    float d = 0.;\n\n    //which beat are we at?\n    float BT = mod(BPS * time, max_mod_off); // mod for looping\n    if(BT > max_mod_off) return r;\n\n    // drum / sidechaining parameters\n    float amt_drum = 0.3;\n    float r_sidechain = 1.;\n    float amt_sidechain = 0.99;\n    float dec_sidechain = 0.6;\n\n    float Bon = 0.;\n    float Boff = 0.;\n\n    for(int trk = 0; trk < NO_trks; trk++)\n    {\n        int TLEN = trk_sep[trk+1] - trk_sep[trk];\n       \n        int _mod = TLEN;\n        for(int i=0; i<TLEN; i++) if(BT < mod_off[(trk_sep[trk]+i)]) {_mod = i; break;}\n        if(_mod == TLEN) continue;\n       \n        float B = BT - mod_on[trk_sep[trk]+_mod];\n       \n        int ptn = mod_ptn[trk_sep[trk]+_mod];\n        int PLEN = ptn_sep[ptn+1] - ptn_sep[ptn];\n       \n        int _noteU = PLEN-1;\n        for(int i=0; i<PLEN-1; i++) if(B < note_on[(ptn_sep[ptn]+i+1)]) {_noteU = i; break;}\n\n        int _noteL = PLEN-1;\n        for(int i=0; i<PLEN-1; i++) if(B <= note_off[(ptn_sep[ptn]+i)] + max_release) {_noteL = i; break;}\n       \n        for(int _note = _noteL; _note <= _noteU; _note++)\n        {\n            Bon    = note_on[(ptn_sep[ptn]+_note)];\n            Boff   = note_off[(ptn_sep[ptn]+_note)];\n\n            if(trk_syn[trk] == drum_index)\n            {\n                float Bdrum = mod(note_pitch[ptn_sep[ptn]+_note], drum_synths);\n                float Bvel = 1.; //note_vel[(ptn_sep[ptn]+_note)] * pow(2.,mod_transp[_mod]/6.);\n\n                float anticlick = 1.-exp(-1000.*(B-Bon));\n                float _d = 0.;\n\n                if(Bdrum < .01) // Sidechain\n                {\n                    r_sidechain = anticlick - amt_sidechain * theta(B-Bon) * smoothstep(-dec_sidechain,0.,Bon-B);\n                }\n                else if(Bdrum < 1.01) // Kick1\n                {\n                    r_sidechain = anticlick - amt_sidechain * theta(B-Bon) * smoothstep(-dec_sidechain,0.,Bon-B);\n                    r_sidechain *= 0.5;\n                    _d = facekick(B*SPB, Bon*SPB, Bvel);\n                }\n                else if(Bdrum < 2.01) // Kick2\n                {\n                    r_sidechain = anticlick - amt_sidechain * theta(B-Bon) * smoothstep(-dec_sidechain,0.,Bon-B);\n                    r_sidechain *= 0.5;\n                    _d = hardkick(B*SPB, Bon*SPB, Bvel);\n                }\n                else if(Bdrum < 3.01) // Snare1\n                {\n                    _d = snare(B*SPB, Bon*SPB, Bvel);\n                }\n                else if(Bdrum < 4.01) // HiHat\n                {\n                    _d = hut(B*SPB, Bon*SPB, Bvel);\n                }               \n                else if(Bdrum < 5.01) // Shake\n                {\n                    _d = shake(B*SPB, Bon*SPB, Bvel);\n                }\n                else if(Bdrum < 6.01) // ...\n                {\n                }         \n                d += track_norm[trk] * _d;\n            }\n            else\n            {\n                r += track_norm[trk] * distsin(time, B, Bon, Boff,\n                                               note_pitch[(ptn_sep[ptn]+_note)] + mod_transp[_mod], trk_syn[trk]);\n            }\n\n        }\n    }\n\n    d *= global_norm;\n    r *= global_norm;\n\n    r_sidechain = 1.;\n    amt_drum = .5;\n\n    float snd = s_atan((1.-amt_drum) * r_sidechain * r + amt_drum * d);\n\n    return s_atan(snd);\n//    return sign(snd) * sqrt(abs(snd)); // eine von Matzes \"besseren\" Ideen\n}\n\nvec2 mainSound( in int samp,float t)\n{\n    //maybe this works in enhancing the stereo feel\n    float stereo_width = 0.1;\n    float stereo_delay = 0.00001;\n   \n    //float comp_l = mainSynth(t) + stereo_width * mainSynth(t - stereo_delay);\n    //float comp_r = mainSynth(t) + stereo_width * mainSynth(t + stereo_delay);\n   \n    //return vec2(comp_l * .99999, comp_r * .99999);\n   \n    return vec2(mainSynth(t));\n}","name":"Sound","description":"","type":"sound"}]}