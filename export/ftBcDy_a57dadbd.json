{"ver":"0.1","info":{"id":"ftBcDy","date":"1650198436","viewed":138,"name":"8_1_texMapping","username":"tomoe","description":"sample code\nthe camera direction is parametrized by the mouse position\n","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["ch8"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n//begin rot\nvec2 rot2(vec2 p, float t){\n    return vec2(cos(t) * p.x -sin(t) * p.y, sin(t) * p.x + cos(t) * p.y);\n}\nvec3 rotX(vec3 p, float t){\n    return vec3(p.x, rot2(p.yz, t));\n}\nvec3 rotY(vec3 p, float t){\n    return vec3(p.y, rot2(p.zx, t)).zxy;\n}\nvec3 rotZ(vec3 p, float t){\n    return vec3(rot2(p.xy, t), p.z);\n}\n//end rot\nfloat text(vec2 st){\n    return mod(floor(st.s) + floor(st.t), 2.0);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 cPos = vec3(0.0, 0.0, 0.0);\n    float t = -0.5 * PI * (iMouse.y / iResolution.y);\n    vec3 cDir = rotX(vec3(0.0, 0.0, - 1.0), t);\n    vec3 cUp = rotX(vec3(0.0, 1.0, 0.0), t);\n    vec3 cSide = cross(cDir, cUp);\n    float targetDepth = 1.0;\n    vec3 ray = cSide * p.x + cUp * p.y + cDir * targetDepth - cPos;\n    ray = normalize(ray);\n    vec3 groundNormal = vec3(0.0, 1.0, 0.0);\n    float groundHeight = 1.0 + (iMouse.x / iResolution.x);\n    if (dot(ray, groundNormal) < 0.0){\n        vec3 hit = cPos - ray * groundHeight / dot(ray, groundNormal);\n        fragColor.rgb = vec3(text(hit.zx));\n    } else {\n        fragColor.rgb = vec3(0.0);\n    }\n    fragColor.a = 1.0;\n}","name":"Image","description":"","type":"image"}]}