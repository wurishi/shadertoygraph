{"ver":"0.1","info":{"id":"DttfWM","date":"1701300909","viewed":36,"name":"inversion of a Mandelbrot","username":"consindine","description":"based off of the thing on Wikipedia","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 5.0*(2.0*fragCoord - iResolution.xy)/min(iResolution.x, iResolution.y);\n\n\n    float l = length(uv);\n\n/*\n    P * P' = r^2\n    \n    r^2 / P' = P\n\n*/\n\n    uv = normalize(uv) * ((2.0)/l);\n    uv.y += tan(0.5*iTime);\n\n    float IC = 100.0;\n\n    vec2 v = vec2(0.0);\n    float i = 0.0;\n    for(; i < IC; i++){\n        if(length(v) > 2.0)\n            break;\n\n\n/*\n    z = ia + b\n    \n    z*z = i*a*i*a + i*a*b + b*i*a + b*b\n\n\n    z*z = i*a*i*a + 2i*a*b + b*b\n\n    z*z = 2i*a*b + b*b -a*a\n\n*/\n\n        v = vec2(v.x*v.y*2.0 , v.y*v.y - v.x*v.x) + uv;\n    }\n\n\n    float B = (IC - i) / IC;\n    fragColor = vec4(1.0) * B * B * B;\n}","name":"Image","description":"","type":"image"}]}