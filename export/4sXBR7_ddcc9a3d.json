{"ver":"0.1","info":{"id":"4sXBR7","date":"1495222820","viewed":177,"name":"Newton Fractal x^8","username":"DonKarlssonSan","description":"Newton Fractal\nControl the zoom factor with mouse x\nControl the hue change factor with mouse y\nNote: you must drag (hold down a button)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Complex Number math by julesb\n// https://github.com/julesb/glsl-util\n\n#define PI 3.14159265\n\n#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))\n#define cx_modulus(a) length(a)\n#define cx_conj(a) vec2(a.x,-a.y)\n#define cx_arg(a) atan2(a.y,a.x)\n#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))\n#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))\n\nvec2 cx_sqrt(vec2 a) {\n    float r = sqrt(a.x*a.x+a.y*a.y);\n    float rpart = sqrt(0.5*(r+a.x));\n    float ipart = sqrt(0.5*(r-a.x));\n    if (a.y < 0.0) ipart = -ipart;\n    return vec2(rpart,ipart);\n}\n\nvec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }\n\nvec2 cx_log(vec2 a) {\n    float rpart = sqrt((a.x*a.x)+(a.y*a.y));\n    float ipart = atan(a.y,a.x);\n    if (ipart > PI) ipart=ipart-(2.0*PI);\n    return vec2(log(rpart),ipart);\n}\n\nvec2 cx_mobius(vec2 a) {\n    vec2 c1 = a - vec2(1.0,0.0);\n    vec2 c2 = a + vec2(1.0,0.0);\n    return cx_div(c1, c2);\n}\n\nvec2 cx_z_plus_one_over_z(vec2 a) {\n    return a + cx_div(vec2(1.0,0.0), a);\n}\n\n\nvec2 cx_sin_of_one_over_z(vec2 z) {\n    return cx_sin(cx_div(vec2(1.0,0.0), z));\n}\n\n\n////////////////////////////////////////////////////////////\n// end Complex Number math by julesb\n////////////////////////////////////////////////////////////\n\n\n// My own additions to complex number math\nvec2 cx_mul(vec2 a, vec2 b) { \n    return vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\n#define cx_abs(a) sqrt(a.x * a.x + a.y * a.y)\nvec2 cx_to_polar(vec2 a) {\n    float phi = atan(a.x / a.y);\n    float r = sqrt(a.x * a.x + a.y * a.y);    \n    return vec2(r, phi); \n}\n\n// Complex power\n// Let z = r(cos θ + i sin θ)\n// Then z^n = r^n (cos nθ + i sin nθ)\nvec2 cx_pow(vec2 a, float n) {\n    float angle = atan(a.y, a.x);\n    float r = length(a);\n    float real = pow(r, n) * cos(n*angle);\n    float im = pow(r, n) * sin(n*angle);\n    return vec2(real, im);\n}\n\n// From Stackoveflow\n// http://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nmat2 rotate(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\n////////////////////////////////\n// End util                   //\n// Actual fractal begins here //\n////////////////////////////////\n\n// f(x) = x^8+15x^4-16\nvec2 f(vec2 z) {\n    vec2 c1 = cx_pow(z, 8.0);\n    vec2 c2 = cx_pow(z, 4.0) * 15.0;\n  \n    return c1 + c2 - 16.0;\n} \n\n// f(x) derivated\n// f'(x) = 8x^7+60x^3  \nvec2 fPrim(vec2 z) {\n    return cx_pow(z, 7.0) * 8.0 + cx_pow(z, 3.0) * 60.0;\n} \n\nint maxIterations = 50;\nvec2 one = vec2(1, 0);\nfloat newtonRapson(vec2 z) {\n  vec2 oldZ = z;\n  float s = 0.0;\n  for(int i = 0; i < maxIterations; i++){\n    z = z - cx_div(f(z), fPrim(z)); \n    if(abs(oldZ.x - z.x) < 0.001 && abs(oldZ.y - z.y) < 0.001) {\n      return s;\n    }\n    \n    vec2 w = cx_div(one, (oldZ - z));\n    float wAbs = cx_abs(w);\n    \n    s += exp(-wAbs);\n    oldZ = z;\n  }\n  return float(maxIterations);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy;\n    if(mouse.x < 0.01 && mouse.y < 0.01) {\n     \tmouse = iResolution.xy / 3.0;\n    }\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 zoomed = uv / mouse.x * iResolution.x / 2.0;\n    vec2 rotated = zoomed * rotate(iTime / 3.0);\n    \n    \n    float hue = newtonRapson(rotated) / float(maxIterations) * mouse.y / 20.0;\n    vec3 c = hsv2rgb(vec3(hue, 1.0, 1.0));\n    fragColor = vec4(c, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}