{"ver":"0.1","info":{"id":"WdVBWz","date":"1606926680","viewed":145,"name":"Voronoi Raymarched Water","username":"Skelpdar","description":"Raymarched water, allowed to pass through the surface once for transparency, with a surface defined by Voronoi noise.  \n\nThanks to:\niq for the Voronoi noise\njlfwong for the raymarching tutorials and code","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","voronoi","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Voronoi noise by user iq\n\n// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n//===============================================================================================\n//===============================================================================================\n\n// do not use texture\n#define FULL_PROCEDURAL\n\n#ifdef FULL_PROCEDURAL\nvec3 hash( vec3 x )\n{\n\tx = vec3( dot(x,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(x,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(x,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(x)*43758.5453123);\n}\n#else\nvec3 hash( vec3 x )\n{\n\treturn texture( iChannel0, (x.xy+vec2(3.0,1.0)*x.z+0.5)/256.0, -100.0 ).xyz;\n}\n#endif\n\n// returns closest, second closest, and cell id\nvec3 voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n//===============================================================================================\n\n//End of code by user iq\n\nconst int MAX_STEPS = 1000;\nconst float EPSILON = 0.01;\nconst float MIN_DIST = 0.25;\nconst float MAX_DIST = 100.;\n\n//Surface height\nfloat height(vec2 pos){\n    float h = 0.7*voronoi(vec3(pos/2.,0.4*iTime)).x;\n    \n    return h+0.7*sin((pos.x-pos.y+2.*iTime)/2.);\n}\n\nfloat terrainSDF(vec3 pos){\n    vec2 p = vec2(pos.x,pos.z);\n\n\treturn pos.y - height(p);\n}\n\n/*\nRaymarching code and Phong Illumination taken and adapted from user jlfwong's excellent tutorials, check them out\n*/\n\nfloat distToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        float dist = terrainSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist*0.1;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\n/*\nThis is the same ray marching algorithm, but the signed distance function has opposite sign\nSo we raymarch from below the surface and stops when it hits the surface above.\n*/\n\nfloat distFromSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        float dist = -terrainSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        //Our SDF function is an approximation, one can't really get the closest distance from a point p\n        //to a heightmap just by looking at the difference p.y - height(p)\n        //But this can be partly by taking a smaller step\n        depth += dist*0.5;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 rayDirection(float fov, vec2 size, vec2 fragCoord){\n\tvec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fov) / 2.0);\n    return normalize(vec3(xy, -z));\n    \n}\n\nvec3 estimateNormal(vec3 p) {\n    return -normalize(vec3(\n        \t\t\t\t  (height(vec2(p.x+EPSILON,p.z))-height(vec2(p.x-EPSILON,p.z)))/(2.*EPSILON),\n                          -1,\n                          (height(vec2(p.x,p.z+EPSILON))-height(vec2(p.x,p.z-EPSILON)))/(2.*EPSILON)));\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat4(\n        vec4(s, 0.0),\n        vec4(u, 0.0),\n        vec4(-f, 0.0),\n        vec4(0.0, 0.0, 0.0, 1)\n    );\n}\n\n/*\nOnce again:\nRaymarching code and Phong Illumination taken and adapted from user jlfwong's excellent tutorials, check them out\n*/\n\nvec3 phongContribForLight(vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye,\n                          vec3 lightPos, vec3 lightIntensity) {\n    vec3 N = estimateNormal(p);\n    vec3 L = normalize(lightPos - p);\n    vec3 V = normalize(eye - p);\n    vec3 R = normalize(reflect(-L, N));\n    \n    float dotLN = dot(L, N);\n    float dotRV = dot(R, V);\n    \n    if (dotLN < 0.0) {\n        return vec3(0.0, 0.0, 0.0);\n    } \n    \n    if (dotRV < 0.0) {\n        return lightIntensity * (k_d * dotLN);\n    }\n    return lightIntensity * (k_d * dotLN + k_s * pow(dotRV, alpha));\n}\n\nvec3 phongIllumination(vec3 k_a, vec3 k_d, vec3 k_s, float alpha, vec3 p, vec3 eye) {\n    const vec3 ambientLight = 0.5 * vec3(1.0, 1.0, 1.0);\n    vec3 color = ambientLight * k_a;\n    \n    vec3 light1Pos = eye+vec3(-2.*MAX_DIST,2.*MAX_DIST,2.*MAX_DIST);\n    vec3 light1Intensity = vec3(1.0, 1.0, 1.0);\n    \n    color += phongContribForLight(k_d, k_s, alpha, p, eye,\n                                  light1Pos,\n                                  light1Intensity);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 viewDir = rayDirection(45.0, iResolution.xy, fragCoord);\n    vec3 eye = vec3(0., 10.0, -0.0);\n    \n    mat4 viewToWorld = viewMatrix(eye, eye + vec3(5., -4.0, 10.), vec3(0.0, 1.0, 0.0));\n    \n    vec3 worldDir = (viewToWorld * vec4(viewDir, 0.0)).xyz;\n    \n    float dist = distToSurface(eye, worldDir, MIN_DIST, MAX_DIST);\n    \n    //If the ray doesn't hit anything\n    if (dist > MAX_DIST - EPSILON) {\n        fragColor = vec4(0.,0.,0.,0.);\n\t\treturn;\n    }\n    \n    vec3 p = eye + dist * worldDir;\n    \n    //March under the water surface\n    float dist2 = distFromSurface(p, worldDir, MIN_DIST, MAX_DIST);\n    vec3 p2 = p + dist2*worldDir;\n    \n    //March above the water once again\n    float dist3 = distToSurface(p2, worldDir, MIN_DIST, MAX_DIST);\n    vec3 p3 = p2+dist3*worldDir;\n    \n    vec3 n = estimateNormal(p);\n    \n    //Surface Phong Illumination colors\n    vec3 K_a = vec3(0.2, 0.2, 0.2);\n    vec3 K_d = vec3(133./255.,157./255.,228./255.);\n    vec3 K_s = 1.*vec3(1.0, 1.0, 1.0);\n    float shininess = 1.;\n    \n    vec3 color1 = phongIllumination(K_d, K_d, K_s, shininess, p, eye);\n    //Color inside the water\n    vec3 color2 = K_d*0.5;\n    vec3 color3 = phongIllumination(K_d, K_d, K_s, shininess, p3, eye);\n    \n    //The amount of color from the first water surface hit\n    float firstHit = 0.2;\n    //The transparency of the water, in units the light has to travel through for it to not too reach the surface behind.\n    float t = 6.;\n    \n    vec3 color =  firstHit*color1+(1.-firstHit)*(clamp(dist2/t,0.,1.)*color2+(1.-clamp(dist2/t,0.,1.))*color3);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}