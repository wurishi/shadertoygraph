{"ver":"0.1","info":{"id":"3s2fDG","date":"1590738829","viewed":405,"name":"Pen Sketcher App","username":"sdfgeoff","description":"Drawing onto a piece of paper with the mouse","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["sketch","paint","draw","pencil","state"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define line_color vec4(0.7, 0.8, 0.75, 1.0)\n#define paper_color vec4(0.95, 0.9, 0.8, 1.0)\n#define line_width 0.005\n#define line_spacing_x 0.05\n#define line_spacing_y 0.05\n\nvec4 graph_paper(vec2 coord) {\n    \n    vec2 dist_coords = coord;\n    float lines = float(mod(dist_coords.x, line_spacing_x) > line_width && mod(dist_coords.y, line_spacing_y) > line_width );\n    \n    return mix(line_color, paper_color, lines);\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 here = uv * aspect;\n\n    // paper\n    vec4 paper = graph_paper(here);\n    vec4 col = textureLod(iChannel1, uv, 0.0);\n\tvec4 ui = textureLod(iChannel2, uv, 0.0);\n    \n    vec3 composite = mix(paper.rgb, col.rgb, col.a);\n    composite = mix(composite, ui.rgb, ui.a);\n    \n    \n    \n    \n    // Output to screen\n    fragColor = vec4(composite,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Stores state regarding the program itself\n\n#define state_buffer iChannel0\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 here = fragCoord.xy / iResolution.xy * aspect;\n    \n    vec2 mouse_pos = iMouse.xy / iResolution.xy * aspect;\n    \n    \n    vec4 previous = texture(iChannel0, fragCoord.xy / iResolution.xy);\n    fragColor = previous; // Default to preserving previous state\n    \n    // Store mouse history so we can draw lines\n    vec4 prev_mouse_state = load_data(state_buffer, A_PREV_MOUSE_STATE_1);\n   \tsave_data(A_PREV_MOUSE_STATE_2, prev_mouse_state, fragColor, ivec2(fragCoord));\n    save_data(A_PREV_MOUSE_STATE_1, iMouse, fragColor, ivec2(fragCoord));\n    \n    \n    \n    // Button clicks\n    bool is_button = mouse_pos.x > BUTTON_OFFSET;\n    is_button = is_button && mouse_pos.x < BUTTON_OFFSET + BUTTON_SIZE;\n    int button_id = int((mouse_pos.y - BUTTON_OFFSET) / (BUTTON_OFFSET + BUTTON_SIZE));\n    is_button = is_button && mod(mouse_pos.y - BUTTON_OFFSET, BUTTON_OFFSET + BUTTON_SIZE) < BUTTON_SIZE;\n    is_button = is_button && button_id < 6;\n    \n    if (is_button && iMouse.z > 0.5) {\n        ivec2 address = A_PEN_SIZE;\n        int value = button_id;\n        if (button_id >= 3) {\n            address = A_PEN_COLOR;\n            value -= 3;\n        }\n        save_data(address, vec4(float(value)), fragColor, ivec2(fragCoord));\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Program wide defines\n#define SIDEPANEL_WIDTH 0.1\n\n#define BUTTON_SIZE 0.08\n#define BUTTON_OFFSET 0.01\n\n\nvec4[] PEN_COLORS = vec4[] (\n    vec4(0.0, 0.0, 0.0, 1.0),\n    vec4(0.6, 0.0, 0.0, 1.0),\n    vec4(0.0, 0.0, 0.6, 1.0)\n);\n\nfloat[] PEN_SIZES = float[] (\n    0.002,\n    0.004,\n    0.006\n);\n\n// Functions and defines used to extract data from buffer A which contains the program state\n\n// These constants are prefixed with \"A\" for address\n#define A_PREV_MOUSE_STATE_1 ivec2(0,0)\n#define A_PREV_MOUSE_STATE_2 ivec2(0,1)\n\n#define A_PEN_SIZE ivec2(1,0)\n#define A_PEN_COLOR ivec2(1,1)\n\n\n\nvec4 load_data( sampler2D sampler, ivec2 address )\n{\n    return texelFetch( sampler, address, 0 );\n}\n\n\nvoid save_data(ivec2 address, in vec4 value, inout vec4 cur_pixel, in ivec2 cur_coord )\n{\n    if (all(equal(address, cur_coord))) {\n        cur_pixel = value;\n    }\n}\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// The \"canvas\" that the user paints onto.\n\n\n#define state_buffer iChannel0\n#define canvas_buffer iChannel1\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 here = fragCoord.xy / iResolution.xy * aspect;\n    \n    // Find what the mouse did\n    vec4 mouse_now = load_data(state_buffer, A_PREV_MOUSE_STATE_1);\n\tvec4 mouse_prev = load_data(state_buffer, A_PREV_MOUSE_STATE_2);\n    \n    vec2 mouse_coord_now = mouse_now.xy / iResolution.xy * aspect;\n    vec2 mouse_coord_prev = mouse_prev.xy / iResolution.xy * aspect;\n    \n    bool mouse_click_now = mouse_now.z > 0.5;\n    bool mouse_click_prev = mouse_prev.z > 0.5;\n    \n    \n    // preserve what was on the canvas previously\n    vec4 final = texture(canvas_buffer, fragCoord.xy / iResolution.xy);\n\n    \n    if (mouse_click_now && mouse_click_prev){\n        // If the user clicked, draw a line segment.\n        \n        vec2 line_direction = mouse_coord_prev - mouse_coord_now;\n        vec2 point_on_line = mouse_coord_now;\n        float segment_length = length(line_direction);\n        \n        \n        float projected_distance = dot(normalize(line_direction), here - point_on_line);\n        vec2 closest_point = point_on_line + projected_distance * line_direction / segment_length;\n        \n        float distance_from_line = length(closest_point - here);\n    \tfloat distance_from_start = -projected_distance;\n    \tfloat distance_from_end = projected_distance - segment_length;\n    \t\n    \t\n    \tfloat distance_from_capsule = max(distance_from_line, distance_from_start);\n    \tdistance_from_capsule = max(distance_from_capsule, distance_from_end);\n        \n        \n        vec4 brush_color = PEN_COLORS[int(load_data(state_buffer, A_PEN_COLOR).x)];\n        float brush_size = PEN_SIZES[int(load_data(state_buffer, A_PEN_SIZE).x)];\n        \n        float brush = 1.0 - min(distance_from_capsule, brush_size) / brush_size;\n        brush *= 2.0;\n        brush = clamp(brush, 0.0, 1.0);\n        \n        \n        \n        \n        \n    \tfinal = mix(final, brush_color, brush);\n    }\n    \n    if (iTime <= 0.5){\n        final = vec4(0.0);\n    }\n    \n    fragColor = final;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Draws the UI\n#define state_buffer iChannel0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n    vec2 here = fragCoord.xy / iResolution.xy * aspect;\n    \n    if (here.x < SIDEPANEL_WIDTH){\n        // Set the sidepanel to be grey\n    \tfragColor = vec4(0.2,0.2,0.2,1.0);\n        \n        // Button backgrounds/borders\n        bool button_backgrounds = here.x > BUTTON_OFFSET;\n        button_backgrounds = button_backgrounds && here.x < BUTTON_OFFSET + BUTTON_SIZE;\n        int button_id = int((here.y - BUTTON_OFFSET) / (BUTTON_OFFSET + BUTTON_SIZE));\n        button_backgrounds = button_backgrounds && mod(here.y - BUTTON_OFFSET, BUTTON_OFFSET + BUTTON_SIZE) < BUTTON_SIZE;\n        button_backgrounds = button_backgrounds && button_id < 6;\n        \n        // Figure out what the user currently has the program set to\n        int selected_size = int(load_data(state_buffer, A_PEN_SIZE).x);\n        int selected_color = int(load_data(state_buffer, A_PEN_COLOR).x);\n        \n\t\t// Highlight selected buttons\n        vec3 background_color = vec3(0.8);\n        if (button_id == selected_size || button_id == selected_color + 3) {\n            background_color = vec3(1.0);\n        }\n        \n        \n        // Draw on the buttons\n        vec2 button_center = here - vec2(\n            BUTTON_OFFSET + BUTTON_SIZE/2.0,\n            float(button_id + 1) * (BUTTON_OFFSET + BUTTON_SIZE) - BUTTON_SIZE/2.0\n        );\n        \n        if (button_id < 3){\n            // Pen size\n        \tbackground_color -= float(length(button_center) < PEN_SIZES[button_id]);\n        } else {\n            // Pen Color\n            bool color_patch = abs(button_center.x) > 0.02 || + abs(button_center.y) > 0.02;\n            background_color = mix(PEN_COLORS[button_id - 3].rgb, background_color, float(color_patch));\n        }\n        \n        fragColor = mix(fragColor, vec4(background_color, 1.0), float(button_backgrounds));\n        \n    } else {\n        // Leave the non-UI part transparent\n     \tfragColor = vec4(0.0);   \n    }\n}","name":"Buf C","description":"","type":"buffer"}]}