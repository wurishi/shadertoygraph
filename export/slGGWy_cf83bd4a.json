{"ver":"0.1","info":{"id":"slGGWy","date":"1638325867","viewed":292,"name":"Fake Voxel","username":"rmmcal","description":"Fake Voxel","likes":16,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","voxel","dof"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n//               ... Fake Voxel ...                      ////\n/////////////////////////////////////////////////////////////\n// Brasil/Amazonas/Manaus\n// Created by Rodrigo Cal (twitter: @rmmcal)\n// - Published: 2021/11\n// https://www.shadertoy.com/view/slGGWy\n//\n/////////////////////////////////////////////////////////////\n\n\nfloat gray(vec4 c){\n    return length(c.rgba);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 ar =  vec2(1., iResolution.y/iResolution.x);\n    \n    vec4 d = vec4(1.0 / iResolution.xy,0.,0.);\n    float g = 0.0;\n    float base = gray(texture(iChannel0, uv ));\n    g = max(g, abs( base - gray(texture(iChannel0, uv + d.xz)) ) );\n    g = max(g, abs( base - gray(texture(iChannel0, uv - d.xz)) ) );\n    g = max(g, abs( base - gray(texture(iChannel0, uv + d.zy)) ) );\n    g = max(g, abs( base - gray(texture(iChannel0, uv - d.zy)) ) );\n    g = (g+.5)*1.5-.5;\n    \n    vec4 tx =  (texture(iChannel0, uv) );\n    fragColor = tx = texture(iChannel0, uv,tx.w*.3);\n    fragColor *= vec4(max(1.0-g,0.0))+.25;\n    \n    float f = uv.x+cos(uv.y+iTime)-(cos(iTime)*.5+.5);\n    if (f > 0.0)\n         fragColor = texture(iChannel0, uv,max(0., tx.w*.5-2.)); // dof (depth of field)\n     \n    fragColor = mix(fragColor, vec4(0,0,0,0), smoothstep(.02,0.,abs(f)));\n    fragColor = mix(fragColor, vec4(0,1,1,0), smoothstep(.01,0.,abs(f)));\n    \n    // vignette\n    fragColor = mix(fragColor, vec4(0), smoothstep(0.,2., length(uv-.5)));\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define iTime iTime*.05 \n\nconst float pi = 3.1415926;\nconst float pi2 = 2.*pi;\nconst float rad = pi/180.;\nfloat rnd ;\n\nmat2 rotate(float x){\n    float c = cos(x);\n    float s = sin(x);\n    return mat2(c,s,-s,c);\n}\n  \nvec4 v(float v){\n    return vec4(v, 0.,0.,0.);\n}\n\nvec4 v(float v, float v2){\n    return vec4(v, v2, 0.,0.);\n}\n\nvec4 vmin(vec4 v1, float v2){\n    return v1.x < v2 ? v1 : v(v2);\n}\n\nvec4 vmin(vec4 v1, float v2, float v3){\n    return v1.x < v2 ? v1 : v(v2,v3);\n}\n\n/////////////\n// https://iquilezles.org/articles/distfunctions\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n/////////////\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat timeScale;\nvec4 dist(vec3 p)\n{\n    vec4 d = v(1.0);\n    p *= timeScale;\n    \n    vec3 pb =p;\n    \n    // repeat 5.0\n    vec3 c0 = vec3(5.);\n    p = mod(p+0.5*c0,c0)-0.5*c0; \n\n    vec3 pt = p -vec3(2.,0, 0);\n    vec3 pr = p;\n    pr.z=pb.z;\n    vec3 prid = floor(pb/c0);\n    pr +=-vec3(2.,0,fract(iTime*.5 * (prid.x+.5))*30.0-15.0 + prid.x);\n    pr.xy *= rotate(pb.z);\n    d = vmin(d, sdVerticalCapsule(pr.xzy-vec3(.25,0,0),9.5,.2+cos(pr.z*5.0)*0.03+cos(pr.z*10.0)*0.03));\n   \n    d = min(d, .075);\n\n    // repeat .25\n    vec3 c1 = vec3(.25);  \n    vec3 q  = mod(p+0.5*c1,c1)-0.5*c1; \n    vec3 qi = floor((p+0.5*c1)/c1);\n    vec2 id = floor((p+0.5*c1)/c1).xy;\n    id = floor((p+0.5*c1)/c1).xy+vec2(-1,0);\n    \n    float at = +1.0;\n    vec4  da = d;\n    \n    float t = smoothstep(.01,.0, 5.- length(qi-vec3(0.00, 0.0,0.0 )));\n    float f = cos(iTime*2.5+id.x*.2)*.05;\n    \n    d = vmin(d,  sdRoundBox(q,vec3(.06)-t+f,.0), 1.0);\n    d = vmin(d,  sdSphere(q,(.06)-t-f), 1.0);\n\n    d.yzw = p.xyz;\n    return d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 d = vec2(0., 0.01);\n    float x = dist(p-d.yxx).x;\n    float y = dist(p-d.xyx).x;\n    float z = dist(p-d.xxy).x;\n    return normalize(vec3(x,y,z)-dist(p).x);\n}\n\nvec3 hsv2rgb(float v){\n\treturn abs(fract(v + vec3(3, 2, 1) / 3.) - .5) * 6. - 1.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    timeScale = sin(iTime*2.5)*.4+.8;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pc = (uv-.5)*vec2(1, iResolution.y/iResolution.x);\n\n    float a = iTime*.05 * (max(-1.0,cos(iTime*.25))* .005+.995 );\n\n    vec3 p = vec3(0.0,2.0, -5.0);\n    vec3 d = normalize(vec3(pc,1.0));\n    p.xz *= rotate(-a);\n    d.yz *= rotate(-.4);  \n    d.xz *= rotate(-a);\n\n    vec3 c=vec3(0.0);\n    float t = 0.;\n    vec4 hit;\n    vec4 hitn;\n   \n    for (int i = 0 ; i < 200; i++)\n    {\n        hit = dist(p);           // current \n        \n        ///////////////////////////////////\n        hitn = dist(p+ d*hit.x); // next \n        float h  = hit.x; \n        float h2 = hitn.x;\n        h = (h+h2)/2.0;\n\n        ///////////////////////////////////\n        //float y = h*h/(2.0*pd);\n        //float k = sqrt(h*h-y*y);\n        //pd = h;\n        //h = min(h, h/max(0.0, t-y));\n\n        if (h < 0.0) break;\n        t+=h;\n        p += d*h;\n        \n    }\n    vec3 pn = getNormal(p);\n    c += pn.z*.0;\n \n    // texture\n    vec3 pf = (p);\n    c = (abs(pn.z)*.5+.5)*(hsv2rgb((pf.x+pf.y+pf.z)*.1)*.5+.75  ) ; \n    pf = hit.yzw;\n    pf*=30.;\n    pf+=-1.5;\n    float f = 2.;\n    f *= mod(floor(pf.y)+floor(pf.x)+floor(pf.z), 2.) <= .0? 1. : 0.;\n    c = mix(c, c * smoothstep(-.1,.1, f ), pow(cos(iTime*2.5*1.)*.6+.4,4.) );\n\n    //\n    c =clamp(c, 0., 1.0);\n    c = mix(c,vec3(1,1,.8), pow(t*.07,4.0));\n     \n    fragColor = vec4(c,t);\n}","name":"Buffer A","description":"","type":"buffer"}]}