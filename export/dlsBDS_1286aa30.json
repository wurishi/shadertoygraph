{"ver":"0.1","info":{"id":"dlsBDS","date":"1693416555","viewed":34,"name":"audioreactive symmetry test","username":"sleeplessmonk","description":"random fractal with chatGPT","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["fractal","audioreactive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XscGDM","filepath":"https://soundcloud.com/mindfulnomads/internal-strife","previewfilepath":"https://soundcloud.com/mindfulnomads/internal-strife","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Neon psychedelic colors\nvec3 NeonPsychedelicColor(float t) {\n    return vec3(\n        0.5 + 0.5 * sin(6.0 * t + 2.0),\n        0.5 + 0.5 * sin(6.0 * t + 1.0),\n        0.5 + 0.5 * sin(6.0 * t + 3.0)\n    );\n}\n\n// Saw function\nfloat saw(float x) {\n    return mod(abs(x), 2.0) - 1.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 p = vec3(uv, 0.0) * 2.0 - 1.0;\n    p.z = (sqrt(2.0) - length(p.xy)) / sqrt(2.0);\n\n    float audioInput = texture(iChannel0, vec2(0.5, 0.5)).r * 2.0 - 1.0;\n    float rotation = audioInput * 0.5;\n    float scaling = audioInput * 0.1 + 1.0;\n    \n    for (int i = 0; i < 8; i++) {\n        p.xz = mat2(cos(rotation), -sin(rotation), sin(rotation), cos(rotation)) * p.xz;\n        p.xy *= scaling;\n\n        p = vec3(\n            saw(p.x + iTime),\n            saw(p.y + iTime),\n            saw(p.z + iTime)\n        );\n\n        p = normalize(p) * length(p);\n    }\n\n    float time = iTime * 1.0 + audioInput * 0.5;\n    float spread = sin(time) * 0.2;\n\n    vec3 col = NeonPsychedelicColor(length(p + spread));\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}