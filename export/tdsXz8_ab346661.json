{"ver":"0.1","info":{"id":"tdsXz8","date":"1550701416","viewed":907,"name":"SDF of a Regular Polygon","username":"scratch13764","description":"Accurate 2D signed distance field of an n-sided regular polygon.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance","polygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.1415926\n#define phi pi * .5\n#define tau pi * 2.\nvec3 distCol (float d)\n{\n    float a = pow(cos(d * 120.) * .5 + .5, 10.)*.8 + .2;\n    vec3 c = mix(vec3(.8,.5,0.), vec3(.3,.3,.9), sign(d)*.5 + .5)*a;\n    c = mix(c, vec3(.8,.8,1.), 1./(abs(d)*100.+1.));\n    return c;\n}\n\nfloat npolySDF (float r, float n, float t, vec2 p)\n{\n    n *= .5;\n    float o = phi/n;\n    float a = atan(p.y/p.x);\n    if (p.x < 0.) a += pi;\n    float s = round((a + t)/pi*n)/n*pi - t;\n    float d = round((a + o + t)/pi*n)/n*pi - o - t;\n    vec2 c = vec2(cos(d),sin(d))*r;\n    vec2 f = vec2(cos(s),sin(s));\n    float b = length(p-c);\n    float l = dot(p, f);\n    l -= cos(o)*r;\n    float m = b;\n    if (abs(dot(vec2(p.x,-p.y), f.yx)) <= sin(o)*r) m = l;\n    return m;\n}\n\nfloat map (vec2 p)\n{\n    float t = fract(iTime/20.)*20.;\n    float t2 = fract(iTime/20.)*20.;\n    float a = npolySDF(.3, ceil(t/4. + 1.), iTime/8., p);\n    float b = npolySDF(.3, ceil(t2/4. + 2.), iTime/8., p);\n    float d = mix(a,b, smoothstep(.4,.6,fract(iTime/4.)))\n     + sin(iTime*2.)*.05 - .05;\n    return d;\n}\n\nvec2 normal (vec2 p)\n{\n    return normalize(vec2(\n        map(vec2(p.x + .001,p.y)) - map(vec2(p.x - .001,p.y)),\n        map(vec2(p.x,p.y + .001)) - map(vec2(p.x,p.y - .001))\n        ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - .5*iResolution.xy)/iResolution.y;\n    vec2 m = (iMouse.xy - .5*iResolution.xy)/iResolution.y;\n    \n    float b = abs(length(uv-m) - abs(map(m)));\n    float n = abs(dot(uv-m, normal(m).yx*vec2(-1,1)));\n    n = max(n, dot(uv-m, normal(m)));\n    b = min(b, n);\n    \n    vec3 c = distCol(map(uv));\n    c = mix(c, vec3(.9,.5,.1), smoothstep(.008,.002, b));\n    fragColor = vec4(c,1);\n}","name":"Image","description":"","type":"image"}]}