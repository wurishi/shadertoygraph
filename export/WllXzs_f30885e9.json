{"ver":"0.1","info":{"id":"WllXzs","date":"1563954718","viewed":252,"name":"make glow","username":"liutp","description":"外发光的人","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["glow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nprecision highp float;\n\nconst float dist = 0.0;\nconst float angle = 0.0;\nconst vec4 color = vec4(0.7, 0.0, 0.4, 0.0);\nconst float alpha = 1.0;\nconst float blurX = 30.0;\nconst float blurY = 30.0;\n// uniform vec4 quality;\nconst float strength = 15.0;\nconst float inner = 0.0;\nconst float knockout = 0.5;\nconst float hideObject = 0.0;\n\n\nconst float linearSamplingTimes = 7.0;\nconst float circleSamplingTimes = 12.0;\nconst float PI = 3.14159265358979323846264;\n\nfloat calc_alpha(vec4 color){\n    if (length(color-vec4(0.0, 1.0, 0.0, 1.0))>0.7){ return 1.0;}\n\treturn 0.0;\n}\n\nfloat random(vec2 fragCoord, vec2 scale)\n{\n    return fract(sin(dot(fragCoord.xy, scale)) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 px = vec2(1.0 / iResolution.x, 1.0 / iResolution.y);\n    vec2 vTextureCoord = fragCoord/iResolution.xy;\n    vec4 ownColor = texture(iChannel1, vTextureCoord);\n    \n    if (calc_alpha(ownColor)==0.0) {\n        ownColor = vec4(0.0);\n    }\n\n    vec4 curColor;\n    float totalAlpha = 0.0;\n    float maxTotalAlpha = 0.0;\n    float curDistanceX = 0.0;\n    float curDistanceY = 0.0;\n    float offsetX = dist*px.x * cos(angle);\n    float offsetY = dist*px.y* sin(angle);\n\n    float cosAngle;\n    float sinAngle;\n    float offset = PI * 2.0 / circleSamplingTimes * random(fragCoord, vec2(12.9898, 78.233));\n\n    float stepX = blurX * px.x / linearSamplingTimes;   //线性采样\n    float stepY = blurY * px.y / linearSamplingTimes;\n\n    if (ownColor.a>0.5){\n        fragColor = ownColor;\n        return;\n    }\n\n    //循环角采样\n    for (float a = 0.0; a <= PI * 2.0; a += PI * 2.0 / circleSamplingTimes) {\n        cosAngle = cos(a + offset);\n        sinAngle = sin(a + offset);\n        //循线性采样\n        for (float i = 1.0; i <= linearSamplingTimes; i++) {\n            curDistanceX = i * stepX * cosAngle;\n            curDistanceY = i * stepY * sinAngle;\n            vec2 uv = vec2(vTextureCoord.x + curDistanceX - offsetX, vTextureCoord.y + curDistanceY + offsetY);\n            if (uv.x >= 0.0 && uv.x <= 1.0 && uv.y >= 0.0 && uv.y <= 1.0){\n                //采集采样点的alpha\n                curColor = texture(iChannel1, uv);\n                totalAlpha += (linearSamplingTimes - i) * calc_alpha(curColor);\n            }\n            maxTotalAlpha += (linearSamplingTimes - i);\n        }\n    }\n\n    //计算平均alpha\n    totalAlpha = totalAlpha/maxTotalAlpha;\n   \n    if (totalAlpha<0.1){\n        fragColor = ownColor;\n        return;\n    }\n\n    fragColor = color*totalAlpha*totalAlpha * strength;\n}\n","name":"Image","description":"","type":"image"}]}