{"ver":"0.1","info":{"id":"3syXDz","date":"1573747250","viewed":329,"name":"Repeating Celtic Pattern","username":"Podis","description":"The math needs some work for sure, along with the actual structure perhaps.  My first attempt at using Shadertoy.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["hexagon","pattern","tile","repeat","celtic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float scale = 10.;\n\nfloat circ(vec2 uv, float r){\n    float d = length(uv);\n    float c = smoothstep(d, (d+2.*scale/iResolution.x), r);\n    return c;\n}\n\nfloat circ2(vec2 uv, float r){\n    float d = length(uv);\n    float c = smoothstep(d-.4, (d+2.*scale/iResolution.x), r- .2);\n    return c;\n}\n\nfloat celticShit(vec2 uv){\n    float r1 = .38;\n    \n    float r2 = .45;\n    \n    // used for Mix\n    float c1 = circ(uv, r1);\n    float c6 = circ2(uv, r1);\n    \n    // Add the following\n    float c5 = circ(uv, r2);\n    \n    vec2 uvs = vec2(.5, -.288675);\n    float c2 = circ(uv + uvs, r2);\n    \n    vec2 uvm = vec2(-.5, -.288675);\n    float c3 = circ(uv + uvm, r2);\n    \n    vec2 uvv = vec2(0, .57735);\n    float c4 = circ(uv + uvv, r2);\n    \n    float d = c5 - c2 - c3 - c4;\n    d = d * c6;\n   \n    return mix(0., d, c1);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\n    // uv1\n    vec2 uv1 = fragCoord/iResolution.x;\n    uv1.x *= 1.;\n    uv1.y *= 1.155;\n    uv1 *= scale;\n    float m = mod(uv1.y, 2.);\n    uv1.x += step(1., m)*.5;\n\tuv1 = fract(uv1);\t\n\tuv1.y /= 1.155;\n    uv1.x -=1.155/2.;\n    uv1.y -=.5;\n    \n    \n    \n    // uv2\n    vec2 uv2 = fragCoord/iResolution.x;\n    uv2.x *= 1.;\n    uv2.y *= 1.155;\n    uv2 *= scale;\n    uv2.x -= .5;\n    uv2.y -= .65/2.;\n    float n = mod(uv2.y, 2.);\n    uv2.x += step(1., n)*.5;\n\tuv2 = fract(uv2);\t\n\tuv2.y /= 1.155;\n    uv2.x -=1.155/2.;\n    uv2.y -=.5;\n    \n\n    // uv3\n    vec2 uv3 = fragCoord/iResolution.x;\n    uv3.x *= 1.;\n    uv3.y *= 1.155;\n    uv3 *= scale;\n    uv3.x += 1.;\n    uv3.y -= .65;\n    float o = mod(uv3.y, 2.);\n    uv3.x += step(1., o)*.5;\n\tuv3 = fract(uv3);\t\n\tuv3.y /= 1.155;\n    uv3.x -=1.155/2.;\n    uv3.y -=.5;\n    \n    float f = celticShit(uv1);\n    float g = celticShit(uv2);\n    float h = celticShit(uv3);\n    \n    // Isolate f, g, h, to see ind. uv\n    float i = f + g + h;\n    \n\n    // Output to screen\n    fragColor = vec4(i, i, i, 1.0);\n    //fragColor = vec4(f, 0, 0, 1.);\n}","name":"Image","description":"","type":"image"}]}