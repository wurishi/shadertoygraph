{"ver":"0.1","info":{"id":"MdsfDl","date":"1498948248","viewed":354,"name":"Solar_system","username":"duvengar","description":"One more solar system. WIP","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","burn","fbm","solar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define T iTime\n\n//// COLORS ////\nconst vec3 ORANGE = vec3(1.0, 0.6, 0.2);\nconst vec3 BLUE   = vec3(0.0, 0.3, 0.6);\nconst vec3 PINK   = vec3(1.0, 0.3, 0.2);\nconst vec3 BLACK  = vec3(0.0, 0.0, 0.0);\n\n///// NOISE /////\nfloat hash(float n) {\n    return fract(sin(n)*43758.5453123);   \n}\n\nfloat noise(in vec2 x) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f * f * (3.0 - 2.0 * f);\n    float n = p.x + p.y * 57.0;\n    return mix(mix(hash(n + 0.0), hash(n + 1.0), f.x), mix(hash(n + 57.0), hash(n + 58.0), f.x), f.y);\n}\n\n////// FBM ////// \n// see iq // https://www.shadertoy.com/view/lsfGRr\n\nmat2 m = mat2( 0.6, 0.6, -0.6, 0.8);\nfloat fbm(vec2 p){\n \n    float f = 0.0;\n    f += 0.5000 * noise(p); p *= m * 2.02;\n    f += 0.2500 * noise(p); p *= m * 2.03;\n    f += 0.1250 * noise(p); p *= m * 2.01;\n    f += 0.0625 * noise(p); p *= m * 2.04;\n    f /= 0.9375;\n    return f;\n}\n\n\nvoid mainImage( out vec4 C, in vec2 U ) \n{\n    \n    // Pixel ratio\n    vec2 uv = U.xy / iResolution.xy;\n    vec2 p = -1. + 2. * uv;   \n    p.x *= iResolution.x / iResolution.y ;\n    p *= 8.0;\n    \n  \t/*_______________ CALCULS _______________*/\n    \n    // rotations angles\n    float def = fbm(p*0.4);\n    float angle  =  T;\n    float angle2 =  T * 2.7;\n    float angle3 =  T * 0.9;\n    float angle4 =  T * 0.6;\n   \t\n    // Perspective factor\n    float fac =  smoothstep(10.0, -4.0, p.y)*2.;\n    \n    // Positions\n    vec2 ctr = vec2(0.00 , 0.00);\n    vec2 pos0 = vec2(ctr.x  + 0.50 * cos(angle),  ctr.y  + 0.50 * sin(angle ));\n    vec2 pos1 = vec2(pos0.x + 6.00 * cos(angle),  pos0.y + 2.00 * sin(angle ));\n    vec2 pos2 = vec2(pos1.x + fac * 0.90 * cos(angle2), pos1.y + fac * 0.30 * sin(angle2));\n    vec2 pos3 = vec2(pos0.x + 9.50 * cos(angle3), pos0.y + 3.25 * sin(angle3));\n    vec2 pos4 = vec2(pos0.x + 13.5 * cos(angle4), pos0.y + 4.50 * sin(angle4));\n\t\n    // fbm angle\n \tfloat r = sqrt(dot(p+pos0,p+pos0));\n    \n    float alpha = r * 0.2 + atan(dot(0.5, pow(abs(p.x), p.y)), dot(0.5, pow(abs(p.x),p.y))) - (iTime * 0.1); \n    // Distortion\n    alpha +=  1.4 + fbm( 0.6 * p + pos0) ;\n    \n    \n    /*_______________ COLORS _______________*/\n \n    //------------------------//\n    // COLORFULL CLOUDY COSMOS \n    //------------------------//\n    \n    float ff = 1.0 - smoothstep(00.0,20.0, length(p)); \n    vec3 color = vec3(ff * 0.05) ;  \n     \n    ff = smoothstep(0.3, 1.4,fbm(0.3 * p + T * 0.2)); \n  \tcolor += mix(color, ORANGE, ff * 0.2);\n    \n    ff = smoothstep(0.3,0.9, fbm(0.1 * p + T * 0.4));\n    color += mix(color, PINK  , ff * 0.3);\n    \n    ff = smoothstep(0.3,1.9, fbm(0.1 * p + T * 0.6));\n  \tcolor += mix(color, BLUE  , ff * 0.9);\n    \n    ff = smoothstep(0.3,0.9, fbm( .4 * p + T * 0.8));\n  \tcolor += mix(color, BLACK , ff * 0.1);\n    \n    color += mix(BLUE,color,0.7)*0.3;\n    \n    float v = smoothstep(0.0,20.0,length(p.y + pos4.y));\n    \n    //------------------------//\n    // B&W SOLAR SYSTEM\n    //------------------------//\n    \n\tfloat col = 1.0 - smoothstep(02.,20.0, length(p));\n    float f = smoothstep(0.2,1.9, fbm( 0.5 * p + T * 0.3 )); \n    col = mix(col, 0.0, f*0.9)*0.99;\n    \n    // Kind of star Field \n    for(float k = 0.10; k < 0.15; k += 0.01){\n        if(fbm(vec2(10. * p + T)) < k){\n            col += mix(col, 0.0, 0.1 * (k * 50.0));\n        }\n    }\n\n \n    // Sun\n    ff   = smoothstep( 0.00,1.90, length(p + pos0));\n    col += mix(col,0.0,ff);   \n  \tcol *= mix(col*2., 0.8, fbm(vec2(f*0.7,alpha)))*0.6;\n\t\n    // Planete 01\n    ff   = smoothstep(fac * 0.30,fac * 0.35, length(p + pos1)); \n    col -= mix(col,0.0,ff);\n    ff   = smoothstep(fac * 0.20,fac * 0.53, length(p + pos1)); \n    col += mix(col,0.0,ff );\n    \n    // planete 02 / satelite \n    ff   = smoothstep(fac * 0.05,fac * 0.10, length(p + pos2));\n    col -= mix(col,0.0,ff);\n    ff   = smoothstep(0.00,fac * 0.20, length(p + pos2));\n    col += mix(col,0.0,ff);\n    \n    // Planete 03\n    ff   = smoothstep(fac * 0.45,fac * 0.50, length(p + pos3));\n    col -= mix(col,0.0,ff);\n    ff   = smoothstep(0.00,fac * 1.10, length(p + pos3)); \n    col += mix(col,0.0,ff);\n    \n    // Planete 04\n    ff   = smoothstep(fac * 0.35 ,fac * 0.40, length(p + pos4));\n    col -= mix(col,0.0,ff);\n    ff   = smoothstep(fac * 0.20 ,fac * 0.72, length(p + pos4));\n    col += mix(col,0.0,ff);\n    col -= smoothstep(0.30, 2.1, length(p + pos0));  \n    \n    \n \t//------------------------//\n    // postprocessing\n    //------------------------//\n    \n    // Final Color\n    vec3 cc = mix(color, vec3(col), 0.55);   \n    cc += mix(cc, BLUE,0.35);\n    \n    // Last sun burn\n    ff = smoothstep( 0.00,1.90, length(p + pos0));\n    cc += mix(cc,vec3(0.0),ff);\n    cc *= 1.12345;\n    \n \t// Final output\n\tC = vec4( cc,1.0);\n    \n    }","name":"Image","description":"","type":"image"}]}