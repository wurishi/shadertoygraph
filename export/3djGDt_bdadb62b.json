{"ver":"0.1","info":{"id":"3djGDt","date":"1550277963","viewed":329,"name":"Raymarch IFS","username":"darkeclipz","description":"finally, after months I figured out how to render this! :D\n\nReferences:\n- http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/\n- http://www.fractalforums.com/sierpinski-gasket/kaleidoscopic-(escape-time-ifs)\n- iq","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define MaxSteps 32.\n#define MinDistance 0.01\n#define eps 0.001\n#define Iterations 22.\n\nmat3 rotateX(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(1, 0, 0, 0, c, -s, 0, s, c);\n}\n\nmat3 rotateY(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c, 0, -s, 0, 1, 0, s, 0, c);\n}\n\nmat3 rotateZ(float angle) {\n\tfloat c = cos(angle), s = sin(angle);\n    return mat3(c,-s,0,s,c,0,0,0,1);\n}\n\n// http://blog.hvidtfeldts.net/index.php/2011/08/distance-estimated-3d-fractals-iii-folding-space/\nfloat DE(vec3 z)\n{\n    float angl = cos(iTime)*.2;\n    mat3 rx = rotateX(angl);\n    mat3 ry = rotateY(angl);\n    mat3 rz = rotateZ(angl);\n    mat3 rot = rx * ry * rz;\n \n    float Scale = 2. + cos(iTime/8.);\n    float Offset = .65;\n    float n = 0.;\n    while (n < Iterations) {\n       z = abs(z);\n       if(z.x - z.y < 0.) z.xy = z.yx;\n       if(z.x - z.z < 0.) z.xz = z.zx;\n       if(z.y - z.z < 0.) z.yz = z.zy;\n       z *= rot;\n       z = abs(z);\n       z = z*Scale - vec3(vec3(Offset*(Scale-1.0)).xy, 0);\n       n++;\n    }\n    return (length(z) ) * pow(Scale, -float(n));\n}\n\nfloat scene(vec3 p) {\n\treturn DE(p - vec3(0,.1,0));\n}\n\nfloat shadowScene(vec3 p){\n\treturn DE(p - vec3(0,.1,0));\n}\n\n// from iq\nvec3 calcNormal(vec3 p) {\n    float h = 0.001;\n    vec2 k = vec2(1,-1);\n    vec3 n = normalize( k.xyy*scene( p + k.xyy*h ) + \n                  k.yyx*scene( p + k.yyx*h ) + \n                  k.yxy*scene( p + k.yxy*h ) + \n                  k.xxx*scene( p + k.xxx*h ) );    \n    return n;\n}\n\n// ro: ray origin, rd: ray direction\n// returns t and the occlusion as a vec2\nvec2 march(vec3 ro, vec3 rd) {\n    float t = 0., i = 0.;\n    for(i=0.; i < MaxSteps; i++) {\n    \tvec3 p = ro + t * rd;\n        float dt = scene(p);\n        t += dt;\n        if(dt < MinDistance) {\n        \treturn vec2(t-MinDistance, 1.-i/MaxSteps);  \n        }\n    }\n    return vec2(0.);\n}\n\nfloat marchShadow(vec3 ro, vec3 rd) {\n\tfloat t = 0., i = 0.;\n    for(i=0.; i < MaxSteps; i++) {\n    \tvec3 p = ro + t * rd;\n        float dt = shadowScene(p);\n        t += dt;\n        if(dt < MinDistance) {\n        \treturn t-MinDistance;    \n        }\n    }\n    return 0.;\n}\n\n// https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\nvec3 shadeBlinnPhong(vec3 p, vec3 viewDir, vec3 normal, vec3 lightPos, float lightPower, vec3 lightColor) {\n    vec3 diffuseColor = vec3(0.5);\n    vec3 specColor = vec3(1);\n    float shininess = 32.;\n\n    vec3 lightDir = lightPos - p;\n    float dist = length(lightDir);\n    dist = dist*dist;\n    lightDir = normalize(lightDir);\n    \n    float lambertian = max(dot(lightDir, normal), 0.0);\n    float specular = .0;\n    \n    if(lambertian > 0.) {\n        viewDir = normalize(-viewDir);\n        \n        vec3 halfDir = normalize(viewDir + lightDir);\n        float specAngle = max(dot(halfDir, normal), .0);\n        specular = pow(specAngle, shininess);\n    }\n    \n    vec3 color = /*ambientColor +*/\n                 diffuseColor * lambertian * lightColor * lightPower / dist +\n        \t\t specColor * specular * lightColor * lightPower / dist;\n    \n   \treturn color;\n}\n\n// p: point, sn: surface normal, rd: ray direction (view dir/ray from cam)\nvec3 light(vec3 p, vec3 sn, vec3 rd) {\n    vec3 top = shadeBlinnPhong(p, rd, sn, vec3(0,5,0), 30., vec3(.9));\n    vec3 L1 = shadeBlinnPhong(p, rd, sn, vec3(5,-5,10), 30., vec3(.9,.9,.5));\n    vec3 L2 = shadeBlinnPhong(p, rd, sn, vec3(-5,1,-5), 20., vec3(.8,.8,.3));\n    vec3 ambient = vec3(.1);\n    return L1 + L2 + ambient + top;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-R)/R.y;\n    vec3 col = vec3(.0);\n    vec3 ro = vec3(0,2.,-4); // ray origin\n    vec3 rd = normalize(vec3(uv.x, uv.y, 0) - ro); // ray direction\n    \n    mat3 rot = rotateY(-iTime/4.);\n    ro *= rot;\n    rd *= rot;\n    \n    vec2 hit = march(ro, rd); // returns t and the occlusion value \n    float t = hit.x;\n    \n    if(t > eps) {\n        vec3 p = ro + t * rd;\n    \tvec3 n = calcNormal(p);\n        col = light(p, n, rd);\n        col *= hit.y;   // occlusion \n        \n        float shadow = marchShadow(p + 0.1*n, normalize(vec3(10,10,10) - p));\n        if(shadow > eps) {\n        \tcol = mix(col, vec3(0), .5);    \n        }\n        \n        float fog = 1. / (0.3 + t * t * 0.05);\n        col = mix(vec3(0), col, fog);\n    }\n    else {\n        vec3 topcolor = vec3(127./255., 161./255., 189./255.);\n        vec3 bottomcolor = vec3(84./255., 111./255., 138./255.);\n    \tcol = mix(bottomcolor, topcolor, uv.y);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}