{"ver":"0.1","info":{"id":"XdKBWc","date":"1530820112","viewed":109,"name":"ML Gradients","username":"gcadet77","description":"Gradients","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["gradient"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// gradient method\nint gradient_method = 0; //0: linear, 1: radial\n\n// parameters for linear gradient\nfloat margin             = 100.0f;\nfloat num_gradient_steps = 16.0f;\nfloat left_intensity     = 0.0f;\nfloat right_intensity    = 1.0f;\n\n// parameters for radial gradient\nvec3 border_color = vec3(0.0f);\nvec3 center_color = vec3(0.066f, 0.023f, 0.180f);\n\nvec3 linear_gradient(in vec2 pix_coord) {\n  float raw_spacing = (iResolution.y - margin * 2.0f) / 21.0f;\n  float raw         = (pix_coord.y - margin) / raw_spacing;\n  if (raw < 0.0f || raw >= 21.0f) {\n    return vec3(0.0f, 0.0f, 0.0f);\n  }\n\n  if ((int(raw) % 3) == 2) {\n    return vec3(0.0f, 0.0f, 0.0f);\n  }\n\n  float intensity = (pix_coord.x - margin) / (iResolution.x - margin * 2.0f);\n  if (intensity < 0.0f || intensity > 1.0f) {\n    return vec3(0.0f, 0.0f, 0.0f);\n  }\n\n  if ((abs(pix_coord.x - margin) < 2.0f) || (abs(pix_coord.x - (iResolution.x - margin)) < 2.0f)) {\n    float mid_intensity = (right_intensity + right_intensity) * 0.5f;\n    return mid_intensity * vec3(0.5f, 0.5f, 0.5f);\n  }\n\n  int col_type = int(raw) / 3;\n  vec3 col;\n  switch(col_type) {\n    case 0: col = vec3(0.0f, 0.0f, 1.0f); break;\n    case 1: col = vec3(0.0f, 1.0f, 0.0f); break;\n    case 2: col = vec3(0.0f, 1.0f, 1.0f); break;\n    case 3: col = vec3(1.0f, 0.0f, 0.0f); break;\n    case 4: col = vec3(1.0f, 0.0f, 1.0f); break;\n    case 5: col = vec3(1.0f, 1.0f, 0.0f); break;\n    case 6: col = vec3(1.0f, 1.0f, 1.0f); break;\n  }\n\n  float intensity_step = float(int(intensity * num_gradient_steps) + 1) / num_gradient_steps;\n  return mix(left_intensity, right_intensity, intensity_step) * col;\n}\n\nvec3 radial_gradient(in vec2 pix_coord) {\n  vec2 uv     = pix_coord / iResolution.xy;\n  vec2 offset = (uv - 0.5f) * 2.0f;\n  float alpha = max(0.0f, 1.0f - length(offset));\n  vec3 color  = mix(border_color, center_color, alpha);\n\n  return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0f);\n    \n    switch(gradient_method) {\n        case 0: col = linear_gradient(fragCoord.xy); break;\n        case 1: col = radial_gradient(fragCoord.xy); break;\n    }    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}