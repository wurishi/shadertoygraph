{"ver":"0.1","info":{"id":"mtjyD3","date":"1692377349","viewed":87,"name":"Axonandon's Logistic Map","username":"axonandon","description":"Logistic Map Equation. First attempt at shader. Start values of x are animated for extra bobblyness.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["learning","logistic","firstattempt","logisticmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // No one should write a shader to do this\n    \n    // and yet here we are\n    \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * vec2(1.0,1.0) + vec2(2.9,0.0);\n    float yRes = 0.5 / iResolution.y;\n    \n    float x = 0.5+0.5*sin(iTime*.025);   // x from equation, actually y in coords\n    float d = 0.0;\n    for (float i = 0.0; i<200.0; i++){\n        x = x*uv.x*(1.0-x);\n        \n        // Does this iteration's x value get close enough to a pixel to count?\n        float hit = abs(uv.y - x) < yRes ? 1.0 : 0.0;\n        \n        // Add to hit count for pixel\n        d += hit;\n    }\n    \n    d = smoothstep(0.0,3.5 + sin(iTime*0.2),d);\n    \n    vec3 col = vec3(d,d,d);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}