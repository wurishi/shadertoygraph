{"ver":"0.1","info":{"id":"lXBBz1","date":"1729184893","viewed":218,"name":"Font Texture Viewer","username":"Bingle","description":"Allows you to select characters from the font texture and shows their coordinates, normals, SDF, and a shaded preview. Created to get more experience with text, and also so I don't have to keep counting to find characters","likes":22,"published":3,"flags":0,"usePreview":1,"tags":["text","font","debugging"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Character spacing for text\n#define CHAR_SPACING 0.5\n\n// Preprocessor definitions for using the font texture. Feel free to steal these,\n// although they might need to be modified to fit your character printing function.\n\n// Uppercase alphabet\n#define _A printChar(ivec2( 1,11),fragCoord,col,textCol,cursor);\n#define _B printChar(ivec2( 2,11),fragCoord,col,textCol,cursor);\n#define _C printChar(ivec2( 3,11),fragCoord,col,textCol,cursor);\n#define _D printChar(ivec2( 4,11),fragCoord,col,textCol,cursor);\n#define _E printChar(ivec2( 5,11),fragCoord,col,textCol,cursor);\n#define _F printChar(ivec2( 6,11),fragCoord,col,textCol,cursor);\n#define _G printChar(ivec2( 7,11),fragCoord,col,textCol,cursor);\n#define _H printChar(ivec2( 8,11),fragCoord,col,textCol,cursor);\n#define _I printChar(ivec2( 9,11),fragCoord,col,textCol,cursor);\n#define _J printChar(ivec2(10,11),fragCoord,col,textCol,cursor);\n#define _K printChar(ivec2(11,11),fragCoord,col,textCol,cursor);\n#define _L printChar(ivec2(12,11),fragCoord,col,textCol,cursor);\n#define _M printChar(ivec2(13,11),fragCoord,col,textCol,cursor);\n#define _N printChar(ivec2(14,11),fragCoord,col,textCol,cursor);\n#define _O printChar(ivec2(15,11),fragCoord,col,textCol,cursor);\n#define _P printChar(ivec2( 0,10),fragCoord,col,textCol,cursor);\n#define _Q printChar(ivec2( 1,10),fragCoord,col,textCol,cursor);\n#define _R printChar(ivec2( 2,10),fragCoord,col,textCol,cursor);\n#define _S printChar(ivec2( 3,10),fragCoord,col,textCol,cursor);\n#define _T printChar(ivec2( 4,10),fragCoord,col,textCol,cursor);\n#define _U printChar(ivec2( 5,10),fragCoord,col,textCol,cursor);\n#define _V printChar(ivec2( 6,10),fragCoord,col,textCol,cursor);\n#define _W printChar(ivec2( 7,10),fragCoord,col,textCol,cursor);\n#define _X printChar(ivec2( 8,10),fragCoord,col,textCol,cursor);\n#define _Y printChar(ivec2( 9,10),fragCoord,col,textCol,cursor);\n#define _Z printChar(ivec2(10,10),fragCoord,col,textCol,cursor);\n\n// Lowercase alphabet\n#define _a printChar(ivec2( 1, 9),fragCoord,col,textCol,cursor);\n#define _b printChar(ivec2( 2, 9),fragCoord,col,textCol,cursor);\n#define _c printChar(ivec2( 3, 9),fragCoord,col,textCol,cursor);\n#define _d printChar(ivec2( 4, 9),fragCoord,col,textCol,cursor);\n#define _e printChar(ivec2( 5, 9),fragCoord,col,textCol,cursor);\n#define _f printChar(ivec2( 6, 9),fragCoord,col,textCol,cursor);\n#define _g printChar(ivec2( 7, 9),fragCoord,col,textCol,cursor);\n#define _h printChar(ivec2( 8, 9),fragCoord,col,textCol,cursor);\n#define _i printChar(ivec2( 9, 9),fragCoord,col,textCol,cursor);\n#define _j printChar(ivec2(10, 9),fragCoord,col,textCol,cursor);\n#define _k printChar(ivec2(11, 9),fragCoord,col,textCol,cursor);\n#define _l printChar(ivec2(12, 9),fragCoord,col,textCol,cursor);\n#define _m printChar(ivec2(13, 9),fragCoord,col,textCol,cursor);\n#define _n printChar(ivec2(14, 9),fragCoord,col,textCol,cursor);\n#define _o printChar(ivec2(15, 9),fragCoord,col,textCol,cursor);\n#define _p printChar(ivec2( 0, 8),fragCoord,col,textCol,cursor);\n#define _q printChar(ivec2( 1, 8),fragCoord,col,textCol,cursor);\n#define _r printChar(ivec2( 2, 8),fragCoord,col,textCol,cursor);\n#define _s printChar(ivec2( 3, 8),fragCoord,col,textCol,cursor);\n#define _t printChar(ivec2( 4, 8),fragCoord,col,textCol,cursor);\n#define _u printChar(ivec2( 5, 8),fragCoord,col,textCol,cursor);\n#define _v printChar(ivec2( 6, 8),fragCoord,col,textCol,cursor);\n#define _w printChar(ivec2( 7, 8),fragCoord,col,textCol,cursor);\n#define _x printChar(ivec2( 8, 8),fragCoord,col,textCol,cursor);\n#define _y printChar(ivec2( 9, 8),fragCoord,col,textCol,cursor);\n#define _z printChar(ivec2(10, 8),fragCoord,col,textCol,cursor);\n\n// Space\n#define _sp cursor.xz += vec2(cursor.z - cursor.x)*CHAR_SPACING;\n// Newline\n#define _nl cursor.xzyw = vec4(baseline,baseline+(cursor.z-cursor.x),cursor.yw-vec2(cursor.w-cursor.y));\n// Colon\n#define _col printChar(ivec2(10,12),fragCoord,col,textCol,cursor);\n\n// Prints a character and moves the cursor\n// Cursor should be a bounding box (low x, low y, high x, high y). Keep square for correct aspect ratio\nvoid printChar(ivec2 coord,vec2 fragCoord,inout vec3 col,vec3 textCol,inout vec4 cursor){\n    vec2 charCoords = (fragCoord-cursor.xy)/(cursor.zw-cursor.xy);\n    if (charCoords.x>0.0 && charCoords.y>0.0 && charCoords.x<1.0 && charCoords.y<1.0){\n        vec4 tex = texture(iChannel0,(charCoords+vec2(coord))/16.0);\n        col = mix(col,textCol,tex.r);\n    }\n    _sp // moving the cursor is equivalent to adding a space character\n}\n\n// Lifted from a quilez shader, modified slightly for the low distance values\nvec3 sdfShade(float d){\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-12.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n    return col;\n}\n\n// Prints a positive integer and moves the cursor\n// This process is done from the smallest digit to the largest\nvoid printInt(int iNum,vec2 fragCoord,inout vec3 col,vec3 textCol,inout vec4 cursor){\n    if (iNum==0){\n        printChar(ivec2(0,12),fragCoord,col,textCol,cursor);\n        return;\n    }\n    float num = float(iNum);\n    vec2 offset = vec2(cursor.z - cursor.x)*CHAR_SPACING*floor(log(num+1.0)/log(10.0));\n    cursor.xz += offset;\n    while (true){\n        float char = floor(mod(num,10.0));\n        if (num>0.0){\n            printChar(ivec2(int(char),12),fragCoord,col,textCol,cursor);\n            cursor.xz -= vec2(cursor.z - cursor.x)*CHAR_SPACING*2.0;\n        }else{\n            cursor.xz += offset + vec2(cursor.z - cursor.x)*CHAR_SPACING*2.0;\n            return;\n        }\n        num = floor(num/10.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 col = vec3(0.0);\n    \n    // Coordinates for texture\n    vec2 texCoords = fragCoord/iResolution.y;\n    ivec2 tile = ivec2(iMouse.xy/iResolution.y*16.0);\n    tile = ivec2(min(tile.x,15),min(tile.y,15));\n    if (iMouse.x<0.001 && iMouse.y<0.001){ // Preview\n        tile = ivec2(0,15);\n    }\n    if (texCoords.x<1.0){\n        col = texture(iChannel0,texCoords).rrr;\n        if (ivec2(texCoords*16.0)==tile){ // Currently selected\n            col = mix(col,vec3(1.0),0.5);\n        }\n    }\n    \n    // Coordinates for 3 previews\n    vec2 previewCoords = fragCoord/iResolution.yy*3.0-vec2(iResolution.x/iResolution.y*3.0-1.0,0.0);\n    \n    if (previewCoords.x>0.0){\n        vec4 prev = texture(iChannel0,(mod(previewCoords,vec2(1.0))+vec2(tile))/16.0);\n        if (previewCoords.y>1.0){\n            if (previewCoords.y>2.0){ // Normals\n                col = vec3(prev.yz,0.0)*max(prev.x,ceil(cos(iTime)));\n            }else{ // Shaded\n                col = vec3(prev.x*0.5*(1.0+dot(prev.yz*2.0-1.0,vec2(cos(iTime-1.0),sin(iTime-1.0)))));\n            }\n        }else{ // Distance (a-0.5)\n            col = mix(sdfShade(prev.w-0.5),vec3(0.5,0.0,0.0),floor(prev.w));\n        }\n    }\n    \n    // Set up for text\n    \n    vec4 cursor = vec4(iResolution.y,iResolution.y-50.0,iResolution.y+50.0,iResolution.y);\n    float baseline = cursor.x;\n    \n    // Print coordinates\n    \n    vec3 textCol = vec3(1.0,0.3,0.3);\n    _X _col printInt(tile.x,fragCoord,col,textCol,cursor); _nl\n    textCol = vec3(0.3,1.0,0.3);\n    _Y _col printInt(tile.y,fragCoord,col,textCol,cursor);\n    \n    // Print \"Distance\" label\n    \n    textCol = vec3(0.8,1.0,0.0);\n    cursor = vec4(iResolution.x-iResolution.y/3.0,0.0,iResolution.x-iResolution.y/3.0+20.0,20.0);\n    baseline = cursor.x;\n    \n    _D _i _s _t _a _n _c _e _nl\n    \n    // Print \"Shaded\" label\n    \n    cursor.yw += vec2(iResolution.y/3.0+cursor.w-cursor.y);\n    textCol = vec3(1.0);\n    \n    _S _h _a _d _e _d _nl\n    \n    // Print \"Normals\" label\n    \n    cursor.yw += vec2(iResolution.y/3.0+cursor.w-cursor.y);\n    textCol = mix(vec3(1.0),vec3(0.0,0.0,1.0),ceil(cos(iTime)));\n    \n    _N _o _r _m _a _l _s\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}