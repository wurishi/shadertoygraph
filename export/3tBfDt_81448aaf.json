{"ver":"0.1","info":{"id":"3tBfDt","date":"1600094814","viewed":104,"name":"minimal checkered sphere","username":"danhel95","description":"texturing sphere with checkers","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tutorial","texture","sphere","marching","tracing","minimal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// learning tutorial 8 , texture mapping\n// texturing sphere with checkers \n// adopted from bigwings feathers\n\n#define R iResolution\n#define PI 3.14159265359\n\n\nmat2 R2(float a) {\n\tfloat s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nvec3 T (vec3 p, float a) {\n\tp.xz *= R2(a*.6);\n    p.xy *= R2(a*.3);\n\n    return p;\n}\n\nfloat checkerboard(in vec2 p) {\n    vec2 q = floor(p*10.);\n    return mod(q.x + q.y,2.);\n}\n\nvec4 material (vec3 p,float a) {\n\n    vec3 q = normalize(T(p, a));\n    // cylindric hack :)\n   \t// vec2 uv = vec2(atan(q.x, q.z), q.y);\n    // or real spheric mapping\n    vec2 uv = vec2(atan(q.x, q.z)/(2.*PI ),acos( q.y) / PI);\n    float m = checkerboard(uv);\n    vec4 col = vec4(m);\n    return col;\n\n}\nvoid mainImage(out vec4 F, in vec2 C) {\n\n    vec2 P = (C.xy-.5*R.xy)/R.y;\n    vec4 col = vec4(.0);\n    vec3 bg = vec3(.5, .2, .3)*(P.y+.5)*2.5;\n    bg += vec3(.8, .6, .4)*(-P.y+.5);\n\n    vec3 ro = vec3(0.,0.,-3.);\n    vec3 rd = normalize(vec3(P, 1.));\n    vec3 c =  vec3(.0);\n    float t = dot(c - ro, rd);\n    vec3 p = ro + rd * t;\n    float dS = length(p - c);\n\n    if(dS < 1. ) {\n        float x = sqrt(1. - dS);\n        vec3 pF = ro + rd * (t-x) - c;\n        vec4 f = material(pF,.3*iTime);\n        vec3 pB = ro + rd * (t+x) - c;\n        vec4 b = material(pB,.3*iTime);\n\n       \tcol =   mix(b, f, f.a*f.b) +\n                vec4( .2,.3,1.,.4);\n    }\n\n    col.rgb =   mix(col.rgb, bg, .2) ;\n\n    col = pow(col, vec4(.4545));\n    F = col;\n\n}","name":"Image","description":"","type":"image"}]}