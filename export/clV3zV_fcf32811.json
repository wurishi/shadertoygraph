{"ver":"0.1","info":{"id":"clV3zV","date":"1684308389","viewed":66,"name":"Fractal Ray Marching","username":"NikolaErceg","description":"Fractal Ray Marching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;\n    vec3 ray_origin = vec3(0.0, 0.0, -2.0);\n    vec3 ray_dir = normalize(vec3(p.xy, 1.0));\n    \n    const int MAX_STEPS = 256;\n    const float MAX_DIST = 20.0;\n    float distance = 0.0;\n    vec3 pos = ray_origin;\n    \n    float t = iTime * 0.2;\n    mat3 rotation = mat3(\n        vec3(cos(t), -sin(t), 0.0),\n        vec3(sin(t), cos(t), 0.0),\n        vec3(0.0, 0.0, 1.0)\n    );\n    pos = rotation * pos;\n    ray_dir = rotation * ray_dir;\n\n    for(int i = 0; i < MAX_STEPS; i++) {\n        distance = length(pos);\n        if(distance > MAX_DIST) break;\n        \n        // Mandlebox formula\n        vec3 z = abs(pos);\n        z = (z * z * z) - 0.1;\n        distance = length(z);\n        \n        pos += ray_dir * distance * 0.5;\n        ray_dir = rotation * ray_dir;\n    }\n    \n    vec3 color = vec3(0.5) + 0.5 * sin(3.0 * pos + vec3(0.0, 2.0, 4.0));\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}