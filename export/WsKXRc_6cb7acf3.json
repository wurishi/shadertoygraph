{"ver":"0.1","info":{"id":"WsKXRc","date":"1574672376","viewed":605,"name":"siri_like_animation","username":"skaplun","description":"Siri-like animation. It's quite heavy but still....","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_MARCHING_STEPS 128\n\nfloat map(vec3 p){\n    return noise(p + vec3(0., iTime, 0.));\n}\n\nvec3 render(in vec2 fragCoord){\n\tvec3 color = vec3(0.);\n    float a = (iResolution.x - iMouse.x) * .05;\n    vec3 eye = vec3(4.5 * sin(a), 3., 4.5 * cos(a));\n    vec3 viewDir = rayDirection(45., iResolution.xy, fragCoord);\n    vec3 worldDir = viewMatrix(eye, vec3(0., 0., 0.), vec3(0., 1., 0.)) * viewDir;\n\t\n    Ray camRay = Ray(eye, worldDir);\n    HitRecord rec;\n    if(sphere_hit(Sphere(vec3(0.), 1.00001), camRay, MIN_FLOAT, MAX_FLOAT, rec)){\n\t\tvec3 sp;\n        float t=rec.t, layers=0., d, aD;\n        for(int i=0; i<MAX_MARCHING_STEPS; i++)\t{\n            sp = eye + worldDir * t;\n            d = map(sp);\n            if(abs(pow(d, .5) - min(pow(sp.y, .75), (.75 - pow(length(sp.xz), 64.)))) <= .05)\n            \tcolor += hsv2rgb(vec3(fbm1x(d, iTime * .1 + 100.) * 3.1415, 1., 1.)) * .015;\n            t += .01;\n        }\n        \n        vec3 nrm = normalize(rec.p);\n        float dt = pow(1. - abs(dot(worldDir, nrm)), 2.);\n        eye = rec.p;\n        worldDir = -nrm;\n        t = .1;\n        vec3 fresCol = vec3(0.);\n        for(int i=0; i<MAX_MARCHING_STEPS; i++)\t{\n            sp = eye + worldDir * t;\n            d = map(sp);\n            if(abs(pow(d, .5) - min(pow(sp.y, .75), (.75 - pow(length(sp.xz), 64.)))) <= .05)\n            \tfresCol += .05 * hsv2rgb(vec3(fbm1x(d, iTime * .1 + 100.) * .5415, 1., 1.));\n            t += .0075;\n        }\n        color += fresCol * dt;\n        color += pow(texture(iChannel0, reflect(worldDir, nrm)).rgb, vec3(4.)) * .1;\n    }\n    return color;\n}\n\n#define AA 1\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ){\n    fragColor -= fragColor;\n    for(int y = 0; y < AA; ++y)\n        for(int x = 0; x < AA; ++x){\n            fragColor.rgb += clamp(render(fragCoord + vec2(x, y) / float(AA)), 0., 1.);\n        }\n    \n    fragColor.rgb /= float(AA * AA);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define MIN_FLOAT 1e-6\n#define MAX_FLOAT 1e6\n\nstruct Sphere{vec3 origin;float rad;};\nstruct Ray{ vec3 origin, dir;};\nstruct HitRecord{ float t; vec3 p;};\n\nvec3 rayDirection(float fieldOfView, vec2 size, vec2 fragCoord) {\n    vec2 xy = fragCoord - size / 2.0;\n    float z = size.y / tan(radians(fieldOfView) / 2.0);\n    return normalize(vec3(xy, -z));\n}\n\nmat3 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n    vec3 f = normalize(center - eye);\n    vec3 s = normalize(cross(f, up));\n    vec3 u = cross(s, f);\n    return mat3(s, u, -f);\n}\nvec3 hash(vec3 x){\n\tx = vec3( dot(x,vec3(127.1,311.7, 74.7)),\n\t\t\t  dot(x,vec3(269.5,183.3,246.1)),\n\t\t\t  dot(x,vec3(113.5,271.9,124.6)));\n\n\treturn fract(sin(x)*43758.5453123);\n}\n\nbool sphere_hit(const in Sphere sphere, const in Ray inray, float t_min, float t_max, inout HitRecord rec) {\n    vec3 oc = inray.origin - sphere.origin;\n    float a = dot(inray.dir, inray.dir);\n    float b = dot(oc, inray.dir);\n    float c = dot(oc, oc) - sphere.rad*sphere.rad;\n    float discriminant = b*b - a*c;\n    if (discriminant > 0.) {\n        float temp = (-b - sqrt(discriminant))/a;\n        if (temp < t_max && temp > t_min) {\n            rec.t = temp;\n            rec.p = inray.origin + inray.dir * rec.t;\n            return true;\n        }\n    }\n    return false;\n}\n\nfloat noise( in vec3 p ){\n    vec3 i = floor( p );\n    vec3 f = fract( p );\n\t\n\tvec3 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( mix( dot( hash( i + vec3(0.0,0.0,0.0) ), f - vec3(0.0,0.0,0.0) ), \n                          dot( hash( i + vec3(1.0,0.0,0.0) ), f - vec3(1.0,0.0,0.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,0.0) ), f - vec3(0.0,1.0,0.0) ), \n                          dot( hash( i + vec3(1.0,1.0,0.0) ), f - vec3(1.0,1.0,0.0) ), u.x), u.y),\n                mix( mix( dot( hash( i + vec3(0.0,0.0,1.0) ), f - vec3(0.0,0.0,1.0) ), \n                          dot( hash( i + vec3(1.0,0.0,1.0) ), f - vec3(1.0,0.0,1.0) ), u.x),\n                     mix( dot( hash( i + vec3(0.0,1.0,1.0) ), f - vec3(0.0,1.0,1.0) ), \n                          dot( hash( i + vec3(1.0,1.0,1.0) ), f - vec3(1.0,1.0,1.0) ), u.x), u.y), u.z );\n}\n\nvec3 hsv2rgb(vec3 c) {\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}\n\nfloat fbm1x(float x, float time){\n\tfloat amplitude = 1.;\n    float frequency = 1.;\n    float y = sin(x * frequency);\n    float t = 0.01*(-time * 130.0);\n    y += sin(x*frequency*2.1 + t)*4.5;\n    y += sin(x*frequency*1.72 + t*1.121)*4.0;\n    y += sin(x*frequency*2.221 + t*0.437)*5.0;\n    y += sin(x*frequency*3.1122+ t*4.269)*2.5;\n    y *= amplitude*0.06;\n    return y;\n}","name":"Common","description":"","type":"common"}]}