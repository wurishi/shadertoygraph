{"ver":"0.1","info":{"id":"dsycD1","date":"1696140652","viewed":127,"name":"Lenia Pt.4","username":"26apastor","description":"My attempt at creating multiple kernels for Lenia:\nPart four.","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["automata","life","cellular","continuous","artificial","lenia"],"hasliked":0,"parentid":"DdycWR","parentname":"Lenia Pt.3"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float con = 0.6;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    col = vec4(pow(col.x, con), pow(col.y, con), pow(col.z, con), 1.0);\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float max_radius = 10.0;\nconst float T = 5.0;\nconst float rho = 0.5;\nconst float omega = 0.15;\nconst float noise_base = 0.15;\n\nvec3 radii1 = vec3(1.0, 5.0/12.0, 2.0/3.0);\nconst float k_a1 = 3.0;\nconst float mu1 = 0.156;\nconst float sigma1 = 0.0118;\n\nvec2 radii2 = vec2(1.0/12.0, 1.0);\nconst float k_a2 = 2.0;\nconst float mu2 = 0.193;\nconst float sigma2 = 0.049;\n\nfloat radii3 = 1.0;\nconst float k_a3 = 1.0;\nconst float mu3 = 0.342;\nconst float sigma3 = 0.0891;\n\nfloat gaussian_bell(float sum, float m, float s) {\n    return exp(-pow(((sum - m) / s ), 2.0) / 2.0);\n}\n\nfloat growth(float sum, float m, float s) {\n    return gaussian_bell(sum, m, s) * 2.0 - 1.0;\n}\n\nfloat getWeight(float r, float k_radii) {\\\n    if (r > 1.) return 0.0;\n    return k_radii * gaussian_bell(mod(r, 1.), rho, omega);\n}\n\nfloat getWeight(float r, float k_amount, vec2 k_radii) {\n    if (r > 1.) return 0.0;\n    r *= k_amount;\n    float radius = k_radii[int(r)];\n    return radius * gaussian_bell(mod(r, 1.), rho, omega);\n}\n\nfloat getWeight(float r, float k_amount, vec3 k_radii) {\n    if (r > 1.) return 0.0;\n    r *= k_amount;\n    float radius = k_radii[int(r)];\n    return radius * gaussian_bell(mod(r, 1.), rho, omega);\n}\n\nvec3 getColor(float g) {\n    float x = gaussian_bell(g, 1.0, 0.5);\n    float y = gaussian_bell(g, 0.0, 0.5);\n    float z = gaussian_bell(g, -1.0, 0.5);\n    float s = (x + y + z); \n    return vec3(x/s, y/s, z/s);\n}\n\nfloat getAliveness(vec4 cell) {\n    return cell.x + cell.y + cell.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float sum1 = 0.0;\n    float total1 = 0.0;\n    float sum2 = 0.0;\n    float total2 = 0.0;\n    float sum3 = 0.0;\n    float total3 = 0.0;\n    for(float x = -max_radius; x <= max_radius; x++) {\n        for( float y = -max_radius; y <= max_radius; y++) {\n            float r = sqrt(x * x + y * y) / max_radius;\n        \tvec2 offset = vec2(x, y) / iResolution.xy;\t\t\n        \tfloat lookup = getAliveness(texture(iChannel0, mod(uv + offset, 1.0)));\n            float weight = getWeight(r, k_a1, radii1);\n        \tsum1 += lookup * weight;\n            total1 += weight;\n            weight = getWeight(r, k_a2, radii2);\n        \tsum2 += lookup * weight;\n            total2 += weight;\n            weight = getWeight(r, radii3);\n        \tsum3 += lookup * weight;\n            total3 += weight;\n        }\n    }\n    sum1 /= total1;\n    sum2 /= total2;\n    sum3 /= total3;\n    float cell = getAliveness(texture(iChannel0, uv));\n    float g1 = growth(sum1, mu1, sigma1); vec3 c1 = getColor(g1);\n    float g2 = growth(sum2, mu2, sigma2); vec3 c2 = getColor(g2);\n    float g3 = growth(sum3, mu3, sigma3); vec3 c3 = getColor(g3);\n    float g = (g1 + g2 + g3) * 0.333; vec3 c = (c1 + c2 + c3) * 0.333;\n    vec3 color = clamp(cell + g / T, 0.0, 1.0) * c;\n  \n    /*Chakazul's use of the hash function is genius and all credits to him in his implementation of lenia: https://www.shadertoy.com/user/Chakazul\n    */\n    //if (iFrame < 1)\n    //    color = vec3(noise_base + noise(fragCoord/max_radius + mod(iDate.w,1.)*100.));\n    if (iFrame < 1)\n        color = vec3(noise_base + noise(fragCoord/max_radius + mod(iDate.w,1.)*100.));\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= max_radius/iResolution.x)\n        \tcolor = vec3(0.3 + noise(fragCoord/max_radius + mod(iDate.w,1.)*100.));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*Chakazul's use of this hash function is genius and all credits to him in his implementation of lenia: https://www.shadertoy.com/user/Chakazul\n*/\n\n// Noise simplex 2D by iq - https://www.shadertoy.com/view/Msf3WH\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}","name":"Common","description":"","type":"common"}]}