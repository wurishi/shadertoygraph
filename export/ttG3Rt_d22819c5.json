{"ver":"0.1","info":{"id":"ttG3Rt","date":"1580557682","viewed":390,"name":"sierpinski triangle generator","username":"DolfinShark","description":"generate the sierpinski triangle","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.1415926536;\nconst float tau = 6.2831853071;\nconst float sqrt3 = 1.7320508076;\n\n\nfloat distToTriangle(in vec2 p) {\n    p.x = abs(p.x) - 1.;\n    p.y = p.y + 1. / sqrt3;\n    \n    if(p.x + sqrt3* p.y > 0.)\n        p = vec2(p.x - sqrt3 * p.y, -sqrt3 * p.x - p.y) * .5;\n    \n    p.x -= clamp(p.x, -2., 0.);\n    \n    return -length(p) * sign(p.y);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    \n    float angle = tau / 3.;\n    angle = tau / (3. + sin(iTime * 0.1));\n    \n    uv *= 3.;\n    for(int i = 0; i < 8; i++) {\n        uv *= 2.;\n        uv.x = abs(uv.x);\n        \n        vec2 n = vec2(cos(angle), sin(angle));\n        uv -= 2. * n * min(0., dot(uv, n));\n        \n        uv.y -= 2. * tan(pi / 6.);\n    }\n    \n    float d = distToTriangle(uv);\n    d = smoothstep(1. / iResolution.y, 0., d);\n\n    fragColor = vec4(d, d, d, 1.);\n}","name":"Image","description":"","type":"image"}]}