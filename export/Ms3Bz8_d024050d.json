{"ver":"0.1","info":{"id":"Ms3Bz8","date":"1524002283","viewed":140,"name":"Subspace selection","username":"darkeclipz","description":"testing to draw different scenes and show the selected subspace with the mouse.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["testing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code is a mess.\n\n// https://iquilezles.org/apps/graphtoy/\n#define SCALE 3.0\n#define GRID_THICKNESS 5.0 * SCALE\n#define MOUSE_CURSOR_SIZE 0.01 * SCALE\n\nfloat anim(float t) { return (-cos(t)+1.0)/2.0; }\n\n// (0, 0)\nvec3 window0(vec2 uv, float t) {\n\tfloat d = length(uv - vec2(0.5, 0.5));\n    return vec3(1.0-d) * 1.5;\n}\n\n// (1,0)\nvec3 window1(vec2 uv, float t) {\n\tfloat d = length(uv - vec2(0.5, 0.5));\n    return vec3(1.0-d) * 1.5 + 0.5 * anim(t);\n}\n\n// (0,1)\nvec3 window2(vec2 uv, float t) {\n    float size = anim(t) / 2.0;\n\tfloat box = float((uv.x > size && uv.x < 1.0-size) && (uv.y > size && uv.y < 1.0-size));\n    return vec3(box);\n}\n\n// (1,1)\nvec3 window3(vec2 uv, float t) {\n    t = pow(anim(t), 2.0);\n    float size = t / 2.0;\n\tfloat box = float((uv.x > size && uv.x < 1.0-size) && (uv.y > size && uv.y < 1.0-size));\n    return vec3(box);\n}\n\n// (2,1)\nvec3 window4(vec2 uv, float t) {\n    t = sqrt(anim(t));\n    float size = t / 2.0;\n\tfloat box = float((uv.x > size && uv.x < 1.0-size) && (uv.y > size && uv.y < 1.0-size));\n    return vec3(box);\n}\n\n// (0,2)\nvec3 window5(vec2 uv, float t) {\n    //t = sqrt(anim(t));\n\tfloat box = length(vec2(anim(t)) - uv) < 0.5 ? 1.0 : 0.0;\n    return vec3(box);\n}\n\n// (1,2)\nvec3 window6(vec2 uv, float t) {\n    //t = sqrt(anim(t));\n\tfloat box = length(vec2(0.5) - uv) < fract(pow(anim(t), 0.3)) / 2.0 ? 1.0 : 0.0;\n    return vec3(box);\n}\n\n// (2,2)\nvec3 window7(vec2 uv, float t) {\n    //t = sqrt(anim(t));\n\tfloat box = length(vec2(0.5) - uv) < (fract(anim(t)) + fract(6.0*anim(t)) / 6.0) / 2.35 ? 1.0 : 0.0;\n    return vec3(box);\n}\n\n// (3,2)\nvec3 window8(vec2 uv, float t) {\n    //t = sqrt(anim(t));\n\tfloat box = length(vec2(0.5) - uv) < (fract(8.0*anim(t)) * pow(anim(t), 1.2) + anim(t)) / 4.0 ? 1.0 : 0.0;\n    return vec3(box);\n}\n\n// (0,3)\nvec3 window9(vec2 uv, float t) {\n    float d = length(uv - vec2(0.5, 0.5)) * 2.0;\n    float vary = 0.1 * anim(t);\n    d = smoothstep(0.3, 0.4+vary, d)-smoothstep(0.6,0.9-vary,d);\n    return vec3(d) * anim(t) * 1.618;\n}\n\n// (3,1)\nvec3 window10(vec2 uv, float t) {\n    float tau = 3.14159265359*2.;\n    float speed = 0.125;\n    mat2 m = mat2(cos(fract(t*speed)*tau), -sin(fract(t*speed)*tau), sin(fract(t*speed)*tau), cos(fract(t*speed)*tau));\n    uv -= vec2(0.5);\n    uv = m * uv;\n    uv += vec2(0.5);\n\tfloat box = float((uv.x > 0.2 && uv.x < 0.8) && (uv.y > 0.2 && uv.y < 0.8));\n    return vec3(box);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 norm = vec2(iResolution.y);\n    vec2 uv = fragCoord / norm * SCALE;\n    vec2 mouse = iMouse.xy / norm * SCALE;\n    float t = iTime;\n    \n    // Used to create subspaces.\n\tvec2 ipart, fpart; \n    fpart = modf(uv, ipart);\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(t+fpart.xyx+vec3(0,2,4));\n\n    // Mouse cursor\n    if( length(uv - mouse.xy) < MOUSE_CURSOR_SIZE ) \n        col = mix(col, vec3(1), 0.618); \n    \n    // Selected cell\n    if((mouse.x > ipart.x && mouse.x < ipart.x + 1.0)\n       && (mouse.y > ipart.y && mouse.y < ipart.y + 1.0)) \n        col = mix(col, vec3(1.0), 0.5);\n    \n    // Window selection\n    if(ipart.x == 0.0 && ipart.y == 0.0) col = mix(col, window0(fpart, t), 0.5); // window0\n    if(ipart.x == 4.0 && ipart.y == 0.0) col = mix(col, window7(fpart, t), 0.5); // window1\n    if(ipart.x == 0.0 && ipart.y == 1.0) col = mix(col, window5(fpart, t), 0.5); // window2\n    if(ipart.x == 1.0 && ipart.y == 1.0) col = mix(col, window9(fpart, t), 0.5); // window3\n    if(ipart.x == 2.0 && ipart.y == 1.0) col = mix(col, window4(fpart, t), 0.5); // window4\n    if(ipart.x == 0.0 && ipart.y == 2.0) col = mix(col, window2(fpart, t), 0.5); // window5\n    if(ipart.x == 1.0 && ipart.y == 2.0) col = mix(col, window6(fpart, t), 0.5); // window6\n    if(ipart.x == 4.0 && ipart.y == 1.0) col = mix(col, window1(fpart, t), 0.5); // window7\n    if(ipart.x == 3.0 && ipart.y == 2.0) col = mix(col, window8(fpart, t), 0.5); // window8\n    if(ipart.x == 2.0 && ipart.y == 0.0) col = mix(col, window3(fpart, t), 0.5); // window9\n    if(ipart.x == 3.0 && ipart.y == 1.0) col = mix(col, window10(fpart, t), 0.5); // window10\n    \n    // Gridlines\n\t//float epsilon = 0.000001; // To remove flickering gridlines (why does this work??).\n    //float dx = (1.0 / iResolution.x) * iResolution.x / iResolution.y + epsilon;\n    //float dy = 1.0 / iResolution.y + epsilon;\n    //if(fpart.x < dx * GRID_THICKNESS || fpart.y < dy * GRID_THICKNESS ) \n    //    col = mix(col, vec3(0), 1.0);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}