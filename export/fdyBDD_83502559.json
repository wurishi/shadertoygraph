{"ver":"0.1","info":{"id":"fdyBDD","date":"1658163073","viewed":215,"name":"smooth NOR","username":"lomateron","description":"anything can be computed using only NOR or only NAND\nthis uses NOR\nI think this is one of the highest entropy NOR combinations for 4 inputs that has symetry across the 2Dspace","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["binaryfunction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define A(u) texture(iChannel0,(u)/iResolution.xy)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = A(fragCoord);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define A(u) texture(iChannel0,(u)/iResolution.xy)\n#define pi 3.141592653589793238\nfloat nor(float a, float b)\n{\n    return (+cos(pi*(a*0.+b*0.))\n            +cos(pi*(a*0.+b*1.))\n            +cos(pi*(a*1.+b*0.))\n            +cos(pi*(a*1.+b*1.)))*.25;//change .25 to something else\n}\nvoid mainImage( out vec4 fragColor, in vec2 u )\n{\n    float a = A(u+vec2(-1,-1)).x;\n    float b = A(u+vec2( 0,-1)).x;\n    float c = A(u+vec2(+1,-1)).x;\n    float d = A(u+vec2( 0,-2)).x;\n    float o1 = nor(a,b);\n    float o2 = nor(o1,a);\n    float o3 = nor(o1,b);\n          a  = nor(o2,o3);\n          b  = c;\n          o1 = nor(a,b);\n          o2 = nor(o1,a);\n          o3 = nor(o1,b);\n          a  = nor(o2,o3);\n          b  = d;\n          o1 = nor(a,b);\n          o2 = nor(o1,a);\n          o3 = nor(o1,b);\n    float o  = nor(o2,o3);\n          o  = nor(o,o);\n    if(iFrame==0)\n    {\n        o = fract(cos(dot(u,vec2(1234.1234,4321.4321)))*1234.5678);\n        o *= float(u.x>100.&&u.x<110.);\n        o = +float(u.x==000.5)*.4799\n            +float(u.x==111.5)*1.\n            +float(u.x==222.5)*0.;\n        //o = round(o);\n    }\n    if(iFrame!=0&&int(u.y)!=(iFrame%int(iResolution.y))){o=A(u).x;}\n    fragColor = vec4(o);\n}","name":"Buffer A","description":"","type":"buffer"}]}