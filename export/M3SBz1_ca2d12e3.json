{"ver":"0.1","info":{"id":"M3SBz1","date":"1729184454","viewed":55,"name":"circlewave-noise for study","username":"ARTS_syz","description":"code for learning;forked from https://thebookofshaders.com/11\nI've I read the source code and made appropriate modifications.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["forked","codeforstudy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n//forked from https://thebookofshaders.com/11\n//https://thebookofshaders.com/edit.php#11/circleWave-noise.frag\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec2 random2(vec2 st){\n    st = vec2( dot(st,vec2(127.1,311.7)),\n              dot(st,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(st)*43758.5453123);\n}\n\n// Gradient Noise by Inigo Quilez - iq/2013\n// https://www.shadertoy.com/view/XdXGW8\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat shape0(vec2 st, float radius) {\n\tst = vec2(0.75)-st;\n    float r = length(st)*4.4;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*2.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    f += sin(a*20.)*noise(st+iTime*.2)*.1;\n    f += (sin(a*20.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.02,r);\n}\n\nfloat shape00(vec2 st, float radius) {\n\tst = vec2(0.25)-st;\n    st.x = 0.09-st.x;\n    st.y = 0.03+st.y;\n    float r = length(st)*3.3;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*2.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    f += sin(a*10.)*noise(st+iTime*.2)*.1;\n    f += (sin(a*10.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.02,r);\n}\n\n\nfloat shape(vec2 st, float radius) {\n\tst = vec2(0.5)-st;\n    float r = length(st)*2.2;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*2.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    f += sin(a*50.)*noise(st+iTime*.2)*.1;\n    f += (sin(a*20.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.015,r);\n}\n\nfloat shape2(vec2 st, float radius) {\n\tst = vec2(0.5)-st;\n    float r = length(st)*3.3;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a-iTime*3.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    f += cos(a*35.)*noise(st+iTime*.3)*.1;\n    f += (cos(a*20.)*.1*pow(m,2.));\n    f -= (cos(a*10.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.015,r);\n}\n\n\nfloat shape3(vec2 st, float radius) {\n\tst = vec2(0.5)-st;\n    float r = length(st)*5.5;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*4.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    //f += tan(a*20.)*noise(st+iTime*.4)*-0.012;\n    //f += (tan(a*20.)*.1*pow(m,2.));\n    f -= (tan(a*8.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.015,r);\n}\n\nfloat shape4(vec2 st, float radius) {\n\tst = vec2(0.5)-st;\n    float r = length(st)*7.7;\n    float a = atan(st.y,st.x);\n    float m = abs(mod(a+iTime*4.,3.14*2.)-3.14)/3.6;\n    float f = radius;\n    f += sin(a*20.)*noise(st+iTime*.4)*-0.012;\n    f += (sin(a*20.)*.1*pow(m,2.));\n    return 1.-smoothstep(f,f+0.015,r);\n}\n\nfloat shapeBorder(vec2 st, float radius, float width) {\n    return shape00(st,radius)-shape00(st,radius-width*4.)+shape00(st,radius-width*7.)+shape0(st,radius)-shape0(st,radius-width*2.)+shape0(st,radius-width*4.)+shape(st,radius)-shape(st,radius-width)+shape(st,radius-width*2.)-shape2(st,radius)+shape2(st,radius-width*1.496)-shape2(st,radius-width*3.656)+shape3(st,radius)-shape3(st,radius-width*2.704)+shape3(st,radius-width*4.936)-shape4(st,radius)+shape4(st,radius-width*8.496)*1.;\n    }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x / iResolution.y;  \n    st.x-=0.3855;\n\tvec3 color = vec3(1.0) * shapeBorder(st,0.800,0.036);\n    vec3 doublecolor = smoothstep(0.,1.,color)-smoothstep(1.,2.,color);\n\tfragColor = vec4( 1.-doublecolor, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}