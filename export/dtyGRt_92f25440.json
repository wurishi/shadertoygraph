{"ver":"0.1","info":{"id":"dtyGRt","date":"1684422975","viewed":208,"name":"Quick VHS shader","username":"noClueBruh","description":"Just a VHS shader to copy paste and change some stuff if you like","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["tv","crt","shader","old","curve","vhs","ps1"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = 3.14159265359;\nfloat curvature = 0.065;\nfloat vignetteStrength = 0.4;\nfloat theScanLine = 0.;\n\n//By noClueBruh :]\n\nvec2 curve(vec2 inp)\n{\n    //curves the screen\n    inp.x = inp.x - sin(inp.y * pi) * curvature * (inp.x-0.5);\n    inp.y = inp.y - sin(inp.x * pi) * curvature * (inp.y-0.5);\n    return inp;\n}\n\nvec2 zoomOut(vec2 inp)\n{\n    //zooms out so that the curved screen fits\n    float zoom = 1.+ 1.3*curvature;\n    return vec2(.5,.5) + ((inp-vec2(.5,.5))*zoom);\n}\n\nbool inRect(vec2 rect, vec2 rectDim, vec2 inp)\n{\n    //method that detects if a point is inside a rectangle\n    return clamp(inp, rect, rectDim) == inp;\n}\n\nvec4 staticc(vec2 inp)\n{\n    float t = 0.;\n    //little scanlines\n    t = cos(inp.y * iResolution.y) * 2.;\n    \n    //the static\n    t += tan(sin(100. + iTime * cos(100. + iTime) * 2.)*14. * inp.y) * 0.05;\n    return vec4(t,t,t,1);\n}\n\nfloat lerp(float a, float b, float c)\n{\n    //lerp\n    return a + c*(b-a);\n}\n\nvec4 vignette(vec2 inp)\n{\n    //cheap vignette effect \n    float t = 0.;\n    t = lerp(0.5, vignetteStrength * distance(inp, vec2(0.5,0.5)),0.98);\n    return vec4(t,t,t,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = zoomOut(curve(fragCoord/iResolution.xy));\n    vec4 col; \n    \n    //big scanline\n    theScanLine = sin(iTime*pi+uv.y)+tan(iTime - uv.y*uv.y)-cos(uv.y);\n    \n    //borderCheck\n    if(inRect(vec2(0,0),vec2(1.,1.),uv))\n    {\n        //big scanline stuff \n        if(inRect(vec2(0,theScanLine),vec2(1,theScanLine + 0.1),uv))\n            uv.x -= sin(theScanLine-uv.y) * 0.15;\n            \n        col = texture(iChannel0, uv);\n        col -= vignette(uv);\n        col += staticc(uv) * 0.015;\n    }\n    else\n        col = vec4(0,0,0,1);\n        \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}