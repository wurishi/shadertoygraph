{"ver":"0.1","info":{"id":"wssyWj","date":"1585712410","viewed":56,"name":"noise_test_ooo","username":"ooo198632","description":"cell?","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2dnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float freq = 5.;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    //uv.x *= iResolution.x/iResolution.y;\n    vec2 uv1;\n      uv1.y = uv.y * freq;\n    uv1.x = uv.x * freq*iResolution.x/iResolution.y;\n   // uv1.x = clamp(uv1.x,0.,5.);\n    //uv *= 5.;\n    //uv.x = clamp(uv.x,0.,5.);\n    \n    vec2 i_st = floor(uv1);\n    vec2 f_st = fract(uv1);\n    \n    vec2 point[5];\n    point[0] = vec2(0.83,0.75);\n    point[1] = vec2(0.60,0.07);\n    point[2] = vec2(0.28,0.64);\n    point[3] =  vec2(0.31,0.26);\n    \n    point[4] = vec2(0.53,0.75);\n    \n    vec2 point_m;\n    \n    point_m = iMouse.xy/iResolution.xy;\n    \n        \n    point_m.x *= iResolution.x/iResolution.y;\n    \n    float m_dist = 1.;  // minimun distance\n\n    // Iterate through the points positions\n    for (int i = 0; i < 5; i++) {\n        point[i] = 0.5 + 0.5*sin(iTime + 6.2831*point[i]);\n        float dist = distance(uv, point[i]);\n        float dist1 = clamp(distance(uv1, point_m),0.0,1.0);\t\n\n        // Keep the closer distance\n        m_dist = min(m_dist, dist);\n        m_dist = min(m_dist,dist1);\n    }\n    \n    float m_dist1 = 1.; \n     \n    for(int x = -1;x <= 1;x++){\n        for(int y = -1;y <= 1 ;y++){\n             vec2 neighbor = vec2(float(x),float(y));\n            if(iMouse.xy==vec2(0))\n        point_m = random2(i_st + neighbor);\n             vec2 point = random2(i_st + neighbor);\n             point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n            // vec2 diff = point+neighbor-f_st;\n             float dist = distance(f_st, point+neighbor);\n            \n             //float dist = length(diff);\n             m_dist1 = min(m_dist1, dist);\n            \n        }\n    }\n    float distM = distance(uv1, point_m*freq);\t\n     \n    //float dist2 = clamp(distance(uv, point_m),0.0,1.0);\n\t\n    // Time varying pixel color\n   vec3 col = mix(vec3(1.,0.,0.),vec3(0.,1.,0.),smoothstep(0.,1.,(distM - m_dist1)));\n\t//\tcol = vec3(m_dist);\n    m_dist1 = min(m_dist1, distM);\n    col = mix(col,vec3(0.,0,0.),m_dist1);\n    col += 1.-step(.02, m_dist1);\n     col += (1.- smoothstep(0.,0.08,m_dist1))*0.5;\n    \n    //col.r += step(.98, f_st.x) + step(.98, f_st.y);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}