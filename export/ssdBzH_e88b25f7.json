{"ver":"0.1","info":{"id":"ssdBzH","date":"1656182628","viewed":85,"name":"Québec Flag Low rez","username":"dominionxvii","description":"LE QUÉBEC","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["qubec"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 blue = vec4(0.0, 0.0, 1.0 ,1.0);\nvec4 white = vec4(1.0, 1.0, 1.0 ,1.0);\n\nfloat easeOutElastic(float x)\n{\n    float c4 = (2. * 3.1416) / 3.;\n\n    return x == 0. ? 0. : x == 1. ? 1.\n      : pow(2., -10. * x) * sin((x * 10. - 0.75) * c4) + 1.;\n}\n\nfloat easeOutBack(float x)\n{\n    float c1 = 1.70158;\n    float c3 = c1 + 1.;\n    \n    return 1. + c3 * pow(x - 1., 3.) + c1 * pow(x - 1., 2.);\n}\n\nfloat saturate(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\nfloat easeOutCubic(float x)\n{\n  float xx = 1.0 - x;\n  return 1.0 - xx * xx * xx;\n}\n\nfloat easeOutCirc(float x)\n{\n  float xx = 1.0 - x;\n  return 1.0 - xx * xx * xx * xx * xx;\n}\n\nfloat easeOutQuad(float x)\n{\n    float xx = 1.0 - x;\n    return 1.0 - xx * xx;\n}\n\nfloat easeOutPow(float x, float power)\n{\n    float xx = 1.0 - x;\n    return 1.0 - pow(xx, power);\n}\n\n\nfloat remap(float v, float fmn, float fmx, float tmn, float tmx) {\n    return (v-fmn) / (fmx-fmn) * (tmx-tmn) + tmn;\n}\n\nvec2 remap(vec2 v, float fmn, float fmx, float tmn, float tmx) {\n    return vec2(remap(v.x, fmn, fmx, tmn, fmx), remap(v.y, fmn, fmx, tmn, fmx));\n}\n   \nbool InWhiteCross(vec2 uv, vec2 edge1, vec2 edge2)\n{\n    return (uv.x < edge2.x && uv.x > edge1.x) || (uv.y < edge2.y && uv.y > edge1.y);\n}\n   \nvec2 FlagCornerUV(vec2 uv, vec2 edge)\n{\n    \n    float ysign = sign(0.5 - uv.y);\n    uv.x = 0.5 - distance(uv.x, 0.5);\n    uv.y = 0.5 - distance(uv.y, 0.5);\n    \n    uv.x = remap(uv.x, 0.0, edge.x, 0.0, 1.0);  \n    uv.y = remap(uv.y, 0.0, edge.y, 0.0, 1.0);  \n  \n    //mirror Y\n    if(ysign < 0.0)\n    {\n        uv. y = 1.0 -  uv.y;\n    }\n    return uv;\n}\n   \nvec2 FlagWindUV(vec2 uv, out float normal)\n{\n    float a = uv.x * 8.2 - 3.3 * iTime + uv.y * 1.5;\n    uv.y += 0.02 * sin(a);   \n    uv.x += 0.0065 * sin(a * 2.15);\n    \n    normal = cos(a) + 0.5 * cos(a * 2.15);\n    return uv;\n}\n\nvec2 ReframeUv(vec2 uv, float offset)\n{\n    uv = remap(uv, 0., 1.0, -offset, 1.0 + offset) + (offset / 2.0);\n    return uv;\n}\n\nvec2 ReframeUv(vec2 uv, vec2 offset)\n{\n    uv.x = remap(uv.x, 0., 1.0, -offset.x, 1.0 + offset.x) + (offset.x / 15.0);\n    uv.y = remap(uv.y, 0., 1.0, -offset.y, 1.0 + offset.y) + (offset.y / 15.0);\n    return uv;\n}\n\nfloat Quantize(float x, float amount)\n{\n    return floor(x * amount) / amount;\n}\n\nvec2 Quantize(vec2 x, float amount)\n{\n    return floor(x * amount) / amount;\n}\n\nvec4 Quantize(vec4 x, float amount)\n{\n    return floor(x * amount) / amount;\n}\n\nvec4 QuebecFlag(vec2 uv)\n{\n    //Draw flag pattern\n    float offsetX = 0.12;\n    float offsetY = 0.1;\n\n    vec2 edge1 = vec2(1./3. + offsetX, 1./3. + offsetY); \n    vec2 edge2 = vec2(2./3. - offsetX, 2./3. - offsetY); \n\n    vec4 col;\n    if(InWhiteCross(uv, edge1, edge2))\n    {\n        col = white;\n    }\n    else\n    {\n        uv = FlagCornerUV(uv, edge1);\n        \n        uv = ReframeUv(uv, vec2(1.0, 0.2));\n        //col = SampleQuebecSmooth(uv, white, blue, 0.025);\n        \n        float pivot = 0.5;\n        float timeStep = floor(iTime * 0.5) + 1.0;\n        float fractTime = fract(iTime * 0.5);\n        float time = timeStep + (easeOutCirc(fractTime));\n        time *= 3.1416;\n        time += 3.1416 / 2.0;\n        \n        uv -= pivot;\n        uv = vec2(uv.x * sin(time) + uv.y * cos(time), uv.x * cos(time) - uv.y * sin(time));\n        uv += pivot;\n        \n        col = SampleQuebecSmooth(uv, white, blue, 0.015);\n    }\n    return col;\n}\n\nvec2 CycleUvWrap(vec2 uv)\n{\n    vec2 prevUv = uv;\n    \n    float timeFract = fract(iTime * 0.25 + 0.5);\n    float timeSteps = floor(iTime * 0.25 + 0.5);\n    timeFract = easeOutCirc(easeOutCirc(timeFract));\n    float newTime = timeSteps + timeFract;\n    \n    float maxUvStep = 2.0;\n    float prevTimeStep = timeSteps - 1.;\n    \n    timeSteps = mod(timeSteps, (2. * maxUvStep));\n    prevTimeStep = mod(prevTimeStep, (2. * maxUvStep));\n\n    if(prevTimeStep > maxUvStep)\n    {\n        prevTimeStep = 2. * maxUvStep - prevTimeStep;\n    }\n    \n    if(timeSteps > maxUvStep)\n    {\n        timeSteps = 2. * maxUvStep - timeSteps;\n    }\n    \n    uv *= 1.0 + mix(prevTimeStep, timeSteps, timeFract);\n    \n    \n    if(timeSteps < prevTimeStep)\n    {    \n        newTime = -newTime;\n    }\n    uv -= newTime;\n\n\n    uv = mod(uv, 1.0);\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = Quantize(uv, 300.0);\n    \n    uv = ReframeUv(uv, 0.20);\n    \n    float normal;\n    uv = FlagWindUV(uv, normal);\n    \n    float material = 0.5 * texture(iChannel0, uv).r + texture(iChannel0, uv).b - texture(iChannel0, uv).g;\n\n    //Black background\n    if(uv.x > 1.0 || uv.x < 0.0 || uv.y > 1.0 || uv.y < 0.0)\n    {\n        fragColor = vec4(0.0);\n        return;\n    }\n\n    uv = CycleUvWrap(uv);\n    \n    vec4 col = QuebecFlag(uv);\n    normal += saturate(0.35 * material);\n    col *= saturate(0.8 + normal * 0.1);\n    fragColor = Quantize(col, 24.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"int imgHeight = 50;\nint imgWidth = 38;\nbool isColor1[1938] = bool[1938] (\n    false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, true, true, true, true, true, false, false, true, true, true, true, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, true, false, false, false, false, true, true, true, true, true, true, false, false, false, true, true, true, true, true, false, false, false, false, false, true, true, true, false, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, true, true, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, true, true, true, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false\n);\n\nbool SampleBool(vec2 uv, bool isClamp)\n{\n    int x = int(uv.x * float(imgWidth));\n    int y = int((1.0 - uv.y) * float(imgHeight));\n\n    if(isClamp)\n    {\n        x = clamp(x, 0, imgWidth);     \n        y = clamp(y, 0, imgHeight);\n    }\n    else //repeat\n    {\n       x = x % imgWidth;     \n       y = y % imgHeight;\n    }\n\n    int i = imgWidth * y + x;\n    return isColor1[i];\n}\n\nvec4 SampleQuebec(vec2 uv, vec4 white, vec4 blue, bool isClamp)\n{\n    return SampleBool(uv, isClamp) ? white : blue;\n}\n\nvec4 SampleQuebecSmooth(vec2 uv, vec4 white, vec4 blue, float uvSpread)\n{\n    float boolSum = 0.0;\n    for(int x = -1; x <= 1; x++)\n    {\n        for(int y = -1; y <= 1; y++)\n        {\n            boolSum += SampleBool(uv + vec2(x, y) * uvSpread, true) ? 1.0 : 0.0;\n            \n        }\n    }\n    \n    //Extra step on the sample\n    boolSum += SampleBool(uv, true) ? 1.0 : 0.0;\n   \n    boolSum = boolSum / 10.0;\n    boolSum = smoothstep(0., 1., boolSum);\n    boolSum = pow(boolSum, 5.0);\n    return mix(blue, white, vec4(boolSum));\n    \n}","name":"Common","description":"","type":"common"}]}