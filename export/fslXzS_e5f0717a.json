{"ver":"0.1","info":{"id":"fslXzS","date":"1618957202","viewed":98,"name":"319/1_Tarasova_v1v0","username":"valeria_trs","description":"v1 - Cube, v0 - Fire","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["mashgraph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\n\nconst vec3 CAMERA_POS = vec3(3, 1.8, -9);\n\nvec3 LIGHT1_POS = vec3(-5, 2.0, 1.0); \nconst float LIGHT1_RADIUS = 0.7; \nconst vec3 LIGHT1_COLOR = vec3(1.2, 0, 1.2);\n\nvec3 LIGHT2_POS = vec3(-2, 0.8, -10); \nconst float LIGHT2_RADIUS = 0.5; \nconst vec3 LIGHT2_COLOR = vec3(0, 1.5, 1.5);\n\nvec3 LIGHT3_POS = vec3(2.0, 1.0, 2.5); \nconst float LIGHT3_RADIUS = 0.5; \nconst vec3 LIGHT3_COLOR = vec3(1.5, 1.5, 1.5);\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\n\nstruct Cube\n{\n    vec3 v1;\n    vec3 v2;\n    vec3 v3;\n    vec3 v4;\n    vec3 v5;\n    vec3 v6;\n    vec3 v7;\n    vec3 v8;\n};\n\nCube cube = Cube\n(\n    vec3(-1.2, -1.2, -1.2),\n    vec3(-1.2, -1.2, 1.2),\n    vec3(1.2, -1.2, 1.2),\n    vec3(1.2, -1.2, -1.2),\n    \n    vec3(-1.2, 1.2, -1.2),\n    vec3(-1.2, 1.2, 1.2),\n    vec3(1.2, 1.2, 1.2),\n    vec3(1.2, 1.2, -1.2)\n);\n\nbool equals(float a, float b)\n{\n    if (abs(a - b) < 0.00001)\n    {\n        return true;\n    }\n    return false;\n}\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\n// (CAMERA_POS + t * viewVec).y == -1.4;\n// t = (-1.4 - CAMERA_POS.y) / viewVec.y;\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float t = (-1.4 - pos.y) / dir.y;\n    if (t <= 0.0)\n    {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0)\n    {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot (dir, dir) == r * r\n    // dot(dir, dir) == 1\n    // t * t + 2 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float b = dot(pos, dir);\n    float D = b * b - dot(pos, pos) + r * r;\n    if (D < 0.0)\n    {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0)\n    {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0)\n    {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCube(vec3 pos, vec3 dir, out vec3 normal) \n{ \n    vec3 min = cube.v1;\n    vec3 max = cube.v7;\n\n    float txmin = (min.x - pos.x) / dir.x; \n    float txmax = (max.x - pos.x) / dir.x;\n    \n    float tymin = (min.y - pos.y) / dir.y; \n    float tymax = (max.y - pos.y) / dir.y;\n    \n    float tzmin = (min.z - pos.z) / dir.z; \n    float tzmax = (max.z - pos.z) / dir.z;\n \n    if (txmin > txmax)\n    {\n        float tmp = txmin;\n        txmin = txmax;\n        txmax = tmp;\n    } \n \n    if (tymin > tymax)\n    {\n        float tmp = tymin;\n        tymin = tymax;\n        tymax = tmp;\n    }\n   \n    if ((txmin > tymax) || (tymin > txmax)) \n        return INF; \n \n    if (tymin > txmin) \n        txmin = tymin; \n \n    if (tymax < txmax) \n        txmax = tymax;\n \n    if (tzmin > tzmax)\n    {\n        float tmp = tzmin;\n        tzmin = tzmax;\n        tzmax = tmp;\n    }\n    \n    if ((txmin > tzmax) || (tzmin > txmax)) \n        return INF; \n \n    if (tzmin > txmin) \n        txmin = tzmin; \n \n    if (tzmax < txmax) \n        txmax = tzmax; \n    \n    float t = txmin;\n    if (t < 0.0)\n    {\n        t = txmax;\n        if (t < 0.0)\n        {\n            return INF;\n        }\n    }\n    \n    vec3 point = t * dir + pos;\n    if (equals(point.y, cube.v1.y) && equals(point.y, cube.v2.y) && \n            equals(point.y, cube.v3.y) && equals(point.y, cube.v4.y))\n    {\n        normal = vec3(0, -1, 0);\n    }\n    if (equals(point.z, cube.v1.z) && equals(point.z, cube.v4.z) && \n            equals(point.z, cube.v5.z) && equals(point.z, cube.v8.z))\n    {\n        normal = vec3(0, 0, -1);\n    }\n    if (equals(point.x, cube.v1.x) && equals(point.x, cube.v2.x) && \n            equals(point.x, cube.v5.x) && equals(point.x, cube.v6.x))\n    {\n        normal = vec3(-1, 0, 0);\n    }\n    if (equals(point.y, cube.v5.y) && equals(point.y, cube.v6.y) && \n            equals(point.y, cube.v7.y) && equals(point.y, cube.v8.y))\n    {\n        normal = vec3(0, 1, 0);\n    }\n    if (equals(point.z, cube.v2.z) && equals(point.z, cube.v3.z) && \n            equals(point.z, cube.v6.z) && equals(point.z, cube.v7.z))\n    {\n        normal = vec3(0, 0, 1);\n    }\n    if (equals(point.x, cube.v3.x) && equals(point.x, cube.v4.x) && \n            equals(point.x, cube.v7.x) && equals(point.x, cube.v8.x))\n    {\n        normal = vec3(1, 0, 0);\n    }\n    return t; \n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal)\n{\n    float radius = 2.0;\n    float height = 0.3;\n    float t = (-1.0 - pos.y) / dir.y;\n    \n    if (t < 0.0)\n    {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < radius * radius)\n    {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot (dir, dir) == r * r\n    // dot(dir, dir) == 1\n    // t * t + 2 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - radius * radius;\n    float D = b * b - a * c;\n    if (D < 0.0)\n    {\n        return INF;\n    }\n    \n    t = (-b - sqrt(D)) / a;\n    \n    worldPos = t * dir + pos;\n    if (worldPos.y < -1.0)\n    {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    \n    return INF;\n}\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 rvec = target - pos;\n    float dist = length(rvec);\n    vec3 dir = rvec / dist;\n    \n    vec3 normal = vec3(0, 0, 0);\n    \n    float t = traceSphere(pos, dir, 1.0, normal);\n    if (dist >= t) {\n        return true;\n    }\n    vec3 cylNormal = normal;\n    t = traceCylinder(pos, dir, cylNormal);\n    return (t > 0.0 && dist >= t);\n}\n\nvec3 randVals;\nvec3 randDir;\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal)\n{\n    vec3 lightPos1 = LIGHT1_POS + randDir * LIGHT1_RADIUS;\n    vec3 toLight1 = lightPos1 - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    bool occl1 = isOccluded(pos + normalize(toLight1) * 0.001, lightPos1);\n    float att1 = 20.0f / distSq1 * (occl1 ? 0.0 : 1.0);\n    \n    vec3 lightPos2 = LIGHT2_POS + randDir * LIGHT2_RADIUS;\n    vec3 toLight2 = lightPos2 - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    bool occl2 = isOccluded(pos + normalize(toLight2) * 0.001, lightPos2);\n    float att2 = 20.0f / distSq2 * (occl2 ? 0.0 : 1.0);\n    \n    vec3 lightPos3 = LIGHT3_POS + randDir * LIGHT3_RADIUS;\n    vec3 toLight3 = lightPos3 - pos;\n    float distSq3 = dot(toLight3, toLight3);\n    bool occl3 = isOccluded(pos + normalize(toLight3) * 0.001, lightPos3);\n    float att3 = 20.0f / distSq3 * (occl3 ? 0.0 : 1.0);\n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.5\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2, out bool isReflected)\n{\n    isReflected = false;\n    if (dot(v, normal) < 0.0)\n    {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if(sinB > 1.0)\n    {\n        isReflected = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat sdfFog(vec3 pos)\n{\n    return length(pos) - 1.5;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = sdfFog(pos);\n    const float MARCH_SIZE = 0.01;\n    float opacity = 0.7;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = sdfFog(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(4, 2, 2) * totalAbs * 1.3, 1.0 - opacity);\n}\n\nfloat snoise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(10, 100, 1000);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res)) * s;\n\tvec3 uv1 = floor(mod(uv + vec3(1.0), res)) * s;\n\tvec3 f = fract(uv); \n\tf = f * f * (3.0 - 2.0 * f);\n\tvec4 v = vec4(uv0.x + uv0.y + uv0.z, uv1.x + uv0.y + uv0.z,\n\t              uv0.x + uv1.y + uv0.z, uv1.x + uv1.y + uv0.z);\n\tvec4 r = fract(sin(v * 0.1) * 1000.0);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z) * 0.1) * 1000.0);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z) * 2.0 - 1.0;\n}\n\nvec3 burn(vec2 p) \n{\n\tfloat color1 = 4.0 - (3.0 * length(2.0 * p));\n    \n\tvec3 coord = vec3(atan(p.x, p.y) / 6.2832 + 0.5, length(p) * 0.4, 0.5);\n\tfor(int i = 1; i <= 5; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor1 += 0.5 * (1.5 / power) * snoise(coord + vec3(0.5, iTime * 0.05, iTime * 0.01), power * 16.0);\n\t}\n\tcolor1 *= 0.6;\n\treturn vec3(color1, pow(max(color1, 0.0), 2.0) * 0.4, pow(max(color1, 0.0), 3.0) * 0.15);\n}\n\nvec3 drawFire(vec2 p) {\n    vec3 color = burn(p);\n    return mix(vec3(2, 0.1, 0.1), color, 0.6);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0) / iResolution.x;\n    vec3 front = normalize(- CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    vec3 LIGHT1_POS = vec3(-5, 2.0, 1.0) + vec3(0, 1, 0) * randVals.x * 0.1; \n    vec3 LIGHT2_POS = vec3(-2, 0.8, -10) + vec3(1, 0, 0) * randVals.x * 0.1; \n    vec3 LIGHT3_POS = vec3(2.0, 1.0, 2.5) + vec3(1, 0, 0) * randVals.x * 0.1; \n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    \n    float mult = 1.0;\n    \n    for (int i = 0; i < 10; ++i)\n    {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        vec3 planeNorm;\n        \n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t)\n        {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t)\n        {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        \n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t)\n        {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        \n        vec3 l3Norm;\n        float light3T = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, l3Norm);\n        if (light3T < t)\n        {\n            t = light3T;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = l3Norm;\n        }\n        \n        vec3 cubeNorm;\n        float cubeT = traceCube(curPos, curDir, cubeNorm);\n        if (cubeT < t)\n        {\n            t = cubeT;\n            normal = cubeNorm;\n            \n            if (randVals.x < GLASS_R)\n            {\n                materialType = REFLECTION;\n            }\n            else\n            {\n                materialType = REFRACTION;\n            }\n        }\n        \n        float fireRadius = 0.3 + randDir.x;\n        vec3 fireNorm;\n        float fireT = traceSphere(curPos, curDir, fireRadius, fireNorm);\n        if (fireT < t)\n        {\n            t = fireT;\n            normal = fireNorm;\n            color = drawFire(-0.5 + fragCoord.xy / iResolution.xy);\n            materialType = EMISSION;\n        }\n        \n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t)\n        {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y * 0.15).rgb;\n            normal = cylNorm;\n        }\n        \n        if (t != INF)\n        {\n            vec3 worldPos = t * curDir + curPos;\n            if (materialType == EMISSION)\n            {\n                fragColor.rgb = color;\n                break;\n            }\n            else if (materialType == DIFFUSE)\n            {\n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n                break;\n            }\n            else if (materialType == REFLECTION)\n            {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 0.0001;\n                \n                fragColor.rgb += mult * computeLight(worldPos, color, normal);\n            }\n            else if (materialType == REFRACTION)\n            {\n                bool isReflected;\n                curDir = refraction(curDir, normal, n1, n2, isReflected);\n                curPos = worldPos + curDir * 0.0001;\n                \n                vec4 fog = sampleFog(curPos, curDir);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a; \n                \n                if (isReflected == false)\n                {\n                    float tmp = n1;\n                    n1 = n2;\n                    n2 = tmp;\n                }\n            }\n        }\n        else\n        {\n            fragColor += mult * texture(iChannel1, curDir) * 0.3;\n            break;\n        }\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}