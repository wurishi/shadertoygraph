{"ver":"0.1","info":{"id":"csSfRK","date":"1689867872","viewed":33,"name":"Cloud shape function","username":"Fewes","description":"Small function for modeling volumetric clouds. Can generate cumulus and cumulonimbus-like shapes (and anything in-between).","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define saturate(o) clamp(o,0.0,1.0)\n#define sq(o) (o*o)\n\n#define PARAMS_LINEAR_RAMP  vec2(0.00, 0.00)\n#define PARAMS_CUMULUS      vec2(0.25, 0.90)\n#define PARAMS_CUMULONIMBUS vec2(0.70, 0.98)\n\n// x: Coverage signal [0, 1]\n// y: Height signal [0, 1]\n// shapeParams.x: Horizontal shape [0, 1]\n// shapeParams.y: Vertical shape [0, 1]\nfloat CloudShape(float x, float y, vec2 shapeParams)\n{  \n    //////////////////////////////////////////////////////////////////////\n    // !!! Ideally you should do this on the CPU in your application !!!\n    shapeParams.x *= shapeParams.y;\n    shapeParams.y = 1.0 / (1.0 - shapeParams.y);\n    //////////////////////////////////////////////////////////////////////\n    \n    float anvil = 1.0 - sq(abs(y - 0.5) * 2.0);\n\treturn saturate(x - anvil * shapeParams.x - pow(y, shapeParams.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy * vec2(aspect, 1.0);\n    \n    vec2 shapeParams = PARAMS_CUMULUS;\n    if (iMouse.x != 0.0)\n    {\n        shapeParams = saturate(iMouse.xy / iResolution.xy * vec2(aspect, 1.0));\n    }\n    \n    // Override shape params\n    //shapeParams = PARAMS_LINEAR_RAMP;\n    //shapeParams = PARAMS_CUMULUS;\n    //shapeParams = PARAMS_CUMULONIMBUS;\n    \n    // World cloud coverage signal. Usually represented by a 2D texture/noise function\n    float coverage = uv.x;\n    // Linear height within the cloud layer\n    float height = uv.y;\n    \n    float shape = CloudShape(coverage, height, shapeParams);\n\n    vec3 col = vec3(shape);\n    if (shape < 1e-3)\n    {\n        col = vec3(1,0,0);\n    }\n    \n    if (uv.x > 1.0)\n    {\n        col = vec3(0.0);\n    }\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}