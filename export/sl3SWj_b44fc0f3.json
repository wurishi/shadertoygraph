{"ver":"0.1","info":{"id":"sl3SWj","date":"1639837615","viewed":110,"name":"Snake Skin","username":"VABG","description":"Saw asnake texture on some site, thought I'd try reproducing it as it looked a lot like it was a shader. This is the result. Not perfect, I made some dumb decisions. \nROUNDNESS Looks good ok at integer values(0,1,2). \nNormals are a bit incorrect.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["snake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fast(vec2 v)\n{\n    v = (1./4320.) * v + vec2(0.25,0.);\n    float state = fract( dot( v * v, vec2(3571)));\n    return fract( state * state * (3571. * 2.));\n}\n\nvec2 rotate(vec2 uv, float r){\n    float cR = cos(r);\n    float sR = sin(r);\n    return vec2(cR*uv.x+ sR*uv.y, sR*uv.y-cR*uv.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 oUV = fragCoord/iResolution.x;\n    oUV.y += 0.0f;\n    oUV.x -= 0.5f;\n    float oX = sign(oUV.x);    \n    vec2 uv = oUV;\n    uv.x = sin(1.5f)*oUV.x;\n    // uv scaling     \n    uv *= 12.0f;\n    uv.y *= 2.5f;\n    uv.x = sin(uv.x/6.37f)*6.5f;\n    uv.x *= sin(oUV.x)*20.5f;    \n    uv.x *= .25f;\n    \n    \n    \n    // Uv rotate\n    uv = rotate(uv, 3.14f/4.0f);\n    vec2 ruv = fract(uv);\n    uv.x += cos(ruv.y - .49f)*ROUNDNESS +.12f;\n    uv.y += cos(ruv.x - .49f)*ROUNDNESS+.14f;\n    // UV ID\n    vec2 uvID = floor(uv);\n    // Local UVs\n    uv = fract(uv);\n    \n    //UV Based Normals\n    vec3 n = vec3((uv.x*2.0f)-1.0f, (uv.y*2.0f)-1.0f, 1.0f);\n    // Rotate to correct for previous rotation\n    n.xy = rotate(vec2(n.x, n.y), -3.14f/4.0f);\n    // YGradient\n    float yGradient = 1.0f - (n.y +1.0f)/2.0f;\n    // Flip x-normals based on side of UVs\n    n.x *= sign(-oUV.x);\n    // Multiply uvs for strength\n    n.y *= .4f;    \n    n.x *= .6f;    \n    // Multiply to center scale line\n    n.x *= 10.0f*(n.y+.5f)*(n.y+.5f)*1.0f;\n    // Fix limits\n    n.x = clamp(n.x, -1.0f, 1.0f);\n    n.x /= 3.0f;\n    // Scale edge UVs\n    vec2 sY = uv;\n    sY -= .004f;\n    sY *= 20.5f;\n    sY = clamp(sY, 0.0f, 1.0f);\n    \n    // Randoms\n    float r = fast(uvID);\n    \n    // Modify Random Y\n    n.y -= 0.4f*r-.1f;\n    \n    // New random from random\n    r *= 41.75891f;\n    r = fract(r);\n    // Modify random X\n    n.x += (r-.5f)*.3f;\n    \n    // Apply Scale Edge Modifications\n    n.y +=  (1.0f-(sY.x + sY.y)/2.0f)*2.0f;\n    n.x += (1.0f-(sY.x))*sign(oUV.x)*.5f;\n    n.x += (1.0f-(sY.y))*sign(-oUV.x)*.5f;\n\n    // Normalize\n    n = -normalize(n);\n\n    // Invert z\n    n.z *= -1.0f;\n    \n    // Make light\n    vec3 lightDir = vec3(0.5f, sin(iTime), 1.0f);\n    lightDir = normalize(lightDir);\n    \n    // Make cam\n    vec3 cam = vec3(0,0,1.0f);\n    \n    // Light source\n    float lit = clamp(dot(lightDir, n), 0.0f, 1.0f);\n    vec3 refl = reflect(lightDir, n);\n    float spec = pow(clamp(dot(lightDir, n), 0.0f, 1.0f),10.0f);\n    \n    // Snake colors\n    vec3 snekColor1 = vec3(.2f, 0.2f, .2f);\n    \n    // New randoms\n    r *= 53.6313f;\n    r = fract(r);\n    vec3 snekColor2 = vec3(.4f, .4f, .4f);\n    // Lerp colors\n    vec3 snekColor = mix(snekColor1, snekColor2, clamp(r*4.0f-1.5f, 0.0f, 1.0f));\n    // Specular Color\n    vec3 snekSpecColor = vec3(.6,.50f, .4f);\n    \n    // Combine colors\n    vec3 col = vec3(lit *snekColor) + vec3(spec*snekSpecColor)*.3f;\n    //col = vec3((n+1.0f)/2.0f);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define ROUNDNESS 1.","name":"Common","description":"","type":"common"}]}