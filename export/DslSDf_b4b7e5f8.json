{"ver":"0.1","info":{"id":"DslSDf","date":"1695645430","viewed":166,"name":"Lights out","username":"minghir","description":"Little puzzle game that might be unsolvable.","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["2d","game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float gSIZE(){return iResolution.x/12.2;}\n\nfloat butt(vec2 uv)\n{\n    uv*=mat2(.0,1.,-1.,.0);\n    float d = length(max(abs(uv)-.46,-0.025));\n    d = 1.26/(d*30.);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col_on = vec3(.0,.39,.3)*1.4;\n    vec3 col_off = vec3(.3,.3,.3)*1.2;\n    vec3 col_win = vec3(.0,.3,.3)*1.3;\n    vec3 col_out = vec3(.25,.25,.25)*1.1;\n    vec3 col = vec3(0.);\n    vec3 gcol = texelFetch(iChannel0,ivec2(fragCoord/gSIZE()),0).rgb;     \n    vec2 uv = fract(fragCoord/gSIZE())-.5;\n   \n    if(gcol.g == 1.){   \n        col = col_on*butt(uv);\n    }else if(gcol.g == 0.) {  \n            if( gcol.r == 0.) {\n                col = col_off*butt(uv);\n            }else{ \n                col = col_win*butt(uv);\n            }\n         }\n        else {\n            col = col_out*butt(uv);\n        }\n    fragColor = vec4(col*col*col,1);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//int puzzle1[25] = int[]( 1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);\nint wFrame = -1;\n\nfloat gSIZE(){return iResolution.x/12.2;}\nfloat random(vec2 co){ return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\nbool rand(vec2 uv){return random(uv*(iTime+1.))*10. >= 5.;}\n\nbool checkBox(vec2 uv){\n    vec2 aa = step(vec2(X_OFFSET,Y_OFFSET),vec2(uv));\n    vec2 bb = step(vec2(X_OFFSET+5.,Y_OFFSET+5.),vec2(uv));\n    return ( aa.x*(1.-bb.x)*aa.y*(1.-bb.y) != 0.);\n}\n\nbool check(){\n        for(int i=0+ int(X_OFFSET);i<5+ int(X_OFFSET);i++)\n            for (int j=0;j<5;j++)\n                 if( float( texelFetch(iChannel0,ivec2(i,j),0).gb ) == 1.) \n                     return false;\n    wFrame = iFrame;\n    return true; \n}\n\nvec3 getCol (ivec2 iuv){\n     ivec2 muv = ivec2(iMouse/gSIZE());\n     vec3 col = texelFetch(iChannel0,(iuv),0).rgb;  \n      if(!checkBox(vec2(muv))) return col;\n      if( col == vec3(1.,0.,0.) )  return col;\n      if( iFrame == wFrame )  return vec3(1.,0.,0.);\n      if( iMouse.w > 0.){\n                         if(iuv == ivec2(muv.x-1,muv.y) || \n                            iuv == ivec2(muv.x+1,muv.y) || \n                            iuv == ivec2(muv.x,muv.y+1) || \n                            iuv == ivec2(muv.x,muv.y-1) ||  \n                            muv == iuv)\n                col = vec3(float(col) == 0.);  \n      }\n     return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   ivec2 ifC = ivec2( fragCoord);\n   vec3 col;\n   check();\n   if(checkBox(fragCoord)){\n                 if( iFrame == 0 || ( iFrame == wFrame &&  iMouse.w > 0. )){\n                     //ifC.x -=int(X_OFFSET);\n                     //ifC.y -=int(Y_OFFSET);\n                     //col = vec3(float(puzzle1[(ifC.x*5)+ifC.y]));\n                     col = vec3(float(rand(fragCoord)));\n                  }else {\n                     col = vec3(getCol(ifC));\n                  }\n      }else{\n           col = vec3(0.25);\n      }\n    fragColor = vec4(col,1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define X_OFFSET 3.\n#define Y_OFFSET 1.\n","name":"Common","description":"","type":"common"}]}