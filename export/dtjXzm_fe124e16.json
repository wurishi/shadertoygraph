{"ver":"0.1","info":{"id":"dtjXzm","date":"1675875937","viewed":67,"name":"3d Music Visualizer","username":"MiniByte","description":"3d Music Visualizer - Techno Melodic - mix by MiniByte","likes":0,"published":3,"flags":64,"usePreview":0,"tags":["3d","music","visualizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldcGR4","filepath":"https://soundcloud.com/cristi-covlea/tehno-melodic-vol-01-mix-by-minibyte","previewfilepath":"https://soundcloud.com/cristi-covlea/tehno-melodic-vol-01-mix-by-minibyte","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// thanks for Techno Core - Kali\nfloat det = .001;\nvec3 objcol=vec3(0.);\nfloat snd;\n\n\nmat2 rot(float a) {\n\tfloat s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat fractal(vec3 p) {\n    vec3 c = p;\n    float m = 100.;\n    for(int i = 0; i < 10; i++) {\n\t\tp=abs(p + 1.) - abs( p - 1.) - p;\n        p=p / clamp(dot(p,p), 0.1, 1.) - c;\n    \tm=min(m, abs(length(p) - 3.5));\n    }\n    m = max(0., 1. - m);\n    objcol = abs(p) * .6;\n    return m * m * (.2+snd);\n}\n\nfloat de(vec3 p) {\n    p.yz *= rot(iTime);\n    p.xz *= rot(.2);\n    float f = fractal(p);\n    //\tfloat d = length(p) - 3.5 + f * 1.5 - snd * 3.;\n\tfloat d = length(p) - 3.9 + f * 2.1 - snd * 1.;\n    //d = min(d, length(p.xy) - .25);\n\t//d = min(d, length(p.yz) - .25);\n\t//d = min(d, length(p.xz) - .25);\n    d = min(d, length(p.xy) - .55);\n\td = min(d, length(p.yz) - .55);\n\td = min(d, length(p.xz) - .55);\n    //return (d - f * .5) * .5;\n    return (d - f * .3) * .4;\n}\n\nvec3 march(vec3 from, vec3 dir) {\n\tvec3 col = vec3(0.), p;\n    float td = 0., d;\n    for (int i = 0; i < 150; i++) {\n    \tp = from + td * dir;    \n\t\td = de(p);\n        td += max(det, abs(d));\n\t\tif (td > 20.) break;\n        col += objcol * exp(-.005 * td * td);\n    }\n    vec3 rescol = col * .01 * (.3 + snd * 1.5);\n    return rescol;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    snd = texture(iChannel0,vec2(.15)).r;\n    vec2 p = (fragCoord - iResolution.xy * .5) / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 dir = normalize(vec3(p, .7));\n    float t = iTime*.5;\n    vec3 from = vec3(sin(t) * 2., 0., -10.);\n    from.xz *= rot(t);\n    dir.xz *= rot(t);\n\tdet += max(0. ,5. - iTime)*.02;\n    vec3 col = march(from, dir);\n    col += pow(abs(.5 - fract(dir.x * 20.)) * 2., 10.) * .2;\n    col += pow(abs(.5 - fract(dir.y * 20.)) * 2., 10.) * .2;\n    float spec = pow(texture(iChannel0, vec2(floor(dir.x*20.)/20. * .5 + .5, .1)).r,2.);\n\tvec2 sq = abs(.5-fract(dir.xy*20.));\n    col+=abs(1.-length(max(vec2(0.),abs(sq.xy)-.1)))*step(dir.y+.4,spec)*length(fract(dir.xy*10.))*.4;\n    col=max(col, vec3(.5, .2, 0.) - smoothstep(0.,.03,abs(dir.y - spec + .35)));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}