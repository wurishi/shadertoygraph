{"ver":"0.1","info":{"id":"ltB3WW","date":"1428999400","viewed":408,"name":"Newton Fractal 3-4-5","username":"tholzer","description":"Newton fractal with 3 or 4 or 5  symmetry formula (change #define NEWTON #).\nPress mouse button to change formula constants.","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["2d","fractal","number","attractor","complex","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3RN","filepath":"https://soundcloud.com/robotaki/tron-legacy-daft-punk-derezzed","previewfilepath":"https://soundcloud.com/robotaki/tron-legacy-daft-punk-derezzed","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n//---------------------------------------------------------\n// Shader:   Newton5Fractal.glsl  by tholzer\n// Newton fractal with 3 or 4 or 5  symmetry (change #define NEWTON #).\n// Press mouse button to change formula constants.\n//           v1.0  2015-04-14\n//           v1.1  2017-04-06  define NEWTON added\n// tags:     2d, attractor, newton, fractal, complex, number\n// info:     http://en.wikipedia.org/wiki/Newton_fractal\n//---------------------------------------------------------\n\n#define ITER 12\n#define NEWTON 5   // 2,3,4,5\n\n//---------------------------------------------------------\nvec2 cinv(in vec2 a)            { return vec2(a.x, -a.y) / dot(a, a); }\n\nvec2 cmul(in vec2 a, in vec2 b) { return vec2(a.x*b.x - a.y*b.y,   a.x*b.y + a.y*b.x); }\n\nvec2 cdiv(in vec2 a, in vec2 b) { return cmul(a, cinv(b)); }\n//---------------------------------------------------------\nvec2 newton( in vec2 z )\n{\n  for (int i = 0; i < ITER; i++)\n  {\n    vec2 z2 = cmul(z, z);\n    vec2 z3 = cmul(z2, z);\n    vec2 z4 = cmul(z2, z2);\n    vec2 z5 = cmul(z3, z2);\n      \n//---> change z calculation by uncomment different lines\n#if NEWTON==2\n    z -= cdiv(z3 - 1.0, 3.0 * z2);                      // original: z^3 - 1  / ( 3*z^2)\n#elif NEWTON==3\n    z -= cdiv(z3 - 0.5+0.05*iMouse.y, (0.5+0.01*iMouse.x) * z2);  // z^3 - my / (mx*z^2)\n#elif NEWTON==4\n    z -= cdiv(z4 - 0.5+0.05*iMouse.y, (0.5+0.01*iMouse.x) * z3);  // z^4 - my / (mx*z^3)\n#elif NEWTON==5\n    z -= cdiv(z5 - 0.5+0.05*iMouse.y, (0.5+0.1*iMouse.x) * z4);  // z^5 - my / (mx*z^4)\n#endif\n  }\n  return z;\n}\n//---------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n  uv.x *= iResolution.x / iResolution.y;\n  vec2 z = newton(uv);\n  fragColor = vec4(z.x, z.y, -z.y, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}