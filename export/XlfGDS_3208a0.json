{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"float Random_1(vec2 uv, float seed)\n{\n\treturn fract(uv.x * uv.y * seed);\n}\n\nfloat Random_Seed(vec2 uv, float seed)\n{\n    //Seed normalization experiments (all of these look bad)\n\t//float fixedSeed = fract(seed / 491.0);\n    //float fixedSeed = mod(seed, 491.0) / 491.0;\n    //float fixedSeed = tan(fract(seed));\n    //float fixedSeed = fract(tan(1.0 / fract(seed)));\n    //float fixedSeed = tan(1.0 / seed);\n    //float fixedSeed = fract(seed);\n    float fixedSeed = abs(seed) + 1.0;\n    \n\treturn fixedSeed;\n}\n\nfloat Random_StackOverflow(vec2 uv, float seed)\n{\n    const vec2 r = vec2(\n     \t23.1406926327792690,  \t// e^pi (Gelfond's constant)\n     \t2.6651441426902251\t\t// 2^sqrt(2) (Gelfondâ€“Schneider constant)\n   \t);\n  \treturn fract( cos( mod( 123456789.0, 1e-7 + 256.0 * dot(uv,r) ) ) );  \n}\n\nfloat Random_Seeded(vec2 uv, float seed)\n{\n    //Fix our seed to never be negative, and never be near zero\n    float fixedSeed = abs(seed) + 1.0;\n    \n    //Mix our seed into the irrational vector\n    vec2 r = vec2(23.1406926327792690, 2.6651441426902251) * fixedSeed;\n    \n    //Dot product with the irrationals (add 1 to ensure uv is not near zero)\n    float x = dot(uv + vec2(1, 1), r);\n \n    //This is the same as the Random_StackOverflow last line, but produces very bad noise\n    //return fract( cos( mod( 123456789.0, 1e-7 + 256.0 * x ) ) ); \n    \n    //Regular but very complicated pattern\n    //return fract(x);\n    \n    //This is a little more random\n    //return fract(sin(x) * 100.);\n    \n    //So a bigger number must be a lot more random!\n    return fract(sin(x) * 43758.5453);\n}\n\n//Reddit suggestion (https://www.reddit.com/r/devblogs/comments/2wridq/random_gibberish_generating_random_numbers_on_the/cotve0i)\nfloat Random_Cosmologician(vec2 uv, float seed)\n{\n    vec3 r = vec3(12.345, 21.098, 38.902);\n\tvec3 p3 = vec3(uv, seed);\n\treturn fract(sin(dot(r, p3)) * 12345.67);\n}\n\nfloat Random_Final(vec2 uv, float seed)\n{\n    float fixedSeed = abs(seed) + 1.0;\n\tfloat x = dot(uv, vec2(12.9898,78.233) * fixedSeed);\n\treturn fract(sin(x) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = vec4(\n        Random_Final(uv, iTime * 2.0),\n        Random_Final(uv, iTime * 3.0),\n        Random_Final(uv, iTime * 4.0),\n        1\n    );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XlfGDS","date":"1424578545","viewed":268,"name":"Random Experiments","username":"martin","description":"Experiments in random number generation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["random"],"hasliked":0,"parentid":"","parentname":""}}