{"ver":"0.1","info":{"id":"WlSfRD","date":"1598379790","viewed":1411,"name":"sdf 2D lights and shadows ","username":"danhel95","description":"shadows for 2D sdf ","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["2d","tutorial","shadow","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// learning turotial 3 shadows and light in 2D !\n\n// 2d shadow based on https://www.shadertoy.com/view/XdjGDm by @DiLemming\n// same structure but different functions implementation.\n\n// click to move the circle\n\n#define STEPS 10.\n#define  PI 3.1415926;\n#define SCALE 1000.\n\n\nstruct ray {\n\tvec2 o;\n\tvec2 d;\n\tvec2 t;\n};\n\nmat2 R2(float t) {\n    float s = sin(t);\n    float c = cos(t);\n    return mat2(c,  -s, s, c);\n\n}\n\n\n\nfloat square(vec2 p, vec2 pos, float sz) {\n\tvec2 q = p - pos ;\n    q = R2(iTime)*q;\n    float f = max(q.x*q.x , q.y*q.y ) / sz;\n    return f;\n}\nfloat circle(vec2 p, vec2 pos, float sz) {\n    vec2 q = p - pos ;\n    return dot (q, q)  / sz ;\n}\n\n\nfloat scene (in vec2 p) {\n\n    vec2 m = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n\tvec2 cpos = m.xy ;\n    float teta = atan(m.y,m.x );\n    vec2 spos = vec2 (.3*sin(.7*iTime)+.1,.2*cos(.3*iTime)+.2) ;\n    spos = R2(.9*iTime+ .3)*spos;\n    float c = circle(p,cpos,3.+ 1.*cos(teta*30.+ iTime));\n    float f = square(p, spos, 2.);\n\tf = min (f, c ) * SCALE;\n\treturn exp(-.5*f)/(f + 1.);\n}\n\nray make_ray (in vec2 origin, in vec2 target) {\n\tray r;\n\n\tr.o = origin;\n\tr.d = (target - origin) / STEPS;\n\tr.t = target;\n\n\treturn r;\n}\n\nvoid march (inout ray r) {\n    for (float i = 0.; i < 1.; i += .5/STEPS) {\n        float f = scene (r.o);\n        f = .2* pow((1. + f*f), -10.) ;\n        r.o += f * r.d;\n    }\n    r.o -= r.t ;\n\n}\n\nvec3 light (in ray r, in vec3 color) {\n    float d = dot (r.o, r.o);\n\t//vec3 col =   color / (5.5* d + 1.5*color);\n\tvec3 col =   .1*color*exp(2./(1.5*d + 3.*color));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.);\n\tray r0 = make_ray (uv, vec2 (.7, .8));\n    march(r0);\n    vec3 sun = light (r0, vec3 (0.6, 0.2, 0.1) );\n\t//ray r1 = make_ray (uv, vec2 (-1., 1.));\n    //march(r1);\n    //sun += light (r1, vec3 (0.3, 0.2, 0.6) );\n    col += sun;\n\tfloat f = clamp( 1000.*scene(uv)-500.,1.,10.)  ;\n    col.r *= f;\n    col = pow(col, vec3(0.4545)); // gamma correction\n\tfragColor = vec4 (col,1.);\n}\n","name":"Image","description":"","type":"image"}]}