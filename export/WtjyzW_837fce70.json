{"ver":"0.1","info":{"id":"WtjyzW","date":"1593853843","viewed":231,"name":"Simple Liquid Flow Simulation","username":"samzanemesis","description":"Something I have made for a friend as proof of concept\n\nClick to add noise\n\nGaussian term from https://www.shadertoy.com/view/Xltfzj\n","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["simulation","water","flow","liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//@samzanemesis\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.x;\n\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    float fWave = 1.0-distance(col.xy, vec2(0.5,0.5));\n    \n    fWave -= col.z;\n    \n    // Output to screen\n    //fragColor = vec4(fWave,fWave,fWave,1.0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//@samzanemesis\n\nfloat sdCircle( vec2 p, float s )\n{\n  return (length(p)-s) > 0.0 ? 0.0 : 1.0;\n}\n\nvec3 MakeBallWithVelocity(vec2 p)\n{\n    vec2 vPos = p + vec2( sin( iTime * 2.5 ), cos (iTime ) ) *0.5;\n    vec2 vPosLast = p + vec2( sin( iTime * 2.5 - iTimeDelta ), cos ( (iTime - iTimeDelta) ) ) *0.5;\n    \n    float fBall = sdCircle(p + vPos, 0.1) ;\n   \n    \n    vec2 vVelocity = ( ( (vPos - vPosLast) ) ) * fBall;\n    \n    \n    return vec3(vVelocity  * 15.0,fBall);\n}\n\nvec3 FastGaussian(vec2 uv)\n{\n    float Pi = 6.28318530718; // Pi*2\n    \n    // GAUSSIAN BLUR SETTINGS {{{\n    float Directions = 8.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)\n    float Quality = 1.0; // BLUR QUALITY (Default 4.0 - More is better but slower)\n    float Size = 25.0; // BLUR SIZE (Radius)\n    // GAUSSIAN BLUR SETTINGS }}}\n   \n    vec2 Radius = Size/iResolution.xy;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    // Pixel colour\n    vec3 Color = texture(iChannel0, uv).xyz;\n    \n    // Blur calculations\n    for( float d=0.0; d<Pi; d+=Pi/Directions)\n    {\n\t\tfor(float i=1.0/Quality; i<=1.0; i+=1.0/Quality)\n        {\n\t\t\tColor += texture( iChannel0, uv+vec2(cos(d),sin(d))*Radius*i).xyz;\t\t\n        }\n    }\n    \n    // Output to screen\n    Color /= Quality * Directions;\n    return Color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Initialization hack\n    if( iTime < 0.1 )\n    {\n        fragColor = vec4(0.5,0.5, 0.0, 1.0);\n        return;\n    }\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p = uv - vec2(0.5, 0.25);\n    \n    vec2 vVelocityField = texture(iChannel0, uv).xy ;\n    vVelocityField = texture(iChannel0, uv - (FastGaussian(uv).xy - 0.5 ) * 0.025 ).xy; // blur this tho\n\n    //Noise\n    vVelocityField = ( (vVelocityField - 0.5)  ) + 0.5;\n    \n    //Click to add more noise\n    //if(iMouse.w > 0.01)\n       \tvVelocityField += (texture(iChannel2, vec3(uv, iTime * 0.1) * 3.0 ).xy - 0.5 ) * 0.01;\n    \n    vec3 fBall = MakeBallWithVelocity( p );\n    \n    vec3 vColor = vec3( mix( vVelocityField + fBall.xy, vec2(0.5,0.5), iTimeDelta * 5.0), fBall.z);\n        \n    fragColor = vec4( clamp(vColor,0.0,1.0) ,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}