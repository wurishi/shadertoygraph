{"ver":"0.1","info":{"id":"wtjBDV","date":"1634687746","viewed":97,"name":"Iterative Diffusion","username":"jts","description":"Trying to imitate a skin diffusion profile through local sampling and feedback","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["diffusion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Gamma(vec3 col)\n{\n    return pow(col, vec3(1.0/2.2));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    fragColor = vec4(Gamma(col),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 Degamma(vec3 col)\n{\n    return pow(col, vec3(2.2));\n}\n\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    //vec2 center = iMouse.xy;\n    vec2 center = iResolution.xy * 0.5;\n    float centerDist = distance(coord, center);\n    \n    if (centerDist < 2.0)\n    {\n        color = vec4(7, 7, 7, 1);\n    }\n    else\n    {\n        color = vec4(0, 0, 0, 0);\n        \n        vec2 uv = coord / iResolution.xy;\n        vec2 d = 1.0 / iResolution.xy;\n        \n        color += texture(iChannel0, uv + vec2(d.x, 0));\n        color += texture(iChannel0, uv + vec2(0, -d.y));\n        color += texture(iChannel0, uv + vec2(-d.x, 0));\n        color += texture(iChannel0, uv + vec2(0, d.y));\n        \n        color += texture(iChannel0, uv + vec2(d.x, d.y)) * 0.707;\n        color += texture(iChannel0, uv + vec2(d.x, -d.y)) * 0.707;\n        color += texture(iChannel0, uv + vec2(-d.x, d.y)) * 0.707;\n        color += texture(iChannel0, uv + vec2(-d.x, -d.y)) * 0.707;\n        \n        color /= 4.0 + (4.0 * 0.707);\n        color.rgb *= vec3(0.995, 0.965, 0.915);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}