{"ver":"0.1","info":{"id":"DlfGDs","date":"1672638002","viewed":158,"name":"ECCO :: Z0NES","username":"MONEY_MACHINA","description":"Edit of https://www.shadertoy.com/view/XsXXDn","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["silexars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://www.pouet.net/prod.php?which=57245\n// If you intend to reuse this shader, please add credits to 'Danilo Guanabara'\n\n#define t iTime\n#define r iResolution.xy\n\n/* Vector is [R, G, B, W] */\n//#define COLOUR * vec4(0.5, 5.0, 10.0, 1.0) //Ocean\n#define COLOUR * vec4(1.1, 1.0, 3.0, 1.0) //Eco\n//#define COLOUR * vec4(100.0, 5.0, 1.0, 1.0) //Sunkist\n//#define COLOUR * vec4(2.0, 0.94, 0.96, 1.0) //RSOD\n//#define COLOUR * vec4(1.1, 3.0, 2.0, 1.0) //Greenflow\n//#define COLOUR * vec4(1.0, 1.0, 1.0, 1.0) //Default\n\nconst float SPEED = .4;\nconst float SCALE_WAVE = 9.; //Scale of wave effect\nconst float XPOS = .72; //X position of the origin, where 0.5 is center\nconst float YPOS = .75; //Y position of the origin, where 0.5 is center\nconst float COLOURSHIFT = .02; //Controls chromatic aberration\nconst float BRIGHTNESS = .014;\n\nconst int PASSES = 2;\n\n//Controls the time offset between passes\nconst float SYNC_OFFSET = 1.0; \n\n//Controls the difference in time scale of passes, where 2 is 2x speed, and 0.5 is 0.5x speed\n//This effectively controls the speed of subsiquent passes, allowing for syncopation.\nconst float SYNC_SCALE = 1.0; \n\nvec4 getFrag(vec2 fragCoord, float tdelta, float tscale, float wobble) {\n    vec3 c;\n    float l,z=((t + tdelta) * SPEED) * tscale;\n    for(int i=0;i<3;i++) {\n        vec2 uv,p=fragCoord.xy/r;\n        uv=p;\n        p.x-=XPOS;\n        p.y-=YPOS;\n        p.x*=r.x/r.y\n            + sin(uv.y + t * 0.7) * wobble\n            + exp(cos(uv.x + t * 0.67777)) * wobble\n        ;\n        z+=COLOURSHIFT;\n        l=length(p);\n        uv+=p/l*(sin(z)+1.)*abs(sin(l*SCALE_WAVE-z));\n        c[i]=BRIGHTNESS/length(mod(uv,1.)-.5);\n    }\n    return vec4(c/l,t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec4 frag = getFrag(fragCoord, 0.0, 1.0, 0.0);\n    \n    for(int i = 1; i < PASSES; i++)\n        frag += getFrag(fragCoord, SYNC_OFFSET * float(i), (float(i) * SYNC_SCALE) / float(i), 0.2);\n    \n    frag = frag COLOUR;\n    \n    fragColor = frag;\n}","name":"Image","description":"","type":"image"}]}