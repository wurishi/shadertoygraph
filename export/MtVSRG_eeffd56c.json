{"ver":"0.1","info":{"id":"MtVSRG","date":"1484846017","viewed":969,"name":"Spinning Tiles","username":"ttg","description":"Rotating texture feedback on cells in a grid","likes":24,"published":3,"flags":32,"usePreview":0,"tags":["fractal","feedback","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nSpinning Tiles\nCopyright 2017 Theron Tarigo\n\nRotating texture feedback on cells in a grid\n\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 s = texture(iChannel0, uv).rg;\n    fragColor.rgb = vec3( s.r - s.g )*0.125+0.5;\n    // fragColor = .3*s.xyxy; // color version suggested by Fabrice\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\nSpinning Tiles\nCopyright 2017 Theron Tarigo\n\nRotating texture feedback on cells in a grid\n\n*/\n\nfloat squaresize;\n\nivec2 squaresel(vec2 frc) {\n    return ivec2(floor(frc/squaresize+vec2(0.,0.5)));\n}\n\nvec2 squareuv(vec2 frc) {\n    return fract(frc/squaresize+vec2(0.,0.5))*2.-1.;\n}\n\nvec4 squaresamp(ivec2 sq, vec2 uv) {\n    return texture(iChannel0, (((uv*0.5+0.5)+vec2(sq)-vec2(0.,0.5))*squaresize)/iResolution.xy + vec2(0.5));\n}\n\nbool squarefit(ivec2 sq) {\n    vec2 d = (abs(vec2(sq)+vec2(0.5,0.))+vec2(0.5,0.5))*squaresize - 0.5*iResolution.xy;\n    return max(d.x,d.y)<=0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    squaresize = 120.*pow(iResolution.y/1080.,0.5);\n    vec2 frc = fragCoord.xy - 0.5*iResolution.xy;\n    ivec2 sq = squaresel(frc);\n    vec2 uv = squareuv(frc);\n    fragColor.a = 1.;\n    fragColor.rgb = vec3(0.);\n    if (!squarefit(sq)) return;\n    float a = 0.1*(float(iFrame)/(60.+float(sq.x))-float(sq.y));\n    mat2 trans = 1.2*mat2(cos(a),-sin(a),sin(a),cos(a));\n    fragColor.rgb = 0.9*squaresamp(sq, trans*uv).rgb;\n    ivec2 cb = sq+100-((sq+100)/2)*2;\n    fragColor.r += (cb.x==cb.y ? 0.5 : 0.0);\n    fragColor.g += (cb.x!=cb.y ? 0.5 : 0.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Added, 2019, for compatibility with some devices.\n#define LINEAR_FILTER_CONFIG  true,true,true,true\n\n\n/* Linear Filtering Shim by Theron Tarigo, 2019.\n   https://www.shadertoy.com/view/tssXWf         */\nconst struct LINEARFILTER_T {\n  bool iChannel0, iChannel1, iChannel2, iChannel3;\n} LINEARFILTER = LINEARFILTER_T(LINEAR_FILTER_CONFIG);\n\nconst struct SAMPLERINDEX_T {\n  int iChannel0, iChannel1, iChannel2, iChannel3;\n} SAMPLERINDEX = SAMPLERINDEX_T(0,1,2,3);\n\nvec4 textureLinearPix (sampler2D sampler, vec2 U) {\n  return mix(mix(\n      texelFetch(sampler,ivec2(U)+ivec2(0,0),0),\n      texelFetch(sampler,ivec2(U)+ivec2(1,0),0),\n    fract((U).x)),mix(\n      texelFetch(sampler,ivec2(U)+ivec2(0,1),0),\n      texelFetch(sampler,ivec2(U)+ivec2(1,1),0),\n    fract((U).x)),fract((U).y));\n}\n\n#define textureLinear(sampler,P) textureLinearPix(sampler, \\\n    (P)*iChannelResolution[SAMPLERINDEX.sampler].xy-vec2(.5))\n\n#define texture(sampler,P) ( LINEARFILTER.iChannel0 ? \\\n    textureLinear(sampler,P) \\\n  : texture(sampler,P) )\n// End of Linear Filtering Shim\n","name":"Common","description":"","type":"common"}]}