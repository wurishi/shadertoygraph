{"ver":"0.1","info":{"id":"XcSSRm","date":"1706154107","viewed":69,"name":"SHADOWS","username":"Shwag","description":"Using a second ray march to detect shadows","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst vec3 LIGHT_POS = vec3(2,2,0);\n\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\nstruct Surface{\n    float sd;\n    vec3 col;\n};\n\n\nSurface sdFloor(vec3 p, vec3 color, float h) {\n  Surface s;\n  s.sd = p.y + h;\n  s.col = color;\n  return s;\n}\n\nSurface sdBox( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 trans)\n{\n  p = (p - offset) * trans;\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\n\nSurface sdSphere(vec3 p, vec3 offset, float radius, vec3 color){\n    return Surface(length(p-offset)-radius, color);\n}\n\n\nSurface opU(Surface s1, Surface s2){\n    if(s1.sd > s2.sd){\n        return s2;\n    }\n    return s1;\n}\n\nSurface sdScene(vec3 p) {\n  vec3 floorColor = vec3(mod(floor(p.x) + floor(p.z), 2.0));\n  //vec3 floorColor = vec3(0,1,1);\n  //floorColor *= vec3(0,1,1);\n  Surface co = sdFloor(p, floorColor,2.);\n  \n  Surface box1 = sdBox(p, vec3(1,1,1), vec3(-1, 0, 0), vec3(1, 0, 0),rotateY(iTime)*rotateX(iTime));\n  co = opU(co, box1);\n  \n  //Surface orb = sdSphere(p,vec3(-1,sin(iTime),0.), 1., vec3(1,0,0));\n  //co = opU(co,orb);\n  \n  Surface light = sdSphere(p, LIGHT_POS+vec3(.5,.5,0.), .3, vec3(1,1,0));\n  co = opU(co, light);\n  \n  return co;\n}\n\nvec3 calcNormal(vec3 p) {\n  vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n  float r = 1.; // radius of sphere\n  return normalize(\n    e.xyy * sdScene(p + e.xyy).sd +\n    e.yyx * sdScene(p + e.yyx).sd +\n    e.yxy * sdScene(p + e.yxy).sd +\n    e.xxx * sdScene(p + e.xxx).sd);\n}\n\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end){\n    float depth = start;\n    Surface co;\n    \n    for(int i=0; i<MAX_MARCHING_STEPS; i++){\n        vec3 p = ro+rd*depth;\n        co = sdScene(p);\n        depth+=co.sd;\n        if(co.sd<PRECISION || depth>end){\n            break;\n        }\n    \n    }\n    \n    co.sd = depth;\n    \n    return co;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n\n  vec3 col = vec3(0);\n  \n  vec3 ro = vec3(0,0,10);\n  vec3 rd = normalize(vec3(uv,-1));\n  Surface co = rayMarch(ro,rd,MIN_DIST,MAX_DIST);\n  \n  if (co.sd > MAX_DIST) {\n      col = vec3(.3); // ray didn't hit anything\n  } else {\n \n  \n      vec3 p = ro + rd*co.sd;\n      vec3 normal = calcNormal(p);\n      vec3 lightDirection = normalize(LIGHT_POS-p);\n      float lightDistance = length(LIGHT_POS-p);\n      \n      //calc shadow\n      Surface shadow = rayMarch(p+normal*.01,lightDirection,0.,lightDistance);\n      \n      float dif = clamp(dot(normal,lightDirection),0.,1.);\n      \n      //apply diffusion\n      col = co.col * vec3(dif);\n      \n      //Magic Shadow Constant\n      float MGC = 10.;\n      \n      //If shadow ray hit something before the lighsource\n      if(shadow.sd < lightDistance){\n          //Mutiply the distance from the object that blocked the ray\n          //Divide by an amount to control the effect\n          col *= vec3(shadow.sd/MGC);\n      }\n      \n      //col = vec3(shadow.sd);\n\n      \n  }\n\n  // Output to screen\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}