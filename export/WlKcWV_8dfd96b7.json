{"ver":"0.1","info":{"id":"WlKcWV","date":"1611796229","viewed":80,"name":"UVRailed","username":"SamGage","description":"Minimal clone of Unrailed.\n\nCONTROLS:\n - Arrow keys to move (you cannot walk into the train or over water)\n - Spacebar to drop track\n\nINSTRUCTIONS:\n - Collect track pieces from the middle train wagon\n - Drop track pieces to create a path for the train","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["game"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/************************************************************************\n*   CONTROLS:\n*      - Arrow keys to move (you cannot walk into the train or over water)\n*      - Spacebar to drop track\n*\n*   INSTRUCTIONS:\n*      - Collect track pieces from the middle train wagon\n*      - Drop track pieces to create a path for the train (spacebar)\n*      - Try to get all the way to the righthand side\n*\n*************************************************************************/\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/(iResolution.xy*32.);\n        \n    vec2 p = floor(fragCoord/32.);\n    fragColor = texture(iChannel0, uv);\n    \n    //\n    float player = sign(fragColor.w);\n    float soil = fragColor.y;\n    float water = 1.-soil;\n    float track = max(fragColor.x, 0.);// ((p.y == 6. && p.x >= 20.) ? 1.: 0.));\n    float train = min(fragColor.z * 10.,1.);\n    float trainFront = min(max((fragColor.b-0.8),0.) * 100.,1.);\n    train = max(train-trainFront,0.);\n    player = max(player-(train+trainFront),0.);\n    track = max(track - (train+trainFront+player),0.);\n    water = max(water - (train+trainFront+track),0.);\n    soil = max(soil - (train+trainFront+track+player),0.);\n   \n    fragColor =vec4(\n    soil*vec3(0.5,0.7,0.1)+\n    track*vec3(0.7,0.7,0.7)+\n    train*vec3(0.8+fragColor.z*0.2,0.6+fragColor.z*0.3,0.4+fragColor.z*0.4)+\n    trainFront*0.5*vec3(0.7,0.4,0.3)+\n    water*vec3(0.3,0.5,1.0)+\n    player*vec3(1.0,fragColor.w,0.5),\n    1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TINYX (1.1/ iResolution.x)\n#define TINYY (1.1/ iResolution.y)\n\n#define KEY_LEFT  37.0\n#define KEY_UP    38.0\n#define KEY_RIGHT 39.0\n#define KEY_DOWN  40.0\n#define KEY_ACTION 32.0\n\nfloat isPressed(float key)\n{\n    float pressed = texture( iChannel2, vec2((key + 0.5) / 256.0,0.25) ).x;\n    return pressed;\n}\n\nvec2 joyDirection()\n{\n    if(isPressed(KEY_RIGHT) > 0.0)\n    {\n        return vec2(1,0);\n    }\n    if(isPressed(KEY_LEFT) > 0.0)\n    {\n        return vec2(-1,0);\n    }\n    if(isPressed(KEY_UP) > 0.0)\n    {\n        return vec2(0,1);\n    }\n    if(isPressed(KEY_DOWN) > 0.0)\n    {\n        return vec2(0,-1);\n    }\n    return vec2(0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tinyX = TINYX;\n    float tinyY = TINYY;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 p = floor(fragCoord); //Pixel coordinate\n\n    if(iFrame < 2) //Setup because I can't upload textures\n    {\n        fragColor = round(texture(iChannel1, uv*5.+vec2(0.23,0.2))*vec4(0.,1.08,0.9,0.));\n        fragColor = fragColor.xywz;\n        fragColor.w = p == vec2(6,4) ? 1.: 0.;\n        \n        if(p.x <= 6.&& p.y == 2.)\n        {\n            fragColor = vec4(1.,1.,0.,0.);\n        }\n        if(p.x==0.)\n        {\n        fragColor.y = 1.;\n        }\n        if(p.x >= 0. && p.x <= 3.)\n        {\n            if(p.y == 2.)\n                fragColor = vec4(1.,0.,(p.x+1.)/4.,0.);\n            else if(abs(p.y-2.)<4.)\n                fragColor.x /= 2.;\n        }\n        else if(p.y < 2.)\n            fragColor.x /= 2.;\n        fragColor.y = max(fragColor.y,sign(fragColor.z));\n        \n        if(p.x >= 20. && p.x <= 22.)\n        {\n            fragColor.y = 1.;\n        }\n    }\n    else //Actual game\n    {\n        vec2 joyDir = joyDirection();\n        vec4 col = texture(iChannel0, uv);\n        \n        //Unpause game when player first moves\n        if(col.w == 0. && length(joyDir) > 0.)\n        {\n            col.w = -1.;\n        }\n        \n        //Get neighbours\n        vec4 col00 = texture(iChannel0, uv-vec2(-tinyX,-tinyY));\n        vec4 col01 = texture(iChannel0, uv-vec2(-tinyX,0.));\n        vec4 col02 = texture(iChannel0, uv-vec2(-tinyX,tinyY));\n        vec4 col10 = texture(iChannel0, uv-vec2(0.,-tinyY));\n\n        vec4 col12 = texture(iChannel0, uv-vec2(0.,tinyY));\n        vec4 col20 = texture(iChannel0, uv-vec2(tinyX,-tinyY));\n        vec4 col21 = texture(iChannel0, uv-vec2(tinyX,0.));\n        vec4 col22 = texture(iChannel0, uv-vec2(tinyX,tinyY));\n        \n        //Get max neighbour values\n        vec4 max4 = max(col01,max(col10,max(col12,col21)));\n            \n        //Get total neighbour values\n        vec4 tot8 = col00+col01+col02+col10+col12+col20+col21+col22;\n        vec4 tot4 = col01+col10+col12+col21;\n            \n        //Move player every 20 frames\n        if(iFrame % 20 == 0)\n        {   \n            //Get source and destination cells for movement direction\n            vec4 colM = texture(iChannel0, uv-(vec2(tinyX,tinyY)*sign(joyDir)));\n            vec4 colN = texture(iChannel0, uv+(vec2(tinyX,tinyY)*sign(joyDir)));\n            \n            if(length(joyDir)>0.)\n            {\n                if(col.y > 0. && colM.w > 0. && col.z <= 0.1)\n                {\n                    col.w = colM.w;\n                }\n                else if(colN.y > 0. && colN.z <= 0.1)\n                {\n                    col.w = -1.;\n                }\n            }\n            if(col.x == 0. && isPressed(KEY_ACTION) > 0. && col.w > 0.5 && tot4.x == 1. && tot8.x <= 2.)\n            { \n                col.x = 1.;\n                col.w -= 0.1;\n            }\n            if(col.w > 0. && tot8.z > 1.)\n            {\n                col.w = 1.;\n            }\n        }\n        \n        //Move train every 120 frames once player has moved\n        if(iFrame % 120 == 0 && col.w != 0.)\n        {\n            //Check there is track\n            if(col.x>0.5)\n            {\n                if(abs(max4.z - 1.)<0.1 && col.z < 0.1)\n                {\n                    //Set to engine if this is an empty track with an engine next to it\n                    col.z = 1.;\n                }\n                else\n                {\n                    //Iterate through wagons\n                    col.z = (col.z*5.-1.) * 0.2;\n                }\n            }\n        }\n        fragColor = col;\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}