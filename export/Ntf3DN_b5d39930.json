{"ver":"0.1","info":{"id":"Ntf3DN","date":"1622064576","viewed":147,"name":"float logger","username":"4eckme","description":"IT DISPLAY APPROXIMATE VALS\n\nTo use logger u need copy&paste:\n1) const DS\n2) funcs DOT, DRAW, LOG\n\nUse:\nLOG(3.14, 0, fragColor, fragCoord);\nLOG(2.71828, 1, fragColor, fragCoord);\nLOG(4.20, 2, fragColor, fragCoord);\nLOG(1000000.0, 4, fragColor, fragCoord);","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["glsl","numbers","float","log","console","logger","logging"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// DOT SIZE\nconst int DS=3;\n// DRAW DOT\nbool DOT(int x, int y, ivec2 p)\n{\n    return x==int(p.x) && y==int(p.y);\n}\n// DRAW NUM\nbool DRAW(int i, int sx, int sy, ivec2 p){\n\n    //ivec2 p = ivec2(fragCoord)/DS;\n    \n    if (i==0) return//Num 0\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)\n    ;\n\n    if (i==1) return//Num 1\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+2,sy+2,p)||\n    DOT(sx+2,sy+3,p)||\n    DOT(sx+2,sy+4,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+1,sy+4,p)\n    ;\n    \n    if (i==2) return//Num 2\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+2,sy+3,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+2,sy+5,p)\n    ;\n    \n    if (i==3) return//Num 3\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)||\n    DOT(sx+2,sy+3,p)\n    ;\n    \n    if (i==4) return//Num 4\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)||\n    DOT(sx+2,sy+3,p)\n    ;   \n\n    if (i==5) return//Num 5\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+2,sy+3,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+2,sy+5,p)\n    ;\n\n    if (i==6) return//Num 6\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+2,sy+3,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+1,sy+2,p)\n    ;\n    \n    if (i==7) return//Num 7\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+4,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+3,sy+5,p)\n    ;\n\n    if (i==8) return//Num 8\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)||\n    DOT(sx+2,sy+3,p)\n    ;\n\n    if (i==9) return//Num 9\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)||\n    DOT(sx+2,sy+3,p)\n    ;\n    \n    if (i==10) return//Num A\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+3,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)\n    ;\n    \n    \n    if (i==11) return//Num B\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+4,p)||\n    DOT(sx+2,sy+3,p)\n    ;\n    \n    if (i==12) return//Num C\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)\n    ;\n    \n    if (i==13) return//Num D\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+3,sy+2,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+3,sy+4,p)\n    ;\n    \n    if (i==14) return//Num E\n    DOT(sx+3,sy+1,p)||\n    DOT(sx+2,sy+1,p)||\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+2,sy+3,p)\n    ;\n    \n    if (i==15) return//Num F\n    DOT(sx+1,sy+1,p)||\n    DOT(sx+3,sy+5,p)||\n    DOT(sx+2,sy+5,p)||\n    DOT(sx+1,sy+5,p)||\n    DOT(sx+3,sy+3,p)||\n    DOT(sx+1,sy+2,p)||\n    DOT(sx+1,sy+3,p)||\n    DOT(sx+1,sy+4,p)||\n    DOT(sx+2,sy+3,p)\n    ;\n    return false;\n}\n//LOG FLOAT VALUE\nvec4 LOG(float n, bool flt, int sys, int str, vec4 fragColor, vec2 fragCoord) {\n    // fps speed up\n    ivec2 p = ivec2(fragCoord)/DS;\n    if(p.y<(2+6*(str+1))&&p.y>=(2+6*(str))&&p.x<=(4*45)) \n    {\n        vec4 res = fragColor;\n        vec4 res0 = 1.0-fragColor;//out color\n        \n        str=str*6;\n        int pos = 1; float num = 0.0; float m; int s=-1;\n\n        //draw first minus of float n\n        if (n < 0.0) {\n            n = abs(n);\n            if(DOT(2, str+4, p)) res=res0;\n            if(DOT(3, str+4, p)) res=res0;\n            pos+=3;\n        }\n\n        //length before dot of float n\n        int k=1;\n        for (int i=1;i<=38&&n/pow(float(sys), float(i))>=1.0;i++) {\n            k=i+1;\n        }\n\n        //draw float n before dot\n        for(int j = k; j>=1; j--) {\n            m=pow(float(sys),float(j));\n            num = mod(n, m)*float(sys)/m;\n            if(int(floor(num))>=0)\n            {\n                if (num>=0.0) {\n                    if (DRAW(int(floor(num)), pos, str+1, p)) {\n                        res=res0; //color invert\n                    } pos+=4;\n                }\n\n            }\n        }\n        \n        if (flt) {\n\n            // draw dot\n            if (DOT(pos+1, str+2, p))\n                res=res0;//color invert\n\n            //length after dot of float n\n            float nn=mod(n, 1.0); k=0;\n            for (int i=1;i<=38&&mod(nn*pow(float(sys), float(i)),1.0)!=0.0;i++) {\n                    k=i;\n            } n = nn*pow(float(sys), float(k));\n\n            // draw float n after dot\n            pos = pos+2;\n            for(int j = k; j>=0; j--) {\n                m=pow(float(sys),float(j));\n                num = mod(n, m)*float(sys)/m;\n                if(int(floor(num))>=0)\n                {\n                    if (num>=0.0) {\n                        if (DRAW(int(floor(num)), pos, str+1, p)) {\n                            res=res0;//color invert\n                        } pos+=4;\n                    }\n\n\n                }\n            }\n        }\n\n        return res; //color invert\n    }\n    else {\n        return fragColor;\n    }\n}\nvec4 LOG(float n, int str, vec4 fragColor, vec2 fragCoord) {\n    return LOG(n, true, 10, str, fragColor, fragCoord);\n}\n\nvec4 LOG(int n, int sys, int str, vec4 fragColor, vec2 fragCoord) {\n    return LOG(float(n), false, sys, str, fragColor, fragCoord);\n}\nvec4 LOG(int n, int str, vec4 fragColor, vec2 fragCoord) {\n    return LOG(float(n), false, 10, str, fragColor, fragCoord);\n}\n\n// START\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    // Output to screen\n    fragColor = vec4(col,1.0);\n    \n    // Mouse: Normalized pixel coordinates (from 0 to 1)\n    vec2 uvm = iMouse.xy/iResolution.xy;\n    // Mouse: Time varying pixel color\n    vec3 colm = 0.5 + 0.5*cos(iTime+uvm.xyx+vec3(0,2,4));\n    // Mouse: Output to buffer\n    vec4 mouseColor = vec4(colm,1.0);\n    \n    // Logging. Int val for string number, started from bottom\n    fragColor = LOG(mouseColor.z, 0, fragColor, fragCoord);\n    fragColor = LOG(mouseColor.y, 1, fragColor, fragCoord);\n    fragColor = LOG(mouseColor.x, 2, fragColor, fragCoord);\n    \n    fragColor = LOG(-int(iMouse.y), 4, fragColor, fragCoord);\n    fragColor = LOG(-int(iMouse.x), 5, fragColor, fragCoord);\n    \n    fragColor = LOG(0xFF1234, 16, 7, fragColor, fragCoord);\n    fragColor = LOG(16, 2, 8, fragColor, fragCoord);\n}","name":"Image","description":"","type":"image"}]}