{"ver":"0.1","info":{"id":"4dcBRN","date":"1524152521","viewed":1701,"name":"Domain repetition","username":"latitude","description":"Trying to use domain repetition with instanceID technique as explained by Cupe in \nhttps://www.youtube.com/watch?v=s8nFqwOho-s&t=990s","likes":24,"published":1,"flags":0,"usePreview":0,"tags":["domainrepetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RAYMARCH_STEPS 70\n#define EPS 0.001\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n\treturn res*res;\n}\n\n\nvec2 pMod2(inout vec2 p, float size){\n\tfloat halfsize = size*0.5;\n\tvec2 c = floor((p+halfsize)/size);\n\tp = mod(p+halfsize,size)-halfsize;\n\treturn c;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat map(vec3 p){\n    vec2 index = pMod2(p.xz, 5.0);\n    float valNoise = noise(index);\n    p.y -= valNoise * 14.0;\n    float pulse = (sin(iTime * length(index)) + 1.0) / 4.0;\n\treturn sdSphere(p, valNoise + 0.2 + pulse);\n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n\tfloat t = 0.0;\n    for(int i = 0; i < RAYMARCH_STEPS; ++i){\n        vec3 p = ro + rd * t; \n    \tfloat d = map(p);\n        \n        if (d < EPS){\n        \tbreak;\n        }\n        \n        t += min(d, 2.5);\n    }\n    return t;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, in float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = vec3(12.0*cos(iTime / 3.0), 3.0,12.0*sin(iTime / 3.0) );\n\tvec3 ta = vec3(0.0,4.0, 0.0);\n\n    mat3 cam = setCamera(ro, ta, 0.0);\n    vec3 rd = cam * normalize(vec3(uv,2.0));\n    \n    float dist = raymarch(ro, rd);\n    \n    float fog = 1.0 / (1.0 + dist * dist * 0.001);\n    \n    fragColor = vec4(fog * vec3(1.0, 0.75, 0.0),1.0);\n}","name":"Image","description":"","type":"image"}]}