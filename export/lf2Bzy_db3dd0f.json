{"ver":"0.1","info":{"id":"lf2Bzy","date":"1727014187","viewed":9,"name":"interpolation_","username":"ZeroreZ","description":"interpolation","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\n\nfloat smoothMin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n//SDF FUNCS\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdVerticalCapsule( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n//END SDF FUNCS\n\nfloat GetDist(vec3 p) {\n\tvec3 s = vec3(0, 2, 6);\n    \n    float sphereDist  = sdSphere(p - s,1.0);\n    \n    float planeDist = p.y;\n    \n    vec3 boxSize = vec3(1.0, 1.0, 1.0);\n    vec3 boxPosition = vec3(1. + sin(iTime), 1., 6.);\n    float boxDist = sdBox(p - boxPosition, boxSize);\n    \n    \n    float k = 0.6; // Коэффициент сглаживания\n    float smoothDist1 = smoothMin(sphereDist, boxDist, k);\n    float smoothDistAll = smoothMin(smoothDist1, planeDist, k);\n \n    float d = min(planeDist,smoothDistAll);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=1.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    //light1\n    vec3 lightPos1 = vec3(0, 5, 6);\n    lightPos1.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l1 = normalize(lightPos1-p);\n    vec3 n1 = GetNormal(p);\n    \n    float dif1 = clamp(dot(n1, l1), 0., 1.);\n    float d1 = RayMarch(p+n1*SURF_DIST*2., l1);\n    if(d1<length(lightPos1-p)) dif1 *= .1;\n    //light2\n    vec3 lightPos2 = vec3(0, 5, 1);\n\n    vec3 l2 = normalize(lightPos2-p);\n    vec3 n2 = GetNormal(p);\n    \n    float dif2 = clamp(dot(n2, l2), 0., 1.);\n    float d2 = RayMarch(p+n2*SURF_DIST*2., l2);\n    if(d2<length(lightPos2-p)) dif2 *= .1;\n    \n    return dif1 + dif2;\n}\n\n//MAIN\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    \n    float dif = GetLight(p);\n    col = vec3(dif);\n    \n    \n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}