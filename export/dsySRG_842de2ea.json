{"ver":"0.1","info":{"id":"dsySRG","date":"1681237583","viewed":116,"name":" rotational symmetry2","username":"Acre","description":"I was able to approach lines a little better, but I can't come up with an approach for surfaces.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\nvec3 poison_apple=vec3(0.635,0.0,0.38);\nvec3 teal_blue=vec3(0.0,0.329,0.533);\nvec3 misty_green=vec3(0.811,0.894,0.819);\nvec3 darkblue_green=vec3(0.0,0.435,0.482);\nvec3 medium_gray=vec3(0.623,0.627,0.627);  \n    \n    \nvec3 layer1()\n{\n    vec3 layer1_col;\n    return layer1_col;\n}\n\nfloat[30] t_x;\nfloat[30] t_y;\nfloat[30] d;\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    float AA=3.0/min(iResolution.x, iResolution.y);\n    vec3 col,col2;\n    float line;\n    for(int i=0;i<30;i++)\n    {\n        t_x[i]=cos(float(i))*(float(i)*0.05);\n        t_y[i]=sin(float(i))*(float(i)*0.05);\n        d[i]=sdCircle(p+vec2(t_x[i],t_y[i]),float(i)*0.1);\n        //d[i]=sdCircle(p+vec2(t_x[i],t_y[i]),float(i)*0.01*iTime);\n        //col*=(d[i]>0.0) ? poison_apple -vec3(i) : vec3(1.0);\n        col*=(d[i]>0.0) ? poison_apple : vec3(1.0);\n        col = mix(col, vec3(1.0), smoothstep(AA,0.0,abs(d[i])) );\n\n    }\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}