{"ver":"0.1","info":{"id":"MtVyDm","date":"1536679129","viewed":209,"name":"NotFound","username":"balkhan","description":"https://codepen.io/balkhan/pen/aaYbEv","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","404"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n* License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n* Created by bal-khan\n*/\n\nvec2\tmarch(vec3 pos, vec3 dir);\nvec3\tcamera(vec2 uv);\nvoid\trotate(inout vec2 v, float angle);\n\nfloat \tt;\t\t\t// time\nvec3\tret_col;\t// torus color\nvec3\th; \t\t\t// light amount\n\n#define I_MAX\t\t20.\n#define E\t\t\t0.00001\n#define FAR\t\t\t100.\n#define PI \t\t\t3.14159\n#define TAU \t\tPI*2.\n\n//#define MOUSE_ROT\n//#define ALIASING\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t  = iTime*.125;\n    vec3\tcol = vec3(0., 0., 0.);\n    #ifdef ALIASING\n\tif (mod(float(fragCoord.x), 2.) <= 1. || mod(float(fragCoord.y), 2.) <= 1.)\n    \tdiscard;\n    #endif\n\tvec2 R = iResolution.xy,\n          uv  = vec2(fragCoord.xy-R/2.) / min(R.x, R.y);\n  \tfloat aspect = max(R.x/R.y, R.y/R.x);\n\tuv *= aspect;\n\tvec3\tdir = camera(uv);\n\tvec3\tpos = vec3(.0, .0, 44.5);\n\n    h*=0.;\n    vec2\tinter = (march(pos, dir));\n    col += h * 1.;\n    fragColor =  vec4(col,1.0);\n}\n\nfloat mylength(vec3 p) {return max(abs(p.x), max(abs(p.y), abs(p.z)));}\nfloat mylength(vec2 p) {return max(abs(p.x), abs(p.y));}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p-a, ba = b-a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat four_df(vec3 p, vec3 off)\n{\n    p -= off;\n    vec3 pp = p;\n    \n    pp.x -= 1.;\n    float ret = sdCapsule(pp, vec3(.0, 10.*1.5, .0), vec3(.0, -10.*1.5, .0), .25 );\n\n    pp = p;\n    rotate(pp.xy, 1.57);\n    pp.z = abs(pp.z)-clamp(exp(-pp.y+0.), .0, 1.);\n    pp = pp-vec3(min(exp(-pp.y+5.), 1.)*2.1*sin(pp.y*.5+iTime), .0, .0);\n    ret = min(ret,\n                sdCapsule(pp, vec3(.0, 10.*1.5, .0), vec3(.0, -7.*1.5, 0.0), .25)\n                );\n    pp = p;\n    rotate(pp.xy, 1.57*1.5);\n    pp.x -= 6.5*1.5+1.;\n    ret = min(ret,\n                sdCapsule(pp, vec3(.0, 7.*1.5, .0), vec3(.0, -6.*1.5, 0.0), .25)\n                );\n  return ret;\n}\n      \nfloat\tscene(vec3 p)\n{  \n    float\tvar;\n    float\tmind = 1e5;\n    #ifdef MOUSE_ROT\n    rotate(p.xz, TAU*(iMouse.x-.05*iResolution.x)/iResolution.x);\n    rotate(p.yz, TAU*(iMouse.y-.05*iResolution.y)/iResolution.y);\n    #endif\n    var = atan(p.x,p.y);\n    vec2 q = vec2( ( length(p.xy) )-10.,p.z);\n    rotate(q, -var*2.+iTime*.50);\n    q = abs(q)-2.;\n    rotate(q, var*4.+iTime*1.);\n    q.y = abs(q.y)-.8;\n    rotate(q, var*3.+iTime*1.);\n    q.x = abs(q.x)-.8;\n    mind = mylength(q)+.5+1.05*(length(fract(q*.18205*(3.+3.*sin(var*2. - iTime*.250)) )-.5)-1.215);\n  \n    float the_4 = four_df(vec3((abs(p.x))*(p.x<0.0 ? -1. : 1.)+(p.x<0.0 ? 1. : -1.)*35.,p.yz), vec3(.0, .0, .0));\n\n    h += vec3(.525+.20*(1.+sin(var*1. - iTime*.25)), .4, .25)*.0125/max(.0001, .125021+.0051*mind*mind);\n    \n    mind = min(mind, the_4);\n  \n    h += -vec3(.5, .4, .5)*.0025/max(.0001,.021+mind*mind);\n\n    h += vec3(.31, .21, .25)*.00125/max(.0001, .005+.000151*the_4*the_4);\n    \n    return (mind);\n}\n\nvec2\tmarch(vec3 pos, vec3 dir)\n{\n    vec2\tdist = vec2(0.0, 0.0);\n    vec3\tp = vec3(0.0, 0.0, 0.0);\n    vec2\ts = vec2(0.0, 0.0);\n\t    for (float i = -1.; i < I_MAX; ++i)\n\t    {\n\t    \tp = pos + dir * dist.y;\n\t        dist.x = scene(p)*.7;\n\t        dist.y += dist.x;\n            // log trick by aiekick\n\t        if (log(dist.y*dist.y/dist.x/1e5) > .0 || dist.x < E || dist.y > FAR)\n            {\n                break;\n            }\n\t        s.x++;\n    }\n    s.y = dist.y;\n    return (s);\n}\n\n// Utilities\n\nvoid rotate(inout vec2 v, float angle)\n{\n\tv = vec2(cos(angle)*v.x+sin(angle)*v.y,-sin(angle)*v.x+cos(angle)*v.y);\n}\n\nvec3\tcamera(vec2 uv)\n{\n    float\t\tfov = .75;\n\tvec3\t\tforw  = vec3(0.0, 0.0, -1.0);\n\tvec3    \tright = vec3(1.0, 0.0, 0.0);\n\tvec3    \tup    = vec3(0.0, 1.0, 0.0);\n\n    return (normalize((uv.x) * right + (uv.y) * up + fov * forw));\n}\n","name":"Image","description":"","type":"image"}]}