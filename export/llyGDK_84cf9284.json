{"ver":"0.1","info":{"id":"llyGDK","date":"1476749645","viewed":270,"name":"Sphere Map","username":"gigatron","description":"Today not amiga but sphere map ;\nuse\n   .--,       .--,\n ( (  \\.---./  ) )\n '.__/o   o\\__.'\n    {=  ^  =}\n      >  -  <\n      /       \\\n     //       \\\\\n    //|   .   |\\\\\n    \"'\\        /'\"_.-~^`'-.\n       \\  _  /--'         `\n   jgs","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["texture","sphere","map"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//  Gigatron France Sphere Map using iq primitives ;\n//  IQ and some other code from ST;\n//******************************************************\n#define PI 3.14159265358979\n\nconst float pi = 3.14159;\nmat3 xrot(float t)\n{    return mat3(1.0, 0.0, 0.0,\n    0.0, cos(t), -sin(t),\n    0.0, sin(t), cos(t));\n}\nmat3 yrot(float t)\n{    return mat3(cos(t), 0.0, -sin(t),\n    0.0, 1.0, 0.0,\n    sin(t), 0.0, cos(t));\n}\n\nmat3 zrot(float t)\n{    return mat3(cos(t), -sin(t), 0.0,\n    sin(t), cos(t), 0.0,\n    0.0, 0.0, 1.0);\n}\n\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nvec2 uv (vec3 p) {\n\tfloat x = p.x;\n    float y = p.y;\n    float z = p.z;\n    float u = atan(x, z) / (2. * PI) + .5;\n    float v = asin(y) / (PI) + .5;\n    return vec2(u,v);\n}\n\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) +\n    length(max(d,0.0));\n}\n\nfloat udBox( vec3 p, vec3 b, float r )\n{\n\treturn length(max(abs(p)-b,0.0))-r;\n}\nfloat sdCylinder( vec3 p, vec2 h )\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nvec2 map(vec3 p)\n{\n    vec2 f=(fract(p.xy) * 2.0 - 1.0) ;\n    vec3 q = vec3(f.x-0.5, f.y, p.z);\n    float br = 0.4;\n    float c = sdCylinder(  p+vec3( 0.0,0.60,-1.0), vec2(3.0,3.0)  );\n   // float b = sdCylinder(p, vec2(1.1,1.3))*br;\n    \n  //  float b= sdBox(p-vec3( 0.0,0.25, 0.0), vec3(0.65) );\n \n    float  ss = sdSphere(    p-vec3( 0.0,0.00, 0.0),1.00 )  ;\n  \n    return vec2(ss, ss);\n    \n}\nvec3 normal(vec3 p)\n{\n    vec3 o = vec3(0.02, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy).x - map(p-o.xyy).x,\n    map(p+o.yxy).x - map(p-o.yxy).x,\n    map(p+o.yyx).x - map(p-o.yyx).x));\n}\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 32; ++i) {\n    vec3 p = o + r * t;\n    float d = map(p).x;\n    t += d;\n\t}\nreturn t;\n}\n\nvec4 tex(vec3 p)\n{\n   // tx map !\n    vec3 tw = texture(iChannel0, vec2(p.x+0.48,p.y+0.51)).xyz;\n   \n   // vec3 tx = texture(iChannel0, vec2(p.x+0.5,p.y+0.5)).xyz;\n    \n    vec4 tx= texture(iChannel0,uv(normalize(p)));\n    \n    return (tx ) / 3.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n  \n    float tm=iTime/5.0;\n    float smp=texture(iChannel1,uv).x;\n    \n    uv = uv * 2.0 - 1.0;\n    uv.x *=iResolution.x/iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.3));//1.5\n    vec3 o = vec3(0.0, 0.0, -2.5);\n \n    mat3 xfm = yrot(-iMouse.x*0.01)*xrot(iMouse.y*0.01)*zrot(0.);\n    xfm *= xrot(0.4*tm*3.5);// unused !\n    o *= xfm;\n    r *= xfm;\n    float t = trace(o, r);\n    vec3 w = o + r * t;\n    vec3 sn = normal(w);\n    vec2 fd = map(w);\n    vec3 lpos = o-1.8*sin(tm)  ;// remove  \n    vec3 ldel = lpos - w;\n    float llen = length(ldel);\n    ldel /= llen;\n    vec3 refl = reflect(ldel, sn);\n    float prod = max(dot(ldel,sn), 1.5)*1.5;\n    float spow = max(dot(refl,r), 0.1);\n    vec4 diff = tex(w*0.4);//0.4\n    vec4 spec = vec4(0.0);\n    float fog = 1.0 / (1.0 + t * t * 0.1 + fd.x * 500.0);\n    vec4 fc = (diff * prod + spec * spow) * fog;\n    \n    uv.x = uv.x+0.2*iTime;\n    vec4 bg = texture(iChannel2,uv);\n      \n   \n    fragColor = vec4(mix(fc*3.0,bg/3.0,0.1));\n \t \n}","name":"Image","description":"","type":"image"}]}