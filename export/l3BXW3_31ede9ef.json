{"ver":"0.1","info":{"id":"l3BXW3","date":"1711137004","viewed":154,"name":"Tight Bounding Sphere - Triangle","username":"natevm","description":"Computes the tightest possible bounding sphere for a triangle. Red sphere is the centroid approximation.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","distancefield","triangle","distance"],"hasliked":0,"parentid":"4sXXRN","parentname":"Triangle - distance 3D"},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Computes the smallest sphere that completely encloses the triangle formed by three points in 3D space.\n//\n// This should be much tighter than the classical solution using the average of the triangle's vertices.\n\n \n// Other triangle functions:\n//\n// Occlusion:    https://www.shadertoy.com/view/XdjSDy\n// Distance:     https://www.shadertoy.com/view/4sXXRN\n// Intersection: https://www.shadertoy.com/view/MlGcDz\n// Closest:      https://www.shadertoy.com/view/ttfGWl\n\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\n// https://realtimecollisiondetection.net/blog/?p=20\nvec4 exactBoundingSphere(vec3 a, vec3 b, vec3 c) {\n    float dotABAB = dot(b - a, b - a);\n    float dotABAC = dot(b - a, c - a);\n    float dotACAC = dot(c - a, c - a);\n    float d = 2.0*(dotABAB*dotACAC - dotABAC*dotABAC);\n    vec4 sphere;\n    vec3 referencePt = a;\n    if (abs(d) <= 1e-6) {\n        // a, b, and c lie on a line. Circle center is center of AABB of the\n        // points, and radius is distance from circle center to AABB corner\n        vec3 aabbMin = min(a, min(b, c));\n        vec3 aabbMax = max(a, max(b, c));\n        sphere.xyz = 0.5 * (aabbMin + aabbMax);\n        referencePt = aabbMin;\n    } else {\n        float s = (dotABAB*dotACAC - dotACAC*dotABAC) / d;\n        float t = (dotACAC*dotABAB - dotABAB*dotABAC) / d;\n        // s controls height over AC, t over AB, (1-s-t) over BC\n        if (s <= 0.0f) {\n            sphere.xyz = 0.5f * (a + c);\n        } else if (t <= 0.0f) {\n            sphere.xyz = 0.5f * (a + b);\n        } else if (s + t >= 1.0f) {\n            sphere.xyz = 0.5f * (b + c);\n            referencePt = b;\n        } else sphere.xyz = a + s*(b - a) + t*(c - a);\n    }\n    sphere.w = sqrt(dot2(sphere.xyz - referencePt));\n    return sphere;\n}\n\nvec4 approxBoundingSphere(vec3 p1, vec3 p2, vec3 p3) {\n    vec3 c = (p1 + p2 + p3) / 3.0;\n    float r = max(dot2(p1-c), max(dot2(p2-c), dot2(p3-c)));\n    return vec4(c, sqrt(r));\n}\n\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, vec3 cen, float rad )\n{\n    return length(p-cen)-rad;\n}\n\nfloat udTriangle( in vec3 p, in vec3 v1, in vec3 v2, in vec3 v3 )\n{\n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v32 = v3 - v2; vec3 p2 = p - v2;\n    vec3 v13 = v1 - v3; vec3 p3 = p - v3;\n    vec3 nor = cross( v21, v13 );\n\n    return sqrt( (sign(dot(cross(v21,nor),p1)) + \n                  sign(dot(cross(v32,nor),p2)) + \n                  sign(dot(cross(v13,nor),p3))<2.0) \n                  ?\n                  min( min( \n                  dot2(v21*clamp(dot(v21,p1)/dot2(v21),0.0,1.0)-p1), \n                  dot2(v32*clamp(dot(v32,p2)/dot2(v32),0.0,1.0)-p2) ), \n                  dot2(v13*clamp(dot(v13,p3)/dot2(v13),0.0,1.0)-p3) )\n                  :\n                  dot(nor,p1)*dot(nor,p1)/dot2(nor) );\n}\n\n//=====================================================\n\nfloat time;\n\nvoid getTriangle(out vec3 v1, out vec3 v2, out vec3 v3) {\n    v1 = 1.5*cos( time * .1 + vec3(0.0,1.0,1.0) + 0.0 ) + vec3(0., 0.5, 0.);\n\tv2 = 1.0*cos( time * .1 + vec3(0.0,2.0,3.0) + 2.0 ) + vec3(0., 0.5, 0.);\n\tv3 = 1.0*cos( time * .1 + vec3(0.0,3.0,5.0) + 4.0 ) + vec3(0., 0.5, 0.);\n}\n\nvec2 map( in vec3 p, bool showSphere )\n{\n    // triangle\t\n    vec3 v1, v2, v3;\n    getTriangle(v1, v2, v3);\n    \n    vec4 s1 = exactBoundingSphere(v1, v2, v3);\n    \n    vec4 s2 = approxBoundingSphere(v1, v2, v3);\n    \n    \n    vec4 s = s1;\n    float sm = 3.0;\n    \n    if ((int(time) % 2) == 0) {\n      s = s2;\n      sm = 4.0;\n    }\n\t\n\tvec2 res = vec2(udTriangle( p, v1, v2, v3 ) - 0.01, 1.0);\n\n    // ground plane\n\t{\n    float d = p.y + 1.0;\n    if (d < res.x) res = vec2(d, 2.0);\n    }\n    \n    // bounding sphere\n    if (showSphere) {        \n        float d = sdSphere( p, s.xyz, s.w );\n        if (d < res.x) res = vec2(d, sm);\n    }\n    \n    // Vertices on triangle which touch the sphere\n    {\n        float dref1 = abs(sdSphere(v1, s.xyz, s.w));\n        float dref2 = abs(sdSphere(v2, s.xyz, s.w));\n        float dref3 = abs(sdSphere(v3, s.xyz, s.w));\n        \n        float eps = .001;\n        \n        if (dref1 < eps) {\n            float d = sdSphere(p, v1, .05);\n            if (d < res.x) res = vec2(d, 5.0);\n        }\n        \n        if (dref2 < eps) {\n            float d = sdSphere(p, v2, .05);\n            if (d < res.x) res = vec2(d, 5.0);\n        }\n        \n        if (dref3 < eps) {\n            float d = sdSphere(p, v3, .05);\n            if (d < res.x) res = vec2(d, 5.0);\n        }\n    }\n    \n    return res;\t\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd, bool showSphere )\n{\n\tconst float maxd = 10.0;\n    vec2 res = vec2(1.0, 0.0);\n    float t = 0.0;\n    for( int i=0; i<50; i++ )\n    {\n        if( res.x<0.001 || t>maxd ) break;\n\t    res = map( ro+rd*t, showSphere );\n        t += res.x;\n    }\n\n    if( t>maxd ) t=-1.0;\n\t\n    return vec2(t, res.y);\n}\n\nvec3 calcNormal( in vec3 pos, bool showSphere )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy, showSphere).x - map(pos-eps.xyy, showSphere).x,\n           map(pos+eps.yxy, showSphere).x - map(pos-eps.yxy, showSphere).x,\n           map(pos+eps.yyx, showSphere).x - map(pos-eps.yyx, showSphere).x ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float k, bool showSphere )\n{\n    float res = 1.0;\n    float t = 0.0;\n\tfloat h = 1.0;\n    for( int i=0; i<20; i++ )\n    {\n        h = map(ro + rd*t, showSphere).x;\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.01, 1.0 );\n\t\tif( h<0.0001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor, bool showSphere )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.02 + 0.025*float(i*i);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos, showSphere ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return 1.0 - clamp( occ, 0.0, 1.0 );\n}\n\nconst vec3 lig = normalize(vec3(1.0,0.9,0.7));\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 2\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 tot = vec3(0.0);\n\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;\n        // time sample\n        float td = 0.5+0.5*sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1);\n        time = iTime - (1.0/60.0)*(td+float(m*AA+n))/float(AA*AA-1);\n        \n        float angle = time;\n        mat3 rotY = mat3(\n            cos(angle), 0.0, sin(angle),\n            0.0,        1.0, 0.0,\n           -sin(angle), 0.0, cos(angle)\n        );\n\n        // animate camera\n        vec3 ro = rotY * vec3(0.0, 0.5, 4.0 );\n        vec3 rd = rotY * normalize( vec3(p,-1.0) );\n\n        vec3 col = vec3(0.0);\n\n        // make sphere transparent\n        // pixel sample\n        ivec2 samp = ivec2(fragCoord)*AA + ivec2(m,n);\n        bool showSphere = (texelFetch(iChannel0,samp&7,0).x>0.25);\n\n        vec2 res = intersect(ro,rd, showSphere); \n        float t = res.x;\n        if( t>0.0 )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos, showSphere);\n            float sha = calcSoftshadow( pos + nor*0.01, lig, 32.0, showSphere );\n            float occ = calcOcclusion( pos, nor, showSphere );\n            col =  vec3(0.9,0.6,0.3)*clamp( dot( nor, lig ), 0.0, 1.0 ) * sha;\n            col += vec3(0.5,0.6,0.7)*clamp( nor.y, 0.0, 1.0 )*occ;\n            col += 0.03;\n            col *= exp( -0.2*t );\n            col *= 1.0 - smoothstep( 5.0, 10.0, t );\n            \n            // show distance isolines\n            vec3 albedo = vec3(1.0,1.0,1.0);\n            if( abs(res.y-3.0)<0.5 || abs(res.y-4.0)<0.5 )\n            {\n                vec3 v1, v2, v3;\n                getTriangle(v1, v2, v3);\n                float dref = udTriangle( pos, v1, v2, v3 );\n                float dsam = 0.f;//length(pos-samplePoint);\n                albedo = vec3(3.0) + 3.0*smoothstep(0.8,0.9,sin((dsam-dref)*100.0))*exp2(-6.0*(dsam-dref)*(dsam-dref));\n                \n                if (abs(res.y-4.0)<0.5) {\n                    albedo *= vec3(1.f, 0.25f, 0.25f);\n                }\n            }\n            col *= albedo;\n            \n            // show points of contact\n            if( abs(res.y-5.0)<0.5 )\n            {\n                col = vec3(1.0);\n            }\n            \n        }\n        \n        // gamma        \n        col = pow( col, vec3(0.4545) );\n\t    tot += col;\n    }\n    tot /= float(AA*AA);\n\n    // cheap dithering\n    tot += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n\tfragColor = vec4( tot, 1.0 );\n}\n\n","name":"Image","description":"","type":"image"}]}