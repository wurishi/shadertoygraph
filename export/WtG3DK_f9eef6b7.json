{"ver":"0.1","info":{"id":"WtG3DK","date":"1579824233","viewed":214,"name":"Water mountains","username":"yonatan","description":"New version of an old shader https://www.shadertoy.com/view/XsBSWw","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["terrain","water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float waterLevel = 0.1;\nconst float km = .6;\n\nfloat h1(vec2 p) {\n    return textureLod(iChannel0, p.xy*.015, 0.0).x;\n}\n\nfloat h(vec2 p) {\n    float ret = 0.0;\n    float m = 1.0;\n    for(int i=0; i<9; i++) {\n        ret += m * h1(p/m);\n        m *= -0.3;\n    }\n    return ret * ret;\n}\n\nfloat df(vec3 p) {\n    return p.y - h(p.xz);\n}\n\nmat3 rotationXY( vec2 angle ) {\n\tvec2 c = cos( angle );\n\tvec2 s = sin( angle );\n\treturn mat3(\n\t\tc.y      ,  0.0, -s.y      ,\n\t\ts.y * s.x,  c.x,  c.y * s.x,\n\t\ts.y * c.x, -s.x,  c.y * c.x\n\t);\n}\n\n// from https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k ) {\n    float res = 1.0;\n    float t=mint;\n    for(int i=0;i<8; i++) {\n        if(t>maxt) break;\n        float h = df(ro + rd*t);\n        if( h<0.001 )\n            return 0.0;\n        res = min( res, k*h/t );\n        t += h*km;\n    }\n    return res;\n}\n\nvec3 calcNormal(vec3 p, float h) {\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*df( p + k.xyy*h ) + \n                      k.yyx*df( p + k.yyx*h ) + \n                      k.yxy*df( p + k.yxy*h ) + \n                      k.xxx*df( p + k.xxx*h ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\t{\n    bool water = false;\n    float wt = 0.;\n\tvec2 p2=(fragCoord.xy/iResolution.xy)*2.0-1.0;\n    vec2 m=iMouse.yx/iResolution.yx*2.-1.;\n    m.y = -m.y;\n    vec3 ldir = normalize(vec3(-1.0,.01,.01));\n\tvec3 o = vec3(0.0, 0.0, iTime * .2);\n    o.y = h1(o.xz) + .2;\n    mat3 rot = rotationXY(m*vec2(0.5,4.0)+vec2(0.5,0.0));\n    //mat3 rot = rotationXY(m+vec2(1.,0.0));\n\tvec3 dir = rot * normalize(vec3(p2*vec2(1.77,1.0),2.0));\t\t// screen ratio (x,y) fov (z)\n\tvec3 hit = o;\n\tfloat t=0.0, k;\n\tfor(int i=0;i<64;i++) {\n\t\tk=df(o+dir*t);\n\t\tt+=k*km;\n        hit=o+dir*t;\n        if(hit.y < waterLevel - .01) {\n            float yo = waterLevel - hit.y ;\n            o = hit - dir*yo/km;\n            wt = t;\n            t=0.;\n            water = true;\n            dir.y = -dir.y;\n        }\n\t}\n    t+=wt;\n    float hh = h((hit.xz)*128.);\n    //hit += hh * vec3(0.07, -0.02, 0.07);\n    vec3 n = calcNormal(hit, .01*t);\n    n.y += hh * 4.;\n    n = normalize(n);\n    float ss = softshadow(hit, ldir, .01, 1.0, 1.0 );\n    float dif = dot(n,ldir);\n    vec3 fogc = mix(vec3(.86,.89,.9), vec3(1.8,1.6,1.4), (pow(.5+dot(dir,ldir), 2.0))*.25);\n    vec3 c = vec3(.6,.5,.4) * (dif + .7) * (ss + .05);\n    c = mix(c, fogc, min(1.0,t*.1));\n    if(water) c = mix(c*vec3(.6,.8,.75), fogc, min(1.0,wt*.1));\n    c = pow(c, vec3(.4545)); \n    fragColor = vec4(c,1.0);\n}\n","name":"Image","description":"","type":"image"}]}