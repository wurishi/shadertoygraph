{"ver":"0.1","info":{"id":"43cXD8","date":"1718942905","viewed":78,"name":"rethink pixel quality antialias","username":"chenxianming","description":"i'm trying to new way for pixel reconstruction antialias when the little picture resize to large size then quality less and save more performance.\n\nzoom it off.\n_________","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["reconstruction","quality"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n\n    // Time varying pixel color\n    vec3 col;\n    \n    col += texture( iChannel0, ( fragCoord + vec2( -.05, .05 ) )/iResolution.xy ).rgb * .25;\n    col += texture( iChannel0, ( fragCoord + vec2( .05, .05 ) )/iResolution.xy ).rgb * .25;\n    col += texture( iChannel0, ( fragCoord + vec2( -.05, -.05 ) )/iResolution.xy ).rgb * .25;\n    col += texture( iChannel0, ( fragCoord + vec2( .05, -.05 ) )/iResolution.xy ).rgb * .25;\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture( iChannel0, uv ).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define rec\n#define freq .2\n\nvec3 getCol( ivec2 p ){\n    return texelFetch( iChannel0, p, 0 ).rgb;\n}\n\nbool getDf( ivec2 a, ivec2 b ){\n    vec3 aa = texelFetch( iChannel0, a, 0 ).rgb;\n    vec3 bb = texelFetch( iChannel0, b, 0 ).rgb;\n    \n    if( \n        abs( aa.r - bb.r ) > freq ||\n        abs( aa.g - bb.g ) > freq || \n        abs( aa.b - bb.b ) > freq\n    ){\n        return true;\n    }\n    \n    return false;\n    \n}\n\nvec3 AA( ivec2 a, ivec2 b ){\n    \n    \n    vec3 aa = texelFetch( iChannel0, a, 0 ).rgb;\n    vec3 bb = texelFetch( iChannel0, b, 0 ).rgb;\n    \n\n    \n    float p;\n    \n    \n    \n    if( dot( aa, bb ) > dot( aa, aa ) ){\n        p = length( vec2( b ) / iResolution.xy ) - .01; /* .01 for blur viewing */\n    }else{\n        p = 1. - ( length( vec2( b ) / iResolution.xy ) - .1 ); /* .1 for strongth viewing */\n    }\n    \n    return mix(\n        aa,\n        bb,\n        p * .6\n    );\n    \n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture( iChannel0, uv ).rgb;\n    \n    #ifdef rec\n    /*\n        111\n        101\n        111\n    */\n    bool l = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( -1, 0 ) ) );\n    \n    if( l ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( -1, 0 ) ) );\n    }\n    \n    bool r = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( 1, 0 ) ) );\n    \n    if( r ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( 1, 0 ) ) );\n    }\n    \n    bool t = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( 0, 1 ) ) );\n    \n    if( t ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( 0, 1 ) ) );\n    }\n    \n    bool b = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( 0, -1 ) ) );\n    \n    if( b ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( 0, -1 ) ) );\n    }\n    \n    bool lt = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( -1, 1 ) ) );\n    \n    if( lt ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( -1, 1 ) ) );\n    }\n    \n    bool rt = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( 1, 1 ) ) );\n    \n    if( rt ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( 1, 1 ) ) );\n    }\n    \n    \n    bool lb = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( -1, -1 ) ) );\n    \n    if( lb ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( -1, -1 ) ) );\n    }\n    \n    bool rb = getDf( ivec2( fragCoord ), ivec2( fragCoord + vec2( 1, -1 ) ) );\n    \n    if( rb ){\n        col = AA( ivec2( fragCoord ), ivec2( fragCoord + vec2( 1, -1 ) ) );\n    }\n\n    #endif\n    \n    \n    //col *= length( fragCoord / iResolution.xy ) - .1; \n\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}