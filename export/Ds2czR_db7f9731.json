{"ver":"0.1","info":{"id":"Ds2czR","date":"1687364323","viewed":29,"name":"Fract Fun","username":"nrbrewer7","description":"This first of hopefully many shaders to come.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal","multiplelayers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette(float t){\n    vec3 a = vec3(0.851,0.227,0.624);\n    vec3 b = vec3(0.075,0.267,0.847);\n    vec3 c = vec3(0.176,0.902,0.298);\n    vec3 d = vec3(0.624,0.698,0.776);\n\n    return a + b * cos( 6.20318*(c*(t+d)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/ iResolution.y;\n    \n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    for (float i = 0.0; i < 5.0 ; i ++){\n    \n   \n        uv = fract(uv *2.0) - 0.5;\n\n\n        float d = length(uv)* exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + iTime * (i * 0.5));\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        d = 0.01 / d *.4 , 2.0;\n\n        finalColor += col * d;\n    }\n    \n    fragColor = vec4(finalColor, 1.0);\n    \n    \n   \n}","name":"Image","description":"","type":"image"}]}