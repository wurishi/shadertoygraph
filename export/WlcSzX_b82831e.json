{"ver":"0.1","info":{"id":"WlcSzX","date":"1581381846","viewed":109,"name":" [Epilepsy Warn] SmoothLife? RGF","username":"DaMastaCoda","description":"Simple SmoothLife? shader. Don;t know how to fix it. ","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["rgf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = texture(iChannel0,uv) * vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define M_PI 3.14159265358979323846\n\nfloat rand(vec2 co){return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);}\nfloat rand (vec2 co, float l) {return rand(vec2(rand(co), l));}\nfloat rand (vec2 co, float l, float t) {return rand(vec2(rand(co, l), t));}\n\nfloat perlin(vec2 p, float dim, float time) {\n\tvec2 pos = floor(p * dim);\n\tvec2 posx = pos + vec2(1.0, 0.0);\n\tvec2 posy = pos + vec2(0.0, 1.0);\n\tvec2 posxy = pos + vec2(1.0);\n\t\n\tfloat c = rand(pos, dim, time);\n\tfloat cx = rand(posx, dim, time);\n\tfloat cy = rand(posy, dim, time);\n\tfloat cxy = rand(posxy, dim, time);\n\t\n\tvec2 d = fract(p * dim);\n\td = -0.5 * cos(d * M_PI) + 0.5;\n\t\n\tfloat ccx = mix(c, cx, d.x);\n\tfloat cycxy = mix(cy, cxy, d.x);\n\tfloat center = mix(ccx, cycxy, d.y);\n\t\n\treturn center * 2.0 - 1.0;\n}\n\n// p must be normalized!\nfloat perlin(vec2 p, float dim) {\n\t\n\t/*vec2 pos = floor(p * dim);\n\tvec2 posx = pos + vec2(1.0, 0.0);\n\tvec2 posy = pos + vec2(0.0, 1.0);\n\tvec2 posxy = pos + vec2(1.0);\n\t\n\t// For exclusively black/white noise\n\t/*float c = step(rand(pos, dim), 0.5);\n\tfloat cx = step(rand(posx, dim), 0.5);\n\tfloat cy = step(rand(posy, dim), 0.5);\n\tfloat cxy = step(rand(posxy, dim), 0.5);*/\n\t\n\t/*float c = rand(pos, dim);\n\tfloat cx = rand(posx, dim);\n\tfloat cy = rand(posy, dim);\n\tfloat cxy = rand(posxy, dim);\n\t\n\tvec2 d = fract(p * dim);\n\td = -0.5 * cos(d * M_PI) + 0.5;\n\t\n\tfloat ccx = mix(c, cx, d.x);\n\tfloat cycxy = mix(cy, cxy, d.x);\n\tfloat center = mix(ccx, cycxy, d.y);\n\t\n\treturn center * 2.0 - 1.0;*/\n\treturn perlin(p, dim, 0.0);\n}\n\nfloat randomNum(vec2 co) {\n    if(perlin(co,1.0f)>0.5) {\n     \treturn 1.0f;   \n    } else {\n        return 0.0f;   \n    }\n}\n\nvec2 getUV(vec2 coord) {\n    return (coord)/iResolution.xy;\n}\n\nvec2 polar(float t, float r) {\n    return vec2(sin(t)*r,sin(t+M_PI/2.0f)*r);\n}\n\n#define LIM 6.0f\n\nfloat neighbors(vec2 coord) {\n \n    float outN = 0.0f;\n    float total = 0.0f;\n\tfor(float r = 0.0f; r < LIM; r = r + 0.5f) {\n    \tfor(float t = 0.0f; t < 2.0f * M_PI; t = t + 0.2f) {\n            total += LIM - r + 1.0f;\n            outN += texture(iChannel0, getUV(coord.xy - polar(t,r))).x * (LIM-r + 1.0f);\n    \t}\n    }\n    outN /= total;\n    return outN;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float n = neighbors(fragCoord);\n    float val = texture(iChannel0, getUV(fragCoord.xy)).x;\n    if((n > 0.25 && 0.4 > n) && texture(iChannel0, getUV(fragCoord.xy)).x == 1.0f) {\n        fragColor = vec4(vec3(1.0f),1.0f);\n    }else if((n > 0.2 && 0.3 > n) && texture(iChannel0, getUV(fragCoord.xy)).x == 0.0f) {\n        fragColor = vec4(vec3(1.0f),1.0f);\n    } else {\n        fragColor = vec4(vec3(0.0f),1.0f);\n    }\n    \n    if(iMouse.z > 0.0f) {\n        if(perlin(fragCoord,1.0f,iTime) > 0.3) {\n        \tfragColor = vec4(vec3(0.01f,0.01f,0.01f)*100.0,1.0f);        \t\n            //fragColor = vec4(vec3(1.0f,1.0f,1.0f),1.0f);\n\n        } else {\n            fragColor = vec4(vec3(0.0f,0.0f,0.0f),1.0f);\n\n        }\n    }\n    \n    if(iFrame == 0) {\n        float randomColor = randomNum(fragCoord);\n        fragColor = vec4(vec3(randomColor,randomColor,randomColor),1.0f);\n        return;\n    }\n    \n    if(perlin(fragCoord,1.0f,iTime) > 1.0f) {\n        fragColor = vec4(vec3(0.01f,0.01f,0.01f),1.0f);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"}]}