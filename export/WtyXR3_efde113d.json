{"ver":"0.1","info":{"id":"WtyXR3","date":"1584236243","viewed":78,"name":"Fade out from Center","username":"sevanetrebchenko","description":"First shader! This shader fades out from a color, brightest in the center to nearly transparent at the edges - cutoff distance can be changed. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fade"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 outColor = vec4(1.f, 1.f, 1.f, 1.f);  \t// color of the aura\n    vec4 backgroundColor = vec4(.08f, .08f, .08f, .08f);\n    float clampingFactor = 0.01f;\t\t\t\t// alpha to clamp at\n  \n    float minimumResolution = min(iResolution.x, iResolution.y);\n    \n    // offset to add for the center to be the center of the display\n    float xRatio = .5f;\n    float yRatio = .5f;\n    \n    // always position the center at the center of the display\n    if (minimumResolution == iResolution.x)\n        yRatio = 1.f - (iResolution.x / iResolution.y);\n    else \n        xRatio = 1.f - (iResolution.y / iResolution.x);\n    \n    // get the distance from the current fragment to the center of the screen\n    vec2 center = vec2 ((fragCoord.x / minimumResolution) - xRatio, (fragCoord.y / minimumResolution)) - yRatio; \n    float fragDist = sqrt((center.x) * (center.x) + (center.y) * (center.y));\n    \n    // calculate the brightness at this fragment\n    float adjustedBrightness = (0.5f - fragDist);\n\n    outColor *= adjustedBrightness;\n    \n    // the alpha is sufficiently transparent, make the color fully transparent\n    if (outColor.a < clampingFactor) \n        outColor = backgroundColor;\n    \n    // Output to screen\n    fragColor = outColor;\n}\n","name":"Image","description":"","type":"image"}]}