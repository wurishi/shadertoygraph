{"ver":"0.1","info":{"id":"NsjSR3","date":"1620688190","viewed":413,"name":"3D SDF Operations","username":"inspirnathan","description":"3D SDF operations found on iq's [url=https://iquilezles.org/articles/distfunctions/distfunctions.htm]3D SDF Page[/url]. Visit my tutorial to see how I use 3D SDF operations: [url]https://inspirnathan.com/posts/60-shadertoy-tutorial-part-14/[/url]","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","sdf","tutorial","inspirnathan"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Visit my tutorial to learn how this works: https://inspirnathan.com/posts/60-shadertoy-tutorial-part-14/\n\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;\nconst float EPSILON = 0.0005;\nconst float PI = 3.14159265359;\nconst vec3 COLOR_BACKGROUND = vec3(.741, .675, .82);\nconst vec3 COLOR_AMBIENT = vec3(0.42, 0.20, 0.1);\n\nmat2 rotate2d(float theta) {\n  float s = sin(theta), c = cos(theta);\n  return mat2(c, -s, s, c);\n}\n\nfloat sdSphere(vec3 p, float r, vec3 offset)\n{\n  return length(p - offset) - r;\n}\n\nfloat opUnion(float d1, float d2) { \n  return min(d1, d2);\n}\n\nfloat opSmoothUnion(float d1, float d2, float k) {\n  float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat opIntersection(float d1, float d2) {\n  return max(d1, d2);\n}\n\nfloat opSmoothIntersection(float d1, float d2, float k) {\n  float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n  return mix( d2, d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSubtraction(float d1, float d2) {\n  return max(-d1, d2);\n}\n\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n  float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n  return mix( d2, -d1, h ) + k*h*(1.0-h);\n}\n\nfloat opSubtraction2(float d1, float d2) {\n  return max(d1, -d2);\n}\n\nfloat opSmoothSubtraction2(float d1, float d2, float k) {\n  float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n  return mix( d1, -d2, h ) + k*h*(1.0-h);\n}\n\nfloat opSymX(vec3 p, float r, vec3 o)\n{\n  p.x = abs(p.x);\n  return sdSphere(p, r, o);\n}\n\nfloat opSymXZ(vec3 p, float r, vec3 o)\n{\n  p.xz = abs(p.xz);\n  return sdSphere(p, r, o);\n}\n\nfloat opRep(vec3 p, float r, vec3 o, vec3 c)\n{\n  vec3 q = mod(p+0.5*c,c)-0.5*c;\n  return sdSphere(q, r, o);\n}\n\nfloat opRepLim(vec3 p, float r, vec3 o, float c, vec3 l)\n{\n  vec3 q = p-c*clamp(round(p/c),-l,l);\n  return sdSphere(q, r, o);\n}\n\nfloat opDisplace(vec3 p, float r, vec3 o)\n{\n  float d1 = sdSphere(p, r, o);\n  float d2 = sin(p.x)*sin(p.y)*sin(p.z) * cos(iTime);\n  return d1 + d2;\n}\n\nfloat scene(vec3 p) {\n  float d1 = sdSphere(p, 1., vec3(0, -1, 0));\n  float d2 = sdSphere(p, 0.75, vec3(0, 0.5, 0));\n  //return d1;\n  //return d2;\n  //return opUnion(d1, d2);\n  //return opSmoothUnion(d1, d2, 0.2);\n  //return opIntersection(d1, d2);\n  //return opSmoothIntersection(d1, d2, 0.2);\n  //return opSubtraction(d1, d2);\n  //return opSmoothSubtraction(d1, d2, 0.2);\n  //return opSubtraction2(d1, d2);\n  //return opSmoothSubtraction2(d1, d2, 0.2);\n  //return opSymX(p, 1., vec3(1, 0, 0));\n  //return opSymXZ(p, 1., vec3(1, 0, 1));\n  //return opRep(p, 1., vec3(0), vec3(8));\n  //return opRepLim(p, 0.5, vec3(0), 2., vec3(1, 0, 1));\n  return opDisplace(p, 1., vec3(0));\n}\n\nfloat rayMarch(vec3 ro, vec3 rd) {\n  float depth = MIN_DIST;\n  float d; // distance ray has travelled\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    d = scene(p);\n    depth += d;\n    if (d < PRECISION || depth > MAX_DIST) break;\n  }\n  \n  d = depth;\n  \n  return d;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1, -1) * EPSILON;\n    return normalize(\n      e.xyy * scene(p + e.xyy) +\n      e.yyx * scene(p + e.yyx) +\n      e.yxy * scene(p + e.yxy) +\n      e.xxx * scene(p + e.xxx));\n}\n\nmat3 camera(vec3 cameraPos, vec3 lookAtPoint) {\n\tvec3 cd = normalize(lookAtPoint - cameraPos);\n\tvec3 cr = normalize(cross(vec3(0, 1, 0), cd));\n\tvec3 cu = normalize(cross(cd, cr));\n\t\n\treturn mat3(-cr, cu, -cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n  vec2 mouseUV = iMouse.xy/iResolution.xy;\n  \n  if (mouseUV == vec2(0.0)) mouseUV = vec2(0.5); // trick to center mouse on page load\n\n  vec3 col = vec3(0);\n  vec3 lp = vec3(0);\n  vec3 ro = vec3(0, 0, 3); // ray origin that represents camera position\n  \n  float cameraRadius = 2.;\n  ro.yz = ro.yz * cameraRadius * rotate2d(mix(-PI/2., PI/2., mouseUV.y));\n  ro.xz = ro.xz * rotate2d(mix(-PI, PI, mouseUV.x)) + vec2(lp.x, lp.z);\n\n  vec3 rd = camera(ro, lp) * normalize(vec3(uv, -1)); // ray direction\n\n  float d = rayMarch(ro, rd); // signed distance value to closest object\n\n  if (d > MAX_DIST) {\n    col = COLOR_BACKGROUND; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * d; // point discovered from ray marching\n    vec3 normal = calcNormal(p); // surface normal\n\n    vec3 lightPosition = vec3(0, 2, 2);\n    vec3 lightDirection = normalize(lightPosition - p) * .65; // The 0.65 is used to decrease the light intensity a bit\n\n    float dif = clamp(dot(normal, lightDirection), 0., 1.) * 0.5 + 0.5; // diffuse reflection mapped to values between 0.5 and 1.0\n\n    col = vec3(dif) + COLOR_AMBIENT;    \n  }\n\n  fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}