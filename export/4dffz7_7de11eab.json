{"ver":"0.1","info":{"id":"4dffz7","date":"1495245158","viewed":161,"name":"SickBow's Mandelbrot","username":"sickbow","description":"mandelbrot fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mandelbrot (vec2 uv, inout vec3 pixel,float iters){\n    vec2 c = uv;\t//complex number c to be tested (screen coordinates)\n  \tvec2 z = vec2(0.); //recursive input\n    float iterations2 = 0.;\n    float top = iters;\n    \n    for(float iterations = 0.; z.x*z.x + z.y*z.y <= 4.0 && iterations <= top; iterations ++){\n        \n        z = vec2(z.x*z.x - z.y*z.y + c.x, 2.0*z.x*z.y + c.y);\n        iterations2 +=1.;\n\n    }\n    \n    pixel = vec3(1.0-iterations2/(top)-0.25,0.25,0.25); //play with these RGB values\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    \n    float scaleFactor = 0.0;\n    vec2 uv;\n    \n    vec3 backGround = vec3(0,0,0);\n  \tvec3 pixel = backGround;\n\tuv.y = 2.0*(fragCoord.y - 0.5*iResolution.y)/iResolution.y;\n\tuv.x = 2.0*(fragCoord.x - 0.6*iResolution.x)/iResolution.y;   \n    \n    scaleFactor = 1.0 + iTime\n    \n    \n    uv=uv/scaleFactor;\n    \n    \n    float iters = 0.;\n    iters = 250.0;// * sin(iTime*10.) + 50.0; //play with this to change how it looks \n    \n    mandelbrot(uv,pixel,iters);\n    \n    \n    fragColor = vec4(pixel,1.0);\n}","name":"Image","description":"","type":"image"}]}