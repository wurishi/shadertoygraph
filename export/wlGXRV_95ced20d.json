{"ver":"0.1","info":{"id":"wlGXRV","date":"1583147961","viewed":153,"name":"PTB Sinusoidal Grating Shader","username":"iandol","description":"This is the shader from Psychtoolbox converted into a shadertoy, so you can tinker with it and learn how it works by playing with the parameters. See DriftDemo4.m in MATLAB for the PTB version.\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["psychtoolbox","psychophysics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//code for shadertoy.com\n//this is port of the procedural shader code that is demonstrated in DriftDemo4.m\n//\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    /////////////////////////////////////--VARIABLES\n    //In PTB variables will come from the MATLAB \n    //calling code via the vertex shader. But\n    //in shadertoy you declare them directly.\n    //\n    // some constants\n    const float twopi = 2.0 * 3.141592654;\n    const float deg2rad = 3.141592654 / 180.0;\n\t// grating frequency\n\tfloat FreqTwoPi = 0.02 * twopi;\n    // grating phase, here varies using playback time\n\tfloat Phase = deg2rad * -iTime*200.0;\n    // modulation color (default is [1 1 1] in PTB \n    // it is the 8th parameter you pass to Screen('DrawTexture'))\n    vec4 modulateColor = vec4( 1.0, 1.0, 1.0, 1.0 );\n    // amplitude in line 80 of DriftDemo4.m which says: \n    // a setting of 0.5 means that the grating will extend over a range from -0.5\n    // up to 0.5, i.e., it will cover a total range of 1.0 == 100% of the total\n    // displayable range. amplitude is like contrast / 2.\n\tfloat amplitude = 0.5;\n    // premultiplier, default is 1.0 in line 86 of CreateProceduralSineGrating.m\n    // but by setting contrastPreMultiplicator to 0.5 you can make amplitude 0-1 range.\n    float contrastPreMultiplicator = 1.0;\n    // Offset, line 104 of DriftDemo4.m or line 73 of CreateProceduralSineGrating.m\n    vec4 Offset = vec4(0.5, 0.5, 0.5, 0.0); \n\n    ////////////////////////////////////--CODE\n    // get our base color, line 53 of BasicSineGratingShader.vert.txt\n    vec4 baseColor = modulateColor * amplitude * contrastPreMultiplicator;\n    \n\t// create our sinusoid, line 21 of BasicSineGratingShader.frag.txt\n\tfloat sv = sin( fragCoord.x * FreqTwoPi + Phase );\n\n\t// blend our color with the sinusoidal signal, line 26 of BasicSineGratingShader.frag.txt\n    // off to the display, byebye little pixel!\n    fragColor = (baseColor * sv) + Offset;\n}","name":"Image","description":"","type":"image"}]}