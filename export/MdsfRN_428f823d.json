{"ver":"0.1","info":{"id":"MdsfRN","date":"1550917555","viewed":463,"name":"[ Complex ] - Drops","username":"Friend","description":"Plane displacement using complex maps","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["3d","complex","drops","maps"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define res_           iResolution\n#define time_          iTime\n#define pi_            3.14159265\n#define tau_           2.*pi_\n\n#define dom(f,s)       (2. * f.xy - res_.xy) / res_.y * s\n#define ry(a)          mat3(cos(a),0.,-sin(a),0.,1.,0.,sin(a),0.,cos(a))\n#define rz(a)          mat3(cos(a),-sin(a),0.,sin(a),cos(a),0.,0.,0.,1.)\n    \nfloat de(vec3 p);\nvec3  gradient(vec3 p);\nmat3  look_at(vec3 ro, vec3 ta, float roll);\nfloat fog_exp2(float dist, float dens);\nvec3  blackbody(float Temp);\n\nvec2  zconj(vec2 z);\nvec2  zmul(vec2 z0, vec2 z1);\n\nfloat hash(vec2 p);\nfloat hashm(vec2 p);\n\n#define march_steps_   128\n#define max_range_     50000.\n#define hit_perc_      .01\n#define micro_step_    1.\n#define grad_perc_     .1\n\n#define droplet_num_   15\n//#define DEBUG\n\nfloat wavlet(\n    vec3 p,       // Wavelet position\n    float r       // Wavelet radius\n) {\n    // Transformation used for displacement\n    vec2 z = p.xz;\n    vec2 fz = zmul(.8 * z, zconj(z));\n   \t\n    float a = 1.; float fq = .000025 + pow(r, -2.); float flowv = time_ * 3.;\n    \n    float disp = a * sin(fq * fz.x - flowv);\n\treturn length(p.xz) - r - sin(time_) * r/4. < hit_perc_ ? disp : 0.;\n}\n\nfloat de(vec3 p) {\n    vec2 z = p.xz;\n    \n    float d_pl = p.y;\n    \n    for(int i = 0; i < droplet_num_; i++) {\n        vec3 rp = vec3(\n            hashm( vec2(i+1, (i+1)*13) ) * 4500.,\n            0.,\n            hashm( vec2(i-1, (i-1)*-7) ) * 4500.\n        ); \n    \td_pl += wavlet(\n            p - rp,\n            hash(vec2(i+2, i*3)) * 800.\n        ); \n    }\n\t\n    return d_pl;\n}\n\nvoid mainImage(out vec4 o, vec2 f) {\n\tvec2 p  = dom(f, 1.); vec2 np = f / res_.xy;\n    \n    // Camera\n    // ----------------\n    float r = 785.;\n    float speed = .3;\n    vec3 ro = vec3(r * cos(time_ * speed), 6.*r , r * sin(time_ * speed));\n    vec3 target = vec3(0.);\n    mat3 lam = look_at(ro, target, 0.);    \n\tvec3 rd = normalize(lam * vec3(p.xy, .8));\n    \n    // Raymarch\n    // ----------------\n    vec3 pos, nor = vec3(0.);\n    float d, step_ , id= 0.;   \n    for(int i = 0; i < march_steps_; i++) {\n    \tpos    = ro + step_ * rd;\n        d      = de(pos);\n        step_ += d * micro_step_;\n    \tif(d < hit_perc_ || d > max_range_) break;    \n    }\n    \n    // Shading\n    // ----------------\n    vec3 c = vec3(0.);\n    if(step_ > 0.) {\n        pos = ro + step_ * rd;\n \t\tnor = gradient(pos);\n        \n        vec3  lig  = normalize(vec3(.345, .345, .345));\n        float diff = clamp(dot(rd, nor), 0., 1.);\n        float spec = clamp(dot(nor, lig), 0., 1.);\n        float fresnel = clamp(dot(nor, rd), 0.0, 1.0);\n        float leq  = diff + 2.*spec + fresnel;\n        \n        vec3 mat = vec3(.2, .4, .7);\n        mat = mix(mat, vec3(0., 1.2, 0.8), .5*np.x);\n        \n        c = mix(c, vec3(1.2), leq * mat);\n        c += smoothstep(0., 8.1, pos.y);\n    }\n\t\n    // Fog\n    // -----------------\n    c = mix(c, vec3(0.), fog_exp2(step_, .00009));\n    \n    // Post-processing\n\t// -----------------\n    c = pow(c, vec3(2.5));\n\t\n    o = vec4(c, 1.);\n}\n\nvec3 gradient(vec3 p) {\n    vec2 e = vec2(grad_perc_, .0);\n    return normalize(vec3(\n        de(p+e.xyy)-de(p-e.xyy),\n        de(p+e.yxy)-de(p-e.yxy),\n        de(p+e.yyx)-de(p-e.yyx)\n    ));\n}\n\n\nmat3 look_at(vec3 ro, vec3 ta, float roll) {\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(sin(roll), cos(roll), 0.)));\n    vec3 vv = normalize(cross(uu, ww));\n    return mat3(uu, vv, ww);\n}\n\nfloat fog_exp2(float dist, float dens) {\n  const float log2v = -1.442695;\n  float d = dens * dist;\n  return 1. - clamp(exp2(d * d * log2v), 0., 1.);\n}\n\nvec3 blackbody(float temp) {\n\tvec3 col = vec3(255.);\n    \n    col.x = 56100000. * pow(temp, -1.5) + 148.;\n   \tcol.y = 100.04 * log(temp) - 623.6;\n   \t\n    if(temp > 6500.) col.y = 35200000. * pow(temp,(-3. / 2.)) + 184.;\n   \t\n    col.z = 194.18 * log(temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.) / 255.;\n    \n    if (temp < 1000.) col *= temp / 1000.;\n   \t\n    return col;\n}\n\n\nvec2 zmul(vec2 z0, vec2 z1)  {\n    return vec2(\n        z0.x * z1.x - z0.y * z1.y,\n        z0.x * z1.y + z0.y * z1.x\n    );\n}\n\nvec2 zconj(vec2 z) { \n    return vec2(z.x, -z.y); \n}\n\nfloat hash(vec2 p) {\n    return fract(sin(p.x*15.32+p.y*5.78) * 43758.236237153);\n}\n\nfloat hashm(vec2 p) {\n\tfloat h = dot(p,vec2(127.1,311.7));\n    return -1.0 + 2.0 * fract(sin(h)*43758.5453123);\n}","name":"Image","description":"","type":"image"}]}