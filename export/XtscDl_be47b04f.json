{"ver":"0.1","info":{"id":"XtscDl","date":"1506976596","viewed":943,"name":"Exploding Mandelbrot","username":"Chris_M_Thomasson","description":"Using the smooth coloring code created by Inigo Quilez:\n\nhttp://iquilezles.org/articles/mset_smooth/mset_smooth.htm\n\nAn implementation of my Exploding Mandelbrot set in a shader:\n\nhttp://www.fractalforums.com/index.php?action=gallery;sa=view;id=20582","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot","field","vector","scale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Very nice coloring, zoom and anti-aliasing by:\n\n// inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n// See here for more information on smooth iteration count:\n//\n// https://iquilezles.org/articles/msetsmooth\n\n\n// Exploding Pulsing Mandelbrot Set by Chris M. Thomasson\n// Orbit trap color by Chris M. Thomasson\n// http://www.fractalforums.com/index.php?action=gallery;sa=view;id=20582\n\nvec2 ct_cmul(in vec2 p0, in vec2 p1)\n{\n    return vec2(p0.x * p1.x - p0.y * p1.y, p0.x * p1.y + p0.y * p1.x);\n}\n\n\n// increase this if you have a very fast GPU\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))/float(AA)))/iResolution.y;\n        float w = float(AA*m+n);\n        float time = iTime + 0.5*(1.0/24.0)*w/float(AA*AA);\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n        float time = iTime;\n#endif\n    \n        float zoo = 1.0 + 0.38*cos(.07*time);\n        float coa = cos( 0.15*(1.0-zoo)*time );\n        float sia = sin( 0.15*(1.0-zoo)*time );\n        zoo = pow( zoo,8.0);\n        vec2 xy = vec2( p.x*coa-p.y*sia, p.x*sia+p.y*coa);\n        vec2 c = vec2(-.745,.186) + xy*zoo;\n\n        float B = 200.0;// + abs(cos(iTime * .25)) * 30.0;\n        float l = 0.0;\n        float ct_o = 999999999.0;\n\t    vec2 z  = vec2(0.0);\n        int ct_retry = 0;\n        int ct_switch = 0;\n        for( int i=0; i<256; i++ )\n        {\n            // z = z*z + c\t\t\n    \t\tz = vec2( z.x*z.x - z.y*z.y * (1.0 + abs(cos(iTime * 2.0)) * .1), (2.0 + abs(sin(iTime * 3.0)) * .1)*z.x*z.y ) + c;\n            ct_o = min(ct_o, sqrt(z.x * z.x + z.y * z.y));\n\t\t\n    \t\tif(z.x * z.x + z.y * z.y > B)\n            {\n                // Chris M. Thomassons Exploder!\n                if (ct_retry < 7)\n                {\n                    if (ct_switch == 0)\n                    {\n                        z = ct_cmul(z, vec2(.02 + abs(cos(iTime * .5)) * .02, .07));\n                        ct_switch = 1;\n                    }\n                    \n                    else\n                    {\n                        z = ct_cmul(z, vec2(-.04, -(.04 + abs(sin(iTime)) * .041)));\n                        ct_switch = 0;\n                    }\n                    \n                \t++ct_retry;\n                \tcontinue;\n                }\n                break;\n            }\n\n    \t\tl += 1.0;\n        }\n\n    \t// ------------------------------------------------------\n        // smooth interation count\n    \t//float sl = l - log(log(length(z))/log(B))/log(2.0);\n        \n        // equivalent optimized smooth interation count\n    \tfloat sl = l - log2(log2(dot(z,z))) + 4.0; \n    \t// ------------------------------------------------------\n\t\n        float al = smoothstep( -5.0, 0.0, cos(3.14*iTime) );\n        l = mix( l, sl, al );\n\n        // CT: added some color wrt ct_o variable.\n        col += 0.5 + 0.5*cos( 3.0 + l*0.15 + vec3(.5 + cos(3.14*iTime) * .5, ct_o * l * .05, 0));\n#if AA>1\n    }\n    col /= float(AA*AA);\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}