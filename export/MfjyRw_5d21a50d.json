{"ver":"0.1","info":{"id":"MfjyRw","date":"1722106547","viewed":22,"name":"pixel transition shader","username":"nebrob","description":"pixel transition shader","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pixeltransitionshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CELLS 50.0\n#define STEPS 50.0\n#define COLOR1 vec3(0.067,0.149,0.184)\n#define COLOR2 vec3(0.161,0.263,0.349)\n#define STROKE_WIDTH .05\n#define STROKE_OPACITY .15\n\nvec2 ratio(vec2 ps) {\n\tfloat x = ps.x;\n\tfloat y = ps.y;\n\tvec2 ratio = vec2(1, 1);\n\tif (x > y)\n\t\tratio = vec2(1, y / x);\n\telse if (y > x)\n\t\tratio = vec2(y / x, 1);\n\treturn ratio;\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cellSize = 1.0 / CELLS;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 nUv = uv * vec2(iResolution.x / iResolution.y, 1.);\n    \n    vec4 tex = texture(iChannel0, nUv);\n   \n    \n    float progress = (sin(iTime * 1.2) + 1. + (1. / CELLS)) * 0.5;\n    \n    vec2 sUv = fract(nUv * (1. / cellSize));\n\n    float distToEdge = min(min(sUv.x, 1. - sUv.x), min(sUv.y, 1. - sUv.y));\n\t\tfloat strokeFactor = smoothstep(STROKE_WIDTH - 0.05 * STROKE_WIDTH, STROKE_WIDTH + 0.05 * STROKE_WIDTH, distToEdge);\n    \n    vec2 pUv = nUv;\n    \n    pUv -= mod(pUv, cellSize);\n\t\t\n    float stepProgress = mod(progress, 1. / cellSize);\n    float fadeProgress = abs(pUv.y - 0.5) + stepProgress;\n    fadeProgress = pow(fadeProgress, 5.);\n    float fadeProgress2 = pow(fadeProgress, 2.);\n    float fadeProgress3 = pow(fadeProgress2, 2.);\n    float fadeProgress4 = pow(fadeProgress3, 2.);\n\n    // pattern\n    float r = max(0.07, random(pUv));\n    float p = 1. - step(fadeProgress, r);\n    float p2 = 1. - step(fadeProgress2, r);\n    float p3 = 1. - step(fadeProgress3, r);\n    float p4 = 1. - step(fadeProgress4, r);\n    \n    float rt = mix(p2, p3, stepProgress);\n    vec3 pColor = mix(COLOR2, COLOR1, p3);\n    \n    // Output to screen\n    fragColor = vec4(mix(tex.rgb, pColor, p2), 1.0);\n    fragColor.xyz += mix(vec3(1.), vec3(0.), strokeFactor) * (p) * (1. - p4) * STROKE_OPACITY;\n}","name":"Image","description":"","type":"image"}]}