{"ver":"0.1","info":{"id":"XXsBWN","date":"1728407701","viewed":31,"name":"Moving Nebula","username":"DeCell","description":"Moving Nebula","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["space","nebula","lygia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://i.imgur.com/Ru3Rn8y.png should be used in iChanne0\n\n/*\n    This shader was composed using the following elements from LYGIA Shader library ( https://lygia.xyz )\n\n        * lygia/color/blend/colorDodge.glsl\n\n    LYGIA is dual-licensed under the [Prosperity License](https://prosperitylicense.com/versions/3.0.0) \n    and the [Patron License](https://lygia.xyz/license) for [sponsors](https://github.com/sponsors/patriciogonzalezvivo) \n    and [contributors](https://github.com/patriciogonzalezvivo/lygia/graphs/contributors).\n\n    Those are automatically added to the [Patron License](https://lygia.xyz/license) and they (only they) \n    can ignore and any non-commercial rule of the [Prosperity License](https://prosperitylicense.com/versions/3.0.0)\n    software (please take a look at the exceptions).\n\n    It's also possible to get a permanent commercial license hooked to a single and specific version of LYGIA.\n*/\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#ifndef FNC_BLENDCOLORDODGE\n#define FNC_BLENDCOLORDODGE\nfloat blendColorDodge(in float base, in float blend) { return (blend == 1.)? blend: min( base / (1. - blend), 1.); }\nvec3  blendColorDodge(in vec3 base, in vec3 blend) {\n    return vec3(blendColorDodge(base.r, blend.r),\n                blendColorDodge(base.g, blend.g),\n                blendColorDodge(base.b, blend.b));\n}\nvec3  blendColorDodge(in vec3 base, in vec3 blend, in float opacity) { return (blendColorDodge(base, blend) * opacity + base * (1. - opacity)); }\n#endif\n\n\n// cosine based palette, 4 vec3 params\nvec3 palette(in float t)\n{\n    vec3 a = vec3(0.438, 0.298, 0.588);\n    vec3 b = vec3(0.298, 0.188, -0.202);\n    vec3 c = vec3(-3.703, -2.543, 3.477);\n    vec3 d = vec3(1.435, 1.769, 2.087);\n\n    return a + b * cos(6.283185 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){ // https://youtu.be/db-qfZBhBe4\n    // Coords\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    vec4 col = vec4(1.);\n\n    vec3 spaceBackgroundMain = vec3(1.);\n\n    for (float i = -1.; i < 2.; i += 2.) {\n        //#region highlight noise\n\n        // offset noise texture for movement\n        vec2 offsetedCoordinate = uv;\n        offsetedCoordinate.x += cos(iTime / (32. * i));\n        offsetedCoordinate.y += sin(iTime / (32. * i));\n\n        vec4 highlightNoise = texture(iChannel0, offsetedCoordinate);\n\n        // fine tune it\n        highlightNoise.rgb = smoothstep(0.3, .75, highlightNoise.rgb) * .6;\n\n        highlightNoise.rgb += fract(highlightNoise).rgb * -fract(highlightNoise + iTime / 8.).rgb / 4.;\n\n        //#endregion\n\n        //#region nebula color noise\n\n        // get the noise (upside down so it doesnt look reused)\n        vec4 colorNoise = texture(iChannel0, uv * (i / 2.));\n\n        // fine tuning the noise\n        colorNoise.rgb = smoothstep(0.35, .8, colorNoise.rgb);\n\n        // color setting (should use palette)\n        colorNoise.rgb *= palette(i);\n\n        //#endregion\n\n        vec3 nebula = blendColorDodge(colorNoise.rgb, highlightNoise.rgb);\n\n        vec4 maskNoise = texture(iChannel0, (-uv / 10.) * i);\n\n        maskNoise.rgb = smoothstep(0.25, 0.80, maskNoise).rgb;\n\n        spaceBackgroundMain = mix(nebula, spaceBackgroundMain, .3).rgb;\n    }\n\n    col.rgb = spaceBackgroundMain.rgb;\n\n    fragColor.rgb = col.rgb;\n}\n","name":"Image","description":"","type":"image"}]}