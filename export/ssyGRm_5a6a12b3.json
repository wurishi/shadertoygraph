{"ver":"0.1","info":{"id":"ssyGRm","date":"1631248413","viewed":102,"name":"t-spin","username":"HaleyHalcyon","description":"a11","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28318530718\n#define MINSCALE 0.001\n#define SHAPECOUNT 8u\n#define TILE true\n\nfloat fold(float x) {\n    return abs(2. * fract(x) - 1.);\n}\n\n// returns vec2(mask, distanceFromCenter)\nvec2 tshape(vec2 uv, float angle) {\n    if (TILE) {\n    uv = mod(uv + 6.0, 12.0) - 6.0;\n    }\n    vec2 uvRot = vec2(\n        uv.x * cos(angle * TAU) + uv.y * sin(angle * TAU),\n        uv.x * sin(angle * TAU) - uv.y * cos(angle * TAU)\n    );\n    \n    float rectHriz = max(0., max(abs(uvRot.x) - 2., abs(uvRot.y)));\n    float rectVert = max(0., max(abs(uvRot.x), abs(uvRot.y) - 2.));\n    if (uvRot.y < 0.) {rectVert = rectHriz;}\n    float value = 1. - min(rectHriz, rectVert);\n    float mask = step(0.0, value);\n    return vec2(mask, mask * (value));\n}\n\nfloat timeAdj(float time){\n    return 0.25 * (smoothstep(0.0, 0.2, fract(4. * time)) + floor(4. * time));\n}\nvec3 hex(int hexcode){\n    return vec3(\n        (hexcode >> 16) & 255,\n        (hexcode >> 8) & 255,\n        hexcode & 255\n    ) / 255.;\n}\nvec3 tcolor(vec2 md, float layer, float time) {\n    vec3 color0Base  = hex(0x4a089a);\n    vec3 color0Light = hex(0x7d3ecd);\n    vec3 color1Base  = hex(0x9a2cC3);\n    vec3 color1Light = hex(0xfc69f8);\n    \n    float mixFactor = step(fract(layer * -5.6), 0.3);\n    \n    vec3 colorBase  = mix(color0Base , color1Base , mixFactor);\n    vec3 colorLight = mix(color0Light, color1Light, mixFactor);\n    \n    return mix(\n        colorBase, colorLight, 0.5 + 0.5 * sin(TAU * fract(md.y + 2. * time))\n    );\n}\n\nfloat grid(vec2 uv, float scale) {\n    return max(fold(uv.x * scale), fold(uv.y * scale));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = fract(iTime / 4.);\n    // Scales coords so that the diagonals are all dist 1 from center\n    float scale = length(iResolution.xy);\n    vec2 uv = (fragCoord / scale\n\t- (iResolution.xy / scale / 2.)) * 2.;\n    \n    float dist = length(uv);\n    \n    vec2 t = vec2(0);\n    uint i = 0u;\n    \n    for (; i < SHAPECOUNT; i++) {\n        float prog = (float(i) + time);\n        t = tshape(\n            uv / (exp(prog) * MINSCALE),\n            timeAdj(time + float(i) * -0.01)\n        );\n        if (t.x > 0.) {\n            break;\n        }\n    }\n    // Time varying pixel color\n    vec3 col = tcolor(t, float(i) + time, time);\n    float gridV = step(0.9, grid(uv, 12.0 * exp2(fract(time))));\n    gridV = mix(gridV, step(0.9, grid(uv, 6.0 * exp2(fract(time)))), fract(time));\n    col -= 0.05 * gridV;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}