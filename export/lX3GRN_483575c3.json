{"ver":"0.1","info":{"id":"lX3GRN","date":"1716159017","viewed":55,"name":"Point Containment - Wedge","username":"natevm","description":"Sample code for an point-in-wedge test, returning the per-vertex support function weights.\nThis implementation uses a newton-raphson iteration to handle the bilinear faces. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["volume","point","finite","element","containment","query"],"hasliked":0,"parentid":"X3t3R8","parentname":"Point Containment - Pyramid"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2024 Nate Morrical\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// More point containment queries here: https://www.shadertoy.com/playlist/fXdfzX\n\n#if HW_PERFORMANCE==0\n#define NEWTON_ITERATIONS 3\n#define NUM_STEPS 16\n#else\n#define NEWTON_ITERATIONS 3\n#define NUM_STEPS 32    \n#endif\n\n#define CONVERGED_ERROR 1e-3\n\n#define EXPOSURE 2.5\n\n// Node positions, with \"z\" up and data values stored in \"w\" \nstruct Wedge {\n    // Bottom triangle (counter-clockwise order)\n    vec4 v0, v1, v2;\n    \n    // Top Triangle (counter-clockwise order)\n    vec4 v3, v4, v5;\n};\n\nbool interpolate(vec3 P, in Wedge e, out float value) {\n    // Initialize our canonical coordinates to be in the center of the element\n    // We'll iteratively refine these with Newton's method to match the given \"P\"\n    vec3 rst_curr = vec3(0.25, 0.25, 0.5);\n    vec3 rst = vec3(0.25, 0.25, 0.5);\n\n    // The final support function values\n    float w0, w1, w2, w3, w4, w5;\n\n    // Iteration for Newton's method\n    bool converged = false;\n    for (int iteration = 0; iteration < NEWTON_ITERATIONS; iteration++) {    \n        // Compute support function values for the current position in \"rst\" space\n        // Note for future optimization, these follow a CCW order...\n        w0 = (1.0 - rst.x - rst.y) * (1.0 - rst.z);\n        w1 = rst.x * (1.0 - rst.z);\n        w2 = rst.y * (1.0 - rst.z);\n        w3 = (1.0 - rst.x - rst.y) * rst.z;\n        w4 = rst.x * rst.z;\n        w5 = rst.y * rst.z;\n        \n        // If the \"rst\" location matches the query point, we can now use our support function values\n        if (converged) break;\n\n        // Determine if the current cannonical coordinates accurately reflect the given query point\n        vec3 fcol = e.v0.xyz * w0 + e.v1.xyz * w1 + e.v2.xyz * w2 \n                  + e.v3.xyz * w3 + e.v4.xyz * w4 + e.v5.xyz * w5;\n        fcol -= P; // World space position relative to the given query point. We want this to be zero.\n        \n        // rst-derivatives\n        vec3 dw0 = vec3(-1.0 + rst.z, -1.0 + rst.z, -1.0 + rst.x + rst.y);\n        vec3 dw1 = vec3( 1.0 - rst.z, 0.0, -rst.x);\n        vec3 dw2 = vec3( 0.0, 1.0 - rst.z, -rst.y);\n        vec3 dw3 = vec3(-rst.z, -rst.z, 1.0 - rst.x - rst.y);\n        vec3 dw4 = vec3( rst.z, 0.0, rst.x);\n        vec3 dw5 = vec3( 0.0, rst.z, rst.y);\n        \n        // Now get derivatives in world space\n        vec3 rcol = e.v0.xyz * dw0.x + e.v1.xyz * dw1.x + e.v2.xyz * dw2.x \n                  + e.v3.xyz * dw3.x + e.v4.xyz * dw4.x + e.v5.xyz * dw5.x;\n        vec3 scol = e.v0.xyz * dw0.y + e.v1.xyz * dw1.y + e.v2.xyz * dw2.y \n                  + e.v3.xyz * dw3.y + e.v4.xyz * dw4.y + e.v5.xyz * dw5.y;\n        vec3 tcol = e.v0.xyz * dw0.z + e.v1.xyz * dw1.z + e.v2.xyz * dw2.z \n                  + e.v3.xyz * dw3.z + e.v4.xyz * dw4.z + e.v5.xyz * dw5.z;\n\n        // Compute determinants and generate improvements\n        float d = determinant(mat3(rcol, scol, tcol));\n        if (abs(d) < 1e-20) {\n            return false; // Determinant too small, likely singular\n        }\n        // Newton Raphson update formula, x_new = x_old - f(x) / f'(x), but generalized to \n        // multiple dimensions. fcol has principle values, while other two contain gradients, \n        // so the ratio effectively calculates changes needed using Cramer's rule.\n        rst.x = rst_curr.x - determinant(mat3(fcol, scol, tcol)) / d;\n        rst.y = rst_curr.y - determinant(mat3(rcol, fcol, tcol)) / d;\n        rst.z = rst_curr.z - determinant(mat3(rcol, scol, fcol)) / d;\n        \n        // Check for convergence\n        if (all(lessThan(abs(rst - rst_curr), vec3(CONVERGED_ERROR))))\n            converged = true;\n\n        rst_curr = rst; // Commit the updated canonical coordinates\n    }\n    \n    // Check for containment of the final cannonical point location\n    if (any(lessThan(vec4(w0, w1, w2, w3), vec4(0.0))) || w5 < 0.0) return false;\n    \n    // Interpolate the values stored on the element nodes\n    value = e.v0.w * w0 + e.v1.w * w1 + e.v2.w * w2 \n          + e.v3.w * w3 + e.v4.w * w4 + e.v5.w * w5;\n    return true;\n}\n\n\n//-----------------------------------------------------------------------------\n// Utils\n//-----------------------------------------------------------------------------\nvec3 viridis(float t) {\n    t = clamp(t, 0.0, 1.0);\n    const vec3 c0 = vec3(0.2777273272234177, 0.005407344544966578, 0.3340998053353061);\n    const vec3 c1 = vec3(0.1050930431085774, 1.404613529898575, 1.384590162594685);\n    const vec3 c2 = vec3(-0.3308618287255563, 0.214847559468213, 0.09509516302823659);\n    const vec3 c3 = vec3(-4.634230498983486, -5.799100973351585, -19.33244095627987);\n    const vec3 c4 = vec3(6.228269936347081, 14.17993336680509, 56.69055260068105);\n    const vec3 c5 = vec3(4.776384997670288, -13.74514537774601, -65.35303263337234);\n    const vec3 c6 = vec3(-5.435455855934631, 4.645852612178535, 26.3124352495832);\n\n    vec3 srgb = c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n    return pow(srgb, vec3(2.2));\n}\n\nvec4 over(vec4 a, vec4 b) {\n  vec4 result;\n  result.a = a.a + b.a * (1.f - a.a);\n  if (result.a == 0.f)\n    return a; // avoid NaN\n  result.rgb = (a.rgb * a.a + b.rgb * b.a * (1.f - a.a)) / result.a;\n  return result;\n}\n\n#define M_2PI 6.2831853071795865f\n#define M_GRC 0.61803398875f\n\n//-----------------------------------------------------------------------------\n// Main functions\n//-----------------------------------------------------------------------------\nWedge CreateWedge() {\n    Wedge w;\n    \n    float time = iTime + 10.0;\n    const float angle_offset = M_2PI / 3.0;\n    \n    // Bottom triangle\n    w.v0 = vec4(-1., .75*cos(1.0 * angle_offset + cos(iTime)), .75*sin(1.0 * angle_offset + cos(iTime)), (.5 + .5 * cos(time*0.1)));\n    w.v1 = vec4(-1., .75*cos(2.0 * angle_offset + cos(iTime)), .75*sin(2.0 * angle_offset + cos(iTime)), (.5 + .5 * cos(time*0.2)));\n    w.v2 = vec4(-1., .75*cos(3.0 * angle_offset + cos(iTime)), .75*sin(3.0 * angle_offset + cos(iTime)), (.5 + .5 * cos(time*0.3)));\n\n    // Top triangle of wedge\n    w.v3 = vec4(+1., .75*cos(1.0 * angle_offset + cos(iTime + 1.0)), .75*sin(1.0 * angle_offset + cos(iTime + 1.0)), (.5 + .5 * cos(time*0.4)));\n    w.v4 = vec4(+1., .75*cos(2.0 * angle_offset + cos(iTime + 1.0)), .75*sin(2.0 * angle_offset + cos(iTime + 1.0)), (.5 + .5 * cos(time*0.5)));\n    w.v5 = vec4(+1., .75*cos(3.0 * angle_offset + cos(iTime + 1.0)), .75*sin(3.0 * angle_offset + cos(iTime + 1.0)), (.5 + .5 * cos(time*0.6)));\n    \n    return w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x/ iResolution.y;\n           \n    float an = 0.25*iTime + 6.283185*iMouse.x/iResolution.x;\n    vec3 ro = vec3( 3.5*cos(an), 0.7, 3.5*sin(an) );\n    vec3 ta = vec3( 0.0, -0.1, 0.0 );\n    \n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    \n    // create view ray\n    vec3 rd = normalize( v.x*uu + v.y*vv + 3.0*ww );\n    \n    // create element\n    Wedge wed = CreateWedge();\n        \n\tvec4 color = vec4(.0);\n\t\n    float startRayOffset = 0.0f;\n    int frame = iFrame % 64;\n        \n    // blue noise\n    startRayOffset = texture(iChannel0, fragCoord / 1024.0f).r;\n    startRayOffset = fract(startRayOffset + float(frame) * M_GRC);\n\t\n\tfloat zMin         = 2.0;\n    float zMax         = 5.0;\n\tfloat step         = (zMax - zMin) / float(NUM_STEPS);\n    vec3 p             = ro + rd * zMin + rd * step * startRayOffset;    \n\tint zer = int(min(iTime, 0.)); // Hack to force loop unrolling.\n    for(int i = zer; i < NUM_STEPS; i++)\n\t{\n        float value; \n        if (interpolate(p, wed, value)) {\n            // Colormapped value and a hardcoded optical density\n            vec3 rgb = viridis(value) * EXPOSURE;\n            float density = 2.0;\n            float rho = 1.0 - exp(-density * step);\n            color = over(color, vec4(rgb, rho));\n            if (color.a > .95) break;\n        }\n\t\tp += rd*step;\n\t}\n         \n    // Composite over a background\n    color = over(color, vec4(vec3(0.01)*(1.0-0.2*length(v)), 1.0));\n\n    color.rgb = pow(color.rgb, vec3(1.0/2.2));\n    \n    // cheap dithering\n    color.rgb += sin(fragCoord.x*114.0)*sin(fragCoord.y*211.1)/512.0;\n\n    fragColor = color;\n\n}\n","name":"Image","description":"","type":"image"}]}