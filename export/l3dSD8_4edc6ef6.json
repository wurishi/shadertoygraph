{"ver":"0.1","info":{"id":"l3dSD8","date":"1718982170","viewed":52,"name":"steves-spheres","username":"stephendbuchanan","description":"Raymarching experiments","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"MXtSD8","parentname":"Basic raymarching template"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Shapes\"\n// ----------------\nfloat sdSphere(vec3 p, float size) {\n    return length(p) - size;\n}\n\nfloat sdBox(vec3 p, vec3 dimensions) {\n    vec3 q = abs(p) - dimensions;\n    return length(max(q,0.)) + min(max(q.x,max(q.y, q.z)), 0.);\n}\n\nfloat ground(vec3 p, float offsetDown) {\n    return p.y + offsetDown;\n}\n\n\n// Blending shapes\n// ----------------\nfloat simpleUnion(float a, float b) {\n    return min(a,b);\n}\n\nfloat smoothUnion(float a, float b, float blending) {\n    float k = blending;\n    float h = max(k - abs(a-b), 0.) / k;\n    return min(a,b) - h*h*h*k*(1.0 / 6.0);\n}\n\n// Rotations\n// ----------------\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n\n// Distance to the scene, i.e. composite everything\n// ----------------\nfloat map(vec3 p) {\n    vec3 spheresRepeat = fract(p) - 0.5;\n   \n    float spheres = sdSphere(spheresRepeat, 0.15);\n    \n    //vec3 spheresRepeat3\n    \n    //float box = sdBox(p, vec3(0.75));\n    \n    float ground = ground(p, 0.9);\n    \n    //return smoothUnion(sphere, ground, 3.0); \n    //return smoothUnion(spheres1, spheres2, 1.0);\n    //return spheres;\n    return smoothUnion(spheres,ground, 1.0);\n    //return simpleUnion(box, ground);\n    \n}\n\n\n// ----------------\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // Projected \"plane in scene\" with (0,0) at \"straight ahead\"\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    // Mouse coordinates in the same vector space as above\n    vec2 mouse = (iMouse.xy + 2. - iResolution.xy) / iResolution.y;\n\n    vec3 rayOrigin = vec3(0,0,-3.75); // camera back 3 units Z\n    vec3 rayDirection = normalize(vec3(uv, 1)); \n    vec3 colourOutput = vec3(0);\n    \n    float totalDistance = 0.;\n    \n    // Move camera by adjusting ray\n    //rayOrigin.x += (mouse.x+0.5) * 3.0;\n    //rayOrigin.xz *= rot2D(-iTime / 2.0);\n    //rayOrigin.xz *= rot2D(-iTime / 2.0);\n    //rayOrigin.xy *= rot2D(-iTime);\n    \n    \n    // Note translations must happen twice;\n    // once to the origin and once to the direction\n    rayOrigin.xz *= rot2D(iTime) * 0.1;\n    rayDirection.xz *= rot2D(iTime);\n    rayOrigin.xy *= rot2D(iTime/2.0);\n    rayDirection.xy *= rot2D(iTime/2.0);\n    \n    \n    // Actual raymarching\n    for (int i = 0; i < 80; i++) {\n        vec3 p = rayOrigin + rayDirection * totalDistance;\n        float d = map(p);\n        \n        totalDistance += d;\n        \n        // Early exit conditions\n        if (d < 0.001 || totalDistance > 100.) break;\n    }\n    \n    colourOutput = vec3(totalDistance * 0.05); // \"depth map\"\n    \n    // Output to screen\n    fragColor = vec4(colourOutput,1.0);\n}","name":"Image","description":"","type":"image"}]}