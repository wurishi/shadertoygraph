{"ver":"0.1","info":{"id":"Mdc3WS","date":"1451954508","viewed":1056,"name":"Game of Life 2","username":"sixstring982","description":"Game of Life. Mainly used as to demo buffers.","likes":11,"published":3,"flags":32,"usePreview":0,"tags":["automata","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(uv, 0.5 + 0.5 * sin(iTime), 1.0);\n    if (texture(iChannel0, uv).g < 0.5) {\n        fragColor = vec4(1.0) - vec4(fragColor.xyz, 0.0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define ON_COLOR vec4(0.0, 1.0, 0.0, 1.0)\n#define OFF_COLOR vec4(0.0, 0.0, 0.0, 1.0)\n\nbool isLive(in vec2 uv) {\n    return texture(iChannel0, uv).g > 0.0;\n}\n\nint countNeighbors(in vec2 c) {\n    int nc = 0;\n    vec2 n;\n    for (int x = -1; x <= 1; x++) {\n        for (int y = -1; y <= 1; y++) {\n            if (x != 0 || y != 0) {\n                n.x = c.x + float(x);\n                if (n.x < 0.0) {\n                    n.x = iResolution.x;\n                } else if (n.x >= iResolution.x) {\n                    n.x = 0.0;\n                }\n                \n                n.y = c.y + float(y);\n                if (n.y < 0.0) {\n                    n.y = iResolution.y;\n                } else if (n.y >= iResolution.y) {\n                    n.y = 0.0;\n                }\n                \n                n /= iResolution.xy;\n                \n                if (isLive(n)) {\n                    nc++;\n                }\n            }\n        }\n    }\n    \n    return nc;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if (length(iMouse.xy - fragCoord.xy) < 2.0) {\n        fragColor = ON_COLOR;\n        return;\n    }\n    \n    if (iTime < 1.0) {\n        if (fragCoord.x > 50.0 &&\n            fragCoord.x < 50.99 &&\n            fragCoord.y > 49.0 &&\n            fragCoord.y < 51.99) {\n            fragColor = ON_COLOR;\n        } else if (fragCoord.x > 51.0 &&\n                   fragCoord.x < 51.99 &&\n            \t   fragCoord.y > 51.0 &&\n                   fragCoord.y < 51.99) {\n            fragColor = ON_COLOR;\n        } else if (fragCoord.x > 49.0 &&\n                   fragCoord.x < 49.99 &&\n            \t   fragCoord.y > 50.0 &&\n                   fragCoord.y < 50.99) {\n            fragColor = ON_COLOR;\n        } else {\n            fragColor = OFF_COLOR;\n        }\n    } else {\n    \tbool live = isLive(uv);\n    \tint nc = countNeighbors(fragCoord);\n        if ((!live && nc == 3) ||\n        (live && (nc == 2 || nc == 3))) {\n        \tfragColor = ON_COLOR;\n    \t} else {\n\t        fragColor = OFF_COLOR;\n\t    }\n\t}\n}","name":"Buf A","description":"","type":"buffer"}]}