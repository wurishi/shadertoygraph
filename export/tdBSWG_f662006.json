{"ver":"0.1","info":{"id":"tdBSWG","date":"1554820156","viewed":117,"name":"OpShader Â· 20190409","username":"JacobJoaquin","description":"An experiment of patterns and masking.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["opart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define TAU 6.283185307179586\n#define PI 3.141592653589793\n\nfloat biToUni(float v)\n{\n    return (v + 1.0) * 0.5;\n}\n\n// Power curve\n// https://iquilezles.org/articles/functions\nfloat pcurve(in float x, in float a, in float b)\n{\n\tfloat k = pow(a + b, a + b) / (pow(a , a) * pow(b , b));\n\treturn k * pow(x, a) * pow(1.0 - x, b);\n}\n\nfloat maskIt(in float mask, in float v0, in float v1)\n{\n\treturn mask * v0 + (1.0 - mask) * v1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float nTiles = 3.0;\n\tfloat t = iTime * 0.125;\n\tvec2 st = gl_FragCoord.xy / iResolution.xy;\n\n\t// Create tile mask\n\tvec2 mst = fract(st * nTiles);\n\tfloat curve = biToUni(sin(iTime * TAU)) * 2.0 + 0.25;\n\tfloat vx = pcurve(mst.x, curve, curve);\n\tfloat vy = pcurve(mst.y, curve, curve);\n\tfloat mask = min(vx, vy);\n\tmask = step(0.5, mask);\n\n\t// Diagonal Stripes\n\tfloat rowst = biToUni(sin((st.x - st.y + t) * TAU * 4.0));\n\trowst = step(0.5, rowst);\n\tfloat colst = biToUni(cos((st.y + st.x + t) * TAU * 8.0));\n\tcolst = step(0.5, colst);\n\tfloat value = maskIt(mask, rowst, colst);\n\n    // Output\n\tvec3 color = vec3(value);\n\tfragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}