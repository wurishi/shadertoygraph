{"ver":"0.1","info":{"id":"wsVGzW","date":"1569866187","viewed":692,"name":"Simple KIFS Fractal","username":"Gijs","description":"Well not the simplest but it does illustrate the key ingredients.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","ifs","kifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float distanceUnitSquare(vec2 p){\n\tp = abs(p)-1.;\n    return max(p.x,p.y);\n}\n\nfloat distanceFractal(vec2 p){\n    float dis = 1e20;\n    float s = 1.;\n    \n    for(int i=0;i<iFrame/50%8;i++){\n        dis = min(dis, distanceUnitSquare(p)*s);\n\n        //perform folds\n        if(p.y>p.x)  p = vec2(p.y,p.x);\n        if(p.y<-p.x) p = vec2(-p.y,p.x);\n\n        p   *= 3.;\n        s   /= 3.;\n        p.x -= 4.;\n    }\n    \n    return dis;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 p = (fragCoord*2.-iResolution.xy)/iResolution.y*2.2;\n    \n    float d = distanceFractal(p);\n    \n    vec3 col = vec3(smoothstep(1./iResolution.x,0.,d));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}