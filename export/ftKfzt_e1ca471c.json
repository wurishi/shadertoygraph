{"ver":"0.1","info":{"id":"ftKfzt","date":"1665064755","viewed":74,"name":"Pixelsort via feedback","username":"Oneleven","description":"A study of how to use buffers and feedback in the Shadertoy.\nPixel sort seemed like a good algorithm for this case.\nAny comments and suggestions are welcome","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["feedback","buffer","pixelsort","pixelsort"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 cell(ivec2 p)\n{\n    return texelFetch(iChannel0, p, 0).rgb;\n}\n\n//https://stackoverflow.com/questions/596216/formula-to-determine-perceived-brightness-of-rgb-color\nfloat luma(vec3 p)\n{\n    return pow(0.299*p.r*p.r + 0.587*p.g*p.g + 0.114*p.b*p.b, 0.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    ivec2 px = ivec2(fragCoord);\n    ivec2 pxL = px + ivec2(-1.0, 0.0);\n    ivec2 pxR = px + ivec2(1.0, 0.0);\n    \n    vec3 pL = cell(pxL);\n    vec3 p = cell(px);\n    vec3 pR = cell(pxR);\n    \n    //prevent bleeding from outside of texture coordinates \n    if (pxL.x < 0) pL = vec3(100.0);\n    if (pxR.x > int(iResolution.x)) pR = vec3(-100.0);\n    \n    //compare pixels by pairs of two and alternate odd and even columns each frame\n    if ((px.x + iFrame) % 2 == 0)\n    {\n        if (luma(p) < luma(pR)) p = pR;\n    }\n    else\n    {\n        if (luma(p) > luma(pL)) p = pL;\n    }\n    \n    //feed starting image\n    if (iFrame < 20) p = texture(iChannel1, fragCoord/iResolution.xy).rgb;\n\n    fragColor = vec4(p,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}