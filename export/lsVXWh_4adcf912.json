{"ver":"0.1","info":{"id":"lsVXWh","date":"1464184865","viewed":1334,"name":"Diamond (internal reflection)","username":"jolle","description":"Diamond with internal reflection.\n\nUse camera to look around. You can change N to compare to glass/fake diamonds.","likes":23,"published":1,"flags":0,"usePreview":0,"tags":["reflection","refraction","cubemap","diamond","material"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define MAX_REFLECTIONS 24\n#define MULTISAMPLES 2 // Max 4\n\n// Refraction index\nconst float N = 2.55; // Diamond\n//const float N = 1.5; // Glass\n//const float N = 1.33; // Water\n\n// Shape of diamond, tiny changes affects total internal reflection patterns alot\nfloat toph = -1.075;\nfloat bottomh = 0.8;\nfloat ring1r = 0.7;\nfloat ring2h = -0.33;\nfloat ring2r = 1.4;\n\nconst float pi = 3.1415926536;\n\nvec3 ring1[9];\n\nstruct Triangle\n{\n    vec3 p;\n    vec3 e1;\n    vec3 e2;\n    vec3 n;\n};\nconst int num_tris = 24;\nTriangle tris[num_tris];\nmat3 rotation;\n\nfloat sq(float x) { return x * x; }\nfloat sq(vec3 x) { return dot(x, x); }\n\nvoid setup_diamond()\n{\n\tvec3 ring2[9];\n    for (int i = 0; i < 8; ++i)\n    {\n        float a2 = float(i) * pi / 4.0;\n        float a1 = a2 + pi / 8.0;\n        vec4 cs = cos(vec4(a1, a2, a1 - 0.5 * pi, a2 - 0.5 * pi));\n        ring1[i] = vec3(cs.x * ring1r, toph, cs.z * ring1r);\n        ring2[i] = vec3(cs.y * ring2r, ring2h, cs.w * ring2r);\n\t}\n    ring1[8] = ring1[0];\n    ring2[8] = ring2[0];\n    for (int i = 0; i < 8; ++i)\n    {\n        tris[i].p = vec3(0.0, bottomh, 0.0);\n        tris[i].e1 = ring2[i + 1] - tris[i].p;\n        tris[i].e2 = ring2[i] - tris[i].p;\n        tris[i + 8].p = ring1[i];\n        tris[i + 8].e1 = ring2[i] - ring1[i];\n        tris[i + 8].e2 = ring2[i + 1] - ring1[i];\n        tris[i + 16].p = ring2[i + 1];\n        tris[i + 16].e1 = ring1[i + 1] - ring2[i + 1];\n        tris[i + 16].e2 = ring1[i] - ring2[i + 1];\n    }    \n    for (int i = 0; i < num_tris; ++i)\n        tris[i].n = normalize(cross(tris[i].e1, tris[i].e2));           \n}\n\nfloat intersect_octagon(vec3 p, vec3 d, float nf, out vec3 rn)\n{\n    vec3 n = vec3(0.0, -nf, 0.0);\n    float dd = dot(-d, n);\n    if (dd <= 0.0)\n        return -1.0;\n    float t = dot(p - ring1[0], n) / dd;\n    vec3 pp = p + d * t;\n    for (int i = 0; i < 8; ++i)\n    \tif (dot(cross(pp - ring1[i], ring1[i + 1] - ring1[i]), n) * nf > 0.0)\n        \treturn -1.0;\n    rn = n;\n\treturn t;\n}\n\nfloat intersect_diamond(vec3 p, vec3 d, float nf, out vec3 n)\n{\n    float t = intersect_octagon(p, d, nf, n);\n    if (t > 0.0)\n        return t;\n    for (int i = 0; i < num_tris; ++i)\n    {\n        vec3 P = cross(d, tris[i].e2);\n        float det = dot(tris[i].e1, P) * nf;\n        if (det <= 0.0) continue;\n        vec3 T = p - tris[i].p;\n        float u = dot(T, P) * nf;\n        if (u < 0.0 || u > det) continue;\n        vec3 Q = cross(T, tris[i].e1);\n        float v = dot(d, Q) * nf;\n        if (v < 0.0 || u + v > det) continue;\n        float t = dot(tris[i].e2, Q) * nf;\n        if (t > 0.0)\n        {\n\t\t\tn = tris[i].n * nf;\n            return t / det;\n        }\n    }\n    return -1.0;\n}\n\nfloat fresnel(float n1, float n2, float cos_theta)\n{\n    float r = sq((n1 - n2) / (n1 + n2));\n    return r + (1.0 - r) * pow(1.0 - cos_theta, 5.0);\n}\n\nvec4 background(vec3 d)\n{\n    return textureLod(iChannel0, rotation * d, 0.0);\n}\n\nvec4 ray(vec3 p, vec3 d)\n{    \n    vec3 n;\n    float t = intersect_diamond(p, d, 1.0, n);\n    if (t <= 0.0)\n\t\treturn background(d);\n\n    float f = fresnel(1.0, N, dot(-d, n));\n    vec4 c = background(reflect(d, n)) * f;\n    float cr = 1.0 - f;\n\n    p += d * t;\n    d = refract(d, n, 1.0 / N);\n\n    for (int i = 0; i < MAX_REFLECTIONS; ++i)\n    {\n        if (cr < 0.05)\n            break;\n        t = intersect_diamond(p, d, -1.0, n);\n        if (t > 0.0)\n        {\n            vec3 r = refract(d, n, N);\n            if (r != vec3(0.0))\n            {\n                f = fresnel(N, 1.0, dot(-d, n));\n                c += background(r) * (1.0 - f) * cr;\n                cr *= f;\n            }\n            p += d * t;\n            d = reflect(d, n);\n        }\n    }\n    return c + background(d) * cr;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float r = iTime;\n    float ry = iMouse.x * 6.28 / iResolution.x + r;\n    float rx = (iMouse.y / iResolution.y - 0.5) * 3.0;\n\n    vec4 cs = cos(vec4(ry, rx, ry - pi * 0.5, rx - pi * 0.5));\n    vec3 forward = -vec3(cs.x * cs.y, cs.w, cs.z * cs.y);\n\tvec3 up = vec3(cs.x * cs.w, -cs.y, cs.z * cs.w);\n\tvec3 left = cross(up, forward);\n    vec3 eye = -forward * 5.0;\n\n    float zoom = 2.0;\n    vec2 uv = zoom * (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x;\n    vec3 dir = normalize(vec3(forward + uv.y * up + uv.x * left));\n\n    vec2 rcs = cos(vec2(r, r - 0.5 * pi));\n \trotation = mat3(\n        rcs.x, 0.0, -rcs.y,\n        0.0, 1.0, 0.0,\n        rcs.y, 0.0, rcs.x);\n\n    // early reject, bit hacky\n    if (sq(dot(dir, -eye) * dir) < sq(4.75))\n    {\n\t\tfragColor = background(dir);\n        return;\n    }\n\n    setup_diamond();\n\n    vec4 color = ray(eye, dir);\n#if MULTISAMPLES > 1\n    vec2 uvh = zoom * vec2(0.5) / iResolution.x;\n    color += ray(eye, normalize(forward + (uv.y + uvh.y) * up + (uv.x + uvh.x) * left));\n#if MULTISAMPLES > 2\n    color += ray(eye, normalize(forward + (uv.y + uvh.y) * up  + uv.x * left));\n#if MULTISAMPLES > 3\n    color += ray(eye, normalize(forward + uv.y * up + (uv.x + uvh.x) * left));\n#endif\n#endif\n    color /= float(MULTISAMPLES);\n#endif\n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}