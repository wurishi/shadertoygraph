{"ver":"0.1","info":{"id":"WlScDm","date":"1594486059","viewed":95,"name":"dkugl","username":"kloumpt","description":"feedback\n\nedit: now smoother","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["disco"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BPM 83.0\n#define PI 3.141592\n\nvec2 rot(vec2 p, float r) {\n    return vec2(\n        cos(r) * p.x - sin(r) * p.y,\n        cos(r) * p.y + sin(r) * p.x\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float t = iTime * BPM / 60.0; // * pow(2.0, floor(4.0 * iMouse.y / iResolution.y)); \n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(1.0);\n    \n    float ring = 0.5 - 0.75 * fract(t / 2.0);\n        \n    vec2 uv_col1 = uv;\n    uv_col1 -= 10.0 * normalize(uv - 0.5) * (t / 4.0) / iResolution.xy; \n    uv_col1 = rot(abs(uv_col1 - 0.5), t / 16.0 * PI) * 2.0  + 0.5;\n    \n    vec2 uv_col2 = fract(uv - vec2(0.0, 0.0 * -t / 63.0));\n    \n    vec2 uv_feedback = uv;\n    vec2 uv_feedback_vec = 30.0 * (-(uv - 0.5)) / iResolution.xy * iResolution.xy / iResolution.yy;\n    uv_feedback_vec = (rot(uv_feedback_vec, 0.5 * cos(t  * 3.0 / 16.0 * PI) * PI));\n    uv_feedback_vec = mix(uv_feedback_vec, abs(uv_feedback_vec) * -sign(uv- 0.5), 0.1255);\n    \n    uv_feedback+= uv_feedback_vec;\n    \n    vec3 col1 = texture(iChannel1, uv_col1).rrr;\n    vec3 col2 = texture(iChannel2, uv_col2).rgb;\n    vec3 bb_col = texture(iChannel0, uv_feedback).rgb;\n    \n    col = (col1 * 0.5 + 0.5) * col2;\n    //col = col * 0.5 + 0.5 * normalize(col);\n    col*= 0.5 + 0.5 * (0.5 + 0.5 * vec3(cos(t * 6.0 / 8.0 * PI), 0.0 * cos((t * 4.0 / 4.0 + 0.0) * 2.0 * PI), sin((t + 0.5) * 4.0 / 4.0 * PI))); \n    \n    col = pow(col * 2.0, vec3(1.0) / .5);\n    col = col * step(0.5, col);\n    //col = mix(col, col * step(0.5, col), step(ring - 0.01, length((uv - 0.5) * iResolution.xy / iResolution.yy)));\n    \n   \n    col = mix(mix(col, bb_col, 1.0 - fract(t / 2.0)), bb_col, smoothstep(ring, ring + 0.1, length((uv - 0.5) * iResolution.xy / iResolution.yy)));\n    \n    col = max(vec3(0.0), min(vec3(1.0), col));\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}