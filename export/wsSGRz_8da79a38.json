{"ver":"0.1","info":{"id":"wsSGRz","date":"1549137420","viewed":629,"name":"Plotting Functions and Equations","username":"sopyer","description":"Simple way to quickly plot functions, equations, inequalities, and logic combinations. Also demonstrates limitations of technique. List of more logic operation is available here: https://www.shadertoy.com/view/Xdj3Rh","likes":5,"published":3,"flags":0,"usePreview":0,"tags":["function","plot","equation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Mykhailo Parfeniuk\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// f(x)\n\nvec2 const_dn2(float x)\n{\n    return vec2(x, 0.0);\n}\n\nvec2 dn(float x)\n{\n    return vec2(x, 1.0);\n}\n\nvec2 mul_dn(vec2 a, vec2 b)\n{\n    return vec2(a.x*b.x, a.x*b.y+b.x*a.y);\n}\n\nvec2 rcp_dn(vec2 a)\n{\n    return vec2(1.0/a.x, -a.y/(a.x*a.x));\n}\n\nvec2 exp_dn(vec2 x)\n{\n    return vec2(exp(x.x), x.y*exp(x.x));\n}\n\nvec2 sin_dn(vec2 x)\n{\n    return vec2(sin(x.x), x.y*cos(x.x));\n}\n\nvec2 cos_dn(vec2 x)\n{\n    return vec2(cos(x.x), -x.y*sin(x.x));\n}\n\nvec2 tan_dn(vec2 x)\n{\n    float c = cos(x.x);\n    return vec2(tan(x.x), x.y/(c*c));\n}\n\nvec2 clamp_dn(vec2 x, float a, float b)\n{\n    return vec2(clamp(x.x, a, b), x.y*(step(a, x.x) - step(b, x.x)));\n}\n\nvec2 saturate_dn(vec2 x)\n{\n    return clamp_dn(x, 0.0, 1.0);\n}\n\nfloat estimateDist_dn(in float y, vec2 f)\n{\n    return abs(y - f.x)/length(vec2(1.0, f.y));\n}\n\n// F(x, y)\n\nvec3 const_dn3(float x)\n{\n    return vec3(x, 0.0, 0.0);\n}\n\nvec3 dn_x(float x)\n{\n    return vec3(x, 1.0, 0.0);\n}\n\nvec3 dn_y(float x)\n{\n    return vec3(x, 0.0, 1.0);\n}\n\nvec3 mul_dn(vec3 x, vec3 y)\n{\n    return vec3(x.x*y.x, x.x*y.y+y.x*x.y, x.x*y.z+y.x*x.z);\n}\n\nvec3 rcp_dn(vec3 a)\n{\n    return vec3(1.0/a.x, -a.yz/(a.x*a.x));\n}\n\nvec3 exp_dn(vec3 x)\n{\n    return vec3(exp(x.x), x.yz*exp(x.x));\n}\n\nvec3 sin_dn(vec3 x)\n{\n    return vec3(sin(x.x), x.yz*cos(x.x));\n}\n\nvec3 cos_dn(vec3 x)\n{\n    return vec3(cos(x.x), -x.yz*sin(x.x));\n}\n\nvec3 tan_dn(vec3 x)\n{\n    float c = cos(x.x);\n    return vec3(tan(x.x), x.yz/(c*c));\n}\n\nvec3 clamp_dn(vec3 x, float a, float b)\n{\n    return vec3(clamp(x.x, a, b), x.yz*(step(a, x.x) - step(b, x.x)));\n}\n\nvec3 saturate_dn(vec3 x)\n{\n    return clamp_dn(x, 0.0, 1.0);\n}\n\nfloat estimateDist_dn(vec3 F)\n{\n    float grad_norm = length(F.yz);\n    return grad_norm > 1e-10 ? F.x/grad_norm : 1e37;\n}\n\n// Draw utils\n\nfloat opNOT(float a)\n{\n\treturn 1.0-a;   \n}\n\nfloat opAND(float a, float b)\n{\n\treturn a*b;   \n}\n\nfloat opOR(float a, float b)\n{\n\treturn a+b-a*b;   \n}\n\nfloat opXOR(float a, float b)\n{\n\treturn a+b-2.0*a*b;   \n}\n\nfloat mask_dn(float px, float y, vec2 f)\n{\n    return 1.0-smoothstep(1.0*px, 2.5*px, estimateDist_dn(y, f));\n}\n\nfloat maskeq_dn(float px, vec3 F)\n{\n    return 1.0-smoothstep(1.0*px, 2.5*px, abs(estimateDist_dn(F)));\n}\n\nfloat maskneq_dn(float px, vec3 F)\n{\n    return 1.0-smoothstep(-1.0*px, 1.0*px, estimateDist_dn(F));\n}\n\n// Sample plots\n\nvec3 ellipse_dn(vec2 p, vec2 r)\n{\n    vec2 r2 = r*r;\n    vec3 x = dn_x(p.x);\n    vec3 y = dn_y(p.y);\n    return mul_dn(x, x)/r2.x+mul_dn(y, y)/r2.y - const_dn3(1.0);\n}\n\nvec3 y2_x_dn(in vec2 p)\n{\n    vec3 x = dn_x(p.x);\n    vec3 y = dn_y(p.y);\n    return mul_dn(y, y)-x;\n}\n\nvec3 x2_y_dn(in vec2 p)\n{\n    vec3 x = dn_x(p.x);\n    vec3 y = dn_y(p.y);\n    return mul_dn(x, x)-y;\n}\n\nvec3 heart_dn(in vec2 p)\n{\n    vec3 x = dn_x(p.x);\n    vec3 y = dn_y(p.y);\n    vec3 t = mul_dn(x,x)+mul_dn(y, y)-const_dn3(1.0);\n    vec3 xy = mul_dn(x, y);\n    return mul_dn(t, mul_dn(t, t)) - mul_dn(xy, mul_dn(xy, y));\n}\n\nvec3 LemniscateOfBernoulli_dn(in vec2 p)\n{\n    vec3 x = dn_x(p.x);\n    vec3 y = dn_y(p.y);\n    vec3 t = mul_dn(x, x) + mul_dn(y, y);\n    return mul_dn(t, t) - mul_dn(x, x) + mul_dn(y, y);\n}\n\nvec3 FoliumOfDescartes_dn(in vec2 p)\n{\n    vec3 x = dn_x(p.x);\n    vec3 y = dn_y(p.y);\n    return mul_dn(x, mul_dn(x, x)) + mul_dn(y, mul_dn(y, y)) - 6.0 * mul_dn(x, y);\n}\n\n// Helpers\n\nvec3 drawBg(vec2 p, float px)\n{\n    vec3 col = vec3(0.3 + 0.04*mod(floor(p.x)+floor(p.y),2.0));\n    col *= smoothstep( 0.5*px, 1.5*px, abs(p.x) );\n    col *= smoothstep( 0.5*px, 1.5*px, abs(p.y) );\n    return col;\n}\n\nfloat maskRect(vec2 p, float dx, float dy)\n{\n    return (step(-dx, p.x) - step(dx, p.x))*(step(-dy, p.y) - step(dy, p.y));\n}\n\nfloat saturate(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float sca = 4.0;\n    float aspect = float(iResolution.x) / iResolution.y;\n    float s = 2.0, ty = s * sca * 2.0/3.0, tx = aspect * ty;\n    vec2  p0 = s * sca * (2.0*fragCoord-iResolution.xy) / iResolution.y;\n    float px = s * sca * 2.0/iResolution.y;\n    \n    vec3 col = vec3(0.0); vec2 p;\n    \n    float rw=tx/2.0-px*5.0, rh = ty/2.0-px*5.0;\n    \n    p = p0+vec2( tx, -ty); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(0.2,1.0,0.0), maskeq_dn(px, heart_dn(p)));\n    p = p0+vec2(0.0, -ty); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(1.0,0.8,0.0), maskeq_dn(px, FoliumOfDescartes_dn(p)));\n    p = p0+vec2(-tx, -ty); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(1.0,0.8,0.0), maskeq_dn(px, LemniscateOfBernoulli_dn(p)));\n    p = p0+vec2( tx, 0.0); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(1.0,0.2,0.0), maskneq_dn(px, ellipse_dn(p, vec2(3.0, 1.0))));\n    p = p0+vec2(0.0, 0.0); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(0.8,0.0,1.0), opXOR(maskneq_dn(px, y2_x_dn(p)), maskneq_dn(px, x2_y_dn(p))));\n\n    p = p0+vec2(0.0,  ty); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(0.8,1.0,0.0), mask_dn(px, p.y,cos_dn(dn(p.x))));\n    p = p0+vec2(-tx, 0.0); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(0.0,0.8,1.0), mask_dn(px, p.y,tan_dn(dn(p.x))));\n    p = p0+vec2( tx,  ty); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(0.2,0.3,1.0), mask_dn(px, p.y+0.25*ty,exp_dn(dn(p.x-0.25*tx))));\n    p = p0+vec2(-tx,  ty); col += maskRect(p, rw, rh)*mix(drawBg(p, px), vec3(1.0,0.0,0.2), mask_dn(px, p.y,saturate_dn(dn(p.x))));\n    \n    vec3 sc = vec3(0.0, 1.0, 0.8);\n    col = mix(col, sc, 1.0-smoothstep( 1.0*px, 2.0*px, saturate(abs(p0.x-tx/2.0)) ));\n    col = mix(col, sc, 1.0-smoothstep( 1.0*px, 2.0*px, saturate(abs(p0.x+tx/2.0)) ));\n    col = mix(col, sc, 1.0-smoothstep( 1.0*px, 2.0*px, saturate(abs(p0.y-ty/2.0)) ));\n    col = mix(col, sc, 1.0-smoothstep( 1.0*px, 2.0*px, saturate(abs(p0.y+ty/2.0)) ));\n    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}