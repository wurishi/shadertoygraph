{"ver":"0.1","info":{"id":"ldGXWh","date":"1464123193","viewed":1036,"name":"TreeGenerator","username":"kuvkar","description":"Create your own tree! Move the cursor around to generate them. Try fullscreen!","likes":60,"published":1,"flags":0,"usePreview":0,"tags":["procedural","tree","generator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Can add more if your GPU can handle it! :)\n#define LEAFS 8\n#define BRANCHES 6\n#define TRUNKS 6\n\n\n///////////////////////////////////////////\n///////////////////////////////////////////\nconst float PI = 3.14159265;\nconst float WSCALE = 0.8;\n#define T (iTime*0.5)\nconst float LEAF = 1.0;\nconst float TRUNK = 2.0;\n\nvec2 seed;\nvec2 im;\n\n//https://iquilezles.org/articles/smin\nfloat smin( float a, float b )\n{\n    float k = 0.003;\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat rand(vec2 co)\n{\n    co += im.xy + seed;\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand1(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\nvec2 rotate(vec2 point, float angle)\n{\n    float x = point.x; float y = point.y;\n    float ca = cos(angle);\n    float sa = sin(angle);\n    point.x = x * ca - y * sa;\n    point.y = y * ca + x * sa;\n    return point;\n}\n\nfloat sdTreePart(vec2 pos, vec2 uv, vec2 pivot, float angle, float w, float h)\n{\n    uv -= pos;\n    uv = rotate(uv, angle) + pivot;\n    \n    float b = WSCALE + smoothstep(0.0, -h * 2., uv.y - h) * (1.0 - WSCALE);\n    w *= b;\n    \n    float y = max(uv.y - h, -h - uv.y);\n    float x = max(uv.x - w, -w - uv.x);\n    \n    return max(x, y);\n}\n\nfloat sdLeaf(vec2 pos, vec2 uv, vec2 pivot, float angle, float w, float h)\n{\n    uv -= pos;\n    uv = rotate(uv, angle) + pivot;\n    \n    w -= cos(uv.y * 500.) * 0.001;\n    h -= sin(uv.x * 500.) * 0.002;\n    float y = max(uv.y - h, -h - uv.y);\n    float x = max(uv.x - w, -w - uv.x);\n    \n    return max(x, y);\n}\n\n\nfloat Cursor(in vec2 uv, inout vec2 pos, float H, inout float angle, inout float W)\n{\n    seed += vec2(0.01, 0.04);\n    W *= WSCALE;\n    vec2 pivot = vec2(0.0, -H);\n    float b = sdTreePart(pos, uv, pivot, angle, W, H);\n    pos += vec2(sin(angle), cos(angle)) * H * 2.;\n    float r = rand(seed);\n    angle += (r - 0.5) * 0.9;\n    return b;\n}\n\nint leafIndex = 0;\n\nvec2 Tree (vec2 pos, vec2 uv)\n{\n    float H = 0.02;\n    vec2 pivot = vec2(0.0, -H);\n    float b = 999.0;\n    float angle = 0.0;\n    float W = 0.01;\n    \n    float randH = 0.5 * (rand(im.xy) - 0.5);\n    float randA = rand(im.yx) - 0.5;\n    float lf = 999.0;\n    float LEAFANGLE = PI * 0.2;\n    vec2 leafSize = vec2(0.005, 0.01);\n    \n    for (int i = 0; i < TRUNKS; ++i)\n    {\n        b = smin(b, Cursor(uv, pos, H, angle, W));\n        \n        vec2 p = pos;\n        float h = H; \n        float a = randA + angle + sin(T + float(i)) * 0.1;\n        float w = W;\n\t\t\n        for (int j = 0; j < BRANCHES; ++j)\n        {\n            b = smin(b, Cursor(uv, p, h, a, w));    \n            \n            vec2 p1 = p;\n            float h1 = max(randH * 0.06, 0.006); \n            float a1 = randA + a + sin(T + float(j) * 0.4) * 0.1;\n            float w1 = w;\n\n            for (int k = 0; k < LEAFS; ++k)\n            {\n               b = smin(b, Cursor(uv, p1, h1, a1, w1));    \n               float angl = mod(float(k), 2.0)  == 0.0 ? 1.0 : -1.0;\n               float newLeaf = sdLeaf(p1, uv, vec2(0.0, -leafSize.y),  (a1 + angl * LEAFANGLE), leafSize.x, leafSize.y);\n               if(newLeaf < lf) leafIndex = i * 100 + j * 10 + k;\n               lf = min(lf, newLeaf);\n               if(lf < 0.0 || b < 0.0) break; \n            }\n            if(lf < 0.0 || b < 0.0) break; \n        }\n        if(lf < 0.0 || b < 0.0) break; \n    }\n    \n    \n    if(b < lf)\n    {\n        return vec2(TRUNK, b);\n    }\n    return vec2(LEAF, lf);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    im = iMouse.xy;\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5);\n    uv.y /= iResolution.x / iResolution.y;\n    fragColor = vec4(1.0 - (uv.y + 0.4)) * vec4(.3, 0.3, 0.5, 0.0) * 0.7;\n    \n    // bg stars\n    vec2 star_uv = mod(fragCoord.xy, vec2(512.0)) / 512.0;\n    float F = 0.9;\n    vec4 tx = texture(iChannel0, star_uv);\n    vec4 tx2 = texture(iChannel0, star_uv * 0.2 + vec2(iTime * 0.01));\n    tx = clamp(tx - F, 0.0, 1.0);\n    tx /= 1.0 - F;\n    fragColor += tx.r * tx2.r;\n    \n    \n    vec2 pos = vec2(-0., -0.32);\n    vec2 material = Tree(pos, uv);\n    \n    float margin = 2.0 * fwidth(uv).x;\n    float t = material.y / margin;\n    t = clamp(t, -0.1, 1.0);\n    \n    vec4 col = vec4(t);\n\tcol = smoothstep(.5, 0.0, col);\n    \n    if(material.x == LEAF)\n    {\n        float leafCol = sin(float(leafIndex) * .5) * 0.5 + 0.5;\n        leafCol = mix(leafCol, 1.0, 0.5);\n        col = vec4(leafCol) * vec4(1.0, 0.2, 0.1, 0.0);\n    }\n    else if (material.x == TRUNK)\n    {\n        col *= vec4(.8, 0.5, 0.3, 0.0);\n    }\n\n    fragColor = mix(col, fragColor, t);\n    \n    \n}\n","name":"Image","description":"","type":"image"}]}