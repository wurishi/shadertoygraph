{"ver":"0.1","info":{"id":"mlyczV","date":"1700425101","viewed":126,"name":"industrial storage facility 3","username":"jt","description":"Another variant. Combines:\n[url=https://www.shadertoy.com/view/dd3fDj]raymarch voxels[/url]\n[url=https://www.shadertoy.com/view/mlGcWR]random domino square tiling int[/url]\n[url=https://www.shadertoy.com/view/mdcBR2]asymmetric blocks compactified[/url]\n","likes":19,"published":1,"flags":0,"usePreview":0,"tags":["square","t","blocks","tiling","double","subdivision","alternating","irregular","asymmetric","domino"],"hasliked":0,"parentid":"dtGczV","parentname":"industrial storage facility 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlyczV industrial storage facility 3, 2023 by jt\n// variant of https://www.shadertoy.com/view/dtccWn industrial storage facility\n// (instead of GCD there)\n// using https://www.shadertoy.com/view/mlGcWR random domino square tiling int\n// to create offset square columns.\n\n// Column layout (into offset squares) by\n// https://www.shadertoy.com/view/mlGcWR random domino square tiling int\n// Roofs populated using asymmetric/irregular blocks layout\n// (random-blocks-by-alternating-double-T-crossings)\n// Renderer: https://www.shadertoy.com/view/dd3fDj raymarch voxels\n\n// tags: t, blocks, double, alternating, irregular, asymmetric, subdivision, domino, square, tiling\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY\n\nint div_down(int a, int b)\n{\n    // TODO: codegolf this line\n    return (a > 0 && b < 0) ? ((a - 1) / b) - 1 : (a < 0 && b > 0) ? (a + 1) / b - 1 : a / b;\n}\n\nint mod_positive(int a, int b)\n{\n    return a - div_down(a, b) * b;\n}\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n// Wellons lowbias32 from http://nullprogram.com/blog/2018/07/31\n// perhaps the best ever devised for this op count, great distribution and cycle\nuint lowbias32(uint x)\n{\n    x ^= x >> 16;\n    x *= 0x7feb352du;\n    x ^= x >> 15;\n    x *= 0x846ca68bu;\n    x ^= x >> 16;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n//#define HASH(u) lowbias32(u)\n\nuint uhash(uvec2 v)\n{\n//return uvec2(0u); // verify grid alignment\n    return HASH((uint(v.x) + HASH(uint(v.y))));\n}\n\nint ihash(ivec2 v)\n{\n    return int(HASH(uint(v.x) + HASH(uint(v.y))));\n}\n\nbool bhash(ivec2 v)\n{\n    return (ihash(v) & 1) != 0;\n}\n\n// returns unique tile index (but some indices unused)\nivec4 random_domino_combined_squares(ivec2 position) // https://www.shadertoy.com/view/mlGcWR random domino square tiling int (jt)\n{\n    ivec2 quadrant = position & 1; // [0,0] to [1,1]\n    ivec2 tile = position - quadrant; // round down to even number\n\n    bool flip = bhash(tile);\n    if(flip)\n    {\n        if(bhash(tile + 2 * ivec2(quadrant.x * 2 - 1, 0))) // neighbor tile aligned?\n        {\n            tile += ivec2(quadrant.x * 2 - 1, 0); // adjust index to merged tile\n            quadrant.x ^= 1; // horizontal merge: flip horizontal quadrant\n            return ivec4(tile, quadrant);\n        }\n    }\n    else\n    {\n        if(!bhash(tile + 2 * ivec2(0, quadrant.y * 2 - 1))) // neighbor tile aligned?\n        {\n            tile += ivec2(0, quadrant.y * 2 - 1); // adjust index to merged tile\n            quadrant.y ^= 1; // vertical merge: flip vertical quadrant\n            return ivec4(tile, quadrant);\n        }\n    }\n\n    return ivec4(0, 0, quadrant);\n    //return ivec4(tile, quadrant);\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec2 div_floor(ivec2 a, int b) // vector version thanks to Fabrice\n{\n    ivec2  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\n// this implementation avoids operator % for stability on windows XXX differs from original at 0 ? XXX\nivec2 mod_positive(ivec2 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\n// resolution of underlying grid\n#define RES 8\n\nstruct block\n{\n    ivec2 v0;\n    ivec2 v1;\n    ivec2 id;\n};\n\nint block_hash(ivec2 tile, int x, int y, bool choose, bool mirror)\n{\n    ivec2 d = (mirror?ivec2(y, x):ivec2(x, y));\n    return int(uhash(uvec2(tile+d)*2u+uint(choose)) % uint(RES))+(choose?d.y:d.x)*RES;\n    //ivec2 r = ivec2(uhash(uvec2(tile+d)*2u+uint(choose)) % uint(RES))+d*RES;\n    //return choose?r.y:r.x;\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Returns minimum, maximum, id.\n// Severely compactified/crunched version.\nblock blocks_layout(ivec2 p) // https://www.shadertoy.com/view/mdcBR2 asymmetric blocks compactified by jt\n{\n    ivec2 tile = div_floor(p, RES); // global coordinates of tile\n    ivec2 local = p - tile * RES;\n\n    //bool flip = (tile.x % 2) != (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) != (tile.y & 1); // true: vertical line goes through, false: horizontal line goes through\n    //flip = !flip; // \"dual\" pattern (i.e. T-crossings flipped)\n\n    // | identity\n    // NW N NE\n    //  W C E\n    // SW S SE\n\n    // - transposed (NOTE: y-coordinate up but matrix y-index down!)\n    // SE W NE\n    //  N C S\n    // SW E NW\n\n    if(flip) // horizontal line goes through: swap vertical with horizontal\n    {\n        local = local.yx;\n    }\n\n    // vertical line goes through (on flip transpose for horizontal line)\n\n    //                 c\n    //   +-+---------+---+-------+\n    //   | |         |   |       |\n    //   | |         |   #-------+ d\n    // d +-#-#-------+---M       |\n    //   |   |       |   |       |\n    //   +---+-------+---+-------+\n    //   |   |       |   |       |\n    //   |   m-------+---#---#---+\n    //   +---#       |       |   |\n    //   |   |       |       |   |\n    //   +---+-------+-------+---+\n\n    int c = block_hash(tile, 0, 0, flip, flip); // offset of central line\n\n    int x = 1-int(local.x < c); // [0,1]\n    int X = 2*x-1; // [-1,+1]\n\n    int d = block_hash(tile, X, 0,!flip, flip); // offset of branching line\n\n    int y = 1-int(local.y < d); // [0,1]\n    int Y = 2*y-1; // [-1,+1]\n\n    ivec4 minmax =\n        ivec4\n        (\n            // block corner in (0,0) tile\n            c,\n            d,\n            // block corner in (X,Y) tile\n            block_hash(tile,X,Y, flip, flip),\n            block_hash(tile,0,Y,!flip, flip)\n        );\n\n    if(flip) tile = tile.yx;\n\n    minmax += tile.xyxy * RES;\n\n    ivec2 id = tile + ivec2(x,y);\n\n    if(flip) // horizontal line goes through: unswap vertical with horizontal\n    {\n        minmax = minmax.yxwz;\n        id = id.yx;\n    }\n\n    // fix order of min/max corners NOTE: defer division by 2 because center & extend could be half-integers!\n    ivec2 center2 = minmax.xy+minmax.zw;\n    ivec2 extent2 = abs(minmax.xy-minmax.zw);\n\n    minmax.xy = (center2-extent2)/2;\n    minmax.zw = (center2+extent2)/2;\n\n    return block(minmax.xy, minmax.zw, id);\n}\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat halfspace(vec3 p)\n{\n    return p.z + 1.0;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n/*\nfloat box( vec3 p, vec3 b, float r ) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n*/\nfloat box(vec3 p, vec3 s, float r)\n{\n    return box(p, s - r) - r;\n}\n\n// based on https://iquilezles.org/articles/distfunctions/\nfloat line(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length( pa - ba*h );\n}\n\nfloat spaceframe(vec3 p) // https://www.shadertoy.com/view/slGfWc space frame 2 by jt\n{\n    p = abs(p - 0.5) + 0.5; // mirror symmetry\n    p.yz = p.y < p.z ? p.yz : p.zy; // reflect\n    p.xy = p.x < p.y ? p.xy : p.yx; // reflect\n    return min(line(p, vec3(1), vec3(0,1,1)), line(p, vec3(1), vec3(0.5)));\n}\n\nfloat cylinder(vec3 p, vec2 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat cylinder(vec3 p, vec2 s, float r) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s + r;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - r;\n}\n\nfloat capsule(vec3 p, float h, float r) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    p.z -= clamp(p.z,-h,+h);\n    return length(p) - r;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    float dist;\n    vec3 color;\n    float specular;\n};\n\nresult map(ivec3 v, vec3 l)\n{\n    ivec4 res = random_domino_combined_squares(v.xy);\n    bool solid = bhash(res.xy);\n    block blk = blocks_layout(res.xy);\n    uvec2 size = uvec2(blk.v1-blk.v0);\n    if(res.xy != ivec2(0))\n    {\n        vec3 color = hash32(vec2(blk.id));\n        if(((blk.id.x^blk.id.y)&1)==0)\n            color = 1.0 - color;\n\n        if(v.z >= 0 && v.z < 2)\n        {\n            ivec2 q = v.xy-blk.v0-1; // voxel coordinate local to (minimum corner of) block\n            float r = 1.0/2.0;\n            //vec3 p = vec3(v.xy-blk.v0, 0)+l-vec3(r,r,0); // layers\n            vec3 p = vec3(0,0, v.z)+l-vec3(r,r,0); // single ground layer\n            if(solid)\n            {\n                color = mix(color, hash32(vec2(res.xy)), 0.5);\n                if(hash12(vec2(res.xy)) < 0.5)\n                    return result(sphere(p+vec3(vec2(res.zw)-0.5,-1), r*2.0), color, 1.0);\n                    //return result(capsule(p+vec3(vec2(res.zw)-0.5,-1), hash12(vec2(res.xy)), r*2.0), color, 1.0);\n                else\n                    return result(cylinder(p+vec3(vec2(res.zw)-0.5,0), vec2(r*2.0, 1.0+hash12(vec2(res.xy))), 0.1), hash32(vec2(res.xy)), 1.0);\n            }\n            else\n            {\n                if(hash12(vec2(res.xy)) < 0.5)\n                {\n                    if(hash12(vec2(res.xy)) < 0.25)\n                    {\n                        p.xy = p.yx;\n                        res.xyzw = res.yxwz;\n                    }\n                    if(res.w != 0)\n                        return result(capsule(-p.xzy-vec3(0,-0.5,0.25), 0.25, 0.5), mix(color, hash32(vec2(res.xy)), 0.5), 1.0);\n                    else\n                        return result(capsule(+p.xzy-vec3(0,+0.5,0.25), 0.25, 0.5), mix(color, hash32(vec2(res.xy)), 0.5), 1.0);\n                }\n                else\n                {\n                    color = mix(color, hash32(vec2(q)), 0.5);\n                    if(hash12(vec2(q)) - 0.5 < 0.25)\n                        return result(sphere(p-vec3(0,0,0.5), r), color, 1.0);\n                        //return result(capsule(p-vec3(0,0,0.5), hash12(vec2(res.xy)), r), color, 1.0);\n                    else\n                        return result(cylinder(p, vec2(r, 0.5+hash12(vec2(res.xy))), 0.1), color, 1.0);\n                }\n            }\n        }\n        else if(v.z <= 0)\n        {\n            if(v.z == -1) return result(spaceframe(l)-0.05, vec3(1), 1.0);\n            return result(box(l-0.5, vec3(0.5,0.5,0.5)), color, 1.0);\n            //return result(float(v.z)+l.z, color);\n        }\n    }\n    else\n    {\n        //vec3 color = vec3(hash12(vec2(v.xy)));\n        vec3 color = vec3(0.1);\n        if(v.z < -2) return result(box(l-0.5, vec3(0.5,0.5,0.5)), color, 0.0);\n    }\n    return result(DIST_MAX, vec3(0), 0.0); // signal to skip this voxel\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    result r0 = result(DIST_MAX, vec3(0));\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n            {\n                result r1 = map(ivec3(floor(p))+o, fract(p)-vec3(o));\n                if(r1.dist < r0.dist)\n                    r0 = r1;\n            }\n    return r0;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        vec3 p = ro + rd * t;\n        result h = map(p);\n        if(h.dist < EPSILON)\n            return result(t,h.color,h.specular);\n\n        // constrain step to voxels (ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            bvec3 n = lessThan(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true)\n            //bvec3 n = lessThanEqual(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at least one component true)\n            //vec2 n = step(sd.xy,sd.yx); // 2d // component true if corresponding wall is nearest (at most one component true)\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next voxel to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    //return result(t1, /*TODO*/, 0.0); // stop on running out of iterations\n    return result(t1, vec3(0), 0.0); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // TODO\n    //return mix(vec3(0.25), vec3(1.0), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 8.0/7.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-15.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 1.0;\n\n    vec3 sky_color = mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX);\n    if(r.dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        color = r.color;\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        //vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n        //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n        vec3 lightdir = normalize(vec3(1.0, 2.0, 3.0));\n        vec3 ambient = vec3(0.02);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += r.specular * specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color;\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/50.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    fragColor = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}