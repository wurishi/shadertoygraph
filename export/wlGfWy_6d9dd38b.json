{"ver":"0.1","info":{"id":"wlGfWy","date":"1614960162","viewed":156,"name":"Textures TP3","username":"JohannaTrost","description":"A set of textures: stripes, chessboard, sand, metal, wood, rust and stone/rock","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["textures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n//// Johanna Trost \n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Rotation\n// p : point\n// d : degrees of rotation\n// a : axis 1 for x, 2 for y, 3 for z\nvec3 Rotation(vec3 p, float d, int axis)\n{\n  float a = radians(d); \n  float sa = sin(a); \n  float ca = cos(a); \n\n  if(axis == 1) // rotation x axis\n  {\n    return p*mat3(1.,0.,0.,    0.,ca,-sa,  0.,sa,ca);\n  }\n  else if(axis == 2) // rotation y axis\n  {\n    return p*mat3(ca,0.,sa,    0.,1.,0.,  -sa,0.,ca);\n  }\n  else if(axis == 3) // rotation z axis\n  {\n    return p*mat3(ca,-sa,0.,    sa,ca,0.,  0.,0.,1.);\n  }\n  else \n  {\n    // case never applies\n  }\n}\n\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n  V u = Plane(p,normalize(vec3(0.0,0.0,1.0)),vec3(0.0,0.0,-4.0),0);\n  \n  u=Union(u,Sphere(p,vec3( 0.0, -10.0, 2.),4.0,1));\n  u=Union(u,Sphere(p,vec3( -10.0, -10.0, 2.),4.0,2));\n  u=Union(u,Sphere(p,vec3( 10.0, -10.0, 2.0),4.0,3));\n  u=Union(u,Sphere(p,vec3( 10.0, 0.0, 2.0),4.0,4));\n  u=Union(u,Sphere(p,vec3( -10.0, 0.0, 2.0),4.0,5));\n  u=Union(u,Sphere(p,vec3( -10.0, 10.0, 2.0),4.0,6));\n  u=Union(u,Sphere(p,vec3( 10.0, 10.0, 2.0),4.0,7));\n \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting ----------------------------------------------------------------------------------------------\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// r : Radius for ambient occlusion\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, float r,int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,r,h,s);\n        if (!h) {ao+=1.0;}\n\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n// FBM ---------------------------------------------------------------------------\n\n// Turbulance (Mouvement Brownien Franctionnaire formula from the lecture)\n// p : point \n// octaves : number of summands \n// beta : part of the calcul of the amplide and frequency (\"usually 2\")\n// a : amplitude \n// lamda : 1/lamda = frequency\nfloat Turbulance(in vec3 p, in int octaves, in float beta, in float a, in float lamda)\n{\n    mat3 R0 = Rz(0.);\n    float sumNoise = 0.; \n    for(int k=0; k < octaves; k++)\n    {\n        a = a * pow(beta, float(-k));\n        lamda = lamda * pow(beta, float(-k));\n        R0 = matrixCompMult(R0, R0);\n\n        sumNoise += a * Noise((R0*p)/lamda);\n    }\n\n    return sumNoise; \n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n\n// Texture0\n// p : point\nT Texture0(in vec3 p)\n{\n  return T(vec3(0.80,0.80,0.80),0.25);   \n}\n\n// Plain\n// p : point\n// c : color \n// s : specular \nT Plain(in vec3 p, in vec3 c, in float s)\n{\n  return T(c,s);   \n}\n\n// Damier\n// p : point\n// c1 : color \n// c2 : color\n// t : size of squares \nT Damier(in vec3 p, in vec3 c1, vec3 c2, float t)\n{\n  p = p/t;\n  int check = (int(p.x) + int(p.y) + int(p.z)) % 2;\n  return T(float(1-check)*c1 + float(check)*c2, 0.0);\n}\n\n\n// Stripes\n// p : point\n// c1 : color \n// c2 : color\n// t : width of stripes \nT Stripes(in vec3 p, in vec3 c1, vec3 c2, float t)\n{\n  // stripes explicitly for this room \n  vec3 roomSize = vec3(6.,8.,4.);\n  int check; \n  if(p.x < -roomSize.x +1.) \n  {\n    check = int(p.y/t + 7./t) % 2;\n  }\n  else\n  {\n    check = int(p.x/t + 7./t) % 2;\n  }\n\n  return T(float(1-check)*c1 + float(check)*c2, 0.0);\n}\n\n// Bois\n// p : point\n// c1 : color \n// c2 : color\n// t : width of woodgrain\n// octaves : for making it more or less weavy\n// contrast : contrast between wood and the more detailed woodgrain (\"scratches\")\nT Bois(in vec3 p, in vec3 c1, vec3 c2, float t, int octaves, float contrast)\n{\n  vec3 pt = p - (Turbulance(p, octaves, 2., 4.8, 8.8) * (1. / t)); // woodgrain\n  // adding detailed woodgrain to both wood colors \n  c1 = mix(contrast*c1, \n           (1.-contrast)*c1,\n           Turbulance(vec3(25.0*pt.x,300.0*pt.y,1.0*pt.z),4, 2., .8, 2.5)*(1.-.7*Noise(200.*pt)));\n  c2 = mix(contrast*c2, \n           (1.-contrast)*c2,\n           Turbulance(vec3(25.0*pt.x,300.0*pt.y,1.0*pt.z),4, 2., .8, 2.5)*(1.-.7*Noise(200.*pt)));\n  float check = ((cos(3.1415927 *sqrt(pt.x*pt.x + pt.y*pt.y))) + 1.) / 2.; // stripes\n  \n  return T((1.-check)*c1+ check*c2, 0.1);\n}\n\n// Sable\n// p : point\n// c : color \n// grainSize : size of sand grains\n// mixratio : if 0.5 the objects only color is c\n//            otherwise grains are visible (0.9 gives a high contrast)\nT Sable(in vec3 p, in vec3 c, float grainSize, float mixratio)\n{\n  return T(mix(mixratio*c, (1.-mixratio)*c, Turbulance(p, 8, 2., .8, grainSize)),0.);\n}\n\n// Roche\n// p : point \n// c : color\nT Roche(in vec3 p, in vec3 c)\n{\n  float check = Turbulance(p, 5, 2., 6., .7);\n  vec3 roughness = mix(vec3(0.2,0.2,0.2),vec3(0.2,0.2,0.2)*4.,Turbulance(p, 8, 3., .8, .04)*0.7); // grainy texture\n  // minkowski voronoi with p=0.5, clostest: crackle, scaling factor: 6. \n  float lines = Voronoi((p-Turbulance(p, 4, 2.,4.,4.5))/6.,0.5).y *6.; // voronoi inspired by this blender tutorial: https://www.youtube.com/watch?v=-KO_qkM93q8\n\n  \n  if(lines > 0.9)\n  {\n    return T(mix(c,0.85*c,check) + roughness, 0.1);\n  }\n  else\n  {\n    return T( float(lines)*vec3(0.,0.,0.) + roughness, 0.1);\n  }\n}\n\n// Roche\n// p : point \n// c : color\n// contrast : contrast between metal and brushed lines \nT Metal(in vec3 p, in vec3 c, in float contrast)\n{\n  vec3 brushedMetal = mix(contrast*c,\n                         (1.-contrast)*c ,\n                         Turbulance(vec3(25.0*p.x,300.0*p.y,1.0*p.z),4, 2., .8, 2.5)*(1.-.4*Noise(200.*p)));\n  return T(brushedMetal , 5.*Noise(p)); \n}\n\n// Rouille\n// p : point \n// c : color\nT Rouille(in vec3 p, in vec3 c)\n{\n  vec3 blackRust= c / 1.15;\n  vec3 yellowRust= c + 0.175;\n\n  float scratches = Voronoi((p-Turbulance(p, 7, 2.,6.,3.5))/4.,0.45).y *4.; // minkowski voronoi with p=0.45, clostest: crackle, scaling factor: 4. \n  float check = Turbulance(p, 6, 2., 3.5,.3); \n  float fineGrain = Turbulance(p, 8, 3., .8, .03);\n  float patches = Turbulance(p, 8, 3., .8, 1.);\n\n  vec3 rust = (1.-check)*yellowRust + check*blackRust; // basic rust \n  vec3 freshRustPatches = yellowRust*(fineGrain + patches);\n\n  if(scratches > 0.3)\n  {\n    return T( rust * 1.2 + freshRustPatches / 1.6 , 0.01);\n  }\n  else\n  {\n    return T((1.-scratches)*blackRust / 2., 0.6);\n  }\n}\n\n// Compute texture\n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Texture0(p);\n    }\n    else if (vp.i==4)\n    {\n        return Rouille(p, vec3(0.63, 0.28, 0.13));\n    }\n    else if (vp.i==7)\n    {\n        return Bois(p,vec3(0.49, 0.29, 0.13), vec3(0.49, 0.29, 0.13)*1.7, 0.1,3,0.8);\n    }\n    else if (vp.i==3)\n    {\n        return Roche(Rotation(p,180.,3), vec3(0.79,0.79,0.79));\n    }\n    else if (vp.i==1)\n    {\n        return Stripes(Rotation(p,90.,2), vec3(0.,0.,0.), vec3(1.,1.,1.), 0.5);\n    }\n    else if (vp.i==5)\n    {\n        return Metal(Rotation(p,-90.,1), vec3(0.7,0.7,0.7)*2.5,0.6);\n    }\n    else if (vp.i==6)\n    {\n        return Sable(p,vec3(0.85, 0.76, 0.53)*2.,0.02,0.35);\n    }\n    else if (vp.i==2)\n    {\n        return Damier(p, vec3(0.,0.,0.), vec3(1.,1.,1.), 1.);\n    }\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n   pip = false;\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Sampling -------------------------------------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( in float seed, in vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, crackle (second closest), cell id)\nvec3 Voronoi( in vec3 x, in float e )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        //float d = dot( r, r );\n        float d = pow(r.x,e) + pow(r.y,e) + pow(r.z,e);\n\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n    float d1 = pow( res.x, 1./e );\n    float d2 = pow( res.y, 1./e );\n    return vec3(d1 , max(0., 3. * (d2-d1)) , abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.5;\n    \n    ro=vec3(35.0,0.0,8.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}