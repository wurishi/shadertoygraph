{"ver":"0.1","info":{"id":"7l3XDM","date":"1639220682","viewed":309,"name":"dragon_scales","username":"johnowhitaker","description":"A Neural Cellular Automata created with CLIP-CA, based on the prompt 'Glowing Dragon Scales' alongside a reference image.  ","likes":24,"published":1,"flags":32,"usePreview":0,"tags":["dragon","clip","nca"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Apply zoom (can't figure out how to re-size buffers \n    // so this wastes a lot of compute updating the offscreen parts)\n    uv = uv/2.;\n\n    // Read the buffer\n    vec3 col = (texture(iChannel0, uv).xyz-vec3(0.5))*10. + vec3(0.5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// Dragon Scales\nconst int nh = 16;\nfloat b1[16] = float[16](-0.05195293575525284,0.18564321100711823,0.21188361942768097,-0.05016305670142174,-0.11985062062740326,-0.09241533279418945,0.16501101851463318,-0.05301657319068909,0.30790975689888,-0.09992653876543045,0.16598232090473175,-0.2305232137441635,0.14161427319049835,-0.0004108209104742855,-0.05533013492822647,-0.162879317998886);\nfloat w1[256] = float[256](-0.0940927267074585,0.030707867816090584,-0.19125017523765564,0.21217630803585052,-0.006232143379747868,0.057670388370752335,0.11240234971046448,-0.19624795019626617,0.41247987747192383,-0.20480753481388092,0.04991026967763901,-0.05497285723686218,-0.2673954367637634,0.0040566022507846355,-0.10134369879961014,-0.1536584347486496,0.24920864403247833,-0.15462663769721985,0.18709133565425873,-0.18192067742347717,0.03223370760679245,0.027236180379986763,-0.17911627888679504,0.24606789648532867,-0.01854719966650009,0.12752902507781982,-0.17438596487045288,-0.035849735140800476,-0.14536108076572418,-0.004198385868221521,0.040943872183561325,0.1673668622970581,0.0921897441148758,0.060524843633174896,-0.19187110662460327,0.2663859724998474,0.045226648449897766,-0.07935792952775955,-0.14352525770664215,0.07941047847270966,-0.09000586718320847,0.08697181940078735,-0.03314889222383499,-0.023058639839291573,-0.10108644515275955,0.011132881976664066,-0.31468796730041504,0.12286544591188431,0.11128722131252289,-0.03169013187289238,-0.02227337285876274,0.06758071482181549,-0.43124109506607056,-0.04768659919500351,0.31831106543540955,0.17265470325946808,0.024733075872063637,-0.1427932232618332,-0.11255284398794174,-0.16882523894309998,0.1015075072646141,0.026346340775489807,-0.1757081151008606,0.026611993089318275,0.04427775368094444,-0.03075457364320755,-0.10698436200618744,0.03915773332118988,0.12972354888916016,0.10701275616884232,-0.19611281156539917,0.2798101305961609,0.17938224971294403,-0.017673460766673088,-0.2070213109254837,-0.12446986883878708,-0.05902458354830742,-0.10179533809423447,0.051750585436820984,-0.3012438416481018,0.10591650754213333,-0.1415162831544876,-0.014238924719393253,0.18301476538181305,0.19579003751277924,-0.06738252937793732,0.17180822789669037,-0.15292194485664368,-0.16934315860271454,0.1112818717956543,-0.1879623383283615,-0.05097365006804466,-0.05103934556245804,0.09531484544277191,-0.3464527130126953,-0.008379626087844372,0.1260547637939453,-0.14862027764320374,-0.01969851553440094,0.1701429784297943,-0.18695934116840363,-0.1625193953514099,-0.005390079692006111,0.03939061984419823,0.018453264608979225,0.04072364792227745,0.16728632152080536,-0.31864726543426514,0.14197246730327606,-0.0836714506149292,-0.0844738781452179,-0.14062967896461487,-0.1023915559053421,0.17905297875404358,-0.13254162669181824,0.277878075838089,-0.11319924890995026,0.10317044705152512,-0.21317468583583832,-0.031516555696725845,0.17481037974357605,0.07597925513982773,-0.010555870831012726,-0.09165877848863602,-0.19091053307056427,0.045918285846710205,-0.14108119904994965,-0.06758683174848557,0.10181310772895813,0.07073327153921127,0.10993768274784088,-0.26071521639823914,0.12406230717897415,-0.060243330895900726,0.11159676313400269,-0.20662178099155426,-0.06989580392837524,0.09550345689058304,-0.2587507963180542,0.40667545795440674,0.2451310157775879,-0.31911447644233704,-0.03959747031331062,0.0028898620512336493,0.25363829731941223,0.12108027189970016,0.14648348093032837,-0.28972870111465454,0.15140563249588013,-0.37482184171676636,0.0410044826567173,0.15520843863487244,0.19340799748897552,0.09951724857091904,0.07009055465459824,-0.0633314773440361,0.20209671556949615,0.11810509115457535,-0.08986975252628326,-0.13652361929416656,-0.16973236203193665,-0.2684200704097748,0.2843720316886902,0.24297742545604706,0.07339160889387131,0.05998076871037483,-0.16180476546287537,-0.22618535161018372,0.15442736446857452,-0.01295526884496212,-0.048313967883586884,0.1288667470216751,0.23102068901062012,0.07953912764787674,0.010427271947264671,-0.07439003139734268,0.113710917532444,-0.09453748911619186,-0.05434555932879448,-0.0012629234697669744,-0.06204435974359512,0.17408539354801178,-0.11750171333551407,-0.08953653275966644,0.21954338252544403,-0.2467854917049408,-0.07209990918636322,-0.0019065459491685033,0.07295519858598709,-0.16079065203666687,0.1536683738231659,-0.06048288196325302,-0.06694147735834122,-0.2470635026693344,-0.1881200224161148,0.06736136227846146,0.2126365751028061,0.026819737628102303,0.12013042718172073,0.0906730517745018,0.1103954091668129,-0.09229260683059692,-0.16012927889823914,-0.10398779809474945,-0.017026355490088463,-0.2381502240896225,-0.15336021780967712,0.2352655678987503,0.1425485759973526,-0.019605858251452446,0.060915760695934296,-0.013521932065486908,-0.15559913218021393,-0.30611297488212585,-0.2875288426876068,0.023950986564159393,-0.059970956295728683,-0.20292112231254578,-0.07338142395019531,0.013913270086050034,0.005575257353484631,-0.17544889450073242,-0.1747903972864151,0.09304016828536987,-0.18529213964939117,0.12195874750614166,-0.08185727894306183,-0.010474788025021553,-0.20229238271713257,0.2973119020462036,-0.052052874118089676,0.15224289894104004,-0.2882789373397827,0.08777772635221481,-0.0021511639934033155,0.27512815594673157,0.11491772532463074,0.050974711775779724,0.3634759783744812,0.06854695826768875,-0.1782236099243164,0.030617963522672653,0.20717766880989075,0.27046722173690796,0.021346742287278175,-0.2664114236831665,0.2863209545612335,-0.017931614071130753,-0.37583214044570923,-0.07160051167011261,0.21703556180000305,-0.03680936619639397,0.19767096638679504,-0.046978313475847244,0.010515415109694004,0.16767996549606323);\nfloat w2[64] = float[64](0.03536967188119888,-0.11798718571662903,-0.01410122960805893,0.012234079651534557,-0.0060555534437298775,0.016702372580766678,-0.05933532118797302,0.056098442524671555,-0.03003266453742981,-0.12026191502809525,0.037956755608320236,0.032034289091825485,0.017384402453899384,0.04151315987110138,0.024107689037919044,0.051787786185741425,-0.013638882897794247,-0.03681575879454613,-0.057590220123529434,0.10826088488101959,0.05227268487215042,-0.1848098188638687,0.04155542328953743,0.03054199181497097,-0.03644523024559021,-0.009252971969544888,-0.10195204615592957,0.034023769199848175,-0.0595078207552433,0.06535907834768295,0.03855027258396149,0.04295693337917328,-0.04384934529662132,-0.05179554969072342,-0.031095687299966812,-0.06902329623699188,-0.048680368810892105,0.047814950346946716,-0.013056297786533833,0.018101520836353302,0.081719771027565,-0.03726177662611008,-0.04172438010573387,-0.04897978529334068,-0.06839074194431305,0.06587263941764832,0.048902999609708786,0.08797991275787354,0.09042654931545258,0.046648696064949036,0.03406861051917076,0.07872359454631805,-0.06466467678546906,-0.016457244753837585,-0.1231265440583229,0.04865531623363495,-0.01402250025421381,-0.01501036062836647,-0.12904800474643707,-0.023661650717258453,0.022960437461733818,0.04542502760887146,0.009620482102036476,0.05335313826799393);\n\n\n\n// Random Number Generator\n// From https://www.shadertoy.com/view/MsKGWz:\n// See Stack Overflow: http://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader/10625698#10625698\nfloat random_1( vec2 p )\n{\n    vec2 r = vec2(\n        23.14069263277926, // e^pi (Gelfond's constant)\n         2.665144142690225 // 2^sqrt(2) (Gelfondâ€“Schneider constant)\n    );\n    return fract( cos( mod( 12345678., 256. * dot(p,r) ) ) );\n}\n\n// Samples the neighbourhood (wrapping around where needed)\nvec2 coord (vec2 fragCoord, vec2 offset){\n    float x = mod(fragCoord.x + offset.x, iResolution.x);\n    float y = mod(fragCoord.y + offset.y, iResolution.y);\n    return vec2(x, y)/iResolution.xy;\n}\nvec4[9] sample_tex (vec2 fragCoord){\n    vec4 tex[9] = vec4[9](\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, 0)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(-1, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(0, -1)))-0.5)*10.,\n        (texture(iChannel0, coord(fragCoord, vec2(1, -1)))-0.5)*10.\n    );\n    return tex;\n}\n\n// The four kernels used\nvec4 ident(vec2 fragCoord, vec4[9] tex){\n    return tex[4]; // no offset\n}\nvec4 sobel_x(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[3]-1.*tex[6]+1.*tex[2]+2.*tex[5]+1.*tex[8];\n    return result;\n}\nvec4 sobel_y(vec2 fragCoord, vec4[9] tex){\n    vec4 result = -1.*tex[0]-2.*tex[1]-1.*tex[2]+1.*tex[6]+2.*tex[7]+1.*tex[8];\n    return result;\n}\nvec4 lap(vec2 fragCoord, vec4[9] tex){\n    vec4 result = 1.*tex[0]+2.*tex[1]+1.*tex[2]+2.*tex[3]-12.*tex[4]+2.*tex[5]+1.*tex[6]+2.*tex[7]+1.*tex[8]; // was an errant +2.\n    return result;\n}\n\n// Our activation function\nfloat relu(float x){\n    if (x > 0.){return x;}\n    return 0.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Sample BufC for kernels\n    vec4 tex[9] = sample_tex(fragCoord);\n    \n    // Apply filters\n    vec4 id = ident(fragCoord, tex);\n    vec4 sx = sobel_x(fragCoord, tex);\n    vec4 sy = sobel_y(fragCoord, tex);\n    vec4 ll = lap(fragCoord, tex);\n    \n    // Create x (4 channels x 4 filters, per channel conv)\n    float x[16];\n    x[0] = id.x;x[1] = sx.x;x[2] = sy.x;x[3] = ll.x;\n    x[4] = id.y;x[5] = sx.y;x[6] = sy.y;x[7] = ll.y;\n    x[8] = id.z;x[9] = sx.z;x[10] = sy.z;x[11] = ll.z;\n    x[12] = id.w;x[13] = sx.w;x[14] = sy.w;x[15] = ll.w;\n    \n    \n    // First layer \n    float l1_out[nh];\n    for (int i = 0; i < nh; i++){\n        // Dot Product equivalent to:\n        // dot_product = x @ w1_i\n        float dot_product = 0.;\n        for (int j = 0; j < 16; j++){\n            dot_product += x[j]*w1[i*16+j];\n        }\n        // Add bias then RELU\n        l1_out[i] = relu(dot_product+b1[i]);  ;\n    }\n    \n    // Second layer\n    float l2_out[4];\n    for (int i = 0; i < 4; i++){\n        float dp2 = 0.;\n        for (int j = 0; j < nh; j++){\n            dp2 += l1_out[j]*w2[i*nh+j];\n        }\n        l2_out[i] = dp2; \n    }\n    \n    // Proposed update\n    vec4 y = vec4(l2_out[0], l2_out[1], l2_out[2], l2_out[3]);\n    \n    // Output as prev state\n    fragColor = id*0.1 + vec4(0.5);\n    \n    \n    // If (noise>0.5) apply update\n    vec2 p = vec2(uv.x/2.+sin(iTime/1000.), uv.y/2.+cos(iTime/1000.));\n    if (random_1(p) < 0.5){\n        fragColor = (id + y)*0.1 + vec4(0.5);\n    }\n    \n    // If (mouse down) paint grey around it\n    if(length(fragCoord.xy-iMouse.xy/2.)<(20.)){\n        if (iMouse.z>0.5){fragColor = vec4(0.5);}\n    }\n    \n    // Init \n    if (iFrame==0){fragColor = vec4(0.5);}\n    \n    \n}\n","name":"Buffer A","description":"","type":"buffer"}]}