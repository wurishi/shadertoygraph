{"ver":"0.1","info":{"id":"WsjcWR","date":"1605018305","viewed":170,"name":"Hexagon glow animation","username":"nicolaecodreanu","description":"Hexagon glow animation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://www.shadertoy.com/view/Xljczw\n//https://www.shadertoy.com/view/Xd2GR3\n\n#define PI 3.14159265359\n#define TWOPI 6.28318530718\n#define polar(a) vec2(cos(a),sin(a))\n#define ANIMATION_TIMESCALE 1.0\n#define ANIM_FUNC Quart\n#define rotate(a) mat2(cos(a),sin(a),-sin(a),cos(a));\n\nfloat Quart(float s, float e, float t)\n{\n    t = clamp((t - s) / (e - s), 0.0, 1.0);\n    return 1.0 - pow(1.0 - t, 4.0);\n}\n\nfloat exponentialOut(float s,float e,float t) {\n  \tt = clamp((t - s) / (e - s),0.0,1.0);\n  \treturn t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\n}\n\nfloat hash21(vec2 p){ return fract(sin(dot(p, vec2(141.13, 289.97)))*43758.5453); }\n\nfloat sdCircle(in vec2 p, in float r)\n{\n\treturn length(p) - r;\n}    \n\nfloat hex(in vec2 p){\n    p = abs(p);\n    return max(p.x*.866025 + p.y*.5, p.y); \n}\n\nvec4 getHex(vec2 p){\n    vec2 s = vec2(1.7320508, 1);\n    vec4 hC = floor(vec4(p, p - vec2(1, .5))/s.xyxy) + .5;\n    vec4 h = vec4(p - hC.xy * s, p - (hC.zw + .5) * s);\n    return dot(h.xy, h.xy) < dot(h.zw, h.zw) ? vec4(h.xy, hC.xy) : vec4(h.zw, hC.zw + .5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y;\n    float px = 2.0 / iResolution.y;\n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    //hexagon uv\n    float tiles = 10.0;\n    vec4 hv = getHex(tiles * uv);\n    vec2 id = hv.zw;\n    float e = hex(hv.xy); //distance from edge to center\n   \tfloat r = 0.45;\n    float w = fwidth(e);\n    float rnd;\n    \n    vec2 nest = vec2(tiles * 0.5);\n    vec2 nestSize = vec2(2.5, 2.5);\n    \n    float x1 = step(nest.x - nestSize.x + 0.5, id.x);\n    float x2 = step(id.x, nest.x + nestSize.x - 0.5);\n    float y1 = step(nest.y - nestSize.y, id.y);\n    float y2 = step(id.y, nest.y + nestSize.y);\n    \n    \n    if(x1 * x2 * y1 * y2 > 0.0) {\n\n        //setup timer loop \n        const float loop = 3.0;\n        float t = iTime * ANIMATION_TIMESCALE;\n        t = mod(t, loop);\n\n        //hexagon background\n        col = mix(col, vec3(0.6), 1.0 - smoothstep(r - w, r + w, e));\n\n        //blink animation\n        rnd = sin(hash21(id) * TWOPI + iTime * 0.5) * 0.5 + 0.5;\n        float blink = smoothstep(0., .125, rnd - .666);\n        col = max(col - mix(vec3(0.0), vec3(0.2), blink), 0.0);\n\n        //hexagon border\n        float b1 = smoothstep(r - tiles * px, r, e); //border\n        float b2 = smoothstep(r, r + tiles * px, e); //border\n        float b = b1 - b2;\n        col = mix(col, vec3(0.9), b);\n\n        //hexagon light\n        rnd = dot(id.y, id.x) + iTime * ANIMATION_TIMESCALE;\n        vec2 lv = hv.xy * rotate(rnd);\n        float a = atan(lv.y, lv.x);\n        float l = 1.0 - smoothstep(0.0, PI * 0.3, abs(a));\n        col = mix(col, vec3(2.0), min(b, l));\n\n        //hexagon shadow\n        float s1 = smoothstep(r - 2.0 * tiles * px, r - tiles * px, e);\n        float s2 = smoothstep(r - tiles * px, r, e);\n        float s = s1 - s2;\n        col = mix(col, vec3(0.5), min(s, l));\n\n        //sattelites positions\n        const int cnt = 6;\n        vec2 dirs[cnt];\n        for(int i = 0; i < cnt; i++) \n        {\n            dirs[i] = polar(float(i) * TWOPI / float(cnt));\n        }\n\n        for(int i = 0; i < cnt; i++) \n        {\n            //setup animation\n            float show = (1.0 / float(cnt)) * float(i);\n            float fadeIn = ANIM_FUNC(show, show + 0.5, t);\n            float fadeOut = ANIM_FUNC(loop - 1.0, loop, t);\n\n            //setup mask\n            float mask = fadeIn - fadeOut;\n            mask = 1.0;\n\n            //draw sattelites\n            float d = sdCircle(hv.xy - dirs[i] * 0.52, tiles * px);\n            col = mix(col, vec3(1.0), (1.0 - smoothstep(-px, px, d)) * mask);\n        }\n    }    \n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}