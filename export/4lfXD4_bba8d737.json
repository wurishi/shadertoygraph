{"ver":"0.1","info":{"id":"4lfXD4","date":"1436676902","viewed":209,"name":"Cray Tracer","username":"vanSulli","description":"learning about raytracing","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test","raytrace","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"vec3 nSphere( in vec3 pos, in vec4 sph){\n    return (pos - sph.xyz)/sph.w;\n}\n\nvec3 nPlane(in vec3 pos){\n    return vec3(0.0, 1.0, 0.0);\n}\n\nfloat iSphere(in vec3 ro, in vec3 rd, in vec4 sph){\n    vec3 oc = ro - sph.xyz;\n    float b = 2.0*dot(oc, rd);\n    float c = dot(oc, oc) - sph.w*sph.w;\n    float h = b*b - 4.0*c;\n    \n    if(h<0.0) return -1.0;\n    \n    float t = (-b - sqrt(h))/2.0;\n    return t;\n}\n\nfloat iPlane(in vec3 ro, in vec3 rd){\n    return -ro.y/rd.y;\n}\n\nvec4 sphere1 = vec4(0.0, 1.0, 0.0, 1.0);\n\nfloat intersect(in vec3 ro, in vec3 rd, out float resT){\n    float tsphere = iSphere(ro, rd, sphere1); //intersect with a sphere\n    float tplane = iPlane(ro, rd);\n    resT = 1000.0;\n    float id = -1.0;\n    if(tsphere > 0.0)\n    {\n        // hit a sphere\n        id = 1.0;\n        resT = tsphere;\n    }\n    if(tplane > 0.0 && tplane < resT){\n        // hit a plane\n        id = 2.0;\n        resT = tplane;\n    }\n    \n    return id;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 light = normalize(vec3(cos(iTime), 0.5, 0.7));\n    \n\tvec2 uv = (fragCoord.xy / iResolution.xy);\n    //sphere1.x = cos(iTime/2.0);\n    \n    // Make a ray\n    vec2 uvd = uv;// + vec2(iMouse.x/iResolution.x*2.0 - 1.5,iMouse.y/iResolution.y*2.0 - 1.0);\n    \n    vec3 ro = vec3(0.0, 0.1, 3.0);\n    ro += vec3(vec2(iMouse.x/iResolution.x*2.0 - 1.5,iMouse.y/iResolution.y*2.0 - 1.0),0.0);\n    vec3 rd = normalize(vec3(1.0*uvd* vec2(1.7, 1.0), -1.0) );\n    \n    // test for intersection with the scene\n    float t;\n    float id = intersect( ro, rd, t);\n    \n    vec3 col = vec3(0.0);\n    if( id>0.0 && id<1.5){\n     // hit sphere\n        vec3 position = ro + t*rd;\n        vec3 normal = nSphere(position, sphere1 );\n        float diffuse = dot(normal, light);\n        float ao = 0.5 + 0.5*normal.y;\n        col = vec3(0.390625, 0.5843, 0.929)*diffuse*ao + vec3(0.1, 0.2, 0.4)*ao;\n        \n    }\n    else if(id>1.5){\n     // hit plane\n        vec3 position = ro + t*rd;\n        vec3 normal = nPlane(position);\n        float diffuse = dot(normal, light);\n        float ambient = smoothstep(0.0, sphere1.w * 1.5, length(position.xz - sphere1.xz));\n        col = diffuse*ambient*vec3(0.5, 0.3, 0.0);\n    }\n    col = sqrt(col);\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}