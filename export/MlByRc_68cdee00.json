{"ver":"0.1","info":{"id":"MlByRc","date":"1509492872","viewed":128,"name":"Live Goo toon texture","username":"rafaelcastrocouto","description":"\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cell"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SPEED 1.0\n// #define SMOOTH 1\n#define NUM_NOISE_OCTAVES 4\n\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat hash(vec2 p) { return  /*(sin(iTime*3.0*SPEED)*0.02) +*/ fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x)))); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n\nfloat fbm(float x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tfloat shift = float(100);\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\nfloat fbm(vec2 x) {\n\tfloat v = 0.0;\n\tfloat a = 0.5;\n\tvec2 shift = vec2(100);\n\t// Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), -sin(0.5), cos(0.50));\n\tfor (int i = 0; i < NUM_NOISE_OCTAVES; ++i) {\n\t\tv += a * noise(x);\n\t\tx = rot * x * 2.0 + shift;\n\t\ta *= 0.5;\n\t}\n\treturn v;\n}\n\n\n\nfloat voronoi2D(vec2 uv) {\n    vec2 fl = floor(uv);\n    vec2 fr = fract(uv);\n    float res = 1.0;\n    for( int j=-1; j<=1; j++ ) {\n        for( int i=-1; i<=1; i++ ) {\n            vec2 p = vec2(i, j);\n            float h = hash(fl+p);\n            vec2 vp = p-fr+h;\n            float d = dot(vp, vp);\n            \n            res +=1.0/pow(d, 8.0);\n        }\n    }\n    return pow( 1.0/res, 1.0/16.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float size = 0.2;\n    float limit = 0.5 + (sin(iTime*10.0)*0.001);\n    float border = 0.02;\n    float t = iTime*0.8;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float vo = voronoi2D(((1.0/size) * uv ));\n    \n    vec2 coord = fragCoord.xy / 50.0;\n    \n    float c = fbm(vec2(vo/1.0 - coord.x + t,  coord.y  ));\n    vec3 color = vec3(step(limit-border,c), step(limit+border, c), 1);\n    if (color.x == 1.0 && color.y == 1.0 && color.z == 1.0)  { color = vec3(0.8, 0.05, 0.05); }\n    else if (color.x == 1.0 && color.y != 1.0 && color.x == 1.0) { color = vec3(0.5, 0.05, 0.05); }\n    else { color = vec3(0.2, 0.05, 0.05); }\n    \n#ifdef SMOOTH\n    c = smoothstep(limit - border, limit, c) - smoothstep(limit, limit + border, c);\n    fragColor = vec4(c * c * c, 0.25 + 0.75 * c * c, 0.5 + 0.5 * c, 1.0);\n#else\n    fragColor.rgb = clamp(color, 0.0, 1.0);\n  //  fragColor.rgb = clamp(vec3(c,c,c), 0.0, 1.0);\n#endif\n\n}","name":"Image","description":"","type":"image"}]}