{"ver":"0.1","info":{"id":"XsdXDX","date":"1461846834","viewed":2874,"name":"Voronesque Gem","username":"aiekick","description":"Voronesque marvelous func by shane","likes":45,"published":3,"flags":0,"usePreview":0,"tags":["gem","voronesque"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Stephane Cuillerdier - @Aiekick/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Tuned via XShade (http://www.funparadigm.com/xshade/)\n\n// by shane\nfloat Voronesque( in vec3 p )\n{\n    vec3 i  = floor(p+dot(p, vec3(0.333333)) );  p -= i - dot(i, vec3(0.166666)) ;\n    vec3 i1 = step(0., p-p.yzx), i2 = max(i1, 1.0-i1.zxy); i1 = min(i1, 1.0-i1.zxy);    \n    vec3 p1 = p - i1 + 0.166666, p2 = p - i2 + 0.333333, p3 = p - 0.5;\n    vec3 rnd = vec3(5.46,62.8,164.98); // my tuning\n    vec4 v = max(0.5 - vec4(dot(p, p), dot(p1, p1), dot(p2, p2), dot(p3, p3)), 0.);\n    vec4 d = vec4( dot(i, rnd), dot(i + i1, rnd), dot(i + i2, rnd), dot(i + 1., rnd) ); \n    d = fract(sin(d)*1000.)*v*2.; \n    v.x = max(d.x, d.y), v.y = max(d.z, d.w); \n    return max(v.x, v.y);\n}\n\nfloat df(vec3 p)\n{\n    float m = length(p) - 1.6;\n\tp.z += iTime * 0.2;\n\treturn m + sqrt(Voronesque(p)*0.5);\n}\n\nvec3 nor(vec3 p, float prec)\n{\n    vec2 e = vec2(-1., 1.) * prec; \n    return normalize(e.yxx*df(p + e.yxx) + e.xxy*df(p + e.xxy) \n\t\t+ e.xyx*df(p + e.xyx) + e.yyy*df(p + e.yyy) );\n}\n\nvec3 shade(vec3 ro, vec3 rd, float d, vec3 v)\n{\n    vec3 p = ro + rd * d;\n\tvec3 np = normalize(p);\t\t\t\n\tvec3 n = nor(p, 0.01);\n\treturn (normalize(mix(vec3(max(0.,2.3-d)),np,0.8))\n\t\t* texture(iChannel0, reflect(rd, n)).rgb * v.x\n\t\t+ pow(.35 + dot(n, np) * .6, 30.) * v.y) * v.z;\n}\n\nvoid mainImage( out vec4 f, vec2 g )\n{\n    f.xyz = iResolution;\n    g = (g+g-f.xy)/f.y;\n    \n    float t = iTime * 0.1;\n    \n    vec3 cu = vec3(0,1,0);\n    vec3 ro = vec3(cos(t) * 2.,1.,sin(t) * 2.);\n    vec3 co = vec3(0,0,0);\n\t\n\tfloat fov = 1.;\n\tvec3 axisZ = normalize(co - ro);\n\tvec3 axisX = normalize(cross(cu, axisZ));\n\tvec3 axisY = normalize(cross(axisZ, axisX));\n\tvec3 rd = normalize(axisZ + fov * g.x * axisX + fov * g.y * axisY);\n    \n    vec3 p=ro, np, n, col, colss;\n    \n    f = texture(iChannel0, rd);\n    \n    float d=0.,s=1.;\n\t\n\tfor(int i=0;i<50;i++)\n\t\tif(s>0.001 && d<10.)\n\t\t\td+=s=df(ro+rd*d);\n\t\n\t// surface\n    if (d<10.)\n    {\n\t\t// surface color\n        col = shade(ro, rd, d, vec3(.9,0,1));\n        \n        // sub surface\n        ro = ro+rd*d;\n        d = 1.;\n\n        // sub surface color\n        colss = shade(ro, rd, d, vec3(1,1,3));\n        float ratio = 0.45;\n\t\tcolss = clamp(colss, 0., 1./(1.-ratio));\n\t\tf.rgb += mix(col, colss, ratio);\n\t}\n}","name":"Image","description":"","type":"image"}]}