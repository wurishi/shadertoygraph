{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"cubemap","id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Voronoi shatter\n// @simesgreen 4/12/2012\n\nconst float texelSize = 1.0 / 64.0;\nconst int numPoints = 16;\n\n// transforms\nvec3 rotateX(vec3 p, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    return vec3(p.x, ca*p.y - sa*p.z, sa*p.y + ca*p.z);\n}\n\nvec3 rotateY(vec3 p, float a)\n{\n    float sa = sin(a);\n    float ca = cos(a);\n    return vec3(ca*p.x + sa*p.z, p.y, -sa*p.x + ca*p.z);\n}\n\nfloat getScale()\n{\n\t//return 1.0;\n\treturn 6.0 - cos(iTime*0.3)*5.0;\n}\n\n// get random vertex position from texture\nvec3 getVertex(int i)\n{\n\tfloat j = texelSize*iTime*0.2;\t// animate\n\t//float j = 0.5;\t\n\tvec3 v = texture(iChannel0, vec2(float(i)*texelSize, j)).xyz*2.0-1.0;\n\tv *= getScale();\n\treturn v;\n}\n\n// intersect ray against half-plane\nvoid intersectPlane(vec3 ro, vec3 rd, vec3 n, float d, inout float t1, inout float t2, inout vec3 hitn, inout bool hit)\n{\n\tfloat denom = dot(n, rd);\n\tfloat dist = d - dot(n, ro);\n\tfloat t = dist / denom;\n\tif (denom < 0.0) {\n\t\t// entering halfspace\n\t\tif (t > t1) {\n\t\t\tt1 = t;\n\t\t\thitn = n;\n\t\t}\n\t} else  {\n\t\t// leaving halfspace\n\t\tif (t < t2) {\n\t\t\tt2 = t;\n\t\t}\n\t}\n\tif (t1 > t2) {\n\t\thit = false;\n\t}\t\t\t\t\t\t\n}\n\n// intersect ray against convex polyhedron defined by half-planes\nbool intersectConvex(vec3 ro, vec3 rd,\n\t\t\t\t\t int j,\n\t\t\t\t\t float s,\n\t\t\t\t\t out float t1,\n\t\t\t\t\t out vec3 hitn)\n{\n\tbool hit = true;\n\tt1 = 0.0;\n\tfloat t2 = 1e10;\n\t\n\tvec3 p = getVertex(j);\n\t\n\t// look at all other vertices\n\tfor(int i=0; i<numPoints; i++) {\n\t\tif (i!=j) {\n\t\t\tvec3 p2 = getVertex(i);\n\t\t\t// define plane halfway between this and other vertex\n\t\t\tvec3 n = normalize(p2 - p);\n\t\t\tvec3 mid = p + (p2 - p)*s;\n\t\t\t\n\t\t\tintersectPlane(ro - mid, rd, n, 0.0, t1, t2, hitn, hit);\n\t\t}\n\t}\n\n\t// intersect with box sides\n\tfloat d = getScale();\n\t//float d = 1.0;\n\tintersectPlane(ro, rd, vec3(-1, 0, 0), d, t1, t2, hitn, hit);\n\tintersectPlane(ro, rd, vec3(1, 0, 0), d, t1, t2, hitn, hit);\t\n\tintersectPlane(ro, rd, vec3(0, -1, 0), d, t1, t2, hitn, hit);\t\t\n\tintersectPlane(ro, rd, vec3(0, 1, 0), d, t1, t2, hitn, hit);\t\t\t\n\tintersectPlane(ro, rd, vec3(0, 0, -1), d, t1, t2, hitn, hit);\t\t\n\tintersectPlane(ro, rd, vec3(0, 0, 1), d, t1, t2, hitn, hit);\t\t\t\n\t\n\treturn hit;\n}\n\nfloat fresnel(vec3 n, vec3 v, float minr)\n{\n\treturn minr + (1.0-minr)*pow(1.0 - clamp(dot(n, v), 0.0, 1.0), 2.0);\n}\n\n// lighting\nvec3 shade(vec3 pos, vec3 n, vec3 eyePos, vec3 c)\n{\n    const float shininess = 80.0;\n\tconst vec3 l = vec3(0.577, 0.577, 0.577);\n\t//const vec3 c = vec3(1.0);\n\t\n    vec3 v = normalize(eyePos - pos);\n    vec3 h = normalize(v + l);\n\t\n    float diff = dot(n, l);\n    float spec = pow(max(0.0, dot(n, h)), shininess) * float(diff > 0.0);\n    //diff = max(0.0, diff);\n    diff = 0.5+0.5*diff;\n\t\n\t// reflection\n\tvec3 R = reflect(-v, n);\n\tvec3 Rcol = texture(iChannel1, R).xyz;\n\t//Rcol *= 1.0 + smoothstep(0.5, 1.0, R.x)*2.0;\n\t\n\t// refraction\n\t//const float eta = 1.0 / 1.4;\t// air-glass\n\tconst float eta = 1.0 / 1.1;\t// air-glass\n\t\t\n#if 0\n\tvec3 T = normalize(-v + n*0.1);\n\t//vec3 T = refract(-v, n, eta);\n\tvec3 Tcol = texture(iChannel1, T).xyz;\n#else\n\t// dispersion\n\tvec3 T = refract(-v, n, eta);\n\tvec3 Tcol;\n\tTcol.r = texture(iChannel1, T).r;\n\tT = refract(-v, n, eta + 0.01);\n\tTcol.g = texture(iChannel1, T).g;\t\n\tT = refract(-v, n, eta + 0.02);\n\tTcol.b = texture(iChannel1, T).b;\t\n#endif\n\t\n    float f = fresnel(n, v, 0.2);\n\n\t//return c;\t\n    //return diff*c + vec3(spec);\n\t//return Rcol;\n\t//return Rcol*f;\n\t//return Tcol;\n    //return n*0.5+0.5;\n\t//return pos*0.5+0.5;\n\t//return mix(Tcol, Rcol, f);\n\treturn diff*c + Rcol*f;\t\n}\n\n\nvec3 background(vec3 rd)\n{\n    //return mix(vec3(1.0), vec3(0.0, 0.25, 1.0), rd.y);\n\treturn texture(iChannel1, rd).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n\n    // compute ray origin and direction\n    float asp = iResolution.x / iResolution.y;\n    vec3 rd = normalize(vec3(asp*pixel.x, pixel.y, -2.0));\n    vec3 ro = vec3(0.0, 0.0, 5.0);\n\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\tfloat roty;\n\tfloat rotx;\n\tif (iMouse.z <= 0.0) {\n\t\trotx = -sin(iTime*0.3)*0.5;\n\t\troty = iTime*0.1;\t\n\t} else {\n\t\trotx = (mouse.y-0.5)*3.0;\n\t\troty = -(mouse.x-0.5)*6.0;\n\t}\n\t\n    rd = rotateX(rd, rotx);\n    ro = rotateX(ro, rotx);\n\t\t\n    rd = rotateY(rd, roty);\n    ro = rotateY(ro, roty);\n\t\t\n\t//float sep = 0.4;\t\n\tfloat sep = 0.5 / getScale();\n\t\n    // trace ray\n\tvec3 p;\n    vec3 n;\n\tfloat tmin = 1e10;\n\tbool hit = false;\n\tvec4 col;\n\t\n\tfor(int i=0; i<numPoints; i++) {\n\t\tfloat t;\n\t\tvec3 cn;\n\t\tbool chit = intersectConvex(ro, rd, i, sep, t, cn);\n\t\tif (chit  && (t < tmin)) {\n\t\t\ttmin = t;\n\t\t\tn = cn;\n\t\t\tcol = texture(iChannel0, vec2(0.0, float(i)*texelSize));;\n\t\t}\n\t\thit = hit || chit;\t\t\n\t}\n\tp = ro + tmin*rd;\t\n\t\n    vec3 rgb;\n    if(hit) {\n        // shade\n        rgb = shade(p, n, ro, col.xyz);\n\n\t} else {\n\t\trgb = background(rd);\n\t}\n    \n\t// vignetting\n    rgb *= 0.5+0.5*smoothstep(2.0, 0.5, dot(pixel, pixel));\n\t\n    fragColor=vec4(rgb, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsfGz7","date":"1365783177","viewed":2241,"name":"Shatter","username":"simesgreen","description":"more messing about with convex objects. this time, voronoi decomposition of a cube!","likes":37,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","texture","convex"],"hasliked":0,"parentid":"","parentname":""}}