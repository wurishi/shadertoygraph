{"ver":"0.1","info":{"id":"tlGfWt","date":"1615260028","viewed":55,"name":"Dangerous Pringle Chip","username":"MarvelousBilly","description":"dont eat it","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["raymarching","pringles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotmat(vec3 axis, float angle){\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\treturn mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n\toc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n\toc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n} //rotate a matrix\n\nfloat displacement(vec3 p){\n    vec3 pos = normalize(p);\n    float bumpy = (5.*sin(3.*iTime)+30.);\n    return sin(bumpy*pos.x)*sin(bumpy*pos.y)*sin(bumpy*pos.z);\n}\n\nfloat sdRoundedCylinder( vec3 p, vec3 c, float ra, float rb, float h )\n{\n    p -= c;\n    vec2 d = vec2( length(p.xz)-2.0*ra+rb, abs(p.y) - h );\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0)) - rb;\n}\n\nfloat opDisplace(in vec3 p )\n{\n    float d1 = sdRoundedCylinder(p, vec3(0.,-20.,0.), 10.,0.1,1.);\n    float d2 = displacement(p);\n    return d1+d2;\n}\nfloat opCheapBend(in vec3 p )\n{\n    const float k = 0.02; // or some other amount\n    float c = cos(k*p.x);\n    float s = sin(k*p.x);\n    mat2  m = mat2(c,-s,s,c);\n    vec3  q = vec3(m*p.xy,p.z);\n    return opDisplace(q);\n}\nfloat map(vec3 p){\n    float a = opCheapBend(p);\n    return a;\n}\n\nfloat softshadow(vec3 lig, vec3 cam, float k, float minD){\n    float l = distance(cam,lig);\n    vec3 dir = normalize(lig-cam);\n\n    float res = 1.0;\n    float ph = 1e20;\n    for(float i = 0.9; i < l;){\n        vec3 p = cam + dir * i;\n        float h = map(p);\n        if(h < minD){\n            return 0.0;\n        }\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, i - y));\n        ph = h;\n        i += h;\n    }\n    return res;\n}\n\nvec4 raymarch(vec3 rd, vec3 ro, float maxD, float minD){ \n    rd = normalize(rd);\n    float t = 0.;\n    for(float i = 0.003; i < maxD;){ //i = length of ray\n        vec3 p = ro + i * rd;\n        float h = map(p); //smallest distance from all objects to point\n        if(h < minD){\n            return vec4(p.xyz, t);\n        }\n        i += h;\n        t++;\n    }\n    return vec4(ro.xyz,0.);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord - (iResolution.xy/2.);\n    vec3 col = vec3(1.);\n    float fov = 70.;\n    float fovDis = (iResolution.y / 2.) / tan(fov/2.);\n    vec2 Mouse = texelFetch(iChannel0, ivec2(2,0), 0).xy; //get the mouse position in pixels to the normalized value from 0 to 1\n    vec3 cam = vec3(texelFetch(iChannel0, ivec2(0, 0), 0));\n    vec3 dir = normalize(rotmat(vec3(0.0, -1.0, 0.0), 3.0 * (Mouse.x * 2.0 - 1.0)) * rotmat(vec3(1.0, 0.0, 0.0), 1.5 * (Mouse.y * 2.0 - 1.0)) * vec3(uv.x,uv.y, fovDis) + cam); //rotate the direction you look\n    //vec3 dir = vec3(uv.xy,fovDis);\n    \n    vec3 light = cam;\n    \n    vec4 r = raymarch(dir, cam, 300., 0.0003);\n    if(r.xyz != cam){\n        //col = vec3(softshadow(light, r.xyz, 10., 0.003));\n        \n        float w = r.w;\n        float g = 1.-smoothstep(0. ,80.,w);\n        float b = smoothstep(0.,20.,w);\n        if(w > 20.){\n            b = 1.-smoothstep(20.,80.,w);\n        }\n        float r = smoothstep(30.,40.,w);\n        if(w > 40.){\n            r = 1.-smoothstep(40.,60.,w);\n        }\n        r /= 2.;\n\n        col *= vec3(r,g,b);\n    }\n    else{\n        col = texture(iChannel1, dir).xyz; //skybox\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define key(ascii)   (texelFetch(iChannel1,ivec2(ascii,0),0).x > 0.)\n\nvoid prevMouse(out vec4 fragColor) {//mouse position\n    vec4 v = vec4(iMouse.xy/iChannelResolution[0].xy,1.,0.);  //normalized mouse position\n    fragColor = v; //update value stored (mouse position normalized)\n}\n\nvoid initPos(out vec4 fragColor){\n\tvec4 val = vec4(0.,10.,20.,1.); //set the inital position when starting script\n    fragColor = val;\n}\n\nvoid initVal(out vec4 fragColor){\n    vec4 val = vec4(0.01,0.35,0.,0.); //set the inital mouse position when starting script\n    fragColor = val;\n}\n\nvoid deltaMouse(out vec4 fragColor) {\n    vec4 val = texelFetch(iChannel0, ivec2(2,0), 0);\n    //grab current delta mouse position\n    vec4 oldMouse = texelFetch(iChannel0, ivec2(1,0), 0);\n    //grab previous mouse position (last frame)\n    if(iMouse.z > 0.5 && val.w >= 0.5){ //if mouse was not pressed on prev frame, do not update delta\n        //this means it only changes when the mouse is down and does not jump position.\n        vec2 deltaM = (iMouse.xy/iChannelResolution[0].xy)-oldMouse.xy;\n        //set delta to be the change in mouse positions between frames\n    \tval.xy+=deltaM;\n        //add the delta to val\n    }\n    if(val.x >= 1.){\n    \tval.x = 0.;   \n    }\n    if(val.y >= 1.){\n    \tval.y = 0.;   \n    } //allows for full rotations\n    val.w = iMouse.z; //update click state\n    fragColor = val;\n}\n\nmat3 rotmat(vec3 axis, float angle){\n\taxis = normalize(axis);\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\n\tfloat oc = 1.0 - c;\n\treturn mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, \n\toc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s, \n\toc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n} //rotate a matrix\n\nvoid position(out vec4 fragColor){ //allows for movement\n    vec4 val = texelFetch(iChannel0, ivec2(0, 0), 0); //res is the middle of the screen??\n    \n    vec2 Mouse = texelFetch(iChannel0, ivec2(0, 0)+ivec2(2,0), 0).xy;\n    mat3 dir = rotmat(vec3(0.0, -1.0, 0.0), 3.0 * (Mouse.x * 2.0 - 1.0)) * rotmat(vec3(1.0, 0.0, 0.0), 1.5 * (Mouse.y * 2.0 - 1.0));\n    \n    float speed = 0.1; //units per frame\n    if(key(16)){\n    \tspeed*=2.; //if press shift, go faster\n    }\n    if(key(87)){\n    \tval.xyz+=dir[2]*speed; //forward/back\n    }\n    if(key(83)){\n    \tval.xyz-=dir[2]*speed;\n    }\n    if(key(68)){\n    \tval.xyz+=dir[0]*speed; //left/right strafing   \n    }\n    if(key(65)){\n    \tval.xyz-=dir[0]*speed;   \n    }\n\n \tfragColor = val; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    if(iFrame == 0){\n        if (ivec2(fragCoord.xy) == ivec2(0, 0)) {\n            initPos(fragColor); //set inital position\n        }\n        if (ivec2(fragCoord.xy) == ivec2(2, 0)){\n    \t\tinitVal(fragColor); //set inital view direction\n        }\n    }\n    else{\n        if (ivec2(fragCoord.xy) == ivec2(0, 0)) {\n            position(fragColor); //update position\n        }\n        if (ivec2(fragCoord.xy) == ivec2(1, 0)) {\n            prevMouse(fragColor); //update mouse position\n        }\n        if (ivec2(fragCoord.xy) == ivec2(2, 0)) {\n            deltaMouse(fragColor);\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}