{"ver":"0.1","info":{"id":"7tyGWw","date":"1638782515","viewed":325,"name":"Dashed Circle - distance 2D","username":"omidk","description":"SDF describing a dashed circle using trigonometric functions\n\nHLSL version: https://gist.github.com/heyomidk/46cf15b11ab7ffed4200df87d52c186b","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2021 Omid Kiarostami\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Coloring code is from Inigo Quilez's SDFs\n//   - https://iquilezles.org/articles/distfunctions2d\n\nconst float RadiusOuter = 0.6;\nconst float RadiusInner = 0.4;\nconst float NumDashes = 3.;\nconst float DashRatio = 0.5;  // set between 0-1 to adjust the empty space between dashs\n\nfloat sdDashedCircle( in vec2 p) \n{\n    float arcRadius = length(p);\n\n    // Compute the radial distance field coming out from the center of a torus\n    const float hw = (RadiusOuter-RadiusInner)*0.5; // half width from center of torus to edge\n    float radialDF = arcRadius - (RadiusOuter-hw);  // creates a torus\n    radialDF = abs(radialDF)-hw;                    // give an inside and outside to the torus\n\n\n    // Compute the gradient along the length of the arc\n    float arcGradient = atan(p.y,p.x)/6.283185; \n    arcGradient = fract(arcGradient*NumDashes); \n    arcGradient = abs((arcGradient-0.5)*2.0);          // make the gradient a linear, continuous 0-1-0-1 repeating pattern\n    arcGradient = arcGradient-DashRatio;               // split the arc into positive and negative sections\n    float theta = arcGradient * (3.1415927/NumDashes); // gets us a signed angle from the nearest dash edge, in radians\n  \n    // figure out the point closest to us on the nearest dash edge\n    float s = sin(theta);\n    float c = cos(theta);\n    float edgeProjection = clamp(c*arcRadius,RadiusInner,RadiusOuter); // project point p but bound it between the innner and outer radii of the dash\n    vec2  nearestEdgeP = mat2(c,-s,s,c)*p * edgeProjection/arcRadius;  \n    float edgeDF = length(p-nearestEdgeP);\n\n    return (theta   >0.0) ? edgeDF   : \n           (radialDF>0.0) ? radialDF :\n                            max(-edgeDF,radialDF);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n\tfloat d = sdDashedCircle(p);\n    \n\t// coloring\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n    col *= 1.0 - exp(-3.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n        d = sdDashedCircle(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n    \n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}