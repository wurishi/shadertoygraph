{"ver":"0.1","info":{"id":"slXBRX","date":"1652820758","viewed":207,"name":"Space Ship","username":"lucpayet","description":"Naboo fighter inspired from Star Wars : The Mandalorian.\nYou can move camera with your mouse.\n","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["spaceshipstarwars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S smoothstep\n#define AA 2\n#define T iTime*.1\n#define PI 3.1415926535897932384626433832795\n#define TAU 6.283185\n\n#define MAX_STEPS 300\n#define MAX_DIST 30.\n#define SURF_DIST .001\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat smin( float a, float b, float k ) {\n    float h = clamp( 0.5+0.5*(b-a)/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\nmat3 rotationMatrixY (float theta)\n{\n    float c = cos (theta);\n    float s = sin (theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\nmat3 rotationMatrixX(float theta){\n\tfloat c = cos (theta);\n\tfloat s = sin (theta);\n\treturn mat3(\n\t\tvec3(1, 0, 0),\n\t\tvec3(0, c, -s),\n\t\tvec3(0, s, c)\n\t);\n}\nmat3 rotationMatrixZ(float theta){\n\tfloat c = cos (theta);\n\tfloat s = sin (theta);\n\treturn mat3(\n\t\tvec3(c, -s, 0),\n\t\tvec3(s, c, 0),\n\t\tvec3(0, 0, 1)\n\t);\n}\nvec3 rotateX (vec3 p, float theta)\n{\n\treturn rotationMatrixX(theta) * p;\n}\nvec3 rotateY (vec3 p, float theta)\n{\n    return p*rotationMatrixY(theta); \n}\nvec3 rotateZ (vec3 p, float theta)\n{\n\treturn p*rotationMatrixZ(theta); \n}\n\nfloat rounding( in float d, in float h )\n{\n    return d - h;\n}\n\n\nfloat opUnion( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n\t//float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n\t//return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\n\nfloat opSmoothSubtraction( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); \n}\n\n//-------------------------------------------------\nfloat sdCircle( in vec3 p, in float r )\n{\n\treturn length(p)-r;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat speed = 1.9;\nfloat amplitude = 1.5;\nfloat amplitudeR = 1.;\nfloat frequency = 1.2;\n\nfloat lenReactor = 0.4;\n\nfloat createReactor(vec3 p, float rad, float len, out int material){\n\n\tp = vec3(p.x, p.y, abs(p.z)-0.5);\n\tfloat reactor1 = sdCappedCylinder(p, rad-0.02, len);\n\treactor1 = rounding(reactor1, 0.02);\n\tvec3 q = p;\n\tq += vec3(rad *.8, .0,.0);\n\tfloat feature1 = sdCappedCylinder(q, rad * 0.5, len * 0.3);\n\treactor1 = opUnion(reactor1, feature1);\n\n\tq = p;\n\tq += vec3(.0,-len,.0);\n\tfloat fire = sdCircle(q, 0.6 * rad);\n\treactor1 = opUnion(reactor1, fire);\n\tif(fire == reactor1){\n\t\tmaterial = 2;\n\t}\n\telse{\n\t\tmaterial = 1;\n\t}\n\treturn reactor1;\n}\n\n\nfloat map(in vec3 pos, out int material)\n{\n\t//Update pos for the all ship\n\n\t//Reactor\n\tvec3 q = pos;\n\tq = rotateZ(q, PI * 0.5);\n\tq = rotateX(q, PI * 0.5);\n\tfloat rad = 0.12;\n \tfloat reactor = createReactor(q, rad, lenReactor, material);\n\n\t//LinkBetweenReactors\n\tq = pos;\n\tfloat core = sdRhombus(q, 0.3, 0.1, 0.05, 0.2 );\n\tfloat link = opSmoothUnion(core, reactor, 0.1);\n\tif(link == core){\n\t\tmaterial = 1;\n\t}\n\n\t//Guns\n\tq = vec3(abs(pos.x), pos.y - 0.05, pos.z);\n\t//q = rotateX(q, PI * 0.5);\n\tfloat gun = sdCapsule(q, vec3(0.1,0.0,-0.1), vec3(0.1,0.0,-0.4), 0.01);\n\tlink = opUnion(gun, link);\n\tif(link == gun){\n\t\tmaterial = 1;\n\t}\n\n\n \n\t//Core \n\tq = pos + vec3(0.0,0.,-0.5);\n\tfloat core1 = sdEllipsoid(q, vec3(0.2,0.15,0.8));\n\tlink = opSmoothUnion(core1, link, 0.05);\n\tif(link == core1){\n\t\tmaterial = 1;\n\t}\n\n    //Cockpit\n\tq = pos + vec3(0.0,-0.1,-0.3);\n\tfloat cockpit = sdEllipsoid(q, vec3(0.1,0.1,0.2));\n\tlink = opUnion(cockpit, link);\n\tif(link == cockpit){\n\t\tmaterial = 3;\n\t}\n\n\t\n\n    return link;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, out int mat) {\n\tfloat dO=0.;\n    float dM=MAX_DIST;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = map(p,mat);\n        if(dS<dM) dM = dS;\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return vec2(dO, dM);\n}\n\nvec3 GetNormal(vec3 p) {\n    int mat = 0;\n\tfloat d = map(p,mat);\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        map(p-e.xyy,mat),\n        map(p-e.yxy,mat),\n        map(p-e.yyx,mat));\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, in float time )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    int mat= 0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos+h*nor,mat );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float tmin, float tmax, const float k )\n{\n\tint mat = 0;\n\tfloat res = 1.0;\n    float t = tmin;\n    for( int i=0; i<50; i++ )\n    {\n\t\tfloat h = map( ro + rd*t , mat);\n        res = min( res, k*h/t );\n        t += clamp( h, 0.02, 0.20 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime*.1;\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, -1)*2.;\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    ro.y = max(ro.y, -.9);\n    \n    for(int x=0; x<AA; x++) {\n        for(int y=0; y<AA; y++) {\n            vec2 offs = vec2(x, y)/float(AA) -.5;\n\n            vec2 uv = (fragCoord+offs-.5*iResolution.xy)/iResolution.y;\n            vec3 rd = R(uv, ro, vec3(0,0,0), 1.);\n\n            int mat = 0;\n            float dist = RayMarch(ro, rd, mat).x;\n            \n            \n            vec3 p = ro + rd * dist;\n            vec3 f0;\n            switch(mat){\n                case 1:\n                    vec3 te = 0.5 * texture(iChannel0, p.xy).xyz\n                            + 0.5 * texture(iChannel0, p.xz).xyz;\n                    te = 0.7 * te;\n                    col *= te;\n                    f0 = te;\n                    break;\n                case 3:\n                    col *= vec3(0.1,0.1,0.1);\n                    f0 = vec3(0.1,0.1,0.1);\n                    break;\n                default:\n                    col *= vec3(1.,1.,1.);\n                    break;\n            }\n\n            if(dist<MAX_DIST) {\n                vec3 lightPos = vec3(0.,10.,4.);\n                vec3 l = normalize(lightPos-p);\n                vec3 n = GetNormal(p);\n                \n                float occ = calcAO(p, n, iTime);\n                //Top Light\n                {\n                    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n                    vec3 ref = reflect(rd, n);\n                    vec3 spe = vec3(1.0) * smoothstep(0.4,0.6,ref.y);\n                    \n                    float fre = clamp(1.0+dot(rd, n), 0., 1.);\n                    spe *= f0; + (1.-f0) * pow(fre,5.0);\n                    spe *= 6.0;\n                    float shadow = calcSoftshadow(p, lightPos, 0.001, 1.0, 16.0 );\n\n                    dif *= shadow;\n                    col += 0.6*vec3(0.7,0.8,1.1)*dif*occ;\n                    col += vec3(0.7,0.8,1.1)*spe*dif;  \n                }\n            \n                //Side Light\n                {\n                    vec3 lightPos = normalize(vec3(1.7,0.2,-0.4));\n                    float dif = clamp(dot(n, lightPos), 0., 1.);\n                    float shadow = calcSoftshadow(p, lightPos, 0.001, 1.0, 16.0 );\n\n                    vec3 hal = normalize(lightPos-rd);\n                    vec3 spe = vec3(1.) * pow(clamp(dot(hal, n), 0., 1.),32.0);\n                    spe *= f0 + (1.-f0) * pow(1.-+clamp(dot(hal, lightPos), 0., 1.),5.0);\n\n                    col += vec3(1.0,0.6,0.3)*dif*f0*occ;\n                    col += 6.0*vec3(1.0,0.6,0.3)*spe*shadow;\n                }\n                \n                //Bottom light\n                {\n                    float dif = clamp(0.5 -0.5 * n.y,0.0 ,1.);\n                    col += dif*f0*occ;\n                }\n                //Reactor Light\n                {\n                    vec3 lightPos = normalize(vec3(abs(p.x) - 0.5,0.0, lenReactor));\n                    float dif = clamp(dot(n, lightPos), 0., 1.);\n                    \n                    float shadow = calcSoftshadow(p, lightPos, 0.001, 0.5, 8.0 );\n                    \n                    col += (0.7 + 0.3 * sin(iTime))*vec3(1.0,1.0,2.) * dif * shadow;\n                    \n                }\n            }\n            \n            \n            \n        }\n    }\n    \n    col /= float(AA*AA);\n    \n    col = clamp(col,0.0,1.0);\n    col = col*col*(3.0-2.0*col);\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}