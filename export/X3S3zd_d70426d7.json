{"ver":"0.1","info":{"id":"X3S3zd","date":"1708712106","viewed":132,"name":"terrain Idk what I'm doin","username":"amusement","description":"seriously though","likes":4,"published":1,"flags":0,"usePreview":1,"tags":["terrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy GLSL code with 3D terrain map using channel0 and coloring terrain using channel0 colors\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera setup\n    vec3 cameraPos = vec3(1.0,2.5, 2.0);\n    vec3 cameraTarget = vec3(0.0, 0.0, 0.0);\n    vec3 cameraUp = vec3(0.0, 1.0, 0.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraPos);\n    vec3 cameraRight = normalize(cross(cameraUp, cameraDir));\n    vec3 cameraForward = normalize(cross(cameraDir, cameraRight));\n    \n    // Ray direction\n    vec3 rayDir = normalize(cameraDir + uv.x * cameraRight + uv.y * cameraForward);\n    \n    // Raymarching\n    float depth = 0.3;\n    for(int i = 1; i < 100; i++) {\n        vec3 pos = cameraPos + depth * rayDir;\n        float heightMapValue = texture(iChannel0, pos.xz * 0.04).r; // Sample height from channel0 texture\n        if (pos.y < heightMapValue) {\n            // Hit the terrain, use heightMapValue to color terrain based on channel0 colors\n            vec3 color = texture(iChannel0, pos.xz * 0.1).rgb; // Use texture color directly\n            \n            // Calculate normal for basic lighting\n            vec3 normal = normalize(vec3(texture(iChannel0, (pos.xz + vec2(0.001, 0.0)) * 0.1).r - heightMapValue,\n                                         1.02,\n                                         texture(iChannel0, (pos.xz + vec2(1.0, 0.01)) * 0.1).r - heightMapValue));\n                                         \n            // Simple lighting\n            vec3 lightDir = normalize(vec3(1.0, 1.0, 1.0));\n            float diff = max(dot(normal, lightDir), 0.0);\n            vec3 col = color * diff + 0.2 * color; // Combine texture color with simple diffuse lighting\n            \n            fragColor = vec4(col, 1.0);\n            return;\n        }\n        depth += 0.04; // Increment depth\n    }\n    \n    // Sky background\n    fragColor = vec4(mix(vec3(0.5, 0.7, 1.0), vec3(0.1, 0.1, 0.1), uv.y + 0.5), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}