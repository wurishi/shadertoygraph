{"ver":"0.1","info":{"id":"ttByDK","date":"1595382905","viewed":90,"name":"v0TriLattice4.glsl","username":"jorge2017a1","description":"///source code of ShaderSketches","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["v0trilattice4glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"///source code of ShaderSketches\n\nconst float PI = 3.14159265359;\n\nfloat rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec2 uv2tri(vec2 uv)\n{\n    float sx = uv.x - uv.y / 2.0; // skewed x\n    float sxf = fract(sx);\n    float offs = step(fract(1.0 - uv.y), sxf);\n    return vec2(floor(sx) * 2.0 + sxf + offs, uv.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float s = sin(iTime * 1.2);\n\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / iResolution.y;\n    uv.x += uv.y * s * 0.1;\n    vec2 p = uv2tri(uv * (8.0 + s));\n\n    float r1 = rand(floor(p) * 0.011 + 0.345) * PI * 2.0;\n    float r2 = rand(floor(p) * 0.007 + 0.789) * PI * 2.0;\n\n    p.x += p.y / 2.0; // unskew\n\n    vec2 dir = vec2(cos(r1), sin(r1));\n    float t = dot(p, dir) + r2 + iTime * 2.94;\n\n    float cr = sin(t * 1.000) * 0.4 + 0.61;\n    float cg = sin(t * 0.782) * 0.2 + 0.22;\n    float cb = sin(t * 0.751) * 0.3 + 0.32;\n\n    fragColor = vec4(cr, cg, cb, 1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}