{"ver":"0.1","info":{"id":"lcSfzy","date":"1725091245","viewed":13,"name":"Grid Transition","username":"Muhammad","description":"this can be used in unity based on the camera distance and generate new grid with the old one fading out and continously","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    // Ray direction example vector, which is not necessary here\n    \n    // Scale UV coordinates to create patterns\n    float uvy = uv.y * 10.0;\n    float uvx = uv.x * 10.0;\n    \n    // Create the first pattern using step and fract\n    float d = step(fract(uvy), 0.1);\n    d += step(fract(uvx),0.1);\n    // Calculate the second pattern, slightly offset\n    float newPattern = step(fract(uvy - 0.5), 0.1);\n    newPattern += step(fract(uvx - 0.5), 0.1);\n    \n    // Normalize mouse X position between 0 and 1 based on screen width\n    float mouseFactor = clamp(iMouse.x / iResolution.x, 0.0, 1.0);\n\n    // Mix the original and new pattern based on the mouse position\n    float mixture = mix(d, newPattern, abs(sin(iTime)));\n    \n    // Output the mixed pattern to the screen\n    fragColor = vec4(vec3(mixture), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}