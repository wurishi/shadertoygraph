{"ver":"0.1","info":{"id":"7t3XRX","date":"1639474943","viewed":235,"name":"sdf gradient thingy","username":"JuanDeager","description":"It's a shader that uh (I just copied an SDF marching shader and combined it with a simplex noise function to create a simple demonstration)\n\nforked from here: https://www.shadertoy.com/view/ltjfWD","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////////////////////////////////\n// Constants\n\nconst int kMaxSteps = 1000;\nconst float kMaxDepth = 1000.0;\nconst float kTolerance = 0.01;\nconst float kPi = 3.1415926535897932384626433832795;\nconst float kFov = 90.0;\nconst float kTanFov = tan(kFov / 360.0 * kPi);\n\nconst vec3 kCameraOrigin = vec3(0.0, 0.0, 10.0);\nconst vec3 kDirectionalLight = normalize(vec3(-0.6, -0.4, -0.6));\nconst vec3 kSkyboxColor = vec3(0.0);\nconst vec3 kDiffuseColor = vec3(0.4, 0.05, 0.05);\nconst vec3 kSpecularColor = vec3(0.6, 0.5, 0.5);\nconst float kSpecularExponent = 8.0;\nconst float kAmbientCoefficient = 0.2;\n\n////////////////////////////////////////////////////////////////////////////////\n// Forward declarations\n\nfloat sceneSDF(vec3 point);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord);\nfloat march(vec3 origin, vec3 direction);\nvec3 normal(vec3 point);\nvec4 color(vec3 point, vec3 direction);\n\nfloat sdSphere(vec3 p, float s);\nfloat udBox(vec3 p, vec3 b);\nfloat udRoundBox(vec3 p, vec3 b, float r);\n\nvec3 opRotation(vec3 point, float angle);\n\n////////////////////////////////////////////////////////////////////////////////\n// Scene\n\n\n\n\n\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst float PHI = 1.618;\nconst float PI = 3.1415;\nfloat sceneSDF(vec3 p) {\n    return snoise(p) + .4;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Functions\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    // Calculate ray direction from fragment coordinates\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.0) / iResolution.x;\n    vec3 direction = normalize(vec3(uv, -0.5 / kTanFov));\n    \n    // Set camera origin\n    vec3 origin = kCameraOrigin;\n    \n    // Calculate scene depth\n    float depth = march(origin, direction);\n    \n    // Render color\n    if (depth < kMaxDepth) {\n        vec3 normal = normal(origin + depth * direction);\n        \n        fragColor = color(normal, direction);\n    }\n    else {\n        fragColor = vec4(kSkyboxColor, 1.0);\n    }\n}\n\nfloat march(vec3 origin, vec3 direction) {\n    float depth = 0.0;\n    \n    for (int n = 0; n < kMaxSteps; n++) {\n        \n        // Get distance to nearest object\n        float distance = sceneSDF(origin + depth * direction);\n        \n        // Return when distance is within tolerance\n        if (distance <= kTolerance) {\n            return depth;\n        }\n        \n        // Increment ray\n        depth += distance;\n        \n        // Return if depth exceeds max depth\n        if (depth > kMaxDepth) {\n            return kMaxDepth;\n        }\n    }\n    \n    // Return max depth after too many steps\n    return kMaxDepth;\n}\n\nvec3 normal(vec3 point) {\n    \n    // Measure the change-in-distance along each axis\n    vec3 deltaX = vec3(kTolerance, 0.0, 0.0);\n    vec3 deltaY = vec3(0.0, kTolerance, 0.0);\n    vec3 deltaZ = vec3(0.0, 0.0, kTolerance);\n    \n    float x = sceneSDF(point + deltaX) - sceneSDF(point - deltaX);\n    float y = sceneSDF(point + deltaY) - sceneSDF(point - deltaY);\n    float z = sceneSDF(point + deltaZ) - sceneSDF(point - deltaZ);\n    \n    // Return vector where SDF gradient is maximized\n    return normalize(vec3(x, y, z));\n}\n\nvec4 color(vec3 normal, vec3 direction) {\n    \n    // Calculate lighting\n    vec3 halfway = -normalize(direction + kDirectionalLight);\n    float specularBase = max(0.0, dot(normal, halfway));\n    \n    vec3 diffuse = kDiffuseColor * max(0.0, dot(normal, -kDirectionalLight));\n    vec3 specular = kSpecularColor * pow(specularBase, kSpecularExponent);\n    vec3 ambient = kAmbientCoefficient * kDiffuseColor;\n    \n    // Combine components\n    return vec4(normal * .5 + .5, 1.0);\n    //return vec4(diffuse + specular + ambient, 1.0);\n}","name":"Image","description":"","type":"image"}]}