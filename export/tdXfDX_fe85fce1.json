{"ver":"0.1","info":{"id":"tdXfDX","date":"1589164710","viewed":54,"name":"CMPM163-Lab 6","username":"swpark","description":"sphere script using shadertoy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Finds the distance between point p and line rd from origin ro\nfloat DistLine(vec3 ro, vec3 rd, vec3 p){\n \treturn length(cross(p-ro, rd))/length(rd);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy; \n    \n    //Setting the origin to the center of the screen\n    uv -=.5; \n    \n    //Aspect Ratio\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    //Ray origin for camera position\n    vec3 ro = vec3(0., 0., -2.);\n    \n    //Ray direction, distance from origin\n    vec3 rd = vec3(uv.x, uv.y, 0.)-ro;\n    \n    //Use time for animation\n    float t = iTime;\n    \n    //Place point p in the center of the screen\n    //Use time for position to create animation\n    //Use cos and sin to create a circle animation\n    vec3 p = vec3(sin(t), 0., 1. + cos(t)); \n    \n    //Call the DistLine function to return the distance from point p to the line formed by rd\n    float d = DistLine(ro, rd, p);\n    \n    d = smoothstep(.1, .09, d);\n    \n    //Isolates the the texture to only show on the coordinates of the moving sphere\n    vec4 sampledColor = texture(iChannel0, uv *d/1.5);\n\t//fragColor = vec4(sampledColor.rgb, 1.0);\n    fragColor = vec4(sampledColor);\n} ","name":"Image","description":"","type":"image"}]}