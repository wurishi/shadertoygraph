{"ver":"0.1","info":{"id":"XdVSzm","date":"1463550481","viewed":432,"name":"Space Harrier","username":"JasonD","description":"Space Harrier infinite tiles.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["space","infinite","tiles","sega","arcade","harrier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Jason Allen Doucette\n// http://xona.com/jason/\n//\n// Space Harrier\n// May 17, 2016\n\n// ---- SETTINGS ----------------------------------------------------------------\n\n#define X_SCALE 0.25\n#define Z_SCALE 0.15\n\n#define SPEED_Z 2.0\n#define SPEED_X 0.5\n#define X_MAGNITUDE 0.5\n\n// http://xona.com/colorlist/\n#define FADE_COLOR_NEAR vec3(0.2, 1.0, 0.5)\n#define FADE_COLOR_FAR vec3(0.2, 0.3, 0.4)\n#define FADE_POWER 0.05\n\n\n// ---- CODE ----------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // isotropic scaling, ensuring entire texture fits into the view.\n    // After this, you should consider fragCoord = 0..1, usually,\n    // aside from overflow for wide-screen.\n    float minRes = min(iResolution.x, iResolution.y);\n    fragCoord /= minRes;\n   \n    // center point on screen\n    vec2 center = (iResolution.xy / minRes) / 2.0;\n    \n    // distance from center\n    vec2 dCenter = center - fragCoord.xy;\n    \n    // height of screen\n    float height = (iResolution.y / minRes) / 2.0;\n    \n    if (dCenter.y > 0.0)\n    {\n        // 3D perspective: 1/Z = constant\n        float zCamera = 1.0 / dCenter.y;\n        float xCamera = X_SCALE * dCenter.x * zCamera;\n        float yCamera = Z_SCALE * zCamera;\n\n        // static texture coordinates\n        fragCoord.xy = vec2(xCamera, yCamera);\n\n        // move\n        fragCoord.y += iTime * SPEED_Z;\n        fragCoord.x += cos(iTime * SPEED_X) * X_MAGNITUDE;\n\n        // textured\n        fragColor = texture(iChannel0, fragCoord);\n\n        // fade into distance\n        // need formula that changes z distance = 0..infinity, into a fade = 0..1\n        // y=1/x, from x=1..infinity, y=1..0, thus:\n        // y=1-(1/x), from x=1..infinity, gets y=0..1\n\n        // 0=no fade, 1=full fade\n        float fade = 1.0 - (1.0 / (1.0 + zCamera * FADE_POWER));\n        \n        // we'll use FADE for 2 things:\n        // 1. the color to fade to (0 = near, 1 = far)\n        vec3 fadeColor = mix(FADE_COLOR_NEAR.rgb, FADE_COLOR_FAR.rgb, fade);\n        \n        // 2. the amount we'll fade (0 = little, 1 = all)\n        // skew so that it's 0.5..1.0\n        fade = 0.5 + (fade / 2.0);\n        fragColor.rgb = mix( fragColor.rgb, fadeColor.rgb, fade );\n    }        \n    else \n    {\n        // sky fade\n        float fade = 1.0 + (dCenter.y / height);\n        fragColor.rgb = vec3(fade, fade, 1.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}