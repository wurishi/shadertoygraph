{"ver":"0.1","info":{"id":"WdfXW4","date":"1551295381","viewed":495,"name":"dft and discrete frequency space","username":"public_int_i","description":"trying to get a better understanding of dft and the discrete frequency domain, displays reconstruction from inverse fft or click to display frequencies","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["domain","inverse","frequency","fourier","transform","dft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 o, in vec2 u)\n{\n    //center and scale fixed resolution\n    vec2 cu = RES/R.xy;\n    if (cu.x < cu.y) cu = vec2(u.x-iResolution.x*.3*((R.x/R.y)-(RES.x/RES.y)),u.y)*cu.y;\n    else cu = vec2(u.x,u.y-iResolution.y*((RES.x/RES.y)/(R.x/R.y)-1.)*.5)*cu.x;\n    if (min(cu.x,cu.y) < 0. || cu.x > RES.x || cu.y > RES.y) {\n        o = vec4(0);\n        return;\n    }\n        \n    STATE;\n    if (iMouse.w > 0.) {\n        //display frequency amplitudes from fourier transform\n    \tif (fstate == 1) o = vec4(log(1.+length(texelFetch(iChannel0,ivec2(mod(cu+RES*.5,RES)),0).xy))*.1);\n        else discard;\n    } else {\n        //display reconstructed image from inverse fourier transform\n        if (fstate == 3) o = vec4(texelFetch(iChannel0,ivec2(cu),0).xxxx);\n        else discard;\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*Buf A - Multi-pass fast fourier transform does horizontal then vertical passes then inverse.\nOutputs:\nxy - Complex number c where length(c) is frequency amplitude and atan(c.y,c.x) is phase\n*/\n\n//complex number operations\nvec2 cmul(vec2 a, vec2 b) {\n    return b*mat2(a,-a.y,a.x);\n}\nvec2 cexp(vec2 a) {\n    return exp(a.x)*vec2(cos(a.y),sin(a.y));\n}\n\nvoid mainImage(out vec4 o, in vec2 u)\n{\n    if (u.x > RES.x || u.y > RES.y) return;\n    \n    STATE;\n    //initialize with image\n    if (fstate == -1) {\n        o = vec4(length(texelFetch(iChannel3,ivec2(u),0).xyz)/length(vec3(1)),0,0,0);\n    \treturn;\n    }\n    \n    //fourier transform, based on FabriceNeyret2's code https://www.shadertoy.com/view/4dGGz1\n    float ar = RES[axis], st = 0., ss = (float(dir)*2.-1.)*2.*PI*floor(u[axis])/ar;\n    int iar = int(ar);\n    ivec2 p = ivec2(u);\n    p[axis] = 0;\n    vec2 v = vec2(0);\n    for (int i = 0; i < iar; i++) {\n        v += cmul(texelFetch(iChannel0,p,0).xy,\n                  cexp(vec2(0,st)));\n    \tst += ss;\n        p[axis]++;\n    }\n    \n    //apply some operations in frequency space\n    if (fstate == 1) {\n        vec2 cu = abs(u/RES-0.5);\n        \n        //focus high frequency, sharpens details\n        //v *= 10.*clamp(1.-pow(length(cu),2.)*2.,0.,1.);\n    \t\n        //focus low frequency, creates a blur\n        //v *= 20.*clamp(length(cu)-0.67,0.,1.);\n        \n        //focus low frequencies on axes, for a lens flare like effect\n        v *= 20.*clamp((max(cu.x,cu.y)-0.45),0.,1.);\n    }\n        \n    if (dir == 1) v /= RES[axis];\n    o = vec4(v,0,0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define PI 3.14159265358979\n#define R iResolution\n\n//fixed input texture resolution\n#define RES vec2(512,256)\n\n//fourier transform state, axis 0 = x axis, axis 1 = y axis, dir 0 = fft, dir 1 = ifft\n#define STATE int fstate = iFrame%5-1, axis = fstate%2, dir = fstate/2","name":"Common","description":"","type":"common"}]}