{"ver":"0.1","info":{"id":"NsVBRc","date":"1658617171","viewed":98,"name":"Raytraced spheres","username":"Cosmin","description":"Ray casting tests","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","raymarching","spheres","lambert"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getIntersection(vec3 origin, vec3 ray, vec4 sphere) {\n    \n    float h = length(sphere.xyz - origin);\n    float a = dot(sphere.xyz - origin, ray);\n    float sq_o = (h*h - a*a);\n    \n    \n    float sq_d = sphere.w * sphere.w - sq_o;\n    \n    if (sq_d > 0.) {           \n                \n        float d = sqrt(sq_d);\n        vec3 intersection = origin + (a - d)*ray;\n        \n        return vec4(intersection, 1.0);\n    }\n    else\n    {\n        return vec4(0.);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0, 0, 0, 1);\n    \n    vec3 posOeil = vec3(iResolution.xy/2., 500.0);\n    vec3 posEcran = vec3(fragCoord, 0.0);\n   \n    vec3 ray = normalize(posEcran - posOeil);\n    vec4 spheres[3] ;\n    spheres[0] = vec4(iResolution.xy/2.0, -200., 140.);\n    spheres[1] = vec4(iResolution.xy/2.0 + vec2(-300.0,0.0), -200., 140.);\n    spheres[2] = vec4(iResolution.xy/2.0 + vec2(300.0,0.0), -200., 140.);\n    const int n_lamps = 8 ;\n    vec3 lights[n_lamps];\n    lights[0] = vec3(iMouse.xy, 300.0);\n    lights[1] = vec3(iResolution.x * cos(iTime), 100.+ iResolution.y, 300.0);\n    lights[2] = vec3(iResolution.x/2.0, iResolution.y/2.0, 300.0);\n    lights[3] = vec3(iResolution.x , iResolution.y/4.0 , 400.0);\n    lights[4] = vec3(iResolution.x, iResolution.y, 400.0);\n    lights[5] = vec3(iResolution.x, iResolution.y/2.0, 400.0);\n    lights[6] = vec3(iResolution.x/6.0, iResolution.y, 400.0);\n    lights[7] = vec3(iResolution.x/6.0, iResolution.y/2.0, 400.0);\n    \n    vec3 col = vec3(0.);\n   \n    for (int i = 0 ; i < 3 ; i++ )\n    {\n       \n       vec4 intersection = getIntersection(posOeil, ray, spheres[i]);\n        if (intersection.w >0.) {\n            vec3 normal = normalize(intersection.xyz - spheres[i].xyz);\n            vec3 surface_pos = intersection.xyz;\n            \n            for (int j = 0 ; j < n_lamps ; j++ )\n            {\n                vec3 incidence = lights[j] - surface_pos;\n                float intensite = length(incidence);\n                incidence = normalize(incidence);\n                intensite = 50000. / (intensite*intensite);\n                col = dot(incidence, normal) * vec3(0.3+sin(float(j)),0.3+cos(float(j)),0.6) * intensite;\n                fragColor += vec4(col + vec3(0.015*float(i),0.003*float(i),0.005*float(i)), 1.0);\n              }\n            \n      }\n       \n   }\n}\n\n\n","name":"Image","description":"","type":"image"}]}