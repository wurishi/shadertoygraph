{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float divs = 12.0;\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 div = vec2( divs, divs*iResolution.y/iResolution.x );\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= 0.5;\t\t\t\t\t\t\t\t\t// center on screen\n//  float b = 4.0*divs/iResolution.x;\t\t\t// blur over 2.4 pixels\n    vec2 xy = div*uv;\n    \n    vec2 S;\n\tS.x = (xy.x + xy.y)*(xy.x - xy.y)*0.5;\t\t// \"velocity potential\"\n    S.y = xy.x*xy.y;\t\t\t\t\t\t\t// stream function\n\tS.x += iTime*3.0;\t\t\t\t\t\t// animate stream\n//  S.x += 0.75;\n    \n    vec2 sxy = abs( sin(3.14159265*S) );\n    float a = sxy.x * sxy.y;\t\t\t\t\t// combine sine waves using product\n    \n    float b = length(fwidth(sxy))*0.7071;\t\t// jacobian\n\ta = smoothstep( 0.8-b, 0.8+b, a );\t\t\t// threshold\n    \n    float c = sqrt( a );\t\t\t\t\t\t// correct for gamma\n\tfragColor = vec4(c, c, c, 1.0);\n//\tfragColor = vec4(c, sxy.x, sxy.y, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtlGz8","date":"1418710406","viewed":489,"name":"Flow Dots","username":"KazimirO","description":"potential flow visualized as dots","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["flow","dots","potential"],"hasliked":0,"parentid":"","parentname":""}}