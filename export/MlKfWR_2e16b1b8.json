{"ver":"0.1","info":{"id":"MlKfWR","date":"1542260352","viewed":829,"name":"ripple dip","username":"couch","description":"this started out as an attempt to make some kind noise/diffusion/melty effect, came out as something interesting enough","likes":16,"published":1,"flags":38,"usePreview":0,"tags":["reactive","diffusion","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 c = texture(iChannel0, uv).xyz;\n    \n    // Output to screen\n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    vec2 uvs = fragCoord.xy/iResolution.xy;\n    \n    //WAVE THICKNESS\n    float a = 4.0;//(sin(iTime/4.0)+1.0)*6.0+2.0;\n    //WAVE RESOLUTION\n    float turns = 10.0;//(sin(iTime/2.0)+1.0)*3.0+4.0;\n    //NATURAL WAVE FLOW\n    bool mode = true;\n    //RADIATE AROUND MOUSE CLICK (if mode == false)\n    bool mouse = false;\n    //IMAGE BRIGHTNESS (1-10)\n   \tfloat imageb = 10.0;\n    //WAVE BRIGHTNESS (1-10)\n    float waveb = 10.0;\n    //WAVE DECAY (1-10)\n    float waved = 10.1;\n    \n    //AUDIO\n    bool sounds = true;\n    float mic = texture(iChannel2, uvs * .5).r;\n    \n    if (sounds){\n        a += mic*40.0;\n        turns /= 1.0+mic;\n    }\n    \n    //WAVE intensity? (??-??)\n    float wavei = 1.0;\n    \n    float rr;\n    float gg; \n    float bb; \n    \n    float xx;\n    float yy;\n    \n    vec3 cols;\n    vec3 colo0;\n    vec3 colo1;\n    \n    float dir;\n    \n    if (mouse == false){\n    \tdir = atan(fragCoord.y - iResolution.y/2.0, fragCoord.x - iResolution.x/2.0);\n    }else{\n        dir = atan(fragCoord.y - iMouse.y, fragCoord.x - iMouse.x);\n    }\n    \n    \n    //compare pixels at distance 'a' from current pixel in 'turns' directions to decide which direction has the most contrast\n\n    float wave = 3.14/turns;//(sin(iTime/3.0)+1.0)*1.5+1.0;\n    //WAVE DIRECTION\n    float offset = 0.0;//wave-dir/3.0;\n    \n    for (float i = 0.0 + offset; i < 1.0 + offset; i += 2.0/turns){\n        \n        xx = sin(i*3.14)*a;\n        yy = cos(i*3.14)*a;\n        \n        colo0 = texture(iChannel0, vec2(uvs.x + xx/iResolution.x, uvs.y + yy/iResolution.y)).rgb;\n        colo1 = texture(iChannel0, vec2(uvs.x - xx/iResolution.x, uvs.y - yy/iResolution.y)).rgb;\n        \n        if (colo0.r - colo1.r > rr){\n        \t   rr = colo0.r - colo1.r/wavei;\n        }else{\n            if (colo1.r - colo0.r > rr && mode == true){\n        \t\trr = colo1.r - colo0.r/wavei;\n        \t}\n        }\n        \n        if (colo0.g - colo1.g > gg){\n        \t   gg = colo0.g - colo1.g/wavei;\n        }else{\n            if (colo1.g - colo0.g > gg && mode == true){\n        \t\tgg = colo1.g - colo0.g/wavei;\n        \t}\n        }\n        \n        if (colo0.b - colo1.b > bb){\n        \t   bb = colo0.b - colo1.b/wavei;\n        }else{\n            if (colo1.b - colo0.b > bb && mode == true){\n        \t\tbb = colo1.b - colo0.b/wavei;\n        \t}\n        }\n    }\n    \n    cols += vec3(rr, gg, bb)/(10.0/waved);\n\n    cols += texture(iChannel1, uvs).rgb/(10.0/imageb)/1.0;\n    \n    fragColor = vec4(cols, 1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}