{"ver":"0.1","info":{"id":"Dl2yDc","date":"1692385530","viewed":179,"name":"invmin/invmax for free - cubemap","username":"FabriceNeyret2","description":"find the location of the min or max in the image for free, using GeneralPurpose MIPmaps.\nCubeMap variant of https://shadertoy.com/view/dlSyDc : robust MIPmap calculation, but half precision only.\nMouse.y: control LOD, i.e. the number tracking area.","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["minmax","gpmipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CubeMap variant of https://shadertoy.com/view/dlSyDc\n// inspired from https://shadertoy.com/view/3sKGWy\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    float LOD = 9.;                                    // less for local extremas\n    if (iMouse.z>0.) LOD = floor(10.*iMouse.y/R.y);\n\n    O = texture(iChannel0, U/R).xxxw;                   // source image + resol\n    float l = min(10., floor(LOD+log2(1024./O.w)) ),    // select lod\n          L = exp2(l);\n    vec2 V = ( floor(U/R*1024./L)*L+L/2.+.5)/1024.;     // emulates texelFetch(LOD)\n // vec2 V =   floor(U/R*1024./L)*L         /1024.;                \n    vec4 M = C(V,0,l);                                  // fetch partial sum  \n // vec4 M = C(vec2(.5),0,10);                          // fetch partial sum\n // O += M.xyww/1024.; return;                          // ( for debug )\n // O.g += M.w; return;                                 // ( for debug )\n    M /= M.z;                                           // normalize position with weight : should show ~invmin\n    M.xy *= R;                                          // â†’ window coordinates.\n\n    O = mix(O, vec4(1,0,0,0), smoothstep( 2.5, 1., length(M.xy-U)-LOD )); // plot the position\n\n    O = pow( O, vec4(1./2.2) );                         // back to sRGB\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// === source image ================================\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    O.x = pow( length( texture(iChannel0, U/R).rb ) , 4. ); \n // O.x = pow( length( texture(iChannel0, U/R).rb ) / 1.3, 2.2. );// luminance\n    O.w = iChannelResolution[0].y;                                // source resolution\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define POW 9.  // the larger the better min/max, but more bigfloats precision issues\n\n#define R  iResolution.xy\n\n// CubeMap utils from  https://www.shadertoy.com/view/3tGBDz\nvec3 E;\n#define C(U,n,l) ( E =   vec3( 2.*fract(U) -1., 1 )                                             \\\n                       * vec3( n==0||n==5 ?-1:1 , n!=1 ?-1:1 , n>2 ?-1:1 ),                     \\\n                   E = (n)%3 != 2 ? E.yzx : E.xzy,                                              \\\n                   textureLod( iChannel1, vec3( E[(n+1)%3], E[(n)%3], E[(n+2)%3] ) , float(l) ) \\\n                 )","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"// === prepare (inv)min/max calculation ========================\n\nvoid mainCubemap( out vec4 O, vec2 U, vec3 o, vec3 D )\n{\n    vec3 A = abs(D);\n    int n = A.x > A.y ? A.x > A.z ? 0 : 2 : A.y > A.z ? 1 : 2; // faceID\n    if (D[n]<0.) n += 3;\n    \n    O *= 0.;\n    if (n>0) return;                                     // we only use Face 0                                  \n\n    U /= 1024.;                                          // normalized coordinate\n    \n // float w = pow( texture(iChannel0, U).x, -POW ) ;     // this approximates MIN. then apply pow(LODmax, -1/POW)\n    float w = pow( texture(iChannel0, U).x,  POW ) ;     // this approximates MAX. then apply pow(LODmax,  1/POW)\n \n    O.xy = U*w;                                          // weighted location\n    O.z  = w;                                            // weight\n // O.w =  texture(iChannel0, U).x;                      // ( for debug )\n}\n\n","name":"Cube A","description":"","type":"cubemap"}]}