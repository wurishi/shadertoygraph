{"ver":"0.1","info":{"id":"DldSWM","date":"1685811750","viewed":49,"name":"rotating morphing circle","username":"motschel","description":"Playing with shaders, learning the basics and getting started","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi=3.1415926;\n\n/**\n* Applies smooth displacement to the circumference of the circle.\n**/\nfloat variation(vec2 v1, vec2 v2, float strength, float speed) {\n\treturn sin(\n        dot(normalize(v1), normalize(v2)) * strength + iTime * speed\n    ) / 100.;\n}\n\nvec3 palette( in float t )\n{\n    vec3 a = vec3(-0.132, 0.288, 0.238);\n    vec3 b = vec3(1.382, -0.614, 0.529);\n    vec3 c = vec3(-0.743, -2.383, -1.283);\n    vec3 d = vec3(1.597, -0.413, 2.137);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat angleBetween(vec2 a, vec2 b) {\n    float cosineTheta = dot(a, b) / (length(a) * length(b));\n    float angle = acos(clamp(cosineTheta, -1.0, 1.0)); // Clamp to avoid NaN due to numerical precision issues\n    return sign(b.y*a.x - b.x*a.y) < 0.0 ? 2.0*pi - angle : angle;\n}\n\nfloat sideOfBlob(vec2 uv, int num, float waveScale) \n{\n    vec2 a0 = vec2(sin(iTime), cos(iTime));\n\n    float a = angleBetween(uv, a0);\n    float d = length(uv) * 0.6;\n    d += cos(a * float(num)) * waveScale;\n            \n    d -= 0.5;\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    vec3 col = normalize(palette(length(uv)));\n    \n    float b = sideOfBlob(uv, 5, sinh(cos(iTime)*2.0)*0.1);\n    \n    b = 0.1*sin(iTime) / b;\n\n    col *= b;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}