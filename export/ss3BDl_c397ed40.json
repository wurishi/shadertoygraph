{"ver":"0.1","info":{"id":"ss3BDl","date":"1670793452","viewed":71,"name":"Sound First Test","username":"Sent","description":"Generative sound. God it's so creepy. Listen for like a minute for the real spooks","likes":4,"published":1,"flags":8,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float bars = 25.;\n    float t = 2.*min(mod(iTime*.5, bars), bars-mod(iTime, bars*.5));\n    \n    vec3 col = vec3(1.)*hash(floor(uv.x*bars)*10.);\n    col *= step((floor(t)+1.)/bars, uv.x);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float sinPluck(float f, float t) {\n    return sin(6.2831*f*t)*exp(-3.0*t)*.1;\n}\n\nvec2 pan(float pos) {\n    vec2 e = vec2(1.-pos, 1.+pos);\n    return normalize(e);\n}\n\nvec2 mainSound( int samp, float t )\n{\n    vec2 s = vec2(0.);\n    float bars = 25.;\n    t = 2.*min(mod(t*.5, bars), bars-mod(t, bars*.5));    \n    /*for(int i=1; i < 30; ++i)\n    {\n        s += .1/float(i)*sin(2.*3.1415*110.*(float(i))*mod(t, 1.))* pan(0.);\n    }*/\n    \n    s += sinPluck(440.+110.*(6.*hash(floor(t*1.)*10.)), mod(t, 1.)) * pan(hash(floor(t*1.)*10.));\n    //s += sinPluck(440., mod(t, 1.)) * pan(sin(t));\n    //s += sinPluck(660., mod(t, 1.)) * pan(sin(t+.1));\n    //s += sinPluck(660., mod(t - .25, 1.)) * pan(.5);\n\n    return s;\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"// Precision-adjusted variations of https://www.shadertoy.com/view/4djSRW\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(vec2 x) {\n    vec2 i = floor(x);\n    vec2 f = fract(x);\n\n\t// Four corners in 2D of a tile\n\tfloat a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    // Simple 2D lerp using smoothstep envelope between the values.\n\t// return vec3(mix(mix(a, b, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tmix(c, d, smoothstep(0.0, 1.0, f.x)),\n\t//\t\t\tsmoothstep(0.0, 1.0, f.y)));\n\n\t// Same code, with the clamps in smoothstep and common subexpressions\n\t// optimized away.\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}","name":"Common","description":"","type":"common"}]}