{"ver":"0.1","info":{"id":"ctyyz1","date":"1699924313","viewed":114,"name":"random lozenge tiling","username":"jt","description":"Create a random lozenge tiling (isometric inside-outside cubes) by tiling the plane into hexagons and filling each hexagon randomly with either a cube or a corner (resp. 0 deg or 180 deg rotated lozenges).","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["triangle","cube","random","hexagon","isometric","tiling","out","in","inverted","corner","inside","outside","inout","lozenge","grouped"],"hasliked":0,"parentid":"cdcyRH","parentname":"hexagonally grouped triangles"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ctyyz1 random lozenge tiling, 2023 by jt\n// based on https://www.shadertoy.com/view/cdcyRH hexagonally grouped triangles\n\n// Create a random lozenge tiling (isometric inside-outside cubes)\n// by tiling the plane into hexagons and filling each hexagon randomly\n// with either a cube or a corner (resp. 0 deg or 180 deg rotated lozenges).\n\n// NOTE: It is possible to create a domino tiling from a lozenge tiling\n//       https://www.shadertoy.com/view/mlGczD domino lozenge relation quantize\n//       but that quantize approach is limited to a subset of possible patterns.\n\n// Are there higher dimensional equivalents to the random lozenge tilings\n// (looking like 3d projections of hypercubes rather than 2d projections of cubes)?\n// Perhaps something like a 3d rhombic dodecahedral honeycomb (instead of the 2d hexagonal tiling),\n// dividing the rhombic dodecahedra into 3d parallelepipeds (instead of the hexagons into 2d lozenges)?\n\n// tags: triangle, cube, random, hexagon, isometric, tiling, out, in, inverted, corner, inside, outside, inout, lozenge, grouped\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint triple32(int x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n\nint hash(ivec3 v)\n{\n    return HASH(v.x + HASH(v.y + HASH(v.z + int(floor(iTime)))));\n}\n\nvec3 triangular(vec2 p) // via 3x3 matrix\n{\n/*\n    // full 3x3 matrix\n    mat3 M =\n        mat3\n        (\n            normalize(vec3(-1,-1,+2)),\n            normalize(vec3(+1,-1, 0)),\n            normalize(vec3(-1,-1,-1))\n        );\n    return M*vec3(p,0); // additionally rotate 90 degrees to align hexagonal coordinates with triangular coordinates\n    */\n    // essential 2x3 matrix (to triangular, with additional 90 degree rotation)\n    return mat2x3(normalize(vec3(-1,-1,+2)),normalize(vec3(+1,-1, 0)))*p;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, int b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec3 mod_positive(ivec3 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    return div_floor(i.zxy-i.yzx,3);\n}\n\nvoid mainImage(out vec4 o, in vec2 p)\n{\n    vec2 R = iResolution.xy;\n    p = (2.0 * p - R) / R.y; // unit coordinates (keeping aspect ratio)\n    p *= 4.0*sqrt(6.0); // scale\n    vec3 b = triangular(p); // convert to barycentric coordinates\n    ivec3 t = ivec3(floor(b)); // quantize to triangle indices\n    ivec3 h = hexagonal(t); // group triangles to hexagons\n    o = vec4(equal(mod_positive(t.xyz-t.yzx,3),ivec3(1&hash(h))),1); // color-code lozenges / cube-sides (jt)\n}\n","name":"Image","description":"","type":"image"}]}