{"ver":"0.1","info":{"id":"sdByRm","date":"1708285044","viewed":28,"name":"continuous matrix product","username":"ArmanD","description":"This is a continuous product of matrix : each pixel of the bottom square is computed as the integral of a line from the first times a column from the second. The two first matrix are described by functions f1 and f2 of the coordinates.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["matrixproduct"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define t 1.5*iTime\nfloat f1(float x,float y){\n    vec2 c = vec2(0.5+cos(t)/3.,0.5+sin(t)/3.);\n    vec2 pos = vec2( x,y);\n  return .1/distance(pos,c);\n }\nfloat f2(float x,float y){\n    float v = 0.;\n    vec2 pos = vec2( x,y);\n    if(distance(pos,vec2(0.4,0.4)) <1./5.) v = 1.;\n  return v;//pow(sin(x+t),10.);;//v;;\n}\nfloat product(float x,float y){\n    float n = 100.;\n    float s =0.;\n    for(float i=0.;i<=n;i++){\n        s+=f2(x,i/n)*f1(i/n,y);\n    }\n    return s/n;\n    //integral0to1( f2(x,z)*f1(z,y) )dz\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    float ratio = iResolution.x/iResolution.y;\n    uv-=vec2(0.5*ratio,0.5);\n\n    vec3 col = vec3(0.);\n    vec2 p1 = vec2(-0.4,0.3);\n    vec2 p2 = vec2(0.2,0.3);\n    vec2 p3 = vec2(-0.1,-0.1);\n    \n    vec2 s1 = vec2(0.3,-0.3);\n    vec2 s2 = vec2(0.3,-0.3);\n    vec2 s3 = vec2(0.3,-0.3);\n    float v =0.;\n    if(uv.x>=p1.x && uv.x<=p1.x+s1.x && uv.y<=p1.y && uv.y>=p1.y+s1.y){\n        vec2 ux = (uv-p1)/s1;\n        float x = ux.x,y=ux.y;\n        v = f1(x,y);\n        col = vec3(v,0.,1.);\n    }\n    if(uv.x>=p2.x && uv.x<=p2.x+s2.x && uv.y<=p2.y && uv.y>=p2.y+s2.y){\n        vec2 ux = (uv-p2)/s2;\n        float x = ux.x,y=ux.y;\n        v = f2(x,y);\n        col = vec3(v,0.,1.);\n    }\n    if(uv.x>=p3.x && uv.x<=p3.x+s3.x && uv.y<=p3.y && uv.y>=p3.y+s3.y){\n        vec2 ux = (uv-p3)/s3;\n        float x = ux.x,y=ux.y;\n        v = product(x,y);\n        col = vec3(v,0.,1.);\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}