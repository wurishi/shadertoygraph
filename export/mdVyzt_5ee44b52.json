{"ver":"0.1","info":{"id":"mdVyzt","date":"1696539671","viewed":60,"name":"05. Map","username":"Ladus","description":"Inktober 2023 Day 5.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["map","inktober"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//By Inigo Quilez - https://iquilezles.org/articles/distfunctions2d/\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q )\n{\n    p.x = abs(p.x);\n    vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n    vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n    float s = -sign( q.y );\n    vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                  vec2( dot(b,b), s*(p.y-q.y)  ));\n    return -sqrt(d.x)*sign(d.y);\n}\n\n//By zheck - https://www.shadertoy.com/view/3lVGWt\nconst float PI = 3.14;\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, -s, s, c );\n}\n\nvec2 normalizeScreenSpace(vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x -= 1.-(iResolution.y/iResolution.x);\n    return uv;\n}\n\nfloat lineOnDf(float df, float thickness) {\n    return smoothstep(0.01,0.01+thickness, df) * smoothstep(0.01+thickness,0.01, df);\n}\n\nfloat radarBackground(float radardf, float radarRadialDf, float lineThickness) {\n    float radarMask = 0.;\n    for(float x = 0.; x < 1.0; x += 0.15) {\n        // round lines\n        radarMask += lineOnDf(radardf-x, lineThickness); \n        // lines from center\n        radarMask += lineOnDf(radarRadialDf-x, lineThickness) * step(0.01,radardf) * (1.-step(0.76,radardf)); \n    }\n    // outside gradient\n    radarMask += (smoothstep(0.5, 1.,1.-radardf) * 0.1) * smoothstep(0.99,.98,1.-radardf);\n    return radarMask;\n}\n\nfloat getScanLine(float lineLocation, float lineThickness, float iradardf, float trail) {\n    return 1.-max(smoothstep(lineLocation,lineLocation+lineThickness,iradardf*0.7), 1.-smoothstep(lineLocation-lineThickness-trail,lineLocation,iradardf*0.7));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float lineThickness = 0.005;\n    vec3 backgroundColor = vec3(0.,0.047,0.102);\n    vec3 lineColor = vec3(0.2,0.6,0.95);\n    vec3 enemyColor = vec3(0.95,0.05,0.2)*2.;\n\n    vec2 nss = normalizeScreenSpace(fragCoord);\n    float loopingTime = fract(iTime / 5.0);\n    \n    // Radar\n    vec2 radarConeSpace = nss + vec2(0,-0.1);\n    float radardf = clamp(0.0,1.,1.-distance(vec2(0.45,0), radarConeSpace)*1.2);\n    float iradardf = 1.-radardf;\n    float radarRadialDf = atan(radarConeSpace.y, radarConeSpace.x-0.45)/4.;\n    \n    // Draw radar lines\n    float radarAlpha = radarBackground(radardf, radarRadialDf, lineThickness);\n    \n    // Animated scanline\n    float lineLocation = loopingTime;\n    radarAlpha += getScanLine(lineLocation, lineThickness, iradardf, 0.2);\n    \n    // Add ship triangle\n    vec2 triangleSpace = radarConeSpace+(vec2(-0.45,-0.049));\n    triangleSpace *= rotationMatrix(180.);\n    float triangle = smoothstep(0.+lineThickness/2.,0.-lineThickness/2.,sdTriangleIsosceles(triangleSpace, vec2(0.024, .09)));\n    \n    radarAlpha += triangle;\n    \n    // don't show anything outside of the radar\n    float radarMask = smoothstep(0.01, 0.01+lineThickness,radardf);\n   \n   \n    vec2 enemySpace = radarConeSpace+(vec2(-0.1,-0.349));\n    enemySpace *= rotationMatrix(290.);\n    enemySpace += vec2(0.0,-0.5+loopingTime*1.4);\n    float enemyAlpha = smoothstep(0.+lineThickness/2.,0.-lineThickness/2.,sdTriangleIsosceles(enemySpace, vec2(0.024, .09)));\n    \n    float enemyScanLine = getScanLine(lineLocation, lineThickness, iradardf, 0.7);\n    enemyAlpha += smoothstep((0.05*enemyScanLine)+lineThickness/2.,(-0.05*enemyScanLine)-lineThickness/2.,sdTriangleIsosceles(enemySpace, vec2(0.024, .09)));\n    enemyAlpha *= pow(enemyScanLine,2.);\n   \n   \n    // Compose colors\n    vec3 color = mix(backgroundColor, lineColor ,radarAlpha);\n    color = mix(color, enemyColor ,enemyAlpha);\n    \n    // Mask colors outside of radar\n    color = mix(backgroundColor, color, radarMask);\n    \n    // Add overal brightness post process\n    color *= vec3(((lineColor * 2.) * radardf)+0.5);\n    \n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}