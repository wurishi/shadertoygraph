{"ver":"0.1","info":{"id":"tldcRn","date":"1608460421","viewed":359,"name":"Photoshop Highpass Filter (HPF)","username":"mbeytekin","description":"Implementing of Photoshop Highpass filter","likes":5,"published":1,"flags":0,"usePreview":1,"tags":["filter","photoshop","highpass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    vec2 uv = fragCoord/iResolution.xy;\n    \n   \n    \n\n\n       // GAUSSIAN BLUR\n\n    vec2 radius = vec2(2.0);   // PHOTOSHOP HIGHPASS RADIUS +1   vec(2.0)=photoshop's radius 1;\n    \n    float max = sqrt(radius.x * radius.x + radius.y * radius.y);\n\n    vec3 blur = vec3(0.0);\n\n    \n    float sum = 0.0;\n\n    for(float u = -radius.x; u<=radius.x; u++){\n        for(float v = -radius.y; v<=radius.y; v++){\n           \n            float weight = max - sqrt(u * u + v * v);\n           \n            blur += weight * texture( iChannel0, uv + (vec2(u, v)/iResolution.xy)).xyz;\n           \n            sum += weight;\n        }\n    }\n   \n    blur /= sum;\n    \n\n        // \n\n      \n     \n        vec3 col=blur;\n   \t\t\n        vec3 col_orig=(texture(iChannel0,uv).rgb);\n        \n        fragColor = vec4(vec3((col_orig-col))+0.5,1.);\n        \n       \n   \n    \n}","name":"Image","description":"","type":"image"}]}