{"ver":"0.1","info":{"id":"MfVGWy","date":"1713237421","viewed":148,"name":"Fork Game Of Life klk cmarangu","username":"cmarangu","description":"Based on https://jamie-wong.com/2016/08/05/webgl-fluid-simulation/#advection but just the advection section, none of the Navier-Stokes or other stuff. I do make sure my velocity field is divergence-free though.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["gameoflife"],"hasliked":0,"parentid":"Xd33WS","parentname":"Game Of Life, first attempt"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Chase Marangu\n// 2024 04 15 11:05pm EDT\n// Fork Game Of Life klk cmarangu\n// Game of Life shader based on @klk implementation\n// this shader URL: https://www.shadertoy.com/view/MfVGWy\n//\n\n// inspired by\n// - https://www.shadertoy.com/view/Xd33WS - Game Of Life, first attempt - @klk (lowercase l not capital I)\n// - https://www.shadertoy.com/view/MsXfRH - Towers of Life - @Polygon\n// - https://www.shadertoy.com/view/WlVGW1 - texture vs texelFetch - @DannnYXZ\n\n\n// take the transpose of whatever mat4 because GLSL stores matrices\n// in column-major order but we want to write row-major order\n// like how normal people do it\nconst mat4 modelViewMat = (1. / 8.) * transpose(mat4(\n1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1\n));\n\n\n// see Buffer A\nvec4 tex (vec2 fragCoord) {\n    fragCoord.xy = mod(fragCoord.xy, iResolution.xy);\n    return texelFetch(iChannel0, ivec2(fragCoord.xy), 0).rgba;\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    //\n    //\n    vec2 fragCoord2 = vec4(modelViewMat * vec4(fragCoord.x, fragCoord.y, 0, 0)).xy;\n    //\n    //\n    fragColor.rgb = tex(fragCoord2).rrb;\n    fragColor.a = 1.;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const mat4 modelViewMat = (1. / 8.) * transpose(mat4(\n1, 0, 0, 0,\n0, 1, 0, 0,\n0, 0, 1, 0,\n0, 0, 0, 1\n));\n\n// nArr is array containing neighbors\n// nArrLen is the length of the array\n#define nArrLen 8\nconst vec2 nArr[] = vec2[](\nvec2(-1,  1),   vec2(0,  1),   vec2(1,  1),\nvec2(-1,  0), /*vec2(0,  0),*/ vec2(1,  0),\nvec2(-1, -1),   vec2(0, -1),   vec2(1, -1)\n);\n\n// texel fetch shorthand function.\n// Note: texelFetch uses integer ivec2 not regular float vec2\nvec4 tex (vec2 fragCoord) {\n    // periodic boundary condition\n    fragCoord.xy = mod(fragCoord.xy, iResolution.xy);\n    return texelFetch(iChannel0, ivec2(fragCoord.xy), 0).rgba;\n}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n    //\n    // vec2 fragCoord2 = vec4(modelViewMat * vec4(fragCoord.x, fragCoord.y, 0, 0)).xy;\n    vec2 iMouse2 = vec4(modelViewMat * vec4(iMouse.x, iMouse.y, 0, 0)).xy;\n    //\n    fragColor.rgb = texelFetch(iChannel0, ivec2(fragCoord.xy), 0).xxz;\n    fragColor.b=(fragColor.b+fragColor.r)*0.95;\n    fragColor.a = 1.;\n    //\n    if((iFrame==0)||(length(iMouse2.xy-fragCoord))<5.0) {\n        fragColor.x=(fract(dot(sin(fragCoord*vec2(157.1,113.7)),\n                               vec2(353.17+iTime,383.093-iTime)))>0.33)?0.0:1.0;\n    }\n    else {\n        // l is number of live neighbors\n        float l = 0.;\n        for (int i=0; i<nArrLen; ++i) {\n            l += tex(fragCoord.xy + nArr[i]).r;\n        }\n        if (l==3.) {\n            fragColor.r=1.;\n        }\n        else if (l<2.) {\n            fragColor.r=0.;\n        }\n        else if (l>3.) {\n            fragColor.r=0.;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}