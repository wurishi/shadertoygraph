{"ver":"0.1","info":{"id":"ld2yzd","date":"1493452479","viewed":567,"name":"video MIPmap","username":"FabriceNeyret2","description":"BuildMIPmap in GLSL.\n\nevery 8 sec, show the pyramid.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["mipmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// --- reconstruct MIPmap value\n\nvec4 mipmap(vec2 U, float l) {\n    vec2 VR = texelFetch(iChannel0, ivec2(0), 0).zw,     // video resolution\n         SR = iResolution.xy;\n    U = (U*SR).yx / SR ;                                 // rotate back to horizontal\n    float z = exp2(-floor(l));\n#define M(z)  texture( iChannel0, U*(z) + vec2( VR.y/SR.x *2.*(1.-(z)), 0) )\n    return mix( M(z), M(z/2.), fract(l) );\n}\n\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.xy;\n    float t = mod(iTime,16.); t = min(t,16.-t);    // animate LOD\n    \n    if (t>7.)\n        O = texture(iChannel0, U);                       // display MIPmap pyramid\n    else {\n        O = mipmap(U,t);                                 // display MIPmapped image\n\n        U = (U*iResolution.xy) - texelFetch(iChannel0, ivec2(0), 0).zw;\n        if (max(U.x,U.y)>0.) O -=O;\n    }\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// --- source image\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 VR = iChannelResolution[0].xy;   // video resolution ( 400 x 300 )\n    if ( iResolution.y < 200. ) VR /= 2.; // for icon view\n    \n    O = texture(iChannel0, U / VR );\n    \n    if (U==vec2(.5)) O.zw = VR;           // keep video resolution\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// --- build MIPmap pyramid\n// ( note that there is 1 frame delay per MIPmap level )\n\n#define T(i,j) texelFetch(iChannel0, ivec2(2.*U)+ivec2(i,j),0)\n//#define T(i,j) texelFetch(iChannel0, ivec2(2.*U.yx)+ivec2(i,j),0) // fun compact variant\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    vec2 VR = texelFetch(iChannel1, ivec2(0), 0).zw; // video resolution\n    \n    if (U.x<VR.y) \n        O = texelFetch(iChannel1, ivec2(U.yx), 0);   // original image (rotated to vertical to save space)\n    else {\n        U.x -= VR.y;                                 // filtering cascade\n        O =   ( T(0,0)+T(1,0)+T(0,1)+T(1,1) ) /4.;\n    }\n}","name":"Buf B","description":"","type":"buffer"}]}