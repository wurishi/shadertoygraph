{"ver":"0.1","info":{"id":"Mcc3R8","date":"1711367886","viewed":94,"name":"Tic-Tac-Toe Match Game Ex.","username":"billrockx","description":"The Book of Shaders exercise.\nCompose a tic-tac-toe match.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["tbos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle( vec2 st,  float r){\n    float w =  4.5/iResolution.y;\n    r =  sqrt(r)/2.;  // you should rather provide the true r \n    return smoothstep( w, 0.0, length(st - 0.5) - r );\n}\n\nfloat box( vec2 st,  vec2 size){\n    float w =  4.5/iResolution.y;\n    size = 0.5 - size * 0.5;\n    st = smoothstep(0., w, min(st, 1.0 - st) - size );\n    return st.x * st.y;\n}\n\nfloat crossB(in vec2 st, float size){\n    return  box(st, size/vec2(1, 5)) +\n            box(st, size/vec2(5, 1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 st = fragCoord.xy/iResolution.y;\n    vec3 color = vec3(0.0);\n    float shape = 0.0;\n    vec2 tes = vec2(0.0);\n    float win_line = 0.0;\n\n    st *= 3.0;\n    \n    win_line = box(st, vec2(5.0, 0.1));\n    \n    tes = floor(st);\n    st = fract(st);\n\n    if (tes == vec2(0.0, 1.0) ||\n        tes == vec2(1.0, 1.0) ||\n        tes == vec2(2.0, 2.0)) {\n        shape = circle(st, 0.3) - circle(st, 0.2);\n    }\n    else if (tes == vec2(0.0, 0.0) ||\n        tes == vec2(0.0, 2.0) ||\n        tes == vec2(2.0, 0.0) ||\n        tes == vec2(1.0, 0.0)) {\n        vec2 tmp = st + vec2(0.2, -0.5);\n        tmp = ( tmp + vec2(-tmp.y,tmp.x ) ) / sqrt(2.);\n        shape = crossB(tmp, 0.6);\n    }\n    \n    if (tes.x < 3.0) {\n        color = vec3(1.0-box(st, vec2(0.9)));\n    }\n    else {\n        color = vec3(0.0);\n    }\n    \n    color += vec3(shape) * vec3(1.0);\n    color += win_line;\n\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}