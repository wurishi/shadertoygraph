{"ver":"0.1","info":{"id":"tlc3Rn","date":"1575434294","viewed":69,"name":"Checkerboard GPR 200","username":"JustinHollingshead03","description":"Checkerboard for GPR 200","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["checkerboard"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Got help from Josh Bogin\n// Change these\n// ------\nfloat columns = 20000.0;\nfloat rows = 200.0;\n// ------\nvec3 CheckerBoard;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Fixes the shape of the squares\n    float aspectRatio = iResolution.x/iResolution.y;\n    \n    // Proportion for the squares\n    uv.x *= aspectRatio * columns;\n    uv.y *= columns/rows * rows;\n    \n    // Calculates the uv position and checks if its even or odd\n    vec3 evenorOdd = vec3(mod(floor(uv.x) + floor(uv.y),2.0));\n    \n    // This is to display the checkerboard\n    vec3 CheckerBoard;\n    \n    // This makes the squares\n    float columnLength = step(columns,distance(uv.x, columns));\n    float rowLength = step(rows,distance(uv.x, rows));\n    \n    // Textures for the squares\n    vec3 texture1 = vec3(texture(iChannel0,uv));\n    vec3 texture2 = vec3(texture(iChannel1,uv));\n\n    // Displays the output\n\tCheckerBoard = texture1 * evenorOdd + texture2 * (1.0 - evenorOdd);\n    \n    // This is for if the squares get cut off\n        if (uv.x > floor(columns * aspectRatio))\n    {\n        // This will fill the empty space\n    \tCheckerBoard = vec3(0.0,0.0,0.0);\n    }\n    \t// Displays everything\n    fragColor = vec4(CheckerBoard,1.0);\n}","name":"Image","description":"","type":"image"}]}