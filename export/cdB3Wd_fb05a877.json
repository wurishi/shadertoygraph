{"ver":"0.1","info":{"id":"cdB3Wd","date":"1668296986","viewed":91,"name":"Henon escape time","username":"zenzicubic","description":"The Henon map escape time, from: https://mathworld.wolfram.com/HenonMap.html","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","map","chaos","henon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define B 1.01\n#define MAX 1000.\n#define STEPS 100\n\nfloat A;\n\nint test(vec2 x)\n{\n    int i = 0;\n    while (i < STEPS) \n    {\n        x = vec2(1. - A * x.x * x.x + x.y, B * x.x);\n        if (length(x) > MAX) break;\n        i++;\n    }\n    return i;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 12. * (fragCoord / iResolution.xy) - vec2(6., 6.);\n    float v = iTime / 60.;\n    A = abs(v - floor(v + 0.5));\n    \n    int i = test(uv);\n    float t = float(i)/float(STEPS);\n    \n    vec3 col = vec3(sqrt(t), t * t * t, max(0., sin(6.28317 * t)));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}