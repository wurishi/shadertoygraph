{"ver":"0.1","info":{"id":"MtScRG","date":"1508966228","viewed":289,"name":"Regular polygon SDF","username":"BasmanovDaniil","description":"Regular polygon SDF","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","polygon","regular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.28318530718\n\nfloat Polygon(vec2 p, float vertices, float radius)\n{\n    float segmentAngle = TWO_PI/vertices;\n    float halfSegmentAngle = segmentAngle*0.5;\n\n    float angleRadians = atan(p.x, p.y);\n    float repeat = mod(angleRadians, segmentAngle) - halfSegmentAngle;\n    float inradius = radius*cos(halfSegmentAngle);\n    float circle = length(p);\n    float x = sin(repeat)*circle;\n    float y = cos(repeat)*circle - inradius;\n\n    float inside = min(y, 0.0);\n    float corner = radius*sin(halfSegmentAngle);\n    float outside = length(vec2(max(abs(x) - corner, 0.0), y))*step(0.0, y);\n    return inside + outside;\n}\n\nfloat PolygonCheap(vec2 p, float vertices, float radius)\n{\n    float segmentAngle = TWO_PI/vertices;\n    float halfSegmentAngle = segmentAngle*0.5;\n\n    float angleRadians = atan(p.x, p.y);\n    float repeat = mod(angleRadians, segmentAngle) - halfSegmentAngle;\n    float inradius = radius*cos(halfSegmentAngle);\n    float circle = length(p);\n    float y = cos(repeat)*circle - inradius;\n    return y;\n}\n\nfloat TriangleWave(float x)\n{\n    return 2.0*abs(0.5 - fract(x + 0.5));\n}\n\nfloat EaseInOutExpo(float t)\n{\n    if (t < 0.5)\n    {\n        return 0.5*pow(2.0, 20.0*t - 10.0);\n    }\n    return -0.5*pow(2.0, -20.0*t + 10.0) + 1.0;\n}\n\nvec2 RotateCW(vec2 v, float radians)\n{\n    return cos(radians)*v + sin(radians)*vec2(-v.y, v.x);\n}\n\nfloat DebugSDFPattern(float d, float offset, float aa)\n{\n    d = fract(d);\n    return smoothstep(offset, offset + aa, d) * smoothstep(1.0 - offset, 1.0 - offset - aa, d);\n}\n\nvec4 DebugSDFPatternColor(float d)\n{\n\tfloat offset = sign(d)*0.3;\n    vec4 nearColor = vec4(0.4 + offset, 0.35, 0.4 - offset, 1.0);\n    vec4 farColor = vec4(0.55 + offset, 0.65, 0.55 - offset, 1.0);\n    return mix(nearColor, farColor, clamp(abs(d*10.0), 0.0, 1.0));\n}\n\nfloat DebugSDF(float d)\n{\n    float aa = 0.005;\n    float pattern1 = DebugSDFPattern(d, aa, aa);\n    float pattern2 = DebugSDFPattern(d*2.0, aa*0.5, aa*2.0);\n    float pattern10 = DebugSDFPattern(d*10.0, -aa*10.0, aa*20.0);\n    float pattern50 = DebugSDFPattern(d*50.0, -aa*50.0, aa*100.0);\n    return pattern1*pattern2*pattern10*pattern50;\n}\n\nvec4 DebugSDFColor(float d)\n{\n    return DebugSDF(d)*DebugSDFPatternColor(d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy/iResolution.xy - vec2(0.5, 0.5);\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float time = iTime*0.2;\n    uv = RotateCW(uv, EaseInOutExpo(TriangleWave(time*0.5))*TWO_PI);\n    \n    float vertices = mix(5.0, 10.0, EaseInOutExpo(TriangleWave(time)));\n    float radius = 0.4;\n    float d = Polygon(uv, vertices, radius);\n    \n\tfragColor = DebugSDFColor(d);\n}","name":"Image","description":"","type":"image"}]}