{"ver":"0.1","info":{"id":"lt2GDV","date":"1432801848","viewed":722,"name":"Color step","username":"ayamflow","description":"Playing with step/smoothstep + noise to get some kind of cel shaded blobs","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["color","generative","step"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Let's start with some Ashima noise\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// End of Ashima noise!\n\nfloat noise(vec2 p) {\n    return snoise(p);// + snoise(p + snoise(p));\n//    return (snoise(p) * 64.0 + snoise(p * 2.0) * 32.0 + snoise(p * 4.0) * 16.0 + snoise(p * 8.0) * 8.0 + snoise(p * 16.0) * 4.0 + snoise(p * 32.0) * 2.0 + snoise(p * 64.0)) / (1.0 + 2.0 + 4.0 + 8.0 + 16.0 + 32.0 + 64.0);\n}\n\nfloat level(float source) {\n    const float iterations = 5.0;\n    float val = 0.0;\n    float number = 1.0 / iterations;\n    for (float i = 0.0; i < iterations; i++) {\n//        val += smoothstep(source, i * number, (i + 1.0) * number);\n        val += step(source, i * number);\n    }\n    return val / iterations;\n}\n\nconst vec3 green = vec3(.0859375, .625, .51953125);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    float time = iTime * 0.3;\n\n    float t = noise(uv) + noise(uv + time);\n    vec3 color;\n\n    float l = length(uv);\n    vec3 col = vec3(level(t * l));\n    color = col * green;\n    \n    vec2 pos = uv;\n    pos -= vec2(0.5);\n    pos *= pow(length(pos), 0.5);\n    pos += vec2(0.5);\n    \n    fragColor = vec4(color, 1.0);\n//    fragColor = \n}","name":"","description":"","type":"image"}]}