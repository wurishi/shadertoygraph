{"ver":"0.1","info":{"id":"4cfXDB","date":"1705632292","viewed":110,"name":"major tom","username":"amusement","description":"edge noise displacement and feedback ","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["noisefeedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// ShaderToy GLSL Fragment Shader\n\n// Edge Detection Function\nvec4 edgeDetection(vec2 uv) {\n    float edgeThreshold = 0.09; // Adjust this to set how strong the edges need to be\n    vec2 tex_offset = 1.0 / iResolution.xy; // Offset for neighboring pixels\n    vec4 sum = vec4(0.0);\n\n    float kernel[9] = float[9](\n        -1.0, -1.0, -1.0,\n        -1.0,  8.0, -1.0,\n        -1.0, -1.0, -1.0\n    );\n\n    for (int i = 0; i < 3; i++) {\n        for (int j = 0; j < 3; j++) {\n            vec2 offset = vec2(tex_offset.x * float(i-1), tex_offset.y * float(j-1));\n            sum += texture(iChannel1, uv + offset) * kernel[j * 3 + i];\n        }\n    }\n    \n    vec4 edgeColor = (length(sum.rgb) > edgeThreshold) ? vec4(1.0) : vec4(0.0);\n    edgeColor.a = length(sum.rgb);\n    return edgeColor;\n}\n\n// Slope Calculation Function\nvec2 calculateSlope(vec4 noise) {\n    vec2 dxdy = vec2(dFdx(noise.r), dFdy(noise.r));\n    return dxdy;\n}\n\n// Displacement Function\nvec2 displacement(vec2 slope, vec2 uv, float strength) {\n    return uv + slope * strength;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Slow-moving, large-scale noise for displacement\n    float noiseScale = 0.6; // Adjust for larger/smaller noise pattern\n    float noiseSpeed = 0.06; // Adjust for faster/slower movement\n    vec2 noiseUV = uv * noiseScale + vec2(iTime * noiseSpeed, 0.5);\n    vec4 noise = texture(iChannel2, noiseUV);\n\n    // Calculate slope for displacement\n    vec2 slope = calculateSlope(noise);\n\n    // Apply displacement to UV coordinates\n    float displacementStrength = 0.6; // Adjust for stronger/weaker displacement\n    vec2 displacedUV = displacement(slope, uv, displacementStrength);\n\n    // Edge Detection on the displaced texture\n    vec4 edges = edgeDetection(displacedUV);\n\n    // Output only the edges\n    fragColor = edges;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}