{"ver":"0.1","info":{"id":"clyGWV","date":"1684645088","viewed":72,"name":"Obligatory Game of Life","username":"percentcer","description":"Game of Life why not","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["conway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define TAU 6.28\n\n#define COL1 vec3(.9, .2, .2)\n#define COL2 vec3(.0, .7, .7)\n#define COL3 vec3(.4, .2, .8)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = fragCoord / iResolution.xy;\n\n  //ivec2 sz = textureSize(iChannel0, 0);\n  //uv = (vec2(0.5) + vec2(ivec2(uv * vec2(sz)))) / vec2(sz);\n\n  fragColor = texture(iChannel0, uv);\n\n  // blur effect\n  vec3 infl = vec3(0, 0, 0);\n  for(float i = -1.0f; i < 2.0f; i++) {\n    for(float j = -1.0f; j < 2.0f; j++) {\n      vec2 t = (fragCoord + vec2(i, j)) / iResolution.xy;\n      vec4 s = texture(iChannel0, t);\n\n      float damp = smoothstep(100., 40., s.a);\n      vec3 grad = mix(COL1, COL3, damp);\n      grad = mix(grad, COL2, smoothstep(40., 0., s.a));\n\n      if(i == 0.f && j == 0.f) {\n        infl += grad * .25 * damp;\n      } else if(i == 0.f || j == 0.f) {\n        infl += grad * .125 * damp;\n      } else {\n        infl += grad * .06 * damp;\n      }\n    }\n  }\n\n  //vec3 r = COL1 * fragColor.r;\n  //vec3 g = COL2 * fragColor.g;\n  //vec3 b = COL3 * fragColor.b;\n  //#if 0 // all games overlaid\n  //   r *= (1.-step(.333,uv.x));\n  //   g *= (step(.333,uv.x)) * (1. - step(.666,uv.x));\n  //   b *= (step(.666,uv.x));\n  //#endif\n\n  fragColor = vec4(infl, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define N 4\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //fragCoord.x += sin(iTime);\n    // fragCoord = floor(fragCoord/4.f);`\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 me = texture(iChannel0, uv);\n    \n    // update the game every N frames\n    if (iFrame % N == 0) {\n      gol(me, fragCoord, iResolution.xy, iChannel0);\n    }\n    \n    if (iMouse.z > 0.f || iFrame == 0) {\n      vec4 noise = texture(iChannel1, \n      uv\n      * vec2(iResolution.x/iResolution.y,1.)\n      + vec2(0.,iTime)\n      );\n      vec4 rand = step(.5f, noise);\n      fragColor = vec4(rand.rgb, 0.0);\n    } else {\n      fragColor = me;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Any live cell with two or three live neighbours survives.\n// Any dead cell with three live neighbours becomes a live cell.\n// All other live cells die in the next generation. Similarly, all other dead cells stay dead.\n\n// (note that we are running three separate games across the three color channels)\nvoid gol(inout vec4 me, vec2 fragCoord, vec2 iResolution, sampler2D channel) {\n  // count nearby live cells (3x3 kernel excluding center)\n  vec3 livecount = vec3(0, 0, 0);\n  for(float i = -1.0f; i < 2.0f; i++) {\n    for(float j = -1.0f; j < 2.0f; j++) {\n      if(i == 0.f && j == 0.f) {\n        continue;\n      }\n      vec2 t = (fragCoord + vec2(i, j)) / iResolution.xy;\n      vec4 col = step(0.5f, texture(channel, t));\n      livecount += col.rgb;\n    }\n  }\n\n  // determine if this cell (me) should live or not\n  bool birthed = false;\n  for(int i = 0; i < 3; i++) {\n    if(me[i] > 0.f) {\n      if(livecount[i] == 2.0f || livecount[i] == 3.0f) {\n        // no change to liveness\n      } else {\n        me[i] = 0.f;\n      }\n    } else {\n      if(livecount[i] == 3.0f) {\n        me[i] = 1.f;\n        birthed = true;\n      }\n    }\n  }\n  // store the \"age\" of the fragment in the alpha\n  me.a = birthed ? 0.f : me.a + 1.f;\n}\n","name":"Common","description":"","type":"common"}]}