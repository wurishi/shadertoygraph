{"ver":"0.1","info":{"id":"tl3Gzr","date":"1575454280","viewed":354,"name":"benching fsin","username":"FabriceNeyret2","description":"benching JohnShadow's fsin [url]https://www.shadertoy.com/view/tlcGRr[/url]:\nComment #def sin in or out  ( or try fsin2 )\nOn my machine, with N=1e5, I got 430 ms for fsin and 139 for native sine:  \"fast sin\" is 3 times slower ;-)\n","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["bench","fsin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sin fsin            // comment in or out to bench sin or fsin\n#define N 1e4               // use more on fast GPU\n#define TAU (2.*3.1415927)\n#define Z min(0.,iTime)     // anti-optimization\n\n//adapted from JohnShadow's fsin https://www.shadertoy.com/view/tlcGRr\nfloat fsin(float x)\n{   x /= TAU;\n    float z = fract(-x); //  fract (0.25 * x)\n    z = -sign(2. * z - 1.);\n    x = fract(-2.*x);    // fract(x*0.5)\n    x = 2. * x - 1.;\n    x = x * x - 1.;\n    return x * z;\n}\nfloat fsin2(float x) // optimized ( slight gain )\n{   x /= TAU;\n    float z = sign( fract(x) - .5 ), \n          f = fract(2.*x),\n          s = 4.*f*(f-1.);\n    return s * z;\n}\n\nvoid mainImage( out vec4 O,  vec2 u )\n{\n    vec2 R = iResolution.xy, \n         U = vec2(TAU,2) *(u/R-vec2(0,.5));\n    O-=O;\n    for( float i = Z; i < N; i++ )    // non-optimizable loop\n        O += sin(i);\n    \n    O = vec4( U.y < sin(U.x) ) + Z*O; // display curve for control\n}","name":"Image","description":"","type":"image"}]}