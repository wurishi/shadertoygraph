{"ver":"0.1","info":{"id":"ldKBzD","date":"1527882686","viewed":180,"name":"feedback thing","username":"rytone","description":"test stuff","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["2d","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool bufa_writing = iFrame % 2 == 0;\n    vec2 uv = fragCoord/iResolution.xy;\n    if (!bufa_writing) {\n        fragColor = texture(iChannel0, uv);\n    } else {\n        fragColor = texture(iChannel1, uv);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*157.0;\n\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nfloat fractalNoise(vec2 pos) {\n\tfloat n = 0.;\n\tfloat scale = 1. / 1.5;\n\tfor (int i = 0; i < 5; i += 1) {\n\t\tn += noise(pos) * scale;\n\t\tscale *= 0.5;\n\t\tpos *= 2.;\n\t}\n\treturn n;\n}\n\nvec3 hue(vec3 color, float shift) {\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI     = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ     = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR   = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG   = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB   = vec3 (1.0, -1.107, 1.704);\n\n    // Convert to YIQ\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n\n    // Calculate the hue and chroma\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    // Make the user's adjustments\n    hue += shift;\n\n    // Convert back to YIQ\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    // Convert back to RGB\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    bool writing = iFrame % 2 == 0;\n    \n    if (writing) {\n        float scale = fractalNoise(fragCoord*0.01)*0.13+0.89;\n        vec2 prev_pos = fragCoord + vec2(noise(floor(fragCoord/50.0)+floor(iTime))*5.-2.5, 0.0);\n        vec2 prev_uv = prev_pos/iResolution.xy * vec2(scale) + vec2((1.-scale)/2.);\n        vec3 prev    = texture(iChannel0, prev_uv).rgb * 0.98;\n        prev = hue(prev, 0.1);\n        prev.b = sin(prev.r*1.5);\n\n        vec2 circle_point = vec2(sin(iTime*3.)*0.2+0.5, cos(iTime)*0.2+0.5) * iResolution.xy;\n        float circle_size = (sin(iTime*0.5)*0.3+0.5) * 250.;\n\n        float circle_dist = length(fragCoord-circle_point);\n        float circle = 0.;\n        if (circle_dist < circle_size && circle_dist > circle_size - 10.) {\n            circle = 1.;\n        }\n\n        vec3 circle_col = hue(vec3(0.5, 0.4, 0.1), iTime) * circle;\n        fragColor = vec4(prev+circle_col, 1.0);\n    } else {\n        fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n    }\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*157.0;\n\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nfloat fractalNoise(vec2 pos) {\n\tfloat n = 0.;\n\tfloat scale = 1. / 1.5;\n\tfor (int i = 0; i < 5; i += 1) {\n\t\tn += noise(pos) * scale;\n\t\tscale *= 0.5;\n\t\tpos *= 2.;\n\t}\n\treturn n;\n}\n\nvec3 hue(vec3 color, float shift) {\n\n    const vec3  kRGBToYPrime = vec3 (0.299, 0.587, 0.114);\n    const vec3  kRGBToI     = vec3 (0.596, -0.275, -0.321);\n    const vec3  kRGBToQ     = vec3 (0.212, -0.523, 0.311);\n\n    const vec3  kYIQToR   = vec3 (1.0, 0.956, 0.621);\n    const vec3  kYIQToG   = vec3 (1.0, -0.272, -0.647);\n    const vec3  kYIQToB   = vec3 (1.0, -1.107, 1.704);\n\n    // Convert to YIQ\n    float   YPrime  = dot (color, kRGBToYPrime);\n    float   I      = dot (color, kRGBToI);\n    float   Q      = dot (color, kRGBToQ);\n\n    // Calculate the hue and chroma\n    float   hue     = atan (Q, I);\n    float   chroma  = sqrt (I * I + Q * Q);\n\n    // Make the user's adjustments\n    hue += shift;\n\n    // Convert back to YIQ\n    Q = chroma * sin (hue);\n    I = chroma * cos (hue);\n\n    // Convert back to RGB\n    vec3    yIQ   = vec3 (YPrime, I, Q);\n    color.r = dot (yIQ, kYIQToR);\n    color.g = dot (yIQ, kYIQToG);\n    color.b = dot (yIQ, kYIQToB);\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    bool writing = iFrame % 2 == 1;\n    \n    if (writing) {\n        float scale = fractalNoise(fragCoord*0.01)*0.13+0.89;\n        vec2 prev_pos = fragCoord + vec2(noise(floor(fragCoord/50.0)+floor(iTime))*5.-2.5, 0.0);\n        vec2 prev_uv = prev_pos/iResolution.xy * vec2(scale) + vec2((1.-scale)/2.);\n        vec3 prev    = texture(iChannel0, prev_uv).rgb * 0.98;\n        prev = hue(prev, 0.1);\n        prev.b = sin(prev.r*1.5);\n\n        vec2 circle_point = vec2(sin(iTime*3.)*0.2+0.5, cos(iTime)*0.2+0.5) * iResolution.xy;\n        float circle_size = (sin(iTime*0.5)*0.3+0.5) * 250.;\n\n        float circle_dist = length(fragCoord-circle_point);\n        float circle = 0.;\n        if (circle_dist < circle_size && circle_dist > circle_size - 10.) {\n            circle = 1.;\n        }\n\n        vec3 circle_col = hue(vec3(0.5, 0.4, 0.1), iTime) * circle;\n        fragColor = vec4(prev+circle_col, 1.0);\n    } else {\n        fragColor = texture(iChannel1, fragCoord/iResolution.xy);\n    }\n}","name":"Buf B","description":"","type":"buffer"}]}