{"ver":"0.1","info":{"id":"NdV3Wh","date":"1631469201","viewed":109,"name":"Bouncing Truchet Tiling","username":"xXx_T0SHIII_xXx","description":"Playing around with Truchet Tiling, seeing what neat things I can do. Please drop some neat tricks to do with this and I'll see what I can do with it!\n\nThank you for checking out my Shader!! <3 ","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["math","colorful","shader","truchet","tiling","artistic","coding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hash221(vec2 p)\n{\n  p = fract(p*vec2(234.34,456.23));\n  p+= dot(p,p+34.32);\n  return fract(p.x+p.y);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n        //Control Variables\n        float tiling = cos(iTime/2.)*20.+20.;\n        float t = iTime;\n        float width = .1;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    //Rotation Variables\n    float Angle = (3.141592653589*t)/10.;\n    float A = cos(Angle);\n    float S = sin(Angle);\n    \n    //Rotate UV\n  uv*=mat2(A,-S,S,A);\n  \n  //Scale Uv by Tiling\n    vec2 bv = uv*tiling;\n    \n    //Make Grid\n    vec2 gv = fract(bv)-.5;\n    \n    //Set ids\n    vec2 id = floor(bv);\n    \n    //Random Flipping\n    float n = Hash221(id);\n    if(n<sin(t/2.)*.5+.5)gv.x*=-1.;\n    \n    //Color masks\n    float c = length(uv);\n    float c2 = length(gv);\n    \n    //Get Distances for lines\n    float d = abs(abs(gv.x+gv.y)-.5);\n    float d2 = length(gv-sign(gv.x+gv.y+0.001)*.5)-.5;\n    \n    //SmoothLines\n    float s = smoothstep(.01,-.01-1.5/iResolution.y,abs(d)-width); // Change d to d2 for Circular lines\n   \n    // visualize\n    vec3 col = vec3(s);\n    //if(gv.x >.48||gv.y>.48) col += 1.; //Draw Outline of each grid square\n    col.r *= sin(c-t); // Animated red Channel\n    col.g *= cos(c2+t)/2.; //Animated green channel\n    col.rgb -= c/1.; // Create Vignette\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}