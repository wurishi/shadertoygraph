{"ver":"0.1","info":{"id":"tscXWM","date":"1572098971","viewed":105,"name":"raymarch--8-camino","username":"jorge2017a1","description":"raymarch--8-camino","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarch8camino"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Created by UltimateKimera in 2019-10-21\n//modificado por jorge2017a1-  -26-oct-2019\n\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .001\n\n//----------------------------\n\n// Maximum/minumum elements of a vector    \nfloat vmax(vec2 v) {\n\treturn max(v.x, v.y);\n}\n\nfloat vmax(vec3 v) {\n\treturn max(max(v.x, v.y), v.z);\n}\n\nfloat vmax(vec4 v) {\n\treturn max(max(v.x, v.y), max(v.z, v.w));\n}    \n//---------------------\n\n\n\n// ============================\n// http://mercury.sexy/hg_sdf/\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\n\nfloat fCylinder(vec3 p, float r, float height) {\n\tfloat d = length(p.xz) - r;\n\td = max(d, abs(p.y) - height);\n\treturn d;\n}\n\n\n\nfloat repeat(float v, float r )  {   \n    return (mod(v, r)-r/2.);\n}    \n    \n   \n\nfloat GetDist(vec3 p){\n    vec4 sphere = vec4(0,1,6,1);\n    float dSphere = length(p-sphere.xyz)-sphere.w;\n    float dPlane = p.y;\n    \n  vec3 c;\n    c=p;\n    \n    vec4 color = vec4(1., 1., 1., 1.);\n  \n  c.z = repeat(c.z, 2.);\n    \n  c.x = abs(c.x)-0.5; //Mirror\n    \n  vec3 boxSize = vec3(.5, 1., .5);\n  vec3 boxOffset = vec3(1., -1.2, 0.);\n  float b1 = fBox(c+ boxOffset, vec3(3.0, .2, .2)); //c- vec3(x, y, z) how much to move the object\n  float b2 = fBox(c- boxOffset, vec3(3.0, .2, .2)); //c- vec3(x, y, z) how much to move the object\n  float b3 = fBox(c- vec3(.8, 0., 0.), vec3(.07, 1., .05)); //left box on column\n  float b4 = fBox(c- vec3(1., 0., -0.17), vec3(.07, 1., .05)); //front box on column\n  float b5 = fBox(c- vec3(1., 0., 0.17), vec3(.07, 1., .05)); //back box on column\n  float b6 = fBox(c- vec3(-.8, 0., 0.), vec3(.07, 1., .05)); //right box on column\n  float b7 = fBox(c- vec3(.0, -1.5, 0.), vec3(.5, .2, 2.));//small box on bottom\n  \n  float col1 = fCylinder(c- vec3(1., 0., 0.), .2, .9);\n  float col2 = fCylinder(c- vec3(1.9, 0., 0.), .2, .9);\n    \n    \n    \n  \n    \n    \n    //float d = min(dSphere, dPlane);\n    float d;\n    \n    d=min(dPlane, b1);\n    d=min(d, b2);\n    d=min(d, b3);\n    d=min(d, b4);\n    d=min(d, b5);\n    d=min(d, b6);\n    d=min(d, b7);\n    \n    d=min(d, col1);\n    d=min(d, col2);\n    \n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd){\n    float dO = 0.;\n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + dO*rd;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dS<SURFACE_DIST || dO>MAX_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n    vec2 e = vec2(.01, 0);\n    float d = GetDist(p);\n    vec3 n = vec3(\n    \td-GetDist(p-e.xyy),\n        d-GetDist(p-e.yxy),\n        d-GetDist(p-e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n    /*vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURFACE_DIST*2., l);\n    if (d<length(lightPos-p)) dif *= .1;\n    return dif;*/\n    \n    \n    vec3 lightPos1 = vec3(0, 5, 6);\n    lightPos1.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l1 = normalize(lightPos1-p);\n    vec3 n1 = GetNormal(p);\n    \n    float dif1 = clamp(dot(n1, l1), 0., 1.);\n    float d1 = RayMarch(p+n1*SURFACE_DIST*2., l1);\n    if (d1<length(lightPos1-p)) dif1 *= .1;\n    \n    \n    \n    \n    vec3 lightPos2 = vec3(-41.0, 25.0, -1.5);\n    lightPos2.xz += vec2(0.0, 5.0)*2.0;\n    vec3 l2 = normalize(lightPos2-p);\n    vec3 n2 = GetNormal(p);\n    \n    float dif2 = clamp(dot(n2, l2), 0., 1.);\n    float d2 = RayMarch(p+n2*SURFACE_DIST*2., l2);\n    if (d2<length(lightPos2-p)) dif2 *= .1;\n    return dif1+dif2;\n    \n}\n\nfloat GetLight2(vec3 p ,  vec3 luz){\n    /*vec3 lightPos = vec3(0, 5, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = clamp(dot(n, l), 0., 1.);\n    float d = RayMarch(p+n*SURFACE_DIST*2., l);\n    if (d<length(lightPos-p)) dif *= .1;\n    return dif;*/\n    \n    \n    vec3 lightPos1 = vec3(-0.5, 15, -10);\n    //lightPos1.xz += vec2(sn(iTime), cos(iTime))*2.;\n    vec3 l1 = normalize(lightPos1-p);\n    vec3 n1 = GetNormal(p);\n    \n    float dif1 = clamp(dot(n1, l1), 0., 1.);\n    float d1 = RayMarch(p+n1*SURFACE_DIST*2., l1);\n    if (d1<length(lightPos1-p)) dif1 *= .1;\n    \n    \n    float dif2;\n    \n    //vec3 lightPos2 = vec3(-41.0, 25.0, -1.5);\n    vec3 lightPos2 = luz;\n    \n    //lightPos2.xz += vec2(0.0, 5.0)*2.0;\n    vec3 l2 = normalize(lightPos2-p);\n    vec3 n2 = GetNormal(p);\n    \n    \n\t dif2 = clamp(dot(n2, l2), 0., 1.);\n    float d2 = RayMarch(p+n2*SURFACE_DIST*2., l2);\n    if (d2<length(lightPos2-p)) dif2 *= .1;\n    \n    return dif1+dif2;\n    \n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    //vec3 ro = vec3(0,1,0);\n    vec3 ro = vec3(0.0,0.5,iTime);\n    vec3 luz= vec3(5.0,6.0,iTime*0.05+10.0);\n    \n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    \n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd*d;\n    \n    //float dif = GetLight(p);\n    float dif = GetLight2(p, luz);\n    \n    col = vec3(dif);\n    \n    \n    col = pow(col, vec3(1.0/2.2)); \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}