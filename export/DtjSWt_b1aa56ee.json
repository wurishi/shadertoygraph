{"ver":"0.1","info":{"id":"DtjSWt","date":"1676782003","viewed":77,"name":"galactic_corridors","username":"ford442","description":"by ScienceOrDie","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define UNIFORM_INSERTION_POINT \n//-----------------CONSTANTS MACROS-----------------\n#define PI 3.14159265359\n#define E 2.7182818284\n#define GR 1.61803398875\n//-----------------UTILITY MACROS-----------------\n#define iTime (sin(((sin(float(__LINE__)*100.0)*GR/PI+GR/PI/E)*iTime+100.0)/100.0)*100.0)\n#define saw(x) (acos(cos(x))/PI)\n#define sphereN(uv) (clamp(1.0-length(uv*2.0-1.0), 0.0, 1.0))#define clip(x) (smoothstep(0.5-GR/PI/E, .5+GR/PI/E, x))\n#define zero(x) (smoothstep(-1.0/PI/E/GR, 1.0/PI/E/GR, sin(x*PI/2.0))*2.0-1.0)\n#define iTimeS_DETAILED (1.0)\n#define angle(uv) (atan((uv).y, (uv).x))\n#define angle_percent(uv) ((angle(uv)/PI+1.0)/2.0)#define absMin(x,y) (abs(x) < abs(y) ? x: y)\n#define quadrant(uv) (absMin( zero(uv.x), zero(uv.y))+floor(uv.x/2.0)+floor(uv.y/2.0) )\n#define flux(x) (vec3(cos(x),cos(4.0*PI/3.0+x),cos(2.0*PI/3.0+x))*.5+.5)\n#define rotatePoint(p,n,theta) (p*cos(theta)+cross(n,p)*sin(theta)+n*dot(p,n) *(1.0-cos(theta)))\n#define GUASS(x) (smoothstep(0.0, 1.0/GR/PI/E, saw(x*PI/2.0)*(1.0-saw(x*PI/2.0))))\n#define GRID_COUNT (50.0)\n#define hash(p) (fract(sin(vec2( dot(p,vec2(127.5,313.7)),dot(p,vec2(239.5,185.3))))*43458.3453))\n#define MAX_DIM (max(iResolution.x, iResolution.y))\nfloat seedling = 0.0;vec2 spiral(vec2 uv){    float turns = 5.0;  \nfloat r = pow(log(length(uv)+1.), 1.175);   \nfloat theta = atan(uv.y, uv.x)*turns-r*PI;  \nreturn vec2(saw(r*PI+iTime), saw(theta+iTime*1.1));\n}vec2 cmul(vec2 v1, vec2 v2) {\nreturn vec2(v1.x * v2.x - v1.y * v2.y, v1.y * v2.x + v1.x * v2.y);\n}\nvec2 cdiv(vec2 v1, vec2 v2) {return vec2(v1.x * v2.x + v1.y * v2.y, v1.y * v2.x - v1.x * v2.y) / dot(v2, v2);}\nvec2 mobius(vec2 uv, vec2 multa, vec2 offa, vec2 multb, vec2 offb){    return saw(cdiv(cmul(uv, multa) + offa, cmul(uv, multb) + offb)*PI)*2.0-1.0;}\nvec2 square_map(vec2 uv){    return (rotatePoint(vec3(uv+vec2(cos(seedling*PI), cos(seedling*GR)), 0.0), vec3(0.0, 0.0, 1.0), iTime/PI).xy*(1.0+sin(iTime+seedling)/PI/E/GR)+vec2(cos(iTime+seedling)+sin(iTime+seedling)));\n}vec2 iterate_square(vec2 uv, vec2 dxdy, out float magnification){    vec2 a = uv+vec2(0.0, 0.0);    vec2 b = uv+vec2(dxdy.x, 0.0);  \nvec2 c = uv+vec2(dxdy.x, dxdy.y); \nvec2 d = uv+vec2(0.0, dxdy.y);\n//((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect; \nvec2 ma = square_map(a);    vec2 mb = square_map(b); \nvec2 mc = square_map(c);    vec2 md = square_map(d);    \nfloat da = length(mb-ma);    float db = length(mc-mb);  \nfloat dc = length(md-mc);    float dd = length(ma-md);  \nfloat stretch = max(max(max(da/dxdy.x,db/dxdy.y),dc/dxdy.x),dd/dxdy.y);   \nmagnification = stretch;     \nreturn square_map(uv);}vec2 mobius_map(vec2 uv, vec2 multa, vec2 offa, vec2 multb, vec2 offb){  \nreturn mobius(uv, multa, offa, multb, offb);}vec2 iterate_mobius(vec2 uv, vec2 dxdy, out float magnification, vec2 multa, vec2 offa, vec2 multb, vec2 offb){    vec2 a = uv+vec2(0.0, 0.0);    vec2 b = uv+vec2(dxdy.x, 0.0);  \nvec2 c = uv+vec2(dxdy.x, dxdy.y); \nvec2 d = uv+vec2(0.0, dxdy.y);\n//((fragCoord.xy + vec2(0.0, 1.0)) / iResolution.xy * 2.0 - 1.0) * aspect; \nvec2 ma = mobius_map(a, multa, offa, multb, offb);  \nvec2 mb = mobius_map(b, multa, offa, multb, offb);  \nvec2 mc = mobius_map(c, multa, offa, multb, offb); \nvec2 md = mobius_map(d, multa, offa, multb, offb);  \nfloat da = length(mb-ma);    float db = length(mc-mb); \nfloat dc = length(md-mc);    float dd = length(ma-md);  \nfloat stretch = max(max(max(da/dxdy.x,db/dxdy.y),dc/dxdy.x),dd/dxdy.y);        magnification = stretch;        return mobius_map(uv, multa, offa, multb, offb);}vec3 phase(float map){    return vec3(saw(map),                saw(4.0*PI/3.0+map),                saw(2.0*PI/3.0+map));}vec4 galaxy(vec2 uv){uv *= 5.0;       \nfloat r1 = log(length(uv)+1.)*2.0;    float r2 = pow(log(length(uv)+1.)*3.0, .5);        float rotation = iTime;        float theta1 = atan(uv.y, uv.x)-r1*PI+rotation*.5+seedling;    float theta2 = atan(uv.y, uv.x)-r2*PI+rotation*.5+seedling;   \nvec4 color = vec4(flux(iTime+seedling), 1.0);   \nvec4 final = acos(1.0-(cos(theta1)*cos(theta1)+sqrt(cos(theta1+PI)*cos(theta1+PI)))/2.0)*(1.0-log(r1+1.))*color              + cos(1.0-(cos(theta2)*cos(theta2)+cos(theta2+PI/2.)*cos(theta2+PI/2.))/2.0)*(1.25-log(r2+1.))*color;             final.rgba += color;  \nfinal /= r1;        final *= 2.0;        float weight = clamp(length(clamp(final.rgb, 0.0, 1.0)), 0.0, 1.0);    return final;}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n vec2 uv = vec2(fragCoord.x, 1.-fragCoord.y);  \n float scale = exp(sin(iTime))*E+GR; \n uv = uv*scale-scale/2.0;  \n uv.x *= iResolution.x/iResolution.y; \n   uv = rotatePoint(vec3(uv, 0.0), vec3(0.0, 0.0, 1.0), iTime/PI).xy;  \n   vec2 uv0 = uv;    uv += cos(vec2(iTime, iTime/GR));  \n   float r = length(uv);     \n   float map = iTime;    float noise = 1.0;    float spounge = iTime*4.0*PI;const int max_iterations = 4;  \n  int target = max_iterations;\n  //-int(saw(spounge)*float(max_iterations)/2.0); \n       vec2 multa, multb, offa, offb;  \n       float antispeckle = 1.0;     float magnification = 1.0;\n       vec3 color = vec3(1.0);vec3 accum = vec3(0.0);  \n  float sum = 0.0;    float anticolor = 1.0;    seedling = 0.0;     \n  float black, white;    white = 0.0;            float border_color = 0.0; \n   float border = 0.0;        vec4 hit = vec4(0.0);     \n   for(int i = 0; i < max_iterations; i++)    {        float iteration = float(i)/float(max_iterations);      \n          multa = cos(vec2(iTime*1.1, iTime*1.2)+iteration*PI);  \n          offa = cos(vec2(iTime*1.3, iTime*1.4)+iteration*PI)*PI; \n          multb = cos(vec2(iTime*1.5, iTime*1.6)+iteration*PI); \n       offb = cos(vec2(iTime*1.7, iTime*1.8)+iteration*PI);    \n       uv = iterate_square(uv, .5/iResolution.xy, magnification);  \n      float weight = smoothstep(0.0, 0.25, magnification);   \n      antispeckle *= smoothstep(0.0, 1.0/iTimeS_DETAILED, sqrt(1.0/(1.0+magnification)));       \n         float q = 0.7;//  quadrant(uv);   \n         seedling += q+float(i);  \n         map += (q+seedling)*antispeckle;     \n         float shift = iTime;    \n    border = max(border, (smoothstep(1.0-1.0/GR/E/PI, 1.0, (cos(uv.y*PI)))));   \n    border = max(border, (smoothstep(1.0-1.0/GR/E/PI, 1.0, (cos(uv.x*PI)))));           \n     float stripes = map*1.0*PI;\n     //*floor(log(max(iResolution.x, iResolution.y))/log(2.0));     \n     float black = smoothstep(0.0, .75, saw(stripes))*clamp(1.0-abs(border), 0.0, 1.0);  \n      float white = smoothstep(0.75, 1.0, saw(stripes))*black;   \n      vec3 final = flux(map*2.0*PI+shift+float(i))*black+white;\n        color *= (final); \n       accum += final;  \n      sum += 1.0;   \n     anticolor *= white; \n     if(i != 0)     \n     {hit += galaxy(saw(uv*PI/2.0)*2.0-1.0)*clamp(1.0-length(hit.rgb), 0.0, 1.0)*(1.0-border);                \n        uv = iterate_mobius(uv, .5/iResolution.xy, magnification, multa, offa, multb, offb);   \n         antispeckle *= smoothstep(0.0, 1.0/iTimeS_DETAILED, sqrt(1.0/(1.0+magnification)));      \n      border = max(border, (smoothstep(1.0-1.0/GR/E/PI, 1.0, (cos(uv.y*PI)))));  \n          border = max(border, (smoothstep(1.0-1.0/GR/E/PI, 1.0, (cos(uv.x*PI)))));        }    }   \n          scale = 32.;  \n  vec2 gridPosition = floor(uv0 * scale) / scale;\n    vec2 randomOffset = hash(gridPosition) * 2. - 1.; \n   vec2 localGridPositionCenter = fract(uv0 * scale) - .5;  \n  hit = hit;        color = pow(color, vec3(1.0/float(max_iterations)));  \n      antispeckle = pow(antispeckle, 1.0/float(max_iterations));    \n    fragColor.rgb = (color+accum/sum)*(1.0-border);  \n      fragColor = hit; \n   fragColor.a = 1.0;}\n","name":"Image","description":"","type":"image"}]}