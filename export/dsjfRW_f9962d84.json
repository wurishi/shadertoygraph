{"ver":"0.1","info":{"id":"dsjfRW","date":"1689518640","viewed":155,"name":"Brownian Blocks","username":"kastorp","description":"full screen shows directions\nspace bar to reset\n","likes":17,"published":1,"flags":48,"usePreview":0,"tags":["brownian","ca"],"hasliked":0,"parentid":"Ds2BzW","parentname":"Brownian Caves"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Brownian Blocks by Kastorp\n//------------------\n// each movement is composed by 3 steps:\n// 1) the block marks desired direction \n// 2) the empty space confirms the incoming direction\n// 3) the block commits move (ie. swaps with empty space)\n//    otherwise rollback\n//\n// change configuration in \"Common\" tab\n//------------------\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n   \n    vec2 R= iResolution.xy;\n    vec2 p=I/R.y*SZ;\n    ivec2 c=  ivec2(p);\n    O = texelFetch(iChannel0,c,0);\n    vec3 col= vec3(0);\n    p-= vec2(c)+.5;\n    const vec3 WHITE=vec3(1);\n    if(OTHER) \n        col= vec3(0.5);\n    if(EMPTY) {\n        col= vec3(0);\n        #ifdef ARROWS\n        if(O.w==2. && p.y>0. && abs(p.y)>abs(p.x)) col=WHITE;\n        if(O.w==1. && p.y<0. && abs(p.y)>abs(p.x)) col=WHITE;\n        if(O.w==4. && p.x>0. && abs(p.y)<abs(p.x)) col=WHITE;\n        if(O.w==3. && p.x<0. && abs(p.y)<abs(p.x)) col=WHITE;\n        #endif\n    }\n    if(BLOCK ){\n        col=vec3(.5) +.5*cos(vec3(0,2,4)+ O.y*11.);\n        #ifdef ARROWS\n        if(O.w==1. && p.y>0. && abs(p.y)>abs(p.x)) col=WHITE;\n        if(O.w==2. && p.y<0. && abs(p.y)>abs(p.x)) col=WHITE;\n        if(O.w==3. && p.x>0. && abs(p.y)<abs(p.x)) col=WHITE;\n        if(O.w==4. && p.x<0. && abs(p.y)<abs(p.x)) col=WHITE;\n        #endif\n    }\n    O.xyz=col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    \n    bool rc =texelFetch(iChannel0,ivec2(iResolution.x-1.,0),0)==vec4(0);\n    if(iFrame==0|| rc ||texelFetch(iChannel3,ivec2(32,0),0).x>.5) { \n    \n        //initialize\n        O = vec4(0); //VOID\n        if(length(I-vec2(SZ*.5))<SZ*.3) O = vec4(8.,I.x/SZ,3,0);\n        if(max(abs(I.x-SZ*.5),abs(I.y-SZ*.5))>SZ*.5-1.) O = vec4(4,0,0,0);\n        if(I.y<1. && I.x>iResolution.x-2.)O=vec4(1);      \n        return;\n    }\n    else{\n        //get current\n        O=texelFetch(iChannel0,ivec2(I),0);\n       // if(iFrame%2>0) return;\n        if(I.y>SZ || I.x>SZ) return;\n        \n        //get neighbors\n        vec4[4] c ;\n        for(int i=0;i<4;i++){ \n           //0:Bottom, 1:up, 2:left, 3:right \n           vec2 d =vec2(i<2?0:i==2?-1:1, i>1?0:i==0?-1:1);\n           c[i]= texelFetch(iChannel0,ivec2(I+d),0);      \n        }\n\n        //commit (swap)\n        RULE_ANY(EMPTY && N_BLOCK  && int(O.w)==i+1 && ND>0 && OPPOSITE(int(O.w),ND) ,vec4(c[i].xyz,STRAIGHT);return);\n        RULE_ANY(BLOCK  && N_EMPTY && int(O.w)==i+1 && ND>0 && OPPOSITE(int(O.w),ND) ,vec4(0);return);\n \n        //request\n        RULE_ANY(BLOCK  && N_EMPTY && O.w==0. && ND==0  && int(hash13(vec3(I ,iFrame))*4.)==i,vec4(O.xyz,i+1);return);\n        //confirm\n        RULE_ANY(EMPTY && N_BLOCK  && O.w==0. && ND>0  && OPPOSITE(i+1,ND),vec4(O.xyz,i+1);return);      \n\n        //rollback (works but could be semplified)\n        RULE_ALL(EMPTY && int(O.w)==i+1 && (!N_BLOCK  || ND==0 || (  ND>0  && !OPPOSITE(int(O.w),ND))),vec4(O.xyz,0.);return;);\n        RULE_ALL(BLOCK && int(O.w)>0 && (!N_EMPTY  || (ND>0  &&  !OPPOSITE(int(O.w),ND))),vec4(O.xyz,0.);return;);\n        RULE_ANY(BLOCK && !N_EMPTY && int(O.w)==i+1 ,vec4(O.xyz,0.));\n        \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//configuration:\n#define SZ 100.    //500.\n#define ARROWS\n#define STRAIGHT 0 //c[i].w\n\n//------------------\n//definitions\n#define NG c[i].x //near group\n#define NT c[i].y //near type\n#define NV c[i].z //near value  \n#define ND int(c[i].w) //near value \n#define RULE(check,val) if( check) O=val;\n#define RULE_ANY(check,val) for(int j=0;j<4;j++){ int i=(iFrame%2==1?j:3-j); if( check){ O=val;}}\n#define RULE_ALL(check,val) {bool ch=true; for(int i=0;i<4;i++) ch=ch&& check; if(ch) {O=val;}}\n#define BOTTOM 0 \n#define UP 1 \n#define LEFT 2 \n#define RIGHT 3  \n#define OPPOSITE(a,b)  (a+b==7 || a+b==3) \n\n//NEIGHBORS CONDITIONS\n#define N_EMPTY (NG==0.)\n#define N_BLOCK (NG==8.)\n\n//CURRENT BLOCK CONDITIONS\n#define EMPTY (O.x==0.)\n#define BLOCK (O.x==8.)\n#define OTHER (O.x==4.)\n\n//https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n","name":"Common","description":"","type":"common"}]}