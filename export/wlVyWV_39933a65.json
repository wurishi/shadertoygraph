{"ver":"0.1","info":{"id":"wlVyWV","date":"1611849203","viewed":121,"name":"spaceship run","username":"regis","description":"spaceship","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","starwars","spaceship"],"hasliked":0,"parentid":"WlycDK","parentname":"Fork Fork Fork  regis 512"},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec2 sdfShip(vec3 p){\n\n    vec2 d = vec2(0.0);\n\n    //left\n    vec3 q = p - vec3(-4.0, 2.0, 0.0);\n    q *= RotY(1.570796327);\n    float tp = sdHexPrism(q-vec3(0.0, 2.0, 0.0), vec2(2.0, 0.1))-0.1;\n    //d.x = tp;\n    //d.y = 1.0;\n    \n    q = p-vec3(-3.4, 4.0, 0.0);\n    q *= RotY(3.1415);\n    float tp2 = sdBox3(q, vec3(0.2, 0.2, 0.2), vec3(0.5, 0.5, 0.5), 0.05, 0.6);\n    \n    q = p-vec3(-2.5, 4.0, 0.0);\n    q *= RotZ(1.570796327);\n    float tpc = sdCyl(q, 0.1, 1.0);\n    \n    q = p-vec3(-1.5, 4.0, 0.0);\n    q *= RotZ(1.570796327);\n    float tp3 = sdCyl2(q, 0.1, 0.3, 0.2);\n    \n    \n    //right\n    q = p - vec3(4.0, 2.0, 0.0);\n    q *= RotY(1.570796327);\n    float tpr = sdHexPrism(q-vec3(0.0, 2.0, 0.0), vec2(2.0, 0.1))-0.1;\n    //d.x = tp;\n    //d.y = 1.0;\n    \n    q = p-vec3(3.4, 4.0, 0.0);\n    //q *= RotY(3.1415);\n    float tpr2 = sdBox3(q, vec3(0.2, 0.2, 0.2), vec3(0.5, 0.5, 0.5), 0.05, 0.6);\n    \n    q = p-vec3(2.5, 4.0, 0.0);\n    q *= RotZ(1.570796327);\n    float tprc = sdCyl(q, 0.1, 1.0);\n    \n    q = p-vec3(1.5, 4.0, 0.0);\n    q *= RotZ(-1.570796327);\n    float tpr3 = sdCyl2(q, 0.1, 0.3, 0.2);\n    \n    \n    //center\n    q = p-vec3(0.0, 4.0, 0.0);\n    float cen = length(q)-1.45;\n    \n    q = p - vec3(0.0, 4.0, -2.5);\n    float bcen = Box(q, vec3(1.5), 0.1);\n    \n    q = p-vec3(0.0, 4.0, 0.0);\n    float bcen2 = length(q)-1.25;\n    \n    \n    \n    \n    float TP = smin(tp, tp2, 0.1);\n    TP = smin(TP, tpc, 0.1);\n    TP = smin(TP, tp3, 0.1);\n    //right\n    TP = smin(TP, tpr, 0.1);\n    TP = smin(TP, tpr2, 0.1);\n    TP = smin(TP, tprc, 0.1);\n    TP = smin(TP, tpr3, 0.1);\n    ///center\n    TP = smin(TP, cen, 0.1);\n    TP = smax(TP, -bcen, 0.1);\n    //TP = smin(TP, bcen2, 0.1);\n    \n    d.x = TP;\n    d.y = 1.0;\n    \n    if(bcen2 <= d.x){\n        d.x = bcen2;\n        d.y = 3.0;\n    \n    }\n    \n    if(tp <= d.x){\n        d.x = tp;\n        d.y = 4.0;\n    \n    }\n    \n    if(tpr <= d.x){\n        d.x = tpr;\n        d.y = 4.0;\n    \n    }\n\n    return d;\n\n}\n\nvec2 map(vec3 p){\n\n    vec2 d = vec2(0.0);\n    \n    float terr = TerrainRM(p.xz);\n    float pl = p.y-terr;\n   \n    d.x = pl;\n    d.y = 2.0;\n    \n   \n \n    vec3 q = p - vec3(0.0, 2.0+terr, 0.0);\n    q.z += iTime*5.0;\n    vec2 tp = sdfShip(q*4.0);\n    tp.x /= 4.0;\n    if(tp.x < d.x){\n        d.x = tp.x;\n        d.y = tp.y;\n    \n    }\n    \n    q = p - vec3(-3.5, 2.0+terr, 2.0);\n    q.z += iTime*5.0;\n    vec2 tp2 = sdfShip(q*4.0);\n    tp2.x /= 4.0;\n    if(tp2.x < d.x){\n        d.x = tp2.x;\n        d.y = tp2.y;\n    \n    }\n    \n    q = p - vec3(3.5, 2.0+terr, 2.0);\n    q.z += iTime*5.0;\n    vec2 tp3 = sdfShip(q*4.0);\n    tp3.x /= 4.0;\n    if(tp3.x < d.x){\n        d.x = tp3.x;\n        d.y = tp3.y;\n    \n    }\n    \n    \n  \n    \n    return d;\n\n}\n\nvec3 RM(vec3 ro, vec3 rd, float _d){\n    vec3 d = vec3(_d, 0.0, 0.0);\n    for(int i = 0;i < 100;i++){\n        d.yz = map(ro + d.x * rd).xy;\n        \n        if(abs(d.y) <(0.001))\n            break;\n            \n        d.x += d.y;\n        \n        if(d.x > 100.0)break;\n    \n    }\n    if(d.x > 100.0)d.x = -1.0;\n    \n    return d;\n    \n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 lightDir = normalize( vec3(0.5,0.6,0.) );\nconst mat2 m2 = mat2( 0.60, -0.80, 0.80, 0.60 );\nvec3 Cloud(vec3 bgCol,vec3 ro,vec3 rd,vec3 cloudCol,float spd)\n{\n    vec3 col = bgCol;\n    float t = iTime * 0.15* spd;\n    //float r = N21(vec2(t)) * 20.5;\n    vec2 sc = ro.xz + rd.xz*2.5/rd.y;//*(12.0-ro.y)/rd.y;\n    vec2 p = 0.2*sc;\n    float f = 0.0;\n  \tfloat s = 0.5;\n  \tfloat sum =0.;\n  \tfor(int i=0;i<5;i++){\n    \tp += t;t *=1.5;\n    \tf += s* Noise(p) /*texture (iChannel0, p/256.0).x/*textureLod( iChannel0, p/256.0, 0.0).x*/; p = m2*p*2.02;\n    \tsum+= s;s*=0.6;\n  \t}\n    float val = f/sum; \n    col = mix( col, cloudCol, smoothstep(0.5,0.8,val) );\n    return col;\n}\nvec3 RayMarchCloud(vec3 ro,vec3 rd){\n    vec3 col = vec3(0.0,0.0,0.0);  \n    /*float sundot = clamp(dot(rd,lightDir),0.0,1.0);\n    */\n     // sky      \n    //col = vec3(0.2,0.5,0.85)*1.1 - rd.y*rd.y*0.5;\n   // col = mix( col, 0.85*vec3(0.7,0.75,0.85), pow( 1.0-max(rd.y,0.0), 4.0 ) );\n    // sun\n    /*\n    col += 0.25*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n    col += 0.25*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n    col += 0.4*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );*/\n     col = vec3(0.0, 0.7, 1.0);\n    // clouds\n    col = Cloud(col,ro,rd,vec3(1.0,0.95,1.0),1.);\n            // .\n    col = mix( col, 1.5*vec3(0.0,0.5,1.0), pow( 1.0-max(rd.y,0.0), 16.0 ) );\n    return col;\n}\n\n\nvec3 getLight(vec3 p, vec3 ro, vec3 rd, vec3 lightpos, out vec3 n, vec2 uv){\n    vec2 e = vec2(0.01, 0.0);\n    vec2 nd = map(p);\n\n    n = nd.x - vec3(map(p - e.xyy).x ,\n                        map(p- e.yxy).x ,\n                        map(p- e.yyx).x );\n\n    n = normalize(n);\n    \n        \n    \n    vec3 l = normalize(lightpos-p);\n    \n    float occ = calcAO(p, n); \n    float dif = clamp(dot(n, l), 0.0, 1.0);\n    dif += occ;\n    \n   \n    \n   \n    vec3 sh = RM(p+n*0.01, l, 0.0);\n    p = ro + rd * sh.x;\n    \n       \n    float spec = pow(max( dot( reflect(-l, n), -rd ), 0.), 8.);\n    \n    vec3 col = vec3(0.0);\n    \n \n       \n    if((sh.x > 0.0) && (sh.x < length(lightpos-p))){\n\n        if(sh.z == 1.0){\n\n            col = vec3(dif);\n            return col;\n\n\n            \n        }\n        else\n             return vec3(dif);\n     \n            \n    }\n    else\n         return vec3(dif);\n   \n   \n}\n\nvec3 Bg(vec3 rd){\n\n    float k = rd.y*.5+.5;\n    \n    \n    vec3 col = mix(vec3(.2, .1, .1), vec3(.2, .5, 1.), k);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y/iResolution.x, 1.0);\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n       \n    vec3 p;\n    vec3 ro = vec3(-2.0, 2.0, -8.0); \n    vec3 lookat = vec3(0.0, 2.0, 30.0);\n    //vec3 rd = normalize(vec3(0.0, 1.0, 0.0));\n    vec3 lightpos = vec3(0.0, 5.0, -1.0);\n        \n    vec3 dirc = vec3(0.0, 2.0, 0.0);\n        \n    float an = (iMouse.x/iResolution.x)*10.0;\n    float anx = (iMouse.y/iResolution.y)*2.0;\n    ro -= dirc;\n    lookat -= dirc;\n    ro *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    lookat *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    ro *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    lookat *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    ro *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    lookat *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    \n    ro += dirc;\n    lookat += dirc;\n      \n    \n    \n    lightpos -= dirc;\n    lightpos *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    lightpos *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    lightpos *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    lightpos += dirc;\n    \n    \n    lightpos.z -= iTime*5.0;\n    dirc.z -= iTime*5.0;\n    ro.z -= iTime*5.0;\n    lookat.z -= iTime*5.0;\n    \n    \n    float terr = TerrainRM(ro.xz);\n        lightpos.y += terr;\n        dirc.y += terr;\n        ro.y += terr;\n        \n        lookat.y += terr;\n        \n    if(terr <= 0.0){\n        lookat.y = ro.y +10.0 ;\n    \n    }\n    else\n    {\n        lookat.y = ro.y -10.0 ;\n    \n    }\n    \n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n    \n    float dan = 0.0;\n    vec3 d = RM(ro, rd, dan);\n    \n    vec4 rc;\n    if(d.x > 0.0){\n        p = ro + d.x * rd;\n                \n        \n        vec3 n;\n        vec3 dif = getLight(p, ro, rd, lightpos, n, uv);\n    \n        if(d.z == 1.0){\n            \n            vec3 r = reflect(rd, n);\n            float spec = pow(max(0.0, r.y), 20.);\n            col += mix(Bg(r), dif, .5)+ spec ;\n           \n           \n        \n        }\n        else if(d.z == 2.0){\n            vec3 r = reflect(rd, n);\n            float spec = pow(max(0.0, r.y), 5.);\n            col = mix(vec3(1.0, 0.5, 0.2)*dif, vec3(Noise(p.xz)*0.1), 0.5)+spec;\n            \n        \n        \n        }\n        else if(d.z == 3.0){\n            col = dif * vec3(1.0, 0.3, 0.2)*texture(iChannel0, reflect(rd, -n)).rgb;\n            \n        }\n        else if(d.z == 4.0){\n            \n            col = dif * vec3(0.2, 0.2, 0.2) ;\n            \n        }\n        \n          \n\n    }                 \n    else\n    {\n        col = RayMarchCloud(ro, rd);\n    \n    }\n    \n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"mat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nmat3 RotX(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(1., .0, .0, .0, c, -s, .0, s, c);\n\n}\n\nmat3 RotY(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, .0, s, .0, 1., .0, -s, .0, c);\n\n}\n\nmat3 RotZ(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);\n\n}\n\nmat3 quat(vec3 p, float theta){\n\n    vec3 z = normalize(p);\n    \n    float t1 =  cos(theta);\n    float t2 =  1. - t1;\n    float t3 =  z.x*z.x;\n    float t6 =  t2*z.x;\n    float t7 =  t6*z.y;\n    float t8 =  sin(theta);\n    float t9 =  t8*z.z;\n    float t11 = t6*z.z;\n    float t12 = t8*z.y;\n    float t15 = z.y*z.y;\n    float t19 = t2*z.y*z.z;\n    float t20 = t8*z.x;\n    float t24 = z.z*z.z;\n    return mat3( t1 + t2*t3, t7 - t9, t11 + t12, t7 + t9, t1 + t2*t15, t19 - t20, t11 - t12, t19 + t20, t1 + t2*t24);\n\n}\n\nmat3 quaternion(vec3 v, float an){\n\n    vec3 z = normalize(v);\n    \n    float a = cos(an/2.0);\n    float s = sin(an/2.0);\n    float b = s*z.x;\n    float c = s*z.y;\n    float d = s*z.z;\n    float a2 = a*a;\n    float b2 = b*b;\n    float c2 = c*c;\n    float d2 = d*d;\n    float _2ab = 2.*a*b;\n    float _2ac = 2.*a*c;\n    float _2ad = 2.*a*d;\n    float _2bc = 2.*b*c;\n    float _2bd = 2.*b*d;\n    float _2cd = 2.*c*d;\n    \n    return mat3(a2+b2-c2-d2  , _2bc-_2ad, _2ac+_2bd, \n                _2ad+_2bc, a2-b2+c2-d2  , _2cd-_2ab,\n                _2bd-_2ac, _2ab+_2cd, a2-b2-c2+d2);\n\n\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nfloat Box2d(vec2 p, vec2 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nfloat N21(vec2 p){\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x*p.y);\n\n}\n\nfloat sdCyl(vec3 p, float h, float r){\n\n    float x = length(p.xz);\n    float y = p.y;\n      \n    vec2 cd = abs(vec2(x, y)) - vec2(h, r);\n    \n    return length(max(cd, 0.0))+min(max(cd.x,cd.y),0.0);\n\n}\n\nfloat sdCyl2(vec3 p, float h, float r, float r2){\n\n    float x = length(p.xz);\n    float y = p.y;\n    \n    \n      \n    vec2 cd = abs(vec2(x, y)) - vec2(h+(p.y+r2), r);\n    \n    return (length(max(cd, 0.0))+min(max(cd.x,cd.y),0.0))*0.6;\n\n}\n\nfloat sdBox(vec3 p, vec3 sc, float r){\n\n    return  length(max(abs(p)-sc, 0.0)) - r;\n    \n\n}\n\nfloat sdBox2(vec3 p, vec3 sc, vec3 sc2, float r){\n\n    float l = length(max(abs(p)-sc, 0.0)) - r;\n    float l2 = length(max(abs(p)-sc2, 0.0)) - r;\n    return  min(l2, l);\n    \n\n}\n\nfloat sdBox3(vec3 p, vec3 sc, vec3 sc2, float r, float k) {\n\t\n    \n    float l = length(max(abs(p)-(sc+(p.x*sc2)), 0.0)) - r ;\n    \n    return l*k;\n    \n    /*\n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;*/\n    \n    //return e+i;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);\n  p = abs(p);\n  p.xy -=  2.0*min(dot(k.xy, p.xy), 0.0) *k.xy;\n  vec2 d = vec2(length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x), p.z-h.y );\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdfHexa(vec3 p, float h, float r){\n\n    float x = length(p.xz);\n    float y = p.y;\n      \n    vec2 cd = abs(vec2(x, y)) - vec2(clamp(h+p.y-1.0, 0.0, 0.5), r);\n    \n    return (length(max(cd, 0.0))+min(max(cd.x,cd.y),0.0))*0.7;\n    \n\n}\n\nfloat sdfCone(vec3 p, float h, float r){\n\n    float x = length(p.xz);\n    float y = p.y;\n      \n    vec2 cd = abs(vec2(x, y)) - vec2(h+p.y-1.0, r);\n    \n    return (length(max(cd, 0.0))+min(max(cd.x,cd.y),0.0))*0.7;\n    \n\n}\n\nconst mat2 rotate2D = mat2(1.3623, 1.7531, -1.7131, 1.4623);\nvec2 add = vec2(1.0, 0.0);\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n\nfloat Hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat Noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    float res = mix(mix( Hash12(p),          Hash12(p + add.xy),f.x),\n                    mix( Hash12(p + add.yx), Hash12(p + add.xx),f.x),f.y);\n    return res;\n}\n\nfloat TerrainRM(in vec2 p){\n\n    vec2 q = p * 0.05;\n    float w = Noise(q);\n    w = 5.*w;\n    float f = 0.0;\n    for(int i = 0;i < 5;i++){\n        f += w * Noise(q*0.85);\n        w = -w * 0.4;\n        q = rotate2D * q;\n    \n    }\n    \n    float ff = Noise(q * 0.002);\n    f += ff*20.;//-80.0;\n   \n    return f;\n\n\n}\n\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\n\n\nfloat _line(vec2 p, vec2 a, vec2 b){\n\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\nvec3 Line(vec2 p, vec2 a, vec2 b, float l1, float l2){\n\n    float d = _line(p, a, b);\n    float m = smoothstep(l1, l2, d);\n    return vec3(m); \n\n}\n\nfloat _line3(vec3 p, vec3 a, vec3 b){\n\n    vec3 pa = p-a;\n    vec3 ba = b-a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\nvec3 Line3(vec3 p, vec3 a, vec3 b, float l1, float l2){\n\n    float d = _line3(p, a, b);\n    float m = smoothstep(l1, l2, d);\n    return vec3(m); \n\n}","name":"Common","description":"","type":"common"}]}