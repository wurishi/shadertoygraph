{"ver":"0.1","info":{"id":"4f2BWz","date":"1724808809","viewed":44,"name":"Wiggly Ray-Marched Tetrahedron","username":"4LT","description":"Wheee!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["ray","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float camSpeed = 0.006;\nconst float wiggleSpeed = 2.;\nconst float tau = 2.0 * acos(-1.0);\nconst float f = 0.8;\nconst float camDist = 12.;\nconst vec3 org = vec3(0.);\n\nstruct Hit {\n    vec3 normal;\n    bool hit;\n    bool nearEdge;\n};\n\nstruct Samp {\n    float dist;\n    int idx;\n    int nearCount;\n};\n\nconst vec3 pts[4] = vec3[] (\n    vec3(0.,-1.,-0.),\n    vec3(-1.,1.,0.5),\n    vec3(1.,1.,0.5),\n    vec3(0.,1.,-1.5)\n);\n\nSamp sdf(vec3 inp, vec3 ctr) {    \n    vec3 c2i = inp - ctr;\n    Samp samp;\n    samp.dist = -9999.;\n    samp.idx = 0;\n    samp.nearCount = 0;\n    \n    for (int i = 0; i < 4; i++) {\n        vec3 c2p = pts[i] - ctr;\n        float d = dot(c2p, c2i)/(length(c2p)) - length(c2p);\n        if (d > -0.4) {\n            samp.nearCount++;\n        }\n        if (d > samp.dist) {\n            samp.dist = d;\n            samp.idx = i;\n        }\n    }\n    \n    return samp;\n}\n\nHit march(vec3 rayOrg, vec3 rayDir, vec3 ctr) {    \n    float travel = 0.;\n    float oldD = 9999.;\n    Samp samp = sdf(rayOrg, ctr);\n    Hit h;\n    h.hit = false;\n    \n    while (samp.dist < oldD) {\n        oldD = samp.dist;\n        travel+= samp.dist;\n        samp = sdf(travel * rayDir + rayOrg, ctr);\n        \n        if (samp.dist < .001) {\n            h.normal = normalize(pts[samp.idx] - ctr);\n            h.hit = dot(rayDir, h.normal) < 0.;\n            h.nearEdge = samp.nearCount > 1;\n            break;\n        }\n    }\n    \n    return h;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n    float w = 2.0;\n    float h = w / aspect;\n    \n    float theta = tau * camSpeed * iTime;\n    float phi = tau * wiggleSpeed * iTime;\n    vec3 ctr = vec3(sin(phi), sin(phi * 1.3), cos(phi))*0.03;\n\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * vec2(w, h) - vec2(w/2.0, h/2.0);\n\n    vec3 cam = vec3(sin(theta), sin(theta * 3.0), cos(theta));\n    cam = normalize(cam) * camDist;\n\n    vec3 lookAt = normalize(org - cam);\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 right = normalize(cross(lookAt, up));\n    up = normalize(cross(right, lookAt));\n    \n    vec3 rayDir = normalize(lookAt * f + right * uv.x + up * uv.y);\n    Hit hit = march(cam, rayDir, ctr);\n    \n    vec3 col = !hit.hit ? textureLod(iChannel0, rayDir, 0.).xyz\n        : textureLod(iChannel0, reflect(rayDir, hit.normal), 0.).xyz * (hit.nearEdge ? vec3(0.6, 1.2, 0.6) : vec3(1., 1., 1.));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}