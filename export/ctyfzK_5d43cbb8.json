{"ver":"0.1","info":{"id":"ctyfzK","date":"1702254719","viewed":55,"name":"â€» Neon Hex Pulse","username":"lewvrob","description":"First shader!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 palette( in float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 0.7, 0.4);\n    vec3 d = vec3(1.176, 0.492, 2.616);\n    \n    // experimenting with tweaking colors\n    d = vec3(0.00, 0.10, 0.20);\n    d = vec3(0.00, 0.15, 0.20);\n\n    return a + b * cos( 6.28318 *(c*t+d) );\n}\n\n#define rotate(a) mat2( cos(a),-sin(a),sin(a),cos(a) )\nvec2 rotateCoords(in vec2 pos, in float angle) {\n    return rotate(angle) * pos;\n}\n\n// SDF of a hexagon - adapted from https://iquilezles.org/articles/distfunctions2d\nfloat sdHexagon( in vec2 p, in float r, in float angle ) {\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    \n    // rotate the coordinates\n    p = rotateCoords(p, angle);\n    \n    // draw the shape\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    \n    return length(p)*sign(p.y);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoords) {\n    // normalize and center coordinates\n    vec2 uv = (fragCoords.xy * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // copy the initial coords for later\n    vec2 uv0 = uv;\n    \n    // copy of iTime for debugging\n    float t = iTime;\n    \n    // setup output color\n    vec3 finalColor = vec3(0.0);\n    \n    // scale the canvas\n    uv = uv * 2.;\n    \n    // slowly rotate the uvs\n    uv = rotateCoords(uv, -t * 0.1);\n    \n\n    for (float i = 0.; i < 4.; i++) {\n        // split and distort\n        uv = fract(sin(uv * 1.33)) - 0.5;\n    \n        // setup the hexagon shape and rotate it over time\n        float d = sdHexagon(uv, 1., cos(t * 1.5));\n        \n        // algin with initial uvs\n        d *= abs(-length(uv0));\n        \n        // get color from palette\n        vec3 col = palette(length(uv0));\n\n        // scale the shape with sin of time (pulse effect)\n        d = sin(d * 1.5 + t);\n        \n        // add glow effect\n        d = abs(d * .5);\n\n        // produce outline\n        d = pow(0.01 / d, 1.05);\n\n        // colorize the result\n        vec3 coloredResult = col * d;\n        \n        // add to final color\n        finalColor += coloredResult;\n    }\n    \n    fragColor = vec4(finalColor,1.0);\n}\n","name":"Image","description":"","type":"image"}]}