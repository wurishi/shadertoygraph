{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nconst int MaxIter = 16;\nconst int maxSteps =256;\nfloat preci;//0.001;//\nfloat zoom=1.;\nfloat flapTime;\n\n// Complex operations\n\nvec2 cmul( vec2 a, vec2 b )  { return vec2( a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x ); }\nvec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\nvec2 conj( vec2 z ) { return vec2(z.x,-z.y); }\n\n// Exotic multiplication\n\nvec4 dmul( vec4 a, vec4 b )  {\n    float r = length(a);    \n    b.xy=cmul(normalize(a.xy), b.xy);\n    b.xz=cmul(normalize(a.xz), b.xz);\n    b.zw=cmul(normalize(a.zw), b.zw);\n    return r*b;\n}\n\n// Distance estimation for fractal\n\nfloat de( vec3 p)\n{\t\n    float dr = 1.;\t\n    p*=dr;\n    float r2;\n    vec4 z = vec4(-p.yzx,0.); \n    dr=dr/length(z);\n    if(z.z>-0.5)z.x+=.4*flapTime*abs(z.y)*(z.z+.5);  \n    dr=dr*length(z);      \n    vec4 c= z;\n\tfor( int i=0; i<MaxIter;i++ )\n\t{                           \n\t\tr2 = dot(z,z);\n\t\tif(r2>100.)continue;\n\t\tdr=2.*sqrt(r2)*dr+1.0;\t\t\t\n\t\tz=dmul(z,z)+c; \t\t\t\t\n\t}\n    return .5*length(z)*log(length(z))/dr;\t    \t\n}\n\n    \n// Orbit trapping for fractal\n    \nvec4 map(in vec3 p)\n{\n    float dr = 1.0;\n    vec4 ot = vec4(1000.0);        \n    float r2;\n    vec4 z = vec4(-p.yzx,0.);\n    if(z.z>-0.5)z.x+=.4*flapTime*abs(z.y)*(z.z+.5);         \n    vec4 c= z;\n    for( int i=0; i<MaxIter;i++ )\n\t{            \n\t\tr2 = dot(z,z);\n\t\tif(r2>100.)continue;\t\t\n\t\tot = min( ot, vec4(abs(z.xyz),r2) );       \n\t\tdr=2.*sqrt(r2)*dr+1.0;\t\t\t\n\t\tz=dmul(z,z)+c;    \t\t\t\t\t\t\n\t}\t\t    \n    return ot;\t\n}\n\nfloat field(in vec3 p) {\n\t\n\tfloat res = 0.;\n\tvec4 z = vec4(-p.yzx,0.);\n    if(z.z>-0.5)z.x+=.4*flapTime*abs(z.y)*(z.z+.5);   \n    vec4 c = z;\n\tfor (int i = 0; i < 10; ++i) {\n\t\t\n        \n        z=dmul(z,z)+c;\n\t\tres += 2.*exp(-3. * abs(dot(z,c)));\n\t\t\n\t}\n\treturn res/4.;\n}\n\n\n\nvec3 raycast( in vec3 ro, vec3 rd, vec2 tminmax   )\n{\n    float t = tminmax.x;\n    float dt = .07;\n    vec3 col= vec3(0.);\n    for( int i=0; i<32; i++ )\n\t{\n        \n        float c = field(ro+t*rd);               \n        t-=dt;\n        c = max(5.0 * c - .9, 0.0);\n        col = .95*col+ .08*vec3(0.5*c*c*c, .6*c*c, c);\n\t\t\n    }\n    \n    return col;\n}\n\n\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3  delta = vec3(.0001,0.0,0.0);\n    vec3 nor;   \n    nor.x = de(pos+delta.xyy) - de(pos-delta.xyy);\n    nor.y = de(pos+delta.yxy) - de(pos-delta.yxy);\n    nor.z = de(pos+delta.yyx) - de(pos-delta.yyx);   \n    return normalize(nor);\n}\n\n\nfloat march( in vec3 ro, in vec3 rd , in vec2 tminmax )\n{\t\n\tfloat t = tminmax.x,pd=10.0,os=0.0,step;\n   \tfloat dt = 1.;   \n\tfor(int i=0; i<maxSteps; i++)\n\t{\t\t\n            if( t>tminmax.y || dt<=preci*t ) continue;\n            vec3 pos = ro + t*rd;\t\t\t\t\n            dt = de(pos);                \n            t += dt;                    \t\t\n\t}\n   \tif(t>tminmax.y||dt>preci*t*1.)return-1.;     \n\treturn t;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    preci =  .5/min(iResolution.x,iResolution.y);//0.001;//\n    flapTime = cos(iTime);\n\n    vec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    float an = 2.0 + 0.05*iTime - mo.x+180.;\n    \n    vec3  light1 = vec3(  0.577, 0.577, -0.577 );\n    vec3  light2 = vec3( -0.707, 0.000,  0.707 );\n\n    vec3 ro = zoom*1.7*vec3(sin(an),0.+0.8*cos(1.3*an+mo.y), cos(an));\n    vec3 ta = vec3(cos(an),0.0, sin(an));\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize( cross( vec3(0.0,1.0,0.0), ww ) );\n    vec3 vv = normalize( cross(ww,uu) );\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.0*ww );\n\n    vec3 col = vec3(0.05);\n    float t;\n    vec2 seg= vec2(0.,30.);;\n\n      \n    t = march( ro, rd, seg );\n    seg = vec2(2.,t);\n    vec3 col2 = vec3(0.);\n    if(t<0.)col2 = raycast(ro,rd, seg);\n    if(t>=0.){\n \n\t\t\n        vec3 pos = ro+ t* rd;\n        vec4 res = map( pos);\n\t\tvec3 col1 =clamp(res.xyz,0.,1.);\n\t\tcol1=.5*(col1+col1.brg);\n\t\tcol1.g+=col1.r;              \n\t\tvec3 nor = calcNormal( pos);\n  \n\n        // lighting\n        \n\t\tfloat key = clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat bac = clamp( 0.2 + 0.8*dot( light2, nor), 0.0, 1.0 );\n\t\tfloat amb = (0.7+0.3*nor.y);\n\t\tfloat ao = pow( clamp(res.a*2.0,0.2,1.0), 2.2 );\t\t\n        vec3 brdf = vec3(ao)*(.4*amb+1.5*key+.2*bac);\n        \n        col = col1*brdf;\n\t    \n        }       \n    col = pow( col, vec3(0.4) ) * 1.2+col2*.4;\n    col *= sqrt( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y) );\n\t    \n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtX3z4","date":"1419102612","viewed":205,"name":"Green dragon","username":"guil","description":"While experimenting with quadruplex multiplication, I met this strange creature.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","fractal","dragon"],"hasliked":0,"parentid":"","parentname":""}}