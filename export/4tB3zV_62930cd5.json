{"ver":"0.1","info":{"id":"4tB3zV","date":"1431550054","viewed":7985,"name":"Promethean","username":"nimitz","description":"Trying to get interesting stateless partilcle-like systems.\n\nWipe Up/Down = frequency","likes":130,"published":1,"flags":0,"usePreview":1,"tags":["3d","noise","flame","volumetric","animated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"// Promethean by nimitz (twitter: @stormoid)\n// https://www.shadertoy.com/view/4tB3zV\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n//More \"Spark-ish\" look\n//#define SPARKS\n\n#ifdef SPARKS\n\t#define PALETTE vec3(0.0,.2,1.5)\n#else\n\t#define PALETTE vec3(1.2,0.,.0)\n#endif\n\n\n#define HIGH_QUALITY\n\n#ifdef HIGH_QUALITY\n#define STEPS 90\n#define ALPHA_WEIGHT 0.022\n#define BASE_STEP 0.055\n#else\n#define STEPS 45\n#define ALPHA_WEIGHT 0.044\n#define BASE_STEP 0.11\n#endif\n\n#define time iTime\nvec2 mo;\nvec2 rot(in vec2 p, in float a){float c = cos(a), s = sin(a);return p*mat2(c,s,-s,c);}\nfloat hash21(in vec2 n){ return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453); }\nfloat noise(in vec3 p)\n{\n\tvec3 ip = floor(p), fp = fract(p);\n    fp = fp*fp*(3.0 - 2.0*fp); //Cubic smoothing\n\tvec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;\n\tvec2 rz = textureLod( iChannel0, (tap + 0.5)/256.0, 0.0 ).yx;\n\treturn mix(rz.x, rz.y, fp.z);\n}\n\nfloat fbm(in vec3 p)\n{\n    p *= 2.5 + mo.y*2.;\n    float rz = 0., z = 1.;\n    for(int i=0;i<4;i++)\n    {\n        float n = noise(p + time*.5);\n        rz += (sin(n*4.3)*1.-.45)*z;\n        z *= .47;\n        p *= 3.;\n    }\n    return rz;\n}\n\nfloat dsph(in vec3 p)\n{\n    float r = dot(p,p);\n    vec2 sph = vec2(acos(p.y/r), atan(p.x, p.z));\n    r += sin(sph.y*2.+sin(sph.x*2.)*5.)*0.8;\n    return r;\n}\n\nvec4 map(in vec3 p)\n{\n    float dtp = dsph(p); //Inversion basis is a deformed sphere\n\tp = .7*p/(dtp + .1);\n    p.xz = rot(p.xz, p.y*2.);\n    #ifdef SPARKS\n    p = 6.*p/(dtp - 6.);\n    p = 7.5*p/(dtp + 7.);\n    float r = clamp(fbm(p)*1.5-exp2(dtp*0.7-2.73), 0., 1.);\n    vec4 col = vec4(1.)*r*r;\n    #else\n    p = 6.*p/(dtp - 5.4);\n    p = 7.*p/(dtp + 6.);\n    float r = clamp(fbm(p)*1.5-exp2(dtp*0.7-2.75), 0., 1.);\n    vec4 col = vec4(1.)*r;\n    #endif\n    vec3 lv = mix(p,vec3(.25),1.25);\n    float grd =  clamp((col.w - fbm(p+lv*.045))*4.5, 0.01, 2. );\n    col.rgb *= grd*vec3(.9, 1., .43) + vec3(.05,0.1,0.0);\n    col.a *= clamp(dtp*0.5-.14,0.,1.)*0.7 + 0.3;\n    \n    return col;\n}\n\nvec4 vmarch(in vec3 ro, in vec3 rd)\n{\n\tvec4 rz = vec4(0);\n\tfloat t = 2.4;\n    t += 0.03*hash21(gl_FragCoord.xy);\n\tfor(int i=0; i<STEPS; i++)\n\t{\n\t\tif(rz.a > 0.99 || t > 6.)break;\n\n\t\tvec3 pos = ro + t*rd;\n        vec4 col = map(pos);\n        float den = col.a;\n        col.a *= ALPHA_WEIGHT;\n\t\tcol.rgb *= col.a*1.4;\n\t\trz = rz + col*(1. - rz.a);   \n        t += BASE_STEP-den*BASE_STEP;\n\t}\n    \n    rz.rgb += PALETTE*rz.w;\n    return rz;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p = fragCoord.xy/iResolution.xy*2. - 1.;\n\tp.x *= iResolution.x/iResolution.y*0.95;\n\tmo = 2.0*iMouse.xy/iResolution.xy;\n    mo = (mo==vec2(.0))?mo=vec2(0.5,2.):mo;\n    mo.x += time*0.01;\n\t\n\tvec3 ro = 4.0*normalize(vec3(cos(2.75-3.0*mo.x), sin(time*0.22)*0.2, sin(2.75-3.0*mo.x)));\n\tvec3 eye = normalize(vec3(0) - ro);\n\tvec3 rgt = normalize(cross(vec3(0,1,0), eye));\n\tvec3 up = cross(eye,rgt);\n\tvec3 rd = normalize(p.x*rgt + p.y*up + 2.3*eye);\n\t\n\tvec4 col = vmarch(ro, rd);\n    fragColor = vec4(col.rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}