{"ver":"0.1","info":{"id":"7ty3zG","date":"1637880316","viewed":421,"name":"connected components in truchets","username":"FabriceNeyret2","description":"Find the connected component.  \nMight be accelerated by using a table of equivalent values rather than directly propagating.\n\nclick to restart a new truchet tiling.  Scale N in Common (try 80) .\n\"infinite\" tiling: comment BuffA:17 & set 1.*Time in Image:5","likes":29,"published":3,"flags":32,"usePreview":0,"tags":["flood","short","connected","truchets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define hue(v)  vec4( .6 + .6 * cos( .5+(v)  + vec3(0,23,21)  ) , 1 )\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = N * u / R.y + 0.*iTime, I = floor(U), F = fract(U);\n         \n    O = T(I);                                          // cell states \n    O.w > 0. ? F = vec2(1.-F.y,F.x) : F;\n    \n    O =   smoothstep(N*1.5/R.y,0.,abs(min(length(F),length(1.-F))-.5) - .1 ) // truchet drawing\n        * hue( O[ F.x+F.y < 1. ? 1 : 2 ] );            // coloring\n         \n // if (iMouse.z>0.) O += (1.-O.w)*.3*mod(I.x+I.y,2.); // debug: draw tiles\n // O += .3*T(I).w;\n} ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define H(p)  mod(p.x+p.y,2.)\n  #define H(p)  fract(sin(dot(p, vec2(12.9898, 78.233))-iTime) * 43758.5453)\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    if ( iFrame < 1 || iMouse.z>0.) {         // --- init: create truchet\n        vec2 I = u-.5;                        // store truchet data\n        O.w = step(.5,H(I));                  // random axis\n     // if (u.x > N*R.x/R.y || u.y > N) { O.yz = vec2(0); return; }\n        O.y = 1.+I.x+4096.*I.y;               // id of tile segment #1\n        O.z = -O.y;                           // id of tile segment #2\n        return;\n    }\n    \n    u -= .5;\n    O = T(u);                                 // previous state\n    if (u.x > N*R.x/R.y || u.y > N) return;   // propagate only visible tiles\n    \n                                              // --- propagate id along connections\n#define left(T)    T.y\n#define right(T)   T.z\n#define bot(T)   ( T.w<1. ? T.y : T.z )\n#define top(T)   ( T.w<1. ? T.z : T.y )\n    if (O.w<1.) { // tile contains:  \\     new id = min(connections)\n        O.y = min( O.y, min( right(T(u-vec2(1,0))), top(T(u-vec2(0,1))) ));\n        O.z = min( O.z, min( left (T(u+vec2(1,0))), bot(T(u+vec2(0,1))) ));\n    }\n    else {        // tile contains:  /     new id = min(connections)\n        O.y = min( O.y, min( right(T(u-vec2(1,0))), bot(T(u+vec2(0,1))) ));\n        O.z = min( O.z, min( left (T(u+vec2(1,0))), top(T(u-vec2(0,1))) ));\n    }\n} ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float N = 30.; // vertical number of tiles\n\n#define R    iResolution.xy\n#define T(U) texelFetch( iChannel0, ivec2(U), 0 )","name":"Common","description":"","type":"common"}]}