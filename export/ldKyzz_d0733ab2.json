{"ver":"0.1","info":{"id":"ldKyzz","date":"1520906911","viewed":110,"name":"Letter A","username":"GuntherRox","description":"bored, practice with lines","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["a"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RADIUS 0.12\n\nfloat dist_to_line(vec2 p1, vec2 p2, vec2 uv)\n{\n\tfloat a = abs(distance(p1, uv));\n\tfloat b = abs(distance(p2, uv));\n\tfloat c = abs(distance(p1, p2));\n\n\tfloat d = sqrt(c*c + RADIUS*RADIUS);\n\n\tif (a >= d || b >= d)\t{\n        float dist1 = distance(p1, uv);\n        float dist2 = distance(p2, uv);\n        return min(dist1,dist2);\n\t}\n\n\tfloat p = (a + b + c) * 0.5;\n\n\tfloat h = 2.0 / c * sqrt( p * ( p - a) * ( p - b) * ( p - c));\n    return h;\n}\n\nfloat falloff(float dist)\n{\n    if (dist > RADIUS) {\n        return 0.0;\n    } else {\n        return (RADIUS-dist)*5.0;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y / iResolution.x;\n    uv.x /= aspect;\n \tvec2 p1 = vec2(0.4/aspect, 0.6);\n \tvec2 p2 = vec2(0.7/aspect, 0.1);\n \tvec2 p3 = vec2(0.2/aspect, 0.3);\n    vec2 p4 = vec2(0.1/aspect, 0.1);\n    vec2 p5 = vec2(0.6/aspect, 0.3);\n    \n    float dist1 = dist_to_line(p1, p2, uv);\n    //float dist2 = dist_to_line(p2, p3, uv);\n    float dist3 = dist_to_line(p1, p4, uv);\n    float dist4 = dist_to_line(p3, p5, uv);\n    \n    float i1 = falloff(dist1);\n    //float i2 = falloff(dist2);\n    float i3 = falloff(dist3);\n    float i4 = falloff(dist4);\n    \n    float s = sin(iTime) * 0.5 + 0.5;    \n \tfragColor = vec4(i1*(1.2-s), s*i3, i4, i3);\n}\n","name":"Image","description":"","type":"image"}]}