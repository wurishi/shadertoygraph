{"ver":"0.1","info":{"id":"mlKBz1","date":"1701944742","viewed":16,"name":"D4 - Outline shader","username":"SilverFox","description":"Advent of shader code\nOutline Shader: Create a rectangle outline effect","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["outlineshader","aoc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// squareBound method, determine if pixel is in boundaries of square\nbool squareBound(vec2 pixelCoord, vec2 centerOfSquare, float squareSize)\n{\n    // distance used as square bound\n    // used abs allow calculation even for negative values of axes\n    float distanceX = abs(pixelCoord.x - centerOfSquare.x);\n    float distanceY = abs(pixelCoord.y - centerOfSquare.y);\n    \n    // bound calculation\n    return (distanceX < squareSize) && (distanceY < squareSize);\n}\n\n// squareOutline method, determine if pixel is in outline bounderies on top of squareBound calculation principle\nbool squareOutline(vec2 pixelCoord, vec2 centerOfSquare, float squareSize, float outlineThickness) \n{\n    float distanceX = abs(pixelCoord.x - centerOfSquare.x);\n    float distanceY = abs(pixelCoord.y - centerOfSquare.y);\n    \n    // Check if we are in the outline region\n    bool inOuterSquareX = (distanceX < squareSize + outlineThickness);\n    bool inOuterSquareY = (distanceY < squareSize + outlineThickness);\n    \n    bool inOuterSquare = inOuterSquareX && inOuterSquareY;\n    bool inInnerSquare = (distanceX < squareSize) && (distanceY < squareSize);\n    \n    return inOuterSquare && !inInnerSquare;\n}\n\n// drawSquareWithOutline method, calculate square, squareOutline and make draw\nvec3 drawSquareWithOutline(vec2 pixelCoord, vec2 centerOfSquare, float squareSize, float outlineThickness)\n{\n    bool square = squareBound(pixelCoord, centerOfSquare, squareSize);\n    bool squareOutline = squareOutline(pixelCoord, centerOfSquare, squareSize, outlineThickness);\n    \n    vec3 squareMaskColor = vec3(0.0);\n    if (square) \n    {\n        squareMaskColor = vec3(1.0, 0.0, 0.0);\n    } \n    else if (squareOutline) \n    {\n        squareMaskColor = vec3(0.0, 1.0, 0.0);\n    }\n    \n    return squareMaskColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 color = vec3(0.0);\n    float animation = abs(sin(iTime)) * 0.3;\n    color += drawSquareWithOutline(uv, vec2(0.25, 0.25), animation, 0.01);\n    color += drawSquareWithOutline(uv, vec2(0.75, 0.75), animation, 0.01);\n\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}