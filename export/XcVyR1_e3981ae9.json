{"ver":"0.1","info":{"id":"XcVyR1","date":"1731488177","viewed":47,"name":"simple mandelbrot zoom","username":"lukajk1","description":"mandelbrot ","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 squareC(vec2 c) {\n    return vec2(c.x * c.x - c.y * c.y, 2. * c.x * c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - .5 * iResolution.xy) / iResolution.y;\n    // uv spans -1 to 1 for x and -.5 to .5 for y\n    \n    vec2 zoomPoint = vec2(-.55,.55);\n    float scalar = 1./pow(2., iTime);\n    vec2 coordsC = uv * scalar;\n    coordsC += zoomPoint;\n    \n    vec2 num = vec2(0.);\n    float totalIterations = 100.;\n    float escapeRadiusSquared = 4.;\n\n    float i;\n    for (i = 0.; i < totalIterations; i++) {\n        num = squareC(num) + coordsC;\n        if (dot(num, num) > escapeRadiusSquared) break;\n    }\n\n    vec3 col = vec3(.6, smoothstep(1., 0., i/totalIterations), 1.);\n    //if (abs(coordsC.y) < .002) {col = vec3(1.,0,0);}\n    //if (abs(coordsC.x) < .002) {col = vec3(1.,0,0);}\n    //checking x and y axes for fun\n    \n    //if (length(coordsC-zoomPoint)<.02) {col = vec3(1.,0,0);}\n    //for placing the zoom point\n    \n    fragColor = vec4(col, 1.);\n}\n","name":"Image","description":"","type":"image"}]}