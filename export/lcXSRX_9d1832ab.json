{"ver":"0.1","info":{"id":"lcXSRX","date":"1705503629","viewed":93,"name":"Subpixel Layout Comparison","username":"sampajama","description":"This is the subpixel layout of a few different displays i could find on the Internet. The order goes: iPhone X, Switch OLED, LCD.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["example","iphone","subpixel","oled"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float t = uv.x;\n    t += texture(iChannel3, fragCoord / 1024.0).r * 0.001;\n    t = fract(t);\n    \n    if (t < 0.333333333) {\n        fragColor = texture(iChannel0, uv);\n    } else if (t < 0.666666666) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = texture(iChannel2, uv);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// IPHONE X Subpixel Layout\n\nconst float P = 8.0;\n\nconst vec2 R_SIZE = vec2(0.51);\nconst vec2 G_SIZE = vec2(0.58, 0.34);\nconst vec2 B_SIZE = vec2(0.78);\n\nconst mat2x2 TRANSFORM = getRotation(45.0) / SCALE;\nconst mat2x2 TRANSFORM_INV = inverse(TRANSFORM);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = TRANSFORM * fragCoord;\n    vec2 pxy = 4.0 * fract(xy);\n    \n    vec3 pixel_dists = vec3(\n        getDist(pxy, vec2(1.0, 1.0), R_SIZE, P),\n        max(\n            getDist(pxy, vec2(3.0, 1.0), G_SIZE.xy, P),\n            getDist(pxy, vec2(1.0, 3.0), G_SIZE.yx, P)\n        ),\n        getDist(pxy, vec2(3.0, 3.0), B_SIZE, P)\n    );\n    \n    fragColor = vec4(0.5 * SCALE * pixel_dists + 0.5, 1.0);\n    fragColor = clamp(fragColor, vec4(0.0), getCorrection(R_SIZE, G_SIZE * vec2(2.0, 1.0), B_SIZE));\n    \n    xy = floor(2.0 * xy) / 2.0;\n    xy = TRANSFORM_INV * xy + 0.5;\n    fragColor = projectColor(fragColor, texture(iChannel0, xy / iResolution.xy));\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float SCALE = 20.0;\n\nfloat getDist(vec2 a, vec2 b, vec2 s, float p) {\n    return 0.5 * (1.0 - pow(\n            pow(abs(a.x - b.x) / s.x, p * s.x) + \n            pow(abs(a.y - b.y) / s.y, p * s.y), 1.0 / (p * max(s.x, s.y))));\n}\n\nvec4 getCorrection(vec2 rSize, vec2 gSize, vec2 bSize) {\n    float rA = rSize.x * rSize.y;\n    float gA = gSize.x * gSize.y;\n    float bA = bSize.x * bSize.y;\n    \n    float s = min(rA, min(gA, bA));\n    \n    vec4 o = vec4(s / rA, s / gA, s / bA, 1.0);\n    vec3 k = vec3(0.299, 0.587, 0.114) * o.rgb;\n    return pow(o / (k.x + k.y + k.z), vec4(1.0 / 2.4));\n}\n\nvec4 projectColor(vec4 base, vec4 color) {\n    float l = length(base.rgb);\n    float d = dot(base.rgb, color.rgb);\n    return vec4(base.rgb * d / l, base.a);\n}\n\nconst float PI = 3.14159265358979323;\n\n#define TO_RAD(deg) (PI * (deg) / 180.0)\n#define getRotation(deg) mat2x2(cos(TO_RAD(deg)), -sin(TO_RAD(deg)), sin(TO_RAD(deg)),  cos(TO_RAD(deg)))\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// SWITCH OLED Subpixel Layout\n\nconst float P = 32.0;\n\nconst vec2 R_SIZE = 0.5 * vec2(6.5,  3.5) / 16.0;\nconst vec2 G_SIZE = 0.5 * vec2(6.5,  8.5) / 16.0;\nconst vec2 B_SIZE = 0.5 * vec2(5.5, 12.0) / 16.0;\n\nconst vec2 OFFSET = vec2(1.5, 1.0) / 16.0;\nconst vec2 R_POS = OFFSET + vec2(3.25, 1.75) / 16.0;\nconst vec2 G_POS = OFFSET + vec2(3.25, 10.0) / 16.0;\nconst vec2 B_POS = OFFSET + vec2(11.5, 6.00) / 16.0;\n\nconst mat2x2 TRANSFORM = getRotation(0.0) / SCALE;\nconst mat2x2 TRANSFORM_INV = inverse(TRANSFORM);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = TRANSFORM * fragCoord;\n    vec2 pxy = 2.0 * fract(xy / 2.0);\n    \n    vec3 pixel_dists = vec3(\n        max(\n            max(\n                getDist(pxy, R_POS + vec2(0.0, 0.0), R_SIZE, P),\n                getDist(pxy, R_POS + vec2(1.0, 0.0), R_SIZE, P)\n            ),\n            max(\n                getDist(pxy, R_POS + vec2(0.0, 1.0), R_SIZE, P),\n                getDist(pxy, R_POS + vec2(1.0, 1.0), R_SIZE, P)\n            )\n        ),\n        max(\n            max(\n                getDist(pxy, G_POS + vec2(0.0, 0.0), G_SIZE, P),\n                getDist(pxy, G_POS + vec2(1.0, 0.0), G_SIZE, P)\n            ),\n            max(\n                getDist(pxy, G_POS + vec2(0.0, 1.0), G_SIZE, P),\n                getDist(pxy, G_POS + vec2(1.0, 1.0), G_SIZE, P)\n            )\n        ),\n        max(\n            max(\n                getDist(pxy, B_POS + vec2(0.0, 0.0 + 2.3 / 16.0), B_SIZE, P),\n                getDist(pxy, B_POS + vec2(1.0, 0.0 + 0.0 / 16.0), B_SIZE, P)\n            ),\n            max(\n                getDist(pxy, B_POS + vec2(0.0, 1.0 + 0.0 / 16.0), B_SIZE, P),\n                getDist(pxy, B_POS + vec2(1.0, 1.0 + 2.3 / 16.0), B_SIZE, P)\n            )\n        )\n    );\n    \n    fragColor = vec4(0.5 * SCALE * pixel_dists + 0.5, 1.0);\n    fragColor = clamp(fragColor, vec4(0.0), getCorrection(R_SIZE, G_SIZE, B_SIZE));\n    \n    xy = floor(xy);\n    \n    vec2 fxy = fract(xy - OFFSET);\n    /**/ if (fxy.x > 7.0 / 16.0) xy += B_POS + vec2(0.0, 2.3 / 32.0);\n    else if (fxy.y < 4.0 / 16.0) xy += R_POS;\n    else xy += G_POS;\n    \n    xy = TRANSFORM_INV * xy;\n    fragColor = projectColor(fragColor, texture(iChannel0, xy / iResolution.xy));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// LCD Subpixel Layout\n\nconst float P = 24.0;\n\nconst float LCD_WIDTH = 0.7;\nconst float LCD_HEIGHT = 0.8;\n\nconst vec2 SIZE = vec2(LCD_WIDTH, LCD_HEIGHT);\n\nconst mat2x2 TRANSFORM = getRotation(0.0) / SCALE;\nconst mat2x2 TRANSFORM_INV = inverse(TRANSFORM);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = TRANSFORM * fragCoord;\n    vec2 pxy = vec2(6.0, 2.0) * fract(xy);\n    \n    vec3 pixel_dists = vec3(\n        getDist(pxy, vec2(1.0, 1.0), SIZE, P),\n        getDist(pxy, vec2(3.0, 1.0), SIZE, P),\n        getDist(pxy, vec2(5.0, 1.0), SIZE, P)\n    );\n    \n    fragColor = vec4(0.5 * SCALE * pixel_dists + 0.5, 1.0);\n    fragColor = clamp(fragColor, vec4(0.0), getCorrection(SIZE, SIZE, SIZE));\n    \n    xy = floor(xy * vec2(3.0, 1.0)) / vec2(3.0, 1.0) + 0.5;\n    xy = TRANSFORM_INV * xy;\n    fragColor = projectColor(fragColor, texture(iChannel0, xy / iResolution.xy));\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float t = fract((55.0 * uv.x + 89.0 * uv.y) / 360.0 - iTime / 48.0);\n    if (t < 0.2) {\n        fragColor = texture(iChannel0, uv);\n    } else if (t < 0.4) {\n        fragColor = texture(iChannel1, uv);\n    } else if (t < 0.6) {\n        fragColor = texture(iChannel2, uv);\n    } else if (t < 0.8) {\n        fragColor = texture(iChannel3, uv);\n    } else {\n        fragColor = vec4(\n            sin(2.0 * PI * (uv.x + 0.0 / 3.0) + iTime) * 0.5 + 0.5,\n            sin(2.0 * PI * (uv.x + 1.0 / 3.0) + iTime) * 0.5 + 0.5,\n            sin(2.0 * PI * (uv.x + 2.0 / 3.0) + iTime) * 0.5 + 0.5,\n            1.0\n        );\n    }\n}","name":"Buffer D","description":"","type":"buffer"}]}