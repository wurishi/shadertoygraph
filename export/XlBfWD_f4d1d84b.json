{"ver":"0.1","info":{"id":"XlBfWD","date":"1515720343","viewed":126,"name":"Incessant eye","username":"Brendan","description":"The incessant eye sees all and knows all!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//There's alot of room for optimization here but it seems to\n//run fine on my laptop. So I might not bother.\n\n//noise and rand2 function from thebookofshaders.com\nfloat rand2 (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\nfloat rand1(float i){\n\treturn abs(fract(sin(i)*1000.0));\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = rand2(i);\n    float b = rand2(i + vec2(1.0, 0.0));\n    float c = rand2(i + vec2(0.0, 1.0));\n    float d = rand2(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    vec2 u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners porcentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 p){\n\tfloat f = 0.0;\n    f+=0.5*noise(p); p*=2.03;\n    f+=0.25*noise(p); p*=2.03;\n    f+=0.125*noise(p); p*=2.03;\n    f+=0.0625*noise(p); p*=2.03;\n    f+=0.03125*noise(p); p*=2.03;\n    f+=0.015625*noise(p); p*=2.03;\n    f/=0.984325;\n    return f;\n}\n\nmat2 rotate(float p){\n\treturn mat2(\n    \tcos(p),sin(p),\n        -sin(p),cos(p)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv = uv *2.0 -1.0;\n    \n    uv.x*= iResolution.x/iResolution.y;\n    \n    uv*=pow(length(uv),0.5);\n    \n    vec2 p = uv;\n    \n    float i = floor(iTime);\n    float r = fract(iTime);\n    \n    float x = rand1(i);\n    x = mix(rand1(i),rand1(i+1.0),pow(smoothstep(0.,1.,r),4.0))*2.0-1.0;\n    i+=2.0;\n    float y = mix(rand1(i),rand1(i+1.0),pow(smoothstep(0.,1.,r),0.25))*2.0-1.0;\n    //y*=((floor(rand(i+2.)*2.)-0.5)*2.0);\n    \n    vec2 pos = vec2(x,y);\n    pos*= vec2(0.3,0.3);\n    \n    p-=pos;\n    \n    mat2 m=rotate(fbm(p+iTime));\n    \n    p*=m;\n    \n    vec2 v = vec2(atan(p.x,p.y)*4.0,length(p));\n    \n    float n=fbm(v);\n    \n    vec3 fc = vec3(n);\n    \n    fc*=vec3(0.1,0.6,0.8);\n    \n    \n    float f = length(uv);\n    \n    float s = 0.8+(cos(iTime+2.12)*0.03);\n    \n    //white backgound\n    float c=smoothstep(s,s-0.1,f);\n    \n    fc = mix(vec3(1.0,1.0,1.0),fc,c);\n    \n    //pulsating lines-These turn out to look bad!\n    \n    /*vec2 q = vec2(atan(uv.y,uv.x),length(uv));\n    \n    vec3 frc = vec3(1.);\n    \n    float d = fract(length(uv)+iTime);\n    \n    c = 0.;\n    \n    c=smoothstep(1.0,0.5,d);\n    frc = mix(vec3(0.),frc,c);\n    \n    c=smoothstep(1.0,0.8,d);\n    frc = mix(vec3(1.),frc,c);\n    \n    frc=mix(vec3(1.),frc,sin(q.x*50.0));\n    \n    c=smoothstep(0.8,0.9,q.y);\n    frc = mix(vec3(1.),frc,c);\n    \n    c=smoothstep(1.4,0.9,q.y);\n    frc = mix(vec3(1.),frc,c);\n    \n    fc*=frc;*/\n    \n    //vignette\n    c =smoothstep(5.0,1.2,f);\n    \n    fc = mix(vec3(0.0),fc,c);\n    \n    //pupil\n    f = length(uv-pos);\n    \n    c = smoothstep(0.3,0.4,f);\n    \n    fc = mix(vec3(0.0,0.0,0.0),fc,c);\n    \n    \n\tfragColor = vec4(fc,1.0);\n}","name":"Image","description":"","type":"image"}]}