{"ver":"0.1","info":{"id":"clsyRM","date":"1690528408","viewed":40,"name":"Happy Birthday Pawan!","username":"vsz","description":"Try mousing!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","distance","cylinder"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Happy Birthday https://bhandarkar.me/\n// Inspired by https://www.joshwcomeau.com/\n// Based on https://www.shadertoy.com/view/wdXGDr, which is distributed under the following license\n// The MIT License\n// Copyright Â© 2018 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Cylinder intersection: https://www.shadertoy.com/view/4lcSRn\n// Cylinder bounding box: https://www.shadertoy.com/view/MtcXRf\n// Cylinder distance:     https://www.shadertoy.com/view/wdXGDr\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3  ba = b - a;\n    vec3  pa = p - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    \n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    \n    return sign(d)*sqrt(abs(d))/baba;\n}\n\nfloat map( in vec3 pos, in vec2 base, in vec2 yz )\n{\n    vec3 baseVec = 0.66 * vec3(0.0, base.y, -base.x);\n    vec3 dir = normalize(vec3(0.2,yz.y,-yz.x)) / 40.0;\n    return sdCylinder(pos, baseVec - dir, baseVec + dir, 0.01 );\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos, in vec2 base, in vec2 yz )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps, base, yz ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps, base, yz ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps, base, yz ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps, base, yz ) );\n}\n    \n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\n\nconst uint mask[16] = uint[16](0x03c0u, 0x0c30u, 0x1008u, 0x2004u, 0x4002u, 0x4602u, 0x8965u, 0x8999u, 0x8691u, 0x8461u, 0x4802u, 0x5002u, 0x2004u, 0x1008u, 0x0c30u, 0x03c0u);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n     // camera movement\t\n\tvec3 ro = vec3( 1.0, 0.0, 0.0 );\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n        \n    vec2 mouse = (-iResolution.xy + 2.0 * iMouse.xy) / iResolution.y;\n\n        \n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n        \n        vec2 rbase = round(p * 8.0);\n        ivec2 ibase = ivec2(rbase) + ivec2(7);\n        if (!(all(lessThanEqual(ivec2(0), ibase)) && all(lessThan(ibase, ivec2(16))) && (mask[ibase.y] & (1u << (ibase.x))) != 0u)) {\n                return;\n        }\n        vec2 base = rbase / 8.0;\n        vec2 dif = mouse - base;\n        vec2 dir = dif / (1.0 + 4.0 * (dif.x * dif.x + dif.y * dif.y));\n\n        // create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n        // raymarch\n        const float tmax = 3.0;\n        float t = 0.0;\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos, base, dir);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n\n\n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos, base, dir);\n            float dif = clamp( dot(nor,vec3(0.57703)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n        tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}\n","name":"Image","description":"","type":"image"}]}