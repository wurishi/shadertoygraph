{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"\n\n// ALL TAKEN FROM IQs AMAZING SITE / TUTORIALS / SHADERS:\n// https://iquilezles.org/www/index.htm\n// https://www.shadertoy.com/user/iq\n\n\nconst float MAX_TRACE_DISTANCE = 10.0;           // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 200;\n\n\nvoid buildBasis( in vec3 dir , in vec3 up , out vec3 x , out vec3 y , out vec3 z ){\n    \n\n //vec3( 0. , 1. , 0. );\n  //vec3  upVector = normalize( centerOfCircle );// vec3( 0. , 1. , 0. );\n  float upVectorProj = dot( up , dir );\n  vec3  upVectorPara = upVectorProj * dir;\n  vec3  upVectorPerp = up - upVectorPara;\n\n  vec3 basisX = normalize( upVectorPerp );\n  vec3 basisY = cross( dir , basisX );\n    \n    \n  x = basisX;\n  y = basisY;\n  z = dir;\n    \n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\nfloat hueToRGB( vec3 v ){\n   \n    if(v.z < 0.) v.z += 1.;\n    if(v.z > 1.) v.z -= 1.;\n    if(v.z < 1./6.) return v.x + (v.y - v.x) * 6. * v.z;\n    if(v.z < 1./2.) return v.y;\n    if(v.z < 2./3.) return v.x + (v.y - v.x ) * (2./3. - v.z) * 6.;\n    return v.x;\n    \n}\n\nvec3 hslToRGB( vec3 hsl ){\n    \n    float r, g, b;\n\n    if( hsl.y == 0.){\n        r = g = b = hsl.z; // achromatic\n    }else{\n\n        float q = hsl.z < 0.5 ? hsl.z * (1. + hsl.y) : hsl.z + hsl.y - hsl.z * hsl.y;\n       \tfloat p = 2. * hsl.z - q;\n        \n        r = hueToRGB(vec3( p, q, hsl.x + 1./3. ));\n        g = hueToRGB(vec3( p, q, hsl.x         ));\n        b = hueToRGB(vec3( p, q, hsl.x - 1./3. ));\n    }\n\n    return vec3( r , g , b );\n}\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(3.5*sin(an),2.0,3.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n\nfloat sdPlane( vec3 p )\n{\n    \n    float f = sin( p.z * 5. ) * sin( p.x * 5. );\n    //f = 5. * smoothstep( abs(f) , 0.4 , 0.8 );\n\treturn p.y - (abs( f) * .3)/ max( 1. , pow( length( p ), 1.));\n\n}\n\n\nfloat sdSphere( vec3 p, float s)\n{\n    //p.x += 0.1*sin( 60.0*p.y * p.x * p.z * abs(sin(offset *iTime)) + iTime );\n    //p.y += 0.1*sin( 60.0*p.y * p.x * p.z * abs(sin(offset *iTime * .4)) + iTime );\n  //  p.y += 0.1*sin( 10.0*p.z + iTime *10.);\n  //  p.z += 0.1*sin( 30.0*p.x + iTime *3.);\n  \n    p.x += 0.5*sin( 3.0*p.y + iTime );\n    p.y += 0.5*sin( 3.0*p.z + iTime );\n    p.z += 0.5*sin( 3.0*p.x + iTime );\n\n    float d1 = length(p) - .1*smoothstep(0.0,1.0,iTime);;\n    d1 *= .3;\t\n    \n   // vec3 nP = vec3( x , y , z );\n    return d1 -s;\n}\n\n\n// checks to see which intersection is closer\n// and makes the y of the vec2 be the proper id\nvec2 opU( vec2 d1, vec2 d2 ){\n    \n\treturn (d1.x<d2.x) ? d1 : d2;\n    \n}\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n   \tvec2 res = vec2( udBox( pos , vec3( .6 ) ) , 1.0 );\n   \t//vec2 res2 = vec2( sdPlane( pos - vec3( 0. , -1. , 0. )), 0.0 );\n   \tvec2 res2 = vec2( sdSphere( pos - vec3( 0. , 0. , 0. ) , .5 ), 0.0 );\n    res = opU( res ,  res2 );\n   \treturn res;\n    \n}\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n    \n}\n\n\n#define STEPS 50\nfloat fogCube( vec3 ro , vec3 rd , vec3 n ){\n \n    float lum = 1.;\n    for( int i = 0; i < STEPS; i++ ){\n        vec3 p = ro + rd * .01  * float( i );\n        lum += abs(sin( p.x  * p.y * p.z * 20.));// + sin( p.y * 3. ) + sin( p.z * 5.);\n    }\n    \n    return pow( lum , 2. ) / 4000.;\n    \n    \n}\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n    \n    vec2 res = calcIntersection( ro , rd  );\n\n\n    vec3 col = vec3( 0. );\n    \n    if( res.y > -.5 ){\n        \n        vec3 pos = ro + rd * res.x;\n        vec3 norm = calcNormal( pos );\n        \n        float lum = fogCube( pos , rd , norm );\n       // col = norm * .5 + .5;\n        col = hslToRGB( vec3( abs( norm.x + norm.y + norm.z) * .5 , .9 , .8 ));\n        col *= max( .3 , lum * 2. );\n        \n        \n    }\n\n    \n    fragColor = vec4( col , 1. );\n\n\n\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MlXGWB","date":"1424749565","viewed":429,"name":"SHADE A DAY ( 2 / 23 / 2015 )","username":"cabbibo","description":"Trying to see if I can play with paralax once the object is hit.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""}}