{"ver":"0.1","info":{"id":"md23Dw","date":"1667734200","viewed":213,"name":"Artober - Playground","username":"Flopine","description":"28th shader out of 31, this is also a slightly modified version of the piece made during Inercia 2022 shader royale","likes":27,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","truchet","isometric","everyday","extrude"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define hr vec2(1.,sqrt(3.))\n#define time iTime\n\n#define rep(p,c) p=mod(p, c)-c*.5\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define circle(u,s) (length(u)-s)\n#define noise(u) textureLod(iChannel1, u, 0.).x\n\n\nstruct obj\n{\n    float d;\n    vec3 sc;\n    vec3 lc;\n};\n\nobj objmin (obj a, obj b)\n{\n    if (a.d < b.d) return a;\n    return b;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q, 0.));\n}\n\nfloat htr (vec2 uv)\n{\n    vec2 ga = mod(uv,hr)-hr*.5, gb=mod(uv-hr*.5,hr)-hr*.5, \n    guv = (dot(ga,ga)<dot(gb,gb))?ga:gb, gid = uv-guv;\n    if (noise(gid*.17)<.5) guv.x *= -1.;\n\n    float d = abs(guv.x*sqrt(3.)+guv.y)-.033;\n\n    float s = (guv.x > -guv.y) ? 1.: -1.; \n    guv -= vec2(1., 1./sqrt(3.))*.5*s ;\n\n    d = min(d, abs(circle(guv, sqrt(3.)/6.)));\n    return d;\n}\n\n\nfloat extrude (vec3 p, float d, float h)\n{\n    vec2 q = vec2(d, abs(p.z)-h);\n    return min(0., max(q.x,q.y))+length(max(q,0.));\n}\n\nobj SDF (vec3 p)\n{\n    p.x -= time;\n\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    float ht = htr(p.xz);\n    p.xz*= rot(PI/4.);\n    \n    vec3 pp = p;\n    p.y -= .95;\n    float pt = extrude(p.xzy, ht, .1)-.03;\n    obj textru = obj(pt, vec3(0., 0.2,0.3), vec3(.5, .9,.2));\n\n    float per = 1.5;\n    p = pp;\n    p.y -= texture(iChannel0, p.xz*.3).x*.15;\n    rep(p.xz, per);\n\n    obj ground = obj(box(p, vec3(.71)), vec3(0.1,.0,.0), vec3(.8, .15, .1));\n    \n    obj scene = ground;\n    scene = objmin(scene, textru);\n\n    return scene;\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.01, 0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n).d/e, 0., 1.);}\n\nfloat spec (vec3 rd, vec3 l, vec3 n, float e)\n{return pow(max(dot(n, normalize(l-rd)),0.), e);}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    vec3 ro =vec3(uv*2.5, -30.), rd=vec3(0.,0.,1.), p=ro, \n    col=vec3(0.), l=vec3(0.5, 1., -2.);\n\n    obj O;\n    for(float i=0.; i<64.; i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001) break;\n        p += O.d*rd;\n    }\n\n    vec3 n = gn(p);\n    float li = max(dot(n,normalize(l)), 0.);\n    float ao = AO(p,n,0.015)+AO(p,n,0.1)+AO(p,n,0.15);\n    float sp = spec(rd, l, n, 15.);\n    col = mix(O.sc, O.lc, li);\n    col += sp*.8; \n    col *= ao/3.;        \n   \n    fragColor = vec4(sqrt(col), 1.);\n}","name":"Image","description":"","type":"image"}]}