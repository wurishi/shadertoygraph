{"ver":"0.1","info":{"id":"dl3GzN","date":"1689718783","viewed":57,"name":"Rotating_julia","username":"numpyhard","description":"Julia that just rotates through different c values.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//https://iquilezles.org/articles/palettes/\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Mandelbrot set iteration\n    float a = uv.x * 4.0 - 2.0;\n    float b = uv.y * 2.0 - 1.0;\n    float a0 = 0.8*cos(1.0*iTime);//a;\n    float b0 = 0.8*sin(1.0*iTime);//b;\n    float maxIter = 20.0;\n    float i = 0.0;\n    int n;\n    for (n = 0; n < int(maxIter); n++) {\n        float aa = a * a;\n        float bb = b * b;\n        if (aa + bb > 4.0) {\n            break;\n        }\n        float twoab = 2.0 * a * b;\n        a = aa - bb + a0;\n        b = twoab + b0;\n    }\n    i = float(n);\n    \n    // Map the iteration count to a color\n    \n    \n    float x = (1.0 + i) / maxIter;\n    vec3 col = palette(x+0.1*iTime + 0.03*length(vec2(a,b)));\n    // x = 0.8/(1.06-x); // add glow\n    vec3 color = col;\n    \n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}