{"ver":"0.1","info":{"id":"wdSGzm","date":"1548426278","viewed":176,"name":"CastingBalls","username":"Sevapp","description":"CastingBalls","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["castingballs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float minDrawDist = 5.0;\nconst int   maxRayMarcs = 1000;\nconst float cellSize    = 670.0;\nconst float ballRadius  = 140.0;\n\nvec3 camPos;\n\nfloat getDist(vec3 rayPos)\n{\n    vec3 vertex = floor(-((camPos - rayPos) - ballRadius) / cellSize) * cellSize;\n    vertex.y += abs(cos(vertex.z / 3000.0 + iTime) * 400.0);\n    vertex.x += abs(sin(vertex.z / 3000.0 + iTime) * 400.0);\n    \n\tvec3 pos = camPos + vertex;\n\treturn distance(pos, rayPos) - ballRadius;\n}\n\nvec3 getNormal(vec3 p)\n{\n    float d = getDist(p);\n    const vec2 e = vec2(0.01, 0.0);\n    \n    vec3 n = d - vec3(\n\t    getDist(p - e.xyy),\n\t    getDist(p - e.yxy),\n\t    getDist(p - e.yyx)\n    );\n    \n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 outputPixel = vec4(0.0);\n\t\n\tvec2 position = gl_FragCoord.xy;\n\t\n\tcamPos = vec3(\n\t\tiResolution.x / 2.0, \n\t\tiResolution.y / 2.0, \n\t\t-600.0\n\t);\n\t\n\tvec3 lightPos = vec3(\n\t\tiResolution.x * 6.0 + sin(11.0 / 10.0 * iTime + .5) * 2000.0, \n\t\tcos(7.0 / 10.0 * iTime + .5) * iResolution.y * 10.0,\n\t\tcos(3.0 / 10.0 * iTime + 1.5) * 6000.0\n\t);\n   \n\t    \n\tvec3 rayPos = vec3(position, 0.0);\n\tvec3 rayVec = normalize(rayPos - camPos);\n\t\n\tvec4 ballColor = vec4(.4, 1.0, 1.0, 1.0);\n\t\n\tvec3 curRayPos = rayPos * minDrawDist;\n\tfor (int i = 0; i < maxRayMarcs; i ++)\n\t{ \n\t\tfloat distToBall = getDist(curRayPos);\n\t\tif (distToBall < .1)\n\t\t{\n\t\t\tvec3  normal = getNormal(curRayPos);\n            float light  = dot(normalize(lightPos - curRayPos), normal);\n           \t\n            light = clamp(light, 0.0, 1.0) + 0.02;\n\t\t\tlight *= 1000000.0 / pow(abs(curRayPos.z - camPos.z), 2.0);\n\t\t\toutputPixel = pow(light, 1.0 / 1.8) * ballColor;\n\t\t\t\n\t\t\t\n\t\t\tbreak;\n\t\n\t\t} else\n\t\t{\n\t\t\tcurRayPos += rayVec * 20.0;\n\t\t}\n\t}\n\t\n\tfragColor = outputPixel;\n    \n    if (distance(position, lightPos.xy) < 3.0) fragColor = vec4(1.0);\n}","name":"Image","description":"","type":"image"}]}