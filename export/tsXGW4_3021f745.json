{"ver":"0.1","info":{"id":"tsXGW4","date":"1546380367","viewed":166,"name":"Simple Reaction-Diffusion","username":"balintfodor","description":"A simple implementation of the Gray-Scott Reaction-Diffusion Algorithm","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["2d","reactiondiffusion","grayscott"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 t = texture(iChannel0, uv);\n    float dx = dFdx(t.r);\n    float dy = dFdy(t.r);\n    vec3 n = vec3(dx, dy, sqrt(1.0 - dx*dx - dy*dy));\n    vec3 light = vec3(0.5 + 1.0 * sin(iTime*0.3), 0.5 + 1.0 * cos(iTime*0.3), 0.7);\n    vec3 li = normalize(light - vec3(uv, 0.0));\n    float a = clamp(dot(li, n), 0.0, 1.0);\n    fragColor = vec4(a, a*a, 0.4, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float box(in vec2 p, in vec2 center, in vec2 dim, in float a)\n{\n    mat2 r = mat2(cos(a), sin(a), -sin(a), cos(a));\n    vec2 e = (p - vec2(0.5)) * r + vec2(0.5);\n    return step(1.1, step(center.x-dim.x*0.5, e.x) - step(center.x+dim.x*0.5, e.x) + step(center.y-dim.y*0.5, e.y) - step(center.y+dim.y*0.5, e.y));\n}\n\nvec4 init(in vec2 uv)\n{\n\tfloat box1 = box(uv, vec2(0.5, 0.5), vec2(0.5, 0.5), -0.4);\n    float box2 = box(uv, vec2(0.6, 0.3), vec2(0.4, 0.5), -1.0);\n    float box3 = box(uv, vec2(0.4, 0.7), vec2(0.5, 0.4), -2.0);\n    return vec4(1.0, step(1.0, -box1+box2+box3), 0.0, 1.0);\n}\n\n const float kern[9] = float[9](\n     0.05, 0.2, 0.05,\n     0.2, -1.0, 0.2,\n     0.05, 0.2, 0.05);\n\nconst vec2 offset[9] = vec2[9](\n\tvec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0),\n\tvec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0),\n\tvec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0));\n\nconst float da = 1.0;\nconst float db = 0.5;\nconst float f = 0.055;\nconst float k = 0.062;\n\n//const float f = 0.0367;\n//const float k = 0.0649;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 s = 1.0 / iResolution.xy;\n    vec2 L = vec2(0.0);\n    int i = 0;\n    for (i = 0; i < 9; ++i) {\n    \tL += kern[i] * texture(iChannel0, fract(uv + offset[i] * s)).rg;\n    }\n    vec2 c = texture(iChannel0, fract(uv)).rg;\n    \n    if (iFrame < 1) {\n    \tfragColor = init(uv);\t\n    } else {\n        float AB2 = c.r * c.g * c.g * 1.0;\n        float A = c.r + (da * L.r - AB2 + f*(1.0 - c.r)) * 1.0;\n        float B = c.g + (db * L.g + AB2 - (k + f) * c.g) * 1.0;\n    \tfragColor = vec4(A, B, 0.0, 1.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}