{"ver":"0.1","info":{"id":"NlGBR3","date":"1664892318","viewed":200,"name":"Buffer Art Test 9183","username":"SnoopethDuckDuck","description":"just thinking about doing processing/p5js style art in shaders\n\nmore ideas here:\nhttps://www.shadertoy.com/view/flGfz3\nhttps://www.shadertoy.com/view/flyfz3  <- flashes at the start\nhttps://www.shadertoy.com/view/ftGfRc","likes":10,"published":3,"flags":48,"usePreview":0,"tags":["pixelart"],"hasliked":0,"parentid":"NdtyRM","parentname":"Pixel Line Equation"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sc = 1.;\n    vec3 col = texelFetch(iChannel0, ivec2(sc *fragCoord), 0).rgb;\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define KEYBOARD iChannel1\n#define KEY_RESET 82\n\nvec4 cell(in ivec2 p) {\n    ivec2 r = ivec2(textureSize(iChannel0, 0));\n    p = (p+r) % r;\n    return texelFetch(iChannel0, p, 0 );\n}\n\nbool key_down(int key) {\n    return int(texelFetch(KEYBOARD, ivec2(key, 0), 0).x) == 1;\n}\n\nfloat pxLine(vec2 f, vec2 p, vec2 q, float th) {\n    // Centre the coordinates at p\n    f -= p;\n\n    // Get direction from p to q, use for gradient and bounding box dimensions\n    vec2 dir = 0.5 * (q - p);\n    \n    // Look at the line as a function of x, and as a function of y\n    float l = max( step(abs(f.x - round(dir.x/dir.y * f.y)), th),\n                   step(abs(f.y - round(dir.y/dir.x * f.x)), th) );\n               \n    // Restrict to the box bounded by p and q           \n    return l * step(abs(f.x - dir.x), abs(dir.x))\n             * step(abs(f.y - dir.y), abs(dir.y));           \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 f )\n{\n    vec3 col = vec3(0);\n    vec2 res = iResolution.xy;\n    vec4 e = cell(ivec2(f));\n    col.rgb = e.rgb;\n    //col *= 0.99;\n    \n    \n    \n    // fragCoord must be offset by 0.5\n    //f -= 0.5 * vec2(iResolution) - 0.5;\n    f -= 0.5;\n    float t = float(iFrame) / 60.;//floor(60. * flo) / 60.;\n    float xp = exp(-0.08 * t);\n    int n = 10;\n    vec2 o = vec2(30. * t, 0.25 * res);\n    for (int i = 0; i < n; i++) {\n        t += 1. / ( float(n) * 60.);\n        // pxLine must take rounded positions as inputs \n        vec2 p = round(o);\n        vec2 q = round(o + xp * (150. + 50. * cos(700. * t)) * vec2(xp * cos(300. * t), sin(t)));\n        vec2 p2 = p + 1.;\n        vec2 q2 = q + 1.;\n        \n        vec3 pl = pal(t, 0.5 * vec3(0,1,2)/3.);\n    \n        // Draw the points\n        float s = step(min(length(f-p), length(f-q)), 2.);\n        col = mix(col, 0.5 * pl, s);\n        \n        // Draw the line (dark line + offset light line gives shadow effect)\n        col = mix(col, vec3(0), 0.5 * pxLine(f, p, q, 20. * xp));      \n        col = mix(col, pl, 0.5 * xp * pxLine(f - 8., p, q, 20. * xp));      \n    }\n    \n    if (iFrame == 0 || key_down(KEY_RESET)) {     \n        col = vec3(0);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n\nvec3 pal(in float t, in vec3 d) {\n    return 0.5 + 0.5 * cos(2. * pi * (0.5 * t + d));\n}\n","name":"Common","description":"","type":"common"}]}