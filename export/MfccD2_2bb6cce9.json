{"ver":"0.1","info":{"id":"MfccD2","date":"1731173694","viewed":218,"name":"Random Delaunay Triangulation 3","username":"FabriceNeyret2","description":"simplifying  https://shadertoy.com/view/Mf3yW2  ( dedicated to seeds-in-square-grid )\nwhich was simplifying tomkh's https://shadertoy.com/view/4sKyRD","likes":18,"published":3,"flags":0,"usePreview":0,"tags":["procedural","voronoi","random","distance","delaunay"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// simplifying 561 chars https://shadertoy.com/view/Mf3yW2\n// simplifying 2554 chars \"Random Delaunay Triangulation\" by tomkh. https://shadertoy.com/view/4sKyRD\n\n#define H(v)            sin( 6.3* fract(1e4*sin( (v) * mat2(47, -73, 91, -37))) + iTime )      // random point\n#define P(x,y)          -.5-fract(p) + vec2(x+k%2,y+k/2) + H( ceil(p) + vec2(x+k%2,y+k/2) )/4.\n\nfloat line( vec2 a,vec2 b) { \n   b -= a;\n   return length( a + b * clamp( -dot(a, b) / dot(b, b), 0., 1.)); \n}\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2  R = iResolution.xy, h0,h1,h2,h3,\n          p = 5. * ( u+u - R ) / R.y; // + iTime; \n    float d = 9.;\n    for( int k; k < 4; k++ )\n        h0 = P(0,0), \n        h1 = P(1,0),\n        h2 = P(0,1),         \n        h3 = P(1,1),     \n        d = min( min( line(h0,h1), line(h0,h2) ),                                // grid topoly\n        d =      min( length(h0-h3) < length(h1-h2) ? line(h0,h3) : line(h1,h2), // shortest diagonal\n                      d ));\n\n    O = d * R.yyyy*.1;  // draw segment\n}\n","name":"Image","description":"","type":"image"}]}