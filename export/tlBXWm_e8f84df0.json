{"ver":"0.1","info":{"id":"tlBXWm","date":"1566150829","viewed":340,"name":"Spectral ride","username":"hamtarodeluxe","description":"Flying around the music spectral density. \nSound is channel 0 in buffer A. You might need to click start/stop to play it.","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["volume","sound","fft","spectrum","voxel","buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float angle)\n{\n  \n    return mat2(cos(angle), -sin(angle),\n\t\t\t\t  sin(angle), cos(angle));\n}\n\nvec3 camera(vec2 pixel_coords, vec3 pos, vec3 lookAt)\n{\n\tvec2 pixelCoordsN = vec2(pixel_coords)/iResolution.xy;\n\tvec2 dc = (pixelCoordsN*2.-1.);\n\tdc.y *= float(iResolution.y)/float(iResolution.x);\n\tvec3 ro = pos;\n\tvec3 fw = normalize(lookAt-ro);\n\tvec3 rg = normalize(vec3(-fw.z,0.,fw.x));\n\tvec3 up = normalize(cross(rg,fw));\n\tfloat fo = 0.35;\n\tvec3 rd = normalize(fw * fo + up * dc.y + rg * dc.x);\n\treturn rd;\n}\n\n\nfloat band(float t0, float t1, float sm, float t)\n{\n\treturn sat(smoothstep(t0, t0+sm,t)-smoothstep(t1-sm, t1,t));   \n} \nvec4 map(vec3 p)\n{\n    \n\n\tfloat maxH = MAXHEIGHT;\n    vec3 coord = (p);  \n\n\n    coord.xz += floor(vec2(RESX,RESY)/2.);    \n\tcoord.x = -abs(mod(coord.x,RESX*2.)-RESX)+RESX-1.;\n\n    coord.y =2.*maxH-abs(coord.y-maxH)-maxH;\n    coord.y = abs(coord.y);\n    \n    vec3 coordN = coord/vec3(RESX,maxH,RESY);\n    \n\t// fetch data\n    float id = coord.z*RESX+coord.x;\n    vec2 texCoord;\n\ttexCoord.y = floor((id)/iResolution.x);\n\ttexCoord.x = id - texCoord.y*iResolution.x;\n\tvec4 data = texelFetch( iChannel0, ivec2(texCoord), 0 );\n\n    float height = data.x*(maxH+1.);\n    \n    \n    // 3 MAIN MASKS \n    float solid = step(coord.y+1., height);\n    float vacum = 1.-solid;\n    float special =solid* (data.z<1. ? data.z : 0.);\n\tsolid *= data.z ==1. ? 1.:0.;\n    \n    float cell = solid + special + vacum *(0.12*band(0.,height+10.,10.,coord.y))*data.z;\n    \n    vec3 pitchC = mix(vec3(1.,0.2,0.7),vec3(0.,0.7,1),coordN.x);\n    \n\t// base col\n   \tvec3 mainC =  (1.-coordN.z)*0.5*mix(vec3(0.0,0.0,0.0),vec3(0.3,0.2,0.1),data.w)*sat(coord.y/height);//0.2+mix(vec3(0.1,0.2,1.),vec3(1.,0.7,0.1),1.-coordN.x); //0.5*mix(vec3(0.0,0.2,1.),pitchC,coordN.y);// mix(c0,c1, coordN.x);\n    \n\n    mainC *= 1.+(1.-smoothstep(height, height-5., coord.y));\n    \n    // highlight new\n    float newF = (1.-smoothstep(0.,0.2,coordN.z))*data.x;\n\n    \n    vec3 solidC = mainC;\n    float solidM = solid;\n    vec3 transpC = 0.5*mix(vec3(1.,0.3,0.1),vec3(0.2,1.,0.3),pow(coordN.y,2.));\n    float transpM = special+vacum;\n    vec3 specialC = 0.5*mix(vec3(0.5,0.9,1.),vec3(0.,0.3,1),smoothstep(0.,height,coord.y));\n    specialC += 0.5*(1.-smoothstep(height, height-10., coord.y));\n    //return(vec4 (vec3(1.), solid));\n    \n    vec3 resC = (solidC*solid+transpC*vacum+special*specialC)*(1.+150.*newF);\n    resC= mix(resC,vec3((resC.x+resC.y+resC.z)/3.),smoothstep(130.,200., length(coord)));\n    return vec4(resC, cell+0.0015);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float maxH = MAXHEIGHT;\n    float tmax = 150.;\n\n    float d = 8.;\n    float yPos = maxH;\n    vec3 ro = vec3(0.,yPos,0);\n    vec3 la = ro-vec3(sin(iTime*0.5),cos(iTime*0.5),3.5);\n    vec3 rd = camera(fragCoord, ro, la);\n   \n\t   \n    float t = 0.;\n    vec3 col = vec3(0.);\n   \n    \n    vec3 p = ro;\n\n    vec3 cell = floor(p);\n    vec4 prevV = map(cell);\n    float tTot=0.;\n    vec3 tp = vec3(1.);\n    vec3 pp = p;\n    vec3 prevToAdd;\n    vec3 toAdd;\n    vec3 localCol;\n    float distFactor;\n    bool hit = false;\n    mat2x2 rotz;\n    for (int i=0; i <250; i ++)\n    {\n\t\ttoAdd = vec3(0.);\n        vec3 rdt = rd;\n      \trdt.xy *=rot(0.03*p.z-iTime*0.1);\n        \n        vec3 s = sign(rdt);\n        vec3 ird = (1./rdt);   \n        vec3 frRo = p-cell;\n        \n      \t//vec3 t3 = ird*vec3(mix(frRo, 1.-frRo, (s*0.5+0.5)));\n        //slower ?\n        vec3 t3 = vec3(\ts.x>0. ? 1.-frRo.x : frRo.x,\n        \t\t\t\ts.y>0. ? 1.-frRo.y : frRo.y,\n                       \ts.z>0. ? 1.-frRo.z : frRo.z)*ird;  \n        \n        t3 = abs(t3);\n      \n        if(t3.x <= t3.y && t3.x <= t3.z)\n        {\n         \tt = t3.x;\n            toAdd.x = s.x;\n        }\n        else if(t3.y <= t3.x && t3.y <= t3.z)\n        {\n            t = t3.y;\n            toAdd.y = s.y;\n        }\n        else if(t3.z <= t3.x && t3.z <= t3.y)\n        {\n         \tt = t3.z;\n            toAdd.z = s.z;\n        }\n        \n\t\t// new Position at next 'surface'\n        tTot+=t;\n        p += rdt*(t)+0.01*toAdd;       \n\t\t\n        // integrates volume\n\t\tdistFactor = (1.-min(1.,tTot/tmax));\n        float near = min(1.,((tTot/100.)));  \n        tp *= (exp(-(t)*localCol*prevV.a*distFactor*near));\n        \n\t\t//get new cell position (under the surface we are at)\n        cell += toAdd;\n        \n        vec4 v = map(cell);\n\t\tlocalCol = v.rgb;\n        localCol *= distFactor;\n        \n        if (v.w >= 1.) {hit = true;\n                        break;}\n\n        pp = p;\n        prevV = v;\n    }\n    \n    \n    if(hit) \n    {\n        col = tp*(localCol)*distFactor;\n    \n    }\n\n \tcol += (1.-tp);\n\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    col = sat(col);\n\n    col *=  1./pow((pow(sqrt(dot(uv,uv)*.15),1.75)+1.),3.); // Adapted from Keijiro\n\tcol = pow(col,vec3(0.45));\n    \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGzn","filepath":"/media/a/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","previewfilepath":"/media/ap/a6a1cf7a09adfed8c362492c88c30d74fb3d2f4f7ba180ba34b98556660fada1.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragCoord -=0.5;\n    vec4 data ;\n    float id = floor(iResolution.x*fragCoord.y+fragCoord.x); \n    // init.\n    if (iFrame <=1)\n    {\n    \tdata = vec4(0.);\n        \n        // Memory for the \"crystal\" effect\n        if(fragCoord.xy == iResolution.xy-1.)\n        {\n        \tdata = vec4(20.,0.,0.5,0.);\n        }\n    }\n    else \n    {\n        // sample one line further\n        data = texelFetch( iChannel1, ivec2(fragCoord),0 );\n        \n\t\tvec2 texCoord;\n        float nId = id-RESX;\n\t\ttexCoord.y = floor((nId)/iResolution.x);\n\t\ttexCoord.x = nId - texCoord.y*iResolution.x;\n\t\tdata = texelFetch( iChannel1, ivec2(texCoord), 0 ); \n        \n       \t// handle random crystal event\n        if(fragCoord.xy == iResolution.xy-1.)\n        {\n            data.xyz = texelFetch( iChannel1, ivec2(fragCoord),0).xyz;\n           \n            data.y +=1.;\n            \n            if(data.y > data.x)\n            {\n            \tdata.x = floor(hash(float(iFrame))*100.+10.);\n                data.y=0.;\n               \tdata.z = hash(float(-iFrame)+32.);\n            }\n        }\n\n    }\n    \n    if(id<RESX ) // write new line\n    {\n        \n    \tdata.x = texelFetch( iChannel0, ivec2(int(512.*id/RESX),0.),0 ).x;        \n        data.y =  texelFetch( iChannel0, ivec2(int(512.*id/RESX),0.),0 ).x;\n       \n        // data for the event\n        vec3 data2 = texelFetch( iChannel1, ivec2(iResolution.xy-1.),0 ).xyz;\n        float p = (data2.z*RESX);float rand = fract(p); p = floor(p); bool shape = rand > 0.7; \n        float rad = data2.x*0.5;\n        float time = data2.y;\n        float l = length(vec2(id,time)- vec2(p,rad));\n        \n        data.x = data.x>=0.01? mix(data.x,shape ? 1.:data.x*1.7,pow(1.2*max(0.,1.-l/rad),shape ? 15.:2.)) : 0.;\n                \n        data.z = mix(1.,0.3*sat(1.-l/rad),step(l,rad));\n        float line = RESX*0.5 +(40.)*(sin(float(iFrame)*0.031));\n        data.z = mix(data.z, 0.3,sat(1.-step(15.+10.*sin(float(iFrame)*0.1),abs(id-line))));\n\n        data.w = hash(id);\n    }\n \n    fragColor = data;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// assuming buffer has at least RESX*RESY pixels\n#define RESX 200.\n#define RESY 180.\n#define MAXHEIGHT 60.\n\nfloat hash(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvec3 sat (vec3 c) {\n    return clamp(c, vec3(0),vec3(1) );\n }\nfloat sat (float c) {\n    return clamp(c, (0.), (1.) );\n        }","name":"Common","description":"","type":"common"}]}