{"ver":"0.1","info":{"id":"3l2cWd","date":"1595725209","viewed":220,"name":"Distance Practice","username":"reatured","description":"Learning Practice, shape, angle, and color and rotate.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.28318530718\n#define PI 3.14159265359\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //float resize = 80./45.; //multiply to square\n    vec2 uv = fragCoord/iResolution.xy;\n    float screenRatio = iResolution.x/iResolution.y;\n    uv.x *= screenRatio;\n    //vec2 canvas =iResolution.xy;\n    //uv = vec2((uv.x * resize)-45./120., uv.y); //rescale canvas;\n       \n    //tile\n\t\n   \tvec2 center = vec2(0.5 * screenRatio, 0.5);\n    //uv *= tile( uv, 2.);\n    //rotate\n    \n    uv -= center;\n    uv = rotate2d( sin(iTime)*PI ) * uv;\n    uv += center;  \n    \n\tvec2 toCenter = uv - center;  \n    \n    float r = length(toCenter);\n    \n    \n    // Color update 1\n    vec3 col = vec3(smoothstep(0.40,0.52, r));//draw circle\n    \n    \n    float angle = atan(toCenter.y,toCenter.x);\n    r *=2.;\n    \n    //Color update 2\n\tcol += hsb2rgb(vec3((angle /TWO_PI)+0.5,r,2. * cos(iTime))); //draw color\n    \n\n    \n    //vec3 col = vec3(uv.y); \n    // Output to screen\n    fragColor = vec4(col,1.0) ;\n}\n\n","name":"Image","description":"","type":"image"}]}