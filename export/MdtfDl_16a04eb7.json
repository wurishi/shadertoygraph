{"ver":"0.1","info":{"id":"MdtfDl","date":"1527279714","viewed":1105,"name":"isovalues 4","username":"FabriceNeyret2","description":"reference: [url]https://www.the-scientist.com/May2018/Abstract-3d.jpg[/url]\nadapting [url]https://shadertoy.com/view/ldfcRS[/url] + 3D + pseudo depth of field","likes":48,"published":3,"flags":0,"usePreview":0,"tags":["noise","dof","depthoffield","contour"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// variant of https://shadertoy.com/view/ldfcRS\n\n// --- noise from procedural pseudo-Perlin (better but not so nice derivatives) ---------\n                    // ( adapted from IQ )\n\nfloat noise3( vec3 x ) {\n    vec3 p = floor(x),f = fract(x);\n\n    f = f*f*(3.-2.*f);  // or smoothstep     // to make derivative continuous at borders\n\n#define hash3(p)  fract(sin(1e3*dot(p,vec3(1,57,-13.7)))*4375.5453)        // rand\n    \n    return mix( mix(mix( hash3(p+vec3(0,0,0)), hash3(p+vec3(1,0,0)),f.x),       // triilinear interp\n                    mix( hash3(p+vec3(0,1,0)), hash3(p+vec3(1,1,0)),f.x),f.y),\n                mix(mix( hash3(p+vec3(0,0,1)), hash3(p+vec3(1,0,1)),f.x),       \n                    mix( hash3(p+vec3(0,1,1)), hash3(p+vec3(1,1,1)),f.x),f.y), f.z);\n}\n\n#define noise(x) (noise3(x)+noise3(x+11.5)) / 2. // pseudoperlin improvement from foxes idea \n\nvoid mainImage( out vec4 O, vec2 U ) // ------------ draw isovalues\n{\n    vec2 u = U/iResolution.y;\n    U = 6.*u - iTime;\n    O -= O; \n  // O += noise(vec3(U*4.,0)); return;\n    for (float z=0.; z<=1.; z+=.1, U.y -= .2) { // consider 1 isovalue per altitude\n        float n = ( 1.8*noise(vec3(U.x-U.y*.1,U.y/.6,.0*iTime)) -.8 -.2) / .6,\n              v = smoothstep(1.5+12.*abs(u.y-.5),0., abs(n-z)/fwidth(n));\n                 // /12./abs(u.y-.5);\n\t // O += v * vec4(.5,1,1,1);\n\t    O += v * (.5+.5*cos(6.3*n + vec4(0,23,21,0) ));\n    }\n}","name":"Image","description":"","type":"image"}]}