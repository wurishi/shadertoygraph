{"ver":"0.1","info":{"id":"ctVfDK","date":"1702549233","viewed":45,"name":"Implicit Function Plot","username":"tsakal","description":"straight line - elipse plot","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["elipseimplicitplotstraightlinefunctionplot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159,\n           DEG = PI/180.;\nvec3 RED    = vec3(255,  0,    0) /255.,\n     OLIVE  = vec3(128, 128,   0) /255.,\n     NAVY   = vec3(  0,   0, 128) /255.,\n     YELLOW = vec3(255, 255,   0) /255.,\n     PAPER  = vec3(245, 245, 220) /255.;\n\nfloat SCALE = 1., AR, lineW;\n//========================\nfloat ellipse(vec2 p, float a, float b){\n  p /= vec2(a,b);\n  return dot(p,p) -1.;\n}\n//========================\nfloat straightLine(vec2 p, float a, float b, float t){\n  return  dot( p, vec2(cos(t)/a ,sin(t)/b) ) - 1.;\n}\n//========================\nvec3 implicitPlot(vec3 COL, vec3 c, float v, float s, bool fill) {\n    COL = mix( COL, c, smoothstep( s, 0., (fill?v:abs(v))/fwidth(v) ) );\n    return COL;\n}\n//========================\nvec3 plotAxis(vec3 COL, vec3 c, vec2 P, float s) {\n    COL = implicitPlot(COL, c, P.y, s, false); // x-axis\n    COL = implicitPlot(COL, c, P.x, s, false); // y-axis\n    return COL;\n}\n//========================\nvec3 plotFunctions(vec3 COL, vec2 P) {\n  float T = iTime/5.,\n        b = SCALE*( .70 + sin(T)/4. ),\n        a = b *AR;      \n  for (float t=0.; t<2.*PI; t+=5.*DEG ) {\n      COL = implicitPlot(COL, RED, straightLine(P, a, b, t+T), .75*lineW, false);\n  }\n  COL = implicitPlot(COL, NAVY, ellipse(P, a, b), 0.1, true);\n  COL = implicitPlot(COL, YELLOW, ellipse(P, a, b), 1.5*lineW, false);\n  return COL;\n}\n//========================\nvoid mainImage( out vec4 O, vec2 u ) {\n    lineW = 1.5;\n    vec2 R = iResolution.xy,\n         P = SCALE * ( 2.*u - R ) / R.y;\n    AR = R.x / R.y;\n    \n    vec3 COL = PAPER;\n    COL = plotFunctions(COL, P);\n    COL = plotAxis(COL, OLIVE, P, 1.5*lineW);\n    O = vec4(sqrt(COL),1.);\n}\n\n/*\nconst float PI = acos(-1.);\nconst float DEG = PI/180.;\nconst vec3 RED    = vec3(255.,  0.,    0.)/255.;\nconst vec3 OLIVE  = vec3(128., 128.,   0.)/255.;\nconst vec3 NAVY   = vec3(  0.,   0., 128.)/255.;\nconst vec3 PAPER  = vec3(245., 245., 220.)/255.;\n\nvec3 COL = PAPER;\nfloat T, SCALE = 1., axisTHICK = 2., graphTHICK = 1.5, AR;\nvec2 P;\n//========================\nfloat ellipse(vec2 p, float a, float b){\n  float x=p.x, y=p.y;\n  return x*x/(a*a) + y*y/(b*b) -1.;\n}\n//========================\nfloat straightLine(vec2 p, float a, float b, float t){\n  float x=p.x, y=p.y;\n  return x*cos(t)/a + y*sin(t)/b -1.;\n}\n//========================\nvoid implicitPlot(vec3 v, vec3 c) {\n  if ( abs(sign(v.x) + sign(v.y) + sign(v.z) ) != 3. ) {\n    // COL *= c*smoothstep(-abs(v.x)*.001,abs(v.x)*.001,abs(v.x));\n    COL *= c*smoothstep(-0.001,0.001,abs(v.x)/fwidth(v.x));\n  }\n}\nvoid Axis(vec3 col){\n  vec2 dx = P+axisTHICK*dFdx(P), dy = P+axisTHICK*dFdy(P);\n  vec3 xAxis = vec3(P.y, dx.y, dy.y), yAxis = vec3(P.x, dx.x, dy.x);\n  implicitPlot(xAxis, col);\n  implicitPlot(yAxis, col);\n}\n//========================\nvoid plotFunctions() {\n  vec2 dx = P + graphTHICK * dFdx(P), dy = P + graphTHICK * dFdy(P);\n  float b = SCALE*(.70 + sin(T)*.25);\n  float a = b*AR;\n  for (float t=0.; t<2.*PI; t+=5.*DEG){\n    implicitPlot(vec3(straightLine(P, a, b, t+T), straightLine(dx, a, b, t+T), straightLine(dy, a, b, t+T)), RED);\n  }\n  implicitPlot(vec3(ellipse(P, a, b), ellipse(dx, a, b), ellipse(dy, a, b)), NAVY);\n}\n//========================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 p = (-iResolution.xy + 2.0*fragCoord.xy) / iResolution.y;\n  AR = iResolution.x / iResolution.y;\n  P = p * SCALE;\n  T = iTime/5.;\n  Axis(OLIVE);\n  plotFunctions();\n  fragColor = vec4(sqrt(COL),1.);\n}\n*/","name":"Image","description":"","type":"image"}]}