{"ver":"0.1","info":{"id":"dl2XWR","date":"1675944162","viewed":61,"name":"Band-limited probing function","username":"EdgarDorausch","description":"Band-limited probing function","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["bandlimited","wavefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 posTX = vec2(0.3, 0.8);\nvec2 posRX = vec2(0.3, 0.2);\nfloat t = 0.40;\nfloat c = 0.08;\nfloat dotSize = 0.01;\n\nfloat w_shift = 10.0;\nfloat w_num = 20.0;\nfloat w_width = 40.0;\n\n\n//  ------------   Colormaps copied from: https://www.shadertoy.com/view/4dXXDX -----------------\n\n// if edge0 < x <= edge1, return 1.0, otherwise return 0\nfloat segment(float edge0, float edge1, float x)\n{\n    return step(edge0,x) * (1.0-step(edge1,x));\n}\n\n// return under if t < 0, over if t > 1, color else\nvec3 underover(float t, vec3 color, vec3 under, vec3 over)\n{\n    return step(t,0.0)*under + segment(0.0,1.0,t)*color + step(1.0,t)*over;\n}\n\nvec3 ice(float t)\n{\n   return vec3(t, t, 1.0);\n}\nvec3 ice(float t, vec3 under, vec3 over)\n{\n    return underover(t, ice(t), under, over);\n}\n\n\nvec3 fire(float t)\n{\n    return mix( mix(vec3(1,1,1), vec3(1,1,0), t),\n                mix(vec3(1,1,0), vec3(1,0,0), t*t), t);\n}\nvec3 fire(float t, vec3 under, vec3 over)\n{\n    return underover(t, fire(t), under, over);\n}\n\nvec3 ice_and_fire(float t)\n{\n    return segment(0.0,0.5,t) * ice(2.0*(t-0.0)) +\n           segment(0.5,1.0,t) * fire(2.0*(t-0.5));\n}\nvec3 ice_and_fire(float t, vec3 under, vec3 over)\n{\n    return underover(t, ice_and_fire(t), under, over);\n}\n\n\n\n// --------------------------------------\n\n\nvec2 getField(vec2 uv, float w ) {\n    float distTX = length(uv-posTX);\n    float distRX = length(uv-posRX);\n    \n    float distTot = distTX+distRX;\n    float t = iTime;\n    \n    float phase = -w*(distTot/c - t);\n    \n    float im = sin(phase);\n    float re = cos(phase);\n    \n    return vec2(re,im);\n    \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float distTX = length(uv-posTX);\n    float distRX = length(uv-posRX);\n    \n    vec2 val = vec2(0.0);\n    int N = 0;\n    \n    for(float w=w_shift;  w<w_shift+w_width; w+=w_width/w_num){\n        val += getField(uv, w);\n        N++;\n    }\n    \n    \n    vec3 col = ice_and_fire(val.x/float(2*N)+0.5);\n\n    \n    // Draw TX\n    if(distTX < dotSize) {\n        col = vec3(1.0, 0.0, 0.0);\n    }\n    \n    // Draw RX\n    if(distRX < dotSize) {\n        col = vec3(0.0, 0.0, 1.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}