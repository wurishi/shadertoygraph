{"ver":"0.1","info":{"id":"lcjSDG","date":"1709103543","viewed":35,"name":"Hello Shadertoy! for myself","username":"laochang1996","description":"Excited to be part of this creative community!","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["newbie"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ascii2index(ascii) (15. - ascii/16.) * 16. + ascii % 16.\n//#define print(ascii, pos, uv) texture(iChannel0, vec2(fract(ascii / 16.), 15. - ascii / 16));\n#define bgColor vec4(0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4)),1.0)\n\nvec4 ccc(int ascii, vec2 pos, vec2 scale, vec2 uv)\n{\n    vec2 offset = uv - pos;\n    if (offset.x < 0.) return vec4(0);\n    if (offset.y < 0.) return vec4(0);\n    if (offset.x > .0625 * scale.x) return vec4(0);\n    if (offset.y > .0625 * scale.y) return vec4(0);\n    vec4 color = texture(iChannel0, fract(vec2(ascii, 15 - ascii / 16) / 16.) + offset / scale);\n    return vec4(1.) * color.x;\n    //if (color.x > 0.) return vec4(.7,.1,.7,1.) * color;\n    //else return vec4(0);\n}\n\n#define print(ascii, index) ccc(ascii, vec2(index * .0625, .5), vec2(1., 2.), uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    vec4 c = bgColor;\n    \n    int[] string = int[16](72, 101, 108, 108, 111, 44, 83, 104, 97, 100, 101,\n    114, 116, 111, 121, 33);\n    for (int i = 0; i < string.length(); i++)\n    {\n        c += print(string[i], float(i));\n    }\n    fragColor = c;\n}","name":"Image","description":"","type":"image"}]}