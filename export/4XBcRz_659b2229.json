{"ver":"0.1","info":{"id":"4XBcRz","date":"1726827840","viewed":41,"name":"Hypnotic Phi","username":"poxel","description":"Similar to the seeds of a sunflower, each seed turning 1/phi of a complete revolution before advancing outward. Each seed colored by it's position, wrapping back according to modulus. Change modulus constant to get cool different patterns!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["flower","phi","fibonacci"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: poxel\n// Title: Hypnotic Phi\n\n#define phi .618033988749894848204586834\n#define tau 6.28318530717958647692\n\n// You can set a fibonacci number as the mod to get more spirals.\n// I think the more interesting patterns are ones that are a bit off\n// from fibonacci numbers.\n//\n// Here are some interesting mods:\n// .61803 1 4 12 14 18 22 23 35 144 1000\nfloat modulus = 15.;\n\nconst float speed = 0.2;\nconst float stepSize = 0.008;\nconst float r = 0.308;\nconst int upper = int(2.*r/stepSize);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    //float modulus = sin(iTime*0.002) + 1.; // trippy stuff (ㆆ _ ㆆ)\n    \n    vec2 uv = (2.*fragCoord.xy - iResolution.xy)/min(iResolution.x,iResolution.y);\n    uv *= 8.;\n    \n    vec3 color = vec3(0.725,0.525,0.022);\n    \n    float shell = ceil((length(uv)-r)/stepSize);\n    \n    for (int n=0; n<=upper; n++) {\n        float angle = fract(shell*phi)*tau + iTime*speed;\n        float R = shell*stepSize;\n        vec2 pos = R * vec2(cos(angle),\n                            sin(angle));\n        if (distance(pos, uv) < r) {\n            color = vec3(mod(shell,modulus)/modulus)*vec3(0.615,0.514,0.097);\n            break;\n        }\n        shell += 1.;\n    }\n\n    fragColor = vec4(color,1.0);\n}\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}