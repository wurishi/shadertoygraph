{"ver":"0.1","info":{"id":"Wll3zB","date":"1556835528","viewed":164,"name":"voronoia3","username":"benhardy","description":"not bad ehh?","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["voronoa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * Ray marching parameters\n */\n#define MAX_STEPS 100\n#define MAX_DIST 100.0\n#define EPSILON 0.01\n#define STEP_RATIO 0.5\n\n#define AA_STEP 1\n#define AA_DIV  1.0\n\n/**\n * For x, return something random-looking.\n */\nfloat pseudorandom(float x) {\n    return fract(10000.0 * sin(x * 12345.0));\n}\n\n/**\n * Where's the center of this cell?\n */\nvec2 cellpoint(ivec2 pos) {\n    float id = float(pos.y*47 + pos.x);\n    float ang = iTime* (0.1 + pseudorandom(id));\n    return vec2(\n        0.5 + 0.35 * cos(ang),\n        0.5 + 0.35 * sin(ang)\n    );\n}\n\n/**\n * Give each cell in the grid its own height.\n */\nfloat cellheight(ivec2 pos) {\n    float id = float(pos.y*47 + pos.x);\n    return 0.5*sin(iTime+6.2*pseudorandom(id));\n}\n\n/**\n * Calculate distance to voronai cell border for a plane position.\n * Also return the cell height. Each one has a different height.\n */\nvec2 voronai(vec2 pos) {\n    ivec2 address = ivec2(floor( pos ));\n    vec2  f = fract( pos );\n    float best_dist = 10.0;\n    ivec2 closest_cell;\n    vec2 closest_center;\n    for (int i = -2; i < 2; i++) {\n\t    for (int j = -2; j < 2; j++) {\n            ivec2 delta = ivec2(i, j);\n            ivec2 cell = address + delta;\n            vec2 cp = cellpoint(cell) + vec2(delta) -f;\n        \tfloat d = dot(cp, cp);\n            if (d < best_dist) {\n            \tbest_dist = d;\n                closest_cell = delta;\n                closest_center = cp;\n            }\n        }\n    }\n    float res = 10.0;\n    for (int i = -2; i < 2; i++) {\n\t    for (int j = -2; j < 2; j++) {\n\n            ivec2 b = closest_cell + ivec2( i, j );\n            vec2  other_center = vec2( b ) + cellpoint( address + b ) - f;\n            float d = dot( \n                0.5*(closest_center+other_center), \n                normalize(other_center-closest_center)\n            );\n            if (d > 0.0) {\n\t            res = min(res, d);\n            }\n        }\n    }\n    return vec2(res, cellheight(closest_cell + address));\n}\n\n/**\n * Blended union\n */\nfloat blend( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 );\n    return min( a, b ) - h*h*0.25/k;\n}\n\n/**\n * Blended intersection\n */\nfloat blend_int( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 );\n    return max( a, b ) + h*h*0.25/k;\n}\n\n#define OBJECT_ID_FLOOR 1\n\n/**\n * Measure the distance to objects in the scene\n * return the distance to the nearest object and its object id\n */\nvec2 measure(vec3 where) {\n    vec2 zoomed = where.xz;\n    vec2 vores = voronai(zoomed);\n    float vd = -(vores.x - 0.00);\n    float d= blend_int(vd, where.y + vores.y*0.3, 0.2);\n    return vec2(d, OBJECT_ID_FLOOR);\n}\n\n#define NORMAL_DELTA 0.001\n\nvec3 calc_surface_normal(vec3 hit) {\n\treturn normalize(vec3(\n            measure(hit+vec3(NORMAL_DELTA, 0.0, 0.0)).x - measure(hit-vec3(NORMAL_DELTA, 0.0, 0.0)).x,\n            measure(hit+vec3(0.0, NORMAL_DELTA, 0.0)).x - measure(hit-vec3(0.0, NORMAL_DELTA, 0.0)).x,\n            measure(hit+vec3(0.0, 0.0, NORMAL_DELTA)).x - measure(hit-vec3(0.0, 0.0, NORMAL_DELTA)).x\n    ));\n}\n\nvec3 trace(vec2 pixel) {\n    vec3 eye = vec3(0,10,-10);\n    vec3 look = vec3(0,-1,1);\n    vec3 up = vec3(0,1,0);\n    vec3 right = vec3(1,0,0);\n    \n    vec3 actual_up = cross(look, right);\n    vec3 ray = normalize(look + pixel.x * right + pixel.y * actual_up);\n    \n    vec2 current;\n    float total_dist = 0.0;\n    int who;\n    vec3 where = eye;\n    for(int steps = 0; steps < MAX_STEPS; steps++) {\n        \n        current = measure(where);\n        float current_dist = current.x;\n        if (current_dist < EPSILON) {\n            who = int(current.y);\n            break;\n        }\n        total_dist += current_dist * STEP_RATIO;\n        if (total_dist > MAX_DIST) {\n            break;\n        }\n        where = eye + total_dist * ray;\n    }\n    vec3 color = vec3(0,0,0);\n    if (who == OBJECT_ID_FLOOR) {\n\t\tcolor = vec3(0.8, 0.7, 0.6) * (1.0+vec3(where.y));\n        vec3 to_light = normalize(vec3(-5,15,-10));\n    \t//float shadow = calcSoftshadow(hit, to_light, 0.0, total_dist);\n    \tvec3 surface_normal = calc_surface_normal(where);\n    \tfloat dotty = dot(to_light, surface_normal);\n\t\tcolor *= dotty;\n        vec3 reflected = surface_normal * 2.0 * dotty - to_light;\n    \tvec3 toEye = normalize(-ray);\n\t\tfloat specular = pow(max(0.0, dot(toEye, reflected)), 32.0);\n        color += vec3(specular);\n\n    }\n    return clamp(color, 0.0, 1.0);\n}\nvec2 pixelToLocal(vec2 fragCoord) {\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.y = uv.y * iResolution.y / iResolution.x;\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0,0,0);\n    for (int dy = 0; dy < AA_STEP; dy++) {\n        \n\t    for (int dx = 0; dx < AA_STEP; dx++) {\n        \tvec2 delta = vec2(float(dx)/AA_DIV, float(dy)/AA_DIV);\n\t\t    vec2 uv = pixelToLocal(fragCoord+delta);\n                \n\t\t\tcol += trace(uv);\n        }\n    }\n    fragColor = vec4(col / (AA_DIV*AA_DIV), 1.0);\n}","name":"Image","description":"","type":"image"}]}