{"ver":"0.1","info":{"id":"DsfyR7","date":"1686652410","viewed":142,"name":"Particle simulation","username":"chronos","description":"based on: https://www.shadertoy.com/view/wdKfzw by oneshade\n\nSpacebar to reset","likes":10,"published":1,"flags":48,"usePreview":1,"tags":["collision","simulation","sdf","particle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float movingDisk(in vec2 p, in vec2 o, in float r, in vec2 v, in float dt) {\n    vec2 p0 = p - o, p1 = v * dt;\n\n    float a = dot(p1, p1);\n    float b = dot(p0, p1);\n    float c = dot(p0, p0) - r * r;\n\n    float h = b * b - a * c;\n    if (h > 0.0) {\n        vec2 t = clamp((vec2(-1.0, 1.0) * sqrt(h) - b) / a, 0.0, 1.0);\n        return t.y - t.x;\n    }\n\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    float unit = 2.0 / iResolution.y;\n\n\n    float distanceField = mapEnvironment(uv);\n    fragColor = vec4(0.5* vec3(smoothstep(unit, 0.0, distanceField)), 1.0);\n    \n    for(int i = 0; i < BALL_COUNT_X; ++i)\n    for(int j = 0; j < BALL_COUNT_Y; ++j)\n    {\n    \n        vec2 ballPos = getBallPos(ivec2(i,j));\n        float disk = movingDisk(uv, ballPos, BALL_RADIUS, getBallVel(ivec2(i,j)), iTimeDelta * TIME_SCALE);\n        fragColor.rgb = mix(vec3(fragColor.rgb), vec3(1), disk);\n    }\n\n\n    fragColor.rgb = sqrt(fragColor.rgb);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define BALL_COUNT_X 20\n#define BALL_COUNT_Y 20\n#define TIME_SCALE 30.\n\n#define BALL_RADIUS 0.005\n\n#define getBallPos(ij) texelFetch(iChannel0, ij, 0).xy\n#define getBallVel(ij) texelFetch(iChannel0, ij, 0).zw\n\n\nconst float KEY_SPACE  = 32.5/256.0;\n\nfloat mapEnvironment(in vec2 p) {\n    vec2 q1 = abs(p) - vec2(0.75, 0.4);\n    vec2 q2 = abs(p + vec2(0.35, 0.0)) - 0.25;\n    float wall = -length(max(q1, 0.0)) - min(max(q1.x, q1.y), 0.0);\n    float box = length(max(q2, 0.0)) + min(max(q2.x, q2.y), 0.0);\n    \n    float balls = 9e9;\n    balls = min(balls, length(p - vec2(-0.6,  0.2))  - 0.1);\n    balls = min(balls, length(p - vec2(-0.45,  0.1)) - 0.1);\n    balls = min(balls, length(p - vec2(-0.30,  0.0)) - 0.1);\n    balls = min(balls, length(p - vec2(-0.15, -0.1)) - 0.1);\n    balls = min(balls, length(p - vec2( 0.0, -0.2))  - 0.1);\n    \n    balls = min(balls, length(p - vec2(0.6,  0.2))  - 0.1);\n    balls = min(balls, length(p - vec2(0.45,  0.1)) - 0.1);\n    balls = min(balls, length(p - vec2(0.30,  0.0)) - 0.1);\n    \n    \n    balls = min(balls, length(p - vec2(-0.80,  -0.4)) - 0.1);\n    balls = min(balls, length(p - vec2( 0.80,  -0.4)) - 0.1);\n    balls = min(balls, length(p - vec2(-0.40,  -0.4)) - 0.1);\n    balls = min(balls, length(p - vec2(0.30,  -0.4)) - 0.1);\n    \n    \n    return min(wall, balls);\n}\n\nvec2 getNormal(in vec2 p) {\n    return normalize(vec2(mapEnvironment(p + vec2(0.001, 0.0)) - mapEnvironment(p - vec2(0.001, 0.0)),\n                          mapEnvironment(p + vec2(0.0, 0.001)) - mapEnvironment(p - vec2(0.0, 0.001))));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {   \n    ivec2 ij = ivec2(fragCoord);\n    fragColor = vec4(0,0,0,1);\n    if(ij.x > BALL_COUNT_X || ij.y > BALL_COUNT_Y) return;\n    \n    \n    // Init\n    vec4 noise = texelFetch(iChannel1, ij, 0);\n    fragColor = noise / 100. + vec4(vec2(-0.6,  0.33), 0, 0);\n\n    // Simulate\n    bool reset = texture( iChannel2, vec2(KEY_SPACE,0.5) ).x > 0.5;\n    \n    if (iFrame > 0 && !reset) {\n      \n            float dt = iTimeDelta * TIME_SCALE;\n      \n            vec2 ballPos = getBallPos(ij);\n            vec2 ballVel = getBallVel(ij);\n\n            const vec2 gravity = vec2(0, -0.001);\n            vec2 force = gravity;\n            \n            // integrate\n            ballVel += force * dt;\n            ballPos += ballVel * dt;\n\n            float distToEnv = mapEnvironment(ballPos);\n            if (distToEnv <= BALL_RADIUS) {\n                    vec2 hitNormal = getNormal(ballPos);\n                    ballPos += hitNormal * (BALL_RADIUS - distToEnv);\n                    ballVel = 0.95 * reflect(ballVel, hitNormal);\n            }\n            ballVel *= 0.9999;\n            \n\n            fragColor = vec4(ballPos, ballVel);\n      \n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}