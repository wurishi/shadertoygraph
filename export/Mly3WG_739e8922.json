{"ver":"0.1","info":{"id":"Mly3WG","date":"1476413018","viewed":1609,"name":"The Rude Sandstorm","username":"VoidChicken","description":"A desert in a sandstorm. Raymarched using distance fields. I would add Darude Sandstorm but Soundcloud wont work.\nEdit: Sandstorm Works!\nEdit: Nevermind.\nEdit: Closest thing I can get...","likes":29,"published":1,"flags":96,"usePreview":0,"tags":["3d","raymarch","clouds","distort","volumetric","fog","volumetricfog","vignette","storm","chicken","desert","multipass","sandstorm","darude"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xdj3Rm","filepath":"https://soundcloud.com/rahmm460/darude-sandstorm-fullspeed","previewfilepath":"https://soundcloud.com/rahmm460/darude-sandstorm-fullspeed","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 f, vec2 c) {\n    vec2 u = c/iResolution.xy;\n    float d = pow(1.-length(u-.5)/1.62, 1.3);\n    float b = cos(3.14159265358979-min(iTime/2.,1.)*3.14159265358979);\n    f = b*pow(\n        d*texture(iChannel0, clamp(u+(texture(iChannel1, u/2.+iTime*10.*texture(iChannel0, u*10.+iDate.w/10.).w*1.).rg*4.-2.)*texture(iChannel0, u).w/40.,0., 1.))\n\t\t, vec4(1./2.2));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec4 hash4( vec2 p ) { return fract(sin(vec4( 1.0+dot(p,vec2(37.0,17.0)), \n                                              2.0+dot(p,vec2(11.0,47.0)),\n                                              3.0+dot(p,vec2(41.0,29.0)),\n                                              4.0+dot(p,vec2(23.0,31.0))))*103.0); }\nmat3 rotate(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  \n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  \n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c         \n              );\n}\nvec3 tnt( sampler2D samp, in vec2 uv, float v )\n{\n    vec2 p = floor( uv );\n    vec2 f = fract( uv );\n    vec2 ddx = dFdx( uv );\n    vec2 ddy = dFdy( uv );\n    \n\tvec3 va = vec3(0.0);\n\tfloat wt = 0.0;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n\t\tvec4 o = hash4( p + g );\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n        float w = exp(-5.0*d );\n        vec3 c = textureGrad( samp, uv + v*o.zw, ddx, ddy ).xyz;\n\t\tva += w*c;\n\t\twt += w;\n    }\n\t\n    return va/wt;\n}\n\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nfloat height( vec3 q ) {\n\tfloat f;\n    f  = 0.50000*noise( q ); \n    f += 0.25000*noise( q ); \n    f += 0.12500*noise( q ); \n    f += 0.06250*noise( q ); \n    f += 0.03125*noise( q ); \n    return f;\n}\nfloat map( vec3 r ) {\n\treturn \n         (r.y-height(vec3(r.xz/10.,0))*2.)+noise(r/((tnt(iChannel2, r.xz/10., r.x+r.z).r+1.)/3.))/5./3.;\t\n}\nfloat cld( vec3 r ) {\n\treturn r.y-(height(vec3(r.xz/5.+iDate.w*vec2(0, 2),0))*4.+3.)+noise(r)*2.+noise(r*2.55);\t\n}\nconst float pr = .02;\nvec4 march(vec3 ro, vec3 rd) {\n    vec3 r = ro;\n    bool hit = false;\n    float t = 0.;\n    float q = 0.;\n   \tfloat tf = 0.;\n    int j = 0;\n    vec3 cdl = vec3(0);\n    bool cht = false;\n    for ( int i = 0; i < 90; ++i ) {\n        float df = map(r);\n        t= ((r-ro)/rd).r;\n        if (df < pr*10.) {\n        \tq += df;\n        }\n        if ((df < pr&&df>-.5)||t>50.) {\n            if (df < pr) {\n                \n            hit = true;\n            }\n            break;\n        }\n        if (df<-.5) {\n\t\t\tdf = -df/2.;\n        }\n        float cl = cld(r);\n        tf += cl;    \n        if (cl < pr) {\n            j++;\n            vec3 a = tnt(iChannel0, (r.zy+r.xz+r.xy+vec2(iTime*0.)+float(j))/10., 1.).rrr*smoothstep(6., 0., clamp(tf, 0., 6.)/6.);\n        \tcdl += a*sqrt(float(j))*1.5*pow(smoothstep(0., 1., clamp(float(j)/15., 0., 1.)), 1./2.5);\n            cht = true;\n        }\n        r+=rd*df;\n    }\n    vec3 O = vec3(1.2, 1.1, 1);\n    vec3 COL = O;\n    \n    if (hit) {\n   \t\tvec3 sand = .5*(tnt(iChannel1, r.xz+noise(r)/2., 1.)+tnt(iChannel2, r.xz, 2.).rrr*vec3(1.2, 1.1, 0)/2.)*vec3(1.1, 1.2, 1);\n        COL = sand*.8/(1.-height(vec3(r.xz/10.,0))*.6);\n        \n    }\n    COL += max(vec3(0.),cdl/float(j)*.2)*clamp((t-tf), 0., 1.);\n    float fog = clamp((50.-t)/(50.-30.), 0., 1.);\n    return vec4(mix(COL,O, 1.-fog), clamp(q/4., 0., 1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv*2.-1.;\n    uv.y*=iResolution.y/iResolution.x;\n\tfragColor = march(vec3(0, mix(height(vec3(vec2(0, iTime*7.)/10.,0)*2.)+3.4, 7., iMouse.w>0.?iMouse.y/iResolution.y:.5*(sin(iTime/10.)+1.)), iTime*9.), vec3(uv, 1)*rotate(vec3(1,0,0),cos(iTime*1.*texture(iChannel2, vec2(iTime/30.)/10., 10.).r/10.)*.05-.05)*rotate(vec3(0,1,0),.6*sin(iTime/5.+texture(iChannel2, vec2(iTime)/50.).r/10.)*3.14/2.));\n}","name":"Buf A","description":"","type":"buffer"}]}