{"ver":"0.1","info":{"id":"XtSGDz","date":"1427961077","viewed":181,"name":"colour blobs with glitch","username":"ballzac","description":"Just learning at the moment. Put together this abstract pattern mostly using sinusoidal functions, with a glitch pattern added using square waves that invert the colours.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","abstract","glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bool glitch = true;//enables 'glitch' effect\n    float time = iTime;\n    \n    /*Move and scale coordinate system*/\n    vec2 offset = vec2(0.5*(sin(time/1.)+1.),0.5*(sin(time/3.)+1.));\n    float scale = 100.*cos(time/25.)*cos(time/25.)+100.;\n    float scale2 = 50.*cos(time/21.)*cos(time/21.)+2.;\n\tvec2 uv_temp = (fragCoord.xy / (iResolution.xy)-offset)*sin(time/scale)*scale2;\n    vec2 uv = vec2( uv_temp.y*sin(time/(scale*2.)),-uv_temp.x*cos(time/(scale*2.)));\n    \n    /*create 'phase-like' colour distributions*/\n    float phib = (sin(time)*uv.y-cos(time)*uv.x)/(uv.x*uv.x+uv.y*uv.y)/2.0+0.5;\n    float phir = (-sin(time)*uv.y-cos(time)*uv.x)/(uv.x*uv.x+uv.y*uv.y)/2.0+0.5;\n    float phig = sin(time)*sin(time)*(sin(uv.x)/uv.x)*(sin(uv.x)/uv.x);\n\t\n    /*modulate using sinusoidal functions*/\n    vec4 result = 5.0*(vec4(phir,phig,phib,1)*sin(uv.x+time)+vec4(phir,phig,phib,1)*sin(uv.y-time))\n        +sin(uv.x-3.0*time)*cos(uv.y+3.0*time)/2.0+0.5;\n    \n    /*add glitch effect*/\n    float blend = sin(time/12.0)*sin(time/10.0*cos(time/3.0))*(1.0-(sin(uv.x-0.5)/(uv.x-0.5))*(sin(uv.x-0.5)/(uv.x-0.5)))*2.0;\n    if( glitch && mod(uv.x+sin(time/10.0)*time/1000.0,sin(time)*sin(time)*0.05) < 0.01 && mod(uv.y+time/10.0,0.05+cos(time/2.0)/(time/2.0)) < 0.01 ) \n        result = vec4(1.0,1.0,1.0,1.0)*blend+result*(1.0-blend);\n    \n    \n    result*=(result.x-(result.y+result.z))*(result.x-(result.y+result.z));\n    \n    /*insert bands into black and white regions*/\n    if( result.x >1. && result.y >1. && result.z > 1. )\n        result = vec4(1.,1.,1.,1)*(sin(uv.x));\n    else if( result.x <0. && result.y <0. && result.z <0. )\n    \tresult = sin(uv.y)*vec4(1.,1.,0.,1.)+cos(uv.y)*vec4(0.,0.,1.,0.);\n    \n    /*soften origin*/    \n    result *= sqrt(uv.x*uv.x+uv.y*uv.y);\n    \n    fragColor = result;\n}","name":"","description":"","type":"image"}]}