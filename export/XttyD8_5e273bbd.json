{"ver":"0.1","info":{"id":"XttyD8","date":"1532429613","viewed":120,"name":"Musical fixed point fun v2.0","username":"Firzen_","description":"Adapted this to react to music rather crudely.\nIf the screen stays black for you at the start, just reset the animation and it should work.","likes":2,"published":1,"flags":96,"usePreview":0,"tags":["visualization","fixedpoint"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi (acos(-1.))\nvec3 col(float p)\n{\n    //Thermal gradient colors inspired by yx\n    //https://www.shadertoy.com/view/XldyzN\n    vec3 a = vec3(0, .5, 0);\n    vec3 b = vec3(1., .5, .4);\n    vec3 c = vec3(.3, .6, 1.2);\n    vec3 d = vec3(-.25, -.6, -.25);\n    vec3 e = vec3(0,0,.7);\n    return a+b*cos(2.*pi*(c*p+d))+e*p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = col(texture(iChannel0, uv).r);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XtBGRK","filepath":"https://soundcloud.com/savantofficial/surprise","previewfilepath":"https://soundcloud.com/savantofficial/surprise","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Set between 0<=x<1\n#define smoothing (0.95)\n#define transfer (0.25)\n\nfloat transform(float v, float x, float y)\n{\n    float val = v;\n    float i = texture(iChannel2, vec2(0.005+y*0.01, 0.)).r*40.;\n    float s = 10.*cos(i+x*2.f-iTime*0.5f);\n    val += floor(s*val+0.5)-s*val;\n    return val;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 dxy = vec2(1.)/iResolution.xy;\n    vec3 col;\n    float scale = 10.;\n        \n    if(iFrame <= 100)\n    {\n        col = scale*texture(iChannel1, uv).rgb-scale*0.5;\n    \tfragColor = vec4(col.rrr, 1.);\n        return;\n    }\n    float val = 0.;\n    \n    //g carries the actual values, r carries smoothed values to reduce flashing\n    for(float dx=-dxy.x; dx<=dxy.x; dx+=dxy.x)\n        for(float dy=-dxy.y; dy<=dxy.y; dy+=dxy.y)\n            val += texture(iChannel0, uv+vec2(dx,dy)).g;\n        \n    vec3 b = texture(iChannel0, uv).rgb;\n    val += b.g*3.;\n    val /= 12.;\n    float f = transfer;\n    val = f*transform(val,uv.x, uv.y)+(1.-f)*b.g;\n    col = vec3(val*(1.-smoothing)+b.r*smoothing, val, 0.);\n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}