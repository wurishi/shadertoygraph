{"ver":"0.1","info":{"id":"MssBR4","date":"1495134463","viewed":262,"name":"Distance field outlines","username":"dawken","description":"Given a 2D unsigned distance field, renders a translucent highlight effect on top of it. The outline is more opaque than the fill and lies on the level set distance=0.5. Possible improvements include antialiased outline, outer glow, and aspect correction.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","postprocess","highlight","unsigneddistancefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float getDistance(vec2 uv, float time)\n{\n    float d = 0.0;\n    \n    for (int i = 0; i < 50; ++i) {\n        vec4 rnd = texture(iChannel0, vec2(float(i) / 50.0, float(i) / 50.0));\n        vec2 center = vec2(rnd.r, rnd.g);\n        vec2 pos = center + 0.1 * vec2(cos(time + rnd.b), sin(time + rnd.b));;\n\t\tfloat nd = clamp(1.0 - 20.0 * length(uv - pos), 0.0, 1.0);\n    \n    \td = max(d, nd);\n    }\n    \n    return clamp(d, 0.0, 0.5) / 0.5;\n}\n\nvec3 shadeMarker(float d, vec2 uv)\n{\n    return d * texture(iChannel1, uv * 10.0).rgb;\n}\n\nvec4 shadeHighlight(float d)\n{\n    vec3 color = vec3(0.0, 0.0, 0.0);\n    \n    if (d < 0.4)\n        return vec4(0.0, 0.0, 0.0, 0.0);\n   \telse if (d < 0.6)\n        return vec4(1.0, 0.0, 0.0, 0.8);\n    else\n        return vec4(1.0, 0.0, 0.0, 0.4);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float d = getDistance(uv, iTime);\n    vec3 mkColor = shadeMarker(d, uv);\n    vec4 hlColor = shadeHighlight(d);\n    \n\tfragColor = vec4(mix(mkColor, hlColor.rgb, hlColor.a * (0.5 + 0.5 * cos(iTime * 10.0))), 1.0);\n}","name":"Image","description":"","type":"image"}]}