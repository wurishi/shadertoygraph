{"ver":"0.1","info":{"id":"wstcDl","date":"1657413380","viewed":75,"name":"Smooth julia set render","username":"AlexApps99","description":"It sux less","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n#define SMOOTH\n//#define EXTRAPOLATE\n#define MAX_I 24u\n#define BAIL 8.0\n\n#define TAU (6.28318530717958647692528676655900577)\n#define F float\n#define V vec2\n\n// Rainbow\nvec4 col(float v) {\n#ifndef EXTRAPOLATE\n    if (v <= 0.)\n        return vec4(0., 0., 0., 1.);\n    else\n#endif\n        return vec4(cos(TAU * (v + vec3(0., -1./3., 1./3.))) / 2. + .5, 1.0);\n}\n\n// Julia set\nfloat julia(vec2 coord, vec2 uv) {\n    V  z = coord;\n    V z2 = z * z;\n    uint i = 0u;\n    \n    while (z2.x + z2.y <= BAIL && i < MAX_I) {\n        i++;\n    \tz.y = 2.0 * z.x * z.y + uv.y;\n        z.x = z2.x - z2.y + uv.x;\n        z2 = z * z;\n    }\n\n#ifdef SMOOTH\n    // https://iquilezles.org/articles/msetsmooth/\n    return (F(i) - log2(log2(z2.x+z2.y)) + 4.0) / F(MAX_I);\n#else\n    return F(i) / F(MAX_I);\n#endif\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float sit = sin(iTime);\n    vec2 origin = V(sit, sit * cos(iTime));\n    vec2 uv = (fragCoord / iResolution.xy * 4.0 - 2.0);\n    uv.x *= iResolution.x / iResolution.y;\n    fragColor = col(1.0 - julia(uv, origin));\n}","name":"Image","description":"","type":"image"}]}