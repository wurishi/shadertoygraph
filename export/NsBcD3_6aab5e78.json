{"ver":"0.1","info":{"id":"NsBcD3","date":"1644176406","viewed":108,"name":"jb2d","username":"natnatnat","description":"jb2d","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sun","triangle","circle","snake","square","moon","eclipse","j","cross"],"hasliked":0,"parentid":"ftyXWy","parentname":"j2d"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nconst float PI = 3.14;\nconst float e = 2.71;\n\nconst float R0 = e/PI;\n\nconst vec4 background = vec4(0., 0., 0., 1.);\n\nconst vec2 pointA = vec2(-R0, 0.);\nconst vec2 pointB = vec2(R0, 0.);\n\nvec2 rotZ(vec2 point, float angle) {\n    float c = cos(angle);\n    float s = sin(angle);\n    vec2 finalPoint = mat2(c, -s, s, c) * point;\n    return finalPoint;\n}\n\nvec4 draw(vec2 uv, float R, float angle, bool enableGradX) {\n    float r = length(uv);\n\n    vec2 pointC = vec2(R * cos(angle), R * sin(angle));\n    vec2 outerPointC = vec2(R * R * cos(angle), R * R * sin(angle));\n\n    vec3 circleColor = vec3(pow(e, -abs(R - r) * 10.));\n    vec3 squareColor = background.rgb;\n    \n    if (enableGradX) {\n        squareColor = vec3(sin(uv.x) * sin(angle + PI/2.)/2.);//pow(e, -abs(distance(uv, outerPointC)) * PI);\n    }\n\n    vec2 cv = pointC - uv;\n    vec2 vc = uv - pointC;\n    float scalarProduct = dot(cv, vc);\n    float dec = pow(e, -abs(scalarProduct) * 100.);\n\n    vec3 snakeHeadColor = background.rgb;\n    snakeHeadColor = vec3(pow(e, -abs(distance(uv, pointC)) * 10.));\n\n    vec2 uv1 = rotZ(vec2(uv.x + pointA.x, uv.y), angle/2.);\n    vec3 line1Color = vec3(pow(e, -abs(uv1.x) * 200.));\n    vec2 uv2 = rotZ(vec2(uv.x + pointB.x, uv.y), (angle - PI)/2.);\n    vec3 line2Color = vec3(pow(e, -abs(uv2.x) * 200.));\n    vec3 line3Color = vec3(pow(e, -abs(uv.y) * 200.));\n\n    return 1. - (vec4(circleColor, 1.) + vec4(squareColor, 1.) +\n        vec4(snakeHeadColor, 1.) + vec4(line1Color, 1.) + vec4(line2Color, 1.)\n        + vec4(line3Color, 1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2. * fragCoord - iResolution.xy ) / iResolution.y;\n\n    float angle = iTime * e/PI + PI/2.;\n    float R1 = (R0 * (cos(angle) + sin(angle) - 2.))/2.;\n\n    fragColor = draw(uv, R0, angle, true);//+ draw(uv, R1, angle, false);\n}","name":"Image","description":"","type":"image"}]}