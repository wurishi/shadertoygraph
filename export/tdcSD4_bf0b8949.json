{"ver":"0.1","info":{"id":"tdcSD4","date":"1572063757","viewed":114,"name":"Jacintos","username":"OcarinhaOfTime","description":"An abstract shader representing my theater experience.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","fbm","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 _Color0 = vec3(0.8773585, 0.1983112, 0.06207722);\nvec3 _Color1 = vec3(0.9150943, 0.7658796, 0.07338018);\nvec3 _Color2 = vec3(0.3417617, 0.06608219, 0.9339623);\n\nvec2 scale_center(vec2 st, float a){\n    st -= .5;\n    st = mat2(a, 0, 0, a) * st;\n    st += .5;\n    return st;\n}\n\nvec2 rotate(vec2 st, float a){\n    return mat2(cos(a), -sin(a), sin(a), cos(a)) * st;\n}\n\nfloat poli_field(vec2 st, float n){\n    float a = atan(st.x, st.y)+3.141592;\n    float r = (3.141592 * 2.)/n;\n\n    return cos(floor(.5+a/r)*r-a) * length(st);\n}\n\nvec2 hash22(vec2 p){\n    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n    return -1.0 + 2.0*fract(sin(p) * 43758.5453123);\n}\n\nfloat hash21(vec2 st){\n    return fract(sin(dot(st, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat noise(vec2 st){\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = hash21(i);\n    float b = hash21(i + vec2(1.0, 0.0));\n    float c = hash21(i + vec2(0.0, 1.0));\n    float d = hash21(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\nfloat fbm(vec2 st){\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.);\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < 5; ++i) {\n        v += a * noise(st);\n        st = rot * st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvec2 fbm2(vec2 uv, float freq, float amp){\n    float rx = (fbm(uv * freq) - .5);\n    float ry = (fbm(uv * freq + 313.666999) - .5);\n    return normalize(vec2(rx, ry)) * amp;\n}\n\nfloat voronoi(vec2 x ) {\n    vec2 n = floor(x);\n    vec2 f = fract(x);\n\n    float md = 8.0;\n    float val;\n    for (int j= -1; j <= 1; j++) {\n        for (int i= -1; i <= 1; i++) {\n            vec2 g = vec2(float(i),float(j));\n            vec2 o = hash22( n + g );\n            o = 0.5 + 0.5*sin( 6.2831*o );\n\n            vec2 r = g + o - f;\n            float d = dot(r,r);\n\n            if( d<md ) {\n                md = d;\n                val = clamp(dot(o,vec2(.3,.6)), 0., 1.);\n            }\n        }\n    }\n\n    return val;\n}\n\nfloat voronoise(vec2 uv, float rfreq, float ramp, float vfreq){\n    float rx = (fbm(uv* rfreq) - .5);\n    float ry = (fbm(uv * rfreq + 313.15843) - .5);\n    vec2 dir = normalize(vec2(rx, ry)) * ramp;\n\n    return voronoi(uv * vfreq + dir);\n}\n\nvec3 DiscreteLerp(float t){\n    return _Color0 * step(t, .33) +\n        _Color1 * step(.33, t) * step(t, .66) +\n        _Color2 * step(.66, t);\n}\n\nfloat triang(vec2 uv, float a){\n    vec2 d = rotate(vec2(0., .25), a);\n    vec2 _uv = rotate(uv - d, -a);\n    float f = poli_field(_uv * vec2(12., 6.), 3.);\n    return smoothstep(.2, .19, f);\n}\n\nvec2 rand_dir(vec2 uv, float freq){\n    float rx = (fbm(uv* freq) - .5);\n    float ry = (fbm(uv * freq + 313.15843) - .5);\n    return normalize(vec2(rx, ry));\n}\n\nfloat tooth(float x, float y){\n    float yr = fract(y * 4.);\n    y = abs(yr * 2. - 1.);\n    y = fract(y);\n    x += y * .15 + .005;\n    return step(.5, x);\n}\n\nvec3 background(vec2 uv, vec2 f0, vec2 f1, vec2 f2){\n    uv = (uv - .5) * 2.;\n\n    float f0d = length(uv - f0);\n    float ford = (1. - smoothstep(0., .4, f0d));\n\n    f0d = length(uv - f1);\n    ford += (1. - smoothstep(0., .4, f0d));\n\n    f0d = length(uv - f2);\n    ford += (1. - smoothstep(0., .4, f0d));                \n\n    uv = rotate(uv, 3.14 * ford);\n    //scroll\n    uv.y += iTime * .1;\n\n    vec3 col = vec3(0.);\n    float rs = noise(uv * 6.28) * 0.098125;\n\n    uv.x += sin((uv.y + rs) * 6.28) * 0.098125;\n    uv *= vec2(12, 1.76);\n\n    float rx = (fbm(uv* 64.) - .5);\n    float ry = (fbm(uv * 64. + 696.666999) - .5);\n    vec2 dir = normalize(vec2(rx, ry)) * 0.1;\n    col.rgb = DiscreteLerp(voronoi(uv + dir));\n    col.rgb *= pow(DiscreteLerp(voronoi(uv * 4. + dir + 313.313)), vec3(.2));\n\n    return col;\n}\n\nvec4 rage(vec2 uv, vec2 c){\n    vec2 dir = rand_dir(uv, 16.) * .0015;\n    vec2 suv = scale_center(uv, .8);\n    uv = (suv - .5 + dir) * 2. - c * 2.;\n\n    float cir = smoothstep(.2, .19, length(uv));\n\n    float tf1s = 0.;\n    float a = 0.;\n\n    for(int k=0; k<4; k++){\n        tf1s += triang(uv, a);\n        tf1s += triang(uv, a + 3.14 * .25) * 1.5;\n        a += 3.14 * .5;\n    }\n\n    float v = voronoise(uv, 64., .5, 64.);\n    v = mix(.4, .9, v);\n\n    vec4 col = vec4((cir + tf1s) * v);\n    col.rgb *= _Color0;\n    col.a = step(.1, col.r);\n    return col;\n}            \n\nvec4 sorrow(vec2 uv, vec2 c){\n    vec2 dir = rand_dir(uv, 16.) * .0015;\n\n    vec2 suv = scale_center(uv + dir, 3.14);\n    uv = (suv - .5) * 2. - c * 3.14 * 2.;\n    float cir = smoothstep(.9, .89, length(uv));\n\n    uv = suv - c * 3.14;\n\n    float t1 = tooth(uv.x, uv.y+ 0.125);\n    float t2 = tooth(1.-uv.x, uv.y);\n    float brk = 1. - t1 * t2;\n\n    float v = voronoise(uv, 64., .5, 64.);\n    v = mix(.4, .9, v);\n\n    vec4 col = vec4(cir * brk * v);\n    col.rgb *= _Color2;\n    col.a = step(.01, col.r);\n    return col;\n}\n\nvec4 reason(vec2 uv, vec2 c){\n    vec2 dir = rand_dir(uv, 16.) * .0015;\n    uv = scale_center(uv + dir- c, 3.5);\n    uv = uv * 2. - 1.;\n    float cir = smoothstep(.99, .98, length(uv));          \n    float cir2 = smoothstep(.1, .09, length(uv - vec2(0, .5)));\n    float cir3 = smoothstep(.1, .09, length(uv + vec2(0, .5)));\n\n    uv *= 1.02;\n    float x = uv.x + .5;\n    float s = sin(uv.y * 3.14);\n    float sig = sign(s);\n    float cur = abs(s) * sig;\n\n    x += cur * .33;\n    float a = clamp(step(.5, x) + .5, 0., 1.);\n\n    float re = cir * a + cir3 - cir2 * .5;\n\n    float v = voronoise(uv, 32., .5, 32.);\n    v = mix(.66, .9, v);\n\n    vec4 col = vec4(re * v);\n    col.rgb *= _Color1;\n    col.a = step(.01, re);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    uv *= 1.5;\n    uv = uv * .5 + .5;\n    \n    vec2 c = vec2(0, -.1);\n    \n    vec2 pn = vec2(.0, .25);\n    float t = iTime * -.2;\n    \n    vec2 p0 = rotate(pn, t)+c;\n    vec2 p1 = rotate(pn,  t + 4.71238898038)+c;\n    vec2 p2 = rotate(pn,  t + 4.71238898038 * 3.)+c;\n    \n    vec4 ra = rage(uv, p0);\n    vec4 re = reason(uv, p1);\n    vec4 so = sorrow(uv, p2);\n    \n    vec4 fo = ra + re + so;\n    fo.a = clamp(fo.a, .0, 1.);\n    \n    vec3 bg = background(uv, p0 * 2., p1 * 2., p2 * 2.);\n\t\n    vec4 col = fo;\n    col.rgb += bg * (1.-fo.a) * .66;\n    \n    fragColor.rgb = col.rgb;\n}","name":"Image","description":"","type":"image"}]}