{"ver":"0.1","info":{"id":"XfVGDW","date":"1712779770","viewed":53,"name":"fear","username":"nner0","description":"HW","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["manyfigures"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Max_Z 100.0\n#define PI 3.14\n\nvec2 RBotL = vec2(0.3, 0.2);\nvec2 RTopR = vec2(0.65, 0.5);\n\nbool IsInRectangle(vec2 uv, in float iTime) {\n    RBotL.x += 0.05 * 7.0*sin(iTime);\n    RTopR.x += 0.05 * 7.0*sin(iTime);\n    return(uv.x>=RBotL.x && uv.x<=RTopR.x && uv.y>RBotL.y && uv.y<=RTopR.y); \n    \n}\n\nvec3 computeTriangleGradient(vec2 uv, vec3 v0, vec3 v1, vec3 v2, vec3 colStart, vec3 colEnd, float removal)\n{\n    float alpha = (uv.x - v0.x) / (v2.x - v0.x); \n    vec3 gradientColor = mix(colStart, colEnd, alpha + removal); \n    return gradientColor;\n}\n\nbool isInsideTriangle(vec3 v0, vec3 v1, vec3 v2, vec2 p)\n{\n    float S = 0.5 * (-v1.y * v2.x + v0.y * (v2.x - v1.x) + v0.x * (v1.y - v2.y) + v1.x * v2.y);\n    float s = 1.0 / (2.0 * S) * (v0.y * v2.x - v0.x * v2.y + (v2.y - v0.y) * p.x + (v0.x - v2.x) * p.y);\n    float t = 1.0 / (2.0 * S) * (v0.x * v1.y - v0.y * v1.x + (v0.y - v1.y) * p.x + (v1.x - v0.x) * p.y);\n    float w = 1.0 - s - t;\n    return (s >= 0.0 && t >= 0.0 && w >= 0.0);\n}\n\n\nbool IsInCircle(vec2 uv, vec2 CircleCentre, float CircleRadius) { \n  float d = length(vec2(CircleCentre.x, CircleCentre.y)) - CircleRadius;\n  if(d > 0.0)\n      return false; \n  else \n      return true;\n}\n\nfloat Z_triangle(vec2 uv, vec3 v0, vec3 v1, vec3 v2){\n    float Z = v0.z + (v1.z - v0.z) * uv.x + (v2.z - v0.z) * uv.y + 0.3;\n    return Z;\n}\n\nfloat Z_circle(vec2 CircleCentre, float r, float z_removal){\nfloat Z = z_removal + sqrt((r*r-(CircleCentre.x)*(CircleCentre.x)-(CircleCentre.y)*(CircleCentre.y)));\nreturn Z;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    vec2 uv = fragCoord/iResolution.xy * vec2(iResolution.x/iResolution.y, 1.0);\n    \n    float removal1 = float(sin(iTime)*0.8); \n    vec2 removal2 = vec2(sin(iTime)*0.2, cos(iTime)*0.2);\n        \n    float r1 = 0.2*(0.6 + 0.5 * sin(0.5 * iTime));\n    vec2 CircleCentre1=vec2(0.6, 0.7);\n    CircleCentre1.x= uv.x + 0.05*removal1 - 0.5;\n    CircleCentre1.y= uv.y + 0.05*removal1 - 0.5;\n \n    vec3 green = vec3(0.0, 1.0, 0.3);\n    vec3 yellow = vec3(1.0, 1.0, 0.0);\n    vec3 str = mix(green, yellow, mod(floor((CircleCentre1.y)* 55.0), 2.0));\n    \n    float r2 = 0.15;\n    vec2 CircleCentre2 = vec2(0.9, 0.9);\n    CircleCentre2.x = uv.x + removal2.x-1.2;\n    CircleCentre2.y = uv.y+removal2.y-0.7;\n    \n    vec3 v0 = vec3(0.7 + 0.3*sin(iTime), 0.4 + 0.3*cos(iTime), 1.0);\n    vec3 v1 = vec3(0.5 + 0.3*sin(iTime), 0.7 + 0.3*cos(iTime), 1.0);\n    vec3 v2 = vec3(0.9 + 0.3*sin(iTime), 0.8 + 0.3*cos(iTime), 1.0);\n    \n    \n    vec3 v3 = vec3(0.9- 0.2*cos(iTime), 0.8- 0.2*sin(iTime), 3.0);\n    vec3 v4 = vec3(1.5 - 0.2*cos(iTime),  0.6 - 0.2*sin(iTime), 0.0);\n    vec3 v5 = vec3(1.0 - 0.2*cos(iTime), 0.2 - 0.2*sin(iTime), 5.0);\n    \n    bool arr[5];\n    arr[0]=IsInRectangle(uv, iTime);\n    arr[1]=IsInCircle(uv, CircleCentre1, r1);\n    arr[2]=isInsideTriangle(v0, v1, v2, uv);\n    arr[3]=IsInCircle(uv, CircleCentre2, r2);\n    arr[4]=isInsideTriangle(v3, v4, v5, uv);\n    \n    vec3 triangleGradientStart = vec3(0.2, 0.8, 0.7);\n    vec3 triangleGradientEnd = vec3(0.7, 0.4, 0.5);\n    vec3 pink = vec3(1.0, 0.3, 1.0);\n    vec3 blue = vec3(0.3, 0.5, 1.0);\n    vec3 lines = mix(pink, blue, mod(floor((uv.y + removal2.y)*50.0), 3.0));\n    vec3 orange = vec3(0.8, 0.5, 0.0);\n    vec3 darkBlue = vec3(0.1, 0.1, 0.6);\n    vec3 stripes = mix(darkBlue, orange, mod(floor((uv.x + removal2.x )* 30.0), 2.0));\n    vec3 triangleGradientColor = computeTriangleGradient(uv, v3, v4, v5, triangleGradientStart, triangleGradientEnd, removal2.y);\n    \n    vec4 col[5];\n    col[0]=vec4(0.7, 0.4, 1.0, 1.0);\n    col[1]=vec4(str, 2.0); \n    col[2]=vec4(0.4, 0.0, 1.0, 1.0);\n    col[3]=vec4(stripes + lines, 1.0); \n    col[4] = vec4(triangleGradientColor, 0.5);\n    \n    float z[5];\n    z[0] = 1.3;\n    z[1]= Z_circle(CircleCentre1,r1, 1.15);\n    z[2] = Z_triangle(uv, v0, v1, v2);\n    z[4] = Z_triangle(uv, v3, v4, v5);\n    z[3]= Z_circle(CircleCentre2,r2, 0.8);\n    \n    vec4 BGCol1 = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 BGCol2 = vec4(0.5, 0.5, 0.5, 1.0);\n    vec4 BGColor = mix(BGCol1, BGCol2, mod(floor((uv.x)*30.0), 2.0));\n    float max= -Max_Z;\n    \n    for(int i = 0; i<5; i++){\n        if(arr[i]){\n            if(z[i] > max){\n                BGColor = col[i];\n                max = z[i];\n            }\n        }\n    }\n    \n    fragColor = vec4(BGColor);\n    return;\n}","name":"Image","description":"","type":"image"}]}