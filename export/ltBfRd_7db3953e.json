{"ver":"0.1","info":{"id":"ltBfRd","date":"1516834433","viewed":550,"name":"thizzSoup","username":"jrsa","description":"texture coordinates in some calculations are not scaled to the size of the canvas, so please maximize for maximal thizzness\n\nUPDATE 2/23/2018 mouse position controls stuff","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["feedback","shaderclub"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n        \n    // buffer A is drawn into using the blur shader (which \n    // reads from buffer A, drawn by feedback shader, which reads from buffer B...)\n\n    vec4 bufferA = texture(iChannel0, uv);\n    fragColor = bufferA;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// box blur\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 src = fragCoord / iResolution.xy;\n    \n    vec2 offs = vec2(1. / iResolution.x, 1. / iResolution.y);\n    \n    // distance of neighborhood texels (effectively half of the blur kernel width)\n    float width = 0.5;\n    vec2 tc4 = src;\n    vec2 tc1 = src + vec2(0.0, -offs.t * width);\n    vec2 tc3 = src + vec2(-offs.s * width, 0.0);\n    vec2 tc5 = src + vec2(offs.s * width, 0.0);\n    vec2 tc7 = src + vec2(0.0, offs.t * width);\n\n    vec2 tc0 = src + vec2(-offs.s * width, -offs.t * width);\n    vec2 tc2 = src + vec2(offs.s * width, -offs.t * width);\n    vec2 tc6 = src + vec2(-offs.s * width, offs.t * width);\n    vec2 tc8 = src + vec2(offs.s * width, offs.t * width);\n    \n    // texels come from iChannel0 (assigned to buffer B)\n    vec4 col0 = texture(iChannel0, tc0);\n    vec4 col1 = texture(iChannel0, tc1);\n    vec4 col2 = texture(iChannel0, tc2);\n    vec4 col3 = texture(iChannel0, tc3);\n    vec4 col4 = texture(iChannel0, tc4);\n    vec4 col5 = texture(iChannel0, tc5);\n    vec4 col6 = texture(iChannel0, tc6);\n    vec4 col7 = texture(iChannel0, tc7);\n    vec4 col8 = texture(iChannel0, tc8);\n        \n    fragColor = (col4 + col2 + col0 + col6 + col8) * 0.18;\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec4 imageIn = texture(iChannel1, uv);\n\n    vec2 tc = uv;\n \n    // constant zoom/rotate\n    float scale_factor = 0.999;\n    float fixangle = 0.001;\n    tc -= vec2(0.5);\n    tc *= mat2(scale_factor, 0.0, 0.0, scale_factor);\n    tc *= mat2(cos(fixangle), sin(fixangle), -sin(fixangle), cos(fixangle));\n    tc += vec2(0.5);\n    vec4 feedbackIn  = texture(iChannel0, tc);\n    \n    vec3 s = rgb2hsv(feedbackIn.rgb);\n\n    float d = length(s.bg);\n    float e = length(s.rb);\n    \n    vec2 mousePos = iMouse.xy / iResolution.xy;\n    \n    float prelook_amount = mousePos.x;\n    vec4 prelook = texture(iChannel0, tc + vec2(-d * prelook_amount, -e * prelook_amount));\n    \n    d *= prelook.b;\n    d += length(prelook) / 4.0;\n    d -= length(s) / 4.0;\n    \n    float displace_amount = mousePos.y / 40.0;\n    displace_amount -= mousePos.y / 20.0;\n    vec4 feedbackTransformed = texture(iChannel0,  tc + vec2(d * displace_amount, e * displace_amount));\n\n    feedbackTransformed += 0.175 * vec4(1.0, 0.6, 1.0, 0.0);\n    feedbackTransformed -= (prelook * 0.15);\n    \n    imageIn.a = 1.0;\n    \n    // thanks mikebecause\n    if(iFrame <= 10 || iMouse.z > 0.0){\n        fragColor = imageIn;\n    } else {\n        fragColor = feedbackTransformed;\n    }\n}","name":"Buf B","description":"","type":"buffer"}]}