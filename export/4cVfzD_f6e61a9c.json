{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"texture","id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"code":"const float lineNumber = 19.6401;\nconst float obliquity = 0.10516;\nconst float screenWidth = 1440.0;\nconst float screenHeight = 2560.0;\n\nconst float pitch  = (screenWidth * 3. ) / lineNumber;\nconst float slope  = -obliquity * (screenHeight / screenWidth);\nconst float center = 0.0;\nconst float invView = 0.0;\n\nconst vec2 quiltSize = vec2(8., 5.);\nconst float numViews = quiltSize.x * quiltSize.y;\n\n// 越小纵深越大\nconst float threshold = 15.;\nconst float quiltColumns = quiltSize.x;\nconst float quiltRows = quiltSize.y;\n\n// 0: 凹陷，0.5：居中，1：突出\nconst float protrude = 0.5;\n\n\n\n\nvec2 mirrored(vec2 v) {\n  vec2 m = mod(v,2.);\n  return mix(m,2.0 - m, step(1.0 ,m));\n}\n\nvec4 depthQuilts(vec2 iuv)\n{\n    vec2 coord = iuv * vec2(quiltColumns, quiltRows);\n    vec2 fractCoord = fract(coord);\n    vec2 floorCoord = floor(coord);\n    float imageId = floorCoord.x + floorCoord.y * quiltColumns;\n    float valueId = imageId / (quiltColumns * quiltRows - 1.);\n    vec2 uv = fractCoord;\n    vec4 depthMap = texture(iChannel1, mirrored(uv));\n    vec2 fake3d = vec2(uv.x + (depthMap.r - (1. - protrude) ) * (( valueId - 0.5 ) * -2. / threshold), uv.y );\n    vec4 color = texture(iChannel0, mirrored(fake3d));\n    return color;\n}\n\n\nvec2 texArr(vec3 uvz) {\n    float z = floor(uvz.z * numViews);\n    float x = (mod(z, quiltSize.x) + uvz.x) / quiltSize.x;\n    float y = (floor(z / quiltSize.x) + uvz.y) / quiltSize.y;\n    return vec2(x, y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Width of a subpixel\n    float subp = 1.0 / (iResolution.x * 3.0);\n    vec3 rgb;\n    vec2 uv = fragCoord / iResolution.xy;\n    for (int chan = 0; chan < 3; ++chan) {\n        float z = (uv.x + float(chan) * subp + uv.y * slope) * pitch - center;\n        z = mod(z + ceil(abs(z)), 1.0);\n        z = (1.0 - invView) * z + invView * (1.0 - z);\n        vec2 iuv = texArr(vec3(uv, z));\n        rgb[chan] = depthQuilts(iuv)[chan];\n    }\n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4cVfzD","date":"1733828960","viewed":49,"name":"Depth Maps to C1","username":"xioxin","description":"Depth Maps to C1","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["depth","c1"],"hasliked":0,"parentid":"","parentname":""}}