{"ver":"0.1","info":{"id":"WdcSDs","date":"1573471622","viewed":407,"name":"CubeMap Debug","username":"sapporo_dynamite","description":"CubeMap Debug\n[mode]\n0. equirectangular\n1. sphere map\n2. cubemap Unfold","likes":6,"published":1,"flags":16,"usePreview":0,"tags":["cubemap","fisheye","debug","equirectangular","spheremap","unfold"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tCubeMap Debug \n\n\timplemented CubeMap Debug Display\n\n\tauthor:\n\tsapporo_dynamite/2019 \n\n\tLicense :\n\tCreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n    Shader:\n\n    cubemap to fisheye \n\thttps://www.shadertoy.com/view/lssGD4\n\n    Cubemap debug display\n    https://www.shadertoy.com/view/tdjXDt\n\n　　Reference：\n\n\tURL:\n\tMSDN 立方体環境マッピング（Direct3D 9）\n\thttps://docs.microsoft.com/ja-jp/windows/win32/direct3d9/cubic-environment-mapping?redirectedfrom=MSDN\n\n\tScali's OpenBlog™\n\tCubemaps\n\thttps://scalibq.wordpress.com/2013/06/23/cubemaps/\n\n\tOpenGLでequirectangular形式の画像を扱う場合の作法\n\thttps://qiita.com/meronpan/items/d240c0f831cd8b6fe9c4\n*/\n\n/*\n2019/11/15   \n  1.0.0 → 1.0.1\n\t・keyboard input 対応\n\n2019/11/11   \n  0.0 → 1.0.0\n\t・最初のリリース\n*/\n\nbool keyPress(int ascii){\n    return (texture(iChannel1,vec2((.5+float(ascii))/256.,0.25)).x > 0.);\n}\n\n\nconst float PI = 3.1415926535897932384626433832795;\n\n// from : cubemap to fisheye https://www.shadertoy.com/view/lssGD4\n// Adapted from http://strlen.com/gfxengine/fisheyequake/\nvec3 fisheye_lookup(float fov, vec2 position)\n{\n\tvec2 d = position - 0.5;\n    d.x /= iResolution.y / iResolution.x;\n\t\n\tfloat yaw = sqrt(d.x*d.x+d.y*d.y) * fov;\n\n\tfloat roll = -atan(d.y, d.x);\n\tfloat sx = sin(yaw) * cos(roll);\n\tfloat sy = sin(yaw) * sin(roll);\n\tfloat sz = cos(yaw);\t\n\n\treturn vec3(sx, sy, sz);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv  = vec2(2.) * fragCoord/iResolution.xy - vec2(1.);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv2 = fragCoord/iResolution.xy;\n    \n    vec3 col = vec3(0);\n    int wait_sec=2;\n    int mode = int(mod(iTime,3.*float(wait_sec)))/wait_sec; \n      \n    // keyboard\n    if(keyPress(48)) mode = 0;\n    if(keyPress(49)) mode = 1;\n    if(keyPress(50)) mode = 2;\n       \n    if(mode == 0)\n    {\n        // 正距円筒図法\n        // equirectangular\n        \n        // 経度 -180 ～ 180 , 緯度-90 ～ 90\n    \tvec2 thetaphi  = uv * vec2(PI,PI/2.);\n        \n        col = texture(iChannel0, vec3( cos(thetaphi.y) * cos(thetaphi.x),\n                                       sin(thetaphi.y),\n                                       cos(thetaphi.y) * sin(thetaphi.x)) ).rgb;\n    }\n    else if(mode == 1){\n        // スフィアマップ\n        // sphere \n        col = texture(iChannel0, vec3( fisheye_lookup( radians(-360.), uv2) ) ).rgb;\n        uv.x /= iResolution.y / iResolution.x;\n        float d = distance(0.0, uv.x * uv.x + uv.y * uv.y);\n        if(d > 1.0){\n            col = vec3(0.);\n        }\n    }\n    else if(mode == 2){\n        // 展開図\n        // cubemap Unfold\n        int x = int(floor(uv2.x / (1.0/4.)));\n        int y = int(floor(uv2.y / (1.0/3.)));\n        float offsetX = 1./4. * float(x);\n        float offsetY = 1./3. * float(y);\n        //  0.0 ～ 1.0\n        vec2 st = (uv2 - vec2(offsetX,offsetY)) * vec2(4.0, 3.0);\n        // -1.0 ～ 1.0\n        st = (st - 0.5) * 2.;\n        \n        if(y == 0 && x == 1){\n            // Bottom\n            col = texture(iChannel0,vec3(st.x, -1, st.y)).rgb;\n        }\n        else if(y == 1)\n        {\n            if(x == 0){\n                // Left\n                col = texture(iChannel0,vec3(-1.0, st.y, st.x)).rgb;\n            }\n            else if(x == 1) {\n                // Front\n               col = texture(iChannel0,vec3(st.x, st.y, 1)).rgb;\n            }\n            else if(x == 2){\n                // Right\n                col = texture(iChannel0,vec3(1.0, st.y, -st.x)).rgb;\n            }\n            else if(x == 3){\n                // Back\n                col = texture(iChannel0,vec3(-st.x, st.y, -1)).rgb;\n            }\n        }\n        else if(y == 2 && x == 1){\n            // Top\n            col = texture(iChannel0,vec3(st.x,  1, -st.y)).rgb;\n        }        \n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}