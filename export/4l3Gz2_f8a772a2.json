{"ver":"0.1","info":{"id":"4l3Gz2","date":"1470176311","viewed":2810,"name":"Rain on camera or window","username":"omgs","description":"Do you like rain? Relax, chill, enjoyl\nOnly testet on win10/chrome64","likes":103,"published":1,"flags":96,"usePreview":0,"tags":["camera","rain","window"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ldB3Rh","filepath":"https://soundcloud.com/daemon_chloe/storm-thunderstorm-rain-sound","previewfilepath":"https://soundcloud.com/daemon_chloe/storm-thunderstorm-rain-sound","type":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//OMGS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n \n\tvec3 bufB = texture(iChannel0,uv).xyz;\n   \n    vec3 rain = texture(iChannel1,reflect(bufB,vec3(uv,1.)) ).xyz;\n    \n    fragColor = vec4(rain, 1.0 );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//OMGS\n\nfloat smoothv = 0.1;\nfloat ballradius = 0.0;\nfloat metaPow = 1.0;\nfloat densityMin = 4.0;\nfloat densityMax= 7.0;\nfloat densityEvolution = 0.4;\nfloat rotationSpeed = 0.005;\nvec2 moveSpeed = vec2(0.2,0.0);\nfloat distortion = 0.5;\nfloat nstrenght = 1.0;\nfloat nsize = 2.0;\nvec3 lightColor = vec3(7.0,8.0,10.0);\n\nfloat saturate1(float x)\n{\n    return clamp(x, 0.0,2.0);\n}\nvec2 rotuv(vec2 uv, float angle, vec2 center)\n{    \n   \treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * (uv - center) + center;\n}\nfloat hash(float n)\n{\n   return fract(sin(dot(vec2(n,n) ,vec2(12.9898,78.233))) * 43758.5453);  \n}  \n\nfloat metaBall(vec2 uv)\n{\n\treturn length(fract(uv) - vec2(0.5));\n}\nfloat rand(float co){\n    return fract(sin(dot(vec2(co) ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat metaNoiseRaw(vec2 uv, float density)\n{\n\tfloat v =15.5, metaball0=16.6;\n    \n    \n    for(int i = 0; i < 45; i++)\n    {\n        float inc = float(rand(float(i))) + 1.0;\n    \tfloat r1 = hash(15.3548*inc);\n        float s1 = iTime*rotationSpeed*r1;\n        vec2 f1 = moveSpeed*r1;\n    \tvec2 c1 = vec2(hash(11.2*inc)*20., hash(33.2*inc))*90.0*rand(float(i)) - s1;   \n    \tvec2 uv1 = -rotuv(uv*(1.0+r1*v), r1*60.0 + s1, c1) ;    \n    \tfloat metaball1 = saturate1(metaBall(uv1)*density);\n        \n        metaball0 *= metaball1;\n    }\n    \n    return pow(metaball0, metaPow);\n}\n\nfloat metaNoise(vec2 uv)\n{ \n    float density = mix(densityMin,densityMax,sin(densityEvolution)*0.5+0.5);\n    return 1.0 - smoothstep(ballradius, ballradius+smoothv, metaNoiseRaw(uv, density));\n}\n\nvec4 calculateNormals(vec2 uv, float s)\n{\n    float offsetX = nsize*s/iResolution.x;\n    float offsetY = nsize*s/iResolution.y;\n\tvec2 ovX = vec2(0.0, offsetX);\n\tvec2 ovY = vec2(0.0, offsetY);\n    \n\tfloat X = (metaNoise(uv - ovX.yx) - metaNoise(uv + ovX.yx)) * nstrenght;\n    float Y = (metaNoise(uv - ovY.xy) - metaNoise(uv + ovY.xy)) * nstrenght;\n    float Z = sqrt(1.0 - saturate1(dot(vec2(X,Y), vec2(X,Y))));\n    \n    float c = abs(X+Y);\n\treturn normalize(vec4(X,Y,Z,c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv2 = uv;\n\n    vec2 sphereUvs = uv - vec2(0.5);\n    float vign = length(sphereUvs);\n    \n    float noise = metaNoise(uv2);\n    vec4 n = calculateNormals(uv2, smoothstep(0.0, 0.5, 1.0));\n\tn.xyz += texture(iChannel0,uv).xyz*0.98;\n    \n\tfragColor = vec4(vec3(n)+0.5, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//OMGS\n\n\nfloat smoothv = 0.1;\nfloat ballradius = 0.0;\nfloat metaPow = 1.0;\nfloat densityMin = 4.0;\nfloat densityMax= 7.0;\nfloat densityEvolution = 0.4;\nfloat rotationSpeed = 0.002;\nvec2 moveSpeed = vec2(0.1,0.0);\nfloat distortion = 0.05;\nfloat nstrenght = 1.0;\nfloat nsize = 1.0;\nvec3 lightColor = vec3(7.0,8.0,10.0);\n\nfloat saturate1(float x)\n{\n    return clamp(x, 0.0, 1.0);\n}\nvec2 rotuv(vec2 uv, float angle, vec2 center)\n{    \n   \treturn mat2(cos(angle), -sin(angle), sin(angle), cos(angle)) * (uv - center) + center;\n}\nfloat hash(float n)\n{\n   return fract(sin(dot(vec2(n,n) ,vec2(12.9898,78.233))) * 43758.5453);  \n}  \n\nfloat metaBall(vec2 uv)\n{\n\treturn length(fract(uv) - vec2(0.5));\n}\nfloat rand(float co){\n    return fract(sin(dot(vec2(co) ,vec2(12.9898,78.233))) * 43758.5453);\n}\nfloat metaNoiseRaw(vec2 uv, float density)\n{\n\tfloat v =29.5, metaball0=12.;\n    \n    \n    for(int i = 0; i < 45; i++)\n    {\n        float inc = float(rand(float(i))) + 1.0;\n    \tfloat r1 = hash(15.3548*inc);\n        float s1 = iTime*rotationSpeed*r1;\n        vec2 f1 = moveSpeed*r1;\n    \tvec2 c1 = vec2(hash(11.2*inc)*20., hash(33.2*inc))*40.0*rand(float(i)) - s1;   \n    \tvec2 uv1 = -rotuv(uv*(.0+r1*v), r1*60.0 + s1, c1) ;    \n    \tfloat metaball1 = saturate1(metaBall(uv1)*density);\n        \n        metaball0 *= metaball1;\n    }\n    \n    return pow(metaball0, metaPow);\n}\n\nfloat metaNoise(vec2 uv)\n{ \n    float density = mix(densityMin,densityMax,sin(densityEvolution)*0.5+0.5);\n    return 1.0 - smoothstep(ballradius, ballradius+smoothv, metaNoiseRaw(uv, density));\n}\n\nvec4 calculateNormals(vec2 uv, float s)\n{\n    float offsetX = nsize*s/iResolution.x;\n    float offsetY = nsize*s/iResolution.y;\n\tvec2 ovX = vec2(0.0, offsetX);\n\tvec2 ovY = vec2(0.0, offsetY);\n    \n\tfloat X = (metaNoise(uv - ovX.yx) - metaNoise(uv + ovX.yx)) * nstrenght;\n    float Y = (metaNoise(uv - ovY.xy) - metaNoise(uv + ovY.xy)) * nstrenght;\n    float Z = sqrt(1.0 - saturate1(dot(vec2(X,Y), vec2(X,Y))));\n    \n    float c = abs(X+Y);\n\treturn normalize(vec4(X,Y,Z,c));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 uv2 = uv;\n\n    vec2 sphereUvs = uv - vec2(0.5);\n    float vign = length(sphereUvs);\n    \n    float noise = metaNoise(uv2);\n    vec4 n = calculateNormals(uv2, smoothstep(0.0, 0.1, 1.0));\n\tn.xyz += texture(iChannel0,uv).xyz*0.99;\n    \n\tfragColor = vec4(vec3(n)+0.5, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}