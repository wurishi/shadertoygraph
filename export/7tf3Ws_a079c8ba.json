{"ver":"0.1","info":{"id":"7tf3Ws","date":"1623757520","viewed":1352,"name":"easings_cheat_sheet","username":"skaplun","description":"UPD: Fixed the plot appearance. Plot based on @Flyguy's 'Implicit Plotter'. \nThe functions itself is taken from easings.net","likes":99,"published":1,"flags":0,"usePreview":0,"tags":["2d","animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define AA 20./iResolution.x\n#define AA2 7./iResolution\nvec2 ASPECT;\n\nconst vec2 GRAD_OFFS = vec2(0.001, 0);\n#define DISP_SCALE 2.\n#define LINE_SIZE 10.\n#define GRAD(f, p) (vec2(f(p) - f(p + GRAD_OFFS.xy), f(p) - f(p + GRAD_OFFS.yx)) / GRAD_OFFS.xx)\n#define PLOT(f, p) return smoothstep(0.0, (LINE_SIZE / iResolution.y * DISP_SCALE), abs(f(p) / length(GRAD(f,p))))\n\nfloat plot(vec2 uv, int id){\n    switch(id){\n        case 0:  PLOT(easeInSine, uv); break;\n        case 1:  PLOT(easeOutSine, uv); break;\n        case 2:  PLOT(easeInOutSine, uv); break;\n        case 3:  PLOT(easeInQuad, uv); break;\n        case 4:  PLOT(easeOutQuad, uv); break;\n        case 5:  PLOT(easeInOutQuad, uv); break;\n        case 6:  PLOT(easeInCubic, uv); break;\n        case 7:  PLOT(easeOutCubic, uv); break;\n        case 8:  PLOT(easeInOutCubic, uv); break;\n        case 9:  PLOT(easeInQuart, uv); break;\n        case 10: PLOT(easeOutQuart, uv); break;\n        case 11: PLOT(easeInOutQuart, uv); break;\n        case 12: PLOT(easeInQuint, uv); break;\n        case 13: PLOT(easeOutQuint, uv); break;\n        case 14: PLOT(easeInOutQuint, uv); break;\n        case 15: PLOT(easeInExpo, uv); break;\n        case 16: PLOT(easeOutExpo, uv); break;\n        case 17: PLOT(easeInOutExpo, uv); break;\n        case 18: PLOT(easeInCirc, uv); break;\n        case 19: PLOT(easeOutCirc, uv); break;\n        case 20: PLOT(easeInOutCirc, uv); break;\n        case 21: PLOT(easeInBack, uv); break;\n        case 22: PLOT(easeOutBack, uv); break;\n        case 23: PLOT(easeInOutBack, uv); break;\n        case 24: PLOT(easeInElastic, uv); break;\n        case 25: PLOT(easeOutElastic, uv); break;\n        case 26: PLOT(easeInOutElastic, uv); break;\n        case 27: PLOT(easeInBounce, uv); break;\n        case 28: PLOT(easeOutBounce, uv); break;\n        case 29: PLOT(easeInOutBounce, uv); break;\n        default:;\n    }\n}\n\nfloat fun(float phase, int id){\n    switch(id){\n        case 0:  return easeInSine(phase);\n        case 1:  return easeOutSine(phase);\n        case 2:  return easeInOutSine(phase);\n        case 3:  return easeInQuad(phase);\n        case 4:  return easeOutQuad(phase);\n        case 5:  return easeInOutQuad(phase);\n        case 6:  return easeInCubic(phase);\n        case 7:  return easeOutCubic(phase);\n        case 8:  return easeInOutCubic(phase);\n        case 9:  return easeInQuart(phase);\n        case 10: return easeOutQuart(phase);\n        case 11: return easeInOutQuart(phase);\n        case 12: return easeInQuint(phase);\n        case 13: return easeOutQuint(phase);\n        case 14: return easeInOutQuint(phase);\n        case 15: return easeInExpo(phase);\n        case 16: return easeOutExpo(phase);\n        case 17: return easeInOutExpo(phase);\n        case 18: return easeInCirc(phase);\n        case 19: return easeOutCirc(phase);\n        case 20: return easeInOutCirc(phase);\n        case 21: return easeInBack(phase);\n        case 22: return easeOutBack(phase);\n        case 23: return easeInOutBack(phase);\n        case 24: return easeInElastic(phase);\n        case 25: return easeOutElastic(phase);\n        case 26: return easeInOutElastic(phase);\n        case 27: return easeInBounce(phase);\n        case 28: return easeOutBounce(phase);\n        case 29: return easeInOutBounce(phase);\n        default: return 0.;\n    }\n}\n\nconst float BG = .2;\nconst float WIDTH = .05;\nvec3 cell(vec2 uv, int id, float time){\n    vec3 res = vec3(BG);\n    float p = max(smoothstep(AA2.y, 0., distance(uv.y, 0.)) * smoothstep(.5 + AA2.x, .5, distance(uv.x, .5)),\n                  smoothstep(AA2.x, 0., distance(uv.x, 0.)) * smoothstep(.5 + AA2.y, .5, distance(uv.y, .5)));\n    res = mix(res, vec3(.8), p);\n    res = mix(res, vec3(.8), smoothstep(AA2.y, 0., distance(uv.y, -.4)) * smoothstep(.5 + AA2.x, .5, distance(uv.x, .5)));\n    res = mix(res, vec3(.5, .5, 0.), smoothstep(AA, 0., distance(uv.x, uv.y)) * smoothstep(.5 + AA2.x, .5, distance(uv.x, .5)));\n    \n    float t = fun(time, id);\n    vec3 pltClr = mix(vec3(1., 0., 0.), vec3(.8), smoothstep(uv.x, uv.x + AA2.x, time));\n    float pl = plot(uv, id);\n    res = mix(pltClr, res, pl);\n    \n    res = mix(res, vec3(.2), smoothstep(.5, .5 + AA, distance(uv.x, .5)));\n    \n    float l = length((uv - vec2(t, -.4)) * ASPECT);\n    res = mix(res, vec3(.8), smoothstep(.25 + AA2.y, .25, l));\n    res = mix(res, vec3(.4 + .4 * l), smoothstep(.2 + AA2.y, .2, l));\n    return res;\n}\n\nconst vec2 ITEMS_COUNT = vec2(6., 5.);\nconst vec2 GRID_SIZE = vec2(1.)/ITEMS_COUNT;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 gs = GRID_SIZE;\n    \n    \n    vec2 c = floor(uv/gs);\n    int id = int(ITEMS_COUNT.x) * int(c.y) + int(c.x);\n    \n    ASPECT = iResolution.xy/min(iResolution.x, iResolution.y) * GRID_SIZE/GRID_SIZE.y;\n    vec2 muv = mod(uv, gs)/gs;\n    \n    float time = clamp(mod(iTime, 2.)/1.5, 0., 1.);\n    vec2 offset = vec2(.5, .9);\n    ASPECT *= vec2(1.2, 1.);\n    fragColor = vec4(cell(muv * (1. + offset) - offset * .5 - vec2(0., offset.y * .25), id, time), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = acos(-1.);\n\nfloat easeInSine(float x) {\n    return 1. - cos((x * PI) / 2.);\n}\n\nfloat easeInSine(vec2 uv) {\n    return uv.y - easeInSine(uv.x);\n}\n\nfloat easeOutSine(float x) {\n    return sin((x * PI) / 2.);\n}\n\nfloat easeOutSine(vec2 uv) {\n    return uv.y - easeOutSine(uv.x);\n}\n\nfloat easeInOutSine(float x) {\n    return -(cos(PI * x) - 1.) / 2.;\n}\n\nfloat easeInOutSine(vec2 uv) {\n    return uv.y - easeInOutSine(uv.x);\n}\n\nfloat easeInCubic(float x) {\n    return x * x * x;\n}\n\nfloat easeInCubic(vec2 uv) {\n    return uv.y - easeInCubic(uv.x);\n}\n\nfloat easeOutCubic(float x) {\n    return 1. - pow(1. - x, 3.);\n}\n\nfloat easeOutCubic(vec2 uv) {\n    return uv.y - easeOutCubic(uv.x);\n}\n\nfloat easeInOutCubic(float x) {\n    return x < .5 ? 4. * x * x * x : 1. - pow(-2. * x + 2., 3.) / 2.;\n}\n\nfloat easeInOutCubic(vec2 uv) {\n    return uv.y - easeInOutCubic(uv.x);\n}\n\nfloat easeInQuint(float x) {\n    return x * x * x * x * x;\n}\n\nfloat easeInQuint(vec2 uv) {\n    return uv.y - easeInQuint(uv.x);\n}\n\nfloat easeOutQuint(float x) {\n    return 1. - pow(1. - x, 5.);\n}\n\nfloat easeOutQuint(vec2 uv) {\n    return uv.y - easeOutQuint(uv.x);\n}\n\nfloat easeInOutQuint(float x) {\n    return x < .5 ? 16. * x * x * x * x * x : 1. - pow(-2. * x + 2., 5.) / 2.;\n}\n\nfloat easeInOutQuint(vec2 uv) {\n    return uv.y - easeInOutQuint(uv.x);\n}\n\nfloat easeInCirc(float x) {\n    return 1. - sqrt(abs(1. - pow(x, 2.)));\n}\n\nfloat easeInCirc(vec2 uv) {\n    return uv.y - easeInCirc(uv.x);\n}\n\nfloat easeOutCirc(float x) {\n    return sqrt(abs(1. - pow(x - 1., 2.)));\n}\n\nfloat easeOutCirc(vec2 uv) {\n    return uv.y - easeOutCirc(uv.x);\n}\n\nfloat easeInOutCirc(float x) {\n    return x < .5\n      ? (1. - sqrt(1. - pow(2. * x, 2.))) / 2.\n      : (sqrt(1. - pow(-2. * x + 2., 2.)) + 1.) / 2.;\n}\n\nfloat easeInOutCirc(vec2 uv) {\n    return uv.y - easeInOutCirc(uv.x);\n}\n\nfloat easeInElastic(float x) {\n    float c4 = (2. * PI) / 3.;\n\n    return x == 0.\n      ? 0.\n      : x == 1.\n      ? 1.\n      : -pow(2., 10. * x - 10.) * sin((x * 10. - 10.75) * c4);\n}\n\nfloat easeInElastic(vec2 uv) {\n    return uv.y - easeInElastic(uv.x);\n}\n\nfloat easeOutElastic(float x) {\n    float c4 = (2. * PI) / 3.;\n\n    return x == 0.\n      ? 0.\n      : x == 1.\n      ? 1.\n      : pow(2., -10. * x) * sin((x * 10. - .75) * c4) + 1.;\n}\n\nfloat easeOutElastic(vec2 uv) {\n    return uv.y - easeOutElastic(uv.x);\n}\n\nfloat easeInOutElastic(float x) {\n    float c5 = (2. * PI) / 4.5;\n\n    return x == 0.\n      ? 0.\n      : x == 1.\n      ? 1.\n      : x < .5\n      ? -(pow(2., 20. * x - 10.) * sin((20. * x - 11.125) * c5)) / 2.\n      : (pow(2., -20. * x + 10.) * sin((20. * x - 11.125) * c5)) / 2. + 1.;\n}\n\nfloat easeInOutElastic(vec2 uv) {\n    return uv.y - easeInOutElastic(uv.x);\n}\n\nfloat easeInQuad(float x) {\n    return x * x;\n}\n\nfloat easeInQuad(vec2 uv) {\n    return uv.y - easeInQuad(uv.x);\n}\n\nfloat easeOutQuad(float x) {\n    return 1. - (1. - x) * (1. - x);\n}\n\nfloat easeOutQuad(vec2 uv) {\n    return uv.y - easeOutQuad(uv.x);\n}\n\nfloat easeInOutQuad(float x) {\n    return x < .5 ? 2. * x * x : 1. - pow(-2. * x + 2., 2.) / 2.;\n}\n\nfloat easeInOutQuad(vec2 uv) {\n    return uv.y - easeInOutQuad(uv.x);\n}\n\nfloat easeInQuart(float x) {\n    return x * x * x * x;\n}\n\nfloat easeInQuart(vec2 uv) {\n    return uv.y - easeInQuart(uv.x);\n}\n\nfloat easeOutQuart(float x) {\n    return 1. - pow(1. - x, 4.);\n}\n\nfloat easeOutQuart(vec2 uv) {\n    return uv.y - easeOutQuart(uv.x);\n}\n\nfloat easeInOutQuart(float x) {\n    return x < .5 ? 8. * x * x * x * x : 1. - pow(-2. * x + 2., 4.) / 2.;\n}\n\nfloat easeInOutQuart(vec2 uv) {\n    return uv.y - easeInOutQuart(uv.x);\n}\n\nfloat easeInExpo(float x) {\n    return x == 0. ? 0. : pow(2., 10. * x - 10.);\n}\n\nfloat easeInExpo(vec2 uv) {\n    return uv.y - easeInExpo(uv.x);\n}\n\nfloat easeOutExpo(float x) {\n    return x == 1. ? 1. : 1. - pow(2., -10. * x);\n}\n\nfloat easeOutExpo(vec2 uv) {\n    return uv.y - easeOutExpo(uv.x);\n}\n\nfloat easeInOutExpo(float x) {\n    return x == 0.\n      ? 0.\n      : x == 1.\n      ? 1.\n      : x < .5 ? pow(2., 20. * x - 10.) / 2.\n      : (2. - pow(2., -20. * x + 10.)) / 2.;\n}\n\n\nfloat easeInOutExpo(vec2 uv) {\n    return uv.y - easeInOutExpo(uv.x);\n}\n\nfloat easeInBack(float x) {\n    float c1 = 1.70158;\n    float c3 = c1 + 1.;\n\n    return c3 * x * x * x - c1 * x * x;\n}\n\nfloat easeInBack(vec2 uv) {\n    return uv.y - easeInBack(uv.x);\n}\n\nfloat easeOutBack(float x) {\n    float c1 = 1.70158;\n    float c3 = c1 + 1.;\n\n    return 1. + c3 * pow(x - 1., 3.) + c1 * pow(x - 1., 2.);\n}\n\nfloat easeOutBack(vec2 uv) {\n    return uv.y - easeOutBack(uv.x);\n}\n\nfloat easeInOutBack(float x) {\n    float c1 = 1.70158;\n    float c2 = c1 * 1.525;\n\n    return x < .5\n      ? (pow(2. * x, 2.) * ((c2 + 1.) * 2. * x - c2)) / 2.\n      : (pow(2. * x - 2., 2.) * ((c2 + 1.) * (x * 2. - 2.) + c2) + 2.) / 2.;\n}\n\nfloat easeInOutBack(vec2 uv) {\n    return uv.y - easeInOutBack(uv.x);\n}\n\nfloat easeOutBounce(float x) {\n    float n1 = 7.5625;\n    float d1 = 2.75;\n\n    if (x < 1. / d1) {\n        return n1 * x * x;\n    } else if (x < 2. / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n}\n\nfloat easeOutBounce(vec2 uv) {\n    return uv.y - easeOutBounce(uv.x);\n}\n\nfloat easeInBounce(float x) {\n    return 1. - easeOutBounce(1. - x);\n}\n\nfloat easeInBounce(vec2 uv) {\n    return uv.y - easeInBounce(uv.x);\n}\n\nfloat easeInOutBounce(float x) {\n    return x < .5\n      ? (1. - easeOutBounce(1. - 2. * x)) / 2.\n      : (1. + easeOutBounce(2. * x - 1.)) / 2.;\n}\n\nfloat easeInOutBounce(vec2 uv) {\n    return uv.y - easeInOutBounce(uv.x);\n}","name":"Common","description":"","type":"common"}]}