{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const float PI = 3.14159265;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    float width = iResolution.x;\n    float height = iResolution.y;\n\n    float scale = width / 1.25;\n\n    float time = iTime * 0.3;\n\n    // calculate the centre of the circular sines\n\tvec2 center = vec2((width / 2.0) + sin(time) * (width / 1.5),\n\t\t\t\t\t   (height / 2.0) + cos(time) * (height / 1.5));\n\t\n\tfloat distance = length(fragCoord.xy - center);\n\t\n\t// circular plasmas sines\n\tfloat circ = (sin(distance / (scale / 7.6) + sin(time * 1.1) * 5.0) + 1.25)\n\t\t\t   + (sin(distance / (scale / 11.5) - sin(time * 1.1) * 6.0) + 1.25);\n\t\n\t// x and y plasma sines\n\tfloat xval = (sin(fragCoord.x / (scale / 6.5) + sin(time * 1.1) * 4.5) + 1.25)\n\t\t\t   + (sin(fragCoord.x / (scale / 9.2) - sin(time * 1.1) * 5.5) + 1.25);\n\t\n\tfloat yval = (sin(fragCoord.y / (scale / 6.8) + sin(time * 1.1) * 4.75) + 1.25)\n\t\t\t   + (sin(fragCoord.y / (scale / 12.5) - sin(time * 1.1) * 5.75) + 1.25);\n\n\t// add the values together for the pixel\n\tfloat tval = circ + xval + yval / 3.0;\n\t\n\t// work out the colour\n\tvec3 color = vec3((cos(PI * tval / 4.0 + time * 3.0) + 1.0) / 2.0,\n\t\t\t\t\t  (sin(PI * tval / 3.5 + time * 3.0) + 1.0) / 2.5,\n\t\t\t\t\t  (sin(PI * tval / 2.0 + time * 3.0) + 2.0) / 8.0);\n\t\n\t// set the fragment colour\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdsSRj","date":"1404482344","viewed":337,"name":"Plasmatron 4","username":"danbarber","description":"Final Plasmatron!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","plasma","demoscene"],"hasliked":0,"parentid":"","parentname":""}}