{"ver":"0.1","info":{"id":"ssjBDm","date":"1648158641","viewed":100,"name":"Three fractals morphing 2","username":"c0rymcg","description":"Blending some classic escape-time fractals together.\nSimilar to my previous example but they morph together in a smooth loop.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","morph","lambda"],"hasliked":0,"parentid":"ssScD3","parentname":"Three Morping fractals"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define TAU 6.28318\n#define maxIterations 100\n#define AA 2\n\n\nvec2 cMult(vec2 c1, vec2 c2){\n   //complex mult\n    float newR = c1.x*c2.x - c1.y*c2.y;\n\tfloat newI = c1.y*c2.x + c1.x*c2.y;\n\treturn vec2(newR,newI);\n}\n\nvec2 f1(vec2 z, vec2 c) {\n    return mat2(z,-z.y,z.x)*z + c;\n}\n\nvec2 f2(vec2 z, vec2 c) {\n    //complex sine\n    //sin(x+iy) = sin(x) cosh(y) + i cos(x) sinh(y))\n\tfloat r = sin(z.x) * cosh(z.y);\n\tfloat i = cos(z.x) * sinh(z.y);\n    \n \n    return cMult(vec2(r,i),c);\n\t\n    \n}\nvec2 f3(vec2 z, vec2 c){\n    return cMult(c,cMult(z,vec2(1,0)-z));\n    \n}\n\nvec3 palette(float loc, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b*cos( TAU*(c*loc+d) );\n}\n\nfloat logPotential(float d,float i){\n  \n\tfloat base=log(2.);\n\treturn i-(log(log(d)/base)/base);\n\n}\n\nvec2 findCircle(vec2 p1, vec2 p2, vec2 p3){\n\n    vec2 p12 = p1 - p2;\n    vec2 p13 = p1 - p3;\n    vec2 p31 = p3 - p1;\n    vec2 p21 = p2 - p1;\n    \n    // x1^2 - x3^2\n    vec2 sp13 = vec2(p1.x*p1.x - p3.x*p3.x, p1.y*p1.y - p3.y*p3.y);\n    vec2 sp21 = p2*p2-p1*p1;\n    \n    \n    float f = (sp13.x*p12.x + sp13.y*p12.x + sp21.x*p13.x + sp21.y*p13.x)\n            /(2.*(p31.y*p12.x - p21.y*p13.x));\n    float g = (sp13.x*p12.y + sp13.y*p12.y + sp21.x*p13.y + sp21.y*p13.y)\n            / (2. * (p31.x * p12.y - p21.x * p13.y));\n \n    //float c = -pow(p1.x, 2.) - pow(p1.y, 2.) - 2. * g * p1.x - 2. * f * p1.y;\n \n    // eqn of circle be x^2 + y^2 + 2*g*x + 2*f*y + c = 0\n    // where centre is (h = -g, k = -f) and radius r\n    // as r^2 = h^2 + k^2 - c\n    return vec2(-g,-f);\n    \n\n}\n\nvec2 circleLerp(vec2 p1, vec2 p2,vec2 p3,float v){\n    vec2 tangent12 = p1 + p2 - p3;\n    vec2 tangent23 = p2 + p3 - p1;\n    vec2 tangent31 = p3 + p1 - p2;\n    \n    float smoothv = smoothstep(0.,1.,mod(v,0.33333)*3.);\n    \n    vec2 lerp1, lerp2;\n    if (v < 0.3333){\n        lerp1 = mix(p1,tangent12,smoothv);\n        lerp2 = mix(tangent12,p2,smoothv);\n    }else if (v < 0.6667){\n        lerp1 = mix(p2,tangent23,smoothv);\n        lerp2 = mix(tangent23,p3,smoothv);\n    }else{\n        lerp1 = mix(p3,tangent31,smoothv);\n        lerp2 = mix(tangent31,p1,smoothv);\n    }\n    return mix(lerp1,lerp2,smoothv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec3 aacol=vec3(0.);\n    float time = iTime;\n    \n    //aa code here\n    for (int aax=0; aax<AA; aax++){\n    for (int aay=0; aay<AA; aay++){\n        vec2 c = vec2(0.);\n        vec2 z = vec2(0.);\n    \n        vec2 uv = (fragCoord + vec2(aax,aay)/float(AA))/iResolution.xx;\n        uv -= 0.5;uv *= 1.3;uv += 0.5;\n    \n        c.x = 3.0 * (uv.x - 0.5) ;\n        c.y = 3.0 * (uv.y - 0.22) ;\n        \n        bool escaped = false;\n        int iterations;\n        \n        //3 = lambda\n        //2 = sin\n        //1 = mand\n    \n        int i = 0;\n        float t = fract(iTime/20.);\n        \n        //control camera\n        vec2 cameraPos1 = vec2(-0.5,1.2);\n        vec2 cameraPos2 = vec2(0.,2.);\n        vec2 cameraPos3 = vec2(.6,1.6);\n        \n        \n        \n       \n        vec2 cameraPos = circleLerp(cameraPos1,cameraPos2,cameraPos3,t);\n        \n        c.x+=cameraPos.x;\n        c*=cameraPos.y;\n        \n        z = circleLerp(vec2(0),c,vec2(0.5,0),t);\n           \n        //t=t/2.+0.5;\n        //iterate\n        float sum=0.;\n        for (i = 0; i < maxIterations; i++) {\n            vec2 p1 = f1(z,c);\n            vec2 p2 = f2(z, c);\n            vec2 p3 = f3(z,c);\n            \n            z = circleLerp(p1,p2,p3,t);\n          \n            \n            sum+=max(0.,5.-length(z));\n            if(length(z)>5.)escaped=true;\n        \n        }\n\n\t\t\t\n        \n    vec3 iterationCol = vec3(palette(sum/20., vec3(0.5),vec3(0.5),vec3(1.0, 1.0, 0.0),vec3(0.3, 0.2, 0.2)));\n\t\t\n    if (!escaped)iterationCol=iterationCol*0.8 -0.3;\n    aacol+= iterationCol;\n    }\n    }\n    fragColor=vec4(aacol.xyz/4.,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}