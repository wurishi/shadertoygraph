{"ver":"0.1","info":{"id":"MftSzn","date":"1713522069","viewed":142,"name":"Hemispherical AO","username":"djancool","description":"Hemispherical Ambient Occlusion","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["ao","ambientocclusion","hemisphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//#define randomDirPerPixel\n\nvec3 hash3( uvec3 x )\n{\n    const uint k = 1103515245U;\n\n    x = ((x >> 8U) ^ x.yzx) * k;\n    x = ((x >> 8U) ^ x.yzx) * k;\n    x = ((x >> 8U) ^ x.yzx) * k;\n\n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\n\nvec3 rndHemiDir(vec3 normal, uvec3 index)\n{\n    vec3 rnd = 2.0 * (0.5 - hash3(index));\n    rnd = tan(rnd);\n    rnd = normalize(rnd);\n\n    // Uniform distribution\n    return rnd * sign(dot(normal, rnd));\n\n    // Cosine weighted distribution // We will have les samples on angles, wich makes them darker, wich simulates lambertian\n    return normalize(normal + rnd);\n}\n\nvec3 uvToPos(vec2 uv)\n{\n    vec3 pos = vec3(0.0);\n    pos.xy = uv;\n    pos.z = texture(iChannel0, uv).r / 1.0;\n    \n    return pos;\n}\n\nvec3 getNormal(vec2 uv)\n{\n    float pixelSize = 5.0 / iChannelResolution[0].r; // use higher number than 1/resolution to smooth out normal to reduce artifacts\n\n    vec3 pos_0 = uvToPos(uv);\n    vec3 pos_x = uvToPos(uv + vec2(pixelSize, 0.0));\n    vec3 pos_y = uvToPos(uv + vec2(0.0, pixelSize));\n    \n    vec3 normal = normalize(cross(pos_0 - pos_x, pos_0 - pos_y));\n    return normal;\n}\n\nfloat getAO(vec2 uv, vec2 fragCoord)\n{\n    const float sampleDist = 0.3;\n    const int sampleCount = 100;\n\n    vec3 position = uvToPos(uv);\n    vec3 normal = getNormal(uv);\n    \n    float AO = 0.0;\n    \n    for(int i = 0; i < sampleCount; i++)\n    {\n        #ifdef randomDirPerPixel\n            uvec3 index = uvec3(uvec3(i, i + 50, i + 100) + uvec3(fragCoord, 0.0));\n        #else\n            uvec3 index = uvec3(uvec3(i, i + 50, i + 100));\n        #endif\n    \n        vec3 samplePos = rndHemiDir(normal, index) * sampleDist * hash3(index + 100u).x + position;\n        float sampleHeight = uvToPos(samplePos.xy).z;\n        \n        if(samplePos.z < sampleHeight) AO += 1.0;\n    }\n    \n    return 1.0 - AO / float(sampleCount);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y * 0.75;\n\n    float AO = getAO(uv, fragCoord);\n\n    fragColor = pow(vec4(AO), vec4(1.0 / 2.2));\n}","name":"Image","description":"","type":"image"}]}