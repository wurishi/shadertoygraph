{"ver":"0.1","info":{"id":"tltfRn","date":"1612129976","viewed":121,"name":"4d-derivative-simplex-fbm","username":"phcs93","description":"refactoring the main noise function","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["noise","simplex","4d","derivative"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float fbm (vec4 vector, out vec4 derivative, int octaves) {\n\n    float signal = 0.0;\n    float factor = 0.0;    \n    float scale = 0.5;\n\n    for (int i = 0; i < octaves; i++){\n        vec4 d = vec4(0.0);\n        float n = noise(vector, d) * 0.5 + 0.5; // map noise from -1...1 to 0...1\n        d = d * 0.5 + 0.5; // map derivatives from -1...1 to 0...1\n        signal += n * scale;\n        derivative += d * scale;\n        factor += scale;\n        scale *= 0.5;\n        vector *= 2.0;\n    }\n\n    derivative /= factor;\n\n    return signal / factor;\n\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    float x = uv.x;\n    float y = uv.y;    \n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 7.5;\n    \n    // mobile? \n    bool m = iResolution.x < iResolution.y;\n    \n    float n = 0.0;    \n    vec4 d = vec4(0.0);\n    \n    if ((m ? y : x) < 0.5) {\n        n = fbm(vec4(uv.x, uv.y, iTime, iTime), d, 1);\n    } else {\n        n = fbm(vec4(uv.x, uv.y, iTime, iTime), d, 8);\n    }\n    \n    if ((m ? x : y) > 0.5) {\n        fragColor = vec4(vec3(n),1.0);\n    } else {\n        fragColor = vec4(d.xyz, 1.0);\n    }\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// original -> http://staffwww.itn.liu.se/~stegu/aqsis/aqsis-newnoise/sdnoise1234.c\n\nint[512] perm = int[512] (\n    151,160,137,91,90,15,\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,\n    151,160,137,91,90,15,\n    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,\n    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,\n    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,\n    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,\n    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,\n    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,\n    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,\n    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,\n    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,\n    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,\n    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,\n    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180 \n);\n\n// 32 tesseract edges\nvec4[32] grad4lut = vec4[32] (\n    vec4( 0.0, 1.0, 1.0, 1.0),vec4( 0.0, 1.0, 1.0,-1.0),vec4( 0.0, 1.0,-1.0, 1.0),vec4( 0.0, 1.0,-1.0,-1.0), \n    vec4( 0.0,-1.0, 1.0, 1.0),vec4( 0.0,-1.0, 1.0,-1.0),vec4( 0.0,-1.0,-1.0, 1.0),vec4( 0.0,-1.0,-1.0,-1.0),\n    vec4( 1.0, 0.0, 1.0, 1.0),vec4( 1.0, 0.0, 1.0,-1.0),vec4( 1.0, 0.0,-1.0, 1.0),vec4( 1.0, 0.0,-1.0,-1.0),\n    vec4(-1.0, 0.0, 1.0, 1.0),vec4(-1.0, 0.0, 1.0,-1.0),vec4(-1.0, 0.0,-1.0, 1.0),vec4(-1.0, 0.0,-1.0,-1.0),\n    vec4( 1.0, 1.0, 0.0, 1.0),vec4( 1.0, 1.0, 0.0,-1.0),vec4( 1.0,-1.0, 0.0, 1.0),vec4( 1.0,-1.0, 0.0,-1.0),\n    vec4(-1.0, 1.0, 0.0, 1.0),vec4(-1.0, 1.0, 0.0,-1.0),vec4(-1.0,-1.0, 0.0, 1.0),vec4(-1.0,-1.0, 0.0,-1.0),\n    vec4( 1.0, 1.0, 1.0, 0.0),vec4( 1.0, 1.0,-1.0, 0.0),vec4( 1.0,-1.0, 1.0, 0.0),vec4( 1.0,-1.0,-1.0, 0.0),\n    vec4(-1.0, 1.0, 1.0, 0.0),vec4(-1.0, 1.0,-1.0, 0.0),vec4(-1.0,-1.0, 1.0, 0.0),vec4(-1.0,-1.0,-1.0, 0.0)\n);\n\nivec4[64] simplex = ivec4[64](\n    ivec4(0,1,2,3),ivec4(0,1,3,2),ivec4(0,0,0,0),ivec4(0,2,3,1),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(1,2,3,0),\n    ivec4(0,2,1,3),ivec4(0,0,0,0),ivec4(0,3,1,2),ivec4(0,3,2,1),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(1,3,2,0),\n    ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),\n    ivec4(1,2,0,3),ivec4(0,0,0,0),ivec4(1,3,0,2),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(2,3,0,1),ivec4(2,3,1,0),\n    ivec4(1,0,2,3),ivec4(1,0,3,2),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(2,0,3,1),ivec4(0,0,0,0),ivec4(2,1,3,0),\n    ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),\n    ivec4(2,0,1,3),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(3,0,1,2),ivec4(3,0,2,1),ivec4(0,0,0,0),ivec4(3,1,2,0),\n    ivec4(2,1,0,3),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(0,0,0,0),ivec4(3,1,0,2),ivec4(0,0,0,0),ivec4(3,2,0,1),ivec4(3,2,1,0)\n);\n\nvec4 grad4 (int hash) {\n    return grad4lut[hash & 31];\n}\n\nfloat F4 = 0.309016994;\nfloat G4 = 0.138196601;\n\nfloat noise (vec4 v, out vec4 d) {\n  \n    float n0, n1, n2, n3, n4; \n    float noise; \n    float t20, t21, t22, t23, t24;\n    float t40, t41, t42, t43, t44;\n\n    vec4 vs = v + (v.x + v.y + v.z + v.w) * F4;\n    ivec4 i = ivec4(floor(vs));\n    float t = float(i.x + i.y + i.z + i.w) * G4; \n    vec4 V0 = vec4(i) - t; \n    vec4 v0 = v - V0;\n\n    int c1 = (v0.x > v0.y) ? 32 : 0;\n    int c2 = (v0.x > v0.z) ? 16 : 0;\n    int c3 = (v0.y > v0.z) ? 8 : 0;\n    int c4 = (v0.x > v0.w) ? 4 : 0;\n    int c5 = (v0.y > v0.w) ? 2 : 0;\n    int c6 = (v0.z > v0.w) ? 1 : 0;\n    int c = c1 | c2 | c3 | c4 | c5 | c6; \n\n    ivec4 s = simplex[c];\n\n    ivec4 i1 = ivec4(s.x>=3?1:0,s.y>=3?1:0,s.z>=3?1:0,s.w>=3?1:0);\n    ivec4 i2 = ivec4(s.x>=2?1:0,s.y>=2?1:0,s.z>=2?1:0,s.w>=2?1:0);\n    ivec4 i3 = ivec4(s.x>=1?1:0,s.y>=1?1:0,s.z>=1?1:0,s.w>=1?1:0);\n\n    vec4 v1 = v0 - vec4(i1) + G4;\n    vec4 v2 = v0 - vec4(i2) + 2.0 * G4; \n    vec4 v3 = v0 - vec4(i3) + 3.0 * G4;\n    vec4 v4 = v0 - 1.0 + 4.0 * G4;\n\n    int ii = i.x & 0xff;\n    int jj = i.y & 0xff;\n    int kk = i.z & 0xff;\n    int ll = i.w & 0xff;\n\n    vec4 p0 = v0*v0;\n    vec4 p1 = v1*v1;\n    vec4 p2 = v2*v2;\n    vec4 p3 = v3*v3;\n    vec4 p4 = v4*v4;\n\n    float t0 = 0.6 - p0.x-p0.y-p0.z-p0.w;\n    float t1 = 0.6 - p1.x-p1.y-p1.z-p1.w;\n    float t2 = 0.6 - p2.x-p2.y-p2.z-p2.w;\n    float t3 = 0.6 - p3.x-p3.y-p3.z-p3.w;\n    float t4 = 0.6 - p4.x-p4.y-p4.z-p4.w;\n\n    vec4 g0, g1, g2, g3, g4;\n\n    if (t0 < 0.0) {\n        n0 = t0 = t20 = t40 = 0.0;\n    } else {\n        t20 = t0 * t0;\n        t40 = t20 * t20;\n        g0 = grad4(perm[ii+perm[jj+perm[kk+perm[ll]]]]);\n        n0 = t40 * dot( g0, v0 );\n    }\n\n    if (t1 < 0.0) {\n        n1 = t1 = t21 = t41 = 0.0;\n    } else {\n        t21 = t1 * t1;\n        t41 = t21 * t21;\n        g1 = grad4(perm[ii+i1.x+perm[jj+i1.y+perm[kk+i1.z+perm[ll+i1.w]]]]);\n        n1 = t41 * dot( g1, v1 );\n    }\n\n    if (t2 < 0.0) {\n        n2 = t2 = t22 = t42 = 0.0;\n    } else {\n        t22 = t2 * t2;\n        t42 = t22 * t22;\n        g2 = grad4(perm[ii+i2.x+perm[jj+i2.y+perm[kk+i2.z+perm[ll+i2.w]]]]);\n        n2 = t42 * dot( g2, v2 );\n    }\n\n    if (t3 < 0.0) {\n        n3 = t3 = t23 = t43 = 0.0;\n    } else {\n        t23 = t3 * t3;\n        t43 = t23 * t23;\n        g3 = grad4(perm[ii+i3.x+perm[jj+i3.y+perm[kk+i3.z+perm[ll+i3.w]]]]);\n        n3 = t43 * dot( g3, v3 );\n    }\n\n    if (t4 < 0.0) {\n        n4 = t4 = t24 = t44 = 0.0;\n    } else {\n        t24 = t4 * t4;\n        t44 = t24 * t24;\n        g4 = grad4(perm[ii+1+perm[jj+1+perm[kk+1+perm[ll+1]]]]);\n        n4 = t44 * dot( g4, v4 );\n    }\n\n    noise = 27.0 * (n0 + n1 + n2 + n3 + n4);  \n\n    d  = t20 * t0 * dot(g0,v0) * v0;\n    d += t21 * t1 * dot(g1,v1) * v1;\n    d += t22 * t2 * dot(g2,v2) * v2;\n    d += t23 * t3 * dot(g3,v3) * v3;\n    d += t24 * t4 * dot(g4,v4) * v4;\n    d *= -8.0;\n\n    d.x += t40 * g0.x + t41 * g1.x + t42 * g2.x + t43 * g3.x + t44 * g4.x;\n    d.y += t40 * g0.y + t41 * g1.y + t42 * g2.y + t43 * g3.y + t44 * g4.y;\n    d.z += t40 * g0.z + t41 * g1.z + t42 * g2.z + t43 * g3.z + t44 * g4.z;\n    d.w += t40 * g0.w + t41 * g1.w + t42 * g2.w + t43 * g3.w + t44 * g4.w;\n\n    d *= 28.0;\n  \n    return noise;\n      \n}","name":"Common","description":"","type":"common"}]}