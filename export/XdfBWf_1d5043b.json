{"ver":"0.1","info":{"id":"XdfBWf","date":"1498416210","viewed":131,"name":"Blinking Cube Rasterizer","username":"zproxy","description":"https://www.shadertoy.com/view/MsjSzz","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["rasterizer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define LINEAR_ROTATION\n\n#define WEIGHT (3.0 / iResolution.x)\nconst vec3 RED = vec3(1.0,0.0,0.0);\nconst vec3 GREEN = vec3(0.0,1.0,0.0);\nconst vec3 BLUE = vec3(0.0,0.8,1.0);\nconst vec3 WHITE = vec3(1.0,1.0,0.97);\nconst vec3 YELLOW = vec3(1.0,1.0,0.0);\n\n// rasterize functions\nfloat line(vec2 p, vec2 p0, vec2 p1, float w) {\n    vec2 d = p1 - p0;\n    float t = clamp(dot(d,p-p0) / dot(d,d), 0.0,1.0);\n    vec2 proj = p0 + d * t;\n    float dist = length(p - proj);\n    dist = 1.0/dist*WEIGHT*w;\n    return min(dist*dist,1.0);\n}\nfloat circle(vec2 p, vec2 c, float r, float w) {\n    float dist = abs(length(p - c)) + r;\n    dist = 1.0/dist*WEIGHT*w;\n    return min(dist*dist,1.0);\n}\n\n// matrices\nmat4 getRotMatrix(vec3 a) {\n    vec3 s = sin(a);\n    vec3 c = cos(a);    \n    mat4 ret;\n    ret[0] = vec4(c.y*c.z,c.y*s.z,-s.y,0.0);\n    ret[1] = vec4(s.x*s.y*c.z-c.x*s.z,s.x*s.y*s.z+c.x*c.z,s.x*c.y,0.0);\n    ret[2] = vec4(c.x*s.y*c.z+s.x*s.z, c.x*s.y*s.z-s.x*c.z,   c.x*c.y,0.0);    \n    ret[3] = vec4(0.0,0.0,0.0,1.0);\n    return ret;\n}\nmat4 getPosMatrix(vec3 p) {   \n    mat4 ret;\n    ret[0] = vec4(1.0,0.0,0.0,p.x);\n    ret[1] = vec4(0.0,1.0,0.0,p.y);\n    ret[2] = vec4(0.0,0.0,1.0,p.z);   \n    ret[3] = vec4(0.0,0.0,0.0,1.0);\n    return ret;\n}\n\n// utils\nvec3 mix3(vec3 a, vec3 b, vec3 c, float t) {\n    if(t>0.5) return mix(b,c,t*2.0-1.0);\n    else return mix(a,b,t*2.0);\n}\nvec3 fragment(vec3 p) {\n    float t = sin(p.x*0.8+iTime*0.5)*0.5+0.5;\n    float fog = min(pow(p.z,3.0)*400.0,1.0);\n    return mix3(RED,GREEN,BLUE,t) * fog;\n}    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    //uv = uv * (1.0 + pow(length(uv)*0.4,0.5)) * 0.6;\n    \n    float line_width = 1.9;\n    float time = iTime * 0.31415;\n    vec3 c = vec3(mix(vec3(0.19,0.13,0.1),vec3(1.0), 0.5*pow(length(uv)*0.5,2.0)));\n    mat4 cam = getPosMatrix(vec3(0.0,0.0,8.0));\n    \n#ifdef LINEAR_ROTATION\n    mat4 rot = getRotMatrix(vec3(time,time*0.86,time*0.473));\n#else\n    float p = 0.08;\n    mat4 rot = getRotMatrix(vec3(time\t\t+sin(time*30.0)*p,\n                                 time*0.860\t+sin(time*20.0)*p*1.24,\n                                 time*0.473\t+sin(time*10.0)*p));\n#endif\n    \n    vec3 instances[18];\n    instances[0] = vec3( 0.0, 0.0,0.0);\n   \n    // box pipeline\n    for(int dip = 0; dip < 1; dip++) {\n        \n        // input assembly\n        // vec3 vert[8];\n        vec3[8] vert;\n        \n        vert[0] = vec3(-1.0,-1.0, 1.0);\n        vert[1] = vec3(-1.0, 1.0, 1.0);    \n        vert[2] = vec3( 1.0, 1.0, 1.0);    \n        vert[3] = vec3( 1.0,-1.0, 1.0);\n        vert[4] = vec3(-1.0,-1.0,-1.0);\n        vert[5] = vec3(-1.0, 1.0,-1.0);    \n        vert[6] = vec3( 1.0, 1.0,-1.0);    \n        vert[7] = vec3( 1.0,-1.0,-1.0);\n\n        // vertex processing        \n        mat4 pos = getPosMatrix(instances[dip] * 4.0);\n        mat4 mat = pos * rot * cam;\n\n        for(int i = 0; i < 8; i++) {\n\n            // transform\n            vert[i] = (vec4(vert[i],1.0) * mat).xyz;\n\n            // perspective\n            vert[i].z = 1.0 / vert[i].z;\n            \n            // what does this do? isometric without.\n            vert[i].xy *= vert[i].z;\n        }    \n\n        // primitive assembly and rasterize\n        float i;\n        i  = line(uv,vert[0].xy,vert[1].xy,line_width);\n        i += line(uv,vert[1].xy,vert[2].xy,line_width);\n        i += line(uv,vert[2].xy,vert[3].xy,line_width);\n        i += line(uv,vert[3].xy,vert[0].xy,line_width);\n        \n        // upper make. it blink some\n        if (int((iFrame / 30) % 2) == 0)\n        {\n        i += line(uv,vert[4].xy,vert[5].xy,line_width);\n        i += line(uv,vert[5].xy,vert[6].xy,line_width);\n        i += line(uv,vert[6].xy,vert[7].xy,line_width);\n        i += line(uv,vert[7].xy,vert[4].xy,line_width);\n        }\n        \n        // verticals\n        \n        else\n        {\n        i += line(uv,vert[0].xy,vert[4].xy,line_width);\n        i += line(uv,vert[1].xy,vert[5].xy,line_width);\n        i += line(uv,vert[2].xy,vert[6].xy,line_width);\n        i += line(uv,vert[3].xy,vert[7].xy,line_width);\n        }\n        \n    \n        \n        c += fragment(vert[0]) * min(i,1.0);\n    }\n     \n    \n    // fragment\n\tfragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}