{"ver":"0.1","info":{"id":"43SXWV","date":"1711291445","viewed":66,"name":"adhtri::SquareWave","username":"AdhTri001","description":"Trying to plot ft series of square wave","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 col = vec3(55., 66.,89.)/255.;\nvec2 uv;\nfloat T_init = 8.;\nfloat T_decay = .85;\nfloat T;\nvec2 XX = vec2(1., 0.);\nfloat STEPS = 100.;\nfloat dt = 0.05;\n\nvoid circle(vec2 center, float radius) {\n    float st = smoothstep(T-1., T+1., abs(length(uv - center) - radius));\n    col += vec3(1. - st);\n}\n\nvoid circleFill(vec2 center, float radius) {\n    float st = smoothstep(T-1., T, radius - length(uv - center));\n    col = (1.-st) * col + st * vec3(242., 216., 216.) / 255.;\n}\n\nvec2 rotate(vec2 p, float theta) {\n    float ct = cos(theta);\n    float st = sin(theta);\n    mat2 rot = mat2(ct, st,\n                   -st, ct);\n    \n    return rot * p;\n}\n\nvoid line(vec2 p1, vec2 p2) {\n    vec2 u = uv - p1;\n    vec2 v = p2 - p1;\n    float norm = clamp(dot(u, v)/dot(v, v), 0., 1.);\n    float dist = length(u - v*norm);\n    col += vec3(1. - smoothstep(T-1., T+1., dist * 2.5));\n}\n\nvoid arrow(vec2 from, vec2 to) {\n    float HEADSIZE = length(to - from) * .12;\n    line(from, to);\n    vec2 headEnd = HEADSIZE * normalize(from - to);\n    line(to, to + rotate(headEnd, 3.14159 / 6.));\n    line(to, to + rotate(headEnd, -3.14159 / 6.));\n}\n\nvoid point(vec2 p) {\n    col = vec3(211, 118, 118) / 255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = (fragCoord - iResolution.xy/2.);\n    float radius = min(iResolution.x, iResolution.y)*.35;\n\n    vec2 p1 = vec2(0.);\n    vec2 p2 = XX * radius;\n    T = T_init;\n\n    for (float i = 1.; i <= STEPS; i ++) {\n        float n = 2.*i - 1.;\n        float r = 1./n * radius;\n        p2 = p1 + rotate(r * XX, n * 3.14159 * iTime * dt);\n        if (length(uv - p1) < length(p2 - p1) * 1.2) {\n            circle(p1, r);\n        }\n        p1 = p2;\n        T *= T_decay;\n    }\n    \n    p1 = vec2(0.);\n    p2 = XX * radius;\n    T = T_init;\n\n    for (float i = 1.; i <= STEPS; i ++) {\n        float n = 2.*i - 1.;\n        float r = 1./n * radius;\n        p2 = p1 + rotate(r * XX, n * 3.14159 * iTime * dt);\n        if (length(uv - p1) < length(p2 - p1) * 1.2) {\n            circleFill(p1, r);\n        }\n        p1 = p2;\n        T *= T_decay;\n    }\n    \n    p1 = vec2(0.);\n    p2 = XX * radius;\n    T = T_init;\n\n    for (float i = 1.; i <= STEPS; i ++) {\n        float n = 2.*i - 1.;\n        float r = 1./n * radius;\n        p2 = p1 + rotate(r * XX, n * 3.14159 * iTime * dt);\n        if (length(uv - p1) < length(p2 - p1) * 1.2) {\n            arrow(p1, p2);\n        }\n        p1 = p2;\n        T *= T_decay;\n    }\n    if(length(uv - p2) <= 2.)\n        point(p2);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}