{"ver":"0.1","info":{"id":"cstcW8","date":"1694996941","viewed":68,"name":"Fractured Brilliance","username":"RayWorld","description":"A simple radial pattern, with post processing. uses my palette reduction effect from https://www.shadertoy.com/view/DllfRj","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["hsv","palettereduction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3[] colors = vec3[](\n    vec3(170.0/255.0, 34.0/255.0, 68.0/255.0),\n    vec3(255.0/255.0, 51.0/255.0, 68.0/255.0),\n    vec3(255.0/255.0, 170.0/255.0, 153.0/255.0),\n    vec3(255.0/255.0, 153.0/255.0, 0.0/255.0),\n    vec3(255.0/255.0, 204.0/255.0, 0.0/255.0),\n    vec3(221.0/255.0, 153.0/255.0, 0.0/255.0),\n    vec3(255.0/255.0, 238.0/255.0, 0.0/255.0),\n    vec3(255.0/255.0, 255.0/255.0, 221.0/255.0),\n    vec3(136.0/255.0, 170.0/255.0, 0.0/255.0),\n    vec3(187.0/255.0, 238.0/255.0, 0.0/255.0),\n    vec3(0.0/255.0, 153.0/255.0, 68.0/255.0),\n    vec3(51.0/255.0, 221.0/255.0, 51.0/255.0),\n    vec3(187.0/255.0, 255.0/255.0, 187.0/255.0),\n    vec3(0.0/255.0, 238.0/255.0, 170.0/255.0),\n    vec3(0.0/255.0, 153.0/255.0, 170.0/255.0),\n    vec3(17.0/255.0, 238.0/255.0, 238.0/255.0),\n    vec3(187.0/255.0, 255.0/255.0, 255.0/255.0),\n    vec3(68.0/255.0, 187.0/255.0, 255.0/255.0),\n    vec3(17.0/255.0, 17.0/255.0, 153.0/255.0),\n    vec3(68.0/255.0, 102.0/255.0, 255.0/255.0),\n    vec3(187.0/255.0, 204.0/255.0, 255.0/255.0),\n    vec3(204.0/255.0, 51.0/255.0, 255.0/255.0),\n    vec3(221.0/255.0, 187.0/255.0, 255.0/255.0),\n    vec3(119.0/255.0, 0.0/255.0, 136.0/255.0),\n    vec3(255.0/255.0, 102.0/255.0, 238.0/255.0),\n    vec3(255.0/255.0, 170.0/255.0, 221.0/255.0),\n    vec3(255.0/255.0, 85.0/255.0, 170.0/255.0),\n    vec3(0.0/255.0, 0.0/255.0, 0.0/255.0),\n    vec3(102.0/255.0, 102.0/255.0, 102.0/255.0),\n    vec3(170.0/255.0, 170.0/255.0, 170.0/255.0),\n    vec3(221.0/255.0, 221.0/255.0, 221.0/255.0),\n    vec3(255.0/255.0, 255.0/255.0, 255.0/255.0),\n    vec3(244.0/255.0, 212.0/255.0, 164.0/255.0),\n    vec3(221.0/255.0, 170.0/255.0, 119.0/255.0),\n    vec3(170.0/255.0, 102.0/255.0, 68.0/255.0),\n    vec3(119.0/255.0, 51.0/255.0, 34.0/255.0)\n);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0, uv).rgb;\n    float maskText = texture(iChannel1, uv).r;\n    float mask = smoothstep(2.0 * maskText, 0.1, 0.5);\n    //closest in palette\n    int closest = 0;\n    float closestDist = 10.0;\n    float dist = 0.0;\n    for (int i = 0; i < 36; i++) {\n        dist = distance(col, colors[i]);\n        if (dist < closestDist) {\n            closest = i;\n            closestDist = dist;\n        }\n    }\n    \n    col = mix(col, colors[closest], mask);\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 hsv2rgb(vec3 c){\n\tvec4 K=vec4(1.,2./3.,1./3.,3.);\n\treturn c.z*mix(K.xxx,clamp(abs(fract(c.x+K.xyz)*6.-K.w)-K.x, 0.0, 1.0),c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.0 * (2.0*fragCoord - iResolution.xy)/iResolution.y;\n    float offsetAngle = radians(360.0 * texture(iChannel0, uv + vec2(sin(iTime),cos(iTime))).r);\n    vec2 offset = vec2(cos(offsetAngle),sin(offsetAngle)) * 0.1;\n    uv += offset;\n    float d = length(uv);\n    float a = degrees(atan(uv.y,uv.x));\n    if (a < 0.0) a += 360.0;\n    float d1 = min(d,(1.0-abs(mod(d-iTime-1.0,2.0)-1.0)) * pow(0.875,d-1.0));\n    vec3 col = vec3(0.0);\n    if (d < 1.0) {\n        col = hsv2rgb(vec3(a/360.0, 1.0, d))+vec3(0.1);\n    } else {\n        col = hsv2rgb(vec3(a/360.0, 1.0, d1));\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy)/iResolution.y;\n    vec4 col = mix(texture(iChannel0,uv.xy + vec2(0.0,sin(0.9 * iTime))), texture(iChannel0,uv.yx + 0.5 + vec2(0.0,sin(iTime + 0.2))), 0.5);\n    float b = col.r + col.g + col.b;\n    fragColor = vec4(b, b, b, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}