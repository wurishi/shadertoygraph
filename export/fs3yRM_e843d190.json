{"ver":"0.1","info":{"id":"fs3yRM","date":"1653132600","viewed":126,"name":"Abstract Ball","username":"arnav_007","description":"A abstract ball with cool animation made using Ray Marching !","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","noise","ball","cool","anstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEP 100\n#define MAX_DIST 100.0\n#define MIN_DIST 0.0002\n\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\nfloat circleSDF(vec3 c, float r, vec3 p){\n    return distance(p, c) - r + texture(iChannel0, p.xy).r / ((sin(iTime) + 1.) * 80.);\n}\n\n\nfloat getDist(vec3 p){\n    return circleSDF(vec3(0.0), 1.1, p);\n}\n\nvec3 getNormal(vec3 p){\n    vec2 e = vec2(0.01, 0.0);\n    vec3 normal = vec3(getDist(p + e.xyy), getDist(p + e.yxy), getDist(p + e.yyx));\n    return normalize(normal);\n}\n\nfloat getLight(vec3 p){\n    vec3 lightPos = vec3(0.0 + sin(iTime * 3.)*1.5 + -0.3, 3., -3.5);\n    vec3 lightDir = normalize(p - lightPos);\n    \n    return -dot(getNormal(p), lightDir);\n}\n\nfloat rayMarch(vec3 ro, vec3 rd){\n    float dist = 0.0;\n    for(int i = 0; i < MAX_STEP; i++){\n        vec3 iPos = ro + rd * dist;\n        float iDist = getDist(iPos);\n        dist += iDist;\n        if (dist > MAX_DIST || dist < MIN_DIST){\n            break;\n        }\n    }\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float focalDist = 0.6;\n    vec3 ro = vec3(0.0, 0.0, -2.0);\n    vec3 rd = vec3(uv.x, uv.y, focalDist);\n    \n    float dist = rayMarch(ro, rd);\n    \n    vec3 col = vec3(0.0);\n    \n    if(dist < MAX_DIST){\n        col = vec3(0.4, 0.8, 0.8);\n        \n        vec3 pHit = ro + rd * dist;\n        col *= vec3(getLight(pHit)) + vec3(0.1 );\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}