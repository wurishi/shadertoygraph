{"ver":"0.1","info":{"id":"mtXXzf","date":"1675192533","viewed":179,"name":"Spherical Lens Simulation","username":"AudibleAud","description":"This's a simulation of a clear sphere. Move it around with the mouse. It gets farther out over time. There are variables for radius 'n refractive index at the top if you wanna mess with it.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["orb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//This is isometric so it's not perfect but it is way easier\n//it's a clear sphere\n//crazy that\n\nconst float pi = radians(180.0);\n\n//the unit for these next few is pixels\nconst float lRad = 100.0; //lens' radius\n\nconst float lIndex = 1.2; //refractive index of the lens. everything else's in a vacuum\n//const float cHeight = 128.0; camera's height doesn't matter 'cause isometric\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 lPos = vec3(iMouse.xy, lRad + iTime * 10.0); //position of the (center of the) lens\n    vec4 col = vec4(0,0,0,1);\n    \n    vec2 relPos = fragCoord - lPos.xy; //position relative to the lens\n    float x = length(relPos); //yea ik bad variable name. distance from the z axis of the lens\n    \n    if(x >= lRad) {\n        col = texture(iChannel0, fragCoord / iResolution.xy);\n    } else {\n    \n    vec2 vDir = normalize(relPos); //direction from the center\n    float theta1 = asin(x / lRad); //angles of incidence\n    float theta2 = asin(x / (lRad * lIndex)); //and refraction\n    \n    vec3 ePos = vec3(sin(theta1 + pi - theta2 * 2.0) * lRad * vDir + lPos.xy, lPos.z + cos(theta1 + pi - theta2 * 2.0) * lRad);\n    //where the light enters the lens\n    float eDist = tan(2.0 * (theta1 - theta2)) * ePos.z;//distance the ray travels to the lens (in the xy plane)\n    \n    vec2 fPos = ePos.xy - vDir * eDist;\n    \n    col = texture(iChannel0, fPos / iResolution.xy);\n    }\n    \n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}