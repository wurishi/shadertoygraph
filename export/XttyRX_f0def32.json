{"ver":"0.1","info":{"id":"XttyRX","date":"1533447330","viewed":2991,"name":"Underwater Caustics","username":"TanayStyle","description":"Voronoi pattern for water caustics","likes":44,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","wave","water","caustics","underwater"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tau 6.28318530718\n\nfloat sin01(float x) {\n\treturn (sin(x*tau)+1.)/2.;\n}\nfloat cos01(float x) {\n\treturn (cos(x*tau)+1.)/2.;\n}\n\n// rand func from theartofcode (youtube channel)\nvec2 rand01(vec2 p) {\n    vec3 a = fract(p.xyx * vec3(123.5, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    \n    return fract (vec2(a.x * a.y, a.y * a.z));\n}\n\nfloat circ(vec2 uv, vec2 pos, float r) {\n    return smoothstep(r, 0., length(uv - pos));\n}\n\nfloat smoothFract(float x, float blurLevel) {\n\treturn pow(cos01(x), 1./blurLevel);\n}\n\nfloat manDist(vec2 from, vec2 to) {\n    return abs(from.x - to.x) + abs(from.y - to.y);\n}\n\n\nfloat distFn(vec2 from, vec2 to) {\n\tfloat x = length (from - to);\n    return pow (x, 4.);\n}\n\nfloat voronoi(vec2 uv, float t, float seed, float size) {\n    \n    float minDist = 100.;\n    \n    float gridSize = size;\n    \n    vec2 cellUv = fract(uv * gridSize) - 0.5;\n    vec2 cellCoord = floor(uv * gridSize);\n    \n    for (float x = -1.; x <= 1.; ++ x) {\n        for (float y = -1.; y <= 1.; ++ y) {\n            vec2 cellOffset = vec2(x,y);\n            \n            // Random 0-1 for each cell\n            vec2 rand01Cell = rand01(cellOffset + cellCoord + seed);\n\t\t\t\n            // Get position of point\n            vec2 point = cellOffset + sin(rand01Cell * (t+10.)) * .5;\n            \n\t\t\t// Get distance between pixel and point\n            float dist = distFn(cellUv, point);\n    \t\tminDist = min(minDist, dist);\n        }\n    }\n    \n    return minDist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Center coordinates at 0\n    vec2 uv = (2.*fragCoord - iResolution.xy)/iResolution.y;\n    \n    float t = iTime * .35;\n    \n\t// Distort uv coordinates\n    float amplitude = .12;\n    float turbulence = .5;\n    uv.xy += sin01(uv.x*turbulence + t) * amplitude;\n    uv.xy -= sin01(uv.y*turbulence + t) * amplitude;\n    \n\t// Apply two layers of voronoi, one smaller   \n    float v;\n    float sizeDistortion = abs(uv.x)/3.;\n    v += voronoi(uv, t * 2., 0.5, 2.5 - sizeDistortion);\n    v += voronoi(uv, t * 4., 0., 4. - sizeDistortion) / 2.;\n    \n    // Foreground color\n    vec3 col = v * vec3(.55, .75, 1.);\n    \n    // Background color\n    col += (1.-v) * vec3(.0, .3, .5);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}