{"ver":"0.1","info":{"id":"stcyRj","date":"1660102952","viewed":97,"name":"Brain Core Fork","username":"gurudevbk","description":"Fun Geometric visualizer!\n\nCheck out the rest of my playlist! https://www.shadertoy.com/playlist/sfBXzt","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["reactive","music","audio","visualizer","geometry"],"hasliked":0,"parentid":"ft3yzN","parentname":"Brain Core"},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define freq(f) texture(iChannel0, vec2(f, 0.25)).x * 0.8\n\n\nfloat avgFreq(float start, float end, float step) {\n    float div = 0.0;\n    float total = 0.0;\n    for (float pos = start; pos < end; pos += step) {\n        div += 1.0;\n        total += freq(pos);\n    }\n    return total / div;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n       \n    float aspect = iResolution.y/iResolution.x; //aspect ratio of viewport\n    float value; //var\n\tvec2 uv = fragCoord.xy / iResolution.x; //vec ratio of fragment coordinate to width of viewport\n \n    float bassFreq = pow(avgFreq(0.0, 0.1, 0.01), 0.85);\n    float medFreq = pow(avgFreq(0.1, 0.6, 0.01), 0.85);\n    float topFreq = pow(avgFreq(0.6, 1.0, 0.01), 0.85);\n    \n    \n    float rot = radians(90.); // radians(45.0*sin(iTime)); //radians(45.0)\n    float rot2 = radians(45.0*sin(iTime)); // radians(45.0*sin(iTime)); //radians(45.0)\n    \n    uv -= vec2(0.5, 0.5*aspect); //transform\n\n\n    mat2 m = mat2(cos(rot), -sin(rot), sin(rot), cos(rot));\n   \tuv  = m * uv;\n    uv *= vec2(0.05, aspect);\n    uv /= vec2(0.5, uv.x*200.);\n\n    vec2 pos = 150.0*uv;\n    vec2 rep = fract(cos(rot2)-0.9*tan(rot2)+cos(rot2/2.0)*pos);\n    float dist = min(min(rep.x, 1.0-rep.x), min(rep.y, 1.0-rep.y));\n    float squareDist = length((floor(pos)+vec2(0.05)) - vec2(1.0) );\n    \n    float edge = 3.*sin(squareDist-topFreq)*0.5;\n    \n    //edge = ((10.+iTime)/20.-edge *(iTime/5.))*0.5;\n    edge = 1.0*fract(edge);\n    //value = 2.0*abs(dist-0.5);;\n     value = pow(dist*length(uv), 2.0);\n    //value = fract (iTime*2.0);\n    value = mix(value, 1.0-edge, step(1.0, edge));\n    //value *= 1.0-0.5*edge;\n    //edge = pow(abs(1.0-edge), 2.0);\n    \n    edge = (medFreq*bassFreq)/fract(value-edge);\n    value = smoothstep( edge-0.05, edge, 0.95*value);\n    \n    \n    value += squareDist*.2;\n    //fragColor = vec4(value);\n    fragColor = mix(vec4(1.0,edge/2.,value/4.,1.0)*(cos(rot2)/4.0),vec4(0.5,0.75,1.0,1.), edge);\n    fragColor.a = 0.25*clamp(edge, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}