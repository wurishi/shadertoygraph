{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"#define PI 3.14159265358979323846264338\nmat2 rotationMatrix(float theta) {\n    return mat2(\n        cos(theta), -sin(theta),\n        sin(theta), cos(theta)\n    );\n}\n\nvec3 color(vec2 coord) {\n    vec2 uv = (coord.xy - iResolution.xy/2.0)/max(iResolution.x,iResolution.y);\n    uv *= 100.0;\n    uv *= rotationMatrix(iTime/10.0);\n    //uv.y += uv.x;\n    \n    float v1 = sin(uv.x)*cos(uv.y);\n    //float v2 = sin(iTime+uv.x/100.0);\n    float v2 = sin(length(uv)/10.0+iTime);\n    //v = v/2.0 + 0.5;\n\n    // Time varying pixel color\n    vec3 col = vec3(1,1,1);\n    \n    if (v1<v2) col *= 0.0;\n    //col *= vec3(uv/30.0,0);\n    //col *= v1;\n    //col*=v2;\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 col = vec3(0,0,0);\n    \n    int AA_amount = 4;\n    for (int x=0;x<AA_amount;x++) {\n        for (int y=0;y<AA_amount;y++) {\n            col += color(fragCoord+vec2(x,y)/float(AA_amount)*1.0);\n        }\n    }\n    col /= float(AA_amount) * float(AA_amount);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XfKBz1","date":"1733758044","viewed":153,"name":"halftone radial pattern","username":"person2","description":"A halftoned radial gradient pattern (with anti aliasing)","likes":6,"published":3,"flags":0,"usePreview":0,"tags":["halftone"],"hasliked":0,"parentid":"","parentname":""}}