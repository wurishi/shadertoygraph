{"ver":"0.1","info":{"id":"M3fcR8","date":"1726150992","viewed":29,"name":"Rorshach Mask","username":"TheHarmacist","description":"Trying to replicate Rorschach test/What Rorschach from Watchmen wears on his face ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","patterns"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const vec3 paperCol = vec3(0.85,0.85,0.77);\nconst vec3 inkCol = vec3(0., 0.05, 0.28);\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n\nfloat gain = .85;\nfloat lacunarity = 1.4;\n\nfloat fractalNoise(vec3 uv)\n{\n    float value = 0.0;\n    float currentLacunarity = 1.0;\n    float currentGain = 1.0;\n    for(int k = 0; k<5; k++)\n    {\n        value += simplex3d(uv*currentLacunarity)*(currentGain);\n        currentLacunarity *= lacunarity;\n        currentGain *= gain;\n    }\n    \n    return value/1.0;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 centeredUV = (uv - 0.5) * 4.8;\n    centeredUV.x *= 1.778;\n    \n    float uvX = sqrt((centeredUV.x*centeredUV.x)+0.01);\n    vec2 symUV = vec2(uvX, centeredUV.y);\n    \n    float uvLength = length(symUV);\n\n    float timeModifier = (smoothstep(0.5,0.0,abs(fract(iTime*0.3)-0.5)))*.12; \n    float timeValue = iTime*0.12 + timeModifier;\n    \n    float circleMask = smoothstep(.4, 1.0, 2.5 - length(vec2(symUV.x*0.6, symUV.y)));\n    float maskValue = fractalNoise(vec3(symUV, timeValue));\n    maskValue*= circleMask;\n    maskValue = smoothstep(0.8, 0.15, maskValue);\n    \n    float vignette = mix(0.2, 1.0, smoothstep(.0, 0.7, 1.0-length(uv-0.5)));\n    vec3 col = mix(inkCol, paperCol, vec3(maskValue))*vignette;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}