{"ver":"0.1","info":{"id":"XlsBRB","date":"1512339521","viewed":850,"name":"Empty Rectangle","username":"rbeuker","description":"Just a quick test on how to draw an unfilled rectangle.  The color and coords are passed into the shader.  There are likely better ways to do this.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["rectangle","empty","frame","hollow","unfilled"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = gl_FragCoord.xy/iResolution.xy;\n    vec3 pixelColor = texture(iChannel0, fragCoord.xy / iResolution.xy).xyz;\n    \n    //USE CASE\n    //A user clicks on black background and the rectangle will center on the position of the x,y mouse click.\n    //Depending on other user interface conditions, the rectangle may be green or red.\n    \n    //REQUIREMENTS\n    // 1) Draw an empty rectangle with a given color and corner pixel x,y coordinates\n    // 2) The rectangle coordinates and color will typically change once or twice per minute and\n    //    also when the background image dimensions change, which would typically occur once or twice\n    //    per minute.  \n    // 3) The thickness of the rectangle border is the differnce between the Inner and Outer coordinates.\n    \n    //THE PLAN\n    //Because the rectangle coordinates and color rarely change, we'll calc the coords and color in the \n    //main app and pass these into the fragment shader.\n\n    //DISCLAIMER\n    //there are likely far better ways to do this.\n    \n    //define the inner and outer edges of the empty rectangle up upper-left, upper-right, lower-right, lower-left\n    vec2 ULOuter = vec2(200, 200);\n    vec2 ULInner = vec2(201, 199);\n    vec2 UROuter = vec2(300, 200);\n    vec2 URInner = vec2(299, 199);\n    vec2 LROuter = vec2(300, 100);\n    vec2 LRInner = vec2(299, 101);\n    vec2 LLOuter = vec2(200, 100);\n\tvec2 LLInner = vec2(201, 101);\n    //set the rectangle frame color\n    vec4 FrameColor = vec4(0.0, 1.0, 0.0, 1.0);\n    //set the background color\n    //vec4 BackgroundColor = vec4(0.0, 0.0, 0.0, 1.0);\n    vec4 BackgroundColor = vec4(pixelColor, 1.0);\n\t//see if the pixel coordinate is within the frame\n    if (\n        ((gl_FragCoord.x >= ULOuter.x && gl_FragCoord.x <= ULInner.x &&\n        gl_FragCoord.y >= LLOuter.y && gl_FragCoord.y <= ULInner.y))\n        ||\n       ((gl_FragCoord.x >= URInner.x && gl_FragCoord.x <= UROuter.x &&\n        gl_FragCoord.y >= LROuter.y && gl_FragCoord.y <= URInner.y))\n        ||\n       ((gl_FragCoord.x >= ULOuter.x && gl_FragCoord.x <= UROuter.x &&\n        gl_FragCoord.y >= ULInner.y && gl_FragCoord.y <= UROuter.y))\n        ||\n       ((gl_FragCoord.x >= LLOuter.x && gl_FragCoord.x <= LROuter.x &&\n        gl_FragCoord.y >= LLOuter.y && gl_FragCoord.y <= LRInner.y))\n    )\n    { \n        //this pixel is within the frame boundaries\n        fragColor = FrameColor;\n    }\n    else\n    {\n        //this pixel is outside the frame boudaries\n        fragColor = BackgroundColor;\n    }    \n}","name":"Image","description":"","type":"image"}]}