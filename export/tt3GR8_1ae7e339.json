{"ver":"0.1","info":{"id":"tt3GR8","date":"1681866278","viewed":54,"name":"reverse ray path","username":"Angramme","description":"fff","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["fff"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    vec2 uv = fragCoord/iResolution.xy;\n\n    color += texture(iChannel0, uv).rgb;\n    \n    fragColor = vec4(color,0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_STEPS 200\n#define MIN_D .001\n#define MAX_D 200.\n\n#define denoise_amount .9\n\n#define PI 3.14159265359\n\n\nvec3 R3(vec3 p){\n    return textureLod(iChannel1, p*.318247, 0.).rgb;\n}\n\nstruct Mat{\n    vec3 color;\n    float shine;\n    float kS;\n};\n\n\nMat material(vec3 p){\n    if(p.y > -.99 && p.z < 20.){\n        return Mat(vec3(.95, .05, .05), 16., .2);\n    }else{\n        return Mat(vec3(.1, .1, .95), 32., .2);\n    }\n}\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\nfloat dist(vec3 p){\n\tfloat sphere = distance(p, vec3(1,.5,7.5)) - .7;\n    float sphere2 = distance(p, vec3(0,0,8)) - 1.;\n    float plane = p.y + 1.;\n    return min(sphere, min(sphere2, plane));\n}\nfloat march(vec3 ro, vec3 rd){\n    float t = 0.;\n    for(int i=0; i<MAX_STEPS; i++){\n        vec3 p = t*rd + ro;\n        float d = dist(p);\n        if(d<MIN_D || t>MAX_D)break;\n        t += d;\n    }\n    return t;\n}\nfloat softshadow(vec3 ro, vec3 rd, float mx, float w){\n    float t = 0.;\n    float s = 1.0;\n    for(int i=0; i<MAX_STEPS; i++){\n        float d = dist(t*rd + ro);\n        s = min( s, d/(w*t) );\n        if(s<0.0 || t>mx)break;\n        t += d;\n    }\n    s = max(s,0.0);\n    return s*s*(3.0-2.0*s); \n}\n\n\nvec3 normal(vec3 p){\n    vec2 eps = vec2(.001, 0);\n    return (vec3(\n        dist(p + eps.xyy),\n        dist(p + eps.yxy),\n        dist(p + eps.yyx)\n        ) - dist(p))/eps.x;\n}\n\n\nvec3 sky(vec3 d){\n    float v = 1.-2.*d.y;\n    return vec3(v, v, 1.);\n}\n\nfloat diffuse(vec3 n, vec3 L){\n    return max(0., dot(n, L));\n}\nfloat specular(vec3 n, vec3 L, vec3 rd, float shine){\n    return pow(max(0., dot(reflect(-L, n), -rd)), shine);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 color = vec3(0);\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.x;\n\n    vec3 ro = vec3(0);\n    vec3 rd = normalize(vec3(uv, 1.));\n    \n    float d = march(ro, rd);\n    vec3 p = ro + rd*d;\n    vec3 n = normal(p);\n    \n    if(d<MAX_D){\n        Mat mate = material(p);\n        \n        vec3 L = normalize(vec3(.5, 1, -1));\n        \n        float sh = softshadow(p + n*MIN_D, L, MAX_D, 1./16.);\n        \n    \t//diffuse\n        color += diffuse(n, L) * sh * mate.color * (1.-mate.kS);\n        //specular\n        color += specular(n, L, rd, mate.shine) * sh * mate.kS;\n        \n        //ambient\n        vec3 rd2 = rd;\n        float d2 = d;\n        vec3 p2 = p;\n        vec3 n2 = n;\n        \n        vec3 factor = vec3(1.);\n        for(int i=0; i<2; i++){\n            vec3 rd3 = normalize(reflect(rd2,n2) + R3(p*187439.33 + iTime*10.3359)*.95);\n            float d3 = march(p2 + n2*MIN_D, rd3);\n            vec3 p3 = p2+d3*rd3;\n            vec3 n3 = normal(p3);\n\n            Mat mate2 = material(p3);\n\n            if(d3 < MAX_D){\n                float sh2 = softshadow(p3 + n3*MIN_D, L, MAX_D, 1./16.);\n                factor *= ((1.-mate.kS)*diffuse(n2, rd3) +mate.kS*specular(n2, rd3, rd2, mate.shine)) \n                    * mate.color * mate2.color;\n                color += 5. * factor\n                    * ((1.-mate2.kS)*diffuse(n3, L) +mate2.kS*specular(n3, L, rd3, mate2.shine)) \n                    * sh2;\n            }\n            \n            rd2 = rd3;\n            d2 = d3;\n            p2 = p3;\n            n2 = n3;\n        }\n        \n    }else{\n        color += sky(rd);\n    }\n    \n    //gamma correction\n    const float gamma = 2.2;\n    color = pow(color, vec3(1./gamma));\n    \n    //denoising\n    vec3 prev = texture(iChannel0, fragCoord/iResolution.xy).rgb;\n    color = prev*denoise_amount + color*(1.-denoise_amount);\n    fragColor = vec4(color,0);\n}","name":"Buffer A","description":"","type":"buffer"}]}