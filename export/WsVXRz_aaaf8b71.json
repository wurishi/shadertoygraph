{"ver":"0.1","info":{"id":"WsVXRz","date":"1573254854","viewed":180,"name":" Fix mip texture tiling 2 taps","username":"lhog","description":"Fix mip texture tiling 2 taps\nhttps://www.shadertoy.com/view/WdVGWG by Suslik with computed noise only","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["texture","repetition","tiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define HASHSCALE1 443.8975\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\n\n\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n\tp3 += dot(p3, p3.yzx + 19.19);\n\treturn fract((p3.x + p3.y) * p3.z);\n}\n\nfloat noise(vec2 p){\n\tvec2 ip = floor(p);\n\tvec2 u = fract(p);\n\tu = u*u*(3.0-2.0*u);\n\t\n\tfloat res = mix(\n\t\tmix(hash12(ip),hash12(ip+vec2(1.0,0.0)),u.x),\n\t\tmix(hash12(ip+vec2(0.0,1.0)),hash12(ip+vec2(1.0,1.0)),u.x),u.y);\n\t//return res*res;\n    return res;\n}\n\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n//----------------------------------------------------------------------------------------\n//  3 out, 1 in...\nvec3 hash31(float p) {\n\tvec3 p3 = fract(vec3(p) * HASHSCALE3);\n\tp3 += dot(p3, p3.yzx+19.19);\n\treturn fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\nstruct InterpNodes2\n{\n    vec2 seeds;\n    vec2 weights;\n};\nInterpNodes2 GetNoiseInterpNodes(float smoothNoise)\n{\n    vec2 globalPhases = vec2(smoothNoise * 0.5) + vec2(0.5, 0.0);\n    vec2 phases = fract(globalPhases);\n    vec2 seeds = floor(globalPhases) * 2.0 + vec2(0.0, 1.0);\n    vec2 weights = min(phases, vec2(1.0f) - phases) * 2.0;\n    return InterpNodes2(seeds, weights);\n}\n\nvec4 PreserveVariance(vec4 linearColor, vec4 meanColor, float moment2)\n{\n    return (linearColor - meanColor) / sqrt(moment2) + meanColor;\n}\n\nconst float pi = 3.141592;\nvec4 GetTextureSample(sampler2D tex, vec2 uvIn, float seed)\n{\n    vec3 hash = hash31(seed);\n    float ang = hash.x * 2.0 * pi;\n    mat2 rotation = mat2(cos(ang), sin(ang), -sin(ang), cos(ang));\n    \n    vec2 uv = rotation * uvIn + hash.yz;\n    return texture(tex, uv);\n}\n\nconst float layersCount = 5.0;\nvec4 texture2D_NoTiling(sampler2D tex, vec2 uv) {\n    InterpNodes2 interpNodes = GetNoiseInterpNodes(noise(uv) * layersCount);\n    \n    vec4 col;\n    \n    float moment2 = 0.0;\n    for(int i = 0; i < 2; i++)\n    {\n        float weight = interpNodes.weights[i];\n        moment2 += weight * weight;\n        col += GetTextureSample(tex, uv, interpNodes.seeds[i]) * weight;\n    }\n    col = PreserveVariance(col, textureLod(iChannel0, vec2(0.5), 10000.0), moment2);\n    return col;\n}\n\n\nconst float texFreq = 12.0;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xx;\n    uv *= texFreq;\n    fragColor = texture2D_NoTiling(iChannel0, uv);\n}    \n","name":"Image","description":"","type":"image"}]}