{"ver":"0.1","info":{"id":"cdcfzM","date":"1697447155","viewed":23,"name":"Correction tp2.1","username":"schreck","description":"Correction du tp du 11/10","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["lancderayon"],"hasliked":0,"parentid":"7lKSRd","parentname":"Correction tp3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":" \nstruct Camera {\n    vec3 Obs;\n    vec3 View;\n    vec3 Up;\n    vec3 Horiz;\n    float H;\n    float W;\n    float z;\n};\n\nstruct Ray {\n    vec3 Origin;\n    vec3 Dir;\n};\n\nCamera camera(in vec3 Obs, in vec3 LookAt, in float aperture) {\n    Camera C;\n    C.Obs = Obs;\n    C.View = normalize(LookAt - Obs);\n    C.Horiz = normalize(cross(vec3(0, 0, 1), C.View));\n    C.Up = normalize(cross(C.View, C.Horiz));\n    C.H = iResolution.y;\n    C.W = iResolution.x;\n    C.z = C.H/2.0/tan(aperture * 3.1415 / 180.0 /2.0);\n   return C;\n}\n\nRay launch(in Camera C, in vec2 XY) {\n   Ray r;\n   r.Origin = C.Obs;\n   r.Dir = C.z*C.View + (XY.x - C.W/2.0)*C.Horiz + (XY.y - C.H/2.0)*C.Up;\n   return r;\n}\n\nstruct Sphere {\n   vec3 Center;\n   float R;\n};\n\nbool intersect_sphere(in Ray R, in Sphere S, out float t) {\n    float a = dot(R.Dir,R.Dir);\n    float b = 2.0*dot(R.Dir,(R.Origin - S.Center));\n    float c = dot(R.Origin - S.Center, R.Origin - S.Center) - S.R*S.R;\n    float delta = b*b - 4.0*a*c;   \n    if (delta > 0.0) {\n        t = (-b - sqrt(delta)) / (2.0*a);\n    }\n    return delta > 0.0;\n}\n\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n \n   Camera C = camera(\n       vec3(2.0, 2.0, 1.5),\n       vec3(0.5, 0.5, 0.5),\n       50.0       \n   );\n   \n   vec3 col = vec3(0, 0.3, 0.8);\n   Ray r = launch(C, fragCoord);\n   \n   float a = iTime;\n   mat3 rot = mat3(cos(a), sin(a), 0,\n                   -sin(a), cos(a), 0,\n                   0, 0, 1);\n   \n   Sphere s1 = Sphere(vec3(0.0, 0.0, 0.0), 0.6);\n   Sphere s2 = Sphere(rot*vec3(1.0, 0.0, 0.0), 0.3);\n   vec3 light = vec3(5.0, 0.0, 3.0);\n   \n   float t = 1e30;\n   float t1;\n   if (intersect_sphere(r, s1, t1) && t1 < t) {\n       t = t1;\n       col = vec3(1, 1, 1);\n    }\n    float t2;\n    if (intersect_sphere(r, s2, t2) && t2 < t) {\n       col = vec3(1, 0, 0);\n       t = t2;\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}