{"ver":"0.1","info":{"id":"lcVXDw","date":"1730357408","viewed":79,"name":"Waves of Color","username":"dizndaz","description":"Messing around with HueGene","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["noise","huegene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define BASECOL vec4(1.,1.,1.,1.)\n\nfloat rand21(vec2 uv){\n    return fract(sin(dot(uv,vec2(33.991,123.334)))* 1567.);\n}\nvec3 rand23(vec2 uv){\n    return vec3(rand21(uv), rand21(uv + 100.), rand21(uv - 200.));\n}\n\nfloat noise(vec2 st){\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.-2.*f);\n    \n    float a = rand21(i);\n    float b = rand21(i + vec2(1.,0));\n    float c = rand21(i + vec2(0,1.));\n    float d = rand21(i + vec2(1.,1.));\n    \n    float rand = mix(mix(a,b,u.x),\n                     mix(c,d,u.x),u.y);\n    return rand;\n    \n}\n\nfloat fbm(vec2 st){\n    int octaves = 3;\n    float rand = 0.;\n    float amp = .5;\n    float freq = 1.;\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    float shift = 100.;\n    for(int i = 0; i < octaves; i++)\n    {\n        rand += amp * noise(st * freq);\n        amp *= .5;\n        st = rot * st * 2.0 + shift;\n    }\n    return rand;\n}\n\nfloat noiseTex(vec2 uv){\n    return fbm(uv + fbm(uv + iTime) +iTime * .1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 original = ivec2(fragCoord); \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 nUV = fragCoord/iResolution.y;\n    \n    float f = -(noiseTex(nUV * 5.)) * 1.1;\n    float f2 = sin(iTime * .5);\n    f *= sign(f2) * pow(abs(f2),.2);\n    \n    fragCoord += f;\n                           \n    vec4 data = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    data = mix(data,BASECOL,(step(.99, 1. - length(uv - .5))));\n    ivec2 coord = ivec2(fragCoord);\n\n    ivec3 e = ivec3(-1,0,1);\n    ivec2 offset[] = ivec2[](e.xz, e.yz, e.zz,\n                           e.xy, e.yy, e.zy,\n                           e.xx, e.yx, e.zx); \n    coord += offset[int(rand21(uv + iTime) * 9.)];\n    vec4 newData = texelFetch(iChannel0, ivec2(coord), 0);\n    vec4 dist = abs(data - newData);\n    if((newData.a > data.a)){\n        data = newData + vec4((rand23(uv) - .53) * .04,0);\n    }\n    if(iMouse.z > 0.) data *= 0.;\n    \n    if(original != ivec2(fragCoord)){\n        data.rgb *= .97;\n        data.a *= .95;\n    }\n    if(data.a > 0.) {\n        data.a -= .0001;\n        data.a = clamp(data.a, .2,1.);\n    }\n    fragColor = vec4(clamp(data,-1.,1.));\n}","name":"Buffer A","description":"","type":"buffer"}]}