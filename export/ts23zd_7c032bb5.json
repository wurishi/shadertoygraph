{"ver":"0.1","info":{"id":"ts23zd","date":"1549816442","viewed":757,"name":"understanding sdBox","username":"yashgugale","description":"Understanding the sdBox function","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sdbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdBox(in vec2 p, in vec2 b)\n{\n\tvec2 d = abs(p) - b;\n    // We are using vec2(0) because the point that lies on the object, has a distance of 0.0 from the object.\n    // Also, we are using max in the first part, because the points that lie inside the box, will have the \n    // abs(p)-b value as negative. Hence, by taking max(d, vec2(0)), we are clamping the value to 0.0, so that the point inside \n    // the object will get the distance from the box result as 0.0, and hence be drawn in red as distance is 0.0\n    return length(max(d, vec2(0))) + min(max(d.x, d.y), 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // b.x value will change the shape of the box along the x-direction\n    // b.y value will change the shape of the box along the y-direction\n    // To use negative values for b (e.g. (-0.1, -0.1)), we will have to replace the abs(p) to p, so that the negative values of p\n    // are not clamped to the first quadrant, otherwise, abs(p) - b will always be positive as b is negative ie (-0.1, -0.1).\n    // Hence, we will see the entire screen as yellow\n    vec2 b = vec2(0.1, 0.1);\n    vec2 boxPos = uv;\n    \n    // Thus, on subtracting by 0.5, the uv values no more range from 0.0, 0.0 to 1.0, 1.0.\n    // Instead, they range from -0.5, -0.5 to 0.5, 0.5, and as 0.0, 0.0 is the center for the box.\n    // 0.0, 0.0 is now at the center of the screen. Hence, the box moves to the center:\n    boxPos.x -= 0.5;\n    boxPos.y -= 0.5;\n    \n    float dist = sdBox(boxPos, b);\n    \n    vec3 col = vec3(0.0, 0.0, 0.0);\n    \n    // Since we want the box to be filled, we are only checking if the distance is less than 0.005. So all points inside the box will,\n    // have max(d.x, d.y) as a negative value. Thus, min(value, 0.0) will always be negative, and so this value will always be less\n    // than 0.005 and so the box will be filled with red.\n    // If the point is outside the box, the right side of the equation will always return 0.0, because min(postiveValue, 0.0) will be\n    // 0.0. But, the left side of the equation will take care of the points outside the box. Since we are taking abs(p), the point p\n    // will always lie in the 1st quadrant and d will be positive. So we are returning the max(d, vec2(0)), which will always be \n    // positive for all points outside the box. Then, the length will also be some positive value.\n    // Thus, the left side of the equation accounts for points outside the box and the right side accounts for points inside the box.\n    // \n    if(dist < 0.005)\n        col = vec3(1.0, 0.0, 0.0);\n    else\n        col = vec3(1.0, 1.0, 0.0);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}