{"ver":"0.1","info":{"id":"ds2XWc","date":"1671046229","viewed":130,"name":"butterfly3d","username":"karanbpathak","description":"inspired by \nhttps://www.shadertoy.com/view/sdBSWc\nhttps://iquilezles.org/articles/smoothstepintegral","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","butterfly"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// inspired by :\n// https://www.shadertoy.com/view/sdBSWc\n// https://iquilezles.org/articles/smoothstepintegral\n\n\n// Rotation matrix around the X axis.\n// inspired by https://inspirnathan.com/posts/54-shadertoy-tutorial-part-8/\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n// Incorrect EaseInOut/Smoothstep velocity\nfloat position_bad( float t, in float T )\n{\n    return smoothstep(0.0,T,t)*t;\n    //return (t<T) ? (t*t*t)/(T*T*T)*(3.0*T-2.0*t) : t;\n}\n// Correct integral of EaseInOut/Smoothstep\nfloat position_good( float t, in float T )\n{\n    if( t>=T ) return t - 0.5*T;\n    float f = t/T;\n    return f*f*f*(T-t*0.5);\n}\n\nvec3 trackMin( in vec3 v, in float d )\n{\n         if( d<v.x ) v=vec3(d,v.x,v.y); \n    else if( d<v.y ) v=vec3(v.x,d,v.y);\n    else if( d<v.z ) v=vec3(v.x,v.y,d);\n    return v;\n}\nfloat butterfly( in vec3 p )\n{\n    p.x = abs(p.x);\n    p.y *= 0.9;\n\n    float a = atan(p.x,p.y);\n    float r = length(p);\n    float d = 0.0;\n        \n    if( p.y<0.0 )\n    {\n        float f = 0.6 + 0.01*sin( 24.0*a );\n        float w = 1.1*a-0.8;\n        f *= sin(w)*sin(w);\n\n        float th = f + 0.001;\n        float th2 = th;\n        \n        vec2 q = p.xy;\n        q.xy += 0.02*sin(q.yx*12.0);\n        q.y = min(q.y,0.0);\n        vec3 v = vec3(10);\n        v = trackMin(v,length(q-vec2(0.29,-0.20)));\n        v = trackMin(v,length(q-vec2(0.10,-0.30)));\n        v = trackMin(v,length(q-vec2(0.20,-0.26)));\n        v = trackMin(v,length(q-vec2(0.28,-0.29)));\n        v = trackMin(v,length(q-vec2(0.34,-0.27)));\n        v = trackMin(v,length(q-vec2(0.38,-0.24)));\n        v = trackMin(v,length(q-vec2(0.39,-0.20)));\n        v = trackMin(v,length(q-vec2(0.38,-0.15)));\n        v = trackMin(v,length(q-vec2(0.35,-0.08)));\n\n        v.yz -= v.x;\n        \n        float g = 1.25*v.y*v.z/max(v.y+v.z,0.001);\n        th -= 0.05*(1.0-smoothstep(0.0,0.05,g))-0.02;\n\n        q = vec2( mod(a,0.1)-0.05, (r-th+0.025)*3.1415*0.5 );\n        //d = length( q )-0.015;\n        \n        d = r-(th+th2)*0.5;\n        //col = vec4(wcol,smoothstep( 0.0,2.0*fwidth(d),-d) );\n    }\n    \n    if( a<2.2 )\n    {\n        float f = 0.65 + 0.015*sin( 24.0*a );\n        float w = a*(3.1416/2.356);\n        float th = f*sin(w)*sin(w) + 0.001;\n        th += 0.25*exp2( -50.0*(w-1.4)*(w-1.4) );\n\n        vec3 v = vec3(10);\n        vec2 q = p.xy;\n        v = trackMin(v,length(q-vec2(0.25,0.2)));\n        v = trackMin(v,length(q-vec2(0.35,0.0)));\n        v = trackMin(v,length(q-vec2(0.4,0.1)));\n        v = trackMin(v,length(q-vec2(0.45,0.2)));\n        v = trackMin(v,length(q-vec2(0.45,0.3)));\n\n        v.yz -= v.x;\n\n        vec2 qq = vec2( mod(a,0.1)-0.05, (r-th+0.025)*3.1415*0.5 );\n        d = length( qq )-0.015;\n    \n        d = r-th;\n    }\n    return d;\n}\nfloat map(in vec3 p)\n{\n    return butterfly(p);\n}\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.0005;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( res<0.005 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.15*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - occ*1.5, 0.0, 1.0 );\n}\n\nint hash( ivec2 z )\n{\n    int n = z.x+z.y*11111;\n    n = (n<<13)^n;\n    return (n*(n*n*15731+789221)+1376312589)>>16;\n}\n\nvec3 cam(in vec2 p, in vec3 ro, in vec3 ta, float an, float mo)\n{\n    // camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv =          ( cross(uu,ww));\n    \n\t// create view ray\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n    return rd;\n}\n\n#if HW_PERFORMANCE==0\n#define AA 1\n#else\n#define AA 3\n#endif\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float stime = mod( iTime, 6.0 );\n    \n    \n    // render\n    vec3 tot = vec3(0.0);\n    \n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        // pixel coordinates\n        vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord+o))/iResolution.y;\n        #else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n        #endif\n        \n        float di = float( hash(ivec2(fragCoord)*AA+ivec2(m,n))&255 )/255.0;\n        float time = stime + ((float(n*AA+m)+di)/float(AA*AA))*(0.5/30.0) - 0.5*0.5/30.0;\n        \n        time += 0.07*sin( p.y );\n        \n        float wing = (p.x<0.0)?position_bad(time, 2.0):\n                               position_good(time, 2.0);\n        \n        if( p.x>0.0 ) p.x=p.x-0.7;\n        else          p.x=p.x+0.7;\n        \n        \n        float mo = (2.0*iMouse.x/iResolution.y);\n        float an = 2.55*(0.5-0.5*cos(2.0*6.283185*wing));\n        vec2  pl = vec2(sign(p.x)*sin(an),-cos(an));\n        vec3 ro = vec3( 1.0, 0.01, 2.1 );\n        vec3 ta = vec3( 0.0, 0.0, 0.0 );\n        \n\n        // raymarch\n        const float tmax = 5.0;\n        float t = 0.0;\n        vec3 rd = cam(p,ro, ta, an, mo);\n        //rd *= dot(ro.xz,pl)/dot(rd.xz,pl);\n        for( int i=0; i<256; i++ )\n        {\n            vec3 pos = ro + t*rd;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = calcNormal(pos);\n            vec3 lig = normalize(vec3(0.6,0.2,0.4));\n            vec3 hal = normalize(lig-rd);\n            float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n            float occ = calcOcclusion( pos, nor );\n            if( dif>0.001 ) dif *= calcSoftshadow( pos, lig, 0.01, 1.0 );\n            float spe = pow(clamp(dot(nor,hal),0.0,1.0),16.0)*dif*(0.04+0.96*pow(clamp(1.0-dot(hal,-rd),0.0,1.0),5.0));\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,1.0,0.0));\n            col =  vec3(0.5,1.0,1.2)*amb*occ;\n            col += vec3(2.8,2.2,1.8)*dif;\n            \n            col *= 0.5;\n            \n            col += vec3(2.8,2.2,1.8)*spe*3.0;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    #if AA>1\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}