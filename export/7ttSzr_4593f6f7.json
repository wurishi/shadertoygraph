{"ver":"0.1","info":{"id":"7ttSzr","date":"1638657889","viewed":371,"name":"Jump Flooding in 2Frame","username":"coposuke","description":"I love : @paniq's https://www.shadertoy.com/view/4syGWK\nRef : https://www.youtube.com/watch?v=A0pxY9QsgJE\n\nMouse Click : Draw\nR Key : Reset\n\n8 pass (initialize : 1 pass, JFA 7 pass)\nA.xy(init) -> B.xy -> C.xy -> D.xy -> A.zw -> B.zw -> C.zw -> D.zw(fin)","likes":13,"published":1,"flags":48,"usePreview":0,"tags":["jump","flooding","jfa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec2 seed = texture(iChannel0, uv).zw;\n    fragColor.rgb = vec3(seed, 0.0);\n    \n    float dist = distance(uv, seed);\n    fragColor.rgb = vec3(dist);\n    \n    float grad = dist * 6.28218 * 30.0 - iTime * 10.0;\n    fragColor.rgb = mix(vec3(1), cos(vec3(0,2,4) + grad) * 0.15 + 0.8, step(0.001, dist));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//#define DEBUG\nconst float FRAME = 13.0;\nconst float STEP = 7.0 + 1.0;\nconst float ITER = 3.0;\n\nvec3 jumpFlooding_Compare(vec2 seed, vec2 self, vec2 currentSeed, float currentDist)\n{\n    float dist = distance(seed, self);\n\n    bool isEmpty = 0.0 == seed.x + seed.y;\n    bool isFarther = currentDist < dist;\n    \n    if(isEmpty || isFarther)\n        return vec3(currentSeed, currentDist);\n    else\n        return vec3(seed, dist);\n}\n\nvec4 jumpFlooding(in vec2 fragCoord, sampler2D channel, vec2 resolution, float stepLength)\n{\n    vec2 self = fragCoord;\n    float dist = 1e+5;\n    vec4 color = vec4(0);\n\n    for(float x = -ITER; x <= ITER ; x++)\n    {\n        for(float y = -ITER; y <= ITER ; y++)\n        {\n            vec2 neighbor = self + vec2(x, y) * stepLength;\n            vec4 pointPosition = texture(channel, (neighbor + 0.0) / resolution.xy);\n            float pointDist = distance(pointPosition.xy, fragCoord / resolution.xy);\n            bool isEmpty = 0.0 == pointPosition.x + pointPosition.y;\n\n            if (isEmpty)\n                continue;\n\n            if(pointDist < dist)\n            {\n                dist = pointDist;\n                color = pointPosition;\n            }\n        }\n    }\n    \n    color.b = dist;\n    return color;\n}\n\nvec3 jumpFlooding_XY(in vec2 fragCoord, sampler2D channel, vec2 resolution, float stepLength)\n{\n    vec3 data = vec3(0.0, 0.0, 1e+5);\n    vec2 self = fragCoord / resolution.xy;\n\n    for(float x = -ITER; x <= ITER; x++)\n    {\n        for(float y = -ITER; y <= ITER; y++)\n        {\n            vec2 neighbor = fragCoord + vec2(x, y) * stepLength;\n            vec4 pointPosition = fract(texture(channel, (neighbor + 0.0) / resolution.xy));\n            data = jumpFlooding_Compare(pointPosition.xy, self, data.xy, data.z); // XY(x,y)\n        }\n    }\n\n    return data;\n}\n\nvec3 jumpFlooding_ZW(in vec2 fragCoord, sampler2D channel, vec2 resolution, float stepLength)\n{\n    vec3 data = vec3(0.0, 0.0, 1e+5);\n    vec2 self = fragCoord / resolution.xy;\n\n    for(float x = -ITER; x <= ITER; x++)\n    {\n        for(float y = -ITER; y <= ITER; y++)\n        {\n            vec2 neighbor = fragCoord + vec2(x, y) * stepLength;\n            vec4 pointPosition = texture(channel, (neighbor + 0.0) / resolution.xy);\n            data = jumpFlooding_Compare(pointPosition.zw, self, data.xy, data.z); // ZW(x,y)\n        }\n    }\n\n    return data;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3Rn","filepath":"/media/a/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","previewfilepath":"/media/ap/cbcbb5a6cfb55c36f8f021fbb0e3f69ac96339a39fa85cd96f2017a2192821b5.png","type":"texture","channel":3,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Jump Flooding : init A.xy\n//                 D.xy -> A.zw\n\nvec4 initialize_neko(in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv = uv * 0.5 + 0.5;\n    uv.x = clamp(uv.x / 6.0, 0.0, 1.0 / 6.0 - 1e-2);\n    \n    const float NEKO_FRAME = 6.0;\n    float neko = 40.0/ 256.0;\n    uv.x += mod(floor(float(iFrame) / NEKO_FRAME), 6.0) * neko;\n    \n    vec4 color = texture(iChannel3, uv);\n    color = vec4(step(dot(color, vec4(0,0,1,0)), 0.4));\n    color.xy = color.xy * vec2(fragCoord / iResolution.xy);\n    return color;\n}\n\nvec4 initialize(in vec2 fragCoord)\n{\n    vec4 color = vec4(0);\n    color = texture(iChannel1, fragCoord / iResolution.xy);\n\n    // Input Keyboard\n    float RKey = texelFetch(iChannel2, ivec2(82, 0), 0).x; // R key\n    if(0.0 < RKey)\n    {\n        color = vec4(0.0);\n    }\n    \n    // Input Mouse\n    if(0.0 < iMouse.z)\n    {\n        float mouseDist = distance(iMouse.xy, fragCoord);\n        color.rg += vec2(step(mouseDist, 20.0));\n    }\n\n    vec2 mask = vec2(step(1e-5, color.r + color.g));\n    color.xy = mask * vec2(fragCoord / iResolution.xy) + floor(color.xy);\n    \n    return color;\n}\n\n#ifdef DEBUG\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    \n    float f = floor(mod(float(iFrame), FRAME));\n    \n    if(f == 0.0)\n    {\n        color = initialize_neko(fragCoord);\n    }\n    else\n    {\n        float stepLength = pow(2.0, FRAME - f);\n        color = jumpFlooding(fragCoord, iChannel1, iResolution.xy, stepLength);\n    }\n    \n    fragColor = color;\n}\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    \n    if(iFrame <= 20)\n        color.xy = initialize_neko(fragCoord).xy;\n    else\n        color.xy = initialize(fragCoord).xy;\n\n    float stepLength = pow(2.0, STEP - 4.0);\n    color.zw = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}\n#endif","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Jump Flooding : A.xy -> B.xy\n//                 A.zw -> B.zw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 1.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 5.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Jump Flooding : B.xy -> C.xy\n//                 B.zw -> C.zw\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 2.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 6.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Jump Flooding : C.xy -> D.xy\n//                 C.zw -> D.zw\n\n#ifdef DEBUG\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    \n    float f = floor(mod(float(iFrame), FRAME));\n    \n    if(f == FRAME - 1.0)\n        color = texture(iChannel1, fragCoord / iResolution.xy);\n    else\n        color = texture(iChannel2, fragCoord / iResolution.xy);\n    \n    fragColor = color.xyxy;\n}\n#else\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = vec4(0);\n    float stepLength = 0.0;\n    \n    stepLength = pow(2.0, STEP - 3.0);\n    color.xy = jumpFlooding_XY(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n\n    stepLength = pow(2.0, STEP - 7.0);\n    color.zw = jumpFlooding_ZW(fragCoord, iChannel0, iResolution.xy, stepLength).xy;\n    \n    fragColor = color;\n}\n#endif","name":"Buffer D","description":"","type":"buffer"}]}