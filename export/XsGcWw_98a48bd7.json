{"ver":"0.1","info":{"id":"XsGcWw","date":"1522156898","viewed":174,"name":"day2.0","username":"Nitato_","description":"Circle, rectangle, triangle, hexagon, rounded rectangle and various transformation functions. \nMouse do color change.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rep(vec2 p, float n) {\n\treturn fract(p*n)*2.-1.;\n}\nvec2 rep(vec2 p, vec2 n) {\n    float r = n.x/n.y;\n    vec2 a = (r<1. ? vec2(1./r,1.) : vec2 (1.,r));\n\treturn fract(p*n)*a*2.-a;\n}\nvec4 rep4(vec2 p, float n) {\n    vec2 pn = p * n;\n \treturn vec4(fract(pn) * 2.0 - 1.0, floor(pn));   \n}\nvec2 rot(vec2 xy, float ang) {\n\tfloat s = sin(ang);\n    float c = cos(ang);\n    return xy * mat2(c, -s, s, c);\n}\nfloat sdCircle(vec2 p, float r) {\n\treturn length(p) - r;\n}\nfloat sdTri(vec2 p, float h) {\n\tvec2 q = abs(p);\n    return max(q.x*0.866025+p.y*0.5,-p.y)-h*0.5;\n}\nfloat sdRect(vec2 p, vec2 d) {\n    vec2 pd = abs(p)-d;\n\treturn min(max(pd.x,pd.y),0.)+length(max(pd,0.));\n}\nfloat sdHex(vec2 p, vec2 h){\n    vec2 q = abs(p);\n    return max(q.x*0.866025+q.y*0.5,q.y)-h.x;\n}\nfloat udRoundRect(vec2 p, vec2 b, float r) {\n  \treturn length(max(abs(p)-b,0.0))-r;\n}\nfloat udRect(vec2 p, vec2 d) {\n   \treturn length(max(abs(p)-d, 0.));\n}\nfloat asLine(float d, float thickness) {\n\treturn (1. - smoothstep(0.,thickness,abs(d)));\n}\nvec2 scale(vec2 xy, vec2 s) {\n\treturn xy.xy/s.xy;\n}\nfloat correct(float d) {\n      float e = 2.0/iResolution.y;\n      return d<0.1 ? d/length(vec2(dFdx(d),dFdy(d))/e) : d;\n}\nvec2 mov(vec2 xy, vec2 t) {\n\treturn xy - t;\n}\nfloat asFilled(float d) {\n\treturn (1. - smoothstep(0.,.01,d));\n} \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = vec2(iResolution.x/iResolution.y, 1.);\n    vec2 uv = (fragCoord/iResolution.xy *2. - vec2(1.0)) * aspect;\n    vec4 m = vec4((iMouse.xy / iResolution.xy*2.0 - vec2(1.0)) * aspect,(iMouse.zw / iResolution.xy*2.0 - vec2(1.0)) * aspect);\n\tvec4 uv4 = rep4(uv, 3.);    \n    uv = uv4.xy;    \n    float s = mod(uv4.z+uv4.w, 5.);\n    float d = 0.0;\n    if(s > 3.) {\n        uv = rot(uv, iTime*-1.);\n\t    uv = rep(uv, sin(iTime)+1.5);\n        d = sdCircle(uv, .75);\n    \td = correct(d);\n    \td = asLine(d, .02);\n    } else if(s > 2.)  {\n        uv = rot(uv, iTime);\n    \td = sdRect(uv, vec2(.65));\n        d = asLine(d, .13);\n    } else if(s>1.) {\n        uv = mov(uv,  vec2(0.,-.26));\n    \tuv = scale(uv, vec2(sin(iTime)*0.2+1.));\n        d = sdTri(uv, .85);\n        d = asLine(d, .13);\n    } else if(s>0.) {\n        uv = rot(uv, iTime);\n        uv = rep(uv, sin(iTime)*0.5+0.75);\n    \td = sdHex(uv, vec2(.75));\n        d = asLine(d,.13);\n    } else {\n    \td = udRoundRect(uv, vec2(.7), .13);\n        d = asLine(d, 0.13);\n    }   \n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(sin(m.x)*0.5+0.5,2.*uv4.z*(sin(iTime)*.5+.5),4.*uv4.w*(cos(m.x)*0.5+0.5)));\n    fragColor = vec4(col,1.0)*d;\n}","name":"Image","description":"","type":"image"}]}