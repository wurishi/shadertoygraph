{"ver":"0.1","info":{"id":"NljSz1","date":"1628273345","viewed":1346,"name":"Pattern mosaic study","username":"felipetovarhenao","description":"Using shaping functions to create tiling, animated patterns.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["patterns","mosaic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nAuthor: Felipe Tovar-Henao [www.felipe-tovar-henao.com]\n*/\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nfloat fold(in float x) {\n    return abs(mod(x+1.0,2.0)-1.0);\n}\n\nfloat sine_ramp(in float x, in float s) {\n    float y = fract(x);\n    float h = 0.5 - (0.5/(s*s));\n    return floor(x) + y + h*sin(6.28318530718*y);\n}\n\nfloat boot_ramp(in float x, in float s) {\n    float y = fract(x);\n    return floor(x) + pow(y, s*y+(1.0/s));\n}\n\nfloat shelf_ramp(in float x, in float s) {\n    float y = fract(x);\n    return floor(x) + 1.0-pow(1.0-y, s*y+(1.0/s));\n}\n\nfloat N_ramp(in float x, in float s) {\n    float y = fract(x);\n    float h = max(0.3, s);\n    return floor(x) + length(vec2(y,0.0)-vec2(pow(y,1.0/h),pow(y,h)));\n}\n\nvec2 rotate2D(in vec2 vUV, in float theta) {\n    vec2 r = vec2(cos(theta), sin(theta));\n    return vUV * mat2(r.x, -r.y, r.y, r.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    vec2 vUV = fragCoord.xy / iResolution.xy;\n    vUV -= 0.5;\n    vUV *= 2.5;\n    vUV = rotate2D(vUV, -iTime*0.025);\n    vUV += iTime*vec2(0.05*(-vUV.y*0.01), 0.05*(vUV.x*0.01)) + (iTime*0.05);\n    vUV.x *= iResolution.x / iResolution.y;\n    vec3 color = vec3(0.0);\n\n    float scl = 4.0;\n    float slope = scl* pow(fold(iTime*0.05), 2.0) + 1.0;\n    vUV = vec2(sine_ramp(vUV.x,slope), sine_ramp(vUV.y,slope));\n    vUV = vec2(fold(vUV.y*scl),fold(vUV.x*scl));\n\n    vUV /= N_ramp(length(vUV) * 0.9, 2.0);\n\n    float dx = length(vUV);\n\n    dx = length(vUV);\n    dx = fold(3.0*dx);\n    dx = clamp(dx, 0.0, 1.0);\n    dx = N_ramp(dx, 5.0);\n\n    float br = 3.0*shelf_ramp(fold(iTime*0.25), 1.0) + 4.0;\n\n    color += boot_ramp(dx, br);\n    color = color * 1.4;\n    color = clamp(color, 0.0, 1.0);\n\n    vec3 A = vec3(1.0, 0.3686, 0.3686) * color;\n    vec3 B = vec3(0.3843, 0.7333, 1.0) * color;\n    vec3 C = vec3(0.5098, 1.0, 0.5098) * color;\n\n    color = mix(A, C, N_ramp(fold(length(vUV)), 4.0));\n    color = mix(color, B, fold((vUV.y+vUV.x)*0.5 + (iTime*0.1)));\n    color = smoothstep(0.0, 1.0, color);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}