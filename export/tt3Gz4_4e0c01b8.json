{"ver":"0.1","info":{"id":"tt3Gz4","date":"1575802415","viewed":68,"name":"MengerSponge","username":"Hei149","description":"fractal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(ang) mat2(cos(ang), sin(ang), -sin(ang), cos(ang))\n\nfloat sdBox(vec3 p, vec3 b)\n{\n \tvec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sdCross(vec3 p)\n{\n    float d = sdBox(p, vec3(1.5, 0.33, 0.33));\n    d = min(d, sdBox(p, vec3(0.33, 0.33, 1.5)));\n    d = min(d, sdBox(p, vec3(0.33, 1.5,  0.33)));\n\treturn d;\n}\n\nfloat id = 0.0;\nfloat sponge(vec3 p)\n{\n    vec3 q = p;\n    float scale = 1.0;\n    float d = sdBox(p, vec3(1.0));   \n    float d1 = 100.0;\n    for(int i = 0; i < 4; ++i){\n        float c = sdCross(q) / scale;\n        d = max(d, -c);\n        d1 = min(d1, c);\n        if(c < d + 0.01)\n        {\n            id = float(i + 1);\n        }\n        scale *= 3.0;\n        q = abs(abs(q * 3.0) - 1.0) - 1.0;\n    }\n    return mix(d, d1, abs(sin(iTime)) * 0.0) * 0.9;\n}\n\nfloat map(vec3 p)\n{\n    p.xz *= rot(iTime);\n    p.yz *= rot(iTime);\n \treturn sponge(p);   \n}\n\nvec3 norm(vec3 p)\n{\n \tvec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n    \tmap(p + e.xyy) - map(p - e.xyy),\n        map(p + e.yxy) - map(p - e.yxy),\n        map(p + e.yyx) - map(p - e.yyx)\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(0.0);\n    \n    vec3 r0 = vec3(1., 2., -2);\n    vec3 tgt = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize(tgt - r0);\n    vec3 uu = cross(vec3(0, 1, 0), ww);\n    vec3 vv = cross(ww, uu);\n    vec3 rd = uv.x * uu + uv.y * vv + ww;\n    col = texture(iChannel0, rd).rgb;\n    \n    float d = 0.0;\n    \n    for(int i = 0; i < 100; ++i)\n    {\n        \n     \tvec3 p = r0 + d * rd;\n        float t = map(p);\n        d += t;\n        if(abs(t) < 0.001)\n        {\n            vec3 p = r0 + d * rd;\n            vec3 n = norm(p);\n            col = texture(iChannel0, reflect(rd, n)).rgb;\n            break;\n        }\n        if(d > 100.0) break;\n    }\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}