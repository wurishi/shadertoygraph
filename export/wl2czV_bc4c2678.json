{"ver":"0.1","info":{"id":"wl2czV","date":"1594893434","viewed":259,"name":"Ascending Love","username":"Flopine","description":"Here is a version of a live coding session made during Infinite Lives Chiptune concert, alongside ThronoCrigger STRATOSPHERIC music <3 \nGO LISTEN HIS JAM https://thronocrigger.bandcamp.com/  :P \n","likes":11,"published":1,"flags":64,"usePreview":0,"tags":["raymarching","cube","distortion","isometric","live"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4lS3zd","filepath":"https://soundcloud.com/thronocrigger/so-hot-youre-hurting-my-feelings-remix","previewfilepath":"https://soundcloud.com/thronocrigger/so-hot-youre-hurting-my-feelings-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n// You can disabled the distortion effect to see the scene better by commenting this line \n// V\n#define DISTORTION\n\n#define ITER 64.\n#define PI acos(-1.)\n#define TAU 6.283183\n\n#define BPM (113./60.)\n#define ft(speed) fract(iTime*speed)\n#define bouncy(speed) sqrt(abs(sin(ft(speed)*TAU)))\n#define sw(speed) floor(sin(ft(speed)*TAU)+1.)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define AAstep(thre, val) smoothstep(-.7,.7,(val-thre)/min(.01,fwidth(val-thre)))\n#define equiratio vec2(1., sqrt(3.)/3.)\n\nstruct OBJ\n{\n    float d;\n    vec3 color;\n};\n\nOBJ minobj (OBJ a, OBJ b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = atan(p.y,p.x) + per/2.;\n    float id = floor(a/per);\n    a = mod(a,per)-per/2.;\n    p = vec2(cos(a),sin(a))*length(p);\n    return id;\n}\n\nvoid mo(inout vec2 p, vec2 d)\n{\n    p = abs(p) - d;\n    if (p.y > p.x) p = p.yx;\n}\n\nvec3 pal (float t, vec3 c)\n{return vec3(0.5)+vec3(0.5)*cos(TAU*(c*t+vec3(0., 0.36, 0.64)));}\n\nOBJ travelers (vec3 p)\n{\n    p.xz *= rot(ft(BPM/8.)*TAU);\n\n    vec3 ctrav = vec3(0.);\n    p.y -= bouncy(BPM/2.);\n    float tid = moda(p.xz,3.);\n    p.x -= 1.8+sin(ft(BPM/8.)*TAU);\n\n    if (tid == 0.) ctrav = vec3(1.,0.,0.4);\n    else if (tid == 1.) ctrav = vec3(0.95,0.8,0.);\n        else if (tid == -1.) ctrav = vec3(0.,0.4,1.);\n\n            OBJ travs = OBJ(box(p,vec3(0.5)),vec3(ctrav));\n\n        return travs;\n}\n\nfloat setper = 12.;\nOBJ grid (vec3 p)\n{\n    p.y = mod(p.y,setper)-setper*0.5;\n    OBJ gr;\n    mo(p.xz,vec2(1.5));\n    p.x -= 2.5;\n    gr.d = sc(p,0.1);\n    gr.color = pal(p.y,vec3(PI/2.));\n\n    return gr;\n}\n\nOBJ cages (vec3 p)\n{\n    p.y = mod(p.y-setper*0.5,setper)-setper*0.5; \n    mo(p.yz, vec2(2.));\n    p.y += 0.2;\n    mo(p.xz, vec2(2.));\n    p.x -= 4.;\n    float dcag = max(-sc(p,0.8),box(p,vec3(1.)));\n\n    return OBJ(dcag, vec3(.7));\n}\n\nOBJ poles (vec3 p)\n{\n    p.xz *= rot(p.y*0.05);\n    p.y = mod(p.y,setper)-setper*0.5; \n    mo(p.xz,vec2(5.));\n\n    float dpo = box(p,vec3(0.1,10.,0.1));\n    vec3 cpo = vec3(0.1,0.9,0.2);\n    return OBJ (dpo, cpo);  \n}\n\nOBJ CubeGF (vec3 p)\n{\n    p.y += 2.;\n    p.xz *= rot(ft(0.2)*TAU);\n    p.x = abs(p.x) -1.5;\n    float dcgf = box(p,vec3(0.3));\n    return OBJ(dcgf, vec3(0.8,0.1,0.6));\n}\n\nOBJ sets (vec3 p)\n{\n    p.y += iTime*BPM*2.;\n\n    OBJ s;\n    s = grid(p);\n    s = minobj(s,cages(p));\n    s = minobj(s,poles(p));\n\n    return s;\n}\n\nOBJ SDF (vec3 p)\n{\n    vec3 pp = p;\n    pp.yz *= rot(-atan(1./sqrt(2.)));\n    pp.xz *= rot(PI/4.);\n    OBJ scene = sets(pp);\n    scene = minobj(scene, travelers(pp));\n    scene = minobj(scene, CubeGF(pp));\n    return scene;\n}\n\nvec3 getnorm(vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat tris (vec2 uv)\n{return sign(fract(uv.x+0.5*uv.y)-fract(uv.y));}\n\nfloat trap (vec2 uv, vec2 s)\n{return max(abs(uv.y),abs(dot(uv,s)));}\nfloat trapz (vec2 uv)\n{\n    float width = 1.73*(1./length(normalize(equiratio)));\n    float height = 1.;\n    vec2 period = vec2(width,height)*4.;\n    uv = mod(uv,period)-period*0.5;\n    float uvx = abs(uv.x)-width;\n    float uvy = abs(uv.y)-height;\n    float d = AAstep(1.,trap(vec2(uvx,uvy),normalize(equiratio))); \n    d += (uv.x>0. && uv.y>0. || uv.x<0. && uv.y<0.) ? 0.5 : 0.;\n    return clamp(d,0.,1.);\n}\n\nfloat wave (vec2 uv)\n{\n    return smoothstep(0.1,\n                      0.2, \n                      sin(abs(length(uv+vec2(0.1,-0.1))-ft(BPM))*PI)\n                     );\n}\n\nfloat masks (vec2 uv)\n{\n    float zerotofour = floor(mod(iTime*(BPM),3.));\n    switch (int(zerotofour))\n    {\n        case 0: return tris(uv*6.)*0.5;\n        case 1: return trapz(uv*20.);\n        case 2: return 1.-wave(uv*5.);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n\t\n    #ifdef DISTORTION\n    \tuv += masks(uv)*0.05;\n    #endif\n\n    vec3 ro = vec3(uv*4.,-30.),\n        rd = vec3(0.,0.,1.),\n        l = normalize(vec3(-1.,2.,-1.)),\n        p = ro,\n        col = vec3(0.,0.,0.03);\n\n    OBJ obj;\n    bool hit = false;\n    for(float i=0.; i<ITER; i++)\n    {\n        obj = SDF(p);\n        if (obj.d<0.001)\n        {\n            hit = true; break;\n        }\n        p += obj.d*rd;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = dot(n,l)*.5+.5;\n        vec3 clight = mix(vec3(0.03),vec3(0.,0.,0.08),light);\n        col = vec3(obj.color)*light;\n    }\n\n    fragColor = vec4(sqrt(col), 1.0);\n}","name":"Image","description":"","type":"image"}]}