{"ver":"0.1","info":{"id":"X3t3R4","date":"1716178373","viewed":93,"name":"the mandlebruh","username":"Swifter","description":"HOW","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 150.\n\nconst float M_LN2 = log(2.);\n\nvec3 palette( in float t)\n{\n    vec3 a = vec3(1., 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(0.75, 1., 0.667);\n    vec3 d = vec3(0.8, 1., 0.333);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec2 getZoom()\n{\n    float t = cos(iTime * 0.2) * 0.5 + 0.5;\n    t = pow(t, 2.);\n    return vec2(\n        mix(0.0001, 1., t),\n        t\n    );\n}\n\nvec2 screenToSpace(vec2 coord)\n{\n    vec2 uv = coord/iResolution.xy;\n    uv = uv * 2. - 1.;\n    vec2 z = getZoom();\n    uv *= z.x;\n    uv *= 1.25;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x -= mix(1.4828, 0.7, z.y);\n    return uv;\n}\n\nvec2 iteratePoint(vec2 z, vec2 c)\n{\n    return vec2(\n        z.x*z.x - z.y*z.y + c.x,\n        z.x*z.y + z.x*z.y + c.y\n    );\n}\n\n// https://iquilezles.org/articles/distfunctions2d/\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nbool outOfBounds(vec2 p)\n{\n    return length(p) > 69.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = screenToSpace(fragCoord);\n    vec2 c = uv;\n    \n    vec2 mouse = screenToSpace(iMouse.xy);\n    vec2 mouseC = mouse;\n    \n    float m = 0.;\n    float iterationsUV = 0.;\n    \n    bool mouseDown = iMouse.z > 0.;\n    bool uvOOB = false;\n    bool mouseOOB = false;\n    \n    float zoom = getZoom().x;\n    \n    for (float i = 0.; i < ITERATIONS && (!uvOOB || !mouseOOB); i++)\n    {\n        if (mouseDown)\n        {\n            vec2 lastMouse = mouse;\n            mouse = iteratePoint(mouse, mouseC); \n\n            float line = udSegment(c, mouse, lastMouse);\n            if (line < 0.005 * zoom && !mouseOOB) \n            {\n                fragColor = vec4(1.000,1.000,0.000,0);\n                return;\n            }\n            \n            mouseOOB = outOfBounds(mouse);\n        }\n        \n        if (!uvOOB)\n        {\n            uv = iteratePoint(uv, c);\n            iterationsUV++;\n            uvOOB = outOfBounds(uv);\n        }\n    }\n    \n    // https://www.reddit.com/r/math/comments/2abwyt/smooth_colour_mandelbrot/\n    float a = iterationsUV+2. - log(log(dot(uv, uv))) / M_LN2;\n    a = log(a * 7.);\n    vec3 col = !uvOOB ? vec3(0.) : palette(-a * 0.2 - 0.5 + 1.56);\n    // Output to screen\n    fragColor = vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}