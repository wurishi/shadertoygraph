{"ver":"0.1","info":{"id":"4dG3Wc","date":"1456626123","viewed":232,"name":"Checkerboards","username":"RolandRock","description":"Flying above a bunch of checkerboards. Inspired by Titan's demo Overdrive: https://youtu.be/iQqJm14sHRY?t=260<br/>Hold mouse down to move camera around. There's also some code you can uncomment for some cool effects.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 cameraPos;\nfloat focalLength;\n\nvec3 backgroundColor = vec3(0.0);\nvec3 baseCheckerboardColor = vec3(0.2, 0.9, 0.2);\n\nvec2 screenCenter;\nconst int numLayers = 10;\n\nbool IsCheckerboardAtPixel(in vec2 fragCoord, in float checkerboardZ)\n{\n    float z = checkerboardZ - cameraPos.z;\n    \n    //Dont draw checkerboard if it's behind the camera\n    if(z <= 0.) return false;\n    \n    //Transform pixel coords to world coords\n    //Inverse of [screenxy = ((worldxy - camxy)/z * scale) + center] is [worldxy = camxy + (z * ((screenxy - center)/scale)]\n    vec2 worldxy = cameraPos.xy + ((fragCoord - screenCenter)/focalLength) * z;\n    \n    // Uncomment for spinning!\n    //mat2 rotationMatrix = mat2(cos(iTime/3.0), -sin(iTime/3.0),\n    //                           sin(iTime/3.0), cos(iTime/3.0));\n    //worldxy = cameraPos.xy + (rotationMatrix * (worldxy - cameraPos.xy));\n       \n    // Uncomment for melting!\n    //worldxy.x += sin(worldxy.y + iTime - (checkerboardZ * checkerboardZ));\n    //worldxy.y += sin(worldxy.x + iTime + (checkerboardZ * checkerboardZ));\n       \n    //checkboard squares are 1x1\n    worldxy = mod(worldxy, 2.);\n    return (worldxy.x < 1.) == (worldxy.y < 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    screenCenter = iResolution.xy / 2.0;\n    \n    //+z is towards checkerboard, -z is away from checkerboard\n    cameraPos = vec3(10.0 * cos(iTime / 2.0), \n                     10.0 * sin(iTime / 2.0), \n                     -((sin(iTime) + 1.0) * 2.0 - 0.5)\n                    );\n    \n    //holding mouse lets you move camera around a bit\n    cameraPos.xy -= iMouse.xy / 50.;\n    \n    //Not sure if focal length is correct term but it gets the idea across\n    //Multiply by resolution so scale stays the same when resolution is higher\n    focalLength = 100.0 * (iResolution.x/1000.0);\n    \n    //Generate checkerboard layers\n    fragColor = vec4(backgroundColor, 1.0);\n    for(int i=0; i < numLayers; ++i)\n    {\n        float checkerZ = float(i)*0.8;\n        \n        //Colors get darker at lower layers\n        float colorMult = float(numLayers - i)/float(numLayers);\n        vec4 planeColor = vec4(baseCheckerboardColor * colorMult, 1.0);\n        \n        //Check if the checkerboard is visible at this pixel\n        if(IsCheckerboardAtPixel(fragCoord, checkerZ))\n        {\n            fragColor = planeColor;\n            break;\n        }\n    }\n}","name":"Image","description":"","type":"image"}]}