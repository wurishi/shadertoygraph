{"ver":"0.1","info":{"id":"4sVXRy","date":"1465075733","viewed":276,"name":"audio buffering x4","username":"GottZ","description":"bleep bloop\njust fiddeling with an idea here.\ni might add time based interpolation to Buf A next time i'm playing with this","likes":7,"published":1,"flags":96,"usePreview":0,"tags":["audio","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 sound = texture(iChannel0, vec2(mod(uv.x*4.0, 1.0), uv.y));\n    float fft = uv.x < 0.25 ? sound.w : uv.x < 0.5 ? sound.z : uv.x < 0.75 ? sound.y : sound.x;\n    \n    vec3 scaledfft = vec3(smoothstep(0.0, 1.0/3.0, fft),\n                      smoothstep(1.0/3.0, 1.0/3.0*2.0, fft),\n                      smoothstep(1.0/3.0*2.0, 1.0, fft));\n    scaledfft.r -= scaledfft.b;\n    fragColor = vec4(vec3(scaledfft), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"ldlGDj","filepath":"https://soundcloud.com/tinush/tinush-tinnitush-original-free","previewfilepath":"https://soundcloud.com/tinush/tinush-tinnitush-original-free","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    /*if (mod(float(iFrame), 2.0) > 0.0) {\n    \tfragColor = texture(iChannel1, uv);\n        return;\n    }*/\n    \n    float px = 1.0 / iResolution.y;\n    \n    float fft = texture(iChannel0, vec2(uv.y, 0.25)).x;\n    \n    vec4 prev = texture(iChannel1, vec2(uv.x+px, uv.y));\n    if (uv.x < 1.0 - px)\n    \tfragColor = prev;\n    else {\n        prev = texture(iChannel1, vec2(0.0, uv.y));\n        fragColor = vec4(fft, prev.x, prev.y, prev.z);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}