{"ver":"0.1","info":{"id":"WlXfz4","date":"1596079696","viewed":600,"name":"Sphere with shade","username":"reatured","description":"Sphere with shadow","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\nfloat GetDist(vec3 p){\n \tvec4 s = vec4(sin(iTime * 3.),abs(sin(iTime * 5.)) +1. ,cos(iTime * 3. )+ 8.,1.);//sphere location and radius\n    float sphereDIst = length(p-s.xyz) - s.w;//dist to sphere\n    float planeDist = p.y;\n    float d = min(sphereDIst, planeDist);\n    return d;\n    \n}\nfloat RayMarch(vec3 ro, vec3 rd){\n\tfloat dO = 0.; \t//distance\n    \n    for(int i = 0; i<MAX_STEPS; i++){\n     \tvec3 p = ro + rd*dO;//step destination vector\n        float dS = GetDist(p);//dist to destination\n        dO += dS; \n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    return dO;\n}\n\nvec3 GetNormal(vec3 p){\n \tfloat d = GetDist(p);\n    vec2 e = vec2(.01, 0.);\n    \n    vec3 n = d - vec3(GetDist(p-e.xyy),\n                      GetDist(p-e.yxy),\n                      GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p){\n\tvec3 lightPos = vec3(0., 5., 6.);\n    lightPos.xz += vec2(sin(iTime), cos(iTime)) * 2.;\n    vec3 l = normalize(lightPos - p);\n    vec3 n = GetNormal(p); //obj normal\n    \n    float dif = clamp(dot(n, l),0.,1.);//shadow\n    float d = RayMarch(p + n*SURF_DIST * 2.,l);\n    if(d<length(lightPos - p))\t dif *= .2;\n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\tuv = (uv-0.5) *2.;\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.1);\n    \n    vec3 ro = vec3(0.,1.,0.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 3.));\n\n    float d = RayMarch(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    float dif  = GetLight(p);//the position on obj\n    \n    \n    \n    d /= 6.;\n    col += vec3(0.2 + uv.x*0.2,0.5 + uv.x *-0.6,0.7)*dif;\n    \n\n    //col = GetNormal(p);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}