{"ver":"0.1","info":{"id":"csfBRs","date":"1689198905","viewed":91,"name":"Standard Operator graph","username":"ChunderFPV","description":"Cyan: sum of x+y\nRed: difference of x-y\nPurple: product of x*y\nGold: quotient of x/y","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["graph","plot","addition","multiplication","division","subtraction","operators"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define H(a) (cos(vec3(0,2,4)+a*6.3)*.5+.5)                                 // hue\n#define L(x,w) smoothstep(w*min(fwidth(x), 1.), 0., abs(x))                 // line\n#define Q(v1,v2,v3) c = max(c, L(v1, ls) * step(1., v2) * v3)               // quick func\n#define P(v,w) (1.-step(px*w, max(abs(u.x-v.x), abs(u.y-v.y))))             // square point\n#define N(o,v,h) c = max(c, digit(iChannel0, u-o, v, .07*s, 7., 2.).x * h)  // digits\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    float s = 8.,   // scale\n          ls = 1.5, // line size\n          ss = .2;  // snap strength\n    \n    vec2 R = iResolution.xy,\n         m = (iMouse.xy-.5*R)/R.y*s, // mouse coords\n         rm = round(m/ss)*ss, // rounded mouse\n         u = (U-.5*R)/R.y*s,  // screen coords\n         ps = fwidth(u),      // pixel size\n         g = max(vec2(0), 1.-abs(fract(u+.5)-.5)/ps*.6); // grid\n    \n    if (rm.x == round(m.x)) m.x = rm.x; // snap to x\n    if (rm.y == round(m.y)) m.y = rm.y; // snap to y\n    \n    vec3 c = vec3(0), // colors\n         c_sum = H(.5),\n         c_dif = H(.0),\n         c_prd = H(.25),\n         c_quo = H(.9);\n    \n    float x = u.x,\n          y = u.y,\n          yp = sign(m.y), // y polarity\n          sum = m.x+m.y,  // sum\n          dif = m.x-m.y,  // difference\n          prd = m.x*m.y,  // product\n          quo = m.x/m.y,  // quotient\n          px = length(ps)/1.414;\n    \n    c += max(0., max(g.x, g.y)*.2);      // grid lines\n    c += min(g.x, g.y)*.3;               // grid points\n    c = max(c, L(1.-length(u), 1.5)*.2); // unit circle\n    \n    // graphs\n    Q(y-(sum-x), 1., c_sum);\n    Q(y-(x-dif), 1., c_dif);\n    Q(y-(prd/x), 1., c_prd);\n    Q(y-(x/quo), 1., c_quo);\n    \n    // lines\n    Q(y-m.y, m.x/x, .5); // x\n    Q(x-m.x, m.y/y, .5); // y\n    Q(y+px, sum/x, c_sum);\n    Q(y-px, dif/x, c_dif);\n    Q(y-yp+px, yp*prd/x, c_prd);\n    Q(y-yp-px, yp*quo/x, c_quo);\n    \n    // points\n    c += P(m, 5.); // xy\n    c += P(vec2(sum, 0.), 3.);\n    c += P(vec2(dif, 0.), 3.);\n    c += P(vec2(prd*yp, yp), 3.);\n    if (abs(m.y) > 0.) c += P(vec2(quo*yp, yp), 3.);\n    \n    // display numbers\n    N(vec2(m.x, m.y+.2), m.x, .6);\n    N(vec2(m.x, m.y-.2), m.y, .6);\n    N(vec2(sum, 0), sum, c_sum);\n    N(vec2(dif, 0), dif, c_dif);\n    N(vec2(prd*yp, yp), prd, c_prd);\n    N(vec2(quo*yp, yp), quo, c_quo);\n    \n    C = vec4(c+c*c, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// font code from https://www.shadertoy.com/view/7tV3zK\nvec4 char(sampler2D ic, vec2 p, int c)\n{\n    vec2 dFdx = dFdx(p/16.), dFdy = dFdy(p/16.);\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad(ic, p/16. + fract( vec2(c, 15-c/16)/16.), dFdx, dFdy );\n}\nvec4 pInt(sampler2D ic, vec2 p, float n, float d)\n{\n    vec4 v = vec4(0);\n    if (n < 0.) \n        v += char(ic, p - vec2(-.5,0), 45 ),\n        n = -n;\n    for (float i = d; i>0.; i--) \n        n /=  9.999999, // 10., // for windows :-(\n        v += char(ic, p - .5*vec2(i-1.,0), 48+ int(fract(n)*10.) );\n    return v;\n}\n\n// texture, screen coords, value, size, num left digits, num right digits\nvec3 digit(sampler2D ic, vec2 uv, float v, float s, float l, float r)\n{\n    float numleft = min(log2(abs(v))/log2(10.), l-1.);\n    l = max(floor(numleft), 0.)+1.;\n    uv /= s; // size\n    if (isinf(abs(v))) return vec3(char(ic, uv*.7+vec2(.5, .3), 153).x); // infinity symbol\n    uv += vec2((l+1.)/2., .28); // center on decimal\n    vec3 d = vec3(0);\n    d += pInt(ic, uv, v, l).x; // left of decimal\n    uv.x -= l/2.;\n    d += char(ic, uv, 46).x; // decimal point\n    uv.x -= .5;\n    d += pInt(ic, uv, floor(abs(v)*pow(10., r)), r).x; // right of decimal\n    return d;\n}","name":"Common","description":"","type":"common"}]}