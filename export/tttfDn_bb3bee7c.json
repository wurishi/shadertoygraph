{"ver":"0.1","info":{"id":"tttfDn","date":"1612551381","viewed":161,"name":"Carpet pattern #0 remix: Shining","username":"TWal","description":"Remix of [url=https://www.shadertoy.com/view/ttcfR4]Carpet pattern #0[/url] to implement the Overlook Hotel carpet from The Shining.\nThanks to [url=https://www.shadertoy.com/user/ollj]ollj[/url] for noticing the similarity of the carpet from The Shining!","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["hexagon","tiling","carpet","wallpapergroup","shining","pmg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////\n//Version using sdf//\n/////////////////////\n#if 1\n//Thanks iq for the 2d sdf!\nfloat sdHexagon( in vec2 p, in float r ) {\n    p = p.yx;\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return length(p)*sign(p.y);\n}\n\nfloat sdBox( in vec2 p, in vec2 b ) {\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat sdThreeHexagon(vec2 p, float r) {\n    return min(sdHexagon(p-vec2(0.0, 0.5*sqrt(3.)), r),\n           min(sdHexagon(p-vec2(0.5, 0.0), r),\n               sdHexagon(p-vec2(0.5, (2.+3./7.)/sqrt(3.)), r)));\n}\n\nvec2 carpet_shining(vec2 uv, float blur) {\n    float modulus = (2.+3./7.)/sqrt(3.);\n    uv.x = abs(fract(uv.x+0.5)-0.5);\n    uv.y = mod(uv.y, modulus);\n    float sdSmallHex = sdThreeHexagon(uv, 1./7.);\n    float sd = max(sdThreeHexagon(uv, 2./7.), -sdSmallHex);\n    sd = max(sdThreeHexagon(uv, 3./7.), -sd);\n    float sdb = min(sdBox(uv-vec2(0.0, 1.25), vec2(0.5/7., 0.15)),\n                    sdBox(uv-vec2(0.5, 1.0), vec2(0.5/7., 0.15)));\n    sd = max(sd, -sdb);\n    return vec2(smoothstep(blur, -blur, sd), sdSmallHex < 0.1);\n}\n\n//////////////////////////////////\n//Version using hexagonal tiling//\n//////////////////////////////////\n#else\n\n#define ANTIALIAS 1\n\nvec2 carpet_shining(vec2 uv, float blur) {\n    uv = uv.yx;\n    vec2 off = vec2(sqrt(3.), 1.);\n    float modulus = (2.+3./7.)/sqrt(3.);\n    int id = int(floor(uv.x/modulus));\n    uv.y = abs(fract(uv.y+0.5)-0.5);\n    uv.x = mod(uv.x, modulus);\n    uv.x += 2./sqrt(3.);\n    if(dot(vec2(uv.x, -abs(uv.y)), normalize(off)) < 1.) {\n        uv.x += modulus;\n        id += 1;\n    }\n    vec2 uv1 = mod(uv, off)-off/2.;\n    vec2 uv2 = mod(uv+off/2., off)-off/2.;\n    vec2 nuv = (length(uv1) < length(uv2)) ? uv1 : uv2;\n    float d = max(abs(nuv.y), dot(abs(nuv), normalize(off)));\n    float N = 3.5;\n#if ANTIALIAS == 1\n    // There is still a little glitch on the connexion with the adjacent tiling :(\n    // (Hopefully we have to zoom in to see it!)\n    float b = smoothstep(0.5/N+blur, 0.5/N     , mod(d, 1./N))\n            * smoothstep(0.5/N     , 0.5/N-blur, mod(d, 1./N))\n            * smoothstep(0., blur, mod(d, 1./N))\n            * smoothstep(1./N, 1./N-blur, mod(d, 1./N));\n    if(uv.x < (2.+4./7.)/sqrt(3.) && uv.y < 0.6/7.) {\n        b = 0.;\n    }\n    if(uv.x < (2.+3.5/7.)/sqrt(3.)) {\n        float s = smoothstep(0.5/7.+blur, 0.5/7.     , uv.y)\n                + smoothstep(1.5/7.-blur, 1.5/7.     , uv.y);\n        b = 1.-s*(1.-b);\n    }\n    if(d < 0.25/9.) b = 1.;\n#else\n    bool b = mod(d, 1./N) < 0.5/N;\n    b = b && !(uv.x < (2.+4./7.)/sqrt(3.) && uv.y < 0.5/7.);\n    b = b ||  (uv.x < (2.+3.5/7.)/sqrt(3.) && 0.5/7. < uv.y && uv.y < 1.5/7.);\n#endif\n    bool ii = d < 1.5/7.;\n    \n    return vec2(b, ii);\n}\n\n#endif\n\nconst vec3 red = vec3(161., 28., 31.)/255.;\nconst vec3 orange = vec3(225., 99., 40.)/255.;\nconst vec3 brown = vec3(71., 38., 31.)/255.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    uv *= 5.;\n    uv.y += iTime/4.;\n    float pixelSize = 5./iResolution.y;\n    \n    vec2 res = carpet_shining(uv, 1.5*pixelSize/2.);\n    float b = res.x;\n    float ii = res.y;\n    vec3 col = mix(brown, mix(orange, red, ii), b);\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}