{"ver":"0.1","info":{"id":"Ms2yzy","date":"1492666839","viewed":155,"name":"Colorful Swirl 5 (HCL)","username":"ccorcos","description":"yup","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// HCL colorspace:\n// https://www.shadertoy.com/view/Xt3SDs\nconst float X = 0.950470;\nconst float Y = 1.0;\nconst float Z = 1.088830;\n\nconst float t0 = 4.0 / 29.0;\nconst float t1 = 6.0 / 29.0;\nconst float t2 = 3.0 * t1 * t1;\nconst float t3 = t1 * t1 * t1;\n\nfloat lab_xyz(float t) {\n    return t > t1 ? t * t * t : t2 * (t - t0);\n}\n\nfloat xyz_rgb(float x) {\n    return x <= 0.0031308 ? 12.92 * x : 1.055 * pow(x, 1.0 / 2.4) - 0.055;\n}\n\nvec3 lab2rgb(vec3 lab) {\n    float l = lab.x;\n    float a = lab.y;\n    float b = lab.z;\n    float y = (l + 16.0) / 116.0;\n    float x = y + a / 500.0;\n    float z = y - b / 200.0;\n    x = lab_xyz(x) * X;\n    y = lab_xyz(y) * Y;\n    z = lab_xyz(z) * Z;\n    return vec3(\n        xyz_rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z),\n\t\txyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),\n        xyz_rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z)\n    );\n}\n\nvec3 hcl2lab(vec3 hcl) {\n    float h = hcl.x;\n    float c = hcl.y;\n    float l = hcl.z;\n    h = radians(h);\n    return vec3(l, cos(h) * c, sin(h) * c);\n}\n\nvec3 hcl2rgb(vec3 hcl) {\n    return lab2rgb(hcl2lab(hcl));\n}\n\nvec3 hcl(float h, float c, float l)\n{\n\treturn hcl2rgb(vec3(h * 360.0, c * 128.0, l * 100.0));\n}\n\n\n// GLSL Tutorial for reference:\n// https://www.shadertoy.com/view/Md23DV\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Coordinate to width:\n    vec2 p = vec2(fragCoord.xy / iResolution.xy);\n    \n    // Number of tiles across\n    float tiles = 4.0;\n    \n    // Project point into that tile\n    vec2 tp = p * tiles;\n    \n    // Determine the spin of that tile\n    float sx = floor(mod(tp.x, 2.0)) * 2.0 - 1.0;\n    float sy = floor(mod(tp.y, 2.0)) * 2.0 - 1.0;\n    float spin = sx * sy;\n    \n    // Normalize the tile point\n    vec2 coord = mod(tp, 1.0) * iResolution.xy;\n     \n    // Just an alias for no reason\n    vec3 res = iResolution;\n            \n    // Polar coordinates:\n    // https://www.shadertoy.com/view/ltlXRf\n    vec2 rel = coord.xy - (res.xy / 2.0);\n    vec2 polar;\n    polar.y = sqrt(rel.x * rel.x + rel.y * rel.y);\n    polar.y /= res.x / 2.0;\n    polar.y = 1.0 - polar.y;\n\n    polar.x = atan(rel.y, rel.x);\n    polar.x -= 1.57079632679;\n    if(polar.x < 0.0){\n\t\tpolar.x += 6.28318530718;\n    }\n    polar.x /= 6.28318530718;\n    polar.x = 1.0 - polar.x;\n    \n    // Visualization params:\n    float speed = 0.3;\n    float arms = 1.0;\n    //float tightness = (sin(iTime * 2.0 / 3.0) + 1.0) * 0.5 * arms + 0.5;\n    float tightness = 1.5 * arms;\n    \n    // Compute swirl:\n    float hue = spin * polar.x * arms\n        + mod(arms, 2.0) * sy * 0.25\n        + iTime * speed\n        + spin * rel.x * rel.y / res.x / res.y * tightness;\n\n    // Compute rgb:\n    vec3 rgb = hcl(hue, 0.66, 0.76);\n    fragColor = vec4(rgb, 1.0);\n    \n    \n}","name":"Image","description":"","type":"image"}]}