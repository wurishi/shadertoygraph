{"ver":"0.1","info":{"id":"Ml3SRf","date":"1480804453","viewed":1148,"name":"bp Turbulence","username":"blackpolygon","description":"Playing with the examples of Fractal brownian motion from the book of shaders\n\nhttps://thebookofshaders.com/13/","likes":53,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","fractalbrownianmotion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: blackpolygon \n// Title: Turbulence\n// Date: December 2016\n\n// Based on the example from @patriciogv for Fractal Brownian Motion\n// https://thebookofshaders.com/13/\n\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nfloat random (in vec2 _st) { \n    return fract(sin(dot(_st.xy, vec2(12.9898,78.233))) * 43758.54531237);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3. - 2.0 * f);\n\n    return mix(a, b, u.x) + \n            (c - a)* u.y * (1. - u.x) + \n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 5\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(20.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5), \n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.2 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 st = (fragCoord.xy - 0.5*iResolution.xy )/min(iResolution.x,iResolution.y);\n    st *= 3.5;\n    \n    vec3 color = vec3(0.);\n    vec2 a = vec2(0.);\n    vec2 b = vec2(0.);\n    vec2 c = vec2(60.,800.);\n    \n    a.x = fbm( st);\n    a.y = fbm( st + vec2(1.0));\n    \n    b.x = fbm( st + 4.*a);\n    b.y = fbm( st);\n\n    c.x = fbm( st + 7.0*b + vec2(10.7,.2)+ 0.215*iTime );\n    c.y = fbm( st + 3.944*b + vec2(.3,12.8)+ 0.16*iTime);\n\n    float f = fbm(st+b+c);\n\n    color = mix(vec3(0.445,0.002,0.419), vec3(1.000,0.467,0.174), clamp((f*f),0.2, 1.0));\n    color = mix(color, vec3(0.413,0.524,0.880), clamp(length(c.x),0.480, 0.92));\n    \n    st = st/3.5;\n   \n    // Make the hexagon mask\n    int N = 6;\n    float ata = atan(st.x,st.y)+PI;\n    float r = TWO_PI/float(N);\n    float dist = cos(floor(.5+ata/r)*r-ata)*length(st);\n    \n    float hexagonMask = 1.0-smoothstep(.45,.452,dist);\n    float bgMask = 1.0 - hexagonMask;\n    \n    vec3 finalColor = vec3(f*1.9*color);\n    vec3 bgColor = vec3(0.950,0.951,0.90);\n\n    fragColor = vec4( bgColor*bgMask + finalColor*hexagonMask, 1.);\n}\n","name":"Image","description":"","type":"image"}]}