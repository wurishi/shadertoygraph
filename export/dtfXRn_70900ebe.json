{"ver":"0.1","info":{"id":"dtfXRn","date":"1674172480","viewed":175,"name":"Lander (Path Tracing)","username":"sjz1","description":"I used my path tracer to create this scene,and the lander is a fractal","likes":6,"published":1,"flags":32,"usePreview":1,"tags":["3d","fractal","reflection","terrain","sdf","4k","landscape","pathtracing","ggx","lander"],"hasliked":0,"parentid":"dtS3Dd","parentname":"Path Tracing (support smoke)"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//path tracer:https://www.shadertoy.com/view/dtS3Dd\nconst float gamma=2.2;\n\nvec3 ACESFilm( vec3 x )\n{\n    float tA = 2.51;\n    float tB = 0.03;\n    float tC = 2.43;\n    float tD = 0.59;\n    float tE = 0.14;\n    return clamp((x*(tA*x+tB))/(x*(tC*x+tD)+tE),0.0,1.0);\n}\n\nvec2 uv00;\nvec4 Load(){\n    return texture(iChannel0,uv00);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv00=uv;\n    vec3 tc=Load().xyz;\n    tc=ACESFilm(tc);tc=pow(tc,vec3(gamma));\n    fragColor=vec4(tc,1);\n   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI=3.1415926535;\nstruct object{\n    float d;float d2;int id;int i_id;int s;\n};\nstruct material{\n    vec3 Cs;vec3 Cd;vec2 S;vec4 R;vec3 light;\n};\n\nivec2 lp;\nvoid F(float x,float y);\n\n//----------------------------------------------------------------------------------------\n//  1 out, 1 in...\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 = fract(tan(dot(p3,p3)*20.*atan(p3))) ;\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 = fract(tan(dot(p3,p3)*20.*atan(p3))) ;\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n//----------------------------------------------------------------------------------------\n// 1 out 4 in...\nfloat hash14(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099));\n    p4 = fract(tan(dot(p4,p4)*20.*atan(p4))) ;\n\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\n\n\n\nfloat luma(vec3 c){\n    return dot(c,vec3(0.299,0.587,0.114));\n}\nvec4 rColor(vec3 c,float cosA){\n    cosA=abs(cosA);\n    vec3 A0=1.-sqrt(c);vec3 A1=1.+sqrt(c);\n    vec3 B=sqrt(4.*sqrt(c)+cosA*cosA*pow(A0,vec3(2)));\n    vec3 s0=(cosA*A0-B)/max(cosA*A0+B,1e-5);\n    vec3 s1=(B*A0-cosA*A1*A1)/max(B*A0+cosA*A1*A1,1e-5);\n    vec3 R=0.5*(s0*s0+s1*s1);\n    return vec4(R,luma(R));\n}\nfloat mixp(float F,float S){\n    return F*S/max(1.+(S-1.)*F,1e-5);\n}\nfloat fresnel(vec3 v,vec3 n,float rs){\n    float cosa=dot(v,n);\n    float cosb=sqrt(max(1.-(1.-cosa*cosa)/(rs*rs),0.));\n    return 0.5*(pow((cosa-rs*cosb)/max(cosa+rs*cosb,1e-4),2.)+pow((cosb-rs*cosa)/max(cosb+rs*cosa,1e-4),2.));\n}\n\nvec3 hsv2rgb(vec3 c){\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nvec3 rgb2hsv(vec3 c){\n\n    const vec4 k=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);\n    vec4 p=mix(vec4(c.bg,k.wz),vec4(c.gb,k.xy),step(c.b,c.g));\n    vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));\n    float d=q.x-min(q.w,q.y);\n    return vec3(abs(q.z+(q.w-q.y)/(6.*d+0.001)),d/(q.x+0.001),q.x);\n\n}\nvec2 rot(vec2 a,float theata){\n    return a.xx*vec2(cos(theata),sin(theata))+a.yy*vec2(-sin(theata),cos(theata));\n}\nvec3 rot(vec3 a,vec3 range){\n    a.yz=rot(a.yz,range.x);\n    a.xz=rot(a.xz,range.y);\n    a.xy=rot(a.xy,range.z);\n    return a;\n}\nfloat mix2(float A,float B,float x){\n    return (B-A)*x+A;\n}\nfloat mix2(int A,float B,float x){\n    return (B-float(A))*x+float(A);\n}\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25/k;\n}\nobject newObj(float d,float d2,int id,int i_id,int s){\n    object o;o.d=d;o.d2=d2;o.id=id;o.i_id=i_id;o.s=s;\n    return o;\n}\nobject near(object A,vec3 B){\n    float tmp1=min(A.d2,B.y);\n    float tmp=mix2(A.i_id,B.z,float(B.y<0.));\n    object c;\n    c.s=A.s+int(B.y<0.);\n    B.y=abs(B.y);\n    c.id=int(mix2(A.id,B.x,float(A.d>B.y)));\n    c.d=min(A.d,B.y);\n    c.i_id=int(tmp);\n    c.d2=tmp1;\n\n    return c;\n}\n\n\nvec2 rotClamp(vec2 pos,int n){\n    float alpha=-atan(pos.x,pos.y);\n    float tmp=PI/float(n);\n    return abs(rot(pos,-alpha+mod(alpha,2.*tmp)-tmp));\n}\nvec3 rnd33(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\nfloat sdSphere(vec3 p,float r){\n    return length(p)-r;\n}\nfloat sdBoundingBox( vec3 p, vec3 b, float e )\n{\n  p=abs(p)-b;\n  vec3 q=abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\nfloat sdEllipsoid( in vec3 p, in vec3 r ) // approximated\n{\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n    return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n// la,lb=semi axis, h=height, ra=corner\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\nfloat sdCone( in vec3 p, in vec2 c, float h )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,-1.0);\n    \n  vec2 w = vec2( length(p.xz), p.y );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return sqrt(d)*sign(s);\n}\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat hash( float n )\n{\n    return fract( n*17.5*fract( n*0.3183099 ) );\n}\nvec4 noised( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 w = fract(x);\n\tvec3 u = w*w*(3.0-2.0*w);\n    vec3 du = 6.0*w*(1.0-w);\n    \n    float n = p.x + p.y*157.0 + 113.0*p.z;\n    \n    float a = hash(n+  0.0);\n    float b = hash(n+  1.0);\n    float c = hash(n+157.0);\n    float d = hash(n+158.0);\n    float e = hash(n+113.0);\n\tfloat f = hash(n+114.0);\n    float g = hash(n+270.0);\n    float h = hash(n+271.0);\n\t\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k3 =   e - a;\n    float k4 =   a - b - c + d;\n    float k5 =   a - c - e + g;\n    float k6 =   a - b - e + f;\n    float k7 = - a + b + c - d + e - f - g + h;\n\n    return vec4( k0 + k1*u.x + k2*u.y + k3*u.z + k4*u.x*u.y + k5*u.y*u.z + k6*u.z*u.x + k7*u.x*u.y*u.z, \n                 du * (vec3(k1,k2,k3) + u.yzx*vec3(k4,k5,k6) + u.zxy*vec3(k6,k4,k5) + k7*u.yzx*u.zxy ));\n}\n\n\nvec4 fbm3D( in vec3 x ,int n)\n{\n    const float scale  = 1.5;\n\n    float a = 0.0;\n    float b = 0.5;\n\tfloat f = 1.0;\n    vec3  d = vec3(0.0);\n//    float t=1.25*min(x.y*2-2,1);\n    for( int i=0; i<n; i++ )\n    {\n        vec4 n = noised(f*x*scale);\n        a += b*n.x;           // accumulate values\t\t\n        d += b*n.yzw*f*scale; // accumulate derivatives\n        b *= 0.5;             // amplitude decrease\n        f *= 1.8;             // frequency increase\n    }\n\n\treturn vec4( a, d );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//#define SphereProjection\nconst float EPSILONS = 0.00002;\nconst float EPSILONS_MIN = 0.001;\nconst int MaxReflect=6;\nconst int MaxRayStep=560;\nconst float Far=2000.0;\nconst float FogS=0.001;\nconst float FogStart=250.0;\nconst float AA=16.;\nconst float ShadowOffset=0.;\nconst vec2 DOF_Pos=vec2(0);\nconst float DOF_R=0.;\nconst float FOV=0.5;\nconst float Marching_S=1.;\nconst float cut=32.;//change it to 1 if your computer is very fast\nconst int Type_Smoke=1;\nconst vec3 lightDir=normalize(vec3(0.5,-0.175,-.25));//Sun light direction\n//#define EnableObjectLight\n\n#ifdef EnableObjectLight\nvec4 centers[1]=vec4[1](vec4(0,0,0,1));\nint ids[1]=int[1](2);\n#endif\n\n\n#define Rayleigh 1.\n#define Mie 1.\n#define RayleighAtt 1.\n#define MieAtt 1.2\n\nfloat g = -0.95;\n\n#if 0\nvec3 _betaR = vec3(1e-1, 1e-1, 1e-1); \nvec3 _betaM = vec3(4e-2, 4e-2, 4e-2);\n#else\nvec3 _betaR = vec3(2.95e-1, 9.e-2, 2.94e-2); \nvec3 _betaM = vec3(8e-2, 4e-2, 4e-3);\n#endif\n\n\nvec3 Position_00;\n\nvec3 colors[MaxReflect];\nvec3 LightColors[MaxReflect];\nvec3 fog0[MaxReflect+1];\nvec3 ro0s[MaxReflect];\nvec3 rd0s[MaxReflect];\nfloat roughness0[MaxReflect];\nvec3 directLight0[MaxReflect];\nvec3 n0s[MaxReflect];\n\nfloat iFrame_;\nobject hit;\nvec3 pos_0;\n\n\n\n\nbool enablewater=true;\nvec4 ObjectLight(vec3 ro,vec3 rd,vec3 n,vec3 center,float R,int id);\nfloat Smoke(vec3 pos,vec3 rd,float density){\n    float s=0.01+hash13(pos+float(iFrame)+rd)*0.99;\n    float d=-log(s)/density;\n    return d;\n}\n\n\nvec4 orbitTrap=vec4(1);\n\nconst bool CycleColors=false;\nconst float Cycles=1.5;\n\nconst vec3 BaseColor=vec3(0.75098,0.75098,0.75098);\n// Determines the mix between pure light coloring and pure orbit trap coloring\nconst float OrbitStrength=0.7328;\n\n// Closest distance to YZ-plane during orbit\nconst vec4 X=vec4(0.6,0.6,0.3,0.3885);\n\n// Closest distance to XZ-plane during orbit\nconst vec4 Y=vec4(255./255.,23./255.,0.2,0.3168);\n\n// Closest distance to XY-plane during orbit\nconst vec4 Z=vec4(204./255.,199./255.,1,0.6141);\n\n// Closest distance to  origin during orbit\nconst vec4 R=vec4(202./255.,179./255.,0.2,0.0067);\n\nvec3 cycle(vec3 c, float s) {\n\treturn vec3(0.5)+0.5*vec3(cos(s*Cycles+c.x),cos(s*Cycles+c.y),cos(s*Cycles+c.z));\n}\n\n\nvec3 getColor() {\n   \n\torbitTrap.w = sqrt(orbitTrap.w);\n\n\tvec3 orbitColor;\n\tif (CycleColors) {\n\t\torbitColor = cycle(X.xyz,orbitTrap.x)*X.w*orbitTrap.x +\n\t\tcycle(Y.xyz,orbitTrap.y)*Y.w*orbitTrap.y +\n\t\tcycle(Z.xyz,orbitTrap.z)*Z.w*orbitTrap.z +\n\t\tcycle(R.xyz,orbitTrap.w)*R.w*orbitTrap.w;\n\t} else {\n\t\torbitColor = X.xyz*X.w*orbitTrap.x +\n\t\tY.xyz*Y.w*orbitTrap.y +\n\t\tZ.xyz*Z.w*orbitTrap.z +\n\t\tR.xyz*R.w*orbitTrap.w;\n\t}\n\tvec3 color = mix(BaseColor, 3.0*orbitColor,  OrbitStrength);\n\treturn color;\n}\n\nvec3 mul3(vec3 A,vec3 B){\n    float l=length(A)-A.x;\n    float s0=A.z/l;\n    float s1=A.y*s0;\n    s0*=A.z;\n    vec3 t;\n    t.x=dot(B,vec3(A.x,-A.y,A.z));\n    t.y=dot(B,vec3(A.y,A.x-s0,-s1));\n    t.z=dot(B,vec3(A.z,s1,length(A)-s0));\n    return t;\n}\nvec3 div3(vec3 A,vec3 B){\n    return mul3(vec3(A.x,-A.y,A.z)/dot(A,A),B);\n}\nvec3 pow3(vec3 A,float p){\n    float r=length(A);float u=2.*acos(clamp(A.y/sqrt(2.*dot(A,A)-2.*A.x*length(A)),-1.,1.));\n    float v=atan(length(A)-A.x,A.z);\n    float s0=sin(v);float s1=cos(v);\n    return pow(r,p)*vec3(1.+s0*s0*(cos(p*u)-1.),s0*sin(u*p),s0*s1*(1.-cos(u*p)));\n}\n\nfloat DBFold(vec3 p, float fo, float g){\n\tif(p.z>p.y) p.yz=p.zy;//Diagonal fold\n\t//Tis is slightly different from the original fold in order to make it continuous in this context\n\tfloat vx=p.x-2.*fo;\n\tfloat vy=p.y-4.*fo;\n \tfloat v=max(abs(vx+fo)-fo,vy);\n\tfloat v1=max(vx-g,p.y);\n\tv=min(v,v1);\n\treturn min(v,p.x);\n}\n//the coordinates are pushed/pulled in parallel\nvec3 DBFoldParallel(vec3 p, vec3 fo, vec3 g){\n\tvec3 p1=p;\n\tp.x=DBFold(p1,fo.x,g.x);\n\tp.y=DBFold(p1.yzx,fo.y,g.y);\n\tp.z=DBFold(p1.zxy,fo.z,g.z);\n\treturn p;\n}\nconst int Iterations=10;\nconst float Scale=1.8;\nconst float absScalem1 = abs(Scale - 1.0);\nconst float AbsScaleRaisedTo1mIters = pow(abs(Scale), float(1-Iterations));\nconst vec3 Julia=vec3(-0.5,1.,-0.6);\nconst vec3 Trans=vec3(-0.,-1.,-0.);\nconst float MinRad2=0.5;\nconst vec4 scale0 = vec4(Scale, Scale, Scale, abs(Scale)) / MinRad2;\n\nfloat DE1(vec3 pos) {\n   orbitTrap=vec4(1);\n   pos.y=sign(pos.y)*(abs(pos.y)+0.1);\n\tvec4 p = vec4(pos,1), p0 = vec4(Julia,1);  // p.w is the distance estimate\n   vec3 n=normalize(p.xyz);\n   vec3 n2=abs(n);\n   float a=max(n2.x,max(n2.y,n2.z));\n   p.xyz= length(p.xyz)*n*pow(a,2.);\n   p.xyz=pow3(p.xyz+vec3(0,0.5,0),1.3);\n\tfor (int i=0; i<Iterations; i++) {\n\n\t\n\t\tp.xyz=abs(p.xyz)+Trans;\n\t\tfloat r2 = dot(p.xyz, p.xyz);\n\t\tvec4 signs=sign(p);\n\t\tfloat r=0.1;\n\n\t\tp=abs(p);;\n\t\tp.xyz=DBFoldParallel(p.xyz,vec3(0.0125,0.1,0.),vec3(0.,0.21,0.));\n\n\t\tp *= clamp(max(MinRad2/r2, MinRad2), 0.0, 1.0);  // dp3,div,max.sat,mul\n\t\tp = p*scale0 + p0;\n      p*=signs;\n      orbitTrap=min(orbitTrap,abs(p));\n\t}\n\treturn ((length(p.xyz) - absScalem1) / p.w - AbsScaleRaisedTo1mIters);\n}\nfloat Lander(vec3 p){\n    p.xz=rotClamp(p.xz,6);\n    return DE1(rot(p+vec3(0,0,-3),vec3(-PI/2.,-PI/2.,0)));\n}\n\n#define USE_SMOOTH_NOISE 1   // enable to prevent discontinuities\n\n\n// value noise, and its analytical derivatives\nvec3 noised( in vec2 x )\n{\n    vec2 f = fract(x);\n    #if USE_SMOOTH_NOISE==0\n    vec2 u = f*f*(3.0-2.0*f);\n    vec2 du = 6.0*f*(1.0-f);\n    #else\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n    #endif\n\n#if 0\n    // texel fetch version\n    ivec2 p = ivec2(floor(x));\n    float a = texelFetch( iChannel2, (p+ivec2(0,0))&255, 0 ).x;\n\tfloat b = texelFetch( iChannel2, (p+ivec2(1,0))&255, 0 ).x;\n\tfloat c = texelFetch( iChannel2, (p+ivec2(0,1))&255, 0 ).x;\n\tfloat d = texelFetch( iChannel2, (p+ivec2(1,1))&255, 0 ).x;\n#else    \n    // texture version    \n    vec2 p = floor(x);\n\tfloat a = textureLod( iChannel2, fract((p+vec2(0.5,0.5))/256.0), 0.0 ).x;\n\tfloat b = textureLod( iChannel2, fract((p+vec2(1.5,0.5))/256.0), 0.0 ).x;\n\tfloat c = textureLod( iChannel2, fract((p+vec2(0.5,1.5))/256.0), 0.0 ).x;\n\tfloat d = textureLod( iChannel2, fract((p+vec2(1.5,1.5))/256.0), 0.0 ).x;\n#endif\n    \n\treturn vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n\t\t\t\tdu*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\nconst mat2 m3 = mat2(0.8,-0.6,0.6,0.8);\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*texture( iChannel2, fract(p/256.0 )).x; p = m3*p*2.02;\n    f += 0.2500*texture( iChannel2, fract(p/256.0 )).x; p = m3*p*2.03;\n    f += 0.1250*texture( iChannel2, fract(p/256.0 )).x; p = m3*p*2.01;\n    f += 0.0625*texture( iChannel2, fract(p/256.0 )).x;\n    return f/0.9375;\n}\n\n#define SC (1.0)\nfloat terrainL( in vec2 x )\n{\n\tvec2  p = x*0.003/SC;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<5; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x/(1.0+2.*dot(d,d));\n\t\tb *= 0.5;\n        p = m3*p*2.0+vec2(1,25);\n    }\n\n    #if USE_SMOOTH_NOISE==1\n    a *= 0.9;\n    #endif\n\treturn SC*120.0*a;\n}\nfloat terrain( in vec2 x )\n{\n\tvec2  p = x;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<8; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x;\n\t\tb *= 0.5;\n        p = m3*p*2.0+vec2(1,25);\n    }\n\n    #if USE_SMOOTH_NOISE==1\n    a *= 0.9;\n    #endif\n\treturn a;\n}\nfloat terrain2( in vec2 x )\n{\n\tvec2  p = x;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<16; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x;\n\t\tb *= 0.5;\n        p = m3*p*2.0+vec2(1,25);\n    }\n\n    #if USE_SMOOTH_NOISE==1\n    a *= 0.9;\n    #endif\n\treturn a;\n}\nconst float SC_0=400.;\nobject DE(vec3 pos,vec3 rd) {\n    object hit0=newObj(Far,Far,-1,-1,0);\n    vec3 pos0=pos;\n    pos.y+=440.;pos.x+=120.;pos.z+=270.;\n    float h=SC_0*terrain(pos.xz/SC_0);\n    h=smin(pos.y-terrainL(pos.zx*100./SC_0)*0.001*SC_0-SC_0,max(pos.y-h,pos.y-SC_0-h*0.2),1.);\n    h+=terrain2(pos.xz*0.1);\n    hit0=near(hit0,vec3(1,h,1));\n    pos=rot(pos0+vec3(30,1.6,15),vec3(0,-0.5,0));\n    pos=rot(pos,vec3(-0.15,0,0.1));\n    float d=0.;\n    if(sdSphere(pos,5.5)>0.){\n        d=sdSphere(pos,5.);\n    }else{\n        d=Lander(pos);\n    }\n    hit0=near(hit0,vec3(2,d,1));\n    return hit0;\n}\nmaterial newMaterial(vec3 Cs,vec3 Cd,vec2 S,vec4 R,vec3 light){\n    material a;a.Cs=Cs;a.Cd=Cd;a.S=S;a.R=R;a.light=light;return a;\n}\nmaterial Material(vec3 pos,vec3 nor,object o){\n    if(o.id==1){\n        vec3 c=vec3(0.8,0.15,0.05);\n        c=mix(c,vec3(0.8,0.6,0.05),clamp(fbm(pos.xz/SC_0)-0.5,0.,1.)*2.);\n        return newMaterial(vec3(1e-5),c,vec2(0,0),vec4(0,1,2,1),vec3(0));\n    }\n    if(o.id==2) return newMaterial(vec3(0.2),getColor(),vec2(1,0),vec4(0,clamp(orbitTrap.y,0.,1.)*0.5,2,2),vec3(0));\n    return newMaterial(vec3(1),vec3(1),vec2(1,0),vec4(0,1,2,2),vec3(0));\n}\n\nvec4 InsideMaterial(vec3 pos,object o){\n    if(o.i_id==1) return vec4(1.331,0,0,0);\n    if(o.i_id==2) return vec4(1.301,Type_Smoke,0,0);\n\n    return vec4(1,vec3(0));\n}\nvec4 InsideFog(vec3 pos,object o){\n    return vec4(0);\n}\n\n\nvec4 getObjectLight(vec3 ro,vec3 rd,vec3 n){\n#ifdef EnableObjectLight\n    vec4 color=vec4(0);\n    int id=int(clamp(floor(rand3(ro+iFrame)*ids.length()),0,ids.length()));\n    color+=ObjectLight(ro,rd,n,centers[id].xyz,centers[id].w,ids[id]);\n    color.w*=ids.length();\n    return max(color,0.);\n#else\n    return vec4(0);\n#endif\n}\n\n\nvec4 background(in vec3 pos, in vec3 n,in vec3 lightDir ) {\n\n\n    float M = 1.0; //canvas.innerWidth/M //canvas.innerHeight/M --res\n\n    vec3 color = vec3(0.);\n    \n    float t = max(0.001, n.y);\n\n      // optical depth -> zenithAngle\n    float divt=1./t;\n    float sR = RayleighAtt * divt ;\n    float sM = MieAtt * divt ;\n\n  \t float cosine = clamp(dot(n,lightDir),0.0,1.0);\n    vec3 extinction = exp(-(_betaR * sR + _betaM * sM));\n\n       // scattering phase\n    float g2 = g * g;\n    float fcos2 = cosine * cosine;\n    float miePhase = Mie * pow(1. + g2 + 2. * g * cosine, -1.5) * (1. - g2) / (2. + g2);\n        //g = 0;\n    float rayleighPhase = Rayleigh;\n\n    vec3 inScatter = (1. + fcos2) * vec3(rayleighPhase + _betaM / _betaR * miePhase);\n\n    color = inScatter*(1.0-extinction); // *vec3(1.6,1.4,1.0)\n\n        // sun\n    color += 0.47*vec3(1.6,1.4,1.0)*pow( cosine, 350.0 ) * extinction;\n      // sun haze\n    color += 0.4*vec3(0.8,0.9,1.0)*pow( cosine, 2.0 )* extinction;\n\n\t return vec4(clamp(color,0.,50.),1);\n}\nfloat rand_i=0.;\nfloat rand(vec3 p3)\n{\n    rand_i += 0.4;\n    p3 += rand_i+float(iFrame_);\n    p3  = fract(p3 * .1031);\n    //p3 = fract(tan(dot(p3,p3)*20*atan(p3))) ;\n\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat rand(vec2 p)\n{\n    rand_i += 0.4;\n    p += rand_i+float(iFrame_);\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 = fract(tan(dot(p3,p3)*20.*atan(p3))) ;\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 rndS(vec3 pos){\n    return normalize(tan(vec3(rand(pos)-0.5,rand(pos)-0.5,rand(pos)-0.5)))*rand(pos);\n}\nvec3 estimateNormal(vec3 pos) {\n    float EPSILON=EPSILONS*distance(pos,pos_0);\n    vec2 e = vec2(1.0,-1.0)*0.5773*EPSILON;\n    vec3 rd=vec3(1,0,0);\n    return normalize( e.xyy*DE( pos + e.xyy ,rd).d2 + \n\t\t\t\t\t  e.yyx*DE( pos + e.yyx ,rd).d2 + \n\t\t\t\t\t  e.yxy*DE( pos + e.yxy ,rd).d2 + \n\t\t\t\t\t  e.xxx*DE( pos + e.xxx ,rd).d2 );\n}\n\n\nvec3 raycast(vec3 ro,vec3 rd,out float distance_,float alpha,out bool ifSmoke){\n    float lastd0=0.;\n    bool hit00=false;\n    vec3 ro0=ro;\n    vec3 rd0=rd;\n    bool a=false;\n    ifSmoke=false;\n    float t=0.;\n    float Marching_S_2=1.;\n    int sgn =DE(ro,rd).s;\n    for(int i=0;i<MaxRayStep;i++){\n        object o=DE(ro,rd);\n        if(o.s!=sgn){\n            ro=ro0;rd=rd0;\n            Marching_S_2*=0.75;\n            continue;\n        }\n        ro0=ro;rd0=rd;\n        float d0=o.d;\n        float EPSILON=max(EPSILONS*distance(ro,pos_0),EPSILONS_MIN);\n        if(d0<=EPSILON&&d0<lastd0||Marching_S_2<=EPSILONS_MIN){hit00=true; break;}\n        if(a&&int(InsideMaterial(ro,o).y)==Type_Smoke){\n            ifSmoke=true;hit00=true;\n            break;\n        }\n        a=true;\n        if(distance(ro,Position_00)>Far) break;\n        float d_d=d0*Marching_S*Marching_S_2;\n        rd=mix(rndS(ro),rd,float(rand(ro)<exp(-d_d*alpha)));\n        lastd0=d0;ro+=d_d*rd;t+=d_d;\n\n    }\n    distance_=mix2(-1.,t,float(hit00));\n    return ro;\n}\nfloat GGX_G(float VoN,float a,float g){\n    float A=float(VoN>0.)*g*VoN;\n    float B=(g-1.)*VoN+sqrt(a*a+(1.-a*a)*VoN*VoN);\n    return A/B;\n}\nvec3 GGXNormal(vec3 normal,float roughness,float g,vec2 X,vec2 Y,vec3 pos){\n    vec3 randN0;randN0.y=-length(normal.xz);\n    if(length(normal.xz)<=0.)\n        randN0.xz=vec2(1,0);\n    else\n        randN0.xz=normalize(normal.xz)*normal.y;\n    vec3 randN1=cross(normal,randN0);\n    float alpha=mix2(X.x,X.y,rand(pos))*2.*PI;\n    float tmp=mix2(Y.x,Y.y,rand(pos));\n    float beta=acos(clamp(pow(max(0.,(1.-tmp)/(1.+tmp*(roughness*roughness-1.))),1./g),0.,1.));\n        \n    return (cos(beta))*normal+sin(beta)*(cos(alpha)*randN0+sin(alpha)*randN1);\n}\nvec3 GGXNormal(vec3 normal,float roughness,float g,vec3 pos){\n    vec3 randN0;randN0.y=-length(normal.xz);\n    if(length(normal.xz)<=0.)\n        randN0.xz=vec2(1,0);\n    else\n        randN0.xz=normalize(normal.xz)*normal.y;\n    vec3 randN1=cross(normal,randN0);\n    float alpha=rand(pos)*2.*PI;\n    float tmp=rand(pos);\n    float beta=acos(clamp(pow(max(0.,(1.-tmp)/(1.+tmp*(roughness*roughness-1.))),1./g),0.,1.));\n        \n    return (cos(beta))*normal+sin(beta)*(cos(alpha)*randN0+sin(alpha)*randN1);\n}\nfloat GGXdf(float theta,float a,float g){\n    float a2=a*a;\n    float cos2=cos(theta);cos2=pow(cos2,g);\n    float a2m1=a2-1.;\n    return (1.-cos2)/(1.+a2m1*cos2);\n}\n\n\n\nvec4 ObjectLight(vec3 ro,vec3 rd,vec3 n,vec3 center,float sR,int id){\n    object thit=hit;\n    float d=distance(ro,center);\n    float CosAlpha;\n    vec3 tnor;\n    float tmp=rand(ro);\n    float cosD_S;\n\n    if(d<=sR){\n        CosAlpha=-1.;\n        tnor=reflect(rd,n);\n    }else{\n        float RDivd=sR/d;\n        CosAlpha=1./sqrt(1.+RDivd*RDivd);\n        tnor=normalize(center-ro);\n    }\n    cosD_S=sqrt(0.5*(1.+CosAlpha));\n    float D_S=abs(acos(cosD_S));\n    \n    float EPSILON=max(EPSILONS*distance(ro,pos_0),EPSILONS_MIN);\n    object oA=DE(ro,rd);\n    object oB=DE(ro-n*EPSILON*2.,rd);\n    vec4 MaterialA=InsideMaterial(ro,oA);vec4 MaterialB=InsideMaterial(ro-n*EPSILON*2.,oB);\n    float rs=MaterialB.x/MaterialA.x;\n    material mt=Material(ro,n,oA);\n    float S=0.;\n    vec3 randN=GGXNormal(n,mt.R.x,mt.R.z,ro);\n    float k=fresnel(-n,randN,rs);\n    vec4 rC=rColor(mt.Cs,max(dot(-rd,randN),0.));\n    float p=mixp(rC.w,mt.S.x);\n\n    vec3 A,rnd;\n    if(rand(ro)<p||rand(ro)>mt.S.y*(1.-k)){\n        A=normalize(tnor-rd);\n    }else{\n        vec3 n0=refract(rd,n,1./rs);\n        if(n0!=vec3(0)){\n            ro-=n*EPSILON*2.;\n            A=normalize(tnor+rd*rs);\n            if(length(A)<0.5) A=vec3(0,1,0);\n        }else{\n            A=-normalize(tnor+rd);\n        }\n    }\n    float Ny=abs(dot(n,A));\n    float Nbeta=abs(acos(Ny));\n    vec3 N0;N0.y=-length(n.xz);\n    N0.xz=(float(length(n.xz)==0.)*vec2(1,0)+normalize(n.xz))*n.y;\n    vec3 N1=cross(n,N0);\n    float Nalpha=atan(dot(A,N1),dot(A,N0));\n\n    const float PIdiv2=PI/2.;\n    const float divPI=1./PI;\n    float Ny2=Ny*Ny;\n    float deta=cosD_S*cosD_S-Ny2;\n    vec2 X,Y;\n    \n    vec2 R=mix(mt.R.yw,mt.R.xz,float(rand(ro)<p));\n    \n    if(deta<0.){\n        float a1=abs(acos(cosD_S/Ny));\n        float S0=0.5*GGXdf(a1,R.x,R.y);\n        float S1=0.5*GGXdf(Nbeta+D_S,R.x,R.y);S=(S0+S1);\n        if(rand(ro)<S0/(S0+S1)){\n            X=vec2(0,a1);Y=-Nalpha+vec2(-PIdiv2,PIdiv2);\n        }else{\n            X=vec2(0,Nbeta+D_S);Y=Nalpha+vec2(-PIdiv2,PIdiv2);\n        }\n    }else{\n        float cosF=sqrt(deta/(1.-Ny2));\n        float F=acos(cosF);\n        S=F*divPI*(GGXdf(min(Nbeta+D_S,PIdiv2),R.x,R.y)-GGXdf(Nbeta-D_S,R.x,R.y));\n        X=vec2(Nbeta-D_S,min(Nbeta+D_S,PIdiv2));Y=(Nalpha+vec2(-F,F));\n    }\n    X.x=GGXdf(X.x,R.x,R.y);X.y=GGXdf(X.y,R.x,R.y);Y=Y*divPI*0.5;\n    vec3 n0;\n    if(CosAlpha==-1.){\n        n0=GGXNormal(n,R.x,R.y,ro);S=1.;\n    }else{\n        n0=GGXNormal(n,R.x,R.y,Y,X,ro);\n    }\n    \n    if(length(n0)<0.5) n0=n;\n    rnd=reflect(rd,n0);\n    \n    S=abs(S);\n\n    float t;\n    vec4 fog=InsideFog(ro,oA);\n    bool ifSmoke;\n    vec3 tp=raycast(ro+rnd*ShadowOffset,rnd,t,fog.x,ifSmoke);\n    if(t<-0.5){\n        hit=thit;\n        return vec4(0);\n    }\n    oA=DE(tp,rd);\n    vec3 pos=tp;\n    vec3 normal=estimateNormal(pos);\n    mt=Material(pos,normal,oA);\n    hit=thit;\n    \n    vec3 sampleColor=100.*mt.light;\n    rC=rColor(mt.Cs,max(dot(-rd,n0),0.));\n    sampleColor*=mt.Cd*(1.-mt.S.x*rC.rgb)+mt.S.x*rC.rgb;\n    sampleColor*=GGX_G(dot(rnd,n),R.x,R.y);\n    return vec4(sampleColor*clamp(dot(faceforward(n,rd,n),rnd),0.,1.),S);\n\n}\n\nvec4 SunLight(vec3 ro,vec3 rd,vec3 n){\n    const float S_R=0.125;\n    float cosD_S=1./sqrt(1.+S_R*S_R);cosD_S=sqrt(0.5*(1.+cosD_S));\n    float D_S=abs(acos(cosD_S));\n\n    float EPSILON=max(EPSILONS*distance(ro,pos_0),EPSILONS_MIN);\n    object oA=DE(ro,rd);\n    object oB=DE(ro-n*EPSILON*2.,rd);\n    vec4 MaterialA=InsideMaterial(ro,oA);vec4 MaterialB=InsideMaterial(ro-n*EPSILON*2.,oB);\n    float rs=MaterialB.x/MaterialA.x;\n    material mt=Material(ro,n,oA);\n\n    float S=0.;    \n    vec3 randN=GGXNormal(n,mt.R.x,mt.R.z,ro);\n    float k=fresnel(-n,randN,rs);\n    vec4 rC=rColor(mt.Cs,max(dot(-rd,randN),0.));\n    float p=mixp(rC.w,mt.S.x);\n\n    vec3 A,rnd;\n    if(rand(ro)<p||rand(ro)>mt.S.y*(1.-k)){\n        A=-normalize(lightDir+rd);\n    }else{\n        vec3 n0=refract(rd,n,1./rs);\n        if(n0!=vec3(0)){\n            ro-=n*EPSILON*2.;\n            A=normalize(lightDir+rd*rs);\n            if(length(A)<0.5) A=vec3(0,1,0);\n        }else{\n            A=-normalize(lightDir+rd);\n        }\n    }\n    float Ny=abs(dot(n,A));\n    float Nbeta=abs(acos(Ny));\n    vec3 N0;N0.y=-length(n.xz);\n    N0.xz=(float(length(n.xz)==0.)*vec2(1,0)+normalize(n.xz))*n.y;\n    vec3 N1=cross(n,N0);\n    float Nalpha=atan(dot(A,N1),dot(A,N0));\n\n\n    const float PIdiv2=PI/2.;\n    const float divPI=1./PI;\n    float Ny2=Ny*Ny;\n    float deta=cosD_S*cosD_S-Ny2;\n    vec2 X,Y;\n    \n    vec2 R=mix(mt.R.yw,mt.R.xz,float(rand(ro)<p));\n    \n    if(deta<0.){\n        float a1=abs(acos(cosD_S/Ny));\n        float S0=0.5*GGXdf(a1,R.x,R.y);\n        float S1=0.5*GGXdf(Nbeta+D_S,R.x,R.y);S=(S0+S1);\n        if(rand(ro)<S0/(S0+S1)){\n            X=vec2(0,a1);Y=-Nalpha+vec2(-PIdiv2,PIdiv2);\n        }else{\n            X=vec2(0,Nbeta+D_S);Y=Nalpha+vec2(-PIdiv2,PIdiv2);\n        }\n    }else{\n        float cosF=sqrt(deta/(1.-Ny2));\n        float F=acos(cosF);\n        S=F*divPI*(GGXdf(min(Nbeta+D_S,PIdiv2),R.x,R.y)-GGXdf(Nbeta-D_S,R.x,R.y));\n        X=vec2(Nbeta-D_S,min(Nbeta+D_S,PIdiv2));Y=(Nalpha+vec2(-F,F));\n    }\n    X.x=GGXdf(X.x,R.x,R.y);X.y=GGXdf(X.y,R.x,R.y);Y=Y*divPI*0.5;\n    vec3 n0=GGXNormal(n,R.x,R.y,Y,X,ro);\n    if(length(n0)<0.5) n0=n;\n    rnd=reflect(-rd,n0);\n    if(dot(rnd,lightDir)<0.) return vec4(0);\n    float t;\n\n    vec4 fog=InsideFog(ro,oA);\n    bool ifSmoke;\n    vec3 tp=raycast(ro-rnd*ShadowOffset,-rnd,t,fog.x,ifSmoke);\n    if(t>-0.5) return vec4(0);\n    vec4 tmp=background(ro,-rnd,-lightDir);\n\n    S=abs(S);\n    vec3 sampleColor=tmp.xyz*150.;\n    rC=rColor(mt.Cs,max(dot(-rd,n0),0.));\n    sampleColor*=mt.Cd*(1.-mt.S.x*rC.rgb)+mt.S.x*rC.rgb;\n    \n    sampleColor*=GGX_G(dot(-rnd,n),R.x,R.y);\n    \n    return max(vec4(0),vec4(sampleColor,S)*(dot(rnd,lightDir)-0.997>0.?1.:0.));\n}\n\nvec2 Projection(vec2 p,float S){\n    #ifdef SphereProjection\n        if(length(p)==0) return p;\n        return normalize(p)*tan(length(p)*S);\n    #else\n        return p*S;\n    #endif\n}\nvec3 frag_0;\nvoid Store(vec4 c){\n    frag_0=c.xyz;\n}\nvec2 uv00;\nvec4 Load(){\n    return texture(iChannel0,uv00);\n}\n\nvoid F(float x,float y,vec3 Eye_Direction,vec3 Position){\n    if(abs(y)>9.0/16.) {Store(Load());return;}\n    iFrame_=floor(float(iFrame)/cut);\n    float divCut=1.0/cut;\n    float iFrame_offset=mod(float(iFrame),cut)*divCut;\n    if(0.5*y+0.5<iFrame_offset||0.5*y+0.5>=iFrame_offset+divCut||float(iFrame_)>AA*AA) {Store(Load());return;}\n    float x0=mod(float(iFrame_),AA)/AA;\n    float y0=floor(float(iFrame_)/AA)/AA;\n    float iW=iResolution.x;\n    x+=1.0/iW*x0;\n    y+=1.0/iW*y0;\n    \n    vec3 n=normalize((rot(vec3(Projection(vec2(x,y),FOV),1),Eye_Direction)).xyz);\n    vec3 n_m=normalize((rot(vec3(Projection(DOF_Pos,FOV),1),Eye_Direction)).xyz);\n\n    vec3 pos=Position;\n    float DOF=0.1;\n    bool ifSmoke;\n    if(DOF_R>0.) raycast(pos,n_m,DOF,0.,ifSmoke);\n    if(DOF<-0.5) DOF=Far;\n    vec3 Q=pos+n*DOF;\n    vec3 X;X.y=-length(n.xz);\n    vec3 Y;Y.xz=(float(length(n.xz)==0.)*vec2(1,0)+normalize(n.xz))*n.y;\n    Y=cross(n,X);float tmp_1=rand(pos+vec3(x,iFrame,y))*2.*PI;\n    float tmp_2=rand(pos+vec3(x,iFrame,y+5.));\n    n=normalize(n+tmp_2*DOF_R/DOF*(X*sin(tmp_1)+Y*cos(tmp_1)));\n    pos=Q-DOF*n;\n    \n    vec3 pos00=pos;\n    pos_0=pos00;\n    vec3 tcolor=vec3(0);\n    for(int i=0;i<=MaxReflect;i++) {fog0[i]=vec3(1);}\n\n    int reflectstep=0;\n    bool hit0=false;\n    float depth=Far;\n    vec3 back=background(pos,n,-lightDir).xyz;\n\n    object oA0=DE(pos,n);\n    vec3 fogS_=InsideFog(pos,oA0).yzw;\n\n    vec3 n_0=n;\n    vec4 fog=InsideFog(pos,oA0);\n\n    for(reflectstep=0;reflectstep<MaxReflect;reflectstep++){\n        float t=0.;\n        bool ifSmoke;\n        vec3 nextpos=raycast(pos,n,t,fog.x,ifSmoke);\n        if(t<-0.5) break;\n        pos=nextpos;\n        float EPSILON=max(EPSILONS*distance(pos,pos_0),EPSILONS_MIN);\n        object oA=DE(pos,n);\n        vec3 normal=ifSmoke?rndS(pos):estimateNormal(pos);\n        \n        normal=faceforward(normal,normal,n);\n        n0s[reflectstep]=normal;\n        object oB=DE(pos-normal*EPSILON*2.,n);\n        vec4 MaterialA=InsideMaterial(pos,oA);\n        vec4 MaterialB=InsideMaterial(pos-normal*EPSILON*2.,oB);\n        vec4 FogA=InsideFog(pos,oA);\n        vec4 FogB=InsideFog(pos-normal*EPSILON*2.,oB);\n        float rs=MaterialB.x/MaterialA.x;\n        material material=Material(pos,normal,oA);\n\n\n        fog0[reflectstep]=exp(-t*fogS_);\n        LightColors[reflectstep]=material.light;\n \n        rd0s[reflectstep]=n;\n        ro0s[reflectstep]=pos;\n        \n        vec3 I=vec3(1);int i=0;\n        vec2 R;\n        do{i++;bool refract_;\n            vec3 randN=GGXNormal(normal,material.R.x,material.R.z,pos);\n            float F=fresnel(-n,randN,rs);\n            \n            vec4 rC=rColor(material.Cs,max(dot(-n,randN),0.));\n            roughness0[reflectstep]=material.R.x;\n            \n            float p=mixp(rC.w,material.S.x);\n            bool b0=rand(pos)<p;\n            R=mix(material.R.yw,material.R.xz,float(b0));\n            if(b0){\n                I*=rC.rgb*(1.+(material.S.x-1.)*rC.w)/max(rC.w,1e-5);\n                refract_=false;\n            }else{\n                I*=material.Cd*(1.+(material.S.x-1.)*rC.w)/max(1.-rC.w,1e-5)*(1.-material.S.x*rC.rgb);\n                randN=GGXNormal(normal,material.R.y,material.R.w,pos);\n                refract_=rand(pos)<material.S.y*(1.-F);\n                roughness0[reflectstep]=material.R.y;\n            \n            }\n            vec3 v0=mix(reflect(n,randN),refract(n,randN,1./rs),float(refract_));\n            bool a; fogS_=FogA.yzw;\n            if(refract_){\n                if(v0==vec3(0)){\n                    v0=reflect(n,randN);a=dot(normal,v0)>0.;\n                }else{\n                    pos-=2.*EPSILON*normal;a=dot(normal,v0)<0.;\n                    fogS_=FogB.yzw;\n                }\n            }else{a=dot(normal,v0)>0.;}\n            n=v0;if(a) break;\n        }while(i<16);\n        \n        I*=GGX_G(abs(dot(n,normal)),R.x,R.y);\n\n        colors[reflectstep].xyz=I;\n\n        if(!hit0) {depth=distance(pos,pos00);}\n        hit0=true;\n        oA=DE(pos,n);\n        fog=FogA;\n\n        if(distance(pos,pos00)>Far) break;\n    }\n    fog0[reflectstep]=exp(-1e10*fogS_);\n    enablewater=false;\n\n    tcolor=background(pos,n,-lightDir).xyz;\n    if(!hit0) tcolor*=fog0[reflectstep];\n\n    float A=0.;\n    //sample Sun\n    for(int i=reflectstep-1;i>=0;i--) {\n        A+=roughness0[i]*roughness0[i];\n        directLight0[i]=vec3(0);\n    }\n    if(A>0.){\n        int j=-1;float p_0=0.;\n        for(int i=reflectstep-1;i>=0;i--){\n            float p=roughness0[i]*roughness0[i]/A;\n            if(rand(pos)<p){\n                j=i;p_0=p;\n                break;\n            }\n            A-=roughness0[i]*roughness0[i];\n        }\n        if(j>=0){\n            enablewater=false;\n            vec4 sunL=SunLight(ro0s[j],rd0s[j],n0s[j]);\n            directLight0[j]+=sunL.xyz*sunL.w/p_0;\n        }\n    }\n    //sample object\n    A=0.;\n    for(int i=reflectstep-1;i>=0;i--) {\n        A+=roughness0[i]*roughness0[i];\n    }\n    if(A>0.){\n        int j=-1;float p_0=0.;\n        for(int i=reflectstep-1;i>=0;i--){\n            float p=roughness0[i]*roughness0[i]/A;\n            if(rand(pos)<p){\n                j=i;p_0=p;\n                break;\n            }\n            A-=roughness0[i]*roughness0[i];\n        }\n        if(j>=0){\n            enablewater=false;\n            vec4 objL=getObjectLight(ro0s[j],rd0s[j],n0s[j]);\n            directLight0[j]+=objL.xyz*objL.w/p_0;\n        }\n    }\n    \n    for(int i=reflectstep-1;i>=0;i--){\n        tcolor=fog0[i+1]*tcolor*colors[i]+directLight0[i]+LightColors[i];\n    }\n    tcolor*=fog0[0];\n    tcolor=mix(tcolor,back,(1.-exp(min(0.,FogS*(FogStart-depth))))*float(hit0));\n\n    tcolor=!hit0?back:tcolor;\n    tcolor=clamp(tcolor,0.,4.);\n    \n    if(iFrame_<=0.){\n        Store(vec4(tcolor,0.));\n    }else{\n        vec4 temp0=Load();\n        Store((temp0*float(iFrame_)+vec4(tcolor,0))/(float(iFrame_)+1.));\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv00=uv;\n    vec3 m=vec3(0,-4.4,0);\n    vec3 p=vec3(0,1,0);\n    F(2.*uv.x-1.,(2.*uv.y-1.)/iResolution.x*iResolution.y,m,p);\n\n    fragColor = vec4(frag_0,1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}