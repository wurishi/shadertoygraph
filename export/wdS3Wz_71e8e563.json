{"ver":"0.1","info":{"id":"wdS3Wz","date":"1548591767","viewed":90,"name":"Excitable Super O Balll","username":"isak","description":"Excitable media and trafo.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["organic","buffered","excitable"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 f_color, in vec2 f_coord )\n{\n    \n    vec2 uv = 2.0*(f_coord - 0.5*i_resolution)/i_resolution.y;\n    \n    \n    uv *= (0.2 + 0.1*sin(i_time))/(0.5 - dot(uv,uv));\n    \n    vec2 fuv = 0.5*(i_resolution.y*uv + i_resolution)/i_resolution.xy;\n    \n\tvec4 state = texture(iChannel0, fuv);\n    \n    f_color = vec4(0.0);\n    f_color.r = state.x;\n    f_color.g = state.x*(1.0 - state.y/ALIVE_TIME);\n    f_color.b = (1.0 - state.x)*(1.0 - state.y/DEAD_TIME);\n    \n    //f_color += 0.5*clamp(vec4(0.7, 0.7, 0.7, 0.0)*1.0/(0.5 + (length(f_color))), vec4(0.0), vec4(1.0));\n    \n    f_color *= step(length(uv), 1.0);\n    \n    //f_color = vec4(time_alive/ALIVE_TIME, time_dead/DEAD_TIME, 0.0, 0.0);\n    //f_color = vec4(1.0)*fwidth(texture(iChannel0, f_coord/i_resolution));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* \n   state\n\t\t\n      x : alive or dead (alive if x > 0.5)\n\t  y : number of frames spent in current state (live | dead)\n      \n*/\n\n\n\n\nvoid mainImage( out vec4 f_color, in vec2 f_coord )\n{\n    float decay = 0.5;\n    \n    vec4 prev_state = texture(iChannel0, f_coord/i_resolution);\n    vec4 next_state = prev_state;\n    \n    // neighboring cells\n    //----------------------------------------------------------------------------------------\n    mat4 neighbors_UDLR = mat4(\n        texture(iChannel0, (f_coord + vec2(1.0, 0.0))/i_resolution),\n        texture(iChannel0, (f_coord - vec2(1.0, 0.0))/i_resolution),\n        texture(iChannel0, (f_coord + vec2(0.0, 1.0))/i_resolution),\n        texture(iChannel0, (f_coord - vec2(0.0, 1.0))/i_resolution)\n    );\n    mat4 neighbors_DIAG = mat4(\n        texture(iChannel0, (f_coord + vec2(1.0, 1.0))/i_resolution),\n        texture(iChannel0, (f_coord - vec2(1.0, 1.0))/i_resolution),\n        texture(iChannel0, (f_coord + vec2(1.0, -1.0))/i_resolution),\n        texture(iChannel0, (f_coord - vec2(1.0, -1.0))/i_resolution)\n    );\n    \n    // convenience\n    //----------------------------------------------------------------------------------------\n    \n    float NMOD = 3.0;\n    vec2 mod_coord = (1.0/NMOD)*(fract(NMOD*f_coord/iResolution.y))*iResolution.y;\n    \n    // If mouse is outside the lower left box, we override\n    vec2 pos = i_mousepos;\n    if (any(greaterThan(i_mousepos, iResolution.y*vec2(1.0)/NMOD))) {\n        pos = vec2(0.375, 0.5)*iResolution.xy/NMOD;\n    }\n    pos = vec2(0.375, 0.5)*iResolution.xy/NMOD;\n    pos += 30.0*vec2(sin(8.0*i_time), cos(8.0*i_time));\n\n    bool clicked = length(pos - mod_coord) < 2.0;\n          \n    \n    \n    float active_neighbors = neighbors_UDLR[0].x\n                           + neighbors_UDLR[1].x\n        \t\t\t\t   + neighbors_UDLR[2].x\n        \t\t\t\t   + neighbors_UDLR[3].x\n                           + neighbors_DIAG[0].x\n        \t\t\t\t   + neighbors_DIAG[1].x\n        \t\t\t\t   + neighbors_DIAG[2].x\n        \t\t\t\t   + neighbors_DIAG[3].x;\n    \n    float time_dead_neighbors = neighbors_UDLR[0].y*(1.0 - neighbors_UDLR[0].x)\n                              + neighbors_UDLR[1].y*(1.0 - neighbors_UDLR[1].x)\n        \t\t\t\t      + neighbors_UDLR[2].y*(1.0 - neighbors_UDLR[2].x)\n        \t\t\t\t      + neighbors_UDLR[3].y*(1.0 - neighbors_UDLR[3].x)\n                              + neighbors_DIAG[0].y*(1.0 - neighbors_DIAG[0].x)\n        \t\t\t\t      + neighbors_DIAG[1].y*(1.0 - neighbors_DIAG[1].x)\n        \t\t\t\t      + neighbors_DIAG[2].y*(1.0 - neighbors_DIAG[2].x)\n        \t\t\t\t      + neighbors_DIAG[3].y*(1.0 - neighbors_DIAG[3].x);\n    \n    \n                    \n    float time_alive = prev_state.x > 0.5 ? prev_state.y : 0.0;\n    float time_dead  = prev_state.x <= 0.5 ? prev_state.y : 0.0;\n    \n    // initial state\n    //----------------------------------------------------------------------------------------    \n    if (i_frame <= 1 ) {\n        next_state.x = 0.0;\n        next_state.y = 1000.0;\n        f_color = next_state;\n        return;\n    }\n    \n    \n    \n    // deduce next_state\n    //----------------------------------------------------------------------------------------\n    if ( i_frame % 1 == 0 ) {\n    if ( clicked ) {\n    \tnext_state.x = 1.0;\n        next_state.y = 0.0;\n    }\n    // kill if too old\n    else if ( time_alive > ALIVE_TIME ) {\n        next_state.x = 0.0;\n    \tnext_state.y = 0.0;\n    }\n    // potentially reactivate if dead for a long time, conditioned on active neighbors\n        else if ( active_neighbors >= 1.0 && time_dead > DEAD_TIME ) { // && time_dead_neighbors > 4.00*DEAD_TIME) { \n     \tnext_state.x = 1.0*hash12(f_coord + vec2(fract(i_time))) > 0.5 ? 1.0 : 0.0;\n        next_state.y = 0.0;\n    }\n    // nothing happened\n    else { \n        next_state.x = prev_state.x;\n        next_state.y = min(prev_state.y + 1.0*hash12(f_coord + vec2(fract(i_time))), DEAD_TIME+1.0);\n    }\n    } else {next_state.x = prev_state.x; }\n\n    // commit the next_state\n    //----------------------------------------------------------------------------------------\n    f_color = next_state;\n\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define ALIVE_TIME 3.0\n#define DEAD_TIME 100.0\n\n\n#define i_resolution iResolution.xy\n#define i_time iTime\n#define i_frame iFrame\n#define i_mousepos iMouse.xy\n#define pi 3.141592653589793\n\n\n// the following is taken from https://www.shadertoy.com/view/4djSRW\n//----------------------------------------------------------------------------------------\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(.1031, .1030, .0973, .1099)\n\n\n//  1 out, 2 in...\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//----------------------------------------------------------------------------------------","name":"Common","description":"","type":"common"}]}