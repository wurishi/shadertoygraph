{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Creates a diagonal red-and-white striped pattern.\nvec3 barberpole(vec2 pos, vec2 rocketpos){\n\tfloat d = (pos.x-rocketpos.x)+(pos.y-rocketpos.y);\n\tvec3 col=vec3(1.0);\t\n\n\td = mod(d*20.,2.0);\n\tif(d>1.0){\n\t\tcol=vec3(1.0,0.0,0.0);\n\t}\n\n\n\treturn col;\t\n}\n\n\nvec3 rocket(vec2 pos, vec2 rocketpos){\n\tvec3 col = vec3(0.0);\n\tfloat f = 0.;\n\tfloat absx= abs(rocketpos.x - pos.x);\n\tfloat absy = abs(rocketpos.y-pos.y);\n\t//wooden stick\n\tif(absx<0.01&&absy<0.22){\n\t\tcol=vec3(1.0,0.5,0.5);\t\n\t}\n\t\n\t//Barberpole\n\t\n\tif(absx<0.05&&absy<0.15){\n\t\tcol=barberpole(pos, rocketpos);\t\n\t}\n\t//Rocket Point\n\tfloat pointw=(rocketpos.y-pos.y-0.25)*-0.7;\n\tif((rocketpos.y-pos.y)>0.1){\n\t\tf=smoothstep(pointw-0.001,pointw+0.001,absx);\n\t\t\n\t\tcol=mix(vec3(1.0,0.0,0.0),col, f);\t\n\t}\n\t//Shadow\n\t\n\tf =-.5 + smoothstep(-0.05, 0.05, (rocketpos.x-pos.x));\n\tcol*= 0.7+f;\n\t\n\treturn col;\n}\n\n\n\nfloat rand(float val, float seed){\n\treturn cos(val*sin(val*seed)*seed);\t\n}\n\nfloat distance2( in vec2 a, in vec2 b ) { return dot(a-b,a-b); }\n\nmat2 rr = mat2( cos(1.0), -sin(1.0), sin(1.0), cos(1.0) );\n\nvec3 drawParticles(vec2 pos, vec3 particolor, float time, vec2 cpos, float gravity, float seed, float timelength){\n    vec3 col= vec3(0.0);\n    vec2 pp = vec2(1.0,0.0);\n    for(float i=1.0;i<=128.0;i++){\n        float d=rand(i, seed);\n        float fade=(i/128.0)*time;\n        vec2 particpos = cpos + time*pp*d;\n        pp = rr*pp;\n        col = mix(particolor/fade, col, smoothstep(0.0, 0.0001, distance2(particpos, pos)));\n    }\n    col*=smoothstep(0.0,1.0,(timelength-time)/timelength);\n\t\n    return col;\n}\nvec3 drawFireworks(float time, vec2 uv, vec3 particolor, float seed){\n\t\n\tfloat timeoffset = 2.0;\n\tvec3 col=vec3(0.0);\n\tif(time<=0.){\n\t\treturn col;\t\n\t}\n\tif(mod(time, 6.0)>timeoffset){\n\tcol= drawParticles(uv, particolor, mod(time, 6.0)-timeoffset, vec2(rand(ceil(time/6.0),seed),-0.5), 0.5, ceil(time/6.0), seed);\n\t}else{\n\t\t\n\t\tcol= rocket(uv*3., vec2(3.*rand(ceil(time/6.0),seed),3.*(-0.5+(timeoffset-mod(time, 6.0)))));\t\n\t}\n\treturn col;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv =1.0 -  2.0* fragCoord.xy / iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n\tvec3 col=vec3(0.1,0.1,0.2);\n\tcol += 0.1*uv.y;\n\t\n\t\n\tcol += drawFireworks(iTime    , uv,vec3(1.0,0.1,0.1), 1.);\n\tcol += drawFireworks(iTime-2.0, uv,vec3(0.0,1.0,0.5), 2.);\n\tcol += drawFireworks(iTime-4.0, uv,vec3(1.0,1.0,0.1), 3.);\n\t\n\t\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dBGRw","date":"1384809808","viewed":3604,"name":"Fireworks v2","username":"Qqwy","description":"A fireworks effect using a procedural particle system.\nThis can probably be improved in a lot of ways, both codewise and speedwise. Any tips would be welcome, as I'm new to shader-programming.","likes":39,"published":1,"flags":0,"usePreview":0,"tags":["procedural","particles","deterministic","fireworks"],"hasliked":0,"parentid":"","parentname":""}}