{"ver":"0.1","info":{"id":"lclXz8","date":"1705069299","viewed":58,"name":"PokerTable","username":"maitani","description":"PokerTable","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["poker"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sstep(float x) {\n    return smoothstep(0.99, 1.01, x);\n}\n\nfloat circle(vec2 p, float r) {\n    return sstep(length(vec2(p.x * iResolution.x/iResolution.y , p.y)) + (1.0 - r));\n}\n\nfloat rectangle(vec2 p, vec2 size) {\n    return sstep(max(abs(p.x / size.x), abs(p.y / size.y)));\n}\n\nfloat ellipse(vec2 p) {\n    float rectW = (iResolution.x - iResolution.y) / iResolution.x;\n    return rectangle(p, vec2(rectW,1.0)) * circle(p + vec2(rectW,0), 1.0) * circle(p - vec2(rectW,0), 1.0);\n}\n\nfloat donut(vec2 p, float outside, float inside) {\n    return ellipse(p * inside) - ellipse(p * outside);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    \n    vec4 col = vec4(0);\n    \n    col += donut(uv, 1.0, 1.1) * vec4(.01,.15,.1,1.0);\n    col += donut(uv, 1.1, 1.11) * vec4(.23,.57,.47,1.0);\n    col += donut(uv, 1.11, 1.5) * vec4(0,.22,.14,1.0);\n    col += (1.0 - ellipse(uv * 1.5)) * vec4(.13,.52,.42,1.0);\n\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}