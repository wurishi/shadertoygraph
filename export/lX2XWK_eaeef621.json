{"ver":"0.1","info":{"id":"lX2XWK","date":"1711215251","viewed":74,"name":"Dot screen","username":"werls","description":"Grid-based technique to create a dot screen effect, representing the input image using circles. The radius of each circle varies according to the brightness of the original image.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["circles","grid","filter","effect","halftone","dots","dotscreen"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define GRID_SIZE 32. // Grid size constant\n\n// Function to generate pseudo-random value based on 2D coordinates\nfloat Hash21(vec2 p) {\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    // Setup\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y; // Normalized coordinates\n    vec2 uv_img = fragCoord / iResolution.xy; // Normalized image coordinates\n\n    // Get pixel color from input texture\n    vec3 img = texture(iChannel0, uv_img).rgb;\n    vec3 col = vec3(0.); // Initialize output color\n    \n    vec2 id = floor(uv * GRID_SIZE); // Grid cell index\n    vec2 gv = fract(uv * GRID_SIZE); // Grid cell vector\n    \n    float t = iTime * 5.; // Time variable\n\n    vec3 avg = vec3(0.); // Initialize average color\n    \n    // Loop through neighboring pixels\n    for (float y = -1.; y < 1.; y++) {\n        for (float x = -1.; x < 1.; x++) {\n            vec2 offset = vec2(x, y) / GRID_SIZE; // Offset from current pixel\n            vec3 c = texture(iChannel0, uv_img + offset).rgb; // Color of neighboring pixel\n            avg += c; // Accumulate color values\n        }\n    }\n    \n    avg /= 9.; // Average color calculation\n    \n    // Calculate brightness of the average color\n    float brightness = dot(avg, vec3(0.299, 0.587, 0.114));\n    \n    float radius = 0.1 + brightness; // Circle radius based on brightness\n    \n    float circle = length(gv - 0.5) - radius; // Distance from center of grid cell to edge of circle\n    col += smoothstep(radius * 0.01, radius * 0.01 - 0.08, circle); // Circle drawing\n    \n    // Output color\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}