{"ver":"0.1","info":{"id":"wdSXRc","date":"1554480406","viewed":132,"name":"colorful world","username":"Kua256","description":"Raymarching and rotation camera.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct ray\n{\n    vec3 pos;\n    vec3 dir;\n};\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat distanceFunc(vec3 p)\n{\n    float d1 = sphere(mod(p, 4.0) - 2.0, abs(p.z * 0.05));\n    float d2 = box(mod(p, 4.0) - 2.0, vec3(abs(p.z * 0.05)));\n    float t = abs(sin(iTime)) * fract(p.z);\n    return mix(d1, d2, t);\n}\n\nvec3 getNormal(vec3 p)\n{\n  float delta = 0.001;\n  return normalize(vec3(\n    distanceFunc(p - vec3(delta, 0.0, 0.0)) - distanceFunc(p),\n    distanceFunc(p - vec3(0.0, delta, 0.0)) - distanceFunc(p),\n    distanceFunc(p - vec3(0.0, 0.0, delta)) - distanceFunc(p)\n  ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 pos = (fragCoord.xy * 2.0 - iResolution.xy) / max(iResolution.x, iResolution.y);\n    \n\tvec3 cameraPos = vec3(0.0, 0.0, 0.0);\n    vec3 up = normalize(vec3(cos(iTime * 0.2), sin(iTime), 0.0));\n    vec3 forward = normalize(vec3(cos(iTime * 0.05), 0.0, sin(iTime * 0.05)));\n    vec3 side = normalize(cross(up, forward));\n\n    ray _ray;\n    _ray.pos = cameraPos;\n    _ray.dir = normalize(pos.x * side + pos.y * up + forward);\n    \n    float t = 0.0, d, dTorus;\n    for(int i = 0; i < 64; ++i)\n    {\n        d = distanceFunc(_ray.pos);\n        if(d < 0.001)\n        {\n            break;\n        }\n        \n        t += d;\n        _ray.pos = cameraPos + t * _ray.dir;\n    }    \n    \n    vec3 L = normalize(vec3(0.0, 0.0, 1.0));\n\tvec3 N = step(0.5, getNormal(_ray.pos));\n    \n    float col = 0.0;\n    if (mod(_ray.pos.x * 4.0, 2.0) < 1.0)\n\t{       \n        col = step(1.0, mod(_ray.pos.y * 4.0, 2.0));\n\t}\n\telse\n\t{\n\t\tcol = 1.0 - step(1.0, mod(_ray.pos.y * 4.0, 2.0));\n\t}\n    \n\tvec3 LColor = vec3(1.0);\n\tvec3 I = dot(N, L) * LColor * col;\n    \n    vec4 color = vec4(1.0);\n    if(d < 0.001)\n    {\n        color = vec4(I.r, 0.4, 1.0, 1.0) * abs(_ray.pos.z) * 0.08;\n    }\n    else\n    {\n        color = vec4(1.0);\n    }\n\n    fragColor = vec4(color.r + pos.x * abs(sin(iTime)),\n                     color.g,\n                     color.b + pos.y * abs(sin(iTime)),\n                     1.0);\n}","name":"Image","description":"","type":"image"}]}