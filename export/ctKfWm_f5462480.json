{"ver":"0.1","info":{"id":"ctKfWm","date":"1702243121","viewed":91,"name":"Spacegliding","username":"LTNWarrior","description":"A shader animation that shows the user flying through stars","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["star","space","stars"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_LAYERS 32.\n\n// This function uses trigonometry to provide color values along a specified gradient (https://www.youtube.com/watch?v=f4s1h2YETNY&t=300s)\nvec3 palette(float t) {\n    vec3 a = vec3(.6, .6, .6);\n    vec3 b = vec3(.480, .480, .480);\n    vec3 c = vec3(.6, .6, .6);\n    vec3 d = vec3(-1.112, -.778, -.445);\n    \n    return a + b * cos( 6.28318*(c*t+d) );\n}\n\n// Creates a standard rotation matrix\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\n// Creates a star\nfloat Star(vec2 uv, float flare) {\n    float d = length(uv);\n    float m = .05/d;\n    \n    float rays = max(0.25, 2. - abs(uv.x * uv.y * 1000.));\n    m += rays * flare;\n    \n    uv *= Rot(iTime);\n    \n    rays = max(0.25, 2. - abs(uv.x * uv.y * 1000.));\n    m += rays * flare;\n    \n    m *= smoothstep(1., .2, d);\n    \n    return m;\n}\n\n// An implementation of rng in GLSL\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34, 456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y);\n}\n\n// Creates a layer of stars\nvec3 StarLayer(vec2 uv) {\n    vec3 col = vec3(0);\n    \n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    for(int y=-1;y<=1;y++) {\n        for(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            \n            float n = Hash21(id+offs);\n            float size = fract(n * 1000.);\n            \n            float star = Star(gv-offs-vec2(n, fract(n*1000.))+.5, smoothstep(.9, 1., size)*.6);\n            \n            vec3 color = palette(fract(n - iTime * .25)) * .5; \n            \n            star *= sin(iTime*3.+n*6.2821)*.5+1.;\n            col += star * size * color;\n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize pixel and mouse coords and make them relative to center of screen\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n    \n    uv += M*4.;\n    \n    float t = iTime * .1;\n    \n    // Camera rotation (rotation matrix from https://www.shadertoy.com/view/Msl3WH)\n    float rotSp = (iTime+29.) * 60.0*0.005;\n    float si = sin(rotSp*1.5);\n\tfloat co = cos(rotSp);\n\tuv *= mat2(co, si, -si, co);\n    \n    vec3 col = vec3(0);\n    \n    for(float i=0.; i<=1.; i+=1./NUM_LAYERS) {\n    \n        // Makes the stars move towards the camera\n        float depth = fract(i+t);\n         \n        float scale = mix(20., .5, depth);\n        float fade = depth*smoothstep(1., .9, depth);\n        \n        col += StarLayer(uv*scale+i*453.2 + M)*fade;\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}