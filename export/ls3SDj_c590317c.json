{"ver":"0.1","info":{"id":"ls3SDj","date":"1461475903","viewed":242,"name":"EARF","username":"zackpudil","description":"Happy EARF day everybody :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefields"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float TMAX = 20.0;\n\nfloat hash(float n) {\n\treturn fract(sin(n)*43758.54831);\n}\n\nfloat hash2(vec2 n) {\n    return fract(sin(dot(n, vec2(12.989, 71.233)))*43758.5453);\n}\n\nfloat noise(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\t\n\tf = f*f*(3.0 - f*2.0);\n\t\n\tfloat n = p.x + p.y*57.0 + p.z*113.0;\n\t\n\treturn mix(\n\t\tmix(\n\t\t\tmix(hash(n + 000.0), hash(n + 001.0), f.x),\n\t\t\tmix(hash(n + 057.0), hash(n + 058.0), f.x),\n\t\t\tf.y),\n\t\tmix(\n\t\t\tmix(hash(n + 113.0), hash(n + 114.0), f.x),\n\t\t\tmix(hash(n + 170.0), hash(n + 171.0), f.x),\n\t\t\tf.y),\n\t\tf.z);\n}\n\nfloat fbm(vec3 p) {\n\tfloat f = 0.0;\n\t\n\tf += 0.5000*noise(p); p *= 2.01;\n\tf += 0.2500*noise(p); p *= 2.04;\n\tf += 0.1250*noise(p); p *= 2.02;\n\tf += 0.0625*noise(p);\n\t\n\tf /= 0.9375;\n\t\n\treturn f;\n}\n\nvoid rotate(inout vec2 p, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\t\n\tp = mat2(c, s, -s, c)*p;\n}\n\nvec2 map(vec3 p) {\n\tvec3 q = p;\n\trotate(p.xz, 0.1*iTime);\n    float f = 0.0;\n    if(length(p) - 1.0 <= 0.1 ) {\n\t\tf = smoothstep(0.0, 1.0, 100.0*smoothstep(0.5, 1.0, fbm(4.0*p)));\n\t\tf += smoothstep(0.0, 1.0, 10.0*smoothstep(0.5, 1.0, fbm(2.0*p + vec3(0, 0, iTime))));\n    }\n\tvec2 d1 = vec2(length(p) - 1.0 - 0.01*f, 0.0);\n\trotate(q.xz, 0.5*iTime);\n\tq.x -= 1.8;\n    f = 0.0;\n    if(length(q) - 0.3 <= 0.1) {\n\t\tf = fbm(5.0*q);\n    }\n\tvec2 d2 = vec2(length(q) - 0.3 + 0.05*f, 1.0);\n\t\n\treturn d1.x < d2.x ? d1 : d2;\n}\n\nvec3 intersect(vec3 ro, vec3 rd) {\n\tfloat td = 0.0;\n\tfloat mid = -1.0;\n\tfloat g = 0.0;\n    \n\tfor(int i = 0; i < 100; i++) {\n\t\tvec2 s = map(ro + rd*td);\n\t\tif(abs(s.x) < 0.001 || td >= TMAX) break;\n\t\ttd += s.x*0.95;\n\t\tmid = s.y;\n        if(s.y <= 0.0) g += clamp(0.05 - s.x, 0.0, 1.0);\n\t}\n\t\n\tif(td >= TMAX) mid = -1.0;\n\treturn vec3(td, mid, g);\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 n = vec3(\n\t\tmap(p + h.xyy).x - map(p - h.xyy).x,\n\t\tmap(p + h.yxy).x - map(p - h.yxy).x,\n\t\tmap(p + h.yyx).x - map(p - h.yyx).x\n\t);\n\t\n\treturn normalize(n);\n}\n\nvec3 earfColor(vec3 p) {\n\tfloat f = 0.0;\n\tvec3 col = vec3(0.2, 0.4, 0.8);\n\trotate(p.xz, 0.1*iTime);\n\t\n\tf = smoothstep(0.5, 1.0, fbm(4.0*p));\n\tcol = mix(col, vec3(0.2, 0.8, 0.4), smoothstep(0.0, 1.0, 100.0*f));\n\t\n\tf = smoothstep(0.5, 1.0, fbm(2.0*p + vec3(0, 0, iTime)));\n\tcol = mix(col, vec3(0.8), smoothstep(0.0, 1.0, 10.0*f));\n\t\n\treturn col;\n}\n\nvec3 moonColor(vec3 p) {\n\t\n\tvec3 col = vec3(0.2);\n\trotate(p.xz, 0.5*iTime);\n\tp.x -= 1.8;\n\tfloat f = fbm(5.0*p);\n\tcol *= f;\n\t\n\treturn col;\n}\n\nmat3 camera(vec3 e, vec3 l) {\n\tvec3 f = normalize(l - e);\n\tvec3 r = cross(vec3(0, 1, 0), f);\n\tvec3 u = cross(f, r);\n\t\n\treturn mat3(r, u, f);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = -1.0 + 2.0*( fragCoord.xy / iResolution.xy );\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tfloat atime = iTime*0.3;\n    float s = 0.01*iMouse.x + 1.5;\n\tvec3 ro = 2.5*vec3(cos(s), 0, -sin(s));\n\tvec3 rd = camera(ro, vec3(0))*normalize(vec3(uv, 2.0));\n\t\n\tvec3 col = vec3(1.0)*step(0.997, hash2(rd.xy));\n\t\n\tvec3 i = intersect(ro, rd);\n\t\n\tif(i.y > -0.5) {\n        col = vec3(0);\n\t\tvec3 lig = normalize(vec3(-1.0, 0, -0.2));\n\t\tvec3 pos = ro + rd*i.x;\n\t\tvec3 nor = normal(pos);\n\t\tvec3 ref = reflect(rd, nor);\n\t\t\n\t\tfloat dif = clamp(dot(lig, nor), 0.0, 1.0);\n\t\tfloat spe = pow(clamp(dot(ref, lig), 0.0, 1.0), 32.0);\n        float fre = pow(clamp(1.0 + dot(rd, nor), 0.0, 1.0), 2.0);\n\t\t\n\t\tcol =  0.01*vec3(1.0, 0.97, 0.85);\n\t\tcol += 0.70*vec3(1.0, 0.97, 0.85)*dif;\n\t\t\n\t\tif(i.y == 0.0) {\n\t\t\tcol *= earfColor(pos);\n\t\t\tcol += 2.0*spe*vec3(1.0, 0.97, .1)*dif;\n            col += 0.1*fre*vec3(1.0, 1.0, 1.0)*dif;\n\t\t} else {\n\t\t\tcol *= moonColor(pos);\n            col += 0.1*fre*vec3(1.0, 1.0, 1.0);\n\t\t}\n\t}\n    \n    col += pow(abs(i.z), 4.0)*vec3(0.0, 0.3, 1.0);\n\tcol = pow(col, vec3(0.454545));\n\t\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}