{"ver":"0.1","info":{"id":"MljBzm","date":"1515256615","viewed":896,"name":"GPU FFT II(WebGL2.0)","username":"834144373","description":"Base on my webgl1.0 [url=https://www.shadertoy.com/view/lsVXWt]Pixel Shader FFT[/url]\nhum...I am sure that I didn't find any about Fragment/Pixel Shader FFT,...and it can't be DFT,:D\nHaha,So I am sure it is newest on the world and as fast.","likes":9,"published":3,"flags":32,"usePreview":0,"tags":["fft","gpufft"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tGPU FFT(Webgl2.0).glsl by 834144373\n\tbase on \"Pixel Shader FFT\" https://www.shadertoy.com/view/lsVXWt by 834144373\n\tLicence: CC3.0 BY-NC-SA\n*/\n\n/*\n\tCan you make my \"GPUFFT\"  in BufA fast and fast again? 😁\n\tHum...mean is run fast,not \"2TC\" 💪.\n\tAnd you can uncomment \"debug_visual\" in BufA to sure it works well.\n*/\n#define DynamicBuffer iChannel0 \n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\tU -= floor(iResolution.xy*vec2(0.33,0.35));\n    \n    vec2 FFT = texelFetch(DynamicBuffer,ivec2(int(floor(U.x)),9),0).xy; \n    float energy = length(FFT);\n    energy = U.x == 0.5 ? energy/512. : energy/256.;\n    \n    //Show Dynamic Buffer Technology\n    C = texelFetch(iChannel0,ivec2(int(U.x)+130,int(U.y)+55),0);\n    if(floor(U.x)>255. || floor(U.x) < 0.)\n        return;\n    if(floor(U.y) < energy && floor(U.y) > -1.)\n        C.g = 1.;\n    if(floor(U.y) < 128. && floor(U.y)>-1.)\n        C.r = 0.2;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n\tGPU FFT(Webgl2.0).glsl by 祝元洪(834144373)\n\tbase on my \"Pixel Shader FFT\" https://www.shadertoy.com/view/lsVXWt by 834144373\n*/\n#define AudioBuffer iChannel1\n#define DynamicBuffer iChannel0\n#define BitWidth 9\n#define _Half_PI 1.57079633\n#define  _PI 3.1415926\n#define _2PI 6.2831853\nconst ivec2 AudioBufferSize = ivec2(512,2);\n\n//to visual debug\n//if 200Hz/s\n//#define debug_visual\n#define debug_frequency 200. //range(1,255) Hz\n\n//Any bit-length Bit Reverse\nint BitReverse(int n,int _bitWidth){\n\tint r = 0;\n    for (int i =_bitWidth-1;i >= 0;i--)\n    {\n\t\tr |= (n&1)<<i;\n\t\tn >>= 1;\n\t}\n    return r;\n}\n\n//Get (0.,1.) time domain values --> (-128,127) beacase the audio is 8 bits channel\nfloat GetTimeDomain(int index){\n\tfloat d = texelFetch(AudioBuffer,ivec2(index,1),0).r;\n    d = floor(d*255.+0.5)-128.; //round to int\n    #ifdef debug_visual\n        d += 128.*sin(debug_frequency*float(index)/float(AudioBufferSize.x)*_2PI);\n    #endif\n    return d;\n}\nvec2 GetFFT(int x,int y){\n\treturn texelFetch(DynamicBuffer,ivec2(x,y),0).st;\n}\n/*\n  U.y -1 is get time domain by bit reverse,\n  U.y 0,1,2,3,4,5,6,7,8 is do butterfly step.\n*/\nvec2 GPUFFT(ivec2 U,inout vec2 B){\n    --U.y;\n    int index = BitReverse(U.x,BitWidth);\n    if(U.y == -1)\n    \tB.st = vec2(GetTimeDomain(index),0.);\n    if(U.y >= 0 && U.y <= 8)\n    {\n        int burb = 1<<U.y; \n        int kn = U.x & (burb-1);\n        float C = -_PI*float(kn)/float(burb);\n        vec2 W = sin(vec2(C+_Half_PI,C));\n        int E = 1-((U.x>>U.y)&1);\n        B.xy = GetFFT(U.x-burb*(1-E),U.y);\n        B.xy += mat2(W,-W.y,W.x)*GetFFT(U.x+burb*E,U.y)*float(E*2-1);\n    }\n\treturn GetFFT(U.x,9).xy;\n}\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\tif(iFrame<2)\n        C = vec4(0.);\n    ivec2 UU = ivec2(U-0.5);\n    if(UU.x > AudioBufferSize.x || UU.y>9){\n    \tC = vec4(0.);\n        return;\n    }\n    GPUFFT(UU,C.xy);\n}\n\n/* to friendly read\nvec2 GPUFFT(ivec2 U,inout vec2 B){\n    --U.y;\n    int index = BitReverse(U.x,9);\n    if(U.y == -1)\n    \tB.st = vec2(GetTimeDomain(index),0.);\n    if(U.y >= 0 && U.y <= 8)\n    {\n        int burb = 1<<U.y; \n        int kn = U.x & (burb-1);\n        float C = -_PI*float(kn)/float(burb);\n        vec2 W = sin(vec2(C+_Half_PI,C));\n        int E = 1-((U.x>>U.y)&1);\n        B.xy = GetFFT(U.x-burb*(1-E),U.y);\n        B.xy += mat2(W,-W.y,W.x)*GetFFT(U.x+burb*E,U.y)*float(E*2-1);\n    }\n\treturn GetFFT(U.x,9).xy;\n}\n*/\n\n","name":"Buffer A","description":"","type":"buffer"}]}