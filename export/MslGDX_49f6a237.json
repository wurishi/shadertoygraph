{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// The idea is to limit the number of fractal iterations based on the current sample\n// rate (density of pixels). The fractal is Kali's Kaliset.\n\n// This is how mipmapping works - mips are chosen by the current sample rate (computed\n// from texture coordinate derivatives).\n\n// To do this one must know the frequency content of the contribution of each iteration\n// of the fractal. I don't think this can be found analytically (?). I estimated it by\n// saving the result of each iteration as an image, and then using imagemagick to get\n// a frequency spectrum. Then I can see what the highest frequencies are from the spectrum.\n// ( http://www.imagemagick.org/Usage/fourier/ )\n\n// I plotted my estimate of the maximum frequencies for each fractal iteration in Excel\n// and found an exponential function to be a good fit for this range of iterations:\n\n// highest frequency = 13.548 * exp( 0.2309 * iteration )\n\n// The code below computes what the nyquist frequency is for the current pixel sampling\n// rate and then inverts the above formula to compute the iteration count.\n\n// The good news is that it does address aliasing and it could be a performance\n// optimisation in some cases due to less iterations of the fractal (sadly in this\n// case adding the early out to the loop just slows it down).\n\n// The bad news is that there is a wide variation in frequencies in even the early\n// iterations. This is why the zoomed out view looks blurry in much of the view - because\n// there are still high frequencies visible in the darker regions.\n\n#define ITERCNT 24\n\nfloat kset( vec3 p, vec2 fragCoord )\n{\n\tfloat iters = float(ITERCNT);\n\t\n\t// limit iteration count on RHS of screen\n\tif( fragCoord.x > iResolution.x/2. )\n\t{\n\t\tfloat patch_width = 1.0;\n\t\tfloat pix_width = dFdy(p.z) / patch_width;\n\t\tfloat nyquist_period = 2. * pix_width;\n\t\tfloat nyquist_freq = 1. / nyquist_period;\n\t\t\n\t\t// an exponential curve seemed to be a good fit for freq vs iterations.\n\t\t// invert it to find number of iterations\n\t\titers = log(nyquist_freq/13.548)/.3209;\n\t}\n\t\n\t// kaliset\n\t\n\tp=(fract(p)-.5);\n\t\n\tfloat es, l=es=0.;\n\tfor (int i=1;i<ITERCNT;i++) {\n\t\tfloat pl=l;\n\t\tl=length(p);\n\t\tp=abs(p)/dot(p,p)-.5;\n\t\t\n\t\t// this bandlimits the fractal\n\t\t\n\t\tfloat multiplier = iters - float(i);\n\t\t\n\t\t// this can be used to early out, but just makes it slower in practice (for me)\n\t\t//if( multiplier < 0. )\n\t\t//\tbreak;\n\t\t\n\t\tmultiplier = clamp(multiplier,0.,1.);\n\t\t\n\t\tes += multiplier * exp(-1./abs(l-pl));\n\t}\n\treturn es/float(iters);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// yellow bar\n\tif( abs(fragCoord.x - iResolution.x/2.) < 2. )\n\t{\n\t\tfragColor.rg = vec2(1.0);\n\t\treturn;\n\t}\n\n\t// pixel coords\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 pp = -.5 + q;\n\t\n\t// do some weird stuff to move the camera around\n\tfloat pi = 3.141592654;\n\tfloat period = 10.0;\n\tfloat side =fract(floor(iTime/period)/2.)-.25;\n\tfloat updown =fract(floor(iTime/(2.*period))/2.)-.25;\n\tfloat zoomcos = cos(2.*iTime*pi/period);\n\tfloat zoom = 0.05 + .3*(1.+1.*zoomcos);\n\tvec2 focal = (1.-(zoomcos+1.)/2.)*.5*vec2(side,updown);\n\tpp = focal+pp*zoom;\n\t\n\tfragColor = 2.*vec4(kset( vec3(pp.x,0.,pp.y), fragCoord ));\n\t\n\treturn;\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MslGDX","date":"1381589041","viewed":488,"name":"Bandlimited Kaliset","username":"huwb","description":"Eliminating aliasing using something like mipmapping for fractals - stop iterating when frequencies exceed the Nyquist limit. Unfortunately the range of frequencies added by each iteration is very broad, so the bandlimited result appears under-iterated.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["fractal","aliasing","filtering","nyquist"],"hasliked":0,"parentid":"","parentname":""}}