{"ver":"0.1","info":{"id":"Dds3R8","date":"1668648764","viewed":85,"name":"Draw Bezier","username":"yulu","description":"a bezier test","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","math","bezier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float point_radius = 0.01;\n\nfloat draw_point(vec2 uv, vec2 a)\n{\n    return step(length(uv.xy-a),point_radius);\n}\n\nfloat bezier(vec2 uv,vec2 a,vec2 b,vec2 c,float t)\n{\n    vec2 p = a + t*(b-a);\n    vec2 q = b + t*(c-b);\n    return draw_point(uv,p + t*(q-p));\n}\n\nfloat draw_Bezier(vec2 uv,vec2 a,vec2 b,vec2 c)\n{\n    float t = 0.0;\n    float be = bezier(uv,a,b,c,0.0);\n    while(t < 1.0)\n    {\n        be += bezier(uv,a,b,c,t);\n        t += 0.01;\n    }\n    return be;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 i;\n    if (iMouse.x > 1.0 && iMouse.y > 1.0)\n    {\n        i.x = iMouse.x / iResolution.x;\n        i.y = iMouse.y / iResolution.y;\n    }\n\n    // Time varying pixel color\n    vec2 A = vec2(0.2,0.2);\n    //vec2 B = i;\n    vec2 B = vec2(cos(iTime) / 3.0 + 0.5,sin(iTime) / 3.0 + 0.5);\n    vec2 C = vec2(0.8,0.2);\n    \n    float point = draw_point(uv,A) + draw_point(uv,B) + draw_point(uv,C);\n    float t = 0.0;\n    float bezier = draw_Bezier(uv,A,B,C);\n    \n    \n\n    // Output to screen\n    fragColor = vec4(vec3(point,0.0,0.0) + vec3(0.0,bezier,0.0),1.0);\n}","name":"Image","description":"","type":"image"}]}