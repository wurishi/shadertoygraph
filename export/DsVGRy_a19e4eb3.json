{"ver":"0.1","info":{"id":"DsVGRy","date":"1678736315","viewed":121,"name":"backword in fullscreen","username":"tacos_au_chili","description":"a pixel art image shader","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n//pixel order selection in 2D\nuint f(uvec2 pos,uint c){\n    //size = 2 pow c\n    uint size = 1u<<c;\n    //pixels count\n    uint pixels = size*size;\n    //result var\n    uint r = 0u;\n    for(uint i = 0u;i<c;i++){\n        uint bandSize = 1u<<(c-i-1u);\n        uint score = 1u<<(i*2u);\n        if((pos.x/bandSize)%2u!=0u)r+=score;\n        \n        score = 1u<<(i*2u+1u);\n        if(((pos.x+pos.y)/bandSize)%2u!=0u)r+=score;\n        \n    }\n    return r;\n}\n\n// main function\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ////////////////////\n    // you can change //\n    // this values     //\n    ////////////////////\n    float pixelSize = 2.0;\n    int gradientResolution = 4;\n    vec3 palette = vec3(4,4,4);\n    ////////////////////\n    \n    \n    //positions \n    vec2 uv = fragCoord/iResolution.xy;\n    ivec2 pos = ivec2(fragCoord/pixelSize);\n    \n    vec3 col = texture(iChannel0,vec2(pos)*pixelSize/iResolution.xy).rgb;\n    vec3 hsvCol=rgb2hsv(col);\n    vec3 result = vec3(0,1,1);\n    //gradient var\n    float m = 0.0;\n    \n    //gradien loop for h,s,v colors\n    for(int i = 0;i<3;i++){\n        m=mod(hsvCol[i]*palette[i],1.0);\n        m=m*(pow(pow(2.0,float(gradientResolution)),2.0)+1.0);\n        if(uint(m)<f(uvec2(pos),uint(gradientResolution)))\n            result[i] = floor(hsvCol[i]*palette[i])/palette[i];\n        else result[i] = floor(hsvCol[i]*palette[i]+1.0)/palette[i];\n    }\n\n    // Output to screen\n    fragColor = vec4(hsv2rgb(result),1.0);\n}","name":"Image","description":"","type":"image"}]}