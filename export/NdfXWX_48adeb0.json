{"ver":"0.1","info":{"id":"NdfXWX","date":"1619300246","viewed":155,"name":"Autonomous Movement 2D","username":"oneshade","description":"Autonomous movement.","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["2d","random","movement","autonomous"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdLine(in vec2 p, in vec2 a, in vec2 b, in float t) {\n    vec2 pa = p - a, ba = b - a;\n    return length(pa - ba * clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0)) - t;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n\n    Camera cam = getCamera(float(iFrame) * 0.02);\n    cam.pos = cam.pos * 4.0 - 2.0;\n\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0, 0.0, 0.0), smoothstep(unit, 0.0, sdLine(uv, cam.pos, cam.pos + cam.ori[0] * 0.5, 0.01)));\n    fragColor.rgb = mix(fragColor.rgb, vec3(0.0, 1.0, 0.0), smoothstep(unit, 0.0, sdLine(uv, cam.pos, cam.pos + cam.ori[1] * 0.5, 0.01)));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"struct Camera {\n    vec2 pos;\n    mat2 ori;\n};\n\nvec2 Hash12(in float t) {\n\tvec3 p3 = fract(t * vec3(0.1031, 0.1030, 0.0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nCamera getCamera(in float t) {\n    float id = floor(t), local = fract(t);\n    vec2 a = Hash12(id), b = Hash12(id + 1.0), c = Hash12(id + 2.0);\n    vec2 mid1 = 0.5 * (a + b), mid2 = 0.5 * (b + c);\n\n    vec2 pos = mix(mix(mid1, b, local), mix(b, mid2, local), local);\n    vec2 dir = normalize(mid1 * (local - 1.0) + (1.0 - 2.0 * local) * b + mid2 * local);\n\n    return Camera(pos, mat2(dir.y, -dir.x, dir));\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 4.0;\n    float unit = 8.0 / iResolution.y;\n\n    Camera cam = getCamera(float(iFrame) * 0.02);\n    cam.pos = cam.pos * 4.0 - 2.0;\n\n    fragColor.rgb = mix(fragColor.rgb, vec3(1.0), smoothstep(unit, 0.0, length(uv - cam.pos) - 0.05));\n    fragColor.rgb *= 0.99;\n}","name":"Buffer A","description":"","type":"buffer"}]}