{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"precision highp float;\n\nfloat gTime = 0.;\n\nmat2 rot(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat sdStar(vec3 p, int sides, float radius, float innerRadius) {\n    vec2 pos = p.xy;\n\n    float angle = atan(pos.y, pos.x);\n    float segmentAngle = 2.0 * 3.141592 / float(sides);\n\n    float rOuter = radius;\n    float rInner = innerRadius;\n\n    float starRadius = mod(angle, segmentAngle) < (segmentAngle / 2.0) ? rOuter : rInner;\n\n    float distToEdge = length(pos) - starRadius;\n    return distToEdge;\n}\n\nfloat star(vec3 pos, float scale, int sides) {\n    pos *= scale;\n    float base = sdStar(pos, sides, 0.4, 0.2) / 1.5;\n    pos.xy *= 5.;\n    pos.y -= 3.5;\n    pos.xy *= rot(.75);\n    float result = -base;\n    return result;\n}\n\nfloat star_set(vec3 pos, float iTime) {\n    vec3 pos_origin = pos;\n\n    pos = pos_origin;\n    pos.y += sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(.8);\n    float star1 = star(pos, 2. - abs(sin(gTime * 0.4)) * 1.5, 8);\n\n    pos = pos_origin;\n    pos.y -= sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(.8);\n    float star2 = star(pos, 2. - abs(sin(gTime * 0.4)) * 1.5, 8);\n\n    pos = pos_origin;\n    pos.x += sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(.8);\n    float star3 = star(pos, 2. - abs(sin(gTime * 0.4)) * 1.5, 8);\n\n    pos = pos_origin;\n    pos.x -= sin(gTime * 0.4) * 2.5;\n    pos.xy *= rot(.8);\n    float star4 = star(pos, 2. - abs(sin(gTime * 0.4)) * 1.5, 8);\n\n    pos = pos_origin;\n    pos.xy *= rot(.8);\n    float star5 = star(pos, .5, 8) * 6.;\n\n    pos = pos_origin;\n    float star6 = star(pos, .5, 8) * 6.;\n\n    float result = max(max(max(max(max(star1, star2), star3), star4), star5), star6);\n    return result;\n}\n\nfloat map(vec3 pos, float iTime) {\n    vec3 pos_origin = pos;\n    float star_set1 = star_set(pos, iTime);\n\n    return star_set1;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (fragCoord.xy * 2. - iResolution.xy) / min(iResolution.x, iResolution.y);\n    vec3 ro = vec3(0., -0.2, iTime * 4.);\n    vec3 ray = normalize(vec3(p, 1.5));\n    ray.xy = ray.xy * rot(sin(iTime * .03) * 5.);\n    ray.yz = ray.yz * rot(sin(iTime * .05) * .2);\n    float t = 0.1;\n    vec3 col = vec3(0.);\n    float ac = 0.0;\n\n    for (int i = 0; i < 99; i++) {\n        vec3 pos = ro + ray * t;\n        pos = mod(pos - 2., 4.) - 2.;\n        gTime = iTime - float(i) * 0.01;\n\n        float d = map(pos, iTime);\n\n        d = max(abs(d), 0.01);\n        ac += exp(-d * 23.);\n\n        t += d * 0.55;\n    }\n\n    col = vec3(ac * 0.02);\n\n    col += vec3(0., 0.2 * abs(sin(iTime)), 0.5 + sin(iTime) * 0.2);\n\n    fragColor = vec4(col, 1.0 - t * (0.02 + 0.02 * sin(iTime)));\n}\n\n/** SHADERDATA\n{\n\t\"title\": \"Stars\",\n\t\"description\": \"Dynamic star shapes reacting to time and space.\",\n\t\"model\": \"abstract\"\n}\n*/\n\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lcKfDm","date":"1734117074","viewed":91,"name":"icicle","username":"zhuo2","description":"11","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["graphic"],"hasliked":0,"parentid":"","parentname":""}}