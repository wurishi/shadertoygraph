{"ver":"0.1","info":{"id":"slVyRV","date":"1661865234","viewed":108,"name":"Reaction Diffusion Simulation","username":"rmauro","description":"Implementation of Reaction-Diffusion Tutorial from Karl Sims' page https://www.karlsims.com/rd.html.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["generative","diffusion","design"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author: Renato C. Mauro\n// Based on https://www.karlsims.com/rd.html\n// Source implementation in \"Buffer A\" tab\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 color = texture(iChannel0,uv).rg; \n    fragColor = vec4(vec3(color[0]-color[1]),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Author: Renato C. Mauro\n// Based on https://www.karlsims.com/rd.html\n\nfloat Da = 1.0;\nfloat Db = 0.5;\nfloat f = 0.055;\nfloat k = 0.062;\n\nvec2 cellAttr(vec2 uv, vec2 neighbor) {\n    vec2 delta = 1.0/iResolution.xy;\n    return texture(iChannel0,(uv+neighbor*delta)).rg;\n}\n\nvec2 laplacian(vec2 uv) {\n    mat3 convMatrix = mat3(\n        0.05, 0.20, 0.05,\n        0.20, -1.0, 0.20,\n        0.05, 0.20, 0.05\n    );\n    vec2 delta = 1.0/iResolution.xy;\n    vec2 sum = vec2(0.0,0.0);\n    sum += cellAttr(uv,vec2(-1.0,-1.0))*convMatrix[0][0];\n    sum += cellAttr(uv,vec2( 0.0,-1.0))*convMatrix[0][1];\n    sum += cellAttr(uv,vec2(+1.0,-1.0))*convMatrix[0][2];\n    sum += cellAttr(uv,vec2(-1.0, 0.0))*convMatrix[1][0];\n    sum += cellAttr(uv,vec2( 0.0, 0.0))*convMatrix[1][1];\n    sum += cellAttr(uv,vec2(+1.0, 0.0))*convMatrix[1][2];\n    sum += cellAttr(uv,vec2(-1.0,+1.0))*convMatrix[2][0];\n    sum += cellAttr(uv,vec2( 0.0,+1.0))*convMatrix[2][1];\n    sum += cellAttr(uv,vec2(+1.0,+1.0))*convMatrix[2][2];\n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    if(iFrame == 0) {\n        if(distance(uv,vec2(0.5,0.5))<0.03) {\n            fragColor = vec4(1.0,1.0,0.0,1.0); \n        } else {\n            fragColor = vec4(1.0,0.0,0.0,1.0); \n        }\n    } else {\n        vec2 lastColor = texture(iChannel0,uv).rg;\n        float a = lastColor[0];\n        float b = lastColor[1];\n        vec2 lap = laplacian(uv);\n        fragColor[0] = clamp(a+(Da*lap[0]-a*b*b+f*(1.0-a)),0.0,1.0);\n        fragColor[1] = clamp(b+(Db*lap[1]+a*b*b-(k+f)*b),0.0,1.0);\n        fragColor[2] = 0.0;\n        fragColor[3] = 1.0;\n    }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}