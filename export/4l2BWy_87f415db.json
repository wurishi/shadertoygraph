{"ver":"0.1","info":{"id":"4l2BWy","date":"1517070969","viewed":115,"name":"Raymarch Planets","username":"shemit","description":"planet marcher","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarchplanet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159\n#define marches 80\n\nvec4 sphereSDF(vec3 point) {\n    vec3 position[4];\n    position[0] = vec3(0.0, 0.0, 10.0);\n    position[1] = vec3(\n        sin(0.58 *(iTime + PI)) * 7.0, \n        0.23 * sin(iTime), \n        cos(0.58 *(iTime + PI)) * 7.0) + \n        vec3(0.0, 0.0, 10.0);\n    position[2] = vec3(sin(iTime + PI * 0.25) * 3.0, 0.0, cos(iTime + PI + 0.25) * 3.0) + \n        vec3(0.0, 0.0, 10.0);\n    position[3] = vec3(\n            sin(iTime + PI * 1.25) * 9.0, \n        \t2.0 * sin(iTime), \n            cos(iTime + PI + 1.25) * 9.0\n    \t) + vec3(0.0, 0.0, 10.0);\n        \n    \n    float radius[4];\n    radius[0] = 2.0;\n    radius[1] = 0.5;\n    radius[2] = 0.25;\n    radius[3] = 0.6;\n    \n    vec3 color[4];\n    color[0] = vec3(1.0, 0.0, 0.0);\n    color[1] = vec3(0.3, 0.8, 0.0);\n    color[2] = vec3(0.2, 0.7, 0.3);\n    color[3] = vec3(0.1, 0.3, 0.8);\n    \n    for (int i = 0; i < 4; i++) {\n        vec3 normal = point - position[i];\n        vec3 lightDirection = normalize(vec3(sin(iTime), 0.5, cos(iTime)));\n        if (length(normal) < radius[i]) {\n            float light = dot(normalize(normal), lightDirection);\n            return vec4(light * color[i], 1.0);\n            //return vec4(color[i], 1.0);\n        }\n    }\n    return vec4(0.0, 0.0, 0.0, 0.0);\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec3 getRay(float fov, vec2 uv) {\n    vec2 offset = uv - vec2(0.5 * iResolution.x / iResolution.y, 0.5);\n    vec3 direction = normalize(vec3(offset, 0.0) + vec3(0.0, 0.0, 1.0));\n    return direction;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.y;\n    vec3 direction = getRay(PI / 2.0, uv);\n    \n    //int marches = 200;\n    float marchDistance = 0.15;\n    float totalDistance = 0.0;\n    vec3 position = vec3(0.0, 1.0, 0.0);\n    \n    vec3 finalColor = vec3(0.0, 0.0, 0.0);\n    for (int i = 0; i < marches; i++) {\n        totalDistance += marchDistance;\n        vec3 pt =  totalDistance * direction + position;\n        vec4 color = sphereSDF(pt);\n        if (color.w > 0.5) {\n            finalColor = color.xyz;\n            break;\n        }\n    }\n    \n\tfragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}