{"ver":"0.1","info":{"id":"4syBWV","date":"1535489169","viewed":155,"name":"A Stormy Night","username":"dreamur","description":"Just something else I've been working on.\n\nCredits/ thanks to akufishi here on Shadertoy, Golan Levin & Collaborators from flong, and Patricio Gonzalez Vivo & Jen Lowe from The Book of Shaders for creating lots of helpful resource materials.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["cloud","sky"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358\n\nfloat circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*0.08),\n                         _radius+(_radius*0.1),\n                         dot(dist,dist)*4.0);\n}\n\nfloat ellipse(vec2 _st, float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius,\n                         _radius,\n                         dot(dist,dist / vec2(1.61, 0.67) )*4.0);\n}\n\nfloat rect(vec2 coordSpace, vec2 dim)\n{          \n    vec2 tmp = smoothstep( dim, dim, coordSpace );\n    float pct = tmp.x * tmp.y;\n    \n    tmp = smoothstep( dim, dim, 1. - coordSpace );\n    pct *= tmp.x * tmp.y;\n\n    return pct;\n}\n\n\nfloat plot(float x, float pct) {\n    \n    return step( x, pct ) - step( x, pct - .15 ); \n}\n\n// by Golan Levin and Collaborators\n// http://www.flong.com/texts/code/shapers_exp/\nfloat logisticSigmoid (float x, float a){\n\n  float epsilon = 0.0001;\n  float min_param_a = 0.0 + epsilon;\n  float max_param_a = 1.0 - epsilon;\n  a = max(min_param_a, min(max_param_a, a));\n  a = (1./(1.-a) - 1.);\n\n  float A = 1.0 / (1.0 + exp(0. -((x-0.5)*a*2.0)));\n  float B = 1.0 / (1.0 + exp(a));\n  float C = 1.0 / (1.0 + exp(0.-a)); \n  float y = (A-B)/(C-B);\n  return y;\n}\n\n// concept from \"Rainbow Showoff\"\n// by akufishi\n// https://www.shadertoy.com/view/lscBRf\nfloat rainDrop( vec2 coordSpace, float scalar, float timeOffset, float modVal)\n{      \n    float tempTime = iTime * 10.;\n    float initPos = fract( sin(coordSpace.x) * scalar ) / iTime + timeOffset;\n    return rect( vec2(mod(coordSpace.y + tempTime * initPos, modVal)) , vec2(0.485, .44) );\n}\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                * 43758.5453123);\n}\n\n\n// by Patricio Gonzalez Vivo from The Book of Shaders\n// https://thebookofshaders.com/11/\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);    \n    vec2 u;\n    u = f*f*f*(f*(f*6.-15.)+10.);\n    return mix( mix( random( i + vec2(0.0,0.0) ),\n                     random( i + vec2(1.0,0.0) ), u.x),\n                mix( random( i + vec2(0.0,1.0) ),\n                     random( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// by Patricio Gonzalez Vivo from The Book of Shaders\n// live version below\n//     https://thebookofshaders.com/edit.php#11/wood.frag\nfloat lines(in vec2 pos, float b){\n    float scale = 10.0;\n    pos *= scale;\n    return smoothstep(0.0,\n                    .5+b*.5,\n                    abs((sin(pos.x*3.1415)+b*2.0))*.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord/iResolution.xy;\n    \n    st -= 0.5;\n    st.x *= iResolution.x/iResolution.y;\n    st += 0.5;\n\n    vec3 col;\n    col = vec3(0.);\n    col = vec3(0, .518, 0.694);\t\n    \n    float pct;   \n    \n    \n    //\n    //\n    // rain - far layer\n    //\n    //   \n    pct = rainDrop(st - vec2(0.0, 0.5), 54873., 0.2, 1.0 );\n    col = mix(col, vec3(0.851, 0.851, 1.0), pct );\n      \n    \n    //\n    //\n    // create far hill of grass\n    //\n    //\n    \n    \n    pct = ellipse(st + vec2(-.35, 0.05), .55);\n    col = mix(col, vec3(.133, .553, .133), pct); \n       \n    \n    //\n    //\n    // create far river\n    //\n    //\n    \n    float xOffset = 0.68;\n    vec2 tmpSpace;\n    \n    for (int i = 0; i < 7; i++)\n    {\n        tmpSpace = st - vec2(xOffset, 0.5025);\n        tmpSpace *= vec2(3., 3.);    \n        float range = step(-0.05, tmpSpace.x) * tmpSpace.y;\n        range -= step(0.7, tmpSpace.x) * tmpSpace.y;\n        range += step(0.75, tmpSpace.y) * tmpSpace.y;\n        range += step(0.8, tmpSpace.y) * tmpSpace.y;            \n        \n        pct = logisticSigmoid(tmpSpace.x , 0.887);\n        pct = plot(range , pct);\n        \n        col = mix(col, vec3(0, .576, 0.769), pct );\n        \n        xOffset -= 0.01;\n    }    \n    \n    \n    //\n    //\n    // darken things up to this point\n    //\n    //\n    col = mix(col, vec3(0.0), 0.15);\n    \n    \n    //\n    //\n    // draw the near field of grass\n    //\n    //\n    \n    col = mix(col, vec3(.133, .553, .133), rect(st - vec2(0.0, -.45), vec2(-.5, .02)) );        \n        \n    //\n    //\n    // fill the sky of clouds\n    //\n    //\n    \n    float cloudColor = 0.3;\n    float yPos = 0.31;\n    float width = 0.79;\n    float xMod = 0.0;\n    float xModOffset = 0.00;\n    \n    for (int i = 0; i < 6; i++)\n    {\n        for (int j = 0; j < 29; j++)\n        {                   \n            float mov = 0.0;\t\n            \n            vec2 offset = vec2( -0.95 + xMod + mov + xModOffset, yPos );\n            vec2 coords = st * vec2(width, 1.0);\n            \n            col = mix(col, vec3(cloudColor), circle(coords - offset, .005) );\n            col = mix(col, vec3(cloudColor), circle(coords - offset - vec2(0.06, 0.), .005) );\n            col = mix(col, vec3(cloudColor), circle(coords - offset - vec2(-0.06,0.), .005) );   \n\n            xMod += .17;\n        } \n        \n        if (i % 2 == 0)\n        {\n        \txModOffset = 0.023;      \n        }\n        else\n        {\n         \txModOffset = -0.013;   \n        }\n        \n        \n        cloudColor += 0.04;\n        yPos += 0.025;\n        width -= 0.07;\n        \n        xMod = 0.0;  \n    }\n    \n    //\n    //\n    // foliage\n    //\n    // \n    for (int i = 0; i < 5; i++)\t\n    {\n        vec2 unitOffset = \ti == 0 ? vec2(0.52, -0.1) : \n                            i == 1 ? vec2(0.0, -0.25) :\n                            i == 2 ? vec2(-0.5, -0.4) : \n                            i == 3 ? vec2(0.43, -.3) :\n        \t\t\t\t\t\t\t vec2(-0.45, 0.015);\n        \n        float scale = i == 0 ? 0.02 : i == 1 ? 0.025 : i == 2 ? 0.04 : i == 3 ? 0.03 : 0.008;\n\n        vec2 leafOffset = \ti == 0 ? vec2(0.08, 0.0) :\n                            i == 1 ? vec2(0.11, 0.0) :\n                            i == 2 ? vec2(0.12, 0.0) :\n                            i == 3 ? vec2(0.11, 0.0) :\n                            \t\t vec2(0.05, 0.0);\n       \n        \n        col = mix(col, vec3(.10, .485, .105), circle( st - vec2(0.0, 0.01) - unitOffset, scale  ) );\n        col = mix(col, vec3(.10, .485, .105), circle( st - leafOffset - unitOffset, scale  ) );\n        col = mix(col, vec3(.10, .485, .105), circle( st + leafOffset - unitOffset, scale  ) );\n\n\n        col = mix(col, vec3(.66, .0, .0), circle( st - vec2(0.0, 0.01) - unitOffset - vec2(scale / 0.35, 0.0), scale / 18.5 ) );\n        col = mix(col, vec3(.66, .0, .0), circle( st - vec2(0.0, 0.01) - unitOffset - vec2(scale / -0.251, scale / 1.37), scale / 13.5 ) );\n        col = mix(col, vec3(.66, .0, .0), circle( st - vec2(0.0, 0.01) - unitOffset - vec2(scale / 0.275, scale / -.53), scale / 15.5 ) );                \n    }\n    \n    //\n    //\n    // darken everything\n    //\n    //  \n    col = mix(col, vec3(0.0, 0., 0.), 0.475);\n    \n    //\n    //\n    // rain - window layer\n    //\n    //   \n    pct = rainDrop(st - vec2(0.0, 0.5), 68451., 0.2, 5.5 );\n    col = mix(col, vec3(0.851, 0.851, 1.0), pct );    \n      \n    //\n    //\n    // periodic lightning strikes\n    //\n    //   \n     \n    pct = sin( (iTime * PI) / 1.025) * sin( sqrt( iTime * iTime * PI ) * 0.4 );\n    pct = clamp(pct, 0.0, 1.0);\n    \n    col = mix(col, vec3(1.0), pct);\n    \n    \n    //\n    //\n    // the window frame\n    //\n    //\n    \n    vec2 pos = st.yx * vec2(2.8, 8.8);\n    pos = noise(pos - vec2(0., 20.) ) * pos * 1.5;\n    pct = rect(st - vec2(0.0, 0.0), vec2(.48, 0.085) );   \n    col = mix(col, vec3(.545, .271, .075), pct );\n    pct *= lines(pos,0.35);\n    col = mix(col, vec3(.412, .204, .059), pct );\n    \n    \n    pos = st.yx * vec2(7.5, 3.8);\n    pos = noise(pos - vec2(0., 20.) ) * pos * 1.5;\n    pct = rect(st - vec2(0.0, 0.0), vec2(-.30, 0.48) );   \n    col = mix(col, vec3(.545, .271, .075), pct );\n    pct *= lines(pos,0.354);\n    col = mix(col, vec3(.412, .204, .059), pct );\n    \n  \n    pos = st.yx * vec2(4.45, 3.3);\n    pos = noise(pos) * pos;   \n    pct = rect(st - vec2(0.0, 0.46), vec2(-.40, .45) );   \n    col = mix(col, vec3(.545, .271, .075), pct );   \n    pct *= lines(pos,0.8);\n    col = mix(col, vec3(.412, .204, .059), pct );\n       \n    \n    pos = st.yx * vec2(10.2, 5.3);\n    pos = noise(pos - vec2(0., 20.) ) * pos * 1.5;\n    pct = rect(st - vec2(0.0, -0.46), vec2(-.40, .45) );   \n    col = mix(col, vec3(.545, .271, .075), pct );\n    pct *= lines(pos,0.4);\n    col = mix(col, vec3(.412, .204, .059), pct );\n    \n    \n    pos = st.yx * vec2(5.2, 3.5);\n    pos = noise(pos - vec2(0., 20.) ) * pos * 1.5;\n    pct = rect(st - vec2(0.85, 0.0), vec2(.45, 0.) );   \n    col = mix(col, vec3(.545, .271, .075), pct );\n    pct *= lines(pos,0.4);\n    col = mix(col, vec3(.412, .204, .059), pct );\n    \n    \n    pct = rect(st - vec2(-0.85, 0.0), vec2(.45, 0.) );   \n    col = mix(col, vec3(.545, .271, .075), pct );\n    pct *= lines(pos,0.4);\n    col = mix(col, vec3(.412, .204, .059), pct );\n   \n    \n    \n        \n    fragColor = vec4( col ,1.0);\n}","name":"Image","description":"","type":"image"}]}