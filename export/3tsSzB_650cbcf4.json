{"ver":"0.1","info":{"id":"3tsSzB","date":"1563403973","viewed":441,"name":"Fire Extinguisher Spray","username":"GabrieleGiuseppini","description":"Experiments for the fire extinguisher tool coming up with Floating Sandbox.\n\nThe seam at theta=1.0 is due to theta wrapping around not exactly at the texture's edge. In production this would be solved by rescaling the noise texture.\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["proceduralnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323844\n\nmat2 GetRotationMatrix(float angle)\n{\n    mat2 m;\n    m[0][0] = cos(angle); m[0][1] = -sin(angle);\n    m[1][0] = sin(angle); m[1][1] = cos(angle);\n\n    return m;\n}\n\nfloat GetTexture(vec2 uv) // -> (0.0, 1.0)\n{\n    float n = texture(iChannel0, uv).r;\n    //n *= texture(iChannel0, uv * 2.0).r;\n    //n *= texture(iChannel0, uv * 3.0).r;\n    //n *= texture(iChannel0, uv * 4.0).r;\n\n    return n;\n}\n\nfloat GetNoise(vec2 uv) // -> (0.0, 1.0)\n{\n    return texture(iChannel1, uv).r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv -= vec2(0.5); // (x=[-0.5, 0.5], y=[-0.5, 0.5])\n    uv.y /= (iResolution.x / iResolution.y); // obey aspect ratio\n    \n    float paramTime = iTime;\n        \n    ////////////////////////////////////////\n\n    #define SpraySpeed 0.03\n    float sprayTime = paramTime * SpraySpeed;\n\n    \n    \n    //\n    // Rotate based on noise sampled via polar coordinates of uv\n    //\n    \n    // (r, a) (r=[0.0, 1.0], a=[0.0, 1.0 CCW from W])\n    vec2 angleNoiseRa = vec2(\n        length(uv) / sqrt(0.5), \n        (atan(uv.y, uv.x) / (2.0 * PI) + 0.5));\n    \n    #define AngleNoiseResolution 0.1\n    float angle = GetNoise(\n        angleNoiseRa * vec2(AngleNoiseResolution, AngleNoiseResolution) \n        + vec2(-0.5*sprayTime, 0.2*sprayTime));\n        \n    // Magnify rotation amount based on distance from center of screen\n    angle *= 1.54 * smoothstep(0.0, 0.6, angleNoiseRa.x);\n    \n    // Rotate!\n    uv += GetRotationMatrix(angle) * uv;\n    \n    \n    \n    //\n    // Transform to polar coordinates\n    //\n    \n    // (r, a) (r=[0.0, 1.0], a=[0.0, 1.0 CCW from W])\n        \n    vec2 ra = vec2(\n        length(uv) / sqrt(0.5), \n        (atan(uv.y, uv.x) / (2.0 * PI) + 0.5));\n        \n    // Scale radius to better fit in quad\n    ra.x *= 1.7;                   \n\n    \n    //\n    // Randomize radius based on noise and radius\n    //\n    \n    #define VariationRNoiseResolution 0.2\n    float variationR = GetNoise(\n        ra * vec2(VariationRNoiseResolution / 4.0, VariationRNoiseResolution / 1.0) \n        + vec2(-sprayTime, 0.0));\n    \n    variationR -= 0.5;\n\n    // Straighten the spray at the center and make full turbulence outside,\n    // scaling it at the same time\n    variationR *= 0.35 * smoothstep(-0.40, 0.4, ra.x);\n    \n    // Randomize!\n    vec2 ra2 = vec2(ra.x + variationR, ra.y);\n   \n    \n    //\n    // Render\n    //\n    \n    // Focus (compress dynamics)\n    float alpha = 1.0 - smoothstep(0.2, 1.4, ra2.x);\n    \n    // Apply texture\n    #define TextureResolution 0.4\n    float mappedR = pow(ra.x, 1.46);  \n    //alpha *= GetTexture(vec2(mappedR, ra.y) * vec2(TextureResolution / 1.0, TextureResolution * 3.0) + vec2(-sprayTime * 7.1, 0.0));\n    \n    fragColor = vec4(vec3(alpha).xyz, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}