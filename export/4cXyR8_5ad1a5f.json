{"ver":"0.1","info":{"id":"4cXyR8","date":"1720731729","viewed":31,"name":"Wormholes","username":"dereckd","description":"crazy","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["crazy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RAY_STEPS 200\n#define BRIGHTNESS 1.4\n#define GAMMA 1.2\n#define SATURATION 1.2\n\n#define PI 3.14159265359\n\nfloat t;\n\n// Rotation matrix\nmat2 rot(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));    \n}\n\n// Smooth min function for soft blending\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n// Crazy new distance function\nfloat de(vec3 p) {\n    // Squish and stretch the space\n    p.xz *= rot(p.y * 0.1 + t * 0.2);\n    p.xy *= rot(p.z * 0.1 - t * 0.3);\n    \n    // Create a base landscape with sine waves\n    float landscape = sin(p.x * 0.5) * cos(p.z * 0.5) * 0.5;\n    \n    // Add some spheres that move and change size\n    vec3 spherePos = vec3(sin(t) * 3.0, cos(t * 0.7) * 2.0, sin(t * 1.1) * 3.0);\n    float sphere = length(p - spherePos) - (1.0 + sin(t * 2.0) * 0.5);\n    \n    // Add a twisting torus\n    vec3 torusPos = vec3(cos(t * 0.8) * 4.0, sin(t * 0.5) * 2.0, 0.0);\n    p -= torusPos;\n    p.xz *= rot(p.y * 0.2 + t);\n    vec2 q = vec2(length(p.xz) - 3.0, p.y);\n    float torus = length(q) - 0.5;\n    \n    // Combine everything with smooth blending\n    float d = smin(landscape, sphere, 1.0);\n    d = smin(d, torus, 1.0);\n    \n    // Add some small-scale bumpiness\n    d += sin(p.x * 10.0 + t) * sin(p.y * 10.0 + t) * sin(p.z * 10.0 + t) * 0.1;\n    \n    return d * 0.7; // Scale down to make the shape more visible\n}\n\n// Weird normal function for trippy lighting\nvec3 normal(vec3 p) {\n    vec2 e = vec2(0.01, 0.0);\n    return normalize(vec3(\n        de(p + e.xyy) - de(p - e.xyy),\n        de(p + e.yxy) - de(p - e.yxy),\n        de(p + e.yyx) - de(p - e.yyx)\n    ));\n}\n\n// Psychedelic color function\nvec3 getColor(vec3 p, vec3 n) {\n    vec3 col = 0.5 + 0.5 * sin(p * 0.5 + vec3(0, 2, 4) + t);\n    col *= 0.5 + 0.5 * sin(n * 2.0 + vec3(1, 3, 5) - t * 0.5);\n    return col;\n}\n\nvec3 raymarch(vec3 ro, vec3 rd) {\n    float tot_dist = 0.0;\n    vec3 col = vec3(0.0);\n    float glow = 0.0;\n    \n    for(int i = 0; i < RAY_STEPS; i++) {\n        vec3 p = ro + tot_dist * rd;\n        float dist = de(p);\n        \n        if(dist < 0.001 || tot_dist > 20.0) break;\n        \n        tot_dist += dist;\n        glow += 0.1 / (1.0 + dist * dist * 20.0); // Adjust glow based on distance\n    }\n    \n    if(tot_dist < 20.0) {\n        vec3 p = ro + tot_dist * rd;\n        vec3 n = normal(p);\n        col = getColor(p, n);\n        \n        // Add a fresnel-like effect\n        float fres = pow(1.0 - max(0.0, dot(n, -rd)), 4.0);\n        col += fres * vec3(1.0, 0.5, 0.2);\n    }\n    \n    // Add glow\n    col += glow * vec3(0.2, 0.5, 0.7);\n    \n    // Fog\n    col = mix(col, vec3(0.1, 0.2, 0.3), 1.0 - exp(-0.05 * tot_dist));\n    \n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    t = iTime * 0.5;\n    \n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Create a weird camera path\n    vec3 ro = vec3(sin(t * 0.5) * 5.0, cos(t * 0.3) * 3.0, t);\n    vec3 ta = vec3(sin(t * 0.7) * 3.0, cos(t * 0.6) * 2.0, ro.z + 1.0);\n    \n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, vec3(0.0, 1.0, 0.0)));\n    vec3 cv = normalize(cross(cu, cw));\n    vec3 rd = normalize(uv.x * cu + uv.y * cv + cw);\n    \n    vec3 col = raymarch(ro, rd);\n    \n    // Post-processing\n    col = pow(col, vec3(GAMMA));\n    col *= BRIGHTNESS;\n    col = mix(vec3(dot(col, vec3(0.299, 0.587, 0.114))), col, SATURATION);\n    \n    // Add some color aberration\n    vec2 uv2 = uv * (1.0 + sin(length(uv) * 10.0 - t) * 0.05);\n    fragColor = vec4(col.r, raymarch(ro, normalize(uv2.x * cu + uv2.y * cv + cw)).g, col.b, 1.0);\n}","name":"Image","description":"","type":"image"}]}