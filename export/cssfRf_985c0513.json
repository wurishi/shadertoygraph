{"ver":"0.1","info":{"id":"cssfRf","date":"1689012336","viewed":124,"name":"shockwave VFX","username":"egguman","description":"something I decided to make. Im not good at programming or anything I just thought this would be cool","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple","sphere","vfx","shockwave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float thickness;\nfloat radius;\nvec2 propUv;\nvec2 center;\n\nfloat radiusInDirection(out float r) {\n    if (propUv.x < center.x) {\n       r = radius - (sin(radius)/5.75);\n    } else {\n       r = (radius * -1.) + (sin(radius)/5.75);\n    }\n    \n    return r;\n}\n\nfloat radiusInDirectionY(out float r) {\n    if (propUv.y > center.y) {\n        //is lower\n        r = radius + cos(radius);\n    } else {\n        r = (radius) - cos(radius);\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv2 = uv;\n    center = vec2(0.085, 0.20);\n    radius = 0.05;\n    //radius = sin(iTime)/ 150. + 0.045;\n    \n    \n    radius = (sin(iTime)/2.);\n    \n    if (sin(iTime)/2. > sin(iTime - 0.01)/2.) {\n        thickness = max(0.,(min(0.045/radius, 1.))/25. - 0.01);\n    }\n    \n\n\n    propUv = vec2(uv.x / 5.75, uv.y);\n  \n    float r = 0.;\n    if (distance(propUv, center) > radius - thickness && distance(propUv, center) < radius + thickness) {\n        if (propUv.y > center.y) {\n        uv.y  += distance(propUv, vec2(center.x + radiusInDirection(r), center.y + radiusInDirectionY(r)));\n        } else {\n        uv.y  -= distance(propUv, vec2(center.x + radiusInDirection(r), center.y + radiusInDirectionY(r)));\n        }\n        //uv.y /= (center.y + (radius)) - center.y;\n    }\n\n\n\n    vec3 col = texture(iChannel0, uv).rgb;\n    float general = distance((uv.x + uv.y)/2., (uv2.x + uv2.y)/2.)/5.;\n    col += vec3(general);\n    //col = vec3(distance(uv.x, uv2.x), 0.0, distance(uv.y, uv2.y))*5.;\n    \n      \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}