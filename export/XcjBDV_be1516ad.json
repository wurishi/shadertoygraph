{"ver":"0.1","info":{"id":"XcjBDV","date":"1725530124","viewed":52,"name":"RGB Fractal Brownian Motion","username":"rikr","description":"Forked to add colors to my fbm shader (CC0). Made by Rik Riesmeijer, 2024 - No rights reserved.","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["fractal","noise","fbm","rgb","brownian","monochrome","motion","cc0","copyrightfree"],"hasliked":0,"parentid":"XfjBWV","parentname":"Fractal Brownian Motion By RikR"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// RGB Fractal Brownian Motion, Made By Rik Riesmeijer, 2024 - CC0 / Copyright free.\n// See my other noises and shaders for my weird rotation formula...\nfloat n(vec2 v){ uvec2 u=uvec2(v*3e4+v.y+1e9); return vec2(u.yx*=u^=u*u).x/43e8; }\nuvec4 m(uvec4 a) { return a * a.yzwx ^ a; }\nvec4 h(vec2 v) { return vec4(m(m(uvec4(v + v + 2e4, v + v + 3e7)))) / vec4(-1u); }\nfloat w(float x) { return fract(x) * fract(-x) * sign(fract(x * 0.5) - 0.5); }\nfloat s(float x) { return 4.0 * w(x / 3.1415); }\nfloat c(float x) { return s(x - 1.5775); }\nvec2  r(vec2 v, float a) { return vec2(c(a)*v.x-s(a)*v.y, s(a)*v.x+c(a)*v.y); }\nvec4 fbm(vec2 v, float time) {\n    float value = 0.0, scale = 2.0, atten = 0.5, t = 0.0;\n    vec4 res = vec4(0.0);\n    for(int i = 0; i++ < 6; scale += scale) {\n        v = r(v, 0.4 + time);\n        vec4 b = vec4(floor(v * scale), ceil(v * scale));\n        vec2 f = smoothstep(0.0, 1.0, fract(v * scale));\n        vec4 m = mix(mix(h(b.xy), h(b.zy), f.x),\n                      mix(h(b.xw), h(b.zw), f.x), f.y);\n        res += (atten *= 0.5) * m / (t += atten + atten);\n    }\n    return res;\n}\n\nvoid mainImage(out vec4 c, vec2 v) { // Demo of the FBM RGB shown.\n    v = v / iResolution.xy - 0.5;    // Rotation ideally is centered around origin.\n    v = v * iResolution.y / 1e2;     // Normalize the aspect ratio.\n    c = fbm(v, iTime * 0.1);         // Show color.\n}                                    // End of demo.","name":"Image","description":"","type":"image"}]}