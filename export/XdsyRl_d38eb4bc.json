{"ver":"0.1","info":{"id":"XdsyRl","date":"1489516325","viewed":378,"name":"Context aware fill i guess","username":"jaap_null","description":"Simply normalizes weighed neighbour pixels to alpha =1 ","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["aweirdthingthatfillstransparentpixelswithgoodness"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nint r = 320;\nfloat radians_per_sample = 2.3999632;\nfloat radius_per_sample = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    \n  \n    vec4 accum = vec4(0,0,0,0);\n    for (int s = 0; s < r; s++)\n    {    \n\t    vec2 spiral = vec2(sin(float(s)*radians_per_sample), cos(float(s)*radians_per_sample));\n        float dist = sqrt(radius_per_sample * float(s));\n        float max_dist = sqrt(radius_per_sample * radius_per_sample);\n        spiral *= dist;\n\t\tvec2 uv =( fragCoord.xy +spiral) / iResolution.xy;\t\n        vec4 sampled_pixel = texture(iChannel0,uv);\n        sampled_pixel.rgb *= sampled_pixel.a;\n        accum += sampled_pixel * (1.0 / (1.0 + dist));\n        if (accum.a >= 1.0) break;       \n    }\n\n    \n    \n    \n    vec2 uv =( fragCoord.xy) / iResolution.xy;\t\n    vec4 direct_read = texture(iChannel0,uv);\n    \n\tfragColor = accum.rgba / (accum.a == 0.0 ? 0.0001 : accum.a);        \n    //fragColor = direct_read.rgba;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float th = 8.0; // threshold\nfloat a2 = 1.2;\nfloat spill = 1.0;\n\nfloat getAlpha(vec4 c){\n\t// First Vlahos assumption: Gf <= a2Bf\t\n\treturn 1.0 - th*(c.g-a2*(max(c.r,c.b)));\n\t}\n\nvec4 despill(vec4 c){\n\t/// Second Vlahos assumption: max (Gf - Bf,0) <= max(Bf - Rf, 0)\n\tfloat sub = max(c.g - mix(c.b, c.r, 0.45), 0.0);\n\tc.g -= sub;\n\t\n\t/// \n\tc.a -= smoothstep(0.25, 0.5, sub*c.a);\n\t\n\t//restore luminance (kind of, I slightly reduced the green weight)\n\tfloat luma = dot(c.rgb, vec3(0.350, 0.587,0.164));\n\tc.r += sub*c.r*2.0*.350/luma;\n\tc.g += sub*c.g*2.0*.587/luma;\n\tc.b += sub*c.b*2.0*.164/luma;\n\n\treturn c;\n\t}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec4 fg = texture(iChannel0,uv);\n\tfg.a = clamp(getAlpha(fg), 0.0, 1.0);\n\tfg = despill(fg);\n\t\n\tfragColor.rgb = fg.rgb*fg.a;\n    fragColor.a = fg.a;\n}","name":"Buf A","description":"","type":"buffer"}]}