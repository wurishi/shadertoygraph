{"ver":"0.1","info":{"id":"4Xj3zh","date":"1708200316","viewed":47,"name":"Swirling Television Static","username":"Shin0155","description":"Swirling Television Static","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["swirlingtelevisionstatic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Hash function to generate random values\nfloat hash(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// Noise function to create static-like texture\nfloat noise(vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = fract(uv);\n    vec2 u = f * f * (3.0 - 2.0 * f); // Smoothstep\n    return mix(mix(hash(i + vec2(0.0, 0.0)), hash(i + vec2(1.0, 0.0)), u.x),\n               mix(hash(i + vec2(0.0, 1.0)), hash(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Time-based animation for static effect\n    float staticIntensity = sin(iTime) * 0.5 + 0.5; // Adjust the multiplier for static intensity\n    \n    // Apply static noise to the UV coordinates\n    vec2 staticUV = uv + vec2(noise(uv + iTime), noise(uv - iTime)) * staticIntensity;\n    \n    // Sample the texture with the static UV coordinates\n    vec3 color = texture(iChannel0, staticUV).rgb;\n    \n    // Output the final color with a slight desaturation to mimic the look of static\n    fragColor = vec4(mix(color, vec3(dot(color, vec3(0.2126, 0.7152, 0.0722))), 0.5), 1.0);\n}","name":"Image","description":"","type":"image"}]}