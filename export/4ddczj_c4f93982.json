{"ver":"0.1","info":{"id":"4ddczj","date":"1519571724","viewed":76,"name":"first experiment","username":"psy_fidelious","description":"My first test on shadertoy","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["helloworld"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvec3 fragToViewRay(in vec2 fragCoord)\n{\n    float aspect = iResolution.x / iResolution.y;\n\tvec3 cameraDims = vec3(aspect, 1.0, 1.0);\n\tvec2 clipCoord = fragCoord/iResolution.xy * 2.0 - vec2(1.0);\n\t\n    return normalize(vec3(clipCoord * cameraDims.xy, cameraDims.z));\n}\n\n\nbool collideAgainstSphere(in vec3 viewRay, out vec3 normal)\n{\n\tvec4 sphereLocRad = vec4(2.0 * cos(iTime), -0.4, 12.0, 7.0);\n\tconst vec3 cameraLoc = vec3(0.0, 0.0, 0.0);\n\n    vec3 camToSphere = sphereLocRad.xyz - cameraLoc;\n    vec3 camToProj = viewRay * dot(viewRay, camToSphere);\n    vec3 sphereToProj = camToProj - camToSphere;\n    float lSphereToProj = length(sphereToProj);\n    bool bCollided = lSphereToProj < sphereLocRad.w;\n    if (bCollided)\n    {\n        float l = sqrt(sphereLocRad.w * sphereLocRad.w - lSphereToProj * lSphereToProj);\n\n        // not always correct, if we are within the sphere, we should take the positive root instead\n        vec3 collision = camToProj - l * viewRay;\n\n        normal = normalize(collision - camToSphere);\n    }\n    else\n    {\n        normal = vec3(0.0);\n    }\n    return bCollided;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 lightDir = normalize(vec3(1.0, 1.0, -1.0));\n    vec3 viewRay = fragToViewRay(fragCoord);\n    vec3 normal;\n    bool collided = collideAgainstSphere(viewRay, normal);\n    fragColor = (collided) ? vec4(vec3(dot(normal, lightDir)), 1.0) : vec4(0.0,0.0,0.0,1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}