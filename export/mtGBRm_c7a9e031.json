{"ver":"0.1","info":{"id":"mtGBRm","date":"1702707837","viewed":25,"name":"CSE 167 Project 5 Zhirui Xia","username":"raymond","description":"Project 5 by Zhirui Xia","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["graphics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PREDATOR_INFLUENCE_RADIUS = 150.0;\nconst float PREDATOR_REPULSION_STRENGTH = 200.0;\n\nvec2 calculatePredatorRepulsion(vec2 boidPosition, vec2 predatorPosition) {\n    vec2 repulsionVec = boidPosition - predatorPosition;\n    float distance = length(repulsionVec);\n    \n    if (distance < PREDATOR_INFLUENCE_RADIUS && distance > 0.0) {\n        return normalize(repulsionVec) * PREDATOR_REPULSION_STRENGTH / distance;\n    } else {\n        return vec2(0.0);\n    }\n}\n\nvec2 calculatePredatorPosition(float time) {\n    float radius = 100.0;\n    float angle = mod(time, 2.0 * 3.14159);\n    float predatorX = iResolution.x / 2.0 + sin(angle) * radius;\n    float predatorY = iResolution.y / 2.0 + cos(angle) * radius;\n    return vec2(predatorX, predatorY);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n\n    // Implement Boids here\n    float s_max = 10.0;\n    float s_min = 5.0;\n    float ds = 30.0;\n    float dv = 150.0;\n    float as = 0.02;\n    float aa = 0.03;\n    float ac = 0.001;\n    float ab = 0.5;\n    \n    float d_left = 200.0;\n    float d_right = iResolution.x - 200.0;\n    float d_top = 160.0;\n    float d_bottom = iResolution.y - 160.0;\n    \n    vec2 Fs = vec2(0,0);\n    vec2 Fc = vec2(0,0);\n    vec2 Fa = vec2(0,0);\n    vec2 boundary_F = vec2(0,0);\n    int closeBoidsCount;\n    int visibleCount;\n    for (int i = 0; i < NUM_BOIDS; i++){\n        ivec2 texture_pos = ivec2(i % int(iChannelResolution[0].x), i / int(iChannelResolution[0].x));\n        vec2 pos_val = texelFetch(iChannel0, texture_pos, 0).xy;\n        vec2 p_neighbor = pos_vel.xy;\n        vec2 v_neighbor = pos_vel.zw;\n        if (distance(pos, p_neighbor) < ds) {\n            Fs += pos.xy - p_neighbor;\n            closeBoidsCount++;\n        }\n        if (distance(pos, p_neighbor) < dv) {\n            Fs += p_neighbor - pos;\n            Fa += v_neighbor - vel;\n            visibleCount++;\n        }\n        \n    }\n    if (pos.x < d_left) boundary_F.x += 1.0;\n    if (pos.x > d_right) boundary_F.x -= 1.0;\n    if (pos.y < d_top) boundary_F.y += 1.0;\n    if (pos.y > d_bottom) boundary_F.y -= 1.0;\n    \n    Fs = Fs/float(closeBoidsCount);\n    Fc = Fc/float(visibleCount);\n    Fa = Fa/float(visibleCount);\n    \n    vec2 predatorPosition = calculatePredatorPosition(iTime);\n    \n    vec2 predatorRepulsion = calculatePredatorRepulsion(pos, predatorPosition);\n    \n    vec2 F = as*Fs + aa*Fa + ac*Fc + ab*boundary_F + predatorRepulsion;\n    vel += F;\n \n    float speed = length(vel);\n    if (speed > 0.0){\n        if (speed > s_max) vel = normalize(vel) * s_max / speed;\n        else if (speed < s_min) vel = normalize(vel) * s_min / speed;\n    }\n    pos += vel;\n    \n    if (iMouse.z > 0.0) { \n        vec2 mousePos3D = vec2(iMouse.xy);\n        vec2 toMouse = mousePos3D - pos;\n        float distToMouse = length(toMouse);\n        vec2 mouseForce = normalize(toMouse) * (200.0 / distToMouse); \n        vel += mouseForce;\n    }\n    \n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n","name":"Common","description":"","type":"common"}]}