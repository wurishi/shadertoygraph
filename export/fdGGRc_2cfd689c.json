{"ver":"0.1","info":{"id":"fdGGRc","date":"1631825959","viewed":42,"name":"StepFunc","username":"Dave_Green","description":"Play with Step function.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["step"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy - 0.5 * iResolution.xy;\n    uv = 2.0 * uv.xy / iResolution.y;\n    \n    float aspectRatio = iResolution.x / iResolution.y;\n    vec3 bgCol = vec3(0.0);\n    vec3 col1 = vec3(0.216, 0.471, 0.698); // blue\n\tvec3 col2 = vec3(1.00, 0.329, 0.298); // yellow\n\tvec3 col3 = vec3(0.867, 0.910, 0.247); // red\n    vec3 finalPixCol = bgCol;\n    float alpha = 1.0;\n    float edge, variable, returnVal;\n    \n    // Divide the screen horizontally into 5 sections\n    if(uv.x < -0.6 * aspectRatio)\n    {\n        variable = uv.y;\n        edge = 0.2;\n        \n        // STEP AS AN IF STATEMENT\n        if(variable > edge)\n        {\n            returnVal = 1.0;\n        }\n        else\n        {\n            returnVal = 0.0;\n        }\n    }\n    else if(uv.x < -0.2 * aspectRatio)\n    {\n        variable = uv.y;\n        edge = -0.2;\n        \n        returnVal = step(edge, variable); // EQUIVALENT AS ABOVE IF STATEMENT\n    }\n    else if(uv.x < 0.2 * aspectRatio)\n    {        \n        // \"step\" returns either 0.0 or 1.0.\n\t\t// \"1.0 - step\" will inverse the output\n        returnVal = 1.0 - step(0.4, uv.y); // EQUIVALENT AS ABOVE IF STATEMENT\n    }\n    else if(uv.x < 0.6 * aspectRatio)\n    {        \n        // if y-coordinate is smaller than -0.4 ret is 0.3\n\t\t// if y-coordinate is greater than -0.4 ret is 0.3+0.5=0.8\n\t\treturnVal = 0.3 + 0.5 * (1.0 - step(-0.4, uv.y));\n    }\n    else\n    {\n        // Combine two step functions to create a gap\n\t\treturnVal = step(-0.3, uv.y) * (1.0 - step(0.2, uv.y));\n\t\t// \"1.0 - ret\" will create a gap\n    }\n    \n    \n    finalPixCol = vec3(returnVal);\n    \n\n    // Output to screen\n    fragColor = vec4(finalPixCol, alpha);\n}","name":"Image","description":"","type":"image"}]}