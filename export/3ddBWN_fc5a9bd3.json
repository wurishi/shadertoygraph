{"ver":"0.1","info":{"id":"3ddBWN","date":"1605297381","viewed":140,"name":"Simple fractal raymarching","username":"Defernus","description":"Simple fractal raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\nstruct FractalData {\n    float dist;\n    float factor;\n    vec3 color;\n};\n\n// distance estimator from http://celarek.at/wp/wp-content/uploads/2014/05/realTimeFractalsReport.pdf\nFractalData getMandelbulb( vec3 pos, float Power ) {\n    vec3 z = pos;\n    float dr = 1.;\n    float r = 0.;\n    int i = 0;\n    for(; i != MAX_FRACTAL_ITERATIONS; ++i) {\n        r = length(z);\n        if(r > 2.) break;\n        float theta = acos(z.z/r);\n        float phi = atan(z.y, z.x );\n        dr = pow(r, Power - 1.) * Power * dr + 1.;\n        float zr = pow(r, Power);\n        theta = theta * Power;\n        phi = phi * Power;\n        z = zr * vec3(\n            sin(theta)*cos(phi),\n            sin(phi)*sin(theta),\n            cos(theta)\n        );\n        z += pos;\n    }\n    return FractalData(\n        .5*log(r)*r / dr,\n        float(i)/float(MAX_FRACTAL_ITERATIONS),\n    \tnormalize(z)*.5+.5\n    );\n}\n\nvec3 getColor(vec2 uv, Camera cam) {\n    vec3 dir = normalize(cam.front + uv.x * cam.right + uv.y * cam.top);\n    float rayLength = 0.;\n    \n    vec3 color = BACKGROUND_COLOR;\n    \n    for(int i = 0; i != MAX_RENDER_ITERATIONS && rayLength < MAX_DISTANCE; ++i) {\n        vec3 point = cam.pos + dir * rayLength;\n        FractalData data = getMandelbulb(point, sin(iTime/10.)+4.);\n        \n        if(data.dist < EPSILON) {\n            FractalData data = getMandelbulb(point, sin(iTime/10.)+4.);\n            float factor = 1. - data.factor;\n            color = vec3(pow(factor, 11.))* data.color;\n            break;\n        }\n        rayLength += data.dist;\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = ((fragCoord - iResolution.xy/2.)/iResolution.xx * 2.);\n    vec2 mouse = ((iMouse.xy - iResolution.xy/2.)/iResolution.xx * PI * 2. )*vec2(1., -1.);\n    \n    vec3 camPos = rotate(vec3(0., 0., sin(iTime/10.)+2.), vec3(1., 0., 0.), -iTime/100.);\n    camPos = rotate(camPos, vec3(0., 1., 0.), iTime/77.);\n    \n    Camera cam = getNewCamera(\n        camPos,\n        vec3(0.),\n        rotate(vec3(0., 1., 0.), vec3(1., 1., 1.), iTime/10.)\n    );\n    vec3 color = getColor(uv, cam);\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"precision highp float;\n\nconst float PI = 3.14159265;\nconst float MAX_DISTANCE = 100.;\nconst int MAX_RENDER_ITERATIONS = 1000;\nconst int MAX_FRACTAL_ITERATIONS = 500;\nconst float EPSILON = 0.001;\nconst float DISTANCE_FACTOR = 1.;//for fractals\nconst vec3 BACKGROUND_COLOR = vec3(0., 0.7, 1.);\nconst vec3 lightDir = normalize(vec3(0.7, 0.9, -1.));\n\n/** utils **/\n\nvec4 mult(vec4 q1, vec4 q2) { \n  return vec4 (\n  \t(q1.w * q2.x) + (q1.x * q2.w) + (q1.y * q2.z) - (q1.z * q2.y),\n  \t(q1.w * q2.y) - (q1.x * q2.z) + (q1.y * q2.w) + (q1.z * q2.x),\n    (q1.w * q2.z) + (q1.x * q2.y) - (q1.y * q2.x) + (q1.z * q2.w),\n    (q1.w * q2.w) - (q1.x * q2.x) - (q1.y * q2.y) - (q1.z * q2.z)\n  );\n}\n\nvec3 rotate(vec3 point, vec3 axe, float angle) {\n    float sinA = sin(angle/2.0);\n    float cosA = cos(angle/2.0);\n    return mult(\n        mult(\n        \tvec4(sinA * axe, cosA),\n    \t\tvec4(point.xyz, 0.)\n    \t),\n        vec4(-sinA * axe, cosA)\n    ).xyz;\n}\n\n/** ===== **/\n\n\n/** camera data **/\n\nstruct Camera {\n    vec3 pos;\n    vec3 top;\n    vec3 right;\n    vec3 front;\n};\n\nCamera getNewCamera(vec3 pos, vec3 lookAt, vec3 top) {\n    vec3 front = normalize(lookAt - pos);\n    vec3 right = normalize(cross(front, top));\n    return Camera(\n        pos,\n        normalize(cross(right, front)),\n        right,\n        front\n    );\n}\n\n/** =========== **/\n","name":"Common","description":"","type":"common"}]}