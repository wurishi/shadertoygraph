{"ver":"0.1","info":{"id":"dtS3DK","date":"1673990787","viewed":169,"name":"Flow Field #5","username":"larserik","description":"Nicer coloring of the particles\nDecrease #MAX_STARS in Common for better performance","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["buffer","flowfield"],"hasliked":0,"parentid":"mlB3zt","parentname":"Flow Field #1"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 col = texture(iChannel0, fragCoord/iResolution.xy);    \n    \n    fragColor = col;\n\n    // Debug view of encoded star positions\n    //fragColor = texture(iChannel0, vec2(fragCoord.x / 10. / iResolution.x, 0));\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec4 col = vec4(0);\n    float res = iResolution.y / iResolution.x;\n    if (iFrame < 1) {\n        // Generate stars\n        if (int(fragCoord.x) < MAX_STARS && int(fragCoord.y) == 0) {\n            fragCoord += iTime*1.;\n            float x = (rnd21(fragCoord+10.)*2.-1.)/res;\n            float y = rnd21(fragCoord+x+15.)*2.-1.;\n            vec2 pos = vec2(x, y)*.5;\n            col = encodeVec2(pos);\n        }\n    } else {\n        // Move stars, then wrap to right when off edge\n        if (int(fragCoord.x) < MAX_STARS && int(fragCoord.y) == 0) {\n            col = texelFetch(iChannel0, ivec2(fragCoord.x, 0), 0);\n            vec2 pos = decodeVec4(col);\n        \n            float n = fbm(vec3(pos/2.5, iTime*SPEED), OCTAVES)+.5;\n            float a = TAU * n;\n            vec2 d = vec2((cos(a)), (sin(a)))*SCALE_DIST;\n        \n            pos += d;\n            if (pos.x < -.5/res || pos.x > .5/res || pos.y < -.5 || pos.y > .5) {\n                float x = (rnd21(fragCoord+10.)*2.-1.)/res;\n                float y = rnd21(fragCoord+x+15.)*2.-1.;\n                pos = vec2(x, y)*.5;\n            }\n            \n            col = encodeVec2(pos);\n        }\n    }\n    fragColor = col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define MAX_STARS 250\n#define TAU 6.28318\n#define SPEED .05\n#define SCALE_DIST .004\n#define OCTAVES 4\n#define FALLOFF .96\n\n// Encoding\n\nvec4 encodeVec2(vec2 pos) {\n    return vec4(pos, 0, 0);\n}\n\nvec2 decodeVec4(vec4 col) {\n    return col.xy;\n}\n\n// Random\n\nfloat rnd21(vec2 p) {\n    return fract(sin(dot(p, vec2(137.37, 387.531)))*57843.761);\n}\n\n// Noise\n\n// Noise from https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n//\tSimplex 3D Noise by Ian McEwan, Ashima Arts\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nfloat fbm (in vec3 st, int octaves) {\n    float value = 0.0;\n    float amplitude = 1.;\n    float total = 0.;\n\n    for (int i = 0; i < octaves; i++) {\n        total += amplitude;\n        value += amplitude * snoise(st);\n        st *= 2.;\n        amplitude *= 0.5;\n    }\n\n    return value / total;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec4 orig = texture(iChannel1, fragCoord/iResolution.xy);\n    vec4 col = orig * FALLOFF;    \n\n    vec4 blue = vec4(0.06, 0.07, .18, 1.);\n    vec4 red = vec4(.65, .46, .12, 1.);\n\n    float near = 0.;\n    for(float i = 0.; i<float(MAX_STARS); i++) {\n        // Decode stars\n        vec4 vec2AsCol = texture(iChannel0, vec2(i / iResolution.x, 0));\n        vec2 pos = decodeVec4(vec2AsCol);\n\n        // Draw stars\n        float trigger = smoothstep(.10, .001, distance(uv, pos));\n        if (trigger > 0.) {\n            near++;\n        }\n\n        float share = min(near / 20., 1.0);\n        vec4 hue = mix(blue, red, share * .4);\n\n        vec4 cur = pow(trigger * hue, vec4(mix(2.2, 3., pow(share, 0.75))));\n        col += cur;\n\n        //col = mix(col, vec4(.95, .46, .12, .75), (col.a*.00005*(sin(iTime)*.5+.5)));\n        //col = max(col, vec3(1.-pow(distance(uv, pos), .25)));\n        //col = max(col, pow((.125-length(pos-uv))/.125, 1.9)); \n    }\n    \n    \n    \n    fragColor = col;\n\n    // Debug view of encoded star positions\n    //fragColor = texture(iChannel0, vec2(fragCoord.x / 10. / iResolution.x, 0));\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}