{"ver":"0.1","info":{"id":"X3lcWf","date":"1726738297","viewed":36,"name":"twinkling stars","username":"rishin","description":"simple star field using cellular noise","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["star"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float CELL_SIZE = 30.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 pt = fragCoord.xy;\n    vec2 cell = floor(pt / CELL_SIZE);\n    \n    float min_dist = CELL_SIZE * 2.;\n    vec2 min_star = vec2(0., 0.);\n    \n    // find closest cell\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            vec2 neighbor = cell + vec2(float(i), float(j));\n            vec2 star = (neighbor + random2(vec2_hash(neighbor))) * CELL_SIZE;\n            \n            float dist = length(star - pt);\n            if (min_dist > dist) {\n                min_dist = dist;\n                min_star = star;\n            }\n        }\n    }\n    \n    float r = random(vec2_hash(min_star));\n    float r2 = random(r);\n    \n    float color = 1. - min_dist / CELL_SIZE * 2.; // invert cellular noise\n    color -= r * 0.25; // random brightness\n    color *= smoothstep(0.85, 0.9, color); // threshold to small circle\n    color += 0.1 * sin(iTime + 500. * r2); // twinkle\n    color *= step(0.15, color); // twinkle only affects stars\n    color = pow(color, 6.); // dim\n    \n    fragColor = vec4(vec3(color), 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float circle( vec2 pos, vec2 center, float radius ) {\n    return 1.0 - smoothstep(radius * 0.99, radius * 1.01, length(pos - center));\n}\n\nfloat random( float x ) {\n    return fract(fract(98. * sin(x * 15.45)) + fract(209.238 * cos(x * 52.108)));\n}\n\nvec2 random2( float x ) {\n    return vec2(random(x), random(x + 1.3991));\n}\n\nvec3 random3( float x ) {\n    return vec3(random(x), random(x + 1.3991), random(x + 4.2984));\n}\n\nfloat vec2_hash( vec2 xy ) {\n    return dot(xy, vec2(3.1445, 12.5984));\n}\n\nfloat vec3_hash( vec3 xyz ) {\n    return dot(xyz, vec3(12.4592, 65.7355, 9.51));\n}","name":"Common","description":"","type":"common"}]}