{"ver":"0.1","info":{"id":"MXGGWm","date":"1717710932","viewed":31,"name":"Torus ray marching spin","username":"orange389","description":"Torus spinning rendered with ray marching. Added gamma correction and corrected typo (thnx to spalmer and 01000001)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void taurus(out vec3 center, out vec3 rotAxis,out float inRadius,out float outRadius) {\n    center = vec3(2.0 * cos(iTime * 0.25), 0, 5);\n    rotAxis = vec3(cos(iTime), 0, sin(iTime));\n    rotAxis = rotAxis / length(rotAxis);\n    inRadius = 1.0;\n    outRadius = 0.25;\n}\n\nfloat taurusSDF(in vec3 pos) {\n    vec3 center;\n    vec3 rotAxis;\n    float inRadius;\n    float outRadius;\n    taurus(center, rotAxis, inRadius, outRadius);\n    vec3 diff = pos - center;\n    diff = diff - dot(diff, rotAxis) * rotAxis;\n    diff = inRadius * diff / length(diff) + center;\n    return length(pos - diff) - outRadius;\n}\n\nvec3 taurusNormal(in vec3 pos) {\n    vec3 center;\n    vec3 rotAxis;\n    float inRadius;\n    float outRadius;\n    taurus(center, rotAxis, inRadius, outRadius);\n    vec3 diff = pos - center;\n    diff = diff - dot(diff, rotAxis) * rotAxis;\n    diff = inRadius * diff / length(diff);\n    vec3 normal = pos - diff - center;\n    return normal / length(normal);\n}\n\nfloat wallSDF(in vec3 pos) {\n    return 7.0 - (pos.x + 2.0 * pos.z) / sqrt(5.0);\n}\n\nvec3 wallNormal(in vec3 pos) {\n    vec3 normal = vec3(0.0, 0.0, -1.0);\n    return normal / length(normal);\n}\n\nvec3 wallColorHit(in vec3 pos) {\n    bool a = fract(pos.x * 0.25) < 0.5;\n    bool b = fract(pos.y * 0.25) < 0.5;\n    return a ^^ b ? vec3(0.2, 1.0, 0.5) : vec3(0.2, 0.5, 0.5);\n}\n\nfloat combinedSDF(in vec3 pos) {\n    return min(taurusSDF(pos), wallSDF(pos));\n}\n\nbool taurusHit(in vec3 pos) {\n    return taurusSDF(pos) < 0.001;\n}\n\nbool wallHit(in vec3 pos) {\n    return wallSDF(pos) < 0.001;\n}\n\nbool voidHit(in vec3 pos) {\n    return length(pos) > 100000.0;\n}\n\nbool hit(in vec3 pos) {\n    return taurusHit(pos) || voidHit(pos) || wallHit(pos);\n}\n\nvec3 lightDir() {\n    vec3 dir = vec3(-1, 0, -1);\n    return dir / length(dir);\n}\nvoid rayMarch(inout vec3 pos, in vec3 dir) {\n    pos += dir * combinedSDF(pos);\n}\n\nvoid gammaCorrection(inout vec4 fragColor){\n    fragColor.x = pow(fragColor.x, 2.4);\n    fragColor.y = pow(fragColor.y, 2.4);\n    fragColor.z = pow(fragColor.z, 2.4);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.xy * 2.0 - 1.0) * iResolution.xy / iResolution.xx;\n    vec3 pos = vec3(uv, 0.0);\n    vec3 dir = vec3(uv, 1.0);\n    dir = dir / length(dir);\n    \n    int i = 0;\n    while(!hit(pos) && i < 100) {\n        ++i;\n        rayMarch(pos, dir);\n    }\n    \n    float b;\n    vec3 color;\n    \n    if (taurusHit(pos)) {\n    dir = reflect(dir, taurusNormal(pos));\n    b = (dot(dir, lightDir()) + 1.0) * 0.25;\n    color = vec3(1.0, 0.0, 0.5);\n    }\n    else if(wallHit(pos)) {\n    dir = reflect(dir, wallNormal(pos));\n    b = (dot(dir, lightDir()) + 1.0) * 0.25;\n    color = wallColorHit(pos);\n    }\n    else {\n    b = 0.0;\n    color = vec3(0.0, 0.0, 0.0);\n    }\n    \n    dir = lightDir();\n    i = 0; \n    while(hit(pos) && i < 100) {\n        ++i;\n        rayMarch(pos, dir);\n    }\n    \n    i = 0;\n    while(!hit(pos) && i < 100) {\n        ++i;\n        rayMarch(pos, dir);\n    }\n    \n    float c = !voidHit(pos) ? 0.2 : 0.5;\n    \n    fragColor = vec4((b + c) * color, 1.0);\n    gammaCorrection(fragColor);\n    \n  \n}","name":"Image","description":"","type":"image"}]}