{"ver":"0.1","info":{"id":"ttlXR8","date":"1562108762","viewed":180,"name":"Truchet pattern in my hometown","username":"ParaBellum","description":"I did this shader because just recently I realized the bus station and some government buildings in my hometown the government put those tiles :o\nhttp://www.poblanerias.com/wp-content/archivos/2014/03/EsculturaRotondaCIS-03.jpg","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","light","truchet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Colors for paint truchet tiles\nvec3 white = vec3(1.);\nvec3 blue = vec3(0., 0., .5);\n\n// SD function for square\nfloat sdSquare(vec2 p, vec2 o)\n{\n    p = abs(p) - o;\n    return max(max(p.x, p.y), 0.);\n}\n\n// 2D Random \nfloat r2d(vec2 p)\n{\n    return fract(sin(dot(p, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n// Trucet tiling\nvec2 truchet(vec2 uv, float size)\n{\n    vec2 i_uv = floor(uv*size);\n    vec2 f_uv = fract(uv*size);\n    \n    float r = r2d(i_uv);\n    \n    if (r >= .0 && r < .25)\n        return f_uv;\n    else if (r >= .25 && r < .5)\n        return vec2(1.-f_uv.x, f_uv.y);\n    else if (r >= .5 && r < .75)\n        return 1.-f_uv;\n    else if (r >= .75)\n        return vec2(f_uv.x, 1.-f_uv.y);\n       \n    return vec2(0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 e = vec2(1.,0.);\n    vec2 frag = fragCoord.xy;\n    vec2 uv = frag/iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Subdivide space in squares\n    float size = 6.; // number of tiles\n    vec2 i_uv = floor(uv*size) * 2. - 1.;\n    vec2 f_uv = fract(uv*size) * 2. - 1.;\n    \n    // Compute the displacement fragment fro ilumination (X axis) \n    vec2 r_uv = (frag+e.xy)/iResolution.xy * 2. - 1.;\n    r_uv.x *= iResolution.x / iResolution.y;\n    vec2 ri_uv = floor(uv*size);\n    vec2 rf_uv = fract(uv*size) * 2. - 1.;\n    \n    // Compute the displacement fragment fro ilumination (Y axis)\n    vec2 a_uv = (frag+e.yx)/iResolution.xy * 2. - 1.;\n    a_uv.x *= iResolution.x / iResolution.y;\n    vec2 ai_uv = floor(uv*size);\n    vec2 af_uv = fract(uv*size) * 2. - 1.;\n    \n    // Light source as the mouse\n    vec2 ms = iMouse.xy/iResolution.xy * 2. - 1.;\n    ms.x *= iResolution.x / iResolution.y;\n    \n    // Compute height for each fragment\n    vec2 o = vec2(.5);\n    float q = sdSquare(f_uv, o);\n    float r_q = sdSquare(rf_uv, o);\n    float a_q = sdSquare(af_uv, o);\n    \n    // Getting the fragment positions for lightning\n    vec3 fragPos = vec3(uv, 1.-q);\n    vec3 r_fragPos = vec3(r_uv, 1.-r_q);\n    vec3 a_fragPos = vec3(a_uv, 1.-a_q);\n    \n    // Compute Normals\n    vec3 a = r_fragPos - fragPos;\n    vec3 b = a_fragPos - fragPos;\n    vec3 nor = normalize(cross(a, b));\n    \n    // Diffuse lightning model\n    vec3 lightPos = vec3(ms, 1.2);\n    vec3 lightDir = normalize(lightPos - (fragPos+vec3(f_uv, q)));\n    float al = (1.-q)*.25;\n    float dl = max(dot(lightDir, nor), 0.)*1.75;\n    float l = al + dl; // White light\n    \n    // Color from Truchet tiling\n    vec2 tile = truchet(uv, size);\n    float truchet = smoothstep(tile.x-.015, tile.x, tile.y);\n    \n    // Time varying pixel color\n    vec3 col = vec3(0.);\n    col = mix(blue, white, truchet)*l;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}