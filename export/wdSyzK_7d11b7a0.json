{"ver":"0.1","info":{"id":"wdSyzK","date":"1586959934","viewed":64,"name":"raymarchTest_1","username":"newboldTom","description":"test of raymarching","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["test","raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 transform(vec3 p, float modFac, float rotX, float rotZ){\n    //twisty!!\n    //rotX = rotX*p.y+iTime*0.6+p.x;\n    //rotZ = rotZ+cos(iTime*1.25)+p.z;\n    //not so twisty\n    rotX = rotX + mod(iTime+0.2*p.z,radians(360.0));\n    rotZ = rotZ + mod(0.25*iTime+0.1*p.x,radians(360.0));\n    //translation\n    p = p + vec3(0.4,p.z,-2);\n    //modulo 8\n    p = mod(p+(0.5*vec3(modFac,modFac,modFac)),vec3(modFac,modFac,modFac))-(0.5*vec3(modFac,modFac,modFac));\n    //x axis rot\n    p = vec3(p.x, p.y*cos(rotX) - p.z*sin(rotX), p.y*sin(rotX) + p.z*cos(rotX));\n    //z axis rot\n    p = vec3(p.x*cos(rotZ) - p.y*sin(rotZ), p.x*sin(rotZ) + p.y*cos(rotZ), p.z);\n    return p;\n}\n\nfloat torus(vec3 p, vec2 t){\n    p = transform(p,5.0,1.1,0.65);\n    return length(vec2(length(vec2(p.x,p.z))-t.x,p.y)) - t.y;\n}\n\nvec3 raymarch(vec2 uv, vec3 cam, vec2 args){\n    vec3 dir = normalize(vec3(2.0*uv.x-1.0,2.0*uv.y-1.0,1.0));;\n    float totalDis = 0.0;\n    vec3 p;\n    for(int i=0;i<100;i++){\n        vec3 p = cam + totalDis*dir;\n        totalDis = totalDis + torus(p,args)*0.5;\n    }\n    return mix(vec3(0.8,0.0,0.0),vec3(0.05,0.05,0.05),smoothstep(10.0,50.0,totalDis));\n}\n\nvec3 calNormal(vec3 p, float smoothVal, vec2 args){\n    return normalize(vec3(\n        torus(p+vec3(smoothVal,0,0),args)-torus(p+vec3(-smoothVal,0,0),args),\n        torus(p+vec3(0,smoothVal,0),args)-torus(p+vec3(0,-smoothVal,0),args),\n        torus(p+vec3(0,0,smoothVal),args)-torus(p+vec3(0,0,-smoothVal),args)));\n}\n\nvec3 raymarch_withLight(vec2 uv, vec3 cam, vec3 lightDir, vec3 lightCol, vec3 matCol, vec2 args){\n    vec3 dir = normalize(vec3(2.0*uv.x-1.0,2.0*uv.y-1.0,1.0));;\n    float totalDis = 0.0;\n    vec3 p;\n    for(int i=0;i<100;i++){\n        p = cam + totalDis*dir;\n        totalDis = totalDis + torus(p,args)*0.5;\n    }\n    matCol.x = 0.5+0.5*sin(p.z+p.y);\n    matCol.y = 0.5+0.5*sin(0.25*p.x);\n    matCol.z = 0.5+0.5*sin(0.5*p.x*p.y+2.0);\n    vec3 normal = calNormal(p,0.0001,args);\n    float diffuse = dot(lightDir,normal);\n    vec3 diffuseLit = diffuse*lightCol*matCol;\n    return mix(diffuseLit,vec3(0.05,0.05,0.05),smoothstep(10.0,80.0,totalDis));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //vec3 col = raymarch(uv,vec3(0,0.2,-2),vec2(0.8,0.3));\n    vec3 col = raymarch_withLight(uv,vec3(2.0+cos(iTime*0.5+10.0)*1.5,sin(iTime*1.5)*3.0,iTime*5.0),\n                                  normalize(vec3(-0.2, -0.3, -0.5)),vec3(1.0, 0.6, 0.2),\n                                  vec3(1.0,1.0,1.0),vec2(0.75,0.25));\n    fragColor = vec4(col.xyz, 1.0);\n}","name":"Image","description":"","type":"image"}]}