{"ver":"0.1","info":{"id":"mtKczW","date":"1700003165","viewed":81,"name":"Funky Kaleidoscope","username":"Ahriixi","description":"Beginner shader after watching a YouTube tutorial and experimenting from that.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","repetition"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nI made this shader after following the tutorial by Kishimisu. Then I experimented and this was the result!\n\nI'm a complete beginner and don't quite understand my own code yet, but this is actually more fun than I thought!\n\nI hope you enjoy this shader.\n\n*/\n\n#define TAU 6.28318\n\nvec2 rotate(vec2 uv, float th) {\n  return mat2(\n      vec2(cos(th), sin(th)),\n      vec2(-sin(th), cos(th))) * uv;\n}\n\nfloat sdTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\n\nvec3 palette(float t)\n{\n    vec3 a = vec3(0.650, 0.667, 0.976);\n    vec3 b = vec3(0.989, 0.024, 0.802);\n    vec3 c = vec3(0.509, 0.764, 1.099);\n    vec3 d = vec3(3.862, 2.462, 1.270);\n\n    return a+b*cos(TAU*(c*t*d));\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.);\n    \n    for(float i = .0; i < 2.; i++)\n    {\n        float offset = 4.5;\n        float r = 4.;\n        \n        uv = fract(uv * offset)-.5;\n        \n        float a = sdTriangle(rotate(uv, iTime*.5), .45*iTime);\n        a = smoothstep(.0,.1,a);\n        \n        float d = -cos(a*.25) + sin(a*.25);\n        d = abs(d);\n        d *= sdTriangle(vec2(-exp(length(uv0*.25))), .15);\n        d += d * pow(length(uv), 2.);\n        d *= sin(sdTriangle(vec2(-exp(length(uv0*.25*r))), .15*d));\n        d = abs(d);\n        d = r/2.*sin(d*r+iTime*.4+i*.4)/r;\n\n\n        vec3 c = palette(length(uv0+i*.15+iTime*.25));\n\n          d = pow(.1/d, 2.);\n\n\n        finalColor += c * d;\n    }\n        \n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}