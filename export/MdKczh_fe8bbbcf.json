{"ver":"0.1","info":{"id":"MdKczh","date":"1521070576","viewed":340,"name":"Underwater structure","username":"Flopine","description":"J - 15 !!","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","shapes","training"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon and lsdlive for teaching me ! :)\n\n\n#define ITER 80.\n#define PI 3.141592\n\nmat2 rot(float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\n}\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a,per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\n// iq's palette\nvec3 palette(float t,vec3 a, vec3 b, vec3 c, vec3 d)\n{\n\treturn a+b*cos(2.*PI*(c*t+d));    \n}\n\nfloat sc (vec3 p, float s)\n{\n p = abs(p);\n    p = max(p,p.yzx);\n    return min(p.x,min(p.y,p.z))-s;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    return length(max(abs(p)-c,0.));\n}\n\nfloat cyl (vec2 p, float r)\n{\n\treturn length(p)-r;    \n}\n\nfloat sphe (vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat wcube (vec3 p, float s)\n{\n    return max(-sc(p,s), box(p, vec3(s+0.09)));\n}\n\nfloat prim1 (vec3 p, float per)\n{\n    p.xz *= rot(p.y);\n    p.y = mod(p.y-per/2.,per)-per/2.;\n    \n    return wcube(p,.3);\n}\n\nfloat prim2 (vec3 p, float per)\n{\n    float c = cyl(p.xz,0.1);\n    p.y -= tan(iTime);\n    p.y = mod(p.y-per/2.,per)-per/2.;\n\n    float s = sphe(p, 0.2);\n    return min(c,s);\n}\n\nfloat elevators (vec3 p, float per)\n{\n    p.z = mod(p.z-per/2.,per)-per/2.;\n    p.xz = moda(p.xz, (2.*PI)/4.);\n    p.x -= sin(iTime)+3.;\n    return min(prim1(p,0.7),prim2(p,0.8));\n}\n\nfloat hex (vec3 p, float per)\n {\n     p.z = mod(p.z-per/2.,per)-per/2.;\n     p.xy *= rot(iTime);\n    p.xy = moda(p.xy, (2.*PI)/6.);\n    p.x -= 2.;\n    return min(prim1(p,0.7),prim2(p,0.8));\n} \n\n\nfloat SDF (vec3 p)\n{\n\n    return min(elevators(p,6.), hex(p,3.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    vec3 p = vec3(0.001,.001,iTime*0.5);\n    vec3 dir = normalize(vec3(uv,1.));\n    \n    float shad = 0.;\n    vec3 col = vec3(0.);\n    for (float i = 0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {shad = i/ITER;\n         col = vec3(1.-shad)*palette(p.z*2.,\n                                    vec3(0.,0.3,0.7),\n                                    vec3(0.2,0.3,0.3),\n                                    vec3(.2),\n                                    vec3 (0.,0.2,iTime*0.5));\n         break;\n        }\n        else col = palette(length(uv),\n                          vec3 (0.,0.1,0.7),\n                           vec3(0.,0.5,0.3),\n                           vec3 (0.3),\n                           vec3(0.5));\n        p += d*dir*0.7;\n    }\n\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(0.45)),1.0);\n}","name":"Image","description":"","type":"image"}]}