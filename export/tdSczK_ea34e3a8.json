{"ver":"0.1","info":{"id":"tdSczK","date":"1586954751","viewed":122,"name":"Buffer - use video memory buffer","username":"mikelsv","description":"Buffer - use video memory buffer for storage data.","likes":2,"published":1,"flags":48,"usePreview":0,"tags":["buffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// <--- See Buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //fragColor = vec4(0.0,0.0,1.0,1.0);\n    vec3 buf = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    fragColor = vec4(buf, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Buffer - use video memory buffer for storage data\n// Research for Pulse 2d - https://www.shadertoy.com/view/3dSczy\n// Research for Maticals http://maticals.senin.world/\n\n// Thanks to: https://www.shadertoy.com/view/tdBczy . Buffer idea.\n\n// Storage buffer lenght for x and y. All buffer lenght = SBUF_X_LEN * SBUF_Y_LEN.\n// Storage in first layer y pixels, from 0 to 1 = array vec4[SBUF_X_LEN][SBUF_Y_LEN];\n\n// Buffer segments. Max: SBUF_X_LEN * SBUF_Y_LEN < X resolution.\n#define SBUF_X_LEN\t24.\n#define SBUF_Y_LEN\t16.\n\n// Get array position\nfloat getArrayPosX(float val){\n    return floor(val * SBUF_X_LEN);\n}\n    \nfloat getArrayPosY(float val){\n    return floor(val * SBUF_Y_LEN) * SBUF_X_LEN;\n}\n\n// in x & y from 0 to 1, out array pos from 0 to 1.\nfloat getArrayPos(float x, float y){\n    return (getArrayPosX(x) + getArrayPosY(y)) / SBUF_Y_LEN / SBUF_X_LEN;        \n}\n\n// Get vec2(x, y) from float, range 0 to 1.\nvec2 getArrayPos2(float val){\n\tvec2 ret;\n\tret.y = floor(val * SBUF_Y_LEN) / SBUF_Y_LEN;\n    ret.x = (val - ret.y) * SBUF_Y_LEN;\n    return ret;\n}\n\n// How it work:\n// vec2 coord = fragCoord/iResolution.xy; // Get coord from 0 to 1.\n// vec2 mouse = iMouse.xy / iResolution.xy; // Get mouse coord from 0 to 1.\n\n// On y == 0\n// Test pixel is mouse position: abs(getArrayPos(mouse.x, mouse.y) - coord.x) < 0.001\n// Set red color to buffer\n\n// Get color from buffer: texture(iChannel0, vec2(getArrayPos(coord.x, coord.y), 0)).rgb;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get coord from 0 to 1.\n    vec2 coord = fragCoord/iResolution.xy;\n    \n    // First memory y pixels used for storage data\n    if(fragCoord.y <= 1.){\n        // Get last pixel color\n        vec3 buf = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n\n        // Random modify\n        buf.x *= .9 + 0.06 * sin(fragCoord.x) + 0.02 * sin(fragCoord.y);\n        buf.y *= .9 + 0.02 * cos(fragCoord.x) + 0.04 * cos(fragCoord.y);\n        buf.z *= .9 + 0.03 * sin(fragCoord.x) + 0.01 * cos(fragCoord.y);\n        \n        // Mouse, set red pixel color\n \t\tvec2 mouse = iMouse.xy / iResolution.xy;\n        if(iMouse.z > 0. && abs(getArrayPos(mouse.x, mouse.y) - coord.x) < 0.001){\n            buf.x = 1.;\n         \tbuf.y = 0.;\n            buf.z = 0.;\n        }\n        \n        // Set white color if limit\n        if( (buf.x < 0.0001 || buf.x > 99999.)\n          && (buf.y < 0.0001 || buf.y > 99999.)\n          && (buf.z < 0.0001 || buf.z > 99999.)\n        \t)\n        \tbuf = vec3(1, 1, 1);\n        \n        fragColor = vec4(buf.x, buf.y, buf.z, 1.);\n        return ;\n    }\n    \n    // Get pixel color in buffer\n    vec3 buf = texture(iChannel0, vec2(getArrayPos(coord.x, coord.y), 0)).rgb;   \n    \n    fragColor = vec4(buf, 1);\n    return ;\n}","name":"Buffer A","description":"","type":"buffer"}]}