{"ver":"0.1","info":{"id":"XXBcDz","date":"1727135200","viewed":8,"name":"Noise: fBM","username":"arminkz","description":"Fractional Brownian motion (can be used for clouds/ terrain generation / ...)","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}\n\n// used to rotate domain of noise function\nconst mat2 rot = mat2( 0.80,  0.60, -0.60,  0.80 );\n\n// fast implementation\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.500000*noise( p ); p = rot*p*2.02;\n    f += 0.031250*noise( p ); p = rot*p*2.01;\n    f += 0.250000*noise( p ); p = rot*p*2.03;\n    f += 0.125000*noise( p + 0.1 * sin(iTime) + 0.2 * iTime ); p = rot*p*2.01;\n    f += 0.062500*noise( p + 0.3 * sin(iTime) ); p = rot*p*2.04;\n    f += 0.015625*noise( p );\n    return f/0.96875;\n}\n\n\n// another implementation of fBM (more formal)\nconst int numOctaves = 10;\nfloat fbm2( in vec2 x )\n{\n    float hurst = 1.0;\n    float gain = exp2(-hurst);\n    float frequency = 1.0;\n    float amplitude = 1.0;\n    float sum_amp = 0.0;\n    mat2  rotation = rot;\n    float result = 0.0;\n    for( int i=0; i<numOctaves; i++ )\n    {\n        sum_amp += amplitude;\n        result += amplitude * noise(frequency * rotation * x);  // integrate the noise\n        frequency *= 2.02 + 0.05*noise(rotation * x);    // frequency is doubled for each octave\n        amplitude *= gain;    // amplitude is exponentially declined (much faster rate than frequency)\n        rotation *= rot;      // rotate the 2d domain\n    }\n    return result / sum_amp; // normalize to make it between 0 and 1\n}\n\n\nfloat pattern( vec2 p ) {\n    return fbm( p );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(pattern(uv));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}