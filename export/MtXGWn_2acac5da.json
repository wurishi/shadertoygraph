{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//Julia Set for (.285,.01)\n#define DEPTH 16\n\nvec3 hsv(float h,float s,float v) {\n\treturn mix(vec3(1.),clamp((abs(fract(h+vec3(3.,2.,1.)/3.)*6.-3.)-1.),0.,1.),s)*v;\n}\n\nfloat cMag2(vec2 c){\n    return c[0]*c[0]+c[1]*c[1];}\n\nvec2 cSum(vec2 c1,vec2 c2){\n    return vec2(c1[0]+c2[0],c1[1]+c2[1]);}\n\nvec2 cSqr(vec2 c){\n    return vec2(c[0]*c[0]-c[1]*c[1],2.*c[0]*c[1]);}\n\n\nfloat julia(vec2 z, vec2 C){\n    float attSize = 0.; //.01*(sin(iTime/10.));\n    float iteration = 0.;\n    for( int i = 0; i < 10; i++){\n        \n        z = cSum(cSqr(z),C);\n        \n        //if (cMag2(z)>4.){return float(DEPTH-i)/float(DEPTH);} //escape\n        //if (cMag2(z)<attSize){return 1.;} //creates Attractors (Spots)\n        iteration += 1.;\n        if (cMag2(z) > 16. || iteration>=float(DEPTH)){break;}\n    }\n    if ( iteration < float(DEPTH) ) {\n        float zn = sqrt(cMag2(z));\n        float nu = log( log(zn) / log(2.) ) / log(2.);\n        // Rearranging the potential function.\n        // Could remove the sqrt and multiply log(zn) by 1/2, but less clear.\n        // Dividing log(zn) by log(2) instead of log(N = 1<<8)\n        // because we want the entire palette to range from the\n        // center to radius 2, NOT our bailout radius.\n        iteration = iteration + 1. - nu;\n  \t}\n    return float(iteration);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    mat2 rot;\n    float zoom = 1.2*abs(sin(iTime/80.));\n\t\n\tfloat deg = iTime/40.+sin(iTime/40.);;\n\t\n\trot[0] = vec2(cos(deg), sin(deg));\n\trot[1] = vec2(-sin(deg), cos(deg));\n    \n    float aspectRatio = iResolution.x/iResolution.y;\n    float xMod = (fragCoord.x / iResolution.x - .5)*3.0*aspectRatio;\n    float yMod = (fragCoord.y / iResolution.y - .5)*3.0;\n    vec2 z = vec2(xMod,yMod)*rot*zoom;\n\t\n    //float realSeed = .285+1.*tan(iTime/tan(iTime/2000.)); //curly + stringy\n    float realSeed = .285+.01*tan(iTime/20.)+.01*sin(iTime/2.);\n    float imagSeed = .01 +.01*sin(iTime/30.0);\n    vec2 C = vec2(realSeed,imagSeed);\n    //vec2 C = vec2(0,0);\n\tfloat x = julia(z,C);\n\tfragColor = vec4(hsv(x+sin(iTime/100.), 1., .2+x), 1.0);   \n}\n\n//hsv from gleurop \"The Pulse\", thanks\n//rot from sander \"Texture spin & zoom\", thanks","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MtXGWn","date":"1420601511","viewed":158,"name":"nightmare clown julia","username":"pflowsoftware","description":"bloop bloop bloop","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["juliainterpolation"],"hasliked":0,"parentid":"","parentname":""}}