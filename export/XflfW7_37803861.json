{"ver":"0.1","info":{"id":"XflfW7","date":"1723896867","viewed":49,"name":"metal oxidation test","username":"Elsio","description":"\nModifiquei mais um pouquinho ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","voxel","cell","shane","traversal"],"hasliked":0,"parentid":"XcsBR7","parentname":"Fractal oxidation"},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define normal(p) normalize(map(p)-vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)))\n#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define t iTime\n\n// @shane\nvec4 tex3D(sampler2D tex, vec3 p, vec3 n) {\n    n = max(n * n - .2, .001);\n    n /= dot(n, vec3(1));\n    vec3 tx = texture(tex, p.zy).xyz,\n         ty = texture(tex, p.xz).xyz,\n         tz = texture(tex, p.xy).xyz;\n    return (mat3(tx * tx, ty * ty, tz * tz) * n).xyzz;\n}\n\n// @shane\nfloat D_GGX(vec3 n, vec3 v, vec3 l, float roughness) {\n    vec3 h = normalize(v + l);\n    float NoH   = clamp(dot(n, h), .001, 1.),\n          alpha = pow(roughness, 4.),\n          b     = (NoH * NoH * (alpha - 1.) + 1.);\n    return alpha /(3.14 * b * b);\n}\n\n\n// @shane\nfloat G_Smith(vec3 n, vec3 v, float NoL, float roughness) {\n    float k = .12 * roughness * roughness +  .25 * roughness + .12;\n    \n    float NoV = clamp(dot(n, v), .001, 1.); \n    float gl = NoL / (NoL + (1. - NoL) * k);\n    float gv = NoV / (NoV * (1. - k) + k);\n    return gl * gv / (4. * NoV);\n}\n\n\n// @Kamoshika\nfloat map(vec3 p){\n    float a = .5, s = 9., e;\n    p = mod(p, 6.) - 3.;\n    while((a += a) < 18. * .5 + 1.)\n        e = length(p.zy) - 1.,\n        s = min(s, e / a),\n        p = abs(p),\n        p = p.z > p.x ? p.zyx : p,\n        p = p.y > p.x ? p.yxz : p,\n        p.x -= 5.,\n        p *= 2.;\n    return s;\n}\n\n\n\nfloat softShadow(vec3 ro, vec3 lp, vec3 n, float k) {\n    ro += n * .0015;\n    vec3 D = lp - ro;\n    float i, s, d, shade = 1.,\n          end = max(length(D), .0001);\n          \n    D /= end;\n    while(i++ < 48. && d < end) \n        s = map(ro + d * D),\n        shade = min(shade, k * s / d),\n        d += clamp(s * .9, .02, .25);\n    \n    return max(shade, 0.);\n}\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    float cc = cos(smoothstep(-.5, .5, cos(t * 1.4)) * 4.) * .4,\n          cs = sin(t) * .4 ;\n    \n    vec2  r = iResolution.xy;\n          u = (u - r.xy / 2.) / r.y;\n          o *= 0.;\n    \n    float i, d, far = 30., s = 1.;\n\n    vec3 p = vec3(0, 0, 0) * t, q,\n         L = p + vec3(cos(t * .8) * 3., 0, 0),\n         D = normalize(vec3(u, 2));\n    \n    D.zx *= rot(sin(t * .2));\n    D.zy *= rot(cos(t * .3));\n\n    while(i++ < 99. && s > 1e-4 && d < far) \n        s = map(p),\n        d += s,\n        p += s * D;\n    \n    vec3 N, ld, \n         e = vec3(.001, 0, 0);\n    \n    if(d < far) {\n        N = normal(p), \n        ld = L - p;\n        \n        float shad  = softShadow(p, L, N, 8.),\n              lDist = max(length(ld), .0001),\n              atten = 30. / (30. + lDist * lDist),\n              ambience = smoothstep(- 1., 1., N.y) * .5,\n              BRDF = clamp(dot(N, ld / lDist), .001, 1.);\n        \n        // feel free to fork with better values (please, share)\n\n        if(cc > u.x)\n            BRDF = G_Smith(N, -D, BRDF, 4.) * 3.14;\n        else\n            BRDF = D_GGX(N, -D, ld / lDist, .4) * 2.;\n                \n        \n        if(cs < u.y)\n            o = .2 * vec4(9, 5, 4, 0) * tex3D(iChannel0, p * 1., N);\n        else\n            o = .8 * vec4(8, 7, 6, 0) * tex3D(iChannel0, p * .2, N);\n\n        o *= (ambience + BRDF * shad) * atten;\n\n    }\n    \n    o = pow(o, vec4(.45));\n    \n    \n    o += smoothstep(.008, .0, abs(cc - u.x) + .003);\n    o += smoothstep(.008, .0, abs(cs - u.y) + .003);\n}","name":"Image","description":"","type":"image"}]}