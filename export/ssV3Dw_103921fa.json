{"ver":"0.1","info":{"id":"ssV3Dw","date":"1631745258","viewed":899,"name":"Flow fields","username":"mpcomplete","description":"Experiments with flow fields.\n\nTake a color sample from either some procedural noise, or a texture, and drag that color along a generated flow field.\n\nBased on https://www.shadertoy.com/view/XlGBWV#","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["noise","perlin","gradient","particles","animation","flowfield"],"hasliked":0,"parentid":"XlGBWV","parentname":"flow field particles"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Draws BufferB and an optional flow field.\n\n// p is base, q is width,height\nfloat sdTriangleIsosceles( in vec2 p, in vec2 q ) {\n  p.x = abs(p.x);\n  vec2 a = p - q*clamp( dot(p,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = p - q*vec2( clamp( p.x/q.x, 0.0, 1.0 ), 1.0 );\n  float s = -sign( q.y );\n  vec2 d = min( vec2( dot(a,a), s*(p.x*q.y-p.y*q.x) ),\n                vec2( dot(b,b), s*(p.y-q.y)  ));\n  return -sqrt(d.x)*sign(d.y);\n}\n\nfloat cell(in vec2 uv) {\n  uv = rotate(uv, -PI*.5);\n  return 1. - sign(sdTriangleIsosceles(uv - vec2(0., .5), vec2(.1, -.6)));\n}\n\nfloat udSegment( in vec2 p, in vec2 a, in vec2 b ) {\n  vec2 ba = b-a;\n  vec2 pa = p-a;\n  float h =clamp( dot(pa,ba)/(1.1*dot(ba,ba)), 0.0, 1.0 );\n  return length(pa-h*ba) - .05;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    if (drawFlowField) {\n        vec2 uv = fragCoord/iResolution.xy;\n        vec2 velocity = velocityAtPoint(uv, time);\n        float c = udSegment(fract(uv*64.) - .5, vec2(0.), velocity);\n\n        fragColor.rgb += vec3(1. - sign(c));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Options:\n#define drawFlowField false\n#define numParticles 900.\n#define time (iTime)\n#define lineLifetime .05\n#define lineWidth .0025\n// Uncomment only one:\n//#define colorSourceNoise true\n#define colorSourceTexture true\n\n#define indexToCoord(i) ivec2(mod(i, iResolution.x), (i) / iResolution.x)\n\nfloat PI = 3.14159269369;\nfloat TAU = 6.28318530718;\n\n// http://www.jcgt.org/published/0009/03/02/\nuvec3 pcg3d(uvec3 v) {\n  v = v * 1664525u + 1013904223u;\n\n  v.x += v.y*v.z;\n  v.y += v.z*v.x;\n  v.z += v.x*v.y;\n\n  v ^= v >> 16u;\n\n  v.x += v.y*v.z;\n  v.y += v.z*v.x;\n  v.z += v.x*v.y;\n\n  return v;\n}\n// https://www.shadertoy.com/view/XlGcRh#\nvec3 hash3(vec3 uvt) {\n  uvec3 hu = pcg3d(uvec3(uvt * 1717.));  // scale by approximate resolution\n  return vec3(hu) * (1.0/float(0xffffffffu));\n}\n\n// Simplex Noise\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\nconst float F3 = 0.3333333;\nconst float G3 = 0.1666667;\nfloat snoise(vec3 p) {\n\tvec3 s = floor(p + dot(p, vec3(F3)));\n\tvec3 x = p - s + dot(s, vec3(G3));\n\n\tvec3 e = step(vec3(0.0), x - x.yzx);\n\tvec3 i1 = e*(1.0 - e.zxy);\n\tvec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n\tvec3 x1 = x - i1 + G3;\n\tvec3 x2 = x - i2 + 2.0*G3;\n\tvec3 x3 = x - 1.0 + 3.0*G3;\n\n\tvec4 w, d;\n\n\tw.x = dot(x, x);\n\tw.y = dot(x1, x1);\n\tw.z = dot(x2, x2);\n\tw.w = dot(x3, x3);\n\n\tw = max(0.6 - w, 0.0);\n\n\td.x = dot(hash3(s), x);\n\td.y = dot(hash3(s + i1), x1);\n\td.z = dot(hash3(s + i2), x2);\n\td.w = dot(hash3(s + 1.0), x3);\n\n\tw *= w;\n\tw *= w;\n\td *= w;\n\n\treturn .5 + .5*dot(d, vec4(52.0));\n}\nvec2 snoise2(vec3 p) {\n  return vec2(snoise(p+vec3(17.1)), snoise(p+vec3(3.7)));\n}\n// Fractional Brownian Motion\n// Íñigo Quílez\nconst mat2 m = mat2(0.80,  0.60, -0.60,  0.80);\nfloat fbm(vec3 p) {\n  float f = 0.0;\n  f += 0.500000*snoise(p); p.xy = m*p.xy*2.02;\n  f += 0.250000*snoise(p); p.xy = m*p.xy*2.03;\n  f += 0.125000*snoise(p); p.xy = m*p.xy*2.01;\n  f += 0.062500*snoise(p); p.xy = m*p.xy*2.04;\n  f += 0.031250*snoise(p); p.xy = m*p.xy*2.01;\n  f += 0.015625*snoise(p);\n  return f/0.96875;\n}\nvec2 fbm2(vec3 p) {\n  return vec2(fbm(p+vec3(16.8)), fbm(p+vec3(11.5)));\n}\n\nvec2 rotate(vec2 _st, float _angle) {\n    return mat2(cos(_angle), -sin(_angle),\n                sin(_angle), cos(_angle)) * _st;\n}\nvec3 hsv2rgb(vec3 c) {\n  // Íñigo Quílez\n  // https://www.shadertoy.com/view/MsS3Wc\n  vec3 rgb = clamp(abs(mod(c.x*6.+vec3(0.,4.,2.),6.)-3.)-1.,0.,1.);\n  rgb = rgb * rgb * (3. - 2. * rgb);\n  return c.z * mix(vec3(1.), rgb, c.y);\n}\nvec2 velocityAtPoint(vec2 p, float t) {\n  t = snoise(vec3(t*.1, 0, 0));\n  vec2 v = snoise2(vec3(p*2., t)) - .5;\n  float a = 0.;\n  return normalize(v);\n\n  return rotate(normalize(v), a * TAU/4.);\n}\n\nvec2 randomPoint(vec2 uv, float t) {\n    return hash3(vec3(uv, t)).xy;\n}\n\nvoid maybeReset(inout vec2 pos, inout vec2 newPos, inout vec3 color, inout float birth, in vec2 fragCoord, in vec2 iResolution, in float iTime, sampler2D colorSource) {\n    float death = lineLifetime*(1. + .5*hash3(vec3(fragCoord.xy/iResolution.xy + pos, iTime)).x);\n    if ((iTime - birth) > death || newPos.x < 0. || newPos.x > 1. || newPos.y < 0. || newPos.y > 1.) {\n        pos = newPos = randomPoint(gl_FragCoord.xy, iTime);\n        birth = iTime;\n#ifdef colorSourceNoise\n          color = vec3(snoise2(vec3(pos*.7, iTime*.1)), snoise(vec3(pos*.5, iTime*.1)));\n#else\n          color = texture(colorSource, pos).rgb;\n#endif\n    }\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This buffer holds and updates the particle positions.\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec2 pos = texelFetch(iChannel0, ivec2(fragCoord), 0).zw;\n  vec2 velocity = velocityAtPoint(pos, time);\n\n  vec2 newPos = pos + velocity * .005;\n  vec4 props = texelFetch(iChannel1, ivec2(fragCoord.xy), 0);\n  maybeReset(pos, newPos, props.xyz, props.a, fragCoord, iResolution.xy, iTime, iChannel2);\n  fragColor = vec4(pos, newPos);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// This buffer draws the particle paths to a texture, to be blitted to screen by Image.\n\nfloat dist2Line(vec2 a, vec2 b, vec2 p) {\n  p -= a, b -= a;\n  float h = clamp(dot(p, b) / dot(b, b), 0., 1.);\n  return length( p - b * h );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 clr = vec3(0.);\n  vec2 uv = fragCoord/iResolution.xy;\n  for (float i = 0.; i < numParticles; i++) {\n    vec4 pos = texelFetch(iChannel0, indexToCoord(i), 0);\n    vec3 color = texelFetch(iChannel2, indexToCoord(i), 0).rgb;\n    float p = 1. - smoothstep(0., lineWidth, dist2Line(pos.xy, pos.zw, uv));\n    clr += p*color;\n  }\n\n  // fragColor = vec4(clr, 1.);\n  fragColor = vec4(clr + texelFetch(iChannel1, ivec2(fragCoord), 0).rgb * .99, 1.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// This buffer holds and updates the particle birth time and hue.\n// fragColor.xy = vec2(birth, hue)\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 posvec = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec2 pos = posvec.xy;\n    vec2 newPos = posvec.zw;\n    vec4 props = texelFetch(iChannel1, ivec2(fragCoord.xy), 0);\n    maybeReset(pos, newPos, props.xyz, props.a, fragCoord, iResolution.xy, iTime, iChannel2);\n    fragColor.xyzw = props.xyzw;\n}","name":"Buffer C","description":"","type":"buffer"}]}