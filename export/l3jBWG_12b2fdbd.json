{"ver":"0.1","info":{"id":"l3jBWG","date":"1731345894","viewed":129,"name":"3d ship game","username":"A_661","description":"xdd","likes":5,"published":1,"flags":48,"usePreview":0,"tags":["xdd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// render settings\nconst int MAX_MARCHING_STEPS = 255;\nconst float MIN_DIST = 0.0;\nconst float MAX_DIST = 100.0;\nconst float PRECISION = 0.001;//0.001;\nconst float WORLD_BRIGHTNESS = 0.3;\n\n// camera settings\nconst float MOUSE_SENS = 0.5;\nconst float CAM_SHAKE = 0.08;\nconst float FOV = 1.;\n\n\n// colors\nconst vec3 ship_color1 = vec3(.1, .5, 1);\nconst vec3 ship_color2 = vec3(1., 0., 0.);\nconst vec3 proj_color = vec3(1., 1., 0.);\n\n// pitch coef from Buffer C\nconst float q = 15.;\n\n// Rotation matrix around the X axis.\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n}\n\n// Rotation matrix around the Y axis.\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n}\n\n// Rotation matrix around the Z axis.\nmat3 rotateZ(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// Identity matrix.\nmat3 identity() {\n    return mat3(\n        vec3(1, 0, 0),\n        vec3(0, 1, 0),\n        vec3(0, 0, 1)\n    );\n}\n\n// structure for colored objects\nstruct Surface {\n    float sd; // signed distance value\n    vec3 col; // color\n};\n\n// used as sphere substraction\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = max(k-abs(d1-d2),0.0);\n    return min(d1, d2) - h*h*0.25/k;\n}\n\nSurface minWithColor(Surface obj1, Surface obj2) {\n  if (obj2.sd < obj1.sd) return obj2;\n  return obj1;\n}\n\n//=========================================================================== PRIMITIVES FUNCS\nSurface sdBox( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 transform)\n{\n  p = (p - offset) * transform;\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\nSurface sdBoxPivot( vec3 p, vec3 b, vec3 offset, vec3 col, mat3 transform, vec3 pivot)\n{\n  p = (p - offset) * transform - pivot;\n  vec3 q = abs(p) - b;\n  float d = length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n  return Surface(d, col);\n}\n\nSurface sdSphere( vec3 p, float s, vec3 col )\n{\n  return Surface(length(p)-s, col);\n}\n\n//rhombus additional func\nfloat ndot(vec2 a, vec2 b ) { return a.x*b.x - a.y*b.y; }\n\n// la, lb = x, y    h = height, ra = corner\nSurface sdRhombus(vec3 p, float la, float lb, float h, float ra, vec3 color, mat3 transform)\n{\n    p = p * transform;\n    p = abs(p);\n    vec2 b = vec2(la,lb);\n    float f = clamp( (ndot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n\tvec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n    return Surface(min(max(q.x,q.y),0.0) + length(max(q,0.0)), color);\n}\n\n// r = radius, h = cutting's plane's position, t = thickness\nSurface sdCutHollowSphere( vec3 p, float r, float h, float t, vec3 col, mat3 transform)\n{\n  p = p * transform;\n  float w = sqrt(r*r-h*h);\n  vec2 q = vec2( length(p.xz), p.y );\n  float d = ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : \n                          abs(length(q)-r) ) - t;\n  return Surface(d, col);\n}\n// floor surfaces\nSurface sdFloor(vec3 p, vec3 col) {\n  float d = p.y + 1.;\n  return Surface(d, col);\n}\n\nSurface sdFloorSphere(vec3 pF, vec3 pS, float rS, float k, vec3 col) {\n  float d1 = pF.y + 1.;\n  float d2 = length(pS)-rS;\n  float d = -opSmoothUnion(d2,-d1,k);\n  return Surface(d, col);\n}\n\nSurface sdFloorWave(vec3 p, vec3 col) {\n    float waveHeight = 0.1 * sin(5.0 * p.x + iTime) * sin(5.0 * p.z + iTime * 0.8);\n    float d = p.y + 1.0 + waveHeight;\n    return Surface(d, col);\n}\n\n\n//============================================================================ OBJECTS FUNCS\nSurface sdShip( vec3 p, vec3 offset, vec3 col, mat3 transform) {\n    Surface ship = sdBox(p, vec3(1.8,0.45,0.3), offset, col, transform);\n    ship = minWithColor(ship, sdBox(p, vec3(0.5,0.1,0.5), offset + vec3(-0.3,0.9,-0.3), col, transform));\n    ship = minWithColor(ship, sdBox(p, vec3(0.4,0.3,0.4), offset + vec3(-0.3,0.7,-0.3), col, transform));\n    ship = minWithColor(ship, sdRhombus(p - offset - vec3(0.,0.4,0.), 2.0, 1.0, 0.1, 0.2, col, transform));\n    ship = minWithColor(ship, sdRhombus(p - offset, 2.0, 1.0, 0.4, 0.1, col - vec3(0.2), transform));\n    ship = minWithColor(ship, sdCutHollowSphere(p - offset + vec3(0.4,-1.35,0.4), 0.3, -0.1, 0.06, col, rotateY(iTime) * rotateX(-1.)));\n    return ship;\n}\n\nSurface sdShipBot( vec3 p, vec3 offset, vec3 col, mat3 transform) {\n    Surface ship = sdShip(p, offset, col, transform);\n    ship = minWithColor(ship, sdBox(p, vec3(0.4,0.3,0.4), offset + vec3(0.6,0.8,0.6), col, transform));\n    return ship;\n}\n//==========================================================================================\n\n//==================================================================================== SCENE\nSurface sdScene(vec3 p) {\n  vec3 floorColor = vec3(0.4 + 0.15*mod(floor(p.x*.5) + floor(p.z*.5), 2.0));\n \n  Surface co;\n  \n  // SPHERE BABAH BUM BUM BUM\n    float hit = texelFetch(iChannel2, ivec2(0, 0), 0).z;\n    if ((hit > 0.) /*|| (iTime >= 22.)*/) {\n        co = sdFloorSphere(p, p - vec3(-iTime + 5., -1, -25), (2. - abs(2. - hit)) * 3., 1., floorColor);\n        //co = minWithColor(co, sdSphere(p - vec3(-iTime +5., 1. - hit*2., -25), 9. - hit, vec3(1., 0.5, 0.)));\n    } \n    else co = sdFloor(p, floorColor);\n    \n    // PLAYER SHIP\n    co = minWithColor(co, sdShip(p, vec3( -iTime, -1, -iTime), ship_color1, rotateY(3.14/4.)));\n    \n    // FRIENDLY SHIPS\n    co = minWithColor(co, sdShipBot(p, vec3( -iTime + 5., -1, -iTime - 1.), ship_color1, rotateY(3.14/4.)));\n    co = minWithColor(co, sdShipBot(p, vec3( -iTime - 5., -1, -iTime + 1.), ship_color1, rotateY(3.14/4.)));\n    \n    // ENEMY SHIP    \n    float hitstatus = texelFetch(iChannel2, ivec2(0, 0), 0).w;\n    if (hitstatus == 0.) {\n    co = minWithColor(co, sdShipBot(p, vec3( -iTime +5., -1, -25), ship_color2, identity()));\n    }\n    \n    // GAME LOGIC\n    float status = texelFetch(iChannel1, ivec2(0, 0), 0).x;\n    \n    float proj_dir = texelFetch(iChannel2, ivec2(0, 0), 0).y;\n    float proj_pitch = texelFetch(iChannel3, ivec2(0, 0), 0).x;\n    vec3 proj_pos = texelFetch(iChannel1, ivec2(0, 0), 0).yzw;\n    // if shot, render projectile\n    if (status >= 0.) {\n        co = minWithColor(co, sdBox(p, vec3(0.2,0.2,1.0), vec3(proj_pos) + vec3(-0.05,1.,-0.6), proj_color, rotateY(proj_dir) * rotateX(proj_pitch / -q))); // q - coef from Buffer C\n    }\n    \n    // PLAYER RENDER\n    float tower_dir = texelFetch(iChannel2, ivec2(0, 0), 0).x; // yaw\n    float tower_pitch = texelFetch(iChannel3, ivec2(0, 0), 0).y; // pitch\n    co = minWithColor(co, sdBox(p, vec3(0.4,1,0.4), vec3(-iTime + 0.7, -1, -iTime + 0.7), vec3(.5, .5, 1), rotateY(tower_dir))); // tower base\n    co = minWithColor(co, sdBoxPivot(p, vec3(0.2,0.2,0.8), vec3(-iTime + 0.7, 0, -iTime + 0.7), vec3(.5, .5, 1), rotateY(tower_dir) * rotateX(tower_pitch), vec3(0.,0.,-0.5))); // tower gun\n\n  return co;\n}\n//===================================================================================\n\nSurface rayMarch(vec3 ro, vec3 rd, float start, float end) {\n  float depth = start;\n  Surface co; // closest object\n\n  for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n    vec3 p = ro + depth * rd;\n    co = sdScene(p);\n    depth += co.sd;\n    if (co.sd < PRECISION || depth > end) break;\n  }\n\n  co.sd = depth;\n\n  return co;\n}\n\nvec3 calcNormal(in vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n      e.xyy * sdScene(p + e.xyy).sd +\n      e.yyx * sdScene(p + e.yyx).sd +\n      e.yxy * sdScene(p + e.yxy).sd +\n      e.xxx * sdScene(p + e.xxx).sd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 backgroundColor = vec3(0.835, 1, 1);\n    \n    vec3 col = vec3(0);\n    vec2 mouse = iMouse.xy / iResolution.xy - 0.5; // <-0.5,0.5>\n    vec3 ro = vec3(uv.x - iTime, uv.y + 1.5, 7. - iTime);\n\n    vec3 rd = normalize(vec3(uv * FOV, -1));\n    rd *= rotateY(-mouse.x * MOUSE_SENS) * rotateX(mouse.y * MOUSE_SENS); // apply yaw and pitch\n    rd *= rotateZ(sin(iTime) * CAM_SHAKE);\n\n  Surface co = rayMarch(ro, rd, MIN_DIST, MAX_DIST); // closest object\n\n  if (co.sd > MAX_DIST) {\n    col = backgroundColor; // ray didn't hit anything\n  } else {\n    vec3 p = ro + rd * co.sd; // point on cube or floor\n    vec3 normal = calcNormal(p);\n    vec3 lightPosition = vec3(2.-iTime, 2, 7.-iTime);\n    vec3 lightDirection = normalize(lightPosition - p);\n\n    float dif = clamp(dot(normal, lightDirection), WORLD_BRIGHTNESS, 1.); // diffuse reflection\n\n    col = dif * co.col + backgroundColor * .2; // background color to the diffuse color\n  }\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//projectile logic\n\n// space \nconst int KEY_FIRE = 32;\n\n// xy-direction of projectile\nfloat proj_dir;\n\n// PROJECTILE SPEED\nconst float speed = 0.1;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    \n    float tower_dir = texelFetch(iChannel2, ivec2(0, 0), 0).x;\n    float proj_dir = texelFetch(iChannel2, ivec2(0, 0), 0).y;\n    vec3 pos = texelFetch(iChannel1, ivec2(0, 0), 0).yzw;\n    \n    float hit = texelFetch(iChannel2, ivec2(0, 0), 0).z;\n    \n    float status = texelFetch(iChannel1, ivec2(0, 0), 0).x;\n    \n    //SINGLE-TIME INIT WHEN FIRING\n    if ((status <= 0.) && (texelFetch(iChannel0, ivec2(KEY_FIRE, 0), 0).x == 1.)) {\n        status = 6.0;\n        pos = vec3(-iTime + 0.7, -1, -iTime + 0.7);\n    }\n    \n    if (hit > 0.) {\n        status = 0.;\n    }\n    \n    // xd-level simulation\n    pos.x += sin(proj_dir) * speed;\n    pos.z += -cos(proj_dir) * speed;\n    \n    float vert_speed = texelFetch(iChannel3, ivec2(0, 0), 0).x;\n    pos.y += vert_speed * iTimeDelta;\n    \n    status -= iTimeDelta;\n    \n    if (iTime == 0.) {\n        fragColor = vec4(-1,pos.x,pos.y,pos.z);\n    } else { \n    //shot status, xyz projectile\n    fragColor = vec4(status,pos.x,pos.y,pos.z);\n    }\n} ","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//tower + projectile directions, hit, exp status\n\n// a d\nconst int KEY_LEFT  = 65;\nconst int KEY_RIGHT = 68;\n\n// tower yaw rotation (left & right)\nfloat l_border = -0.1;\nfloat r_border = 0.6;\nfloat speed = 0.005;\nfloat hit;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    float left = texelFetch(iChannel0, ivec2(KEY_LEFT, 0), 0).x * -1.;    // get texels, texture coords, LoD\n    float right = texelFetch(iChannel0, ivec2(KEY_RIGHT, 0), 0).x * 1.;\n    float tower = texelFetch(iChannel2, ivec2(0, 0), 0).x;\n    float proj = texelFetch(iChannel2, ivec2(0, 0), 0).y;\n    if ((l_border <= tower) && (tower <= r_border)) {\n        tower += speed * (left + right);\n    }\n    else if (l_border >= tower) {\n        tower += speed * right;\n    }\n    else { tower += speed * left; }\n    \n    if (texelFetch(iChannel1, ivec2(0, 0), 0).x <= 0.) {\n        proj = tower;\n    }\n    \n    float hitstatus = texelFetch(iChannel2, ivec2(0, 0), 0).w;\n    \n    vec3 pos = texelFetch(iChannel1, ivec2(0, 0), 0).yzw;\n    //vec3( -iTime +5., -1, -25)\n    hit = texelFetch(iChannel2, ivec2(0, 0), 0).z;\n    if (hitstatus == 0. && ((((-iTime + 2. <= pos.x) && (pos.x <= -iTime + 8.)) && ((-26. <= pos.z) && (pos.z <= -24.)) && ((-3. <= pos.y) && (pos.y <= 0.5)))) || ((iTime >= 22.) && (iTime <=22.5))) {\n        hit = 4.;\n        //explosion status 1.5 sec\n        hitstatus = 1.;\n    } \nhit -= iTimeDelta;\n\n    if (iTime == 0.) {\n        fragColor = vec4(0);\n    } \n    else fragColor = vec4(tower,proj,hit,hitstatus); \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// vertical speed & tower control\n\n// s w\nconst int KEY_UP  = 83;\nconst int KEY_DOWN = 87;\n\n// tower pitch rotation (up & down)\nfloat l_border = -0.5;\nfloat u_border = 0.1;\nconst float speed = 0.005;\n\n// coefs for gravity and tower pitch >> projectile pitch\nconst float g = -5.5;\nconst float q = 15.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float vert_speed = texelFetch(iChannel3, ivec2(0, 0), 0).x;\n    float tower_pitch = texelFetch(iChannel3, ivec2(0, 0), 0).y;\n    \n    float down = texelFetch(iChannel0, ivec2(KEY_DOWN, 0), 0).x * -1.;    // get texels, texture coords, LoD\n    float up = texelFetch(iChannel0, ivec2(KEY_UP, 0), 0).x * 1.;\n    \n    if ((l_border <= tower_pitch) && (tower_pitch <= u_border)) {\n        tower_pitch += speed * (down + up);\n    }\n    else if (l_border >= tower_pitch) {\n        tower_pitch += speed * up;\n    }\n    else { tower_pitch += speed * down; }\n    \n    float status = texelFetch(iChannel1, ivec2(0, 0), 0).x;\n    \n    if (texelFetch(iChannel0, ivec2(32, 0), 0).x == 1.) {\n        vert_speed = -tower_pitch * q;\n    }\n    vert_speed += g * iTimeDelta;\n    fragColor = vec4(vert_speed, tower_pitch, 0.,0.);\n}","name":"Buffer C","description":"","type":"buffer"}]}