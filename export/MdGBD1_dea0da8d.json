{"ver":"0.1","info":{"id":"MdGBD1","date":"1528590894","viewed":161,"name":"Fuzzy Sets: Distance Fields","username":"ptrgags","description":"I recently made the observation that fuzzy sets are much like distance fields. Here I experiment with this concept.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["distance","fuzzylogic","fuzzysets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Center of the screen in pixels and UV coordinates\n#define CENTER (iResolution.xy / 2.0)\n#define CENTER_UV vec2(0.0)\n\n//center of sigmoids for the background\n#define NEAR 0.2\n#define FAR 0.7\n#define WIDTH 0.1\n\n//Center of sigmoids for the mouse\n#define NEAR_MOUSE 0.05\n#define FAR_MOUSE 0.1\n#define WIDTH_MOUSE 0.01\n\n// These parameters control the sine wave.\n#define MID_ANGLE 0.5\n#define SECTOR_SIZE 0.01\n#define ROTATE_FREQ 0.4\n#define TWIST_AMP 0.5\n#define TWIST_FREQ 10.0\n// Not sure if this is the right physics term. This\n// is a multiplier of the phase angle in space.\n#define TWIST_PHASE_VEL 5.0\n// This prevents the sigmoids from having 0 width.\n#define BLUR_BIAS 0.01\n#define BLUR_AMP 0.4\n#define BLUR_FREQ 0.3\n\n// Fuzzy logic operations\n#define NOT(x) (1.0 - (x))\n#define AND min\n#define OR max\n\n// Fuzzy logic hedges\n#define VERY(x) ((x) * (x))\n#define SOMEWHAT sqrt\n\n// I wish this came with GLSL out of the box.\n#define PI 3.141592\n#define TAU (2.0 * PI)\n\n// Compute a fuzzy set for distance to a point.\n// I use sigmoid-shaped boundaries with smoothstep()\n// x is the input point\n// center is the center of the distance field\n// near, far are the center of the sigmoid-like curves that divide the sets.\n// width is the width of the sigmoid-like curves\nvec3 fuzzy_dist(float dist, float near_point, float far_point, float width) {\n    float half_width = width / 2.0;\n    \n    // Make the sigmoid shapes for near and far using smoothstep()\n    float near = smoothstep(near_point + half_width, near_point - half_width, dist);\n    float far = smoothstep(far_point - half_width, far_point + half_width, dist);\n    \n    // We are at a medium distance if we are not near and not far.\n    float mid = AND(NOT(near), NOT(far));\n    \n    // Return the membership for the three categories.\n    return vec3(near, mid, far);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized coordinates from the center of the screen.\n    // This accounts for the screen aspect ratio.\n    vec2 uv = (fragCoord - CENTER)/iResolution.y;\n    \n    // Do the same for mouse coordinates. Note that for some reason\n    // Shadertoy only updates the mouse when a button is pressed.\n    vec2 mouse_uv = (iMouse.xy - CENTER)/iResolution.y;\n    \n    // Compute fuzzy sets ====================================\n\n    // Compute the fuzzy set for distance to the center of the screen.\n    float from_center = distance(uv, CENTER_UV);\n    vec3 center_dist = fuzzy_dist(from_center, NEAR, FAR, WIDTH);\n    \n    // Compute the fuzzy set for distance to the mouse\n    float from_mouse = distance(uv, mouse_uv);\n    vec3 mouse_dist = fuzzy_dist(from_mouse, NEAR_MOUSE, FAR_MOUSE, WIDTH_MOUSE);\n    \n    // In principle this is computing the distance from pi radians\n    // around the circle. However, I'm rotating and distorting the\n    // polar coordinates with a sine wave for a cooler effect!\n    // Polar angle\n    float angle = atan(uv.y, uv.x);\n    // Rotate cooordinates\n    float rotate = ROTATE_FREQ * TAU * iTime;\n    // Twist the coordinates with a high-frequency sine wave\n    // in the radial directtion.\n    float twist = TWIST_AMP * sin(\n        TWIST_FREQ * TAU * from_center - TWIST_PHASE_VEL * TAU * iTime);\n    // Apply the transformations\n    float transformed = angle - rotate + twist;\n    // Normalize from 0 (0 radians) to 1 (2 pi radiaans)\n    float normalized = mod(transformed, TAU) / TAU;\n    // Vary the shape of the fuzzy sets for an even cooler effect!\n    // Specifically, stretch/shrink the width of the curves.\n\t// This needs to be a positive number else smoothstep() in my \n    // fuzzy_dist function\n    //will misbehave.\n    float width_blur = BLUR_BIAS + BLUR_AMP + BLUR_AMP * sin(\n        BLUR_FREQ * TAU * iTime);\n    \n    //vec3 angle_dist = fuzzy_dist(normalized, NEAR_ANGLE, FAR_ANGLE, blur);\n    vec3 angle_dist = fuzzy_dist(\n        normalized, \n        MID_ANGLE - SECTOR_SIZE, \n        MID_ANGLE + SECTOR_SIZE, \n        width_blur);\n    \n    // =============================================================\n    // Let's make some fuzzy logic propositions to make some abstract art!\n    \n    // If distance to mouse is very, very medium and distance to the\n    // center of the screeen is somewhat medium, paint a ring.\n    // This ring will only show up inside the middle distance field for \n    float mouse_vv_med = VERY(VERY(mouse_dist.y));\n    float center_s_med = SOMEWHAT(center_dist.y);\n    float ring = AND(mouse_vv_med, center_s_med);\n    \n    // If distance from the center is far or very near, paint a background.\n    float background = OR(center_dist.z, VERY(center_dist.x));\n    \n    // If the angle is medium and the distance to the center of the\n    // screen is somewhat medium, paint it in.\n    float wave = AND(center_s_med, angle_dist.y);\n    \n    // Let's build the image. =======================================\n    \n    // The background is orange.\n    vec4 image = vec4(1.0, 0.5, 0.0, 1.0) * background;\n    \n    \n    // Texture the ring around the mouse.\n    vec4 ring_color = texture(iChannel0, uv);\n    image = mix(image, ring_color, ring);\n    \n    // Draw the sweeping ray in teal\n    vec4 wave_color = vec4(0.0, 1.0, 0.8, 1.0);\n    image = mix(image, wave_color, wave);\n\n    // Output to screen ============================================\n    fragColor = vec4(image);\n}","name":"Image","description":"","type":"image"}]}