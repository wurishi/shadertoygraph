{"ver":"0.1","info":{"id":"cdKBWh","date":"1698206949","viewed":37,"name":"Playing Cards","username":"iznax","description":"experiment drawing standard player cards -- diamonds 1-8","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["cards","diamonds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Card size, corner radius, diamond size, edge size\nfloat Size = .165, Radius = .04, Diamond = .04, E = .125;\n\n// Card rectangle size\nvec2 Aspect = vec2(1.7,1.2);\n\nbool Diamonds(float n, vec2 p, vec2 q)\n{\n    float A,B, x=p.x, y=p.y, X=abs(x-.07), Y=abs(y-.09);\n    A = min(X + y, x + abs(y-.05));\n    A = n < 8. ? min(X + y, q.y > 0. ? x + abs(q.y - 0.05) : 1.) : A;\n    A = n < 1. ? 1. :\n        n < 2. ? x + y :\n        n < 3. ? x + Y :\n        n < 4. ? x + min(y,Y) :\n        n < 5. ? X + Y :\n        n < 6. ? x + y :\n        n < 7. ? X + y : A;\n    B = n > 5. ? X + Y : A;\n    return min(A,B) < Diamond;\n}\n\nvec3 Card(vec2 w, float n, vec2 p, vec3 col)\n{\n    // Relative position scaled by card size\n    vec2 q = (w-p) * Aspect, r = abs(q);\n\n    if (max(r.x, r.y) < Size)\n    {\n        if (r.x < E || r.y < E)\n        {\n            col = Diamonds(n,r,q) ? vec3(1,0,0) : vec3(1);\n        }\n        else if (length(r-E) < Radius)\n        {\n            col = vec3(1);\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates\n    vec2 w = (fragCoord - .5*iResolution.xy) / iResolution.x;\n\n    // Time varying pixel color\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = .5 + .5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Hovering card position\n    vec2 c = vec2(sin(iTime)*.1,cos(iTime)*.02);\n    \n    col = Card(w, mod(iTime,9.), c, col);\n\n    // Output to screen\n    fragColor = vec4(col,1);\n}","name":"Image","description":"","type":"image"}]}