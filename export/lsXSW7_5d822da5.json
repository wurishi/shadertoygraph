{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n// Try these for more or less fun:\n#define REFLECT \n//#define RADIAL \n#define SCALE_ON_MOUSE_X\n\n\n// wavelet-ish visualizer\n\n// Iain Melvin 2014\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  // create pixel coordinates\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  \n  // reflect over center point \n  // comment this line to get basic effect:\n#ifdef REFLECT\n  uv=abs(uv*2.0-vec2(1.0,1.0));\n#endif\n\n#ifdef SCALE_ON_MOUSE_X\n  uv *= 1.0-min(0.9,iMouse.x/iResolution.x);\n#endif\n\t\n#ifdef RADIAL\n  float theta = 1.1*(1.0/(3.14159/2.0))*atan(uv.x,uv.y);\n  float r = length(uv);\n  uv = vec2(theta,r);\t\n#endif\n\t\n\t\n\t\n  // first texture row is frequency data\n  float fft  = texture( iChannel0, vec2(uv.x*1.0,0.25) ).x;\n\n  // second texture row is the sound wave\n  float wave = texture( iChannel0, vec2(uv.x,0.75) ).x;\n\n  // note: 512 samples is not a lot to work with\n\n  const float pi = 3.14159;\n\n  // my wavelet \n  //float width = 1.0-uv.y; \n  //float width = (1.0-sqrt(uv.y));\n  float width = 1.0-(pow(uv.y,(1.0/3.0) ));\n  const float np = 10.0; //num periods\n  const int numsteps = 100; // more than 100 crashes windows (would love to know why)\n  const float stepsize = 1.0/float(numsteps);\n  \n  float yr=0.0;\n  float accr = 0.0;\n  float accn=0.0;\n    \n  for (float x=-1.0; x<1.0; x+=stepsize){\n\t\n\t// the wave in the wavelet\n    float yr = sin(((uv.x*2.0)+x)*np*2.0*pi); \n    \n    // get a sample - center at uv.x, offset by width*x\n    float si = uv.x + width*x;\n\t  if (si>0.0 || si<1.0){\n        \n\t\t// sample\n\t\tfloat s = texture( iChannel0, vec2(si,0.7)).x; \n    \n\t\t// move sample to -1.0 -> +1.0\n    \t// I don't know why I need the extra 13/256\n    \ts+=-0.5+(12.5/256.0); \n    \ts*=2.0;\n\n\t\t// multiply with the wave in the wavelet\n\t    float sr=yr*s;\n         \n\t    // apply packet 'window'\n        //float w =  0.5*(1.0-sin(pi*(x+1.0)+pi*0.5));\n\t\tfloat w = 1.0-abs(x); //faster\n\t    sr*=w;\n\n\t\t// accumulate\n        accr+=sr;\n        accn+=w*abs(yr);\n\t  }\n  }\n\n  float y= 100.0*sqrt(accr*accr)/float(accn);\n\n\n  vec3 col = vec3(0,0,0); // zero\n\n  if (uv.y<0.0){\n    // chrome fft\n    col += vec3(fft,fft,fft);\n\n  }else{\n    // our wavelet thing\n\t  \n    y=clamp(y,0.0,1.0); // screen goes red in ubuntu/chrome\n\n    //   b g r\n    //   /\\/\\/\n    //  / /\\/\\\n\t  \n\t// yes, I am still learning glsl\n\n    float b = 0.0;\n    if (y<0.33)      b = 3.33*y;\n    else if (y<0.66) b = 1.0-(3.33*(y-0.33));\n\n    float g = 0.0;\n    if (y<0.33)\n       g=0.0;\n    else if (y<0.66)\n        g = (3.33*(y-0.33));\n    else\n        g = 1.0-(3.33*(y-0.66));\n\n    float r = 0.0;\n    if (y>0.66) r = 3.33*(y-0.66);\n\n\n    col += vec3(r,g,b);\n  }\n\t\n  // add wave form on top     \n  //col += 1.0 -  smoothstep( 0.0, 0.01, abs(wave - uv.y) );\n \n  // output final color\n  fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsXSW7","date":"1402106411","viewed":594,"name":"Wavelet Visualizer1","username":"pixelbeast","description":"\"Wavelet - like\" visualizer.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["wavletmusic2d"],"hasliked":0,"parentid":"","parentname":""}}