{"ver":"0.1","info":{"id":"fdl3Rr","date":"1615930113","viewed":54,"name":"NY167 - SDF Test","username":"newyork167","description":"Test scene using SDF","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["cornellbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURFACE_DIST .01\n\nstruct Ray {\n\tvec3 origin;\n    vec3 direction;\n};\n\nstruct Sphere {\n    vec3 position;\n    float radius;\n};\n\nfloat sphereSDF(vec3 p, Sphere sphere) {\n    float dSphere = length(p - sphere.position.xyz) - sphere.radius;\n    return dSphere;\n}\n\nvec3 getNormalSphere(vec3 p, Sphere sphere) {\n    vec2 e = vec2(.0001, 0);\n    float d = sphereSDF(p, sphere);\n    vec3 n = d - vec3(\n        sphereSDF(p-e.xyy, sphere),\n        sphereSDF(p-e.yxy, sphere),\n        sphereSDF(p-e.yyx, sphere));\n    return normalize(n);\n}\n\nfloat getDist(vec3 p, Sphere sphere) {\n    return sphereSDF(p, sphere);\n}\n\nfloat rayMarch(Ray r, Sphere sphere) {\n\tfloat d0 = 0.;\n    \n    for(int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = r.origin + d0*r.direction;\n        float dS = getDist(p, sphere);\n        d0 += dS;\n        \n        if (dS < SURFACE_DIST || d0 > MAX_DIST)\n            break;\n    }\n    \n    return d0;\n}\n\nfloat getLightSphere(vec3 p, Sphere sphere) {\n    vec3 lightPos = vec3(-sin(iTime), 20.0 * sin(cos(iTime)), -cos(iTime));\n    \n    vec3 l = normalize(lightPos - p);\n    vec3 n = getNormalSphere(p, sphere);\n    \n    float dif = dot(n, l);\n    float d = rayMarch(Ray(p + n*SURFACE_DIST*2., l), sphere);\n    \n    if (d < length(lightPos - p)) {\n        dif *= .1;\n    }\n    \n    return dif;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n    Ray ray = Ray(ro, rd);\n    \n    Sphere testSphere = Sphere(vec3(sin(iTime), 1, 6. + cos(iTime)), 1.0);    \n    vec3 sphereColor = vec3(1, 0.5, 0);\n\n    vec3 col = vec3(0);\n    vec3 p = vec3(uv, 1.0) - vec3(0., .0, 0.);\n    float r = 1.;\n    float d = rayMarch(ray, testSphere);\n    \n    vec3 p1 = ro + rd * d;\n    float dif = getLightSphere(p1, testSphere);\n    \n    col = dif * sphereColor;\n\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}