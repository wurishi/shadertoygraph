{"ver":"0.1","info":{"id":"wllfDX","date":"1597961021","viewed":272,"name":"Gyroids test _DB","username":"db009","description":"Followed a tutorial by the amazing BigWings on here. (link in bottom) just learning everything I can about shaders and raymarching form his videos so I can use it inside of unity\n\nhttps://www.youtube.com/watch?v=-adHIyjIYgk","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","gyroid","gyroids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"RayMarching starting point\" \n// by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// \n// You can use this shader as a template for ray marching shaders\n\n#define MAX_STEPS 100\n#define MAX_DIST 4.\n#define SURF_DIST .001\n\n#define S smoothstep\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(123.34,233.53));\n    p += dot(p, p+23.234);\n    return fract(p.x*p.y);\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias)\n{\n\t//scale position\n    p*=scale;\n    \n   \t//return dot(sin(p),cos(p.zxy))/scale;//gyroid function - divide by scale factor\n    return abs(dot(sin(p),cos(p.zxy))-bias)/scale-thickness;// thickness gyroid function - divide by scale factor\n    // return abs(dot(sin(p*2.),cos(p.zxy*1.23))-bias)/(scale*2.)-thickness;//same as above but has modifiers to p. scale. must multiply scale by largest of the 2 modifiers of p to fix hiccups\n}\n\nvec3 Transform(vec3 p)\n{\n    p.xy *= Rot(p.z*.15);//rotate the whole gyroid\n    p.z += -iTime*.1;//fly through world\n    p.y-=.3;\n    return p;\n}\n\nfloat GetDist(vec3 p) {\n    \n    p = Transform(p);\n    \n    float d = sdBox(p, vec3(1));\n    \n\tfloat gyroid1 = sdGyroid(p,5.23,.03,1.4);\n    float gyroid2 = sdGyroid(p,10.76,.03,.3);\n    float gyroid3 = sdGyroid(p,20.76,.03,.3);\n    float gyroid4 = sdGyroid(p,35.76,.03,.3);\n    float gyroid5 = sdGyroid(p,60.76,.03,.3);\n    float gyroid6 = sdGyroid(p,110.76,.03,.3);\n    //float g = min(gyroid1,gyroid2);//union\n    //float g = max(gyroid1,-gyroid2);//subtraction\n    \n    gyroid1 -= gyroid2*.4;\n    gyroid1 -= gyroid3*.3;\n    gyroid1 += gyroid4*.2;\n    gyroid1 += gyroid5*.2;\n    gyroid1 += gyroid6*.3;\n    float g = gyroid1;\n    \n    //contain gyroid to box only (boiolean intersection)\n    //float dist = max(d, g*.8);\n    \n     float dist = gyroid1*.8;\n    return dist;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    //vec2 e = vec2(.001, 0);//.001 is accuracy of rayMarch increase it for smoother edges nortt so sharp\n    vec2 e = vec2(.02, 0);\n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec3 Background(vec3 rd)\n{\n \tvec3 col = vec3(0);\n    float y = rd.y*.5+.5;\n    col += (1.-y)*vec3(1,.4,.1)*2.;\n    \n    float angle = atan(rd.x,rd.z);\n    float flames = sin(angle*10.+iTime)*sin(angle*7.-iTime)*sin(angle*6.);\n    flames*= smoothstep(.8,.5,y);//remove flames from reach top\n     col += flames;//add flmaes to col\n    col = max(col, 0.);//get rid of negatives(adds white to where color division would have been)\n    col += smoothstep(.5,.0,y);//remove flame from  going all the way too bottom\n   \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    vec3 col = vec3(0);\n    \n    //uv += sin(uv*20.);//weird cubeish kaleidoscope effect\n    uv += sin(uv*20.+iTime)*.01;//heat distortion\n    vec3 ro = vec3(0, 0, -.3);\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    vec3 lookAt = vec3(0,0,0);\n    vec3 rd = GetRayDir(uv, ro,lookAt , .8);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n        float height = p.y;//get height of where looking\n        p = Transform(p);\n        \n    \t//float dif = dot(n, normalize(vec3(1,2,3)))*.5+.5;\n        float dif = n.y*.5+.5;//light from above the normal\n        col+= dif*dif;//diffuse lighting . multiply by itself for contrast\n    \t//col += n*.5+.5;//use normals to give it colors off spectrum the *.5+.5 is to remove the deep blacks\n        \n        float gyroid2 = sdGyroid(p,10.76,.03,.3);\n        col *= smoothstep(-.1,.1,gyroid2);//cheap ambient oclussion using gyroid2's position\n        \n        float crackWidth = -0.01+smoothstep(0.,-.5,n.y)*.04;\n        float cracks = smoothstep(crackWidth,-.03,gyroid2);\n        \n        float gyroid3 = sdGyroid(p+(iTime*.1),5.76,.03,.0);\n        float gyroid4 = sdGyroid(p+(iTime*.05),4.76,.03,.0);\n        cracks *= gyroid3*gyroid4*20.+.2*smoothstep(.2,.0,n.y);\n        \n        col+=cracks*vec3(1,.4,.1)*3.;//multiply by color. then multiply for intensity\n        \n        float gyroid5 = sdGyroid(p-vec3(0.,iTime,0.),3.76,.03,.0);//weird flame wind/flicker looking thing        \n        col += gyroid5*vec3(1.,.4,.1);//apply flicker\n        \n        col += smoothstep(0.,-2.,height)*vec3(1.,.4,.1);//glowy floor\n    }\n    \n    col = mix(col,Background(rd),smoothstep(0.,7.,d));//fog gradient\n \t//col = Background(rd);\n \n    col *= 1.-dot(uv,uv);//vingette\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}