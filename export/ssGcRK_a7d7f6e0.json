{"ver":"0.1","info":{"id":"ssGcRK","date":"1655168062","viewed":143,"name":"Spiral point flow (faking it)","username":"ChunderFPV","description":"The points move around in circles and the spiral zooms in and out to fit.  Click + mouse y to zoom.  It takes 360 seconds to traverse the number line.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["spiral","loopless"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SCALE 20.0\n#define PI radians(180.0)\n#define TAU (PI*2.0)\n#define CS(a) vec2(cos(a), sin(a))\n#define SS(u,r) smoothstep(0.0, r, r-length(u))\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 R = iResolution.xy;\n    vec4 m = iMouse; m.xy = m.xy*2.0/R-1.0; // +/-1x, +/-1y\n    float z = (m.z > 0.0) ? pow(1.0-abs(m.y), 2.0*sign(m.y)): 1.0; // zoom from mouse y\n    float t = iTime/360.0; // time in seconds to traverse number line\n    float n = 1.0/tan((t-0.5)*PI); // n moves along condensed number line\n    vec2 uv = (U-0.5*R)/R.y*SCALE*z; // apply cartesian and zoom | try adding /n\n    float px = length(vec2(dFdx(uv.x),dFdy(uv.y))); // pixel size\n    vec3 c = vec3(0); // black background\n    \n    // spiral\n    float r = length(uv); // radius from 0 for every pixel\n    vec2 xy = CS(r*n*TAU)*r; // xy coords\n    float sz = abs(n)*r*TAU*px*2.0; // hassle getting this size right\n    c += SS(uv-xy, sz)*vec3(0.0, 0.3, 1.0); // add spiral and color\n    \n    // points (same method as spiral but with rounded radius)\n    r = round(r);\n    xy = CS(r*n*TAU)*r; // point xy coords\n    c += SS(uv-xy, px*8.0)*vec3(1.0, 0.6, 0.0); // add points and color\n    \n    // xy grid\n    vec2 xyg = abs(fract(uv+0.5)-0.5)/px; // make grid\n    //c = mix(c, vec3(0.25), 1.0-min(min(xyg.x, xyg.y), 1.0)); // add grid\n    \n    O = vec4(c*2.5, 1.0); // draw\n}","name":"Image","description":"","type":"image"}]}