{"ver":"0.1","info":{"id":"Mc2yWd","date":"1723199821","viewed":19,"name":"Spiral SDF tater  teste 3","username":"Elsio","description":"1","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdklj"],"hasliked":0,"parentid":"XcjcDd","parentname":"Spiral SDF tater  teste 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi 3.14\n#define rot(a) mat2(cos(a + vec4(0, 11, 33, 0)))\n#define t iTime\n\n// teste 1\n// https://www.shadertoy.com/view/fs3Xzf\n\nfloat cor;\n\nfloat lim(float p, float s, float lima, float limb) {\n    return p - s * clamp(floor(p / s + .5), lima, limb);\n}\n\n\n#define zoom .4\n\nfloat spiral(vec2 p) {\n    float ts = sin(t * .3) * 15. + 15.,\n          scale = .05,\n          piscale = pi * scale,\n          timeOffset = 30.,\n          R1, RT1, R2, RT2, L, RR; \n    \n    R1 = sqrt((piscale + 4. * ts) * scale) * pi - .5;\n    RT1 = R1;\n    R2 = sqrt(\n                 scale * (piscale + 4. * max(timeOffset - ts, 0.))\n             ) * pi - .5;\n    RT2 = R2;\n    R1 = piscale * (R1 - .5);\n    R2 = piscale * (R2 - .5);\n    RR = R2 + R1;\n    \n    float barraLen = 80.;\n    \n    \n    //L = sqrt(c * c * scale * scale - RR * RR);\n    L = sqrt((barraLen * scale - RR) * (barraLen * scale + RR));\n    \n    \n    \n    p.x += L * .5;\n    p *= rot(-atan(RR / L) - .12);\n    p.x -= L * .5;\n    p.y -= R2;\n    \n    \n    float s = sign(p.x);\n    ts *= s;\n    if(s < .0) \n        ts += timeOffset;\n    \n    ts = max(ts, 0.);\n    if(s > 0.) \n        ts = RT1;\n    else\n        ts = RT2;\n\n\n\n    p.x = abs(p.x);\n\n        float artif = max(p.x + .12, abs(p.y) - RR * 2.);\n\n    p.x -= L * .5;\n    p.y *= s;\n\n        \n        float barra = max(p.x * 10., abs(p.y));\n    \n    p.y -= piscale * (ts + .5);\n    \n    p *= rot(pi * (ts * 2. + .5));\n    \n    float  theta = atan(p.y, p.x);\n    vec2 k = vec2(theta, length(p));\n    \n    \n    float \n        spirs = abs(lim(k.y + theta * scale * .5,  piscale, 0., floor(ts))),\n        cacho = abs(k.y + theta * scale * .5 - piscale * (floor(ts) + 1.)),\n        setor = abs(k.x - pi) - 2. * pi * fract(ts),\n        anel  = max(setor, cacho),\n        align = min(spirs, anel);\n    \n    cor = 1.;\n    if(barra < spirs) cor = .5;\n    \n    //return min(spirs, min(barra, artif)) - scale;\n    //return min(max(setor, cacho), min(barra, artif)) - scale;\n    //return min(min(spirs, max(setor, cacho)), min(barra, artif)) - scale;\n    //return spirs - scale;\n    //return align - scale;\n    //return anel - scale;\n    //return setor;\n    //return cacho - scale;\n    //return max(setor, cacho) - scale;\n    //return align - scale;\n\n    return min(align, min(barra, artif)) - scale;\n}\n\n\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    o.xyz = iResolution;\n    u -= o.xy / 2.;\n    u /= o.y / (cos(3.14 * zoom) * 3. + 3.);\n    \n    float d = spiral(u);\n    \n    o.rgb = smoothstep(8. / o.y, .0, d) \n                * vec3(0, .5, 1) * cor \n                    + .4 * d;\n\n    o.rgb += (step(abs(u.y), .01) + step(abs(u.x), .01)) * .1;\n    o.rgb += step(abs(abs(u.x) - 2.) - .01, 0.) * .1;\n}","name":"Image","description":"","type":"image"}]}