{"ver":"0.1","info":{"id":"WdKcDh","date":"1602729615","viewed":102,"name":"height","username":"Sovka","description":"parms at 1-5 lines\nmain() at 63 line","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float heightScale = 10.;\nfloat roughness = .4;\nfloat metallic = .1;\nvec3 albedo = vec3(.35, 0.45, 0.4);\nfloat radiance = 5.;\n\n\nvec3 normalFromHeight(vec2 uv, float heightScale)\n{\n    vec2 pixSize = 1. / iResolution.xy;\n    vec2 dx = vec2(pixSize.x, 0.);\n    vec2 dy = vec2(0., pixSize.y);\n    \n    float z = texture(iChannel1, uv).x;\n    float slopeX = (z - texture(iChannel1, uv + dx).x) * iResolution.x;\n    float slopeY = (z - texture(iChannel1, uv + dy).x) * iResolution.y;\n    \n    return normalize(vec3(slopeX, slopeY, heightScale));\n}\n\n//this and other approximations are here:\n//http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\nfloat BlinnPhongNDF(vec3 halfDir, vec3 norm, float a)\n{\n    float d = dot(norm, halfDir);\n    float normer = 1. / (3.1416 * a*a);\n    float power = (2. / (a*a) - 2.);\n    \n    return pow(d, power) * normer;\n}\n\nfloat SchlickBeckmannGF(vec3 dir, vec3 norm, float a)\n{\n    float k = a * sqrt(2. / 3.1416);;\n    float d = dot(norm, dir);\n    \n    return d / (d * (1. - k) + k);\n}\n\n//in the common form F0 is a vec3 color.\nfloat SchlickFF(vec3 halfDir, vec3 viewDir, float F0)\n{\n    return F0 + (1. - F0) * pow(1. - dot(halfDir, viewDir), 5.);\n}\n\nvec3 BRDF(vec3 normal, vec3 viewDir, vec3 lightDir, float a, float m, vec3 albedo)\n{\n    vec3 halfDir = normalize(viewDir + lightDir);\n    \n    float distr = BlinnPhongNDF(halfDir, normal, a);\n    float geoL = SchlickBeckmannGF(lightDir, normal, a);\n    float geoV = SchlickBeckmannGF(viewDir, normal, a);\n    float geo = geoL * geoV;\n    float fren = SchlickFF(halfDir, normal, .05);\n    \n    float spec = (distr * geo * fren) / (4. * dot(lightDir, normal) * dot(viewDir, normal));\n    \n    vec3 diff = albedo / 3.1416 * (1. - fren) * (1. - m);\n    \n    return diff + vec3(spec);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float a = roughness * roughness;\n    \n    vec2 uv= fragCoord/iResolution.xy;\n    vec3 lightPos = vec3(iMouse.xy/iResolution.xy, heightScale);\n\t\n    float height = texture(iChannel1, uv).x;\n    vec3 normal = normalFromHeight(uv, heightScale);\n    \n    vec3 pos = vec3(uv, height * heightScale);\n    vec3 viewDir = vec3(0., 0., 1.);\n    vec3 lightDir = normalize(lightPos - pos);\n    \n    vec3 irr = BRDF(normal, viewDir, lightDir, a, metallic, albedo);\n    \n    vec3 res = irr * radiance * dot(normal, lightDir);\n\n    fragColor = vec4(res, 1.);\n}","name":"Image","description":"","type":"image"}]}