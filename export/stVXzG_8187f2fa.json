{"ver":"0.1","info":{"id":"stVXzG","date":"1640943284","viewed":130,"name":"gamma 2.2 uv joe mama","username":"JuanDeager","description":"Top is inverse gamma (monitor transform). You should never see this.\nMiddle is perceptually linear (output sRGB directly), but physically curved.\nBottom is physically linear (1/2.2 gamma), but perceptually curved.\nGoogle \"learnopengl gamma\" for more info.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define DITHERING 1\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float gamma = 2.2;\n    if (uv.y < .333)\n    {\n        gamma = 1.0 / 2.2;\n    }\n    if (uv.y >= .333 && uv.y < .667)\n    {\n        gamma = 1.0;\n    }\n    \n    vec3 color = pow(uv.xxx, vec3(gamma));\n\n    if (DITHERING == 1)\n    {\n        vec2 uvNoise = uv * (vec2(iResolution.xy) / vec2(textureSize(iChannel0, 0)));\n        vec3 noiseSample = texture(iChannel0, uvNoise).rrr;\n        color += vec3((noiseSample - 0.5) / 256.0);\n    }\n\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}