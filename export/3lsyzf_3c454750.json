{"ver":"0.1","info":{"id":"3lsyzf","date":"1592659208","viewed":241,"name":"test:TexturedRayMarchedObjects","username":"mehow_one","description":"Attempt to understand how to texture a ray marched object with an image","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","metaballs","normals","mapping","uvs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 t3(sampler2D tex, vec3 p, vec3 n){\n \treturn  (texture(tex,p.xy*0.25).rgb*n.z*n.z\n            +texture(tex,p.zy*.25).rgb*n.x*n.x\n            +texture(tex,p.xz*.25).rgb*n.y*n.y);\n}\n\nvec3 calculateSurface(vec3 point, vec3 normal) {\n     return t3(iChannel0, point, normal);\n}\n\nvec3 calculateLighting(vec3 point, vec3 normal, float dist) {\n    vec3 lightDirection = vec3(1., 1., 1.);\n    \n\treturn vec3(dot(normal, lightDirection));\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n} \n\nfloat map(vec3 p)\n{\n\tfloat d = 2.0;\n\tfor (int i = 0; i < 16; i++)\n\t{\n\t\tfloat fi = float(i);\n\t\tfloat time = iTime * (fract(fi * 412.531 + 0.513) - 0.5) * 2.0;\n\t\td = opSmoothUnion(\n            sdSphere(p + sin(time + fi * vec3(52.5126, 64.62744, 632.25)) * vec3(2.0, 2.0, 0.8), mix(0.5, 1.0, fract(fi * 412.531 + 0.5124))),\n\t\t\td,\n\t\t\t0.4\n\t\t);\n\t}\n\treturn d;\n}\n\nvec3 calcNormal( in vec3 p )\n{\n    const float h = 1e-5; // or some other value\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // screen size is 6m x 6m\n\tvec3 rayOri = vec3((uv - 0.5) * vec2(iResolution.x/iResolution.y, 1.0) * 6.0, 3.0);\n\tvec3 rayDir = vec3(0.0, 0.0, -1.0);\n\t\n\tfloat depth = 0.0;\n\tvec3 p;\n\tfloat dist;\n\tfor(int i = 0; i < 32; i++) {\n\t\tp = rayOri + rayDir * depth;\n\t\tdist = map(p);\n        depth += dist;\n\t\tif (dist < 1e-6) {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n    depth = min(1.0, depth);\n\tvec3 n = calcNormal(p);\n    \n    vec3 surface = calculateSurface(p, n);\n    vec3 lighting = calculateLighting(p, n, dist);\n    \n    float b = max(0.0, dot(n, vec3(0.577)));\n    vec4 col = vec4(0.);\n    \n    if (dist == -1.) {\n        col = vec4(0.);\n    } else {\n        col = vec4(n * lighting, 1.);\n    }\n    \n    \n    //vec3 col = (0.5 + 0.5 * cos((b + iTime * 1.0) + uv.xyx * 2.0 + vec3(0,2,4))) * (0.85 + b * 0.35);\n    //col *= exp( -depth * 0.15 );\n\t\n    // maximum thickness is 2m in alpha channel\n    fragColor = vec4(col);\n}\n\n","name":"Image","description":"","type":"image"}]}