{"ver":"0.1","info":{"id":"flVGRd","date":"1638215420","viewed":555,"name":"Simple Lanczos Upsampling","username":"DrDesten","description":"Simple Implementation of Lanczos Resampling\n\nHold the left mouse button to show linear interpolation","likes":8,"published":1,"flags":0,"usePreview":1,"tags":["upsampling","lanczos","sinc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI    3.1415926535897932384626433\n#define PI_SQ 9.8696044010893586188344910\n\n#define SCALE .1 // Scale of image\n\n#define LANCZOS_SIZE 5 // Lanczos Kernel Size\n\nfloat saturate(float x) {\n    return clamp(x, 0., 1.);\n}\nvec2 saturate(vec2 x) {\n    return clamp(x, 0., 1.);\n}\n\n\nfloat lanczosWeight(float x, float r) {\n    if (x == 0.0) return 1.;\n    return (r * sin(PI * x) * sin(PI * (x / r) )) / (PI_SQ * x*x);\n}\nfloat lanczosWeight(vec2 x, float r) {\n    return lanczosWeight(x.x, r) * lanczosWeight(x.y, r);\n}\n\n/*vec3 lanczos(sampler2D sampler, vec2 coord, int r) {\n    vec2 res    = vec2(textureSize(sampler, 0));\n    vec2 ccoord = floor(coord * res) / res;\n\n    vec3 total = vec3(0);\n    \n    for (int x = -r; x <= r; x++) {\n        for (int y = -r; y <= r; y++) {\n            vec2  offs = vec2(x,y);\n            \n            vec2  sco  = (offs / res) + ccoord;\n            vec2  d    = clamp((sco - coord) * res, vec2(-r), vec2(r));\n            vec3  val  = texture(sampler, sco).rgb;\n            \n            total     += val * lanczosWeight(d, float(r));\n    \n        }\n    }\n\n    return total;\n}*/\n\nvec3 lanczos(sampler2D sampler, vec2 coord, int r) {\n    vec2 res    = vec2(textureSize(sampler, 0));\n    coord      += -0.5 / res;\n    vec2 ccoord = floor(coord * res) / res;\n\n    vec3  total  = vec3(0);    \n    for (int x = -r; x <= r; x++) {\n        for (int y = -r; y <= r; y++) {\n            vec2  offs = vec2(x,y);\n            \n            vec2  sco  = (offs / res) + ccoord;\n            vec2  d    = clamp((sco - coord) * res, vec2(-r), vec2(r));\n            vec3  val  = texelFetch(sampler, ivec2(sco * res), 0).rgb;\n            \n            float weight = lanczosWeight(d, float(r));\n            \n            total     += val * weight;\n        }\n    }\n\n    return total;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 coord = fragCoord / vec2(textureSize(iChannel0, 0)) * SCALE;\n    //vec2 coord = fragCoord / iResolution.xy;\n    \n    vec3 col = texture(iChannel0, coord).rgb;\n    \n    if (iMouse.z < 0.5) {\n        col = lanczos(iChannel0, coord, LANCZOS_SIZE);\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}