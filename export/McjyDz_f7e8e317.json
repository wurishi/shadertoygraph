{"ver":"0.1","info":{"id":"McjyDz","date":"1722190904","viewed":32,"name":"Uniforms & Aninmation ","username":"Matyah777","description":"Uniforms & Aninmation/ computação Grafica","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["uniforms","animaton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizar as coordenadas dos pixels\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Centralizar as coordenadas\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Criar um padrão de ondas utilizando senoides\n    float wave = sin(uv.x * 10.0 + iTime) + sin(uv.y * 10.0 + iTime);\n\n    // Criar um efeito de cores baseando-se na posição dos pixels e no tempo\n    vec3 color = vec3(0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0.0, 2.0, 4.0)));\n    color *= wave;\n\n    // Definir a cor do pixel\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}