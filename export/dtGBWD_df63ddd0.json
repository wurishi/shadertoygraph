{"ver":"0.1","info":{"id":"dtGBWD","date":"1702064677","viewed":49,"name":"SDF Intersection Detection test","username":"kurrycat","description":"WIP\nFind out whether signed distance fields intersect. Should work with all bound sdfs, but pretty slow\nWhen not clicking shows whether an intersection was found for the object being at the position of that pixel","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//sdf functions from iq:\n\n// The MIT License\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org\n\n\n// Signed distance to a 2D rounded box. Tutorials explaining\n// how it works: \n//\n// https://www.youtube.com/watch?v=62-pRVZuS5c\n// https://www.youtube.com/watch?v=s5NGeUV2EyU\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n// and iquilezles.org/articles/distfunctions2d\n\n\n// b.x = width\n// b.y = height\n// r.x = roundness top-right  \n// r.y = roundness boottom-right\n// r.z = roundness top-left\n// r.w = roundness bottom-left\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdCircle(in vec2 p, in float r) {\n    return length(p) - r;\n}\n\nfloat map_world(vec2 p) {\n    float d = sdRoundBox(p - vec2(-0.0), vec2(1.2, 0.9), vec4(0.1));\n    d = abs(d) - 0.07;\n    float d2 = sdRoundBox(p - vec2(0.3), vec2(0.4), vec4(0.1));\n    d2 = abs(d2) - 0.07;\n    float d3 = sdSegment(p, vec2(-0.6), vec2(0.4));\n    float d4 = sdCircle(p - vec2(-0.5, 0.2), 0.05);\n    \n    float t = d;\n    t = min(t, d2);\n    t = min(t, d3);\n    t = min(t, d4);\n    return t;\n}\n\nfloat map(vec2 p, vec2 test_p) {\n    float c = sdCircle(p - test_p, 0.2);\n    c = abs(c) - 0.1;\n    float t = map_world(p);\n    t = max(t, c);\n    return t;\n}\n\nvec2 grad_world(vec2 p, float EPSILON) {\n    return vec2(\n            map_world(vec2(p.x + EPSILON, p.y)) - map_world(vec2(p.x - EPSILON, p.y)),\n            map_world(vec2(p.x, p.y + EPSILON)) - map_world(vec2(p.x, p.y - EPSILON))\n    ) / (2.0 * EPSILON);\n}\n\nvec2 grad(vec2 p, vec2 test_p, float EPSILON) {\n    return vec2(\n            map(vec2(p.x + EPSILON, p.y), test_p) - map(vec2(p.x - EPSILON, p.y), test_p),\n            map(vec2(p.x, p.y + EPSILON), test_p) - map(vec2(p.x, p.y - EPSILON), test_p)\n    ) / (2.0 * EPSILON);\n}\n\nvec2 face_same_dir(vec2 normal, vec2 v) {\n    float d = dot(v, normal);\n    return d < 0.0 ? v - 2.0 * d * normal : v;\n}\n\nconst float SQRT2HALFS = sqrt(2.0) / 2.0;\nconst mat2 ROT45 = mat2(SQRT2HALFS, -SQRT2HALFS, SQRT2HALFS, SQRT2HALFS);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    vec2 test_p = iMouse.z > 0.001 ? m : p;\n\n\tfloat d = map(p, test_p);\n\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    // should be the maximum possible distance to an intersection to be efficient, but can be bigger\n    // circle radius: 0.3 -> 0.61\n    const float MAX_DT = 0.61;\n    const float MIN_DT = 1.0e-3f;\n    const float EPSILON = MIN_DT / 10.0;\n \n    d = map(test_p, test_p);\n    //col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-test_p)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-test_p)-0.015));\n\n\n    vec2 start_point = test_p;\n    float dt = map(start_point, test_p);\n    float last_dt = 0.0;\n    //vec2 dir = normalize(start_point-test_p);//vec2(0.0);\n    vec2 dir = vec2(0.0);\n    \n    const int points = 11;\n    int loops = int(iTime * 1.5) % points;\n    loops = 50;\n    for (int i = 0; i < loops && dt > MIN_DT; i++) {\n        vec3 p_col = vec3(1.0, 1.0, 0.0);\n    \n        vec2 g = grad(start_point, test_p, EPSILON);\n        g = g.x == 0.0 && g.y == 0.0 ? grad_world(start_point, EPSILON) : g;\n        g = g.x == 0.0 && g.y == 0.0 ? grad(start_point + vec2(MIN_DT), test_p, EPSILON) : g;\n        \n        g = face_same_dir(dir, g);\n        //grad.x = grad.x == 0.0 ? MIN_DT : grad.x;\n        dir = normalize(g);        \n        \n        vec2 next_p = start_point - g * dt;\n        float next_dt = map(next_p, test_p);\n        \n        if(next_dt > MAX_DT) {\n           //dir *= -1.0;\n           dir = ROT45 * dir;\n           p_col = vec3(1.0, 0.0, 0.0);\n        } else {\n            float n_d = sdSegment(p, start_point, start_point - g * dt);\n            col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(n_d))-0.001);\n        \n            last_dt = dt;\n            dt = next_dt;\n            start_point = next_p;\n        }\n\n        //col = mix(col, vec3(1.0, 1.0, 0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-start_point) - abs(dt)) - 0.0015));\n        col = mix(col, p_col, 1.0-smoothstep(0.0, 0.005, length(p-start_point) - 0.015));\n    }\n\n    if (dt <= MIN_DT) {\n        col = mix(col, vec3(0.0, 1.0, 0.0), 1.0-smoothstep(0.0, 0.005, length(p-start_point) - 0.025));\n    } else {\n        col = mix(col, vec3(1.0, 0.0, 0.0), 0.3);\n    }\n\n    if (iMouse.z <= 0.001) {\n        col = dt <= MIN_DT ? vec3(1.0, 0.0, 0.0) : vec3(0.0, 1.0, 0.0);\n        //col = d >= 0.3 ? mix(col, vec3(0.0, 0.0, 1.0), 0.3) : col;\n    }\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}