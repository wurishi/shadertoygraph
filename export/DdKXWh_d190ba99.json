{"ver":"0.1","info":{"id":"DdKXWh","date":"1681037272","viewed":237,"name":"Rev2023 - Shader Showdown #1","username":"Flopine","description":"My shader showdown qualifier shader :) A version of it at least XD","likes":14,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","modeling","revision","competition","log","demoparty"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord.xy - iResolution.xy)/iResolution.y;\n    vec2 uu = fragCoord.xy / iResolution.xy;\n    fragColor = sqrt(vec4(texture(iChannel0, uu*.96+length(uv)*0.015).r,\n                    texture(iChannel0, uu*.96+length(uv)*0.02).g,\n                    texture(iChannel0, uu*.96+length(uv)*0.025).b,\n                    1.\n                ));\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define hr vec2(1.,sqrt(3.))\n#define hexa(u) max(abs(u.x),dot(abs(u),normalize(hr)))\n#define PI acos(-1.)\n\n#define time iTime\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a)) \n\n\nvec4 hexgrid (vec2 uv)\n{\n    vec2 ga=mod(uv,hr)-hr*.5, gb=mod(uv-hr*.5, hr)-hr*.5,\n    guv = (length(ga)<length(gb))? ga:gb,\n    gid = uv-guv;\n    return vec4(guv,gid);\n}\n\nfloat extrude (vec3 p, float d, float h)\n{\n    vec2 q = vec2(d,abs(p.z)-h);\n    return min(0.,max(q.x,q.y))+length(max(q,0.0));\n}\n\nfloat smin (float a, float b, float k)\n{\n    float h = clamp(.5+.5*(b-a)/k, 0.,1.);\n    return mix(b,a,h)-k*h*(1.-h);\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sk (vec3 p)\n{\n    p *= 2.5;\n    vec3 pp = p;\n    \n    float s = length(p)-1.;\n    s = max(-p.y-.33,s); \n    p.x = abs(p.x)-.33;\n    p.z += 1.1;\n    s = max(-(length(p)-.4), s);\n\n    p = pp;\n    p.z += .8;\n    p.y += .2;\n    p.yz *= rot(PI/8.);\n    vec3 sc = vec3((p.y*.5+1.2)*.3, .5, 0.05);    \n    s = smin(s, box(p,sc), 1.);\n\n    p.y += .5;\n    p.x = abs(abs(p.x)-.2)-.1;\n\n    float t = box(p, vec3(0.05, 0.2, 0.05));\n    s = min(s,t);\n\n    return s/2.5;\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(PI/10.);\n    vec2 logpol = vec2(log(length(p.xy)),atan(p.x,p.y))/(PI/sqrt(3.));\n    vec4 hg = hexgrid(logpol*2.-time);\n    float d = extrude(p, 0.5-hexa(hg.xy), 0.01)-0.050;\n\n    d = min(d, extrude(p, hexa(hg.xy), 0.01)-0.35);\n    d= min(sk(vec3(hg.xy,p.z)),d);\n\n    return max(-length(p)+.35, d);\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nfloat AO (vec3 p,vec3 n, float e)\n{return clamp(SDF(p+e*n)/e,0.,1.);}\n\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (2.*fragCoord.xy - iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0.001,0.001, -3.), rd=normalize(vec3(uv,1.)), p=ro, \n    col=vec3(0.);\n\n    bool hit=false;float t=0.0;\n    for(float i=0.0; i<64.;i++)\n    {\n        p= ro+t*rd;\n        float d = SDF(p);\n        if (d<.01)\n        {\n            hit=true;\n            break;\n        }\n        t += d*.6;     \n    }\n\n    if (hit)\n    {\n        vec3 n = gn(p);\n        float ao = AO(p,n,0.05)+AO(p,n,0.1)+AO(p,n,0.25);\n        col = vec3(1.-ao/2.5);\n    }\n\n    col = mix(col, vec3(0.,0.01,0.06), 1.-exp(-0.05*t*t));\n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}