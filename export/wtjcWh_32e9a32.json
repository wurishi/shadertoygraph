{"ver":"0.1","info":{"id":"wtjcWh","date":"1672829506","viewed":64,"name":"point2plane","username":"BigotedSJW","description":"from nowhere","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["simple","experiment"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float ang1 = 0. ;//iTime*3.14159 * 0.25;\n    float ang2 = iTime*3.14159 * 0.125;\n    float ang3 = 0. ;//(ang1 + ang2)/2.;\n    \n    vec2 sc1 = vec2(cos(ang1), sin(ang1));\n    vec2 sc2 = vec2(cos(ang2), sin(ang2));\n    vec2 sc3 = vec2(cos(ang3), sin(ang3));\n    \n    \n    mat3 rX = mat3(\n        vec3(1.,0.,0.),\n        vec3(0., sc1.x, sc1.y),\n        vec3(0., -sc1.y, sc1.x)\n    );\n    \n    mat3 rY = mat3(\n        vec3(sc2.x, 0., -sc2.y),\n        vec3(0.,1.,0.),\n        vec3(sc2.y, 0., sc2.x)\n    );\n    \n    mat3 rZ = mat3(\n        vec3(sc3.x, sc3.y, 0.),\n        vec3(-sc3.y, sc3.x, 0.),\n        vec3(0.,0.,1.)\n    );\n    \n    mat3 rot = rX * rY * rZ;\n    \n    vec3 planeNorm = rot*vec3(0., -1.0, 0.0);\n    \n    vec3 uNorm = vec3(1., 0., 0.);\n    vec3 vNorm = vec3(0., 0., 1.);\n    \n    vec3 constPointOnPlane = rot*vec3(0., -2., 0.);\n    \n    vec2 uv =(fragCoord - .5 * iResolution.xy) / iResolution.y;\n    vec2 uvStretch = uv - vec2(uv.x*uv.x*uv.x, uv.y*uv.y*uv.y)/6.0;\n    \n    vec3 cameraRay = rot*normalize(vec3(uvStretch, 0.5)); \n    vec3 cameraOrigin = -rot*vec3(0.,0.,16.);\n    \n    float denom = dot(cameraRay, planeNorm);\n    \n    float dist;\n    vec3 pointOnPlane;\n    \n    if(denom > 1e-6){\n    \tdist = dot(constPointOnPlane - cameraOrigin, planeNorm) / denom;\n    \tpointOnPlane = dist*cameraRay + cameraOrigin;\n    } else {\n    \tdist = 1.0;\n        pointOnPlane = vec3(0.);\n    }\n    \n    vec2 planeUV = vec2(dot(pointOnPlane, uNorm), dot(pointOnPlane, vNorm));\n    \n  \n   \n    vec3 col = vec3(0.);\n    if(denom > 1e-6 && dist < 16.0){\n        vec4 tex = textureLod(iChannel0, planeUV, dist/8.0);\n        vec3 reflectionRay = reflect(cameraRay, planeNorm);\n        vec4 reflection = texture(iChannel1, reflectionRay);\n        col = tex.rgb + 0.25*(reflection.rgb - length(tex.rgb));\n    } else {\n    \tvec4 tex = texture(iChannel1, cameraRay);\n        col = tex.rgb;\n    }\n\t\n   \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}