{"ver":"0.1","info":{"id":"MlcyDS","date":"1533835085","viewed":128,"name":"Bifurcation Diagram","username":"matt77hias","description":"The Bifurcation Diagram of the logistic map.\n\nThis is an application of Chaos Theory applied to a deterministic system (e.g., growth of a population of rabbits) to illustrate its 'chaotic' behavior.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bifurcationdiagram","chaostheory"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float LogisticMap(float x, float k) {\n    float y = x;\n    \n    for (int i = 0; i < 500; ++i) {\n        y = k * y * (1.0f - y);\n    }\n    \n    uint match = 0u;\n    \n    for (int j = 0; j < 500; ++j) {\n        y = k * y * (1.0f - y);\n        match |= uint(abs(x - y) < 1e-3f);\n    }\n    \n    return float(match);\n}\n\nconst vec2 min_kx = vec2(2.4f, 0.0f);\nconst vec2 max_kx = vec2(4.0f, 1.0f);\n\nvoid mainImage(out vec4 color, in vec2 fragCoord) {\n    vec2  uv    = fragCoord / iResolution.xy;\n    vec2  kx    = mix(min_kx, max_kx, uv);\n    float value = LogisticMap(kx.y, kx.x);\n        \n    color = vec4(0.0f, 0.0f, value, 1.0f);\n}","name":"Image","description":"","type":"image"}]}