{"ver":"0.1","info":{"id":"DtlXzl","date":"1675207892","viewed":100,"name":"diffractiondive","username":"kfaxi","description":"shader shows the near and far field intensity pattern of a circular aperture with the camera scanning through the z-axis. red and blue are positive and negative parts of real portion of complex amplitude, green is intensity. try comment out lines 38,39,40","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["optics","fresnel","diffraction","fraunhofer"],"hasliked":0,"parentid":"clsSzj","parentname":"separating double slit diffrac"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec3 uvw = vec3(fragCoord.x/iResolution.y-0.5*iResolution.x/iResolution.y,\n                    fragCoord.y/iResolution.y-0.5,\n                    iTime/30.0-0.1);\n    //uvw.xy *= max(1.0,uvw.z);\n    vec2 camp;\n    float k = 200.0;\n    int n_res = 30;\n    float w = 0.1;\n    //bool source1 = false;\n    bool source1 = true;\n    float g = w+pow(mod(-0.1*iTime,1.0),5.0);\n    float f = 1.0;\n    float d;\n    float arg1;\n    float arg2;\n    \n    float sc = 0.002;//*max(1.0,uvw.z);\n    \n    // Time varying pixel color\n    for (int i=0;i<n_res;i++){\n        for (int j=0;j<n_res;j++){\n            float x = -w/2.0+(float(j))/(float(n_res))*w;\n            float y = -w/2.0+(float(i))/(float(n_res))*w;\n            if (x*x+y*y>w*w/4.0) continue;\n            if (source1) {\n                d = length(uvw-vec3(x,y,0.0));\n                arg1 = -iTime*f+d*k;\n                camp += vec2(cos(arg1),sin(arg1))/d;\n            }\n        }\n    }\n    vec3 col = vec3(0.0,0.0,0.0);\n    float intensity = pow(sc*length(camp),2.0);\n    float amp = sc*camp.y;\n    col.z = amp;\n    col.x = -amp;\n    col.y = intensity;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}