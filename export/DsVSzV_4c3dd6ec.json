{"ver":"0.1","info":{"id":"DsVSzV","date":"1681942832","viewed":82,"name":"TP3-Animation-Dario","username":"dariosango44","description":"Última entrega.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["6042023"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Structure for texture\n// c : Color\n// s : Specular\nstruct T {\nvec3 c;\nfloat s;\n};\n\n\n\n//Primitives water...-------------------------------------------------------------------------------------\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Surface( in vec2 p )\n{\n\treturn 1.5*cos(p.y/1.5+iTime)-1.0;\n} //NOT USED\n\n// Implicit surface defining the terrain\n// p : Point\nfloat ImplicitTerrain(in vec3 p)\n{\n    float z = Surface( p.xy );\n    float h = (p.z - z)/2.0; // Lipschitz is defined as a constant 2.0\n    return h;\n}//NOT USED\n\nfloat cylinder_wave(vec3 p, vec3 c, float r, float h, vec3 direction, float t, float frequency, float amplitude)\n{\n    vec3 dir = normalize(direction);\n\n    // Calculate the distance from p to the axis of the cylinder in the direction of 'dir'\n    float cylinder = length(p - c - dir * dot(p - c, dir)) - r;\n\n    // Calculate the distance to the top and bottom planes of the cylinder\n    float p1 = dot((p-c),-dir);\n    float p2 = dot((p-(c + dir * h)), dir);\n\n    // Add waves to the cylinder\n    float wave = sin(dot(p, vec3(0.5, 0.3, 0.7)) * frequency - t * amplitude) * amplitude;\n\n    float v = max(max(cylinder, p1), p2) + wave;\n    return v;\n}//NOT USED\n\nV Cylinder_ola(vec3 p, vec3 c, float r, float h, vec3 direction, int index, float t)\n{\n    float speed = 1.0 + sin(t) * 0.5;\n    float v = cylinder_wave(p, c, r, h, direction, t, 1.0, 0.1) * speed;\n    return V(v, index);\n}//NOT USED\n\n/**\n*\n* Calculates the distance to a wave function at a given 2D position and time.\n* @param pos The 2D position in the xz plane\n* @param time The time parameter to animate the wave function\n*\n* @return The distance from the position to the wave function\n*/\nfloat distToWave(vec2 pos, float time) {\n    // Wave parameters\n    float amplitude = 0.4;    // Height of the waves\n    float frequency = 1.;    // Number of waves\n    float speed = 3.5;        // Speed of the waves\n\n    // Calculate the distance to the wave\n    float dist = pos.y - amplitude * sin(pos.x * frequency + time * speed);\n    \n    return dist;\n}//NOT USED\n\n/**\n * Calcula la distancia de un punto a un plano en movimiento con ondas sinusoidales.\n * \n * @param p el punto a evaluar.\n * @param n el vector normal del plano.\n * @param o la posición del plano en el espacio.\n * @param time el desplazamiento de tiempo para las ondas sinusoidales.\n * @param index el índice para identificar la figura en la escena.\n *\n * @return el valor V que representa la distancia del punto al plano con ondas sinusoidales.\n */\nV planeWithWaves(vec3 p, vec3 n, vec3 o, float time, int index) {\n    vec2 pos = vec2(p.x, p.z);\n    float d = distToWave(pos, time);\n    return V(d, index);\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center \n// r : radius\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Cube \n// p : point\n// c : center \n// r : radius\nV Cube(vec3 p,vec3 c,float r,int index)\n{\n   vec3 q = abs(p-c) - vec3(r);\n  return V(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0),index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n        return V(a.v,a.i);\n    else \n    {\n        return V(b.v,b.i);\n    }\n}\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\n\n// Différence de d1-d2, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Difference(V a,V b)\n{\n    if (a.v> -b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(-b.v,b.i);\n    }\n}\n// Dice \n// p : point\n// c : center \n// r : radius\nV Dice(vec3 p,vec3 c,float r,int index)\n{\n  return Intersection(Cube(p,c,r*0.75,index),Sphere(p,c,r,index));\n}\n\n/**\n * Método para crear una caja.\n *\n * @param p La posición del punto que se quiere evaluar.\n * @param c La posición del centro de la caja.\n * @param size El tamaño de la caja en cada eje.\n * @param index El índice del material de la caja.\n *\n * @return Un objeto V que representa la caja.\n */\nV Box(vec3 p, vec3 c, vec3 size, int index) {\n  vec3 q = abs(p - c) - size * 0.5;\n  float fieldValue = length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);\n  return V(fieldValue, index);\n}\n\n/**\n * Método para crear una pirámide.\n *\n * @param p La posición del punto que se quiere evaluar.\n * @param v El vértice de la pirámide.\n * @param s El tamaño de la pirámide.\n * @param index El índice del material de la pirámide.\n *\n * @return Un objeto V que representa la pirámide.\n */\nV Pyramid(vec3 p, vec3 v, float s, int index) {\n    vec3 dir = normalize(p - v);\n    vec2 q = abs(p.xz - v.xz) - vec2(s);\n    float pyramid = max(max(-dir.y * max(q.x, q.y), -p.y), -length(max(q, 0.0)));\n    return V(pyramid, index);\n}\n\n\n/**\n * Método para crear la estructura del molino de viento.\n *\n * @param p La posición del punto que se quiere evaluar.\n * @param c La base del cilindro en coordenadas cartesianas (x, y, z).\n * @param r El radio del cilindro.\n * @param h La altura del cilindro.\n * @param direction La dirección del eje del cilindro.\n * @param size El tamaño de la caja que se añade al cilindro.\n * @param index_box El índice del material de la caja.\n * @param index_bola El índice del material de la esfera.\n * @param index_structure El índice del material del cilindro.\n *\n * @return Un objeto V que representa la estructura del molino de viento.\n */\nV Cylinder(vec3 p, vec3 c, float r, float h, vec3 direction, int index) {\n    \n    vec3 dir = normalize(direction);\n\n    // Calculate the distance from p to the axis of the cylinder in the direction of 'dir'\n    float cylinder = length(p - c - dir * dot(p - c, dir)) - r;\n\n    // Calculate the distance to the top and bottom planes of the cylinder\n    float p1 = dot((p-c),-dir);\n    float p2 = dot((p-(c + dir * h)), dir);\n    \n    float v = max(max(cylinder, p1), p2);\n    return V(v, index);\n}\n\n/**\n * Método para crear una semiesfera.\n *\n * @param p La posición del punto que se quiere evaluar.\n * @param c El centro de la semiesfera.\n * @param r El radio de la semiesfera.\n * @param o El origen del plano.\n * @param n El vector normal al plano.\n * @param time El tiempo para el movimiento.\n * @param index El índice del material de la semiesfera.\n *\n * @return Un objeto V que representa la semiesfera.\n */\nV DemiSphere(vec3 p, vec3 c, float r, vec3 o, vec3 n, float time, int index){\n\n    V s1 = Sphere(p,c,r, index);\n    V p1 = planeWithWaves(p,o,n,time,1);\n    \n    V tal;\n    tal.v = (max(s1.v,p1.v));\n    tal.i = index;\n    \n    return tal;\n}\n\n\n/**\n* Método para crear una estructura de molino de viento.\n*\n* @param p La posición inicial de la estructura.\n* @param c La posición de la base del cilindro en coordenadas polares (sin(teta), cos(teta)).\n* @param r El radio del cilindro.\n* @param h La altura del cilindro.\n* @param direction La dirección de la estructura.\n* @param size El tamaño de la caja y la bola en la estructura.\n* @param index_box El índice del material de la caja en la estructura.\n* @param index_bola El índice del material de la bola en la estructura.\n* @param index_structure El índice del material de la estructura.\n*\n* @return Un objeto V que representa la estructura de molino de viento.\n*/\nV structure_WindMill(vec3 p, vec3 c, float r, float h, vec3 direction, vec3 size, int index_box, int index_bola, int index_structure){\n\n\n    V base = Cylinder(p,c,r-0.3,h,direction,index_structure);\n    \n    \n    float altura = h;\n    vec2 aux = vec2(c.y,c.z + h);\n    vec3 ubi_box = vec3(c.x, aux);\n    V caja = Box(p,ubi_box,size,index_box);\n    \n    vec2 aux1 = vec2(c.y,c.z+h);\n    float extremo = size.x;\n    vec3 ubi_sphere = vec3(c.x+extremo-2., aux1);\n    V centro = Sphere(p,ubi_sphere,r+0.1,index_bola);\n    \n    \n    base = Union(base, caja);\n    base = Union(base, centro);\n \n    return base;\n}\n\n\n/**\n * Método para crear aspas de molino de viento.\n *\n * @param p La posición inicial del aspa.\n * @param c El centro del aspa.\n * @param size El tamaño del aspa en cada eje (x, y, z).\n * @param index El índice del material del aspa.\n *\n * @return Un objeto V que representa el aspa del molino de viento.\n */\nV blades_WindMill(vec3 p, vec3 c, vec3 size, int index){\n    \n    //Cambiando centros y sizes conseguimos las diferentes aspas\n    \n    vec3 centro2 = vec3(c.x,c.y,-c.z);\n    \n    V aspa1 = Box(p,c,size,index);\n    V aspa2 = Box(p,centro2,size,index);\n    \n    vec3 size3 = vec3(size.z,size.y,size.x);\n    V aspa3 = Box(p,c,size,index);\n    V aspa4 = Box(p,c,size,index);\n    \n    \n    aspa1 = Union(aspa1, aspa2);\n    aspa1 = Union(aspa1, aspa3);\n    aspa1 = Union(aspa1, aspa4);\n\n    return aspa1;\n\n}\n\n/**\n * Método para crear un cono elíptico. \n *\n * @param p La posición del punto que se quiere evaluar.\n * @param c La base del cono en coordenadas polares (sin(teta), cos(teta)).\n * @param h La altura del cono.\n * @param index El índice del material del cono.\n *\n * @return Un objeto V que representa el cono elíptico.\n *\n * pris sur Indigo Quilez puis modifié un peu\n**/\nV sdConelisse( in vec3 p, in vec2 c, float h, int index )\n{\n  // c is the sin/cos of the angle, h is height\n  // Alternatively pass q instead of (c,h),\n  // which is the point at the base in 2D\n  vec2 q = h*vec2(c.x/c.y,1.0);\n    \n  vec2 w = vec2( length(p.xy), -p.z );\n  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );\n  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );\n  float k = sign( q.y );\n  float d = min(dot( a, a ),dot(b, b));\n  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );\n  return V (sqrt(d)*sign(s), index);\n}\n\n/**\n * Método para crear un globo aerostático.\n *\n * @param p La posición inicial del globo.\n * @param h La altura del globo.\n * @param c El centro del cubo a quitar de la punta del cono.\n * @param index El índice del material del globo.\n *\n * @return Un objeto V que representa el globo aerostático.\n */\n \nV ballon (vec3 p, float h, vec3 c, int index)\n{\n    // On créer le centre de notre ballon à partir de la hauteur\n    vec3 centreballon = vec3 (0.,0., 1.85*h);\n    \n    // On assemble un cone et une sphère correctement placé \n    V bal = Union (sdConelisse (translation (rotationX (p, 3.1415), \n                                             vec3(0.,0., -h/2.99)), \n                               vec2 (0.60, 0.70), h, index), \n                   Sphere(p, centreballon, 10.*h/10., index)); \n    // On enlève la petite pointe du cone à l'aide de la différence avec un cube             \n      bal = Difference (bal, Cube (p, c+vec3 (0.,0., h/3.), h/4., index)); \n    return bal;   \n}\n\n/**\n * Método para crear una cesta en forma de V para un globo aerostático.\n *\n * @param p La posición inicial de la cesta.\n * @param c El centro de la cesta.\n * @param size El tamaño de la cesta en cada eje (x, y, z).\n * @param h La altura de la cesta con respecto al centro del globo.\n * @param index El índice del material de la cesta.\n *\n * @return Un objeto V que representa la cesta en forma de V.\n */\nV cestilla (vec3 p, vec3 c, vec3 size, float h, int index)\n{\n    V cesta = Box(p,c,size,index);\n    \n    vec3 size1 = vec3(size.x, size.y, size.z + size.x);\n    vec3 center1 = vec3(c.x + size.x/3.,c.y +size.y/3.,c.z+h/2.);\n    V tirante1 = Box(p,center1,vec3(0.2,0.2,5.),11);\n    \n    vec3 size2 = vec3(size.x, size.y, size.z + size.x);\n    vec3 center2 = vec3(c.x - size.x/3.,c.y +size.y/3.,c.z+h/2.);\n    V tirante2 = Box(p,center2,vec3(0.2,0.2,5.),11);\n    \n    vec3 size3 = vec3(size.x, size.y, size.z + size.x);\n    vec3 center3 = vec3(c.x - size.x/3.,c.y -size.y/3.,c.z+h/2.);\n    V tirante3 = Box(p,center3,vec3(0.2,0.2,5.),11);\n    \n    vec3 size4 = vec3(size.x, size.y, size.z + size.x);\n    vec3 center4 = vec3(c.x + size.x/3.,c.y - size.y/3.,c.z+h/2.);\n    V tirante4 = Box(p,center4,vec3(0.2,0.2,5.),11);\n    \n    cesta = Union(cesta, tirante1);\n    cesta = Union(cesta, tirante2);\n    cesta = Union(cesta, tirante3);\n    cesta = Union(cesta, tirante4);\n\n    return cesta; \n    \n}\n\nV globo(vec3 p, vec3 c_globo, float h_globo, vec3 c_cesta, vec3 size, float h_cesta, int index_globo, int index_cesta){\n\n    V globo = ballon(p,h_globo,c_globo,index_globo);\n    globo = Union(globo, cestilla(p,c_cesta,size,h_cesta,index_cesta));\n    return globo;\n}\n\nV nube(vec3 p, vec3 c, float r, int index){\n\n    V u = Sphere(p,c,r,index);\n    \n    u = Union(u, Sphere(p,vec3(c.x + r, c.y, c.z),r,index));\n    u = Union(u, Sphere(p,vec3(c.x - r, c.y, c.z),r,index));\n    \n    u = Union(u, Sphere(p,vec3(c.x , c.y + r, c.z),r,index));\n    u = Union(u, Sphere(p,vec3(c.x , c.y - r, c.z),r,index));\n    u = Union(u, Sphere(p,vec3(c.x , c.y + 2.*r, c.z),r*0.9,index));\n    u = Union(u, Sphere(p,vec3(c.x , c.y - 2.*r, c.z),r*0.8,index));\n\n\n    u = Union(u, Sphere(p,vec3(c.x + r/3., c.y, c.z),r,index));\n    u = Union(u, Sphere(p,vec3(c.x , c.y+ r/3., c.z),r,index));\n    u = Union(u, Sphere(p,vec3(c.x , c.y, c.z+ r/3.),r,index));\n    u = Union(u, Sphere(p,vec3(c.x + r/3., c.y, c.z),r,index));\n    \n    u = Union(u, Sphere(p,vec3(c.x - r/3., c.y, c.z),r,index));\n    u = Union(u, Sphere(p,vec3(c.x , c.y - r/3., c.z),r,index));\n    u = Union(u, Sphere(p,vec3(c.x , c.y, c.z - r/3.),r,index));\n\n    \n    return u;\n\n   \n}\n\n// Méthode pour développer\n// un bateau, je n'ai pas eu\n// le temps.\nV titanic(vec3 p){\n    \n    vec3 centro = vec3(5.,5.,0.);\n    vec3 size = vec3(7.5,2.5,2.5);\n    \n    V u = Box(p,centro, size,2);\n    u = Union(u, Box(p,vec3(5.,6.,1.), vec3(8.0,2.5,0.5),2));\n    //u = Cylinder();\n\n    \n    return u;\n\n\n}\n\n// Potential field of the object\n// p : point\nV object(vec3 p)\n{\n\n  //MOVIMIENTO\n  float time1 = iTime * 0.5; // Adjust speed of motion\n  float time3 = iTime * 1.5; // Adjust speed of motion\n\n  float radius1 = 10.5; // Radius of the circle\n  float radius0 = 0.5;\n  float angle1 = iTime * 3.5;\n  float angle2 = iTime * 7.5;\n  float angle3 = iTime * 2.5;\n\n  \n  \n  //SEMIMUNDO\n  V u = DemiSphere(p,vec3(0.,0.,-10.),25.,vec3(0.,1.,-0.5), vec3(0.,0.,1.), time1,1);\n\n  // globo\n  u = Union(u,\n  globo(vec3(p.x + radius1 * sin(time1), p.y + radius1 * cos(time1), -10. + p.z ),vec3(0.,0.,0.), 4.1, vec3(0.,0.,0.),vec3(1.5,1.5,1.5), 5.,4, 10));\n  \n\n    \n    \n  //WINDMILLS\n  \n  V v =  structure_WindMill(p, vec3(-15.,0.,-5.), 1., 20., vec3(0.,0.,1.), vec3(4.,2.5,2.), 2, 2, 2);\n  u = Union(u, blades_WindMill(Rx(angle1) * ( p - vec3(-15.,0.,15.)), vec3(2.,0.,5.), vec3(0.5,1.,10.), 2));\n  u = Union(u, v);\n  \n  V v1 =  structure_WindMill(p, vec3(5.,20.,-5.), 1., 20., vec3(0.,0.,1.), vec3(4.,2.5,2.), 2, 2, 2);\n  u = Union(u, blades_WindMill(Rx(-angle2) * ( p - vec3(5.,20.,15.)), vec3(2.,0.,5.), vec3(0.5,1.,10.), 2));\n  u = Union(u, v1);\n  \n  \n  V v2 =  structure_WindMill(p, vec3(-5.,-20.,-5.), 1., 20., vec3(0.,0.,1.), vec3(4.,2.5,2.), 2, 2, 2);\n  u = Union(u, blades_WindMill(Rx(angle3) * ( p - vec3(-5.,-20.,15.)), vec3(2.,0.,5.), vec3(0.5,1.,10.), 2));\n  u = Union(u, v2);\n   \n  //BARQUILLO\n  \n  //u = Union(u, titanic(p));\n  \n \n  //NUBES\n  u = Union(u, nube(p, vec3(10. ,10.+ sin(time3)*4.,10.),2.,3));\n  u = Union(u, nube(p, vec3(-10.,15.+ sin(time3)*4.,10.),2.,3));\n  u = Union(u, nube(p, vec3(-10.,-15.+ sin(time3)*4.,10.),2.,3));\n  u = Union(u, nube(p, vec3(-10.,-10.+ sin(time3)*4.,10.),2.,3));\n  u = Union(u, nube(p, vec3(10.,-10.+ sin(time3)*4.,10.),2.,3));\n  \n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  V vp = object(p);\n    float v = vp.v;\n  n.x = object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.65,0.75,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n// Textures ----------------------------------------------------------------------------\n\nint Checker(float x, float y, float z){\n\n   return(int(abs(x)) + int(abs(y)) + int(abs(z))) % 2 ;\n   \n}\n\nvec3 checkerColor(float x, float y, float z, vec3 color1, vec3 color2, float scale)\n{\n    // Escala las coordenadas para que los cuadros sean del tamaño deseado\n    x *= scale;\n    y *= scale;\n    z *= scale;\n    \n    // Calcula el valor checker en la posición 3D\n    int checkerVal = Checker(x, y, z);\n    \n    // Establece el color en función del valor checker\n    vec3 checkerColor = checkerVal == 0 ? color1 : color2;\n    \n    return checkerColor;\n}\n\n\n\nfloat Axial(float x, float y, float z) {\n\n    float r = sqrt ( x * x + y * y + z * z );\n    float width = 2.; // Ancho de la línea\n    float falloff = 2.0; // Factor de atenuación\n    return 0.5 + 0.5 * cos (3.1415927 * pow(r, falloff) / width);\n}\n\n\nfloat WoodNoise(vec3 p) {\n\n    return (Noise(p) + Noise(p * 2.0) * 0.5 + Noise(p * 4.0) * 0.25) / 1.75;\n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\nT Texture0(in vec3 p)\n{\n  return T(vec3(0.80,0.80,0.80),0.45);   \n}\n\nT Texture1(in vec3 p)\n{\n  return T(vec3(0.82,0.81,0.90),0.45);   \n}\n\nT Texture2(in vec3 p)\n{\n  return T(vec3(0.82,0.94,0.80),0.60);   \n}\n\nT Texture3(in vec3 p)\n{\n  return T(vec3(0.82,0.91,0.90),0.0);   \n}\n\nT Checker_Color(in vec3 p, vec3 color1, vec3 color2, float scale)\n{\n  vec3 color;\n  vec3 scale_p = p * scale;\n  int checker = Checker(scale_p.x, scale_p.y, scale_p.z);\n  if (checker == 0) {\n    color = color1; // Primer color para los cuadrados negros\n  } else {\n    color = color2; // Segundo color para los cuadrados blancos\n  }\n  return T(color,1.0); // Devolver la estructura T con el color y la opacidad\n}\n\nT TextureCheckerConvencional(in vec3 p)\n{\n  return T(vec3(Checker(p.x,p.y,p.z)),1.0);\n}\n\nT Uniform(in vec3 p, vec3 color)\n{\n    \n  return T(normalize(color),10.0);\n}\n\nT Axial_t(in vec3 p)\n{\n  return T(vec3(Axial(p.x,p.y,p.z)), 0.0);\n}\n\nT Axial_Color_Center(in vec3 p, vec3 color, vec3 center)\n{\n\n  vec3 q = p - center;\n  return T(color * vec3(Axial(q.x,q.y,q.z)), 0.0);\n}\n\nT Noise_t(in vec3 p)\n{\n  float noise = Noise(p);\n  float noise1 = Noise(p);\n  return T(vec3(0., noise, 1.0), 0.3);\n}\n\nT Marbre(in vec3 p, float scale, float frequency, vec3 color1, vec3 color2, float sino)\n{\n  // Generar el ruido \n  float noise = Noise(p * scale);\n  // Crear el patrón sinusoidal\n  float pattern = sin(dot(p * frequency, vec3(1.0)));\n  // Crear el mármol combinando el ruido y el patrón sinusoidal\n  float marble = mix(noise, pattern, sino);\n  // Asignar los colores de la textura de mármol\n  vec3 color = mix(color1, color2, marble);\n  // Crear la textura\n  return T(color, 1.0);\n}\n\n\nT Marbre_ssv(in vec3 p, float scale, float frequency, vec3 color1, vec3 color2)\n{\n  // Generar el ruido\n  float noise = Noise(p * scale);\n  // Crear la textura de mármol sin venas\n  vec3 color = mix(color1, color2, noise);\n  // Crear la textura\n  return T(color, 1.0);\n}\n\nT Wood_t(in vec3 p, vec3 color1, vec3 color2) {\n\n    float noise = WoodNoise(p);\n    vec3 color = mix(color1, color2, pow(noise, 1.0));\n    return T(color, 0.6);\n}\n\nT Voronoi_t(in vec3 p, vec3 algo, vec3 color, float alpha) {\n\n    float scale = 0.4; // valor arbitrario para la intensidad del patrón Voronoi\n    vec3 v = Voronoi(p);\n    vec3 col = mix(vec3(1.0), color, clamp(scale * v.x, 0.0, 1.0));\n    return T(col, alpha);\n}\n\n\n\n// Compute texture \n// p : Point\n// n : Normal\nT Color(in vec3 p,in vec3 n)\n{\n    V vp= object(p);\n    if (vp.i==0){\n        \n        return Uniform(p, vec3(0.,255.,207.));\n        return Marbre_ssv(p, 1.0, 1.0, vec3(0.9,0.8,0.1), vec3(0.5,0.4,0.1));\n    }\n    else if (vp.i==1)\n    {\n        return Marbre(p, 1.0, 1.0, vec3(0.,0.,0.999), vec3(0.,0.,0.4), 0.4);\n    }\n    else if (vp.i==2)\n    {\n        return Voronoi_t(p, vec3(0.,0.,0.),vec3(1.,1.,1.),0.);\n    }\n    else if (vp.i==3)\n    {\n        return Voronoi_t(p, vec3(0.,0.,0.),vec3(0.,0.,0.),0.);\n    }\n    else if (vp.i==4)\n    {\n        return Checker_Color(p, vec3(1.,1.,1.), vec3(1.,0.,0.), 0.8);\n    }\n    else if (vp.i==5)\n    {\n        return TextureCheckerConvencional(p);\n    }\n    else if (vp.i==6)\n    {\n        return Uniform(p, vec3(1.,0.,1.));\n    }\n    else if (vp.i==7)\n    {\n        return Axial_Color_Center(p, vec3(1.,0.,0.), vec3(0.,10.,2.));\n    }\n    \n    else if (vp.i==8)\n    {\n        return Axial_Color_Center(p, vec3(0.,1.,0.), vec3(0.,0.,0.));\n    }\n    \n    else if (vp.i==9)\n    {\n        return Noise_t(p);\n    }\n    else if (vp.i==10)\n    {\n        return Uniform(p,vec3(165.,42.,42.));\n    }\n    else if (vp.i==11)\n    {\n        return Uniform(p,vec3(0.,0.,0.));\n    }\n    else if (vp.i==12)\n    {\n        return Uniform(p, vec3(5.,75.,15.));\n        \n    }\n}\n\n\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    T tex=Color(p,n);\n\n    // Ambient color\n    vec3 ambient = 0.5*tex.c;\n        \n    // Shadow computation\n    float s = Shadow(p+0.01*n,n,l);\n\n// Phong diffuse\n    vec3 diffuse = 0.5  * clamp(dot(n, l),0.0,1.0) * tex.c;\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = tex.s * pow(clamp(dot(r,l),0.0,1.0),28.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise \n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    //f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Compute the distance to the Voronoi boundary\n// x : Point\n// Return (closest distance, second closest, cell id)\nvec3 Voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + Hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\n// Camera -----------------------------------------------------------------------\n\n// Translation autour de l'axe définit par t \n// p : Point\n// t : vecteur de translation\nvec3 translation (vec3 p, vec3 t)\n{\n    return vec3(p-t);\n}\n\n\n// Rotation matrix around x axis\n// a : Angle\nmat3 Rx(float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return mat3(1., 0., 0.,\n              0., ca, sa,\n              0., -sa, ca);\n}\n\n\n// Rotation sur l'axe des x\n// p : Point \n// r : Angle en radian de la rotation\nvec3 rotationX ( vec3 p, float r) \n{\n    mat3 rot = mat3(1.0,  0.0,    0.0,\n                    0.0, cos(r), -sin(r),\n                    0.0, sin(r), cos(r));\n    return rot*p;\n}\n\n// Rotation matrix around y axis\n// a : Angle\nmat3 Ry(float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return mat3(ca, 0., -sa,\n              0., 1., 0.,\n              sa, 0., ca);\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,  sa, 0.\n             ,-sa, ca, 0.\n             ,0.,  0., 1.);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m,vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.5;\n  \n  // Origin\n  ro=vec3(75.,0.,35.);\n  ro*=Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,1.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  rd=normalize(p.x*u+p.y*v+le*w);\n}\n","name":"Common","description":"","type":"common"}]}