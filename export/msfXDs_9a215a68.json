{"ver":"0.1","info":{"id":"msfXDs","date":"1669730293","viewed":47,"name":"Cea circle wave","username":"Cea","description":"Starting point is the tutorial here:\nhttps://www.youtube.com/watch?v=dKA5ZVALOhs&list=PLo0EL2mTb8NypIkP58_-_MPdRMdctGRdi\n\nI then went off experimenting on my own","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.1415\n\n#define NUMCIRCLES 20\n#define SPINSPEED .5\n\n// get distance from given point to closest point on ray\nfloat distLine(vec3 ro, vec3 rd, vec3 p){\n    return length(cross(p-ro, rd))/length(rd);\n}\n\n// convert from [-1..1] to [0..1]\nfloat range01(float t){\n    return t*.5+.5;\n}\n\n// creates a circle with blur and color based on distance from camera\nvec3 createCircle(vec3 ro, vec3 rd, int i, int num) {\n    float t = iTime*SPINSPEED + PI*2. * float(i)/float(num);\n    float px = sin(t)*1.;\n    float py = sin(t*2.)*0.2;\n    float pz = 2. + cos(t) * 2.;\n    vec3 p = vec3(px, py, pz);\n    float d = distLine(ro, rd, p);\n    d = smoothstep(.1, .099 - range01(cos(t)) * .09, d);\n    float r = min(d, d - range01(cos(t)) *.4);\n    float g = min(d, d - range01(cos(t)) *.3);\n    float b = min(d, d - range01(cos(t)) *.2);\n    return vec3(r, g, b);\n}\n\nvec3 getMax(vec3[NUMCIRCLES] arr){\n    float maxR = 0.;\n    float maxG = 0.;\n    float maxB = 0.;\n    for(int i = 0; i<arr.length(); i++){\n        vec3 circle = arr[i];\n        maxR = max(maxR, circle.r);\n        maxG = max(maxG, circle.g);\n        maxB = max(maxB, circle.b);\n    }\n    return vec3(maxR, maxG, maxB);\n}\n\nfloat parabola(float x) {\n    return 4.0 * x * (1.0 - x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    // create rays\n    vec3 ro = vec3(0., 0., -1.);\n    vec3 rd = vec3(uv.x, uv.y, 0.) - ro;\n    \n    // create circles\n    vec3[NUMCIRCLES] circles;\n    for(int i = 0; i<NUMCIRCLES; i++){\n      circles[i] = createCircle(ro, rd, i, NUMCIRCLES);  \n    }\n\n    // combine circles\n    vec3 pMax = getMax(circles);\n    \n    // create background\n    vec3 background = mix(vec3(.125), vec3(0.0), parabola(uv.y+.5));\n\n    vec3 color = max(pMax, background);\n    fragColor = vec4(color, 1.);\n}\n","name":"Image","description":"","type":"image"}]}