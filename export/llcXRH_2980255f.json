{"ver":"0.1","info":{"id":"llcXRH","date":"1478156100","viewed":253,"name":"Eyeball02112016","username":"xeronimo74","description":"eyeball tutorial","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash( float n ) {\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec2 x ) {\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0;\n\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x), mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n}\n\n// fractual Brownian motion\nfloat fbm(vec2 p) {\n\n    float f = 0.0;\n    f += 0.5000*noise(p); p *=2.02;\n    f += 0.2500*noise(p); p *=2.03;\n    f += 0.1250*noise(p); p *=2.01;\n    f += 0.0625*noise(p); p *=2.04;\n    f /= 0.9375;\n    return f;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//vec2 uv = fragCoord.xy / iResolution.xy;\n\t//fragColor = vec4(uv,0.5+0.5*sin(iTime),1.0);\n    \n    // making pixel position range from 0 to 1\n    vec2 q = fragCoord.xy/iResolution.xy;\n    \n    // mapping p so it ranges from -1 to 1, in order to easily center the object\n    vec2 p = -1.0 + 2.0*q;    \n    // adressing the ratio issue\n    p.x *= (iResolution.x/iResolution.y);\n  \n \t//setting background to white\n    float background = 1.0; // smoothstep(-0.25, -0.1, p.x);\n    \n    // moving object to the right (but why using - ??)\n    //p.x -= 0.75;\n        \n  \t// calculating the distance and angle from the center (?)\n    float r = sqrt(dot(p,p));\n   \tfloat a = atan(p.y, p.x);\n    \n    // initializing a color variable to white\n    vec3 col =vec3(1.0);\n    \n    // animating the radius (not sure about why those values ...)\n    float ss = -10.0+0.5*sin(1.0*iTime);\n    float anim = 1.0 + 0.1*ss*clamp(2.0-r,0.0,1.0);\n    r+=anim;\n            \n    // iris\n    if (r<0.8) {\n    \t// green-blue background of the iris\n        col = vec3(0.0,0.3,0.4);\n        \n        // creating color 'noise' to the above\n        float f = fbm(5.0*p);\n        col = mix(col, vec3(0.2,0.5,0.4), f);\n\n        // yellow circle\n        f = 1.0-smoothstep(0.2,0.5,r);\n        col = mix(col, vec3(0.9,0.6,0.2),f);\n        \n        // distoring the angle > helps to make things look organic and natural\n        a += 0.05*fbm(20.0*p);\n        \n        // white fibers\n        // vec2(r,a) = polar coordinates\n        f = smoothstep(0.3, 1.0, fbm(vec2(6.0*r,20.0*a)));\n        col = mix(col, vec3(1.0), f);\n        \n        // black patches\n        f = smoothstep(0.4, 0.9, fbm(vec2(10.0*r,15.0*a)));\n        col *= 1.0-0.5*f; // -0.5* to lessen the effect\n        \n        // darker edges\n        f = smoothstep(0.6,0.8,r);\n        col *= 1.0-0.5*f;\n        \n        // black circle in the middle     \n        f = smoothstep(0.2,0.25,r);\n        col *= f;\n        \n        // smoothing the border\n        f = smoothstep(0.75,0.8,r);\n        col = mix(col, vec3(1.0), f);\n        \n        // reflection light\n        f = 1.0-smoothstep(0.0, 0.5, length(p-vec2(0.2,0.2)));\n\t\tcol += vec3(1.0,0.9,0.8)*f*0.7;                   \n\n    }\n        \n    fragColor = vec4(col*background,1.0);\n       \n    \n}\n\n","name":"Image","description":"","type":"image"}]}