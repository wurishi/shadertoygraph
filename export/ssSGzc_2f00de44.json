{"ver":"0.1","info":{"id":"ssSGzc","date":"1617739164","viewed":119,"name":"CubeMunch","username":"cacheflowe","description":"Playing with formulas from: \n@gaeel - https://www.shadertoy.com/view/ssjGWW\n\nBased on equations in @aemkei's tweet:\nhttps://twitter.com/aemkei/status/1378106731386040322","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["modulo","munchingcubes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shader version of @aemkei's \"alien art\"\n// Original: https://twitter.com/aemkei/status/1378106731386040322\n// Modified by @gaeel - https://www.shadertoy.com/view/ssjGWW\n// Modified again by @cacheflowe :)\n// Press the ⏮ button under the preview window to restart from the beginning\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // normalized p for quadrants\n    // & uv for equations\n    vec2 p = fragCoord.xy / iResolution.xy;\n    float zoom = 2.;\n    vec2 uv = fragCoord/zoom;\n    \n    // Get \"pixel\" coordinates for equations\n    int x = int(uv.x);\n    int y = int(uv.y);\n    \n    // Try some different equations from original tweet\n    int b = x|y;                                                              // sierpinski:  (x|y) % time\n    if(p.x > 0.5) b = x^y;                                                    // diagonals:   (x^y) % time\n    if(p.y > 0.5 && p.x > 0.5) b = int(mod(mod(uv.x,uv.y), uv.y));            // sheets:      ((x%y) % y) % time\n    if(p.y > 0.5 && p.x < 0.5) b = int(mod((uv.x * uv.y), 1024.));            // round noise: ((x*y) % 1024) % time\n    \n    // final output\n    float bf = float(b);                               // convert to float\n    bf = mod(bf, (1000. + iTime) * 0.005);             // start time at a larger number\n    vec3 col = 1. - vec3(bf);                          // invert\n    if(iMouse.z > 0.5) {                               // hold mouse to threshold results\n        float density = 0.85;\n        col = (bf < density) ? vec3(1.) : vec3(0.);\n        fragColor = vec4(col,1.0);\n    } else {                                           // color cycle for fun\n        col = vec3(0.5 + 0.5 * sin(col.r * 3.), 0.5 + 0.5 * sin(col.g * 4.), 0.5 + 0.5 * sin(col.b * 5.));\n        fragColor = vec4(col * (1. - bf/2.),1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}