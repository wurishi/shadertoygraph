{"ver":"0.1","info":{"id":"ftt3WX","date":"1636834664","viewed":260,"name":"PIXEL FOO Van Damme","username":"1j01","description":"Rotating buffered square with video added. Fork of [url]https://shadertoy.com/view/4lSyRw[/url]","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["rotation","lowres","stepped","buffered","rotated"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"PIXEL FOO\" by isak. https://shadertoy.com/view/4lSyRw\n// 2021-11-13 20:14:00\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\tfragColor = texture(iChannel0, fragCoord.xy/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Fork of \"PIXEL FOO\" by isak. https://shadertoy.com/view/4lSyRw\n// 2021-11-13 20:14:00\n\nmat2 rot(float a) {\n\tfloat c = cos(a); float s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nvoid addVideo(inout vec4 fragColor, sampler2D channel, vec2 UV, float amount) {\n    vec4 videoColor = texture(channel, UV);\n    //vec4 green = vec4(0.0,0.659,0.0,1.0); // measured green from screen pixels\n    vec4 green = vec4(0.0,1.0,0.0,1.0); // pure green\n    float greenness = pow(1. - length(videoColor - green), 2.) * 3.;\n    videoColor -= (green * pow(greenness, 1.0)) * 0.9; // prevent green bleeding somewhat\n    fragColor += mix(0.9*videoColor, vec4(0.0),greenness) * amount;\n    //fragColor = vec4(greenness); // debug\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float t = iTime * 0.7;\n\n\tvec2 uv = fragCoord.xy - 0.5*iResolution.xy;\n    uv *= 2.0/iResolution.y;\n    uv *= 2.0*rot(t); \n    \n    vec2 UV = fragCoord.xy - 0.5*iResolution.xy;\n    UV *= rot(0.1*sin(t))*(1.0 + 0.05*sin(0.5*t));\n    UV += 0.5*iResolution.xy;\n    UV /= iResolution.xy;\n    \n    float s = abs(uv.x) + abs(uv.y); // \"Square\"\n    \n    fragColor = 0.95*texture(iChannel0, UV);\n\tfragColor += vec4(1.0)*( step(1.0, s) - step(1.025, s));\n    \n    float amount = 0.1; // good to reduce if enabling flips\n    amount /= min(cos(t), 1.0);\n    addVideo(fragColor, iChannel1, UV, amount);\n    //addVideo(fragColor, iChannel1, UV*vec2(-1., 1.)+vec2(1., 0.), amount); // x flip\n    //addVideo(fragColor, iChannel1, UV*vec2(1., -1.)+vec2(0., 1.), amount); // y flip\n    //addVideo(fragColor, iChannel1, UV*vec2(-1., -1.)+vec2(1., 1.), amount); // rotated\n}","name":"Buffer A","description":"","type":"buffer"}]}