{"ver":"0.1","info":{"id":"ddVBzw","date":"1698079678","viewed":67,"name":"asymmetric blocks with portals f","username":"jt","description":"Attempt to calculate connections between blocks in the pattern of (asymmetric/irregular) random-blocks-by-alternating-double-T-crossings.\nThis implementation is intended for lookup with float indices.\nProvides neighbor ids.\nClick to show underlying grid.\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["random","t","blocks","portal","double","door","passage","connection","alternating","irregular","asymmetric"],"hasliked":0,"parentid":"dstfzf","parentname":"asymmetric blocks compactified f"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ddVBzw asymmetric blocks with portals float, 2023 by jt\n// based on https://www.shadertoy.com/view/dstfzf asymmetric blocks compactified float\n// float variant of https://www.shadertoy.com/view/mdcBR2 asymmetric blocks compactified\n\n// Attempt to calculate connections between blocks\n// in the pattern of (asymmetric/irregular)\n// random-blocks-by-alternating-double-T-crossings.\n// This implementation is intended for lookup with float indices.\n// Provides neighbor ids.\n// Click to show underlying grid.\n\n// integer variant: https://www.shadertoy.com/view/csyBzw asymmetric blocks with portals 2\n\n// tags: random, t, blocks, portal, double, door, passage, connection, alternating, irregular, asymmetric\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\n//// Wellons lowbias32 from http://nullprogram.com/blog/2018/07/31\n//// perhaps the best ever devised for this op count, great distribution and cycle\n//uint lowbias32(uint x)\n//{\n//    x ^= x >> 16;\n//    x *= 0x7feb352du;\n//    x ^= x >> 15;\n//    x *= 0x846ca68bu;\n//    x ^= x >> 16;\n//    return x;\n//}\n\n#define HASH(u) triple32(u)\n//#define HASH(u) lowbias32(u)\n\nuint uhash(ivec2 v, bool choose)\n{\n//return uvec2(0u); // verify grid alignment\n    return HASH((uint(v.x)*2u+uint(choose) + HASH(uint(v.y)*2u+uint(choose))) /*+ uint(iFrame / 120)*/);\n}\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nstruct block\n{\n    vec4 v0;\n    vec4 v1;\n    ivec2 id;\n    ivec2 id0;\n    ivec2 id1;\n    bool flag;\n};\n\n#define RES 8\n\nfloat block_hash(ivec2 t, int x, int y, bool choose, bool mirror)\n{\n    ivec2 d = (mirror?ivec2(y, x):ivec2(x, y));\n    //vec2 r = fract(hash22(vec2(t+d)))+vec2(d); // float hash\n    //vec2 r = fract(vec2(uhash(t+d, choose) % uint(RES))/float(RES))+vec2(d); // integer hash with fixed resolution\n    //return choose?r.y:r.x;\n    return fract(float(uhash(t+d, choose) % uint(RES))/float(RES))+float(choose?d.y:d.x); // integer hash with fixed resolution\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Returns minimum, maximum, id.\n// Compactified using implicit matrix transpose & deferred hash calls.\n//(NOTE: inlining the hash-function and using out parameters instead of block structure\n//       could be used to turn this into a stand-alone function.)\nblock blocks_layout(vec2 p) // https://www.shadertoy.com/view/dstfzf asymmetric blocks compactified f by jt\n{\n    ivec2 tile = ivec2(floor(vec2(p))); // global coordinates of tile\n    vec2 local = fract(p);\n\n    //bool flip = (tile.x % 2) != (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) != (tile.y & 1); // alternate direction of double T crossings: vertical or horizontal\n    //flip = !flip; // \"dual\" pattern (i.e. T-crossings flipped)\n    \n    // layout (NOTE: matrix notation upside down compared to coordinate system!)\n    // NW N NE\n    //  W C E\n    // SW S SE\n       \n    // transposed (NOTE: matrix notation upside down compared to coordinate system!)\n    // SE W NE\n    //  N C S\n    // SW E NW\n    \n    if(flip) // horizontal line goes through: swap vertical with horizontal\n    {\n        // swap components\n        local = local.yx;\n    }\n\n    // vertical line goes through (on flip transpose for horizontal line)\n\n    //                 c\n    //   +-+---------+---+-------+\n    //   | |         |   |       |\n    //   | |         |   #-------+ d\n    // d +-#-#-------+---M       |\n    //   |   |       |   |       |\n    //   +---+-------+---+-------+\n    //   |   |       |   |       |\n    //   |   m-------+---#---#---+\n    //   +---#       |       |   |\n    //   |   |       |       |   |\n    //   +---+-------+-------+---+\n\n    float c = block_hash(tile, 0, 0,  flip, flip); // offset of central line\n    int x = 1-int(local.x < c); // [0,1]\n    int X = 2*x-1; // [-1,+1]\n    float d = block_hash(tile,+X, 0, !flip, flip); // offset of branching line\n    float e = block_hash(tile,-X, 0,!flip, flip); // offset of branching line\n    int y = 1-int(local.y < d); // [0,1]\n    int Y = 2*y-1; // [-1,+1]\n\n    vec4 v0 =\n        vec4\n        (\n            // primary corner in (0,0) tile\n            c,\n            d,\n            // secondary corner in (0,0) tile\n            c,\n            e\n        );\n\n    vec4 v1 =\n        vec4\n        (\n            // primary corner in (X,Y) tile\n            block_hash(tile,X,Y, flip, flip),\n            block_hash(tile,0,Y,!flip, flip),\n            // secondary corner in (X,Y) tile\n            block_hash(tile,2*X,Y, flip, flip),\n            block_hash(tile,0,Y,!flip, flip)\n        );\n\n    if(flip) tile = tile.yx;\n\n    v0 += vec2(tile).xyxy;\n    v1 += vec2(tile).xyxy;\n\n    ivec2 id = tile + ivec2(x,y);\n    ivec2 id0 = tile + ivec2(1-x,1-int(local.y < e));\n    ivec2 id1 = tile + ivec2(1-x,1-int(local.y < e));\n\n    if(flip) // horizontal line goes through: unswap vertical with horizontal\n    {\n        v0 = v0.yxwz;\n        v1 = v1.yxwz;\n        id = id.yx;\n        id0 = id0.yx;\n        id1 = id1.yx;\n    }\n\n    bool flag = v0.y > v1.y;\n\n    // fix order of min/max corners\n    {\n        vec2 center = (v0.xy+v1.xy)/2.0;\n        vec2 extent = abs(v0.xy-v1.xy)/2.0;\n    \n        v0.xy = center-extent;\n        v1.xy = center+extent;\n    }\n    {\n        vec2 center = (v0.zw+v1.zw)/2.0;\n        vec2 extent = abs(v0.zw-v1.zw)/2.0;\n    \n        v0.zw = center-extent;\n        v1.zw = center+extent;\n    }\n\n    return block(v0, v1, id, id0, id1, flag);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) // https://iquilezles.org/articles/distfunctions2d/\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n#define scale (float(RES*3))\n\nvec3 colorize(ivec2 id)\n{\n    vec3 color = hash32(vec2(id));\n    if(((id.x^id.y)&1)==0)\n        color = 1.0 - color;\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 p)\n{\n    vec2 R = iResolution.xy;\n    p = (2.0 * p - R) / R.y;\n    vec2 m = iMouse.xy;\n    m = (2.0 * m - R) / R.y;\n\n    block b = blocks_layout(p*scale/vec2(RES));\n    b.v0 *= float(RES);\n    b.v1 *= float(RES);\n\n    vec3 color = colorize(b.id);\n\n    // differences between pixel-position and corners\n    vec2 q0 = p-vec2(b.v0)/scale;\n    vec2 q1 = p-vec2(b.v1)/scale;\n    // visualize edges\n    color = min(color, vec3(smoothstep(0.005, 0.01,+q0.x)));\n    color = min(color, vec3(smoothstep(0.005, 0.01,+q0.y)));\n    color = min(color, vec3(smoothstep(0.005, 0.01,-q1.x)));\n    color = min(color, vec3(smoothstep(0.005, 0.01,-q1.y)));\n    // visualize min-max\n    color = min(color, vec3(smoothstep(0.005, 0.01, abs(length(q0)-0.05))));\n    color = min(color, vec3(smoothstep(0.005, 0.01, abs(length(q1)-0.05))));\n   \n    // draw portals\n    if(b.flag)\n    {\n        //color = mix(color, vec3(0,0,1), 1.0-vec3(step(0.01, line(p, vec2(b.v0.x, b.v1.y)/scale, vec2(b.v0.z,b.v1.w)/scale))));\n        color = mix(color, colorize(b.id0), 1.0-vec3(step(0.01, line(p, vec2(b.v0.x, b.v1.y)/scale, vec2(b.v0.z,b.v1.w)/scale))));\n        //color = mix(color, vec3(0,1,0), 1.0-vec3(step(0.01, line(p, vec2(b.v1.xy)/scale, vec2(b.v1.zw)/scale))));\n        color = mix(color, colorize(b.id1), 1.0-vec3(step(0.01, line(p, vec2(b.v1.xy)/scale, vec2(b.v1.zw)/scale))));\n    }\n    else\n    {\n        //color = mix(color, vec3(1,1,0), 1.0-vec3(step(0.01, line(p, vec2(b.v1.x, b.v0.y)/scale, vec2(b.v1.z,b.v0.w)/scale))));\n        color = mix(color, colorize(b.id0), 1.0-vec3(step(0.01, line(p, vec2(b.v1.x, b.v0.y)/scale, vec2(b.v1.z,b.v0.w)/scale))));\n        //color = mix(color, vec3(1,0,0), 1.0-vec3(step(0.01, line(p, vec2(b.v0.xy)/scale, vec2(b.v0.zw)/scale))));\n        color = mix(color, colorize(b.id1), 1.0-vec3(step(0.01, line(p, vec2(b.v0.xy)/scale, vec2(b.v0.zw)/scale))));\n    }\n\n    //vec3 color = vec3((b.id.x^b.id.y)&1);\n    if(iMouse.z > 0.0)\n    {\n        vec2 r = p*scale/2.0;\n        float pi = 3.1415926;\n        color *= mix(0.5, 1.0, step(0.0, sin(r.x*pi*2.0)*sin(r.y*pi*2.0)));\n        vec2 q = fract(p*scale/float(RES));\n        q = step(0.01, q);\n        //color = min(color, vec3(min(q.x, q.y)));\n        color = max(color, vec3(1.0-min(q.x, q.y)));\n    }\n\n    color = sqrt(color);\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}