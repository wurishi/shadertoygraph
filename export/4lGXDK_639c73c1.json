{"ver":"0.1","info":{"id":"4lGXDK","date":"1485869949","viewed":413,"name":"Julia Orbit Traps Zoom&Pan","username":"utak3r","description":"Classic Julia with animated c param, playing with zoom and pan.\nAntialiasing procedure from ttoinou, orbit traps colouring from Inigo Quilez (iq).\nSee comments in the code.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Piotr Borys - utak3r/2017\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Classic Julia with animated c param, playing with zoom and pan.\n//\n// Antialiasing procedure from ttoinou\n// Orbit traps colouring from Inigo Quilez (iq)\n//\n// For antialiasing, use AA_ENABLE and adjust AA_RADIUS for your needs/capabilities.\n// For rendering a whole fractal, without camera zooming and panning, disable PLAY_ZOOM.\n// MAXITER is taken into account only with PLAY_ZOOM disabled.\n// MINITER is a starting value for dynamic quality in zooming animation.\n// If you want to explore Julia set by yourself, disable ANIMATE_C and set c for yourself.\n//\n// Please note: \n// In WebGL one cannot use variables as for loop's target, as the loop is unwinded.\n// Hence here below in main for loop I'm going to use a MAXITER constant.\n// But, if you want to use it somewhere else, go and use a maxiter variable instead.\n\n\n#define MAXITER 1024\n#define MINITER 256\n//#define AA_ENABLE\n#define AA_RADIUS 4\n#define PLAY_ZOOM\n#define ANIMATE_C\n\nvec4 julia(vec2 fragCoord)\n\t{\n\tfloat time = iTime * 1.0;\n\tfloat PIH = 1.570797;\n#ifdef PLAY_ZOOM\n\tfloat zoommin = 0.8;\n\tfloat zoommax = 5.0;\n\tfloat zoom = (sin(time - PIH) + 1.0) / 2.0 * (zoommax - zoommin) + zoommin;\n\t//int maxiter = int(float(MINITER) * zoom); // disabled for WebGL\n\tvec2 zoomcenter = vec2(cos(3.0*time*0.2), sin(5.0*time*0.2));\n#else\n\tfloat zoom = 0.8;\n\tvec2 zoomcenter = vec2(0.0, 0.0);\n\t//int maxiter = MAXITER; // disabled for WebGL\n#endif\n\n\tvec2 z = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n\tz.x *= iResolution.x/iResolution.y;\n\tz += zoomcenter;\n\tz /= zoom;\n#ifdef ANIMATE_C\n\tvec2 c = 1.1*vec2( 0.5*cos(0.1*time) - 0.25*cos(0.2*time), \n\t\t\t\t\t\t0.5*sin(0.1*time) - 0.25*sin(0.2*time));\n#else\n\tvec2 c = vec2(-1.05, 0.25015);\n#endif\n\tvec4 dmin = vec4(1e20);\n\n\tfor (int i = 0; i < MAXITER; i++)\n\t\t{\n\t\tz = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n\t\tdmin=min(dmin, vec4(abs(0.0+z.y + 0.5*sin(z.x)),\n\t\t\t\t\t\t\tabs(1.0+z.x + 0.5*sin(z.y)),\n\t\t\t\t\t\t\tdot(z,z),\n\t\t\t\t\t\t\tlength(fract(z)-0.5)));\n\t\t}\n\n\tvec3 color = vec3(dmin.w);\n\tcolor = mix(color, vec3(0.992, 0.929, 0.675), min(1.0,pow(dmin.x*0.25,0.20)));\n\tcolor = mix(color, vec3(0.835, 0.8, 0.667), min(1.0,pow(dmin.y*0.50,0.50)));\n\tcolor = mix(color, vec3(1.00,1.00,1.00), 1.0-min(1.0,pow(dmin.z*1.00,0.15)));\n\tcolor = 1.25*color*color;\n\treturn vec4(color, 1.0);\n\t}\n\nvoid mainImage(out vec4 fragColor, in vec2 coord)\n{\n\tvec4 i1, i2;\n#ifdef AA_ENABLE\n\ti1 = julia(coord);\n\tvec2 pos;\n\tfloat radius = float (AA_RADIUS);\n\tfor (int i = 0; i < AA_RADIUS; i++)\n\t{\n\t\tfor (int j = 0; j < AA_RADIUS; j++)\n\t\t{\n\t\t\tif (i + j > 0)\n\t\t\t{\n\t\t\tpos = vec2(i, j) / radius;\n\t\t\ti2 = julia(coord+pos);\n\t\t\ti1 += i2;\n\t\t\t}\n\t\t}\n\t}\n\ti1 /= radius*radius;\n#else\n\ti1 = julia(coord);\n#endif\n\tfragColor = i1;\n}\n","name":"Image","description":"","type":"image"}]}