{"ver":"0.1","info":{"id":"msyfDw","date":"1698269228","viewed":90,"name":"asymmetric blocks terraces conic","username":"jt","description":"WORK IN PROGRESS:\nAttempt to connect asymmetric blocks terraces by conical stairs.\nTODO: find solution to problem that cones sometimes extend beyond bounding box.\nTODO: make conical stairs SDF exact.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","random","t","blocks","portal","double","stairs","conic","door","passage","connection","alternating","irregular","asymmetric"],"hasliked":0,"parentid":"msVfzw","parentname":"asymmetric blocks with portals 3"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/msyfDw asymmetric blocks terraces conic stairs, 2023 by jt\n// based on https://www.shadertoy.com/view/msVfzw asymmetric blocks with portals 3d\n\n// WORK IN PROGRESS:\n// Attempt to connect asymmetric blocks terraces by conical stairs.\n// TODO: find solution to problem that cones sometimes extend beyond bounding box.\n// TODO: make conical stairs SDF exact and clamp to cylinder at max height.\n\n// Thanks to Shane for suggesting the DDA-plugin / snap-to-voxel method & for the asymmetric blocks idea!\n\n// tags: 3d, random, t, blocks, portal, double, stairs, conic, door, passage, connection, alternating, irregular, asymmetric\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY XXX CURRENTLY BROKEN DUE TO APPROXIMATE SDF AT PORTALS XXX\n\n// For correct ambient occlusion sample 2x2x2 voxels (slow!)\n//#define HIGH_QUALITY\n\nfloat hash12(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash22(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash32(vec2 p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n/*\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n*/\nstruct block\n{\n    vec4 v0;\n    vec4 v1;\n    ivec4 id;\n    bool flag;\n};\n\nfloat block_hash(ivec2 t, int x, int y, bool choose, bool mirror)\n{\n    ivec2 d = (mirror?ivec2(y, x):ivec2(x, y));\n    vec2 r = fract(hash22(vec2(t+d)))+vec2(d); // float hash\n    return choose?r.y:r.x;\n}\n\n// Inspired by https://www.shadertoy.com/view/Ws3GRs Asymmetric Blocks by Shane,\n// and also by https://www.shadertoy.com/view/tsVGRz Oddtiles (optimized) by stb.\n// Checkerboard tiling of alternating (horizontal vs. vertical) (double-T-) crossings.\n// Returns minimum, maximum, id.\n// Compactified using implicit matrix transpose & deferred hash calls.\n//(NOTE: inlining the hash-function and using out parameters instead of block structure\n//       could be used to turn this into a stand-alone function.)\nblock blocks_layout(ivec2 tile, vec2 local) // https://www.shadertoy.com/view/dstfzf asymmetric blocks compactified f by jt\n{\n    //bool flip = (tile.x % 2) != (tile.y % 2); // XXX breaks on windows XXX\n    bool flip = (tile.x & 1) != (tile.y & 1); // alternate direction of double T crossings: vertical or horizontal\n    //flip = !flip; // \"dual\" pattern (i.e. T-crossings flipped)\n\n    // layout (NOTE: matrix notation upside down compared to coordinate system!)\n    // NW N NE\n    //  W C E\n    // SW S SE\n\n    // transposed (NOTE: matrix notation upside down compared to coordinate system!)\n    // SE W NE\n    //  N C S\n    // SW E NW\n\n    if(flip) // horizontal line goes through: swap vertical with horizontal\n    {\n        // swap components\n        local = local.yx;\n    }\n\n    // vertical line goes through (on flip transpose for horizontal line)\n\n    //                 c\n    //   +-+---------+---+-------+\n    //   | |         |   |       |\n    //   | |         |   #-------+ d\n    // d +-#-#-------+---M       |\n    //   |   |       |   |       |\n    //   +---+-------+---+-------+\n    //   |   |       |   |       |\n    //   |   m-------+---#---#---+\n    //   +---#       |       |   |\n    //   |   |       |       |   |\n    //   +---+-------+-------+---+\n\n    float c = block_hash(tile, 0, 0,  flip, flip); // offset of central line\n    int x = 1-int(local.x < c); // [0,1]\n    int X = 2*x-1; // [-1,+1]\n    float d = block_hash(tile,+X, 0, !flip, flip); // offset of branching line\n    float e = block_hash(tile,-X, 0,!flip, flip); // offset of branching line\n    int y = 1-int(local.y < d); // [0,1]\n    int Y = 2*y-1; // [-1,+1]\n\n    vec4 v0 =\n        vec4\n        (\n            // primary corner in (0,0) tile\n            c,\n            d,\n            // secondary corner in (0,0) tile\n            c,\n            e\n        );\n\n    vec4 v1 =\n        vec4\n        (\n            // primary corner in (X,Y) tile\n            block_hash(tile,X,Y, flip, flip),\n            block_hash(tile,0,Y,!flip, flip),\n            // secondary corner in (X,Y) tile\n            block_hash(tile,2*X,Y, flip, flip),\n            block_hash(tile,0,Y,!flip, flip)\n        );\n\n    if(flip) tile = tile.yx;\n\n    v0 += vec2(tile).xyxy;\n    v1 += vec2(tile).xyxy;\n\n    ivec4 id = tile.xyxy + ivec4(x,y,1-x,1-int(local.y < e));\n\n    if(flip) // horizontal line goes through: unswap vertical with horizontal\n    {\n        v0 = v0.yxwz;\n        v1 = v1.yxwz;\n        id = id.yxwz;\n    }\n\n    bool flag = v0.y > v1.y;\n\n    // sort into minimal/maximal corner via center & extent (abs catches unsorted case)\n    vec4 center = (v0+v1)/2.0;\n    vec4 extent = abs(v0-v1)/2.0;\n\n    v0 = center - extent;\n    v1 = center + extent;\n\n    // using abs in conversion to center-extend fixes order of min/max corners\n    return block(v0, v1, id, flag);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat frame(vec3 p, vec3 p0, vec3 p1, float e) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 b = (p1-p0)/2.0;\n    vec3 c = (p1+p0)/2.0;\n    p -= c;\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat box(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat box(vec3 p, vec3 a, vec3 b)\n{\n    vec3 c = (a + b)/2.0;\n    vec3 e = abs(a - b)/2.0;\n    vec3 q = abs(p-c) - e;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat infinite_cone(vec3 p, float phi) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 c = vec2(cos(phi), sin(phi));\n    vec2 q = vec2( length(p.xy), p.z );\n    float d = length(q-c*max(dot(q,c), 0.0));\n    return d * ((q.x*c.y-q.y*c.x<0.0)?-1.0:1.0);\n}\n\nfloat infinite_cylinder(vec3 p, float r)\n{\n    return length(p.xy)-r;\n}\n\n// XXX APPROXIMATE SDF XXX\nfloat infinite_cone(vec3 p, float s, float h, float H) // based on from https://iquilezles.org/articles/distfunctions/\n{\n    float dh = h-H;\n    if(dh >= 0.0)\n    {\n        p.z -= H;\n        //float phi = atan(dh/s);\n        //vec2 c = vec2(cos(phi), sin(phi));\n        vec2 c = vec2(s, dh)/sqrt(dh*dh + s*s); // cos(atan(dh/s)), sin(atan(dh/s)) assuming s and dh positive\n\n        vec2 q = vec2( length(p.xy), p.z );\n        float d = length(q-c*max(dot(q,c), 0.0));\n        return max(max(d * ((q.x*c.y-q.y*c.x<0.0)?-1.0:1.0),-p.z+dh/2.0), infinite_cylinder(p, s));\n    }\n    else\n    {\n        dh = -dh;\n        p.z = -p.z;\n        p.z += H;\n        //float phi = atan(dh/s);\n        //vec2 c = vec2(cos(phi), sin(phi));\n        vec2 c = vec2(s, dh)/sqrt(dh*dh + s*s); // cos(atan(dh/s)), sin(atan(dh/s)) assuming s and dh positive\n        vec2 q = vec2( length(p.xy), p.z );\n        float d = length(q-c*max(dot(q,c), 0.0));\n        return max(max(d * ((q.x*c.y-q.y*c.x<0.0)?-1.0:1.0),-p.z+dh/2.0), infinite_cylinder(p, s));\n    }\n}\n\nfloat vmax(vec2 v)\n{\n    return max(v.x, v.y);\n}\n\nvoid pR45(inout vec2 p)\n{\n    p = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\nfloat pMod1(inout float p, float size)\n{\n    float halfsize = size*0.5;\n    float c = floor((p + halfsize)/size);\n    p = mod(p + halfsize, size) - halfsize;\n    return c;\n}\n\n// https://www.shadertoy.com/view/Xs3GRB HG SDF in WebGL by tomkh,\n// implementation of http://mercury.sexy/hg_sdf/\nfloat fOpUnionStairs(float a, float b, float r, float n)\n{\n    float d = min(a, b);\n    vec2 p = vec2(a, b);\n    pR45(p);\n    p = p.yx - vec2((r-r/n)*0.5*sqrt(2.));\n    p.x += 0.5*sqrt(2.)*r/n;\n    float x = r*sqrt(2.)/n;\n    pMod1(p.x, x);\n    d = min(d, p.y);\n    pR45(p);\n    return min(d, vmax(p -vec2(0.5*r/n)));\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 20.0\n#define ITER_MAX 100u\n\nstruct result\n{\n    float dist;\n    vec3 color;\n};\n\nresult OR(result a, result b)\n{\n    if(a.dist < b.dist)\n        return a;\n    return b;\n}\n\nresult AND(result a, result b)\n{\n    if(a.dist > b.dist)\n        return a;\n    return b;\n}\n\nresult DIFF(result a, result b)\n{\n    if(a.dist > -b.dist)\n        return a;\n    return result(-b.dist, b.color);\n}\n\nresult apply_pattern(result res, vec3 l, vec3 c, vec2 e, float h, float H, ivec2 id, ivec2 ID)\n{\n    //vec3 color = vec3(1);\n    vec3 color = hash32(vec2(ID));\n    float size = max(e.x,e.y);\n    //d = max(d,-sphere(l-c, size));\n\n    float dh = h-H;\n    if(dh > 0.0)\n    {\n        res = DIFF(res,result(infinite_cone(l-c, size, h, H), color));\n        //d = -fOpUnionStairs(-d,infinite_cone(l-c, size, h, H), 0.5*abs(dh), 10.0);\n    }\n    else\n    {\n        res.dist = max(res.dist,-infinite_cylinder(l-c, size)); // cut wall\n        res = OR(res,result(+infinite_cone(l-c, size, h, H), color));\n        //d = fOpUnionStairs(d, infinite_cone(l-c, size, h, H), 0.5*abs(dh), 10.0);\n    }\n\n    return res;\n}\n\n#define wall_size 0.0\n#define scale 0.25\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    result res = result(DIST_MAX, vec3(0)); // signal to skip this voxel\n\n    if(v.z >= 0 && v.z <= 0)\n    {\n        block b = blocks_layout(v.xy, l.xy);\n        vec3 color = hash32(vec2(b.id));\n        float h = scale*hash12(vec2(b.id.xy));\n        float H = scale*hash12(vec2(b.id.zw));\n        float d = box(vec3(v)+l, vec3(b.v0.xy,0), vec3(b.v1.xy,h));\n        float f = frame(vec3(v)+l, vec3(b.v0.xy,0.0+h), vec3(b.v1.xy,h+0.05), 0.025);\n        res = OR(result(d, color), result(f, color));\n        //res = result(d, color);\n\n        {\n            vec2 v0 = b.v0.xy - vec2(v);\n            vec2 v1 = b.v1.xy - vec2(v);\n            vec2 w0 = b.v0.zw - vec2(v);\n            vec2 w1 = b.v1.zw - vec2(v);\n\n            if(!b.flag)\n            {\n                {\n                    vec3 c = vec3(v1.x+w1.x,v0.y+w0.y,0/*+h*/)/2.0;\n                    vec3 e = abs(vec3(v1.x-w1.x,v0.y-w0.y,-h))/2.0 - wall_size;\n\n                    res = apply_pattern(res, l, c, e.xy, h, H, b.id.xy, b.id.zw);\n                }\n                {\n                    vec3 c = vec3(v0.x+w0.x,v0.y+w0.y,0/*+h*/)/2.0;\n                    vec3 e = abs(vec3(v0.x-w0.x,v0.y-w0.y,-h))/2.0 - wall_size;\n\n                    res = apply_pattern(res, l, c, e.xy, h, H, b.id.xy, b.id.zw);\n                }\n            }\n            else\n            {\n                {\n                    vec3 c = vec3(v0.x+w0.x,v1.y+w1.y,0/*+h*/)/2.0;\n                    vec3 e = abs(vec3(v0.x-w0.x,v1.y-w1.y,-h))/2.0 - wall_size;\n\n                    res = apply_pattern(res, l, c, e.xy, h, H, b.id.xy, b.id.zw);\n                }\n                {\n                    vec3 c = vec3(v1.x+w1.x,v1.y+w1.y,0/*+h*/)/2.0;\n                    vec3 e = abs(vec3(v1.x-w1.x,v1.y-w1.y,-h))/2.0 - wall_size;\n\n                    res = apply_pattern(res, l, c, e.xy, h, H, b.id.xy, b.id.zw);\n                }\n            }\n        }\n    }\n\n    return res;\n}\n#ifdef HIGH_QUALITY\nresult map(vec3 p) // for correct ambient occlusion sample 2x2x2 voxels (slow!)\n{\n    // I think kastorp originally suggested to sample only 2x2x2 instead of 3x3x3, thanks!\n    result d = result(DIST_MAX, vec3(0));\n    ivec3 s = ivec3(step(0.5, fract(p)));\n    ivec3 o;\n    for(o.z = s.z-1; o.z < s.z+1; o.z++)\n        for(o.y = s.y-1; o.y < s.y+1; o.y++)\n            for(o.x = s.x-1; o.x < s.x+1; o.x++)\n            {\n                result r = map(ivec3(floor(p))+o, fract(p)-vec3(o));\n                if(r.dist < d.dist)\n                    d = r;\n            }\n    return d;\n}\n#else\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n#endif\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist);\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(t, h.color);\n\n        // NOTE: An extra step per block, use if sdf discontinuous between blocks\n        //       Could make this conditional by prefixing sth. like if(block_changed) // suggested by spalmer, see variant below\n        // constrain step to blocks (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            block b = blocks_layout(ivec2(floor(p.xy)), fract(p.xy));\n            vec3 c = vec3((b.v1.xy+b.v0.xy)/2.0, 0.5)-vec3(floor(p.xy), 0); // center\n            vec3 e = vec3((b.v1.xy-b.v0.xy)/2.0, 0.5); // extent\n            // NOTE: assuming unit grid\n            // sgn(rd)*e are the block walls in ray direction, fract(p) - c is position relative to center of block\n            vec3 sd = (sgn(rd)*e - (fract(p) - c))/rd; // distances to block sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next block: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    //return result(t, h.color); // stop on running out of iterations\n    return result(t1, h.color); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).dist < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).dist;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    //return vec3(1.0-pow(0.5+0.5*sin(p.z*pi*10.0), 50.0));\n    return vec3(1.0);\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvec3 sky(vec3 lightdir, vec3 d)\n{\n    float v = mix(0.5, 1.0, abs(d.z));\n    return vec3(pow(1.0-v,2.0),vec2(1.0-v,v)); // no particular meaning - just tweaked until it looks skyish\n    //float v = mix(0.5, 0.75, abs(d.z));\n    //return vec3(pow(1.0-v,2.0),vec2(1.0-v,v)/2.); // no particular meaning - just tweaked until it looks skyish\n}\n\nfloat sun(vec3 lightdir, vec3 rd)\n{\n    float d = max(0.0, dot(rd, lightdir));\n    return smoothstep(0.998, 0.999, d) + exp(-pow((1.0-d)*500.0, 2.0)); // sun with halo\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-3.0);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 1.0;\n\n    vec3 lightdir = normalize(vec3(3.0, 2.0, 1.0));\n\n    float dim = 1.0-pow(max(0.0, dot(M * vec3(0,0,1), lightdir)), 4.0); // reduce brightness when looking towards sun to make sunlight seem brighter\n    //float dim = pow(1.0-max(0.0, dot(M[2], lightdir)), 1.0); // reduce brightness when looking towards sun to make sunlight seem brighter\n    //float dim = 1.0; // disable brightness change\n\n    //vec3 sky_color = mix(vec3(0.2,0.5,0.5),vec3(0,0,1),abs(-rd.z));\n    //vec3 sky_color = mix(vec3(0.2,0.5,0.5),vec3(0,0,0.5),sqrt(abs(rd.z)));\n    vec3 sky_color = sky(lightdir, rd);\n    //vec3 color = vec3(1);\n    vec3 color = vec3(dim);\n    result r = trace(ro, rd, 0.0, DIST_MAX);\n    if(r.dist < DIST_MAX)\n    {\n        color *= r.color;\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color *= material(dst);\n\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fog_color = vec3(0.2);\n        vec3 fog_color = sky_color * dim;\n        color = mix(fog_color, vec3(color), exp(-pow(r.dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= sky_color;\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n\n    color = min(vec3(1.0), color + step(DIST_MAX, r.dist) * sun(lightdir, rd)); // make sure sun has maximal brightness (no roll-off here!)\n\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}