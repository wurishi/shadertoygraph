{"ver":"0.1","info":{"id":"WddGWS","date":"1569253143","viewed":98,"name":"First Raymarching dfbdgsgt","username":"Kitesurf_m8s","description":"gsdgdgv","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define MAX_STEPS 70\n#define MAX_DIST 100.\n#define SURF_DIST 0.01\n\nfloat smin(float a, float b, float k){\n    \n    return -log(exp(-a/(1.44*k))+exp(-b/(1.44*k)))*1.44*k;\n}\n\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0);\n}\n\nfloat GetDist(vec3 p) {\n    \n   \tvec4 s1 = vec4(0, 1, 4, 1);\n    vec4 s2 = vec4(0.7, 1, 2.5, 1);\n    vec4 s3 = vec4(-1, 1, 3.5, 0.5);\n    \n    float sphereDist1 =  length(p-s1.xyz)-s1.w;\n    float sphereDist2 =  length(p-s2.xyz)-s2.w;\n    float sphereDist3 =  length(p-s3.xyz)-s3.w;\n    \n    float box = sdBox(p-vec3(2.0,.5,4.0),vec3(.0,.8,.0))-0.03;\n    \n    float sphereDist = max(sphereDist1,-sphereDist2);\n    sphereDist =  smin(sphereDist,sphereDist3,0.05);\n   \n    //float sphereDist =  smin(sphereDist1,-sphereDist2,-.01);\n    \n    \n    float planeDist = p.y+0.4*p.x-0.4*p.z+1.7;\n    \n    float d = smin(sphereDist, planeDist,0.3+0.2*sin(iTime));\n    \n    d = min(d,box);\n    \n    return d;\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    float it = float(MAX_STEPS);\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST){\n            it = float(i);\n            break;\n        }\n    }\n    \n    return vec2(dO,it);\n}\n\nvec3 GetNormal(vec3 p,float dd) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.003*dd, 0);\n    \n    vec3 n = vec3(\n        GetDist(p+e.xyy),\n        GetDist(p+e.yxy),\n        GetDist(p+e.yyx))\n        - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetLight(vec3 p, vec3 rn, float dd) {\n    vec3 lightPos = vec3(0, 7, 2);\n    lightPos.xz += 2.*vec2(sin(0.4*iTime), cos(0.4*iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p, dd);\n    \n    float dif = dot(n, l);\n    vec2 hh = RayMarch(p+n*SURF_DIST*2., l);\n    float d = hh.x;\n    \n    vec3 R = rn - 2.0*dot(rn,n)*n;\n    float h = dot(R,l);\n    float fres = 0.0;\n    if(h>0.0){\n    \tfres = pow(h,8.0);\n    }\n    \n    if(d<length(lightPos-p)) dif *= 0.;\n    if(d<length(lightPos-p)) fres *= 0.;\n    \n    vec3 dx = lightPos-p;\n    float d2 = dx.x*dx.x + dx.y*dx.y + dx.z*dx.z;\n    vec4 tex = n.z*n.z*texture(iChannel0, p.xy)+n.y*n.y*texture(iChannel0, p.xz)+n.x*n.x*texture(iChannel0, p.yz);\n    \n\t//return vec3(1.0)* (1000.0*(dif+0.5*fres)/d2);\n    return 1000.0*tex.xyz*(dif+0.5*fres)/d2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    vec2 hh = RayMarch(ro, rd);\n    float d = hh.x;\n    \n    vec3 p = ro + rd * d;\n    \n    vec3 dif = GetLight(p,rd,d);\n    \n    if(d>MAX_DIST) dif *= 0.0;\n    \n    col = 4.0*vec3(log(dif+90.)-log(90.));\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}