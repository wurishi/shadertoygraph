{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"const float zNear = 0.01;\nconst float zFar = 350.0;\nconst float FOV = (35.0 / 180.0) * 3.14159;\n\nconst float planeX = 1000.0;\nconst float planeZ = 1000.0;\nconst float planeY = 10.0;\nconst vec3  fogColor     = vec3(0.9, 0.9, 0.9);\nconst vec3  waterColor   = vec3(0.1, 0.2, 0.9);\nconst vec3  groundColor0 = vec3(0.451, 0.361, 0.271);\nconst vec3  groundColor1 = vec3(0.949, 0.859, 0.361);\nconst vec3  groundColor2 = vec3(0.290, 0.718, 0.055);\n\n//source unknown\nfloat rand(vec3 v)\n{\n    return -1.0 + fract(sin(dot(v.xyz, vec3(12.9898, 78.233, 98.764))) * 43758.5453);\n}\n\nfloat map( float val, float startMin, float startMax, float endMin, float endMax )\n{\n    float t = (val - startMin) / (startMax - startMin);\n    return endMin + t * (endMax - endMin);\n}\n\nvec3 rayMarch( vec3 start, vec3 dir, float far )\n{\n    dir = normalize( dir );\n    \n    vec3 pos = start;\n    vec2 uv;\n    for(int i = 0; i < 200; ++i)\n    {\n        uv = vec2( \n            map( mod(pos.x + planeX * 0.5, planeX), 0.0, planeX, 0.0, 1.0), \n            map( mod(pos.z + planeZ * 0.5, planeZ), 0.0, planeZ, 0.0, 1.0)\n        );\n        float val = texture(iChannel0, uv).r;\n        val = map(val, 0.0, 1.0, 0.0, -planeY);\n        float dif = pos.y - val;\n        if(dif < 0.1)\n            return pos;\n        pos += dir * 0.6 * dif;\n    }\n    return start + dir * far;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 camPos = vec3( iTime * 1.0,  40.0, iTime * 10.0 );\n    \n    //0 - 1\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //calculate field of view\n    float aspect = iResolution.x / iResolution.y;\n    float FOVy = FOV / aspect;\n    \n    //add a little more to change look direction\n    float angleH = 0.1 + map( uv.x, 0.0, 1.0, -FOV * 0.5, FOV * 0.5 );\n    float angleV = -0.2 + map( uv.y, 0.0, 1.0, -FOVy * 0.5, FOVy * 0.5 );\n    \n    //project out of camera\n    vec3 direction = vec3( sin( angleH ), sin( angleV ), cos( angleH ) ); \n    \n    vec3 intersect = rayMarch( camPos, direction, zFar );\n    float height = (planeY + intersect.y) / planeY;\n    \n    float dist = length( intersect - camPos );\n        \n    float fog = clamp( map( dist, zFar * 0.75, zFar, 0.0, 1.0 ), 0.0, 1.0);\n    \n    float water = height < 0.5 ? 1.0 : 0.0;\n    \n    float col0 = clamp(map(height, 0.0, 0.5, 1.0, 0.0), 0.0, 1.0);\n    float col1 = clamp(1.0 - abs(height * 2.0 - 1.0), 0.0, 1.0);\n    float col2 = clamp(map(height, 0.5, 1.0, 0.0, 1.0), 0.0, 1.0);\n    col0 *= col0;\n    col1 *= col1;\n    col2 *= col2;\n    \n    vec3 vNoise = floor(intersect * 5.0) * 0.2;\n    float noise = rand(vNoise);\n    vec3 noiseColor = 0.05 * vec3(1.0, 1.0, 1.0) * noise;\n    \n    vec3 groundComp = noiseColor + col0 * groundColor0 + col1 * groundColor1 + col2 * groundColor2;\n    vec3 color = groundComp * (1.0 - 0.5 * water) + waterColor * water;\n    \n    fragColor = vec4(((1.0 - fog) * color * height + fog * fogColor).xyz, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MlX3Rl","date":"1424237658","viewed":184,"name":"Tiny Lakes","username":"rydrman","description":"First one ever, feedback welcome! Procedural geometry to create land and then water added over top. I hope to add more to this in the future.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","raymarching","water"],"hasliked":0,"parentid":"","parentname":""}}