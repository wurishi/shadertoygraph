{"ver":"0.1","info":{"id":"X3GXRd","date":"1720339571","viewed":20,"name":"rtpmtest","username":"maxiie","description":"rtpmtest","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["rtpmtest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.141592;\nconst float tau = 2.0*pi;\n\n\n\n//#define TIME (3.0*tau/4.0)\n#define TIME iTime/2.0\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\nconst float sphereRadius = 15.0;\nconst float camRadius = 2.0*sphereRadius;\n\nstruct rtpm {\n    bool dh;\n    float col;\n    float br;\n    vec3 rd;\n    vec3 p;\n    int sp;\n    \n};\n   bool cube(vec3 p, float sz){\n    return abs(p.x)<sz&&abs(p.y)<sz&&abs(p.z)<sz;\n}\n\nrtpm cube1(rtpm a) \n{     \n    rtpm b=a;\n    if (!cube(a.p,10.)) {\n        b.dh=false;\n        return b;\n    }\n    b.dh=true;\n    if(a.sp==0){b.col=(0.5+a.col+length(sin(a.p)))/3.;b.br+=1.;b.rd+=vec3(0.01,0.02,0.03);}\n    if(a.sp==1){b.col=(0.7+a.col+length(sin(a.p)))/3.;b.br+=0.7;b.rd*=vec3(1.002,1.003,1.001);}\n    if(a.sp==2){b.col=(0.9+a.col+length(sin(a.p)))/3.;b.br+=0.5;b.rd/=vec3(1.3,1.1,1.2);}\n    return b;\n    \n}\n\nrtpm intersect(vec3 ro, vec3 rd,int sp) {\n  \n    vec3 step = normalize(rd)/10.;\n    bool f=false;\n    \n    rtpm a=rtpm(false,0.,0.,rd,ro,sp);\n    \n    const int maxTrace = 1000;\n    for (int i = 0; i < maxTrace; i++) {\n        if(a.br>100.)break;\n        rtpm h = cube1(a);\n        if (h.dh) {\n           a=h;\n           rd=a.rd;\n           step = normalize(rd)/10.;\n           a.p+=step*0.1;\n           i=0;\n           f=true;\n        }\n        else a.p+=step*5.;\n         \n    }\n    a.dh=f;\n \treturn a;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord / iResolution.xy - 0.5;\n    vec3 worldUp = vec3(0,1,0);\n    vec3 camPos = vec3(camRadius*sin(TIME*1.0), 10, 1.0*camRadius*cos(TIME*1.0));\n    vec3 lookAt = vec3(0,0,0);\n    vec3 camDir = normalize(lookAt - camPos);\n    vec3 camRight = normalize(cross(camDir, worldUp));\n    vec3 camUp = cross(camRight, camDir);\n    \n    vec3 filmCentre = camPos + camDir*0.3;\n    vec2 filmSize = vec2(1,iResolution.y / iResolution.x);\n    \n    vec3 filmPos = filmCentre + uv.x*filmSize.x*camRight + uv.y*filmSize.y*camUp;\n    vec3 ro = camPos;\n    vec3 rd = normalize(filmPos - camPos);\n    fragColor = vec4(0,0,0,0);\n    \n    rtpm h = intersect(ro, rd,0);    \n    if(h.dh) {\n        fragColor += vec4(h.col,0,0,1);\n    }\n     h = intersect(ro, rd,1);    \n    if(h.dh) {\n        fragColor += vec4(0,h.col,0,1);\n    }\n     h = intersect(ro, rd,2);    \n    if(h.dh) {\n        fragColor += vec4(0,0,h.col,1);\n    }\n}","name":"Image","description":"","type":"image"}]}