{"ver":"0.1","info":{"id":"MtjfRV","date":"1516579107","viewed":116,"name":"19/2018","username":"rimina","description":"This shader is part of my daily shader challenge. Today I tried to implement my first path tracer ever. I'm not sure if I'm doing it right and yeah the materials are still quite scars. ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["pathtracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Simple path tracer. I used Iq's great article as a tutorial for this.\n//https://iquilezles.org/articles/simplepathtracing\n\n#define STEPS 32\n#define FAR 100.0\n#define EPSILON 0.5/iResolution.x\n#define PI 3.14159265359\n\n#define SAMPLES 6.0\n#define BOUNCES 18\n\n#define FOG_COLOR vec3(0.55, 0.6, 0.75)\n#define SUN_COLOR vec3(0.8, 0.75, 0.7)\n\n//Hash method from https://www.shadertoy.com/view/4djSRW\n#define HASHSCALE1 443.8975\nfloat hash(float p){\n\tvec3 p3  = fract(vec3(p) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nfloat hash13(vec3 p3){\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\n//Direction functions from Ambient occlusion method\n//introduced in https://www.shadertoy.com/view/4sdGWN\nvec3 randomSphereDir(vec2 rnd){\n\tfloat s = rnd.x*PI*2.;\n\tfloat t = rnd.y*2.-1.;\n\treturn vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);\n}\nvec3 randomHemisphereDir(vec3 dir, float i){\n\tvec3 v = randomSphereDir( vec2(hash(i+1.), hash(i+2.)) );\n\treturn v * sign(dot(v, dir));\n}\n\n//Distance functions from Mercury's SDF library\n//http://mercury.sexy/hg_sdf/\n\n// Plane with normal n (n is normalized) at some distance from the origin\nfloat fPlane(vec3 p, vec3 n, float distanceFromOrigin) {\n\treturn dot(p, n) + distanceFromOrigin;\n}\n\nfloat fSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nvec2 dist(vec3 p){\n    float plane = fPlane(p, vec3(0.0, 1.0, 0.0), 1.0);\n    float sphere = fSphere(p-vec3(-2.0, 0.5, 0.0), 1.0);\n    sphere = min(sphere, fSphere(p-vec3(2.0, 0.5, 0.0), 1.0));\n    \n    float id = 0.0;\n    if(sphere < plane){\n        id = 1.0;\n    }\n    \n    return vec2(min(plane, sphere), id);\n}\n\nvec3 normals(vec3 p){\n    vec3 eps = vec3(EPSILON, 0.0, 0.0);\n    return normalize(vec3(\n        dist(p+eps.xyy).x-dist(p-eps.xyy).x,\n        dist(p+eps.yxy).x-dist(p-eps.yxy).x,\n        dist(p+eps.yyx).x-dist(p-eps.yyx).x\n    ));\n}\n\n//Enhanced sphere tracing algorithm introduced by Mercury\n\n// Sign function that doesn't return 0\nfloat sgn(float x) {\n\treturn (x < 0.0)?-1.0:1.0;\n}\n\nvec2 march(vec3 ro, vec3 rd){\n    float t = 0.001;//EPSILON;\n    float step = 0.0;\n\n    float omega = 1.3;//muista testata eri arvoilla! [1,2]\n    float prev_radius = 0.0;\n\n    float candidate_t = t;\n    float candidate_error = 1000.0;\n    float sg = sgn(dist(ro).x);\n\n    vec3 p = vec3(0.0);\n\n\tfor(int i = 0; i < STEPS; ++i){\n\t\tp = rd*t+ro;\n\t\tfloat sg_radius = sg*dist(p).x;\n\t\tfloat radius = abs(sg_radius);\n\t\tstep = sg_radius;\n\t\tbool fail = omega > 1. && (radius+prev_radius) < step;\n\t\tif(fail){\n\t\t\tstep -= omega * step;\n\t\t\tomega = 1.;\n\t\t}\n\t\telse{\n\t\t\tstep = sg_radius*omega;\n\t\t}\n\t\tprev_radius = radius;\n\t\tfloat error = radius/t;\n\n\t\tif(!fail && error < candidate_error){\n\t\t\tcandidate_t = t;\n\t\t\tcandidate_error = error;\n\t\t}\n\n\t\tif(!fail && error < EPSILON || t > FAR){\n\t\t\tbreak;\n\t\t}\n\t\tt += step;\n\t}\n    //discontinuity reduction\n    float er = candidate_error;\n    for(int j = 0; j < 6; ++j){\n        float radius = abs(sg*dist(p).x);\n        p += rd*(radius-er);\n        t = length(p-ro);\n        er = radius/t;\n\n        if(er < candidate_error){\n            candidate_t = t;\n            candidate_error = er;\n        }\n    }\n\tif(t <= FAR || candidate_error <= EPSILON){\n\t\tt = candidate_t;\n\t}\n    \n    p = ro+rd*t;\n    float id = dist(p).y;\n    \n\treturn vec2(t, id);\n}\n\nvec3 color(float obj){\n    vec3 base = vec3(0.0);\n    if(obj == 1.0){\n        base = vec3(0.6, 0.4, 0.2);\n    }\n    else if(obj == 0.0){\n        base = vec3(0.1, 0.12, 0.15);\n    }\n    return base;\n}\n\n\nvec3 render(vec3 o, vec3 d, vec2 uv){\n    vec3 ro = o;\n    vec3 rd = d;\n    \n    vec3 tcol = vec3(0.0);\n    vec3 fcol = vec3(1.0);\n    \n    for(int i = 0; i < BOUNCES; ++i){\n        vec2 t = march(ro, rd);\n        vec3 p = ro+rd*t.x;\n        if(t.y < 0.0 || t.x > FAR){\n            tcol += FOG_COLOR;\n            break;\n        }\n        vec3 ecol = color(t.y);\n        \n        tcol += ecol * fcol;\n        fcol *= 0.75;\n\n        vec3 n = normals(p);\n        \n        ro = p+(n*0.2);\n        rd = randomHemisphereDir(n, hash13(vec3(uv, float(i)+iTime*0.01)));\n    }\n    \n    return tcol;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 q = -1.0+2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n    \n    vec3 ro = vec3(5.0*sin(iTime*0.5), 2.0, 5.0*cos(iTime*0.5));\n    vec3 rt = vec3(0.0, 0.5, 0.0);\n    \n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n\n    vec3 color = vec3(0.0);\n    \n    for(float i = 0.0; i < SAMPLES; ++i){\n    \tvec3 rd = normalize(mat3(x, y, z)*vec3(q, radians(90.0)));\n    \tcolor += render(ro, rd, uv);\n    }\n    color /= SAMPLES;\n    \n    color = smoothstep(0.0, 1.3, color);\n    \n    color = pow(color, 1.0/vec3(2.2));\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}