{"ver":"0.1","info":{"id":"XflfR4","date":"1723471431","viewed":54,"name":"Bezier curve, lerp, wights","username":"dsd","description":"Experiments with linear interpolation","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beziercurve","lerp","bernsteinpolynomial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float asr = 16./9.;\n\nfloat thick = .013;\n\nvec2 nuv;\nvec3 col;\n\nvec2 nx(vec2 v) {\n    return vec2(v.x*asr, v.y);\n}\n\nvoid smst(float edge, float x, vec3 x_col) {\n    float d = fwidth(edge);\n    float a = smoothstep(edge - d, edge + d, x);\n    col = mix(col, x_col, a);\n}\n\nvoid draw_cyrc(vec2 center, float radius, vec3 c_col) {\n    smst(length(nuv - center), radius, c_col);\n}\n\nvoid draw_line(vec2 a, vec2 b, float thick, vec3 l_col) {\n    vec2 nuva = nuv - a, ba = b - a;\n    float t = dot(nuva, ba)/dot(ba, ba);\n    vec2 o = a + ba*clamp(t, 0., 1.);\n    smst(length(nuv - o), thick/2., l_col);\n}\n\nvec2 lerp(vec2 a, vec2 b, float t ) {\n    return (1.-t)*a + t*b;\n}\n\nfloat det(vec2 p, vec2 u) {\n    return p.x*u.y - p.y*u.x;\n}\n\nvoid draw_curve_frag(vec2 p, vec2 p0, vec2 p1, vec2 p2, float t) {\n    if (t >= 0. && t <= 1.) {\n        vec2 pc = lerp(lerp(p0, p1, t), lerp(p1, p2, t), t);\n        float ppc = length(p - pc);\n        //smst(ppc, thick, vec3(1.));\n        float d = .0045;\n        float a = smoothstep(ppc - d, ppc + d, thick);\n        col = mix(col, vec3(1.), a);\n    }\n}\n\nvoid draw_curve(vec2 p0, vec2 p1, vec2 p2, vec2 cent) {\n    vec2\n        nuvc = nuv - cent,\n        pc0 = p0-cent,\n        pc1 = p1-cent,\n        pc2 = p2-cent;\n    \n    float\n        d0 = det(pc0, nuvc),\n        d1 = det(pc1, nuvc),\n        d2 = det(pc2, nuvc);\n        \n    float\n        a = d0 - 2.*d1 + d2,\n        b = d0 - d1,\n        c = d0;\n    \n    float d = b*b - a*c;  \n    \n    float t1 = (b + sqrt(d))/a;\n    float t2 = (b - sqrt(d))/a;\n    \n    draw_curve_frag(nuvc, pc0, pc1, pc2, t1);\n    draw_curve_frag(nuvc, pc0, pc1, pc2, t2);\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    nuv = nx(uv);\n      \n    col = vec3((1.-uv.y)*.3, (1.-uv.y)*.25, (1.-uv.y)*.5);\n    \n    float t = (cos(iTime*.7) + 1.)/2.;\n    \n    float r = .015;    \n    \n    \n    vec2 p0 = vec2(.3, .2);\n    p0 = nx(p0);\n    vec2 p1;\n    if (iMouse.xy == vec2(0)) p1 = vec2(.1, .9);\n    else p1 = vec2(iMouse.xy/iResolution.xy);\n    p1 = nx(p1);\n    vec2 p2 = vec2(.7, .8);\n    p2 = nx(p2);\n    \n    vec2 c = (p0 + p1 + p2)/3.;\n    \n    vec2 p01 = lerp(p0, p1, t);\n    vec2 p12 = lerp(p1, p2, t);\n    vec2 pc = lerp(p01, p12, t);\n    \n\n    vec3 col0 = vec3(1., 0., 0.);\n    vec3 col1 = vec3(0., 0., 1.);\n    vec3 col2 = vec3(0., 1., 0.);\n     \n    vec3 col01 = mix(col0, col1, t);\n    vec3 col12 = mix(col1, col2, t);\n    vec3 col012 = mix(col01, col12, t);\n    \n    \n    draw_curve(p0, p1, p2, c);\n    \n    \n    float thick2 = thick/2.;   \n    draw_line(p0, p1, thick2, mix(col0, col1, length(nuv - p0)/length(p1 - p0)));\n    draw_line(p1, p2, thick2, mix(col1, col2, length(nuv - p1)/length(p2 - p1)));\n    draw_line(p01, p12, thick2, mix(col01, col12, length(nuv - p01)/length(p12 - p01)));\n    \n    \n    draw_cyrc(p0, r, col0);\n    draw_cyrc(p1, r, col1);\n    draw_cyrc(p2, r, col2);\n    draw_cyrc(c, r, vec3(1., 1., 0.));\n        \n    draw_cyrc(p01, r, col01);\n    draw_cyrc(p12, r, col12);\n\n\n    vec2 w0 = (1.-t)*(1.-t)*(p0 - c);\n    vec2 w1 = 2.*(1.-t)*t*(p1 - c);\n    vec2 w2 = t*t*(p2 - c);\n    \n    vec2 pw0 = vec2(.6, .15);\n    pw0 = nx(pw0);\n    vec2 pw1 = vec2(.6, .1);\n    pw1 = nx(pw1);\n    vec2 pw2 = vec2(.6, .05);    \n    pw2 = nx(pw2);\n    \n    draw_line(pw0, pw0 + vec2(pw0.x*length(w0), 0.), thick, col0);\n    draw_line(pw1, pw1 + vec2(pw1.x*length(w1), 0.), thick, col1);\n    draw_line(pw2, pw2 + vec2(pw2.x*length(w2), 0.), thick, col2);\n    \n       \n    vec2 ww0 = c + w0;\n    vec2 ww1 = ww0 + w1;\n    vec2 ww2 = ww1 + w2;\n    draw_line(c, ww0, thick, col0);\n    draw_line(ww0, ww1, thick, col1);\n    draw_line(ww1, ww2, thick, col2);\n    \n    \n    draw_cyrc(pc, r, col012);\n    \n       \n    fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}