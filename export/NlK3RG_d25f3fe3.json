{"ver":"0.1","info":{"id":"NlK3RG","date":"1637974411","viewed":104,"name":"Austin Spraggins 11/23/21 Shader","username":"SpragginsDesigns","description":"Following the tutorial, still working on the animation part.\nEdit - Followed an amazing tutorial on converting GLSL source code to Shader Toy. ","likes":3,"published":1,"flags":8,"usePreview":0,"tags":["tutorial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I Followed a great tutorial from http://free-tutorials.org\n// Original Author: David Hoskins\n// Revised By Austin Spraggins on 11/26/2021\n// Changed everything except lines 6-10, 11-15 have been redone. \n\n#define f length(fract(q*=m*=.6+.1*d++)-.5)\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float d = 0.;\n    // vec 3 finds the first and end pixel for your screen size\n    // iTime is how fast/slow the animation goes\n    vec3 q = vec3(fragCoord.xy/iResolution.yy-13., iTime*.6);\n    mat3 m = mat3(-2,-1,4, 5,-2,1, -2,4,3);\n    vec3 col = vec3(pow(min(min(f,f),f), 5.)*50.);\n    // Color of vec4 \n    // The blue/white colors\n    fragColor = vec4(clamp(col + vec3(0., 0.30, 1), 0.2, 2.0), 2.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    // A 440 Hz wave that attenuates quickly overtime\n    return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n}","name":"Sound","description":"","type":"sound"}]}