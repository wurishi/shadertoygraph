{"ver":"0.1","info":{"id":"NldfR4","date":"1662812459","viewed":518,"name":"Fraggiti","username":"leon","description":"Fragmento del graffiti, es el fraggiti!","likes":32,"published":3,"flags":32,"usePreview":0,"tags":["tag","graffiti"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Fraggiti\n// revisiting Brush Toy https://www.shadertoy.com/view/NlSBW3\n// but this time paint is fresh and leaky\n// the three thumbnails on the right are the \"debug g-buffer art\"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // lighting\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0, uv);\n    float mask = data.r;\n    vec3 light = normalize(vec3(0,1,1));\n    vec3 normal = texture(iChannel1, uv).rgb;\n    float shade = dot(normal, light)*.5+.5;\n    vec4 color = vec4(uv, .5, 1);\n    \n    // background\n    color.rgb = vec3(1) * smoothstep(2., -2., length(uv-.5));\n    \n    if (shade > .01)\n    {\n        // materials\n        float select = fract(iTime*speed/4.);\n        if (select > .75) {\n            color.rgb = .5+.5*cos(vec3(1,2,3)*5.+min(3., mask));\n            color += pow(shade, 60.);\n        } else if (select > .5) {\n            color.rgb = .5+.5*cos(vec3(1,2,3)*5.+uv.y*5.);\n            color *= shade*.5+.5;\n            color += pow(shade, 60.);\n        } else if (select > .25) {\n            color.rgb = .5+.5*cos(vec3(1,2,3)*5.5+shade*2.+2.);\n        } else {\n            color = vec4(shade);\n        }\n        \n    } else {\n        \n        // debug g-buffer\n        uv *= 3.;\n        uv.x -= 2.;\n        uv.y -= 2.;\n        if (uv.x < 1. && uv.y < 1.) {\n            vec4 map = texture(iChannel0, uv);\n            if (map.r + map.g > .01) color = map;\n        }\n        uv.y += 1.;\n        if (uv.x < 1. && uv.y < 1.) {\n            vec4 map = texture(iChannel1, uv);\n            if (map.a > .01) color = map;\n        }\n        uv.y += 1.;\n        if (uv.x < 1. && uv.y < 1.) {\n            normal = texture(iChannel1, uv).rgb;\n            shade = dot(normal, light)*.5+.5;\n            if (shade > .01) color = vec4(shade);\n        }\n    }\n    \n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// move horizontally, with circles and random offset\nvec2 move(float t)\n{\n    vec2 pos = vec2(0);\n    float angle = t*12.;\n    float radius = .1;\n    float time = t*5.;\n    float index = floor(time);\n    float anim = fract(time);\n    float scroll = fract(t*speed);\n    vec2 rng = mix(hash21(index), hash21(index+1.), anim);\n    pos += (rng*2.-1.)*.5;\n    pos.x += scroll*2.-1.;\n    pos += vec2(cos(angle),sin(angle))*radius;\n    return pos;\n}\n\n// draw mask\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pos = 2.*(fragCoord-iResolution.xy/2.)/iResolution.y;\n    \n    // mask\n    float scroll = fract(iTime*speed);\n    float thin = .1+.05*sin(iTime*16.);\n    float dist = sdSegment(pos, move(iTime-iTimeDelta), move(iTime));\n    float mask = smoothstep(thin,.0,dist);\n    \n    // leaks\n    float time = iTime*100.;\n    float anim = fract(time);\n    float index = floor(time);\n    float wave = sin(anim*3.14);\n    vec3 noise = texture(iChannel2, uv).rgb;\n    vec3 normal = texture(iChannel1, uv).rgb;\n    vec2 target = (hash21(index)*2.-1.);\n    float d = length(pos-target);\n    float gravity = wave * smoothstep(.1,.0,d) * 10.;\n    vec2 offset = vec2(0,1)/iResolution.xy;\n    vec4 frame = texture(iChannel0, uv+offset);\n    float leak = frame.g;\n    gravity *= smoothstep(.6, 1., noise.g);\n    gravity *= max(0., dot(normal, -vec3(0,1,0)));\n    uv.y += noise.b*leak/iResolution.y;\n    uv -= leak*normal.xy/iResolution.xy;\n    \n    // frame buffer\n    frame = texture(iChannel0, uv);\n    mask = mask * 0.1 + frame.r;\n    fragColor = vec4(mask, frame.g+gravity, 0, 0);\n    fragColor *= step(.01, scroll);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define speed 0.2\n\n#define T(uv) texture(iChannel0, uv).r\n\n// Inigo Quilez https://iquilezles.org/articles/distfunctions2d/\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nvec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n// compute normal\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = texture(iChannel0, uv);\n    vec3 unit = vec3(1./iResolution.xy, 0);\n    vec3 normal = normalize(vec3(\n                            T(uv+unit.xz)-T(uv-unit.xz),\n                            T(uv-unit.zy)-T(uv+unit.zy),\n                            color.r*.5));\n                            \n    fragColor = vec4(normal, length(normal));\n}","name":"Buffer B","description":"","type":"buffer"}]}