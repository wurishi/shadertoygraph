{"ver":"0.1","info":{"id":"4333Rr","date":"1715963556","viewed":52,"name":"Split the work (tooooool)","username":"ademdj12","description":"This shader divides the screen into a grid\n    of chunks and displays a checkered pattern\n    within each chunk. \n    Visible squares are determined based on the\n    pixel's position and a dynamic offset value.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["grid","split","tutorialmchunk"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    This shader divides the screen into a grid\n    of chunks and displays a checkered pattern\n    within each chunk. \n    Visible squares are determined based on the\n    pixel's position and a dynamic offset value.\n*/\n\n#define width 10\n// speed variable is only for visualising so if you plan to use this remove it\n#define speed 0.05\n\n#define cwidth 4\n// \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // calculating local chunk uv \n    vec2 chunk_uv = vec2(int(fragCoord.x) % (width), int(fragCoord.y) % (width));\n    chunk_uv = chunk_uv / float(width);\n    \n    // current active chunk control variable\n    int chunk_step = int( float(iFrame) * speed ) % (cwidth*cwidth);\n    \n    // calculating chunk coord\n    vec2 chunk_coord = vec2(\n        floor(fragCoord.x / float(width)),\n        floor(fragCoord.y / float(width))\n    );\n    \n    // local coord in chunk \n    vec2 local_coord = vec2(\n        int(chunk_coord.x) % cwidth,\n        int(chunk_coord.y) % cwidth\n\n    );\n    // conveting local_coord to base dim\n    float local_2_base = local_coord.x + local_coord.y * float(cwidth);\n    \n    // active chunk flag\n    bool current_active = int(local_2_base) == chunk_step;  \n    \n    // your logic\n    if(current_active){\n        // do logic here for the wanted pixels\n        vec4 chunk_color = vec4(\n            chunk_coord / (iResolution.xy / float(width)),\n            1.0-chunk_coord / (iResolution.xy / float(width))\n        );\n        fragColor = chunk_color + 0.2;\n    }else{\n        // discarded pixels\n        fragColor = vec4(chunk_uv,0.0,0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}