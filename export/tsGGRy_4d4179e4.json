{"ver":"0.1","info":{"id":"tsGGRy","date":"1570443745","viewed":448,"name":"Visualiser 203","username":"Cotterzz","description":"Really simple - just a load of squares, each one gives you the level of each semitone.\nOctave 9 is incomplete, and there isn't enough resolution in the data for octave 0 to be read properly.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fft","spectrum","audio","rgb"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rn","filepath":"/media/a/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","previewfilepath":"/media/ap/3c33c415862bb7964d256f4749408247da6596f2167dca2c86cc38f83c244aa6.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \nThe next version of my audio shader\nhttps://www.shadertoy.com/view/Wdy3DW - 202\nhttps://www.shadertoy.com/view/wdGGzm - 201\nhttps://www.shadertoy.com/view/WdG3zw - 104\nhttps://www.shadertoy.com/view/WsyGRw - 103\nhttps://www.shadertoy.com/view/wsKGzD - 102\nhttps://www.shadertoy.com/view/3dV3zh - 101\nThis is MUCH simpler - each square is a halftone, each row is an octave\ndata pulled straight from the fft data\n*/\n\n#define TWO_PI 6.28318530718\n\n#define C9 8372.02\n#define Db9 8870.\n#define D9 9398.\n#define Eb9 9974.\n#define E9 10548.\n#define F9 11176.\n#define Gb9 11840.\n#define G9 12544.\n#define Ab9 13290.\n#define A9 14080.\n#define Bb9 14918.\n#define B9 15804.\n\nfloat notes[] = float[](C9, Db9, D9,Eb9,E9,F9,Gb9,G9,Ab9,A9,Bb9,B9);\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    vec2 U = u / iResolution.xy,\n        to = U * vec2(12,10),\n        TO = floor(to),\n        D  =  abs(fract(to) - .5);\n\n    float dist = max(D.x, D.y),\n     frequency = notes[int(TO.x)] / exp2(9.-TO.y),\n             f = texture(iChannel0, vec2(frequency/1e4,0)).r,\n\t\tbright = smoothstep(.0, .01 , (f*f*f*f)-dist*2. );\n\t\n    O = bright * ( .6 + .6*cos( TWO_PI*(U.x-.15) + vec4(0,23,21,0)  ) );\n}\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float notes[12] = float[12](C9, Db9, D9,Eb9,E9,F9,Gb9,G9,Ab9,A9,Bb9,B9);\n    \n    int octave = int(floor(uv.y * 10.0));\n    int semitone = int(floor(uv.x * 12.0));\n    \n    float disty = abs(fract(uv.y*10.0)-0.5);\n    float distx = abs(fract(uv.x*12.0)-0.5);\n    float dist = max(distx, disty);\n \n    float frequency = notes[semitone]/pow(2.0, 9.0-float(octave));\n    \n    float freqv = texture(iChannel0, vec2(frequency/10000.,0.0)).r;\n\tfreqv *=freqv;\n    freqv *=freqv;\n    float bright = step(dist*2.0, freqv);\n\t\n    float c = 0.6;\n    vec4 col = ( c + c*cos( TWO_PI*(uv.x-0.15) + vec4(0,23,21,0)  ) );\n\tfragColor = col*bright;\n}\n*/","name":"Image","description":"","type":"image"}]}