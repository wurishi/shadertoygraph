{"ver":"0.1","info":{"id":"stfXD8","date":"1625571219","viewed":308,"name":"parallax bitstream","username":"Carandiru","description":"gif\nyou can also pan with the mouse (while holding mouse down on toy)","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["xor","bitfield"],"hasliked":0,"parentid":"stfSDn","parentname":"alien bitfield"},"renderpass":[{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://bit.ly/supersinfulsilicon\n\n// shader by Jason Tully is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.\n// Based on a work at https://www.shadertoy.com/view/stfXD8\n// Permissions beyond the scope of this license may be available at http://bit.ly/supersinfulsilicon\n\n// viridis palette function port //             \n#define fma(a,b,c) (a*b+c)\n\nvec3 viridis(float t) \n{\n\tconst vec3 _c0 = vec3( 0.2777273272234177, 0.005407344544966578, 0.3340998053353061 );\n\tconst vec3 _c1 = vec3( 0.1050930431085774, 1.404613529898575, 1.384590162594685 );\n\tconst vec3 _c2 = vec3( -0.3308618287255563, 0.214847559468213, 0.09509516302823659 );\n\tconst vec3 _c3 = vec3( -4.634230498983486, -5.799100973351585, -19.33244095627987 );\n\tconst vec3 _c4 = vec3( 6.228269936347081, 14.17993336680509, 56.69055260068105 );\n\tconst vec3 _c5 = vec3( 4.776384997670288, -13.74514537774601, -65.35303263337234 );  \n    const vec3 _c6 = vec3( -5.435455855934631, 4.645852612178535, 26.3124352495832 );  \n\n\tvec3 xmT = vec3(t);\n    \n    vec3 x;\n\n    // c0 + t * (c1 + t * (c2 + t * (c3 + t * (c4 + t * (c5 + t * c6)))))\n    x = fma(xmT, _c6, _c5);\n    x = fma(x, xmT, _c4);\n    x = fma(x, xmT, _c3);\n    x = fma(x, xmT, _c2);\n    x = fma(x, xmT, _c1);\n    x = fma(x, xmT, _c0);\n\n    return(x);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n  \n    float a = textureLod(iChannel0, uv, 0.0).r;\n    \n    float aa = textureLod(iChannel0, uv, 0.5).r;\n    \n    vec3 color, v;\n    \n    v = viridis(1.0f - aa);\n    \n    color = v;\n    //color = color + color * a;\n    color *= color;\n    \n    fragColor = vec4(pow(color, vec3(1.0f/2.2f)), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = mix(vec2(START), iMouse.xy + START, bvec2(iMouse.z > 0.0f));\n        \n    float new = bits(mouse, fragCoord.xy, iResolution.x, 512.0, 192.0f, 0.000625, iTime);\n    \n    // Output to screen\n    fragColor = vec4(vec3(new), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = mix(vec2(START), iMouse.xy + START, bvec2(iMouse.z > 0.0f));\n    \n    float new = bits(mouse, fragCoord.xy, iResolution.x, 1024.0, 256.0f, 0.000625, iTime);\n    \n    // Output to screen\n    fragColor = vec4(vec3(new), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define SCALE 0.75f\n#define START 333.0F\n\nvec2 T(in float tt, in float ss) { return(ss * vec2(tt,-tt)); }\n\nfloat bits( vec2 m, vec2 c, float x, float dd, float ss, float bb, float tt )\n{\n    float d = x / dd;\n\n    ivec2 a = ivec2(c + T(tt, ss) + m * 10.0f);\n\n    float z = pow(mod(float(a.x ^ a.y), d / float(a.x + a.y)), bb);\n    \n    return z;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float old = textureLod(iChannel0, uv, 0.0).r;\n    \n    float bit[2];\n    \n    bit[0] = textureLod(iChannel0, uv * SCALE, 0.0).r;\n    \n    bit[1] = textureLod(iChannel1, uv * SCALE, 0.0).r;\n    \n    bit[0] = mix(old, bit[0], 0.5f);\n    \n    bit[1] = mix(old, bit[1], 0.5f);\n    \n    fragColor = vec4(vec3(mix(bit[0], bit[1], 0.5f)), 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}