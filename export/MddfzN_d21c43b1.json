{"ver":"0.1","info":{"id":"MddfzN","date":"1525193687","viewed":129,"name":"Computer Graphics: Clock","username":"ftr177","description":"Clock","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["clock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Creates a line segment:\n// p - coordinate system\n// a - position of segment\n// b - angle of segment\n// w - width of segment\nfloat lineSegment(vec2 p, vec2 a, vec2 b, float w) \n{\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return smoothstep(0.0, w, length(pa - ba*h));\n}\n\n// Creates the line segment and\n// movement for the second hand\nfloat secondHand(vec2 uv)\n{\n    float secondHand;\n    float second = mod(iDate.w, 60.0);\n    float angle = -second * 2.0 * 3.14159 / 60.0 + + (3.14159/2.0);\t// Converts from time to radians\n    secondHand = 1.0 - lineSegment(uv, vec2(0.0, 0.0), 0.31 * vec2(cos(angle), sin(angle)), .005);\n    return secondHand;\n}\n\n// Creates the line segment and\n// movement for the minute hand\nfloat minuteHand(vec2 uv)\n{\n    float minuteHand;\n    float minute = mod(iDate.w/60.0, 60.0);\t// Converts time in seconds to minutes\n    float angle = -minute * 2.0 * 3.14159 / 60.0 + (3.14159/2.0);\n    minuteHand = 1.0 - lineSegment(uv, vec2(0.0, 0.0), .25 * vec2(cos(angle), sin(angle)), .005);\n    return minuteHand;\n}\n\n// Creates the line segment and\n// movement for the hour hand\nfloat hourHand(vec2 uv)\n{\n    float hourHand;\n    float hour = mod(iDate.w/3600.0, 24.0);\n    float angle = -hour * 2.0 * 3.14159 / 12.0 + (3.14159/2.0);\n    hourHand = 1.0 - lineSegment(uv, vec2(0.0, 0.0), .19 * vec2(cos(angle), sin(angle)), .005);\n    return hourHand;\n}\n\n// Creates a circle:\n// uv - coordinate system\n// p - position\n// r - radius of circle\n// blur - blur\nfloat circle(vec2 uv, vec2 p, float r, float blur)\n{\n    float d = length(uv-p);\n    float c = smoothstep(r, r-blur, d);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Recenter coordinate system so that\n    // the center of the screen is (0., 0.)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv - 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n\n    //Drawing of the clock outline\n    vec3 col;\n    col = vec3(0.0);\n    float disc = circle(uv, vec2(0.0, 0.0), 0.35, 0.01);\n    disc -= circle(uv, vec2(0.0, 0.0), 0.34, 0.01);\n    col = vec3(1.0, 1.0, 1.0)*disc;\n    \n    // Drawing of the hands\n    col += vec3(0.0, secondHand(uv), secondHand(uv));\n    col += vec3(0.0, minuteHand(uv), 0.0);\n    col += vec3(hourHand(uv), 0.0, hourHand(uv));\n    \n    // Variation in screen color\n    //col -= vec3(cos(iTime*.5)*.25, cos(iTime*.75)*.25, sin(iTime*.75));\n\tcol -= 0.5*cos(.75*iTime+uv.xyx+vec3(2.0,2.0,2.0));\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}