{"ver":"0.1","info":{"id":"4d2Gzt","date":"1434381661","viewed":1102,"name":"4d soap bubble","username":"Antonalog","description":"travelling through a 4d soap bubble","likes":44,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"//various noises borrowed from iq\n\n#define FULL_PROCEDURAL\n\n\n#ifdef FULL_PROCEDURAL\n\n// hash based 3d value noise\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    return mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                   mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n               mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                   mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n}\n#else\n\n// LUT based 3d value noise\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = textureLod( iChannel0, (uv+ 0.5)/256.0, 0.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n#endif\n\n\n//x3\nvec3 noise3( in vec3 x)\n{\n\treturn vec3( noise(x+vec3(123.456,.567,.37)),\n\t\t\t\tnoise(x+vec3(.11,47.43,19.17)),\n\t\t\t\tnoise(x) );\n}\n\n//http://dept-info.labri.fr/~schlick/DOC/gem2.ps.gz\nfloat bias(float x, float b) {\n\treturn  x/((1./b-2.)*(1.-x)+1.);\n}\n\nfloat gain(float x, float g) {\n\tfloat t = (1./g-2.)*(1.-(2.*x));\t\n\treturn x<0.5 ? (x/(t+1.)) : (t-x)/(t-1.);\n}\n\n\nmat3 rotation(float angle, vec3 axis)\n{\n    float s = sin(-angle);\n    float c = cos(-angle);\n    float oc = 1.0 - c;\n\tvec3 sa = axis * s;\n\tvec3 oca = axis * oc;\n    return mat3(\t\n\t\toca.x * axis + vec3(\tc,\t-sa.z,\tsa.y),\n\t\toca.y * axis + vec3( sa.z,\tc,\t\t-sa.x),\t\t\n\t\toca.z * axis + vec3(-sa.y,\tsa.x,\tc));\t\n}\n\nvec3 fbm(vec3 x, float H, float L, int oc)\n{\n\tvec3 v = vec3(0);\n\tfloat f = 1.;\n\tfor (int i=0; i<10; i++)\n\t{\n\t\tif (i >= oc) break;\n\t\tfloat w = pow(f,-H);\n\t\tv += noise3(x)*w;\n\t\tx *= L;\n\t\tf *= L;\n\t}\n\treturn v;\n}\n\nvec3 smf(vec3 x, float H, float L, int oc, float off)\n{\n\tvec3 v = vec3(1);\n\tfloat f = 1.;\n\tfor (int i=0; i<10; i++)\n\t{\n\t\tif (i >= oc) break;\n\t\tv *= off + f*(noise3(x)*2.-1.);\n\t\tf *= H;\n\t\tx *= L;\n\t}\n\treturn v;\t\n}\n\n\nvec4 map( in vec3 p )\n{\n\tfloat d = 0.2 - p.y;\n\n\tvec3 q = p - vec3(1.0,0.1,0.0)*iTime;\n\t\n#if 0\t\n\tfloat f;\n    f  = 0.5000*noise( q ); q = q*2.02;\n    f += 0.2500*noise( q ); q = q*2.03;\n    f += 0.1250*noise( q ); q = q*2.01;\n    f += 0.0625*noise( q );\n\n\td += 3.0 * f;\n\n\td = clamp( d, 0.0, 1.0 );\n\t\n\tvec4 res = vec4( d );\n\n\tres.xyz = mix( 1.15*vec3(1.0,0.95,0.8), vec3(0.7,0.7,0.7), res.x );\n#endif\n\t\n//\tvec3 p = vec3(uv*.2,slow+change);\t\t\t\t\t//coordinate + slight change over time\n\tp -= vec3(1.0,0.1,0.0)*iTime*.01;\n\tp *= 4.;\n\t\n\tvec3 axis = 4. * fbm(p, 0.5, 2., 8);\t\t\t\t//random fbm axis of rotation\n\t\n\tvec3 colorVec = 0.5 * 5. * fbm(p*0.3,0.5,2.,7);\t\t//random base color\n\tp += colorVec;\n\t\n//\tfloat mag = 4e5;\t//published, rather garish?\n\tfloat mag = 0.75e5; //still clips a bit\n//\tmag = mag * (1.+sin(2.*3.1415927*ts)*0.75);\n\tvec3 colorMod = mag * smf(p,0.7,2.,8,.2);\t\t\t//multifractal saturation\n\tcolorVec += colorMod;\n\t\n\tcolorVec = rotation(3.*length(axis),normalize(axis))*colorVec;\n\n\tcolorVec *= 0.1;\n\t\n\tvec4 res;\n\tres.xyz = colorVec;\n\tres.w = length(colorVec)*8.;\n//\tres.xyz = vec3(pow(res.w,100.));\n//\tres.w = pow(res.w,100.);\n\tres = clamp(res, vec4(0),vec4(1));\n//#endif\t\n\treturn res;\n}\n\n\nvec3 sundir = vec3(-1.0,0.0,0.0);\n\n\nvec4 raymarch( in vec3 ro, in vec3 rd )\n{\n\tvec4 sum = vec4(0, 0, 0, 0);\n\n\tfloat t = 0.1;\n\tfor(int i=0; i<64; i++)\n\t{\n\t\tif( sum.a > 0.99 ) continue;\n\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos );\n\t\t\n\t\t#if 0\n\t\tfloat dif =  clamp((col.w - map(pos+0.3*sundir).w)/0.6, 0.0, 1.0 );\n\n        vec3 lin = vec3(0.65,0.68,0.7)*1.35 + 0.45*vec3(0.7, 0.5, 0.3)*dif;\n\t\tcol.xyz *= lin;\n\t\t#endif\n\t\t\n\t\tcol.a *= 0.35 * (t*8.);\n\t\tcol.rgb *= col.a;\n\n\t\tsum = sum + col*(1.0 - sum.a);\t\n\n        #if 0\n\t\tt += 0.1;\n\t\t#else\n\t\tt += max(0.1,0.025*t);\n\t\t#endif\n\t}\n\n\tsum.xyz /= (0.001+sum.w);\n\n\treturn clamp( sum, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    vec2 mo = vec2(0);//-1.0 + 2.0*iMouse.xy / iResolution.xy;\n    mo.x = sin(iTime*0.0125);\n    // camera\n    vec3 ro = 4.0*normalize(vec3(cos(2.75-3.0*mo.x), 0.7+(mo.y+1.0), sin(2.75-3.0*mo.x)));\n\tvec3 ta = vec3(0.0, 1.0, 0.0);\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\t\n    vec4 res = raymarch( ro, rd );\n#if 0\n\tfloat sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n\tvec3 col = vec3(0.6,0.71,0.75) - rd.y*0.2*vec3(1.0,0.5,1.0) + 0.15*0.5;\n\tcol += 0.2*vec3(1.0,.6,0.1)*pow( sun, 8.0 );\n\tcol *= 0.95;\n\tcol = mix( col, res.xyz, res.w );\n\tcol += 0.1*vec3(1.0,0.4,0.2)*pow( sun, 3.0 );\n#else\n\tvec3 col = res.xyz;\n#endif\t\n    fragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}