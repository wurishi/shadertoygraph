{"ver":"0.1","info":{"id":"slycW1","date":"1662153292","viewed":329,"name":"Interesting audio visualizer","username":"fishy","description":"audio visualizer. setting the barWidth to 1.0 and the barCount to 2000.0 yields interesting results as well","likes":7,"published":3,"flags":96,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4lSXWR","filepath":"https://soundcloud.com/nocopyrightsounds/electro-light-symbolism-ncs-release","previewfilepath":"https://soundcloud.com/nocopyrightsounds/electro-light-symbolism-ncs-release","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define xScale 1.0\n#define yScale 0.4\n#define barCount 20.0\n#define barWidth 0.5\n#define barHeight 0.2\n#define clipWidth 0.9\n#define curveDepth 0.4\n#define reflectionDepth 0.25\n#define reflectionHeight 0.6\n#define yPos -0.1\n\nfloat yOffset(float x)\n{\n    return sqrt(1.0-pow(max(0.0, x), 2.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(0.0, yPos);\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    \n    uv.x = abs(uv.x - 0.5)*3.0;\n\n    \n    float discreteX = floor(uv.x*barCount)/barCount;\n    \n    uv.y -= yOffset(abs(discreteX))*curveDepth;\n    \n    float height = texture(iChannel0, vec2(discreteX * xScale, 0.0)).x * yScale + barHeight;\n\n    \n    \n    float intensity = 1.0;\n    \n    if(barHeight - uv.y > 0.0)\n    {\n        uv.y = abs(uv.y - barHeight) + curveDepth - reflectionDepth;\n        height *= reflectionHeight;\n        intensity = pow(1.0 - uv.y, 3.0);\n    }\n    \n    fragColor = vec4(float(abs(mod(uv.x * barCount, 1.0) - 0.5) < barWidth * 0.5 && uv.y < height && uv.y > barHeight && uv.x < clipWidth)*intensity);\n    //fragColor = vec4(1.0 - uv.yyy, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}