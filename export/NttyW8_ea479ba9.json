{"ver":"0.1","info":{"id":"NttyW8","date":"1659807678","viewed":622,"name":"Sound Propagation Phased Array","username":"bitluni","description":"\"optimized\" for UHD displays. Rewind go full screen quickly otherwise there will be hypnotoad action\n\nBased on [url=https://www.shadertoy.com/view/4dK3Ww]Wave Propagation[/url]","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["water","feedback","multipass"],"hasliked":0,"parentid":"4dK3Ww","parentname":"Wave Propagation Effect 1-buffer"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 sourcePos = vec2(0.5 * iResolution.x, 0.4 * iResolution.y);\n    vec2 receiverPos = vec2(0.5 * iResolution.x, 0.41 * iResolution.y);\n    vec2 obstacle1 = vec2(0.55 * iResolution.x, 0.55 * iResolution.y);\n    vec2 obstacle2 = vec2(0.38 * iResolution.x, 0.5 * iResolution.y);\n    float tradius = 10.;\n\n    vec2 texShift = vec2(0.25, 0.15);\n    float texScale = 2.0;\n    \n    vec2 fc = fragCoord.xy / texScale + texShift * iResolution.xy;\n    \n    for(int i = 0; i < 8; i++)\n    {\n        vec2 p = receiverPos + vec2(float(i) * tradius * 2. - 7. * tradius, 0.0);\n        float d = length(p - fc.xy);\n        \n        if(d < tradius && d > tradius * 0.8)\n        {\n            fragColor = vec4(1.0, 1.0, 1.0, 0);\n            return;\n        }\n    }\n    \n    \n    if(\n    (abs(obstacle1.x - fc.x) < 60.0 && abs(obstacle1.y - fc.y) < 20.0)\n    ||(length(obstacle2 - fc.xy) < 40.0))\n    {\n        fragColor = vec4(0.5, 0.8, 0.5, 0);\n        return;\n    }\n    \n    if(length(sourcePos - fc.xy) < 10.0 && length(sourcePos - fc.xy) > 7.0)\n    {\n        fragColor = vec4(1.0, 0.0, 0.0, 0);\n        return;\n    }\n    \n    vec2 q = fc.xy/iResolution.xy;\n    float h = texture(iChannel0, q).x;\n    float sh = 1.35 - h*2.;\n    vec3 c =\n       vec3(exp(pow(sh-.75,2.)*-10.),\n            exp(pow(sh-.50,2.)*-20.),\n            exp(pow(sh-.25,2.)*-10.));\n    fragColor = vec4(c,1.);\n\n    float scale = 100.;\n    if(fragCoord.y < 8. * scale)\n    {\n        float i = floor(fragCoord.y / scale);\n        float x = fragCoord.x - iResolution.x * 0.2;\n        vec4 c = texture(iChannel0, vec2(x, i) / iResolution.xy);\n        \n        float d = (i + c.z) * scale;\n        float a = atan((c.z - 0.5) * 1.6 * 50.) * 0.5;\n        if( x >= 0. && x <= iResolution.x * 0.6 && \n            abs(fragCoord.y - (i + 0.5 + a * 0.5) * scale) < 3.)\n            fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n//            fragColor = vec4(c.z * 2., c.z * 2., 2. - c.z * 2., 1.0);\n        else\n            fragColor *= vec4(0.2, 0.2, 0.2, 1.0);\n        return;\n    }\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if(iTime < 10.)\n    {\n        fragColor = vec4(0.5, 0.5, 0.5, 0.5);\n        return;\n    }\n\n    float dist = \n        min(fragCoord.x, \n        min(fragCoord.y, \n        min(iResolution.x - fragCoord.x - 1.,\n        iResolution.y - fragCoord.y - 1.)));\n    float far = min(100., dist) * 0.01;\n    float tradius = 10.;\n       \n    float dampening = 0.999;// * min(20., min(fragCoord.x, fragCoord.y));\n    \n    vec2 sourcePos = vec2(0.5 * iResolution.x, 0.4 * iResolution.y);\n    vec2 receiverPos = vec2(0.5 * iResolution.x, 0.41 * iResolution.y);\n    vec2 obstacle1 = vec2(0.55 * iResolution.x, 0.55 * iResolution.y);\n    vec2 obstacle2 = vec2(0.38 * iResolution.x, 0.5 * iResolution.y);\n\n    vec3 e = vec3(vec2(1.) / iResolution.xy, 0.);\n    vec2 f = fragCoord.xy;\n    vec2 q = fragCoord.xy / iResolution.xy;\n    float t = (iTime - 10.) * 10.0;\n\n    if(\n    (abs(obstacle1.x - fragCoord.x) < 60.0 && abs(obstacle1.y - fragCoord.y) < 20.0)\n    ||(length(obstacle2 - fragCoord.xy) < 40.0))\n    {\n        fragColor = vec4(0.5, 0.5, 0, 0);\n        return;\n    }\n\n    vec4 c = texture(iChannel0, q);\n\n    float p11 = c.y;\n    float z = p11;\n\n    float p10 = 0.;\n    float p01 = 0.;\n    float p21 = 0.; \n    float p12 = 0.;\n\n    if(f.x > 2.)\n        p01 = texture(iChannel0, q - e.xz).x;\n    else\n        p01 = z;\n        \n    if(f.y > 2.)\n        p10 = texture(iChannel0, q - e.zy).x;\n    else\n        p10 = z;\n        \n    if(f.x < iResolution.x - 3.0)\n        p21 = texture(iChannel0, q + e.xz).x;\n    else\n        p21 = z;\n        \n    if(f.y < iResolution.y - 3.0)\n        p12 = texture(iChannel0, q + e.zy).x;\n    else\n        p12 = z;\n\n    float d = 0.0;\n    if(length(sourcePos - fragCoord.xy) < 1.0)\n    {\n        if((int(t / (3.1415926 * 2.)) & 63) < 5)\n           d = 1.0 * sin(t);\n    }\n\n    // The actual propagation:\n    d += -(p11 - .5) * 2. + (p10 + p01 + p21 + p12 - 2.);\n    d *= dampening;\n    //d *= far;//smoothstep(0., 1., far);\n    d *= float(t >= 0.2); // clear the buffer at iFrame < 2\n    d = d * 0.5 + 0.5;   \n\n    float l = 0.;\n    if(fragCoord.y < 8.)\n    {\n        if(fragCoord.x <= 0.5)\n        {\n            vec2 p = receiverPos + vec2(fragCoord.y * tradius * 2. - 7. * tradius, 0.0);\n            l = texture(iChannel0,  p / iResolution.xy).y;\n        }\n        else\n        {\n            l = texture(iChannel0, q - e.xz).z;\n        }\n    }\n    \n    fragColor = vec4(d, c.x, l, c.z);\n}","name":"Buffer A","description":"","type":"buffer"}]}