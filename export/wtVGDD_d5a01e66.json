{"ver":"0.1","info":{"id":"wtVGDD","date":"1584177158","viewed":73,"name":"circles.gif","username":"DannnYXZ","description":"attempt to recreate gif","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["circles","hex"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nint chr[12]=int[12](0xe9d72e, 0xe210c4, 0x1f0ba0f, 0xf8320f, 0x1087a31, 0x1f87c3f, 0xe8bc3e, 0x84221f, 0xe8ba2e, 0xe87a2e, 0x007c00, 0xc60000);\n\nfloat font(vec2 p, float code) { // p in [0, 1]\n    if(p.x > 1. || p.y > 1. || p.x < 0. || p.y < 0.) return 0.;\n    p = ((p - vec2(0., 1.)) * vec2(1., -1.)) * 5.;\n    float pos = floor(p.x) + 5.0 * floor(p.y);\n    return float((chr[int(code)]>>int(pos))&1);\n}\n\nfloat number(vec2 uv, float x) {\n    float a, mask = 0., d = 1.1;\n    if(x < 0.) {\n        mask += font(uv, 10.);\n        uv.x -= d;\n        x = abs(x);\n    }\n    float b = modf(x, a);\n    float la = ceil(log(a + 1.) / log(10.)), lb = 4.;\n    vec2 uva = uv - vec2((la - 1.) * d, 0.);\n    vec2 uvb = uv - vec2((la + 1.) * d, 0.);\n    mask += font(uv - vec2(la * d, 0.), 11.); // dot\n    while(la > 0.) {\n        mask += font(uva, mod(a, 10.));\n        a /= 10.;\n        uva.x += 1.1;\n        la -= 1.;\n    }\n    while(lb > 0.) {\n        b *= 10.;\n        mask += font(uvb, mod(b, 10.));\n        b = fract(b);\n        uvb.x -= 1.1;\n        lb -= 1.;\n    }\n    return mask;\n}\n\nfloat ring(vec2 uv, float r){\n    float d = length(uv);\n    float c1 = smoothstep(r, r-.01, d);\n    float c2 = smoothstep(r-.009, r-.0098, d);\n    return c1-c2;\n}\n\nvec4 hex_uv(vec2 uv){\n    float r3 = sqrt(3.);\n    vec2 p = vec2(1., r3);\n    vec2 hp = .5 * p;\n    vec2 gv0 = mod(uv, p)-hp; \n    vec2 gv1 = mod(uv - hp, vec2(1., r3))-hp;\n    vec2 gv = length(gv0) < length(gv1) ? gv0 : gv1;\n    vec2 id = uv - gv;\n    return vec4(gv, id);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5*iResolution.xy)/iResolution.y;\n    uv *= 8.;\n    float t = iTime;\n    t *= .25;\n    t = iMouse.x/iResolution.x * 4.;\n    //uv = abs(uv);\n    vec3 col = vec3(0);\n    \n    float blink = sign(sin(iTime))*.5 + .5;\n    blink = 1.;\n    vec2 id = hex_uv(uv).zw;\n    col.rg = mix(col.rg, id*.1, blink);\n    float scaler = (sin(t*2.)*.5 + 1.5);\n    float m = 0., r = .5;\n#if 0\n    float dy = sqrt(3.)*r;\n    for(float i=0.; i<7.; i++){\n        for(float j=0.; j<9.; j++){\n            float dx = mod(i, 2.) == 0. ? 0.: r;\n            vec2 c = vec2(2.*r*j + dx, i * dy);\n            c /= scaler;\n            //c/= d;\n            vec2 p = vec2(1., sqrt(3.));\n            vec2 hm = .5*p*1.5;\n            hm/=scaler;\n            float d = smoothstep(.05, .049, length(uv - hm));\n            col += d;\n            //col = vec3(d);\n            m += ring(uv - c, r);\n            m += ring(uv - vec2(-c.x, c.y), r);\n            m += ring(uv - vec2(c.x, -c.y), r);\n        }\n    }\n    col += m;\n#endif\n#if 1\n    vec2 np = uv * scaler;\n    vec2 gv = hex_uv(np).xy;\n    scaler = (sin(length(uv) + iTime)*.5 + 1.5);\n    col = vec3(scaler)*.2;\n    gv/=scaler;\n    m += ring(gv, r);\n    float hr3 = .5*sqrt(3.);\n    float dx[6] = float[6](-.5, 0.5, 1.0, 0.5, -0.5, -1.);\n    float dy[6] = float[6](hr3, hr3, 0.0, -hr3, -hr3, 0.);\n    //col += duv;\n    for(int i = 0; i < 6; i++){\n        vec2 cp = vec2(dx[i], dy[i]);\n        cp/=scaler;\n        m += ring(gv-cp, r);\n    }\n    //m = ring(gv, r);\n    col += m;\n#endif\n    //col = uv.xy;\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}