{"ver":"0.1","info":{"id":"flKyRG","date":"1661715950","viewed":98,"name":"Pulp Fiction Zoom Rotator","username":"miklesz","description":"I decided to learn the basics of GLSL and recreated the \"Zoom Rotator\" effect from my 1995 \"Pulp Fiction\" demo (by Damage).\nThe original is here:\nhttps://youtu.be/1KkOMi_seCk?t=51","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["zoom","damage","rotator","zoomrotator","pulpfiction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float mirror(in float distance) {\n    distance = distance / 2.0;\n    distance = fract(distance);\n    if (distance > 0.5) {\n        distance = 1.0 - distance;\n    }\n    distance = distance * 2.0;\n    return distance;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    float zoom = sin(iTime * 0.8 / 2.0) * 2.0 + 2.5;\n    float u = (uv.x - sin(iTime * 1.1 / 2.0)) * zoom;\n    float v = (uv.y - cos(iTime * 0.9 / 2.0)) * iResolution.y / iResolution.x * zoom;\n    float theta = iTime * 1.2 / 2.0;\n    vec2 coord = vec2(\n        u * cos(theta) - v * sin(theta) + 0.5,\n        u * sin(theta) + v * cos(theta) + 0.5\n    );\n    coord = vec2(mirror(coord.x), mirror(coord.y));\n    vec4 p = texture(iChannel0, coord);\n\n    float s = uv.x * iResolution.x / iResolution.y;\n    float t = uv.y;\n\n    float s_min = 0.5 - 0.25 * iResolution.y / iResolution.x;\n    float s_max = 0.5 + 0.25 * iResolution.y / iResolution.x;\n\n    float draw_min = 0.5 - 0.5 * iResolution.y / iResolution.x;\n    float draw_max = 0.5 + 0.5 * iResolution.y / iResolution.x;\n\n    if (uv.x > draw_min && uv.x < draw_max) {\n        if (uv.x > s_min && uv.x < s_max && t > 0.25 && t < 0.75) {\n            fragColor = dFdx(p) - dFdy(p) + 0.5;\n        }\n        else {\n            fragColor = p;\n        }\n    }\n    else {\n        fragColor = vec4(0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}