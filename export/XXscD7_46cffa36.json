{"ver":"0.1","info":{"id":"XXscD7","date":"1726258418","viewed":33,"name":"The Abyssal Eye","username":"raphgunna","description":"A fuzzy hole.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math","hallucinogenic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979323846264338327950288;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Screen position of fragment relative to centre of screen (0,0)\n    vec2 pos = fragCoord - iResolution.xy / 2.0;\n\n    // Converting position to polar coordinates\n    float r = sqrt(pow(pos.x, 2.0) + pow(pos.y, 2.0));\n    float thetaX = acos(pos.x / r); // Both radians\n    float thetaY = asin(pos.y / r); \n    \n    float diff = 100.0;\n    float radIn = 50.0;\n    float radOut = radIn + diff;\n    \n    // Output to screen based on distance from centre and angle\n    vec3 base = vec3((sin(thetaY) + 1.0)/2.0,0.0,(cos(thetaX) + 1.0)/2.0);\n    \n    if (r < radIn){\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n    else if (r < radOut){\n        float scale = (r - radIn) / diff;\n        fragColor = vec4(sin(scale * PI/2.0) * base * 1.7*cos(3.0*iTime + 4444.0*r), 1.0); \n    }\n    else\n        fragColor = vec4(base * 2.0*cos(8.0*iTime + 4444.0*r),1.0);\n}","name":"Image","description":"","type":"image"}]}