{"ver":"0.1","info":{"id":"DtscDr","date":"1690671435","viewed":99,"name":"Art of code over the moon follow","username":"XienXien","description":"Following the art of codes over the moon tutorial on youtube.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a,b,t)\n\nfloat TaperBox(vec2 p, float wb, float wt, float yb, float yt, float blur) {\n    float m = S(-blur, blur, p.y-yb);\n    m *= S(blur, -blur, p.y-yt);\n    \n    p.x = abs(p.x);\n    \n    float w = mix(wb, wt, (p.y-yb) / (yt-yb));\n    m *= S(blur, -blur, p.x-w);\n    return m;\n}\n\nvec4 Tree(vec2 uv, vec3 col, float blur) {\n    \n    float m = TaperBox(uv, .03, .03, -.05, .25, blur); // trunk\n    m += TaperBox(uv, .2, .1, .25, .5, blur); // canopy 1\n    m += TaperBox(uv, .15, .05, .5, .75, blur); // canopy 2\n    m += TaperBox(uv, .1, 0., .75, 1.0, blur); // canopy 3\n    \n    float shadow = TaperBox(uv-vec2(.2,0), .1, .5, .15, .25, blur);\n    shadow += TaperBox(uv+vec2(.25,0), .1, .5, .45, .5, blur);\n    shadow += TaperBox(uv-vec2(.25,0), .1, .5, .7, .75, blur);\n    \n    col -= shadow*.8;\n    //m = 1.;\n    return vec4(col, m);\n}\nfloat GetHeight(float x){\n    return sin(x*.423)+sin(x)*.3;\n}\n\nvec4 Layer(vec2 uv, float blur) {\n    vec4 col = vec4(0);    \n    float id = floor(uv.x);\n    float n = fract(sin(id*234.12)*5463.3)*2.-1.;\n    float x = n*.3;\n    float y = GetHeight(uv.x);\n    float ground = S(blur, -blur, uv.y+y); // ground\n    col += ground;\n    \n    y = GetHeight(id+.5+x);\n    \n    uv.x = fract(uv.x)-.5;\n    \n    vec4 tree = Tree((uv-vec2(x, -y))*vec2(1,1.+n*.2), vec3(1), blur);\n    \n    //col.rg = uv;\n    \n    col = mix(col, tree, tree.a);\n    col.a = max(ground, tree.a);\n    return col;\n}\n\nfloat Hash21(vec2 p) {\n    p = fract(p*vec2(234.45, 765.34));\n    p += dot(p, p+547.123);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5* iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy/iResolution.xy)*2.-1.;\n    float t = iTime*.3;\n    \n    float blur = .005;\n    \n    float twinkle = dot(length(sin(uv+t)), length(cos(uv*vec2(22,6.7)-t*3.)));\n    twinkle = sin(twinkle*10.)*.5+.5;\n    float stars = pow(Hash21(uv), 100.)*twinkle;\n    vec4 col = vec4(stars);\n    \n    float moon = S(.01, -.01, length(uv-vec2(.4, .2))-.15);\n    col *= 1.-moon;\n    moon *= S(-.01, .1, length(uv-vec2(.5, .25))-.15);\n    col += moon;\n    \n    vec4 layer;\n    \n    for(float i=0.; i<1.; i+=1./10.){\n        \n        float scale = mix(30., 1., i);\n        blur = mix(.05, .005, i);\n        layer = Layer(uv*scale+vec2(t+i*111., i)-M, blur);\n        layer.rgb *= (1.-i)*vec3(.9, .9, 1.); // color\n        \n        col = mix(col, layer, layer.a);\n    }\n    layer = Layer(uv+vec2(t, 1.)-M, .07);\n    \n    col = mix(col, layer*.1, layer.a);\n    \n    float thickness = 1./iResolution.y;\n   // if(abs(uv.x)<thickness) col.g = 1.;\n   // if(abs(uv.y)<thickness) col.r = 1.;\n    fragColor = col;\n}\n","name":"Image","description":"","type":"image"}]}