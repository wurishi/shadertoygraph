{"ver":"0.1","info":{"id":"XdKSWW","date":"1464387438","viewed":678,"name":"splitting things","username":"stb","description":"Just some strange, splitting, creature-like things. Hit R to reset.","likes":29,"published":1,"flags":48,"usePreview":0,"tags":["2d","particles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tx texture(iChannel0, uv)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float f = tx.a;\n\tfragColor = vec4(vec3(f), 1.);\n    fragColor.rg += .5 + .5 * cos(1.456*tx.b);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float SplitRate = 0.003; // chance a particle will split 0.0-1.0\nconst float RandDir   = 0.5; // amount of particle movement radomization 0.0-?\n\nfloat s, c;\n#define rotate(p, a) mat2(c=cos(a), s=-sin(a), -s, c) * p\n\n// hash without sine\n// https://www.shadertoy.com/view/4djSRW\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\nfloat hash12(vec2 p) {\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n#define t0(o) texture(iChannel0, fract(uv+o/res))\n#define t1(o) texture(iChannel1, fract(uv+o/res))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy;\n    vec2 uv = fragCoord / res;\n    \n    vec2 pos;\n    vec2 dir;\n    \n    vec3 o = vec3(-1., 0., 1.);\n    \n    vec2 dirs[8];\n\tdirs[0] = o.yz;\n    dirs[1] = o.zz;\n    dirs[2] = o.zy;\n    dirs[3] = o.zx;\n    dirs[4] = o.yx;\n    dirs[5] = o.xx;\n    dirs[6] = o.xy;\n    dirs[7] = o.xz;\n    \n    // first frame setup\n    if(iFrame==0 || texture(iChannel3, vec2(82.5/256., 0.)).r>0.) {\n        pos = fragCoord;\n        if(floor(fragCoord)==floor(res/2.))\n            dir = o.yz;\n        else\n            dir = o.yy;\n    }\n    // all other frames\n    else {\n        pos = t0(o.yy).rg;\n        dir = t0(o.yy).ba;\n        \n        // update this position\n        pos = mod(pos+dir, res);\n        \n        // zero out this cell's direction if a particle leaves it\n        if(floor(fragCoord)!=floor(pos))\n            dir = o.yy;\n        \n        float ct = 0.;\n        vec2 pAdd = o.yy, dAdd = o.yy;\n        \n        // if current cell had a non-zero direction length, and if BufB.a is <1.\n        if(length(dir)==0. && t1(o.yy).a<1.)\n            for(int i=0; i<8; i++) {\n                vec2 posI = t0(dirs[i]).rg;\n                vec2 dirI = t0(dirs[i]).ba;\n                \n                // if a particle is incoming, or if current particle is splitting\n                if(floor(fragCoord)==floor(mod(posI+dirI, res)) || SplitRate>hash12(-uv+mod(iTime/100., 100.))) {\n                    // add any neighboring particle positions and directions\n                    pAdd += mod(posI+dirI, res);\n                \tdAdd += rotate(dirI, RandDir*(.5-hash12(uv+mod(iTime/100., 100.))));\n                    ct++;\n                }\n            }\n        \n        // for averaging all incoming neighbors\n        if(ct>0.) {\n            pos = pAdd / ct;\n            dir = dAdd / ct;\n        }\n        \n        // to keep things from griding to a halt\n        if(length(dir)>0.)\n            dir = normalize(dir);\n    }\n    \n    fragColor = vec4(pos, dir);\n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"const float Radius   = 8.0; // radius of the things\nconst float FadeRate = 0.125; // rate of fading, affects length\n\n#define t0(o) texture(iChannel0, fract(uv+o/res))\n#define t1(o) texture(iChannel1, fract(uv+o/res))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 res = iResolution.xy;\n    vec2 fc = fragCoord;\n    vec2 uv = fc / res;\n    \n    vec3 o = vec3(-1., 0., 1.);\n    \n    vec2 dirs[8];\n\tdirs[0] = o.yz;\n    dirs[1] = o.zy;\n    dirs[2] = o.yx;\n    dirs[3] = o.xy;\n    dirs[4] = o.zz;\n    dirs[5] = o.zx;\n    dirs[6] = o.xx;\n    dirs[7] = o.xz;\n    \n    vec2 pos = t1(o.yy).rg;\n    float rad = t1(o.yy).b;\n    float f = t1(o.yy).a;\n    \n    if(length(t0(o.yy).ba)>0.) {\n        pos = fc;\n        rad = Radius;\n        f = 1.;\n    }\n    \n    for(int i=0; i<4; i++) {\n        vec2 posI = t1(dirs[i]).rg;\n        float radI = t1(dirs[i]).b;\n        if(length(fc-posI)/radI < length(fc-pos)/rad) {\n            pos = posI;\n            rad = radI;\n        }\n    }\n    \n    rad = max(0., rad-FadeRate);\n    \n    if(rad<1.)\n        pos = vec2(-10000.);\n    \n    f = 1. - length(fc-pos) / rad;\n    \n    if(iFrame==0) {\n        pos = vec2(-10000.);\n        rad = Radius;\n        f = 0.;\n    }\n    \n    fragColor = vec4(pos, rad, f);\n}","name":"Buf B","description":"","type":"buffer"}]}