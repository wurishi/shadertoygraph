{"ver":"0.1","info":{"id":"mtscRH","date":"1690522024","viewed":17,"name":"branch-free Rounded Box","username":"ecloud","description":"Fork of https://www.shadertoy.com/view/fsdyzB but branch-free, without shadow, and some accuracy tweaks.  The border is painted completely inside the rectangle bounds, and does not overlap with the painting of the fill (so alpha looks ok).","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","square","ui","rect","rounded","border"],"hasliked":0,"parentid":"fsdyzB","parentname":"Rounded rect + border & shadow"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on shaders from @inobelar @amine_sebastian and @iq and a previous experiment of mine:\n//   - https://www.shadertoy.com/view/fsdyzB\n//   - https://www.shadertoy.com/view/WtdSDs\n//   - https://www.shadertoy.com/view/tltXDl\n//   - https://www.shadertoy.com/view/4llXD7\n\n// Returns a number corresponding to quadrant (but different than mathematical quadrant),\n// assuming p is in the usual -1..1 coordinate system.\n// p.x and p.y both positive: 0\n// p.x negative: 1\n// p.y negative: 2\n// p.x and p.y negative: 3\nint pseudoQuadrant(in vec2 p)\n{\n    return int(floor(step(0., p.x) + 2. * step(0., -p.y)));\n}\n\n// Signed distance to a 2D rounded box - look ma, no branches.\n// b.x = width\n// b.y = height\n// r.x = roundness top-left\n// r.y = roundness top-right  \n// r.z = roundness bottom-left\n// r.w = roundness bottom-right\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    float cr = r[pseudoQuadrant(p)];\n    vec2 q = abs(p)- b + cr;\n    return min(max(q.x, q.y),0.0) + length(max(q, 0.0)) - cr;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // =========================================================================\n    // Inputs (vertex attributes IRL)\n\n    vec2  u_rectSize   = vec2(300.0, 240.0);     // The pixel-space size of the rectangle.\n    vec2  u_rectCenter = vec2(160.5, 410.5); // The pixel-space rectangle center location\n    \n    float u_edgeSoftness   = 1.0; // How soft the edges should be (in pixels). Higher values could be used to simulate a drop shadow.\n    vec4  u_cornerRadii = vec4(10.0, 20.0, 40.0, 120.0); // The radii of the corners(in pixels): [topLeft, topRight, bottomLeft, bottomRight]\n    \n    // Border\n    float u_borderThickness = 8.0; // The border size (in pixels) \n    float u_borderSoftness  = 2.0; // How soft the border should be (in pixels)\n    \n    // Colors\n    vec4  u_colorBg     = vec4(0.93, 0.93, 0.93, 0.0); // background\n    vec4  u_colorRect   = vec4(0.7,  0.7, 0.9, 0.5); // fill\n    vec4  u_colorBorder = vec4(0.5,  0.1, 0.1, 0.5); // stroke\n    \n    // =========================================================================\n\n    vec4 r = vec4((sin(iTime) * 0.5 + 0.5)) * u_cornerRadii; // Animated corner radii\n    \n    // -------------------------------------------------------------------------\n    \n    // Fill SDF\n    float distance = sdRoundBox(fragCoord.xy - u_rectCenter, (u_rectSize / 2.0), r) + u_borderThickness;\n    \n    // AA\n    float smoothedAlpha = 1.0-smoothstep(0.0, u_edgeSoftness, distance);\n    \n    // -------------------------------------------------------------------------\n    // Border: expanded from fill SDF, with AA\n    float borderAlpha   = 1.0-smoothstep(u_borderThickness - u_borderSoftness, u_borderThickness, abs(distance - u_borderThickness));\n    \n    // -------------------------------------------------------------------------\n    // Apply colors layer-by-layer: background <- rect <- border.\n    \n    // Blend background with fill\n    vec4 res_shadow_with_rect_color = \n        mix(\n            u_colorBg,\n            u_colorRect,\n            min(u_colorRect.a, smoothedAlpha)\n        );\n        \n    // Blend (background+fill) with border\n    vec4 res_shadow_with_rect_with_border =\n        mix(\n            res_shadow_with_rect_color,\n            u_colorBorder,\n            min(u_colorBorder.a, borderAlpha)\n        );\n    \n    // -------------------------------------------------------------------------\n     \n    fragColor = res_shadow_with_rect_with_border;\n}","name":"Image","description":"","type":"image"}]}