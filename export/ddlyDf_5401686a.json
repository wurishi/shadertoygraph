{"ver":"0.1","info":{"id":"ddlyDf","date":"1687290937","viewed":49,"name":"Smoldering UA flag","username":"Jester0k","description":"Smoldering UA flag","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// smolder borrow from https://www.shadertoy.com/view/sscSW2\n// todo: try make own smolder\n\n#define pi 6.28318530718\n#define smolder_brightness 0.2\n\nconst float scale = 0.7f;\nconst float intensivity = 0.05f;\nconst int iteration = 3;\nconst float speed = 85.0; // range 1 to 100\n\nconst mat2 m = mat2( 1.4,  1.2, -1.2,  1.6 );\n\nvec2 smolder_hash( vec2 p ) {\n\tp = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat smolder_noise( in vec2 p ) {\n    const float K1 = 0.366025404; \n    const float K2 = 0.211324865; ;\n\tvec2 i = floor(p + (p.x+p.y)*K1);\t\n    vec2 a = p - i + (i.x+i.y)*K2;\n    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); \n    vec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3 n = h*h*h*h*vec3( dot(a,smolder_hash(i+0.0)), dot(b,smolder_hash(i+o)), dot(c,smolder_hash(i+1.0)));\n    return dot(n, vec3(70.0));\t\n}\n\nfloat smolder_fbm(vec2 n) {\n\tfloat total = 0.0, amplitude = 0.1;\n\tfor (int i = 0; i < 7; i++) {\n\t\ttotal += smolder_noise(n) * amplitude;\n\t\tn = m * n;\n\t\tamplitude *= 0.4;\n\t}\n\treturn total;\n}\n\n\nfloat smolder( in vec2 uv )\n{\n    float time = iTime*0.03f;\n    float q = smolder_fbm(uv  * 0.5);\n\n\tuv *= scale;\n    \n    float f = 0.0;\n    float weight = 0.7;\n    for (int i=0; i<iteration; i++){\n\t\tf += weight*smolder_noise( uv );\n        uv = m*uv + time;\n\t\tweight *= 0.6;\n    }\n    \n    f = fract(f+iTime/(101.-speed));\n    \n    float coeff = intensivity/abs(.5 - f);\n        \n    return coeff;\n}\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    vec3 col, col1, col2, smolder_col;\n    vec3 col1_1 = vec3(0, 91./255., 187./255.);\n    vec3 col1_2 = vec3(1., 213./255., 0.);\n    \n    vec3 col2_1 = vec3(216./255., 21./255., 15./255.);\n    vec3 col2_2 = vec3(0., 0., 0.);\n    \n    float fWave = sin(uv.x*4. + iTime);\n    float fEdge = fWave*0.05;\n    float fSide = smoothstep(0., 0.05, uv.y - fEdge);\n    col1 = fSide*col1_1 + (1.-fSide)*col1_2;\n    col2 = fSide*col2_1 + (1.-fSide)*col2_2;\n    \n    float flipper = cos(pi*iTime/20.);\n    float selected = smoothstep(-0.3, 0.5, flipper);\n    col = selected*col1 + (1.-selected)*col2;\n    \n    col *= 0.7+0.18*fWave;\n    \n    float smolder_coeff = smolder(uv);\n    smolder_col = min(vec3(.9,.2,.1) * smolder_coeff, vec3(1.0, 1.0, 1.0));\n    float smolder_val = min(smolder_coeff, 1.)*smolder_brightness;\n    \n    col = smolder_val*smolder_col + (1.-smolder_val)*col;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}