{"ver":"0.1","info":{"id":"MclBWj","date":"1724501522","viewed":69,"name":"Visual Acuity - test","username":"GuyShito","description":"Eye function.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["blur","eye","visual"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float frame(float height,float uv) {\n    return step(height,uv);\n}\n\nvec4 circle(vec2 fragCoord) {\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float weight = .005;\n    float radius = .25;\n    vec2 pos = vec2(.0,-.7);\n    return vec4(1.0) - vec4(smoothstep(\n    weight,\n    weight,\n    abs(distance(uv, pos)-radius)\n    ));\n}\n\nvec4 cornea(vec2 fragCoord) {\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\n    float weight = .005;\n    float radius = .25;\n    vec2 pos = vec2(-.05,-.88);\n    return vec4(1.0) - vec4(smoothstep(\n    weight,\n    weight,\n    abs(distance(uv/vec2(1.0,0.8), pos)-radius)\n    ));\n}\n\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.04, pct, st.y) -\n          smoothstep( pct, pct+0.04, st.y);\n}\nfloat flip(float uv) {\n    return 1.-uv;\n}\n\nvec4 line_lens(vec2 fragCoord) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = 4.*fragCoord/iResolution.xy + vec2(-1.85,-0.38);\n    st.y *= 2.5;\n    vec2 stf = vec2(st.x,flip(st.y));\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    float y = min(1.0,1.-st.x*(1.5-mouse.x*0.7));\n    vec3 color = vec3(y);\n    float pct = plot(st,y);\n    float pct2 = plot(stf,y);\n    color = pct*vec3(0.8) + pct2*vec3(0.8);\n    return vec4(color,1.0)*step(uv.x,0.63)*step(0.3,uv.x);\n}\n\nvec4 lens(vec2 fragCoord,vec2 offset,float power) {\n    vec2 uv = ((2. * fragCoord - iResolution.xy) / iResolution.y)+vec2(.0,.01)+offset;\n    float weight = .008;\n    float radius = .25;\n    return vec4(1.0) - vec4(smoothstep(\n    weight,\n    weight,\n    abs(distance(uv/vec2(0.3 + (power * 0.1),0.6), vec2(0.0))-radius)\n    ));\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 background = texture(iChannel0,uv);\n    \n    vec4 col = background * vec4(frame(0.3,uv.y))\n    + circle(fragCoord)\n    + cornea(fragCoord)*step(uv.x,0.45)\n    + line_lens(fragCoord)\n    + lens(fragCoord,vec2(.07,.7),1.-mouse.x)*step(uv.x,0.47)\n    + lens(fragCoord,vec2(.14,.7),1.-mouse.x)*step(0.47,uv.x)\n    ;\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float thresh = 0.33;\n\n\nfloat Gaussian(float sigma, float x)\n{\n    return exp(-(x*x) / (2.0 * sigma*sigma));\n}\n\nvec4 blur(sampler2D img, vec2 size, vec2 coord,float power) {\n    vec2 uv = vec2(coord.x / size.x,coord.y / size.y);\n    float sigma = clamp(power*5.0,0.5,5.0);\n    int samples = 15;\n    float pixelSize = (1.0 / 512.0);\n    float total = 0.0;\n    vec3 ret = vec3(0);\n    for (int iy = 0; iy < samples; ++iy)\n    {\n        float fy = Gaussian(sigma, float(iy) - float(samples/2));\n        float offsety = float(iy-samples/2) * pixelSize;\n        for (int ix = 0; ix < samples; ++ix)\n        {\n            float fx = Gaussian(sigma, float(ix) - float(samples/2));\n            float offsetx = float(ix-samples/2) * pixelSize;\n            total += fx * fy;            \n            ret += texture(img, uv + vec2(offsetx, offsety)).rgb * fx*fy;\n        }\n    }\n    return vec4(ret / total,1.0);\n}\n\nvec4 getDetect(sampler2D img, vec2 size, vec2 coord) {\n    return texture(img,vec2(coord.x / size.x,coord.y / size.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 mouse = iMouse.xy/iResolution.xy;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 green = normalize(vec4(13, 163, 38, 255));\n\tvec4 detect = getDetect(iChannel0, iResolution.xy, fragCoord.xy);\n    \n    if (distance(green, detect) < thresh)\n    {\n        vec4 background = blur(iChannel1, iResolution.xy, fragCoord.xy,.5-mouse.x);\n        fragColor = background;\n    }\n    else\n    {\n    \tfragColor = blur(iChannel0, iResolution.xy, fragCoord.xy,-.5+mouse.x);   \n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}