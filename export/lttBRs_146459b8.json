{"ver":"0.1","info":{"id":"lttBRs","date":"1540764453","viewed":247,"name":"RGB Noise dithering","username":"scratch13764","description":"Change iChannel0 to buffer A to see what it would look like on a simple computer generated pattern.\nI'll work on shortening it I know it's unnecessarily long.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["noise","dither","overcomplication"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COLORS 6.\n//How many different values of each color are allowed\n//Leave as a natural number\n\nconst vec3 COLORS_DIST = vec3(1./COLORS); // How far apart the allowed colors will be\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;//No need to scale the values for this shader\n\n    vec3 C = vec3(texture(iChannel0, uv)); //Gets image to dither\n    \n    \n    vec3 NOISE = vec3(\n        fract(sin((iTime*26.34663) + (uv.x*1745.245654) + (uv.y*1.245543))*1434589.),\n        fract(sin((iTime*56.34645) + (uv.x*42865.245254) + (uv.y*8.309723))*1439058.),\n        fract(sin((iTime*108.34682) + (uv.x*6234.256757) + (uv.y*3.247553))*1283758.)\n        \n    );\n    // Generates ~ RGB Noise~ values\n    // The weird numbers above are keyboard mashes that I changed until I got a nice pattern\n    \n    // Returns a number 0-1 that shows how close a value is to the nearest allowed color\n    \n    vec3 FRACT_VALUE = vec3(1.-(ceil(C/COLORS_DIST)*COLORS_DIST -\n                                 C\n                                ) / \n                                COLORS_DIST\n                                 \n                           );\n    /////////PLEASE DON'T GET TRIGGERED I DON'T KNOW HOW TO DO THIS WITH A LOOP,\n    /////////SO INSTEAD OF GETTING MAD JUST HELP ME OUT!!\n    //R\n    if (FRACT_VALUE.x < NOISE.x)\n    {\n        C.x = float(floor(C.x/COLORS_DIST)*COLORS_DIST);\n    }\n    else\n    {\n        C.x = float(ceil(C.x/COLORS_DIST)*COLORS_DIST);\n    }\n    //G\n    if (FRACT_VALUE.y < NOISE.y)\n    {\n        C.y = float(floor(C.y/COLORS_DIST)*COLORS_DIST);\n    }\n    else\n    {\n        C.y = float(ceil(C.y/COLORS_DIST)*COLORS_DIST);\n    }\n    // B\n    if (FRACT_VALUE.z < NOISE.z)\n    {\n        C.z = float(floor(C.z/COLORS_DIST)*COLORS_DIST);\n    }\n    else\n    {\n        C.z = float(ceil(C.z/COLORS_DIST)*COLORS_DIST);\n    }\n    \n    // Output to screen\n    fragColor = vec4(C,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//The version of my project \"Mixing color circles\" that was golfed by FabriceNeyret2\n\n#define mainImage(O,U)                \\\n    vec2  R = iResolution.xy;         \\\n    float t = iTime;                  \\\n    for (float i=0.; i<3.; i++)       \\\n        O[int(i)] = smoothstep(.3,.195-.1*sin(t*.3), \\\n                               length (sin( i*6.28/3. + t/3. +vec2(0,33) ) * sin(t*1.3) * .4 - ( U - .5*R ) / R.y) )","name":"Buffer A","description":"","type":"buffer"}]}