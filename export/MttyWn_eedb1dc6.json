{"ver":"0.1","info":{"id":"MttyWn","date":"1532276431","viewed":170,"name":"halton2 + voronoi (buffer)","username":"valyagolev","description":"halton2 (buffer) ","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["haltonbuffer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool closeToAnyPoint(vec2 uv) {\n    for (int i = 0; i < POINTS; i++) {\n        vec2 pt = texelFetch(iChannel0, ivec2(i, 0), 0).xy;\n        \n        if (distance(uv, pt) < 0.002) {\n            return true;\n        }\n    }\n    \n    return false;\n}\n\nint closeToWhichPoint(vec2 fragCoord) {\n   // for (int i = 0; i < POINTS; i++) {\n   return int(texelFetch(iChannel1, ivec2(fragCoord), 0).x);\n        \n   //     if (distance(uv, pt) < 0.002) {\n   //         return true;\n   //     }\n    //}\n    \n   // return false;\n}\n\nvec4 colorForPoint(int id) {\n    return texelFetch(iChannel0, ivec2(id, 1), 0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float size = max(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord/size;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    if (closeToAnyPoint(uv)) {\n        fragColor = vec4(0.0,1.0,1.0,1.0);\n    } else {\n        fragColor = colorForPoint(closeToWhichPoint(fragCoord));\n    }\n    \n  \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nfloat haltonSeq(int b, int i) {\n\tfloat r = 0.0;\n    float f = 1.0;\n    while (i > 0) {\n        f = f / float(b);\n        r = r + f * float(i % b);\n        i = int(floor(float(i) / float(b)));\n    }\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (int(fragCoord.y) == 0) {\n        if (int(fragCoord.x) < POINTS) {\n        \tfragColor = vec4(\n            \thaltonSeq(2, int(fragCoord.x) * 409),\n                haltonSeq(3, int(fragCoord.x) + 19),\n               \t0.0,\n              \t0.0);\n           \treturn;\n        }\n    }\n    if (int(fragCoord.y) == 1) {\n        if (int(fragCoord.x) < POINTS) {\n        \tfragColor = vec4(\n            \thaltonSeq(5, int(fragCoord.x) * 409),\n                haltonSeq(7, int(fragCoord.x) * 409),\n               \thaltonSeq(11, int(fragCoord.x) * 409),\n              \t1.0);\n           \treturn;\n        }\n    }\n    \n    fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        \n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define POINTS 600\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"int closeToWhichPoint(vec2 uv) {\n    int cur = -1;\n    float cur_dst = 400.0;\n    \n    for (int i = 0; i < POINTS; i++) {\n        vec2 pt = texelFetch(iChannel0, ivec2(i, 0), 0).xy;\n        float dst = distance(uv, pt);\n        if (dst < cur_dst) {\n            cur_dst = dst;\n            cur = i;\n        }\n    }\n    \n    return cur;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    float size = max(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord/size;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    //fragColor = vec4(col,1.0);\n    \n    fragColor = vec4(closeToWhichPoint(uv), 0, 0, 0);\n}","name":"Buf B","description":"","type":"buffer"}]}