{"ver":"0.1","info":{"id":"NdGSR3","date":"1634965165","viewed":95,"name":"Fork spirograph pwf 085","username":"pwf","description":"https://www.shadertoy.com/view/7l2GWy\n+\nhttps://www.shadertoy.com/view/7dKXzV\n\ninspired by https://www.youtube.com/watch?v=n-e9C8g5x68","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["ball","physics","particle"],"hasliked":0,"parentid":"sdVXzV","parentname":"spirograph rosette particles"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 getParticlePos(int num) {\n    return texelFetch(iChannel0, ivec2(mod(float(num*2), iResolution.x), num*2 / int(iResolution.x)), 0).xy;\n}\n\nfloat drawBalls (int count, vec2 fragCoord) {\n    for (int i = 0; i < count; i++) {\n        float dist = distance(fragCoord-iResolution.xy/2., getParticlePos(i));\n        i += int(dist/100.);\n        if (dist <= 2.) {\n            return 1./dist;\n        }\n    }\n    return 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy);\n    \n    // Time varying pixel color\n    vec3 col = vec3(uv, 1.);\n\n    \n    // Output to screen\n    fragColor += vec4(col * drawBalls(10000, fragCoord), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Radius of the first circle, scales the whole image.\nfloat R = 13.;\n// Ratio of the radius of the first circle to the second\nfloat k = 1.;\n// Ratio of the radius of the first circle to the third\nfloat k2 = 2.01;\n// Distance to the drawing point\nfloat h = 1.;\n// Ratio of the paths\nfloat p = 0.5;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n\n    k = sin((iTime+200.)/30.)+2.;\n    h = sin((iTime+100.)/50.)*2.;\n    p = cos((iTime+100.)/100.)*2.;\n    \n    float R = iResolution.x/R;\n    float r = R/k;\n    float r2 = R/k2;\n    \n    vec2 outputVec;\n    vec2 uv = (fragCoord/iResolution.xy - .5) * 2.;\n    \n    int id = int(fragCoord.x) + int(iResolution.x) * int(fragCoord.y);\n    if (id > 10000) {\n        return;\n    }\n\n    int particleNum = id;\n    \n    float t = float(id)*.01;\n    \n    float Rt = R*t;\n    float tRtrRtpr = t + Rt/r - Rt/(p*r);\n    float Rr = R+r;\n    float rr2 = r + r2;\n    float tRtrRtprRtpr2 = tRtrRtpr - Rt/(p*r2);\n    \n    outputVec = vec2(\n        Rr * cos(t) \n            + rr2 * cos(tRtrRtpr)\n            + h * cos(tRtrRtprRtpr2),\n        Rr * sin(t)\n            + rr2 * sin(tRtrRtpr)\n            + h * sin(tRtrRtprRtpr2)\n    );\n\n    fragColor = vec4(outputVec, 0., 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}