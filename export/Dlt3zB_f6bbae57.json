{"ver":"0.1","info":{"id":"Dlt3zB","date":"1682671224","viewed":29,"name":"Julia AA + Smooth","username":"shastro","description":"working on making good AA and using good coloration.\n\nCould use some optimization","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Iterate that over and over 2\n// Z^2 + C\nconst int max_iterations = 1000;\nconst float B = 256.0;\nconst int aa=2;\n\nvec2 pow2C(vec2 z)\n{\n    float real = z.x*z.x - z.y*z.y;\n    float img = 2.*z.x*z.y;\n    return vec2(real, img);\n}\n\nfloat computeMandel(vec2 C)\n{\n    vec2 Z = C;\n    int i = 0;\n    bool did_escape = false;\n    float n = 0.0; // Smooth iterations\n    for (i = 0; i<max_iterations; i++){\n        Z = pow2C(Z) + vec2((iMouse.x/iResolution.x - 0.5)*4.0,(iMouse.y/iResolution.y - 0.5)*4.0);\n        if (dot(Z,Z) >(B*B)) {\n            did_escape = true;\n            break;\n        }\n        n += 1.0;\n    }\n    \n    float sn = n - log2(log2(dot(Z,Z))) + 4.0;\n    return sn;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy);\n    // Move to center\n    uv -= vec2(0.5,0.5);\n    // Correct for aspect ratio\n    float aspectRatio = iResolution.y/iResolution.x;\n    uv.y = uv.y*aspectRatio;\n    // Zoom\n    float zoom = 4.0;\n    uv *= zoom;\n    \n    // Width of pixels\n    float wx = (1.0/(iResolution.x))/zoom;\n    float wy = (1.0/(aspectRatio*iResolution.y))/zoom;\n    vec3 col = vec3(0.5,0.5,0.5);\n    // Antialiasing\n    //int aa = int(5.*(0.5+0.5*cos(iTime)))+1;\n    for (int xx=0; xx<=aa; xx++){\n        for (int yy=0; yy<=aa; yy++) {\n            // Get subpixel offsets\n            vec2 of = vec2(xx, yy)/float(aa);\n            float sx = (wx*(of[0] - 0.5));\n            float sy = (wy*(of[1] - 0.5));\n            float l = computeMandel(uv+vec2(sx,sy));\n            col += 0.5 + 0.5*cos(1.5+l*0.09 + vec3(1.0,0.4,0.1));\n        }\n    }\n\n    // Time varying pixel color\n    \n    \n    col /= float(aa+1)*float(aa+1);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}