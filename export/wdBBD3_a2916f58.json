{"ver":"0.1","info":{"id":"wdBBD3","date":"1592506895","viewed":121,"name":"Minimalistic lines.","username":"Pr0fed","description":"Playing with math recently. Couldn't resist to make it more than equation visualization.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat CircleEquation(vec2 p, vec2 c, float r, float x)\n{\n    return length(p - c) + (x / p.x * p.y) - r;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy ) / iResolution.y;\n\n    vec3 col = vec3(0.0);\n    float lineThickness = 0.01;\n    \n    float result;\n    \n    col = vec3(0.301, 0.774, 0.801) + (vec3(0.2) * (uv.y + 0.3));\n    col = pow(col, vec3(2.2));\n    \n    \n    for(int i = 1; i <= 13; i++)\n    {\n        float x = float(i);\n        result = CircleEquation(uv, vec2(0.0, 0.0), 0.25, 0.09 * x);\n        float pixelSize = fwidth(result) * 0.5;\n        \n        if( i != 3)\n        {\n            float mask = smoothstep(lineThickness + pixelSize, lineThickness - pixelSize, abs(result));\n            col = mix(col, vec3(1.0) - (1.0 - vec3(0.274, 0.657, 0.743)) * (x / 13.0), mask);\n        }\n        \n        else\n        {\n            float mask = smoothstep(lineThickness + pixelSize, lineThickness - pixelSize, abs(result));\n            col = mix(col, vec3(1.0) - (1.0 - vec3(0.901, 0.374, 0.388)) , mask);\n        }\n    }\n    \n    \n  \n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}