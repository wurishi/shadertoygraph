{"ver":"0.1","info":{"id":"7dsBWN","date":"1644900165","viewed":66,"name":"Beh_Gin's learning","username":"Beh_gin","description":"A little pink smiley made from circle cuttings.\nAdded functionality to make bands and rectangles and smileys with functions","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float circle(vec2 uv, vec2 p, float radius, float blur){\n    float d = length(uv-p);\n    float t1 = radius;\n    float t2 = radius-blur;\n    \n    //smoothstep traverses 0 to 1 or 1 to 0\n    //t1 is < t2\n    //while d < t1 return 1\n    //while d > t2 return 0\n    //while d > t1 & < t2 return between 1 and 0\n    return smoothstep(t1, t2, d);\n    //(d < 0.3) ? 1. : 0.;\n}\n\nfloat band(float t, float start, float end, float blur){\n    float step1 = smoothstep(start-blur, start+blur, t);\n    float step2 = smoothstep(end+blur, end-blur, t);\n    return step2*step1;\n}\n\nfloat rect(vec2 uv, float left, float right, float botm, float top, float blur){\n    float band1 = band(uv.x, left, right, blur);\n    float band2 = band(uv.y, top, botm, blur);\n    return band1*band2;\n}\n\nfloat rectp(vec2 uv, vec2 p, float width, float height, float blur){\n    uv -= p;\n    //uv *= 2.;\n    //blur *= 2.;\n    float band1 = band(uv.x, p.x-width/2., p.x+width/2., blur);\n    float band2 = band(uv.y, p.y-height/2., p.y+height/2., blur);\n    return band1*band2;\n}\n\nfloat smiley(vec2 uv, vec2 p, float size){\n    uv -= p;\n    uv /= size;\n    float mask = circle(uv, vec2(.0), .4, .03);\n    //eyes\n    mask -= circle(uv, vec2(.15, .1), 0.1, .1);\n    mask -= circle(uv, vec2(-.15, .1), 0.1, .1);\n    //extra\n    mask += circle(uv, vec2(-.7, .3), 0.2, .2);\n    \n    //mouth\n    float mouth = circle(uv, vec2(0), 0.3, 0.05);\n    mouth -= circle(uv, vec2(0, 0.2), 0.4, 0.02);\n    mouth = clamp(mouth, 0., 1.);\n    mask -= mouth;\n    \n    return mask;\n}\n\nfloat remap01(float a, float b, float t){\n    return clamp((t-a)/(b-a), 0., 1.);\n}\nfloat remap(float a, float b, float c, float d, float v){\n    return remap01(a, b, v) * (d-c) + c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy/iResolution.xy; //uv range R2[0., 1.]\n    float t = iTime;\n    uv -= 0.5; // -0.5 to 0.5\n    uv.x *= iResolution.x/iResolution.y;\n    \n    \n    \n    vec3 col = vec3(0.);\n    //face\n    float mask = 0.;\n    float x = uv.x;\n    float m = sin(x*8.+t)*.1;\n    float y = uv.y-m;\n    float blur = remap(.5,-.5,.04,.25,x);\n    blur = pow(blur*4., 2.5);\n    //x += y*0.5;\n    mask = rect(vec2(x,y),-.5, .5, 0.1, -0.1, blur);\n    \n    col = vec3(1., 0., 1.)*mask;\n    // Output to screen\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}