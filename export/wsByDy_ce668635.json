{"ver":"0.1","info":{"id":"wsByDy","date":"1587253702","viewed":113,"name":"Rainbubbles","username":"tr0sle","description":"first try on shader coding","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["color","radial","bubbles","rainbow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec3 p)\n{\n    vec3 q = fract(p) * 2.0 - 1.0;\n    return length(q) - 0.1;\n    \n    \n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.5;\n    for (int i = 1; i < 10; ++i)\n    {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t +=d * 1.0;\n           \n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\tuv = uv *2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n\t\n   \n        \n\tvec3 r = normalize(vec3(uv, 1.0));\n    \n    float the = iTime * 0.5; //Time defined\n    \n    r.xz *= mat2(-cos(the), sin(the), -sin(the), -cos(the)); //Camera Rotation\n    \n    vec3 o = vec3(0, iTime, -iTime);\n    float t = trace(o, r);\n    \n    \n    \n    float fog = 2.0 / (2.0 + t*t*0.10);\n    vec3 fc = vec3(fog);\n\t\n      vec3 col = fc + fc*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    fragColor = vec4(col, 1.0);\n\n}\n\n","name":"Image","description":"","type":"image"}]}