{"ver":"0.1","info":{"id":"3sj3RR","date":"1547978251","viewed":222,"name":"ps2 dots","username":"theepicsnail","description":"https://youtu.be/5WWSytydO-Q?t=21","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["ps2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 inColor = texture(iChannel0, fragCoord / iResolution.xy).rgb;\n    \n    //inColor = pow(inColor, vec3(1.1, 1.2, 1.0));\n    \n    // gamma correct\n    //inColor = pow(inColor, vec3(1. / 2.2));\n    \n    fragColor = vec4(inColor, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.1416\n#define MAX_DIST 10.0\n#define EPS 0.0001\n#define ITR 100.0\nvec2 delta = vec2(.01,0);\nvec3 lastCell = vec3(0);\n\nvec2 rotate(vec2 v, float angle) {return cos(angle)*v+sin(angle)*vec2(v.y,-v.x);}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 rand2(vec2 co){\n    return fract(sin(vec2(dot(co.xy ,vec2(12.9898,78.233)),dot(co.yx,vec2(13.1898,73.231)))) * 43758.5453);\n}\n\nfloat rand3(vec3 co){\n    return fract(sin(dot(co.xyz ,vec3(12.9898,78.233, 49.566))) * 43758.5453);\n}\n\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\n// polynomial smooth min (k = 0.1);\nfloat smin( float a, float b, float k )\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*k*(1.0/4.0);\n}\n\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat SDF(vec3 ro, vec3 rd) {\n    float dist = 1000.0;\n    float a = 3.14159/7.0*2.0;\n    for(float i = 0.0 ; i < 7.0 ; i++) {\n        \n        //float phase = (-iTime*.1+1.0) * i + i + 2.0;\n        float phase = i*(a+0.7+0.7*sin(iTime*.1))+a*2.0;\n        float p1 = 0.0;\n        vec3 pos = vec3(\n            cos(p1)*cos(phase),\n            cos(p1)*sin(phase),\n            sin(p1)\n            )*.3;\n        \n        dist = min(dist, length(ro-pos)-.02);\n    }\n    return dist;\n}\n\n\nvec3 EstNormal(vec3 ro, vec3 rd) {\n    float cx = SDF(ro+delta.xyy, rd)-SDF(ro-delta.xyy, rd);\n    float cy = SDF(ro+delta.yxy, rd)-SDF(ro-delta.yxy, rd);\n    float cz = SDF(ro+delta.yyx, rd)-SDF(ro-delta.yyx, rd);\n    return normalize(vec3(cx,cy,cz));\n}\n\nvec3 scene(vec3 ro, vec3 rd, vec2 uv) {\n    vec3 p = ro;\n    float t;\n    float d;\n    float i = 0.0;\n    float c = 1.0;\n    vec3 pos;\n    for(; i < ITR ; i++) {\n    \tt += d = SDF(pos=ro+rd*t,rd);\n        c = smin(d,c, .015);\n        if(t > MAX_DIST || d < EPS) break;\n    }\n   \t//vec3 normal = EstNormal(pos, rd);\n    //return vec3(dot(normal, -rd));\n    if(d<EPS) return vec3(1);\n    return vec3(.4,.6,1.0)*pow(1.0-c,30.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat tim=iTime;\n\tvec2 uv=fragCoord.xy/iResolution.xy;\n\t\n\t//vec3 ro = vec3(0,0,-2);\n\t//vec3 rd=normalize(vec3((fragCoord.xy-0.5*iResolution.xy)/iResolution.y,1.0));\n    \n\tvec3 ro=vec3(cos(tim),cos(tim*0.3)*0.5,cos(tim*0.7))*min(0.5+tim*0.1+cos(tim*0.4)*0.5,1.5);\n    vec3 rd=lookat(-ro)*normalize(vec3((fragCoord.xy-0.5*iResolution.xy)/iResolution.y,1.0));\n    \n    \n\tvec3 color=scene(ro,rd,fragCoord.xy);\n\tcolor=clamp(color,0.0,min(tim,1.0));\n\tfragColor.rgb = mix(color, texture(iChannel0, fragCoord / iResolution.xy).rgb, .75);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}