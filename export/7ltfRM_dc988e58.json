{"ver":"0.1","info":{"id":"7ltfRM","date":"1665751403","viewed":141,"name":"Rhombille Tiling SDF","username":"TheTurk","description":"Distance function for a rhombille tiling.","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","hexagon","diamond","distance","tiling","rhombus","rhombilletiling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rhombus(vec2 position) {\n    position /= vec2(2.0, sqrt(3.0));\n    position.y -= 0.5;\n    vec2 position1 = position;\n    position1.x -= fract(floor(position1.y) * 0.5);\n    position1 = abs(fract(position1) - 0.5);\n    vec2 position2 = position;\n    position2.y -= 2.0 / 3.0;\n    position2.x -= fract(floor(position2.y) * 0.5);\n    position2 = abs(fract(position2) - 0.5);\n    float d1 = abs(1.0 - max(position1.x + position1.y * 1.5, position1.x * 2.0));\n    float d2 = abs(1.0 - max(position2.x + position2.y * 1.5, position2.x * 2.0));\n    return min(d1, d2) ;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    \n    float scale = sqrt(3.0) * 0.5;\n    float d = rhombus(position / scale) * scale;\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    color *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n\tcolor = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.002) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = rhombus(mousePosition / scale) * scale;\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}