{"ver":"0.1","info":{"id":"MdBcWd","date":"1494343944","viewed":113,"name":"Graphics Exam prep","username":"Dawars","description":"Graphics Exam prep","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float fov = 60.;\nconst vec3 eye = vec3(0,0,fov/2.);\nconst vec3 lookat = vec3(0,0,0);\n    \nconst vec3 lightDir = normalize(vec3(-1,-0.5,-1));// directional Light\nconst vec3 inRad = 0.7*vec3(1,1,1); // incident radiance\n\nfloat solveQuad(float a, float b, float c){\n    float disc = b*b - 4.*a*c;\n    if (disc < 0.) return -1.;\n    \n    float t1 = (-b - sqrt(disc))/(2.*a);\n    float t2 = (-b + sqrt(disc))/(2.*a);\n    float t = t1;\n    if (t1 < 0. || (t2 < t1 && 0. < t2)) {\n        t = t2;\n    }\n    return t;\n}\n\nvec3 ka = vec3(0.1,0.1,0.1);\nvec3 kd = vec3(1, 0, 1);\nvec3 ks = vec3(.8,.8,.8);\n\nfloat s = 100.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // image size in 3D\n    vec3 right = vec3(20.,0,0);\n    vec3 up = vec3(0,right.x*iResolution.y/iResolution.x,0);\n    \n\tvec2 uv = 2.*fragCoord.xy / iResolution.xy-1.; // [-1, +1]\n    vec3 p = lookat + uv.x*right + uv.y*up; // world coords of pixel\n    \n    vec3 d = normalize(p-eye); // view direction\n    vec3 color = vec3(0,0,0);\n    \n    vec3 n = normalize(vec3(0,1,0));\n    vec3 f = vec3(0,0.1,-5);\n    \n    // o-paraboloid\n    float a = dot(d, d) - pow(dot(d, n), 2.);\n    float b = -2.*dot(d, f);\n    float c = dot(f, f);\n    float t = solveQuad(a, b, c);\n    if (t >= 0.) {\n        vec3 nRes = normalize(2.*(d*t - f) - 2.*dot(n, d*t)*n); // surface normal\n\n        vec3 L = -lightDir;\n        vec3 H = normalize(L-d); // halfway vec\n        float cos_delta = max(0., dot(H,nRes));\n\n        color += ka; // ambient\n        color += inRad * kd * dot(nRes, -lightDir); // lambertian diffuse \n        color += inRad * ks * pow(cos_delta, s); // blinn phong specular\n    }\n    \n    \n    // sphere\n    float r=5.;\n    vec3 center=vec3(-5,-5,5); // center\n        \n    a = dot(d,d);\n    b =  2.*dot(eye-center,d);\n    c = dot(eye-center,eye-center)-r*r;\n    \n    t = solveQuad(a, b, c);\n\t\n    if (t >= 0.) {\n        vec3 nRes = (eye + d*t - center) / r; // surface normal\n\n        vec3 L = -lightDir;\n        vec3 H = normalize(L-d); // halfway vec\n        float cos_delta = max(0., dot(H,nRes));\n\n        color = ka; // ambient\n        color += inRad * kd * dot(nRes, -lightDir); // lambertian diffuse \n        color += inRad * ks * pow(cos_delta, s); // blinn phong specular\n    }\n    \n    \n    // cylinder\n    float radius = 3.;\n    vec3 axis = normalize(vec3(0.25,1,0));\n    center = vec3(7,0,0);\n    \n    a = dot(d,d)-dot(d,axis)*dot(d,axis);\n    b = 2.*dot(d,eye-center)-2.*dot(d,axis)*dot(eye-center,axis);\n    c = dot(eye-center,eye-center)-dot(eye-center,axis)*dot(eye-center,axis)-radius*radius;\n    \n    t = solveQuad(a, b, c);\n    \n    if(t>0.){\n\t\tvec3 nRes = normalize(eye+d*t - center-axis*dot(eye+d*t-center, axis)); // surface normal\n\n        vec3 L = -lightDir;\n        vec3 H = normalize(L-d); // halfway vec\n        float cos_delta = max(0., dot(H,nRes));\n\n        color = ka; // ambient\n        color += inRad * kd * dot(nRes, -lightDir); // lambertian diffuse \n        color += inRad * ks * pow(cos_delta, s); // blinn phong specular\n    }\n    \n    fragColor = vec4(color, 1);\n\n    \n}","name":"Image","description":"","type":"image"}]}