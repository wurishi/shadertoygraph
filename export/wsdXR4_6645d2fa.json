{"ver":"0.1","info":{"id":"wsdXR4","date":"1571600530","viewed":867,"name":"scanlines and shadow mask","username":"sh1boot","description":"a rough attempt at CRT emulation.  Not so great, but it really depends on a very small pixel size.\n\nDrag up to magnify after applying effect.\nDrag right to magnify before applying effect.","likes":6,"published":3,"flags":32,"usePreview":0,"tags":["scanlines","filter","raster"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool zoom = false;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.0;\n    if (iMouse.w > 0.0 && iMouse.y - iMouse.w > iMouse.x - iMouse.z)\n        scale += 16.0 * abs(iMouse.y - iMouse.w) / iResolution.x;\n    vec2 uv = fragCoord / scale / iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const bool interlace = false;   // FLASHING IMAGE WARNING: enabling this flickers a bit\nconst bool philace = false;    // enabling this flickers a lot more\nconst float brightnessBoost = 2.5;\nconst float colourLeakage = 0.45;\nconst float focus = 8.0;\nconst vec2 maskScale = vec2(3.0, 4.0);\nconst vec2 pixelScale = vec2(1.0, 8.0);\n\nfloat strobe(float up, float dn, float x) {\n    return step(up, x) - step(dn, x);\n//    return smoothstep(up, up+0.08, x) - smoothstep(dn, dn+0.08, x);\n}\n\n#if 1\nvec3 mask(in vec2 c) {\n    c = fract(c / maskScale);\n    c.x += step(0.5, c.y) * (1.5 / 3.0);\n    c.x = fract(c.x) * 3.0;\n    vec3 m = vec3(strobe(0.0, 0.9, c.x),\n                  strobe(1.0, 1.9, c.x),\n                  strobe(2.0, 2.9, c.x));\n    m *= vec3(1.0-step(0.9, fract(c.y * 2.0)));\n    return m;\n}\n#else\nvec3 mask(in vec2 c) {\n    float yo = step(0.5,fract(c.x * 0.5 / maskScale.x)) * 0.5;\n    c = fract(c / maskScale);\n    c.x = fract(c.x) * 3.0;\n    c.y += yo;\n    vec3 m = vec3(strobe(0.0, 0.9, c.x),\n                  strobe(1.0, 1.9, c.x),\n                  strobe(2.0, 2.9, c.x));\n    m *= vec3(1.0-step(0.9, fract(c.y * 1.0)));\n    return m;\n}\n#endif\n\nfloat g(in float x) {\n    return exp(-(x*x) * focus);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float magnify = 1.0;\n    if (iMouse.z > 0.0 && iMouse.x - iMouse.z > iMouse.y - iMouse.w)\n        magnify += 16.0 * abs(iMouse.x - iMouse.z) / iResolution.x;\n    vec2 scale = pixelScale;\n    float phase = float(iFrame / 1);\n    float il = fract(phase * (!interlace ? 0.000\n                               : philace ? 0.61803398875\n                                         : 0.5));\n    vec2 uv = fragCoord / scale;\n    uv /= magnify;\n    vec2 uv0 = vec2(uv.x, floor(uv.y + il) - il);\n    vec2 uv1 = vec2(uv.x, ceil(uv.y + il) - il);\n    if (uv1.y == uv0.y) uv1.y += 1.0;\n    float f0 = uv.y - uv0.y;\n    float f1 = uv1.y - uv.y;\n    uv0 = uv0 * scale / iResolution.xy;\n    uv1 = uv1 * scale / iResolution.xy;\n\n    vec3 c0 = texture(iChannel0, uv0).rgb;\n    vec3 c1 = texture(iChannel0, uv1).rgb;\n\n    vec3 col = c0 * g(f0) + c1 * g(f1);\n    vec3 m = mask(floor(fragCoord) / magnify);\n    col *= brightnessBoost;\n    vec3 excess = max(vec3(0.0), col - 1.0);\n    col = col * m + excess * colourLeakage;\n\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}