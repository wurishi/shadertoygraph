{"ver":"0.1","info":{"id":"4dlyRN","date":"1487274800","viewed":171,"name":"Mandelbrot with Distance Est","username":"yumcyawiz","description":"rendering mandelbrot with distance estimation\nreference : http://iquilezles.org/articles/distancefractals/distancefractals.htm","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["distanceestimation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 interpolate(vec3 x1, vec3 x2, float a) {\n    float k = pow((1.0 - cos(a*3.14))/2.0, 1.0);\n    return x1*(1.0 - k) + k*x2;\n}\n\nvec4 colormap(float x) {\n    vec3 c1 = vec3(0, 7, 100)/255.0;\n    vec3 c2 = vec3(32, 107, 203)/255.0;\n    vec3 c3 = vec3(237, 255, 255)/255.0;\n    vec3 c4 = vec3(255, 170, 0)/255.0;\n    vec3 c5 = vec3(0, 2, 0)/255.0;\n    \n    if(x < 0.16) {\n        float a = x/0.16;\n        return vec4(interpolate(c1, c2, a), 1.0); \n    }\n    else if(x < 0.42) {\n        float a = (x - 0.16)/(0.42 - 0.16);\n        return vec4(interpolate(c2, c3, a), 1.0);\n    }\n    else if(x < 0.6425) {\n        float a = (x - 0.42)/(0.6425 - 0.42);\n        return vec4(interpolate(c3, c4, a), 1.0);\n    }\n    else if(x < 0.8575) {\n        float a = (x - 0.6425)/(0.8575 - 0.6425);\n        return vec4(interpolate(c4, c5, a), 1.0);\n    }\n    else {\n        float a = (x - 0.8575)/(1.0 - 0.8575);\n        return vec4(interpolate(c5, c1, a), 1.0);\n    }\n}\n\n\n//math\nvec2 cmult(vec2 z1, vec2 z2) {\n    return vec2(z1.x*z2.x - z1.y*z2.y, z1.x*z2.y + z1.y*z2.x);\n}\n\n\nconst int maxIter = 300;\nfloat mandelbrot(vec2 c) {\n    vec2 z = vec2(0.0, 0.0);\n    vec2 zd = vec2(0.0, 0.0);\n    for(int i = 0; i < maxIter; i++) {\n        if(length(z) > 20.0) break;\n        zd = 2.0*cmult(z, zd) + vec2(1.0, 0.0);\n        z = cmult(z, z) + c;\n    }\n    \n    float d = 0.5*length(z)*log(length(z))/length(zd);\n    return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 offset = vec2(-0.749, 0.101);\n    float scale = 1.0/pow((0.01*float(iFrame)), 3.0);\n\tvec2 uv = scale*(2.0*fragCoord.xy - iResolution.xy) / iResolution.y + offset;\n    \n    float d = mandelbrot(uv);\n    vec3 color = vec3(0);\n    if(d > 0.0) {\n        d = clamp(8.0*d/scale, 0.0, 1.0);\n    \td = pow(d, 0.05);\n        color = colormap(1.0 - d).xyz;\n    }\n    else {\n        color = vec3(0);\n    }\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}