{"ver":"0.1","info":{"id":"XtcSRs","date":"1481052802","viewed":9993,"name":"Video Intensity Scope","username":"robingreen","description":"Takes video and generates a log-scaled density plot for the intensity of each column of pixels  in the image, RGB and Luma overlaid.\nThis demonstrates quite well the problem of picking a green-screen from a video source.","likes":88,"published":3,"flags":2,"usePreview":1,"tags":["video","imageprocessing","scope","intensity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Robin Green, Dec 2016\n// Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n       \n    // calculate the intensity bucket for this pixel based on column height (padded at the top)\n    const float max_value = 270.0;\n    const float buckets = 512.0;\n    float bucket_min = log( max_value * floor(uv.y * buckets) / buckets );\n    float bucket_max = log( max_value * floor((uv.y * buckets) + 1.0) / buckets );\n    \n    // count the count the r,g,b and luma in this column that match the bucket\n    vec4 count = vec4(0.0, 0.0, 0.0, 0.0);\n    for( int i=0; i < 512; ++i ) {\n        float j = float(i) / buckets;\n        vec4 pixel = texture(iChannel1, vec2(uv.x, j )) * 256.0;\n        \n        // calculate the Rec.709 luma for this pixel\n        pixel.a = pixel.r * 0.2126 + pixel.g * 0.7152 + pixel.b * 0.0722;\n\n        vec4 logpixel = log(pixel);\n        if( logpixel.r >= bucket_min && logpixel.r < bucket_max) count.r += 1.0;\n        if( logpixel.g >= bucket_min && logpixel.g < bucket_max) count.g += 1.0;\n        if( logpixel.b >= bucket_min && logpixel.b < bucket_max) count.b += 1.0;\n        if( logpixel.a >= bucket_min && logpixel.a < bucket_max) count.a += 1.0;\n    }\n    \n    // sum luma into RGB, tweak log intensity for readability\n    const float gain = 0.3;\n    const float blend = 0.6;\n    count.rgb = log( mix(count.rgb, count.aaa, blend) ) * gain;\n          \n    // output\n    fragColor = count;\n\n}","name":"Image","description":"","type":"image"}]}