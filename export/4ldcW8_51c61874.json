{"ver":"0.1","info":{"id":"4ldcW8","date":"1532429035","viewed":123,"name":"Dynamic bitflipping","username":"dust","description":"A bitflip shader forked from https://www.shadertoy.com/view/4ldyW8","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["hsv","fork","xor","or","bitflip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shamelessly adapted from \n// https://www.shadertoy.com/view/4ldyW8\n// by python273\n\n// HSV/RGB conversion function from python273\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int xor = int(fragCoord.x + iTime * 80.0 + iMouse.x * 10.0)\n        \t  ^  // try & |\n        \t  int(fragCoord.y + iTime * 80.0 + iMouse.y * 10.0);\n    \n    int or = int(fragCoord.x + iTime * 80.0 + iMouse.x * 10.0)\n        \t |  // try & |\n        \t int(fragCoord.y + iTime * 80.0 + iMouse.y * 10.0);\n    float temp = float(xor) + cos(cos(float(or) * 10.0f) * cos(iTime));\n    vec3 rgb = hsv2rgb(vec3(sin(temp), 1.0, cos(temp)));\n    vec3 procRGB = vec3(fragCoord.x / iResolution.x, cos(iTime), sin(iTime));\n    fragColor = vec4(cross(rgb, vec3(rgb.g, dot(rgb, procRGB), length(procRGB))).rg * vec2(0.8, 1.0), rgb.b, 1.0);\n}","name":"Image","description":"","type":"image"}]}