{"ver":"0.1","info":{"id":"4tBSDR","date":"1442685657","viewed":486,"name":"tree logo","username":"cabbibo","description":"logo for tree","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["logo","tree","branching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// Branch Code stolen from : https://www.shadertoy.com/view/ltlSRl\n\nconst float MAX_TRACE_DISTANCE = 5.0;             // max trace distance\nconst float INTERSECTION_PRECISION = 0.001;        // precision of the intersection\nconst int NUM_OF_TRACE_STEPS = 100;\nconst float PI = 3.14159;\n\nfloat breath;\nfloat branchFade;\n\nconst int numSteps =4;\n\nfloat fadeOutSpeed = .03;\nfloat fadeInSpeed = .1;\n\nfloat city2Tree = .6;\nfloat treeBreath = .2;\nfloat tree2City = 1. - city2Tree - treeBreath;\n\nfloat speed = .1;\n\nfloat branchSize =.6;\nfloat reductionFactor = .5;\n//float bs = branchSize;\nfloat rot = -20.;\n\nfloat gTime;\n\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\n\nfloat smax( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(a-b)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat getBreath(float  time ){\n    \n    // Gettin our time normalized for \n    // the course of the breath\n    float t = max( 0. , time - fadeInSpeed);\n    t /= 1. - fadeInSpeed;\n    t = min( 1. , t );\n    t /= (1.- fadeOutSpeed);\n    t = min( 1. , t );\n\n    \n    //Get city 2 tree transisition\n    float c2t = clamp( t / city2Tree , 0. , 1. );\n    \n    float tb = clamp(  ( t - city2Tree ) / treeBreath , 0. , 1. ); \n    float t2c = clamp( ( t - city2Tree - treeBreath ) / tree2City , 0. , 1. );\n      \n\n    float breath = 0.;// t * t * t;\n    breath += pow( c2t , 6. ) * .8 + c2t * c2t *.2;\n    breath += pow( tb , .6 ) * .6;\n    \n    breath -= pow( t2c , 5. ) * 1.6;\n    breath = max( breath , 0. );\n   \n    return breath;\n    \n}\n\nfloat getFade(float time ){\n    \n    //Fade in Value\n    float inT = min( 1. , time / fadeInSpeed );\n    \n    \n    float outT = min( 1. , ((1. - time ) / fadeOutSpeed));\n   \n    inT = pow( inT , .8 );\n\n    return min( inT , outT);\n\n}\n\n\n\nmat4 rotateX(float angle){\n    \n\tangle = -angle/180.0*3.1415926536;\n    float c = cos(angle);\n    float s = sin(angle);\n\treturn mat4(1.0, 0.0, 0.0, 0.0, 0.0, c, -s, 0.0, 0.0, s, c, 0.0, 0.0, 0.0, 0.0, 1.0);\n    \n}\n\nmat4 rotateY(float angle){\n    \n\tangle = -angle/180.0*3.1415926536;\n    float c = cos(angle);\n    float s = sin(angle);\n\treturn mat4(c, 0.0, s, 0.0, 0.0, 1.0, 0.0, 0.0, -s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0);\n    \n}\n\nmat4 rotateZ(float angle){\n    \n\tangle = -angle/180.0*3.1415926536;\n    float c = cos(angle);\n    float s = sin(angle);\n\treturn mat4(c, -s, 0.0, 0.0, s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n    \n}\nmat4 translate(vec3 t){\n    \n\treturn mat4(1.0, 0.0, 0.0, -t.x, 0.0, 1.0, 0.0, -t.y, 0.0, 0.0, 1.0, -t.z, 0.0, 0.0, 0.0, 1.0);\n    \n}\n\n\n\nvec2 smoothU( vec2 d1, vec2 d2, float k)\n{\n    float a = d1.x;\n    float b = d2.x;\n    float h = clamp(0.5+0.5*(b-a)/k, 0.0, 1.0);\n    return vec2( mix(b, a, h) - k*h*(1.0-h), mix(d2.y, d1.y, pow(h, 2.0)));\n}\n\n\nfloat udBox( vec3 p, vec3 b )\n{\n  return length(max(abs(p)-b,0.0));\n}\n\n\n//--------------------------------\n// Modelling \n//--------------------------------\nvec2 map( vec3 pos ){  \n    \n    \n\n\n    vec4 p = vec4( pos , 1. );\n    \n    p = p * rotateY( (gTime ) * 360.);\n    \n    mat4 m;\n \tfloat bs = branchSize;\n    vec2 res = vec2(udBox( p.xyz , vec3(  bs / 10. , bs * branchFade  , bs / 10. )) ,1.);\n\n \t   \n    for( int i = 0; i <numSteps; i ++ ){\n        \n        float id = float( i ) / float( numSteps);\n        \n        bs *= reductionFactor;\n\n        \n        float randRot = rot;// + 10. * sin( float(i) * 10.  * breath);\n       \tvec3 tVec = vec3( 0.  , bs * ( breath  * 2.  )* ( 4. + float( i ))/6.   , 0. );\n        m = translate( tVec  ) * rotateZ( randRot * breath) * rotateX( -rot * breath );    \n   \n\n        p.x = abs(p.x)-bs/2.;\n        p.z = abs(p.z)-bs/2.;  \n\n        p = p * m; \n        \n      \tfloat box = udBox( p.xyz , vec3(  bs / 10. , bs *  branchFade , bs / 10. ));  \n        \n        float smoothA = .1 * (1.-id) * ( breath * 1.5 + .2 );\n        res = smoothU( res , vec2( box , id ) ,  smoothA );\n\n\n    }\n\n   \treturn res;\n    \n}\n\n\n\n//----\n// Camera Stuffs\n//----\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in vec2 mouse )\n{\n    float an = 0.3 + 3.0*mouse.x;\n   \tfloat an2 = 0.3 + 3.0*mouse.y;\n\n\tcamPos = vec3(2.5*sin(an),3. * cos(an2),2.5*cos(an));\n    camTar = vec3(0. ,0.0,0.0);\n}\n\n\n\n\n// Calculates the normal by taking a very small distance,\n// remapping the function, and getting normal for that\nvec3 calcNormal( in vec3 pos ){\n    \n\tvec3 eps = vec3( 0.01, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n  float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.612*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.5;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec2 calcIntersection( in vec3 ro, in vec3 rd ){\n\n    \n    float h =  INTERSECTION_PRECISION*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    float id = -1.;\n    \n    for( int i=0; i< NUM_OF_TRACE_STEPS ; i++ ){\n        \n        if( h < INTERSECTION_PRECISION || t > MAX_TRACE_DISTANCE ) break;\n\t   \tvec2 m = map( ro+rd*t );\n        h = m.x;\n        t += h;\n        id = m.y;\n        \n    }\n\n    if( t < MAX_TRACE_DISTANCE ) res = t;\n    if( t > MAX_TRACE_DISTANCE ) id =-1.0;\n    \n    return vec2( res , id );\n     \n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 doPalette( in float val , in mat4 pType ){\n  return palette( val ,  pType[0].xyz , pType[1].xyz , pType[2].xyz , pType[3].xyz );\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n   \n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n   \tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float time = max( 0. , mod( iTime * speed , 1.2 ) - .2 );\n    \n    gTime = time;\n    breath = getBreath(time);\n    branchFade =getFade(time );\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime * .5 , m );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    vec2 res = calcIntersection( ro , rd  );\n    \n    vec3 col = vec3(0. ); \n    \n        // If we have hit something lets get real!\n    if( res.y > -.5 ){\n   \n        vec3 pos = ro + rd * res.x;\n        vec3 nor = calcNormal( pos );\n        float AO = calcAO( pos , nor );\n        \n      \n        col = nor * .5 + .5;\n        col = vec3( AO );\n    }\n    \n    // apply gamma correction\n    col = pow( col, vec3(0.4545) );\n\n\tfragColor = vec4( col ,1. );\n   \n    \n    // Show timer at bottom\n    \n    if( fragCoord.y < 4.  ){ \n        \n        if( abs( uv.x - fadeInSpeed) < .003 ){\n        \tfragColor = vec4( 1. , 0., 0., 1. );   \n        }\n        \n        if( abs( uv.x - (1.-fadeOutSpeed)) < .003 ){\n        \tfragColor = vec4( 1. , 0., 0., 1. );   \n        }\n        \n        float breathTime = 1. - fadeInSpeed - fadeOutSpeed;\n        if( abs( (uv.x - fadeInSpeed)/breathTime - city2Tree) < .003 ){\n        \tfragColor = vec4( 0. , 1., 0., 1. );   \n        }\n        \n        if( abs( (uv.x - fadeInSpeed)/breathTime - ( city2Tree + treeBreath )) < .003 ){\n        \tfragColor = vec4( 0. , 1., 0., 1. );   \n        }\n\n        if( abs( uv.x - time ) < .01 ){\n        \tfragColor = vec4( 1. );\n        }\n      \n        \n        \n        \n    \n    }\n    \n}","name":"","description":"","type":"image"}]}