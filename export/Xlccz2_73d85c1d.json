{"ver":"0.1","info":{"id":"Xlccz2","date":"1533147917","viewed":132,"name":"Voronoi example","username":"darkeclipz","description":"A simple Voronoi example.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float seed = 0.0;\nfloat random() {\n\treturn fract( sin( seed++ * 4871452.47 ) * 87175.89 );\n}\n\n#define N 64\n#define t iTime\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Rescale.\n    vec2 R = iResolution.xy;\n    vec2 uv = (2.*fragCoord-R)/R.y;\n    vec2 M = (2.*iMouse.xy-R)/R.y;\n    \n    // Colors.\n    vec3 col = vec3(0);\n    vec3 colP = vec3(0);\n    \n    // Location of each points (x, y)\n    vec2 points[N];\n    \n    // Distance from uv to point N.\n    float pDistances[N];\n    \n    // Distance to the closest point from uv.\n    float minDist = 0.0;\n    \n    // Index of the closest point.\n\tint minN = 0;\n    \n    for(int i=0; i < N; i++) {\n                \n        // Create a random point.\n        points[i] = 2. * vec2(random(), random()) - 1.;\n        \n        // Override this with two circling points.\n        if(i == N-1) points[i] = .8*vec2(cos(t/4.), sin(t/4.));\n        if(i == N-2) points[i] = .4*vec2(cos(-t/2.), sin(-t/2.));\n        \n        // Distance from uv to the created point.\n        float d = distance(points[i], uv);\n        \n        // if min dist = 0, this is the first point, so we use that.\n        if(minDist == 0.0) minDist = d;\n        \n        // Save the closest point.\n        minDist = min(minDist, d);\n        \n        // Store the index.\n        if(minDist == d) minN = i;   \n        \n        // Used to display the point on the screen.\n        if( distance(uv, points[i]) < 0.01 ) col = vec3(1);   \n        \n    }\n    \n    // Get a normalized index for each cell.\n    float normN = float(minN)/float(N);\n    \n    // Get a color for the cell.\n    col = 0.5 + 0.5*cos( 3.*normN + vec3(0,2,4) + t );\n    \n    // Render points.\n    for(int i=0; i < N && fract(t/8.) < .5; i++) {\n    \tif( distance(uv, points[i]) < 0.01 ) col = vec3(1); \n\t}\n\n    \n    // Set the color, but if the cell is the mouse, it should\n    // be black.\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}