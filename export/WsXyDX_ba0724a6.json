{"ver":"0.1","info":{"id":"WsXyDX","date":"1585675340","viewed":48,"name":"exercice_ArtLineV7","username":"Elliot18","description":"exercice Artline","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["exercice"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\t//--Definition RayTrace-----------------------------------------------------------------\n\nvec4 rayTrace ( vec3 camera, vec4 sphere, vec3 surfaceColor, vec4 light, in vec2 fragCoord ) {\n    \n    vec4 colObject;\n    vec3 pixel = vec3(fragCoord,0.0);\n    vec3 ray = pixel - camera; \n    vec3 rayNorm = normalize(ray); \n    vec3 camToSphere = sphere.xyz - camera ;\n    \n    float h = length(camToSphere); // h = hypothenuse\n    float a = dot(camToSphere, rayNorm); // a = adjacent\n    float sqrt_o = h*h - a*a; // o = opposé \n    \n    // sqrt d & d = distance jusqu'a la surface a partir de o au carré.\n    // Si le resultat est superieur a 0 alors le rayon intersect\n    \n    \n    float sqrt_d = sphere.w*sphere.w - sqrt_o; \n    \n    // Check if there is an intersection\n    \n        \n    if (sqrt_d > 0. ) {\n        \n        float d = sqrt(sqrt_d); \n        vec3 intersection = camera + ( a-d )*rayNorm; // intersection depuis la camera \n        vec3 normal = normalize(intersection.xyz - sphere.xyz); // intersection avec la sphere au centre du monde et normalisé\n        vec3 surface_pos = intersection.xyz;\n        \n        //Lambert\n        \n        vec3 incidence = light.xyz - surface_pos; \n        float intensite = length(incidence); \n        incidence = normalize(incidence); \n        intensite = light.w /(intensite*intensite);\n        \n        colObject = vec4(surfaceColor*0.004 + dot(incidence, normal)*vec3(1.)*intensite, 1.0);\n        \n        \n       }\n    else\n    \t{\n        colObject = vec4(0.0);      \n        }\n    \n    return colObject;\n\n}\n\n//-------------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    //--INPUT OBJET--------------------------------------------------------------------------\n    \n    vec4 col = vec4 (0.,0.,0.,0.); // => couleur fond\n    vec3 camera = vec3(85,125, 1000.0); // => pos camera\n    vec4 light = vec4(iMouse.xy, 0.0,2500.); // => pos light et puissance de la lampe\n    \n    vec4 sphere1 = vec4(400.,300.,-600., 600.0); // => pos sphere et radius de la sphere\n    vec4 sphere2 = vec4(650.,200.,-250.,200.);\n    \n    vec3 sphere1_col = vec3 (255.,62.,0.);\n    vec3 sphere2_col = vec3 (255.,155.,0.);\n    \n    \n    \n        \n    vec4 col1 = rayTrace( camera, sphere1, sphere1_col, light, fragCoord); // => rendu sphere 1\n    vec4 col2 = rayTrace( camera, sphere2, sphere2_col, light, fragCoord); // => rendu sphere 2\n\n   \n    col = vec4(mix(col1.xyz, col2.xyz, col2.w),1.0);// => on additionne les rendus\n    \n    \n    // Output to screen\n                    \n    fragColor = vec4(col.x,col.y,col.z, 1.0);\n}\n    ","name":"Image","description":"","type":"image"}]}