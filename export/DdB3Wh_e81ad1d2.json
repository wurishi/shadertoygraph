{"ver":"0.1","info":{"id":"DdB3Wh","date":"1668041579","viewed":75,"name":"CS 44N Show and Tell","username":"larryjiyu","description":"Shader For Show and Tell","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["beginner"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 rgb(float r, float g, float b) {\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n\nvec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {\n\tfloat d = length(pos - uv) - rad;\n\tfloat t = clamp(d, 0.0, 1.0);\n\treturn vec4(color, 1.0 - t);\n}\n\nfloat segment(vec2 P, vec2 A, vec2 B, float r) \n{\n    vec2 g = B - A;\n    vec2 h = P - A;\n    float d = length(h - g * clamp(dot(g, h) / dot(g,g), 0.0, 1.0));\n\treturn smoothstep(r, 0.5*r, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n\t//current pixel\n    vec2 r = vec2(fragCoord.x / iResolution.x,\n\t\t\t\t  fragCoord.y / iResolution.y); \n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    vec4 layer1 = vec4(col,1.0);\n    \n    //circle color\n  \tvec3 white = rgb(255.0, 255.0, 255.0);\n\n    //pi value\n    float PI = 3.14159;\n\n    //circle num (can be changed)\n    int cNum = 20;\n\n  \n    vec4 circleLayers = vec4(0.0);\n\n    for (int i = 1; i <= cNum; i++) {\n        //alter features based on number of circles\n        float alter = float(i)/(float(cNum) + 1.0);\n        \n        //x and y location of circle\n        float x = iResolution.x * alter;\n        float y = iResolution.y * 0.5 + 0.3 * iResolution.y * cos(iTime + PI * alter * 2.5);\n        \n        //location of circle\n        vec2 center = vec2(x, y);\n                            \n        //circle radius\n        float radius = (0.1 * iResolution.y / float(cNum) * 3.5);  \n                  \n        //create circle and add to layer\n        vec4 circle = circle(fragCoord.xy, center, radius, white);\n        circleLayers += circle;\n        \n        \n        float lineWidth = 5.0;\n        //vertical lines\n        if(abs(r.x - x) < lineWidth){\n            circleLayers += vec4(white, 1.0); \n        }\n        \n        //line\n        float leftCoord = alter - 0.001;\n        float rightCoord = alter + 0.001;\n        if(r.x < rightCoord && r.x > leftCoord && r.y < y/iResolution.y){\n            layer1 += vec4(white, 1.0); \n        }\n\n        \n        \n    }\n    \n    \n    \n    fragColor = mix(layer1, circleLayers, circleLayers.a);\n    \n\n}\n\n/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Here we are seperating the color and transparency parts\n\t// of the vec4 that represents the pixels.\n\tvec3 color = vec3(1.0, 1.0, 1.0);\n\tfloat alpha = 1.0;\n    \n    \n    float mutliplier = 0.5*cos(iTime);\n\t\n\tvec4 pixel = vec4(mutliplier* color, alpha);\n\tfragColor = pixel;\n}\n*/","name":"Image","description":"","type":"image"}]}