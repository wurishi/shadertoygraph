{"ver":"0.1","info":{"id":"XcVXRd","date":"1715632200","viewed":45,"name":"Day and Night in Ice !Epilepsy!","username":"BCFlavin","description":"What happens at night? Epic. Epilepsy warning.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","phantommode","nightandday"],"hasliked":0,"parentid":"4fSSWD","parentname":"Box trick"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// built from Raymarching Base\n// Uses code from Phantom Mode\n\nfloat sdOctahedron( vec3 p, float s )\n{\n  p = abs(p);\n  float m = p.x+p.y+p.z-s;\n  vec3 q;\n       if( 3.0*p.x < m ) q = p.xyz;\n  else if( 3.0*p.y < m ) q = p.yzx;\n  else if( 3.0*p.z < m ) q = p.zxy;\n  else return m*0.57735027;\n    \n  float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n  return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nmat2 rot2d(float angle) {\n    float c = sin(angle);\n    float s = cos(angle);\n    return mat2(c, s, -s, c);\n}\n\n// Scene distance\nfloat map(vec3 p) {\n\n    vec3 q = p;\n    \n    p.z -= iTime * 0.75; \n    p.xy *= rot2d(iTime * 0.2);\n    q = fract(p) - 0.5;\n    \n    float box = sdOctahedron(q, 0.2);\n   \n    return box;\n}\n\nvec3 raytrace(vec2 uv) {\n\n    // Initialization\n    vec3 ro = vec3(0, 0, -3);         // ray origin\n    vec3 rd = normalize(vec3(uv, 1)); // ray direction\n    vec3 col = vec3(0);               // final pixel color\n\n    float t = 0.; // total distance travelled\n\n    // Raymarching\n    for (int i = 0; i < 50; i++) {\n        vec3 p = ro + rd * t;     // position along the ray\n        \n        float d = map(p);         // current distance to the scene\n        \n        d = max(abs(d), 0.005);\n\n        t += d * sin(tan(0.6 * (iTime * 0.3)-1.));  // \"march\" the ray back and forth\n        \n        if (d < .001) break;      // early stop if close enough\n        if (t > 100.) break;      // early stop if too far\n    }\n\n    // Coloring\n    col = vec3(t * .1 + 0.1,t * .1 + 0.2,t * .1 + 0.5);  // color based on distance\n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n\n\n    vec3 col = raytrace(uv);\n\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}