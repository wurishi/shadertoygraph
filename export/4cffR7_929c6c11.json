{"ver":"0.1","info":{"id":"4cffR7","date":"1723492107","viewed":26,"name":"grid structure","username":"4two","description":"Simple Grid Structure","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// ShaderToy Shader - Maze Lattice with Tubes\n// Inspired by \"Maze Lattice\" with tubular structures\n/*\n\nCopyright (c) <year> <copyright holders>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/ \n\n\n#define PI 3.14159265359\n\n// Function for 2D noise\nfloat noise(vec2 p) {\n    return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453123);\n}\n\n// 3D rotation matrix\nmat3 rotateY(float a) {\n    float c = cos(a), s = sin(a);\n    return mat3(\n        c, 0.0, -s,\n        0.0, 1.0, 0.0,\n        s, 0.0, c\n    );\n}\n\n// Distance function for tubular maze lattice\nfloat mazeTubeDF(vec3 p) {\n    // Scale and repeat the structure\n    float scale = 4.0;\n    vec3 q = mod(p, scale) - scale / 2.0;\n    \n    // Create tubes along the x, y, and z axes\n    float d1 = length(q.yz) - 0.2; // Tube along x-axis\n    float d2 = length(q.xz) - 0.2; // Tube along y-axis\n    float d3 = length(q.xy) - 0.2; // Tube along z-axis\n\n    // Combine the distances to create lattice structure\n    return min(d1, min(d2, d3));\n}\n\n// Raymarching function\nfloat raymarch(vec3 ro, vec3 rd) {\n    float depth = 0.0;\n    for (int i = 0; i < 100; i++) {\n        vec3 p = ro + depth * rd;\n        float dist = mazeTubeDF(p);\n        if (dist < 0.001) return depth;\n        depth += dist;\n        if (depth > 100.0) break; // Avoid infinite loop\n    }\n    return -1.0;\n}\n\n// Calculate normal using distance field\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    float d = mazeTubeDF(p);\n    vec3 n = d - vec3(\n        mazeTubeDF(p - e.xyy),\n        mazeTubeDF(p - e.yxy),\n        mazeTubeDF(p - e.yyx)\n    );\n    return normalize(n);\n}\n\n// Main rendering function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    // Camera setup\n    vec3 ro = vec3(0.0, 0.0, 8.0); // Camera position\n    vec3 rd = normalize(vec3(uv, -1.0)); // Ray direction\n    rd = rotateY(iTime * 0.5) * rd; // Rotate camera around Y-axis\n\n    // Raymarching\n    float t = raymarch(ro, rd);\n\n    // Background color\n    vec3 color = vec3(0.0, 0.1, 0.2);\n\n    // If hit, calculate color and normal\n    if (t > 0.0) {\n        vec3 pos = ro + t * rd;\n        vec3 normal = calcNormal(pos);\n\n        // Base color based on position\n        vec3 baseColor = vec3(0.1, 0.5, 0.8) * 0.5 * (1.0 + sin(pos * 2.0));\n\n        // Lighting calculations\n        float diff = max(dot(normal, vec3(0.0, 1.0, 0.5)), 0.0);\n        baseColor *= diff;\n\n        color = baseColor;\n    }\n    \n    // Output final color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}