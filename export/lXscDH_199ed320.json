{"ver":"0.1","info":{"id":"lXscDH","date":"1726147054","viewed":114,"name":"Jump Flood Signed Alternate","username":"spalmer","description":"fork of iq's nice Signed Jump Flooding, julia set respin, slightly different algorithm and fractal.","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["2d","juliaset","flood","jfa","jumpflooding"],"hasliked":0,"parentid":"4XlyW8","parentname":"Signed Jump Flooding"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://shadertoy.com/view/lXscDH (self)\n\n// The MIT License\n// Copyright © 2024 spalmer\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// algorithm changed to only store one candidate per pixel,\n// probably more similar to @chronos way.\n// changed fractal to Julia set dragon for fun.\n// show gradient unless mouse down because... prettier\n// bit o' golfing.  Handles fullscreen better.\n// slowdown feature for witnessing the madness.\n\n// fork of http://shadertoy.com/view/4XlyW8 (parent)\n\n// The MIT License\n// Copyright © 2024 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// SIGNED Jump Flooding, to create SDF of shapes for which\n// we only know whether a point is inside or outside\n\n// See Buffer A\n\n// Similar to:\n//  http://shadertoy.com/view/ct2cDV\n//  http://shadertoy.com/view/McByRd\n// and my old non-signed toy based on paniq code\n//  http://shadertoy.com/view/dsXSD8\n\nvec3 map(vec2 q)\n{\n    vec4 v = texelFetch(iChannel0, ivec2(q), 0);\n    return vec3(v.xy + q, (sqrt(abs(v.z)) - .5) * sign(v.z));\n}\n\nvoid mainImage(out vec4 o, vec2 p)\n{\n    vec2 r = iResolution.xy,\n        m = iMouse.z > 0. ? iMouse.xy : r * (.4 + .4 * sin(iTime * vec2(.3,.5) + vec2(0,2)));\n    \n    vec3 s = map(p);\n    // colorize\n    vec3 c = s.z > 0. ? vec3(.9, .6, .3) : vec3(.65, .85, 1.);\n    vec2 g = (p - s.xy) / s.z; // normalize() unnecessary since we have approx distance\n    \n    float d = 2. * s.z / r.y;\n    if (iMouse.z <= 0.) c *= 1. + vec3(.5 * g, 0.); // show gradient unless mouse down\n    c *= 1. - exp2(-24. * abs(d));\n    c *= .8 + .2 * smoothstep(-.5, .5, cos(128. * d));\n    c = mix(vec3(1.), c, smoothstep(.5, 1.5, abs(s.z)));\n\n    // mouse probe\n    s = map(m);\n    float l = length(p - m);\n    c = mix(vec3(1.,1.,0.), c, smoothstep(2., 3., abs(l - abs(s.z))));\n    c = mix(vec3(1.,1.,0.), c, smoothstep(0., 1., l - 8.));\n    l = length(p - s.xy);\n    c = mix(vec3(1.,1.,0.), c, smoothstep(0., 1., l - 8.));\n    \n    //c = c.z > .3 ? c.yxz : c.yyy/4.; // Shane palette mod\n    o = vec4(c, 1.);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// see Image tab for license\n// spalmer riffing on iq theme\n\n// \"I get a lot of big ideas, and occasionally I actually come up with one myself.\" -- Bauvard\n\n// \"I've been imitated so well I've heard people copy my mistakes.\" -- Jimi Hendrix\n\n// \"People who copy you will always be one step behind.\" -- Wayne Gerard Trotman\n\n// \"Imitation is the sincerest of flattery.\" -- Charles Caleb Colton  1820\n\n// There is a great poem by Lobachevsky on this subject.\n\n\n// some binary shape (-=inside, +=outside)\nfloat shape(vec2 p)\n{\n    // julia set http://en.wikipedia.org/wiki/Julia_set#Pseudocode_for_normal_Julia_sets\n    // coeffs from http://wikipedia.org/wiki/File:Julia_-0.835_-0.2321.png\n    vec2 z = p,\n        c = vec2(-.835, -.2321);\n    c += .01 * vec2(-1,1) * mod(iDate.w, 2.);\n    for (int i = 0; i < 16; ++i)\n    {\n        z = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + c;\n        if (dot(z, z) > 4.) return 1.;\n    }\n    return -1.;\n}\n\n\nvoid mainImage(out vec4 c, vec2 q)\n{\n    vec2 r = iResolution.xy;\n    int slow = 1; //128; //\n    int fi = (iFrame / slow)&1023, // repeat occasionally to support fullscreen\n        limit = 16; // allows up to 8192x8192 buffers or so (8K fullscreen?!)\n        \n    c = texelFetch(iChannel0, ivec2(q), 0);\n    if (fi < limit)\n        // first frame we mark interior and exterior pixels\n        if (fi == 0)\n        {\n            vec2 uv = (2. * q - r) / r.y;\n            float d = shape(uv);\n            c = vec4(0, 0, d > 0. ? 3e38 : -3e38, 0);\n        }\n        // next frames, do one Jump Flood algorithm pass each\n        else\n        //{\n             if (iFrame % slow == 0) {\n                ivec2 ip = ivec2(q);\n\n                int w = 1 << (limit - 1 - fi);\n\n                for (int y = -w; y <= w; y += w)\n                for (int x = -w; x <= w; x += w)\n                if (abs(x) + abs(y) != 0 &&\n                    all(lessThan(uvec2(ip + ivec2(x,y)), uvec2(r))))\n                {\n                    vec4 t = texelFetch(iChannel0, ip + ivec2(x,y), 0);\n                    bool signdiff = (t.z > 0.) != (c.z > 0.);\n                    if (signdiff || abs(t.z) < 2e38)\n                    {\n                        vec2 p = vec2(x,y);\n                        float d = dot(p, p);\n                        if (signdiff && d < abs(c.z))\n                            c = vec4(p, d * sign(c.z), 0);\n                        p += t.xy;\n                        d = dot(p, p);\n                        if (d < abs(c.z))\n                            c = vec4(p, d * sign(c.z), 0);\n                    }\n                }\n            }\n        //}    \n    // then, copy content (because shadertoy ping-pongs two textures per pass)\n//    else \n//        if (fi == limit)\n//            c = texelFetch(iChannel0, ivec2(q), 0);\n    // following frames, do nothing, we are done here\n//        else\n//            discard;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}