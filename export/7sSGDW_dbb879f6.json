{"ver":"0.1","info":{"id":"7sSGDW","date":"1617395792","viewed":402,"name":"MSAA, gamma and UV boilerplate","username":"clepirelli","description":"Boilerplate for a main function with brute-force msaa, gamma correction and UV coordinates calculation\n\nThe boilerplate calls a function returning a vec3 and taking in uv as a vec2","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["template","gammacorrection","boilerplate","msaa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 Image(vec2 uv)\n{\n    return 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n}\n\nMAIN_FUNCTION(Image)","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const int aa = 2;\nconst float aperture = 1.0;\n\nvec4 colorCorrect(vec3 color)\n{\n    vec3 x = max(vec3(.0), color*aperture-.004);\n    vec3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);\n    return vec4(min(retColor, 1.0), 1.0);\n}\n\n#define MAIN_FUNCTION(function) \\\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\\\n{\\\n    vec3 total = vec3(.0);\\\n    /*MSAA*/\\\n    for(int i = 0; i <aa;i++)\\\n    for(int j = 0; j <aa;j++)\\\n    {\\\n    \t/*offset the uv for MSAA*/\\\n    \tvec2 uv = (fragCoord+vec2(float(i),float(j))/float(aa)-.5)/iResolution.xy - vec2(.5);\\\n    \tuv.x *= iResolution.x/iResolution.y;\\\n    \t\\\n        total+= function(uv);\\\n    }\\\n    total /= float(aa*aa);\\\n    \\\n    /*Output to screen*/\\\n    fragColor = colorCorrect(total);\\\n}","name":"Common","description":"","type":"common"}]}