{"ver":"0.1","info":{"id":"sdG3zy","date":"1631737080","viewed":128,"name":"lazy rainbow bubbles","username":"abjectadvect","description":"rainbow bubbles","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["art"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\nconst float TAU = PI*2.;\nconst int S_BUBBLES = 1;\nconst float EPS = 0.0001;\n\nfloat mag(vec3 v) { return sqrt(dot(v, v)); }\n\n\nfloat line(vec3 p, vec3 q, vec3 d, float width) {\n    return mag(p - (q + d*dot(p-q, d)/dot(d,d))) - width;\n}\n\nfloat sphere(vec3 p, vec3 center, float radius) {\n    return mag(p - center) - radius;\n}\n\nvec3 twist(vec3 p, vec3 center, float dist) {\n    vec3 v = p - center;\n    \n    vec2 polar = vec2(sqrt(dot(v.xy, v.xy)), atan(v.y, v.x));\n    float rad = polar.x;\n    float theta = polar.y;\n    \n    \n    float r = 2. * PI * polar.x / dist;\n    \n    float angle = theta + r;\n    \n    v = vec3(rad * cos(angle), rad * sin(angle), v.z);\n \n    return v + center;\n}\n\nfloat unionSDF(float a, float b) { return min(a, b); }\n\nfloat lerps(float a, float b, float s) { return s * b + (1.0 - s) * a; }\nvec3 lerpv(vec3 a, vec3 b, float s) { return s * b + (1.0 - s) * a; }\n\nfloat bubbles(vec3 p) {\n    float d = 1000.;\n    int n = 100;\n    for (int i = 0; i < n; i++) {\n        vec3 displace = vec3(\n            (float(i)-(float(n)/2.-0.5)) / float(n) + sin(iTime*(2.*cos(float(i*29))) + float(i)*91.)*0.05*cos(float(i)), \n            -mod((iTime/19. * (0.1 + abs(sin(float(i)))) + abs(cos(float(i) * 1337.))), 1.0) + 0.5, \n            0.\n        );\n        float s = sphere(p + displace, vec3(0., 0., 0.), \n            lerps(0.01, 0.03, max(0., abs(sin(float(i)*7. + iTime/7.)) - p.y)));\n        if (s < d) {\n            d = s;\n        }\n    }\n    return d;\n}\n\nfloat sceneSDF(vec3 p, int part) {\n    if (part == S_BUBBLES) return bubbles(p);\n    return 1000.;\n}\n\nvec3 sceneNormal(vec3 p, int part) {\n    vec3 x0 = p - vec3(EPS, 0., 0.);\n    vec3 x1 = p + vec3(EPS, 0., 0.);\n    vec3 y0 = p - vec3(0., EPS, 0.);\n    vec3 y1 = p + vec3(0., EPS, 0.);\n    vec3 z0 = p - vec3(0., 0., EPS);\n    vec3 z1 = p + vec3(0., 0., EPS);\n    vec3 n = vec3(\n        sceneSDF(x1, part) - sceneSDF(x0, part),\n        sceneSDF(y1, part) - sceneSDF(y0, part),\n        sceneSDF(z1, part) - sceneSDF(z0, part)\n    );\n    return -n / mag(n);\n}\n\n\nvec4 raymarch(vec3 eye, int part) {\n    float sd = 1000.;\n    vec3 p = eye;\n    vec3 dir = vec3(0., 0., 1.);\n    for (int i = 0; i < 100; i++) {\n       float d = sceneSDF(p, part);\n       if (d > sd) break;\n       \n       sd = d;\n       if (d <= EPS) break;\n       p = p + sd * dir;\n    }\n    return vec4(p.xyz, sd);\n}\n\nvec3 hsv2rgb(vec3 hsv) {\n    float h = hsv.x;\n    float s = hsv.y;\n    float v = hsv.z;\n    float c = v * s;\n    float x = c * (1. - abs(mod(h/60., 2.) - 1.));\n    float m = v - c;\n    vec3 mv = vec3(m, m, m);\n    if (h < 60.) return vec3(c, x, 0.) + mv;\n    if (h < 120.) return vec3(x, c, 0.) + mv;\n    if (h < 180.) return vec3(0., c, x) + mv;\n    if (h < 240.) return vec3(0., x, c) + mv;\n    if (h < 300.) return vec3(x, 0., c) + mv;\n    return vec3(c, 0., x) + mv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - iResolution.xy/2.)/iResolution.xx;\n    \n    vec3 eye = vec3(uv.x, uv.y, -10.);\n    \n    \n    float value = 0.3;\n    vec4 bubbles = raymarch(eye, S_BUBBLES);\n    if (bubbles.w <= EPS) {\n        vec3 normal = sceneNormal(bubbles.xyz, S_BUBBLES);\n        vec3 light = vec3(sin(iTime), cos(iTime), -3.);\n        vec3 L = bubbles.xyz - light;\n        vec3 V = (eye - bubbles.xyz) / mag(eye - bubbles.xyz);\n        vec3 R = reflect(L, normal) / mag(L);\n        value = max(value, max(0., dot(normal, L)/mag(L)) + pow(max(0., dot(R, V)), 50.));\n    }\n    \n    vec3 col = hsv2rgb(vec3((uv.x + 0.5) * 360., 1., value));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}