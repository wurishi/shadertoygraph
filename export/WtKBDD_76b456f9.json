{"ver":"0.1","info":{"id":"WtKBDD","date":"1614353427","viewed":256,"name":"Cybercity Block","username":"YitingLiu","description":"creating a city block that responds to music ","likes":0,"published":3,"flags":64,"usePreview":0,"tags":["grid","rotate","star","galaxy","starfield","infinite","food","artofthecode","cereal","dinner"],"hasliked":0,"parentid":"WtGBDD","parentname":"Cereal for Dinner?"},"renderpass":[{"inputs":[{"id":"4lXSWr","filepath":"https://soundcloud.com/biiggpiigg/cuenta-lo","previewfilepath":"https://soundcloud.com/biiggpiigg/cuenta-lo","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// followed tutorials https://youtu.be/rvDo9LvfoVE\n//https://youtu.be/dhuigO4A7RY\n\n#define NUM_LAYERS 5.\n\nmat2 Rot(float a){\n    float s=sin(a), c=cos(a);\n    return mat2(c,-s,s,c);\n\n}\n//creating different shapes\n//responsive to audio \nfloat Star(vec2 uv, float flare){\n    float d = dot(uv.x,uv.y/2.);//distance to the center \n    float m = .005/d;//more light like than smoothstep(.1,.05,d);\n   // uv*=Rot(3.1415/4.);\n    float rays= max(0.,1.-abs(uv.x*uv.y*10.)); \n   //m =flare*rays;\n    \n \n   m=smoothstep(.025,.05,d/8.);\n  // m=1.-smoothstep(.08,.05,d);\n    \n    return m;\n\n\n}\n\nfloat Hash21(vec2 p){\n    p = fract(p*vec2(123.34,456.21));\n    p += dot(p, p+45.32);\n    return fract(p.x*p.y*p.x*p.y/atan(p.x,p.y));\n    \n\n}\n\nvec3 StarLayer(vec2 uv) {\n\tvec3 col = vec3(0);\n\t\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    // should add <=\n    for(int y=-1;y<=1;y++) {\n    \tfor(int x=-1;x<=1;x++) {\n            vec2 offs = vec2(x, y);\n            \n    \t\tfloat n = Hash21(id+offs); // random between 0 and 1\n            float size = fract(n*345.32);\n            \n    \t\tfloat star = Star(gv-offs-vec2(n, fract(n*34.))+.5, smoothstep(.6, .5, size)*.6);\n            \n            vec3 color = sin(vec3(.5, .1, .9)*fract(n*520.)*1238.2)*.5+.5;\n            color = color*vec3(1,.2,.8+size)+vec3(.2, .2, .1)*2.;\n            \n            star+= sin(iTime*2.+n*6.2831)*.5+1.;\n            col =star*size*color;\n        }\n    }\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy-.5*iResolution.xy)/iResolution.y;\n    \n    float t = iTime*.03;\n       float fft  = texelFetch( iChannel0, ivec2(0.5,0.2), 0 ).x; \n    \n     \n \n    vec3 col = vec3(0);\n\n    for (float i =0.; i <1.;i+=1./NUM_LAYERS){\n\n        float depth = fract(i+t);\n        //if mouse is engaged\n      float scale = mix (mix(10.,100.,length(uv-M)),.8,depth);\n        // if mouse is not engaged\n        \n       scale -= mix (mix(10.,50.,length(uv-1.-mix(-2.,2.,fft*max(uv.y,uv.x)))),.2,depth);\n\n       //scale *= mix (mix(1.,5.,length(min(uv.y,uv.x)*.5+.5+fft)),.5,depth);\n\n       // scale = mix (mix(10.,100.,length(uv-M)),.8,depth);\n        float fade = depth*(1.-smoothstep(.5, .8, depth));\n        col += StarLayer(tan(t)-uv*scale+i*20.*M)*fade-Hash21(uv);\n\n    }\n    \n     uv*=Rot(t);\n     uv.x+=max(t*.0001,.8);\n    uv.y-=max(t*.0001,.5);\n\n\n    \n        col = pow(col, vec3(.85));\t// gamma correction\n \n    \n    //if(gv.x>.48|| gv.y>.48) col.r=1.;//coloring the grid\n  \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}