{"ver":"0.1","info":{"id":"ddsGz2","date":"1666473192","viewed":117,"name":"artificial water reservoir","username":"jt","description":"A simple artificial water reservoir based on revolved [url=https://www.shadertoy.com/view/dss3R2]simple column[/url].","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["water","architecture","construction","building","hydraulic","artificial","reservoir","engineering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ddsGz2 artificial water reservoir by jt\n// based on https://www.shadertoy.com/view/dss3R2 simple column 2d sdf\n\n// tags: water, architecture, construction, building, hydraulic, artificial, reservoir, engineering\n\n// MIT License, as in https://www.shadertoy.com/terms\n\n/*\n\nCopyright (c) 2022 Jakob Thomsen\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\nfloat column(vec2 p, float s) // jt\n{\n    p = abs(p);\n    float t = 1.0 - s;\n    return s-length(vec2(min(p.x,s)-s,max(t,p.y)-t))+min(max(0.0,p.x-s), max(0.0,1.0-p.y-s));\n}\n\nfloat column(vec3 p, float s) // jt\n{\n    return column(vec2(length(p.xy), p.z), s);\n}\n\nfloat reservoir(vec3 p)\n{\n    p = mod(p+vec3(0,0,1.0),2.0)-1.0; // repeat\n    return column(p, 0.5)-0.1;\n}\n\nfloat map(vec3 p)\n{\n    return reservoir(p);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p ) \n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ) + \n                      k.yyx*map( p + k.yyx*h ) + \n                      k.yxy*map( p + k.yxy*h ) + \n                      k.xxx*map( p + k.xxx*h ) );\n}\n\n#define ITERATIONS 100\n\nfloat trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    float t;\n    int i;\n    for(t = t0, i = 0; t < t1 && i < ITERATIONS; i++)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return t1;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    float t;\n    int i;\n    for(t = mint, i = 0; t < maxt && i < ITERATIONS; i++)\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float ph = 1e20;\n    float t;\n    int i;\n    for(t = mint, i = 0; t < maxt && i < ITERATIONS; i++)\n    {\n        float h = map(ro + rd*t);\n        if(h < EPSILON)\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min(res, k*d/max(0.0, t-y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO(in vec3 pos, in vec3 nor)\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for(int i = 0; i < 5; i++)\n    {\n        float h = 0.01 + 0.12 * float(i)/4.0;\n        float d = map(pos + h * nor);\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if(occ > 0.35) break;\n    }\n    return clamp(1.0 - 3.0 * occ, 0.0, 1.0);\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x > 10.0) ? mx : 2.0 * pi * fract(iTime * 0.025);\n    my = (iMouse.y > 10.0) ? my : pi / 2.0;\n\n    mat2 Yaw = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, 0.0);\n    mat2 Pitch = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz = Pitch * ro.yz;\n    ro.xy = Yaw * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz = Pitch * rd.yz;\n    rd.xy = Yaw * rd.xy;\n\n    vec3 color = vec3(0);\n\n    float dist = trace(ro, rd, 0.0, DIST_MAX);\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        vec3 n = normal(dst);\n        //color = n*0.5+0.5;\n\n        vec3 lightdir = vec3(0.5*cos(iTime*0.1),0.5*sin(iTime*0.1),0)-dst;\n        float lightdist = length(lightdir);\n        lightdir /= lightdist;\n        vec3 ambient = vec3(0.0);\n        float brightness = max(dot(lightdir, n), 0.0) * (1.0/(lightdist*lightdist));\n        \n        //brightness *= shadow(dst,lightdir, 0.01, lightdist);\n        //brightness *= softshadow(dst,lightdir, 0.01, lightdist, 50.0);\n        // Optimization:\n        //  * trace shadow-ray only for surfaces facing the light-source\n        //  * offset starting-point by normal vector to avoid lots of small steps when light almost perpendicular to surface\n        brightness *= dot(lightdir, n) > 0.0 ? shadow(dst+n*0.01,lightdir, 0.0, lightdist) : 0.0;\n        //brightness *= dot(lightdir, n) > 0.0 ? softshadow(dst+n*0.01,lightdir, 0.0, lightdist, 50.0) : 0.0;\n        color = mix(vec3(0.25), vec3(1), step(-0.5, dst.z)); // quick hack to color ground differently\n        //color = (ambient * calcAO(dst, n) + brightness) * color;\n        //color = (ambient + calcAO(dst, n) * brightness) * color;\n\n        color *= brightness;\n    }\n\n    //color = mix(vec3(color), vec3(0.0), smoothstep(DIST_MAX - 2.0, DIST_MAX, dist));\n    color = sqrt(color); // approximate gamma\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}