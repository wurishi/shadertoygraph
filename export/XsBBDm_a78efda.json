{"ver":"0.1","info":{"id":"XsBBDm","date":"1500585900","viewed":566,"name":"Plasma Demonstration","username":"yupferris","description":"This is a shader-based demonstration for how the plasma in our 4k C64 demo, makeshift, works: http://www.pouet.net/prod.php?which=70972\n\nIt was made after-the-fact so there are a couple discrepancies, and it doesn't zoom, but it gets the point across :)","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["plasma","c64"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265;\n\nfloat quantize(float x, float scale)\n{\n    return floor(x * scale) / scale;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float xMoveTime = iTime * 0.5;\n    float yMoveTime = iTime * 0.43;\n    \n    float xFlowTime = iTime * 1.8;\n    float yFlowTime = iTime * 1.6;\n    \n    float scaleTime = iTime * 2.0;\n    \n    vec2 offset = vec2(sin(xMoveTime), sin(yMoveTime)) * 2.0 * PI;\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 6.0;\n    float scale = sin(scaleTime) * 0.45 + 0.55;\n    vec2 uvScale = vec2(scale);\n    vec2 uvWithOffset = offset + uv * uvScale;\n    \n    float xSinus = quantize(sin(uvWithOffset.x + sin(uvWithOffset.x + xFlowTime) * 0.5 * PI), 20.0) * 2.0 * PI;\n    float ySinus = quantize(sin(uvWithOffset.y + sin(uvWithOffset.y + yFlowTime) * 0.5 * PI), 20.0) * 2.0 * PI;\n    \n    float c = quantize(sin((xSinus + ySinus) * 2.0) * 0.5 + 0.5, 3.0);\n    \n\tfragColor = vec4(vec3(c),1.0);\n}","name":"Image","description":"","type":"image"}]}