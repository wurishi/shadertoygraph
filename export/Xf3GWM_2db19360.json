{"ver":"0.1","info":{"id":"Xf3GWM","date":"1711732504","viewed":11,"name":"LIFgraphique TP3","username":"Jackenouille","description":"lifgraphique tp3","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["lifgraphique"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2024.02.06\n// Eric Galin\n\nconst vec3 lightPosition = vec3(1.0, 10.0, 10.0);\n\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\nstruct Ray {\nvec3 ro; // Ray origin\nvec3 rd; // Direction\n};\n\n// Compute a point on the ray\n// ray : Ray\n// t   : depth\nvec3 Point(Ray ray,float t)\n{\n  return ray.ro+t*ray.rd;\n}\n\n// Compute the ray\n//     m : Mouse position\n//     p : Pixel\nRay CreateRay(vec2 m,vec2 p)\n{\n  float a=3.*3.14*m.x; \n  float le=3.5;\n  \n  // Origin\n  vec3 ro=vec3(35.,0.,10.)*Rz(a);\n  \n  // Target point\n  vec3 ta=vec3(0.,0.,3.);\n  \n  // Orthonormal frame\n  vec3 w=normalize(ta-ro);\n  vec3 u=normalize(cross(w,vec3(0.,0.,1.)));\n  vec3 v=normalize(cross(u,w));\n  vec3 rd=normalize(p.x*u+p.y*v+le*w);\n  return Ray(ro,rd);\n}\n\n// Primitives\n\n// Sphere\n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p,vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Plane\n// p : point\n// c : center of skeleton\n// n : Normal\nfloat Plane(vec3 p,vec3 c,vec3 n)\n{\n  return dot(p-c,n);\n}\n\n// Operators\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n  return min(a,b);\n}\n\n// Union, extension to four sub-trees\n// a,b,c : field function of left and right sub-trees\nfloat Union(float a,float b,float c,float d)\n{\n  return min(min(a,b),min(c,d));\n}\n\n// Difference\n// a,b : field function of left and right sub-trees\nfloat Difference(float a,float b)\n{\n  return max(a,-b);\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n\n  float v=  Sphere(p,vec3(3.,0.,6.),4.);\n\n  v=Union(v,\n    Sphere(p,vec3(0.,2.,3.),3.));\n  \n  float d=Union(\n      Sphere(p,vec3(5.,1.,5.),3.),\n    Sphere(p,vec3(-1.,1.,6.),3.),\n    Sphere(p,vec3(-1.,2.,2.),2.),\n    Sphere(p,vec3(1.,1.,6.),2.));\n  v=Difference(v,d);\n  \n  v=Union(v,\n    Plane(p,vec3(0.,0.,-1.),vec3(0.,0.0,1.0))\n  );\n  \n  return v;\n}\n\n// Analysis of the scalar field\n\nconst int Steps=200;// Number of steps\nconst float Epsilon=.01;// Marching epsilon\n\n// Object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  const float eps=.001;\n  vec3 n;\n  float v=object(p);\n  n.x=object(vec3(p.x+eps,p.y,p.z))-v;\n  n.y=object(vec3(p.x,p.y+eps,p.z))-v;\n  n.z=object(vec3(p.x,p.y,p.z+eps))-v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// ray : Ray \n// e : Maximum distance\n// h : hit\n// s : Number of steps\nfloat SphereTrace(Ray ray, float e, out bool h)\n{\n    h = false;\n    float t = 0.0;\n\n    for (int i = 0; i < Steps; i++)\n    {\n        vec3 p = Point(ray, t);\n        float v = object(p);\n        if (v < Epsilon) // We've hit an object\n        {\n            h = true;\n            break;\n        }\n        t += v;\n        if (t > e) // We've marched too far\n            break;\n    }\n    return t;\n}\n\n// Lighting\n\n// Background color\n// d : Ray direction\nvec3 Background(vec3 d)\n{\n  return mix(vec3(.45,.55,.99),vec3(.65,.69,.99),d.z*.5+.5);\n}\n\n\nvec3 Fibonacci(int i, int n)\n{\n    float theta = acos(1.0 - 2.0 * float(i) / float(n));\n    float phi = 2.0 * 3.14 * float(i) * 0.618033988749895;\n    float x = sin(theta) * cos(phi);\n    float y = sin(theta) * sin(phi);\n    float z = cos(theta);\n    return vec3(x, y, z);\n}\n\nvec3 Hemisphere(int i, int n)\n{\n    float theta = float(i) / float(n) * 3.14;\n    float phi = float(i) / float(n) * 2.0 * 3.14;\n    float x = sin(theta) * cos(phi);\n    float y = sin(theta) * sin(phi);\n    float z = cos(theta);\n    return vec3(x, y, z);\n}\n\nfloat Shadow(vec3 p, vec3 s)\n{\n    vec3 delta = normalize(s - p);\n    Ray shadowRay = Ray(p, delta);\n    bool shadowHit;\n    int shadowSteps;\n    float shadowT = SphereTrace(shadowRay, 100.0, shadowHit);\n    if (shadowHit && shadowT < length(s - p))\n    {\n        return 0.0; \n    }\n    else\n    {\n        return 1.0;\n    }\n}\n\nfloat SoftShadow(vec3 p, vec3 lightPos, int n)\n{\n    float totalShadow = 0.0;\n    for (int i = 0; i < n; i++)\n    {\n        vec3 si = Fibonacci(i, n);\n        totalShadow += Shadow(p, lightPos + si);\n    }\n    return totalShadow / float(n);\n}\n\nfloat Occlusion(vec3 p, int n)\n{\n    float l = 0.0;\n    int c = 0;\n    for (int i = 0; i < n; i++)\n    {\n        vec3 si = Hemisphere(i, n);\n        if (dot(si, normalize(p)) < 0.0)\n            continue;\n        vec3 samplePos = p + si * 0.1;\n        bool hit;\n        float shadowT = SphereTrace(Ray(samplePos, -si), 100.0, hit);\n        if (!hit)\n            l += 1.0;\n        c++;\n    }\n    if (c > 0)\n        l = l / float(c);\n    return l;\n}\n\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n    const vec3 lp = vec3(5., 10., 30.);\n\n    vec3 l = normalize(lightPosition - p);\n    vec3 ambient = .25 + .25 * Background(n);\n\n    float shadow = Occlusion(lp, 1);\n\n    vec3 diffuse = .35 * clamp(dot(n, l), 0., 1.) * vec3(1., 1., 1.);\n\n    vec3 r = reflect(e, n);\n    vec3 specular = .15 * pow(clamp(dot(r, l), 0., 1.), 35.) * vec3(1., 1., 1.);\n\n    vec3 groundPos = vec3(p.x, p.y, 0.);\n    float groundShadow = Occlusion(groundPos, 1);\n\n    shadow = max(shadow, groundShadow);\n\n    vec3 c = ambient + shadow * (diffuse + specular);\n    return c;\n}\n\n\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)  \n{\n  // Pixel\n  vec2 pixel=(-iResolution.xy+2.*pxy)/iResolution.y;\n\n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  Ray ray=CreateRay(m,pixel);\n  \n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n   // Trace ray\n  float t = SphereTrace(ray, 75.0, hit); // Correction here\n  // Shade background\n  vec3 rgb=Background(ray.rd);\n  \n  if(hit)\n  {\n    // Position\n    vec3 p=Point(ray,t);\n    \n    // Compute normal\n    vec3 n=ObjectNormal(p);\n    \n    // Shade object with light\n    rgb=Shade(p,n,ray.rd);\n  }\n    \n  color=vec4(rgb,1.);\n}\n","name":"Image","description":"","type":"image"}]}