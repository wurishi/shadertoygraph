{"ver":"0.1","info":{"id":"wd3BRl","date":"1684940431","viewed":74,"name":"ps_Sierpinski'sTriangle","username":"p_schneider","description":"This shader targets to achieve a mathematical render of Sierpinski's Triangle, a well known fractal\ndefined by a rule of geometrical substitution discovered by Waclaw Sierpinski.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","sierpinskistriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis documentation refers to the GitHub Repo: https://github.com/pedrotrschneider/shader-fractals\n\n(PT - Br) Documentação em português começa na linha 8.\n(En) English documentation starts on line 29.\n\n(PT - Br)\nDocumentação em português:\nEste é um shader voltado para a renderização matemática do Triângulo de Sierpinski, um conhecido fractal\ndefinido por uma regra de substituição geométrica descoberto por Waclaw Sierpinski.\n\nPara a construção desse shader foram utilizadas diversas fontes:\n- The Art of Code: https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\n- The Coding Train: https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw\n- Sebastian Lague: https://www.youtube.com/user/Cercopithecan\n\nEste shader está sob a licença MIT.\nCheque \"License.txt\" para detalhes sobre a licensa.\n\nInstruções para compilar:\n- Entre no site https://www.shadertoy.com\n- No canto superior direito, clique em \"new\". Você será redirecionado para uma página com uma caixa\nde texto onde voce pode escrever e uma tela.\n- Apague todo o conteúdo da caixa de texto.\n- Copie este código e cole-o diretamente na ciaxa de texto.\n- Se nada mudar, aperte \"alt\" + \"enter\" e o shader deve compilar.\n\n(En)\nEnglish documentation:\nThis shader targets to achieve a mathematical render of Sierpinski's Triangle, a well known fractal\ndefined by a rule of geometrical substitution discovered by Waclaw Sierpinski.\n\nFor the creation of this shader, several resources were used:\n- The Art of Code: https://www.youtube.com/channel/UCcAlTqd9zID6aNX3TzwxJXg\n- The Coding Train: https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw\n- Sebastian Lague: https://www.youtube.com/user/Cercopithecan\n\nThis shader in under the MIT license.\nRefer to \"LICENSE.txt\" for the details of the license.\n\nInstructions to compile:\n- Follow this url: https://www.shadertoy.com.\n- On the upper right portion of the screen, click on the \"new\" button. You will be redirected to a page\nwith a text box you can write on and a screen.\n- Delete all the text on the text box.\n- Copy this code and paste it on the text box.\n- If nothing happnes, press \"alt\" + \"enter\" and the shader should compile.\n*/\n\n#define PI 3.141592653589793238\n\n// Returns a normalized directoin based on an angle\nvec2 polarToCartesian (float angle) {\n  return vec2 (sin (angle), cos (angle));\n}\n\n// Reflects the UV based on a relfection line centered in the point p with a given angle\nvec2 ref (vec2 uv, vec2 p, float angle) {\n  vec2 dir = polarToCartesian (angle); // Direction of the reflection line\n  return uv - dir * min (dot (uv - p, dir), 0.0) * 2.0; // Returns the reflected uv coordinate\n}\n\n// Returns the signed distance of a point p to a equilateral triangle centered on the screen\nfloat sigendDistTriangle (vec2 p) {\n  const float sqrt3 = sqrt (3.0);\n  p.x = abs (p.x) - 1.0;\n  p.y = p.y + 1.0 / sqrt3;\n  if (p.x + sqrt3 * p.y > 0.0) {\n    p = vec2 (p.x - sqrt3 * p.y, -sqrt3 * p.x - p.y) / 2.0;\n  }\n  p.x -= clamp (p.x, -2.0, 0.0);\n  return -length (p) * sign (p.y);\n}\n\n// Folds the 2d space to generate the fractal and returns the distance to it\nfloat sierpinskiTriangle (inout vec2 uv, int recursionCount) {\n  float scale = 0.9; // Scale of the UV\n  uv *= scale; // Scales the UV to make the fractal fit on the screen\n  for (int i = 0; i < recursionCount; ++i) {\n    scale *= 2.0;\n    uv *= 2.0; // Scales down the fractal\n    uv.y -= 2.0 * sqrt (3.0) / 3.0; // Translates the fractal to the new Y position (sends it to the top)\n    uv.x = abs (uv.x); // Makes a reflection plane on the Y axis\n    uv = ref (uv, vec2 (1.0, -sqrt (3.0) / 3.0), (11.0 / 6.0) * PI); // Makes a reflection plane on the bototm right vertex of the triangle, with an angle of 330°\n  }\n\n  float d = sigendDistTriangle (uv) / scale; // Calculates de tistance to an equilateral triangle centered on the center of the screen\n  uv /= scale; // Resets the scale of the uv\n  return d; // Returns the distance to the triangle\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord) {\n  vec2 uv = 2.0 * (fragCoord - 0.5 * iResolution.xy) / iResolution.y; // Normalized pixel coordinates (from 0 to 1)\n  vec2 uv2 = uv; // Creates a copy of the uvs for coloring\n\n  vec3 col = vec3 (0.0); // Color to be drawn on the screen\n\n  uv += vec2 (0.0, 0.30); // Offsets the uvs to center the fractal in the middle of the screen\n\n  int recursionCount = 0 + int (mod (iTime, 16.0) * 0.5); // Number of iterations of the fractal (increases with time)\n\n  float d = sierpinskiTriangle (uv, recursionCount); // Distance to the fractal\n\n  // Coloring the fractal\n  float lineSmoothness = 3.0 / iResolution.y; // Smoothness of the line (higher number = smoother, lower numbers = sharper)\n  float offset = 0.5; // Offset for the blending of the colors in the middle\n  // Red channel\n  float r = smoothstep (lineSmoothness, 0.0, d) * 0.5 * (uv2.x * 0.5 + 0.5 + offset); // Generates a gradient of red on the positive x axis\n  col.r += r;\n  // Blue channel\n  float b = smoothstep (lineSmoothness, 0.0, d) * 0.5 * (uv2.y * 0.5 + 0.5 + offset); // Generates a gradient of blue on the positive y axis\n  col.b += b;\n  // Green channel\n  float g = smoothstep (lineSmoothness, 0.0, d) * 0.5 * (-uv2.x * 0.5 + 0.5 + offset); // Generates a gradient of green on the negative x axis\n  col.g += g;\n\n  // Drawing the axis\n  lineSmoothness = 2.0 / iResolution.y; // Descreases line smoothness for sharper / thinner lines\n  col.rb += smoothstep (lineSmoothness, 0.0, length (uv.y)); // x axis\n  col.bg += smoothstep (lineSmoothness, 0.0, length (uv.x)); // y axis\n\n  fragColor = vec4 (col.rgb, 1.0); // Outputs the result color to the screen\n}","name":"Image","description":"","type":"image"}]}