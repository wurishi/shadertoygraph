{"ver":"0.1","info":{"id":"4lKBWD","date":"1542719290","viewed":414,"name":"Fire simulation","username":"OskarSwierad","description":"Simulation. Click to paint fire.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["simulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BLUR AND COMPRESS RANGE\n\nconst vec3 rangeMapping = vec3(\n    1.0 / 256.0, \n    1.0,\n    1.0 / FUEL_DEFAULT\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 colorAvg = vec3(0.0);\n    float weightSum = 0.0;\n    \n    for (int i = 0; i < SAMPLES_NUM; ++i)\n    {\n        vec2 neighborCoords = (vec2(offsets[i]) + fragCoord) / iResolution.xy;\n        vec3 color = texture(iChannel0, neighborCoords).xyz * rangeMapping * weights[i];\n        colorAvg += clamp(color, vec3(0.0), vec3(1.0));\n        weightSum += weights[i];\n    }\n    colorAvg /= weightSum;\n    \n    fragColor = vec4(colorAvg, 1.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// CONSTANT CELL PARAMS BUFFER\n\n// X: Conductivity, Y: Ignition temperature, Z: Fuel maximum, W: \"is usable\"\nvec4 materialWoodWet = vec4(0.1,  400.0, FUEL_DEFAULT * 1.3, 1.0);\nvec4 materialWoodDry = vec4(0.15, 250.0, FUEL_DEFAULT,       1.0);\nvec4 materialWater = vec4(0.05, 25000.0, 0.0, 1.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 screenUV = fragCoord / iResolution.xy;\n    vec2 texUV = screenUV * vec2(0.8, 0.5);\n    \n    // float screenBorder = (\n    //     remap01Clamped(abs(screenUV.x - 0.5), 0.451, 0.45) *\n    //     remap01Clamped(abs(screenUV.y - 0.5), 0.451, 0.45)\n    // );\n    \n    float usableCellsMask = remap01Clamped(texture(iChannel1, texUV).x, 0.52, 0.521);\n    // usableCellsMask *= screenBorder;\n    \n    float woodTypeMask = remap01Clamped(texture(iChannel0, texUV).x, 0.25, 0.5);    \n    fragColor = mix(materialWoodWet, materialWoodDry, woodTypeMask);\n    \n    fragColor.xzw *= usableCellsMask;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const float FUEL_DEFAULT = 350.0;\nconst float FIRE_TEMPERATURE_RANGE = 2000.0f;  // Celsius degrees between ignition point and maximum fire\nconst float TEMPERATURE_MAX = 20000.0;  // Celsius degrees\nconst float CELL_SEPARATION = 0.8; // meters\nconst float SURFACE_RATIO_DEFAULT = 0.5;\nconst float AIR_CONDUCTIVITY = 0.01;\n\nconst float DELTA_TIME = 4.0 * 0.01667; // const for now\nconst float SPREAD_RATE = 3000.0;\nconst float SPREAD_RATE_TEMPORAL = DELTA_TIME * SPREAD_RATE;\n// 1900.0 to convert joules to C.\nconst float SPREAD_RATE_SPATIAL = SPREAD_RATE_TEMPORAL * CELL_SEPARATION / 1900.0;\nconst float FUEL_BURN_RATE = SPREAD_RATE;\nconst float FUEL_EFFICIENCY = 50.0;\n\n#define SAMPLES_NUM 20\nconst float weights[SAMPLES_NUM] = float[SAMPLES_NUM](\n    // 0.000987193 - too low\n    0.0719906f,\n    0.161825f,\n    0.072221f,\n    // 0.000902909 - too low\n    0.0715662f,\n    0.518155f,\n    0.776459f,\n    0.519043f,\n    0.0721524f,\n    //\n    0.162855f,\n    0.775402f,\n    // 0.999924 - center\n    0.776805f,\n    0.161792f,\n    //\n    0.0716316f,\n    0.517786f,\n    0.776439f,\n    0.519393f,\n    0.0718457f,\n    // 0.00103237 - too low\n    0.0718567f,\n    0.163294f,\n    0.0721063f\n    // 0.000892614 - too low\n);\n\nconst ivec2 offsets[SAMPLES_NUM] = ivec2[SAMPLES_NUM](\n    // ivec2(-2,  2),\n    ivec2(-1,  2),\n    ivec2( 0,  2),\n    ivec2( 1,  2),\n    // ivec2( 2,  2),\n    ivec2(-2,  1),\n    ivec2(-1,  1),\n    ivec2( 0,  1),\n    ivec2( 1,  1),\n    ivec2( 2,  1),\n    //\n    ivec2(-2,  0),\n    ivec2(-1,  0),\n    // ivec2( 0,  0),\n    ivec2( 1,  0),\n    ivec2( 2,  0),\n    // \n    ivec2(-2, -1),\n    ivec2(-1, -1),\n    ivec2( 0, -1),\n    ivec2( 1, -1),\n    ivec2( 2, -1),\n    // ivec2(-2, -2),\n    ivec2(-1, -2),\n    ivec2( 0, -2),\n    ivec2( 1, -2)\n    // ivec2( 2, -2)\n);\n\nfloat remap01Clamped(float val, float rangeMin, float rangeMax)\n{\n    return clamp((val - rangeMin) / (rangeMax - rangeMin), 0.0, 1.0);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// SIMULATION LOOP AND BUFFER\n\n#define getTemperature(status_v4) status_v4.x\n#define getFireIntensity(status_v4) status_v4.y\n#define getFuel(status_v4) status_v4.z\n#define getConductivity(params_v4) params_v4.x\n#define getIgnitionTemperature(params_v4) params_v4.y\n#define isCellUsable(params_v4) params_v4.w\n\nfloat calculateFireIntensity(float cellTemperature, float cellIgnitionPoint)\n{\n    return remap01Clamped(\n        cellTemperature,\n        cellIgnitionPoint,\n        cellIgnitionPoint + FIRE_TEMPERATURE_RANGE\n    );\n}\n\n// Returns temperature\nfloat igniteAroundPoint(in vec2 coords, in vec2 startPos)\n{\n    const float ignitionRadius = 4.0;\n    \n    float ignitionMask = remap01Clamped(\n        distance(coords, startPos),\n        ignitionRadius,\n        ignitionRadius * 0.8\n    );\n    ignitionMask *= isCellUsable(texture(iChannel1, coords));\n\n    return 20000.0 * ignitionMask * iTimeDelta;\n}\n\nvec4 simulate(vec2 coords)\n{   \n    // cellStatus: X: temperature,  Y: fire (visualization only), Z: fuel\n    // cellParams: X: Conductivity, Y: Ignition temperature, Z: Fuel maximum, W: \"is usable\"\n    \n    vec4 cellStatus = texture(iChannel0, coords);\n    vec4 cellParams = texture(iChannel1, coords);\n    \n    if (isCellUsable(cellParams) <= 0.0f)\n    {\n        return cellStatus;  // Optimization\n    }\n    \n    float cellSurfaceRatio = mix(0.0, SURFACE_RATIO_DEFAULT, isCellUsable(cellParams));\n    \n    // Transfer temperature between neighbors and self\n    \n    float heatTransferred = 0.0;\n\tfor (int i = 0; i < SAMPLES_NUM; ++i)\n    {\n        vec2 neighborCoords = (vec2(offsets[i]) / iResolution.xy) + coords;\n        \n        vec4 neighborStatus = texture(iChannel0, neighborCoords);\n        vec4 neighborParams = texture(iChannel1, neighborCoords);\n        float neighborSurfaceRatio = mix(0.0, SURFACE_RATIO_DEFAULT, isCellUsable(cellParams));\n        \n        float temperatureDiff = getTemperature(neighborStatus) - getTemperature(cellStatus);\n        \n        heatTransferred += (\n            getConductivity(cellParams) *\n            cellSurfaceRatio *\n            neighborSurfaceRatio *\n            temperatureDiff *\n            SPREAD_RATE_SPATIAL *\n            weights[i]\n        );\n    }\n    \n    // Dissipate heat to the air\n    \n    float airRatio = 1.0 - cellSurfaceRatio;\n    float heatLost = airRatio * AIR_CONDUCTIVITY * float(SAMPLES_NUM) * getTemperature(cellStatus) * SPREAD_RATE_SPATIAL;\n    heatTransferred -= heatLost;\n    \n    float newTemperature = clamp(cellStatus.x + heatTransferred, 0.0, TEMPERATURE_MAX);\n    \n    float cellFuel = getFuel(cellStatus);\n    float cellFireIntensity = calculateFireIntensity(\n        newTemperature,\n        getIgnitionTemperature(cellParams)\n    );\n    \n    if (cellFuel <= 0.0 || cellFireIntensity <= 0.0)\n    {\n        return vec4(newTemperature, cellFireIntensity, cellStatus.zw);\n    }\n    \n    // Burn fuel, converting it to energy\n    \n    float fuelUsed = min(\n        cellFuel,  // Never use more fuel than there is\n        cellFireIntensity * DELTA_TIME * FUEL_BURN_RATE\n    );\n    cellFuel = max(0.0, cellFuel - fuelUsed);\n    newTemperature += fuelUsed * FUEL_EFFICIENCY * CELL_SEPARATION;\n    \n    vec4 newCellStatus = vec4(\n        clamp(newTemperature, 0.0, TEMPERATURE_MAX),\n        cellFireIntensity,\n        cellFuel,\n        cellStatus.w\n    );\n    \n    return newCellStatus;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenUV = fragCoord / iResolution.xy;\n    vec2 texUV = screenUV * vec2(0.8, 0.5);\n    \n    if (iFrame < 60)  // Not ideal, I know: Wait for textures to load\n    {\n        // Initialize (restart)\n        // X: temperature, Y: fire (visualization only), Z: fuel\n        fragColor = vec4(\n            0.0,\n            0.0,\n            texture(iChannel1, screenUV).z,\n            1.0\n        );\n        \n        const float temperatureInitial = 10.0;\n        vec2 startPos = vec2(140.0, 128.0);\n        fragColor.x = min(\n            fragColor.x + (temperatureInitial * igniteAroundPoint(fragCoord, startPos)),\n            TEMPERATURE_MAX\n        );\n    }\n    else\n    {\n    \tfragColor = simulate(screenUV);\n        \n        bool mousePressed = iMouse.z > 0.0;\n        if (mousePressed)\n        {\n            vec2 startPos = iMouse.xy + vec2(0.5, 0.5);\n            fragColor.x = min(\n            \tfragColor.x + igniteAroundPoint(fragCoord, startPos),\n            \tTEMPERATURE_MAX\n        \t);\n        }\n    }\n}\n","name":"Buffer B","description":"","type":"buffer"}]}