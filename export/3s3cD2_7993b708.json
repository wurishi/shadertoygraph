{"ver":"0.1","info":{"id":"3s3cD2","date":"1603968028","viewed":229,"name":"Soft shadows 2D test","username":"athibaul","description":"Testing soft shadow methods in 2D clearly reveals the artifacts of the method used. Left is iq's method (for which the shadows are too dark), right is mine. Both exhibit the same kind of problems inherent to raymarching.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf","softshadows"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool IQ_SHADOWS;\n\n\nfloat map(vec2 p)\n{\n    float d = 100.;\n    for(float i=0.; i<20.; i++)\n    {\n        vec3 c = texelFetch(iChannel0, ivec2(mod(i,256.),1.+i/256.), 0).xyz*2.-1.;\n        float di = length(p-c.xy) - 0.1*sqrt(c.z);\n        d = min(d, di);\n    }\n    return d;\n}\n\n\nfloat softShadow(vec2 p, vec2 sun, float softness, float tmax)\n{\n    float shadow = 1.0;\n    float d, t=0.0;\n    float w0 = 0.0; // Unused\n    for(int i=0; i<50; i++)\n    {\n        d = map(p+t*sun);\n        float w = t*softness + w0;\n        if(IQ_SHADOWS)\n            shadow = min(shadow, clamp((d+w0)/w, 0., 1.));\n        else\n        \tshadow = min(shadow, smoothstep(-w,w,d+w0));\n       \tt += max(d,0.02);\n        if(shadow < 0.001 || t > tmax ) break;\n    }\n    return shadow;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    IQ_SHADOWS = fragCoord.x < iResolution.x*.5;\n    \n    float d = map(p);\n    float v = smoothstep(-0.01,0.01,d);\n    vec3 col = vec3(v);\n    \n    float th = iTime;\n    //vec2 sun = normalize(vec2(cos(th),sin(th)));\n    vec2 ligPos = sin(iTime*vec2(1.,1.6));\n    vec2 ligDir = normalize(ligPos-p);\n    float ligDist = length(ligPos-p)-0.1;\n    col *= softShadow(p, ligDir, 0.2, ligDist) * 0.5/(ligDist*ligDist);\n\n    col = 1.-exp(-col);\n    col = mix(col, vec3(1,0,0), smoothstep(2.,0.,abs(fragCoord.x - iResolution.x*.5)));\n    col = sqrt(col);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}