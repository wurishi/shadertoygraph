{"ver":"0.1","info":{"id":"X3c3Dn","date":"1717606547","viewed":88,"name":"canny edge detection shader","username":"sp3ctre","description":"edge detection shader","likes":2,"published":1,"flags":32,"usePreview":1,"tags":["cannyedgedetection"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lowThreshhold = 0.4;\nfloat highThreshhold = 0.7;\n\nfloat threshhold(vec2 uv, vec2 tileSize){\n    if (texture(iChannel0,uv).x<lowThreshhold){ \n        return 1.;\n    }\n    for (float i=-1.; i<2.; i++){\n        for (float j=-1.; j<2.; j++){\n            if (texture(iChannel0,uv + vec2(i*tileSize.x, j*tileSize.y)).x > highThreshhold){\n                return 0.;\n            }\n        }\n    }\n    return 0.;\n}\n//dither parameters\nfloat ditherOfset = 0.;\nfloat ditherScale = 1.;\nfloat ditherContrast = 3.9;\n//image postprocessing\nfloat imageContrast = 0.9;\nfloat imageBrightness = 0.1;\nfloat gamma = 1.2;\n\nfloat luma(vec4 col){\n    return dot(col.xyz,vec3(0.299,0.587,0.114));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //double threshholding\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 tileSize = 1./iResolution.xy;\n    \n    float value = threshhold(uv,tileSize);\n    \n    //stippling\n    float ditherLuma = luma(texture(iChannel2,uv*ditherScale));\n    ditherLuma = (ditherLuma-0.5)*ditherContrast + 0.5;\n    \n    float imageLuma = luma(texture(iChannel3,uv));\n    imageLuma = (imageLuma -0.5)*imageContrast +0.5 +imageBrightness;\n    imageLuma = pow(imageLuma,gamma);\n    \n    if (imageLuma < ditherLuma + ditherOfset) value = 0.;\n    \n    //coloring\n    vec4 inkCol = vec4(0.1,0.02,0.16,1.);\n    vec4 paperCol = vec4(0.92,0.91,0.88,1.);\n    paperCol *= (luma(texture(iChannel1,uv*0.3)) -0.5)*0.2 + 1. ;\n    \n    fragColor = mix(inkCol, paperCol, value);\n//   fragColor = value*vec4(1.,1.,1.,1.);\n//    fragColor = paperCol;\n//    fragColor = texture(iChannel2,uv);\n//    fragColor = texture(iChannel0,uv).x*vec4(1.,1.,1.,1.);\n//    fragColor = texture(iChannel3,uv);\n}\n\n    ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 tileSize = 1./iResolution.xy;\n    \n    //convolution\n    vec4 xdiff = texture(iChannel0, uv + vec2(tileSize.x,-tileSize.y)) +\n        texture(iChannel0, uv + vec2(tileSize.x, 0.)) +\n        texture(iChannel0, uv + vec2(tileSize.x, 0.)) +\n        texture(iChannel0, uv + vec2(tileSize.x,tileSize.y)) -\n        texture(iChannel0, uv + vec2(-tileSize.x,-tileSize.y)) -\n        texture(iChannel0, uv + vec2(-tileSize.x,0.)) -\n        texture(iChannel0, uv + vec2(-tileSize.x,0.)) -\n        texture(iChannel0, uv + vec2(-tileSize.x,tileSize.y));\n        \n    vec4 ydiff = texture(iChannel0, uv + vec2(-tileSize.x, tileSize.y)) +\n        texture(iChannel0, uv + vec2(0., tileSize.y)) +\n        texture(iChannel0, uv + vec2(0., tileSize.y)) +\n        texture(iChannel0, uv + vec2(tileSize.x, tileSize.y)) -\n        texture(iChannel0, uv + vec2(-tileSize.x, -tileSize.y)) -\n        texture(iChannel0, uv + vec2(0., -tileSize.y)) -\n        texture(iChannel0, uv + vec2(0., -tileSize.y)) -\n        texture(iChannel0, uv + vec2(tileSize.x, -tileSize.y));\n        \n    float intensityGradient = pow(dot(ydiff,ydiff) + dot(xdiff,xdiff), 0.5);\n    \n    \n    float value = intensityGradient;\n    \n    fragColor = value*vec4(1.,0.,0.,0.);\n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float relThreshhold = 0.15;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 tileSize = 1./iResolution.xy;\n    \n    float value = texture(iChannel0,uv).x;\n    //magnitude threshholding\n    if (texture(iChannel0, uv).x <texture(iChannel0,uv + vec2(-tileSize.x, 0.)).x -relThreshhold){value = 0.;}\n    if (texture(iChannel0, uv).x <texture(iChannel0,uv + vec2(tileSize.x, 0.)).x -relThreshhold){value = 0.;}\n    if (texture(iChannel0, uv).x <texture(iChannel0,uv + vec2(0., -tileSize.x)).x -relThreshhold){value = 0.;}\n    if (texture(iChannel0, uv).x <texture(iChannel0,uv + vec2(0., tileSize.x)).x -relThreshhold){value = 0.;}\n    \n    \n    fragColor = value*vec4(1.,0.,0.,0.);\n    \n}\n\n    ","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Horizontal\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texelSize = 1. / iResolution.xy;\n    \n    float sigma = 1.;\n    int kernelSize = 2 * int(floor(4. * sigma + .5)) + 1;\n    \n    float weightSum = 0.;\n    fragColor *= 0.;\n    for (int i = 0; i < kernelSize; i++)\n    {\n        float x = float(i) - (float(kernelSize) * .5);\n        float weight = exp(-(x * x) / (2.0 * sigma * sigma));\n        weightSum += weight;\n        \n        fragColor += texture(iChannel0, uv + vec2(x * texelSize.x, 0.)) * weight;\n    }\n    fragColor /= weightSum;\n    \n    fragColor = vec4(fragColor.rgb, sigma);\n//    fragColor = texture(iChannel0,uv);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Vertical\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 texelSize = 1. / iResolution.xy;\n    \n    float sigma = texture(iChannel0,uv).w;\n    int kernelSize = 2 * int(floor(4. * sigma + .5)) + 1;\n    \n    float weightSum = 0.;\n    fragColor *= 0.;\n    for (int i = 0; i < kernelSize; i++)\n    {\n        float x = float(i) - (float(kernelSize) * .5);\n        float weight = exp(-(x * x) / (2.0 * sigma * sigma));\n        weightSum += weight;\n        \n        fragColor += texture(iChannel0, uv + vec2(0., x * texelSize.y)) * weight;\n    }\n    fragColor /= weightSum;\n    \n    fragColor = vec4(fragColor.rgb, 1.0);\n    \n//    fragColor = texture(iChannel0,uv);\n}","name":"Buffer D","description":"","type":"buffer"}]}