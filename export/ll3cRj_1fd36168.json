{"ver":"0.1","info":{"id":"ll3cRj","date":"1533153947","viewed":110,"name":"3D test music reactive","username":"La_Blazer","description":"My first 3d shader test **perfection**","likes":0,"published":1,"flags":64,"usePreview":0,"tags":["3d","music","audio"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"ldjSDG","filepath":"https://soundcloud.com/tmabird/everybodys-circulation","previewfilepath":"https://soundcloud.com/tmabird/everybodys-circulation","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float DistanceToPoint(vec3 ro, vec3 rd, vec3 point){\n\treturn length(cross(point-ro, rd))/length(rd);\n}\n\nfloat DrawPoint(vec3 ro, vec3 rd, vec3 point){\n\treturn smoothstep(.1, .099, DistanceToPoint(ro, rd, point));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy; // 0 <> 1\n    uv -= 0.5; // -.5 <> .5\n\tuv.x *= iResolution.x/iResolution.y; // Account for aspect ratio\n    \n    // Ray origin and distance\n    vec3 ro = vec3(0.0, 0.0, -2.);\n    vec3 rd = vec3(uv.x, uv.y, 0) - ro;\n    \n    float time = iTime;\n    // Get music amplitude from the texture channel\n    float amplitude = length(texture(iChannel0, vec2(.05))) * 8.0;\n    vec3 distance = vec3(-cos(time), 0, 12.0 - amplitude + sin(time));\n    \n    // Draw cube\n    float cube = 0.;\n    cube += DrawPoint(ro, rd, vec3(-.5, -.5, -.5) + distance);\n    cube += DrawPoint(ro, rd, vec3(-.5, -.5, .5) + distance);\n    cube += DrawPoint(ro, rd, vec3(-.5, .5, -.5) + distance);\n    cube += DrawPoint(ro, rd, vec3(-.5, .5, .5) + distance);\n    cube += DrawPoint(ro, rd, vec3(.5, -.5, -.5) + distance);\n    cube += DrawPoint(ro, rd, vec3(.5, -.5, .5) + distance);\n    cube += DrawPoint(ro, rd, vec3(.5, .5, -.5) + distance);\n    cube += DrawPoint(ro, rd, vec3(.5, .5, .5) + distance);\n    cube += DrawPoint(ro, rd, vec3(0., 0., 0.) + distance);\n    \n    //time += amplitude;\n    \n    vec3 c;\n    if(cube == 0.0){\n    \tc.xyz = vec3(cos(time*2.0));\n    }else{\n        c = vec3(cube);\n        c.x *= sin(time + 2.09);\n        c.y *= sin(time + 4.18);\n        c.z *= sin(time + 6.28);\n    }\n    \n    \n    \n    fragColor = vec4(c, 1);\n}","name":"Image","description":"","type":"image"}]}