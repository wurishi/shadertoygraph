{"ver":"0.1","info":{"id":"3lfyR4","date":"1592138216","viewed":284,"name":"BoS - Shaping Functions Exercise","username":"zeta","description":"https://thebookofshaders.com/05/kynd.png\n\nTODO: plot all functions side by side, as in the original png.","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["bookofshaders"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265359;\n\n// from https://iquilezles.org/articles/functions\nfloat cubicPulse(float c, float w, float x)\n{\n    x = abs(x - c);\n    if(x > w) return 0.0;\n    x /= w;\n    return 1.0 - x*x*(3.0-2.0*x);\n}\n\n\nfloat plot(vec2 uv, float pct)\n{\n    return cubicPulse(pct, 0.01, uv.y);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float[] a = float[] (0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5);\n    //float[] a = float[] (1.0);\n    vec3 color = vec3(0.);\n\n    for (int i = 0; i < a.length(); i++) {;\n        float shape = 1.0 - pow(abs(uv.x), a[i]);\n        vec3 plot_color = vec3(0.0, 1.0, 0.0) * float(i+1) / float(a.length());\n        color = mix(color, plot_color, plot(uv, shape));\n    }\n\n    for (int i = 0; i < a.length(); i++) {\n        float shape = pow(cos(PI * uv.x / 2.0), a[i]);\n        vec3 plot_color = vec3(1.0, 0.0, 0.0) * float(i+1) / float(a.length());;\n        color = mix(color, plot_color, plot(uv, shape));\n    }\n\n    for (int i = 0; i < a.length(); i++) {\n        float shape = 1.0 - pow(abs(sin(PI * uv.x / 2.0)), a[i]);\n        vec3 plot_color = vec3(0.0, 0.0, 1.0) * float(i+1) / float(a.length());;\n        color = mix(color, plot_color, plot(uv, shape));\n    }\n    \n    for (int i = 0; i < a.length(); i++) {\n        // This is the same as pow(1.0 - abs(uv.x), why min with cos is needed?\n        float shape = pow(min(cos(PI * uv.x / 2.0), 1.0 - abs(uv.x)), a[i]);\n        vec3 plot_color = vec3(1.0, 1.0, 0.0) * float(i+1) / float(a.length());;\n        color = mix(color, plot_color, plot(uv, shape));\n    }\n\n    for (int i = 0; i < a.length(); i++) {\n        float shape = 1.0 - pow(max(0.0, abs(uv.x) * 2.0 - 1.0), a[i]);\n        vec3 plot_color = vec3(0.0, 1.0, 1.0) * float(i+1) / float(a.length());;\n        color = mix(color, plot_color, plot(uv, shape));\n    }\n\n    fragColor = vec4(color, 1.);\n}","name":"Image","description":"","type":"image"}]}