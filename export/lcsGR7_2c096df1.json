{"ver":"0.1","info":{"id":"lcsGR7","date":"1702917902","viewed":116,"name":"box in space","username":"nayk","description":"space, box,rotate, colorful, copypast","likes":3,"published":1,"flags":1,"usePreview":0,"tags":["colorful","rotate","space","stars","box"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/mtyfDK  https://www.shadertoy.com/view/DtVBRD /*original https://www.shadertoy.com/view/lslyRn,  original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR and other*/\n/*and others*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define NUM_EXPLOSIONS 5.\n#define NUM_PARTICLES 75.\n\nvec2 Hash12(float t){\n\nfloat x = fract(sin(t*674.3)*453.2);\nfloat y = fract(sin((t+x)*714.3)*263.2);\n\nreturn vec2(x, y);\n}\n\nvec2 Hash12_Polar(float t){\n\nfloat p_Angle = fract(sin(t*674.3)*453.2)*6.2832;\nfloat p_Dist = fract(sin((t+p_Angle)*714.3)*263.2);\n\nreturn vec2(sin(p_Angle), cos(p_Angle))*p_Dist;\n}\n\nfloat Explosion(vec2 uv, float t){\n \n float sparks = 0.;\n \n    for(float i = 0.; i<NUM_PARTICLES; i++){\n   \n        vec2 dir = Hash12_Polar(i+1.)*.5;\n        float dist = length(uv-dir*t);\n        float brightness2 = mix(.0005, .0005, smoothstep(.05, 0., t));\n       \n        brightness2 *= sin(t*20.+i)*.5+.5;\n        brightness2*= smoothstep(1., .6, t);\n        sparks += brightness2/dist;\n    }\n    return sparks;\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam;\n            p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));// the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.1-dm; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.05,1.);\n}\nfloat nice_funny_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\nmat2 rotationMatrix(float angle)\n{\nangle *= 3.14 / 180.0;\n    float s=sin(angle), c=cos(angle);\n    return mat2( c, s, -s, c );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\n    vec2 uv2=fragCoord.xy/iResolution.xy-.5;\nuv.y*=iResolution.y/iResolution.x;\nvec3 dir=vec3(uv*zoom,1.);\nfloat time=iTime*speed+.25;\n  vec2 m = (.5 * iResolution.xy - iMouse.xy) / iResolution.x * 6.28;\n    vec3 e = vec3(cos(m.x) * cos(m.y), sin(m.x) * cos(m.y), sin(m.y));\n    vec3 u = normalize(vec3(e.y, -e.x, 0));\n    vec3 v = cross(e, u);\n   \n\n    vec3 d2 = e + uv2.x * u + uv2.y * v;\n    vec3 a = (e + .1) / d2;\n    vec3 b = (e - .1) / d2;\n    float mi = max(max(min(a.x, b.x), min(a.y, b.y)), min(a.z, b.z));\n    float ma = min(min(max(a.x, b.x), max(a.y, b.y)), max(a.z, b.z));\n    float t = mi < ma ? mi : 10.;\n    vec3 i2 = e - d2 * t;\n    vec3 c = (step(-.099, i2) + step(.099, i2) - 1.) * d2;\n vec3 col = vec3(0);\n   \n    for(float i = 0.; i<NUM_EXPLOSIONS; i++){\n    float t =iTime+i/NUM_EXPLOSIONS;\n    float ft = floor(t);\n        vec3 color = sin(4.*vec3(.34,.54,.43)*ft)*.25+.75;\n\n       \n        vec2 offset = Hash12(i+1.+ft)-.5;\n        offset*=vec2(1.77, 1.);\n        //col+=.0004/length(uv-offset);\n       \n         col += Explosion(uv-offset, fract(t))*color;\n       }\n   \n   col*=2.;\n     vec4 O =fragColor;\n    vec2 C =fragCoord;\n  O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(3),H(g*2.1),sin(2.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n       \n        p.z+=-iTime*10.15;\n        a=10.;\n        p=mod(p-a,a*2.)-a;\n        s=5.;\n       \n        float t = iTime * .05 + ((.25 + .05 * sin(iTime * .01))/(length(uv.xy) + 1.777)) * 0.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n \n        for(int i=0;i++<8;){\n            p=.23-abs(p);\n            ;\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n      p.y<p.z?p=p.xyz:p;\n       p.xz*=m;\n         p.xz*=m;\n            s*=e=1.7+sin(-iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    10.+cos(iTime*.3+1.5*sin(iTime*.3))*2.,\n                    110,\n                    50.+cos(iTime*.5)*5.\n                 )+col;\n         }\n         g+=e=length(p.yz)/s;\n         \n       \n    }\nvec3 from=vec3(1.,.5,0.5)*c*O.xyz;\nfrom+=vec3(time*2.,time,-2.);\n\n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5);\n   \n    // anim between 0.9 - 1.1\n    float anim = cos(iTime * 2.0) * 0.1 + 1.0;    \nmainVR(fragColor, fragCoord, from, dir);\n     fragColor*= vec4(nice_funny_star(uv,anim) * vec3(0.55,0.5,0.55)*1., 1.0);\n     fragColor*=vec4(col,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}