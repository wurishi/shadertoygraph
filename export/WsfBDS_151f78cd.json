{"ver":"0.1","info":{"id":"WsfBDS","date":"1588931652","viewed":76,"name":"projective spherical raymarching","username":"sasha_sortai","description":"similar to https://www.shadertoy.com/view/WsfBzs but on a different representation of the sphere","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","spherical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 onsph(vec2);\nvec2 onpln(vec3);\nfloat dist(vec3, vec3);\nfloat dist(vec2, vec2);\nfloat DE(vec2);\n\nconst float PI = (asin(1.)*2.);\n\n#define NITER 100\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord - .5*iResolution.xy);\n    float mult = 15./min(iResolution.x, iResolution.y);\n    p *= mult;\n    //vec4 mouse = (texture(iChannel0, vec2(0.))-vec4(.5*iResolution.xy,.5*iResolution.xy))*mult;\n    vec3 col = vec3(DE(p));\n    \n    //if (min(distance(p,mouse.xy),distance(p,mouse.zw))<.02) col = mix(vec3(.1),vec3(0,1,0)*.7,col);\n    \n    //vec3 cam = onsph(mouse.zw); vec3 tar = onsph(mouse.xy);\n    vec2 camp = vec2(-1,1)*cos(iTime/6.6);\n    vec3 cam = onsph(camp); vec3 tar = onsph(camp+.01*vec2(cos(iTime*.2),sin(iTime*.2)));\n    vec3 cen = normalize(cross(cam, tar)); vec3 ort = normalize(cross(cen, cam));\n    float l = 0.;\n    for (int i = 0; i<NITER; i++)\n    {\n        float d = DE(onpln(cos(l)*cam+sin(l)*ort));\n        if (d<.001 || l>2.*PI) break;\n        if (abs(dist(p,onpln(cos(l)*cam+sin(l)*ort))-d)<.02) col = mix(vec3(.1),vec3(1,0,1)*.7,col);\n        l += d;\n    }\n    \n    //if (length(p)>PI) col *= 0.;\n    //col = vec3(sin(distance(mouse.zw,p)));\n    \n    // Output to screen\n    fragColor = vec4(col,1.);\n}\n\nvec3 onsph(vec2 xy)\n{\n    vec3 res;\n    float l = length(xy);\n    res.xy = xy*sin(2.*atan(l))/l;\n    res.z = cos(2.*atan(l));\n    return res;\n}\n\nvec2 onpln(vec3 xyz)\n{\n    xyz = normalize(xyz)+vec3(0,0,1);\n    return xyz.xy/xyz.z;\n}\n\nfloat dist(vec3 a, vec3 b)\n{\n    return acos(dot(normalize(a),normalize(b)));\n}\nfloat dist(vec2 a, vec2 b)\n{\n    return dist(onsph(a), onsph(b));\n}\n\nfloat DE(vec2 p)\n{\n    //return .1*PI;\n    \n    return min(dist(p,vec2(1)),dist(p,vec2(-1)))-PI/4.;\n}","name":"Image","description":"","type":"image"}]}