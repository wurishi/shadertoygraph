{"ver":"0.1","info":{"id":"sdXXRS","date":"1618781395","viewed":132,"name":"313_Korneev_v5v6","username":"AlekseyKorneev","description":"Корнеев Алексей, 313 ВМК МГУ.\nВыполнены следующие доп. пункты:\n- мягкие тени (+2-3);\n- анти-алиасинг (+2);\n- ambient occlusion (+2-4);\n- окружение в виде текстурированной плоскости (+1);\n- окружение в виде текстурированного куб-мапа (+2).","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["water","icosahedron","cmc","msu","cg2021"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Бесконечно удаленная точка\nconst float INF = 1e10;\n\n// Точность вычислений\nconst float EPS = 1e-5;\n\n// Позиция камеры\nconst vec3 CAMERA_POS = vec3(1., 1., -7.);\n\n// Позиция внутренней сферы\nconst vec3 SPH_POS = vec3(0, 0.5, 0);\n\n// Сферический объект\nstruct Sphere\n{\n    float radius;\n    vec3 pos;\n    vec3 color;\n};\n\n// Количество источник света\nconst int LIGHT_NUM = 2;\n\n// Источники света\nSphere[LIGHT_NUM] LIGHT_SRC = Sphere[LIGHT_NUM](\n    Sphere(0.3, vec3(-2.5, 1.25, -0.5), vec3(1, 1, 1)),\n    Sphere(0.25, vec3(1.75, 0.5, -3), vec3(1.5, 1.5, 0))\n);\n\n// Количество пузырьков в воде\nconst int BUBBLES_NUM = 12;\n\n// Пузырьки в воде\nSphere[BUBBLES_NUM] BUBBLES = Sphere[BUBBLES_NUM](\n    Sphere(0.03, vec3(-0.4, -0.4, 0.1), vec3(1, 1, 1)),\n    Sphere(0.04, vec3(-0.36, -0.32, 0.085), vec3(1, 1, 1)),\n    Sphere(0.035, vec3(-0.4, -0.23, 0.0092), vec3(1, 1, 1)),\n    Sphere(0.035, vec3(-0.32, -0.12, 0.01), vec3(1, 1, 1)),\n    Sphere(0.035, vec3(-0.32, -0.06, 0.01), vec3(1, 1, 1)),\n    Sphere(0.035, vec3(-0.46, -0.12, 0.01), vec3(1, 1, 1)),\n    Sphere(0.033, vec3(-0.36, 0.06, -0.03), vec3(1, 1, 1)),\n    Sphere(0.033, vec3(-0.25, 0.16, 0.0), vec3(1, 1, 1)),\n    Sphere(0.02, vec3(-0.28, 0.3, -0.03), vec3(1, 1, 1)),\n    Sphere(0.03, vec3(-0.32, 0.36, -0.01), vec3(1, 1, 1)),\n    Sphere(0.03, vec3(-0.26, 0.5, -0.01), vec3(1, 1, 1)),\n    Sphere(0.03, vec3(-0.21, 0.55, -0.01), vec3(1, 1, 1))\n);\n\n// Случайное направление\nvec3 randDir;\n\n// Пересечение с треугольной гранью\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal,\n                    vec3 vertex1, vec3 vertex2, vec3 vertex3)\n{\n    vec3 dist1 = vertex2 - vertex1;\n    vec3 dist2 = vertex3 - vertex1;\n    vec3 dist_pos = pos - vertex1;\n    vec3 v1 = cross(dist1, dist2);\n    vec3 v2 = cross(dist_pos, dir);    \n    float tmp = 1.0 / dot(v1, dir);\n    // TODO\n    if (abs(tmp) < EPS) {\n        return INF;\n    }\n    vec3 res = vec3(\n        -dot(v1, dist_pos),\n        -dot(v2, dist2),\n        dot(v2, dist1)  \n    );\n    res *= tmp;\n    // x - t, y - u, z - v\n    if (res.y < 0.0 || res.z < 0.0 || (res.y + res.z) > 1.0) {\n        return INF;\n    }\n    normal = normalize(cross(dist1, dist2));\n    if (dot(normal, dir) > 0.0) {\n        normal = normalize(cross(dist2, dist1));\n    }\n    if (res.x < 0.0) {\n        return INF;\n    }\n    return res.x;\n}\n\n/*\n// Смещение вершин икосаэдра - подобрано вручную\nvec3 vec_transform(vec3 vec)\n{\n    return (vec - vec3(0.5, 0, 0.5)) * 1.5;\n}\n*/\n\n// Пересечение с икосаэдром\nfloat traceIcos(vec3 pos, vec3 dir, out vec3 normal) {    \n    // Количество вершин икосаэдра\n    const int VERTEX_LEN = 12;\n    \n    // Координаты вершин икосаэдра\n    \n/*\n    vec3[VERTEX_LEN] VERTEX = vec3[VERTEX_LEN](\n        vec_transform(vec3(0.0, 0.0, 0.0)),\n        vec_transform(vec3(1.0, 0.0, 0.0)),\n        vec_transform(vec3(0.5, 0.87, 0.0)),\n        vec_transform(vec3(0.5, -0.65, 0.58)),\n        vec_transform(vec3(1.31, 0.76, 0.58)),\n        vec_transform(vec3(-0.31, 0.76, 0.58)),\n        vec_transform(vec3(-0.31, -0.18, 0.93)),\n        vec_transform(vec3(1.31, -0.18, 0.93)),\n        vec_transform(vec3(0.5, 1.22, 0.93)),\n        vec_transform(vec3(0.5, -0.29, 1.51)),\n        vec_transform(vec3(1.0, 0.58, 1.51)),\n        vec_transform(vec3(0.0, 0.58, 1.51))\n    );\n*/\n    vec3[VERTEX_LEN] VERTEX = vec3[VERTEX_LEN](\n        vec3(0.87, -1, -0.5),\n        vec3(-0.87, -1, -0.5),\n        vec3(0., -1., 1.),\n        vec3(0., 0., -1.62),\n        vec3(1.4, 0., 0.81),\n        vec3(-1.4, 0., 0.81),\n        vec3(-1.4, 0.62, -0.81),\n        vec3(1.4, 0.62, -0.81),\n        vec3(0., 0.62, 1.62),\n        vec3(0., 1.62, -1),\n        vec3(0.87, 1.62, 0.5),\n        vec3(-0.87, 1.62, 0.5)\n    );\n    // Количество граней икосаэдра\n    const int EDGE_NUM = 20;\n    // Грани икосаэдра\n/*\n    vec3[EDGE_NUM] EDGE = vec3[EDGE_NUM](\n        vec3(0, 1, 2),\n        vec3(0, 1, 3),\n        vec3(0, 2, 5), \n        vec3(0, 3, 6), \n        vec3(0, 5, 6),\n        vec3(1, 2, 4),\n        vec3(1, 3, 7),\n        vec3(1, 4, 7),\n        vec3(2, 4, 8), \n        vec3(2, 5, 8),\n        vec3(3, 6, 9), \n        vec3(3, 7, 9), \n        vec3(4, 7, 10),\n        vec3(4, 8, 10),\n        vec3(5, 6, 11),\n        vec3(5, 8, 11),\n        vec3(6, 9, 11),\n        vec3(7, 9, 10),\n        vec3(8, 10, 11),\n        vec3(9, 10, 11)\n    );\n*/\n    vec3[EDGE_NUM] EDGE = vec3[EDGE_NUM](\n        vec3(0, 1, 2),\n        vec3(0, 1, 3),\n        vec3(0, 3, 7),\n        vec3(0, 4, 2),\n        vec3(0, 7, 4),\n        vec3(1, 2, 5),\n        vec3(1, 5, 6),\n        vec3(1, 6, 3),\n        vec3(2, 4, 8),\n        vec3(2, 8, 5),\n        vec3(3, 6, 9),\n        vec3(3, 7, 9),\n        vec3(4, 7, 10),\n        vec3(4, 8, 10),\n        vec3(5, 8, 11),\n        vec3(5, 6, 11),\n        vec3(6, 9, 11),\n        vec3(7, 9, 10),\n        vec3(8, 10, 11),\n        vec3(9, 10, 11)\n    );\n    float t = INF;\n    for (int i = 0; i < EDGE_NUM; ++i) {\n        vec3 curNormal;\n        vec3 edge = EDGE[i];\n        float curT = traceTriangle(\n            pos,\n            dir,\n            curNormal,\n            VERTEX[int(edge.x)],\n            VERTEX[int(edge.y)],\n            VERTEX[int(edge.z)]\n        );\n        if (curT < t) {\n            t = curT;\n            normal = curNormal;\n        }\n    }\n    return t;\n}\n// Пересечение с плоскостью\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n// Пересечение со сферой\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n// Пересечение с цилиндром\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal,\n                    float h, float R) {\n    float objPlaneT = (h - pos.y) / dir.y;\n    if (objPlaneT < 0.0) {\n        return INF;\n    }\n    vec3 worldPos = objPlaneT * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < R * R) {\n        normal = vec3(0, 1, 0);\n        return objPlaneT;\n    }\n    \n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - R * R;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;  // LEFT AND RIGHT\n    }\n    \n    float t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= h && worldPos.y >= -1.2) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    \n    t = (-b + sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= h && worldPos.y >= -1.2) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    return INF;\n}\n\n// Поиск препятствий, перекрывающих ход луча\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 sphNorm;\n    float sphT = traceSphere(pos, dir, 1.0, sphNorm);\n    if (sphT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm, -1., 1.);\n    return (cylT < dist);\n}\n\n// Освещение\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT_SRC[0].pos - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT_SRC[0].pos + randDir * LIGHT_SRC[0].radius) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT_SRC[1].pos - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT_SRC[1].pos + randDir * LIGHT_SRC[1].radius) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT_SRC[0].color\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT_SRC[1].color\n        /* Ambient occlusion */\n        + texture(iChannel1, normal).rgb * 0.2\n    );\n}\n\n// Преломление\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n// Генерация \"случайных\" чисел\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    // Материалы\n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float WATER_N = 4. / 3.;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);    \n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    LIGHT_SRC[0].pos += randVals * 0.04;\n    LIGHT_SRC[1].pos += randVals * 0.04;\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        // Плоскость, на которой стоит цилиндрическая опора\n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        // Первый источник света\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT_SRC[0].pos, curDir, LIGHT_SRC[0].radius, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT_SRC[0].color;\n            normal = l1Norm;\n        }\n        \n        // Второй источник света\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT_SRC[1].pos, curDir, LIGHT_SRC[1].radius, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT_SRC[1].color;\n            normal = l2Norm; \n        }\n        \n        // Цилиндрическая опора, на которой стоит икосаэдр\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm, -1., 1.);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        // Икосаэдр\n        vec3 icosNorm;\n        float icosT = traceIcos(curPos, curDir, icosNorm);\n        if (icosT < t) {\n            t = icosT;\n            normal = icosNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.5, 1., 0.5) * 1.5;\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        \n        // Вода\n        vec3 waterNorm;\n        float waterT = traceSphere(curPos - vec3(0, 0.5, 0), curDir, 0.7, waterNorm);\n        \n        if (waterT < t) {\n            t = waterT;\n            normal = waterNorm;\n            \n            if (randVals.x < WATER_R) {\n                materialType = REFLECTION;\n            } else {\n                /*+ float(iFrame % 5) * rand(float(iFrame))*/\n                 colorMult *= vec3(0.5, 0.5, 2.5);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = WATER_N;\n                }\n            }\n            \n            /*\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel3, worldPos.xy * worldPos.y).rgb;\n            \n            if (randVals.x > GLASS_R * 1.0) {\n              materialType = EMISSION;\n            } else {\n                materialType = REFRACTION;\n                nEnter = WATER_N; \n            }\n            */\n        }\n        \n        // Пузырьки воздуха в воде\n        vec3 shift = curPos - vec3(0, 0.5, 0);\n        /*\n        for (int i = 0; i < BUBBLES_NUM; ++i) {\n            BUBBLES[i].pos.y -= 0.01 * float(iFrame % 22);\n            vec3 dist = BUBBLES[i].pos;\n            if (dist.x * dist.x + dist.y * dist.y + dist.z * dist.z >= 0.49) {\n                BUBBLES[i].pos.y = 0.7 - 0.01 * float(iFrame % 10);\n            }\n            \n        }\n        */\n        for (int i = 0; i < BUBBLES_NUM; ++i) {\n            vec3 bubbleNorm;\n            float bubbleT = traceSphere(shift + BUBBLES[i].pos, curDir, BUBBLES[i].radius, bubbleNorm);\n            if (bubbleT < t) {\n                t = bubbleT;\n                normal = bubbleNorm;\n                if (randVals.x < WATER_R) {\n                    materialType = REFLECTION;\n                } else {\n                    colorMult = vec3(1, 1, 1);\n                    materialType = REFRACTION;\n                    if (dot(curDir, normal) > 0.0) {\n                        nEnter = GLASS_N;\n                    } else {\n                        nEnter = WATER_N;\n                    }\n                }\n            }\n        }\n        \n        \n        // Есть пересечение с одним из объектов\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                n1 = nEnter;\n            }\n        // Нет пересечения ни с одним из объектов\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}