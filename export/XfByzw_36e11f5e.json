{"ver":"0.1","info":{"id":"XfByzw","date":"1722018816","viewed":80,"name":"lava coral","username":"pb","description":"combining quaternion exponential and sphere inversion","likes":11,"published":1,"flags":32,"usePreview":0,"tags":["raymarch","4d","exp"],"hasliked":0,"parentid":"4csyWB","parentname":"quat exp"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\nvoid mainImage(out vec4 O, vec2 u) {\n    vec2 R = iResolution.xy,\n        uv = u/R;\n\n    O *= 0.;\n\n    float[] gk1s = float[](\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.023792, 0.094907, 0.150342, 0.094907, 0.023792,\n        0.015019, 0.059912, 0.094907, 0.059912, 0.015019,\n        0.003765, 0.015019, 0.023792, 0.015019, 0.003765\n    );\n\n    //golfed by fabriceneyret2\n    for (int k; k < 25; k++)      \n        O += gk1s[k] * texture(iChannel0, uv + ( vec2(k%5,k/5) - 2. ) / R );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(x) mat2(cos(x+vec4(0,11,33,0)))\n\n//Rodrigues-Euler axis angle rotation\n#define ROT(p,axis,t) mix(axis*dot(p,axis),p,cos(t))+sin(t)*cross(p,axis)\n\n//formula for creating colors;\n#define H(h)  (  cos(  h/2.2 + vec3(1,2,3)   )*.8  + .1 )\n\n\n//formula for mapping scale factor \n#define M(c)  log(c)\n\n#define R iResolution\n     \n#define ex exp(w.x)\n#define cy cos(w.y)\n#define sy sin(w.y)\n#define cz cos(w.z)\n#define sz sin(w.z)\n#define cw cos(w.w)\n#define sw sin(w.w)\n\n\nvoid mainImage( out vec4 O, vec2 U) {\n      \n    O = vec4(0);\n    \n    vec3 c=vec3(0);\n    vec4 rd = normalize( vec4(U-.5*R.xy, R.y, 0.));\n    \n    float dotp, totdist=0., tt=iTime, t=0.;\n    \n    for (float i=0.; i<50.; i++) {\n        \n        vec4 p = vec4( rd*totdist) ;\n        \n        p.z  -= .9;\n        p.x += .4;\n        p.y -= 1.2;\n        \n        p.xz *= rot( 1.4*(1.+.2*sin(tt/3.) ) ) ;\n        p.xy *= rot( -.6 * (1.+.2*sin(tt/3.)) ) ;\n        p.yz *= rot(tt/5.);\n\n        vec4 w=vec4(0) , dz, z;\n     \n        \n        for (float j=0.; j<6.; j++) {\n\n                z = vec4( \n                        ex*(cy*cz*cw - sy*sz*sw),\n                        ex*(sy*cz*cw + cy*sz*sw),\n                        ex*(cy*sz*cw - sy*cz*sw),\n                        ex*(sy*sz*cw + cy*cz*sw)\n                        );\n                       \n                //iterated derivative here instead of just scale factor\n                dz = vec4(z.x*dz.x-z.y*dz.y-z.z*dz.z-z.w*dz.w,\n                          z.x*dz.y+z.y*dz.x+z.z*dz.w-z.w*dz.z,\n                          z.x*dz.z-z.y*dz.w+z.z*dz.x+z.w*dz.y,\n                          z.x*dz.w+z.y*dz.z-z.z*dz.y+z.w*dz.x);\n                          \n                dz.x += 1.;\n                \n                dotp = max(1./dot(z,z),.1);\n                \n                dz *=  dotp;\n                \n                w = z *dotp + p ;\n                        \n        }\n         \n        float ddz = clamp(dot(dz,dz),1e-3,1e6);\n        float ddw = clamp(dot(w,w),1e-3,1e4);\n        \n        float dist = sqrt(sqrt(ddw/ddz)) * log(ddw);\n\n        float stepsize = dist/30.;     \n        totdist += stepsize;\n   \n        c +=\n             .1*\n             H( log(ddz) ) * exp(-i*i*dist*dist*.8e-3); //4e-2*(1.+.7*sin(tt/2.)));\n    }\n    \n    c = 1. - exp(-c*c);\n    O = ( vec4(c,0) );\n               \n}","name":"Buffer A","description":"","type":"buffer"}]}