{"ver":"0.1","info":{"id":"ssVGRV","date":"1631816335","viewed":72,"name":"Animation DS CC","username":"SeeingAllColor","description":"Anime","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["animation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926;\n\nfloat drawCircle(float radius, vec2 center, vec2 uv)\n{\n    center.y *= iResolution.y/iResolution.x;\n    return step(distance(center, uv), radius);\n}\n\nvec3 upDownCircle(in vec2 fragCoord, in float speed, in float amp)\n{\n    // Set Circle data\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec3 circlCol = vec3(1, 0, 0);\n\n    // Make Circle\n    float radius = 0.1;\n    vec2 center = vec2(.5, (amp * sin(speed*iTime) +.5));\n    center.y *= aspect;\n    uv.y *= aspect;\n    \n    // Draw Circle\n    float dist = distance(center, uv);\n    float circleRad = step(radius, dist);\n    \n    // Return Circle\n    return circlCol * (1. - circleRad);\n}\n\nvec3 pulsingCircle(in vec2 fragCoord)\n{\n    // Sets Circle color\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec3 circlCol = vec3(1);\n    float shade =  .5*sin(.2*iTime) +.5;\n    \n    // Makes Circle\n    float radius = 0.1;\n    vec2 center = vec2(.5);\n    center.y *= aspect;\n    uv.y *= aspect;\n    \n    //Draws Circle\n    float dist = distance(center, uv);\n    float circleRad = step(radius, dist);\n    \n    return shade * circlCol * (1. - circleRad);\n}\n\nvec3 threeCircles(in vec2 fragCoord)\n{\n    // Sets Circle data\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec3 cyan = vec3(0., 1., 1.);\n    vec3 magenta = vec3(1., 0., 1.);\n    vec3 yellow = vec3(1., 1., 0.);\n    \n    // Makes Circles\n    float radius = 0.1;\n    vec2 center1 = vec2(.5, (.3 * sin(4.*iTime) +.5));\n    vec2 center2 = vec2((.3 * sin(4.*iTime) +.5), .5);\n    vec2 center3 = vec2((.3 * sin(4.*iTime) +.5), (.3 * sin(4.*iTime) +.5));\n    center1.y *= aspect;\n    center2.y *= aspect;\n    center3.y *= aspect;\n    uv.y *= aspect;\n    \n    // Draws Circles\n    float dist1 = distance(center1, uv);\n    float dist2 = distance(center2, uv);\n    float dist3 = distance(center3, uv);\n    float circleRad1 = 1. -step(radius, dist1);\n    float circleRad2 = 1. -step(radius, dist2);\n    float circleRad3 = 1. -step(radius, dist3); \n    \n    // Puts Circles into layers\n    vec4 layer0 = vec4(0.);\n    vec4 layer1 = vec4(magenta, circleRad1);\n    vec4 layer2 = vec4(cyan, circleRad2);\n    vec4 layer3 = vec4(yellow, circleRad3);\n    \n    // Fuses Layers\n    vec4 fuse = mix(layer0, layer1, layer1.a);\n    fuse = mix(fuse, layer2, layer2.a);\n    fuse = mix(fuse, layer3, layer3.a);\n    \n    // Returns Circles\n    return fuse.rgb;\n}\n\nvec3 linear(in vec4 text1, in vec4 text2)\n{\n    // Returns the linear interpolation of text1 and text2\n    return (1. - (.5*sin(iTime)+.5)) * text1.rgb + (.5*sin(iTime)+.5) * text2.rgb;\n}\n\nvec3 wavingFlag(in vec2 fragCoord)\n{\n    // Sets the motion of the flag\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.y += cos(uv.x*10.+iTime*6.)/10.;\n    \n    // Returns iChannel0 as a flag\n    return texture(iChannel0, uv).rgb;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec4 tx1 = texture(iChannel0, uv);\n    vec4 tx2 = texture(iChannel1, uv);\n    vec3 col = linear(tx1, tx2);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}