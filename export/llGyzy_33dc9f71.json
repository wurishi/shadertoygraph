{"ver":"0.1","info":{"id":"llGyzy","date":"1536767074","viewed":2474,"name":"dFdx quantization","username":"elenzil","description":"quick test to look at quantization of the dFdx() function.","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["glsl","dfdx"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// i came across dFdx here: https://www.shadertoy.com/view/MlGcDz\n// and had some questions about the explanation of it here: https://stackoverflow.com/a/16368768/230851\n// so this is a minor exploration.\n//\n// this shows that the value of dFdx() is duplicated for groups of pixels.\n// the value we're taking the derivative of is a 45Â° line,\n// and on the right side of the screen we use dFdx to produce the yellow pixels,\n// and on the left side we manually generate little 2x2 pixel quads.\n// the results look identical on my machine.\n// the extra two diagonals are pixel-based, for reference.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fc_delta = fragCoord.y - fragCoord.x;\n    float f = fc_delta < 0.0 ? 1.0 : 0.0;\n\n    float dx = dFdx(f);\n    \n    // if on the left side of the screen\n    if (fragCoord.x < iResolution.y / 2.0) {\n        int fcx = int(fragCoord.x);\n        int fcy = int(fragCoord.y);\n        if (fcx / 2 == fcy / 2) {\n            dx = 1.0;\n        }\n        else {\n            dx = 0.0;\n        }\n    }\n    \n    // add two pixel-based diagonals for comparison.\n    dx += (abs(fc_delta) - 50.0 == 0.0) ? 1.0 : 0.0;\n    \n    float r = abs(fragCoord.x - iResolution.y / 2.0) <= 1.0 ? 1.0 : dx;\n    \n    vec3 col = vec3(r, dx, f);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}