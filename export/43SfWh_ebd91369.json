{"ver":"0.1","info":{"id":"43SfWh","date":"1729371475","viewed":132,"name":"Brownian motion from DOS","username":"zenbooster","description":"Implementation of an effect that I came up with back in the days of DOS...","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["msdos","randomwalk","dos"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c = texture(iChannel0, uv).rgb;\n\n    fragColor = vec4(c, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float e = 0.002; // pixel size\nconst float fade_speed = 0.001;\nconst float k = e * 1.5; // coordinate change step\nconst float kc = 0.01; // color change step\n\n// https://microsin.net/programming/dsp/rand-c-source-code.html?ysclid=m2gizxf9q9483453230\n#define RAND_MAX 2147483647\n\nint do_rand(inout int ctx)\n{\n    ctx = ctx * 1103515245 + 12345;\n    int res = int(uint(ctx) % (uint(RAND_MAX) + uint(1)));\n    return res;\n}\n\nfloat my_rand(inout int ctx)\n{\n    return float(do_rand(ctx)) / float(RAND_MAX);\n}\n\nconst int N = 500; // the number of dots drawn per frame\n\n// variable indexes:\nconst int V_FRAME = 0;\nconst int V_SEED = V_FRAME + 1;\nconst int V_POINT = V_SEED + 1;\nconst int V_DELTA = V_POINT + N;\nconst int V_COLOR = V_DELTA + 1;\nconst int V_DELTA_COLOR = V_COLOR + N;\n\nconst float txRow = 32.;\n\nvec4 Loadv4(sampler2D ich, vec2 irs, int idVar)\n{\n  float fi = float(idVar);\n  return texture(ich, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / irs);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    float ar = iResolution.x / iResolution.y;\n    vec4 c = texture(iChannel0, uv);\n    \n    int fr = int(Loadv4(iChannel0, iChannelResolution[0].xy, V_FRAME).x);\n    \n    if(iFrame - fr != 1)\n    {\n        int ctx = int(Loadv4(iChannel0, iChannelResolution[0].xy, V_SEED).x);\n\n        if(ctx == 0)\n        {\n            ctx = int(iTime * float(RAND_MAX));\n        }\n\n        vec2 pt = Loadv4(iChannel0, iChannelResolution[0].xy, V_POINT + N - 1).xy;\n        vec3 ptc = Loadv4(iChannel0, iChannelResolution[0].xy, V_COLOR + N - 1).xyz;\n\n        vec2 dt = Loadv4(iChannel0, iChannelResolution[0].xy, V_DELTA).xy;\n        vec3 dtc = Loadv4(iChannel0, iChannelResolution[0].xy, V_DELTA_COLOR).xyz;\n\n        for(int i = 0; i < N; i++)\n        {\n            dt.x = (1. - my_rand(ctx) * 2.) * k;\n            //dt.x = float(1 - (do_rand(ctx) % 3)) * k;\n            dt.y = (1. - my_rand(ctx) * 2.) * k;\n            //dt.y = float(1 - (do_rand(ctx) % 3)) * k;\n\n            dtc.x = (1. - my_rand(ctx) * 2.) * kc;\n            dtc.y = (1. - my_rand(ctx) * 2.) * kc;\n            dtc.z = (1. - my_rand(ctx) * 2.) * kc;\n\n\n            if( (abs(pt.x + dt.x) < 0.5*ar) &&\n                (abs(pt.y + dt.y) < 0.5))\n            {\n                pt += dt;\n            }\n\n            if( ((ptc.x + dtc.x >= 0.) && (ptc.x + dtc.x <= 1.)) &&\n                ((ptc.y + dtc.y >= 0.) && (ptc.y + dtc.y <= 1.)) &&\n                ((ptc.z + dtc.z >= 0.) && (ptc.z + dtc.z <= 1.)))\n            {\n                ptc += dtc;\n            }\n\n            Savev4(V_POINT + i, vec4(pt, vec2(0.)), c, fragCoord);\n            Savev4(V_COLOR + i, vec4(ptc, 0.), c, fragCoord);\n        }\n        Savev4(V_DELTA, vec4(dt, vec2(0.)), c, fragCoord);\n        Savev4(V_DELTA_COLOR, vec4(dtc, 0.), c, fragCoord);\n        Savev4(V_FRAME, vec4(iFrame + 1, vec3(0.)), c, fragCoord);\n        Savev4(V_SEED, vec4(ctx, vec3(0.)), c, fragCoord);\n    }\n\n    fragColor = c;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 c = texture(iChannel1, uv).rgb;\n    uv -= 0.5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    c -= vec3(fade_speed);\n\n    for(int i = 0; i < N; i++)\n    {\n        vec2 pt = Loadv4(iChannel0, iChannelResolution[0].xy, V_POINT + i).xy;\n\n        if(length(uv - pt) < length(vec2(e, e)))\n        {\n            vec3 ptc = Loadv4(iChannel0, iChannelResolution[0].xy, V_COLOR + i).xyz;\n            c = mix(c, ptc, 0.5);\n            //c = (c+vec3(.1))*ptc;\n            //c = vec3(1.) - ptc;\n        }\n    }\n\n    fragColor = vec4(c,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}