{"ver":"0.1","info":{"id":"7dBGDm","date":"1617485241","viewed":66,"name":"Mandelbrot Trippy","username":"x44203","description":"Mandelbrot set with color animation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["math","mandelbrot","art"],"hasliked":0,"parentid":"sdBGDm","parentname":"Mandelbrot color audio animated"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float pi = 3.1415927;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord.yx/iResolution.yx - 0.5) * 4.0;\n    vec2 mouse = (iMouse.yx/iResolution.yx - 0.5) * 4.0;\n    \n    float angle = atan(uv.y, uv.x);\n    float radius = sqrt(dot(uv.xy, uv.xy));\n    \n    angle += sin(iTime);\n    \n    //float m_angle = mod(angle, pi / (3.0 + sin(iTime * 2.3)));\n    float m_angle = mod(angle, pi / (2.0 + 1. / (sin(iTime * 2.3) * 0.5 + 0.55)));\n    \n    float f_angle = angle - m_angle;\n    \n    angle = m_angle + mod(iTime, 2.0 * pi) * (sin(iTime * 1.0) * 0.1 + 1.0) + f_angle * 2.0 * cos(iTime * 1.8);\n    \n    uv = vec2(sin(angle), cos(angle)) * radius;\n    \n    uv -= mouse + 0.0;\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float x = 0.0;\n    float y = 0.0;\n    int iter = 0;\n    \n    while (x * x + y * y <= 4.0 * (1.0 + sin(iTime) * 0.0) && iter < 1000)\n    {\n        float xt = x * x - y * y + uv.x + x * sin(iTime * 1.3);\n        y = 2.0 * x * y + uv.y;\n        x = xt;\n        iter += 1;\n    }\n    \n    float val = float(iter) * cos(iTime * 0.5) + 0.2 * cos(iTime * 16.0) + m_angle + 10. * f_angle;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*vec3(sin(val / 5.0), sin(val / 3.0 + pi * 2.0 / 3.0), sin(sin(val / 10.0)));\n\n    // Output to screen\n    fragColor = vec4(col / (float(iter) * 0.01 + 1.0),1.0);\n}","name":"Image","description":"","type":"image"}]}