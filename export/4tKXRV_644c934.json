{"ver":"0.1","info":{"id":"4tKXRV","date":"1485051514","viewed":966,"name":"Concentric hex lines","username":"cacheflowe","description":"Playing a bit more with circular concentricity","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["lines","hexagon","concentric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI     3.14159265358\n#define TWO_PI (PI * 2.)\n\nvec2 rotateCoord(vec2 uv, float rads) {\n    uv *= mat2(cos(rads), sin(rads), -sin(rads), cos(rads));\n\treturn uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * 1.;\t\t\t\t\t\t\t\t\t// adjust time\n    vec2 uv = (2. * fragCoord - iResolution.xy) / iResolution.y;\t// center coordinates\n    uv = rotateCoord(uv, PI * 0.25);\n    float rads = atan(uv.x, uv.y);\n    float vertices = 6.;\n    float baseRadius = 0.7;\n    float extraRadius = 0.03 + 0.03 * sin(time * 0.5);\n    float curRadius = baseRadius + extraRadius * sin(rads * vertices);\n    // vec2 edge = vec2(curRadius * sin(rads), curRadius * cos(rads));\n    vec2 edge = curRadius* normalize(uv);\n    float distFromCenter = length(uv);\n    float distFromEdge = distance(edge, uv);\n    float freq = 24.;\n    if(distFromCenter > curRadius) freq *= 3.;\n    float col = smoothstep(0.25, 0.75, abs(sin(time + distFromEdge * freq)));\n    col += distFromCenter * 0.1;\n\tfragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}