{"ver":"0.1","info":{"id":"dstBRM","date":"1697306950","viewed":47,"name":"dither edge thing","username":"omrii","description":"dither edge","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["dither"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nconst mat4x4 threshold = mat4x4(0., 8., 2., 10., \n                                12., 4., 14., 6.,\n                                3.,11.,1.,9.,\n                                15.,7.,13., 5.);\n\n\nfloat findClosest(int x, int y, float v)\n{\n    mat4x4 thresholdT = transpose(threshold);\n    float t = (thresholdT[x][y]) / 16.;\n    if(v < t)\n    {\n      \treturn 0.;   \n    }\n    else\n    {\n     \treturn 1.;   \n    }\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n        // I suggest playing around with this value\n    float h = 01.2;\n    \n    vec4 o = texture(iChannel0, (fragCoord + vec2( 0, 0))/iResolution.xy);\n\tvec4 n = texture(iChannel0, (fragCoord + vec2( 0, h))/iResolution.xy);\n    vec4 e = texture(iChannel0, (fragCoord + vec2( h, 0))/iResolution.xy);\n    vec4 s = texture(iChannel0, (fragCoord + vec2( 0,-h))/iResolution.xy);\n    vec4 w = texture(iChannel0, (fragCoord + vec2(-h, 0))/iResolution.xy);\n    \n    vec4 dy = (n - s)*.5;\n    vec4 dx = (e - w)*.5;\n    \n    vec4 edge = sqrt(dx*dx + dy*dy);\n    vec4 angle = atan(dy, dx);\n   \n    fragColor.xyz = edge.xyz * 5.0;\n   \n    // Below is another way to make an edge detector, \n    // It is invariant under intensity-scalings of the image\n    // and linear illumination differences.\n    // This should make it more \"human-sight\" like\n   \n    //vec4 laplacian = n + e + s + w - 4.0 * o;\n    //fragColor.xyz = abs(laplacian.xyz/o.xyz) * 1.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 col = texture(iChannel0, uv);\n    col.xyz = edge.xyz * 5.0;\n    \n    // https://en.wikipedia.org/wiki/Ordered_dithering\n   \tint x = int(fragCoord.x) % 4;\n    int y = int(fragCoord.y) % 4;\n    \n    // https://en.wikipedia.org/wiki/Luma_(video)\n\tfloat lum = dot(vec3(0.1, 0.1, 0.1), col.rgb);\n    lum = findClosest(x,y, lum);\n \n\t// Output to screen\n\tfragColor = vec4(lum);\n}","name":"Image","description":"","type":"image"}]}