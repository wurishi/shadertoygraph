{"ver":"0.1","info":{"id":"cltSDj","date":"1685788047","viewed":27,"name":"Let's go Deep","username":"voodoovoid","description":"Exploring Mandalas","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bw","mandala"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n// 2D pseudo-random noise generator\nvec2 hash( vec2 p ) {\n    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\n// Function to map a value from a certain range to another range.\nfloat map(float value, float inputMin, float inputMax, float outputMin, float outputMax) {\n    return outputMin + ((value - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin);\n}\n\n// Function to create a circular mandala pattern.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5*iResolution.xy) / min(iResolution.y, iResolution.x);\n    \n    float zoom = pow(2.0, sin(iTime*0.1)); // Half the speed\n    uv /= zoom;\n    \n    float radius = length(uv);\n    float angle = atan(uv.y, uv.x);\n    \n    float mandala = 0.0;\n    \n    float time = iTime * 0.05; // Half the speed\n    float arms = 6.0 + sin(time)*4.0;\n    angle += time + sin(time)*PI/arms;\n    \n    for(float i = 0.0; i < 3.0; i++) {\n        float pattern = mod(angle * zoom + i*PI/3.0, PI/arms) * arms/PI;\n        pattern = abs(1.0 - pattern);\n        \n        radius = pow(radius, map(sin(time), -1.0, 1.0, 0.5, 2.0));\n        pattern = pow(pattern, map(cos(time), -1.0, 1.0, 0.5, 2.0));\n        \n        // Add noise to the pattern\n        pattern += 0.1 * hash(uv + iTime * 0.5).x; // Half the speed\n        \n        mandala += sin(10.0 * (pattern + radius - time));\n        mandala += sin(20.0 * pattern + time) / 2.0;\n    }\n    \n    mandala *= 1.0 - radius;\n    mandala = map(mandala, -2.0, 2.0, 0.0, 1.0);\n    \n    vec3 color = vec3(mandala);\n    color *= 1.0 - 0.5 * radius;\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}