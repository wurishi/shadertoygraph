{"ver":"0.1","info":{"id":"4syBzV","date":"1529493377","viewed":191,"name":"Cellular Automata rule 30","username":"Loeizd","description":"http://mathworld.wolfram.com/Rule30.html","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["automata","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = vec4(texture(iChannel0, uv).z);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// rule 30\n// http://mathworld.wolfram.com/Rule30.html\nvec4 rule[ 8 ] = vec4[]( vec4( 1., 1., 1., 0. ),\n                         vec4( 1., 1., 0., 0. ),\n                         vec4( 1., 0., 1., 0. ),\n                         vec4( 1., 0., 0., 1. ),\n                         vec4( 0., 1., 1., 1. ),\n                         vec4( 0., 1., 0., 1. ),\n                         vec4( 0., 0., 1., 1. ),\n                         vec4( 0., 0., 0., 0. ) );\n\nfloat fetchPixel(vec2 uv, float offset)\n{\n    float k = 3.;//floor(sin(iTime*2.)*5.)/2.;\n    return texture(iChannel0, uv + vec2(offset * k * 1./iResolution.x, 1. * k * 1./iResolution.y)).z;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    //init pixel\n    float init = 1.- floor( 0.995 + distance(uv, vec2(.5)));//(floor(fragCoord) == floor(vec2(.5, .5)*iResolution.xy))? 1. : 0.;\n    init += (floor(fragCoord) == floor(iMouse.xy))? 1. : 0.;\n        \n    //check rule\n    vec3 pixels = vec3(fetchPixel(uv, -1.), fetchPixel(uv, 0.), fetchPixel(uv, 1.));\n    float result = 0.;\n    \n    for (int i = 0; i < 8; i++)\n    {\n        if (pixels == rule[i].xyz)\n        {\n            result = rule[i].w;\n            break;\n        }\n        //pixel == rule[i].xyz ? result = rule[i].z : 0.; \n    }\n    \n    //fragColor = vec4(result+init+texture(iChannel0, uv + vec2(1., 0.)*iResolution.xy).z);\n    //fragColor = vec4(result+init+texture(iChannel0, uv + vec2(0., -1.)*1./iResolution.xy).z);\n    fragColor = vec4(clamp(result+init+texture(iChannel0, uv).z, 0., 1.));\n}","name":"Buf A","description":"","type":"buffer"}]}