{"ver":"0.1","info":{"id":"M3sfRH","date":"1728060090","viewed":78,"name":"bounding box binary tree animate","username":"jt","description":"Experimenting with ray-marching in a tree structure of nested bounding boxes.\nPerformance-test: animated boxes with movement and rotation.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["test","volume","raymarch","random","rotate","tree","performance","bounce","box","rotation","anim","bvh","intersect","mir","bounding","hierarchy"],"hasliked":0,"parentid":"43fBzr","parentname":"bounding box binary tree subdiv"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/M3sfRH bounding box binary tree animate, 2024 by jt\n//(based on https://www.shadertoy.com/view/43fBzr bounding box binary tree subdiv )\n// based on https://www.shadertoy.com/view/XX2cWt bounding box binary tree\n\n// Experimenting with ray-marching in a tree structure of nested bounding boxes.\n// Performance-test: animated boxes with movement and rotation.\n\n// tags: bounding, volume, box, raymarch, intersect, tree, bvh, hierarchy, performance, test, random, rotate, rotation, anim, bounce, mirror\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//#define SHOW_BOUNDING_BOXES\n// comment-out to see entire nested boxes structure\n#define SHOW_ONLY_LEAF_BOXES\n\n\nfloat hash11(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec2 hash21(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nvec3 hash31(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xxy+p3.yzz)*p3.zyx);\n}\n\nvec4 hash41(float p) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n}\n\n#define pi 3.1415926\n#define tau (pi+pi)\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// Tree navigation:\n//     up = (index-1)>>1\n//     left = (index<<1)+1\n//     right = (index<<1)+2\n\n#define BOUNDING_BOX_LEVELS 5u\n#define BOUNDING_BOX_NODE_COUNT ((1u << BOUNDING_BOX_LEVELS) - 1u)\n#define BOUNDING_BOX_LEAF_BASE ((1u << (BOUNDING_BOX_LEVELS - 1u)) - 1u)\n#define BOUNDING_BOX_LEAF_COUNT (1u << (BOUNDING_BOX_LEVELS - 1u))\n\nstruct bounding_box\n{\n    vec3 center;\n    vec3 extent;\n    vec3 axis;\n    vec3 color;\n};\n\nbounding_box bounding_boxes[BOUNDING_BOX_NODE_COUNT]; // ugly global variable in case array arguments are copied instead of being passed by reference.\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 500u\n\nbounding_box enclosing_box(bounding_box a, bounding_box b)\n{\n    // assuming extent is positive\n    vec3 v0 = min(a.center-a.extent,b.center-b.extent);\n    vec3 v1 = max(a.center+a.extent,b.center+b.extent);\n    return bounding_box((v1+v0)/2.0,(v1-v0)/2.0,vec3(0),mix(a.color,b.color,0.5));\n}\n\nvec2 box_intersect(vec3 ro, vec3 rd, vec3 center, vec3 size)\n{\n    ro -= center;\n    vec3 m = 1.0/rd; // can precompute if traversing a set of aligned boxes\n    vec3 n = m*ro;   // can precompute if traversing a set of aligned boxes\n    vec3 k = abs(m)*size;\n    vec3 t1 = -n - k;\n    vec3 t2 = -n + k;\n    float tN = max( max( t1.x, t1.y ), t1.z );\n    float tF = min( min( t2.x, t2.y ), t2.z );\n    if( tN>tF || tF<0.0) return vec2(DIST_MAX); // no intersection\n    return vec2( tN, tF );\n}\n\nvec2 box_intersect(vec3 ro, vec3 rd, bounding_box b)\n{\n    return box_intersect(ro, rd, b.center, b.extent);\n}\n\nbool box_inside(vec3 p, vec3 c, vec3 s)\n{\n    p -= c;\n    p = abs(p)-s;\n    return max(max(p.x,p.y),p.z) <= 0.0;\n}\n\nbool box_inside(vec3 p, bounding_box b)\n{\n    return box_inside(p, b.center, b.extent);\n}\n\nfloat frame(vec3 p, vec3 b, float e) // https://iquilezles.org/articles/distfunctions/\n{\n       p = abs(p  )-b;\n  vec3 q = abs(p+e)-e;\n  return min(min(\n      length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n      length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n      length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat box(vec3 p, vec3 b) // https://iquilezles.org/articles/distfunctions/\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat round_box(vec3 p, vec3 c, float r)\n{\n    return box(p,c-r)-r;\n}\n\nfloat draw_bounding_box(vec3 p, vec3 c, vec3 e)\n{\n    return frame(p-c, e, 0.01);\n}\n\nfloat cylinder(vec3 p, float r, float h) // based on https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec4 combine(vec4 a, vec4 b)\n{\n    return a.w < b.w ? a : b;\n}\n\nvec4 intersect(vec4 a, vec4 b)\n{\n    return a.w > b.w ? a : b;\n}\n\nvec4 offset(vec4 c, float d)\n{\n    return vec4(c.xyz,c.w-d);\n}\n\nvec3 random_unit_vector(float seed) // based on https://math.stackexchange.com/questions/44689/how-to-find-a-random-axis-or-unit-vector-in-3d\n{\n    vec2 rnd = hash21(seed);\n    float phi = tau*rnd.x;\n    vec2 polar = vec2(cos(phi),sin(phi));\n    float z = 2.0*rnd.y-1.0;\n    return vec3(sqrt(1.0-z*z)*polar,z);\n}\n\nvec4 random_unit_quaternion(vec3 r) // r in [0,1] https://stackoverflow.com/questions/31600717/how-to-generate-a-random-quaternion-quickly\n{\n    return\n        vec4\n        (\n            sqrt(1.0-r.x) * sin(2.0*pi*r.y),\n            sqrt(1.0-r.x) * cos(2.0*pi*r.y),\n            sqrt(    r.x) * sin(2.0*pi*r.z),\n            sqrt(    r.x) * cos(2.0*pi*r.z)\n        );\n}\n\n// https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\nmat3 quaternion_to_matrix(vec4 q) // https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm\n{\n    float s = dot(q,q); // just in case, not needed for uniform quaternions\n    return\n        /*\n        mat3\n        (\n            vec3(1.0-2.0*(q.y*q.y+q.z*q.z),       2.0*(q.x*q.y-q.z*q.w),       2.0*(q.x*q.z+q.y*q.w)),\n            vec3(    2.0*(q.x*q.y+q.z*q.w), 1.0 - 2.0*(q.x*q.x+q.z*q.z),       2.0*(q.y*q.z-q.x*q.w)),\n            vec3(    2.0*(q.x*q.z-q.y*q.w),       2.0*(q.y*q.z+q.x*q.w), 1.0 - 2.0*(q.x*q.x+q.y*q.y))\n        );\n        */\n        mat3(1) // identity\n        +\n        2.0\n        *\n        mat3 // could swizzle with cross-product be used to compactify this?\n        (\n            vec3(-q.y*q.y-q.z*q.z,+q.x*q.y-q.z*q.w,+q.x*q.z+q.y*q.w),\n            vec3(+q.x*q.y+q.z*q.w,-q.x*q.x-q.z*q.z,+q.y*q.z-q.x*q.w),\n            vec3(+q.x*q.z-q.y*q.w,+q.y*q.z+q.x*q.w,-q.x*q.x-q.y*q.y)\n        )\n        /\n        s;\n}\n\nmat3 random_rotation(vec3 r)\n{\n    return quaternion_to_matrix(random_unit_quaternion(r));\n}\n\nmat3 rotate_z(float angle)\n{\n    return\n        mat3\n        (\n            vec3( cos(angle), sin(angle), 0.0),\n            vec3(-sin(angle), cos(angle), 0.0),\n            vec3(        0.0,        0.0, 1.0)\n        );\n}\n\nmat3 rotate(vec3 axis, float angle) // https://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToMatrix/\n{\n    float l = length(axis);\n    float x = axis.x/l;\n    float y = axis.y/l;\n    float z = axis.z/l;\n    float c = cos(angle);\n    float s = sin(angle);\n    float t = 1.0 - c;\n    return\n        mat3\n        (\n            vec3(t*x*x+  c, t*x*y+z*s, t*x*z-y*s),\n            vec3(t*x*y-z*s, t*y*y+  c, t*y*z+x*s),\n            vec3(t*x*z+y*s, t*y*z-x*s, t*z*z+  c)\n        );\n}\n\nvec3 bounce(vec3 t) // [-1..+1]\n{\n    return 1.0-4.0*abs(fract(t)-0.5);\n}\n\nfloat min3(vec3 v)\n{\n    return min(min(v.x,v.y),v.z);\n}\n\nvec4 map_switch_internal(vec3 p, uint index)\n{\n/*\n    switch(index)\n    {\n    }\n*/\n    return vec4(vec3(0), DIST_MAX);\n}\n\nvec4 map_specific(vec3 p, uint index)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n\n    bounding_box bb = bounding_boxes[index];\n\n    if(length(bb.extent) > 0.0)\n    {\n#ifdef SHOW_BOUNDING_BOXES\n#ifdef SHOW_ONLY_LEAF_BOXES\n        if(index >= BOUNDING_BOX_LEAF_BASE) // show only leaf boxes\n#endif\n            combined = combine(combined, vec4(bb.color,draw_bounding_box(p,bb.center,bb.extent-0.01/*HACK back-off from bounding box*/))); // NOTE: shrink box slightly to make sure it is inside bounding box\n#endif\n        if(index >= BOUNDING_BOX_LEAF_BASE)\n        {\n            //combined = combine(combined, vec4(bb.color,length(p-bb.center)-(min3(bb.extent)-0.01/*HACK back-off from bounding box*/))); // NOTE: shrink box slightly to make sure it is inside bounding box\n\n            //mat3 R = random_rotation(bb.color/*HACK*/); // NOTE: seed must be in [0,1]\n            //R = rotate_z(iTime)*R;\n            mat3 R = rotate(normalize(bb.axis),iTime);\n            float s = length(bb.extent)*sqrt(2.0); // constant size: fit every orientation into sphere (and then sphere into cube)\n            combined = combine(combined, vec4(bb.color, round_box(R*(p-bb.center)/s, bb.extent, 0.02)*s));\n        }\n    }\n\n    return combined;\n    //return combine(combined, map_switch_internal(p, index));\n}\n\nvec4 map_generic(vec3 p)\n{\n    vec4 combined = vec4(vec3(0), DIST_MAX);\n\n    uint index_stack[BOUNDING_BOX_NODE_COUNT]; // reserve size for worst case: entire tree\n    uint stack_pointer = 0u;\n    index_stack[stack_pointer++] = 0u; // start at root\n\n    while(stack_pointer > 0u)\n    {\n        stack_pointer--;\n        uint index = index_stack[stack_pointer];\n\n        if(box_inside(p, bounding_boxes[index]))\n        {\n            combined = combine(combined, map_specific(p, index));\n\n            if(index < BOUNDING_BOX_LEAF_BASE) // node is not a leaf\n            {\n                index_stack[stack_pointer++] = (index<<1u)+1u;\n                index_stack[stack_pointer++] = (index<<1u)+2u;\n            }\n        }\n    }\n\n    return combined;\n}\n\n// based on https://iquilezles.org/articles/normalsSDF tetrahedron normals\n/*\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h).w\n            +\n            k.yyx * map(p + k.yyx*h).w\n            +\n            k.yxy * map(p + k.yxy*h).w\n            +\n            k.xxx * map(p + k.xxx*h).w\n        );\n}\n*/\n\n// adapted https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    vec3 ks[4] = vec3[4](k.xyy, k.yyx, k.yxy, k.xxx);\n    vec3 s = vec3(0);\n    for(int i = 0; i < 4; i++)\n    {\n        float d = DIST_MAX;\n\n        uint index_stack[BOUNDING_BOX_NODE_COUNT]; // reserve size for worst case: entire tree\n        uint stack_pointer = 0u;\n        index_stack[stack_pointer++] = 0u; // start at root\n\n        while(stack_pointer > 0u)\n        {\n            stack_pointer--;\n            uint index = index_stack[stack_pointer];\n\n            // NOTE: Determine inside which box(es) by position WITHOUT epsilon offsets...\n            if(box_inside(p, bounding_boxes[index]))\n            {\n                // NOTE: ...but sample WITH epsilon offsets, so all samples of one normal are from the same maps\n                d = min(d, map_specific(p + ks[i]*h, index).w);\n\n                if(index < BOUNDING_BOX_LEAF_BASE) // node is not a leaf\n                {\n                    index_stack[stack_pointer++] = (index<<1u)+1u;\n                    index_stack[stack_pointer++] = (index<<1u)+2u;\n                }\n            }\n        }\n\n        s += ks[i] * d;\n    }\n\n    return normalize(s);\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i = 0u;\n\n    vec4 nearest = vec4(vec3(0), DIST_MAX);\n\n    uint index_stack[BOUNDING_BOX_LEVELS]; // reserve size for worst case: entire tree\n    uint stack_pointer = 0u;\n    index_stack[stack_pointer++] = 0u; // start at root\n\n    // NOTE: currently UNSORTED traversal TODO: sort\n    while(stack_pointer > 0u)\n    {\n        stack_pointer--;\n        uint index = index_stack[stack_pointer];\n\n        vec2 current_bounds = box_intersect(ro, rd, bounding_boxes[index]);\n        //if(current_bounds.x < DIST_MAX)\n        if(current_bounds.x < nearest.w) // ignore everything further away than current result\n        {\n            if(index < BOUNDING_BOX_LEAF_BASE) // node is not a leaf\n            {\n                index_stack[stack_pointer++] = (index<<1u)+1u;\n                index_stack[stack_pointer++] = (index<<1u)+2u;\n            }\n#ifdef SHOW_ONLY_LEAF_BOXES\n            else // leaf -> ray-march NOTE: remove this line to render interior nodes, too\n#endif\n            {\n                vec4 h = vec4(0);\n                float t;\n\n                current_bounds = clamp(current_bounds,t0,t1);\n                for(t = current_bounds.x; t < current_bounds.y && i < ITER_MAX; i++)\n                //for(t = current_bounds.x+EPSILON; t < current_bounds.y && i < ITER_MAX; i++)\n                {\n                    h = map_specific(ro + rd * t, index);\n                    if(h.w < EPSILON)\n                    {\n                        if(t < nearest.w) nearest = vec4(h.xyz,t);\n                        break;\n                    }\n                    t += h.w;\n                }\n            }\n        }\n    }\n\n    return nearest;\n}\n/*\nstruct stack_element\n{\n    uint index;\n    vec2 bounds;\n};\n// try to roughly sort bounding box pairs during traversal - no speedup, possibly consumed by additional complexity\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i = 0u;\n\n    vec4 nearest = vec4(vec3(0), DIST_MAX);\n\n    stack_element index_stack[BOUNDING_BOX_NODE_COUNT]; // reserve size for worst case: entire tree\n    uint stack_pointer = 0u;\n    index_stack[stack_pointer++] = stack_element(0u, box_intersect(ro, rd, bounding_boxes[0u])); // start at root\n\n    // NOTE: currently UNSORTED traversal TODO: sort\n    while(stack_pointer > 0u)\n    {\n        stack_pointer--;\n        stack_element current = index_stack[stack_pointer];\n        if(current.bounds.x < nearest.w)\n        {\n            if(current.index < BOUNDING_BOX_LEAF_BASE) // node is not a leaf\n            {\n                uint index0 = (current.index<<1u)+1u;\n                uint index1 = (current.index<<1u)+2u;\n\n                vec2 current_bounds0 = box_intersect(ro, rd, bounding_boxes[index0]);\n                vec2 current_bounds1 = box_intersect(ro, rd, bounding_boxes[index1]);\n\n                if(current_bounds0.x < current_bounds1.x)\n                {\n                    index_stack[stack_pointer++] = stack_element(index0,current_bounds0);\n                    index_stack[stack_pointer++] = stack_element(index1,current_bounds1);\n                }\n                else // current_bounds0.x >= current_bounds1.x\n                {\n                    index_stack[stack_pointer++] = stack_element(index1,current_bounds1);\n                    index_stack[stack_pointer++] = stack_element(index0,current_bounds0);\n                }\n            }\n#ifdef SHOW_ONLY_LEAF_BOXES\n            else // leaf -> ray-march NOTE: remove this line to render interior nodes, too\n#endif\n            {\n                vec4 h = vec4(0);\n                float t;\n\n                current.bounds = clamp(current.bounds,t0,t1);\n                for(t = current.bounds.x; t < current.bounds.y && i < ITER_MAX; i++)\n                //for(t = current_bounds.x+EPSILON; t < current_bounds.y && i < ITER_MAX; i++)\n                {\n                    h = map_specific(ro + rd * t, current.index);\n                    if(h.w < EPSILON)\n                    {\n                        if(t < nearest.w) nearest = vec4(h.xyz,t);\n                        break;\n                    }\n                    t += h.w;\n                }\n            }\n        }\n    }\n\n    return nearest;\n}\n*/\n/*\n// try to roughly sort bounding box pairs during traversal - no speedup, possibly consumed by additional complexity\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1)\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i = 0u;\n\n    vec4 nearest = vec4(vec3(0), DIST_MAX);\n\n    uint index_stack[BOUNDING_BOX_LEVELS]; // reserve size for worst case: entire tree\n    uint stack_pointer = 0u;\n    index_stack[stack_pointer++] = 0u; // start at root\n    if(box_intersect(ro, rd, bounding_boxes[0u]).x < DIST_MAX)\n    // NOTE: currently UNSORTED traversal TODO: sort\n    while(stack_pointer > 0u)\n    {\n        stack_pointer--;\n        uint index = index_stack[stack_pointer];\n\n        {\n            if(index < BOUNDING_BOX_LEAF_BASE) // node is not a leaf\n            {\n                uint index0 = (index<<1u)+1u;\n                uint index1 = (index<<1u)+2u;\n\n                vec2 bounds0 = box_intersect(ro, rd, bounding_boxes[index0]);\n                vec2 bounds1 = box_intersect(ro, rd, bounding_boxes[index1]);\n\n                if(bounds0.x < bounds1.x)\n                {\n                    if(bounds0.x < nearest.w) index_stack[stack_pointer++] = index0;\n                    if(bounds1.x < nearest.w) index_stack[stack_pointer++] = index1;\n                }\n                else // current_bounds0.x >= current_bounds1.x\n                {\n                    if(bounds1.x < nearest.w) index_stack[stack_pointer++] = index1;\n                    if(bounds0.x < nearest.w) index_stack[stack_pointer++] = index0;\n                }\n            }\n#ifdef SHOW_ONLY_LEAF_BOXES\n            else // leaf -> ray-march NOTE: remove this line to render interior nodes, too\n#endif\n            {\n                vec4 h = vec4(0);\n                float t;\n\n                for(t = t0; t < t1 && i < ITER_MAX; i++)\n                //for(t = current_bounds.x+EPSILON; t < current_bounds.y && i < ITER_MAX; i++)\n                {\n                    h = map_specific(ro + rd * t, index);\n                    if(h.w < EPSILON)\n                    {\n                        if(t < nearest.w) nearest = vec4(h.xyz,t);\n                        break;\n                    }\n                    t += h.w;\n                }\n            }\n        }\n    }\n\n    return nearest;\n}\n*/\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map_generic(ro + rd*t).w;\n        if(h < EPSILON)\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// based on https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO(vec3 pos, vec3 nor, uint index)\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map_generic(pos + h*nor).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if(occ > 0.35) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n/*\nint heapsort_max(int n, int i, int j, int k) // adapted from: https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C\n{\n    int m = i;\n    if (j < n && bounding_boxes[j].center.z > bounding_boxes[m].center.z)\n    {\n        m = j;\n    }\n    if (k < n && bounding_boxes[k].center.z > bounding_boxes[m].center.z)\n    {\n        m = k;\n    }\n    return m;\n}\n\nvoid heapsort_downheap(int n, int i) // adapted from: https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C\n{\n    while(true)\n    {\n        int j = heapsort_max(n, i, 2 * i + 1, 2 * i + 2);\n        if(j == i)\n        {\n            break;\n        }\n        bounding_box b = bounding_boxes[i];\n        bounding_boxes[i] = bounding_boxes[j];\n        bounding_boxes[j] = b;\n        i = j;\n    }\n}\n\nvoid heapsort() // adapted from: https://rosettacode.org/wiki/Sorting_algorithms/Heapsort#C\n{\n    int n = int(BOUNDING_BOX_NODE_COUNT);\n    int i;\n    for(i = (n - 2) / 2; i >= 0; i--)\n    {\n        heapsort_downheap(n, i);\n    }\n    for(i = 0; i < n; i++)\n    {\n        bounding_box bb = bounding_boxes[n - i - 1];\n        bounding_boxes[n - i - 1] = bounding_boxes[0];\n        bounding_boxes[0] = bb;\n        heapsort_downheap(n - i - 1, 0);\n    }\n}\n*/\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (I + I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0.0, 0.0,-4.0);\n    vec3 rd = normalize(vec3(I.xy, 2.5)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n\n    //vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 lightdir = normalize(vec3(2.0,1.0, 3.0));\n\n    // NOTE: obviously it would be more efficient to calculate the bounding boxes outside of the shader. But I want a bufferless, self-contained shadertoy shader so...\n\n    // direct approach: results in inefficient/overlapping bounding box structure - still faster than naive rendering\n    {\n        //bounding_boxes[BOUNDING_BOX_LEAF_BASE + 0u] = bounding_box(vec3(0),vec3(1));\n        //for(uint i = 1u; i < BOUNDING_BOX_LEAF_COUNT; i++)\n        for(uint i = 0u; i < BOUNDING_BOX_LEAF_COUNT; i++)\n        {\n/*\n            vec3 v0 = mix(vec3(-1),vec3(+1),hash31(+float(i+1u)*123.456));\n            vec3 v1 = mix(vec3(-1),vec3(+1),hash31(-float(i+1u)*123.456));\n\n            vec3 c = (v1 + v0) / 2.0;\n            vec3 e = abs(v1-v0) / 2.0;\n            //float r = min(min(e.x, e.y), e.z)/2.0;\n            vec3 o = vec3(1) - e;\n\n            c = o*bounce(vec3(iTime/25.0)/o);\n\n            bounding_boxes[BOUNDING_BOX_LEAF_BASE + i] = bounding_box(c,e);\n*/\n            vec3 color = hash31(float(i+1u)*123.456);\n            vec3 axis = random_unit_vector(float(i+1u)*123.456);\n\n            float r = mix(0.1,0.25,hash11(float(i+1u)*123.456)); // radius\n            vec3 c = mix(vec3(-1.0+r),vec3(+1.0-r),hash31(float(i+1u)*123.456)); // fit sphere into unit box\n            vec3 o = vec3(1.0-r);\n            c = o*bounce(c+vec3(iTime/50.0)/o); // animate bouncing in unit box\n            bounding_boxes[BOUNDING_BOX_LEAF_BASE + i] = bounding_box(c,vec3(r),axis,color);\n        }\n\n        // construct enclosing boxes\n        //for(uint level = BOUNDING_BOX_LEVELS - 1u; level > 0u; level--)\n        for(uint j = 1u; j < BOUNDING_BOX_LEVELS; j++)\n        {\n            uint level = BOUNDING_BOX_LEVELS - j;\n            uint node_count = (1u << (level - 1u));\n            uint node_base = (1u << (level - 1u)) - 1u;\n            uint leaf_base = (1u << level) - 1u;\n            for(uint i = 0u; i < node_count; i++)\n            {\n                bounding_boxes[node_base + i] = enclosing_box(bounding_boxes[leaf_base + 2u * i + 0u],bounding_boxes[leaf_base + 2u * i + 1u]);\n            }\n        }\n    }\n\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    vec3 color = result.xyz;\n    float dist = result.w;\n    if(dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * dist;\n        //vec3 n = normal(dst); // standard normals\n        vec3 n = normal(ro + rd * (dist-EPSILON)); // reduce edge-glint by normal-backoff as suggested by elenzil\n\n        //color = n * 0.5 + 0.5;\n\n        vec3 ambient = vec3(0.1);\n        float brightness = max(dot(lightdir, n), 0.0) * 2.0;\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n            //brightness *= softshadow(ro + rd * dist + n * 0.01, lightdir, 0.0, DIST_MAX, 25.0);\n        color *= (ambient * calcAO(dst, n, 0u/*index*/)) + brightness;\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0);\n        color = mix(fog_color, vec3(color), exp(-pow(dist/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color = vec3(0);\n    }\n//    #if BOUNDING_BOX_LEAF_BASE + 3u == 6u\n//    color = vec3(0,1,0);\n//    #endif\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n\n    //color += hash32(I*123.0)/255.0; // dither to remove banding in the background\n\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}