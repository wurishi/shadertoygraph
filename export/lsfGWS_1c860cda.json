{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"const vec4 sky = vec4(0.5, 0.5, 1.0, 1.0);\n\n// Filter far away values to get rid of the flicker.\nvec4 checker_aa(vec3 coord){\n\tcoord *= 0.25;\n\tcoord += vec3(0.3);\n\tvec3 tri = abs(mod(2.0*coord, 4.0) - vec3(2.0)) - vec3(1.0);\n\tfloat value = tri.x*tri.z;\n\tfloat fw = fwidth(value)*0.5;\n\treturn vec4(smoothstep(-fw, fw, value));\n}\n\nvec4 raytrace_plane(vec3 origin, vec3 dir){\n\tfloat t = origin.y/dir.y;\n\tvec3 point = origin - dir*t + vec3(0.0);\n\treturn mix(checker_aa(point), sky, step(0.0, t));\n}\n\nconst vec3 center = vec3(0, 2, 0);\nfloat radius = 0.75;\n\nvec4 raytrace_sphere(vec3 origin, vec3 dir){\n\t\n\tvec3 a = origin - center;\n\tvec3 b = a + dir;\n\tfloat daa = dot(a, a);\n\tfloat dab = dot(a, b);\n\t\n\tfloat qa = daa - 2.0*dab + dot(b, b);\n\tfloat qb = -daa + dab;\n\tfloat qc = daa - radius*radius;\n\t\n\tfloat det = qb*qb - qa*qc;\n\tif(det >= 0.0){\n\t\tfloat t = (-qb - sqrt(det))/(qa);\n\t\tif(t >= 0.0){\n\t\t\tvec3 n = normalize(mix(a, b, t));\n\t\t\tvec3 point = origin + dir*t;\n\t\t\t\n\t\t\tvec3 diffuse = max(-n, 0.0);\n\t\t\tvec3 ref = raytrace_plane(point, reflect(dir, n)).rgb;\n\t\t\t\n\t\t\t\n\t\t\treturn vec4(mix(diffuse, ref, 0.5), 1.0);\n\t\t}\n\t}\n\t\n\treturn vec4(0.0);\n}\n\nvec4 raytrace()\n{\n\tconst float rate = 1.0;\n\tfloat t = iTime;\n\tvec2 sc = vec2(cos(t*rate), sin(t*rate));\n\t\n\tfloat dist = (0.5*sin(0.3*t) + 0.5) + radius + 0.05;\n\tfloat height = 2.0*sin(0.6*t);\n\t\n\t// Do as a matrix?\n\tvec3 forward = normalize(vec3(sc.y, -height, sc.x));\n\tvec3 origin = center - dist*forward;\n\tvec3 right = cross(forward, vec3(0,1,0));\n\tvec3 up = cross(right, forward);\n\t\n\tfloat aspect = iResolution.x/iResolution.y;\n\tvec2 clip = vec2(2)*gl_FragCoord.xy/iResolution.xy - vec2(1);\n\tvec3 dir = normalize(forward + (clip.x*aspect)*right + clip.y*up);\n\t\n\tvec4 sphere = raytrace_sphere(origin, dir);\n\tvec4 plane = raytrace_plane(origin, dir);\n\treturn mix(plane, sphere, sphere.a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = raytrace();\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsfGWS","date":"1378137205","viewed":377,"name":"Raytraced Sphere","username":"slembcke","description":"Doesn't everybody need to make a raytraced sphere at least once?","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","sphere"],"hasliked":0,"parentid":"","parentname":""}}