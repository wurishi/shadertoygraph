{"ver":"0.1","info":{"id":"DdSXzz","date":"1669790469","viewed":233,"name":"One Cog","username":"ilyaev","description":"Star swirls ","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["parallax","stars","swirls"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision mediump float;\n#define PI 3.14159265359\n#define PI2 PI*2.\n\nmat2 rotate2d(float angle) {\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\n\nfloat n21(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898 + floor(1.), 4.1414))) * 43758.5453);\n}\n\n\nvec3 cellColor(vec2 cell, float index) {\n    float n = n21(cell);\n    float fade = 1.;\n\n    float nt = n21(vec2(ceil(iTime), index));\n    float ntt = n21(vec2(ceil(iTime)+ 1., index));\n    float baseCur = nt * 10.;\n    float baseNext = ntt * 10.;\n    float base = mix(baseCur, baseNext, fract(iTime));\n\n\n    if (cell.x > (base + n * 35.)) {\n        fade =  step(n, (1. - min(1., cell.x/(60. + (cell.x - 30.)))));\n    }\n    if (n > .5) {\n        return vec3(0.3*n, .3*n, .1*n) * fade;\n    }\n\n    return vec3(0., 0.1, n) * fade;\n}\n\nvec3 starsField(vec2 uv, vec2 shift) {\n    vec2 id = floor(uv);\n    vec2 starsuv = fract(uv);\n    vec3 col = vec3(0.);\n    float n = n21(id * shift) - .5;\n\n    float d = length(starsuv - .5 - vec2(n, fract(n * 23423.) - .5));\n    float star = fract(n * 123.2) * .03 - .015;\n\n    if (star > 0.001) {\n        col += pow(star/d, 2.3 - sin(iTime + n*10.)*(n + .3)) * vec3(5., 5., 5. + step(star, .01) * 20.);\n    }\n    return col;\n}\n\nvec3 vStar(vec2 uv, float index) {\n    float d = length(uv);\n    float size = 2.5;\n\n    float colls = floor(15. * (d + .3));\n\n    vec2 cellSize = vec2(60., colls);\n\n    float a = (atan(uv.x, uv.y) + PI) / PI;\n    vec2 id = vec2(floor(d*cellSize.x), floor(a/2. * cellSize.y));\n\n    uv.xy *= rotate2d(iTime * sin(id.x));\n    \n    a = (atan(uv.x, uv.y) + PI) / PI;\n    id = vec2(floor(d*cellSize.x), floor(a/2. * cellSize.y));\n\n    float nextY = id.y + 1.;\n\n    if (nextY == cellSize.y) {\n        nextY = 0.;\n    }\n\n    vec2 nextCell = vec2(id.x, nextY);\n\n    vec2 cUv = vec2(fract(d * cellSize.x), fract(a/2. * cellSize.y));\n\n    vec3 col = cellColor(id, index);\n    vec3 nextColor = cellColor(nextCell, index);\n\n\n    vec3 c = mix(col, nextColor, cUv.y) * 3.;\n\n    vec3 color = c * (1. - smoothstep(size/20., size, d*(1.5 - .7*sin(index*10. + iTime))));\n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy / .5 - 1.;\n\n    uv.x *= iResolution.x / iResolution.y;\n\n    float ct = iTime * .2;\n    float cn = n21(vec2(floor(ct), 41.));\n    vec3 cFrom = min(vec3(cn, fract(cn*10.3), fract(cn*453.33)), vec3(.5, .3, .5));\n    float cn1 = n21(vec2(floor(ct + 1.), 41.));\n    vec3 cTo = min(vec3(cn1, fract(cn1*10.3), fract(cn1*453.33)), vec3(.5, .3, .5));\n\n    vec3 skyColor = mix(cFrom, cTo, fract(ct));\n    vec3 color = skyColor * pow(.8/(uv.y + .8 + sin(iTime*.3) * .1), 2.);\n\n    for(float i = 1.; i < 4. ; i++) {\n        float t = iTime * sin(i)*cos(i+3.)/12.;\n        float n2 = n21(vec2(i,313.) + ceil(t));\n        float n1 = n21(vec2(i,313.) + ceil(t + 1.));\n        float nn2 = fract(n2 * 123.32);\n        float nn1 = fract(n1 * 123.32);\n        vec2 xy1 = vec2(n2*3. - 1.5, nn2*3. - 1.5);\n        vec2 xy2 = vec2(n1*3. - 1.5, nn1*3. - 1.5);\n        vec2 xy = mix(xy1, xy2, fract(t));\n        color = max(color, vStar(uv*(2. + sin(t)) + xy, i));\n    }\n\n    // stars\n    float size = 10.;\n    float tt = iTime * .3;\n    vec3 sfFrom = starsField(uv * vec2(size, size)*1., vec2(floor(tt + 1.)));\n    vec3 sfTo = starsField(uv * vec2(size, size)*1., vec2(floor(tt + 2.)));\n    color = max(color, mix(sfFrom, sfTo, fract(tt)));\n    size *= 2.;\n    color = max(color, starsField(uv * vec2(size, size)*1.5, vec2(1.)));\n\n\n    float groundMask = 0.;\n    vec3 ground = vec3(0.);\n    for(float i = 1.; i < 4. ; i++) {\n        float n = texture(iChannel0, vec2(uv.x/8. + iTime/i/24./3., (uv.y + i*5.3)/80.)).r * .5;\n        float mask = 1. - step(n, uv.y + 1.1 - i*.2);\n        groundMask = max(groundMask, mask);\n        if (ground.x == 0.) {\n            ground = (skyColor - vec3(.05 * i, .05*i, .1*i)) * groundMask; \n        }\n    }\n\n\n    color = (1. - groundMask) * color + groundMask * ground;\n    fragColor = vec4(color, 1.0) ;\n}","name":"Image","description":"","type":"image"}]}