{"ver":"0.1","info":{"id":"lXsXDf","date":"1710111936","viewed":61,"name":"Seagulls in 9D","username":"guestusut","description":"Forked from cool youtube demo","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","sdf","tutorial","intro","repetition","code","youtube","tuto","creative"],"hasliked":0,"parentid":"43fXDX","parentname":"Seagulls"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Compute a sensible sinusoid from [0, 1]\nfloat ssin(float t){\n    return 0.5*(sin(t) + 1.0);\n}\n\n// Who fuckin knows\nvec3 palette(float t) {\n    vec3 a = vec3(0.5, 0.2, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.6);\n    vec3 c = vec3(1.0, 1.0, 0.3);\n    vec3 d = vec3(0.263,0.416,0.557);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n// Vector rotation\nvec2 rotate(vec2 uv, float theta, float warpx, float warpy){\n    return vec2(uv[0]*cos(theta) - warpx*uv[1]*sin(theta), uv[0]*sin(theta) + warpy*uv[1]*cos(theta));\n}\n\n// Main\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Compute relative coordinates\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // Select paramss\n    float f_spatial = 4.0*sin(iTime*0.1) + sin(uv.y);\n    float f_temporal = 64.0;\n    float a_temporal = 0.0;\n    \n    // Rotate for mems\n    uv = rotate(uv, 3.14 * (3.0/4.0) * 0.02*iTime, 1.0, 1.0);\n    vec2 uv0 = uv;\n    \n    // Select final color\n    vec3 finalColor = vec3(0.0, 0.0, 0.0);\n    \n    // Loop ??\n    for (float i = 0.0; i < 4.0; i++) {\n        uv = fract(uv * f_spatial) + a_temporal*sin(f_temporal*iTime);\n        float d = length(uv) * exp(-length(uv0));\n        vec3 col = palette(length(uv0) + i*.5 + iTime*0.01);\n        d = sin(d*8.0 + iTime)/8.0;\n        d = abs(d);\n        d = pow(0.005 / d, 1.5);\n\n        finalColor += col * d;\n    }\n        \n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}