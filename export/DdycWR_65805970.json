{"ver":"0.1","info":{"id":"DdycWR","date":"1695946263","viewed":118,"name":"Lenia Pt.3","username":"26apastor","description":"My attempt at creating multiple rings for Lenia:\nPart three.\nI encourage you to reset the time over and over until you get interesting results. (So the creatures donâ€™t overgrow the screen)","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["automata","life","cellular","continuous","artificial","lenia"],"hasliked":0,"parentid":"cdGcWR","parentname":"Lenia Pt.2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define max_radius 18.0\n#define T 10.0\n#define k_radii vec4(0.5, 1, 2.0/3.0, 0.0)\n#define k_amount 3.0\n#define mu 0.26\n#define sigma 0.036\n#define rho 0.5 \n#define omega 0.15\n#define noise_base 0.15\n\nfloat growth(float sum) {\n    return gaussian_bell(sum, mu, sigma) * 2.0 - 1.0;\n}\n\nfloat getWeight(float x, float y) {\n    float r = sqrt(x * x + y*y) / max_radius; // normalize the distance by the maximum range of the distance\n    r *= k_amount; \n    /* multiply by the amount of kernels to have: distance: [0->3]; \n    where 3 is the length of the array \n    (r will never = 3 because the kernel will never be size 1) */\n    float radius = k_radii[int(r)]; // selected radius in beta array using index: floor(Br);\n    if ((r / k_amount) <= 1.) return radius * gaussian_bell(mod(r, 1.), rho, omega);\n    return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    float sum = 0.0;\n    float total = 0.0;\n    for(float x = -max_radius; x <= max_radius; x++) {\n        for( float y = -max_radius; y <= max_radius; y++) {\n            if (x == 0.0 && y == 0.0) {\n                continue;\n            }\n        \tvec2 offset = vec2(x, y) / iResolution.xy;\t\t\n        \tvec4 lookup = texture(iChannel0, mod(uv + offset, 1.0));\n            float weight = getWeight(x, y);\n        \tsum += lookup.x * weight;\n            total += weight;\n        }\n    }\n    sum /= total;\n    \n    float cell = texture(iChannel0, uv).x;\n    float color = clamp(cell + growth(sum) / T, 0.0, 1.0);\n    \n    /*Chakazul's use of the hash function is genius and all credits to him in his implementation of lenia: https://www.shadertoy.com/user/Chakazul\n    */\n    if (iFrame < 1)\n        color = noise_base + noise(fragCoord/max_radius + mod(iDate.w,1.)*100.);\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= max_radius/iResolution.x)\n        \tcolor = 0.3 + noise(fragCoord/max_radius + mod(iDate.w,1.)*100.);\n    }\n    fragColor = vec4(color, color, color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"/*Chakazul's use of this hash function is genius and all credits to him in his implementation of lenia: https://www.shadertoy.com/user/Chakazul\n*/\n\n// Noise simplex 2D by iq - https://www.shadertoy.com/view/Msf3WH\n\nfloat gaussian_bell(float sum, float m, float s) {\n    return exp(-pow(((sum - m) / s ), 2.0) / 2.0);\n}\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}","name":"Common","description":"","type":"common"}]}