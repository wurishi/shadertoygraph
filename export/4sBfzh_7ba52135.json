{"ver":"0.1","info":{"id":"4sBfzh","date":"1499314255","viewed":178,"name":"nd FM","username":"ndeboar","description":"From: https://github.com/tsulej/GenerateMe","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\n#define TWO_PI 6.2831855\n\n\nfloat nremap (float value, float from1, float to1, float from2, float to2) {\n\treturn ((value - from1) / (to1 - from1) * (to2 - from2) + from2);\n}\n\nfloat setFilter(float rate, float hz) {\n\tfloat timeInterval = 1.0/rate;\n\tfloat tau = 1.0 / (hz * TWO_PI);\n\treturn(timeInterval / (tau + timeInterval));\n}\n\nfloat prev = 0.0;\n\nfloat lowpass(float _sample, float alpha) {\n\tfloat stage1 = _sample * alpha;\n\tfloat stage2 = prev - (prev * alpha);\n\tprev = (stage1 + stage2);\n\treturn prev;\n}\n\nconst float rate = 100000.0;\nconst float lowpass1_cutoff = 0.25; // percentage of rate\nconst float lowpass2_cutoff = 0.1;\nconst float lowpass3_cutoff = 0.05;\n\n\nconst vec2 iRenderScale = vec2(1.,1.); // Render Scale (The size of a full-resolution pixel).\n\nfloat omegai = 0.5; // Amplitude (The amplitude of the xy sine wave), min=0., max=1.\nfloat phasei = 0.5;// Amplitude (The amplitude of the xy sine wave), min=0., max=1.\nfloat min_phase_mult=0.05;\nfloat max_phase_mult=50.0;\nfloat signal = 0.0;\n\nvec3 result = vec3(0,0,0);\nfloat v = 0.0;\nfloat _m = 0.0;\nfloat sig_int = 0.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float min_omega = TWO_PI/(0.05*iResolution.x);\n\tfloat max_omega = TWO_PI/(300.0*iResolution.x);\n    \n    \n    float lpf1 = setFilter(rate, lowpass1_cutoff*rate);\n    float lpf2 = setFilter(rate, lowpass2_cutoff*rate);\n    float lpf3 = setFilter(rate, lowpass3_cutoff*rate);\n    \n\tfor (int y=0; y <3; y++){\n\n        float omega = iMouse.x/iResolution.x;\n\t\tfloat phase = iMouse.y/iResolution.y;\n\t\tomega = mix(min_omega, max_omega,sqrt(omega)); \n\t\tphase = mix(min_phase_mult,max_phase_mult,(phase * phase));\n\t\tfloat max_phase = phase * omega;\n\t\tfloat min_phase = -max_phase;\n        \n        vec2 uv = fragCoord.xy / iResolution.xy;\n\n\n\t    //calc integral\n\t    sig_int = 0.0;\n\t    float pre_m = 0.0;\n        \tfor(int i=0;i<int(fragCoord.x);i++){\n\t\t\tsignal = texture( iChannel0, vec2(i,uv.y))[y];\n\t\t\tsignal = mix(min_phase,max_phase,signal);\n\t\t\tsig_int += signal;\n\t\t}\n\t\t\n        signal = texture( iChannel0, uv)[y];\n        signal = mix(min_phase,max_phase,signal);\n\n\t\t_m = cos(omega * fragCoord.x + sig_int);\n\n\t\tpre_m = cos(omega * (fragCoord.x -1.0) + sig_int);\n\n\t\tfloat dem = abs(_m-pre_m);\n\n\t\tdem = lowpass(dem,lpf1);\n        dem = lowpass(dem,lpf2);\n        dem = lowpass(dem,lpf3);\n\n\n\t\tv = nremap(2.0*(dem-omega),min_phase, max_phase, 0.0,1.0);\n\t\tresult[y] = v;\n\n\n    }\n\t\t\n\tfragColor = vec4(result.x,result.y,result.z,1);\t\t\n\n}","name":"Image","description":"","type":"image"}]}