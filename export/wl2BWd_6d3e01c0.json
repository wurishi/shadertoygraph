{"ver":"0.1","info":{"id":"wl2BWd","date":"1600198391","viewed":92,"name":"Stars Mountains V1","username":"jaymonkey77","description":"Scrolling mountains with fixed stars.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["stars","mountains"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FRACT_NOISE_ITERATIONS 4\n#define FRACT_NOISE_SCALE 2.10\n#define LAYER_COUNT 3\n#define BASE_COLOR vec3(0.2,0.3,0.5)\n\nfloat Hash(vec2 p)\n{\n    float h = dot(p, vec2(12.9898, 78.233));\n    return -1.0 + 2.0 * fract(sin(h) * 43758.5453);\n}\n\nvec2 Hash2D(vec2 p)\n{\n    float h = dot(p, vec2(12.9898, 78.233));\n    float h2 = dot(p, vec2(37.271, 377.632));\n    return -1.0 + 2.0 * vec2(fract(sin(h) * 43758.5453), fract(sin(h2) * 43758.5453));\n}\n\nfloat Noise(vec2 p)\n{\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(mix(Hash(n), Hash(n + vec2(1.0, 0.0)), u.x),\n               mix(Hash(n + vec2(0.0, 1.0)), Hash(n + vec2(1.0)), u.x), u.y);\n}\n\nvec3 Voronoi(vec2 p)\n{\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n\n    vec2 mg, mr;\n\n    float md = 8.0;\n    for(int j = -1; j <= 1; ++j)\n    {\n        for(int i = -1; i <= 1; ++i)\n        {\n            vec2 g = vec2(float(i), float(j));\n            vec2 o = Hash2D(n + g);\n\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n\n            if(d < md)\n            {\n                md = d;\n                mr = r;\n                mg = g;\n            }\n        }\n    }\n    return vec3(md, mr);\n}\n\nvec3 AddStarField(vec2 samplePosition, float threshold)\n{\n    vec3 starValue = Voronoi(samplePosition);\n    if (starValue.x < threshold)\n    {\n        float power = 1.0 - (starValue.x / threshold);\n        return vec3(power * power * power);\n    }\n    return vec3(0.0);\n}\n\n\nfloat rand(vec2 p) {\n    return texture(iChannel0, p / iChannelResolution[0].xy).r;\n}\n\nfloat fract_noise (vec2 p) {\n    float result = 0.0;\n    float k_sum = 0.0;\n    for(int i = 0; i < FRACT_NOISE_ITERATIONS; i++) {\n        float k = pow(FRACT_NOISE_SCALE, float(i));\n        k_sum += k;\n        result += rand(p * pow(FRACT_NOISE_SCALE, float(i))) * k;\n    }\n    \n    return result / k_sum;\n}\n\nvec3 to_background_color(vec3 base_color, float weight) {\n    return base_color +  (vec3(1.0) - base_color.bgr * 0.6) * weight * 0.7;\n}\n\nvec3 compute_for_p(vec2 uv) {\n    \n    vec3 base_color = BASE_COLOR * (0.5 + 0.4 * uv.y);\n    vec3 background_color = to_background_color(base_color, 1.0);\n    float position_offset = iTime * 0.5 - 5.0 / iResolution.x;\n    \n    bool second_mountain = false;\n    bool second_mountain_processed = false;\n    float mountain_blend = 0.0;\n    \n    vec3 color = vec3(0,0,0);\n    \n    for(int layer = 0; layer < LAYER_COUNT; layer++) {\n        float parralax = 3.0 / (2.0 + float(layer));\n        \n        float position_in_mountain = uv.x * 2.0 + Noise(vec2(float(float(layer) / float(LAYER_COUNT) * iResolution.x))) * iResolution.x  + position_offset * parralax;\n        float layer_height_relative = fract_noise(vec2(position_in_mountain, 25.0));\n        float layer_height_absolute = pow((0.001 + float(layer) * 0.02) / (10.0 + float(LAYER_COUNT) * 2.0), 2.0) + 1.0 * layer_height_relative / float(LAYER_COUNT);\n        \n    \n        if(uv.y < layer_height_absolute) {\n            vec3 new_color = to_background_color(base_color, float(layer) / float(LAYER_COUNT));\n            if(second_mountain) {\n                second_mountain_processed = true;\n                color += (1.0 - mountain_blend) * new_color;\n                break;\n            } else {\n                second_mountain = true;\n                mountain_blend = smoothstep(-2.0 / iResolution.y, 2.0 / iResolution.x, layer_height_absolute - uv.y);\n                color = mountain_blend * new_color;\n                \n            }\n        }\n    }\n    if(second_mountain && !second_mountain_processed) {\n        color += (1.0 - mountain_blend) * background_color;\n    }\n    \n    if(color.x == 0.0f && color.y == 0.0f && color.z == 0.0f) {\n         color = AddStarField(vec2(uv.x , uv.y) * 10.0, 0.00125);\n    }\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = vec3(0.0);\n    \n    color = compute_for_p(uv);\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}