{"ver":"0.1","info":{"id":"WslGDH","date":"1546054180","viewed":235,"name":"Asteroid Flyby","username":"slimyfrog","description":"Asteroid flyby shader with texture scrolling, point light.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["textures","displacementmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3Rr","filepath":"/media/a/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","previewfilepath":"/media/ap/ad56fba948dfba9ae698198c109e71f118a54d209c0ea50d77ea546abad89c57.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DISTANCE   50.0\n#define MIN_DISTANCE    0.0001\n\n//------------------------------------------------------------\n//\n//------------------------------------------------------------\nfloat asteroidDf(vec3 p, out vec3 color)\n{\n    float anim = -iTime*3.0;\n    vec2 uv = vec2( p.x + 0.5, anim +p.z);\n    vec3 displace = vec3(texture(iChannel0, uv * .1));\n    vec3 displace2 = vec3(texture(iChannel0, uv * 0.3));\n    vec3 displace3 = vec3(texture(iChannel0, uv* 0.01 ).x);\n    \n    color = vec3(texture(iChannel1, uv * 0.1));\n    color += vec3(texture(iChannel1, uv * 0.001));\n\tcolor *= 0.5;\n    displace = displace * 0.3 + displace2 * 0.2 + displace3 * 2.0;\n    \n    float dist =  p.y;\n    \n    dist += length(displace);\n    return dist;\n}\n\n\n//------------------------------------------------------------\n//\n//------------------------------------------------------------\nfloat sceneDf(vec3 p, out vec3 color)\n{\n    float dist = asteroidDf(p, color);\n    return dist;\n}\n\n//------------------------------------------------------------\n//\n//------------------------------------------------------------\nvec3 calcNormal(vec3 p)\n{\n    float e = 0.01;\n    \n    vec3 normal;\n    vec3 i;\n    normal.x = sceneDf(vec3(p.x + e,p.y,p.z), i) - sceneDf(vec3(p.x - e, p.y, p.z), i);\n    normal.y = sceneDf(vec3(p.x,p.y + e,p.z), i) - sceneDf(vec3(p.x, p.y - e, p.z), i);\n    normal.z = sceneDf(vec3(p.x,p.y,p.z + e), i) - sceneDf(vec3(p.x, p.y, p.z - e), i);\n    \n    return normalize(normal);\n}\n\n//------------------------------------------------------------\n//\n//------------------------------------------------------------\nvec3 processLighting(vec3 baseColor, vec3 eyePos, vec3 surfacePoint)\n{\n    vec3 normal = calcNormal(surfacePoint);\n    vec3 toLight = normalize(eyePos + vec3(0, -1.0, -9.0) - surfacePoint);\n    float pointDot = max(dot(toLight, normal), 0.0);\n    return vec3(pointDot ) * baseColor;\n}\n\n//------------------------------------------------------------\n//\n//------------------------------------------------------------\nvec3 marchRay(vec3 eyePos,vec3 dir)\n{\n    vec3 color = vec3(0);\n    vec3 currentPoint = eyePos;\n    while(length(currentPoint) < MAX_DISTANCE)\n    {\n        vec3 sceneCol;\n        float dist = sceneDf(currentPoint, sceneCol);\n        if(dist <= MIN_DISTANCE)\n        {\n            color = processLighting(sceneCol, eyePos, currentPoint);\n            float absz = -currentPoint.z;\n            color *= 1.0-vec3(max(absz - 25.0, 0.0)/10.0);\n            break;\n        }\n        currentPoint += (dist * dir);\n    }\n    return color;\n}\n\n\n\n//------------------------------------------------------------\n//\n//------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     // camera\t\n\tvec3 eye = vec3(0.0, 2.0, 9.0 );\n    vec3 lookat = vec3( sin(iTime * 0.3) * 3.0, 0.0, 0.0 );\n    \n    // camera matrix\n    vec3 forward = normalize( lookat - eye );\n    vec3 right = normalize( cross(forward,vec3(0.0,1.0,0.0) ) );\n    vec3 up = normalize( cross(right, forward));\n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n    // create view ray\n    vec3 dir = normalize( p.x*right + p.y*up + 3.5*forward );\n       \n    vec3 color = marchRay(eye, dir);\n    \n    fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}