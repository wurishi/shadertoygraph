{"ver":"0.1","info":{"id":"Wdy3DW","date":"1570417609","viewed":217,"name":"Visualiser 202","username":"Cotterzz","description":"Not quite what I was aiming for, but close enough to make me happy.\nSo I'm trying to extract and express as much musical information as possible.\n(and turn it into rainbow bolts of lightning)","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["fft","lightning","visualisation","notes","octaves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","previewfilepath":"/media/ap/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \nThe next version of my audio shader\nhttps://www.shadertoy.com/view/wdGGzm - 201\nhttps://www.shadertoy.com/view/WdG3zw - 104\nhttps://www.shadertoy.com/view/WsyGRw - 103\nhttps://www.shadertoy.com/view/wsKGzD - 102\nhttps://www.shadertoy.com/view/3dV3zh - 101\nI'm really pulling out and expressing as much information as I can with this one.\nNot quite the bolts of musical lightning I was aiming for, but I like where it's going all the same.\n*/\n\n\n#define A0 0.00275 // an 88 key piano starts here\n#define Bb0 0.002914\n#define B0 0.003087\n#define C1 0.003270\n#define Db1 0.003465\n#define D1 0.003671\n#define Eb1 0.003889\n#define E1 0.004120\n#define F1 0.004365\n#define Gb1 0.004625\n#define G1 0.004900\n#define Ab1 0.005191\n#define A1 0.005500\n#define Bb1 0.005827\n#define B1 0.006174\n#define C2 0.006541\n#define Db2 0.006930\n#define D2 0.007342\n#define Eb2 0.007778\n#define E2 0.008241\n#define F2 0.008731\n#define Gb2 0.009250\n#define G2 0.009800\n#define Ab2 0.010383\n#define A2  0.011000\n#define Bb2 0.011654\n#define B2  0.012347\n#define C3   0.013081\n#define Db3  0.013859\n#define D3   0.014683\n#define Eb3  0.015556\n#define E3   0.016481\n#define F3   0.017461\n#define Gb3  0.018500\n#define G3   0.019600\n#define Ab3  0.020765\n#define A3   0.022000\n#define Bb3  0.023308\n#define B3   0.024694\n#define C4   0.026163\n#define Db4  0.027718\n#define D4   0.029366\n#define Eb4  0.031113\n#define E4   0.032963\n#define F4   0.034923\n#define Gb4  0.036999\n#define G4   0.039200\n#define Ab4  0.041530\n#define A4   0.044000\n#define Bb4  0.046616\n#define B4   0.049388\n#define C5   0.052325\n#define Db5  0.055437\n#define D5   0.058733\n#define Eb5  0.062225\n#define E5   0.065926\n#define F5   0.069846\n#define Gb5  0.073999\n#define G5   0.078399\n#define Ab5  0.083061\n#define A5   0.088000\n#define Bb5  0.093233\n#define B5   0.098777\n#define C6   0.104650\n#define Db6  0.110873\n#define D6  0.117466\n#define Eb6 0.124451\n#define E6  0.131851\n#define F6  0.139691\n#define Gb6 0.147998\n#define G6  0.156798\n#define Ab6 0.166122\n#define A6  0.176000\n#define Bb6 0.186466\n#define B6  0.197553\n#define C7  0.209300\n#define Db7 0.221746\n#define D7  0.234932\n#define Eb7 0.248902\n#define E7  0.263702\n#define F7  0.279383\n#define Gb7 0.295996\n#define G7  0.313596\n#define Ab7 0.332244\n#define A7  0.352000\n#define Bb7 0.372931\n#define B7 0.395107\n#define C8 0.418601 // and finishes here\n\nfloat getA(){\n    float freqv = texture(iChannel0, vec2(A0,0.0)).r;\n    freqv += texture(iChannel0, vec2(A1,0.0)).r;\n    freqv += texture(iChannel0, vec2(A2,0.0)).r;\n    freqv += texture(iChannel0, vec2(A3,0.0)).r;\n    freqv += texture(iChannel0, vec2(A4,0.0)).r;\n    freqv += texture(iChannel0, vec2(A5,0.0)).r;\n    freqv += texture(iChannel0, vec2(A6,0.0)).r;\n    freqv += texture(iChannel0, vec2(A7,0.0)).r;\n    freqv /= 8.0;\n    return freqv;\n}\n\nfloat getB(){\n    float freqv = texture(iChannel0, vec2(B0,0.0)).r;\n    freqv += texture(iChannel0, vec2(B1,0.0)).r;\n    freqv += texture(iChannel0, vec2(B2,0.0)).r;\n    freqv += texture(iChannel0, vec2(B3,0.0)).r;\n    freqv += texture(iChannel0, vec2(B4,0.0)).r;\n    freqv += texture(iChannel0, vec2(B5,0.0)).r;\n    freqv += texture(iChannel0, vec2(B6,0.0)).r;\n    freqv += texture(iChannel0, vec2(B7,0.0)).r;\n    freqv /= 8.0;\n    return freqv;\n}\n\nfloat getC(){\n    float freqv = texture(iChannel0, vec2(C1,0.0)).r;\n    freqv += texture(iChannel0, vec2(C2,0.0)).r;\n    freqv += texture(iChannel0, vec2(C3,0.0)).r;\n    freqv += texture(iChannel0, vec2(C4,0.0)).r;\n    freqv += texture(iChannel0, vec2(C5,0.0)).r;\n    freqv += texture(iChannel0, vec2(C6,0.0)).r;\n    freqv += texture(iChannel0, vec2(C7,0.0)).r;\n    freqv += texture(iChannel0, vec2(C8,0.0)).r;\n    freqv /= 8.0;\n    return freqv;\n}\n\nfloat getD(){\n    float freqv = texture(iChannel0, vec2(D1,0.0)).r;\n    freqv += texture(iChannel0, vec2(D2,0.0)).r;\n    freqv += texture(iChannel0, vec2(D3,0.0)).r;\n    freqv += texture(iChannel0, vec2(D4,0.0)).r;\n    freqv += texture(iChannel0, vec2(D5,0.0)).r;\n    freqv += texture(iChannel0, vec2(D6,0.0)).r;\n    freqv += texture(iChannel0, vec2(D7,0.0)).r;\n    freqv /= 7.0;\n    return freqv;\n}\n\nfloat getE(){\n    float freqv = texture(iChannel0, vec2(E1,0.0)).r;\n    freqv += texture(iChannel0, vec2(E2,0.0)).r;\n    freqv += texture(iChannel0, vec2(E3,0.0)).r;\n    freqv += texture(iChannel0, vec2(E4,0.0)).r;\n    freqv += texture(iChannel0, vec2(E5,0.0)).r;\n    freqv += texture(iChannel0, vec2(E6,0.0)).r;\n    freqv += texture(iChannel0, vec2(E7,0.0)).r;\n    freqv /= 7.0;\n    return freqv;\n}\n\nfloat getF(){\n    float freqv = texture(iChannel0, vec2(F1,0.0)).r;\n    freqv += texture(iChannel0, vec2(F2,0.0)).r;\n    freqv += texture(iChannel0, vec2(F3,0.0)).r;\n    freqv += texture(iChannel0, vec2(F4,0.0)).r;\n    freqv += texture(iChannel0, vec2(F5,0.0)).r;\n    freqv += texture(iChannel0, vec2(F6,0.0)).r;\n    freqv += texture(iChannel0, vec2(F7,0.0)).r;\n    freqv /= 7.0;\n    return freqv;\n}\n\nfloat getG(){\n    float freqv = texture(iChannel0, vec2(G1,0.0)).r;\n    freqv += texture(iChannel0, vec2(G2,0.0)).r;\n    freqv += texture(iChannel0, vec2(G3,0.0)).r;\n    freqv += texture(iChannel0, vec2(G4,0.0)).r;\n    freqv += texture(iChannel0, vec2(G5,0.0)).r;\n    freqv += texture(iChannel0, vec2(G6,0.0)).r;\n    freqv += texture(iChannel0, vec2(G7,0.0)).r;\n    freqv /= 7.0;\n    return freqv;\n}\n\nfloat getBass(){\n    float freqv = texture(iChannel0, vec2(0.00,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.005,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.01,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.015,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.02,0.0)).r;\n    freqv /= 5.0;\n    return freqv;\n}\n\nfloat getHiss(){\n    float freqv = texture(iChannel0, vec2(0.5,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.6,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.7,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.8,0.0)).r;\n    freqv += texture(iChannel0, vec2(0.9,0.0)).r;\n    freqv += texture(iChannel0, vec2(1.0,0.0)).r;\n    freqv /= 6.0;\n    return freqv;\n}\n\nfloat sdLine( in vec2 p, in vec2 a, in vec2 b )  // tiq\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\n#define TWO_PI 6.28318530718\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 toCenter = vec2(0.5)-uv;\n    float angle = (atan(toCenter.y,toCenter.x)+PI)/TWO_PI;\n    float radius = length(toCenter)*2.0;\n    \n    float bass = getBass();\n    float hiss = getHiss();\n    \n    float ba = getA();\n    float bb = getB();\n    float bc = getC();\n    float bd = getD();\n    float be = getE();\n    float bf = getF();\n    float bg = getG();\n    \n    float smallest = min(ba,bb);\n    smallest = min(bb,bc);\n    smallest = min(bc,bd);\n    smallest = min(bd,be);\n    smallest = min(be,bf);\n    smallest = min(bf,bg);\n    \n    ba -= smallest;\n    bb -= smallest;\n    bc -= smallest;\n    bd -= smallest;\n    be -= smallest;\n    bf -= smallest;\n    bg -= smallest;\n    \n    float normaliser = 0.5;\n\n    ba *= normaliser;\n    bb *= normaliser;\n    bc *= normaliser;\n    bd *= normaliser;\n    be *= normaliser;\n    bf *= normaliser;\n    bg *= normaliser;\n    float bottoma = 0.0;\n    float bottomb = 0.0;\n    float bottomc = 0.0;\n    float bottomd = 0.0;\n    float bottome = 0.0;\n    float bottomf = 0.0;\n    float bottomg = 0.0;\n    float topa = 1.0-ba;\n    float topb = 1.0-bb;\n    float topc = 1.0-bc;\n    float topd = 1.0-bd;\n    float tope = 1.0-be;\n    float topf = 1.0-bf;\n    float topg = 1.0-bg;\n    float xa = 0.1;\n    float xb = 0.23;\n    float xc = 0.36;\n    float xd = 0.5;\n    float xe = 0.63;\n    float xf = 0.76;\n    float xg = 0.9;\n  \n    float wave = texture(iChannel0, vec2(0.0+(uv.y/8.0),1.0)).r/8.0;///(1.111*uv.y*(1.0-uv.y));\n    float waveformB = texture(iChannel0, vec2(1.0-uv.x,1.0)).r;\n    float correctxt =0.05;//;\n    float correctxb =correctxt;//;\n    float multy = uv.y;///waveformA/waveformB;\n    float multx = uv.x;\n    float tdista = ba + sdLine(vec2(uv.x+wave,uv.y), vec2(xa+correctxb, bottoma), vec2(xa+correctxt, topa));\n    \n    wave = texture(iChannel0, vec2(0.1+(uv.y/8.0),1.0)).r/8.0;\n    float tdistb = bb + sdLine(vec2(uv.x+wave,uv.y), vec2(xb+correctxb, bottomb), vec2(xb+correctxt, topb));\n    wave = texture(iChannel0, vec2(0.2+(uv.y/8.0),1.0)).r/8.0;\n    float tdistc = bc + sdLine(vec2(uv.x+wave,uv.y), vec2(xc+correctxb, bottomc), vec2(xc+correctxt, topc));\n    wave = texture(iChannel0, vec2(0.4+(uv.y/8.0),1.0)).r/8.0;\n    float tdistd = bd + sdLine(vec2(uv.x+wave,uv.y), vec2(xd+correctxb, bottomd), vec2(xd+correctxt, topd));\n    wave = texture(iChannel0, vec2(0.5+(uv.y/8.0),1.0)).r/8.0;\n    float tdiste = be + sdLine(vec2(uv.x+wave,uv.y), vec2(xe+correctxb, bottome), vec2(xe+correctxt, tope));\n    wave = texture(iChannel0, vec2(0.6+(uv.y/8.0),1.0)).r/8.0;\n    float tdistf = bf + sdLine(vec2(uv.x+wave,uv.y), vec2(xf+correctxb, bottomf), vec2(xf+correctxt, topf));\n    wave = texture(iChannel0, vec2(0.7+(uv.y/8.0),1.0)).r/8.0;\n    float tdistg = bg + sdLine(vec2(uv.x+wave,uv.y), vec2(xg+correctxb, bottomg), vec2(xg+correctxt, topg));\n   \n    float tdist = min(tdista,tdistb);\n    tdist = min(tdist,tdistc);\n    tdist = min(tdist,tdistd);\n    tdist = min(tdist,tdiste);\n    tdist = min(tdist,tdistf);\n    tdist = min(tdist,tdistg);\n   \n    float brightness = (hiss)-(tdist*(bass*100.0));\n    float c = 0.6;\n    vec4 col = ( c + c*cos( TWO_PI*(uv.x-0.15) + vec4(0,23,21,0)  ) );\n    vec4 col2 = vec4(brightness, brightness, brightness, 1.0);\n\tfragColor = col+col2;\n}\n\n    //vec2 positions[5];\n    //positions[0] = vec2(0.8, 0.0);\n    //positions[2] = (start+finish)/2.00;\n    //positions[4] = finish;\n    //positions[1] = vec2(0.4, 1.0);\n    //positions[3] = (positions[2]+finish)/2.00;\n    //positions[0].y = texture(iChannel0, vec2(0.1,1.0)).r;\n    //positions[1].y = texture(iChannel0, vec2(0.25,1.0)).r;\n    //positions[2].y = texture(iChannel0, vec2(0.50,1.0)).r;\n    //positions[3].y = texture(iChannel0, vec2(0.75,1.0)).r;\n    ///positions[4].y = texture(iChannel0, vec2(0.9,1.0)).r;\n    //uv.y*(1.0-uv.y)\n\n    //float red = 0.02/(distance(uv, positions[0]));\n    //red += 0.02/(distance(uv, positions[1]));\n    //red += 0.02/(distance(uv, positions[2]));\n    //red += 0.02/(distance(uv, positions[3]));\n   // red += 0.02/(distance(uv, positions[4]));\n    \n    \n    // take the levels from 0.5 to 1.0;\n    //float fftA = texture(iChannel0, vec2(0.5+(angle/2.0),0.0)).r;\n    // take the levels from 0.25 to 0.5;\n    //float fftB = texture(iChannel0, vec2(0.25+(angle/4.0),0.0)).r;\n    // take the levels from 0.125 to 0.25;\n    //float fftC = texture(iChannel0, vec2(0.125+(angle/8.0),0.0)).r;\n    // take the levels from 0.0625 to 0.125;\n    //float fftD = texture(iChannel0, vec2(0.0625+(angle/16.0),0.0)).r;\n    // take the levels from 0.03125 to 0.0625;\n    //float fftE = texture(iChannel0, vec2(0.03125+(angle/32.0),0.0)).r;\n    // take the levels from 0.015625 to 0.03125;\n    //float fftF = texture(iChannel0, vec2(0.015625+(angle/64.0),0.0)).r;\n\t// take the levels from 0.0078125 to 0.015625;\n    //float fftG = texture(iChannel0, vec2(0.0078125+(angle/128.0),0.0)).r;\n\t// take the levels from 0.00390625 to 0.0078125;\n    //float fftH = texture(iChannel0, vec2(0.00390625+(angle/256.0),0.0)).r;\n    // take the levels from 0.001953125 to 0.00390625;\n    //float fftI = texture(iChannel0, vec2(0.001953125+(angle/512.0),0.0)).r;\n    // take the levels from 0.0009765625 to 0.001953125;\n    //float fftJ = texture(iChannel0, vec2(0.0009765625+(angle/1024.0),0.0)).r;\n    // there are better ways of coding this,\n\t// but this works great for execution,\n\t// and saves on compile time and loop unrolling etc.\n    // leaving this here, even though its not used, this is the entire waveform:\n    // float fftwaveform = texture(iChannel0, vec2(angle,0.0)).r;\n    // add them all together\n    //float fftwaveformTotal = fftA+fftB+fftC+fftD+fftE+fftF+fftG+fftH+fftI+fftJ;\n    // take the avaerage\n    //float fftwaveform = fftwaveformTotal/10.00;\n    // make it think its just looking at the final octave\n    //float frequency = 5000.00 + angle * 5000.00;\n    //float halfsteps = 69.00 + 12.00*log2(frequency/440.00);\n    //float notes = fract(halfsteps/12.00);\n    //float dissonance = abs(fract(notes*12.00)-0.5);\n    //fftwaveform *= fftwaveform;\n    //fftwaveform *= fftwaveform;\n    //fftwaveform *= fftwaveform;\n    // fftwaveform *= fftwaveform;\n    //multiply it to hell so the difference is easier to see !!!!\n    //fftwaveform *= 70.00;\n    //fftwaveform *=(1.0-dissonance);\n    //float notevolume = step(radius,fftwaveform);\n    //float strength = 1.0;// notevolume*(1.0-dissonance);\n","name":"Image","description":"","type":"image"}]}