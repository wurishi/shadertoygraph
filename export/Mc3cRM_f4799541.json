{"ver":"0.1","info":{"id":"Mc3cRM","date":"1730471665","viewed":212,"name":"Boiling Colors","username":"SpinningCube","description":"Experimenting with colors","likes":13,"published":3,"flags":32,"usePreview":1,"tags":["color","cellularautomata"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Most code is in Buffer A\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rgb;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n * Boiling Colors\n * https://www.shadertoy.com/view/Mc3cRM\n * by SpinningCube\n *\n * A bit of an experiment to see what cool patterns I can make with colors.\n * This cellular automata follows a few simple rules. Each fragment may\n * randomly pick pixel colors from its neighborhood (anything within the\n * surrounding 3x3 region. There is a 0.1% chance it picks two pixels and\n * sets itself to their average. Otherwise, it will set itself to the color\n * of one randomly chosen pixel and has a 20% chance to add or subtract a\n * small amount from a randomly picked color channel.\n *\n * Uses hash functions by nimitz in Common:\n * https://www.shadertoy.com/view/Xt3cDn\n */\n\nconst int numSources = 9;\nvec2 sources[numSources] = vec2[numSources](\nvec2(0, 0),\nvec2(1, 0),\nvec2(0, 1),\nvec2(-1, 0),\nvec2(0, -1),\nvec2(1, 1),\nvec2(1, -1),\nvec2(-1, 1),\nvec2(-1, -1));\n\nvec3 channels[3] = vec3[3](\nvec3(1, 0, 0),\nvec3(0, 1, 0),\nvec3(0, 0, 1));\n\nconst float changeAmount = 1./255.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 px = 1./iResolution.xy;\n    \n    vec3 col;\n    if (iFrame < 5) {\n        // Initial state\n        col = texture(iChannel1, uv).rgb;\n        //col = vec3(0.5);\n        //col = vec3(1.0);\n        //col = hash33(uvec3(uv/px, iFrame));\n        //col = uv.xyy;\n    } else {\n        if (hash13(uvec3(4.5 * uv/px + 8., iFrame - 2)) < 0.001) {\n            // Average of two random neighboring pixels\n            vec2 src1 = sources[clamp(int(float(numSources) * hash13(uvec3(2.*uv/px + 3., iFrame - 7))), 0, numSources - 1)];\n            vec2 src2 = sources[clamp(int(float(numSources) * hash13(uvec3(9.*uv/px - 5., iFrame - 1))), 0, numSources - 1)];\n            col = 0.5 * (texture(iChannel0, uv + px * src1).rgb + texture(iChannel0, uv + px * src2).rgb);\n        } else {\n            // Chooses the color of a random neighboring pixel with a small amount added\n            vec2 src = sources[clamp(int(float(numSources) * hash13(uvec3(2.*uv/px + 3., iFrame - 7))), 0, numSources - 1)];\n            \n            float change = 2. * round(hash13(uvec3(uv/px + 5., iFrame - 4))) - 1.0;\n            change *= step(0.2, hash13(uvec3(7. * uv/px + 8., iFrame + 3)));\n            \n            vec3 channel = channels[clamp(int(3. * hash13(uvec3(3.*uv/px + 3., iFrame))), 0, 2)];\n            \n            col = texture(iChannel0, uv + px * src).rgb + change * changeAmount * channel;\n            //col = fract(col);\n            col = clamp(col, 0.0, 1.0);\n        }   \n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"//Quality hashes collection\n//by nimitz 2018 (twitter: @stormoid)\n//https://www.shadertoy.com/view/Xt3cDn\n\n//The MIT License\n//Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nuint baseHash(uvec3 p)\n{\n    p = 1103515245U*((p.xyz >> 1U)^(p.yzx));\n    uint h32 = 1103515245U*((p.x^p.z)^(p.y>>3U));\n    return h32^(h32 >> 16);\n}\n\nfloat hash13(uvec3 x)\n{\n    uint n = baseHash(x);\n    return float(n)*(1.0/float(0xffffffffU));\n}\n\nvec2 hash23(uvec3 x)\n{\n    uint n = baseHash(x);\n    uvec2 rz = uvec2(n, n*48271U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec2((rz.xy >> 1) & uvec2(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec3 hash33(uvec3 x)\n{\n    uint n = baseHash(x);\n    uvec3 rz = uvec3(n, n*16807U, n*48271U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec3((rz >> 1) & uvec3(0x7fffffffU))/float(0x7fffffff);\n}\n\nvec4 hash43(uvec3 x)\n{\n    uint n = baseHash(x);\n    uvec4 rz = uvec4(n, n*16807U, n*48271U, n*69621U); //see: http://random.mat.sbg.ac.at/results/karl/server/node4.html\n    return vec4((rz >> 1) & uvec4(0x7fffffffU))/float(0x7fffffff);\n}","name":"Common","description":"","type":"common"}]}