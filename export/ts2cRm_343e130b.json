{"ver":"0.1","info":{"id":"ts2cRm","date":"1586367449","viewed":51,"name":"TP 5/6 EL BESRI ADAM","username":"adam_elbesri","description":"3d modelization","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["eee"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\nconst float View = 2800.0;  // View distance\nconst float Epsilon = 0.01; // Marching epsilon\nconst int Steps = 200;      // Number of steps\n\n// Lipschitz constant\nconst float K=2.0;\n\n// Structure for objects\n// v : Field value\n// i : Texture index\nstruct V {\n    float v; \n    int i;\n};\n\n// Terrain -----------------------------------------------------------------------------------------------\n\n// Smooth compactly supported polynomial\n// x : Real\n// r : Radius\nfloat Smooth( in float x, in float r)\n{\n    x/=r;\n    x=clamp(x,0.0,1.0);\n    float y=(1.0-x*x);\n    return y*y*y;\n}\n\nfloat Smooth ( in float x, in float ri, float re)\n{\n    if (x>ri) return 1.0;\n    x=(x-ri)/(re-ri);\n    return Smooth(x,1.0);\n}\n\nfloat Gain ( float z, float z1, float z2)\n{\n    if (z<z1) return z;\n    if ( z>z2) return z;\n    float t=(z-z1)/(z2-z1);\n    float zz=z1+(z2-z1)*t*t*t;\n    return zz; \n}\n\nfloat Plat (float h,in float cz)\n{\n    return cz;\n    \n        }\n\nfloat Plateau (in vec2 p, in float h, in vec3 c, in float r, in float z1, in float z2)\n{\n    float d= length(p-c.xy);\n    float u= Smooth(d,r,2.0*r);\n    float h1=h;\n    float h2=Gain(h,z1,z2);\n    return mix(h1,h2,u);\n}\n\n\n\n// Sphere \n// p : Point, z will be used for height of flat part\n// c : Center \n// r : Radius\nfloat Flatten( in vec2 p, in float h, in vec3 c, in float r)\n{\n    float d = length(p-c.xy);\n    float u = Smooth(d,r);\n    float h1=h;\n    float h2=Plat(h,c.z);\n    return mix(h1,h2,u);\n}\n\nfloat Flatten2( in vec2 p, in float h, in vec3 c, in float r)\n{\n    float d = length(p-c.xy);\n    float u = Smooth(d,r);\n    float h1=h;\n    float h2=c.z+20.0*sin((p.x-c.x)/20.0);\n    return mix(h1,h2,u);\n}\n\n\n// Terrain heightfield\n// x : Position in the plane\nfloat Terrain( in vec2 p )\n{\n\t// Rotation matrix\n\tconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\n    const float l0=530.0;\n    const float a0=195.0;\n    \n\t// Scale\n    p = p/l0;\n    \n    float a = 0.0;\n    float b = 1.0;\n    for( int i=0; i<9; i++ )\n    {\n        float n = Noise(p);\n        a += b*n;\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\treturn -180.0+a0*a;                  //----------------------Niveau du terrain\n} \n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitTerrain(in vec3 p,int index)\n{\n    float z = Terrain( p.xy );\n    z = Flatten2(p.xy, z, vec3(-100.0,210.0,200.0), 200.0);\n    z = Flatten2(p.xy, z, vec3(400.0,-50.0,300.0), 300.0);\n    z = Flatten(p.xy, z, vec3(200.0,210.0,250.0), 400.0);\n    z = Flatten(p.xy, z, vec3(100.0,10.0,140.0), 120.0);\n    z = Plateau(p.xy,z,vec3(10.0,10.0,10.0), 400.0,10.0,50.00);\n     //z = Plateau(p.xy,z,vec3(10.0,10.0,100.0), 400.0,10.0,50.00);\n\n    float h = p.z - z; \n    return V(h,index);\n}\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : Point\n// c : Center \n// r : Radius\n// index : Texture index\nV Sphere(vec3 p, vec3 c,float r,int index)\n{\n  return V(length(p-c)-r,index);\n}\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\n// index : Texture index\nV Plane(vec3 p, vec3 n, vec3 o,int index)\n{\n    return V(dot((p-o),n),index);\n}\n\n// Union, preserve the color of the first object\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nV Union(V a,V b)\n{\n    if (a.v<b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        if (a.v<0.0)\n        {\n        \treturn V(b.v,a.i);\n        }\n        else\n        {\n            return V(b.v,b.i);\n        }\n    }\n}\n\n\tV Union(V a, V b, V c) {\n\treturn Union(Union(a, b), c);\n}\nV Union(V a, V b, V c, V d) {\n\treturn Union(Union(a, b), Union(c, d));\n}\n\n\n// Intersection, preserve the index of first object\n// a, b : field function of left and right sub-trees\nV Intersection(V a,V b)\n{\n    if (a.v>b.v)\n    {\n        return V(a.v,a.i);\n    }\n    else \n    {\n        return V(b.v,a.i);\n    }\n}\nV Intersection(V a, V b, V c) {\n    return Intersection(a, Intersection(b, c));\n}\nV Intersection(V a, V b, V c, V d, V e, V f) {\n    return Intersection(Intersection(a, b, c), Intersection(d, e, f));\n}\n// Difference\n// a, b : field function of left and right sub-trees\nV Diff ( V a, V b ) {\n    return V(max(a.v, -b.v), a.i);\n}\n\n\n\n\n//Boule\n  \nV Boule(vec3 p, float r) {\n    V u = Sphere(p,vec3(200.0,200.0,250.0),100.0,2);\n    \n    return u;\n}\n\n\n// Box\n\nV Box ( vec3 p, vec3 a, vec3 b, int i ) {\n    vec3 x = vec3(1.0, 0.0, 0.0);\n  \tvec3 y = vec3(0.0, 1.0, 0.0);\n  \tvec3 z = vec3(0.0, 0.0, 1.0);\n    return Intersection(\n            Plane(p, -x, a, i),\n            Plane(p, -y, a, i),\n            Plane(p, -z, a, i),\n            Plane(p, x, b, i),\n            Plane(p, y, b, i),\n            Plane(p, z, b, i)\n        );\n}\n\n\n//CylinderInf\nV CylinderInf( vec3 p, vec3 a, vec3 u, float r, int i ) {\n    float l= dot((p-a), u);\n    float d = distance(p, a); \n    return V( (sqrt(d*d - l*l) - r), i);\n}\n\n//Cylinder \nV Cylinder( vec3 p, vec3 a, vec3 b, float r, int i ) {\n    vec3 r3 = vec3(r, r, r);\n    vec3 l = (b-a)/length(b-a);\n    V ci = CylinderInf(p, a, l, r, i);\n    V pa = Plane(p, a, l, i);\n    V pb = Plane(p, b, -l, i);\n    return Intersection( ci, Box(p, a-r, b+r, 3) );\n}\n\n\n\t\n // Partie basse maison\nV Bas (vec3 p, vec3 o, float t) {\n\tvec3 a = vec3(-t, -t, -0.2*t) + o;\n    vec3 b = vec3(t, t, 1.8*t) + o;\n    return Box(p, a, b, 5);\n}\n\t\n\n\n\n// Water ------------------------------------------------------------------------------------------------\n\n// Water heightfield\n// x : Position in the plane\n\tfloat Water( in vec2 x ) \n{    \n    return 05.0*Noise(x/10.0 + iTime)+ 2.0;\n} \n\n\n// Implicit surface defining the terrain\n// p : Point\n// index : texture index\nV ImplicitWater(in vec3 p, int index)\n{\n\tfloat h = p.z - Water( p.xy );\n    return V(h,index);\n}\n\n// Scene --------------------------------------------------------------------------\n\n// Potential field of the object\n// p : point\nV Object(vec3 p)\n{\n  V u = Union(\n      ImplicitTerrain(p,0),\n      ImplicitWater(p,1)\n      //Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0),1)\n  );\n    u= Intersection(u,Sphere(p,vec3(0.0,0.0,0.0),450.0,2));\n    u = Diff(u, Boule(p, 100.0));\n    u=Diff(u,Box(p,vec3(250,-150,230),vec3(400,50,330),1));\n    \n    \n    \n      \n    u = Union(\tu,\n             \t\n             \t\tBas(p, vec3(110.0,-290.0, 10.0), 30.0));\n              \n    u= Union(u, Cylinder(p,vec3(200.0,50.0,50.0),vec3(100.0,-100.0,100.0),100.0,3));\n             \t\t\n             \n    u = Union(u, Sphere(p, vec3(110.0,-290.0,55.0),30.0,4));\n    u = Diff(u, Cylinder(p,vec3(-100,-100.0,80.0),vec3(300.0,300.0,80.0),40.0,1));\n    \n\n\n\n  return u;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n    float v = Object(p).v;\n  n.x = Object( vec3(p.x+eps, p.y, p.z) ).v - v;\n  n.y = Object( vec3(p.x, p.y+eps, p.z) ).v - v;\n  n.z = Object( vec3(p.x, p.y, p.z+eps) ).v - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = Object(p).v;\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v/K);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n\tvec3 color01(vec3 c) {\n    return c / vec3(255.0, 255.0, 255.0);\n}\nvec3 TextureRock(in vec3 p) {\n  return (\n      mix(vec3(0.92,0.91,0.90),\n          vec3(0.64,0.52,0.32),\n          Fbm(p/50.0)\n      ) - vec3(0.2, 0.3, 0.4)\n  );   \n}\n\n\nvec3 TextureWater(in vec3 p)\n{\n  return vec3(0.0,0.35,0.95);   \n}\n\nvec3 TextureBorder(in vec3 p)\n{\n    return vec3(0.25,0.24,0.24);   \n}\n\nvec3 TextureStone(in vec3 p) {\n    return mix(vec3(0.22,0.22,0.30),\n               vec3(0.60,0.62,0.80),\n               1.0*Noise(p/3.0) // - vec3(0.5, 0.5, 0.3)\n              );\n}\nvec3 TextureWood(in vec3 p) {\n    return mix(color01(vec3(66.0, 45.0, 15.0)),\n               color01(vec3(155.0, 113.1, 137.0)),\n               Fbm(p/5.0)\n              ) - vec3(0.2, 0.2, 0.2);\n}\n\n//Noise3D\n// p : Point\n\nvec3 Noise3D(vec3 p)\n    \n{\n \treturn vec3(Noise(p), Noise(p + vec3(165.0,126.0,127.0)), Noise(p + vec3(34.0,242.0,342.0)));\n}\n\nfloat Ligne(vec3 p)\n    \n{\n \tvec3 q = p + 1.0*Noise3D(p) + 0.5*Noise3D(p/0.5);\n    float z = abs(mod(q.z, 0.5) - 0.5)*3.0*Noise(p);\n    return smoothstep(z, 0.0, 0.02);\n}\n\nfloat Turbulence(vec3 p){\n    float d = sqrt(p.x*p.x+p.y*p.y);\n\tfloat t = Noise(p);\n    for(float i = 0.5; (i < 0.05); i /= 2.0)\n     \tt += i + Noise(p/i);\n    t /= 2.0;\n \treturn t; \n}\n\nvec3 Zebre(vec3 p, vec3 c1, vec3 c2) \n    \n{\n    float l = Ligne(p);\n    return mix(c1, c2, l);\n}\n\nvec3 Marbre(vec3 p,vec3 c1,vec3 c2)\n{\n \t vec3 a=p+Turbulence(vec3(Noise(p),Noise(p+vec3(6.4,7.0,2.8)),Noise(p+vec3(3.8,9.2,8.7))));\n     return Zebre(a,c1,c2);\n}\n\n\n\n\n// Compute color \n// p : Point\n// n : Normal\nvec3 Color(in vec3 p,in vec3 n)\n{\n    V vp= Object(p);\n    if (vp.i==0)\n        \n        return TextureRock(p);\n    else\n    \tif (vp.i==1)\n        \treturn TextureWater(p);\n        else\n            if (vp.i==2)\n        \t\treturn TextureBorder(p);\n            else\n                if (vp.i==3)\n                    return TextureStone(p);\n                else\n                    if (vp.i==4)\n                        return TextureWood(p);\n                    else\n                        if(vp.i==5)\n                            return Marbre(p,vec3(0.0,0.0,0.0),vec3(1.0,1.0,1.0));\n                        \n}\n\n\n\n// Rendering \n// ro, rd : Ray origin and direction\n// pip : Picture in picture boolean\nvec4 Render( in vec3 ro, in vec3 rd, bool pip )\n{\n    // Light direction\n    vec3 light1 = normalize( vec3(-0.8,-0.3,0.4) );\n   \n    \n\tvec3 col;\n    int it;\n    bool b;\n    float t = SphereTrace( ro, rd, View,b , it);\n\tvec3 p = ro + t*rd;\n    V vp= Object(p);\n    vec3 n = ObjectNormal( p );\n\n\n    col = Color(p,n);\n    // Sky\n    if( b==false )\n    {\n        col = vec3(0.35,0.65,0.95) - rd.z*rd.z*2.5;\n    }\n\telse \n\t{\n        // Mountains\t\t\n        if (vp.i==0)\n        {\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n                   \n\n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n        }\n        // Water\n        if (vp.i==1)\n        {\n        vec3 ref = reflect( rd, n );\n        float fre = clamp( 1.0+dot(rd,n), 0.0, 1.0 );\n        vec3 hal = normalize(light1-rd);\n            \n        float w;\n        col = TextureWater(p/40.0);\n        // Ecume\n        float ecume = smoothstep(0.0,200.0,t-w);\n        col = mix(vec3(0.8,0.8,1.0),col,ecume);\n\n        // Reflets\n        float reflet = 1.0;\n        reflet = smoothstep(0.95,0.90,dot(n, vec3(0.0,0.0,1.0)));\n        col = mix(col, vec3(0.9,0.9,1.0), reflet);\n                \n         // Pseudo diffuse lighting\n\t\tfloat dif = 0.5*(1.0+dot( light1, n ));\n        dif*=dif;\n        \n        col = 0.45*col+0.55*dif*vec3(0.35,0.35,0.35);\n        }\n        \n    \n        \n\t}\n    \n    // Shading for iterations\n    if (pip==true)\n    {\n    \tfloat s=float(it)/float(Steps);\n\t\treturn vec4(0.112+0.824*s,0.418+0.556*s,0.611-0.515*s,t);\n    }\n    else\n    {\n    \t// Gamma with square root\n    \treturn vec4( sqrt(col), t );\n    }\n}\n\n\n\nvec2 RayDirection(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Picture in picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   // Time as function of the position of the mouse\n    float a = 3.14*2.0*1.5*iMouse.x/iResolution.x;\n\n    // Camera transform\n    vec3 ro; \n    mat3 cam = Camera( a, ro);   \n\n    // Picture in picture\n    bool pip=true;\n    \n    // Pixel coordinates\n    vec2 p = RayDirection(fragCoord, pip);\n   \n    // Camera ray    \n    vec3 rd = cam * normalize(vec3(p,5.0));\n    \n    // Render\n    vec4 res = Render( ro, rd, pip );\n     \n    fragColor = vec4( res.xyz, 0.0 );\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing\n// Eric Galin\n\n// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in the plane\nfloat Hash(in vec2 p)  \n{\n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*(p.x+p.y) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec2 p)\n{\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix( Hash(i+vec2(0,0)), \n                        Hash(i+vec2(1,0)),f.x),\n                   mix( Hash(i+vec2(0,1)), \n                        Hash(i+vec2(1,1)),f.x),f.y);\n}\n\n// Fractal brownian motion with 4 frequencies\n// p : Point\nfloat Fbm(in vec3 p)\n{\n    return Noise(p)/2.0+Noise(p*2.0)/4.0+Noise(p*4.0)/8.0+Noise(p*8.0)/16.0;\n}\n\n// Camera\n// a: Rotation angle around z axis\n// ro : Ray origin\nmat3 Camera(float a, out vec3 ro)\n{\n\tfloat range=1450.0;\n    // Origin\n    ro = vec3(range*cos(a),range*sin(a),range/4.0);\n\t\n    // Target\n    vec3 ta = vec3(0.0,0.0,70.0);\n    \n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(0.0, 0.0,1.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}","name":"Common","description":"","type":"common"}]}