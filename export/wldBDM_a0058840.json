{"ver":"0.1","info":{"id":"wldBDM","date":"1612887258","viewed":92,"name":"TP1&2 - Nathanel","username":"Nathgrsm","description":"Rendu TP1&2\n\nFloral Greek Temple","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["tp1tp2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling - 2020.07.20\n// Eric Galin \n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Translation\n// p : point\n// t : translate vector\nvec3 Trans(vec3 a, vec3 b)\n{\n    return a+b;\n}\n\n// Rotation\n// p : point\n// r : rotation angle\n// x : rotation axis\nvec3 Rotation(vec3 p, float r, float ax )\n{\n    float x = p.x; float y = p.y; float z = p.z;\n    if (ax == 0.0){ // axis x\n        p.y = y*cos(r) - z*sin(r);\n        p.z = y*sin(r) + z*cos(r);\n    } else if (ax == 1.0){ // axis y\n        p.x = x*cos(r) + z*sin(r);\n        p.z = -x*sin(r) + z*cos(r);\n    } else { // axis z\n        p.x = x*cos(r) - y*sin(r);\n        p.y = x*sin(r) + y*cos(r);\n    }\n    return p;\n}\n\n// Noise\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nfloat fbm(vec3 p) {\n    float r = 0.0;\n    float amp = 1.0;\n    float freq = 1.0;\n    for(int i = 1; i <= 3; i++) {\n        r += amp * noise(freq * p);\n        freq *= pow(2.0, float(i));\n        amp *= pow(2.0, -float(i));\n    }\n    return r;\n}\n\n// Union\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n// Intersection\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n// Substraction\nfloat Subtraction(float a, float b )\n{\n    return max(-a,b);\n}\n\n// Cylinder\n// p : point\n// h : height\n// r : radius\nfloat Cylinder(vec3 p, float h, float r){\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(h,r);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n// Box\n// p : point\n// b : dimensions\nfloat Box( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n// sdRombus\n// p : point\n// la :\n// lb :\n// h :\n// ra :\nfloat sdRhombus(vec3 p, float la, float lb, float h, float ra)\n{\n  p = abs(p);\n  vec2 b = vec2(la,lb);\n  float f = clamp( (dot(b,b-2.0*p.xz))/dot(b,b), -1.0, 1.0 );\n  vec2 q = vec2(length(p.xz-0.5*b*vec2(1.0-f,1.0+f))*sign(p.x*b.y+p.z*b.x-b.x*b.y)-ra, p.y-h);\n  return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Potential field of the object\n// p : point\nfloat object(vec3 p)\n{\n  vec3 n = Trans(p, vec3(-8.0,0.0,4.5));\n  float r = fbm(n + vec3(iTime) + fbm(4.0*n + fbm(4.0*n + vec3(0, iTime, 0))));\n  \n  // PILLAR\n  float pilier = Cylinder(Rotation(Trans(p, vec3(0.0,0.0,0.0)),-1.57, 0.0), 1.0, 8.0);\n  float pilier1 = Cylinder(Rotation(Trans(p, vec3(5.0,0.0,0.0)),-1.57, 0.0), 1.0, 8.0);\n  float pilier2 = Cylinder(Rotation(Trans(p, vec3(10.0,0.0,0.0)),-1.57, 0.0), 1.0, 8.0);\n  float pilier3 = Cylinder(Rotation(Trans(p, vec3(15.0,0.0,0.0)),-1.57, 0.0), 1.0, 8.0);\n  float pilier4 = Cylinder(Rotation(Trans(p, vec3(20.0,0.0,0.0)),-1.57, 0.0), 1.0, 8.0);\n  float pilier5 = Cylinder(Rotation(Trans(p, vec3(25.0,0.0,0.0)),-1.57, 0.0), 1.0, 8.0);\n  float v1 = Union(pilier, pilier1);\n  float v2 = Union(pilier2, pilier3);\n  float v3 = Union(pilier4, pilier5);\n  \n  // GROUND\n  float ground = Box(Trans(p, vec3(12.0,10.0,8.0)), vec3(15.0,15.0,0.5));      // Step 4\n  float ground2 = Box(Trans(p, vec3(12.0,10.0,9.0)), vec3(16.0,16.0,0.5));     // Step 3\n  float ground3 = Box(Trans(p, vec3(12.0,10.0,10.0)), vec3(17.0,17.0,0.5));    // Step 2\n  float ground4 = Box(Trans(p, vec3(12.0,10.0,11.0)), vec3(18.0,18.0,0.5));    // Step 1\n  float ground5 = Box(Trans(p, vec3(12.0,10.0,12.0)), vec3(40.0,40.0,0.5));    // Place\n  float ground6 = Box(Trans(p, vec3(12.0,-18.0,11.0)), vec3(2.0,2.0,0.5));     // Flower pot (l.171)\n  float v4 = Union(ground, ground2);\n  float v5 = Union(ground3, ground4);\n  float v6 = Union(ground5, ground6);\n  \n  // ROOF\n  float roof = sdRhombus(Rotation(Trans(p, vec3(12.0,2.0,-8.0)),-1.57, 0.0),12.0,3.0,1.0,4.0);\n  float roof2 = Box(Trans(p, vec3(12.0,15.0,-8.0)), vec3(15.0,11.0,1.0));\n  float v7 = Union(roof, roof2);\n  \n  // WALL\n  float wall_back = Box(Rotation(Trans(p, vec3(12.0,25.0,0.0)),-1.57, 0.0), vec3(15.0,8.0,1.0));\n  float wall_front = Box(Rotation(Trans(p, vec3(12.0,10.0,0.0)),-1.57, 0.0), vec3(15.0,8.0,1.0));\n  float wall_left = Box(Rotation(Trans(p, vec3(-2.0,18.0,0.0)),-1.57, 1.0), vec3(8.0,8.0,1.0));\n  float wall_right = Box(Rotation(Trans(p, vec3(26.0,18.0,0.0)),-1.57, 1.0), vec3(8.0,8.0,1.0));\n  float v8 = Union(wall_back, wall_front);\n  float v9 = Union(wall_left, wall_right);\n  \n  // DECORATION\n  float bush = Sphere(p, vec3(-12.0,18.0,-10.0), r+1.0);\n\n  // PRINT\n  float x = Union(v1, v2);   // + 4 pillars\n  float x1 = Union(x, v3);   // + 2 pillars\n  float x2 = Union(x1, v4);  // + 2 steps\n  float x3 = Union(x2, v5);  // + 2 steps\n  float x4 = Union(x3, v6);  // + 1 place + 1 flower pot\n  float x5 = Union(x4, v7);  // + 2 roofs\n  float x6 = Union(x5, v8);  // + 2 walls (back & front)\n  float x7 = Union(x6, v9);  // + 2 walls (left & right)\n  float x8 = Union(x7, bush);  // + 1 flower\n  \n  return x8;                 // Return total object\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n  // Start at the origin\n  float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting ----------------------------------------------------------------------------------------------\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// r : Radius for ambient occlusion\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, float r, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,r,h,s);\n        if (!h) {ao+=1.0;}\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.452,0.551,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p+0.1*n,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    // Ambient color\n    vec3 ambient = 0.25+0.25*background(n);\n    \n    // Ambient occlusion\n    ambient += 0.15 * AmbientOcclusion(p+0.1*n,n,5.0,0) * vec3(1.0,1.0,1.0);\n    \n    // Shadow computation\n    float s = Shadow(p,n,l);\n    \n    // Phong diffuse\n    vec3 diffuse = 0.35  * clamp(dot(n, l),0.0,1.0) * vec3(1.0,1.0,1.0);\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = 0.25 * pow(clamp(dot(r,l),0.0,1.0),18.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t = float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p = (-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip = true;\n    }\n       else\n       {\n           pip = false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n, rd);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n  color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Modeling\n// Eric Galin\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( float seed, vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m, vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.5;\n    \n    // Origin\n    ro=vec3(80.0,0.0,10.0);\n    ro*=Rz(a); \n\n    // Target\n    vec3 ta = vec3(-10.0,0.0,0.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n","name":"Common","description":"","type":"common"}]}