{"ver":"0.1","info":{"id":"WlXGzs","date":"1557254715","viewed":131,"name":"D&D 004 - Octahedron Attack ","username":"Ryp","description":"Repetition is cool. But also easy =)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdOctahedron( in vec3 p, in float s)\n{\n    p = abs(p);\n    float m = p.x+p.y+p.z-s;\n    vec3 q;\n         if( 3.0*p.x < m ) q = p.xyz;\n    else if( 3.0*p.y < m ) q = p.yzx;\n    else if( 3.0*p.z < m ) q = p.zxy;\n    else return m*0.57735027;\n    \n    float k = clamp(0.5*(q.z-q.y+s),0.0,s); \n    return length(vec3(q.x,q.y-s+k,q.z-k)); \n}\n\nfloat saturate(float v)\n{\n    return clamp(v, 0.0, 1.0);\n}\n\nmat4 viewMatrix(vec3 eye, vec3 center, vec3 up) {\n\tvec3 f = normalize(center - eye);\n\tvec3 s = normalize(cross(f, up));\n\tvec3 u = cross(s, f);\n\treturn mat4(\n\t\tvec4(s, 0.0),\n\t\tvec4(u, 0.0),\n\t\tvec4(-f, 0.0),\n\t\tvec4(0.0, 0.0, 0.0, 1)\n\t);\n}\n\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat opSmoothUnion( float d1, float d2, float k )\n{\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  \tvec3 d = abs(p) - b;\n  \treturn length(max(d,0.0)) + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\n\nfloat sphereSDF(vec3 p)\n{\n    return length(p) - 1.0;\n}\n\nconst int MAX_MARCHING_STEPS = 200;\nconst float EPSILON = 0.001f;\n\nfloat onion( in float d, in float h )\n{\n    return abs(d)-h;\n}\n\nfloat opRep( in vec3 p, in vec3 c)\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return intersectSDF(onion(onion(sdOctahedron(q, 0.5),0.05), 0.01), -sdBox(q+vec3(0,0,-1.0+ 2.0 *mod(iTime*.3, 1.0)), vec3(1,1,0.14)));\n}\n\nfloat sceneSDF(vec3 p)\n{\n    return opRep(p + vec3(iTime,iTime*0.5,0), vec3(2.0, 2.0, 2.0));\n}\n\nfloat shortestDistanceToSurface(vec3 eye, vec3 marchingDirection, float start, float end) {\n    float depth = start;\n    for (int i = 0; i < MAX_MARCHING_STEPS; i++) {\n        float dist = sceneSDF(eye + depth * marchingDirection);\n        if (dist < EPSILON) {\n\t\t\treturn depth;\n        }\n        depth += dist;\n        if (depth >= end) {\n            return end;\n        }\n    }\n    return end;\n}\n\nvec3 estimateNormal(vec3 p)\n{\n    return normalize(vec3(\n        sceneSDF(vec3(p.x + EPSILON, p.y, p.z)) - sceneSDF(vec3(p.x - EPSILON, p.y, p.z)),\n        sceneSDF(vec3(p.x, p.y + EPSILON, p.z)) - sceneSDF(vec3(p.x, p.y - EPSILON, p.z)),\n        sceneSDF(vec3(p.x, p.y, p.z  + EPSILON)) - sceneSDF(vec3(p.x, p.y, p.z - EPSILON))\n    ));\n}\n\nconst float pi = 3.14159265358;\n\nfloat deg2rad(float angleDeg)\n{\n \treturn (angleDeg * pi) / 180.f;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 positionUV = fragCoord / iResolution.xy;\n    vec2 positionNDC = 2.0 * positionUV - 1.0;\n    positionNDC.y = -positionNDC.y;\n    \n    // Camera setup\n    float cameraHFovAngle = deg2rad(55.f);\n    float cameraNear = 0.1f;\n    float cameraFar = 200.0f;\n    vec3 eyePositionWS = vec3(3.5f, 1.5f + sin(iTime * 0.2), 6.5f);\n\n    // Viewport calculations\n    float aspectRatioInv = iResolution.y / iResolution.x;\n    \n    float horizontalFov = cameraNear * tan(cameraHFovAngle * 0.5f);\n \tfloat verticalFov = horizontalFov * aspectRatioInv;\n    vec2 cameraViewportExtent = vec2(horizontalFov, verticalFov);\n    \n    vec3 viewRayDirectionWS = vec3(positionNDC * cameraViewportExtent, cameraNear);\n    \n    viewRayDirectionWS = (viewMatrix(eyePositionWS, vec3(0.5, 0.5, 0.5 + cos(iTime * 0.5) * 0.5), vec3(0.0, 0.0, 1.0)) * vec4(viewRayDirectionWS, 0.0)).xyz;        \n    viewRayDirectionWS = normalize(-viewRayDirectionWS);\n    \n    float rayDepth = shortestDistanceToSurface(eyePositionWS, viewRayDirectionWS, cameraNear, cameraFar);\n\n    vec3 p = eyePositionWS + rayDepth * viewRayDirectionWS;\n    \n    vec3 lightPosWS = vec3(2.0, 4.0, 6.0);\n    vec3 normalWS = estimateNormal(p);\n    vec3 L = normalize(lightPosWS - p);\n    vec3 V = normalize(eyePositionWS - p);\n    vec3 R = normalize(reflect(-L, normalWS));\n    \n    float dotLN = saturate(dot(L, normalWS));\n    float dotRV = saturate(dot(R, V));\n        \n    // Output some color\n    vec3 color = vec3(0.0);\n\t\n    if (rayDepth > cameraFar - EPSILON)\n    {\n        // Didn't hit anything\n        color = vec3(0.0);\n    }\n    else\n    \tcolor = vec3(0.9, 0.7, 0.2) * dotLN + vec3(.1, .1, .1);\n    \n    // Distance fog\n    vec3 fogColor = vec3(0.9, 0.3, 0.2);\n    color = mix(fogColor, color, 1.0 / (1.0 + rayDepth * 0.1));\n    \n    // Output color\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}