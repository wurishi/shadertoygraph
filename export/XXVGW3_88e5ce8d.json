{"ver":"0.1","info":{"id":"XXVGW3","date":"1718317999","viewed":49,"name":"bae #018 ~ Dress","username":"BretHudson","description":"The texture of a dress I saw","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 baseColor = vec3(0.992, 0.988, 0.969);\nvec3 lineColor = vec3(0.063, 0.282, 0.518);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float t = -uv.x * 6.3 + uv.y * 1.7 + iTime * 1.3;\n    uv.y += sin(t) * .02;\n    \n    float tint = .09;\n    vec3 col = mix(lineColor, baseColor, texture(iChannel0, fract(uv)).x);\n    col *= 1. - tint + cos(t) * tint;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI     3.1415926535\n#define TAU    6.2831853071\n#define SQRT2  1.41421356237\n\nmat2 rot2D(float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float total = 0.;\n    for (float y = -1.; y <= 1.; ++y)\n    {\n        for (float x = -1.; x <= 1.; ++x)\n        {\n            vec2 gv = fract(uv * 2.) * 2. - 1.;\n            gv += vec2(x * 2., y * 2.);\n            gv *= rot2D(PI * .25);\n            gv *= SQRT2;\n\n            gv += .2 * sin(gv.yx * vec2(-1., 1.) * PI);\n\n            float d = abs(max(abs(gv.x), abs(gv.y)) - 1.) - .1;\n            d = smoothstep(.01, .0, d);\n\n            total = max(total, clamp(0., 1., d));\n        }\n    }\n    \n    vec3 col = vec3(1.-(total-texture(iChannel0, uv * 5.).x * .3));\n    fragColor = vec4(col, 1);\n}","name":"Buffer A","description":"","type":"buffer"}]}