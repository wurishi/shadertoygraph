{"ver":"0.1","info":{"id":"7tj3RK","date":"1624296173","viewed":56,"name":"ray trace ball","username":"incription","description":"cool","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytrace"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Sphere(vec3 center, float radius, vec3 ro, vec3 rd){\n    vec3 oc = ro - center;\n    float a = dot(rd, rd);\n    float b = 2.0 * dot(oc, rd);\n    float c = dot(oc,oc) - radius*radius;\n    float discriminant = b*b - 4.*a*c;\n    \n    if(discriminant < 0.){\n        return -1.0;\n    }\n    else{\n        return (-b - sqrt(discriminant)) / (2.0*a);\n    }\n}\n\nfloat RayTrace(vec3 ro, vec3 rd) {\n    return Sphere(vec3(sin(iTime),0,cos(iTime)), .5, ro, rd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0., 0, 2.);\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    float d = RayTrace(ro, rd);\n    \n    vec3 p = ro + rd * d;\n    vec3 n = normalize(p-vec3(sin(iTime),0,cos(iTime)));\n    \n    //DONT ASK\n    float dif = float(d != -1.);\n    col = vec3(dif) * dot(rd,-n);\n    \n    col = pow(col, vec3(.4545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}