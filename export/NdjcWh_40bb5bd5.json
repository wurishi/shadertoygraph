{"ver":"0.1","info":{"id":"NdjcWh","date":"1643424572","viewed":191,"name":"Bilibili TV","username":"pdcxs","description":"Draw a bilibili tv.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["3d","tv","icon","bilibili"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RAYMARCH_TIME 128\n#define PRECISION .001\n#define AA 5\n#define PI 3.14159265\n\nvec2 fixUV(in vec2 c) {\n    return (2. * c - iResolution.xy) / min(iResolution.x, iResolution.y);\n}\n\nfloat sdfBox(in vec3 p, in vec3 r, float rad) {\n    vec3 b = abs(p) - r;\n    return length(max(b, 0.)) + min(max(max(b.x, b.y), b.z), 0.) - rad;\n}\n\nfloat sdTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\n    return length(q) - t.y;\n}\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb) {\n    p.x = abs(p.x);\n    float k = (sc.y * p.x > sc.x * p.y) ? dot(p.xy, sc) : length(p.xy);\n    return sqrt(dot(p, p) + ra * ra - 2.0 * ra * k) - rb;\n}\n\nvec4 opElongate(in vec3 p, in vec3 h) {\n    vec3 q = abs(p) - h;\n    return vec4(max(q, 0.0), min(max(q.x, max(q.y, q.z)), 0.0));\n}\n\nvec2 opU(vec2 a, vec2 b) {\n    return a.x < b.x ? a : b;\n}\n\nvec2 map(in vec3 p) {\n    p.xz *= mat2(0., 1., 1., 0.);\n    vec3 q = vec3(abs(p.x), p.yz);\n    vec2 d = vec2(sdfBox(p - vec3(0., 1.3, 0.), vec3(1.5, .9, 1.), .3), 2.);\n\n    {\n        // frame\n        vec4 w = opElongate(p.xzy - vec3(0., 1.3, 1.3), vec3(1.2, 0., 0.55));\n        float t = w.w + sdTorus(w.xyz, vec2(.3, .05));\n        d = opU(d, vec2(t, 3.));\n    }\n    {\n        // eyes\n        d = opU(d, vec2(sdCapsule(q, vec3(.4, 1.6, 1.3), vec3(1., 1.3, 1.3), .1), 3.));\n    }\n    {\n        // mouth\n        float an = 70. / 180. * PI;\n        d = opU(d, vec2(sdCappedTorus(q * vec3(1., -1., 1.) - vec3(.285, -1., 1.3), vec2(sin(an), cos(an)), .3, .07), 3.));\n    }\n    {\n        // ear\n        d = opU(d, vec2(sdCapsule(q, vec3(1.3, 3.0, 1.), vec3(.2, 2.0, 1.), .1), 3.));\n    }\n    {\n        // legs\n        d = opU(d, vec2(sdCapsule(vec3(q.x, p.y, abs(p.z)), vec3(1.3, .5, 1.0), vec3(1.5, .1, 1.3), .1), 3.));\n    }\n    return d;\n}\n\nvec2 rayMarch(in vec3 ro, in vec3 rd) {\n    float t = 0.1;\n    float tmax = 40.;\n    vec2 res = vec2(-1.);\n    if(rd.y < 0.) {\n        float tp = -ro.y / rd.y;\n        tmax = min(tmax, tp);\n        res = vec2(tp, 1.);\n    }\n    for(int i = 0; i < RAYMARCH_TIME && t < tmax; i++) {\n        vec3 p = ro + t * rd;\n        vec2 d = map(p);\n        if(d.x < PRECISION) {\n            res = vec2(t, d.y);\n            break;\n        }\n        t += d.x;\n    }\n    return res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal(in vec3 p) {\n    const float h = 0.0001;\n    const vec2 k = vec2(1, -1);\n    return normalize(k.xyy * map(p + k.xyy * h).x +\n        k.yyx * map(p + k.yyx * h).x +\n        k.yxy * map(p + k.yxy * h).x +\n        k.xxx * map(p + k.xxx * h).x);\n}\n\nmat3 setCamera(vec3 ta, vec3 ro, float cr) {\n    vec3 z = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr), 0.);\n    vec3 x = normalize(cross(z, cp));\n    vec3 y = cross(x, z);\n    return mat3(x, y, z);\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat softShadow(in vec3 ro, in vec3 rd, float k) {\n    float res = 1.0;\n    float ph = 1e20;\n    float tmin = .1;\n    float tmax = 10.;\n    for(float t = tmin; t < tmax;) {\n        float h = map(ro + rd * t).x;\n        if(h < 0.001)\n            return 0.0;\n        float y = h * h / (2.0 * ph);\n        float d = sqrt(h * h - y * y);\n        res = min(res, k * d / max(0.0, t - y));\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// https://iquilezles.org/articles/checkerfiltering\nfloat checkersGrad(in vec2 uv, in vec2 ddx, in vec2 ddy) {\n    vec2 w = max(abs(ddx), abs(ddy)) + 0.01;\n    vec2 i = (2. * abs(fract(.5 * (uv - 0.5 * w)) - .5) - (2. * abs(fract(.5 * (uv + 0.5 * w)) - .5))) / w;\n    return 0.5 - 0.5 * i.x * i.y;\n}\n\nvec3 render(in vec2 uv, in vec2 px, in vec2 py) {\n    float ro_an = .3 * sin(.3 * iTime);\n    vec3 ro = vec3(4. * cos(ro_an), 1. + .5 * sin(.3 * iTime), 4. * sin(ro_an));\n    if(iMouse.z > 0.01) {\n        float theta = iMouse.x / iResolution.x * 2. * PI;\n        ro = vec3(4. * cos(theta), 2. - iMouse.y / iResolution.y * 2., 4. * sin(theta));\n    }\n    vec3 ta = vec3(0., 1., 0.);\n    mat3 cam = setCamera(ta, ro, 0.);\n    float fl = 1.;\n    vec3 rd = normalize(cam * vec3(uv, fl));\n    vec3 bg = vec3(.7, .7, .9);\n    vec3 color = bg - rd.y * vec3(.1);\n    vec2 t = rayMarch(ro, rd);\n    if(t.y > 0.) {\n        vec3 p = ro + t.x * rd;\n        vec3 n = (t.y < 1.1) ? vec3(0., 1., 0.) : calcNormal(p);\n        vec3 light = vec3(6., 4., 5.);\n        float dif = clamp(dot(normalize(light - p), n), 0., 1.);\n        p += PRECISION * n;\n        dif *= softShadow(p, normalize(light - p), 10.);\n        float amb = 0.5 + 0.5 * dot(n, vec3(0., 1., 0.));\n        vec3 c = vec3(0.);\n        if(t.y > 1.9 && t.y < 2.1) {\n            // Body\n            c = vec3(1.);\n        } else if(t.y > 2.9 && t.y < 3.1) {\n            // Black\n            c = vec3(0.);\n        } else if(t.y > 0.9 && t.y < 1.1) {\n            // plane\n            vec3 rdx = normalize(cam * vec3(px, fl));\n            vec3 rdy = normalize(cam * vec3(py, fl));\n            vec3 ddx = ro.y * (rd / rd.y - rdx / rdx.y);\n            vec3 ddy = ro.y * (rd / rd.y - rdy / rdy.y);\n            c = vec3(.1) + vec3(0.1) * checkersGrad(p.xz, ddx.xz, ddy.xz);\n        }\n        color = amb * c + dif * vec3(.7);\n    }\n    return sqrt(color);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec3 color = vec3(0.);\n    for(int m = 0; m < AA; m++) {\n        for(int n = 0; n < AA; n++) {\n            vec2 offset = 2. * (vec2(float(m), float(n)) / float(AA) - .5);\n            vec2 uv = fixUV(fragCoord + offset);\n            vec2 px = fixUV(fragCoord + vec2(1., 0.) + offset);\n            vec2 py = fixUV(fragCoord + vec2(0., 1.) + offset);\n            color += render(uv, px, py);\n        }\n    }\n    fragColor = vec4(color / float(AA * AA), 1.);\n}\n","name":"Image","description":"","type":"image"}]}