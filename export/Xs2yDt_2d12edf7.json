{"ver":"0.1","info":{"id":"Xs2yDt","date":"1494373676","viewed":520,"name":"03. Noise and distortion.","username":"liamegan","description":"Distortion of an image using noise as input","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","distortion","fractalnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float noise(in vec2 position) {\n    return fract(sin(dot(position.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nfloat interpolate(float a, float b) {\n    return a + ( b - a ) * ( ( 1.0 - a ) / ( b - a ) );\n}\n\n// Value Noise courtesy of Book of Shaders\n// https://thebookofshaders.com/11/\nfloat noise2d(vec2 uv) {\n    \n    vec2 pos = floor(uv);\n    vec2 fractional = fract(uv);\n    \n    // four corners\n    float a = noise(pos);\t\t\t\t\t// bottom left\n    float b = noise(pos + vec2(1., 0.));\t// bottom right\n    float c = noise(pos + vec2(1., 1.));\t// top right\n    float d = noise(pos + vec2(0., 1.));\t// top left\n    \n    vec2 intermix = smoothstep(0., 1., fractional);\n    \n    float value = mix(a, b, intermix.x);\n    value += (d - a) * intermix.y * (1.0 - intermix.x);\n    value += (c - b) * intermix.x * intermix.y;\n    \n    return value;\n}\n\n// Fractal noise courtesy of iq\n// https://www.shadertoy.com/view/XdXGW8\nfloat fractalNoise2d(vec2 uv) {\n    uv *= 3.0;\n    uv.x -= iTime / 5.0;\n    uv.y += sin(iTime / 5.0) * 2.0;\n    \n    mat2 rotate = mat2(1.6 - sin(iTime / 100.0) / 10.0, 1.2, -1.2, 1.6);\n    \n    float value = 0.5 * noise2d(uv);\n    uv *= rotate;\n    value += 0.25 * noise2d(uv);\n    uv *= rotate;\n    value += 0.125 * noise2d(uv);\n    uv *= rotate;\n    value += 0.0625 * noise2d(uv);\n    \n    return value;\n}\n    \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//    vec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 uv = (fragCoord.xy - .5 * iResolution.xy) / iResolution.y;    \n//    uv += 0.5;\n    \n    float value = fractalNoise2d(uv);\n    \n//    uv += (0.5 - value) / 20.0;\n//    fragColor = texture(iChannel0, uv);\n    \n    float rotationAmt = iMouse.y / iResolution.y * 2.0;\n    \n    uv *= mat2(cos(rotationAmt), -sin(rotationAmt), sin(rotationAmt), cos(rotationAmt));\n    \n    uv.y *= 10.0;\n    uv += (0.5 - value * 3.0);\n    \n    fragColor = vec4(smoothstep(0.6, 0.55, fract(uv.y)) * smoothstep(0.35, 0.4, fract(uv.y)));\n}","name":"Image","description":"","type":"image"}]}