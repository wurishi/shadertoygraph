{"ver":"0.1","info":{"id":"cdffRl","date":"1689259671","viewed":67,"name":"Kaleidoscope Fract","username":"saltysasha","description":"Just another shader following Kishimisu's tutorial. I tried some extra things to build on top of it.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["learning","kishimisu"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(0.50, 0.20, 0.25);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.00 - iResolution.xy) / iResolution.y;\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n    \n    float time = iTime * .01;\n    float angle = -time + PI;\n    mat2 rot = mat2(cos(angle),-sin(angle),sin(angle),cos(angle));\n\n    for (float i = 0.0; i < 5.0; i++){\n        uv = rot * uv;\n        uv = fract(uv * 1.5) - 0.5;\n        \n        float d = length(uv) * exp(-length(uv0));\n\n        vec3 col = palette(length(uv0) + i*.4 + iTime*.4);\n\n        d = sin(d*8.0 + iTime*.4) / 8.0;\n        d = abs(d);\n        d = pow(0.01 / d, 4.0);\n        d = clamp(d, 0.0, 1.0);\n\n        finalColor += col * d;\n        \n    }\n    \n    // Output to screen\n    fragColor = vec4(uv0,1.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}