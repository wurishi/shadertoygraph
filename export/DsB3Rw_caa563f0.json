{"ver":"0.1","info":{"id":"DsB3Rw","date":"1667384801","viewed":225,"name":"Pentagram engine","username":"gaz","description":"3D","likes":21,"published":1,"flags":8,"usePreview":1,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265\n#define N(x) fract(sin((x)*333.333))\n\nvec3 lookAt(vec3 rd,vec3 ro,vec3 ta,vec3 up)\n{\n    vec3 w=normalize(ta-ro),u=normalize(cross(w,up));\n    return rd.x*u+rd.y*cross(u,w)+rd.z*w;\n}\n\nvec3 pointAt(vec3 p, vec3 dir, vec3 up){\n    vec3 u=normalize(cross(dir,up));\n\treturn vec3(dot(p,u),dot(p,cross(u,dir)),dot(p,dir));\n}\n\nvec3 rot(vec3 p,vec3 a,float t) \n{\n\ta=normalize(a);\n\treturn mix(a*dot(p,a),p,cos(t))+sin(t)*cross(p,a);\n}\n\nvec2 rot(vec2 p,float t)\n{\n    return p*sin(t)+vec2(-p.y,p.x)*cos(t);\n}\n\nvec3 hue(float h)\n{\n    return (cos((h)*6.3+vec3(0,23,21)))*.5+.5;\n}\n\nvec2 pSFold(vec2 p,float n)\n{\n    n*=0.5;\n    float a = asin(sin(atan(p.x,p.y)*n)*.97)/n;\n    return vec2(sin(a),cos(a))*length(p);\n}\n\nfloat sabs(float x)\n{\n    return sqrt(x*x+1e-3);\n}\n\nvec2 signedSFold(vec2 p, vec2 v)\n{\n    float g=dot(p,v);\n    return (p-(g-sabs(g))*v)*vec2(sign(g),1);\n}\n\nfloat bevel(float x)\n{\n    return max(.03,abs(x));\n}\nvec2 bFold90(vec2 p)\n{\n    vec2 v=normalize(vec2(1,-1)); ;\n    float g=dot(p,v);\n    return p-(g-bevel(g))*v;\n}\n\nfloat box(vec3 p, vec3 s)\n{\n    p=abs(p)-s;\n    p.xz=bFold90(p.xz);\n    p.xy=bFold90(p.xy);\n    return p.x;\n}\n\nfloat deA(vec3 p){\n\tp=rot(p,hue(iTime*.1)*2.-1.,iTime*.2);\n\tp.xy=rot(p.xy,iTime*1.);\n\tfloat t=sin(iTime*1.);\n\tt=clamp(t,.001,3.);\n    float d=1e3;\n    for(int i=0;i<12;i++){\n    \tvec3 q=p,w=normalize(vec3((sqrt(5.)*.5+.5)*t,1,0)); \n        w.xy*=vec2(i>>1&1,i&1)*2.-1.;\n        w=vec3[](w,w.yzx,w.zxy)[i%3];\n        q=pointAt(q,w,-sign(w.x+w.y+w.z)*sign(w)*w.zxy);\n       \tq.z-=1.5;\n        q.xy=pSFold(q.xy,5.);\n        d=min(d,length(q-clamp(q,vec3(-1,0,0),vec3(1,.4,2)))-.05);\n        d=min(d,length(q-clamp(q,-vec3(.8,.8,.3),vec3(.8,.8,.3)))-.1);\n        q.z-=2.+sin(iTime*3.+float(i))*.7;\n        q.z-=clamp(q.z,-.1,.1);\n        q.y-=.7;\n        d=min(d,length(q-clamp(q,-vec3(1,.2,.2),vec3(1,.2,.3)))-.05);\n    }\n    return d;\n}\n\nfloat deB(vec3 p)\n{\n    p.xz=rot(p.xz,iTime*.2);\n    p.xy=rot(p.xy,-iTime*.1);\n    p.xy=vec2(atan(p.x,p.y)/PI*16., length(p.xy)-6.);\n    p.x=mod(p.x,2.)-1.;\n    p.y=abs(p.y)-.3;\n    p.x=abs(p.x);\n    p.x-=.3;\n    p.xy=signedSFold(p.xy,normalize(vec2(2,1)));\n    p.x+=.2;\n    p.xy=signedSFold(p.xy,normalize(vec2(2,-1)));\n    return box(p,vec3(.8,.1,.5));\n}\n\nfloat deC(vec3 p)\n{\n  \tp=p.zyx;\n    p.xz=rot(p.xz,iTime*.1);\n    p.xy=rot(p.xy,iTime*.2);\n    p.xy=vec2(atan(p.x,p.y)/PI*16., length(p.xy)-7.);\n    p.x=mod(p.x,2.)-1.;\n    p.y=abs(p.y)-.3;\n    p.x=abs(p.x);\n    p.x-=.3;\n    p.xy=signedSFold(p.xy,normalize(vec2(2,1)));\n    p.x+=.2;\n    p.xy=signedSFold(p.xy,normalize(vec2(2,-1)));\n    p.z=abs(p.z)-3.;\n    return box(p,vec3(.8,.1,.5));\n}\n\nfloat map(vec3 p)\n{\n    return min(deA(p),min(deB(p),deC(p)));\n}\nvec3 calcNormal(vec3 p)\n{\n    vec3 n=vec3(0);\n    for(int i=0; i<4; i++){\n        vec3 e=.001*(vec3(9>>i&1, i>>1&1, i&1)*2.-1.);\n        n+=e*map(p+e);\n    }\n    return normalize(n);\n}\n\nfloat march(vec3 ro, vec3 rd, float near, float far)\n{\n    float t=near,d;\n    for(int i=0;i<70;i++)\n    {\n        t+=d=map(ro+rd*t);\n        if (d<.001)return t;\n        if (t>=far)break;\n    }\n    return far;\n}\n\nfloat calcShadow( vec3 light, vec3 ld, float len ) {\n\tfloat depth = march( light, ld, 0.0, len );\t\n\treturn step( len - depth, 0.01 );\n}\n\nvec3 doColor(vec3 p)\n{\n    if (deA(p)<.001)return vec3(.9,.2,.2)*1.2;\n    if (deB(p)<.001)return vec3(.05,.4,.2);\n\treturn vec3(.2,.4,.7);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p=(fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0,4,10);\n    vec3 ta = vec3(0);\n    vec3 rd = normalize(vec3(p, 1));\n    rd=lookAt(rd,ro, ta,vec3(0,1,0));\n    float maxd=50.0;\n    vec3 bg =vec3(.7,.8,.95)*.4;\n\tvec3 col=bg;\n\tfloat t=march(ro,rd,0.0,maxd);\n    if(t<maxd)\n    {\n        vec3 p=ro+rd*t;\n        col=doColor(p); \n    \tvec3 n = calcNormal(p);      \n\t\tvec3 lightPos=vec3(2,8,2);\n    \tvec3 li = lightPos - p;\n\t\tfloat len = length( li );\n\t\tli /= len;\n\t\tfloat dif = clamp(dot(n, li), .8, 1.);\n    \tfloat sha = min(1.,calcShadow( lightPos, -li, len )+.8);\n        col *= max(sha*dif, .3);\n        float rimd = pow(clamp(1.- dot(reflect(-li, n), -rd), 0., 1.), 2.);\n\t\tfloat frn = rimd+2.2*(1.0-rimd);\n    \tcol *= frn*.7;\n    \tcol *= max(.5+.5*n.y,.0);\n    \tcol += .7*vec3(.7,.6,.4)*pow(clamp(dot(reflect(rd, n), li), 0., 1.), 80.);\n    \tcol = mix(bg,col*1.5, exp(-.008*t*t));\n    }\n    fragColor=vec4(col,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 rot(vec2 p,float t){\n    return p*sin(t)+vec2(-p.y,p.x)*cos(t);\n}\n\nvec2 mainSound( int samp, float time )\n{\n    vec2 p=vec2(time*300.);\n    p*=vec2(1.2 ,1);\n    float h=0.,s=1.;\n    for(int i=0;i++<3;s+=s)\n    {\n        p=rot(p,1.3);\n        h+=abs(sin(p.x*s)+sin(p.y*s))/s;\n    } \n    return .5*vec2(h*2.-1.);\n}","name":"Sound","description":"","type":"sound"}]}