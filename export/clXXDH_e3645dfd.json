{"ver":"0.1","info":{"id":"clXXDH","date":"1674656392","viewed":261,"name":"get the normal from the depth","username":"Poisson","description":"Just SSN (screen space normal).","likes":12,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","fractal","ray","postprocessing","sdf","mandelbulb","raymarcher","normal","depth","buffer","ssao","ssn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RELIEF 1. // relief of the normal\n\n// Screen space normal function\n\n// get the depth of the pixel\nfloat getDepth(vec2 p) {\n    // normalized pixel coordinates\n    vec2 q = p/iResolution.xy;\n    return texture(iChannel0, q).w; // depth\n}\n\n// get the 3d position of the pixel\nvec3 getVector(vec2 p) {\n    // normalized pixel coordinates\n    vec2 q = p/iResolution.xy;\n    // depth\n    float t = RELIEF*getDepth(p);\n    return vec3(q, t); // 3d vector\n}\n\nvec3 calcNormal(vec2 p) {\n    vec3 w = getVector(p); // center vector\n    vec3 u = getVector(p+vec2(0,1)); // top vector\n    vec3 v = getVector(p+vec2(1,0)); // right vector\n   \n    return normalize(cross(w-u,w-v)); // normal\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 n = calcNormal(fragCoord); // normal\n    vec3 col = .5+.5*n;\n    //col = vec3(1)*clamp(dot(n,vec3(.57735)),0.,1.);\n    \n    col = pow(col, vec3(.4545)); // gamma correction\n\n    // output\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// mandelbulb sdf\n// thanks to iq: https://www.shadertoy.com/view/ltfSWn\nfloat map(vec3 p) {\n    vec3 w = p;\n    float m = dot(w,w);\n\n\tfloat dz = 1.;\n    \n\tfor (int i=0; i<2; i++) {\n\t\tdz = 8.*pow(m,3.5)*dz + 1.;\n      \n        float r = length(w);\n        float b = 8.*acos(w.y/r);\n        float a = 8.*atan(w.x, w.z);\n        w = p + pow(r,8.) * vec3(sin(b)*sin(a), cos(b), sin(b)*cos(a));\n                \n        m = dot(w,w);\n\t\tif(m>256.) break;\n    }\n\n    return .25*log(m)*sqrt(m)/dz;\n}\n\n// raymarching function\nfloat intersect(vec3 ro, vec3 rd) {\n    float t = 0.; // distance travelled\n    \n    for (int i=0; i<256; i++) { // raymarching loop\n        vec3 p = ro + rd*t; // current point\n        \n        float h = map(p); // distance to the scene\n        if (h<.0001) break; // we hit the surface\n        t += h; // march\n        if (t>5.) return 5.;\n    }\n    // return the distance\n    return t;\n}\n\n// camera function\nmat3 setCamera(vec3 ro, vec3 ta) {\n    vec3 w = normalize(ta - ro);\n    vec3 u = normalize(cross(w, vec3(0,1,0)));\n    vec3 v = cross(u, w);\n    return mat3(u, v, w);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // pixel coordinates centered to the origin\n    vec2 p = (fragCoord - .5*iResolution.xy) / iResolution.y;\n    // normalized mouse coordinates\n    vec2 m = (iMouse.xy - .5*iResolution.xy) / iResolution.y;\n\n    float an = m.x*3.141592;\n    vec3 ro = 3.*vec3(sin(an),m.y,cos(an)); // ray origin\n    vec3 ta = vec3(0); // target\n    mat3 ca = setCamera(ro, ta); // camera matrix\n    \n    vec3 rd = ca * normalize(vec3(p,1.5)); // ray direction\n    \n    float t = intersect(ro, rd); // scene depth\n    fragColor = vec4(0,0,0,t); // return only the scene depth\n}","name":"Buffer A","description":"","type":"buffer"}]}