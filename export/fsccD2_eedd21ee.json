{"ver":"0.1","info":{"id":"fsccD2","date":"1654037216","viewed":110,"name":"Star with rays","username":"r0mko","description":"Draws a star with rays. Move mouse to change glow and rays intensity","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["learning"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.1415926535897932384626433832795\nconst float gamma = 1.4;\nconst float exposure = 1.1;\nfloat glowIntensity = 15000.0;\nfloat rayIntensity = 5000.0;\nconst float rayCrispness = 580.0;\nconst int numRays = 4;\nconst float angle = -45.0;\nconst vec4 color = vec4(0.03, 0.04, 0.1, 1.0);\nconst float rayWidth = 2.0;\n\nvec2 rotate(vec2 v, float fi) {\n\tfloat s = sin(fi);\n\tfloat c = cos(fi);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nvec4 simpleReinhardToneMapping(vec4 color)\n{\n    color *= exposure/(1. + color / exposure);\n    return pow(color, vec4(gamma));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = iResolution.xy / 2.0;\n    \n    vec2 dir = fragCoord - center;\n    \n    float dist = length(dir);\n    glowIntensity = iMouse.y * 30.0;\n    rayIntensity = iMouse.x * 2.0;\n    \n    float glowRatio = glowIntensity / pow(dist, 1.8);\n    \n    float minDist = 1000000.0;\n    \n    float angleSpacing = 2.0 * M_PI / float(numRays);\n        \n    for (int i = 0; i < numRays; ++i) {\n        vec2 ray = center + dist * (rotate(vec2(1.0, 0.0), float(i) * angleSpacing + radians(angle)));\n        float rw = clamp(rayWidth * pow(glowIntensity / 3000.0, 0.3) - dist / 30.0, 0.0, 10000.0);\n        float d = distance(ray, fragCoord) - clamp(rw, 0.0, 10000.0);\n        minDist = min(minDist, clamp(d, 0.0, abs(d)));\n    }\n   \n    float distToRay = 1.0 / rayCrispness + minDist;\n    float distRatio1 = clamp(dist / 50.0, 0.0, 1.0);\n    float distRatio2 = clamp(dist / (glowIntensity / 30.0), 0.0, 1.0);\n                               \n    float rayRatio = rayIntensity / pow(distToRay, 0.4) / pow(dist, 1.0);\n    rayRatio *= smoothstep(0.0, 1.0, distRatio1) * smoothstep(1.0, 0.0, distRatio2);\n\n    // Output to screen\n    fragColor = simpleReinhardToneMapping((rayRatio + glowRatio) * color);\n    //fragColor = (rayRatio + glowRatio) * color;\n}","name":"Image","description":"","type":"image"}]}