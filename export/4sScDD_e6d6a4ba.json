{"ver":"0.1","info":{"id":"4sScDD","date":"1492046134","viewed":287,"name":"Awesome Smiley","username":"xx3000","description":"Who needs raymarching anyway","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["trippy","smiley","awesome"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"#define PI 3.1415926\n\n#define AA 0\n\nfloat faceDist(vec2 uv1, vec2 uv2,vec2 uv3, float scl1, float scl2)\n{\n\treturn (1.0+sin(1.0*atan(uv1.y*scl1,uv1.x*scl2)+uv3.y*0.2+4.5)) - sqrt(dot(uv2,uv2));\n}\n\nfloat insideSuperEllipse(vec2 uv, float a, float b, float n)\n{\nreturn pow(abs(uv.x/a),n)+pow(abs(uv.y/b),n) - 1.0;\n\n}\n\n// cosine based palette, by iq\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec4 render(vec2 uv)\n{\nvec2 centered = uv;\n    float angle = (atan(centered.y,centered.x)+PI)/(PI*2.0);\n    float a =angle +iTime*0.05;\n    centered*=0.3;\n    \n   // centered.x=centered.x+sin(iTime)*0.1;\n    float r = length(centered);\n    vec4 bg1=vec4(0.0,0.4,0.95,1.0);\n    vec4 bg2=vec4(0.27,0.59,1.0,1.0);\n    vec4 bg3=vec4(0.15,0.5,0.9,1.0);\n    \n    bg2= vec4(palette((1.0-(r)+iTime*0.5),vec3(0.5,0.5,0),vec3(0.5),vec3(1.0),vec3(0.00, 0.33, 0.67)),1.0);\n    \n    bg1= vec4(palette((1.0-(r)+iTime*0.25),vec3(0.5,0.0,0.5),vec3(0.0,0.0,0.5),vec3(1.0),vec3(0.00, 0.33, 0.67)),1.0);\n    \n    //Background\n    vec4 col = bg1*(1.0-(r));\n    float cones =mod(a*30.0 , 2.0);\n    //if(int(cones) != 0)\n    //    col = bg3*(1.0-(r));\n    \n    \n    float a2 = angle+iTime*0.07;\n    //float a2 = angle;\n    \n    a2+= sin((length(uv)*5.0)-1.0*iTime*5.0)*-0.005;\n    \n    float cones2 =mod(a2*40.0 , 2.0);\n    \n    col = mix(col,bg2*(1.0-(r)),(smoothstep(0.0, 0.08, cones2) * (smoothstep(1.0, 0.92, cones2))));\n    \n    //smiley\n    \n    col = mix(col,vec4(0),smoothstep(0.0015,-0.0015,r-0.2));\n    \n    {\n\t\tcol = mix(col,vec4(1.0,0.85,0.31,1.0),smoothstep(0.001,-0.001,r-0.183));\n        // mouth\n        {    \n            vec2 basecoord= uv;\n            basecoord.y-=0.03;\n            basecoord.x-=0.25;\n            basecoord*=1.25;\n            vec2 angleCoord = basecoord*0.3;\n\t\t\tfloat fd1 = faceDist(angleCoord,basecoord*2.0,uv,2.0,1.5);\n            if(  uv.y < -0.03 )\n            {\n                vec2 ac2=angleCoord-0.1;\n                vec2 bc2=basecoord*2.0-0.1;\n               \tfloat fd2 = faceDist(ac2,bc2,uv,1.2,1.5);\n                {\n                    col= mix(col,vec4(0),smoothstep(-0.01,0.01,min(fd2,fd1)));\n                   \n                    basecoord*=2.13;\n                    basecoord.x*=1.05;\n                    basecoord.x+=0.07;\n                    angleCoord = basecoord*0.3;\n                    ac2=angleCoord-0.1;\n                    bc2=basecoord-0.1;\n                    fd1=faceDist(angleCoord,basecoord,uv,2.0,1.5);\n                    fd2=faceDist(ac2,bc2,uv,1.2,1.5);\n                    if(uv.y < -0.07)\n                    {\n                        col=mix(col,vec4(0.5,0.075,0.25,1.0),smoothstep(-0.005,0.005,min(fd1,fd2)));\n                        vec2 tuv = uv;\n                        tuv.x-=0.1;\n                        tuv.y+= 0.53;\n                        float r3 = length(tuv);\n\t\t\t\t\t\t\n                        col=mix(col,vec4(1.0,0.73,0.86,1.0),smoothstep(-0.005,0.005,min(min(fd1,fd2),-(r3 - 0.23))));\n\n                    }\n                }\n            }     \n            if(uv.x > -0.54 && uv.x < 0.300 && uv.y > -0.07 && uv.y < -0.03)\n                col = vec4(0);\n        }\n        \n        //eyes\n        {\n            \n            vec2 leftuv= uv;\n            leftuv.x+=0.31;\n            leftuv.y-=0.2;\n            vec2 el = vec2(0.19,0.22);\n        \tif(uv.y > 0.08)\n            {\n                float sy1=insideSuperEllipse(leftuv,el.x,el.y,2.0);\n                \n            \tcol=mix(col,vec4(0),smoothstep(0.03,-0.03,sy1));\n                el*=0.79;\n                \n                col=mix(col,vec4(1),smoothstep(0.03,-0.03,insideSuperEllipse(leftuv,el.x,el.y,2.0)));\n\t\t\t\t\n                if(leftuv.y < -0.08 && sy1 < 0.0)\n                    col=vec4(0);\n                \n                \n                leftuv-=vec2(0.0,0.05);\n                leftuv+=vec2(-sin(iTime*5.0)*0.08,cos(iTime*5.0)*0.08);\n                float r4 = length(leftuv);\n\t\t\t\t\n                col=mix(col,vec4(0),smoothstep(0.005,-0.005,r4-0.08));\n            }\n            \n            vec2 rightuv= uv;\n            rightuv.x-=0.23;\n            rightuv.y-=0.2;\n            el = vec2(0.205,0.22);\n        \tif( uv.y > 0.08)\n            {\n                float sy1=insideSuperEllipse(rightuv,el.x,el.y,2.0);\n            \tcol=mix(col,vec4(0),smoothstep(0.03,-0.03,sy1));\n                el*=0.79;\n                \n                col=mix(col,vec4(1),smoothstep(0.03,-0.03,insideSuperEllipse(rightuv,el.x,el.y,2.0)));\n                \n                if(rightuv.y < -0.08 && sy1 < 0.0)\n                    col=vec4(0);\n                \n                rightuv-=vec2(0.0,0.05);\n                rightuv+=vec2(-sin(iTime*5.0)*0.08,cos(iTime*5.0)*0.08);\n                float r4 = length(rightuv);\n\n                col=mix(col,vec4(0),smoothstep(0.005,-0.005,r4-0.08));\n            }\n                \n        }\n    }\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ratio = iResolution.x/iResolution.y;\n\tvec2 uv;\n    \n       \n    vec4 col = vec4(0);\n    \n//2x2 RGSS AA\n   if(AA == 1)\n   {\n        uv = (-iResolution.xy + 2.0*fragCoord+vec2(0.125,0.375)) / iResolution.y;\n        col+=render(uv);\n        uv = (-iResolution.xy + 2.0*fragCoord+vec2(-0.375,0.125)) / iResolution.y;\n        col+=render(uv);\n        uv = (-iResolution.xy + 2.0*fragCoord+vec2(0.375,-0.125)) / iResolution.y;\n        col+=render(uv);\n        uv = (-iResolution.xy + 2.0*fragCoord+vec2(-0.125,-0.375)) / iResolution.y;\n        col+=render(uv);\n       \n       col*=0.25;\n    }\n    else\n    {\n    \tuv = (-iResolution.xy + 2.0*fragCoord) / iResolution.y;\n        col+=render(uv);\n    }\n    \n\tfragColor =col;\n}","name":"Image","description":"","type":"image"}]}