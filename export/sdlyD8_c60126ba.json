{"ver":"0.1","info":{"id":"sdlyD8","date":"1642043587","viewed":184,"name":"Ray Marching Mob Programming 1","username":"lesleylai","description":"Ray marching demo mob programmed by the Graphics Programming Virtual Meetup attendees\nWeek 1","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphereSdf(vec3 pos, vec3 origin, float radius) {\n  return distance(pos, origin) - radius;\n}\n\n#define PI 3.1415926\n  float de(vec3 p){\n    float rt = 15.;\n    float rg = 4.;\n    float ws = 0.3;\n\n    p.xz = vec2 (rt * atan (p.z, - p.x), length (p.xz) - rt);\n    p.yz = vec2 (rg * atan (p.z, - p.y), length (p.yz) - rg);\n    return .6* max(abs(dot(sin(p), cos(p).yzx)) - ws, abs(p.z) - .5*PI);\n  }\n\n\nfloat sceneSdf(vec3 pos) {\n  return min(min(sphereSdf(pos, vec3(-1.0, 0.6*sin(iTime * 0.4), -2.0), 0.5),\n             sphereSdf(pos, vec3(1.0, 0.6*sin(iTime * 0.4), -2.0), 0.5)),\n             de(pos));\n}\n\nvec3 sceneNormal(vec3 pos) {\n  const float epsilon = 1e-4;\n  float dist = sceneSdf(pos);\n  float dx = sceneSdf(pos + vec3(epsilon, 0.0, 0.0)) - dist;\n  float dy = sceneSdf(pos + vec3(0.0, epsilon, 0.0)) - dist;\n  float dz = sceneSdf(pos + vec3(0.0, 0.0, epsilon)) - dist;\n  return normalize(vec3(dx, dy, dz));\n}\n\nbool rayMarching(inout vec3 origin, vec3 direction) {\n  float nextDist = 1000000.0;\n  const float epsilon = 1e-3;\n  float t = 0.0;\n  for (int i = 0; i < 50; ++i) {\n    nextDist = sceneSdf(origin);\n    t += nextDist;\n    if (nextDist < epsilon) {\n      return true;\n    }\n    origin += direction * nextDist;\n  }\n  return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy * 2. - 1.;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec3 direction = normalize(vec3(uv, -1.0));\n    \n    vec3 origin = vec3(0.0);\n    bool hit = rayMarching(origin, direction);\n    vec3 col = vec3(0.0);\n    if (hit) {\n      const vec3 lightPos = vec3(0.0, 0.0, -2.0);\n      vec3 lightDir = normalize(lightPos - origin);\n      float lightDistance = sqrt(dot(lightDir, lightDir));\n      vec3 normal = sceneNormal(origin);\n      col = normal * 0.5 + 0.5;\n      col *= 1.0 / (lightDistance * lightDistance);\n      col *= dot(normal, lightDir);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}