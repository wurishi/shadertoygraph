{"ver":"0.1","info":{"id":"ml2yWt","date":"1692512939","viewed":14,"name":"torus by szp","username":"pwyvern","description":"a torus","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["torus"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159265358979323846;\n\nmat3 rotateX(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        1.0, 0.0, 0.0,\n        0.0, c,   -s,\n        0.0, s,   c\n    );\n}\n\nmat3 rotateY(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat3(\n        c,   0.0,  s,\n        0.0, 1.0, 0.0,\n       -s,   0.0,  c\n    );\n}\n\nfloat torusDist(vec3 p, float majorRadius, float minorRadius) {\n    return length(vec2(length(p.xz) - majorRadius, p.y)) - minorRadius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Setup\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / min(iResolution.y, iResolution.x);\n    vec3 color = vec3(0.0);\n    vec3 ro = vec3(0.0, 0.0, -5.0); // ray origin\n    vec3 rd = normalize(vec3(uv, 1.0)); // ray direction\n\n    // Torus definition\n    float majorRadius = 1.0;\n    float minorRadius = 0.3;\n\n    // Compute rotation\n    float cycles = floor(iTime / 5.0);\n    float yRotation = cycles * PI / 2.0 + mod(iTime, 5.0) / 5.0 * PI / 2.0;\n    float xRotation = cycles * PI / 12.0 + mod(iTime, 5.0) / 5.0 * PI / 12.0;\n\n    mat3 yRotMatrix = rotateY(yRotation);\n    mat3 xRotMatrix = rotateX(xRotation);\n    mat3 totalRotation = xRotMatrix * yRotMatrix;\n\n    // Raymarching loop\n    const int maxSteps = 100;\n    const float maxDistance = 10.0;\n    const float epsilon = 1e-3;\n    float t = 0.0;\n    for(int i = 0; i < maxSteps; i++) {\n        vec3 p = ro + t * rd;\n        \n        // Apply the rotation\n        p = totalRotation * p;\n        \n        float dist = torusDist(p, majorRadius, minorRadius);\n        \n        if(dist < epsilon) {\n            // Base color\n            color = vec3(1.0, 0.5, 0.2);\n\n            // Compute wireframe\n            float e = 1.;\n            vec3 grad = normalize(vec3(\n                torusDist(p + vec3(e, 0.0, 0.0), majorRadius, minorRadius) - dist,\n                torusDist(p + vec3(0.0, e, 0.0), majorRadius, minorRadius) - dist,\n                torusDist(p + vec3(0.0, 0.0, e), majorRadius, minorRadius) - dist\n            ));\n            \n            float outerDist = torusDist(p + 0.2*grad, majorRadius, minorRadius);\n            if(abs(outerDist) < 0.1) {\n                color = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n            }\n            break;\n        }\n\n        if(t > maxDistance) break;\n\n        t += dist;\n    }\n\n    // Output the color\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}