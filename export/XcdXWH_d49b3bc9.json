{"ver":"0.1","info":{"id":"XcdXWH","date":"1714101794","viewed":43,"name":"You will make better shaders....","username":"dacoolboe","description":"I made this pretty quickly but most of my time was spent trying to understand why the effect happens. Its hard to wrap your head around when you look at the product before spending time estimating what will happen with your code lol.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["simple","beginner","headache","easy","hypnotic","bruh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalizes pixel coords and makes them not stretch\n    vec2 uv = ((fragCoord/iResolution.xy)-.5)*2.;\n    uv.x*= iResolution.x/iResolution.y;\n    \n    \n    //gets length from center of screen (makes \"circle\")\n    float crc = length(uv);\n    \n    //makes it look like the circles are eating eachother cause of cosine\n    crc = cos((crc+iTime/2.)*8.);\n    \n    //makes circles not a foggy mess\n    crc = smoothstep(.0,.01,crc);\n    \n    \n    \n    //assigns value of circle to screen\n    fragColor = vec4(crc,crc,crc,1.);\n   \n   \n}","name":"Image","description":"","type":"image"}]}