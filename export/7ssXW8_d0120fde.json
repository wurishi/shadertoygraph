{"ver":"0.1","info":{"id":"7ssXW8","date":"1618605667","viewed":192,"name":"Purple landscape","username":"Vizepi","description":"Vector-style landscape rendering with pretty colors\nMy first shader, yeay!","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["2d","landscape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//===================================================================== ANTIALIASING\n// Not that good, needs to find a better AA\n//#define ENABLE_AA\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 unit = vec2( 1., 1. ) / iResolution.xy;\n    vec3 col0 = texture( iChannel0, uv + unit * vec2( .5, .5 ) ).rgb;\n    vec3 col1 = texture( iChannel0, uv + unit * vec2( .5, -.5 ) ).rgb;\n    vec3 col2 = texture( iChannel0, uv + unit * vec2( -.5, .5 ) ).rgb;\n    vec3 col3 = texture( iChannel0, uv + unit * vec2( -.5, -.5 ) ).rgb;\n    \n#ifdef ENABLE_AA\n        fragColor = vec4( mix( mix( col0, col1, .5 ), mix( col2, col3, .5 ), .5 ), 1. );\n#else\n        fragColor = vec4( texture( iChannel0, uv ).rgb, 1. );\n#endif\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//===================================================================== HELPERS\nfloat spike( float x ) { // spike(0)=0, spike(0.5)=1, spike(1)=0\n    return 0.5 * abs( mod( 4. * x - 2., 4. ) - 2. );\n}\nvec3 lerp( float upY, float downY, vec3 upCol, vec3 downCol, float y ) {\n    return mix( downCol, upCol, ( y - downY ) / ( upY - downY ) );\n}\n\n//===================================================================== BACKGROUND\nvec3 sky( vec2 uv ) {\n    if ( uv.y > .35 ) {\n        vec3 up = vec3( .3451, .0039, .2 );\n        vec3 down = vec3( .949, .6627, .5098 );\n        return lerp( 1., .35, up, down, uv.y );\n    }\n    return vec3( 0. );\n}\nvoid sun( inout vec3 col, vec2 uv ) {\n    float ratio = iResolution.x / iResolution.y;\n    vec2 center = vec2( .5276 * ratio, .7643 );\n    uv.x *= iResolution.x / iResolution.y;\n    float d = length( center - uv ) - .1478;\n\tfloat t = clamp( d, 0.0, 1.0 );\n    if ( t < 0.0001 ) {\n        vec3 up = sky( vec2( 0., .91 ) );\n        vec3 down = vec3( .8, .5529, .498 );\n        col = lerp( .91, .6129, up, down, uv.y );\n    }\n}\n\n//===================================================================== FOREGROUND 0\nfloat wave0( float x ) {\n    float shifted = 2. * x - 1.;\n    float skewed = .59 - .1 * shifted * shifted;\n    return pow( abs( x - skewed ), 1.6 ) * 1.1 + .08;\n}\nfloat trees0( float x ) {\n    float f0 = spike( x + .7 ) - .8;\n    float f1 = spike( 2. * x + .2 ) - .68;\n    float f2 = spike( 3. * x + .55 ) - .73;\n    float f3 = spike( 2. * x + .4 ) - .76;\n    float f4 = spike( 3. * x + .85 ) - .79;\n    float f5 = spike( 2. * x + .55 ) - .79;\n    float f6 = spike( 3. * x + .3 ) - .82;\n    return .5 * max( 0., max( f0, max( f1, max( f2, max( f3, max( f4, max( f5, f6 ) ) ) ) ) ) );\n}\nvoid plan0( inout vec3 col, vec2 uv ) {\n    float y = wave0( uv.x ) + trees0( 3. * uv.x );\n    if ( uv.y < y ) {\n        col = vec3( .2, .1216, .2196 );\n    }\n}\n\n//===================================================================== FOREGROUND 1\nfloat wave1( float x ) {\n    float shifted = x - .5;\n    return .27 + .5 * shifted * shifted;\n}\nfloat rocks1( float x ) {\n    float f0 = spike( x ) - .37;\n    float f1 = spike( 3. * x + .4 ) - .41;\n    float f2 = spike( 2. * x ) - .45;\n    return .1 * max( 0., max( f0, max( f1, f2 ) ) ) * abs( sin( 5. * x ) );\n}\nvoid plan1( inout vec3 col, vec2 uv ) {\n    float y = wave1( uv.x ) + rocks1( 1.5 * uv.x );\n    if ( uv.y < y ) {\n        vec3 up = vec3( .298, .2157, .3216 );\n        vec3 down = vec3( .3961, .2784, .3765 );\n        col = lerp( .35, .2, up, down, uv.y );\n    }\n}\n\n//===================================================================== FOREGROUND 2\nfloat wave2( float x ) {\n    float shifted = .8 * ( x * 1.6 - .75 );\n    if ( shifted >= 0. ) {\n        shifted = pow( shifted, 1.4 ) + .6;\n    } else {\n        shifted = 0.6 - pow( -shifted, 1.4 );\n    }\n    return .53 + .2 * cos( 11. * shifted - 1. ) * cos( 5. * shifted ) * cos( shifted );\n}\nfloat mounts2( float x ) {\n    float f0 = .8 * spike( x + 0.18 ) - .55;\n    float f1 = spike( 2. * x + .2 ) - .6;\n    float f2 = .4 * spike( 3. * x + .3 ) - .15;\n    float f3 = .2 * spike( 5. * x + .4 );\n    float waver = abs( sin( 5. * x ) * sin( 15. * x ) );\n    return .3 * max( 0., max( f0, max( f1, max( f2, f3 ) ) ) ) * waver;\n}\nvoid plan2( inout vec3 col, vec2 uv ) {\n    float y = wave2( uv.x ) + mounts2( 1.6 * uv.x );\n    if ( uv.y < y ) {\n        vec3 up = vec3( .4, .2353, .3804 );\n        vec3 down = vec3( .6392, .4235, .4275 );\n        col = lerp( .6, .3, up, down, uv.y );\n    }\n}\n\n//===================================================================== FOREGROUND 3\nfloat wave3( float x ) {\n    float shifted = x * 1.6;\n    return .48 + .01 * sin( 5. * shifted + .8 ) * ( shifted + 1. ) * ( shifted + 1. );\n}\nfloat mounts3( float x ) {\n    float f0 = spike( .8 * x + .25 ) - .5;\n    float f1 = spike( 2. * x + .5 ) - .55;\n    float f2 = spike( 1.5 * x + .08 ) - .57;\n    float f3 = spike( x + .7 ) - .6;\n    return .2 * max( 0., max( f0, max( f1, max( f2, f3 ) ) ) ) * abs( sin( 7. * x ) );\n}\nvoid plan3( inout vec3 col, vec2 uv ) {\n    float y = wave3( uv.x ) + mounts3( 1.6 * uv.x );\n    if ( uv.y < y ) {\n        vec3 up = vec3( .5804, .3529, .3843 );\n        vec3 down = vec3( .7294, .4941, .4588 );\n        col = lerp( .6, .4, up, down, uv.y );\n    }\n}\n\n//===================================================================== MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = sky( uv );\n    sun( col, uv );\n    plan3( col, uv );\n    plan2( col, uv );\n    plan1( col, uv );\n    plan0( col, uv );\n    fragColor = vec4( col, 1. );\n}\n","name":"Buffer A","description":"","type":"buffer"}]}