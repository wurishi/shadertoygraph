{"ver":"0.1","info":{"id":"4XsBR7","date":"1728184779","viewed":46,"name":"Polar dificil de encaixar ","username":"Elsio","description":"é sempre uma dificuldade fazer esses shaders polares se encaixarem. Não é que eu seja burro e não tenha entendido os outros. é que um caso não funciona no outro caso","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["teste"],"hasliked":0,"parentid":"M3jyDW","parentname":"Rock balancing (fixed!)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define h22(p) fract(29. * sin(p) * sin(2. * (p).yx))\n#define h32(p) vec3(h22(p), dot(h22(p + 1.), h22(p + 2.)))\n#define sgn(a) (step(0., a) * 2. - 1.)\n\nvec3 face(vec3 p) {\n     vec3 a = abs(p);\n     return step(a.yzx, a) * step(a.zxy, a) * sign(p);\n}\n\nvec3 edge(vec3 p) {\n    vec3 b = 1. - abs(face(p));\n    vec3 a = sgn(p) * b.zxy; \n         b = sgn(p) * b.yzx;\n    \n    return length(p - a) < length(p - b) ? a : b;\n}\n\nvoid mainImage(out vec4 o, vec2 u) {\n    vec2 r = iResolution.xy;\n    u = (u - r / 2.) / r.y;\n    \n    u = vec2(\n            log(length(u)),\n            atan(u.x, u.y)\n        ) * 7.;\n    \n    u = fract(u / 6.28) - .5;\n    u *= 7.;\n    u += iTime;\n    \n    float z = dot(\n          cos(u * 5.) * 2.5, \n          sin(u * 2.)\n      ) * .1;\n    \n    vec3 p = vec3(u, z),\n         id = floor(p) + .5;\n    \n    o = vec4(1);\n    vec3 m = sign(mod(id, 2.) - 1.);\n    \n    if(m.x * m.y * m.z < 0.) \n        id += face(p - id);\n    \n    p -= id;\n    \n    o = vec4(h32(id.xy) * (.5 - 1. * (length(p) - .6)), 0);\n    \n    //abs(length(p - edge(p)) - .6)\n}","name":"Image","description":"","type":"image"}]}