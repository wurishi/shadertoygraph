{"ver":"0.1","info":{"id":"clBXWV","date":"1676636358","viewed":72,"name":"dumb bouncing ball","username":"oudend","description":"ball","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["ball"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float ratio = iResolution.x  / iResolution.y;\n\n    // Time varying pixel color\n    vec3 col = .5 + .8*cos(iTime*.1*vec3(0,1,4) );\n    \n    vec4 BufferA = texture(iChannel0, uv);\n    \n    fragColor = vec4(BufferA.w * col, 1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float distToEdge(vec2 pos)\n{\n    return min( 1. - max(pos.x, pos.y), min(pos.x, pos.y) );\n}\n\nbool collision( vec2 pos, float size )\n{\n    return distToEdge(pos) <= size;\n\n    if(distToEdge(pos) <= size)//size * 50.) //I'm gonna add more conditions, this is what peak performance looks like except I wasted 30 seconds typing this comment.\n    {\n        return true;\n    }\n    return false;\n}\n\nvec2 radianToVector(float radian)\n{\n    return vec2(cos(radian),sin(radian));\n}\n\nfloat vectorToRadian(vec2 vector)\n{\n    return atan(vector.y, vector.x);\n}\n\nfloat angleReflect(float normal, float radian){\n  return radian - 2. * dot( radian, normal) * normal;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float ratio = iResolution.x / iResolution.y;\n    \n    vec2 resRatio = vec2(ratio * .5, 1. / ratio); \n    \n    bool initialized = iTime > 1.;\n    \n    //bool initialized2 = mod(iTime, 2.5) > 1.;\n    \n    //float distanceToBall = distance(uv*resRatio, ballPos*resRatio);\n    \n    vec4 ballData = texture(iChannel0, vec2(0.5,0.5) / iResolution.xy);\n    \n    vec2 ballPos = vec2(ballData.x, ballData.y);\n    \n    float ballDirection = ballData.z;\n    \n    float ballSpeed = ballData.w;\n    \n    float distanceToBall = distance(uv*resRatio, ballPos*resRatio);\n    \n    \n    if(initialized && fragCoord == vec2(.5, .5))\n    {\n        vec2 directionVector = radianToVector(ballDirection * PI);\n    \n        vec2 futureBallPos = (ballPos + directionVector*ballSpeed);\n    \n        if( collision( futureBallPos, ballSize * ratio ) ) {\n            float edgeDist = distToEdge(futureBallPos);\n            directionVector = directionVector * vec2( (edgeDist == futureBallPos.x || edgeDist == 1. - futureBallPos.x) ? -1. : 1., (edgeDist == futureBallPos.y || edgeDist == 1. - futureBallPos.y) ? -1. : 1.  ); //angleReflect( mod( ballDirection + (PI/2.)/PI, 1. ), ballDirection );\n        }\n        \n        ballDirection = vectorToRadian(directionVector) / PI;\n        \n        //directionVector = radianToVector(ballDirection * PI);\n    \n        futureBallPos = (ballPos + directionVector*ballSpeed);\n    \n        fragColor = vec4(futureBallPos,ballDirection,ballSpeed);\n        return;\n    }\n    \n    if(initialized && distanceToBall < ballSize)  \n    {\n        fragColor = vec4(1.0,0.0,0.0,1.0);\n        return;\n    }\n    \n    if(!initialized && fragCoord == vec2(0.5, 0.5))\n    {\n        vec2 ballPos = vec2(.2, .2);\n        float ballDirection = mod(iDate.w, 1.);\n        float ballSpeed = .009 * 4.;\n    \n        fragColor = vec4(ballPos,ballDirection,ballSpeed);\n        return;\n    } else if(!initialized)//&& distanceToBall < ballSize )// || ( distanceToCenter < circleSize + .01 && distanceToCenter > circleSize ) ) )// && uv.y == 0.)\n    {\n        fragColor = vec4(0.0,0.0,0.0,0.0);\n        return;\n    }\n    \n    vec4 BufferB = vec4(0.0,0.0,0.0,0.0);//texture(iChannel0, uv);\n    \n    fragColor = BufferB;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 BufferA = texture(iChannel0, uv);\n\n    fragColor = BufferA;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926538\n\nfloat ballSize = .01;\n\nfloat rand(float co) { return fract(sin(co*(91.3458)) * 47453.5453); }","name":"Common","description":"","type":"common"}]}