{"ver":"0.1","info":{"id":"Wl3SDn","date":"1693660615","viewed":79,"name":"Basic Fire","username":"twixuss","description":"A simple fire shader i made a few years ago.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","noise","simple","fire","random"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define THREE_DIMENSIONAL 1\n\n#if THREE_DIMENSIONAL\n#define uv_t vec3\nfloat noise(uv_t p){\n\tvec3 a = fract((p + 1.414) * vec3(31.123, 3.141, 6.762));\n\ta += dot(a, a + 12.653);\n\ta = vec3(a.x * a.y, a.x * a.z, a.y * a.z);\n    return fract(dot(a,a));\n}\n#else \n#define uv_t vec2\nfloat noise(uv_t p){\n\tvec2 a = fract((p + 1.414) * vec2(31.123, 3.141));\n\ta += dot(a, a + 12.653);\n\treturn fract(dot(vec2(a.x * a.y, a.x + a.y), vec2(1.443, 236.1)));\n}\n#endif\nfloat pow2(float v){return v*v;}\nvec2 pow2(vec2 v){return v*v;}\nvec3 pow2(vec3 v){return v*v;}\nfloat map(float v,float sn,float sx,float dn,float dx){return(v-sn)/(sx-sn)*(dx-dn)+dn;}\nfloat snoise(uv_t uv){\n    uv_t r = fract(uv);\n    r.xy = smoothstep(0., 1., r.xy);\n\n    uv_t t = floor(uv);\n    \n\n#if THREE_DIMENSIONAL\n    float a = noise(t + vec3(0,0,0));\n    float b = noise(t + vec3(1,0,0));\n    float c = noise(t + vec3(0,1,0));\n    float d = noise(t + vec3(1,1,0));\n    float e = noise(t + vec3(0,0,1));\n    float f = noise(t + vec3(1,0,1));\n    float g = noise(t + vec3(0,1,1));\n    float h = noise(t + vec3(1,1,1));\n    return mix(mix(mix(a, b, r.x), mix(c, d, r.x), r.y),\n               mix(mix(e, f, r.x), mix(g, h, r.x), r.y), r.z);\n#else\n    float a = noise(t + vec2(0,0));\n    float b = noise(t + vec2(1,0));\n    float c = noise(t + vec2(0,1));\n    float d = noise(t + vec2(1,1));\n    return mix(mix(a, b, r.x), mix(c, d, r.x), r.y);\n#endif\n    \n    \n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv_t uv;\n    uv.xy = fragCoord/iResolution.xy;\n    float falloff = uv.y;\n    \n    uv.x -= .5;\n#if THREE_DIMENSIONAL\n    uv.z = iTime * .25;\n#endif\n    uv.x *= iResolution.x / iResolution.y;\n    uv.x *= falloff + .5;\n    uv.xy *= 5.;\n\tuv.y -= iTime * 2.;\n    \n    uv.xy = uv.x * vec2(0.707, 0.707) + uv.y * vec2(-0.707, 0.707);\n    \n    vec3 col = vec3(0);\n    \n    float fire = \n        snoise(uv) + \n        snoise(uv * 2.) * .75 + \n        snoise(uv * 4.) * .56 + \n        snoise(uv * 8.) * .42 + \n        snoise(uv * 16.) * .31;\n    fire /= 1. + .75 + .56 + .42 + .31; \n    vec3 fireColor = vec3(50, 6, 2);\n    col = clamp(vec3(fire - falloff*.5-.25) * fireColor,0.,1.);\n    //col = vec3(f);\n    //col = fract(uv);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}