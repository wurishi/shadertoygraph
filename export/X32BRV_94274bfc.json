{"ver":"0.1","info":{"id":"X32BRV","date":"1729697854","viewed":75,"name":"Basic01","username":"42n4","description":"Solved tasks from https://thebookofshaders.com/07/","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat plot (float pct, float eps, vec2 st){\n  return  smoothstep( -eps, 0., st.y - pct) -\n          smoothstep( 0., eps, st.y - pct);\n}\n\nfloat white_square(vec2 move, vec2 size, float margin, vec2 st){\n    // bottom-left\n    vec2 bl;\n    bl = smoothstep(0.,margin,st-move);\n    float pct = bl.x * bl.y;\n\n    // top-right\n    vec2 tr;\n    //tr = smoothstep(1.-move-size,1.-move-size+margin,1.-st);\n    tr = smoothstep(0.,-margin,st-move-size);\n    pct *= tr.x * tr.y;\n    return pct;\n}\n\nvec3 color_square(vec3 colorin, vec2 move, vec2 size, float margin, vec2 st){\n    vec3 color_pct = vec3(0);\n    float pct = white_square(move, size, margin, st);\n    color_pct = pct * colorin;\n    return color_pct;\n}\n\nfloat dot_circle(in vec2 _st, in float _radius){\n    vec2 dist = _st-vec2(0.5);\n\treturn 1.-smoothstep(_radius-(_radius*0.01),\n                         _radius+(_radius*0.01),\n                         dot(dist,dist)*4.0);\n}\n\nfloat white_circle(vec2 move, float r, float margin, vec2 st){\n    return 1.-smoothstep(-margin,+margin,distance(st,move)-r);\n}\n\nvec3 color_circle(vec3 colorin, vec2 move, float r, float margin, vec2 st){\n    float pct = white_circle(move, r, margin, st);\n    return pct * colorin;\n}\n\nfloat white_gear(vec2 move, bool right, vec2 st){\n    vec2 pos = move-st;\n    float r = length(pos)*2.0;\n    float a = atan(pos.y,pos.x), f = 0.;\n    if(right)\n        f = smoothstep(-.5,1., cos(a*9.+iTime))*0.2+0.5;\n    else\n        f = smoothstep(-.5,1.0, cos(a*9.-iTime))*0.2+0.5;\n    float pct = 1.-smoothstep(0.,0.005,r-f);\n    return pct;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1 on y)\n    vec2 st = fragCoord/iResolution.y;\n    vec3 color = vec3(0);\n\n    vec3 color1 = vec3(0.149,0.141,0.912);\n    vec3 color2 = vec3(1.00,0.833,0.224);\n\n    color = color_circle(color2,vec2(0.5*abs(sin(iTime)),0.5),0.5*abs(sin(iTime)),0.01,st);\n    color += color_square(color1,vec2(1.*abs(cos(iTime)),0.3),vec2(0.7*abs(cos(iTime))),0.01,st);\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}