{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// srtuss, 2013\n//\n// In this shader I accumulated ideas for a game i was making.\n// All geometry is ray-traced.\n//\n// The effect is inspired by the imges music like this spawns in my mind:\n// http://www.youtube.com/watch?v=1uFAu65tZpo\n//\n\n// ** improved camera shaking\n// ** cleaned up code\n// ** added stuff to the gates\n\n//#define GREEN_VERSION\n\n#define time iTime\n\nvec2 rotate(vec2 p, float a)\n{\n\treturn vec2(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a));\n}\nfloat box(vec2 p, vec2 b, float r)\n{\n\treturn length(max(abs(p) - b, 0.0)) - r;\n}\n\n// iq's ray-plane-intersection code\nvec3 intersect(in vec3 o, in vec3 d, vec3 c, vec3 u, vec3 v)\n{\n\tvec3 q = o - c;\n\treturn vec3(\n\t\tdot(cross(u, v), q),\n\t\tdot(cross(q, u), d),\n\t\tdot(cross(v, q), d)) / dot(cross(v, u), d);\n}\n\n// some noise functions for fast developing\nfloat rand11(float p)\n{\n    return fract(sin(p * 591.32) * 43758.5357);\n}\nfloat rand12(vec2 p)\n{\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.233))) * 43758.5357);\n}\nvec2 rand21(float p)\n{\n\treturn fract(vec2(sin(p * 591.32), cos(p * 391.32)));\n}\nvec2 rand22(in vec2 p)\n{\n\treturn fract(vec2(sin(p.x * 591.32 + p.y * 154.077), cos(p.x * 391.32 + p.y * 49.077)));\n}\n\nfloat noise11(float p)\n{\n\tfloat fl = floor(p);\n\treturn mix(rand11(fl), rand11(fl + 1.0), fract(p));//smoothstep(0.0, 1.0, fract(p)));\n}\nfloat fbm11(float p)\n{\n\treturn noise11(p) * 0.5 + noise11(p * 2.0) * 0.25 + noise11(p * 5.0) * 0.125;\n}\nvec3 noise31(float p)\n{\n\treturn vec3(noise11(p), noise11(p + 18.952), noise11(p - 11.372)) * 2.0 - 1.0;\n}\n\n// something that looks a bit like godrays coming from the surface\nfloat sky(vec3 p)\n{\n\tfloat a = atan(p.x, p.z);\n\tfloat t = time * 0.1;\n\tfloat v = rand11(floor(a * 4.0 + t)) * 0.5 + rand11(floor(a * 8.0 - t)) * 0.25 + rand11(floor(a * 16.0 + t)) * 0.125;\n\treturn v;\n}\n\nvec3 voronoi(in vec2 x)\n{\n\tvec2 n = floor(x); // grid cell id\n\tvec2 f = fract(x); // grid internal position\n\tvec2 mg; // shortest distance...\n\tvec2 mr; // ..and second shortest distance\n\tfloat md = 8.0, md2 = 8.0;\n\tfor(int j = -1; j <= 1; j ++)\n\t{\n\t\tfor(int i = -1; i <= 1; i ++)\n\t\t{\n\t\t\tvec2 g = vec2(float(i), float(j)); // cell id\n\t\t\tvec2 o = rand22(n + g); // offset to edge point\n\t\t\tvec2 r = g + o - f;\n\t\t\t\n\t\t\tfloat d = max(abs(r.x), abs(r.y)); // distance to the edge\n\t\t\t\n\t\t\tif(d < md)\n\t\t\t\t{md2 = md; md = d; mr = r; mg = g;}\n\t\t\telse if(d < md2)\n\t\t\t\t{md2 = d;}\n\t\t}\n\t}\n\treturn vec3(n + mg, md2 - md);\n}\n\n#define A2V(a) vec2(sin((a) * 6.28318531 / 100.0), cos((a) * 6.28318531 / 100.0))\n\nfloat circles(vec2 p)\n{\n\tfloat v, w, l, c;\n\tvec2 pp;\n\tl = length(p);\n\t\n\t\n\tpp = rotate(p, time * 3.0);\n\tc = max(dot(pp, normalize(vec2(-0.2, 0.5))), -dot(pp, normalize(vec2(0.2, 0.5))));\n\tc = min(c, max(dot(pp, normalize(vec2(0.5, -0.5))), -dot(pp, normalize(vec2(0.2, -0.5)))));\n\tc = min(c, max(dot(pp, normalize(vec2(0.3, 0.5))), -dot(pp, normalize(vec2(0.2, 0.5)))));\n\t\n\t// innerest stuff\n\tv = abs(l - 0.5) - 0.03;\n\tv = max(v, -c);\n\tv = min(v, abs(l - 0.54) - 0.02);\n\tv = min(v, abs(l - 0.64) - 0.05);\n\t\n\tpp = rotate(p, time * -1.333);\n\tc = max(dot(pp, A2V(-5.0)), -dot(pp, A2V(5.0)));\n\tc = min(c, max(dot(pp, A2V(25.0 - 5.0)), -dot(pp, A2V(25.0 + 5.0))));\n\tc = min(c, max(dot(pp, A2V(50.0 - 5.0)), -dot(pp, A2V(50.0 + 5.0))));\n\tc = min(c, max(dot(pp, A2V(75.0 - 5.0)), -dot(pp, A2V(75.0 + 5.0))));\n\t\n\tw = abs(l - 0.83) - 0.09;\n\tv = min(v, max(w, c));\n\t\n\treturn v;\n}\n\nfloat shade1(float d)\n{\n\tfloat v = 1.0 - smoothstep(0.0, mix(0.012, 0.2, 0.0), d);\n\tfloat g = exp(d * -20.0);\n\treturn v + g * 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv * 2.0 - 1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\t\n\t\n\t// using an iq styled camera this time :)\n\t// ray origin\n\tvec3 ro = 0.7 * vec3(cos(0.2 * time), 0.0, sin(0.2 * time));\n\tro.y = cos(0.6 * time) * 0.3 + 0.65;\n\t// camera look at\n\tvec3 ta = vec3(0.0, 0.2, 0.0);\n\t\n\t// camera shake intensity\n\tfloat shake = clamp(3.0 * (1.0 - length(ro.yz)), 0.3, 1.0);\n\tfloat st = mod(time, 10.0) * 143.0;\n\t\n\t// build camera matrix\n\tvec3 ww = normalize(ta - ro + noise31(st) * shake * 0.01);\n\tvec3 uu = normalize(cross(ww, normalize(vec3(0.0, 1.0, 0.2 * sin(time)))));\n\tvec3 vv = normalize(cross(uu, ww));\n\t// obtain ray direction\n\tvec3 rd = normalize(uv.x * uu + uv.y * vv + 1.0 * ww);\n\t\n\t// shaking and movement\n\tro += noise31(-st) * shake * 0.015;\n\tro.x += time * 2.0;\n\t\n\tfloat inten = 0.0;\n\t\n\t// background\n\tfloat sd = dot(rd, vec3(0.0, 1.0, 0.0));\n\tinten = pow(1.0 - abs(sd), 20.0) + pow(sky(rd), 5.0) * step(0.0, rd.y) * 0.2;\n\t\n\tvec3 its;\n\tfloat v, g;\n\t\n\t// voronoi floor layers\n\tfor(int i = 0; i < 4; i ++)\n\t{\n\t\tfloat layer = float(i);\n\t\tits = intersect(ro, rd, vec3(0.0, -5.0 - layer * 5.0, 0.0), vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0));\n\t\tif(its.x > 0.0)\n\t\t{\n\t\t\tvec3 vo = voronoi((its.yz) * 0.05 + 8.0 * rand21(float(i)));\n\t\t\tv = exp(-100.0 * (vo.z - 0.02));\n\t\t\t\n\t\t\tfloat fx = 0.0;\n\t\t\t\n\t\t\t// add some special fx to lowest layer\n\t\t\tif(i == 3)\n\t\t\t{\n\t\t\t\tfloat crd = 0.0;//fract(time * 0.2) * 50.0 - 25.0;\n\t\t\t\tfloat fxi = cos(vo.x * 0.2 + time * 1.5);//abs(crd - vo.x);\n\t\t\t\tfx = clamp(smoothstep(0.9, 1.0, fxi), 0.0, 0.9) * 1.0 * rand12(vo.xy);\n\t\t\t\tfx *= exp(-3.0 * vo.z) * 2.0;\n\t\t\t}\n\t\t\tinten += v * 0.1 + fx;\n\t\t}\n\t}\n\t\n\t// draw the gates, 4 should be enough\n\tfloat gatex = floor(ro.x / 8.0 + 0.5) * 8.0 + 4.0;\n\tfloat go = -16.0;\n\tfor(int i = 0; i < 4; i ++)\n\t{\n\t\tits = intersect(ro, rd, vec3(gatex + go, 0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0));\n\t\tif(dot(its.yz, its.yz) < 2.0 && its.x > 0.0)\n\t\t{\n\t\t\tv = circles(its.yz);\n\t\t\tinten += shade1(v);\n\t\t}\n\t\t\n\t\tgo += 8.0;\n\t}\n\t\n\t// draw the stream\n\tfor(int j = 0; j < 20; j ++)\n\t{\n\t\tfloat id = float(j);\n\t\t\n\t\tvec3 bp = vec3(0.0, (rand11(id) * 2.0 - 1.0) * 0.25, 0.0);\n\t\tvec3 its = intersect(ro, rd, bp, vec3(1.0, 0.0, 0.0), vec3(0.0, 0.0, 1.0));\n\t\t\n\t\tif(its.x > 0.0)\n\t\t{\n\t\t\tvec2 pp = its.yz;\n\t\t\tfloat spd = (1.0 + rand11(id) * 3.0) * 2.5;\n\t\t\tpp.y += time * spd;\n\t\t\tpp += (rand21(id) * 2.0 - 1.0) * vec2(0.3, 1.0);\n\t\t\tfloat rep = rand11(id) + 1.5;\n\t\t\tpp.y = mod(pp.y, rep * 2.0) - rep;\n\t\t\tfloat d = box(pp, vec2(0.02, 0.3), 0.1);\n\t\t\tfloat foc = 0.0;\n\t\t\tfloat v = 1.0 - smoothstep(0.0, 0.03, abs(d) - 0.001);\n\t\t\tfloat g = min(exp(d * -20.0), 2.0);\n\t\t\t\n\t\t\tinten += (v + g * 0.7) * 0.5;\n\t\t\t\n\t\t}\n\t}\n\t\n\tinten *= 0.4 + (sin(time) * 0.5 + 0.5) * 0.6;\n\t\n\t// find a color for the computed intensity\n#ifdef GREEN_VERSION\n\tvec3 col = pow(vec3(inten), vec3(2.0, 0.15, 9.0));\n#else\n\tvec3 col = pow(vec3(inten), 1.5 * vec3(0.15, 2.0, 9.0));\n#endif\n\t\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lss3WS","date":"1378734085","viewed":11518,"name":"Relentless","username":"srtuss","description":"Collecting some design ideas for a new game project. Heavily inspired by movAX13h's io shader. Thanks to iq for his ray-plane-intersection code.","likes":189,"published":1,"flags":0,"usePreview":0,"tags":["rings","scifi"],"hasliked":0,"parentid":"","parentname":""}}