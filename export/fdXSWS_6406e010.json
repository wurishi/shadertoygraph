{"ver":"0.1","info":{"id":"fdXSWS","date":"1619106189","viewed":114,"name":"Homskiy_325_v4v6","username":"Dan_7","description":"Dodecahedron + water","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["water","dod"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(3, 1.2, -6);\nconst vec3 LIGHT1_POS = vec3(-3, 1.5, 5);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 1, 1);\n\nconst vec3 LIGHT2_POS = vec3(1, 0.5, 2);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(0.5, 0., 0.5);\nvec3 randDir;\nbool refract_flag = true;\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 0.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    \n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir, dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r == 0\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 0.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\n\nbool belong(vec3 a1, vec3 a2, vec3 a3, vec3 a4, vec3 a5,  vec3 point)\n{\n    vec3 v1 = a2 - a1;\n    vec3 v2 = a3 - a2;\n    vec3 v3 = a4 - a3;\n    vec3 v4 = a5 - a4;\n    vec3 v5 = a1 - a5;\n    vec3 normal = normalize(cross(v1, v2));\n    \n    return !((normalize(dot(cross(v1, point - a1), normal)) != 1.0 && normalize(dot(cross(v1, point - a1), normal)) != -1.0) ||\n        dot((cross(v1, point - a1)), normal) < 0.0 ||\n        dot((cross(v2, point - a2)), normal) < 0.0 ||\n        dot((cross(v3, point - a3)), normal) < 0.0 ||\n        dot((cross(v4, point - a4)), normal) < 0.0 ||\n        dot((cross(v5, point - a5)), normal) < 0.0);    \n}\n\n\nfloat plane5(vec3 v1, vec3 v2, vec3 v3, vec3 v4, vec3 v5, vec3 dir, vec3 pos, vec3 centr)\n{\n    vec3 a1 = v2 - v1;\n    vec3 a2 = v3 - v2;\n    vec3 cur_normal = normalize(cross(a1, a2));\n    vec3 to_centr = centr - v1;\n    if (dot(cur_normal, to_centr) > 0.0) {\n        cur_normal = -cur_normal;\n    }\n    \n    float dDotN = dot(dir, cur_normal);\n    float t = dot(v2 - pos, cur_normal) / dDotN;\n    vec3 worldPos = t * dir + pos;\n    if (t <= 0.) {\n        return INF;\n    }\n    if (belong(v1, v2, v3, v4, v5, worldPos)) {\n        return t;\n    }\n    return INF; \n}\n\n\nvec3 shuffled(vec3 a, float size, vec3 shuffle) {\n    return a * size + shuffle;\n}\n\n\nfloat traceDod(vec3 pos, vec3 dir, out vec3 normal, float size, vec3 shuffle) \n{\n    vec3 centr = vec3(0, 0, 0);\n    float A = 1.618034;\n    float B = A - 1.;\n    \n    vec3 v[20];\n    v[0] = vec3(1, 1, 1);\n    v[1] = vec3(1, 1, -1);\n    v[2] = vec3(1, -1, 1);\n    v[3] = vec3(1, -1, -1);\n    v[4] = vec3(-1, 1, 1);\n    v[5] = vec3(-1, 1, -1);\n    v[6] = vec3(-1, -1, 1);\n    v[7] = vec3(-1, -1, -1);\n    v[8] = vec3(0, B, A);\n    v[9] = vec3(0, B, -A);\n    v[10] = vec3(0, -B, A);\n    v[11] = vec3(0, -B, -A);\n    v[12] = vec3(B, A, 0);\n    v[13] = vec3(B, -A, 0);\n    v[14] = vec3(-B, A, 0);\n    v[15] = vec3(-B, -A, 0);\n    v[16] = vec3(A, 0, B);\n    v[17] = vec3(A, 0, -B);\n    v[18] = vec3(-A, 0, B);\n    v[19] = vec3(-A, 0, -B);\n    \n    for (int i = 0; i < 20; i++) {\n        v[i] = shuffled(v[i], size, shuffle);\n    }\n    \n    float t = INF;\n    float cur_t;\n    cur_t = plane5(v[8], v[10], v[2], v[16], v[0], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[10] - v[8];\n        vec3 vect2 = v[2] - v[10];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[8];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n    cur_t = plane5(v[12], v[14], v[4], v[8], v[0], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[14] - v[12];\n        vec3 vect2 = v[4] - v[14];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[12];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n    cur_t = plane5(v[16], v[17], v[1], v[12], v[0], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[17] - v[16];\n        vec3 vect2 = v[1] - v[17];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[16];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n \n    cur_t = plane5(v[17], v[3], v[11], v[9], v[1], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[3] - v[17];\n        vec3 vect2 = v[11] - v[3];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[17];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n    \n    cur_t = plane5(v[9], v[5], v[14], v[12], v[1], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[5] - v[9];\n        vec3 vect2 = v[14] - v[5];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[9];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n    cur_t = plane5(v[10], v[6], v[15], v[13], v[2], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[6] - v[10];\n        vec3 vect2 = v[15] - v[6];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[10];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n    cur_t = plane5(v[13], v[3], v[17], v[16], v[2], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[3] - v[13];\n        vec3 vect2 = v[17] - v[3];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[13];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n \n    cur_t = plane5(v[13], v[15], v[7], v[11], v[3], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[15] - v[13];\n        vec3 vect2 = v[7] - v[15];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[13];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n    \n    cur_t = plane5(v[18], v[6], v[10], v[8], v[4], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[6] - v[18];\n        vec3 vect2 = v[10] - v[6];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[18];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n    cur_t = plane5(v[14], v[5], v[19], v[18], v[4], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[5] - v[14];\n        vec3 vect2 = v[19] - v[5];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[14];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n \n    cur_t = plane5(v[9], v[11], v[7], v[19], v[5], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[19] - v[5];\n        vec3 vect2 = v[7] - v[19];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[9];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n \n \n    cur_t = plane5(v[15], v[7], v[19], v[18], v[6], dir, pos, centr);\n    if (cur_t < t) {\n        t = cur_t;\n        vec3 vect1 = v[7] - v[15];\n        vec3 vect2 = v[19] - v[7];\n        normal = normalize(cross(vect1, vect2));\n        vec3 to_centr = centr - v[15];\n        if (dot(normal, to_centr) > 0.0)\n            normal = -normal;\n    }\n    return t;\n}\n\n\n\nbool isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 dodNorm;\n    float dodT = traceDod(pos, dir, dodNorm, 0.6, vec3(0,0,0));\n    if (dodT < dist)\n        return true;\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    float att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 20.0f / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    float att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 10.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) {\n        refract_flag = false;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    const float WATER_N = 1.33;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    for (int i = 0; i < 100; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 dodNorm;\n        float sphT = traceDod(curPos, curDir, dodNorm, 0.6, vec3(0., 0., 0.));\n        if (sphT < t) {\n            t = sphT;\n            normal = dodNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                colorMult *= vec3(0.75, 0.75, 1);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n\n        }\n        vec3 waterN;\n        float waterT = traceSphere(curPos, curDir, 0.5, waterN);\n        if(waterT < t){\n            t = waterT;\n            normal = waterN;\n            if (randVals.x < WATER_R){\n                materialType = REFLECTION;\n            } else{\n                materialType = REFRACTION;\n                if(dot(curDir, normal) > 0.0){\n                    nEnter = GLASS_N;\n                }else{\n                    nEnter = WATER_N;\n                }\n            }\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                refract_flag = true;\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                if (!refract_flag) {\n                    n1 = nEnter;\n                }\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult ;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}