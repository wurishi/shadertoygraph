{"ver":"0.1","info":{"id":"ltsSRs","date":"1439122368","viewed":129,"name":"RayTracer Trip","username":"umarniz","description":"Test Shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raytracing","test","tripcolors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n// Create camera matrix\nmat3 setCamera( in vec3 ro, in vec3 ta, in float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n// Plane Equation\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalize UVS to -1, 1\n\tvec2 uv = 1.0 - 2.*fragCoord.xy / iResolution.xy;\n\t// Fix aspect ratio\n    vec2 aspect = uv * (fragCoord.x / fragCoord.y);\n    \n    // Mouse coordinates\n    vec2 normalizedCoord = (iMouse.xy/iResolution.xy);\n    \n    // Create Camera Matrix\n    vec3 camO, camT;\n    camO = vec3(normalizedCoord.x,0.,normalizedCoord.y);\n    camT = vec3(0.+sin(iTime),0.2,0.5 * cos(iTime));\n    \n    mat3 cam = setCamera(camO, camT, 0.);\n    \n    // Get ray direction\n    vec3 rd = cam * normalize(vec3(aspect.xy,2.5));\n    vec3 ro = vec3(0,0,0);\n    \n    vec3 color;\n    for (float i=0.5;i<1.;i+=0.001)\n    {\n        // Get vector from plane equation\n        vec2 res = vec2(sdPlane(ro+rd*i), 1.0);\n        \n        // Get hit position and use for further calculations\n        vec3 pos = ro + res.x*rd;\n\n        // Checker Texture\n        float f = mod( floor(100.0*pos.z) + floor(100.0*pos.x), 2.0);\n        color = 0.4 + 0.1*f*vec3(1.0);\n        \n        // Trip out the colors\n        color.x = sin(color.x+cos(iTime));\n        color.y = cos(color.x+sin(iTime));\n    }\n    \n    fragColor = vec4(color.xyz, 1.0);\n    \n    \n\t//fragColor = vec4(aspect,0.5+0.5*sin(iTime),1.0);\n}","name":"","description":"","type":"image"}]}