{"ver":"0.1","info":{"id":"WlfyDj","date":"1637704821","viewed":178,"name":"rhythmic shapes","username":"sukupaper","description":"Old shader made in 2020","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["abstract","geometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author:paperu\n\n#define T 6.283185307\n#define PI T*.5\n\nfloat aa, t;\n\nfloat rd(vec2 st){ return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.585); }\nmat2 rot(float a) { float c = cos(a), s = sin(a); return mat2(c,s,-s,c); }\n\nfloat opSmoothUnion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat anim1(float x, float sm) {\n  x = mod(x,2.) - 1.;\n  return smoothstep(sm,-sm,x + sm) + smoothstep(-sm,sm,x - 1. + sm);\n}\nfloat anim2(float x, float sm) {\n  return smoothstep(-sm,sm,mod(x, 1.) - 1. + sm) + floor(x);\n}\nvec2 canim(vec2 sp, float t) {\n    return vec2(cos(sp.x*t),sin(sp.y*t));\n}\n\nfloat gm(vec2 p, float n, float sz){\n    float r = T/n, a = atan(p.x,p.y) + T*.5;\n    return cos(floor(a/r + .5)*r - a)*length(p) - sz;\n}\nfloat ci(vec2 p, float sz) { return length(p) - sz; }\nfloat ray(vec2 p, float sm) {\n    p.x = mod(p.x,sm) - sm*.5;\n    return length(p.x) - sm*.25;\n}\n\nvec3 colorF(vec2 p, vec2 staticP) {\n    vec2 div = vec2(0.3,.65);\n    vec2 pF = floor((p - div*.5)/div);\n    p = mod(p - div*.5, div) - div*.5;\n    p.y += 0.15;\n    vec2 p1 = p, p2 = p;\n    \n    p1 *= rot(-T*anim2(t + pF.y,.25));\n    float d1 = gm(p1,3., .07), d2 = gm(p1,5., .1), d = mix(d1,d2,anim1(t + pF.y,.25));\n    \n    p2.y -= .15;\n    float d3 = 10e9;\n    for(int i = 0; i < 8; i++) {\n        vec2 sh = .12*(vec2(rd(vec2(float(i)*0.042,.1548798)),rd(vec2(float(i)*-12.394,.15489))) - .5);\n        float tt = t*.5 + cos(t*.2)*.75;\n        d3 = opSmoothUnion(d3,\n                 ci(p2 + canim(vec2(T*1.5),tt + sh.x*200.)*vec2(0.03,0.15) + sh,\n                .025 - .015*abs(cos(t*T*.5 - T*.125 + sh.x*5.))),.02\n        ); \n    }\n    \n    d = opSmoothUnion(d,d3,.04);\n    //d = min(d+0.02,abs(d) - .002);\n    \n    d = smoothstep(aa,-aa,d);\n    \n    float dRay1 = smoothstep(aa,-aa,ray(p*rot(T*.125) - t*.1,.0625));\n    float dRay2 = smoothstep(aa,-aa,ray(staticP*rot(-T*.125) + t*.1,.0625*2.));\n    vec3 color = mix(vec3(.03)*dRay2,mix(vec3(0.920,0.101,0.809),vec3(0.034,0.658,1.000),anim1(t + pF.y,.25)) -dRay1*.5,d);\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = fragCoord.xy/iResolution.xy - .5;\n    p.x *= iResolution.x/iResolution.y;\n    \n    vec2 st = p;\n    \n    //p /= (.4 + length(p - .75))*1.;\n    \n    const float sz = 1.;\n    p *= sz;\n    aa = sz/iResolution.x;\n    t = iTime;\n    \n    p *= rot(.2);\n    vec2 staticP = p;\n    p.y += .075 - anim2(t,.18)*.65*sign(cos(abs(p.x)*T*1.644))*.333333333 - t*.05;\n    \n    vec3 color = vec3(0.);\n    \n    const int itBlur = 10;\n    float tShift = 1./30./float(itBlur);\n    for(int i = 0; i < itBlur; i++) {\n        t += tShift;\n        color += colorF(p,staticP);\n    }\n    aa *= 15.;\n    color += colorF(p,staticP)*3.;\n    color /= float(itBlur) + 1.;\n    \n    aa *= 3.;\n    color += colorF(staticP*.333,staticP)*.2;\n\n    fragColor = vec4(color - pow(length(st)*.16,2.),1.0);\n}","name":"Image","description":"","type":"image"}]}