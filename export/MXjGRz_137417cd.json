{"ver":"0.1","info":{"id":"MXjGRz","date":"1708142980","viewed":56,"name":"Hexagonal Voronoi Study","username":"Cellulose","description":"Randomizing a hexagonal grid into a hexagonal-ish voronoi pattern we can limit our search to the current hex cell and its 12 nearest neighbors.  An study toward raymarched voronoi effects.\n\nRare gold color means result didn't come from 7 nearest hexes.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"lX2GzR","parentname":"Hexagonal Voronoi (cheap mode!)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Special thanks to Amit Patel, Red Blob Games\n// https://www.redblobgames.com/grids/hexagons/#pixel-to-hex\nvec2 hex_round(vec2 hax)\n{\n    vec3 frac = vec3(hax, -hax.x-hax.y), qrs = round(frac), diff = abs(qrs-frac);\n    if (diff.x > max(diff.y, diff.z)) return vec2(-qrs.y-qrs.z, qrs.y);\n    else if (diff.y > diff.z)         return vec2(qrs.x, -qrs.x-qrs.z);\n    else                              return vec2(qrs.xy);\n}\nconst float _r3 = sqrt(3.0), _r3d3 = _r3/3.0, _r3d6 = _r3/6.0;\nvec2 xy_to_hex(vec2 xy)    {return vec2(dot(xy, vec2(.5, -_r3d6)), xy.y*_r3d3);}\nvec2 hex_to_xy(vec2 hx)    {return vec2(dot(hx, vec2(2.0, 1.0)),   hx.y*_r3);}\n\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n\nvec2 voro_point(ivec2 cell)\n{\n    vec2 cen = hex_to_xy(vec2(cell));\n    float ang = rand(.81*cen) * 6.2831853072;\n    \n    // Limiting offset to <=60% of hexagon's inner radius seems to ensure\n    // that the nearest point will always come from a 7-hex cluster.\n    float mag = rand(cen);\n    return cen + mag * vec2(cos(ang), sin(ang));\n}\n\nstruct VoroCell\n{\n    vec2  pos;\n    ivec2 cell;\n    vec2  point;\n    float distSq;\n};\n\nvoid voro_test(inout VoroCell voro, ivec2 cell)\n{\n    vec2 point = voro_point(cell);\n    vec2 delta = point-voro.pos;\n        \n    float distSq = dot(delta,delta);\n    if (distSq < voro.distSq)\n    {\n        voro.distSq = distSq;\n        voro.cell = cell;\n        voro.point = point;\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Start with a grid 15 squares high.\n    vec2 pos = 15.0 * (fragCoord/iResolution.y);\n    \n    {\n        float path = .2 * iTime;\n        pos += 50.0 * vec2(cos(path), sin(path));\n    }\n    \n    float px = 15.0 / iResolution.y;\n    \n    \n    // Find the hexagon we're inside (in a regular hexgrid)\n    ivec2 hex = ivec2(hex_round(xy_to_hex(pos)));\n    \n    // We'll search for the hex whose random voronoi point is closest.\n    VoroCell voro;\n    voro.pos = pos;\n    voro.distSq = 1e8;\n    voro.cell = hex;\n    \n    // Iterate over the center hexagon and its six neighbors.\n    voro_test(voro, hex+ivec2( 0, 0));\n    \n    // Search hex cells 1 step away\n    voro_test(voro, hex+ivec2(+1, 0));\n    voro_test(voro, hex+ivec2(+1,-1));\n    voro_test(voro, hex+ivec2( 0,+1));\n    voro_test(voro, hex+ivec2(-1, 0));\n    voro_test(voro, hex+ivec2(-1,+1));\n    voro_test(voro, hex+ivec2( 0,-1));\n    ivec2 cell_1_step = voro.cell;\n    \n    // Search hex cells \"1.5\" steps away\n    voro_test(voro, hex+ivec2(+2,-1));\n    voro_test(voro, hex+ivec2(+1,+1));\n    voro_test(voro, hex+ivec2(-1,+2));\n    voro_test(voro, hex+ivec2(-2,+1));\n    voro_test(voro, hex+ivec2(-1,-1));\n    voro_test(voro, hex+ivec2(+1,-2));\n    ivec2 cell_1p5_step = voro.cell;\n    \n    // Search hex cells 2 steps away\n    voro_test(voro, hex+ivec2(+2, 0));\n    voro_test(voro, hex+ivec2(+2,-2));\n    voro_test(voro, hex+ivec2( 0,+2));\n    voro_test(voro, hex+ivec2(-2, 0));\n    voro_test(voro, hex+ivec2(-2,+2));\n    voro_test(voro, hex+ivec2( 0,-2));\n    \n    vec3 col = vec3(.2 + .8 * rand(vec2(voro.cell)));\n    \n    //col.r *= rand(vec2(nearest_cell-center_hex));\n    //col.g = nearest_dist;\n    //col.rb += .2 * normalize(uv.xy - hex_center.xy);\n    //col.g += .05 - .1 * length(uv.xy - hex_center.xy);\n    \n    \n    vec2 grid = pos;\n    grid = abs(grid-round(grid));\n    if (min(grid.x, grid.y) < 1.5*px) col *= .9;\n    \n    // Red highlight if voronoi cell isn't within 1 step on hex grid.\n    if (voro.cell != cell_1p5_step)    col  = vec3(1,0,1);\n    else if (voro.cell != cell_1_step) col *= vec3(1.4,1.2,.8);\n    else                               col *= vec3(.75,.95,1);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}