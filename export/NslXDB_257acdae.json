{"ver":"0.1","info":{"id":"NslXDB","date":"1619167392","viewed":106,"name":"Shuffle noise","username":"antovsky","description":"A maybe-interesting application of https://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/\nNoise where each pixel is a unique value and never repeats. (well, at least the float doesn't, the output 8bit does..)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","shuffle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2021 by Anton Mikhailov\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n/* Any other hash should work according to the article, but I'm sticking to a nice and bijective one just in case... */\nuint splitmix32(uint b) {\n\tb += 0x9e3779b9u;\n\tb ^= b >> 15;\n\tb *= 0x85ebca6bu;\n\tb ^= b >> 13;\n\tb *= 0xc2b2ae3du;\n\tb ^= b >> 16;\n\treturn b;\n}\n/* \n   Adapted into a stateless versionfrom:\n   https://blog.demofox.org/2013/07/06/fast-lightweight-random-shuffle-functionality-fixed/\n   https://github.com/Atrix256/RandomCode/blob/master/StoragelessShuffle/Source.cpp\n*/\nuint shuffle(uint idx, uint count, uint seed) {\n\t/* Pre-calculate the masks needed for the Feistel network. */\n\t/* If doing this for many indecies in a row, it would make sense to cache this. */\n\tuint next_pow_4 = 4u;\n\twhile (count > next_pow_4)\n\t\tnext_pow_4 *= 4u;\n\tuint num_bits = 0u;\n\tuint mask = next_pow_4 - 1u;\n\twhile (mask != 0u) {\n\t\tmask = mask >> 1;\n\t\tnum_bits++;\n\t}\n\tuint half_num_bits = num_bits / 2u;\n\tuint right_mask = (1u << half_num_bits) - 1u;\n\tuint left_mask = right_mask << half_num_bits;\n\n\t/* This will terminate as long as idx starts less than count. */\n\twhile (true)\n\t{\n\t\t/* Split the index. */\n\t\tuint left = (idx & left_mask) >> half_num_bits;\n\t\tuint right = (idx & right_mask);\n\t\t/* Do 4 Feistel rounds. */\n\t\tfor (int index = 0; index < 4; ++index)\n\t\t{\n\t\t\tuint newLeft = right;\n\t\t\tuint newRight = left ^ (splitmix32(right ^ seed) & right_mask);\n\t\t\tleft = newLeft;\n\t\t\tright = newRight;\n\t\t}\n\t\t/* Re-assemble the bits into a shuffled index. */\n\t\tidx = (left << half_num_bits) | right;\n\n\t\t/* If it's in range, we are done. Otherwise keep trying (reject this result) */\n\t\tif (idx < count)\n\t\t\treturn idx;\n\t}\n\t/* We should never get here. */\n\treturn 0u;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    uint i = uint(iTime * 1000.0);\n    uint idx = uint(fragCoord.x + fragCoord.y * iResolution.x);\n    uint count = uint(iResolution.x * iResolution.y);\n    uint seed = 108u;\n    float v = float(shuffle(idx, count, seed)) / float(count);\n    col = vec3(v);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}