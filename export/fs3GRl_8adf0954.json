{"ver":"0.1","info":{"id":"fs3GRl","date":"1630423068","viewed":82,"name":"try2:merged ^2 spline path","username":"yunhai","description":"an idea to creat smooth path by linking each ^2 spline created by merge 2 segments created by 3 forward points and 3 backwards points\ndo not have C1 continuity","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"ss33RB","parentname":"try1:linked ^2 spline path "},"renderpass":[{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid drawP(vec2 C,inout vec4 tarCol)\n{\n #define DP(p,tar,col) tar.rgb=mix(tar.rgb,col,SS(.2,.1,length(UV-p)))\n\n    \n    for(int i=0;i<psCount;i++)\n    {\n        vec3 pcol=float(i)<iT?vec3(.2,7,.1):vec3(1);\n        DP(GP(i),tarCol,pcol);\n    }\n        \n}\n\nvoid mainImage( out vec4 O, in vec2 C )\n{\n    O.rgb=cartesian(UV);    \n    drawP(C,O);\n    O+=texture(iChannel0,C/iR);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define SS(a,b,t) smoothstep(a,b,t)\n#define SL(d) smoothstep(HLW,HLW-.005,d)\nconst float PI=3.14159265;\nconst int MAX_FUNCTION_NUM=10;\n//---------------------Lines-------------------\nconst float HLW=.05;//half line width\nconst float MSI=2.;//mesh space interval\nfloat line(vec2 uv,vec2 ori,vec2 dir)\n{\n    vec2 sp=uv-ori;\n    vec2 closp=dot(sp,dir)*dir+ori;\n    return SL(length(uv-closp));\n}\n//----------------------------------------------\nvec3 cartesian(vec2 uv)\n{\n    vec3 col=vec3(0.);\n    float msp=MSI;\n    float lhlw=HLW/2.;//local HLW\n    vec3 mesh=vec3(SS(lhlw,lhlw-.005,abs(uv.x-round(uv.x/msp)*msp)));\n    mesh+=vec3(SS(lhlw,lhlw-.005,abs(uv.y-round(uv.y/msp)*msp)));\n    col+=mesh*.5;\n    col=mix(col,vec3(0.,1.,0.),line(uv,vec2(0.),vec2(1.,0.)));\n    col=mix(col,vec3(0.,1.,0.),line(uv,vec2(0.),vec2(0.,1.)));\n    return col;\n}\nvec3 palette(float t)//Color Palette\n{\n    t*=1.732;\n    return vec3(.8)+vec3(.2)*cos(2.*PI*(vec3(.71,.31,.21)*t+vec3(.2,.4,.6)));\n}\n\n//-------------------experiment-----------------\nconst int psCount=18;\nconst int rndSeed=3;\nconst float EPSILON=1e-3;\n#define iR iResolution.xy\n#define UV ((C-.5*iR)/iR.y*20.)\n#define iT mod(iTime,float(psCount)-.8)\n#define GP(i) ((texelFetch(iChannel1,ivec2(i,i)+ivec2(rndSeed*10,5),0).xy-.5)*10.)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvec4 decode(vec2 coord)\n{\n   return texelFetch(iChannel0,ivec2(coord),0);\n}\nvec2 quadraticSpline(int i,float t)\n{\n    \n    vec2 a,b,c;\n        //p(t)=a*t^2+b*t+c\n        //p(0)=p1;p(0.5)=p2;p(1)=p3\n        //c=p1;0.25*a+0.5*b+c=p2;a+b+c=p3\n    mat2x3 res=inverse(mat3(0,.25,1,\n                            0,.5 ,1,\n                            1, 1 ,1 ))*mat2x3(GP(i).x,GP(i+1).x,GP(i+2).x,\n                                              GP(i).y,GP(i+1).y,GP(i+2).y);\n        a=vec2(res[0].x,res[1].x);\n        b=vec2(res[0].y,res[1].y);\n        c=vec2(res[0].z,res[1].z);\n    return a*t*t+b*t+c;\n}\nvec2 mergeSpline(float t)\n{\n    float ti=floor(t),tf=t-ti;\n    int seg=int(ti);\n    vec2 n=quadraticSpline(seg,tf*.5);\n    vec2 l=quadraticSpline(seg-1,tf*.5+.5);\n    return mix(n,l,.5);\n}\nvoid mainImage( out vec4 O, in vec2 C )\n{\n    mat2x3 res;\n    float t=iT;\n    \n    vec2 ptf=quadraticSpline(int(t),(t-floor(t))*.5);\n    vec2 ptb=quadraticSpline(int(t)-1,(t-floor(t))*.5+.5);\n    vec2 pt=mix(ptf,ptb,.5);\n    O.rgb=iT<.05?vec3(0):texelFetch(iChannel0,ivec2(C),0).rgb*0.98;\n    \n    //add point\n    O.rgb+=vec3(1,1,0)*SS(.1,.05,length(UV-pt));\n    O.rgb+=vec3(1,0,0)*SS(.1,.05,length(UV-ptf));\n    O.rgb+=vec3(0,1,0)*SS(.1,.05,length(UV-ptb));\n}","name":"Buffer A","description":"","type":"buffer"}]}