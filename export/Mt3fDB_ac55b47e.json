{"ver":"0.1","info":{"id":"Mt3fDB","date":"1540845670","viewed":82,"name":"test123123123123","username":"NormanXpp","description":"tsh","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test123123123"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.14159;\n\nvec3 random2(vec3 st){\n    st = vec3(dot(st, vec3(127.1,311.7,-12.6)),\n              dot(st, vec3(269.5,183.3,17.9)),\n              dot(st, vec3(56.8,103.3,80.5)));\n    \n    return -1.0 + 2.0 * fract(sin(st) * 43758.5453123);\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n\n    vec3 u = (1.0 - cos(f * PI)) * 0.5;\n\n    return mix(mix(mix(dot(random2(i + vec3(0.0, 0.0, 0.0)), f - vec3(0.0, 0.0, 0.0)),\n                       dot(random2(i + vec3(1.0, 0.0, 0.0)), f - vec3(1.0, 0.0, 0.0)), u.x),\n                   mix(dot(random2(i + vec3(0.0, 1.0, 0.0)), f - vec3(0.0, 1.0, 0.0)),\n                       dot(random2(i + vec3(1.0, 1.0, 0.0)), f - vec3(1.0, 1.0, 0.0)), u.x), u.y),\n               mix(mix(dot(random2(i + vec3(0.0, 0.0, 1.0)), f - vec3(0.0, 0.0, 1.0)),\n                       dot(random2(i + vec3(1.0, 0.0, 1.0)), f - vec3(1.0, 0.0, 1.0)), u.x),\n                   mix(dot(random2(i + vec3(0.0, 1.0, 1.0)), f - vec3(0.0, 1.0, 1.0)),\n                       dot(random2(i + vec3(1.0, 1.0, 1.0)), f - vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z);\n}\n\nfloat distToSegment(vec2 from, vec2 to, vec2 point, float aspect) {\n    from.x *= aspect;\n    to.x *= aspect;\n    \n    vec2 l = to - from;\n    vec2 d = point - from;\n    float v = dot(l, d);\n    float w = dot(l, l);\n    float t = clamp(v / w, 0.0, 1.0);\n    vec2 nearestPoint = from + (to - from) * t;\n    return distance(nearestPoint, point);\n}\n\nvec2 rotate(vec2 v, float a) {\n    v -= 0.5;\n    return vec2(cos(a) * v.x - sin(a) * v.y,\n                sin(a) * v.x + cos(a) * v.y) + 0.5;\n}\n\nconst float seed = 0.0;\n\nconst vec2 scale = vec2(8.0, 8.0);\nconst float p = 1.0;\nconst float threshold = 0.0;\n\nconst vec2 from = vec2(0.5, 0.5);\nconst vec2 to = vec2(0.75, 0.5);\nconst float radius = 0.15;\n\nconst float angle = 0.2;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    \n    float aspect = iResolution.x/iResolution.y;\n    vec2 ust = st;\n    ust.x *= aspect;\n\n    vec2 pos = rotate(ust, distance(st, vec2(0.5)) * 25.0) * scale;\n    float a = noise(vec3(pos, iTime)) * 0.5 + 0.5;\n    a = pow(a, p);\n    a *= step(threshold, a);\n    \n    float dist = distToSegment(from, to, ust, aspect);\n    dist = 1.0 - step(radius, dist);\n    \n    vec3 bgColor = texture(iChannel0, st).rgb;\n    vec3 paintColor = vec3(a);\n    vec3 outputColor = mix(bgColor, paintColor, dist); \n\n    fragColor = vec4( texture(iChannel0, st + (a - 0.5) * 2.0 * 0.05 * max(0.0 ,(1.0 - iTime / 4.0))).rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}