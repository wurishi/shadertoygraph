{"ver":"0.1","info":{"id":"NtyXDm","date":"1640774988","viewed":1085,"name":"PESA radar emitter II","username":"mlaang","description":"Multiple beams. Unfortunately it seems that this requires amplitude control. What allows 1/sqrt(2)*(sin(x+phi1) + sin(x+phi2)) = A sin(x + phi3) makes phi3 = (phi1+phi2)/2 and A=sin(pi/2 - phi3 + phi1) + sin(pi/2-phi3 + phi2). One beam is mouse controlled","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["radar"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float scale = 6.0;\nconst float emitters = 30.0;\nconst float pi_half = 3.14159265/2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    uv = uv*scale;\n    \n    float c = 0.0,\n          dist;\n    for(float i=0.0; i <= 1.0; i+=1.0/emitters) {\n        dist = length(uv - vec2(0.1, (scale-0.5)/2.0+i*0.5));\n        float phase = 150.*i*iMouse.y/emitters;\n        float phase2 = i*40.0*cos(iTime);\n        float al = pi_half - (phase + phase2)/2.;\n        //c += 20.0*sin(200.* dist + phase)/(dist)/emitters;\n        c += 20.0*sqrt(0.5)*(sin(al + phase2)+sin(al + phase))*sin(200.* dist + (phase + phase2)/2.)/(dist)/emitters;\n    }\n\n    // Time varying pixel color\n    vec3 col = vec3(c, c, c);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}