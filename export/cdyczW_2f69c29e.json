{"ver":"0.1","info":{"id":"cdyczW","date":"1695828158","viewed":67,"name":"Planet struck","username":"JiaHao994","description":" photons strike a planetary surface","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 uv = vec2(0.0);\n\nfloat sdGry(vec3 p, float s, float t, float b) {\n    p *= s;\n    float sw = 1.25+1.25*sin(23.3);\n    return abs(dot(sin(p*1.57-sw), cos(p.zxy))-b)/(s)-t;\n}\n\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\n\nmat2 rot(float a){\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\n\nvec2 map(vec3 p){\n    vec2 res = vec2(1e5,0.0);\n    float cutbox = sdSphere(p, 5.5);\n    \n    float a = sdGry(p, 11.0, 0.328 -  0.15 * abs(sin(iTime * 3.0 * 0.3)), 0.0);\n    res = vec2(max(a, cutbox),1.0);\n \n    return res;\n}\n\nvec2 castRay(vec3 ro, vec3 rd){\n    vec2 res = vec2(-1.0, -1.0);\n    \n    float tmin = 0.5;\n    float tmax = 20.0;\n    \n    float t = tmin;\n    \n    for(int i = 0; i < 256 && t < tmax; i++){\n        vec2 d = map(ro + t * rd);\n        \n        if(abs(d.x) < 0.0005){\n            res = vec2(t, d.y);\n            break;\n        }\n        t += d.x;\n    }\n    \n    return res;\n    \n}\n\nvec3 calcNormal( vec3 pos )\n{\n    vec2 e = vec2(0.0005,0.0);\n    return normalize( vec3( \n        map( pos + e.xyy ).x - map( pos - e.xyy ).x,\n        map( pos + e.yxy ).x - map( pos - e.yxy ).x,\n        map( pos + e.yyx ).x - map( pos - e.yyx ).x ) );\n}\n\n\n\nvec3 render(vec3 ro, vec3 rd){\n    vec3 color = vec3(0.0);\n    vec2 res = castRay(ro, rd);\n    \n    if(res.x > 0.0){\n        float t = res.x;\n        vec3 pos = ro + t * rd;\n        \n        vec3 n = calcNormal(pos);\n        \n        if(res.y == 1.0){\n            color = vec3(0.690,0.408,0.012);\n        }\n\n        vec3 l = normalize(vec3(.1,9,7));\n        \n        float diff = clamp(dot(n,l),0.,1.);\n        \n        color = diff * color;\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    uv = (2.0 * gl_FragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n  //  m = iMouse.xy == vec2(0.0) ? vec2(1.0,-1.0) : m;\n\n    vec3 ro = vec3(0.0, 0.0, 8.0 );\n    vec3 rd = vec3(uv, -1.0 - 4.0 * abs(sin(iTime * 0.5 * 0.25)));\n \n    \n    ro.xz *= rot(m.y);\n    rd.xz *= rot(m.y);\n    \n    ro.yz *= rot(m.x);\n    rd.yz *= rot(m.x);\n    \n    vec3 color = render(ro, rd);\n    color = pow(color, vec3(0.4545));\n\n    fragColor = vec4(color, 1.0);\n\n}","name":"Image","description":"","type":"image"}]}