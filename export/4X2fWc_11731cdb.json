{"ver":"0.1","info":{"id":"4X2fWc","date":"1730030902","viewed":124,"name":"Shimmering Water-(üç¥TileableH20)","username":"hypotheticalmed","description":"This was a fork of Tileable Water Caustic by Dave_Hoskins, edited/revised by www.H-Med.TV to use in part of our Elevation Escalation Series.  See it @ https://www.youtube.com/watch?v=OQOvvLBPJyQ&list=PL8NoK5ZtIEVvj1runnWctVYFl9mpzEsCt","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["water","caustic"],"hasliked":0,"parentid":"MdlXz8","parentname":"Tileable Water Caustic"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Found this on GLSL sandbox. I really liked it, changed a few things and made it tileable.\n// :)\n// by David Hoskins.\n// Original water turbulence effect by joltz0r\n\n\n// Redefine below to see the tiling...\n//#define SHOW_TILING\n\n#define TAU 3.333333333333\n#define MAX_ITER 5\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tfloat time = iTime * 2.3+77.0;\n    // uv should be the 0-1 uv of texture...\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n#ifdef SHOW_TILING\n\tvec2 p = mod(uv*TAU*2.0, TAU)-777.0;\n#else\n    vec2 p = mod(uv*TAU, TAU)-333.0;\n#endif\n\tvec2 i = vec2(p);\n\tfloat c = 1.0;\n\tfloat inten = .005;\n\n\tfor (int n = 0; n < MAX_ITER; n++) \n\t{\n\t\tfloat t = time * (1.0 - (3.5 / float(n+1)));\n\t\ti = p + vec2(cos(t - i.x) + sin(t + i.y), sin(t - i.y) + cos(t + i.x));\n\t\tc += 1.0/length(vec2(p.x / (sin(i.x+t)/inten),p.y / (cos(i.y+t)/inten)));\n\t}\n\tc /= float(MAX_ITER);\n\tc = 1.17-pow(c, 1.73);\n\tvec3 colour = vec3(pow(abs(c), 37.0));\n    colour = clamp(colour + vec3(0.0, 0.35, 0.5), 0.0, 1.0);\n\n\t#ifdef SHOW_TILING\n\t// Flash tile borders...\n\tvec2 pixel = 2.0 / iResolution.xy;\n\tuv *= 2.0;\n\tfloat f = floor(mod(iTime*.5, 7.0)); \t// Flash value.\n\tvec2 first = step(pixel, uv) * f;\t\t   \t// Rule out first screen pixels and flash.\n\tuv  = step(fract(uv), pixel);\t\t\t\t// Add one line of pixels per tile.\n\tcolour = mix(colour, vec3(3.3, 3.5, 3.7), (uv.x + uv.y) * first.x * first.y); // Yellow line\n\t#endif\n    \n\tfragColor = vec4(colour, 1.7);\n}","name":"Image","description":"","type":"image"}]}