{"ver":"0.1","info":{"id":"wdyfWw","date":"1607265556","viewed":40,"name":"Julia Fractal 2","username":"henrmota","description":"julia fractal","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["julia"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cycles 50\n\nvec2 complexMultiplication(vec2 a, vec2 b) {\n\treturn vec2(a.x * b.x - a.y * b.y, a.x * b.y + b.x * a.y);    \n}\n\nfloat juliaSet(vec2 z, vec2 c) {\n     int n = 0;\n     for(int i = 0; i < cycles; i++) {\n        z = complexMultiplication(z, z) + c;\n        if(length(z) > 8.) {\n            break;\n        }\n        n++;\n    }\n    \n    return float(n/cycles);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n\n    uv *=3.;\n    // Time varying pixel color\n    vec3 col = vec3(0);;\n \n    float t = iTime * 0.5;\n    col += juliaSet(uv, vec2(cos(t + 3.), sin(t + 4.)));\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}