{"ver":"0.1","info":{"id":"XXySDc","date":"1720548225","viewed":27,"name":"Subtractive Saturation","username":"izutionix","description":"Left: Subtractive Saturation (reminiscent of film); Right: Additive Saturation (most common).\nMouse up-down controls saturation intensity; Mouse left-right compares subtractive and additive saturation.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["color","saturation","subtractivesaturation","colordensity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COMPARE\n\n// [0-1] tweakables\nfloat rebrightenAmount = 0.5; // 0.75 for closest match to additive saturation\nfloat vibranceAmount = 0.7; // apply saturation less to already saturated colors\nfloat protectHighlights = 1.;\n\n\n#define clamp(x) clamp(x, 0., 1.)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  float mx = max(iResolution.x, iResolution.y);\n  float sat = 1.;\n\n  vec2 uv = fragCoord.xy / iResolution.xy;\n  vec2 mouse = iMouse.xy / iResolution.xy;\n  if(dot(iMouse.xy, vec2(1.))==0.) mouse = vec2(1,0.99)*pow(0.5+0.5*sin(iTime+vec2(0,1.5708)), vec2(1., 0.25)); // if no mouse is detected\n\n  sat = 1.-mouse.y;\n  \n  vec3 gchrome = texture(iChannel0, uv).rgb;\n  vec3 london = texture(iChannel1, uv).rgb;\n  //vec3 webcam = texture(iChannel2, uv).rgb;\n  vec3 rainbow = 0.6+0.3*cos(iTime+6.28*(uv.y+vec3(0.,1./3.,2./3.)));\n  \n  vec3 col = vec3(0.);\n  //col = mix(mix(gchrome, rainbow, 4e-2), london, 0.2);\n  col = gchrome;\n  //col = london;\n  vec3 colOrig = col;\n  \n  float grey = dot(col, vec3(1./3.));\n  vec3 chroma = col - grey;\n  float satChannel = 1.-length(chroma); //1.-dot(chroma, vec3(1./3.))\n  \n  float vibranceFactor = satChannel;\n  float satCompressed = mix(vibranceAmount, sat, vibranceFactor);\n  sat = satCompressed;\n  \n  float subsat = sat;\n  float adsat = 1.;\n  \n  #ifdef COMPARE\n  if (uv.x > mouse.x ) { // compare adsat and subsat\n    adsat = pow(sat, 0.5);\n    subsat = 1.;\n  }\n  #endif\n  \n  chroma = col - grey/(.5+.5*subsat);\n  col = grey + chroma/adsat;\n  col /= pow(subsat, rebrightenAmount);\n  \n  float cliprange = clamp(pow(satChannel*grey, 2.) - subsat); // unsaturated highlights\n  col = mix(col, colOrig, cliprange * protectHighlights);\n\n  //col = vec3(sat);\n  fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}