{"ver":"0.1","info":{"id":"cs2fWy","date":"1690092982","viewed":47,"name":"Fixed-point IGN","username":"lowellcamp","description":"Fixed-point arithmetic replaces precision loss with wraparound, with no loss in noise quality over time.\n\nReference on interleaved gradient noise:\nhttps://blog.demofox.org/2022/01/01/interleaved-gradient-noise-a-different-kind-of-low-discrepancy-sequence/","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","random","hash","lowdiscrepancy","interleavedgradientnoise","ign"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const uint FIXEDSCALE = uint(exp2(24.0));\nconst float FIXED2NORM = 1.0 / exp2(24.0);\n\nfloat ign_fixed(ivec2 pixel, int frame) {\n    // A fixed-point inner modulus replaces precision loss with wraparound\n    uvec2 base = uvec2(pixel) * uvec2(1125928, 97931) +\n        uvec2(frame) * uvec2(6291956, 547262);\n    uint inner = ((base.x + base.y) % FIXEDSCALE);\n    return mod((52.9829189 * FIXED2NORM) * float(inner), 1.0);\n}\n\nfloat ign_float(ivec2 pixel, int frame) {\n    vec2 base = vec2(pixel) * vec2(0.06711056, 0.00583715);\n    base += float(frame) * (5.588238 * vec2(0.06711056, 0.00583715));\n    float inner = mod(base.x + base.y, 1.0);\n    return mod(52.9829189 * inner, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float halfway = (0.5 * iResolution.x);\n    \n    ivec2 pixel = ivec2(fragCoord.xy / 8.0);\n    int frame = iFrame + int(exp2(17.0));\n    \n    vec3 color = vec3(fragCoord.x < halfway ? \n        ign_fixed(pixel, frame) : \n        ign_float(pixel, frame)\n    );\n    if (abs(fragCoord.x - halfway) <= 2.0) {\n        color = vec3(1.0, 0.0, 0.0);\n    }\n    // Output to screen\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}