{"ver":"0.1","info":{"id":"mltfWX","date":"1701723651","viewed":84,"name":"learning moebius transformation","username":"jt","description":"Trying to learn about the Möbius Transformation.\nA stumbling block for me was how to actually apply it.\nFound an implementation that seems to do that,\nwhich I share here (see apply_moebius)\nin case it helps others who have the same starting difficulties.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["map","learning","complex","transformation","moebius"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mltfWX learning moebius transformation\n\n// Trying to learn about the Möbius Transformation.\n// A stumbling block for me was how to actually apply it.\n// Found an implementation that seems to do that,\n// which I share here (see apply_moebius)\n// in case it helps others who have the same starting difficulties.\n\n// see e.g.\n// https://en.wikipedia.org/wiki/Moebius_transformation\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node10.html\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node11.html\n// https://delta.cs.cinvestav.mx/~mcintosh/comun/complex/node12.html\n// and also\n// https://www.youtube.com/@mathemaniac \"Möbius transformations visualized\" https://www.youtube.com/watch?v=hhI8fVxvmaw\n\n// tags: map, learning, complex, transformation, moebius\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Möbius transform:\n// Complex numbers\n//     a z + b\n//     -------\n//     c z + d\n/*\n// for readability\n#define real(z) z.x\n#define imag(z) z.y\n\n// found here: https://math.stackexchange.com/questions/36542/real-and-imaginary-parts-of-the-m%C3%B6bius-transformation\nvec2 apply_moebius(vec2 a, vec2 b, vec2 c, vec2 d, vec2 z)\n{\n    float alpha = real(z)*real(d)+imag(z)*imag(d);\n    float beta  = real(z)*imag(d)-imag(z)*real(d);\n\n    float mu = dot(z,z) * real(c) + alpha;\n    float nu = dot(z,z) * imag(c) + beta;\n    float zeta = real(z)*real(c)-imag(z)*imag(c)+real(d);\n    float eta  = real(z)*imag(c)+imag(z)*real(c)+imag(d);\n    float delta = dot(z,z)*dot(c,c)+dot(d,d)+2.0*alpha*real(c)+2.0*beta*imag(c);\n    return\n        vec2\n        (\n            mu*real(a)+nu*imag(a)+zeta*real(b)+eta*imag(b),\n            mu*imag(a)-nu*real(a)+zeta*imag(b)-eta*real(b)\n        )\n        /\n        delta;\n}\n*/\nvec2 cmul(vec2 a, vec2 b)\n{\n    //return mat2(a,-a.y,a.x) * b; // code-golf variant \"by deMoivre formula\" suggested by Fabrice, but possibly \"compiler problems\" pointed out by mla\n    return\n        vec2\n        (\n            a.x*b.x-a.y*b.y,\n            a.x*b.y+a.y*b.x\n        );\n}\n\nvec2 cdiv(vec2 a, vec2 b)\n{\n    return\n        vec2\n        (\n            a.x*b.x+a.y*b.y,\n            a.y*b.x-a.x*b.y\n        )\n        /\n        dot(b,b);\n}\n\n// I've overlooked the obvious concise implementation:\n// mla: \"How about just defining complex multiplication\n//       and division as cmul and cdiv say,\n//       and doing return cdiv(cmul(z,a)+b,cmul(z,c)+d) ?\"\nvec2 apply_moebius(vec2 a, vec2 b, vec2 c, vec2 d, vec2 z)\n{\n    return cdiv(cmul(z,a)+b,cmul(z,c)+d);\n}\n\n#define pi 3.1415926\n\nfloat checker(vec2 p)\n{\n    float d = 10.0/iResolution.y;\n    if(true)\n    {\n        p = sin(2.0*pi*p);\n        return smoothstep(-d,+d, p.x*p.y);\n    }\n    p = fract(p)-0.5;\n    return smoothstep(-d,+d,max(min(p.x,p.y),-max(p.x,p.y))); // fuzzy logic\n}\n\nvoid mainImage(out vec4 o, in vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise to-unit map thanks to Fabrice\n    o = vec4(0);\n    if(all(lessThan(abs(I), vec2(1))))\n    {\n        //I *= 2.0;\n        //I = apply_moebius(vec2(1,0), vec2(0), vec2(0), vec2(1,0), I); // identity\n        I = apply_moebius(vec2(0), vec2(1,0), vec2(1,0), vec2(0), I); // inversion\n        \n        o.xyz = vec3(mix(0.25,0.75,checker(I)));\n    }\n}\n","name":"Image","description":"","type":"image"}]}