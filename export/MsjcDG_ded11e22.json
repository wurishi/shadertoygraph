{"ver":"0.1","info":{"id":"MsjcDG","date":"1493755953","viewed":231,"name":"Newton's Fractal : polynomial","username":"JCDjcd","description":"Newton's fractal with root finding of a polynomial. The color of point (x,y) is attributed as follow: starting the Newton's iterations with z0=x+i.y, the algorithm converges toward a root z of the polynomial P(z)=0. Argument of z is used for the color.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["fractal","newton"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWOPI (2.0*3.1415926535) \n//--------------------------------------------------------------------------\nvec4 hsv(float h,float s,float v)\n{\n    vec3 X = abs(fract(vec3(h,h,h)+vec3(1.0,2.0/3.0,1.0/3.0))*6.0-vec3(3.0,3.0,3.0));\n    vec3 C = v*mix(vec3(1.0,1.0,1.0),clamp(X-vec3(1.0,1.0,1.0),0.0,1.0),s);\n    return vec4(C.xyz,1.0);\n} // hsv()\n//--------------------------------------------------------------------------\nvec4 compute(vec2 z0)\n{\n    float t = iTime/5.0*TWOPI;\n        \n    // Define the polynomial X^5 + exp(i*t/3)*X^3 + 0.05*exp(i*t/2)*X + exp(i.t)\n    // The five roots will vary with time.\n    vec2 polynomial[6];\n    polynomial[0].x \t= sin(t);\n    polynomial[0].y \t= cos(t);\n    polynomial[1].x \t= 0.05*cos(t/2.0);\n    polynomial[1].y \t= 0.05*sin(t/2.0);\n    polynomial[2].x \t= 0.0;\n    polynomial[2].y \t= 0.0;\n    polynomial[3].x \t= cos(t/3.0);\n    polynomial[3].y \t= sin(t/3.0);\n    polynomial[4].x \t= 0.0;\n    polynomial[4].y \t= 0.0;\n    polynomial[5].x \t= 1.0;\n    polynomial[5].y \t= 0.0;\n    \n    // do the Newton's iteration\n    vec2 z = z0;\n    int i;\n    for(i=0;i<50;i++) // do only 50 iterations\n    {\n        // compute P(z) and its derivative P'(z)\n        vec2 P \t\t\t= vec2(0.0,0.0);\n        vec2 dP \t\t= vec2(0.0,0.0);\n        vec2 z_power_d \t= vec2(1.0,0.0); // z^d\n        vec2 z_power_d1 = vec2(0.0,0.0); // z^(d-1)\n        int d;\n        float x,y;\n        for(d=0;d<=5;d++)\n        {\n            x \t= polynomial[d].x*z_power_d.x-polynomial[d].y*z_power_d.y;\n            y \t= polynomial[d].x*z_power_d.y+polynomial[d].y*z_power_d.x;\n\t\t\tP  += vec2(x,y);\n\n            x \t= polynomial[d].x*z_power_d1.x-polynomial[d].y*z_power_d1.y;\n            y \t= polynomial[d].x*z_power_d1.y+polynomial[d].y*z_power_d1.x;\n\t\t\tdP += float(d)*vec2(x,y);\n            \n            z_power_d1 \t= z_power_d;\n            x \t\t\t= z_power_d.x*z.x-z_power_d.y*z.y;\n            y \t\t\t= z_power_d.x*z.y+z_power_d.y*z.x;\n            z_power_d \t= vec2(x,y);\n\t\t} // for()\n        \n        // compute P/dP\n        float r2 \t= dP.x*dP.x+dP.y*dP.y;\n        x     \t\t= P.x*dP.x+P.y*dP.y;\n        y \t\t\t= P.y*dP.x-P.x*dP.y;\n        // Newton's iteration new_z = z - P/dP\n        if(r2 < 1.0e-12)\n        {\n            break;\n        }\n\n        z.x -= x/r2;\n        z.y -= y/r2;\n\n    } // for()\n    \n    if(50 == i) // if everything goes well\n    {\n        float h = atan(z.y,z.x)/TWOPI;\n        float s = 1.0;\n        float v = 1.0;\n        return hsv(h,s,v);\n    }\n    else // divide by 0 should have been avoided\n    {\n\t    return vec4(0.0,0.0,0.0,1.0);\n    }\n    \n} // compute()\n\n//--------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get min/max of the resolution (in most case the width).\n    float m \t= min(iResolution.x,iResolution.y);\n    float M \t= max(iResolution.x,iResolution.y);\n    vec2 uv \t= ((fragCoord.xy-0.5*iResolution.xy) / m)*2.5;\n    fragColor \t= compute(uv);\n    \n    // draw axis and unit circle in white on top of everything\n    float width = 0.01;\n    if(abs(sqrt(uv.x*uv.x+uv.y*uv.y)-1.0)<width)\n        fragColor = vec4(1.0,1.0,1.0,1.0);\n    if(abs(uv.x)<width)\n        fragColor = vec4(1.0,1.0,1.0,1.0);\n    if(abs(uv.y)<width)\n        fragColor = vec4(1.0,1.0,1.0,1.0);\n        \n} // mainImage()\n\n\n\n","name":"Image","description":"","type":"image"}]}