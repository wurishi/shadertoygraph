{"ver":"0.1","info":{"id":"MXd3D7","date":"1716595994","viewed":85,"name":"Fast RGBA integer hash","username":"Zentient","description":"Optimized version of: https://www.reedbeta.com/blog/hash-functions-for-gpu-rendering/\nTo output 8 bit RGBA values\nLeft: 50 iterations, Center: RGB 0.5 Reference, Right: Noise output","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["random","rgba","hashing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RES iResolution\nvec4 RGBAHash(uint pg)\n{    \n    uint state = pg * 747796405u + 2891336453u;\n    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;\n    uint R = 0xFFu & word;\n    uint G = 0xFFu & word >> 8;\n    uint B = 0xFFu & word >> 16;\n    uint A = 0xFFu & word >> 24;\n    return vec4(R, G, B, A) / float(0xFFu);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n   \n    uint pg = uint(RES.x * RES.x * uv.y + uv.x * RES.x);\n    \n    vec3 acc;\n    for(int i; i <= 100; i++)\n    {\n        acc += RGBAHash(pg * uint(i)).rgb;\n    }\n    \n    vec3 col = RGBAHash(pg).rgb;\n    col = (uv.x - 0.1 * uv.y) <= 0.6167 ? vec3(0.5) : col;\n    col = (uv.x - 0.1 * uv.y) <= 0.2834 ? acc / 100.0 : col;\n    \n    col = distance(uv.x - 0.1 * uv.y, 0.6167) < 0.002 ? vec3(0.0) : col;\n    col = distance(uv.x - 0.1 * uv.y, 0.2834) < 0.002 ? vec3(0.0) : col;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}