{"ver":"0.1","info":{"id":"msfXWN","date":"1668889308","viewed":285,"name":"2D glitter shader","username":"pneuma","description":"2D glitter shader","likes":2,"published":1,"flags":0,"usePreview":1,"tags":["2d","fake","anisotropic","glints","glitter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Forked from \"Fake Glints by nimitz (twitter @stormoid)\"\n// https://www.shadertoy.com/view/Md2Xzm\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n// Contact the author for other licensing options\n\n#define time iTime\nconst float FAR = 30.0;\nconst int ITR = 60;\n\nconst float PRIMARY_INTENSITY = 1.3;\nconst float PRIMARY_CONCENTRATION = 12.0;\nconst float SECONDARY_INTENSITY = 5.0;\nconst float SECONDARY_CONCENTRATION = 0.9;\n\nmat2 mm2(in float a){float c = cos(a), s = sin(a);return mat2(c,-s,s,c);}\n\nvec2 noise( in vec3 x )\n{\n    vec3 ip = floor(x);\n    vec3 fp = fract(x);\n    fp = fp*fp*(3.0-2.0*fp);\n    vec2 tap = (ip.xy+vec2(37.0,17.0)*ip.z) + fp.xy;\n    vec4 rz = textureLod( iChannel0, (tap+0.5)/256.0, 0.0 );\n    return mix( rz.yw, rz.xz, fp.z );\n}\n\n//Based on TekF's \"Anisotropic Highlights\" (https://www.shadertoy.com/view/XdB3DG)\nvec3 shade( vec3 pos, vec3 rd, vec3 normal, vec3 ligt )\n{\n    vec3 lcol = vec3(.48,.45,.9);\n    float nl = dot(normal,ligt);\n    vec3 light = lcol*max(.0,nl)*1.5;\n    vec3 h = normalize(ligt-rd);\n    vec3 rf = reflect(rd,normal);\n\n    vec3 coord = pos*.5;\n    coord.xy = coord.xy*.7071+coord.yx*.7071*vec2(1,-1);\n    coord.xz = coord.xz*.7071+coord.zx*.7071*vec2(1,-1);\n    vec3 coord2 = coord;\n    \n    //displacement of the noise grabs to create the glinting effect\n    #if 1    \n    vec3 ww = fwidth(pos);\n    coord.xy -= h.xz*20.*ww.xy;\n    coord.xz -= h.xy*20.*ww.xz;\n    coord2.xy -= h.xy*5.*ww.xy;\n    coord2.xz -= h.xz*5.*ww.xz;\n    #endif\n    \n    //first layer (inner glints)\n    float pw = .21*((iResolution.x));\n    vec3 aniso = vec3( noise(coord*pw), noise(coord.yzx*pw).x )*2.0-1.0;\n    aniso -= normal*dot(aniso,normal);\n    float anisotropy = min(1.,length(aniso));\n    aniso /= anisotropy;\n    anisotropy = .55;\n    float ah = abs(dot(h,aniso));\n    float nh = abs(dot(normal,h));\n    float q = exp2((1.1-anisotropy)*3.5);\n    nh = pow( nh, q*PRIMARY_CONCENTRATION );\n    nh *= pow( 1.-ah*anisotropy, 10.0 );\n    vec3 glints = lcol*nh*exp2((1.2-anisotropy)*PRIMARY_INTENSITY);\n    glints *= smoothstep(.0,.5,nl);\n    \n    //second layer (outer glints)\n    pw = .145*((iResolution.x));\n    vec3 aniso2 = vec3( noise(coord2*pw), noise(coord2.yzx*pw).x )*2.0-1.0;\n    anisotropy = .6;\n    float ah2 = abs(dot(h,aniso2));\n    float q2 = exp2((.1-anisotropy)*3.5);\n    float nh2 = pow( nh, q2*SECONDARY_CONCENTRATION );\n    nh2 *= pow( 1.-ah2*anisotropy, 150.0 );\n    vec3 glints2 = lcol*nh2*((1.-anisotropy)*SECONDARY_INTENSITY);\n    glints2 *= smoothstep(.0,.4,nl);\n    \n    return glints + glints2;\n    //return glints2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 UV_center = fragCoord.xy/iResolution.xy-0.5; // [-0.5:0.5,-0.5:0.5]\n    vec2 UV = fragCoord.xy/iResolution.xy; // [0:1,0:1]\n    vec3 k_norm = vec3(0.0, 0.0, -1.0); // pointing at camera\n    vec3 k_light = normalize(vec3(1.,1,-2.2));\n    vec3 _new_rd = normalize(vec3(UV,12.5));\n    vec3 _new_col = shade(vec3(UV, 1.0), _new_rd, k_norm, k_light);\n    fragColor = vec4(_new_col, 1.0);\n    return;\n}","name":"Image","description":"","type":"image"}]}