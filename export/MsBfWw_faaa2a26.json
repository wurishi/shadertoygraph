{"ver":"0.1","info":{"id":"MsBfWw","date":"1500627320","viewed":131,"name":"3D coordinate frame","username":"etale_cohomology","description":"Fork of iq's https://www.shadertoy.com/view/Xt3SzX\nA primitive 3D cartesian coordinate frame, using iq's capsule. I don't know how to \"merge\" the 3 line segments naturally, so that line segment that are closer to the camera take precedence!","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d","simple","line","iq","cartesian","frame","engine","primitive","coordinate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of iq's https://www.shadertoy.com/view/Xt3SzX\n\n// What iq calls a \"capsule\", I call a \"3D segment\" =) And I THINK this function computes the normal.\n// Intersection of a ray and a capped cylinder oriented in an arbitrary direction.\n// There's only one sphere involved, not two.\n// The MIT License. Copyright Â© 2016 Inigo Quilez. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// cc center, ca orientation axis, cr thickness, ch length\nvec4 segment3d_normal(in vec3 ro, in vec3 rd, in vec3 cc, in vec3 ca, float cr, float ch){\n    ca = normalize(ca);\n    vec3 oc = ro - cc;\n    ch *= .5;\n\n    float card = dot(ca, rd);\n    float caoc = dot(ca, oc);\n\n    float a = 1. - card * card;\n    float b = dot(oc, rd) - caoc * card;\n    float c = dot(oc, oc) - caoc * caoc - cr*cr;\n    float h = b * b - a * c;\n    if(h < .0)\n        return vec4(-1.0);\n    float t = (-b-sqrt(h))/a;\n\n    float y = caoc + t * card;  // The ray equation!\n\n    // body\n    if(abs(y) < ch)\n        return vec4(t, normalize(oc + t * rd - ca * y));\n\n    // caps\n    float sy = sign(y);\n    oc = ro - (cc + sy * ca * ch);\n    b = dot(rd, oc);\n    c = dot(oc, oc) - cr * cr;\n    h = b * b - c;\n    if(h > .0){\n        t = -b - sqrt(h);\n        return vec4(t, normalize(oc + rd * t));\n    }\n\n    return vec4(-1.);\n}\n\nvec3 draw_segment3d(vec3 ro, vec3 rd, vec4 segment_nor){\n    vec3 segment = vec3(.0);\n\tif(segment_nor.x > .0){\n\t\tvec3 nor = segment_nor.yzw;  // Normal?\n\t\tfloat dif = clamp(dot(nor, vec3(0.57703)), .0, 1. );  // Diffuse?\n\t\tfloat amb = .5 + .5 * dot(nor, vec3(1.));  // Ambient?\n\t\tsegment = vec3(.2, .3, .4) * amb + vec3(.8, .7, .5) * dif;\n\t}\n    return segment;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = (2.*fragCoord - iResolution.xy) / iResolution.y;  // Map pixel y-coordinates to [-1;1]\n\n    // Camera\n\tvec3 ro = vec3(1.);\n    vec3 ta = vec3(.0, .0, .0);\n    // Camera matrix\n    vec3 ww = normalize(ta - ro);\n    vec3 uu = normalize(cross(ww, vec3(.0, 1., .0)));\n    vec3 vv = normalize(cross(uu, ww));\n\t// Create view ray\n\tvec3 rd = normalize(uv.x * uu + uv.y * vv + 1.5 * ww);\n\n    // Raytrace!\n    float grow = sin(iTime);  // Just some animated growth, for fun\n\tvec4 segment0_nor = segment3d_normal(ro, rd, vec3(.0), vec3(.1, .0, .0), .04, 1. + .3*grow);\n    vec4 segment1_nor = segment3d_normal(ro, rd, vec3(.0), vec3(0., .1, .0), .04, 1. + .2*grow);\n    vec4 segment2_nor = segment3d_normal(ro, rd, vec3(.0), vec3(0., .0, .1), .04, 1. + .1*grow);\n\n    // Shading/lighting.\n    // I don't know how to \"merge\" the line segments naturally, so that line segment that are\n    // closer to the camera take precedence over those that are further away!\n    // The max() function doesn't do what I want, either! Help!\n    vec3 rgb = vec3(.06);  // Background color!\n    rgb += draw_segment3d(ro, rd, segment0_nor);\n    rgb += draw_segment3d(ro, rd, segment1_nor);\n    rgb += draw_segment3d(ro, rd, segment2_nor);\n\n\tfragColor.rgb = vec3(rgb);\n}\n","name":"Image","description":"","type":"image"}]}