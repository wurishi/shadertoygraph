{"ver":"0.1","info":{"id":"mdcXDs","date":"1680563760","viewed":36,"name":"lineTileRotate1","username":"Mr_Steve","description":"tile grid with different shapes, scales and rotations","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["line","rotate","rectangle","tile","scale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265358979323846\n\nvec2 rotate2D (vec2 _st, float _angle) {\n    _st -= 0.5;\n    _st =  mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle)) * _st;\n    _st += 0.5;\n    return _st;\n}\n\nmat2 scale(vec2 _scale){\n    return mat2(_scale.x,0.0,\n                0.0,_scale.y);\n}\n\nvec2 tile (vec2 _st, float _zoom) {\n    _st *= _zoom;\n    return fract(_st);\n}\n\nfloat box(in vec2 _st, in vec2 _size){\n    _size = vec2(0.5) - _size*0.5;\n    vec2 uv = smoothstep(_size,\n                        _size+vec2(0.001),\n                        _st);\n    uv *= smoothstep(_size,\n                    _size+vec2(0.001),\n                    vec2(1.0)-_st);\n    return uv.x*uv.y;\n}\n\nvec2 rotateTilePattern(vec2 _st){\n\n    //  Scale the coordinate system by 2x2\n    _st *= 2.0;\n\n    //  Give each cell an index number\n    //  according to its position\n    float index = 0.0;\n    index += step(1., mod(_st.x,2.0));\n    index += step(1., mod(_st.y,2.0))*2.0;\n\n    //      |\n    //  2   |   3\n    //      |\n    //--------------\n    //      |\n    //  0   |   1\n    //      |\n\n    // Make each cell between 0.0 - 1.0\n    _st = fract(_st);\n\n    if(index == 1.0){\n        _st = rotate2D(_st,PI*0.15);\n    } else if(index == 2.0){\n\n        _st = rotate2D(_st,PI*-0.15);\n        _st -= vec2(0.5);\n        _st = scale(vec2(sin(iTime)+2.0) )*_st;\n        _st += vec2(0.5);\n    } else if(index == 3.0){\n        _st = rotate2D(_st,PI*0.25);\n        _st /= vec2(box(_st,vec2(0.5)));\n        _st -= vec2(0.5);\n        _st = scale(vec2(sin(iTime)+1.5))*_st;\n        _st += vec2(0.5);\n    }\n\n    return _st;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.5, 1.0 );\n    return length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/(10.0-iResolution.y);\n\tvec3 col = vec3(0.0);\n    st = tile(st,3.0);\n    st = rotateTilePattern(st);\n    st = rotate2D(st,PI*iTime*0.25);\n    \n    float line = sdSegment(st,vec2(0.2),vec2(0.9))-0.1;\n    col = mix( col, vec3(0.357,0.875,1.000), 1.0-smoothstep(0.0,0.01,line));\n \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}