{"ver":"0.1","info":{"id":"stKXzG","date":"1641107325","viewed":293,"name":"slug font","username":"aoakenfo","description":"slug font","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["font","slug"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// original source: https://playground.babylonjs.com/#TDIWFC#1\n// based on algorithm from: https://sluglibrary.com/\n// article: https://babylonjs.medium.com/rendering-text-bf3bc53f7c2e\n\n// in the original this is an array of floats converted to a texture (8 floats per row * 34 rows)\nconst vec4 data[] = vec4[] (\n    vec4(278.500000,231.000000,214.750000,219.600000),vec4(151.000000,208.000000,0.0,0.0),\n    vec4(151.000000,208.000000,172.500000,131.000000),vec4(225.000000, 94.000000,0.0,0.0),\n    vec4(225.000000, 94.000000,277.500000, 57.000000),vec4(381.000000, 57.000000,0.0,0.0),\n    vec4(381.000000, 57.000000,475.000000, 57.000000),vec4(521.000000, 79.500000,0.0,0.0),\n    vec4(521.000000, 79.500000,567.000000,101.500000),vec4(585.500000,136.000000,0.0,0.0),\n    vec4(585.500000,136.000000,604.500000,170.000000),vec4(604.500000,261.500000,0.0,0.0),\n    vec4(604.500000,261.500000,603.760000,343.500000),vec4(603.000000,425.500000,0.0,0.0),\n    vec4(603.000000,425.500000,603.000000,495.500000),vec4(609.500000,529.000000,0.0,0.0),\n    vec4(609.500000,529.000000,616.500000,562.000000),vec4(635.000000,600.000000,0.0,0.0),\n    vec4(635.000000,600.000000,565.500000,600.100000),vec4(496.000000,600.000000,0.0,0.0),\n    vec4(496.000000,600.000000,490.500000,586.000000),vec4(482.500000,558.500000,0.0,0.0),\n    vec4(482.500000,558.500000,479.000000,546.000000),vec4(477.500000,542.000000,0.0,0.0),\n    vec4(477.500000,542.000000,441.500000,577.000000),vec4(400.500000,594.500000,0.0,0.0),\n    vec4(400.500000,594.500000,359.500000,612.000000),vec4(313.000000,612.000000,0.0,0.0),\n    vec4(313.000000,612.000000,231.000000,612.000000),vec4(183.500000,567.500000,0.0,0.0),\n    vec4(183.500000,567.500000,136.500000,523.000000),vec4(136.500000,455.000000,0.0,0.0),\n    vec4(136.500000,455.000000,136.500000,410.000000),vec4(158.000000,375.000000,0.0,0.0),\n    vec4(158.000000,375.000000,179.500000,339.500000),vec4(218.000000,321.000000,0.0,0.0),\n    vec4(218.000000,321.000000,257.000000,302.000000),vec4(330.000000,288.000000,0.0,0.0),\n    vec4(330.000000,288.000000,428.500000,269.500000),vec4(466.500000,253.500000,0.0,0.0),\n    vec4(466.500000,253.500000,466.500000,246.500000),vec4(466.500000,239.500000,0.0,0.0),\n    vec4(466.500000,239.500000,466.500000,199.000000),vec4(446.500000,182.000000,0.0,0.0),\n    vec4(446.500000,182.000000,426.500000,164.500000),vec4(371.000000,164.500000,0.0,0.0),\n    vec4(371.000000,164.500000,333.500000,164.500000),vec4(312.500000,179.500000,0.0,0.0),\n    vec4(312.500000,179.500000,291.500000,194.000000),vec4(278.500000,231.000000,0.0,0.0),\n    vec4(466.500000,345.000000,439.500000,354.000000),vec4(381.000000,366.500000,0.0,0.0),\n    vec4(381.000000,366.500000,322.500000,379.000000),vec4(304.500000,391.000000,0.0,0.0),\n    vec4(304.500000,391.000000,277.000000,410.500000),vec4(277.000000,440.500000,0.0,0.0),\n    vec4(277.000000,440.500000,277.000000,470.000000),vec4(299.000000,491.500000,0.0,0.0),\n    vec4(299.000000,491.500000,321.000000,513.000000),vec4(355.000000,513.000000,0.0,0.0),\n    vec4(355.000000,513.000000,393.000000,513.000000),vec4(427.500000,488.000000,0.0,0.0),\n    vec4(427.500000,488.000000,453.000000,469.000000),vec4(461.000000,441.500000,0.0,0.0),\n    vec4(461.000000,441.500000,466.500000,423.500000),vec4(466.500000,373.000000,0.0,0.0),\n    vec4(466.500000,373.000000,466.500000,359.000000),vec4(466.500000,345.000000,0.0,0.0)\n    );\n\n// Signed Distance to a Quadratic Bezier Curve https://www.shadertoy.com/view/ltXSDB\n// Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    float r = (a.x*b.y-b.x*a.y);\n    if (abs(r) < 0.001)\n    {\n        return testCross(A, B, p);\n    }\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) / r;\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\nfloat remap(float value, float from1, float to1, float from2, float to2) {\n    return (value - from1) / (to1 - from1) * (to2 - from2) + from2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x = remap(uv.x, 0.0, 1.0, 100.0, 700.0);\n    uv.y = remap(uv.y, 0.0, 1.0, 700.0, 1.0);\n    \n    float side = 0.;\n    for (int i = 0;i < 68;i+=2)\n    {\n        vec4 curveA = data[i + 0];\n        vec4 curveB = data[i + 1];\n        \n        if ((uv.y > curveA.y && uv.y < curveB.y) || (uv.y > curveB.y && uv.y < curveA.y))\n        {\n            float sn= signBezier(curveA.xy, curveA.zw, curveB.xy, uv);\n            side += sn;\n        }\n    }\n            \n    float col = (side == -2.) ? 1.0 : 0.2;\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}