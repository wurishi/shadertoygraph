{"ver":"0.1","info":{"id":"lljczz","date":"1507279761","viewed":1956,"name":"vortex field (flow/magnetic)","username":"FabriceNeyret2","description":"display vortex field.   velocity vectors are painted as ellipses (could be used to display tensors).\n\nMouse control. (bottom left for autodemo)\nTry changing JIT (jittering), N (neighborhood overflow), n (sampling), dt (V scaling). ","likes":46,"published":3,"flags":0,"usePreview":0,"tags":["field","ellipsoid","vortex","short","vectorfield","irrotational","tensor","flowfield","curlfree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define vort(p) vec2( -(p).y, (p).x ) / dot(p,p)      // field around a vortex\n#define srnd(p) ( 2.* fract( 4e4* sin( 1e3* mat2(1,7.1,-5.1,2.3) * (p) )) -1. )\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n#define JIT true                                      // jittering on or off\n   float n = 20.,                                     // number of cells = 2n x 2n.Rx/Ry\n        dt = 1./60.;                                  // is indeed dt * vortex strenght\n    vec2 R = iResolution.xy,\n         u = (U+U-R)/R.y,                             // normalized coordinates\n         M = iMouse.xy,                               // mouse control or autodemo\n         m = length(M)>10. ? (M+M-R)/R.y : vec2(sin(iTime),.2*cos(iTime/3.71)),\n         p = floor(u*n+.5) / n;                       // cell center (NB: we should deffered /n )\n    O-=O;\n    \n int N = 3;                                           // odd. Neighborhood size = NxN   \n for( int i=0; i<N*N; i++)                            // allows overflow to neighbor cell\n {\n    vec2 P = p + vec2( i%N -N/2, i/N -N/2 ) / n;      // cell coordinate in neighborhood\n    if (JIT) P += .2* srnd( round(P*n) ) / n ;        // jittering (round: for precision issues)\n    vec2 X = u-P,                                     // local coordinate\n         V =  vort(P-m) - vort(P+m);                  // field at P caused by vortex pair at +- m\n    \n    float l = length(V),\n         r1 = dt * l, r2 = 2./R.y;                    // ellipse radii ~ ( |V|dt , 1 pixel )\n    V /= l;\n    mat2 Q = mat2( V / r1, vec2(-V.y,V.x) / r2 ) ;    // ellipse equation: lenght(Q.X) = const\n                                                      // main axis = V\n    O += smoothstep(2., 0., length(X*Q) ) ;           // display ellipse (use dot(l,l) for sharper)\n  //O += max(0., 1. - .5* length(X*Q) ) ;           \n }\n}","name":"Image","description":"","type":"image"}]}