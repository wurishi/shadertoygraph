{"ver":"0.1","info":{"id":"Msy3Rd","date":"1701445953","viewed":35,"name":"txt3x5","username":"samuelotherion","description":"3x5 bit font","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["font","small","3x5bit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define RES  iResolution.xy\n#define ASP  RES.x / RES.y\n#define T    iTime\n#define CHK( PAR )         vec2 r; if( nin( PAR, r ) ) { gf( PAR ); return; }\n\nconst float\n    _  = 0.,\t\t\t//    000 000 000 000 000   0000\n    _0 = 31599.,        //  0 111 101 101 101 111   7b6f\n    _1 = 9362., \t    //  1 010 010 010 010 010   2492\n    _2 = 29671.,\t    //  2 111 001 111 100 111   73e7\n    _3 = 29647., \t    //  3 111 001 111 001 111   73cf\n    _4 = 23497.,\t    //  4 101 101 111 001 001   5bc9\n    _5 = 31183., \t    //  5 111 100 111 001 111   79cf\n    _6 = 31215.,\t    //  6 111 100 111 101 111   79ef \n    _7 = 29257.,\t    //  7 111 001 001 001 001   7249\n    _8 = 31727.,\t    //  8 111 101 111 101 111   7bef \n    _9 = 31695.,\t    //  9 111 101 111 001 111   7bcf\n    _DT = 2.,\t\t\t//  . 000 000 000 000 010   0002 \n    _CM = 20.,   \t\t//  , 000 000 000 010 100   0014\n    _CL = 1040.,\t\t//  : 000 010 000 010 000   0410\n    _SM = 1044.,\t\t//  ; 000 010 000 010 100   0414\n    _PL = 10530.,\t\t//  ( 010 100 100 100 010   2922\n    _PR = 8778., \t    //  ) 010 001 001 001 010   224a  \n    _PS = 1488.,   \t\t//  + 000 010 111 010 000   05d0\n    _MI = 448.,     \t//  - 000 000 111 000 000   01c0\n    _ST = 2728.,\t   \t//  * 000 101 010 101 000   0aa8\n    _SL = 672.,   \t    //  / 000 001 010 100 000   02a0\n    _BS = 2184.,\t\t//  \\ 000 100 010 001 000   0888\n    _UL = 7.,    \t\t//  _ 000 000 000 000 111   0000\n    _A = 11245.,    \t//  A 010 101 111 101 101   2bed\n    _B = 27566.,    \t//  B 110 101 110 101 110   6bae\n    _C = 14627.,        //  C 011 100 100 100 011   3923\n    _D = 27502.,      \t//  D 110 101 101 101 110   6b6e\n    _E = 31143.,\t    //  E 111 100 110 100 111   79a7\n    _F = 31140.,        //  F 111 100 110 100 100   79a4\n    _G = 14639.,    \t//  G 011 100 100 101 111   392f \n    _H = 23533.,    \t//  H 101 101 111 101 101   5bed\n    _I = 29847.,    \t//  I 111 010 010 010 111   7497 \n    _J = 29262.,\t    //  J 111 001 001 001 110   724e\n    _K = 19373.,    \t//  K 100 101 110 101 101   4bad\n    _L = 18727.,    \t//  L 100 100 100 100 111   4927\n    _M = 24557.,     \t//  M 101 111 111 101 101   5fed\n    _N = 27501.,        //  N 110 101 101 101 101   6b6d\n    _O = 11114., \t    //  O 010 101 101 101 010   2b6a\n    _P = 27556.,    \t//  P 110 101 110 100 100   6ba4  \n    _Q = 11089.,    \t//  Q 010 101 101 010 001   2b51\n    _R = 27565.,        //  R 110 101 110 101 101   6bad\n    _S = 14478.,    \t//  S 011 100 010 001 110   388e\n    _T = 29842.,    \t//  T 111 010 010 010 010   7492\n    _U = 23407.,    \t//  U 101 101 101 101 111   5b6f\n    _V = 23402.,    \t//  V 101 101 101 101 010   5b6a\n    _W = 23549.,    \t//  W 101 101 111 111 101   5bfd\n    _X = 23213.,    \t//  X 101 101 010 101 101   5aad\n    _Y = 23252.,    \t//  Y 101 101 011 010 100   5ad4\n    _Z = 29351.;        //  Z 111 001 010 100 111   72a7\n\n// default size of font more precisely the aspect ratio\nconst vec2\n    DFS = vec2( 3., 5. );\n\n// convert a one digit number to its sprite\nfloat\n    n2s( int n ) {\n\n        return\n            n < 8\n                ? n < 4\n                    ? n < 2\n                        ? n < 1\n                            ? _0\n                            : _1\n                        : n < 3\n                            ? _2\n                            : _3\n                    : n < 6\n                        ? n < 5\n                            ? _4\n                            : _5\n                        : n < 7\n                            ? _6\n                            : _7\n                : n < 9\n                    ? _8\n                    : _9;\n    }\n\n//Font\n// global font variables\n\nfloat\n    Fw,\t//width\n    Fh; //height\n\nvec3\n    Ff, //foreground color\n    Fb; //background color\n\nbool\n    Fo; //paque\n\nfloat\n    Fr; //roundness\n\n\nvec2 \n    P, //normalized pixel pos\n    C; //cursor\n\nvec4\n    oC; //global output color => fragCol\n\n// digit d of float n according to base b     \n// d starts at 0\nfloat\n    dof( float f, float d, float b ) {\n\n\t\treturn mod( floor( f * pow( b, -d ) ), b );\n    }\n\n//bit of sprite\nbool\n    bos( float n, vec2 p ) {\n        \n        return 0.5 < dof( n, 2. - floor( 3. * p.x ) + 3. * floor( 5. * p.y ), 2. ); \n    }\n\n//render pixel of sprite\nvoid\n    rps( vec2 p, bool d ) {\n        \n        vec2\n            r = pow( abs( 2.2 * p - 1.1 ), 2. * vec2( Fr ) );\n        \n        float\n            f = 1. - r.x - r.y;\n        \n        if( f > .1 ) \n        \n\t        oC = vec4( f * ( d ? Ff : Fb ), 1. ) + ( Fo ? vec4( 0 ) : oC );\n    }\n\n//digit of integer\nint\n    doi( int d, int l, int i ) {\n        \n        d = l - d - 1;\n\n        return int( dof( float( i ), float( d ), 10. ) );\n    }\n\n// notIn() returns false if r in a textfield sized [ 0, 0, F.s.x times, d * F.s.y ]\nbool\n    nin( float d, inout vec2 r ) {\n    \n\t\tr = P - C;\n\t\t\n        return r.x < 0. || d * Fw < r.x || r.y < 0. || Fh < r.y;\n    }\n\n// go further i.e. go right\nvoid\n    gf( float d ) {\n    \n        C.x += d * Fw;\n    }\n\n// go one \"space\" further\nvoid\n    gs( ) {\n    \n        C.x += Fw;\n    }\n\n// go relative\nvoid\n    gr( float r, float c ) {\n    \n        C += vec2( c * Fw, -r * Fh );\n    }\n\n// go down\nvoid\n    gd( float d ) {\n    \n        C.y -= d * Fh;\n    }\n\n// go to\nvoid\n    gt( float r, float c ) {\n\n        C = vec2( c * Fw - ASP, 1. - ( 1. + r ) * Fh );\n    }\n\n// render sprite\nvoid\n    rs( float s ) {\n    \n\t\tCHK( 1. )\n        \n        r = fract( r / vec2( Fw, Fh ) ); \n        \n        rps( r, bos( s, r ) );\n        \n        gs( );\n    }\n\n\nvoid\n    txt( float a, float b, float c, float d, float e, float f, float g, float h, float i, float j, float k, float l ) {\n    \n        CHK( 12. )\n       \n        float\n            x = r.x / Fw,\n            n = floor( x );\n             \n        r.x = fract( x );\n        r.y /= Fh;\n        \n        float \n            s =\tn < 8.\n            \t\t? n < 4.\n            \t\t\t? n < 2.\n            \t\t\t\t? n < 1.\n            \t\t\t\t\t? a\n            \t\t\t\t\t: b\n\t\t\t\t\t\t\t: n < 3.\n                                ? c\n                                : d\n            \t\t\t: n < 6.\n            \t\t\t\t? n < 5.\n            \t\t\t\t\t? e\n            \t\t\t\t\t: f\n\t\t\t\t\t\t\t: n < 7.\n                                ? g\n                                : h\n\t\t\t\t\t: n < 12.\n\t\t\t\t\t\t? n < 10.\n                        \t? n < 9.\n                        \t\t? i\n                        \t\t: j\n\t\t\t\t\t\t\t: n < 11.\n                            \t? k\n                            \t: l\n\t\t\t\t\t\t: 0.;\n        \n        rps( r, bos( s, r ) );\n        \n        gf( 12. );\n    }\n\nvoid\n    intg( int n, int d ) {\n    \n        float\n            nf = float( n ),\n            df = float( d );\n        \n        CHK( df )\n        \n        float\n            x  = r.x / Fw;\n        \n        int\n            di = int( x );\n             \n        r.x = fract( x );\n        r.y /= Fh;\n        \n        int\n            dig = doi( di, d, n );\n        \n        rps( r, bos( n2s( dig ), r ) );\n        \n        gf( df );\n    }\n\nvoid\n    flt( float n, int prek, int postk ) {\n    \n        int\n            d = ( n < 0. ? 1 : 0 ) + prek + 1 + postk;\n        \n        float\n            df = float( d );\n\n        CHK( df )\n\n        if( n < 0. ) {\n         \n            rs( _MI );\n            n = -n;\n        }\n        \n        intg( int( n ), prek );\n        rs( _DT );\n        intg( int( fract( n ) * pow( 10., float( postk ) ) ), postk );\n    }\n\nvoid\n    flts( float num, int width, bool sgn, bool zeros ) {\n    \n        CHK( float( width ) )\n        \n        float\n            minus = sign( num ),\n            log10 = floor( log( minus * num ) / log( 10. ) ),\n            sgns  = sgn ? 1. : minus < 0. ? 1. : 0.;\n        \n    \n    }\n\nvoid\n    mainImage( out vec4 oCol, in vec2 iP ) {\n    \n        float\n            demoT = mod( T, 60. );\n       \n        P = ( 2. * iP / RES - 1. ) * vec2( ASP, 1. );\n\n        Fw = .02 * DFS.x;\n        Fh = .02 * DFS.y;\n        Ff = vec3( 1 );\n        Fb = vec3( .15 );\n        Fo = true;\n        Fr = 15.;\n\n        oC = vec4( 0. );\n        \n        gt( 0., 0. );\n        txt( _T, _I, _M, _E, _CL, _, _, _, _, _, _, _ ); gf( 1. );\n\n        intg( int( mod( iDate.w / 3600., 24.) ), 2 ); rs( _CL );\n        intg( int( mod( iDate.w / 60., 60. ) ), 2 ); rs( _CL );\n        intg( int( mod( iDate.w, 60. ) ), 2 ); rs( _DT ); \n        intg( int( mod( 100. * iDate.w, 100. ) ), 2 );\n\n        float\n            dt = min( 1., 1. * demoT );\n        \n        gt( 1. * dt, 0. );\n        txt( _F, _R, _A, _M, _E, _CL, _, _, _, _, _, _ ); gs( );\n        intg( iFrame, 7 );\n\n        gt( 2. * dt, 0. );\n        txt( _R, _U, _N, _, _T, _I, _M, _E, _CL, _, _, _ ); gs( );\n        intg( int( T ), 7 ); rs( _DT ); intg( int( 1e4 * T ), 3 );\n\n        gt( 3. * dt, 0. );\n\n        txt( _A, _V, _G, _, _F, _P, _S, _CL, _, _, _, _ ); gs( );\n        flt( float( iFrame ) / T, 2, 4 );\n\n        gt( 4. * dt, 0. );\n        txt( _T, _I, _M, _E, _, _D, _E, _L, _T, _A, _CL, _ ); gs( );\n        flt( iTimeDelta, 1, 5 );\n\n        gt( 5. * dt, 0. );\n        txt( _I, _D, _A, _T, _E, _DT, _X, _CL, _, _, _, _ ); gs( );\n        flt( iDate.x, 4, 1 );\n\n        gt( 6. * dt, 0. );\n        txt( _I, _D, _A, _T, _E, _DT, _Y, _CL, _, _, _, _ ); gs( );\n        flt( iDate.y, 2, 1 );\n\n        gt( 7. * dt, 0. );\n        txt( _I, _D, _A, _T, _E, _DT, _Z, _CL, _, _, _, _ ); gs( );\n        flt( iDate.z, 2, 1 );\n\n        gt( 8. * dt, 0. );\n        txt( _I, _D, _A, _T, _E, _DT, _W, _CL, _, _, _, _ ); gs( );\n        flt( iDate.w, 6, 3 );\n\n        gt( 9. * dt, 0. );\n        txt( _I, _M, _O, _U, _S, _E, _DT, _X, _CL, _, _, _ ); gs( );\n        flt( iMouse.x, 4, 1 );\n\n        gt( 10. * dt, 0. );\n        txt( _I, _M, _O, _U, _S, _E, _DT, _Y, _CL, _, _, _ ); gs( );\n        flt( iMouse.y, 4, 1 );\n\n        gt( 11. * dt, 0. );\n        txt( _I, _M, _O, _U, _S, _E, _DT, _Z, _CL, _, _, _ ); gs( );\n        flt( iMouse.z, 4, 1 );\n  \n        gt( 12. * dt, 0. );\n        txt( _I, _M, _O, _U, _S, _E, _DT, _W, _CL, _, _, _ ); gs( );\n        flt( iMouse.w, 4, 1 );\n  \n        Fo = false;\n        Fw = .01 * ( 2.1 + cos( .1   * T ) ) * DFS.x;\n        Fw = .01 * ( 2.1 + sin( .101 * T ) ) * DFS.y;\n        Fr = 6.;\n\n        gt( 0., 2. * ASP / Fw - 10. ); Ff = vec3( .3, .5, 1. ); Fb = vec3( .17, .17, .12 ); \n        intg( int( iDate.y + 1. ), 2 );\n\t\tgr( +1., -2. );\n        intg( int( iDate.z ), 2 );\n\n        Fw *= 2.;\n        Fh *= 2.;\n        intg( int( iDate.x ), 4 );\n\n        \n        \n        \n        Fw = DFS.x * ASP / 24.;\n        Fh = DFS.y * ASP / 24.;\n\t\tFf = vec3( 1. + .5 * sin( .05 * T ), 1. + .5 * sin( .06 * T ), 1. + .5 * sin( .07 * T ) ); \n        Fo = true;\n        Fb = 1. - Ff;\n        Fr = pow( 2., 8. * sin( .1 * T ) ); \n        gt( 2. / Fh - 1., 2. * ASP / Fw - mod( 4. * demoT, 2. * ASP / Fw + 48. ) );\n\n\t\ttxt( _, _, _T, _E, _N, _, _S, _E, _C, _O, _N, _D );\n        txt( _S, _, _O, _F, _, _A, _, _D, _A, _Y, _, _A );\n        txt( _R, _E, _, _O, _N, _E, _, _H, _O, _U, _R, _ );\n        txt( _I, _N, _, _A, _, _Y, _E, _A, _R, _DT, _, _ );\n  \n\n        oC.rgb /= oC.a;\n        \n        oCol = oC;\n    }","name":"Image","description":"","type":"image"}]}