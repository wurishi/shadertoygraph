{"ver":"0.1","info":{"id":"DlVcRD","date":"1699997783","viewed":55,"name":"TV Effect","username":"mitchellcraft","description":"A VHS effect in GLSL","likes":0,"published":1,"flags":2,"usePreview":0,"tags":["tv","shader","webcam","vhs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 webcamColor = texture(iChannel0, uv).rgb;\n\n    // Add movement to scanlines\n    float scanline = 0.9 - abs(sin((uv.y + iTime) * iResolution.y * 0.05));\n    webcamColor *= scanline;\n\n    // Introduce glitches\n    float glitch = smoothstep(0.5, 0.3, sin(uv.x * iResolution.x * 90.0 + iTime));\n    webcamColor += glitch * vec3(0.1);\n\n    // Simulate color bleeding\n    vec2 offset = vec2(0.001, 0.001);\n    vec3 colorBleed = texture(iChannel0, uv + offset).rgb;\n    webcamColor += 0.1 * colorBleed;\n\n    // Apply VHS noise\n    float noise = 0.1 * (fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453) - 0.5);\n    webcamColor += vec3(noise);\n    \n    vec2 distortedUV = uv * 2.0 - 1.0;\n    float radius = length(distortedUV * 0.1);\n    webcamColor *= smoothstep(0.8, 1.0, 1.0 - radius);\n\n    // Simulate CRT phosphor glow\n    webcamColor = mix(webcamColor, vec3(1.0), 0.1);\n\n    // Output final color\n    fragColor = vec4(webcamColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}