{"ver":"0.1","info":{"id":"Mc2BRG","date":"1725130999","viewed":15,"name":"Hexagon Grid by Chus","username":"ChustrupFx","description":"Hexagon Grid","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["hexagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nfloat sdHexagon( in vec2 p, in float r )\n{\n    const vec3 k = vec3(-0.866025404,0.5,0.577350269);\n    p = abs(p);\n    p -= 2.0*min(dot(k.xy,p),0.0)*k.xy;\n    //p -= vec2(clamp(p.x, -k.z*r, k.z*r), r);\n    return p.y - (r * sqrt(3.0) / 2.0);\n}\n\nvec2 rot2D(vec2 uv, float rad) {\n\n    float x = uv.x * cos(rad) + uv.y * sin(rad);\n    float y = uv.x * -sin(rad) + uv.y * cos(rad);\n    \n    return vec2(x, y);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    uv.x += 0.5 * mod(ceil(uv.y * 3.0), 2.0);\n    vec2 uvf = fract(uv * 3.0);\n    uvf = uvf * 2.0 - 1.0;\n    \n    \n    float hexagon = step(0.0, sdHexagon(rot2D(uvf, PI / 180.0 * 30.0), 1.0));\n    \n    // Time varying pixel color\n    vec3 col = vec3(hexagon);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}