{"ver":"0.1","info":{"id":"NlGczy","date":"1661773897","viewed":200,"name":"CRT shader, of course","username":"rucksack","description":"Based on https://www.youtube.com/watch?v=aWdySZ0BtJs\n","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["crt"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Based on https://www.youtube.com/watch?v=aWdySZ0BtJs\n\nconst float curvature = 4.;\nconst float vignetteWidth = 40.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Curvature (offset by square of distance from center)\n    vec2 curve = uv * 2. - 1.;\n    float offset = length(curve) / curvature;\n    curve += curve * offset * offset;\n    curve = curve * 0.5 + 0.5;\n\n    // Use curved UVs to fetch texture\n    vec3 col = texture(iChannel0, curve).rgb;\n\n    // Add canlines (use original UV)\n    // Offsets and amplitudes adjusted to give a yellow tint\n    float y = fragCoord.y;\n    vec3 scan = vec3(\n        col.r * (.3 + .1*sin(y + 40.)),\n        col.g * (.2 + .2*cos(y)),\n        col.b * (.1 + .1*sin(y - 70.)));\n    col += scan;\n\n    // Use inverted, centered UV coords to create a vignette gradient of a certain width\n    // (essentially using inverted UVs as distance field and applying a smoothed threshold)\n    vec2 vignetteThreshold = vignetteWidth / iResolution.xy;\n    vec2 vignette = smoothstep(vec2(0), vignetteThreshold, 1. - abs(curve * 2. - 1.));\n    col = col * vignette.x * vignette.y;\n\n    // Adjust final color value\n    col = pow(col, vec3(1.2, 1.2, 1.4)) * .9 + .1;\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}