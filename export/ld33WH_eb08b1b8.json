{"ver":"0.1","info":{"id":"ld33WH","date":"1450120442","viewed":433,"name":"cool trajectories","username":"RenoM","description":"each new circle rotates around the last one\nthe speeds and sizes of each circle are proportional the their rank on the chain\nright side of the screen is the trajectory of the center of the last circle of the chain","likes":18,"published":1,"flags":32,"usePreview":0,"tags":["2d","circles","draw","drawing","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 O, in vec2 U )\n{\n    O = texture(iChannel0, U / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define GLOBAL_SPEED 1. // <----- play around with these.\n#define SPEED_RATIO 4.\n#define SIZE_RATIO 1.618034\n#define NB_CIRCLES 5\n\n#define FADE 1. // 1. --> never fades\n                // .0 --> doesnt leave a trail  , may require to use values very close to 1.\n\n/*\n\nfew examples :\n\n#define GLOBAL_SPEED 10.\n#define SPEED_RATIO -1.9\n#define SIZE_RATIO 2.\n#define NB_CIRCLES 3\n\n#define GLOBAL_SPEED 1.    // by eiffie\n#define SPEED_RATIO -2.0\n#define SIZE_RATIO 1.56\n#define NB_CIRCLES 10\n\n#define GLOBAL_SPEED 2.\n#define SPEED_RATIO -6.\n#define SIZE_RATIO 3.\n#define NB_CIRCLES 5\n\n#define GLOBAL_SPEED 7.\n#define SPEED_RATIO -2.\n#define SIZE_RATIO 2.\n#define NB_CIRCLES 7\n\n#define GLOBAL_SPEED 2.\n#define SPEED_RATIO 2.\n#define SIZE_RATIO 1.5\n#define NB_CIRCLES 8\n\n#define GLOBAL_SPEED 1.\n#define SPEED_RATIO -8.\n#define SIZE_RATIO 2.2\n#define NB_CIRCLES 4\n\n#define GLOBAL_SPEED .5  // this one is a bit long to construct\n#define SPEED_RATIO -4.\n#define SIZE_RATIO 2.\n#define NB_CIRCLES 7\n\n*/\n\n#define EPS .008\n#define D(A,B,C) abs(distance(A,B)-C)<=EPS\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    vec2 R = iResolution.xy,\n         p = 2. * (U+U-R) / R.y,\n         o = vec2(0);\n    float t = GLOBAL_SPEED * iTime / 20.;\n    vec3 c = abs(p.x) < 2.*EPS ? vec3(1) : vec3(0);\n    bool b = p.x < .0;\n    p.x += b ? 2. : -2.;\n    vec2 r = vec2(.5);\n    for(int i=0;i<NB_CIRCLES;i++)\n    {\n        float n = t / r.x;\n        vec2 s=r.y*vec2(sin(n),cos(n));\n        if(b)\n        {\n        \tif(D(p,o,EPS)) c=vec3(1);\n        \tif(D(p,o,r.y)) c=vec3(.2);\n        }\n        else if(i == NB_CIRCLES - 1)\n    \t{\n        \tif(D(p,o,EPS)) c=vec3(1);\n    \t\telse c = texture(iChannel0, U / R).xyz * FADE;\n    \t}\n        r.x/=SPEED_RATIO; o+=s; r.y/=SIZE_RATIO;\n    }\n    C.xyz=clamp(c, .0, 1.);\n}","name":"Buf A","description":"","type":"buffer"}]}