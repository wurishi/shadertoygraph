{"ver":"0.1","info":{"id":"M3ffRH","date":"1728003911","viewed":27,"name":"Aurora Thing","username":"Rain7_77","description":"auroraish waves","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["aurora"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":" const vec4 LightGreenCol = vec4(0.69, 0.906, 0.784, 0.5);\n const vec4 DarkGreenCol = vec4(0.204, 0.38, 0.302, 0.5);\n const vec4 PurpleCol = vec4(0.847,0.231,0.89, 0.2);\n const vec4 SkyColor = vec4(0.082, 0.071, 0.169, 1.0);\n const vec4 MoonCol = vec4(0.898, 0.949, 0.961, 1.0);\n \n const float waveSpeed = 2.5;\n const float waveSpeedTwo = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;  \n    \n    // first wave color\n    vec4 col = LightGreenCol;\n\n    // wave\n    // multiplying sin functions to get interesting wave that stays between -1 and 1\n    float line1 = sin((uv.x + iTime/waveSpeed) * 0.5);\n    line1 *= sin(uv.x * 2.0 + iTime/waveSpeed + 1.0);\n    line1 *= sin(uv.x * 4.0 + iTime/waveSpeed + 3.0);\n    // blends the wave (frag shader anti aliasing), makes wave more smooth\n    float wave1= smoothstep(line1-0.1,line1+0.1,uv.y);\n    // mods values greater than 1, sets everything above the line back to sky color\n    wave1 = fract(wave1);\n    //mixes blue and sky color with the wave as the mixing value\n    col = mix(SkyColor, col, wave1 * LightGreenCol.a);\n    \n    // wave2 (same as wave 1 with cos, works as an offset of)\n    float line2 = cos((uv.x + iTime) * 0.5);\n    line2 *= cos(uv.x * 2.0 + iTime/waveSpeedTwo + 1.0);\n    line2 *= cos(uv.x * 4.0 + iTime + 3.0);\n    float wave2 = smoothstep(line2-0.5,line2+0.5,uv.y);\n    wave2 = fract(wave2);\n    // mixes original wave and sky color bg with new wave\n    col = mix(col, DarkGreenCol, wave2 * DarkGreenCol.a);\n    \n    // wave 3 (same as wave 1 and 2)\n    float line3 = sin(uv.x + iTime);\n    line3 += sin(uv.x * 10.0 + iTime); //adding sin funtion instead so it does go out of -1-1\n    float wave3 = smoothstep(line3-0.5,line3+0.5,uv.y);\n    wave3 = fract(wave3);\n    // mixes original wave and sky color bg with new wave\n    col = mix(col, PurpleCol, wave3 * PurpleCol.a);\n    \n    //moon shine\n    //length gives the lenth of the vector, determining the radius of the circle\n    //smoothstep blends past the edge of the circle\n    float moon = smoothstep(0.1, 2.0, length(uv + vec2(1.5,1)));\n    //mixes moonshine with waves\n    //col = mix(MoonCol, col, moon);\n    col += MoonCol * pow(clamp(1.0-moon,0.0,1.0),2.0) * 0.6;\n\n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}