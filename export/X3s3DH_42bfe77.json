{"ver":"0.1","info":{"id":"X3s3DH","date":"1707413040","viewed":117,"name":"VHS Test 234","username":"IliasHDZ","description":"Testing a VHS effect","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["vhs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float a = 0.2627;\nconst float b = 0.6780;\nconst float c = 0.0593;\nconst float d = 1.8814;\nconst float e = 1.4746;\n\nvec3 RGBtoYBR(vec3 rgb) {\n    float cr = rgb.r;\n    float cg = rgb.g;\n    float cb = rgb.b;\n    \n    float y = a * cr + b * cg + c * cb;\n    return vec3(\n        y,\n        (cb - y) / d,\n        (cr - y) / e\n    );\n}\n\nvec3 YBRtoRGB(vec3 rgb) {\n    float y = rgb.r;\n    float cb = rgb.g;\n    float cr = rgb.b;\n    \n    return vec3(\n        y + e * cr,\n        y - (a * e / b) * cr - (c * d / b) * cb,\n        y + d * cb\n    );\n}\n\nconst float boxSize = 0.004;\nconst int boxCount  = 3;\n\nconst float colorOff = 0.005;\n\nvec2 UV = vec2(0.0, 0.0);\n\nconst float lumiance = 0.6;\n\nvec2 colorBlur(vec2 off) {\n    vec2 ret = vec2(0.0, 0.0);\n    \n    for (int x = -boxCount; x <= boxCount; x++) {\n        for (int y = -boxCount; y <= boxCount; y++) {\n            vec2 offset = vec2(float(x) / float(boxCount), float(y) / float(boxCount));\n            vec2 pos = UV + offset * vec2(boxSize, boxSize) + off;\n            \n           ret += RGBtoYBR(texture(iChannel0, pos).rgb).yz;\n        }\n    }\n    \n    const int sampleCount = (2 * boxCount + 1) * (2 * boxCount + 1);\n    \n    return ret / vec2(float(sampleCount), float(sampleCount));\n}\n\nhighp float rand(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\nconst float imageScale = 3.0;\n\nfloat randSamp(vec2 pos, float diff, float ins) {\n    vec2 randInput = (pos / vec2(150.0, 150.0)) * vec2(iTime * diff, 1.0);\n\n    return mix(1.0 - ins, 1.0 + ins, mod(rand(randInput), 1.0));\n}\n\nvec2 fragPos = vec2(0.0, 0.0);\n\nfloat noiseIns = 0.03;\n\nfloat streakLength = 100.0;\n\nfloat randPix(float diff) {\n    vec2 coord = fragPos / vec2(imageScale, imageScale);\n    \n    float LX = floor(coord.x);\n    float HX = ceil(coord.x);\n    float LY = floor(coord.y);\n    float HY = ceil(coord.y);\n    \n    float TL = randSamp(vec2(LX, HY), diff, noiseIns);\n    float BL = randSamp(vec2(LX, LY), diff, noiseIns);\n    float TR = randSamp(vec2(HX, HY), diff, noiseIns);\n    float BR = randSamp(vec2(HX, LY), diff, noiseIns);\n    \n    float valB = mix(BL, BR, mod(coord.x, 1.0));\n    float valT = mix(TL, TR, mod(coord.x, 1.0));\n    \n    return mix(valB, valT, mod(coord.y, 1.0));\n}\n\nfloat streak() {\n    vec2 coord = fragPos / vec2(imageScale, imageScale);\n    \n    float offset = floor(coord.y) * iResolution.x + floor(coord.x);\n    \n    return 0.0;\n    \n    //float thing = offset / vec2(streakLength);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragPos = fragCoord;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    UV = fragCoord/iResolution.xy;\n    \n    vec3 color = texture(iChannel0, UV).rgb;\n    \n    vec3 colYBR = RGBtoYBR(color);\n    \n    float CB = colorBlur(vec2(colorOff,  0.0)).x;\n    float CR = colorBlur(vec2(-colorOff, 0.0)).y;\n    \n    float nY = randPix(1.0);\n    float nB = randPix(2.0);\n    float nR = randPix(3.0);\n\n    // Output to screen\n    fragColor = vec4(YBRtoRGB(vec3(colYBR.x * lumiance * nY, CB * nB, CR * nR) / lumiance), 1.0);\n}","name":"Image","description":"","type":"image"}]}