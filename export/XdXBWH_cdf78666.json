{"ver":"0.1","info":{"id":"XdXBWH","date":"1495806646","viewed":165,"name":"squarescape","username":"Zoz","description":"Shader I wrote a realy long time ago. Buggy and unfinished ;)","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","boxes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //blur effect\n    fragColor = texture(iChannel0, uv);\n    vec3 b = vec3(0.);\n    float res = .0005;\n    for (int i = 0; i < 10; i++) {\n        for(int j = 0; j < 10; j++) {\n         \tb  += texture(iChannel0, uv + vec2(-(2.5 * res) + float(i) * res,\n                                                 -(2.5 * res) + float(j) * res)).rgb;\n        }\n    }\n\tb /= 50.;                      \n\tfragColor.rgb = b;\n    \n    //dark corners\n    uv = uv * 2. - 1.;\n    uv.y *= .85;\n    fragColor /= pow(length(uv), 7.) + .5;\n    fragColor.xyz = pow(fragColor.xyz, vec3(1./2.));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define tm iTime * 3.\n#define pi 3.1415\n#define COLOR 0.\n\nvec3 lp;\n\nmat3 Rotate(vec3 angles)\n{\n    vec3 c = cos(angles);\n    vec3 s = sin(angles);\n    \n    mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0,c.x,s.x, 0.0,-s.x, c.x);\n    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.0,0.0, s.y, 0.0, c.y);\n    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);\n\n    return rotX*rotY*rotZ;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n//https://www.shadertoy.com/view/Ms2SD1\nfloat noise( vec2 p ) {\n    vec2 i = floor( p );\n    vec2 f = fract( p );\t\n\tvec2 u = f*f*(3.0-2.0*f);\n    return -1.0+2.0*mix( mix( rand( i + vec2(0.0,0.0) ), \n                     rand( i + vec2(1.0,0.0) ), u.x),\n                mix( rand( i + vec2(0.0,1.0) ), \n                     rand( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\nfloat sdBox(vec3 p, vec3 b) {\n    p.x += 2.;\n    float s = 3.5;\n    vec2 x = p.xz / s;\n    p.y += noise(floor(x))* 1.5;\n    //p.y += sin(noise(floor(x)) + tm);\n   \tp.xz = mod(p.xz, s) - .5 * s;\n\n    return length(max(abs(p)-b,0.0)) - .5; \n\n}\n\nfloat lamp(vec3 p) {\n    //this was supposed to be a lamp\n    p -= vec3(8. * sin(iTime), 10. + cos(tm), 10. + tm);\n\treturn length(p) - 1.;\n}\n\nvec2 opu(vec2 v1, vec2 v2) {\n \tif (v1.x < v2.x)\n        return v1;\n    else\n        return v2;\n}\nvec2 map(vec3 p) {\n    float color = 10. * rand(vec2(floor((p.x - 1.4) / 3.5),\n                \t\t\t\t  floor((p.z - 3.2) / 3.5)));\n    vec2 d = vec2(sdBox(p, vec3(1.)), color * COLOR);\n    return opu(d, vec2(lamp(p), 1.));\n}\n\nvec3 nor(vec3 p, float prec)\n{\n    vec2 e = vec2(prec, 0.);\n    \n    vec3 n;\n    \n    n.x = map(p+e.xyy).x - map(p-e.xyy).x; \n    n.y = map(p+e.yxy).x - map(p-e.yxy).x; \n    n.z = map(p+e.yyx).x - map(p-e.yyx).x;  \n    \n    return normalize(n); \n}\n\nvec2 trace(vec3 o, vec3 r) {\n \tfloat t = 0.;\n    vec2 d;\n    for (int i = 0; i < 64; i++) {\n     \tvec3 p = o + r * t;\n        d = map(p);\n        t += d.x * .4;\n        //if (t > 50. || d.x < 0.0)  break;\n     \t\n    }\n    return vec2(t, d.y);\n}\n\nvec3 applyFog(vec3 c, float dist) {\n \tfloat fogAmount = 1. - exp(-dist * .16);\n    vec3 fogColor = vec3(0.1);\n    return mix(c, fogColor, fogAmount);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n \n    vec3 o = vec3(0., 6.5, tm);\n    vec3 r = normalize(vec3(uv, 2.));\n    \n    \n    vec2 tr = trace(o, r);\n    float t = tr.x;\n    float m = tr.y;\n\n    vec3 p = o + t * r;\n    vec3 n = nor(p, 0.01);\n    lp = o + vec3(2. + 20. * sin(iTime), 10., 20.);\n    \n    vec3 s = lp - p;\n    \n    vec3 l;\n    float diffuse, specular;\n\n    float c;\n    //set the color to m and make it a bit noisy\n   \tc =  m + rand(tr) * .15;\n    l = vec3(sin(c), sin(c + pi / 8.), sin(c + pi * .2));\n    diffuse = .4;\n    specular = 1.5;\n\n    l += diffuse * max(dot(n, normalize(s)), 0.);\n    l += specular * pow(max(dot(normalize(o - p), reflect(-normalize(s), n)), 0.), 4.) * .6;\n\n    l = applyFog(l, tr.x * .8);\n      \n\tfragColor = vec4(l,1.0);\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    fragColor.r = texture(iChannel0, uv + vec2(.007, 0.)).r;\n    fragColor.b = texture(iChannel0, uv - vec2(.007, 0.)).b;\n    fragColor.g = texture(iChannel0, uv).g;\n    \n    //fragColor = texture(iChannel0, uv);\n}","name":"Buf B","description":"","type":"buffer"}]}