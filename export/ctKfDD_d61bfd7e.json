{"ver":"0.1","info":{"id":"ctKfDD","date":"1702247822","viewed":24,"name":"Fork UCSD CSE 1 vandarkhom 205","username":"vandarkhomo","description":"This is for homework 5 for UCSD CSE 167.\nadded predator\n","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["boids"],"hasliked":0,"parentid":"ddtyDs","parentname":"UCSD CSE 167 Boids template"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Smooth HSV2RGB from https://www.shadertoy.com/view/MsS3Wc\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 color = vec4(0.5, 0.5, 0.5, 1.0);\n    // Loop over all boids\n    vec4 bcolor = vec4(0.0, 0.0, 0.0, 1.0);\n    bool hit = false;\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        if (distance(fragCoord, pos_vel.xy) < BOIDS_SIZE || distance(fragCoord, pos_vel.xy) < P_SIZE && i == 0) {\n            vec3 rgb = hsv2rgb(vec3((float(i)+0.5) / float(NUM_BOIDS), 1.0, 0.9));\n            bcolor += vec4(rgb, 1.0);\n            hit = true;\n        }\n    }\n    if (hit) {\n        color = bcolor;\n    }\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    if (iFrame == 0) {\n        // initialize the buffer\n        vec4 pos_vel = texture(iChannel1, fragCoord/iChannelResolution[1].xy);\n        pos_vel.xy = iResolution.xy / 2.0 + (pos_vel.xy - 0.5) * iResolution.xy * 0.2;\n        pos_vel.zw = (pos_vel.zw - 0.5) * iResolution.xy * 1.0;\n        fragColor = pos_vel;\n        return;\n    }\n    ivec2 iFragCoord = ivec2(fragCoord);\n    \n    float bound_r = sqrt(pow(iResolution.x,2.0) + pow(iResolution.y,2.0));\n    float d_right = iResolution.x*0.9;\n    float d_bottom = iResolution.y * 0.9;\n    vec2 center = vec2(iResolution.x * 0.5, iResolution.y * 0.5);\n    // \n    vec4 pos_vel = texelFetch(iChannel0, iFragCoord, 0);\n    vec2 pos = pos_vel.xy;\n    vec2 vel = pos_vel.zw;\n    // ID of the current Boid\n    int my_id = int(iFragCoord.y) * int(iResolution.x) + int(iFragCoord.x);\n    vec2 fs = vec2(0.0,0.0);\n    vec2 fc = vec2(0.0,0.0);\n    vec2 fa = vec2(0.0,0.0);\n    vec2 fb = vec2(0.0,0.0);\n    vec2 fp = vec2(0.0,0.0);\n    vec2 fo = vec2(0.0,0.0);\n    float cen_dis;\n    \n    \n    vec2 avg_p = vec2(0.0,0.0), avg_v = vec2(0.0,0.0);\n    float Ns = 0.0, Nc = 0.0, Na = 0.0;\n    // for all boids\n    for (int i = 0; i < NUM_BOIDS; i++) {\n        \n        ivec2 tex_pos = ivec2(i % int(iChannelResolution[0].x),\n                                                i / int(iChannelResolution[0].x));\n        vec4 boid_pos_vel = texelFetch(iChannel0, tex_pos, 0);\n        float dis = sqrt(pow(pos.x - boid_pos_vel.x,2.0) + pow(pos.y - boid_pos_vel.y,2.0));\n        cen_dis = sqrt(pow(pos.x - center.x,2.0) + pow(pos.y - center.y,2.0));\n\n        \n        \n        // fs\n        if (dis < DS){\n            Ns += 1.0;\n            fs += ((DS - dis)/DS)*(pos - boid_pos_vel.xy);\n        }\n        \n        //fc\n        if (dis < DV || i == 1){\n            Nc += 1.0;\n            avg_p += boid_pos_vel.xy;\n        }\n\n\n        \n        //fa\n        if (dis < DV){\n            Na += 1.0;\n            avg_v += boid_pos_vel.zw;\n        }\n        \n        // let i = 0 be predator, fp\n        if (i == 0){\n            fs = 0.5*fs;\n        }\n        else{\n            ivec2 pre_pos = ivec2(0 % int(iChannelResolution[0].x),\n                                                0 / int(iChannelResolution[0].x));\n            vec4 pre_pos_vel = texelFetch(iChannel0, pre_pos, 0);\n\n            float dis_p = sqrt(pow(pos.x - pre_pos_vel.x,2.0) + pow(pos.y - pre_pos_vel.y,2.0));\n            \n            if (dis_p < DV_p){\n                fp = pos - pre_pos_vel.xy;\n                vec2 fp = fp*(((DV_p-dis_p)/DV_p));\n                // fp = fp_n;\n            }\n        }\n        \n        float a = ((pos.x < D_LEFT)?1.0:0.0);\n        float b = ((pos.x > d_right)?1.0:0.0);\n        float c = ((pos.y < D_TOP) ? 1.0:0.0);\n        float d = ((pos.y > d_bottom)?1.0:0.0);\n        fb = vec2(a - b,c - d);\n    }\n    fs = (fs)/ Ns;\n    //fs = 0.0 * fs;\n    fc = (avg_p)/Nc  - pos;\n    fa = (avg_v)/Na - vel;\n\n    vec2 force = AS*fs + AC*fc + AA*fa + AB*fb + AP*fp;\n\n    \n    if (cen_dis > bound_r){\n        force = (center - pos);\n       }\n    // force = force - 0.1* center*(length(force)/ length(center));\n    vel += force;\n    \n    vel = max(vel, vel*(SMAX / length(vel)));\n    vel = min(vel, vel*(SMIN / length(vel)));\n    vel = 0.95 * vel;\n    pos += vel;\n    fragColor = vec4(pos, vel);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define NUM_BOIDS 200\n#define BOIDS_SIZE 10.0\n#define P_SIZE 30.0\n#define SMAX 10.0\n#define SMIN 5.0\n#define DS 30.0\n#define AS 0.02\n#define DV 100.0\n#define AA 0.03\n#define AC 0.001\n#define AC_p 0.1\n#define D_LEFT 200.0\n#define D_TOP 160.0\n#define AB 0.5\n#define AP 0.1\n#define DV_p 200.0 \n\n\n\n\n\n\n\n\n\n\n\n","name":"Common","description":"","type":"common"}]}