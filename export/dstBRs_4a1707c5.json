{"ver":"0.1","info":{"id":"dstBRs","date":"1697554571","viewed":54,"name":"warping image","username":"yuichkun","description":"warping image","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["warp"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))\n                 * 43758.5453123);\n}\n\n// 2D Noise based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    // Smooth Interpolation\n\n    // Cubic Hermine Curve.  Same as SmoothStep()\n    vec2 u = f*f*(3.0-2.0*f);\n    // u = smoothstep(0.,1.,f);\n\n    // Mix 4 coorners percentages\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 mosaicUv = ceil(uv * 10.0) / 10.0;\n    vec3 col = vec3(mosaicUv.yx, 1.0);\n    \n\n    float xSpeed = 0.5;\n    float ySpeed = 0.33;\n    float power = 5.;\n\n    float nXAmp = (sin(iTime * xSpeed) + 1.) * 0.5 * power;\n    float nX = noise(uv * nXAmp);\n    float nYAmp = (cos(iTime * xSpeed) + 1.) * 0.5 * power;\n    float nY = noise(uv * nYAmp);\n    \n\n    vec4 tile = vec4(col,1.0);\n    vec4 image = texture(iChannel0, uv + vec2(nX, nY));\n    \n\n    \n    fragColor = tile;\n    fragColor = image;\n    fragColor = mix(tile, image, .85);\n\n//    fragColor = vec4(vec3(v), 1.0);\n//    fragColor = vec4(vec3(noise(uv), 1.0, 1.0));\n}","name":"Image","description":"","type":"image"}]}