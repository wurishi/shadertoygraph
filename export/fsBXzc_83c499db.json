{"ver":"0.1","info":{"id":"fsBXzc","date":"1620662045","viewed":416,"name":"Frosted Glass Blur","username":"bjarkepedersen","description":"Controls (click-and-drag):\n    mouse X : n samples\n    mouse Y : blur size\n\nSimple blur using blue noise to pseudo-randomly sample nearby pixels. It also uses the two-point sampling method to get additional samples out of each blue noise sample.","likes":8,"published":1,"flags":16,"usePreview":1,"tags":["noise","blur","random","glass","blue","sampling","not","gaussian","prime","point","two","frosted","mersenne"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define p 1023.                     // Mersenne Prime \n#define max_n 20                    // Max number of samples\n#define independence 0.133742069    // Independence of samples. Lower values will mean more visible noise. Some higher \n                                    // values (like 0.5 or 1.0) also lead to more noise due to the repeating effect \n                                    // when sampling beyond the image boundaries.\n#define n_extra 3                   // Number of extra samples to generate using the two-point sampling method\n\nvec3 blur(vec2 uv, int n, float blur_amount) {\n    vec3 col = vec3(0);    \n    \n    \n    // For each of the n samples we sample the blue noise texture once to get a pseudo random offset\n    // which we use to sample a neaby pixel. Based on this offset we also use the an adaptation of the \n    // two-point sampling method to get 'n_extra' additional pseudo-random offsets, which we also use \n    // to sample the image.\n    for (int i = 0; i < max_n; i++) {\n        if (i >= n) {break;}\n        vec3 offset = texture( iChannel1, uv + vec2(float(i)*1.079173,float(i)*0.878642)*independence ).rgb;\n\n        \n        // Sample image\n        col += texture(iChannel0, uv+(offset.rg*blur_amount) - (blur_amount*0.5) ).rgb;\n        \n        // Two-point sampling method (kind of)\n        float a = offset.r*1000000.0;\n        float b = offset.g*1000000.0;\n        float c = offset.b*1000000.0;\n\n        for (int i = 0; i < n_extra; i++) {\n            float x = mod( a*float(i)+b, p ) / p;\n            float y = mod( b*float(i)+c, p ) / p;\n\n            vec2 offset = vec2(x,y);\n            \n            float fudge = 0.33; // Fudge factor for the average offset length. Makes blur size of these\n                                // samples match that of the other samples approximately.\n            \n            // Sample image\n            col += texture(iChannel0, uv+(offset*blur_amount*fudge) - (fudge*blur_amount*0.5) ).rgb;\n        }\n    }\n     \n    return col/float(n*(n_extra+1));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    int n = 1 + int(float(iMouse.x / iResolution.x)*20.); // Number of samples\n    float blur_amount = iMouse.y/iResolution.y / 2.0;     // Blur size\n    \n    if (n > 0) {\n        col = blur(uv, n, blur_amount);\n    }\n    \n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}