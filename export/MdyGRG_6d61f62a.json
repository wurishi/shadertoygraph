{"ver":"0.1","info":{"id":"MdyGRG","date":"1455155533","viewed":237,"name":"Benoit's Dragon","username":"pogalog","description":"Demonstration of fractal plotting (for students). Not sure I could have picked a cheesier name for this. I realize this brings essentially nothing new to the community, but it seems an appropriate starting point.","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot","color"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define USE_MUSIC 1\n\nfloat music()\n{\n\treturn 0.5 * ( texture( iChannel0, vec2( 0.15, 0.25 ) ).x + texture( iChannel0, vec2( 0.30, 0.25 ) ).x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    float t2 = time / 3.1415927;\n    \n    // center of rotation\n    vec2 zc = vec2( -0.8354, -0.2330 );\n    \n    float A = 4.0e-5;\n    float s = 3.0 - 3.0*exp( -A*time );\n    vec2 size = vec2( s, s );\n    vec2 low_bound = zc - 0.5*size;\n    vec2 high_bound = zc + 0.5*size;\n    \n    // only divide by width to avoid skewing image\n\tvec2 uv = fragCoord.xy / iResolution.x;\n    \n    vec2 dr = high_bound - low_bound;\n    vec2 zij = uv * dr + low_bound;\n    \n    // rotation matrix\n    float angle = sin( 0.15*time );\n    mat2 m = mat2( cos(angle), -sin(angle), sin(angle), cos(angle) );\n    \n    const float num_iterations = 1000.0;\n    float val = 0.0;\n    vec2 z = vec2( 0.0, 0.0 );\n    vec2 c = m*(zij - zc) + zc;\n    \n    // compute\n    for( float i = 0.0; i < num_iterations; i++ )\n    {\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n        \n        // bring out additional detail\n        float a1 = pow( z.x, 3.0 );\n        float a2 = log( abs(z.y * z.y * sin(t2)) );\n//        float a3 = pow( exp(sin(z1.x)), 3.0 );\n        float b1 = pow( z.y, 3.0 );\n        float b2 = log( abs(z.x * z.x * sin(t2)) );\n//        float b3 = pow( exp(sin(z1.y)), 3.0 );\n        \n        float a = a1 * a2;\n        float b = b1 * b2;\n        \n        if( a + b < 10.0*exp(-(1.5 + 1.25*sin(t2))) )\n        {\n            val++;\n        }\n    }\n    \n    // map colors\n    float sv = exp( -1.5*(5.5 + 2.0*sin(0.1*time))*val / num_iterations );\n    vec3 color = vec3( 0.0 );\n    \n    float Rf = 0.5;\n    float R0 = (0.25 + 0.4*cos(Rf*time))*uv.y;\n    float Rw = 0.05 + 0.5*sin(Rf*time);\n    float R = R0 + exp( -pow( (sv - 0.5)/Rw, 2.0 ) );\n    color.r = clamp( R, 0.0, 1.0 );\n    \n    float Gf = 0.25;\n    float G0 = (0.75 - 0.2*sin(Gf*time))*sin( 0.002*uv.y )*uv.x;\n    float Gw = 0.25 + 0.4*cos(Gf*time);\n    float G = G0 + exp( -pow( (sv - 0.5)/Gw, 2.0 ) );\n    color.g = clamp( G, 0.0, 1.0 );\n    \n    float Bf = 0.1;\n    float B0 = (0.1 + 0.3*cos(Bf*time))*cos( 0.001*uv.x )*uv.y;\n    float Bw = 0.54;\n    float B = B0 + exp( -pow( (sv - 0.5)/Bw, 2.0 ) );\n    color.b = clamp( B, 0.0, 1.0 );\n    \n    float pulse = music();\n    if( USE_MUSIC == 0 ) pulse = 0.0;\n    \n    color *= (0.65 + pulse) * length( color );\n\tfragColor = vec4( color, 1.0 );\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}