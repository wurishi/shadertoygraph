{"ver":"0.1","info":{"id":"7sccRj","date":"1653717866","viewed":92,"name":"30 Minutes 5/27","username":"scry","description":"color turned out nice, look like night :)\n","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","shadow","light"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"////////////////////////////////////////////////////\n#define time iTime*0.3\n#define pi 3.1415926535\n#define deg pi/180.\n\nmat2 r2d(float a) {\n    return mat2(cos(a),sin(a),-sin(a),cos(a));\n}\n\nfloat sdBox(vec3 p, vec3 s) {   \n    return max(abs(p.z)-s.z,max(abs(p.x)-s.x,abs(p.y)-s.y));\n}\n\nvec3 lpos(void) {\n    vec3 l = vec3(0.,0.,0.);\n    //l.yz *= r2d(0.5);\n    l.z += 0.7;\n    l.xz *= r2d(time*3.);\n    l.z += 3.;\n    return l;\n}\n\nvec4 map(vec3 p) {\n    vec3 o = p;\n    p.z -= 3.;\n    p.yz *= r2d(-0.5+sin(time)*0.7);\n    p.xz *= r2d(0.3+time/2.);\n    vec3 op = p;\n    p = abs(p)-1.;\n    float yd = 1.5;\n    yd += -p.y;\n    p.xz *= r2d(floor(p.y*yd-0.5)*time*1.3);\n    p.y = fract(p.y*yd-0.5)-0.5;\n    p.y /= yd;\n    //p.yz *= r2d(deg*90.);\n    p.xz = abs(p.xz)-0.3;\n    p = abs(p)+0.1;\n    \n    p.xz *= r2d(deg*45.);\n    p.xy *= r2d(deg*35.);\n    float d = sdBox(p,vec3(0.3));\n    d = min(d,(op.y+1.2)+p.y*0.0);\n    return vec4(p,d);\n}\n\n\nvec2 RM(vec3 ro, vec3 rd, float side) {\n    float dO = 0.;\n    float ii = 0.;\n    for (int i=0;i<50;i++) {\n        vec3 p = ro+rd*dO;\n        float dS = map(p).w*side;\n        dO += dS*1.0;\n        ii += 0.01;\n        if (dO > 100. || dS < 0.001) {break;}\n    }\n    return vec2(dO,ii);\n}\n\nvec3 calcNorm(vec3 p) {\n    vec2 h = vec2(0.001,0.);\n    return normalize(vec3(\n        map(p-h.xyy).w-map(p+h.xyy).w,\n        map(p-h.yxy).w-map(p+h.yxy).w,\n        map(p-h.yyx).w-map(p+h.yyx).w\n    ));\n}\n\nvec3 sh(vec3 p, vec3 n) {\n    vec3 l = lpos();\n    vec3 rd = normalize(l-p);\n    vec2 d = RM(p-n*0.003,rd,1.);\n    float s = 1.;\n    float dif = clamp(dot(rd,-n),0.,1.);\n    if (length(l-p) > d.x) {\n        s = 0.;\n    }\n    return vec3(s,dif,d.x);\n}\n\nvec3 colo(vec3 p, vec3 n, vec2 d, vec3 rd) {\n    vec3 col = vec3(0.);\n    //col += d.x*0.1;\n    col += n.yzx*0.1;\n    float l = length(lpos()-p);\n    float l1 = pow(clamp(1.-length(lpos().xy-rd.xy*lpos().z),0.,1.),3.);\n    col += l1;\n    vec3 ld = sh(p,n);\n    col += ld.x*0.5;\n    col += ld.y;\n    return col;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 R = iResolution.xy;\n    float ar = R.x/R.y;\n    uv -= 0.5;\n    uv.x *= ar;\n    vec3 col = vec3(0.);\n    vec3 ro = vec3(0.);\n    vec3 rd = normalize(vec3(uv,1.));\n    vec2 d = RM(ro,rd,1.);\n    vec3 p =ro+rd*d.x;\n    vec3 n = calcNorm(p);\n    col += colo(p,n,d,rd);\n    float rl = 0.99;\n    float ea = 0.3;\n    for (int i=0;i<4;i++) {\n        ro = p-n*0.003;\n        rd = reflect(rd,n);\n        d = RM(ro,rd,1.);\n        p = ro+rd*d.x;\n        n = calcNorm(p);\n        col += colo(p,n,d,rd)*rl*ea;\n        rl *= rl;\n    }\n    col *= 0.5;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}