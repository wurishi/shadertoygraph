{"ver":"0.1","info":{"id":"l3fBRM","date":"1728154460","viewed":35,"name":"Fork Fork Fork  nilberlin 124","username":"nilberlin","description":"just another one ","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["dancingspiral3"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float time = iTime * 0.5;\n\n    // Octopus body and arms with more variation\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    float armPattern = sin(12.0 * angle + time * 4.0 - radius * 10.0);\n\n    // Add more rhythmic wave-like movement to the arms\n    float waveMovement = sin(time * 1.5 + radius * 5.0 + angle * 3.0) * cos(time * 2.0 - angle * 4.0);\n    armPattern += 0.1 * waveMovement;\n\n    // Add reverse movement for more dynamic variation\n    float reverseWave = cos(time * 2.0 - radius * 3.0 - angle * 2.0);\n    armPattern += 0.05 * reverseWave;\n\n    // Create dots for tentacles (suckers) with additional variation\n    float dotPattern = smoothstep(0.015, 0.035, cos(radius * 40.0 + armPattern * 6.0 + waveMovement));\n\n    // Color shifting based on angle, radius, and sound input\n    float sound = texture(iChannel0, vec2(angle * 0.1 + time * 0.05, 0.5)).r;\n    vec3 color = vec3(0.8 + 0.2 * sin(armPattern * 12.0 + time * 1.5 + sound * 5.0),\n                      0.7 + 0.3 * sin(armPattern * 9.0 + time * 1.3 - sound * 6.0),\n                      0.75 + 0.25 * sin(armPattern * 15.0 + time * 1.8 + sound * 7.0));\n\n    // Increase vibrancy for super vibrant colors\n    color = clamp(color * 2.0, 0.0, 1.0);\n\n    // Apply dot pattern to simulate tentacle suckers\n    color *= dotPattern;\n\n    // Add glow effect with more dynamic range\n    float glow = smoothstep(0.1, 0.25, armPattern + waveMovement * 0.5);\n    color += glow * 0.3;\n\n    // Add a subtle pulsing effect for more depth\n    float pulse = 0.2 * sin(time * 2.0 + radius * 6.0);\n    color += pulse;\n\n    // Add more rhythmic and opposing movement effects\n    float rhythmEffect = 0.15 * sin(time * 3.0 + radius * 4.0) * cos(time * 1.5 - radius * 5.0);\n    color += rhythmEffect;\n\n    // Final blending for the octopus effect, enhancing brightness and contrast\n    color = pow(color, vec3(1.1)); // Increase contrast slightly for more punch\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    float time = iTime * 0.5;\n\n    // Octopus body and arms with more variation\n    float angle = atan(uv.y, uv.x);\n    float radius = length(uv);\n    float armPattern = sin(12.0 * angle + time * 4.0 - radius * 10.0);\n\n    // Add more rhythmic wave-like movement to the arms\n    float waveMovement = sin(time * 1.5 + radius * 5.0 + angle * 3.0) * cos(time * 2.0 - angle * 4.0);\n    armPattern += 0.1 * waveMovement;\n\n    // Add reverse movement for more dynamic variation\n    float reverseWave = cos(time * 2.0 - radius * 3.0 - angle * 2.0);\n    armPattern += 0.05 * reverseWave;\n\n    // Create dots for tentacles (suckers) with additional variation\n    float dotPattern = smoothstep(0.015, 0.035, cos(radius * 40.0 + armPattern * 6.0 + waveMovement));\n\n    // Color shifting based on angle, radius, and sound input\n    float sound = texture(iChannel0, vec2(angle * 0.1 + time * 0.05, 0.5)).r;\n    vec3 color = vec3(0.8 + 0.2 * sin(armPattern * 12.0 + time * 1.5 + sound * 5.0),\n                      0.7 + 0.3 * sin(armPattern * 9.0 + time * 1.3 - sound * 6.0),\n                      0.75 + 0.25 * sin(armPattern * 15.0 + time * 1.8 + sound * 7.0));\n\n    // Introduce dynamic color shifting for more vibrancy\n    float hueShift = 0.5 * sin(time * 3.0 + angle * 5.0 + radius * 2.0);\n    vec3 vibrantColor = vec3(\n        0.8 + 0.4 * sin(armPattern * 14.0 + time * 2.0 + hueShift + sound * 6.0),\n        0.6 + 0.5 * cos(armPattern * 10.0 + time * 1.7 - hueShift - sound * 5.5),\n        0.7 + 0.3 * sin(armPattern * 16.0 + time * 2.2 + hueShift * 2.0 + sound * 7.5));\n\n    // Blend vibrant colors with original color to achieve super vibrant effect\n    color = mix(color, vibrantColor, 0.7);\n\n    // Increase vibrancy for super vibrant colors\n    color = clamp(color * 2.5, 0.0, 1.0);\n\n    // Apply dot pattern to simulate tentacle suckers\n    color *= dotPattern;\n\n    // Add glow effect with more dynamic range\n    float glow = smoothstep(0.1, 0.25, armPattern + waveMovement * 0.5);\n    color += glow * 0.3;\n\n    // Add a subtle pulsing effect for more depth\n    float pulse = 0.2 * sin(time * 2.0 + radius * 6.0);\n    color += pulse;\n\n    // Add more rhythmic and opposing movement effects\n    float rhythmEffect = 0.15 * sin(time * 3.0 + radius * 4.0) * cos(time * 1.5 - radius * 5.0);\n    color += rhythmEffect;\n\n    // Final blending for the octopus effect, enhancing brightness and contrast\n    color = pow(color, vec3(1.2)); // Increase contrast slightly for more punch\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}