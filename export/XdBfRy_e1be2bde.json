{"ver":"0.1","info":{"id":"XdBfRy","date":"1500836056","viewed":319,"name":"Two-pass film grain","username":"MarisaKirisame","description":"Algorithm from MariENB. With \"dark mask\" blending.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","cinematic","filmgrain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Complex grain shader ported over from MariENB\n\n\tCopyright (c) 2012-2022 Marisa the Magician, UnSX Team\n\n\tPermission is hereby granted, free of charge, to any person obtaining\n\ta copy of this software and associated documentation files (the\n\t\"Software\"), to deal in the Software without restriction, including\n\twithout limitation the rights to use, copy, modify, merge, publish,\n\tdistribute, sublicense, and/or sell copies of the Software, and to\n\tpermit persons to whom the Software is furnished to do so, subject to\n\tthe following conditions:\n\n\tThe above copyright notice and this permission notice shall be\n\tincluded in all copies or substantial portions of the Software.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\tEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\tMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n\tIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n\tCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n\tTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n\tSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n#define PI 3.141592658\n#define darkmask(a,b) (a>0.5)?(2.0*a*(0.5+b)):(1.0-2.0*(1.0-a)*(1.0-((0.5+b))))\n\nconst float nf = 0.0025;\t\t\t\t// frequency\nconst vec3 nm1 = vec3(2.05,3.11,2.22);\t// rgb zoom factors of first layer\nconst float nk = 0.04;\t\t\t\t\t// second pass coordinate distortion factor\nconst vec3 nm2 = vec3(4.25,9.42,6.29);\t// rgb zoom factors of second layer\nconst float ns = -0.28;\t\t\t\t\t// saturation\nconst float np = 1.3;\t\t\t\t\t// contrast\nconst float bnp = 4.8;\t\t\t\t\t// dark mask contrast\nconst float ni = 0.035;\t\t\t\t\t// intensity\n\n// the grain filter\nvec3 grain( in vec3 res, in vec2 coord )\n{\n    float ts = iTime*nf;\n    vec2 s1 = coord+vec2(0.0,ts);\n    vec2 s2 = coord+vec2(ts,0.0);\n    vec2 s3 = coord+vec2(ts,ts);\n    float n1, n2, n3;\n    vec2 nr = iResolution.xy/iChannelResolution[1].xy;\n    n1 = texture(iChannel1,s1*nm1.x*nr).r;\n    n2 = texture(iChannel1,s2*nm1.y*nr).g;\n    n3 = texture(iChannel1,s3*nm1.z*nr).b;\n    s1 = coord+vec2(ts+n1*nk,n2*nk);\n    s2 = coord+vec2(n2,ts+n3*nk);\n    s3 = coord+vec2(ts+n3*nk,ts+n1*nk);\n    n1 = texture(iChannel1,s1*nm2.x*nr).r;\n    n2 = texture(iChannel1,s2*nm2.y*nr).g;\n    n3 = texture(iChannel1,s3*nm2.z*nr).b;\n    float n4 = (n1+n2+n3)/3.0;\n    vec3 ng = vec3(n4);\n    vec3 nc = vec3(n1,n2,n3);\n    vec3 nt = pow(clamp(mix(ng,nc,ns),0.0,1.0),vec3(np));\n    float bn = 1.0-clamp((res.r+res.g+res.b)/3.0,0.0,1.0);\n    bn = pow(bn,bnp);\n    vec3 nn = clamp(nt*bn,vec3(0.0),vec3(1.0));\n    res.r = darkmask(res.r,(nn.r*ni));\n    res.g = darkmask(res.g,(nn.g*ni));\n    res.b = darkmask(res.b,(nn.b*ni));\n    return res;\n}\n\n// standard 2d rotation\nvec2 rotate( in vec2 coord, in float theta )\n{\n    theta = radians(theta);\n    return coord*mat2(cos(theta),sin(theta),-sin(theta),cos(theta));\n}\n\n// applying the filter on top of a rotating cubemap view\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 dir = vec3((fragCoord.xy-iResolution.xy*0.5)/iResolution.y,1.0);\t// I have no idea how this works\n    dir.yz = rotate(dir.yz,1.0+1.0*sin(iTime));\t// bob up and down\n    dir.xz = rotate(dir.xz,iTime*4.0);\t// horizontal rotation\n    vec4 res = texture(iChannel0,dir);\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    res.rgb = grain(res.rgb,uv);\n\tfragColor = res;\n}","name":"Image","description":"","type":"image"}]}