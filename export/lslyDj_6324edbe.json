{"ver":"0.1","info":{"id":"lslyDj","date":"1489998846","viewed":97,"name":"FlagRussia","username":"ArtDov","description":"Flag","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flag"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float PI = 3.141592;\nconst float KPT180 = 0.017453;\n    \nfloat cloth (vec3 p, vec2 b){\n\tb = vec2(abs(b.x),abs(b.y));\n    float rad = KPT180*90.0;\n    vec3 d = abs(p) - (b.xy,1.0);\n    //b.x *= b.x*cos(rad) - b.y*sin(rad);\n  // b *= length(vec2(cos(rad), -sin(rad)));\n    //b *= mat2(0.5,0.0, 0.0, 0.5);\n    return  2.0*(b.y + b.x);\n}\nfloat rayTrace(vec3 o, vec3 r, vec2 uvcloth){\n     float t = 0.0;\n    for(int i=0; i<64;i++){\n        vec3 p;\n        vec2 b = uvcloth;\n       // clamp(b.x, 0.1,0.8);clamp(b.y, 0.4,0.7);\n        float d = cloth(p, b);\n        p = o + d*t;\n        t+=d * 0.33333;\n    }\n    return t;\n}\nvec2 rot_uv(vec2 uv, float angle){\n\tfloat rad = KPT180*angle;\n    return uv *= mat2(cos(rad), -sin(rad), sin(rad), cos(rad));\n}\nvec3 drawRectangle (in vec2 uvRectangle, float time, float scale, vec3 segmentColor,out float coefficientScale){\n    \n   \n    uvRectangle = 2.0*uvRectangle - 1.0;\n    uvRectangle.x *= iResolution.x/iResolution.y;\n    uvRectangle.y *= iResolution.y/iResolution.x*3.0;\n    uvRectangle.y += 0.7*fract(0.8*cos(0.8*cos((length(uvRectangle.x)*sin(time))))-2.5);\n    uvRectangle.x -= 0.1*fract(2.1*sin(cos((length(uvRectangle.y)*sin(time))+0.1))-0.5);\n    uvRectangle.x *= 0.32;\n    coefficientScale = length(uvRectangle.y);\n    uvRectangle = rot_uv(uvRectangle, 45.0);\n    uvRectangle *=scale;\n    \n    vec3 r = normalize(vec3(uvRectangle,1.0));\n    vec3 o = vec3(0.0,0.0,time);\n    float t = rayTrace(o, r, uvRectangle);\n    vec3 fc = vec3(t);\n    \n    if (fc.x<0.99)fc = vec3(0.0);\n  \n  \tfc=vec3(1.0,1.0,1.0)-fc;\n    \n    fc*= segmentColor;\n    fc = clamp(fc, 0.0, 1.0);\n    return fc;\n}\n\nfloat heigh (vec2 uv){\nreturn clamp(abs((cos(iTime/1.0)+0.8)*uv.x*uv.y*length(uv)-0.5), 0.2 , 1.2);\n}\n\nfloat heigh2 (vec2 uv){\nreturn 1.1*fract(clamp(abs((2.2*sin(iTime)+4.0)*1.2*length(uv)*uv.x), 0.1 , 0.95)) - 1.4;\n}\n\nfloat heigh3 (vec2 uv){\n    return 0.8*tan(0.01*uv.y*length(uv)*(cos(iTime))-10.0) - 2.0;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   \n    float time = iTime;\n\tvec2 uvRectangle = fragCoord.xy / iResolution.xy;\n    vec2 bluePosition = vec2(0.0,0.0);\n    vec2 whitePosition = vec2(0.0,-0.33);\n    vec2 redPosition = vec2(0.0,0.33);\n    vec3 fcBackground = vec3(.0);\n    vec3 fc0 = drawRectangle(uvRectangle + whitePosition, time, 0.03, vec3(1.0, 1.0, 1.0), bluePosition.y);\n    vec3 fc1 = drawRectangle(uvRectangle , time, 0.03, vec3(0.1, 0.2, 0.6), whitePosition.y);\n    vec3 fc2 = drawRectangle(uvRectangle + redPosition, time, 0.03, vec3(0.9, 0.0, 0.0), whitePosition.y);\n    vec4 sumfc = vec4 (0.0);\n\tsumfc += vec4(fc0,1.0);\n    sumfc += vec4(fc1,1.0);\n    sumfc += vec4(fc2,1.0);\n    \n    \n    //////////////////////////////////////////////////////\n    vec2 uv =  fragCoord.xy/iResolution.xy;\n    uv.x = uv.x+0.1*cos(iTime);\n    uv.x *= iResolution.x/iResolution.y;\n    uv.x *= 0.5;\n    float uvScale = 2.0;\n    float h = heigh(rot_uv(uv,15.0*iTime));\n    vec3 noise = vec3(heigh2(rot_uv(uv, 5.0*cos(iTime))));\n    vec3 noise1 = vec3(heigh3(uv));\n    vec3 col = vec3(h);\n    col+= vec3(0.4,0.4,0.4);\n    \n    sumfc.xyz*=col;\n    sumfc.xyz+=col/4.0;\n    sumfc.xyz*=noise/2.5;\n    sumfc.xyz*=noise1/2.5;\n    float sx,sy,sz; sx = 3.0; sy = sx; sz = sx; \n    sumfc *= mat4(sx ,0.1,0.0,0.0,\n                  0.0, sy,0.0,0.0,\n                  0.0, 0.0,sz,0.0,\n                  0.0,0.0,0.0,1.0);\n\tsumfc = clamp(sumfc, 0.0, 1.0);\n\tfragColor = sumfc;\n}","name":"Image","description":"","type":"image"}]}