{"ver":"0.1","info":{"id":"4cVGDd","date":"1713447350","viewed":34,"name":"Kuwahara Filter Updated By Toad","username":"MasterToad","description":"this is a simple implementation of the Kuwahara Filter\n-removed repeated code","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["kuwahara"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 getMean_StandardDeviation(vec2 uv, float offsetX, float offsetY);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float offsetX = 1.0 / iChannelResolution[0].x;\n    float offsetY = 1.0 / iChannelResolution[0].y;\n    \n    vec4 aValues = getMean_StandardDeviation(uv, -offsetX, offsetY);\n    \n    vec4 bValues = getMean_StandardDeviation(uv, offsetX, offsetY);\n    \n    vec4 cValues = getMean_StandardDeviation(uv, -offsetX, -offsetY);\n    \n    vec4 dValues = getMean_StandardDeviation(uv, offsetX, -offsetY);\n    \n    float lowestDeviation = min(min(aValues.a, bValues.a), min(cValues.a, dValues.a));\n    \n    vec3 result;\n    \n    if (aValues.a == lowestDeviation)\n    {\n        result = aValues.rgb;\n    } else if (bValues.a == lowestDeviation)\n    {\n        result = bValues.rgb;\n    } else if (cValues.a == lowestDeviation)\n    {\n        result = cValues.rgb;\n    } else \n    {\n        result = dValues.rgb;\n    }\n    \n    // Output to screen\n    // fragColor = texture(iChannel0, uv);\n    fragColor = vec4(result, 1.0);\n}\n\nvec4 getMean_StandardDeviation(vec2 uv, float offsetX, float offsetY) \n{\n    vec3 cel_00 = texture(iChannel0, uv).rgb;\n    vec3 cel_01 = texture(iChannel0, uv + vec2(0.0, offsetY)).rgb;\n    vec3 cel_02 = texture(iChannel0, uv + vec2(0.0, offsetY*2.0)).rgb;\n    \n    vec3 cel_10 = texture(iChannel0, uv + vec2(offsetX, 0.0)).rgb;\n    vec3 cel_11 = texture(iChannel0, uv + vec2(offsetX, offsetY)).rgb;\n    vec3 cel_12 = texture(iChannel0, uv + vec2(offsetX, offsetY*2.0)).rgb;\n    \n    vec3 cel_20 = texture(iChannel0, uv + vec2(offsetX*2.0, 0.0)).rgb;\n    vec3 cel_21 = texture(iChannel0, uv + vec2(offsetX*2.0, offsetY)).rgb;\n    vec3 cel_22 = texture(iChannel0, uv + vec2(offsetX*2.0, offsetY*2.0)).rgb;\n    \n    vec3 mean = (cel_00 + cel_01 + cel_02 + cel_10 + cel_11 + cel_12 + cel_20 + cel_21 + cel_22) / 9.0;\n    \n    vec3 variance = (((cel_00-mean)*(cel_00-mean)) + ((cel_01-mean)*(cel_01-mean)) + ((cel_02-mean)*(cel_02-mean)) + ((cel_10-mean)*(cel_10-mean)) + ((cel_11-mean)*(cel_11-mean)) + ((cel_12-mean)*(cel_12-mean)) + ((cel_20-mean)*(cel_20-mean)) + ((cel_21-mean)*(cel_21-mean)) + ((cel_22-mean)*(cel_22-mean))) / 9.0;\n    \n    float standardDeviation = sqrt(variance.r) + sqrt(variance.g) + sqrt(variance.b);\n    \n    return vec4(mean, standardDeviation);\n}","name":"Image","description":"","type":"image"}]}