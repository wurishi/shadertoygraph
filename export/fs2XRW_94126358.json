{"ver":"0.1","info":{"id":"fs2XRW","date":"1619780703","viewed":215,"name":"Voronoi blobs","username":"Elise","description":"Voronoi diagram based shader with mouse interaction.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["voronoi"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec2 random2( vec2 p )\n {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\nfloat voronoi(vec2 i_stP, vec2 f_stP, vec2 stP, float scalarP)\n{\n    float m_distP = 1.;\n\n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            vec2 neighbor = vec2(x,y);\n            vec2 point = random2(i_stP + neighbor );\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n            vec2 diff = neighbor + point - f_stP;\n            float dist = dot(diff, diff);\n            if(dist *m_distP < m_distP)\n            {\n                m_distP = dist*m_distP;\n            }\n        }\n    }\n//MOUSE INTERACTION\n    vec2 mousePoint = iMouse.xy/iResolution.y*scalarP;\n    vec2 diffMouse = mousePoint - stP;\n    float distMouse = dot(diffMouse, diffMouse);\n    if(distMouse * m_distP < m_distP)\n    {\n        m_distP = distMouse * m_distP;\n    }\n    return m_distP;\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(.0);\n\n    float scalar = 10.;\n    st *= scalar;\n\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = voronoi(i_st, f_st, st, scalar);\n\n    color += m_dist/0.01;\n    // Draw cell center\n    //color -= 1.-step(.02, m_dist);\n    // Draw grid\n    //color.r += step(.98, f_st.x) + step(.98, f_st.y);\n\n    fragColor = vec4(color,1.0);\n}\n","name":"Image","description":"","type":"image"}]}