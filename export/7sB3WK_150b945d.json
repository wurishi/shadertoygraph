{"ver":"0.1","info":{"id":"7sB3WK","date":"1617954255","viewed":76,"name":"Voronoi in Lp space","username":"tomoe","description":"Left: 2D, Center: 2D+rotation, Right: 3D\nfork from [url=https://www.shadertoy.com/view/NsB3WG]Voronoi[/url] and [url=https://www.shadertoy.com/view/sdB3WK]Lp space[/url]","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["bd202104"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 fragCoord_;\nuvec3 k = uvec3(0x456789abu, 0x6789ab45u, 0x89ab4567u);\nconst uint max32 = 0xffffffffu;\nconst float PI = 3.14159265359;\nuvec2 hash22u(uvec2 n) {  \n    n ^= (n.yx << 24);\n    n ^= (n.yx >> 1);\n    n *= k.xy;\n    n ^= (n.yx << 1);\n    return n * k.xy;\n}\nuvec3 hash33u(uvec3 n) {\n    n ^= (n.yzx << 24);\n    n ^= (n.yzx >> 1);\n    n *= k;\n    n ^= (n.yzx << 1);\n    return n * k;\n}\nmat2 rot2(float t) {\n    return mat2(cos(t), sin(t), -sin(t),  cos(t));\n}\nmat3 rotX(float t){\n    return mat3(\n        1.,0.,0.,\n        0.,sin(t),cos(t),\n        0.,-cos(t),sin(t)\n    );\n}\nvec2 hash22(vec2 p) {\n    uvec2 n = uvec2(p);\n    return vec2(hash22u(n)) / vec2(max32);\n}\nvec3 hash33(vec3 p) {\n    uvec3 n = uvec3(p);\n    return vec3(hash33u(n)) / vec3(max32);\n}\nfloat length2(vec2 p, float d) {\n    p = abs(p);\n    return pow(p.x, d) + pow(p.y, d);\n}\nfloat length3(vec3 p, float d) {\n    p = abs(p);\n    return pow(p.x, d) + pow(p.y, d) + pow(p.z, d);\n}\nvec2 voronoi2(vec2 p, float d){   \n    vec2 n = round(p);\n    vec2 f = p - round(p);\n    float dist = length2(abs(f) + 0.5, d);\n    vec2 sgn = vec2(1.0);\n    vec2 glid = vec2(0.0);\n    vec2 ind;\n    for(float j = 0.0; j <= 2.0; j ++ ) {\n        glid.y += sgn.y * j;\n        sgn.y *= -1.0;\n        if (pow(max(abs(glid.y - f.y) - 0.5, 0.0), d) > dist){\n            continue;\n        }\n        for(float i = 0.0; i <= 2.0; i ++ ){\n            glid.x += sgn.x * i;\n            sgn.x *= -1.0;\n            vec2 nbd = glid;\n            if(fragCoord_.x < 0.33 * iResolution.x){\n                nbd += hash22(n + nbd) - 0.5; \n            } else {\n                nbd += rot2(iTime) * (hash22(n + nbd) - 0.5)/sqrt(2.0);\n            }\n            if(length2(nbd - f, d) < dist){\n                ind = n + glid;\n                dist = length2(nbd - f, d);\n            }\n        }\n        glid.x = 0.0;\n    }\n    return ind;\n}\nvec3 voronoi3(vec3 p, float d){   \n    vec3 n = round(p);\n    vec3 f = p - round(p);\n    float dist = length3(abs(f) + 0.5, d);\n    vec3 sgn = vec3(1.0);\n    vec3 glid = vec3(0.0);\n    vec3 ind;\n    for(float k = 0.0; k <= 2.0; k ++ ) {\n            glid.z += sgn.z * k;\n            sgn.z *= -1.0;\n            if (pow(max(abs(glid.z - f.z) - 0.5, 0.0), d) > dist){\n                continue;\n            }\n        for(float j = 0.0; j <= 2.0; j ++ ) {\n            glid.y += sgn.y * j;\n            sgn.y *= -1.0;\n            if (pow(max(abs(glid.y - f.y) - 0.5, 0.0), d) > dist){\n                continue;\n            }\n            for(float i = 0.0; i <= 2.0; i ++ ){\n                glid.x += sgn.x * i;\n                sgn.x *= -1.0;\n                vec3 nbd = glid + hash33(n + glid) -0.5;\n                if(length3(nbd - f, d) < dist){\n                    ind = n + glid;\n                    dist = length3(nbd - f, d);\n                }\n            }\n            glid.x = 0.0;\n        }\n        glid.y = 0.0;\n    }\n    return ind;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragCoord_ = fragCoord;\n    vec2 pos = fragCoord.xy/ iResolution.xx;\n    pos *= 10.0;\n    pos += iTime;\n    vec3 v;\n    float d = 4.0 * sin(0.5 * iTime)  + 5.0;\n    if(fragCoord.x < 0.66 * iResolution.x){\n        v = vec3(hash22(voronoi2(pos, d)), 1.0);  //left\n    } else {\n        v = hash33(voronoi3(vec3(pos, 0.5 * iTime), d));   //right\n    }\n    fragColor = vec4(vec3(v), 1.0);\n}","name":"Image","description":"","type":"image"}]}