{"ver":"0.1","info":{"id":"lctBW2","date":"1733512033","viewed":47,"name":"zigzag encoding","username":"bombblob","description":"image encoded in scrolling lines based on https://www.shadertoy.com/view/MsBGRR\n\nencoded using ideas from https://qualiacomputing.com/2015/05/22/how-to-secretly-communicate-with-people-on-lsd/","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["illusion","hiddenimage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Speed of zigzag animation\n// increasing this makes the background image easier to see\nconst float speed = 0.2;\n\n// Mapping function to control the zigzag motion\nfloat map(vec2 p) {\n    float nlines = 10.;\n    return mod(p.y,1./(nlines/2.))*(nlines)-1.;\n\n\treturn sin(atan(p.y, p.x)+length(p)*8.0);\n    return sin(p.y * 10.0) * cos(p.x * 5.0);\n}\n\n// Line mapping function to create the zigzag grid\nfloat lmap(vec2 p) {\n\treturn abs(mod(p.y,0.1)-0.05) + p.x;\n\n    return abs(mod(p.y, 0.1) - 0.05) + sin(p.x * 10.0) * 0.05;\n}\n\n// Anti-aliased line function\nfloat aaline(float x) {\n    return smoothstep(0.0, 0.1, x) * smoothstep(0.5, 0.6, 1.0 - x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv0 = fragCoord.xy / iResolution.xy;\n    vec2 uv = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n\n    // Dynamic zigzag motion\n    float f = map(uv);\n    float l = lmap(uv);\n\n    // this makes scrolling zigzags point in opposite directions\n    // probably this can be done by changing lmap, but idk how :/\n    if (f>0.) {\n        l = lmap(vec2(uv.x,uv.y+0.05));\n    }\n\n    vec3 color = vec3(0.0);\n    float mask = mod(l + iTime * speed * sign(f), 0.05) * 20.0;\n    color += aaline(mask);\n    vec4 tex = texture(iChannel0,uv0);\n    float bgIntensity = 1.;\n    color += bgIntensity*vec3(1.-mask)*tex.rbb; // rbb seems easier to see\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}