{"ver":"0.1","info":{"id":"4tVSzh","date":"1482866749","viewed":325,"name":"SnowFlake","username":"palszasz","description":"A simple (and ugly) procedural snowflake","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["procedural","snowflake"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float SnowFlake(vec2 uv, float r)\n{\n\tuv = mat2(cos(r), -sin(r), sin(r), cos(r)) * (uv * 2.0 - 1.0);\n\tfloat l = length(uv);\n\tif (l > 1.0) return 0.0;\n\tfloat a = atan(uv.y, uv.x) / 3.1415296;\n\ta = fract(a * 3.0);\n\ta = min(a, 1.0 - a) * 2.0;\n\tl *= (1.0 + a);\n\tfloat a1 = pow(a, 2. * l);\n\tfloat b = fract(l * 3.0);\n\tb = min(b, 1.0 - b) * 2.0;\n\treturn smoothstep(0.7, 0.9, b) * smoothstep(0.3, 0.4, a) + smoothstep(0.8, 0.9, a1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float size = min(iResolution.x, iResolution.y);\n\tvec2 uv = (fragCoord - iResolution.xy * 0.5) / size + 0.5;\n\tfloat v = SnowFlake(uv, sin(iTime) * 0.2);\n\tfragColor = vec4(v);\n}","name":"Image","description":"","type":"image"}]}