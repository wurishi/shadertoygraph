{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"music","id":"4dfGzn","filepath":"/media/a/ec8a6ea755d34600547a5353f21f0a453f9f55ff95514383b2d80b8d71283eda.mp3","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//#define IQ_OPTIM\n#define SAMPLES_VIGNETTE\n\n// Iain Melvin 2014\n\n// with code from:\n// dfft from \"kinder crasher\" by iq\n// shadertoy demo shaders by iq\t\n\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\n\t// first texture row is frequency data\n\tfloat fft  = texture( iChannel0, vec2(uv.x,0.25) ).x; \n\t\n    // second texture row is the sound wave\n\tfloat wave = texture( iChannel0, vec2(uv.x,0.75) ).x;\n\t\n    const float n=1024.0; // we don't have 1024 samples, we will pad\n\t\n\t\n\t// i = frequency bin\n\tfloat fi = uv.x*n*0.25;  // 0.25 = focus on lower freqencies\n\tint i=int(fi); //i being non-integer here causes artifacts, expecially without blackman window\n\n#ifdef IQ_OPTIM\n    float wi = float(i)*(2.0*3.1415927/n);  \n    float sii = sin( wi );\n    float coi = cos( wi );\n    float co = 1.0;\n    float si = 0.0;\n#endif\n\t\n    float f=0.0;\n\tfloat acco = 0.0;\n    float acsi = 0.0;\n\t\n\tconst float pi=3.14159;\n\t\n    for( int j=0; j<int(n); j++)\n    {\n\t\tfloat a = float(j)/(n); \n\t\t\n\t\t//512 samples for a size:1024 fft, \n\t\t// we hack the sampling with zero padding (256 either side)\n\t\tfloat as = a;\n\t\tif (as<0.25){\n\t\t  f=0.0;\n\t\t}else if (as>0.75){\n\t\t  f=0.0;\n\t\t}else{\n\t\t  as-=0.25;\n\t\t  as*=2.0;\n\t\t  f = texture( iChannel0, vec2(as,0.75)).x;\n\t\t  f+=-0.5; \n    \t  //f*=2.0;\n\t\t}\n\t\t\n#ifdef SAMPLES_VIGNETTE\n\t\t// fade the edges of the sample window (like blackman window in chrome)\n\t\tfloat w =  0.5*(1.0-cos(pi*(a*2.0)));\n//\t\tfloat w = 1.0-abs(2.0*a - 1.0); //faster, but with artifacts\n\t\tf*=w;\n#endif\n\t\t\t\t\n        \n#ifdef IQ_OPTIM\n        acco += co*f; \n        acsi += si*f; \n\t\tfloat oco = co;\n\t\tco = co*coi -  si*sii;\n\t\tsi = si*coi + oco*sii;\n#else\n\t\tfloat angle = (2.0 * 3.14159 * float(j) * float(i)) / n;\n\t\tacco += cos(angle)*f; \n        acsi += sin(angle)*f; \n\t\t\n#endif\n    }\n\t\n//\tif (i<2) { // always 1.0? why?? not anymore, apparently\n//\t\tacco=0.0; \n//\t\tacsi=0.0; \n//\t}\n\n\t\n\tfloat y = sqrt(acco*acco+acsi*acsi)/2.0;\n\ty = clamp(y,0.0,1.0);\n\t\n    \n\tvec3 col = vec3(0,0,0); // zero\n\t\n\tif (uv.y<0.5){\n  \t  col += vec3(y,y,y); // our dft\n\t}else{\n\t   col += vec3(fft,fft,fft); // chrome orig fft\t\n\t}\n\n    // add orig wave form:\t\n\tcol += 1.0 -  smoothstep( 0.0, 0.01, abs(wave - uv.y) );\n\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldlSWr","date":"1402198227","viewed":763,"name":"dft compare fft","username":"pixelbeast","description":"Comparison between the shadertory fft (above), which comes from Chrome, and an attempt (below) at a Discrete Fourier Transform. Unfortunately we only get 512 samples to work with, and cannot do history smoothing like chrome does.","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fttdftaudio"],"hasliked":0,"parentid":"","parentname":""}}