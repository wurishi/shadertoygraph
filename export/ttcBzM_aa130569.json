{"ver":"0.1","info":{"id":"ttcBzM","date":"1612415338","viewed":532,"name":"4-sample bicubic interpolation","username":"phi16","description":"left: 4-sample (with bilinear sampler) bicubic using *alternating signed texture*\nright: naive 16-sample bicubic\nthis is just an implementation of small idea (may already exist?)","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec4 powers(float t) {\n    return vec4(1, t, t*t, t*t*t);\n}\n\n// from https://en.wikipedia.org/wiki/Bicubic_interpolation#Bicubic_convolution_algorithm\nmat4 m = mat4(\n    0, 2, 0, 0,\n    -1, 0, 1, 0,\n    2, -5, 4, -1,\n    -1, 3, -3, 1\n) / 2.;\n\nvec3 weighted(ivec2 i, vec2 wx, vec2 wy) {\n    vec2 g = vec2(0), w = vec2(0);\n    w.x = wx.x - wx.y;\n    g.x = - wx.y;\n    if((i.x&1) != 0) w.x *= -1., g.x *= -1.;\n    w.y = wy.x - wy.y;\n    g.y = - wy.y;\n    if((i.y&1) != 0) w.y *= -1., g.y *= -1.;\n    return sample0(vec2(i) + g/w) * w.x * w.y;\n}\n\nvec3 map0(vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = uv - i;\n    vec4 mx = m * powers(f.x);\n    vec4 my = m * powers(f.y);\n    vec3 c = vec3(0.);\n    ivec2 j = ivec2(i);\n    ivec2 e = ivec2(-1, 1);\n    c += weighted(j+e.xx, mx.xy, my.xy);\n    c += weighted(j+e.xy, mx.xy, my.zw);\n    c += weighted(j+e.yx, mx.zw, my.xy);\n    c += weighted(j+e.yy, mx.zw, my.zw);\n    return c;\n}\n\nvec3 map1(vec2 uv) {\n    vec2 i = floor(uv);\n    vec2 f = uv - i;\n    vec4 mx = m * powers(f.x);\n    vec4 my = m * powers(f.y);\n    vec3 c = vec3(0.);\n    for(int j=0;j<4;j++) {\n        for(int k=0;k<4;k++) {\n            vec2 p = i + vec2(j,k) - 1.;\n            c += sample1(p) * mx[j] * my[k];\n        }\n    }\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.x;\n    float s = uv.x;\n    if(s > .5) uv.x -= .5;\n\n    uv *= 16.;\n    float t = iTime * 0.03;\n    uv += (vec2(cos(t), sin(t)) + 1.) * 64.;\n    vec3 col = s < .5 ? map0(uv) : map1(uv);\n    float b = min(\n        smoothstep(0.6, 0.65, fract(iTime/6.)),\n        smoothstep(1.0, 0.95, fract(iTime/6.)));\n    col = mix(col, s < .5 ? sample0(uv) : sample1(uv), b);\n    if(abs(s-.5) < 0.002) col = vec3(0.);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 i = floor(fragCoord);\n    vec3 c = sample0(i);\n    ivec2 j = ivec2(i);\n    if((j.x&1) != (j.y&1)) c *= -1.0;\n    fragColor = vec4(c, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define sample0(u) texture(iChannel0, ((u)+.5)/iChannelResolution[0].xy).xyz\n#define sample1(u) texture(iChannel1, ((u)+.5)/iChannelResolution[1].xy).xyz\n","name":"Common","description":"","type":"common"}]}