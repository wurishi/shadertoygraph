{"ver":"0.1","info":{"id":"clByDh","date":"1691691376","viewed":29,"name":"00GraphicsClassLesson01","username":"foodini","description":"GraphicsIntro","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["graphicsintro"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // fragCoord comes in as the x,y index into the pixel array of the screen. In other\n    // words, its scale depends upon the screen resolution. It's most convenient to think\n    // of pixels' locations in terms of their relative positions. This scales the screen\n    // to range from 0.0 to 1.0 in both dimensions.\n    vec2 uv = fragCoord/(iResolution.xy - vec2(1.0, 1.0));\n\n    fragColor.xz = uv;\n\n    // We want 0,0 to be the center of the screen, so we rescale and recenter:\n    uv *= 2.0;\n    uv -= 1.0;\n    \n    // The pixels in the image now go from <-1.0, -1.0> at the bottom left to\n    // <1.0, 1.0> at the top right. This means our pixels are squashed. Going up\n    // by one pixel incrases y by more than going right by one increases x. Rescale\n    // in the y direction to compensate. This means that the bottom left is no\n    // longer <-1.0, -1.0>. It's more like <-1.0, -.65>, though it depends on your screen\n    // resolution.\n    uv.y /= (iResolution.x/iResolution.y);\n    \n    fragColor.rgb = vec3(uv.y, 0.0, uv.x);\n}","name":"Image","description":"","type":"image"}]}