{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"#define PI2 6.28318530718\n#define speed 8.0\n\nvec2 RandomTune(float time)\n{\n    float ts = time*speed;\n    float ti = float(int(ts));\n    float tc = 1.0+float(int(mod(time/12.0,4.0)));\n    \n    float note = float(int(\n        sin(tc*0.25*ti)\n        *2.33+\n        cos(0.33333333333333333333*ti)\n        *3.66\n            ));\n    // Test tone ladder\n    //float note = float(int(ts/8.0));\n    \n    // Filter black keys except one so this is in minor :)\n    float nt = mod(note,12.0);\n    if (nt<3.0)\n      nt -= 1.0;\n    if (mod(nt,2.0)==0.0)\n      return vec2(-100.0);\n    \n    float decay = 1.0-mod(ts,1.0);\n    \n    return vec2(note,decay);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec2 sound1 = RandomTune(iTime);\n    vec2 sound2 = RandomTune(iTime-12.375);\n    vec2 sound3 = RandomTune(iTime*0.5);\n    vec2 sound4 = RandomTune(iTime*0.25);\n    sound3.x -= 12.0;\n    sound4.x -= 24.0;\n    \n    uv.x = uv.x*36.0-28.0;\n    \n\tfragColor = vec4(\n        clamp(1.0-distance(uv,sound1),0.0,1.0),\n        clamp(1.0-distance(uv,sound2),0.0,1.0),\n        clamp(1.0-distance(uv,sound3),0.0,1.0)+\n        clamp(1.0-distance(uv,sound4),0.0,1.0),1.0);\n}","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"#define PI2 6.28318530718\n#define speed 8.0\n\nvec2 RandomTune(float time)\n{\n    float ts = time*speed;\n    float ti = float(int(ts));\n    float tc = 1.0+float(int(mod(time/12.0,4.0)));\n    \n    float note = float(int(\n        sin(tc*0.25*ti)\n        *2.33+\n        cos(0.33333333333333333333*ti)\n        *3.66\n            ));\n    \n    // Test tone ladder\n    //float note = float(int(ts/8.0));\n    \n    // Filter black keys except one so this is in minor :)\n    float nt = mod(note,12.0);\n    if (nt<3.0)\n      nt -= 1.0;\n    if (mod(nt,2.0)==0.0)\n      return vec2(0.0);\n    \n        \n    float freq = 440.0*pow(2.0,note/12.0);\n    float decay = 1.0-mod(ts,1.0);\n       \n    float wav = sin(freq*PI2*time+  // base freq\n                    PI2*sin(time/PI2) //FM modulation amount\n                    *sin(3.0*freq*PI2*time)// FM MOdulation\n                   )*decay; //Fade nod\n    return vec2(wav*sin(time),wav*cos(time));\n}\n\nvec2 mainSound( in int samp,float time)\n{\n  //time += 8.0;\n  return 0.33*(\n      RandomTune(time)+ \n      RandomTune(time-12.375).yx+\n      RandomTune(time*0.5).xx+\n      RandomTune(time*0.25).yy);\n}","name":"Sound","description":"","type":"sound"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":true,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdfXWf","date":"1407187231","viewed":417,"name":"Classical","username":"Andre","description":"I couldn't stop so here is another piece of procedural music.","likes":9,"published":1,"flags":8,"usePreview":0,"tags":["procedural","music","fmsynth"],"hasliked":0,"parentid":"","parentname":""}}