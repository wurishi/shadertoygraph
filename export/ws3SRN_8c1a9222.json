{"ver":"0.1","info":{"id":"ws3SRN","date":"1571540813","viewed":340,"name":"webcam rolling shutter","username":"matthen","description":"simulate a slow rolling shutter on the webcam input","likes":5,"published":1,"flags":34,"usePreview":0,"tags":["webcam","rollingshutter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n    \n\tvec3 col = texture(iChannel1, p).rgb;\n\t\n    float scanLine = scanLine(iTime);\n    col = mix(col, vec3(1.), smoothstep(0.04, 0., abs(p.y - scanLine)));\n\t\n\t\n    fragColor = vec4(col, 3);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = fragCoord.xy / iResolution.xy;\n\tvec3 col;    \n    \n    if (abs(p.y - scanLine(iTime)) > 0.02) {\n     \tcol = texture(iChannel1, p).rgb;\n        \n    } else {\n        col = texture(iChannel0, p).rgb;\n    }\n\n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float scanLine(float time) {\n    return fract(-0.2 * time);\n}","name":"Common","description":"","type":"common"}]}