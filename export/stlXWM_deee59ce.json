{"ver":"0.1","info":{"id":"stlXWM","date":"1625851189","viewed":133,"name":"camouflage depth","username":"Taron","description":"Unintentional ...but fun and oddly mesmerizing.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractalnoise","camouflage"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash12(vec2 p) {\n    float h = dot(p,vec2(127.1,311.7)); \n    return fract(sin(h)*43758.5453123);\n}\nfloat noise(in vec3 p) {\n    vec3 i = floor(p);\n    vec3 f = fract(p);  \n    vec3 u = smoothstep(0.,1.,f);\n    \n    vec2 ii = i.xy + i.z * vec2(5.0);\n    float a = hash12( ii + vec2(0.0,0.0) );\n    float b = hash12( ii + vec2(1.0,0.0) );    \n    float c = hash12( ii + vec2(0.0,1.0) );\n    float d = hash12( ii + vec2(1.0,1.0) ); \n    float v1 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n    \n    ii += vec2(5.0);\n    a = hash12( ii + vec2(0.0,0.0) );\n    b = hash12( ii + vec2(1.0,0.0) );    \n    c = hash12( ii + vec2(0.0,1.0) );\n    d = hash12( ii + vec2(1.0,1.0) );\n    float v2 = mix(mix(a,b,u.x), mix(c,d,u.x), u.y);\n        \n    return max(mix(v1,v2,u.z),0.0);\n}\n\nfloat turb(vec3 p, float noiseThreshold, float noiseSoftness, int oct)\n{\n    float r = 0.0,\n          w = 1.0, \n          s = 1.0,\n          d = 0.0;\n    for (int i=0; i<oct; i++)\n    {\n        r += w * noise(p);\n        w *= 0.673;\n        p *= 1.877;\n        d +=w;\n    }\n    r = abs(-1.+2.*r/d);\n    return smoothstep(noiseThreshold,noiseSoftness+noiseThreshold,r);\n}\n\nfloat march(vec3 cp, vec3 cd){\n\tfloat dO=1.;\n    \n    for(int i=0; i<20; i++) {\n    \tvec3 p = cp + cd*dO;\n        float dS = turb(p, .25,1., 3);\n        dO += .5;\n        if(dO>100.|| abs(dS)<0.0001){\n            break;\n        }\n    }\n    \n    return dO*.05;\n}\n\nmat2 Rot(float a) {\n    float s=sin(a), c=cos(a);\n    return mat2(c, -s, s, c);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fC )\n{\n    vec2 uv = (fC.xy - iResolution.xy*.5)/iResolution.y;\n    vec2 ms = iMouse.xy/iResolution.xy * 6.28;\n\n    vec3 camera = vec3(0.);\n    vec3 target = vec3(vec2(sin(iTime*.25),cos(iTime*.5))+uv,1.);\n    target.yz *= Rot(-ms.y);\n    target.xz *= Rot(-ms.x);\n     \n    vec3 cdir = normalize(camera-target);\n   \n    vec3 p = camera-vec3(0.,0.,iTime*.25);\n    \n    vec3 col = mix(vec3(0.05,0.02,0.01),vec3(0.65,0.76,0.45),march(p,cdir));\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}