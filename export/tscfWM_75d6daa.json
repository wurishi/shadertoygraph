{"ver":"0.1","info":{"id":"tscfWM","date":"1605220468","viewed":155,"name":"Better image destroyer","username":"TrevallionJ","description":"Able to both pixilate and change color depth of an image or video.\ncolorDepth is done so a value of 8.0 produces 8 possdible colors for each band of rgb so 8^3=512 different colors. :)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["imagemanipulation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Change these to change results\n    vec2 size = vec2(256, 256);\n    float colorDepth = 8.0;\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Maps UV onto grid of variable size to pixilate the image\n    uv = round(uv*size)/size;\n\n\n    // Maps color onto the specified color depth\n    vec4 col = vec4(round(texture(iChannel0, uv)[0] * colorDepth) / colorDepth, \n                    round(texture(iChannel0, uv)[1] * colorDepth) / colorDepth,\n                    round(texture(iChannel0, uv)[2] * colorDepth) / colorDepth, 1.0);\n    \n    // Output to screen\n    fragColor = vec4(col);\n}","name":"Image","description":"","type":"image"}]}