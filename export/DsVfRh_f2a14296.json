{"ver":"0.1","info":{"id":"DsVfRh","date":"1697913022","viewed":48,"name":"Universe Circle","username":"TheCatIs","description":"Use mouse to drag the circle of orbs around! Use alt key to reset.\nHold up/down arrows to change the circle's radius.\nHold left/right arrows to modify speed.\nPress A and S to change colors (Epilepsy Warning for Some!!), Q and W for rotating ring count","likes":1,"published":1,"flags":48,"usePreview":0,"tags":["2d","mouse","simulation","circle","star","galaxy","stars","ball","dots","universe","visual","input","userinput","mousecontrols"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nIf you're reading this, note that I am not a professional code maker and I don't seek to make the code\nthat readable and I don't have the knowledge to optimize it if possible. I'm just doing this for fun, so I'm\nnot taking this seriously by making readable or optimized code. I will make comments here and there, but they\nwon't be too advanced.\n*/\n\n#define pi 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n\n\n//The image shader processes the grid of .xy colors from Buffer A and makes the respective dots, plus other\n//stuff like the circle itself or the colors\n\nconst float skip = 8.0;\n//Higher values reduce the amount of dots for performance, change ALSO in Buffer A to match this value\n//For some reason, some values are bugged, advised values: 4, 5, and 8\n\nconst float mixer = 0.08;\n//Mixes between adding together the color of each dot and displaying the brighter color, high amounts of dots\n//add together too much and overbrighten, hence this variable\n//(Colors are also less bright for the adding side to not overshadow the individual dots themselves)\n\n //This HSV function isn't mine, found it at \n   //https://gist.github.com/983/e170a24ae8eba2cd174f\n   vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n//Sine functions with some helpful additions\nfloat modSin(float f) {\nreturn cos(f*pi*2.0)*0.5 + 0.5;\n}\nfloat modSin(float f, float m) {\nreturn cos(f*pi*2.0 / m)*0.5 + 0.5;\n}\nfloat sSin(float f, float e /*exp*/) {\nreturn pow( abs(sin(f)) , e) * sign(sin(f));\n}\nfloat maxSin(float f) {\nreturn max(sin (f), 0.0);\n}\n\n// float sSin(float f, int t /*type*/, float e /*exp*/) {\n// return pow(sin(f), e) * sign(sign(f));\n// }\n\n\n//This function handles the colors, defaults to blue at 0 and other values, converts from blue to other\n//colors for chosen inputs\nvoid altern(inout vec3 col, int choice, vec2 uv, vec2 m) {\n\nif(choice == 1) {\ncol.x = col.z; \ncol.y = pow(col.z,3.0)*3.0;\ncol.z = pow(col.z,3.0)*5.0;\nreturn;\n}\n\nif(choice == 2) {\ncol.x = col.z; \ncol.y = pow(col.z,2.0)*0.4;\ncol.z = pow(col.z,3.0)*0.08;\nreturn;\n}\n\nif(choice == 3) {\ncol.x = 1.0 - col.z; \ncol.y = 0.0;\ncol.z = 0.0;\nreturn;\n}\n\nif(choice == 4) {\ncol.x = 1.0 - pow(2.0 * col.z - 1.0, 2.0); \ncol.y = 0.0;\ncol.z = 0.0;\nreturn;\n}\n\nif(choice == 5) {\ncol.x = mod(col.z * 3.0, 1.0); \ncol.y = 0.0;\ncol.z = 0.0;\nreturn;\n}\n\nif(choice == 6) {\ncol.x = mod(col.z * 3.0, 3.0)/3.0 * sin(uv.x * 9.0 + iTime/1.0);\ncol.y = col.x / 1.2;\ncol.y += col.z * uv.y * ( 1.0 -  sin(uv.x * 9.0 + iTime/1.0) )/1.2;\ncol.z = col.z * uv.y * ( 1.0 -  sin(uv.x * 9.0 + iTime/1.0) );\nreturn;\n}\n\nif(choice == 7) {\ncol.x = 0.0;\ncol.y = col.z * sin(uv.x * 19.0 + iTime*1.5)/1.2;\ncol.z = col.z * sin(uv.y * 19.0 + iTime*1.5)/1.2;\nreturn;\n}\n\nif(choice == 8) {\nvec3 color = hsv2rgb( vec3(pow(col.z,0.07) * 2.0 + uv.x * 7.0, 1.0, col.z * 2.0) );\n\ncolor.z = min(1.0, color.z);\n\ncol = color;\n\nreturn;\n}\n\nif(choice == 9) {\nvec3 color = ( vec3(pow(col.z + sin(iTime/2.0)/7.0,0.07) * 5.0 + uv.x * 2.0, 1.0, col.z * 200.0) );\n\ncolor.x += iTime/3.0;\n\ncolor.x %= 1.0;\ncolor.z = min(1.0, color.z);\n\ncol = hsv2rgb(color);\n\nreturn;\n}\n\nif(choice == 10) {\nvec3 color = hsv2rgb( vec3(pow(col.z + sin(iTime),0.07) * 5.0 + uv.x * 2.0, 1.0 + sin(iTime*3.0), col.z * 200.0) );\n\ncolor.x %= 1.0;\ncolor.z = min(1.0, color.z);\n\ncol = color;\n\nreturn;\n}\n\nif(choice == 11) {\nfloat colorFloat = pow(col.z,0.2)*4.0;\ncolorFloat = abs(sin(colorFloat*4.0));\n\ncol = vec2(colorFloat,colorFloat).yyy;\n\nreturn;\n}\n\nif(choice == 12) {\n\nfloat c = col.z;\n\nfloat f = (uv.x)*pi*2.0;\ncol.x = modSin(f) * (sin(iTime*3.0 + f )) * c;\n\nf = (uv.y)*pi*2.0;\ncol.y = modSin(f) * (sin(iTime*2.3 + f )) * c;\n\nf = (uv.y + uv.x)*pi*2.0;\ncol.z = modSin(f) * (sin(iTime*1.2 + f )) * c;\n\ncol.xyz *= 2.0 + col.z/1.0;\n\nreturn;\n}\n\nif(choice == 13) {\n\nfloat c = col.z;\n\nfloat f = (uv.x)*pi*2.0;\ncol.x = modSin(f) * (sin(iTime*3.0 + f )) * c;\n\nf = (uv.y)*pi*2.0;\ncol.y = modSin(f) * (sin(iTime*2.3 + f )) * c;\n\nf = (uv.y + uv.x)*pi*2.0;\ncol.z = modSin(f) * (sin(iTime*1.2 + f )) * c;\n\nf = -(uv.y + uv.x)*pi*4.0;\ncol.xyz += modSin(f) * (sin(iTime*5.2 + f )) * c + (sin(length(uv - m) * 65.0)) * c;\n\ncol.xyz *= 2.0 + col.z/1.0;\n\nreturn;\n}\n\nif(choice == 14) {\n\nfloat c = col.z;\n\nfloat f = -(uv.y + uv.x)*pi*4.0;\n\ncol.xyz += c/12.0 + uv.xxy - uv.yxx;\n\nf = -(uv.y + uv.x)*pi*4.0;\ncol.xyz += modSin(f) * (sin(iTime*5.2 + f )) * c / 9.0;\n\ncol.xyz *= 2.0 + col.z/1.0;\n\nreturn;\n}\n\nif(choice == 15) {\n\nfloat c1 = sin(length(uv - m)*54.0 - iTime * 6.0 + 3.0*atan(uv.x - m.x, uv.y - m.y));\n\nfloat c2 = col.z;\n\nfloat c = c2 + sin(c1*6.0);\n\ncol -= col;\n\ncol.xyz += c/12.0 + uv.xxy - uv.yxx;\n\ncol.x = max(0.0,col.x);\n\ncol.xy += c2 * vec2(2.0,1.0);\n\nreturn;\n}\n\n}\n\nvoid arrow(vec2 coord, vec2 uv, inout float col, float side) {\n\nfloat diamond = abs(uv.x - coord.x) + abs(uv.y - coord.y);\n\nif(diamond > 0.02 && diamond < 0.03 && uv.x * side > coord.x * side) {\ncol = 1.0;\n}\n\n}\n//Used for speed arrow indicators\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\nint colorVar = int(texture( iChannel1 , vec2(0,0) ).y );\n//Epilepsy warning for 9 through 11\n\nfloat rad = texture( iChannel1 , vec2(0,0) ).w; //Gets the radius for the circle displat\n\nvec2 uv = fragCoord/iResolution.xy;\nuv.y *= iResolution.y/iResolution.x;\n//Gets pxiel coords\n\nvec2 m = iMouse.xy/iResolution.xy;\nm.y *= iResolution.y/iResolution.x;\n//Gets mouse (for circle center)\n\nvec3 col = vec3(0.0, 0.0, 0.0); //Gets a blank color variable\n    \nfloat Z2 = 0.0; //The variable for adding brightnesses\n    \nfor(float i = 0.0; i < 3600.0; i += skip) {\n//Same grid iteration and skip as Buffer A, but this time reading for coordinates to display colors\n\nfloat X = 5.0 + mod(i,80.0)*10.0;\nfloat Y = 5.0 + floor(i/80.0)*10.0;\n//Gets grid positions\n\nX /= iResolution.x;\nY /= iResolution.y;\n//Normalizes to (0,0) (1,1) texture size\n\nvec2 colTest = texture( iChannel0 , vec2(X,Y) ).xy/100.0;\n//Gets the position, divides by 100 since the values in Buffer A are sized up by 100x for ease of use\n\nfloat Z = 0.0; //Initializes the base color value\n\nif(distance(colTest,uv) < 0.06) {\n\n//Uses distance - limited to 0.06 radius to prevent individual points from being washed out by others' light\n//from far away\n\nZ = 0.00115/(0.0009 + distance(uv , colTest))/2.0;\n//Reworks inverse distance function, using it to make brighter colors closer to each dot center\n//Rediced to much smaller values since there are so many dots and since the RGB ranges from 0 - 1\n//The adding part for the divisor is to prevent the function from shooting to infinity and being undef. at 0\n\nZ = pow(Z,1.2)*5.0;\n//Uses the power function to sharpen the value obtained by the distance, and then multiplies by 5\n\nZ = max(Z,0.0); //This is where the mixer and Z2 variables come into play\n//Z simply gets the brightest value for each pixel from the glow, but Z2 adds up to make more of a glow effect\n\nZ2 += Z * mixer;\n\ncol.z = max(Z,col.z) * (1.0-mixer);\n\n}\n\n}\n\ncol.z += min(Z2,0.7);\n\n//After the loop, adds Z2 but caps it to preventing its glow from being overly bright or intrustive\n\nfloat d = distance(uv,m); //This section does the circle, getting the distance and then finding the distance\n//between the obtained value and a certain desired radius (which in this case fits the circle radius)\n\ncol.z += 0.002/(0.001 + abs(d - 0.2*rad));\n\nfloat rings = texture( iChannel1 , vec2(0,0) ).z;\n\nfloat a = atan(uv.x - m.x,uv.y - m.y) * rings - iTime * 4.0;\na = 0.005 * max(sin(a),0.0) / (0.005 + abs(d - 0.2 * rad));\n//Then, adds the 5 rotating patterns on the side\n\ncol.z += a;\n\n\n//col = texture( iChannel0 , uv ).xyz/100.0;\n//  ^^^ Displays the actual grid of coordinates, for debugging\n\naltern(col, colorVar, uv, m); //Controls the colors\n\nfor(float i = 0.0; i < 0.9 - texture( iChannel1 , uv ).x; i += 0.27)\narrow(vec2(0.04 + i/9.0, 0.52), uv, col.x, -1.0);\n\nfor(float i = 0.0; i < texture( iChannel1 , uv ).x - 1.1; i += 0.47)\narrow(vec2(0.01 + i/18.0, 0.52), uv, col.z, 1.0);\n\n// ^^^ Controls the speed arrows, uses a loop that makes more arrows for higher speeds\n\nfragColor = vec4(col,1.0);\n\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nIf you're reading this, note that I am not a professional code maker and I don't seek to make the code\nthat readable and I don't have the knowledge to optimize it if possible. I'm just doing this for fun, so I'm\nnot taking this seriously by making readable or optimized code. I will make comments here and there, but they\nwon't be too advanced.\n*/\n\n\n/*\nThis buffer creates a grid of colors whose .x and .y value represent a dot's position, and whose .z and .w\nvalues represent a dot's velocity. Each grid part is read and displayed as a dot in the Image portion.\n*/\n\n\n#define pi 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679\n#define e 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178\n\n#define RAN1 106.063013063\n#define RAN2 1.38675497\n#define RAN3 1.47437483679\n\n#define RAN2M3 2.04459663256\n#define RAN2A3 2.86112980679\n\nconst bool centerBorn = false; //Particles will return to center\nconst float radBorn = 0.0; //Particles will return inside the circle instead of bouncing, 0 does nothing\n\n//const float radBorn = -rad;\n//for trapping paricles at the edge (rad = radius, found further down)\n\nconst float rotateVal = 30.0  * (pi/180.0);\n//The velocity of each dot rotates a bit after each bounce, this variable controls this\n\nconst float skip = 8.0;\n//Higher values reduce the amount of dots for performance, change ALSO in Image shader to match this value\n//For some reason, some values are bugged, advised values: 4, 5, and 8\n\nfloat ranGen (float c)   {\n//Pseudo random number generator\nreturn mod(RAN1 * pow(abs(c+RAN2A3) + 20.01,1.0)-RAN2M3,1.0);\n}\n\nvec2 rotate(vec2 point, float theta) {\n//Rotates a vec2, intended for velocities or directions since there is no origin point support\nfloat xVar = point.x * cos(-theta) - point.y * sin(-theta);\nfloat yVar = point.x * sin(-theta) + point.y * cos(-theta);\nreturn vec2(xVar,yVar);\n}\n\nbool between (vec2 coord, vec2 c1, vec2 c2) {\n//Returns true if a point is within a rectangle constructed with two points on opposite sides\n\nif(coord.x < c2.x && coord.x > c1.x && coord.y < c2.y && coord.y > c1.y) {\nreturn true;\n}\nelse {\nreturn false;\n}\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n//   ---           --- \n//   ---   START   ---\n//   ---           ---   \n\nfloat rad = texture( iChannel2 , vec2(0.5,0.5) ).w;  //The radius variable from Buffer B\n\nfloat speed = texture( iChannel2 , vec2(0.5,0.5) ).x; //The speed variable from Buffer B\n\nint G = (int(texelFetch(iChannel1, ivec2(18, 1), 0).x)); //The variable for the reset key (alt)\n\nvec2 o = vec2(50.0,28.125); //The center of the coordinates, 100x56.25\n\nvec2 m = iMouse.xy/iResolution.xy*100.0;\nm.y *= iResolution.y/iResolution.x;\n//The mouse position variable\n\nfloat frame = float(iFrame)/70.0;\n//The variable that controls time, uses iFrame instead of iTime to prevent lag or other time-affecting\n//factors to alter results\n\nvec2 uv = fragCoord; //Main pixel variable\n\nvec2 uv2 = uv/iResolution.xy; //Pixel variable for reading textures\n\nuv.y *= iResolution.y/iResolution.x; //Reduces height to normal\n\nvec4 col = texture( iChannel0 , uv2 ); //Gets last frame's colors\n\nif(iFrame < 2 || G == 1) {\ncol.xy = m; //Resets using alt or the |< button\n}\n\nfor(float i = 0.0; i < 3600.0; i += skip) {\n//Iterates through each grid square, the skip variable skips some values of i and thus some grid squares\n\nfloat X = mod(i,80.0); //Moves right constantly and resets on a new row\nfloat Y = floor(i/80.0)*10.0; //Uses a floor function to move down occasionally, making new rows\n\nif(between (uv,vec2(X*10.0, 440.0 - Y),vec2(10.0 + X*10.0,450.0 - Y)) ) {\n//Uses the between function for each grid square\n\nif(iFrame < 2 || G == 1) {\n//Another reset, initializes velocities\n\ncol.z = (X-40.0)     /35.0;\ncol.w = (Y/10.0-30.0)/35.0;\n\nif(col.z == 0.0) {\ncol.z = sin(i/27.1241)/3.50;\n}\nif(col.w == 0.0) {\ncol.w = cos(i/27.1241)/3.50;\n}\n\nif(col.z == 0.0 && col.w == 0.0) {\ncol.z = 0.0;\ncol.w = -100.0;\n}\n\ncol.w /= 6.0;\ncol.z /= 6.0;\n\ncol.w += (ranGen(X*4.0 + i*1.24) - 0.5) * 0.5;\ncol.z += (ranGen(Y*4.12 + X*4.1 + i*2.84) - 0.5) * 0.5;\n\nif(col.z == 0.0 && col.w == 0.0) {\ncol.x = 1000.0;\ncol.y = 1000.0;\n}\n\n}\n\nif(length(col.zw) > 0.5) {\ncol.zw /= length(col.zw)/0.5;\n//Caps out velocity\n}\n\ncol.xy += col.zw * speed;\n//Moves each dot by its velocity times the speed\n\nfloat dis = distance(m , col.xy); //Gets the distance between the dot and the mouse \n\nfloat COUNT = 15.0;\n//Makes a maximum loop count just in case something goes terribly wrong and can't be corrected by the loop\n\nif(dis >= 20.0 * rad) {\n//If the distance exceeds the circle radius, point the velocity at the circle center and adjust from there\n\ncol.zw = length(col.zw) * (-(col.xy - m/2.0) + m/2.0)/dis;\n\nwhile(dis >= 20.0 * rad && COUNT > 0.0) {\ndis = distance(m , col.xy); //Refreshes the distance\n\nCOUNT -= 1.0;\n\nif(centerBorn) {\ncol.xy = m; //Returns the dots to the center if centerBorn is true\n}\nelse if(radBorn != 0.0) {\ncol.xy += col.zw; //Pulls the dots back in\n\ncol.xy = (col.xy - m)/dis*20.0*radBorn + m; //Instantly transports the dots inside\n\n//Returns the dots somewhere in the circle depending on the radBorn variable\n}\nelse {  //If neither radBorn or centerBorn, do this\ncol.xy += col.zw; //Pulls the dots back inside\n\ncol.xy = (col.xy - m)/dis*20.0*rad + m; //Insteadly pulls them into the circle\n}\n\n}\n\ncol.zw = rotate(col.zw, rotateVal/2.0 - rotateVal*ranGen(frame + m.x - m.y + i + col.x*10.0 + col.y + col.w - col.z + sin(col.x*RAN2)));\n//After the bounce or return inside, rotates the velocity a bit by a random value to prevent repeating paths\n\n}\n\n}\n\n}\n\nfragColor = vec4(col);\n\n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nIf you're reading this, note that I am not a professional code maker and I don't seek to make the code\nthat readable and I don't have the knowledge to optimize it if possible. I'm just doing this for fun, so I'm\nnot taking this seriously by making readable or optimized code. I will make comments here and there, but they\nwon't be too advanced.\n*/\n\n\n//This buffer aminly collects inputs and stores variables from previois frames for imput such as changing\n//speed or radius\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nvec2 uv = fragCoord/iResolution.xy;\nuv.y *= iResolution.y/iResolution.x; //Sets the uv and un-squiehses the y - not useful yet but may be\n//if more vairables are needed and stored in a grid like Buffer A\n\nvec4 col = texture( iChannel0 , uv ); //Gets the last frame's results\n\nint G = (int(texelFetch(iChannel1, ivec2(18, 1), 0).x)); //Checks for the alt key\n\nint up = (int(texelFetch(iChannel1, ivec2(38, 0), 0).x));\nint down = (int(texelFetch(iChannel1, ivec2(40, 0), 0).x));\n//Checks for the up/down arrow keys\n\nif(iFrame < 2 || G == 1){\ncol = vec4(1.0,0.0,5.0,1.0); // |< or alt reset\n}\n\nif(up == 1) {\ncol.w += 0.03; //Increases radius if up arrow is held\n}\nelse if (down == 1) {\ncol.w -= 0.03; //Decreases radius if down arrow is held\n}\n\ncol.w = max(0.08,col.w); //Makes radius at a minimum bottom value\n\nint left = (int(texelFetch(iChannel1, ivec2(37, 0), 0).x));\nint right = (int(texelFetch(iChannel1, ivec2(39, 0), 0).x));\n//Gets the left and right arrows\n\nif(right == 1) {\ncol.x += 0.03; //Increases speed if right arrow is held\n}\nelse if (left == 1) {\ncol.x -= 0.03; //Decreases speed if left arrow is held\n}\n\ncol.x = max(0.01, col.x); //Sets the speed to a minimum floor value\n\nint s = (int(texelFetch(iChannel1, ivec2(65, 1), 0).x));\nint a = (int(texelFetch(iChannel1, ivec2(83, 1), 0).x));\n//Gets a and s keys\n\nif(a == 1){\ncol.y += 1.0;\n}\nelse if(s == 1){\ncol.y -= 1.0;\n}\n//For color type\n\nint q = (int(texelFetch(iChannel1, ivec2(81, 1), 0).x));\nint w = (int(texelFetch(iChannel1, ivec2(87, 1), 0).x));\n//Gets q and w keys\n\nif(q == 1){\ncol.z += 1.0;\n}\nelse if(w == 1){\ncol.z += -1.0;\n}\n//For ring count\n\nfragColor = col;\n}","name":"Buffer B","description":"","type":"buffer"}]}