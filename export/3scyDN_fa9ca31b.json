{"ver":"0.1","info":{"id":"3scyDN","date":"1600959181","viewed":101,"name":"Barkasiks Fire","username":"Barkasik","description":"Wanted to make an effect of something like fire in a glass tube.\n\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fire"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Author @patriciogv - 2015\n// http://patriciogonzalezvivo.com\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform vec2 u_resolution;\nuniform vec2 u_mouse;\nuniform float u_time;\n\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 20\nfloat fbm (in vec2 st) {\n    // Initial values\n    float value = 0.0;\n    float amplitude = .5;\n    float frequency = 0.;\n    //\n    // Loop of octaves\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitude * noise(st);\n        st *= 1.8;\n        amplitude *= .5;\n    }\n    return value;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 st = uv * 10.0;\n    \n    vec2 q = vec2(0.0);\n    q.x = fbm(st + 0.1);\n    q.y = fbm(st + 1.0);\n    \n\tfloat mouseXPos = (iMouse.x / iResolution.x);\n    \n\tvec2 r = vec2(0.);\n    r.x = fbm(st + 1.0*q + vec2(0.0, -3.0*iTime));\n    r.y = fbm(st + 3.0*q + vec2(0.0, -1.5*iTime));\n    \n    float f = fbm(st + r + q - vec2(iTime * 2.0, 0.0) + fbm(st + r + fbm(st + r - vec2(iTime * 3.0, 0.0))));\n    \n    \n    float l = distance(uv.y, 0.5);\n    \n    vec3 bg = vec3(0.0);\n    //vec3 color = vec3(f, f, f);\n    vec3 color = vec3(f, f * 0.8, f * 0.5);\n    \n    vec3 result = smoothstep(0.0, 2.0, vec3(1.0 - uv.x + mouseXPos * mouseXPos * 2.0) * color * color * 2.0);\n    \n    \n    vec3 foreground = vec3(1.0) * l*l*l * 8.0;\n    \n    result += foreground;\n    \n    // Output to screen\n    fragColor = vec4(result, 1.0);\n}","name":"Image","description":"","type":"image"}]}