{"ver":"0.1","info":{"id":"4dXyDM","date":"1488381575","viewed":166,"name":"GaussBlurStudy 2Path","username":"makasone","description":"GaussBlurStudy 2Path　１パスで計算する場合と比べて２重のforループがなくなっている。処理も高速化できている。","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["gaussianblur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//フィルタを適用する範囲　値が大きいほどボケるが、計算時間が大きくなる\n//1の時、元の画像と同じ　GSは7だがちょっと計算のやり方が違う\nconst int   c_samplesX    = 17; // must be odd\nconst float c_textureSize = 1960.0f;\n\nconst int   c_halfSamplesX = c_samplesX / 2;\nconst float c_pixelSize = (1.0 / c_textureSize);\n\nfloat c_sigmaX = 5.0f;\t//ガウス関数がどれくらい平べったいか、のパラメータ　幅の広さを示す\n\n//ガウス関数\nfloat Gaussian (float sigma, float x)\n{\n    return exp(-(x*x) / (2.0 * sigma*sigma));\n}\n\n//x軸方向のフィルタ処理\nvec3 BlurredPixelXaxis (in vec2 uv)\n{\n    float weightSum = 0.0;\t\t//重み係数の総和\n    vec3 ret = vec3(0);\t\t\t//ピクセルの色の総和\n    \n    //フィルタ処理　ある範囲のピクセルを重みを付けて足し合わせる        \n    for (int ix = 0; ix < c_samplesX; ++ix)\n    {\n        float deltaX = float(ix - c_halfSamplesX);\n        float fx = Gaussian (c_sigmaX, deltaX);\t//横方向の重み\n        float offsetx = deltaX * c_pixelSize;\t\t\t\t//足し合わせるピクセルのx座標\n            \n        ret += texture(iChannel1, uv + vec2(offsetx, 0)).rgb * fx;\t\t\t//足し合わせるピクセルの色に、重みを書けた値を足しこむ\n        weightSum += fx;            \t\t\t\t\t\t\t\t\t\t//重み係数の総和\n    }\n    \n    return ret / weightSum;\t\t//ピクセルの色の総和を重みの総和で割り算し、最終的な色を求める\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    fragColor = vec4(BlurredPixelXaxis(uv), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//ここでの計算結果はBufferAに格納される　BufferAは下のChannelから設定・確認できる Imageでここでの計算結果を参照している\n\n//フィルタを適用する範囲　値が大きいほどボケるが、計算時間が大きくなる\n//1の時、元の画像と同じ　GSは7だがちょっと計算のやり方が違う\nconst int   c_samplesY    = 17; // must be odd\nconst float c_textureSize = 1960.0f;\n\nconst int   c_halfSamplesY = c_samplesY / 2;\nconst float c_pixelSize = (1.0 / c_textureSize);\nfloat c_sigmaY = 5.0f;\t//この値が大きいほどボケる　範囲が広くないとあまり意味はない？  \n\n//ガウス関数\nfloat Gaussian (float sigma, float x)\n{\n    return exp(-(x*x) / (2.0 * sigma*sigma));\n}\n\n//y軸方向のフィルタ処理\nvec3 BlurredPixelYaxis (in vec2 uv)\n{\n    float weightSum = 0.0;\t//重み係数の総和\n    vec3 ret = vec3(0);\t\t//ピクセルの色の総和\n    \n    //フィルタ処理　ある範囲のピクセルを重みを付けて足し合わせる\n    for (int iy = 0; iy < c_samplesY; ++iy)\n    {\n        float deltaY = float(iy - c_halfSamplesY);\n        float fy = Gaussian (c_sigmaY, deltaY);\t\t\t//縦方向の重み\n        float offsety = deltaY * c_pixelSize;\t\t\t//足し合わせるピクセルのy座標\n            \n        ret += texture(iChannel0, uv + vec2(0, offsety)).rgb * fy;\t\t\t//足し合わせるピクセルの色に、重みを書けた値を足しこむ\n\t\tweightSum += fy;            \t\t\t\t\t\t\t\t\t\t//重み係数の総和\n    }\n    \n    return ret / weightSum;\t\t//ピクセルの色の総和を重みの総和で割り算し、最終的な色を求める\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * vec2(1,-1);\n\tfragColor = vec4(BlurredPixelYaxis(uv), 1.0);\n}","name":"Buf A","description":"","type":"buffer"}]}