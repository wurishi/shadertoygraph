{"ver":"0.1","info":{"id":"mlVfzD","date":"1701911465","viewed":36,"name":"Cellular Automata Field Improved","username":"26apastor","description":"Now with positively and negatively \"charged\" particles!\nI'm still trying to implement particle velocity with cellular automata but I still can't figure out the calculations for incoming velocity.\nSome particles continue to cancel each-other out at times.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["simulation","automata","cellular","physics","continuous","artificial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).z);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n\tvec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x); \n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n\tvec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\tvec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float noise_base = 0.015; \nconst float mouse_radius = 25.0;\nconst float noise_radius = 100.0;\nconst int kernel_radius = 3;\n\nfloat calculateStateComponent(float v, int i) {\n    if (i == 0)\n        return 1.0 - v;\n    if (i == int(sign(v)))\n        return 0.0;\n    if (v == 0.0) \n        return 0.0;\n    return v;\n}\n\nfloat calculateVelComponent(float m1, float m2, float v) {\n    if (m2 == 0.0) {\n        return 0.0;\n    }\n    return v * m2 * m2 / m1;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 currentCell = texture(iChannel0, uv).xyz;\n    currentCell.xy *= vec2(kernel_radius);\n    float sumState = 0.0, sumXVel = 0.0, sumYVel = 0.0;\n    for(int i = -kernel_radius; i <= kernel_radius; i++)\n    for(int j = -kernel_radius; j <= kernel_radius; j++) {\n        float dist = (sqrt(float(i * i + j * j)) + 0.0001);\n        vec2 offset = vec2(i, j) / iResolution.xy;\t\t\n        vec3 cell = texture(iChannel0, mod(uv + offset, 1.0)).xyz;\n        sumState += calculateStateComponent(cell.x, i) * calculateStateComponent(cell.y, j) * cell.z;\n        if (i == 0 && j == 0) continue; \n        sumXVel  += -calculateVelComponent(currentCell.z, cell.z, cell.x) * dist;\n        sumYVel  += -calculateVelComponent(currentCell.z, cell.z, cell.y) * dist;\n    }\n    \n    vec4 color = vec4(clamp(sumXVel, -1.0, 1.0), clamp(sumYVel, -1.0, 1.0), clamp(sumState, 0.0, 1.0), 0.0);\n    color.xy /= vec2(kernel_radius);\n    if (color.z <= 0.0) color = vec4(0.0);\n    if (iFrame < 1)\n        color = vec4(noise_base + noise(fragCoord/noise_radius + mod(iDate.w,1.)*100.));\n    if (iMouse.z > 0.) {\n        float d = length((fragCoord.xy - iMouse.xy) / iResolution.xx);\n        if (d <= mouse_radius/iResolution.x)\n        \tcolor = vec4(noise_base + noise(fragCoord/noise_radius + mod(iDate.w,1.)*100.));\n    }\n    fragColor = color;\n}","name":"Buffer A","description":"","type":"buffer"}]}