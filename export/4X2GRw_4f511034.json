{"ver":"0.1","info":{"id":"4X2GRw","date":"1708313294","viewed":146,"name":"Piano-Eurythmics - Sweet Dreams","username":"jorge2017a2","description":"Piano-Eurythmics - Sweet Dreams\n//Eurythmics - Sweet Dreams EASY Piano Tutorial\n//https://www.youtube.com/watch?v=xRmrCoxka0o&t=35s","likes":10,"published":1,"flags":8,"usePreview":0,"tags":["piano","eurythmics","sweetdreams"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//por jorge2017a2\n\n//referencia\n//https://iquilezles.org/articles/distfunctions2d\n\n//Eurythmics - Sweet Dreams EASY Piano Tutorial\n//https://www.youtube.com/watch?v=xRmrCoxka0o&t=35s\n\n\n#define antialiasing(n) n/min(iResolution.y,iResolution.x)\n\n#define S(d,b) smoothstep(antialiasing(1.5),0. , d - (b) )\n#define S2(d,b) smoothstep(8.0*antialiasing(1.5),0.,d - (b) )\n#define opU2(d1, d2) ( d1.x < d2.x ? d1 : d2 )\n\n\n#define PI     3.14159265\n#define TWO_PI 6.28318530\nconst float ttotal=30.0;\n\n\nvec3 DrawFigBordeR(vec3 pColObj, vec3 colOut, float distObj, float r )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-r,0.0));\n  return colOut;\n}\n\nvec3 DrawFigBorde(vec3 pColObj, vec3 colOut, float distObj )\n{ colOut = mix(colOut,pColObj ,S2( distObj,0.0));\n  colOut = mix(colOut,vec3(0.0) ,S2(abs( distObj)-0.005,0.0));\n  return colOut;\n}\n\n\nfloat sdBox( in vec2 p, in vec2 b )\n{ vec2 d = abs(p)-b;  return length(max(d,0.0)) + min(max(d.x,d.y),0.0);  }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n vec2 uv = -1.0 + 2.0 * fragCoord.xy/iResolution.xy;\n\tuv.x *= iResolution.x/iResolution.y;\n    float esc=8.0;\n    uv*=esc;\n\n    // Time varying pixel color\n    vec3 col=vec3(0.56);\n    \n    float tamf=90.0;\n    int tami=90;\n    vec3 tidumid[90] = vec3[90](\n          vec3(0.000,0.125,38.0) ,vec3(0.125,0.125,38.0) ,vec3(0.250,0.125,50.0) ,\n          vec3(0.375,0.125,50.0) ,vec3(0.500,0.125,41.0) ,vec3(0.625,0.125,53.0) ,\n          vec3(0.750,0.125,38.0) ,vec3(0.875,0.125,50.0) ,vec3(1.000,0.125,34.0) ,\n          vec3(1.125,0.125,34.0) ,vec3(1.250,0.125,46.0) ,vec3(1.375,0.125,50.0) ,\n          vec3(1.500,0.125,33.0) ,vec3(1.625,0.125,33.0) ,vec3(1.750,0.125,45.0) ,\n          vec3(1.875,0.125,50.0) ,vec3(2.000,0.125,38.0) ,vec3(2.125,0.125,38.0) ,\n          vec3(2.250,0.125,50.0) ,vec3(2.375,0.125,50.0) ,vec3(2.500,0.125,41.0) ,\n          vec3(2.625,0.125,53.0) ,vec3(2.750,0.125,38.0) ,vec3(2.875,0.125,50.0) ,\n          vec3(3.000,0.125,34.0) ,vec3(3.125,0.125,34.0) ,vec3(3.250,0.125,46.0) ,\n          vec3(3.375,0.125,50.0) ,vec3(3.500,0.125,33.0) ,vec3(3.625,0.125,33.0) ,\n          vec3(3.750,0.125,45.0) ,vec3(3.875,0.125,50.0) ,vec3(4.000,1.000,38.0) ,\n          vec3(4.250,0.250,53.0) ,vec3(4.500,0.250,53.0) ,vec3(4.750,0.125,50.0) ,\n          vec3(4.875,0.250,53.0) ,vec3(5.000,0.500,34.0) ,vec3(5.125,0.250,53.0) ,\n          vec3(5.375,0.125,53.0) ,vec3(5.500,0.500,33.0) ,vec3(5.500,0.500,52.0) ,\n          vec3(6.000,1.000,38.0) ,vec3(6.000,0.125,53.0) ,vec3(6.125,0.125,53.0) ,\n          vec3(6.250,0.125,50.0) ,vec3(6.375,0.375,53.0) ,vec3(6.750,0.250,50.0) ,\n          vec3(7.000,0.500,34.0) ,vec3(7.000,0.125,53.0) ,vec3(7.125,0.375,55.0) ,\n          vec3(7.500,0.500,33.0) ,vec3(7.500,0.125,53.0) ,vec3(7.625,0.125,52.0) ,\n          vec3(7.875,0.125,52.0) ,vec3(8.000,1.000,38.0) ,vec3(8.000,0.125,53.0) ,\n          vec3(8.125,0.125,53.0) ,vec3(8.250,0.125,50.0) ,vec3(8.375,0.375,53.0) ,\n          vec3(8.750,0.125,53.0) ,vec3(8.875,0.125,50.0) ,vec3(9.000,0.500,34.0) ,\n          vec3(9.000,0.125,53.0) ,vec3(9.125,0.250,55.0) ,vec3(9.375,0.125,53.0) ,\n          vec3(9.500,0.500,33.0) ,vec3(9.500,0.250,52.0) ,vec3(10.000,1.000,38.0) ,\n          vec3(10.000,0.250,53.0) ,vec3(10.250,0.125,50.0) ,vec3(10.375,0.250,53.0) ,\n          vec3(10.625,0.375,50.0) ,vec3(11.000,0.500,34.0) ,vec3(11.000,0.125,53.0) ,\n          vec3(11.125,0.125,53.0) ,vec3(11.250,0.125,55.0) ,vec3(11.375,0.250,52.0) ,\n          vec3(11.500,0.500,33.0) ,vec3(11.625,0.375,52.0) ,vec3(12.000,1.000,38.0) ,\n          vec3(12.000,0.125,53.0) ,vec3(12.125,0.125,53.0) ,vec3(12.250,0.250,50.0) ,\n          vec3(12.500,0.250,53.0) ,vec3(12.750,0.125,50.0) ,vec3(12.875,0.250,53.0) ,\n          vec3(13.000,0.500,34.0) ,vec3(13.125,0.125,50.0) ,vec3(13.500,0.500,33.0) );\n            \n    float dfin=9999.9;\n    float tInc=mod(iTime,ttotal);\n    \n    float yA,yB,xpos, ydif;\n    float d1;\n   \n   uv.x+=25.0;\n    float aoct=0.125*12.0*5.0;\n    float alto=8.0;\n    float tl=tInc*0.5;\n    tInc*=4.0;\n   \n    for(float i=1.0; i<90.0;i++)\n    {\n        vec3 pos= tidumid[int(i)];\n        yA=pos.x*alto-tInc;\n        yB=pos.y*alto;\n        xpos=(pos.z/12.0)*aoct;\n        d1=sdBox(uv-vec2(xpos, yA+yB), vec2(0.5,0.5*yB) );\n        col= DrawFigBorde(vec3(1.0,0.0,0.0), col,d1);\n        \n        \n        if(tl>pos.x && tl<(pos.x+pos.y))\n        { col= DrawFigBorde(vec3(1.0,1.0,0.0), col,d1);  }\n    }\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//Eurythmics - Sweet Dreams EASY Piano Tutorial\n//https://www.youtube.com/watch?v=xRmrCoxka0o&t=35s\n\nconst float ttotal=30.0;\n//Modificado por Jorge2017a2---jorgefp\n\n\n#define PI acos(-1.)\n#define PIH (PI*.5)\n#define TAU (PI*2.)\n#define TWO_PI 6.2831\n\n//const float PI = 3.1415926;\n\n#define DD(a,b) n=(s>=a)? vec2(a,b):n;\n//#define D3(a,b,c) n3=(s>=a && s<=c)? vec3(a,b,c):n3;\n#define D3(a,b,c) n3=(s>=(a) && s<=(a)+(c))? vec3(a,b,c):n3; \n\nconst float pi = 3.1415927;\nconst float tau = 6.283185;\n//const float ttotal=40.0;\n\n\n\nfloat squareWave750( float f, float x)\n{\n    return (min(1.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 3.0 )));\n}\n\nfloat squareWave500( float f, float x)\n{\n    return (floor( 2.0 * floor( f * x ) - floor( 2.0 * f * x ) + 1.0 ));\n}\n\nfloat squareWave250( float f, float x)\n{\n    return (max(0.0, floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 )));\n}\n\nvec2 squareWave250( vec2 f, float x)\n{\n    return (max(vec2(0.0), floor( 4.0 * floor( f * x ) - floor( 4.0 * f * x ) + 1.0 )));\n}\n\nfloat triangleWave500( float q, float x)\n{\n    float f = 1.0-2.0*abs(0.5-mod(q*x,1.0));\n    return (f);\n}\n\nfloat triangleWave250( float q, float x)\n{\n    float f = max(0.0,1.0-2.0*abs(0.5-2.0*mod(q*x,1.0)));\n    return (f);\n}\n\nfloat convertBassFreq (float f){\n    return (f/2.0);\n}\n\n\n\nfloat wave1( float x, float dxdt, in vec2 v, float t , float w)\n{   //referencia Inigo Quilez 2019\n    float f2;\n    //f2=osc_sin(x);\n    \n    float sampleX=0.0;\n    float f=w;\n    float time=t;\n    float mult=0.125;\n    float v1=squareWave250(f,t);\n    float v2=triangleWave500(f,t);\n    sampleX =(v1+v2)*v1*exp(-2.5*t);\n    return sampleX;\n}\n\n\nfloat SoundIq(float time)\n{ ///referencia de notas musicales... iq \n  time = mod( time+1.0, ttotal);\n // tune\n  float tempo = 0.5;\n  float s = time*tempo;\n // vec2 n = vec2(0);\n vec3 n3=vec3(0.0);\n \n \n  D3(0.,38.,0.125) D3(0.125,38.,0.25) D3(0.25,50.,0.375) D3(0.375,50.,0.5) D3(0.5,41.,0.625) D3(0.625,53.,0.75)\n D3(0.75,38.,0.875) D3(0.875,50.,1.) D3(1.,34.,1.125) D3(1.125,34.,1.25) D3(1.25,46.,1.375) D3(1.375,50.,1.5)\n D3(1.5,33.,1.625) D3(1.625,33.,1.75) D3(1.75,45.,1.875) D3(1.875,50.,2.) D3(2.,38.,2.125) D3(2.125,38.,2.25)\n D3(2.25,50.,2.375) D3(2.375,50.,2.5) D3(2.5,41.,2.625) D3(2.625,53.,2.75) D3(2.75,38.,2.875) D3(2.875,50.,3.)\n D3(3.,34.,3.125) D3(3.125,34.,3.25) D3(3.25,46.,3.375) D3(3.375,50.,3.5) D3(3.5,33.,3.625) D3(3.625,33.,3.75)\n D3(3.75,45.,3.875) D3(3.875,50.,4.) D3(4.,38.,5.) D3(4.25,53.,4.5) D3(4.5,53.,4.75) D3(4.75,50.,4.875)\n D3(4.875,53.,5.125) D3(5.,34.,5.5) D3(5.125,53.,5.375) D3(5.375,53.,5.5) D3(5.5,33.,6.) D3(5.5,52.,6.)\n D3(6.,38.,7.) D3(6.,53.,6.125) D3(6.125,53.,6.25) D3(6.25,50.,6.375) D3(6.375,53.,6.75) D3(6.75,50.,7.)\n D3(7.,34.,7.5) D3(7.,53.,7.125) D3(7.125,55.,7.5) D3(7.5,33.,8.) D3(7.5,53.,7.625) D3(7.625,52.,7.75)\n D3(7.875,52.,8.) D3(8.,38.,9.) D3(8.,53.,8.125) D3(8.125,53.,8.25) D3(8.25,50.,8.375) D3(8.375,53.,8.75)\n D3(8.75,53.,8.875) D3(8.875,50.,9.) D3(9.,34.,9.5) D3(9.,53.,9.125) D3(9.125,55.,9.375) D3(9.375,53.,9.5)\n D3(9.5,33.,10.) D3(9.5,52.,9.75) D3(10.,38.,11.) D3(10.,53.,10.25) D3(10.25,50.,10.375) D3(10.375,53.,10.625)\n D3(10.625,50.,11.) D3(11.,34.,11.5) D3(11.,53.,11.125) D3(11.125,53.,11.25) D3(11.25,55.,11.375) D3(11.375,52.,11.625)\n D3(11.5,33.,12.) D3(11.625,52.,12.) D3(12.,38.,13.) D3(12.,53.,12.125) D3(12.125,53.,12.25) D3(12.25,50.,12.5)\n D3(12.5,53.,12.75) D3(12.75,50.,12.875) D3(12.875,53.,13.125) D3(13.,34.,13.5) D3(13.125,50.,13.25) D3(13.5,33.,14.) \n  // lower one octave\n  n3.y -=12.; //12 notas\n      \n  // compute note frequency and time  \n  float f = 440.0*pow( 2.0, float(n3.y-69.)/12.0 );\n  float t = time - float(n3.x)/tempo;\n  if( n3.x==0.0 ) return 0.0;\n\n  // prepare wave parameters\n  float w = tau*f;\n  float dwdt = w/iSampleRate; // derivative\n    \n  // mix between bandlimited and raw saw waves  \n  vec2 v = smoothstep(-0.2,0.2,sin(t*vec2(1.0,0.5)) );\n  // build instrument\n  \n  float f1,y;\n  f1=wave1(w*t,1.00*dwdt,v,t,w);\n  float wf  = 0.4*f1;\n  y=f1*wf;\n  //y=wf;\n  float offset=n3.x+n3.z;\n   y*=exp(-1.0/n3.z * (t -offset) );\nreturn y;\n}\n\n\n\nvec2 mainSound( in int samp, float time )\n{ \n    float t1=mod(time, ttotal);\n    float y;\n    \n    y= SoundIq(t1)*0.125;\n    \n  return vec2(y);\n}   \n","name":"Sound","description":"","type":"sound"}]}