{"ver":"0.1","info":{"id":"cdKXRR","date":"1680636474","viewed":117,"name":"TestForTestOfTest","username":"overlapping","description":"This shader is a test ","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 mouse = iMouse.xy;\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = uv+.5;\n    vec4 webCam = texture(iChannel0,fract(uv*=mouse*.01));\n    // Time varying pixel color\n    vec2 col = 0.5 + 0.5*cos(uv);\n\n    // Output to screen\n    fragColor = normalize(webCam+=vec4(col,.234,0));\n    \n    \n    \n}","name":"Image","description":"","type":"image"}]}