{"ver":"0.1","info":{"id":"XX2yWW","date":"1727279437","viewed":16,"name":"analytical terrain gen","username":"Stranget0","description":"A fork of inigo quilez's 2d derivative fbmd shader ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// Computes analytical normals (right side of the screen) for a value-noise based fbm(), \n// and compares them to the numerically computer normals (left side of the screen) which\n// are computed by the standard central difference method.\n//\n// Computing normals analytically has the benefit of being faster and \"free\", while\n// numerical normals are easier to filter for antialiasing.\n\nstruct NoiseResult {\n    float value;   // The noise value\n    vec2 d1; // The first derivative (gradient)\n    mat2 d2;  // The second derivative (Hessian matrix)\n};\n\n// value noise, and its analytical derivatives\nNoiseResult noised( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    \n    // cubic interpolation vs quintic interpolation\n#if 1 \n    vec2 u = f*f*(3.0-2.0*f);\n    vec2 du = 6.0*f*(1.0-f);\n    vec2 ddu = 6.0 - 12.0*f;\n#else\n    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);\n    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);\n    vec2 ddu = 60.0*f*(1.0+f*(-3.0+2.0*f));\n#endif\n    \n\tfloat a = textureLod(iChannel0,(p+vec2(0.5,0.5))/256.0,0.0).x;\n\tfloat b = textureLod(iChannel0,(p+vec2(1.5,0.5))/256.0,0.0).x;\n\tfloat c = textureLod(iChannel0,(p+vec2(0.5,1.5))/256.0,0.0).x;\n\tfloat d = textureLod(iChannel0,(p+vec2(1.5,1.5))/256.0,0.0).x;\n\t\n    float k0 =   a;\n    float k1 =   b - a;\n    float k2 =   c - a;\n    float k4 =   a - b - c + d;\n\n\n    // value\n    float va = a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y;\n    // derivative                \n    vec2  de = du*(vec2(b-a,c-a)+(a-b-c+d)*u.yx);\n    // hessian (second derivartive)\n    mat2  he = mat2( ddu.x*(k1 + k4*u.y),   \n                     du.x*k4*du.y,\n                     du.y*k4*du.x,\n                     ddu.y*(k2 + k4*u.x) );\n    \n    return NoiseResult(va,de, he);\n\n}\n\nconst float scale  = 0.3;\nconst float height = 20.0;\nconst float pointiness = 100.0;\nvec4 fbmd( in vec2 x )\n{\n    NoiseResult n = noised(x * scale);\n    n.d1 *= scale;\n \n    ////// h(x,y) = sqrt( df/dx f(x,y) ^ 2 + df/dy f(x,y) ^ 2 )\n    // derivatives are mixed in this equation, this act as a factor\n    float grad_len = length(n.d1);\n    \n    ///// df/dx h(x,y) = df/dx f(x,y) / ( df/dx f(x,y) ^ 2 + df/dy f(x,y) ^ 2 )\n    float grad_len_dx = n.d1.x / sqrt(n.d1.x * n.d1.x + n.d1.y * n.d1.y);\n    float grad_len_dy = n.d1.y / sqrt(n.d1.x * n.d1.x + n.d1.y * n.d1.y);\n    vec2 grad_len_d = vec2(grad_len_dx,grad_len_dy);\n    \n    \n    ////// g(x,y)= u / v\n    // u = A * f(x,y)\n    float u = height * n.value;\n    \n    // v = 1 + P * h'(x,y)  \n    float v = 1.0 + pointiness  * grad_len;\n    \n    // ud = A\n    float ud = height;\n    \n    // vd = P * f'\n    vec2 vd = pointiness * grad_len_d;\n    \n    // g(x,y) = u / v\n    float value = u/v;\n    \n    // g'(x,y)\n    vec2 value_d = (ud * v - u * vd) / (v * v);\n    \n    // value and normal\n    return vec4(value, normalize(vec3(-value_d.x,1.0, -value_d.y)));\n    \n}\n\n// raymarch against fbm heightfield\nvec4 interesect( in vec3 ro, in vec3 rd )\n{\n\tvec4 res = vec4(-1.0);\n    float t = 0.0;\n\tfor( int i=0; i<70; i++ )\n\t{\n        vec3 pos = ro + t*rd;\n\t\tvec4 hnor = fbmd( pos.xz );\n\n\t\tres = vec4(t,hnor.yzw);\n\t\tif( (pos.y-hnor.x)<0.05 ||  t>2000.0) break;\n\t\t\n\t\tt += (pos.y-hnor.x)*(0.001+hnor.z);\n\t}\n\n\tif( t>2000.0 ) res = vec4(-1.0);\n\treturn res;\n}\n\n// compute normal numerically\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 e = vec3(0.01,0.0,0.0);\n\treturn normalize( vec3(fbmd(pos.xz-e.xy).x - fbmd(pos.xz+e.xy).x,\n                           2.0*e.x,\n                           fbmd(pos.xz-e.yx).x - fbmd(pos.xz+e.yx).x ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n\n\t// camera anim\n\tvec3 ro = vec3( 1000.0*cos(0.001*iTime), 0.0, 1000.0*sin(0.001*iTime) );\n\tvec3 ta = vec3( 0.0 );\n    ro.y = fbmd(ro.xz).x + 2.0;\n    ta.y = fbmd(ro.xz).x + 2.0;\n\t\n    // camera matrix\t\n\tvec3  cw = normalize( ta-ro );\n\tvec3  cu = normalize( cross(cw,vec3(0.0,1.0,0.0)) );\n\tvec3  cv = normalize( cross(cu,cw) );\n\tvec3  rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n\t// render\n\tvec3 col = vec3(0.0);\n    vec4 tnor = interesect( ro, rd );\n\tfloat t = tnor.x;\n\t\n\t// commented out becasue of an ANGLE bug:\n    //if( t>0.0 )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\tcol = (p.x<0.0) ? calcNormal( pos ) : tnor.yzw;\n        col = 0.5 + 0.5*col;\n\t\tcol *= exp(-0.000015*t*t);\n\t}\n\t\n\t// here becasue of the ANGLE bug:\n\tcol *= smoothstep(-0.5,0.0,t);\n\n\tcol = mix( vec3(0.0), col, smoothstep(0.006,0.007,abs(p.x)) );\n\t\n    fragColor=vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}