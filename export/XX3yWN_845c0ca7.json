{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy-0.5;\n    uv.x*=iResolution.x/iResolution.y;\n\n    float w = (0.8+sin(iTime)*0.2)/2.0;\n    float h = (0.6+sin(iTime/1.5+2.0)*0.1)/2.0;\n    float r = (0.22+sin(iTime*2.5+1.0)*0.18)/2.0;\n\n    float distance = length(vec2(max(abs(uv.x)-w+r,0.0),max(abs(uv.y)-h+r,0.0)))-r;\n    float final = min(max(0.5-distance*iResolution.y,0.0),1.0);\n\n    // Output to screen\n    fragColor = vec4(vec3(final),1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XX3yWN","date":"1735050183","viewed":91,"name":"Rounded rectangle formula demo","username":"Ponali","description":"This is a demo of a clever formula i made myself, made for checking if a pixel is inside of a rounded rectangle. This uses some clever distance mechanisms to add antialiasing to the object.","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["roundedrectangle"],"hasliked":0,"parentid":"","parentname":""}}