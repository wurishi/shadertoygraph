{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/* Compiled with Shaderforth: https://github.com/daeken/Shaderforth\n:globals\n\t@vec3 uniform =iResolution\n\t@float uniform =iTime\n\t@vec2 =op\n;\n\n:m pi 3.14159 ;\n:m tau pi 2.0 * ;\n\n:m amin ( arr f )\n\tarr \\{ ( $a $b )\n\t\ta *f b *f min =m\n\t\ta b a *f m == select\n\t}\n;\n\n:m p+ ( p v ) p cart-polar v + polar-cart ;\n\n:m minmax ( $a $b ) [ a b min a b max ] ;\n\n: cart-polar ( p:vec2 -> vec2 ) [ p .y.x atan2 p length ]v ;\n: polar-cart ( p:vec2 -> vec2 ) [ p .x cos p .x sin ]v p .y * ;\n\n: point-distance-line ( a:vec2 b:vec2 point:vec2 -> float )\n\tpoint a - =>pa\n\tb a - =>ba\n\tpa ba dot ba ba dot / 0.0 1.0 clamp =h\n\tpa ba h * - length\n;\n\n:m grad ( p f )\n\t[ 0.001 0.0 ]v =h\n\tp *f =>v\n\t[\n\t\tp h + *f p h - *f -\n\t\tp h .yx + *f p h .yx - *f -\n\t]v 2.0 h .x * / length =>g\n\tv abs g /\n;\n\n: warp ( p:vec2 -> vec2 )\n\tp 10.0 * sin iTime sin 4.0 + 2.0 * *\n;\n\n:m pwarp ( p )\n\tp cart-polar [ iTime sin pi * 0.0 ]v + polar-cart iTime 5.0 / sin *\n;\n\n: surface ( p:vec2 -> float )\n\tp cart-polar cos polar-cart abs op abs - length\n;\n\nfragCoord .xy iResolution .xy / 2.0 * 1.0 - [ pi 4.0 iTime 237.0 / cos * / iTime sin 0.03 * ]v p+ =op\n\nop warp surface 2.0 / =v\nop warp pwarp &surface grad 2.0 / =gv\nv gv minmax \\/ =r\n\n[\n\tgv v r mix\n\tv gv r mix 0.8 *\n\t1.0\n\t1.0\n]v =fragColor\n*/\n\nvec2 op;\nvec2 cart_polar(vec2);\nvec2 polar_cart(vec2);\nvec2 warp(vec2);\nfloat point_distance_line(vec2, vec2, vec2);\nfloat surface(vec2);\nvec2 cart_polar(vec2 p) {\n\treturn vec2(atan((p).y, (p).x), length(p));\n}\nvec2 polar_cart(vec2 p) {\n\treturn (vec2(cos((p).x), sin((p).x))) * ((p).y);\n}\nvec2 warp(vec2 p) {\n\treturn (sin((p) * 10.0)) * (((sin(iTime)) + 4.0) * 2.0);\n}\nfloat point_distance_line(vec2 a, vec2 b, vec2 point) {\n\tfloat h = clamp((dot((point) - (a), (b) - (a))) / (dot((b) - (a), (b) - (a))), 0.0, 1.0);\n\treturn length(((point) - (a)) - (((b) - (a)) * (h)));\n}\nfloat surface(vec2 p) {\n\treturn length((abs(polar_cart(cos(cart_polar(p))))) - (abs(op)));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\top = polar_cart((cart_polar(((((fragCoord).xy) / ((iResolution).xy)) * 2.0) - 1.0)) + (vec2(3.14159 / (4.0 * (cos((iTime) / 237.0))), (sin(iTime)) * 0.03)));\n\tfloat v = (surface(warp(op))) / 2.0;\n\tvec2 h = vec2(0.001, 0.0);\n\tfloat gv = ((abs(v)) / (length((vec2((surface(((polar_cart((cart_polar(warp(op))) + (vec2((sin(iTime)) * 3.14159, 0.0)))) * (sin((iTime) / 5.0))) + (h))) - (surface(((polar_cart((cart_polar(warp(op))) + (vec2((sin(iTime)) * 3.14159, 0.0)))) * (sin((iTime) / 5.0))) - (h))), (surface(((polar_cart((cart_polar(warp(op))) + (vec2((sin(iTime)) * 3.14159, 0.0)))) * (sin((iTime) / 5.0))) + ((h).yx))) - (surface(((polar_cart((cart_polar(warp(op))) + (vec2((sin(iTime)) * 3.14159, 0.0)))) * (sin((iTime) / 5.0))) - ((h).yx))))) / (2.0 * ((h).x))))) / 2.0;\n\tfloat macro_minmax_a = v;\n\tfloat macro_minmax_b = gv;\n\tfloat r = (min(macro_minmax_a, macro_minmax_b)) / (max(macro_minmax_a, macro_minmax_b));\n\tfragColor = vec4(mix(gv, v, r), (mix(v, gv, r)) * 0.8, 1.0, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lssSRH","date":"1396941862","viewed":233,"name":"Lake Annoc","username":"daeken","description":"Some trig hackery","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["trig","shaderforth"],"hasliked":0,"parentid":"","parentname":""}}