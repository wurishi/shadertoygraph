{"ver":"0.1","info":{"id":"MXj3DG","date":"1708847524","viewed":125,"name":"XOR_DRAW","username":"Sunpy","description":"Unsure what to call this, but basically xor draw with buffer.\nCreates general noise.\nShape visible when playing.\nShape invisible when pausing.\n\nIdea from Chris Long over @ https://www.youtube.com/@ChrisBLong (https://www.youtube.com/watch?v=TdTMeNXCnTs)","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["noise","illusion","xor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// using DRAW_EVERY_N_FRAME\n#if 0\n    #undef DRAW_EVERY_N_FRAME\n    #define DRAW_EVERY_N_FRAME 2\n#endif\n\n/* \n * Check `Common` tab for settings\n * idea from Chris Long over @ https://www.youtube.com/@ChrisBLong (https://www.youtube.com/watch?v=TdTMeNXCnTs)\n */\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame % DRAW_EVERY_N_FRAME != 0){\n        discard;\n    }\n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// using LINE_WIDTH\n#if 0\n    #undef LINE_WIDTH\n    #define LINE_WIDTH .01\n#endif\n\n#define ROT_Z(c, s)    \\\n    mat3(              \\\n        c,  -s,  .0,   \\\n        s,   c,  .0,   \\\n       .0,  .0,  1.    \\\n    )\n\n#define ROT_X(c, s)    \\\n    mat3(              \\\n       1.,  .0,  .0,   \\\n       .0,   c,  -s,   \\\n       .0,   s,   c    \\\n    )\n\n#define ROT_Y(c, s)    \\\n    mat3(              \\\n        c,  .0,   s,   \\\n        .0,  1., .0,   \\\n       -s,  .0,   c    \\\n    )\n\nconst vec3 VERT[] = vec3[](\n    vec3( .5,  .5,  .5),\n    vec3(-.5,  .5,  .5),\n    vec3(-.5, -.5,  .5),\n    vec3( .5, -.5,  .5),\n    vec3( .5,  .5, -.5),\n    vec3(-.5,  .5, -.5),\n    vec3(-.5, -.5, -.5),\n    vec3( .5, -.5, -.5)\n);\n\nfloat line(in vec2 uv, in vec2 a, in vec2 b) {\n\tvec2 ba = b - a;\n\tvec2 pa = uv - a;\n\tfloat h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n\treturn step(length(pa - h * ba), LINE_WIDTH);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    \n    float value = 0.;\n    float c = cos(iTime);\n    float s = sin(iTime);\n\n    vec2 vert_projected[VERT.length()];\n    for (int i = 0; i < VERT.length(); i++) {\n        vec3 point = VERT[i] * ROT_X(c, s) * ROT_Y(c, s) * ROT_Z(c, s);\n        vert_projected[i] = point.xy * vec2(1. / (1.4 - point.z));\n    }\n    \n    for (int i = 0; i < 4; i++) {\n        value += line(uv, vert_projected[i], vert_projected[(i+1) % 4]);\n        value += line(uv, vert_projected[i+4], vert_projected[(i+1) % 4 + 4]);\n        value += line(uv, vert_projected[i], vert_projected[i+4]);\n    }\n    \n    value = step(.1, value);\n    \n    fragColor = vec4(vec3(value), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// using PIXEL_SIZE\n#if 0\n    #undef PIXEL_SIZE\n    #define PIXEL_SIZE 4\n#endif\n\nvec4 downsample(sampler2D channel, ivec2 coord, int pixel_size) {\n    coord = ivec2(vec2(coord) / float(pixel_size)) * pixel_size;\n    vec4 col = texelFetch(channel, coord, 0);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = mod(texelFetch(iChannel0, ivec2(fragCoord), 0) + downsample(iChannel1, ivec2(fragCoord), PIXEL_SIZE), 2.);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// SETTINGS\n#define LINE_WIDTH .01\n#define PIXEL_SIZE 4\n#define DRAW_EVERY_N_FRAME 2","name":"Common","description":"","type":"common"}]}