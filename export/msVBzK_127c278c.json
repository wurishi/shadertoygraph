{"ver":"0.1","info":{"id":"msVBzK","date":"1698435232","viewed":32,"name":"other tiles Upalmucha","username":"upalmucha","description":"Another iteration of tiles","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["pattern","tiles"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot2D(float r)\n{\n    float c = cos(r), s = sin(r);\n    return mat2(c, s, -s, c);\n}\n\n// convert distance to alpha\nfloat dtoa(float d, float amount)\n{\n    float a = clamp(1.0 / (clamp(d, 1.0/amount, 1.0)*amount), 0.,1.);\n    return a;\n}\n\nfloat circle (vec2 uv, vec2 p, float radius)\n{\n    float d = length(uv-p);\n    return smoothstep(d,d+0.01,radius);\n}\n\nfloat sdAxisAlignedRect(vec2 uv, vec2 tl, vec2 br)\n{\n  \tvec2 d = max(tl - uv, uv - br);\n    return length(max(vec2(0.0), d)) + min(0.0, max(d.x, d.y));\n}\n\nfloat sdLineSegment(vec2 uv, vec2 a, vec2 b, float lineWidth)\n{\n    // flatten the line to be axis-aligned.\n    vec2 rectDimensions = b - a;\n    float angle = atan(rectDimensions.x, rectDimensions.y);\n    mat2 rotMat = rot2D(-angle);\n    a *= rotMat;\n    b *= rotMat;\n    float halfLineWidth = lineWidth / 2.;\n    a -= halfLineWidth;\n    b += halfLineWidth;\n\treturn sdAxisAlignedRect(uv * rotMat, a, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy)/iResolution.y;\n    vec2 Nuv = fragCoord/iResolution.xy;\n    \n    //calc vignette on fresh uvs\n    vec2 viguv = fragCoord.xy / iResolution.xy;  \n    viguv *=  1.0 - viguv.yx;   //vec2(1.0)- uv.yx; -> 1.-u.yx; Thanks FabriceNeyret !\n    float vig = viguv.x*viguv.y * 15.0; // multiply with sth for intensity \n    vig = pow(vig, 0.25); // change pow for modifying the extend of the  vignette\n    \n    //TRAPEZE\n    float n = mix(1., 0.2, Nuv.y) ;\n    Nuv.x = Nuv.x * 1./n + (1.0 - 1./n) / 2.0;\n    Nuv.y *= Nuv.y + 0.35;\n    Nuv *= vec2(2.,10.);\n    \n    Nuv.y += iTime*0.5;\n    Nuv.x -= 0.5;\n    Nuv = fract(Nuv);\n    \n    \n    float rect = sdLineSegment(Nuv, vec2(0.53,0.5), vec2(0.47,0.5), 0.9);\n\tvec3 col = mix(vec3(0.), vec3(1.), 1. * dtoa(rect, 100.));\n    float circles = 1.-circle(Nuv, vec2(0.95,0.8), 0.02) - circle(Nuv, vec2(0.05,0.2), 0.02) - circle(Nuv, vec2(0.05,0.8), 0.02) - circle(Nuv, vec2(0.95,0.2), 0.02);\n    col -= vec3(dtoa(circles,20.));\n    // col += vec3(fract(Nuv),1.)/2.;\n    \n    //texture\n    col *= 1. - texture(iChannel0, Nuv).r * 0.2;\n    \n    // vignette and shade\n    col -= uv.y + .5;\n    col -= 1. - vig;\n\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}