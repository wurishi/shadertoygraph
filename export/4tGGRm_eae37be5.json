{"ver":"0.1","info":{"id":"4tGGRm","date":"1473716992","viewed":172,"name":"RoundRect experiment","username":"ReubenScratton","description":"A2 D rounded rect that allows a different radius for each corner.\n\nSDF is one of iq's.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2droundrect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Original by Marc Lepage - mlepage/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// Extended by me to allow per-corner radii\n\n\n\n// Rect half size\nvec2 hsize = vec2(150.0,80.0);\n\n// Corner radii\nvec4 radii = vec4(32.0,32.0,32.0,32.0);\n\n// Background color\nvec4 bgColor = vec4(0, 0, 0, 1);\n\n// Stroke color\nvec4 strokeColor = vec4(1, 0, 0, 1);\n\n// Stroke width\nfloat strokeWidth = 8.0;\n\n// Rounded rect distance function\nfloat sdRoundRect(vec2 p, vec2 b, vec4 r) {\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    \n    // Rect center\n    vec2 center = iResolution.xy / 2.0;\n\n\tvec2 uv = fragCoord / iResolution.xy;\n\tvec4 innerColor = vec4(uv, 0.5 + 0.5*sin(iTime), 1.0);\n\n    // Simple animation (comment out to fill viewport)\n    center += iResolution.xy * 0.25*sin(iTime/3.0);\n    radii.x += 24.0*sin(iTime*2.0);\n    radii.y += 20.0*sin(iTime*5.0);\n    radii.z += 32.0*sin(iTime*4.0);\n    radii.w += 16.0*sin(iTime*3.0);\n    \n    // Mix content with background using rounded rectangle\n\tfloat dOuter = sdRoundRect(fragCoord - center, hsize, radii);\n\tfloat dInner = sdRoundRect(fragCoord - center, hsize - strokeWidth, radii - strokeWidth);\n\n    fragColor = mix(bgColor, mix(strokeColor, innerColor, clamp(0.5-dInner, 0.0, 1.0)), \n                    clamp(0.5-dOuter, 0.0, 1.0));\n\n    \n}","name":"Image","description":"","type":"image"}]}