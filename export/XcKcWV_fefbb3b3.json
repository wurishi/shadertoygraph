{"ver":"0.1","info":{"id":"XcKcWV","date":"1732402839","viewed":31,"name":"Reversion","username":"emodeman","description":"Just fooling around with https://www.shadertoy.com/view/4ffSW2.\nPerhaps it exposes patterns in the hash function?","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["inversion","hash","whatisthis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nvec3 hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * vec3(0.1031, 0.1030, 0.0973));\n    p3 += dot(p3, p3.yxz + 33.33333);\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normal\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n    // the fabriceneyret rotation matrix trick\n    float ro = mix(6.7, 12.1, abs(sin(iTime * 0.0012)));\n    mat2 rotation = mat2(cos(iTime * 0.00001 + ro + vec4(0.0, 33.0, 11.0, 0.0)));\n    \n    for (int i = 0; i < 90; i++)\n    {\n        uv *= rotation;\n        uv.yx += cos(uv) * 0.1 + sin(uv + 20.0) * 0.1;\n        uv /= dot(uv, uv);\n    }\n\n    fragColor = vec4(hash32(uv * 0.01), 1.0);\n}","name":"Image","description":"","type":"image"}]}