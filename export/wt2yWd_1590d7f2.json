{"ver":"0.1","info":{"id":"wt2yWd","date":"1597044480","viewed":161,"name":"Hue To RGB Visualizer","username":"LilBensson","description":"Visualizing hue to RGB.\n\n","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["rgb","visualizer","hue"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// I was watching Acegikmo's stream when she was making a painting app in Unity and I was \n// interested in how she converted hue to RGB. I wanted to visualize the conversion, \n// since an animation of it could be pretty cool and to explain the \n// correlation between the channels across the hue spectrum.\n\n// Acegikmo's twitch: https://www.twitch.tv/acegikmo\n\n// The upper moving black bars shows the current color.\n// The 3 horizontal bars right below shows the amount of red, green and \n// blue across the spectrum.\n// The 3 vertical bars in the middle shows the amount of red, green and \n// blue for the current color.\n\n// When a vertical bar is under the white horizontal line, then the channel\n// has a value below 0. If the top of a bar is bright, then the value is above 1.\n\n// The animation shows that all colors across the hue spectrum is only using\n// 2 channels, where the sum of the channels is 2. The exception to this is\n// when a color is strictly only red, green or blue. In that case, the single\n// channel's value is 2. The unused channels would simply be clamped to 0.\n\nvec3 HueToRGB(float hue)\n{\n    // Fractional part of each component with an added offset\n    vec3 fr = fract(vec3(hue) + vec3(0.0, -1.0/3.0, 1.0/3.0));\n    \n    // Change min/max from 0 and 1, to -1 and 2\n    vec3 s = 3.0*abs(1.0 - 2.0*fr) - 1.0;\n    \n\treturn s;\n}\n\n// Check if the current coordinate is within the bounds of a rectangle\nfloat Rectangle(vec2 uv, vec4 bounds)\n{\n\treturn (uv.x >= bounds.x && uv.x < bounds.x+bounds.z && \n           \tuv.y >= bounds.y && uv.y < bounds.y+bounds.w) ? 1.0 : 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 screenCol = vec3(0.0);\n    \n    // Upper color spectrum rectangle\n    vec3 hueHere = HueToRGB(uv.x);\n    screenCol += hueHere * Rectangle(uv, vec4(0.0, 0.9, 1.0, 0.1)); \n    \n    screenCol += vec3(hueHere.r, 0.0, 0.0) * Rectangle(uv, vec4(0.0, 0.87, \t\t\t1.0, 0.03)); \n    screenCol += vec3(0.0, hueHere.g, 0.0) * Rectangle(uv, vec4(0.0, 0.87-0.03, \t1.0, 0.03)); \n    screenCol += vec3(0.0, 0.0, hueHere.b) * Rectangle(uv, vec4(0.0, 0.87-0.03*2.0, 1.0, 0.03)); \n    \n    // Moving current colored box\n    float xPos = fract(iTime*0.1);\n    vec3 currentCol = HueToRGB(xPos);\n    vec3 movingBoxColor = currentCol * Rectangle(uv, vec4(xPos-0.005, 0.9, 0.02, 0.1));\n    \n    screenCol = mix(screenCol, vec3(0.0), Rectangle(uv, vec4(xPos-0.01, 0.9, 0.01+0.01+0.01, 0.1)));\n    screenCol += movingBoxColor;\n    \n    // Visualizers\n    screenCol += vec3(1.0, 0.0, 0.0) * Rectangle(uv, vec4(0.5-0.2-0.2, \t0.3 + min(currentCol.r*0.2, 0.0), 0.2, abs(currentCol.r*0.2)));\n    screenCol += vec3(0.0, 1.0, 0.0) * Rectangle(uv, vec4(0.5-0.1, \t\t0.3 + min(currentCol.g*0.2, 0.0), 0.2, abs(currentCol.g*0.2)));\n    screenCol += vec3(0.0, 0.0, 1.0) * Rectangle(uv, vec4(0.5+0.2, \t\t0.3 + min(currentCol.b*0.2, 0.0), 0.2, abs(currentCol.b*0.2)));\n    \n    // Value is negative\n    screenCol -= vec3(0.6) * Rectangle(uv, vec4(0.0, 0.0, 1.0, 0.3-0.002));\n    \n    // Value is more than one\n    vec3 colLastTime = clamp(floor(vec3(1.0) - screenCol), 0.0, 1.0); \n    screenCol += vec3(0.6) * Rectangle(uv, vec4(0.0, 0.3 + 0.2, 1.0, 0.2)) * (1.0 - colLastTime.r * colLastTime.g * colLastTime.b);\n    \n    \n    // White line in the middle\n    screenCol += Rectangle(uv, vec4(0.0, 0.3-0.002, 1.0, 0.002*2.0));\n    \n    // Gamma correction\n    screenCol = clamp(screenCol, 0.0, 1.0);\n    screenCol = pow(screenCol, vec3(0.454545));\n    \n    // Output to screen\n    fragColor = vec4(screenCol, 1.0);\n}","name":"Image","description":"","type":"image"}]}