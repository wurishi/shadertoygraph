{"ver":"0.1","info":{"id":"ftcXzS","date":"1639294138","viewed":83,"name":"Simple square tunnel walkthrough","username":"yodak","description":"Has walls and bouncy ceiling.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["tunnel","raycasting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Shoots a ray through screen pixel (with screen plane being at z=f)\n// and intersects with plane at y=h\n\n//based on Simple plane walkthrough by mrchebas https://www.shadertoy.com/view/lssGDr\n\nvec2 tex_index_y(float xx,float yy,float ff,float TT){//(uv.x,uv.y,float f,iTime)\nvec3 plane_point = vec3(xx, yy, ff);\nplane_point.z += TT; // Move forward\nreturn plane_point.yz;\n}\n\nvec2 tex_index_x(float xx,float yy,float ff,float TT){//(uv.x,uv.y,float f,iTime)\nvec3 plane_point = vec3(xx, yy, ff);\nplane_point.z += TT; // Move forward\nreturn plane_point.xz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// Calculate normalized screen space (lower left is (-0.5,-0.5))\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv -= vec2(0.5, 0.5);\n\t\n\tfloat f = 1.0; // Focal distance\n\tfloat h = -0.5; // Height of plane\n    float hm= 2.0+sin(iTime);\n    //float hm= 4.0; //not bouncy\n\t\n\t// Intersect with plane at y=h\n\t// a is the factor that makes the direction vector\n\t// from the camera (origin) to the pixel point intersect\n\t// with a point in the plane at height h\n\tfloat a = h / uv.x;// walls(vertical)\n    float b2 = hm*h / uv.y; //renders texture at hm height(ceiling)\n    float b = h / uv.y; // floor(horisontal)\n    if(uv.y>0.0){\n        if (abs(uv.y)<abs(uv.x)*hm){\n        //it's a hack to render a ceiling on a smaller part of the screen\n            if(a > 0.0) {            \n              fragColor = texture(iChannel0, tex_index_y(uv.x * a, uv.y * a, f * a,iTime));//upper left wall\n            } else {\n              fragColor = texture(iChannel0, tex_index_y(uv.x * a, uv.y * a, f * a,-iTime));//upper right wall\n             }\n        }else{            \n              fragColor = texture(iChannel1, tex_index_x(uv.x * b2, uv.y * b2, f * b2,-iTime)); //ceiling\n        }\n    }else{\n        if (abs(uv.y)<abs(uv.x)){\n            if(a > 0.0) {\n              fragColor = texture(iChannel0, tex_index_y(uv.x * a, uv.y * a, f * a,iTime));//lower left wall\n            } else {\n              fragColor = texture(iChannel0, tex_index_y(uv.x * a, uv.y * a, f * a,-iTime));//lower right wall             \n            }\n        }else{   \n              fragColor = texture(iChannel2, tex_index_x(uv.x * b, uv.y * b, f * b,iTime)); //floor\n        }\n    }\n\t\n}","name":"Image","description":"","type":"image"}]}