{"ver":"0.1","info":{"id":"tl3Bzs","date":"1613249807","viewed":53,"name":"objets lifgraphique","username":"FranckyTax","description":"objets graphiques","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["etiquette"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Modeling\n// Eric Galin\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( float seed, vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,0.0,    -sa,ca,0.0,  0.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(vec2 m, vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 3.5;\n    \n    // Origin\n    ro=vec3(37.0,0.0,10.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    // Target\n    vec3 ta = vec3(0.0,0.0,1.0);\n    \n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n// Modeling - 2020.07.20\n// Eric Galin \n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n// Sphere \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n\n// Union\n// a,b : field function of left and right sub-trees\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\n// Intersection\n// a,b : field function of left and right sub-trees\nfloat Intersection(float a,float b)\n{\n    return max(a,b);\n}\n\n//Difference\nfloat difference(float a,float b)\n{\n    return max(a, -b);\n}\n\n//p, centre du tore, t.x = rayon du tore, t.y = rayon de l'anneau\n//ces fonctions ont été récupérer à partir de ce site : https://iquilezles.org/articles/distfunctions\nfloat sdTorus(vec3 p, vec2 t)\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\n\n//Distance signé de la boîte\n//p : point\n//b : dimensions de la boîte\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\n//Distance signé par rapport à un cylindre\n//Cette fonction a été légèrement modifié car les paramètres r et h étaient inversé.\n//p : point\n//h : hauteur\n//r : rayon\n\nfloat sdCappedCylinder( vec3 p, float r, float h)\n{\n    vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n///////FIN DES FONCTIONS DU SITE \n\n//translation\n//pos : vecteur\n//p : point\nvec3 Translate(vec3 vec, vec3 p)\n{\n    return p - vec;\n}\n\n//mise à l'échelle\n//scale: vecteur comportant les facteurs x, y, z pour agrandir/retrécir\n//p : point\nvec3 Scale(vec3 scale, vec3 p)\n{\n    return vec3(p.x / scale.x, p.y/ scale.y, p.z / scale.z);\n}\n\n//rotation sur l'axe des X\n//p : point\n//theta : angle de roration demandé ici en radians\nvec3 RotateX(float theta, vec3 p)\n{\n    float sinVal = sin(theta);\n    float cosVal = cos(theta);\n\n    //matrice de rotation sur l'axe X\n    mat3 M = mat3(  1,     0,     0,\n                    0,  cosVal, -sinVal,\n                    0,  sinVal,  cosVal);\n\n    //application de la rotation par le produit de la matrice et du point\n    return M*p;\n}\n\n//rotation sur l'axe des Y\n//p : point\n//theta : angle de roration demandé ici en radians\nvec3 RotateY(float theta, vec3 p)\n{\n    float sinVal = sin(theta);\n    float cosVal = cos(theta);\n\n    mat3 M = mat3( cosVal,    0,  -sinVal,\n                    0,      1,      0,\n                   sinVal,    0,   cosVal);\n\n    return M*p;\n}\n\n//rotation sur l'axe des Z\n//p : point\n//theta : angle de roration demandé ici en radians\nvec3 RotateZ(float theta, vec3 p)\n{\n\n    float sinVal = sin(theta);\n    float cosVal = cos(theta);\n\n    mat3 M = mat3(  cosVal,  -sinVal,   0,\n                    sinVal,   cosVal,   0,\n                    0,      0,      1);\n                    \n    return M*p;\n}\n\n//converse des degrés en radian\n//theta: valeur en degré\nfloat rad(float theta)\n{\n    return theta * 0.0174532925199432957692369;\n}\n\n//p: point\n//tête du personnage\nfloat Head(vec3 p)\n{\n    //chapeau\n    p = RotateY(rad(90.0), p);\n    float v = Sphere(p, vec3(0.0, 0.0, 0.0), 2.0);\n    v = Intersection(v, Sphere(p, vec3(2.8, 0.0, 0.0), 2.0));\n    v = Union(v, Sphere(p, vec3(2.2, 0.0, 0.0), 0.3));\n\n    \n    //rotation de 90 degré puis déplacer du tore\n    vec3 tmp = RotateZ(rad(120.0), p);\n    tmp = Translate(vec3(0.1, 0.2, 0.0), tmp);\n    v = Union(v, sdTorus(tmp, vec2(0.4, 0.04)));\n\n\n    //visage\n    v = Union(v, Sphere(p, vec3(1.0, 0.0, 0.0), 1.0));\n\n    //nez\n    p = Scale(vec3(0.2, 0.2, 0.2), p);\n    p = Translate(vec3(2.0, 4.0, 0.0), p);\n    v = Union(v, sdCappedCylinder(p, 1.0, 2.0));\n\n    //eyes\n    p = Translate(vec3(2.0, -1.0, 2.0), p);\n    v = Union(v, Sphere(p, vec3(0.0, 0.0, 0.0), 1.8));\n\n    p = Translate(vec3(0.0, 0.0, -4.0), p);\n    v = Union(v, Sphere(p, vec3(0.0, 0.0, 0.0), 1.8));\n\n    //cou\n    //p = Translate(vec3(-7.0, 0.0, 0.0), p);\n    p = RotateZ(rad(90.0), p);\n    p = Translate(vec3(-3.0, 5.0, 2.0), p);\n    v = Union(v, sdCappedCylinder(p, 1.5, 2.0));\n    \n    return v;\n}\n\n//p : point\n// les bras du personnage\nfloat Arms(vec3 p)\n{\n    //translation vers la droite\n    p = Translate(vec3(-1.6, 0.0, 0.0), p);\n\n    //rotation dans le sens inverse des aiguilles d'une montre\n    p = RotateY(rad(-20.0), p);\n\n    //représentation du bras sous la forme d'un pavé droit\n    float v = sdBox(p, vec3(0.5, 0.5, 1.0));\n\n    //translation vers la gauche \n    p = Translate(vec3(3.0, 0.0, 1.1), p);\n\n    ////rotation dans le sens des aiguilles d'une montre\n    p = RotateY(rad(40.0), p);\n\n    v = Union(v, sdBox(p, vec3(0.5, 0.5, 1.0)));\n\n    return v;\n}\n\n//p : point\n// le corps du personnage\nfloat Body(vec3 p)\n{\n    //translation du torse du personnage\n    p = Translate(vec3(0.0, 0.0, -1.5), p);\n    float v = sdBox(p, vec3(1.5, 0.5, 1.0));\n\n    //ajout de perspective avec un second pavé\n    v = Union(v, sdBox(p, vec3(1.0, 1.0, 1.0)));\n\n    //ajout des bras\n    v = Union(v, Arms(p));\n    return v;\n}\n\n//p : point\n//le personnage\nfloat Pinoccio(vec3 p)\n{\n    float v = Union(Body(p), Head(p));\n    return v;\n}\n\n\n\n// Potential field of the object\n// p : point\n\nfloat object(vec3 p)\n{\n    //rotation de l'obet et agrandissement de l'objet\n    p = Scale(vec3(2.0, 2.0, 2.0), p);\n    p = RotateZ(iTime, p);\n    float v = Pinoccio(p);\n\n  //float tete = difference(v, Sphere(p, vec3(0.0, 0.0, 0.0), 2.0));\n    \n  //v = Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0));\n  //v = difference(Sphere(p, vec3(0.0, 0.0, 1.3), 1.0), v);\n\n\n  return v;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(vec3 p)\n{\n  float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n  // Start at the origin\n  float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>e)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting ----------------------------------------------------------------------------------------------\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// r : Radius for ambient occlusion\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, float r, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,r,h,s);\n        if (!h) {ao+=1.0;}\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n    return mix(vec3(0.452,0.551,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n// Shadowing\n// p : Point\n// n : Normal\n// l : Light direction\nfloat Shadow(vec3 p,vec3 n,vec3 l)\n{\n    bool h;\n    int s;\n    float t = SphereTrace(p+0.1*n,l,100.0,h,s);\n    if (!h)\n    {\n     return 1.0;\n    }\n    return 0.0; \n}\n\n// Shading and lighting\n// p : Point\n// n : Normal at point\n// e : Eye direction\nvec3 Shade(vec3 p, vec3 n, vec3 e)\n{\n     // Point light\n    const vec3 lp = vec3(5.0, 10.0, 25.0);\n    \n    // Light direction to point light\n    vec3 l = normalize(lp - p);\n\n    // Ambient color\n    vec3 ambient = 0.25+0.25*background(n);\n    \n    // Ambient occlusion\n    ambient += 0.15 * AmbientOcclusion(p+0.1*n,n,5.0,50) * vec3(1.0,1.0,1.0);\n    \n    // Shadow computation\n    float s = Shadow(p,n,l);\n    \n    // Phong diffuse\n    vec3 diffuse = 0.35  * clamp(dot(n, l),0.0,1.0) * vec3(1.0,1.0,1.0);\n\n    // Specular\n    vec3 r = reflect(e,n);\n    vec3 specular = 0.25 * pow(clamp(dot(r,l),0.0,1.0),18.0) * vec3(1.0,1.0,1.0);\n    vec3 c = ambient + s * (diffuse + specular);\n    return c;\n}\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t = float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p = (-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip = true;\n    }\n       else\n       {\n           pip = false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n    // Pixel\n    vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n    // Trace ray\n\n    // Hit and number of steps\n    bool hit;\n    int s;\n\n    float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n    // Shade background\n    vec3 rgb = background(rd);\n\n    if (hit)\n    {\n        // Compute normal\n        vec3 n = ObjectNormal(pt);\n\n        // Shade object with light\n        rgb = Shade(pt, n, rd);\n    }\n\n    // Uncomment this line to shade image with false colors representing the number of steps\n    if (pip==true)\n    {\n        rgb = ShadeSteps(s); \n    }\n\n\n    color=vec4(rgb, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}