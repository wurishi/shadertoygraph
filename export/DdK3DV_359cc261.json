{"ver":"0.1","info":{"id":"DdK3DV","date":"1679571979","viewed":68,"name":"Funny Mushroom","username":"RedWool","description":"Infinite Mushrooms","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raycast"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Material\n{\n    vec3 color;\n    float dist;\n};\n\nmat2 rot(float a)\n{\n    return mat2(cos(a),-sin(a),sin(a),cos(a));\n}\n\nMaterial sdfUnion(in Material a, in Material b)\n{\n    bool check = a.dist < b.dist;\n    return Material(\n        check ? a.color : b.color,\n        check ? a.dist : b.dist\n    );\n}\n\nfloat sdfCube(vec3 p, vec3 c, vec3 s)\n{\n    vec3 d = c - p;\n    return length(d-clamp(d,-s,s))-.3;\n}\n\nMaterial map(vec3 p)\n{\n    //vec3 mush = (length(fract(p)-.5) < .4) ? vec3(1) : vec3(.9,.3,.9);\n    vec3 i = floor((p+20.)*.025)*40.-20.;\n    p = mod(p+20.,40.)-20.;\n    \n    p.xz *= rot(iTime*.27+i.y);\n    p.xy *= rot(iTime*.53+i.z);\n    p.yz *= rot(iTime*.169+i.x*2.);\n    \n    //p = mod(p+20.+iTime, 40.)-20.;\n    \n    vec3 mush = (length(fract((p-vec3(4,0,0))*.2)-.5) <.35) ? vec3(1) : vec3(.9,.3,.9);\n    float len = length(i*.025);\n    \n    return sdfUnion(sdfUnion(\n    Material(vec3(1,.3,.3),sdfCube(p, vec3(0), vec3(1))),\n    Material(vec3(1,.6,.6),sdfCube(p, vec3(2,0,0), vec3(1)))),\n    Material(mush,sdfCube(p, vec3(5,0,0),vec3(2,3.+sin(iTime*4.+len),3.+cos(iTime*4.+len)))));\n}\n\nvec2 pow2clamp(vec2 uv)\n{\n    return vec2(pow(uv.x, min(1., uv.x)),pow(uv.y, min(1., uv.y)));\n}\n\nvec3 material(in Material mat, in vec3 pos)\n{\n    return mat.color * (1.-smoothstep(50.,800.,length(pos)));// * pos *.5 + .5;\n}\n\nvec3 rayMarch(out Material mat, in vec3 o, in vec3 d)\n{\n    float dist = 0.;\n    for (int i = 0; i<50; i++)\n    {\n        \n        vec3 co = o + dist * d;\n        mat = map(co);\n        \n        dist += mat.dist;\n        \n        if (mat.dist < .03)\n        {\n            return material(mat, o + dist * d);\n        }\n        else if (mat.dist > 100.)\n        {\n            break;\n        }\n    }\n    return vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-iResolution.xy*.5)/iResolution.y;\n    \n    vec3 o = vec3(0,sin(iTime)*3.,-15) ,//+vec3(uv*12.,0),\n    d = //vec3(0,0,1);\n    normalize(vec3(uv*2.,1));\n    \n    Material mat;\n    \n    // Time varying pixel color\n    vec3 col = rayMarch(mat, o, d);//0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}