{"ver":"0.1","info":{"id":"tttBDj","date":"1613521210","viewed":534,"name":"snow day 2","username":"elenzil","description":"bleep","likes":4,"published":3,"flags":34,"usePreview":0,"tags":["snow"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"snow day 1\" by elenzil. https://shadertoy.com/view/Wl3BD2\n// 2021-02-16 19:36:30\n\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    ivec2 IJ = ivec2(XY);\n\n    vec3 rgb = texelFetch(iChannel0, IJ, 0).rgb;\n    \n\n    RGBA.rgba = vec4(rgb, 1.0);\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\nconst float PI        = 3.14159265259;\nconst float PI2       = (PI * 2.0);\n\nmat2 rot2(float theta) {\n    float c = cos(theta);\n    float s = sin(theta);\n    return mat2(c, s, -s, c);\n}\n\n\n\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#ifdef GRIMOIRE\n#include <common.glsl>\n#endif\n\nvec3 someColors(in vec2 XY) {\n\n//    return vec3((int(XY.x) / 50) % 2);\n\n    float smallRes = min(iResolution.x, iResolution.y);\n    vec2  p = (XY - iResolution.xy * 0.5) / smallRes * 2.0;\n\n    p *= PI2;\n\n    vec3 rgb;\n\n    p *= rot2(iTime *  0.1);\n    rgb.r = cos(p.x * 1.23) + cos(p.y * 1.04);\n    p *= rot2(iTime * -0.15);\n    rgb.g = cos(p.x * 1.31) + cos(p.y * 1.24);\n    p *= rot2(iTime *  0.1);\n    rgb.b = cos(p.x * 1.21) + sin(p.y * 1.41);\n\n    rgb = rgb * 0.25 + 0.5;\n    \n    rgb *= vec3(sin(length(p) * 1.5) * 0.1 + 0.9);\n\n    rgb = mix(rgb, texture(iChannel1, vec2(1.0, 0.0) + XY/iResolution.xy * vec2(-1.0, 1.0)).rgb, sin(iTime) * 0.1 + 0.1);\n\n\n    return rgb;\n}\n\n\nconst ivec2 iUp = ivec2( 0, 1);\nconst ivec2 iUL = ivec2(-1, 1);\nconst ivec2 iUR = ivec2( 1, 1);\n\nbool amRight(int i) {\n    return bool(i & 0x1);\n}\n\nvoid mainImage(out vec4 RGBA, in vec2 XY) {\n    bool reset = (iFrame == 0 || iMouse.z > 10.0);\n    vec2 UV = XY/iResolution.xy;\n    \n    RGBA.rgb = someColors(XY);\n    \n    float smallRes = min(iResolution.x, iResolution.y);\n    vec2  p     = (XY * 2.0 - iResolution.xy) / smallRes;\n    p *= 1.8;\n    \n    float theta = atan(p.y, p.x);\n    float r     = sin(theta * 5.0 + iTime * 1.8);\n    \n    vec2 v1 = normalize(p) * -1.0;\n    vec2 v2 = vec2(-v1.y, v1.x);\n    v1 /= iResolution.xy;\n    v2 /= iResolution.xy;\n    v2 *= 3.0;\n    vec3 c1 = texture(iChannel0, UV + v1     ).rgb;\n    vec3 c2 = texture(iChannel0, UV + v1 + v2).rgb;\n    vec3 c3 = texture(iChannel0, UV + v1 - v2 * 0.5).rgb;\n    vec3 c  = (c1 + c2 + c3) / 3.0;\n    \n    RGBA.rgb = mix(RGBA.rgb, c, 1.0 * vec3(smoothstep(0.9, 1.1, length(p) + r * 0.4)));\n}\n\n#ifdef GRIMOIRE\nout vec4 fragColor; void main() { mainImage(fragColor, gl_FragCoord.xy); }\n#endif\n\n","name":"Buffer A","description":"","type":"buffer"}]}