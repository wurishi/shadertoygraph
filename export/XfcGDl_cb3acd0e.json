{"ver":"0.1","info":{"id":"XfcGDl","date":"1712236857","viewed":36,"name":"Fork Voronoi -  Ade0n 830","username":"Ade0n","description":"Basic Voronoi pattern.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","voronoi","worley"],"hasliked":0,"parentid":"MslGD8","parentname":"Voronoi - basic"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2013 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n\n\nvec2 hash( vec2 p )\n{\n    //p = mod(p, 4.0); // tile\n    p = vec2(dot(p,vec2(127.1,311.7)),\n             dot(p,vec2(269.5,183.3)));\n    return fract(sin(p)*18.5453);\n}\n\n/* Minkowski distance */\n/* https://en.wikipedia.org/wiki/Minkowski_distance */ \nfloat minkowskiDistance(float p1, float p2, float power) {\n\tfloat d1 = pow(abs(p1 - p2), power);\n\treturn pow(d1, 1.0 / power);\n}\n\nfloat minkowskiDistance(vec2 p1, vec2 p2, float power) {\n\tfloat d1 = pow(abs(p1.x - p2.x), power);\n\tfloat d2 = pow(abs(p1.y - p2.y), power);\n\treturn pow(d1 + d2, 1.0 / power);\n}\n\nfloat minkowskiDistance(vec3 p1, vec3 p2, float power) {\n\tfloat d1 = pow(abs(p1.x - p2.x), power);\n\tfloat d2 = pow(abs(p1.y - p2.y), power);\n\tfloat d3 = pow(abs(p1.z - p2.z), power);\n\treturn pow(d1 + d2 + d3, 1.0 / power);\n}\n\n\n// return distance, and cell id\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 10.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n      //vec2  r = g - f + o;\n\t    vec2  r = g - f + (-0.8+0.9*o);\n        \n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy/max(iResolution.x,iResolution.y);\n    \n    // computer voronoi patterm\n    vec2 c = voronoi( (20.5)*p );\n\n    // colorize\n    vec3 col = 0.5 + 0.25 * cos( c.y*6.2831 + vec3(0.0,1.0,2.0) ) + 0.25 * cos( c.y*3.2831 + vec3(1.0,2.0,0.0) );\t\n    //col *= clamp(1.0 - 0.4*c.x*c.x,0.0,1.0);\n   // col -= (1.0-smoothstep( 0.08, 0.09, c.x));\n   \n   //if (c.x > 0.2) {\n       c.x = smoothstep(0.0, 1.0, c.x); \n   //}\n\t\n    fragColor = vec4( vec3(c.x), c.x) ;\n}","name":"Image","description":"","type":"image"}]}