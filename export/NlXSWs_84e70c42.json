{"ver":"0.1","info":{"id":"NlXSWs","date":"1626771581","viewed":294,"name":"Analog Fractal","username":"Tater","description":"I saw this video by Code Parade and had to try it for myself. Mousable.\n[url]https://www.youtube.com/watch?v=Pv26QAOcb6Q[/url]\n\nThe code is fairly easy to change, if you make something cool please leave a comment :D","likes":7,"published":3,"flags":32,"usePreview":0,"tags":["2d","fractal","mouse","feedback"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 col = texture(iChannel0,uv).rgb;\n    \n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Processed by 'GLSL Shader Shrinker' (for reformating)\n// (https://github.com/deanthecoder/GLSLShaderShrinker)\n\n#define rot(a)\tmat2(cos(a), sin(a), -sin(a), cos(a))\n#define sat(a, b)\tclamp(a, -b, b)\n#define undo(uv)\t(((uv * iResolution.y) + 0.5 * iResolution.xy) / iResolution.xy)\n\n//Change this to see the projected screens that create the fractal;\n#define viewScreens\tfalse\n\n//iq palette\nvec3 pal(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d) { return a + b * cos(6.28318 * (c * t + d)); }\n\nvec3 texCam(vec2 uv, vec2 p, float rot, float scale) {\n\tuv -= p;\n\tuv *= rot(rot);\n\tuv /= scale;\n\tuv = undo(uv);\n\tfloat m = 1.0;\n\tif (viewScreens) m = 0.0;\n\treturn mix(texture(iChannel1, uv).rgb, texture(iChannel0, uv).rgb, m) * step(uv.x, 1.0) * step(uv.y, 1.0) * step(0.0, uv.x) * step(0.0, uv.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n\tvec3 col = vec3(0.0);\n\tfloat t = iTime;\n\n\t//3 Copies of the current screen with some animation\n\tcol += texCam(uv, vec2(-0.1 + sin(t * 0.2 + 1.0) * 0.4, 0.1 + sin(t * 0.1 + 4.0) * 0.2), 0.4 + t * 0.4, 0.6);\n\tcol += texCam(uv, vec2(0.1 + sin(t * 0.4 + 2.0) * 0.4, -0.1 + sin(t * 0.3 + 5.0) * 0.2), 2.7 + t * 0.6, 0.8);\n\tcol += texCam(uv, vec2(0.0 + sin(t * 0.6 + 3.0) * 0.4, 0.0 + sin(t * 0.8 + 6.0) * 0.2), 0.3 + t, 0.3);\n\n\t//Something on screen to get it going\n\tvec3 ballcol = pal(floor(t * 0.5) * 0.25, vec3(0.5), vec3(0.5), vec3(1), vec3(0, 0.33, 0.66));\n\tvec2 ballpos = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n\tif (iMouse.z > 0.0) col += ballcol * step(length(vec2(uv - ballpos)), 0.1);\n\telse col += ballcol * step(length(vec2(uv.x + sin(t) * 0.2, uv.y + cos(t) * 0.2)), 0.1);\n\n\t//Reduce the color to prevent it from getting too bright\n\tcol *= 0.85;\n\tcol = clamp(col, 0.0, 1.0);\n\tfragColor = vec4(col, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}