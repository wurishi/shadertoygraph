{"ver":"0.1","info":{"id":"WsS3D1","date":"1548718065","viewed":132,"name":"Zoomed in crystal","username":"cbrpnk","description":"everyday","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["marching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 1000.\n\nvec2 rotate(vec2 p, float a)\n{\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c) * p;\n}\n\nfloat sdfSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdfCapsule(vec3 p, float r)\n{\n    return length(p-vec3(0., clamp(p.y, -1., 1.), 0.)) - r;\n}\n\nfloat random(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(123.2345, 789.4548))) * 594875.2344);\n}\n\nfloat map(vec3 p)\n{ \n    p.xz = rotate(p.xz, iTime*.25);\n    p.yz = rotate(p.yz, iTime*.25);\n    p = mod(p+vec3(15.), 30.)-vec3(15.);\n    \n    // electrons\n    float speed = iTime*10.;\n    vec3 ep = p;\n    float e1 = sdfSphere(ep+vec3(4.*sin(speed), 0., 4.*cos(speed)), .1);\n    ep.xy = rotate(ep.xy, 1.);\n    float e2 = sdfSphere(ep+vec3(4.*cos(speed), 0., 4.*sin(speed)), .1);\n    ep.xy = rotate(ep.xy, 1.);\n    float e3 = sdfSphere(ep+vec3(4.*cos(speed+3.), 0., 4.*sin(speed+3.)), .1);\n    \n    //float s = sdfSphere(p, 1.5);\n    float size = 1. + random(vec2(iTime))*.05;\n    float n1 = sdfCapsule(p, size);\n    size = 1. + random(vec2(iTime+1.))*.01;\n    float n2 = sdfCapsule(p.yxz, size);\n    size = 1. + random(vec2(iTime+2.))*.05;\n    float n3 = sdfCapsule(p.xzy, size);\n    \n    float d = min(n1, n2);\n    d = min(d, n3);\n    d = min(d, e1);\n    d = min(d, e2);\n    d = min(d, e3);\n    \n    return d;\n}\n\nfloat march(vec3 o, vec3 dir)\n{\n    float d=0.;\n    for(int i=0; i<328; ++i) {\n        float dst = map(o + dir*d);\n        if(dst < .001) break;\n        if(d > MAX_DIST) return -1.;\n        d += dst;\n    }\n    return d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    return normalize(vec3(\n    \tmap(p+vec3(.001, 0., 0.)) - map(p-vec3(.001, 0., 0.)),\n        map(p+vec3(.0, 0.001, 0.)) - map(p-vec3(.0, 0.001, 0.)),\n        map(p+vec3(.0, 0., 0.001)) - map(p-vec3(.0, 0., 0.001))\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\n    // Time varying pixel color\n    vec3 eye = vec3(0., 0., 10.);\n    vec3 target = normalize(vec3(uv.x, uv.y, -1.));\n    eye += random(vec2(iTime))*.02;\n    \n    \n    float d = march(eye, target);\n    \n    \n    vec3 col;\n    if(d < 0.) {\n    \tcol = vec3(1.) * pow(dot(target, vec3(0., 0., -1.)), 2.);\n    } else {\n        vec3 normal = getNormal(eye+d*target);\n    \tcol += vec3(1.) * 1.-abs(dot(target, normal));\n        col *= pow(vec3(normal.r+normal.g+normal.b), vec3(.3));\n        //col += vec3(20.9);\n        \n    }\n\n    // Output to screen\n    col = pow(col, vec3(2.2));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}