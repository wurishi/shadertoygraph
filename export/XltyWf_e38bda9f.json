{"ver":"0.1","info":{"id":"XltyWf","date":"1543982346","viewed":145,"name":" synmin3 - three way symin demo ","username":"TLC123","description":" some issues wit internal distances","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","sort","smin","3way","threeway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \" smin3 - three way smin demo \" by TLC123. https://shadertoy.com/view/XttyDj\n// 2018-08-16 16:38:36\n\n#define time iTime\n#define tau 6.28318530718\n\n//  Slight expansion of https://www.shadertoy.com/view/4sSyRy\n//  Symetric multi smin\n\n//  Expandable to any n distances if efficient sorting can be found.\n//  Really only the smallest 3-4 distances needs to be found to cover most cases. \n\n//  To the left: regular nested smin, asymmetric result. (Thanks Doug for pointing this example out.)\n//  Middle: smin3 sorted nested smin acending order, expected rounded result\n//  Right: smin3 sorted nested smin decending order, Blended but sharp result\n\n\n//float smin(float a, float b, float k)\n//{\n//\tfloat h = clamp(.5 + .5*(a-b)/k, 0., 1.);\n//\treturn mix(a, b, h) - k*h*(1.-h);\n//}\nfloat  synminex(float a,float  b,float  r  ) {\n    // drop-in function for smin  \n\t float height=1.;\n     float width=1./18.;\n     float valleytreshold=0.4;\n        float  e =   max(valleytreshold,(abs(a-b)/r) );\n        return min (a,b)- max(width,   (r*height*e*(exp(1.0-(e*.25  ))))/max(a,b)*0.15)\n      \n \n            ;}\n            \n float  smin( float a, float b,float k )\n{\n    float h =  clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 ) ;\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n \n\nfloat synminsmin( float a, float b,float k )\n{\n    float h =pow( clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 ),1.75);\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n \nfloat synmin ( float a, float b, float k ,float m)\n{\nfloat d=\nmin(a,b)+\n(synminsmin(a,b,k)-min(a,b))*1.85*m- //exaggerated radus\n(synminsmin(a,b,k/2.)-min(a,b))*3.5*m+ //minus valley\n(synminsmin(a,b,k/16.)-min(a,b))*2.25*m ; // addback tiny radiud in bottom of valley\n \nreturn      d; //\n}\n \nfloat synmin3(float a, float b, float c, float k)\n{\n    float mini=min(a,min(b,c));\n    float maxi=max(a,max(b,c));\n\tfloat medi=(a+b+c)-(mini+maxi);\n   // return smin( mini,smin(maxi, medi, k), k);  // combined from max to min \n    return synmin( medi,  mini , k,k); // gives diffrent result than from min to max\n    //return smin( a,smin(b,c, k), k); // Bad 3 way smin \n    \n}\n \nfloat sminex2( float a, float b, float k )\n{    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);}\n\n \n\nfloat smin3maxfirst(float a, float b, float c, float k)\n{\n    float mini=min(a,min(b,c));\n    float maxi=max(a,max(b,c));\n\tfloat medi=(a+b+c)-(mini+maxi);\n    return synmin( mini, (  maxi ), k,k);  // combined from max to min \n    //return smin( maxi,smin(mini, medi, k), k); // gives diffrent result than from min to max\n    //return smin( a,smin(b,c, k), k); // Bad 3 way smin \n    \n}\nfloat smin3(float a, float b, float c, float k)\n{\n    float mini=min(a,min(b,c));\n    float maxi=max(a,max(b,c));\n\tfloat medi=(a+b+c)-(mini+maxi);\n   // return smin( mini,smin(maxi, medi, k), k);  // combined from max to min \n    return synmin( medi,  mini , k,k*2.); // gives diffrent result than from min to max\n    //return smin( a,smin(b,c, k), k); // Bad 3 way smin \n    \n}\nfloat smin3bad(float a, float b, float c, float k)\n{\n   // float mini=min(a,min(b,c));\n   // float maxi=max(a,max(b,c));\n   // float medi=(a+b+c)-(mini+maxi);\n   // return smin( mini,smin(maxi, medi, k), k);  // combined from max to min \n    //return smin( maxi,smin(mini, medi, k), k); // gives diffrent result than from min to max\n    return synmin( a,synmin(b,c, k,k), k,k); // Bad 3 way smin \n    \n}\n\n \n\nfloat map(vec2 uv)\n{float rs=.65;\n    float rv=.125*rs;    float rrv=.25*rs;float rr=.5;float rrr=.25;\nfloat r1=(abs(sin(time+3.) )*0.35+0.5)*rs;\nfloat r2=(abs(sin(time+3.3) )*0.35+0.5)*rs;\nfloat r3=(abs(sin(time+3.9) )*0.35+0.5)*rs;\n\tfloat ac0 = length(uv-vec2(0.,0.29)-vec2( r1*rrr*sin(2.*-time),         \t-r1*rrr*cos(2.*-time)\t))-rrv;\n\tfloat ac1 = length(uv-vec2(0.,0.29)-vec2( r1*rrr*sin(2.*-time+tau/3.),\t    -r1*rrr*cos(2.*-time+tau/3.)\t))-rrv;\n\tfloat ac2 = length(uv-vec2(0.,0.29)-vec2( r1*rrr*sin(2.*-time+tau*2./3.),\t-r1*rrr*cos(2.*-time+tau*2./3.)\t))-rrv;\n\tfloat bc0 = length(uv-vec2(.5,-0.29)-vec2( r2*rr*sin(1.*time),\t             r2*rr*cos(1.*time)\t))-rv;\n\tfloat bc1 = length(uv-vec2(.5,-0.29)-vec2( r2*rr*sin(1.*time+tau/3.),\t     r2*rr*cos(1.*time+tau/3.)\t))-rv;\n\tfloat bc2 = length(uv-vec2(.5,-0.29)-vec2( r2*rr*sin(1.*time+tau*2./3.),\t r2*rr*cos(1.*time+tau*2./3.)\t))-.1;\n\tfloat cc0 = length(uv-vec2(-.5,-0.29)-vec2( r3*rr*sin(1.*time),\t             r3*rr*cos(1.*time)\t))-rv;\n\tfloat cc1 = length(uv-vec2(-.5,-0.29)-vec2( r3*rr*sin(1.*time+tau/3.),\t     r3*rr*cos(1.*time+tau/3.)\t))-rv;\n\tfloat cc2 = length(uv-vec2(-.5,-0.29)-vec2( r3*rr*sin(1.*time+tau*2./3.),\t r3*rr*cos(1.*time+tau*2./3.)\t))-rv;\nfloat prop1= min( min(ac0,ac1),ac2)-(sin(iTime/3.32)*0.5+.5)*0.09;\nfloat prop2= min( min(bc0,bc1),bc2)-(sin(iTime/7.2)*0.5+.5)*0.09;\nfloat prop3= min( min(cc0,cc1),cc2)-(sin(iTime/5.43)*0.5+.5)*0.09;\n    return synmin3(prop1,prop2,prop3,.75);\n   // return prop1;\n}\n\nvec3 draw_line(float d, float thickness) {\n  const float aa = 3.0;\n  return vec3(smoothstep(0.0, aa / iResolution.y, max(0.0, abs(d) - thickness)));\n}\n\nvec3 draw_line(float d) {\n  return draw_line(d, 0.0025);\n}\n\nfloat draw_solid(float d) {\n  return smoothstep(0.0, 3.0 / iResolution.y, max(0.0, d));\n}\n\nvec3 draw_distance(float d) {\n  float t = clamp(d * 0.85, 0.0, 1.0);\n  vec3 grad = mix(vec3(1, 0.8, 0.5), vec3(0.3, 0.8, 1), t);\n\n  float d0 = abs(1.0 - draw_line(mod(d + 0.1, 0.2) - 0.1).x);\n  float d1 = abs(1.0 - draw_line(mod(d + 0.025, 0.05) - 0.025).x);\n  float d2 = abs(1.0 - draw_line(d).x);\n  vec3 rim = vec3(max(d2 * 0.85, max(d0 * 0.25, d1 * 0.06125)));\n\n  grad -= rim;\n  grad -= mix(vec3(0.05, 0.35, 0.35), vec3(0.0), draw_solid(d));\n\n  return grad;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ((2.*fragCoord.xy-iResolution.xy)/iResolution.y)/1.4;\n\tfloat t = 1./iResolution.y;\n float d=map(uv);\n\tfloat c = smoothstep(-t,t,d)-length(uv)/8.;\n    \tfloat c1 = d;//smoothstep(-1.,1.,d)-length(uv)/8.;\n     float len = c1*1.5;\n    vec3 col = vec3(1.);\n\n        //distance field coloring by iq https://www.shadertoy.com/view/4lcBWn\n        col = vec3(1.0) - sign(len) * vec3(0.1, 0.4, 0.7);\n        col *= 1.0 - exp(-iResolution.y * 0.008 * abs(len));\n        col *= 0.8 + 0.2 * cos(iResolution.y * 0.3 * abs(len));\n        col = mix(col, vec3(1.0), max(1.0 - abs(len) * iResolution.y * 0.2, 0.0));\n \n        fragColor = vec4(col  , 1.0);\n\t //fragColor =  vec4(   draw_distance(  d*2.),0.  );\n}\n","name":"Image","description":"","type":"image"}]}