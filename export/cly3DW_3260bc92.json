{"ver":"0.1","info":{"id":"cly3DW","date":"1685695032","viewed":363,"name":"Pathtracer V2","username":"gcgac","description":"Welcome to my second pathtracing engine! Soon I'll need to tackle refraction...\nFeatures:\nReflections\nBloom\nDiffuse surfaces\nBuilt-in ceiling lights\nReflection fuzz\nDepth of field\nAntialiasing\nSky light (not in this scene)\nAccuracy\nACES tonemapping","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["ray","gi","global","illumination","marching","pathtracer","tracing"],"hasliked":0,"parentid":"DlG3W1","parentname":"Reflections in reflections in..."},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float gamma = 2.2;\n\nvec3 saturate(vec3 x){return min(vec3(1.0), max(vec3(0.0), x));}\n\nvec3 ACESFilm(vec3 x){\n    float a = 2.51;\n    float b = 0.03;\n    float c = 2.43;\n    float d = 0.59;\n    float e = 0.14;\n    return saturate((x*(a*x+b))/(x*(c*x+d)+e));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 data = texture(iChannel0,uv);\n    vec3 c = data.xyz/data.w;\n    fragColor = vec4(pow(ACESFilm(vec3(c)+texture(iChannel1,uv).xyz/5.0),vec3(1.0/gamma)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Thanks to Inigo Quilez for the PRNG and normal function\n\n\nint seed = 3;\nfloat aperture_size = 3.0;\nfloat light = 0.0;\nvec3 skycol = vec3(0.3);\nfloat fuzz;\nfloat bri = 0.9;\nvec3 rgb;\nfloat refl;\nint frand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat rand(void) { return float(frand())/32767.0; }\nvec3 point;\nfloat hash1( uint n ) {\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uint(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nfloat sde;\nvec3 pos;\nfloat maxl = 10000.0;\n\n\nfloat plane_sde(vec3 ray, vec3 nor, float planey, vec3 col, float l, float ref, float f){\n    if (dot(ray,nor)+planey < sde){\n        sde = dot(ray,nor)+planey;\n        refl = ref;\n        fuzz = f;\n        rgb = col;\n        light = l;\n        if (nor.y==1.0 && mod(mod(round(ray.x/10.0),2.0)+mod(round(ray.z/10.0),2.0),2.0)<1.0){\n            rgb = vec3(0.1);\n        }\n        if (light == 1.0){\n            if(abs(ray.x)>10.0 || abs(ray.z-80.0)>10.0){\n                light = 0.0;\n                rgb = vec3(bri);\n            }\n        }\n    }\n    return dot(ray,nor)+planey;\n}\n\n\nfloat sphere_sde(vec3 ray, vec3 position, float radius, vec3 col, float l, float ref, float f){\n    if (length(position-ray)-radius < sde){\n        sde = length(position-ray)-radius;\n        fuzz = f;\n        refl = ref;\n        rgb = col;\n        light = l;\n    }\n    return length(position-ray)-radius;\n}\n\n \nfloat calc_sdf(vec3 ray){\n    sde = maxl;\n    sphere_sde(ray,vec3 (-21.0,0.0,80.0),10.0, vec3(bri,0.0,0.0),0.0,0.3,0.0);\n    plane_sde(ray,vec3(0,1,0),10.0, vec3(bri,bri,bri),0.0,0.3,0.0);\n    plane_sde(ray,vec3(1,0,0),31.0, vec3(0,bri,0),0.0,0.0,0.0);\n    plane_sde(ray,vec3(0,-1,0),30.0, vec3(4.0),1.0,0.0,0.0);\n    plane_sde(ray,vec3(0,0,-1),111.0, vec3(bri,bri,bri),0.0,0.6,0.2);\n    plane_sde(ray,vec3(0,0,1),21.0, vec3(0,0,0),0.0,0.0,0.0);\n    plane_sde(ray,vec3(-1,0,0),31.0, vec3(bri,0,0),0.0,0.0,0.0);\n    sphere_sde(ray,vec3 (0.0,-2.0,80.0),8.0, vec3(0,bri,bri),0.0,0.0,0.0);\n    sphere_sde(ray,vec3 (21.0,0.0,80.0),10.0, vec3(bri,bri,bri),0.0,0.1,0.0);\n    return sde;\n}\n\n\nvec3 calcNormal( in vec3 p ) // for function f(p)\n{\n    const float eps = 0.0001; // or some other value\n    const vec2 h = vec2(eps,0);\n    return normalize( vec3(calc_sdf(p+h.xyy) - calc_sdf(p-h.xyy),\n                           calc_sdf(p+h.yxy) - calc_sdf(p-h.yxy),\n                           calc_sdf(p+h.yyx) - calc_sdf(p-h.yyx) ) );\n}\n\n\nvec4 raycol(vec3 orig, vec3 dir, float ml){\n    float len = 0.0;\n    light = 0.0;\n    sde = ml;\n    float steps = 0.0;\n    pos = orig;\n\n    while (len < ml && sde > 0.01){\n        sde = abs(calc_sdf(pos));\n        pos += dir*sde;\n        len += sde;\n        steps += 1.0;\n    }\n    return vec4(pos,steps);\n}\n\n\nvec3 sphrand(){\n    point = vec3(2.0);\n    while(length(point)>=1.0){\n        point = vec3(rand()*2.0-1.0,rand()*2.0-1.0,rand()*2.0-1.0);\n    }\n    return point;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 newfrag = vec2(fragCoord.x+iResolution.x/2.0,fragCoord.y+iResolution.y/2.0); \n    uvec2 p = uvec2((newfrag-.5*iResolution.xy)/iResolution.y*1000.0);\n    seed = int(round(hash1( p.x + 1920U*p.y + (1920U*1080U))*100.0*(float(iFrame)+1.0)));\n    vec2 th = fragCoord/iResolution.xy;\n    vec3 colour = vec3(0);\n    for (int i = 0; i<1; i++){\n        vec2 ap = sphrand().xy;\n        float contrib = 1.0;\n        vec3 pos = vec3(ap.x*aperture_size,ap.y*aperture_size+10.0,-5.0);\n        vec3 opos = vec3(0,10.0,-5.0);\n        vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y+sphrand().xy/iResolution.xy;\n        vec3 odir = normalize(vec3(uv.x,uv.y,1.0))*85.0+opos;\n        vec3 direction = normalize(odir-pos);\n        vec4 o;\n        float steps;\n        o = raycol(pos,direction,500.0);\n        vec3 newdir;\n        newdir = direction;\n        float bounces = 0.0;\n        if (sde <= 0.01){\n            vec3 fcol = vec3(1);\n            sde = 0.01;\n            float bounces = 0.0;\n            while (abs(sde)<=0.01 && bounces<11.0 && light == 0.0){    \n                float r = rand();\n                float pref = refl;\n                vec3 offset = sphrand();\n                vec3 pre = rgb;\n                float pf = fuzz;\n                vec3 normal = calcNormal(o.xyz);\n                steps =o.w;\n                vec3 inter = o.xyz+normal/10.0;\n                if (pref<rand()){\n                    newdir = sphrand();\n                    if (dot(newdir,normal)<0.0){\n                        newdir *= -1.0;\n                    }\n                    contrib = max(dot(normal,normalize(newdir)),0.0);\n                } else{\n                    newdir = reflect(newdir,normal)+sphrand()*pf;\n                    pre = vec3(bri);\n                    contrib = (2.0*(1.0-(max(dot(normal,normalize(newdir)),0.0))/2.0))*max(dot(normal,normalize(newdir)),0.0);\n                }\n                fcol *= pre;\n                newdir = normalize(newdir);\n                o = raycol(inter,newdir,1000.0);\n                rgb *= contrib*2.0;\n                bounces += 1.0;\n            }\n            if (sde>0.01){\n                colour += fcol*skycol;\n            } else{\n                if (light == 1.0){\n                    colour += fcol*rgb;\n                }\n            }\n        }else{\n            colour += vec3(skycol);\n        }\n    }\n    colour /= 1.0;\n    vec4 data = texture(iChannel0,th);\n    data += vec4(colour,1);\n    fragColor = data;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// thanks mrharicot for this gaussian blur I modified slightly (used for bloom)\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nvec3 tex(vec2 fc, int i, int j){\n    vec4 t = texture(iChannel0, (fc+vec2(float(i),float(j))) / iResolution.xy);\n    vec3 c = t.xyz/t.w;\n    if(c.x+c.y+c.z<5.1){\n        c = vec3(0);\n    }\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//declare stuff\n\tconst int mSize = 11;\n\tconst int kSize = (mSize-1)/2;\n\tfloat kernel[mSize];\n\tvec3 final_colour = vec3(0.0);\n\t\n\t//create the 1-D kernel\n\tfloat sigma = 7.0;\n\tfloat Z = 0.0;\n\tfor (int j = 0; j <= kSize; ++j)\n\t{\n\t\tkernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n\t}\n\t\t\n\t//get the normalization factor (as the gaussian has been clamped)\n\tfor (int j = 0; j < mSize; ++j)\n\t{\n\t\tZ += kernel[j];\n\t}\n\t\t\n\t//read out the texels\n\tfor (int i=-kSize; i <= kSize; ++i)\n\t{\n\t\tfor (int j=-kSize; j <= kSize; ++j)\n\t\t{\n\t\t\tfinal_colour += kernel[kSize+j]*kernel[kSize+i]*tex(fragCoord.xy,i,j);\n\t\n\t\t}\n\t}\n\t\t\n\t\t\n\tfragColor = vec4(final_colour/(Z*Z), 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}