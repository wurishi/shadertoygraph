{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"bool ptInTri(vec2 p, vec2 p0, vec2 p1, vec2 p2) {\n    float A = 1.0/2.0 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n    float sign_ = A < 0.0 ? -1.0 : 1.0;\n    float s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign_;\n    float t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign_;\n    \n    return s > 0.0 && t > 0.0 && (s + t) < 2.0 * A * sign_;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iTime;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    uv.x = 1.0 + (((iResolution.x - iResolution.y) / (2.0*iResolution.y))) - (fragCoord.x / iResolution.y);\n\n    float stroke = 0.01;\n\tvec2 triA1 = vec2(0.5,0.6);\n    vec2 triA2 = vec2(0.95,0.1);\n    vec2 triA3 = vec2(0.05,0.1);\n    vec2 triB1 = vec2(triA1.x, triA1.y - stroke);\n    vec2 triB2 = vec2(triA2.x - stroke, triA2.y + stroke/2.0);\n    vec2 triB3 = vec2(triA3.x + stroke, triA3.y + stroke/2.0);\n    \n    if(ptInTri(uv, triA1, triA2, triA3) && !ptInTri(uv,triB1, triB2, triB3)) {\n    \tfragColor = vec4(0.37,0.43,0.54,1.0);\n    } else {\n        fragColor = vec4(0,0,0,1.0);\n    }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lsBXWw","date":"1412537732","viewed":175,"name":"triiiiangle","username":"hugo","description":"My 2nd shader!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["shit"],"hasliked":0,"parentid":"","parentname":""}}