{"ver":"0.1","info":{"id":"MXlXWX","date":"1710108056","viewed":90,"name":"gyroid sphere","username":"DeltaT","description":"featuring crappy lighting","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","gyroid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 256.\n#define MAX_ITER 512\n\nfloat scene(vec3 p) {\n    return min(max(length(p)-1., abs(dot(sin(p*10.+iTime), cos(p.zxy*10.+iTime))*.05)-.01), p.z+1.);\n}\n\nfloat raymarch(vec3 p, vec3 raydir) {\n    float distcam = 0.;\n    for (int i = 0; i < MAX_ITER && distcam < MAX_DIST; i++) {\n        float distscene = scene(p);\n        if (distscene < 0.001) { return distcam; }\n        p += distscene*raydir;\n        distcam += distscene;\n    }\n    return -1.;\n}\n\nvec3 normal(vec3 p) {\n    vec2 e = vec2(.001, 0);\n    return normalize(scene(p)-vec3(scene(p-e.xyy), scene(p-e.yxy), scene(p-e.yyx)));\n}\n\nvec3 rotate(vec3 v, float xy, float yz) {\n    float c1 = cos(yz);\n    float s1 = sin(yz);\n    float c2 = cos(xy);\n    float s2 = sin(xy);\n    //vec3 v1 = vec3(v.x, 0, 0) + c1*vec3(0, v.y, v.z) + s1*vec3(0, -v.z, v.y);\n    vec3 v1 = vec3(v.x, c1*v.y-s1*v.z, c1*v.z+s1*v.y);\n    //return vec3(0, 0, v1.z) + c2*vec3(v1.x, v1.y, 0) + s2*vec3(-v1.y, v1.x, 0);\n    return vec3(c2*v1.x-s2*v1.y, c2*v1.y+s2*v1.x, v1.z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    vec2 mouse = iMouse.xy == vec2(0) ? vec2(0) : (iMouse.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec3 col = vec3(.5);\n    vec3 cam = rotate(vec3(0, -1.8, 0), 2.*mouse.x, -2.*mouse.y);\n    vec3 raydir = rotate(normalize(vec3(uv.x, 1, uv.y)), 2.*mouse.x, -2.*mouse.y);\n    float d = raymarch(cam, raydir);\n    if (d != -1.) {\n        vec3 p = cam+raydir*d;\n        vec3 n = normal(p);\n        vec3 light = vec3(4, -4, 4);\n        vec3 l = normalize(light-p);\n        float diff = dot(n, l);\n        float shadow = raymarch(p+n*.002, l) == -1. ? 1. : 0.;\n        col = (shadow*diff*.8+.2)*vec3(1, .9, .7);\n    }\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}