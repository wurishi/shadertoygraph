{"ver":"0.1","info":{"id":"7lyyWc","date":"1662331641","viewed":410,"name":"Aspect Ratio Center Stretch Fit","username":"jellygatorade","description":"Center an image or video from sampler2D, keep its original aspect ratio, and stretch to fit width or height (whichever will fill the viewport).\n\nNeeded this for a project, surprised to find no example out there so I'm posting my solution here.","likes":1,"published":1,"flags":0,"usePreview":1,"tags":["aspectratio","center","stretch","fit"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*****************************************************\n * \n * Updated 2022-09-20\n *\n * Per the suggestion from @kroltan to perform \n * this work in a vertex shader instead I have \n * uploaded a vertex shader for this purpose to GitHub.\n *\n * That code is available here:\n * https://github.com/jellygatorade/p5js-glsl-shaders-sketches/blob/main/sketches/Image%20Aspect%20Fit%20Fill%20Vertex%20Shader/aspect-fit-fill.vert\n *\n *****************************************************/\n\n\nprecision mediump float;\n\n// Texture, texture dimensions, and viewport dimensions are needed for scaling\n//\n// image or video --> uniform sampler2D iChannel0;\n// image or video resolution --> uniform vec3 iChannelResolution[0];\n// viewport resolution --> uniform vec3 iResolution;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n  float textureAspectRatio = iChannelResolution[0].x / iChannelResolution[0].y;\n  vec2 ratio = iResolution.xy/iChannelResolution[0].xy; // compare aspect ratio of viewport to aspect ratio of texture\n\n  if (ratio.x > ratio.y) { // ratio of widths is greater than ratio of heights\n  \n    // fit width\n    fragCoord /= iChannelResolution[0].xy * ratio.x;\n\n    // keep centered\n    float currentTextureHeight = iResolution.x / textureAspectRatio;\n    float offset = (( iResolution.y / currentTextureHeight ) * 0.5 ) - 0.5;\n    fragCoord.y -= offset;\n    \n\n  } else {  // ratio of heights is greater than ratio of widths\n  \n    // fit height\n    fragCoord /= iChannelResolution[0].xy * ratio.y;\n\n    // keep centered\n    float currentTextureWidth = iResolution.y * textureAspectRatio;\n    float offset = ( (iResolution.x / currentTextureWidth) * 0.5 ) - 0.5;\n    fragCoord.x -= offset;\n    \n  }\n\n  fragColor = texture(iChannel0, fragCoord);\n}","name":"Image","description":"","type":"image"}]}