{"ver":"0.1","info":{"id":"WdGGWR","date":"1571130793","viewed":110,"name":"Sierpinski carpet steps","username":"nurof3n","description":"A multicolored carpet!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["fractal","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\nconst float iter = 6.0;\n\nvec2 tile(vec2 uv) {\n\tuv *= 3.;\n    uv = fract(uv);  \n    return uv;\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n\nvec3 hsv2rgb( vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn mix( vec3(1.0), rgb, c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.x/iResolution.y;\n    vec2 tiling = vec2(aspect, 1.);\n    uv.x *= aspect;\n    uv.x -= (aspect - 1.) / 2.;\n    \n \n    vec3 color = vec3(0.0);\n    vec3 colorr = vec3(0.0);\n    vec3 green = vec3(.3, .5, .1);\n    \n    if(uv.x > 1. || uv.x < .0) {     \n        color = vec3(1.0);\n        colorr = green;\n    }\n    else {\n        uv = rotate2d(PI / 4.) * uv;\n        vec3 hsl = vec3( uv.x / 2. + iTime * .5, 1.0, uv.y );\n\t\tcolorr = hsv2rgb(hsl);\n        uv = rotate2d(-PI / 4.) * uv;\n    \n        \n        for(float i = 0.; i < iter; ++i) {\n\n            vec3 color1 = vec3(step(1./3., uv.x) - step(2./3., uv.x));\n            vec3 color2 = vec3(step(1./3., uv.y) - step(2./3., uv.y));\n\n            color = color1 * color2;\n\n            if(color == vec3(1.))\n                break;\n\n            float pas = floor((fract(iTime*.2) * iter));\n            if(i == pas)\n                break;\n\n            uv = tile(uv);\n        }\n    }\n    \n    color *= colorr;\n    fragColor = vec4(color, 1.0);\n    \n}","name":"Image","description":"","type":"image"}]}