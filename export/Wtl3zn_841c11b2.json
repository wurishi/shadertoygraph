{"ver":"0.1","info":{"id":"Wtl3zn","date":"1570032612","viewed":120,"name":"raysphereeeee","username":"nff","description":"based on https://www.youtube.com/watch?v=yxNnRSefK94&list=WL&index=3&t=0s\n\nfuckin raymarching","likes":2,"published":1,"flags":16,"usePreview":0,"tags":["raymarching","sphere","glitch","psy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tUP arrow -> toggle blur\n\tDN arrow -> invert colors\n\n\tmouse L-R -> sphere dimension\n\tmouse U-D -> field of view (UP->zoom DN->fisheye)\n\n\tweirdness and glitches are cycling on their own\n*/\n\n// TODO :\n// smooth blur on-off\n\n#define NOIZNUMMER 758.5453123\n#define NOIZSPEED 0.001\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define TOGGLE 2\n#define HOLD 0\n#define keypress(keynum, mode) texelFetch( iChannel0, ivec2(keynum,mode), 0 ).x\n// usage: float onoff = keypress(KEY_UP,TOGGLE); // use HOLD or TOGGLE\n\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\n\n//float linear(int event){\n//    if(event == 1){\n//        return mix(0., 1., (abs(iTime) % 1.));\n//    }\n//}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*NOIZNUMMER*NOIZSPEED*iTime);\n}\n\nfloat torus(vec3 p, vec2 dim)\n{\n\treturn fract(length( vec2(length(p.xz)-dim.x,p.y) )-dim.y) * 2.;\n}\n\nfloat octa( vec3 p, float s)\n{\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sphere(vec3 p, vec2 uv){ // sphere model\n    \n\t//float weird = tan (.5* iTime); // try 0.25 to get weird!\n    float weird = 1.;\n    //weird = fract(60.*iTime); // 1. per not-weird, tutto il resto weirdizza\n    \n    //float factor = (((sin(iTime * .2)*0.5)+0.5) + 2.);\n    float factor = 2.;\n    //float randomfactor = random(uv);\n    float randomfactor = 0.;\n    vec3 q = fract(p + randomfactor) * factor - weird; // multiplies the coordinate system to make more spheres\n    float raggiosfera = iMouse.x / iResolution.x;\n  \n    return length(q) - raggiosfera; // negative inside the sphere, positive outside, 0 on the surface\n}\n\nfloat trace(vec3 pov, vec3 ray, vec2 uv){\n    float t = 0.;\n    \n    float blurspeed = 5.;\n    //float blur = ((sin(iTime * blurspeed)*0.5)+0.5) * .9 * keypress(KEY_UP,TOGGLE);\n    float blur = 0.5 + (keypress(KEY_UP,TOGGLE)*0.4);\n    float bluur = ((1. - blur) * 64.);\n    \n    for (float i = 0.; i < bluur; i++){ // the more the cycles, the sharper the sphere -- bluur can be as high as 128\n    \tvec3 p = pov + ray * t; // position along the ray\n    \t//float d = torus(p, vec2 (.1,.1));\n        float d = sphere(p, uv);\n        //float trippy = (sin(.5 * iTime) / 2. + 0.5) / 1.2 * t; // glitch cycling\n        float trippy = 0.; // FIXED GLITCH VALUE (0. -> no glitch)\n    \tt += d * (.5 + trippy); // steps along the ray\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; // Normalized pixel coordinates (from 0 to 1)\n\tuv = uv * 2. - 1.; //coords 0-1\n    uv.x *= iResolution.x / iResolution.y; // aspect ratio correction\n\n   \t//float fov = .1; // FieldOfView :: 1. = 90deg\n    float fov = iMouse.y / iResolution.y;\n    vec3 fovv = normalize(vec3(uv, fov)); // field of view formula\n    \n    // point of view movement\n    float fwdSpeed = .3;\n    float upSpeed = 0.;\n    vec3 pov = vec3(0.,iTime * upSpeed, iTime * fwdSpeed); // this is whe POV, point of view!\n    \n    // rotations\n    float rotXZspeed = 0.2;\n    float rotXYspeed = 0.2;\n    float xz = iTime * rotXZspeed;\n    float xy = iTime * rotXYspeed;\n    fovv.xz *= mat2(cos(xz), -sin(xz), sin(xz), cos(xz));\n    fovv.xy *= mat2(cos(xy), -sin(xy), sin(xy), cos(xy));\n    \n    float t = trace(pov, fovv, uv);\n    float away = (1. + t * t * 0.1);\n    float fog = 1. / away; // further away stuff is, darker it gets\n    vec3 fc = vec3(fog);\n    \n    if (keypress(KEY_DOWN,TOGGLE) == 1.){fc = 1. - fc;};\n    \n    fragColor = vec4(fc,1.); \n}","name":"Image","description":"","type":"image"}]}