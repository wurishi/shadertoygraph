{"ver":"0.1","info":{"id":"ct3BWr","date":"1701113989","viewed":54,"name":"interlocked cylinders","username":"jt","description":"Simple interlocked cylinders.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["cylinders","interlocked"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ct3BWr interlocked cylinders, 2023 by jt\n\n// Simple interlocked cylinders.\n\n// tags: cylinders, interlocked\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\n// primitives mostly adapted from https://iquilezles.org/articles/distfunctions/\nfloat halfspace(vec3 p)\n{\n    return p.z;\n}\n\n// adapted from https://iquilezles.org/articles/distfunctions/\nfloat cylinder(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3  ba = b - a;\n    vec3  pa = p - a;\n    float baba = dot(ba,ba);\n    float paba = dot(pa,ba);\n    float x = length(pa*baba-ba*paba) - r*baba;\n    float y = abs(paba-baba*0.5)-baba*0.5;\n    float x2 = x*x;\n    float y2 = y*y*baba;\n    float d = (max(x,y)<0.0)?-min(x2,y2):(((x>0.0)?x2:0.0)+((y>0.0)?y2:0.0));\n    return sign(d)*sqrt(abs(d))/baba;\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nvec4 map(vec3 p)\n{\n    float h = .1;\n/*\n    vec2 o = vec2(-1,+1);\n    // configuration by trial and error TODO: calculate endpoints given cylinder parameters  \n    vec3 d =\n        vec3\n        (\n            cylinder(p,o.yxx,-0.5*o.yxx+0.5*o.xyx-0.5*o.yyy*h,h),\n            cylinder(p,o.xyx,-0.5*o.xyx+0.5*o.xxy-0.5*o.yyy*h,h),\n            cylinder(p,o.xxy,-0.5*o.xxy+0.5*o.yxx-0.5*o.yyy*h,h)\n        );\n*/\n    vec3 c = cos(radians(vec3(0,120,240)));\n    vec3 s = sin(radians(vec3(0,120,240)));\n/*\n    vec3 d =\n        vec3\n        (\n            cylinder(p,vec3(c.x,s.x,-h),vec3(c.y,s.y,+h),h),\n            cylinder(p,vec3(c.y,s.y,-h),vec3(c.z,s.z,+h),h),\n            cylinder(p,vec3(c.z,s.z,-h),vec3(c.x,s.x,+h),h)\n        );\n*/\n    vec3 d =\n        vec3\n        (\n            cylinder(p,vec3(c.x,s.x,h),vec3(c.y,s.y,3.0*h),h),\n            cylinder(p,vec3(c.y,s.y,h),vec3(c.z,s.z,3.0*h),h),\n            cylinder(p,vec3(c.z,s.z,h),vec3(c.x,s.x,3.0*h),h)\n        );\n/*\n    vec3 d =\n        vec3\n        (\n            cylinder(p,vec3(c.x-0.5*c.y,s.x-0.5*s.y,h),vec3(c.y-0.5*c.x,s.y-0.5*s.x,7.0*h),h),\n            cylinder(p,vec3(c.y-0.5*c.z,s.y-0.5*s.z,h),vec3(c.z-0.5*c.y,s.z-0.5*s.y,7.0*h),h),\n            cylinder(p,vec3(c.z-0.5*c.x,s.z-0.5*s.x,h),vec3(c.x-0.5*c.z,s.x-0.5*s.z,7.0*h),h)\n        );\n*/\n    if(halfspace(p)<min(min(d.x,d.y),d.z)) return vec4(vec3(0.5), halfspace(p));\n    return\n        d.x < min(d.y, d.z)\n        ?\n        vec4(1,0,0,d.x)\n        :\n        d.y < d.z\n        ?\n        vec4(0,1,0,d.y)\n        :\n        vec4(0,0,1,d.z);\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal( vec3 p )\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize( k.xyy*map( p + k.xyy*h ).w +\n                      k.yyx*map( p + k.yyx*h ).w +\n                      k.yxy*map( p + k.yxy*h ).w +\n                      k.xxx*map( p + k.xxx*h ).w );\n}\n\nvec4 trace(vec3 ro, vec3 rd, float t0, float t1) // pass on running out of iterations\n{\n    // NOTE: Limited number of iterations to avoid stalling\n    //       when ray passes closely (just above EPSILON)\n    //       in parallel to a surface.\n    uint i;\n    vec4 t = vec4(0);\n    for(t.w = t0, i = 0u; t.w < t1 && i < ITER_MAX; i++)\n    {\n        vec4 h = map(ro + rd * t.w);\n        if(h.w < EPSILON)\n            return t;\n        t = vec4(h.xyz, t.w+h.w);\n    }\n\n    return t; // stop on running out of iterations\n    //return vec4(0,0,0,t1); // pass on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1).w < t1 ? 0.0 : 1.0;\n}\n\n// adapted from https://iquilezles.org/articles/rmshadows\nfloat softshadow(vec3 ro, in vec3 rd, float t0, float t1, float k)\n{\n    float res = 1.0;\n    float ph = 1e20;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++)\n    {\n        float h = map(ro + rd*t).w;\n        if( h < EPSILON )\n            return 0.0;\n        float y = h*h/(2.0*ph);\n        float d = sqrt(h*h-y*y);\n        res = min( res, k*d/max(0.0,t-y) );\n        ph = h;\n        t += h;\n    }\n    return res;\n}\n\n// adapted from https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor ).w;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nvec3 material(vec3 p)\n{\n    return vec3(1.0); // TODO\n    //return mix(vec3(0.25), vec3(0.75), checker(p*2.0+0.5));\n}\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0, 0,-2.5);\n    vec3 rd = normalize(vec3(I.xy, 2.0)); // NOTE: omitting normalization results in clipped edges artifact\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    //ro.z += 1.0;\n\n    vec3 color = vec3(1);\n    vec4 result = trace(ro, rd, 0.0, DIST_MAX);\n    if(result.w < DIST_MAX)\n    {\n        float d = result.w;\n        vec3 dst = ro + rd * d;\n        vec3 n = normal(dst);\n\n        //color *= (n * 0.5 + 0.5);\n        color = result.xyz;\n        color *= material(dst);\n\n        vec3 lightdir = normalize(vec3(3,2,1));\n        vec3 ambient = vec3(0.4);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            //brightness *= shadow(ro + rd * d + n * 0.01, lightdir, 0.0, DIST_MAX);\n            brightness *= softshadow(ro + rd * d + n * 0.01, lightdir, 0.0, DIST_MAX, 20.0);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        vec3 fog_color = vec3(0.2);\n        color = mix(fog_color, vec3(color), exp(-pow(d/20.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= mix(vec3(0,0.5,0.5),vec3(0,0,1),abs(-rd.z)); // sky\n        color = vec3(0);\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    color = sqrt(color); // approximate gamma\n    o = vec4(color, 1);\n}\n","name":"Image","description":"","type":"image"}]}