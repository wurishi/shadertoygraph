{"ver":"0.1","info":{"id":"Mljczw","date":"1508048082","viewed":270,"name":"Seeded Random Colors","username":"TEttinger","description":"This is a pretty rough attempt to get an approximation of hashing to work using OpenGL ES 2.0-compatible functions. It generates a pseudo-random float in the red, green, and blue channels using x, y, time, and seed floats.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["random","hash","prng","hashing","rng"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy) * 15.718281828459045;\n    // Randomness/hash \"salt\" is seeded here in the first three elements.\n    // Seeds should be between 0 and 1, both exclusive.\n    vec3 seeds = vec3(0.123, 0.456, 0.789);\n    seeds = fract((uv.x + 0.5718281828459045 + seeds) * ((seeds + mod(uv.x, 0.141592653589793)) * 27.61803398875 + 4.718281828459045));\n    seeds = fract((uv.y + 0.5718281828459045 + seeds) * ((seeds + mod(uv.y, 0.141592653589793)) * 27.61803398875 + 4.718281828459045));\n    seeds = fract((iTime + 0.5718281828459045 + seeds) * ((seeds + mod(iTime, 0.141592653589793)) * 27.61803398875 + 4.718281828459045));\n    fragColor = vec4(seeds, 1.0);\n}","name":"Image","description":"","type":"image"}]}