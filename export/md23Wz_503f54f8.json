{"ver":"0.1","info":{"id":"md23Wz","date":"1667493054","viewed":59,"name":"space ellipses","username":"gavroche","description":"dazza","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265358979323846\nvec3 cosPalette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat circle(in vec2 uv, in vec2 center, in float radius, in float prec){\n    \n    return 1.-smoothstep(0., prec, length(uv-center)-radius);\n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\nmat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}\n#define IMPROVED 1           // make 0 for faster approach\n\nfloat maxcomp( in vec2 v ) { return max(v.x,v.y); }\n\n// Take a point in the unit square [-1,1]^2 and map it\n// into a point in the unit disk\nvec2 square2circle( in vec2 v )\n{\n    #if IMPROVED==0\n    return maxcomp(abs(v))*normalize(v);\n    #else\n    return maxcomp(abs(v))*normalize(v*(2.0+abs(v)));\n    #endif\n}\n\nfloat star(vec2 uv, float size, float prec){\n    float r = length(uv)*(1./size);\n    float a = atan(uv.y,uv.x);\n    float f = cos(a*3.);\n    f = abs(cos(a*sin(iTime)*6.+12.)*sin(a*3.))*.8+.1;\n    return 1.-smoothstep(f,f+prec,r);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = ( 2.*fragCoord.xy - iResolution.xy ) / iResolution.y;\n    vec3 pct = vec3(0.);\n    float prec = 0.01;\n    float radius_ast = 0.01;\n    int nb_asteroides = 10;\n    float f_asteroides = float(nb_asteroides);\n    for (int i = 0; i<nb_asteroides; i++){\n        for (int j = 0; j<nb_asteroides; j++){\n        vec2 center_circle = vec2(0.);\n        float f_i = float(i);\n        float f_j = float(j);\n        float rd = random(vec2(f_i,f_j));\n        if (i%2==0){\n            center_circle = vec2(0.8*cos(iTime*rd), 0.4*sin(iTime*rd))*rotate2d(PI/5.);\n        }else{\n            center_circle = vec2(-0.4*cos(iTime*rd), -0.8*sin(iTime*rd))*rotate2d(PI/3.);\n        }\n        float t = circle(uv, center_circle, radius_ast, prec);\n        pct+=vec3(t)*cosPalette(float(i*j),vec3(0.20,0.70,0.40),vec3(0.60,0.90,0.20),vec3(0.60,0.80,0.70),vec3(0.50,0.10,0.00));\n    \n    }}\n    \n    \n    float radius_sun = 0.3;\n    float sun = circle(uv, vec2(0.0), radius_sun*abs(sin(iTime*0.1))+0.1, 0.2+0.1*abs(sin(iTime)));\n    vec2 st = ( 2.*fragCoord.xy - iResolution.xy ) / iResolution.y;\n    st*=33.;\n    st = square2circle(st);\n    \n    pct+=sun*cosPalette(st.x*st.y*abs(sin(iTime*0.5)),vec3(0.28,0.68,0.37),vec3(0.90,0.67,0.48),vec3(0.99,0.33,0.07),vec3(0.60,0.31,0.66));\n    pct+= 0.2*(1.-sun)*cosPalette((st*rotate2d(PI*iTime*0.6)).x*abs(cos(iTime)),vec3(0.09,0.71,0.61),vec3(0.74,0.94,0.67),vec3(0.75,0.22,0.73),vec3(0.12,0.19,0.05));\n    // Output to screen\n    pct+=vec3(star(uv,0.03, 0.7+abs(sin(iTime))*0.3));\n    fragColor = vec4(pct,0.5);\n}","name":"Image","description":"","type":"image"}]}