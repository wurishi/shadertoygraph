{"ver":"0.1","info":{"id":"4ccfRn","date":"1732629091","viewed":6192,"name":"Weird Truchet | New Keyboard","username":"byt3_m3chanic","description":"Got this tiny Corne knock-off type keyboard from Amazon - 36 key\nhttps://bsky.app/profile/byt3m3chanic.bsky.social/post/3lbsqbatwjc2q\n\nSo this is me trying to code a shader, and memorize the key combos for the special/math chars.","likes":145,"published":3,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/** \n\n    License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n    \n    Corne Keyboard Test Shader\n    11/26/2024  @byt3_m3chanic\n    \n    Got this tiny Corne knock-off type keyboard from Amazon - 36 key\n    So this is me trying to code a shader, and memorize the key \n    combos for the special/math chars.\n    \n    see keyboard here:\n    https://bsky.app/profile/byt3m3chanic.bsky.social/post/3lbsqbatwjc2q\n    \n*/\n\n#define R           iResolution\n#define T           iTime\n#define M           iMouse\n\n#define PI         3.14159265359\n#define PI2        6.28318530718\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\nvec3 hue(float t, float f) { return f+f*cos(PI2*t*(vec3(1,.75,.75)+vec3(.96,.57,.12)));}\nfloat hash21(vec2 a) {return fract(sin(dot(a,vec2(27.69,32.58)))*43758.53);}\nfloat box(vec2 p, vec2 b) {vec2 d = abs(p)-b; return length(max(d,0.)) + min(max(d.x,d.y),0.);}\nmat2 r90;\nvec2 pattern(vec2 p, float sc) {\n    vec2 uv = p;\n    vec2 id = floor(p*sc);\n          p = fract(p*sc)-.5;\n\n    float rnd = hash21(id);\n    \n    // turn tiles\n    if(rnd>.5) p *= r90;\n    rnd=fract(rnd*32.54);\n    if(rnd>.4) p *= r90;\n    if(rnd>.8) p *= r90;\n    \n    // randomize hash for type\n    rnd=fract(rnd*47.13);\n\n    float tk = .075;\n    // kind of messy and long winded\n    float d = box(p-vec2(.6,.7),vec2(.25,.75))-.15;\n    float l = box(p-vec2(.7,.5),vec2(.75,.15))-.15;\n    float b = box(p+vec2(0,.7),vec2(.05,.25))-.15;\n    float r = box(p+vec2(.6,0),vec2(.15,.05))-.15;\n    d = abs(d)-tk; \n    \n    if(rnd>.92) {\n        d = box(p-vec2(-.6,.5),vec2(.25,.15))-.15;\n        l = box(p-vec2(.6,.6),vec2(.25))-.15;\n        b = box(p+vec2(.6,.6),vec2(.25))-.15;\n        r = box(p-vec2(.6,-.6),vec2(.25))-.15;\n        d = abs(d)-tk; \n        \n    } else if(rnd>.6) {\n        d = length(p.x-.2)-tk;\n        l = box(p-vec2(-.6,.5),vec2(.25,.15))-.15;\n        b = box(p+vec2(.6,.6),vec2(.25))-.15;\n        r = box(p-vec2(.3,0),vec2(.25,.05))-.15;\n    }\n    \n    l = abs(l)-tk; b = abs(b)-tk; r = abs(r)-tk;\n\n    float e = min(d,min(l,min(b,r)));\n    \n    if(rnd>.6) {\n        r = max(r,-box(p-vec2(.2,.2),vec2(tk*1.3)));\n        d = max(d,-box(p+vec2(-.2,.2),vec2(tk*1.3)));\n    } else {\n        l = max(l,-box(p-vec2(.2,.2),vec2(tk*1.3)));\n    }\n    \n    d = min(d,min(l,min(b,r)));\n\n    return vec2(d,e);\n}\nvoid mainImage( out vec4 O, in vec2 F )\n{\n    vec3 C = vec3(.0);\n    vec2 uv = (2.*F-R.xy)/max(R.x,R.y);\n    r90 = rot(1.5707);\n    \n    uv *= rot(T*.095);\n    //@Shane\n    uv = vec2(log(length(uv)), atan(uv.y, uv.x)*6./PI2);\n    // Original.\n    //uv = vec2(log(length(uv)), atan(uv.y, uv.x))*8./6.2831853;\n\n    float scale = 8.;\n    for(float i=0.;i<4.;i++){  \n        float ff=(i*.05)+.2;\n\n        uv.x+=T*ff;\n\n        float px = fwidth(uv.x*scale);\n        vec2 d = pattern(uv,scale);\n        vec3 clr = hue(sin(uv.x+(i*8.))*.2+.4,(.5+i)*.15);\n        C = mix(C,vec3(.001),smoothstep(px,-px,d.y-.04));\n        C = mix(C,clr,smoothstep(px,-px,d.x));\n        scale *=.5;\n    }\n\n    // Output to screen\n    C = pow(C,vec3(.4545));\n    O = vec4(C,1.0);\n}\n","name":"Image","description":"","type":"image"}]}