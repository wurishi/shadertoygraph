{"ver":"0.1","info":{"id":"XstXRX","date":"1460719234","viewed":341,"name":"Vertebrae","username":"dila","description":"Some twisted raymarched surfaces with crappy volumetric fog.","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRn","filepath":"/media/a/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","previewfilepath":"/media/ap/95b90082f799f48677b4f206d856ad572f1d178c676269eac6347631d4447258.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot(float t)\n{\n \treturn mat2(cos(t), sin(t), -sin(t), cos(t));   \n}\n\nfloat plane(vec3 o, vec3 r, vec3 p)\n{\n\treturn dot(p - o, r) / dot(r, r);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nvec4 map(vec3 p)\n{  \n    p.x += sin(p.z);\n    \n    vec3 q = fract(p) - 0.5;\n    \n    vec3 u = vec3(p.xy, q.z);\n    \n    float d = 1000.0;\n    \n    vec3 t = vec3(0.0);\n    \n    u.xy *= rot(1.57 + p.z * 0.25 + iTime * 0.25);\n\n    float f = mix(1.0, 1.0, sin(p.z)*0.5 + 0.5);\n\n    vec2 r = abs(u.xz) - vec2(f, 0.0);\n\n    float a = length(r) - 0.1;\n\n    float fp = fract(u.y) * 2.0 - 1.0;\n\n    vec3 v = vec3(u.z, fp, abs(u.x) - f);\n\n    float br = mix(0.0, 0.45, sin(u.y) * 0.5 + 0.5);\n\n    float b = sdBox(v, br * vec3(1.0,2.0,1.0));\n\n    float c = min(a, b);\n\n\treturn vec4(v, c);\n}\n\nvec3 normal(vec3 p)\n{\n    vec3 o = vec3(0.01, 0.0, 0.0);\n    return normalize(vec3(map(p+o.xyy).w - map(p-o.xyy).w,\n                          map(p+o.yxy).w - map(p-o.yxy).w,\n                          map(p+o.yyx).w - map(p-o.yyx).w));\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 64; ++i) {\n        vec3 p = o + r * t;\n        float d = map(p).w;\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvec4 part(vec3 o, mat3 r, vec3 p, float s)\n{\n    float t = plane(o, r[2], p);\n\n    vec3 q = o + r[2] * t;\n\n    vec3 c = q - p;\n\n    float ls = dot(c, c);\n\n    vec3 tv = c;\n\n    vec2 uv = vec2(dot(tv,r[0]), dot(tv,r[1]));\n    \n    uv *= rot((q.z+q.x) * s);\n\n    vec3 tex = texture(iChannel0, uv).xyz;\n    \n    tex *= tex;\n\n    float k = 1.0;\n\n    k *= max((1.0 - sqrt(ls)), 0.0);\n    \n    return vec4(tex * k, t);\n}\n\nvec4 rpart(vec3 o, mat3 r, vec3 p, float to, float s)\n{\n\treturn part(o, r, p, s);\n}\n\nvec3 tex(vec3 p)\n{\n\tvec3 ta = texture(iChannel1, p.yz).xyz;\n    vec3 tb = texture(iChannel1, p.xz).xyz;\n    vec3 tc = texture(iChannel1, p.xy).xyz;\n    return (ta*ta + tb*tb + tc*tc) / 3.0;\n}\n\nvec3 vol(vec3 o, mat3 r)\n{\n    float t = trace(o, r[2]);\n    \n    vec3 w = o + r[2] * t;\n    \n    vec3 n = normal(w);\n    \n    vec3 lp = o + n * 0.5 - r[2] * 0.1;\n    \n    vec3 lv = w + n * 0.01 - lp;\n    \n    float ld = length(lv);\n    \n    lv /= ld;\n    \n    float lt = trace(lp, lv);\n    \n    float lm = max(sign(lt - t), 0.0) / (1.0 + ld * ld * 0.01);\n    \n    float p = max(dot(lv, -n), 0.0);\n    \n    vec4 d = map(w);\n    \n    vec3 c = tex(d.xyz * 0.25);\n    \n    float fog = 1.0 / (1.0 + t * t * 0.01);\n    \n\tvec3 s = c * p * mix(lm, 1.0, 0.2);\n    \n    s += vec3(0.3, 0.6, 0.8) * max(n.y, 0.0) * 0.2;\n    \n    /* thanks Shane :) */\n    s += pow(max(dot(reflect(lv, n), -r[2]), 0.), 8.)*.5;\n    \n    float gt = t;\n    \n    vec3 fg = vec3(0.0);\n    \n    for (int y = -3; y <= 3; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n    \n            vec3 l = vec3(float(x), 0.0, floor(o.z) - float(y));\n            \n            l.y = sin(l.x + l.z) * 0.25;\n\n            vec4 pt = rpart(o, r, l, 0.0, sign(l.x+l.y));\n            float scd = abs(pt.w - t);\n            float sc = 1.0 - 1.0 / (1.0 + scd * 10.0);\n            vec3 mt = pt.xyz * sc;\n            mt *= max(sign(pt.w), 0.0);\n            mt *= max(sign(t - pt.w), 0.0);\n            float fad = min(max(pt.w * 0.5, 0.0), 1.0);\n            mt *= fad * (1.0 - fad) * 4.0;\n            fg += mt;\n            \n            pt = rpart(o, r, l, 0.5, -sign(l.x+l.y));\n            scd = abs(pt.w - t);\n            sc = 1.0 - 1.0 / (1.0 + scd * 10.0);\n            mt = pt.xyz * sc;\n            mt *= max(sign(pt.w), 0.0);\n            mt *= max(sign(t - pt.w), 0.0);\n            fad = min(max(pt.w * 0.5, 0.0), 1.0);\n            mt *= fad * (1.0 - fad) * 4.0;\n            fg += mt;\n            \n            gt = min(gt, pt.w);\n        }\n    }\n\n    s *= fog;\n    \n    s += fg / 16.0;\n\n    return s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 1.0 - dot(uv,uv) * 0.33));\n\tvec3 o = vec3(0.0, 0.0, iTime);\n    o.x = -sin(o.z);\n    \n    mat3 v;\n    v[2] = r;\n    v[1] = vec3(0.0, 1.0, 0.0);\n    v[0] = normalize(cross(v[1], v[2]));\n    \n    mat2 k = rot(sin(o.z) * 0.5);\n    \n    v[0].xz *= k;\n    v[1].xz *= k;\n    v[2].xz *= k;\n    \n    mat2 j = rot(sin(o.z) * 0.25);\n    \n    v[0].xy *= j;\n    v[1].xy *= j;\n    v[2].xy *= j;\n    \n    \n\tvec3 t = vol(o, v);\n\n\tfragColor = vec4(sqrt(t), 1.0);\n}","name":"Image","description":"","type":"image"}]}