{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// Lissajous curve\n// http://en.wikipedia.org/wiki/Lissajous_curve\n\nconst float PI = 3.14159;\nconst int steps = 200;\n\nvec2 lissajous(float t, float a, float b, float d)\n{\n\treturn vec2(sin(a*t+d), sin(b*t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy / iResolution.xy)*2.0-1.0;\n\tuv.x *= iResolution.x / iResolution.y;\n\tvec2 mouse = iMouse.xy / iResolution.xy;\n\n\tfloat a = 2.0;\n\tfloat b = 3.0;\n\tfloat d = iTime;\t// phase\n\t\n\tif (iMouse.z > 0.0) {\n\t\ta = 1.0 + mouse.x*3.0;\n\t\tb = 1.0 + mouse.y*3.0;\n\t}\n\t\n\tfloat m = 1.0;\n\tfloat period = PI*2.0;\n    vec2 lp = lissajous(iTime, a, b, d)*0.8;\n    for(int i = 1; i <= steps; i++) \n    {\n        float t = float(i)*period / float(steps);\n\t\tt += iTime;\n        vec2 p = lissajous(t, a, b, d)*0.8;\n\t\t\n\t\t// distance to line\n        vec2 pa = uv - p;\n        vec2 ba = lp - p;\n        float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n        vec2 q = pa - ba*h;\n        m = min( m, dot( q, q ) );\n\t\t\n        lp = p;\n    }\n    m = sqrt( m );\n\tm = smoothstep(0.01, 0.0, m);\n\t\n\tfragColor = mix(vec4(0.0), vec4(0.2, 1.0, 0.1, 1.0), m);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XdSGzh","date":"1383170155","viewed":1671,"name":"Lissajous","username":"simesgreen","description":"Kind of halloweeny? As displayed on oscilloscopes in the background of every old sci-fi film ever!\nClick to adjust parameters.\nThis is the most inefficient way to draw a Lissajous curve ever, optimizations welcome.","likes":29,"published":1,"flags":0,"usePreview":0,"tags":["2d","oscilloscope","lissajous"],"hasliked":0,"parentid":"","parentname":""}}