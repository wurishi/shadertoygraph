{"ver":"0.1","info":{"id":"tlBGW3","date":"1561316009","viewed":88,"name":"Commented Mandelbrot (Flashes)","username":"glyre","description":"A Mandelbrot fractal, but I commented the code in a manner I wish I had seen a while back :)\n\nI made my own complex number type instead of using a vec2 for demonstration. I remember that specifically baffled me at one point.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// A commented Mandelbrot fractal shader\n// Dedicated to the public domain via the Unlicense\n\n//\n// Complex Math\n//\n\n/** A complex number. */\nstruct complex {\n    float real;\n    float imag;\n};\n\n/** Add two complex numbers together. */\ncomplex complex_add(complex a, complex b) {\n    complex sum;\n    sum.real = a.real + b.real;\n    sum.imag = a.imag + b.imag;\n    return sum;\n}\n\n/** Multiply two complex numbers together. */\ncomplex complex_multiply(complex a, complex b) {\n    complex product;\n    product.real = a.real * b.real - a.imag * b.imag;\n    product.imag = a.real * b.imag + a.imag * b.real;\n    return product;\n}\n\n/** Square a complex number. */\ncomplex complex_square(complex a) {\n    return complex_multiply(a, a);\n}\n\n//\n// Mandelbrot Fractal\n//\n\n/**\n * The maximum number of Mandelbrot iterations. If we hit this value,\n * then we know the pixel under test lies in the Mandelbrot set.\n */\nconst int MAX_ITERATIONS = 100;\n\n// HSV to RGB converter by Sam Hocevar (http://sam.zoy.org/)\n// https://github.com/hughsk/glsl-hsv2rgb/blob/master/index.glsl\nvec3 hsv2rgb(vec3 c) {\n  \tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  \tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  \treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\t// Get normalized pixel coordinates\n    // Center is (0, 0), bottom-left is (-0.5, -0.5), and top-right is (0.5, 0.5)\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n\n    // Correct the aspect ratio\n    uv.x *= iResolution.x / iResolution.y;\n\n    // Zoom the \"camera\" in and out of the scene\n    uv.xy += uv.xy * 0.5 * (sin(0.25 * 3.14 * iTime) - 0.5);\n \n    // Move the \"camera\" around the scene\n    uv.x -= 1.0 + 0.5 * cos(0.125 * 3.14 * iTime);\n    uv.y += 0.5 * sin(0.5 * 3.14 * iTime);\n\n    // Start iterating at zero (which is both a real and a complex number)\n    complex z;\n    z.real = 0.0;\n    z.imag = 0.0;\n\n    // Run a bunch of iterations to test if this pixel is in the Mandelbrot set\n    // The iterations variable is outside the loop so we can go back and retrieve it\n    int iterations;\n    for (iterations = 0; iterations < MAX_ITERATIONS; ++iterations) {\n        // Wrap pixel coordinates into a complex term (treat x as real and y as imaginary)\n        // This will let us check if the pixel is in the Mandelbrot set\n        // If it is not, we will remember how many iterations it took to figure out it's not\n        // This number of iterations plotted against the XY plane makes a fractal! Neat!\n        complex c;\n        c.real = uv.x;\n        c.imag = uv.y;\n\n        // Update the Mandelbrot algorithm (from Wikipedia)\n        z = complex_add(complex_square(z), c);\n\n        // If the series diverged\n        // We use the number 2 as an \"escape\" value to test for divergence\n        if (z.real * z.real + z.imag * z.imag > 2.0 * 2.0) {\n            // Stop iterating\n            break;\n        }\n    }\n\n    // The color intensity of this pixel\n    // As mentioned above, the fractal is not the set, per se...\n    // To get the fractal, we plot the # of iterations we took at each pixel\n    // The more iterations a pixel took, the brigher we make it (more intense)\n    float intensity = 0.25 + float(iterations) / float(MAX_ITERATIONS);\n\n    // Color this pixel according to its intensity\n    fragColor = vec4(1.5 * intensity * hsv2rgb(vec3(intensity + 1.5 * iTime, 0.75, 0.75)), 1);\n}\n","name":"Image","description":"","type":"image"}]}