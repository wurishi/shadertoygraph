{"ver":"0.1","info":{"id":"McjGWV","date":"1704677649","viewed":53,"name":"PaletteBleed Mic","username":"Calypso_par","description":"Audio Visualizer","likes":1,"published":1,"flags":36,"usePreview":0,"tags":["audio","microphone"],"hasliked":0,"parentid":"-1","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float fluidity = 0.025;\nvec3 cosPalette(  float t,  vec3 a,  vec3 b,  vec3 c, vec3 d ){\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 dnaGetter(vec3 col, sampler2D i0, sampler2D i1, sampler2D i2) {\n    return cosPalette(\n        mix(col.r,col.g,col.b),\n        texture(i0, col.gb).rgb,\n        texture(i1, col.bg).rgb,\n        texture(i1, texture(i0, col.rg).rg).rgb,\n        col.brr).gbr;\n}\n\nvec2 neighbor(vec2 uv, vec3 col, float rad) {\n    vec3 dna = texture(iChannel0, vec2(0.5)+mix(vec2(-0.5),vec2(0.5), uv)).rgb;\n    vec3 dna1 = texture(iChannel1, vec2(0.5)+mix(vec2(-0.5),vec2(0.5), uv)).rgb;\n    dna = max(dna, dna1);\n    float angle = cos(dna.x);\n    float r = texture(iChannel1, pow(uv, dna.rg)).x*dna.r*dna.g*dna.b*fluidity/sqrt(rad)/(3.0-length(dna));\n    vec2 rel = vec2(r*cos(degrees(angle)),r*sin(degrees(angle)));\n    return uv - rel;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 center = vec2(0.5);\n    float r = distance(uv, center);\n    \n    vec2 uvn = neighbor(uv, fragColor.rgb, r);\n    vec3 prev = texture(iChannel0, uvn).rgb;\n     \n    float fft = texelFetch(iChannel1, ivec2(r*512.0,0), 0).x;\n    float fft1 = texelFetch(iChannel1, ivec2(r*512.0,1), 0).x;\n\n    // Time varying pixel color\n    vec3 col = dnaGetter(vec3(fft), iChannel0, iChannel1, iChannel0);\n\n    vec3 delt = mix(vec3(prev/2000.0), vec3(1.0)-prev*prev*0.2, col) - prev;\n    \n    \n\n    // Output to screen\n    fragColor = max(vec4(prev+delt*pow(fft, fft1/(r+0.001)),1.0), vec4(0.1));\n}\n\n\n\n","name":"Buffer A","description":"","type":"buffer"}]}