{"ver":"0.1","info":{"id":"XXdSDB","date":"1719508221","viewed":54,"name":"Fluted Glass Effect + Blur","username":"barretto","description":":) Somewhat inspired by (https://www.figma.com/community/file/1319284489652797196/flutedglass-effect)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["glass","flutedglass"],"hasliked":0,"parentid":"43dSDr","parentname":"Fluted Glass Effect"},"renderpass":[{"inputs":[{"id":"Xdf3Rn","filepath":"/media/a/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","previewfilepath":"/media/ap/e81e818ac76a8983d746784b423178ee9f6cdcdf7f8e8d719341a6fe2d2ab303.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    const float u_numSegments = 60.0;\n    const float u_inputOutputRatio = 1.1;\n    const float u_overlap = 0.1;\n    const float u_light_strength = 0.05;\n    const float blurRadius = 10.0; // Adjust the blur radius as needed\n    const float sigma = 10.0; // Standard deviation for Gaussian blur\n\n    vec2 uv = fragCoord / iResolution.xy;\n\n    float segmentWidth = 1.0 / u_numSegments;\n    float inputSegmentWidth = segmentWidth * u_inputOutputRatio;\n    float overlapWidth = segmentWidth * u_overlap;\n\n    float segmentIndex = floor(uv.x / segmentWidth);\n    float segmentStart = segmentIndex * segmentWidth;\n    float segmentEnd = segmentStart + segmentWidth;\n\n    float localUVx = (uv.x - segmentStart) / segmentWidth;\n    float compressedX = log(1.0 + localUVx * 9.0) / log(10.0);\n\n    float inputSegmentStart = segmentIndex * (inputSegmentWidth - overlapWidth);\n    vec2 inputUV = vec2(inputSegmentStart + compressedX * inputSegmentWidth, uv.y);\n\n    // Blur the input texture\n    vec4 color = vec4(0.0);\n    \n\n    float totalWeight = 0.0;\n\n    for (float x = -blurRadius; x <= blurRadius; x++) {\n        for (float y = -blurRadius; y <= blurRadius; y++) {\n            vec2 offset = vec2(x, y) / iResolution.xy;\n            float weight = exp(-(x * x + y * y) / (2.0 * sigma * sigma));\n            color += texture(iChannel0, inputUV + offset) * weight;\n            totalWeight += weight;\n        }\n    }\n\n    color /= totalWeight;\n\n    // Apply the vertical gradient\n    float gradientMidpoint = 0.8;\n    float gradientStrength = smoothstep(gradientMidpoint, 1.0, uv.y);\n    color = mix(color, vec4(0.0, 0.0, 0.0, 0.5), gradientStrength * 0.5);\n\n    // Apply the black gradient on the right side of each segment\n    float rightGradientStrength = smoothstep(0.8, 1.0, localUVx);\n    color = mix(color, vec4(0.0, 0.0, 0.0, rightGradientStrength), rightGradientStrength * u_light_strength);\n\n    // Apply the white gradient on the left side of each segment\n    float leftGradientStrength = smoothstep(0.1, 0.0, localUVx);\n    color = mix(color, vec4(1.0, 1.0, 1.0, leftGradientStrength), leftGradientStrength * u_light_strength);\n\n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}