{"ver":"0.1","info":{"id":"clsXzB","date":"1674988503","viewed":203,"name":"Directed Photon Mapping V2","username":"gcgac","description":"An improved version of my efficient photon mapping algorithm. The gloss and GI is fake.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ray","gi","fake","marching","mapping","glossy","photon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Thanks to Inigo Quilez for the PRNG and trigophers for helping me make this progressive (in progress)\n\n\nint seed = 2;\nvec3 rgb;\nint frand(void) { seed = seed*0x343fd+0x269ec3; return (seed>>16)&32767; }\nfloat rand(void) { return float(frand())/32767.0; }\nvec3 point;\nvec3 lightpos = vec3(0.0,90,70.0);\nfloat hash1( uint n ) {\n    // integer hash copied from Hugo Elias\n\tn = (n << 13U) ^ n;\n    n = n * (n * n * 15731U + 789221U) + 1376312589U;\n    return float( n & uint(0x7fffffffU))/float(0x7fffffff);\n}\n\n\nfloat sde;\nvec3 pos;\nfloat maxl = 10000.0;\n\n\nvec3 sphrand(){\n    point = vec3(2.0);\n    while(length(point)>=1.0){\n        point = vec3(rand()*2.0-1.0,rand()*2.0-1.0,rand()*2.0-1.0);\n    }\n    return point;\n}\n\nfloat plane_sde(vec3 ray, vec3 nor, float planey, vec3 col){\n    if (dot(ray,nor)+planey < sde){\n        sde = dot(ray,nor)+planey;\n        rgb = col;\n    }\n    return dot(ray,nor)+planey;\n}\n\n\nfloat sphere_sde(vec3 ray, vec3 position, float radius, vec3 col){\n    if (length(position-ray)-radius < sde){\n        sde = length(position-ray)-radius;\n        rgb = col;\n    }\n    return length(position-ray)-radius;\n}\n\n \nfloat calc_sdf(vec3 ray){\n    sde = maxl;\n    sphere_sde(ray,vec3 (-20.0,11.0,80.0),20.0, vec3(1,0,0));\n    plane_sde(ray,vec3(0,1,0),10.0, vec3(1,1,1));\n    plane_sde(ray,vec3(1,0,0),21.0, vec3(1,1,1));\n    plane_sde(ray,vec3(-1,0,0),21.0, vec3(1,1,1));\n    sphere_sde(ray,vec3 (10.0,2.0,80.0),10.0, vec3(0,1,1));\n    return sde;\n}\n\n\nvec4 raycol(vec3 orig, vec3 dir, float ml){\n    float len = 0.0;\n    sde = ml;\n    float steps = 0.0;\n    pos = orig;\n\n    while (len < ml && sde > 0.1){\n        sde = calc_sdf(pos);\n        pos += dir*sde;\n        len += sde;\n        steps += 1.0;\n    }\n    return vec4(pos,steps);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 newfrag = vec2(fragCoord.x+iResolution.x/2.0,fragCoord.y+iResolution.y/2.0); \n    uvec2 p = uvec2((newfrag-.5*iResolution.xy)/iResolution.y*1000.0);\n    seed = int(round(hash1( p.x + 1920U*p.y + (1920U*1080U))*100.0));\n    vec3 pos = vec3(0.0,10.0,10.0);\n    vec3 direction = normalize(vec3(uv.x,uv.y,1));\n    vec4 o;\n    float steps;\n    o = raycol(pos,direction,500.0);\n    if (sde <= 0.1){\n        steps =o.w;\n        vec3 inter = o.xyz;\n        vec3 colour = rgb;\n        for (int i = 0; i<100; i++){\n            vec3 offset = sphrand();\n            offset *= 8.0;\n            vec3 hit = raycol(lightpos,normalize(inter+offset-lightpos),500.0).xyz;\n            if (length(hit-inter)<8.0){\n                colour += rgb*(1.0-length(hit-inter)/8.0);\n            }\n        }\n        colour /= 50.0;\n        fragColor = vec4(colour,1.0);\n    } else {\n        fragColor = vec4(0.0,0.0,0.0,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}