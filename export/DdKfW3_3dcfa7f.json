{"ver":"0.1","info":{"id":"DdKfW3","date":"1698717245","viewed":56,"name":"Light transport in volume","username":"athibaul","description":"Just an experiment with light scattering using 1D transport. ","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["volume","light","scattering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Light transport in absorbing/reflecting volume material.\n\n// Buffer A represents light travelling right\n// Buffer B represents light travelling left\n// The material is lit from both sides\n// On the left side we see how far each color penetrates into the material.\n// On the right side we see the apparent color reflected by the material.\n// In the middle is the theoretical apparent color.\n//\n\n// The settings (see Common tab) introduce a vertical reflectivity gradient\n// for the green and blue channels.\n// Since there is little scattering for green and blue at the bottom, these colors\n// penetrate deep into the material. But then these are more absorbed, and thus\n// the apparent color of the material is red.\n// At the top, since blue and green are scattered more than red, the apparent color is blueish.\n\n// This shader was inspired by the Kubelka-Munk theory for the appearance of paint films.\n// https://en.wikipedia.org/wiki/Kubelka%E2%80%93Munk_theory\n\nMain\n{\n    Q = texture(iChannel0, R*U/(iR*iR));\n    \n    vec2 u = (2.*U-iR)/iR.y;\n    U = R*U/iR;\n    if(abs(u.x) < 0.05) {\n        // Middle strip: show the apparent color according to the Kubelka-Munk formula\n        Q = 1.0 + (a0/r0) - sqrt((a0*a0)/(r0*r0) + 2.0 * a0/r0);\n    }\n    \n    Q = sqrt(Q);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"Main\n{\n    // Transport light in the positive x direction\n    vec4 wA = A(U - vec2(1,0));\n    vec4 cB = B(U);\n    \n    float dx = 1.0/R.x;\n    \n    if(U.x < 1.) {\n        Q = vec4(1);\n    } else {\n        Q = wA * (1. - dx*(a0+r0)) + cB * dx*r0;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"Main\n{\n    // Transport light in the negative x direction\n    vec4 eB = B(U + vec2(1,0));\n    vec4 cA = A(U);\n    \n    float dx = 1.0/R.x;\n    \n    if(U.x > R.x - 1.) {\n        Q = vec4(1);\n    } else {\n        Q = eB * (1. - dx*(a0+r0)) + cA * dx*r0;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define Main void mainImage(out vec4 Q, in vec2 U)\n#define R vec2(100.,30.)\n#define iR iResolution.xy\n#define A(U) texelFetch(iChannel0, ivec2(U), 0)\n#define B(U) texelFetch(iChannel1, ivec2(U), 0)\n\n// Absorption per unit length\n#define a0 vec4(3.0)\n// Reflection per unit length\n#define r0 vec4(10.0, 20.0*U.y/R.y, 40.0*U.y/R.y, 0.0)\n","name":"Common","description":"","type":"common"}]}