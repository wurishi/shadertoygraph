{"ver":"0.1","info":{"id":"tdfGzX","date":"1546991277","viewed":388,"name":"Simple 2D Flame Shader Spinoff","username":"red","description":"A knockoff of catafest's shader, with a few more effects: https://www.shadertoy.com/view/3sX3RX","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["2d","flame","spinoff"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//I made some tweaks to catafest's simple flame shader for fun \n//Original can be found here: https://www.shadertoy.com/view/3sX3RX\n\n//I wanted to preserve his simplicity, but make it a little more realistic while adding parameters that could \n//be easily tweaked for clarity\n\n//Bloom brightness\n#define Bloom 0.1\n//Vertical bobbing caused by candle impurities\n#define VerticalMotion 0.01\n//Horizontal paremeter that simulates small air currents\n#define HorizontalMotion 0.35\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 nuv = uv;\n    float aspect = iResolution.y / iResolution.x;\n    nuv.x *= aspect;\n    \n\tvec2 pos = uv * 2.0-vec2(1.,1.);\n    // create horizontal flame variation\n    pos.x += sin(iTime*0.1) * uv.y * (sin(iTime - uv.y) + cos((iTime - uv.y) * 0.1)) * 0.5 * HorizontalMotion;\n    \n    // create vertical flame variation \n    pos.y += VerticalMotion * fract(sin(30.0*iTime)) + VerticalMotion * sin(iTime);\n    \n    // select background to black\n\tvec3 color = vec3(0.0,0.0,0.0);\n    \n\t// set scale of flame \n\tfloat p =.001;\n    \n    // create shape of flame (output y)\n\tfloat y = pow(abs(pos.x), 3.0 + cos(iTime)*0.1)/(1.0*p)*1.0;\n    \n\t// create the hight of flame \n\tfloat flame_out = length(pos+vec2(pos.x,y)) * 0.78332; // 0.78332 = sin(0.9)\n    \n\t// fix colors flame by RGB\n\tcolor.rg += smoothstep(0.0,0.3,0.6-flame_out);\n    \n    // fix color of flame by G (green)\n\tcolor.g /=2.4;\n    \n    //add slight blue to the base of the flame\n    color.b -= 0.2 * pos.y / flame_out;\n\t\n    //Add bloom\n    color.rg += smoothstep(0.0, 10.1, 1.0 / distance(nuv, vec2(pos.x+0.25, (pos.y*0.1+0.4)))) * Bloom;\n    color.r += smoothstep(0.0, 5.1, 1.0 / distance(nuv, vec2(pos.x+0.25, (pos.y*0.1+0.5)))) * Bloom;\n    \n    // output color\n\tcolor += pow(color.r,1.0);\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}