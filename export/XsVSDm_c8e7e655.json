{"ver":"0.1","info":{"id":"XsVSDm","date":"1464813170","viewed":1470,"name":"Fluid Fields","username":"akohdr","description":"Minimal cellular tilings applied to RGB color fields.","likes":22,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Andrew Wild - akohdr/2016\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n// Inspired by Shane's 'One Tweet Cellular Pattern' https://www.shadertoy.com/view/MdKXDD\n\n#define TOGGLE\n\n// length(a - .5) where 0<=|a|<=1 \tprovides gradient circle patterned field\n// fract(a) === mod(a, 1.)\t\t\tcheap periodic function\n// min(min(f,f),f)\t\t\t\t\tShane's trick for minimal cellular field\n\n#define f length(fract(p*=m*=.8+.01*d++)-.5)\n#define C min(min(f,f),f)\n\nvoid mainImage(out vec4 k, vec2 p)\n{\n    p = p/iResolution.yy+2.;\t\t\t\t\t// offset to avoid white at origin\n    \n    float d = -3.,\t\t\t\t\t\t\t\t// matrix factor delta\n          t = iTime/9.,\t\t\t\t\t// appropriate speed\n         ct = cos(t), st = sin(t);\t\t\t\t// calc trig values once\n    \n    mat2 m = mat2(ct,2,-3,-st);\t\t\t\t\t// m is stateful transform updated on each apply\n    k = vec4(C,C,C,1)\t\t\t\t\t\t\t// three fields mapped to RGB\n         / abs(.5+.3*ct);    \t\t\t\t\t// temporal sizing reveals blobs in each field\n    \n#ifdef TOGGLE\n    if(mod(iTime,6.)<3.){\n    \tk = .5-k;\n\t\tk = vec4(pow(k.rgb,vec3(1./2.2)),1);\t// primitive gamma correction \n    }\n#endif\n}\n","name":"Image","description":"","type":"image"}]}