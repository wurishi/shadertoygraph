{"ver":"0.1","info":{"id":"mlGczD","date":"1699990242","viewed":60,"name":"domino lozenge relation quantize","username":"jt","description":"A random domino tiling can be obtained by quantizing a random lozenge tiling.\nThis method can't create all domino-tilings:\nit repeats a 2x3 rectangle (randomly upside-down) in a brick-pattern.\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["triangle","cube","random","hexagon","isometric","tiling","corner","quantize","connection","lozenge","grouped","relation"],"hasliked":0,"parentid":"ctyyz1","parentname":"random lozenge tiling"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mlGczD domino lozenge relation quantize, 2023 by jt\n// based on https://www.shadertoy.com/view/ctyyz1 random lozenge tiling\n// Other (more general) attempt https://www.shadertoy.com/view/cldyWl random domino tiling\n\n// A subset of random domino tilings can be obtained by quantizing random lozenge tilings.\n// This method can't create all domino-tilings:\n// it repeats a 2x3 rectangle (randomly upside-down) in a brick-pattern.\n// A more general method is https://www.shadertoy.com/view/cldyWl random domino tiling\n\n// BTW interesting stuff about domino tiling:\n// Mathologer's \"The ARCTIC CIRCLE THEOREM or Why do physicists play dominoes?\" https://www.youtube.com/watch?v=Yy7Q8IWNfHM\n// (see also: https://www.shadertoy.com/view/Wldyzj Aztec Diamond Animation by Shadron)\n\n// tags: triangle, cube, random, hexagon, isometric, tiling, corner, lozenge, grouped, quantize, connection, relation\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2,\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nint triple32(int x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}\n\n#define HASH(u) triple32(u)\n\nint hash(ivec3 v)\n{\n    return HASH(v.x + HASH(v.y + HASH(v.z + (iMouse.z > 0.0 ? int(floor(iTime)) : 0))));\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\nvec3 triangular(vec2 p) // via 3x3 matrix\n{\n    // essential 2x3 matrix (to triangular, with additional 90 degree rotation)\n    return mat2x3(normalize(vec3(-1,-1,+2)),normalize(vec3(+1,-1, 0)))*p;\n}\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, int b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec3 mod_positive(ivec3 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    return div_floor(i.zxy-i.yzx,3);\n}\n\nvec3 random_lozenge_tiling(vec2 p)\n{\n    p *= sqrt(1.5);\n    vec3 b = triangular(p); // convert to barycentric coordinates\n    ivec3 t = ivec3(floor(b)); // quantisize to triangle indices\n    ivec3 h = hexagonal(t); // group triangles to hexagons\n    ivec3 l = ivec3(equal(mod_positive(t.xyz-t.yzx,3),ivec3(1&hash(h)))); // lozenge\n    return hash33(vec3(h * 2 + l));\n    //vec3 c = tricolor(h);\n    //vec3 d = vec3(equal(mod_positive(t.xyz-t.yzx,3),ivec3(1&hash(h)))); // color-code lozenges / cube-sides (jt)\n    //return mix(c, d, 0.5);\n}\n\nvec3 random_domino_tiling(vec2 p) // obtain domino tiling by quantizing lookup in lozenge tiling (jt)\n{\n    //float c = 28.0/16.0; // guessed - verify\n    float c = sqrt(3.0); // guessed - verify\n    p.x *= c; // scale\n    p = floor(p*vec2(1,c))/vec2(1,c) + vec2(0.5,0); // quantize\n\n    return random_lozenge_tiling(p);\n}\n\n#define pi 3.1415926\n\nvec3 animation(vec2 p)\n{\n    float t = iTime / 10.0 + 0.5/*try to tweak preview to show dominos*/;\n    if(fract(t) < 0.25)\n    {\n        //p.x *= mix(1.0, 2.0, fract(t*4.0));\n        p.x *= mix(1.0, 2.0, 0.5-0.5*cos(pi*t*4.0));\n        return random_lozenge_tiling(p);\n    }\n    if(fract(t) > 0.75)\n    {\n        //p.x *= mix(2.0, 1.0, fract(t*4.0));\n        p.x *= mix(1.0, 2.0, 0.5-0.5*cos(pi*t*4.0));\n        return random_lozenge_tiling(p);\n    }\n    //else\n    {\n        return random_domino_tiling(p);\n    }\n}\n\nvoid mainImage(out vec4 o, in vec2 p)\n{\n    vec2 R = iResolution.xy;\n    p = (2.0 * p - R) / R.y; // unit coordinates (keeping aspect ratio)\n    p *= 8.0;\n    vec3 c = animation(p);\n    // tile outlines\n    {\n        p -= 16.0/R.y;\n        vec3 d = animation(p);\n        if(any(greaterThan(abs(c - d), vec3(0)))) c *= 0.0;\n    }\n    o = vec4(c, 1);\n}\n","name":"Image","description":"","type":"image"}]}