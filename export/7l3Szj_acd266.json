{"ver":"0.1","info":{"id":"7l3Szj","date":"1639393917","viewed":38,"name":"Raymarching #Luz","username":"mghermida18","description":"Ejemplo de ray marching para la asignatura CCD.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","basic"],"hasliked":0,"parentid":"NttXRB","parentname":"Raymarching #Color Basico"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// Funciones de distancia de Inigo Quilez\n// https://iquilezles.org/articles/distfunctions\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nfloat opRepSphere( in vec3 p, in vec3 c )\n{\n    //c = c*(1.+(1./.)*cnoise(3.*p));\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return sdSphere(q*(1.+(1./3.)*cnoise(3.*p)+(1./10.)*cnoise(10.*p)), 0.25 );\n}\n\nvec2 map(in vec3 p) { \n    vec2 res = vec2(sdSphere(p-vec3(1.0,0.0,0.0), 0.25),1.0);\n    res = opU(res,vec2(sdSphere(p-vec3(0.0,0.15,0.0),0.20),1.0)) ;\n    res = vec2(opRepSphere(p, vec3(1.45)),1.0);\n    return res;\n}\n\nvec2 raycast( in vec3 ro, in vec3 rd ) {\n    float tmin = 1.0;\n    float tmax = 80.0;\n    \n    float t = tmin;\n    int maxIters = 70;\n    \n    vec2 res = vec2(-1.0);\n    \n    for( int i = 0; i < maxIters && t < tmax ; i++ ) {\n        vec2 h = map( ro + rd*t );\n        if( abs(h.x) < (0.0001*t) ){\n            res = vec2(t,h.y);\n            break;\n        }\n        t = t + h.x;\n    }\n    \n    return res;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3  pos ) // for function f(p)\n{\n    const float h = 0.0001;      // replace by an appropriate value\n    #define ZERO (min(iFrame,0)) // non-constant zero\n    vec3 n = vec3(0.0);\n    for( int i=ZERO; i<4; i++ )\n    {\n        vec3 e = 0.5773*(2.0*vec3((((i+3)>>1)&1),((i>>1)&1),(i&1))-1.0);\n        n += e*map(pos+e*h).x;\n    }\n    return normalize(n);\n}\n\n\nvec3 render(in vec3 ro, in vec3 rd) {\n    \n    vec2 res = raycast(ro,rd);\n    vec3 pos = ro+res.x*rd;\n    float t = res.x;\n    vec3 col = vec3(0.1, 0.1, 0.1);\n    vec3 normal = calcNormal(pos);\n    \n    // Luz\n    if(res.y > -0.5)\n    {\n       vec3  lig = normalize( vec3(0.5, 0.4, -0.6) );\n       vec3 p = vec3(0.5,0.4,-0.6);\n       vec3 hal = normalize(p-pos);\n       float dif = clamp( dot(normal,p), 0.15, 1.0);\n       float spe = pow( clamp( dot( normal, hal ), 0.0, 1.0 ),18.0);\n                  spe *= dif;\n                  spe *= 0.04+0.96*pow(clamp(1.0-dot(hal,lig),0.0,1.0),5.0);\n                 // spe*=0.1;\n       vec3 mate = vec3(0.63, 0.63, 0.63);\n       col += mate * 1.2*dif*vec3(0.89, 0.83, 0.85);\n       //col += 5.00*spe*vec3(1.30,1.00,0.70);\n    \n    }\n    col *= exp( -0.0005*t*t*t );\n    return vec3( clamp(col,0.0,1.0) );\n}\n\n// Transformacion de un vector en espacio de la camara, al espacio del mundo.\nmat3 camera2World(in vec3 co, in vec3 ta, float rotation) {\n    vec3 h = vec3(sin(rotation),cos(rotation),0.0);\n    vec3 i = normalize(ta-co);\n    vec3 j = normalize(cross(i,h));\n    vec3 k = cross(j,i);\n    return mat3(j,k,i);                                                                                                                            \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // \n    vec2 mo = iMouse.xy/iResolution.xy;\n\tfloat time = 32.0 + iTime*1.5;\n    // Camara target o objetivo\n    vec3 ta = vec3( 0.5, -0.5, -0.6 );\n    // Camara origen (camera-origin)\n    vec3 co = ta + vec3( 4.5*cos(0.1*time + 7.0*mo.x), 1.3 + 2.0*mo.y, 4.5*sin(0.1*time + 7.0*mo.x) );\n    \n    mat3 ca = camera2World(co,ta,0.0f);\n    \n    vec2 p = (2.0*(fragCoord)-iResolution.xy)/iResolution.y;\n    \n    // Longitud de la lente de la camara.\n    const float fl = 2.5f;\n    \n    vec3 rd = ca * normalize(vec3(p,fl));\n    vec3 col = render(co,rd);\n    //vec3 col = rd.xyz;\n    //vec3 col = vec3(rd.xy,1.0);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}","name":"Common","description":"","type":"common"}]}