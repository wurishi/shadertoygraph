{"ver":"0.1","info":{"id":"ttVfDG","date":"1614997005","viewed":415,"name":"Trisegment (With Sound)","username":"Mrpalland","description":"My previous static trisegmentation now with life! Music by Oliver Buckland: https://soundcloud.com/oliver-buckland/backroomlabyrinth\n\n(If music does not start, press pause then play on iChannel1)","likes":4,"published":1,"flags":64,"usePreview":0,"tags":["voronoi","music","cells"],"hasliked":0,"parentid":"WtVBRd","parentname":"Trisegmented Voronoi"},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4llSD8","filepath":"https://soundcloud.com/oliver-buckland/backroomlabyrinth","previewfilepath":"https://soundcloud.com/oliver-buckland/backroomlabyrinth","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Music By Oliver Buckland: https://soundcloud.com/oliver-buckland/backroomlabyrinth\n\nvec2 rand2(vec2 co)\n{\n    vec3 a = fract(co.xyx*vec3(123.4, 234.34, 345.65));\n    a += dot(a, a+34.45);\n    return fract(vec2(a.x*a.y, a.y *a.z));\n}\n\n#define RWIDTH 5.0\n#define GRIDSIZE 5.0\n#define ZOOM 1.0\n#define TIMESCALE 0.25\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 screen = uv*300.*(1./ZOOM);\n    \n    float freqs[4];\n\tfreqs[0] = texture( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs[1] = texture( iChannel1, vec2( 0.05, 0.25 ) ).x;\n\tfreqs[2] = texture( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs[3] = texture( iChannel1, vec2( 0.28, 0.25 ) ).x;\n    \n    //Basecolor (Arbitrary)\n    vec3 col = vec3(0.1);\n    \n    float minDist = 1000.;\n    float t = iTime*20.*TIMESCALE;\n    vec2 cell = vec2(0.); \n    \n    //Repeat grid for smaller sample\n    uv *= GRIDSIZE;\n    vec2 gv = fract(uv)-0.5;\n    vec2 id = floor(uv);\n    \n    //Triangulation Distances (Lines)\n    float dv = max(length(screen.x), -0.75*screen.y);\n    float dd = length(abs(screen.x)+screen.y)*0.75;\n    \n    //Voronoi Calculation\n    for(float y = -1.0; y <= 1.0; y++){\n        for(float x = -1.0; x <= 1.0; x++){\n            vec2 offs = vec2(x,y);\n            \n            //Seed for random generation; interesting to add/mult dd or dv\n            vec2 seed = id+offs;\n            seed *= dd*0.000000005 - 0.5; //comment-out for normal voronoi\n            \n            vec2 n = rand2(seed);\n            vec2 p = offs + sin(n*t)*0.5;\n            float d = length(gv - p);\n            \n            if(d < minDist){\n                minDist = d;\n                cell = id+offs;\n            }\n        }        \n    }\n    \n    //Circle Cutout\n    float radius = 250. + freqs[3]*60.0;\n    float circle = 1. - clamp(distance(screen, vec2(0)) - radius, 0., 1.);\n    float rim = (0.0000000000000012*radius) * pow(length(uv), 19.0) * circle;\n    \n    //Lines\n    if(dv < RWIDTH || dd < RWIDTH){\n        col.rgb = vec3(1.0);\n    }\n    \n    //Color (cell id + UV offset)\n    col.rb += (0.7 + clamp(freqs[3], 0., .3)) * cell/(GRIDSIZE*2.) + 0.5;\n    rim *= freqs[1]*2.0*circle;\n    \n    //Line Glow\n    float glowsize = 8. + freqs[0]*5.0;\n    col += 1. - smoothstep(0., 1., vec3(dv/glowsize));\n    col += 1. - smoothstep(0., 1., vec3(dd/glowsize));\n    \n    //Rings\n    float rings = fract(distance(screen * 0.03, vec2(0)) - iTime * TIMESCALE - length(gv)*0.5);\n    rings += 2.*fract(distance(screen * 0.02, vec2(0)) - iTime * TIMESCALE - length(gv)*0.5);\n    \n    //Rays + Glowing Rim\n    float rays = pow(clamp(1. - dv/dd, 0., 1.) + clamp(1. - dd/dv, 0., 1.), 5.0);\n    col += vec3(rim);\n    \n    //Masking\n    col *= clamp(circle + rays + (0.1*rings), 0., 1.);\n    col = mix (col, col*1.1, minDist);\n    \n    //Gamma Correction\n    col = pow(col, vec3(0.64545));\n    \n    //Vignette\n    float vignette = 1. - length(screen)*0.002 + texture(iChannel0, screen*0.01 - 0.5).r;\n    col *= clamp(vec3(pow(vignette, 1.5)), 0., 1.) + (freqs[2] * 1.0 * (1. - circle));\n    \n    //col = vec3(rays);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}