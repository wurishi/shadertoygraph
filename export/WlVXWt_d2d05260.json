{"ver":"0.1","info":{"id":"WlVXWt","date":"1583860889","viewed":365,"name":"counting bits","username":"FabriceNeyret2","description":"Fast ways to count the number of bits set in an int.","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["binary","bitcounter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#if 0\n// Brian Kernighanâ€™s Algorithm  cost = NB bits at 1 \n// https://www.geeksforgeeks.org/count-set-bits-in-an-integer/\n\nint nbBits(int n)  { \n    int c;\n    for( c = 0; n > 0; c++ )\n        n &= n - 1;\n    return c; \n} \n\n#else\n// mla pointed a more efficient one : https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\nint nbBits(int v)  { \n    v -= v >> 1   & 0x55555555;                    \n    v = (v & 0x33333333) + (v >> 2   & 0x33333333);     \n    return ( v + (v >> 4) & 0xF0F0F0F ) * 0x1010101   >> 24;\n}\n#endif\n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    ivec2 I = ivec2(U);\n    O = vec4( nbBits(I.x^I.y) ) / 8.;\n}\n","name":"Image","description":"","type":"image"}]}