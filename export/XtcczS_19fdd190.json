{"ver":"0.1","info":{"id":"XtcczS","date":"1532956232","viewed":129,"name":"Particle Test board","username":"fbordel","description":"Test for particle system","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["particlestest"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//inspiration : https://www.shadertoy.com/view/lsy3R1\n\n// Possible Exercice :\n// fill function in \"common\"\n// fill the spawn function : spawnDisk, spawnCircle, spawnDonuts, spawnfountain\n// In simulation, add : gravity, spinForce (around a position), ...\n// Color : aging attenuation, velocityColor, ...\n// For fontains, use mouse position for the fontains direction\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{ \n    \n    vec2 pixelSize = 1.0 / iResolution.xy;\n    \n\tvec2 uv = fragCoord.xy * pixelSize;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    int resx = int(iResolution.x);\n    int resy = int(iResolution.y);\n    \n    int currentFrame = iFrame % resy;\n    \n    // Read each pixels of the position texture to find if some of them are \n    // close from the current pixel.\n    for (int x = 0; x < NB_PARTICLES_PER_FRAME; x++)\n    {\n        for (int y = 0; y < resy; y++)\n        {\n            // This is the bottleneck of the shader, there might be a\n            // better way to read the particle textures.\n            vec4 currentParticle = texture(iChannel0, vec2(x, y) * pixelSize);\n            vec2 particlePixelVector = currentParticle.xy - uv;\n            \n            int currFrame = (currentFrame > y) ? currentFrame : currentFrame + int(iResolution.y);\n            float particleLifeRatio = abs((float(currFrame) - float(y)) / iResolution.y);\n            \n\n            // If a particle is close to this pixel, add its color to the final color.\n            if (particlePixelVector.x * particlePixelVector.x + particlePixelVector.y * particlePixelVector.y  < pixelSize.x * PARTICLE_SIZE)\n            {                \n                finalColor += particleColor(particleLifeRatio, currentParticle.xy, currentParticle.zw);\n            } \n        }\n    }\n    \n\tfragColor = vec4(finalColor, 1.0);   \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n// Random function from https://www.shadertoy.com/view/4ssXRX\n// note: uniformly distributed, normalized rand, [0;1[\nfloat nrand( vec2 n )\n{\n\treturn fract(sin(dot(n.xy, vec2(12.9898, 78.233)))* 43758.5453);\n}\n\n\n///////////////////////////// SPAWN /////////////////////////////\n\n#define NB_PARTICLES_PER_FRAME 10\n\n\nvec4 randomPos(int _currentParticleID, vec2 _seed)\n{\n    vec2 pos = vec2(nrand(_seed), nrand(_seed.yx));\n    vec2 vel = vec2(0.0, 0.0);\n    return vec4(pos, vel); \n}\n\nvec4 spawnDisk(vec2 _center, float _radius, int _currentParticleID, vec2 _seed)\n{\n    vec2 pos = vec2(0.0);\n    vec2 vel = vec2(0.0);\n    return vec4(pos, vel);\n}\n\nvec4 spawnCircle(vec2 _center, float _radius, int _currentParticleID, vec2 _seed)\n{\n    vec2 pos = vec2(0.0);\n    vec2 vel = vec2(0.0);\n    return vec4(pos, vel);\n\n}\n\nvec4 spawnDonuts(vec2 _center, float _radius, float _holeRadius, int _currentParticleID, vec2 _seed)\n{\n    vec2 pos = vec2(0.0);\n    vec2 vel = vec2(0.0);\n    return vec4(pos, vel);\n}\n\nvec4 spawnfountain(vec2 _center, vec2 _dir, float _velocity, float _chaos, int _currentParticleID, vec2 _seed)\n{\n    vec2 pos = vec2(0.0);\n    vec2 vel = vec2(0.0);\n    return vec4(pos, vel);  \n}\n\n\n// Main function : select wanted spawn function\nvec4 spawnParticles(int _currentParticleID, vec2 _seed)\n{\n    \n    #define SPAWN_SYSTEM_ID 6\n    #if SPAWN_SYSTEM_ID == 0\n  \t\treturn spawnDisk(vec2(0.5, 0.5), 0.1, _currentParticleID, _seed); \n    \n    #elif SPAWN_SYSTEM_ID == 1\n    \treturn spawnCircle(vec2(0.5, 0.5), 0.1, _currentParticleID, _seed); \n    \n    #elif SPAWN_SYSTEM_ID == 2\n    \treturn spawnDonuts(vec2(0.5, 0.5), 0.2, 0.1, _currentParticleID, _seed);\n    \n    #elif SPAWN_SYSTEM_ID == 3\n    \treturn spawnfountain(vec2(0.5, 0.5), vec2(0.0, 1.0), 500.0, 0.5, _currentParticleID, _seed);\n    \n    #else\n    \treturn randomPos(_currentParticleID, _seed); \n    #endif\n}\n\n\n\n///////////////////////////// SIMULATION /////////////////////////////\n\n#define BOUNCE_GROUND 0.2\n#define BOUNCE 0.1\n#define MAX_SPEED 800.0\n#define GRAVITY vec2(0.0, -5.0)\n#define ATTRACTION 20.0\n\nvec4 updateParticle(vec2 _position, vec2 _velocity, vec2 _seed1, float _deltaTime)\n{\n \n    float randValue = nrand(_seed1) * 0.5;\n    \n\n    // Collisions\n    if (_position.x < 0.0)\n    {\t\n        _velocity = vec2(abs(_velocity.x) * (BOUNCE+randValue), _velocity.y);\n    }\n\n    if (_position.x > 1.0)\n    {\t\n        _velocity = vec2(-abs(_velocity.x) * (BOUNCE+randValue), _velocity.y);\n    }\n\n    if (_position.y < 0.0)\n    {\n        _velocity = vec2(_velocity.x, abs(_velocity.y) * (BOUNCE_GROUND+randValue));\n    }\n\n    if (_position.y > 1.0)\n    {\n        _velocity = vec2(_velocity.x, -abs(_velocity.y) * (BOUNCE+randValue));\n    }\n\n    // Update position.\n    _position.xy += _velocity * _deltaTime * 0.001;\n\n    \n    if ( length(_velocity) > MAX_SPEED)\n        _velocity = normalize(_velocity) * MAX_SPEED;\n\n\n    return vec4(_position.xy, _velocity.xy);\n}\n\n\n\n///////////////////////////// COLOR /////////////////////////////\n\n#define OPACITY 2.0\n#define PARTICLE_SIZE 0.006\n\n\nvec3 particleColor_Life(float _particleLifeRatio, vec2 _position, vec2 _velocity)\n{\n    return vec3(0.0);\n}\n\n\nvec3 particleColor_Velocity(float _particleLifeRatio, vec2 _position, vec2 _velocity)\n{\n    vec3 velocityColor = vec3(0.0);\n    return velocityColor;\n}\n\nvec3 particleColor(float _particleLifeRatio, vec2 _position, vec2 _velocity)\n{\n    //return particleColor_Life(_particleLifeRatio, _position, _velocity) * OPACITY;\n    //return particleColor_Velocity(_particleLifeRatio, _position, _velocity) * OPACITY;\n    return vec3(1.0, 1.0, 1.0);\n}\n\n\n\n// Snd Effect\n//float sndIdx = abs(0.5 - fragCoord.x);\n//float sndVal = texture(iChannel1, vec2(sndIdx, 0.2)).x;\n\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\n// The texture stores the particle position in xy and the velocity in zw.\n\nvec4 firstInit(vec2 _uv)\n{\n    return vec4(0.0, 0.0, 0.0, 0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 pixelSize = 1.0 / iResolution.xy;\n    \n    // Initialize the texture on the first frame .\n    if (iFrame == 1)\n    {\n        fragColor = firstInit(uv);\n        return;\n    }\n    \n    int currentFrame = iFrame % int(iResolution.y);\n    int currentParticle = int(iResolution.x);\n        \n  \tif(int(fragCoord.y) == currentFrame)\n    {\n        //Spawn current particles\n        vec2 seed0 = uv * float(iFrame);\n        fragColor = spawnParticles(currentParticle, seed0);\n    }\n    else\n    {\n        // update all particle   \n        vec4 previousFrameValues = texture(iChannel0, uv);\n        vec2 position = previousFrameValues.xy;\n        vec2 velocity = previousFrameValues.zw;\n        \n    \tfloat particleLifeRatio = abs((float(currentFrame) - fragCoord.y) / iResolution.y);\n        \n        vec2 seed1 = uv * iTime;\n        fragColor = updateParticle(position, velocity, seed1, iTimeDelta);\n           \n        //Mouse attraction.\n        if (iMouse.w>0.01)\n        {\n           vec2 mousePosition = (iMouse.xy/iResolution.xy);\n           vec2 attractionVector = mousePosition - position;\n           fragColor.zw += ATTRACTION * (normalize(attractionVector));\n        } \n    }   \n}","name":"Buf A","description":"","type":"buffer"}]}