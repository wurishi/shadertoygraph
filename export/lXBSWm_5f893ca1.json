{"ver":"0.1","info":{"id":"lXBSWm","date":"1710679994","viewed":44,"name":"Rotating Donut.","username":"Urban15382","description":"Rotating donut. I rewrote some code.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//by Urban15382\nconst int max_i = 100;\nconst float max_t = 6.;\nconst float min_d = .01;\n\nmat2 rot(float angle){\n    float c = cos(angle), s = sin(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat dDonut(vec3 pos, float r1, float r2, vec3 p){\n    float xz = length(pos.xz - p.xz) - r1;\n    return length(vec2(xz, p.y)) - r2;\n}\n\nfloat map(vec3 p){\n    vec3 donut = vec3(0, 0, 4);\n    p -= donut;\n    p.yz *= rot(iTime * .6); p.xy *= rot(iTime * .5);\n    float dDonut = dDonut(donut, 1.,  .5,p + donut);\n    return dDonut;\n}\n\nfloat raymarch(vec3 ro, vec3 rd){\n    float t = 0.;\n    for(int i = 0; i < max_i; i++){\n        vec3 p = ro + rd * t;\n        float d = map(p);\n        if(d < min_d || t > max_t) break;\n        t += d;\n    }\n    return t;\n}\n\nvec3 getNormal(vec3 p) {\n\tfloat d = map(p);\n    vec2 e = vec2(.001, 0);\n    vec3 n = d - vec3(\n        map(p-e.xyy),\n        map(p-e.yxy),\n        map(p-e.yyx));\n    return normalize(n);\n}\n\nfloat getLigth(vec3 p){\n    vec3 n = getNormal(p);\n    vec3 l = normalize(-vec3(-1, -1, 1));\n    float diff = max(dot(n, l), 0.1);\n    return diff;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = (fragCoord.xy - iResolution.xy / 2.) / iResolution.y;\n    vec3 ro = vec3(0, 0, 0);\n    vec3 rd = normalize(vec3(uv, 1));\n    float d = raymarch(ro, rd);\n    vec3 col = vec3(0, 0, 0);\n    if(d < max_t){\n        vec3 p = ro + rd * d;\n        col = getLigth(p) * vec3(1.0, 0.7373, 0.3922);\n    }\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}