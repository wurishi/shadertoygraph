{"ver":"0.1","info":{"id":"clcfz8","date":"1700948257","viewed":29,"name":"Karaoke fun","username":"omegasbk","description":"Very hacked up, just for fun","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["sound","music","font","karaoke"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRr","filepath":"/media/a/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","previewfilepath":"/media/ap/d96b229eeb7a08d53adfcf1ff89e54c9ffeebed193d317d1a01cc8125c0f5cca.mp3","type":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Made by Darko Supe (omegasbk) 2023-11-25\n// Feel to re-use, any credits very much appreciated though :) \n// Disclaimer: very hacked up\n\nfloat drawBall(vec2 uv, vec2 point, float radius)\n{\n    float a = 1. - smoothstep(radius - radius/4., radius, distance(uv, point));\n    float b = 1. - smoothstep(0., radius - radius/ 8., distance(uv, point));\n    \n    return max(0., a - b);\n}\n\n#define COL_B vec3(0.8, 0.4, 0.2)\n#define COL_S vec3(0.1, 0.8, 0.8)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n          \n    int tx = int(uv.x*512.0);\n    float wave = texelFetch(iChannel1, ivec2(tx, 1), 0 ).x;\n            \n    vec3 col = texture(iChannel0, vec2(uv.x, uv.y + wave/10. - 0.11)).rgb;\n    col = COL_S * fwidth(col.x) * 10.;\n \n    uv -= 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    float ballPosX = (fract(iTime/ 3.) - 0.5) * 2. + 0.05;\n    float ballPosY = 0.3;\n    ballPosY += sin(ballPosX * 38.) / 10.;\n    ballPosY = mix(0.2, ballPosY, step(-0.65, ballPosX) - step(0.6, ballPosX));\n    \n    col *= mix(col, vec3(0.5, 0.4, 0.2) *3., smoothstep(0.01,0.1, (ballPosX-uv.x)));\n    \n    col += (1.-step(ballPosX, uv.x))*(1. - step(0.1, abs(uv.y-0.065))) / (ballPosX-uv.x) / 30. * (1. - smoothstep(-0.65, -0.55, ballPosX)) * COL_S;\n    \n    col += drawBall(uv, vec2(ballPosX, ballPosY), 0.03) * COL_S;\n     \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define A vec2(1, 11)\n#define B vec2(2, 11)\n#define C vec2(3, 11)\n#define D vec2(4, 11)\n#define E vec2(5, 11)\n#define F vec2(6, 11)\n#define G vec2(7, 11)\n#define H vec2(8, 11)\n#define I vec2(9, 11)\n#define J vec2(10, 11)\n#define K vec2(11, 11)\n#define L vec2(12, 11)\n#define M vec2(13, 11)\n#define N vec2(14, 11)\n#define O vec2(15, 11)\n#define P vec2(0, 10)\n#define Q vec2(1, 10)\n#define R vec2(2, 10)\n#define S vec2(3, 10)\n#define T vec2(4, 10)\n#define U vec2(5, 10)\n#define V vec2(6, 10)\n#define W vec2(7, 10)\n#define X vec2(8, 10)\n#define Y vec2(9, 10)\n#define Z vec2(10, 10)\n\n#define PRINT(l, x, y) getLetter(uv, vec2(x, y), l)\n#define OUT(l, x, y) col += PRINT(l, x, y)","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TA 0.0625\n\nmat3 letterMatrix = mat3(\n1./5., 0., 0.,\n0., 1./5., 0., \n0.0, 0.0, 1.\n);\n\nvec3 getLetter(vec2 uv, vec2 pos, vec2 letterIndices)\n{\n    pos = -pos/16.;\n    \n    mat3 mat = letterMatrix;\n    \n    mat[2][0] = pos.x-0.08;\n    mat[2][1] = pos.y-0.07;\n    \n    vec3 uvP = mat * vec3(uv, 1.); \n    uvP.x *= iResolution.x / iResolution.y;\n   \n    uvP.x = clamp(uvP.x, 0., TA);\n    uvP.y = clamp(uvP.y, 0., TA);\n    \n    return texture(iChannel0, uvP.xy + letterIndices/16.).rrr;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec3 col = vec3(0.);\n\n    OUT(K, -0.9, 0.0);\n    OUT(A, -0.6, 0.0);\n    OUT(R, -0.3, 0.0);\n    OUT(A, 0.0, 0.0);\n    OUT(O, 0.3, 0.0);\n    OUT(K, 0.6, 0.0);\n    OUT(E, 0.9, 0.0);  \n    \n    fragColor = vec4(col, 1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}