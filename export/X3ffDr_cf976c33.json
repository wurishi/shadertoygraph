{"ver":"0.1","info":{"id":"X3ffDr","date":"1728286798","viewed":45,"name":"Continous line drawing","username":"playbyan1453","description":"Twitter feed recently showing me Freya's visualization on jfa algorithm so I'd like to make some outline generator out of this. This shader is just extension of this shader[url]https://www.shadertoy.com/view/ct2cDV[/url]","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["sdf","jfa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 uv = (fragCoord.xy * 2.0 - iResolution.xy) / iResolution.y;\n    vec4 nearest = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    vec4 p = (nearest * 2.0 - iResolution.xyxy) / iResolution.y;\n    float d = distance(uv, p.xy) - distance(uv, p.zw);\n    \n    // coloring from iq\n    // vec3 col = (d > 0.0) ? vec3(0.9, 0.6, 0.3) : vec3(0.65, 0.85, 1.0);\n    // col *= 1.0 - exp(-6.0 * abs(d));\n    // col *= 0.8 + 0.2 * cos(d * iResolution.y / 5.0);\n    // col = mix(col, vec3(1), 1.0 - smoothstep(0.0, 0.01, abs(d)));\n    \n    vec3 col = vec3(smoothstep(0.5 / iResolution.y, -0.5 / iResolution.y, d));\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Store previous mouse to make continous line.\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    ivec2 p = ivec2(fragCoord);\n    if(p.y == 0) {\n        vec4 prev = texelFetch(iChannel0, ivec2(0), 0);\n        if(p.x == 0) fragColor = iMouse;\n        if(p.x == 1) fragColor = prev.z > 0.0 ? prev : iMouse;\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// paniq : https://www.shadertoy.com/view/4syGWK\n// fenix : https://www.shadertoy.com/view/ct2cDV\n\nint maxSteps = 10;\nfloat tmax = 1e20;\n\nfloat sdSegment(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h);\n}\n\nvec4 tex(sampler2D smp, ivec2 u, int lod) {\n    ivec2 R = textureSize(smp, lod);\n    if(u.x < 0 || u.y < 0 || u.x >= R.x || u.y >= R.y) return vec4(tmax);\n    if(max(u.x, u.y) < 1) return vec4(tmax);\n    return texelFetch(smp, ivec2(u), lod);\n}\n\nbool getMask(vec2 p, vec2 a, vec2 b) {\n    p = (p * 2.0 - iResolution.xy) / iResolution.y;\n    a = (a * 2.0 - iResolution.xy) / iResolution.y;\n    b = (b * 2.0 - iResolution.xy) / iResolution.y;\n    return iMouse.z > 0.0 && sdSegment(p, a, b) < (brushSize / iResolution.y);\n    // return iFrame <= 1 && distance(p, iResolution.xy * 0.5) < 100.0;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\n    vec2 pm = texelFetch(iChannel0, ivec2(1, 0), 0).xy;\n    vec2 cm = texelFetch(iChannel0, ivec2(0, 0), 0).xy;\n    // JFA step\n    int stride = int(exp2(float((maxSteps - iFrame) % maxSteps)));\n    \n    ivec2 tc = ivec2(fragCoord);\n    \n    if(iFrame == 0) {\n        fragColor = vec4(vec2(tmax), fragCoord);\n    } else {\n        vec4 p = tex(iChannel1, tc, 0);\n        if(getMask(p.zw, pm, cm)) {\n            p.zw = vec2(tmax);\n        } else {\n            for(int y = -1; y <= 1; y++) {\n                for(int x = -1; x <= 1; x++) {\n                    vec4 ntc = tex(iChannel1, tc + ivec2(x, y) * stride, 0);\n                    p.xy = distance(fragCoord, ntc.xy) < distance(p.xy, fragCoord) ? ntc.xy : p.xy;\n                    if(!getMask(ntc.zw, pm, cm))\n                        p.zw = distance(fragCoord, ntc.zw) < distance(p.zw, fragCoord) ? ntc.zw : p.zw;\n                }\n            }\n        }\n        p = getMask(fragCoord, pm, cm) ? vec4(tc, vec2(tmax)) : p;\n        fragColor = p;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define brushSize 10.0","name":"Common","description":"","type":"common"}]}