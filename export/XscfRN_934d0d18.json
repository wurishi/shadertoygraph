{"ver":"0.1","info":{"id":"XscfRN","date":"1524762304","viewed":107,"name":"SolarSystemProject","username":"LesserDog","description":"EGP-200-01\nA simple 3D solar system, containing the Earth, Moon, and Sun.\nNot to scale, and orbits not reflective of reality.\n\nPatrick Gregg","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["earth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float lineDist(vec3 rO, vec3 rD, vec3 point)\n{\n    return length(cross(point - rO, rD))/length(rD);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n// Normalized pixel coordinates (from 0 to 1)\nvec2 uv = fragCoord/iResolution.xy;\n    \n    uv -= 0.5;\n    \n//Correct for aspect ratio\nfloat aspectRatio = iResolution.y/iResolution.x;\nuv.y = uv.y * aspectRatio;\n\n//Ray Origin and direction\n    vec3 rayO = vec3(0.0, 0.0, -2);\n    vec3 rayD = vec3(uv.x,uv.y,0) - rayO;\n\n//Colors\nvec4 Canvas = vec4(1.0,1.0,1.0,1.0);\nvec4 EarthCol = vec4(0.0,0.0,1.0,1.0);\nvec4 MoonCol = vec4(0.9,0.9,0.9,1.0);\nvec4 SunCol = vec4(1.0,1.0,0.0,1.0);\nvec4 BgColor = texture(iChannel0, uv);\n    \n//Distances from the Earth\nvec3 MoonDist = vec3(0.05,0.05,0.05);\nvec3 SunDist = vec3(0.3,0.3,0.3);\n\n//Modify aspect ratio for distances\nMoonDist.x *= aspectRatio;\nSunDist.x *= aspectRatio;\n\n//Angles\nfloat EarthTheta = iTime*0.5;\nfloat EarthPhi = iTime*0.9;\nfloat MoonTheta = iTime*0.5;\nfloat MoonPhi = iTime*0.3;\n    \n//Planet locations\t\n    //Will work regardless of where the sun's location is\nvec3 SunLoc = vec3(0.0, 0.0, 0.0);\n//3D\nvec3 EarthLoc = vec3 (SunLoc.x + SunDist.x*cos(EarthTheta)*sin(EarthPhi),SunLoc.y+SunDist.y*sin(EarthTheta)*sin(EarthPhi), SunDist.z*cos(EarthPhi));\n//2D\n//vec3 EarthLoc = vec3 (SunDist.x*cos(EarthTheta),SunDist.y*sin(EarthTheta),0.0);\n//3D\nvec3 MoonLoc = vec3 (EarthLoc.x + MoonDist.x*cos(MoonTheta)*sin(MoonPhi), EarthLoc.y + MoonDist.y*sin(MoonTheta)*sin(MoonPhi), EarthLoc.z + MoonDist.z*(MoonPhi));\n//2D\n//vec3 MoonLoc = vec3 (EarthLoc.x + MoonDist.x*cos(MoonTheta), EarthLoc.y+MoonDist.y*sin(MoonTheta), 0.0);\nfloat SunRad = 0.04;\nfloat EarthRad = 0.01;\nfloat MoonRad = 0.003;\n    \n//Fix aspect ratio\nEarthLoc.y *= aspectRatio;\nMoonLoc.y *= aspectRatio;\nSunLoc.y *= aspectRatio;\n\n//Create planets\nfloat Earth = lineDist(rayO, rayD, EarthLoc);\nfloat Sun = lineDist(rayO, rayD, SunLoc);\nfloat Moon = lineDist(rayO, rayD, MoonLoc);\n\nEarthCol.a = step(EarthRad, Earth);\nMoonCol.a = step(MoonRad, Moon);\nSunCol.a = step(SunRad, Sun);\n\n\n  \n//Draw\nCanvas = BgColor;\nCanvas = mix(Canvas, EarthCol, 1.0-EarthCol.a);\nCanvas = mix(Canvas, MoonCol, 1.0-MoonCol.a);\nCanvas = mix(Canvas, SunCol, 1.0-SunCol.a);\nfragColor = vec4(Canvas);\n\n}","name":"Image","description":"","type":"image"}]}