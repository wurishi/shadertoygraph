{"ver":"0.1","info":{"id":"ftdfW7","date":"1663179983","viewed":110,"name":"Lab01CustomFlower","username":"rcj9719","description":"Custom Flower shader","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * @author rah, inspired by jonobr1 / http://jonobr1.com/\n */\n\n/* \n * Output circle colors at given center pos and radius\n */\nvec4 circle(vec2 uv, vec2 center, float radius, vec3 color)\n{    \n    // Get distance of point from center, get difference from given radius\n\tfloat d = length(center - uv) - radius;\n\tfloat t = clamp(d, 0.0, 1.0);\n    \n    // If point is smaller than radius, set color alpha to 1, otherwise 0\n\treturn vec4(color, 1.0 - t);\n}\n\n/*\n * Your work here!\n */\n \n\n \nfloat computeRadius(vec2 uv, float offset, float radiusFactor)\n{\n    float radius = 0.25 * iResolution.y;\n    \n    \n    // Centered uv\n    vec2 uvCenter = (2.0f * uv - iResolution.xy);\n    \n    // Get pixel angle around the center\n    float a = atan(uvCenter.x,uvCenter.y);\n    \n    radius = 0.75 * (\n                    abs(\n                        sin(iTime + offset) * triangleWave(a, 0.625,  1.0) * 0.3 * iResolution.y\n                        + sin(iTime * 0.75 + offset) * triangleWave(a, 2.0 * 0.625,  1.0) * 0.3 * iResolution.y\n                        + sin(iTime * 0.5 + offset) * triangleWave(a, 3.0 * 0.625,  1.0) * 0.3 * iResolution.y\n                        )\n                    )\n             + radius/radiusFactor;\n    if(radius > 0.20 * iResolution.y) {\n        radius = 0.20 * iResolution.y;\n    }\n    float triangleWeight = sin(iTime);\n    //radius = radius + \n    //        triangleWeight * triangleWave(a, 1.256 * 0.625,  1.0) * 0.35 * iResolution.y;\n\n    return radius;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n    vec2 offset = (0.5 * iResolution.xy);\n    \n    // Background layer\n\tvec4 layer1 = vec4(rgb(31.0, 94.0, 53.0), 1.0)\n                    * ((6.0 * sin(2.0 * (uv.x - uv.y) - 5.0 * iTime) - 3.0)\n                    + (6.0 * sin(2.0 * (uv.x + uv.y) + 5.0 * iTime) - 3.0));\n    \n    uv = rotatePoint2d(uv, center, iTime) + offset;\n\t// Circle\n\tvec3 yellow = rgb(255.0, 255.0, 0.0);\n    vec3 orange = rgb(255.0, 120.0, 0.0);\n    vec3 green = rgb(20.0, 100.0, 100.0);\n    \n    \n    vec3 col1 = yellow + orange * sin(2.0 * 3.14 * (orange * iTime + green));\n    vec3 col2 = orange + green * sin(2.0 * 3.14 * (yellow * iTime + yellow));\n    vec3 col3 = green + yellow * sin(2.0 * 3.14 * (orange * iTime + orange));\n    \n\tfloat radius = computeRadius(uv, 0.0, 3.0);\n\tvec4 layer2 = circle(uv, center, radius, yellow);\n\t\n    radius = computeRadius(uv, 3.14 * 0.15, 5.0);\n    vec4 layer31 = circle(uv, center, radius, col2);\n    \n    radius = computeRadius(uv, 3.14 * 0.25, 25.0);\n    vec4 layer32 = circle(uv, center, radius, green);\n\t\n    // Blend the two\n\tfragColor = mix(mix(mix(layer1, layer2, layer2.a), layer31, layer31.a), layer32, layer32.a);\n    \n\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\n * Toolbox functions! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */ \nfloat bias(float t, float b) {\n    return (t / ((((1.0/b) - 2.0)*(1.0 - t))+1.0));\n}\n\n/*\n * Basic Utilities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n */\nfloat easeInOutExpo(float x) {\n    return x == 0.0\n      ? 0.0\n      : x == 1.0\n      ? 1.0\n      : x < 0.5 ? pow(2.0, 20.0 * x - 10.0) / 2.0\n      : (2.0 - pow(2.0, -20.0 * x + 10.0)) / 2.0;\n}\n\nfloat easeInOutSine(float x) {\n    return -(cos((3.14 * x) + (3.14 * 0.5)) - 1.0) / 2.0;\n}\n\nfloat triangleWave(float x, float frequency, float amplitude) {\n    return abs(mod((x * frequency), amplitude) - (0.5 * amplitude));\n}\n\n/* \n * Rotate an input point about some center by angle\n */\nvec2 rotatePoint2d(vec2 uv, vec2 center, float angle)\n{\n    vec2 rotatedPoint = vec2(uv.x - center.x, uv.y - center.y);\n    float newX = cos(angle) * rotatedPoint.x - sin(angle) * rotatedPoint.y;\n    rotatedPoint.y = sin(angle) * rotatedPoint.x + cos(angle) * rotatedPoint.y;\n    rotatedPoint.x = newX;\n    return rotatedPoint;\n}\n\n/*\n * Make a vec3 color from rgb values [0, 255]\n */\nvec3 rgb(float r, float g, float b)\n{\n\treturn vec3(r / 255.0, g / 255.0, b / 255.0);\n}\n","name":"Common","description":"","type":"common"}]}