{"ver":"0.1","info":{"id":"ml2fDh","date":"1694009113","viewed":37,"name":"Complex power tower","username":"zetaa","description":"Inspired by 3blue1brown's https://youtu.be/elQVZLLiod4?t=819. basically calculates complex numbers raised to the power of themselves and plots their color based on how fast (or if they even) converge to a number.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["math","powers","imaginarynumbers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 complexPow(vec2 z, vec2 n) {\n  float r = length(z);\n  float theta = atan(z.y, z.x);\n  \n  float realPart = pow(r, n.x) * cos(n.x * theta) * exp(-n.y * theta);\n  float imagPart = pow(r, n.x) * sin(n.x * theta) * exp(n.y * theta);\n  \n  return vec2(realPart, imagPart);\n}\n\n\nfloat power_tower(vec2 input_num, float iterations){\n    vec2 a = input_num;\n    vec2 previous = vec2(0.0);\n    float steps = 0.0;\n    \n    for(float i = 0.0; i < iterations; i++){\n        a = complexPow(input_num, a);\n        \n        if(abs(a.x - previous.x) < 0.00000001){\n            break;\n        }\n        \n        \n        steps++;\n        previous = a;\n    }\n    return steps;\n}\n        \nvec3 pal(in float t)\n{\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(2.0, 1.0, 0.0);\n    vec3 d = vec3(\t0.50, 0.20, 0.25);\n\n    return a + b * cos(6.28318 * (c * t + d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float iterations = 10.0 + 50.0 * (sin(22.83) + 1.0);\n    float xmin = -0.5 * 3.0;\n    float xmax = 1.8 * 2.0;\n    float ymin = -1.0 * 2.0;\n    float ymax = 1.0 * 2.0;\n    \n    float x = mix(xmin, xmax, fragCoord.x / iResolution.x);\n    float y = mix(ymin, ymax, fragCoord.y / iResolution.y);\n\n    vec2 z = vec2(x, y);\n    vec2 c = z;\n    \n    vec3 color = vec3(0.0, 0.0, 0.0);\n    float steps = power_tower(z, iterations);\n    if(steps == iterations){\n        color = vec3(0.0, 0.0, 0.0);\n    }\n    else{\n        float hue = steps / iterations;\n        color = vec3(pal(hue));\n    }\n\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}