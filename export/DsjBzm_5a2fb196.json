{"ver":"0.1","info":{"id":"DsjBzm","date":"1689560679","viewed":98,"name":"Even-odd fill rule","username":"zenzicubic","description":"The SVG even-odd fill rule in action","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fill","svg","rule","evenodd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float cross2D(vec2 a, vec2 b) { return a.x*b.y - a.y*b.x; }\n#define EPS 1e-1\n#define NPTS 5\n\nvec2 pts[NPTS] = vec2[](vec2(1.,0.), vec2(-0.81, 0.59), vec2(.31, -.95), vec2(.31, .95), vec2(-.81, -.59));\n\nbool rayLineInt(vec2 ori, vec2 dir, vec2 p1, vec2 p2) {\n   // I think I got this from stack overflow, it's been a while\n   vec2 v1 = ori - p1;\n   vec2 v2 = p2 - p1;\n   vec2 v3 = vec2(-dir.y, dir.x);\n   \n   float den = dot(v2, v3);\n   if (abs(den) < EPS) return false;\n   \n   float t0 = cross2D(v2, v1) / den;\n   float t1 = dot(v1, v3) / den;\n   \n   return (t0 > 0. && t1 > 0. && t1 < 1.);\n} \n\n#define R iResolution\n\nvoid mainImage(out vec4 k, in vec2 c)\n{\n    vec2 uv = (2. * c - R.xy) / R.y;\n    k = vec4(0.);\n    \n    bool coll;\n    int nV, ct = 0;\n    for (int i = 0; i < NPTS; i ++) {\n        nV = (i + 1) % NPTS;\n        coll = rayLineInt(uv, vec2(-1., 0.), pts[i], pts[nV]);\n        if (coll) { ct++; }\n    }\n    \n    k.r = float(ct%2);\n}","name":"Image","description":"","type":"image"}]}