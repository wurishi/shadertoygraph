{"ver":"0.1","info":{"id":"7slXDB","date":"1620060249","viewed":152,"name":"test BVH","username":"me_123","description":"Not compleet","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["bvh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 box(in vec3 ro, in vec3 rd, in vec3 pos, in vec3 size) {\n    vec3 dirfrac = 1.0 / rd;\n    float t1 = (pos.x - ro.x)*dirfrac.x;\n    float t2 = (size.x - ro.x)*dirfrac.x;\n    float t3 = (pos.y - ro.y)*dirfrac.y;\n    float t4 = (size.y - ro.y)*dirfrac.y;\n    float t5 = (pos.z - ro.z)*dirfrac.z;\n    float t6 = (size.z - ro.z)*dirfrac.z;\n\n    float tmin = max(max(min(t1, t2), min(t3, t4)), min(t5, t6));\n    float tmax = min(min(max(t1, t2), max(t3, t4)), max(t5, t6));\n    if (tmax < 0.) {\n        return vec2(-1);\n    }\n    if (tmin > tmax)\n    {\n        return vec2(-1);\n    }\n\n    return vec2(tmin, tmax);\n}\nconst float camSize = 5.;\nvec3 hitScene(in vec3 ro, in vec3 rd) {\n    vec3 o = vec3(0);\n    int level = 2;\n    int l = level;\n    ivec2 id = ivec2(0);\n    for (int i = 0; i < 3; i += 1) {\n        vec4 pp = texelFetch(iChannel0, ivec2(id.x, level*6), 0);\n        vec3 size = texelFetch(iChannel0, ivec2(id.x, (level*6)+1), 0).xyz;\n        int hitCell = 0;\n        vec2 b = box(ro, rd, pp.xyz, size);\n        vec4 pp1 = texelFetch(iChannel0, ivec2(id.y, level*6), 0);\n        size = texelFetch(iChannel0, ivec2(id.y, (level*6)+1), 0).xyz;\n        vec2 b1 = box(ro, rd, pp1.xyz, size);\n        if (b.x != -1.0) {\n            o += 0.05;\n            //if (i == l) {o = vec3(0.5, 0, 0);}\n            hitCell += 1;\n            id = unpack2(int(pp.w)-1);\n        }\n        if (b1.x != -1.0) {\n            o += 0.05;\n            //if (level == l) {o = vec3(0.5, 0, 0);}\n            hitCell += 1;\n            id = unpack2(int(pp1.w)-1);\n        }\n        if (hitCell == 2 && (b.x != b1.x)) {\n            if (b.x < b1.x) {\n                id = unpack2(int(pp.w)-1);\n            }\n            if (b.x > b1.x) {\n                id = unpack2(int(pp1.w)-1);\n            }\n        }\n        if (hitCell != 0) level -= 1;else {\n            //break;\n        };\n    }\n    return vec3(o);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame > 5) {\n        vec2 uv = ((fragCoord.xy/iResolution.xy)-0.5) * vec2(iResolution.x/iResolution.y, 1.);\n        vec2 mouse = (iMouse.xy/iResolution.xy)-0.5;\n        mouse.y *= 2.0;\n        mouse.x *= iResolution.x/iResolution.y;\n        vec3 ro = vec3(sin(mouse.x*5.)*camSize, mouse.y*camSize, cos(mouse.x*5.)*camSize);\n        vec3 at = vec3(0);\n        vec3 cam_z = normalize(at-ro);\n        vec3 cam_x = normalize(cross(vec3(0, 1, 0), cam_z));\n        vec3 cam_y = cross(cam_z, cam_x);\n        vec3 rd = normalize(uv.x * cam_x + uv.y * cam_y + 1.5 * cam_z);\n        vec3 h = hitScene(ro, rd);\n        vec3 col = vec3(h);\n\t    fragColor = vec4(col,1.0);\n        //fragColor += vec4(unpack2(int(texture(iChannel0, vec2(0, 0.0)+((fragCoord.xy/iResolution.xy*0.1))+vec2(0, 0.0)).w)), 0, 0)/float(count);\n        //fragColor = vec4(fragColor.x);\n    } else {\n        fragColor = vec4(texture(iChannel0, fragCoord.xy/iResolution.xy*0.1));\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\n0: bounding box min <- | <-   <- \n1: bounding box max <- |         ^\n2: second id (x offset)          |\n3: bounding both boxes max       \n4: bounding both boxes min       ^\n5: valid state                   |\n6: new min  -> |                 \n7: new max  -> | ->  ->   ->   -> \n*/\nfloat hash3(vec3 p) {\n    p.xy += p.z*100.;\n\treturn fract(sin(dot(p.xy, vec2(12.9898, 78.233)))*43758.5453);\n}\nvec3 random_sphere_direction(vec2 seed) {\n    float u = hash(seed);\n    float v = hash(seed+3.);\n    float theta = u * 2.0 * 3.1415;\n    float phi = acos(2.0 * v - 1.0);\n    float r = pow(hash(seed+10.), 0.33333333);\n    float sinTheta = sin(theta);\n    float cosTheta = cos(theta);\n    float sinPhi = sin(phi);\n    float cosPhi = cos(phi);\n    float x = r * sinPhi * cosTheta;\n    float y = r * sinPhi * sinTheta;\n    float z = r * cosPhi;\n    return normalize(vec3(x, y, z));\n}\nvec3 random_hemisphere_direction(vec3 dir,vec2 seed)\n{\n\tvec3 v = random_sphere_direction(seed);\n\treturn v * sign(dot(v, dir));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    fragColor = texture(iChannel0, uv);\n    ivec2 frag = ivec2(fragCoord);\n    const int pass = 6;\n    int frame = iFrame%pass;\n    int offsetY = int(floor(float(iFrame)/float(pass)))*pass;\n \tbool content = texelFetch(iChannel0, ivec2(frag.x, offsetY), 0).w != 0.;\n    if (((texelFetch(iChannel0, ivec2(1, offsetY), 0).w != 0.) || offsetY < 1)) {\n        if (iFrame == 0) {\n            //init \n            if (frag.x < count && (frag.y == offsetY || frag.y == offsetY+1)) {\n                if (frag.y == offsetY) {\n                    fragColor = vec4(random_sphere_direction(vec2(uv.x, offsetY))+vec3(0.2),frag.x+1);\n                } else {\n                    fragColor = vec4(random_sphere_direction(vec2(uv.x, offsetY))+0.0, frag.x+1);\n                }\n            }\n        }\n        if (frame == 1) {\n            if (frag.y == offsetY+2 && content) {\n                vec4 t = texelFetch(iChannel0, ivec2(frag.x, frag.y-2), 0);\n                float d = 1000.;\n                vec3 p = vec3(0);\n                float id = 0.;\n                for (int i = 0; i < count; i += 1) {\n                    vec4 tt = texelFetch(iChannel0, ivec2(i, frag.y-2), 0);\n                    if (int(tt.w) == 0) {\n                        break;\n                    }\n                    float dist = length(t.xyz-tt.xyz);\n                    bool mm = i!=frag.x;\n                    if (d > dist && mm) {\n                        d = dist;\n                        p = vec3(i);\n                        id = float(pack2(ivec2(i, frag.x)))+1.;\n                    }\n                }\n                fragColor = vec4(p, id);\n            }\n        }\n        if (frame == 2) {\n            if (frag.y == offsetY+3 && content) {\n                vec3 p1 = texelFetch(iChannel0, ivec2(frag.x, (frag.y-3)+0), 0).xyz;\n                vec3 p2 = texelFetch(iChannel0, ivec2(frag.x, (frag.y-3)+1), 0).xyz;\n                vec3 t = min(p2, p1);\n                ivec2 id = ivec2(texelFetch(iChannel0, ivec2(frag.x, (frag.y-3)+2), 0).xw);\n                vec3 tt = texelFetch(iChannel0, ivec2(id.x, (frag.y-3)+1), 0).xyz;\n                vec3 m = min(t, tt);\n                vec3 p = vec3(0);\n                fragColor = vec4(m-p, id.y);\n            }\n            if (frag.y == offsetY+4 && content) {\n                vec3 p1 = texelFetch(iChannel0, ivec2(frag.x, (frag.y-4)+0), 0).xyz;\n                vec3 p2 = texelFetch(iChannel0, ivec2(frag.x, (frag.y-4)+1), 0).xyz;\n                vec3 t = max(p1, p2);\n                ivec2 id = ivec2(texelFetch(iChannel0, ivec2(frag.x, (frag.y-4)+2), 0).xw);\n                vec3 tt = (texelFetch(iChannel0, ivec2(id.x, (frag.y-4)), 0).xyz);\n                vec3 p = vec3(0);\n                fragColor = vec4(max(tt, t)+p, id.y);\n            }\n        }\n        if (frame == 3) {\n            if (frag.y == offsetY+5 && texelFetch(iChannel0, ivec2(frag.x, frag.y-5), 0).w != 0.) {\n                vec3 pix = texelFetch(iChannel0, ivec2(frag.x, (frag.y-5)+4), 0).xyz;\n                bool valid = true;\n                for (int i = 0; i < frag.x; i += 1) {\n                    vec3 pix1 = texelFetch(iChannel0, ivec2(i, (frag.y-5)+4), 0).xyz;\n                    if (pix.x == pix1.x && pix.y == pix1.y && pix.z == pix1.z) {\n                        valid = false;\n                    }\n                }\n                if (valid) {\n                    fragColor = vec4(1);\n                }\n\n            }\n        }\n        if (frame == 4) {\n            int f = 7;\n            if (frag.y == offsetY+6) {\n                f = 6;\n            }\n            if ((frag.y == offsetY+6 || frag.y == offsetY+7) && content) {\n                int ii = 0;\n                for (int i = 0; i < count; i += 1) {\n                    if (texelFetch(iChannel0, ivec2(frag.x, frag.y-f), 0).w == 0.) {\n                        break;\n                    }\n                    if (texelFetch(iChannel0, ivec2(i, (frag.y-f)+5), 0).w != 0.0) {\n                        if (frag.y == offsetY+6) {\n                            if (frag.x == ii) {\n                                fragColor = vec4(texelFetch(iChannel0, ivec2(i, (frag.y-f)+4), 0).xyzw);\n                            }\n                        }\n                        if (frag.y == offsetY+7) {\n                            if (frag.x == ii) {\n                                fragColor = vec4(texelFetch(iChannel0, ivec2(i, (frag.y-f)+3), 0).xyzw);\n                            }\n                        }\n                        ii += 1;\n                    }\n                }\n            }\n        }\n    } else {\n        if (texelFetch(iChannel0, ivec2(int(iResolution.x)-5, int(iResolution.y)-5), 0).w == 0.0) {\n            if (frag.y == int(iResolution.y)-5 && frag.x == int(iResolution.x)-5) {\n                fragColor = vec4(float(iFrame/6));\n            }\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int count = 4;\nint pack4(in ivec4 d) {\n\treturn d.x|(d.y<<8)|(d.z<<16)|(d.w<<24);\n}\nivec4 unpack4(in int v) {\n\treturn ivec4(v&0xff, (v>>8)&0xff, (v>>16)&0xff, (v>>24)&0xff);\n}\nint pack2(in ivec2 d) {\n\treturn d.x|(d.y<<14);\n}\nivec2 unpack2(in int v) {\n\treturn ivec2(v&0x3fff, (v>>14)&0x3fff);\n}\nfloat hash(vec2 p) {\n    p += 6.;\n\treturn fract(sin(dot(p.xy, vec2(12.9898, 78.233)))*43758.5453);\n}","name":"Common","description":"","type":"common"}]}