{"ver":"0.1","info":{"id":"3lScWd","date":"1595641404","viewed":72,"name":"conway's game of life","username":"CoolerZ","description":"Conway's game of life. Click and drag to make cells alive.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["game","life","conway"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    ivec2 xy = ivec2(fragCoord-.5);\n    fragColor = vec4(texelFetch(iChannel0, xy, 0).rrr,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord-.5);\n    fragColor = texelFetch(iChannel0, xy, 0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define R2 .6\n#define A .5\n#define F 1.\n\nconst vec3[] grad = vec3[](\n    vec3(1,1,0),vec3(-1,1,0),vec3(1,-1,0),vec3(-1,-1,0),\n\tvec3(1,0,1),vec3(-1,0,1),vec3(1,0,-1),vec3(-1,0,-1),\n\tvec3(0,1,1),vec3(0,-1,1),vec3(0,1,-1),vec3(0,-1,-1)\n);\n\nconst int perm[] = int[](151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180);\n\nint hash(ivec3 p)\n{\n    return perm[p.x+perm[p.y+perm[p.z]]]%12;\n}\n\nvec3 skew(vec3 p)\n{\n    return p+(p.x+p.y+p.z)/3.;\n}\n\nvec3 unskew(vec3 p)\n{\n    return p-(p.x+p.y+p.z)/6.;\n}\n\nfloat simplex3d(vec3 xyz)\n{\n    vec3 ijk = floor(skew(xyz));\n    vec3 XYZ0 = unskew(ijk);\n\n    vec3 xyz0 = xyz - XYZ0;\n\n    vec3 ijk1, ijk2;\n    if(xyz0.x >= xyz0.y)\n    {\n        if(xyz0.y >= xyz0.z)\n        {\n            ijk1 = vec3(1,0,0);\n            ijk2 = vec3(1,1,0);\n        }\n        else if(xyz0.x >= xyz0.z)\n        {\n            ijk1 = vec3(1,0,0);\n            ijk2 = vec3(1,0,1);\n        }\n        else\n        {\n            ijk1 = vec3(0,0,1);\n            ijk2 = vec3(1,0,1);\n        }\n    }\n    else\n    {\n        if(xyz0.y < xyz0.z)\n        {\n            ijk1 = vec3(0,0,1);\n            ijk2 = vec3(0,1,1);\n        }\n        else if(xyz0.x < xyz0.z)\n        {\n            ijk1 = vec3(0,1,0);\n            ijk2 = vec3(0,1,1);\n        }\n        else\n        {\n            ijk1 = vec3(0,1,0);\n            ijk2 = vec3(1,1,0);\n        }\n    }\n\n    vec3 xyz1 = xyz0 - unskew(ijk1);\n    vec3 xyz2 = xyz0 - unskew(ijk2);\n    vec3 xyz3 = xyz0 - unskew(vec3(1,1,1));\n\n   \tivec3 IJK = ivec3(ijk) & 0xFF;\n    int gi0 = hash(IJK);\n    int gi1 = hash(IJK + ivec3(ijk1));\n    int gi2 = hash(IJK + ivec3(ijk2));\n    int gi3 = hash(IJK + ivec3(1,1,1));\n\n    float n0 = pow(max(R2 - dot(xyz0, xyz0), 0.), 4.)*dot(grad[gi0], xyz0);\n    float n1 = pow(max(R2 - dot(xyz1, xyz1), 0.), 4.)*dot(grad[gi1], xyz1);\n    float n2 = pow(max(R2 - dot(xyz2, xyz2), 0.), 4.)*dot(grad[gi2], xyz2);\n    float n3 = pow(max(R2 - dot(xyz3, xyz3), 0.), 4.)*dot(grad[gi3], xyz3);\n\n    return 32.*(n0+n1+n2+n3);\n}\n\n#define H(X) ((X)%ivec2(iResolution.xy))\n#define GET(X) (texelFetch(iChannel0, (H(X)), 0).r > .5)\n#define RANGE 10.\n\nconst ivec2[] n_offs = ivec2[](\n    ivec2(-1, 0), ivec2( 1, 0), ivec2( 0,-1), ivec2( 0, 1),\n    ivec2(-1,-1), ivec2( 1,-1), ivec2(-1, 1), ivec2( 1, 1)\n);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 xy = ivec2(fragCoord-.5);\n\n    bool alive;\n    if(iTime < .5)\n    {\n        // alive = texelFetch(iChannel1, xy, 0).r > .5;\n        alive = simplex3d(vec3(xy.xyx)) > .5;\n    }\n    else\n    {\n        alive = GET(xy);\n        int count = 0;\n        for(int i = 0; i < 8; i++)\n        {\n            count += int(GET(xy+n_offs[i]));\n        }\n\n        if(alive)\n        {\n            if(count < 2 || count > 3)alive = false;\n        }\n        else\n        {\n            if(count == 3)alive = true;\n        }\n    }\n\n    // if(iMouse.z > 0. && abs(iMouse.x-fragCoord.x) < RANGE && abs(iMouse.y-fragCoord.y) < RANGE)alive = true;\n    if(iMouse.z > 0. && length(iMouse.xy-fragCoord.xy) < RANGE)alive = true;\n    fragColor = vec4(alive);\n}","name":"Buffer B","description":"","type":"buffer"}]}