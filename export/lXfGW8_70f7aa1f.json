{"ver":"0.1","info":{"id":"lXfGW8","date":"1707397961","viewed":94,"name":"Reaction Diffusion Practice","username":"gorillasun","description":"Reaction Diffusion implemented in a shader - not working as of now","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["organic","reaction"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = fragCoord.xy / iResolution.xy;\n    \n   vec2 values = texture(iChannel0, uv).xy;\n    \n   fragColor = vec4(values,0.0,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"uniform sampler2D bufferTexture;\n\n/*\nvec3 laplacian(in sampler2D tex, in vec2 coordinate){\n    vec3 lap = vec3(0.0,0.0,0.0);\n    \n    lap += texture(tex, vec2(coordinate.x, coordinate.y)).rgb * -1.0;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x+1.0, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y-1.0)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y+1.0)).rgb * 0.2;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0, coordinate.y-1.0)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0, coordinate.y-1.0)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0, coordinate.y+1.0)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x-1.0, coordinate.y+1.0)).rgb * 0.05;\n    \n    return lap;\n} \n*/\n\nvec3 laplacian(in sampler2D tex, in vec2 coordinate){\n    vec3 lap = vec3(0.0,0.0,0.0);\n    \n    lap += texture(tex, vec2(coordinate.x, coordinate.y)).rgb * -1.0;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0/iResolution.x, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x+1.0/iResolution.x, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y-1.0/iResolution.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y+1.0/iResolution.y)).rgb * 0.2;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0/iResolution.x, coordinate.y-1.0/iResolution.y)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0/iResolution.x, coordinate.y-1.0/iResolution.y)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0/iResolution.x, coordinate.y+1.0/iResolution.y)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x-1.0/iResolution.x, coordinate.y+1.0/iResolution.y)).rgb * 0.05;\n    \n    return lap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    if(iTime<1.0){\n        vec2 toMid = (iResolution.xy * 0.5 - fragCoord) / iResolution.y;\n        toMid += sin(atan(toMid.x, toMid.y)*20.0) * 0.01; // Wobble circle a bit to get the desired effects faster.\n        float midDistSq = dot(toMid, toMid);\n        float initVal = pow(sin(midDistSq * 40.0) * 0.5 + 0.5, 5.0);\n        \n        fragColor = vec4(1.0, initVal, 0.0, 1.0);\n        return;\n    }\n    \n    float a = texture(iChannel0, uv).r;\n    float b = texture(iChannel0, uv).g;\n\n    vec3 lp = laplacian(iChannel0, uv);\n        \n    float _DiffusionRateA = 1.0;\n    float _DiffusionRateB = 0.5;\n    float _FeedRate = 0.0545;\n    float _KillRate = 0.062;\n    \n    float _ReactionSpeed = 1.0;\n    \n    float a2 = a + (_DiffusionRateA * lp.x - a*b*b + _FeedRate*(1.0 - a)) * _ReactionSpeed;\n    float b2 = b + (_DiffusionRateB * lp.y + a*b*b - (_KillRate + _FeedRate)*b) * _ReactionSpeed;\n    \n    // Output to screen\n    fragColor = vec4(a2, b2, 0.0, 1.0);\n    \n    \n}\n\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nvec3 laplacian(in sampler2D tex, in vec2 coordinate){\n    vec3 lap = vec3(0.0,0.0,0.0);\n    \n    lap += texture(tex, vec2(coordinate.x, coordinate.y)).rgb * -1.0;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x+1.0, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y-1.0)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y+1.0)).rgb * 0.2;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0, coordinate.y-1.0)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0, coordinate.y-1.0)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0, coordinate.y+1.0)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x-1.0, coordinate.y+1.0)).rgb * 0.05;\n    \n    return lap;\n} \n*/\n\nvec3 laplacian(in sampler2D tex, in vec2 coordinate){\n    vec3 lap = vec3(0.0,0.0,0.0);\n    \n    lap += texture(tex, vec2(coordinate.x, coordinate.y)).rgb * -1.0;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0/iResolution.x, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x+1.0/iResolution.x, coordinate.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y-1.0/iResolution.y)).rgb * 0.2;\n    lap += texture(tex, vec2(coordinate.x, coordinate.y+1.0/iResolution.y)).rgb * 0.2;\n    \n    lap += texture(tex, vec2(coordinate.x-1.0/iResolution.x, coordinate.y-1.0/iResolution.y)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0/iResolution.x, coordinate.y-1.0/iResolution.y)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x+1.0/iResolution.x, coordinate.y+1.0/iResolution.y)).rgb * 0.05;\n    lap += texture(tex, vec2(coordinate.x-1.0/iResolution.x, coordinate.y+1.0/iResolution.y)).rgb * 0.05;\n    \n    return lap;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float a = texture(iChannel0, uv).r;\n    float b = texture(iChannel0, uv).g;\n    \n    vec3 lp = laplacian(iChannel0, uv);\n        \n    float _DiffusionRateA = 1.0;\n    float _DiffusionRateB = 0.5;\n    float _FeedRate = 0.0545;\n    float _KillRate = 0.062;\n    \n    float _ReactionSpeed = 1.0;\n   \n    float a2 = a + (_DiffusionRateA * lp.x - a*b*b + _FeedRate*(1.0 - a)) * _ReactionSpeed;\n    float b2 = b + (_DiffusionRateB * lp.y + a*b*b - (_KillRate + _FeedRate)*b) * _ReactionSpeed;\n    \n    // Output to screen\n    fragColor = vec4(a2, b2, 0.0, 1.0);\n}\n\n","name":"Buffer B","description":"","type":"buffer"}]}