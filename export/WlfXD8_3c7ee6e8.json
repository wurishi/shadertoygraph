{"ver":"0.1","info":{"id":"WlfXD8","date":"1562660961","viewed":271,"name":"Cellularis","username":"OctopusX","description":"Just playing with cellular patterns","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["noise","cellular","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define UVScale 1.0\n#define AnimSpeed 2.0\n#define AnimScale sin(iTime) *0.65\n#define m mat2(7, -5, 5, 7)*0.1\n\n//Hash by Dave Hoskins: https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n//Forked from: https://www.shadertoy.com/view/MdKXDD\nfloat FastCellular2D(vec2 p, int count, float speed)\n{\n\tfloat o = 1.0;\n\tfor (int i=0; i<count; i++)\n\t{\n\t\tp *= m;\n        float h = hash13(vec3(floor(p),i));\n        float s = sin(iTime*h *AnimSpeed *speed) *AnimScale +0.75;\n\t\to = min(o, length(fract(p) - 0.5)/0.6 + s *0.5);\n\t}\n\treturn o;\n}\n\nvoid mainImage(out vec4 col, in vec2 uv)\n{\n    float aspect = iResolution.x / iResolution.y;\n    uv /= iResolution.xy / UVScale *0.1; uv.x *= aspect;\n    uv.x += iTime *0.35;\n    float ptn0 = FastCellular2D(uv *1.26, 5, 1.0);\n    float ptn1 = FastCellular2D(uv *0.66, 5, 1.5);\n    col = vec4(min(ptn0, ptn1)); \n}","name":"Image","description":"","type":"image"}]}