{"ver":"0.1","info":{"id":"XfVyzR","date":"1731427239","viewed":271,"name":"hexatruchet puzzle","username":"FabriceNeyret2","description":"Drag and drop to swap tiles.\n←→ to turn tile.\n\nreference: https://www.facebook.com/groups/tiling/posts/many-years-ago-there-was-an-online-puzzlealso-there-was-a-list-of-many-solutions/1956287014794834/\n","likes":21,"published":3,"flags":48,"usePreview":0,"tags":["games","short","reproduction","truchets","entanglement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// inspired from https://shadertoy.com/view/flGGR3\n// see also the genuine puzzle: https://www.shadertoy.com/view/4cyyzh\n\n#define S(v)   smoothstep( .5*N/R.y, -.5*N/R.y, v )               // AA draw\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    init(u);\n    O*=0.;                                                        // --- draw tiles\n    vec4 H = T(P);\n    float t = floor(10.*H.x),                                     // random tile type\n          a = floor(6.*H.y)/6. *6.283;                            // random tile rotation\n    U *= mat2( cos( a + vec4(0,1.57,-1.57,0) ) );                 // do rotation\n    \n#define C(v,r)   S( length(v)-r/2. )                              // --- draw tile among 10 types:                        \n    O +=   t==0. ? 1.                                             // 0 spot\n         : t==1. ? C( U - vec2(.5, -r/2.)   , r )                 // 1 spot\n         : t==2. ? C( U - vec2(1,-s)/2.     , s )                 // 2 spots close\n         : t==3. ? C( vec2( abs(U.x)-.5, U.y+r/2.) , r )          // 2 spots by 1\n         : t==4. ? C( vec2( abs(U.x)-.5, sign(U.x)*U.y+r/2.) , r) // 2 spots opposed\n         : t==5. ? C( U.x*s/2.+U.y*.5-r/2.  , r )                 // 3 spots close\n         : t==6. ? max( C( U - vec2(1,-s)/2., s ),                // 3 spots 2 close +1\n                        C( U - vec2(0,r)    , r ))\n         : t==7. ? max( C( U + vec2(1,s)/2. , s ),                // 3 spots 2 close +1 sym\n                        C( U - vec2(0,r)    , r ))\n         : t==8. ? C( vec2(abs(U.x)-1., U.y), s )                 // 4 spots opposed\n         : t==9. ? max( C( U.y+r/2.         , r ),                // 4 spots 3 close + 1 opposed\n                        C( U - vec2(0,r)    , r ))\n         : 0.;\n    if ( H.z < .5 ) O = 1.-O;                                     // random reverse B/W\n    O += .2;\n // O *= .6 + .6 * cos( .5+6.28*H.x  + vec4(0,23,21,0)  );        // debug: color tiles\n    O *= S(abs( length(U)*cos( mod(atan(U.y,U.x)+.525,1.05)-.525 ))-.5+.2*N/R.y); // draw tile borders\n      \n      P == T(N+N).xy ? O.g += .5                                  // draw swapable tiles\n    : P == T(N+N).zw ? O.r += .5 : t;\n  } ","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define key(a)   texelFetch(iChannel3,ivec2(a,1),0).x\n\nvoid mainImage( out vec4 O, vec2 u )\n{\n    u -=.5;\n    O = T(u);                                      // previous state\n    \n    if ( u==vec2(N+N) ) {                          // --- mouse state\n        init(iMouse.xy);                           // P = tile Id(mouse)\n        O = iMouse.w > 0. ? vec4(P, 0,0 )          // pickup tile\n          : iMouse.z > 0. ? vec4(O.xy, P)          // flyover tile\n          :                 vec4(0);               // release\n    }\n    else {                                         // --- tiles management\n        iFrame < 1 ? O = fract(sin(u * mat4x2(R-73.,R+87.,53.-R, 97.-R)) * 3758.54) : O; // init tiles\n        \n        vec4 P = T(N+N);                           // user action:\n        P.w > 0. && iMouse.z < 0.                                 // if mouse release:\n            ? u == P.xy ? O = T(P.zw)                             //   swap tiles\n            : u == P.zw ? O = T(P.xy) : O:O;\n        if ( P.w > 0. && u == P.xy ) O.y += (key(39)-key(37))/6.; // arrow keys: turn  \n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R     iResolution.xy\n#define T(u)  texelFetch(iChannel0,ivec2(u),0)\nfloat   N = 20.;                                       // vertical number of tiles       \n\n\n#define init(u)    /* returns I = tile, P = Id,  U = local coords */                       \\\n    float s = sqrt(3.), r = 1./s;                                                          \\\n    vec2 U = N * u / R.y * mat2(s,-1,0,2)/4.,          /* to tilted space              */  \\\n         I = floor(U), P;                              /* I : hexa tile ID             */  \\\n    U = fract(U) *  mat2(1,.5,0,s/2.) - vec2(1,r)/2.;  /* U : local coords             */  \\\n    U += U.y*s+abs(U.x) < 0. ? I.y--,   + vec2( 0,r)   /* Set to hexagon over the 3    */  \\\n        : U.x < 0.           ? I.x--, -.5*vec2(-1,r)   /*   covered by the tilted cell */  \\\n        :                             -.5*vec2( 1,r);                                      \\\n    P = I + floor(N/2.);\n","name":"Common","description":"","type":"common"}]}