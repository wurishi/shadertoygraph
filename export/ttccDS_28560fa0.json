{"ver":"0.1","info":{"id":"ttccDS","date":"1609799583","viewed":68,"name":"Truchet Circles and circles","username":"qw","description":"Truchet Circles and smaller circle","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","circles","truchet","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define cellCount 10.\n#define cellSize 1./cellCount\n#define halfPi 1.5707963\n\n\nfloat Rand2To1(vec2 id){\n    \n    return fract(dot(vec2(id.x,id.y*4.35992) * fract(floor(iTime / 1.)*56.1294), id.yx*1.82330));\n}\n\n\nvec3 Rand2To3(vec2 id){\n    float r = Rand2To1(id);\n    return vec3( r, fract(r*10.), fract(r*100.));\n}\n\nfloat HollowCircle(vec2 pos, float radius, float innerRadius){\n    vec2 smallDetailCircleOffset = vec2(0.01,0.01);\n\n    return smoothstep( length(pos)*.9,length(pos), radius) - smoothstep(length(pos)*.9, length(pos), innerRadius)\n    //the next 2 lines add smaller circles inside the hollow quarter circle\n    + smoothstep( length(pos+smallDetailCircleOffset)*.9,length(pos+smallDetailCircleOffset), innerRadius*.25) \n    + smoothstep( length(pos-smallDetailCircleOffset)*.9,length(pos-smallDetailCircleOffset), innerRadius*.25);\n}\n\nfloat DrawPattern(vec2 uv, vec2 id, float pattern){\n    \n    if(length(id) == 0. ){return 0.;}\n    \n    vec2 cellUV = uv - ( (id /cellCount) - (cellSize*0.5));\n    float angle = halfPi * pattern;\n    mat2x2 rot = mat2x2(cos(angle), -sin(angle), sin(angle), cos(angle));\n\n    cellUV *= rot;\n    cellUV+= cellSize*.5;\n\n    float circleSize = 0.05582;\n    //Truchet pattern with 2 quarter (hollow-)circles at opposite corners\n    float halfCircle1 = HollowCircle(cellUV, circleSize, circleSize*.7);\n    //Now the other quarter circle, offset to the opposite corner\n    cellUV-= cellSize;\n    float halfCircle2 = HollowCircle(cellUV, circleSize, circleSize*.7);\n\n    //return combined\n    return halfCircle1 + halfCircle2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.yy;\n    uv.x -= 0.33333;\n\n    vec2 id = floor(uv*(cellCount));\n    id++;\n    id *= step(0.,id.x-1.) * step(id.x,cellCount);\n    \n    \n    vec3 col = vec3(0);\n    //col.rg = id/cellCount;\n    \n    float pattern =  floor( Rand2To1(id) / 0.25) / 4.;\n    float mask = min(1.,max(0.,(id.x+id.y)));\n    col += mix(vec3(.1,.1,.85),vec3(.9,.4,.1), DrawPattern(uv, id, pattern*4.)) * mask;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}