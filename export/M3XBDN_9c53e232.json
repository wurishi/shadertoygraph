{"ver":"0.1","info":{"id":"M3XBDN","date":"1728397979","viewed":22,"name":"Polygon slip (bit more accurate)","username":"Elsio","description":"need organization ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["animate","pentagon","loopless","geometri","dodecagon","slip","heptagon","tetra","octogono","octagono","cabri","geogebra"],"hasliked":0,"parentid":"X3fBWN","parentname":"Polygon slip"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI acos(-1.)\n#define TAU 2. * PI\n\nvec2 move(float k, float ra, float tk, float d) {\n    float t = iTime * k / 8.;\n    \n    tk += floor(t) \n           + smoothstep(\n                 tk == 0.? .2 : .0, tk == 0.? 1. : .2, \n                 fract(t)\n             );\n    \n    vec2 side = floor(tk) * TAU / k + vec2(0, 11) + d;\n    \n    return mix(\n               cos(side), \n               cos(side + TAU / k), \n               fract(tk)\n           ) * ra;\n}\n\nfloat Poly(vec2 p, float k, float ra, float T) {\n    float d;\n    d = atan(p.y, p.x) - T;\n    d = mod(d, TAU / k) - PI / k;\n    d = cos(d) * length(p) - ra;\n    \n    return \n        min(\n          abs(d),\n          abs(length(p) - .005)\n        );\n}\n\nvoid mainImage(out vec4 o, vec2 U){\n    vec2 r = iResolution.xy,\n         u = 1. * (U - r / 2.) / r.y;\n            \n    o *= .0;\n    float tk;\n    vec4 R;\n    \n    float k = floor(mod(iTime * .1, 6.) + 3.);\n    \n    //k = 5.;\n    \n    if(false){}\n    //else if(k < 4.) tk = 2.; // tri\n    //else if(k < 5.) tk = 2.; // tetra\n    else if(k < 6.)   tk = 2.; // penta\n    //else if(k < 7.) tk = 3.; // hexa\n    else if(k < 8.)   tk = 3.; // hepta\n    else if(k < 9.)   tk = 4.; // octa\n         \n    float c = cos(PI / (k * 2.)),\n          e = 1. + 1. / cos(PI / k);\n          \n    R = vec4(\n            c / e / cos(PI / k),\n            c / e,\n            c, \n            1\n        ) * .48;\n\n    vec2 q1 = move(k, R.x, tk, 0.);\n    vec2 q2 = move(k, R.x, 0., PI / k);\n\n    o.rg += max(o.g, smoothstep(3. / r.y, .0, \n            Poly(u - q1, k, R.y, PI / k)));\n    \n    o.gb += max(o.b, smoothstep(3. / r.y, .0, \n            Poly(u - q2, k, R.y, 0.)));\n\n\n    // hull\n    o += smoothstep(2. / r.y, .0, Poly(u, k * 2., R.z, PI / (2. * k))) * .4\n      + mix(o, vec4(0, .4, 0, 0), smoothstep(4. / r.y, .0, length(u) - R.w)) // bg\n      + smoothstep(2. / r.y, .0, Poly(u, k, R.y, PI / k)) * .2;\n      \n}","name":"Image","description":"","type":"image"}]}