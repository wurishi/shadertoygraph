{"ver":"0.1","info":{"id":"Wdsyzs","date":"1585376259","viewed":317,"name":"shortest inversion (105 chars)","username":"FabriceNeyret2","description":"regolfing 2017' \"shortest inversion\" (120 chars) [url]https://shadertoy.com/view/4dBczt[/url]","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["inversion","short","onetweet","golf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// regolfing 2017' \"shortest inversion\" (120 chars) https://shadertoy.com/view/4dBczt\n\n\n// -3 by Xor , -1 by Greg , -1 by Fab\nvoid mainImage(out vec4 O, vec2 U)\n{\n    O.xyz = iResolution;\n    U = sin(O.y/.08/dot( U += U-O.xy, U) * U );\n    U /= fwidth( U*=U.y );  \n    O = .5 + U.xxxx;\n}\n\n\n\n\n\n// 119 chars  ( marsh 2020 )  used to be 105 in its deprecaded #define mainImage form\n/*\nvoid mainImage(out vec4 O, vec2 u)\n{\n    vec2 R = iResolution.xy,\n         U = u+u - R;\n    U = sin( R.y/.08*  U/dot(U,U) );\n    U /= fwidth( U*=U.y );\n\tO += .5 + U.x;\n}\n\n\n\n\n\n// -1 by coyote\n/*\n#define mainImage(O,u)               \\\n    vec2 R = iResolution.xy,         \\\n         U = u+u - R;                \\\n    U = sin( R.y/.08*  U/dot(U,U) ); \\\n    U /= fwidth( U*=U.y );           \\\n\tO += .5 + U.x                   /*\n\n\n\n\n\n// -- 106 chars\n\n#define mainImage(O,u)               \\\n    vec2 R = iResolution.xy,         \\\n         U = u+u - R;                \\\n    U = sin( R.y/.08*  U/dot(U,U) ); \\\n    U *= U.y;                        \\\n\tO += .5 +  U.x / fwidth(U.x)    /*\n\n*/","name":"Image","description":"","type":"image"}]}