{"ver":"0.1","info":{"id":"Ns2GRm","date":"1676264459","viewed":102,"name":"Logo - Recursive Shape","username":"nbardy","description":"Studying the space folding technique introduced by otavio good","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3d","sdf","distance","piramid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Pyramid - distance\" by iq. https://shadertoy.com/view/Ws3SDl\n// 2021-03-31 00:43:59\n\n// The MIT License\n// Copyright Â© 2019 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// EXACT distance to a pyramid. This shader computes the exact euclidean\n// distances (not a bound based on half spaces). This allows to do\n// operations on the shape such as rounding (see https://iquilezles.org/articles/distfunctions)\n// while other implementations don't. Unfortunately the maths require us to do\n// one square root sometimes to get the exact distance.\n\n// List of other 3D SDFs: https://www.shadertoy.com/playlist/43cXRl\n//\n// and https://iquilezles.org/articles/distfunctions\n// inspired by \n// https://www.shadertoy.com/view/XljGDz\n\n\nvec3 diagN = normalize(vec3(-1.0));\n\n// signed distance to a pyramid of base 1x1 and height h\nfloat sdPyramid( in vec3 p, in float h )\n{\n\n    p = -p;\n    float m2 = h*h + 0.25;\n    \n\n   \n    \n    // symmetry\n    p.xz = abs(p.xz); // do p=abs(p) instead for double pyramid\n    p.xz = (p.z>p.x) ? p.zx : p.xz;\n    p.xz -= 0.5;\n\t\n    // project into face plane (2D)\n    vec3 q = vec3( p.z, h*p.y-0.5*p.x, h*p.x+0.5*p.y);\n        \n    float s = max(-q.x,0.0);\n    float t = clamp( (q.y-0.5*q.x)/(m2+0.25), 0.0, 1.0 );\n    \n    float a = m2*(q.x+s)*(q.x+s) + q.y*q.y;\n\tfloat b = m2*(q.x+0.5*t)*(q.x+0.5*t) + (q.y-m2*t)*(q.y-m2*t);\n    \n    float d2 = max(-q.y,q.x*m2+q.y*0.5) < 0.0 ? 0.0 : min(a,b);\n    \n    // recover 3D and scale, and add sign\n    float d = sqrt( (d2+q.z*q.z)/m2 ) * sign(max(q.z,-p.y));  \n \n   \n    return d;\n    \n}\n\nfloat sdSphere(in vec3 p, float r) { \n\n    float d = length(p) -r;\n    return d;\n}\n\nfloat sdNuts(in vec3 p, float r) {\n    return max(sdSphere(p - vec3(0.0,0.2,0.0), 0.4), sdSphere(p - vec3(0.0,0.2,0.0), 0.4));\n}\n\n\nfloat map( in vec3 pos )\n{   \n    vec3 p = pos;\n    float rad = 0.0;\n    float h = 1.0;\n    //float d = sdPyramid(pos,hei) - rad;\n    vec3 p_s = vec3(0.0,-0.0,0.00);\n    float r = h * 0.5;\n   \n    int RECURSION_LEVELS = 6;\n    float radius = 4.0;\n    float subR = 0.68;\n    float addR = 0.27;\n    \n    float final = 10000.0;\n    for (int i = 0; i < RECURSION_LEVELS; i++) {\n        float d = sdSphere(p, radius);\n        \n        vec3 corner = abs(p) + diagN * radius;\n        float lenCorners = length(corner);\n        float subSpheres = sdSphere(corner, radius * subR);\n        //float addSpheres = sdSphere(corner, radius * addR);\n        \n        p = corner;\n     \n        d = max(d,-subSpheres);\n        //d = min(d, addSpheres);\n        final = min(d, final); \n        radius *= addR;\n    }\n    \n    \n    \n   \n    return final;\n}\n\n// https://iquilezles.org/articles/normalsSDF\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773;\n    const float eps = 0.001;\n    return normalize( e.xyy*map( pos + e.xyy*eps ) + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx*eps ) + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy*eps ) + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx*eps ) );\n}\n    \n#define AA 8\nfloat localTime = 0.0;\nfloat marchCount;\n\nfloat PI=3.14159265;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec3 camPos = vec3(0.0), camFacing;\n   vec3 camLookat=vec3(0,0.0,0);\n    localTime = iTime - 0.0;\n\t// ---------------- First, set up the camera rays for ray marching ----------------\n\tvec2 uv = fragCoord.xy/iResolution.xy * 2.0 - 1.0;\n    float zoom = 1.7;\n    uv /= zoom;\n\n\t// Camera up vector.\n\tvec3 camUp=vec3(0,1,0);\n\n\t// Camera lookat.\n\tcamLookat=vec3(0,0.0,0);\n\n    // debugging camera\n    float mx=iMouse.x/iResolution.x*PI*2.0-0.7 + localTime*3.1415 * 0.0625*0.666;\n\tfloat my=-iMouse.y/iResolution.y*10.0 - sin(localTime * 0.31)*0.5;//*PI/2.01;\n\tcamPos += vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*(12.2);\n\n\t// Camera setup.\n\tvec3 camVec=normalize(camLookat - camPos);\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\n\tvec3 upNorm=cross(camVec, sideNorm);\n\tvec3 worldFacing=(camPos + camVec);\n\tvec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x/iResolution.y) + uv.y * upNorm;\n    vec3 rayVec = normalize(worldPix - camPos);\n    \n    \n    vec3 tot = vec3(0.0);\n\n    #if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n\n        // raymarch\n        const float tmax = 30.0;\n        float t = 0.0;\n        for( int i=0; i<1024; i++ )\n        {\n            vec3 pos = camPos + t*rayVec;\n            float h = map(pos);\n            if( h<0.0001 || t>tmax ) break;\n            t += h;\n        }\n        \n    \n        // shading/lighting\t\n        vec3 col = vec3(0.0);\n        if( t<tmax )\n        {\n            vec3 pos = camPos + t*rayVec;\n            vec3 nor = calcNormal(pos);\n            float dif = clamp( dot(nor,vec3(0.7,0.6,0.4)), 0.0, 1.0 );\n            float amb = 0.5 + 0.5*dot(nor,vec3(0.0,0.8,0.6));\n            col = vec3(0.2,0.3,0.4)*amb + vec3(0.8,0.7,0.5)*dif;\n        }\n\n        // gamma        \n        col = sqrt( col );\n\t    tot += col;\n    }\n    tot /= float(AA*AA);\n    #endif\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"Image","description":"","type":"image"}]}