{"ver":"0.1","info":{"id":"sdSfDt","date":"1647352065","viewed":92,"name":"smooth interpolation in a grid","username":"Gravechest","description":"needed this so programmed it","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","usefull"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"uint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }\nuint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }\nfloat floatConstruct( uint m ) {\n    const uint ieeeMantissa = 0x007FFFFFu;\n    const uint ieeeOne      = 0x3F800000u;\n\n    m &= ieeeMantissa;                 \n    m |= ieeeOne;                    \n\n    float  f = uintBitsToFloat( m );  \n    return f - 1.0;                       \n}\nfloat random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }\nfloat random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\nfloat random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos  = fragCoord/iResolution.x*40.0;\n    vec2 fpos = fract(pos);\n    float t = random(floor(pos.xy));\n    float e1 = random(vec2(floor(pos.x+1.0),floor(pos.y)));\n    float e2 = random(vec2(floor(pos.x-1.0),floor(pos.y)));\n    float e3 = random(vec2(floor(pos.x),floor(pos.y+1.0)));\n    float e4 = random(vec2(floor(pos.x),floor(pos.y-1.0)));\n    float c1 = random(vec2(floor(pos.x+1.0),floor(pos.y+1.0)));\n    float c2 = random(vec2(floor(pos.x+1.0),floor(pos.y-1.0)));\n    float c3 = random(vec2(floor(pos.x-1.0),floor(pos.y+1.0)));\n    float c4 = random(vec2(floor(pos.x-1.0),floor(pos.y-1.0)));\n    e1 *= fpos.x;\n    e2 *= 1.0-fpos.x;\n    e3 *= fpos.y;\n    e4 *= 1.0-fpos.y;\n    c1 *= clamp(1.0-distance(vec2(1.0,1.0),fpos),0.0,1.0);\n    c2 *= clamp(1.0-distance(vec2(1.0,0.0),fpos),0.0,1.0);\n    c3 *= clamp(1.0-distance(vec2(0.0,1.0),fpos),0.0,1.0);\n    c4 *= clamp(1.0-distance(vec2(0.0,0.0),fpos),0.0,1.0);\n    if(fract(iTime/3.0) > 0.5){\n        fragColor.rgb = vec3((c1+c2+c3+c4+e1+e2+e3+e4+t)/4.0);\n    }\n    else{\n        fragColor.rgb = vec3(t);\n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}