{"ver":"0.1","info":{"id":"McjSR3","date":"1706638617","viewed":85,"name":"Simple Raytraced Sphere Example","username":"Spheya","description":"Simple Raytracing Example","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raytracing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct HitInfo {\n    bool hit;\n    float dist;\n    vec3 normal;\n};\n\nHitInfo sphereIntersection(Ray ray, vec3 position, float radius) {\n    HitInfo hit;\n    hit.hit = false;\n    hit.dist = 1000000.0;\n    hit.normal = vec3(0.0);\n\n    float distToNearestPos = dot(ray.direction, position - ray.origin);\n    vec3 nearestPos = ray.origin + ray.direction * distToNearestPos;\n    vec3 toSphereCenter = position - nearestPos;\n    float offsetToEdgeSq = radius * radius - dot(toSphereCenter, toSphereCenter);\n    \n    if(offsetToEdgeSq < 0.0 || distToNearestPos < 0.0) return hit; // miss\n    \n    // hit\n    hit.hit = true;\n    hit.dist = distToNearestPos - sqrt(offsetToEdgeSq);\n    hit.normal = normalize((ray.origin + ray.direction * hit.dist) - position);\n    return hit;\n}\n\nHitInfo planeIntersection(Ray ray, float height) {\n    HitInfo hit;\n    hit.hit = false;\n    hit.dist = 1000000.0;\n    hit.normal = vec3(0.0);\n    \n    float dist = (ray.origin.y - height) / -ray.direction.y;\n    if(dist < 0.0) return hit; // miss\n    \n    // hit\n    hit.hit = true;\n    hit.dist = dist;\n    hit.normal = vec3(0.0, 1.0, 0.0);\n    return hit;\n}\n\nHitInfo sceneIntersection(Ray ray) {\n    HitInfo sphere = sphereIntersection(ray, vec3(0.0, 0.0, 10.0), 3.0);\n    HitInfo plane = planeIntersection(ray, -3.0);\n    \n    if(sphere.dist < plane.dist) return sphere;\n    else return plane;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\n    vec2 screenPos = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    Ray ray;\n    ray.origin = vec3(0.0, 0.0, 0.0);\n    ray.direction = normalize(vec3(screenPos, 1.0));\n    \n    HitInfo hit = sceneIntersection(ray);\n    if(hit.hit) {\n        // light calculation\n        vec3 toLight = normalize(vec3(sin(iTime), 1.0, cos(iTime)));\n        float diffuse = max(dot(toLight, hit.normal), 0.0);\n    \n        // shadows\n        Ray lightRay;\n        lightRay.origin = ray.origin + ray.direction * (hit.dist - 0.001);\n        lightRay.direction = toLight;\n        if(sceneIntersection(lightRay).hit) {\n            // something in between lightsource and surface, so light is 0\n            diffuse = 0.0;\n        }\n    \n        fragColor = vec4(diffuse, diffuse, diffuse, 1.0);\n    }\n    \n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0 / 2.2)); // gamma correction\n}","name":"Image","description":"","type":"image"}]}