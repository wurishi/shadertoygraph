{"ver":"0.1","info":{"id":"MttBD8","date":"1539695695","viewed":351,"name":"water erosion simulation","username":"cnbjw","description":"Click full screen and watch the erosion process. It may take a minute to see the effect.","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["terrain","simulation","water","erosion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 terrain = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    vec4 water = texture(iChannel1, fragCoord.xy/iResolution.xy);\n    fragColor.rg = vec2(floor((terrain.r - terrain.a) * 8.0) / 8.0);\n    fragColor.b = clamp(terrain.g / sprinkleFactor, 0.0, 1.0) * 0.25;\n    fragColor.g = max(fragColor.g, water.g);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// red : origin terrain height\n// green : water depth\n// blue : total height\n// alpha : erode depth\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    \n    vec4 self = texture(iChannel0, fragCoord.xy/iResolution.xy);\n    vec4 water = texture(iChannel1, fragCoord.xy/iResolution.xy);\n    float h = GenSinglePoint(x, y, 2, 3, 0.5);\n    fragColor.r = (h + 0.8) * 0.625;\n    fragColor.g = self.g + water.g * sprinkleFactor / agentMergeFactor - evaporateFactor;\n    fragColor.a = min(self.a + water.g * erodeFactor / agentMergeFactor, erodeLimit);\n    fragColor = clamp(fragColor, 0.0, 1.0);\n    fragColor.b = clamp(fragColor.r + fragColor.g - fragColor.a, 0.0, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// green : water agent\n\nvec4 GetValueByOffset_Height(vec2 base, vec2 offset, vec2 range)\n{\n\tbase += offset;\n    vec2 inside = step(vec2(0.0, 0.0), base) - step(range, base);\n    return inside.x * inside.y * texture(iChannel0, base/range);\n}\n\nvec4 GetValueByOffset_Water(vec2 base, vec2 offset, vec2 range)\n{\n\tbase += offset;\n    vec2 inside = step(vec2(0.0, 0.0), base) - step(range, base);\n    return inside.x * inside.y * texture(iChannel1, base/range);\n}\n\nfloat CanMove_Hor(int fromX, int fromY, float self, float from, float opp, float l, float r){\n    float p1 = from - self;\n    float p2 = from - min(l, r);\n    return step(0.0, p1) * step(self, opp) * (step(Rand(fromX, fromY, 4) * (p1 + p2), p1));\n}\n\nfloat CanMove_Ver(int fromX, int fromY, float self, float from, float opp, float l, float r){\n    float p1 = from - self;\n    float p2 = from - min(l, r);\n    return step(0.0, p1) * step(self, opp) * (step((1.0 - Rand(fromX, fromY, 4)) * (p1 + p2), p1));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    int x = int(fragCoord.x);\n    int y = int(fragCoord.y);\n    \n    // generate water agents at some fixed points\n    if (mod(floor(fragCoord.x), float(agentFineFactor)) + mod(floor(fragCoord.y), float(agentFineFactor)) == 0.0){\n        fragColor.g += agentMergeFactor * agentMassFactor * float(agentFineFactor * agentFineFactor);\n    }\n    \n    // move water agents\n    //\n    //     7\n    //   8 2 6\n    // 9 3 0 1 5\n    //   a 4 c\n    //     b\n    //\n    float h0 = GetValueByOffset_Height(fragCoord.xy, vec2(0.0, 0.0), iResolution.xy).b;\n    float h1 = GetValueByOffset_Height(fragCoord.xy, vec2(1.0, 0.0), iResolution.xy).b;\n    float h2 = GetValueByOffset_Height(fragCoord.xy, vec2(0.0, 1.0), iResolution.xy).b;\n    float h3 = GetValueByOffset_Height(fragCoord.xy, vec2(-1.0, 0.0), iResolution.xy).b;\n    float h4 = GetValueByOffset_Height(fragCoord.xy, vec2(0.0, -1.0), iResolution.xy).b;\n    float h5 = GetValueByOffset_Height(fragCoord.xy, vec2(2.0, 0.0), iResolution.xy).b;\n    float h6 = GetValueByOffset_Height(fragCoord.xy, vec2(1.0, 1.0), iResolution.xy).b;\n    float h7 = GetValueByOffset_Height(fragCoord.xy, vec2(0.0, 2.0), iResolution.xy).b;\n    float h8 = GetValueByOffset_Height(fragCoord.xy, vec2(-1.0, 1.0), iResolution.xy).b;\n    float h9 = GetValueByOffset_Height(fragCoord.xy, vec2(-2.0, 0.0), iResolution.xy).b;\n    float ha = GetValueByOffset_Height(fragCoord.xy, vec2(-1.0, -1.0), iResolution.xy).b;\n    float hb = GetValueByOffset_Height(fragCoord.xy, vec2(0.0, -2.0), iResolution.xy).b;\n    float hc = GetValueByOffset_Height(fragCoord.xy, vec2(1.0, -1.0), iResolution.xy).b;\n    \n    // move from neighbour\n    fragColor += CanMove_Hor(x + 1, y, h0, h1, h5, h6, hc) * GetValueByOffset_Water(fragCoord.xy, vec2(1.0, 0.0), iResolution.xy);\n    fragColor += CanMove_Ver(x, y + 1, h0, h2, h7, h8, h6) * GetValueByOffset_Water(fragCoord.xy, vec2(0.0, 1.0), iResolution.xy);\n    fragColor += CanMove_Hor(x - 1, y, h0, h3, h9, ha, h8) * GetValueByOffset_Water(fragCoord.xy, vec2(-1.0, 0.0), iResolution.xy);\n    fragColor += CanMove_Ver(x, y - 1, h0, h4, hb, hc, ha) * GetValueByOffset_Water(fragCoord.xy, vec2(0.0, -1.0), iResolution.xy);\n    \n    // i am the lowest, just stay\n    fragColor += (step(h0, h1) * step(h0, h2) * step(h0, h3) * step(h0, h4)) * GetValueByOffset_Water(fragCoord.xy, vec2(0.0, 0.0), iResolution.xy);\n    \n    fragColor *= agentDecayFactor;\n    fragColor = clamp(fragColor, 0.0, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const int n = 8;\nconst int agentFineFactor = 8;\nconst float agentMassFactor = 1.0 / 256.0;\nconst float agentMergeFactor = 0.0625;\nconst float agentDecayFactor = 63.0 / 64.0;\nconst float sprinkleFactor = 3.0 / 2048.0;\nconst float evaporateFactor = 1.0 / 1024.0;\nconst float erodeFactor = 1.0 / 4096.0;\nconst float erodeLimit = 0.25f;\n\nfloat Rand(int x, int y, int seed)\n{\n    float xx = mod(float(x * 20860), 65536.0) * 100.0;\n    float yy = mod(float(y * 20860), 65536.0) * 100.0;\n    xx = floor((xx * 40501.0) / 65536.0);\n    xx /= 65536.0;\n    yy /= 65536.0;\n    xx += float(seed);\n    return fract(xx * yy * (xx+yy) + xx + yy);\n}\n\nfloat GenSinglePoint(int x, int y, int seed, int seed2,float roughness)\n{\n    int xl = x >> n << n;\n    int yl = y >> n << n;\n\tint x1 = 0;\n\tint y1 = 0;\n\tint x2 = 1 << n;\n\tint y2 = 1 << n;\n\tfloat h1 = Rand(x >> n, y >> n, seed2) - 0.5;\n\tfloat h2 = Rand((x >> n) + 1, y >> n, seed2) - 0.5;\n\tfloat h3 = Rand(x >> n, (y >> n) + 1, seed2) - 0.5;\n\tfloat h4 = Rand((x >> n) + 1, (y >> n) + 1, seed2) - 0.5;\n\tfloat d = 1.0;\n    for(int k = n - 1; k >= 0; k--){\n\t\tint i = (x >> k) & 1;\n\t\tint j = (y >> k) & 1;\n        if(j == 0){\n            if(i == 0){\n\t\t\t\t//pos 1\n\t\t\t\tx2 = (x1 + x2)/2;\n\t\t\t\ty2 = (y1 + y2)/2;\n\t\t\t\th4 = (h1 + h2 + h3 + h4)/4.0 + (Rand(x2 + xl, y2 + yl, seed) - 0.5) * d;\n\t\t\t\th2 = (h1 + h2)/2.0 + (Rand(x2 + xl, y1 + yl, seed) - 0.5) * d;\n\t\t\t\th3 = (h1 + h3)/2.0 + (Rand(x1 + xl, y2 + yl, seed) - 0.5) * d;\n            }else{\n                //pos 2\n\t\t\t\tx1 = (x1 + x2)/2;\n\t\t\t\ty2 = (y1 + y2)/2;\n\t\t\t\th3 = (h1 + h2 + h3 + h4)/4.0 + (Rand(x1 + xl, y2 + yl, seed) - 0.5) * d;\n\t\t\t\th1 = (h1 + h2)/2.0 + (Rand(x1 + xl, y1 + yl, seed) - 0.5) * d;\n\t\t\t\th4 = (h2 + h4)/2.0 + (Rand(x2 + xl, y2 + yl, seed) - 0.5) * d;\n            }\n        }else{\n            if(i == 0){\n\t\t\t\t//pos 3\n\t\t\t\tx2 = (x1 + x2)/2;\n\t\t\t\ty1 = (y1 + y2)/2;\n\t\t\t\th2 = (h1 + h2 + h3 + h4)/4.0 + (Rand(x2 + xl, y1 + yl, seed) - 0.5) * d;\n\t\t\t\th1 = (h1 + h3)/2.0 + (Rand(x1 + xl, y1 + yl, seed) - 0.5) * d;\n\t\t\t\th4 = (h3 + h4)/2.0 + (Rand(x2 + xl, y2 + yl, seed) - 0.5) * d;\n            }else{\n\t\t\t\t//pos 4\n\t\t\t\tx1 = (x1 + x2)/2;\n\t\t\t\ty1 = (y1 + y2)/2;\n\t\t\t\th1 = (h1 + h2 + h3 + h4)/4.0 + (Rand(x1 + xl, y1 + yl, seed) - 0.5) * d;\n\t\t\t\th2 = (h2 + h4)/2.0 + (Rand(x2 + xl, y1 + yl, seed) - 0.5) * d;\n\t\t\t\th3 = (h3 + h4)/2.0 + (Rand(x1 + xl, y2 + yl, seed) - 0.5) * d;\n\t\t\t}\n\t\t}\n\t\td = d * roughness;\n\t}\n\treturn h1;\n}","name":"Common","description":"","type":"common"}]}