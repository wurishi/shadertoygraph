{"ver":"0.1","info":{"id":"wddyDX","date":"1601982934","viewed":105,"name":"Simulation d'ecosystème","username":"p1709212","description":"simulation ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["projet"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Texturing\n// Eric Galin\n\n//Alexandre Valette P1709212\n\nconst int Steps = 200;      // Number of steps\nconst float Epsilon = 0.01; // Marching epsilon\n\n// Primitive functions -----------------------------------------------------------------------------------\n\n\n\n\n\n//Opérateur bool\n\n// Union\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n    return min(a,b);\n}\n\nfloat Diff(float a,float b)\n{\n    return max(a,-b);\n}\n\n\n// Plane \n// p : point\n// n : Normal of plane\n// o : Point on plane\nfloat Plane(vec3 p, vec3 n, vec3 o)\n{\n    return dot((p-o),n);\n}\n        \n// Sphere \n// p : point\n// c : center of skeleton\n// r : radius\nfloat Sphere(vec3 p, vec3 c,float r)\n{\n  return length(p-c)-r;\n}\n\n//Cylindre infini\nfloat CylInf( vec3 p, vec3 a, vec3 u, float r){\n\tfloat l = dot((p-a),u);\n    float d = length(p-a);\n    return sqrt( (d)*(d) - l*l ) - r;\n}\n\n\n\n//Cylindre\n// p : point\nfloat Cyl(vec3 p,vec3 a,vec3 b,float r){\n    float d = length(b-a);\n\tfloat fc = CylInf(p,a,(b-a)/d,r);\n    float fa = Plane(p,(b-a)/d,a);\n    float fb = Plane(p,-(b-a)/d,b);\n    \n    return Diff(fc,Union(fa,fb));\n}\nfloat arbre (vec3 p, vec3 a, vec3 b,vec3 c, float tailleF, float tailleT)\n{\n  float v= Sphere(p,a,tailleF);   \n  v= min(v,Cyl(p,b,c,tailleT));\n    return v;\n}\n\n\n\n    \n// Potential field of the object\n// p : pointsous marin\n\nfloat object(vec3 p)\n{\n  float pi = 3.14;\n  \n   /*  float v  =  Sphere (p, vec3(934. ,467. , 0. ) , 0. );\n v = min ( v, Sphere (p, vec3(678. ,1324. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(1762. ,558. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(305. ,1064. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(1681. ,1145. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(961. ,627. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(1195. ,491. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(1227. ,1142. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(1791. ,36. , 0. ) ,  10. ));\n v = min ( v, Sphere (p, vec3(302. ,204. , 0. ) ,  10. ));*/\n    \n   float v=arbre(p,vec3(0.,0.,200.),vec3(0.,0.,0.),vec3(0.,0.,300.),100.,25.);\n \n \n\n  \t\n  v = Union(v,Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0)));\n // v=Noise(p+iTime)+Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0));\n // v= Plane(p,vec3(0.0,0.0,1.0),vec3(0.0,0.0,-4.0));\n  return v;\n}\n\n// Analysis of the scalar field --------------------------------------------------------------------------\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p )\n{\n  float eps = 0.001;\n  vec3 n;\n  float v = object(p);\n  n.x = object( vec3(p.x+eps, p.y, p.z) ) - v;\n  n.y = object( vec3(p.x, p.y+eps, p.z) ) - v;\n  n.z = object( vec3(p.x, p.y, p.z+eps) ) - v;\n  return normalize(n);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray directiosous marinn\n// e : Maximum distance \n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o, vec3 u, float e,out bool h,out int s)\n{\n  h = false;\n\n    // Start at the origin\n    float t=0.0;\n\n  for(int i=0; i<Steps; i++)\n  {\n    s=i;\n    vec3 p = o+t*u;\n    float v = object(p);\n    // Hit object\n      if (v < 0.0)\n      {\n          s=i;\n          h = true;\n          break;\n      }\n      // Move along ray\n      t += max(Epsilon,v);\n      // Escape marched too far away\n      if (t>\n         5000.)\n      {\n          break;\n      }\n  }\n  return t;\n}\n\n// Lighting ----------------------------------------------------------------------------------------------\n\n// Ambient occlussous marinion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n, int a)\n{\n    if (a==0) { return 1.0; }\n    \n\tfloat ao=0.0; \n    \n    for (int i=0;i<a;i++)\n    {\n \t\tvec3 d = Cosine(581.123*float(i) , n);\n\n        int s;\n        bool h;\n        float t=SphereTrace(p,d,10.0,h,s);\n        if (!h) {ao+=1.0;}\n        else if (t>5.0)\n            {\n             ao+=1.0;   \n            }\n    }\n    \n    ao/=float(a);\n\treturn ao;\n}\n\n// Background color\n// d : Ray direction\nvec3 background(vec3 d)\n{\n  return mix(vec3(0.602,0.551,0.995),vec3(0.652,0.697,0.995), d.z*0.5+0.5);\n}\n\n\n// Direct lighting\nfloat Light(vec3 p,vec3 n)\n{\n   // point light\n  const vec3 lp = vec3(5.0, 10.0, 25.0);\n\n  vec3 l = normalize(lp - p);\n\n  // Phong shading\n  float diff = clamp(dot(n, l),0.0,1.0);\n\n    bool h;\n    int s;\n    float t=SphereTrace(p+0.1*n,l,100.0,h,s);\nif (!h)\n    {\n     return diff;\n    }\n    return 0.0; \n}\n\n\n// Shading and lighting ---------------------------------------------------------------------------\n\n// Compute color \n// p : Point\n// n : Normal\n\n\n\n\nfloat Turbulence(vec3 p)\n{\n    float d=sqrt(p.x*p.x+p.y*p.y);\n\tfloat t=Noise(p);\n    for (float i=0.5; i<0.05; i/=2.0)\n    {\n     \tt+=i+Noise(p/i);   \n    }\n    t/=2.0;\n \treturn t; \n}\n\nvec3 Noise3D(vec3 p)\n{\n \treturn vec3(Noise(p), Noise(p + vec3(165.0,126.0,127.0)), Noise(p + vec3(34.0,242.0,342.0)));\n}\n\n\n\n\n\n\n\n\nvec3 terre(in vec3 p,in vec3 n)\n{\n    return mix(vec3(66.0,45.0,15.0)/255.0,vec3(155.,113.,125.)/255.0,Noise(p));\n}\n\n// Metal \n// p : Point\n// n : Normal \nvec3 Style(in vec3 p,in vec3 n) {\n    float u=sin(iTime)*10.0*cos(iTime)*10.0;\n    float n1, n2, n3;\n    n1 = sqrt( sin(p.x+Noise(p)*u + p.y*1.5 + p.z*2.0) );\n    n2 = n1 / 2.0;\n    n3 = sqrt( sin(p.x + p.y + p.z)*n2 );\n    return mix(vec3(0.0 +Noise(p)*iTime, 10.0+Noise(p)*iTime, 150.0)/255.,\n               vec3(255.0, 255.0, 255.0)/255.,\n               n3 );\n}\n\nvec3 gazon(in vec3 p,in vec3 n)\n{\n    return mix(vec3(0.0,255.0,0.0)/255.0,vec3(50.,255.,125.)/255.0,Noise(p));\n}\n\nvec3 bois (in vec3 p)\n{\n    float d=sqrt(p.x*p.x+p.y*p.y);\n\tfloat u=d/1.5;\n    \n    float s=sin(u*2.0*3.14);\n    s=(s+1.0)/2.0;\n\treturn mix(vec3(0.6,0.2,0.0),vec3(1.0,0.8,0.4),s);\n    \n}\n\n\n/*vec3 Color(in vec3 p,in vec3 n)\n{\n    return marbre(p,n,vec3(0.0,0.0,0.0));\n    //return eau(p);\n}*/\n\nvec3 Color(in vec3 p,in vec3 n)\n{\n    if (p.z  < -4.0)\n        return gazon(p,vec3(0,0,0));\n    else\n    \n    \n        return bois(p);\n    \n}\n\n// Shade\n// p : Point\n// n : Normal at point\nvec3 Shade(vec3 p, vec3 n)\n{\n    vec3 ambient=0.5*Color(p,n); \n    vec3 diffuse=0.35*Light(p,n)*Color(p,n);\n   vec3 c = ambient+diffuse; \n     c+=0.15*AmbientOcclusion(p+0.1*n,n,50)*vec3(1.0,1.0,1.0);\n    return c;\n}\n\n\n// Picture in picture ------------------------------------------------------------------------------\n\n// Shading according to the number of steps in sphere tracing\n// n : Number of steps\nvec3 ShadeSteps(int n)\n{\n   float t=float(n)/(float(Steps-1));\n   return 0.5+mix(vec3(0.05,0.05,0.5),vec3(0.65,0.39,0.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel, out bool pip)\n{\n    // Pixel coordinates\n    vec2 p = (-iResolution.xy + 2.0*pixel)/iResolution.y;\n   if (pip==true)\n   {    \n    const float fraction=1.0/4.0;\n    // Recompute pixel coordinates in sub-picture\n    if ((pixel.x<iResolution.x*fraction) && (pixel.y<iResolution.y*fraction))\n    {\n        p=(-iResolution.xy*fraction + 2.0*pixel)/(iResolution.y*fraction);\n        pip=true;\n    }\n       else\n       {\n           pip=false;\n       }\n   }\n   return p;\n}\n\n\n// Image\nvoid mainImage( out vec4 color, in vec2 pxy )\n{\n    // Picture in picture on\n    bool pip=true;\n    \n   // Pixel\n     vec2 pixel=Pip(pxy, pip);\n    \n    // Mouse\n    vec2 m=iMouse.xy/iResolution.xy;\n\n    // Camera\n    vec3 ro,rd;\n    Ray(m,pixel,ro,rd);\n\n  // Trace ray\n\n  // Hit and number of steps\n  bool hit;\n  int s;\n\n  float t = SphereTrace(ro, rd, 100.0,hit, s);\n  \n    // Position \n    vec3 pt = ro + t * rd;\n    \n  // Shade background\n  vec3 rgb = background(rd);\n\n  if (hit)\n  {\n    // Compute normal\n    vec3 n = ObjectNormal(pt);\n\n    // Shade object with light\n    rgb = Shade(pt, n);\n  }\n\n  // Uncomment this line to shade image with false colors representing the number of steps\n  if (pip==true)\n  {\n      rgb = ShadeSteps(s); \n  }\n\n\n  color=vec4(rgb, 1.0);\n}\n\n \n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Texturing and noise ---------------------------------------------------------\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\n// Hashing function\n// Returns a random number in [-1,1]\n// p : Vector in space\nfloat Hash(in vec3 p)  \n{\n    \n    p  = fract( p*0.3199+0.152 );\n\tp *= 17.0;\n    return fract( p.x*p.y*p.z*(p.x+p.y+p.z) );\n}\n\n\n// Procedural value noise with cubic interpolation\n// x : Point \nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n    vec3 f = fract(p);\n  \n    f = f*f*(3.0-2.0*f);\n    // Could use quintic interpolation instead of cubic\n    // f = f*f*f*(f*(f*6.0-15.0)+10.0);\n\n    return mix(mix(mix( Hash(i+vec3(0,0,0)), \n                        Hash(i+vec3(1,0,0)),f.x),\n                   mix( Hash(i+vec3(0,1,0)), \n                        Hash(i+vec3(1,1,0)),f.x),f.y),\n               mix(mix( Hash(i+vec3(0,0,1)), \n                        Hash(i+vec3(1,0,1)),f.x),\n                   mix( Hash(i+vec3(0,1,1)), \n                        Hash(i+vec3(1,1,1)),f.x),f.y),f.z);\n}\n\n\nfloat fbm (vec3 p) {\n    float n, k;\n    int i;\n    k = 1.0;\n    for( i = 0; (i < 4); i++ ) {\n        k /= 2.0;\n   \t\tn += k * Noise(p/k); \n    }\n    return n;\n}\n\n\n// Lighting -----------------------------------------------------------------------\n\n// Cosine direction \n// seed : Random seed\n//    n : Normal\nvec3 Cosine( in float seed, in vec3 n)\n{\n    float u = Hash( 78.233 + seed);\n    float v = Hash( 10.873 + seed);\n\n    // Method by fizzer: http://www.amietia.com/lambertnotangent.html\n    float a = 6.2831853 * v;\n    u = 2.0 * u - 1.0;\n    return normalize( n + vec3(sqrt(1.0-u*u) * vec2(cos(a), sin(a)), u) );\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 Rz(float a)\n{\n    float sa = sin(a); float ca = cos(a); \n    return mat3(ca,sa,10.0,    -sa,ca,10.0,  1.0,0.0,1.0);\n}\n\n// Compute the ray\n//      m : Mouse position\n//      p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m, in vec2 p,out vec3 ro,out vec3 rd)\n{\n    float a = 3.0*3.14*m.x;\n   \tfloat le = 1.1;\n    \n    ro=vec3(1000.0,0.0,5.0);\n    ro*=Rz(3.0*3.14*m.x); \n\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,0.0,1.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\trd = normalize( p.x*uu + p.y*vv + le*ww );\n}\n\n","name":"Common","description":"","type":"common"}]}