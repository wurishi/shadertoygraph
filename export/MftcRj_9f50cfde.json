{"ver":"0.1","info":{"id":"MftcRj","date":"1730908705","viewed":86,"name":"sounds of verhulst 2","username":"pb","description":"logistic function iteration drives image and sound, motion is so fast that back buffer works nicely","likes":5,"published":1,"flags":40,"usePreview":0,"tags":["sound"],"hasliked":0,"parentid":"4ctcR8","parentname":"sounds of verhulst "},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    U /= R.xy;\n    O =  texture(iChannel0, U);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( int samp, float time )\n{\n    return func01(time);\n}","name":"Sound","description":"","type":"sound"},{"inputs":[],"outputs":[],"code":"#define tau 6.2831\n#define S(f) sin(tau*time*f)\n#define A 2.85  //play with this >2.85 is noisier, 4 is total chaos\n#define F(x,a) a*x*(1.-x) //Verhulst logistic function\n\nvec2 func01(float time) {\n\n    float R=0.,\n          i=0.,x=.7;\n      \n    for (;i<30.;i++) {\n        x = F(x,A);\n        R += S( 140.*x );\n    }\n\n    return S(1./10./tau+S(1./5./tau))     //envelope\n            *vec2(R)                      //waveform\n            *vec2(cos(time),sin(time));   //pan\n  \n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define R iResolution.xy\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    vec2 uv = U/R.xy;\n    \n    U = (2.*U-R)/R.y*6.;\n    \n    vec2 cc = func01(iTime);\n    \n    float c1 = exp( -length( U-cc)*8.);\n    \n    cc *= cc;\n    \n    O = c1*vec4( vec3(0,.5,1)*cc.x + vec3(1,.5,0)*cc.y,0) \n        + .995*texture(iChannel0, uv);\n}","name":"Buffer A","description":"","type":"buffer"}]}