{"ver":"0.1","info":{"id":"XflfRl","date":"1724203302","viewed":51,"name":"experimental brot","username":"xld3","description":"trying some things with the color scale to get interesting patterns","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["mandelbrot","experimental"],"hasliked":0,"parentid":"lcKXDt","parentname":"Pretty mandelbrot (golf)"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// These should be used as uniforms for controls\nconst vec2 C = vec2(-.8119, .175); // Init center point\nconst int J = 30, // Min iterations\n    I = 200; // Max iterations\n\nconst float N = float(I-J),\n    F = 9e2, // Min escape\n    E = 9e3, // Max escape\n    S = .1, // Zoom speed\n    D = 9., // Max depth\n    T = .5, // \"thickness\"\n    L = E-F;\n    \nconst vec3 H = vec3(3, 4, 5); // Hue\n    \nvoid mainImage(out vec4 o, in vec2 f) {\n\n    // Zoom is exp() but iterations and escape radius are linear-ish using sin(iTime).\n    float g = (iMouse.z >= 1.) ? iMouse.y/iResolution.y : .5+.5*sin(iTime*S - 1.57), // sin(iTime) 0 -> 1\n        e = L*(1.-g)+F,\n        I; // escape radius scaling\n        \n    // pixel coord\n    vec2 p = f = (f+f-iResolution.xy)/(exp(g*D)*iResolution.y)+C,d;\n          \n    int h = int(N*g)+J, // iteration scaling\n        i = 0;\n        \n    // mandelbrot loop\n    for(; i<h && f.x*f.x < e; \n        f = mat2(f, -f.y, f.x)*f + p,\n        ++i\n    );\n    \n    // transformation that looks nice\n    d = mat2(cos(f), -sin(f.y), f.x)*f;\n    I = float(i);\n    \n    // output color\n    o = i<h? vec4(\n    (.5+.5*cos(g*I*.2*log2(log2(dot(d,d)/log2(e)))))*\n    (.5+.5*cos(g*(I-log2(log2(dot(f,f))/log2(e)))*T+H)), \n    1)\n    :vec4(0); // else black\n}","name":"Image","description":"","type":"image"}]}