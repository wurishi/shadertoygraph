{"ver":"0.1","info":{"id":"3tGGWw","date":"1579027928","viewed":94,"name":"Mandelbrot set zoom","username":"n1nes","description":"zooming in and out of the Mandelbrot set","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t//Step 1: Definition of constants\n    const int maxIt = 1000;\n\tvec2 c = fragCoord/iResolution.xy;\t//complex number\n    vec2 zoomp = vec2(-0.9, 0.23);\n    //vec2 zoomp = vec2(0.0,0.0);\n\t\n    //Step 2: Setting window boundaries\n    float r = 500.0*(cos(iTime * 0.1 + 3.141592) + 1.0) / 2.0;\n    float zoomf = 1.0 / (r*r);\n\n    vec2 P1 = vec2(zoomp.x-2.0 * zoomf, zoomp.y-1.0 * zoomf);\n    vec2 P2 = vec2(zoomp.x+1.0 * zoomf, zoomp.y+1.0 * zoomf);\n    \n    //Step 3: Transforming c into new coordinate space\n    c.x = (P2.x - P1.x) * c.x + P1.x;\n    c.y = (P2.y - P1.y) * c.y + P1.y;\n\t\n\t//Step 4: Calculating limit of z\n    vec2 z = vec2(0.0,0.0);\n    int anzIt = 0;\n    for(int i = 0; i<maxIt; i++){\n        z = vec2((z.x * z.x - z.y * z.y), (z.x * z.y + z.x * z.y)) + c;\n        if (length(z)>1.9) {\n           anzIt = i;\t//number of iterations -> color\n        }\n    }\n    \n\t//Step 5: Checking whether c is an element of the Mandelbrot set\n    if(length(z) <= 2.0){\n        fragColor = vec4(0.0,0.0,0.0,1.0);\t\t//color it black\n    }else{\n    \t//fragColor = vec4(1.0,1.0,1.0,1.0);\t//color it white\n        fragColor = vec4(\t(sin(float(anzIt))+1.0) / 2.0,\t\t\n\t\t\t\t\t\t\t(cos(float(anzIt))+1.0) / 2.0,\n\t\t\t\t\t\t\t(sin(float(anzIt)+2.0)+1.0) / 2.0,1.0);\n    }\t\t\t\t\t\t\t\t//color it depending on anzIt\n}\n\n","name":"Image","description":"","type":"image"}]}