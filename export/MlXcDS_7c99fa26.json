{"ver":"0.1","info":{"id":"MlXcDS","date":"1506216884","viewed":126,"name":"Suttling the ship","username":"crertel","description":"Greetz to numinit and fortisimo","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["fractalaudioprocedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXSWl","filepath":"https://soundcloud.com/dubvirusbootlegs/belleville-bass","previewfilepath":"https://soundcloud.com/dubvirusbootlegs/belleville-bass","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ITERATIONS 20\n#define NUM_FRACTALS 10\n\n#define THRESHOLD 2.\n#define COLOR_THRESHOLD 0.\n\n\n/* branchless hsv conversion, thx http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl */\nvec3 hsv(float h, float s, float v) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(h + K.xyz) * 6.0 - K.www);\n    return v * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), s);\n}\n\nvec4 sampleSound(vec2 uv) {\n    float fftX  = texture( iChannel0, vec2(uv.x,0.0) ).x; \n    float fftY  = texture( iChannel0, vec2(uv.y,0.0) ).x; \n    float amplitude  = texture( iChannel0, vec2(0.0,1.0) ).x; \n    float magnitude = length( vec2(fftX, fftY));\n    return vec4( fftX,fftY,amplitude,magnitude );\n}\n\n\nvec2 f(vec2 n, vec2 c) {\n    /* from Z^2 - c */\n    /* consider n as complex number, x is Re(n), y is Im(n) */\n    return vec2(n.x * n.x - n.y * n.y, 2. * n.x * n.y) + c;\n}\nfloat mandelbrot(vec2 uv, float zoom) {           \n    int iter = 0;\n    uv *= zoom;\n    vec2 val = vec2(0.0,0.0);   \n    for (int i = 0; i < ITERATIONS; i++) {\n        val = f(val, uv);\n        if (length(val) > THRESHOLD) {\n            iter = i + 1;\n            break;\n        }\n    }\n    return float(iter) / float(ITERATIONS);\n}\n\n\nvec2 rotateView( vec2 uv, float theta) {\n    return uv * mat2(cos(theta), sin(theta),\n                      -sin(theta), cos(theta));\n}\n\nvec2 offsetView( vec2 uv, vec2 offset) {\n    return uv + offset;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float mandelColor = 0.0;\n    float rotation  = 0.0;\n    vec2 rawUv = fragCoord.xy/iResolution.xy;\n    vec2 uvp = 2.0*(rawUv - vec2(0.5,0.5));\n        \n    vec4 sound = sampleSound(rawUv);\n      \n    for (int i = 0; i < NUM_FRACTALS; i++) {\n        \n        vec2 uv = rotateView( uvp, \n                       \t3.*atan(sound.x,sound.y)*radians(float(i)/float(NUM_FRACTALS)*360.));\n                       \n   \t\tmandelColor = mandelbrot(uv,exp(float(i)));\n        if (mandelColor > COLOR_THRESHOLD ) {\n            break;\n        }\n    }\n   \n    fragColor = vec4(\n        hsv(\n            sin(iTime),\n            sound.w,\n            mandelColor\n    ), 1.);\n}\n","name":"Image","description":"","type":"image"}]}