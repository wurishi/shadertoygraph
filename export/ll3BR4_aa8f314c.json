{"ver":"0.1","info":{"id":"ll3BR4","date":"1538737522","viewed":201,"name":"Waterrr","username":"Noge","description":"cool","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["water"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int firstOctave = 3;\nconst int octaves = 8;\nconst float persistence = 0.6;\n\n\n//Based on https://www.shadertoy.com/view/4lB3zz by madweedfall\n\n//Not able to use bit operator like <<, so use alternative noise function from YoYo\n//\n//https://www.shadertoy.com/view/Mls3RS\n//\n//And it is a better realization I think\nfloat noise(int x,int y)\n{   \n    float fx = float(x);\n    float fy = float(y);\n    \n    return 2.0 * fract(sin(dot(vec2(fx, fy) ,vec2(12.9898,78.233))) * 43758.5453) - 1.0;\n}\n\nfloat smoothNoise(int x,int y)\n{\n    return noise(x,y)/4.0+(noise(x+1,y)+noise(x-1,y)+noise(x,y+1)+noise(x,y-1))/8.0+(noise(x+1,y+1)+noise(x+1,y-1)+noise(x-1,y+1)+noise(x-1,y-1))/16.0;\n}\n\nfloat COSInterpolation(float x,float y,float n)\n{\n    float r = n*3.1415926;\n    float f = (1.0-cos(r))*0.5;\n    return x*(1.0-f)+y*f;\n    \n}\n\nfloat InterpolationNoise(float x, float y)\n{\n    int ix = int(x);\n    int iy = int(y);\n    float fracx = x-float(int(x));\n    float fracy = y-float(int(y));\n    \n    float v1 = smoothNoise(ix,iy);\n    float v2 = smoothNoise(ix+1,iy);\n    float v3 = smoothNoise(ix,iy+1);\n    float v4 = smoothNoise(ix+1,iy+1);\n    \n   \tfloat i1 = COSInterpolation(v1,v2,fracx);\n    float i2 = COSInterpolation(v3,v4,fracx);\n    \n    return COSInterpolation(i1,i2,fracy);\n    \n}\n\nfloat PerlinNoise2D(float x,float y)\n{\n    float sum = 0.0;\n    float frequency =0.0;\n    float amplitude = 0.0;\n    for(int i=firstOctave;i<octaves + firstOctave;i++)\n    {\n        frequency = pow(2.0,float(i));\n        amplitude = pow(persistence,float(i));\n        sum = sum + InterpolationNoise(x*frequency,y*frequency)*amplitude;\n    }\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\t\t{\n\t\t\tvec2 uv = fragCoord.xy / iResolution.xy;\n            \n\t\t\tfloat t = iTime + 100.0;\n            \n            float x = uv.x;\n\t\t\t//float x = ((uv.x - 0.5) * (0.4 + 0.4 * uv.y));\n            \n            //layer1\n\t\t\tfloat x1 = x+t*0.01;\n\t\t\tfloat y1 = uv.y+3.0+0.05*cos(t*2.0)+t*0.01;\n\t\t\tfloat noise1 = 0.5+2.0*PerlinNoise2D(x1,y1);\n            \n            //layer2\n\t\t\tfloat x2 = x+t*0.05;\n\t\t\tfloat y2 = uv.y+3.0+0.1*cos(t);\n\t\t\tfloat noise2 = 0.5+2.0*PerlinNoise2D(x2,y2);\n                        \n\t\t\tfloat noise = 1.2*noise1+0.6*noise2;\n            \n            //round noise\n\t\t\tfloat a = floor(noise*10.0)/10.0;\n\n\t\t\tfloat b = floor(noise*50.)/50.;\n\t\t\tfloat c = floor(noise2*50.0);\n            \n\t\t\tfloat final = a;\n            \n            //Add shine\n\t\t\tif((b==0.7||b==0.9||b==0.5||b==1.1||b==0.5)\n\t\t\t   &&noise2>0.50\n\t\t\t){\n\t\t\t\tfinal=0.2+0.2*noise2;\n\t\t\t}    \n\t\t\tfragColor = vec4(1.0-final,1.0-0.5*final,1.0-0.25*final,1.0);\n\t\t}","name":"Image","description":"","type":"image"}]}