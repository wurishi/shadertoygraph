{"ver":"0.1","info":{"id":"7lXcRf","date":"1648421523","viewed":67,"name":"Game of Life Shader","username":"glt","description":"John Conway's Game of Life. Very rough implementation.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["game","gameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(LIFE, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define LIFE iChannel0\n#define INIT iChannel1\n\n#define DIE_LEQ 1\n#define DIE_GEQ 4\n#define BORN_GEQ 3\n#define BORN_LEQ 3","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool cell_lives(in vec2 uv, in vec2 eps) {\n    int neighbors = 0;\n    for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n            if (i == 0 && j == 0) {\n                 continue;\n            }\n                \n            bool neighbor_alive_before = texture(LIFE, uv + vec2(i, j) * eps).x > 0.5;\n            if (neighbor_alive_before) {\n                neighbors++;\n            }\n        }\n    }\n\n    bool alive_before = texture(LIFE, uv).x > 0.5;\n    if (alive_before) {\n        return (neighbors > DIE_LEQ) && (neighbors < DIE_GEQ);\n    } else {\n        return (neighbors >= BORN_GEQ) && (neighbors <= BORN_LEQ);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if (iFrame < 100) {\n        fragColor = vec4(vec3(texture(INIT, fragCoord.xy / iChannelResolution[1].xy)[0] > 0.5), 0.0);\n        return;\n    }\n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    if (iFrame % 10 != 0) {\n        fragColor = texture(LIFE, uv);\n        return;\n    }\n    \n    vec2 eps = vec2(1.0) / iResolution.xy;\n    if (cell_lives(uv, eps)) {\n        fragColor = vec4(1.0, 1.0, 1.0, 0.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, texture(LIFE, uv).b - 0.05, 0.0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}