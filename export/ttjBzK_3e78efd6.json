{"ver":"0.1","info":{"id":"ttjBzK","date":"1599423578","viewed":55,"name":"Volumetric stuff","username":"trisslotten","description":"just testing out with some volumetric stuff","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4dS3Wd\nfloat hash(float p) { p = fract(p * 0.011); p *= p + 7.5; p *= p + p; return fract(p); }\nfloat hash(vec2 p) {vec3 p3 = fract(vec3(p.xyx) * 0.13); p3 += dot(p3, p3.yzx + 3.333); return fract((p3.x + p3.y) * p3.z); }\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(hash(i), hash(i + 1.0), u);\n}\nfloat noise(vec3 x) {\n\tconst vec3 step = vec3(110, 241, 171);\n\n\tvec3 i = floor(x);\n\tvec3 f = fract(x);\n    \n    float n = dot(i, step);\n\n\tvec3 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\n\n\nfloat sceneDensity(vec3 pos) {\n    float n = 0.99*noise(pos*0.2);\n    n += 0.6*noise(pos*0.3);\n    return smoothstep(0.4, 1.0, 1.0 * n * pow(noise(pos*0.05), 2.)) + 0.02;\n}\n\nvec3 densityToColor(float d) {\n    return vec3(smoothstep(0.0, 0.4, d));\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = 2.*fragCoord/iResolution.xy-1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    const vec3 up = vec3(0,1,0);\n    const vec3 cam_dir = normalize(vec3(1,0,0));\n    vec3 cam_pos = vec3(10.0*iTime, 10.*cos(iTime), 10.*sin(iTime));\n    \n    const vec3 cam_side = normalize(cross(up, cam_dir));\n    const vec3 cam_up = normalize(cross(cam_dir,cam_side));\n    const float FOVish = 0.5;\n    \n    vec3 ray_dir = normalize(cam_dir + FOVish*cam_side*uv.x + FOVish*cam_up * uv.y);\n    \n    vec3 col = densityToColor(0.0);\n    \n    const float step_size = 0.5;\n    const int num_steps = 200;\n    float t = step_size * float(num_steps);\n    \n    for(int i = 0; i < num_steps; i++) \n    {\n        vec3 pos = cam_pos + ray_dir * t;\n        \n        float d = sceneDensity(pos);\n        \n        col = (d * densityToColor(d) + (1.-d) * col);\n        \n        t -= step_size;\n    }\n\n    fragColor = vec4(pow(col, vec3(1./2.2)),1.0);\n}\n\n\n\n","name":"Image","description":"","type":"image"}]}