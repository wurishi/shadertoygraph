{"ver":"0.1","info":{"id":"NsVfRV","date":"1658503697","viewed":117,"name":"angel braids","username":"rodgzilla","description":"Experiment with glowing and flowing repeated braids.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","braids"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define time .6 * iTime\n//#define ZPOS -100. + 50. * time\n#define ZPOS -100. \n\nfloat PI = acos(-1.);\n\nmat2 rot2d(float a){\n  float c = cos(a), s = sin(a);\n  \n  return mat2(c, s, -s, c);\n}\n\nfloat cyl(vec3 p, vec3 c){\n  return length(p.xy - c.xy) - c.z;\n}\n\nvec3 thread(vec3 p, float m, float r, float n, float xm, float ym, float i) {\n    p.z += (i * 2. * PI) / (m * n);\n    p.x += xm * sin(p.z * m);\n    p.y += ym * sin(p.z * m * (n - 1.));\n    \n    return p;\n}\n\nvec3 repeat(vec3 p, vec3 r) {\n  vec3 q = mod(p, r) - .5 * r;\n  return q;\n}\n\nfloat braid(vec3 p, float m, float r) {\n    float d = 10.;\n    float n = 3.;\n    float inc = 1.;\n    float xm = 20. + 5. * sin(time * .1);\n    float ym = 20. + 5. * sin(time * .15);\n\n    for (float i = 0.; i < n; i += inc) {\n        vec3 p1 = thread(p, m * .5, r, n, xm, ym, i);\n        d = min(d, cyl(p1, vec3(0, 0, r)));\n    }\n\n    return d;    \n}\n\nvec3 glow = vec3(0, 0, 0);\nfloat at = 0.;\n\nfloat map(vec3 p) {\n    float d = 10000.;\n    p.xy *= rot2d(p.z * 0.001 * sin(time * .17));\n    p = repeat(\n        p, \n        vec3(\n            100. + 25. * sin(time * .13),\n            100. + 31. * sin(time * 0.04),\n            0\n        )\n    );\n    vec3 shift = vec3(0, 0, 0);\n    \n\n    d = min(d, braid(p - shift, .04 + .01 * sin(time * .7), 2. + .5 * sin(time * .27)));\n    at += 1. / (d * (2.5 + sin(time * .6)));\n\n    \n    return d;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n  uv -= 0.5;\n  uv /= vec2(iResolution.y / iResolution.x, 1);\n\n  vec3 col = vec3(0);\n  vec3 ro = vec3(0, 0., ZPOS);\n  vec3 rd = normalize(vec3(uv.x, uv.y, 1.));\n  rd.xy *= rot2d(time * .1);\n  rd.yz *= rot2d(time * 0.13);\n\n  float d = 0.;\n  vec3 glow = vec3(0);\n\n  for (int i = 0; i < 500; i++) {\n    vec3 p = ro + d * rd;\n    float ds = map(p);\n    \n    if (ds < 0.01 || ds > 100.) {\n      break;\n    }\n    d += ds * 1.;\n    glow += .005 * at * vec3(\n      .75 + .25 * sin(p.z * .05),\n      .33 + .33 * sin(p.x * .03), \n      .4 + .4 * sin(p.y * .041)\n    );\n\n  }\n  \n  vec3 p = ro + d * rd;\n  vec2 e = vec2(0.01, 0);\n  vec3 n = normalize(map(p) - \n    vec3(\n      map(p - e.xyy),\n      map(p - e.yxy),\n      map(p - e.yyx)\n    )\n  );\n\n  vec3 lp = ro;\n  vec3 tl = lp - p;\n  vec3 tln = normalize(tl);\n  float dif = dot(tln, n);\n  \n  col = dif * glow;\n\n  fragColor = vec4(col, 1.);\n}","name":"Image","description":"","type":"image"}]}