{"ver":"0.1","info":{"id":"4X2fz3","date":"1729772293","viewed":65,"name":"Recursive SDF rainbow boxes","username":"sleepingsun","description":"Recursive colored boxes using SDFs. \nThis is a riff on the resulting code of Kishimisu's \"An Introduction To Shader Art Coding\"; https://www.youtube.com/watch?v=f4s1h2YETNY","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//To immediately start having fun experimenting with this, \n//try tweaking any number in increments and see the visual result.\n//For example, try changing repetitions to 7.0 or\n//size_multiplier to 0.3\n//Go crazy!\n\nvec3 palette ( float t ) {\n//Trippy non-rainbowy rainbow\nvec3 a = vec3(0.760, 0.273, 0.384);\nvec3 b = vec3(0.919, 0.476, 0.685);\nvec3 c = vec3(0.998, 0.145, 0.771);\nvec3 d = vec3(1.848, 1.994, 2.615);\n\n return a + b*cos(6.28318*(c*t+d));\n\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n   vec2 uv0 = uv;\n   vec3 finalColor = vec3(0.0);\n   \n   float iterations = 5.;\n   for (float i = 0.; i < iterations; i++) {\n     uv = fract(uv * 2.0) - 0.5;\n     float d = length(uv0) * exp(-length(uv0));\n     vec3 col = palette(length(uv0) + i* -iTime*0.02);\n     \n     float size_multiplier = 1.5;\n     vec2 box = vec2(d,d);\n     d = sdBox(uv * size_multiplier, box);\n     float repetitions = 4.;\n     d = sin(d*repetitions/0.9 + (i+1.)*0.1*iTime+(i*0.7))/repetitions; //Shrinking, repeated shapes\n     d = abs(d);\n     d = pow(0.023 / d, 1.2);\n    \n     \n     finalColor += col*d;\n   }\n  \n   fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}