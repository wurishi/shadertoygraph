{"ver":"0.1","info":{"id":"fsGcDz","date":"1654679580","viewed":213,"name":"automata special","username":"Carandiru","description":"best viewed fullscreen\npixelated automata patterns - perspective gained from larger viewing area.\n*click* mouse for new view","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["automata","cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// [best viewed fullscreen]\n// pixelated automata patterns - perspective gained from larger viewing area.\n// *click* mouse for new view\n\n// https://www.shadertoy.com/view/WlfXRN\nvec3 inferno(float t) {\n\n    const vec3 c0 = vec3(0.0002189403691192265, 0.001651004631001012, -0.01948089843709184);\n    const vec3 c1 = vec3(0.1065134194856116, 0.5639564367884091, 3.932712388889277);\n    const vec3 c2 = vec3(11.60249308247187, -3.972853965665698, -15.9423941062914);\n    const vec3 c3 = vec3(-41.70399613139459, 17.43639888205313, 44.35414519872813);\n    const vec3 c4 = vec3(77.162935699427, -33.40235894210092, -81.80730925738993);\n    const vec3 c5 = vec3(-71.31942824499214, 32.62606426397723, 73.20951985803202);\n    const vec3 c6 = vec3(25.13112622477341, -12.24266895238567, -23.07032500287172);\n\n    return c0+t*(c1+t*(c2+t*(c3+t*(c4+t*(c5+t*c6)))));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    float automata = textureLod(iChannel0, uv, 0.0f).r;\n\n\n    fragColor = vec4(inferno(smoothstep(0.0f, 0.666666f, automata)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord)/iResolution.xy;\n    \n    float v = 0.0f; float w = 0.0f;\n    float s = 0.0f;\n        \n    s += textureLod(iChannel0, uv, 0.0f).r;\n    \n    if ( mod(float(iFrame), 2.0f) < 2.0f)\n    {\n        float n = textureLod(iChannel2, uv, 0.0f).r * 2.0f;\n        v = s; w = s;\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2(0, -1)).r;\n        v = max(v, n);\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1,  0)).r;\n        v = max(v, n);\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2( 0, 1)).r;\n        v = max(v, n);\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1,  0)).r;\n        v = max(v, n);\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1, -1)).r;\n        w = max(w, n);\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2(-1,  1)).r;\n        w = max(w, n);\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1, -1)).r;\n        w = max(w, n);\n\n        n = textureLodOffset(iChannel0, uv, 0.0f, ivec2( 1,  1)).r;\n        w = max(w, n);\n\n        s = abs(float(int(floor(v * 255.0f)) - int(floor(w * 255.0f)))) / 255.0f;\n    }\n    \n    /////////////////////\n    if (iFrame < 10) {\n    \n        s = textureLod(iChannel1, fragCoord/1024.0f, 0.0f).r;\n    }\n    \n    fragColor = vec4(s);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = floor((fragCoord + 0.5f) / float(CELL_SIZE))/iResolution.xy;\n    \n    vec4 v = vec4(0);\n    float s = textureLod(iChannel0, uv, 0.0f).r;\n        \n    uv = fragCoord/iResolution.xy;\n    \n    float n = textureLod(iChannel1, uv, 0.0f).r;\n    \n    v.x = textureLodOffset(iChannel1, uv, 0.0f, ivec2(0, -CELL_SIZE)).r;\n    v.x = mix(s, n, v.x > s);\n    \n    v.y = textureLodOffset(iChannel1, uv, 0.0f, ivec2(-CELL_SIZE,  0)).r;\n    v.y = mix(s, n, v.y > s);\n    \n    v.z = textureLodOffset(iChannel1, uv, 0.0f, ivec2( 0, CELL_SIZE)).r;\n    v.z = mix(s, n, v.z > s);\n    \n    v.w = textureLodOffset(iChannel1, uv, 0.0f, ivec2( CELL_SIZE,  0)).r;\n    v.w = mix(s, n, v.w > s);\n    \n\n    if ( s < 0.25f * (v.x+v.y+v.z+v.w) ) {\n        s = float(uint(v.x * 255.0f) ^ uint(v.y * 255.0f) ^ uint(v.z * 255.0f) ^ uint(v.w * 255.0f)) / 255.0f * n;\n    }\n    s = s + n * 0.5f;\n\n    fragColor = vec4(mix(s, n, 0.5f));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define CELL_SIZE 3","name":"Common","description":"","type":"common"}]}