{"ver":"0.1","info":{"id":"DslSW4","date":"1680554228","viewed":112,"name":"Gear test","username":"Peace","description":"Made this while learning about gears","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["gear"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nconst int z = 12; // tooth number\nconst float pitch = (2.0 * PI) / float(z); // pitch\nconst float m = pitch / PI; // module\nconst float ha = m * 1.00; // addendum\nconst float hf = m * 1.25; // dedendum\nconst float h = ha + hf; // tooth height\nconst float c = m * 0.25; // tip and root clearence\nconst float hw = h - c; // working depth\nconst float d = m * float(z); // reference diameter\nconst float df = d - hf; // root diameter\nconst float da = d + ha; // tip diameter\nconst float a = radians(20.0); // pressure angle\nconst float w = 0.6; // tooth width\nconst float pf = 0.38 * m; // dedendum fillet radius\n\nvec3 gear(vec2 uv)\n{\n    float va = atan(uv.y, uv.x);\n    float angle = round(va / (2.0 * PI) * float(z)) * pitch;\n    vec2 dir = vec2(cos(angle), sin(angle));\n    float dis_x = distance(dir * length(uv), uv) / pitch;\n    float dis_y = length(uv);\n    \n    vec3 col = vec3(0);\n    \n    float ta = tan(a);\n    \n    if (dis_y <= df) // root\n    {\n        col = vec3(1);\n    }\n    else if (dis_y > df && dis_y <= d) // reference\n    {\n        float h = (dis_y - df) / (d - df);\n        col = vec3(smoothstep(dis_x - 16./iResolution.y, dis_x + 16./iResolution.y, (1.0 - h * ta + ta) * w));\n    }\n    else if (dis_y > d && dis_y <= da) // tip\n    {\n        float h = (dis_y - d) / (da - d);\n        col = vec3(smoothstep(dis_x - 16./iResolution.y, dis_x + 16./iResolution.y, (1.0 - h * ta) * w));\n    }\n    \n    return col;\n}\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    uv *= 2.5;\n    \n    vec3 col = vec3(0);\n    \n    col = gear(uv);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}