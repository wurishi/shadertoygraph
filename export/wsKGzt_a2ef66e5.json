{"ver":"0.1","info":{"id":"wsKGzt","date":"1570786369","viewed":199,"name":"Clementine's pink ball","username":"snolot","description":"A simple pink interactive fur ball. (Mouse click to interact with fur).","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["ball","fur","sparkle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// All cr√©ditsto hat for the fur \n// https://www.shadertoy.com/view/XsfSR8\n\nconst int max_iterations = 64;\nconst float stop_threshold = 0.001;\nconst float grad_step = 0.001;\nconst float clip_far = 4.0;\nconst float PI = 3.14159265359;\n\nconst float furDepth = 0.5;\nconst int furLayers = 128;\nconst float rayStep = furDepth * 2.0 / float(furLayers);\nconst float furThreshold = 0.4;\nconst float uvScale = .5;\n\nfloat r = 1.;\nfloat rotation = 0.0;\nfloat elevation;\n\nfloat random(vec2 par){\n   return fract(sin(dot(par.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec2 random2(vec2 par){\n\tfloat rand = random(par);\n\treturn vec2(rand, random(par+rand));\n}\n\n//https://www.shadertoy.com/view/3s3GDn\nfloat getGlow(float dist, float radius, float intensity){\n    return pow(radius/dist, intensity);\n}\n\n\nmat3 rotX(float g) {\n\tg = radians(g);\n\tvec2 a = vec2(cos(g), sin(g));\n\treturn mat3(1.0, 0.0, 0.0,\n\t\t\t\t0.0, a.x, -a.y,\n\t\t\t\t0.0, a.y, a.x);\n}\n\nmat3 rotY(float g) {\n\tg = radians(g);\n\tvec2 a = vec2(cos(g), sin(g));\n\treturn mat3(a.x, 0.0, a.y,\n\t\t\t\t0.0, 1.0, 0.0,\n\t\t\t\t-a.y, 0.0, a.x);\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec3 map(vec3 p) {\n\tp.y -= elevation;\n\t//p *= rotY(rotation);\n\tfloat s = (length(p) - r) ;//- 0.12 * sin(6. * p.x) * cos(6. * p.y)* sin(6. * p.z);\n\treturn vec3(s * 0.5);\t\n}\n\n\nvec2 cartesianToSpherical(vec3 p) {\t\n\tfloat r = length(p);\n\tp = normalize(p);\n\tfloat t = (r - (1.0 - furDepth)) / furDepth;\n\t\n\tp.zyx *= rotX(rotation);\n\tvec2 uv = vec2(atan(p.y, p.x), acos(p.z));\n\t\n\t//uv.y -= t * t * elevation;\n\tuv.y -= (t * t * (256. - iMouse.y) *.001) + sin(iTime * 6.2) * .1;\n\tuv.x -= t * t * (iMouse.x - 512.) *.002;\n\tuv.y -= elevation;\n\n\treturn uv;\n}\n\nfloat furDensity(vec3 pos) {\n\tvec2 uv = cartesianToSpherical(pos.xzy);\t\n\tvec4 tex = textureLod(iChannel0, uv * uvScale, 0.0);\n\n\tfloat density = smoothstep(furThreshold, 1.0, tex.x);\n\n\tpos.y -= elevation;\n\tvec3 p = pos;\n\tp *= rotY(rotation);\n\tfloat r = length(pos) ;//- 0.12 * sin(6. * p.x) * cos(6. * p.y)* sin(6. * p.z);;\n\tfloat t = (r - (1. - furDepth)) / furDepth;\n\n\treturn density * (1. - t);\n\t\n}\nfloat furDensity(vec3 pos, out vec2 uv) {\n\tuv = cartesianToSpherical(pos.xzy);\t\n\tvec4 tex = textureLod(iChannel0, uv * uvScale, 0.0);\n\n\tfloat density = smoothstep(furThreshold, 1.0, tex.x);\n\n\tpos.y -= elevation;\n\tvec3 p = pos;\n\tp *= rotY(rotation);\n\tfloat r = length(pos) ;//- 0.12 * sin(6. * p.x) * cos(6. * p.y)* sin(6. * p.z);;\n\tfloat t = (r - (1. - furDepth)) / furDepth;\n\n\treturn density * (1. - t);\n\t\n}\n\nvec3 furNormal(vec3 pos, float density) {\n\tfloat eps = 0.0001;\n\tvec3 n;\n\tn.x = furDensity( vec3(pos.x + eps, pos.y, pos.z)) - density;\n\tn.y = furDensity( vec3(pos.x, pos.y + eps, pos.z)) - density;\n\tn.z = furDensity( vec3(pos.x, pos.y, pos.z + eps)) - density;\n\treturn normalize(n);\n}\n\nvec3 furShade(vec2 uv, vec3 pos, vec3 color, vec3 light, vec3 eye, float density) {\n\t\n\tvec3 v = normalize(light - pos);\n\tvec3 n = furNormal(pos, density);\n\tvec3 ev = normalize(pos - eye);\n\tvec3 h = reflect(ev, n);\n\t\n\tfloat diff = max(0.0, dot(v, n)) + 0.4;\n\tfloat spec = pow(max(0.0, dot(v, h)), 64.);\n\n\tvec3 cc = textureLod(iChannel1, uv * vec2(uvScale, uvScale), 0.0).xyz;\n\n\tfloat r = length(pos);\n\tfloat t = (r - (1.0 - furDepth)) / furDepth;\n\tt = clamp(t, 0.3, 1.);\n\t\n\tdiff = mix(diff, 1., 0.5);\n\t//sparkle test\n\t//vec2 llight = vec2(cos(iTime*.5), sin(iTime*.5));\n    \n    //vec2 direction = normalize(texture(iChannel0,uv).xy * 20. - .5);\n    //float sparkle = dot(direction, llight);\n    //sparkle = clamp(sparkle, 0., u_bass * 100.);\n    //sparkle = step(.9999,sparkle);\n    //sparkle *= u_bass *5.;\n    // sparkle test 2\n   \n    //cc = mix(vec3(sparkle), cc, 1.);\n\n\treturn /*vec3(sparkle) + cc*/ cc * .8 * color * t * (diff + 1.9 * spec);\n}\n\nvec3 gradient( vec3 v ) {\n\tconst vec3 delta = vec3( grad_step, 0.0, 0.0 );\n\tfloat va = map( v ).x;\n\treturn normalize (\n\t\tvec3(\n\t\t\tmap( v + delta.xyy).x - va,\n\t\t\tmap( v + delta.yxy).x - va,\n\t\t\tmap( v + delta.yyx).x - va\t\t\t\n\t\t)\n\t);\n}\n\nvec3 ray_marching( vec3 origin, vec3 dir, float start, float end ) {\n\t\n\tfloat depth = start;\n\tvec3 salida = vec3(end);\n\tvec3 dist = vec3(0.1);\n\t\n\tfor ( int i = 0; i < max_iterations; i++ ) \t\t{\n\t\tif ( dist.x < stop_threshold || depth > end ) break;\n            dist = map( origin + dir * depth );\n            depth += dist.x;\n\t}\n\t\n\tsalida = vec3(depth, dist.y, dist.z);\n\treturn salida;\n}\n\nvec3 shading(vec2 uv, vec3 v, vec3 n, vec3 eye, vec3 lightMix) {\n\n\tvec3 final = vec3( 0.0 );\n\tvec3 ev = normalize( v - eye );\n\tvec3 ref_ev = reflect( ev, n );\n\tvec3 light_pos   = vec3(0.0, 2.0, -2.0);\n\tvec3 vl = normalize( light_pos - v );\n\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\tspecular = pow( specular, lightMix.x );\n\tfinal += vec3( 0.9 ) * ( diffuse * lightMix.y + specular * lightMix.z);\t\n\tfinal += vec3(0.2);\n\t//vec3 cc = textureLod(iChannel1, uv, 0.0).xyz * 100.0;\n\treturn final;// * cc;\n}\n\nvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\tvec2 xy = pos - size * 0.5;\n\n\tfloat cot_half_fov = tan(radians( 90.0 - fov * 0.5 ));\t\n\tfloat z = size.y * 0.5 * cot_half_fov;\n\n\treturn normalize( vec3( xy, z ) );\n}\n\n// Reinhard Tonemapping\nvec3 ToneMap(vec3 inColor)\n{\n    inColor *= 1.0;  // Hardcoded Exposure Adjustment\n    inColor = inColor/(vec3(1)+inColor);\n    vec3 retColor = pow(inColor,vec3(1.0/2.2));\n    return retColor;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\t\t\n    rotation +=  60. * (iTime);\n\n    elevation = 0.0;//0.25 * cos(iTime * 2.5);\n\n\tvec3 rd = ray_dir(60.0, iResolution.xy, fragCoord.xy );\n\t\n\tvec3 eye = vec3( .0, .0, -2.8 );\n\t\t\n    // shake\t\t\n\teye += 0.1*(-1.0+2.0*texture( iChannel0, iTime*vec2(0.010,0.014) ).xyz);\n\trd += 0.1*(-1.0+2.0*texture( iChannel0, iTime*vec2(0.013,0.008) ).xyz);\n        \n\tvec3 lightMix = vec3(6., 0.45, 0.15);\n\tvec3 color = vec3(0.);\n\n\tvec3 data = ray_marching( eye, rd, 0.0, clip_far );\n\tif ( data.x < clip_far ) {\n\t\t\n\t\tvec3 pos = eye + rd * data.x;\n\t\tvec3 n = gradient( pos );\n\t\tvec2 uv;\n\t\t\n        \n\t\tvec3 lightColor =  shading(uv, pos, n, eye, lightMix) * 2.0;\t\t\t\n\t\tcolor = vec3(1.) * lightColor;\n\t\t\t\n\t\tvec4 c = vec4(0.0);\n\t\t\n\t\tfor(int i=0; i<furLayers; i++) {\n\t\t\tvec4 sampleCol;\n\t\t\t\n\t\t\tsampleCol.a = furDensity(pos, uv);\n\t\t\tif( c.a > 0.99 ) break;\n\t\t\tif (sampleCol.a > 0.) {\n\t\t\t\t\n\t\t\t\tsampleCol.rgb = sampleCol.a * furShade(uv, pos, vec3(120., .60, 100.) * lightColor / 255., vec3(0.0, 2.0, -2.0), eye, sampleCol.a);\n\t\t\t\tc = c + sampleCol * (1.0 - c.a);\n\t\t\t}\n\t\t\tpos += rd * rayStep;\n\t\t}\n\t\t\n\t\tcolor = c.xyz;\n\t}\n\t\n\t//color = 1.0 - exp(-color);\n    color = ToneMap(color);\n\tfragColor = vec4(2.5 * color, 1.0 );\n} \n","name":"Image","description":"","type":"image"}]}