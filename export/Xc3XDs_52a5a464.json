{"ver":"0.1","info":{"id":"Xc3XDs","date":"1714591187","viewed":111,"name":"alien neuron","username":"altunenes","description":"this is my first SDF trying, probably I messed up a lot of things but I'm happy with the result currently :D\n","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["sdf","alien","pokemon","neuron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14\n#define MAX_STEPS 32\n#define MAX_DISTANCE 25.0\n#define SURFACE_DIST 0.01\n#define NUM_DENDRITES 15\nmat2 r2d(float a) { float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\nfloat random(float seed) {\n    return fract(sin(seed * 78.233) * 43758.5453);\n}\n// Smooth minimum function (iq, also other sdfs)\nfloat smin(float a, float b, float k) {\n    float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n    return mix(b, a, h) - k * h * (1.0 - h);\n}\nfloat sphereSDF(vec3 p, float r) {\n    return length(p) - r;\n}\nfloat sdSegment(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\nfloat dendriteSDF(vec3 p, vec3 o, float s) {\n    float a = random(s) * 2.0 * PI;  \n    vec3 d = normalize(vec3(cos(a), sin(a), random(s + 1.0) * 2.0 - 1.0)); \n    vec3 dt = o + d * 0.5; \n    float dist = sdSegment(p, o, dt, 0.05);\n    float lf, ba;\n    for (int i = 1; i < 5; ++i) {\n        float ns = s + float(i) * 0.5;\n        lf = random(ns + 0.3) * 0.25 + 0.15;\n        ba = random(ns + 0.5) * PI * 0.5 - PI * 0.25;\n        vec3 nd = normalize(vec3(cos(a + ba), sin(a + ba), random(ns + 1.0) * 2.0 - 1.0));  \n        vec3 nsg = dt + nd * lf;\n        dist = smin(dist, sdSegment(p, dt, nsg, 0.01), 0.01);\n        dt = nsg;\n    }\n    return dist;\n}\nvec4 axonSDF(vec3 p, vec3 o, float s, float th) {\n    float a = random(s) * 3.5 * PI;\n    vec3 d = normalize(vec3(cos(a), sin(a), random(s + 1.0) * 2.0 - 1.0)); \n    vec3 x = o + d * 0.5; \n    float dist = sdSegment(p, o, x, th);\n    vec3 lp = x;\n    int sc = 7;\n    for (int i = 1; i < sc; ++i) {\n        float ns = s + float(i) * 0.1;\n        vec3 nd = normalize(vec3(cos(a + random(ns)), sin(a + random(ns)), random(ns + 1.0) * 2.0 - 1.0));  \n        vec3 nsg = lp + nd * 0.5;\n        dist = smin(dist, sdSegment(p, lp, nsg, th), 0.1);\n        lp = nsg;\n    }\n    float ts = s + float(sc) * 0.1; \n    vec3 td = normalize(vec3(cos(a + random(ts)), sin(a + random(ts)), random(ts + 1.0) * 2.0 - 1.0)); \n    lp += td * 0.3; \n    return vec4(dist, lp);\n}\nfloat terminalSDF(vec3 p, vec3 st, float s) {\n    float th = 0.01;\n    float d = 1e3;\n    for (int i = 0; i < 4; ++i) {\n        float a = random(s + float(i)) * 3.0 * PI; \n        vec3 dr = normalize(vec3(cos(a), sin(a), random(s + float(i) + 1.0) * 2.0 - 1.0)); \n        vec3 tm = st + dr * 0.2;\n        d = min(d, sdSegment(p, st, tm, th));\n        for (int j = 1; j < 3; ++j) {\n            float ns = s + float(j) * 0.05;\n            vec3 nd = normalize(vec3(cos(a + random(ns)), sin(a + random(ns)), random(ns + 1.0) * 2.0 - 1.0)); \n            vec3 nsg = tm + nd * 0.2;\n            d = smin(d, sdSegment(p, tm, nsg, th), 0.05);\n            tm = nsg;\n        }\n    }\n    return d;\n}\nfloat sceneSDF(vec3 p) {\n    p.xz *= r2d(iTime * 0.7);\n    p.y -= 1.0; \n    float sm = sphereSDF(p, 0.2); \n    float dr = 1e3;  \n    float at = 0.04; \n    for (int i = 0; i < NUM_DENDRITES; ++i) {\n        dr = smin(dr, dendriteSDF(p, vec3(0), float(i)), 0.3);\n    }\n    vec4 ax = axonSDF(p, vec3(0), 1.5, at); \n    float axn = ax.x; \n    vec3 axep = ax.yzw;  \n    float tm = terminalSDF(p, axep, 2.5); \n    float nr = smin(sm, dr, 0.2); \n    nr = smin(nr, axn, 0.2);\n    nr = smin(nr, tm, 0.8);\n    return nr;\n}\nvec3 estimateNormal(vec3 p) {\n    vec2 e = vec2(0.01, 0);\n    return normalize(vec3(\n        sceneSDF(p + e.xyy) - sceneSDF(p - e.xyy),\n        sceneSDF(p + e.yxy) - sceneSDF(p - e.yxy),\n        sceneSDF(p + e.yyx) - sceneSDF(p - e.yyx)\n    ));\n}\nfloat diflight(vec3 p, vec3 lightPos, vec3 normal) {\n    vec3 lightDir = normalize(lightPos - p);\n    return max(dot(lightDir, normal), 0.0);\n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = 1.5*(fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 camPos = vec3(0.0, 0.0, 3.0);\n    vec3 rayDir = normalize(vec3(uv, -1.0));\n    vec3 p = camPos;\n    float dist;\n    float nDist = 0.0;\n    float mix2 = 0.5 + 0.5 * (sin(mod(iTime, 1.0) * 2.0 * 3.14159) * 0.5 + 0.5);\n    vec3 FakeactionPotentialColor = mix(vec3(1.0, 0.7, 0.2), vec3(1.0, 1.0, 0.8), mix2);\n    for (int i = 0; i < MAX_STEPS; i++) {\n        dist = sceneSDF(p);\n        if (dist < SURFACE_DIST) break;\n        nDist += dist;\n        p += dist * rayDir;\n        if (nDist > MAX_DISTANCE) break;\n    }\n    vec3 color = vec3(0.0);\n    if (dist < SURFACE_DIST) {\n        vec3 normal = estimateNormal(p);\n        float coreint = smoothstep(0.5, 0.2, length(p - vec3(0.0,1.0, 0.0)));\n        color = mix(color, vec3(0.1, 1.0, 0.5), coreint); \n        float axlen = length(axonSDF(camPos, vec3(0), 2.5, 0.08).yzw - camPos);\n        float acpint = mod(iTime, 1.0) * axlen;\n        float pointdis = dot(p - camPos, normalize(rayDir));\n        float gi = exp(-5.0 * abs(pointdis - acpint));\n        vec3 gw = FakeactionPotentialColor * gi;\n        color = mix(color, gw, clamp(gi, 0.0, 1.0));\n        color = mix(color,  vec3(1.0, 0.8, 0.8) * 1.0, 0.01);\n        float fres = pow(1.0 + dot(rayDir, normal), 4.0);\n        color = mix(color, vec3(1.0), fres *  diflight(p, vec3(2, 2, 5), normal));\n    }\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}