{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"channel":1,"type":"texture","id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"//vec2 m = iMouse.xy / iResolution.xy;\n\nfloat disk(vec2 p, vec2 center, float radius ) {\n\tvec2 pc = p-center;\n\treturn 1.0 - smoothstep(radius, radius+0.01, length(pc));\n}\n\nfloat propeller(vec2 uv, vec2 center, float propWidth, float size, float numPropellers, float phase) {\n\tvec2 uvP = uv - center;\n\t// polar coordinates\n\tfloat r = length(uvP);\n\tfloat th = atan(uvP.y, uvP.x);\t\n\t\n\tfloat angle = numPropellers*th + phase;\n\t// function of angle\n\tfloat f = (sin(angle)+1.0)*(1. - smoothstep(size, size+0.3, r));\n\tf = smoothstep(propWidth, propWidth+0.1, f);\n\tf += disk( uv, vec2(0., 0.), 0.05);\n\t\n\treturn f;\n}\n\nvec3 pattern( vec2 uv ) {\n\tvec2 p = (uv-0.5)*1.7;\n\t//// pattern\n\tfloat textureZoom = 5.;\n\t// light ray texture moving left\n\tvec3 text = texture( iChannel0, (uv+vec2(1.,0.0)*iTime*0.02)*textureZoom).xxy;\n\t// dust particles going the other way\n\ttext += 0.5*texture( iChannel1, (uv+vec2(-1.0,0.0)*iTime*0.025)*textureZoom).xxx;\n\t//// mask\n\tfloat mask1 = 1.0-propeller(p, vec2(0.0), 0.7, 0.55, 4., iTime*6.);\n\tfloat mask2 = 1.0-step(0.8,length(p)); \n\tfloat masks = clamp(0.0, 1.0, mask1*mask2);\n\t//// mixture of ray-light and whole-light)\n\tfloat m = 0.7; \n\treturn masks*(1.0-m+m*text);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tvec2 p = (fragCoord.xy - 0.5*iResolution.xy)/ iResolution.y;\n\t\n\tconst float n = 60.0;\n\tvec3 total = vec3(0.0);\n\tvec2 backLightOrigin = vec2(0.15,0.0)*sin(iTime*0.5);\n\tvec2 diffVec = (p+backLightOrigin)/n; // each pixel goes to this direction\n\tfor(float i=0.0; i<n; i++) {\n\t\ttotal += pattern(uv + i*diffVec*1.5);\n\t}\n\ttotal /= n;\n\t\n\t// vec3 col = pattern(uv); // without the volumetric light effect\n\tvec3 col = total;\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dj3WV","date":"1393688516","viewed":374,"name":"On Propellers & Volumetric Light","username":"vug","description":"Imitation of volumetric light. Based on this \"radial blur\" shader: https://www.shadertoy.com/view/4sfGRn","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""}}