{"ver":"0.1","info":{"id":"wdV3RR","date":"1569620598","viewed":189,"name":"blackmetal","username":"nabr","description":"2 stereo monitors recommended","likes":9,"published":1,"flags":8,"usePreview":0,"tags":["pathtracer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define tau (8.*atan(1.))\n\n// yx Penrose Pathtraced \n// https://www.shadertoy.com/view/ttXGWr\n// copy+paste+changed few things \n\n#define hash2(n)(fract(sin(vec2(n,n+1.))*vec2(43758.5453123)))\n#define R(p,a)(p=cos(a)*p+sin(a)*vec2(p.y,-p.x))\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return length(max(d,0.0))\n         + min(max(d.x,max(d.y,d.z)),0.0); // remove this line for an only partially signed sdf \n}\nfloat pgon(vec2 p,float n)\n{\n    float a=atan(p.x,p.y)+.5*tau,r=tau/n;\n    return cos(floor(.5+a/r)*r-a)*length(p);\n}\nfloat s(vec3 p)\n{\n    if(mod(iTime*.25,2.)>1.666)R(p.xy,-iTime);\n    float b=float[](.175,-1.,.5,.75)[uint(.5*iTime)%4u];\n    vec3 q=pow(2.*abs(fract(vec3(b*p.xy,1.*iTime+p.z)*.125)-.5),vec3(2.+sin(.25*iTime)));\n    q=smoothstep(0.01,tau*.0125,q);\n    return.5-length(1.57*q)+max(0.,pgon(.5*p.xy,3.+float(uint(.5*iTime)%8u)));\n}\nvec2 rv2;\nvec3 B(vec3 i, vec3 n)\n{\n    vec3 uu=normalize(cross(n,vec3(0,1,1)));\n    vec3 vv=cross(uu,n);\n    float ra=sqrt(rv2.y),\n     rx=ra*cos(tau*rv2.x),\n     ry=ra*sin(tau*rv2.x),\n     rz=sqrt(1.0-rv2.y);\n    return(rx*uu+ry*vv+rz*n);\n}\nvec3 trace(vec3 o,vec3 d)\n{\n    vec3 ld=vec3(0,-.5,1),accum=vec3(1),n=vec3(1.);\n    for(int bounce=0;bounce<4;++bounce)\n    {\n        float t=(bounce==0)?10.:0.;\n        float k;\n        \n        for(int i=0;i<8;++i){\n            t+=(k=s(o*t));\n            //if(abs(k)<.1)break;\n        }\n        if(abs(k)<1.)\n        {\n            vec3 h=o*t;\n            vec2 e=vec2(-.002,.002);\n            n=normalize(e.yxx*s(h+e.yxx)+e.xxy*s(h+e.xxy)+e.xyx*s(h+e.xyx)+e.yyy*s(h+e.yyy));\n            \n      if(t>.5){    \n      d=B(gl_FragCoord.xyz/iResolution.xyz,n);\n      accum = vec3(.9, .49, .1) * max(0.,normalize(dot(d,-ld)));\n      o = h + .02 * n;\n      }\n      else\n          accum*=.125*sdBox(o+=h+.2*n, vec3(.5));\n      }\n }\n return accum;\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord)\n{\n    fragColor=texture(iChannel0,fragCoord/iResolution.xy);\n    vec2 uv=fragCoord.xy/iResolution.xy;\n    float seed=iTime+(uv.x+iResolution.x*uv.y)*1.51269341231;\n    rv2=hash2(24.4316544311+iTime+seed);\n    uv+=(rv2-.5)/iResolution.xy;\n    vec3 ro=(vec3(1.-2.*uv,.59));\n    vec4 pixel=vec4(trace(ro,vec3(1))*(1.-dot(uv,uv)*.5),1);\n    if(mod(1.*iTime,2.)<=0.1)fragColor*=0.;\n    fragColor=2.5*pixel;\n}\n\n\n/*\n\nvoid mainImage(out vec4 O, in vec2 U)\n{\t\n    vec4 t=texture(iChannel0,U/iResolution.xy);\n\tO.xyz=sqrt((2.5*t.rgb)/t.a)*vec3(1,1.1,1.01);\n}*/","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://www.shadertoy.com/view/wdV3RR\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n#define tau (8.*atan(1.))\n\n// https://www.shadertoy.com/view/WsX3R4\nfloat adsr(float t, vec4 e, float s)\n{\n    return max(0.0, min(1.0, t / max(0.0001, e.x))\n            - min((1.0 - s), max(0.0, t - e.x) * (1.0 - s) / max(0.0001, e.y))\n            - max(0.0, t - e.z) * s / max(0.0001, e.w));\n}\nfloat square(float f)\n{\n    return sign(fract(f) - 0.5);\n}\n\n// shakers\nfloat chh(float t)\n{\n    return square(2763.0 * t * sin(t * 8500.)) * adsr(t, vec4(.0, .03, .0, .0), .0);\n}\n\n// moog bass\nfloat bs(float t)\n{\n    float s = sin(vec4(520, 660, 520, 785)[uint(.5 * t) % 4u] * t);\n    s *= float(int[](0, 0, 1, 0, 0, 0, 1, 0)[uint(2. * t) % 8u]);\n    s *= min(1., 2. * fract(2. * t)) * max(0., 1. - fract(2. * t));\n    return .7 * sign(s);\n}\n// snare\nfloat snare(in float rtime, in float tm)\n{\n    uint c = uint(rtime * 4.);\n    uint _ = 0u, x = 1u;\n    uint beat[] = uint[16u](_, _, _, x, _, _, _, _, _, x, _, _, _, x, _, _);\n    float d = 0.;\n    d = (sin(rtime * 1520.) * exp(-15. * tm));\n    d += (.5 * sin(rtime * 3. * 1520.)) * exp(-45. * tm);\n    d *= min(1., 250. * tm) * max(0., 1. - tm);\n    d += .2 * square(2763.0 * rtime * sin(rtime * 1000.0))\n        * adsr(tm, vec4(0.01, .02, 0.03, 0.05), 0.45);\n    if (!bool(beat[c % uint(beat.length())]))\n        d *= 0.;\n    return d;\n}\n// synth main melody\nvec2 synth(float time, float rt)\n{\n    vec4 pf = vec4(1., 1.5, 1.25, 1.125);\n    float f = 2764.564 * pf[uint(time) % 4u];\n    vec2 s = (sin(rt * vec2(tau * .5, tau)) * sin(rt * vec2(f * .5, f * 1.5)));\n    float tm = fract(5. * time);\n    s *= atan(s * exp(-10. * tm), vec2(.3, .1)) - .4;\n    s *= min(1., 2. * fract(10. * time)) * max(0., 1. - fract(10. * time));\n    f *= (float[](2., 3., 1.5, 2.5)[uint(2. * rt) % 4u]);\n    ((mod(2. * time, 2.) > 1.5) ? f = 1.5 * floor(f) : f);\n    vec2 s1 = vec2(.25, .5) * abs(cos(.5 * f * rt) * exp(-5.0 * fract(3. * rt)));\n    if (mod(rt, 8.) > 4.)\n        s1 += .5 * (vec2(.25, .5) * (sin(.5 * f * rt) * exp(-5.0 * fract(3. * rt))));\n    s1 *= length((s - .9) - cos(2. * tm));\n    return (vec2(.3 * s.x + .6 * s1.y, .15 * s.x + .4 * s1.y)) + .6 * s.y;\n}\nvec2 mainSound( in int samp,float time)\n{\n    // A 440 Hz wave that attenuates quickly overt time\n    // return vec2( sin(6.2831*440.0*time)*exp(-3.0*time) );\n\n    // shakers\n    float hht = chh(fract(8. * time) * float[](1., 0., 1., 0., 1., 0.)[int(8. * time) % 5]);\n\n    // kick\n    float kt = fract(2. * time);\n    float k = cos(200. * kt - 24. * exp(-24. * kt)) * exp(-2. * kt)\n        * adsr(kt, vec4(.05, .4, .1, .1), 0.0);\n    k *= (vec4(1, 0, 1, 0)[uint(time) % 4u]);\n\n    // bass\n    vec2 bss = vec2(1);\n    bss = .45 * vec2(bs(time + 1.025), bs(time + 1.02));\n\n    // rev https://www.shadertoy.com/view/XldcRr\n    vec2 mst1 = vec2(1), rev = vec2(1);\n    // wd - wooden stick\n    vec2 wd = vec2(snare(time, fract(4. * time)));\n\n    float ivR = 1. / 10.5, sum = 0., rand = 1., t2 = 1., amp = 1.;\n\n    for (float _ii = 0.; (_ii <= 1.); _ii += ivR)\n    {\n        rand = fract(120. * sin(_ii * 1000.));\n        t2 = (ivR + _ii) + (.5 * rand);\n        amp = exp(-_ii * t2);\n        rev += vec2(synth(time + 1. * t2, .5 * time).x, synth(time + 1. * t2, .5 * time).y) * amp;\n        mst1 += vec2(synth(time + 2. * t2, 2. * time).x, synth(time + 6. * t2, 2. * time).y) * amp;\n        bss += .15 * vec2(bs(time + 2.011 * t2), bs(time + 5.021 * t2)) * amp;\n        sum += amp;\n    }\n    rev /= sum;\n    mst1 /= sum;\n    bss /= sum;\n\n    // mix\n    if (int(time) < 8)return .3 * mst1 - rev; // intro\n\n    return ((.3 * mst1 - rev + \n             ((mod(time, 32.) > 16.) ? bss : vec2(.1)) \n             + vec2(.05 * hht + .7 * k)\n             + .5 * vec2(.8 * wd.x, wd.x)));\n}","name":"Sound","description":"","type":"sound"}]}