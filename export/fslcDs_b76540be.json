{"ver":"0.1","info":{"id":"fslcDs","date":"1642933075","viewed":163,"name":"easy DoF","username":"takahiroando","description":"based on\nhttps://www.youtube.com/watch?v=E0dsqlajCM4\nhttps://www.shadertoy.com/view/WtSfWK","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["dof"],"hasliked":0,"parentid":"sdsczS","parentname":"easy motion blur test"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere(vec3 p) {\n    return length(p) - 2.0;\n}\n\n\nvec3 repeat(vec3 p) {\n    return mod(p, 8.0) - 4.0;\n}\n\nfloat map(vec3 p) {\n    return sphere(repeat(p));\n    }\n\nvec4 raymarch(vec3 ro, vec3 rd) {\n    float hit = 0.0;\n    for (int i = 0; i < 100; ++i) {\n        float d = map(ro);\n        ro += d * rd;\n        if (abs(d) < 0.0001) {\n            hit = 1.0;\n            break;\n        }\n    }\n    return vec4(ro, hit);\n}\n\nfloat hash(vec2 uv) {\n    return fract(sin(dot(uv, vec2(123.45, 678.90))) * 987654.321);\n    }\n   \nvec3 normal(vec3 p) {\n    mat3 m = mat3(p, p, p) - mat3(0.01);\n    return normalize(map(p) - vec3(map(m[0]), map(m[1]), map(m[2])));\n    }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (2.0 * fragCoord -  iResolution.xy) / min(iResolution.x, iResolution.y);\n    // time += 0.01 * random()\n    float blur = uv.x > 0.0 ? 0.01 : 0.0;\n    float t = iTime;\n    vec3 ro = vec3(5.0, 0.0, -10.0 * t);\n    vec3 rd = normalize(vec3(uv, -1.0));\n    if (uv.x > 0.0) {\n        float focal_dist = 4.0;\n        vec3 fp = ro + rd * focal_dist;\n        ro.xy += 0.05 * hash(uv);// + iTime);\n        rd = normalize(fp - ro);\n    }\n\n    vec4 hit = raymarch(ro, rd);\n    \n    vec3 light = normalize(vec3(1.0, 1.0, 1.0));\n    float col = hit.w > 0.0 ? max(dot(normal(hit.xyz), light), 0.0) : 0.0;\n    //col = hash(uv);\n\n    // Output to screen\n    fragColor = vec4(vec3(col),1.0);\n}","name":"Image","description":"","type":"image"}]}