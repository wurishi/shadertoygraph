{"ver":"0.1","info":{"id":"lclcR2","date":"1721343296","viewed":36,"name":"Ortogonal raymarching","username":"moloxe","description":"just learning","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","ortogonal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdScene(vec3 p) {\n    p = rotationY(iTime * 0.3) * p;\n    p = rotationX(10. * sin(iTime)) * p;\n    float d1 = sdSphere(p, .5);\n    float d2 = sdBox(p, vec3(.4));\n    float d = opSmoothSubtraction(d1,d2, 1e-4);\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec4 c = vec4(0);\n    \n    float z = -1.;\n    float limit = 256.;\n    float maxD = 1.0;\n    for(float i = 0.; i < limit; i++) {\n        vec3 p = vec3(uv.xy, z);\n        float d = sdScene(p);\n        if(d < 1e-4) {\n            c.r = pow(i/limit, 1./3.);\n            c.b = 1. - c.r;\n            break;\n        }\n        z += d;\n        if(z > maxD) break;\n    }\n    \n  \n    fragColor = c;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// https://iquilezles.org/articles/distfunctions/\n\nfloat sdBox(vec3 p, vec3 b) {\n    vec3 q = abs(p) - b;\n    return\n      length(max(q, 0.)) +\n      min(max(q.x, max(q.y, q.z)), 0.);\n}\n\nfloat sdSphere(vec3 p, float s) {\n    return length(p) - s;\n}\n\nfloat opSmoothSubtraction(float d1, float d2, float k) {\n    float h = clamp( 0.5 - 0.5 * (d2+d1) / k, 0., 1.);\n    return mix(d2, -d1, h) + k * h * (1. - h);\n}\n\n\nmat3 rotationY(float angle) {\n  float c = cos(angle);\n  float s = sin(angle);\n  return mat3(\n     c, 0.,  s,\n    0., 1., 0.,\n    -s, 0.,  c\n  );\n}\n\nmat3 rotationX(float angle) {\n  float c = cos(angle);\n  float s = sin(angle);\n  return mat3(\n    1., 0., .0,\n    0.,  c, -s,\n    0.,  s,  c\n  );\n}\n","name":"Common","description":"","type":"common"}]}