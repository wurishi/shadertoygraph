{"ver":"0.1","info":{"id":"cdyczz","date":"1695694435","viewed":14,"name":"2/49","username":"tono","description":"2","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["49"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float pi = acos(-1.);\n\nvec2 map(vec3 p)\n{\n    p.y -= 10.5;\n    vec2 o = vec2(0.);\n    p.y += sin(p.x/10.+ iTime) * 4.;\n    p.xz = sin(p.xz + p.x + iTime * 10.);\n    o.x = length(p) - .5;\n    \n    return o;\n}\n\nvec2 march(vec3 cp,vec3 rd)\n{\n    float depth = 0.;\n    for(int i = 0;i<99;i++)\n    {\n        vec3 rp = cp + rd * depth;\n        vec2 d = map(rp);\n        if(abs(d.x) < 0.01)\n        {\n            return vec2(depth , d.y);\n        }\n        depth += d.x;\n    }\n    return vec2(-1000.);\n}\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\n//https://www.shadertoy.com/view/XsX3zB\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) {\n    /* 1. find current tetrahedron T and it's four vertices */\n    /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n    /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\n    /* calculate s and x */\n    vec3 s = floor(p + dot(p, vec3(F3,F3,F3)));\n    vec3 x = p - s + dot(s, vec3(G3,G3,G3));\n\n    /* calculate i1 and i2 */\n    vec3 e = step(vec3(0.,0.,0.), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    /* x1, x2, x3 */\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    /* 2. find four surflets and store them in d */\n    vec4 w, d;\n\n    /* calculate surflet weights */\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n    w = max(0.6 - w, 0.0);\n\n    /* calculate surflet components */\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    /* multiply d by w^4 */\n    w *= w;\n    w *= w;\n    d *= w;\n\n    /* 3. return the sum of the four surflets */\n    return dot(d, vec4(52.0,52.0,52.0,52.0));\n}\n\nfloat cloud(vec3 cp, vec3 rd,float maxdist)\n{\n    float o = 0.;\n    float depth = 0.;\n    float ac = 0.;\n    float t = iTime/2.;\n    for(int i = 0;i<20 ; i++)\n    {\n        vec3 rp = cp + rd * depth;\n        float s = length( simplex3d(rp * 3. + vec3(0.2,0.5,1.) * iTime) ) - .1;\n      //  s = simplex3d(rp + vec3(0.,-t/8.,0.)) - .1  * abs(sin(0.7 * 1.2 + pi/2. * (simplex3d(rp /10.) - .5 )) - .1);\n        s = max(abs(s), 0.02);\n\t\tac += exp(-s * 3.);\n        if(depth > maxdist)break;\n        depth += s;\n    }\n    ac/=40.;\n    return ac;\n}\n\n// 2/49\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 p = (fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n\t\n    vec3 cp = vec3(0.,0.,-5.);\n    vec3 target = vec3(0.);\n    vec3 cd = normalize(target - cp);\n    vec3 cs = normalize(cross(cd,vec3(0.,1.,0.)));\n    vec3 cu = normalize(cross(cd,cs));\n    \n    //p.y = -abs(p.y) + .2;\n    //p = atan(p) * 1.;\n    p = -abs(p) + .6;\n    \n    \n    float fov = .3 - dot(p,p);\n    vec3 rd = normalize(cd * fov + cs * p.x + p.y * cu);\n    \n    vec2 d = march(cp,rd);\n    \n    vec3 sky = vec3(0.4,0.8,1.);\n    vec3 color = sky;\n    \n    if(d.x > 0.)\n    {\n        vec2 e = vec2(0.,0.001);\n        vec3 pos = d.x * rd + cp;\n        vec3 n = -normalize(vec3(\n                    map(pos+e.xyy).x - map(pos-e.xyy).x,\n                    map(pos+e.yxy).x - map(pos-e.yxy).x,\n                    map(pos+e.yyx).x - map(pos-e.yyx).x));\n        \n        vec3 l = normalize(vec3(2.,4.,8.));\n        float diff = max(dot(l,n),0.);\n        float sp   = max(dot(reflect(l,n),rd),0.);\n        sp = pow(sp,10.);\n        \n        vec3 mat = vec3(.9);\n        color = mat * diff;\n        color += mat * sp;\n    }\n    cp.x = -abs(cp.x);\n    rd.x = -abs(rd.x);\n    float c = cloud(cp,rd,abs(d.x));\n    p.y += (simplex3d(vec3(p.x * 10. + iTime + sin(p.x*10.))) - .5)/10.;\n    //c *= step(p.y,0.);\n    \n    \n    \n    vec3 cl = vec3(1.,1.,1.) * c;\n    color = mix(color , cl,.8);\n    color += cl/3.;\n    float t = 1. - exp(-.0003 * d.x * d.x);\n    color = mix(color , sky , t) + cl;\n    color = clamp(color , 0.,1.);\n    \n   // if(p.x < -1.1 || p.y < -.4)color *= 0.;\n\t\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}