{"ver":"0.1","info":{"id":"ddcfRX","date":"1697450789","viewed":35,"name":"Two-dimensional grid","username":"hellobird","description":"Two-dimensional grid","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    iResolution.x = 1200.0\n    iResolution.y = 675.0\n    iResolution.z = 1.0\n    \n    fragCoord.x = 0.0 ~ 1200.0\n    fragCoord.y = 0.0 ~ 675.0\n*/\n\nconst float PI = 3.1415926;\nfloat ratio = PI / 180.0;\nfloat gridsDensity = 5.0;\nfloat lineWeight = 1.0 - 0.005;\n\nvoid gridsTest(out vec4 fragColor, in vec2 fragCoord) {\n        // -1.0 ~ 1.0\n    vec2 uv = (fragCoord / iResolution.xy * 2.0 - 1.0) * 360.0;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    float xValue = cos(uv.x * gridsDensity * ratio);\n    float yValue = cos(uv.y * gridsDensity * ratio);\n    \n    if (xValue >= lineWeight || yValue >= lineWeight) {\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n    }\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float angle = 45.0 * ratio;\n    vec3 pos = mat3(\n        cos(angle), -sin(angle), 0.0,\n        sin(angle), cos(angle), 0.0,\n        0.0, 0.0, 0.0\n    ) * vec3(fragCoord, 0.0);\n    gridsTest(fragColor, pos.xy);\n}","name":"Image","description":"","type":"image"}]}