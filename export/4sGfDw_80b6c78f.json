{"ver":"0.1","info":{"id":"4sGfDw","date":"1529117894","viewed":117,"name":"test-ml-01","username":"rockes","description":"siren sound sync with color fading in and out","likes":1,"published":1,"flags":8,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FREQUENCY 10.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = cos(FREQUENCY * iTime + vec3(1.0)); //using 1.0 to start with black and fade into white when the pitch is high\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415926536\n#define FREQUENCY 10.0\n#define PITCH 440.0\n\nvec2 mainSound( in int samp, float time ) {\n    //float s = cos( 2.0 * PI  * 440.0 * cos(time) );\n    float s = cos( 2.0 * PI  * PITCH * cos(FREQUENCY * time / 2.0) );\n    s = 0.05 * s;    //lower volume\n    return vec2(s);\n}","name":"Sound","description":"","type":"sound"}]}