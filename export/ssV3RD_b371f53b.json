{"ver":"0.1","info":{"id":"ssV3RD","date":"1631208994","viewed":45,"name":"Shapes DS CC","username":"SeeingAllColor","description":"Shapes for project","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["shapes"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 rectangle(in vec2 fragCoord)\n{\n    // returns rectangle\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    \n    vec3 colRetu = vec3(0);\n    \n    float top = .7;\n    float bottom = .3;\n    float right = .7;\n    float left = .3;\n    \n    vec2 center = vec2(.5);\n    center.y *= aspect;\n    \n    if(uv.x - .2 > bottom * aspect && uv.x - .2 < top * aspect)\n    {\n        if(uv.y > left && uv.y < right)\n        {\n            colRetu = vec3(1);\n        }\n    }\n    else\n    {\n        colRetu = vec3(0);\n    }\n    \n    return colRetu;\n}\n\nvec3 pattern(in vec2 fragCoord)\n{\n    // Returns repeating pattern\n    float rad = 25.;\n    vec3 veco;\n    vec3 tor;\n    float dist;\n    float inCirc;\n    float columbs = fragCoord.x/50.;\n    float roundX = floor(columbs);\n    float rows = fragCoord.y/50.;\n    float roundY = floor(rows);\n    float iResx = iResolution.x/50.;\n    float iResy = iResolution.y/50.;\n    vec2 circPos;\n    float circPox;\n    float circPoy;\n    \n    for(float i = 0.; i < iResx; i++)\n    {\n        for(float j = 0.; j < iResy; j++)\n        {\n            circPox = 50. * i + 25.;\n            circPoy = 50. * j + 25.;\n            circPos = vec2(circPox, circPoy);\n            dist = distance(circPos, fragCoord);\n            inCirc = step(rad, dist);\n            tor += (vec3(1) * (1. - inCirc));\n        }\n    }\n    \n    if((mod(roundX, 2.) == 0. && mod(roundY, 2.) == 0.) || (mod(roundX, 2.) == 1. && mod(roundY, 2.) == 1.))\n    {\n        veco = vec3(1);\n    }\n    return veco + tor;\n}\n\nvec3 stepCircle(in vec2 fragCoord)\n{\n    // makes a circle using step\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec3 rectColor = vec3(0, 1, 0);\n    vec3 circlCol = vec3(1, 0, 0);\n\n    float radius = 0.1;\n    vec2 center = vec2(.5);\n    center.y *= aspect;\n    uv.y *= aspect;\n    \n    \n    float dist = distance(center, uv);\n    float isOutOfCircle = step(radius, dist);\n    \n    float y = 3.;\n    return (circlCol * (1. - isOutOfCircle));\n\n}\n\nvec3 smoothstepCircle(in vec2 fragCoord)\n{\n    // makes a circle using smoothstep\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec3 cirColor = vec3(0, 1, 0);\n\n    float radius = 0.1;\n    vec2 center = vec2(.5);\n    center.y *= aspect;\n    uv.y *= aspect;\n    \n    float dist = distance(center, uv);\n    \n    float isOutOfCircle = smoothstep(radius*dist, dist, radius);\n    \n    \n    return (cirColor * (isOutOfCircle));\n\n}\n\nvec3 twinCircle(in vec2 fragCoord)\n{\n    // makes a step circle and a smoothstep circle\n    vec2 uv = fragCoord/iResolution.xy;\n    float aspect = iResolution.y/iResolution.x;\n    vec3 circlCol1 = vec3(0, 1, 0);\n    vec3 circlCol2 = vec3(1, 0, 0);\n\n    float radius = 0.1;\n    vec2 center1 = vec2(.2, .5);\n    vec2 center2 = vec2(.8, .5);\n    center1.y *= aspect;\n    center2.y *= aspect;\n    uv.y *= aspect;\n    \n    \n    float dist1 = distance(center1, uv);\n    float dist2 = distance(center2, uv);\n    float isOutOfCircle = step(radius, dist1);\n    float isInCircle = smoothstep(radius * dist2, dist2, radius);\n    \n    return (circlCol2 * (1. - isOutOfCircle)) + (circlCol1 * (isInCircle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec3 col;\n    col = rectangle(fragCoord);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}