{"ver":"0.1","info":{"id":"fttyRB","date":"1660046697","viewed":129,"name":"Buggy compilation on AMD GPU","username":"Saniajuneor","description":"This shader program illustrates a compiler bug on Windows 10 with AMD Radeon 6400 GPU. The correct output should be white, but the incorrect compilation gives black output.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["bug","gpu","compiler"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* ----------------------------------------\n   A shader program that gets incorrectly \n   compiled in AMD Radeon 6400.\n   The correct output should be a white screen \n   after clicking the \"Pause\" button and the \n   \"Reset Time\" button to fix the variable iTime to 0. \n   But due to the compiler bug, it outputs black instead.\n   ----------------------------------------\n*/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t;\n    for (int i = 0; i < 2; i++)\n        for (int j = 0; j < 2; j++) {\n            // variable iTime is #seconds that the shader has executed \n            // (shown below the display screen on the left).\n            t= iTime + 0.4;\n            // fract(t) retrieves the fractional part of t.\n            // When iTime is 0, variable t is 0.4, thus fract(t) is 0.4, and fract(t) == 0.0 is false.\n            // So, fragColor should be assigned with vec4(1.0, 1.0, 1.0, 1.0), which means black.\n            // However, the compiler somehow incorrectly reasons that fract(t) == 0.0 is always true,\n            // thus directly assigns vec4(0.0, 0.0, 0.0, 1.0) to fragColor and outputs black.\n            fragColor = (fract(t) == 0.0) ? vec4(0.0, 0.0, 0.0, 1.0) : vec4(1.0, 1.0, 1.0, 1.0);\n        }\n}","name":"Image","description":"","type":"image"}]}