{"ver":"0.1","info":{"id":"dssBzr","date":"1688419727","viewed":51,"name":"heart ðŸ’—","username":"JHJH","description":"first shader following amazing tutorial by @kishimisu ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["heart"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//heartshape function\nfloat dot2( in vec2 v ) { return dot(v,v); }\n\nfloat sdHeart( in vec2 p )\n{\n    p.x = abs(p.x);\n\n    if( p.y+p.x>1.0 )\n        return sqrt(dot2(p-vec2(0.25,0.75))) - sqrt(2.0)/4.0;\n    return sqrt(min(dot2(p-vec2(0.00,1.00)),\n                    dot2(p-0.5*max(p.x+p.y,0.0)))) * sign(p.x-p.y);\n}\n\n\n\n// color function, cosine based palette, 4 vec3 params\nvec3 palette( in float t)\n{\n \n    vec3 a = vec3(1.348, -0.622,0.488);\n    vec3 b = vec3(1.038,1.518,0.518);\n    vec3 c = vec3(0.808,-0.042,-1.052);\n    vec3 d = vec3(1.648,-1.092,-2.062);\n    \n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    //then move center to canvas center fix ratio issue\n   vec2 uv = (fragCoord*2.0-iResolution.xy)/iResolution.y; \n   vec2 uv0 = uv;\n   vec3 finalColor = vec3(0.0);\n   \n   for(float i = 0.0; i<1.5; i++){\n       \n       vec2 c = vec2(0.0,.75);\n       uv = fract(uv * 1.75)-0.5 + c;\n\n       float d = sdHeart(uv0 +.35*c) * exp(-length(uv0));//changed uv to uv0\n       \n       vec3 color = palette(length(uv0) + i*.3 + iTime*0.8);\n\n       d = cos(d*8.0 + iTime)/8.0;//repeat\n       d = abs(d);\n       d = 0.0025/d; //glow effect\n       d= smoothstep(0.0,.1,d);\n       \n       finalColor += color*d;\n   \n   }\n\n    \n    // Output to screen\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}