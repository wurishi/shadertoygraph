{"ver":"0.1","info":{"id":"XdXBR7","date":"1509198334","viewed":782,"name":"Simplex heightmap ray trace","username":"banthar","description":"Mouse with WASD and mouse.","likes":16,"published":1,"flags":48,"usePreview":0,"tags":["triangle","heightmap","mesh"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat4 rotateX(float a) {\n    return mat4(\n        1,0,0,0,\n\t\t0,cos(a),-sin(a),0,\n\t\t0,sin(a),cos(a),0,\n\t\t0,0,0,1);\n}\n\nmat4 rotateZ(float a) {\n    return mat4(\n\t\tcos(a),-sin(a),0,0,\n\t\tsin(a),cos(a),0,0,\n\t\t0,0,1,0,\n\t\t0,0,0,1\n    );\n}\n\nconst float F = (sqrt(3.0)-1.0)/2.0;\n\n\nfloat height(vec2 uv) {\n    return textureLod(iChannel1, uv/100.0, 0.).r -0.1;\n}\n\nfloat elev_s(vec2 uv) {\n    float f = cos((uv.x+uv.y)*0.2);\n    f=0.2+f*f*0.7;\n\treturn max(0.15, f* (5.0 - abs(20.0 - length(uv)) + height(uv/4.0)*4.0));\n}\n\nfloat elev(vec2 uv) {\n    return elev_s(uv-uv.yx * (1.0-2.0*F));\n}\n\nvec4 mountain2(vec3 pos, vec3 normal) {\n    pos.xy += normal.xy * 0.0;\n    float F = (sqrt(3.0)-1.0)/2.0;\n\tpos.xy += (pos.x + pos .y) * F;\n\tnormal.xy += (normal.x + normal.y) * F;\n    \n    vec3 s = sign(normal.xyz);\n\tvec3 sn = (s + 1.0 ) /2.0;\n    vec2 ipos = floor(pos.xy);\n    vec3 fpos = pos - vec3(ipos,0.0);\n\n    float e0 = 0.0;\n    vec3 pos0 = vec3(0.0, 0.0, 0.0);\n    \n    const int d = 32;\n    for(int i=0;i<d;i++) {\n        float e1;\n        \n        vec2 old_ipos = ipos;\n        \n        vec3 a = ((s+1.)/2. - s*fpos)/normal*s;\n        if(a.x >= a.y) {\n            if(fpos.x * s.y <= fpos.y * s.y) {\n            \tfpos += normal * a.y;\n            \tfpos.y = -(s.y - 1.)/2.;\n            \tipos.y += s.y;\n                e1 = mix(elev(ipos.xy + vec2(0,1.0-sn.y)), elev(ipos.xy+ vec2(1,1.0-sn.y)), fpos.x);\n            } else {\n                fpos += (fpos.x-fpos.y)/(normal.y-normal.x) * normal;\n                fpos.y = fpos.x;\n                e1 = mix(elev(ipos.xy + vec2(0,0)), elev(ipos.xy+ vec2(1,1)), fpos.x);\n            }\n        } else {\n            if(fpos.x *s.x >= fpos.y * s.x) {\n            \tfpos += normal * a.x;\n            \tfpos.x = -(s.x - 1.)/2.;\n            \tipos.x += s.x;\n                e1 = mix(elev(ipos.xy + vec2(1.0-sn.x,0)), elev(ipos.xy+ vec2(1.0-sn.x,1)), fpos.y);\n            } else {\n                fpos += (fpos.x-fpos.y)/(normal.y-normal.x) * normal;\n                fpos.y = fpos.x;\n                e1 = mix(elev(ipos.xy + vec2(0,0)), elev(ipos.xy+ vec2(1,1)), fpos.x);\n            }\n        }\n\n        vec3 pos1 = fpos + vec3(ipos,0);\n        if(e1 >= fpos.z) {\n            float t = (e0 - pos0.z) / (pos1.z - pos0.z - e1 + e0);\n            vec3 fpost = pos0 + t * (pos1 - pos0);\n            vec2 uv = fract(fpost.xy);\n            vec2 fv = abs(uv-0.5) * 2.0;\n            float f = max(max(fv.x, fv.y), 1.0-2.0*abs(uv.x-uv.y));\n            \n            float tq = 0.9;\n            \n            float p = smoothstep(tq, tq*1.1, f) + 0.05 * smoothstep(0.5, 1.0, f);\n            float q = 0.5 * max(0.0,elev(floor(fpost.xy) + vec2(0,0)) - elev(floor(fpost.xy)+ vec2(1,0)));\n            \n            return vec4(max(mix(vec3(1,1,1), vec3(0.05,0.7,0.93), 1.0-0.1*fpost.z)*p, vec3(0.15,0.3,0.5)*q),1);\n        }\n\t\te0 = e1;\n        pos0 = pos1;\n        \n    }\n    return vec4(0,0,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 pos = texture(iChannel0, vec2(0.5,0.5)/iChannelResolution[0].xy).xyz;\n    vec3 rot = texture(iChannel0, vec2(1.5,0)/iChannelResolution[0].xy).xyz;\n    \n  \tvec4 screen = vec4((fragCoord.xy * 2.0 - iResolution.xy) / min(iResolution.x,iResolution.y), 2.0, 1.0);\n    vec4 eyeV = normalize(rotateZ(rot.x)*rotateX(rot.y)*screen);\n\n    fragColor = mountain2(pos, eyeV.xyz);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float tau = 6.28318530718;\n\nmat4 rotateX(float a) {\n    return mat4(\n        1,0,0,0,\n\t\t0,cos(a),-sin(a),0,\n\t\t0,sin(a),cos(a),0,\n\t\t0,0,0,1);\n}\n\n\nmat4 rotateY(float a) {\n    return mat4(\n\t\tcos(a),0,sin(a),0,\n\t\t0,1,0,0,\n\t\t-sin(a),0,cos(a),0,\n\t\t0,0,0,1\n    );\n}\n\nmat4 rotateZ(float a) {\n    return mat4(\n\t\tcos(a),-sin(a),0,0,\n\t\tsin(a),cos(a),0,0,\n\t\t0,0,1,0,\n\t\t0,0,0,1\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    fragCoord -= 0.5;\n    if(fragCoord.x < 3.0 ) {\n    if(iFrame == 0) {\n        if(fragCoord.x == 0.0 ) {\n    \t\tfragColor.rgb = vec3(5,0,1);\n        } else {\n    \t\tfragColor.rg = vec2(5,-1.5);\n        }\n        return;\n    }\n        \n        vec3 old_pos = texture(iChannel0, vec2(0.5,0)/iChannelResolution[0].xy).xyz;\n        vec2 old_rot = texture(iChannel0, vec2(1.5,0)/iChannelResolution[0].xy).xy;\n        vec2 old_abs_rot = texture(iChannel0, vec2(2.5,0)/iChannelResolution[0].xy).xy;\n\n        \n        vec2 rot;\n        if(iMouse.z >= 0.0) {\n        \tvec2 mouse = tau * (iMouse.xy-abs(iMouse.zw)) / min(iResolution.x,iResolution.y);\n            rot = old_abs_rot + mouse * vec2(-1,1);\n            rot.y = clamp(rot.y, -0.5*tau, 0.0);\n        } else {\n            rot = old_rot;\n            old_abs_rot = old_rot;\n        }\n\n        \n\t    vec4 v = vec4(\n\t    \ttexture(iChannel1, vec2(68.0/255.0,0)).r - texture(iChannel1, vec2(65.0/255.0,0)).r,\n\t        0,\n            texture(iChannel1, vec2(87.0/255.0,0)).r - texture(iChannel1, vec2(83.0/255.0,0)).r,\n            0\n    \t) * 0.1;\n        \n        vec3 pos = old_pos + (rotateZ(rot.x)*rotateX(rot.y)*v).xyz;\n\n        \n        if(fragCoord.x == 0.0 ) {\n    \t\tfragColor.rgb = pos;\n        } else if(fragCoord.x == 1.0 ) {\n    \t\tfragColor.rg = rot;\n        } else if(fragCoord.x == 2.0 ) {\n    \t\tfragColor.rg = old_abs_rot;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}