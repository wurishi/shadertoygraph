{"ver":"0.1","info":{"id":"DlVfRz","date":"1701790923","viewed":30,"name":"dithering validation","username":"sciecode","description":"dither validation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["noise","dither","hash"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n#define scl .3\n#define pw .03\n#define div 10.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 final;\n\n    if ( uv.y > (div-2.)/div ) {\n        final = vec3(.4 + uv.x*scl);\n    } else if ( uv.y > (div-4.)/div ) {\n        vec3 col = vec3(.3,.3,.45);\n        final = mix(col,col+scl,uv.x);\n    } else if ( uv.y > (div-6.)/div ) {\n        final = mix(vec3(.4,.4,.55),vec3(.6,.55,.4),uv.x); \n    } else if ( uv.y > (div-8.)/div ) {\n        final = vec3(uv.x);\n    } else {\n        final = vec3(uv.x*pw);\n    }\n    \n    if ( floor(mod(uv.y*div,2.)) == 0. ) final += dither(uv);\n    \n    if ( uv.y < 2./div ) final /= pw;\n\n    final *= step( fract(uv.y * div), 1. - .2/div );\n    \n    fragColor = vec4(pow(final,vec3(2.4)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define MOD3 vec3(443.8975,397.2973,491.1871)\nvec3 hash32(vec2 p) {\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract(vec3((p3.x+p3.y)*p3.z, (p3.x+p3.z)*p3.y, (p3.y+p3.z)*p3.x));\n}\n\nvec3 dither(vec2 uv) {\n    const float intensity = .8 / 255.;\n    vec3 scaled_rgb_noise = 2. * ( hash32(uv) + hash32(uv + 0.59374) - 1. );\n    return intensity * scaled_rgb_noise;\n}","name":"Common","description":"","type":"common"}]}