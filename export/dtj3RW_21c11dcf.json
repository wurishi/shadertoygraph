{"ver":"0.1","info":{"id":"dtj3RW","date":"1672958669","viewed":107,"name":"Floating Points 3","username":"electrocnic","description":"floating point","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["trippy"],"hasliked":0,"parentid":"dl2GRW","parentname":"Floating Points 2"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float M_E = 2.71828182845904523536028747135266250;\n\nfloat get_factor_for_line_drawing(float thickness, float pos_offset, float pos_input) {\n    return 1. - pow(M_E, -thickness * pow(pos_input - pos_offset,8.));\n}\n\nfloat get_factor_for_point(float thickness_mod, float pos_offset_x, float pos_offset_y, float pos_input_x, float pos_input_y) {\n    float factor_x = get_factor_for_line_drawing(thickness_mod, pos_offset_x, pos_input_x);\n    float factor_y = get_factor_for_line_drawing(thickness_mod, pos_offset_y, pos_input_y);\n    float final_line_fac = 1. - (factor_x + factor_y);\n    return max(0.0, min(final_line_fac, 1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    //uv -= 0.5;\n    float res_fac = iResolution.x/iResolution.y;\n    uv.x *= res_fac;\n\n    float thickness_mod = 200000000000000000.;\n    \n    int point_count = 50;\n    \n    float final_fac = 0.;\n    for (int i=0; i<point_count; i++) {\n        float pos_offset_x = 0.5*res_fac + 0.5*res_fac*cos((0.5+0.5*sin(float(i)))*iTime);\n        float pos_offset_y = 0.5 + 0.5*cos((0.5+0.5*sin(float(2*i+1)))*iTime);\n        final_fac += get_factor_for_point(thickness_mod, pos_offset_x, pos_offset_y, uv.x, uv.y);\n    }\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(final_fac*col,1.0);\n}","name":"Image","description":"","type":"image"}]}