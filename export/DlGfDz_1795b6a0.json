{"ver":"0.1","info":{"id":"DlGfDz","date":"1701969095","viewed":192,"name":"fractal kaleidoscope and points","username":"nayk","description":"fractal,neon,glow,new,colorful","likes":8,"published":1,"flags":1,"usePreview":0,"tags":["fractal","colorful","glow","new","neon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*original https://www.shadertoy.com/view/lslyRn, /* original https://www.shadertoy.com/view/lsyXDK https://www.shadertoy.com/view/lslyRn https://www.shadertoy.com/view/DlycWR and other*/\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define iterations 17\n#define formuparam 0.53\n\n#define volsteps 20\n#define stepsize 0.1\n\n#define zoom   0.800\n#define tile   0.850\n#define speed  0.000\n\n#define brightness 0.0015\n#define darkmatter 0.300\n#define distfading 0.730\n#define saturation 0.850\n\n#define USE_CHEBYSHEV_DISTANCE 0\n\n// Fun effect, to clamp the ball positions to a grid\n#define BALLS_IN_GRID 0\n#define BALL_GRID_SIZE 150.3\n// if you use the grid, I'd also increase the speed - maybe 30-50 or so...\n#define BALL_SPEED 3.3\n\nconst float speed2 = BALL_SPEED;\n\nconst float radius = 0.07;\nconst float thresholdFactor = 0.18;\nconst int ballCount = 23;\n\nconst vec3 backgroundColor = vec3(0.0);\nconst vec3 metaballColor = vec3(1.0, 0.5, 0.0);\n\nconst float zoomFactor = 2.5;\nconst float orbitRadius = 0.3;\n#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat dstMetaball(vec2 pos, vec2 center, float radius)\n{\n  vec2 diff = pos - center;\n \n#if USE_CHEBYSHEV_DISTANCE\n  diff = abs(diff);\n  diff = vec2(max(diff.x, diff.y));\n#endif\n\n  return radius / dot(diff, diff);\n}\n\nvec3 colorByDistance(float dst, float falloff, vec3 color, vec3 oldColor)\n{\n  return mix(color, oldColor, smoothstep(0.0, falloff, dst));\n}\n\n// see: iquilezles.org/articles/palettes\nvec3 colorIQ(float i)\n{\n  vec3 a = vec3(0.5);\n  vec3 b = vec3(0.5);\n  vec3 c = vec3(1.0);\n  vec3 d = vec3(0.0, 0.1, 0.2);\n  return (a + b * cos(((c * i + d) * 6.2831852)));\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 ro, in vec3 rd )\n{\n//get coords and direction\nvec3 dir=rd;\nvec3 from=ro;\n\n//volumetric rendering\nfloat s=0.1,fade=1.;\nvec3 v=vec3(0.);\nfor (int r=0; r<volsteps; r++) {\nvec3 p=from+s*dir*.5;\np = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold\nfloat pa,a=pa=0.;\nfor (int i=0; i<iterations; i++) {\np=abs(p)/dot(p,p)-formuparam; // the magic formula\na+=abs(length(p)-pa); // absolute sum of average change\npa=length(p);\n}\nfloat dm=max(0.,darkmatter-a*a*.001); //dark matter\na*=a*a; // add contrast\nif (r>6) fade*=1.1; // dark matter, don't render near\n//v+=vec3(dm,dm*.5,0.);\nv+=fade;\nv+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance\nfade*=distfading; // distance fading\ns+=stepsize;\n}\nv=mix(vec3(length(v)),v,saturation); //color adjust\nfragColor = vec4(v*.03,1.);\n}\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n//get coords and direction\nvec2 uv=fragCoord.xy/iResolution.xy-.5;\n\nvec3 dir=vec3(uv*zoom,iTime*0.001);\nfloat time=iTime*speed+.25;\n\n  float aspect = iResolution.x / iResolution.y;\n  vec2 pos = (fragCoord.xy / iResolution.xy) * vec2(aspect, 1.0);\n  pos -= clamp(vec2(aspect, 1.0 / aspect) - 1.0, 0.0, 1.0)  * 0.5;\n  pos = pos * 2.0 - 1.0;\n  pos /= zoomFactor;\n   \n  vec3 color = backgroundColor;\n  float time2 = float(iTime);\n   \n  float dst = dstMetaball(pos, vec2(0.0), radius);\n  color += colorIQ(time2 * speed2 * 0.01) * dst * thresholdFactor * (sin(radians(time2 * (speed2 + 5.3))) * 0.5 + 0.5) * 30.0;\n\n  // init the vars for the other balls\n  vec2 ballPos = vec2(orbitRadius*cos(iTime), 0.0);\n  float angle = radians(time2 * speed2);\n  mat2 matRotate = mat2(cos(angle), -sin(angle),\n                        sin(angle),  cos(angle));\n                        vec4 O= fragColor;\n                        vec2 C=fragCoord;\n O=vec4(0);\n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<110.;\n        O.xyz+=mix(vec3(1),H(g*.1),sin(.8))*1./e/8e3\n    )\n    {\n        p=g*d;\n        p.z+=iTime*1.5;\n        a=10.;\n          float t = mod(iTime*0.1,4.);\n     \n     \n        p=mod(p-a,a*2.)-a;\n        s=5.;\n       \n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n           \n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n             \n            s*=e=1.4+sin(iTime*.234)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.+cos(iTime*.3+.5*cos(iTime*.3))*3.,\n                    60,\n                    8.+cos(iTime*.5)*1.\n                 );\n         }\n         g+=e=length(p.yz)/s;\n    }\n  for (int i=0; i < ballCount; ++i)\n  {\n    ballPos = matRotate * ballPos;\n#if BALLS_IN_GRID\n    ballPos = round(ballPos * BALL_GRID_SIZE) / BALL_GRID_SIZE;\n#endif\n    dst = dstMetaball(pos, ballPos, radius);\n    color += colorIQ(((float(i) + 3.0) / float(ballCount)) + time2* speed2 * 0.00) * dst * thresholdFactor;\n    //color += getColor(tex.x) * dst * thresholdFactor;\n  }\ncolor /= float(ballCount) + 1.0;\nvec3 from=vec3(1.,.5,0.5)*O.xyz;\n\n\n\nmainVR(fragColor, fragCoord, from, dir);\n    fragColor*=vec4(color*O.xyz,1.);\n \n}\n\n","name":"Image","description":"","type":"image"}]}