{"ver":"0.1","info":{"id":"mlScDy","date":"1729770841","viewed":135,"name":"Supermario Rainbow Road","username":"servostar","description":"Recreation of the Rainbow Road track from Supermario.","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["sdf","rainbow","mario"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat rand(vec2 n) { \n\treturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 n) {\n\n    vec2 f = fract(n) * 2.0 - 1.0;\n    vec2 i = floor(n);\n    \n    return 1.0 - smoothstep(0.0, 0.3, length(f) + rand(i));\n}\n\nconst float Curvature = 0.1;\nconst float MotionSpeed = 10.0;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    \n    vec3 ro = vec3(0, 1.8, iTime * MotionSpeed);\n    vec3 rd = normalize(vec3(uv,1));\n    \n    vec3 col = vec3(0.0);\n    \n    vec2 curve = vec2(\n        sin(iTime * Curvature) * 5e-3,\n        cos(iTime * Curvature) * 1e-3);\n\n    float theta = sin(iTime * Curvature) * 0.25 + 1.5708;\n    float s = sin(theta);\n    float c = cos(theta);\n    rd.xy *= mat2(s, -c, c, s);\n\n    vec3 f = vec3(0.0);\n    float d = 0.0;\n    float mask = 0.0;\n\n    for (int i = 1000; i --> 0;)\n    {\n        vec3 p = ro + rd * d;\n        \n        p.xy += d * d * curve;\n        \n        float h = max(abs(p.y), abs(p.x) - 5.0);\n        vec3 chroma = hsv2rgb(vec3(p.x/10.0 + 0.5, 1.0, 1.0)) / max(d * 0.02, 1.0);\n        \n        if (1e-3 > h)\n        {\n            col = chroma;\n\n            col *= step(0.0, sin(p.x * 2.0) * sin(p.z * 2.0)) * 0.1 + 0.9;\n            col *= step(0.0, sin(p.x * 4.0) * sin(p.z * 4.0)) * 0.05 + 0.95;\n\n            mask = 1.0 - smoothstep(0.0, 1.0, pow(abs(p.x), 4.0) * 0.001);\n            \n            break;\n        }\n\n        d += h;\n        f += chroma * min(1.0 / h, 1.0) * 0.4 / max(d * 0.1, 1.0);\n    }\n    col = mix(f * 0.1, col, mask);\n    col = mix(vec3(noise(rd.xy * 40.0 + ro.xz / MotionSpeed)) + col, col, smoothstep(0.0, 1.0, length(col) * 3.0));\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}