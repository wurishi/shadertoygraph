{"ver":"0.1","info":{"id":"4dfBz2","date":"1496924550","viewed":269,"name":"Windows XP remix","username":"levonchic","description":"Redesign of circular sound visualizer, now supports multichannel (multifrag) rendering, coloring and my cat\n\n   A_A\n  (-.-)\n   |-|   \n  /   \\  \n |     |  __\n |  || | |  \\___\n \\_||_/_/","likes":6,"published":1,"flags":96,"usePreview":0,"tags":["sound","music","windows","visualizer","soundcloud"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xts3W2","filepath":"https://soundcloud.com/rwadna/windows-error-remix","previewfilepath":"https://soundcloud.com/rwadna/windows-error-remix","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Constants\n#define PI           3.141528 // Vladimir Krug\n//                   Sound value frag UV  Drag effect frag UV  Sine(x + sound(value) * sinf)  Sine wave drag displacement factor  Sine displacement scale factor    Sine value scale, Sin(x) * fragvs\n//                   ↓                    ↓                    ↓                              ↓                                   ↓                                 ↓\n#define ARG0         vec2(0.10, 0.25),    vec2(0.1, 0.25),     vec2(0.1, 0.25),               0.85,                               0.11,                             0.25\n#define ARG1         vec2(0.31, 0.25),    vec2(0.3, 0.25),     vec2(0.2, 0.25),               0.35,                               0.00,                             0.31\n#define ARG2         vec2(0.43, 0.25),    vec2(0.5, 0.31),     vec2(0.4, 0.25),               0.45,                               0.11,                             0.49\n#define ARG3         vec2(0.75, 0.25),    vec2(0.4, 0.31),     vec2(0.3, 0.25),               0.63,                               0.01,                             0.69\n\n// sindf moves (0,0) to (-value,0), changes length from sine(period) to sine(period) + 2 * value \nfloat fragWave(vec2 uv, vec2 fragvUV, vec2 fragdUV, vec2 fragsUV, float sindf, float sinf, float fragvs) {\n    // frag value value\n    float fragv    = texture(iChannel0, fragvUV).x;\n    // frag displacement value\n\tfloat fragd    = texture(iChannel0, fragdUV).x;\n    // frag shift of sin argument, x + value)\n\tfloat frags    = texture(iChannel0, fragsUV).x;\n    \n    // Sine displacement factor value, depending on frag displacement value\n    float sdf_ch = sindf * fragd;\n    // Comparator sine\n    float x = (uv.x * (1.0 - 2.0 * sdf_ch + sinf * frags) + sdf_ch) * PI;\n    x = x > PI ? PI : x < 0.0 ? 0.0 : x;\n    float cmp = sin(x) * fragv * fragvs;\n    cmp *= cmp;\n    // ??????? ???, ?? ?????.\n    float ywk = uv.y - 0.5;\n    ywk *= ywk;\n    // (x - a) > -b && (x - a) < b\n    // Is equal to:\n    // (x - a)^2 < b^2\n    if(ywk < cmp)\n        return 1.0;\n    return 0.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2  uv       = fragCoord.xy / iResolution.xy;\n    \n    // Render background\n    fragColor = texture(iChannel1, uv);\n    \n    // Define colors\n    vec4 arg0 = vec4(0.13,  0.11,  0.19, 0.0) / 3.9;\n    vec4 arg1 = vec4(0.011, 0.33,  0.14, 0.0) / 3.3;\n    vec4 arg2 = vec4(0.31,  0.23,  0.04, 0.0) / 3.0;\n    vec4 arg3 = vec4(0.31,  0.23,  0.24, 0.0) / 3.1;\n     \n    // Render waves\n    fragColor += arg0 * fragWave(uv, ARG0);\n    fragColor += arg1 * fragWave(uv, ARG1);\n    fragColor += arg2 * fragWave(uv, ARG2);\n    fragColor += arg3 * fragWave(uv, ARG3);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define PIXEL 4\n#define BLACK vec4(0.0)\n#define DGRAY vec4(0.482352941)\n#define LGRAY vec4(0.741176471)\n#define WHITE vec4(1.0)\n#define BLUE  vec4(0.0, 0.0, 0.482352941, 1.0)\n\nivec2 ZERO = ivec2(0);\nbool bound(ivec2 xy, int w, int h) {\n    return xy.x >= 0 /* ZERO.x */ && xy.y >= 0 /* ZERO.y */ && xy.x < w && xy.y < h;\n}\n\nvoid rect(out vec4 fragColor, ivec2 frag, int x, int y, int w, int h) {\n    frag -= ivec2(x, y);\n    if(!bound(frag, w, h))\n        return;\n    \n    \n    if(frag.x == w - 1)\n        fragColor = BLACK;\n    else\n    if(frag.y == 0)\n        fragColor = BLACK;\n        \n    else\n    if(frag.y == h - 1)\n        fragColor = WHITE;\n    else\n    if(frag.x == 0)\n        fragColor = WHITE;\n        \n\telse\n    if(frag.y == 1)\n        fragColor = DGRAY;\n    else\n    if(frag.x == w - 2)\n        fragColor = DGRAY;\n        \n    else\n    if(frag.y == h - 2)\n        fragColor = LGRAY;\n    else\n    if(frag.x == 1)\n        fragColor = LGRAY;\n\telse \n        fragColor = LGRAY;\n}\n\nvoid box(out vec4 fragColor, ivec2 frag, int x, int y, int w, int h) {\n    frag -= ivec2(x, y);\n    if(!bound(frag, w, h))\n        return;\n    \n    if(frag.y == 0)\n        fragColor = DGRAY;\n    else\n    if(frag.x == w - 1)\n        fragColor = DGRAY;\n    \n    else\n    if(frag.y == h - 1)\n        fragColor = WHITE;\n    else\n    if(frag.x == 0)\n        fragColor = WHITE;\n        \n    else\n    if(frag.y == h - 1)\n        fragColor = LGRAY;\n    else\n    if(frag.x == 1)\n        fragColor = LGRAY;\n\telse \n        fragColor = LGRAY;\n}\n\nvoid frame(out vec4 fragColor, ivec2 frag, ivec2 res) {\n    //if(!bound(frag, res.x, res.y)) {\n    //    fragColor = texture(iChannel0, vec2(frag * PIXEL) / iResolution.xy) * 0.5;\n    //\treturn;\n    //}\n   \tfragColor = LGRAY;\n    \n    if(frag.y == 0)\n        fragColor = BLACK;\n    else\n    if(frag.x == res.x - 1)\n        fragColor = BLACK;\n        \n\telse\n    if(frag.y == res.y - 1)\n        fragColor = LGRAY;\n    else\n    if(frag.x == 0)\n        fragColor = LGRAY;\n        \n\telse\n    if(frag.y == 1)\n        fragColor = DGRAY;\n    else\n    if(frag.x == res.x - 2)\n        fragColor = DGRAY;\n        \n\telse\n    if(frag.y == res.y - 2)\n        fragColor = WHITE;\n    else\n    if(frag.x == 1)\n        fragColor = WHITE;\n        \n\telse\n    if(frag.x > 2 && frag.x < res.x - 3\n       &&\n       frag.y < res.y - 3 && frag.y > res.y - 11)\n        fragColor = BLUE;\n}\n\nvoid pixel(out vec4 fragColor, ivec2 frag, int x, int y, vec4 color) {\n    if(frag.x == x && frag.y == y)\n        fragColor = color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    \n    //ZERO = ivec2(sin(iTime) * 8.0, cos(iTime) * 8.0);\n    ivec2 frag = ivec2(fragCoord) / PIXEL;\n    ivec2 res  = ivec2(iResolution.xy) / PIXEL;\n    \n    frame(fragColor, frag, res);\n    rect (fragColor, frag, res.x - 9,  res.y - 9,  5,  5);\n    pixel(fragColor, frag, res.x - 8,  res.y - 6,  BLACK);\n    pixel(fragColor, frag, res.x - 7,  res.y - 6,  BLACK);\n    pixel(fragColor, frag, res.x - 8,  res.y - 7,  BLACK);\n    pixel(fragColor, frag, res.x - 7,  res.y - 7,  BLACK);\n    \n    rect (fragColor, frag, res.x - 28,  4,  24,  8);\n    rect (fragColor, frag, res.x - 58,  4,  22,  8);\n    box  (fragColor, frag, 4,  16,  res.x - 8,  res.y - 28);\n}","name":"Buffer B","description":"","type":"buffer"}]}