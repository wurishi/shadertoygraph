{"ver":"0.1","info":{"id":"Wl2BD1","date":"1598855039","viewed":66,"name":"Improved RayMarch Template","username":"Giraugh","description":"Slightly improved ray-marching template with some basic lighting features.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch","lighting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Slightly Better Raymarcher */\n/* By Giraugh */\n\n#define MAX_STEPS 100\n#define MAX_DIST 1000.\n#define SURF_DIST 0.01\n#define AMBIENT_LIGHT .1\n#define SUN_STRENGTH 1.\n#define FOG_DENSITY .03\n#define FOG_COL vec3(.45, .55, .65)\n#define SKY_COL vec3(0.5,0.6,0.7)\n#define SUN_COL vec3(1.0,0.9,0.85)\n\nmat2 Rot(float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\treturn mat2(\n    \tc, -s, s, c\n    );\n}\n\nfloat DBox(vec3 p, vec3 o, vec3 r) {\n \treturn length(max(abs(p - o) - r, 0.));   \n}\n\n// Return the distance to the nearest point in the scene\n// from (point)\nfloat GetDist(vec3 point) {\n    float planeD = point.y;\n    float sphereD = length(point - vec3(0, 1, 6)) - 1.;\n    \n    return min(planeD, sphereD);\n\n}\n\n// March a ray forwards into the scene determined by (GetDist)\n// Returns the distance the ray travelled before getting\n// below (SURF_DIST) distance from a surface or too far away \nfloat RayMarch(vec3 rayOrigin, vec3 rayDirection) {\n    float d = 0.;\n    for (int i = 0; i < MAX_STEPS; i++) {\n        vec3 p = rayOrigin + rayDirection * d;\n        float d_delta = GetDist(p);\n        d += d_delta;\n        if (d > MAX_DIST || abs(d_delta) < SURF_DIST) break; \n    }\n    return d;\n}\n\n// Calculate the surface normal at (point)\n// can reduce (off) to improve accuracy\nvec3 GetNormal(vec3 point) {\n    float d = GetDist(point);\n    float off = .01;\n    vec3 n = vec3(\n    \td - GetDist(point - vec3(off,0,0)),\n        d - GetDist(point - vec3(0,off,0)),\n        d - GetDist(point - vec3(0,0,off))\n    );\n    return normalize(n);\n}\n\n\n// Get how lit (not in shadow) the given point is. (With Penumbra)\nfloat GetShadowSoft(vec3 ro, vec3 rd, float dmin, float dmax, float k) {\n    float res = 1.;\n    for (float d = dmin; d < dmax; ) {\n        float sceneDist = GetDist(ro + rd * d);\n        if (sceneDist < SURF_DIST) return AMBIENT_LIGHT;\n        d += sceneDist;\n        res = min(res, k * sceneDist / d);\n    }\n    return min(1., res + AMBIENT_LIGHT);\n}\n\n// Get how lit (not in shadow) the given point is.\nfloat GetShadow(vec3 ro, vec3 rd, float dmin, float dmax) {\n    for (float d = dmin; d < dmax; ) {\n        float sceneDist = GetDist(ro + rd * d);\n        if (sceneDist < SURF_DIST) return 0.0;\n        d += sceneDist;\n    }\n    return 1.;\n}\n\n// Determine degree of lighting (0 to 1) at (pos) by (lightPos)\nfloat GetLightingPoint(vec3 point, vec3 lightPos) {\n    vec3 l = normalize(lightPos - point);\n    vec3 n = GetNormal(point);\n    float diff = clamp(dot(l, n), 0., 1.);\n    \n    float shadow = GetShadowSoft(point, l, SURF_DIST * 30., length(lightPos - point), 25.);\n    \n    return diff * shadow;\n}\n\n\nfloat GetLightingSun(vec3 point, vec3 sunDir) {\n    vec3 n = GetNormal(point);\n    float diff = clamp(dot(sunDir, n), 0., 1.);\n    float shadow = GetShadowSoft(point, sunDir, SURF_DIST * 30., MAX_DIST, 25.);\n    return diff * shadow;\n}\n\nvec3 GetFog(vec3 col, float dist) {\n    float fogAmount = 1. - exp(-dist * FOG_DENSITY);\n    return mix(col, FOG_COL, fogAmount);\n}\n\nvec3 GetFogSky(vec3 col, float dist, vec3 rayDir, vec3 sunDir) {\n    float fogAmount = 1. - exp(-dist * FOG_DENSITY);\n    float sunAmount = .5 * max(0., dot(rayDir, sunDir));\n    vec3 fogCol = mix(SKY_COL, SUN_COL, pow(sunAmount, 1.));\n    return mix(col, fogCol, fogAmount);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (square) (from 0 to 1)\n    vec2 uv = (fragCoord - .5*iResolution.xy)/iResolution.y;\n\n    // Declare camera position in terms of ray origin and direction\n    vec3 rayOrigin = vec3(0, 1, 0);\n    vec3 rayDirection = normalize(vec3(uv.x, uv.y, 1));\n    \n    // RayMarch to find point\n    float dist = RayMarch(rayOrigin, rayDirection);\n    vec3 hitPoint = rayOrigin + dist * rayDirection;\n    \n    // Det col\n    vec3 col = vec3(1);\n    \n    // Determine lighting\n    vec3 sunDir = vec3(-.3, -1, 0.5);\n    vec3 lightPos = vec3(2. * cos(iTime), 4, 2. * sin(iTime));\n    float lighting = GetLightingSun(hitPoint, -sunDir);\n    col *= lighting;\n    \n    // Fog\n    col = GetFogSky(col, dist, rayDirection, -sunDir);\n    \n    // Ouput colour at full transparency\n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}