{"ver":"0.1","info":{"id":"XsGfW3","date":"1542051186","viewed":119,"name":"log mandelbrot","username":"rory618","description":"Here is an often convinient way to compute a mandelbrot set, by storing and iterating log(z) instead of z. The formula z<=z*z+c thus becomes log_z<=2*log_z+log(1+exp(log(c)-2*log_z))","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define highp\nvec2 cis(float t){\n    return cos(t - vec2(0,3.14159/2.));\n}\nvec2 cexp(vec2 z) {\n    return exp(z.x)*cis(z.y);\n}\nvec2 clog(vec2 z) {\n    return vec2(log(length(z)),atan(z.y,z.x));\n}\nvoid mainImage( out vec4 o, vec2 i ) {\n    o = vec4(0);\n    vec2 c = (i-.5*iResolution.xy)/iResolution.y*2.7-vec2(.2,0);\n    vec2 z = clog(c);\n    for (int j= 0; j < min(iFrame/10,57); j++) {  \n        z = 2.*z + clog(vec2(1,0)+cexp(clog(c)-2.*z));\n        //z.x=min(z.x,100.);\n        z.y=mod(z.y,3.1415926535*2.);\n            o += vec4(.5+.5*cos(z.x*sin(iTime)+z.y*vec3(4,5,6)),1)*(13.+float(j*j))/(z.x*z.x+.1);\n        \n\n    }\n    o /= o.w;\n}","name":"Image","description":"","type":"image"}]}