{"ver":"0.1","info":{"id":"Ntyyzy","date":"1662048773","viewed":88,"name":"quadratic bezier - interior test","username":"cmarot","description":"This shader shows if the number of intersection between a horizontal ray starting at p and the arc is odd or even. => useful for interior test.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","bezier","distance","interior","winding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2018 Inigo Quilez (see https://www.shadertoy.com/view/MlKcDD)\n// Copyright © 2022 Célestin Marot\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nfloat det(in vec2 a, in vec2 b) { return a.x*b.y - a.y*b.x; }\nfloat dot2(in vec2 a )          { return dot(a,a);          }\n\n\n// return a vec3(d, s, i) with:\n//    * d: the square of the minimum distance from p to the quadratic Bezier\n//    * s: a float with the same sign as the signed distance\n//    * i; 1. if the number of intersection with an horizontal ray starting at p is odd, else 0.\nvec3 sdBezier( in vec2 pos, in vec2 A, in vec2 B, in vec2 C )\n{\n    vec2 a = B - A;\n    vec2 b = A - 2.*B + C;\n    vec2 c = 2.*a;\n    vec2 d = A - pos;\n    \n    float odd = 1.;\n    // find if the number of intersection with an horizontal ray starting at p is odd\n    // [Célestin Marot'2022]\n    // intersection <=> root of  \"b.y t^2 + c.y t + d.y\" where 0<=t<=1\n    if (abs(b.y) < 0.001) { // <- branch depends on control pts only, so perf. overhead should be negligible\n        // linear case: count roots of \"c.y t + d.y\"\n        float t = -d.y / c.y; // c.y should never be 0 if A and B are distinct\n        if (t >= 0. && t <= 1. && d.x + (c.x + b.x*t) * t > 0.)\n            odd = -1.;\n    }\n    else {\n        float h = c.y*c.y - 4.*b.y*d.y;\n        if (h > 0.) {\n            h = sqrt(h);\n            vec2 t = (vec2(-h, h) - c.y) / (2.*b.y);\n            vec2 x = d.x + (c.x + b.x*t) * t;\n            vec2 i = 1. - 2. * (step(0., t) * step(-1., -t) * step(0., x));\n            odd = i.x * i.y;\n        }\n    }\n    \n    \n    // [Inigo Quilez'2018]\n    float kk = 1. / dot(b,b);\n    float kx = kk * dot(a,b);\n    float ky = kk * (2.*dot2(a) + dot(d,b)) / 3.;\n    float kz = kk * dot(d,a);\n\n    float p  = ky - kx*kx;\n    float q  = kx * (2.*kx*kx - 3.*ky) + kz;\n    float p3 = p * p * p;\n    float q2 = q * q;\n    float h  = q2 + 4.*p3;\n\n    if(h >= 0.) \n    {   // 1 root\n        h = sqrt(h);\n        vec2 x = (vec2(h, -h) - q) / 2.;\n\n        #if 0\n        // When p≈0 and p<0, h-q has catastrophic cancelation. So, we do\n        // h=√(q²+4p³)=q·√(1+4p³/q²)=q·√(1+w) instead. Now we approximate\n        // √ by a linear Taylor expansion into h≈q(1+½w) so that the q's\n        // cancel each other in h-q. Expanding and simplifying further we\n        // get x=vec2(p³/q,-p³/q-q). And using a second degree Taylor\n        // expansion instead: x=vec2(k,-k-q) with k=(1-p³/q²)·p³/q\n        if(abs(p) < 0.001)\n        {\n            float k = p3 / q;               // linear approx\n          //float k = (1. - p3/q2) * p3/q;  // quadratic approx \n            x = vec2(k, -k - q);  \n        }\n        #endif\n\n        vec2 uv = sign(x) * pow(abs(x), vec2(1. / 3.));\n        float t = clamp( uv.x + uv.y - kx, 0., 1. );\n        vec2  q = d + (c + b*t) * t;\n        return vec3(dot2(q), det(c + 2.*b*t, q), odd);\n    }\n \n    // 3 roots\n    float z = sqrt(-p);\n    float v = acos(q / (p * z * 2.)) / 3.;\n    float m = cos(v);\n    float n = sin(v) * 1.732050808;\n    vec3  t = clamp( vec3(m + m, -n - m, n - m) * z - kx, 0., 1. );\n    vec2  qx = d + (c + b * t.x) * t.x;\n    float dx = dot2(qx);\n    vec2  qy = d + (c + b * t.y) * t.y;\n    float dy = dot2(qy);\n    if( dx < dy )\n        return vec3(dx, det(c + 2.*b*t.x, qx), odd);\n    else\n        return vec3(dy, det(c + 2.*b*t.y, qy), odd);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n\tvec2 v0 = vec2(0.9)*cos(iTime*0.7 + vec2(0.0,5.0) );\n    vec2 v1 = vec2(0.9)*sin(iTime*0.15 + vec2(3.0,4.0) );\n    vec2 v2 = vec2(0.9)*cos(iTime*0.37 + vec2(2.0,0.0) );\n    \n    vec3 dsi = sdBezier(p, v0, v1, v2);\n    float d = sqrt(dsi.x) * dsi.z;\n    \n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n\tcol *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}