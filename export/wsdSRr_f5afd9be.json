{"ver":"0.1","info":{"id":"wsdSRr","date":"1571367073","viewed":357,"name":"Isometric Grid w/ Mouse Interact","username":"r3eckon","description":"Simple isometric grid rendering with correct UV space for each cell.","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["grid","isometric","tilemap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CCOUNT 4.0\n#define CELL_FILL .95  \n\nvec2 AgridID(vec2 uv)\n{\n    uv.y /=0.5;\n    \n    return vec2(floor(uv));\n}\n\nvec2 BgridID(vec2 uv)\n{\n    uv.y /= 0.5;\n    \n    return vec2(floor((uv-0.5)));\n}\n\nvec2 AgridUV(vec2 uv, float cells)\n{\n\treturn vec2(mod(uv.x, 1.0), mod(uv.y*2.0, 1.0));\n}\n\nvec2 BgridUV(vec2 uv, float cells)\n{\n\treturn vec2(mod(uv.x-0.5, 1.0), mod((uv.y*2.0)-0.5, 1.0));\n}\n\nfloat los( vec2 pos, vec2 s ) \n{\n    vec2 abspos = abs(pos - vec2(0.5,0.5));\n    return sign( abspos.x*s.y + abspos.y*s.x - s.x*s.y );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 mouseUV = iMouse.xy/iResolution.xy;\n  \n    vec2 ar = vec2(1.0, iResolution.y/iResolution.x);\n    \n    float CELLS = iTime*CCOUNT + CCOUNT;\n\n    mouseUV *= ar;\n    mouseUV *= CELLS;\n    \n    uv *= ar;\n    uv *= CELLS;\n    \n    vec2 aguv = AgridUV(uv,CELLS);\n    vec2 bguv = BgridUV(uv,CELLS);\n    \n    //Just to make circles render within cells instead of ovals\n    //aguv.y *= ar.y;\n    //aguv.y += 0.5 * ar.y;\n    \n    //bguv.y *= ar.y;\n    //bguv.y += 0.5 * ar.y;\n    \n    \n    //vec3 acol = vec3(floor(1.335 - distance(aguv - 0.5, vec2(.0,.0))));\n    //vec3 bcol = vec3(floor(1.335 - distance(bguv - 0.5, vec2(.0,.0))));\n    \n    //vec3 acol = vec3(aguv.x, aguv.y, 0.0);\n    //vec3 bcol = vec3(bguv.x, bguv.y, 0.0);\n    \n    float alos = 1.0-los(aguv, vec2(0.5*CELL_FILL));\n    float blos = 1.0-los(bguv, vec2(0.5*CELL_FILL));\n    \n    vec2 agid = AgridID(uv);\n    vec2 bgid = BgridID(uv);\n    \n    vec2 amgid = floor(AgridID(mouseUV));\n    vec2 bmgid = floor(BgridID(mouseUV));\n    \n    vec3 acol = vec3(alos);\n    vec3 bcol = vec3(blos);\n    \n    vec3 col = max(acol,bcol);\n    //vec3 col = acol;\n    \n    vec3 overlay = vec3(1.0,0.0,0.0);\n    vec3 overlay2 = vec3(0.0,1.0,0.0);\n    \n    if(agid == amgid)\n    {\n        if(alos >= 1.0)\n        \tcol*=overlay;\n    }\n    \n    if(bgid == bmgid)\n    {\n        if(blos >= 1.0)\n        \tcol*=overlay2;\n    }\n    \n    if(bgid.x < 0.0 || bgid.y < 0.0)\n    {\n        col *= 1.0-blos;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}