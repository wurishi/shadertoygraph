{"ver":"0.1","info":{"id":"fsSXWV","date":"1620996808","viewed":419,"name":"Fast Bloom","username":"Hyeve","description":"A simple bloom shader I made here as a way to understand how to do it for other uses.","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["2d","bloom"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Threshold 0.4\n#define BloomDist 0.2\n#define BloomIters 32.;\n\nfloat luma(vec4 col)\n{\n    return (col.r + col.g + col.b) / 3.;\n}\n\nvec4 textureB(sampler2D sampler, vec2 uv)\n{\n    vec4 col = texture(sampler,uv);\n    col *= step(Threshold, luma(col));\n    return col;\n}\n\nvec4 bloom(vec2 uv)\n{\n    float blurDist = BloomDist;\n    float halfBlurIters = BloomIters;\n    \n    \n    float blurStep = blurDist/halfBlurIters;\n    \n    vec4 col1 = vec4(0.);\n    vec4 col2 = vec4(0.);\n    \n    vec2 uX = vec2(1, 0);\n    vec2 uY = vec2(0,1);\n\n    for(float i = 0.; i < halfBlurIters; i++)\n    {\n        float offset = blurStep * (i - halfBlurIters/2.);\n        col1 += textureB(iChannel0, uv + uX * offset);\n    }\n    \n    col1 /=  halfBlurIters/4.;\n    \n    for(float i = 0.; i < halfBlurIters; i++)\n    {\n        float offset = blurStep * (i - halfBlurIters/2.);\n        col2 += textureB(iChannel0, uv + uY * offset);\n    }\n    \n    col2 /= halfBlurIters/4.;\n    \n    return (col1 + col2)/8.;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col = texture(iChannel0,uv);\n\n    if(fragCoord.x < iMouse.x)\n    {\n        col += bloom(uv);\n    }\n\n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    float bright1 = 1. - smoothstep(0.4,0.41, distance(uv, vec2(-0.39, 0.)));\n    float bright2 = 1. - smoothstep(0.4,0.41, distance(uv, vec2(0.39, 0.)));\n    \n    fragColor = vec4(bright1, bright2, 0.2,0);\n}","name":"Buffer A","description":"","type":"buffer"}]}