{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"cubemap","id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"code":"// Originally created by inigo quilez - iq/2013\n// recolored and tweaked by lritter\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nvec3 noise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix( hash3(p+0.0), hash3(p+1.0),f);\n}\n\n\nmat4 rotationMat( in vec3 xyz )\n{\n    vec3 si = sin(xyz);\n    vec3 co = cos(xyz);\n\n\treturn mat4( co.y*co.z,                co.y*si.z,               -si.y,       0.0,\n                 si.x*si.y*co.z-co.x*si.z, si.x*si.y*si.z+co.x*co.z, si.x*co.y,  0.0,\n                 co.x*si.y*co.z+si.x*si.z, co.x*si.y*si.z-si.x*co.z, co.x*co.y,  0.0,\n\t\t\t     0.0,                      0.0,                      0.0,        1.0 );\n}\n\nconst float s = 1.1;\n\nmat4 mm;\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\nvec3 map( vec3 p )\n{\n    vec3 op = p;\n    //float pl = p.z;\n    \n\tp = p + vec3(1.0,0.0,0.0);\n    \n    float dotp = dot(p,p);\n    p = p / dotp;\n\n    p = p - vec3(1.0,0.0,0.0);\n    \n    float kk = 1.0;\n\n\tfloat k = 1.0;\n\tfloat m = 1e10;\n\tfor( int i=0; i<20; i++ ) \n\t{\n        float dp = dot(p,p);\n\t    p = p / dp;\n\t\tm = min( m, dot(p,p)/(k*k) );\n\t\tp = (mm*vec4((abs(p)),1.0)).xyz;\n\t\tk*= s;\n        kk *= dp;\n\t}\n\t\n\n\tfloat d = sdTorus(p,vec2(0.5,0.1))/k;\n    \n    d *= kk * dotp;\n\t\n\tfloat h = p.z - 0.35*p.x;\n    \n    //d = max(d, pl);\n\t\n\treturn vec3( d, m, h );\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n    float t = 0.0;\n    for( int i=0; i<100; i++ )\n\t{\n        vec3 res = map( ro+rd*t );\n        if( res.x<0.0002 ) return vec3(t,res.yz);\n        t += res.x;\n\t\tif( t>9.0 ) break;\n    }\n\n    return vec3( -1.0 );\n}\n\nvec3 calcNormal( in vec3 p, float w )\n{\n    vec2 e = vec2(-1., 1.)*w;   \n    float t1 = map(p + e.yxx).x, t2 = map(p + e.xxy).x;\n    float t3 = map(p + e.xyx).x, t4 = map(p + e.yyy).x;\n\n    //curv = .125/(e.x*e.x) *(t1 + t2 + t3 + t4 - 4. * map(p));\n    return normalize(e.yxx*t1 + e.xxy*t2 + e.xyx*t3 + e.yyy*t4);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n        float h = map(ro + rd*t).x;\n\t\th = max( h, 0.0 );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.001, 0.1 );\n\t\tif( res<0.01 || t>6.0 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    for( int aoi=0; aoi<16; aoi++ )\n    {\n\t\tvec3 aopos = -1.0+2.0*hash3(float(aoi)*213.47);\n\t\taopos *= sign( dot(aopos,nor) );\n\t\taopos = pos + nor*0.01 + aopos*0.04;\n        float dd = clamp( map( aopos ).x*4.0, 0.0, 1.0 );\n        totao += dd;\n    }\n\ttotao /= 16.0;\n\t\n    return clamp( totao*totao*50.0, 0.0, 1.0 );\n}\n\nvec3 physhue2rgb(float hue, float ratio) {\n    return smoothstep(\n        vec3(0.0),vec3(1.0),\n        abs(mod(hue + vec3(0.0,1.0,2.0)*(1.0/ratio),1.0)*2.0-1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy/iResolution.xy;\n\n    // animation\t\n\tfloat time = iTime;\n\ttime += 15.0*smoothstep(  15.0, 25.0, iTime );\n\ttime += 20.0*smoothstep(  65.0, 80.0, iTime );\n\ttime += 35.0*smoothstep( 105.0, 135.0, iTime );\n\ttime += 20.0*smoothstep( 165.0, 180.0, iTime );\n\ttime += 40.0*smoothstep( 220.0, 290.0, iTime );\n\ttime +=  5.0*smoothstep( 320.0, 330.0, iTime );\n\tfloat time1 = (time-10.0)*1.5 - 167.0;\n\tfloat time2 = time;\n\t\n    mm = rotationMat( vec3(0.4,0.1,3.4) + \n                      0.15*sin(0.1*vec3(0.40,0.30,0.61)*time1) + \n                      0.15*sin(0.1*vec3(0.11,0.53,0.48)*time1));\n    mm[0].xyz *= s;\t\n    mm[1].xyz *= s;\n    mm[2].xyz *= s;\t\n\tmm[3].xyz = vec3( 0.15, 0.05, -0.07 ) + 0.05*sin(vec3(0.0,1.0,2.0) + 0.2*vec3(0.31,0.24,0.42)*time1);\n\t\n    // camera\n\tfloat an = 1.0 + 0.1*time2 - 6.2*m.x;\n\tfloat cr = 0.15*sin(0.2*time2);\n    vec3 ro = (2.4 + 0.6*smoothstep(10.0,20.0,time2))*vec3(sin(an),0.25,cos(an));\n    vec3 ta = vec3( 0.0, 0.0 + 0.13*cos(0.3*time2), 0.0 );\n\tta += 0.05*noise(  0.0 + 1.0*time );\n\tro += 0.05*noise( 11.3 + 1.0*time );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(cr),cos(cr),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 3.0*ww );\n\n\t// raymarch\n    vec3 tmat = intersect(ro,rd);\n\t\n\t// shade\n    vec3 col = vec3(0.0);\n    if( tmat.z>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos, 0.005);\n\t\tvec3 sor = calcNormal(pos, 0.010);\n\n        // material\n\t\tvec3 mate = vec3(1.0);\n\t\tmate = mix(physhue2rgb(tmat.z*3.0, 3.0),vec3(1.0),0.2);\n        mate.x *= 1.15;\n\n\t\t// lighting\n\t\tfloat occ = 1.1*calcAO( pos, nor );\n\t\tocc *= 0.75 + 0.25*clamp(tmat.y*400.0,0.0,1.0);\n\t\t\n\t\t// diffuse\n\t\tcol = vec3(0.0);\n\t\tfor( int i=0; i<32; i++ )\n\t\t{\n\t\t\t//vec3 rr = normalize(-1.0 + 2.0*texture( iChannel2, vec2((0.5+float(i)),0.5)/256.0,-100.0).xyz);\n\t\t\tvec3 rr = normalize(-1.0 + 2.0*hash3(float(i)*123.5463));\n\t\t\trr = normalize( nor + 7.0*rr );\n\t\t\trr = rr * sign(dot(nor,rr));\t\t\t\t\t\t\t  \n\t\t\tfloat ds = occ;//softshadow( pos, rr, 0.01, 32.0 );\n            col += pow( texture( iChannel0, rr ).xyz, vec3(2.2) ) * dot(rr,nor) * ds;\n\t\t}\n        col /= 32.0;\t\t\t\t\t\t\t\t\t\t\n\n\t\tcol *= 1.8;\n\n        // subsurface\t\t\n\t\tcol *= 1.0 + 1.0*vec3(1.0,0.6,0.1)*pow(clamp(1.0+dot(rd,sor),0.0,1.0),2.0)*vec3(1.0);\n\t\t\n        // specular\t\t\n\t\tfloat fre = pow( clamp(1.0+dot(rd,nor),0.0,1.0), 5.0 );\n\t\tvec3 ref = reflect( rd, nor );\n\t\tfloat rs = softshadow( pos, ref, 0.01, 32.0 );\n        col += 1.8 * (0.04 + 12.0*fre) * occ * pow( texture( iChannel0, ref ).xyz, vec3(2.0) ) * rs;\n\n        col *= mate;\n    }\n\telse\n\t{\n        // background\t\t\n\t\tcol = pow( texture( iChannel0, rd ).xyz, vec3(2.2) );\n\t}\n\n\t// gamma\n\tcol = pow( clamp( col, 0.0, 1.0 ), vec3(0.45) );\n\n\t// vigneting\n\tcol *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    fragColor = vec4( col, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"llf3z2","date":"1423325654","viewed":458,"name":"Monster Festival","username":"paniq","description":"A remix of a classic, folding a torus instead of a sphere plus using an inverse transform","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["mattdamon"],"hasliked":0,"parentid":"","parentname":""}}