{"ver":"0.1","info":{"id":"dlcyz2","date":"1699429896","viewed":21,"name":"学习raymarch2","username":"wangqiuyan","description":"学习raymarch2","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_DIST 100.\n#define MAX_STEP 100\n#define SURFACE_DIST .001\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float f)\n{\n    vec3 ab=b-a;\n    vec3 ap=p-a;\n    \n    float t=dot(ab,ap)/dot(ab,ab);\n    t=clamp(t,0.,1.);\n    \n    vec3 c = a + t * ab;\n    \n    vec3 cp=p-c;\n    return length(cp)-f;\n    \n}\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float f)\n{\n    vec3 ab=b-a;\n    vec3 ap=p-a;\n    \n    float t=dot(ab,ap)/dot(ab,ab);\n   // t=clamp(t,0.,1.);\n    \n    vec3 c = a + t * ab;\n    \n    vec3 cp=p-c;\n    float x= length(cp)-f;\n    float y = (abs(t-0.5)-0.5)*length(ab);\n    float e=length(max(vec2(x,y),0.0));\n    return e;\n    \n}\n\nfloat sdTorus(vec3 p, vec2 r){\n    float y=p.y;\n    float x=length(p.xz)-r.x;\n    float d=length(vec2(x,y))-r.y;\n    \n    return d;\n}\n\nfloat sdBox(vec3 p, vec3 s){\n    vec3 q=abs(p)-s;\n    \n    return length(max(q,0.0))-0.02;\n}\nfloat getdist(vec3 p)\n{\n    vec4 sphere=vec4(0.,1.,6.,1.0);\n    float spheredist=length(p-sphere.xyz)-sphere.w;\n    float capsuledist=sdCapsule(p,vec3(0,1.,6),vec3(1,2.5,7),0.3);\n    float torusdist=sdTorus(p-vec3(0.0,0.5,5.),vec2(1.5,0.3));  \n    float boxdist=sdBox(p-vec3(-3.0,0.5,5.),vec3(0.5));\n    float cylinderdist=sdCylinder(p,vec3(2,0.5,5.5),vec3(3.5,0.5,6),0.3);\n    \n    \n    float planedist=p.y;\n    float dis=min(capsuledist,planedist);\n    dis=min(dis,torusdist);\n    dis=min(dis,boxdist);\n    dis=min(dis,cylinderdist);\n    return dis;\n}\n\nfloat raymarching(vec3 ro, vec3 rd)\n{\n    float d0=0.0;\n    for(int i=0;i<MAX_STEP;i++)\n    {\n        vec3 p=ro+d0*rd;\n        float dis=getdist(p);\n        d0+=dis;\n        if(dis<SURFACE_DIST||d0>MAX_DIST)\n            break;       \n    }\n    return d0;\n}\nvec3 getNormal(vec3 p)\n{\n    vec2 e=vec2(0.01,0.0);\n    float d=getdist(p);\n    vec3 n=d-vec3(\n        getdist(p-e.xyy),\n        getdist(p-e.yxy),\n        getdist(p-e.yyx)\n    );\n    return normalize(n);\n}\nfloat getlight(vec3 p){\n    vec3 lightPos=vec3(0.,5.,6.);\n \n    lightPos.xz+=vec2(sin(iTime),cos(iTime))*2.;\n    vec3 l=normalize(lightPos-p);\n  \n    vec3 n=getNormal(p);\n    float dif=dot(n,l);\n    \n    /*\n    //简单粗暴的方式\n    if(length(lightPos-p)>raymarching(p+n*SURFACE_DIST*2.,l))\n    {        \n       \n        dif*=0.1;\n    } */\n    //softshadow\n    float shadow=1.;\n    float t=0.02,maxt=2.5,k=8.;\n    for(int i=0;i<256&&t<maxt;i++)\n    {\n        float h=getdist(p+l*t);\n        if(h<0.001)\n        {\n            shadow=0.;\n            break;\n        }\n        shadow=min(shadow,k*h/t);\n        t+=h;\n    }\n    dif*=shadow;\n      \n   // dif=clamp(dif,-10.,1.);\n    return dif;    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (1.*fragCoord-0.5*iResolution.xy)/iResolution.y;\n\n    // Time varying pixel color\n    vec3 col =vec3(0.0);\n    \n    vec3 ro=vec3(0.,2.,0.);\n    vec3 rd=normalize(vec3(uv.x,uv.y-0.2,1.));\n    float d=raymarching(ro,rd);\n  //  d/=6.;\n   // col=vec3(d);\n    \n    vec3 p=ro+rd*d;    \n    \n    float dif=getlight(p);\n    \n    \n    col=vec3(dif);\n    //col=getNormal(p);\n    //col=vec3(raymarching(ro,rd)/6.);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}