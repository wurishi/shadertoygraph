{"ver":"0.1","info":{"id":"4fX3W2","date":"1703510016","viewed":40,"name":"Shader Learning Dot() Challenge","username":"divyanshXg","description":"this is shader contains the code of the dot() function challenge of the Built-in Function Module in shader-learnig.com","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n  vec2 ratio = vec2(iResolution.x / iResolution.y, 1.0);\n\n  vec2 p0 = vec2(0.5, 0.75) * ratio; // apex\n  vec2 p1 = vec2(0.5, 0.0) * ratio;  // apex projection\n  vec2 p2 = uv * ratio;              // current point\n\n  vec2 dir1 = p1 - p0; // perpendicular to the base\n  vec2 dir2 = p2 - p0; // from apex to current point\n  \n  vec2 n1 = normalize(dir1);\n  vec2 n2 = normalize(dir2);\n\n  float t = dot(n1, n2);   // get cosine\n  float d = dot(n1, dir2); // get distance\n  \n  float red = step(0.5, t);    // check angle\n  red *= (1.0 - step(0.5, d)); // check distance\n\n\n    // Output to screen\n    fragColor = vec4(red,0.,0.,1.0);\n}","name":"Image","description":"","type":"image"}]}