{"ver":"0.1","info":{"id":"4dVfDh","date":"1528668680","viewed":146,"name":"Devil Falling","username":"rkibria","description":"Image https://openclipart.org/detail/234057/falling-devil converted to 1-bit BMP file and imported using a Python script https://github.com/rkibria/img2shadertoy\n","likes":2,"published":1,"flags":40,"usePreview":0,"tags":["sound","bitmap","generated","multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = texture( iChannel0, uv ).xyz;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec2 bitmap_size = vec2(160, 214);\nconst int[] palette = int[] (\n0x00ffffff,\n0x00000000\n);\nconst int[] rle = int[] (\n0xe00100ae,\n0x0100910f,\n0x009103f8,\n0x9101fe01,\n0x91ff0000,\n0xffc00100,\n0x7800008b,\n0xf8010084,\n0x00008bff,\n0x010084f8,\n0x008bffff,\n0x0003f007,\n0xffffc000,\n0x08008bff,\n0x00003ff0,\n0xfffffff8,\n0x03008a01,\n0xa037ffe0,\n0x0705ff83,\n0xfffb0000,\n0x0000850f,\n0x00ff8680,\n0x00ff831f,\n0x8c00867f,\n0x850300ff,\n0x8bf80000,\n0x850f00ff,\n0x8bc00000,\n0x861f00ff,\n0x8afe0000,\n0x863f00ff,\n0x89e00000,\n0x871f00ff,\n0x89c00000,\n0x883f00ff,\n0x88fe0000,\n0x887f00ff,\n0x89f00000,\n0x000088ff,\n0x02ff87c0,\n0x860fff4f,\n0x00060200,\n0x02ff86fe,\n0x863fffef,\n0x000e0500,\n0xf07ffffc,\n0x7f00ff85,\n0x1e0d0086,\n0x1ffff800,\n0xfffffe10,\n0xffffefff,\n0x0d008507,\n0xffe0003e,\n0xfff8ff8f,\n0x9ff7ffff,\n0x00850fff,\n0xc01ffe0d,\n0xe7ffffff,\n0xf7ffffff,\n0x853fffc7,\n0x7ffc0d00,\n0x1fffff00,\n0xffffff80,\n0x7fb5fff7,\n0xfc0d0085,\n0xfffe01ff,\n0xfffe003f,\n0x79fffbff,\n0x0e0085ff,\n0xf807fffe,\n0xf0ffffff,\n0xfffbffff,\n0x8401ffff,\n0xffff0e00,\n0xfffff007,\n0xffffc7ff,\n0xfffffff9,\n0x0f008303,\n0x1fffff80,\n0xfffffcc0,\n0xfdffff3f,\n0x07ffffff,\n0xc00f0083,\n0x003fffff,\n0xfffffffe,\n0x3fff7ffc,\n0x830700fe,\n0xffe00400,\n0x8301ffff,\n0x9ff106ff,\n0x003f97ff,\n0x04008306,\n0xfffffff0,\n0x06ff839f,\n0xffffcfe7,\n0x8304001f,\n0x87f80000,\n0xe3cf04ff,\n0x851fffff,\n0x87f80000,\n0xfd9f04ff,\n0x850fff3f,\n0x88fc0000,\n0x9ff803ff,\n0x008501ff,\n0xff88fc00,\n0x7fcff302,\n0xfc000086,\n0xcf02ff88,\n0x00863fe7,\n0xff88fe00,\n0x0ff73f02,\n0xfe000086,\n0x7f02ff88,\n0x008601f8,\n0xff89fe00,\n0x00877800,\n0xff89fe00,\n0x00873300,\n0xff89fe00,\n0x00870f00,\n0xff89fc00,\n0x00871f00,\n0xff89fc00,\n0x00871f00,\n0xff89fc00,\n0x00873f00,\n0xff89fc00,\n0x00877f00,\n0xff8afc00,\n0xf8000087,\n0x0300ff8a,\n0xf8000086,\n0x0700ff8a,\n0xf8000086,\n0x0f00ff8a,\n0xf0000086,\n0x3f00ff8a,\n0xf0040086,\n0xc0ffffff,\n0x7f00ff86,\n0xc0040086,\n0xe03fffff,\n0x0086ff87,\n0xffff8004,\n0xff87e01f,\n0x00850100,\n0xffff8004,\n0xff87e41f,\n0x00850700,\n0xffff8004,\n0xff87e70f,\n0x00850f00,\n0xffff8004,\n0xff87e787,\n0x00863f00,\n0xc7ffdf03,\n0x00ff87f7,\n0x0300867f,\n0xfbe3ff8f,\n0x0086ff88,\n0xf9fe0603,\n0x00ff88fb,\n0x02008603,\n0x88fdfdf8,\n0x860700ff,\n0xfef00200,\n0x00ff88fc,\n0x0200861f,\n0x88fe7f70,\n0x863f00ff,\n0x7f800100,\n0x7f00ff89,\n0xc0010086,\n0x86ff8a3f,\n0xbfe00100,\n0x0100ff8a,\n0xf0010085,\n0x00ff8a9f,\n0x01008501,\n0xff8adff8,\n0x00850300,\n0xffdffc05,\n0x86f0007f,\n0x850700ff,\n0xfffe0500,\n0xe3f03fff,\n0x0700ff86,\n0xff050085,\n0xff9fffef,\n0x00ff8687,\n0x0700840f,\n0xffefff80,\n0x000fffcf,\n0x0f00ff85,\n0xe0080084,\n0xe7ffefff,\n0xf8001fff,\n0x1f00ff84,\n0xf0080084,\n0xf67fefff,\n0xf0007fff,\n0x1f00ff84,\n0xf8080084,\n0xf3bfefff,\n0xf000ffff,\n0x3f00ff84,\n0xfc080084,\n0xfbdfefff,\n0xf001ffff,\n0x3f00ff84,\n0xff080084,\n0xf9ffe7ff,\n0xb007ffff,\n0x3f00ff84,\n0x80090083,\n0xfff7ffff,\n0x1ffffffd,\n0x00ff8470,\n0x0a00837f,\n0xf7ffffe0,\n0xfffffcff,\n0x83fef07f,\n0x837f00ff,\n0xfff00a00,\n0xfefff3ff,\n0xf0ffffff,\n0x00ff83fd,\n0x0a00837f,\n0xf3fffff8,\n0xfffffe7f,\n0x84fbf8ff,\n0x040083ff,\n0xf9fffffc,\n0x00ff837f,\n0x83ff85f1,\n0xfffe0400,\n0x8abff9ff,\n0x040083ff,\n0xf8ffffff,\n0x08ff8abf,\n0x80000000,\n0xfcffffff,\n0x08ff8adf,\n0x80000000,\n0xfcffffff,\n0x0cff86df,\n0xfffffff7,\n0xc0000001,\n0xfcffffff,\n0x08ff8acf,\n0xe0000001,\n0xfeffffff,\n0x0cff86ef,\n0xffffffef,\n0xe0000001,\n0xfe7e00ff,\n0x0cff86e7,\n0xffffffef,\n0xf0000003,\n0xff78003f,\n0x0aff8af7,\n0xf0000003,\n0xff00000f,\n0x84bffff7,\n0xffdf0eff,\n0x0003ffff,\n0x0003f000,\n0xfffbff80,\n0x0bff887f,\n0xf0000003,\n0xff800001,\n0xfe7ffffb,\n0x9f0aff83,\n0x07ffffff,\n0x00f00000,\n0xff838000,\n0xff83fe00,\n0xffff9f1e,\n0x000007ff,\n0x80000070,\n0xfffffdff,\n0xfffefffc,\n0xffff9fff,\n0x000007ff,\n0x80000070,\n0xf90fff83,\n0xfffffe3f,\n0xffffff8f,\n0x70000007,\n0x83c00000,\n0x1ff345ff,\n0x8ffffffe,\n0x07ffffff,\n0x00600000,\n0xfdffc000,\n0x0fe7ffff,\n0x07ffffff,\n0x07ffffff,\n0x00400000,\n0x39ffe000,\n0x07cfffc0,\n0x07ffffff,\n0x0ffffffe,\n0x00400000,\n0x39ffe000,\n0x03ffff00,\n0x03ffffff,\n0x0ffffffe,\n0xe00e0084,\n0xfc0031ff,\n0xffff83ff,\n0xfffe03ff,\n0x00840fff,\n0x00fff00e,\n0x83fff000,\n0x01ffffff,\n0x0ffffffc,\n0xf00e0084,\n0xc00000ff,\n0xffff87ff,\n0xfffc01ff,\n0x00840fff,\n0x00fff00e,\n0x87ff0000,\n0x00ffffff,\n0x0ffffffc,\n0xf80e0084,\n0x000000ff,\n0xffffcffc,\n0xfff800ff,\n0x00840fff,\n0x00fff80e,\n0xfff00000,\n0x007fffff,\n0x0ffffff8,\n0xfc0e0084,\n0x0000007f,\n0xffffffc0,\n0xfff0007f,\n0x00840fff,\n0x837ffc01,\n0xfffe0800,\n0xf0003fff,\n0x841fffff,\n0x7ffc0100,\n0xe0080083,\n0x001fffff,\n0x1fffffe0,\n0xfe010084,\n0x0800837f,\n0x1fffffe0,\n0xffffe000,\n0x0100841f,\n0x00837ffe,\n0xffffe008,\n0xffe0000f,\n0x00841fff,\n0x837ffe01,\n0xfff00800,\n0xc0000fff,\n0x841fffff,\n0x3fff0100,\n0xf0080083,\n0x0007ffff,\n0x1fffffc0,\n0xff010084,\n0x0800833f,\n0x07fffff0,\n0xffff8000,\n0x0100841f,\n0x00831fff,\n0xfffff008,\n0xff800003,\n0x00841fff,\n0x831fff01,\n0xfff00800,\n0x000001ff,\n0x841fffff,\n0x1fff0100,\n0xf8080083,\n0x0001ffff,\n0x1fffff80,\n0xff010084,\n0x0800830f,\n0x00fffff8,\n0xffffe000,\n0x0200831f,\n0x830fff80,\n0xfff80800,\n0xf80000ff,\n0x831fffff,\n0xff800200,\n0x08008307,\n0x007ffff8,\n0xfffdff00,\n0x0200831f,\n0x8307ff80,\n0xfffc0800,\n0xffe0007f,\n0x831fffff,\n0xff800200,\n0x08008303,\n0x803ffffc,\n0xfffbffff,\n0x0200831f,\n0x8303ffc0,\n0x86fc0000,\n0x831f00ff,\n0xffc00200,\n0x00008301,\n0x00ff86fc,\n0x0200831f,\n0x8301ffc0,\n0x86fc0000,\n0x833f00ff,\n0xffc00100,\n0xfe000084,\n0x3f00ff86,\n0xc0010083,\n0x0000847f,\n0x00ff86fe,\n0x0100833f,\n0x00847fe0,\n0x0f03ff84,\n0x833ffffc,\n0x3fc00100,\n0xff840084,\n0xfff00303,\n0x0100833f,\n0x00843fe0,\n0x0003ff84,\n0x833fffe0,\n0x1fe00100,\n0x80000083,\n0x3f04ff83,\n0x3fffe000,\n0xe0010083,\n0x0000831f,\n0x04ff8380,\n0xffc0001f,\n0x0100833f,\n0x00830ff0,\n0xff838000,\n0xc0000304,\n0x00833fff,\n0x830ff001,\n0x83c00000,\n0x000004ff,\n0x831fffc0,\n0x07f80100,\n0x80090083,\n0x7fffffff,\n0xff800000,\n0x0100833f,\n0x008307f8,\n0xffff8009,\n0x00001fff,\n0x837fff80,\n0x03fc0100,\n0x80090083,\n0x03ffffff,\n0xfe000000,\n0x0100837f,\n0x008403fc,\n0x7fffff02,\n0xfc010083,\n0x0100837f,\n0x008403fe,\n0x1ffffe02,\n0xff010083,\n0x0100837f,\n0x008403fe,\n0x03fffe02,\n0xff010083,\n0x010083ff,\n0x008403ff,\n0x84fffc01,\n0x7fff0700,\n0x80000000,\n0x008403ff,\n0x841ff801,\n0xffff0700,\n0xc0000000,\n0x008403ff,\n0x8401e001,\n0xffff0700,\n0xe0000000,\n0x008b03ff,\n0x00ffff07,\n0xfff00000,\n0x07008b03,\n0x0000ffff,\n0x07fff800,\n0xff07008b,\n0x000000ff,\n0x8b07fffc,\n0xffff0700,\n0xfe000001,\n0x008b0fc1,\n0x01ffff07,\n0x00ff0000,\n0x07008b0f,\n0x0001ffff,\n0x1e007f80,\n0xff07008b,\n0x800001ff,\n0x8b1c007f,\n0xffff0700,\n0x3fc00001,\n0x008b1800,\n0x01fffe05,\n0x8d3fe000,\n0xfffe0500,\n0x7ff00003,\n0xfc05008d,\n0x380003ff,\n0x06008d67,\n0x0003fffc,\n0x8c01c71c,\n0xfffc0600,\n0x860c0003,\n0x05008c01,\n0x0003fff8,\n0x008d0e06,\n0x03fff805,\n0x8d080200,\n0xfff80200,\n0x02009003,\n0x9003fff8,\n0xfff80200,\n0x02009001,\n0x9001fff0,\n0xfff00200,\n0x02009001,\n0x9001fff0,\n0xfff00200,\n0x02009001,\n0x9001fff0,\n0xfff00200,\n0x01009001,\n0x0091ffe0,\n0x91ffe001,\n0xffe00100,\n0xe0010091,\n0x010091ff,\n0x0091ffe0,\n0x91ffe001,\n0xffe00100,\n0xe0010091,\n0x010091ff,\n0x00917fe0,\n0x917fe001,\n0x7fe00100,\n0xe0010091,\n0x0100917f,\n0x00917ff0,\n0x913ff001,\n0x3ff00100,\n0xf0010091,\n0x0100913f,\n0x00913ff0,\n0x913ff001,\n0x3ff00100,\n0xf0010091,\n0x0100913f,\n0x00917ff0,\n0x917ff001,\n0x7ff00100,\n0xf0010091,\n0x010091ff,\n0x0091fff0,\n0x91fff001,\n0xfff00100,\n0xf0020091,\n0x009001ff,\n0x03fff802,\n0xf8020090,\n0x009003ff,\n0x03fff802,\n0xf8020090,\n0x009003ff,\n0x03fff802,\n0xf8020090,\n0x009003ff,\n0x01fff802,\n0xf8020090,\n0x009001ff,\n0x01fff002,\n0xf0010090,\n0x010091ff,\n0x0091ffe0,\n0x917de001,\n0x7dc00100,\n0x80010091,\n0x00009239\n);\n\nconst int rle_len_bytes = rle.length() << 2;\n\nint get_rle_byte( in int byte_index )\n{\n\tint long_val = rle[ byte_index >> 2 ];\n\treturn ( long_val >> ( ( byte_index & 0x03 ) << 3 ) ) & 0xff;\n}\n\nint get_uncompr_byte( in int byte_index )\n{\n\tint rle_index = 0;\n\tint cur_byte_index = 0;\n\twhile( rle_index < rle_len_bytes )\n\t{\n\t\tint cur_rle_byte = get_rle_byte( rle_index );\n\t\tbool is_sequence = int( cur_rle_byte & 0x80 ) == 0;\n\t\tint count = ( cur_rle_byte & 0x7f ) + 1;\n\n\t\tif( byte_index >= cur_byte_index && byte_index < cur_byte_index + count )\n\t\t{\n\t\t\tif( is_sequence )\n\t\t\t{\n\t\t\t\treturn get_rle_byte( rle_index + 1 + ( byte_index - cur_byte_index ) );\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\treturn get_rle_byte( rle_index + 1 );\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif( is_sequence )\n\t\t\t{\n\t\t\t\trle_index += count + 1;\n\t\t\t\tcur_byte_index += count;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\trle_index += 2;\n\t\t\t\tcur_byte_index += count;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n\nint getPaletteIndexXY( in ivec2 fetch_pos )\n{\n\tint palette_index = 0;\n\tif( fetch_pos.x >= 0 && fetch_pos.y >= 0\n\t\t&& fetch_pos.x < int( bitmap_size.x ) && fetch_pos.y < int( bitmap_size.y ) )\n\t{\n\t\tint uncompr_byte_index = fetch_pos.y * ( int( bitmap_size.x ) >> 3 )\n\t\t\t+ ( fetch_pos.x >> 3);\n\t\tint uncompr_byte = get_uncompr_byte( uncompr_byte_index );\n\n\t\tint bit_index = fetch_pos.x & 0x07;\n\t\tpalette_index = ( uncompr_byte >> bit_index ) & 1;\n\t}\n\treturn palette_index;\n}\n\n\nint getPaletteIndex( in vec2 uv )\n{\n\tint palette_index = 0;\n\tivec2 fetch_pos = ivec2( uv * bitmap_size );\n\tpalette_index = getPaletteIndexXY( fetch_pos );\n\treturn palette_index;\n}\n\nvec4 getColorFromPalette( in int palette_index )\n{\n\tint int_color = palette[ palette_index ];\n\treturn vec4( float( int_color & 0xff ) / 255.0,\n\t\t\t\tfloat( ( int_color >> 8 ) & 0xff) / 255.0,\n\t\t\t\tfloat( ( int_color >> 16 ) & 0xff) / 255.0,\n\t\t\t\t0 );\n}\n\nvec4 getBitmapColor( in vec2 uv )\n{\n\treturn getColorFromPalette( getPaletteIndex( uv ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if( iFrame == 0)\n    {\n        vec2 uv = fragCoord / bitmap_size;\n        fragColor = getBitmapColor( ( uv + vec2(-1.0, -0.1) ) * 0.9 );\n    }\n    else\n    {\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        vec3 col = texture( iChannel0, uv ).xyz;\n        fragColor = vec4(col,1.0);\n    }\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float start_time = 3.0;\n    if( iTime <= start_time )\n    {\n        vec2 uv = fragCoord.xy / iResolution.xy;\n        vec3 col = texture( iChannel0, uv ).xyz;\n        fragColor = vec4(col,1.0);\n    }\n    else\n    {\n        float t = iTime - start_time;\n\n        vec2 uv = fragCoord.xy / iResolution.xy;\n\n        float rt = t * 0.3;\n        mat2 rmt = mat2(cos(rt), -sin(rt), sin(rt), cos(rt));\n    \n        vec3 current = texture( iChannel1, uv ).xyz;\n        vec2 mid = uv - vec2(0.5);\n        mid = rmt * mid;\n\n        vec3 col = \n            texture( iChannel1,\n                    uv + 0.05 * mid\n                   ).xyz;\n\n        const float zoomslow = 5.0;\n        fragColor = vec4( 0.99 * ( zoomslow * current + 1.0 * col ) / (zoomslow + 1.0), 1.0);\n    }\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"vec2 mainSound( in int samp, float time )\n{\n    float a = sin(100.0 * time + 0.1)\n        + sin(300.0 * time + 0.2)\n        + sin(500.0 * time + 0.3)\n        + sin(700.0 * time + 0.4)\n        ;\n    \n    return vec2( a * 2.5 / time );\n}","name":"Sound","description":"","type":"sound"}]}