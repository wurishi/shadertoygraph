{"ver":"0.1","info":{"id":"fdVcDG","date":"1655505195","viewed":154,"name":"Cubemap Skybox","username":"modern_shinobi","description":"Simple skybox and camera transform","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["cubemapskybox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n\nstruct Ray{\n    vec3 dir;\n    vec3 origin;\n};\n\nmat3 Rotation(vec3 euler){\n\n    // Deg to Rad\n    euler *= PI / 180.0;\n\n    // Rotation around X - pitch\n    float c = cos(euler.x);\n    float s = sin(euler.x);\n    mat3 Rx = mat3(\n        vec3(1, 0, 0),\n        vec3(0, c, -s),\n        vec3(0, s, c)\n    );\n\n    // Rotation around Y - yaw\n    c = cos(euler.y);\n    s = sin(euler.y);\n    mat3 Ry = mat3(\n        vec3(c, 0, s),\n        vec3(0, 1, 0),\n        vec3(-s, 0, c)\n    );\n\n    // Rotation around Z - roll\n    c = cos(euler.z);\n    s = sin(euler.z);\n    mat3 Rz = mat3(\n        vec3(c, -s, 0),\n        vec3(s, c, 0),\n        vec3(0, 0, 1)\n    );\n    \n    return Rz*Ry*Rx;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n\t // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    \n    // Camera\n    vec3 cameraPos = vec3(0,1,-1);\n    Ray ray;\n    ray.origin = cameraPos;\n    ray.dir = normalize(vec3(cameraPos.x+uv.x, cameraPos.y+uv.y, 0) - cameraPos);\n    \n    // Rotate camera\n    vec3 rotAngles = vec3(10.*sin(iTime), iTime*10., 0);\n    mat3 R = Rotation(rotAngles);\n    ray.dir = R * ray.dir;\n    // Translate camera\n    vec3 translate = vec3(0,0,0);\n    ray.origin += translate;\n    \n    fragColor = texture(iChannel1, ray.dir);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"float max3(vec3 rd) {\n   return max(max(rd.x, rd.y), rd.z);\n}\n\nvoid mainCubemap( out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir )\n{\n    vec3 rd = abs(rayDir);\n    \n    vec3 col = vec3(0);\n    if (max3(rd) == rd.x) col = vec3(1, 0, 0);\n    if (max3(rd) == rd.y) col = vec3(0, 1, 0);\n    if (max3(rd) == rd.z) col = vec3(0, 0, 1);\n    \n    fragColor = vec4(col,1.0); // Output cubemap\n}","name":"Cube A","description":"","type":"cubemap"}]}