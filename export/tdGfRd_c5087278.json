{"ver":"0.1","info":{"id":"tdGfRd","date":"1607714441","viewed":852,"name":"Unoptimized fog","username":"omegasbk","description":"I quickly mashed this up together after I got the idea. Super badly optimized and written, will fix it some day, or maybe not :) ","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["fog","smoke"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Created by Darko (omegasbk) \n// youtube.com/c/darkosupe\n\nstruct Camera\n{\n    vec3 position;\n    float focalDistance;\n};    \n\nstruct Plane \n{\n    vec3 position;\n    vec3 normal;\n    vec3 color;\n};\nstruct PointLight\n{\n    vec3 position;\n    float intensity;\n};\n\nPlane plane = Plane(\n    vec3(0., 0., 1.), \n    vec3(0., 0., -1.), \n    vec3(0.5, 0.5, 0.5));\n    \nPointLight light = PointLight(\n    vec3(0., 0.19, -0.2), // position\n    35.);                 // intensity\n    \nCamera camera = Camera(\n    vec3(0., 0., -0.3), \n    0.6);\n    \n//////////////////////////////////////////////////////////////\n// \t                        UTILS                           // \n//////////////////////////////////////////////////////////////\nbool solveQuadratic(float a, float b, float c, out float t0, out float t1)\n{\n    float disc = b * b - 4. * a * c;\n    \n    if (disc < 0.)\n    {\n        return false;\n    } \n    \n    if (disc == 0.)\n    {\n        t0 = t1 = -b / (2. * a);\n        return true;\n    }\n    \n    t0 = (-b + sqrt(disc)) / (2. * a);\n    t1 = (-b - sqrt(disc)) / (2. * a);\n    return true;    \n}\n\n\n//////////////////////////////////////////////////////////////\n// Taken from https://www.shadertoy.com/view/XsX3zB\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) \n{\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat simplex3d(vec3 p) \n{\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\n/* const matrices for 3d rotation */\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n\n/* directional artifacts can be reduced by rotating each octave */\nfloat simplex3d_fractal(vec3 m) \n{\n    return   0.5333333*simplex3d(m*rot1)\n\t\t\t+0.2666667*simplex3d(2.0*m*rot2)\n\t\t\t+0.1333333*simplex3d(4.0*m*rot3)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n//\n//////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////////////////\n// \t                   INTERSECTION CODE                    // \n//////////////////////////////////////////////////////////////\nbool intersectPlane(in Plane plane, in vec3 origin, in vec3 rayDirection, out float t, out vec3 pHit) \n{    \n    // Assuming vectors are all normalized\n    float denom = dot(plane.normal, rayDirection); \n    if (denom < 1e-6) \n    { \n        vec3 p0l0 = plane.position - origin; \n        t = dot(p0l0, plane.normal) / denom; \n        \n        if (t >= 0.)\n        {\n            pHit = origin + rayDirection * t;\n            return true;\n        }             \n    } \n \n    return false; \n} \n\n//////////////////////////////////////////////////////////////\n// \t                       MAIN CODE                        // \n//////////////////////////////////////////////////////////////\nfloat rayTrace(in vec3 rayDirection, in vec3 rayOrigin)\n{\n    float objectHitDistance;\n    vec3 pHit;\n\n#define LAYERS 3\n#define SHADOW_LAYERS 3\n#define FOG_DENSITY 0.1\n\n    float accAlpha = 0.;\n    \n    Plane diffusePlane = plane;\n    Plane lightPlane = plane;\n    vec3 lightDirection;\n    \n    for (int i = 0; i < LAYERS; i++)\n    {\n        if (intersectPlane(diffusePlane, rayOrigin, rayDirection, objectHitDistance, pHit))\n        {\n            float thickness = simplex3d_fractal(pHit);\n            accAlpha += thickness * FOG_DENSITY;            \n\n            //lightDirection = normalize(light.position - pHit);\n\n            vec3 shadowPhit = pHit;\n            for (int j = 0; j < i; j++)\n            {\n                shadowPhit += FOG_DENSITY * lightDirection;\n                accAlpha -= simplex3d_fractal(shadowPhit) * 0.008;\n            }\n        }\n        \n        diffusePlane.position.z += FOG_DENSITY;\n    }        \n \n    return accAlpha;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float time = iTime / 4.;\n    light.position.x = iMouse.x / iResolution.x;\n    //light.position.z = time - 1.2;\n    \n    plane.position.z = time;\n    camera.position.z = time - 1.2;\n        \n    // Normalized pixel coordinates (from -0.5 to 0.5)\n    vec2 uv = fragCoord/iResolution.xy - 0.5;\n    uv.x *= (iResolution.x / iResolution.y); \n    \n    vec3 clipPlanePosition = vec3(uv.x, uv.y, camera.position.z + camera.focalDistance);\n    vec3 rayDirection = normalize(clipPlanePosition - camera.position);\n    \n    vec4 ambientColor = vec4(0.5, 0.7, 0.9, 1.) * (-uv.y + 0.1);  \n    vec4 finalColor = ambientColor + rayTrace(rayDirection, camera.position);\n    \n    fragColor = finalColor;\n}","name":"Image","description":"","type":"image"}]}