{"ver":"0.1","info":{"id":"fsffWl","date":"1645522796","viewed":140,"name":"Poisson Blur","username":"MickAlmighty","description":"Poisson Blur with time dependent radius","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["blur"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAPS 64\n#define TAPS_INV 1.0 / float(TAPS)\n\nvec2 poissonDisk[TAPS] = vec2[TAPS](\n    vec2(-0.0824403, 0.0755221),\n    vec2(0.0138232, -0.157508),\n    vec2(0.117824, 0.15368),\n    vec2(-0.220189, -0.0389482),\n    vec2(-0.0710953, 0.264472),\n    vec2(-0.136338, -0.262511),\n    vec2(0.29704, 0.108478),\n    vec2(-0.310035, 0.127978),\n    vec2(0.110978, 0.353813),\n    vec2(-0.335095, -0.194194),\n    vec2(0.39371, -0.0865569),\n    vec2(-0.240593, 0.34222),\n    vec2(0.341962, 0.288205),\n    vec2(-0.460584, 0.0190472),\n    vec2(0.336227, -0.334591),\n    vec2(-0.0225105, 0.48682),\n    vec2(0.507772, 0.0683197),\n    vec2(-0.430462, 0.299504),\n    vec2(0.117684, -0.523116),\n    vec2(0.272319, 0.475229),\n    vec2(0.51752, -0.23911),\n    vec2(-0.224279, 0.535909),\n    vec2(-0.200233, -0.556693),\n    vec2(0.532956, 0.280104),\n    vec2(0.336667, -0.523598),\n    vec2(0.107125, 0.623317),\n    vec2(-0.507788, -0.393257),\n    vec2(0.649694, -0.0538275),\n    vec2(0.00327093, -0.670812),\n    vec2(0.456932, 0.503699),\n    vec2(-0.686262, -0.0636012),\n    vec2(0.556167, -0.422112),\n    vec2(-0.381289, -0.605904),\n    vec2(0.698801, 0.191511),\n    vec2(-0.652268, 0.334734),\n    vec2(0.257799, -0.69537),\n    vec2(-0.685231, -0.324743),\n    vec2(0.732463, -0.225827),\n    vec2(-0.391648, 0.66829),\n    vec2(-0.16432, -0.765179),\n    vec2(-0.792306, 0.0987497),\n    vec2(0.522566, -0.613942),\n    vec2(0.0296686, 0.8134),\n    vec2(-0.576685, -0.585179),\n    vec2(-0.644978, 0.53292),\n    vec2(0.116632, -0.836001),\n    vec2(0.48289, 0.701297),\n    vec2(-0.83691, -0.192565),\n    vec2(-0.26945, 0.8306),\n    vec2(-0.365337, -0.800955),\n    vec2(0.816935, 0.34658),\n    vec2(-0.843106, 0.298616),\n    vec2(0.227233, 0.879412),\n    vec2(-0.767336, -0.498693),\n    vec2(0.909384, -0.151727),\n    vec2(-0.572223, 0.731479),\n    vec2(0.688416, 0.643104),\n    vec2(-0.948638, -0.00925148),\n    vec2(0.71063, -0.638361),\n    vec2(-0.0934228, 0.957221),\n    vec2(0.958079, 0.179124),\n    vec2(-0.83288, 0.51847),\n    vec2(0.265626, -0.951022),\n    vec2(0.449395, 0.88631));\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    \n    const float radiusScale = 0.04f;\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 screenRatioCorection = vec2(iResolution.y / iResolution.x, 1.0); //matters if input texture's width is not equal to height, think of common 16:9 ratio, \n                                                                          //otherwise the kernel sampling will be stretched in the direction of one axis in uv space \n                                    \n    float time = 0.5 + 0.5 * cos(iTime);\n    float scale = radiusScale * time;\n\n    vec3 color = vec3(0);\n    for (int i = 0; i < TAPS; i++)\n    {\n        vec2 coord = uv + poissonDisk[i] * scale * screenRatioCorection;\n        color += texture(iChannel0, uv + poissonDisk[i] * scale).xyz;\n    }\n\n    fragColor = vec4(color * TAPS_INV, 0.0f);\n\n}","name":"Image","description":"","type":"image"}]}