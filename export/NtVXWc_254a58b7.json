{"ver":"0.1","info":{"id":"NtVXWc","date":"1641443103","viewed":72,"name":"the rotating square","username":"ThegraphicsCard","description":"learning how to render a square and making it rotate. Also added color to pixel by position","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["animation","rendering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Rotation function\nvec2 rotate(vec2 uv, float th) {\n    return mat2(cos(th), sin(th), -sin(th), cos(th)) * uv;\n}\n\n// Square function\nvec3 sdfSquare(vec2 uv, float size, vec2 offset) {\n    float x = uv.x - offset.x;\n    float y = uv.y - offset.y;\n    vec2 rotated = rotate(vec2(x,y), iTime); // Does the rotation product\n    // We give iTime in the sin/cos so it keeps rotating\n    \n    float d = max(abs(rotated.x), abs(rotated.y)) - size;\n    \n    return d > 0. ? vec3(1.) : vec3(uv.x+0.5,uv.y+0.5, 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5; // <-0.5,0.5>\n    uv.x *= iResolution.x/iResolution.y; // Fix aspect ratio\n\n    vec2 offset = vec2(0.,0.);\n    \n    vec3 col = sdfSquare(uv,0.2,offset);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}