{"ver":"0.1","info":{"id":"MtBGDW","date":"1429739184","viewed":2932,"name":"Illustrated Equations ","username":"sben","description":"My contribution shows stuff about curves and iterative functions . After some explorations into the fractal world , I offers two drawing formulas with peculiar shapes. Enjoy!","likes":72,"published":1,"flags":0,"usePreview":0,"tags":["procedural","2d","fractal","trigonometric","curve","complex","iterative","equation","popcorn"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// Created by sofiane benchaa - sben/2015\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#define FIELD 20.0\n#define ITERATION 12\n#define CHANNEL bvec3(true,true,true)\n#define PI4 0.7853981633974483\n#define TONE vec3(0.299,0.587,0.114)\n\n//triangle\nvec2 triangleEQ( vec3 p, float t )\n{\n\tvec2 h = vec2(0.0);\n\tvec3 q = abs(p);\n\tvec2 fx = vec2(1.0);\n\tfx.x = max(q.x*PI4+p.y*0.5,-p.y);\n\treturn fx;\n}\n//regular trifolium\nvec2 bretzTrifolEQ(vec3 p,float t){\t\n\tvec2 fx = vec2(0.008);\n\tfloat x2 = p.x*p.x;\n\tfloat y2 = p.y*p.y;\n\tfx.x = (x2+y2)*(x2+y2)-p.x*(x2-3.0*y2);\n\tfx.x *= fx.x;\n\tfx.x += p.z*p.z;\n\tfx.x /=\tfx.y;\n\treturn fx;\n}\n//quad torus\nvec2 quadTorusEQ(vec3 p,float t){\n\tvec2 fx = vec2(2.0);\n\tfloat x2 = p.x*p.x;\n\tfloat y2 = p.y*p.y;\n\tfx.x = x2*pow(1.0-x2,2.0)*pow(4.0-x2,3.0)-20.0*y2;\n\tfx.x *= fx.x;\n\tfx.x += 80.0*(p.z*p.z);\n\tfx.x /=  fx.y;\n\treturn fx;\n}\n//lemniscat Bernoulli\nvec2 bretzBernEQ(vec3 p,float t){\n\tvec2 fx = vec2(0.01);\n\tfloat x2 = p.x*p.x;\n\tfloat y2 = p.y*p.y;\n\tfx.x = ((x2+y2)*(x2+y2)-x2+y2);\n\tfx.x *= fx.x;\n\tfx.x /= fx.y;\n\treturn fx;\n}\n//just a line\nvec2 lineEQ(vec3 p,float t){\n\tvec2 fx = vec2(0.01);\n\tfloat r = 1.0;\n\tvec3 offset=vec3(0.0);\n\tp+=offset;\n\tfloat cx = clamp(p.x,-r,r);\n\tfx.x = p.y;\n\tfx.x *= fx.x;\n\tfx.x /= min(fx.y,abs(abs(cx)-r));\n\t\n\treturn fx;\n}\n//iterative equation\n\n//mandelbrot\nvec2 complexEQ(vec3 c,float t){\n\tvec4 z = vec4(c,0.0);\n\tvec3 zi = vec3(0.0);\n\tfor(int i=0; i<ITERATION; ++i){\n\t\tzi.x = (z.x*z.x-z.y*z.y);\n\t\tzi.y = (z.x*z.y+z.x*z.y);\n\t\tzi.xyz += c;\n\t\tif(dot(z.xy,z.xy)>4.0)break;\n\t\tz.w++;\n\t\tz.xyz=zi;\n\t}\n\tz.w/=float(ITERATION);\n\treturn 1.0-z.wx;\n}\n\n//\nvec2 wolfFaceEQ(vec3 p,float t){\n\tvec2 fx = p.xy;\n\tp=(abs(p*2.0));\n\tconst float j=float(ITERATION);\n\tvec2 ab = vec2(2.0-p.x);\n\tfor(float i=0.0; i<j; i++){\n\t\tab+=(p.xy)-cos(length(p));\n\t\tp.y+=sin(ab.x-p.z)*0.5;\n\t\tp.x+=sin(ab.y)*0.5;\n\t\tp-=(p.x+p.y);\n\t\tp+=(fx.y+cos(fx.x));\n\t\tab += vec2(p.y);\n\t}\n\tp/=FIELD;\n\tfx.x=(p.x+p.x+p.y);\n\treturn fx;\n}\n\nvec2 dogFaceEQ(vec3 p,float t){\n\tvec2 fx = p.xy;\n\tp=(abs(p*2.0));\n\tconst float j=float(ITERATION);\n\tvec2 ab = vec2(2.0-p.x);\n\tfor(float i=0.0; i<j; i++){\t\t\n\t\tab+=p.xy+cos(length(p));\n\t\tp.y+=sin(ab.x-p.z)*0.5;\n\t\tp.x+=sin(ab.y)*0.5;\n\t\tp-=(p.x+p.y);\n\t\tp-=((fx.y)-cos(fx.x));\n\t}\n\tp/=FIELD;\n\tfx.x=(p.x+p.x+p.y);\n\treturn fx;\n}\n\nvec2 pieuvreEQ(vec3 p,float t){\n\tvec2 fx = p.xy;\n\tfx.x = (fx.y+length(p*fx.x)-cos(t+fx.y));\n\tfx.x = (fx.y+length(p*fx.x)-cos(t+fx.y));\n\tfx.x = (fx.y+length(p*fx.x)-cos(t+fx.y));\n\tfx.x*=fx.x*0.1;\n\treturn fx;\n}\n\n\n////////////////////////////////////////////////////////\nvec3 computeColor(vec2 fx){\n\tvec3 color = vec3(vec3(CHANNEL)*TONE);\n\tcolor -= (fx.x);\n\tcolor.b += color.g*1.5;\n\treturn clamp(color,(0.0),(1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat time = iTime;\n\tfloat ratio = iResolution.y/iResolution.x;\n\tfragCoord.y *= ratio;\n\tvec2 position = ( fragCoord.xy / iResolution.xy )-vec2(0.5,0.5*ratio);\n\tvec3 p = position.xyx*FIELD;\n\tp.z = 2.0*FIELD*0.5;\n\tvec3 color = computeColor(wolfFaceEQ(p+vec3(5.0,0.0,0.0),time));\n    \n\tcolor += computeColor(complexEQ(p+vec3(-5.0,-4.0,0.0),time));\n    \n\tcolor += computeColor(triangleEQ(p+vec3(-5.0,-1.0,0.0),time));\n\tp.z = 0.0;\n    \n\tcolor += computeColor(dogFaceEQ(p*2.0+vec3(0.0,0.0,0.0),time));\n    \n\tcolor += computeColor(quadTorusEQ(p+vec3(-5.0,1.0,0.0),time));\n    \n\tcolor += computeColor(bretzTrifolEQ(p+vec3(-6.0,3.0,0.0),time));\n\tcolor += computeColor(bretzBernEQ(p+vec3(-4.0,3.0,0.0),time));\n\t//color += computeColor(lineEQ(p+vec3(-5.0,4.5,0.0),time));\n\tcolor += computeColor(pieuvreEQ(p*2.5+vec3(-5.0,8.0,0.0),time));\n\tfragColor = vec4( color, 1.0 );\n\n}","name":"","description":"","type":"image"}]}