{"ver":"0.1","info":{"id":"wssSRX","date":"1551797100","viewed":69,"name":"MCG: Ellipse","username":"tale3d","description":"In this lecture we have introduction into geometric objects and how they can be presented in an implicit and parametric forms. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["teachingmaterial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    //////////////////////////////////////////////////////\n    //Starting the common section\n    //The lines above are the same for most of the examples. \n    //Basically it is a mapping between pixel coordinates and world coordinates.\n    //We discuss coordinates systems soon. \n    //\n    //taking pixel coordinates in the uv space, range [0,1]\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    //map pixel coordinates to [-1,1]\n    vec2 c = 2.0 * uv - 1.0;\n    //adjust coordinates given an aspect ratio\n    float aspect_ratio = iResolution.x/iResolution.y;\n    c.x *= aspect_ratio;\n    //\n    //End of the common section\n    ///////////////////////////////////////////////////////\n\n    //Adding more to the common section:\n    //This example has a mouse as an input device.\n    //The mouse coordinates are taking in uv space, and then is modified in the same way\n    //  as the pixel coordinates (see above). \n    vec2 mouse = 2.0*(iMouse.xy / iResolution.xy) - vec2(1.0,1.0);\n    mouse.x *= aspect_ratio;\n\n\n    //Background colour (default)\n    vec3 colour = vec3(1.0,1.0,1.0);\n\n    //For parametric representation we can generate the point for the given value of t\n    //As we are in the example that works for all the pixels, the idea of visualising that\n    //   might be the following: make t time-dependent and visualise the point that\n    //   corresponds to the value of t.\n\n    //Ellipse, parametric definition\n    vec2 centre = vec2(0.1,0.1);\n    float t = iTime;\n    float a = 1.0, b = 0.6;\n\tvec2 parametric = centre + vec2(a*cos(t), b*sin(t));\n    \n    //as previously, if the point is close enough to the given pixel, we colour it blue\n    if (dot(c-parametric, c-parametric) < 0.001) colour = vec3(0.0,0.0,1.0);\n\n    //now the implicit equation: we use one of the equations from the lecture\n    float implicit = (c.x-centre.x)*(c.x-centre.x)/(a*a) + (c.y-centre.y)*(c.y-centre.y)/(b*b)-1.0;\n\n    //if it is equal to 0, then we are on our straight line, but as we work with pixels \n    //   which might be slightly off, we use proximity test once again.\n    if (abs(implicit) < 0.01) colour = vec3(0.0,0.0,0.0);     //Colour the line black.     \n    \n    //That is it, assign the colour to the pixel.\n    fragColor = vec4(colour,1.0);\n\n\n}","name":"Image","description":"","type":"image"}]}