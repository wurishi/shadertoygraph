{"ver":"0.1","info":{"id":"XsyBD3","date":"1530703894","viewed":381,"name":"True Type Text","username":"nr4","description":"Generated with https://github.com/LeStahL/tx210 \nUses the spline distance from https://www.shadertoy.com/view/XsVBWw\nAnd the Font https://fontlibrary.org/de/font/averia-serif-gwf (Open Font License)","likes":13,"published":1,"flags":0,"usePreview":0,"tags":["text","spline","font","ttf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * True Type Text\n * \n * Copyright (C) 2018  Alexander Kraus <nr4@z10.info>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\n//update: Implemented changes suggested by P_Malin\n//update 2: Cosmetics\n\nconst vec3 c = vec3(1.,0.,-1.);\nconst float pi = acos(-1.);\n\n//distance to quadratic bezier spline with parameter t\nfloat dist(vec2 p0,vec2 p1,vec2 p2,vec2 x,float t)\n{\n    t = clamp(t, 0., 1.);\n    return length(x-pow(1.-t,2.)*p0-2.*(1.-t)*t*p1-t*t*p2);\n}\n\n//minimum distance to quadratic bezier spline\nfloat dsp(vec2 p0, vec2 p1, vec2 p2, vec2 x)\n{\n    //coefficients for 0 = t^3 + a * t^2 + b * t + c\n    vec2 E = x-p0, F = p2-2.*p1+p0, G = p1-p0;\n    vec3 ai = vec3(3.*dot(G,F), 2.*dot(G,G)-dot(E,F), -dot(E,G))/dot(F,F);\n\n\t//discriminant and helpers\n    float tau = ai.x/3., p = ai.y-tau*ai.x, q = - tau*(tau*tau+p)+ai.z, dis = q*q/4.+p*p*p/27.;\n    \n    //triple real root\n    if(dis > 0.) \n    {\n        vec2 ki = -.5*q*c.xx+sqrt(dis)*c.xz, ui = sign(ki)*pow(abs(ki), c.xx/3.);\n        return dist(p0,p1,p2,x,ui.x+ui.y-tau);\n    }\n    \n    //three distinct real roots\n    float fac = sqrt(-4./3.*p), arg = acos(-.5*q*sqrt(-27./p/p/p))/3.;\n    vec3 t = c.zxz*fac*cos(arg*c.xxx+c*pi/3.)-tau;\n    return min(\n        dist(p0,p1,p2,x, t.x),\n        min(\n            dist(p0,p1,p2,x,t.y),\n            dist(p0,p1,p2,x,t.z)\n        )\n    );\n}\n\n//minimum distance to linear bezier spline\nfloat dsg(vec2 p0, vec2 p1, vec2 x)\n{\n    vec2 d = p1-p0;\n    float t = clamp(dot(x-p0,d)/dot(d,d),0.,1.);\n    return length(x-mix(p0,p1,t));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.yy-.5;\n\n    const vec2 quad[402] = vec2[402](vec2(0.256,0.047),vec2(0.256,0.012),vec2(0.254,0.006),vec2(0.254,0.006),vec2(0.252,0.000),vec2(0.248,0.000),vec2(0.248,0.000),vec2(0.252,0.000),vec2(0.244,0.000),vec2(0.244,0.000),vec2(0.229,0.000),vec2(0.218,0.016),vec2(0.218,0.016),vec2(0.229,0.000),vec2(0.206,0.031),vec2(0.201,0.038),vec2(0.183,0.064),vec2(0.166,0.091),vec2(0.166,0.091),vec2(0.150,0.118),vec2(0.147,0.123),vec2(0.147,0.123),vec2(0.150,0.118),vec2(0.144,0.128),vec2(0.144,0.128),vec2(0.086,0.217),vec2(0.084,0.217),vec2(0.084,0.217),vec2(0.086,0.217),vec2(0.081,0.217),vec2(0.081,0.217),vec2(0.077,0.217),vec2(0.077,0.145),vec2(0.077,0.145),vec2(0.077,0.073),vec2(0.080,0.058),vec2(0.080,0.058),vec2(0.077,0.073),vec2(0.083,0.043),vec2(0.083,0.043),vec2(0.085,0.032),vec2(0.091,0.022),vec2(0.091,0.022),vec2(0.098,0.012),vec2(0.098,0.010),vec2(0.098,0.010),vec2(0.098,0.012),vec2(0.098,0.008),vec2(0.098,0.008),vec2(0.098,0.000),vec2(0.078,0.000),vec2(0.078,0.000),vec2(0.098,0.000),vec2(0.058,0.000),vec2(0.049,0.000),vec2(0.022,0.000),vec2(0.022,0.007),vec2(0.022,0.007),vec2(0.022,0.015),vec2(0.034,0.022),vec2(0.034,0.022),vec2(0.046,0.029),vec2(0.049,0.041),vec2(0.049,0.041),vec2(0.052,0.054),vec2(0.052,0.090),vec2(0.052,0.090),vec2(0.052,0.054),vec2(0.052,0.127),vec2(0.052,0.188),vec2(0.052,0.231),vec2(0.049,0.238),vec2(0.049,0.238),vec2(0.052,0.231),vec2(0.047,0.245),vec2(0.047,0.245),vec2(0.044,0.251),vec2(0.033,0.260),vec2(0.033,0.260),vec2(0.022,0.269),vec2(0.022,0.270),vec2(0.022,0.270),vec2(0.022,0.269),vec2(0.022,0.271),vec2(0.022,0.271),vec2(0.022,0.282),vec2(0.043,0.282),vec2(0.043,0.282),vec2(0.064,0.282),vec2(0.076,0.276),vec2(0.076,0.276),vec2(0.088,0.271),vec2(0.097,0.261),vec2(0.097,0.261),vec2(0.106,0.252),vec2(0.136,0.208),vec2(0.136,0.208),vec2(0.166,0.163),vec2(0.172,0.154),vec2(0.172,0.154),vec2(0.166,0.163),vec2(0.178,0.145),vec2(0.194,0.121),vec2(0.222,0.078),vec2(0.223,0.078),vec2(0.223,0.078),vec2(0.222,0.078),vec2(0.224,0.078),vec2(0.224,0.078),vec2(0.230,0.078),vec2(0.230,0.150),vec2(0.230,0.150),vec2(0.230,0.222),vec2(0.228,0.236),vec2(0.228,0.236),vec2(0.225,0.251),vec2(0.217,0.261),vec2(0.217,0.261),vec2(0.208,0.271),vec2(0.208,0.271),vec2(0.208,0.271),vec2(0.208,0.271),vec2(0.208,0.272),vec2(0.208,0.272),vec2(0.208,0.282),vec2(0.218,0.282),vec2(0.218,0.282),vec2(0.208,0.282),vec2(0.229,0.282),vec2(0.247,0.282),vec2(0.272,0.282),vec2(0.276,0.280),vec2(0.276,0.280),vec2(0.272,0.282),vec2(0.280,0.278),vec2(0.280,0.278),vec2(0.284,0.276),vec2(0.284,0.273),vec2(0.284,0.273),vec2(0.284,0.276),vec2(0.284,0.270),vec2(0.284,0.270),vec2(0.284,0.270),vec2(0.276,0.262),vec2(0.276,0.262),vec2(0.284,0.270),vec2(0.269,0.254),vec2(0.269,0.254),vec2(0.261,0.246),vec2(0.258,0.233),vec2(0.258,0.233),vec2(0.256,0.220),vec2(0.256,0.182),vec2(0.256,0.182),vec2(0.256,0.220),vec2(0.256,0.144),vec2(0.414,0.008),vec2(0.414,0.000),vec2(0.396,0.000),vec2(0.396,0.000),vec2(0.414,0.000),vec2(0.379,0.000),vec2(0.336,0.000),vec2(0.315,0.000),vec2(0.315,0.004),vec2(0.315,0.004),vec2(0.315,0.000),vec2(0.315,0.008),vec2(0.315,0.008),vec2(0.315,0.014),vec2(0.324,0.020),vec2(0.324,0.020),vec2(0.333,0.027),vec2(0.337,0.037),vec2(0.337,0.037),vec2(0.340,0.048),vec2(0.340,0.099),vec2(0.340,0.099),vec2(0.340,0.150),vec2(0.337,0.161),vec2(0.337,0.161),vec2(0.334,0.172),vec2(0.331,0.174),vec2(0.331,0.174),vec2(0.334,0.172),vec2(0.327,0.177),vec2(0.327,0.177),vec2(0.316,0.185),vec2(0.316,0.189),vec2(0.316,0.189),vec2(0.316,0.192),vec2(0.318,0.194),vec2(0.318,0.194),vec2(0.316,0.192),vec2(0.320,0.196),vec2(0.320,0.196),vec2(0.332,0.205),vec2(0.347,0.205),vec2(0.347,0.205),vec2(0.332,0.205),vec2(0.362,0.205),vec2(0.365,0.205),vec2(0.377,0.205),vec2(0.382,0.192),vec2(0.382,0.192),vec2(0.387,0.179),vec2(0.390,0.179),vec2(0.390,0.179),vec2(0.393,0.179),vec2(0.400,0.186),vec2(0.400,0.186),vec2(0.408,0.192),vec2(0.418,0.199),vec2(0.418,0.199),vec2(0.429,0.205),vec2(0.441,0.205),vec2(0.441,0.205),vec2(0.454,0.205),vec2(0.461,0.198),vec2(0.461,0.198),vec2(0.468,0.191),vec2(0.468,0.185),vec2(0.468,0.185),vec2(0.468,0.191),vec2(0.468,0.180),vec2(0.468,0.180),vec2(0.468,0.169),vec2(0.463,0.163),vec2(0.463,0.163),vec2(0.457,0.158),vec2(0.451,0.158),vec2(0.451,0.158),vec2(0.445,0.158),vec2(0.435,0.163),vec2(0.435,0.163),vec2(0.425,0.168),vec2(0.419,0.168),vec2(0.419,0.168),vec2(0.412,0.168),vec2(0.404,0.162),vec2(0.404,0.162),vec2(0.396,0.156),vec2(0.391,0.141),vec2(0.391,0.141),vec2(0.385,0.126),vec2(0.385,0.089),vec2(0.385,0.089),vec2(0.385,0.052),vec2(0.390,0.042),vec2(0.390,0.042),vec2(0.395,0.031),vec2(0.404,0.023),vec2(0.404,0.023),vec2(0.414,0.014),vec2(0.414,0.011),vec2(0.414,0.011),vec2(0.414,0.014),vec2(0.414,0.008),vec2(0.590,0.224),vec2(0.590,0.224),vec2(0.571,0.194),vec2(0.571,0.194),vec2(0.553,0.165),vec2(0.545,0.155),vec2(0.545,0.155),vec2(0.538,0.144),vec2(0.537,0.144),vec2(0.537,0.144),vec2(0.538,0.144),vec2(0.537,0.143),vec2(0.523,0.122),vec2(0.519,0.116),vec2(0.514,0.109),vec2(0.514,0.109),vec2(0.510,0.103),vec2(0.510,0.102),vec2(0.510,0.102),vec2(0.510,0.103),vec2(0.510,0.102),vec2(0.510,0.101),vec2(0.510,0.100),vec2(0.511,0.100),vec2(0.511,0.100),vec2(0.510,0.100),vec2(0.512,0.100),vec2(0.548,0.100),vec2(0.587,0.100),vec2(0.587,0.101),vec2(0.587,0.101),vec2(0.587,0.100),vec2(0.588,0.102),vec2(0.588,0.102),vec2(0.591,0.108),vec2(0.591,0.140),vec2(0.591,0.140),vec2(0.591,0.108),vec2(0.591,0.172),vec2(0.591,0.194),vec2(0.591,0.196),vec2(0.591,0.197),vec2(0.591,0.197),vec2(0.591,0.196),vec2(0.591,0.198),vec2(0.572,0.018),vec2(0.572,0.019),vec2(0.578,0.032),vec2(0.578,0.032),vec2(0.585,0.045),vec2(0.585,0.049),vec2(0.585,0.049),vec2(0.585,0.045),vec2(0.585,0.053),vec2(0.585,0.053),vec2(0.585,0.069),vec2(0.573,0.074),vec2(0.573,0.074),vec2(0.561,0.079),vec2(0.548,0.079),vec2(0.548,0.079),vec2(0.561,0.079),vec2(0.534,0.079),vec2(0.534,0.079),vec2(0.482,0.079),vec2(0.482,0.087),vec2(0.482,0.087),vec2(0.482,0.079),vec2(0.482,0.094),vec2(0.482,0.098),vec2(0.482,0.122),vec2(0.537,0.192),vec2(0.537,0.192),vec2(0.482,0.122),vec2(0.591,0.261),vec2(0.591,0.261),vec2(0.606,0.282),vec2(0.614,0.282),vec2(0.614,0.282),vec2(0.606,0.282),vec2(0.622,0.282),vec2(0.622,0.282),vec2(0.632,0.282),vec2(0.633,0.276),vec2(0.633,0.276),vec2(0.632,0.282),vec2(0.634,0.271),vec2(0.634,0.271),vec2(0.636,0.264),vec2(0.636,0.204),vec2(0.636,0.204),vec2(0.636,0.144),vec2(0.638,0.135),vec2(0.638,0.135),vec2(0.636,0.144),vec2(0.640,0.126),vec2(0.640,0.126),vec2(0.642,0.117),vec2(0.654,0.109),vec2(0.654,0.109),vec2(0.665,0.102),vec2(0.665,0.097),vec2(0.665,0.097),vec2(0.665,0.102),vec2(0.665,0.092),vec2(0.665,0.092),vec2(0.665,0.088),vec2(0.656,0.084),vec2(0.656,0.084),vec2(0.648,0.080),vec2(0.642,0.070),vec2(0.642,0.070),vec2(0.636,0.061),vec2(0.636,0.055),vec2(0.636,0.055),vec2(0.636,0.061),vec2(0.636,0.048),vec2(0.636,0.048),vec2(0.636,0.045),vec2(0.642,0.036),vec2(0.642,0.036),vec2(0.649,0.028),vec2(0.649,0.024),vec2(0.649,0.024),vec2(0.649,0.028),vec2(0.649,0.020),vec2(0.649,0.020),vec2(0.649,0.012),vec2(0.635,0.006),vec2(0.635,0.006),vec2(0.620,0.000),vec2(0.611,0.000),vec2(0.611,0.000),vec2(0.620,0.000),vec2(0.602,0.000),vec2(0.594,0.000),vec2(0.582,0.000),vec2(0.577,0.005),vec2(0.577,0.005),vec2(0.572,0.011),vec2(0.572,0.014),vec2(0.572,0.014),vec2(0.572,0.011),vec2(0.572,0.018)),\n    \tlin[56] = vec2[56](vec2(0.206,0.031),vec2(0.201,0.038),vec2(0.058,0.000),vec2(0.049,0.000),vec2(0.052,0.127),vec2(0.052,0.158),vec2(0.052,0.158),vec2(0.052,0.188),vec2(0.178,0.145),vec2(0.194,0.121),vec2(0.229,0.282),vec2(0.247,0.282),vec2(0.256,0.144),vec2(0.256,0.103),vec2(0.256,0.103),vec2(0.256,0.047),vec2(0.379,0.000),vec2(0.357,0.000),vec2(0.357,0.000),vec2(0.348,0.000),vec2(0.348,0.000),vec2(0.336,0.000),vec2(0.362,0.205),vec2(0.365,0.205),vec2(0.537,0.143),vec2(0.528,0.130),vec2(0.528,0.130),vec2(0.527,0.128),vec2(0.527,0.128),vec2(0.523,0.122),vec2(0.510,0.102),vec2(0.510,0.101),vec2(0.512,0.100),vec2(0.516,0.100),vec2(0.516,0.100),vec2(0.518,0.100),vec2(0.518,0.100),vec2(0.548,0.100),vec2(0.591,0.172),vec2(0.591,0.189),vec2(0.591,0.189),vec2(0.591,0.192),vec2(0.591,0.192),vec2(0.591,0.194),vec2(0.591,0.198),vec2(0.591,0.214),vec2(0.591,0.214),vec2(0.591,0.223),vec2(0.591,0.223),vec2(0.590,0.224),vec2(0.590,0.224),vec2(0.590,0.224),vec2(0.482,0.094),vec2(0.482,0.098),vec2(0.602,0.000),vec2(0.594,0.000));\n    float d = 1.;\n    for(int i=0; i<134; ++i) d=min(d,dsp(quad[3*i], quad[3*i+1], quad[3*i+2], uv));\n    for(int i=0; i<28; ++i) d=min(d,dsg(lin[2*i], lin[2*i+1], uv));\n    \n    vec3 col = c.yyy;\n    //spline distance isolines\n    col += .7*(( 0.5*cos(iTime+uv.xyx+vec3(0.,2.,4.)))*mod(d,0.1)*10.\n        - ( .5*sin(iTime+3.*uv.xyx+vec3(0.,2.,4.)))*mod(d,0.05)*20.\n        + ( .4*atan(iTime+uv.xyx+vec3(0.,2.,4.)))*mod(d,.05)*20.);\n    col += c.xxy*smoothstep(.007, .003, d);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}