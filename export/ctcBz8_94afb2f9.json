{"ver":"0.1","info":{"id":"ctcBz8","date":"1700917680","viewed":38,"name":"fractal_circles","username":"anmol","description":"Ref - https://www.youtube.com/watch?v=f4s1h2YETNY","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["first"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// cosine based palette, 4 vec3 params\nvec3 palette(float t)\n{\n    \n    vec3 a = vec3(0.049, 0.109, 0.662);\n    vec3 b = vec3(0.408, 0.456 ,0.077);\n    vec3 c = vec3(0.564, 0.367 ,0.556);\n    vec3 d = vec3(2.722, 2.609, 5.063);\n\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    vec3 finalColor = vec3(0.0);\n    \n    vec2 uv0 = uv;\n    \n    for(float i = 0.0; i < 2.0; i++){\n    \n\n        uv = fract(uv*2.) - 0.5;\n        //uv *= 2.0;\n        //uv = fract(uv);\n        //uv -= 0.5;\n\n        // vec3 col = vec3(1.0,2.0,3.0);\n\n        // float d = length(uv) - 0.5;\n        float d = length(uv) * exp(-length(uv0));\n\n        //vec3 col = palette(d + iTime);\n        vec3 col = palette(length(uv0) + i*.8 + iTime*0.8);\n\n\n        d = sin(d*8. + iTime)/8.;\n        d = abs(d);\n\n        // d = smoothstep(0.0,0.1,d);\n        d = pow(0.03 / d, 3.0);\n\n        finalColor += col * d;\n    }\n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}