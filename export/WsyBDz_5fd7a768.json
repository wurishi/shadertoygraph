{"ver":"0.1","info":{"id":"WsyBDz","date":"1607462104","viewed":5445,"name":"Megaparsecs","username":"BigWIngs","description":"Use mouse to look around. Put full screen with sound ;)","likes":98,"published":1,"flags":64,"usePreview":1,"tags":["space","galaxy","artofcode","spiralgalaxy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"MtfXz8","filepath":"https://soundcloud.com/astropilot/space-ambient-demo-00","previewfilepath":"https://soundcloud.com/astropilot/space-ambient-demo-00","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Megaparsecs\" by Martijn Steinrucken aka BigWings/CountFrolic - 2020\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Email: countfrolic@gmail.com\n// Twitter: @The_ArtOfCode\n// YouTube: youtube.com/TheArtOfCodeIsCool\n//\n// Music:\n// https://soundcloud.com/astropilot/space-ambient-demo-00\n//\n// My attempt at a spiral galaxy. Made from a bunch of ellipses.\n//\n// I got the idea when I read about new theories concerning spiral\n// galaxy formation. The standard idea of the spiral arms just orbiting\n// around the center doesn't work because it would 'wind up' the spiral\n// with every rotation. This would very quickly (on cosmological scales) \n// lead the spirals to would wind up to the point where they'd dissapear. \n// This is not what we observe so a different theory is needed. \n// One such theory is that we are actually looking at lots of\n// overlapping and rotated elliptical orbits, which I tried to emulate here.\n// \n// Playing around with this made me realize that a galaxy is just a big\n// vortex of dust, where every dust particle is a star!\n// I threw in some super big & bright stars to make for a more interesting\n// image. There is also the occasional supernova thrown in. Though in\n// reality super novae happen in our galaxy about once every 50 years and\n// since one orbit takes about 250 million years it should have about \n// 150,000 super nova flashes per second if we look at it at this\n// time-scale!\n//\n// I am not the first one to render a galaxy as a series of eliptical\n// orbits. As with many other topics, Fabrice Neyret beat me to the punch:\n// https://www.shadertoy.com/view/Ms3czX\n\n#define S smoothstep\n#define T iTime\n\n#if HW_PERFORMANCE==0\n#define NUMRINGS 20.\n#define MAX_BLOCKS 20.\n#else\n#define NUMRINGS 40.\n#define MAX_BLOCKS 40.\n#endif\n\nmat2 Rot(float a) {\n    float s=sin(a),c=cos(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat Hash31(vec3 p3) {\n\tp3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, vec3 up, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(up, f)),\n        u = cross(f,r),\n        c = f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i);\n    return d;\n}\n\nvec4 Galaxy(vec3 ro, vec3 rd, float seed, float a1, float a2, float cut) {\n    \n    mat2 rot = Rot(a1);\n    ro.xy *= rot; rd.xy*=rot;\n    rot=Rot(a2);ro.yz *= rot; rd.yz*=rot;\n    \n    vec2 uv = ro.xz+(ro.y/-rd.y)*rd.xz;\n \n    seed = fract(sin(seed*123.42)*564.32);\n        \n    vec3 \n        col = vec3(0),\n        dustCol = vec3(.3, .6, 1.);\n    \n    float alpha = 0.;\n    if(cut==0. || (ro.y*rd.y<0. && length(uv)<2.5)) {\n        \n        float \n            ringWidth = mix(10.,25., seed),\n            twist = mix(.3, 2., fract(seed*10.)),\n        \tnumStars = mix(2., 15., pow(fract(seed*65.),2.)),\n        \tcontrast = fract(seed*3.),\n            flip = 1.,\n            t=T*.1*sign(seed-.5),\n            z, r, ell, n, d, sL, sN, i;\n        \n        if(cut==0.) twist = 1.;\n        \n        for(i=0.; i<1.; i+=1./NUMRINGS) {\n\n            flip *= -1.;\n            z = mix(.06, 0., i)*flip*fract(sin(i*563.2)*673.2);\n            r = mix(.1, 1., i);\n\n            uv = ro.xz+((ro.y+z)/-rd.y)*rd.xz;\n        \n            vec2 st = uv*Rot(i*6.2832*twist);\n            st.x *= mix(2., 1., i);\n\n            ell = exp(-.5*abs(dot(st,st)-r)*ringWidth);\n            vec2 texUv = .2*st*Rot(i*100.+t/r);\n            vec3 \n                dust = texture(iChannel0, texUv+i).rgb,\n                dL = pow(ell*dust/r, vec3(.5+contrast));\n\n            vec2 id = floor(texUv*numStars);\n            texUv= fract(texUv*numStars)-.5;\n\n            n = Hash31(id.xyy+i);\n\n            d = length(texUv); \n\n            sL = S(.5, .0, d)*pow(dL.r,2.)*.2/d;\n           \n            sN = sL;\n            sL *= sin(n*784.+T)*.5+.5;\n            sL += sN*S(.9999,1., sin(n*784.+T*.05))*10.;\n            col += dL*dustCol;\n\n            alpha += dL.r*dL.g*dL.b;\n\n            if(i>3./numStars)\n            col += sL* mix(vec3(.5+sin(n*100.)*.5, .5, 1.), vec3(1), n);\n        }\n\n        col = col/NUMRINGS;\n    }\n    \n    vec3 \n        tint = 1.-vec3(pow(seed,3.), pow(fract(seed*98.),3.), 0.)*.5,\n        center = vec3( exp(-.5*dot(uv,uv)*30.) ),\n        cp = ro + max(0., dot(-ro, rd))*rd;\n    \n    col *= tint;\n    \n    cp.y*= 4.;\n    center += dot(rd, vec3(rd.x, 0, rd.z))*exp(-.5*dot(cp,cp)*50.);\n    \n    col += center*vec3(1., .8, .7)*1.5*tint;\n    \n    return vec4(col, alpha);\n}\n\nvec3 Bg(vec3 rd) {\n    vec2 uv = vec2(atan(rd.x,rd.z), rd.y*.5+.5);\n\tuv *= 2.;\n    float wave = sin(rd.y*3.14+T*.1)*.5+.5;\n    wave *= sin(uv.x+uv.y*3.1415)*.5+.5;\n    return vec3(0.01*sin(T*.06),0,.05)*wave;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 \n        uv = (fragCoord-.5*iResolution.xy)/iResolution.y,\n\t\tM = iMouse.xy/iResolution.xy;\n    \n    float \n        t = T*.1,\n        dolly = (1.-sin(t)*.6),\n        zoom = mix(.3, 2., pow(sin(t*.1), 5.)*.5+.5),\n        dO = 0.;\n    \n    vec3 ro = vec3(0,2,-2)*dolly;\n    ro.yz *= Rot(M.y*5.+sin(t*.5));\n    ro.xz *= Rot(-M.x*5.+t*.1);\n    vec3 up = vec3(0,1,0);\n    up.xy *=Rot(sin(t*.2));\n    vec3 \n        rd = GetRayDir(uv, ro, vec3(0), up, zoom),\n        col = Bg(rd),\n        dir = sign(rd)*.5;\n    \n    for(float i=0.; i<MAX_BLOCKS; i++) {\n    \tvec3 p = ro+dO*rd;\n        \n        p.x += T*.2;\n        vec3 \n            id = floor(p),\n            q = fract(p)-.5,\n            rC = (dir-q)/rd;\t// ray to cell boundary\n        \n        float \n            dC = min(min(rC.x, rC.y), rC.z)+.0001,\t\t// distance to cell just past boundary\n        \tn = Hash31(id);\n        \n        dO += dC;\n        \n        if(n>.01) continue;\n        \n        float \n            a1 = fract(n*67.3)*6.2832,\n            a2 = fract(n*653.2)*6.2832;\n        \n        col += Galaxy(q*4., rd, n*100., a1, a2,1.).rgb*S(25., 10., dO);\n    }\n    \n    vec4 galaxy = Galaxy(ro, rd, 6., 0., 0.,0.);\n\n    float \n        alpha = pow(min(1., galaxy.a*.6),1.),\n        a = atan(uv.x,uv.y),\n    \tsB = sin(a*13.-T)*sin(a*7.+T)*sin(a*10.-T)*sin(a*4.+T),\n    \td = length(uv);\n    \n    sB *= S(.0, .3, d);\n    col = mix(col, galaxy.rgb*.1, alpha*.5);\n    col += galaxy.rgb;\n    col += max(0., sB)*S(5.0, 0., dot(ro,ro))*.03*zoom;\n    \n    col *= S(1., 0.5, d);\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}