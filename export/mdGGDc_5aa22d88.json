{"ver":"0.1","info":{"id":"mdGGDc","date":"1679154330","viewed":71,"name":"colorfulshader","username":"nmoon","description":"colorful","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colorful"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct PixelData {\n    vec2 cell_uv;\n    vec2 cell_id;\n};\n\n\nfloat random2D(vec2 input_vals) {\n\treturn fract(sin(dot(input_vals, vec2(3984.52f, 9538.3489f))) * 29834.259f);\n}\n\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nfloat WorleyNoise(vec2 uv, float scale) {\n    uv *= scale;\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n    float minDist = 1.0;\n\n    for(int y = -1; y <= 1; y++) {\n        for(int x = -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x), float(y));\n            vec2 point = random2(uvInt + neighbor);\n            vec2 diff = neighbor + point - uvFract;\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\nPixelData grid(vec2 uv, float scale) {\n    PixelData data;\n    uv *= scale;\n    data.cell_id = floor(uv);\n    data.cell_uv = fract(uv);\n    \n    return data;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 orig_uv = fragCoord/iResolution.xy;\n    vec2 uv = vec2(orig_uv.x * iResolution.x / iResolution.y, orig_uv.y);\n    uv.x += iTime / 15.0f;\n    \n    PixelData data = grid(uv, 30.0f);\n\n    vec3 col = vec3(random2D(data.cell_id), random2D(data.cell_id + 4.0f), random2D(data.cell_id - 4.0f));\n    vec3 col2 = vec3(random2D(data.cell_id), random2D(data.cell_id + 2.0f), random2D(data.cell_id - 2.0f));\n    if (random2D(data.cell_id) > WorleyNoise(vec2(uv.x - iTime / 10.0f, data.cell_id.y + iTime / 10.0f), 4.15f)) {\n        col = mix(col, col2, data.cell_uv.x);\n    }\n    else {\n        col = mix(col, col2, data.cell_uv.y);\n    }\n    float t = smoothstep(0.0f, 1.0f, 1.0f - distance(orig_uv, vec2(0.5f)));\n    col = mix(vec3(1.0f), col, t);\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}