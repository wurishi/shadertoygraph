{"ver":"0.1","info":{"id":"lllSRj","date":"1438146253","viewed":1219,"name":"So that's what that's for","username":"AmazingThew","description":"GUYS THE CHECKERBOARD TEXTURE IS AN 8x8 BAYER MATRIX FOR DITHERING","likes":12,"published":1,"flags":0,"usePreview":0,"tags":["dithering","secret","bayer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"float dither(vec2 position, float brightness) {\n\tfloat bayer = texture(iChannel0, position).r;\n    bayer = pow(bayer, 1.0 / 2.2); //Gamma correction\n    return step(bayer, brightness);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Generate some nice sine waves\n\tfloat brightness = fragCoord.x / iResolution.x;\n    brightness = (sin(brightness*15.0)+1.0)/2.0;\n    \n    //Dithering is inherently screenspace so use fragCoord\n    vec2 position = fragCoord/iChannelResolution[0].xy;\n    \n    \n    float ditheredbrightness = dither(position, brightness);\n\tfragColor = vec4(vec3(ditheredbrightness), 1.0);\n}","name":"","description":"","type":"image"}]}