{"ver":"0.1","info":{"id":"NlsfWX","date":"1653346757","viewed":93,"name":"CubicBezier23","username":"edwardbraed","description":"Naive implementation of a cubic bezier curve (editable).\nClick and move control points!\nEnable (or disable) support lines/points in common header.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["bezier","curve","cubic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 bezier(vec2[4] pts, float v)\n{\n    vec2 a = mix(pts[0], pts[1], v);\n    vec2 b = mix(pts[1], pts[2], v);\n    vec2 c = mix(pts[2], pts[3], v);\n    vec2 d = mix(a, b, v);\n    vec2 e = mix(b, c, v) ;\n    return mix(d, e, v);\n}\n\nfloat drwBezier(vec2 uv, vec2[4] pts)\n{ \n    float sfCnt = float(SEG_CNT);\n    \n    int mi;\n    float md = 1e10;\n    for(int i = 0; i < SEG_CNT; i++)\n    {\n        float cd = distance(uv, bezier(pts, float(i) / sfCnt));\n        if(cd < md)\n        {\n            mi = i;\n            md = cd;\n        }\n    }\n    \n    vec2 bPtA = bezier(pts, max(float(mi - 1), 0.0) / sfCnt);\n    vec2 bPtB = bezier(pts, float(mi + 1) / sfCnt);\n    \n    return drwLine(iResolution.y, uv, bPtA, bPtB, CR_SIZE);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 auv = fragCoord/iResolution.xy * calcAspect(iResolution.xy);\n    \n    PointsState ps = GetState(iChannel0);\n    \n    vec4 res = vec4(0.0);\n    \n    for(int x = 0; x < 4; x++)\n    {\n        res += drwPt(auv, ps.pts[x], PT_SIZE);\n        if(x < 3)\n            res += drwLine(iResolution.y, auv, ps.pts[x], ps.pts[x + 1], LN_SIZE);\n    }\n    \n    res += drawSupport(iResolution.y, auv, ps);\n    res += vec4(0.0, 1.0, 1.0, 0.0) * clamp(drwBezier(auv,ps.pts), 0.0, 1.0);\n    \n    // Output to screen\n    fragColor = res + SetState(ivec2(fragCoord), ps);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PT_SIZE 0.007\n#define LN_SIZE 1.5\n#define CR_SIZE 2.5\n#define SEG_CNT 140\n\n#define ENABLE_LINES\n#define ENABLE_POINTS\n\n#define S_PT_SIZE 0.004\n#define S_CR_SIZE 1.4\n\nstruct PointsState\n{\n    vec2[4] pts;\n    int sel;\n};\n\nvec2 calcAspect(vec2 iRes)\n{\n    vec2 aspect = vec2(float(iRes.x < iRes.y) * iRes.x / iRes.y,\n\t\t\t\t\t   float(iRes.y < iRes.x) * iRes.y / iRes.x);\n    aspect.x += float(aspect.x == 0.0);\n    aspect.y += float(aspect.y == 0.0);\n    return aspect;\n}\n\nPointsState GetState(sampler2D s)\n{\n    vec4 pts0 = texelFetch(s, ivec2(0, 0), 0);   // pt a, b\n    vec4 pts1 = texelFetch(s, ivec2(1, 0), 0);   // pt c, d\n    float sel = texelFetch(s, ivec2(2, 0), 0).x; // selection\n\n    return PointsState(vec2[4](pts0.xy, pts0.zw, pts1.xy, pts1.zw),\n                       int(sel));\n}\n\nvec4 SetState(ivec2 coords, PointsState ps)\n{\n    if(coords.x == 0 && coords.y == 0)\n        return vec4(ps.pts[0], ps.pts[1]);\n    else if(coords.x == 1 && coords.y == 0) \n        return vec4(ps.pts[2], ps.pts[3]);\n    else if(coords.x == 2 && coords.y == 0)\n        return vec4(float(ps.sel), 0.0, 0.0, 0.0);\n        \n    return vec4(0.0);\n}\n\nfloat drwPt(vec2 uv, vec2 pt, float sz)\n{\n    return clamp(1.0 - distance(uv, vec2(pt)) / sz, 0.0, 1.0) * 3.0;\n}\n\n//thanks: https://www.shadertoy.com/view/XtdGW4\nfloat drwLine(float iResY, vec2 uv, vec2 a, vec2 b, float sz) \n{ \n    vec2 ab = b - a, ap = uv - a;\n    float seg = length(ap - ab * clamp(dot(ab, ap) / dot(ab, ab), 0.0, 1.0));\n    return smoothstep(sz / iResY, 0.0, abs(seg));\n}\n\nvec4 drawSupport(float iResY, vec2 uv, PointsState ps)\n{\n    vec4 res = vec4(0.0);\n    #if defined(ENABLE_LINES) || defined(ENABLE_POINTS)\n        vec2 ptA = mix(ps.pts[0], ps.pts[1], 0.5);\n        vec2 ptB = mix(ps.pts[1], ps.pts[2], 0.5);\n        vec2 ptC = mix(ps.pts[2], ps.pts[3], 0.5);\n        vec2 ptD = mix(ptA, ptB, 0.5);\n        vec2 ptE = mix(ptB, ptC, 0.5);\n\n        #ifdef ENABLE_LINES\n        res += vec4(0.0, 0.4, 0.0, 0.0) * drwLine(iResY, uv, ptA, ptB, S_CR_SIZE);\n        res += vec4(0.0, 0.4, 0.0, 0.0) * drwLine(iResY, uv, ptB, ptC, S_CR_SIZE);\n        res += vec4(0.0, 0.0, 1.0, 0.0) * drwLine(iResY, uv, ptD, ptE, S_CR_SIZE);\n        #endif\n        #ifdef ENABLE_POINTS\n        res += vec4(0.0, 1.0, 0.0, 0.0) * drwPt(uv, ptA, S_PT_SIZE);\n        res += vec4(0.0, 1.0, 0.0, 0.0) * drwPt(uv, ptB, S_PT_SIZE);\n        res += vec4(0.0, 1.0, 0.0, 0.0) * drwPt(uv, ptC, S_PT_SIZE);\n        res += vec4(0.0, 0.0, 1.0, 0.0) * drwPt(uv, ptD, S_PT_SIZE);\n        res += vec4(0.0, 0.0, 1.0, 0.0) * drwPt(uv, ptE, S_PT_SIZE);\n        res += vec4(2.0, 0.0, 0.0, 0.0) * drwPt(uv, mix(ptD, ptE, 0.5), S_PT_SIZE);\n        #endif\n    #endif\n    return res;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = calcAspect(iResolution.xy);\n    \n    PointsState ps = GetState(iChannel0);\n    vec2[4] pts = ps.pts; // because gladiolus!\n    \n    // default state\n    if(iTime < 0.5)\n    {\n        pts = vec2[4](vec2(0.25, 0.3) * aspect, \n                         vec2(0.35, 0.6) * aspect, \n                         vec2(0.55, 0.6) * aspect, \n                         vec2(0.65, 0.3) * aspect);\n    }\n    \n\n    vec2 amp = iMouse.xy / iResolution.xy  * aspect;\n    int sel = ps.sel;\n    for(int x = 0; x < 4; x++)\n        if(distance(amp, pts[x]) < PT_SIZE)\n            sel = x;\n\n    ps.sel = iMouse.z >= 1.0 ? sel : -1;\n\n\n    if(ps.sel > -1 && ps.sel < 4)\n    {\n        pts[ps.sel] = amp;\n    }\n    \n    ps.pts = pts;\n    \n\n    // Output to screen\n    fragColor = SetState(ivec2(fragCoord), ps);\n}","name":"Buffer A","description":"","type":"buffer"}]}