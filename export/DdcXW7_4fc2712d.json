{"ver":"0.1","info":{"id":"DdcXW7","date":"1710589220","viewed":42,"name":"lens-test","username":"lhe","description":"lens test","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lens"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPSILON (1.0e-3)\n#define THRESHOLD (1.0e-1)\n#define MAX_CYCLES 800\n#define CAMERA_FOCAL_LENGTH 500.0\n#define LENS_N 1.5\n\nfloat sdHalfSpace(in vec3 coord, in vec3 point, in vec3 normal) {\n    return dot(normal, coord - point);\n}\n\nvec3 snHalfSpace(in vec3 coord, in vec3 point, in vec3 normal) {\n    return normal;\n}\n\n\nfloat sdSphere(in vec3 coord, in vec3 center, float radius) {\n    return length(coord - center) - radius;\n}\n\nvec3 snSphere(in vec3 coord, in vec3 center, float radius) {\n    return normalize(coord - center);\n}\n\nfloat sdLens(in vec3 coord, float sign) {\n    vec3 center = vec3(iMouse.xy, 0.0);\n    return max(\n            sdSphere(coord, center - sign * vec3(0, 0, 25), 50.0),\n            sdSphere(coord, center, 50.0));\n    }\n\nvec3 snLens(in vec3 coord, float sign) {\n    float sd = sdLens(coord, sign);\n    return normalize(vec3(\n        sdLens(coord + vec3(EPSILON, 0.0, 0.0), sign) - sd,\n        sdLens(coord + vec3(0.0, EPSILON, 0.0), sign) - sd,\n        sdLens(coord + vec3(0.0, 0.0, EPSILON), sign) - sd\n    ));\n}\n\nstruct hit {\n    bool visible;\n    vec3 point;\n    vec3 color;\n};\n\nhit march(in vec3 start, in vec3 ray) {\n    vec3 coord = start;\n    float s = 0.0;\n    bool inside = false;\n    for (int i = 0; i < MAX_CYCLES; i++) {\n        float pDist = sdHalfSpace(coord, vec3(0, 0, -100), vec3(0, 0, 1));\n        \n        if (pDist < THRESHOLD) {\n            //vec2 uv = coord.xy/vec2(100, 300);\n            //vec3 col = 0.5 + 0.5*cos(uv.xyx+vec3(0,1,1));\n            float l = mod(coord.x, 30.0) < 15.0 ? 0.0 : 1.0;\n            vec3 col = vec3(l,l,l);\n            return hit(true, coord, col);\n        }\n        \n        \n        float sign = inside ? -1.0 : 1.0;\n        float lDist = sdLens(coord, sign) * sign;\n        \n        if (lDist < THRESHOLD) {\n            vec3 norm = snLens(coord, sign) * sign;\n            vec3 s1 = ray - norm * dot(ray, norm);\n            vec3 s2 = (inside ? LENS_N : 1.0/LENS_N) * s1;\n            ray = s2 - norm * sqrt(1.0 - dot(s2, s2));\n            ray = vec3(0,0,-1);\n            inside = !inside;\n        }\n        \n        float dist = max(min(pDist, lDist), THRESHOLD);\n        //s += dist;\n        coord += dist * ray;\n    }\n    return hit(false, vec3(0.0, 0.0, 0.0), vec3(0.0, 0.0, 0.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 start = vec3(iResolution.xy * 0.5, CAMERA_FOCAL_LENGTH);\n    vec3 ray = normalize(vec3(fragCoord - iResolution.xy * 0.5, -CAMERA_FOCAL_LENGTH));\n    hit h = march(start, ray);\n    if (h.visible) {\n        fragColor = vec4(h.color, 1.0);\n    } else {\n        fragColor = vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}","name":"Image","description":"","type":"image"}]}