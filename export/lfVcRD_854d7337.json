{"ver":"0.1","info":{"id":"lfVcRD","date":"1731588824","viewed":335,"name":"Alternative boombox wall","username":"yasuo","description":"Please avoid color and audio reactive feedback; it aligns with my style.","likes":14,"published":3,"flags":0,"usePreview":0,"tags":["boombox","graphicdesign","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 256\n#define MAX_DIST 256.\n#define SURF_DIST .0005\n#define Rot(a) mat2(cos(a),-sin(a),sin(a),cos(a))\n#define DF(a,b) length(a) * cos( mod( atan(a.y,a.x)+6.28/(b*8.0), 6.28/((b*8.0)*0.5))+(b-1.)*6.28/(b*8.0) + vec2(0,11) )\n#define SUV(p) vec2(atan(p.x,p.z),acos(p.y))\n#define ZERO (min(iFrame,0))\n\n// thx blackle! https://www.shadertoy.com/view/Wl3fD2\n#define FK(k) floatBitsToInt(k*k/7.)^floatBitsToInt(k)\nfloat hash(float a, float b) {\n    int x = FK(a), y = FK(b);\n    return float((x*x+y)*(y*y-x)-x)/2.14e9;\n}\n\n// thx iq! https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0)-0.1;\n}\n\n// thx blackle! https://www.shadertoy.com/view/Wl3fD2\nvec3 face(vec3 p) {\n    vec3 ap = abs(p);\n    if (ap.x>=max(ap.z,ap.y)) return vec3(sign(p.x),0.,0.);\n    if (ap.y>=max(ap.z,ap.x)) return vec3(0.,sign(p.y),0.);\n    if (ap.z>=max(ap.x,ap.y)) return vec3(0.,0.,sign(p.z));\n    return vec3(0);\n}\n\nfloat object1(vec3 p, float width, float height){\n    p-=vec3(0,0,height);\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(width,width,1.));\n    \n    p.z+=0.1;\n    float d2 = abs(length(p.xy)-1.8)-0.2;\n    d2 = max((abs(p.z)-1.2),d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z+=1.9;\n    p.xy*=0.62;\n    d2 = length(p)-1.2;\n    d = max(-d2,d);\n    \n    p = prevP;\n    p.z+=0.5;\n    d2 = length(p)-0.6+(sin(height*5.)*0.03);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z+=1.;\n    p.xy = abs(p.xy)-2.;\n    d2 = length(p)-0.2;\n    d = min(d,d2);        \n    \n    return d;\n}\n\nfloat object2(vec3 p, float width, float height){\n    p-=vec3(0,0,height);\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(width,width,0.5));\n    p.y-=0.8;\n    p.z+=0.3;\n    float d2 = sdBox(p,vec3(width*0.9,width*0.5,0.5));\n    d = min(d,d2);\n    \n    p.y-=0.3;\n    p.z+=0.49;\n    d2 = sdBox(p,vec3(width*0.6,width*0.2,0.1));\n    d = max(-d2,d);\n    \n    p = prevP;\n    \n    p.y+=1.3;\n    p.z+=0.8;\n    d2 = sdBox(p,vec3(width*0.1,width*0.25,0.2));\n    d = max(-d2,d);\n    \n    p.yz*=Rot(radians(sin(iTime*3.)*15.));\n    p.z-=0.2;\n    d2 = sdBox(p,vec3(width*0.08,width*0.18,0.2));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x)-0.8;\n    p.y+=1.3;\n    p.z+=0.8;\n    d2 = sdBox(p,vec3(width*0.1,width*0.25,0.2));\n    d = max(-d2,d);\n    \n    p.yz*=Rot(radians(cos(iTime*2.5)*12.));\n    p.z-=0.2;\n    d2 = sdBox(p,vec3(width*0.08,width*0.18,0.2));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x = abs(p.x)-1.6;\n    p.y+=1.3;\n    p.z+=0.8;\n    d2 = sdBox(p,vec3(width*0.1,width*0.25,0.2));\n    d = max(-d2,d);\n    \n    p.yz*=Rot(radians(sin(iTime*2.1)*15.));\n    p.z-=0.2;\n    d2 = sdBox(p,vec3(width*0.08,width*0.18,0.2));\n    d = min(d,d2);    \n    \n    return d;\n}\n\nfloat object3(vec3 p, float width, float height){\n    p-=vec3(0,0,height);\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(width,width,0.5));\n    p.xy = DF(p.xy,vec2(3.));\n    p.xy -=1.4;\n    p.xy *= Rot(radians(45.));\n    p.z+=0.3;\n    float d2 = sdBox(p,vec3(width*0.01,width*0.05,0.3));\n    p = prevP;\n    d2 = max(-(p.y+1.3),d2);\n    d = min(d,d2);\n    \n    p.xy*=Rot(radians(2.*height*120.));\n    p.xy = DF(p.xy,vec2(2.));\n    p.xy -=0.7;\n    p.z+=0.4;\n    d2 = length(p.xy)-0.5;\n    d2 = max((abs(p.z)-0.5),d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z+=0.5;\n    d2 = length(p.xy)-0.8;\n    d2 = max((abs(p.z)-0.5),d2);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.xy*=Rot(radians(2.*height*120.));\n    p.y-=0.8;\n    p.z+=0.6;\n    d2 = sdBox(p,vec3(width*0.02,width*0.25,0.35));\n    d = min(d,d2);\n    \n    p = prevP;\n    p.z+=0.2;\n    p.xy = abs(p.xy)-2.;\n    d2 = length(p.xy)-0.2;\n    d2 = max((abs(p.z)-0.5),d2);\n    d = min(d,d2);    \n    \n    return d;\n}\n\nfloat object4(vec3 p, float width, float height){\n    p-=vec3(0,0,height);\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(width,width,1.));\n    \n    p = prevP;\n    p.z+=1.2;\n    float d2 = sdBox(p,vec3(width*0.13,width*0.85,0.1));\n    d = max(-d2,d);    \n    \n    p = prevP;\n    p.z+=1.;\n    p.y = mod(p.y,0.5)-0.25;\n    d2 = sdBox(p,vec3(width*0.11,width*0.05,0.1));\n    \n    p = prevP;\n    d2 = max(abs(p.y)-2.,d2);\n    p.y-=0.25;\n    d2 = max(p.y-(height*1.75),d2);\n    d = min(d,d2);\n    \n    \n    p = prevP;\n    p.x = abs(p.x)-0.9;\n    p.z+=1.2;\n    d2 = sdBox(p,vec3(width*0.13,width*0.85,0.1));\n    d = max(-d2,d);    \n    \n    p = prevP;\n    p.x = abs(p.x)-0.9;\n    p.z+=1.;\n    p.y = mod(p.y,0.5)-0.25;\n    d2 = sdBox(p,vec3(width*0.11,width*0.05,0.1));\n    \n    p = prevP;\n    p.x = abs(p.x)-0.9;\n    d2 = max(abs(p.y)-2.,d2);\n    p.y-=0.25;\n    d2 = max(p.y-cos(iTime*2.2)*1.75,d2);\n    d = min(d,d2);    \n    \n    \n    p = prevP;\n    p.x = abs(p.x)-1.8;\n    p.z+=1.2;\n    d2 = sdBox(p,vec3(width*0.13,width*0.85,0.1));\n    d = max(-d2,d);    \n    \n    p = prevP;\n    p.x = abs(p.x)-1.8;\n    p.z+=1.;\n    p.y = mod(p.y,0.5)-0.25;\n    d2 = sdBox(p,vec3(width*0.11,width*0.05,0.1));\n    \n    p = prevP;\n    p.x = abs(p.x)-1.8;\n    d2 = max(abs(p.y)-2.,d2);\n    p.y-=0.25;\n    d2 = max(p.y-sin(iTime*2.5)*1.75,d2);\n    d = min(d,d2);     \n    \n    return d;\n}\n\nfloat object5_knob(vec3 p, float width, float height, float val){\n    vec3 prevP = p;\n    \n    p.xy = DF(p.xy,vec2(2.));\n    p.xy -=0.6;\n    p.xy *= Rot(radians(45.));\n    p.z+=1.03;\n    float d = length(p)-0.1;\n    p = prevP;\n    d = max(-(p.y+0.7),d);\n    \n    p = prevP;\n    p.xy*=Rot(radians(5.*sin(iTime*val*0.01+(height*0.5))*val*0.5));\n    p.z+=0.8;\n    float d2 = length(p.xy)-0.6;\n    d2 = max((abs(p.z)-0.5),d2);\n    d = min(d,d2);\n    p.z+=0.65;\n    d2 = sdBox(p,vec3(width*0.01,width*0.3,0.12));\n    d = max(-d2,d);\n    \n    return d;\n}\n\nfloat object5(vec3 p, float width, float height){\n    p-=vec3(0,0,height);\n    vec3 prevP = p;\n    float d = sdBox(p,vec3(width,width,1.));\n    \n    p.x -= 1.1;\n    p.y-=1.1;\n    float d2 = object5_knob(p,width,height,-70.);\n    d = min(d,d2);\n    p.y+=2.2;\n    d2 = object5_knob(p,width,height,55.);\n    d = min(d,d2);\n    \n    p = prevP;\n    p.x += 1.1;\n    p.y-=1.1;\n    d2 = object5_knob(p,width,height,80.);\n    d = min(d,d2);\n    p.y+=2.2;\n    d2 = object5_knob(p,width,height,-60.);\n    d = min(d,d2);\n    \n    return d;\n}\n\nfloat drawObjects(vec3 p){\n    p.y-=iTime*2.5;\n    \n    float spacing = 5.;\n    vec3 scaledP = p / spacing;\n    vec3 center = floor(scaledP)+0.5;\n    float randomOffset = hash(hash(center.x, center.y), center.z) * 6.28;\n    vec3 neighbour = center + face(scaledP-center);\n    float maxAnimHeight = 0.5;\n    float height = sin(3.*iTime+center.x + center.y + randomOffset)*maxAnimHeight;\n    float width = 2.35;\n    \n    float n = hash(hash(center.x, center.y), center.z);\n    vec3 npos = p - neighbour;\n    \n    float d1 = sdBox(vec3(length(npos.xy), npos.z, 0), vec3(0.4,0.4,10.));\n    float d2 = object1(p-vec3(center.x * spacing, center.y * spacing, 0),width,height);\n    \n    if(n>=-0.6 && n <-0.4){\n        d2 = object2(p-vec3(center.x * spacing, center.y * spacing, 0),width,height);\n    } else if(n>=-0.4 && n<0.0){\n        d2 = object3(p-vec3(center.x * spacing, center.y * spacing, 0),width,height);\n    } else if(n>=0.0 && n<0.4){\n        d2 = object4(p-vec3(center.x * spacing, center.y * spacing, 0),width,height);\n    } else if(n>=0.4 && n<=1.){\n        d2 = object5(p-vec3(center.x * spacing, center.y * spacing, 0),width,height);\n    }\n    \n    float d = min(d1,d2);\n    return d;\n}\n\nvec2 GetDist(vec3 p) {\n    vec3 prevP = p;\n    \n    float d = drawObjects(p);    \n    return vec2(d,0);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd, float side, int stepnum) {\n    vec2 dO = vec2(0.0);\n    \n    for(int i=0; i<stepnum; i++) {\n        vec3 p = ro + rd*dO.x;\n        vec2 dS = GetDist(p);\n        dO.x += dS.x*side;\n        dO.y = dS.y;\n        \n        if(dO.x>MAX_DIST || abs(dS.x)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p).x;\n    vec2 e = vec2(.0003, -0.0005);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return normalize(n);\n}\n\nvec3 R(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/3lsSzf\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=ZERO; i<4; i++ )\n    {\n        float h = 0.01 + 0.15*float(i)/4.0;\n        vec3 opos = pos + h*nor;\n        float d = GetDist( opos ).x;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 2.0*occ, 0.0, 1.0 );\n}\n\nvec3 diffuseMaterial(vec3 n, vec3 rd, vec3 p, vec3 col) {\n    float occ = calcOcclusion(p,n);\n    vec3 diffCol = vec3(0.0);\n    vec3 lightDir = normalize(vec3(1,10.,1));\n    float diff = clamp(dot(n,lightDir),0.0,1.0);\n    float skyDiff = clamp(0.5+0.5*dot(n,vec3(0,1,0)),0.0,1.0);\n    float bounceDiff = clamp(0.5+0.5*dot(n,vec3(0,-1,0)),0.0,1.0);\n    diffCol = col*vec3(-0.5)*diff*occ;\n    diffCol += col*vec3(1.0,1.0,0.9)*skyDiff*occ;\n    diffCol += col*vec3(0.5)*bounceDiff*occ;\n    diffCol += col*pow(max(dot(rd, reflect(lightDir, n)), 0.0), 60.)*occ; // spec\n        \n    return diffCol;\n}\n\n// the reflection code reference from the following: https://www.shadertoy.com/view/tsXSRs\nvec3 reflectionBg(vec2 uv){\n    const float pi = 3.14159;\n    return mix(vec3(0.05), vec3(1.8), smoothstep(pi*0.4, pi*1.2, uv.y));\n}\n\nvec3 materials(int mat, vec3 n, vec3 rd, vec3 p, vec3 col){\n    float IOR =\t1.309; //IOR:index of reflection\n    vec3 rdir = refract(-rd,n,1.0/IOR); \n    col = reflectionBg(SUV(rdir));\n    col = diffuseMaterial(n,rd,p,col);\n    return col;\n}\n\nfloat cubicInOut(float t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\n\nfloat getTime(float t, float duration){\n    return clamp(t,0.0,duration)/duration;\n}\n\nvec3 cameraAnim(vec3 p){\n\n    float rotX = 0.;\n    float rotY = -10.;\n\n    float frame = mod(iTime,20.0);\n    float time = frame;\n\n    if(frame>=5. && frame<10.){\n        time = getTime(time-5.,0.6);\n\n        rotY = -10.+cubicInOut(time)*-10.;\n        rotX = cubicInOut(time)*-30.;\n    } else if(frame>=10. && frame<15.){\n        time = getTime(time-10.,0.6);\n        \n        rotY = -20.;\n        rotX = -30.+cubicInOut(time)*60.;\n    } else if(frame>=15.){\n        time = getTime(time-15.,0.6);\n\n        rotY = -20.+cubicInOut(time)*10.;\n        rotX = 30.+cubicInOut(time)*-30.;\n    }\n\n    p.xz*=Rot(radians(rotX));\n    p.yz*=Rot(radians(rotY));\n    return p;\n}\n\nfloat getZoomAnimationValue(){\n    float easeValue = 0.;\n    float frame = mod(iTime,20.0);\n    float time = frame;\n    \n    float duration = 1.2;\n    \n    if(frame>=5. && frame<10.){\n        time = getTime(time-5.,duration);\n        easeValue = cubicInOut(time);\n    } else if(frame>=10. && frame<15.){\n        time = getTime(time-10.,0.6);\n        easeValue = 1.;\n    } else if(frame>=15.){\n        time = getTime(time-15.,duration);\n         easeValue = 1.0-cubicInOut(time);\n    }\n    \n    return easeValue;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 ro = vec3(0, 0., -19.+(4.*getZoomAnimationValue()));\n    ro = cameraAnim(ro);\n    \n    vec3 rd = R(uv, ro, vec3(0,0.0,0), 1.0);\n    vec2 d = RayMarch(ro, rd, 1.,MAX_STEPS);\n    vec3 col = vec3(.0);\n    \n    if(d.x<MAX_DIST) {\n        vec3 p = ro + rd * d.x;\n        vec3 n = GetNormal(p);\n        int mat = int(d.y);\n        col = materials(mat,n,rd,p,col);\n    }\n\n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}