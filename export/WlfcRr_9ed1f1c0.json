{"ver":"0.1","info":{"id":"WlfcRr","date":"1593610192","viewed":170,"name":"Icosahedron lit","username":"Omega","description":"Icosahedron with illuminated triangles","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["light","icosahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define VERTEXCOUNT 12\n#define TRIANGLECOUNT 20\n#define PHI 1.618\n#define LIGHTDIRECTION normalize(vec3(0, 1., -0.5))\n#define LIGHTINTENSITY vec3(0.6, 0.4, 0.4)\n#define AMBIENTLIGHT vec3(0.1, 0.1, 0.3)\n\n\n// This array stores the positions of all 12 vertices in the form of vec3\nvec3 vertices[VERTEXCOUNT] = vec3[VERTEXCOUNT]\n(\n    vec3(-1,  PHI, 0),\n    vec3( 1,  PHI, 0),\n    vec3(-1, -PHI, 0),\n    vec3( 1, -PHI, 0),\n    \n    vec3(0, -1,  PHI),\n    vec3(0,  1,  PHI),\n    vec3(0, -1, -PHI),\n    vec3(0,  1, -PHI),\n    \n    vec3( PHI, 0, -1),\n    vec3( PHI, 0,  1),\n    vec3(-PHI, 0, -1),\n    vec3(-PHI, 0,  1)\n);\n\n// This array stores the indices of three vertices which form a triangle\nint triangles[TRIANGLECOUNT * 3] = int[TRIANGLECOUNT * 3]\n(\n     5, 11,  0,\n     1,  5,  0,\n     7,  1,  0,\n    10,  7,  0,\n    11, 10,  0,\n    \n     9,  5,  1,\n     4, 11,  5,\n     2, 10, 11,\n     6,  7, 10,\n     8,  1,  7,\n    \n     4,  9,  3,\n     2,  4,  3,\n     6,  2,  3,\n     8,  6,  3,\n     9,  8,  3,\n    \n     5,  9,  4,\n    11,  4,  2,\n    10,  2,  6,\n     7,  6,  8,\n     1,  8,  9\n);\n\n// This array stores the rotated and translated position of the vertices\nvec3 vertexbuffer[VERTEXCOUNT];\n\nstruct Tri2D\n{\n    vec2 a;\n    vec2 b;\n    vec2 c;\n};\n    \nstruct Tri3D\n{\n    vec3 a;\n    vec3 b;\n    vec3 c;\n};\n\n       \n// This function rotates a vec2 by 90 degrees around the origin  \nvec2 rot90(vec2 vec)\n{\n    return vec2(vec.y, -vec.x);\n}   \n\n// This function returns 1 if the point p lies in the triangle t otherwise 0\nfloat mask(Tri2D t, vec2 p)\n{\n    float ab = step(0., dot(rot90(t.b-t.a), p-t.a));\n    float bc = step(0., dot(rot90(t.c-t.b), p-t.b));\n    float ca = step(0., dot(rot90(t.a-t.c), p-t.c));\n    return ab * bc * ca;\n}\n\n// This function projects a three-dimensional triangle on a two-dimensional plane\nTri2D project(Tri3D t)\n{\n    vec2 a = vec2(t.a.x/t.a.z, t.a.y/t.a.z);\n    vec2 b = vec2(t.b.x/t.b.z, t.b.y/t.b.z);\n    vec2 c = vec2(t.c.x/t.c.z, t.c.y/t.c.z);\n    return Tri2D(a, b, c);\n}\n\n// This function calculates the intensity of light hitting a triangle\nvec3 light(Tri3D t3)\n{\n    vec3 normal = normalize(cross(t3.a - t3.c, t3.b - t3.c));\n    return dot(normal, LIGHTDIRECTION) * LIGHTINTENSITY;\n}\n\n\n// This functions rolls a point by an angle a around the origin\nvec3 roll(vec3 p, float a)\n{\n    vec3 rolled = vec3(p.x * cos(a) - p.y * sin(a), p.x * sin(a) + p.y * cos(a), p.z);\n    return rolled;\n}\n\n// This function pitches a point by an angle a around the origin\nvec3 pitch(vec3 p, float a)\n{\n    vec3 pitched = vec3(p.x, p.y * cos(a) - p.z * sin(a), p.y * sin(a) + p.z * cos(a));\n    return pitched;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord/iResolution.y) * 2.;\n    uv -= iResolution.xy/iResolution.y;\n\n    uv *= 0.12;\n    \n    float offsetx = (iMouse.x / (iResolution.x)) * 8. + iTime * 0.8;\n    float offsety = (iMouse.y / (iResolution.y)) * 8. + iTime * 0.5;\n\n    \n    // Rotating and translating the vertices and storing them in the vertexbiffer\n    for (int i = 0; i < VERTEXCOUNT; i++)\n    {\n        vertexbuffer[i] = roll(pitch(vertices[i], iTime * 0. + offsety), iTime * 0. - offsetx) - vec3(0., 0., 16.);\n    }\n    \n    // Projecting the triangles on the  \n    vec3 col = AMBIENTLIGHT;\n    for (int i = 0; i < TRIANGLECOUNT * 3; i += 3)\n    {\n        Tri3D tri = Tri3D(vertexbuffer[triangles[i]], vertexbuffer[triangles[i+1]],  vertexbuffer[triangles[i+2]]);\n        col += mask(project(tri), uv) * light(tri);\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}