{"ver":"0.1","info":{"id":"McXyz2","date":"1721317150","viewed":131,"name":"Drop 02","username":"Elsio","description":"refatoração do shader anterior","likes":15,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","grid","rectangle","prism","city","block","traversal","sparse","spiderman"],"hasliked":0,"parentid":"lcfyW7","parentname":"Chuva de cubos"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(a)    mat2(cos(a + vec4(0, 11, 33, 0)))\n#define h21(a)    fract(sin(dot(a, vec2(453.2734, 255.4363))) * 994.3434)\n#define normal(p) normalize(map(p)-vec3(map(p-e.xyy),map(p-e.yxy),map(p-e.yyx)))\n#define INIT      vec2 r = iResolution.xy, e = vec2(.001, 0); u = vec2(u - .5 * r) / r.y;\n#define VARIANCE  .3\n#define far 60.\n\nvec3 gD;\nfloat cor;\n\nfloat sBox(vec3 p){\n    float k = 10.;\n    p = pow(abs(p), vec3(k));\n    return pow(p.x + p.y + p.z, 1./k) - .49;\n}\n\nfloat Grid(vec3 p) {\n    vec3 m = (sign(gD) * .5 - p) / gD;\n    return min(min(m.x, m.z), max(p.y, .1)) + .01;\n}\n\n\nfloat rain(vec3 p){\n    vec3 div = vec3(1),\n         id = floor(p);\n         \n    float h = 18.,\n          t = iTime + h21(id.xz) * VARIANCE; // def variance on header\n          \n    p.y += sin(length(id.xz) * .8 + t) + fract(t);\n    cor = (p.y < .0 ? floor(p.y): 0.) + floor(t);\n    \n    if(p.y > .0) \n        div.y = h; \n    \n    p.y += (div.y/2. - .5) * fract(t);\n\n    p = mod(p, div) - div/2.;\n    return min(Grid(p), sBox(p));\n}\n\nfloat map(vec3 p) {\n    float d = rain(p);\n    \n    d = max(max(d, p.z - 5.), -p.z);\n    d = max(max(d, -p.x - 7.), p.x - 7.);\n    return d;\n}\n\n\nvoid mainImage(out vec4 o, vec2 u) {\n    INIT\n    \n    float i, d, s, t = iTime;\n    vec3 N, L, col,\n         p = vec3(0, 5, -7), \n         D = normalize(vec3(u, 1));\n    \n    D.zy *= rot(.4);\n    gD = D;\n    \n    s = 1.;\n    while(i++ < 140. && s > .001 && d < far) \n        s = map(p),\n        p += s * D,\n        d += s;\n\n    col += vec3(3, 5, 8) / 64.;\n    \n    if(d < far)\n        N = normal(p), \n        L = normalize(vec3(cos(t) * 5., 3, -3) - D), \n        \n        cor = mod(cor, 3.),\n        col = cor == 1. ? vec3(1, .6, 0) : cor == 2. ? vec3(0) : vec3(1),\n\n        col *= (.8 * max(0., dot(L, N)) + .5) * .6,  // diff\n        col += pow(max(0., dot(L, N)), 10.) * .3;    // spec\n    \n    o.rgb =  pow(col, vec3(.4));                     // gama  \n}\n\n// O que este shader tem em comum com este outro?\n// https://www.shadertoy.com/view/lf23DG","name":"Image","description":"","type":"image"}]}