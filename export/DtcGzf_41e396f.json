{"ver":"0.1","info":{"id":"DtcGzf","date":"1682802683","viewed":78,"name":"Transparent RayMarch","username":"wwisniewski","description":"Nothing interesting to be honest. I am not happy about the performance but glad it can be achieved","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","transparency","opacity"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n#define MAX_STEPS 900\n#define MAX_DIST 100.\n#define SURF_DIST .01\n\nfloat dBox(vec3 p, vec3 s) {\n    return length(max(abs(p)-s, 0.0));\n}\n\nfloat dTorus(vec3 p, vec2 t) {\n    vec2 q = vec2(length(p.xz)-t.x, p.y);\n    return length(q)-t.y;\n}\n\nfloat GetDist(vec3 p) {\n\tvec4 s = vec4(0, 1, 6, 1);\n    \n    float sphereDist =  length(p-s.xyz)-s.w;\n    float planeDist = p.y;\n    float boxDist = dBox(p - vec3(-2, .5, 6), vec3(.5));\n    float torusDist = dTorus(p - vec3(2, .5, 6), vec2(.9, .9));\n    float d = min(sphereDist, planeDist);\n    d = min(d, torusDist);\n    // float d = sphereDist;\n    return d;\n}\n\nvec3 GetNormal(vec3 p) {\n    float d = GetDist(p);\n    vec2 e = vec2(.01, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(0, 2, 6);\n    lightPos.xz += vec2(sin(iTime), cos(iTime))*2.;\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p);\n    \n    float dif = (dot(n, l))+1.01;\n    \n    return dif;\n}\n\n\nvec3 RayMarch(vec3 ro, vec3 rd) {\n    float dO=0., aD; // initial distance\n    vec3 accumulatedColor = vec3(0.0);\n    int layers = 0;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n        vec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n\n        aD = (SURF_DIST-abs(dS))/SURF_DIST;\n\n        if(dO>MAX_DIST || accumulatedColor.y<0. || layers > 90) break;\n\n        if(aD>0.) {\n            vec3 selfColor = vec3(GetLight(p)); //white\n            accumulatedColor += selfColor*(aD/dO/2.0);\n            layers++;\n        }\n\n        dO += max(dS, SURF_DIST);\n    }\n    \n    return max(accumulatedColor, vec3(0.0));\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0);\n    \n    vec3 ro = vec3(0, 1, 0); // ro is also camera origin position\n    vec3 rd = normalize(vec3(uv.x, uv.y, 1));\n\n    vec3 accumulatedColor = vec3(0.0);\n\n    col = RayMarch(ro, rd);\n    \n    col = pow(col, vec3(.3545));\t// gamma correction\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}