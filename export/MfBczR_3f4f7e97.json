{"ver":"0.1","info":{"id":"MfBczR","date":"1721836192","viewed":59,"name":"really simple screen loop","username":"nextrix","description":"loop uv yay","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["screen","iteration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    vec2 uv = I/iR.xy;\n    vec2 loopuv = uv;\n    vec2 loopuv2 = uv;\n    \n    float amnt = (iM.z > 0.) ? iM.y/iR.y : 1.;\n    float itera = amnt * iter;\n    \n    \n    if (LOOPED == 1) { // with loop\n        float rotation = (iM.z > 0.) ? .25 - iM.x/iR.x * .5 : .0;\n        for(float i = 0.; itera*4. > i; i++) {\n            // loop\n            loopuv2 = (exponential==1) ? uv : loopuv2; // set uv\n            loopuv = mix(loopuv2, vec2(0.5), (-dist/10.) * i); // iterate uv and zoom out per iteration(0.5 is centering)\n\n            // rotation\n            loopuv -= 0.5;\n            loopuv.x *= aspect;\n            loopuv *= r2d(rotation * i);\n            loopuv.x /= aspect;\n            loopuv += 0.5;\n\n            // apply looped uv to uv if its within borders (this makes it actually loop)\n            uv = mix(uv, loopuv, bordercheck(loopuv));\n        }\n    } \n    else { // without loop (added after xor golf'd mine lol https://www.shadertoy.com/view/Xcjyzz)\n        vec2 f_iter = floor(uv * itera * 2.0);\t // front iterations\n\n        vec2 r_iter = floor((1. - uv) * itera * 2.0); // reversed iterations\n\n        vec2 min_iter = min(f_iter, r_iter);\t\t\n\n        float offset_mul = min(min_iter.x, min_iter.y) * dist;\t\t\n\n        vec2 offset = vec2(0.5) / iter * offset_mul;\n\n        vec2 uv_mul = 1. / (vec2(1.) - offset * 2.);\n\n        uv = (uv - offset) * uv_mul;\n    }\n    \n    vec3 col = texture(iChannel0, uv).rgb;\n    \n    O = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define iR iResolution\n#define iM iMouse\n\n#define aspect iR.x / iR.y\n\n#define dist 1.\n#define iter 8.\n#define exponential 0\n\n#define LOOPED 1\n\nfloat bordercheck(in vec2 uv) {\n    return (floor(uv) != vec2(0.)) ? 0. : 1.;\n}\n\nmat2 r2d (float a) {\n    float c = cos(a);\n    float s = sin(a);\n    return mat2(c, s, -s, c);\n}","name":"Common","description":"","type":"common"}]}