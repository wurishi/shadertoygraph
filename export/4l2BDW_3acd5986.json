{"ver":"0.1","info":{"id":"4l2BDW","date":"1515824217","viewed":296,"name":"Fast Game of Life","username":"fu5ha","description":"A (pretty) fast implementation of Conway's game of life","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["cellular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n        hue += 1.0;\n    else if (hue > 1.0)\n        hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n        res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n        res = f2;\n    else if ((3.0 * hue) < 2.0)\n        res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n        res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n    \n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z);\n    } else {\n        float f2;\n        \n        if (hsl.z < 0.5)\n            f2 = hsl.z * (1.0 + hsl.y);\n        else\n            f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n            \n        float f1 = 2.0 * hsl.z - f2;\n        \n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }   \n    return rgb;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 samp = texture(iChannel0,uv);\n    vec3 hsl = vec3(0.2 * cos(11000.*samp.g) + 0.5, 0.5 * cos(10000.*samp.g + 3.14159265) + 0.5, 0.9 - 0.9 * clamp(0., 1., samp.g*800.));\n    vec3 rgb = hsl2rgb(hsl) * samp.r;\n\tfragColor = vec4(rgb.r, rgb.g, rgb.b, samp.r);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float fetch(ivec2 p) {\n    return texelFetch(iChannel0,p,0).r;\n}\n\nfloat fetchlt(ivec2 p) {\n    return texelFetch(iChannel0,p,0).g;\n}\n\nfloat snoise(in vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(vec3(0.), 1.);\n    if (iFrame == 0) {\n        fragColor.r = step(0.7, snoise(fragCoord*iDate.yz));\n        return;\n    }\n    \n    ivec2 uv = ivec2(fragCoord);\n   \tfloat cur = fetch(uv);\n    mat3 adjacent = mat3(\n        fetch(uv + ivec2(-1,1)), fetch(uv + ivec2(-1,0)), fetch(uv + ivec2(-1,-1)),\n        fetch(uv + ivec2(0,1)), 0., fetch(uv + ivec2(0,-1)),\n        fetch(uv + ivec2(1,1)), fetch(uv + ivec2(1,0)), fetch(uv + ivec2(1,-1))\n    );\n    \n    \n   \tfloat total = (\n        (adjacent[0][0] + adjacent[0][1] + adjacent[0][2]) +\n    \t(adjacent[1][0] + adjacent[1][1] + adjacent[1][2]) +\n        (adjacent[2][0] + adjacent[2][1] + adjacent[2][2]));\n    // 0 = dead, 1 = live\n    float r1 = (step(2., total) - step(4., total)) * (cur);\n    float r2 = (step(2.9, total) - step(3.1, total));\n    float result = step(1., r1 + r2);\n    \n    // encode lifetime in green channel\n    float lt = 0.;\n    if (result * cur >= 1.) {\n        float cur_lt = fetchlt(uv);\n        lt = min(cur_lt + 0.000001, 1.);\n    }\n    \n    fragColor.r = result;\n    fragColor.g = lt;\n                          \n}","name":"Buffer A","description":"","type":"buffer"}]}