{"ver":"0.1","info":{"id":"Mf2Sz3","date":"1706644750","viewed":55,"name":"line solver","username":"BYP","description":"rounded line intersection point of interest solver areas","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/// We have static vars at home...\n#define cl_r 0.6*vec4(1.f, 0.f, 0.f, 1.f)\n#define cl_g 0.6*vec4(0.f, 1.f, 0.f, 1.f)\n#define cl_b 0.6*vec4(0.f, 0.f, 1.f, 1.f)\n#define cl_p 0.6*vec4(1.f, 0.f, 1.f, 1.f)\n#define cl_w 0.6*vec4(1.f, 1.f, 1.f, 1.f)\n#define cl_l 0.8*vec4(0.f, 0.f, 0.f, 1.f)\n\nfloat sdCircle(vec2 pos, vec2 cen, float radius){\n\treturn length(pos - cen) - radius;\n}\n\nfloat sdSegment(vec2 pos, vec2 a, vec2 b, float radius){\n\tvec2 ap = pos-a;\n\tvec2 ab = b-a;\n\tfloat h = clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0);\n\treturn length(ap - h*ab) - radius;\n}\n\nfloat sdLine(vec2 pos, vec2 a, vec2 b, float radius){\n\tvec2 ap = pos-a;\n\tvec2 ab = b-a;\n\tfloat h = dot(ap, ab) / dot(ab, ab);\n\treturn length(ap - h*ab) - radius;\n}\n\nfloat hs(vec2 pos, vec2 a, vec2 b){\n\tvec2 c0 = pos-a;\n\tvec2 c1 = pos-b;\n\treturn c0.x*c1.y - c0.y*c1.x;\n}\n\nvec4 blend(vec4 bg, vec4 cl, float alpha){\n\treturn bg*(1.0 - alpha*cl.a) + alpha*cl;\n}\n\n#define R_SDF(c, d) color = blend(color, c, 1.0 - smoothstep(-1.0, 0.0, d))\n\nvec2 norm2D(vec2 v){\n\treturn vec2(-v.y, v.x);\n}\n\nvec2 intersect(vec2 ai, vec2 at, vec2 ci, vec2 ct){\n\tfloat cos_x = dot(at, ct);\n\tfloat sin_x = sqrt(1.f - cos_x*cos_x);\n\n\tvec2 aci = (ai-ci);\n\tfloat cos_c = dot(ct, aci) / length(aci);\n\tfloat sin_c = sqrt(1.f - cos_c*cos_c);\n\n\tfloat l = length(aci)*(sin_c / sin_x);\n\tvec2 x = ai + l*at;\n\treturn x;\n}\n\nfloat isStraightF(vec2 a, vec2 b, vec2 c){\n\tfloat base   = sdLine(a, b, c, 1.f);\n\tfloat height = sdLine(c, a, b, 1.f);\n\treturn min(base, height);\n}\n\nfloat innerF(vec2 a, vec2 b, vec2 c){\n\tfloat wind = hs(a, b, c);\n\tbool isStraight = isStraightF(a, b, c) < 0.f;\n\tfloat inner = isStraight ? -1.0 : sign(wind);\n\treturn inner;\n}\n\nvec2 R_Solve(inout vec4 color, vec2 pos, vec2 x, vec2 a, vec2 b, vec2 c, float r){\n\tfloat sdAB = sdSegment(pos, a, b, r);\n\tfloat sdBC = sdSegment(pos, b, c, r);\n\tfloat sdX = max(sdAB, sdBC);\n\n\tvec4 cl_x = length(x-b) < r+0.5 ? cl_b : cl_r;\n\tR_SDF(cl_x, abs(sdX)-2.f);\n    R_SDF(cl_g, sdCircle(pos, x, 5.f));\n    return x;\n}\n\nvec2 solve1(inout vec4 color, vec2 pos, vec2 a, vec2 b, vec2 c, float r){\n\tfloat inner = innerF(a, b, c);\n\tvec2 at = normalize(b-a);\n\tvec2 ct = normalize(b-c);\n\tvec2 an = inner*norm2D(at);\n\tvec2 cn = inner*norm2D(-ct);\n\n\tvec2 ai = a + r*an;\n\tvec2 ci = c + r*cn;\n\n\tbool aInside = -inner*hs(ai, ci, ci+ct) > 0.f;\n\tbool cInside = -inner*hs(ci, ai, ai+at) < 0.f;\n\tif(!aInside || !cInside){ return vec2(1e7,1e7); }\n\n\tvec2 x = intersect(ai, at, ci, ct);\n\n\tR_SDF(cl_l, sdCircle(pos, ai, 5.f));\n\tR_SDF(cl_l, sdCircle(pos, ci, 5.f));\n\tR_SDF(cl_l, sdSegment(pos, ai, ci, 2.f));\n\tR_SDF(cl_l, sdSegment(pos, ai, x, 2.f));\n\tR_SDF(cl_l, sdSegment(pos, ci, x, 2.f));\n\treturn R_Solve(color, pos, x, a, b, c, r);\n}\n\nvec2 solve2(inout vec4 color, vec2 pos, vec2 a, vec2 b, vec2 c, float r){\n\tfloat inner = innerF(a, b, c);\n\n\tvec2 ac = 0.5f*(a+c);\n\tfloat len = length(ac-a);\n\tfloat h = sqrt(r*r - len*len);\n\tvec2 x = ac - h*inner*norm2D(normalize(a-c));\n\n\tR_SDF(cl_l, sdCircle(pos, ac, 5.f));\n\tR_SDF(cl_l, sdSegment(pos, a, c, 2.f));\n\tR_SDF(cl_l, sdSegment(pos, a, x, 2.f));\n\tR_SDF(cl_l, sdSegment(pos, c, x, 2.f));\n\tR_SDF(cl_g, sdCircle(pos, x, 5.f));\n\treturn R_Solve(color, pos, x, a, b, c, r);;\n}\n\nvec2 solve3(inout vec4 color, vec2 pos, vec2 a, vec2 b, vec2 c, float r){\n\tfloat inner = innerF(a, b, c);\n\tvec2 at = normalize(b-a);\n\tvec2 ct = normalize(b-c);\n\tvec2 an = inner*norm2D(at);\n\tvec2 cn = inner*norm2D(-ct);\n\n\tvec2 ai = a + r*an;\n\tvec2 ci = c + r*cn;\n\n\tfloat l = dot(c-ai, at);\n\tvec2 q = ai + l*at;\n\tfloat i = sqrt(r*r - dot(c-q, c-q));\n\tvec2 x = q - i*at;\n\n\tR_SDF(cl_l, sdSegment(pos, c, q, 2.f));\n\tR_SDF(cl_l, sdSegment(pos, c, x, 2.f));\n\tR_SDF(cl_l, sdCircle(pos, q, 5.f));\n\tR_SDF(cl_g, sdCircle(pos, x, 5.f));\n\treturn R_Solve(color, pos, x, a, b, c, r);\n}\n\nvec2 solve4(inout vec4 color, vec2 pos, vec2 a, vec2 b, vec2 c, float r){\n\treturn solve3(color, pos, c, b, a, r);\n}\n\nfloat sdValid(vec2 x, vec2 a, vec2 b, vec2 c, float r){\n\tfloat sdAB = abs(sdSegment(x, a, b, r));\n\tfloat sdBC = abs(sdSegment(x, b, c, r));\n\treturn max(sdAB, sdBC)-1.f;\n}\n\nvoid mainImage(out vec4 color, vec2 pos){\n    vec2 dim = iResolution.xy;\n\tcolor = vec4(0.2, 0.2, 0.2, 1.0);\n\n\tfloat r = min(dim.x, dim.y)/10.0;\n\tvec2 a = vec2(0.3, 0.4)*dim;\n\tvec2 b = vec2(0.5, 0.5)*dim;\n    vec2 c = vec2(0.8, 0.3)*dim;\n\n    if(length(iMouse.xy) > 10.f){ c = iMouse.xy; }\n\n\tR_SDF(cl_l, sdCircle(pos, a, 10.f));\n\tR_SDF(cl_l, sdCircle(pos, b, 10.f));\n\tR_SDF(cl_l, sdCircle(pos, c, 10.f));\n\n\tfloat sdAB = sdSegment(pos, a, b, r);\n\tfloat sdBC = sdSegment(pos, b, c, r);\n\tR_SDF(cl_w, min(sdAB, sdBC));\n\n#if 1\n\tvec4 cl_no = vec4(0.f, 0.f, 0.f, 0.f);\n\n\t/// Solve 1: External Triangle\n\t{\n\t\tvec4 cl_xp = vec4(0.f, 0.f, 0.f, 0.f);\n\t\tvec2 xp = solve1(cl_no, pos, a, b, pos, r);\n\t\tvec2 xc = solve1(cl_xp, pos, a, b, c,   r);\n\t\tfloat sdp = sdValid(xp, a, b, pos, r);\n\t\tfloat sdc = sdValid(xc, a, b, c,   r);\n\t\tR_SDF(0.2*cl_b, sdp);\n\t\tR_SDF(cl_w, sign(length(b-xp) - (r + 0.5)));\n        R_SDF(cl_xp, sdc);\n\t}\n\n\t/// Solve 2: Isosceles Triangle\n\t{\n\t\tvec4 cl_xp = vec4(0.f, 0.f, 0.f, 0.f);\n\t\tvec2 xp = solve2(cl_no, pos, a, b, pos, r);\n\t\tvec2 xc = solve2(cl_xp, pos, a, b, c,   r);\n\t\tfloat sdp = sdValid(xp, a, b, pos, r);\n\t\tfloat sdc = sdValid(xc, a, b, c,   r);\n\t\tR_SDF(0.2*cl_r, sdp);\n        R_SDF(cl_xp, sdc);\n\t}\n\n\t/// Solve 3: Right Triangle (C)\n\t{\n\t\tvec4 cl_xp = vec4(0.f, 0.f, 0.f, 0.f);\n\t\tvec2 xp = solve3(cl_no, pos, a, b, pos, r);\n\t\tvec2 xc = solve3(cl_xp, pos, a, b, c,   r);\n\t\tfloat sdp = sdValid(xp, a, b, pos, r);\n\t\tfloat sdc = sdValid(xc, a, b, c,   r);\n\t\tR_SDF(0.2*cl_g, sdp);\n        R_SDF(cl_xp, sdc);\n\t}\n\n\t/// Solve 4: Right Triangle (A)\n\t{\n\t\tvec4 cl_xp = vec4(0.f, 0.f, 0.f, 0.f);\n\t\tvec2 xp = solve4(cl_no, pos, a, b, pos, r);\n\t\tvec2 xc = solve4(cl_xp, pos, a, b, c,   r);\n\t\tfloat sdp = sdValid(xp, a, b, pos, r);\n\t\tfloat sdc = sdValid(xc, a, b, c,   r);\n\t\tR_SDF(0.2*cl_p, sdp);\n        R_SDF(cl_xp, sdc);\n\t}\n\n\tR_SDF(cl_l, isStraightF(a, b, pos)-1.f);\n    if(isStraightF(a, b, c) < 0.f){\n        R_SDF(cl_b, abs(max(sdAB, sdBC))-2.f);\n    }\n    \n#else\n\n    float wind = hs(a, b, c);\n\tbool isStraight = isStraightF(a, b, c) < 0.f;\n\tfloat inner = isStraight ? -1.0 : sign(wind);\n\n\tvec2 at = normalize(b-a);\n\tvec2 ct = normalize(b-c);\n\tvec2 an = inner*norm2D(at);\n\tvec2 cn = inner*norm2D(-ct);\n\n\tvec2 ai = a + r*an;\n\tvec2 ci = c + r*cn;\n\n\tbool aInside = -inner*hs(ai, ci, ci+ct) > 0.f;\n\tbool cInside = -inner*hs(ci, ai, ai+at) < 0.f;\n    \n    /// I just really like the symmetry for these\n\tR_SDF(cl_l, sdLine(pos, ai, ai+at, 2.f));\n\tR_SDF(cl_l, sdLine(pos, ci, ci+ct, 2.f));\n\tR_SDF(cl_l, sdCircle(pos, ai, 5.f));\n\tR_SDF(cl_l, sdCircle(pos, ci, 5.f));\n\tif(!isStraight){\n        vec2 x0 = intersect(ai, at, ci, ct);\n        vec2 x1 = intersect(ci, ct, ai, at);\n\n        R_SDF(cl_l, sdLine(pos, ai, ai+at, 2.f));\n        R_SDF(cl_l, sdLine(pos, ci, ci+ct, 2.f));\n        R_SDF(0.8*cl_g, sdCircle(pos, x0, 5.f));\n        R_SDF(0.8*cl_g, sdCircle(pos, x1, 5.f));\n    }\n#endif\n}\n","name":"Image","description":"","type":"image"}]}