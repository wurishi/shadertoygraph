{"ver":"0.1","info":{"id":"mldfWH","date":"1701203498","viewed":61,"name":"Neurotransmitter Mist unflicker","username":"Boogaloo","description":"I forked laserbat's automaton to make it a bit less flickery - cosmetic changes only, underlying algorithm is the same.","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["feedback","cellularautomata"],"hasliked":0,"parentid":"dt3fW8","parentname":"Neurotransmitter Mist"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;    \n    \n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Simple time-dependent noise function for seeding the CA.\nfloat noise(in vec2 co){\n    int x = int(co.x * float(M));\n    int y = int(co.y * float(M));\n    int z = int(iDate.a);\n    int w = int(fract(iDate.a) * float(M));\n    int res = hash(x + hash(y + hash(z + hash(w))));\n    \n    return float(res);\n}\n\n// Main computation\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {        \n    // Randomize initial state on 0th frame or if mouse button is pressed\n    if (iFrame <= 0 || iMouse.z > 0.0) {\n        fragColor.x = float(int(noise(fragCoord/iResolution.xy)) % M);\n    } else {\n    \tivec2 d;\n                \n        // Radius of the neighborhood.\n        int R = 6;\n        \n        int minv = M - 1;\n        int maxv = 0;\n        \n        for(d.y = -R; d.y <= +R; d.y++)\n        \tfor(d.x = -R; d.x <= +R; d.x++){ \n                if(length(vec2(d)) > float(R)) continue;\n                int s = GET(fragCoord, d);\n                maxv = max(maxv, s);\n                minv = min(minv, s);\n             }\n        \n        // Changing how res is calcuated strongly affetcs th CA behavior. \n        int res = ((((minv | maxv) - 1) ^ ((minv & maxv) + 1))) + 1;\n        \n        for(d.y = -R; d.y <= +R; d.y++)\n        \tfor(d.x = -R; d.x <= +R; d.x++){ \n                if(length(vec2(d)) > float(R)) continue;\n                int s = GET(fragCoord, d) ^ res;\n                maxv = max(maxv, s);\n                minv = min(minv, s);\n             }\n        \n        maxv ^= res;\n        minv ^= res;\n        \n        // Changing this formula also has a big effect.\n        res = maxv + minv;\n        if (res % 3 == 0)\n            res = minv;\n        else\n            res = maxv;\n                \n        fragColor.x = float(res);\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define GET(coord, offset) int(texelFetch(iChannel0, ivec2(mod(coord + vec2(offset) + iResolution.xy, iResolution.xy)), 0).x)\n\n#define M (1<<24)\n\nint hash(int x) {\n    x++;\n    x ^= x >> 17;\n    x *= 0xed5ad4bb;\n    x ^= x >> 11;\n    x *= 0xac4c1b51;\n    x ^= x >> 15;\n    x *= 0x31848bab;\n    x ^= x >> 14;\n    return x;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord) {\n    int val = GET(fragCoord.xy, ivec2(0, 0));\n    vec4 pre = vec4(0.);\n    // The specifics of this rule lead to uneven distribution of cell values.\n    // Hashing shuffles the values back to a near-uniform distribution.\n    val = hash(val);\n    \n    pre.r = float(val & 255);\n    pre.g = float((val >> 8) & 255);\n    pre.b = float((val >> 16) & 255);\n    \n    pre.rgb /= 255.0;\n    \n    vec4 buf = texture(iChannel1, fragCoord.xy / iResolution.xy);\n    fragColor = .1*pre+.9*buf;\n    \n}","name":"Buffer B","description":"","type":"buffer"}]}