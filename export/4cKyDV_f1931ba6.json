{"ver":"0.1","info":{"id":"4cKyDV","date":"1732404976","viewed":46,"name":"spinnn","username":"bombblob","description":"emergent patterns in spirals-- junji would be proud","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["patterns","illusion","trippy","pattern"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// # define DEPTH (sin(iTime)<0.)\n#define DEPTH true\n\n// ShaderToy Fragment Shader\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    // Normalize UV coordinates to range [-1, 1]\n    vec2 uv = fragCoord.xy / iResolution.xy * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y; // Correct aspect ratio\n\n    // Parameters\n    float halfLines = 5.0; // Number of radial lines\n    float time = iTime; // Time for animation\n    float spinSpeed = 0.75; // Speed of rotation\n    float numBands = 10.0;\n    float bandStep = 1.0 / numBands; // Size of each rotating section\n    float spiralFactor = 3.0; // Controls the amount of spiral\n    float groupSize = 2.5;\n    float groupOffset = 0.25;\n\n    // Compute distance and angle from center\n    float distance = length(uv);\n    float angle = atan(uv.y, uv.x);\n\n    // Add spiral effect\n    angle += distance * spiralFactor;\n\n    // Determine band index and adjust rotation\n    float bandIndex = groupSize + floor(distance / bandStep);\n    float speedAdjust = mod(bandIndex, groupSize) * (groupOffset / groupSize) + 1.0; // Alternate speeds\n    float groupIndex = floor(bandIndex / groupSize);\n    speedAdjust += modf(groupIndex, groupSize) * (groupOffset / groupSize);\n    float rotation = speedAdjust * time * spinSpeed;\n\n    // Apply rotation\n    angle += rotation;\n\n    // Create line pattern\n    float linePattern = abs(sin(angle * halfLines));\n    float radialFade = smoothstep(0.00005, 0.1, distance);\n    float intensity = radialFade * smoothstep(0.6, 0.9, linePattern);\n\n    if (DEPTH) intensity -= mix(0., intensity*0.8, fract(distance / bandStep));\n\n    // Output color\n    vec3 color = vec3(intensity); // White lines\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}