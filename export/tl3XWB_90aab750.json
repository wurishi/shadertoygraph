{"ver":"0.1","info":{"id":"tl3XWB","date":"1581603004","viewed":164,"name":"black sun ","username":"aodnawg","description":"I learned ray marching..!","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_OCTAVES 10\n\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                         vec2(12.9898,78.233)))*\n        43758.5453123);\n}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n\n\nfloat fbm ( in vec2 _st) {\n    float t = 1.;\n    float v = 0.;\n    float a = 0.5;\n    vec2 shift = vec2(120.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.5));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvec2 addfbm(vec2 uv) {\n    return uv + vec2(fbm(uv), fbm(uv+vec2(314.433623, 234.62324)));\n}\n\nvec3 makeFbm(vec2 uv) {\n    vec2 noiseUv = addfbm(uv);\n    noiseUv.x += iTime*.1;\n    noiseUv = addfbm(noiseUv);\n    noiseUv = addfbm(noiseUv);\n    noiseUv = addfbm(noiseUv);\n    noiseUv.x += iTime*.1;\n    noiseUv = addfbm(noiseUv);\n\n    float m = fbm(noiseUv*5.);\n    vec3 col = vec3(pow(m, 4.));\n    return col;\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(0,0,0);\n    float z = 1.;\n    vec3 rd = normalize(vec3(uv, z)-ro);\n    \n    float t=0.;\n    float step;\n    \n    for(int i=0; i<128; i++){\n        vec3 p = ro + rd*t;\n        \n        float r = makeFbm(p.xy).x*2.;\n        float dS = length(p-vec3(0,0,3))-1.+r;\n        dS = max(abs(dS), 0.02);\n\n        step = float(i);\n        if (t > 100. || dS < 0.01) break;\n        t += dS;\n    }\n    \n    col = vec3(pow(step/128., 1. + sin(iTime)*.5+.5));\n    \n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}