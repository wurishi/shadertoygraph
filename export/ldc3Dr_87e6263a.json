{"ver":"0.1","info":{"id":"ldc3Dr","date":"1448988899","viewed":211,"name":"Lone Christmas Tree","username":"jwa","description":"Another Christmas tree!","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["christmas","tree"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"// based on this shader\n// https://www.shadertoy.com/view/Xds3z by inigo quilez\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdGround( vec3 p )\n{\n    float a = 0.1;\n    float f = 1.0;\n    float h = 0.25;\n    for(int i=0; i<2; i++)\n    {\n\t\th += (p.y- a*(sin(f*p.x)-sin(f*p.z)));\n    \ta*=0.85;\n        f*=1.13;\n    }\n    return h;\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n//----------------------------------------------------------------------\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    vec2 res = opU( vec2( sdGround(     pos), 1.0 ),\n\t                vec2( sdCylinder(  pos-vec3( 0.0,0.0,0.0), vec2(0.1,0.2) ), 100.0 ) );\n    \n    res = opU(res, vec2( sdCone( pos-vec3( 0.0,0.5,0.0), vec3(0.3,0.6,0.3) ), 200.0 ) );\n    res = opU(res, vec2( sdCone( pos-vec3( 0.0,0.65,0.0), vec3(0.35,0.6,0.3) ), 300.0 ) );\n    res = opU(res, vec2( sdCone( pos-vec3( 0.0,0.8,0.0), vec3(0.5,0.6,0.3) ), 400.0 ) );\n    res = opU(res, vec2( sdCone( pos-vec3( 0.0,0.95,0.0), vec3(0.75,0.6,0.3) ), 500.0 ) );\n\n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<100; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n    \n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.4, 0.8, 1.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>0.5 )\n    {\n        vec3 pos = ro + t*rd;\n       \tvec3 nor = calcNormal( pos );\n       \n        vec3 lightDir = normalize(vec3(1,-1,2));\n        float l = 0.5+ 0.5*dot(lightDir, nor);\n        // material        \n\t\tcol = vec3(0.05,0.5,0.10);\n\t\tcol *= l;\n        if( m<50.5 )\n        {                    \n            col = l*vec3(2.5);\n        }\n        \n        else if( m<150.0 )\n        {\n                      \n            col = l*vec3(0.3,0.25,0.01);\n        }\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x/iResolution.y;\n \t\t \n\tfloat time = 15.0 + iTime;\n\n\t// camera\t\n\tvec3 ro = vec3( 3.5*cos(0.1*time), 0.5, 3.5*sin(0.1*time) );\n\tvec3 ta = vec3( -0.25, 0.2, 0.5 );\n\t\n\t// camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,3.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}