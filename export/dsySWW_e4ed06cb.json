{"ver":"0.1","info":{"id":"dsySWW","date":"1681102264","viewed":150,"name":"crosshatch testing 2","username":"lalaoopybee","description":"procedural \"art\"?\nsomewhat sketch like?\nsimilar to my [url=https://www.shadertoy.com/view/flyyWd]halftone shader[/url]","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["line","crosshatch","sketch","pencil","npr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define K 3\n\n#define SIGMA 1.\n\nfloat gaussian(vec2 pos){\n    float left=1./(2.*PI*SIGMA*SIGMA);\n    float right=exp(-dot(pos, pos)/(2.*SIGMA*SIGMA));\n    return left*right;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n    \n    vec4 sum=vec4(0.);\n    for(int i=0;i<2*K+1;i++){\n        for(int j=0;j<2*K+1;j++){\n            vec2 offset=vec2(i-K, j-K);\n            float weight=gaussian(offset);\n            \n            vec2 offsetUV=offset/iResolution.xy;\n            vec4 col=texture(iChannel0, uv+offsetUV);\n            sum+=vec4(col.rgb, 1.)*weight;\n        }\n    }\n    fragColor=sum/sum.a;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define PI 3.1415927\n\n//https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nfloat hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 uv=fragCoord/iResolution.xy;\n    float noise=hash12(fragCoord)*.5-.5;\n    fragColor=texture(iChannel0, uv)+noise*.1;\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define LN_SZ (iMouse.z>0.?iMouse.x/iResolution.x*15.+5.:6.)\n\n#define ANIMATE\n#ifdef ANIMATE\n#define ANIM_SPEED .2\n#endif\n\nfloat d2l(float t, vec2 p){\n    return abs(cos(t)*p.y-sin(t)*p.x);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec2 noise=vec2(hash12(fragCoord), hash12(fragCoord+10.))-.5;\n    vec2 coord=fragCoord+noise;\n    \n    #ifdef ANIMATE\n    float randSeed=round(iTime/ANIM_SPEED)*ANIM_SPEED;\n    #else\n    float randSeed=PI;\n    #endif\n    \n    float angleR=2.*PI*hash11(randSeed);\n    float angleG=angleR+PI*mix(.25, .33, hash11(randSeed+10.));\n    float angleB=angleG+PI*mix(.25, .33, hash11(randSeed+20.));\n    float dR=d2l(angleR, coord);\n    float dG=d2l(angleG, coord);\n    float dB=d2l(angleB, coord);\n    \n    vec3 repeat=2.*abs(.5-fract(vec3(dR, dG, dB)/LN_SZ));\n    vec3 lines=smoothstep(.5, 1., repeat);\n    \n    vec2 uv=coord/iResolution.xy;\n    vec4 col=texture(iChannel0, uv);\n    float lum=dot(col, vec4(.299, .587, .114, 0.));\n    \n    float hatch=1.;\n    if(lum<.75) hatch-=lines.r;\n    if(lum<.5) hatch-=lines.g;\n    if(lum<.25) hatch-=lines.b;\n    fragColor=col*hatch;\n}\n","name":"Buffer B","description":"","type":"buffer"}]}