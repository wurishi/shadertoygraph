{"ver":"0.1","info":{"id":"mdjBzh","date":"1689445268","viewed":147,"name":"SDF - Asymmetric Chamfer Union","username":"JohnKaz","description":"Based on https://www.shadertoy.com/view/3ltSW2 by iq\n\nA chamfered union is nothing new, as seen in Mercury's SDF library https://mercury.sexy/hg_sdf/\nBut here the transition point of the chamfer with either Union operand can be individually adjusted.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","distance","chamfer"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright © 2023 João Desager\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Chamfered Union with seperate A B radius controls\n\n// SDF primitives taken from:\n// and iquilezles.org/articles/distfunctions2d\n\n\nfloat sdCircle( in vec2 p, in float r ) \n{\n    return length(p)-r;\n}\n\nfloat sdCircle2( in vec2 p, in vec2 o, in float r ) \n{\n    return length(p-o)-r;\n}\n\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// from Mercury's SDF library: https://mercury.sexy/hg_sdf/\nfloat opChamfer(in float a, in float b, in float r)\n{\n    return min(min(a, b), (a - r + b)*sqrt(0.5));\n    // note how this is a simplified version of Hesse's normal form used below\n}\n\n\n// the basic idea comes from Mercury, reiterated below: (their SDF library: https://mercury.sexy/hg_sdf/)\n// Assume the object surfaces intersect at a right angle. The two\n// distances <a> and <b> constitute a new local two-dimensional coordinate system\n// with the actual intersection as the origin. In this coordinate system, we can\n// evaluate any 2D distance function we want in order to shape the edge.\n\n// uses the Hesse normal form to get a signed distance to a line\n// https://en.wikipedia.org/wiki/Hesse_normal_form (dutch version has more info)\n// signed distance to a line with this form is (X*a + b - br)/sqrt( (X*X)+1 )\n// with X being (ar/br). ar and br being respectively the transition point for primitive a and b.\nfloat opChamfer2(in float a, in float b, in float ar, in float br)\n{\n    float xconst = (ar/br);\n    float chamf = (xconst*a + b - ar)/sqrt((xconst*xconst)+1.0);\n    return min(min(a, b), chamf);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    \n    float chamf2 = (0.5 + 0.5*sin(iTime)) * 0.2;\n\n\tfloat d1 = sdCircle2(p, vec2(0,0.4), 0.5);\n    float d = opChamfer2(d1, sdBox( p, vec2(1.0, 0.5) ), 0.1, chamf2 );\n    // uncomment to compare with Mercury's symmetrical 45d chamfer\n    // d = opChamfer(d1, sdBox( p, vec2(1.0, 0.5) ), chamf2);\n    \n\t// coloring, iq style\n    vec3 col = (d>0.0) ? vec3(0.9,0.6,0.3) : vec3(0.65,0.85,1.0);\n    col *= 1.0 - exp(-6.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(150.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n    d1 = sdCircle2(m, vec2(0,0.4), 0.5);\n    d = opChamfer2(d1, sdBox( m, vec2(1.0, 0.5) ), 0.1, chamf2 );\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n    col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}