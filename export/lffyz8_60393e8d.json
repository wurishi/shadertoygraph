{"ver":"0.1","info":{"id":"lffyz8","date":"1722732377","viewed":46,"name":"simplest voxel ray marching","username":"tibitt","description":"raymarching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool torus(vec3 voxel, vec3 pos, mat3 rot, float r, float R){\n    voxel -= pos;\n    mat3 model;\n    model[0] = voxel;\n    voxel = vec3(rot * model);\n    if((sqrt(voxel.x * voxel.x + voxel.y * voxel.y) - R) * (sqrt(voxel.x * voxel.x + voxel.y * voxel.y) - R) + voxel.z * voxel.z <= r * r) return true;\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 pos = vec3(0.0, 15.0, 30.0);\n    mat3 rot;\n    float angle = iTime * 60.0;\n    angle = radians(angle);\n    rot[0] = vec3(1.0, 0.0, 0.0);\n    rot[1] = vec3(0.0, cos(angle), sin(angle));\n    rot[2] = vec3(0.0, -sin(angle), cos(angle));\n\n    int maxIterations = 150;\n    float maxDist = 90.0;\n    vec3 sunDir = vec3(0.5, -1.0, 0.5);\n    sunDir = normalize(sunDir);\n    \n    vec2 uv = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    float hitPlaneDist = 1.0;\n    vec3 point = vec3(0.);\n    vec3 lastPoint = vec3(0.0);\n    vec3 dir = normalize(vec3(uv,hitPlaneDist));\n    float dist = 0.0;\n    int iterations = 0;\n    bool castS = false;\n    fragColor = vec4(0.0);\n    while(iterations < maxIterations){\n        iterations++;\n        vec3 dirPole = sign(dir.xyz);\n        vec3 tempPoint = point * dirPole;\n        vec3 decimalPoint = tempPoint - floor(tempPoint);\n        vec3 borderDist = vec3(1.0) - decimalPoint;\n        if(borderDist.x == 0.0) borderDist.x = 1.0;\n        if(borderDist.y == 0.0) borderDist.y = 1.0;\n        if(borderDist.z == 0.0) borderDist.z = 1.0;\n        vec3 dirMultipliers = borderDist / dir;\n        float step = min(length(dirMultipliers.x * dir), min(length(dirMultipliers.y * dir), length(dirMultipliers.z * dir)));\n        lastPoint = point;\n        point += dir * step;\n        vec3 voxel = floor((point + lastPoint) / 2.0);\n        if(point.y <= -1.0){\n            dir.y *= -1.0;\n            float distortion = 0.02;\n            dir += vec3(sin(dir.x * 3000000.0) * distortion , 0.0, sin(dir.z * 3000000.0) * distortion);\n            dir = normalize(dir);\n            lastPoint = point;\n            fragColor += vec4(0.1);\n        }\n        if(torus(voxel, pos, rot, 6.0 + sin(iTime * 1.0) * 3.0, sin(iTime * 0.3) * 6.0 + 13.0)){\n            if(!castS){\n                castS = true;\n                dir = -sunDir;\n                dir = normalize(dir);\n                point = lastPoint;\n                fragColor += vec4(1.0 - dist / maxDist);\n            }\n            else{\n                fragColor -= vec4(0.3);\n                break;\n            }\n        }\n        else dist += step;\n    }\n}","name":"Image","description":"","type":"image"}]}