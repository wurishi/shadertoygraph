{"ver":"0.1","info":{"id":"DstyD8","date":"1695001592","viewed":26,"name":"Voronoi Noise Test 9/16/23","username":"Tyconic","description":"Voronoi Noise","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 quintic(vec2 p) {\n  return p * p * p * (10.0 + p * (-15.0 + p * 6.0));\n}\n\nfloat whiteNoise(vec2 p){\n    float random = dot(p, vec2(12, 200));\n    random = sin(random);\n    random = random * 43758.89078;\n    random = fract(random);\n    return random;\n}\n\nfloat valueNoise(vec2 uv){\n    //Center Screen UVS and Tile\n    vec2 gridUV = fract(uv);\n    vec2 gridID = floor(uv);\n    \n    //Smoothstep griduvs\n    gridUV = quintic(gridUV);\n    \n    //Lerp between bottom two coordinates\n    float bottomLeft = whiteNoise(gridID);\n    float bottomRight = whiteNoise(gridID + vec2(1.0, 0.0));\n    float bottomLerp = mix(bottomLeft, bottomRight, gridUV.x);\n    \n    //Lerp between top two coordinates\n    float topLeft = whiteNoise(gridID + vec2(0.0, 1.0));\n    float topRight = whiteNoise(gridID + vec2(1.0, 1.0));\n    float topLerp = mix(topLeft, topRight, gridUV.x);\n    \n    //Lerp between top and bottom\n    float valueNoise = mix(bottomLerp, topLerp, gridUV.y);\n    return valueNoise;\n}\n\nfloat octaveValueNoise (vec2 uv){\n    float vn = 0.0;\n    float Scale = 8.0;\n    for(float i = 1.0; i < 8.0; i += 1.0){\n    vn += valueNoise(uv * (Scale * i)) * (1.0 / i);\n    }\n\n    return vn /= 2.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n\n    // Set up Color\n    vec3 color = vec3(1.0);\n    \n    //Set up UVs\n    uv = uv * 4.0;\n    vec2 currentGridId = floor(uv);\n    vec2 currentGridCoord = fract(uv);\n    currentGridCoord = currentGridCoord - 0.5;\n\n    //Draw UV Grid\n    vec2 redGridUv = currentGridCoord;\n    redGridUv = abs(redGridUv);\n    float distToEdgeOfGridCell = 2.0 * max(redGridUv.x, redGridUv.y);\n    \n    \n    //Add point at the center of grid\n    float pointsOnGrid = 0.0;\n    float minDistFromPixel = 200.0;\n    \n    for (float i = -1.0; i <= 1.0; i++){\n        for (float j = -1.0; j <= 1.0; j++){\n            vec2 adjGridCoords = vec2(i, j);\n            vec2 pointsOnAdjGrid = adjGridCoords + sin(iTime * octaveValueNoise(currentGridId + adjGridCoords)) * 0.5;\n            \n            float dist = length(currentGridCoord - pointsOnAdjGrid);\n            minDistFromPixel = min(dist, minDistFromPixel);\n            \n            pointsOnGrid += smoothstep(0.0, 1.0, 1.0 - dist);\n        }\n    }\n    \n    color = vec3(smoothstep(0.0, 1.0,minDistFromPixel));\n\n    // Output to screen\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}