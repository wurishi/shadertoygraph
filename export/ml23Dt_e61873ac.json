{"ver":"0.1","info":{"id":"ml23Dt","date":"1674146631","viewed":95,"name":"Dithered dithering","username":"stduhpf","description":"Ditrhering is supposed to remove banding, but there are still noticable bands of low variance when the desired value gets close to the target values.\nI try here to avoid this by adding even more noise to the output, by \"dithering\" the target values.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["dithering"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Linear dithering doesn't matter\" by stduhpf. https://shadertoy.com/view/NltBD7\n// 2023-01-19 15:36:28\n\n#define BIT_DEPTH 3\n#define GAMMA 2.2\n\n// Displays the difference between classic linear dithering (middle) vs the \"double\" dithering (top)\n// the bottom one is the default quantization without dithering\n\n// The double dithering thing definitly looks more noisy\n// but also remove some arifacts that can be noticed on clean gradients.\n// I'm not sure how to explaint it properly\n// maybe there is a better way to achieve the removal of the low variance bands\n// but that's what I came up with.\n\n\n//#define NORMALIZE_BRIGHTNESS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float eps = 1./iResolution.y;\n    vec2 uv = fragCoord*eps;\n    \n    vec4 noise = texture(iChannel0,(fragCoord)/iChannelResolution[0].xy);\n    //merge channels for better noise precision;\n    noise = noise*255./256.+noise.yzwx*255./(256.*256.);\n    noise+=noise.zwxy/(256.*256.); // the two last channels\n    \n    \n    const float prec = float((1<<BIT_DEPTH)-1); //8-bit color range: 0.->255.\n    \n    float x =uv.x*iResolution.y/iResolution.x;\n    \n    float max_ = 1.; // max brightness of the color ramp\n    float max_l = pow(max_,GAMMA); // same thing but in linear\n    \n    float l = max_*(x); //gamma-space value\n    float lin = pow(l,GAMMA); //linear-space value\n    \n    // get quantization \"bounds\"\n    float lfg = floor(l*prec)/prec;\n    float lcg = ceil(l*prec)/prec;\n    \n    float lffg = floor(l*prec-1.)/prec;\n    float lccg = ceil(l*prec+1.)/prec;\n\n    // fix edge cases\n    lffg = lffg<0.?lfg:lffg;\n    lccg = lccg>1.?lcg:lccg;\n    \n    \n    // convert bounds to linear\n    float lfl = pow(lfg,GAMMA);\n    float lcl = pow(lcg,GAMMA);\n    \n    float lffl = pow(lffg,GAMMA);\n    float lccl = pow(lccg,GAMMA);\n    \n    //get dithering strengths\n    float xl = (lin-lfl)/(lcl-lfl);\n    \n    float xfl = (lfl-lffl)/(lcl-lffl);\n    float xcl = (lcl-lfl)/(lccl-lfl);\n    \n    float strength = uv.y*3.<2.?0.:(iMouse.z!=0.?iMouse.x/iResolution.x:.5);\n    \n    //float rfg = pow(mix(lfl, mix(lffl,lcl,xfl),strength),1./GAMMA);\n    //float rcg = pow(mix(lcl, mix(lfl,lccl,xcl),strength),1./GAMMA);\n    \n    float lfgg =  \n          mix(lfg, mix(lffg,lcg,step(noise.x,xfl)),step(noise.z,strength));\n    lcg = mix(lcg, mix(lfg,lccg,step(noise.x,xcl)),step(noise.z,strength));\n    lfg = lfgg;\n    \n    //default quantization (causes banding)\n    float q = round(l*prec)/prec;\n    \n    vec3 dithered = vec3(\n        uv.y*3.<1.?\n            q:\n                mix(lfg,lcg,step(noise.y,xl))\n        ); \n        \n#ifdef NORMALIZE_BRIGHTNESS\n    dithered/=ceil(max_*prec)/prec;\n#endif\n    \n    fragColor = vec4(dithered,0.); \n}","name":"Image","description":"","type":"image"}]}