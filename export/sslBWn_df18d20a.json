{"ver":"0.1","info":{"id":"sslBWn","date":"1644739473","viewed":40,"name":"Milse Challenge","username":"Steggy","description":"I was invited to a race to recreate this","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["colorwheel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    vec4 colorA = texture(iChannel0, uv);\n    vec4 colorB = texture(iChannel1, uv);\n    //vec4 colorB = vec4(0.0);\n    \n    fragColor = vec4(mix(colorA.rgb, colorB.rgb, colorB.a), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = iResolution.xy / vec2(2.0, 2.0);\n    vec2 pos = iMouse.xy - (center);\n    float theta = atan(pos.y, pos.x) + PI;\n    float hue = theta / (2.0 * PI) + .25;\n    float d = distance(fragCoord, center);\n    vec3 color = vec3(1.0);\n    \n    if (d < RADIUS + 1.0) { color = hsv2rgb(vec3(hue, 1.0, 1.0)); }\n    if ((RADIUS + 0.0) < d && d < (RADIUS + 15.0)) { color = vec3(0.0); }\n    if ((RADIUS + 15.0) < d && d < (RADIUS + WIDTH + 5.0)) { color = vec3(0.5); }\n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define RADIUS 150.0\n#define PI 3.14159265359\n#define WIDTH 30.0\n\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 center = iResolution.xy / vec2(2.0, 2.0);\n    vec2 pos = fragCoord - (center);\n    vec2 mousePos = iMouse.xy - center;\n    vec2 posNormalized = normalize(mousePos) * (RADIUS + WIDTH / 2.0);\n    float theta = atan(pos.y, pos.x) + PI;\n    float hue = theta / (2.0 * PI) + .25;\n    float r = distance(fragCoord, center);\n    \n    vec4 color = vec4(1.0, 1.0, 1.0, 0.0);\n    \n    if (RADIUS - 1. < r && r < RADIUS + WIDTH) {\n        color = vec4(hsv2rgb(vec3(hue, 1.0, 1.0)), 1.0);\n    }\n    float fade = r - RADIUS;\n    color.a *= clamp(fade, 0.0, 1.0);\n    fade = (r - RADIUS) - WIDTH;\n    color.a *= clamp(-fade, 0.0, 1.0);\n    \n    vec4 highlightColor = vec4(0.0);\n    float circlePos = distance(posNormalized, pos);\n    if ( (WIDTH / 2.0 * 0.5) < circlePos && circlePos < (WIDTH / 2.0 * 0.8)) { highlightColor = vec4(1.0); }\n    if ( (WIDTH / 2.0 * 0.75) < circlePos && circlePos < (WIDTH / 2.0 * 0.85)) { highlightColor = vec4(vec3(0.0), 1.0); }\n    if ( (WIDTH / 2.0 * 0.45) < circlePos && circlePos < (WIDTH / 2.0 * 0.55)) { highlightColor = vec4(vec3(0.0), 1.0); }\n    fade = (circlePos - (WIDTH / 2.0 * 0.45));\n    highlightColor.a *= clamp(fade*0.5, 0.0, 1.0);\n    fade = (circlePos - (WIDTH / 2.0 * 0.85));\n    highlightColor.a *= clamp(-fade*.5, 0.0, 1.0);\n    \n    color = mix(color, highlightColor, highlightColor.a);\n    fragColor = color;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"const float sigma = 5.0;\nconst float width = 19.0;\nconst float e = 2.71828;\nconst float radius = 9.0;\n\nfloat Gaussian(float x) {\n    return (1. / (sqrt(2. * PI) * sigma)) * exp(-(pow(x, 2.)/(2. * pow(sigma, 2.))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 avg = vec3(0.0);\n    float weightTotal = 0.0;\n    for (float i = -radius; i <= radius; i++) {\n        vec2 offset = vec2(i, 0.0);\n        vec2 uv = (fragCoord + offset) / iResolution.xy;\n        float weight = Gaussian(i);\n        avg += weight * texture(iChannel0, uv).rgb;\n        weightTotal += weight;\n    }\n    avg /= weightTotal;\n    fragColor = vec4(avg,1.0);\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"const float sigma = 5.0;\nconst float width = 19.0;\nconst float e = 2.71828;\nconst float radius = 9.0;\n\nfloat Gaussian(float x) {\n    return (1. / (sqrt(2. * PI) * sigma)) * exp(-(pow(x, 2.)/(2. * pow(sigma, 2.))));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 avg = vec3(0.0);\n    float weightTotal = 0.0;\n    for (float i = -radius; i <= radius; i++) {\n        vec2 offset = vec2(0.0, i);\n        vec2 uv = (fragCoord + offset) / iResolution.xy;\n        float weight = Gaussian(i);\n        avg += weight * texture(iChannel0, uv).rgb;\n        weightTotal += weight;\n    }\n    avg /= weightTotal;\n    fragColor = vec4(avg,1.0);\n}","name":"Buffer D","description":"","type":"buffer"}]}