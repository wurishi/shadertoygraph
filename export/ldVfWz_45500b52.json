{"ver":"0.1","info":{"id":"ldVfWz","date":"1528440373","viewed":138,"name":"Raymarch Practice - AvfasfdBgfzs","username":"minujeong","description":"Practice\n","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FAR     80.0\n#define NRM_OFS 0.002\n\n\nfloat sadd(float a, float b)\n{\n\tfloat k = 0.5;\n    float h = clamp(0.5 + 0.5 * (a - b) / k, 0.0, 1.0);\n    return mix(a, b, h) - k * h * (1.0 - h);\n}\n\nfloat map_torus(vec3 o)\n{\n    o.x += 0.50;\n    o.y += 0.45;\n    \n    float rx = cos(iTime * 4.0);\n    float rz = cos(iTime * 4.0 + 0.12);\n    mat3 trz = mat3(\n        cos(rz), -sin(rz), 0,\n        sin(rz), cos(rz), 0,\n        0, 0, 1\n    );\n    \n    mat3 trx = mat3(\n        \n        1, 0, 0,\n        0, cos(rx), -sin(rx),\n        0, sin(rx), cos(rx)\n    );\n    \n    vec3 p = inverse(trx) * inverse(trz) * o;\n    vec2 q = vec2(length(p.xz) - 0.5, p.y);\n    return length(q) - (cos(iTime * 18.0) * 0.05 + 0.15);\n}\n\nfloat map_sphere(vec3 o)\n{\n    vec3 q = o + vec3(\n        0.45 - abs(cos(iTime * 2.0) * 0.45),\n        0.35 - abs(cos(iTime * 2.0) * 0.45),\n        0);\n    return length(q) - 0.25;\n}\n\nfloat map_sphere_2(vec3 o)\n{\n    float x = cos(iTime * 14.0) - sin(iTime * 14.0);\n    float z = sin(iTime * 14.0) + cos(iTime * 14.0);\n\tvec3 q = o + vec3(x, 0, z) * 0.25;\n    return length(q) - 0.25;\n}\n\nfloat world(vec3 p)\n{\n    float st = sadd(map_sphere(p), map_torus(p));\n    float sst = sadd(st, map_sphere_2(p));\n    return sst;\n}\n\nfloat raymarch(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    vec3 p = vec3(0, 0, 0);\n    float d = 0.0;\n    float ad = 0.0;\n    for (int i = 0; i < 128; i++)\n    {\n        p = o + r * t;\n        d = world(p);\n        ad = abs(d);\n        if (ad < 0.01)\n        {\n            return t;\n        }\n        t += d;\n    }\n    \n    return FAR;\n}\n\n\n\nvec3 get_normal(vec3 p)\n{\n    vec2 e = vec2(NRM_OFS, 0);\n    float d1 = world(p + e.xyy), d2 = world(p - e.xyy);\n    float d3 = world(p + e.yxy), d4 = world(p - e.yxy);\n    float d5 = world(p + e.yyx), d6 = world(p - e.yyx);\n    \n    return normalize(vec3(\n        d1 - d2,\n        d3 - d4,\n        d5 - d6\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    vec3 o = vec3(cos(iTime) * 0.5 - 0.5, 0, -4);\n    vec3 r = normalize(vec3(uv, 1.15));\n    r = normalize(vec3(r.xy, r.z - length(r.xy) * .15));\n    \n    float cr = 0.0;\n    float d = raymarch(o, r);\n    if (d < FAR)\n    {\n        vec3 hit = o + r * d;\n        vec3 normal = get_normal(hit);\n        float ndu = dot(normal, vec3(0, 0.75, -0.25));\n        \n        vec3 color1 = vec3(0.25, 0.25, 0.25);\n        vec3 color2 = vec3(1, 1, 1);\n        vec3 fncolor = mix(color1, color2, ndu);\n        fncolor.x = max(fncolor.x, 0.15);\n        fncolor.z = max(fncolor.z, sin(iTime) * 0.1 + 0.1);\n        fncolor.xz += uv * 0.5 * ndu;\n        fragColor = vec4(fncolor, 1.0);\n    }\n    else\n    {\n        fragColor = vec4(0.45, 0.25, 0.25, 1.0) + vec4(uv, length(uv), 0) * 0.2;\n    }\n}","name":"Image","description":"","type":"image"}]}