{"ver":"0.1","info":{"id":"fslXD8","date":"1618671907","viewed":154,"name":"320_Konov_v5v6","username":"Meleray","description":"CMC MSU homework for computer graphics course.\nAdditional tasks:\n1. Anti-aliasing(+2)\n2. Soft shadows(+2-3)\n3. Textured plane(+1)\n4. Textured cube-map(+2)\n5. Caustics(+2-3)\n6. Ambient Occlusion(+2)","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["water","tracing","icosahedron"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst vec3 CAMERA_POS = vec3(0., 3., -9);\nconst vec3 LIGHT1_POS = vec3(0, 0.3, 2);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(1, 0.7, 0.7);\n\nconst vec3 LIGHT2_POS = vec3(-1.5, -0.7, 1.);\nconst float LIGHT2_RADIUS = 0.25;\nconst vec3 LIGHT2_COLOR = vec3(1., 1., 1.);\nvec3 randDir;\nconst float EPSILON = 0.000001;\n\nvec3 ICOSAHEDRON_COLOR = vec3(0.6, 1., 0.6);\n\nconst vec3 WATER_COLOR = vec3(0.3, 0.4, 1.);\nconst vec3 WATER_POS = vec3(0., 0.31, 0.);\nconst float WATER_RADIUS = 0.7;\n\nconst float CYLINDER_HEIGHT = -1.0;\nconst float CYLINDER_RADIUS = 1.0;\nconst int N_STEPS = 10;\n\nfloat check_point(vec3 p1, vec3 p2, vec3 a, vec3 b)\n{\n    return step(0.0, dot(cross(b - a, p1 - a), cross(b - a, p2 - a)));\n}\n\nfloat inTriangle(vec3 pos, vec3 v[3])\n{\n    return check_point(pos, v[0], v[1], v[2]) * check_point(pos, v[1], v[2], v[0]) * check_point(pos, v[2], v[0], v[1]);\n}\n \nvec3 ICOV[12] = vec3[12]\n(vec3(0.87, -1, -0.5),\nvec3(-0.87, -1, -0.5),\nvec3(0., -1., 1.),\nvec3(0., 0., -1.62),\nvec3(1.4, 0., 0.81),\nvec3(-1.4, 0., 0.81),\nvec3(-1.4, 0.62, -0.81),\nvec3(1.4, 0.62, -0.81),\nvec3(0., 0.62, 1.62),\nvec3(0., 1.62, -1),\nvec3(0.87, 1.62, 0.5),\nvec3(-0.87, 1.62, 0.5));\n\nint PLANES[20 * 3] = int[60]\n(0, 1, 2,\n0, 1, 3,\n0, 3, 7,\n0, 7, 4,\n0, 4, 2,\n1, 2, 5,\n1, 5, 6,\n1, 6, 3,\n2, 4, 8,\n2, 8, 5,\n3, 6, 9,\n3, 7, 9,\n4, 7, 10,\n4, 8, 10,\n5, 8, 11,\n5, 6, 11,\n6, 9, 11,\n7, 9, 10,\n8, 10, 11,\n9, 10, 11);\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 v[3], out vec3 normal){ \n    vec3 v1 = v[1] - v[0];\n    vec3 v2 = v[2] - v[0];\n    normal = normalize(cross(v1, v2));\n    vec3 v0 = pos - v[0];\n    float a = dot(dir, cross(v1, v2));\n    if (abs(a) < EPSILON) \n        return INF;\n    float t = -dot(v0, cross(v1, v2)) / a;\n    if (t < 0.0) \n        return INF;\n    vec3 worldpos = pos + t * dir;\n    if (abs(inTriangle(worldpos, v)) < EPSILON)\n        return INF;\n    if (dot(v[0] + EPSILON * normal, v[0] + EPSILON * normal) < dot(v[0], v[0])) {\n        normal = -normal;\n    }\n    return t;\n}\n\nfloat traceIcosahedron(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = INF;\n    for (int i = 0; i < 20; ++i) {\n        vec3 plane[3];\n        for (int j = 0; j < 3; ++j) {\n            plane[j] = ICOV[PLANES[3 * i + j]];\n        }\n        vec3 curr_norm;\n        float curr_t = traceTriangle(pos, dir, plane, curr_norm);\n        if (curr_t < t) {\n            t = curr_t;\n            normal = curr_norm;\n        }\n    } \n    return t;\n}\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 100.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal, in float rnd) {\n    float distor = rnd * sin(16.0 * (pos.x + dir.x)) * sin(16.0 * (pos.y + dir.y)) * sin(16.0 * (pos.z + dir.z));\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - (r - distor) * (r - distor);\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal, float height, float radius) {\n    float t = (height - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < radius) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - radius;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= height) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= height) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\nvec3 isOccluded(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    vec3 col = vec3(1.);\n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm, CYLINDER_HEIGHT, CYLINDER_RADIUS);\n    if (cylT < dist) col *= vec3(0.);\n    vec3 icoNorm;\n    float icoT = traceIcosahedron(pos, dir, icoNorm);\n    if (icoT < dist) col *= ICOSAHEDRON_COLOR * 2.0;\n    return col;\n}\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSq1 = dot(toLight1, toLight1);\n    vec3 att1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) * 30.0 / distSq1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSq2 = dot(toLight2, toLight2);\n    vec3 att2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) * 5.0f / distSq2;\n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n    );\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if (sinB > 1.0) return reflect(v, normal);\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat pow2(float x) {\n    return x * x;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    const float GLASS_N = 1.5;\n    const float AIR_N = 1.0;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float WATER_N = 1.3330;\n    float WATER_R = pow2(WATER_N - GLASS_N) / pow2(WATER_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < N_STEPS; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        vec3 l1Norm;\n        float light1T = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, l1Norm, 0.0);\n        if (light1T < t) {\n            t = light1T;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = l1Norm;\n        }\n        vec3 l2Norm;\n        float light2T = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, l2Norm, 0.0);\n        if (light2T < t) {\n            t = light2T;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = l2Norm;\n        }\n        vec3 cylNorm;\n        float cylT = traceCylinder(curPos, curDir, cylNorm, CYLINDER_HEIGHT, CYLINDER_RADIUS);\n        if (cylT < t) {\n            t = cylT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        vec3 icoNorm;\n        float icoT = traceIcosahedron(curPos, curDir, icoNorm);\n        if (icoT < t) {\n            t = icoT;\n            normal = icoNorm;\n            if (randVals.x < GLASS_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                colorMult *= ICOSAHEDRON_COLOR;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = AIR_N;\n                } else {\n                    nEnter = GLASS_N;\n                }\n            }\n        }\n        vec3 watNorm;\n        float watT = traceSphere(curPos - WATER_POS, curDir, WATER_RADIUS, watNorm, 0.1);\n        if (watT < t) {\n            t = watT;\n            normal = watNorm;\n            colorMult *= WATER_COLOR;\n            if (randVals.x < WATER_R) {\n                materialType = REFLECTION;\n            } else {\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) {\n                    nEnter = GLASS_N;\n                } else {\n                    nEnter = WATER_N;\n                }\n            }\n        }\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-1;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-1;\n                n1 = nEnter;\n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}