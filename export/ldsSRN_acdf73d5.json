{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":1,"type":"texture","id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"float smin( float a, float b, float k )\n{\n    a = pow( a, k ); b = pow( b, k );\n    return pow( (a*b)/(a+b), 1.0/k );\n}\nfloat smin2( float a, float b, float k )\n{\n\treturn log( max( 0.001, exp( k*a ) ) + exp( k*b ) ) / k;\n}\nfloat cos3( vec3 a )\n{\n\treturn cos( a.x ) * cos( a.y ) * cos( a.z );\n}\n\nvec3 repeat( vec3 p, float s )\n{\n\treturn mod( p+0.5*s, s ) - 0.5*s;\n}\n\nvec3 repeatXZ( vec3 p, float s )\n{\n\tfloat\th = 0.5*s;\n\treturn vec3( mod( p.x+h, s ) - h, p.y, mod( p.z+h, s ) - h );\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture( iChannel1, (uv+0.5)/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nfloat fbm( vec3 p )\n{\n\tvec3\tf = vec3( 0.5, 2.0, 0.4 );\n\tvec3\tmulF = vec3( 6.0, 8.0, 6.0 );\n\tconst float\tmulA = 0.45;\n\tfloat\ta = 1.0;\n\tfloat\tv  = a * noise( f*p ); f *= mulF; a *= mulA;\n\t\t\tv += a * noise( f*p ); f *= mulF; a *= mulA;\n\t\t\tv += a * noise( f*p ); f *= mulF; a *= mulA;\n\t\t\tv += a * noise( f*p ); f *= mulF; a *= mulA;\n\treturn v * (1.0 / (1.0+0.5+0.25+0.125));\n}\n\nfloat randCell( vec2 cell, vec2 bisou )\n{\n\treturn fract( 10.0 + sin( 32151.16 * (cell.x+bisou.x) + 0.12191 )\n\t\t\t\t + sin( -2558.5189 * (cell.y + bisou.y) + 0.59168 ) );\n}\n\nfloat map( vec3 p )\n{\n\tconst float\tRepeatRate = 8.0;\n\tvec2\tcellXZ = floor( (p.xz - 0.5 * RepeatRate) / RepeatRate );\n\tfloat\tradius = 1.5 + 0.5 * sin( cellXZ.x + 0.564 * iTime )*sin( 1.4651 * cellXZ.y + 1.2169216* iTime );\n\n\tfloat\tcellRandom = randCell( cellXZ, vec2( 0, 0 ) );\n\tvec3\theight = vec3( 0.0,\n\t\t\t\t\t\t  -4.0\n\t\t\t\t\t\t  * abs( sin( 37861.32 * cellXZ.x + 2.863 * iTime )\n\t\t\t\t\t\t  *sin( 031651.0 * cellXZ.y + 1.894 * iTime ) )\n\t\t\t\t\t\t  , 0.0 );\n\tfloat\tvscale = mix( 0.125, 0.8, cellRandom );\n\tvec3\tscale = vec3( 1, vscale, 1 );\n\tfloat \tdsphere = length( repeatXZ( scale *( p + height), RepeatRate ) ) - radius;\n\tfloat \tdplane = p.y + 2.0;\n\n\treturn smin2( dsphere, dplane, -1.8 );//, cos(p.x)+cos(p.y)+cos(p.z));\n}\n\nvec3 normal( vec3 p )\n{\n\tconst vec2 e = vec2( 0.001, 0.0 );\n\tfloat c = map( p );\n\treturn normalize( vec3(\n\t\tmap( p + e.xyy ) - map( p - e.xyy ),\n\t\tmap( p + e.yxy ) - map( p - e.yxy ),\n\t\tmap( p + e.yyx ) - map( p - e.yyx )\n\t\t) );\n}\n\nfloat AO( vec3 p, vec3 n )\n{\n\tconst float step = 0.01;\n\tp += 0.1 * n;\n\tfloat AO = 1.0;\n\tfor ( int i=0; i < 16; i++ )\n\t{\n\t\tfloat\td = max( 0.0, map( p ) );\n\t\tp += step * n;\n\t\t\n\t\tAO *= 1.0 - exp( -20.0 * d * (2.0+float(i)) );\n\t}\n\treturn AO;\n}\n\nfloat\tShadow( vec3 p, vec3 l )\n{\n\tconst float step = 0.5;\n\tp += 0.5 * l;\n\tfloat S = 1.0;\n\tfor ( int i=0; i < 16; i++ )\n\t{\n\t\tfloat\td = max( 0.0, map( p ) );\n\t\tp += step * l;\n\t\t\n\t\tS *= 1.0 - exp( -20.0 * d * (3.0+float(i)) );\n\t}\n\treturn S;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2\tuv = fragCoord.xy / iResolution.xy;\n\tvec3\tp = vec3( 5.0 * sin( 1.0 * iTime )\n\t\t\t\t\t , 6.0 + 4.0 * sin( 0.5 * iTime )\n\t\t\t\t\t , 4.0 * iTime );\n\tvec3\ttarget = p + vec3(\n\t\tsin( 1.2 * iTime ),\n\t\tsin( 1.0 + 0.7891 * iTime ),\n\t\t5.0 + 2.0 * sin( 1.2 * iTime )\n\t\t);\n\t\n\tvec3\tat = normalize( target - p );\n\tvec3\tright = normalize( cross( at, vec3( 0, 1, 0 ) ) );\n\tvec3\tup = cross( right, at );\n\n\tfloat\tTan = 0.6;\n\tvec3\tv = normalize( vec3( iResolution.x / iResolution.y * Tan * (2.0 * uv.x - 1.0), Tan * (2.0 * uv.y - 1.0), 1.0 ) );\n\t\t\tv = v.x * right + v.y * up + v.z * at;\n\n\tfloat\tt = 0.0;\n\tfor ( int i=0; i < 64; i++ )\n\t{\n\t\tfloat\td = map( p );\n\t\tt += d;\n\t\tp += d * v;\n\t}\n\t\n\tif ( t <= 0.0 )\n\t\tt = 1e4;\n\t\n\t\n\tvec3\tcolor = vec3( 0.0 );\n\t\n\tvec3\tn = normal( p );\n\n\tvec3\tLight = normalize( vec3( 1 ) );\n\t\n\tfloat\tstrip = fract( 1.0 * p.y + p.z - 1.0 * p.x );\n\t\t\tstrip = step( strip, 0.4 ); \n\t\n\tvec3\tsurfColor = mix( vec3( 1 ), vec3( 1, 0.1, 0.1 ), strip );\n\t\n\tvec3\tdiff = Shadow( p, Light ) * clamp( 0.0, 1.0, 0.5 + 0.5 * dot( n, Light )) * vec3( 1 );\n\t\t\tdiff += AO( p, n ) * mix( vec3( 0.5 ), 0.2 * vec3( 0.2, 0.8, 1.0 ), (0.5 + 0.5 * n.y) );\n\t\n\tcolor = surfColor * diff;\n\t\n\tfloat fogExt = 0.025 * mix( 1.0, 1.5, 0.5 * (1.0 + noise( 0.625*vec3(1.5, 1.0, 1.5) * p + 1.0 * iTime * vec3( 0, 0, 2 ) )) );\n\tfloat fog = exp( -fogExt * t );\n\tcolor = mix( vec3( 1.0, 0.8, 0.4 ), color, fog );\n\t\n\tfragColor = vec4( color, 1.0 );\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"ldsSRN","date":"1397935974","viewed":293,"name":"Candy Squish","username":"Patapom","description":"Direct live from Revision 2014 ! ^_^","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["revision","live"],"hasliked":0,"parentid":"","parentname":""}}