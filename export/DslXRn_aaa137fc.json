{"ver":"0.1","info":{"id":"DslXRn","date":"1668445987","viewed":152,"name":"Left Brain 1 Neural SDF","username":"FackJox","description":"Based on https://www.shadertoy.com/view/wtVyWK","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["brain"],"hasliked":0,"parentid":"cdlXRn","parentname":" Neural Bunny SDF"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\n//like the last few shaders I've published, this is a neural network experiment.\n//this time, the neural network reproduces an SDF given the x,y,z coordinates\n//using siren networks with skip connections: https://vsitzmann.github.io/siren/\n\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\nfloat scene(vec3 p) {\n    //sdf is undefined outside the unit sphere, uncomment to witness the abominations\n    if (length(p) > 1.) {\n        return length(p)-.8;\n    }\n    //neural networks can be really compact... when they want to be\nvec4 f0_0=sin(p.y*vec4(.262,-2.117,-.827,-1.606)+p.z*vec4(-3.191,-3.576,-2.605,-.968)+p.x*vec4(-.303,3.429,1.155,-1.332)+vec4(-5.216,-.923,-3.037,-6.655));\nvec4 f0_1=sin(p.y*vec4(-1.658,2.142,-2.554,2.615)+p.z*vec4(-1.747,-3.244,1.042,3.228)+p.x*vec4(.152,2.375,2.264,-.058)+vec4(-4.478,5.213,-7.467,-7.860));\nvec4 f0_2=sin(p.y*vec4(4.299,2.326,.717,.617)+p.z*vec4(-1.005,3.554,3.286,-1.177)+p.x*vec4(-.345,-1.665,-1.227,-.405)+vec4(3.577,1.156,-2.322,8.057));\nvec4 f0_3=sin(p.y*vec4(-2.902,-2.685,-1.430,-2.001)+p.z*vec4(3.605,.267,-1.603,3.380)+p.x*vec4(-2.659,-.062,-2.576,-3.332)+vec4(-6.776,-1.114,-7.867,-2.914));\nvec4 f1_0=sin(mat4(.060,-.046,-.412,.179,-.253,.736,-.093,.263,.236,-.006,-.969,.959,-.289,.113,.194,.016)*f0_0+\n    mat4(-.135,-.443,.124,.773,-.583,-.183,-.584,.056,.256,-.524,-.002,.248,-.142,-.350,-.215,.575)*f0_1+\n    mat4(-.375,-.029,.319,-.237,-.063,.869,-.636,.928,-.477,-.043,.464,-.352,-.389,-.204,-.218,-.165)*f0_2+\n    mat4(-.318,-.458,.076,-.038,-.008,1.102,-.098,.868,.470,-.838,-.172,.410,.118,-.239,-.007,-.124)*f0_3+\n    vec4(-1.196,3.838,-1.654,-1.258))/1.0+f0_0;\nvec4 f1_1=sin(mat4(-.242,.126,-.396,-.434,.052,-.102,.606,.062,-.054,-.081,.855,-.062,.718,.372,-.143,-.424)*f0_0+\n    mat4(.233,-.723,.263,.091,-.126,.241,.649,-.399,.314,.266,1.151,.562,-.489,-.584,.467,.515)*f0_1+\n    mat4(.019,.564,-.877,.419,.039,-.617,.080,.031,.336,.630,.188,-.292,.650,.112,.546,.583)*f0_2+\n    mat4(-.219,.157,-.198,.556,-1.482,.539,-.666,.091,-.692,-.015,.455,-.009,.295,.134,-.436,.125)*f0_3+\n    vec4(-1.179,-2.728,2.584,1.606))/1.0+f0_1;\nvec4 f1_2=sin(mat4(.015,-.476,-.402,.099,.445,-.150,.329,.447,.777,-.123,-.143,-.220,-.804,.674,.176,1.124)*f0_0+\n    mat4(.044,-.049,-.073,-.188,.257,-.316,.225,-.676,.031,.370,.912,.552,-.259,.038,-.633,-.648)*f0_1+\n    mat4(-.392,.815,.346,.085,-.037,-.476,-.191,.051,-.150,-.319,.221,.383,.533,.706,.507,.447)*f0_2+\n    mat4(.458,.028,-.120,-.259,.142,-.475,.094,.578,-.300,-.078,-.168,-.399,.601,-.219,-.018,.576)*f0_3+\n    vec4(-1.612,3.722,3.389,-.414))/1.0+f0_2;\nvec4 f1_3=sin(mat4(-.093,.363,.148,.259,.214,.071,-.127,.499,.227,.225,.497,-.046,-.930,.621,-.753,-.802)*f0_0+\n    mat4(-.848,-.538,-.550,-.218,-.748,-.282,-.139,-.060,-.241,-.480,-.576,.187,.049,-.284,-.642,-.269)*f0_1+\n    mat4(-.709,-.115,-.629,.052,-.170,-.164,-.125,.446,-.251,.405,.370,-.071,.707,-1.033,-.216,-.952)*f0_2+\n    mat4(-.218,-.097,-.204,-.376,.849,.378,-.613,-.125,-.096,-.630,-.073,-.536,.216,-.054,.024,.225)*f0_3+\n    vec4(1.520,1.096,-2.990,1.644))/1.0+f0_3;\nvec4 f2_0=sin(mat4(-.554,.792,-.154,.200,.017,.278,.502,-.958,.069,.381,.129,-1.684,.877,.398,-.377,1.338)*f1_0+\n    mat4(.612,-.191,.352,.056,-.593,-.073,.803,1.106,-.100,-.621,.117,2.058,.265,-.522,.585,-.160)*f1_1+\n    mat4(.523,.581,.274,.708,-.166,-.231,.290,-1.131,-.911,.579,.594,.285,.583,.563,-.565,-.677)*f1_2+\n    mat4(-.359,-.153,-.612,.345,-1.297,-.580,.984,-.520,-.386,.348,.368,-1.202,-.693,.046,-.099,-.148)*f1_3+\n    vec4(-.468,1.659,-1.331,1.710))/1.4+f1_0;\nvec4 f2_1=sin(mat4(-.401,.471,.671,-.841,.530,.054,.456,.906,-.935,-.214,-.328,-.536,.326,-.194,-.228,.720)*f1_0+\n    mat4(-.560,-.833,.264,-.107,.392,-.431,-.092,-.679,.053,.040,-.002,.493,-.107,.655,-.571,1.522)*f1_1+\n    mat4(-.399,-.297,-.497,.327,-.343,.483,.880,1.657,-.679,.686,-.640,-1.892,.365,-.228,-.715,-.209)*f1_2+\n    mat4(-.519,-.224,-.053,-1.440,.013,-.420,.881,-1.068,-.554,-.431,.098,-.789,-.189,-.167,-.591,-1.344)*f1_3+\n    vec4(-2.194,2.301,-.313,-2.245))/1.4+f1_1;\nvec4 f2_2=sin(mat4(.299,.246,.131,.175,-.191,.107,.327,-.294,-.787,-.169,.126,.718,-.071,.621,.813,.237)*f1_0+\n    mat4(.130,.078,-.183,-.088,.052,.788,-.582,.385,.435,.581,-.232,.047,.551,.180,-.335,.179)*f1_1+\n    mat4(-.095,.352,.445,-.029,-.119,.011,.582,-.225,-.459,-.208,.933,-.911,-.298,-.390,-.438,-.362)*f1_2+\n    mat4(-.150,-.340,.095,.061,.324,.080,.117,1.081,.111,.016,-.640,.153,.228,-.362,-.306,-.702)*f1_3+\n    vec4(-2.147,-1.111,.851,-.977))/1.4+f1_2;\nvec4 f2_3=sin(mat4(-.609,-.120,-.182,-.044,.151,-.437,-.500,.322,-.110,-.064,-.338,.391,-.154,.140,.299,.118)*f1_0+\n    mat4(.685,1.747,.230,-.934,.705,-.895,.540,.299,.663,-.233,.217,.475,-.361,-.396,-.655,-.029)*f1_1+\n    mat4(-.231,.194,-.347,.034,.174,.940,-1.024,-.187,1.080,1.122,.620,.191,-.263,-.018,.139,-.195)*f1_2+\n    mat4(-.343,-.638,.255,.579,.290,.371,.280,-.122,-.070,-.473,.261,-.232,.122,-.896,.370,.604)*f1_3+\n    vec4(.687,.552,.959,.822))/1.4+f1_3;\nreturn dot(f2_0,vec4(-.088,-.064,-.060,.020))+\n    dot(f2_1,vec4(-.066,-.061,-.034,.052))+\n    dot(f2_2,vec4(-.074,-.085,-.067,.067))+\n    dot(f2_3,vec4(.060,.030,.098,.062))+\n    -0.066;\n    }\n\nvec3 norm(vec3 p) {\n    mat3 k = mat3(p,p,p)-mat3(0.001);\n    return normalize(scene(p) - vec3(scene(k[0]),scene(k[1]),scene(k[2])));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-0.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy-0.5*iResolution.xy)/iResolution.y;\n\n    vec3 cam = normalize(vec3(1.5,uv));\n    vec3 init = vec3(-3.,0,0);\n    \n    float yrot = 0.5;\n    float zrot = iTime*.2;\n    if (iMouse.z > 0.) {\n        yrot += -4.*mouse.y;\n        zrot = 4.*mouse.x;\n    }\n    cam = erot(cam, vec3(0,1,0), yrot);\n    init = erot(init, vec3(0,1,0), yrot);\n    cam = erot(cam, vec3(0,0,1), zrot);\n    init = erot(init, vec3(0,0,1), zrot);\n    \n    vec3 p = init;\n    bool hit = false;\n    for (int i = 0; i < 150 && !hit; i++) {\n        float dist = scene(p);\n        hit = dist*dist < 1e-6;\n        p+=dist*cam;\n        if (distance(p,init)>5.) break;\n    }\n    vec3 n = norm(p);\n    vec3 r = reflect(cam,n);\n    //don't ask how I stumbled on this texture\n    vec3 nz = p - erot(p, vec3(1), 2.) + erot(p, vec3(1), 4.);\n    float spec = length(sin(r*3.5)*.4+.6)/sqrt(3.);\n    //float spec = length(sin(r*3.5+sin(nz*120.)*.15)*.4+.6)/sqrt(3.);\n\n    vec3 col = vec3(.1,.1,.12)*spec + pow(spec,8.);\n    float bgdot = length(sin(cam*8.)*.4+.6)/2.;\n    vec3 bg = vec3(.1,.1,.11) * bgdot + pow(bgdot, 10.);\n    fragColor.xyz = hit ? col : bg;\n    fragColor = smoothstep(-.02,1.05,sqrt(fragColor)) * (1.- dot(uv,uv)*.5);\n}","name":"Image","description":"","type":"image"}]}