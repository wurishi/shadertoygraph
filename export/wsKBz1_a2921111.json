{"ver":"0.1","info":{"id":"wsKBz1","date":"1606607802","viewed":58,"name":"Rotation Experimentation","username":"Timmons","description":"Testing some basic rotations.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2dsdf","rotaion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nfloat sdEquilateralTriangle( in vec2 p )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) \n        p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    \n    p.x -= clamp( p.x, -2.0, 0.0 );\n    \n    return -length(p)*sign(p.y);\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp2( -k*a ) + exp2( -k*b );\n    return -log2( res )/k;\n}\n\nvec2 rotate2d(vec2 p, float _rads)\n{\n    float x1 = (p.x * cos(_rads)) - ( p.y * sin(_rads)) ;\n    float y1 = (p.y * cos(_rads)) + ( p.x * sin(_rads)) ; \n    \n    return vec2(x1, y1);\n}\n  \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n    p *= 2.0;\n    p = rotate2d(p,  sin(iTime-0.5) * 0.001*length(p) * (iTime*2.5) * 0.8);\n    \n\n    float scale = 2.5;\n    float offset = scale/2.0;\n    vec2 px = fract( p  ) * scale - offset;\n    \n    px = rotate2d(px,  (0.5 * sin(iTime-0.5)) * 0.001*length(p) * iTime * 9.2);\n    \n    \n\tfloat d0 = sdEquilateralTriangle(  px );\n    \n    float d1 = 99999.0;//sdEquilateralTriangle( p + vec2(2.0, 0.0) );\n    \n    float d = smin(d0, d1, 40.0);\n    \n    vec3 col;\n    if(d > 0.0)\n    {\n     \tcol = vec3(0.5, 0.1, 0.5);\n    \tcol.xy = rotate2d(col.xy, (px.y+px.x) * sin(iTime-0.5) * 0.001*length(p) * iTime * 9.2);\n    }\n    else\n        col = 10.0 * abs(d) * vec3(0.9, 0.1, 0.3);\n    \n    // Output to screen\n    fragColor =  vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}