{"ver":"0.1","info":{"id":"4tKGWz","date":"1474189120","viewed":333,"name":"rgba noise scaling","username":"ollj","description":"zooming tinto a QUICK hash24 over time.\nfract(x*time) is less seiture inducing than fract(x+-time)","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","hash24"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n#define highp\n#ifdef highp\nhighp const float tau=sqrt(5.)*.5+.5;//1.6180339887498948482045868343656\nhighp const float pi =asin(1.)*2.;   //3.1415926535897932384626433832795\nhighp const float phi=asin(1.)*4.;   //6.283185307179586476925286766559\n#else\nconst float tau=1.618034; \nconst float pi =3.1415927;\nconst float phi=6.2831853;\n#endif\n//higher precision can not be reached with 32-bit-IEEE754-signed-float.\n*/\n\n//iq gradient noise\nfloat hash(in vec2 p){return fract(sin(p.x*15.32758341+p.y*39.786792357-7.5312)*43758.236237153);}\n/*vec2 hash2(vec2 p){return vec2(hash(p*.754),hash(1.5743*p.yx+4.5891))-1.;}\n//https://www.shadertoy.com/view/4tsSW7\n*/\n\n#define bbsm 1739.\n#define bbsopt(a) (fract(a*a/bbsm)*bbsm)\n//vec2 bbsopt(in vec2 a){return fract(a*a/bbsm)*bbsm;}\n//fast hash24 function without sin() for webgl \nvec4 hash24(in vec2 p){vec2 a=mod((p),1024.);vec2 b=bbsopt(a);vec2 c=a.yx+bbsopt(b);\n return fract((b.xyyx+c.xyxy+(c.yx+bbsopt(c)).xxyy)/bbsm);}//https://www.shadertoy.com/view/4ssXzX\n//based on Blum,Blum&Shub 1986 and Sharpe http://briansharpe.wordpress.com/2011/10/01/gpu-texture-free-noise/\n//github.com/victor-shepardson\n\nvec4 noiseRgb(vec2 i){vec2 p=floor(i);\n    const float num=2.; //average multiple instances\n\tvec4 c=vec4(0.);\n\tfor(float i=0.;i<num;i+=1.)c+=hash24(p+i*1024.);\n\treturn c/num;}\n\n/*\nconst vec2 texSize = vec2(64,64);\n#define time sin(iTime)\n#define f32 (3.-2.*f)*f*f;\n#define oi vec2(0,1)\n#define doh(A) dot(20.*time*hash2(i+A),f-A)\nfloat noise(vec2 p){vec2 f=fract(p),i=floor(p),u=f32\nreturn mix(mix(doh(oi.xx),doh(oi.yx),u.x), \n           mix(doh(oi.xy),doh(oi.yy),u.x),u.y);}\n//https://www.shadertoy.com/view/4tsSW7\n*/\n\nvoid mainImage( out vec4 r,in vec2 fragCoord){\n\tvec2 v =.1*fragCoord.xy/iResolution.xy; \n    //r=texture(iChannel0,floor(v/10.0));\n    v=v*(iTime+25.)*9.;//this is tame\n    //v=v+iTime*9.;//this is not tame\n    //v=v-iTime*9.;//this seizure\n    \n    r=hash24(iResolution.xy/v);\n    /*\n    v*=texSize+0.5;\t  //to texels\n    v+=.2*noise(4.*v);//noise\n    vec2 f=fract(v);\n    v=floor(v)+f32    //smooth between texels\n    v=(v-.5)/texSize; //convert back to texcoords\n*/\n\t//r=texture(iChannel0,v);\n//r=hash24(iResolution.xy/v);\n}","name":"Image","description":"","type":"image"}]}