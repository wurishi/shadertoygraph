{"ver":"0.1","info":{"id":"3lXfWM","date":"1596976579","viewed":66,"name":"trying to create Sierpinski","username":"CoolerZ","description":"trying to create Sierpinski","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","sdf","sierpinski"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Sierpinski triangle fractal https://en.wikipedia.org/wiki/Sierpi%C5%84ski_triangle\n\n#define NUM_LEVELS 7\n\nconst float PI = radians(180.);\nconst float PI2 = 2.*PI;\nconst float Aoff = PI2/3.;\nconst float A1 = PI/2.;\nconst float A2 = A1+Aoff;\nconst float A3 = A2+Aoff;\n\nconst vec2 ax1 = normalize(vec2(cos(A1), sin(A1)));\nconst vec2 ax2 = normalize(vec2(cos(A2), sin(A2)));\nconst vec2 ax3 = normalize(vec2(cos(A3), sin(A3)));\nconst float doff = 1./sqrt(3.);\n\nfloat tri(in vec2 p)\n{\n    //Taken from https://iquilezles.org/articles/distfunctions2d\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - 1.0;\n    p.y = p.y + 1.0/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0, 0.0 );\n    return -length(p)*sign(p.y);\n}\n\nbool is_outside(vec2 p)\n{\n    vec2 tpos = vec2(0.);\n    if(tri(p-tpos) > 0.)return true;\n    float scale1 = 1.;\n    float scale2 = 2.;\n    bool outside = false;\n    for(int i=1;i<=NUM_LEVELS;i++)\n    {\n        vec2 p1 = tpos + ax1*doff*scale1;\n        vec2 p2 = tpos + ax2*doff*scale1;\n        vec2 p3 = tpos + ax3*doff*scale1;\n\n        if(tri((p-p1)*scale2)<0.)tpos = p1;\n        else if(tri((p-p2)*scale2)<0.)tpos = p2;\n        else if(tri((p-p3)*scale2)<0.)tpos = p3;\n        else\n        {\n            outside = true;\n            break;\n        }\n        scale1 *= .5;\n        scale2 *= 2.;\n    }\n    return outside;\n}\n\nvec2 rot2d(vec2 p, float angle)\n{\n    mat2 r = mat2(\n        cos(angle), sin(angle),\n        -sin(angle), cos(angle)\n    );\n    return r*p;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    uv = rot2d(uv, iTime);\n    vec3 col = is_outside(uv) ? vec3(0.) : vec3(uv,1);\n    if(uv.x<-1. || uv.x > 1.)col = vec3(0.);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}