{"ver":"0.1","info":{"id":"XfycWK","date":"1732361946","viewed":56,"name":"Raymarched Procedural Terrain v2","username":"Longingly","description":"Just fucking around with perlin noise. (v2 with added mouse support)","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","terrain","perlinnoise","proceduralgeneration"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Raymarched Procedural Terrain\" by Longingly. https://shadertoy.com/view/MfGyWG\n// 2024-11-23 11:37:58\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat sdfSphere(vec3 p, float size) {\n    return length(p) - size;\n}\n\nfloat sdfPlane(vec3 p, vec3 n, vec3 p0) {\n    return dot(p - p0, n);\n}\n\nfloat sdfNoisePlane(vec3 p) {\n    float offset = 0.;\n    if (abs(mod(p.x, 4.)) <= 0.25 || abs(mod(p.z, 4.)) <= 0.25) {\n        offset = .4;\n    }\n    return p.y + offset + snoise(p.xz * 0.06) * 2. - snoise(p.zx * 0.043) * 3.;\n}\n\nfloat smoothmin(float d1, float d2, float k) {\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\n    return mix(d2, d1, h) - k * h * (1.0 - h);\n}\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n    axis = normalize(axis);\n    float c = cos(angle);\n    float s = sin(angle);\n    float oc = 1.0 - c;\n\n    return mat3(\n        vec3(c + axis.x * axis.x * oc, axis.x * axis.y * oc - axis.z * s, axis.x * axis.z * oc + axis.y * s),\n        vec3(axis.y * axis.x * oc + axis.z * s, c + axis.y * axis.y * oc, axis.y * axis.z * oc - axis.x * s),\n        vec3(axis.z * axis.x * oc - axis.y * s, axis.z * axis.y * oc + axis.x * s, c + axis.z * axis.z * oc)\n    );\n}\n\nmat2 rot2D(float angle) {\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\nfloat improvedSine(float seed, float a, float b) {\n    return mix(a, b, (sin(iTime * seed) + 1.0) * 0.5);\n}\n\nfloat improvedCosine(float seed, float a, float b) {\n    return mix(a, b, (cos(iTime * seed) + 1.0) * 0.5);\n}\n\nfloat map(vec3 p) {\n    vec3 q1 = p;\n    //q1 *= rotationMatrix(vec3(1., 0, 0), .73);\n    float noisePlane = sdfNoisePlane(q1 + vec3(0., 8., iTime * 10.));\n    return noisePlane;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2. - iResolution.xy) / iResolution.y;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(0, 0, -10);\n    vec3 rd = normalize(vec3(uv, 1));\n    vec3 col = vec3(0);\n    \n    // Camera Transformations\n    rd.yz *= rot2D(-m.y);\n    rd.xz *= rot2D(-m.x);\n    \n    float t = 0.;\n    \n    for (int i = 0; i < 40; i++) {\n        vec3 p = ro + rd * t;\n        p.y += sin(iTime);\n        p.x += cos(iTime) * 2.;\n\n        float d = map(p);\n        \n        t += d;\n        \n        col = vec3(0., float(i) / 80., t / 40.);\n        if (t > 10.) col.x = (t - 10.) / 50. ;\n        \n        if (abs(d) < .01) break;\n    }\n    \n    fragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}