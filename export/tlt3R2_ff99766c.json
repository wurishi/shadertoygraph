{"ver":"0.1","info":{"id":"tlt3R2","date":"1576961557","viewed":396,"name":"Recursive gaussian filter","username":"Guilouf","description":"Recursive gaussian filter, 3*3 kernel","likes":5,"published":3,"flags":32,"usePreview":0,"tags":["filter","recursive","convolution","gaussian"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Ne fait rien que retranscrire le buffer, car ici pas de backbuffer sur image possible\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    vec4 draw = texture(iChannel0,uv);\n    fragColor = vec4(draw.rgb,1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define move(x, y) ((fragCoord.xy + vec2(x, y)) / iResolution.xy)\n#define movec(U) ((fragCoord.xy + U) / iResolution.xy)\n#define uv (fragCoord.xy / iResolution.xy)\n#define gaussian(x, y)  (gaussian_vec( vec2(x, y)))\n\nfloat gaussian_vec( vec2 coords)\n    // for 3*3 gaussian kernels only, sigma 1\n{\n    // 1 / sum of the kernel before multiplied by s\n    float s = 0.6193470305571772;  \n    return exp(-2. * ( coords.x * coords.x + coords.y * coords.y)) * s ;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define convo(x, y, draw) (texture(iChannel1, move(x, y)) * gaussian(x, y))\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    if (iFrame == 0 ) {  // texture init\n    \tfragColor = texture(iChannel0,uv);\n        return;\n    } \n\n\tvec4 draw;\n\n    draw += convo(-1, -1, draw);\n    draw += convo(-1, 0, draw);\n    draw += convo(-1, 1, draw);\n    draw += convo(0, -1, draw);\n    draw += convo(0, 0, draw);\n    draw += convo(0, 1, draw);\n    draw += convo(1, -1, draw);\n    draw += convo(1, 0, draw);\n    draw += convo(1, 1, draw);\n    \n    fragColor = draw;\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}