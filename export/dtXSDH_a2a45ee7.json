{"ver":"0.1","info":{"id":"dtXSDH","date":"1674665817","viewed":117,"name":"Silent - 1","username":"Grooo","description":"melting screen one pixel at a time","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["feedback"],"hasliked":0,"parentid":"dtXXWH","parentname":"Fork Plastic Cr Grooo 712"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Plastic Cream\n\n// i was playing with Conway's game of life cellular automaton\n// thinking i had an intuition for a smooth fading version\n// with a lifetime gradient and a neighbor ratio\n\n// found by accident that it can make reaction diffusion patterns\n// got overwhelmed but couldn't posted another turing pattern feedback\n// so i went a bit too far and now it's weird enough as i like it\n\n// iteration from Wasp Blanket https://www.shadertoy.com/view/NlVBz1\n\n#define T(uv) abs(texture(iChannel0,uv).b)\n#define N(v) normalize(v)\n\n\nfloat white_noise(vec2 p){\n    return hash21(ceil(fract(0.77)*12.0)*p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 frame = texture(iChannel0, uv);\n    \n    vec4 heart = texture(iChannel1, uv);\n    \n    // tints\n    vec3 tint = .5 + .5 * cos(vec3(1,2,3)*5. + length(uv-.5)*3.);\n    fragColor = vec4(frame.r * tint, 1);\n    tint = .25 + .5 * cos(vec3(1,2,3)*5. + length(uv-.5)*2. + 3.);\n    fragColor.rgb += frame.g * tint;\n    \n    // normal\n    float height = 1.;\n    vec3 unit = vec3(20./iResolution.xy, 0);\n    vec3 normal = normalize(vec3(T(uv+unit.xz)-T(uv-unit.xz),\n                                 T(uv-unit.zy)-T(uv+unit.zy),\n                                 T(uv) * height));\n    \n    // light\n    fragColor += vec4(.925) * clamp(dot(normal, N(vec3(-1,7,1))), 0., 0.7);\n    fragColor += vec4(.2) * pow(clamp(dot(normal, N(vec3(-1,1,2))), 0., 1.), 40.);\n    \n    // shadows\n    fragColor -= vec4(0.5) * clamp(dot(normal, N(vec3(0,-4,1))), 0., 1.);\n    fragColor *= pow(max(abs(frame.b)-.02,.0), .5);\n    \n    // - B&W\n    float luminance = (fragColor.r+fragColor.g+fragColor.b) / 3.0;\n    vec3 bw = vec3(luminance);\n    \n    // - Tint 2\n    vec3 blue = vec3( 0.0, 0.07, 0.37 );\n    bw = mix(bw, blue, 0.14);\n    bw += blue * 0.75;\n    \n    // - \n    fragColor = vec4(bw, 1.0);\n    \n    // - Heart\n    const vec3 chromaKey = vec3(0.0, 0.0, 0.0);\n    heart.a = 10.0 * (heart.r + heart.b) - 6.0 * heart.g;\n    heart.rgb = mix(heart.rgb, vec3(heart.r, min(heart.g, heart.b), heart.b), 0.6);\n    \n    fragColor.rgb = mix(fragColor.rgb, heart.rgb, clamp(heart.a, 0.0, 1.0));\n    \n    // - Grain\n\tfloat grain = white_noise(uv*iTime*.5) * 0.35;\n\tfragColor.rgb = mix( fragColor.rgb, vec3(0.0), grain ); \n        \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nconst float speed = 0.4;\nconst float turbulences = 1.3;\nconst float attraction = 0.3;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    if (iFrame < 1){\n        fragColor = vec4(hash23(vec3(fragCoord, 0.)), 0, 0);\n        return;\n    }\n\n    // coordinates\n    vec2 uv = fragCoord/R;\n    vec2 mouse = (iMouse.xy - R.xy / 1.)/R.y;\n    vec2 p = (fragCoord.xy - R.xy / 1.)/R.y;\n    vec2 offset = vec2(0);\n    float dist = length(p);\n    \n    // turbulences\n    float noise = fbm(vec3(p * 3., dist-iTime*.1*speed));\n    noise = pow(abs(noise), 0.25);\n    float angle = noise * 6.28;\n    offset += turbulences * vec2(cos(angle), sin(angle));\n\n    // attraction\n    offset += attraction * normalize(p) * sin(dist * 39. + iTime);\n    \n    float dt = 30. * iTimeDelta;\n    \n    // displace frame buffer\n    vec4 frame = texture(iChannel0, uv + dt * offset * speed / R);\n    \n    // edge spawn\n    bool spawn = fragCoord.x < 1. || fragCoord.x > R.x-1.\n              || fragCoord.y < 1. || fragCoord.y > R.y-1.\n              || (iMouse.z > .0 && length(p-mouse) < 10./R.y);\n    \n    // spawn from noise\n    vec2 rng = hash23(vec3(fragCoord, iFrame));\n    if (spawn) frame = vec4(step(0.5, rng.x),step(10.5, rng.y),0,0);\n    \n    // neighbor values\n    vec2 neighbors = vec2(0);\n    for (float x = -1.; x <= 1.; ++x){\n        for (float y = -1.; y <= 1.; ++y){\n            if (x == 0. && y == 0.) continue;\n            neighbors += texture(iChannel0, uv+vec2(x,y)/R).rg;\n        }\n    }\n    \n    // animation fade\n    frame.r += 4.0 * (neighbors.r > 4.0 ? 1. : -1.) * iTimeDelta;\n    frame.g += 4.0 * (neighbors.g > 4.0 ? 1. : -1.) * iTimeDelta;\n    \n    fragColor = vec4(clamp(frame.rg, 0., 1.), noise, 1.);//, frame.a + (neighbors.r + neighbors.g) * iTimeDelta * .1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define R iResolution.xy\n\n// Dave Hoskins https://www.shadertoy.com/view/4djSRW\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx+33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n}\n\nfloat hash21(vec2 p){\n\treturn fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nfloat gyroid (vec3 seed)\n{\n    return dot(sin(seed),cos(seed.yzx));\n}\n\nfloat fbm (vec3 seed)\n{\n    float result = 0.;\n    float a = .5;\n    for (int i = 0; i < 3; ++i) {\n        seed += result / 2.;\n        result += gyroid(seed/a)*a;\n        a /= 2.;\n    }\n    return result;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Code by Flopine\n// Thanks to wsmind, leon, lsdlive, lamogui, XT95 and Coyhot for teaching me <3\n// Cookie Collective rulz\n\n#define ITER 80.\n#define PI 3.141592\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )/k;\n}\n\n// from: https://beta.observablehq.com/@mattdesl/heartbeat-function\nfloat beat (float value, float intensity, float frequency) \n{\n    float v = atan(sin(value * 3.14 * frequency) * intensity);\n    return (v + 3.14 / 2.) / 3.14;\n}\n\nvec2 moda (vec2 p, float per)\n{\n    float a = atan(p.y,p.x);\n    float l = length(p);\n    a = mod(a-per/2.,per)-per/2.;\n    return vec2(cos(a),sin(a))*l;\n}\n\n// iq's palette https://iquilezles.org/articles/palettes\nvec3 palette (float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return a+b*cos(2.*PI*(c*t+d));\n}\n    \n\nfloat cyl (vec2 p, float r)\n{return length(p)-r;}\n\n\n// iq's formula https://iquilezles.org/articles/distfunctions\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - r;\n}\n\n\nfloat prim1(vec3 p)\n{\n    return sdCapsule(p, vec3(0.,-1.5,0.), vec3(0.,1.5,0.), 1.4+p.y*0.3);\n}\n\nfloat cocoon(vec3 p)\n{\n    \n    vec3 pp = p;\n    p.x += sin(p.y*0.75) + cos(p.x*0.5);\n    p *= 0.43 + beat(iTime, .5, 1.0);\n    float cap = prim1(p);\n    \n    p.xz *= rot(iTime);\n    p.xz *= rot(p.y*0.5);\n    p.xz = moda(p.xz, 2.*PI/3.);\n   \tp.x -= (2.-abs(p.y-1.)*0.3);\n    float branch1 = cyl(p.xz, 0.4);\n    \n    p = pp;\n\n    p.xy *= rot(PI/3.);\n    p.xz *= rot(iTime*0.32);\n    p.xz *= rot(p.y*0.4);\n    p.xz = moda(p.xz, 2.*PI/2.);\n   \tp.x -= (1.+abs(p.y)*0.1);\n    float branch2 = cyl(p.xz, 0.2+abs(p.y)*0.03);\n    \n    p = pp;\n\n    p.xy *= rot(-PI/3.);\n    p.xz *= rot(iTime*0.2);\n    p.xz *= rot(p.y*0.4);\n    p.xz = moda(p.xz, 2.*PI/2.);\n   \tp.x -= (1.+abs(p.y)*0.1);\n    float branch3 = cyl(p.xz, 0.1+abs(p.y)*0.03);\n    \n    return smin(branch3,smin(branch2,smin(cap,branch1,3.), 3.),3.);\n}\n\n\nfloat g = 0.;\n\nvec4 SDF (vec3 p)\n{\n    vec4 d = vec4(cocoon(p),p);\n     // glow from lsdlive, originally from balkhan : https://www.shadertoy.com/view/4t2yW1\n    g += 0.01/(0.01+d.x*d.x);\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = 2.*(fragCoord/iResolution.xy)-1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    uv += texture(iChannel1, uv*0.022+iTime*0.012).r *0.024;\n    \n    vec3 ro = vec3( 0.1, 1., -7.0 ); \n    vec3 p = ro;\n    vec3 dir = normalize(vec3 (uv, 1.));\n    float shad = 0.0;\n    vec3 c = vec3(0.0);\n    \n    vec3 pal = palette(length(uv),\n                      vec3(0.0),\n                      vec3(0.0),\n                      vec3(-.0),\n                      vec3(0.82, 0.7, 0.72));\n    \n    for (float i = 0.; i<ITER; i++){\n        float d = SDF(p).x;\n        if( d < 0.001 ){\n            shad = i / ITER;\n            c = texture(iChannel0, SDF(p).yz*0.2).xyz\n                *vec3(shad)*4.\n                *vec3(length(p.z)*0.25, 0.3, 0.75) \n                + g*0.001*length(uv)*0.6;\n            break;\n        }\n        else c = pal;\n        p+= d*dir*0.8;\n    }\n    // Output to screen\n    fragColor = vec4(c, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}