{"ver":"0.1","info":{"id":"MlBcRV","date":"1509216367","viewed":1824,"name":"Lod bloom","username":"luluco250","description":"Test realistic bloom using texture lods","likes":10,"published":3,"flags":32,"usePreview":0,"tags":["2d","blur","filter","bloom","lod"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Final blend\n\n#define BLOOM_INTENSITY 0.5\n#define BLOOM_STEPS 9\n#define SHOW_BLOOM 0\n\nconst vec2[] offsets = vec2[](\n    vec2(0.05, 0.075),\n    vec2(0.975, 0.05),\n    vec2(0.975, 0.55),\n    vec2(0.975, 0.875),\n    vec2(0.7, 0.95),\n    vec2(0.65, 0.7),\n    vec2(0.65, 0.5),\n    vec2(0.475, 0.65),\n    vec2(0.325, 0.65)\n);\n\nvec2 scale_uv(vec2 uv, vec2 scale, vec2 center) {\n    return (uv - center) * scale + center;\n}\n\nvec4 read_bloom(sampler2D sp, vec2 uv, float lod, vec2 center) {\n    uv = scale_uv(uv, vec2(1.0 / pow(2.0, lod)), center);\n    return texture(sp, uv);\n}\n\nvec4 get_bloom(sampler2D sp, vec2 uv, int steps) {\n    vec4 col = vec4(0.0);\n    \n    for (int i = 1; i <= steps; ++i)\n        col += read_bloom(sp, uv, float(i), offsets[i - 1]);\n    \n    return col / float(steps);\n}\n\nvec3 screen(vec3 a, vec3 b, float w) {\n    return mix(a, vec3(1.0) - (vec3(1.0) - a) * (vec3(1.0) - b), w);\n}\n\nvec3 tonemap(vec3 col) {\n    return col / (vec3(1.0) + col);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    \n    #if SHOW_BLOOM == -1\n    \n    color = texture(iChannel0, uv);\n    \n    #elif SHOW_BLOOM == 2\n    \n    color = texture(iChannel1, uv);\n    \n    #else\n    \n    vec4 bloom = get_bloom(iChannel1, uv, BLOOM_STEPS);\n    \n    #if SHOW_BLOOM == 1\n    \n    color = bloom;\n    \n    #else\n    \n    color = texture(iChannel0, uv);\n    \n    if (iMouse.z > 0.0)\n    \tcolor += (bloom * BLOOM_INTENSITY) * iMouse.x / iResolution.x;\n    else\n        color += bloom * BLOOM_INTENSITY;\n    \n    color.rgb = tonemap(color.rgb);\n    color.rgb *= 1.0 - smoothstep(0.0, 2.0, distance(uv, vec2(0.5)));\n    \n    //color.rgb = screen(color.rgb, bloom.rgb, BLOOM_INTENSITY);\n    \n    #endif\n    #endif\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Source image\n\nconst vec3 bg_top    = vec3(0.0);\nconst vec3 bg_bottom = vec3(4.0, 0.0, 4.0);\n\nconst vec3 grd_high = vec3(10.0);\nconst vec3 grd_low  = vec3(0.0);\n\nfloat ground(vec2 uv) {\n    uv = mod(floor(uv), 2.0);\n    return mod(uv.x + uv.y, 2.0);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color.a = 0.0;\n    \n    color.rgb = mix(bg_bottom, bg_top, smoothstep(0.0, 0.6, uv.y));\n\t\n    vec3 cam = vec3(uv * 2.0 - 1.0, 1.0);\n    vec2 ground_uv = cam.xz / cam.y;\n    ground_uv.y -= iTime;\n    \n    vec3 ground_color = mix(grd_low, grd_high, ground(ground_uv));\n    \n    vec3 fog_color = mix(vec3(1.0), bg_bottom, uv.y);\n    ground_color *= fog_color;\n    \n    if (uv.y < 0.5)\n        color.rgb = ground_color;\n}\n","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Split source into lods\n\nconst vec2[] offsets = vec2[](\n    vec2(0.05, 0.075),\n    vec2(0.975, 0.05),\n    vec2(0.975, 0.55),\n    vec2(0.975, 0.875),\n    vec2(0.7, 0.95),\n    vec2(0.65, 0.7),\n    vec2(0.65, 0.5),\n    vec2(0.475, 0.65),\n    vec2(0.325, 0.65)\n);\n\nvec2 scale_uv(vec2 uv, vec2 scale, vec2 center) {\n    return (uv - center) * scale + center;\n}\n\nvoid draw(inout vec4 color, sampler2D sp, vec2 uv, float lod, vec2 center) {\n    uv = scale_uv(uv, vec2(pow(2.0, lod)), center);\n    \n    if (uv.x >= -0.1 && uv.x <= 1.1 && uv.y >= -0.1 && uv.y <= 1.1)\n        color += textureLod(sp, uv, lod);\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 uv = coord / iResolution.xy;\n    color = vec4(0.0);\n    \n    for (int i = 1; i < 10; ++i)\n        draw(color, iChannel0, uv, float(i), offsets[i - 1]);\n}\n","name":"Buf B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"// Horizontal blur\n\n#define BLUR_SAMPLES 13\n#define pi 3.141592\n#define pow2(x) (x * x)\n\nfloat gaussian(float x, float sigma) {\n    return (1.0 / sqrt(2.0 * pi * pow2(sigma))) * exp(-(pow2(x) / (2.0 * pow2(sigma))));\n}\n\nvec4 blur(sampler2D sp, vec2 uv, vec2 scale) {\n    vec4 col = vec4(0.0);\n    float accum, weight, offset;\n    \n    for (int i = -BLUR_SAMPLES / 2; i < BLUR_SAMPLES / 2; ++i) {\n        offset = float(i);\n        weight = gaussian(offset, sqrt(float(BLUR_SAMPLES)));\n        col += texture(sp, uv + scale * offset) * weight;\n        accum += weight;\n    }\n    \n    return col / accum;\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color = blur(iChannel0, uv, vec2(ps.x, 0.0));\n}\n","name":"Buf C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"// Vertical blur\n\n#define BLUR_SAMPLES 13\n#define pi 3.141592\n#define pow2(x) (x * x)\n\nfloat gaussian(float x, float sigma) {\n    return (1.0 / sqrt(2.0 * pi * pow2(sigma))) * exp(-(pow2(x) / (2.0 * pow2(sigma))));\n}\n\nvec4 blur(sampler2D sp, vec2 uv, vec2 scale) {\n    vec4 col = vec4(0.0);\n    float accum, weight, offset;\n    \n    for (int i = -BLUR_SAMPLES / 2; i < BLUR_SAMPLES / 2; ++i) {\n        offset = float(i);\n        weight = gaussian(offset, sqrt(float(BLUR_SAMPLES)));\n        col += texture(sp, uv + scale * offset) * weight;\n        accum += weight;\n    }\n    \n    return col / accum;\n}\n\nvoid mainImage(out vec4 color, vec2 coord) {\n    vec2 ps = vec2(1.0) / iResolution.xy;\n    vec2 uv = coord * ps;\n    \n    color = blur(iChannel0, uv, vec2(0.0, ps.y));\n}\n","name":"Buf D","description":"","type":"buffer"}]}