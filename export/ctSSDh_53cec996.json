{"ver":"0.1","info":{"id":"ctSSDh","date":"1675976824","viewed":64,"name":"Flower #0","username":"mkundera","description":"Learning how to use shadertoy and how to draw with maths. In the hope of generating a plethora of designs representing fauna and flora in the upcoming weeks. Watched a lot of videos from iq yesterday that really blew me away.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flower"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float pi = 3.141592;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    // vec2 q = vec2(0.5,0.5); //center of the flower\n    \n    vec2 uv = ( fragCoord -.5*iResolution.xy ) / iResolution.y; //centered pixel y-normalized coordinates\n    \n    float p = length(uv); //distance of (x,y) coordinates from the center\n    \n    float flower = 0.; //initialize the shape we will create\n    \n    int layers = 5; // number of contours in the flower\n    float layersf = float(layers); // float conversion of int layers to use in algebraic operations when building up flower function\n    \n    float petal0 = 0.05; //distance from center of first contour\n    float petalN = 0.2; //distance from center of last contour\n    float petalStep = (petalN - petal0)/layersf; //distance between each contour\n    \n    float num_petal = 9.0; // number of petals we want the flower to have\n\n    // building the flower function\n    for(float k=0.; k<layersf; k+=1.){\n        float level = 0.1 + k/layersf; // level used to create multiple step function\n        \n        \n        // contourRotating: time function used to move contours around\n        float contourRotating = sin(iTime); //basic rotation\n        contourRotating *= (0.3+ 0.2*sin(k*2.*pi/3.)); // magnitude change + slight variation for each contours\n        \n        // contourRotating works by adding a changing phase inside the cosine of petalShape        \n        // Uncomment below (and comment current petalShape def) for trippy alternative to contour rotating behavior: \n        //float petalShape = p + (0.35 + k*0.03)*p*cos(num_petal*(atan( uv.y - q.y, uv.x - q.x) + contourRotating));  \n        \n        \n        \n        \n        // petalShape: SDF used to generate petal contours\n        float petalShape = p; // generates a circle\n        petalShape += (0.35 + k*0.03)*p*sin(1.1*cos(num_petal*atan( uv.y, uv.x) + contourRotating)); //generates petal contours with variations per level\n        \n        \n        flower += level*smoothstep(petal0 +k*petalStep + 0.005*k*sin(iTime/k),petal0 + k*petalStep + 0.01 + 0.005*k*sin(iTime/k), petalShape); //adding contour information for every k\n    }\n\n    vec3 col = vec3(0.3, 0.7, sin(iTime));\n    \n    col *= 1.0 - vec3(0.3,0.4,0.5)*flower;\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n\n// Commenting to keep track of upgrades I'd possibly like to add to this current design.\n// 1. Petals: make them less symmetric, add some relief on the side.\n// 2. Motion: add some breathing motion to inner contours (just need to change smoothstep edges in time) //tried something, not sure of the result\n// 3. Color: I'd like to have some yellow tone in the center that creates a blooming motion. Still vague in my head, will refine idea later.","name":"Image","description":"","type":"image"}]}