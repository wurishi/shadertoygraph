{"ver":"0.1","info":{"id":"wl3cRB","date":"1609342242","viewed":280,"name":"Test black hole","username":"LucaCiucci","description":"test","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["blackhole","blackhole"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n╔════════════════════════════════════════════════╗\n║            Luca Ciucci - 18/10/2020            ║\n║                                                ║\n║  lucaciucci99.com - develop@lucaciucci99.com   ║\n╚════════════════════════════════════════════════╝\n*/\n\n// ???\n#ifdef GL_FRAGMENT_PRECISION_HIGH\nprecision highp float;\n#else\nprecision mediump float;\n#endif\n\n#define SHADERTOY\n\n#ifdef SHADERTOY\n\t#define time iTime\n\t#define resolution iResolution\n#else\n\tuniform float time;\n\tuniform vec2 resolution;\n#endif\n\n// ================================================================\n//                          PARAMETERS\n// ================================================================\n\n// radius\nfloat R = 100.0;//min(resolution.x, resolution.y) / 5.0;\n\n// base color of the plasma\nvec4 color = vec4(0.25, 0.1, 1.0, 1.0);\n\n// ================================================================\n//                          FUNCTIONS\n// ================================================================\n\n// square of a float\nfloat sqr(float x);\n\n// a messy, but common, random function https://www.shadertoy.com/view/ttS3DV\nfloat rand(in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233))) * 43758.5453123);\n}\n\n// convert the float value to color (apply color map)\nvec4 getColor(float value);\n\n// rotate a vector\nvec2 rotate(vec2 p, float angle);\n\n// undistorted map pixel to value\nfloat map(vec2 p);\n\n// ================================================================\n//                              MAIN\n// ================================================================\n\n#ifdef SHADERTOY\n\tvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n#else\n\tvoid main(void)\n#endif\n{\n#ifdef SHADERTOY\n    //#define gl_FragCoord fragCoord\n    #define gl_FragColor fragColor\n#endif\n  \n\t// \n    R = min(resolution.x, resolution.y) / 4.0;\n    \n    vec2 c = resolution.xy * 0.5;\n    vec2 p = gl_FragCoord.xy;\n\n    // posizione\n    vec2 p_rel = p - c;\n    float r2 = sqr(p_rel.x)+ sqr(p_rel.y);\n    float r = sqrt(r2);\n    float theta = atan(p.x, p.y);\n\n    float angle = sqrt(2.0*R/abs(r-R));\n\n\n    float v = 0.0;\n    v+= map(rotate(p_rel, angle + time*0.3));\n    v += 5.0/(sqr((r - R)/(R/7.0))+0.5);\n    if (r < R)\n        v*=sqr(r/R);\n    //v *= 1.0 + sqr(max(0.0, sin((p.x-p.y)/R+time*1.0)-0.5)*1.0);\n    //v += abs(sin(r/100.0))*pow(abs(sin(theta*3.0)),5.0);\n    //v += 2000.0/(r*r);\n\n    //v = map(p_rel);\n    //v+=stars(p);\n\n    gl_FragColor = getColor(v);\n}\n\n// ================================================================\n//                          FUNCTIONS\n// ================================================================\n\n////////////////////////////////////////////////////////////////\nfloat sqr(float x)\n{\n    return x*x;\n}\n\nvec4 getColor(float value)\n{\n    return color * value;\n}\n\nvec2 rotate(vec2 p, float angle)\n{\n    vec2 result;\n    result.x = p.x*cos(angle) - p.y*sin(angle);\n    result.y = p.x*sin(angle) + p.y*cos(angle);\n    return result;\n}\n\nfloat stars(vec2 p)\n{\n    p*=5.0/R;\n    return pow(abs(sin(p.x)*sin(p.y)), 1000.0)*50.0;\n}\n\nfloat map(vec2 p)\n{\n    float theta = atan(p.x, p.y);\n\n    float factor_1 = max(0.0,\n        pow(max(0.0,(1.0+sin(theta*7.0)))*0.5, 1.0)\n      );\n\n    float factor_2 = pow(\n        sqr(sin(\n            length(p)/(R*2.0)+theta+time*0.2\n          ))\n          ,10.0);\n    \n    // make the further pixels less brighter\n    factor_2 *= 2.0 - length(p)/(R*2.0);\n\n    // return max(0.0,factor_1);\n    // return max(0.0,factor_2);\n    \n    return max(0.0,factor_1*factor_2);\n}\n","name":"Image","description":"","type":"image"}]}