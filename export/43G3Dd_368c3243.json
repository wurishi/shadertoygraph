{"ver":"0.1","info":{"id":"43G3Dd","date":"1718376371","viewed":110,"name":"octahedral mapping & padding","username":"sciecode","description":"octahedral uv mapping with padded border - allows filtering, mipmap and atlas tiling\nrequires (1 << max_mip_level) pixels border on highest res to guarantee 1px pixel border on lowest res mip.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["octahedral","padding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n    Defines on common.\n    Adjust pixel size, border size & visualize uv tiling.\n*/\n\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr){\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n#define AA 2\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.y;\n    float x_ratio = iResolution.x/iResolution.y - 1.;\n    if (abs(uv.x) > 1.) {\n        vec3 tot = vec3(0.0);\n        for( int j=0; j<AA; j++ )\n        for( int i=0; i<AA; i++ ) {\n            vec2 off = vec2(i,j)/float(AA) - 0.5;\n            vec2 st = uv + vec2(.11, 0) + off/iResolution.y;\n            ivec2 cx = ivec2(st);\n            vec2  px = st - vec2(cx);\n            vec2  p = (-1.0+2.0*px) * 7.5;\n            \n            vec3 ta = vec3(0);\n            vec3 ro = vec3(3.*cos(.2 * iTime), 0, 3.*sin(.2 * iTime));\n            mat3 ca = setCamera(ro, ta, 0.0);\n            vec3 rd = ca * normalize(vec3(p,13.));\n            vec3 col = vec3(0.0);\n\n            float b = dot(ro, rd);\n            float c = dot(ro, ro) - 1.0;\n            float h = b*b - c;\n\n            if(h>0.0) {\n                float t = -b - sqrt( h );\n                vec3 nor = normalize(ro + t*rd);\n                vec3 ref = reflect(rd, nor);\n                vec2 qt = border_contract(oct_enc32(normalize(ref)), D, B);\n                col = texture(iChannel0, qt).rgb;\n            }\n            tot += col;\n        }   \n        tot /= float(AA*AA);\n        fragColor = vec4( tot, 1.0 );\n    } else {\n        fragColor = texture(iChannel0, uv);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define uvs 0\n#define D 32. // total size in pixels\n#define B 4.  // border width pixels\n\nvec2 msign( vec2 v ) {\n    return vec2( (v.x>=0.0) ? 1.0 : -1.0, \n                 (v.y>=0.0) ? 1.0 : -1.0 );\n}\n\nvec2 border_expand(vec2 uv, float ext, float border, float px) {\n    float I = ext - 2. * border;\n    uv = (uv - border/ext) * ext/I;\n    if (px > .5) uv = (floor(uv * I) + .5) / (I);\n    return uv;\n}\n\nvec2 border_contract(vec2 uv, float ext, float border) {\n    float I = ext - 2. * border;\n    uv = uv / (ext/I) + border/ext;\n    return uv;\n}\n\nvec2 oct_border(vec2 uv, float ext, float border, float px) {\n    // scale uv to account for borders\n    uv = border_expand(uv, ext, border, px);\n    // flip borders\n    vec2 st = uv;\n    st = (uv.x < 0. || uv.x > 1.) ? vec2(1. - fract(st.x), 1. - st.y) : st;\n    st = (uv.y < 0. || uv.y > 1.) ? vec2(1. - st.x, 1. - fract(st.y)) : st;\n    return st;\n}\n\nvec2 oct_enc32(in vec3 nor) {\n    nor.xyz /= abs(nor.x) + abs(nor.y) + abs(nor.z);\n    float t = max(-nor.z,0.0);\n    nor.x += (nor.x>0.0)?t:-t;\n    nor.y += (nor.y>0.0)?t:-t;\n    return nor.xy * .5 + .5;\n}\n\nvec3 oct_dec32(vec2 uv) {\n    vec2 v = uv/.5 - 1.;\n    vec3 nor = vec3(v, 1.0 - abs(v.x) - abs(v.y));\n    float t = max(-nor.z,0.0);\n    nor.x += (nor.x>0.0)?-t:t;\n    nor.y += (nor.y>0.0)?-t:t;\n    return normalize( nor );\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 qw = oct_border(uv, D, B, 0.);\n    vec3 dir = oct_dec32(qw);\n    #if uvs == 1\n        vec2 st = oct_border(uv, D, B, 1.);\n        fragColor = vec4(st, 0, 1);\n    #else\n        fragColor = texture(iChannel0, dir).rgba;\n    #endif\n    if (iMouse.z > .5) {\n        if (abs(dir.x) < .0075) fragColor = vec4(1, .5, .5, 1);\n        else if (abs(dir.y) < .0075) fragColor = vec4(.5, 1, .5, 1);\n        else if (abs(dir.z) < .0075) fragColor = vec4(.5, .5, 1, 1);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}