{"ver":"0.1","info":{"id":"WtcXzS","date":"1581160407","viewed":168,"name":"Projected Music Take 1","username":"michaelforrest","description":"https://youtu.be/PYTKk2OehrA?t=180","likes":1,"published":1,"flags":6,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 rotateUV(vec2 uv, float rotation) {\n    float sine = sin(rotation);\n    float cosine = cos(rotation);\n\n    // uv -= pivot;\n    uv.x = uv.x * cosine - uv.y * sine;\n    uv.y = uv.x * sine + uv.y * cosine;\n    // uv += pivot;\n\n    return uv;\n}\nfloat wiggleLayer(\n    vec2 uv, \n    float width, \n    float speed,\n    float amplitude, \n    float density,\n    float phase\n){\n    float v = abs(uv.x * 1./width);\n    v += sin((uv.y - (iTime * speed) + phase) * density)*amplitude;\n    return smoothstep(.5,.5-2./iResolution.y,v);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    float beat = 1. - pow(fract(iTime / .8), 3.);\n    // center is 0\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xy;\n\n    vec3 col = vec3(0); // clear\n    float skewAmount = (iMouse.x / iResolution.x) * 2.;\n    float skew = sin(iTime * skewAmount + (uv.y - 0.5) * 3.0) * 0.05;\n\t//uv .x += skew;\n    col.r = wiggleLayer(rotateUV(uv, skew), \t\t\t\t0.3, 2.5, .3 * texture(iChannel0, vec2(0.2,0)).r, 5. , 0.);\n    col.g = wiggleLayer(rotateUV(uv + vec2(0.3, 0.), skew),  .2, 1.0, .4 * texture(iChannel0, vec2(0.4,0)).r, 20., 3.14);\n    col.b = wiggleLayer(rotateUV(uv + vec2(-0.3, 0.), skew), .2, 1.0, .4 * texture(iChannel0, vec2(0.6,0)).r, 20., 3.14);\n    // vec2(uv.x + 0.3 + skew, uv.y)\n\t\n    fragColor = vec4(col,1.0) * 0.4 + texture(iChannel1, fragCoord.xy / iResolution.xy);\n}\n","name":"Image","description":"","type":"image"}]}