{"ver":"0.1","info":{"id":"ttXBzS","date":"1597002849","viewed":230,"name":"Excessive Glitch","username":"t420babe","description":"glitchy bright shader made experimenting with chapter 10 in The Book of Shaders\n(https://thebookofshaders.com/10)","likes":1,"published":3,"flags":0,"usePreview":0,"tags":["brighcolors","spazz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\n\n// https://thebookofshaders.com/edit.php#10/ikeda-00.frag\nfloat random(in float x) {\n\treturn fract(sin(x) * 1e1);\n}\n\n// https://thebookofshaders.com/edit.php#10/ikeda-00.frag\nfloat random(in vec2 pos) {\n\treturn fract(sin(dot(pos.xy, vec2(12.9898,78.233)))* 43758.5453123);\n}\n\n// https://thebookofshaders.com/edit.php#10/ikeda-00.frag\nfloat random_series(float x, float freq, float t) {\n\treturn step(0.8, random(floor(x * freq) - floor(t)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t// [-1, 1]\n\tvec2 pos = (2.0 * fragCoord - iResolution.xy) /iResolution.y;\n\n\tfloat i_time = 0.01;\n\tvec3 color = vec3(0.0);\n\tfloat cols = 1.0;\n\tfloat freq = random(floor(sin(iTime * PI)));\n\tfloat t = i_time * freq  - tan(iTime * PI * 0.9);\n\n\t/*\n\t\t if (fract(pos.y * cols * 0.3) < 0.5) {\n\t\t t *= -1.0;\n\t\t }\n\t */\n\n\tfreq -= random(exp(pos.y * pos.y * pos.y));\n\n\tfloat offset_value = 0.025;\n\tcolor = vec3(\n\t\t\trandom_series(pos.x, freq * 65.0, t + offset_value),\n\t\t\trandom_series(pos.x, freq * 65.0, t),\n\t\t\trandom_series(pos.x, freq * 65.0, t - offset_value)\n\t\t\t);\n\n\tvec3 rgb = vec3(1.0 - color.x, color.y, 0.5);\n\n\t// Output to screen\n\tfragColor = vec4(rgb,1.0);\n}","name":"Image","description":"","type":"image"}]}