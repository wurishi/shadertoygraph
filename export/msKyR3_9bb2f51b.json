{"ver":"0.1","info":{"id":"msKyR3","date":"1696412057","viewed":401,"name":"Hexcopter Flying","username":"dr2","description":"Fly the drone; slider controls speed, ring click changes view (multiple views including fpv)","likes":31,"published":3,"flags":32,"usePreview":1,"tags":["interactive","forest","flight","drone","fpv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// \"Hexcopter Flying\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\n#define AA  0   // (= 0/1) optional antialiasing\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r);\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w);\nfloat PrSphDf (vec3 p, float r);\nfloat PrCylDf (vec3 p, float r, float h);\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h);\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h);\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri);\nfloat Minv2 (vec2 p);\nfloat Maxv2 (vec2 p);\nfloat Minv3 (vec3 p);\nfloat SmoothMin (float a, float b, float r);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nmat3 FlMat (float pit, float yaw, float rol);\nmat3 StdVuMat (float el, float az);\nfloat Ssign (float x);\nvec2 PixToHex (vec2 p);\nvec2 HexToPix (vec2 h);\nfloat HexEdgeDist (vec2 p);\nvec3 HsvToRgb (vec3 c);\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val);\nfloat Hashfv2 (vec2 p);\nvec2 Hashv2v2 (vec2 p);\nfloat Noisefv2 (vec2 p);\nfloat Fbm1 (float p);\nfloat Fbm2 (vec2 p);\nfloat Fbm3 (vec3 p);\nvec3 VaryNf (vec3 p, vec3 n, float f);\nvec4 Loadv4 (int idVar);\n\n#define VAR_ZERO min (nFrame, 0)\n\nmat3 flMat;\nvec3 qHit, flPos, tOff, sunDir;\nvec2 cIdB, cIdS, cMidB, cMidS;\nfloat tCur, dstFar, flSz, hgSizeB, hgSizeS, cDir, cType, csOcc, pWid;\nint nFrame, idObj;\nbool flHide;\nconst int idGrnd = 1, idFrm = 2, idTrnk = 3, idLvs = 4, idCab = 11, idBod = 12, idArm = 13,\n   idGard = 14, idMot = 15, idSup = 16, idAnt = 17, idSkd = 18, idCam = 19, idProp = 20;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\n#define CosSin(x) (sin ((x) + vec2 (0.5 * pi, 0.)))\n#define DMIN(id) if (d < dMin) { dMin = d;  idObj = id; }\n#define DMINQ(id) if (d < dMin) { dMin = d;  idObj = id;  qHit = q; }\n\nfloat FlObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, a, s, r;\n  dMin = dstFar / flSz;\n  p = flMat * (p - flPos) / flSz;\n  p.xz = vec2 (p.z, - p.x);\n  q = p;\n  q.y -= 0.6;\n  d = max ((abs (q.y) + abs (q.z)) / sqrt(2.) - 0.5, max (q.y - 0.35, abs (q.x) - 0.7));\n  DMINQ (idCab);\n  d = PrRoundCylDf (vec3 (q.x, q.y - 0.17, abs (q.z) - 0.53).yzx, 0.03, 0.07, 0.5);\n  DMINQ (idCab);\n  d = min (min (PrSphDf (vec3 (abs (q.x) - 0.7, q.y, q.z), 0.2),\n     PrSphDf (vec3 (q.x - 0.7, q.y, abs (q.z) - 0.4), 0.1)),\n     PrSphDf (vec3 (q.x, q.y - 0.35, q.z), 0.15));\n  DMINQ (idCam);\n  d = PrRoundCylDf (vec3 (abs (q.xz) - vec2 (0.5, 0.2), q.y - 0.6), 0.02, 0.01, 0.3);\n  DMINQ (idAnt);\n  q = p;\n  d = PrSphDf (vec3 (abs (q.x) - 0.6, q.y + 0.35, q.z), 0.15);\n  DMINQ (idCam);\n  q.y -= -0.6;\n  d = min (PrRoundBoxDf (vec3 (q.x, q.y, abs (q.z) - 0.55), vec3 (0.7, 0.01, 0.06), 0.02),\n     PrCylDf (vec3 (abs (q.xz) - vec2 (0.55, 0.55), q.y - 0.2), 0.04, 0.2));\n  DMINQ (idSkd);\n  q = p;\n  a = (length (q.xz) > 0.) ? atan (q.z, - q.x) / (2. * pi) : 0.;\n  s = sign (fract (3. * a) - 0.5);\n  q.xz = Rot2Cs (q.xz, CosSin (2. * pi * (floor (6. * a) + 0.5) / 6.));\n  d = min (max ((abs (q.y) - q.x) / sqrt(2.) - 0.85, max (-1. - q.x, abs (q.y) - 0.35)),\n     max ((abs (q.y) + abs (q.z)) / sqrt(2.) - 0.14, abs (q.x + 1.) - 0.1));\n  DMINQ (idBod);\n  d = max ((abs (abs (q.y) - 0.1) + abs (q.z)) / sqrt(2.) - 0.04, abs (q.x + 2.5) - 1.5);\n  DMINQ (idArm);\n  d = (abs (length (q.xz) - 3.06) + abs (abs (q.y) - 0.22)) / sqrt(2.) - 0.04;\n  q.x += 2.8;\n  r = length (q.xz) - 1.2;\n  d = max (d, - r);\n  DMINQ (idSup);\n  d = PrRoundCylDf (q.xzy, 0.15, 0.05, 0.25);\n  DMINQ (idMot);\n  q.y = abs (q.y) - 0.22;\n  d = max (Maxv2 (abs (abs (Rot2Cs (q.xz, CosSin (pi/4.))) - 0.85)) - 0.04, q.y);\n  DMINQ (idSup);\n  d = (abs (r) + abs (q.y)) / sqrt(2.) - 0.04;\n  DMINQ (idGard);\n  q.xz = Rot2Cs (q.xz, CosSin (10.1 * s * pi * tCur));\n  d = PrRoundBoxDf (q, vec3 (1.1, 0.01, 0.07), 0.01);\n  DMINQ (idProp);\n  return flSz * dMin;\n}\n\nfloat FlObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    d = FlObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0005 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 FlObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-3 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = FlObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat FlObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    h = FlObjDf (ro + d * rd);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += h;\n    if (sh < 0.05 || d > 10.) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec4 FlCol ()\n{\n  vec4 col4, fCol4, gCol4, lCol4;\n  float a;\n  fCol4 = vec4 (0.8, 0.8, 0.9, 0.2);\n  gCol4 = vec4 (0.7, 0.6, 0.2, 0.5);\n  lCol4 = vec4 (1., 0.3, 0.3, -1.);\n  if (idObj == idMot || idObj == idGard) a = atan (qHit.z, - qHit.x) / (2. * pi) + 0.5;\n  if (idObj == idCab) {\n    col4 = mix (gCol4, fCol4 * ((qHit.y < 0.) ? 1.2 : 1.), step (0.02, abs (qHit.y)));\n    if (qHit.y > 0.) col4 = mix (gCol4, col4, step (0.05, abs (abs (qHit.x - 0.4 +\n       0.6 * abs (qHit.z) - 0.05) - 0.1)));\n    col4 = mix (lCol4.rrga, col4, step (0.21, length (qHit.yz)));\n    if (qHit.x < 0.) col4 = mix (mix (lCol4.rgga, lCol4.ggra, step (0.5, fract (2. * tCur +\n       0.25 * sign (qHit.z)))), col4, step (0.05, length (vec2 (qHit.y, abs (qHit.z) - 0.4))));\n  } else if (idObj == idBod) {\n    col4 = mix (gCol4, fCol4 * ((qHit.y < 0.) ? 1.2 : 1.), step (0.02, abs (qHit.y)));\n    if (qHit.y < 0.) col4 = mix (lCol4.grba, col4, step (0.02, abs (qHit.x + 0.3)));\n  } else if (idObj == idMot) {\n    col4 = gCol4;\n    if (abs (qHit.y) < 0.18) col4 *= 0.5 + 0.5 * step (0.5, fract (16. * a));\n    else col4 = mix (lCol4.grba, col4, step (0.03, length (qHit.xz)));\n  } else if (idObj == idArm) {\n    col4 = mix (fCol4, gCol4, step (0.7, fract (8. * qHit.x)));\n  } else if (idObj == idSup) {\n    col4 = mix (fCol4, gCol4, step (0.7, fract (16. * qHit.y)));\n  } else if (idObj == idGard) {\n    col4 = mix (fCol4, gCol4, step (0.7, fract (64. * a)));\n  } else if (idObj == idAnt) {\n    col4 = vec4 (0.8, 0.8, 0.8, 0.2);\n  } else if (idObj == idSkd) {\n    col4 = vec4 (0.4, 0.4, 0.4, 0.05);\n  } else if (idObj == idCam) {\n    col4 = vec4 (0.1, 0.1, 0.1, 0.3);\n  } else if (idObj == idProp)  {\n    col4 = vec4 (0.9, 0.9, 1., 0.3) * (0.5 + 0.5 * step (0.5, fract (2. * abs (qHit.x))));\n  }\n  return col4;\n}\n\nfloat Ddot (vec2 p)\n{\n  return dot (p, p);\n}\n\nvec3 TruchSDist (vec2 p)\n{\n  vec2 pc, pc1, pc2, dp;\n  float d, d1, d2, cxy, rc, ac, s, ss;\n  bool ct;\n  ct = (cType == 2. || cType == 4.);\n  if (ct) {\n    pc1 = - vec2 (0., cDir);\n    pc2 = vec2 (sqrt3/2. * Ssign (p.x), 0.5 * cDir);\n    d1 = Ddot (p - pc1);\n    d2 = Ddot (p - pc2);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = 0.5;\n    d = abs (sqrt (d) - rc);\n  } else {\n    if (cDir != 0.) p = 0.5 * vec2 (p.x - cDir * sqrt3 * p.y, cDir * sqrt3 * p.x + p.y);\n    pc1 = vec2 (sqrt3/2. * Ssign (p.x), 0.);\n    pc2 = vec2 (sqrt3 * Ssign (p.x), 0.);\n    d1 = sqrt (Ddot (p - pc1));\n    d2 = abs (sqrt (Ddot (p - pc2)) - 1.5);\n    d = min (d1, d2);\n    pc = (d == d1) ? pc1 : pc2;\n    rc = (d == d1) ? 0.: 1.5;\n  }\n  dp = p - pc;\n  cxy = cIdB.x - cIdB.y;\n  s = (ct && cxy < 0. || ! ct && abs (cxy - 2.) == 1.) ? -1. : 1.;\n  ac = (0.5 - atan (dp.y, - dp.x) / (2. * pi)) * s;\n  if (! ct && abs (cxy - 2.) <= 1.) ac += 1./6.;\n  ss = Ssign (length (dp) - rc);\n  return vec3 (d * ss, rc * ss * s, ac);\n}\n\nbool OnTrk (vec2 w)\n{\n  vec2 wp, wm;\n  float cxy;\n  bool cyo, offTrk;\n  cxy = cIdB.x - cIdB.y;\n  cyo = (mod (cIdB.y, 2.) == 1.);\n  wm = Rot2Cs (w, sin (- pi / 3. + vec2 (0.5 * pi, 0.))) - vec2 (0., 0.3);\n  wp = Rot2Cs (w, sin (pi / 3. + vec2 (0.5 * pi, 0.)));\n  offTrk = (cxy == -2. && wm.y > 0. ||\n     ! cyo && (cxy == -3. && w.y > -0.3 || cxy == -2. || cxy == -1. && wm.y > 0. ||\n     cxy == 1. && wm.y < 0. || (cxy == 2. || cxy == 3.) && w.x < 0. || cxy == 4. || cxy == 5.) ||\n     cyo && (cxy == -3. || cxy == 0. && wp.x > 0. || (cxy == 1. || cxy == 2.) && w.x > 0. ||\n     cxy == 3. || cxy == 4. && wm.x < 0. || cxy == 5. && wm.y < 0.));\n     return ! offTrk;\n}\n\nvoid BConf ()\n{\n  float h, cxy;\n  cMidB = HexToPix (cIdB * hgSizeB);\n  h = Hashfv2 (cIdB);\n  if (Hashfv2 (17.11 * cIdB) > 0.4) {\n    cDir = floor (3. * h) - 1.;\n    cType = 3.;\n  } else {\n    cDir = 2. * floor (2. * h) - 1.;\n    cType = 4.;\n  }\n  cxy = cIdB.x - cIdB.y;\n  if (cxy == 0.) cType = 1.;\n  else if (abs (cxy) == 1.) cType = mod (cIdB.x, 2.) + 1.;\n  else if (cxy == -2. || cxy == -3. || cxy == 5.) cType = 2.;\n  else if (cxy == 2. || cxy == 3. || cxy == 4.) cType = 1.;\n  if (cType <= 2.) {\n    if (cType == 1. && (cxy == 1. || cxy == 2. || cxy == 3.)) cDir = 0.;\n    else if (cType == 1. && cxy == 4.) cDir = -1.;\n    else if (cType == 2. && cxy == 5.) cDir = 1.;\n    else cDir = 2. * mod (cIdB.x, 2.) - 1.;\n  }\n}\n\nfloat BObjDf (vec3 p)\n{\n  vec3 q, cm3;\n  vec2 w;\n  float dMin, d;\n  dMin = dstFar;\n  if (cType > 0.) {\n    q = p;\n    d = q.y - 0.02;\n    DMIN (idGrnd);\n    w = (q.xz - cMidB) / hgSizeB;\n    cm3 = TruchSDist (w);\n    if (cType <= 2. && cm3.y != 0. && OnTrk (w)) {\n      d = PrTorusBxDf (vec3 (hgSizeB * abs (cm3.x), q.y - 0.6, hgSizeB * HexEdgeDist (w)),\n         vec3 (pWid, 0.6, 0.2), 0.05);\n      DMIN (idFrm);\n    }\n  }\n  return dMin;\n}\n\nfloat BObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv;\n  vec2 edN[3], pM;\n  float dHit, d, s, eps;\n  bool cNu;\n  if (rd.x == 0.) rd.x = 1e-3;\n  if (rd.z == 0.) rd.z = 1e-3;\n  eps = 0.002;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= Ssign (dot (edN[k], rd.xz));\n  vri = hgSizeB / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSizeB;\n  dHit = 0.;\n  cIdB = PixToHex (ro.xz / hgSizeB);\n  pM = HexToPix (cIdB);\n  cNu = true;\n  for (int j = VAR_ZERO; j < 120; j ++) {\n    if (cNu) {\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n      BConf ();\n      cNu = false;\n    }\n    d = BObjDf (ro + dHit * rd);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      cIdB = PixToHex ((ro.xz + dHit * rd.xz) / hgSizeB);\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      cNu = true;\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 BObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-3 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = BObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat BObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  cIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    cIdB = PixToHex (p.xz / hgSizeB);\n    if (cIdB != cIdP) {\n      cIdP = cIdB;\n      BConf ();\n    }\n    h = BObjDf (p);\n    sh = min (sh, smoothstep (0., 0.1 * d, h));\n    d += h;\n    if (sh < 0.05 || d > 10.) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec4 BObjCol (vec3 ro, out vec2 vf)\n{\n  vec4 col4;\n  vec3 col, cm3;\n  vec2 w;\n  float dt;\n  vf = vec2 (0.);\n  if (idObj == idGrnd) {\n    w = (ro.xz - cMidB) / hgSizeB;\n    cm3 = TruchSDist (w);\n    col = mix (vec3 (0.4, 0.3, 0.1), vec3 (0.4, 0.5, 0.2), 2. * Fbm2 (ro.xz));\n    vf = vec2 (8., 1.);\n    if (cType <= 2. && cm3.y != 0. && OnTrk (w)) {\n      dt = hgSizeB * abs (cm3.x);\n      col = mix (vec3 (0.6, 0.6, 0.5), col, smoothstep (0., 0.01, abs (dt - pWid) - 0.03));\n      if (dt < pWid) {\n        col = vec3 (0.5, 0.4, 0.2) * (1. - 0.1 * Noisefv2 (16. * ro.xz));\n        vf = vec2 (64., 0.2);\n      }\n    }\n    col4 = vec4 (col, 0.);\n  } else if (idObj == idFrm) {\n    col4 = (ro.y > 0.05) ? vec4 (0.8, 0.6, 0.2, -1.) : vec4 (0.7, 0.7, 0.8, 0.);\n  }\n  return col4;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, clCol;\n  vec2 q;\n  float f, ff, fd;\n  if (rd.y > -0.02 && rd.y < 0.03 * Fbm1 (16. * atan (rd.z, - rd.x))) {\n     col = mix (vec3 (0.4, 0.5, 0.8) + 0.05, vec3 (0.3, 0.41, 0.65) + 0.07,\n        smoothstep (-0.02, 0.01, rd.y));\n  } else {\n    q = 0.02 * (ro.xz + 0.5 * tCur + ((50. - ro.y) / rd.y) * rd.xz);\n    ff = Fbm2 (q);\n    f = smoothstep (0.2, 0.8, ff);\n    fd = smoothstep (0.2, 0.8, Fbm2 (q + 0.01 * sunDir.xz)) - f;\n    clCol = (0.7 + 0.5 * ff) * (vec3 (0.7) - 0.7 * vec3 (0.3, 0.3, 0.2) * sign (fd) *\n       smoothstep (0., 0.05, abs (fd)));\n    col = mix (vec3 (0.4, 0.5, 0.8), clCol, 0.1 + 0.9 * f * smoothstep (0.02, 0.05, rd.y));\n  }\n  return col;\n}\n\nvoid SConf ()\n{\n  vec2 r;\n  cMidS = HexToPix (cIdS * hgSizeS);\n  r = Hashv2v2 (73. * cIdS + 1.1);\n  tOff.xz = 0.26 * sqrt3 * hgSizeS * (0.5 + 0.5 * r.x) * CosSin (2. * pi * r.y );\n  tOff.y = r.x + r.y;\n}\n\nvoid SBConf (vec2 cIdBT, vec2 u)\n{\n  cIdB = cIdBT;\n  BConf ();\n  csOcc = (hgSizeB * abs (TruchSDist ((u - cMidB) / hgSizeB).x) < pWid + 0.4) ? 0. :\n     0.01 + 0.99 * Hashfv2 (17.11 * cIdS);\n}\n\nfloat SObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, h;\n  dMin = dstFar;\n  if (csOcc > 0.) {\n    q = p;\n    q.xz = (q.xz - cMidS) / hgSizeS;\n    q.xz -= tOff.xz;\n    h = 0.15 + 0.15 * tOff.y;\n    q.y -= h;\n    d = PrCylDf (q.xzy, 0.05, h);\n    DMIN (idTrnk);\n    if (csOcc > 0.5) {\n      q.y -= h + 0.55;\n      d = PrConCapsDf (q.xzy, sin (0.085 * pi + vec2 (0.5 * pi, 0.)), 0.18, 0.4);\n    } else {\n      q.y -= h + 0.25;\n      d = SmoothMin (PrSphDf (q, 0.25), PrSphDf (vec3 (q.x, abs (q.y) - 0.25, q.z), 0.17), 0.2);\n    }\n    DMIN (idLvs);\n  }\n  return dMin;\n}\n\nfloat SObjRay (vec3 ro, vec3 rd)\n{\n  vec3 vri, vf, hv;\n  vec2 edN[3], pM, u, cIdBT;\n  float dHit, d, s, eps;\n  bool cNu;\n  if (rd.x == 0.) rd.x = 1e-3;\n  if (rd.z == 0.) rd.z = 1e-3;\n  eps = 0.002;\n  edN[0] = vec2 (1., 0.);\n  edN[1] = 0.5 * vec2 (1., sqrt3);\n  edN[2] = 0.5 * vec2 (1., - sqrt3);\n  for (int k = 0; k < 3; k ++) edN[k] *= Ssign (dot (edN[k], rd.xz));\n  vri = hgSizeS / vec3 (dot (rd.xz, edN[0]), dot (rd.xz, edN[1]), dot (rd.xz, edN[2]));\n  vf = 0.5 * sqrt3 - vec3 (dot (ro.xz, edN[0]), dot (ro.xz, edN[1]), dot (ro.xz, edN[2])) / hgSizeS;\n  dHit = 0.;\n  cIdS = PixToHex (ro.xz / hgSizeS);\n  pM = HexToPix (cIdS);\n  cNu = true;\n  for (int j = VAR_ZERO; j < 220; j ++) {\n    if (cNu) {\n      hv = (vf + vec3 (dot (pM, edN[0]), dot (pM, edN[1]), dot (pM, edN[2]))) * vri;\n      s = Minv3 (hv);\n      SConf ();\n    }\n    u = cMidS + tOff.xz;\n    cIdBT = PixToHex (u / hgSizeB);\n    if (cNu || cIdB != cIdBT) SBConf (cIdBT, u);\n    cNu = false;\n    d = SObjDf (ro + dHit * rd);\n    if (dHit + d < s) {\n      dHit += d;\n    } else {\n      dHit = s + eps;\n      cIdS = PixToHex ((ro.xz + dHit * rd.xz) / hgSizeS);\n      pM += sqrt3 * ((s == hv.x) ? edN[0] : ((s == hv.y) ? edN[1] : edN[2]));\n      cNu = true;\n    }\n    if (d < eps || dHit > dstFar) break;\n  }\n  if (d >= eps) dHit = dstFar;\n  return dHit;\n}\n\nvec3 SObjNf (vec3 p)\n{\n  vec4 v;\n  vec2 e;\n  e = 1e-3 * vec2 (1., -1.);\n  for (int j = VAR_ZERO; j < 4; j ++) {\n    v[j] = SObjDf (p + ((j < 2) ? ((j == 0) ? e.xxx : e.xyy) : ((j == 2) ? e.yxy : e.yyx)));\n  }\n  v.x = - v.x;\n  return normalize (2. * v.yzw - dot (v, vec4 (1.)));\n}\n\nfloat SObjSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  vec2 cIdP, u;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02;\n  cIdP = vec2 (-999.);\n  for (int j = VAR_ZERO; j < 30; j ++) {\n    p = ro + d * rd;\n    cIdS = PixToHex (p.xz / hgSizeS);\n    if (cIdS != cIdP) {\n      cIdP = cIdS;\n      SConf ();\n    }\n    u = cMidS + tOff.xz;\n    SBConf (PixToHex (u / hgSizeB), u);\n    if (csOcc > 0.) {\n      h = SObjDf (p);\n      sh = min (sh, smoothstep (0., 0.1 * d, h));\n      d += h;\n    } else d += 0.1 * hgSizeS;\n    if (sh < 0.05 || d > 10.) break;\n  }\n  return 0.6 + 0.4 * sh;\n}\n\nvec4 SObjCol (vec3 ro, out vec2 vf)\n{\n  vec4 col4;\n  if (idObj == idTrnk) {\n    col4 = vec4 (0.5, 0.3, 0.1, 0.1);\n    vf = vec2 (32., 1.);\n  } else if (idObj == idLvs) {\n    col4 = vec4 (HsvToRgb (vec3 (0.25 + 0.15 * csOcc, 0.7, 0.9)), 0.);\n    col4 = mix (col4, vec4 (0.9, 0.9, 0., 0.1), step (0.7, Fbm3 (64. * ro.xzy)));\n    vf = vec2 (16., 2.);\n  }\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec2 e, vf;\n  vec3 col, vn, qHitF;\n  float dstObj, dstObjB, dstObjS, dstObjFl, sh;\n  int idObjFl, idObjB, idObjS;\n  flSz = 0.12;\n  pWid = 0.7;\n  if (! flHide) {\n    dstObjFl = FlObjRay (ro, rd);\n    idObjFl = idObj;\n    qHitF = qHit;\n  } else dstObjFl = dstFar;\n  dstObjB = BObjRay (ro, rd);\n  idObjB = idObj;\n  dstObjS = SObjRay (ro, rd);\n  idObjS = idObj;\n  dstObj = dstFar;\n  if (min (min (dstObjB, dstObjS), dstObjFl) < dstFar) {\n    if (dstObjFl < min (dstObjB, dstObjS)) {\n      dstObj = dstObjFl;\n      idObj = idObjFl;\n    } else if (dstObjB < dstObjS) {\n      dstObj = dstObjB;\n      idObj = idObjB;\n    } else {\n      dstObj = dstObjS;\n      idObj = idObjS;\n    }\n    ro += dstObj * rd;\n    vf = vec2 (0.);\n    if (dstObj == dstObjFl) {\n      qHit = qHitF;\n      vn = FlObjNf (ro);\n      col4 = FlCol ();\n    } else if (dstObj == dstObjB) {\n      cIdB = PixToHex (ro.xz / hgSizeB);\n      BConf ();\n      vn = BObjNf (ro);\n      col4 = BObjCol (ro, vf);\n    } else if (dstObj == dstObjS) {\n      vn = SObjNf (ro);\n      col4 = SObjCol (ro, vf);\n    }\n    if (col4.a >= 0.) {\n      sh = min (FlObjSShadow (ro + 0.01 * vn, sunDir), BObjSShadow (ro + 0.01 * vn, sunDir));\n      sh = min (sh, SObjSShadow (ro + 0.01 * vn, sunDir));\n      if (vf.y > 0.) vn = VaryNf (vf.x * ro, vn, vf.y);\n      col = col4.rgb * (0.2 + 0.2 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n         0.8 * sh * max (dot (vn, sunDir), 0.)) +\n         col4.a * step (0.95, sh) * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n    } else col = col4.rgb * (0.6 - 0.4 * dot (rd, vn));\n  } else if (rd.y < 0.) {\n    ro -= (ro.y / rd.y) * rd;\n    vn = vec3 (0., 1., 0.);\n    col = mix (vec3 (0.4, 0.3, 0.1), vec3 (0.4, 0.5, 0.2), 2. * Fbm2 (ro.xz)) *\n       (0.2 + 0.8 * max (dot (vn, sunDir), 0.));\n    col = mix (col, 0.95 * vec3 (0.45, 0.55, 0.7), pow (1. + rd.y, 64.));\n  } else {\n    col = BgCol (ro, rd);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 ShowWg (vec2 uv, vec2 canvas, vec3 col, float parmS)\n{\n  vec4 wgBx[2];\n  vec2 um;\n  float asp, s;\n  asp = canvas.x / canvas.y;\n  wgBx[0] = vec4 (0.45 * asp, -0.15, 0.012 * asp, 0.2);\n  wgBx[1] = vec4 (0.45 * asp, -0.45, 0.02, 0.);\n  um = 0.5 * uv - wgBx[0].xy;\n  s = Maxv2 (abs (um) - wgBx[0].zw);\n  if (abs (s) * canvas.y < 1. || s < 0. && mod (0.5 * ((0.5 * uv.y - wgBx[0].y) / wgBx[0].w -\n     0.99), 0.1) * canvas.y < 6.) col = vec3 (0.7);\n  col = mix (vec3 (1.), col, smoothstep (1.5, 3.5, abs (length (um - vec2 (0., (parmS - 0.5) *\n     2. * wgBx[0].w)) - 0.7 * wgBx[0].z) * canvas.y));\n  col = mix (vec3 (1.), col, smoothstep (1.2, 2.2, abs (length (0.5 * uv - wgBx[1].xy) -\n     wgBx[1].z) * canvas.y));\n  return col;\n}\n\n#define N_WIN 3\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 stDat, mPtr;\n  vec3 ro, rd, vd, col, vuPos, vuFarPos;\n  vec2 canvas, uv, us, mSize, ut[N_WIN], mMid[N_WIN], msw, g;\n  float zmFac, az, el, asp, sr, parmS, flPit, flDir, flRol, vuMode;\n  int vuId, vuIdS, regId, wgSel;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy / canvas - 1.;\n  uv.x *= iResolution.x / iResolution.y;\n  tCur = iTime;\n  asp = canvas.x / canvas.y;\n  stDat = Loadv4 (0);\n  mPtr = vec4 (stDat.xyz, 0.);\n  wgSel = int (stDat.w);\n  stDat = Loadv4 (1);\n  flPit = stDat.x;\n  flDir = stDat.y;\n  flRol = stDat.z;\n  parmS = stDat.w;\n  stDat = Loadv4 (2);\n  flPos = stDat.xyz;\n  stDat = Loadv4 (4);\n  vuPos = stDat.xyz;\n  vuMode = stDat.w;\n  stDat = Loadv4 (5);\n  vuFarPos = stDat.xyz;\n  hgSizeB = stDat.w;\n  flRol += 0.05 * smoothstep (0., 0.1, parmS) * pi * (Fbm1 (0.3 * tCur) - 0.5);\n  flMat = FlMat (flPit, flDir, flRol);\n  mSize = 0.2 * vec2 (asp, 1.);\n  mMid[0] = (1. - mSize.y) * vec2 (asp, 1.);\n  mMid[1] = (1. - mSize.y) * vec2 (- asp, 1.);\n  mMid[2] = (1. - mSize.y) * vec2 (- asp, -1.);\n  for (int k = 0; k < N_WIN; k ++) ut[k] = abs (uv - mMid[k]) - mSize;\n  regId = -1;\n  if (mPtr.z > 0.) {\n    regId = 0;\n    for (int k = 0; k < N_WIN; k ++) {\n      msw = 2. * mPtr.xy - mMid[k] / vec2 (asp, 1.);\n      if (Maxv2 (abs (msw)) < mSize.y) {\n        regId = k + 1;\n        msw /= 2. * mSize.y;\n        break;\n      }\n    }\n    if (regId == 0) msw = mPtr.xy;\n  }\n  vuId = 0;\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0.) {\n      uv = (uv - mMid[k]) / mSize.y;\n      vuId = k + 1;\n      break;\n    }\n  }\n  vuIdS = vuId;\n  vuId = int (mod (float (vuId) + vuMode, 4.));\n  az = 0.;\n  el = 0.;\n  if (mPtr.z > 0. && wgSel < 0 && vuIdS == regId) {\n    az = 2. * pi * msw.x;\n    el = 0.5 * pi * msw.y;\n  }\n  hgSizeS = 1.;\n  dstFar = 300.;\n  flHide = false;\n  if (vuId == 0) {\n    ro = flPos;\n    az = - flDir;\n    el = 0.;\n    zmFac = 2.5;\n    flHide = true;\n  } else if (vuId == 1) {\n    ro = vuPos;\n    vd = normalize (flPos - ro);\n    az += atan (vd.z, - vd.x) - 0.5 * pi;\n    el += asin (vd.y);\n    zmFac = 6.;\n  } else if (vuId == 2) {\n    ro = vuFarPos;\n    vd = normalize (flPos - ro);\n    az = atan (vd.z, - vd.x) - 0.5 * pi;\n    el = asin (vd.y);\n    zmFac = 50.;\n  } else if (vuId == 3) {\n    ro = flPos;\n    ro.y += 4.;\n    az = - flDir;\n    el = -0.5 * pi;\n    zmFac = 1.5;\n  }\n  vuMat = StdVuMat (el, az);\n  sunDir = normalize (vec3 (-0.5, 2., -1.));\n  sunDir.xz = Rot2D (sunDir.xz, 0.2 * pi * sin (0.01 * pi * tCur));\n#if ! AA\n  const float naa = 1.;\n#else\n  const float naa = 3.;\n#endif\n  col = vec3 (0.);\n  sr = 2. * mod (dot (mod (floor (0.5 * (uv + 1.) * canvas), 2.), vec2 (1.)), 2.) - 1.;\n  for (float a = float (VAR_ZERO); a < naa; a ++) {\n    rd = normalize (vec3 (uv + step (1.5, naa) * Rot2D (vec2 (0.5 / canvas.y, 0.),\n       sr * (0.667 * a + 0.5) * pi), zmFac));\n    if (vuId == 0 && parmS > 0.) rd.xy = Rot2D (rd.xy, flRol);\n    rd = vuMat * rd;\n    col += (1. / naa) * ShowScene (ro, rd);\n  }\n  for (int k = 0; k < N_WIN; k ++) {\n    if (Maxv2 (ut[k]) < 0. && Minv2 (abs (ut[k])) * canvas.y < 4.)\n       col = vec3 (0.8, 0.4, 0.);\n  }\n  if (vuIdS == 0) {\n    if (vuId == 0) {\n      col = mix (vec3 (1., 1., 0.5), col, 0.8 + 0.2 * smoothstep (0.002, 0.005,\n         PrBoxAn2Df (Rot2D (uv, flRol), vec2 (0.6, 0.3), 0.001)));\n      col = mix (vec3 (0.5, 1., 1.), col, 0.8 + 0.2 * smoothstep (0.002, 0.005,\n         PrBoxAn2Df (uv, vec2 (0.3, 0.15), 0.001)));\n    }\n    if (vuId == 1 && mPtr.z > 0. && wgSel < 0 && Maxv2 (abs (uv)) < 0.03 &&\n       Minv2 (abs (uv)) < 0.003) col = vec3 (0.8, 0.8, 0.1);\n    col = ShowWg (uv, canvas, col, parmS);\n    uv -= vec2 (0., -0.97) * vec2 (asp, 1.);\n    if (Maxv2 (abs (uv) - vec2 (0.22, 0.05)) < 0.) {\n      uv -= vec2 (0.06, -0.02);\n      us = vec2 (0.1, 0.06) * vec2 (asp, 1.);\n      g = floor (flPos.xz);\n      col = mix (mix (col, vec3 (0., 0., 1.), 0.2), vec3 (0., 1., 1.),\n         ShowInt (uv + vec2 (0.1, 0.), us, 5., g.x) + ShowInt (uv - vec2 (0.1, 0.), us, 5., g.y));\n    }\n  }\n  fragColor = vec4 (col, 1.);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrBoxAn2Df (vec2 p, vec2 b, float w)\n{\n  p = abs (p) - b;\n  return max (min (max (abs (p.x), w), max (abs (p.y), w)), max (max (p.x, p.y), w)) - w;\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRoundCylDf (vec3 p, float r, float rt, float h)\n{\n  return length (max (vec2 (length (p.xy) - r, abs (p.z) - h), 0.)) - rt;\n}\n\nfloat PrConCapsDf (vec3 p, vec2 cs, float r, float h)\n{\n  float d;\n  d = max (dot (vec2 (length (p.xy) - r, p.z), cs), abs (p.z) - h);\n  h /= cs.x * cs.x;\n  r /= cs.x;\n  d = min (d, min (length (vec3 (p.xy, p.z + r * cs.y - h)) - r + h * cs.y,\n     length (vec3 (p.xy, p.z + r * cs.y + h)) - r - h * cs.y));\n  return d;\n}\n\nfloat PrTorusBxDf (vec3 p, vec3 b, float ri)\n{\n  return length (vec2 (length (max (abs (p.xy) - b.xy, 0.)) - b.z, p.z)) - ri;\n}\n\nfloat Ssign (float x)\n{\n  return (x != 0.) ? sign (x) : 1.;\n}\n\nfloat Minv2 (vec2 p)\n{\n  return min (p.x, p.y);\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nfloat Minv3 (vec3 p)\n{\n  return min (p.x, min (p.y, p.z));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) / r, 0., 1.);\n  return mix (b - h * r, a, h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nmat3 FlMat (float pit, float yaw, float rol)\n{\n  vec3 ori, ca, sa;\n  ori = vec3 (pit, yaw, rol);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n         mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n         mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y , 0., ca.y);\n}\n\nmat3 StdVuMat (float el, float az)\n{\n  vec2 ori, ca, sa;\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  return mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n         mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n}\n\nvec2 PixToHex (vec2 p)\n{\n  vec3 c, r, dr;\n  c.xz = vec2 ((1./sqrt3) * p.x - (1./3.) * p.y, (2./3.) * p.y);\n  c.y = - c.x - c.z;\n  r = floor (c + 0.5);\n  dr = abs (r - c);\n  r -= step (dr.yzx, dr) * step (dr.zxy, dr) * dot (r, vec3 (1.));\n  return r.xz;\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\nfloat HexEdgeDist (vec2 p)\n{\n  p = abs (p);\n  return (sqrt3/2.) - p.x + 0.5 * min (p.x - sqrt3 * p.y, 0.);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  return c.z * mix (vec3 (1.), clamp (abs (fract (c.xxx + vec3 (1., 2./3., 1./3.)) * 6. - 3.) - 1., 0., 1.), c.y);\n}\n\nfloat DigSeg (vec2 q)\n{\n  q = 1. - smoothstep (vec2 (0.), vec2 (0.04, 0.07), abs (q) - vec2 (0.13, 0.5));\n  return q.x * q.y;\n}\n\n#define DSG(q) k = kk;  kk = k / 2;  if (kk * 2 != k) d += DigSeg (q)\n\nfloat ShowDig (vec2 q, int iv)\n{\n  vec2 vp, vm, vo;\n  float d;\n  int k, kk;\n  vp = vec2 (0.5, 0.5);\n  vm = vec2 (-0.5, 0.5);\n  vo = vp - vm;\n  if (iv == -1) k = 8;\n  else if (iv < 2) k = (iv == 0) ? 119 : 36;\n  else if (iv < 4) k = (iv == 2) ? 93 : 109;\n  else if (iv < 6) k = (iv == 4) ? 46 : 107;\n  else if (iv < 8) k = (iv == 6) ? 122 : 37;\n  else             k = (iv == 8) ? 127 : 47;\n  q = (q - 0.5) * vec2 (1.8, 2.3);\n  d = 0.;\n  kk = k;\n  DSG (q.yx - vo);  DSG (q.xy - vp);  DSG (q.xy - vm);  DSG (q.yx);\n  DSG (q.xy + vm);  DSG (q.xy + vp);  DSG (q.yx + vo);\n  return d;\n}\n\nfloat ShowInt (vec2 q, vec2 cBox, float mxChar, float val)\n{\n  float nDig, idChar, s, sgn, v;\n  q = vec2 (- q.x, q.y) / cBox;\n  s = 0.;\n  if (Minv2 (q) >= 0. && Maxv2 (q) < 1.) {\n    q.x *= mxChar;\n    sgn = sign (val);\n    val = abs (val);\n    nDig = (val > 0.) ? floor (max (log2 (val) / log2 (10.), 0.) + 0.001) + 1. : 1.;\n    idChar = mxChar - 1. - floor (q.x);\n    q.x = fract (q.x);\n    v = val / pow (10., mxChar - idChar - 1.);\n    if (idChar == mxChar - nDig - 1. && sgn < 0.) s = ShowDig (q, -1);\n    if (idChar >= mxChar - nDig) s = ShowDig (q, int (mod (floor (v), 10.)));\n  }\n  return s;\n}\n\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (mod (dot (p, vec2 (37., 39.)), 2. * pi)) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + vec2 (0., 1.)) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  vec2 cHashVA2 = vec2 (37., 39.);\n  return fract (sin (mod (dot (p, cHashVA2) + vec2 (0., cHashVA2.x), 2. * pi)) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  vec3 cHashVA3 = vec3 (37., 39., 41.);\n  return fract (sin (mod (dot (p, cHashVA3) + vec4 (0., cHashVA3.xy, cHashVA3.x + cHashVA3.y),\n     2. * pi)) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 t, ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = mix (Hashv2v2 (ip), Hashv2v2 (ip + vec2 (0., 1.)), fp.y);\n  return mix (t.x, t.y, fp.x);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp *= fp * (3. - 2. * fp);\n  t = mix (Hashv4v3 (ip), Hashv4v3 (ip + vec3 (0., 0., 1.)), fp.z);\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    f += a * Noisefv3 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f * (1. / 1.9375);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec4 v;\n  vec3 g;\n  vec2 e = vec2 (0.1, 0.);\n  for (int j = VAR_ZERO; j < 4; j ++)\n     v[j] = Fbmn (p + ((j < 2) ? ((j == 0) ? e.xyy : e.yxy) : ((j == 2) ? e.yyx : e.yyy)), n);\n  g = v.xyz - v.w;\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// \"Hexcopter Flying\" by dr2 - 2023\n// License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0\n\nfloat Ssign (float x);\nfloat Maxv2 (vec2 p);\nvec2 Rot2D (vec2 q, float a);\nvec2 Rot2Cs (vec2 q, vec2 cs);\nvec2 HexToPix (vec2 h);\nvec4 Loadv4 (int idVar);\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord);\n\n#define VAR_ZERO min (nFrame, 0)\n#define PLEN 17\n\nvec4 cPath[PLEN];\nfloat hgSizeB, tEnd[PLEN + 1], tLen;\n\nconst float txRow = 32.;\nconst float pi = 3.1415927, sqrt3 = 1.7320508;\n\nvoid SetPath ()\n{\n  float ts, tl;\n  ts = 1.;\n  tl = 1.5;\n  cPath[ 0] = vec4 (0., 0., -1./6., tl);\n  cPath[ 1] = vec4 (1., 0., 1./3., - ts);\n  cPath[ 2] = vec4 (0., 1., 5./6., tl);\n  cPath[ 3] = vec4 (-1., 1., -1./3., ts);\n  cPath[ 4] = vec4 (-1., 2., 1., ts);\n  cPath[ 5] = vec4 (0., 1., - 1./6., tl);\n  cPath[ 6] = vec4 (1., 1., 1./6., tl);\n  cPath[ 7] = vec4 (1., 2., 1., ts);\n  cPath[ 8] = vec4 (2., 1., 1./2., - tl);\n  cPath[ 9] = vec4 (2., 0., -1./2., tl);\n  cPath[10] = vec4 (3., -1., -1./6., tl);\n  cPath[11] = vec4 (4., -1., 1./3., - ts);\n  cPath[12] = vec4 (3., 0., -1./2., - tl);\n  cPath[13] = vec4 (3., 1., 1./2., tl);\n  cPath[14] = vec4 (2., 2., 5./6., tl);\n  cPath[15] = vec4 (1., 2., -1./3., ts);\n  cPath[16] = vec4 (1., 3., 1., ts);\n  tEnd[0] = 0.;\n  for (int k = 0; k < PLEN; k ++) tEnd[k + 1] = tEnd[k] + abs (cPath[k].w);\n  tLen = tEnd[PLEN];\n}\n\nvec2 EvalPPos (float t)\n{\n  vec4 cp;\n  vec2 tp, vd;\n  float tt, r, a, dc;\n  t /= 3.;\n  tp = floor (t / tLen) * vec2 (2.);\n  t = mod (t, tLen);\n  for (int k = 0; k < PLEN; k ++) {\n    if (t >= tEnd[k] && t < tEnd[k + 1]) {\n      cp = cPath[k];\n      tt = 2. * (t - tEnd[k]) / (tEnd[k + 1] - tEnd[k]) - 1.;\n      break;\n    }\n  }\n  tp += cp.xy;\n  if (abs (cp.w) == 1.5) {\n    r = 1.5;\n    dc = sqrt3;\n    a = pi / 6.;\n    tt *= Ssign (cp.w);\n  } else {\n    r = 0.5;\n    dc = 1.;\n    a = - Ssign (cp.w) * pi / 3.;\n  }\n  vd = vec2 (-1., 1.) * sin (pi * cp.z + vec2 (0., 0.5 * pi));\n  return (HexToPix (tp) + dc * vd - r * Rot2Cs (vd, sin (tt * a + vec2 (0.5 * pi, 0.)))) * hgSizeB;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat, tgPos, wgBx[2];\n  vec3 flPos, flVel, vuPos, vuFarPos, fp[3], va;\n  vec2 canvas, iFrag, ust;\n  float tCur, tCurP, flPit, flDir, flRol, dt, asp, s, spd, tsAccum, parmS, vuMode;\n  int nFrame, pxId, wgSel, wgReg;\n  nFrame = iFrame;\n  canvas = iResolution.xy;\n  tCur = iTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy / iResolution.xy - 0.5;\n  iFrag = floor (fragCoord);\n  pxId = int (iFrag.x + txRow * iFrag.y);\n  if (pxId >= 6) discard;\n  asp = canvas.x / canvas.y;\n  wgReg = -2;\n  if (nFrame <= 1) {\n    mPtrP = mPtr;\n    wgSel = -1;\n    flPit = 0.;\n    flDir = 0.;\n    flRol = 0.;\n    parmS = 0.2;\n    flPos = vec3 (0., 1., 0.);\n    tsAccum = 0.;\n    flVel = vec3 (0.);\n    vuMode = 0.;\n    hgSizeB = 16.;\n  } else {\n    stDat = Loadv4 (0);\n    mPtrP = vec4 (stDat.xyz, 0.);\n    wgSel = int (stDat.w);\n    stDat = Loadv4 (1);\n    flPit = stDat.x;\n    flDir = stDat.y;\n    flRol = stDat.z;\n    parmS = stDat.w;\n    stDat = Loadv4 (2);\n    flPos = stDat.xyz;\n    tsAccum = stDat.w;\n    stDat = Loadv4 (3);\n    flVel = stDat.xyz;\n    tCurP = stDat.w;\n    stDat = Loadv4 (4);\n    vuPos = stDat.xyz;\n    vuMode = stDat.w;\n    stDat = Loadv4 (5);\n    vuFarPos = stDat.xyz;\n    hgSizeB = stDat.w;\n  }\n  if (mPtr.z > 0.) {\n    wgBx[0] = vec4 (0.45 * asp, -0.15, 0.012 * asp, 0.2);\n    wgBx[1] = vec4 (0.45 * asp, -0.45, 0.02, 0.);\n    ust = mPtr.xy * vec2 (asp, 1.);\n    if (Maxv2 (abs (ust - wgBx[0].xy) - wgBx[0].zw) < 0.) wgReg = 0;\n    if (length (ust - wgBx[1].xy) < wgBx[1].z) wgReg = 1;\n    if (mPtrP.z <= 0.) wgSel = wgReg;\n  } else {\n    wgSel = -1;\n    wgReg = -2;\n  }\n  if (wgSel == 0) {\n    parmS = clamp (0.5 + 0.5 * (mPtr.y - wgBx[0].y) / wgBx[0].w, 0., 1.);\n  } else if (wgSel == 1) {\n    if (mPtrP.z <= 0.) vuMode = mod (++ vuMode, 4.);\n  }\n  SetPath ();\n  spd = 3. * parmS;\n  tsAccum += (tCur - tCurP) * spd;\n  dt = max (0.3 * spd, 0.01);\n  fp[0] = vec3 (EvalPPos (tsAccum), 0.).xzy;\n  fp[1] = vec3 (EvalPPos (tsAccum + dt), 0.).xzy;\n  fp[2] = vec3 (EvalPPos (tsAccum - dt), 0.).xzy;\n  flPos.xz = fp[0].xz;\n  flPos.y = 0.8;\n  flVel = (fp[1] - fp[2]) / dt;\n  flPit = 0.1 * spd;\n  flDir = atan (flVel.z, flVel.x) - 0.5 * pi;\n  va = cross ((fp[1] - 2. * fp[0] + fp[2]) / (dt * dt), normalize (flVel));\n  flRol = 0.1 * length (va) * Ssign (va.y);\n  flRol = smoothstep (0.01, 0.03, abs (flRol)) * flRol * min (1., 0.5 * spd);\n  vuPos.xz = EvalPPos (tsAccum - 3.);\n  vuPos.y = 2.;\n  vuFarPos = vec3 (0., 20., (-1.5 * sqrt3 + (2. / tLen) * tsAccum) * hgSizeB);\n  vuFarPos.xz = Rot2D (vuFarPos.xz, - pi / 3.);\n  vuFarPos.x -= 1.5 * hgSizeB;\n  if      (pxId == 0) stDat = vec4 (mPtr.xyz, float (wgSel));\n  else if (pxId == 1) stDat = vec4 (flPit, flDir, flRol, parmS);\n  else if (pxId == 2) stDat = vec4 (flPos, tsAccum);\n  else if (pxId == 3) stDat = vec4 (flVel, tCur);\n  else if (pxId == 4) stDat = vec4 (vuPos, vuMode);\n  else if (pxId == 5) stDat = vec4 (vuFarPos, hgSizeB);\n  Savev4 (pxId, stDat, fragColor, fragCoord);\n}\n\nfloat Ssign (float x)\n{\n  return (x != 0.) ? sign (x) : 1.;\n}\n\nfloat Maxv2 (vec2 p)\n{\n  return max (p.x, p.y);\n}\n\nvec2 Rot2Cs (vec2 q, vec2 cs)\n{\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  vec2 cs;\n  cs = sin (a + vec2 (0.5 * pi, 0.));\n  return vec2 (dot (q, vec2 (cs.x, - cs.y)), dot (q.yx, cs));\n}\n\nvec2 HexToPix (vec2 h)\n{\n  return vec2 (sqrt3 * (h.x + 0.5 * h.y), (3./2.) * h.y);\n}\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 Loadv4 (int idVar)\n{\n  float fi;\n  fi = float (idVar);\n  return texture (txBuf, (vec2 (mod (fi, txRow), floor (fi / txRow)) + 0.5) / txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  vec2 d;\n  float fi;\n  fi = float (idVar);\n  d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi / txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n","name":"Buffer A","description":"","type":"buffer"}]}