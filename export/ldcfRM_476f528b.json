{"ver":"0.1","info":{"id":"ldcfRM","date":"1524444790","viewed":278,"name":"#00 Basic 2D","username":"FishMan","description":"basic","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["basic2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// create by JiepengTan 2018-04  email: jiepengtan@gmail.com\n#define DrawInGrid(uv,DRAW_FUNC)\\\n\t{\\\n\t\tvec2 pFloor = floor(uv);\\\n\t\tif(length(pFloor-vec2(mod(num,GRID_SIZE),floor(num / GRID_SIZE)))<0.1){\\\n\t\t\tcol = DRAW_FUNC(fract(uv)-0.5);\\\n\t\t}\\\n\t\tnum = num + 1.000;\\\n\t}\\\n        \n#define ftime iTime\n#define PI 3.14159\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n//----------------------------------------------------------------------------------------\n///  3 out, 2 in...\nvec3 Hash32(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yxz+19.19);\n    return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\n\n//https://www.shadertoy.com/view/4djSRW  \n///  2 out, 2 in...\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\n//https://www.shadertoy.com/view/XdXGW8\nfloat PNoise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( Hash22( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( Hash22( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( Hash22( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( Hash22( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat FBM( vec2 p )\n{\n    float f = 0.0;\n    f += 0.50000*PNoise( p*1.0  ); \n    f += 0.25000*PNoise( p*2.03  ); \n    f += 0.12500*PNoise( p*4.01  ); \n    f += 0.06250*PNoise( p*8.05  ); \n    f += 0.03125*PNoise( p*16.02 );\n    return f/0.984375;\n}\n\nvec3 DrawSmoothstep(vec2 uv){\n\tuv+=0.5;\n\tfloat val = smoothstep(0.0,1.0,uv.x);\n\tval = step(abs(val-uv.y),0.01); \n\treturn vec3(val,val,val);\n}\nvec3 DrawCircle(vec2 uv){\n\tfloat val = clamp((1.0-length(uv)*2.),0.,1.);\n\treturn vec3(val,val,val);\n}\nvec3 DrawFlower(vec2 uv){\n\tfloat deg = atan(uv.y,uv.x) + iTime * -0.1;\n\tfloat len = length(uv)*3.0;\n\tfloat offs = abs(sin(deg*3.))*0.35;\n    float val = smoothstep(1.+offs,1.+offs-0.05,len);\n\treturn vec3(val);\n}\nvec3 DrawWeakCircle(vec2 uv){\n\tfloat val = clamp((1.0-length(uv)*2.),0.,1.);\n\tval = pow(val,2.0);\n\treturn vec3(val,val,val);\n}\nvec3 DrawStrongCircle(vec2 uv){\n\tfloat val = clamp((1.0-length(uv)*2.),0.,1.);\n\tval = pow(val,0.5);\n\treturn vec3(val,val,val);\n}\nvec3 DrawBounceBall(vec2 uv){\n\tuv*=4.;\n\tuv.y+=sin(ftime*PI);\n\tfloat val = clamp((1.0-length(uv)),0.,1.);\n\tval = smoothstep(0.,0.05,val);\n\treturn vec3(val,val,val);\n}\nvec3 DrawRandomColor(vec2 uv){\n\tuv+=0.5;\n\tuv*=4.;\n\treturn Hash32(floor(uv));\n}\nvec3 DrawNoise(vec2 uv){\n\tuv*=4.;\n\tfloat val =(PNoise(uv)+1.0)*0.5;\n\treturn vec3(val,val,val);\n}\nvec3 DrawFBM(vec2 uv){\n\tuv*=4.;\n\tfloat val = (FBM(uv)+1.0)*0.5;\n\treturn vec3(val,val,val);\n}\n\nvec3 DrawGridLine(vec2 uv){\n\tvec2 _uv = uv-floor(uv);\n\tfloat val = 0.;\n\tconst float eps = 0.01;\n\tif(_uv.x<eps||_uv.y<eps){\n\t\tval = 1.;\n\t}\n\treturn vec3(val,val,val);\n}\n\n#define GRID_SIZE 3.\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //uv.x *= iResolution.x / iResolution.y;\n\n    vec3 col = vec3(0.0,0.0,0.0);\n    float num = 0.;\n\tuv*=GRID_SIZE;\n\tDrawInGrid(uv,DrawSmoothstep);\n\tDrawInGrid(uv,DrawCircle);\n\tDrawInGrid(uv,DrawFlower);\n\tDrawInGrid(uv,DrawWeakCircle);\n\tDrawInGrid(uv,DrawStrongCircle);\n\tDrawInGrid(uv,DrawBounceBall);\n\tDrawInGrid(uv,DrawRandomColor);\n\tDrawInGrid(uv,DrawNoise);\n\tDrawInGrid(uv,DrawFBM);\n\n\tcol +=DrawGridLine(uv);\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}