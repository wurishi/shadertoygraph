{"ver":"0.1","info":{"id":"ltG3Rt","date":"1476121185","viewed":179,"name":"Playground: Barycentric Coords","username":"starea","description":"Barycentric Playground\nforked from: nuclear's https://www.shadertoy.com/view/lsl3Wn ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["barycentric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 Barycentric(in vec3 v0, in vec3 v1, in vec3 v2, in vec3 p, in vec3 normal) {\n\tfloat area = dot(cross(v1 - v0, v2 - v0), normal);\n\tif (abs(area) < 0.0001) return vec3(0.0, 0.0, 0.0);\n\t\n\tvec3 pv0 = v0 - p;\n\tvec3 pv1 = v1 - p;\n\tvec3 pv2 = v2 - p;\n\t\n\tvec3 asub = vec3(dot(cross(pv1, pv2), normal),\n\t\t\t\t\t dot(cross(pv2, pv0), normal),\n\t\t\t\t\t dot(cross(pv0, pv1), normal));\n\treturn abs(asub) / vec3(abs(area)).xxx;\n}\n\nvec3 OtherInterpolation(in vec3 v0, in vec3 v1, in vec3 v2, in vec3 p) {\n    return vec3(1.0/length(v0-p), 1.0/length(v1-p), 1.0/length(v2-p))/sqrt(4.0); \n}\n\nvoid drawGrid(vec2 coord, inout vec3 col) {\n    const vec3 COLOR_AXES = vec3(0.698, 0.8745, 0.541);\n    const vec3 COLOR_GRID = vec3(1.0, 1.0, 0.702);\n    const float tickWidth = 0.1;\n    \n    for (float i = -2.0; i < 2.0; i += tickWidth) {\n\t\tif (abs(coord.x - i) < 0.004) col = COLOR_GRID;\n\t\tif (abs(coord.y - i) < 0.004) col = COLOR_GRID;\n\t}\n\tif( abs(coord.x) < 0.006 ) col = COLOR_AXES;\n\tif( abs(coord.y) < 0.007 ) col = COLOR_AXES;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 aspect = vec2(iResolution.x / iResolution.y, 1.0);\n\tvec2 uv = (2.0 * fragCoord.xy / iResolution.xy - 1.0) * aspect;\n    \n\tvec3 v0 = vec3(0.0, 1.0, 0.0) * aspect.xyy;\n\tvec3 v1 = vec3(1.0, -1.0, 0.0) * aspect.xyy;\n\tvec3 v2 = vec3(-1.0, -1.0, 0.0) * aspect.xyy;\n\n\tconst vec3 normal = vec3(0.0, 0.0, 1.0);\n\tvec3 color = Barycentric(v0, v1, v2, vec3(uv, 0.0), normal);\n\n    \n\tif (color.x + color.y + color.z > 1.00001) \n    {\n\t\tcolor = vec3(0.0, 0.0, 0.0);\n    } else if (iMouse.w > 0.0)\n    {\n        color = OtherInterpolation(v0, v1, v2, vec3(uv, 0.0));\n    }\n    \n    vec3 grids = vec3(0.0);\n    drawGrid(uv, grids);\n    color = color + grids * 0.2; \n\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}