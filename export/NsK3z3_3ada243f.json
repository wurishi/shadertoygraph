{"ver":"0.1","info":{"id":"NsK3z3","date":"1631883308","viewed":162,"name":"Path Line Segment SDF","username":"TheTurk","description":"Distance function for a straight line segment that can be used as a building block to create complex shapes like [url]https://www.shadertoy.com/view/DdjyDW[/url]\nOther path distance functions:\n[url]https://www.shadertoy.com/playlist/scBBRD[/url]","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["distancefield","sdf","line","distance","polygon","segment","path","shape","side","primitive","odd","even"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* \nconstructs a straight line segment given two points. the sign of the distance\nfield is computed using the even-odd rule and determines whether a point lies \ninside (negative sign) or outside (positive sign) a given shape.\n*/\n\nfloat line(vec2 position, inout vec2 currentPoint, vec2 end) {\n    vec2 p = position - currentPoint;\n    vec2 e = end - currentPoint;\n    float h = clamp(dot(p, e) / dot(e, e), 0.0, 1.0);\n    float d = length(p - e * h);\n    float s = 1.0;\n    // even-odd rule\n    if ((p.y > 0.0) != (p.y > e.y)) {\n        if ((e.y * p.x < e.x * p.y) != (e.y < 0.0)) {\n            s = -s;\n        } \n    }\n    currentPoint = end;\n    return d * s;\n}\n\n// example\nfloat hexagon(vec2 position, float radius) {\n    vec2 start = vec2(0.0, radius);\n    float d = float(0xffffffffU);\n    float s = 1.0;\n    for (int i = 0; i < 6; i++) {\n        vec2 end = vec2(start.x * 0.5 - start.y * -sqrt(3.0) * 0.5, start.x * -sqrt(3.0) * 0.5 + start.y * 0.5);\n        float ds = line(position, start, end);\n        d = min(d, abs(ds));\n        s *= sign(ds);\n    }\n    return d * s;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n   \n    vec2 currentPoint = vec2(0.0, -0.5);\n    vec2 end = vec2(0.0, 0.5);\n    float d = line(position, currentPoint, end);\n\n    // d = hexagon(position, 0.5); // example \n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7); \n    color *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        vec2 currentPoint = vec2(0.0, -0.5);\n        float d = line(mousePosition, currentPoint, end);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n} ","name":"Image","description":"","type":"image"}]}