{"ver":"0.1","info":{"id":"4XGXRG","date":"1720073225","viewed":67,"name":"Matrix (Furthermore!)","username":"Reversion","description":"Made some changes to the former Matrix Effect, including symmetric transformation, light burst, scale & transform.\n ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["glitch","matrix","symmetric"],"hasliked":0,"parentid":"MXySDw","parentname":"Matrix Effect (HW3 for ARTS1308)"},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC BY-SA 3.0\n// Created by Reversion\n// This shader is for a course, Fragment Shading Art (ARTS1308) in ShanghaiTech University.\n// References: \n//     https://www.shadertoy.com/view/ldccW4 created by WillKirkby\n//     https://www.shadertoy.com/view/3djSDD created by Junglefish\n//     `The Book of Shaders` Chapter 15\n\n#define PI 3.1415926535\nfloat random (in vec2 st) {\n    return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat noise (in vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat sdCircle( in vec2 p, in float r){\n    return length(p) -r;\n}\n\nvec2 rotate ( in vec2 p, in float theta ){\n    vec2 pos;\n    pos.x = cos(theta) * p.x - sin(theta) * p.y;\n    pos.y = sin(theta) * p.x + cos(theta) * p.y;\n    return pos;\n}\n\nfloat text(vec2 fragCoord){\n    vec2 uv = mod(fragCoord.xy, 16.)*.0625;\n    vec2 block = fragCoord*.0625 - uv;\n    uv = (uv*.65 + floor(texture(iChannel1, block/iChannelResolution[1].xy + iTime*.005).xy * 16.))*-.9;\n    uv *= -.0625;\n    \n    return texture(iChannel0, uv).r;\n}\n\nvec3 rain(vec2 fragCoord){\n    fragCoord.y -= mod(fragCoord.y, 16.);\n    \n    float offset=sin(fragCoord.y*15.);\n    float speed=cos(fragCoord.y*3.)*.3+.4;\n   \n    float x = fract(fragCoord.x/iResolution.x + iTime*speed);\n    return vec3(.1,1.,.7) / x*.2;\n}\n\nvec3 RadarPing(in vec2 uv, in vec2 center, in float innerTail, \n               in float frontierBorder, in float timeResetSeconds, \n               in float radarPingSpeed, in float fadeDistance){\n    vec2 diff = center-uv;\n    float r = length(diff);\n    float time = mod(iTime, timeResetSeconds) * radarPingSpeed;\n   \n    float circle;\n    // r is the distance to the center.\n    // circle = BipCenter---//---innerTail---time---frontierBorder\n    //illustration\n    //https://sketch.io/render/sk-14b54f90080084bad1602f81cadd4d07.jpeg\n    circle += smoothstep(time - innerTail, time, r) * smoothstep(time + frontierBorder,time, r);\n\tcircle *= smoothstep(fadeDistance, 0.0, r); // fade to 0 after fadeDistance\n        \n    return vec3(circle);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    fragCoord = rotate(fragCoord, PI/20.*iTime);\n    fragCoord = (fragCoord - .5*iResolution.xy)/iResolution.y;\n    fragCoord = abs(fragCoord);\n    fragCoord = fragCoord.x < fragCoord.y?fragCoord:fragCoord.yx;\n    \n    float offset = 0.2;\n\n    float angle = noise( fragCoord + iTime * 0.0001 )*PI;\n    float radius = offset;\n    \n    float fadeDistance = 20.0;\n    float resetTimeSec = 3.0;\n    float radarPingSpeed = 1.2;\n    vec2 greenPing = vec2(0.0, 0.0);\n    vec3 radarCol = RadarPing(fragCoord, greenPing, 0.25, 0.025, resetTimeSec, \n                            radarPingSpeed, fadeDistance) * vec3(26./255.,230./256.,100./255.);\n    fragCoord += radius * vec2(cos(angle),sin(angle));\n    vec2 fragCoord2 = fragCoord * iResolution.y + .5*iResolution.xy;\n    \n    vec4 base = vec4(text(fragCoord2)*rain(fragCoord2),1.0);\n    vec4 base1 = vec4(text(fragCoord2 + 200.)*rain(fragCoord2 + 200.),1.0);\n    fragColor = mix(base, base1, 0.5);\n    fragColor += vec4(radarCol, 1.);\n    //fragColor = base;\n \n}","name":"Image","description":"","type":"image"}]}