{"ver":"0.1","info":{"id":"lldfzj","date":"1540338144","viewed":115,"name":"wobblyyyyyyy","username":"eiglow_","description":"click and drag up and down","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["wave"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    vec3 col =\n        texture(iChannel0, uv).rgb +\n        texture(iChannel0, vec2(1.-uv.x,uv.y)).rgb +\n        texture(iChannel0, vec2(uv.x/2.,0.15+uv.y/1.5)).rgb / 2. +\n        texture(iChannel0, vec2(.5-uv.x/2.,0.15+uv.y/1.5)).rgb / 2.;\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// stolen from https://www.shadertoy.com/view/XdXGW8\n// thx iq for the cool functions\n\n#define TIME (iTime/3.0)\n#define DIFFERENCE (clamp(iMouse.y/iResolution.y, 0.0, 1.0))\n\n#define TILT (sin(TIME*3.)/3.)\n\nvec2 hash( vec2 x )  // replace this by something better\n{\n    const vec2 k = vec2( 0.3183099, 0.3678794 );\n    x = x*k + k.yx;\n    return -1.0 + 2.0*fract( 16.0 * k*fract( x.x*x.y*(x.x+x.y)) );\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( hash( i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ), \n                     dot( hash( i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( hash( i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ), \n                     dot( hash( i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\n\n// -----------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\tvec2 uv = p*vec2(iResolution.x/iResolution.y,1.0);\n    vec2 pixelSize = 1.0/iResolution.xy;\n\t\n\t\tvec2 seed = vec2(uv.x*8.0 + 2.*TIME, TIME);\n\t\tfloat f  = 0.5*noise( seed );\n    \tfloat f2 = 0.5*noise( vec2(seed.x, seed.y+DIFFERENCE) );\n\n\tf = 0.5 + 0.5*f;\n    f2 = 0.5+0.5*f2;\n    f += TILT-uv.x*TILT;\n    f2 += TILT-uv.x*TILT;\n\tfloat w = smoothstep(uv.y-2.*pixelSize.y, uv.y, f) - smoothstep(uv.y, uv.y+2.*pixelSize.y, f2);\n    w += ((DIFFERENCE) * (f+f2)) - DIFFERENCE;\n    w = clamp(w, 0.0, 1.0);\n\t\n\tfragColor = vec4( w*.5, sqrt(w*.6), .1-pow(w,2.), 1.0 );\n}","name":"Buffer A","description":"","type":"buffer"}]}