{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"//lots of sine\n//~ felixisdev\n\n//PI Constant\nconst float pi = 3.14159265359;\n\n//Get the sine wave in the range of 0.0 - 1.0 instead of -1.0 - 1.0\nfloat sine(float v)\n{\n\treturn (sin(v) + 1.0) / 2.0;\n}\n\n//Get the current color at v (0.0 - 1.0)\n//Change this for a different palette, final function to determine color\nvec4 getMap(float v)\n{\n    return vec4(sine(v * 5.0 + (2.123 + sin(iTime * 0.2) * 1.0)), \n                sine(v * 5.0 + (2.546 + sin(iTime * 0.21) * 1.0)), \n                sine(v * 5.0 + (2.742 + sin(iTime * 0.22) * 1.0)), 1.0);\n}\n\n//sine variables (factors)\nfloat sines[8];\n\n//x and y variables for the equation\nfloat xp;\nfloat yp;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    //get x and y vars for equation\n    xp = fragCoord.x - iResolution.x / 2.0;\n    yp = fragCoord.y - iResolution.y / 2.0;\n    \n    xp /= 4.0;\n    yp /= 4.0;\n    \n    //set equation factors based on time\n    for (int ss = 0; ss < 8; ss++)\n    {\n        sines[ss] = (ss < 4 ? 1.0 : 0.25) + sine((iTime * float(ss) / 4.0) / 4.0 + float(ss) * 6.43326) * (ss < 4 ? 30.0 : 1.5);\n    }\n    \n    //fragColor = get map (equation)\n\tfragColor = getMap(\n  \t  sine((xp / sines[0]) + sin((yp / sines[1]) + sin((xp / sines[2]) + sin((yp / sines[3]) * sines[4]) * sines[5]) * sines[6]) * sines[7])\n    );\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"Xtl3Wf","date":"1425763704","viewed":144,"name":"mappedsinewaves","username":"felixisdev","description":"Just messing around","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sine"],"hasliked":0,"parentid":"","parentname":""}}