{"ver":"0.1","info":{"id":"clSyDt","date":"1692468254","viewed":213,"name":"Raymarched Aurora","username":"gunthern","description":"Raymarched volume in my interpretation of aurora borealis","likes":17,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","aurora","northernlights","borealis"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv += 1.0;\n    uv *= 0.5;\n    \n    fragColor = texture(iChannel0, uv, 0.0);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define MAX_STEPS 250\n#define VOL_STEPS 260\n#define VOL_LENGTH 175.0\n#define VOL_DENSITY 0.02\n\nfloat hash(float n) \n{ \n    return fract(sin(n)*43758.5453); \n}\n\nfloat noise(in vec3 x) \n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nvec4 GetVolume(vec3 p) {\n\n    p.x += (noise(p*0.02 + sin(iTime*0.01))-0.5)*50.0*cos(noise(vec3(iTime*0.2)));\n    \n    vec3 c = vec3(40.0, 0.0, 0.0);\n    vec3 q = mod(p + 2.5*c, c) - 0.5*c;\n    \n    float d = 1.0 - sdBox(\n        (q - vec3(sin(q.z * 0.1 + iTime)*10.0 + noise(q*0.1)*10.0, sin(q.z * 0.2)*2.0, 200.0)), // position\n        vec3(1.0 - max(p.y*0.25, 0.5) + noise(vec3(q.x*0.2))*3.0, 10.0 * clamp((1.8 - p.z*0.01), 0.0, 1.2) + noise(p.zzz*0.1)*4.0, 200.0) // size\n    );\n    \n    // Color\n    vec3 col = mix(vec3(0.0, 1.0, 0.0), vec3(0.6 + (sin(iTime*0.08)*0.3), 0.8, 0.6), (p.y + 10.0) * 0.03);\n    \n    return vec4(col, d);\n\n}\n\nvec4 RayMarch(vec3 ro, vec3 rd) {\n\n    float stepLength = VOL_LENGTH / float(VOL_STEPS);\n    \n    float volumeDensity = VOL_DENSITY;\n\n    float density = 0.0;\n    float transmittance = 1.0;\n    vec3 energy = vec3(0.0);\n    \n    vec3 p = ro + rd;\n    \n    for (int i=0; i<MAX_STEPS; i++){\n    \n        if (transmittance < 0.05) break;\n        \n        float dsample = GetVolume(p).w;\n    \n        if (dsample > 0.001){\n            \n            density = clamp(dsample * volumeDensity, 0.0, 1.0);\n            transmittance *= 1.0 - density;\n            \n            energy += density * transmittance;\n        \n        }\n        \n        p += rd * stepLength;\n    }\n    \n    vec3 col = GetVolume(p).rgb;\n    \n    return vec4(energy, transmittance) * mix(vec4(0.5, 1.0 * (cos(iTime*0.1)*0.5 + 1.0), 1.0 * (sin(iTime*0.2)*0.5 + 1.0), 1.0), vec4(col, 1.0), transmittance);\n    \n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    uv.x = uv.x*2.0 - 1.0;\n    uv.y = uv.y*2.0 - 0.5;\n    if (uv.x < -1.0 || uv.y < -0.5) discard;\n    \n    // Ray origin\n    vec3 ro = vec3(-20.0, -50.0, 0.0);\n    // Ray direction\n    vec3 rd = normalize(vec3(uv.x + 1.0, uv.y + 0.7, 1.0));\n    \n    vec4 col = RayMarch(ro, rd);\n    \n    // Sky color\n    vec3 top_col = vec3(0.02, 0.04, 0.053);\n    vec3 bot_col = vec3(0.1, 0.13, 0.25);\n    vec3 sky = col.rgb + mix(top_col, bot_col, -uv.y*0.5) * col.a;\n    \n    // Stars\n    float stars = clamp((0.013 - clamp(noise(vec3(uv.x, uv.y, 1.0) * 200.0f), 0.0, 0.013)) * 100.0, 0.0, 1.0);\n    \n    fragColor = vec4(sky + stars, 1.0);\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}