{"ver":"0.1","info":{"id":"lfjcWh","date":"1722271168","viewed":28,"name":"Exercício básico de GLSL Jonas","username":"jonasmarcosdiasrocha","description":"animacao envolvendo um campo de futebol e uma bola preta.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Animação envolvendo um campo de futebol com uma bola preta que se movimenta de maneira circular.\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Aqui Normalizei as coordenadas do pixel para um intervalo padrão.\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // Cores do campo e da bola\n    vec3 fieldColor = vec3(0.0, 0.8, 0.0); // Verde para o campo\n    vec3 ballColor = vec3(0.1, 0.1, 0.1);  // Preto para a bola\n    \n    // Desenhando o campo de futebol\n    vec3 color = fieldColor;\n    \n    // Calcula a posição da bola com base no tempo\n    float time = iTime * 0.5; // Aumenta a velocidade da bola\n    vec2 ballPos = vec2(0.5 + 0.4 * sin(time), 0.5 + 0.4 * cos(time)); // A posição da bola é calculada com base em funções seno e cosseno para criar um movimento circular ao longo do tempo. A velocidade da bola pode ser ajustada alterando o fator multiplicador em iTime.\n    \n    // Calculando a distância entre o pixel atual e a posição da bola\n    float dist = length(uv - ballPos);\n    \n    // Definindo o raio da bola\n    float ballRadius = 0.05;\n    \n    // Desenhando a bola\n    if (dist < ballRadius) {\n        color = ballColor;\n    }\n    \n    // Definindo a cor do pixel\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}