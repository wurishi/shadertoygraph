{"ver":"0.1","info":{"id":"Mc3czX","date":"1730944273","viewed":30,"name":"versor function plot","username":"pojojojo21","description":"RGB plot of versor function for julia set","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["versor","juliasets"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec2 scaled_uv = (uv * 100.f) - 50.f;\n\n    vec4 h = vec4(scaled_uv.x, scaled_uv.y, 0.f, 0.f);\n  \n    vec4 a1 = vec4(-16.f, 23.f, 0.f, -5.f);\n    vec4 a2 = vec4(0.f, 0.f, 0.f, 15.f);\n    vec4 a3 = vec4(-23.f, 0.f, 0.f, 40.f);\n    vec4 a4 = vec4(-1.f, 3.f, 0.f, 24.f);\n    vec4 a5 = vec4(17.f, 30.f, 0.f, 5.f);\n    vec4 a6 = vec4(-32.f, 0.f, 0.f, 10.f);\n    vec4 a7 = vec4(4.f, -5.f, 0.f, -2.f);\n    vec4 a8 = vec4(6.f, 9.f, 0.f, 8.f);\n    \n    vec4 result = function_h(h, a1, a2, a3, a4, a5 ,a6, a7, a8);\n\n    result = normalize(result);\n    \n    // Output to screen\n    fragColor = vec4(result.x, result.y, result.w, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 quat_multiply( vec4 a, vec4 b )\n{\n    float s1 = a.w;\n    float s2 = b.w;\n    vec3 v1 = vec3(a.x, a.y, a.z);\n    vec3 v2 = vec3(b.x, b.y, b.z);\n    float s = s1 * s2 - dot(v1, v2);\n    vec3 v = s1 * v2 + s2 * v1 + cross(v1, v2);\n    return vec4(v.x, v.y, v.z, s);\n}\n\nvec4 quat_multiply2( vec4 a, vec4 b )\n{\n    return vec4(\n        a.w * b.x + a.x * b.w + a.y * b.z - a.z * b.y,//x\n        a.w * b.y + a.y * b.w + a.z * b.x - a.x * b.z,//y\n        a.w * b.z + a.z * b.w + a.x * b.y - a.y * b.x,//z\n        a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z);//w\n}\n\nvec4 quat_Conjugate(vec4 q)\n{\n    return vec4(-q.x, -q.y, -q.z, q.w);\n}\n\nfloat quat_SqrLength(vec4 q)\n{\n    return q.w * q.w + q.x * q.x + q.y * q.y + q.z * q.z;\n}\n\nvec4 quat_Inverse(vec4 q)\n{\n    return quat_Conjugate(q) / quat_SqrLength(q);\n}\n\nvec4 quat_pow(vec4 q, float p)\n{\n    float partial = q.x * q.x + q.y * q.y + q.z * q.z;\n    float q_mag = sqrt(partial + q.w * q.w);\n    float v_mag = sqrt(partial);\n    float v_magInv = (v_mag > 0.0f) ? 1.0f / v_mag : 0.0f;\n    \n    float scale = p * acos(q.w / q_mag) * v_magInv;\n    \n    float mag = scale * v_mag;\n    float magInv = (mag > 0.0f) ? 1.0f / mag : 0.0f;\n    \n    float exps = exp(p * log(q_mag));\n    \n    float s_mag = sin(mag);\n    float c_mag = cos(mag);\n    \n    float scale2 = scale * exps * magInv * s_mag;\n    \n    return vec4(scale2 * q.x, scale2 * q.y, scale2 * q.z, exps * c_mag);\n}\n\nvec4 function_h(vec4 h, vec4 a1, vec4 a2, vec4 a3, vec4 a4, \n    vec4 a5, vec4 a6, vec4 a7, vec4 a8)\n{\n    vec4 scaled_root1 = quat_pow(h - a1, 1.0f);\n    vec4 scaled_root2 = quat_pow(h - a2, 7.5f);\n    vec4 scaled_root3 = quat_pow(h - a3, 1.7f);\n    vec4 scaled_root4 = quat_pow(h - a4, 2.3f);\n    vec4 scaled_root5 = quat_pow(h - a5, 4.5f);\n    vec4 scaled_root6 = quat_pow(h - a6, 1.7f);\n    vec4 scaled_root7 = quat_pow(h - a7, 2.5f);\n    vec4 scaled_root8 = quat_pow(h - a8, 1.3f);\n    \n    vec4 mul1 = quat_multiply(scaled_root1, scaled_root2);\n    vec4 mul2 = quat_multiply(scaled_root3, scaled_root4);\n    vec4 mul3 = quat_multiply(scaled_root5, scaled_root6);\n    vec4 mul4 = quat_multiply(scaled_root7, scaled_root8);\n    vec4 mul1_2 = quat_multiply(mul1, mul2);\n    vec4 mul3_4 = quat_multiply(mul1, mul2);\n    vec4 result = quat_multiply(mul1_2, mul3_4);\n    \n    return mul1_2;\n}","name":"Common","description":"","type":"common"}]}