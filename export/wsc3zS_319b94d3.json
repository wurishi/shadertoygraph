{"ver":"0.1","info":{"id":"wsc3zS","date":"1568761796","viewed":179,"name":"Overly Simple Square","username":"netbuz10101","description":"Shape","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["shape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float squareShape (in vec2 centerShape, in float size, in vec2 point)\n{\n    float mask = 0.0;\n    \n \tfloat u = point[0];\n\tfloat v = point[1];\n    \n    \n    float minX = centerShape[0] - (size / 2.0);\n    float maxX = centerShape[0] + (size / 2.0);\n    float minY = centerShape[1] - (size / 2.0);\n    float maxY = centerShape[1] + (size / 2.0);\n        \n    if ( u > minX && u < maxX && v > minY && v < maxY) mask = 1.0;\n    \n    return mask;\n    \n}\n\n\n\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv.xy -= .5; // put 0 at center rather than bottom left\n    uv.x *= iResolution.x/iResolution.y;  // make sure uv space is actually square\n    \n       \n    vec2 center = vec2(sin(iTime)/3., .0);\n    float size = .8;\n    \n    \n    \n    \n    \n   float mask = squareShape(center,size, uv);\n    \n    \n    \n    \n    \n    // convert inShape mask to color\n    vec3 col = vec3( mask);\n    \n    \n    \n    // Output to screen\n    fragColor = vec4(col,0);\n}","name":"Image","description":"","type":"image"}]}