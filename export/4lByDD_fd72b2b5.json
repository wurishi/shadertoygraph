{"ver":"0.1","info":{"id":"4lByDD","date":"1508759369","viewed":166,"name":"Simple image segmentation","username":"tale3d","description":"Implementation of OTSU algorithm to filter the noise and convert black and white image to two-colour segmentation. This was a part of \"Artificial Intelligence and Computer Vision\" unit. ","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["imageprocessing","teachingmaterial"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//what this hader does: it calculates the average intensity for image \n//and based on that classifies pixels as above this intensity and below it\n\n//the idea behind this shader is unsupervised image segmentation, we either have \"dark\" or \"bright\" pixels, no shades of grey\n\n//the shader calculates average intensity for the image for every pixel, which is not efficient, but in line with fragment shader idea\n\n#define SAMPLES 20\n#define SHADES 20\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv  = fragCoord.xy / iResolution.xy;\n    float height = 0.5+0.5*cos(iTime);  \n    \n    float disp = 1.0/float(SAMPLES);\n    \n    float histogram[SHADES];\n    for (int i = 0; i < SHADES; i++)\n        histogram[i]=0.;\n    \n    //step 1: sampling the whole image (in black and white) and find the distribution of intensities by using histogram\n    for (int x = 0; x < SAMPLES; x++){\n        for (int y = 0; y < SAMPLES; y++){\n            vec4 color = texture(iChannel0, uv);\n            float intensity = color.x*0.3+color.y*0.59+color.z*0.11;\n            histogram[int(intensity*float(SHADES))] += 1.0;\n        }\n    }\n    \n    //calculating weighted sum\n    //this sum represents the mean of data and represents the expected value of the histogram\n    float sum = 0.;\n    float threshold = 0.5;\n    for (int i = 0; i < SHADES; i++)\n        sum += float(i)*histogram[i];\n    float q1 = 0., q2, sumB = 0.;\n    float variance=0.0; \n    //here we calculate the threshold by looking into variance of the image \n    for (int i = 0; i < SHADES; i++)\n    {\n        q1 += histogram[i];\n        if (q1 == 0.0) continue;\n        q2 = float(SAMPLES*SAMPLES) - q1; \n        sumB += float(i)*histogram[i];\n        float m1 = sumB/q1;\n        float m2 = (sum-sumB)/q2;\n        float sigma = q1*q2*(m1-m2)*(m1-m2);\n        if (sigma > variance)\n        {\n            threshold = float(i)/float(SHADES);\n            variance = sigma;\n            \n        }\n    }\n\n    //visualise with black and white\n    vec4 color = texture(iChannel0, uv);\n    float intensity = color.x*0.3+color.y*0.59+color.z*0.11; \n    \n    if (intensity > threshold)\n        fragColor = vec4(1.,1.,1.,0.);\n    else\n        fragColor = vec4(0.,0.,0.,0.);\n\n    if (uv.y > height) fragColor = vec4(intensity);\n    \n\n    //moving line\n    if (abs(uv.y - height)<0.001) fragColor=vec4(0.);\n    color = texture(iChannel0, vec2(uv.x, height));\n \n\n}","name":"Image","description":"","type":"image"}]}