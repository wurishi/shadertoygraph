{"ver":"0.1","info":{"id":"NscSRf","date":"1633884030","viewed":96,"name":"BloBot","username":"Viko","description":"Meet BloBot ! A robot made with blobs ! ༼ つ ◕_◕ ༽つ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["blob","robot","id3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Common\n#define PI 3.1415926538\n\n// Hashing function\n// Returns a random number in [-1,1]\nfloat Hash(float seed)\n{\n  return fract(sin(seed)*43758.5453);\n}\n\n// Cosine direction\nvec3 Cosine(in float seed,in vec3 nor)\n{\n  float u=Hash(78.233+seed);\n  float v=Hash(10.873+seed);\n  \n  // method 3 by fizzer: http://www.amietia.com/lambertnotangent.html\n  float a=6.2831853*v;\n  u=2.*u-1.;\n  return normalize(nor+vec3(sqrt(1.-u*u)*vec2(cos(a),sin(a)),u));\n}\n\n// Rotation matrix around z axis\n// a : Angle\nmat3 rotate_z(float a)\n{\n  float sa=sin(a);float ca=cos(a);\n  return mat3(ca,sa,0.,-sa,ca,0.,0.,0.,1.);\n}\n\n// Compute the ray\n// m : Mouse position\n// p : Pixel\n// ro, rd : Ray origin and direction\nvoid Ray(in vec2 m,in vec2 p,out vec3 ro,out vec3 rd)\n{\n  float a=3.*3.14*m.x;\n  float le=3.8;\n  \n  ro=vec3(20.,0.,5.);\n  ro*=rotate_z(3.*3.14*m.x);\n  \n  vec3 ta=vec3(0.,0.,1.);\n  vec3 ww=normalize(ta-ro);\n  vec3 uu=normalize(cross(ww,vec3(0.,0.,1.)));\n  vec3 vv=normalize(cross(uu,ww));\n  rd=normalize(p.x*uu+p.y*vv+le*ww);\n}\n\n// Main\n\nconst int Steps=150;\nconst float Epsilon=.1;// Marching epsilon\nconst float T=.5;\n\nconst float rA=10.;// Maximum and minimum ray marching or sphere tracing distance from origin\nconst float rB=40.;\n\n\n// ..::= Transform =::.. //\n\nvec3 translateX(vec3 p, float t)\n{\n    return vec3(p.x + t, p.y,p.z);\n}\nvec3 translateY(vec3 p, float t)\n{\n    return vec3(p.x, p.y + t,p.z);\n}\nvec3 translateZ(vec3 p, float t)\n{\n    return vec3(p.x, p.y,p.z + t);\n}\n\nvec3 rotateX(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(p.x,ca*p.y-sa*p.z,sa*p.y+ca*p.z);\n}\n\nvec3 rotateY(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(ca*p.x+sa*p.z,p.y,-sa*p.x+ca*p.z);\n}\n\nvec3 rotateZ(vec3 p,float a)\n{\n  float sa=sin(a);\n  float ca=cos(a);\n  return vec3(ca*p.x+sa*p.y,-sa*p.x+ca*p.y,p.z);\n}\n\nvec3 scaleX(vec3 p, float s)\n{\n    return vec3(p.x*s,p.y,p.z);\n}\nvec3 scaleY(vec3 p, float s)\n{\n    return vec3(p.x,p.y*s,p.z);\n}\nvec3 scaleZ(vec3 p, float s)\n{\n    return vec3(p.x,p.y,p.z*s);\n}\nvec3 scaleUniform(vec3 p, float s)\n{\n    return vec3(p.x*s,p.y*s,p.z*s);\n}\n\n// Smooth cubic falloff function\n// x : distance\n// R : radius\nfloat falloff(float x,float R)\n{\n  float u=clamp(x/R,0.,1.);\n  float v=(1.-u*u);\n  return v*v*v;\n}\n\n\n// ..::= Primitives =::.. //\n\n// Point skeleton\n// p : point\n// c : center of skeleton\n// e : energy associated to skeleton\n// R : radius\nfloat point(vec3 p,vec3 c,float e,float R)\n{\n  return e*falloff(length(p-c),R);\n}\nvec4 pointColor(vec3 p, vec3 c, vec3 color, float e, float R)\n{\n  float x = point(p, c, e, R);\n  return vec4(x, color);\n}\n\n// ==== Segment ==== //\n// p : point\n// a : first point of segment\n// b : second point of segment\n// e : energy associated to skeleton\n// R : radius\nfloat segment(vec3 p, vec3 a, vec3 b, float e, float R)\n{\n  if (dot(b-a, p-a) < 0.0)\n  {\n    return e*falloff(dot(p-a, p-a), R);\n  }\n  else if (dot(b-a, p-b) > 0.0)\n  {\n    return e*falloff(dot(p-b, p-b), R);\n  }\n  else \n  {\n    vec3 u = (b-a)/length(b-a);\n    float sqLengthAP = dot(p-a, p-a);\n    return e*falloff( sqLengthAP - dot(dot((p-a), u), dot((p-a), u)), R );\n  }\n}\nvec4 segmentColor(vec3 p, vec3 a, vec3 b, vec3 color, float e, float R)\n{\n  float x = segment(p, a, b, e, R);\n  return vec4(x, color);\n}\n\n// ==== Circle ==== //\n// p : point\n// c : center of the circle\n// r : radius of the circle\n// e : energy associated to skeleton\n// R : radius\nfloat circle(vec3 p, vec3 c, float r, float e, float R)\n{\n  vec3 n = p -c;\n  vec3 u = vec3(1.0, 0.0, 0.0);\n  float h = dot(n, u);\n  float d = dot(n, n);\n  float y = d - h * h;\n  y = r - sqrt(y);\n\n  return e*falloff(sqrt(y*y + h*h), R);\n}\nvec4 circleColor(vec3 p, vec3 c, float r, vec3 color, float e, float R)\n{\n  float x = circle(p, c, r, e, R);\n  return vec4(x, color);\n}\n\n// ==== Disk ==== //\n// p : point\n// c : center of disk\n// r : radius of disk\n// e : energy associated to skeleton\n// R : radius\nfloat disk(vec3 p, vec3 c, float r, float e, float R)\n{\n  vec3 n = p -c;\n  vec3 u = vec3(1.0, 0.0, 0.0);\n  float h = dot(n, u);\n  float d = dot(n, n);\n  float y = d - h * h;\n\n  if (y < r*r)\n    return e*falloff(abs(h), R);\n    \n  y = r - sqrt(y);\n  return e*falloff(sqrt(y*y + h*h), R);\n}\nvec4 diskColor(vec3 p, vec3 c, float r, vec3 color, float e, float R)\n{\n  float x = disk(p,c,r,e,R);\n  return vec4(x, color);\n}\n\n// Utility function used for box distance function\nfloat box_plan(float coord_p, float coord_a, float coord_b)\n{\n  float result;\n  if (coord_p > coord_a && coord_p < coord_b)\n    result = 0.;\n  else if (coord_p < coord_a)\n    result = coord_a - coord_p;\n  else if (coord_p > coord_b)\n    result = coord_p - coord_b;\n\n  return result;\n}\n// ==== Box ==== //\n// p : point\n// a : min corner point of the box\n// b : max corner point of the box\n// e : energy associated to skeleton\n// R : radius\nfloat box(vec3 p, vec3 a, vec3 b, float e, float R)\n{\n  float xval = box_plan(p.x, a.x, b.x); // x\n  float yval = box_plan(p.y, a.y, b.y); // y\n  float zval = box_plan(p.z, a.z, b.z); // z\n\n  return e*falloff( (xval*xval + yval*yval + zval*zval), R );\n}\nvec4 boxColor(vec3 p, vec3 a, vec3 b, vec3 color, float e, float R)\n{\n  float x = box(p, a, b, e, R);\n\n  return vec4(x, color);\n}\n\n\n// ..::= Operators =::.. //\n\n// ==== Blending ==== //\n// a,b : field function of the sub-trees\nfloat Blend(float a,float b)\n{\n  return a+b;\n}\nvec4 BlendColor(vec4 a, vec4 b)\n{\n  if ((a.x + b.x) != 0.)\n  {\n    vec3 color = (a.yzw * a.x + b.yzw * b.x) / (a.x + b.x);\n    return vec4(a.x + b.x, color);\n  }\n   return vec4(a.x + b.x, a.yzw);\n}\n\n// ==== Union ==== //\n// a : field function of left sub-tree\n// b : field function of right sub-tree\nfloat Union(float a,float b)\n{\n  return max(a,b);\n}\nvec4 UnionColor(vec4 a, vec4 b)\n{\n  if (a.x > b.x)\n    return a;\n  return b;\n}\n\n// ==== Intersection ==== //\nfloat Intersection(float a, float b)\n{\n  return min(a,b);\n}\n\n// ==== Difference ==== //\nfloat Difference(float a, float b)\n{\n  return min(a, 2.*T - b);\n}\nvec4 DifferenceColor(vec4 a, vec4 b)\n{\n  return vec4(Difference(a.x,b.x), a.yzw);\n}\n\n\n// ..::= Scene's objects =::.. //\n\nvec4 torso (vec3 p)\n{\n    vec4 torso;\n    \n    // Neck\n    vec4 neck = segmentColor(p, vec3(0.,0.,-1.), vec3(0.,0.,-1.5), vec3(0.25,0.25,0.25),0.6,0.8);\n    \n    // Body\n    vec4 body = boxColor(p, vec3(-0.3,-0.5,-0.8), vec3(0.3,0.5,0.8), vec3(1.0,0.8,0.0),1.0,1.0);\n    body = BlendColor(body, pointColor(p, vec3(1.0,0.0,0.4), vec3(1.0,0.8,0.0), -1.2,1.0));\n    body = BlendColor(body, pointColor(p, vec3(0.0,1.0,0.4), vec3(1.0,0.8,0.0), -1.0,1.0));\n    body = BlendColor(body, pointColor(p, vec3(0.0,-1.0,0.4), vec3(1.0,0.8,0.0), -1.0,1.0));\n    body = BlendColor(body, diskColor(rotateY(p,PI/2.), vec3(-0.9,0.,0.), 0.85, vec3(1.,0.8,0.),1.,1.));\n    body = UnionColor(body, diskColor(p, vec3(0.0,0.,0.), 0.85, vec3(0.25,0.25,0.25),1.,1.));\n    body = BlendColor(body, segmentColor(p, vec3(0.0,-1.0,-0.8), vec3(0.,1.0,-0.8), vec3(0.25,0.25,0.25),1.0,0.8));\n    body = BlendColor(body, segmentColor(p, vec3(0.0,0.0,1.25), vec3(0.,0.0,1.75), vec3(0.25,0.25,0.25),0.6,0.8));\n    \n    // Core\n    vec3 color = vec3 ( max(abs(Hash(iTime*0.15)),0.6), max(abs(Hash(iTime*0.75)),0.6), max(abs(Hash(iTime*0.5)),0.6));\n    body = UnionColor(body, pointColor(p, vec3(0.75,0.0,0.4), color, 1., 0.75));\n    \n    torso = BlendColor(neck,body);\n    \n    return torso;\n}\n\nvec4 wheelLeg (vec3 p)\n{\n    vec4 wheelLeg;\n    \n    wheelLeg = boxColor(p, vec3(-0.1,-0.3,-0.2), vec3(0.1,0.3,0.7), vec3(1.0,0.8,0.0),1.0,1.0);\n    wheelLeg = BlendColor(wheelLeg, diskColor(rotateZ(rotateY(p,PI/2.),PI/2.), vec3(0.,-0.5,-0.),0.5,vec3(1.0,0.8,0.0),-1.,1.));\n    wheelLeg = UnionColor(wheelLeg, circleColor(rotateZ(rotateY(scaleY(p,0.75),PI/2.),PI/2.), vec3(0.,-0.7,0.),0.6,vec3(0.2,0.2,0.2),0.75,0.75));\n    wheelLeg = UnionColor(wheelLeg, diskColor(rotateZ(rotateY(p,PI/2.),PI/2.), vec3(0.,-0.7,-0.),0.3,vec3(0.5,0.5,0.5),0.75,0.75));\n    wheelLeg = BlendColor(wheelLeg, segmentColor(p, vec3(0.,-0.8,0.75),vec3(0.,0.8,0.75),vec3(0.3,0.3,0.3),0.55,0.35));\n    \n    return wheelLeg;\n}\n\nvec4 leftArm (vec3 p)\n{\n    vec4 leftArm;\n    \n    leftArm = segmentColor(p, vec3(0.,1.5,0.),vec3(0.75,2.25,0.5),vec3(0.25,0.25,0.25),0.55,0.5);\n    leftArm = BlendColor(leftArm,segmentColor(p, vec3(0.75,2.25,0.5),vec3(1.75,1.75,0.5),vec3(0.25,0.25,0.25),0.55,0.5));\n    vec3 tr = rotateZ(translateZ(translateY(translateX(p,-1.75),-1.75),-0.5),-PI/6.);\n    leftArm = BlendColor(leftArm, segmentColor(tr, vec3(-0.25,0.0,0.0),vec3(0.25,0.,0.),vec3(1.,0.8,0.),0.55,0.55));\n    leftArm = UnionColor(leftArm, diskColor(tr, vec3(0.5,0.0,0.0),0.25,vec3(0.25,0.25,0.25),0.55,1.));\n    \n    vec4 finger1 = segmentColor(tr, vec3(0.65,0.,0.35),vec3(1.,0.,0.55),vec3(0.45,0.45,0.45),0.55,0.1);\n    finger1 = UnionColor(finger1, segmentColor(tr, vec3(1.,0.,0.55),vec3(1.3,0.,0.25),vec3(0.45,0.45,0.45),0.55,0.1));\n    \n    vec4 finger2 = segmentColor(rotateX(tr,PI/1.5), vec3(0.65,0.,0.35),vec3(1.,0.,0.55),vec3(0.45,0.45,0.45),0.55,0.1);\n    finger2 = UnionColor(finger2, segmentColor(rotateX(tr,PI/1.5), vec3(1.,0.,0.55),vec3(1.3,0.,0.25),vec3(0.45,0.45,0.45),0.55,0.1));\n    \n    vec4 finger3 = segmentColor(rotateX(tr,-PI/1.5), vec3(0.65,0.,0.35),vec3(1.,0.,0.55),vec3(0.45,0.45,0.45),0.55,0.1);\n    finger3 = UnionColor(finger3, segmentColor(rotateX(tr,-PI/1.5), vec3(1.,0.,0.55),vec3(1.3,0.,0.25),vec3(0.45,0.45,0.45),0.55,0.1));\n    \n    vec4 hand = UnionColor(finger1,finger2);\n    hand = UnionColor(hand, finger3);\n    \n    leftArm = UnionColor(leftArm, hand);\n    \n    return leftArm;\n}\n\nvec4 rightArm (vec3 p)\n{\n    vec4 rightArm;\n    \n    rightArm = segmentColor(p, vec3(0.,-1.5,0.),vec3(0.25,-2.25,.5),vec3(0.25,0.25,0.25),0.55,0.5);\n    rightArm = BlendColor(rightArm,segmentColor(p, vec3(0.25,-2.25,0.5),vec3(0.5,-2.5,1.),vec3(0.25,0.25,0.25),0.55,0.35));\n    vec3 tr = rotateZ(rotateY(translateZ(translateY(translateX(p,-0.5),2.5),-1.),PI/3.),-PI/10.);\n    rightArm = BlendColor(rightArm, segmentColor(tr, vec3(0.25,0.,0.),vec3(1.,0.0,0.0),vec3(1.,0.8,0.),1.,0.35));\n    rightArm = UnionColor(rightArm, diskColor(tr, vec3(1.4,0.0,0.0),0.25,vec3(0.25,0.25,0.25),0.55,1.));\n    \n    rightArm = UnionColor(rightArm, segmentColor(tr, vec3(1.5,0.,0.),vec3(2.,0.,0.),vec3(0.25,0.25,0.25),0.55,0.2));\n    rightArm = UnionColor(rightArm, segmentColor(rotateX(tr,PI/2.), vec3(2.,-0.25,0.),vec3(2.,0.25,0.),vec3(0.25,0.25,0.25),0.55,0.75));\n    rightArm = UnionColor(rightArm, diskColor(rotateY(tr,PI/2.), vec3(-0.5,0.,-2.),0.25,vec3(1.,0.8,0.),0.55,1.));\n    rightArm = UnionColor(rightArm, diskColor(rotateY(tr,PI/2.), vec3(0.5,0.,-2.),0.25,vec3(1.,0.8,0.),0.55,1.));\n    \n    return rightArm;\n}\n\nvec4 head (vec3 p)\n{\n    vec4 head;\n    \n    head = pointColor(p * vec3(1.,0.9,1.), vec3(0.,0.,0.), vec3(0.45,0.45,0.45), 1., 3.);\n    vec3 TR1 = rotateZ(p,PI/2.) * vec3(1.5,1.5,1.5) - vec3(1.5,0.,0.);\n    vec3 TR2 = rotateZ(p,PI/2.) * vec3(1.5,1.5,1.5) + vec3(1.5,0.,0.);\n\n    head = BlendColor(head, diskColor(TR1, vec3(0.,0.,0.),.7,vec3(0.25,0.25,0.25),1.2,1.1));\n    head = BlendColor(head, diskColor(TR2, vec3(0.,0.,0.),.7,vec3(0.25,0.25,0.25),1.2,1.1));\n    head = BlendColor(head, diskColor(scaleY(rotateX(translateX(TR1,-0.4), PI/3.), 0.5), vec3(0.,0.75,0.), 0.75, vec3(1.,0.8,0.), 0.75,0.75));\n    head = BlendColor(head, diskColor(scaleY(rotateX(translateX(TR2,0.4), PI/3.), 0.5), vec3(0.,0.75,0.), 0.75, vec3(1.,0.8,0.), 0.75,0.75));\n    head = BlendColor(head, pointColor(TR1, vec3(1.5,0.,0), vec3(0.,0.,0.), -0.75, 1.5));\n    head = BlendColor(head, pointColor(TR2, vec3(-1.5,0.,0), vec3(0.,0.,0.), -0.75, 1.5));\n    \n    // Eyes\n    head = UnionColor(head, segmentColor(scaleUniform(rotateX(p,-PI/6.),1.2), vec3(1.25,-0.95,-0.25), vec3(1.35,-0.75,-.25), vec3(0.7,0.1,0.1), 0.55,0.75));\n    head = UnionColor(head, segmentColor(scaleUniform(rotateX(p,PI/6.),1.2), vec3(1.35,0.75,-0.25), vec3(1.25,0.95,-.25), vec3(0.7,0.1,0.1), 0.55,0.75));\n    \n    // Mouth\n    head = UnionColor(head, pointColor(scaleY(p,0.5), vec3(1.25,0.,0.65), vec3(1.,0.,0.), 0.55, 1.));\n    \n    return head;\n}\n\nvec4 robot (vec3 p)\n{\n  vec4 robot;\n  \n  vec4 body = torso(translateZ(p,-2.6));\n  vec4 wheelLeg = wheelLeg(translateZ(p,-5.));\n  vec4 leftArm = leftArm(translateZ(p,-2.));\n  vec4 rightArm = rightArm(translateZ(p,-2.));\n  vec4 head = head(p);\n  \n  robot = body;\n  robot = UnionColor(robot,wheelLeg);\n  robot = UnionColor(robot, leftArm);\n  robot = UnionColor(robot, rightArm);\n  robot = UnionColor(robot, head);\n\n  return robot;\n}\n\n// Main object scene (root of CSG tree)\n// vec4 : \n// -- x : distance value\n// -- yzw : vec3 representing color rgb\nvec4 ObjectColored(vec3 p)\n{\n  p.z = -p.z;\n\n  vec3 scale = vec3(4.,4.,4.);\n\n  vec4 v;\n  \n  // ===== Robot ===== //\n  v = robot(p - vec3(0.,0.,-3.));\n\n\n  return vec4(v.x - T, v.y, v.z, v.w);\n}\n\n// Calculate object normal\n// p : point\nvec3 ObjectNormal(in vec3 p)\n{\n  float eps=.0001;\n  vec3 n;\n  vec4 v=ObjectColored(p);\n  n.x=ObjectColored(vec3(p.x+eps,p.y,p.z)).x-v.x;\n  n.y=ObjectColored(vec3(p.x,p.y+eps,p.z)).x-v.x;\n  n.z=ObjectColored(vec3(p.x,p.y,p.z+eps)).x-v.x;\n  return normalize(n);\n}\n\nvec3 ObjectColor(in vec3 p)\n{\n  vec4 v = ObjectColored(p);\n  return vec3(v.y, v.z, v.w);\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat Trace(vec3 o,vec3 u,float rB,out bool h,out int s)\n{\n  h=false;\n  \n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    //float v=Object(p);\n    vec4 v = ObjectColored(p);\n    // Hit object\n    if(v.x>0.)\n    {\n      s=i;\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=Epsilon;\n    // Escape marched far away\n    if(t>rB)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Trace ray using ray marching\n// o : ray origin\n// u : ray direction\n// h : hit\n// s : Number of steps\nfloat SphereTrace(vec3 o,vec3 u,float rB,out bool h,out int s)\n{\n  h=false;\n  \n  // Don't start at the origin, instead move a little bit forward\n  float t=rA;\n  \n  for(int i=0;i<Steps;i++)\n  {\n    s=i;\n    vec3 p=o+t*u;\n    //float v=Object(p);\n    vec4 v = ObjectColored(p);\n    // Hit object\n    if(v.x>0.)\n    {\n      s=i;\n      h=true;\n      break;\n    }\n    // Move along ray\n    t+=max(Epsilon,abs(v.x)/4.);\n    // Escape marched far away\n    if(t>rB)\n    {\n      break;\n    }\n  }\n  return t;\n}\n\n// Ambient occlusion\n// p : Point\n// n : Normal\n// a : Number of smaples\nfloat AmbientOcclusion(vec3 p,vec3 n,int a)\n{\n  if(a==0){return 1.;}\n  \n  float ao=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    \n    int s;\n    bool h;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){ao+=1.;}\n    else if(t>5.)\n    {\n      ao+=1.;\n    }\n  }\n  \n  ao/=float(a);\n  return ao;\n}\n\n// Background color\nvec3 background(vec3 rd)\n{\n  return mix(vec3(.652,.451,.995),vec3(.552,.897,.995),rd.z*.5+.5);\n}\n\nfloat Light(vec3 p,vec3 n)\n{\n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  // Not even Phong shading, use weighted cosine instead for smooth transitions\n  float diff=pow(.5*(1.+dot(n,l)),2.);\n  \n  bool h;\n  int s;\n  float t=SphereTrace(p+.1*n,l,100.,h,s);\n  if(!h)\n  {\n    return diff;\n  }\n  return 0.;\n}\n\nfloat SmoothLight(vec3 p,vec3 n,int a)\n{\n  if(a==0)\n  return 1.;\n  \n  // point light\n  const vec3 lp=vec3(5.,10.,25.);\n  \n  vec3 l=normalize(lp-p);\n  \n  float lo=0.;\n  \n  for(int i=0;i<a;i++)\n  {\n    vec3 d=Cosine(581.123*float(i),n);\n    d=normalize(l+d*.15);\n    int s;\n    bool h;\n    float t=SphereTrace(p,d,10.,h,s);\n    if(!h){lo+=1.;}\n    else if(t>100.)\n    {\n      lo+=1.;\n    }\n  }\n  \n  lo/=float(a);\n  return lo;\n  \n}\n\n// Shading and lighting\n// p : point,\n// n : normal at point\nvec3 Shade(vec3 p,vec3 n)\n{\n  vec3 c=.25+.25*background(n);\n  c+=.15*AmbientOcclusion(p+.1*n,n,0)*vec3(1.,1.,1.);\n  c+=.35*Light(p,n);\n  return c;\n}\n\n// Shading with number of steps\nvec3 ShadeSteps(int n)\n{\n  float t=float(n)/(float(Steps-1));\n  return .5+mix(vec3(.05,.05,.5),vec3(.65,.39,.65),t);\n}\n\n// Picture in picture\n// pixel : Pixel\n// pip : Boolean, true if pixel was in sub-picture zone\nvec2 Pip(in vec2 pixel,out bool pip)\n{\n  // Pixel coordinates\n  vec2 p=(-iResolution.xy+2.*pixel)/iResolution.y;\n  if(pip==true)\n  {\n    const float fraction=1./4.;\n    // Recompute pixel coordinates in sub-picture\n    if((pixel.x<iResolution.x*fraction)&&(pixel.y<iResolution.y*fraction))\n    {\n      p=(-iResolution.xy*fraction+2.*pixel)/(iResolution.y*fraction);\n      pip=true;\n    }\n    else\n    {\n      pip=false;\n    }\n  }\n  return p;\n}\n\n// Image\nvoid mainImage(out vec4 color,in vec2 pxy)\n{\n  // Picture in picture on\n  bool pip=true;\n  \n  // Pixel\n  vec2 pixel=Pip(pxy,pip);\n  \n  // Mouse\n  vec2 m=iMouse.xy/iResolution.xy;\n  \n  // Camera\n  vec3 ro,rd;\n  Ray(m,pixel,ro,rd);\n\n  // Rotate Camera\n  float a=iTime*0.25;\n  ro = rotateZ(ro, a);\n  rd = rotateZ(rd, a);\n  \n  // Trace ray\n  \n  // Hit and number of steps\n  bool hit;\n  int s;\n  \n  float t=SphereTrace(ro,rd,100.,hit,s);\n  //float t = Trace(ro, rd, 100., hit, s);\n  \n  // Position\n  vec3 pt=ro+t*rd;\n  \n  // Shade background\n  vec3 rgb=background(rd);\n  \n  if(hit)\n  {\n    // Compute normal\n    vec3 n=ObjectNormal(pt);\n\n    vec3 col = ObjectColor(pt);\n    \n    // Shade object with light\n    rgb=Shade(pt,n) * col;\n  }\n  \n  // Uncomment this line to shade image with false colors representing the number of steps\n  if(pip==true)\n  {\n    rgb=ShadeSteps(s);\n  }\n  \n  color=vec4(rgb,1.);\n}\n\n","name":"Image","description":"","type":"image"}]}