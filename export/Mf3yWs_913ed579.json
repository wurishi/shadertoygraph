{"ver":"0.1","info":{"id":"Mf3yWs","date":"1731336244","viewed":107,"name":"galaxy eye 2","username":"nayk","description":"source https://www.shadertoy.com/view/MctcDX https://www.shadertoy.com/view/MdXSzS","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["galaxy","stars","universe","eyem"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,r)mix(a*dot(p,a),p,cos(r))+sin(r)*cross(p,a)\n#define H(h)(cos((h)*6.3+vec3(0,23,21))*.5+.5)\n\n// Fonction pour générer un bruit lisse similaire au bruit de Perlin\nfloat rand(float x) {\n    return fract(sin(x) * 43758.5453123);\n}\n\nfloat noise(float x) {\n    float i = floor(x);\n    float f = fract(x);\n    float u = f * f * (3.0 - 2.0 * f);\n    return mix(rand(i), rand(i + 1.0), u);\n}\n\n// Palette de couleurs évoluant dans le temps\nvec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(5.0, 1.0, 1.0);\n    vec3 d = vec3(0.263,0.416,0.557);\n    // Inclure le temps pour faire évoluer les couleurs\n    return a + b * cos(6.28318 * (c * t + d + iTime * 0.1));\n}\n\n// Directions pour le chemin aléatoire\n\nconst vec2 directions[8] = vec2[8](\n    vec2(1, 0),    // droite\n    vec2(0, -1),   // haut\n    vec2(1, 1),    // bas\n    vec2(-1, 0),   // gauche\n    vec2(1, 1),    // diagonale bas droite\n    vec2(-1, -1),  // diagonale haut gauche\n    vec2(1, -1),   // diagonale haut droite\n    vec2(-1, 1)    // diagonale bas gauche\n \n);\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x*cos(iTime) - pos.y);\n    return (2.0+p*(p*p-1.5*cos(iTime))) / (uv.x+uv.y);      \n}\nvoid mainImage(out vec4 O, vec2 C)\n{\n    O=vec4(0);\n    vec4 fragColor = O;\n    vec2 fragCoord =C;\n     float m = min(iResolution.x, iResolution.y);\n    vec2 uv= (fragCoord.xy - 0.5 * iResolution.xy) / m * 2.0;\n  uv.x+=cos(iTime)*0.25;\n    uv.y+=sin(iTime)*0.25;\n    float t = iTime * .1 + ((.25 + .05 * sin(iTime * .1))/(length(uv.xy) + .07)) * 1.2;\nfloat si = sin(t);\nfloat co = cos(t);\nmat2 ma = mat2(co, si, -si, co);\n  uv*=ma;\n    // Appliquer la symétrie\n    vec2 uvSym = abs(uv);\n\n\nfloat v1, v2, v3;\nv1 = v2 = v3 = 0.0;\nconst float maxEdges = 28.0;\n    const float gridSize = 12.0;\n    const float edgesBreak = 16.0;\n\n    vec2 pos = vec2(1.0, 1.0);\n    vec2 prevPos = pos;\n\n vec2 uv2 = (fragCoord.xy - 0.5 * iResolution.xy) / m * 2.0;\n\nfloat s = 0.0;\nfor (int i = 0; i < 90; i++)\n{\n      float perlinOffsetPos =  0.1 + iTime * 0.05;\nvec3 p = s * vec3(uv2, 0.0);\n     p.xy*= vec2(noise(perlinOffsetPos  * 0.4), noise(perlinOffsetPos  * 0.5)) * gridSize;\np += vec3(.22, .3, s - 1.5 - sin(iTime * .13) * .1);\nfor (int i = 0; i < 8; i++) p = abs(p) / dot(p,p) - 0.659;\nv1 += dot(p,p) * .0015 * (1.8 + sin(length(uv.xy * 13.0) + .5  - iTime * .2));\nv2 += dot(p,p) * .0013 * (1.5 + sin(length(uv.xy * 14.5) + 1.2 - iTime * .3));\nv3 += length(p.xy*10.) * .0003;\ns  += .035;\n}\n\nfloat len = length(uv);\nv1 *= smoothstep(.7, .0, len);\nv2 *= smoothstep(.5, .0, len);\nv3 *= smoothstep(.9, .0, len);\n\nvec3 col = vec3( v3 * (1.5 + sin(iTime * .2) * .4),\n(v1 + v3) * .3,\nv2) + smoothstep(0.2, .0, len) * .85 + smoothstep(.0, .6, v3) * .3;\n    vec3 finalColor = vec3(0.0);\n\n    \n\n    // Ralentir l'animation\n    float time = iTime * 0.2; // Ajuster ce facteur pour ralentir ou accélérer\n\n    for (float i = 0.0; i < maxEdges; i += 1.0) {\n\n        // Introduire le temps dans perlinOffsetPos pour faire évoluer les positions\n        float perlinOffsetPos = i * 0.1 + iTime * 0.05;\n\n        // Pause dans le chemin à intervalles réguliers\n        if (mod(i, edgesBreak) == 0.0) {\n            // Réinitialiser la position avec du bruit\n            pos = vec2(noise(perlinOffsetPos + i * 0.4), noise(perlinOffsetPos + i * 0.5)) * gridSize;\n            pos*=ma;\n              pos*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n            prevPos = pos;\n            continue;\n        }\n\n        // Choisir une direction basée sur le bruit\n        float dirIndex = floor(noise(perlinOffsetPos) * 8.0);\n        int idx = int(mod(dirIndex, 8.0));\n        vec2 dir = directions[idx];\n\n        prevPos = pos;\n        pos += dir;\n\n        // Garder la position dans les limites de la grille\n        pos = mod(pos + gridSize, gridSize);\n\n        // Transformer les positions en coordonnées normalisées\n        vec2 p1 = (prevPos / gridSize) * 2.0 - 1.0;\n        vec2 p2 = (pos / gridSize) * 2.0 - 1.0;\n\n        // Appliquer la symétrie\n        vec2 p1Sym = abs(p1);\n        vec2 p2Sym = abs(p2);\n\n        // Calculer la distance minimale du pixel au segment de ligne\n        vec2 p = uvSym;\n        vec2 a = p1Sym;\n        vec2 b = p2Sym;\n        vec2 pa = p - a;\n        vec2 ba = b - a;\n        float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n        float d = length(pa - ba * h);\n\n        // Utiliser le temps dans l'épaisseur et la couleur\n        float perlinOffset = time + i * 0.1;\n\n        // Calculer l'épaisseur de la ligne basée sur le bruit\n        float thickness = mix(0.005, 0.02, noise(perlinOffset + i * 0.1));\n\n        // Calculer la couleur basée sur le bruit et le temps\n        float t = noise(perlinOffset + i * 0.3);\n        vec3 col = palette(t);\n\n        // Accumuler la couleur finale\n        finalColor += col * exp(-d / thickness);\n    }\n\n    fragColor = vec4(finalColor, 1.0);\n \n    uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n   \n   \n    vec3 p,q,r=iResolution,\n    d=normalize(vec3((C*2.-r.xy)/r.y,1));  \n    for(float i=0.,a,s,e,g=0.;\n        ++i<70.;\n        O.xyz+=mix(vec3(1),H(g*.1),.8)*1./e/8e3\n    )\n    {\n        p=g*d+fragColor.xyz;\n    p.xz*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n      p.yz*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        a=30.;\n        p=mod(p-a,a*2.)-a;\n        s=2.;\n        for(int i=0;i++<8;){\n            p=.3-abs(p);\n            p.x<p.z?p=p.zyx:p;\n            p.z<p.y?p=p.xzy:p;\n            s*=e=1.7+sin(iTime*.01)*.1;\n            p=abs(p)*e-\n                vec3(\n                    5.*3.,\n                    120,\n                    8.+cos(iTime*.05)*5.\n                 )*fragColor.xyz;\n         }\n         g+=e=length(p.yxxy)/s;\n    }\n    O*=fragColor;\n     O+= vec4(happy_star(uv, anim) * vec3(0.55,0.5,0.55)*1.2*col*0.1, 1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}