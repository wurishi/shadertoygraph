{"ver":"0.1","info":{"id":"sddyDf","date":"1654199050","viewed":97,"name":"YAM : Yet Another Mandelbrot","username":"ttoinou","description":"poster","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","mandelbrot","gradient","distance","depth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Mandelbrot Filaments & Lightning\" by ttoinou. https://shadertoy.com/view/MttXz8\n// 2021-10-22 10:10:35\n\n\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    color = texture(iChannel0,coord/iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define BAILOUT    (512.)\n#define BAILOUT2   (BAILOUT*BAILOUT)\n\n\nvec4 mandelbrot( in vec2 fragCoord )\n{\n    vec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y;\n\n    \n    float tz = 0.5 - 0.5*cos(0.225*iTime);\n    float tz2 = 0.5 + 0.5*sin(0.225*iTime*.5);\n    float zoo = pow( 0.5, 14.*tz-.5 );\n    float a = iTime/6.;\n    \n\tvec2 c;\n    \n    c = vec2( -1.94048654605392405406751569047147 , 0.000458638111963617712593673719675 );\n    zoo = 0.001;\n    \n    c = vec2(-.5,.0);\n    zoo = 1.0;\n    \n    c.x = 0.3756184895833333538771574983;\n    c.y = 0.3697482638888889011567870542;\n    zoo = 1e-3;\n    \n    c.x = -1.408116319444444495405409975;\n    c.y = -0.136393229166666686457873824;\n    zoo = 3e-3;\n    \n    c.x = -1.7836303710937500721257024917;\n    c.y = -0.0000054253472222246051329553;\n    zoo = 4e-4*(1.1-tz)*100.;\n    \n    float zoo1 = 4e-4;\n    float zoo2 = 1.3;\n    float zoomTransition = 0.5 - 0.5*cos(iTime*PI/48.);\n    if(iMouse.z > .5)\n    {\n        zoomTransition = iMouse.x/iResolution.x;\n    }\n    \n    zoo = mix(\n          log(zoo1)\n        , log(zoo2)\n        , zoomTransition\n    );\n    zoo = exp(zoo);\n    \n    int ITERATIONS = 800;\n    \n    c += p*zoo;\n    //c += (-1.0 + 2.0 * fragCoord.xy / iResolution.y - vec2(.8,.0))*zoo;\n    \n    // iterate\n    vec2 z  = vec2(0.0);\n    float m2 = 0.0;\n    vec2 dz = vec2(0.0);\n    int iter = 0;\n    for( int i=0; i<ITERATIONS; i++ )\n    {\n        if( m2>BAILOUT2 ) continue;\n\n\t\t// Z' -> 2Â·ZÂ·Z' + 1\n        dz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x) + vec2(1.0,0.0);\n\t\t\t\n        // Z -> ZÂ² + c\t\t\t\n        z = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n\t\t\t\n        m2 = dot(z,z);\n        iter = i;\n    }\n\n    // distance\t\n\t// d(c) = |Z|Â·log|Z|/|Z'|\n\tfloat d = 0.5*sqrt(dot(z,z)/dot(dz,dz))*log(dot(z,z));\n\tfloat potential = float(iter) - log( log(length(z)) / log(BAILOUT) )/log(2.);\n\n\t\n    // do some soft coloring based on distance\n\t//d = clamp( 2.0*d/zoo, 0.0, 1.0 );\n\t//d = pow( d, 0.25 );\n    \n    bool inside = iter == ITERATIONS-1;\n    \n    return vec4( inside ? 0. : (d/zoo) , potential , iter , inside );\n    \n}\n\n\n\nvoid drawNormalMandelbrot( out vec4 color, in vec2 coord )\n{\n    vec4 i;\n    \n    i = mandelbrot(coord);\n    // inside mandelbrot is black\n    i.rg *= i.a > 0. ? 0. : 1.;\n    \n    float gradientSmooth = 2.;\n    float t = iTime/2.;\n    color = vec4(\n        cos(log(i.r)*PI/gradientSmooth+t)\n      , cos(log(i.r)*PI/gradientSmooth*.445487-t)\n      , cos(log(i.r)*PI/gradientSmooth*.8978412)\n      , .0\n    )*.5+.5;\n    color *= sin(\n        -log(i.r)*10.\n        //i.g*2.\n        -t*PI*3.3)*.5+.55;\n    color = tanh(color*5.);\n    \n    \n    float limitBlack = 5e-3;\n    color *= smoooth(clamp(i.r/limitBlack,.0,1.));\n    \n    /*float limitWhite = 1e-5;\n    color = mix(\n          vec4(1.)\n        , color\n        , smoooth(clamp(i.r/limitWhite,.0,1.))\n    );*/\n    if(i.r == .0)\n    {\n        color = vec4(.0,.0,.15,1.);\n    }\n}\n\n\nvoid mainImage( out vec4 color, in vec2 coord )\n{\n    drawNormalMandelbrot(color,coord);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\n#define PI (3.14159265359)\n\n// https://www.shadertoy.com/view/4djSRW\n//----------------------------------------------------------------------------------------\n///  2 out, 3 in...\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\nvec2 hash23(vec3 p3)\n{\n\tp3 = fract(p3 * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n//----------------------------------------------------------------------------------------\n//  1 out, 3 in...\n#define HASHSCALE1 .1031\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\nfloat smoooth(float x){\n    return 0.5 - 0.5*cos(x*PI);\n}","name":"Common","description":"","type":"common"}]}