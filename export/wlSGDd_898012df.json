{"ver":"0.1","info":{"id":"wlSGDd","date":"1561521319","viewed":230,"name":"IFS universe","username":"edo_m18","description":"IFS universe","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["ifs"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define repeat(p, span) mod(p, span) - (0.5 * span)\n\nconst float pi = acos(-1.);\nconst float pi2= pi * 2.;\n\nvec3 tex3D(sampler2D tex, vec3 p, vec3 n)\n{\n    n = max(abs(n), 0.00001);\n    vec3 blend = n;\n    blend /= (blend.x + blend.y + blend.z);\n    \n    vec3 x = texture(tex, p.yz).rgb;\n    vec3 y = texture(tex, p.xz).rgb;\n    vec3 z = texture(tex, p.xy).rgb;\n    \n    return x * blend.x + y * blend.y + z * blend.z;\n}\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n                         -0.80,  0.36, -0.48,\n                         -0.60, -0.48,  0.64);\n\nfloat hash(float n)\n{\n    return fract(sin(n) * 43758.5453);\n}\n\nfloat noise(in vec3 x)\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    \n    f = f * f * (3.0 - 2.0 * f);\n    \n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\n    \n    float res = mix(mix(mix(hash(n +   0.0), hash(n +   1.0), f.x),\n                                  mix(hash(n +  57.0), hash(n +   58.0), f.x), f.y),\n                            mix(mix(hash(n + 113.0), hash(n + 114.0), f.x),\n                                   mix(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n    return res;\n}\n\nfloat fbm(vec3 p)\n{\n    float f;\n    f   = 0.5000 * noise(p); p = m * p * 2.02;\n    f += 0.2500 * noise(p); p = m * p * 2.03;\n    f += 0.1250 * noise(p);\n    return f;\n}\n\nmat2 rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    return mat2(c, s, -s, c);\n}\n\nvec2 pmod(vec2 p, float r)\n{\n    float a = atan(p.x, p.y) + pi / r;\n    float n = pi2 / r;\n    a = floor(a / n) * n;\n    return p * rot(-a);\n}\n\nmat3 camera(vec3 ro, vec3 ta, float t)\n{\n    vec3 up = vec3(cos(t), sin(t), 0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n    vec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nfloat sdSphere(vec3 p, vec3 offs, float r)\n{\n    return length(p - offs) - (r + fbm(p * 5.0) * 0.2);\n}\n\nfloat sdBox(vec3 p, vec3 b)\n{\n    return length(max(abs(p) - b, 0.0));\n}\n\nfloat map(vec3 p)\n{  \n    vec3 z = p;\n    \n    z.z = repeat(z.z, 5.0);\n    \n    z.xy = pmod(z.xy, 4.0);\n    z.xz = pmod(z.xz, 4.0);\n    float scale = 2.0;\n    float sum = scale;\n    float d = 1e5;\n    \n    float s = 4.0;\n    \n    for (float i = 0.; i < s; i++)\n    {\n        //float td = sdBox(z, vec3(0.5)) / sum;\n        float td = sdSphere(z, vec3(0), 0.5) / sum;\n        float dist = 1.0;\n        z = abs(z) - vec3(0, dist * scale, dist * scale);\n        d = min(td, d);\n        \n        z.xy *= rot(pi * 0.25);\n        z *= scale;\n        sum *= scale;\n    }\n    \n    return d;\n}\n\nvec3 normal(vec3 p)\n{\n    vec2 e = vec2(0.0001, 0.0);\n    float d = map(p);\n    vec3 n = d - vec3(\n        map(p - e.xyy),\n        map(p - e.yxy),\n        map(p - e.yyx));\n    return normalize(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.y;\n\n\tvec3 col = vec3(0);\n\n    float dist = 5.0;\n    float time = iTime * 0.5;\n    float x = cos(time);\n    float y = sin(time);\n    float z = time * 2.;\n    vec3 ro = vec3(x, y, z);\n    vec3 ta = vec3(x, y, z + dist);\n    \n    vec3 ray = camera(ro, ta, time) * normalize(vec3(uv, 1.8));\n    \n    vec3 p = ro;\n    float d = 0., t = 0.;\n    \n    const int max_march = 128;\n    int march = 0;\n    for (int i = 0; i < max_march; i++)\n    {\n        d = map(p);\n        march = i;\n        if (d < 0.01) break;\n        p += ray * d;\n    }\n    \n    if (d < 0.01)\n    {\n        vec3 n = normal(p);// * 0.5 + 0.5;\n        vec3 tex = tex3D(iChannel0, p, n);\n        vec3 l = normalize(vec3(1, 1, -1));\n        float diff = clamp(dot(n, l), 0.3, 1.0);\n        col = tex * diff;\n    }\n    else\n    {\n        col = vec3(0.1, 0.1, 0.3) * abs(uv.y);\n    }\n    \n    float fog = min(1.0, (1.0 / float(max_march) * float(march))) * 0.1;\n    col += fog;\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}