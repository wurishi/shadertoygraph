{"ver":"0.1","info":{"id":"432XRW","date":"1710329751","viewed":150,"name":"DinuTest","username":"george_mitev","description":"Test fill gauge.\nAll graphics are code generated.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["test","candy","gauge"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//custom functions\n    // Squircle Function\n    float squircle(vec2 p,vec2 b,float r, float power) {\n        //clamp Power\n        float P = max(power,2.0);\n        //clamp radius\n        float R = min(min(r,b.x),b.y);\n\n        vec2 q = abs(p) - b + R;\n             q = max(q, 0.0);\n        return (pow(q.x, P) + pow(q.y, P) - pow(R, P)) / pow(R, P);\n    }\n    \n// Gauge Setup (magic numbers) //\n\n    //General setup\n    #define AA 0.01\n    #define _Radius 0.1\n    #define _Dimensions vec2(0.8,0.1)\n    #define _widthFill 0.2\n    #define _sideTension 2.0  //3.0 for squircle\n\n    // Gauge Styling\n    #define _BG vec3(0.8)\n    #define _colBody vec3(0.7)\n    #define _colFill vec3(0.0,0.3,0.7)\n    #define _offsetShadow 0.03\n    #define _sizeShadow 0.8\n    #define _powerShadow 0.8\n    #define _powerRefl 0.04\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) (shadertoy specific)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    //centered symetrical uv (shadertoy specific)\n    vec2 cUV = uv-0.5;\n         cUV.x *= iResolution.x/iResolution.y;\n         \n// Distance fields\n    //body\n    float dfBody = squircle(cUV, _Dimensions,_Radius,_sideTension);\n    \n    //fill\n    float offset = (sin(iTime)+1.0) * 0.5;  //replace with fill controller property 0-1\n    float fDim = mix(_Radius,_Dimensions.x,offset);\n    float dfFill = squircle(vec2(cUV.x - fDim + _Dimensions.x,cUV.y), vec2(fDim,_Dimensions.y),_Radius,_sideTension);\n    float dfShadowFill = squircle(vec2(cUV.x - fDim + _Dimensions.x,cUV.y + _offsetShadow), vec2(fDim,_Dimensions.y),_Radius,_sideTension);\n    float dfReflFill = squircle(vec2(cUV.x - fDim + _Dimensions.x,cUV.y - _offsetShadow), vec2(fDim,_Dimensions.y),_Radius,_sideTension);\n\n//Gauge\n    vec3 Col;\n    \n    //Body\n    float aBody = smoothstep(0.0-AA,0.0+AA,dfBody);\n    float aShadow = smoothstep(-_widthFill,-_widthFill  - _sizeShadow,dfShadowFill);\n    \n    Col = mix(_colBody, _colBody - _powerShadow, aShadow);\n    Col = mix(Col,_BG, aBody);\n    \n    // fill\n    float aFill = smoothstep(-_widthFill-AA,-_widthFill+AA,dfFill);\n    float innerShadow = smoothstep(-_Dimensions.y + 0.1,-_Dimensions.y - 1.0,dfShadowFill);\n    float innerShadow2 = smoothstep(-_Dimensions.y + 0.5,-_Dimensions.y - 0.5,dfReflFill);\n    float refl = smoothstep( 1.0,_Dimensions.y -1.0, dfShadowFill);\n          refl *= step(_Dimensions.y -0.5,dfShadowFill);\n    \n    vec3 fxFill = mix(_colFill-0.1,_colFill+0.25,smoothstep(-_Dimensions.y,_Dimensions.y, cUV.y));\n         fxFill = mix(fxFill + 0.25,fxFill,innerShadow);\n         fxFill = mix(fxFill + 0.1,fxFill,innerShadow2);\n         fxFill += refl * _powerRefl;\n    \n    Col = mix(fxFill, Col,aFill);\n\n    // Output to screen\n    fragColor = vec4(Col,1.0);\n}","name":"Image","description":"","type":"image"}]}