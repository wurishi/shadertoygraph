{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec2 tToEdgePoint(float t, vec2 maxXY, vec2 offset)\n{\n    vec2 p;\n\tfloat fullLength = 2.0 * maxXY.x + 2.0 * maxXY.y;\n    float relativeWidth = maxXY.x / fullLength;\n    float relativeHeight = maxXY.y / fullLength;\n    t = mod(t, 1.0);\n    if (t < relativeWidth)\n    {\n    \tp.x = (t / relativeWidth) * maxXY.x;\n        p.y = maxXY.y;\n    }\n    else if (t < relativeWidth + relativeHeight)\n    {\n        float pt = t - relativeWidth;\n     \tp.x = maxXY.x;\n        p.y = (1.0 - pt / relativeHeight) * maxXY.y;\n    }\n    else if (t < 2.0 * relativeWidth + relativeHeight)\n    {\n        float pt = t - relativeWidth - relativeHeight;\n        p.x = (1.0 - pt / relativeWidth) * maxXY.x;\n        p.y = 0.0;\n    }\n    else\n    {\n        float pt = t - 2.0 * relativeWidth - relativeHeight;\n        p.x = 0.0;\n        p.y = (pt / relativeHeight) * maxXY.y;\n    }\n        \n    return p + offset;\n}\n\n// Returns distance of point p from line defined by l0 and l1\nfloat distanceFromLine(vec2 l0, vec2 l1, vec2 p)\n{\n    vec2 d = l1 - l0;\n    float dist = abs(d.y * p.x - d.x * p.y - l0.x * l1.y + l1.x * l0.y);\n    dist /= length(d);\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float aspect = iResolution.x / iResolution.y;\n    uv.x *= aspect;\n    \n    vec3 color;\n    float t = iTime * 0.1;\n    //vec2 maxXY = vec2(iResolution.x / iResolution.y, 1.0);\n\tvec2 maxXY = vec2(aspect, aspect);\n    vec2 offset = vec2(0.0, -0.3);\n    \n    // Visualization of the line points\n    /*if (length(tToEdgePoint(t, maxXY) - uv) < 0.05)\n        color = vec3(1.0);\n    if (length(tToEdgePoint(t + 0.5, maxXY) - uv) < 0.05)\n        color = vec3(1.0);*/\n    \n    vec2 l0 = tToEdgePoint(t, maxXY, offset);\n    vec2 l1 = tToEdgePoint(t + 0.5, maxXY, offset);\n    float d = distanceFromLine(l0, l1, uv);\n    //if (d < 0.005)\n    //    color = vec3(uv.x / aspect, uv.y, 0.5);\n    \n    vec2 l2 = tToEdgePoint(t + 0.25, maxXY, offset);\n    vec2 l3 = tToEdgePoint(t + 0.75, maxXY, offset);\n    d = distanceFromLine(l2, l3, uv);\n    d -= 0.1 * (.5 + .5 * sin(20. * uv.x) * cos(20. * uv.y));\n    if (d < 0.005)\n        color = vec3(.95, .1, .1) * exp(-0.3 + 30. * d);\n    else\n        color = .4 * vec3(.9, .2, .1) * sin(iTime*.2 * d) * cos(5. * d);\n    \n    \n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"XsSSDy","date":"1419792777","viewed":193,"name":"Plasma Lines","username":"janneasdf","description":"lines","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","lines"],"hasliked":0,"parentid":"","parentname":""}}