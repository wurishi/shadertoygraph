{"ver":"0.1","info":{"id":"lf3cDB","date":"1731090590","viewed":65,"name":"Path Implementation Pt II","username":"jimmcnulty41","description":"Coolio -- drawing some beziers -- there's gotta be a more efficient solution right","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d","path"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define FLT_MAX 3.402823466e+38\n\nconst int size = 4;\nconst int res =128;\nvec2[size] ctl_pts = vec2[size](\n    vec2(120, 120),\n    vec2(240, 240),\n    vec2(360, 0),\n    vec2(480, 120)\n);\nconst float stepsize = 1./float(res);\n\n\nfloat pathd(\n    in vec2 fragCoord,\n    in vec2[res] points\n) \n{\n    int min_idx = 0;\n    float min_dist = FLT_MAX;\n    for (int i = 0; i < res; ++i) {\n        float current_dist = distance(points[i], fragCoord);\n        if (current_dist < min_dist) {\n            min_dist = current_dist;\n            min_idx = i;\n        }\n    }\n    return min_dist;\n}\n\nvec2[res] bezier(in vec2 fragCoord)\n{\n    vec2[(size-1)*res] points;\n    vec2 pt = vec2(0.);\n    vec2[res] resampled;\n    \n    for (int s = 0; s < res; ++s) {\n        float p = float(s) * stepsize;\n        vec2[size] pts;\n        for (int i = 0; i < size; ++i) {\n            pts[i] = ctl_pts[i];\n        }\n        \n        for (int i = 0; i < size-1; ++i) {\n            for (int j = 0; j < size -1- i; ++j) {\n                pts[j] = p*pts[j] + (1.-p)* pts[j+1];\n            }\n        }\n        resampled[s] = pts[0];\n    }\n    \n    return resampled;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2[res] blah = bezier(fragCoord);\n    vec3 col= vec3(smoothstep(9., 12. ,pathd(fragCoord, blah)));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}