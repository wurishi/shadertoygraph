{"ver":"0.1","info":{"id":"dtdSzr","date":"1684985275","viewed":84,"name":"Fork Space Gif","username":"mehow_one","description":"So the input can be anything.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["gif"],"hasliked":0,"parentid":"wdlGRM","parentname":"Space Gif"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Space Gif by Martijn Steinrucken aka BigWings - 2019\n// Email:countfrolic@gmail.com Twitter:@The_ArtOfCode\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// Original idea from:\n// https://boingboing.net/2018/12/20/bend-your-spacetime-continuum.html\n//\n// To see how this was done, check out this tutorial:\n// https://youtu.be/cQXAbndD5CQ\n//\n\nvec3 irri(float hue) {\n  return .5+ .5 *cos(( 9.*hue)+ vec3(0,23.,21.));\n}\n\n#define KIND 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5)/iResolution.y;\n\tvec2 p = fragCoord.xy/iResolution.xy;\n    uv *= mat2(.707, -.707, .707, .707);\n    uv *= 30.;\n    \n    vec2 gv = fract(uv)-.5; \n\tvec2 id = floor(uv);\n    \n\tfloat m = 0.;\n    float t;\n    float mask = 1.-step(texture(iChannel1,p).r,0.001);\n    if(KIND == 0){\n    for(float y=-1.; y<=1.; y++) {\n    \tfor(float x=-1.; x<=1.; x++) {\n            vec2 offs = vec2(x, y);\n            \n            t = iTime*.5 + texture(iChannel1,p).r*2.;\n            float r = mix(0.5, 2., sin(t)*.5+.5);\n    \t\tfloat c = smoothstep(r, r*.99, length(gv+offs))*mask;\n    \t\tm = m*(1.-c) + c*(1.-m);\n        }\n    }\n    }\n    if(KIND ==1){\n    //https://www.shadertoy.com/view/4dVGzd\n    vec2 f = floor(uv);\n    vec2 u = 2.*fract(uv)-1.;\n    float b = mod(f.x+f.y,2.), y;\n    for(int i=0; i<4; i++)\n        u *= mat2(0,-1,1,0),\n        y = fract(.2*iTime+texture(iChannel1,p).r*2.),\n\t    m += smoothstep(.55,.45, length(u-vec2(.5,1.5*y)))*mask;\n    \n    }\n    fragColor = vec4(vec3(m),1.);\n    if(KIND ==2){\n    //https://www.shadertoy.com/view/4dVGzd\n    float pixel = texture(iChannel1,p).r * 1.5;\n    vec3 color = irri(pixel)*.5+.75;\n    fragColor.rgb = mix(color*.1,color,pixel)*mask;\n    }\n    \n    \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float material;\nfloat glow;\nvec3 mouse;\n\n#define TAU 6.283185\n#define PI TAU * .5\n#define SURF_DIST .01\n\n#define repeat(p,r) (mod(p,r)-r/2.)\nmat2 rot(float a) { return mat2(cos(a),-sin(a),sin(a),cos(a)); }\nvec3 lookAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return normalize(z * fov + uv.x * x + uv.y * y);\n}\nvec3 vectorAt (vec3 from, vec3 at, vec2 uv, float fov)\n{\n  vec3 z = normalize(at-from);\n  vec3 x = normalize(cross(z, vec3(0,1,0)));\n  vec3 y = normalize(cross(x, z));\n  return (z * fov + uv.x * x + uv.y * y);\n}\n\n\n// Inigo Quilez\n// https://iquilezles.org/articles/distfunctions/\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 q = abs(p) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\nfloat sdTorus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\nfloat sdSegment( vec3 p, float h, float r )\n{\n  p.y -= clamp( p.y, 0.0, h );\n  return length( p ) - r;\n}\nfloat sdLink( vec3 p, float le, float r1, float r2 )\n{\n  vec3 q = vec3( p.x, max(abs(p.y)-le,0.0), p.z );\n  return length(vec2(length(q.xy)-r1,q.z)) - r2;\n}\nfloat sdCappedTorus(in vec3 p, in vec2 sc, in float ra, in float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\nfloat sdSphere( vec3 p )\n{\n  return length(p) - 1.0;\n}\n\nfloat smin( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\n// Dave Hoskins\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p)\n{\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\nvec3 hash31(float p)\n{\n   vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n   p3 += dot(p3, p3.yzx+33.33);\n   return fract((p3.xxy+p3.yzz)*p3.zyx); \n}\nvec3 hash33(vec3 p3) {\n\tp3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\nvec4 hash41(float p)\n{\n\tvec4 p4 = fract(vec4(p) * vec4(.1031, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.xxyz+p4.yzzw)*p4.zywx);\n    \n}\n\n// fractal brownian motion https://thebookofshaders.com/13/\n\nvec3 irri(float hue) {\n  return .5+ .5 *cos(( 9.*hue)+ vec3(0,23.,21.));\n}\n\n\n// signed distance function\nfloat map(vec3 p)\n{\n    vec3 pos = p;\n    //pos = repeat(pos,vec3(2.0,1.7,0.));\n    pos.zy *= rot(iTime);\n    pos.xy *= rot(iTime);\n    \n    float dist = sdTorus(pos,vec2(0.5,.25));\n    \n    return dist * .5;\n}\n\nvoid coloring (inout vec3 color, in vec3 pos, in vec3 normal, in vec3 ray, in vec2 uv, in float shade)\n{\n    // Inigo Quilez color palette\n    // https://iquilezles.org/www/articles/palettes/palettes.htm\n    vec3 tint = .5+.5*cos(vec3(0,.3,.6)*6.283+iTime*.2+uv.y*3.);\n    \n    // lighting\n    color = vec3(0.15)*pow(dot(normal, vec3(0,-1,0))*.5+.5, 10.);\n    vec3 rf = reflect(ray, normal);\n    float top = dot(rf, vec3(0,1,0))*.5+.5;\n    float glow = dot(normal, ray)*.5+.5;\n    color += vec3(.9)*pow(clamp(top,0.,1.), 3.5);\n    color += vec3(2)*pow(glow, 2.);\n    color = min(color*pow(shade,1./8.)*1.05,1.);\n    //color += irri(top+glow+pos.y*0.1+iTime*0.01)*glow;\n    //color = pow(color.rrr,vec3(3.));\n    //color = step(color,vec3(0.25)).rgb;\n    //color += texture(iChannel1,rf).rgb*0.25;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-iResolution.xy/2.)/iResolution.y;\n    // background\n    vec3 color = vec3(0.00);\n    // coordinates\n    vec3 pos = vec3(0,0,2.);\n    vec3 at = vec3(0,0,0);\n    vec3 ray = lookAt(pos, at, uv, 1.);\n    \n    // noise\n    //vec3 blue = texture(iChannel0, fragCoord/1024.).xyz;\n    vec3 white = hash33(vec3(fragCoord, iFrame));   \n    float maxDist = 10.;\n    // raymarch\n    const float count = 50.;\n    float steps = 0.;\n    float total = 0.;\n    for (steps = count; steps > 0.; --steps) {\n        float dist = map(pos);\n        if (dist < total *1./iResolution.y || total > maxDist) break;\n        //dist *= 0.9;\n        //ray += white * total*.01;\n        pos += ray * dist;\n        total += dist;\n    }\n    \n    // NuSan https://www.shadertoy.com/view/3sBGzV\n    vec2 noff = vec2(.001,0);\n    vec3 normal = normalize(map(pos)-vec3(map(pos-noff.xyy), map(pos-noff.yxy), map(pos-noff.yyx)));\n    \n    // coloring\n    float shade = steps/count;\n    if (shade > SURF_DIST && total < maxDist) {\n        coloring(color, pos, normal, ray, uv, shade);\n    }\n    \n    fragColor = vec4(color, 1);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n//https://www.shadertoy.com/view/MtfXRN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tconst float textureSamplesCount = 4.0;\n\tconst float textureEdgeOffset = 0.01;\n\tfloat tileSize = iResolution.x/60.;\n\ttileSize += mod(tileSize, 2.0);\n\tvec2 tileNumber = floor(fragCoord.xy / tileSize);\n\n\tvec4 accumulator = vec4(0.0);\n\tfor (float y = 0.0; y < textureSamplesCount; ++y)\n\t{\n\t\tfor (float x = 0.0; x < textureSamplesCount; ++x)\n\t\t{\n\t\t\tvec2 textureCoordinates = (tileNumber + vec2((x + 0.5)/textureSamplesCount, (y + 0.5)/textureSamplesCount)) * tileSize / iResolution.xy;\n\t\t\ttextureCoordinates.y = 1.0 - textureCoordinates.y;\n\t\t\ttextureCoordinates = clamp(textureCoordinates, 0.0 + textureEdgeOffset, 1.0 - textureEdgeOffset);\n\t\t\taccumulator += texture(iChannel0, textureCoordinates);\n\t   }\n\t}\n\t\n\tfragColor = accumulator / vec4(textureSamplesCount * textureSamplesCount);\n\t\n\n}","name":"Buffer B","description":"","type":"buffer"}]}