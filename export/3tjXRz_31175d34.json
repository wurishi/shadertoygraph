{"ver":"0.1","info":{"id":"3tjXRz","date":"1564821874","viewed":210,"name":"Multiple TVs","username":"96logda","description":"This shader is my second tv shader. :)","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["video","tv","film","television","advertising","1940","1950"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Copyright (c) 2019-08-03 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    //Televisions:\n    fragColor =  texture(iChannel0, uv);    \n    fragColor += texture(iChannel0, uv - vec2(0.5, 0.0));   \n    fragColor += texture(iChannel0, uv - vec2(0.0, 0.5));\n    fragColor += texture(iChannel0, uv - vec2(0.5, 0.5));\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Copyright (c) 2019-08-03 by Angelo Logahd\n//Portfolio: https://angelologahd.wixsite.com/portfolio\n\nconst float TV_SCALE = 16.0;\nconst vec3  TV_BRIGHTNESS = vec3(1.25, 1.25, 1.25);\n\nvec3 sampleMovie(const in vec2 sampleP)\n{   \n    if (sampleP.x <= 0.0 || sampleP.y <= 0.0 || \n        sampleP.x >= 1.0 || sampleP.y >= 1.0) \n    {\n        return vec3(0.0);\n    } \n    \n    return texture(iChannel0, sampleP).rgb;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uvt = 2.0 * fragCoord.xy / iResolution.xy;\n    vec2 uv = uvt;\n    vec2 uvS = uv * 2.0 - 1.0;\n    \n    float d = distance(uv, vec2(0.5, 0.5)) / TV_SCALE;\n    vec2 sampleP = vec2(uv.x + uvS.x * d, uv.y + uvS.y * d);\n\t\n    fragColor.rgb = sampleMovie(sampleP) * TV_BRIGHTNESS;\n    fragColor.a = 1.0;\n}","name":"Buffer A","description":"","type":"buffer"}]}