{"ver":"0.1","info":{"id":"sdXSWH","date":"1618591830","viewed":84,"name":"Magic figure","username":"AnastK","description":"Computer Graphics MSU","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["computergraphic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRn","filepath":"/media/a/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","previewfilepath":"/media/ap/fb918796edc3d2221218db0811e240e72e340350008338b0c07a52bd353666a6.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float PHI = 1.618;\nconst float EPS = 1e-5;\nconst float BaseHeight = 0.1;\nconst vec3 CAMERA_POS = vec3(0, 4.2, -10);\nvec3 randDir;\n\nvec3 LIGHT1_POS = vec3(-4.0, 1.0, 3.0);\nconst float LIGHT1_RADIUS = 0.5;\nconst vec3 LIGHT1_COLOR = vec3(0.91, 0.63, 0.77);\n\nvec3 LIGHT2_POS = vec3(2.3, -0.5, -2.0);\nconst float LIGHT2_RADIUS = 0.3;\nconst vec3 LIGHT2_COLOR = vec3(0.88, 0.89, 0.14);\n\nvec3 LIGHT3_POS = vec3(1.9, 0.2, 4.0);\nconst float LIGHT3_RADIUS = 0.3;\nconst vec3 LIGHT3_COLOR = vec3(0.69, 0.89, 1.0);\n\nfloat traceTable(vec3 pos, vec3 dir, out vec3 normal) {\n    //(pos + t*dir).y = 0.8\n    //t = (0.8 - pos.y)/dir.y\n    float height = -PHI - BaseHeight;\n    \n    float t = (height - pos.y) / dir.y;\n    if (t < 0.0) {\n        return INF;\n    }\n    vec3 worldPos = pos + dir*t;\n    if (worldPos.z > 10.0 || worldPos.z < -5.0 || worldPos.x < -7.0 || worldPos.x > 7.0) {\n        return INF;\n    }\n    normal = vec3(0,1,0);\n    return t;\n}\n\nfloat traceSphere(vec3 pos, vec3 dir, vec3 center, float radius, out vec3 normal) {\n    //dot((pos - C) + t*dir, (pos - C) + t*dir) == r * r\n    //dot(pos-C, pos-C) + t*2*dot(pos-C, dir) + t*t*dot(dir, dir) == r*r\n    //a * t*t + 2*b*t + c = 0\n    //D = b*b - a*c\n    //x = (-b +- sqrt(D)) / a\n    float a = dot(dir, dir);\n    float b = dot(pos-center, dir);\n    float c = dot(pos-center, pos-center) - radius*radius;\n    float D = b*b - a*c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        normal = normalize(pos + t*dir);\n        return t;\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t > 0.0) {\n        normal = normalize(pos + t*dir);\n        return t;\n    }\n    return INF;\n} \n\nfloat traceBase(vec3 pos, vec3 dir, out vec3 normal) {\n    float radius = 1.5;\n    vec3 center = vec3(0.0, -PHI - BaseHeight/2.0, 0.0);\n    \n    //(pos + t*dir).y = center.y + height/2\n    //t = (center.y + height/2 - pos.y)/dir.y\n    float t = (center.y + BaseHeight/2.0 - pos.y) / dir.y;\n    if (t > 0.0) {\n        vec3 worldPos = pos + dir*t;\n        if (dot(worldPos.xz - center.xz, worldPos.xz - center.xz) <= radius*radius) {\n            normal = vec3(0,1,0);\n            return t;\n        }\n    } \n    //dot(((pos - C) + t*dir).xz, ((pos - C) + t*dir).xz) == r * r\n    //dot((pos-C).xz, (pos-C).xz) + t*2*dot((pos-C).xz, dir.xz) + t*t*dot(dir.xz, dir.xz) == r*r\n    //a * t*t + 2*b*t + c = 0\n    //D = b*b - a*c\n    //x = (-b +- sqrt(D)) / a\n    float a = dot(dir.xz, dir.xz);\n    float b = dot((pos-center).xz, dir.xz);\n    float c = dot((pos-center).xz, (pos-center).xz) - radius*radius;\n    float D = b*b - a*c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        vec3 worldPos = pos + dir*t;\n        if (worldPos.y < center.y + BaseHeight/2.0 && worldPos.y > center.y - BaseHeight/2.0) {\n            normal = normalize(vec3(worldPos.x - center.x,0.0,worldPos.z-center.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t > 0.0) {\n        vec3 worldPos = pos + dir*t;\n        if (worldPos.y < center.y + BaseHeight/2.0 && worldPos.y > center.y - BaseHeight/2.0) {\n            normal = normalize(vec3(worldPos.x - center.x,0.0,worldPos.z-center.z));\n            return t;\n        }\n    }\n    return INF;\n}\n\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal, vec3 v1, vec3 v2, vec3 v3) {\n    vec3 dist1 = v2 - v1;\n    vec3 dist2 = v3 - v1;\n    vec3 dist_pos = pos - v1;\n    \n    vec3 a = cross(dist1, dist2);\n    float tmp = 1.0 / dot(a, dir);\n    if (abs(tmp) < EPS) {\n        return INF;\n    }\n    vec3 b = cross(dist_pos, dir);    \n    vec3 res = vec3(-dot(a, dist_pos), -dot(b, dist2), dot(b, dist1)) * tmp;\n    \n    if (res.x < 0.0 || res.y < 0.0 || res.z < 0.0 || (res.y + res.z) > 1.0) {\n        return INF;\n    }\n    normal = normalize(cross(dist1, dist2));\n    if (dot(normal, dir) > 0.0) {\n        normal = normalize(cross(dist2, dist1));\n    }\n    return res.x;\n} \n\nfloat traceCrystal(vec3 pos, vec3 dir, out vec3 normal) {\n    const int VERTEXCOUNT = 12;\n    const int TRIANGLECOUNT = 20;\n    \n    vec3 vertices[VERTEXCOUNT] = vec3[VERTEXCOUNT]\n    (\n        vec3(-1,  PHI, 0),\n        vec3( 1,  PHI, 0),\n        vec3(-1, -PHI, 0),\n        vec3( 1, -PHI, 0),\n\n        vec3(0, -1,  PHI),\n        vec3(0,  1,  PHI),\n        vec3(0, -1, -PHI),\n        vec3(0,  1, -PHI),\n\n        vec3( PHI, 0, -1),\n        vec3( PHI, 0,  1),\n        vec3(-PHI, 0, -1),\n        vec3(-PHI, 0,  1)\n    );\n\n    int triangles[TRIANGLECOUNT * 3] = int[TRIANGLECOUNT * 3]\n    (\n         5, 11,  0,\n         1,  5,  0,\n         7,  1,  0,\n        10,  7,  0,\n        11, 10,  0,\n\n         9,  5,  1,\n         4, 11,  5,\n         2, 10, 11,\n         6,  7, 10,\n         8,  1,  7,\n\n         4,  9,  3,\n         2,  4,  3,\n         6,  2,  3,\n         8,  6,  3,\n         9,  8,  3,\n\n         5,  9,  4,\n        11,  4,  2,\n        10,  2,  6,\n         7,  6,  8,\n         1,  8,  9\n    );\n    float t = INF;\n    for (int i = 0; i < TRIANGLECOUNT; ++i) {\n        int ind1 = triangles[i*3];\n        int ind2 = triangles[i*3 + 1];\n        int ind3 = triangles[i*3 + 2];\n        vec3 cur_normal;\n        float cur_t = traceTriangle(pos, dir, cur_normal, vertices[ind1], vertices[ind2], vertices[ind3]);\n        if (cur_t < t) {\n            t = cur_t;\n            normal = cur_normal;\n        }\n    }\n    return t;\n}\n\nconst float FireRadius = 0.87;\nfloat noise_amplitude = 0.3;\n\nfloat lerp(float v0, float v1, float t) {\n    return v0 + (v1-v0)*max(0.0, min(1.0, t));\n}\n\nfloat hash(const float n) {\n    float x = sin(n) * 43758.5453;\n    return x - floor(x);\n}\n\nfloat noise(vec3 vector) {\n    vec3 p = vec3(floor(vector.x), floor(vector.y), floor(vector.z));\n    vec3 f = vector - p;\n    f = f*(f*(vec3(3.0, 3.0, 3.0)-f*2.0));\n    float n = dot(p,vec3(1.0, 57.0, 113.0));\n    return lerp(lerp(\n                     lerp(hash(n +  0.0), hash(n +  1.0), f.x),\n                     lerp(hash(n + 57.0), hash(n + 58.0), f.x), f.y),\n                lerp(\n                    lerp(hash(n + 113.0), hash(n + 114.0), f.x),\n                    lerp(hash(n + 170.0), hash(n + 171.0), f.x), f.y), f.z);\n}\n\nvec3 rotate(const vec3 vector) {\n    return vec3(dot(vec3(0.0, 0.8, 0.6),vector), dot(vec3(-0.8, 0.36, -0.48),vector), dot(vec3(-0.6, -0.48, 0.64),vector));\n}\n\nfloat fractal_brownian_motion(const vec3 x) {\n    vec3 p = rotate(x);\n    float f = 0.5000*noise(p) + 0.2500*noise(p*2.32) + 0.1250*noise(p*3.03) + 0.0625*noise(p*2.61);\n    return f/0.9375;\n}\n\n\nfloat signed_distance(vec3 vector) {\n    //return length(vector) - FireRadius;\n    //vector = normalize(vector) / FireRadius;\n    //float displacement = sin(64.0*vector.x)*sin(64.0*vector.y)*sin(64.0*vector.z)*noise_amplitude;\n    float displacement = -fractal_brownian_motion(vector*3.4)*noise_amplitude;\n    return length(vector) - FireRadius - displacement;\n}\n\nvec3 distance_field_normal(vec3 pos) {\n    float d = signed_distance(pos);\n    float nx = signed_distance(pos + vec3(EPS, 0, 0)) - d;\n    float ny = signed_distance(pos + vec3(0, EPS, 0)) - d;\n    float nz = signed_distance(pos + vec3(0, 0, EPS)) - d;\n    return vec3(nx, ny, nz);\n}\n\nvec3 palette_fire(float d) {\n    const vec3 yellow = normalize(vec3(1.0, 1.3, 1.7));\n    const vec3 orange = normalize(vec3(0.0, 0.6, 1.0));\n    const vec3 red = vec3(0.0, 0.0, 1.0);\n    const vec3 darkgray = vec3(0.2, 0.2, 0.2);\n    const vec3 gray = vec3(0.4, 0.4, 0.4);\n\n    float x = d + 1.0;\n    if (x<0.25)\n        return mix(gray, darkgray, x*4.0);\n    else if (x<0.5)\n        return mix(darkgray, red, x*4.0 - 1.0);\n    else if (x<0.75)\n        return mix(red, orange, x*4.0-2.0);\n    return mix(orange, yellow, x*4.0-3.0);\n}\n\nbool isVisible(vec3 target, vec3 light_pos) {\n    vec3 dir = light_pos - target;\n    float len_dir = dot(dir, dir);\n    dir /= len_dir;\n    \n    vec3 normal;\n    float t = traceBase(target, dir, normal);\n    if (t < len_dir) {\n        return false;\n    }\n    return true;\n}\n\nvec3 calculateLight(vec3 target, vec3 color, vec3 normal) {\n    vec3 coef = vec3(0, 0, 0);\n    if (isVisible(target, LIGHT1_POS + randDir*LIGHT1_RADIUS)) {\n        vec3 dir = LIGHT1_POS - target;\n        coef += max(0.0, dot(normal, normalize(dir))) * 10.0 * LIGHT1_COLOR / dot(dir, dir);\n    }\n    if (isVisible(target, LIGHT2_POS + randDir*LIGHT2_RADIUS)) {\n        vec3 dir = LIGHT2_POS - target;\n        coef += max(0.0, dot(normal, normalize(dir))) * 10.0 * LIGHT2_COLOR / dot(dir, dir);\n    }\n    if (isVisible(target, LIGHT3_POS + randDir*LIGHT3_RADIUS)) {\n        vec3 dir = LIGHT3_POS - target;\n        coef += max(0.0, dot(normal, normalize(dir))) * 10.0 * LIGHT3_COLOR / dot(dir, dir);\n    }\n    coef += texture(iChannel1, normal).rgb * 0.1;\n    return color*coef;\n}\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    //vec2 uv = (fragCoord - iResolution.xy* 0.5) /iResolution.x;\n    vec2 uv = (fragCoord - iResolution.xy* 0.5 + (randVals.xy - 0.5)*2.0) /iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n    \n    LIGHT1_POS = vec3(-4.0, 1.0, 3.0) + randVals*0.05;\n    LIGHT2_POS = vec3(2.3, -0.5, -2.0) + randVals*0.05;\n    LIGHT3_POS = vec3(1.9, 0.2, 4.0) + randVals*0.05;\n    \n    const int EMISSION = 0;\n    const int DIFFUSE = 1;\n    const int REFLECTION = 2;\n    const int REFRACTION = 3;\n    \n    float AIR_N = 1.0;\n    float GLASS_N = 1.5;\n    float GLASS_R = (AIR_N - GLASS_N)*(AIR_N - GLASS_N) / (AIR_N + GLASS_N)*(AIR_N + GLASS_N);\n    float n_cur = AIR_N;\n    vec3 cur_pos = CAMERA_POS;\n    vec3 cur_dir = viewVec;\n    \n    for (int i = 0; i < 10; i++) {\n        float t = INF, t1;\n        int material;\n        vec3 color;\n        vec3 normal;\n        float n_enter;\n        \n        vec3 normalTable;\n        t1 = traceTable(cur_pos, cur_dir, normalTable);\n        if (t1 < t) {\n            t = t1;\n            material = DIFFUSE;\n            vec3 worldPos = cur_pos + cur_dir*t;\n            color = texture(iChannel0, worldPos.xz).rgb;\n            normal = normalTable;\n        }\n        \n        vec3 normalBase;\n        t1 = traceBase(cur_pos, cur_dir, normalBase);\n        if (t1 < t) {\n            t = t1;\n            material = DIFFUSE;\n            vec3 worldPos = cur_pos + cur_dir*t;\n            color = texture(iChannel2, worldPos.xz * 10.0).rgb;\n            normal = normalBase;\n        }\n        \n        vec3 normalCrystal;\n        t1 = traceCrystal(cur_pos, cur_dir, normalCrystal);\n        if (t1 < t) {\n            t = t1;\n            normal = normalCrystal;\n            if (randVals.x < GLASS_R) {\n                material = REFLECTION;\n            } else {\n                material = REFRACTION;\n                if (dot(cur_dir, normal) > 0.0) {\n                    n_enter = AIR_N;\n                } else {\n                    n_enter = GLASS_N;\n                }\n            }\n        }\n        \n        if (iFrame % 4 == 0) {\n            int MAX_STEPS = 100;\n            float MARCH_SIZE = 0.1;\n            vec3 normalFire;\n            for (int i = 0; i < MAX_STEPS; ++i) {\n                vec3 worldPos = cur_pos + cur_dir*MARCH_SIZE*float(i);\n                if (signed_distance(worldPos) < 0.0) {\n                    t1 = MARCH_SIZE*float(i);\n                    if (t1 < t) {\n                        material = EMISSION;\n                        normalFire = distance_field_normal(worldPos);\n                        float noise_level = (FireRadius - length(worldPos))/noise_amplitude;\n                        color = palette_fire(noise_level);\n                    }\n                }\n            }\n        }\n        \n        vec3 normalLight1;\n        t1 = traceSphere(cur_pos, cur_dir, LIGHT1_POS, LIGHT1_RADIUS, normalLight1);\n        if (t1 < t) {\n            t = t1;\n            material = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = normalLight1;\n        }\n        \n        vec3 normalLight2;\n        t1 = traceSphere(cur_pos, cur_dir, LIGHT2_POS, LIGHT2_RADIUS, normalLight2);\n        if (t1 < t) {\n            t = t1;\n            material = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = normalLight2;\n        }\n        \n        vec3 normalLight3;\n        t1 = traceSphere(cur_pos, cur_dir, LIGHT3_POS, LIGHT3_RADIUS, normalLight3);\n        if (t1 < t) {\n            t = t1;\n            material = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = normalLight3;\n        }\n        \n        if (t != INF) {\n            vec3 worldPos = cur_pos + cur_dir*t;\n            if (material == EMISSION) {\n                fragColor.rgb = color;\n                break;\n            } else if (material == DIFFUSE) {\n                fragColor.rgb = calculateLight(worldPos, color, normal);\n                break;\n            } else if (material == REFLECTION) {\n                cur_dir = reflect(cur_dir, normal);\n                cur_pos = worldPos + cur_dir*EPS;\n            } else {\n                cur_dir = refraction(cur_dir, normal, n_cur, n_enter);\n                cur_pos = worldPos + cur_dir*EPS;\n                //swap n1, n2\n                n_cur = n_enter;\n            }  \n        } else {\n            fragColor.rgb = texture(iChannel1, cur_dir).rgb;\n        }\n    }  \n    \n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}