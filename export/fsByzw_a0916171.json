{"ver":"0.1","info":{"id":"fsByzw","date":"1643224927","viewed":49,"name":"Grid(y) Perfect Pistons 1","username":"panna_pudi","description":"Pistons,  but different","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["domainrepetition","pistons"],"hasliked":0,"parentid":"3t3BD2","parentname":"Perfect Pistons Example 1"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork, all credits to Blackle Mori\n\n//CC0 1.0 Universal https://creativecommons.org/publicdomain/zero/1.0/\n//To the extent possible under law, Blackle Mori has waived all copyright and related or neighboring rights to this work.\n\nfloat piston(vec2 p, float width, float height) {\n    p.x = abs(p.x) - width;\n    p.y -= height;\n    return length(max(p, 0.0)) + min(0.0, max(p.x, p.y));\n}\n\nfloat diplane(vec2 p, vec2 b, vec2 rd) {\n    vec2 dir = sign(rd) * b;\n    vec2 rc = (dir - p) / rd;\n    return max(rc.x, -rc.y);\n    // return rc.x + 0.001;\n}\n\nvec2 ray_dir;\nfloat scene(vec2 p) {\n    float width = 1.;\n    float id = round(p.x / width);\n    p.x = p.x - width * round(p.x / width);\n\n    float height = sin(iTime + id) * 2.;\n    \n    float me = piston(p, width / 2., height);\n    // float grid = diplane(p, vec2(width / 2., 2.), normalize(vec2(1., 1.)));\n    float grid = diplane(p, vec2(width / 2., 2.), vec2(sign(p.x), 1.));\n    \n    me = min(me, grid);\n    // me = max(me,p.y - 2.);\n    return me;\n}\n\nvec3 shadeDistance(float d) {\n    float dist = d * 100.0;\n    float banding = max(sin(dist), 0.0);\n    float strength = sqrt(1. - exp(-abs(d) * 2.));\n    float pattern = mix(strength, banding, (0.6 - abs(strength - 0.5)) * 0.3);\n    \n    vec3 color = vec3(pattern);\n    \n    color *= d > 0.0 ? vec3(1.0, 0.56, 0.4) : vec3(0.4, 0.9, 1.0);\n\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 mouse = (iMouse.xy - 0.5 * iResolution.xy) / iResolution.y;\n    uv *= 7.;\n    mouse *= 7.;\n\n    float mousedist = scene(mouse);\n    vec3 col = shadeDistance(scene(uv));\n    if (distance(mouse, uv) < abs(mousedist) && iMouse.z > 0.) col *= 0.5;\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}