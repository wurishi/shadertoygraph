{"ver":"0.1","info":{"id":"wtffDX","date":"1597989188","viewed":224,"name":"Drainage plus Deposition","username":"j91000","description":"like https://www.shadertoy.com/view/wlXBWX, but with sediment transport and deposition.\n\nblue is water flow. purple is sediment flow. Click to reset.","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["fluid","heightmap","erosion"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec4 getState(in vec2 p){\n    return texture(iChannel0,p);\n}\nfloat getLevel(in vec2 p){\n    vec4 state=getState(p);\n    float level=state.x+state.y+state.z;\n    return level;\n}\nfloat getW(in vec2 p){\n    vec4 state=getState(p);\n    float water=state.y;\n    return water;\n}\nfloat getH(in vec2 p){\n    vec4 state=getState(p);\n    float height=state.x;\n    return height;\n}\nfloat getS(in vec2 p){\n    vec4 state=getState(p);\n    float sediment=state.z;\n    return sediment;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 col;\n     //col.x = getH(uv);\n    \n    //if(getW(uv)>.0005){col.xy-=vec2(.5,.5);}\n    float tallness=pow(getH(uv),1.)*.2;\n    float wetness=pow(getW(uv),.25)*2.;\n    float fullness=pow(getS(uv),1.)*75.;\n    \n    //col.y=0.;\n    //vec4 colP=vec4(tallness,fullness,wetness,1.);\n    col=vec4(tallness);\n    col.xy-=vec2(wetness,wetness+fullness);\n    fragColor =col;//.02*getState(uv).xxxx;\n    //fragColor=vec4(tallness+fullness,tallness+fullness,tallness+wetness,1.);\n    //fragColor=vec4(getLevel(uv))/.5-10.*iMouse.x/iResolution.x;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float RAINFALL=0.000001;//0.000001;\nconst float EROSIONPOWER=.05;\nfloat settlingVel=0.5;\nconst float UPLIFT=0.;//.0001;\nfloat LUPLIFT=0.00;\n\nvec4 getState(in vec2 p){\n    return texture(iChannel0,p/iResolution.xy);\n}\nfloat getLevel(in vec2 p){\n    vec4 state=getState(p);\n    float level=state.x+state.y+state.z;\n    return level;\n}\n\nfloat getW(in vec2 p){\n    vec4 state=getState(p);\n    float water=state.y;\n    return water;\n}\nfloat getH(in vec2 p){\n    vec4 state=getState(p);\n    float height=state.x;\n    return height;\n}\nfloat getS(in vec2 p){\n    vec4 state=getState(p);\n    float sediment=state.z;\n    return sediment;\n}\nvec2[8] getNeighbs(vec2 p){\n    vec2 nw=vec2(-1.,-1.)+p;\n    vec2 n=vec2(0.,-1.)+p;\n    vec2 ne=vec2(1.,-1.)+p;\n    vec2 w=vec2(-1.,0.)+p;\n    vec2 e=vec2(1.,0.)+p;\n    vec2 sw=vec2(-1.,1.)+p;\n    vec2 s=vec2(0.,1.)+p;\n    vec2 se=vec2(1.,1.)+p;\n    return vec2[8](nw,n,ne,w,e,sw,s,se);\n}\nvec2 getLowestNeighb(in vec2 p){\n    vec2[8] neighbs=getNeighbs(p);\n    vec2 lowest=p;\n    for(int i=0;i<8;i++){\n        vec2 neighb=neighbs[i];\n        if(getLevel(neighb)<getLevel(lowest)){\n            lowest=neighb;\n        }   \n    }\n    return lowest;\n}\nvec2 Water_SedDrainage(vec2 p){\n    vec2 lowest=getLowestNeighb(p);\n    float dif=getLevel(p)-getLevel(lowest);\n    if(p.x<3.||p.y<3.||p.x>iResolution.x-3.||p.y>iResolution.y-3.){dif=0.3;}\n    //if(p.x>iResolution.x-3.){dif=0.0001;}\n    float water=getW(p);\n    float sed=getS(p);\n    float massTransport=max(0.,min(water+sed,dif/2.));\n    float waterDrain=0.;\n    float sedDrain=0.;\n    if(massTransport>0.){\n        waterDrain=(water/(water+sed))*massTransport;\n        sedDrain=(sed/(water+sed))*massTransport;\n    }\n    return vec2(waterDrain,sedDrain);\n}\nvec2 Water_SedInFlow(vec2 p){\n    float waterIn=0.;\n    float sedIn=0.;\n    vec2[8] neighbs=getNeighbs(p);//(nw,n,ne,w,e,sw,s,se) NW=== (-1 , -1)\n    for(int i=0;i<8;i++){\n        vec2 neighb=neighbs[i];\n        vec2 target=getLowestNeighb(neighb);\n        if(target==p){//if it points to p\n           vec2 wsDrain=Water_SedDrainage(neighb);\n            waterIn+=wsDrain.x;\n            sedIn+=wsDrain.y;\n            \n\n        }\n    }\n    return vec2(waterIn+RAINFALL,sedIn);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{//x coord is topo height. y coord is water height.\n     \n    vec2 pos=fragCoord;\n    vec2 lowest=getLowestNeighb(pos);\n    float dif=getLevel(pos)-getLevel(lowest);\n    if(pos.x<3.||pos.y<3.||pos.x>iResolution.x-3.||pos.y>iResolution.y-3.){dif=.3;}\n    //if(pos.x>iResolution.x-3.){dif=0.0001;}\n    vec2 inF=Water_SedInFlow(pos);\n    float inflow=inF.x;\n    float sedInflow=inF.y;\n    vec2 wsDrainage=Water_SedDrainage(pos);\n    \n        \n    vec4 finalC=getState(pos);//out state same as in state\n    float streamPower=inflow+sedInflow;\n    \n    float erosion=EROSIONPOWER*pow(streamPower,1./3.)*pow(dif,.666);//stream power law stuff\n    float deposition=0.;\n    float se=inF.y;\n    float wa=inF.x;\n    if((se+wa)>0.){\n        deposition=clamp(settlingVel/(streamPower/(getW(pos)+getS(pos)))*getS(pos)/((streamPower)),0.,getS(pos)-wsDrainage.y+sedInflow);\n    }\n    else{deposition=getS(pos);}\n    //deposition=se;\n    \n    finalC.x+=UPLIFT+deposition-erosion;\n    finalC.y+=inflow-wsDrainage.x;//water level changes by +in -out.\n    finalC.z+=erosion-deposition+sedInflow-wsDrainage.y;\n    if(iMouse.z>0.||iFrame<100){\n        finalC=5.*texture(iChannel3,pos/iResolution.xy).xxxx*vec4(1.,0.,0.,0.);\n        finalC+=vec4(.3,.0,0.,.0);\n    }\n    if(pos.x<3.||pos.y<3.||pos.x>iResolution.x-3.||pos.y>iResolution.y-3.){finalC.y=0.;finalC.z=0.;}\n    //if(pos.x>iResolution.x-3.){finalC.y=0.;finalC.z=0.;}\n    if(pos.x<iResolution.x/2.){finalC.x+=LUPLIFT;}\n    fragColor=finalC*vec4(1.,1.,1.,1.);\n}","name":"Buffer A","description":"","type":"buffer"}]}