{"ver":"0.1","info":{"id":"Dl23Wz","date":"1673221830","viewed":74,"name":"Interaction of Color - Ch4","username":"bestknighter","description":"This is a shader version of the exercises found on Chapter 4 of the book Interaction of Color, by Josef Albers. 50th Anniversary Edition.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["color","exercise","interactionsofcolor","colorstudy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/******************************************************\n * Feel free to play around with all 3 colors!        *\n * The colors below should be described using values  *\n * between 0 and 1.                                   *\n *                                                    *\n * The main goal of this exercise is to get a feel    *\n * for how much our color perception depends on       *\n * context.                                           *\n *                                                    *\n * As Albers himself says in his book:                *\n *                                                    *\n *  |  It should be clear that, with these exercises  *\n *  |  and all others to follow, whether or not we    *\n *  |  arrive at a pleasant or harmonious color       *\n *  |  combination is unimportant.                    *\n *                                                    *\n * Hint: At least for me, Hue, Saturation and         *\n * Brightness have each their on different behaviour. *\n ******************************************************/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 leftColor = vec3(\n        0.32, // HUE\n        0.40, // SATURATION\n        0.70  // BRIGHTNESS\n    );\n    vec3 rightColor = vec3(\n        0.38, // HUE\n        0.50, // SATURATION\n        0.40  // BRIGHTNESS\n    );\n    \n    \n    vec3 innerColor = vec3(\n        0.35, // HUE\n        0.60, // SATURATION\n        0.55  // BRIGHTNESS\n    );\n    \n    \n    fragColor = render(\n        fragCoord/iResolution.xy,\n        hsb2rgb(leftColor),\n        hsb2rgb(rightColor),\n        hsb2rgb(innerColor)\n    );\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/***\nMIT License\n\nCopyright (c) 2023 Gabriel F B Barbosa                                     \n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n***/\n\n// Although credits are not required,\n// they're strongly encouraged and very much appreciated!\n\n//  Function from IÃ±igo Quiles\n//  https://www.shadertoy.com/view/MsS3Wc\nvec3 hsb2rgb( in vec3 c ){\n    vec3 rgb = clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),\n                             6.0)-3.0)-1.0,\n                     0.0,\n                     1.0 );\n    rgb = rgb*rgb*(3.0-2.0*rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec4 over(vec4 under, vec4 over) {\n    return over + under*(1.0-over.a);\n}\n\nfloat smoothpass(float center, float thickness, float feather, float x) {\n    return smoothstep(center-feather, center, x + thickness/2.0) -\n           smoothstep(center, center+feather, x - thickness/2.0);\n}\n\nfloat innerSquare(vec2 uv){\n    return\n        (smoothpass(0.25, 0.1, 0.0005, uv.x)+smoothpass(0.75, 0.1, 0.0005, uv.x))\n        *\n        smoothpass(0.5, 0.333, 0.0005, uv.y);\n}\n\nvec4 render(vec2 uv, vec3 rgbOuterLeft, vec3 rgbOuterRight, vec3 rgbInner) {\n    vec3 outerColor = mix(rgbOuterLeft, rgbOuterRight, smoothstep(0.4995, 0.5005, uv.x));\n    vec4 composite = vec4(outerColor, 1.0);\n    \n    composite = over(composite, vec4(rgbInner, 1.0)*innerSquare(uv));\n    \n    return composite;\n}\n","name":"Common","description":"","type":"common"}]}