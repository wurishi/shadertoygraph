{"ver":"0.1","info":{"id":"Wtcfzl","date":"1613220046","viewed":79,"name":"RotoPlasma","username":"workingclasshacker","description":"a simple 2d plasma effect using trig to manipulate colors and motion.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float grid_rotation = 1.;\nfloat grid_distort = 0.1;\nfloat grid_resolution = .4;\n\nvec2 rotate(vec2 v, float a) {\n    return vec2(v.x*cos(a) + v.y*sin(a), -v.x*sin(a) + v.y*cos(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float aspect_ratio = iResolution.x / iResolution.y;\n    grid_rotation = (tan(.5*iTime)+1.0)/2.;\n    grid_resolution = 2.*cos(2.*iTime);\n    vec2 coord = (2.* fragCoord.xy / iResolution.xy - 1.) * vec2(aspect_ratio, 1.);\n    grid_distort = pow(sin(iTime),2.)+pow(cos(iTime),2.);\n    coord *= grid_resolution;\n    \n    coord = rotate(coord, grid_rotation*(1.+grid_distort*length(coord)));\n    \n    float grid_factor = cos(coord.x*10.) * cos(coord.y*10.)*sin(iTime*.2);\n\n    vec3 color = mix(vec3((1.+sin(5.*iTime))/2., (1.0+cos(.5*iTime))/2., (1.+sin(iTime))/2.), vec3(.0, sin(2.*iTime), cos(2.*iTime)), (1.+grid_factor)*0.5);\n    float ex = 2.2;\n    color = vec3(pow(color.x, ex), pow(color.y, ex), pow(color.z,ex));\n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}