{"ver":"0.1","info":{"id":"MllSR8","date":"1434525564","viewed":317,"name":"edgy norm","username":"introoutro","description":"was an edge detection thing, now is a normal map gen","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["normal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float u = uv.x;\n    float v = uv.y;\n    \n    float threshold = 0.085;\n    float px = 1.0/iChannelResolution[0].x;\n    \n    vec3 rgb = texture(iChannel0, uv).rgb;\n    vec3 bw = vec3(1);\n    vec3 bw2 = vec3(1);\n\n    vec3 rgbUp = texture(iChannel0, vec2(u,v+px)).rgb;\n    vec3 rgbDown = texture(iChannel0, vec2(u,v-px)).rgb;\n    vec3 rgbLeft = texture(iChannel0, vec2(u+px,v)).rgb;\n    vec3 rgbRight = texture(iChannel0, vec2(u-px,v)).rgb;\n\n    float rgbAvr = (rgb.r + rgb.g + rgb.b) / 3.;\n    float rgbUpAvr = (rgbUp.r + rgbUp.g + rgbUp.b) / 3.;\n    float rgbDownAvr = (rgbDown.r + rgbDown.g + rgbDown.b) / 3.;\n    float rgbLeftAvr = (rgbLeft.r + rgbLeft.g + rgbLeft.b) / 3.;\n    float rgbRightAvr = (rgbRight.r + rgbRight.g + rgbRight.b) / 3.;\n\n    float dx = abs(rgbRightAvr - rgbLeftAvr);\n    float dy = abs(rgbUpAvr - rgbDownAvr);\n    \n    if (dx > threshold)\n        bw = vec3(1);\n    else if (dy > threshold)\n        bw = vec3(1);\n    else\n        bw = vec3(0);\n    \n    // inigo code!\n    // o.5 + 0.5 * acts as a remapping function\n    bw = 0.5 + 0.5*normalize( vec3(rgbRightAvr - rgbLeftAvr, 100.0*px, rgbUpAvr - rgbDownAvr) ).xzy;\n    \n    fragColor = vec4(bw,0);\n}","name":"","description":"","type":"image"}]}