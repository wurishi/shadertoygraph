{"ver":"0.1","info":{"id":"ltGGzD","date":"1473498051","viewed":212,"name":"Identifying Wood","username":"ollj","description":"identifying wood:\n\noptimized variant of \nhttps://www.shadertoy.com/view/Mty3RW\n\neffects like drawing circle ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["texture","wood"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//this is my modified backup of https://www.shadertoy.com/view/Mty3RW\n//it is slighly optimized.\n//wood() texture function is shortened to a 1-liner that returns a float.\n//everything has been made non-branching.\n//everything has been made using less diensions.\n//everything is made optional by #define's\n//\n//this wood texture is intended to still look like wood in low resolution\n//for higher resolutions this looks rather bland.\n\n//comment out to remove some optional effects.\n\n//#define pixelate\n//make pixels 20px tall and wide\n\n//#define circulate\n//draw inverted black corcle.\n\n#define shine\n//multiply fyctor by inverse square (!) distance from center.\n\n//shine makes the blue color part multiplied by *(1-distance(center))\n//it is neglible since blue is 0.1 in a wooden brown color.\n//this is likely aa case of muisunderstanding the task.\n//it makes more sense to have a shine on .rbg than only on .b\n//as done by shinergb\n#define shinergb\n//uncommenting shinergb makes it act like https://www.shadertoy.com/view/Mty3RW\n\n//----------\n\n//NOTE- I'M LOOKING TO USE THIS IN A GAME, AND IN NO WAY WILL REIMBURSE YOU IF YOU HELP ME!\n//lol sorry, just don't want to get into legal trouble if I end up using/referencing something you send... :P\n\n//PLEASE EDIT THE FUNCTION \"getColor\"\n//I'm looking for a function that can take in an arbitrary 3d coordinate\n//(coordinate guaranteed to be within the range of -10 to 10ish)\n//and outputs a color in such a way that the surface will look like wood.\n//(note that this particular example will just use positions on the unit circle)\n\n#define GRAIN vec2(1.,16.)\n#define BANDS 5.0\n\nfloat random(in vec2 st){return fract(sin(dot(st,vec2(12.9898,78.233)))*43758.5453123);}\n\n// Based on Morgan McGuire @morgan3d\n// https://www.shadertoy.com/view/4dS3Wd\nfloat noise(in vec2 s){vec2 i=floor(s);vec2 f=fract(s);\n #define ri random(i\n float b=ri+vec2(1.,0.));float a=ri);\n float c=ri+vec2(0.,1.));\n float d=ri+vec2(1.,1.));vec2 u=f*f*(3.-2.*f);\n return mix(a,b,u.x)+((c-a)*(1.-u.x)+(d-b)*u.x)*u.y;}\n\n//return woodgrain greyscale;  greyscale has more utility.\nfloat wood(vec2 p){return(1.-clamp(float(int(fract(noise(p*GRAIN))*BANDS))/BANDS,0.,1.)*.75+.1);}\n\nvoid mainImage( out vec4 r, in vec2 v ){//float ratio = iResolution.x/iResolution.y;\n v=2.*v.xy/iResolution.xy-vec2(1.,1.);\n v.x*=iResolution.x/iResolution.y;//if(ratio < 1.) v.y/=ratio;else v.x*=ratio;\n#ifdef pixelate\n v=floor(v* 20.)/20.;//pixelate\n#endif\n vec3 woodColor=vec3(.5,.3,.1);\n float s=1.;\n#ifdef shine\n s=1.5-length(v)*length(v);\n#endif\n#ifdef shinergb\n r=vec4(woodColor*wood(v)*s,1.);//inverse distance to center affects all colors.\n#else\n r=vec4(woodColor.xy*wood(v),woodColor.z*s,1.);//blue is unaffected by wood(), only blue is affected by distance to center. \n#endif \n#ifdef circulate\n r*=step(0.,1.-length(v));//circle\n#endif\n}\n","name":"Image","description":"","type":"image"}]}