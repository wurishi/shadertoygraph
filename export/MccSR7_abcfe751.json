{"ver":"0.1","info":{"id":"MccSR7","date":"1713718944","viewed":42,"name":"India National Flag","username":"sergiorugani","description":"This shader visually represents the Indian flag in motion, using accurate color specifications and dimensions sourced from the flag's Wikipedia page.\n\nhttps://en.wikipedia.org/wiki/Flag_of_India","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["flag","vignette","rot","isoscelestriangle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926535\n#define ROT(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n#define INDIA_SAFFRON vec3(255, 103, 31) / 255.0\n#define INDIA_GREEN vec3(4, 106, 56) / 255.0\n#define NAVY_BLUE vec3(6, 3, 141) / 255.0\n\nfloat vignette(vec2 U)\n{\n    return 16. * U.x * (1. - U.x) * U.y * (1. - U.y);\n}\n\n// iq's 2d sdf for iscosceles triangles (https://www.shadertoy.com/view/MldcD7)\nfloat isoscelesTriangle(in vec2 q, in vec2 p)\n{\n    p.y -= .5;\n    p.x =  abs(p.x);\n\tvec2 a = p - q * clamp(dot(p, q) / dot(q, q), 0., 1.);\n    vec2 b = p - q * vec2(clamp(p.x / q.x, 0., 1.), 1.);\n    float s = -sign(q.y);\n    vec2 d = min(vec2(dot(a, a), s * (p.x * q.y - p.y * q.x)),\n                  vec2(dot(b, b), s * (p.y - q.y)));         \n\treturn -sqrt(d.x) * sign(d.y);\n}\n\nfloat Chakra(vec2 uv)\n{\n    // add rotation\n    // uv = ROT(sin(iTime * .2) * PI) * uv;\n    float ir = 0.16 / 6.;\n    float or1 = 0.925 / 6.;\n    float or2 = 0.0625 / 6.;\n\tfloat outerCircle = smoothstep(0.001, 0.0, abs(length(uv) - (or1 - or2)) - or2);\n    float innerCircle = smoothstep(ir + 0.001, ir, length(uv));\n    float radius = 0.11;\n    \n    float spokes = 0., spokeThickness = .0035, dots = 0., theta = 2. * PI / 24.;\n    for (int i = 0; i < 24; ++i)\n    {\n        vec2 suv = ROT(float(i) * theta) * uv;\n        suv.y += radius + 0.368;\n        \n        // shorter triangle\n        spokes += smoothstep(.001, .0,\n\t\t\t\t\tisoscelesTriangle(vec2(spokeThickness, radius * 0.333), suv));\n                    \n        // longer triangle\n        suv.y += radius - 0.22;\n        spokes += smoothstep(.001, .0,\n\t\t\t\t\tisoscelesTriangle(vec2(spokeThickness, -radius * 0.666), suv));\n        \n        // dots\n\t\tvec2 nuv = ROT(float(i) * theta + theta * .5) * uv;\n        float nr = 0.007 / 2.0;\n        nuv.y -= 0.133;\n        dots += smoothstep(nr + 0.001, nr, length(nuv));\n    }\n    \n    float chakra = innerCircle + outerCircle + spokes + dots;\n    return max(0.0, 1.0 - chakra);\n}\n\nvec3 Flag(vec3 color, vec2 uv, float aspectRatio) {\n    vec2 center = vec2(0.5);\n    \n    // Calculate dynamic parameter t based on texture coordinates and time\n    float t = uv.x * 4.0 - 5.0 * iTime + uv.y * 5.0;\n    // Apply a small vertical wave distortion to uv.y based on sin function of t\n    uv.y += sin(t) * 0.0125;\n    // Apply a minimal horizontal wave distortion to uv.x based on cos function of t\n    uv.x += cos(t) * 0.001;\n    \n    float w = 1.0 / aspectRatio * 1.5;\n    float h = 1.0; \n\n    vec2 size = vec2(w, h);\n\n    if (\n        uv.x > center.x - size.x * 0.5 && \n        uv.x < center.x + size.x * 0.5 &&\n        uv.y > center.y - size.y * 0.5 && \n        uv.y < center.y + size.y * 0.5\n    ) {\n        float d = (1.0 - h) / 2.0;\n        // draw orange stripe\n        color = mix(\n            vec3(1), \n            INDIA_SAFFRON, \n            step(d + h * (2.0 / 3.0), uv.y)\n        );\n        // draw green stripe\n        color = mix(\n            color, \n            INDIA_GREEN, \n            1.0 - step(d + h * (1.0 / 3.0), uv.y)\n        );\n        \n        // add highlights and shadows\n        color += sin(t) * 0.15;                           \n        color *= 0.75 + cos(t) * 0.15;\n    \n        // draw chakra\n        vec2 cuv = uv - vec2(0.5);\n        cuv.x *= aspectRatio;\n        color = mix(NAVY_BLUE, color, Chakra(cuv));\n    }\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspectRatio = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    // background\n    vec3 color = mix(vec3(0.129,0.090,0.071), vec3(0.035,0.306,0.129), sqrt(uv.y + uv.x) * 0.5);\n    \n    // draw flag\n    color = Flag(color, uv, aspectRatio);\n    \n    // add vignette\n    color *= 1.3 - 0.06 * exp2(-1.75 * vignette(uv)); \n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}