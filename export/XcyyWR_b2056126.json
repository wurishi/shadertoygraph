{"ver":"0.1","info":{"id":"XcyyWR","date":"1731672172","viewed":27,"name":"ShaderAmp ðŸŽ¶ Rainbow soundviz ðŸŽ¶","username":"ArthurTent","description":"Ok, now it's time to play with music vis :)\nExample on YT: https://www.youtube.com/watch?v=8FmvUGyTrwc\nShaderAmp version is currently available in 'dev/more-shaders' branch.\nhttps://github.com/ArthurTent/ShaderAmp/tree/dev/more-shaders/dist/shaders","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["circles","musicvisualizer"],"hasliked":0,"parentid":"ttfGzH","parentname":"ðŸŽ¶ Rainbow soundviz ðŸŽ¶"},"renderpass":[{"inputs":[{"id":"XdfGzn","filepath":"/media/a/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","previewfilepath":"/media/ap/894a09f482fb9b2822c093630fc37f0ce6cfec02b652e4e341323e4b6e4a4543.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ttfGzH\n// Created by avin\n// Modified by Arthur Tent\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// https://creativecommons.org/licenses/by-nc-sa/3.0/\n\n\n#define PI2 6.2831852\n#define S(a,b,t) smoothstep(a,b,t)\n#define FFT(a) pow(texelFetch(iChannel0, ivec2(a, 0), 0).x, 5.)\nfloat snd = 0.;\nconst float PI = 3.1415926;\n// MIT Licensed hash From Dave_Hoskins (https://www.shadertoy.com/view/4djSRW)\nvec3 hash33(vec3 p)\n{\n    p = fract(p * vec3(443.8975,397.2973, 491.1871));\n    p += dot(p.zxy, p.yxz+19.27);\n    return fract(vec3(p.x * p.y, p.z*p.x, p.y*p.z));\n}\n\nvec3 stars(in vec3 p)\n{\n    vec3 c = vec3(0.);\n    float res = iResolution.x*0.8;\n    \n\tfor (float i=0.;i<4.;i++)\n    {\n        vec3 q = fract(p*(.15*res))-0.5;\n        //q*= snd/10.;\n        vec3 id = floor(p*(.15*res));\n        vec2 rn = hash33(id).xy;\n        float c2 = 1.-smoothstep(0.,.6,length(q));\n        c2 *= step(rn.x,.0005+i*i*0.001);\n        c += c2*(mix(vec3(1.0,0.49,0.1),vec3(0.75,0.9,1.),rn.y)*0.25+0.75);\n        p *= 1.4;\n    }\n    return c*c*.65;\n}\nvoid camera(vec2 fragCoord, out vec3 ro, out vec3 rd, out mat3 t)\n{\n    float a = 1.0/max(iResolution.x, iResolution.y);\n    //rd = normalize(vec3((fragCoord - iResolution.xy*0.5)*a, 0.5));\n    rd = normalize(vec3(fragCoord, 1.0));\n\n    ro = vec3(0.0, 0.0, -15.);\n\n    //float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y));\n    float ff = min(1.0, step(0.001, iMouse.x) + step(0.001, iMouse.y))+sin(iTime/20.);\n    vec2 m = PI*ff + vec2(((iMouse.xy + 0.1) / iResolution.xy) * (PI*2.0));\n    //m.y = -m.y;\n    m.y = sin(m.y*0.5)*0.3 + 0.5;\n\n    //vec2 sm = sin(m)*sin(iTime), cm = cos(m)*(1.+sin(iTime));\n    vec2 sm = sin(m)*(1.+sin(iTime/10.)/2.), cm = cos(m);\n    mat3 rotX = mat3(1.0, 0.0, 0.0, 0.0, cm.y, sm.y, 0.0, -sm.y, cm.y);\n    mat3 rotY = mat3(cm.x, 0.0, -sm.x, 0.0, 1.0, 0.0, sm.x, 0.0, cm.x);\n\n    t = rotY * rotX;\n\n    ro = t * ro;\n    rd = t * rd;\n\n    rd = normalize(rd);\n}\n\n#define hue(h)clamp(abs(fract(h + vec4(3, 2, 1, 0) / 3.0) * 6.0 - 3.0) - 1.0 , 0.0, 1.0)\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    int max_freq = 100;\n    for(int i=1; i < max_freq; i++){\n        snd +=FFT(i)*float(i);\n    }\n    snd /=float(max_freq*20);\n    vec2 cam_uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n    \n\t//camera + rd for stars\n    vec3 ro = vec3(0.0);//rd = vec3( 0.0 );\n\tvec3 rd = normalize(vec3(cam_uv,-1.5));\n    mat3 t3 = mat3(1.0);\n\tcamera(cam_uv, ro, rd, t3);\n     vec2 uv = (fragCoord - iResolution.xy * 0.5) / iResolution.y;\n\n    float CIRCLES = 20.0;\n    float cS = 0.375;\n\n    float sm = 1.0 / iResolution.y * 2.0; // smooth\n    float ps = 1.0 / iResolution.y * sqrt(iResolution.y) * 0.225; // circle thin\n\n    float d = length(uv);\n\n    float a = atan(uv.y, uv.x);\n    a = a < 0.0 ? PI + (PI - abs(a)) : a;\n\n    float lPos = a /PI2;\n\n    float m = 0.0;\n    float partSize = 1.0 / CIRCLES;\n    vec3 col;\n    for(float i = CIRCLES; i > 1.0; i -= 1.0) {\n\n        float ilPos = fract(lPos + i*0.1 + iTime * 0.1);\n        float cPos = partSize * i + ilPos * partSize;\n        float invPos = partSize * (i + 1.0) - ilPos * partSize;\n        float nzF = (1.0 - ilPos);\n        float mP0 = texture(iChannel0, vec2(partSize * i, 0.0)).x;\n        float mP = texture(iChannel0, vec2(cPos, 0.0)).x;\n        float mPInv = texture(iChannel0, vec2(invPos, 0.0)).x;\n\n        mP = (mP + mPInv) / 2.0;\n\n        float rDiff = i*(1.0 / CIRCLES * 0.35);\n        float r = mP * (1.0 / CIRCLES * 3.0) - rDiff;\n\n        float subm = smoothstep(cS - ps + r, cS - ps + sm + r, d) * smoothstep(cS + r, cS - sm + r, d);\n\n        if (subm > 0.0) {\n            col = hue(i / CIRCLES * 0.5 + iTime * 0.05 + mP0 * 0.84).rgb;\n        }\n\n        m += subm;\n    }\n\n    m = clamp(m, 0.0, 1.0);\n\n    float r = (sin(iTime * 0.5) * 0.5 + 0.5);\n    float b = (cos(iTime * 0.5) * 0.5 + 0.5);\n    vec3 backCol = vec3(r, 0.0, b) * length(uv * 0.75) * 0.5;\n\n    col = mix(backCol, col, m);\n\n    fragColor = vec4(col, 1.0);\n    rd.x+=sin(iTime/1000.)*2.;\n\tvec3 bg = stars(rd)*(1.+30.*snd);\n\tfragColor+=vec4(bg, 1.);\n}","name":"Image","description":"","type":"image"}]}