{"ver":"0.1","info":{"id":"mstcW4","date":"1695086479","viewed":72,"name":"debugging triangular coordinates","username":"jt","description":"Just a pattern to visualize / debug triangular coordinates (e.g. to check if different methods produce the same result).","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["coordinates","triangular","debugging"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/mstcW4 debugging triangular coordinates, written 2023 by jt\n\n// Just a pattern to visualize / debug triangular coordinates (e.g. to check if different methods produce the same result).\n\n// tags: coordinates, triangular, debugging\n\n// The MIT License\n// Copyright (c) 2023 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// https://www.shadertoy.com/view/DtjyWD integer division - rounding down\nivec3 div_floor(ivec3 a, int b) // vector version thanks to Fabrice\n{\n    ivec3  S = (sign(abs(a*b))-sign(a*b))/2; // 0 if a*b >= 0\n    return S * ((1 - abs(a)) / abs(b) - 1)+(1-S)*(a / b); // emulates ()?:\n}\n\nivec3 mod_positive(ivec3 a, int b)\n{\n    return a - div_floor(a, b) * b;\n}\n\nivec3 hexagonal(ivec3 i) // group triangular coordinates to hexagonal coordinates (jt)\n{\n    i = div_floor(i.zxy-i.yzx+ivec3(0,-1,+1),3); // NOTE: roll 0,-1,+1 to align hexagons differently\n    return i;\n    //i = div_floor(i.zxy-i.yzx,3);\n    //return i.yzx - i.zxy;\n}\n\n#define ESSENTIAL_MATRIX\n\nvoid mainImage(out vec4 o, vec2 I)\n{\n    vec2 R = iResolution.xy;\n    I = (2. * I - R) / R.y; // mind aspect ratio\n    float r = sqrt(2.), s = sqrt(3.), rs = r*s, e = 1./R.y*2.*s;\n#ifdef ESSENTIAL_MATRIX\n    // essential 2x3 matrix, omitting last row, requires adding (1/3,1/3,1/3)\n    // because T*vec3(0,0,-1/sqrt(3.0)) == vec3(1.0/3.0) captures the information of the omitted row.\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat2x3 T =\n        mat2x3\n        (\n            normalize(vec3(-1,+1, 0)),\n            normalize(vec3(-1,-1,+2))\n        );\n    //vec3 t = T*(I*2.*3.*2.-vec2(0,1/*offset*/))/rs + 1./3.0; // origin offset on y axis\n    vec3 t = T*(I*2.*3.*2.)/rs-vec3(-1,-1, 2)/rs/rs + 1./3.0; // origin offset on y axis\n    //vec3 t = T*I*4.*s/r + 1./3.0; // center at (0,0,0)\n    //vec3 t = T*I*rs + 1./3.0; // center at (0,0,0) variant\n\n#else\n    // full 3x3 matrix\n    // coordinate-system along plane orthogonal to diagonal (1,1,1)\n    mat3 T =\n        mat3\n        (\n            normalize(vec3(-1,+1, 0)),\n            normalize(vec3(-1,-1,+2)),\n            normalize(vec3(-1,-1,-1))\n        );\n    //vec3 t = T*vec3((I*6.-vec2(0,1))/r,-1)/s;\n    //vec3 t = T*vec3(I*rs-vec2(0,1)/rs,-1.0/s);\n    //vec3 t = T*vec3(I*rs-vec2(0,1)/rs, 0) + 1./3.0;\n    vec3 t = 2.0*T*vec3(I*rs,0)-T*vec3(0,1,0)/rs + 1./3.0;\n    //vec3 t = T*vec3((I-vec2(0,1)/rs/rs),-1.0/s/rs)*rs;\n#endif\n    ivec3 m = ivec3(floor(t));\n    //m = hexagonal(m);\n    bool flip = m.x + m.y + m.z == 0;\n    t = fract(t);\n    float c = smoothstep(.5-e, .5+e, 1. - length(t-.5));\n    if(flip) c = 1. - c;\n    o = vec4(c*vec3(mod_positive(m, 4))/float(4-1),1);\n    o = sqrt(vec4(o)); // gamma\n}\n","name":"Image","description":"","type":"image"}]}