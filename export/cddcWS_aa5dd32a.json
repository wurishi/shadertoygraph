{"ver":"0.1","info":{"id":"cddcWS","date":"1695410104","viewed":13,"name":"dsort","username":"01000001","description":"dumb method... fast ish but fails to converge and only works for uniform distribution\n","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["thing"],"hasliked":0,"parentid":"md3yDS","parentname":"fsort"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, vec2 U ){\n    \n    vec2 r = iResolution.xy;\n    vec2 uv = U/r;\n    \n\n    O = vec4(smoothstep(1./r.y, 0., abs(texture(iChannel0, vec2(uv.x, 0)).x-uv.y)));\n    \n    // Smoothstep is an intentional design choice to give randomized brightness to particles\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const uint k = 1103515245U;\nvec3 hash( uvec3 x )\n{\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    x = ((x>>8U)^x.yzx)*k;\n    \n    return vec3(x)*(1.0/float(0xffffffffU));\n}\n\nconst int p = 5;\nvec3 nhash( uvec3 x ){\n    vec3 t = vec3(0);\n    for(int i = p; i-->0;){\n        t += hash(x + uvec3(i));\n    }\n    t /= float(p);\n    return t;\n}\n\nvoid mainImage( out vec4 O, vec2 U ){\n    if (U.y < 1.){\n        vec2 r = iResolution.xy;\n        if (iFrame < 5){\n            O = vec4(0);\n            O.x = hash(uvec3(U.x, iDate.w, iDate.z)).x;\n        } else {\n            O = texture(iChannel0, U/iResolution.xy);\n         \n            // Single thread. Do whatever you want, then set c1 and c2\n            // Sort here\n            \n            // Do the square thingy that works fast\n            \n            int x = int(U.x);\n            int w = int(r.x);\n\n\n            vec3 h = hash(uvec3(iFrame, iTime, -iFrame));\n            int c = int(h.x * r.x);\n            \n            float t = texelFetch(iChannel0, ivec2(c, 0), 0).x\n                - float(c)/r.x;\n            int c2 = (c + \n                int(\n                    float(w>>1)*\n                        abs(t)\n                ) + iFrame%4\n            )%w;\n            \n\n            if (c2 < c){ c ^= c2; c2 ^= c; c^= c2; }// C2 always bigger\n            if (x==c){\n                float n = texelFetch(iChannel0, ivec2(c2, 0), 0).x;\n                if ( n < O.x) \n                    O.x = n;\n            }\n            \n            if (x==c2){\n                float n = texelFetch(iChannel0, ivec2(c, 0), 0).x;\n                if (n > O.x) \n                    O.x = n;\n            }\n        }\n    } else {\n        O = vec4(0);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}