{"ver":"0.1","info":{"id":"wsKXWw","date":"1574197115","viewed":433,"name":"countdown timer WIP","username":"ogu","description":"WIP with some of the code taken from https://www.shadertoy.com/view/lsXXzN","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["clock"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"    vec2 FragCoord;\n    vec4 FragColor;\n\n    float PI = 3.14159265359;\n\n    float segment(vec2 uv, bool On) {\n        return (On) ?  (1.-smoothstep(0.08,0.09+float(On)*0.02,abs(uv.x)))*\n                       (1.-smoothstep(0.46,0.47+float(On)*0.02,abs(uv.y)+abs(uv.x)))\n                    : 0.;\n    }\n\n    float digit(vec2 uv,int num) {\n        float seg= 0.;\n        seg += segment(uv.yx+vec2(-1., 0.),num!=-1 && num!=1 && num!=4                    );\n        seg += segment(uv.xy+vec2(-.5,-.5),num!=-1 && num!=1 && num!=2 && num!=3 && num!=7);\n        seg += segment(uv.xy+vec2( .5,-.5),num!=-1 && num!=5 && num!=6                    );\n        seg += segment(uv.yx+vec2( 0., 0.),num!=-1 && num!=0 && num!=1 && num!=7          );\n        seg += segment(uv.xy+vec2(-.5, .5),num==0 || num==2 || num==6 || num==8           );\n        seg += segment(uv.xy+vec2( .5, .5),num!=-1 && num!=2                              );\n        seg += segment(uv.yx+vec2( 1., 0.),num!=-1 && num!=1 && num!=4 && num!=7          );\t\n        return seg;\n    }\n\n    float showNum(vec2 uv,int nr, bool zeroTrim) { // nr: 2 digits + sgn . zeroTrim: trim leading \"0\"\n        if (abs(uv.x)>2.*1.5 || abs(uv.y)>1.2) return 0.;\n\n        if (nr<0) {\n            nr = -nr;\n            if (uv.x>1.5) {\n                uv.x -= 2.;\n                return segment(uv.yx,true); // minus sign.\n            }\n        }\n\n        if (uv.x>0.) {\n            nr /= 10; if (nr==0 && zeroTrim) nr = -1;\n            uv -= vec2(.75,0.);\n        } else {\n            uv += vec2(.75,0.); \n            nr = int(mod(float(nr),10.));\n        }\n\n        return digit(uv,nr);\n    }\n\n    float dots(vec2 uv, int dot) { // dot: bit 0 = bottom dot; bit 1 = top dot\n        float point0 = float(dot/2),\n              point1 = float(dot)-2.*point0; \n        uv.y -= .5;\tfloat l0 = 1.-point0+length(uv); if (l0<.13) return (1.-smoothstep(.11,.13,l0));\n        uv.y += 1.;\tfloat l1 = 1.-point1+length(uv); if (l1<.13) return (1.-smoothstep(.11,.13,l1));\n        return 0.;\n    }\n\n    #define STEPX .875\n    #define STEPY 1.5\n    float _offset=0.; // auto-increment useful for successive \"display\" call\n\n    // 2digit int + sign\n    bool display(vec2 pos, float scale, float offset, int number, int dot) { // dot: draw separator\n        vec2 uv = FragCoord.xy/iResolution.y;\n        uv = (uv-pos)/scale*2.; \n        uv.x = .5-uv.x + STEPX*offset;\n        uv.y -= 1.;\n\n        float seg = showNum(uv,number,false);\n        offset += 2.;\n\n        if (dot>0) {\n            uv.x += STEPX*offset; \n            seg += dots(uv,dot);\n            offset += 2.;\n        }\n\n        FragColor += vec4(seg);  // change color here\n        _offset = offset;\n        return (seg>0.);\n    }\n\n    // 2.2 float + sign\n    bool display(vec2 pos, float scale, float offset, float val) { // dot: draw separator\n        if (display( pos, scale, 0., int(val), 3)) return true;\n        if (display( pos, scale, _offset, int(fract(abs(val))*100.), 0)) return true;\n        return false;\n    }\n\n    bool circle(vec2 pos, float scale, vec2 offset, float filled) {\n        float x = pos.x - offset.x;\n        float y = pos.y - offset.y;\n\n        if (x*x + y*y < scale) {\n            if (filled < 0.25) {\n                float part = PI/2. - filled*2.*PI;\n                if (atan(y/x) > part  && x > 0. && y > 0. ) {\n                    return true;   \n                }\n                return false;\n            }\n            if (filled < 0.5) {\n                float part = (filled-0.25)*2.*PI;\n                if (atan(-y/x) < part  && x > 0. && y < 0. ) {\n                    return true;   \n                }\n                if ( x > 0. && y > 0.) return true;\n                return false;\n            }\n            if (filled < 0.75) {\n                float part = PI/2. - (filled - 0.5) * 2. * PI;\n                if (atan(-y/-x) > part  && x < 0. && y < 0. ) {\n                    return true;   \n                }\n                if ( x > 0. ) return true;\n                return false;\n            }\n            if (filled < 1.) {\n                float part = (filled - 0.75) * 2. * PI;\n                if (atan(y/-x) < part  && x < 0. && y > 0. ) {\n                    return true;   \n                }\n                if ( x > 0. || x < 0. && y < 0. ) return true;\n                return false;\n            } \n        }\n        return false;\n    }\n\n\n    void mainImage( out vec4 fragColor, in vec2 fragCoord )\n    {\n        FragCoord=fragCoord;\n        vec2 uv = fragCoord.xy/iResolution.y;\n        vec4 mouse = iMouse/iResolution.y;\n        FragColor = vec4(0.);\t\n\n        vec2 pos ; \n        float scale = 0.25;\n        if (circle( uv, 0.2, vec2(0.88,0.525), float(int(iTime) % 360)/360.)) {\n            fragColor=vec4(1.,1.,1.,1);\t\n        };\n        pos = vec2(.60,.4);\n        if (display( pos, scale, 0.,iTime/100.)) { \n            fragColor=vec4(1. - fragColor.x,1. - fragColor.y,1. - fragColor.z,1);\n            return;\n        }\n    }\n\n","name":"Image","description":"","type":"image"}]}