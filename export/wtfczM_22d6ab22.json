{"ver":"0.1","info":{"id":"wtfczM","date":"1591658981","viewed":64,"name":"Rotating pentagons!","username":"DavidMazarro","description":"weeeeeeee","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rotation","alpha","pentagon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define K 40.0\n#define E 2.7182818285\n#define PI 3.14159265359\n\nfloat periodicSigmoid(float t, float speed, float steepness) {\n    float t_0_1 = fract(t*speed);\n    float valueSigmoid = 1.0/(1.0 + pow(E, -K*(t_0_1 - 0.25)));\n    return t_0_1 < 0.5 ? valueSigmoid : 1.0/(1.0 + pow(E, -K*(-t_0_1 + 1.0 - 0.25)));\n}\n\nvec4 colorShape(vec4 pointInShape, vec3 color, float alpha) {\n    return pointInShape.a == 1.0 ? vec4(color, alpha) : pointInShape;\n}\n\nmat2 rotate(float angle){\n    return mat2(cos(angle), -sin(angle), sin(angle), cos(angle));\n}\n\nvec4 polygonshape(float t, float initRot, vec3 position, float radius, float sides){\n    position = position * 2.0 - 1.0;\n    position.xy *= rotate(initRot);\n    float speed = 0.08;\n    float nTurns = 3.0;\n    float a = nTurns*(2.0*PI)*periodicSigmoid(t, speed, K);//clamp(speed*0.2, 0.0, 10.0);\n    position.xy *= rotate(a);\n    float angle = atan(position.x, position.y);\n    float slice = PI * 2.0 / sides;\n    float isInPoly = step(radius, cos(floor(0.5 + angle / slice) * slice - angle) * length(position.xy));\n    return isInPoly == 1.0 ? vec4(vec3(1.0), 0.0) : vec4(vec3(0.0), 1.0);\n}\n\nvec4 alphaBlend(vec4 bg, vec4 fg) {\n    vec4 outFrag;\n    outFrag.a = fg.a + bg.a*(1.0 - fg.a);\n    outFrag.rgb = (fg.rgb*vec3(fg.a) + bg.rgb*vec3(bg.a)*(1.0 - vec3(fg.a))) / vec3(outFrag.a);\n    return outFrag;\n}\n\nfloat scaleRadius(float t, float rmin, float rmax) {\n    return abs(sin(t))*(rmax - rmin) + rmin;\n}\n\nmat2 scaleMatrix(float xfactor, float yfactor) {\n    return mat2(xfactor, 0, 0, yfactor);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    vec3 position = gl_FragCoord.xyz / iResolution;\n    \n    mat2 scaleFragMat;\n    float scaleFactor;\n    const float offset = -0.33333333;\n    \n    if (iResolution.x > iResolution.y) {\n        scaleFactor = iResolution.x / iResolution.y;\n        scaleFragMat = scaleMatrix(scaleFactor, 1.0);\n        position.xy *= scaleFragMat;\n        position.x += offset;\n    } else {\n        scaleFactor = iResolution.y / iResolution.x;\n        scaleFragMat = scaleMatrix(1.0, scaleFactor);\n        position.xy *= scaleFragMat;\n        position.y += offset;\n    }\n\n    vec4 background = vec4(1.0);\n\n    vec3 black = vec3(0.0);\n    vec3 red = vec3(1.0, 0.1725, 0.1725);\n    vec3 purple = vec3(0.5882, 0.2706, 0.9059);\n\n    float r1 = scaleRadius(iTime, 0.5, 0.7);\n    float r2 = scaleRadius(iTime+0.2, 0.4, 0.65);\n    float r3 = scaleRadius(iTime+0.5, 0.3, 0.5);\n\n    vec4 polygon1 = polygonshape(iTime, 0.0, position, r1, 5.0);\n    vec4 polygon2 = polygonshape(iTime+0.2, PI, position, r2, 5.0);\n    vec4 polygon3 = polygonshape(iTime+0.4, 0.0, position, r3, 5.0);\n\n    vec4 polyBlack = colorShape(polygon1, black, 1.0);\n    vec4 polyRed = colorShape(polygon2, red, 0.9);\n    vec4 polyPurp = colorShape(polygon3, purple, 0.8);\n\n    fragColor = alphaBlend(background,\n    alphaBlend(polyBlack, alphaBlend(polyRed, polyPurp)));\n\n}","name":"Image","description":"","type":"image"}]}