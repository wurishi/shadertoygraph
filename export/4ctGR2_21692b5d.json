{"ver":"0.1","info":{"id":"4ctGR2","date":"1711904874","viewed":29,"name":"Ripple tunnel","username":"IanDotVos","description":"Sort of accidental result of a project that didn't turn out well involving raymarching.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","abstract"],"hasliked":0,"parentid":"Xct3RB","parentname":"Infinite Tube"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float near = 4.0;\nfloat sides = 6.0;\nint samples = 150; //Reduce this number if you have performance issues!!\n\n//I'd rather not explain\nvec4 color_gradient[5];\n\nvec4 colors(float t)\n{\n    int i = int(ceil(t));\n    return mix(color_gradient[i - 1], color_gradient[i], smoothstep(0.0,1.0,fract(t))); \n}\n\nfloat sdCappedCylinder( vec3 p, float r )\n{\n    return -(length(p.xz) - (r + (sin(0.5 * iTime) * 5.0 + 7.0) * sin(10.0 * (p.y))));\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec4 sampler(vec3 p)\n{\n    float angle = atan(p.x, p.z) + p.y * 0.5f;\n    //return vec4(floor(mod(p.y, 10.0) / 5.0), 0.0, 0.0, 1.0);\n    //float t = floor(mod(angle, 1.57 * 4.0) / (1.57 * 4.0) * 2.0)\n    float t = (mod(angle, 1.57 * 4.0) / (1.57 * 4.0));\n    \n    return colors(t * 5.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    color_gradient[0] = vec4(0.87, 0.3, 1.0, 1.0);\n    color_gradient[1] = vec4(0.82, 0.47, 1.0, 1.0);\n    color_gradient[2] = vec4(0.27, 0.29, 1.0, 1.0);\n    color_gradient[3] = vec4(0.47, 0.65, 1.0, 1.0);\n    color_gradient[4] = vec4(1.0, 1.0, 1.0, 1.0);\n\n    vec4 s = vec4(0.0, 0.0, 0.0, 0.0);\n\n    \n    for (int i = 0; i < samples; i++)\n    {\n        vec2 uv = fragCoord - iResolution.xy * 0.5;\n        vec2 new_uv = uv - vec2(0.5, 0.5);\n        new_uv.x += rand(new_uv + vec2(float(i), 1.0));\n        new_uv.y += rand(new_uv + vec2(float(i) + new_uv.x, 1.0));\n        new_uv = new_uv / (iResolution.x * 0.5);\n        \n        vec3 point_in_near = vec3(new_uv.x * sides, near, new_uv.y * sides);\n        vec3 ray = normalize(point_in_near.xyz);\n        vec3 p = vec3(0.0,0.0,0.0);\n        \n        int j = 0;\n\n\n        while (p.y < 1000.0 && j < 100)\n        {\n            float sdf = sdCappedCylinder(p, 10.0);\n\n            if (sdf < 0.001)\n            {\n                break;\n            }\n\n            p += ray * sdf * 0.07;\n            j++;\n        }\n    \n        vec3 normal = normalize(-vec3(p.x, 0.0, p.z));\n        \n        // Output to screen\n        s += sampler(p);\n    }\n    \n    fragColor = s / float(samples);\n    \n\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","name":"Image","description":"","type":"image"}]}