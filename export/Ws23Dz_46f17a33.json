{"ver":"0.1","info":{"id":"Ws23Dz","date":"1549475737","viewed":258,"name":"SDF lines playground 0","username":"remotion","description":"based on https://www.shadertoy.com/view/Wsf3Rj","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["2d","sdf","line","distance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// #define COLORED\n\nconst float aa_step = 3.0;\n\nfloat length2( in vec2 a ) { return dot(a,a); }\n\n// Clamp [0..1] range\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\n\n// Basically a triangle wave\nfloat repeat(float x) { return abs(fract(x*0.5+0.5)-0.5)*2.0; }\n\n\n// SDF utility library functions\nfloat opU(float d1, float d2);\nfloat sdCircle(in vec2 p, in vec2 pos, float radius);\nfloat sdBox(in vec2 p, in vec2 pos, in vec2 size);\nfloat sminCubic(float a, float b, float k);\nfloat smin(float a, float b, float k);\nfloat smin(float a, float b,float c, float k);\nfloat smin(float a, float b, float c,float d, float k);\nfloat opBlend(float d1, float d2);\n\n// fills an sdf in 2d\nfloat fill(float d, float s, float i) { return abs(smoothstep(0.,s,d) - i); }\n\n// makes a stroke of an sdf at the zero boundary\nfloat stroke(float d, float w, float s, float i) { return abs(smoothstep(0.,s,abs(d)-(w*.5)) - i); }\n\n\nvec2 screenToWorld(vec2 screen);\n\n// squared sigend distance to a line \nfloat sdLineSquared(in vec2 iPoint, in vec2 iLine0, in vec2 iLine1) {\n\tvec2 diff = iPoint - iLine0;\n\tvec2 dir = iLine1 - iLine0;\n\tfloat t = dot(diff, dir) / length2(dir);\n\tt = clamp(t, 0.0, 1.0);\n\tvec2 oLinePoint = t * dir + iLine0;\n\treturn length2(iPoint - oLinePoint);\n}\n\n\n// --- SDF - TODO! --------------------------------------------------------------\n\nfloat sdf(vec2 p, vec2 pm)\n{\n    vec2 p0 = vec2(-0.3,-0.4);\n    vec2 p1 = vec2(0.4,0.3);\n    vec2 p3 = vec2(-0.6,0.5);\n    vec2 p4 = vec2(0.6,-0.6);\n    //float d1 = abs(sqrt(sdLineSquared(p,p1,pm))-0.04)-0.001;\n    float d1 = sqrt(sdLineSquared(p,p1,pm));\n    float d2 = sqrt(sdLineSquared(p,pm,p0));\n    float d3 = sqrt(sdLineSquared(p,pm,p3));\n    float d4 = sqrt(sdLineSquared(p,pm,p4));\n    \n    //float d4s = stroke(d4,0.0,0.1,0.01);\n    \n    return smin(d1,d2,d3,d4,0.02);\n}\n\n// ------------------------------------------------------------------------------\n\n\n// useful functions defined below\n\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d);\nvec3 shade(float sd);\n\n// compute pixel colour\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pm = (length(iMouse.xy)<24.0) ? vec2(sin(-iTime),cos(-iTime))*0.7 : screenToWorld(iMouse.xy);    \n#ifdef COLORED // colored \n    // project screen coordinate into world\n\tvec2 p = screenToWorld(fragCoord);\n    \n    // signed distance for scene\n    float sd = sdf(p, pm);\n    \n    // compute signed distance to a colour\n    vec3 col = shade(sd);\n    \n    fragColor = vec4(col, 1.0);\n#else // black and white\n    // project screen coordinate into world\n\tvec2 p = screenToWorld(fragCoord);\n\n    // one pixel size\n\tfloat t = 1.0/iResolution.y;\n    \n    // evel SDF\n    float d = sdf(p, pm);\n    \n    // light\n    float light = length(p-pm)/3.0;\n    \n    // AA\n\tfloat c = smoothstep(-t*aa_step,t*aa_step,d)-light;\n    \n    // grid lines\n    c -= saturate(repeat(p.x*20.0) - 0.92)*1.5;\n    c -= saturate(repeat(p.y*20.0) - 0.92)*1.5;\n    \n\tfragColor = vec4(c);\n#endif   \n}\n\n\n// --- SDF utility library\n\nfloat sdCircle(in vec2 p, in vec2 pos, float radius){\n    return length(p-pos)-radius;\n}\n\nfloat sdBox(in vec2 p, in vec2 pos, in vec2 size){\n    vec2 d = abs(p-pos)-size;\n    return min(0.0, max(d.x, d.y))+length(max(d,0.0));\n}\n\n// polynomial smooth min (k = 0.1);\nfloat sminCubic(float a, float b, float k){\n    float h = max(k-abs(a-b), 0.0);\n    return min(a, b) - h*h*h/(6.0*k*k);\n}\n\nfloat smin(float a, float b, float k){\n\tfloat h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);\n\treturn mix(a, b, h) - k*h*(1.0-h);\n}\nfloat smin(float a, float b,float c, float k){\n\treturn smin(smin(a,b,k),c,k);\n}\n\nfloat smin(float a, float b, float c,float d, float k){\n\treturn smin(smin(a,b,k),smin(c,d,k),k);\n}\n\nfloat opU(float d1, float d2){\n    return min(d1, d2);\n}\n\nfloat opBlend(float d1, float d2){\n    float k = 0.2;\n    return sminCubic(d1, d2, k);\n}\n\n\n\n// --- Misc functions\n\n\n// https://www.shadertoy.com/view/ll2GD3\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    t = clamp(t, 0., 1.);\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec2 screenToWorld(vec2 screen)\n{\n    vec2 result = 2.0 * (screen/iResolution.xy - 0.5);\n    result.x *= iResolution.x/iResolution.y;\n    return result;\n}\n\nvec3 shade(float sd)\n{\n    float maxDist = 2.0;\n    vec3 palCol = palette(clamp(0.5-sd*0.4, -maxDist,maxDist), \n                      vec3(0.3,0.3,0.0),vec3(0.8,0.8,0.1),vec3(0.9,0.7,0.0),vec3(0.3,0.9,0.8));\n\n    vec3 col = palCol;\n    \n    // Darken around surface\n\tcol = mix(col, col*1.0-exp(-10.0*abs(sd)), 0.4);\n\t// repeating lines\n    col *= 0.8 + 0.2*cos(150.0*sd);\n    // White outline at surface\n    col = mix(col, vec3(1.0), 1.0-smoothstep(0.0,0.01,abs(sd)));\n    \n    return col;\n}\n","name":"Image","description":"","type":"image"}]}