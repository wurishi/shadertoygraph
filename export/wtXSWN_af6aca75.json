{"ver":"0.1","info":{"id":"wtXSWN","date":"1562899602","viewed":352,"name":"Occlusion Culling Test","username":"Strike","description":"- Converts the sphere SDFs to 2d so they can be tested without raymarching\n- Takes the one nearest to the camera and raymarches it\n\nMy first shader ever so please critique and point me toward a better implementation \n\n95% IQ's code","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","occlusionculling"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//see how high your machine can take this\nint cubeSize = 15;\n\n//iq's 3d -> 2d sphere sdf projector\nfloat iSphere( in vec3 sc, in float sr, in vec3 ro, in vec3 rd )\n{\n    vec3 oc = ro - sc;\n    float b = dot(rd, oc);\n    float c = dot(oc, oc) - sr*sr;\n    float t = b*b - c;\n    if( t > 0.0) \n        t = -b - sqrt(t);\n    return t;\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3 + 10.0*mouseX;\n\tcamPos = vec3(float(cubeSize)*4.*sin(an),30.0,float(cubeSize) * 4.*cos(an));\n    camTar = vec3(0,0,0);\n}\n\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n \nfloat sphereDist(vec3 pos, float r){\n    return length(pos) - r;\n\n}\n\nfloat doModel( vec3 p, vec4 sphereToDraw)\n{\n    float sphere = sphereDist(p - sphereToDraw.xyz, sphereToDraw.w);\n    return sphere;\n}\n\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    return vec3(0.2,0.07,0.01);\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, vec4 sphereToDraw  );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal, vec4 sphereToDraw  )\n{\n    vec3 lin = vec3(0.0);\n\n    // key light\n    //-----------------------------\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig, sphereToDraw  );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    // ambient light\n    //-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    // surface-light interacion\n    //-----------------------------\n    vec3 col = mal*lin;\n\n    \n    // fog    \n    //-----------------------------\n\t//col *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd, vec4 sphereToDraw )\n{\n\tconst float maxd = 200.0;           // max trace distance\n\tconst float precis = 0.001;        // precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    int maxIterations = 100;//See how low you can take this without it looking weird\n    for( int i=0; i<maxIterations; i++ )          \n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t, sphereToDraw );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, vec4 sphereToDraw )\n{\n    const float eps = 0.002;             // precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps, sphereToDraw ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps, sphereToDraw ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps, sphereToDraw) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps, sphereToDraw ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, vec4 sphereToDraw )\n{\n    float res = 1.0;\n    float t = 0.0005;                 // selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         // 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t, sphereToDraw);\n        res = min( res, 64.0*h/t );   // 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   // limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/iResolution.y;\n    vec2 m = iMouse.xy/iResolution.xy;\n\n    //-----------------------------------------------------\n    // camera\n    //-----------------------------------------------------\n    \n    // camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iTime, m.x );\n\n    // camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  // 0.0 is the camera roll\n    \n\t// create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); // 2.0 is the lens length\n\n    //-----------------------------------------------------\n\t// render\n    //-----------------------------------------------------\n\n    vec3 col = doBackground();\n    \n\tvec4 sphereToDraw = vec4(10000.,10000.,10000.,0.);\n    //defaults as really far away\n\n    for(int i=0;i<cubeSize;i++){\n        for(int q=0;q<cubeSize;q++){\n            for(int k=0;k<cubeSize;k++){\n                \n                vec3 spherePos = vec3(i*2 - cubeSize, q*2 - cubeSize + 4,k*2 - cubeSize);\n                float sphereRadius = 1.;\n                \n                if(iSphere(spherePos,sphereRadius,ro, rd) > 0.){\n                    //our ray could hit this sphere\n                    \n                    if(distance(ro,spherePos) < distance(ro, sphereToDraw.xyz)){\n                        //this sphere is closer than the previous most eligible sphere\n                    \t//if it's the first eligible sphere it's obviously closer than the default\n                        sphereToDraw = vec4(spherePos, sphereRadius);\n                        //just saving the info for IQ's renderer to use\n                    }\n                        \n                    //uncomment this to see the 2D sphere SDFs:\n                    //sphereToDraw = vec4(0.);col += vec3(0.05,0.,0.);\n                }\n                \n            }\n        }\n    }\n\t// raymarch\n    float t = calcIntersection( ro, rd, sphereToDraw );\n    if( t>-0.5 )\n    {\n        // geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos, sphereToDraw);\n\n        // materials\n        vec3 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal, sphereToDraw );\n\t}\n\n\t//-----------------------------------------------------\n\t// postprocessing\n    //-----------------------------------------------------\n    // gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n\n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}