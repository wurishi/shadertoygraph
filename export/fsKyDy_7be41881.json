{"ver":"0.1","info":{"id":"fsKyDy","date":"1655542631","viewed":165,"name":"dec2frac spirals","username":"ChunderFPV","description":"2 lines are segmented into logarithmic number spirals which provide visual decimal to fraction conversion.  Gold = numerator.  Cyan = denominator.  The spirals overlap at the metallic ratios.","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["math","spiral","fraction","decimal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define PI radians(180.0)\n#define TAU (PI*2.0)\n#define CS(a) vec2(cos(a), sin(a))\n#define PT(u,r) smoothstep(0.0, r, r-length(u))\n\n// denominator spiral, use 1/n for numerator\n// ( screen xy, spiral exponent, decimal, line width, hardness, rotation )\nfloat ds(vec2 u, float e, float n, float w, float h, float ro)\n{\n    float ur = length(u); // unit radius\n    float sr = pow(ur, e); // spiral radius\n    float a = round(sr)*n*TAU; // arc\n    vec2 xy = CS(a+ro)*ur; // xy coords\n    float l = PT(u-xy, w); // line\n    float s = mod(sr+0.5, 1.0); // gradient smooth\n    s = min(s, 1.0-s); // darken filter\n    return l*s*h;\n}\n\nvoid mainImage( out vec4 O, in vec2 U )\n{\n    float s = 2.0; // scale\n    float e = -3.0; // spiral exponent\n    float sec = 360.0; // time to cycle through number line\n    vec4 m = iMouse; m.xy = m.xy*2.0/R-1.0; // ±1x, ±1y\n    if (m.z > 0.0) e = pow(1.0/abs(m.y), sign(m.y)/2.0)*-sign(m.y); // scale e with zoom\n    float n = tan(((iTime/sec)-0.5)*PI); // n from time\n    \n    //n = 5.192582403567252; // manual entry\n    \n    float z = (m.z > 0.0) ? pow(1.0-abs(m.y), 4.0*sign(m.y)): 1.0; // mouse y zoom\n    vec2 uv = (U-0.5*R)/R.y*s*z; // apply cartesian, scale, zoom\n    float lu = length(uv); // unit radius\n    float fw = length(fwidth(uv)); // pixel size\n    vec3 c = vec3(0); // background color\n    \n    float w = fw*1.5; // line size\n    float g = fw*9.0; // glow size\n    float h = 2.5; // hardness\n    float ro = -PI/2.0; // rotation\n    c += ds(uv, e, 1.0/n, w, h, ro); // numerator\n    c.rg += ds(uv, e, 1.0/n, g, 1.0, ro); // num glow\n    c += ds(uv, e, n, w, h, ro); // denominator\n    c.gb += ds(uv, e, n, g, 1.0, ro); // den glow\n    \n    float uc = min(lu, 1.0/lu); // unit circle\n    c.r += 0.4*pow(uc, 25.0); // uc glow\n    c += 0.6*pow(uc, 400.0); // uc\n    \n    float fm = (z < 1.0 && m.z > 0.0) ? z: 1.0; // fade multiplier\n    c.r += (1.0-pow(lu, 0.2))*fm; // center glow\n    c = max(c, 0.0); // clear negative color\n    c += pow(max(1.0-lu, 0.0), 15.0)*fm; // singularity\n    \n    if (e > 0.0) // outer gradient\n    {\n        float d = pow(abs(lu/(lu-1.0)), e);\n        float o = min(abs(d), 1.0/abs(d));\n        c.r += 0.4*sin(d*TAU)*pow(o, 0.3);\n    }\n    c += digitIn(vec3(0), vec3(0.75), U/R.y*2.0, 44.0, n); // display digits\n    O = vec4(c*sqrt(c)*1.4, 1.0); // draw\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// debugging font by valalalalala: https://www.shadertoy.com/view/WtGyWD\nconst int CHARACTERS[14] = int[14](31599,9362,31183,31207,23524,29671,29679,30994,31727,31719,1488,448,2,3640);\nfloat digitIsOn( int digit, vec2 id ) {   \n    if ( id.x < .0 || id.y < .0 || id.x > 2. || id.y > 4. ) return .0;\n    return floor( mod( float( CHARACTERS[ int( digit ) ] ) / pow( 2., id.x + id.y * 3. ), 2. ) );\n}\nfloat digitSign( float v, vec2 id ) {\n    return digitIsOn( 10 - int( ( sign( v ) - 1. ) * .5 ), id );\n}\nint digitCount( float v ) {\n    return int( floor( log( max( v, 1. ) ) / log( 10. ) ) );\n}\nfloat digitFirst( vec2 uv, float scale, float v, int decimalPlaces ) {\n    vec2 id = floor( uv * scale );\n\n    if ( .0 < digitSign( v, id ) ) return 1.;\n    v = abs( v );\n    \n    int digits = digitCount( v );\n    float power = pow( 10., float( digits ) );\n    \n    float offset = floor( .1 * scale );\n    id.x -= offset;\n    \n    float n;\n    for ( int i = 0 ; i < 33 ; i++, id.x -= offset, v -= power * n, power /= 10. ) {\n        n = floor( v / power );\n        if ( .0 < digitIsOn( int( n ), id ) ) return 1.;   \n        if ( i == digits ) {\n            id.x -= offset;\n            if ( .0 < digitIsOn( int( 12 ), id ) ) return 1.;\n        }  \n        if ( i >= digits + decimalPlaces ) return .0;    \n    }  \n    return .0;\n}\nfloat digitFirst( vec2 uv, float scale, float v ) {\n    return digitFirst( uv, scale, v, 3 );\n}\nvec3 digitIn( vec3 color, vec3 fontColor, vec2 uv, float scale, float v ) {\n    float f = digitFirst( uv, scale, v );\n    return mix( color, fontColor, f );\n}","name":"Common","description":"","type":"common"}]}