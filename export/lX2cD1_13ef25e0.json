{"ver":"0.1","info":{"id":"lX2cD1","date":"1727240572","viewed":26,"name":"Noise Color Example","username":"savorsauce","description":"a noise color shader","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise","color","shader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Evil Membrane\n// Another gyroid noise with light and color\n\n#define R iResolution.xy\n#define N(x,y,z) normalize(vec3(x,y,z))\n\nfloat gyroid (vec3 seed)\n{\n    return dot(sin(seed),cos(seed.yzx));\n}\n\nfloat fbm (vec3 seed)\n{\n    float result = 0., a = .5;\n    for (int i = 0; i < 3; ++i)\n    {\n        // extra spicy twist\n        seed.z += result*.5;\n        \n        // bounce it with abs\n        result += abs(gyroid(seed/a))*a;\n        \n        a /= 5.;\n    }\n    return result;\n}\n\nfloat noise (vec2 p)\n{\n    // improvise 3d seed from 2d coordinates\n    vec3 seed = vec3(p, length(p) - iTime * .1) * 1.;\n    \n    // make it slide along the sin wave\n    return cos(fbm(seed)*6.+iTime)*.5+.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // coordinates\n    vec2 p = (5.*fragCoord-R)/R.y;\n    \n    // noise grayscale\n    float shade = noise(p);\n    \n    // normal gradient\n    vec3 normal = normalize(vec3(shade-vec2(noise(p+vec2(.01,0)), noise(p+vec2(0,.01))), .2));\n    \n    vec3 color = vec3(0.5, 0.2, 0.1);\n    \n    // light from above\n    color += .5*pow(dot(normal, N(0.5,1.,1.))*.5+.5, 10.);\n    \n    // tinted light\n    vec3 tint = .5+.5*cos(vec3(1,1,1)*5.+shade+p.x+normal.y*2.);\n    color += tint*.3*pow(dot(normal, N(0,0,1))*.5+.5, 10.);\n    \n    // pink light from below\n    color += .5*vec3(0.5,0.5,0.5)*pow(dot(normal, N(0,-2,1))*.5+.5, 2.);\n    \n    fragColor = vec4(color*shade, 1);\n}","name":"Image","description":"","type":"image"}]}