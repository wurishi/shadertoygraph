{"ver":"0.1","info":{"id":"XXV3Rz","date":"1717212556","viewed":60,"name":"Smoother translation","username":"FrederickAmpsUp","description":"Interesting way to interpolate position of an SDF. Far from exact.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","test","sdf","demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float map(vec2 position) {\n    float k = 0.2;\n    float d0 = length(position-vec2(0.5, 0.0)) - 0.4;\n    float d1 = length(position+vec2(0.5, 0.0)) - 0.4;\n    \n    return mix(d0,d1,pow(sin(iTime), 2.0)) - k*pow(sin(2.0*iTime), 2.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 position = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n   \n    float d = map(position);\n    \n    // same colorization that Inigo Quilez uses in his shaders\n    vec3 color = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7); \n    color *= 1.0 - exp(-4.0 * abs(d));\n\tcolor *= 0.8 + 0.2 * cos(120.0 * d);\n    color = mix(color, vec3(1.0), 1.0 - smoothstep(0.0, 3.0, (abs(d) - 0.003) * iResolution.y));\n    if (iMouse.z > 0.0) {\n        vec2 mousePosition = (2.0 * iMouse.xy - iResolution.xy) / iResolution.y;\n        float d = map(mousePosition);\n        color = mix(color, vec3(1.0, 1.0, 0.0), 1.0 - smoothstep(0.0, 3.0, abs(length(position - mousePosition) - abs(d)) * iResolution.y - 1.0));\n    }\n    fragColor = vec4(color, 1.0);\n} ","name":"Image","description":"","type":"image"}]}