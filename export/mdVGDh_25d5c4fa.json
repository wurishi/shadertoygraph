{"ver":"0.1","info":{"id":"mdVGDh","date":"1678496018","viewed":68,"name":"Heat mapped John Conway's Game","username":"Sam64","description":"Click the mouse to make a ball of cells. Just a fun shader with John Conway's Game Of Life I made when I got a bit bored. The colorizations are not the best but you can set that to your liking.","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["multipass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 colorHigh = vec3(1.0f, 0.0f, 0.0f);\nvec3 colorMid = vec3(0.0f, 1.0f, 0.0f);\nvec3 colorLow = vec3(0.0f, 0.0f, 1.0f);\nvec3 colorNo = vec3(0.0f, 0.0f, 0.0f);\n\nvec3 getColorRamp(vec3 l, vec3 h, float v, float lv, float hv){\n  if(v < lv)return vec3(0.0f, 0.0f, 0.0f);\n  if(v > hv)return vec3(0.0f, 0.0f, 0.0f);\n  \n  float vn = (v - lv) / (hv - lv);\n  return l * (1.0f - vn) + h * vn;\n}\n\nvec4 getRampedColor(float v){\n  vec3 accumulator = vec3(0.0f);\n  accumulator += getColorRamp(colorNo, colorLow, v, 0.0f, 1.0f/3.0f);\n  accumulator += getColorRamp(colorLow, colorMid, v, 1.0f/3.0f, 1.0f/3.0f*2.0f);\n  accumulator += getColorRamp(colorMid, colorHigh, v, 1.0f/3.0f*2.0f, 1.0f);\n  return vec4(accumulator, 1.0f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // General\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    vec4 worldPix = texture(iChannel0, uv);\n    \n    if(worldPix.x > 0.5){\n      fragColor = vec4(1.0f, 1.0f, 1.0f, 1.0f);\n    }else {\n      fragColor = getRampedColor(worldPix.y);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x / iResolution.y;\n\n    // General\n    vec2 pos = fragCoord;\n    \n    fragColor = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    vec4 nabors[8];\n    nabors[0] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, -1), 0);\n    nabors[1] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, -1), 0);\n    nabors[2] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, -1), 0);\n    nabors[3] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 0), 0);\n    nabors[4] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, 0), 0);\n    nabors[5] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(-1, 1), 0);\n    nabors[6] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(0, 1), 0);\n    nabors[7] = texelFetch(iChannel0, ivec2(fragCoord) + ivec2(1, 1), 0);\n    \n    int naborNumber = 0;\n    if(nabors[0].x > 0.5f)naborNumber++;\n    if(nabors[1].x > 0.5f)naborNumber++;\n    if(nabors[2].x > 0.5f)naborNumber++;\n    if(nabors[3].x > 0.5f)naborNumber++;\n    if(nabors[4].x > 0.5f)naborNumber++;\n    if(nabors[5].x > 0.5f)naborNumber++;\n    if(nabors[6].x > 0.5f)naborNumber++;\n    if(nabors[7].x > 0.5f)naborNumber++;\n    \n    fragColor.y = (nabors[0].y+nabors[1].y+nabors[2].y+nabors[3].y+nabors[4].y+nabors[5].y+nabors[6].y+nabors[7].y+fragColor.y)/9.0f;\n    \n    if(fragColor.x > 0.5f){\n        if(naborNumber < 2 || naborNumber > 3){\n          fragColor.x = 0.0f;\n        }\n    }else {\n        if(naborNumber == 3){\n            fragColor.x = 1.0f;\n        }\n    }\n    \n    //Circle over mouse\n    if(iMouse.z > 0.0f){\n        vec2 mousePos = iMouse.xy;\n        vec2 vd = mousePos - pos;\n        if(vd.x * vd.x + vd.y * vd.y < 100.0f*100.0f){\n          fragColor.x = 1.0f;\n        }\n    }\n    \n    fragColor.y += fragColor.x;\n    if(fragColor.y > 1.0f)fragColor.y = 1.0f;\n    \n    fragColor.y *= 0.9999f;\n    \n    //fragColor = fragColor * 0.99;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"const vec2 worldDivisions = vec2(10.0f, 10.0f);\nfloat particleSizeSq = 0.001f;","name":"Common","description":"","type":"common"}]}