{"ver":"0.1","info":{"id":"dd3XR8","date":"1679363163","viewed":57,"name":"bobbing water","username":"JetStreamSham","description":"Water rising and falling.\n\nComments, questions, and criticisms are welcome :)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","sine"],"hasliked":0,"parentid":"mdcSR8","parentname":"Sine_wave"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1) \n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 m = iMouse.xy/iResolution.xy;\n    \n    \n    vec3 skyCol = vec3(.2,.2,1.);\n    vec3 waterColor = vec3(.6,.6,1.);\n    \n    //uv only goes from 0 to 1\n    //so I multiply by 2 PI\n    //so it covers the entire range of sine\n    float theta = uv.x * 2. * PI;\n    \n    \n    //I adjust the output of sin\n    //so that outputs of 1 and 0 aren't touching the borders\n    //First I add 1.1 to sin so its range changes from -1,1 to 0,2\n    //Then I divide by 2.2 so the range becomes 0,1\n    float height = cos(sin(theta+iTime));\n    height = ((height)+1.1)/2.2;    \n    height += cos(iTime)*.2;\n    float dist = uv.y-height;\n    \n    \n    float thickness = 1.5/iResolution.y;\n    float interpolation = smoothstep(0.,thickness,dist);\n    \n    vec3 col = mix(skyCol,waterColor,interpolation);\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}