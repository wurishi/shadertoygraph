{"ver":"0.1","info":{"id":"tsycWV","date":"1603759897","viewed":396,"name":"Locally scaled contour plots","username":"rreusser","description":"Uses standard derivatives to compute a local function-relative rate of change, which enables to compute a locally appropriate step size.","likes":28,"published":1,"flags":0,"usePreview":0,"tags":["math","plot","complex","contour"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright 2020 Ricky Reusser\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// This function draws a contour plot, using the logarithmic (relative)\n// gradient to select locally appropriate contour spacing. Click to show\n// colors representing regions of a given spacing.\n//\n// For a version that blends between octaves, see: https://www.shadertoy.com/view/wsGyDV\n// For a version with shading, see: https://www.shadertoy.com/view/tsyyDV\n\n//const float minSpacing = 15.0;\nconst float divisions = 2.0;\nconst float lineWidth = 1.0;\nconst float antialiasWidth = 1.5;\n\n// Draws contours which adjust to the local relative rate of change\n//              f: input to be contoured\n//       gradient: screen-space gradient of the input f\n//     minSpacing: Smallest contour spacing, in (approximate) pixels\n//      divisions: Number of divisions per size increment\n//      lineWidth: Line width, in pixels\n// antialiasWidth: Width of antialiasing blur\nfloat locallyScaledLogContours (float f, vec2 gradient, float minSpacing, float divisions, float lineWidth,\n float antialiasWidth) {\n    float screenSpaceLogGrad = hypot(gradient) / f;\n    float localOctave = ceil(log2(screenSpaceLogGrad * minSpacing) / log2(divisions));\n    float contourSpacing = pow(divisions, localOctave);\n    float plotVar = log2(f) / contourSpacing;\n    float widthScale = 0.5 * contourSpacing / screenSpaceLogGrad;\n\n    return smoothstep(\n        0.5 * (lineWidth + antialiasWidth),\n        0.5 * (lineWidth - antialiasWidth),\n        (0.5 - abs(fract(plotVar) - 0.5)) * widthScale\n    );\n}\n\nvec2 sampleFunction (vec2 z, vec2 zMouse) {\n  return cmul(cdiv(z - vec2(1, 0), z + vec2(1, 0)), z - zMouse);\n}\n\n// To show what's going on, add color when clicking\nvec3 octaveColorDebug (float f, vec2 gradient, float minSpacing, float divisions) {\n    float screenSpaceLogGrad = hypot(gradient) / f;\n    float localOctave = ceil(log2(screenSpaceLogGrad * minSpacing) / log2(divisions));\n\treturn randoColor(localOctave);\n}\n\n// Frag coord to some nice plot range\nvec2 viewport (vec2 ij) {\n    return 4.0 * vec2(1, iResolution.y / iResolution.x) * (ij / iResolution.xy - 0.5);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 z = viewport(fragCoord);\n    vec2 zMouse = iMouse.w < 0.5 ? vec2(1.2 * cos(0.5 * iTime), 0.5 * sin(iTime)) : viewport(iMouse.xy);\n\n    vec2 f = sampleFunction(z, zMouse);\n    \n    float minSpacing = iResolution.x / 50.0;\n    \n    // The gradient and its magnitude:\n    float fMag = hypot(f);\n    vec2 fMagGradient = vec2(dFdx(fMag), dFdy(fMag));\n    \n    bool useColor = fragCoord.x / iResolution.x < 0.5;\n    vec3 debugColor = useColor ? 0.5 + 0.5 * octaveColorDebug(fMag, fMagGradient, minSpacing, divisions) : vec3(1);\n    float contour = 1.0 - locallyScaledLogContours(fMag, fMagGradient, minSpacing, divisions, lineWidth, antialiasWidth);\n\n    fragColor = vec4(pow(contour * debugColor, vec3(0.454)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// Complex division, semi-floating-point-carefully\nvec2 cdiv (vec2 a, vec2 b) {\n  float e, f;\n  float g = 1.0;\n  float h = 1.0;\n  if( abs(b.x) >= abs(b.y) ) {\n    e = b.y / b.x;\n    f = b.x + b.y * e;\n    h = e;\n  } else {\n    e = b.x / b.y;\n    f = b.x * e + b.y;\n    g = e;\n  }\n  return (a * g + h * vec2(a.y, -a.x)) / f;\n}\n\n// Complex multiplication\nvec2 cmul (vec2 a, vec2 b) {\n  return vec2(\n    a.x * b.x - a.y * b.y,\n    a.y * b.x + a.x * b.y\n  );\n}\n\n// Floating-point-aware hypot function, algebraically equivalent to `length(vec2)`\nfloat hypot (vec2 z) {\n  float x = abs(z.x);\n  float y = abs(z.y);\n  float t = min(x, y);\n  x = max(x, y);\n  t = t / x;\n  return x * sqrt(1.0 + t * t);\n}\n\n#define PI 3.14\n\nvec3 randoColor (float x) {\n    return 0.5 + 0.5 * vec3(cos(x), cos(x - PI * 2.0 / 3.0), cos(x - PI * 4.0 / 3.0));\n}","name":"Common","description":"","type":"common"}]}