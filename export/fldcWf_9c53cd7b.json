{"ver":"0.1","info":{"id":"fldcWf","date":"1660950417","viewed":463,"name":"(sound) Everyone's Favorite Song","username":"Tilmann","description":"To paraphrase Richard Paul Astley: \"I will not abandon you. I will not disappoint you.\"","likes":32,"published":1,"flags":8,"usePreview":0,"tags":["2d","sdf","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TAU 6.28319\n#define INTRO_END 3.0\n#define TICK_DURATION 0.13\n\nfloat saturate(float x){\n    return clamp(x, 0., 1.);\n}\n\nfloat rect(vec2 uv, vec2 size){\n    vec2 d = abs(uv) - size*.5;\n    return max(d.x,d.y);\n}\n\nfloat rhomb(vec2 uv, vec2 size){\n    vec2 d = abs(uv) / (size * .5);\n    return (d.x + d.y - 1.) * .5 *(size.x * normalize(size).y);\n}\n\nfloat rounded_rect(vec2 uv, vec2 size, float radius){\n    return length(max(abs(uv) - size*.5 + radius, 0.)) - radius;\n}\n\nfloat line(vec2 uv, vec2 a, vec2 b){\n    vec2 d = b-a;\n    vec2 p = uv-a;\n    float t = saturate(dot(p, d) / dot(d, d));\n    return length(p - t*d);\n}\n\nfloat circle(vec2 uv, float radius){\n    return length(uv) - radius;\n}\n\nfloat quarter_note(vec2 uv){\n    return min(\n        circle(uv + vec2(.0,.2), .1),\n        rect  (uv - vec2(.08,.0), vec2(.04,.4)));\n}\n\nfloat stripes(float x, float w, float d){\n    return abs(fract(x/d)-.5)*d-w*.5;\n}\n\nfloat xstripes(float x, float w, float d){\n    return stripes(x,d-w,d);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n    float t = iTime - INTRO_END;\n    if(t < 0.\n    || iResolution.y < 400. && t < 64.*TICK_DURATION){// Trying not to ruin the surprise in the preview.\n        vec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.y;\n        uv.x += .01*sin(TAU*t/8./TICK_DURATION);\n        uv.y += .01*cos(TAU*t/4./TICK_DURATION);\n        uv.y -= uv.x*.3;\n        uv.y *= 0.9;\n        uv.x *= 0.7;\n        float d = min(min(\n            quarter_note(uv - vec2(-.2,.0)),\n            quarter_note(uv - vec2( .1,.0))),\n            rect(uv - vec2(.03,.22),vec2(.34,.15)));\n        fragColor = vec4(saturate(d / fwidth(d))) * .7;\n        return;\n    }\n\n#define C(r,g,b) (.04*vec3(r,g,b))\n#define BACKGROUND C(15,15,18)\n#define WINDOW     C(18,18,21)\n#define SUIT       C( 4, 4, 5)\n#define SHIRT1     C( 6, 6, 5)\n#define SHIRT2     C(13,13,14)\n#define PANTS      C(11,10,10)\n#define BELT       C( 4, 3, 3)\n#define HAIR       C(17, 9, 7)\n#define SKIN       C(18,12,12)\n#define COLLAR     C(17,16,17)\n#define MIC1       C( 9, 8, 8)\n#define MIC2       C(16,15,15)\n#define MIC3       C(10, 9, 9)\n#define MIX(color,amount) c = mix(color, c, saturate((amount) * iResolution.y + .5))\n\n    t = mod(t, 64.*TICK_DURATION);\n    vec2 uv = (fragCoord - iResolution.xy*.5) / iResolution.y;\n    vec3 c = vec3(BACKGROUND);\n    \n    // Window\n    vec2 uv2 = uv;\n    uv2.x *= 6./(uv.y-6.); // perspective\n    float grid = max(max(max(\n        xstripes(uv2.x+.08, .03 , 1./6.25),\n        xstripes(uv2.y+.06, .03 , 1./4.00)),\n        xstripes(uv2.x+.04, .003, 1./37.5)),\n        xstripes(uv2.y+.00, .003, 1./40.0));\n    vec2 p = uv2;\n    p.y = max(p.y+.1,0.);\n    p /= .7;\n    MIX(WINDOW, max(max(\n        circle(p,1.),\n        -uv2.y-.3),\n        grid));\n    \n    vec2 bob = uv;\n    bob.x += .07*sin(TAU*t/16./TICK_DURATION);\n    bob.y += .07*cos(TAU*t/ 8./TICK_DURATION) - .15;\n    \n    // Clothes (except collar and sleeves)\n    MIX(SUIT, min(\n    /* shoulders */ rhomb(bob + vec2(0,.15), vec2(.45,.23)),\n    /* suit      */ rect (bob + vec2(0,.51), vec2(.39,.7))));\n    float shirt1 = rect(bob + vec2(0,.33), vec2(.11,.36));\n    float shirt2 = max(shirt1, stripes(bob.y, 0.01, 0.02));\n    float suit_shadow = .7+.3*smoothstep(.5,-.5,8.*rect(bob + vec2(0,.5), vec2(.11,.7)));\n    /* shirt ( dark  stripes) */ MIX(SHIRT1 * suit_shadow, shirt1);\n    /* shirt (bright stripes) */ MIX(SHIRT2 * suit_shadow, shirt2);\n    /* pants */ MIX(PANTS * suit_shadow, rect(bob + vec2(0,.70), vec2(.11,.30)));\n    /* belt  */ MIX(BELT  * suit_shadow, rect(bob + vec2(0,.53), vec2(.11,.04)));\n    \n    // Head\n    vec2 uv3 = bob + vec2(.007*cos(TAU*t/16./TICK_DURATION),0);\n    float face = min(min(\n    /* forehead */ rounded_rect(uv3 - vec2(0,.07), vec2(.13,.14), .02),\n    /* ears     */ rounded_rect(bob - vec2(0,.03), vec2(.16,.06), .01)),\n    /* chin     */ circle(uv3, .06));\n    float face_shadow = 1.-.4*smoothstep(.7,-.7,8.*face);\n    /* hair */ MIX(HAIR * face_shadow, rounded_rect(bob - vec2(0,.11), vec2(.18,.19), .09));\n    /* neck */ MIX(SKIN * face_shadow, rounded_rect(bob + vec2(0,.06), vec2(.11,.20), .05));\n    MIX(SKIN, face);\n    /* collar */ MIX(COLLAR * face_shadow, max(\n         rect (bob + vec2(0,.11), vec2(.115,.10)),\n        -rhomb(bob + vec2(0,.05), vec2(.115,.22))));\n    \n    float elbow_x = -.01*cos(TAU*t/4./TICK_DURATION);\n    float hand_x  =  .04*cos(TAU*t/4./TICK_DURATION);\n    float hand_y  =  .04*cos(TAU*t/4./TICK_DURATION);\n    /* upper right arm */ MIX(SUIT, line(bob, vec2(-.187,-.22), vec2(elbow_x-.20,-.41)) - .08);\n    /* upper left  arm */ MIX(SUIT, line(bob, vec2( .187,-.22), vec2(elbow_x+.20,-.41)) - .08);\n    /* right hand      */ MIX(SKIN, rounded_rect(bob - vec2(hand_x-.15, hand_y-.41), vec2(.09,.11), .04));\n    /* left  hand      */ MIX(SKIN, rounded_rect(bob - vec2(hand_x+.15,-hand_y-.41), vec2(.09,.11), .04));\n    \n    // Mic\n    MIX(MIC1,         rect(uv + vec2(0,.4 ), vec2(.0125,.8  )     ));\n    MIX(MIC2, rounded_rect(uv + vec2(0,.03), vec2(.025 ,.095), .01));\n    MIX(MIC3, rounded_rect(uv - vec2(0,.06), vec2(.055 ,.095), .01));\n    \n    fragColor = vec4(c,1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":0,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define TAU 6.28319\n#define INTRO_END 3.0\n#define TICK_DURATION 0.13\n#define FREQUENCY_FACTOR 1.2\n#define AMPLITUDE_FACTOR 0.7\n\nconst vec3 intro_notes[11] = vec3[11](\n    vec3(2.0,.0,.0), vec3(2.0,.8,.0), vec3(2.0,.3,.8), vec3(2.0,.0,.0),\n    vec3(1.5,.8,.0), vec3(1.5,.8,.0), vec3(1.5,.6,.6), vec3(1.5,.0,.3),\n    vec3(0.0,.7,.0), vec3(0.0,.8,.0), vec3(0.0,.8,.3)\n);\n\nconst float bass_notes[64] = float[64](\n    1.0,0.0,1.0,1.0, 0.0,10.,8.0,0.0, 6.0,0.0,6.0,0.0, 0.0,0.0,1.0,6.0,\n    3.0,0.0,3.0,3.0, 0.0,10.,8.0,0.0, 0.0,0.0,8.0,8.0, 8.0,10.,0.0,8.0,\n    1.0,0.0,1.0,1.0, 0.0,10.,8.0,0.0, 6.0,0.0,6.0,0.0, 0.0,0.0,6.0,6.0,\n    3.0,0.0,3.0,3.0, 0.0,10.,8.0,0.0, 0.0,0.0,6.0,0.0, 11.,6.0,0.0,11.\n);\n\nconst float[18] timing = float[18](\n    0.0,6.0,12.,\n    16.,22.,28.,29.,30.,\n    32.,38.,44.,\n    48.,52.,54.,60.,61.,62.,\n    64.\n);\n\nconst float hi_notes[17] = float[17](\n    6.0, 8.0, 1.0, \n    8.0, 10., 13., 11., 10.,\n    6.0, 8.0, 1.0, \n    0.0, 0.0, 0.0, 13., 11., 10.\n);\n\nconst float lo_notes[17] = float[17](\n    6.0, 8.0, 0.0, \n    8.0, 10., 0.0, 0.0, 0.0,\n    6.0, 8.0, 0.0, \n    8.0, 6.0, 1.0, 0.0, 0.0, 0.0\n);\n\nconst int index_map[64] = int[64](\n     0, 0, 0, 0,  0, 0, 1, 1,  1, 1, 1, 1,  2, 2, 2, 2,\n     3, 3, 3, 3,  3, 3, 4, 4,  4, 4, 4, 4,  5, 6, 7, 7,\n     8, 8, 8, 8,  8, 8, 9, 9,  9, 9, 9, 9, 10,10,10,10,\n    11,11,11,11, 12,12,13,13, 13,13,13,13, 14,15,16,16\n);\n\nfloat random(float t, float frequency, float amplitude){\n    return texture(iChannel0, frequency * vec2(.618 * t, t)).x * amplitude;\n}\n\nfloat triangle(float t){\n    return abs(fract(t) - .5)*4.-1.;\n}\n\nfloat fade(float t, float peak){\n    float fade_in = t / peak;\n    float fade_out = 1. - t / (1. - peak);\n    return max(0.,min(fade_in,fade_out));\n}\n\nfloat intro_sound(float t, float tick){\n    float fade_in = smoothstep(.0,.1,tick);\n    float fade_out = exp(-3.*tick);\n    float r = random(tick,10.*(1.-tick), .5);\n    float s = sin(t * mix(440.,150.,tick));\n    float k = fade(10.*tick,.1) * random(tick,100.,1.);\n    return (s * abs(s) + r) * fade_in * fade_out + k;\n}\n\nvec2 intro_note(int i, float t){\n    vec3 note = intro_notes[i];\n    float pitch = FREQUENCY_FACTOR * exp2(note.x/6.0);\n    vec2 balance = note.yz;\n    return intro_sound(t * pitch, t) * balance;\n}\n\nfloat bass_sound(float tick, float t){\n    float noise = fade(10.*tick,.3) * random(tick,7.,1.);\n    return triangle(sin(3.*TAU*t)) * fade(tick,.01) + noise;\n}\n\nfloat kick_sound(float t){\n\treturn triangle(60.*sqrt(t*.2)) * fade(t,.01);\n}\n\nfloat clap_sound(float t){\n    return smoothstep(.1,.0,t) * random(t,120.,1.);\n}\n\nfloat hihat_open_sound(float t){\n\treturn sin(random(t,400.,8.)) * exp(-5.*t) * smoothstep(.0, .02, t);\n}\n\nfloat hihat_closed_sound(float t){\n\treturn sin(random(t,400.,8.)) * exp(-15.*t) * smoothstep(.0, .02, t);\n}\n\nvec2 hihat_2(float t){\n    float h1 = hihat_closed_sound(t);\n    float h2 = hihat_closed_sound(t-.25);\n    return vec2(mix(h1,h2,.6), mix(h1,h2,.3));\n}\n\nvec2 hihat_3(float t){\n    float h1 = hihat_closed_sound(t);\n    float h2 = hihat_closed_sound(t-.25);\n    float h3 = hihat_closed_sound(t-.5);\n    return vec2(mix(h1,h3,.2), mix(h1,h3,.8)) + .5*h2;\n}\n\nfloat hi_sound(float tick, float t){\n    return (sin(TAU*32.*t + .1) + sin(TAU*64.*t + .1) + sin(TAU*128.*t + .75) *.2) * sqrt(fade(tick, .1));\n}\n\nfloat lo_sound(float tick, float t){\n    return (triangle(32.*t + .1) + triangle(64.*t + .75)) * exp(-2.*tick) * smoothstep(.0, .1, t);\n}\n\nvec2 mainSound(int samp, float time){\n    int tick_duration = int(iSampleRate * TICK_DURATION);\n    int intro_end = int(INTRO_END * iSampleRate);\n    int intro_duration = 10 * tick_duration;\n    int intro_index = samp - intro_end + intro_duration;\n    if(intro_index < 0) return vec2(0);\n    if(intro_index < intro_duration){\n        int i = intro_index / tick_duration;\n        float t = fract(float(intro_index) / float(tick_duration));\n        return intro_note(i,t/2.+.5) + intro_note(i+1,t/2.);\n    }\n    samp -= intro_end;\n    \n    int cycle_duration = tick_duration * 64;\n    samp %= cycle_duration;\n    int tick = samp / tick_duration;\n    float t = float(samp) / float(tick_duration);\n    float t1 = fract(t);\n    float t2 = fract(t*.5);\n    float t4 = fract(t*.25);\n    float t4_2 = fract(t*.25-.5);\n    float t8_4 = fract(t*.125-.5);\n    \n    float bass_note = bass_notes[tick];\n    float bass_pitch = FREQUENCY_FACTOR * exp2(bass_note/12.);\n    float bass = bass_sound(t1,t1 * bass_pitch) * sign(bass_note) * .7;\n    \n    float kick = kick_sound(t4) *.6;\n    \n    float clap = clap_sound(t8_4) *.4;\n    \n    vec2 hihat = vec2(0);\n    int hat_index = (tick + 2)/4;\n    if(((0xbaba >> hat_index) & 1) != 0) hihat = vec2(hihat_open_sound(t4_2) *.1);\n    else if(((0x0404 >> hat_index) & 1) != 0) hihat = hihat_3(t4_2) * .2;\n    else hihat = hihat_2(t4_2) * .2;\n    \n    int index = index_map[tick];\n    float duration = timing[index + 1] - timing[index];\n    float melody_t = t - timing[index];\n    float melody_tick = melody_t / duration;\n    \n    float hi_note = hi_notes[index];\n    float hi_pitch = FREQUENCY_FACTOR * exp2(hi_note/12.);\n    vec2 melody_hi = vec2(.3,.25) * hi_sound(melody_tick, melody_t * hi_pitch) * sign(hi_note);\n    \n    float lo_note = lo_notes[index];\n    float lo_pitch = FREQUENCY_FACTOR * exp2(lo_note/12.) * .5;\n    vec2 melody_lo = vec2(.25,.3) * lo_sound(melody_tick, melody_t * lo_pitch) * sign(lo_notes[index]);\n    \n    return AMPLITUDE_FACTOR * vec2(\n        1.*bass +\n        1.*kick +\n        1.*hihat+\n        1.*clap +\n        1.*melody_hi+\n        1.*melody_lo);\n}","name":"Sound","description":"","type":"sound"}]}