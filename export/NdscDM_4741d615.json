{"ver":"0.1","info":{"id":"NdscDM","date":"1642191572","viewed":94,"name":"Genuary 2022 - Day 14","username":"d_dorazio","description":"My genuary 2022 - Day 14 sketch","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["sdf"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"precision highp float;\n\n\nvec3 cameraPos = vec3(0., 0.25, -1.5);\nvec3 lookAt = vec3(0,0,0);\nvec3 lightPos = vec3(-0.25, 4., -8);\nvec3 diffuseCol = vec3(0.2, 0.7, 0.5);\n\n\nfloat sdSphere(float r, vec3 pos)\n{\n    return length(pos) - r;\n\n}\n\nfloat sdPlane( vec3 pos, vec3 n, float h )\n{\n  return dot(pos, n) + h;\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\nfloat sunion( float d1, float d2, float k ) {\n    float h = clamp( 0.5 + 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) - k*h*(1.0-h); }\n\nfloat ssub( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2+d1)/k, 0.0, 1.0 );\n    return mix( d2, -d1, h ) + k*h*(1.0-h); }\n\nfloat sand( float d1, float d2, float k ) {\n    float h = clamp( 0.5 - 0.5*(d2-d1)/k, 0.0, 1.0 );\n    return mix( d2, d1, h ) + k*h*(1.0-h); }\n    \n\nfloat scene(vec3 pos)\n{    \n\n    vec3 p = mod(pos + 0.5*vec3(0.4), vec3(0.4))-0.5*vec3(0.4);\n    float dd = sdSphere(0.1, p);\n    \n    \n    pos.x = abs(pos.x);\n    pos.x -= 0.6;\n    pos.y = pos.y + sin(iTime)*0.05;\n    \n    float ds = sdSphere(0.5, pos);\n    float sdC1 = sdCapsule(pos, vec3(0.0, 1.0, -0.0), vec3(0.0, -1.0, 0.0),   0.2);\n    float sdC2 = sdCapsule(pos, vec3(-1, 0, -0.), vec3(1.0, .0, -0.),         0.3);\n    \n    float d = ssub(sunion(sdC1, sdC2, 0.1), ds, 0.1);\n    d = ssub(sdSphere(0.1+0.3*(cos(iTime)*0.5+0.5), pos+vec3(0,0,0.4)), ds, 0.1);\n    \n    d = sunion(d, sdPlane(pos, vec3(0, 1, 0), 0.1) + 0.03*(sin(pos.x*30.0)*0.5+0.5), 0.2);\n    \n    \n    return max(d, -dd);\n    \n}\n\nvec3 normal(vec3 pos)\n{\n    float eps = 0.001;\n\n    float gx = scene(pos + vec3(eps, 0, 0)) - scene(pos - vec3(eps, 0, 0));\n    float gy = scene(pos + vec3(0, eps, 0)) - scene(pos - vec3(0, eps, 0));\n    float gz = scene(pos + vec3(0, 0, eps)) - scene(pos - vec3(0, 0, eps));\n\n    vec3 normal = vec3(gx, gy, gz);\n\n    return normalize(normal);\n}\n\n\nfloat shadow(vec3 ro, vec3 rd)\n{\n    float t = 0.1;\n    float res = 1.0;\n    \n    for (int i = 0; i < 10; ++i) {\n          float d = scene(ro + t * rd);\n          if (d < 0.001) {\n              return d;\n          }\n          res = min(res, d/t);\n          t += d;\n    }\n    \n    return res;\n}\n\n\nvec3 march(vec3 ro, vec3 rd)\n{\n    float t = 0.0;\n    for (int i = 0; i < 128; ++i) {\n        vec3 pos = ro + t * rd;\n        float d = scene(pos);\n        \n        if (d < 0.001) {\n            vec3 n = normal(pos);\n            \n            vec3 lr = normalize(lightPos + vec3(cos(iTime)*0.5+0.5, 0., sin(iTime)*0.5+0.5) - pos);\n\n            vec3 col = (diffuseCol + vec3(0, 0, 0.3 * sin(iTime) * sin(pos.x*4.0)  )) * max(0.0, dot(n, lr));\n\n            return mix(vec3(0), col, shadow(pos, lr));\n        }\n        \n        t += d;\n    }\n    \n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    \n    \n    vec3 ro = cameraPos;\n    vec3 rd = vec3(xy.x, xy.y, 1);\n    \n    vec3 color = pow(march(ro, rd), vec3(0.4545));\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}