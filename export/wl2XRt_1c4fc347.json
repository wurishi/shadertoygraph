{"ver":"0.1","info":{"id":"wl2XRt","date":"1566834359","viewed":107,"name":"Mandelbrot set tutorial","username":"matistjati","description":"Element√§r mandelbrot-set renderare","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["varsgod"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mandelbrot(vec2 pos, vec2 b)\n{\n    vec2 z = pos;\n    b/=(abs(pos.x)+abs(pos.y));\n    const float maxIter = 1024.;\n    \n    float iP;\n    for (float i = 0.;i < maxIter; i++) \n    {\n        if (dot(z,z)>8.) break;\n\t\tz = mat2(z, -z.y, z.x) * z + b * mat2(z,-z.y,z.x) * z + b;\n        iP++;\n     }\n    \n    iP /= maxIter;\n    return sqrt(sqrt(texture(iChannel0, vec2(iP*atan(z.y,z.x), iP*length(z))).xyz* iP*abs(z.y)));\n    //return vec3(iP)*vec3(0.707,0,0.707)*z.x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord)/iResolution.xy * 2. - 1.;\n\tuv.x *= iResolution.x/iResolution.y;\n    // Time varying pixel color\n    vec3 col;\n    if (iMouse.x==0.&&iMouse.y==0.)\n    {\n    \tcol = mandelbrot(uv, vec2(cos(iTime*0.25)*sin(iTime*0.125), sin(iTime*0.25)));\n    }\n    else\n    {\n    \tcol = mandelbrot(uv, iMouse.xy/iResolution.xy*2.-1.); \n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}