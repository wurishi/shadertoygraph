{"ver":"0.1","info":{"id":"DlXGRs","date":"1672207063","viewed":229,"name":"Bootleg Clouds SDF","username":"MysteryPancake","description":"Using an invalid SDF to ensure the raymarcher never converges results in clouds :)","likes":11,"published":3,"flags":0,"usePreview":0,"tags":["3d","raymarching","raymarch","sdf","clouds","cloud","bootleg"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// From https://www.shadertoy.com/view/Xds3zN\nmat3 setCamera(in vec3 ro, in vec3 ta, float cr) {\n\tvec3 cw = normalize(ta - ro);\n\tvec3 cp = vec3(sin(cr), cos(cr), 0.0);\n\tvec3 cu = normalize(cross(cw, cp));\n\tvec3 cv = cross(cu,cw);\n    return mat3(cu, cv, cw);\n}\n\n// Invalid SDF, distance never reaches 0\nfloat map(vec3 p, float r) {\n    float d = 8.0;\n    // 6 grids of overlapping circles\n    for (float i = 0.0; i < 6.0; i++) {\n        vec3 offset = vec3(i * 4.2, i * 0.5, i * 3.4);\n        float grid = length(mod(p + offset, 6.0) - 3.0);\n        // Negative radius, ensures no convergence\n        d = min(grid + r, d);\n    }\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\n    vec2 q = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y;\n    \n    const float fov = 1.0;\n    vec3 ro = vec3(iTime * 8.0, 0.0, 0.0);\n    mat3 ca = setCamera(ro, vec3(-1.0, 0.0, 0.0), 0.0);\n    vec3 rd = ca * normalize(vec3(q, fov));\n    \n    // Animate radius over time\n    float radius = -cos(iTime) + 2.0;\n\n    // Raymarching with only 8 iterations produces clouds\n    float dist = 1.0;\n    for (int i = 0; i < 8; i++) {\n        // Don't bother checking for convergence\n        dist += map(ro + rd * dist, radius);\n    }\n    float light = 12.0 + radius * 6.0;\n    float shade = pow(light / dist, 2.0);\n    fragColor = vec4(0.0, shade * light / dist, shade, 1.0);\n}","name":"Image","description":"","type":"image"}]}