{"ver":"0.1","info":{"id":"dtfcDj","date":"1691174177","viewed":71,"name":"frosted mirror","username":"pik","description":"raymarch,reflect,bumpmap,gyroid,color","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["reflect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//TNX   https://www.shadertoy.com/view/4dt3zn\n\n#define time iTime\n#define S smoothstep\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define PI 3.14159265\n\n#define shadow 0\n\nconst float eps=0.0001;\nconst float MAXDIST=15.;\nconst vec3 ambient=vec3(0.005);\nconst float intensity=1.;\nconst float ref=0.7;\n\nstruct Material{\n    float id;\n    float specular;\n    vec3 speccolor;\n};\nconst Material material1=Material(1.,2.,vec3(0.7));\nconst Material material2=Material(2.,30.,vec3(0.9));\n\nfloat smax(float a,float b, float k)\n{\n    float h=clamp(0.5+0.5*(b-a)/k,0.,1.);\n    return mix(b,a,h)-k*h*(1.-h);\n}\n\nvec3 path(float t){\n    return vec3(0.,0.,time);\n}\n\nvec3 setcam(vec2 uv,vec3 ro,vec3 target,vec3 up,float FoV){\n    vec3 forward=normalize(target-ro);\n    vec3 right=normalize(cross(forward,up));\n    up=cross(right,forward);\n    return normalize(right*uv.x+up*uv.y+forward*FoV);\n}\n\nfloat box(vec3 p,vec3 s,float e){\n    p=abs(p)-s;\n    return length(max(p,0.))+min(max(p.x,max(p.y,p.z)),0.)-e;\n}\n\nfloat gyroid(vec3 p,float s,float t)\n{\n    p.yz*=rot(-time*0.5);\n    p.xz*=rot(-time*0.7);\n    p*=s;\n    return abs(dot(sin(p),cos(p.zxy))/s)-t;\n}\n\nfloat gyroidbox(vec3 p){\n    float d=box(p,vec3(0.5),0.5);\n    d=abs(d)-0.03;\n    float gy=gyroid(p,17.,0.05);\n    float s=abs(length(p)-1.2)-0.05;\n    float gy2=gyroid(p,10.,0.05);\n    d=smax(d,gy,-0.08);\n    s=smax(s,gy2,-0.08);\n    float f=abs(mod(time+7.3,4.*PI)-2.*PI);\n    return mix(s,d,S(PI-1.,PI+1.,f));\n}\n\nfloat object(vec3 p,float t){\n    p-=path(time);\n    p.xy*=rot(time*0.2);\n    p.xz*=rot(time*0.1);\n    float d2=gyroidbox(p);\n    return d2;\n}\n\nfloat tunnel(in vec3 p,float r){\n    float n=4.;\n    float pid=floor(p.z/n);\n    p.z=mod(p.z,n)-n*0.5;\n    //p-=vec3(sin(fract(sin(pid*20.)*297.)+time*6.)*0.1*r,sin(fract(sin(pid*33.)*97.)+time*4.3)*0.13*r,0.);\n    vec2 q=abs(p.xy)-vec2(r);\n    float b=length(max(q,0.))+min(max(q.x,q.y),0.);\n    vec2 s=vec2(abs(b)-0.3,abs(p.z)-1.8);\n    float d=length(max(s,0.))+min(max(s.x,s.y),0.);\n    return d-fract(sin(dot(p,vec3(76.,-21.,-9966.)))*16.)*0.00001*pow(sin(time)*0.5+0.5,5.);\n}\n\nvec2 map(vec3 p){\n    float d1=object(p,time);\n    float d2=tunnel(p,3.);\n    float f=min(d1,d2);\n    float id;\n    if(f==d1) id=1.;\n    else id=2.;\n    return vec2(f,id);\n}\n\nvec2 refmap(vec3 p){\n    float d1=object(p,time+PI*0.5);\n    float d2=tunnel(p,3.);\n    float f=min(d1,d2);\n    float id;\n    if(f==d1) id=1.;\n    else id=2.;\n    return vec2(f,id);\n}\n\nMaterial getmaterial(vec3 p,float id){\n    Material material;\n    if(id==1.)material=material1;\n    else if(id==2.) material=material2;\n    return material;\n}\n\nvoid raymarch(inout vec3 p,in vec3 rd,inout Material material){\n    float l=0.;\n    vec3 ro=p;\n    for(int i=0;i<69;i++){\n        p=ro+rd*l;\n        vec2 d=map(p);\n        if(abs(d.x)<eps){\n            material=getmaterial(p,d.y);\n            break;\n        }\n        if(l>MAXDIST){\n            material.id=0.;\n            break;\n        }\n        l+=d.x;\n    }\n}\n\nvoid refmarch(inout vec3 p,in vec3 rd,inout Material material){\n    float l=0.;\n    vec3 ro=p;\n    for(int i=0;i<40;i++){\n        p=ro+rd*l;\n        vec2 d=refmap(p);\n        if(abs(d.x)<eps){\n            material=getmaterial(p,d.y);\n            break;\n        }\n        if(l>MAXDIST){\n            material.id=0.;\n            break;\n        }\n        l+=d.x;\n    }\n}\n\nvec3 normal(vec3 p){\n    vec2 e=vec2(eps,0.);\n    float f=map(p).x;\n    return normalize(vec3(f-map(p-e.xyy).x,\n                          f-map(p-e.yxy).x,\n                          f-map(p-e.yyx).x));\n}\n\nvec3 refnormal(vec3 p){\n    vec2 e=vec2(eps,0.);\n    float f=refmap(p).x;\n    return normalize(vec3(f-refmap(p-e.xyy).x,\n                          f-refmap(p-e.yxy).x,\n                          f-refmap(p-e.yyx).x));\n}\n\nvec3 getcolor(vec3 p,Material material){\n    float f=material.id;\n    vec3 col;\n    if(f==2.){\n        float n=4.;\n        float pid=floor(p.z/n);\n        p.z=mod(p.z,n)-n*0.5;\n        pid=floor(20.*fract(pid*4.67))/20.;\n        p.x=mod(p.x,pid)-pid*0.5;\n        p.y=mod(p.y,pid*2.)-pid;\n        col=vec3(0.8)*step(0.1,abs(p.x-p.y-0.5*sin(p.z*pid*5.)));\n    }\n    if(f==1.) col=vec3(0.2,0.5,0.6)+sin(normalize(normal(p))+time*2.);\n    return col;\n}\n\nvec3 lighting(in vec3 p,vec3 ro,vec3 rd,vec3 n,vec3 lp,Material material){\n    vec3 ld=(lp-p);\n    float lightdist=max(length(lp-p),eps);\n    ld/=lightdist;\n    float atten=1./lightdist*lightdist;\n    float diff=clamp(dot(ld,n),0.1,1.);\n    float spec=pow(clamp(dot(reflect(-ld,n),-rd),0.,1.),material.specular);\n    float objectdist=length(p-ro);\n    float fog=S(0.,1.,objectdist/MAXDIST);\n    vec3 col=getcolor(p,material);\n    col=(col*diff+ambient+material.speccolor*spec*intensity)*atten;\n    col=mix(col,vec3(0.),fog);\n    return col;\n}\n\nfloat softshadow(in vec3 p,vec3 ld){\n    float shade=1.;\n    float l=eps;\n    vec3 ro=p;\n    for(int i=0;i<20;i++){\n        p=ro+ld*l;\n        float d=map(p).x;\n        shade=min(shade,S(0.,1.,16.*d/l));\n        if(d<0. || l>10.) break;\n        l+=max(d,0.02);\n    }\n    shade=max(shade,0.);\n    return min(1.,shade+0.55);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy*2.-1.;\n    uv.x*=iResolution.x/iResolution.y;\n    uv-=(iMouse.xy/iResolution.xy*2.-1.)*0.5;\n    vec3 col;\n    vec3 target=path(time);\n    vec3 ro=target+vec3(0.,0.,-4.+sin(time*0.3));\n    vec3 rd=setcam(uv,ro,target,normalize(vec3(0.,1.,0.)),1.);\n    vec3 lp=target;\n    Material material;\n    vec3 p=ro;\n    raymarch(p,rd,material);\n    vec3 n=normal(p);\n    vec3 matcol=lighting(p,ro,rd,n,lp,material);\n    //shade\n    vec3 ld=(lp-p)/max(length(lp-p),eps);\n    #ifdef shadow\n        float shade=softshadow(p+n*eps,ld);\n    #endif\n    //reflection\n    if(material.id==2.){\n        p+=n*0.01;\n        rd=reflect(rd,n);\n        refmarch(p,rd,material);\n        n=refnormal(p);\n        vec3 refcol=lighting(p,ro,rd,n,lp,material)*ref;\n        matcol=mix(matcol,refcol,vec3(mix(0.5,0.99,pow(sin(time*0.2+3.)*0.5+0.5,3.))));\n    }\n    col=matcol;\n    \n    #ifdef shadow\n        col*=min(shade,0.5);\n    #endif\n    col=pow(col,vec3(1./2.2));\n    fragColor=vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}