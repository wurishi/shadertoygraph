{"ver":"0.1","info":{"id":"slfXR4","date":"1625229608","viewed":121,"name":"Big Bad Cube","username":"MerlinSleeps","description":"An evil looking Cube","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["cube","evil"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvA = fragCoord / iChannelResolution[0].xy;\n    vec2 uvB = fragCoord / iChannelResolution[1].xy;\n\n    // Output to screen\n    // Fragment is the sum of both gradients: red to green\n    fragColor = texture(iChannel0, uvA); // * texture(iChannel1, uvB);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n\n#define COLOR_BACK vec3(0.10, 0.10, 0.10)\n#define COLOR_TRACE vec3(0.10, 1.10, 0.50)\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n//fusions\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n//fusion\n//end\n\nfloat sdBox(vec3 p, vec3 s) {\n    float sphere = length(p) - 1.2;\n    p = abs(p)-s;\n\tfloat cube = length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n    //cube = differenceSDF(cube, sphere);\n    return cube;\n}\n\nfloat sdHexagonalBody(vec3 p, vec2 s) {\n    vec3 k = vec3(-0.86, 0.5, 0.57);\n    p = abs(p);\n    p.xy -= 2.0 * min(dot(k.xy, p.xy), 0.)*k.xy;\n    vec2 d = vec2(length(p.xy - vec2(clamp(p.x,-k.z*s.x, k.z*s.x), s.x)) * sign(p.y - s.x), p.z - s.y);\n    return min(max(d.x, d.y), 0.) + length(max(d,0.));\n    \n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n\tp *= scale;\n    return abs(dot(sin(p), cos(p.zxy))-bias)/scale-thickness;\n}\n\nvec3 Transform(vec3 p) {\n    p.xy *= Rot(p.z*.15);\n\tp.z -= iTime*.1;\n    p.y -= .3;\n    return p;\n}\n\nfloat GetDist(vec3 p) {\n    //p = Transform(p);\n    \n    float box = sdBox(p, vec3(1)); // sdHexagonalBody(p, vec2(1));\n   \t//float sphere = length(p) - 1.;\n    //box = differenceSDF(box, sphere);\n    \n    \n   \tfloat g1 = sdGyroid(p, 15.23, .03, .4);\n    float g2 = sdGyroid(p, 10.76, .03, .3);\n    float g3 = sdGyroid(p, 20.76, .03, .3);\n    float g4 = sdGyroid(p, 35.76, .03, .3);\n    float g5 = sdGyroid(p, 60.76, .03, .3);\n    float g6 = sdGyroid(p, 110.76, .03, .3);\n    //float g = min(g1, g2); // union\n    //float g = max(g1, -g2); // subtraction\n    g1 -= g2*.4;\n    g1 -= g3*.3;\n    g1 += g4*.2;\n    g1 += g5*.2;\n    g1 += g6*.3;\n    \n    //float d = g1*.8;\n    float d = max(box, g1*.8);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.02, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 Background(vec3 rd) {\n\tvec3 col = vec3(1);\n    float t = iTime;\n    \n    float y = rd.y;\n    \n    col -= abs(y)+.5*vec3(0.1, .7, .7)*2.;\n    \n    float a = atan(rd.x, rd.z);\n    float flames = sin(a*10.+t)*sin(a*7.-t)*sin(a*6.);\n    flames *= S(.8, .5, y);\n    flames *= S(-.8, -.5, y);\n    col += flames;\n    col = max(col, 0.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime;\n    vec3 col = vec3(0);\n    \n    uv += sin(uv*20.+t*.5) * 0.002;\n    \n    vec3 ro = vec3(0, 3., -3); //origin (Use vec3(0, 3, -3) as default\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 lookat = vec3(0,1,0);\n    vec3 rd = GetRayDir(uv, ro, lookat, .8);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n        float height = p.y;\n        \n        p = Transform(p);\n        \n    \tfloat dif = n.y*.5+.5;\n    \tcol += dif*dif;  \n        \n        float g2 = sdGyroid(p, 10.76, .03, .3);\n        col *= S(-.1, .1, g2);\t// blackening\n        \n        float crackWidth = -.02+S(0., -.5, n.y)*.04;\n        float cracks = S(crackWidth, -.03, g2);\n        float g3 = sdGyroid(p+t*.1, 5.76, .03, .0);\n        float g4 = sdGyroid(p-t*.05, 4.76, .03, .0);\n        \n        cracks *= g3*g4*20.+.2*S(.2, .0, n.y);\n        \n        col += cracks*vec3(8., .3, .5)*3.;\n        float g5 = sdGyroid(p-vec3(0,1,0), 3.76, .03, .0);\n        \n        col += g5*vec3(0.4,.1,.0);\n        \n       col += S(0., -2., height)*vec3(0.36, 0.08, 0.14); //reflection\n        \n    }\n    //col = mix(col, Background(rd), S(0., 7., d));\n    //col = Background(rd);\n    \n    col *= 1.-dot(uv,uv)/2.;\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n#define MAX_STEPS 100\n#define MAX_DIST 100.\n#define SURF_DIST .001\n\n#define S(a, b, t) smoothstep(a, b, t)\n\n#define COLOR_BACK vec3(0.10, 0.10, 0.10)\n#define COLOR_TRACE vec3(0.10, 1.10, 0.50)\n\nmat2 Rot(float a) {\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\n//fusions\nfloat intersectSDF(float distA, float distB) {\n    return max(distA, distB);\n}\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat differenceSDF(float distA, float distB) {\n    return max(distA, -distB);\n}\n//fusion\n//end\n\nfloat sdBox(vec3 p, vec3 s) {\n    float sphere = length(p) - 1.;\n    p = abs(p)-s;\n\tfloat cube = length(max(p, 0.)) + min(max(p.x, max(p.y, p.z)), 0.);\n    //cube = differenceSDF(cube, sphere);\n    return sphere;\n}\n\nfloat sdHexagonalBody(vec3 p, vec2 s) {\n    vec3 k = vec3(-0.86, 0.5, 0.57);\n    p = abs(p);\n    p.xy -= 2.0 * min(dot(k.xy, p.xy), 0.)*k.xy;\n    vec2 d = vec2(length(p.xy - vec2(clamp(p.x,-k.z*s.x, k.z*s.x), s.x)) * sign(p.y - s.x), p.z - s.y);\n    return min(max(d.x, d.y), 0.) + length(max(d,0.));\n    \n}\n\nfloat sdGyroid(vec3 p, float scale, float thickness, float bias) {\n\tp *= scale;\n    return abs(dot(sin(p), cos(p.zxy))-bias)/scale-thickness;\n}\n\nvec3 Transform(vec3 p) {\n    p.xy *= Rot(p.z*.15);\n\tp.z -= iTime*.1;\n    p.y -= .3;\n    return p;\n}\n\nfloat GetDist(vec3 p) {\n    //p = Transform(p);\n    \n    float box = sdBox(p, vec3(1)); //sdHexagonalBody(p, vec2(1));\n   \t//float sphere = length(p) - 1.2;\n    //box = differenceSDF(box, sphere);\n    \n    \n   \tfloat g1 = sdGyroid(p, 5.23, 1.03, 1.4);\n    float g2 = sdGyroid(p, 10.76, .03, .3);\n    float g3 = sdGyroid(p, 20.76, .03, .3);\n    float g4 = sdGyroid(p, 35.76, .03, .3);\n    float g5 = sdGyroid(p, 60.76, .03, .3);\n    float g6 = sdGyroid(p, 110.76, .03, .3);\n    //float g = min(g1, g2); // union\n    //float g = max(g1, -g2); // subtraction\n    g1 -= g2*.4;\n    g1 -= g3*.3;\n    g1 += g4*.2;\n    g1 += g5*.2;\n    g1 += g6*.3;\n    \n    //float d = g1*.8;\n    float d = max(box, g1*.8);\n    return d;\n}\n\nfloat RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        float dS = GetDist(p);\n        dO += dS;\n        if(dO>MAX_DIST || abs(dS)<SURF_DIST) break;\n    }\n    \n    return dO;\n}\n\nvec3 GetNormal(vec3 p) {\n\tfloat d = GetDist(p);\n    vec2 e = vec2(.02, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy),\n        GetDist(p-e.yxy),\n        GetDist(p-e.yyx));\n    \n    return normalize(n);\n}\n\nvec3 GetRayDir(vec2 uv, vec3 p, vec3 l, float z) {\n    vec3 f = normalize(l-p),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f,r),\n        c = p+f*z,\n        i = c + uv.x*r + uv.y*u,\n        d = normalize(i-p);\n    return d;\n}\n\nvec3 Background(vec3 rd) {\n\tvec3 col = vec3(1);\n    float t = iTime;\n    \n    float y = rd.y;\n    \n    col -= abs(y)+.5*vec3(0.1, .7, .7)*2.;\n    \n    float a = atan(rd.x, rd.z);\n    float flames = sin(a*10.+t)*sin(a*7.-t)*sin(a*6.);\n    flames *= S(.8, .5, y);\n    flames *= S(-.8, -.5, y);\n    col += flames;\n    col = max(col, 0.);\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n\tvec2 m = iMouse.xy/iResolution.xy;\n    float t = iTime;\n    vec3 col = vec3(0);\n    \n    uv += sin(uv*20.+t*.5)*.01;\n    \n    vec3 ro = vec3(0, 3., -3); //origin (Use vec3(0, 3, -3) as default\n    ro.yz *= Rot(-m.y*3.14+1.);\n    ro.xz *= Rot(-m.x*6.2831);\n    \n    vec3 lookat = vec3(0,1,0);\n    vec3 rd = GetRayDir(uv, ro, lookat, .8);\n\n    float d = RayMarch(ro, rd);\n    \n    if(d<MAX_DIST) {\n    \tvec3 p = ro + rd * d;\n    \tvec3 n = GetNormal(p);\n        \n        float height = p.y;\n        \n        p = Transform(p);\n        \n    \tfloat dif = n.y*.5+.5;\n    \tcol += dif*dif;  \n        \n        float g2 = sdGyroid(p, 10.76, .03, .3);\n        col *= S(-.1, .1, g2);\t// blackening\n        \n        float crackWidth = -.02+S(0., -.5, n.y)*.04;\n        float cracks = S(crackWidth, -.03, g2);\n        float g3 = sdGyroid(p+t*.1, 5.76, .03, .0);\n        float g4 = sdGyroid(p-t*.05, 4.76, .03, .0);\n        \n        cracks *= g3*g4*20.+.2*S(.2, .0, n.y);\n        \n        col += cracks*vec3(.0, .4, .6)*3.;\n        float g5 = sdGyroid(p-vec3(0,1,0), 3.76, .03, .0);\n        \n        col += g5*vec3(0.4,.1,.0);\n        \n       col += S(0., -2., height)*vec3(0., 0.3, 0.9); //reflection\n        \n    }\n    //col = mix(col, Background(rd), S(0., 7., d));\n    //col = Background(rd);\n    \n    col *= 1.-dot(uv,uv);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}