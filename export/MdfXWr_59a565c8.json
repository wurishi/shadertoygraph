{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\nvec3 pastelizer(float h) {\n\n    h *= 6.2831853071796;\n    float hs = 1.0 / (4.08699 - sin(h));\n    float x = (0.715474 - 0.41442 * cos(h)) * hs;\n    float z = 4.82215 * hs - 0.333333 * x - 0.920933;\n    \n    float tx = x * 3.2409699419045214 - z * 0.49861076029300328 - 0.28316525509623425;\n    float ty = x * -0.96924363628087983 + z * 0.041555057407175613 + 0.3455279229451954;\n    float tz = x * 0.055630079696993609 + z * 1.0569715142428786 - 0.037569805914516544;\n    \n    return clamp(vec3(tx,ty,tz), 0.0, 1.0) * 0.9 + 0.1;\n}\n\nvec3 hsv2rgbc(vec3 c) {\n    vec3 rgb = pastelizer(c.x);\n    rgb = smoothstep(vec3(0.0),vec3(1.0),rgb);\n    return c.z * mix(vec3(1.0), rgb, c.y);\n}\n\nvec3 lin2srgb(vec3 color) {\n    vec3 S1 = sqrt(color);\n    vec3 S2 = sqrt(S1);\n    vec3 S3 = sqrt(S2);\n    return 0.585122381 * S1 + 0.783140355 * S2 - 0.368262736 * S3;\n}\n\nvec3 ff_filmic_gamma3(vec3 linear) {\n    vec3 x = max(vec3(0.0), linear-0.004);\n    return (x*(x*6.2+0.5))/(x*(x*6.2+1.7)+0.06);\n}\n\nfloat specular(float r, float cos_Oh) {\n    float a = r*r;\n    float a2 = a*a;\n    float Dd = max(0.00015, cos_Oh*cos_Oh*(a2 - 1.0)+1.0);\n    return a2/(3.14159*Dd*Dd);\n}\n\nfloat specular2(float a, float cos_Ov, float cos_Ol) {\n    float r = (a+1.0); \n    float k = (r*r) / 8.0;\n    float ik = 1.0 - k;    \n    float Gdlvh = 4.0 * (cos_Ov*ik + k) * (cos_Ol*ik + k);    \n    return (1.0 / Gdlvh);\n}\n\nfloat fresnel(float cos_Od) {\n    float p = (-5.55473*cos_Od-6.98316)*cos_Od;\n    return 0.04 + (1.0 - 0.04)*pow(2.0, p);\n}\n\nfloat random(vec3 co) {\n    return fract(sin(dot(co.xyz,vec3(12.9898,78.233,91.1743))) * 43758.5453);\n}\n\nfloat map(vec3 p) {\n\tfloat s = length(p)-1.0;\n\t\n\treturn s + snoise((p*10.0 + iTime)-0.8)*0.005;\n}\n\nvec3 grad(vec3 p) {\n\tvec2 d = vec2(0.01, 0.0);\n\treturn normalize(vec3(\n\t\t\tmap(p + d.xyy) - map(p - d.xyy),\n\t\t\tmap(p + d.yxy) - map(p - d.yxy),\n\t\t\tmap(p + d.yyx) - map(p - d.yyx)\n\t\t));\n}\n\nfloat trace(vec3 rp, vec3 rd) {\n\tfloat r = 0.0;\n\tfor (int i = 0; i < 8; ++i) {\n\t\tfloat d = map(rp + rd*r);\n\t\tif (abs(d) <= 0.001) break;\n\t\tr += d;\n\t}\t\n\treturn r;\n}\n\nfloat calcAO(vec3 p, vec3 n, float radius) {\n    float s = radius/3.0;\n    float ao = 0.0;\n    for (int i = 1; i <= 3; ++i) {\n        float dist = s * float(i);\n    float t = map(p + n*dist);\n        ao += max(0.0, (dist - t) / dist);\n    }\n    return 1.0 - (ao/3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat aspect = iResolution.x/iResolution.y;\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tuv = uv*2.0-1.0;\n\tuv.x *= aspect;\n\t\n\tvec2 n2 = uv*1.2;\n\t// fake sphere normal\n\tvec3 n = vec3(n2, sqrt(1.0-n2.x*n2.x-n2.y*n2.y));\n\t// sphere uv\n\tvec2 suv = vec2(atan(n.x, n.z), n.y);\n\tvec3 p = n;\n\t\n\tfloat m = clamp((map(p)+0.005)*128.0, 0.0, 1.0);\n\tp -= n*trace(p, -n);\n\tn = grad(p);\n\n\t// material blend\n\tfloat ofsy = sin(suv.y*30.0+iTime)*0.5;\n    float m2 = clamp((sin(suv.x*5.0+suv.y*4.0+iTime)-ofsy)*9.0+ofsy,0.0,1.0);\n\t\n\t// roughness\n\tfloat r = mix(0.1, 0.3, m2);\n\t\n\tvec3 albedo = hsv2rgbc(\n        vec3(\n            (suv.y*0.5-suv.x*0.25+iTime*0.1)*0.2,\n            1.0,\n            1.0));\n\tvec3 light = vec3(1.0,0.9,0.3) * 32.0;\n    vec3 ambient = vec3(0.5,0.8,1.0) * 0.0625;\n\n\t\n\t// light vector\n\tvec3 l = normalize(vec3(cos(iTime),cos(iTime*0.1),sin(iTime))*10.0 - p);\n\t// camera vector\n\tvec3 v = normalize(vec3(0.0,0.0,5.0) - p);\n\t\n\t// half vector\n\tvec3 h = normalize(l + v);\n\n\tfloat cos_Ol = max(0.0, dot(n, l));\n\tfloat cos_Ov = max(0.0, dot(n, v));\n    float cos_Oh = max(0.0, dot(n, h));\n\tfloat cos_Od = max(0.0, dot(v,h));\n\t\n\tfloat light_lum = cos_Ol / 3.14159;\n\tfloat spec_lum = specular(r, cos_Oh) * specular2(r,cos_Ov,cos_Ol) * fresnel(cos_Od);\n\tfloat amb_lum = max(0.0, dot(n, vec3(0.0,0.0,1.0)));\n\t\n\tvec3 col = albedo * light_lum + vec3(spec_lum) * cos_Ol;\n\tcol *= light;\n\t\n\t// ambient occlusion\n\tfloat ao = calcAO(p,n,0.1);\n\t// ambient light\n\tcol += albedo * ambient * ao;\n\n    col *= amb_lum;\n\t\n\tvec2 mouse = clamp(iMouse.xy / iResolution.xy, 0.0, 1.0);\n\n    // add sensor noise\n\tfloat tt = mod(iTime, 5.0);\n\tvec3 ns = vec3(\n\t\trandom(vec3(fragCoord.xy*0.001,tt)),\n\t\trandom(vec3(fragCoord.xy*0.01,tt)),\n\t\trandom(vec3(fragCoord.xy*0.1,tt)));\n\tcol = mix(col, vec3(1.0), ns*0.01);\n\t\n\tfloat lightness = dot(l, vec3(0.0,0.0,-1.0))*0.5+0.5;\n\t\n\t// adjust exposure\n\tcol *= pow(2.0, mix(-4.0, 4.0, lightness));\n\n\tmouse = mouse*2.0-1.0;\n\tmouse.x *= aspect;\n\t\n\tif (uv.x > mouse.x)\n\t\tcol = ff_filmic_gamma3(col);\t\n\telse\n\t\tcol = lin2srgb(clamp(col,0.0,1.0));\t\n\t\n\tcol *= clamp(abs(uv.x-mouse.x)*320.0, 0.0, 1.0);\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MdfXWr","date":"1399069482","viewed":2569,"name":"Filmic Tonemapping","username":"paniq","description":"with fake auto-exposure; hold/drag to compare bare/tonemapped (X axis); left: regular, right: filmic","likes":25,"published":1,"flags":0,"usePreview":0,"tags":["tonemapping","filmic"],"hasliked":0,"parentid":"","parentname":""}}