{"ver":"0.1","info":{"id":"sd3Szs","date":"1633875875","viewed":95,"name":"Fire_shader_sidps","username":"kingcrimson1112","description":"A fire shader using perlin noise and fractal noise.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","perlinnoise","fire","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//----------------------------------------------------\n// PERLIN_NOISE_GENERATOR\n//----------------------------------------------------\n\nfloat fade(float t)\n{\n    return t * t * t * (t * ((t * 6.0f) - 15.0f) + 10.0f);\n}\n\nfloat grad(int hash, float x, float y, float z)\n{\n    int h = hash & 15;\n    // Convert lower 4 bits of hash into 12 gradient directions\n    float u = (h < 8) ? x : y,\n           v = ((h < 4) ? y : (h == 12 || h == 14 ? x : z));\n    return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n}\n\nint[512] p=int[512](151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,\n             8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,\n             35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,\n             134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,\n             55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,\n             18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226,\n             250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182,\n             189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167,\n             43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246,\n             97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239,\n             107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n             138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180,\n             151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142,\n             8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117,\n             35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71,\n             134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41,\n             55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89,\n             18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226,\n             250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182,\n             189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167,\n             43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246,\n             97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239,\n             107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n             138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180);\n\n// Returns noise value for position\nfloat noise(float x, float y, float z)\n{  \n    // Find the unit cube that contains the point\n    int X = int(floor(x)) & 255;\n    int Y = int(floor(y)) & 255;\n    int Z = int(floor(z)) & 255;\n\n    // Find relative x, y,z of point in cube\n    x -= floor(x);\n    y -= floor(y);\n    z -= floor(z);\n    \n    // Compute fade curves for each of x, y, z\n    float u = fade(x);\n    float v = fade(y);\n    float w = fade(z);\n\n    // Hash coordinates of the 8 cube corners\n    int A = p[X] + Y;\n    int AA = p[A] + Z;\n    int AB = p[A + 1] + Z;\n    int B = p[X + 1] + Y;\n    int BA = p[B] + Z;\n    int BB = p[B + 1] + Z;\n\n    // Add blended results from 8 corners of cube\n    float res = mix(\n        mix(\n            mix(grad(p[AA], x, y, z),\n                 grad(p[BA], x - 1.0f, y, z),\n                 u),\n            mix(grad(p[AB], x, y - 1.0f, z),\n                 grad(p[BB], x - 1.0f, y - 1.0f, z),\n                 u),\n            v),\n        mix(\n            mix(grad(p[AA + 1], x, y, z - 1.0f),\n                 grad(p[BA + 1], x - 1.0f, y, z - 1.0f),\n                 u),\n            mix(grad(p[AB + 1], x, y - 1.0f, z - 1.0f),\n                 grad(p[BB + 1], x - 1.0f, y - 1.0f, z - 1.0f),\n                 u),\n            v),\n        w);\n    return (res + 1.0f) / 2.0f;\n}\n//----------------------------------------------------\n//----------------------------------------------------\n\n\n//----------------------------------------------------\n// OCTAVE_NOISE_GENERATOR\n//----------------------------------------------------\n#define IMAGE_ROWS 50\n#define SCALE 17.5f\n#define SCALE_FROM_CENTER 1\n#define LEVEL_OF_DETAIL 0\n#define SMOOTH_INVERSE_LERP 1\n#define OCTAVES 4\n#define PERSISTANCE 0.5f\n#define LACUNARITY 2.0f\n#define NORMALIZE_OFFSET 1\n\n// Inverse Lerp Function\nfloat linear_step(float l, float u, float a)\n{\n    return clamp(((a - l) / (u - l)), 0.0f, 1.0f);\n}\n\n// Gets the perlin noise for point b/w 0.0 and 1.0\nfloat perlin(vec2 pos, float z)\n{\n    return noise(pos.x, pos.y, z);\n}\n\nfloat get_octave_noise(vec2 pos, float z, float s)\n{\n    float rows = float(IMAGE_ROWS);\n    pos *= rows;\n    float columns = rows * (iResolution.x / iResolution.y);\n    float scale = float(SCALE);\n    if(scale <= 0.0f)\n    {\n        scale = 0.001f;\n    }\n    \n    int octaves = int(OCTAVES);\n    float lacunarity = max(LACUNARITY, 1.0f);\n    float persistence = min(PERSISTANCE, 1.0f);\n    \n    float halfX = 0.0f;\n    float halfY = 0.0f;\n#if SCALE_FROM_CENTER\n    halfX = columns / 2.0f;\n    halfY = rows / 2.0f;\n#endif\n\n    float amplitude = 1.0f;\n    float frequency = 1.0f;\n    float noiseVal = 0.0f;\n    \n    // Add LODs\n#if LEVEL_OF_DETAIL\n    pos /= float(LEVEL_OF_DETAIL);\n    pos = vec2(floor(pos.x), floor(pos.y));\n    pos *= float(LEVEL_OF_DETAIL);\n#endif\n\n    vec2 offset = 3.0f * vec2(iTime * 0.00f, iTime * -1.25f)*s;\n    \n    for (int i = 0; i < octaves; i++)\n    {\n#if NORMALIZE_OFFSET\n        float sampleX = (((pos.x-halfX) / scale) * frequency) + offset.x;\n        float sampleY = (((pos.y-halfY) / scale) * frequency) + offset.y;\n#else\n        float sampleX = (((pos.x-halfX + offset.x*scale) / scale) * frequency);\n        float sampleY = (((pos.y-halfY + offset.y*scale) / scale) * frequency);\n#endif\n        float noise = (perlin(vec2(sampleX, sampleY),z) * 2.0f) - 1.0f;\n        noiseVal += noise * amplitude;\n        // Decrease A and increase F\n        amplitude *= persistence;\n        frequency *= lacunarity;\n    }    \n\n    // Inverser lerp so that noiseval lies between 0 and 1 \n#if SMOOTH_INVERSE_LERP\n    noiseVal = smoothstep(-0.95f, 1.1f, noiseVal);\n#else\n    noiseVal = linear_step(-0.7f,0.85f,noiseVal);\n#endif\n    return noiseVal;\n}\n//----------------------------------------------------\n//----------------------------------------------------\n\n\n//----------------------------------------------------\n// FRACTAL_NOISE_GENERATOR\n//----------------------------------------------------\n#define SHARPNESS 3.5f\n#define OFFSET 1.0f\n\nfloat get_fractal_noise(vec2 pos, float z, float s)\n{\n    float rows = float(IMAGE_ROWS);\n    pos *= rows;\n    float columns = rows * (iResolution.x / iResolution.y);\n    float scale = float(SCALE);\n    if(scale <= 0.0f)\n    {\n        scale = 0.001f;\n    }\n    \n    int octaves = int(OCTAVES);\n    float lacunarity = max(LACUNARITY, 1.0f);\n    float persistence = min(PERSISTANCE, 1.0f);\n    \n    float halfX = 0.0f;\n    float halfY = 0.0f;\n#if SCALE_FROM_CENTER\n    halfX = columns / 2.0f;\n    halfY = rows / 2.0f;\n#endif\n\n    float amplitude = 1.0f;\n    float frequency = 1.0f;\n    float noiseVal = 0.0f;\n    \n    // Add LODs\n#if LEVEL_OF_DETAIL\n    pos /= float(LEVEL_OF_DETAIL);\n    pos = vec2(floor(pos.x), floor(pos.y));\n    pos *= float(LEVEL_OF_DETAIL);\n#endif\n\n    vec2 offset = 1.0f * vec2(iTime * 0.0f, iTime * -1.25f)*s;\n    vec2 shift=vec2(45.0f);\n    mat2 rot = mat2(cos(1.5), sin(1.5),\n                    -sin(1.5), cos(1.5));\n    \n    for (int i = 0; i < octaves; i++)\n    {\n#if NORMALIZE_OFFSET\n        float sampleX = (((pos.x-halfX) / scale) * frequency) + offset.x;\n        float sampleY = (((pos.y-halfY) / scale) * frequency) + offset.y;\n#else\n        float sampleX = (((pos.x-halfX + offset.x*scale) / scale) * frequency);\n        float sampleY = (((pos.y-halfY + offset.y*scale) / scale) * frequency);\n#endif\n        float noise = (perlin(vec2(sampleX, sampleY),z) * 2.0f) - 1.0f;\n        noiseVal += abs(noise) * amplitude;\n        // Decrease A and increase F\n        amplitude *= persistence;\n        frequency *= lacunarity;\n        pos=pos*rot+shift;\n    }\n\n    // Inverser lerp so that noiseval lies between 0 and 1 \n    noiseVal=linear_step(0.0f,1.5f,noiseVal);\n    return noiseVal;\n}\n\nfloat get_fractal_height(vec2 pos, float z, float s)\n{\n    float h=get_fractal_noise(pos,z,s);\n    h = OFFSET-h;\n    h = pow(h,SHARPNESS);\n    return h;\n}\n//----------------------------------------------------\n//----------------------------------------------------\nvec3 lF = vec3(1.0f,0.0f,1.25f);\nvec3 lB = vec3(1.25f,0.15f,0.75f);\nvec4 limitsF = vec4(-1.5f,1.5f,-1.0f,0.6f);\nvec4 limitsB = vec4(-1.5f,1.5f,-1.0f,0.6f);\nvec3 cF=vec3(0.0f,-0.9f,1.35f);\nvec3 cB=vec3(0.0f,-0.8f,1.5f);\nvec3 darkCol=vec3(0.6f,0.1f,0.0f);\nvec3 lightCol=vec3(1.0f,0.7f,0.0f);\n\nvec3 get_color(vec2 pos)\n{  \n   darkCol=vec3(0.0f,0.05f,0.1f);\n   lightCol=vec3(0.0f,0.85f,0.15f);\n   \n   // Get Octave Height\n   float hF = get_octave_noise(pos*lF.x,lF.y,lF.z);\n   float hB = get_octave_noise(pos*lB.x,lB.y,lB.z);\n   hF=pow(hF,1.25f)*1.1f;\n   hB*=0.75f;\n   \n   // Get Fractal Height\n   float fF=get_fractal_height(pos*lF.x,lF.y,lF.z);\n   float fB=get_fractal_height(pos*lB.x,lB.y,lB.z);\n   \n   // Apply Limits\n   vec4 limF=limitsF;\n   if(pos.x<limF.x || pos.x>limF.y || pos.y<limF.z || pos.y > limF.w)\n   {\n       hF=0.0f;\n   }\n   vec4 limB=limitsB;\n   if(pos.x<limB.x || pos.x>limB.y || pos.y<limB.z || pos.y > limB.w)\n   {\n       hB=0.0f;\n   }\n   \n   // Apply Alpha Limits\n   float h1=distance(pos,cF.xy)/cF.z;\n   h1=clamp(h1,0.0f,1.0f);\n   h1=1.0f-h1;\n   hF*=h1*1.5f;\n   \n   float h2=distance(pos,cB.xy)/cB.z;\n   h2=clamp(h2,0.0f,1.0f);\n   h2=1.0f-h2;\n   hB*=h2*1.75f;\n   \n   // Apply Fractal\n   hF*=fF;\n   hF=smoothstep(0.0f,0.35f,hF);\n   hB*=fB;\n   hB=smoothstep(0.0f,0.35f,hB);\n    \n\n   // Apply Threshold\n   if(hF<0.25f)\n   {\n       hF=0.0f;\n   }\n   if(hB<0.05f)\n   {\n       hB=0.0f;\n   }\n     \n   // Apply Color\n   vec3 col=mix(darkCol, vec3(0.0f),pos.y-0.2f*sin(1.25f*iTime));\n   if(hB>0.0f)\n   {\n       col=mix(darkCol,mix(darkCol,lightCol,0.5f),hB*1.25f);\n       if(hB<=0.06f)\n       {\n           col=vec3(0.25f*darkCol);\n       }\n   }\n   if(hF>0.0f)\n   {\n       col=mix(darkCol,lightCol,hF);\n       if(hF<=0.28f)\n       {\n           col=vec3(0.5f*darkCol);\n       }\n   }\n   return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Get UVs\n    vec2 uv=fragCoord/iResolution.xy;\n    uv=uv*2.0f-1.0f;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    // Get Color\n    vec3 col=get_color(uv);\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}]}