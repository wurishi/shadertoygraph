{"ver":"0.1","info":{"id":"wdGSzz","date":"1573226469","viewed":266,"name":"Learning color remaps LUT","username":"MoltenQwartz","description":"Learning color remaps","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["colorcorrection","lut","neuralnetwork","colorremap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Learning color remap LUT with a feedfoward neural network\n// Input .cube file representing the LUT (32x32x32) : \n// https://wwwimages2.adobe.com/content/dam/acom/en/products/speedgrade/cc/pdfs/cube-lut-specification-1.0.pdf\n// Architecture:\n//  x1 = Linear(3,3)\n//  x1 = cat(x1,relu(x1)) \n//  x2 = Linear(6,3)  \n//  x2 = cat(x2,relu(x2)) \n//  x3 = Linear(6,3)         \n//  y = sigmoid(x3)\n// LUTs can be found here\n// https://www.smallhd.com/community/movie-looks-download\n\n#define MoonShine\n//#define BBoyz2\n//#define LifeGivingTree\n\nfloat ReLU(float x)\n{\n    return max(x,0.0f);\n}\n\nfloat Sigmoid(float x)\n{\n    return 1.0/(1.0 + exp(-x));\n}\n\n#ifdef MoonShine\nconst float w0_0_0 =  1.0082, w0_0_1 =  0.8762, w0_0_2 = -1.6612;\nconst float w0_1_0 =  0.4070, w0_1_1 = -1.4202, w0_1_2 =  0.4063;\nconst float w0_2_0 = -0.5862, w0_2_1 = -0.8225, w0_2_2 = -0.3317;\nconst float b0_0 =-0.3319, b0_1 = 0.4684, b0_2 = 1.1545;\n\nconst float w1_0_0 =  1.9003,  w1_0_1 = -0.0376,  w1_0_2 = 0.5421, w1_0_3 = -1.6655, w1_0_4 = -0.6851, w1_0_5 =  0.9262;\nconst float w1_1_0 = -0.6790,  w1_1_1 = -0.7601,  w1_1_2 = 0.8033, w1_1_3 = -0.1831, w1_1_4 = -1.8519, w1_1_5 = -0.1279;\nconst float w1_2_0 = -0.8391,  w1_2_1 =  0.9619,  w1_2_2 = 1.3299, w1_2_3 =  0.6957, w1_2_4 =  0.2322, w1_2_5 =  0.6992;\nconst float b1_0 = 0.4089, b1_1 = 0.5210, b1_2 = -0.3654;\n\nconst float w2_0_0 = -0.2818,  w2_0_1 = -1.4642,  w2_0_2 = -0.1693, w2_0_3 =  0.3008, w2_0_4 = -1.8993, w2_0_5 = -1.2728;\nconst float w2_1_0 = -0.3372,  w2_1_1 =  0.6290,  w2_1_2 = -1.0604, w2_1_3 =  0.0903, w2_1_4 =  0.3167, w2_1_5 = -0.1508;\nconst float w2_2_0 = -0.9446,  w2_2_1 =  0.5049,  w2_2_2 = -0.0257, w2_2_3 = -2.6351, w2_2_4 = -1.1425, w2_2_5 = -0.3167;\nconst float b2_0 = 2.1718, b2_1 = 0.0776, b2_2 =  0.8431;\n#elif defined(BBoyz2)\nconst float w0_0_0 = -0.5517, w0_0_1 = -0.3028, w0_0_2 = -0.5047;\nconst float w0_1_0 = -0.6293, w0_1_1 = -0.9415, w0_1_2 =  0.9948;\nconst float w0_2_0 =  0.3424, w0_2_1 =  2.4356, w0_2_2 =  0.8164;\nconst float b0_0 = 1.2802, b0_1 = 1.2952, b0_2 = -0.1402;\n\nconst float w1_0_0 =  0.9383,  w1_0_1 = 0.5298,  w1_0_2 = -1.5740, w1_0_3 =  1.2354, w1_0_4 = 0.7143, w1_0_5 = -1.2374;\nconst float w1_1_0 =  0.7904,  w1_1_1 = 1.4722,  w1_1_2 = -0.9254, w1_1_3 =  1.2447, w1_1_4 = 1.4403, w1_1_5 = -0.6297;\nconst float w1_2_0 = -0.7623,  w1_2_1 = 1.1842,  w1_2_2 =  0.0342, w1_2_3 = -0.9394, w1_2_4 = 1.5592, w1_2_5 = -0.3897;\nconst float b1_0 = 0.8199, b1_1 = -0.1540, b1_2 =  0.2325;\n\n\nconst float w2_0_0 =  1.1594,  w2_0_1 = -2.0815,  w2_0_2 =  0.8324, w2_0_3 =  0.3357, w2_0_4 = -0.5477, w2_0_5 =  0.4858;\nconst float w2_1_0 = -1.4947,  w2_1_1 =  1.2469,  w2_1_2 = -0.9400, w2_1_3 = -0.0638, w2_1_4 =  0.0565, w2_1_5 = -0.1668;\nconst float w2_2_0 = -0.9256,  w2_2_1 =  0.8513,  w2_2_2 = -0.6390, w2_2_3 = -0.4874, w2_2_4 = -0.6635, w2_2_5 =  1.1491;\nconst float b2_0 = 2.6583, b2_1 = -2.6087, b2_2 =  -2.6319;\n#elif defined(LifeGivingTree)\nconst float w0_0_0 =  0.1357, w0_0_1 =  1.0990, w0_0_2 = 0.0418;\nconst float w0_1_0 = -0.4983, w0_1_1 = -1.5854, w0_1_2 = 0.2185;\nconst float w0_2_0 =  0.3514, w0_2_1 =  0.0570, w0_2_2 = 1.1395;\nconst float b0_0 = -0.9316, b0_1 = 0.4121, b0_2 = -0.2344;\n\nconst float w1_0_0 = -0.4169,  w1_0_1 = 0.6820,  w1_0_2 = -0.8257, w1_0_3 = -3.7078, w1_0_4 = -1.5556, w1_0_5 = -0.6766;\nconst float w1_1_0 = -1.2355,  w1_1_1 = 0.2350,  w1_1_2 =  0.1154, w1_1_3 =  0.0863, w1_1_4 =  2.7811, w1_1_5 =  0.3369;\nconst float w1_2_0 =  0.4193,  w1_2_1 = 0.9159,  w1_2_2 = -0.0551, w1_2_3 =  2.0818, w1_2_4 =  1.9520, w1_2_5 =  0.5444;\nconst float b1_0 = 0.1055, b1_1 = 0.5041, b1_2 =  0.5963;\n\n\nconst float w2_0_0 = -9.2365e-01,  w2_0_1 =  2.9617e-02,  w2_0_2 = -9.6130e-01, w2_0_3 =  1.5622e-01, w2_0_4 =  4.9507e-02, w2_0_5 = -7.7486e-01;\nconst float w2_1_0 = -7.6497e-01,  w2_1_1 = -7.8688e-01,  w2_1_2 = -6.4803e-01, w2_1_3 = -8.0038e-01, w2_1_4 = -1.3122e-01, w2_1_5 =  2.0447e-03;\nconst float w2_2_0 = -9.3644e-01,  w2_2_1 = -7.0726e-01,  w2_2_2 = -6.6307e-01, w2_2_3 = -2.7253e+00, w2_2_4 = -6.5513e-01, w2_2_5 =  9.5247e-01;\nconst float b2_0 = -0.8043, b2_1 = 0.1574, b2_2 = 0.5122;\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 RGBIn = texture(iChannel0,uv).rgb;\n\n    float x0 = RGBIn.x, x1 = RGBIn.y, x2 = RGBIn.z;\n    \n    float x1_0 = (w0_0_0 * x0 + w0_0_1 * x1 + w0_0_2 * x2 + b0_0);\n    float x1_1 = (w0_1_0 * x0 + w0_1_1 * x1 + w0_1_2 * x2 + b0_1);\n    float x1_2 = (w0_2_0 * x0 + w0_2_1 * x1 + w0_2_2 * x2 + b0_2);\n    \n    float x1_3 = ReLU(x1_0);\n    float x1_4 = ReLU(x1_1);\n    float x1_5 = ReLU(x1_2);\n\n    float x2_0 = (w1_0_0 * x1_0 + w1_0_1 * x1_1 + w1_0_2 * x1_2 + w1_0_3 * x1_3 + w1_0_4 * x1_4 + w1_0_5 * x1_5 + b1_0);\n    float x2_1 = (w1_1_0 * x1_0 + w1_1_1 * x1_1 + w1_1_2 * x1_2 + w1_1_3 * x1_3 + w1_1_4 * x1_4 + w1_1_5 * x1_5 + b1_1);\n    float x2_2 = (w1_2_0 * x1_0 + w1_2_1 * x1_1 + w1_2_2 * x1_2 + w1_2_3 * x1_3 + w1_2_4 * x1_4 + w1_2_5 * x1_5 + b1_2);\n    \n    float x2_3 = ReLU(x2_0);\n    float x2_4 = ReLU(x2_1);\n    float x2_5 = ReLU(x2_2);\n    \n    float x3_0 = Sigmoid(w2_0_0 * x2_0 + w2_0_1 * x2_1 + w2_0_2 * x2_2 + w2_0_3 * x2_3 + w2_0_4 * x2_4 + w2_0_5 * x2_5 + b2_0);\n    float x3_1 = Sigmoid(w2_1_0 * x2_0 + w2_1_1 * x2_1 + w2_1_2 * x2_2 + w2_1_3 * x2_3 + w2_1_4 * x2_4 + w2_1_5 * x2_5 + b2_1);\n    float x3_2 = Sigmoid(w2_2_0 * x2_0 + w2_2_1 * x2_1 + w2_2_2 * x2_2 + w2_2_3 * x2_3 + w2_2_4 * x2_4 + w2_2_5 * x2_5 + b2_2);\n   \n    float r = x3_0, g = x3_1, b = x3_2;\n    // Output to screen\n    fragColor = vec4(r,g,b,1.0);\n}","name":"Image","description":"","type":"image"}]}