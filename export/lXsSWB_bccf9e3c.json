{"ver":"0.1","info":{"id":"lXsSWB","date":"1709939491","viewed":57,"name":"Julia Set 0306","username":"kukovisuals","description":"julia set","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal","juliaset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Simplified Julia set rendering\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 renderJuliaSet(vec2 point) {\n    vec2 c = vec2(-0.77, 0.112); // Constant defining the Julia set shape\n    vec2 z = point * 0.18; // Scale the initial point\n    float escapeRadiusSquared = 256.0;\n    int i;\n    \n    // Main iteration loop for the Julia set\n    for (i = 0; i < 256; i++) {\n        if (dot(z, z) > escapeRadiusSquared) break;\n        z = mat2( z, -z.y, z.x) * z + c;\n    }\n\n    // Simple coloring based on the iteration count\n    float intensity = smoothstep(0.0, 256.0, float(i));\n    vec3 color = vec3(intensity);\n\n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 normalizedCoord = fragCoord / iResolution.y;\n    vec3 color = renderJuliaSet(normalizedCoord);\n\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}