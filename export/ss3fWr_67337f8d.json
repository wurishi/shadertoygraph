{"ver":"0.1","info":{"id":"ss3fWr","date":"1656356713","viewed":141,"name":"Triangular Grid Study 01","username":"Oneleven","description":"My very first attempt at generating triangular grids \nAs a result the code is bloated and inefficient, but any tips and commentary are welcome regardless :)","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["grid","triangle","study","triangular"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R iResolution.xy\n#define PI 3.141592\n\nvec3 triangleGrid(vec2 uv, float zoom)\n{\n    uv *= mat2(1.0 ,0.0 , 0.5, 0.866) * zoom;\n    \n    vec2 index = floor(uv);\n    uv = fract(uv);    \n    index = index * 2.0 - step(uv.x, uv.y);\n    \n    if ( uv.x < uv.y ) uv = uv.yx;\n    float value = 3.* min(min(uv.x - uv.y, 1.0 - uv.x), uv.y);\n\n    return vec3(index, value);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Prepare Grid\n    vec2 uv = (fragCoord - R * 0.5)/R.y;\n    \n    float zoom = 10.0;\n    vec3 grid_1 = triangleGrid(uv, zoom);       \n   \n    //animate\n    float feather = 300./(R.y*zoom);\n    float progress = sin(iTime * 0.677 + mod(grid_1.x, 2.0)*PI + grid_1.x*0.08 + grid_1.y*0.1) * 0.5 + 0.5;\n    progress = pow(progress, 0.8);\n    grid_1.z = smoothstep(progress-feather, progress + feather, grid_1.z);\n    \n    vec3 grid_2 = triangleGrid(uv, zoom*2.0);\n    progress = sin(iTime*1.35 + mod(grid_2.x, 2.0)*PI + grid_2.x*0.08 + grid_2.y*0.1) * 0.5 + 0.5;\n    grid_2.z = smoothstep(progress - feather*2.0, progress + feather*2.0, grid_2.z);\n    \n    //render final result\n    vec3 col = vec3(0.0);\n    col = vec3(max(grid_1.z, grid_2.z)) * mix(vec3(0.281,0.470 + sin(iTime) * 0.3141592, 0.845), vec3(0.358,0.845,0.599 + sin(iTime * 1.16803) * 0.2), uv.x);\n    col = max(col, vec3(0.088,0.348,0.430 + cos(iTime)*0.2));\n    \n    //debug\n    //col = vec3(uv, 0.0);\n    //col = vec3(grid_1.z);\n    //col = vec3(grid_1.xy, 0.);\n    //col = vec3(grid_2.z);\n    //col = vec3(progress);\n\n    //Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}