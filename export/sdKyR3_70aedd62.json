{"ver":"0.1","info":{"id":"sdKyR3","date":"1655316865","viewed":378,"name":"silky almost 3d color clouds","username":"pb","description":"move the mouse to pick your favorite color mixing direction, press pause and move mouse as well to just rotate around","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["fbm","colorful","random","almost3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//philip.bertani@gmail.com\n\n#define oct 6   //number of fbm octaves\n#define pi  3.14159265\n\nfloat random(vec2 p) {\n    //a random modification of the one and only random() func\n    return fract( sin( dot( p, vec2(12., 90.)))* 1e5 );\n}\n\n\n//this is taken from Visions of Chaos shader \"Sample Noise 2D 4.glsl\"\nfloat noise(vec3 p) {\n    vec2 i = floor(p.yz);\n    vec2 f = fract(p.yz);\n    float a = random(i + vec2(0.,0.));\n    float b = random(i + vec2(1.,0.));\n    float c = random(i + vec2(0.,1.));\n    float d = random(i + vec2(1.,1.));\n    vec2 u = f*f*(3.-2.*f); //smoothstep here, it also looks good with u=f\n    \n    return mix(a,b,u.x) + (c-a)*u.y*(1.-u.x) + (d-b)*u.x*u.y;\n\n}\n\nfloat fbm3d(vec3 p) {\n    float v = 0.;\n    float a = .5;\n    vec3 shift = vec3(100.);  //play with this\n    \n    float angle = pi/2.;      //play with this\n    float cc=cos(angle), ss=sin(angle);  //yes- I know cos(pi/2.)=0.\n    mat3 rot = mat3( cc,  0., ss, \n                      0., 1., 0.,\n                     -ss, 0., cc );\n    for (int i=0; i<oct; i++) {\n        v += a * noise(p);\n        p = rot * p * 2. + shift;\n        a *= .6;  //changed from the usual .5\n    }\n    return v;\n}\n\nmat3 rxz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(cc,0.,-ss,\n                0.,1.,0.,\n                ss,0.,cc);                \n}\nmat3 ryz(float an){\n    float cc=cos(an),ss=sin(an);\n    return mat3(1.,0.,0.,\n                0.,cc,-ss,\n                0.,ss,cc);\n}                \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    float tt = iTime / 8.;\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 mm = (2.*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    vec3 rd = normalize( vec3(uv, -2.) );  \n    vec3 ro = vec3(0.,1.,0.);\n    \n    float delta = 2.*pi/10.;\n    mat3 rot = rxz(-mm.x*delta) * ryz(-mm.y*delta);\n    \n    ro -= rot[2]*iTime/3.;\n    \n    vec3 p = ro + rot*rd;\n    \n    vec3 q;\n\n    q.x = fbm3d(p);\n    q.y = fbm3d(p.yzx);\n    q.z = fbm3d(p.zxy);\n\n    float f = fbm3d(p + q);\n    \n    vec3 cc = 5.*q;\n    cc = pow(cc * f , vec3(2.3));    //play with this\n\n    fragColor = vec4(cc/11.,1.0);\n    \n    \n}\n\n","name":"Image","description":"","type":"image"}]}