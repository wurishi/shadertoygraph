{"ver":"0.1","info":{"id":"NscXWj","date":"1633975180","viewed":84,"name":"Mandelbrot fun","username":"minecire","description":"messing around with mandelbrot set and friends","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 func(vec2 z, vec2 c)\n{\n         //This is the function that controls the whole thing. \n         //I've added functions for some basic complex operations in the other file. \n         //You can also of course do what you like with the individual coordinates of the vectors\n         //Try:\n         //cadd(csqr(z),c);                                               z^2+c \n         //cadd(cpow(z,4),c);                                             z^4+c\n         //cadd(cpow(z,5),cadd(c,vec2(0.3,0.6)));                         z^5+c+(0.3+0.6i\n         //cadd(csqr(vec2(abs(z.x),abs(z.y))),c);                         f(z)^2+c where f(a+bi) = |a|+|b|i\n         //cadd(cpow(vec2(abs(z.x),abs(z.y)),3),c);                       f(z)^3+c\n         //cadd(cpow(vec2(abs(z.x),abs(z.y)),4),c);                       f(z)^4+c\n         //cadd(cpow(vec2(abs(z.x),abs(z.y)),2),vec2(abs(c.x),abs(c.y))); f(z)^2+f(c)\n         //csub(csqr(z),z);                                               z^2-z\n         //csub(csqr(z),csqr(c));                                         z^2-c^2\n         //cpow(cadd(csqr(z),c),3);                                       (z^2+c)^3\n         //csqr(cadd(cpow(z,3),c));                                       (z^3+c)^2\n         //cadd(cadd(csqr(z),cmult(z,c)),c);                              z^2+zc+c\n         //cadd(cadd(csqr(z),cmult(z,c)),z);                              z^2+zc+z\n         //cdiv(cadd(cpow(z,3),csqr(c)),z);                               (z^3+c^2)/z\n         //cdiv(cadd(cpow(z,4),cpow(c,3)),z);                             (z^4+c^3)/z\n         //cdiv(cadd(cpow(z,4),cpow(c,3)),csqr(c));                       (z^4+c^3)/c^2\n         //cdiv(cadd(csqr(z),z),c);                                       (z^2+z)/c\n         //cdiv(vec2(1,0),cadd(csqr(z),c))                                1/(z^2+c)\n         //cadd(cmult(z,c),cdiv(vec2(1,0),cadd(z,c)));                    zc+1/(z+c)\n    return cadd(cmult(z,c),cdiv(vec2(1,0),cadd(z,c)));\n}\nint colScale = 26;\nfloat scl = 1.9; //controls the scaling factor for the starting frame\nfloat zoomFactor = 0.99; //controls how fast it zooms in\nvec2 initz = vec2(1,1); //the initial z value in terms of c\nint iterations = 2650; //program slow -> decrease, weird black blobs -> increase\n//basically controls how long it is before the program gives up and colors a point black\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //set pos to a set number if you don't want it to move w/mouse\n    vec2 pos = vec2(iMouse.x/iResolution.x*scl-scl/2.,iMouse.y/iResolution.y*scl-scl/2.);\n    float zoom = scl*pow(zoomFactor,float(iFrame));\n    vec2 normCoord = vec2((fragCoord.x/iResolution.x*4.-2.)*zoom-pos.x, (fragCoord.y/iResolution.y*2.25-1.125)*zoom-pos.y);\n    vec2 z = vec2(normCoord.x*initz.x,normCoord.y*initz.y);\n    float zsize;\n    int i;\n    for(i = 0; i < iterations; i++){\n        zsize = dot(z,z);\n        z = func(z, normCoord);\n        if(zsize > 1000.){\n            break;\n        }\n    }\n    if(i == iterations){\n    \tfragColor = vec4(0,0,0, 0);\n    }\n    else{\n        //controls color scheme\n        int a = 69*colScale;\n        int b = 8*colScale;\n        int c = 205*colScale;\n        fragColor = vec4(float(i%a)/float(a),float(i%b)/float(b),1.-float(i%c)/float(c),0);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//file for complex functions\n\nvec2 cadd(vec2 a, vec2 b)\n{\n    return vec2(a.x+b.x, a.y+b.y);\n}\nvec2 csub(vec2 a, vec2 b)\n{\n    return vec2(a.x-b.x, a.y-b.y);\n}\nvec2 cmult(vec2 a, vec2 b)\n{\n    return vec2(a.x*b.x-a.y*b.y, a.y*b.x+a.x*b.y);\n}\nvec2 cdiv(vec2 a, vec2 b)\n{\n    return vec2((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y),(a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y));\n}\nvec2 csqr(vec2 a)\n{\n    return cmult(a, a);\n}\nvec2 cpow(vec2 a, int b)\n{\n    vec2 o = a;\n    for(int i = 1; i < b; i++)\n    {\n        o = cmult(o,a);\n    }\n    return o;\n}","name":"Common","description":"","type":"common"}]}