{"ver":"0.1","info":{"id":"3sj3DW","date":"1548893748","viewed":136,"name":"Donut waltz","username":"cbrpnk","description":"everyday","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["everydayspheretracingmarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float random(vec2 p) {\n    return fract(sin(dot(p, vec2(123.3345, 876.654))) * 984594.2343);\n}\n\nfloat perlin(vec2 p){\n    p *= 10.;\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    \n    float bl = random(i);\n    float br = random(i + vec2(1, 0));\n    float tl = random(i + vec2(0, 1));\n    float tr = random(i + vec2(1, 1));\n    \n    float x = mix(bl, br, smoothstep(0., 1., f.x));\n    float y = mix(tl, tr, smoothstep(0., 1., f.x));\n    return mix(x, y, smoothstep(0., 1., f.y));\n}\n\nfloat sdfSphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat sdfDough(vec3 p, float r, float w)\n{\n    float d = sqrt(pow(length(p.xz)-r, 2.) + pow(p.y, 2.)) - w - pow(perlin(p.xz), .1)*.05;\n    \n    return d;\n}\n\nfloat sdfTorus(vec3 p, float r, float w)\n{\n    float d = sqrt(pow(length(p.xz)-r, 2.) + pow(p.y, 2.)) - w - perlin(p.yz)*.07;\n    \n    return d;\n}\n\nfloat sdfCapsule(vec3 p, float r)\n{\n    return length(p-vec3(0., clamp(p.y, 0.5, 1.), 0.)) - r;\n}\n\n\nvec2 rotate(vec2 p, float a)\n{\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, s, -s, c) * p;\n}\n\nvec2 opMin(vec2 a, vec2 b)\n{\n\treturn (a.x<b.x) ? a : b;\n}\n\nvec2 map(vec3 p)\n{\n    p.xy = rotate(p.xy, p.z*.03);\n    p.z -= iTime*4.;\n    \n    p.y += 4.;\n    \n    p = mod(p+vec3(5.), 10.)-vec3(5.);\n    p.yz = rotate(p.yz, iTime*2.);\n    p.xy = rotate(p.xy, iTime*2.);\n    p.x += smoothstep(0., 1., abs(sin(iTime)));\n    \n\n    vec2 dough = vec2(sdfDough(p, 1., .6), 0.);\n    \n    vec3 fp = p;\n    fp.y -= .08;\n    vec2 frost = vec2(sdfTorus(fp, 1., .6), 1.);\n    \n    vec3 flp = p;\n    flp.xz = abs(flp.xz);\n    flp.xy = rotate(flp.xy, 1.3);\n    flp *= 4. ;\n    flp = mod(flp+vec3(20.), 200.)-vec3(10.);\n    vec2 fl1 = vec2(sdfCapsule(flp, .1), 2.);\n    \n    vec2 res = opMin(dough, frost);\n    return res;\n}\n\nvec3 march(vec3 o, vec3 dir)\n{\n    float d = 0.;\n    vec2 res;\n    int i;\n    vec3 p;\n    for(i=0; i<328; ++i)\n    {\n        p = o + d*dir;\n        res = map(p);\n        if(res.x < .0001) break;\n        if(d > 120.) return vec3(-1.);\n        d += res.x;\n    }\n    return vec3(d, res.y, i);\n}\n\nvec3 getNormal(vec3 p)\n{\n    return normalize(vec3(\n    \tmap(p+vec3(0.0001, 0., 0.)).x - map(p-vec3(0.0001, 0., 0.)).x,\n        map(p+vec3(0., 0.0001, 0.)).x - map(p-vec3(0., 0.0001, 0.)).x,\n        map(p+vec3(0., 0., 0.0001)).x - map(p-vec3(0., 0., 0.0002)).x\n    ));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy - vec2(.5);\n    uv.x *= iResolution.x/iResolution.y;\n\t\n    vec3 eye = vec3(0., 0., 5.);\n    vec3 target = normalize(vec3(uv.x, uv.y, -1.));\n    vec3 res = march(eye, target);\n    \n    vec3 col;\n    \n    if(res.y < 0.) {\n        col = vec3(0.);\n    } else if(res.y == 0.) {\n        vec3 light1 = normalize(vec3(1., 0., -1.));\n        vec3 light2 = normalize(vec3(-1., 1, -1.));\n        vec3 light3 = normalize(vec3(-1., -1, -1.));\n        vec3 normal = getNormal(eye+target*res.x);\n        col = .5+.5*vec3(normal.z);\n        col *= vec3(.85 ,.73, .52);\n    } else if(res.y >= 1.) {\n        \n        vec3 c = vec3(.9, 0.2, 0.2);\n        if(res.y == 2.){ c = vec3(.2, .9, 0.2); }\n        \n        vec3 lightPos = normalize(vec3(1., 0., -1.));\n        vec3 normal = getNormal(eye+target*res.x);\n    \tcol = vec3(.6) * clamp(dot(normal, lightPos), 0., 1.);\n        col += c;\n        col += .1+.3*normal.y;\n        col += .004*vec3(pow(clamp(dot(normal, lightPos), 0., 1.), 12.));\n        col += .3 * pow(clamp(dot(normal, lightPos), 0. ,8.), .8);\n        col += .4 * pow(col, vec3(2.));\n    }\n    \n    if(res.y >= 0.) {\n    \tcol = mix(col, vec3(0.), smoothstep(0., 1., res.x*.016));\n    }\n\t\n    col *= pow(dot(target, vec3(0., 0. ,-1.)), 5.);\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}