{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"vec3 rotateX (float a, vec3 v) {\n    return vec3(v.x, \n                cos(a)*v.y + sin(a) * v.z,\n                cos(a)*v.z - sin(a) * v.y);\n}\n\nvec3 rotateY (float a, vec3 v) {\n    return vec3(cos(a)*v.x + sin(a) * v.z, \n                v.y,\n                cos(a)*v.z - sin(a) * v.x);\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*\n        vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nfloat map (in vec3 p) {\n    vec3 q = rotateY(iTime, p);\n\n    float plane = p.y + 1.0;\n\n    float sphere = length(q) - 1.2;\n\n    //q = rotateY(0.6, p);\n    float cube = sdBox(q, vec3(1.0));\n    float m = max(-sphere, cube);\n\n    return min(plane, m);\n}\n\nvec3 calcNormal( in vec3 pos ) {\n    vec3 eps = vec3(0.2,0.0,0.0);\n\n    return normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx)) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k ) {\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<48; i++ )\n    {\n        float h = map(ro + rd*t);\n        h = max( h, 0.0 );\n        res = min( res, k*h/t );\n        t += clamp( h, 0.01, 0.5 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor ) {\n    float totao = 0.0;\n    for( int aoi=0; aoi<16; aoi++ )\n    {\n        vec3 aopos = -1.0+2.0*hash3(float(aoi)*213.47);\n        aopos *= sign( dot(aopos,nor) );\n        aopos = pos + aopos*0.5;\n        float dd = clamp( map( aopos )*4.0, 0.0, 1.0 );\n        totao += dd;\n    }\n    totao /= 16.0;\n    \n    return clamp( totao*totao*1.5, 0.0, 1.0 );\n}\n\nfloat intersect (in vec3 ro, in vec3 rd) {\n\n    float h = 1.0;\n    float tmax = 45.0;\n    float t = 0.0;\n\n    for (int i=0; i<180; i++) {\n        if (h < 0.0001 || t > tmax) break;\n\n        h = map(ro + t*rd);\n        t += h;\n    }\n\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * uv;\n    p.x *= iResolution.x / iResolution.y;\n\n    vec3 ro = vec3 (0.0, 1.0, 4.0);\n    vec3 rd = normalize(vec3(p, -1.0));\n\n    float tmax = 20.0;\n    float t = intersect(ro, rd);\n\n    vec3 lig = normalize(\n        rotateY(iTime/2.0, vec3(-0.5,0.7,-1.0))\n        );\n\n    vec3 bgc = 0.8*vec3(0.8,0.9,1.0)*(0.5 + 0.3*rd.y);\n    vec3 col = bgc;\n\n    if (t<tmax) {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal (pos);\n        vec3 ligh = normalize(lig - pos);\n        \n        float occ = calcAO( pos, nor );\n        float amb = 0.8 + 0.2*nor.y;\n        float dif = max(dot(nor,lig),0.0);\n        float bac = max(dot(nor,normalize(vec3(-lig.x,0.0,-lig.z))),0.0);\n        float sha = 0.0; if( dif>0.001 ) sha=softshadow( pos, lig, 0.1, 32.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 2.0 );\n\n        // lights\n        vec3 brdf = vec3(0.0);\n        brdf += 1.0*dif*vec3(1.00,0.90,0.65)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n        brdf += 1.0*amb*vec3(0.05,0.05,0.05)*occ;\n        brdf += 1.0*bac*vec3(0.03,0.03,0.03)*occ;\n        brdf += 1.0*fre*vec3(1.00,0.70,0.40)*occ*(0.2+0.8*sha);\n        \n        col = brdf;\n        //col = mix( col, bgc, clamp(1.0-1.2*exp(-0.0002*t*t ),0.0,1.0) );\n    } else {\n        vec3 sun = vec3(1.0,0.8,0.5)*pow( clamp(dot(rd,lig),0.0,1.0), 32.0 );\n        col += sun;\n    }\n\n    //col += 0.6*vec3(0.2,0.14,0.1)*pow( clamp(dot(rd,lig),0.0,1.0), 5.0 );\n    col = pow( col, vec3(0.75) );\n    col = 1.3*col-0.1;\n    col *= vec3( 1.0, 1.04, 1.0);\n    col *= pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n\n\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dSXWw","date":"1412428574","viewed":254,"name":"Playing with stuff","username":"ga2arch","description":"Playing with functions taken from iq works trying to understand them. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["3d","lighting","shadows"],"hasliked":0,"parentid":"","parentname":""}}