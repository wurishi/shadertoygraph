{"ver":"0.1","info":{"id":"MXsGWN","date":"1707494767","viewed":198,"name":"Mount Pmbarth","username":"mathemat","description":"A scenery using techniques inspired by iq's Rainforest, with PBR support.\nWarning: poor performance.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["procedural","3d","raymarching","pbr"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThe MIT License\nCopyright 2024 Zhou Xiding\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n/* ------ 3rd party ------\nnoises and raymarching:\n// The MIT License\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Copyright © 2016 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nstruct Ray\n{\n    vec3 p, v;\n};\n\nconst float k1_PI = 0.31830988618;\nconst float kPI = 3.14159265358979;\n\nconst vec3 cam_pos = vec3(-150.0, 700.0, -350.0);\nconst float cam_theta = 0.5 * kPI;\nconst float cam_phi = 0.0 * kPI;\nconst vec3 cam_dir = vec3(cos(cam_theta) * cos(cam_phi), sin(cam_phi), -sin(cam_theta) * cos(cam_phi));\nconst vec3 cam_up = vec3(0.0, 1.0, 0.0);\nconst float cam_fovy = 0.5 * kPI;\nconst float cam_aspect = 16.0 / 9.0;\nconst float cam_h = 2.0 * tan(0.5 * cam_fovy);\nconst float cam_w = cam_h * cam_aspect;\nconst vec3 cam_u = cam_w * normalize(cross(cam_dir, cam_up));\nconst vec3 cam_v = cam_h * normalize(cross(cam_u, cam_dir));\nconst vec3 cam_origin = cam_dir - 0.5 * cam_u - 0.5 * cam_v;\n\nRay get_ray(vec2 st)\n{\n    return Ray(cam_pos, normalize(cam_origin + st.x * cam_u + st.y * cam_v));\n}\n\nvec3 saturate(vec3 x)\n{\n    return clamp(x, 0.0, 1.0);\n}\n\n//==========================================================================================\n// hashes\n//==========================================================================================\n\n// Integer Hash - III\n// - Iñigo Quílez, Integer Hash - III, 2017\n//   https://www.shadertoy.com/view/4tXyWN\nfloat hash1(vec2 x)\n{\n    uvec2 t = floatBitsToUint(x);\n    uvec2 q = 1103515245u * ( (t>>1u) ^ (t.yx   ) );\n    uint  h = 1103515245u * ( (q.x  ) ^ (q.y>>3u) );\n    return uintBitsToFloat(h >> 9u | 0x3f800000u) - 1.0;\n}\n\n// PCG2D\nvec2 hash2(vec2 x)\n{\n    uvec2 v = floatBitsToUint(x);\n    v = v * 1664525u + 1013904223u;\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    v.x += v.y * 1664525u;\n    v.y += v.x * 1664525u;\n\n    v = v ^ (v>>16u);\n\n    return uintBitsToFloat(v >> 9u | 0x3f800000u) - 1.0;\n}\n\n//==========================================================================================\n// noises\n//==========================================================================================\n\nvec3 noised( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 w = x - p;\n    vec2 u = w*w*(3.0-2.0*w);\n    vec2 du = 6.0*w*(1.0-w);\n    \n    float a = hash1(p+vec2(0,0));\n    float b = hash1(p+vec2(1,0));\n    float c = hash1(p+vec2(0,1));\n    float d = hash1(p+vec2(1,1));\n\n    float k0 = a;\n    float k1 = b - a;\n    float k2 = c - a;\n    float k4 = a - b - c + d;\n\n    return vec3( -1.0+2.0*(k0 + k1*u.x + k2*u.y + k4*u.x*u.y), \n                 2.0*du * vec2( k1 + k4*u.y,\n                            k2 + k4*u.x ) );\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 w = x - p;\n    vec2 u = w*w*(3.0-2.0*w);\n\n    float a = hash1(p+vec2(0,0));\n    float b = hash1(p+vec2(1,0));\n    float c = hash1(p+vec2(0,1));\n    float d = hash1(p+vec2(1,1));\n    \n    return -1.0+2.0*(a + (b-a)*u.x + (c-a)*u.y + (a - b - c + d)*u.x*u.y);\n}\n\n//==========================================================================================\n// fbm constructions\n//==========================================================================================\n\nconst mat2 m2 = mat2(  0.80,  0.60,\n                      -0.60,  0.80 );\nconst mat2 m2i = mat2( 0.80, -0.60,\n                       0.60,  0.80 );\n\n//------------------------------------------------------------------------------------------\n\nfloat fbm_4( in vec2 x )\n{\n    float f = 1.9;\n    float s = 0.55;\n    float a = 0.0;\n    float b = 0.5;\n    for( int i=0; i<4; i++ )\n    {\n        float n = noise(x);\n        a += b*n;\n        b *= s;\n        x = f*m2*x;\n    }\n\treturn a;\n}\n\nfloat fbm_9( in vec2 x )\n{\n    float f = 1.9;\n    float s = 0.55;\n    float a = 0.0;\n    float b = 0.5;\n    for( int i=0; i<9; i++ )\n    {\n        float n = noise(x);\n        a += b*n;\n        b *= s;\n        x = f*m2*x;\n    }\n    \n\treturn a;\n}\n\nvec3 fbmd_9( in vec2 x )\n{\n    float f = 1.9;\n    float s = 0.55;\n    float a = 0.0;\n    float b = 0.5;\n    vec2  d = vec2(0.0);\n    mat2  m = mat2(1.0,0.0,0.0,1.0);\n    for( int i=0; i<9; i++ )\n    {\n        vec3 n = noised(x);\n        a += b*n.x;          // accumulate values\t\t\n        d += b*m*n.yz;       // accumulate derivatives\n        b *= s;\n        x = f*m2*x;\n        m = f*m2i*m;\n    }\n\n\treturn vec3( a, d );\n}\n\nfloat terr(vec2 x)\n{\n    return 600.0 * fbm_9(0.0005 * x + vec2(1.0, 2.0)) + 600.0;\n}\n\nvec3 terrd(vec2 x)\n{\n    vec3 t = 600.0 * fbmd_9(0.0005 * x + vec2(1.0, 2.0));\n    t.yz *= 0.0005;\n    t.x += 600.0;\n    return t;\n}\n\nfloat sdf_sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nconst float bush_radius = 0.8;\n\nfloat sdf_noise(vec3 p)\n{\n    float t = bush_radius * abs(noise(6.0 * p.xz));\n    return t;\n}\n\nconst vec3 bush_diffuse = pow(vec3(0.412, 0.49, 0.1686), vec3(2.2));\nconst float bush_roughness = 0.3;\nconst vec3 stone_diffuse = pow(vec3(0.882, 0.482, 0.29), vec3(2.2));\nconst float stone_roughness = 0.2;\nconst vec3 grass_diffuse = pow(vec3(0.5, 0.49, 0.1686), vec3(2.2));\nconst float grass_roughness = 0.87;\nconst float grass_threshold = 0.8;\nconst float stone_threshold = 0.6;\nconst float snow_height = 725.0;\nconst float snow_threshold = 25.0;\nconst vec3 snow_diffuse = vec3(1.0);\nconst float snow_roughness = 0.1;\n\nfloat raymarch(Ray r, out float h, out vec3 normal, out vec3 diffuse, out float roughness)\n{\n    const float ddt = 0.01;\n    const float mint = 90.0;\n    const float maxt = 1000.0;\n    float dt = ddt * mint;\n    float lh = 0.0;\n    float ly = 0.0;\n    for( float t = mint; t < maxt; t += dt )\n    {\n        vec3  p = r.p + r.v*t;\n        h = terr( p.xz );\n        if (h <= snow_height - snow_threshold)\n        {\n            vec2 m = floor(0.25 * p.xz);\n            vec2 c = 4.0 * m + 1.0 + 2.0 * hash2(m);\n            vec3 w = p - vec3(c.x, h, c.y);\n            if (sdf_sphere(w, bush_radius) + sdf_noise(p) < 0.0)\n            {\n                vec2 dxz = terrd(p.xz).yz;\n                normal = normalize(vec3(-dxz.x, 1.0, -dxz.y));\n                if (normal.y > grass_threshold)\n                {\n                    normal = normalize(w);\n                    diffuse = bush_diffuse;\n                    roughness = bush_roughness;\n                    return t;\n                }\n            }\n        }\n        if( p.y < h )\n        {\n            // interpolate the intersection distance\n            vec2 dxz = terrd(p.xz).yz;\n            normal = normalize(vec3(-dxz.x, 1.0, -dxz.y));\n            float blend = smoothstep(stone_threshold, grass_threshold, normal.y);\n            diffuse = mix(stone_diffuse, grass_diffuse, blend);\n            roughness = mix(stone_roughness, grass_roughness, blend);\n            blend = smoothstep(snow_height - snow_threshold, snow_height + snow_threshold, h);\n            diffuse = mix(diffuse, snow_diffuse, blend);\n            roughness = mix(roughness, snow_roughness, blend);\n            return t - dt + dt*(lh-ly)/(p.y-ly-h+lh);\n        }\n        // allow the error to be proportional to the distance\n        dt = ddt*t;\n        lh = h;\n        ly = p.y;\n    }\n    return 0.0;\n}\n\nconst float shadow_k = 16.0;\n\nfloat raymarch_shadow(Ray r)\n{\n    const float ddt = 0.05;\n    const float mint = 1.0;\n    const float maxt = 100.0;\n    float dt = ddt * mint;\n    float n = maxt;\n    float nt;\n    for (float t = mint; t < maxt; t += dt)\n    {\n        float ln = maxt;\n        vec3  p = r.p + r.v*t;\n        vec3 h = terrd( p.xz );\n        vec3 normal = normalize(vec3(-h.y, 1.0, -h.z));\n        if (normal.y > grass_threshold && h.x < snow_height - snow_threshold)\n        {\n            vec2 m = floor(0.25 * p.xz);\n            vec2 c = 4.0 * m + 1.0 + 2.0 * hash2(m);\n            vec3 w = p - vec3(c.x, h.x, c.y);\n            ln = sdf_sphere(w, bush_radius) + sdf_noise(p);\n            if (ln < 0.0) return 0.0;\n        }\n        ln = min(p.y - h.x, ln);\n        if (ln < 0.0) return 0.0;\n        if (ln < n)\n        {\n            n = ln;\n            nt = t;\n        }\n        // allow the error to be proportional to the distance\n        dt = ddt*t;\n    }\n    return smoothstep(0.0, 1.0, shadow_k * n / nt);\n}\n\n// Trowbridge-Reitz GGX for Distribution Function.\nfloat D_GGXTR(vec3 n, vec3 h, float roughness) {\n  float costheta = max(dot(n, h), 0.0);\n  float a2 = roughness * roughness;\n  float temp = costheta * costheta * (a2 - 1.0) + 1.0;\n  return a2 / (kPI * temp * temp);\n}\n\n// Fresnel-Schlick Approximation.\nvec3 F_Schlick(vec3 h, vec3 v, vec3 F0) {\n  return F0 + (1.0 - F0) * pow(1.0 - max(dot(h, v), 0.0), 5.0);\n}\n\nfloat G_SchlickGGX(vec3 n, vec3 v, float k) {\n  float costheta = max(dot(n, v), 0.0);\n  return costheta / (costheta * (1.0 - k) + k);\n}\n\n// Smith's method\nfloat G_Smith(vec3 n, vec3 v, vec3 l, float k) {\n  return G_SchlickGGX(n, v, k) * G_SchlickGGX(n, l, k);\n}\n\nvec3 Cook_Torrance(vec3 n, vec3 v, vec3 l, vec3 light_color, vec3 diffuse, float roughness, float metallic)\n{\n    vec3 h = normalize(v + l);\n    vec3 k_s = F_Schlick(h, v, mix(vec3(0.04), diffuse, metallic));\n    float k = roughness + 1.0;\n    k *= 0.125 * k;\n    float t = dot(n, l);\n    return max(t, 0.0) * (k1_PI * (1.0 - k_s) * diffuse + k_s * D_GGXTR(n, h, roughness) * G_Smith(n, v, l, k) * 0.25 / (max(dot(n, v), 0.001) * max(t, 0.001))) * light_color;\n}\n\nconst float sun_theta = 0.25 * kPI;\nconst float sun_phi = 0.15 * kPI;\nconst vec3 sun_dir = vec3(cos(sun_theta) * cos(sun_phi), sin(sun_phi), -sin(sun_theta) * cos(sun_phi));\nconst vec3 sun_color = vec3(4.0, 4.0, 4.0);\nconst vec3 sky_color = pow(vec3(0.0, 0.4, 1.0), vec3(2.2));\nconst vec3 fog_k = 0.0001 * vec3(1.0, 2.0, 4.0);\nconst vec3 fog_color = vec3(1.0);\nconst float ambient = 0.1;\nconst float cloud_height = 2500.0;\n\nvec3 fog(vec3 col, float d)\n{\n    return mix(fog_color, col, exp(-d * fog_k));\n}\n\nvec3 render_sky(Ray r)\n{\n    float t = (cloud_height - r.p.y) / r.v.y;\n    vec3 p = r.p + t * r.v;\n    float thickness = 2.0 * smoothstep(0.0, 0.75, fbm_4(0.0005 * p.xz + 0.1 * iTime));\n    return mix(vec3(1.0), mix(mix(vec3(1.0), sky_color, 0.5 * (r.v.y + 1.0)), 1.7 * normalize(sun_color), smoothstep(0.996, 1.0, dot(r.v, sun_dir))), exp(-thickness));\n}\n\nfloat cloud_shadow(Ray r)\n{\n    float t = (cloud_height - r.p.y) / r.v.y;\n    vec3 p = r.p + t * r.v;\n    float thickness = 2.0 * smoothstep(0.0, 0.75, fbm_4(0.0005 * p.xz + 0.1 * iTime));\n    return exp(-thickness);\n}\n\nvec3 ray_color(Ray r)\n{\n    float h, roughness;\n    vec3 n, diffuse;\n    float t = raymarch(r, h, n, diffuse, roughness);\n    if (t == 0.0) return render_sky(r);\n    Ray sun_ray = Ray(r.p + t * r.v, sun_dir);\n    return fog(max(cloud_shadow(sun_ray) * raymarch_shadow(sun_ray) * Cook_Torrance(n, -r.v, sun_dir, sun_color, diffuse, roughness, 0.0), ambient * diffuse), t);\n}\n\n// ACES tone mapping curve fit to go from HDR to LDR\n//https://knarkowicz.wordpress.com/2016/01/06/aces-filmic-tone-mapping-curve/\nvec3 ACESToneMapping(vec3 color)\n{\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return saturate((color * (A * color + B)) / (color * (C * color + D) + E));\n}\n\nvoid mainImage( out vec4 fragColor, vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/vec2(iResolution);\n    vec3 col = ACESToneMapping(ray_color(get_ray(uv)));\n\n    // Output to screen\n    fragColor = vec4(pow(col, vec3(1.0/2.2)),1.0);\n\n}\n","name":"Image","description":"","type":"image"}]}