{"ver":"0.1","info":{"id":"NtKGRy","date":"1637969118","viewed":109,"name":"starhex","username":"callistabee","description":"tessellation experiment","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["geometry"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R vec3(1,0,0)\n#define G vec3(0,1,0)\n#define B vec3(0,0,1)\n#define W vec3(1,1,1)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    // number of hex cells on the screen\n    float resolution = 100.0f;\n    \n    // cartesian coordinates\n    vec2 xy = fragCoord / iResolution.xy - 0.5;    \n    \n    // axial coordinates [https://www.redblobgames.com/grids/hexagons/]\n    vec3 qrs = vec3(\n        resolution * (xy.x + xy.y),\n        resolution * (xy.x - xy.y),\n        -resolution * xy.x * 2.0f\n    );\n    \n    // star tessellation\n    vec3 grid = cos(qrs);\n    float magnitude = dot(grid, grid) / 3.0f;\n    \n    // random wave generator\n    vec3 col;\n    \n    // number of centers\n    int n = 20;\n    \n    // for each center...\n    for (int i = 0; i < n; ++i) {\n    \n        // sample random Q and R coordinates from noise buffer\n        float randQ = resolution * (texture(iChannel0, vec2(i,0)/float(n)).r - 0.5);\n        float randR = resolution * (texture(iChannel0, vec2(0,i)/float(n)).r - 0.5);\n        \n        // sample random frequency modifier\n        float randF = texture(iChannel0, vec2(i,i)/float(n)).r - 0.5;\n        \n        // Q + R + S = 0\n        vec3 center = vec3(randQ, randR, -randQ - randR);\n        \n        // cycle colors\n        vec3 C;\n        switch(i % 3) {\n            case 0:\n                C = R; break;\n            case 1:\n                C = G; break;\n            case 2:\n                C = B; break;\n        }\n        \n        \n        // compute wavefront at current point\n        col += C * sin(randF * length(qrs - center) + iTime);\n        \n    }\n    \n    // multiply waves with hex grid for nice effect\n    fragColor = vec4(col * magnitude, 1.0);\n\n           \n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.0,1.0,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}