{"ver":"0.1","info":{"id":"dtGfWD","date":"1702065689","viewed":33,"name":"Strange 1","username":"roey_shap","description":"Fractal Attempt. Playing around with iterating on each pixel","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define NUM_ITERATIONS 20\n#define PI 3.1415926535f\n\n\nfloat map(float min1, float max1, float value, float min2, float max2)\n{\n    float d2 = max2 - min2;\n    float d1 = max1 - min1;\n    float sizeRatio = d2 / d1;\n\n    return (value * sizeRatio) - (min1 * sizeRatio) + min2;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float largerAxisSize = min(iResolution.x, iResolution.y);\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / largerAxisSize;\n    \n    float val = dot(uv, uv);\n    float periodInSeconds = 0.25;\n    float timeFactor = map(-1.0, 1.0, cos(1.25 * iTime + sin(iTime * 2.0 * PI * periodInSeconds)), 4.0, 30.0);\n    vec3 col = vec3(0.0);\n    for (int i = 0; i < NUM_ITERATIONS; i++)\n    {\n        val *= dot(cos(uv), sin(uv)) * timeFactor;\n        uv -= vec2(length(uv) * timeFactor, dot(uv, uv.yx)) / (val * val);    /// change this to a constant for more consistent shapes\n        col += vec3(val / timeFactor, val-1.0, 0.2 / timeFactor);\n    }\n\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}