{"ver":"0.1","info":{"id":"4tjcW3","date":"1510753848","viewed":113,"name":"test cam path","username":"lapin","description":"little test on cam path with bezier curve to get the path betwen 2 torus. you can also juste see how look the camera from a fixed point of view.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["torus","bezier","campath"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\nshader:\n\tBased on:\thttps://www.shadertoy.com/view/MldGDl\t----------------\tBy: \t\tgeoff\n\nmath:\n\tBased on:\thttps://www.3dgep.com/understanding-quaternions/\t----\t\n\t\t\t\thttps://pomax.github.io/bezierinfo/\t--------------------\t\n\t\t\t\t\n*/\n\n//\n//\t|\tif you uncomment DEBUG_VIEW you see the sence frome a fixed place and you see\n//\t|\thow look the camera (position and orientation)\n//\tv\n\n//#define DEBUG_VIEW \n\n\n///////// color \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\n#define COLUMN_COL vec3(0.7, 0.35, 0.7)\n#define A0 vec3(0.5, 0.5, 0.5)\n#define A1 vec3(1.0, 0.0, 0.0)\n#define A2 vec3(0.0, 1.0, 0.0)\n#define A3 vec3(0.0, 0.0, 1.0)\n#define\tB1 vec3(1.0, 1.0, 0.0)\n#define\tB2 vec3(0.0, 1.0, 1.0)\n\n#define FLOOR_COL_A vec3(0.8)\n#define FLOOR_COL_B vec3(0.2)\n\nfloat closeObj = 0.0;\nconst float PI = 3.14159;\n\nstruct\ts_torus\n{\n    mat3\tpos;\n    mat3\trot;\n    vec2\tsize1;\n    vec2\tsize2;\n};\n\nmat3 rotX(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(1.0, 0.0, 0.0,\n                0.0,   c,  -s,\n                0.0,   s,   c );\n}\n\nmat3 rotY(float d){\n    float s = sin(d);\n    float c = cos(d);\n    return mat3(  c, 0.0,  -s,\n                0.0, 1.0, 0.0,\n                  s, 0.0,   c );\n}\n\nmat3 rotZ(float d){\n    float s = sin(d);\n    float c = cos(d);\n    \n    return mat3(  c,  s, 0.0,\n                 -s,  c, 0.0,\n                0.0, 0.0, 1.0);\n}\n\n// p \nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz) - t.x, p.y);\nreturn length(q) - t.y;\n}\n\n\n\nvec2 vecMin(vec2 a, vec2 b){\n    if(a.x <= b.x){\n        return a;\n    }\n    return b;\n}\n\n\n/*\n\tPour conaitre les normale\n*/\n\n//\t----------------------------------------------------\n\n\nvec3\tpermute1(vec3 v)\n{\n    return (v.yzx);\n}\n\nvec3\tpermute2(vec3 v)\n{\n    return (v.zxy);\n}\n\nmat3\tbezier_derivate(mat4 controle_point)\n{\n    mat3\tderivate;\n\n    derivate[0] = ((controle_point[1].xyz - controle_point[0].xyz) * 3.0);\n\tderivate[1] = ((controle_point[2].xyz - controle_point[1].xyz) * 3.0);\n\tderivate[2] = ((controle_point[3].xyz - controle_point[2].xyz) * 3.0);\n    return (derivate);\n}\n\n\n// \tbezier quadratique... dim 3\nvec3\tbezier_pos(mat4 controle_point, float t)\n{\n    vec3\tres;\n\n    res  = (pow(t, 0.0) * pow(1.0 - t, 3.0) * 1.0) * controle_point[0].xyz;\n    res += (pow(t, 1.0) * pow(1.0 - t, 2.0) * 3.0) * controle_point[1].xyz;\n    res += (pow(t, 2.0) * pow(1.0 - t, 1.0) * 3.0) * controle_point[2].xyz;\n    res += (pow(t, 3.0) * pow(1.0 - t, 0.0) * 1.0) * controle_point[3].xyz;\n    return (res);\n}\n\nvec3\tbezier_dir_front(mat3 derivate_point, float t)\n{\n    vec3\tres;\n    \n    res  = (pow(t, 0.0) * pow(1.0 - t, 2.0) * 1.0) * derivate_point[0];\n    res += (pow(t, 1.0) * pow(1.0 - t, 1.0) * 2.0) * derivate_point[1];\n    res += (pow(t, 2.0) * pow(1.0 - t, 0.0) * 1.0) * derivate_point[2];   \n    return (normalize(res));\n}\n\n/*\nvec3\tbezier_derive_2(mat3 derivate, float t)\n{\n    vec3\tres;\n    mat3\td2;\n    \n    d2 = bezier_derivate(mat4(derivate[0], 0.0, derivate[1], 0.0, derivate[2], 0.0, vec4(0.0))) * 2.0;\n    res  = (1.0 - t)* d2[0];\n    res +=  \tt\t* d2[1]; \n    return (res);\n}\n*/\n\n/*\nvec3\tbezier_left_dir(vec3 dir, mat3 cp, float t)\n{\n    vec3\tres;\n    vec3\tt2, r, n;\n    mat3\trot;\n    \n    //t \t=> tangeante\n    //t2\t=> derive de tangeant, ou nexte tangeante\n    //r \t=> normalize(t cross t2)\n    \n    t2 = bezier_derive_2(cp, t);\n    r = normalize(cross(t2, dir));\n    rot = mat3(\tvec3(  r.x * r.x  , r.x*r.y - r.z, r.x*r.z + r.y),\n              \tvec3(r.x*r.y + r.z,   r.y * r.y  , r.y*r.z - r.x),\n              \tvec3(r.x*r.z - r.y, r.y*r.z + r.x,   r.z * r.z  ));\n    n = normalize(rot * dir);\n    res.yzx = dir.xyz;\n\treturn (res);\n}*/\n\n\n/*\n\tLe but serait de recuperer toutes les direction directement dans \n\tavec une fonction. On met la direction dans uz, puis les 2 normale \n\ta la courbe dans uy et uz;\n\n\td'ailleurs on pourrait tres problablement genere le ux ou le uy en fonction\n\tde uz et le plus sim ple des deux a caleculer en passant par ce tres cher \"cross\"\n\t\n\tEt puis comme ca la vie est belle =)\n*/\n\nmat3\tbezier_cam_dir_pos(vec3 pos, mat4 cp, float t)\n{\n    mat3\tcp_d1;\n    mat3\tcp_d2;\n    mat3\tret;\n    vec3\tt2;\n    \n    cp_d1 = bezier_derivate(cp);\n    cp_d2 = bezier_derivate(mat4(cp_d1[0], .0, cp_d1[1], .0, cp_d1[2], .0, vec4(.0)));\n    \n    ret[2] = normalize(bezier_dir_front(cp_d1, t));\t\t// z => tangeante\n\n//    t2 = bezier_derive_2(cp_d2, t);    \n    ret[0] = permute2(ret[2]);\n    ret[1] = normalize(cross(ret[2], ret[0]));\n    ret[0] = cross(ret[1], ret[2]);\n    \n    \n    ret[2] += pos;\n    ret[1] += pos;\n    ret[0] += pos;\n    return (ret);\n}\n\nmat3\tbezier_cam_dir(mat4 cp, float t)\n{\n    mat3\tcp_d1;\n    mat3\tcp_d2;\n    mat3\tret;\n    vec3\tt2;\n    \n    cp_d1 = bezier_derivate(cp);\n    cp_d2 = bezier_derivate(mat4(cp_d1[0], .0, cp_d1[1], .0, cp_d1[2], .0, vec4(.0)));\n    \n    ret[2] = normalize(bezier_dir_front(cp_d1, t));\n    ret[0] = permute2(ret[2]);\n    ret[1] = normalize(cross(ret[2], ret[0]));\n    ret[0] = cross(ret[1], ret[2]);\n    return (ret);\n}\n\n\n//\t-----------------------------------------------------\n\n\ns_torus\tset_torus(vec3 p, vec3 t, vec2 size_ok, vec2 size_debug)\n{\n    s_torus\tret;\n    vec3\tp1, p2, n;\n    \n    ret.rot = (rotZ(t.z) * rotY(t.y) * rotX(t.x));\n    ret.pos[0] = p;\n    ret.pos[1] = p +  (n = vec3(.0, 7.0, .0)) * ret.rot;\n    ret.pos[2] = p +  (-n * ret.rot);\n    ret.size1 = size_ok;\n    ret.size2 = size_debug;\n    return (ret);\n}\n\n\nmat4\tset_bezier_coef(s_torus tt1, s_torus tt2)\n{\n    mat4\tb;\n    \n    b[0].xyz = tt1.pos[0];\n    b[1].xyz = tt1.pos[1];\n    b[2].xyz = tt2.pos[2];\n    b[3].xyz = tt2.pos[0];\n    return (b);\n}\n\n\nvec2\tdist_torus_debug(vec3 p, s_torus t)\n{\n    vec2\td, n1, n2;\n\t \n    d  = vec2(torus(t.rot * (p - t.pos[0]), t.size1), 2.0);\n    n1 = vec2(torus((p - t.pos[1]), t.size2), 5.0);\n    n2 = vec2(torus((p - t.pos[2]), t.size2), 6.0);\n    return (vecMin(d, vecMin(n1, n2)));\n}\n\nvec2\tdist_torus(vec3 p, s_torus t)\n{\n    vec2\td;\n\t \n    d  = vec2(torus(t.rot * (p - t.pos[0]), t.size1), 2);\n    return (d);\n}\n//\t-----------------------------------\n\nvec2\t\tdist_cam(vec3 p, vec3 pos, vec3 uz, vec3 ux, vec3 uy)\n{\n    vec2\td;\n    vec2 s = vec2(.0, 0.1);\n    \n    d = vec2(torus((p - pos), s), 8.0);\n\td = vecMin(d, vec2(torus((p - uz), s), 5.0));\n\td = vecMin(d, vec2(torus((p - ux), s), 4.0));\n\td = vecMin(d, vec2(torus((p - uy), s), 3.0));\n    return (d);\n}\n\ns_torus\ttt1, tt2, tt3;\nmat4\tbb;\nmat3\tbbd;\nfloat\ttime, time1, time2;\n\nvoid\tset_torus(float t1)\n{\n    vec3\tp1, ang1, p2, ang2, p3, ang3;\n    vec2\ts1, s2, ret;\n    \n    float dd = 3.0;\n    float ddpp = 7.0;\n    p1  = vec3(0, dd / 2.0, ddpp);\n    p2  = vec3(-dd, -dd / 2.0, ddpp);\n    p3  = vec3(dd, -dd / 2.0, ddpp);\n    \n    ang1 = vec3(t1, t1 * 0.3, t1 * 0.4);\n    ang2 = vec3(t1 * 0.3, t1, t1 * 0.4);\n    ang3 = vec3(t1 * 0.3, t1 * 0.4, t1);\n    \n    s1  = vec2(0.6, 0.3);\n    s2  = vec2(0.0, 0.2);\n    \n    tt1  = set_torus(p1, ang1, s1, s2);\n    tt2  = set_torus(p2, ang2, s1, s2);\n    tt3  = set_torus(p3, ang3, s1, s2);\n}\n\n\nvoid\tset_bezier_path(float t2)\n{\n    if      (mod(t2, 3.0) <= 1.0)\n        bb = set_bezier_coef(tt1, tt2);\n    else if (mod(t2, 3.0) <= 2.0)\n        bb = set_bezier_coef(tt2, tt3);\n    else if (mod(t2, 3.0) <= 3.0)\n        bb = set_bezier_coef(tt3, tt1);\n\t\n    bbd = bezier_derivate(bb);\n}\n\nvoid\tset_time(float t)\n{\n    float\ttime = t / 0.5;\n    time1 = time / 6.0;\n    time2 = 0.1 * time;\n}\n\nvec2 mapMat(vec3 p){\n    float\tt1 = time1;\n    float\tt2 = time2;\n    mat3\tcam_d;\n    vec3\tpcam;\n    vec2\tret = vec2(10000.0, 0.0);\n     \n    \n//    ret = vecMin(dist_torus_debug(p, tt1), dist_torus_debug(p, tt2));\n//    ret = vecMin(ret, dist_torus_debug(p, tt3));\n \n\n    ret = vecMin(dist_torus(p, tt1), dist_torus(p, tt2));\n    ret = vecMin(ret, dist_torus(p, tt3));\n\n\n#ifdef DEBUG_VIEW\n    t2 = t2 - floor(t2);\n    pcam =  bezier_pos(bb, t2);\n    cam_d = bezier_cam_dir_pos(pcam, bb, t2);\n    ret = vecMin(ret, dist_cam(p, pcam, cam_d[2], cam_d[0], cam_d[1]));\n#endif\n\tvec2 flo = vec2(p.y + 5.5, 1.0);\n    vec2 roof = vec2(-p.y + 5.5, 1.0);\n\treturn vecMin(ret, vecMin(flo, roof));\n}\n\n\n\n//Returns the min distance\nfloat map(vec3 p){\n    return mapMat(p).x;\n}\n\nfloat trace(vec3 ro, vec3 rd){\n    float t = 1.0;\n    float d = 0.0;\n    float w = 1.4;\n    float ld = 0.0;\n    float ls = 0.0;\n    float s = 0.0;\n    float cerr = 10000.0;\n    float ct = 0.0;\n    float pixradius = 0.4 / iResolution.x;\n    vec2 c;\n    int inter = 0;\n    for(int i = 0; i < 256; i++){\n        ld = d;\n        c = mapMat(ro + rd * t);\n        d = c.x;      \n        //Detect intersections missed by over-relaxation\n        if(w > 1.0 && abs(ld) + abs(d) < s){\n            s -= w * s;\n            w = 1.0;\n            t += s;\n            continue;\n        }       \n        s = w * d;\n        \n        float err = d / t;\n        \n        if(abs(err) < abs(cerr)){\n            ct = t;\n            cerr = err;\n        }\n\n        //Intersect when d / t < one pixel\n        if(abs(err) < pixradius){\n            inter = 1;\n            break;\n        }\n\n        t += s;\n        if(t > 20.0){\n            break;\n        }\n    }\n    closeObj = c.y;\n    if(inter == 0){\n        ct = -1.0;\n    }\n    return ct;\n}\n\n\n//Approximate normal\nvec3 normal(vec3 p){\n    return normalize(vec3(map(vec3(p.x + 0.0001, p.yz)) - map(vec3(p.x - 0.0001, p.yz)),\n                          map(vec3(p.x, p.y + 0.0001, p.z)) - map(vec3(p.x, p.y - 0.0001, p.z)),\n                \t      map(vec3(p.xy, p.z + 0.0001)) - map(vec3(p.xy, p.z - 0.0001))));\n}\n\nvec3 camPos = vec3(1.0);\nvec3 lightPos = vec3(0.0);\n\nfloat occlusion(vec3 ro, vec3 rd){\n    float k = 1.0;\n    float d = 0.0;\n    float occ = 0.0;\n    for(int i = 0; i < 25; i++){\n        d = map(ro + 0.1 * k * rd);\n        occ += 1.0 / pow(2.0, k) * (k * 0.1 - d);\n        k += 1.0;\n    }\n    return 1.0 - clamp(1.0 * occ, 0.0, 1.0);\n}\n\n//Square\nfloat sqr(float x){\n  return x * x;\n}\n\n//Diffusion normalisation\nfloat diff(float albedo){\n  return albedo / PI;\n}\n\n//GGX NDF\nfloat specD(float NdotH, float a){\n    float asqr = sqr(a);\n  float NdotHsqr = sqr(NdotH);\n  return asqr / (PI * sqr((NdotHsqr) * (asqr - 1.0) + 1.0));\n}\n\nfloat G1(float NdotX, float k){\n//    return 0.0;\n  return NdotX / (NdotX * (1.0 - k) + k);\n}\n\n//Geometric attenuation term\nfloat specG(float NdotV, float NdotL, float k){\n  k /= 20.0;\n  return G1(NdotV, k) * G1(NdotL, k);\n}\n\n//Schlick fresnel approximation used by Unreal Engine\nfloat fresnel(float AdotB){\n  float power = pow(2.0, (-5.55473 * AdotB - 6.98316) * AdotB);\n  return 0.04 + (1.0 - 0.04) * power;\n}\n\n\nvec3 BRDF(vec3 L, vec3 V, vec3 N, vec3 c, float metallic, float roughness, float s, float o){\n  vec3 H = normalize(L + V);\n  float NdotH = dot(N, H);\n  float NdotL = dot(N, L);\n  float NdotV = dot(N, V);\n  \n  if (NdotL < 0.0 || NdotV < 0.0) return vec3(0.0);\n  \n  float VdotH = dot(V, H);\n  float alpha = roughness * roughness;\n\n  float conductor = 1.0 - metallic;\n\n  vec3 specCol = mix(vec3(1.0), c, metallic);\n  \n  float FresL = fresnel(NdotL);\n  float FresV = fresnel(NdotV);\n  float Fresd90 = 0.5 + 2.0 * sqr(VdotH) * roughness;\n  float Fresd = mix(1.0, Fresd90, FresL) * mix(1.0, Fresd90, FresV); \n  \n  float Ds = specD(NdotH, alpha);\n  float FresH = fresnel(VdotH);\n  vec3 Fress = mix(specCol, vec3(1.0), FresH);\n  float Gs = specG(NdotV, NdotL, roughness);\n\n  return (diff(conductor) * Fresd * max(0.0, NdotL) * o * c + Gs * Fress * Ds * floor(s)) - (0.25 - 0.25 * s) * c;\n}\n\nvec3 colour(vec3 p, float id){\n    vec3 n = normal(p);\n    vec3 l = normalize(lightPos - p);\n    vec3 v = normalize(camPos - p);\n    vec3 col;\n    \n    float o = occlusion(p, n);\n    \n    if(id == 1.0){\n        vec2 t = mod(floor(p.xz), 2.0);\n        if(t == vec2(0.0) || t == vec2(1.0)){\n            col = FLOOR_COL_A;\n        }else{\n            col = FLOOR_COL_B;\n        }\n        return BRDF(l, v, n, col, 0.4, 0.2, 1.0, o);\n    }\n    else if(id >= 2.0 || id <= 8.0)\n    {\n        float metal = iMouse.x / iResolution.x;\n        float rough = iMouse.y / iResolution.y;\n        if(rough == 0.0 && metal == 0.0)\n        {\n            metal = 0.1;\n            rough = 0.1;\n        }\n        \n        if (id == 2.0)\n            col = vec3(0.7, 0.35, 0.7);\n        if (id == 3.0)\n            col = A1;\n        if (id == 4.0)\n            col = A2;\n        if (id == 5.0)\n            col = A3;\n        if (id == 6.0)\n            col = B1;\n        if (id == 7.0)\n            col = B2;\n        if (id == 8.0)\n            col = A0;\n        return BRDF(l, v, n, col, metal, rough, 1.0, o);\n    }\n    return vec3(0.0, 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    mat3\tcam_d;\n    vec3\tro, rd;\n    float\tt2;\n    \n    set_time(iTime);\n    set_torus(time1);\n    set_bezier_path(time2);\n    \n    \n    lightPos = vec3(sin(iTime) * 3.0, cos(iTime), 0.0);\n    \n#ifdef DEBUG_VIEW \n    camPos = vec3(0.0 , 0.0, 0.0);\n    ro = camPos;\n    rd = normalize(vec3(uv, 1.0));\n#else\n    t2 = time2 - floor(time2);\n    ro = bezier_pos(bb, t2);\n    cam_d = bezier_cam_dir(bb, t2);\n    rd = normalize(uv.x * cam_d[0] + uv.y * cam_d[1] + cam_d[2]);\n#endif\n        \n    float d = trace(ro, rd);\n    vec3 c = ro + rd * d;\n    vec3 col = vec3(0.0);\n    //If intersected\n    if(d > 0.0){\n        //Colour the point\n        col = colour(c, closeObj);\n        //Apply fog\n    \tcol *= 1.0 / exp(d * 0.1);\n    }else{\n        col = vec3(0.0);\n    }\n    col = pow( col, vec3(0.4545) );\n\tfragColor = vec4(col,1.0);\n}\n\n/*\n\tro\t: ray_origin\n\trd\t: ray_direction\n*/","name":"Image","description":"","type":"image"}]}