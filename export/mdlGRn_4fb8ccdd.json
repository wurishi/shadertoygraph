{"ver":"0.1","info":{"id":"mdlGRn","date":"1665579985","viewed":135,"name":"coral die","username":"nexor","description":".","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["raymarch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define resolution iResolution.xy\n#define frame iFrame\n#define touch iMouse.xy\nconst float pi=3.14159;\nconst float tau=pi*2.;\nconst float EPSILON=.0005;\nconst float PRECISION =.00025;\n#define pi_(n) (pi/(n))\n\n#define replim(p,c,a,b) ((p)-(c)*clamp(round((p)/(c)),(a),(b)))\n\nmat2 rot(float a)\n{\nfloat c=cos(a),s=sin(a);\nreturn mat2(c,-s,s,c);\n}\n\nfloat rand(vec2 n) {\nreturn fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\nfloat noise(vec2 p)\n{\nvec2 ip = floor(p);\nvec2 u = fract(p);\nu = u*u*(3.0-2.0*u);\nfloat res = mix(\nmix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\nmix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\nreturn res*res;\n}\n\nfloat fbm(vec2 p)\n{\nconst mat2 M =mat2(\n.74,-.52,\n.64,.73\n);\n    float f = 0.0;\n    f += 0.5000*noise( p ); p*=M*2.02;\n    f += 0.2500*noise( p ); p*=M*2.03;\n    f += 0.1250*noise( p ); p*=M*2.01;\n    f += 0.0625*noise( p );\n    f /= 0.9375;\n    return f;\n}\n\nvec3 hash3( float n )\n{return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));}\nfloat mod289(float x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}\nvec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}\n\nfloat noise(vec3 p){\n    vec3 a = floor(p);\n    vec3 d = p - a;\n    d = d * d * (3.0 - 2.0 * d);\n\n    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);\n    vec4 k1 = perm(b.xyxy);\n    vec4 k2 = perm(k1.xyxy + b.zzww);\n\n    vec4 c = k2 + a.zzzz;\n    vec4 k3 = perm(c);\n    vec4 k4 = perm(c + 1.0);\n\n    vec4 o1 = fract(k3 * (1.0 / 41.0));\n    vec4 o2 = fract(k4 * (1.0 / 41.0));\n\n    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);\n    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);\n\n    return o4.y * d.y + o4.x * (1.0 - d.y);\n}\n\nconst mat3 M3 =mat3(\n.74,-.52,.42,\n.64,.73,-.23,\n-.19,.45,.88\n);\n\nfloat fbm(vec3 p)\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p*=M3*2.02;\n    f += 0.2500*noise( p ); p*=M3*2.03;\n    f += 0.1250*noise( p ); p*=M3*2.01;\n    f += 0.0625*noise( p );\n    f /= 0.9375;\n    return f;\n}\n\nvec2 fan(vec2 p,float n)\n{\nfloat a=atan(p.y,p.x);\na=mod(a,pi*2./n)-pi/n;\nreturn length(p)*vec2(cos(a),sin(a));\n}\n\nfloat smin(float a, float b, float k)\n{\n    float x = exp(-k * a);\n    float y = exp(-k * b);\n    return (a * x + b * y) / (x + y);\n}\n\nfloat smax(float a, float b, float k)\n{\n    return smin(a, b, -k);\n}\n\nfloat line(vec3 p,vec3 a,vec3 b )\n{\nvec3 pa = p-a, ba = b-a;\nfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\nreturn length( pa - ba*h );\n}\n\nfloat box( vec3 p, vec3 b )\n{\nvec3 d = abs(p) - b;\nreturn min(max(d.x,max(d.y,d.z)),0.0)\n+ length(max(d,0.0));\n}\n\nfloat sdTriPrism( vec3 p, vec2 h ) { vec3 q = abs(p); return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5); }\n\nfloat map(vec3 p)\n{\nfloat t=float(frame)/60.;\n//t=3.1;\nt*=.3;\nfloat d=1e3;\np*=1.2;\nvec3 q=p;\np.xz*=rot(t*1.13);\np.yx*=rot(t*2.17);\nd=box(p,vec3(.25));\n//d-=fbm(p.xz*5.)*.05;\n//d*=.8;\n\nfloat e=length(q)-.325;\nd=mix(d,e,-1.25);\nd-=.05;\nd*=.5;\n//d=smin(d,e+.15,.15);\nd=smin(d,e,14.);\nd=min(d,e+.15);\n//d=min(d,line(p,vec3(0,0,-1),vec3(0,0,1))-.05);\n//d=min(d,line(p,vec3(0,-1,0),vec3(0,1,0))-.05);\n//d=min(d,line(p,vec3(-1,0,0),vec3(1,0,0))-.05);\nd*=.6;\n\n//d*=.7;\n\n//d=min(d,q.y+.5);\n//d*=.85;\n//d*=.8;\nreturn d;\n}\n\nfloat softShadow(vec3 ro, vec3 rd,\nfloat mint, float tmax) {\n  float res = 1.0;\n  float t = mint;\n\n  for(int i = 0; i < 16; i++) {\n    float h = map(ro + rd * t);\n      res = min(res, 8.0*h/t);\n      t += clamp(h, 0.02, 0.10);\n      if(h < PRECISION || t > tmax) break;\n  }\n\n  return clamp( res, 0.0, 1.0 );\n}\n\n\nvec3 normal(in vec3 p) {\nvec2 e = vec2(1, -1) * EPSILON;\nreturn normalize(\ne.xyy * map(p + e.xyy)\n+ e.yyx * map(p + e.yyx)\n+ e.yxy * map(p + e.yxy)\n+ e.xxx * map(p + e.xxx));\n}\nmat3 camera(vec3 ro, vec3 ta)\n{\nvec3 cd = normalize(ta-ro);\nvec3 cr = normalize(\ncross(vec3(0,1,0),cd));\nvec3 cu = normalize(cross(cd,cr));\nreturn mat3(-cr,cu,-cd);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\nvec3 bgcol=vec3(.6,.7,.8);\nvec2 uv = fragCoord.xy / resolution.xy;\nvec2 q=(fragCoord.xy-.5*resolution)/resolution.x;\nvec2 s=abs(q)-vec2(.175);\nif(max(s.x,s.y)>0.)\n{\n    fragColor.rgb = pow(bgcol,vec3(1./2.2));\n    return;\n}\n// if(length(q)>.175)discard;\n//if(frame>1)discard;\n\nvec3 col=vec3(0);\nfloat t=0.;\nbool hit=false;\nvec2 tc=(2.*touch-resolution)/resolution.x;\nvec3 ro=vec3(0.,0.,4);\nro*=1.;\nfloat dt=float(frame)/60.;\n//dt=0.;\nro.xz*=rot(dt);\nro.y+=3.;\n//ro.yz*=rot(tc.y*2.);\nvec3 ta=vec3(0,0,0);\nvec3 rd=camera(ro,ta)\n*normalize(vec3(q,-1.5));\nint i=0;\nfloat d=1e3;\nfor(i=0;i<1500;++i)\n{\n  d=map(ro+rd*t);\n  t+=d;\n  if(d<PRECISION/5.)\n  {hit=true;break;}\n  if(t>200.)\n  {break;}\n}\nvec3 hitcol=vec3(0);\n\n\nvec3 p=ro+rd*t;\nvec3 n=normal(p);\nif(hit)\n{\nvec3 light=vec3(4,9,2)*.4;\n  vec3 lig=normalize(light-p);\n  float dif=dot(n,lig)*.5+.5;\n  float spe=pow(max(0.,\n  dot(n,normalize(lig-rd))),180.);\n\nfloat fresnel = pow(clamp(1. -\ndot(n, -rd), 0., 1.), 5.);\n\nfloat sha=clamp(\nsoftShadow(p,lig,\n.075,3.),\n.1,1.);\n\n\n  hitcol=vec3(0)\n  +mix(\n   vec3(.3,.8,.4),\n  vec3(.9,.2,.1),\n  dif)\n   ;\n   hitcol=pow(hitcol,vec3(2.));\n  hitcol+=spe*.9;\n  hitcol+=fresnel*.5;\n  dt*=.3;\n  p.xz*=rot(dt*1.13);\n  p.yx*=rot(dt*2.17);\n  hitcol*=cos(vec3(2,3,5)\n  *fbm(p*32.*fbm(p*8.))*pi*4.)*.5+.5;\n  hitcol=pow(hitcol,vec3(1./1.2));\n  hitcol*=sha;\n}\ncol=hitcol;\n//OUTLINE\n#if 0\nfloat tm=smoothstep(0.,.1,\npow(float(i)/pow(th,50.),50.)\n);\n//tm=float(c-1)/120.;\n//tm=smoothstep(.15,.1,tm);\ncol=mix(hitcol,col,tm);\n#endif\n\n//FOG\n#if 1\n  col = mix(col, bgcol, 1.0 - exp(-0.0002 * t*t*t)); // fog\n#endif\n\ncol=pow(col,vec3(1./2.2));\n\n// col*=smoothstep(.15*1.01,.15,length(q));\n\nfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}