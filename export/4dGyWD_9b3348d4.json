{"ver":"0.1","info":{"id":"4dGyWD","date":"1549436654","viewed":1188,"name":"FFT","username":"rory618","description":"Variable radix, set by iResolution to miniumum to fit within window.\nFFT computed using horizontal and vertical pass, as well as one subdivision using Cooleyâ€“Tukey\nMay run better in fullscreen and in general if radix is set to const by uncommenting line 7","likes":7,"published":1,"flags":32,"usePreview":0,"tags":["fast","fourier","transform"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 O, in vec2 I ) {\n\t\n    setRadix(R);\n    I -= margin;\n    O = vec4(0);\n    if(I.x>0.&&I.y>0. && I.x-fradix*fradix<fradix*fradix && I.y<fradix*fradix){\n        if(I.x<fradix*fradix){\n            O = texelFetch(iChannel0, ivec2(I), 0).zwzw;\n        } else {\n            O = texelFetch(iChannel1, ivec2(mod(floor(I)-vec2(radix*radix,0)+fradix*fradix/2.,vec2(radix*radix))), 0).zwzw;\n        }\n    }\n    O = abs(O);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159\n#define margin ((floor(R.xy)-vec2(radix*radix*2,radix*radix))/2.)\n#define W(i,n) cexp(vec2(0,2.*pi*float(i)/float(n)))\n#define R iResolution\n#define fradix float(radix)\n\n//#define CONST_RADIX\n\n#ifndef CONST_RADIX\nint radix;\n#else\nconst int radix = 25;\n#endif\n\nvoid setRadix(vec3 R){\n#ifndef CONST_RADIX\n    radix = int(sqrt(min(R.y,R.x/2.))-1.);\n#endif\n}\n\nvec2 cprod(vec2 a, vec2 b){\n    return mat2(a,-a.y,a.x) * b;\n}\n\nvec2 cis(float t){\n    return cos(t - vec2(0,pi/2.));\n}\nvec2 cexp(vec2 z) {\n    return exp(z.x)*cis(z.y);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//First and second fft pass, horizontal\n\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    \n    if(I.x > fradix*fradix || I.y > fradix*fradix) return;\n   \n    \n    O = vec4(0.0);\n    \n    vec2 sum = vec2(0);\n    int n = int(I.x)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.x = (k.x%radix)+i*radix;\n        \n        vec2 M = iMouse.xy-margin;\n        if(!(iMouse.z>0.&&M.x>0.&&M.x<fradix*fradix&&M.y>0.&&M.y<fradix*fradix  &&length(M-vec2(k))>40.)){\n            sum += cprod(texelFetch(iChannel0, k, 0).xy,W(i*n,radix));\n        }\n    }\n    \n    O.xy = sum/fradix;\n    //twiddle factor\n    O.xy = cprod(O.xy,W((int(I.x)%radix)*(int(I.x)/radix),radix*radix));\n    \n    sum = vec2(0);\n    n = int(I.x)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.x = (k.x%radix)*radix+i;\n        sum += cprod(texelFetch(iChannel1, k, 0).xy,W(i*n,radix));\n    }\n    O.zw = sum/fradix;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Third and fourth fft pass, vertical\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    if(I.x > fradix*fradix || I.y > fradix*fradix) return;\n    \n    O = vec4(0.0);\n        \n    vec2 sum = vec2(0);\n    int n = int(I.y)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.y = (k.y%radix)+i*radix;\n        sum += cprod(texelFetch(iChannel0, k, 0).zw,W(i*n,radix));\n    }\n    \n    O.xy = sum;\n    \n    //twiddle factor\n    O.xy = cprod(O.xy,W((int(I.y)%radix)*(int(I.y)/radix),radix*radix));\n    \n    \n        \n    sum = vec2(0);\n    n = int(I.y)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.y = (k.y%radix)*radix+i;\n        sum += cprod(texelFetch(iChannel1, k, 0).xy,W(i*n,radix));\n    }\n    O.zw = sum;\n    vec2 M = iMouse.xy-margin-vec2(radix*radix,0);\n    if(iMouse.z>0.&&M.x>0.&&M.x<fradix*fradix&&M.y>0.&&M.y<fradix*fradix  &&length(M-mod(I+fradix*fradix/2.,vec2(radix*radix)))>40.){\n        O.zw*=0.;\n    } else {\n        float l = (.13+.1*sin(iTime*.3))*length(fradix*fradix/2.-mod(I+fradix*fradix/2.,vec2(radix*radix)));\n        O.zw*=sin(l)/l;\n    }\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//First and second inverse pass, horizontal\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    if(I.x > fradix*fradix || I.y > fradix*fradix) return;\n    \n    O = vec4(0.0);\n        \n    vec2 sum = vec2(0);\n    int n =  -int(I.x)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.x = (k.x%radix)+i*radix;\n        sum += cprod(texelFetch(iChannel0, k, 0).zw,W(i*n,radix));\n    }\n    \n    O.xy = sum/fradix;\n    //twiddle factor\n    O.xy = cprod(O.xy,W(-(int(I.x)%radix)*(int(I.x)/radix),radix*radix));\n    \n    \n        \n    sum = vec2(0);\n    n = -int(I.x)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.x = (k.x%radix)*radix+i;\n        sum += cprod(texelFetch(iChannel1, k, 0).xy,W(i*n,radix));\n    }\n    O.zw = sum/fradix;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//Third and fourth inverse pass, vertical\nvoid mainImage( out vec4 O, in vec2 I )\n{\n    setRadix(R);\n    if(I.x > fradix*fradix || I.y > fradix*fradix) return;\n    \n    O = vec4(0.0);\n        \n    vec2 sum = vec2(0);\n    int n = -int(I.y)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.y = (k.y%radix)+i*radix;\n        sum += cprod(texelFetch(iChannel0, k, 0).zw,W(i*n,radix));\n    }\n    \n    O.xy = sum;\n    //twiddle factor\n    O.xy = cprod(O.xy,W(-(int(I.y)%radix)*(int(I.y)/radix),radix*radix));\n    \n    \n    sum = vec2(0);\n    n = -int(I.y)/radix;\n    for(int i = 0; i < 32; i++){\n        if (i >= radix) break;\n        ivec2 k = ivec2(I.x,I.y);\n        k.y = (k.y%radix)*radix+i;\n        sum += cprod(texelFetch(iChannel1, k, 0).xy,W(i*n,radix));\n    }\n    O.zw = sum;\n}","name":"Buffer D","description":"","type":"buffer"}]}