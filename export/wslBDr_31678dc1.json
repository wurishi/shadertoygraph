{"ver":"0.1","info":{"id":"wslBDr","date":"1588086196","viewed":66,"name":"fork-- Triangle - distance 3D","username":"jorge2017a1","description":"version modificada por jorge\nhttps://www.shadertoy.com/view/4sXXRN  por IQ","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["forktriangledistance"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//version modificada por jorge --28-abril-2020\n//https://www.shadertoy.com/view/4sXXRN  por IQ\n\n// The MIT License\n// Copyright Â© 2014 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// It computes the distance to a triangle.\n//\n// See here: https://iquilezles.org/articles/triangledistance\n//\n// In case a mesh was rendered, only one square root would be needed for the\n// whole mesh. In this example the triangle is given a thckness of 0.01 units\n// for display purposes. Like the square root, this thickness should be added\n// only once for the whole mesh too.\n\n\n//\n// List of primitive SDFs at https://iquilezles.org/articles/distfunctions\n\n\nmat4 mdv;\n\n///-------------------------------------------------------\n// a perspective correct triangle rasterizer, in a shader :D\n\nmat4 setRotation( float x, float y, float z )\n{\n    float a = sin(x); float b = cos(x); \n    float c = sin(y); float d = cos(y); \n    float e = sin(z); float f = cos(z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 0.0,      0.0,      0.0, 1.0 );\n}\n\nmat4 setTranslation( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,     y,   z, 1.0 );\n}\n///-------------------------------------------------------\n\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\n\nfloat udTriangle( in vec3 v1, in vec3 v2, in vec3 v3, in vec3 p )\n{\n    vec3 v21 = v2 - v1; vec3 p1 = p - v1;\n    vec3 v32 = v3 - v2; vec3 p2 = p - v2;\n    vec3 v13 = v1 - v3; vec3 p3 = p - v3;\n    vec3 nor = cross( v21, v13 );\n\n    return sqrt( (sign(dot(cross(v21,nor),p1)) + \n                  sign(dot(cross(v32,nor),p2)) + \n                  sign(dot(cross(v13,nor),p3))<2.0) \n                  ?\n                  min( min( \n                  dot2(v21*clamp(dot(v21,p1)/dot2(v21),0.0,1.0)-p1), \n                  dot2(v32*clamp(dot(v32,p2)/dot2(v32),0.0,1.0)-p2) ), \n                  dot2(v13*clamp(dot(v13,p3)/dot2(v13),0.0,1.0)-p3) )\n                  :\n                  dot(nor,p1)*dot(nor,p1)/dot2(nor) );\n}\n\n//=====================================================\n\nfloat map( in vec3 p )\n{\n    // triangle\t\n    \n      \t\t\n    vec3 v0 = vec3(-1.0,0.0, 1.0);\n    vec3 v1 = vec3(1.0, 0.0, 1.0);    \n    vec3 v2 = vec3(1.0, 0.0, -1.0);    \n    vec3 v3 = vec3(-1.0,0.0, -1.0);\n    vec3 v4 = vec3(0.0, 1.0, 0.0)*vec3(1.0,3.0,1.0);\t\n\t\n\n    v0= (mdv * vec4(v0,1.0)).xyz;\n    v1= (mdv * vec4(v1,1.0)).xyz;\n    v2= (mdv * vec4(v2,1.0)).xyz;\n    v3= (mdv * vec4(v3,1.0)).xyz;\n    v4= (mdv * vec4(v4,1.0)).xyz;\n    \n\t//triangulos\n\tfloat d11 = udTriangle( v0, v1, v4, p ) - 0.01;\n    float d12 = udTriangle( v1, v2, v4, p ) - 0.01;\n    float d13 = udTriangle( v3, v0, v4, p ) - 0.01;\n    float d14 = udTriangle( v3, v2, v4, p ) - 0.01;\n\n     ///cuadro inferior\n    float d15 = udTriangle( v0, v2, v1, p ) - 0.01;\n    float d16 = udTriangle( v0, v3, v2, p ) - 0.01;\n    \n\n    // ground plane\n\tfloat d2 = p.y + 2.0;\n    \n\tfloat find =10000.0;\n    find =min(find, d2);\n    find =min(find, d11);\n    find =min(find, d12);\n    find =min(find, d13);\n    find =min(find, d14);\n    \n    find =min(find, d15);\n   // find =min(find, d16);\n    \n    \n   \t\n    return find;\n}\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 10.0;\n\tfloat h = 1.0;\n    float t = 0.0;\n    for( int i=0; i<50; i++ )\n    {\n        if( h<0.001 || t>maxd ) break;\n\t    h = map( ro+rd*t );\n        t += h;\n    }\n\n    if( t>maxd ) t=-1.0;\n\t\n    return t;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.0;\n\tfloat h = 1.0;\n    for( int i=0; i<20; i++ )\n    {\n        h = map(ro + rd*t);\n        res = min( res, k*h/t );\n\t\tt += clamp( h, 0.01, 1.0 );\n\t\tif( h<0.0001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.02 + 0.025*float(i*i);\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return 1.0 - clamp( occ, 0.0, 1.0 );\n}\n\nvec3 lig = normalize(vec3(1.0,0.9,0.7));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 mo = iMouse.xy/iResolution.xy;\n\tmdv = setTranslation( 0.0, 0.0, -3.0 ) * \n\t\t       setRotation( 0.6-6.0*mo.y+iTime, 0.0,  0.6 ) * \n\t\t       setRotation( 0.0, 20.0+1.0*iTime - 6.3*mo.x, 0.0 );\n    \n    \n    \n    vec2 p = (-iResolution.xy + 2.0*fragCoord)/iResolution.y;\n\n\tvec3 ro = vec3(0.0, 0.25, 2.0 );\n\tvec3 rd = normalize( vec3(p,-1.0) );\n\t\n\tvec3 col = vec3(0.0);\n\n    float t = intersect(ro,rd);\n    if( t>0.0 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tfloat sha = calcSoftshadow( pos + nor*0.01, lig, 32.0 );\n\t\tfloat occ = calcOcclusion( pos, nor );\n\t\tcol =  vec3(0.9,0.6,0.3)*clamp( dot( nor, lig ), 0.0, 1.0 ) * sha;\n\t\tcol += vec3(0.5,0.1,0.7)*clamp( nor.y, 0.0, 1.0 )*occ;\n        col += 0.03;\n\t\tcol *= exp( -0.2*t );\n        col *= 1.0 - smoothstep( 5.0, 10.0, t );\n\t}\n\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"Image","description":"","type":"image"}]}