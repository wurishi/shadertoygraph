{"ver":"0.1","info":{"id":"ssG3WK","date":"1698710031","viewed":109,"name":"XOR SDF","username":"jt","description":"The XOR operator creates exact SDF see iq's [url=https://iquilezles.org/articles/sdfxor/]new article[/url].\nOperators (union, subtraction, intersection) don't always, as explained in iq's [url=https://www.shadertoy.com/view/3t33WH]Interior Distance[/url].","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["sdf","xor"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/ssG3WK XOR SDF by jt\n// \n// Wrote this as a private test a while ago (found a backup from 2021-09-21)\n// switched to unlisted 2023-10-30 to ask iq about xor sdf exactness\n// made it public 2023-11-20 now that iq wrote an article about it :-)\n// Jakob Thomsen\n//\n// Related:\n//\n// The 2023-11-20 article https://iquilezles.org/articles/sdfxor/ by Inigo Quilez.\n// \n// https://www.shadertoy.com/view/3t33WH Interior Distance by iq\n// https://www.shadertoy.com/view/DdX3WH Interior Distance Detect Errors, jt\n//\n// Operators union, subtraction, intersection do NOT always give a valid sdf,\n// as iq explains in https://iquilezles.org/articles/interiordistance\n//\n// Does the symmetric difference always result in a valid signed distance field?\n// In the comments iq provided the following proof:\n// \"Yes, it is. You can see this by expanding the arithmetic of the four cases:\n//  1) a>0, b>0 --> xor(a,b) = max(min(a,b),-max(a,b)) =  min( a, b) =  min(a,b)\n//  2) a<0, b>0 --> xor(a,b) = max(min(a,b),-max(a,b)) =  max( a,-b) = -min(-a,b)\n//  3) a>0, b<0 --> xor(a,b) = max(min(a,b),-max(a,b)) =  max(-a, b) = -min(a,-b);\n//  4) a<0, b<0 --> xor(a,b) = max(min(a,b),-max(a,b)) = -max( a, b) =  min(-a,-b)\n// All four cases reduce to a min() of exterior distances (that is, to a min of two positive arguments),\n// which as we know is always exact. So the XOR(a,b) is exact.\"\n// Thanks! Shadertoy is a really wonderful project!\n\n// Licence: The xor function is public domain.\n// XOR is an obvious operator - no need to credit me.\n// But if you want people to learn about the xor operator\n// feel free to reference this shader and/or iq's article.\n\n// NOTE: 1d SDF is related to fuzzy logic with\n//     and equivalent to min\n//     or equivalent to max\n//     not equivalent to negation\n// Other operators can be derived via these relations.\n\nfloat sdBox( in vec2 p, in vec2 b ) // https://iquilezles.org/articles/distfunctions\n{\n    vec2 q = abs(p) - b;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nfloat sdCircle( vec2 p, float r ) // https://iquilezles.org/articles/distfunctions\n{\n    return length(p) - r;\n}\n\n// It seems like xor does not have the problems explained in https://www.shadertoy.com/view/3t33WH Interior Distance by iq\n// Confirmed in this new article https://iquilezles.org/articles/sdfxor/ by iq\nfloat xor(float a, float b)\n{\n    // NOTE: XOR can be implemented via sign but sign is buggy on some platforms as spalmer found out.\n    return max(min(a, b), -max(a, b));\n    // Variants are possible by what iq calls “min-max substitution”,\n    // an application of https://en.wikipedia.org/wiki/De_Morgan%27s_laws\n    // In context of fuzzy logic (in the case of one-dimensional distance functions):\n    // https://en.wikipedia.org/wiki/T-norm might be interesting.\n}\n\nfloat map(vec2 p)\n{\n\tfloat a = sdBox(p-vec2(0.25,0), vec2(0.5));\n    float b = sdCircle(p+vec2(0.25,0), sqrt(0.5));\n    float d = xor(a, b); // valid distance field\n    //float d = max(b,-a); // error in distance field\n    //float d = min(a,b); // error in distance field\n    //float d = max(a,b); // valid distance field\n    return d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n\n    float d = map(p);\n    /*\n    vec3 col = vec3(1.0) - sign(d)*vec3(0.1,0.4,0.7);\n\tcol *= 1.0 - exp(-2.0*abs(d));\n\tcol *= 0.8 + 0.2*cos(140.0*d);\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n    */\n    // iq's sdf coloring\n    vec3 col = (d<0.0) ? vec3(0.6,0.8,1.0) : vec3(0.9,0.6,0.3);\n    col *= 1.0 - exp(-9.0*abs(d));\n\tcol *= 1.0 + 0.2*cos(128.0*abs(d));\n\tcol = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n\n    if( iMouse.z>0.001 )\n    {\n        d = map(m);\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, abs(length(p-m)-abs(d))-0.0025));\n        col = mix(col, vec3(1.0,1.0,0.0), 1.0-smoothstep(0.0, 0.005, length(p-m)-0.015));\n    }\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}