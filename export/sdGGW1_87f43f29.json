{"ver":"0.1","info":{"id":"sdGGW1","date":"1631448943","viewed":99,"name":"Major and Minor Axes","username":"Dave_Green","description":"A grid of major and minor axes","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = vec2(fragCoord.xy - 0.5 * iResolution.xy);\n    // [0, iResolution.x] -> [-0.5*iResolution.x, 0.5*iResolution.x]\n\t// [0, iResolution.y] -> [-0.5*iResolution.y, 0.5*iResolution.y]\n    \n\t//uv = 2.0 * uv.xy / iResolution.xy;\n    \n    // To keep the aspect ratio so the grid has squares and NOT rectngles\n    // divide iResolution by y only.\n    uv = 2.0 * uv.xy / iResolution.y;\n\n\t// [-0.5*iResolution.x, 0.5*iResolution.x] -> [-1.0, 1.0]\n\n    vec3 bgCol = vec3(1.0);\n    vec3 majAxesCol = vec3(0.5, 0.5, 0.5);\n    vec3 minAxisCol = vec3(0.3, 0.3, 0.3);\n    vec3 finalPixelCol = vec3(0.0);\n    float alpha = 0.0;\n    float majAxisThickness = 0.005;\n    float minAxisThickness = majAxisThickness / 2.0;\n    float majAxisDivisions = 1.0 / 5.0;\n    float minAxisDivision = 1.0 / 10.0;\n    \n    // Draw the bg col\n    finalPixelCol = bgCol;\n    \n    // Draw the gird\n    for(float i = -2.0; i < 2.0; i += 0.1)\n    {\n        if(abs(uv.x - i) < majAxisThickness)\n        {\n            finalPixelCol = majAxesCol;\n        }\n        \n        if(abs(uv.y - i) < majAxisThickness)\n        {\n            finalPixelCol = majAxesCol;\n        }\n    }\n    \n    // Draw the main blue axes\n    if(abs(uv.x) < 0.008)\n    {\n        finalPixelCol = vec3(0.0, 0.0, 1.0);\n    }\n    \n    if(abs(uv.y) < 0.008)\n    {\n        finalPixelCol = vec3(0.0, 0.0, 1.0);\n    }\n    \n    fragColor = vec4(finalPixelCol, alpha);    \n}","name":"Image","description":"","type":"image"}]}