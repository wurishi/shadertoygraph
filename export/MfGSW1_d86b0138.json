{"ver":"0.1","info":{"id":"MfGSW1","date":"1715103389","viewed":73,"name":"box frame portal","username":"Green_Coati","description":"it do look kinda neat","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat2 rot2D(float a) {\n\treturn mat2(cos(a), -sin(a), sin(a), cos(a));\n}\n\nfloat smin( float a, float b, float k )\n{\n\tk *= 6.0;\n\tfloat h = max( k-abs(a-b), 0.0 )/k;\n\treturn min(a,b) - h*h*h*k*(1.0/6.0);\n}\n\nfloat dot2(vec2 u, vec2 v) {\n\treturn u.x * v.x + u.y * v.y;\n}\n\nfloat dot2(vec2 v) {\n\treturn dot2(v, v);\n}\n\nfloat sdCappedCone( vec3 p, float h, float r1, float r2 )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  vec2 k1 = vec2(r2,h);\n  vec2 k2 = vec2(r2-r1,2.0*h);\n  vec2 ca = vec2(q.x-min(q.x,(q.y<0.0)?r1:r2), abs(q.y)-h);\n  vec2 cb = q - k1 + k2*clamp( dot(k1-q,k2)/dot2(k2), 0.0, 1.0 );\n  float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;\n  return s*sqrt( min(dot2(ca),dot2(cb)) );\n}\n\nfloat maxVec3(vec3 p) {\n\treturn max(p.x, max(p.y, p.z));\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n\tvec3 q = abs(p) - b;\n\treturn length(max(q, 0.0)) + min(maxVec3(q), 0.0);\n}\n\nfloat sdSphere(vec3 p, float r) {\n\treturn length(p) - r;\n}\n\nfloat sdBoxFrame( vec3 p, vec3 b, float e )\n{\n    p = abs(p)-b;\n\t vec3 q = abs(p+e)-e;\n\t return min(min(\n   \t length(max(vec3(p.x,q.y,q.z),0.0))+min(max(p.x,max(q.y,q.z)),0.0),\n   \t length(max(vec3(q.x,p.y,q.z),0.0))+min(max(q.x,max(p.y,q.z)),0.0)),\n   \t length(max(vec3(q.x,q.y,p.z),0.0))+min(max(q.x,max(q.y,p.z)),0.0));\n}\n\nfloat map(vec3 p) {\n\tvec3 q = mod(p - vec3(0.5, 0.5, 0), 1.0) - 0.5;\n\tfloat box = sdBox(q, vec3(0.1));\n\tfloat cone = sdCappedCone(q, 0.1, 0.1, 0.05);\n\tfloat sphere = sdSphere(p, 0.5);\n\tfloat otherBox = sdBox(p - vec3(2.0 * sin(iTime), 0, 0), vec3(0.5));\n\tfloat boxFrame = sdBoxFrame(q, vec3(0.5), 0.0125 * sin(iTime) + 0.0375);\n\tfloat ground = p.y + 0.5;\n\treturn boxFrame;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n    \n\tvec3 ro = vec3(0, 0, -3);\n\tvec3 rd = normalize(vec3(uv, 1));\n\tfloat t = 0.0;\n    \n\tfor (int i = 0; i < 200; i++) {\n    \tvec3 p = ro + rd * t;\n    \tp.xy *= rot2D(t * 0.4 * sin(iTime));\n    \t// p.xy += vec2(cos(u_time), sin(u_time));\n    \tp.z += 6.0 * iTime + 4.0 * sin(iTime * 2.0);\n    \tp.z += 0.5;\n    \tfloat d = map(p);\n    \tt += d;\n    \tif (d < 0.001 || d > 100.0) break;\n\t}\n    \n\tfloat col = t * 0.1;\n\n\tfragColor = vec4(col * 0.3, 0.0, col * sin(iTime), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}