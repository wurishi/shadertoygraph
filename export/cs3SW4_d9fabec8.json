{"ver":"0.1","info":{"id":"cs3SW4","date":"1679756751","viewed":62,"name":"simple julia sm","username":"sleeplessmonk","description":"simple fractal with mic reactivity","likes":0,"published":1,"flags":4,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float max_iterations = 100.0;\nfloat bailout = 4.0;\nvec2 julia_const = vec2(-0.8, 0.156);\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvec3 julia_butterfly(vec2 c, float angle, float zoom, float audioReact) {\n    vec2 z = vec2(c.x, c.y);\n    float iterations = 0.0;\n    vec2 butterfly = vec2(cos(angle), sin(angle));\n    \n    for(int i = 0; i < int(max_iterations); i++) {\n        vec2 z_squared = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y);\n        vec2 z_squared_rotated = vec2(z_squared.x * butterfly.x - z_squared.y * butterfly.y, z_squared.x * butterfly.y + z_squared.y * butterfly.x);\n        z = z_squared_rotated + julia_const;\n        \n        if (length(z) > bailout) {\n            break;\n        }\n        \n        iterations++;\n    }\n    \n    float hue = mod(iterations * 5.0, 360.0) / 360.0;\n    float saturation = 1.0;\n    float value = 1.0 - pow(iterations / max_iterations, 0.3);\n    vec3 color = hsv2rgb(vec3(hue, saturation, value));\n    color = mix(color, vec3(1.0), pow(audioReact, 2.0));\n    \n    return color;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float timeVal = iTime * 0.1;\n    float audioReact = texture(iChannel0, vec2(0.5, 0.5)).r;\n    float zoom = .03 + audioReact * 10.0;\n    float angle = timeVal * 0.5;\n    vec2 uv = (fragCoord.xy - 0.5 * iResolution.xy) / iResolution.y * zoom;\n    \n    vec3 color = julia_butterfly(uv, angle, zoom, audioReact);\n    \n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}