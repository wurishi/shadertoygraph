{"ver":"0.1","info":{"id":"Wl2cDt","date":"1595717776","viewed":320,"name":"Basic 2 pass AA","username":"Nrx","description":"Basic anti-aliasing using 2 buffers (1 buffer being shifted by 0.5 pixel, and fetched with linear filtering).\nClick to disable it.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["aa"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\t// Render the scene normally\n\tfragColor = Render (fragCoord, iResolution.xy, iTime);\n\n\t// Mix with the scene shifted by half a pixel\n\t// Notes:\n\t// - Linear filtering has to be used to fetch the color\n\t// - A value of 0.8 for the mix returns the actual average of the 5 sampling points,\n\t//   while 0.5 acts more like a Gaussian filter\n\tif (iMouse.z < 0.5) {\n\t\tfragColor = mix (fragColor, texture (iChannel0, (fragCoord + 0.5) / iResolution.xy), 0.5);\n\t}\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n\t// Render the scene shifted by half a pixel\n\tif (iMouse.z < 0.5) {\n\t\tfragColor = Render (fragCoord - 0.5, iResolution.xy, iTime);\n\t}\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"// Example: basic Mandelbrot set display (from https://www.shadertoy.com/view/tt2yWV)\n#define C vec2 (-0.743603, 0.1318205)\n#define N 900.0\n\nmat2 Rotate (in float angle)\n{\n\tfloat c = cos (angle);\n\tfloat s = sin (angle);\n\treturn mat2 (c, s, -s, c);\n}\n\nfloat Mandelbrot (in vec2 c)\n{\n\tvec2 m = c;\n\tfor (float n = 0.0; n < N; ++n) {\n\t\tif (dot (m, m) > 4.0) {\n\t\t\treturn n / N;\n\t\t}\n\t\tm = vec2 (m.x * m.x - m.y * m.y, 2.0 * m.x * m.y) + c;\n\t}\n\treturn 1.0;\n}\n\nvec4 Render (in vec2 fragCoord, in vec2 resolution, in float time)\n{\n\tvec2 c = (2.0 * fragCoord - resolution) / resolution.y;\n\tfloat zoom = pow (0.5, 18.0 * (0.72 - 0.28 * cos (time * 0.2)));\n\tfloat m = Mandelbrot (zoom * Rotate (time * 0.3) * c + C);\n\treturn vec4 (m, pow (m, 0.6), pow (m, 0.3), 1.0);\n}","name":"Common","description":"","type":"common"}]}