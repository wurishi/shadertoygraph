{"ver":"0.1","info":{"id":"MXGGD3","date":"1718300742","viewed":30,"name":"Sierpinsky's Pyramid","username":"orange389","description":"Sierpinsky pyramid rendered in 3D. Inspiration came from this video : https://www.youtube.com/watch?v=Cnhr6VaQKlg","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"bool rayHitSquares(in vec3 rayDir, in vec3 relCor1, in vec3 relCor2, in vec3 units) {\n    if (units.x > 0.0) {\n        vec3 rayPoint1 = units.x * rayDir;\n        if(relCor1.y < rayPoint1.y && rayPoint1.y < relCor2.y && relCor1.z < rayPoint1.z && rayPoint1.z < relCor2.z) {\n            return true;\n        }\n    }\n    if (units.y > 0.0) {\n        vec3 rayPoint2 = units.y * rayDir;\n        if(relCor1.x < rayPoint2.x && rayPoint2.x < relCor2.x && relCor1.z < rayPoint2.z && rayPoint2.z < relCor2.z) {\n            return true;\n        }\n    }\n    if (units.z > 0.0) {\n        vec3 rayPoint3 = units.z * rayDir;\n        if(relCor1.y < rayPoint3.y && rayPoint3.y < relCor2.y && relCor1.x < rayPoint3.x && rayPoint3.x < relCor2.x) {\n            return true;\n        }\n    }\n    return false;\n}\n\n\nbool rayHitBox(in vec3 rayDir, in vec3 rayStart, in vec3 corner1, in vec3 corner2) {\n    vec3 relCor1 = corner1 - rayStart;\n    vec3 relCor2 = corner2 - rayStart;\n    vec3 units = relCor1 / rayDir;\n    bool hit = rayHitSquares(rayDir, relCor1, relCor2, units);\n    if (!hit) {\n        units = relCor2 / rayDir;\n        return rayHitSquares(rayDir, relCor1, relCor2, units);\n    }\n    return true;\n}\n\nint power2(int i) {\n    int n = 1;\n    while (i > 0) {\n        n *= 2;\n        i--;\n    }\n    return n;\n}\n\nfloat boxHeightFractal(int x, int y, int depth) {\n    int height = 0;\n    for(int i = 0; i < depth; i++) {\n        height += (x % 2 == 0) ^^ (y % 2 == 0) ? power2(i) : 0;\n        x /= 2;\n        y /= 2;\n    }\n    return float(height);\n}\n\nbool rayHitFractal(in vec3 rayDir, in vec3 rayStart, in int depth){\n    int ite = power2(depth);\n    float delta = 1.0 / float(ite);\n    vec3 deltaDist = delta * vec3(1, 1, 1); \n    bool hit = false;\n    for (int x = 0; x < ite; x++) {\n        for (int y = 0; y < ite; y++) {\n            vec3 boxStart = delta * vec3(x, y, boxHeightFractal(x, y, depth));\n            hit = hit || rayHitBox(rayDir, rayStart, boxStart, boxStart + deltaDist);\n        }\n    }\n    return hit;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   vec2 uv = (fragCoord / iResolution.xy * 2.0 - 1.0) * iResolution.xy / iResolution.yy;\n   vec3 hor = vec3(cos(iTime), 0 ,sin(iTime));\n   vec3 ver = vec3(0, 1, 0);\n   vec3 forward = cross(hor,ver);\n   vec3 relPos = hor * uv.x + ver * uv.y;\n   vec3 pos = relPos -  (0.5 + 0.5 * cos(iTime * 0.25)) * forward + vec3(0.5, 0.5, 0.5);\n   vec3 dir = relPos + forward;\n   dir = dir / length(dir);\n   if (rayHitFractal(dir, pos, 5)) {\n       fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n   }\n   else {\n       fragColor = vec4(0.0, 0.0, 0.0, 1.0);\n   }\n   \n}","name":"Image","description":"","type":"image"}]}