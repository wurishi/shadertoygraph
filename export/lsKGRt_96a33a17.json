{"ver":"0.1","info":{"id":"lsKGRt","date":"1455943173","viewed":751,"name":"Unex learning Noise","username":"blfunex","description":"basic noise filter","likes":3,"published":3,"flags":0,"usePreview":0,"tags":["filternoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// http://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nfloat rand( vec2 co ){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453) * 0.5 - 0.25;\n}\n\nvoid noise( inout vec3 color, vec2 uv, float level ) {\n    color.rgb = max(min(color.rgb + vec3(rand(uv) * level), vec3(1)), vec3(0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 color = texture(iChannel0, uv).rgb;\n    noise(color, uv, 0.5);\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}