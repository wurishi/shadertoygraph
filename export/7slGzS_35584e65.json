{"ver":"0.1","info":{"id":"7slGzS","date":"1616177785","viewed":278,"name":"cost of volumes is anisotropic","username":"FabriceNeyret2","description":"volumes are stored as stack as 2D textures ( roughly ), so the cache and cost efficiency differs along directions.\nNowadays it seems small, at least for a 32x32x32 very small volume: + 5% cost ( +3% for the swizzling ).\n( too bad we cannot test bigger vol","likes":7,"published":3,"flags":0,"usePreview":0,"tags":["bench","volumes","cost"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define N 100. // try 1000.\n\n// #define texture(ch, V) V.xyzz  // to bench just the switzzle, without textures: \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    U /= iResolution.y;\n    O = vec4(0);\n    \n    for(float k=0.; k < N; k++ ) // summing N random columns in the cube texture \n        for( float z=0.; z < 1.; z+= 1./32. ) {\n            vec3 V = vec3( U+fract(1e5*sin(1e5*vec2(k,k+iTime))) , z );\n                                             // N=1000.       N=100.        ( once at N=1000. too !!! )\n         // O += texture(iChannel0, V.zxy ); // 517ms 1.9fps  51.7ms 15fps    422ms 2.3fps\n            O += texture(iChannel0, V.xyz ); // 480ms 2.0fps  48.0ms 15fps    388ms 2.5fps  \n        }\n    O /= 32. * N;\n    \n    O = .5 + .5* (O-.5) * sqrt(32. * N); // renormalisation by variance, for visual\n}","name":"Image","description":"","type":"image"}]}