{"ver":"0.1","info":{"id":"ttf3D4","date":"1556324041","viewed":260,"name":"Warm/Mild Color Adjustment","username":"TEttinger","description":"This is a simple example of a shader that edits colors in the YCwCm color space (see block comment at top)","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["color","ycc","ycwcm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// CC0 license; any and all rights to this work are waived by the author.\n/* These are some simple color-tweaking effects using a variant on YCbCr and YCoCg that I hacked\n * together, called YCwCm.\n * Y is luma (perceptual lightness) and it isn't calculated especially well; it ranges from 0.0 \n * to 1.0, with 0.0 including but not limited to black, and 1.0 including (not just) white.\n * Cw is Chroma Warm, and determines whether a color is close to blue/green or red/yellow; it\n * ranges from -1.0 to 1.0, with -1.0 blue to green, 0.0 purple to grayscale to chartreuse, and 1.0\n * red to yellow. Cm is Chroma Mild, and determines whether a color is close to blue/red or\n * green/yellow; it ranges from -1.0 to 1.0, with -1.0 blue to red, 0.0 cyan to gray to orange, and\n * 1.0 green to yellow. \n * You can change mul and add to edit the effect. A few versions are provided.\n */\n\n//// yellowing dingy effect\n//const vec3 mul = vec3(0.9, 0.7, 0.75);\n//const vec3 add = vec3(0.05, 0.14, 0.16);\n\n//// hot/on-fire effect?\n//const vec3 mul = vec3(1.1, 0.8, 1.0);\n//const vec3 add = vec3(-0.1, 0.65, 0.2);\n\n// ice effect?\nconst vec3 mul = vec3(1.0, 0.7, 0.7);\nconst vec3 add = vec3(0.4, -0.5, -0.15);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 mulWave = mix(mul, vec3(1.0), sin(iTime) * 0.5 + 0.5);\n    vec3 addWave = mix(add, vec3(0.0), sin(iTime) * 0.5 + 0.5);\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec4 tgt = texture( iChannel0, uv );\n    // xyz is used when a color is using luma, warm, mild instead of red, green, blue channels\n    tgt.xyz = addWave + mulWave * vec3(dot(tgt.rgb, vec3(0.375, 0.5, 0.125)), tgt.r - tgt.b, tgt.g - tgt.b);\n    fragColor.rgb = clamp(vec3(\n           dot(tgt.xyz, vec3(1.0, 0.625, -0.5)),\n           dot(tgt.xyz, vec3(1.0, -0.375, 0.5)),\n           dot(tgt.xyz, vec3(1.0, -0.375, -0.5))),\n       0.0, 1.0);\n    fragColor.a = 1.0;\n}\n","name":"Image","description":"","type":"image"}]}