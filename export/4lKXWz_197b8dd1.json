{"ver":"0.1","info":{"id":"4lKXWz","date":"1483889732","viewed":271,"name":"Rotating square","username":"Fieu","description":"Some simple practice with rotation and stuff.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","rotate","square","rotating","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n * Some stuff to mess around\n */\nconst vec2 pos = vec2(0.0, 0.0);\nconst float width = 0.3;\nconst vec3 color = vec3(1.0, 1.0, 1.0);\nconst vec3 background = vec3(0.0, 0.0, 0.0);\n\n/*\n * Rotation matrix by angle (modified version of function rotate(vec2, angle) ) thanks to FabriceNeyret2\n */\nmat2 rotate(float r) {\n    float c = cos(r);\n    float s = sin(r);\n    return mat2(c, -s, s, c);\n}\n\n/*\n * Passing position, currect pixel, width and angle from main\n */\nvec3 drawSquare(vec2 pos, vec2 uv, float w, float a) {\n    vec2 u = uv - pos;\n    u *= rotate(a);\n    float stepfrom = w - 0.01;\n    \n    // Simple edge smoothing\n    float alpha = 1.0 - smoothstep(stepfrom, w, abs(u.x))\n                  - smoothstep(stepfrom, w, abs(u.y));\n    \n    // Return mix of background with color by smooth alpha\n    return mix(background, color, alpha);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalization\n    vec2 uv = 2.0*fragCoord.xy - iResolution.xy;\n    uv /= min(iResolution.x, iResolution.y);\n        \n\n    vec3 color = drawSquare(pos, uv, width, iTime);\n\tfragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}