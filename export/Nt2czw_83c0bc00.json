{"ver":"0.1","info":{"id":"Nt2czw","date":"1649375307","viewed":104,"name":"XOR Fourier","username":"LoganOracio","description":"Fouier sums around polar cordinates xor themselves","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["xor","fourier"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define SUB_SAMPLE 4\n\nconst float pi = 3.14159265358979323;\n\nuint murmurHash11(uint src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash11(float src) {\n    uint h = murmurHash11(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\nuint murmurHash12(uvec2 src) {\n    const uint M = 0x5bd1e995u;\n    uint h = 1190494759u;\n    src *= M; src ^= src>>24u; src *= M;\n    h *= M; h ^= src.x; h *= M; h ^= src.y;\n    h ^= h>>13u; h *= M; h ^= h>>15u;\n    return h;\n}\nfloat hash12(vec2 src) {\n    uint h = murmurHash12(floatBitsToUint(src));\n    return uintBitsToFloat(h & 0x007fffffu | 0x3f800000u) - 1.0;\n}\n\nfloat random_fourier(int k, float seed, float x)\n{\n    float sum = 0.0;\n    for(int i = 0; i < k; i++)\n    {\n        sum += sin(iTime+x*floor(16.0*hash12(vec2(float(i),seed))));\n    }\n    return sum;\n}\nbool wave(vec2 uv, float freq, float amp, float offset, float seed)\n{\n    return (uv.y*2.+offset)/amp < random_fourier(3,seed,iTime + freq * uv.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pix_l = 1.0 / iResolution.xy;\n    vec2 uv = fragCoord.xy * pix_l;\n    uv -= 0.5;\n    \n    uv.x *= iResolution.x/iResolution.y;\n    uv *= 4.0;\n    uv = vec2(atan(uv.y,uv.x),pow(length(uv),2.0));\n    \n    float fstep = 1.0/float(SUB_SAMPLE);\n    float offset = fstep*(float(SUB_SAMPLE)/2.0-0.5);\n    float ex = 0.0;\n    \n    for(int i = 0; i < 16; i++)\n    {\n        if(i>=SUB_SAMPLE) {break;}\n        for(int j = 0; j < 16; j++)\n        {\n            if(j>=SUB_SAMPLE) {break;}\n            \n            bool outp = false;\n            bool mask = false;\n            vec2 texco = uv+pix_l*vec2(float(i)*fstep-offset,float(j)*fstep-offset);\n            \n            bool w = true;\n            for(int i = 0; i < 30; i++)\n            {\n                w = w^^wave(texco,         floor(4.*hash11(float(i))),\n                                        1.4*hash11(float(i)+0.5),\n                                        -1.0-float(i),\n                                        float(i));\n            }\n            \n            ex += float(w);\n        }\n    }\n    ex /= float(SUB_SAMPLE*SUB_SAMPLE);\n    \n    fragColor = vec4(vec3(float(ex)),1.0);\n    //fragColor = vec4(uv,0.,1.);\n}","name":"Image","description":"","type":"image"}]}