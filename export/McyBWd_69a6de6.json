{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy; // Normalize coordinates\n    uv -= 0.5;                               // Center the UV coordinates\n    uv.x *= iResolution.x / iResolution.y;   // Maintain aspect ratio\n\n    // Time-based rotation and distortion\n    float time = iTime * 0.2;\n    float angle = atan(uv.y, uv.x) + time;\n    float radius = length(uv);\n\n    // Complex pattern blending\n    float wave1 = sin(radius * 10.0 - iTime * 2.0);\n    float wave2 = cos(angle * 6.0 + iTime * 1.5);\n    float pattern = wave1 * wave2;\n\n    // Color modulation with gradient and patterns\n    vec3 baseColor = vec3(0.2, 0.3, 0.6);\n    vec3 gradient = 0.5 + 0.5 * vec3(sin(angle * 2.0), cos(angle * 2.0), sin(radius * 5.0));\n    vec3 color = baseColor + 0.4 * gradient * pattern;\n\n    // Add dynamic light streaks\n    float streaks = abs(sin(angle * 8.0 - iTime * 2.0)) * exp(-radius * 10.0);\n    color += vec3(streaks, streaks * 0.8, streaks * 0.6);\n\n    // Subtle noise\n    float noise = fract(sin(dot(uv * 80.0, vec2(12.9898, 78.233))) * 43758.5453);\n    color += 0.05 * vec3(noise);\n\n    // Vignette effect\n    float vignette = smoothstep(0.8, 0.3, radius);\n    color *= vignette;\n\n    // Final output\n    fragColor = vec4(color, 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"McyBWd","date":"1734571174","viewed":58,"name":"Visera","username":"LJYC","description":"AI generated shader.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["ai"],"hasliked":0,"parentid":"","parentname":""}}