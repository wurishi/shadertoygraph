{"ver":"0.1","info":{"id":"fscfWX","date":"1657282214","viewed":157,"name":"Crystal Abyss ","username":"Hyeve","description":"Annnd THIS is another, different, way to completely break the distance field. Well, kinda - the distance field is just fine here, I'm just forcing the raymarcher to exit very early. Pretty!","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","transparency","glass","reflections","crystal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//See the common tab for fps control.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//fps control for performance. Assumes the refresh rate of your monitor is 60hz\n//(120hz monitor set to 30 here will actually run at 60fps)\n#define FPS 30.","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n\nvec2 uv=vec2(0);\nvec3 cp,cn,cr,ss,oc,gl=vec3(0),vb,ro,rd,so,ld;\nvec4 fc=vec4(0),cc=vec4(0);\nfloat tt,cd,sd,md,io,oa,td=0.,li;\nint es=0,ec=0;\n\n#define pi 3.1415926535\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ){\n    return a + b*cos(2.*pi*(c*t+d));\n}\n\nfloat fcy(vec3 p, vec2 s)\n{\n\tvec2 w = vec2(length(p.xy) - s.x, abs(p.z) - s.y);\n\treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat hcy(vec3 p, vec3 s)\n{\n\tvec2 w = vec2(abs(length(p.xy) - s.x) - s.z, abs(p.z) - s.y);\n\treturn min(max(w.x,w.y),0.0) + length(max(w,0.0));\n}\n\nfloat mp(vec3 p)\n{\t\n\t\n\t\tvec3 pp = p;\n\t\n\t\tp = mod(p+10.,20.)-10.;\n\n\t\tfor(float i = 0.; i < 5.; i++)\n\t\t{\n\t\t\t\tp.xy *= rot(tt * (i/5.) * 0.3);\n\t\t\t\n\t\t\t\tp.z = abs(p.z) - i / 5. + sin(tt*0.3-i);\n\t\t\t\tp.xy *= rot(-tt * (mod(i+2.,5.)/5.) * 0.3);\n\t\t\t\tp.x = abs(p.x) - 1.5 + cos(tt*0.3+i);\n\t\t}\n\n\t\n\t\tsd = hcy(p.xzy, vec3(1,3, 0.05)) * 0.3;\n\t\n\t\tgl += exp(-length(p) * 0.5) * vec3(1,0.5,01) * 0.01;\n\t\t\n\t\tsd=abs(sd)-0.001;\n\t\t\n\t\tif(sd<1.)\n\t\t{\t\n\t\t\tio=p.x > 0. ? 1.1 : -1.;\n\t\t\toc=vec3(0.1,0,0.3);\n\t\t\toa=0.3;\n\t\t\tss=vec3(0);\n\t\t\tec=2;\t\n\n\t\t}\n\t\treturn sd;\n}\n\nvoid nm(){mat3 k=mat3(cp,cp,cp)-mat3(.001);cn=normalize(mp(cp)-vec3(mp(k[0]),mp(k[1]),mp(k[2])));cn=normalize(cn);}\nvoid shtr(){so=cp+cn*0.05;md=64.;for(li=cd=0.;cd<64.;li++,cd+=mp(cp=ro+cn*0.05-ld*cd)){if(sd<md&&sd<cd)md=sd;if(sd<0.001||li>64.)break;}}\nvoid tr(){for(li=cd=0.;cd<64.;){li++;cd+=mp(cp=ro+rd*cd);td+=sd;if(sd<0.0001||li>15.)break;}cp-=rd*0.005;nm();}\n\nvoid px(vec3 rd)\n{\n  vec3 bg=cc.rgb=vec3(0.3,0.8,1.)-pow(length(uv),3.)*0.3+gl;\n\tif(cd<64.)\n\t{cc.a=oa;ld=normalize(cp-vec3(0, 0, -30));\n\tfloat df=max(dot(cn,-ld),0.),sp=max(1.-length(cross(rd+ld,cn)),0.)*(1.2-oa),\n\tfo = exp(-pow(0.02*td,5.)),ao=1.-clamp(mp(cp+cn*.1)/.1,0.,1.);\n\tvec3 fr=pow(1.-abs(dot(rd,-cn)),3.)*mix(cc.rgb,oc,0.);\n    cc.rgb=(oc*df+fr+sp+ss)-ao*0.2;\n\tshtr();cc.rgb-=(1.-clamp(md/0.05,0.,1.))*0.5;\n\tcc.rgb = mix(bg, cc.rgb, fo);}\n\telse cc.a=1.;cc.rgb+=gl;\n\tcc.rgb*=max(max(cc.r,max(cc.g,cc.b)),1.);\n}\n\nvoid render(vec2 frag, vec2 res, float time, out vec4 col)\n{\n  uv=vec2(frag.x/res.x,frag.y/res.y);\n  uv-=0.5;uv/=vec2(res.y/res.x,1);\n\ttt=mod(time+10.,100.);\n\t\n  ro=vec3(0,0,-15);\n\trd=normalize(vec3(uv,1.));\n\t\n\tfor(int i=0;i<5;i++)\n  {\n\t\ttr();ro=cp-cn*(io<0.?-0.01:0.01);\n\t\tcr=refract(rd,cn,i%2==0?1./io:io);\n        if((length(cr)==0.&&es<=0)||io<0.)\n\t\t{i++;cr=reflect(rd,cn);es=(io<0.?es:ec);}\n\t\tpx(rd);if(max(es,0)%3==0) rd=cr;\n\t\tes--;fc=fc+vec4(cc.rgb*cc.a,cc.a)*(1.-fc.a);\n\t\tif(fc.a>=1.)break;\n  }\n  col=fc/fc.a;\n  col.rgb=pow(col.rgb,vec3(1.)/1.5);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(mod(float(iFrame), 60./FPS) < 1. || iFrame < 5) render(fragCoord.xy,iResolution.xy,iTime,fragColor);\n    else fragColor = texture(iChannel0, fragCoord / iResolution.xy);\n}","name":"Buffer A","description":"","type":"buffer"}]}