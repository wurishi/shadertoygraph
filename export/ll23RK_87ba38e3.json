{"ver":"0.1","info":{"id":"ll23RK","date":"1430552625","viewed":505,"name":"OPL3 oscillators","username":"paniq","description":"imitating the oscillators of the Yamaha YMF262 / OPL3 chip that was used in AdLib and Soundblaster soundcards","likes":11,"published":1,"flags":8,"usePreview":0,"tags":["mattdamon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(0.0,0.5,1.0, 1.0);\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define pi2 6.283185307179586\n\nfloat hz(float c) {\n    return 13.75 * pow(2.0, (c+3.0)/12.0);\n}\n\n// returns note index, fract\nvec2 seq(float t, float s) {    \n    return vec2(floor(t/s),mod(t, s));\n}\n\nfloat index(float a, float b, float x) {\n    return mix(a, b, step(1.0,x));\n}\n\nfloat index(float a, float b, float c, float x) {\n    return index(index(a, b, x),c,x-1.0);\n}\n\nfloat index(float a, float b, float c, float d, float x) {\n    return index(index(a, b, x),index(c, d,x-2.0),x-1.0);\n}\n\n// regular sine\nfloat wave0(float x) {\n    return sin(pi2*x);\n}\n\n// half sine + pause\nfloat wave1(float x) {\n    return max(sin(x*pi2),0.0);\n}\n\n// half sine, double frequency\nfloat wave2(float x) {\n    return abs(sin(x*pi2));\n}\n\n// quarter sine + pause, double frequency\nfloat wave3(float x) {\n    return abs(sin(x*pi2))*step(fract(x*2.0),0.5);\n}\n\n// sine + pause, double frequency\nfloat wave4(float x) {\n    return sin(x*pi2*2.0)*step(fract(x),0.5);\n}\n\n// half sine + pause, double frequency\nfloat wave5(float x) {\n    return abs(sin(x*pi2*2.0))*step(fract(x),0.5);\n}\n\n// square wave\nfloat wave6(float x) {\n\treturn step(fract(x),0.5)*2.0-1.0;\n}\n\n// saw wave\nfloat wave7(float x) {\n\treturn 1.0 - 2.0*fract(x);\n}\n\n// normalizes arguments so the sum is 1\nvec4 normsum(vec4 p) {\n    return p / (p.x+p.y+p.z+p.w);\n}\n\n// v = vec4(attack,decay,hold,release), s = sustain amplitude\nfloat adsr(float t, vec4 v, float s) {\n    v.xyw = max(vec3(2.2e-05),v.xyw);\n    // attack term\n    float ta = t/v.x;\n    // decay / sustain amplitude term\n    float td = max(s, 1.0-(t-v.x)*(1.0-s)/v.y);\n    // length / release term\n    float tr = (1.0 - max(0.0,t-(v.x+v.y+v.z))/v.w);\n    return max(0.0, min(ta, tr*td));\n}\n\nfloat line2(float t) {\n    vec2 a = seq(t,2.0);\n    a.x = mod(a.x,4.0);\n    \n    vec4 r = vec4(7.0,1.0,2.0,4.0);\n    \n    float q = index(r.x, r.y, r.z, r.w, a.x);\n    \n    vec2 w = seq(t,1.0/4.0);\n    float n = 30.0+q+12.0*mod(floor(w.x*0.5),2.0);\n    float vib_f = hz(0.5*wave0(6.1*t))*0.14;\n    \n    return wave1(hz(n)*t + wave2(hz(n)*t + vib_f)* adsr(w.y,vec4(0.01,0.0,0.0,0.3),1.0) + vib_f)\n        * adsr(w.y,vec4(0.01,0.0,0.0,0.3),1.0);\n}\n\nfloat bassline(float t) {\n    vec2 a = seq(t,2.0);\n    a.x = mod(a.x,4.0);\n    \n    vec4 r = vec4(0.0,1.0,-1.0,0.0)-12.0;\n    \n    float q = index(r.x, r.y, r.z, r.w, a.x);\n    \n    vec2 w = seq(t,1.0/4.0);\n    float n = 30.0+q+12.0*mod(floor(w.x*0.5),2.0);\n    float vib_f = hz(0.5*wave0(6.1*t))*0.07;\n    \n    return wave5(hz(n)*t + wave3(hz(n)*t + vib_f) + vib_f)\n        * adsr(w.y,vec4(0.001,0.0,0.0,0.2),1.0);\n}\n\nvec2 mainSound( in int samp,float t) {\n    vec2 q = seq(t,8.0);\n    q.x = mod(q.x,7.0);\n    \n    vec2 s = vec2(bassline(t));\n    s += vec2(line2(t));\n\n    \n    return vec2( s/3.0 );\n}","name":"","description":"","type":"sound"}]}