{"ver":"0.1","info":{"id":"MlXXWj","date":"1439672119","viewed":121,"name":"dlab","username":"dmmn","description":"dlab","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["dlab"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"#define PI 3.1415926535897932384626433832795\n\nfloat ratio;\n\nfloat sdSphere(vec3 p, float s) {\n  return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t ) {\n  vec2 q = vec2(length(p.xy)-t.x,p.z);\n  return length(q)-t.y;\n}\n\nfloat udBox( vec3 p, vec3 b ) {\n  return length(max(abs(p)-b,0.0));\n}\n\nmat4 matRotate( in vec3 xyz )\n{\n    vec3 si = sin(xyz);\n    vec3 co = cos(xyz);\n\n\treturn mat4( co.y*co.z,                co.y*si.z,               -si.y,       0.0,\n                 si.x*si.y*co.z-co.x*si.z, si.x*si.y*si.z+co.x*co.z, si.x*co.y,  0.0,\n                 co.x*si.y*co.z+si.x*si.z, co.x*si.y*si.z-si.x*co.z, co.x*co.y,  0.0,\n\t\t\t     0.0,                      0.0,                      0.0,        1.0 );\n}\n\nmat4 matTranslate( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,   y,   z,   1.0 );\n}\n\nmat4 matInverse( in mat4 m )\n{\n\treturn mat4(\n        m[0][0], m[1][0], m[2][0], 0.0,\n        m[0][1], m[1][1], m[2][1], 0.0,\n        m[0][2], m[1][2], m[2][2], 0.0,\n        -dot(m[0].xyz,m[3].xyz),\n        -dot(m[1].xyz,m[3].xyz),\n        -dot(m[2].xyz,m[3].xyz),\n        1.0 );\n}\n\nfloat map(vec3 p) {\n    float dist = 100.;\n    \n    mat4 rotationMatrix = matRotate(vec3(iTime * .2, iTime * 2., iTime * .3));\n    p = (vec4(p, 0.) * matInverse(rotationMatrix)).xyz;\n    \n    dist = sdSphere(p, 1.);\n    dist = mix(dist, sdTorus(p, vec2(1., .3)), clamp(-ratio, 0., 1.));\n    dist = mix(dist, udBox(p, vec3(.5, 1., .5)), clamp(ratio, 0., 1.));\n    \n    return dist;\n}\n\nvec3 calcNormal (vec3 p) {\n\tvec2 e = vec2(0.0001, 0.0);\n    return normalize(vec3( \tmap(p + e.xyy) - map(p - e.xyy),\n                            map(p + e.yxy) - map(p - e.yxy),\n                          \tmap(p + e.yyx) - map(p - e.yyx)));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    ratio = cos(iTime * 2.);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = uv * 2. - 1.;\n    p.x *= iResolution.x / iResolution.y;\n    \n    vec3 ro = 2. * vec3(0., 0., -2.);\n    \n    vec3 rd = normalize(vec3(p.x, p.y, 1.));\n    //rd.xz *= ro.xz;\n    //vec3 direction = vec3(cos(iTime + PI * .5), 0.0, sin(iTime + PI * .5));\n    //rd = normalize(direction + vec3( cos(iTime) * p.x, p.y, sin(iTime) * p.x ));\n\n    vec3 col = vec3(1.);\n    \n    float tmax = 100.;\n    float h = 1.0;\n    float t = 0.0;\n    \n    for(int i = 0; i < 16; i++) {\n        if (h < 0.00001 || h > tmax) break;\n        h = map( ro + rd * t);\n        t += h;\n    }\n    \n    if (t < tmax) {\n        //col = calcNormal(ro + rd * t);\n        col = texture(iChannel0, -uv).rgb;\n        col = mix(col, texture(iChannel1, -uv).rgb, clamp(-ratio, 0., 1.));\n        col = mix(col, texture(iChannel2, -uv).rgb, clamp(ratio, 0., 1.));\n    }\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"","description":"","type":"image"}]}