{"ver":"0.1","info":{"id":"4dVGWV","date":"1456494622","viewed":332,"name":"Simple volumetric rendering","username":"novalis","description":"Some basic volumetric rendering fun with audio response.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["volumetric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sXGRr","filepath":"/media/a/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","previewfilepath":"/media/ap/48e2d9ef22ca6673330b8c38a260c87694d2bbc94c19fec9dfa4a1222c364a99.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define EPS 1e-4\n\nvec3 rotateX(vec3 p, float phi) { float c = cos(phi); float s = sin(phi); return vec3(p.x, c*p.y - s*p.z, s*p.y + c*p.z); }\nvec3 rotateY(vec3 p, float phi) { float c = cos(phi); float s = sin(phi); return vec3(c*p.x + s*p.z, p.y, c*p.z - s*p.x); }\nvec3 rotateZ(vec3 p, float phi) { float c = cos(phi); float s = sin(phi); return vec3(c*p.x - s*p.y, s*p.x + c*p.y, p.z); }\n\nfloat sphere(vec3 r) {\n\treturn length(r) - texture(iChannel0, vec2(0.9,.25)).x - .3;\n}\n\nfloat cube(vec3 r) {\n\tvec3 b = vec3(.65);\n\tvec3 d = abs(r) - b;\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat inVolume(float d) {\n    return float(d <= 0.);\n}\n\nvec4 scene(vec3 r) {\n    r = rotateX(rotateY(r, texture(iChannel0, vec2(0.,0.)).x*2.+iTime*0.3), texture(iChannel0, vec2(0.,0.)).x*2. + iTime*0.31);\n    \n    vec4 sphereColor = vec4(0,0,1, .00001);\n   \tvec4 cubeColor = vec4(1,.08,.6, .03);\n    float dSphere = sphere(r);\n    float dCube = cube(r);\n\t\n\treturn inVolume(dSphere)*sphereColor + inVolume(dCube)*cubeColor;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 uv = (2.*fragCoord.xy - iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n\tvec3 ro = vec3(uv, 1.);\n\tvec3 rd = normalize(vec3(uv.xy*0.6,-1));\n    \n    const float dt = .03;\n\tconst float maxT = 2.;\n    \n\tvec3 r = ro;\n\tfloat t = 0.;\n    \n    vec4 color = vec4(0.);\n\tfor (int i=0; i<256; i++) {\n        vec4 s = scene(r);\n\t\tcolor = mix(color, s, s.a);\n\t\tif (color.a > 1.-EPS) break;\n        if (t > maxT) break;\n\t\tt += dt;\n        r = ro + t*rd;\n\t}\n\n    fragColor = vec4(color.rgb*color.rgb*(3.0-2.0*color.rgb), color.a);\n}\n","name":"Image","description":"","type":"image"}]}