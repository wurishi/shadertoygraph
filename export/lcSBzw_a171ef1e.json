{"ver":"0.1","info":{"id":"lcSBzw","date":"1724766363","viewed":36,"name":"2D aproximation for normals","username":"KivuSupremeKing","description":"An aproximation of normals in SDF based on Inigo Quilez lives. Initially in 3D, I tried to make a 2D version to fully understand it. Visuals inspired by Inigo Quilez website. Click to change normal starting point.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["normal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle(vec2 pos, vec2 cpos, float s)\n{\n    return length(pos - cpos) - s;\n}\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nfloat sdBox( in vec2 pos, in vec2 bpos, in vec2 b )\n{\n    vec2 d = abs(pos - bpos)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\nfloat map(vec2 pos)\n{\n    float d1 = sdCircle(pos, vec2(-5., -11.), 5.);\n    float d2 = sdCircle(pos, vec2(40., 20.), 15.);\n    float d3 = sdBox(pos, vec2(-60, 35.), vec2(10., 5.));\n    return min(min(d1, d2), d3);\n}\n\nvec2 calcNormal(in vec2 pos)\n{\n    vec2 e = vec2(0.0001, 0.);\n    return normalize(vec2(map(pos+e.xy)-map(pos-e.xy),\n                          map(pos+e.yx)-map(pos-e.yx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*(fragCoord)/iResolution.xy) - 1.;\n    vec2 ratio = vec2(iResolution.x/iResolution.y, 1.);\n    uv *= ratio * 50.;\n    vec2 m = (iMouse.xy * 2. - iResolution.xy) / iResolution.y;\n    if (iMouse.xy == vec2(0.))\n        m = vec2(0.);\n    m *= 50.;\n\n    // Time varying pixel color\n    vec3 col = vec3(1.);\n    \n    float d = map(uv);\n    if (d > -.2 && d < .2)\n        col = vec3(1.);\n    else if (d > 0.) {\n        float v = sin(d) * 0.5 + 0.5;\n        col = vec3(v * 2., v * 0.8, 0.) * 0.01 * d;\n    } else {\n        float v = sin(d) * 0.5 + 0.5;\n        col = vec3(0., v * 0.8, v * 2.) * 0.01 * -d;\n    }\n    \n    vec2 n = calcNormal(m);\n    float dn = sdSegment(uv, m, m + n * 15.);\n    \n    if (dn < 1.)\n        col = vec3((n * 2.) + 1., 0.);\n    \n    // Output to screen\n    \n    fragColor = vec4(col, 1.0);\n    fragColor.rgb = pow(fragColor.rgb, vec3(1.0/2.2));\n}","name":"Image","description":"","type":"image"}]}