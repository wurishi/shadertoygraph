{"ver":"0.1","info":{"id":"dtlfzn","date":"1692575037","viewed":50,"name":"Voronoi shader spiral animation","username":"leunamanuelgc","description":"Shader made inspired by the MKGames Art & Visuals video -> How to create a Voronoi shader GLSL Shadertoy Tutorial: https://youtu.be/aEnJz-M9dj8","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","spiral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 randColor(int number){\n    return fract(sin(vec3(number+1)*vec3(10.546, 30.6546, 70.545)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = ((fragCoord*2.0 - iResolution.xy)/iResolution.y)/2.0;\n    vec3 col = vec3(0);\n    int points_length = 20;\n    vec2 points_array[20];\n    float i1=0.0;\n    for(int i = 0; i<points_length;i++){\n        i1=float(i);\n        points_array[i] = vec2(cos(i1+iTime*i1*0.2)/i1, sin(i1+iTime*i1*0.2)/i1);\n    };\n    \n    float dmin = 1000.0;\n    \n    int point = 0;\n    for(int i = 0; i < points_length; i++){\n        vec2 uv_rounded = floor(uv*100.0)/100.0;\n        vec2 point_rounded = floor(points_array[i]*100.0)/100.0;\n        \n        if(uv_rounded == point_rounded){\n            col = vec3(1);\n        }\n        \n        if(length(points_array[i] - uv) < dmin){\n            point = i;\n            dmin = length(points_array[i] - uv);\n        }\n    };\n    \n    // Output to screen\n    fragColor = vec4(randColor(point)-dmin+col,1.0);\n    \n}","name":"Image","description":"","type":"image"}]}