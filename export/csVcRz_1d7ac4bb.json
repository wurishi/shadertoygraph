{"ver":"0.1","info":{"id":"csVcRz","date":"1695731898","viewed":25,"name":"Day Dream","username":"drichman","description":"Cloudy sky and a purple haze","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["noise","clouds"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_OCTAVES 5\n\nfloat rand(vec2 n) {\n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p) {\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u * u * (3.0 - 2.0 * u);\n\n    float res = mix(mix(rand(ip), rand(ip + vec2(1.0, 0.0)), u.x),\n                    mix(rand(ip + vec2(0.0, 1.0)), rand(ip + vec2(1.0, 1.0)), u.x), u.y);\n    return res * res;\n}\n\nfloat fbm(vec2 p) {\n    float value = 0.0;\n    float amplitude = 0.5;\n    float frequency = 0.0;\n\n    for (int i = 0; i < MAX_OCTAVES; i++) {\n        value += amplitude * noise(p);\n        p *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    // Define the resolution of the screen\n    vec2 resolution = iResolution.xy;\n\n    // Calculate a normalized coordinate based on screen resolution\n    vec2 p = (2.0 * fragCoord - resolution) / min(resolution.y, resolution.x);\n\n    // Calculate a time variable for animation (you can adjust this)\n    float time = iTime * 0.5;\n    \n    // Define colors for the gradients\n    vec3 color1 = vec3(0.54, 0.56, 0.91);\n    vec3 color2 = vec3(0.21, 0.15, 0.74);\n    vec3 color3 = vec3(0.36, 0.21, 0.64);\n    \n   // Calculate distances from the center and elliptical axes\n    float dist1 = length(p);\n    float dist2 = length(p * vec2(1.5, 0.5));\n\n    // Create radial gradients using smooth interpolation\n    vec3 radialGradient1 = mix(color1, color2, smoothstep(0.5, 0.6, dist1 - time));\n    vec3 radialGradient2 = mix(color2, color3, smoothstep(0.3, 0.4, dist1 - time));\n\n    // Create elliptical gradients using smooth interpolation\n    vec3 ellipticalGradient1 = mix(color1, color2, smoothstep(0.4, 0.5, dist2 - time));\n    vec3 ellipticalGradient2 = mix(color2, color3, smoothstep(0.2, 0.3, dist2 - time));\n\n    // Calculate Perlin noise for dynamic texture distortion\n    float noiseValue = fbm(fragCoord.xy * 0.01 + vec2(time, time));\n\n    // Combine the gradients with Perlin noise for swirling patterns\n    vec3 finalColor = mix(mix(radialGradient1, radialGradient2, 0.5 + 0.5 * sin(time + noiseValue)),\n                          mix(ellipticalGradient1, ellipticalGradient2, 0.5 + 0.5 * cos(time + noiseValue)),\n                          0.5 + 0.5 * sin(time + noiseValue));\n\n    // Output the final color\n    fragColor = vec4(finalColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}