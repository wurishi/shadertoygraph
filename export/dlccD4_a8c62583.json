{"ver":"0.1","info":{"id":"dlccD4","date":"1699203311","viewed":80,"name":"Expanding polar patterns","username":"panoramicdream","description":"A little shader with expanding circles creating interesting patterns","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["circles","polar","expanding"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nvoid polarCoord(out float mag, out float ang, in vec2 coord) {\n    float angOff;\n\n    if(sign(coord.x)>0.0 && sign(coord.y)>0.0){ \n        angOff = 0.0;\n    } else if (sign(coord.x)> 0.0 && sign(coord.y) < 0.0) {\n        angOff = 2.*PI;\n    } else if(sign(coord.x)<0.0){\n        angOff = PI;\n    }\n    \n    mag = length(coord);\n    ang = atan(coord.y/coord.x) + angOff;\n}\n\nvec2 cartCoord(in float mag, in float ang) {\n    float y = mag * sin(ang);\n    float x = mag * cos(ang);\n\n    return vec2(x,y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n     vec3 col = vec3(0.0);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy)/iResolution.x;\n    vec2 uv0 = uv;\n\n    float d;\n    float ang;\n    polarCoord(d,ang,uv);\n    float d0 = 0.3;\n\n    d -= d0;\n    d = d * exp(-d);\n    d=abs(d);\n    d=0.001/d;\n    //col = vec3(d,d,d);\n\n    float n = 6.0; \n\n    float rot = 3.0 * sin(iTime* 0.2);\n\n    float fracTime = fract(iTime*0.05); /* Fractional part of itime with a scaling factor */\n    float g = 1. - fracTime; /* Distance of layer from camera */\n\n    for(float i=0.; i < n; i+=1.){ \n       g = fract(g + 1./(n)); /* Seperate each layers by equal distance*/\n\n        for(float j=0.; j < i*6.;j+=1.){\n            vec2 uv1 = cartCoord(d0*i*g,j*(2.*PI/(i*6.)) + rot);\n            uv = uv1 - uv0;\n            polarCoord(d,ang,uv);\n            d -= (1. - g) * 2.;\n            \n            d = d * exp(d);\n            d=abs(d);\n            d=(0.002 * (1. - g))/d;\n\n            col += vec3(d,d,d) * (0.5 + 0.5*cos(iTime + i +vec3(0,2,4)));\n        }\n    }\n    \n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}