{"ver":"0.1","info":{"id":"4ltyRN","date":"1531822937","viewed":519,"name":"Mandelcapture","username":"kibibu","description":"A basic mandelbrot zoomer (with broken centering). It does orbit capture for texturing and does ... things to recentre C if Z gets too large.","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["fractal","mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Mandelbrot is pretty straightforward\n//\n// z(n+1) = z(n)^2 + c\n//\n// replace c with the coordinate between -1, 1\n\nvec2 mand1;\nvec2 mand2;\n\nvec2 centre = vec2(-1.25117,-0.00203968);\n\nmat2 rot;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 c = fragCoord/iResolution.yy * 2.0 - 1.0;\n    c.x -= (iResolution.x - iResolution.y) / iResolution.y * 0.5;\n    float zoom = (0.5 + (sin(iTime * 0.5) * 0.5)) * 100.0;\n    \n    c *= zoom;\n   \n    \n    \n    vec2 z = vec2(0.0);\n    \n    float r1 = sin(iTime);\n    float r2 = cos(iTime);\n    vec2 t = vec2(c.x * r1 + c.y * r2, c.x * r2 - c.y * r1);\n    c = t;\n    \n    c += centre;\n    \n    float count = 1.0;\n\n    // Time varying pixel color\n    int i;\n    for(i = 0; i < 500; i++) {\n        t.x = (z.x * z.x) - (z.y * z.y) + c.x;\n        t.y = 2.0 * z.x * z.y + c.y;\n        z = t;\n        if(length(z) > 1000.0 || length(z) < 0.01) { // abs(sin(iTime * 0.22) * 50.0 + 24.0)) {\n            z *= 0.0;\n            c *= 0.4 + sin(iTime) * 0.2;\n            c = vec2(c.x * r1 + c.y * r2, c.x * r2 - c.y * r1);\n            count += 1.0;\n            \n        }\n        \n        if(count > 8.0) {\n            break;\n        }\n    }\n    \n    // Output to screen\n    fragColor = vec4(texture( iChannel0, z + vec2(sin(iTime * 0.1), cos(iTime * 0.1)) ).xyz,1.0);\n    \n    fragColor.r *= count / 8.0;\n    fragColor.g *= sin(float(i) * 0.2) * 0.5 + 0.5;\n    fragColor.b *= sin(float(i)) * 0.5 + 0.5;\n    \n    \n}","name":"Image","description":"","type":"image"}]}