{"ver":"0.1","info":{"id":"MfSXDG","date":"1706756249","viewed":163,"name":"The Julia Library","username":"MisterSirCode","description":"Recreating an Iconic demo... The Mandelbrot is a Library of Julias. Every julia set on the mandelbrot averages out to a render of a mandelbrot.\n\nPart of my Simple Fractals playlist: [URL]https://www.shadertoy.com/playlist/NfSGW3[/URL]","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["fractal","julia","mandelbrot"],"hasliked":0,"parentid":"sdtcz2","parentname":"Smooth iterations"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 mandelbrot(vec2 z, vec2 c) {\n    float l = 0.0;\n    for (l = 0.0; l < 100.0; l += 1.0) {\n        z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;\n        if(dot(z, z) > 65536.0) break;\n    }\n    l = l - log2(log2(dot(z,z))) + 4.0;\n    return vec3(l, z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = ((2.0 * fragCoord - iResolution.xy) / iResolution.y) * 1.2;\n    vec2 ouv = uv - vec2(0.5, 0);\n    vec2 nuv = fragCoord / iResolution.xy;\n    uv.x -= 0.5;\n    float res = sin(iTime / 2.0) * 8.0 + 12.0;\n    uv.y += 1.0 / res / 2.0;\n    vec2 puv = floor(uv * res) / res;\n    float ref = pow(clamp(-sqrt(mandelbrot(vec2(0.0), puv).x / 100.0) + 0.3, 0.0, 8.0) * 16.0, 4.0);\n    float scale = 2.6 + ref;\n    vec2 muv = mod(uv, 1.0 / res) * res * scale - (scale / 2.0);\n    \n    vec3 f = vec3(0);\n    if (nuv.x + nuv.y > 1.0)\n        f = mandelbrot(muv, puv);\n    else\n        f = mandelbrot(vec2(0), ouv);\n        \n    float l = f.x;\n    vec2 z = f.yz;\n    if(dot(z, z) < 65536.0) l = 0.0;\n    \n    if (nuv.x + nuv.y > 1.0)\n        fragColor = vec4(vec3(sqrt(l / 100.0)) * vec3(0.4, 1.0, 1.3) * 2.0, 1.0);\n    else\n        fragColor = vec4(vec3(l / 100.0) * vec3(0.4, 1.0, 1.3) * 4.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}