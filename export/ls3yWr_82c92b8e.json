{"ver":"0.1","info":{"id":"ls3yWr","date":"1518517457","viewed":104,"name":"1D advection II","username":"Ultraviolet","description":"Remake of [url] https://www.shadertoy.com/view/MdtyR4[/url] with a different advection scheme.\nThis one preserves the total amount of advected quantity .","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["wip"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Display\n\n#define BG_COLOR vec3(.9)\n#define FG_COLOR vec3(.8)\n#define ST_COLOR vec3(.1)\n\nfloat PointSegDistance(vec2 p, vec2 a, vec2 b)\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nfloat speed(int n)\n{\n    return mapSpeed(texelFetch(iChannel0, ivec2(n, 0),0).r);\n}\n\nfloat quantity(int n)\n{\n    return mapQuantity(texelFetch(iChannel1, ivec2(n, 0),0).r * .5);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    int x = int(fragCoord.x);\n    float dx = 1./iResolution.x;\n    \n    float v = speed(x);\n    vec2 p  = vec2(uv.x   , v       );\n    vec2 pp = vec2(uv.x+dx, speed(x+1));\n    vec2 pm = vec2(uv.x-dx, speed(x-1));\n    \n    if(x == 0)\n        pm = pp;\n    if(x == int(iResolution.x)-1)\n        pp = pm;\n        \n    float dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    float stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    float bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    bg_alpha *= clamp((uv.y-0.75)* iResolution.y, 0., 1.);\n    float bg_alpha_2 = clamp((-v+uv.y)* iResolution.y, -1., 1.)*.5+.5;\n    bg_alpha_2 *= clamp(-(uv.y-0.75)* iResolution.y, 0., 1.);\n    \n    bg_alpha += bg_alpha_2;\n        \n    vec3 c = mix(BG_COLOR, FG_COLOR, bg_alpha);\n    c = mix(c, ST_COLOR, stroke_alpha);\n    \n    \n    v = quantity(x);\n    p  = vec2(uv.x   , v       );\n    pp = vec2(uv.x+dx, quantity(x+1));\n    pm = vec2(uv.x-dx, quantity(x-1));\n    \n    if(x == 0)\n        pm = pp;\n    if(x == int(iResolution.x)-1)\n        pp = pm;\n        \n    dp = min(PointSegDistance(uv,p, pp),PointSegDistance(uv,p, pm));\n    \n    stroke_alpha = clamp(mix(1., 0., dp * iResolution.y), 0., 1.);\n    bg_alpha = clamp((v-uv.y)* iResolution.y, -1., 1.)*.5+.5;\n        \n    c = mix(c, FG_COLOR, bg_alpha);\n    c = mix(c, ST_COLOR, stroke_alpha);\n    \n    \n    c = mix(vec3(0.), c, clamp(abs(uv.y-.5)*iResolution.y - 1., 0., 1.));\n    \n    \n    fragColor = vec4(c, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float brushRadius = .02;\nfloat brushIntensity = .01;\nfloat dt = 2.;\n\nfloat mapSpeed(float speed)\n{\n    return speed*.25+.75;\n}\n\nfloat unMapSpeed(float speed)\n{\n    return 4.*(speed-.75);\n}\n\nfloat mapQuantity(float q)\n{\n    return q*.5;\n}\n\nfloat unMapQuantity(float q)\n{\n    return q*2.;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// Velocity\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    if(iFrame <2)\n    {\n        float x = fragCoord.x/iResolution.x;\n        float val = .5*sin(x*30.);\n        fragColor = vec4(val, 0., 0., 0.);\n        return;\n    }\n    \n    float val = texelFetch(iChannel0, ifragCoord, 0).r;\n    \n    \n    if(iMouse.y/iResolution.y > .5 && iMouse.z > .5 && abs(iMouse.x-fragCoord.x)/iResolution.x < brushRadius)\n        val += dt * brushIntensity * smoothstep(0.,1.,1.-abs(iMouse.x-fragCoord.x)/iResolution.x / brushRadius)*sign(iMouse.y/iResolution.y - .75);\n    \n    \n    \n    fragColor.x = val;\n    \n}","name":"Buf A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Advection\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    ivec2 ifragCoord = ivec2(floor(fragCoord));\n    \n    if(ifragCoord.y != 0)\n    {\n        fragColor = vec4(0.);\n        return;\n    }\n    \n    if(iFrame == 0)\n    {\n        float x = fragCoord.x/iResolution.x;\n        float val = abs(sin(x*35.)*sin(x*10.));\n        //val /= iResolution.x;\n        val *= .1;\n        fragColor = vec4(val, 0., 0., 0.);\n        return;\n    }\n    \n    // Starting with the previous value\n    float val = 0.;//texelFetch(iChannel1, ifragCoord, 0).x;\n    float spd = texelFetch(iChannel0, ifragCoord, 0).x;\n    \n    \n    float p = fragCoord.x;\n    \n    int N = 1;\n    // neighboring pixels are checked (depending on the max values of v.dt)\n    for(int i=-N; i<=N; ++i)\n    {        \n    \tfloat v = texelFetch(iChannel0, ifragCoord+ivec2(i,0), 0).x;\n    \tfloat q = texelFetch(iChannel1, ifragCoord+ivec2(i,0), 0).x;\n        \n        float disp = v*dt + float(i);\n           \n        if(abs(disp) < 1.)\n        {\n            val += q*(1.-abs(disp));\n        }\n    }\n    \n    \n    \n    if(iMouse.y/iResolution.y < .5 && iMouse.z > .5 && abs(iMouse.x-fragCoord.x)/iResolution.x < brushRadius)\n        val += dt * brushIntensity * smoothstep(0.,1.,1.-abs(iMouse.x-fragCoord.x)/iResolution.x / brushRadius);\n    \n    fragColor = vec4(val, 0., 0., 0.);\n}","name":"Buf B","description":"","type":"buffer"}]}