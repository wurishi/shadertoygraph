{"ver":"0.1","info":{"id":"WddBDX","date":"1606143500","viewed":139,"name":"Sonic Media","username":"Firal","description":"A sprite animation of a well known character turned into a volume in a very stained glass-esk manner. Yes, the colors are meant to be inverted.\n\n(removed the entire animation because it made compilation way too slow, so now it is just a frame)","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","volume","animation","sonic","firal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nhttps://www.shadertoy.com/view/WddBDX\nMade by Firal (Zack Misso)\n*/\n\nbool density(vec3 p, out vec3 density)\n{\n \tif (sdBox(p, vec3(4.0, 3.0, 1.0) * 0.1) < 0.0)\n    {\n        vec2 uv = vec2((p.x + 0.4) / 0.8, (p.y + .3) / .6 - 0.08);\n\n        density = texture(iChannel0, uv).xyz;\n        density = density;\n        density *= 20.;\n        \n        return true;\n    }\n    return false;\n}\n\nvec3 render_full(ray r)\n{\n \tvec3 col = vec3(1.);\n    \n    float dist = 0.;\n    float eps = 5e-3;\n    //int i = 0;\n    \n    for (int i = 0; i < 500; ++i)\n    {\n        vec3 p = r.origin + r.direction * dist;\n        \n        vec3 dense;\n        \n        if (density(p, dense))\n        {\n            col *= exp(-dense * eps * 1.3);   \n        }\n        \n        dist += eps;\n    }\n    \n    return col;\n}\n\nvec3 render(vec2 fragCoord)\n{\n    vec3 pos = vec3(0.0, 0.0, 1.6);\n    \n    float time = mod(iTime, 15.);\n    if (time < 3.)\n        pos = vec3(0.0, 0.0, 1.6);\n    else if (time < 6.)\n        pos = vec3(1.6 * sin((time - 3.) * 0.2), 0.0, 1.6 * cos((time - 3.) * 0.2));\n    else if (time < 12.)\n        pos = vec3(1.6 * sin(0.6 - (time - 6.) * 0.2), 0.0, 1.6 * cos(0.6 - (time - 6.) * 0.2));\n    else if (time < 15.)\n        pos = vec3(1.6 * sin((time - 12.) * 0.2 - 0.6), 0.0, 1.6 * cos((time - 12.) * 0.2  - 0.6));\n    \n    camera cam;\n    cam = camera_const(pos,\n    \t\t\t\t   vec3(0.0, 0.0, 0.0),\n                       vec3(0.0, 1.0, 0.0),\n                       20.0,\n                       640.0 / 360.0,\n                       0.0,\n                       sqrt(27.0));\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    ray r = camera_get_ray(cam, uv);\n    \n    vec3 col = vec3(0.0);\n    \n    col = render_full(r);\n    \n    return pow(col, vec3(1.0 / 2.2));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(render(fragCoord), 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"/*\nhttps://www.shadertoy.com/view/WddBDX\nMade by Firal (Zack Misso)\nTwitter: @ossim_zack\n*/\n\n// pre-defined constants\n#define PI 3.1415926535897932384626433832795\n\n//\n// Ray\n//\n    \nstruct ray\n{\n    vec3 origin;            // this is the origin of the ray\n    vec3 direction;         // this is the direction the ray is pointing in\n};\n    \n//\n// Camera\n//\n    \nstruct camera\n{\n    vec3 origin;            // this is the origin of your camera\n    vec3 lower_left_corner; // this is the location of the lower-left corner of the image in relation to the origin\n    vec3 horizontal;        // this is the horizontal extents of the image the camera sees\n    vec3 vertical;          // this is the vertical extents of the image the camera sees\n    vec3 u;\n    vec3 v;\n    float lens_radius;      // the radius of the lens\n};\n    \ncamera camera_const(vec3 lookfrom,\n                    vec3 lookat,\n                    vec3 up,\n                    float fov,\n                    float aspect,\n                    float aperture,\n                    float focal_dist)\n{\n    camera cam;\n    \n    vec3 w;\n    \n    cam.lens_radius = aperture / 2.0;\n    \n    float theta = fov * PI / 180.0;\n    float half_height = tan(theta / 2.0);\n    float half_width = aspect * half_height;\n    cam.origin = lookfrom;\n    w = normalize(lookfrom - lookat);\n    cam.u = normalize(cross(up, w));\n    cam.v = cross(w, cam.u);\n    cam.lower_left_corner = cam.origin - half_width * cam.u * focal_dist - half_height * cam.v * focal_dist - w * focal_dist;\n    cam.horizontal = 2.0 * half_width * cam.u * focal_dist;\n    cam.vertical = 2.0 * half_height * cam.v * focal_dist;\n    \n    return cam;\n}\n\nray camera_get_ray(camera cam, vec2 uv)\n{\n    ray r;\n    \n    r.origin = cam.origin;\n    r.direction = normalize(cam.lower_left_corner + uv.x * cam.horizontal +\n                            uv.y * cam.vertical - cam.origin);\n    \n    return r;\n}\n\n// returns the signed distance to a box from position p\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 q = abs(p) - b;\n    return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/*\nhttps://www.shadertoy.com/view/WddBDX\nMade by Firal (Zack Misso)\nTwitter: @ossim_zack\n*/\n\nfloat chk(in ivec2 uv, in ivec2 pt)\n{\n    return (uv.x == pt.x && uv.y == pt.y) ? 1. : 0.;\n}\n\nvec3 image(vec2 uv, float time)\n{\n    ivec2 pixel_index = ivec2(int(floor(uv.x * 50.)), int(floor(uv.y * 50.)));\n    \n    vec3 color = vec3(0.0);\n    \n    color += chk(pixel_index, ivec2(4, 15)) * (vec3(0.0, 0.0, 1.0));\n    \n    return color;\n}\n\nvec3 image_2(vec2 uv, float aspect)\n{\n    uv.x -= 0.25;\n    uv.x *= aspect;\n    ivec2 pixel_index = ivec2(int(floor(uv.x * 50. * 1.)), int(floor(50. - uv.y * 50.)));\n    vec3 color = vec3(0.0);\n    color += chk(pixel_index, ivec2(18, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(19, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(20, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(21, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(22, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(23, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(24, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(25, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(26, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(27, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(28, 12)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(20, 13)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 13)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 13)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 13)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 13)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 13)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 13)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 13)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 13)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 13)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(30, 13)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(22, 14)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 14)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(24, 14)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(25, 14)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(26, 14)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 14)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 14)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 14)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 14)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 14)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(23, 15)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(24, 15)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(25, 15)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(26, 15)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(27, 15)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(28, 15)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(29, 15)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 15)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 15)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(32, 15)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(35, 15)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(36, 15)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(19, 16)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 16)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 16)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 16)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(23, 16)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(24, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 16)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(30, 16)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(31, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(32, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(33, 16)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(34, 16)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(35, 16)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(36, 16)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(17, 17)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(18, 17)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(19, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(20, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(21, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(22, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(23, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(32, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(33, 17)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(34, 17)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(35, 17)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(36, 17)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(14, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(15, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(16, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(17, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(18, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(19, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 18)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(21, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(22, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(23, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 18)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(32, 18)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(33, 18)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(34, 18)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(35, 18)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(36, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(37, 18)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(38, 18)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(17, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(18, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(19, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 19)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(24, 19)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(25, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(32, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(33, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(34, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(35, 19)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(36, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(37, 19)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 20)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 20)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 20)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(24, 20)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(25, 20)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(26, 20)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(27, 20)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(28, 20)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(29, 20)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 20)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 20)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(32, 20)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(33, 20)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(34, 20)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(35, 20)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(36, 20)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 21)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 21)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(22, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(23, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 21)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(32, 21)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(33, 21)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(34, 21)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(35, 21)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(36, 21)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(18, 22)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(19, 22)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(20, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(21, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(22, 22)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(23, 22)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(24, 22)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(25, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 22)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(32, 22)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(33, 22)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(34, 22)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(35, 22)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(36, 22)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(15, 23)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(16, 23)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(17, 23)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(18, 23)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(19, 23)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(20, 23)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(21, 23)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(22, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(23, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(29, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(30, 23)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(31, 23)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(32, 23)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(33, 23)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(34, 23)) * (vec3(0, 0.596078, 0));\n    color += chk(pixel_index, ivec2(35, 23)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(36, 23)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(11, 24)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(12, 24)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 24)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(19, 24)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 24)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 24)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(22, 24)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(23, 24)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(24, 24)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 24)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 24)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 24)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 24)) * (vec3(0.972549, 0.658824, 0.313726));\n    color += chk(pixel_index, ivec2(29, 24)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(30, 24)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(31, 24)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(32, 24)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(33, 24)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(34, 24)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(35, 24)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(36, 24)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(10, 25)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(11, 25)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(12, 25)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(13, 25)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(14, 25)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(21, 25)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 25)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 25)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(24, 25)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 25)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 25)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 25)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 25)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(29, 25)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(30, 25)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(31, 25)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(32, 25)) * (vec3(0.972549, 0.658824, 0.313726));\n    color += chk(pixel_index, ivec2(33, 25)) * (vec3(0.972549, 0.972549, 0.972549));\n    color += chk(pixel_index, ivec2(34, 25)) * (vec3(0, 0.596078, 0));\n    color += chk(pixel_index, ivec2(35, 25)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(9, 26)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(10, 26)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(11, 26)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(12, 26)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 26)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(14, 26)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(15, 26)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(16, 26)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(19, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(24, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(25, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(26, 26)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(27, 26)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(28, 26)) * (vec3(0.972549, 0.658824, 0.313726));\n    color += chk(pixel_index, ivec2(29, 26)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(30, 26)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(31, 26)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(32, 26)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(33, 26)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(34, 26)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(35, 26)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(8, 27)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(9, 27)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(10, 27)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(11, 27)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(12, 27)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 27)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(14, 27)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(15, 27)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(16, 27)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(17, 27)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 27)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(19, 27)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(20, 27)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(21, 27)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(22, 27)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(23, 27)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(24, 27)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(25, 27)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 27)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 27)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(28, 27)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(29, 27)) * (vec3(0.972549, 0.658824, 0.313726));\n    color += chk(pixel_index, ivec2(30, 27)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(31, 27)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(32, 27)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(33, 27)) * (vec3(0.972549, 0.972549, 0.596078));\n    color += chk(pixel_index, ivec2(34, 27)) * (vec3(0.972549, 0.658824, 0.313726));\n    color += chk(pixel_index, ivec2(35, 27)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(36, 27)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(8, 28)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(9, 28)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(10, 28)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(11, 28)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(12, 28)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 28)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(14, 28)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(15, 28)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(16, 28)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(17, 28)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 28)) * (vec3(0.968627, 0.596078, 0.266667));\n    color += chk(pixel_index, ivec2(19, 28)) * (vec3(0.968627, 0.952941, 0.556863));\n    color += chk(pixel_index, ivec2(20, 28)) * (vec3(0.968627, 0.952941, 0.556863));\n    color += chk(pixel_index, ivec2(21, 28)) * (vec3(0.968627, 0.952941, 0.556863));\n    color += chk(pixel_index, ivec2(22, 28)) * (vec3(0.968627, 0.952941, 0.556863));\n    color += chk(pixel_index, ivec2(23, 28)) * (vec3(0.968627, 0.596078, 0.266667));\n    color += chk(pixel_index, ivec2(24, 28)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 28)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 28)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(27, 28)) * (vec3(0.972549, 0.972549, 0.576471));\n    color += chk(pixel_index, ivec2(28, 28)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(29, 28)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(30, 28)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(31, 28)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(32, 28)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(33, 28)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(34, 28)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(8, 29)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(9, 29)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(10, 29)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(11, 29)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(12, 29)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 29)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(14, 29)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(15, 29)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(16, 29)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(17, 29)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 29)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(19, 29)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(20, 29)) * (vec3(0.968627, 0.596078, 0.266667));\n    color += chk(pixel_index, ivec2(21, 29)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(22, 29)) * (vec3(0.556863, 0.247059, 0.0431373));\n    color += chk(pixel_index, ivec2(23, 29)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 29)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 29)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(26, 29)) * (vec3(0.972549, 0.972549, 0.576471));\n    color += chk(pixel_index, ivec2(27, 29)) * (vec3(0.972549, 0.972549, 0.576471));\n    color += chk(pixel_index, ivec2(28, 29)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(9, 30)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(10, 30)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(11, 30)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(12, 30)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 30)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(14, 30)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(15, 30)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(16, 30)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(20, 30)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 30)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(22, 30)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(23, 30)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 30)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 30)) * (vec3(0.972549, 0.972549, 0.576471));\n    color += chk(pixel_index, ivec2(26, 30)) * (vec3(0.972549, 0.972549, 0.576471));\n    color += chk(pixel_index, ivec2(27, 30)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(10, 31)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(11, 31)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(12, 31)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 31)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(14, 31)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(20, 31)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 31)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(22, 31)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(23, 31)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 31)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 31)) * (vec3(0.972549, 0.658824, 0.313726));\n    color += chk(pixel_index, ivec2(26, 31)) * (vec3(0.596078, 0.313726, 0.0627451));\n    color += chk(pixel_index, ivec2(10, 32)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(11, 32)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(12, 32)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(13, 32)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(14, 32)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(15, 32)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(16, 32)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(17, 32)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 32)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(21, 32)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 32)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(23, 32)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 32)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(25, 32)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(10, 33)) * (vec3(0.396078, 0.396078, 0.396078));\n    color += chk(pixel_index, ivec2(11, 33)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(12, 33)) * (vec3(0.968627, 0.831373, 0));\n    color += chk(pixel_index, ivec2(13, 33)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(14, 33)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(15, 33)) * (vec3(0.396078, 0.396078, 0.396078));\n    color += chk(pixel_index, ivec2(16, 33)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(17, 33)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(18, 33)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(22, 33)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 33)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 33)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(25, 33)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(9, 34)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(10, 34)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(11, 34)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(12, 34)) * (vec3(0.968627, 0.831373, 0));\n    color += chk(pixel_index, ivec2(13, 34)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(14, 34)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(15, 34)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(16, 34)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(17, 34)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 34)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(19, 34)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 34)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 34)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 34)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(23, 34)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(24, 34)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(25, 34)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(8, 35)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(9, 35)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(10, 35)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(11, 35)) * (vec3(0.968627, 0.831373, 0));\n    color += chk(pixel_index, ivec2(12, 35)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 35)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(14, 35)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(15, 35)) * (vec3(0.658824, 0.658824, 0.658824));\n    color += chk(pixel_index, ivec2(16, 35)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(17, 35)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 35)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(19, 35)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(20, 35)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(21, 35)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(22, 35)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 35)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(24, 35)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(25, 35)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(7, 36)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(8, 36)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(9, 36)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(10, 36)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(11, 36)) * (vec3(0.658824, 0.658824, 0.658824));\n    color += chk(pixel_index, ivec2(12, 36)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(13, 36)) * (vec3(0.396078, 0.396078, 0.396078));\n    color += chk(pixel_index, ivec2(14, 36)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(15, 36)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(16, 36)) * (vec3(0.658824, 0.658824, 0.658824));\n    color += chk(pixel_index, ivec2(17, 36)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 36)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(19, 36)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(20, 36)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(21, 36)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 36)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(24, 36)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(25, 36)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(6, 37)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(7, 37)) * (vec3(0.968627, 0.968627, 0.968627));\n    color += chk(pixel_index, ivec2(8, 37)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(9, 37)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(10, 37)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(11, 37)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(12, 37)) * (vec3(0.396078, 0.396078, 0.396078));\n    color += chk(pixel_index, ivec2(16, 37)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 37)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(19, 37)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(20, 37)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(23, 37)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(24, 37)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(25, 37)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(6, 38)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(7, 38)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(8, 38)) * (vec3(0.968627, 0.0980392, 0.0980392));\n    color += chk(pixel_index, ivec2(9, 38)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(10, 38)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(18, 38)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(19, 38)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(20, 38)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(21, 38)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(22, 38)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(23, 38)) * (vec3(0, 0.12549, 0.596078));\n    color += chk(pixel_index, ivec2(24, 38)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(7, 39)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(8, 39)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(16, 39)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(17, 39)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 39)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(19, 39)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(20, 39)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(21, 39)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(22, 39)) * (vec3(0, 0.25098, 0.909804));\n    color += chk(pixel_index, ivec2(23, 39)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(15, 40)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(16, 40)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(17, 40)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(18, 40)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(19, 40)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(20, 40)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(21, 40)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(22, 40)) * (vec3(0, 0, 0.376471));\n    color += chk(pixel_index, ivec2(14, 41)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(15, 41)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(16, 41)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(17, 41)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(18, 41)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(19, 41)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(20, 41)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(21, 41)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(22, 41)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(14, 42)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(15, 42)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(16, 42)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(17, 42)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(18, 42)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(19, 42)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(20, 42)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(21, 42)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(22, 42)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(15, 43)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(16, 43)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(17, 43)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(18, 43)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(19, 43)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(20, 43)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(21, 43)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(22, 43)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(23, 43)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(24, 43)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(25, 43)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(16, 44)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(17, 44)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(18, 44)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(19, 44)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(20, 44)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(21, 44)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(22, 44)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(23, 44)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(24, 44)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(25, 44)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(26, 44)) * (vec3(0.592157, 0, 0));\n    color += chk(pixel_index, ivec2(17, 45)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(18, 45)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(19, 45)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(20, 45)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(21, 45)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(22, 45)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(23, 45)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(24, 45)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(25, 45)) * (vec3(0.686275, 0.686275, 0.686275));\n    color += chk(pixel_index, ivec2(26, 45)) * (vec3(0.435294, 0.435294, 0.435294));\n    color += chk(pixel_index, ivec2(19, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(20, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(21, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(22, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(23, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(24, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(25, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    color += chk(pixel_index, ivec2(26, 46)) * (vec3(0.0627451, 0.0627451, 0.0627451));\n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(image_2(uv, iResolution.x / iResolution.y), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}