{"ver":"0.1","info":{"id":"l3fcR7","date":"1725976557","viewed":65,"name":"sdQuarterCircle","username":"dottedboxguy","description":"fast distance field for a quarter circle with elongated ends for basically free\nwith a little bit more care put into the condition to choose between the 2 points, it should be possible to get differently lengthed ends pretty much for free too","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["sdf","sdf","distance","signeddistancefield"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdQuarterCircle( in vec2 p, in float r, in float thickness, in float tip_length){\n    return (.0>p.y||.0>p.x)?\n        length(p-(\n            //positioning the edge points correctly, and extending them\n            (p.x>p.y)?\n                vec2(r, -clamp(-p.y, 0., tip_length)):\n                vec2(-clamp(-p.x, 0., tip_length), r)\n        ))-thickness:\n        //onion'd circle\n        abs(length(p)-r) - thickness;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    //centering uvs and preventing stretching\n    uv-=.5;\n    uv.x*=iResolution.x/iResolution.y;\n    \n    uv*=3.;\n    vec2 m = iMouse.xy/iResolution.xy;\n    m-=.5;\n    m.x*=iResolution.x/iResolution.y;\n    m*=3.;\n\n    float d = sdQuarterCircle(uv, .5+.5*cos(iTime), .03, .5+.5*sin(iTime));\n    \n    //isoline rendering from iq\n    vec3 color = vec3(0.);\n    float px = 2./iResolution.y;\n    color = (d>0.0) ? vec3(.9,.6,.3) : vec3(.65,.85,1.);\n    color *= 1. - exp2(-24.*abs(d));\n    color *= .8 + .2*cos(120.*abs(d));\n    color = mix(color, vec3(1.), 1.-smoothstep(-px,px,abs(d)-0.005));\n    d = length(uv-m)-abs(sdQuarterCircle(m, .5+.5*cos(iTime), .03, .5+.5*sin(iTime)));\n    \n    //mouse circle\n    if (d<0.01 && d>0.){color = vec3(0.);}\n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}