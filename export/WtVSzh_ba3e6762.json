{"ver":"0.1","info":{"id":"WtVSzh","date":"1582191311","viewed":109,"name":"04 3D Raymarching metaballs","username":"waffles","description":"Example of simple raymarching","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Licensed under Creative Commons CC0: https://creativecommons.org/share-your-work/public-domain/cc0/\n\n// For more shapes and raymarching knowledge: https://iquilezles.org/articles/distfunctions\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime;\n    vec2 uv = fragCoord/iResolution.xy*2.0f-1.0f;\n\n    // initial background color\n    vec4 color = vec4(0.0f,0.0f,0.0f,0.0f);\n    // palette\n    vec3 color1 = vec3(1.0f, 1.0f, 1.0f);\n    vec3 color2 = vec3(0.4f, 0.4f, 0.4f);\n\n    float metaStickyness = 0.4f;\n    float sphereSize = 0.3f;\n\n    vec3 spheres[5];\n    spheres[0].x = cos(time)*0.5f+0.2f;\n    spheres[0].y = sin(time)*0.8f+0.3f;\n    spheres[0].z = sin(time)*0.5f;\n    spheres[1].x = sin(time)*0.5f-0.5f;\n    spheres[1].y = cos(time)*0.5f-0.25f;\n    spheres[1].z = sin(time)+0.5f;\n    spheres[2].x = cos(time)*0.5f-0.5f;\n    spheres[2].y = sin(time)*0.7f-0.25f;\n    spheres[2].z = cos(time)*0.6f+0.3f;\n    spheres[3].x = cos(time)*0.8f;\n    spheres[3].y = sin(time)*0.4f;\n    spheres[3].z = cos(time)*0.8f;\n    spheres[4].x = sin(time)*0.9f;\n    spheres[4].y = sin(time)*0.9f;\n    spheres[4].z = sin(time)*0.2f;\n\n    vec3 cameraEye = vec3(0.0f,0.0f,-2.5f);\n    vec3 cameraUp = vec3(0.0f,1.0f,0.0f);\n    vec3 cameraRight = vec3(1.0f,0.0f,0.0f);\n\n    vec3 cameraTarget = normalize(cross(cameraRight, cameraUp) + cameraRight*uv.x + cameraUp*uv.y);\n\n    float rayHitThreshold = 0.01f;\n    float zFar = 5.0f;\n    float rayDistance = 0.0f;\n    int rayMaxSteps = 30;\n    for(int i = 0; i < rayMaxSteps; i++)\n    {\n        vec3 rayPosition = cameraEye+cameraTarget*rayDistance;\n\n        float distanceToSolid = 0.0f;\n\n        for(int i = 0; i < spheres.length(); i++)\n        {\n            float sa = length(rayPosition+spheres[i])-sphereSize;\n            if (i == 0)\n            {\n                distanceToSolid = sa;\n            }\n            else\n            {\n                //metaball glue\n                float h = clamp(0.5f+0.5f*(sa-distanceToSolid)/metaStickyness,0.0f,1.0f);\n                distanceToSolid = mix(sa,distanceToSolid,h)-metaStickyness*h*(1.0f-h);\n            }\n        }\n\n        if (rayDistance > zFar)\n        {\n            break;\n        }\n        else if (distanceToSolid < rayHitThreshold)\n        {\n            vec3 n = rayPosition;\n\n            float percent = abs((n.r+n.g+n.b)/3.0f);\n            color = vec4(mix(color1, color2, percent/0.5f), 1.0f);\n\n            break;\n        }\n\n        rayDistance += distanceToSolid;\n    }\n\n    fragColor = color;\n}","name":"Image","description":"","type":"image"}]}