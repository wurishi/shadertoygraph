{"ver":"0.1","info":{"id":"lfj3zz","date":"1706281247","viewed":97,"name":"Concentric sdf stars","username":"Chriscamplin","description":"SDF stars vortex learning from Xor's shader: https://www.shadertoy.com/view/msjXRK","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sdf","attenuation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PI 3.14159265359\n\n#define PI2 6.28318530718\n// The MIT License\n// https://www.youtube.com/c/InigoQuilez\n// https://iquilezles.org/\n// Copyright Â© 2015 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n// A simple way to create color variation in a cheap way (yes, trigonometrics ARE cheap\n// in the GPU, don't try to be smart and use a triangle wave instead).\n\n// See https://iquilezles.org/articles/palettes for more information\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\n\n\nfloat sdEquilateralTriangle( in vec2 p, in float r )\n{\n    const float k = sqrt(3.0);\n    p.x = abs(p.x) - r;\n    p.y = p.y + r/k;\n    if( p.x+k*p.y>0.0 ) p = vec2(p.x-k*p.y,-k*p.x-p.y)/2.0;\n    p.x -= clamp( p.x, -2.0*r, 0.0 );\n    return max(-length(p)*sign(p.y),.1);\n}\n\nfloat sdParallelogram( in vec2 p, float wi, float he, float sk )\n{\n    vec2 e = vec2(sk,he);\n    p = (p.y<0.0)?-p:p;\n    vec2  w = p - e; w.x -= clamp(w.x,-wi,wi);\n    vec2  d = vec2(dot(w,w), -w.y);\n    float s = p.x*e.y - p.y*e.x;\n    p = (s<0.0)?-p:p;\n    vec2  v = p - vec2(wi,0); v -= e*clamp(dot(v,e)/dot(e,e),-1.0,1.0);\n    d = min( d, vec2(dot(v,v), wi*he-abs(s)));\n    return sqrt(d.x)*sign(-d.y);\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\n// from https://thebookofshaders.com/edit.php#11/wood.frag\nmat2 rotate2d(float angle){\n    return mat2(cos(angle),-sin(angle),\n                sin(angle),cos(angle));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = (iTime*PI)*.00345675;\n    vec2 res = iResolution.xy;\n    float sec = 20.;\n    float s = sin(PI*(0.75-iTime)/sec)/2.+1.;\n    vec2 uv=(2.*fragCoord.xy-iResolution.xy)/iResolution.y;\n    vec2 uv2 = fragCoord.xy/iResolution.xy;\n    vec4 col = vec4(0.);\n\n    //Save centered pixel coordinates\n    vec2 p = (fragCoord-res*.5)*s;//*mat2(5,4,-2,4.+iMouse.x*.001);\n    p*=rotate2d(PI*2.0 +t);\n    p*=s*2.0;\n        //Initialize loop iterator and arc angle\n    for(float i=-.15,angle; i<0.;i+=.0025) {\n        p*=rotate2d(PI*2. +t);\n\n        //Add with ring attenuation\n        float ring = length(p/(res+res+p).x);\n        float tri = sdEquilateralTriangle (p/(res+res+p-i/500.), .05);\n        float para = sdParallelogram(p/(res+res+p+s)-i/500., .25, .25, .25);\n        float star = sdStar5(p/(res+res-p)-i/500., .75, .25);\n        //uv*=mat2(1,1.,-1.1, 1.);\n        p*=mat2(1.0,.02, -.01645, 1);\n        p*=mat2(1.0,.02, -.01645, 1);\n        p*=mat2(1.,.02, -.01645, 1);\n        ///p*=rotate2d(PI +t);\n        vec4 ringAttenuation = vec4(.025 / (abs (ring*2.-i)+5.*i*i/res.y));\n        vec4 parattenuation = vec4(.00125 / (abs (para+i)-20.*i*i/res.x));\n        vec4 starAttenuation = vec4(.000645 / (abs (star-i/.5)+2.*i*i/res.x*.5));\n        vec4 triAttenuation = vec4(.0025 / (abs (tri*2.-i)+5.*i/res.x));\n        float limitToArcs = clamp(cos(atan(p.x/i,p.y/i)+(i*30./i)*ceil(i*20.573/i)-(iTime/i)*sin(i/i*i)+i),0.,.9);\n        vec4 arcColors = cos(angle+i*27.5+vec4(1,2,3,0))+.125;\n        vec4 rings = ringAttenuation * limitToArcs;\n        vec4 paras = parattenuation * limitToArcs;\n        vec4 stars = starAttenuation * limitToArcs;\n        vec4 tris = triAttenuation * limitToArcs;\n        paras = abs (paras);\n        //col+= paras * arcColors;\n       col+= stars * arcColors;\n        //col+= tris * arcColors;\n    }\n\n    fragColor = col;//*sphere;\n}","name":"Image","description":"","type":"image"}]}