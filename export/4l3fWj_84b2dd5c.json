{"ver":"0.1","info":{"id":"4l3fWj","date":"1540984823","viewed":487,"name":"Pixel sorting by hsv","username":"miffy","description":"Pixel sorting  by hue along x-axis, brightness x (1.0-saturation) along y-axis.\n2-axis pixel sorting referenced from\nhttps://www.shadertoy.com/view/4dcGDf","likes":11,"published":1,"flags":32,"usePreview":1,"tags":["pixel","sorting"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//HSV functions from iq (https://www.shadertoy.com/view/MsS3Wc)\nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); // cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n//From Sam Hocevar: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n//2-axis pixel sorting referenced from\n//https://www.shadertoy.com/view/4dcGDf\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texel = 1. / iResolution.xy;\n    \n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 e  = vec2(-step_x, 0.0);\n    vec2 w  = vec2(step_x, 0.0);\n\n    vec4 im =    texture(iChannel0, uv);\n    vec4 im_n =  texture(iChannel0, uv+n);\n    vec4 im_s =  texture(iChannel0, uv+s);\n    vec4 im_e =  texture(iChannel0, uv+e);\n    vec4 im_w =  texture(iChannel0, uv+w);\n    \n    vec3 hsv = rgb2hsv(im.rgb);\n    vec3  hsv_n = rgb2hsv(im_n.rgb);\n    vec3 hsv_s = rgb2hsv(im_s.rgb);\n    vec3 hsv_e = rgb2hsv(im_e.rgb);\n    vec3 hsv_w = rgb2hsv(im_w.rgb);\n    \n    //sort by brightness x saturation\n    if(int(mod(float(iFrame), 4.0)) < 2) {\n        if(int(mod(float(iFrame) + fragCoord.y, 2.0)) == 0) {\n            if (((hsv_s.z*(1.0-hsv_s.y)) > (hsv.z*(1.0-hsv.y)))) { \n                im = im_s;    \n             }\n        } else {\n            if (((hsv_n.z*(1.0-hsv_n.y)) < (hsv.z*(1.0-hsv.y)))) { \n                im = im_n;    \n            }   \n        }\n    } else {\n        //sort by hue\n        if(int(mod(float(iFrame) + fragCoord.x, 2.0)) == 0) {\n            if ((hsv_w.x > hsv.x)) { \n                im = im_w;    \n            }\n        } else {\n            if ((hsv_e.x < hsv.x)) { \n                im = im_e;    \n            }   \n        }\n    }\n    \n    // initialize with image\n    if(iFrame<10) {\n        fragColor = texture(iChannel1, uv);\n    } else {\n        fragColor = im;\n    }\n    \n}","name":"Buffer A","description":"","type":"buffer"}]}