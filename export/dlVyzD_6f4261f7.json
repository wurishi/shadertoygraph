{"ver":"0.1","info":{"id":"dlVyzD","date":"1700463217","viewed":22,"name":"20231115","username":"wwwww","description":"colors","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["colors"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define iterations 30\n#define formuparam 0.7\n\n#define volsteps 12\n#define stepsize 0.1\n\n#define zoom 1.500\n#define tile 0.8\n#define speed 0.020\n\n#define brightness 0.0020\n#define darkmatter 0.300\n#define distfading 0.760\n#define saturation 1.5\n\n#define mo (2.0 * iMouse.xy - iResolution.xy) / iResolution.y\n#define blackholeCenter vec3(time*2.5,time,-2.5)\n#define blackholeRadius 1.3\n#define blackholeIntensity 1.2\n\nfloat iSphere(vec3 ray, vec3 dir, vec3 center, float radius) {\n    vec3 rc = ray - center;\n    float c = dot(rc, rc) - (radius * radius);\n    float b = dot(dir, rc);\n    float d = b * b - c;\n    float t = -b - sqrt(abs(d));\n    float st = step(0.0, min(t, d));\n    return mix(-1.0, t, st);\n}\n\nvec3 iPlane(vec3 ro, vec3 rd, vec3 po, vec3 pd) {\n    float d = dot(po - ro, pd) / dot(rd, pd);\n    return d * rd + ro;\n}\n\nvec3 r(vec3 v, vec2 r) {\n    vec4 t = sin(vec4(r, r + 1.5707963268));\n    float g = dot(v.yz, t.yw);\n    return vec3(v.x * t.z - g * t.x,\n                v.y * t.w - v.z * t.y,\n                v.x * t.x + g * t.z);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.y *= iResolution.y / iResolution.x;\n    vec3 dir = vec3(uv * zoom, 1.);\n    float time = iTime * speed + 0.25;\n\n    vec3 from = vec3(0.0, 0.0, -15.0);\n    from = r(from, mo / 5.0);\n    dir = r(dir, mo / 5.0);\n    from += blackholeCenter;\n\n    vec3 nml = normalize(blackholeCenter - from);\n    vec3 pos = iPlane(from, dir, blackholeCenter, nml);\n    pos = blackholeCenter - pos;\n    float intensity = dot(pos, pos);\n    if (intensity > blackholeRadius * blackholeRadius) {\n        intensity = 1.0 / intensity;\n        dir = mix(dir, pos * sqrt(intensity), blackholeIntensity * intensity);\n\n        float s = 0.1, fade = 1.;\n        vec3 v = vec3(0.);\n        vec3 lastP = vec3(0.); // lastP変数を追加\n\n        for (int r = 0; r < volsteps; r++) {\n            vec3 p = from + s * dir * 0.5;\n            p = abs(vec3(tile) - mod(p, vec3(tile * 2.))); // tiling fold\n            float pa, a = pa = 0.;\n            for (int i = 0; i < iterations; i++) {\n                p = abs(p) / dot(p, p) - formuparam; // magic formula\n                a += abs(length(p) - pa); // absolute sum of average change\n                pa = length(p);\n            }\n            lastP = p; // lastPを更新\n            float dm = max(0., darkmatter - a * a * .001); // dark matter\n            a *= a * a; // add contrast\n            if (r > 6) fade *= 1. - dm; // dark matter effect\n            float shade = dot(normalize(p), normalize(from - p));\n            shade = mix(0.4, 1.0, shade); // dynamic lighting\n            v += vec3(shade) * a * brightness * fade; // add light effect\n            fade *= distfading; // distance fading\n            s += stepsize;\n        }\n        v = mix(vec3(length(v)), v, saturation); // color adjustment\n\n        // カラーミキシングに lastP を使用\n        vec3 cr = vec3(0.2, 0.5, 1.0);\n        fragColor.xyz = v * 0.02;\n        fragColor.xyz += mix((cr.xyz - fragColor.xyz) * 0.1, vec3(0.2, 0.5, 1.0), clamp((-lastP.y + 1.0) * 0.5, 0.0, 1.0));\n\n        fragColor = min(vec4(1.0), fragColor);\n        fragColor.a = 1.0;\n    } else {\n        fragColor = vec4(0.0);\n    }\n}\n","name":"Image","description":"","type":"image"}]}