{"ver":"0.1","info":{"id":"WsdyDX","date":"1601888347","viewed":144,"name":"VoronoiMusicVisualizer","username":"keshav2010","description":"music visualiser + voronoi project => this\n\njust select any music for iChannel0 and u are good to go","likes":2,"published":1,"flags":64,"usePreview":0,"tags":["voronoi","glsl"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"llsSDs","filepath":"https://soundcloud.com/john-smith-542336123/excuses","previewfilepath":"https://soundcloud.com/john-smith-542336123/excuses","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//voronoi\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;  \n    \n    // the sound texture is 512x2\n    int tx = int(uv.x*1.12);\n    \n    // first row is frequency data (48Khz/4 in 512 texels, meaning 23 Hz per texel)\n\tfloat fft  = texelFetch( iChannel0, ivec2(tx,0), 0 ).x*0.45; \n\n    // second row is the sound wave, one texel is one mono sample\n    float wave = texelFetch( iChannel0, ivec2(tx,1), 0 ).x*0.15;\n\tuv.x -= 0.4;\n    \n    const int pointCount=15;\n\n    \n    //increase power to decrease blending.\n    float power = 4.+fft+wave;\n    float rate=fft*5. - 2.8*sin(iTime*wave)*sin(iTime+fft);\n    \n    vec2 points[pointCount] = vec2[pointCount](\n    vec2( 0.5 + 0.15*sin(iTime)*rate, 0.5 - 0.25*cos(iTime)*rate), \n    vec2( 0.25 + 0.2*sin(iTime*3.)*rate , 0.8 + 0.2*sin(iTime*3.)*rate),\n    vec2( 0.635+ 0.2*sin(iTime*3.)*rate , 0.7 + 0.2*sin(iTime)*rate),\n    vec2( 0.3+ 0.12*sin(iTime*3.)*rate  , 0.3 + 0.1*sin(iTime)*rate),\n    vec2( 0.5+ 0.2*sin(iTime*2.5)*rate, 0.5 + 0.2*sin(iTime)*rate),\n    vec2( 0.8+ 0.15*sin(iTime*3.)*rate, 0.6 + 0.15*sin(2.*iTime)*rate),\n    vec2( 0.8 + 0.2*sin(iTime*3.)*rate  , 0.5 + 0.2*sin(iTime)*rate),\n    vec2( 0.45 + 0.4*sin(iTime*1.5)*rate, 0.9 + 0.8*sin(iTime)*rate),\n    vec2( 0.15 + 0.12*sin(iTime*2.)*rate, 0.9 + 0.12*sin(iTime)*rate),\n    vec2( 0.4 + 0.12*sin(iTime*2.)*rate, 0.1 + 0.12*sin(iTime)*rate),\n    vec2( 0. + 0.12*sin(iTime*2.)*rate, 0. + 0.41*sin(iTime)*sin(iTime)*rate),\n    vec2( 1. + 0.12*sin(iTime*2.)*rate, 0. + 0.41*sin(iTime)*sin(iTime)*rate),\n    vec2( 0. + 0.12*sin(iTime*2.)*rate, 1. - 0.41*sin(iTime)*sin(iTime)*rate),\n    vec2( 1. + 0.12*sin(iTime*2.)*rate, 1. - 0.41*sin(iTime)*sin(iTime)*rate),\n    vec2( 0. + 1.*sin(iTime)*sin(iTime), 0.5)\n   );\n    \n    float minDist=2.;\n    for(int i=0; i < pointCount; i++){\n    \tminDist = min(distance(uv.xy, points[i]), minDist);      \n    }\n    \n    vec3 col = vec3(1.-minDist+wave, 0.7-minDist+fft,.7 -minDist+fft);\n    \n    \n    col.x = pow(col.x, power);\n    col.y = pow(col.y, power);\n    col.z = pow(col.z, power);\n \t\n \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}