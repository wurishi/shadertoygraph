{"ver":"0.1","info":{"id":"lt2SRV","date":"1445181855","viewed":246,"name":"[CIS565 2015F]ss: all in demo","username":"shrekshao","description":"AcknowledgementsThis Shadertoy uses material from the following resources:\n(http://graphics.cs.williams.edu/courses/cs371/f14/reading/implicit.pdf)\n(https://www.shadertoy.com/view/Xds3zN)\n(https://iquilezles.org/articles/terrainmarching/terrai\n","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"\n//MACRO-------------------------------------\n\n//Scene\n#define MENGER 1\n#define TERRAIN 1\n\n//Debug Render Type\n#define DEBUG_DISTANCE_TO_SURFACE 0\n#define DEBUG_NUM_RAY_MARCH_ITERATIONS 0\n\n\n\n//Ray March Mode\n//Enable the first to see correct fractal and terrain\n//Disable both to enabke sphere marching\n#define NAIVE_TRACE_INTERPOLATE 1\n#define NAIVE_TRACE 0\n\n\n\n//Trace Parameter\n#define MAX_ITERATIONS_NAIVE 2000\n#define DT 0.01\n#define RATIO_T 0.003\n\n#define MAX_ITERATIONS_SPHERE 50\n\n\n#define MAX_ITERATION_TIMES_DIVIDER 40\n\n\n//Optimize\n\n#define K_OVERRELAX (1.2)\n#define BOUNDING_SPHERE 1\n\n\n//Time measurement\n#define SHADE 1\n#define SOFTSHADOW 1\n#define AO 1\n\n\n//------------------------------------------\n\n\n\n#if DEBUG_NUM_RAY_MARCH_ITERATIONS\n\tint num_ray_march_interations=0;\n\t//int num_reverse=0;\n#endif\n\n//Distance Functions\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r )\n{\n    return (length( p/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x,p.y) )-t.y;\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max((q.x*0.866025+q.y*0.5),q.y)-h.x;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r;\n}\n\nfloat sdTriPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n#if 0\n    return max(q.z-h.y,max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5);\n#else\n    float d1 = q.z-h.y;\n    float d2 = max(q.x*0.866025+p.y*0.5,-p.y)-h.x*0.5;\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n#endif\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n    float d1 = -q.y-c.z;\n    float d2 = max( dot(q,c.xy), q.y);\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\n\nfloat sdConeSection( in vec3 p, in float h, in float r1, in float r2 )\n{\n    float d1 = -p.y - h;\n    float q = p.y - h;\n    float si = 0.5*(r1-r2)/h;\n    float d2 = max( sqrt( dot(p.xz,p.xz)*(1.0-si*si)) + q*si - r2, q );\n    return length(max(vec2(d1,d2),0.0)) + min(max(d1,d2), 0.);\n}\nfloat length2( vec2 p )\n{\n\treturn sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )\n{\n\tp = p*p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/6.0 );\n}\n\nfloat length8( vec2 p )\n{\n\tp = p*p; p = p*p; p = p*p;\n\treturn pow( p.x + p.y, 1.0/8.0 );\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length2(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x,p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdCylinder6( vec3 p, vec2 h )\n{\n  return max( length6(p.xz)-h.x, abs(p.y)-h.y );\n}\n\n\n\n\nfloat maxcomp(in vec2 p ) { return max(p.x,p.y);}\nfloat sdCross( in vec3 p )\n{\n  float da = maxcomp(abs(p.xy));\n  float db = maxcomp(abs(p.yz));\n  float dc = maxcomp(abs(p.zx));\n  return min(da,min(db,dc))-1.0;\n}\n\nfloat sdMengerSponge(vec3 p)\n{\n\n\t//bounding Sphere\n#if BOUNDING_SPHERE\n\tfloat tSquared = dot(p,p) - 3.0;\n\tif(tSquared > 0.0)\n\t{\n\t\treturn sqrt(tSquared);\n\t}\n#endif\n\n\tfloat d = sdBox(p,vec3(1.0));\n\n\tfloat s = 1.0;\n\tfor( int m=0; m<3; m++ )\n\t{\n\t\tvec3 a = mod( p*s, 2.0 )-1.0;\n\t\ts *= 3.0;\n\t\tvec3 r = 1.0 - 3.0*abs(a);\n\t\tfloat c = sdCross(r)/s;\n\t\td = max(d,c);\n\t}\n    \n    \n   return d;\n}\n\n\n\n//----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n//Repetition\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n\nvec3 opTranslate(vec3 p, vec3 trans)\n{\n\treturn p - trans;\n}\n\nvec3 opRotate(vec3 p, vec3 axis, float angle)\n{\n\taxis = normalize(axis);\n    float s = sin(radians(-angle));\n    float c = cos(radians(-angle));\n    float oc = 1.0 - c;\n\tmat3 R = mat3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n\t\n\t\n\treturn R*p;\n}\n\nvec3 opScale(vec3 p, vec3 scale)\n{\n\treturn p/scale;\n}\n\nvec3 opTransform(vec3 p, vec3 trans, vec3 axis,float angle, vec3 scale)\n{\n\t//transform T*R*S\n\t//inv order S*R*T\n\n\tmat4 T = mat4(1.0,0.0,0.0,0.0\n\t\t\t\t\t,0.0,1.0,0.0,0.0\n\t\t\t\t\t,0.0,0.0,1.0,0.0\n\t\t\t\t\t,-trans.x,-trans.y,-trans.z,1.0);\n\t\n\taxis = normalize(axis);\n    float s = sin(radians(-angle));\n    float c = cos(radians(-angle));\n    float oc = 1.0 - c;\n\tmat4 R = mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,0.0,\n\t\t\t\t0.0,0.0,0.0,1.0);\n\n\t\n\tmat4 S = mat4(1.0/scale.x,0.0,0.0,0.0,\n\t\t\t\t\t0.0,1.0/scale.y,0.0,0.0,\n\t\t\t\t\t0.0,0.0,1.0/scale.z,0.0,\n\t\t\t\t\t0.0,0.0,0.0,1.0);\n\n\tvec4 hp = p.xyzz;\n\thp.w = 1.0;\n\thp = S*R*T*hp;\n\n\treturn hp.xyz;\n}\n\n\nfloat opIntersect(float d1, float d2)\n{\n\treturn max(d1,d2);\n}\n\n//vec3 opScale(vec3 \n\n\n\nvec3 float2Color(float v,float vmin,float vmax)\n{\n\tfloat t = 2.0 * (v-vmin)/(vmax-vmin);\n\t\n\treturn vec3( 1.0 - min(1.0,max(0.0,t))\n\t\t\t\t, t>1.0 ? max(0.0,2.0-t) : t\n\t\t\t\t, min(1.0,max(0.0,t-1.0)) );\n\n}\n\n\nfloat opBump(float r,vec3 p, float h)\n{\n\treturn  r+h*sin(50.0*p.x)*sin(50.0*p.y)*sin(50.0*p.z);\n}\n\n//----------------------------------------------------------------------\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P)\n{\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n\nfloat terrain(vec3 pos)\n{\n\t//float h = sin(pos.x)*sin(pos.z);\n    float h = sin(cos(pos.z)*(pos.x+pos.z))*cnoise(pos.xz);\n    h = max(-0.1,h);\n    h +=  0.01*cnoise(29.0*vec2(sin(pos.y+pos.z)+cos(pos.x),cos(pos.x + pos.y) ) ) -0.1;\n\treturn pos.y-h;\n}\nvec2 map( in vec3 pos )\n{\n    //vec2 res = opU( vec2( sdPlane(     pos), 1.0 ),\n\t //           vec2( sdSphere(    pos-vec3( 0.0,0.25, 0.0), 0.25 ), 46.9 ) );\n    \n\t//terrain\n\t//vec2 res= vec2(terrain(pos),1.0);\n\n\n#if TERRAIN\n\tvec2 res= vec2(terrain(opTranslate(pos,vec3(0.0,-1.0,0.0))),1.0);\n#else\n\tvec2 res = vec2( sdPlane(pos), 1.0 );\n#endif\n\tres = opU( res, vec2( sdSphere( opTranslate(pos,vec3(0.0,0.25,0.0)),0.25) , 58.0) );\n\tres = opU( res, vec2( sdSphere( opTransform(pos,vec3(-1.0,0.85,0.0),vec3(1.0,1.0,1.0),45.0,vec3(2.0,1.0,1.0)  ) ,0.25) , 58.0) );\n    \n\tres = opU( res, vec2( sdBox(     opTransform(pos,vec3(1.0,0.75,0.0),vec3(1.0,1.0,1.0),45.0,vec3(1.0,1.0,1.0)  ), vec3(0.25) ), 3.0 ) );\n    res = opU( res, vec2( udRoundBox(  opTransform(pos,vec3(1.0,0.25,1.0),vec3(0.0,1.0,0.0),60.0,vec3(1.0,1.0,1.0)), vec3(0.15), 0.1 ), 41.0 ) );\n\n\tres = opU( res, vec2( sdCylinder(  pos-vec3( 1.0,0.30,-1.0), vec2(0.1,0.2) ), 99.0 ) );\n    res = opU( res, vec2( sdTorus82(   pos-vec3( 1.0,0.25, 2.0), vec2(0.20,0.05) ),50.0 ) );\n\t//simple bump\n\tres = opU( res, vec2( opBump(sdSphere(pos-vec3(-2.0,0.25,-1.0), 0.2 ),pos,0.01) , \n                                       365.0 ) );\n\n\n\tres = opU( res, vec2( opS(\n\t\t             udRoundBox(  pos-vec3(-2.0,0.2, 1.0), vec3(0.15),0.05),\n\t                 sdSphere(    pos-vec3(-2.0,0.2, 1.0), 0.25)), 213.0 ) );\n    \n    \n\n\n#if MENGER\n\t//fractal\n\tres = opU( res, vec2( sdMengerSponge(opTransform(pos,vec3(-0.8,0.35,1.9),vec3(0.0,1.0,0.0),0.0,vec3(0.3,0.3,0.3)) ),107.0 ) );\n#endif\n\n    return res;\n}\n\n\n//const overRelaxK = 1.5;\n\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n\n//interpolate and dynamic delta\n#if NAIVE_TRACE_INTERPOLATE\n\n\n\tfloat tmin = 1.0;\n    float tmax = DT * float(MAX_ITERATIONS_NAIVE);\n\tfloat dt = DT;\n\n\tfloat t = tmin;\n\tvec2 res = map(ro+rd*t);\n\n    float lh = 0.0;\n    float ly = 0.0;\n\t//while loop is not allowed in shader toy\n\tfor( int i=0; i<MAX_ITERATIONS_NAIVE; i++ )\n    {\n#if DEBUG_NUM_RAY_MARCH_ITERATIONS\n\t\tnum_ray_march_interations = num_ray_march_interations + 1;\n#endif\n        vec3 p = ro+rd*t;\n        res = map(p);\n\t\tif(t >= tmax)\n        {\n            break;\n        }\n            \n        if(res.x <= 0.0)\n        {\n            t = t - dt + dt *(lh-ly)/(p.y-ly-(p.y-res.x)+lh);\n            break;\n        }\n\n\t\tt = t + dt;\n        \n\t\t\n        \n        //changing dt and interpolate\n        dt = RATIO_T*t;\n        lh = p.y - res.x;\n        ly = p.y;\n\n\t}\n\tif( t>tmax ) res.y=-1.0;\n\treturn vec2(t,res.y);\n\n\t//naive way\n#elif NAIVE_TRACE\n\n\n\tfloat tmin = 1.0;\n    float tmax = 20.0;\n\tfloat dt = DT;\n\n\tfloat t = tmin;\n\tvec2 res = map(ro+rd*t);\n\n\t//while loop is not allowed in shader toy\n\tfor( int i=0; i<MAX_ITERATIONS_NAIVE; i++ )\n    {\n#if DEBUG_NUM_RAY_MARCH_ITERATIONS\n\t\tnum_ray_march_interations = num_ray_march_interations + 1;\n#endif\n\t\tif(t >= tmax || res.x <= 0.0) break;\n\n\t\tt = t + dt;\n\t\tres = map(ro+rd*t);\n\t\t\n\t}\n\n    if( t>tmax ) res.y=-1.0;\n\treturn vec2(t,res.y);\n#else\n\t//Sphere Trace\n\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n    float precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n\n\tfloat this_dt = 0.0;\n    float K = K_OVERRELAX;\n    float last_r=0.0;\n    for( int i=0; i<MAX_ITERATIONS_SPHERE; i++ )\n    {\n#if DEBUG_NUM_RAY_MARCH_ITERATIONS\n\t\tnum_ray_march_interations = num_ray_march_interations + 1;\n#endif\n        vec2 res = map( ro+rd*t );\n\t\tif(K>1.01 && last_r + abs(res.x) < this_dt)\n\t\t{\n\t\t\t//fail\n#if DEBUG_NUM_RAY_MARCH_ITERATIONS\n            //num_reverse += 1;\n\t\t\tnum_ray_march_interations = num_ray_march_interations + 1;\n#endif\n\n\t\t\tt += (1.0-K) * this_dt;\n\t\t\tres = map( ro + rd * t);\n            K=1.0;\n\t\t}\n\t\t\n\t\tif( res.x<precis || t>tmax ) break;\n\t\t\n        last_r = abs(res.x);\n\t\tthis_dt = K * last_r;\n        t += this_dt;\n        m = res.y;\n\n    }\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n#endif\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n#if SOFTSHADOW\n    float res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n        float h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n#else\n\treturn 1.0;\n#endif\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3( 0.001, 0.0, 0.0 );\n    vec3 nor = vec3(\n        map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n        map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n        map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n    return normalize(nor);\n}\n\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n#if AO\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n#else\n\treturn 1.0;\n#endif\n}\n\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n\n#if DEBUG_DISTANCE_TO_SURFACE\n\tvec2 res = castRay(ro,rd);\n\tfloat tmp = res.x/20.0;\n\tvec3 col = vec3(tmp);\n\treturn clamp(col,0.0,1.0);\n\t\n#elif DEBUG_NUM_RAY_MARCH_ITERATIONS\n\tvec2 res = castRay(ro,rd);\n\t//vec3 col = vec3(float(num_ray_march_interations)/float(MAX_ITERATION_TIMES_DIVIDER),0.0,0.0);\n\t//return clamp(col,0.0,1.0);\n\treturn float2Color(float(num_ray_march_interations),0.0,float(MAX_ITERATION_TIMES_DIVIDER));\n    //return float2Color(float(num_reverse),0.0,10.0);\n#else \n    vec3 col = vec3(0.8, 0.9, 1.0); // Sky color\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n    float m = res.y;\n\n#if SHADE\n    if( m>-0.5 )  // Ray intersects a surface\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        // material        \n        col = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n        \n        if( m<1.5 )\n        {\n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        // lighitng        \n        float occ = calcAO( pos, nor );\n        vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n        float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n        float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n        vec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n        brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n        brdf += 0.02;\n        col = col*brdf;\n\n        col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*t*t ) );\n    }\n#endif\n\n    return vec3( clamp(col,0.0,1.0) );\n#endif\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n    vec3 cw = normalize(ta-ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n    vec3 cu = normalize( cross(cw,cp) );\n    vec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n\t\t \n    float time = 15.0 + iTime;\n\n    // camera\t\n    vec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.5*sin(0.1*time + 6.0*mo.x) );\n    vec3 ta = vec3( -0.5, -0.4, 0.5 );\n\t\n    // camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    // ray direction\n    vec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    // render\t\n    vec3 col = render( ro, rd );\n\n    col = pow( col, vec3(0.4545) ); // Gamma correct\n\n    fragColor=vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}