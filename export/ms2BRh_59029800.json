{"ver":"0.1","info":{"id":"ms2BRh","date":"1689442844","viewed":103,"name":"Background fractal","username":"simonmandev","description":"It's my first shader :)\n\nPlaying with uv","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["fractal","uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ( fragCoord * 2. - iResolution.xy ) / iResolution.y;\n   \n    uv *= .25;\n    \n    float angle = 0.56 + iTime * 0.02;\n        \n    for (float i = 0.0; i < 50.; i++) {\n        uv = abs(uv + i * 0.001);\n        uv -= 0.5;\n        uv *= 1.125;\n        uv *= mat2(\n            cos(angle), -sin(angle),\n            sin(angle), cos(angle)\n        );\n    }\n\n    // color\n    vec3 col = vec3(\n        length(uv + vec2(0.052, 0.063)),\n        length(uv + vec2(0.138, 0.633)),\n        length(uv + vec2(0.128, 0.713))\n    );\n    \n    // correct color\n    col *= pow(10. * uv.x * uv.y * (1.5-uv.x) * (1.5-uv.y), .5);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}