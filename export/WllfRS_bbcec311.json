{"ver":"0.1","info":{"id":"WllfRS","date":"1597037199","viewed":92,"name":"Light Cycle Arena Grid","username":"km","description":"A simple shader for the arena grid in the light cycle scene of Tron Legacy. https://www.youtube.com/watch?v=3GBLtnxxtzQ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["grid","tron","firstshader","tronlegacy"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2020 Kyle Marshall\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//thanks iq\nfloat sdRoundBox( in vec2 p, in vec2 b, in vec4 r ) \n{\n    r.xy = (p.x>0.0)?r.xy : r.zw;\n    r.x  = (p.y>0.0)?r.x  : r.y;\n    \n    vec2 q = abs(p)-b+r.x;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0)) - r.x;\n}\n\n//thanks iq\nvec2 opRep( in vec2 p, in vec2 c )\n{\n    vec2 q = mod(p+0.5*c,c)-0.5*c;\n    return q;\n}\n\nconst vec3 c_grid = vec3(0.34, 0.72, 0.74);\nconst vec3 c_floor = vec3(0.05, 0.08, 0.10);\nconst vec2 grid_spacing = vec2(1.512,1.29);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    p += vec2(0, iTime);\n\n\tvec2 si = vec2(0.5,0.5);\n    vec4 ra = vec4(0.1);\n\tfloat scale = 0.45;\n\tfloat d = sdRoundBox( opRep(p/scale, grid_spacing), si, ra )*scale;\n    \n    // render shell\n    vec3 col = c_floor;\n    float th = 0.02*scale;\n    float rolloff = 0.02;\n    float isoline_alpha = smoothstep(-rolloff, 0.0, d) - smoothstep(th,th+rolloff,d);\n\tcol = mix( col, c_grid, isoline_alpha );\n\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}