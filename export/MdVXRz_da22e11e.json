{"ver":"0.1","info":{"id":"MdVXRz","date":"1462647038","viewed":518,"name":"Infinite Teeth","username":"zackpudil","description":"Someone needs to brush their teeth.","likes":14,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","distancefields","perlinnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGzn","filepath":"/media/a/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","previewfilepath":"/media/ap/29de534ed5e4a6a224d2dfffab240f2e19a9d95f5e39de8898e850efdb2a99de.mp3","type":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float hash(float n) {\n\treturn fract(sin(n)*42758.4545);\n}\n\nfloat noise(vec3 x) {\n\tvec3 p = floor(x);\n\tvec3 f = fract(x);\n\t\n\tf = f*f*(3.0 - 2.0*f);\n\t\n\tfloat n = p.x + p.y*57.0 + p.z*113.0;\n\t\n\treturn mix(\n\t\tmix(\n\t\t\tmix(hash(n + 000.0), hash(n + 001.0), f.x),\n\t\t\tmix(hash(n + 057.0), hash(n + 058.0), f.x),\n\t\t\tf.y),\n\t\tmix(\n\t\t\tmix(hash(n + 113.0), hash(n + 114.0), f.x),\n\t\t\tmix(hash(n + 170.0), hash(n + 171.0), f.x),\n\t\t\tf.y),\n\t\tf.z);\n}\n\nfloat len(vec3 p, float l) {\n\tp = pow(abs(p), vec3(l));\n\treturn pow(p.x + p.y + p.z, 1.0/l);\n}\n\nfloat dTeeth(vec3 p) {\n    vec3 q = p;\n    p.x = mod(p.x + 1.0, 2.0) - 1.0;\n\tp.y -= 0.7*dot(p.xz, p.xz) - 0.25 - 0.2*smoothstep(0.2, 1.0, noise(3.0*p));\n\tp.y *= 1.25;\n\treturn len(p, 2.8) - 1.00 - 0.03*smoothstep(0.2, 0.8, noise(3.0*q));\n}\n\nfloat dMouth(vec3 p) {\n    float f = 0.4*smoothstep(0.1, 0.9, noise(2.0*p));\n    vec3 q = p;\n    p.y -= 1.0 - smoothstep(0.4, 2.0, abs(p.z));\n    return min(p.y + 1.0 + f, q.z + 2.5 + 0.3*f);\n}\n\nvec2 map(vec3 p) {\n    p.x += sign(p.y)*sin(iTime*5.0)*0.1;\n    p.y = -abs(p.y) + 0.75*texture(iChannel0, vec2(.25)).x + 1.0;\n    \n    vec2 m = vec2(dMouth(p), 0.0);\n    vec2 t = vec2(dTeeth(p), 1.0);\n    \n    return m.x < t.x ? m : t;\n}\n\nvec2 march(vec3 ro, vec3 rd) {\n\tfloat t = 0.0;\n    float m = 0.0;\n\t\n\tfor(int i = 0; i < 60; i++) {\n\t\tvec2 h = map(ro + rd*t);\n\t\tif(abs(h.x) < 0.0001 || t >= 15.0) break;\n\t\tt += h.x*0.60;\n        m = h.y;\n\t}\n\t\n\treturn vec2(t, m);\n}\n\nvec3 normal(vec3 p) {\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 g = (vec3(\n\t\tmap(p + h.xyy).x,\n\t\tmap(p + h.yxy).x,\n\t\tmap(p + h.yyx).x) - map(p).x)/h.x;\n\t\n\treturn normalize(g);\n}\n\nfloat ao(vec3 p, vec3 n) {\n    float s = 0.013;\n    float t = s;\n    \n    float o = 0.0;\n    \n    for(int i = 0; i < 10; i++) {\n        float h = map(p + n*t).x;\n        o += t - h;\n        t += s;\n    }\n    \n    return clamp(1.0 - o, 0.0, 1.0);\n    \n}\n\nmat3 camera(vec3 eye, vec3 lat) {\n\tvec3 ww = normalize(lat - eye);\n\tvec3 vv = normalize(cross(vec3(0, 1, 0), ww));\n\tvec3 uu = normalize(cross(ww, vv));\n\t\n\treturn mat3(vv, uu, ww);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy/iResolution.xy);\n\tuv.x *= iResolution.x/iResolution.y;\n\t\n\tvec3 ro = vec3(iTime, 1.5, 4);\n\tvec3 rd = camera(ro, ro + vec3(-1.0, -1.5, -4.0))*normalize(vec3(uv, 1.97));\n\t\n\tvec3 col = vec3(1, .1, .1);\n\t\n\tvec2 i = march(ro, rd);\n\t\n\tif(i.x < 15.0) {\n\t\tvec3 pos = ro + rd*i.x;\n\t\tvec3 nor = normal(pos);\n\t\tvec3 ref = reflect(rd, nor);\n\t\t\n\t\tvec3 lig = normalize(vec3(0.8, 0.0, 0.6));\n\t\t\n\t\tfloat amb = clamp(0.5 + 0.5*nor.y, 0.0, 1.0);\n\t\tfloat dif = clamp(dot(lig, nor), 0.0, 1.0);\n\t\tfloat spe = pow(clamp(dot(lig, ref), 0.0, 1.0), 32.0);\n\t\tfloat fre = pow(clamp(1.0 + dot(nor, rd), 0.0, 1.0), 2.0);\n        \n        float occ = ao(pos, nor);\n\t\t\n\t\tcol  = 0.2*amb*vec3(1);\n\t\tcol += 0.7*dif*vec3(1);\n\t\t\n\t\tif(i.y == 1.0) {\n\t\t\tvec3 mat = vec3(1);\n            \n            pos.x += sign(pos.y)*sin(iTime*5.0)*0.1;\n            pos.y -= sign(pos.y)*0.5*texture(iChannel0, vec2(.25)).x;\n\t\t\tfloat f = smoothstep(0.1, 0.4, noise(3.0*pos));\n\t\t\tmat = mix(mat, vec3(0.7, 0.7, 0.1), 1.0 - f);\n            \n\t\t\tpos.x = mod(pos.x + 1.0, 2.0) - 1.0;\n\t\t\tf = smoothstep(0.0, 0.4, length(pos.xz));\n\t\t\tmat = mix(mat, vec3(0.0), smoothstep(0.0, 1.0, 2.0*(1.0 - f)));\n\t\t\t\n\t\t\tcol *= mat;\n\t\t} else {\n\t\t\tcol *= vec3(0.8, 0.1, 0.1);\n\t\t}\n\t\t\n\t\tcol += 1.0*spe*vec3(1)*dif;\n\t\tcol += 0.4*fre*vec3(1);\n        \n        col *= occ;\n\t}\n\t\n\tcol = pow(col, vec3(.454545));\n\t\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"}]}