{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[{"channel":0,"type":"texture","id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"code":"\n\nfloat noise(in vec2 x)\n{\n    \n \treturn texture(iChannel0, x).r;   \n}\n\n\n\n\nfloat fbm (vec2 p)\n{\n \tfloat f = 0.0;   \n    f += 0.5    * noise(p); p *= 2.02;\n    f += 0.250  * noise(p);\tp *= 2.03;\n    f += 0.125  * noise(p);\tp *= 2.05;\n    f += 0.0625 * noise(p);\tp *= 2.07;\n    f /= 0.9375;\n    return f;\n}\n#define PI 3.14159265\n#define STARFREQ 0.3\n#define STARNEIGHBORHOOD 10.0\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    //rotateuv based on time\n    \n    vec2 point = -1.0 + uv * 2.0;\n    vec2 p = point;\n    vec2 auxuv = p;\n    vec2 fsize = vec2(1.0) / vec2(iResolution.x, iResolution.y);\n    p.x = auxuv.x * cos(iTime / 20.0) - auxuv.y * sin(iTime / 20.0);\n    p.y = auxuv.y * sin(iTime / 20.0) + auxuv.y * cos(iTime / 20.0);\n    float t = 1.4; \n    \n\tfloat distp = length(p);\n    vec3 backColor = mix(vec3(1.0,0.7,0.6), vec3(0.2,0.1,0.25), distp);\n    float r = distp;\n    //modify p based on its perceived proximity to the center and the time\n    p *= (1.0 - r) * smoothstep(0.0, 8.0, t);\n    //rotate t based on its distance to the center\n    r *= exp2(1.0 + distp);\n    p *= vec2(sin(r * t), cos(r *t));\n\n    float f = fbm(p);\n    vec3 color =\tbackColor * smoothstep(0.0, 1.0, f);\n    if(distp > 0.4)\n    {\n\t\tfragColor = vec4(color, 1.0);\n    }\n    else\n    {\n        vec2 pnorm = -abs(normalize(-1.0 + uv * 2.0));\n        //get parametric coordinates, and use them as parameter for the fbm\n        vec2 rc = vec2(asin(pnorm.x), acos(pnorm.y));\n        rc = normalize(rc);\n        f = fbm(rc);\n        vec3 centercolor =\tvec3(0.2, 0.8, 0.2) * smoothstep(0.0, 1.0, 4.0 * f * distp)  ;\n       \t\n        \n        \n    \tfragColor = vec4(mix(centercolor, color, smoothstep(0.0, 0.4,  distp)), 1.0);\n    }\n    //add some stars\n    auxuv =point;\n    float tmod = iTime + 5.0;\n    point.x = auxuv.x * cos(tmod / 30.0) - auxuv.y * sin(tmod / 30.0);\n    point.y = auxuv.y * sin(tmod / 10.0) + auxuv.y * cos(tmod / 30.0);\n    \n    vec2  pointstar = point - mod(point, fsize *  STARNEIGHBORHOOD ) + STARNEIGHBORHOOD * 0.5 * fsize;\n    \n    \n    t = noise(pointstar * 0.8 );\n    float dstar = distance(pointstar , point);\n    float maxdst = (length(fsize) * STARNEIGHBORHOOD * 0.5);\n    if(t > 0.810 && dstar - 0.05 <= maxdst)\n    {\n       \n        fragColor = mix(fragColor, vec4(0.8), smoothstep(0.6, 0.0,  distance(pointstar , point) / maxdst));\n    }\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"MsjXzG","date":"1413434556","viewed":1059,"name":"RandomTest","username":"bolt304","description":"Space stuff, first shader on shadertoy, fbm was taken from a Inigo Quilez tutorial (but Donosti keeps sucking :D)","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["eye","space","1stshadertoy"],"hasliked":0,"parentid":"","parentname":""}}