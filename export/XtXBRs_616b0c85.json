{"ver":"0.1","info":{"id":"XtXBRs","date":"1512833113","viewed":144,"name":"Conférence Cookie","username":"Flopine","description":"Petit atelier à la cookie demoparty\n\nPour s'amuser et s'entrainer : http://hughsk.io/fragment-foundry/chapters/01-hello-world.html","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","cours"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 moda (vec2 p)\n{\n    float per = 2.*3.14/5.;\n    float angle = atan(p.y, p.x);\n    float l = length(p);\n    \n    angle = mod(angle-per/2.,per)-per/2.;\n    return vec2 (cos(angle), sin(angle))*l;\n}\n\nfloat sphere (vec3 p, float r)\n{\n    return length(p)-r;\n}  \n\nfloat SDF (vec3 p)\n{\n    float per = 2.;\n    //p = mod(p, per)-per/2.;\n    p.xz = moda(p.xz);\n\tp.x -= sin(iTime);\n    return sphere (p,0.2);\n}\n\nvec3 normal (vec3 p)\n{\n\tvec2 eps = vec2 (0.01,0.);\n    return normalize(vec3(SDF(p+eps.xyy) - SDF(p-eps.xyy),\n                         SDF(p+eps.yxy) - SDF(p-eps.yxy),\n                         SDF(p+eps.yyx) - SDF(p-eps.yyx))\n                     );\n}\n\nfloat lighting(vec3 n, vec3 l)\n{\n    return dot(n,l);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*(fragCoord.xy / iResolution.xy)-1.;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    vec3 pos = vec3 (0.001,0.001,-1.);\n    vec3 dir = normalize(vec3 (uv, 1.));\n    vec3 color = vec3(0.);\n    vec3 light = normalize(vec3 (5.,1.,-1.));\n    float shad = 0.;\n    \n    for (int i = 0;i<60; i++)\n    {\n        float d = SDF(pos);\n        if (d<0.01)\n        {\n            //vec3 norm = normal(pos);\n            shad = float(i)/60.;\n            //color = vec3(lighting(norm,light));\n            break;\n        }\n        pos += d*dir;\n    }\n        \n\tfragColor = vec4 (vec3(1.-shad), 1.);\n}","name":"Image","description":"","type":"image"}]}