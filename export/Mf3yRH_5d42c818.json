{"ver":"0.1","info":{"id":"Mf3yRH","date":"1730230343","viewed":73,"name":"RT Twisted Dodecahedron","username":"Kerdek","description":"https://www.shadertoy.com/view/Dls3D2","likes":8,"published":1,"flags":32,"usePreview":0,"tags":["torus","sphere","tiling","reproduction","vesica"],"hasliked":0,"parentid":"4flXz2","parentname":"RT Flower Of Life Sphere"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage(out vec4 o, vec2 u) {\n    o = texelFetch(iChannel0, ivec2(u), 0);\n    o.rgb /= o.a;\n    o.rgb = max(vec3(0.0), o.rgb);\n    o.rgb = srgb_gamma(o.rgb);\n    o.a = 1.0; }","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = 3.14159265359;\n\n\n// Normal of a plan having a dihedral angle of PI/3 with the YZ plan and PI/5 with the XZ plane\nconst float CP = cos(3.1415/5.), SP=sqrt(0.75-CP*CP);\nconst vec3  P35 = vec3(-0.5, -CP, SP);\n\n// below are the directions from the origin limiting the coordniate's domain after folding space\nconst vec3 ICOMIDEDGE = vec3(0,0,1);\nconst vec3 ICOVERTEX  = normalize(vec3(SP,0.0,0.5)); // direction in the XZ plan, you will find the ICO vertex on this line\nconst vec3 ICOMIDFACE = normalize(vec3(0.0,SP,CP));  // direction in the YZ plan, you will find the DODE vertex on this line\n\nvec3 opIcosahedron( vec3 p )\n{    \n\n    p = abs(p);\n    p -= 2.*min(0., dot(p, P35))*P35;\n    p.xy = abs(p.xy);\n    p -= 2.*min(0., dot(p, P35))*P35;\n    p.xy = abs(p.xy);\n    p -= 2.*min(0., dot(p, P35))*P35;\n    return p;\n}   \n\n// Blackle Mori\nvec3 erot(vec3 p, vec3 ax, float ro) {\n    return mix(dot(p,ax)*ax,p,cos(ro))+sin(ro)*cross(ax,p);\n}\n\n// Shane awesome work below\n// Tri-Planar blending function. Based on an old Nvidia tutorial.\nvec3 tex3D( sampler2D tex, in vec3 p, in vec3 n ){\n    \n    //return cellTileColor(p);\n  \n    n = max((abs(n) - 0.2)*7., 0.001); // n = max(abs(n), 0.001), etc.\n    n /= (n.x + n.y + n.z ); \n\treturn (texture(tex, p.yz)*n.x + texture(tex, p.zx)*n.y + texture(tex, p.xy)*n.z).xyz;\n}\n\n// Texture bump mapping. Four tri-planar lookups, or 12 texture lookups in total. I tried to \n// make it as concise as possible. Whether that translates to speed, or not, I couldn't say.\nvec3 texBump( sampler2D tx, in vec3 p, in vec3 n, float bf){\n   \n    const vec2 e = vec2(0.002, 0);\n    \n    // Three gradient vectors rolled into a matrix, constructed with offset greyscale texture values.    \n    mat3 m = mat3( tex3D(tx, p - e.xyy, n), tex3D(tx, p - e.yxy, n), tex3D(tx, p - e.yyx, n));\n    \n    vec3 g = vec3(0.299, 0.587, 0.114)*m; // Converting to greyscale.\n    g = (g - dot(tex3D(tx,  p , n), vec3(0.299, 0.587, 0.114)) )/e.x; g -= n*dot(n, g);\n                      \n    return normalize( n + g*bf ); // Bumped normal. \"bf\" - bump factor.\n\t\n}\n\n// https://cie.co.at/data-tables\n\nconst vec3 srgbcmf2[] = vec3 [](vec3(1.127313E-04, -9.335945E-05, 6.470841E-04), vec3(1.263916E-04, -1.048132E-04, 7.269167E-04), vec3(1.417377E-04, -1.177074E-04, 8.168770E-04), vec3(1.589762E-04, -1.322135E-04, 9.181536E-04), vec3(1.783138E-04, -1.485031E-04, 1.031935E-03), vec3(1.999571E-04, -1.667477E-04, 1.159409E-03), vec3(2.243205E-04, -1.873090E-04, 1.303088E-03), vec3(2.518190E-04, -2.105463E-04, 1.465510E-03), vec3(2.826605E-04, -2.366279E-04, 1.647903E-03), vec3(3.170527E-04, -2.657219E-04, 1.851492E-03), vec3(3.552034E-04, -2.979964E-04, 2.077504E-03), vec3(3.969669E-04, -3.332975E-04, 2.324931E-03), vec3(4.434170E-04, -3.725771E-04, 2.600384E-03), vec3(4.965910E-04, -4.176628E-04, 2.916525E-03), vec3(5.585267E-04, -4.703820E-04, 3.286015E-03), vec3(6.312602E-04, -5.325621E-04, 3.721517E-03), vec3(7.181712E-04, -6.071830E-04, 4.243816E-03), vec3(8.184578E-04, -6.934837E-04, 4.847714E-03), vec3(9.278839E-04, -7.876799E-04, 5.506901E-03), vec3(1.042215E-03, -8.859878E-04, 6.195064E-03), vec3(1.157220E-03, -9.846240E-04, 6.885893E-03), vec3(1.270019E-03, -1.081049E-03, 7.561887E-03), vec3(1.388111E-03, -1.181811E-03, 8.268888E-03), vec3(1.522821E-03, -1.296758E-03, 9.075586E-03), vec3(1.685467E-03, -1.435734E-03, 1.005067E-02), vec3(1.887376E-03, -1.608585E-03, 1.126283E-02), vec3(2.138813E-03, -1.824251E-03, 1.277431E-02), vec3(2.438576E-03, -2.081711E-03, 1.457860E-02), vec3(2.780724E-03, -2.375867E-03, 1.664135E-02), vec3(3.159331E-03, -2.701619E-03, 1.892817E-02), vec3(3.568467E-03, -3.053871E-03, 2.140472E-02), vec3(4.001336E-03, -3.426854E-03, 2.403224E-02), vec3(4.473524E-03, -3.834195E-03, 2.690542E-02), vec3(5.012702E-03, -4.299890E-03, 3.018996E-02), vec3(5.646540E-03, -4.847933E-03, 3.405152E-02), vec3(6.402712E-03, -5.502321E-03, 3.865581E-02), vec3(7.319312E-03, -6.296393E-03, 4.423674E-02), vec3(8.381912E-03, -7.218027E-03, 5.071267E-02), vec3(9.539360E-03, -8.223030E-03, 5.777592E-02), vec3(1.074051E-02, -9.267205E-03, 6.511884E-02), vec3(1.193424E-02, -1.030637E-02, 7.243374E-02), vec3(1.308619E-02, -1.131128E-02, 7.951830E-02), vec3(1.427399E-02, -1.235035E-02, 8.685778E-02), vec3(1.561434E-02, -1.352582E-02, 9.517586E-02), vec3(1.722410E-02, -1.493995E-02, 1.051962E-01), vec3(1.921999E-02, -1.669498E-02, 1.176425E-01), vec3(2.168159E-02, -1.886173E-02, 1.330282E-01), vec3(2.459168E-02, -2.142715E-02, 1.512692E-01), vec3(2.792183E-02, -2.436770E-02, 1.721930E-01), vec3(3.164372E-02, -2.765984E-02, 1.956269E-01), vec3(3.572885E-02, -3.128002E-02, 2.213985E-01), vec3(4.016245E-02, -3.521860E-02, 2.494637E-01), vec3(4.501512E-02, -3.954164E-02, 2.803327E-01), vec3(5.038678E-02, -4.433913E-02, 3.146635E-01), vec3(5.637730E-02, -4.970109E-02, 3.531143E-01), vec3(6.308650E-02, -5.571751E-02, 3.963434E-01), vec3(7.050108E-02, -6.237632E-02, 4.442758E-01), vec3(7.858161E-02, -6.965305E-02, 4.968445E-01), vec3(8.738895E-02, -7.761916E-02, 5.547196E-01), vec3(9.698360E-02, -8.634601E-02, 6.185709E-01), vec3(1.074269E-01, -9.590518E-02, 6.890682E-01), vec3(1.187857E-01, -1.063682E-01, 7.668292E-01), vec3(1.308091E-01, -1.175104E-01, 8.502860E-01), vec3(1.430797E-01, -1.289583E-01, 9.368304E-01), vec3(1.551798E-01, -1.403382E-01, 1.023854E+00), vec3(1.666917E-01, -1.512767E-01, 1.108749E+00), vec3(1.773906E-01, -1.615716E-01, 1.190115E+00), vec3(1.872780E-01, -1.712303E-01, 1.268064E+00), vec3(1.962786E-01, -1.801950E-01, 1.342258E+00), vec3(2.043160E-01, -1.884073E-01, 1.412358E+00), vec3(2.113147E-01, -1.958090E-01, 1.478026E+00), vec3(2.171695E-01, -2.023169E-01, 1.538729E+00), vec3(2.218592E-01, -2.079014E-01, 1.594219E+00), vec3(2.254343E-01, -2.125853E-01, 1.644589E+00), vec3(2.279453E-01, -2.163913E-01, 1.689929E+00), vec3(2.294428E-01, -2.193423E-01, 1.730331E+00), vec3(2.299345E-01, -2.214340E-01, 1.765770E+00), vec3(2.294192E-01, -2.226784E-01, 1.796332E+00), vec3(2.279337E-01, -2.231230E-01, 1.822277E+00), vec3(2.255138E-01, -2.228150E-01, 1.843863E+00), vec3(2.221965E-01, -2.218021E-01, 1.861350E+00), vec3(2.180095E-01, -2.201137E-01, 1.874884E+00), vec3(2.129854E-01, -2.177788E-01, 1.884771E+00), vec3(2.071663E-01, -2.148438E-01, 1.891507E+00), vec3(2.005938E-01, -2.113549E-01, 1.895590E+00), vec3(1.933103E-01, -2.073586E-01, 1.897516E+00), vec3(1.853384E-01, -2.028751E-01, 1.897503E+00), vec3(1.767124E-01, -1.979321E-01, 1.895724E+00), vec3(1.674915E-01, -1.925871E-01, 1.892609E+00), vec3(1.577348E-01, -1.868976E-01, 1.888589E+00), vec3(1.475021E-01, -1.809212E-01, 1.884095E+00), vec3(1.368543E-01, -1.747081E-01, 1.879480E+00), vec3(1.257756E-01, -1.682208E-01, 1.874452E+00), vec3(1.142092E-01, -1.613849E-01, 1.868469E+00), vec3(1.020979E-01, -1.541260E-01, 1.860990E+00), vec3(8.938536E-02, -1.463699E-01, 1.851473E+00), vec3(7.604239E-02, -1.380691E-01, 1.839614E+00), vec3(6.213436E-02, -1.292456E-01, 1.825427E+00), vec3(4.774662E-02, -1.199292E-01, 1.808853E+00), vec3(3.296404E-02, -1.101495E-01, 1.789831E+00), vec3(1.787136E-02, -9.993632E-02, 1.768302E+00), vec3(2.543948E-03, -8.933741E-02, 1.744484E+00), vec3(-1.303481E-02, -7.829617E-02, 1.718044E+00), vec3(-2.891598E-02, -6.668620E-02, 1.688094E+00), vec3(-4.515239E-02, -5.438062E-02, 1.653746E+00), vec3(-6.179508E-02, -4.125302E-02, 1.614112E+00), vec3(-7.887373E-02, -2.721691E-02, 1.568524E+00), vec3(-9.627513E-02, -1.239897E-02, 1.518003E+00), vec3(-1.138364E-01, 3.007463E-03, 1.464200E+00), vec3(-1.313948E-01, 1.880918E-02, 1.408768E+00), vec3(-1.487881E-01, 3.481304E-02, 1.353357E+00), vec3(-1.659234E-01, 5.091481E-02, 1.298853E+00), vec3(-1.828180E-01, 6.714807E-02, 1.244979E+00), vec3(-1.994756E-01, 8.352665E-02, 1.191645E+00), vec3(-2.158987E-01, 1.000638E-01, 1.138760E+00), vec3(-2.320908E-01, 1.167732E-01, 1.086233E+00), vec3(-2.480391E-01, 1.336579E-01, 1.034253E+00), vec3(-2.637234E-01, 1.506699E-01, 9.831476E-01), vec3(-2.791354E-01, 1.677469E-01, 9.330348E-01), vec3(-2.942663E-01, 1.848262E-01, 8.840316E-01), vec3(-3.091075E-01, 2.018455E-01, 8.362553E-01), vec3(-3.236736E-01, 2.187759E-01, 7.897854E-01), vec3(-3.379970E-01, 2.356807E-01, 7.447449E-01), vec3(-3.520956E-01, 2.526353E-01, 7.013151E-01), vec3(-3.659880E-01, 2.697157E-01, 6.596776E-01), vec3(-3.796925E-01, 2.869975E-01, 6.200140E-01), vec3(-3.932056E-01, 3.045142E-01, 5.824565E-01), vec3(-4.066231E-01, 3.223184E-01, 5.469220E-01), vec3(-4.201124E-01, 3.405138E-01, 5.132692E-01), vec3(-4.338408E-01, 3.592045E-01, 4.813564E-01), vec3(-4.479755E-01, 3.784944E-01, 4.510421E-01), vec3(-4.626346E-01, 3.984814E-01, 4.222628E-01), vec3(-4.778031E-01, 4.191867E-01, 3.949971E-01), vec3(-4.934481E-01, 4.405990E-01, 3.691669E-01), vec3(-5.095375E-01, 4.627076E-01, 3.446947E-01), vec3(-5.260385E-01, 4.855010E-01, 3.215025E-01), vec3(-5.428768E-01, 5.089259E-01, 2.995044E-01), vec3(-5.601270E-01, 5.330939E-01, 2.786172E-01), vec3(-5.779799E-01, 5.582418E-01, 2.587672E-01), vec3(-5.966258E-01, 5.846061E-01, 2.398810E-01), vec3(-6.162559E-01, 6.124238E-01, 2.218849E-01), vec3(-6.369976E-01, 6.418559E-01, 2.047460E-01), vec3(-6.585752E-01, 6.726950E-01, 1.883415E-01), vec3(-6.805742E-01, 7.046258E-01, 1.724623E-01), vec3(-7.025796E-01, 7.373321E-01, 1.569000E-01), vec3(-7.241769E-01, 7.704984E-01, 1.414456E-01), vec3(-7.451008E-01, 8.039106E-01, 1.259703E-01), vec3(-7.653536E-01, 8.376087E-01, 1.105310E-01), vec3(-7.849221E-01, 8.716592E-01, 9.519703E-02), vec3(-8.037929E-01, 9.061282E-01, 8.003801E-02), vec3(-8.219525E-01, 9.410819E-01, 6.512341E-02), vec3(-8.393208E-01, 9.764874E-01, 5.045077E-02), vec3(-8.556724E-01, 1.012085E+00, 3.604812E-02), vec3(-8.707763E-01, 1.047603E+00, 2.203101E-02), vec3(-8.844015E-01, 1.082766E+00, 8.514857E-03), vec3(-8.963172E-01, 1.117302E+00, -4.385030E-03), vec3(-9.064160E-01, 1.151106E+00, -1.661994E-02), vec3(-9.145960E-01, 1.184016E+00, -2.819467E-02), vec3(-9.206344E-01, 1.215669E+00, -3.907404E-02), vec3(-9.243083E-01, 1.245705E+00, -4.922277E-02), vec3(-9.253947E-01, 1.273763E+00, -5.860562E-02), vec3(-9.237279E-01, 1.299561E+00, -6.717781E-02), vec3(-9.194236E-01, 1.323231E+00, -7.500001E-02), vec3(-9.126816E-01, 1.345033E+00, -8.219503E-02), vec3(-9.037012E-01, 1.365226E+00, -8.888570E-02), vec3(-8.926821E-01, 1.384069E+00, -9.519482E-02), vec3(-8.796895E-01, 1.401660E+00, -1.011843E-01), vec3(-8.647538E-01, 1.417908E+00, -1.068469E-01), vec3(-8.480229E-01, 1.432786E+00, -1.122020E-01), vec3(-8.296450E-01, 1.446270E+00, -1.172688E-01), vec3(-8.097681E-01, 1.458336E+00, -1.220665E-01), vec3(-7.885009E-01, 1.468989E+00, -1.266250E-01), vec3(-7.658532E-01, 1.478288E+00, -1.309563E-01), vec3(-7.418241E-01, 1.486284E+00, -1.350531E-01), vec3(-7.164135E-01, 1.493032E+00, -1.389082E-01), vec3(-6.896207E-01, 1.498585E+00, -1.425143E-01), vec3(-6.614795E-01, 1.502983E+00, -1.458760E-01), vec3(-6.320166E-01, 1.506227E+00, -1.490034E-01), vec3(-6.012162E-01, 1.508312E+00, -1.518968E-01), vec3(-5.690626E-01, 1.509234E+00, -1.545567E-01), vec3(-5.355401E-01, 1.508987E+00, -1.569836E-01), vec3(-5.006487E-01, 1.507585E+00, -1.591805E-01), vec3(-4.644169E-01, 1.505056E+00, -1.611537E-01), vec3(-4.268721E-01, 1.501418E+00, -1.629082E-01), vec3(-3.880421E-01, 1.496690E+00, -1.644493E-01), vec3(-3.479546E-01, 1.490890E+00, -1.657821E-01), vec3(-3.066269E-01, 1.484021E+00, -1.669096E-01), vec3(-2.640689E-01, 1.476115E+00, -1.678400E-01), vec3(-2.202952E-01, 1.467226E+00, -1.685862E-01), vec3(-1.753211E-01, 1.457409E+00, -1.691611E-01), vec3(-1.291623E-01, 1.446721E+00, -1.695779E-01), vec3(-8.178414E-02, 1.435126E+00, -1.698379E-01), vec3(-3.322993E-02, 1.422644E+00, -1.699462E-01), vec3(1.647723E-02, 1.409282E+00, -1.699071E-01), vec3(6.731900E-02, 1.395040E+00, -1.697244E-01), vec3(1.192826E-01, 1.379913E+00, -1.694011E-01), vec3(1.723716E-01, 1.363885E+00, -1.689388E-01), vec3(2.265535E-01, 1.346947E+00, -1.683397E-01), vec3(2.817685E-01, 1.329091E+00, -1.676064E-01), vec3(3.379604E-01, 1.310306E+00, -1.667407E-01), vec3(3.950782E-01, 1.290572E+00, -1.657441E-01), vec3(4.530904E-01, 1.269858E+00, -1.646158E-01), vec3(5.119055E-01, 1.248253E+00, -1.633665E-01), vec3(5.714813E-01, 1.225795E+00, -1.620011E-01), vec3(6.317760E-01, 1.202521E+00, -1.605242E-01), vec3(6.927480E-01, 1.178470E+00, -1.589408E-01), vec3(7.543417E-01, 1.153676E+00, -1.572557E-01), vec3(8.164712E-01, 1.128159E+00, -1.554717E-01), vec3(8.790492E-01, 1.101937E+00, -1.535900E-01), vec3(9.419879E-01, 1.075027E+00, -1.516121E-01), vec3(1.005200E+00, 1.047450E+00, -1.495393E-01), vec3(1.068595E+00, 1.019229E+00, -1.473743E-01), vec3(1.132079E+00, 9.904111E-01, -1.451228E-01), vec3(1.195562E+00, 9.610470E-01, -1.427911E-01), vec3(1.258952E+00, 9.311876E-01, -1.403853E-01), vec3(1.322155E+00, 9.008838E-01, -1.379118E-01), vec3(1.385085E+00, 8.701851E-01, -1.353755E-01), vec3(1.447610E+00, 8.391317E-01, -1.327810E-01), vec3(1.509572E+00, 8.077605E-01, -1.301333E-01), vec3(1.570813E+00, 7.761082E-01, -1.274373E-01), vec3(1.631175E+00, 7.442114E-01, -1.246980E-01), vec3(1.690527E+00, 7.121119E-01, -1.219200E-01), vec3(1.748767E+00, 6.798771E-01, -1.191085E-01), vec3(1.805788E+00, 6.475815E-01, -1.162701E-01), vec3(1.861481E+00, 6.153001E-01, -1.134109E-01), vec3(1.915737E+00, 5.831081E-01, -1.105374E-01), vec3(1.968406E+00, 5.510737E-01, -1.076565E-01), vec3(2.019379E+00, 5.192531E-01, -1.047715E-01), vec3(2.068605E+00, 4.877034E-01, -1.018832E-01), vec3(2.116035E+00, 4.564816E-01, -9.899258E-02), vec3(2.161619E+00, 4.256442E-01, -9.610039E-02), vec3(2.205355E+00, 3.952283E-01, -9.320728E-02), vec3(2.247016E+00, 3.653102E-01, -9.032203E-02), vec3(2.286212E+00, 3.360053E-01, -8.745773E-02), vec3(2.322551E+00, 3.074293E-01, -8.462748E-02), vec3(2.355643E+00, 2.796983E-01, -8.184441E-02), vec3(2.385179E+00, 2.529122E-01, -7.911832E-02), vec3(2.411291E+00, 2.270562E-01, -7.644707E-02), vec3(2.434250E+00, 2.020731E-01, -7.382581E-02), vec3(2.454327E+00, 1.779059E-01, -7.124969E-02), vec3(2.471793E+00, 1.544974E-01, -6.871386E-02), vec3(2.486810E+00, 1.318213E-01, -6.621644E-02), vec3(2.499142E+00, 1.099528E-01, -6.376390E-02), vec3(2.508465E+00, 8.898728E-02, -6.136401E-02), vec3(2.514454E+00, 6.902014E-02, -5.902449E-02), vec3(2.516787E+00, 5.014650E-02, -5.675308E-02), vec3(2.515281E+00, 3.242012E-02, -5.455461E-02), vec3(2.510147E+00, 1.580008E-02, -5.242557E-02), vec3(2.501651E+00, 2.409702E-04, -5.036125E-02), vec3(2.490061E+00, -1.430293E-02, -4.835691E-02), vec3(2.475644E+00, -2.787763E-02, -4.640780E-02), vec3(2.458524E+00, -4.050184E-02, -4.451170E-02), vec3(2.438652E+00, -5.217302E-02, -4.267014E-02), vec3(2.416041E+00, -6.290465E-02, -4.088408E-02), vec3(2.390702E+00, -7.271016E-02, -3.915446E-02), vec3(2.362647E+00, -8.160284E-02, -3.748224E-02), vec3(2.332006E+00, -8.960488E-02, -3.586778E-02), vec3(2.298837E+00, -9.674343E-02, -3.430864E-02), vec3(2.263040E+00, -1.030396E-01, -3.280152E-02), vec3(2.224515E+00, -1.085144E-01, -3.134317E-02), vec3(2.183162E+00, -1.131888E-01, -2.993031E-02), vec3(2.138985E+00, -1.170885E-01, -2.856103E-02), vec3(2.092322E+00, -1.202583E-01, -2.723575E-02), vec3(2.043580E+00, -1.227489E-01, -2.595460E-02), vec3(1.993169E+00, -1.246110E-01, -2.471774E-02), vec3(1.941496E+00, -1.258955E-01, -2.352532E-02), vec3(1.888731E+00, -1.266336E-01, -2.237612E-02), vec3(1.835119E+00, -1.268719E-01, -2.126993E-02), vec3(1.781178E+00, -1.266850E-01, -2.020835E-02), vec3(1.727426E+00, -1.261471E-01, -1.919298E-02), vec3(1.674379E+00, -1.253323E-01, -1.822547E-02), vec3(1.622437E+00, -1.242991E-01, -1.730664E-02), vec3(1.571505E+00, -1.230536E-01, -1.643371E-02), vec3(1.521356E+00, -1.215911E-01, -1.560290E-02), vec3(1.471761E+00, -1.199070E-01, -1.481042E-02), vec3(1.422494E+00, -1.179971E-01, -1.405246E-02), vec3(1.373536E+00, -1.158760E-01, -1.332694E-02), vec3(1.325033E+00, -1.135714E-01, -1.263340E-02), vec3(1.277005E+00, -1.110982E-01, -1.197045E-02), vec3(1.229469E+00, -1.084710E-01, -1.133672E-02), vec3(1.182445E+00, -1.057045E-01, -1.073083E-02), vec3(1.135944E+00, -1.028140E-01, -1.015115E-02), vec3(1.090028E+00, -9.981636E-02, -9.596884E-03), vec3(1.044795E+00, -9.672766E-02, -9.067950E-03), vec3(1.000341E+00, -9.356435E-02, -8.564254E-03), vec3(9.567625E-01, -9.034315E-02, -8.085670E-03), vec3(9.140990E-01, -8.707513E-02, -7.631671E-03), vec3(8.724007E-01, -8.377818E-02, -7.200966E-03), vec3(8.317810E-01, -8.047815E-02, -6.792405E-03), vec3(7.923530E-01, -7.720093E-02, -6.404826E-03), vec3(7.542297E-01, -7.397255E-02, -6.037050E-03), vec3(7.174977E-01, -7.081290E-02, -5.687499E-03), vec3(6.821161E-01, -6.772247E-02, -5.356688E-03), vec3(6.480060E-01, -6.469796E-02, -5.043423E-03), vec3(6.150882E-01, -6.173598E-02, -4.746524E-03), vec3(5.832837E-01, -5.883315E-02, -4.464810E-03), vec3(5.525690E-01, -5.599348E-02, -4.197302E-03), vec3(5.229613E-01, -5.322388E-02, -3.943484E-03), vec3(4.944434E-01, -5.052562E-02, -3.702843E-03), vec3(4.669975E-01, -4.789990E-02, -3.474872E-03), vec3(4.406057E-01, -4.534781E-02, -3.259070E-03), vec3(4.152519E-01, -4.287098E-02, -3.054902E-03), vec3(3.909333E-01, -4.047338E-02, -2.861817E-03), vec3(3.676544E-01, -3.816022E-02, -2.679254E-03), vec3(3.454195E-01, -3.593660E-02, -2.506657E-03), vec3(3.242323E-01, -3.380752E-02, -2.343480E-03), vec3(3.040693E-01, -3.177450E-02, -2.189048E-03), vec3(2.849291E-01, -2.983837E-02, -2.043231E-03), vec3(2.668509E-01, -2.800362E-02, -1.906266E-03), vec3(2.498742E-01, -2.627477E-02, -1.778383E-03), vec3(2.340380E-01, -2.465626E-02, -1.659820E-03), vec3(2.193497E-01, -2.314998E-02, -1.550489E-03), vec3(2.057325E-01, -2.174951E-02, -1.449636E-03), vec3(1.930996E-01, -2.044691E-02, -1.356494E-03), vec3(1.813641E-01, -1.923423E-02, -1.270296E-03), vec3(1.704391E-01, -1.810348E-02, -1.190280E-03), vec3(1.602979E-01, -1.705297E-02, -1.116116E-03), vec3(1.508736E-01, -1.607578E-02, -1.047312E-03), vec3(1.420191E-01, -1.515619E-02, -9.828534E-04), vec3(1.335871E-01, -1.427846E-02, -9.217242E-04), vec3(1.254305E-01, -1.342685E-02, -8.629110E-04), vec3(1.174393E-01, -1.259004E-02, -8.056016E-04), vec3(1.096530E-01, -1.177255E-02, -7.500272E-04), vec3(1.021484E-01, -1.098251E-02, -6.967327E-04), vec3(9.500256E-02, -1.022805E-02, -6.462583E-04), vec3(8.829232E-02, -9.517274E-03, -5.991500E-04), vec3(8.203211E-02, -8.851708E-03, -5.555099E-04), vec3(7.617779E-02, -8.227100E-03, -5.149744E-04), vec3(7.071848E-02, -7.642931E-03, -4.773879E-04), vec3(6.564327E-02, -7.098648E-03, -4.425979E-04), vec3(6.094121E-02, -6.593712E-03, -4.104500E-04), vec3(5.660647E-02, -6.127880E-03, -3.808564E-04), vec3(5.262366E-02, -5.699485E-03, -3.537132E-04), vec3(4.896744E-02, -5.305849E-03, -3.288424E-04), vec3(4.561254E-02, -4.944299E-03, -3.060656E-04), vec3(4.253371E-02, -4.612173E-03, -2.852040E-04), vec3(3.971720E-02, -4.308141E-03, -2.661454E-04), vec3(3.714224E-02, -4.030052E-03, -2.487379E-04), vec3(3.477292E-02, -3.773977E-03, -2.327449E-04), vec3(3.257283E-02, -3.535837E-03, -2.179389E-04), vec3(3.050490E-02, -3.311359E-03, -2.041028E-04), vec3(2.854500E-02, -3.098607E-03, -1.909896E-04), vec3(2.669066E-02, -2.897316E-03, -1.785825E-04), vec3(2.494395E-02, -2.707708E-03, -1.668956E-04), vec3(2.330697E-02, -2.530010E-03, -1.559428E-04), vec3(2.178178E-02, -2.364448E-03, -1.457380E-04), vec3(2.036242E-02, -2.210375E-03, -1.362413E-04), vec3(1.903675E-02, -2.066471E-03, -1.273716E-04), vec3(1.779758E-02, -1.931956E-03, -1.190804E-04), vec3(1.663770E-02, -1.806050E-03, -1.113199E-04), vec3(1.554991E-02, -1.687968E-03, -1.040417E-04), vec3(1.452803E-02, -1.577042E-03, -9.720444E-05), vec3(1.356866E-02, -1.472901E-03, -9.078545E-05), vec3(1.266883E-02, -1.375222E-03, -8.476490E-05), vec3(1.182557E-02, -1.283685E-03, -7.912281E-05), vec3(1.103590E-02, -1.197966E-03, -7.383925E-05), vec3(1.029593E-02, -1.117641E-03, -6.888823E-05), vec3(9.602632E-03, -1.042382E-03, -6.424951E-05), vec3(8.954338E-03, -9.720082E-04, -5.991192E-05), vec3(8.349386E-03, -9.063396E-04, -5.586430E-05), vec3(7.786111E-03, -8.451953E-04, -5.209549E-05), vec3(7.262497E-03, -7.883560E-04, -4.859209E-05), vec3(6.775542E-03, -7.354962E-04, -4.533398E-05), vec3(6.322092E-03, -6.862735E-04, -4.230002E-05), vec3(5.898988E-03, -6.403447E-04, -3.946912E-05), vec3(5.503077E-03, -5.973682E-04, -3.682012E-05), vec3(5.131862E-03, -5.570720E-04, -3.433640E-05), vec3(4.784032E-03, -5.193144E-04, -3.200914E-05), vec3(4.458207E-03, -4.839460E-04, -2.982906E-05), vec3(4.152998E-03, -4.508148E-04, -2.778699E-05), vec3(3.867026E-03, -4.197719E-04, -2.587362E-05), vec3(3.598668E-03, -3.906416E-04, -2.407804E-05), vec3(3.346858E-03, -3.633068E-04, -2.239325E-05), vec3(3.111061E-03, -3.377106E-04, -2.081559E-05), vec3(2.890741E-03, -3.137951E-04, -1.934140E-05), vec3(2.685353E-03, -2.914995E-04, -1.796722E-05), vec3(2.494110E-03, -2.707397E-04, -1.668765E-05), vec3(2.316055E-03, -2.514116E-04, -1.549631E-05), vec3(2.150406E-03, -2.334301E-04, -1.438799E-05), vec3(1.996382E-03, -2.167106E-04, -1.335744E-05), vec3(1.853198E-03, -2.011678E-04, -1.239942E-05), vec3(1.720098E-03, -1.867195E-04, -1.150887E-05), vec3(1.596529E-03, -1.733058E-04, -1.068210E-05), vec3(1.482026E-03, -1.608764E-04, -9.915975E-06), vec3(1.376122E-03, -1.493804E-04, -9.207395E-06), vec3(1.278350E-03, -1.387670E-04, -8.553214E-06), vec3(1.188204E-03, -1.289815E-04, -7.950067E-06), vec3(1.105110E-03, -1.199616E-04, -7.394096E-06), vec3(1.028492E-03, -1.116445E-04, -6.881462E-06), vec3(9.577772E-04, -1.039683E-04, -6.408315E-06), vec3(8.923909E-04, -9.687054E-05, -5.970829E-06), vec3(8.318533E-04, -9.029906E-05, -5.565784E-06), vec3(7.758031E-04, -8.421475E-05, -5.190758E-06), vec3(7.238451E-04, -7.857461E-05, -4.843118E-06), vec3(6.755836E-04, -7.333575E-05, -4.520209E-06), vec3(6.306229E-04, -6.845517E-05, -4.219386E-06), vec3(5.885813E-04, -6.389146E-05, -3.938096E-06), vec3(5.492518E-04, -5.962221E-05, -3.674945E-06), vec3(5.125000E-04, -5.563273E-05, -3.429048E-06), vec3(4.781927E-04, -5.190862E-05, -3.199502E-06), vec3(4.461953E-04, -4.843522E-05, -2.985417E-06), vec3(4.163141E-04, -4.519157E-05, -2.785487E-06), vec3(3.883805E-04, -4.215938E-05, -2.598583E-06), vec3(3.622988E-04, -3.932813E-05, -2.424078E-06), vec3(3.379741E-04, -3.668764E-05, -2.261327E-06), vec3(3.153113E-04, -3.422754E-05, -2.109696E-06), vec3(2.941994E-04, -3.193585E-05, -1.968434E-06), vec3(2.745228E-04, -2.979994E-05, -1.836780E-06), vec3(2.561807E-04, -2.780885E-05, -1.714060E-06), vec3(2.390727E-04, -2.595174E-05, -1.599593E-06), vec3(2.230977E-04, -2.421763E-05, -1.492707E-06), vec3(2.081595E-04, -2.259606E-05, -1.392758E-06), vec3(1.941959E-04, -2.108029E-05, -1.299330E-06), vec3(1.811571E-04, -1.966490E-05, -1.212091E-06), vec3(1.689936E-04, -1.834454E-05, -1.130706E-06), vec3(1.576557E-04, -1.711379E-05, -1.054847E-06), vec3(1.470850E-04, -1.596632E-05, -9.841196E-07), vec3(1.372263E-04, -1.489614E-05, -9.181571E-07), vec3(1.280348E-04, -1.389839E-05, -8.566582E-07), vec3(1.194658E-04, -1.296821E-05, -7.993245E-07), vec3(1.114745E-04, -1.210074E-05, -7.458563E-07), vec3(1.040177E-04, -1.129130E-05, -6.959637E-07), vec3(9.705902E-05, -1.053592E-05, -6.494051E-07), vec3(9.056414E-05, -9.830888E-06, -6.059487E-07), vec3(8.449856E-05, -9.172460E-06, -5.653649E-07), vec3(7.882785E-05, -8.556894E-06, -5.274234E-07), vec3(7.351722E-05, -7.980417E-06, -4.918907E-07), vec3(6.854530E-05, -7.440704E-06, -4.586248E-07), vec3(6.389788E-05, -6.936221E-06, -4.275294E-07), vec3(5.956066E-05, -6.465411E-06, -3.985095E-07), vec3(5.551934E-05, -6.026714E-06, -3.714705E-07), vec3(5.175544E-05, -5.618137E-06, -3.462868E-07), vec3(4.824857E-05, -5.237464E-06, -3.228225E-07), vec3(4.498170E-05, -4.882838E-06, -3.009646E-07), vec3(4.193789E-05, -4.552428E-06, -2.805988E-07), vec3(3.910010E-05, -4.244380E-06, -2.616120E-07), vec3(3.645248E-05, -3.956981E-06, -2.438967E-07), vec3(3.398315E-05, -3.688929E-06, -2.273750E-07), vec3(3.168133E-05, -3.439064E-06, -2.119739E-07), vec3(2.953619E-05, -3.206200E-06, -1.976216E-07), vec3(2.753695E-05, -2.989181E-06, -1.842449E-07), vec3(2.567232E-05, -2.786774E-06, -1.717690E-07), vec3(2.393320E-05, -2.597989E-06, -1.601328E-07), vec3(2.231200E-05, -2.422005E-06, -1.492857E-07), vec3(2.080118E-05, -2.258002E-06, -1.391770E-07), vec3(1.939314E-05, -2.105157E-06, -1.297561E-07), vec3(1.807999E-05, -1.962613E-06, -1.209700E-07), vec3(1.685526E-05, -1.829667E-06, -1.127756E-07), vec3(1.571361E-05, -1.705739E-06, -1.051370E-07), vec3(1.464966E-05, -1.590245E-06, -9.801830E-08), vec3(1.365804E-05, -1.482603E-06, -9.138355E-08), vec3(1.273315E-05, -1.382205E-06, -8.519526E-08), vec3(1.187050E-05, -1.288562E-06, -7.942337E-08), vec3(1.106632E-05, -1.201267E-06, -7.404275E-08), vec3(1.031689E-05, -1.119915E-06, -6.902847E-08), vec3(9.618487E-06, -1.044103E-06, -6.435558E-08), vec3(8.967188E-06, -9.734030E-07, -5.999791E-08), vec3(8.359790E-06, -9.074688E-07, -5.593391E-08), vec3(7.793614E-06, -8.460098E-07, -5.214570E-08), vec3(7.265980E-06, -7.887344E-07, -4.861536E-08), vec3(6.774213E-06, -7.353520E-07, -4.532508E-08), vec3(6.315534E-06, -6.855617E-07, -4.225613E-08), vec3(5.887706E-06, -6.391203E-07, -3.939361E-08), vec3(5.488876E-06, -5.958267E-07, -3.672510E-08), vec3(5.117191E-06, -5.554797E-07, -3.423822E-08), vec3(4.770795E-06, -5.178776E-07, -3.192057E-08), vec3(4.447747E-06, -4.828104E-07, -2.975908E-08), vec3(4.146454E-06, -4.501045E-07, -2.774319E-08), vec3(3.865600E-06, -4.196176E-07, -2.586402E-08), vec3(3.603865E-06, -3.912058E-07, -2.411279E-08), vec3(3.359925E-06, -3.647253E-07, -2.248069E-08));\n\n// integer domain SRGB Color Matching Functions\nvec3 srgbcmfi(\n  int l) {\n  return l >= 360 && l <= 830 ? srgbcmf2[l - 360] : vec3(0.0); }\n\n// SRGB Color Matching Functions\nvec3 srgbcmf(\n  float l) {\n  return srgbcmfi(int(l)); }\n\n// SRGB Color Matching Functions\nvec3 srgbcmf(\n  vec3 l,\n  vec3 c) {\n  return \n    srgbcmf(l.x) * c.x +\n    srgbcmf(l.y) * c.y +\n    srgbcmf(l.z) * c.z; }\n\n// color math\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_gamma(\n  float v) {\n  return v <= 0.0031308\n    ? v * 12.92\n    : 1.055 * pow(v, 0.41666666666) - 0.055; }\n\nvec3 srgb_gamma(\n  vec3 v) {\n  return vec3(\n    srgb_gamma(v.r),\n    srgb_gamma(v.g),\n    srgb_gamma(v.b)); }\n\n// linear sRGB component to nonlinear sR'G'B' component\nfloat srgb_igamma(\n  float v) {\n  return v <= 0.04045\n    ? v * 0.0773993808\n    : pow((v + 0.055) * 0.94786729857, 2.4) ; }\n\nvec3 srgb_igamma(\n  vec3 v) {\n  return vec3(\n    srgb_igamma(v.r),\n    srgb_igamma(v.g),\n    srgb_igamma(v.b)); }\n\n//\n// math lib\n//\n\n// needed to produce infinities\nfloat zero = 0.0;\n\nconst float inv_4pi = 0.07957747154;\nconst float pi = acos(-1.0);\n\n// vector lib\n\n// handy nil vector\nconst vec4 nil = vec4(0.0);\n\n// basis vectors\nconst vec4 dx = vec4(1.0, nil.xyz);\nconst vec4 dy = dx.wxyz;\nconst vec4 dz = dy.wxyz;\nconst vec4 dw = dz.wxyz;\n\nvec2 dir2(\n  float a) {\n  return vec2(cos(a), sin(a)); }\n\n// transformation matrices\n\nmat4 translate(\n  vec4 by) {\n  return mat4(dx, dy, dz, dw + by); }\n\nmat4 scale(\n  float by) {\n  return mat4(by * dx, by * dy, by * dz, dw); }\n\nmat4 rotate(\n  vec4 axis,\n  float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  vec4 l = (1.0 - c) * axis;\n  vec3 m = l.xyz * axis.yzx;\n  vec4 n = s * axis;\n  return mat4(\n    l.x * axis.x, m.x - n.z, m.z + n.y, 0.0,\n    m.x + n.z, l.y * axis.y, m.y - n.x, 0.0,\n    m.z - n.y, m.y + n.x, l.z * axis.z, 0.0,\n    nil) + scale(c); }\n\nmat3 rotate(\n  vec3 axis,\n  float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  vec3 l = (1.0 - c) * axis;\n  vec3 m = l.xyz * axis.yzx;\n  vec3 n = s * axis;\n  l *= axis;\n  l += c;\n  return mat3(\n    l.x, m.x - n.z, m.z + n.y,\n    m.x + n.z, l.y, m.y - n.x,\n    m.z - n.y, m.y + n.x, l.z); }\n\n// vector projection\nvec3 projectu(\n  vec3 v,\n  vec3 u) {\n  return u * dot(v, u); }\n\n// vector rejection\nvec3 rejectu(\n  vec3 v,\n  vec3 u) {\n  return v - projectu(v, u); }\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat smax( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*0.25/k;\n}\n\n// functions with partial derivatives\n\nfloat clampe(\n  float v) {\n  return clamp(v, -0.5, 0.5); }\n\nfloat clampp(\n  float v) {\n  return v <= -0.5 || v >= 0.5 ? 0.0 : 1.0; }\n\nfloat sine(\n  float v) {\n  return sin(v); }\n\nfloat sinp(\n  float v) {\n  return cos(v); }\n\nfloat cose(\n  float v) {\n  return cos(v); }\n  \nfloat cosp(\n  float v) {\n  return -sin(v); }\n\nfloat acose(\n  float v) {\n  return acos(v); }\n\nfloat acosp(\n  float v) {\n  return -1.0 / sqrt(1.0 - pow(v, 2.0)); }\n\nfloat atane(\n  float n,\n  float d) {\n  return atan(n, d); }\n\nfloat atanp(\n  float n,\n  float d) {\n  return 1.0 / (pow(n / d, 2.0) + 1.0); }\n\nfloat loge(\n  float v) {\n  return log(v); }\n\nfloat logp(\n  float v) {\n  return 1.0 / v; }\n\nfloat logistice(\n  float v) {\n  return 1.0 / (1.0 + exp(-v)); }\n\nfloat logisticp(\n  float v) {\n  float q = 1.0 / (1.0 + exp(v));\n  return q - q * q; }\n\nfloat sqrte(\n  float v) {\n  return sqrt(v); }\n\nfloat sqrtp(\n  float v) {\n  return 0.5 * pow(v, -0.5); }\n  \nfloat powe(\n  float v,\n  float p) {\n  return (v < 0.0 ? -1.0 + 2.0 * floor(2.0 * fract(p / 2.0)) : 1.0) * pow(abs(v), p); }  \n  \nfloat powp(\n  float v,\n  float p) {\n  return (v < 0.0 ? -1.0 + 2.0 * floor(2.0 * fract(p / 2.0)) : 1.0) * p * pow(abs(v), p - 1.0); }\n\n// functions with gradients\n\nvec4 constg(float c) {\n  return vec4(nil.www, c); }\n\nmat4 constg(vec3 c) {\n  return mat4(\n    constg(c.x),\n    constg(c.y),\n    constg(c.z),\n    nil); }\n\nmat4 ivg(vec3 c) {\n  return mat4(\n    dx.xyz, c.x,\n    dy.xyz, c.y,\n    dz.xyz, c.z,\n    nil); }\n\nvec4 prodg(vec4 p, vec4 q) {\n  return vec4(\n    p.w * q.x + p.x * q.w,\n    p.w * q.y + p.y * q.w,\n    p.w * q.z + p.z * q.w,\n    p.w * q.w); }\n\nmat4 scaleg(vec4 s, mat4 p) {\n  return mat4(\n    prodg(s, p[0]),\n    prodg(s, p[1]),\n    prodg(s, p[2]),\n    nil); }\n\nvec4 dotg(mat4 p, mat4 q) {\n  return prodg(p[0], q[0]) +\n    prodg(p[1], q[1]) +\n    prodg(p[2], q[2]); }\n\nvec4 sqrtg(vec4 p) {\n  return vec4(\n    sqrtp(p.w) * p.xyz,\n    sqrte(p.w)); }\n\nmat4 sqrtg(mat4 p) {\n  return mat4(\n    sqrtg(p[0]),\n    sqrtg(p[1]),\n    sqrtg(p[2]),\n    nil); }\n\nvec4 powg(vec4 p, float c) {\n  return vec4(\n    powp(p.w, c) * p.xyz,\n    powe(p.w, c)); }\n\nmat4 powg(mat4 p, float c) {\n  return mat4(\n    powg(p[0], c),\n    powg(p[1], c),\n    powg(p[2], c),\n    nil); }\n\nvec4 maxg(vec4 p, vec4 q) {\n  return p.w > q.w ? p : q; }\n  \nvec4 ming(vec4 p, vec4 q) {\n  return p.w < q.w ? p : q; }\n\nmat4 maxg(mat4 p, mat4 q) {\n  return mat4(\n    maxg(p[0], q[0]),\n    maxg(p[1], q[1]),\n    maxg(p[2], q[2]),\n    nil); }\n  \nmat4 ming(mat4 p, mat4 q) {\n  return mat4(\n    ming(p[0], q[0]),\n    ming(p[1], q[1]),\n    ming(p[2], q[2]),\n    nil); }\n\nvec4 clampg(\n  vec4 v) {\n  return vec4(\n    clampp(v.w) * v.xyz,\n    clampe(v.w)); }\n\nvec4 sing(\n  vec4 v) {\n  return vec4(\n    sinp(v.w) * v.xyz,\n    sine(v.w)); }\n\nvec4 cosg(\n  vec4 v) {\n  return vec4(\n    cosp(v.w) * v.xyz,\n    cose(v.w)); }\n\nvec4 acosg(\n  vec4 v) {\n  return vec4(\n    acosp(v.w) * v.xyz,\n    acose(v.w)); }\n\nvec4 atang(\n  vec4 n,\n  vec4 d) {\n  return vec4(\n    atanp(n.w, d.w) * (d.w * n.xyz - n.w * d.xyz) / pow(d.w, 2.0),\n    atane(n.w, d.w)); }\n\nvec4 logg(\n  vec4 v) {\n  return vec4(\n    logp(v.w) * v.xyz,\n    loge(v.w)); }\n\nvec4 lengthg(mat4 p) {\n  return sqrtg(dotg(p, p)); }\n\n// pseudorandom\n\n// i can't believe it's an LCG\n// https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00996-5/S0025-5718-99-00996-5.pdf\nint next_hash(\n  int s) {\n  return s * 594156893; }\n  \n// multilinear congruential seed function\nint hash(\n  int k,\n  int x,\n  int y) {\n  int s = next_hash(k * 37769685);\n  s ^= next_hash(x * 26757677);\n  s ^= next_hash(y * 20501397);\n  return next_hash(s); }\n\nint hash(\n  ivec3 p) {\n  return hash(p.x, p.y, p.z); }\n\nint seed;\n\nvoid srand(ivec3 p) {\n  seed = hash(p); }\n\nint rand() {\n  seed = next_hash(seed);\n  return seed >> 1; }\n\nconst float rand_size = pow(2.0, 31.0);\n\nfloat unitrand() {\n  return float(rand() + (1 << 30)) / rand_size; }\n\nfloat boxrand() {\n  return float(rand()) / rand_size; }\n\nfloat cosine_pdf(\n  vec3 n,\n  vec3 rd) {\n  return 1.0 / pi * dot(rd, n); }\n\nfloat power_pdf(\n  vec3 spec_dir,\n  vec3 rd,\n  float p) {\n  return p / 2.0 / pi * pow(max(0.0, dot(spec_dir, rd)), p - 1.0); }\n\nvec3 mphong_brdf(vec3 ri, vec3 ro, vec3 n, vec3 albedo, vec3 specularity, vec3 power) {\n  vec3 r = albedo * (1.0 - specularity) / pi;\n  float rd = dot(ro, normalize(reflect(ri, n)));\n  if (rd > 0.0) {\n    r += specularity * (power + 2.0) / 2.0 / pi * pow(vec3(rd), power) / dot(ri, n); \n    }\n  return r; }\n","name":"Common","description":"","type":"common"},{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TWIST\n\n// Curving the spiral arms.\n#define CURVE\n \n\n// Scene object ID to separate the mesh object from the terrain.\nint objID;\nvec4 vID;\n\n\n// Standard 2D rotation formula.\nmat2 rot2(in float a){ float c = cos(a), s = sin(a); return mat2(c, -s, s, c); }\n\n\n// IQ's vec2 to float hash.\nfloat hash21(vec2 p){  return fract(sin(dot(p, vec2(27.609, 57.583)))*43758.5453); }\n\n\n\n\n// IQ's 3D box formular with rounding.\nfloat sBoxS(in vec3 p, in vec3 b, in float rf){\n  \n  vec3 d = abs(p) - b + rf;\n  return min(max(max(d.x, d.y), d.z), 0.) + length(max(d, 0.)) - rf;\n    \n}\n\n// IQ's 2D box formular with rounding.\nfloat sBoxS(in vec2 p, in vec2 b, in float rf){\n  \n  vec2 d = abs(p) - b + rf;\n  return min(max(d.x, d.y), 0.) + length(max(d, 0.)) - rf;\n    \n}\n \n// Angle between 3D points.\nfloat angle(vec3 v1, vec3 v2){\n\n    return acos(dot(v1, v2)/(length(v1)*length(v2)));\n}\n\n \n//////////\n\n/*\n// Readjusting the points to the surface of the sphere in question. The function here\n// is the same as the one below, but that's not always the case.\nvec3 size(in vec3 p, in float rad){\n\n    //return p;\n    return normalize(p)*rad;\n}\n*/\n \n\n/////////\n// A concatinated spherical coordinate to world coordinate conversion.\nvec3 sphericalToWorld(vec3 sphCoord){\n   \n    vec4 cs = vec4(cos(sphCoord.xy), sin(sphCoord.xy));\n    return vec3(cs.w*cs.x, cs.y, cs.w*cs.z)*sphCoord.z;\n}\n  \n\n// Useful polyhedron constants. \n//#define PI 3.14159265359\n#define TAU 6.283185307179586\n#define PI (TAU*.5) // To avoid numerical wrapping problems... Sigh! :)\n#define PHI  1.6180339887498948482 // (1. + sqrt(5.))/2.\n\n/*\n// A cartesian coordinate to spherical coordinate conversion.\nvec3 worldToSpherical(vec3 cartCoord){\n    \n    float r = length(cartCoord);\n    float ax = mod(atan(cartCoord.z, cartCoord.x), TAU); // Longitudinal coordinate.\n    float ay = mod(acos(cartCoord.y/r), PI);// Or atan(sphP.y, length(sphP.xz)); // Latitude. \n    return vec3(ax, ay, r);\n}\n*/\n\n//\n// Since all triangles are the same size, etc, any triangles on\n// a known icosahedron will do. The angles we need to determine are\n// the angle from the top point to one of the ones below, the top\n// point to the mid point below, and the angle from the top point\n// to the center (centroid) of the triangle.\nconst vec3 triV0 = normalize(vec3(-1, PHI,  0));\nconst vec3 triV1 = normalize(vec3(-PHI, 0,  1));//0,  1,  PHI\nconst vec3 triV2 = normalize(vec3(0,  1,  PHI));//0,  1,  PHI\nconst vec3 mid = normalize(mix(triV1, triV2, .5));\nconst vec3 cntr = normalize(triV0 + triV1 + triV2);\n\n// Angle between vectors: cos(a) = u.v/|u||v|. \n// U and V are normalized. Therefore, a = acos(u.v).\nconst float ang = acos(dot(triV0, triV1)); // Side length angle.\nconst float mAng = acos(dot(triV0, mid)); // Height angle.\nconst float cAng = acos(dot(triV0, cntr)); // Centroid angle.\n \n// Global pentagon center position.\nvec3 pentCntr = vec3(0);\n// Global pentagon latitudinal block ID.\nint pID;\n\n// Returns the local world coordinates to the nearest triangle and the three\n// triangle vertices in spherical coordinates.\nvec3 getDodecPent(inout vec3 q, inout vec3[5] gVertID, const float rad){\n\n\n    // The sphere is broken up into two sections. The top section \n    // consists of the top row, and half the triangle in the middle\n    // row that sit directly below. The bottom section is the same,\n    // but on the bottome and rotated at PI/5 relative to the top. \n    // The half triangle rows perfectly mesh together to form the \n    // middle row or section.\n\n    // Top and bottom section coordinate systems.The bottom section is \n    // rotated by PI/5 about the equator.\n\n \n    // Converting to spherical coordinates.\n    // X: Longitudinal angle -- around XZ, in this case.\n    // Y: Latitudinal angle -- rotating around XY.\n    // Z: The radius, if you need it.\n\n    // Longitudinal angle for the top and bottom sections.\n    const float scX = 5.; // Longitudinal scale.\n    vec4 sph = mod(atan(q.z, q.x) + vec4(PI/5., PI/5., 0, 0), TAU);\n    sph = mod((floor(sph*scX/TAU) + vec4(0, 0, .5, .5))/scX*TAU, TAU);\n\n    // Latitudinal strip positions.\n    vec4 pLat = vec4(0, ang, PI - ang, PI);\n    \n    // Pentagon center.\n    //pentCntr = vec3(0);\n    \n    // Distance to pentagon center.\n    float dist = 1e5;\n \n    // Latitudinal strip ID.\n    int id;\n\n    // Iterating through the four triangle group strips and determining the \n    // closest one via the closest central triangle point.\n    for(int i = 0; i<4; i++){\n        \n        // The spherical coordinates of the central vertex point for each pentagon.\n        vec3 sc = vec3(sph[i], pLat[i], rad);\n \n        // Spherical to world, or cartesian, coordinates.\n        vec3 wc = sphericalToWorld(sc);\n\n        // Nearest pentagon distance.\n        float vDist = length(q - wc);\n        if(vDist<dist){\n           // Update.\n           dist = vDist;\n           id = i;\n           pentCntr = sc;\n        }\n\n\n    }\n\n\n    float ax = sph[id];\n\n    // The five vertices in spherical coordinates. I can't remember why\n    // I didn't convert these to world coordinates prior to returning, but\n    // I think it had to do with obtaining accurate IDs... or something. :)\n   \n    vec3 vLat = vec3(cAng, 2.*mAng - cAng, PI - (2.*mAng - cAng));\n    if(id==0 || id ==3){\n        \n        // Top and bottom pentagons.\n        float xOff = PI/5.;\n        if(id==3){ vLat = PI - vLat; xOff = 0.; }\n\n        gVertID[0] = vec3(xOff, vLat.x, rad);\n        gVertID[1] = vec3(2.*PI/5. + xOff, vLat.x, rad);\n        gVertID[2] = vec3(4.*PI/5. + xOff, vLat.x, rad);\n        gVertID[3] = vec3(6.*PI/5. + xOff, vLat.x, rad);\n        gVertID[4] = vec3(8.*PI/5. + xOff, vLat.x, rad); \n    \n    \n    }\n    else{ \n        \n        // Middle latitudinal strip pentagons.\n        if(id==2){ vLat = PI - vLat; }\n        \n        vec3 ax3 = mod(vec3(ax + TAU - PI/5., ax + PI/5., ax), TAU);\n\n        // Clockwise.\n        gVertID[0] = vec3(ax3.x, vLat.y, rad);\n        gVertID[1] = vec3(ax3.x, vLat.x, rad);\n        gVertID[2] = vec3(ax3.y, vLat.x, rad);\n        gVertID[3] = vec3(ax3.y, vLat.y, rad);\n        gVertID[4] = vec3(ax3.z, vLat.z, rad);\n    }\n    \n\n \n   \n    // Top and bottom poles have a longitudinal coordinate of zero.\n    if (id==0 || id==3) pentCntr.x = 0.;\n    \n    // Debug.\n    //cID = int(floor(ax/TAU*5.));\n    \n    /*\n    // Not needed here.\n    dir = vec3(1);\n    if(id == 1 || id == 2) dir *= -1.;\n    if(id == 0 || id == 2) dir.x *= -1.;\n    */\n    \n    // Global pentagon latitudinal block ID.\n    pID = id;\n    \n    \n    return q;\n}\n///////////////////\n \n// A signed spherical line running between points \"a\" and \"b\"\n// (capped at \"b\"). I wrote it and appended a wave to it in a hurry,\n// but it seems to work.\nfloat sphereLineDistCapBWave(vec3 p, vec3 a, vec3 b, float ang){ \n     \n     //float ld = length(a - b);\n     //float lp = length(p);\n     \n     p = normalize(p); // Normalize p. // p /= rad; \n     float ln = dot(p, cross(a, b))/length(a - b);\n     \n     // Perpendicular vector running through point \"b\".\n     vec3 perpB = normalize(b + cross((a - b), b))*.5;\n     // Capping the line off at point \"b\".\n     float endB = dot(p, cross(perpB, b))/length(perpB - b);\n     \n     #ifdef CURVE\n     // Using the perpendicular vector to add a sinusoidal wave to the line.\n     //ln -= sin(6.2831/ld*.25*.975*(ang))*.06;//(endB)*.95//*.975\n     ln -= sin(6.2831*2.*(endB) + 0.125)*.06;//(endB)*.95//*.975\n     //ln -= sin(6.2831*1.905*(endB))*.06;//(endB)*.95//*.975\n     #endif\n \n     // Return the signed distance. \n     return sign(ln)*max(abs(ln), endB);      \n}\n\n// Sphere position: A little redundant, in this case.\nvec3 sphPos = vec3(0);\n\n// Scene distance function.\nfloat df(vec3 p){\n    p /= 2.0;\n     // Rotate the sphere.\n    vec3 q = p - sphPos;\n    \n\n    \n////////////////    \n \n    // Dodecahedron vertices and vertex IDs for the current cell.\n    vec3[5] vP, vPID;\n\n    // Obtaining the local cell coordinates and spherical coordinates\n    // for the dodecahedron cell.\n    const float rad = .5;\n    vec3 lq = getDodecPent(q, vPID, rad);\n\n\n    // World vertex coordinates.\n    for(int i = 0; i<5; i++){\n        vP[i] = sphericalToWorld(vPID[i]);//vec3(0, rad, 0);\n    }\n\n\n    // Pentagon center cartesian coordinates.\n    vec3 vPCntr = sphericalToWorld(pentCntr);\n\n    \n    // Central curve and trimming curve.\n    float crv = 1e5, crv2 = 1e5;\n\n    \n    //float pDir = ((pID&1)==0)? 1. : -1.;\n    \n    \n    // The pentagon spiral consists of five curved lines connecting the\n    // center to the pentagon edges.\n    for(int i = min(0, iFrame); i<5; i++){ \n    \n        int ip1 = (i + 1)%5;\n\n        // Mid pentagon edge point.\n        vec3 vMid1 = normalize(mix(vP[i], vP[ip1], .5))*rad; \n        // Angle between the current point and the pentagon center.\n        float angR = angle(lq, vPCntr);\n        //float angR = length(lq - vPCntr)/length(vMid1 - vPCntr);         \n\n        // Sphere line between the mide edge point and the pentagon center.\n        // The formula has been modified to give it a sinusoidal wave.\n        float line = sphereLineDistCapBWave(lq, vMid1, vPCntr, angR);\n\n        // 2D box coordinates (The line and the Z direction).\n        vec2 lv = vec2(line, (length(lq) - .5));\n\n       \n        #ifdef TWIST\n        // Twisting (rotating) the box coordinates a quarter turn from the center to\n        // the mid point. How you do this is up to you. The way I've done it is not\n        // pefect, but it's close enough. I'll put more effort into it later.\n        lv = rot2(smoothstep(.25, 1., angR/cAng*1.15)*3.14159/4.)*lv;\n        //lv = rot2(smoothstep(.05, .95, length(lq - vPCntr)/length(vMid1 - vPCntr))*3.14159/4.)*lv;\n        //lv = rot2(smoothstep(.05, 1., angR*1.)*3.14159/4.)*lv;\n        //lv = rot2(clamp(angR*2.65 - .4, .0, 1.)*3.14159/4.)*lv;\n        #endif\n\n        /*\n        // Failed experiment with repeat boxes... I'll try again later. :)\n        float z = normalize(cross(vec3(lv.x, 0, 0), vec3(0, lv.y, 0))).z;\n        z = mod(angR*cAng/6.2831*8. + .25/8., 1./8.) - .5/8.;\n        float bx = sBoxS(vec3(lv, z), vec3(.04), .01);\n        */\n        \n        // Cross sectional 2D box object.\n        float bx = sBoxS(lv, vec2(.04), .0);\n        //float bx = max(abs(lv.x), abs(lv.y)) - .04;\n        //bx += sin(angR*cAng*256. + 3.14159)*.0003; // Ribbing.\n        //bx = max(ln2, abs(z) - .2/8.);\n        \n        // Putting on some trimming.\n        float sdBox = length(abs(lv) - .045) - .0085;//max(abs(lv.x), abs(lv.y));//\n        //sdBox += clamp(sin(angR*cAng*128. + 3.14159)*3., 0., 1.)*.002;\n        sdBox += sin(angR*cAng*256. + 3.14159)*.0005; // Beading.\n \n        crv = min(crv, bx);\n        crv2 = min(crv2, sdBox);\n \n \n            \n    }\n         \n    // Central pentagon spheres.\n    float sph = length(lq - vPCntr*1.115) - .0325;\n     \n\n\n \n    // Overall object ID -- There are two rundundant slots there.\n    vID = vec4(sph, 0, crv, crv2);\n    \n    // Shortest distance.\n    return  min(sph, min(crv, crv2));\n \n}\n\nfloat eps = 1.0e-5;\n\n\n// models an interaction with isotropic roughness\n// n - the surface normal\n// s - the azimuth of the incoming ray\n// you should supply a random value between 1.0 and -1.0 for s\nvec3 axial(\n  vec3 n,\n  float v) {\n  float u = 6.28318530718 * boxrand();\n  float r = sqrt(1.0 - pow(v, 2.0));\n  vec3 t = normalize(abs(n.y) < 0.5 ? vec3(-n.z, 0.0, n.x) : vec3(-n.y, n.x, 0.0));\n  vec3 b = cross(n.xyz, t.xyz);\n  return vec3(v * n.xyz + r * (cos(u) * t + sin(u) * b)); }\n\nvec3 power_icdf(vec3 spec_dir, float power) {\n  return axial(spec_dir, pow(unitrand(), 1.0 / (power + 1.0))); }\n\nfloat power_pdf(\n  vec3 spec_dir,\n  float power,\n  vec3 rd) {\n  return (power + 1.0) / (2.0 * pi) * pow(max(0.0, dot(spec_dir, rd)), power); }\n\n// corrected blinn-phong radiance coefficient\nvec3 blinn_phong_coef(vec3 ri, vec3 ro, vec3 n, vec3 albedo, vec3 specularity, vec3 power) {\n  vec3 r = albedo * dot(n, ri) * (1.0 - specularity) / pi;\n  float rr = dot(n, normalize(ri - ro));\n  if (rr > 0.0) {\n    r += specularity * (power + 2.0) / (2.0 * pi) * pow(vec3(rr), power); }\n  return r; }\n\nfloat fresnel_reflectance(vec3 rd, vec3 n, float ior) {\n  n = -n;\n  float dt1 = dot(rd, n);\n  float ior2 = pow(ior, 2.0);\n  float dt12 = pow(dt1, 2.0);\n  float discriminant = -1.0 + ior2 + dt12;\n  if (discriminant < 0.0) return 1.0;\n  // fresnel reflectance for positive discriminant\n  vec3 refracted_heading = normalize(\n    rd + (-dt1 + sqrt(discriminant)) * n);\n  float dt2 = dot(refracted_heading, n);\n  float dt22 = pow(dt2, 2.0);\n  float k1 = dt12 + ior2 * dt22;\n  float k2 = ior2 * dt12 + dt22;\n  float v = 2.0 * ior * dt1 * dt2;\n  return clamp(0.5 * (\n    (k1 - v) / (k1 + v)\n    + (k2 - v) / (k2 + v)), 0.0, 1.0); }\n\nvec3 ro;\nvec3 rd;\nfloat t;\nvec3 p;\nvec3 wl;\nvec3 throughput = vec3(1.0);\nvec3 Lo = vec3(0.0);\n\n// SRGB Color Matching Functions\nvec3 srgbcmf() {\n  return\n    srgbcmfi(int(wl.x)) * Lo.x +\n    srgbcmfi(int(wl.y)) * Lo.y +\n    srgbcmfi(int(wl.z)) * Lo.z; }\n\nvec3 quadsorb(\n  float c,\n  float w) {\n  return 1.0 + pow(abs((wl - c) / w), vec3(2.0)); }\n\nvec3 nfd() {\n  float d = df(p);\n  vec2 e = vec2(eps, 0);\n  vec3 n = d - vec3(\n    df(p - e.xyy),\n    df(p - e.yxy),\n    df(p - e.yyx));\n  return normalize(n); }\n\nvec3 nf() {\n  return nfd(); }\n\nvoid scene() {\n  for (int i = 0; i < 32; ++i) {\n    float d;\n    for (int j = 0; j < 32; ++j) {\n      p = ro + t * rd;\n      vec3 H = vec3(0.0, 0.0, 0.0) - p;\n      float D = dot(H, H) - pow(20.0, 2.0);\n      if (D < 0.0 || dot(H, rd) > sqrt(D)) {\n        d = df(p);\n        if (d < eps) {\n          break; }\n        t += d; }\n      else {\n        t = 1.0 / zero;\n        break; } }\n    if (t == 1.0 / zero) {\n      vec3 room = srgb_igamma(texture(iChannel3, rd).bgr);\n      vec3 contrib = room / (1.2 - room);\n      \n      Lo += throughput * contrib;\n      break; }\n    if (d > eps) {\n      continue; }\n    p = ro + t * rd;\n    int which = d == vID.x ? 1 : d == vID.z ? 2 : 3;\n    vec3 n = nf();\n    if (dot(rd, n) > 0.0) {\n      t += eps;\n      continue; }\n    ro = p; t = 0.0;\n    vec3 nor = texBump(iChannel1, ro * 10.0, n, 0.0005);\n    vec3 albedo = 0.9 / quadsorb(\n        which == 1 ? 700.0 :\n        which == 2 ? 650.0 :\n        600.0, 50.0);\n    float specularity = fresnel_reflectance(rd, nor, 2.7);\n    if (unitrand() < specularity) {\n      rd = reflect(rd, n); }\n    else {\n      throughput *= albedo;\n      rd = power_icdf(n, 1.0); } } }\n\n#define INTERACT 1\n\nvoid mainImage(out vec4 o, in vec2 xy) {\n  srand(ivec3(xy, iFrame + int(iFrameRate * iTime)));\n  float wl_min = 360.0;\n  float wl_max = 800.0;\n  float wl_rng = wl_max - wl_min;\n  vec2 wl_pts = wl_min + vec2(1.0, 2.0) * wl_rng / 3.0;\n  wl = mix(\n    vec3(wl_min, wl_pts.x, wl_pts.y),\n    vec3(wl_pts.x, wl_pts.y, wl_max),\n    vec3(unitrand(), unitrand(), unitrand()));\n  mat4 view =\n    rotate(dy, 2.9\n#if INTERACT\n      - 3.0 * pi * (iMouse.x / iResolution.x)\n#endif\n      ) *\n    rotate(dx, -0.2\n#if INTERACT\n      + 3.0 * pi * (iMouse.y / iResolution.y)\n#endif\n    ) *\n    translate(vec4(0.0, 0.0, -4.0, 0.0));\n  vec2 lenspoint = 0.005 * sqrt(unitrand()) \n    * dir2(6.28318530718 * boxrand());\n  ro = vec3(lenspoint, 0.0);\n  rd = normalize(vec3(\n    (xy - 0.5 * iResolution.xy + vec2(boxrand(), boxrand()))\n    / (iResolution.y * 1.6)\n    - (lenspoint / 3.5),\n    1.0));\n  ro = (view * vec4(ro, 1.0)).xyz;\n  rd = (view * vec4(rd, 0.0)).xyz;\n  t = 0.0;\n  scene();\n  o = vec4(srgbcmf(), 1.0);\n  if (true\n#if INTERACT\n    && iMouse.z <= 0.0\n#endif\n    ) {\n    o += texelFetch(iChannel0, ivec2(xy), 0); }\n}\n","name":"Buffer A","description":"","type":"buffer"}]}