{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"// The MIT License\n// Copyright Â© 2024 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Clips a point to the boundary of a box while keeping it into the same ray\n// through the origin. NOTE that this is DIFFERENT to computing the closest\n// point on the box which you can see here: https://www.shadertoy.com/view/cldSzf\n\n\n// clip point to a box constrained to the ray through the box's origin\nvec2 clipToBox( vec2 p, vec2 b )\n{\n    return p*min(b.x/abs(p.x),\n                 b.y/abs(p.y));\n}\n\n// same as above, for when your ALU doesn't handle nan well)\nvec2 clipToBox_v2( vec2 p, vec2 b )\n{\n    return p/max(abs(p.x)/b.x,\n                 abs(p.y)/b.y);\n}\n\n// same as above, for squares\nvec2 clipToSquare( vec2 p, float b )\n{\n    return b*p/max(abs(p.x),abs(p.y));\n}\n\n\n//----------------------------------------------------------------\n\n// point inside box\nbool isPointInBox(in vec2 p, in vec2 b )\n{\n    vec2 w = abs(p)-b;\n    return max(w.x,w.y)<0.0;\n}\n\n// distance to box\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 w = abs(p)-b;\n    float g = max(w.x,w.y);\n    return (g>0.0)?length(max(w,0.0)):g;\n}\n\n// distance to line segment   \nfloat sdSegmentThroughOrigin( in vec2 p, in vec2 b )\n{\n    return length(p-b*clamp(dot(p,b)/dot(b,b),0.0,1.0));\n}\n\n// distance to disk\nfloat sdDisk( in vec2 p, in vec2 c, in float r )\n{\n    return length(p-c)-r;\n}\n\n//---------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 m = (2.0*iMouse.xy-iResolution.xy)/iResolution.y;\n    float px = 2.0/iResolution.y;\n\n    // point and box definition\n    if( iMouse.z<0.01 ) m = vec2(1.2,0.8)*cos(iTime*vec2(1.1,1.3)+vec2(0,2));\n    const vec2 box = vec2(0.9,0.5);\n\n    // draw background color\n    vec3 col = vec3(0.3,0.4,0.5);\n\n    // draw box\n    {\n    float d = sdBox(p,box); \n    if( d<0.0 ) col = vec3(0.5,0.6,0.7);\n    else        col *= 1.0-0.5/(1.0+64.0*d);\n    col *= 0.98 + 0.04*smoothstep(-0.1,0.1,cos(120.0*abs(d)));\n    }\n    \n    // draw line\n    {\n    float d = min(min(sdSegmentThroughOrigin(p,m)-0.0025, \n                      sdDisk(p,vec2(0.0),0.025)),\n                      sdDisk(p,m,0.025) );\n    col *= 1.0-0.6/(1.0+512.0*d);\n    col = mix(col, vec3(1.0,0.8,0.0), 1.0-smoothstep(0.0,1.5*px,d));\n    }\n    \n    // draw clipped point\n    if( !isPointInBox(m,box) )\n    {\n    vec2 q = clipToBox(m,box); \n    float d = sdDisk(p,q,0.025);\n    col *= 1.0-0.6/(1.0+512.0*d);\n    col = mix(col, vec3(1.0,1.0,1.0), 1.0-smoothstep(0.0,1.5*px,d));\n    }\n    \n    fragColor = vec4(col,1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"lcyfRG","date":"1734131485","viewed":552,"name":"Clip To Box","username":"iq","description":"Clips a point to the boundary of a box while keeping it into the same ray through the origin. NOTE that this is DIFFERENT to computing the closest point on the box which you can see here: [url]https://www.shadertoy.com/view/cldSzf[/url]","likes":31,"published":3,"flags":0,"usePreview":0,"tags":["2d","ray","box","clipping"],"hasliked":0,"parentid":"","parentname":""}}