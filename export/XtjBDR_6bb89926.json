{"ver":"0.1","info":{"id":"XtjBDR","date":"1515358232","viewed":309,"name":"Quiltifier","username":"tsuhre","description":"Voronoi texturing produced using sampling of the texture under the expected voronoi points","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","noise","texture"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//adapted from https://thebookofshaders.com/edit.php#12/vorono-01.frag\n\n/* voronoi.frag */\n\n\n\n//noise function\nvec2 random2( vec2 p ) {\n    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);\n}\n\nvoid  mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = fragCoord.xy/iResolution.xy;\n    st.x *= iResolution.x/iResolution.y;\n    vec3 color = vec3(.0);\n    \n    float p_size = 20.;\n    float scale = 10.;\n    \n    // Scale\n    st *= scale;\n\n    // Tile the space\n    vec2 i_st = floor(st);\n    vec2 f_st = fract(st);\n\n    float m_dist = 10.;    // minimun distance\n    float last_dist = 10.; //the previous distance\n    vec2 m_point;          // minimum point\n    vec2 last;             // the previous point   \n    vec2 quad;             // the quadrent coordinate\n    \n    for (int j=1; j >= -1; j-- ) {\n        for (int i=-1; i<=1; i++ ) {\n            vec2 neighbor = vec2(float(i),float(j));\n            vec2 point = random2(i_st + neighbor);\n            point = 0.5 + 0.5*sin(iTime + 6.2831*point);\n            vec2 diff = neighbor + point - f_st;\n            float dist = length(diff);                                  //euclid\n            //float dist = abs(diff.x) + abs(diff.y);                     //manhatten\n            //float dist = max(abs(diff.x)*0.866025+diff.y*0.5,-diff.y);  //triangular\n            \n            if( dist <= m_dist ) {\n                last_dist = m_dist;\n                m_dist = dist;\n                last = m_point;\n                m_point = point;\n                quad = neighbor;\n            }\n        }\n    }\n    \n    \n    //for borders\n    /*if (abs(m_dist - last_dist) < .05){\n        fragColor = vec4(vec3(0.), 1.);\n        return;\n    }*/\n    \n    //reverse vector\n    vec2 rev = vec2(iResolution.x/iResolution.y, 1)*scale;\n    \n    //m_point += floor(st) + quad; //moving textures:\n    m_point = floor(st) + .5 + quad; //stationary textures:\n    \n    m_point /= rev;\n    vec2 m = mod(fragCoord.xy, p_size)/vec2(max(iResolution.x, iResolution.y));\n    float s2 = p_size/max(iResolution.x, iResolution.y);\n    //vec2 s2 = vec2(p_size/iChannel0.x, p_size/iChannel.y);\n    \n    //m *= 0.;\n    \n    vec3 c = textureLod(iChannel0, m_point + m, 0.).rgb;\n    vec3 c1 = textureLod(iChannel0, m_point + s2 - m, 0.).rgb; //mirror for better tiling\n    \n    vec3 c2 = mix(c, c1, .5);\n    \n    fragColor = vec4(c2, 1.);\n}\n","name":"Image","description":"","type":"image"}]}