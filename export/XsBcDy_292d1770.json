{"ver":"0.1","info":{"id":"XsBcDy","date":"1493582199","viewed":363,"name":"Angel of chaos","username":"guil","description":"Strange attractor of a reccurent neural network with 2 neurons and no input.\nUsing 2D Discrete Attractor Plotter : https://www.shadertoy.com/view/Msy3Dm","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["2d","fractal","attractor","neural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Change INTEGRATOR in Buf A and reset to see different attractors.\n\n//Coloring gradient\n#define GRADIENT Grad2\n\n//Preview of gradient\n#define VIEW_GRADIENT\n\n//Background color\n#define BACKGROUND vec3(1.00, 1.00, 1.00);\n\nvec3 Grad1(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(1.00, 0.35, 0.00), pow(x, 0.35));\n    col = mix(col, vec3(0.50, 0.00, 0.50), smoothstep(0.05,0.8,x));\n    \n    return col;\n}\n\nvec3 Grad2(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(0.20, 0.60, 0.20), pow(x, 0.5)); \n    col = mix(col, vec3(0.40, 0.40, 0.90), smoothstep(0.2,1.5,x));\n    \n    return col;\n}\n\nvec3 Grad3(float x)\n{\n    x = clamp(x, 0.0, 1.0);\n    \n    vec3 col = BACKGROUND;\n    \n    col = mix(col, vec3(0.00, 0.00, 0.00), pow(x, 0.5)); \n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n    vec2 uv = .5*fragCoord / iResolution.y;\n    \n    float inten = texture(iChannel0, fragCoord / iResolution.xy).r;\n    \n    \n\tfragColor = vec4(GRADIENT(inten), 0);\n    \n    #ifdef VIEW_GRADIENT\n    if(uv.x / res.x < 0.03)\n    {\n        fragColor = vec4(GRADIENT(uv.y), 0);\n    }\n    #endif\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Iterations per frame\n#define ITERATIONS 512\n\n//Integrator function\n#define INTEGRATOR rnn1\n\n\n//Point size (pixels)\n#define BLUR 1.3\n\n//Point intensity\n#define INTENSITY 0.00001\n\n\n//Scale of the attractor (set by individual functions)\nfloat scale = 1.0;\n\nfloat sigmoid(float x)\n{\n\treturn 1./(1.+exp(-x));\n}\n\nvec2 sigmoid(vec2 v)\n{\n\treturn vec2(1./(1.+exp(-v.x)) ,1./(1.+exp(-v.y)));\n}\n\n\nvec2 rnn1(vec2 last) \n{\n    scale = 0.6;\n        \n    float a =-1.4;\n    float b = -2.6;\n    float c = 2.;\n    float d = 1.9;\n    float e = .05;\n    float f = -.1;\n    float g = 2.6;\n    float h = 4.6;\n    \n\tvec2 next = vec2(0);\n\t\n    next.x = tanh(a * last.x + b * last.y+e)*sigmoid(g*last.y+2.5);\n    next.y = tanh(c * last.x + d * last.y+f)*sigmoid(h*last.x+2.);\n    \n    return next;\n} \n\n//matrix version (slower with my GPU)\nvec2 rnn2(vec2 last) \n{\n    scale = 0.6;\n        \n    mat2 wh = mat2( -1.4, 2., -2.6, 1.9);\t//hidden weights\n\tvec2 bh = vec2( .05, -.1);\t\t\t\t//hidden bias\n    mat2 wg = mat2( 0., 4.6, 2.6, 0.);\t\t//gate weights\n    vec2 bg = vec2(2.3, 2.);\t\t\t\t//gate bias\n    \n\tvec2 next = tanh(wh*last+bh)*sigmoid(wg*last+bg);\n\t  \n    return next;\n}   \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy / iResolution.y;\n    float ps = 1.0 / iResolution.y;\n    vec2 uv = fragCoord / iResolution.y;\n    \n    vec2 last = texture(iChannel0, uv).yz;\n    vec2 next = vec2(0);\n    \n    float psum = 0.0;\n    \n    for(int i = 0;i < ITERATIONS; i++)\n    {\n        next = INTEGRATOR(last);\n        \n        psum += smoothstep(BLUR * ps, 0.0, distance(uv - res/2.0, next * scale));\n        \n        last = next;\n    }\n    \n    psum /= BLUR;\n    psum /= ps;\n    psum *= INTENSITY;\n    \n    float lastFrame = (1.-INTENSITY)*texture(iChannel0, uv/res).x;\n        \n    \n    if(iFrame < 4)\n    {\n        fragColor = vec4(psum + lastFrame, (uv - res/2.0)/scale,  0);\n    }\n    else\n    {\n        fragColor = vec4(psum + lastFrame, next,  0);\n    }\n    \n}","name":"Buf A","description":"","type":"buffer"}]}