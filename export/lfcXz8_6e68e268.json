{"ver":"0.1","info":{"id":"lfcXz8","date":"1713636419","viewed":96,"name":"Jason's Grid Shader","username":"JasonS05","description":"Pixel shader for a 3D perspective of a grid textured floor.","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["procedural"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float lineWidth = 0.015;\nconst float gridDensity = 70.0;\nconst float rotationSpeed = 10.0; // degrees per second\nconst float gamma = 2.2; // gamma correction\n\nvec2 rotate(vec2 v) {\n    float angle = iTime * rotationSpeed * 3.1415926 / 180.0;\n    \n    float s = sin(angle);\n    float c = cos(angle);\n    \n    return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\n\nvec2 square(vec2 x) {\n    return x * x;\n}\n\nvec2 linesHelper(vec2 x, vec2 a) {\n    return floor(x - a) * square(x - a);\n}\n\nvec2 linesHelper2(vec2 x, vec2 a) {\n    vec2 n = fract(x);\n    \n    return floor(x) + (linesHelper(n, a) - linesHelper(1.0 - n, a)) / (2.0 * a * a);\n}\n\nvec2 lines(vec2 x, vec2 dpdx, vec2 dpdy) {\n    vec2 a = min(vec2(1.0, 1.0), sqrt(dpdx * dpdx + dpdy * dpdy));\n    \n    return (linesHelper2(x + lineWidth, a) - linesHelper2(x, a));\n}\n\n// source: https://stackoverflow.com/a/57390568\nhighp float rand(vec2 co) {\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a, b));\n    highp float sn= mod(dt, 3.14);\n    return fract(sin(sn) * c);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec2 p = rotate(gridDensity * vec2(uv.x, 1.0) / (0.5 - uv.y)) * iResolution.y / iResolution.x;\n    \n    vec2 result = lines(p, dFdx(p), dFdy(p));\n    float brightness = mix(result.x, 1.0, result.y);\n    brightness = pow(brightness, 1.0 / gamma); // gamma correction\n    \n    float noise = rand(uv * iTime) - 0.5;\n    brightness += noise / 256.0; // temporal dithering to fix 8-bit color banding\n    \n    fragColor = vec4(vec3(brightness), 1.0);\n}\n","name":"Image","description":"","type":"image"}]}