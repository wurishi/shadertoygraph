{"ver":"0.1","info":{"id":"lf2fDD","date":"1724966390","viewed":20,"name":"strobe flier","username":"unclekarl","description":" heart","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["fire","water","earth","heart","wind"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n// Shadertoy GLSL Shader Code with Dynamic Colors and Lighting Effects\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy; // Normalized pixel coordinates (0 to 1)\n    uv = uv * 2.0 + (-0.9); // Center coordinates to range from -1 to 1\n    uv.x *= iResolution.x / iResolution.y / iResolution.z; // Correct aspect ratio\n    float t = iTime; // Time in seconds since the shader started\n    \n\n\n    // Define the x(t) equation, directly translated\n    float x = (\n        (-13.0/7.0) * sin((5.0/8.0) * t) \n        + 161.0 * sin((8.0/5.0) * t) \n        - 7.0 * sin((3.0/7.0) * t + 8.0) \n        + 0.5 * sin((5.0/4.0) * t + (5.0/3.0)) \n        + 118.0 * sin((8.0/3.0) * t) \n        + 406.0 * sin((3.0/5.0) * t + 8.0) \n        + 5.0 * sin((7.0/8.0) * t) \n        + sin((8.0/3.0) * t + 8.0)\n        + 4.0 * sin((9.0/4.0) * t) \n        + 247.0 * sin((3.0/11.0) * t) * step(-27.0, t) * step(t, 27.0) \n        + sin((7.0/8.0) * t) \n        - (1.0/4.0) * sin((4.0/3.0) * t) \n        + 122.0 * sin((8.0/5.0) * t + (5.0/6.0)) \n        + 48.0 * sin((5.0/4.0) * t) \n        + 3.0 * sin((7.0/8.0) * t + (8.0/9.0))\n        // Add more terms as needed...\n    );\n\n    // Define the y(t) equation, directly translated\n    float y = (\n        (-5.0/8.0) * sin((11.0/7.0) * t) \n        + 19.0 * sin((9.0/14.0) * t) \n        - (8.0/4.0) * sin((5.0/2.0) * t + 6.0) \n        + 1321.0 * sin((8.0/14.0) * t) \n        + 599.0 * sin((8.0/9.0) * t + (9.0/8.0)) \n        + 405.0 * sin((7.0/5.0) * t + (8.0/3.0))\n        + 8.0 * sin((7.0/8.0) * t) \n        - sin((11.0/6.0) * t + (4.0/7.0))\n        + 8.0 * sin((7.0/9.0) * t + 8.0) \n        + 3.0 * sin((6.0/2.0) * t + 7.0) \n        + 15.0 * sin((5.0/3.0) * t + (9.0/8.0)) \n        // Add more terms as needed...\n    );\n\n    // Calculate the position based on x and y equations\n    vec2 position = vec2(x, y) * 0.002; // Scale down to fit in the viewport\n\n    // Simulated lighting effect\n    float dist = length(uv - position); // Distance from current pixel to the position\n    float lightIntensity = 0.2 / (dist + 0.11); // Light falloff effect\n\n    // Dynamic color based on time and position\n    vec3 dynamicColor = vec3(0.5 + 0.5 * sin(t + x), 0.5 + 0.5 * cos(t + y), 0.5 + 0.5 * sin(t + x + y));\n    vec3 baseColor = dynamicColor * lightIntensity; // Combine light effect with dynamic color\n\n    // Output the final color\n    fragColor = vec4(baseColor, 10.0);\n}\n","name":"Image","description":"","type":"image"}]}