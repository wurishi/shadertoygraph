{"ver":"0.1","info":{"id":"fdjSzy","date":"1620556050","viewed":121,"name":"Voronoi SDF","username":"dashed_man","description":"just voronoi with sdf","likes":7,"published":1,"flags":0,"usePreview":0,"tags":["voronoi","sdf"],"hasliked":0,"parentid":"NdSSzD","parentname":"2d sdf tests"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define INF 1e27\n\n#define COLOR0 vec3(0.7,0.7,0.7)\n#define COLOR1 vec3(0.7,0.,0.)\n#define COLOR2 vec3(0.,0.7,0.)\n#define COLOR3 vec3(0.7,0.,0.7)\n#define COLOR4 vec3(0.,0.,0.7)\n\nfloat sdCircle( in vec2 p, in float r )\n{\n    return length(p) - r;\n}\n\nfloat sdBox( in vec2 p, in vec2 ab ) \n{\n    vec2 q = abs(p) - ab;\n    return min(max(q.x,q.y),0.0) + length(max(q,0.0));\n}\n\nfloat sdStar5(in vec2 p, in float r, in float rf)\n{\n    const vec2 k1 = vec2(0.809016994375, -0.587785252292);\n    const vec2 k2 = vec2(-k1.x,k1.y);\n    p.x = abs(p.x);\n    p -= 2.0*max(dot(k1,p),0.0)*k1;\n    p -= 2.0*max(dot(k2,p),0.0)*k2;\n    p.x = abs(p.x);\n    p.y -= r;\n    vec2 ba = rf*vec2(-k1.y,k1.x) - vec2(0,1);\n    float h = clamp( dot(p,ba)/dot(ba,ba), 0.0, r );\n    return length(p-ba*h) * sign(p.y*ba.x-p.x*ba.y);\n}\n\nfloat sdMoon(vec2 p, float d, float ra, float rb )\n{\n    p.y = abs(p.y);\n    float a = (ra*ra - rb*rb + d*d)/(2.0*d);\n    float b = sqrt(max(ra*ra-a*a,0.0));\n    if( d*(p.x*b-p.y*a) > d*d*max(b-p.y,0.0) )\n        return length(p-vec2(a,b));\n    return max( (length(p          )-ra),\n               -(length(p-vec2(d,0))-rb));\n}\n\n//------------------------------------------------------------\nfloat voronoi( in vec2 p, out int locus_id)\n{\n    //return distance and locus id\n    \n    \n    //prepare\n    float dist = INF;\n    float new_dist = 0.f;\n    \n    //circle\n    new_dist = sdCircle(p - vec2(-0.55, 0.0), 0.25);\n    if( new_dist<dist )\n    {\n        dist = new_dist;\n        locus_id = 1;\n    }\n    \n    //box\n    new_dist = sdBox(p - vec2( 0.7, 0.5), vec2(0.6,0.1) );\n    if( new_dist<dist )\n    {\n        dist = new_dist;\n        locus_id = 2;\n    }\n    \n    //star\n    new_dist = sdStar5(p - vec2(0.5, -0.4), 0.5, 0.4);\n    if( new_dist<dist )\n    {\n        dist = new_dist;\n        locus_id = 3;\n    }\n    \n    //moon\n    new_dist = sdMoon(p - vec2(-0.7, 0.0), 0.3, 0.7, 0.5);\n    if( new_dist<dist )\n    {\n        dist = new_dist;\n        locus_id = 4;\n    }\n    \n    //return\n    return dist;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // normalized pixel coordinates\n    vec2 p = (fragCoord*2.0-iResolution.xy)/iResolution.y;\n    \n    // computations\n    int locus_id = 0;\n    float d = voronoi(p, locus_id);\n    \n    // coloring\n    vec3 col;\n    if(d<0.f)col = COLOR0;\n    else{\n        switch(locus_id){\n            case 1:\n                col = COLOR1;\n                break;\n            case 2:\n                col = COLOR2;\n                break;\n            case 3:\n                col = COLOR3;\n                break;\n            case 4:\n                col = COLOR4;\n                break;\n            default:\n                col = COLOR0;\n        }\n    }\n    col *= 1.0 - exp(-9.0*abs(d));\n    col *= 1.0 + 0.2*cos(128.0*abs(d));\n    col = mix( col, vec3(1.0), 1.0-smoothstep(0.0,0.015,abs(d)) );\n    \n    // output\n\tfragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}