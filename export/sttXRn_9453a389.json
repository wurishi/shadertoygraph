{"ver":"0.1","info":{"id":"sttXRn","date":"1638637387","viewed":78,"name":"Basic Game of Life by jorgemoag","username":"jorgemoag","description":"Basic implementation Game of Life","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["conwaygameoflife"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).rrr;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"bool init_setup(vec2 uv) {\n    return texture(iChannel0, uv).r > 0.5;\n}\n\nbool is_alive(ivec2 pos) {\n    return texelFetch(iChannel1, pos, 0).r > 0.5;\n}\n\nint count_neighbors(ivec2 pos) {\n    int total_neighs = 0;\n    for (int y = -1; y <= 1; ++y) {\n        for (int x = -1; x <= 1; ++x) {\n            if (x != 0 || y != 0) {\n                total_neighs += is_alive(pos + ivec2(x,y)) ? 1 : 0;\n            }            \n        }\n    }\n    return total_neighs;\n}\n\nbool will_alive(ivec2 pos) {\n    bool alive = is_alive(pos);\n    int count_neighs = count_neighbors(pos);    \n    // Any live cell with two or three live neighbours survives.\n    if (alive && (count_neighs == 2 || count_neighs == 3)) {\n        return true;\n    }\n    // Any dead cell with three live neighbours becomes a live cell.\n    if (!alive && count_neighs == 3) {\n        return true;\n    }\n    // All other live cells die in the next generation. Similarly, all other dead cells stay dead.\n    return false;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    bool alive = false;\n   \n    if (iFrame < 20) {\n        alive = init_setup(uv);\n    } else {\n        alive = will_alive(ivec2(fragCoord.xy));\n    }      \n\n    fragColor = alive ? vec4(1,0,0,1) : vec4(0,0,0,1); \n}","name":"Buffer A","description":"","type":"buffer"}]}