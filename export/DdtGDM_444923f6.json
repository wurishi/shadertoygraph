{"ver":"0.1","info":{"id":"DdtGDM","date":"1677361635","viewed":228,"name":"polyrhythm","username":"pema99","description":"my first audio shader\n\napparently u have to reset time for it to play audio. idk","likes":16,"published":1,"flags":8,"usePreview":0,"tags":["sound","music","audio","rainbow","polyrhythm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float udSegment(vec2 p, vec2 a, vec2 b)\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}\n\nfloat udRegularPolygon(vec2 p, uint sides)\n{\n    float dist = 10000.0;\n    for (uint i = 0u; i < sides; i++)\n    {\n        float t0 = float(i) / float(sides) * 6.28318530718;\n        float t1 = float(i+1u) / float(sides) * 6.28318530718;\n        vec2 a = vec2(sin(t0), cos(t0));\n        vec2 b = vec2(sin(t1), cos(t1));\n        dist = min(dist, udSegment(p, a, b));\n    }\n    return dist;\n}\n\nfloat sdCircle(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nvec2 pathRegularPolygon(vec2 p, uint sides, float t)\n{\n    float interval = 1.0 / float(sides);\n    float it = interval * ceil(t / interval); // ceil to interval\n    uint i = uint(it * float(sides)); // find index\n    float rt = (it - t) / interval; // find offset in line segment\n    \n    float t0 = float(i-1u) / float(sides) * 6.28318530718;\n    float t1 = float(i) / float(sides) * 6.28318530718;\n    vec2 a = vec2(sin(t0), cos(t0));\n    vec2 b = vec2(sin(t1), cos(t1));\n    return mix(b, a, rt);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * SPEED;\n    \n    vec2 uv = ( 2.*fragCoord - iResolution.xy ) / iResolution.y;\n    uv *= 0.9+(sin(time*2.0)*0.5+0.5)*0.1;\n    \n    float dist = 10000.0;\n    vec3 col = vec3(0.);\n    \n    for (uint j = 0u; j < RINGS; j++)\n    {\n        uv *= 1.2;\n        uint sides = (RINGS+MIN_TRIS-1u)-j;\n        dist = min(dist, udRegularPolygon(uv, sides));\n        dist = min(dist, sdCircle(uv-pathRegularPolygon(uv, sides, fract(time*0.3)), 0.03));\n        \n        if (col == vec3(0.))\n        {\n            col = smoothstep(0.02, 0.0, dist) * hueShift(vec3(1.0, 0.0, 0.0), float(j)/float(RINGS) + time*0.3);\n        }\n    }\n    \n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#if 1\n#define RINGS 5u\n#define MIN_TRIS 4u\n#define SPEED 0.8\n#define BOTTOM_FREQ 440.0\n#define NOTE_DIFF 2u\n#endif\n\n// 5:4 polyrhythm\n#if 0\n#define RINGS 2u\n#define MIN_TRIS 4u\n#define SPEED 1.1\n#define BOTTOM_FREQ 440.0\n#define NOTE_DIFF 2u\n#endif\n\n// 3:4 polyrhythm\n#if 0\n#define RINGS 2u\n#define MIN_TRIS 3u\n#define SPEED 1.6\n#define BOTTOM_FREQ 440.0\n#define NOTE_DIFF 2u\n#endif\n\n\n\n\n// Not my code\nvec3 hueShift (in vec3 Color, in float Shift)\n{\n    vec3 P = vec3(0.55735)*dot(vec3(0.55735),Color);\n    \n    vec3 U = Color-P;\n    \n    vec3 V = cross(vec3(0.55735),U);    \n\n    Color = U*cos(Shift*6.2832) + V*sin(Shift*6.2832) + P;\n    \n    return Color;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"float freq(uint i)\n{\n    return BOTTOM_FREQ*pow(2.0,(float(i*NOTE_DIFF)/12.0));\n}\n\nvec2 mainSound( int samp, float time )\n{\n    time *= SPEED;\n    float outp = 0.;\n\n    for (uint j = 0u; j < RINGS; j++)\n    {\n        uint sides = (RINGS+MIN_TRIS-1u)-j;\n        \n        float t = fract(time*0.3);\n        float interval = 1.0 / float(sides);\n        float it = interval * ceil(t / interval); // ceil to interval\n        if ((it - t) < 0.01)\n        {\n            outp += sin(6.2831*freq(j)*time)*sin((it-t)*100.0);\n        }\n    }\n    \n    return vec2(outp);\n}","name":"Sound","description":"","type":"sound"}]}