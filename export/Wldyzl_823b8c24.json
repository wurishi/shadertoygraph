{"ver":"0.1","info":{"id":"Wldyzl","date":"1609738865","viewed":169,"name":"Edge Detection Eli R","username":"elirockenbeck","description":"to detect edges put something in ichannel0 under buffer A\nbackground = iChannel1 under buffer B","likes":0,"published":1,"flags":34,"usePreview":0,"tags":["blur","gaussian","edges","blurred"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = fragCoord.xy / iResolution.xy;//Condensing this into one line\n    vec4 texColor = texture(iChannel0,xy);//Get the pixel at xy from iChannel0\n    fragColor = texColor;//Set the screen pixel to that color\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3zn","filepath":"/presets/webcam.png","previewfilepath":"/presets/webcam.png","type":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3Rr","filepath":"/media/a/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","previewfilepath":"/media/ap/79520a3d3a0f4d3caa440802ef4362e99d54e12b1392973e4ea321840970a88a.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"int kernelSize = 5; // bigger = blurrier\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Condensing this into one line\n    \n    \n    //Get the pixel at xy from iChannel0\n    //texColor = 1.0- xy.x;\n    \n    float sumGauss = 0.0f;\n    float sum = 0.0f;\n    \n    \n    for(int i = 0; i < kernelSize; i++)\n    {\n        for(int j = 0; j < kernelSize; j++)\n        {        \n            vec2 uv = ((fragCoord.xy) + vec2(i,j)) / iResolution.xy;\n            \n            float texColor = dot(texture(iChannel0,uv).rgb, vec3(.33,.33,.33));\n            \n            vec2 uvKernel = vec2(i,j) / float(kernelSize);\n            float gaussianBlur = texture(iChannel1,uvKernel).x;\n            \n            sumGauss += gaussianBlur;\n            sum += texColor * gaussianBlur;\n            \n        }\n    }\n    \n    \n    fragColor = vec4(sum) / sumGauss;//Set the screen pixel to that color\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"float sensitivity = .05; // how sharp does the edge have to be? lower = more edges\n\n\nvec3 backgroundColor = vec3(0,0,0); \n\nfloat[] kernel = float[] (-1.0,1.0,-2.0,2.0,-1.0,1.0); // for finding vertical edges\nfloat[] kernel2 = float[] (-1.0, -2.0, -1.0, 1.0, 2.0, 1.0); //for finding horizontal edges\n\n\nfloat sampleXY(in vec2 fragCoord, int dX, int dY)\n{\n    vec2 uv = (fragCoord + vec2(dX, dY)) / iResolution.xy;\n    \n    vec4 rgba = texture(iChannel0, uv);\n    return dot(rgba.rgb, vec3(0.33, 0.33, 0.33)); // returns the grey value at pixel offset from fragcoourd by dX, dY\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord)\n{\n    float sumx = 0.0f;\n    float sumy = 0.0f;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 edgeColor = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n   \n   \n    // use sobel operator to find vertical edges\n    \n    sumy += kernel[0] * sampleXY(fragCoord, -1, -1);\n    sumy += kernel[1] * sampleXY(fragCoord, 1, -1);\n    sumy += kernel[2] * sampleXY(fragCoord, -1,0);\n    sumy += kernel[3] * sampleXY(fragCoord, 1,0);\n    sumy += kernel[4] * sampleXY(fragCoord, -1,1);\n    sumy += kernel[5] * sampleXY(fragCoord, 1,-1);\n    \n    \n    // use sobel operator to find horizontal edges\n    sumx += kernel2[0] * sampleXY(fragCoord, -1, -1);\n    sumx += kernel2[1] * sampleXY(fragCoord, 0, -1);\n    sumx += kernel2[2] * sampleXY(fragCoord, 1,-1);\n    sumx += kernel2[3] * sampleXY(fragCoord, -1,1);\n    sumx += kernel2[4] * sampleXY(fragCoord, 0,1);\n    sumx += kernel2[5] * sampleXY(fragCoord, 1,1);\n    \n    if(abs(sumx) > sensitivity || abs(sumy) > sensitivity) // if it's an edge...\n    {\n        fragColor = vec4(edgeColor, 1.0); // color!\n        \n    }else{\n        //fragColor = vec4(backgroundColor * sin(iTime),1.0);\n        vec2 uv = fragCoord.xy / iResolution.xy;//Condensing this into one line\n        float mid = .5;\n        float rotation = iTime;\n        //uv += vec2(cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid, cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid);\n        vec4 texColor = texture(iChannel1,uv);//Get the pixel at xy from iChannel0\n        fragColor = texColor; // make it image in ichannel1\n        \n    }\n    \n\n}","name":"Buffer B","description":"","type":"buffer"}]}