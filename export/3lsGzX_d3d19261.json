{"ver":"0.1","info":{"id":"3lsGzX","date":"1557131532","viewed":190,"name":"Cylinder pipe","username":"edo_m18","description":"Cylinder pipe.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["cylinder","pipe"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 trans(vec3 p, float space)\n{\n    return mod(p, space) - space * 0.5;\n}\n\nfloat distSphere(vec3 p, float size)\n{\n    return length(p) - size;\n}\n\nfloat distCylinderXY(vec3 p, vec3 c)\n{\n    return length(p.xy - c.xy) - c.z;\n}\n\nfloat distCylinderXZ(vec3 p, vec3 c)\n{\n    return length(p.xz - c.xy) - c.z;\n}\n\nfloat distCappedCylinder(vec3 p, vec2 h)\n{\n    vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat distFunc(vec3 p)\n{\n    float s = 4.0;\n    float d1 = distCylinderXY(p, vec3(0.0, 0.0, s));\n    float d2 = distCylinderXY(p, vec3(0.0, 0.0, s - 0.2));\n    float d3 = distCappedCylinder(trans(p, 4.0), vec2(1.0, 3.5));\n\t//return d3;\n    return max(max(d1, -d2), -d3);\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 d = vec2(0.01, 0.0);\n    return normalize(vec3(distFunc(p + d.xyy) - distFunc(p - d.xyy),\n                     \t  distFunc(p + d.yxy) - distFunc(p - d.yxy),\n \t                      distFunc(p + d.yyx) - distFunc(p - d.yyx)));\n}\n\nmat3 camera(in vec3 ro, vec3 ta, float cr)\n{\n    vec3 up = vec3(sin(cr), cos(cr), 0);\n    vec3 cw = normalize(ta - ro);\n    vec3 cu = normalize(cross(cw, up));\n\tvec3 cv = normalize(cross(cu, cw));\n    return mat3(cu, cv, cw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / iResolution.y;\n\n    float z = iTime * 10.0;\n    vec3 ro = vec3(0, 0, z);\n    vec3 ta = vec3(0, 10.0, z + 10.0);\n    \n    vec3 ray = camera(ro, ta, iTime) * normalize(vec3(uv, 1.5));\n    \n    float d = 0.0;\n    vec3 p = ro;\n    \n    for (int i = 0; i < 256; i++)\n    {\n        d = distFunc(p);\n        \n        if (d < 0.01)\n        {\n            break;\n        }\n        \n        p += ray * d;\n    }\n    \n    vec3 col = vec3(0.0);\n    vec3 light = normalize(vec3(1.0, 1.0, 0.5));\n    \n    if (d < 0.01)\n    {\n    \tvec3 nor = getNormal(p);\n        float d = dot(nor, light);\n        d = clamp(d, 0.05, 1.0);\n        col = vec3(d) * nor;\n        col = pow(col, vec3(0.4545));\n    }\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}