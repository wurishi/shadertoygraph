{"ver":"0.1","info":{"id":"7djfzd","date":"1646986012","viewed":150,"name":"GraphingShader","username":"MrHAX00","description":"A simple equation grapher that allows you to plug in an equation and what it should be equal to.\n\nThe default equation I've provided is a triangle wave that is being distorted but you can get rid of its variables and plug your own equations.","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["math","graphing","calculator","graphingcalculator"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define Zoom .25\n\n#define PlotColor vec3(1., 0., 1.)\n#define BgColor vec3(0.)\n#define GridColor vec3(.3, .5, .3)\n\n//Default equation and its variables:\n#define Height (cos(iTime * pi) * .2 + .8)\n#define Length (cos((uv.x + iTime) * .2 * pi) * .3 + .7)\n#define Equation abs(mod((uv.x) / Length, 1.) - .5) * -Height * 4. + Height\n\n//What the equation equals to:\n#define Equals uv.y //this can be a number if you're trying to outline a shape\n\nbool RunEquation(vec2 fragCoord)\n{\n    bool HasNegative;\n    bool HasPositive;\n    \n    for (int X = -1; X < 2 && !(HasNegative && HasPositive); X += 2) {\n        for (int Y = -1; Y < 2 && !(HasNegative && HasPositive); Y += 2) {\n            vec2 uv = (fragCoord.xy + vec2(X, Y) - iResolution.xy * .5) / iResolution.y;\n            uv /= Zoom * .5;\n            \n            float Result = Equation;\n            \n            HasNegative = HasNegative || (Result <= Equals);\n            HasPositive = HasPositive || (Result >= Equals);\n        }\n    }\n    \n    return HasNegative && HasPositive;\n}\n\nbool Grid(vec2 fragCoord)\n{\n    bool HasNegative;\n    bool HasPositive;\n    \n    for (int X = -1; X < 2 && !(HasNegative && HasPositive); X += 2) {\n        for (int Y = -1; Y < 2 && !(HasNegative && HasPositive); Y += 2) {\n            vec2 uv = (fragCoord.xy + vec2(X, Y)) / iResolution.xy;\n            float AspectRatio = iResolution.x / iResolution.y;\n            uv.x *= AspectRatio;\n            uv -= vec2(AspectRatio * .5, .5);\n            uv *= 2.;\n            uv /= Zoom;\n            uv = mod(uv, 2.) * 2. - 2.;\n            \n            float Result = uv.x * uv.y;\n            \n            HasNegative = HasNegative || (Result <= 0.);\n            HasPositive = HasPositive || (Result >= 0.);\n        }\n    }\n    \n    return HasNegative && HasPositive;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (RunEquation(fragCoord)) {\n        fragColor = vec4(PlotColor, 1.);\n    } else if (Grid(fragCoord)) {\n        fragColor = vec4(GridColor,1.);\n    } else {\n        fragColor = vec4(BgColor,1.);\n    }\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"#define pi 3.14159","name":"Common","description":"","type":"common"}]}