{"ver":"0.1","info":{"id":"ssS3R3","date":"1617728996","viewed":53,"name":"Space deformation: norm, dotprod","username":"theott","description":"The space can be switched between Euclidian and Lorenzian with parameter l. The p-norm can also be changed using the parameter p. ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["space","norm","lorenzian"],"hasliked":0,"parentid":"Nd23zG","parentname":"Unit circle with different norms"},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const bool auto = true; // false to change paramters with mouse: l in y, p in x. \nconst bool circles = true; // true to show circles concentric to the origin.\n\nfloat norm(vec2 v, float p, float l){\n    return pow(abs(pow(abs(v.x),p) + l * pow(abs(v.y),p)) ,1./p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from -1 to 1)\n    vec2 uv = ( 2.* fragCoord - iResolution.xy ) / iResolution.y;\n\n    // Background\n    vec3 col = vec3(0);\n\n    // Normalize mouse coordinates (from 0 to 1)\n    vec2 mouse = iMouse.xy / iResolution.xy;  \n\n    // p-Norm parameter\n    float p = sin(iTime)+2.1;\n    if (!auto) p = mouse.x*3.;\n    // Scalar product parameter (1: Euclidian, -1: Lorenzian)\n    float l = cos(iTime / 2.);\n    if (!auto) l =  mouse.y * 2. - 1.;\n    \n    // Distance from pixel to origin\n    float d = norm(uv, p, l);\n    \n    // Concentric circles\n    float radius = .5;\n    if (circles){\n    for (int i=0; i<10; i++){\n        col += 1.-step(.01, abs(d - float(i)*radius));\n    }}\n    \n    // Texture\n    vec2 tco = uv/length(uv) * d; //preserves angles (conformal)\n    col += texture(iChannel0, tco).rgb;\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}