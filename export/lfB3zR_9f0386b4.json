{"ver":"0.1","info":{"id":"lfB3zR","date":"1703735005","viewed":135,"name":"Copy of 71372.0","username":"corabelster","description":"Translation of the original shader: https://glslsandbox.com/e#71372.0","likes":4,"published":3,"flags":0,"usePreview":0,"tags":["glslsandbox"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"   vec3 field(vec3 p) {\n        p *= .1;\n        float f = .1;\n        for (int i = 0; i < 5; i++) {\n            p = p.yzx*mat3(.8,.6,0,-.6,.8,0,0,0,1);\n            p += vec3(.123,.456,.789)*float(i);\n            p = abs(fract(p)-.5);\n            p *= 2.0;\n            f *= 2.0;\n        }\n        p *= p;\n        return sqrt(p+p.yzx)/f-.002;\n    }\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 iResolution = iResolution.xy;  // ShaderToy built-in resolution\n    vec2 iMouse = iMouse.xy / iResolution.xy;  // Normalized mouse coordinates\n\n    #define R_FACTOR 5.\n    #define G_FACTOR 0.\n    #define B_FACTOR 0.\n\n    const int MAXITER = 42;\n\n \n    vec3 dir = normalize(vec3((fragCoord.xy-iResolution*.5)/iResolution.x,1.));\n    vec3 pos = vec3(iMouse-.5,iTime);\n    vec3 color = vec3(0);\n    for (int i = 0; i < MAXITER; i++) {\n        vec3 f2 = field(pos);\n        float f = min(min(f2.x,f2.y),f2.z);\n        \n        pos += dir*f;\n        color += float(MAXITER-i)/(f2+.001);\n    }\n    vec3 color3 = vec3(1.-1./(1.+color*(.09/float(MAXITER*MAXITER))));\n    color3 *= color3;\n    fragColor = vec4(color3.r*R_FACTOR, color3.g*G_FACTOR, color3.b*B_FACTOR,1.);\n}\n","name":"Image","description":"","type":"image"}]}