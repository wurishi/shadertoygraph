{"ver":"0.1","info":{"id":"7tcSzN","date":"1638786073","viewed":335,"name":"reaction diffusion on a gradient","username":"lonelyGizmo","description":"forked from https://www.shadertoy.com/view/MssyDf","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["reactiondiffusion","multipass"],"hasliked":0,"parentid":"fldSRH","parentname":"reaction diffusion multibuffer"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define COLOR_MIN 0.2\n#define COLOR_MAX 0.35\n\nfloat getGradient(vec2 uv)\n{\n  return (COLOR_MAX - texture(iChannel0, uv).y) /\n         (COLOR_MAX - COLOR_MIN);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfloat v = getGradient(uv);\n    \n    fragColor = vec4(v, v, v, 0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define TIMESTEP 1.0\n\n#define F 0.0545\n#define K 0.062\n#define Da 1.0\n#define Db 0.5\n\n#define szxa 0.496\n#define szxb 0.504\n#define szya 0.49\n#define szyb 0.51\n\n\nvoid getVal(vec2 p, out vec2 val, out vec2 laplacian) {\n  vec2 r = iResolution.xy;\n  vec2 uv = p / r;\n  vec2 n = p + vec2(0.0, 1.0);\n  vec2 ne = p + vec2(1.0, 1.0);\n  vec2 nw = p + vec2(-1.0, 1.0);\n  vec2 e = p + vec2(1.0, 0.0);\n  vec2 s = p + vec2(0.0, -1.0);\n  vec2 se = p + vec2(1.0, -1.0);\n  vec2 sw = p + vec2(-1.0, -1.0);\n  vec2 w = p + vec2(-1.0, 0.0);\n\n  val = texture(iChannel0, uv).xy;\n  laplacian = texture(iChannel0, n / r).xy * 0.2;\n  laplacian += texture(iChannel0, e / r).xy * 0.2;\n  laplacian += texture(iChannel0, s / r).xy * 0.2;\n  laplacian += texture(iChannel0, w / r).xy * 0.2;\n  laplacian += texture(iChannel0, nw / r).xy * 0.05;\n  laplacian += texture(iChannel0, ne / r).xy * 0.05;\n  laplacian += texture(iChannel0, sw / r).xy * 0.05;\n  laplacian += texture(iChannel0, se / r).xy * 0.05;\n  laplacian += -1.0 * val;   \n}\n\nfloat interp(float x,float xa,float xb, float ya, float yb){\n    return ya+(x-xa)*((yb-ya)/(xb-xa));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 colour = vec3(0.0);\n    if (iFrame < 10) {\n        if (uv.x > szxa && uv.x < szxb && uv.y > szya && uv.y < szyb) {\n            colour = vec3(1.0);\n        }\n    } else {\n        vec2 val, laplacian;\n        getVal(fragCoord.xy, val, laplacian);\n        vec2 delta;\n        float distFC=length(uv-vec2(0.5));\n        float nF=interp(distFC,0.0,0.5, 0.06, 0.05)+(mod(uv.x*3544.0*uv.y*153.0,3.0)/1000.0+mod(uv.y*549875.0,3.0)/10000.0)*(0.5-distFC);\n        float nK=interp(distFC,0.0,0.5, 0.06, 0.07)+(mod(uv.x*1389.0*uv.y*1986.0,3.0)/1000.0+mod(uv.y*1896354.0,3.0)/10000.0)*(0.5-distFC);\n        //(distFC,0.0,0.5, 0.055, 0.09)\n        delta.x = Da * laplacian.x - val.x * val.y * val.y + nF * (1.0 - val.x);\n        delta.y = Db * laplacian.y + val.x * val.y * val.y - (nK + nF) * val.y;\n        colour = vec3(val + delta * TIMESTEP, 0.0);\n    }\n    fragColor = vec4(colour,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}