{"ver":"0.1","info":{"id":"Xs3cz7","date":"1518142545","viewed":81,"name":"Cut Cube-CIS 566","username":"jamie2719","description":"CIS 566 project 1","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.15926\n\n//#define OUTLINE //uncomment this line to render only the outlines of the planes \n\n\nmat4 rotate(vec3 rot) {\n\tmat4 rx = mat4(vec4(1, 0, 0, 0),\n\t\t\t\t\tvec4(0, cos(rot.x * PI/180.0), sin(rot.x * PI/180.0), 0),\n\t\t\t\t\tvec4(0, -sin(rot.x * PI/180.0), cos(rot.x * PI/180.0), 0),\n\t\t\t\t\tvec4(0, 0, 0, 1));\n\tmat4 ry = mat4(vec4(cos(rot.y * PI/180.0), 0, -sin(rot.y * PI/180.0), 0),\n\t\t\t\t\tvec4(0, 1, 0, 0),\n\t\t\t\t\tvec4(sin(rot.y * PI/180.0), 0, cos(rot.y * PI/180.0), 0),\n\t\t\t\t\tvec4(0, 0, 0, 1));\n\tmat4 rz = mat4(vec4(cos(rot.z * PI/180.0), sin(rot.z * PI/180.0), 0, 0),\n\t\t\t\t\tvec4(-sin(rot.z * PI/180.0), cos(rot.z * PI/180.0), 0, 0),\n\t\t\t\t\tvec4(0, 0, 1, 0),\n\t\t\t\t\tvec4(0, 0, 0, 1));\n\t\t\t\t\t\n\treturn rz * ry * rx;\n\t\n}\n\nmat4 translate(vec3 trans) {\n\treturn mat4(vec4(1, 0, 0, 0),\n\t\t\t\tvec4(0, 1, 0, 0),\n\t\t\t\tvec4(0, 0, 1, 0),\n\t\t\t\tvec4(trans.x, trans.y, trans.z, 1));\n}\n\n\n\nfloat unionSDF(float distA, float distB) {\n    return min(distA, distB);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\n\nfloat sdBox(vec3 p, vec3 b, vec3 rot, vec3 trans, float rotSpeed)\n{\n    p = vec3(rotate(rot * rotSpeed) * vec4(p, 1));\n    p = vec3(translate(trans) * vec4(p, 1));\n    \n    \n  \tvec3 d = abs(p) - b;\n  \treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\n\nfloat sceneSDF(vec3 p) {\n    float rotSpeed =  smoothstep(.3, 1.0, clamp(fract(iTime * .6) * 2.0 - 1.0, 0.0, 1.0)) + floor(iTime * .6);\n    float rotSpeed1 = smoothstep(.4, 1.0, clamp(fract(iTime * .6) * 2.0 - 1.0, 0.0, 1.0)) + floor(iTime * .6);\n    float rotSpeed2 = smoothstep(.5, 1.0, clamp(fract(iTime * .6) * 2.0 - 1.0, 0.0, 1.0)) + floor(iTime * .6);\n    float rotSpeed3 = smoothstep(.6, 1.0, clamp(fract(iTime * .6) * 2.0 - 1.0, 0.0, 1.0)) + floor(iTime * .6);\n    float rotSpeed4 = smoothstep(.7, 1.0, clamp(fract(iTime * .6) * 2.0 - 1.0, 0.0, 1.0)) + floor(iTime * .6);\n    float rotSpeed5 = smoothstep(.8, 1.0, clamp(fract(iTime * .6) * 2.0 - 1.0, 0.0, 1.0)) + floor(iTime * .6);\n    float rotSpeed6 = smoothstep(.9, 1.0, clamp(fract(iTime * .6) * 2.0 - 1.0, 0.0, 1.0)) + floor(iTime * .6);\n    \n    float bounceSpeed = (cos((iTime -.15) * 4.0) + 1.0) / 2.0 + .8;\n\n    \n    float centerCube = sdBox(p, vec3(1, 1, 1), vec3(0, -90, 0), vec3(0, 0, 0), rotSpeed);\n    //float centerCubei = sdBox(p, vec3(.9, 1.2, 1.2), vec3(0, -90, 0), vec3(0, 0, 0), rotSpeed);\n    //centerCube = opS(centerCubei, centerCube);\n    \n    \n    \n    //front planes\n    float frontWall =  sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, -2.0 * bounceSpeed), rotSpeed1);\n    float frontWall2 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, -2.2 * bounceSpeed), rotSpeed2);    \n    float frontWall3 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, -2.4 * bounceSpeed), rotSpeed3);    \n    float frontWall4 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, -2.5 * bounceSpeed), rotSpeed4);    \n    float frontWall5 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, -2.6 * bounceSpeed), rotSpeed5);    \n    float frontWall6 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, -2.7 * bounceSpeed), rotSpeed6);\n    \n    #ifdef OUTLINE\n    float frontWalli = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, -2.0 * bounceSpeed), rotSpeed1);\n    float frontWall2i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, -2.2 * bounceSpeed), rotSpeed2);\n    float frontWall3i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, -2.4 * bounceSpeed), rotSpeed3);\n    float frontWall4i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, -2.5 * bounceSpeed), rotSpeed4);\n    float frontWall5i = sdBox(p, vec3(.95, .95, .015), vec3(0, -90, 0), vec3(0, 0, -2.6 * bounceSpeed), rotSpeed5);\n    float frontWall6i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, -2.7 * bounceSpeed), rotSpeed6);\n    \n    frontWall = opS(frontWalli, frontWall);\n    frontWall2 = opS(frontWall2i, frontWall2);\n    frontWall3 = opS(frontWall3i, frontWall3);\n    frontWall4 = opS(frontWall4i, frontWall4);\n    frontWall5 = opS(frontWall5i, frontWall5);\n    frontWall6 = opS(frontWall6i, frontWall6);\n    #endif\n    \n    frontWall = unionSDF(frontWall, frontWall2);\n    frontWall = unionSDF(frontWall, frontWall3);\n    frontWall = unionSDF(frontWall, frontWall4);\n    frontWall = unionSDF(frontWall, frontWall5);\n    frontWall = unionSDF(frontWall, frontWall6);\n    \n   \n    \n    //back planes\n    float backWall =  sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, 2.0 * bounceSpeed), rotSpeed1);\n    float backWall2 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, 2.2 * bounceSpeed), rotSpeed2);\n    float backWall3 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, 2.4 * bounceSpeed), rotSpeed3);\n    float backWall4 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, 2.5 * bounceSpeed), rotSpeed4);\n    float backWall5 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, 2.6 * bounceSpeed), rotSpeed5);\n    float backWall6 = sdBox(p, vec3(1, 1, .01), vec3(0, -90, 0), vec3(0, 0, 2.7 * bounceSpeed), rotSpeed6);\n    \n    #ifdef OUTLINE\n    float backWalli =  sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, 2.0 * bounceSpeed), rotSpeed1);\n    float backWall2i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, 2.2 * bounceSpeed), rotSpeed2);\n    float backWall3i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, 2.4 * bounceSpeed), rotSpeed3);\n    float backWall4i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, 2.5 * bounceSpeed), rotSpeed4);\n    float backWall5i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, 2.6 * bounceSpeed), rotSpeed5);\n    float backWall6i = sdBox(p, vec3(.95, .95, .05), vec3(0, -90, 0), vec3(0, 0, 2.7 * bounceSpeed), rotSpeed6);\n    \n    backWall = opS(backWalli, backWall);\n    backWall2 = opS(backWall2i, backWall2);\n    backWall3 = opS(backWall3i, backWall3);\n    backWall4 = opS(backWall4i, backWall4);\n    backWall5 = opS(backWall5i, backWall5);\n    backWall6 = opS(backWall6i, backWall6);\n    #endif\n    \n    backWall = unionSDF(backWall, backWall2);\n    backWall = unionSDF(backWall, backWall3);\n    backWall = unionSDF(backWall, backWall4);\n    backWall = unionSDF(backWall, backWall5);\n    backWall = unionSDF(backWall, backWall6);\n    \n    \n    //left planes\n    float leftWall =  sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(2.0 * bounceSpeed, 0.0, 0.0), rotSpeed1);\n    float leftWall2 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(2.2 * bounceSpeed, 0.0, 0.0), rotSpeed2);\n    float leftWall3 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(2.4 * bounceSpeed, 0.0, 0.0), rotSpeed3);\n    float leftWall4 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(2.5 * bounceSpeed, 0.0, 0.0), rotSpeed4);\n    float leftWall5 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(2.6 * bounceSpeed, 0.0, 0.0), rotSpeed5);\n    float leftWall6 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(2.7 * bounceSpeed, 0.0, 0.0), rotSpeed6);\n    \n    #ifdef OUTLINE\n    float leftWalli =  sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(2.0 * bounceSpeed, 0.0, 0.0), rotSpeed1);\n    float leftWall2i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(2.2 * bounceSpeed, 0.0, 0.0), rotSpeed2);\n    float leftWall3i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(2.4 * bounceSpeed, 0.0, 0.0), rotSpeed3);\n    float leftWall4i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(2.5 * bounceSpeed, 0.0, 0.0), rotSpeed4);\n    float leftWall5i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(2.6 * bounceSpeed, 0.0, 0.0), rotSpeed5);\n    float leftWall6i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(2.7 * bounceSpeed, 0.0, 0.0), rotSpeed6);\n    \n    leftWall = opS(leftWalli, leftWall);\n    leftWall2 =opS(leftWall2i, leftWall2);\n    leftWall3 =opS(leftWall3i, leftWall3);\n    leftWall4 =opS(leftWall4i, leftWall4);\n    leftWall5 =opS(leftWall5i, leftWall5);\n    leftWall6 =opS(leftWall6i, leftWall6);\n    #endif\n    \n    leftWall = unionSDF(leftWall, leftWall2);\n    leftWall = unionSDF(leftWall, leftWall3);\n    leftWall = unionSDF(leftWall, leftWall4);\n    leftWall = unionSDF(leftWall, leftWall5);\n    leftWall = unionSDF(leftWall, leftWall6);\n    \n     \n    \n    \n    //right planes\n    float rightWall =  sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(-2.0 * bounceSpeed, 0.0, 0.0), rotSpeed1);\n    float rightWall2 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(-2.2 * bounceSpeed, 0.0, 0.0), rotSpeed2);\n    float rightWall3 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(-2.4 * bounceSpeed, 0.0, 0.0), rotSpeed3);\n    float rightWall4 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(-2.5 * bounceSpeed, 0.0, 0.0), rotSpeed4);\n    float rightWall5 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(-2.6 * bounceSpeed, 0.0, 0.0), rotSpeed5);\n    float rightWall6 = sdBox(p, vec3(.01, 1, 1), vec3(0, -90, 0), vec3(-2.7 * bounceSpeed, 0.0, 0.0), rotSpeed6);\n    \n    #ifdef OUTLINE\n    float rightWalli =  sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(-2.0 * bounceSpeed, 0.0, 0.0), rotSpeed1);\n    float rightWall2i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(-2.2 * bounceSpeed, 0.0, 0.0), rotSpeed2);\n    float rightWall3i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(-2.4 * bounceSpeed, 0.0, 0.0), rotSpeed3);\n    float rightWall4i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(-2.5 * bounceSpeed, 0.0, 0.0), rotSpeed4);\n    float rightWall5i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(-2.6 * bounceSpeed, 0.0, 0.0), rotSpeed5);\n    float rightWall6i = sdBox(p, vec3(.05, .95, .95), vec3(0, -90, 0), vec3(-2.7 * bounceSpeed, 0.0, 0.0), rotSpeed6);\n    \n    rightWall = opS(rightWalli, rightWall);\n    rightWall2 = opS(rightWall2i, rightWall2);\n    rightWall3 = opS(rightWall3i, rightWall3);\n    rightWall4 = opS(rightWall4i, rightWall4);\n    rightWall5 = opS(rightWall5i, rightWall5);\n    rightWall6 = opS(rightWall6i, rightWall6);\n    #endif\n    \n    rightWall = unionSDF(rightWall, rightWall2);\n    rightWall = unionSDF(rightWall, rightWall3);\n    rightWall = unionSDF(rightWall, rightWall4);\n    rightWall = unionSDF(rightWall, rightWall5);\n    rightWall = unionSDF(rightWall, rightWall6);\n    \n    \n    //top planes\n    float topWall =  sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, -2.0 * bounceSpeed, 0.0), rotSpeed1);\n    float topWall2 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, -2.2 * bounceSpeed, 0.0), rotSpeed2);\n    float topWall3 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, -2.4 * bounceSpeed, 0.0), rotSpeed3);\n    float topWall4 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, -2.5 * bounceSpeed, 0.0), rotSpeed4);\n    float topWall5 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, -2.6 * bounceSpeed, 0.0), rotSpeed5);\n    float topWall6 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, -2.7 * bounceSpeed, 0.0), rotSpeed6);\n    \n    #ifdef OUTLINE\n    float topWalli =  sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, -2.0 * bounceSpeed, 0.0), rotSpeed1);\n    float topWall2i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, -2.2 * bounceSpeed, 0.0), rotSpeed2);\n    float topWall3i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, -2.4 * bounceSpeed, 0.0), rotSpeed3);\n    float topWall4i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, -2.5 * bounceSpeed, 0.0), rotSpeed4);\n    float topWall5i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, -2.6 * bounceSpeed, 0.0), rotSpeed5);\n    float topWall6i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, -2.7 * bounceSpeed, 0.0), rotSpeed6);\n    \n    topWall =  opS(topWalli, topWall);\n    topWall2 = opS(topWall2i, topWall2);\n    topWall3 = opS(topWall3i, topWall3);\n    topWall4 = opS(topWall4i, topWall4);\n    topWall5 = opS(topWall5i, topWall5);\n    topWall6 = opS(topWall6i, topWall6);\n    #endif\n    \n    topWall = unionSDF(topWall, topWall2);\n    topWall = unionSDF(topWall, topWall3);\n    topWall = unionSDF(topWall, topWall4);\n    topWall = unionSDF(topWall, topWall5);\n    topWall = unionSDF(topWall, topWall6);\n    \n    \n    //bottom planes\n    float bottomWall =  sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, 2.0 * bounceSpeed, 0.0), rotSpeed1);\n    float bottomWall2 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, 2.2 * bounceSpeed, 0.0), rotSpeed2);\n    float bottomWall3 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, 2.4 * bounceSpeed, 0.0), rotSpeed3);\n    float bottomWall4 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, 2.5 * bounceSpeed, 0.0), rotSpeed4);\n    float bottomWall5 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, 2.6 * bounceSpeed, 0.0), rotSpeed5);\n    float bottomWall6 = sdBox(p, vec3(1, .01, 1), vec3(0, -90, 0), vec3(0, 2.7 * bounceSpeed, 0.0), rotSpeed6);\n    \n    #ifdef OUTLINE\n    float bottomWalli =  sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, 2.0 * bounceSpeed, 0.0), rotSpeed1);\n    float bottomWall2i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, 2.2 * bounceSpeed, 0.0), rotSpeed2);\n    float bottomWall3i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, 2.4 * bounceSpeed, 0.0), rotSpeed3);\n    float bottomWall4i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, 2.5 * bounceSpeed, 0.0), rotSpeed4);\n    float bottomWall5i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, 2.6 * bounceSpeed, 0.0), rotSpeed5);\n    float bottomWall6i = sdBox(p, vec3(.95, .05, .95), vec3(0, -90, 0), vec3(0, 2.7 * bounceSpeed, 0.0), rotSpeed6);\n    \n    \n    bottomWall = opS(bottomWalli, bottomWall);\n    bottomWall2 =opS(bottomWall2i, bottomWall2);\n    bottomWall3 =opS(bottomWall3i, bottomWall3);\n    bottomWall4 =opS(bottomWall4i, bottomWall4);\n    bottomWall5 =opS(bottomWall5i, bottomWall5);\n    bottomWall6 =opS(bottomWall6i, bottomWall6);\n    #endif\n    \n    bottomWall = unionSDF(bottomWall, bottomWall2);\n    bottomWall = unionSDF(bottomWall, bottomWall3);\n    bottomWall = unionSDF(bottomWall, bottomWall4);\n    bottomWall = unionSDF(bottomWall, bottomWall5);\n    bottomWall = unionSDF(bottomWall, bottomWall6);\n  \n    \n    //union all walls together\n    frontWall = unionSDF(frontWall, backWall);\n    frontWall = unionSDF(frontWall, leftWall);\n   \tfrontWall = unionSDF(frontWall, rightWall);\n   \tfrontWall = unionSDF(frontWall, topWall);\n    frontWall = unionSDF(frontWall, bottomWall);\n    \n    return unionSDF(centerCube, frontWall);\n}\n\nvec3 toWorldSpace(vec3 p, vec3 eye, vec3 ref) {\n\tfloat fov = 75.0;\n\n\tfloat sx = (p.x);\n    float sy = (p.y);\n    float A = iResolution.x / iResolution.y;\n    float alpha = fov / 2.0 * (3.159 / 180.0);\n    vec3 forward = normalize(ref - eye);\n   \tvec3 right = normalize(cross(vec3(0, 1, 0), -forward));\n   \tvec3 localUp = normalize(cross(-forward, right));\n    \n    \n\n    //convert screen point to world point\n    float len = .1;//length(forward);\n    vec3 V = (localUp * len * tan(alpha));\n    vec3 H = right * A * len *tan(alpha);\n\n    return vec3(eye + len * forward + sx * H + sy * V); //world point \n}\n\nbool raymarch(vec3 p, vec3 eye, vec3 ref) {\n    //get ray from world point\n    vec3 dir = normalize(p - eye);\n    vec3 origin = eye;\n    \n    \n    \n    float scene;\n    vec3 minInter; \n    vec3 intersection;\n    bool intersected = false;\n    float t = 0.01;\n\tfor (int i = 0; i < 64; i++) {\n\t\tintersection = origin + dir * t;\n\t\tintersection = vec3(rotate(vec3(30, 45, 0)) * vec4(intersection, 1));\n        \n        scene = sceneSDF(intersection);\n\t\t\n\t\tif(scene <= .001) {\n\t\t\tintersected = true;\n\t\t\tminInter = intersection;\n\t\t\tbreak;\n\t\t}\n\t\tt += scene;\n\t}\n   \treturn intersected;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 scrPt = uv * 2.0 - 1.0; // Transform to NDC\n    scrPt *= iResolution.x / iResolution.y;\n    \n    vec3 eye =  vec3(0, 1, -6);\n    vec3 ref = vec3(0.0, 0.0, 0.0);\n    \n    \n    vec3 p = toWorldSpace(vec3(scrPt, 1), eye, ref);\n    \n    \n    float _time = iTime;\n    \n    vec3 col;\n    if(raymarch(p, eye, ref)) {\n        col = vec3(1, 1, 1);\n    }\n    else {\n        col = vec3(0, 0, 0);\n    }\n    \n   \tfragColor = vec4(col, 1);\n    \n}\n","name":"Image","description":"","type":"image"}]}