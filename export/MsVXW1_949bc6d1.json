{"ver":"0.1","info":{"id":"MsVXW1","date":"1464213076","viewed":147,"name":"shadow galley","username":"jameswilddev","description":"been a while, will this do","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["volumetrics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 plane(vec2 pos, vec3 ndc) {\n    float divisor = length(pos) / dot(normalize(pos), ndc.xy);\n    return vec3(dot(ndc.yx, normalize(pos)) * divisor, abs(divisor) + ndc.z, abs(divisor));\n}\n\nvec3 planeZ(float z, vec3 ndc) {\n    return vec3(ndc.xy * (z - ndc.z), z - ndc.z);\n}\n\nvec3 light(vec3 ndc, vec3 location, vec3 color, float size, float rate, float scene) {\n    vec3 sampleFrom = vec3(ndc.xy * (location.z - ndc.z), min(scene + ndc.z, location.z));\n    return color * pow(1.0 / (1.0 + (distance(location, sampleFrom) / size)), rate);\n}\n\nvec3 combine(vec3 a, vec3 b) {\n    return a.z < b.z ? a : b;\n}\n\nbool inChequer(vec3 ndc) {\n    vec2 local = fract(ndc.xy);\n    return local.x > 0.5 != local.y > 0.5;\n}\n\nvec3 chequer(vec3 ndc, float falloff) {\n    vec2 local = fract(ndc.xy);\n    return (local.x > 0.5 != local.y > 0.5 ? vec3(1.0, 1.0, 0.3) : vec3(0.3, 0.3, 1.0)) / (1.0 + ndc.z * falloff);\n}\n\nvec3 gammaCorrect(vec3 c) {\n    return pow(c, vec3(1.0 / 2.2));\n}\n\nvec3 render(vec2 fragCoord, vec2 res, float seconds) {\n    vec3 ndc = vec3((fragCoord - res / 2.0) / min(res.x, res.y), 5.0);\n    vec3 near = planeZ(8.0, ndc);\n    vec3 left = plane(vec2(floor((near.x > 0.0 ? 1.0 : 0.0) + near.x * 2.0) * 0.5, 0.0), ndc);\n    vec3 bottom = plane(vec2(0.0, floor((near.y > 0.0 ? 1.0 : 0.0) + near.y * 2.0) * 0.5), ndc);\n    vec3 far = planeZ(9.0 + sin(seconds + dot(floor(near.xy * 2.0), vec2(cos(seconds * 0.2), sin(seconds * 0.2)))) * 1.0, ndc);\n    vec3 scene = inChequer(near) ? near : combine(far, combine(left, bottom));\n    return gammaCorrect(\n        chequer(scene * 4.0, 40.0) \n        + light(ndc, vec3(cos(seconds * 0.2), sin(seconds * 0.2), 8.5), vec3(2.0, 0.0, 0.0), 0.5, 4.0, scene.z)\n    \t+ light(ndc, vec3(-cos(seconds * 0.2), -sin(seconds * 0.2), 8.5), vec3(2.0, 2.0, 0.0), 0.5, 4.0, scene.z)\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = vec4(render(fragCoord.xy, iResolution.xy, iTime), 1.0);\n}","name":"Image","description":"","type":"image"}]}