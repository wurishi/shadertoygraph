{"ver":"0.1","info":{"id":"lXjyWK","date":"1727744426","viewed":26,"name":"Psychedelic Fluid Animation","username":"froggynotacon","description":"Psychedelic Fluid Animation","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["plasma","fluid","psychedelic","simplexnoise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Psychedelic Fluid Animation\n// This code is licensed under Creative Commons 0 1.0 license.  No rights reserved.\n\n#define PI 3.14159265359\n\n// Simplex 2D noise\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\n           -0.577350269189626, 0.024390243902439);\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n  vec2 i1;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n  + i.x + vec3(0.0, i1.x, 1.0 ));\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n    dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nvec3 rgb2hsv(vec3 c) {\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    float time = iTime * 0.1; // Slow down the animation\n    \n    // Create base noise pattern\n    float noise1 = snoise(uv * 3.0 + time);\n    float noise2 = snoise(uv * 5.0 - time * 1.5);\n    float noise3 = snoise(uv * 7.0 + time * 0.5);\n    \n    // Combine noise patterns\n    float combinedNoise = (noise1 + noise2 + noise3) / 3.0;\n    \n    // Create swirling effect\n    vec2 swirl = vec2(\n        sin(uv.x * PI * 2.0 + time + combinedNoise),\n        cos(uv.y * PI * 2.0 - time + combinedNoise)\n    );\n    \n    // Generate base color\n    vec3 color = vec3(\n        sin(swirl.x + time) * 0.5 + 0.5,\n        sin(swirl.y + time * 1.2) * 0.5 + 0.5,\n        sin((swirl.x + swirl.y) * 0.5 + time * 0.7) * 0.5 + 0.5\n    );\n    \n    // Convert to HSV for easier manipulation\n    vec3 hsv = rgb2hsv(color);\n    \n    // Modify hue based on noise\n    hsv.x = fract(hsv.x + combinedNoise * 0.2 + time * 0.1);\n    \n    // Increase saturation\n    hsv.y = clamp(hsv.y * 1.5, 0.0, 1.0);\n    \n    // Modify value (brightness) based on noise\n    hsv.z = clamp(hsv.z + combinedNoise * 0.3, 0.0, 1.0);\n    \n    // Convert back to RGB\n    color = hsv2rgb(hsv);\n    \n    // Add some subtle patterns\n    color += 0.05 * sin(30.0 * uv.x + time) * sin(30.0 * uv.y - time);\n    color += 0.05 * sin(50.0 * uv.x - time * 0.7) * sin(50.0 * uv.y + time * 0.7);\n    \n    // Ensure colors stay in valid range\n    color = clamp(color, 0.0, 1.0);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Image","description":"","type":"image"}]}