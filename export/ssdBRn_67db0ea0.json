{"ver":"0.1","info":{"id":"ssdBRn","date":"1655944789","viewed":224,"name":"Cube from Bobs, Point Projection","username":"TrueBoolean","description":"Simple 3D point projection sample, as a starting point to those looking to do 3D with lines or polygons.\nRenders a cube's corner points. I'm well aware it is not anti-aliased.\nA demo to show how to convert 3D points to 2D points on screen and transforms.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["3d","simple","tutorial","cube","demo","sample"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define rot(x) mat2(cos(x), -sin(x), sin(x), cos(x))\n#define line(p, a, b) length(p-a-(b-a)*clamp(dot(p-a,b-a)/dot(b-a,b-a), 0., 1.))\n\nvoid mainImage( out vec4 C, vec2 U ){\n\n    //Cube corner points\n    vec3 corner[8];\n    \n    corner[0] = vec3( .5, .5, .5);\n    corner[1] = vec3(-.5, .5, .5);\n    corner[2] = vec3( .5,-.5, .5);\n    corner[3] = vec3(-.5,-.5, .5);\n    \n    corner[4] = vec3( .5, .5, -.5);\n    corner[5] = vec3(-.5, .5, -.5);\n    corner[6] = vec3( .5,-.5, -.5);\n    corner[7] = vec3(-.5,-.5, -.5);\n     \n    for(int i = 0; i < 8; ++i){\n    \n        //Spin the cube\n        corner[i].xy *= rot(iTime);\n        corner[i].yz *= rot(iTime/2.);\n        corner[i].xz *= rot(iTime/7.);\n        \n        //Move in front of the camera (the camera is at the origin looking forward)\n        corner[i].z += 1.5;\n        \n        //Move the cube around on screen\n        corner[i].xy += sin(iTime)/2.;\n        \n        //Project the transformed 3D points into 2D points X, Y on screen\n        corner[i].xy /= corner[i].z;\n    }\n    \n    C = vec4(1.);\n    U = (U+U-iResolution.xy)/min(iResolution.x, iResolution.y);\n    \n    //Render each corner point as a z-scaled circle \"a bob\", placed at 2D screen position\n    //The scale of the circles will be the main form of 3D depth information to the eye\n    for(int i = 0; i < 8; ++i)\n        if(length(corner[i].xy-U.xy) < .25/corner[i].z){\n            C = vec4(0.);\n            return;\n        }\n            \n    //Now connect corner points with 2D lines\n    const float wi = .01;\n    if(\n    line(U.xy, corner[0].xy, corner[1].xy) <= wi ||\n    line(U.xy, corner[0].xy, corner[2].xy) <= wi ||\n    line(U.xy, corner[2].xy, corner[3].xy) <= wi ||\n    line(U.xy, corner[3].xy, corner[1].xy) <= wi ||\n        \n    line(U.xy, corner[4].xy, corner[5].xy) <= wi ||\n    line(U.xy, corner[4].xy, corner[6].xy) <= wi ||\n    line(U.xy, corner[6].xy, corner[7].xy) <= wi ||\n    line(U.xy, corner[7].xy, corner[5].xy) <= wi ||\n        \n    line(U.xy, corner[0].xy, corner[4].xy) <= wi ||\n    line(U.xy, corner[1].xy, corner[5].xy) <= wi ||\n    line(U.xy, corner[2].xy, corner[6].xy) <= wi ||\n    line(U.xy, corner[3].xy, corner[7].xy) <= wi\n    )\n        C = vec4(0.);\n    \n}","name":"Image","description":"","type":"image"}]}