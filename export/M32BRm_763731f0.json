{"ver":"0.1","info":{"id":"M32BRm","date":"1729299807","viewed":54,"name":"Stochastic Anisotropic Diffusion","username":"luckyballa","description":"experiment","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["filtering","diffusion","smoothing"],"hasliked":0,"parentid":"MXSfRw","parentname":"Total variation denoising"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 orig = texture(iChannel1, uv).xyz;\n    vec2 m = iMouse.xy / iResolution.xy;\n    if(m.x <= 0.0 &&  m.y <= 0.0) m.x = .5;\n    \n    vec3 curr = texture(iChannel0, uv).xyz;\n    \n    fragColor = vec4( m.x > uv.x ? orig : curr, 1.0);  \n    fragColor += step(abs(m.x - uv.x), 0.001);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"uint hash(inout uint x) {\n    x ^= x >> 16;\n    x *= 0x7feb352dU;\n    x ^= x >> 15;\n    x *= 0x846ca68bU;\n    x ^= x >> 16;\n    return x;\n}\n\nfloat randomFloat(inout uint state) {\n    return float(hash(state)) / 4294967296.0;\n}\n\nvec2 randomDir(inout uint state) {\n    float angle = randomFloat(state) * 6.28318530718;\n    float radius = sqrt(randomFloat(state));\n    return vec2(cos(angle), sin(angle)) * radius;\n}\n\n#define RADIUS 8.0\n#define NUM_SAMPLES 32\n#define LAMBDA 0.1\n#define K 0.05\n#define GAMMA 0.025\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n\n    vec3 originalValue = texture(iChannel0, uv).rgb;\n    vec3 currentValue = texture(iChannel1, uv).rgb;\n\n    if (iFrame <= 1) {\n        fragColor = vec4(originalValue, 1.0);\n        return;\n    }\n\n    uint state = uint(fragCoord.x + fragCoord.y * iResolution.x + iTime * 1000.0);\n    vec3 diffusionSum = vec3(0.0);\n    float totalWeight = 0.0;\n\n    for (int i = 0; i < NUM_SAMPLES; i++) {\n        vec2 offset = randomDir(state) * RADIUS / iResolution.xy;\n        vec2 sampleUV = uv + offset;\n        \n        if (sampleUV.x < 0.0 || sampleUV.x > 1.0 || sampleUV.y < 0.0 || sampleUV.y > 1.0)\n            continue;\n\n        vec3 neighborValue = texture(iChannel1, sampleUV).rgb;\n        float gradient = length(neighborValue - currentValue);\n        float c = exp(- (gradient * gradient) / (K * K));\n\n        diffusionSum += c * (neighborValue - currentValue);\n        totalWeight += c;\n    }\n\n    if (totalWeight > 0.0) {\n        diffusionSum /= totalWeight;\n    }\n\n    vec3 newValue = currentValue + LAMBDA * diffusionSum + GAMMA * (originalValue - currentValue);\n    newValue = clamp(newValue, 0.0, 1.0);\n\n    fragColor = vec4(newValue, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"// Adding noise \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 position = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    vec3 originalTexture = texture(iChannel0, uv).rgb;\n    float noiseAmplitude = 0.15;\n    \n    vec3 f = originalTexture + noiseAmplitude * (texture(iChannel2, position).rgb - 0.5);\n    \n    fragColor = vec4(f, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"}]}