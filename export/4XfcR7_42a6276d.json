{"ver":"0.1","info":{"id":"4XfcR7","date":"1725960655","viewed":92,"name":"Grass 2D","username":"dotevo","description":"Animated grass 2D","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grass"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nBy Dotevo\n*/\n\nfloat shader_grass(inout vec4 color, vec2 uv, vec2 tile, float density, float wind_strength, float wind_direction, int grass_height) {\n vec4 grass_1 = vec4(0., 0.5, 0., 1.);\n vec4 grass_2 = vec4(0., 0.8, 0.2, 1.); \n float wind_direction_rad = radians(wind_direction);\n vec2 wind_offset = normalize(vec2(sin(wind_direction_rad), cos(wind_direction_rad)));\n vec2 dir = normalize(vec2(sin(wind_direction_rad), cos(wind_direction_rad)));\n float n = sin(iTime/ 100.) * wind_strength;\n \n \n color = vec4(0.3, mod(texture(iChannel0, uv).g * 100. - 100., 0.1)+0.2, 0.1, 0.5);\n for (int i = grass_height; i >= 0; i--) {\n  for (int j = -grass_height / 4; j <= grass_height; j++) {\n   vec2 tile_m = vec2(tile.x + float(j) / density,tile.y + float(i) / density);\n   // Skip if color already calculated\n   if (color.a == 1.0) {\n    return float(i);\n   }\n   float data = texture(iChannel0, tile_m).r;\n   if (mod(data*10. - 10., 0.3) < 0.1) {\n    // Additional random offset to avid grass in lines\n    vec2 offset = vec2(((mod(data * 1000., 0.934) - 0.5) * 2.) / density, 0.);\n    float grass_height_offset_rand = float(grass_height) - mod(data*100., float(grass_height - 1));\n    float distance_factor = length(tile_m - uv);\n    float bending_factor = pow(distance_factor, 1.5) * (1. + mod(data * 1000., 1.)); // Randomize bending\n    \n    float wind_wave = (sin(texture(iChannel0, n* dir * data)).r + 1.0);\n\n    vec2 wind_offset = vec2(\n     sin(wind_direction_rad),\n     cos(wind_direction_rad) \n    ) * wind_strength * bending_factor * float(grass_height) / density;\n    wind_offset = wind_offset + wind_offset * wind_wave;\n    float n = (abs(tile_m.x + offset.x - uv.x + wind_offset.x * (tile_m.y - uv.y) ) + length(tile_m - uv) / (10. * grass_height_offset_rand)) * density;\n    if (n < 0.11){\n     if (color.a != 1.0) {\n      float c = ((mod(data * 1000., 0.934) - 0.5) * 2.);\n      color = grass_1 + vec4(c, c, 0.0,0.);\n     }\n     if (n < 0.09){\n      color = mix(color, grass_2, 0.5);\n     }\n     color = mix(vec4(0.,0.,0.,1.), color, length(tile_m - uv) * float(grass_height));\n    }\n   }\n  }\n }\n return 0.0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(1., 1.) - fragCoord/iResolution.xy;\n    float density = 100.;\n    \n    vec4 color = vec4(0.,0.,0.,1.0);\n    vec2 tile = vec2(round(uv.x * density), ceil(uv.y * density)) / density;\n    float speed = 10.;\n    if (iMouse.y > 3.) {\n      speed = iMouse.y / 20.;\n    }\n    shader_grass(color, uv, tile, density,  speed,  smoothstep(0.,800., iMouse.x) * 360. + 90., 30) ;\n\n      \n    fragColor = color;\n}\n","name":"Image","description":"","type":"image"}]}