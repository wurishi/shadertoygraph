{"ver":"0.1","info":{"id":"ttXyzM","date":"1591652372","viewed":189,"name":"Doodling with Tuxic","username":"Flopine","description":"This is a version of the end result from a 30 minutes concert for which I made live coded visuals. \nThanks to BinaryChiptune for having me and Tuxic for his trust :) \nCheck out the set here: https://youtu.be/Nqf8bevzTxE","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","geometry","isometric","orthographic","twitch","vjing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan and slerpy for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.2831853071\n#define BPM 120./60.\n#define ITER 64.\n\n#define time iTime\n#define dt(speed) fract(time*speed)\n#define bouncy(speed) (abs(sqrt(sin(dt(speed)*PI))))\n#define ease(speed) easeInOutCirc(dt(speed))\n#define loopease(speed) easeInOutCirc(abs(-1.+2.*dt(speed)))\n\n#define sblur 1.05\n#define wiresquare(s,w,puv) smoothstep(s,s*sblur,length(max(abs(puv.x),abs(puv.y))-w))\n\n\n// TOOLS ////////////////////////////////////////\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nvoid moda (inout vec2 p, float rep)\n{\n    float per = TAU/rep;\n    float a = atan(p.y,p.x);\n    a = mod(a,per)-per*0.5;\n    p = vec2(cos(a),sin(a))*length(p);\n}\n\nfloat easeInOutCirc (float x)\n{\n    return x < 0.5\n        ? (1. - sqrt(1. - (2. * x) * (2. * x))) / 2.\n        : (sqrt(1. - (-2. * x + 2.) * (-2. * x + 2.)) + 1.) / 2.;\n}\n\n\n// 2D //////////////////////////////////////////\nvec3 pattern1(vec2 uv)\n{\n    float d = wiresquare(0.02,0.1-ease(BPM)*.8, uv);\n    return (d<=0.)?vec3(1.):vec3(0.);\n}\n\n// 3D //////////////////////////////////////////\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0., max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nfloat sc (vec3 p, float d)\n{\n    p = abs(p);\n    p = max(p.xyz, p.yzx);\n    return min(p.x,min(p.y,p.z))-d;\n}\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    float per = 5.;\n    p.xz = mod(p.xz-per*.5,per)-per*.5;\n    mo(p.xz, vec2(1.));\n    p.x += (-1.+2.*loopease(BPM/2.))*.5;\n    return max(-sc(p,0.9-bouncy(BPM/4.)*0.2),box(p,vec3(1.)));\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\n// MAIN ///////////////////////////////////////\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 uv = vec2(fragCoord.x / iResolution.x, fragCoord.y / iResolution.y);\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n\tvec2 uu = uv;\n    \n    moda(uv, 6.);\n    uv.x -= .5;\n\n    vec3 ro = vec3(uv*9.,-50.),\n        rd = vec3(0.,0.,1.),\n        p = ro,\n        l = normalize(vec3(1.,1.,-1.)),\n        col = vec3(0.,0.01,0.04);\n\n    bool hit=false;\n\n    for (float i=0.; i<ITER;i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            break;\n        }\n        p += d*rd*.9;\n    }\n\n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float light = max(dot(n,l),0.);\n        col = mix(vec3(0.1,0.5,0.9),vec3(0.5,0.8,0.1),light);\n    }\n    col = (pattern1(uu).x <= 0.)? col : 1.-col;\n\n    fragColor = vec4(sqrt(clamp(col,0.,1.)),1.);\n}","name":"Image","description":"","type":"image"}]}