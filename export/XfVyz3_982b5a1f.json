{"ver":"0.1","info":{"id":"XfVyz3","date":"1732177802","viewed":73,"name":"happy heart","username":"rnslv","description":"dynamic, glowing, fractal patterns with smoother heart shapes, along with intricate textures,","likes":0,"published":3,"flags":0,"usePreview":0,"tags":["fractal","rings","rotating","audioreactive","multicolor","graphicsintensive"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.1415926\n\n// Random number generator\nfloat rand(vec2 pos) {\n    return fract(sin(dot(pos, vec2(23.2342, 82.29561))) * 82931.1857193);\n}\n\n// Rotate a 2D vector by an angle\nmat2 rotate2d(float angle) {\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle),  cos(angle)\n    );\n}\n\n// Gradient palette function\nvec3 palette(float t) {\n    return mix(vec3(0.2, 0.7, 0.9), vec3(1.0, 0.0, 1.0), t);\n}\n\n// Fractional Brownian Motion (fBm) for noise\nfloat fbm(vec2 p) {\n    float value = 0.0;\n    float amplitude = 0.5;\n    float frequency = 1.0;\n\n    for (int i = 0; i < 6; i++) { // Increased layers for more complexity\n        value += amplitude * sin(dot(p * frequency, vec2(1.0, 1.0)) + iTime * 0.5);\n        frequency *= 2.0;\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\n// Heart shape function with smoother curves\nfloat heart(vec2 p, float scale) {\n    p *= scale * 2.0;  // Scaling to fit the screen\n    p.y -= sqrt(abs(p.x)) * 1.0;  // Adjust heart shape curve for better visibility\n    return length(p) - 1.0;  // Tightened the distance formula for a cleaner heart\n}\n\n// Fractal mapping with fractional distortions\nfloat fractalMap(vec3 p) {\n    float distort = fbm(p.xy * 0.5); // Apply fractional noise\n    for (int i = 0; i < 8; i++) {\n        float t = iTime * 0.2;\n        p.xz = rotate2d(t) * p.xz;\n        p.xy = rotate2d(t * 1.89) * p.xy;\n        p = abs(p) - vec3(0.5);\n        p *= 1.2 + 0.3 * sin(iTime + float(i) * distort); // Enhanced fractional scaling\n    }\n    return dot(sign(p), p) / 5.0;\n}\n\n// Recursive ray marching with heavy fractional effects\nvec4 rayMarch(vec3 ro, vec3 rd) {\n    float t = 0.0;\n    vec3 col = vec3(0.0);\n    float d;\n    for (int i = 0; i < 64; i++) {\n        vec3 p = ro + rd * t;\n        d = fractalMap(p) * 0.5;\n        if (d < 0.02) break;\n        if (d > 100.0) break;\n\n        // Add fractional noise to the color blending\n        float fractNoise = fbm(p.xy + p.zx);\n        col += palette(length(p) * 0.1 + fractNoise) / (400.0 * d);\n        t += d;\n    }\n    return vec4(col, 1.0 / (d * 100.0));\n}\n\n// Pattern-based coloring with fractional distortion\nvec3 pattern(vec2 uv, float scale, float offset) {\n    uv *= scale;\n    uv.x += fbm(uv * 2.0) * 0.3; // Apply stronger fBm for distortion\n    float dist = heart(uv, 1.0 + 0.1 * sin(iTime + offset));\n    float glow = 1.0 / (dist * dist + 0.01);\n    return palette(dist + offset) * glow;\n}\n\n// Main shader function\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y;\n    \n    // Camera setup\n    vec3 ro = vec3(0.0, 0.0, -5.0);\n    ro.xz *= rotate2d(iTime * 0.5);\n    vec3 rd = normalize(vec3(uv, 1.0));\n    \n    // Recursive fractal render with stronger fractional distortion\n    vec4 fractalCol = rayMarch(ro, rd);\n\n    // Pattern overlay with more intensity in the heart pattern\n    vec3 patternCol = pattern(uv, 10.0, iTime * 0.5);\n    \n    // Combine effects with a dynamic glow from fractional noise\n    vec3 finalColor = mix(fractalCol.rgb, patternCol, 0.6);\n    finalColor += 0.4 * patternCol * sin(iTime * 3.0); // Stronger glow effect\n\n    fragColor = vec4(finalColor, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}