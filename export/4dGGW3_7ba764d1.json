{"ver":"0.1","info":{"id":"4dGGW3","date":"1456602750","viewed":197,"name":"A Moving Blob","username":"VoidChicken","description":"A blob I have no idea how to describe.<br/>For reflections, have high_res uncommented.<br/>For no reflections (if it is slow), have low_res uncommented.","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["3d","noise","perlin","blob"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\nvec2 Center = vec2( 0.5, 0.5 ); ///center of the screen (could be any place)\nfloat BlurStart = 1.0; /// blur offset\nfloat BlurWidth = -0.2; ///how big it should be\nconst int nsamples = 20;\n\nvec4 Blur(vec2 UV)\n{\n    UV -= Center;\n    vec4 c = vec4(0);\n    for(int i=0; i <nsamples; i++) {\n    \tfloat scale = BlurStart + BlurWidth*(float(i)/ float(nsamples-1));\n    \tc += texture(iChannel0, UV * scale + Center ).wwww;\n   \t}\n   \tc /= float(nsamples);\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor,vec2 fragCoord) {\n    fragColor = \n        mix(\n            texture(iChannel0,fragCoord/iResolution.xy)+vec4(.5,.25,0,0)*(1.-Blur(fragCoord/iResolution.xy)),\n            texture(iChannel0,fragCoord/iResolution.xy),\n            1.-texture(iChannel0,fragCoord/iResolution.xy).w\n        );\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define high_res\n//#define low_res\nfloat dfSphere(vec3 p, float r) {\n\t   return length(p)-r;\n}\nfloat hash(float n) { return fract(sin(n) * 1e4); }\nfloat noise(vec3 x) {\n    const vec3 step = vec3(110, 241, 171);\n\n    vec3 i = floor(x);\n    vec3 f = fract(x);\n\n   \n    float n = dot(i, step);\n\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),\n               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),\n                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);\n}\nvec3 iceCube = vec3(0, 1, 2);\n/*float rand(vec2 n) { \n    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n}\n\nfloat noise(vec2 p){\n    vec2 ip = floor(p);\n    vec2 u = fract(p);\n    u = u*u*(3.0-2.0*u);\n\n    float res = mix(\n        mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),\n        mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);\n    return res*res;\n}*/\nvec3 ray2(vec3 ro, vec3 rd){\n    vec3 v=ro;\n    for (int i = 0; i < 16; i++) {\n        float l = dfSphere(v,noise(v.xyz/2.0+iTime)*5. );\n    \tv += rd*l;\n        if (l<0.01)\n            return vec3(texture(iChannel0, reflect(rd, normalize(v)))*(1.-noise(v.xyz/2.0+iTime)))+vec3(noise(v.xyz/2.0+iTime));\n            //vec3(texture(iChannel0, reflect(rd, normalize(v))));\n            //return vec3(noise(v.xyz/2.0+iTime) );\n    }\n    return vec3(texture(iChannel0, rd));\n}\n\nvec4 ray(vec3 ro, vec3 rd){\n    vec3 v=ro;\n    for (int i = 0; i < 16; i++) {\n        float l = dfSphere(v,noise(v.xyz/2.0+iTime)*5. );\n    \tv += rd*l;\n        if (l<0.01)\n            #ifdef high_res\n            return vec4(ray2(v+normalize(v), reflect(rd, normalize(v)))*(1.-noise(v.xyz/2.0+iTime))+vec3(noise(v.xyz/2.0+iTime)),0);\n        \t#endif\n        \t#ifdef low_res\n            return vec4(texture(iChannel0, reflect(rd, normalize(v))).rgb*(1.-noise(v.xyz/2.0+iTime)))+vec3(noise(v.xyz/2.0+iTime),0);\n            #endif\n        \t//vec3(texture(iChannel0, reflect(rd, normalize(v))));\n            //return vec3(noise(v.xyz/2.0+iTime) );\n    }\n    return vec4(texture(iChannel0, rd).rgb,1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = (ray(vec3(0, 1, -10), vec3(uv-0.5, 1)));\n}","name":"Buf A","description":"","type":"buffer"}]}