{"ver":"0.1","info":{"id":"mtj3Rh","date":"1672876282","viewed":195,"name":"stringolizer","username":"valalalalala","description":"Decided to have another go at working with the font  texture. The goal was to create a reusable piece for debugging. It's not super nice or efficient, but wfm.\n","likes":8,"published":1,"flags":16,"usePreview":1,"tags":["font","utils"],"hasliked":0,"parentid":"mtjGzz","parentname":"stringo"},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"        /////////////////////////////////////////////////////////////////\n       //                                                            ////\n      //  \"stringolizer\"                                            // //\n     //                                                            //  //\n    //  Decided to have another go at working with the font       //   //\n   //  texture. The goal was to create a reusable piece for      //    //   \n  //  debugging. It's not super nice or efficient, but wfm.     //     //\n //                                                            //     //\n////////////////////////////////////////////////////////////////     // \n//                                                            //    //\n// Creative Commons Attribution-NonCommercial-ShareAlike      //   //\n// 3.0 Unported License                                       //  //\n//                                                            // //\n// by Val \"valalalalala\" GvM ðŸ’ƒ 2021                          ////\n//                                                            ///\n////////////////////////////////////////////////////////////////\n// inspired by https://www.shadertoy.com/view/llySRh          //\n// help with codes: https://www.shadertoy.com/view/ldSBzd     //\n////////////////////////////////////////////////////////////////\n\n// can't push this to Common without passing the sampler everywhere\n// when using buffers, the macro CHAR_STUB hacks around the undefined :-/\nfloat char( vec2 st, vec2 dx, vec2 dy ) {\n    return textureGrad( iChannel1, st, dx, dy ).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 st ) {\n    vec2 uv = ( st * 2. - iResolution.xy ) / iResolution.y;\n    \n    StringContext s = newStringContext( uv );\n    \n    move( s, vec2(-1.8,.9) ); // absolute\n\n    STRING(C(105)C(82)C(101)C(115)C(111)C(108)C(117)C(116)C(105)C(111)C(110))\n    STRING(C(105)C(84)C(105)C(109)C(101))\n    STRING(C(105)C(84)C(105)C(109)C(101)C(68)C(101)C(108)C(116)C(97))\n    STRING(C(105)C(70)C(114)C(97)C(109)C(101)C(82)C(97)C(116)C(101))\n    STRING(C(105)C(70)C(114)C(97)C(109)C(101))\n    STRING(C(105)C(77)C(111)C(117)C(115)C(101))\n    STRING(C(105)C(68)C(97)C(116)C(101))\n    STRING(C(105)C(83)C(97)C(109)C(112)C(108)C(101)C(82)C(97)C(116)C(101))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(82)C(101)C(115)C(111)C(108)C(117)C(116)C(105)C(111)C(110)C(91)C(48)C(93))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(82)C(101)C(115)C(111)C(108)C(117)C(116)C(105)C(111)C(110)C(91)C(49)C(93))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(82)C(101)C(115)C(111)C(108)C(117)C(116)C(105)C(111)C(110)C(91)C(50)C(93))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(82)C(101)C(115)C(111)C(108)C(117)C(116)C(105)C(111)C(110)C(91)C(51)C(93))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(84)C(105)C(109)C(101)C(91)C(48)C(93))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(84)C(105)C(109)C(101)C(91)C(49)C(93))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(84)C(105)C(109)C(101)C(91)C(50)C(93))\n    STRING(C(105)C(67)C(104)C(97)C(110)C(110)C(101)C(108)C(84)C(105)C(109)C(101)C(91)C(51)C(93))\n\n    offset( s, vec2( .93, ZED ) ); // relative\n    \n    STRING(C(iResolution));\n    STRING(C(iTime))\n    STRING(C(iTimeDelta))\n    STRING(C(iFrameRate))\n    STRING(C(float(iFrame))) // marked as float to avoid being treated as keycode\n    STRING(C(iMouse))\n    STRING(C(iDate))\n    STRING(C(iSampleRate))\n    STRING(C(iChannelResolution[0]))\n    STRING(C(iChannelResolution[1]))\n    STRING(C(iChannelResolution[2]))\n    STRING(C(iChannelResolution[3]))\n    STRING(C(iChannelTime[0]))\n    STRING(C(iChannelTime[1]))\n    STRING(C(iChannelTime[2]))\n    STRING(C(iChannelTime[3]))\n    \n    move( s, vec2( 1.33, -.93 ) );\n    \n    STRING(C(29)C(44)C(iFrameRate))\n\n    fragColor = vec4( vec3( s.d ), EINS );\n}\n\n////////////////////////////////////////////////////////////////","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"////////////////////////////////////////////////////////////////\n// cool hack for forward declarations https://www.shadertoy.com/view/WldSRj\n#ifndef HW_PERFORMANCE\n#define _SHADERTOY_TAB_COMMON\n#endif\n\n////////////////////////////////////////////////////////////////////////////////////\n\nconst float ZED  = .0;\nconst float EINS = 1.;\nconst vec3  V101 = vec3( -EINS, ZED, +EINS );\n\n////////////////////////////////////////////////////////////////////////////////////\n\nfloat char( vec2 st, vec2 dx, vec2 dy );\n#define CHAR_STUB float char( vec2 st, vec2 dx, vec2 dy ) { return ZED; }\n#ifdef _SHADERTOY_TAB_COMMON\nCHAR_STUB\n#endif\n\n\n////////////////////////////////////////////////////////////////////////////////////\n    \n// to use this, locally define: StringContext s\n#define STRING(CHARZ) CHARZ newline(s);\n\nstruct StringContext {\n    vec2 position;\n    vec2 current;\n    vec2 offset;\n    float scale;\n    float pad;\n    float d;\n};\n\nStringContext newStringContext( vec2 uv, vec2 offset, float scale, float pad ) {\n    return StringContext( uv, uv, offset, scale, pad, ZED ); \n}\n\nStringContext newStringContext( vec2 uv ) {\n    return newStringContext( uv, vec2(ZED), .09, .04 );\n}\n\nvoid clear( inout StringContext s ) { \n    s.d = ZED;\n}\n\nvoid reset( inout StringContext s ) { \n    s.current = s.position; \n}\n\nvoid nuke( inout StringContext s ) { \n    clear( s );\n    reset( s );\n}\n\nvoid offset( inout StringContext s, vec2 relative ) { \n    s.offset += relative;\n    reset( s );\n}\n\nvoid move( inout StringContext s, vec2 absolute ) { \n    s.offset = absolute;\n    reset( s );\n}\n\n// dream of writing an \"editor\"? \nvoid right( inout StringContext s ) { \n    s.current.x -= s.pad; \n}\n\nvoid newline( inout StringContext s ) { \n    s.current.x = s.position.x;\n    s.current.y += s.scale;\n}\n\n////////////////////////////////////////////////////////////////////////////////////\n\nfloat char( vec2 uv, int c ) { \n    vec2 outside = step( V101.yy, uv ) * step( uv, V101.zz );\n    if ( ZED == outside.x * outside.y ) return ZED;\n\n    vec2 p6 = uv / 16.;\n    vec2 st = p6 + fract( vec2(c, 15-c/16) / 16. );\n    return char( st, dFdx(p6), dFdy(p6) );\n}\n\n#define STR_END      return s.d;\n\n// internal macros can optionally use ton of ifs... \n#define STRING_IFFY_\n#ifdef STRING_IFFY\n#define STR_QUICK(x) if (ZED<x) return s.d;\n#define C(c)         STR_QUICK(concat(s,c))\n#else\n#define C(c)         concat(s,c);\n#define STR_QUICK(x) x\n#endif\n\nfloat concat( inout StringContext s, int c ) {\n#if 1\n    s.d += char( (s.current - s.offset) / s.scale, c&255 ); \n    right( s );\n#else\n    // this was an experiment to pack characters... idk... lol\n    if(c>0) {s.d += char( s.position / s.scale, c&255 ); s.position.x -= s.pad; c/=256;}\n    if(c>0) {s.d += char( s.position / s.scale, c&255 ); s.position.x -= s.pad; c/=256;}\n    if(c>0) {s.d += char( s.position / s.scale, c&255 ); s.position.x -= s.pad; c/=256;}\n    if(c>0) {s.d += char( s.position / s.scale, c&255 ); s.position.x -= s.pad; c/=256;}\n#endif    \n    STR_END\n}\n\nfloat _concat( inout StringContext s, float v ) {\n    int digits = int( floor( log( max( v, 1. ) ) / log( 10. ) ) );\n    float power = pow( 10., float( digits ) );\n    \n    for ( int i = 0 ; i < digits + 1; i++ ) {\n        int n = int( v / power );\n        STR_QUICK(concat( s, 48+n ));\n        v -= float(n) * power;\n        power /= 10.;\n    }\n    STR_END\n    return s.d;\n}\n\nfloat concat( inout StringContext s, float v, int decimalPlaces ) {\n    if ( v < ZED ) concat( s, 45 );  // 43 is +\n    _concat( s, abs(v) ); \n    concat( s, 46 ); \n    float f = fract( v );\n    float p = 10.;\n    for( int i = 0 ; i < decimalPlaces ; i++, p *= 10. ) {\n        int n = 48+int( p * f ) % 10;\n        concat(s,n);\n    }\n    STR_END\n}\n\nfloat concat( inout StringContext s, float v ) { return concat( s, v, 2 ); }\nfloat concat( inout StringContext s, vec2 v ) { STR_QUICK(concat( s, v.x ));   concat( s, 44 ); return concat( s, v.y ); }\nfloat concat( inout StringContext s, vec3 v ) { STR_QUICK(concat( s, v.xy ));  concat( s, 44 ); return concat( s, v.z ); }\nfloat concat( inout StringContext s, vec4 v ) { STR_QUICK(concat( s, v.xyz )); concat( s, 44 ); return concat( s, v.y ); }\n\nint pack( int a, int b, int c, int d ) { return a|b<<8|c<<16|d<<24; }\n\n////////////////////////////////////////////////////////////////////////////////////","name":"Common","description":"","type":"common"}]}