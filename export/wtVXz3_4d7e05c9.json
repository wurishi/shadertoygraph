{"ver":"0.1","info":{"id":"wtVXz3","date":"1583282282","viewed":361,"name":"simple feedback example","username":"aferriss","description":"Simple feedback example","likes":3,"published":3,"flags":32,"usePreview":0,"tags":["texcoords","feedback","offset"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdXGzn","filepath":"/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","previewfilepath":"/media/ap/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    // Scale of the noise determines the density of flow\n    vec4 noise = texture(iChannel1, uv * 0.25 + sin(iTime * 3.0 ) * 0.01);\n    \n    // The distortino amount is just the red and green channels of the noise multiplied by some value\n    vec2 distortion = noise.rg * vec2(0.005, 0.01);\n    \n    // Add the distortion to the uv's\n    vec4 lastFrame = texture(iChannel2, uv + distortion);\n    \n    // Output color\n    fragColor = lastFrame;\n        \n    // In the beginning, seed the feedback with an image\n    // Also reset every now and then\n    if(iTime < 0.1 || mod(iTime, 5.0) < 0.5){\n\n\t\tfragColor = texture(iChannel1, uv);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}