{"ver":"0.1","info":{"id":"wl3cWX","date":"1609994507","viewed":912,"name":"Dither-Patterns","username":"atyuwen","description":"Test different dither patterns for screen-door transparency.\nref: https://developer.oculus.com/blog/tech-note-shader-snippets-for-efficient-2d-dithering/","likes":17,"published":1,"flags":0,"usePreview":1,"tags":["dither","dissolve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n// Ref: https://developer.oculus.com/blog/tech-note-shader-snippets-for-efficient-2d-dithering/\n// Test different dither patterns:\n// dither32, dither8, dither17, dither13, DitherBlueNoiseA16x16, DitherBlueNoiseTexture, DitherBayer8x8, DitherGradientNoise, DitherPlastic\n\n#define DITHER_PATTERN          dither13\n#define DITHER_PREVIEW_SCALE    1\n\nfloat dither32(vec2 pos)\n{\n  return fract(dot(pos, vec2(13, 5) / 32.0));  \n}\n\nfloat dither8(vec2 pos)\n{\n  return fract(dot(pos, vec2(3, 7) / 8.0));\n}\n\nfloat dither17(vec2 pos)\n{\n  return fract(dot(pos, vec2(10, 15) / 17.0));\n}\n\nfloat dither13(vec2 pos)\n{\n  return fract(dot(pos, vec2(4, 7) / 13.0));\n}\n\nuint ArrayBlueNoiseA16x16[64];\nuint ArrayDitherArray8x8[64];\n\nfloat DitherBlueNoiseA16x16(vec2 pos)\n{\n    uint stippleOffset = ((uint(pos.y) % 16u) * 16u) + (uint(pos.x) % 16u);\n    uint entry = stippleOffset / 4u;\n    uint byteIndex = stippleOffset % 4u;\n    uint four = ArrayBlueNoiseA16x16[entry];\n    uint byte = (four >> ((byteIndex * 8u) & 31u)) & 255u;\n    float stippleThreshold = float(byte) / 255.0;\n    return stippleThreshold;\n}\n\nfloat DitherBlueNoiseTexture(vec2 pos)\n{\n    float v = texture( iChannel0, pos / iChannelResolution[0].xy ).r;\n    return v / 256.0 * 255.0;\n}\n\nfloat DitherBayer8x8(vec2 pos)\n{\n    uint stippleOffset = ((uint(pos.y) % 8u) * 8u) + (uint(pos.x) % 8u);\n    uint byte = ArrayDitherArray8x8[stippleOffset];\n    float stippleThreshold = float(byte) / 64.0;\n    return stippleThreshold;\n}\n\nfloat DitherGradientNoise( vec2 uv )\n{\n    const vec3 magic = vec3( 0.06711056, 0.00583715, 52.9829189 );\n    return fract( magic.z * fract( dot( uv, magic.xy ) ) );\n}\n\nfloat DitherPlastic(vec2 pos)\n{\n    return 2.0 * abs(fract(dot(pos, vec2(0.75487767, 0.56984029))) - 0.5);\n}\n\n/////////////////////////////////////////////////////////////\n\nfloat DE(vec3 p)\n{\n  return length(p) - 0.8;\n}\n\nvec4 ray_marching(vec3 ro,  vec3 rd)\n{\n  for (int i = 0; i < 64; ++i)\n  {\n    float d = DE(ro);\n    ro += d * rd;\n    if (d < 0.01) return vec4(ro, i);\n  }\n  return vec4(ro, -1);\n}\n\nvec4 shade(vec3 ro, vec3 rd)\n{\n  vec4 rm = ray_marching(ro, rd);\n  if (rm.w < 0.0) return vec4(0, 0, 0, 0);\n   \n  vec3 p = rm.xyz;\n  float k = DE(p);\n  float gx = DE(p + vec3(1e-5, 0, 0)) - k;\n  float gy = DE(p + vec3(0, 1e-5, 0)) - k;\n  float gz = DE(p + vec3(0, 0, 1e-5)) - k;\n  vec3 N = normalize(vec3(gx, gy, gz));\n  \n  float ao = 0.0;\n  ao += DE(p + 0.2 * N) * 2.5;\n  ao += DE(p + 0.5 * N) * 1.0;\n\n  vec3 L = normalize(vec3(-2, 1, 0.5));\n  vec3 C = vec3(0.3, 0.6, 0.8);\n  float D = 1.7;\n  float A = 0.1;\n  vec3 col = (A + D * clamp(dot(L, N), 0.0, 1.0)) * ao * C;\n  return vec4(col , 1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  ArrayBlueNoiseA16x16 = uint[](813949180u, 1150485466u, 2148591665u, 399961693u, 1215191354u, 2765039285u, 3702089242u, 2505033012u, 298459578u, 4032069097u, 546423176u, 2083298927u, 2851376852u, 188310423u, 4181544161u, 233092101u, 1933532833u, 1842724124u, 3514443953u, 1766229846u, 1356726322u, 2191588653u, 2590099989u, 4140176618u, 2310062210u, 860489932u, 3154814965u, 631993142u, 1746331467u, 1519679723u, 3712060389u, 3616690466u, 945330553u, 3289954210u, 2120962852u, 442498739u, 3523652337u, 1893417766u, 3977237423u, 1020069020u, 4201825323u, 32465284u, 784373563u, 1790478916u, 495863775u, 2828030394u, 1562179708u, 2685592694u, 934415450u, 801640166u, 2915526477u, 2150913241u, 1708169452u, 601398906u, 322864610u, 3407869840u, 4081985653u, 2943107097u, 703765512u, 1102947694u, 3282306989u, 3204144268u, 3067041398u, 1686635078u);\n  ArrayDitherArray8x8 = uint[](0u, 32u, 8u, 40u, 2u, 34u, 10u, 42u, 48u, 16u, 56u, 24u, 50u, 18u, 58u, 26u, 12u, 44u, 4u, 36u, 14u, 46u, 6u, 38u, 60u, 28u, 52u, 20u, 62u, 30u, 54u, 22u, 3u, 35u, 11u, 43u, 1u, 33u, 9u, 41u, 51u, 19u, 59u, 27u, 49u, 17u, 57u, 25u, 15u, 47u, 7u, 39u, 13u, 45u, 5u, 37u, 63u, 31u, 55u, 23u, 61u, 29u, 53u, 21u);\n\n  // Normalized pixel coordinates (from 0 to 1)\n  vec2 tc = fragCoord/iResolution.xy;\n  vec3 p = vec3((tc * 2.0 - 1.0), 0.0);\n  p.xy *= vec2(iResolution.x / iResolution.y, 1.0);\n \n  vec3 param = vec3(0.4, 0.3, 18);\n  vec4 rot = vec4(sin(param.x), cos(param.x), sin(param.y), cos(param.y));\n\n  \n  vec3 rt = vec3(0, 0, 0);\n  vec3 ro = vec3(rot.x * rot.w, abs(rot.y) * rot.z, rot.y);\n  ro = ro * param.z;\n  \n  vec3 cd = normalize(rt - ro);\n  vec3 cr = normalize(cross(cd, vec3(0, 1, 0)));\n  vec3 cu = cross(cr, cd);\n \n  vec3 rd = normalize(p.x * cr + p.y * cu + 10.0 * cd);\n  vec4 radiance = shade(ro, rd);\n  \n  float ref = clamp(sin(iTime * 1.5) + 0.3, 0.0, 1.0);\n  radiance.a = step(ref, DITHER_PATTERN(fragCoord)) * radiance.a;\n  \n  vec3 col = vec3(0.05, 0.05, 0.04);\n  col = mix(col, radiance.rgb, radiance.a);\n  \n  if (fragCoord.y * 13.0 < iResolution.x)\n  {\n     vec2 stc = vec2(((ivec2(fragCoord.xy)) / DITHER_PREVIEW_SCALE));\n     col = vec3(step(DITHER_PATTERN(stc.xy), tc.x));\n  }\n  \n  col = pow(col, vec3(0.45));\n   \n  // Output to screen\n  fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}