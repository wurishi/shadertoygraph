{"ver":"0.1","info":{"id":"Mcfyz8","date":"1721012505","viewed":67,"name":"QWERTY keyboard","username":"smarchevsky","description":"BSP tree - based QWERTY keyboard.","likes":6,"published":1,"flags":16,"usePreview":0,"tags":["tree","font","keyboard","ascii","bsp","input","highlight"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// BSP based QWERTY keyboard\n\n// Author : Stanislav Marchevsky\n// Created: Jul 2024\n\n\n#define PI 3.1415926535\n#define TWO_PI (PI * 2.)\n\nvec3 pal(float t, vec3 c, vec3 d) { return .5 + .5 * cos(TWO_PI * (c * t + d)); }\n\nfloat sdBox(vec2 p, vec2 b, float r) { vec2 d = abs(p)- b + r; return length(max(d, 0.0)) + min(max(d.x, d.y), 0.0) - r; }\n\nvec4 sdChar(vec2 p, int c) \n{\n    if (p.x<.0 || p.x>1. || p.y<0.|| p.y>1.) return vec4(1);\n\treturn textureGrad(iChannel0, p / 16. + fract(vec2(c, 15-c / 16) / 16.),\n        dFdx(p/16.), dFdy(p/16.));\n}\n\n// left texture offset index, right texture offset index, actual symbol index\nivec3 traverseTree(vec2 uv, out vec2 offset, out float charSize) {\n  int currentIndex = 0;\n  vec2 scale = vec2(.5);\n  offset = vec2(0, 0);\n  charSize = 1.;\n  \n  for(int iteration = 0; iteration < 8; ++iteration) {\n    offset.x += nodes[currentIndex].x;\n    \n    if(nodes[currentIndex].z < 0.) {\n      charSize = nodes[currentIndex].y;\n      int lr = -int(nodes[currentIndex].z);\n      return ivec3(ivec2(lr >> 8, lr) & 0xff, nodes[currentIndex].w); // if child - return\n    }\n    \n    bool isY = nodes[currentIndex].y == 1.;\n    bool isLeftSide = (dot(offset - uv, isY ? vec2(0,1) : vec2(1,0) /* split dir */ ) > 0.0);\n    \n    int indexOfProperSide = int(isLeftSide ? nodes[currentIndex].z : nodes[currentIndex].w);\n    \n    float leftSideSign  = isLeftSide ? -1. : 1.;\n    if(isY) { offset.y += leftSideSign * scale.y; scale.y *=.5; }\n    else    { offset.x += leftSideSign * scale.x; scale.x *=.5; }\n    currentIndex = indexOfProperSide;\n  }\n  return ivec3(0,0,0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy; uv=(uv-.5)*2.*1.4;\n    vec2 mo = iMouse.xy/iResolution.xy; mo=(mo-.5)*2.;\n    float fw = length(fwidth(uv))*3.;\n    float keyboardVerticalSize = 0.7;\n    vec2 ar = vec2(iResolution.x / iResolution.y, keyboardVerticalSize);\n    uv.y = -uv.y / keyboardVerticalSize; // flip vertically\n    \n    vec2 offset; float charSize;\n    ivec3 charIndices = traverseTree(uv, offset, charSize);\n    uv-=offset;\n    uv.y = -uv.y; // flip vertically again each symbol\n    uv *= 7.*ar * charSize;\n    \n    bool shiftPressed = texelFetch(iChannel1, ivec2(16, 0), 0).x > 0.5;\n    bool   keyPressed = texelFetch(iChannel1, ivec2(charIndices.z, 0), 0).x > 0.5;\n    \n    vec4 char = sdChar(uv*.5+.5, shiftPressed ? charIndices.y : charIndices.x);\n    \n    float c = smoothstep(fw, -fw, char.a-0.5);\n    vec3 colorize = vec3(1.2-(length(uv)));\n    \n    if(keyPressed) { // key pressed\n        c = (1.-c) * smoothstep(fw,-fw, sdBox(uv, vec2(0.7, 1.0), 0.2));\n        colorize = pal(float(charIndices.z)/1.3,vec3(1),vec3(0,0.333,0.667));    \n    }\n    \n    fragColor = vec4(c * colorize,1);\n    // fragColor = vec4(pal(float(charIndices.z)/1.3,vec3(1),vec3(0,0.333,0.667)),1); // colorize nodes\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// letter grouping factor, used for Bck, Enter, Tab, Shift\nconst float s  =  0.07;\nconst float s2 =  s/2.;\nconst float s4 = s2/2.;\n\nconst float e0 =  0.16;  // Enter offset\nconst float s0 =  0.15;  // Shift offset\nconst float t0 = -0.1;   // Tab offset\nconst float b0 =  0.1;   // Backspace offset\n\nconst float specialBtnInvScale = 1.5;\n\nvec4 nodes[127] = vec4[](\n\n// NODE: offset X, splitDir, leftNode, rightNode\n\n/*  0 */ vec4( 0, 1, 1, 2), // all\n\n/*  1 */ vec4( 0, 1, 3,  4), // 1234... qwer...\n/*  2 */ vec4( 0, 1, 5,  6), // asdf... zxcv...\n// first three nodes are vertically splitted\n\n/*  3 */ vec4(   0, 0,  7,  8), // `1234567890-+Bck\n/*  4 */ vec4(-0.2, 0,  9, 10),   // Tabqwertyuiop[]*\\*  // backshash, dont type it alone, it comments next line\n/*  5 */ vec4( 0.2, 0, 11, 12), // asdfghjkl;'enter\n/*  6 */ vec4( 0.3, 0, 13, 14), // zxcvbnm,./shift\n \n/*  7 */ vec4( 0, 0, 15, 16), // `1234567\n/*  8 */ vec4( 0, 0, 17, 18), // 890-=Bck\n/*  9 */ vec4( 0, 0, 19, 20), // Tabqwert\n/* 10 */ vec4( 0, 0, 21, 22), // yuiop[]*\\*\n/* 11 */ vec4( 0, 0, 23, 24), // asdfghjk\n/* 12 */ vec4(e0, 0, 25, 26), // l;'Enter\n/* 13 */ vec4( 0, 0, 27, 28), // zxcvbnm,\n/* 14 */ vec4(s0, 0, 29, 30), // ./Shift\n\n/* 15 */ vec4( 0,  0, 31, 32), // `123\n/* 16 */ vec4( 0,  0, 33, 34), // 4567\n/* 17 */ vec4( 0,  0, 35, 36), // 890-\n/* 18 */ vec4(b0,  0, 37, 38), //=B k\n/* 19 */ vec4(t0,  0, 39, 40), // Tabq\n/* 20 */ vec4( 0,  0, 41, 42), // wert\n/* 21 */ vec4( 0,  0, 43, 44), // yuio\n/* 22 */ vec4( 0,  0, 45, 46), // p[]*\\*\n/* 23 */ vec4( 0,  0, 47, 48), // asdf\n/* 24 */ vec4( 0,  0, 49, 50), // ghjk\n/* 25 */ vec4(-e0, 0, 51, 52), // l;'E\n/* 26 */ vec4(-s,  0, 53, 54), // nter\n/* 27 */ vec4( 0,  0, 55, 56), // zxcv \n/* 28 */ vec4( 0,  0, 57, 58), // bnm,\n/* 29 */ vec4(s-s0,0, 59, 60), // ./Sh \n/* 30 */ vec4(-s,  0, 61, 62), // ift  \n\n/* 31 */ vec4( 0,       0,  63,  64 ), // `1\n/* 32 */ vec4( 0,       0,  65,  66 ), // 23\n/* 33 */ vec4( 0,       0,  67,  68 ), // 45\n/* 34 */ vec4( 0,       0,  69,  70 ), // 67\n/* 35 */ vec4( 0,       0,  71,  72 ), // 89\n/* 36 */ vec4( 0,       0,  73,  74 ), // 0-\n/* 37 */ vec4(s2-b0,    0,  75,  76 ), // =B\n/* 38 */ vec4(-s2,      0,  77,  78 ), // ck\n/* 39 */ vec4(s2,       0,  79,  80 ), // Ta\n/* 40 */ vec4(-s2-t0,   0,  81,  82 ), // bq\n/* 41 */ vec4( 0,       0,  83,  84 ), // w e\n/* 42 */ vec4( 0,       0,  85,  86 ), // r t\n/* 43 */ vec4( 0,       0,  87,  88 ), // y u\n/* 44 */ vec4( 0,       0,  89,  90 ), // io\n/* 45 */ vec4( 0,       0,  91,  92 ), // p[\n/* 46 */ vec4( 0,       0,  93,  94 ), // ]*\\*\n/* 47 */ vec4( 0,       0,  95,  96 ), // as\n/* 48 */ vec4( 0,       0,  97,  98 ), // df\n/* 49 */ vec4( 0,       0,  99,  100), // gh\n/* 50 */ vec4( 0,       0,  101, 102), // jk\n/* 51 */ vec4( 0,       0,  103, 104), // l;\n/* 52 */ vec4(-s2+s+e0, 0,  105, 106), // 'E\n/* 53 */ vec4( s2,      0,  107, 108), // nt\n/* 54 */ vec4(-s2,      0,  109, 110), // er\n/* 55 */ vec4( 0,       0,  111, 112), // zx\n/* 56 */ vec4( 0,       0,  113, 114), // cv\n/* 57 */ vec4( 0,       0,  115, 116), // bn\n/* 58 */ vec4( 0,       0,  117, 118), // m,\n/* 59 */ vec4(-s,       0,  119, 120), // ./\n/* 60 */ vec4(-s2+s0,   0,  121, 122), // Sh\n/* 61 */ vec4(s2,       0,  123, 124), // if\n/* 62 */ vec4(-s2,      0,  125, 126),  // t\n\n#define PACK_CHAR_INDICES(a, A) -((a<<8) | A & 0xff)\n\n// LEAF:   offset X,  inv scale uv,       PACK_CHAR_INDICES,                  keyboad ascii index\n\n/* 63 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+0, 16*7+14  ) , 192 ), // `\n/* 64 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+1, 16*2+1   ) , 49  ), // 1\n/* 65 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+2, 16*4+0   ) , 50  ), // 2\n/* 66 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+3, 16*2+3   ) , 51  ), // 3\n/* 67 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+4, 16*2+4   ) , 52  ), // 4\n/* 68 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+5, 16*2+5   ) , 53  ), // 5\n/* 69 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+6, 16*5+14  ) , 54  ), // 6\n/* 70 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+7, 16*2+6   ) , 55  ), // 7\n/* 71 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+8, 16*2+10  ) , 56  ), // 8\n/* 72 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+9, 16*2+8   ) , 57  ), // 9\n/* 73 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+0, 16*2+9   ) , 48  ), // 0\n/* 74 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*2+13, 16*5+15 ) , 173 ), // -\n/* 75 */ vec4(-s2,    1,                   PACK_CHAR_INDICES(16*3+13, 16*2+11 ) , 61  ), // =\n/* 76 */ vec4(-s4+b0, specialBtnInvScale,  PACK_CHAR_INDICES(16*4+2, 16*4+2   ) , 8   ), // B\n/* 77 */ vec4( s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*6+3  , 16*6+3 ) , 8   ), // c\n/* 78 */ vec4(-s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*6+11 , 16*6+11) , 8   ), // k\n/* 79 */ vec4( s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*5+4  , 16*5+4 ) , 9   ), // T\n/* 80 */ vec4(-s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*6+1  , 16*6+1 ) , 9   ), // a\n/* 81 */ vec4( s4+t0, specialBtnInvScale,  PACK_CHAR_INDICES(16*6+2  , 16*6+2 ) , 9   ), // b\n/* 82 */ vec4( s2,    1,                   PACK_CHAR_INDICES(16*7+1  , 16*5+1 ) , 81  ), // q\n/* 83 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+7  , 16*5+7 ) , 87  ), // w\n/* 84 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+5  , 16*4+5 ) , 69  ), // e\n/* 85 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+2  , 16*5+2 ) , 82  ), // r\n/* 86 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+4  , 16*5+4 ) , 84  ), // t\n/* 87 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+9  , 16*5+9 ) , 89  ), // y\n/* 88 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+5  , 16*5+5 ) , 85  ), // u\n/* 89 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+9  , 16*4+9 ) , 73  ), // i\n/* 90 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+15 , 16*4+15) , 79  ), // o\n/* 91 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+0  , 16*5+0 ) , 80  ), // p\n/* 92 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*5+11 , 16*7+11) , 219 ), // [\n/* 93 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*5+13 , 16*7+13) , 221 ), // ]\n/* 94 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*5+12 , 16*7+12) , 220 ), // *\\*\n/* 95 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+1  , 16*4+1 ) , 65  ), // a\n/* 96 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+3  , 16*5+3 ) , 83  ), // s\n/* 97 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+4  , 16*4+4 ) , 68  ), // d\n/* 98 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+6  , 16*4+6 ) , 70  ), // f\n/* 99 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+7  , 16*4+7 ) , 71  ), // g\n/*100 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+8  , 16*4+8 ) , 72  ), // h\n/*101 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+10 , 16*4+10) , 74  ), // j\n/*102 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+11 , 16*4+11) , 75  ), // k\n/*103 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+12 , 16*4+12) , 76  ), // l\n/*104 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*3+11 , 16*3+10) , 59  ), // ;\n/*105 */ vec4(-s2-e0, 1,                   PACK_CHAR_INDICES(16*2+7  , 16*2+2 ) , 222 ), // '\n/*106 */ vec4( -s4,   specialBtnInvScale,  PACK_CHAR_INDICES(16*4+5  , 16*4+5 ) , 13  ), // E\n/*107 */ vec4( s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*6+14 , 16*6+14) , 13  ), // n\n/*108 */ vec4( -s4,   specialBtnInvScale,  PACK_CHAR_INDICES(16*7+4  , 16*7+4 ) , 13  ), // t\n/*109 */ vec4( s4 ,   specialBtnInvScale,  PACK_CHAR_INDICES(16*6+5  , 16*6+5 ) , 13  ), // e\n/*110 */ vec4(-s4 ,   specialBtnInvScale,  PACK_CHAR_INDICES(16*7+2  , 16*7+2 ) , 13  ), // r\n/*111 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+10 , 16*5+10) , 90  ), // z\n/*112 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+8  , 16*5+8 ) , 88  ), // x\n/*113 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+3  , 16*4+3 ) , 67  ), // c\n/*114 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*7+6  , 16*5+6 ) , 86  ), // v\n/*115 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+2  , 16*4+2 ) , 66  ), // b\n/*116 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+14 , 16*4+14) , 78  ), // n\n/*117 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*6+13 , 16*4+13) , 77  ), // m\n/*118 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*2+12 , 16*3+12) , 188 ), // ,\n/*119 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*2+14 , 16*3+14) , 190 ), // .\n/*120 */ vec4( 0,     1,                   PACK_CHAR_INDICES(16*2+15 , 16*3+15) , 191 ), // /\n/*121 */ vec4( s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*5+3  , 16*5+3 ) , 16  ), // S\n/*122 */ vec4(-s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*6+8  , 16*6+8 ) , 16  ), // h\n/*123 */ vec4( s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*6+9  , 16*6+9 ) , 16  ), // i\n/*124 */ vec4(-s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*6+6  , 16*6+6 ) , 16  ), // f\n/*125 */ vec4( s4,    specialBtnInvScale,  PACK_CHAR_INDICES(16*7+4  , 16*7+4 ) , 16  ), // t\n/*126 */ vec4(-s4+9., 1,                   PACK_CHAR_INDICES(16*2+0 ,  16*2+0 ) , 16  )  // \n);\n\n\n// Useful thing to test keys: https://www.shadertoy.com/view/XsycWw\n\n","name":"Common","description":"","type":"common"}]}