{"ver":"0.1","info":{"id":"csSXWt","date":"1671049483","viewed":286,"name":"Oil? (161 chars)","username":"Alpaga","description":"That's what happens when you don't normalize.","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["glow","golfing"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Raymarch a grid of spheres, accumulating colors along the way.\n// Colors are attenuated by the distance to the spheres in a glow-like fashion.\n//\n// I forgot to normalize the ray direction, which gives this nice oil effect\n// and... reduces the code!\n\n// Xor's version (161 chars)\nvoid mainImage(out vec4 O, vec2 I)\n{\n    O*=0.;\n    vec4 p=O;\n    p.x = iTime;\n    for(int i=0; i++<9; O += abs(cos(p))/exp(3.*O.a))\n        p += vec4(I/iResolution.y,1,1) * (O.a = length(mod(p,2.)-1.));\n}\n\n/* My version (173 chars)\nvoid mainImage(out vec4 O, vec2 I) {\n    vec4 r = vec4(I/iResolution.y,1,1);\n    O*=0.;\n    vec4 p;\n    p.x = iTime;\n    for(int i=0; i<9; i++) {\n        p += r*(O.a = length(mod(p,2.)-1.));\n        O += abs(cos(p))*exp(-3.*O.a);\n    }\n}*/\n\n/*\nvoid mainImage(out vec4 O, vec2 I) {\n    vec3 r = vec3(I/iResolution.y,1);\n    O*=0.;\n    vec3 p;\n    p.x = iTime;\n    for(int i=0; i<9; i++) {\n        float d = length(mod(p,2.)-1.);\n        p += r*d;\n        O.rgb += abs(cos(p))*exp(-3.*d);\n    }\n}*/","name":"Image","description":"","type":"image"}]}