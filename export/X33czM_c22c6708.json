{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"video","id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Fork of \"Comic Book! - Working - V1\" by trigger_dunk. https://shadertoy.com/view/XXcyzM\n// 2024-12-22 03:01:35\n\n// Fork of \"Comic Book - Not Working - V1\" by trigger_dunk. https://shadertoy.com/view/lXdyz4\n// 2024-12-21 20:08:24\n\nconst float PI = 3.1415926535897932384626433832795;\n\nconst float gamma = .75;\n\nvec3 applyGammaCorrection(vec3 color, float gamma) { return pow(color, vec3(1.0 / gamma));}\n\nvec4 RGBtoCMYK(vec3 rgb)\n{\n    float r = rgb.r;\n    float g = rgb.g;\n    float b = rgb.b;\n\n    float k = 1.0 - max(max(r, g), b);\n    float c = (1.0 - r - k) / (1.0 - k);\n    float m = (1.0 - g - k) / (1.0 - k);\n    float y = (1.0 - b - k) / (1.0 - k);\n\n    // If k is 1.0, set c, m, y to 0 to handle edge cases\n    if (k > .8)\n    {\n        c = 0.2;\n        m = 0.2;\n        y = 0.2;\n    }\n\n    return vec4(c, m, y, k);\n}\n\nvec3 CMYKtoRGB(vec4 cmyk)\n{\n    float c = cmyk.x;\n    float m = cmyk.y;\n    float y = cmyk.z;\n    float k = cmyk.w;\n\n    float r = (1.0 - c) * (1.0 - k);\n    float g = (1.0 - m) * (1.0 - k);\n    float b = (1.0 - y) * (1.0 - k);\n\n    return vec3(r, g, b);\n}\n\n// credit to https://www.shadertoy.com/view/wtcyzX\nvec4 Posterize(in vec4 inputColor){\n      float numColors = 4.0f;\n\n\n      vec3 c = inputColor.rgb;\n      c = pow(c, vec3(gamma, gamma, gamma));\n      c = c * numColors;\n      c = floor(c);\n      c = c / numColors;\n      c = pow(c, vec3(1.0/gamma,1.0/gamma,1.0/gamma));\n\n      return vec4(c, inputColor.a);\n    }\n\nvec2 shifter (float angle) {\n    return vec2(sin(PI + angle)/550., cos(PI + angle)/50.);\n    }\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tfloat ratio = iResolution.y / iResolution.x;\n\tfloat coordX = fragCoord.x / iResolution.x;\n\tfloat coordY = fragCoord.y / iResolution.x;\n\tvec2 dstCoord = vec2(coordX, coordY);\n\tvec2 rotationCenter = vec2(0.5, 0.5);\n    vec4 color = texture(iChannel0,dstCoord);\n    vec4 newColor = vec4(0.);\n    color = Posterize(color); //\n   \n    \n    vec4 finalColor = RGBtoCMYK(color.xyz);  //black will remain unshifted. shift the remaining channels.\n    \n    // shift uv. sample. store shifted channel into original variable.\n    newColor = texture(iChannel0, dstCoord + shifter(iTime*4.));\n    newColor = RGBtoCMYK(newColor.xyz);\n    finalColor.x = newColor.x; //cyan\n    \n    \n    newColor = texture(iChannel0, dstCoord + shifter(iTime*4.5)); \n    newColor = RGBtoCMYK(newColor.xyz);\n    finalColor.y = newColor.y; // magenta\n    \n    \n    newColor = texture(iChannel0, dstCoord + shifter(iTime*5.)); \n    newColor = RGBtoCMYK(newColor.xyz);\n    finalColor.z = newColor.z; // yellow\n    \n    \n    finalColor = vec4(CMYKtoRGB(finalColor),1.0);\n    finalColor.xyz = applyGammaCorrection(finalColor.xyz, gamma); //combine channels\n\tfragColor = finalColor;\n}\n    ","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"X33czM","date":"1734837207","viewed":89,"name":"Comic Book!","username":"trigger_dunk","description":"This is my first attempt at a shader. Posterize -> Convert CMYK -> (Extract channel + shift uv) x 3 -> Convert RGB.\nCredit to https://www.shadertoy.com/view/wtcyzX for the posterize funciton. Feel free to use, but leave a comment if you do!","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["glitch","cmyk","toon","comic"],"hasliked":0,"parentid":"","parentname":""}}