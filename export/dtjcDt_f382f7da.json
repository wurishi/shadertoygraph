{"ver":"0.1","info":{"id":"dtjcDt","date":"1692526364","viewed":25,"name":"NMA Demo","username":"rokas","description":"-","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["nma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sdCircle(vec2 uv, vec2 c, float r) {\n    return length(uv - c) - r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float ar = iResolution.x / iResolution.y;\n    uv.x *= ar;\n    uv.x -= ar / 2. - 0.5;\n    if (uv.x < 0. || uv.x > 1.) {\n        fragColor = vec4(0);\n        return;\n    }\n\n    // Time varying pixel color\n    //vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    \n    float offx = 0.05;\n    float offy = 0.33;\n    float cr = 0.1;\n    float d0 = sdCircle(uv, vec2(.5 - offx, .5 + offy), cr);\n    float d1 = sdCircle(uv, vec2(.5 + offx, .5 + offy), cr);\n    \n    float d2 = sdCircle(uv, vec2(.5 - offx, .5), cr);\n    float d3 = sdCircle(uv, vec2(.5 + offx, .5), cr);\n    \n    float d4 = sdCircle(uv, vec2(.5 - offx, .5 - offy), cr);\n    float d5 = sdCircle(uv, vec2(.5 + offx, .5 - offy), cr);\n    \n    \n    float d = min(d0, d1);\n    d = min(d, max(d2, d3));\n    d = min(d, max(d4, -d5));\n    \n    // Naudojam SDF rezultatą kaip parametrą vaivorykštės funkcijai\n    float s = 0.5 + 0.5 * cos((d - iTime / 20.) * 180.);\n    \n    // Invertuojam spalvas jei jos yra SDF viduj\n    if (d < 0.)\n        col = vec3(1.) - col;\n    col = mix(col, vec3(0), s);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}