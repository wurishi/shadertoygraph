{"ver":"0.1","info":{"id":"flyGWW","date":"1637662375","viewed":420,"name":"Sphere texture mapping test","username":"lambmeow","description":"just a quick test on spherical mapping","likes":9,"published":3,"flags":0,"usePreview":0,"tags":["sdf","texture","sphere"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.141592653\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n    vec2 r = iResolution.xy,uv = (fragCoord* 2.- r)/r.y;\n    vec3 col = vec3(0), ro = vec3(0,0,-3), rd = normalize(vec3(uv,2));\n    float ll = 0.;\n    for(int i = 0; i < 100;i++)\n    {\n       vec3 p = ro + rd * ll;\n       float dd = length(p) - 1.;\n       p.xz *= mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));       \n       p.xy *= mat2(cos(iTime), -sin(iTime), sin(iTime), cos(iTime));\n       if(dd < 0.001)\n       {\n           float a =  1. - ((atan(p.z/p.x)))/(2.*PI);\n           float b =  1. - ((acos(p.y/length(p))))/PI;\n           vec3 diff = texture(iChannel0, vec2(a,b)).rgb;\n           col = diff;\n           break;\n       }\n       ll += dd;\n       if(ll > 100.)\n          break;\n    }\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}