{"ver":"0.1","info":{"id":"M3jXRG","date":"1710764473","viewed":48,"name":"2D Lighting From \"Drawn Apart\"","username":"Bactus","description":"Used for a game jam.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["2d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI 3.14159265359\n\nstruct LightSource {\n    vec3 pos;\n    float str;\n    vec4 col;\n};\n\nvec4 get_background(vec2 point, float index)\n{\n    int i = int(index) % 3;\n    \n    if (i == 0)\n        return texture(iChannel0, point);\n    if (i == 1)\n        return texture(iChannel1, point);\n    if (i == 2)\n        return texture(iChannel2, point);\n}\n\nvec4 consider_LightSource(vec4 baseColor, vec3 pos, LightSource ls)\n{\n    float dist = distance(ls.pos, pos);\n    \n    return baseColor * ls.col * ls.str / pow(dist, 2.0);\n}\n\nvec2 generate_circular_pose(float angle, float offset)\n{\n    float newAngle = angle + offset;\n    return (vec2(1.0) + vec2(cos(newAngle), sin(newAngle))) / 2.0;\n}\n\nfloat generate_height(float min, float max, float offset)\n{\n    return min + (max - min) * sin(iTime + offset) / 2.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec3 pos = vec3(uv, 0.0); \n    \n    float height1 = 0.2; //generate_height(0.2, 0.5, 0.0);\n    float height2 = 0.2; //generate_height(0.2, 0.5, PI);\n    \n    LightSource ls1;\n    ls1.pos = vec3(generate_circular_pose(iTime, 0.0), height1);\n    ls1.str = 0.1;\n    ls1.col = vec4(1.0);\n   \n    LightSource ls2;\n    ls2.pos = vec3(generate_circular_pose(iTime, PI / 2.0), height2);\n    ls2.str = 0.1;\n    ls2.col = vec4(0.8392, 0.4745, 0.8588, 1.0);\n    \n    LightSource ls3;\n    ls3.pos = vec3(generate_circular_pose(iTime, PI), height1);\n    ls3.str = 0.1;\n    ls3.col = vec4(1.0, 0.7137, 0.0509, 1.0);\n\n    LightSource ls4;\n    ls4.pos = vec3(generate_circular_pose(iTime, PI * 1.5), height2);\n    ls4.str = 0.1;\n    ls4.col = vec4(0.0157, 0.0, 0.9098, 1.0);\n    \n    \n    vec4 baseColor = get_background(uv, 0.0);\n    vec4 col = vec4(vec3(0.0), 0.1);\n    col += consider_LightSource(baseColor, pos, ls1);\n    col += consider_LightSource(baseColor, pos, ls2);\n    col += consider_LightSource(baseColor, pos, ls3);\n    col += consider_LightSource(baseColor, pos, ls4);\n    clamp(col, 0.0, 1.0);\n    \n    // Output to screen\n    fragColor = col;\n}","name":"Image","description":"","type":"image"}]}