{"ver":"0.1","info":{"id":"MtySDt","date":"1486408881","viewed":87,"name":"Assignment 2 Reveal:McCoy","username":"remello22","description":"A shader that can reveal a background image depending on the mouse position","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["class"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGRn","filepath":"/media/a/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","previewfilepath":"/media/ap/cd4c518bc6ef165c39d4405b347b51ba40f8d7a065ab0e8d2e4f422cbc1e8a43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRn","filepath":"/media/a/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","previewfilepath":"/media/ap/e6e5631ce1237ae4c05b3563eda686400a401df4548d0f9fad40ecac1659c46c.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 Blur = mat3 (0.111, 0.111, 0.111,\n                  0.111, 0.111, 0.111,\n                  0.111, 0.111, 0.111);\n\nmat3 Sharpen = mat3 (0.0, -1.0, 0.0,\n                     -1.0, 5.0, -1.0,\n                     0.0, -1.0, 0.0);\n\nvec3 Sample(const int x, const int y, in vec2 fragCoord) {\n \tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[0].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[0].xy;\n    return texture(iChannel0, uv).xyz;\n}\n\nvec3 SecondSample(const int x, const int y, in vec2 fragCoord) {\n \tvec2 uv = fragCoord.xy / iResolution.xy * iChannelResolution[1].xy;\n    uv = (uv + vec2(x, y)) / iChannelResolution[1].xy;\n    return texture(iChannel1, uv).xyz;\n}\n\nvec3 Filter(in vec2 fragCoord, mat3 kernel){\n\tvec3 total = Sample(-1, -1, fragCoord) * kernel[0][0]\n        \t   + Sample(-1, 0, fragCoord) * kernel[0][1]\n        \t   + Sample(-1, 1, fragCoord) * kernel[0][2]\n        \t   + Sample(0, -1, fragCoord) * kernel[1][0]\n        \t   + Sample(0, 0, fragCoord) * kernel[1][1]\n        \t   + Sample(0, 1, fragCoord) * kernel[1][2]\n        \t   + Sample(1, -1, fragCoord) * kernel[2][0]\n        \t   + Sample(1, 0, fragCoord) * kernel[2][1]\n        \t   + Sample(1, 1, fragCoord) * kernel[2][2];\n    \n    return total;\n}\n\nvec3 SecondFilter(in vec2 fragCoord, mat3 kernel){\n\tvec3 total = SecondSample(-1, -1, fragCoord) * kernel[0][0]\n        \t   + SecondSample(-1, 0, fragCoord) * kernel[0][1]\n        \t   + SecondSample(-1, 1, fragCoord) * kernel[0][2]\n        \t   + SecondSample(0, -1, fragCoord) * kernel[1][0]\n        \t   + SecondSample(0, 0, fragCoord) * kernel[1][1]\n        \t   + SecondSample(0, 1, fragCoord) * kernel[1][2]\n        \t   + SecondSample(1, -1, fragCoord) * kernel[2][0]\n        \t   + SecondSample(1, 0, fragCoord) * kernel[2][1]\n        \t   + SecondSample(1, 1, fragCoord) * kernel[2][2];\n    \n    return total;\n}\n\nfloat Radius = 0.2;\nvec2 Center = vec2(iMouse.x, iMouse.y);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    uv.y *= iResolution.y / iResolution.x;\n    \n    vec2 Frag = fragCoord.xy;\n    \n    vec3 FragBlur = Filter(Frag, Blur);\n    vec3 FragSharp = Filter(Frag, Sharpen);\n    \n    vec3 SecondFragBlur = SecondFilter(Frag, Blur);\n    vec3 SecondFragSharpen = SecondFilter(Frag, Sharpen);\n    \n    float Mouse = (distance(fragCoord.xy, iMouse.xy) / iResolution.y);\n    \n    vec4 BackGround = vec4(FragSharp, 1.0);\n    vec4 Forground = vec4(SecondFragBlur, 1.0);\n    \n    if(Mouse > Radius)\n        fragColor = Forground;\n    else{\n     \tfloat Blend = 1.0 - (exp(0.05 / Mouse) / 2.7);\n        fragColor = mix(BackGround, Forground, Blend);\n    }\n}","name":"Image","description":"","type":"image"}]}