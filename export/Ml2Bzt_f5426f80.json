{"ver":"0.1","info":{"id":"Ml2Bzt","date":"1516905883","viewed":75,"name":"Checker Tile HW (michaels)","username":"jacksonmichaels","description":"this shader is for the checkerboard assignment","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["checkertilelondon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 dem = vec2(10, 5); //this is where you define the rows and cols. first value is number of cols second is number of rows\n    \n\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 white = texture(iChannel0, uv);\t\t//change this to set the first tile color or texture\n\n\tvec4 black = texture(iChannel1, uv);\t\t//change this to set the other tile color or texture\n   \t\n    vec2 pixelSize = vec2(iResolution.x, iResolution.y) / dem;\t//i use  this to find how many pixels wide and tall each tile should be\n    \n    bool toggley, togglex, toggleComp; \t\t\t//these values are used in my way to avoid if statements, its more clear later\n    \n\tint i = int(fragCoord.x/pixelSize.x);  \t\t//i is the number of tiles before the tile you are in on the x axis\n    \n    int j = int(fragCoord.y/pixelSize.y);  \t\t//j is the number of tiles before the tile you are in on the y axis\n\n    togglex = bool(mod(float(i), 2.0));\t\t\t//this one toggles between the two textures based on how many tiles are before you, \n    //so if you have an even number of tiles before you on the x axis its value is set to fales, and if its odd then true\n\n    toggley = bool(mod(float(j), 2.0));   \t\t//same thing but for the y axis\n    \n    \n    toggleComp = bool(mod(float(togglex) + float(toggley), 2.0)); //this is an elaborate xor gate for the two toggle values\n    //if they are both true or both false then it too is false, if either is true but not the other then it is true.\n    \n    \n    fragColor = white * float(!toggleComp) + black * float(toggleComp); //using  the composite toggle from before i can set the color\n    //the first half means if my composite toggle is true, then i set it to false, cast to float (would be 0) and multiply the white \n    //channel by that value. meaning its set to 0. then i do the same with the black channel however i do not invert the toggle, so\n    //black would be multiplied by 1 making it unchanged. this way if the composite toggle is true, black is shown, if it is false\n    //white is shown. using this i removed all if statements and replaced them with some make not so clean type casting.\n}","name":"Image","description":"","type":"image"}]}