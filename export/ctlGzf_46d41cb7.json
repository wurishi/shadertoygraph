{"ver":"0.1","info":{"id":"ctlGzf","date":"1672167951","viewed":200,"name":"Liquid Color Shift","username":"vivekseth","description":"Simple demo of using perlin noise to warp an image. The R, G, B channels are warped with different time delays and added together to create a color shift effect","likes":8,"published":1,"flags":0,"usePreview":0,"tags":["noise","colors","perlin","warp","liquid"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://github.com/bradley/Blotter/blob/28a89fd0d5fd22ef46e01590df8cb3664c5a9ec2/build/materials/liquidDistortMaterial.js\n// https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83\n\n#define PROCESSING_COLOR_SHADER\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n#define PI 3.1415926538\n\n// uniform float time;\n// uniform vec2 resolution;\n\n//\tClassic Perlin 3D Noise \n//\tby Stefan Gustavson\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n// https://math.stackexchange.com/questions/100655/cosine-esque-function-with-flat-peaks-and-valleys\n// ranges from 0.0 to 1.0\nfloat flatSin(float x, float b) {\n  float num = 1.0 + b*b;\n  float den = 1.0 + b*b*cos(x)*cos(x);\n  float y = sqrt(num / den) * cos(x);\n\n  return y * 0.5 + 0.5;\n}\n\n// https://gist.github.com/983/e170a24ae8eba2cd174f#file-frag-glsl-L19\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n\nfloat rand(vec2 co){\n  return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec4 randomize(vec2 uv, vec4 color) {\n  float noiseLevel = 0.2;\n\n  vec2 center = vec2(0.5, 0.5);\n  vec2 delta = uv - center;\n  float value = length(delta) / 0.70710678;\n\n  float r = rand(uv);\n\n  return color * (1.0 - noiseLevel) + r * noiseLevel;\n}\n\nvec4 colorGradient2(vec2 coord) {\n  \n  vec2 center = vec2(0.5, 0.5);\n  vec2 delta = coord - center;\n\n  // float hue = (atan(delta.y, delta.x) + 0.5 * PI) / (2 * PI);\n  // float sat = length(delta) / 0.70710678;\n  float value = 1.0 - length(delta) / 0.70710678; // 1.0; // sin(time) * 0.5 + 0.5;\n\n  // float value2 = step(0.0, sin(value * 100.0));\n  float value2 = flatSin(0.4 * 100.0 * value, 4.0);\n  vec4 col = vec4(vec3(value2), 1.0);\n\n  vec4 rCol = randomize(coord, col);\n\n  return rCol;\n  \n\n\n  // return vec4(hsv2rgb(vec3(hue, sat, value2)), 1.0);\n}\n\n\nvec4 boundedTextureColor(vec2 coord) {\n  vec2 newCoord;\n  newCoord.x = max(min(coord.x, 1.0), 0.0);\n  newCoord.y = max(min(coord.y, 1.0), 0.0);\n\n  return colorGradient2(newCoord);\n}\n\n\n\nvec4 liquify(vec2 fragCoord, float currTime) {\n  float timeScale = 0.1;\n\n  vec2 uv = fragCoord / (1.0 * iResolution.xy);\n  float dx = cnoise(vec3(0.9 * 2.0 * uv, currTime * timeScale));\n  float dy = cnoise(vec3(0.9 * 3.0 * uv, 134.0 + currTime * timeScale));\n  uv.x += dx * 0.8;\n  // uv.y += dy * 0.08;\n\n  vec4 col = colorGradient2(uv);\n  \n\n  return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float timeDelay = 0.08;\n    \n    vec4 r = liquify(fragCoord.xy, iTime);\n    vec4 g = liquify(fragCoord.xy, iTime + timeDelay);\n    vec4 b = liquify(fragCoord.xy, iTime + 2.0*timeDelay);\n    \n    vec4 color = vec4(r.x, g.y, b.z, 1.0);\n    \n    fragColor = color;\n    \n    \n\n    // Normalized pixel coordinates (from 0 to 1)\n    // vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    // fragColor = vec4(col,1.0);\n}\n\n\n","name":"Image","description":"","type":"image"}]}