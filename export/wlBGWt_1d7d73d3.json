{"ver":"0.1","info":{"id":"wlBGWt","date":"1561669908","viewed":145,"name":"Julia distance estimator","username":"matistjati","description":"A julia set colored using distance estimation","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["distanceestimation","juliaset","jula"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float escapeRadius = 128.;\nconst float speed = .225;\n\n//const vec2 origin = vec2(-0.05,.6805);\nconst vec2 origin = vec2(0.);\n\nvec2 cMul(vec2 a, vec2 b)\n{\n\treturn vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);\n}\n\nvec2 cPow(vec2 z, float p)\n{\n\n    float r = pow(length(z),abs(p));\n\n   \tfloat theta = atan(z.y, z.x)*p;\n   \n    return r*vec2(cos(theta), sin(theta));\n}\n\nfloat dist(vec2 pos, vec2 c, out float iter)\n{\n    vec2 z = pos;\n    vec2 dz = vec2(0.);\n\n\tconst float maxIter = 250.;\n    \n    const float power = 2.;\n\n    \n    float m2;\n    float i=0.;\n    for(;i<maxIter;i++)\n    {\n        dz = 2.* mat2(z,-z.y,z.x) * dz + 1.;\n\t\t//z = cPow(z,power)+c;\n        z = mat2(z,-z.y,z.x)*z+c;\n        \n        m2 = dot(z,z);\n        if( m2>escapeRadius)\n            break;\n    }\n\n\n    iter = i/maxIter;\n\n    return sqrt( m2/dot(dz, dz))*0.5f*log(m2);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tz = 0.5-0.5*abs(cos(speed*iTime));\n\n    float zoom = pow( 0.5, 13.0*tz );\t\n    \n\tvec2 uv = (2. * fragCoord - iResolution.xy ) / iResolution.y;\n    \n    vec2 c = origin + uv;//*zoom;\n\n\tuv.x *= iResolution.x/iResolution.y;\n    \n    float iterations = 0.;\n\t\n    \n    float p = abs(sin(iTime*.3));\n    \n    float d = abs(dist(c, mix(vec2(0., 1.), vec2(0., .65), p), iterations));\n    \n    float t = clamp(pow(4.*d/zoom,.2),0.,1.);\n\n    fragColor = vec4((1.-t)*vec3(0.8, 0.,0.6),1.);\n}","name":"Image","description":"","type":"image"}]}