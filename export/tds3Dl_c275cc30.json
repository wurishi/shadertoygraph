{"ver":"0.1","info":{"id":"tds3Dl","date":"1547845418","viewed":212,"name":"LCD Handheld Game","username":"UhhNope","description":"Looks like an old Tiger Electronics handheld game LCD screen complete with drop shadow effect.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["lcd"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float grayAdj = -0.5;\nconst vec3 bgColor = vec3(0.93, 0.99, 0.62);\nconst vec2 shadowOffset = vec2(-0.003, 0.006) * 4.0;\nconst float lcdOpacity = 0.7;\nconst float shadowOpacity = 0.3;\n\nvec3 rgb2hsv(vec3 rgb)\n{\n\tfloat Cmax = max(rgb.r, max(rgb.g, rgb.b));\n\tfloat Cmin = min(rgb.r, min(rgb.g, rgb.b));\n    float delta = Cmax - Cmin;\n\n\tvec3 hsv = vec3(0., 0., Cmax);\n\t\n\tif (Cmax > Cmin)\n\t{\n\t\thsv.y = delta / Cmax;\n\n\t\tif (rgb.r == Cmax)\n\t\t\thsv.x = (rgb.g - rgb.b) / delta;\n\t\telse\n\t\t{\n\t\t\tif (rgb.g == Cmax)\n\t\t\t\thsv.x = 2. + (rgb.b - rgb.r) / delta;\n\t\t\telse\n\t\t\t\thsv.x = 4. + (rgb.r - rgb.g) / delta;\n\t\t}\n\t\thsv.x = fract(hsv.x / 6.);\n\t}\n\treturn hsv;\n}\n\nfloat chromaKey(vec3 color)\n{\n\tvec3 backgroundColor = vec3(0.157, 0.576, 0.129);\n\tvec3 weights = vec3(4., 1., 2.);\n\n\tvec3 hsv = rgb2hsv(color);\n\tvec3 target = rgb2hsv(backgroundColor);\n\tfloat dist = length(weights * (target - hsv));\n\treturn 1. - clamp(3. * dist - 1.5, 0., 1.);\n}\n\nfloat getLcdMask(vec4 color)\n{    \n    float chroma = chromaKey(color.rgb);    \n    \n    float result;\n    \n    // convert to grayscale\n    result = color.r + color.g + color.b / 3.0;\n    \n    // posterize\n    float p1 = step(0.9, result); // 0.75 - 1.0\n    float p2 = step(0.25, result) * step(result, 0.5); // 0.25 - 0.5\n    result = max(p1, p2);   \n    \n    // apply chromakey mask\n    result = result * (1.0 - chroma);\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // sample tex and get/set chroma to alpha\n    vec4 main = texture(iChannel0, uv);\n    float mainLcd = getLcdMask(main);    \n    \n    // sample tex and get/set chroma to alpha again\n    // but with offset UV for \"drop shadow\" effect\n    vec4 shadow = texture(iChannel0, uv + shadowOffset);\n    float shadowLcd = getLcdMask(shadow);\n    // apply shadow opacity scaling\n    shadowLcd = shadowLcd * lcdOpacity * shadowOpacity;\n    \n    float combinedLcd = min(mainLcd + shadowLcd, 1.0);\n    // apply lcd opacity scaling\n    combinedLcd = combinedLcd * lcdOpacity;\n    \n    // add some noise to the background\n    float bgTex = texture(iChannel1, fragCoord / iResolution.xy).r;\n    bgTex = pow(bgTex, 3.0);\n    vec3 bg = (1.0 - bgTex) * bgColor;\n    \n    vec3 final = mix(bg, vec3(0), combinedLcd);\n    \n    // Output to screen\n    fragColor = vec4(vec3(final), 1.0);    \n}","name":"Image","description":"","type":"image"}]}