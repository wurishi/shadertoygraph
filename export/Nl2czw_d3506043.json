{"ver":"0.1","info":{"id":"Nl2czw","date":"1649376103","viewed":163,"name":"normal_map_generator","username":"mileslacey","description":"Quick demonstration of normal-map generation from a texture.","likes":6,"published":1,"flags":0,"usePreview":0,"tags":["sobel","normalmap","bump","normal","bumpmap"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n#define PIXEL_NRM 1\n#define PIXEL_LUM 1\n\nfloat vec_luminance(in vec4 rgb)\n{\n    const vec2 coeffs = vec2(0.25f, 0.5f);\n    return dot(rgb.rgb, coeffs.xyx);\n}\n\nvec4 bumped_normal(const in sampler2D albedo, const in vec2 uv, float stepX, float stepY)\n{\n    // sample corners around the current pixel and gather luminance\n    float c  = vec_luminance(texture(albedo, uv));\n    float n  = vec_luminance(texture(albedo, uv+vec2( 0.f,    stepY)));\n    float e  = vec_luminance(texture(albedo, uv+vec2( stepX,  0.f  )));\n    float s  = vec_luminance(texture(albedo, uv+vec2( 0.f,   -stepY)));\n    float w  = vec_luminance(texture(albedo, uv+vec2(-stepX,  0.f  )));\n    \n    float ne = vec_luminance(texture(albedo, uv+vec2( stepX,  stepY)));\n    float se = vec_luminance(texture(albedo, uv+vec2( stepX, -stepY)));\n    float sw = vec_luminance(texture(albedo, uv+vec2(-stepX, -stepY)));\n    float nw = vec_luminance(texture(albedo, uv+vec2(-stepX,  stepY)));\n\n    // sobel filter\n    float dX = ((ne + 2.f * e + se) - (nw + 2.f * w + sw));\n    float dY = ((sw + 2.f * s + se) - (nw + 2.f * n + ne));\n\n    // use the current pixel's luminance to determine influence of surrounding\n    // pixels\n    vec4 bump = normalize(vec4(dX, dY, c, 0.f)) * 0.5f + 0.5f;\n    bump.w = 1.f;\n    return bump;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord / iResolution.xy;\n    vec2 uvStep = 0.5f / iResolution.xy;\n\n    // Output to screen\n    #if PIXEL_NRM\n        fragColor = bumped_normal(iChannel0, uv, uvStep.x, uvStep.y);\n    #elif PIXEL_LUM\n        float l = vec_luminance(texture(iChannel0, uv));\n        fragColor = vec4(l, l, l, 1.f);\n    #else\n        fragColor = texture(iChannel0, uv);\n    #endif\n}","name":"Image","description":"","type":"image"}]}