{"ver":"0.1","info":{"id":"3scfD2","date":"1606050075","viewed":477,"name":"FM Electric Piano (sound)","username":"athibaul","description":"A simple EP sound based on frequency modulation. Inspired by [url=https://www.youtube.com/watch?v=F3rrjQtQe5A&feature=youtu.be&t=5m10s]a famous preset of the Yamaha DX7 FM synthesizer[/url].","likes":25,"published":1,"flags":8,"usePreview":0,"tags":["sound","fm","frequencymodulation","electricpiano","ep"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\nvec3 pianoColor(vec2 p)\n{\n    vec3 col = vec3(0);\n    \n    float whiteKeyX = round(p.x);\n    vec3 whiteKeyCol = 0.5+0.5*cos(vec3(0,1,2)+p.x*vec3(0.62,1.,1.62)+vec3(1.,1.2,1.4)*7.*iTime);\n    whiteKeyCol = whiteKeyCol/min(length(whiteKeyCol), 1.); // Brighten dark colors\n    col = mix(col, whiteKeyCol, smoothstep(0.45,0.43,abs(p.x-whiteKeyX)));\n    \n    float blackKeyX = round(p.x + 0.5) - 0.5;\n    blackKeyX -= mod(mod(blackKeyX,7.),4.) < 1. ? 1. : 0.;\n    col = mix(col, vec3(0), smoothstep(0.3,0.25,abs(p.x-blackKeyX)) * smoothstep(0.,0.05,p.y));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord*2.-iResolution.xy)/iResolution.y;\n    \n    vec3 col = pianoColor(p * 5.);\n    col = sqrt(col);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"\n#define TAU (2.*3.1415926)\n#define msin(x,m) sin(TAU*(x)+(m))\n\nvec2 epiano(float freq, float t, float nuance)\n{\n    // freq : frequency of note\n    // t : time since beginning of note\n    // nuance : 1 is mezzo-forte, smaller is piano, larger is forte\n    vec2 f0 = vec2(freq*0.998, freq*1.002);\n    \n    // Glassy attack : slightly sharp,\n    // modulated at 14 * base frequency with a sharply decaying envelope\n    // and with a relatively fast decay\n    vec2 glass = msin((f0+3.)*t, msin(14.*f0*t,0.) * exp(-30.*t) * nuance) * exp(-4.*t)  * nuance;\n    glass = sin(glass); // Distort at high nuances\n    \n    // Body of the sound : perfectly in tune,\n    // index of modulation depends on nuance and is boosted a bit for low notes\n    vec2 body = msin(f0*t, msin(f0*t,0.) * exp(-0.5*t) * nuance * pow(440./f0.x, 0.5)) * exp(-t) * nuance;\n    \n    // Pan the attack depending on which note it is\n    float panDir = clamp(log2(freq/400.)/2., -1., 1.); // -1 is left, 1 is right\n    vec2 pan = normalize(vec2(0.5-0.5*panDir, 0.5+0.5*panDir));\n    return (glass*pan + body) * 0.05 * smoothstep(0.,0.001,t);\n}\n\nfloat cps(float notenumber)\n{\n    // Convert from MIDI note number to cycles per second\n    return 440.*exp2((notenumber-69.)/12.);\n}\n\nvec2 playChords(float time)\n{\n    // A simple four-chord loop\n    float delta = 1.;\n    float t = mod(time, delta);\n    float it = floor(time/delta);\n    float strum = mod(it, 3.) / 3. + 0.2;\n    float nu = 0.5*exp(0.7*sin(it));\n    float loopNum = floor(it/4.);\n    it = mod(it, 4.);\n    vec2 snd = vec2(0);\n    \n    float secondTime = mod(loopNum, 2.);\n    if(it == 0.) // Dm7\n    {\n        snd += epiano(cps(50.), t, nu);\n    \tsnd += epiano(cps(57.), t-0.02*strum, nu);\n    \tsnd += epiano(cps(60.), t-0.05*strum, nu);\n        snd += epiano(cps(65.), t-0.1*strum, nu);\n        \n        // Melody\n        nu = 0.5*exp(0.5*sin(time));\n    \tsnd += epiano(cps(69.), t-delta*0.25, nu);\n        snd += epiano(cps(72.+4.*secondTime), t-delta*0.5, nu);\n        snd += epiano(cps(74.+5.*secondTime), t-delta*0.75, nu);\n    }\n    else if(it == 1.) // G7\n    {\n        snd += epiano(cps(43.), t, nu);\n    \tsnd += epiano(cps(57.-secondTime), t-0.04*strum, nu*0.7);\n    \tsnd += epiano(cps(59.), t-0.04*strum, nu);\n        snd += epiano(cps(65.), t-0.12*strum, nu);\n        \n        \n        nu = 0.5*exp(0.5*sin(time));\n    \tsnd += epiano(cps(76.+secondTime), t-delta*0., nu);\n    \tsnd += epiano(cps(74.+2.*secondTime), t-delta*0.25, nu);\n        snd += epiano(cps(72.+2.*secondTime), t-delta*0.5, nu);\n        snd += epiano(cps(74.-2.*secondTime), t-delta*0.75, nu);\n    }\n    else if(it == 2.) // CM7\n    {\n        snd += epiano(cps(48.), t, nu);\n        snd += epiano(cps(55.), t-0.03*strum, nu);\n        float sixth = 2.*mod(loopNum, 2.);\n    \tsnd += epiano(cps(59.-2.*secondTime), t-0.02*strum, nu);\n        snd += epiano(cps(62.), t-0.03*strum, nu*0.5);\n        snd += epiano(cps(64.), t-0.06*strum, nu);\n        \n        nu = 0.5*exp(0.5*sin(time));\n    \tsnd += epiano(cps(67.+4.*secondTime), t-delta*0.063, nu);\n    }\n    else if(it == 3.) // A7\n    {\n        snd += epiano(cps(45.), t-0.0*strum, nu);\n        snd += epiano(cps(55.), t-0.06*strum, nu);\n        snd += epiano(cps(61.), t-0.03*strum, nu);\n        snd += epiano(cps(64.+secondTime), t-0.1*strum, nu);\n        snd += epiano(cps(64.), t-0.5*delta, nu*secondTime);\n    }\n    \n    return snd * smoothstep(delta, delta-0.01, t);\n}\n\n\n\nvec2 mainSound( in int samp, float time )\n{\n    vec2 snd = vec2(0);\n    \n    //float t = mod(time, 1.);\n    //float freq = 440.;\n    //snd += epiano(freq*2., t, 1.);\n    //snd += epiano(freq, t, 1.);\n    //snd += epiano(freq*0.5, t, 1.); \n    //snd += epiano(freq*0.25, t, 2.); \n    \n    snd += playChords(time);\n    // Spatial effect : early reflections\n    snd += vec2(0.2,0.1) * playChords(time - 0.05).yx;\n    snd += vec2(0.03,0.05) * playChords(time - 0.15).yx;\n    \n    return snd;\n}","name":"Sound","description":"","type":"sound"}]}