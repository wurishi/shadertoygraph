{"ver":"0.1","info":{"id":"XfdGWr","date":"1712084941","viewed":77,"name":"i15","username":"Sergey_Kl","description":"Mini test in shader","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["lab"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define pi (acos(-1.))\n\nconst vec3 color = vec3(.9,.67,.9);\n                \nvec2 rotate(vec2 a, float b)\n{\n    float c = cos(b);\n    float s = sin(b);\n    return vec2(\n        a.x * c - a.y * s,\n        a.x * s + a.y * c\n    );\n}\n\nfloat cube(vec3 p, float s)\n{\n    vec3 d = abs(p) - vec3(s);\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\n\n\nfloat scene(vec3 p)\n{\n    float r = .8;\n    vec3 p2 = abs(p)-1.;\n    float d = max(max(p2.x,p2.y),p2.z);\n    d = max(d, dot(p, vec3(-1,-1,1))-r);\n    d = max(d, dot(p, vec3(1,1,1))-r);\n    d = max(d, dot(p, vec3(-1,1,-1))-r);\n    d = max(d, dot(p, vec3(1,-1,-1))-r);\n    d = min(d, cube(p - vec3(3.0, 0.0, 0.0), 1.0));\n    d = min(d, cube(p + vec3(3.0, 0.0, 0.0), 1.0));\n    d = min(d, sphere(p - vec3(0.0, 0.0, 3.0), 1.0));\n    d = min(d, sphere(p - vec3(0.0, 0.0, -3.0), 1.0));\n    d = min(d, sphere(p + vec3(0.0, 3.0, 0.0), 1.0));\n    d = min(d, sphere(p + vec3(0.0, -3.0, 0.0), 1.0));\n    return d/sqrt(3.);\n}\n\n\n/*\nvec3 trace(vec3 cam, vec3 dir)\n{\n    float t;\n    for(int i = 0; i < 500; ++i)\n    {\n        float k = scene(cam+dir*t);\n        t += k;\n        if (k < .001)\n        {\n            vec3 h = cam+dir*t;\n    \t\tvec2 o = vec2(.001, 0);\n    \t\tvec3 n = normalize(vec3(\n        \t\tscene(h+o.xyy)-scene(h-o.xyy),\n        \t\tscene(h+o.yxy)-scene(h-o.yxy),\n        \t\tscene(h+o.yyx)-scene(h-o.yyx)\n    \t\t));\n\n\t\t\t\n            const vec3 lightdir = normalize(vec3(1,5,2));\n\n            float light = dot(n,lightdir)*.5+.5;\n\n            return light * color;\n\n        }\n\n    }\n    return vec3(1);\n}\n*/\nvec3 trace(vec3 cam, vec3 dir)\n{\n    float t;\n    vec3 color = vec3(1); \n    for(int i = 0; i < 100; ++i)\n    {\n        float k = scene(cam+dir*t);\n        t += k;\n        if (k < .001)\n        {\n            vec3 h = cam+dir*t;\n    \t\tvec2 o = vec2(.001, 0);\n    \t\tvec3 n = normalize(vec3(\n        \t\tscene(h+o.xyy)-scene(h-o.xyy),\n        \t\tscene(h+o.yxy)-scene(h-o.yxy),\n        \t\tscene(h+o.yyx)-scene(h-o.yyx)\n    \t\t));\n\n\t\t\tif (iMouse.z > 0.)\n    \t\t{\n        \t\treturn n*.5+.5;\n    \t\t}\n    \t\telse\n    \t\t{\n\t\t        const vec3 lightdir = normalize(vec3(1,5,2));\n                \n\t\t        float light = dot(n,lightdir)*.5+.5;\n\t\t\n\t\t        return light * color;\n    \t\t}\n        }\n        color = mix(vec3(1), vec3(.9,.67,.9), smoothstep(0., 10., t));\n    }\n    return color;\n}\n\nvoid cameraspin(inout vec3 p)\n{\n    p.yz = rotate(p.yz, .3);\n    if (iMouse.z > 0.)\n    {\n        p.xz = rotate(p.xz, -iTime*.5);\n    }\n    else\n    {\n        p.xz = rotate(p.xz, iTime*.5);\n    }\n}\n\n\nvoid mainImage(out vec4 out_color, vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy / iResolution.xy - .5;\n    uv.x *= iResolution.x / iResolution.y;\n\n    vec3 cam = vec3(0,0,-55.);\n    vec3 dir = normalize(vec3(uv,4));\n    \n    cameraspin(cam);\n    cameraspin(dir);\n\n    out_color.rgb = trace(cam,dir);\n    \tout_color.rgb *= pow(color, vec3(2.*dot(uv,uv)));\n    \tout_color.rgb = pow(out_color.rgb,vec3(.45));\n    \n    \n}\n","name":"Image","description":"","type":"image"}]}