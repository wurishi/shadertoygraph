{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"vec3 flameRGB(float t) {\n    return vec3(t, t*t, t*t*t);\n}\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    o = vec4(0,0,0,1);\n    \n    vec3 e = texture(iChannel1, p/iResolution.xy).rgb;\n    \n    o.rgb += RGB_2 * flameRGB(e.r);\n    o.rgb += RGB_1 * flameRGB(e.g);\n    o.rgb += RGB_1 * e.b;\n    \n    o.rgb = pow(o.rgb, vec3(0.4545));\n    \n}\n","name":"Image","description":"","type":"image"},{"outputs":[],"inputs":[],"code":"const float PI = radians(180.);\nconst float SQ3 = sqrt(3.);\nconst float INF = 1e10;\n\n// Simulation consts\nconst int N = 256;\nconst float ALPHA = 0.2;\nconst float MASS = 1.2;\n\n// Rendering consts\nconst vec3 RGB_1 = vec3(0.2, 0.1, 1.5);\nconst vec3 RGB_2 = vec3(1.5, 0.5, 0.2);\nconst float GLOW = 1.5;\nconst float R0 = 0.02;\nconst float R1 = 1.0;\nconst float DAMPING = 0.0001;\n\nvec2 p2q(vec2 p, vec3 iRes) {\n    vec2 ar = iRes.xy/iRes.yy;\n    return (p/iRes.xy*2. - 1.) * ar;\n}\n\nvec2 q2p(vec2 q, vec3 iRes) {\n    vec2 ar = iRes.xy/iRes.yy;\n    return (q/ar*0.5 + 0.5) * iRes.xy;\n}\n\nvec4 texFetch(sampler2D ch0, int i) {\n    i = int(mod(float(i), float(N)));\n    return texelFetch(ch0, ivec2(i,0), 0);\n}\n\nvec2 c2mul(vec2 a, vec2 b) {\n    return mat2(a.x, a.y, -a.y, a.x) * b;\n}\n\nvec2 c2exp(float x) {\n    return vec2(cos(x), sin(x));\n}\n","name":"Common","description":"","type":"common"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Simulates the motion of masses in iChannel0.\n//  .xy = current\n//  .zw = previous\n\nvec2 extForce(vec4 cc) {\n    if (iMouse.z > 0.)\n        return 0.03 * p2q(iMouse.xy, iResolution);\n        \n    float t = float(iFrame)/10.;\n    vec2 dir = vec2(1,0);\n    float amp = 0.0;\n    float freq = 0.18; // 0..1\n    \n    // initial driving force\n    if (iTime < 5.)\n        amp = 0.02;\n    \n    float sum = cos(2.*PI*freq*t);\n    sum += 0.5*cos(2.*PI*freq*12.*t);\n    sum += 0.2*cos(2.*PI*freq*30.*t);\n    return amp*dir*sum;\n}\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    ivec2 pp = ivec2(p - 0.5);\n\n    if (pp.x > N-1 || pp.y > 0)\n        return;\n     \n    // initial state\n    if (iFrame < 10) {\n        float x = 2.*PI*float(pp.x)/float(N);\n        o = vec4(0);\n        return;\n    }\n    \n    vec4 cc = texFetch(iChannel0, pp.x);\n    vec2 rr = texFetch(iChannel0, pp.x + 1).xy;\n    vec2 ll = texFetch(iChannel0, pp.x - 1).xy;\n    \n    vec2 T = rr + ll - 2.*cc.xy; // Hooke's law\n    T += ALPHA*T*(rr - ll); // the non-linear term\n    if (pp.x == 0) T += extForce(cc); // external force\n    \n    o.xy = 2.*cc.xy - cc.zw;\n    o.xy += T.xy/MASS;\n    o.xy = (o.xy - DAMPING*cc.zw)/(1. + DAMPING);\n    o.zw = cc.xy; // prev <- curr\n}\n","name":"Buffer A","description":"","type":"buffer"},{"outputs":[{"channel":0,"id":"XsXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"channel":1,"type":"buffer","id":"XsXGR8","filepath":"/media/previz/buffer01.png","sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"// Renders the mesh defined by iChannel0 coords.\n\nfloat lineSDF(vec2 p, vec2 a, vec2 b) {\n    vec2 pa = p-a, ba = b-a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h );\n}\n\nvec2 pos(sampler2D ch0, int i) {\n    vec2 c = c2exp(float(i)/float(N)*2.*PI + PI/2.);\n    vec4 w = texFetch(ch0, i);\n    return c*0.5 + c2mul(c, w.xy)*R1;\n}\n\nfloat sdf(sampler2D ch0, vec2 q) {\n    float d = INF, e = 0.;\n    vec2 a = pos(ch0, -1);\n    \n    for (int i = 0; i < N; i++) {\n        vec2 b = pos(ch0, i);\n        d = min(d, lineSDF(q, a, b));\n        a = b;\n    }\n    \n    return d;\n}\n\nvoid mainImage(out vec4 o, in vec2 p) {\n    vec2 q = p2q(p, iResolution);\n    float d = sdf(iChannel0, q);\n    float e = exp(-pow(7.5*d/R0, 2.0));\n\n    o.rgb = vec3(e, e, pow(R0/d, GLOW));\n\n    float dt = 0.02;\n    o.r += (1.0-dt*2.1)*texture(iChannel1, q2p(q*(1.0-dt*0.5), iResolution)/iResolution.xy).r;\n    o.g += (1.0-dt*0.7)*texture(iChannel1, q2p(q*(1.0+dt*0.3), iResolution)/iResolution.xy).g;\n}\n","name":"Buffer B","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"XfVBDy","date":"1734417335","viewed":64,"name":"Sound Shapes","username":"prasound","description":"iMouse.xy = external force","likes":2,"published":1,"flags":32,"usePreview":0,"tags":["oscillator"],"hasliked":0,"parentid":"Xc3fzs","parentname":"Sound Flow"}}