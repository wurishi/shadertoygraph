{"ver":"0.1","info":{"id":"dtyXzD","date":"1685975303","viewed":117,"name":"Amoeba Lichen 2","username":"tomachi","description":"Click in the centre somewhere.\nThis has a life algorithm but is tainted by also allowing it to migrate to \"greener\" pixel pastures.","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["colors","automata","screensaver","colours","gameoflife","fading","gol"],"hasliked":0,"parentid":"ddKXWc","parentname":"Amoeba vs Lichen Cell Automata"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n#define tex3(pos) texture(iChannel3, pos).z\n\n/*\nchannels:\nBuffer A - Cells states\nBuffer B - background trails\nBuffer C - density mask ( used to fill blanks mid-game)\n*/\nvec4 sand(in vec2 fragCoord )\n{\n    vec2 uv=fragCoord/iResolution.xy;\n    vec4 part = texture(iChannel3,uv);\n\tfloat c = step(0.1,part.x);\n\tvec3 col=vec3(1.,.9,.8)*c*(1.-abs(uv.x-.5));\n    vec4 fragColor = vec4(col,1.);\n    return fragColor;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy/iResolution.xy;\n    float A = tex0(uv) *0.03* iTime;\n    float B = tex1(uv) *0.004* iTime;\n    float C = tex2(uv) *0.04* iTime;\n    float D = tex3(uv) *0.04* iTime;\n  \n    fragColor = vec4(A*20. + (B*0.09413), (A*0.65)+B*0.2,(A*0.125)+ 0.15+ (B*0.00013)+D,1.) + vec4(D);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4df3zn","filepath":"/media/a/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","previewfilepath":"/media/ap/3405e48f74815c7baa49133bdc835142948381fbe003ad2f12f5087715731153.ogv","type":"video","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define tex(pos) texture(iChannel0, pos).x\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n#define tex3(pos) texture(iChannel3, pos).z\n#define R iResolution.xy\n\n/*float checkPixel(float col, float value) // mapping function\n{\n    if (value >= 0.90001) {\n        return col + value;\n    } else {\n        return 0.;\n    }\n}*/\nbool isHerbivore(vec2 uv) {\n    if (tex0(uv) > 0.1) { return true; } else { return false; }\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 muv = iMouse.xy/iResolution.xy;\n    vec3 p = vec3(vec2(1.)/iResolution.xy, 0.);\n    float brightest = 0.;\n    float veges = tex1(uv);\n    float col = tex0(uv);\n    float D = tex3(uv);\n\n    if (iFrame == 1) { \n      col = sin(uv.x);\n      fragColor = vec4(sin(uv.x),sin(uv.y), sin(uv.x*uv.y), 1.0);\n      return;\n    }\n\n\n\n    int n = 0; // game of life logics\n    float amoeba = 0.; // amoeba logic\n    float onepix = p.x;\n    float twopix = onepix * 2.;\n\n    vec2 lup   = vec2(uv.x-p.x, uv.y-p.y);\n    vec2 ldown = vec2(uv.x-p.x, uv.y+p.y);\n    vec2 rup   = vec2(uv.x+p.x, uv.y-p.y);\n    vec2 rdown = vec2(uv.x+p.x, uv.y+p.y);\n\n    vec2 left = vec2(uv.x+p.x, uv.y);\n    vec2 right= vec2(uv.x-p.x, uv.y);\n    vec2 up   = vec2(uv.x, uv.y-p.y);\n    vec2 down = vec2(uv.x, uv.y+p.y);\n\n    // count neighbours\n    n += int(tex(lup));\n    n += int(tex(ldown));\n    n += int(tex(rup));\n    n += int(tex(rdown));\n\n    n += int(tex(left));\n    n += int(tex(right));\n    n += int(tex(up));\n    n += int(tex(down));\n\n    if(col > 0.1 && n == 3) col += 0.5; // rebirth\n  // else if(col > 0.00094 && !(n == 2 || n == 3)) col = 0.; // overcrowd death\n       if (abs(col)>0.95)  { col = 0.; }\n       \n    // if the cell at 180 degrees around from herbi is not better move here\n    // if to the left, theh check 2 pixels to the left\n\n    if (isHerbivore(lup)) { // diagonal down\n      if(veges > tex1(vec2(uv.x - twopix, uv.y - twopix))) {\n          col -= tex1(vec2(uv.x - twopix, uv.y - twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(ldown)) { // diagonal down\n      if(veges > tex1(vec2(uv.x - twopix, uv.y + twopix))) {\n          col -= tex1(vec2(uv.x - twopix, uv.y + twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(rup)) { // diagonal up \n      if(veges > tex1(vec2(uv.x + twopix, uv.y - twopix))) {\n        //  col += tex1(vec2(uv.x + twopix, uv.y - twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(rdown)) { // diagonal up \n      if(veges > tex1(vec2(uv.x + twopix, uv.y - twopix))) {\n          col += tex1(vec2(uv.x + twopix, uv.y - twopix));\n      } else { col = 0.; }\n    }\n\n    if (isHerbivore(left)) { // left\n      if(veges > tex1(vec2(uv.x - twopix, uv.y))) {\n         col += tex1(vec2(uv.x - twopix, uv.y));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(right)) { // right\n      if(veges > tex1(vec2(uv.x + twopix, uv.y))) {\n          col += tex1(vec2(uv.x + twopix, uv.y));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(up)) { // up\n      if(veges > tex1(vec2(uv.x, uv.y - twopix))) {\n          col += tex1(vec2(uv.x, uv.y - twopix));\n      } else { col = 0.; }\n    }\n    if (isHerbivore(down)) { // down\n      if(veges > tex1(vec2(uv.x, uv.y + twopix))) {\n          col += tex1(vec2(uv.x, uv.y + twopix));\n      } else { col = 0.0061; }\n    }\n             \n  \n    if ((iMouse.z > 0. && length(iMouse.xy - fragCoord.xy) < 128.)) {\n    \tfragColor += vec4(uv,0,0);\n        fragColor.w = .1*(fragColor.x + R.x * fragColor.y + dot(iDate,vec4(1)));\n        return;\n    }\n     if (iFrame <= 1 ) {\n         if (length(vec2(0.5,0.5) - uv.xy) < 64.) {\n          col = 0.935 + uv.x + uv.y;\n         }\n        return;\n     }\n  \n    fragColor = vec4(vec3(col), 1.0);\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex3(pos) texture(iChannel3, pos).z\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n\n    float A = tex0(uv);\n    float B = tex1(uv);\n    float D = tex3(uv);\n\n    float amoeba = 0.;\n    vec3 p = vec3(vec2(1.)/iResolution.xy, 0.);\n\n    B-=A*0.05125;\n    if(iFrame < 2 && texture(iChannel1, uv).x<1. && roughNoise2(uv*3., 7, .5, uint(iTime/2.)) >= .7) // fill blank space with cells\n    {\n       B-=0.00651;\n    //   B+=D * 0.0651;\n\n    }\n\n    \n    //    B *= 1.001;\n     //   B *= 0.99;\n        amoeba += tex1(vec2(uv.x-p.x, uv.y-p.y));\n        amoeba += tex1(vec2(uv.x-p.x, uv.y+p.y));\n        amoeba += tex1(vec2(uv.x+p.x, uv.y-p.y));\n        amoeba += tex1(vec2(uv.x+p.x, uv.y+p.y));\n        amoeba += tex1(vec2(uv.x+p.x, uv.y));\n        amoeba += tex1(vec2(uv.x-p.x, uv.y));\n        amoeba += tex1(vec2(uv.x, uv.y-p.y));\n     //  amoeba += tex1(vec2(uv.x, uv.y+p.y));\n        B += amoeba*0.000951951; \n    if (B > 0. &&  B < 0.91) { B *= 0.000001; }\n    B = abs(B);\n    B = clamp(B, 0., 10.);\n    if (D > 0.5) B += 0.9;\n\n    if ((iMouse.z > 0. && length(iMouse.xy - fragCoord.xy) < 128.) || iFrame < 1) {\n    \tfragColor += vec4(uv,0,0);\n        fragColor.w = .1*(fragColor.x + R.x * fragColor.y + dot(iDate,vec4(1)));\n      //  return;\n    }\n\n    if (iFrame <1 ) {\n        fragColor = vec4(0.0075) ;\n        return;\n     }\n\n    fragColor += vec4(vec3(B),1.0);\n\n    \n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define R iResolution.xy\n\nfloat map(float v, float a1, float a2, float b1, float b2) // mapping function\n{\n    return (v-a1)/(a2-a1)*(b2-b1)+b1;\n}\nuint Hash(uint s)\n{\n    s ^= 2747636419u;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    s ^= s >> 16;\n    s *= 2654435769u;\n    return s;\n}\nuint seed2 = uint(0);\nfloat r(uint s)  // random float\n{\n    return float(Hash(s)) / 4294967295.0;\n}\nfloat r2(vec2 p) // random float for vec2\n{\n    if(p == vec2(0.)) return r(uint(p.x*100.));\n    else return fract(sin(dot(p, vec2(12.9898, 78.233))) * (43758.5453+float(seed2)));\n}\nfloat pixelNoise(vec2 uv) // uper left quadrant\n{\n    return r2(round(uv));\n}\n\nfloat smoothNoise(vec2 uv)\n{\n    float BL = pixelNoise(floor(uv)); // take samples of four surrounding squares\n    float TR = pixelNoise(ceil(uv));\n    float BR = pixelNoise(vec2(ceil(uv.x), floor(uv.y)));\n    float TL = pixelNoise(vec2(floor(uv.x), ceil(uv.y)));\n    \n    uv = fract(uv); // make uv fit in 0-1 to use it in interpolation\n    uv = smoothstep(0., 1., uv); // make interpolation smooth (try commenting it out, it will be uglier)\n    \n    return mix(mix(BL, BR, uv.x), mix(TL, TR, uv.x), uv.y); // interpolate between surrounding colors\n}\nfloat roughNoise1(vec2 uv, int depth, float roughness, uint s)\n{\n    float col = smoothNoise(uv);\n    float basis = 1./(roughness);\n    \n    for(int i = 1; i < depth; i++) //tweaking initial color by multiplying it by smaller scale noise\n    {\n        uv += vec2(4.3487*r(s), 5.754*r(s)); //move uv to avoid radial repetition effect\n        col *= map(smoothNoise(uv*pow(2., float(i))), 0., 1., 1.-1./pow(basis, float(i)), 1.+1./pow(basis, float(i)));\n    }\n\n    return col;\n}\n\nfloat roughNoise2(vec2 uv, int depth, float roughness, uint s)\n{\n    uv += vec2(27.238*r(s), 16.162*r(s+uint(1)));\n\n    float col = smoothNoise(uv);\n    float normalizer = 0.;\n    float basis = 1./(roughness);\n    \n    for(int i = 1; i < depth; i++) //tweaking initial color by adding it to smaller scale noise\n    {\n        uv += vec2(4.3487*r(s+uint(2)), 5.754*r(s+uint(3))); //move uv to avoid radial repetition effect\n        col += map(smoothNoise(uv*pow(2., float(i))), 0., 1., -1./pow(basis, float(i)), 1./pow(basis, float(i)));\n        normalizer += 1./pow(basis, float(i));\n    }\n\n    return smoothstep(0., 1., map(col, -normalizer, 1.+normalizer, 0., 1.)); // normalize the value\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"#define tex(pos) texture(iChannel0, pos).x\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n   /*  if (iFrame <3 ) {\n        fragColor = vec4(10.75) -  vec4(fragCoord,fragCoord.x,fragCoord.y);\n        return;\n     }*/\n\n    fragColor = texture(iChannel0, fragCoord.xy/iResolution.xy, 6.)-3.00000000000000079;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"#define A 7\n#define tex0(pos) texture(iChannel0, pos).x\n#define tex1(pos) texture(iChannel1, pos).x\n#define tex2(pos) texture(iChannel2, pos).x\n#define tex3(pos) texture(iChannel3, pos).x\n\nfloat hash(vec2 p)\n{\n   return fract(sin(dot(p, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\n// check if there is an arriving particle at this pixel in next frame\nfloat arrivingParticle(vec2 coord, out vec4 partData, vec2 uv) {\n\t// scan area from -D to D\n    for (int i=-A; i<A; i++) {\n        for (int j=-A; j<A; j++) {\n            // position to check\n            vec2 arrCoord = coord + vec2(i,j);\n            vec4 data = texture(iChannel3, arrCoord/iResolution.xy);\n            \n            // no particles here\n            if (dot(data,data)<.9991) continue;\n\n            // get next position of particle\n            vec2 nextCoord = data.xy + data.zw;\n\n            // distance between next position and current pixel\n            vec2 offset = abs(coord - nextCoord);\n            // if the distance is within half a pixel pick this particle\n            // (other arriving particles are dismissed)\n            if (offset.x<.5 && offset.y<.5) {\n                partData = data;\n                return 1.;\n            }\n        }\n    }\n    // no particles arriving here\n\treturn 0.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord/iResolution.xy;\n \t// random particles at the top, xy is position, zw velocity\n    if (fragCoord.y>iResolution.y-1.) {\n        fragColor = vec4(fragCoord.xy,(hash(uv+iTime)-.8)*10.,-6.+hash(uv)); \n        return;\n    }\n   \n    // get the data of a particle arriving at this pixel \n    vec4 partData;\n    float p = arrivingParticle(fragCoord, partData, uv);\n\n    // no particles, empty pixel\n    if (p<1.) {\n    \tfragColor = vec4(0.);\n        return;\n    }\n    \n    // update position with current velocity altered by channels r & b in the video\n    float vel=max(0.,1.-length(texture(iChannel1,fragCoord/iResolution.xy).rb)*.035);\n    partData.xy+=partData.zw*vel;\n\n     if (iFrame <3 ) {\n        fragColor += vec4(1.75);\n        return;\n     }\n\n    //set particle data\n    fragColor = partData;\n}","name":"Buffer D","description":"","type":"buffer"}]}