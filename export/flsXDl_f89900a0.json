{"ver":"0.1","info":{"id":"flsXDl","date":"1626819475","viewed":150,"name":"AntiPod - Esuna","username":"Flopine","description":"A shader made as a loop for a track from ThronoCrigger, check out his album!!! \nhttps://thronocrigger.bandcamp.com/album/simulacra","likes":10,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarching","animation","chromatic","outline"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define l_thick 8\n#define l_contrast 0.8\n\nfloat diffnorm (vec2 uv, sampler2D buffnorm)\n{\n    float dn = 0.;    \n    vec3 currentnorm = texture(buffnorm,uv).xyz;\n    for (int i = -l_thick; i < l_thick; i += l_thick)\n    {\n        for (int j = -l_thick; j < l_thick; j += l_thick)\n        {\n            if (i == 0 && j == 0) continue;\n            vec2 offset = vec2(float(i),float(j))/iResolution.xy;\n            vec3 nextnorm = texture(buffnorm,uv+offset).xyz;\n            dn = dot(currentnorm, nextnorm);\n        }\n    }\n    return dn;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 uv_centered = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    fragColor = 1.-vec4(smoothstep(l_contrast,1.,diffnorm(uv-0.02, iChannel0)),\n                     smoothstep(l_contrast,1.,diffnorm(uv-0.01, iChannel0)),\n                     smoothstep(l_contrast,1.,diffnorm(uv-0.02, iChannel0)),\n                     1.);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define PI 3.141592\n#define TAU 6.283185\n#define ITER 64.\n\n#define BPM (160./60.)\n#define dt(sp,off) fract((iTime+off)*sp)\n#define bouncy(sp,off) sqrt(sin(dt(sp,off)*PI))\n#define swanim(sp,off) floor(sin(dt(sp,off)*TAU)+1.)\n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mo (inout vec2 p, vec2 d)\n{\n    p = abs(p)-d;\n    if (p.y>p.x) p = p.yx;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q = abs(p)-c;\n    return min(0.,max(q.x,max(q.y,q.z))) + length(max(q,0.));\n}\n\nfloat plane (vec3 p, vec3 n)\n{return dot (p,normalize(n));}\n\nfloat cut_ps (vec3 p)\n{\n    mo(p.xz, vec2(1.5));    \n    p.yz *= rot(dt(BPM/6.,0.)*TAU);\n    mo(p.yz, vec2(1.));\n    mo(p.xy,vec2(0.5));\n    \n    return plane (p,vec3(1.8,1.,1.5));\n}\n\n\nfloat SDF (vec3 p)\n{\n    p.yz *= rot(-PI/3.);\n    float a = mix(-PI/4.,PI/4.,dt(BPM/4.,0.));\n    p.xy *= rot(a);\n    p.x += sin(dt(BPM/2.,0.)*TAU);\n    p.y -= bouncy(BPM,0.)*2.;\n    \n    return cut_ps(p);\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.005,0.);\n    return normalize(SDF(p)-vec3(SDF(p-eps.xyy),SDF(p-eps.yxy),SDF(p-eps.yyx)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    \n    if (swanim(BPM/8.,0.)<0.5) mo(uv,vec2(0.6));\n\n    vec3 ro = vec3(0.01,0.5, -7.),\n        p = ro,\n        rd = normalize(vec3(uv,1.)),\n        col = vec3(0.8);\n    \n    float shad = 0.;\n    bool hit = false;\n    \n    for (float i=0.; i<ITER; i++)\n    {\n        float d = SDF(p);\n        if (d<0.001)\n        {\n            hit = true;\n            shad = i/ITER;\n            break;\n        }\n        p += d*rd;\n    }\n    float t= length(p-ro);\n    if (hit) col = getnorm(p);\n    \n    // store normal and distance\n    fragColor = vec4(col,t);\n}","name":"Buffer A","description":"","type":"buffer"}]}