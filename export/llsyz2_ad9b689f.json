{"ver":"0.1","info":{"id":"llsyz2","date":"1505630084","viewed":529,"name":"Generativo","username":"Danguafer","description":"I just felt like coding a music for the first time","likes":19,"published":1,"flags":8,"usePreview":0,"tags":["procedural","music"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 p;\n\nvec3 translation;\nvec3 rotation;\n\nmat2 rot(float a) { return mat2(cos(a),sin(a),-sin(a),cos(a)); }\n\nfloat line(vec2 a, vec2 b) {\n    float time = mod(iTime, 2.0);\n\tvec2 v  = b-a;\n    vec2 p0 = p-a;\n    float k = min(length(p0)/length(v),min(time, 1.0));\n    return smoothstep(2.0/iResolution.y,0.0,length(p0-k*v));\n}\n\nfloat line(vec3 p0, vec3 p1) {\n    p0.yz *= rot(rotation.x);\n    p1.yz *= rot(rotation.x);\n    p0.xz *= rot(rotation.y);\n    p1.xz *= rot(rotation.y);\n    p0.xy *= rot(rotation.z);\n    p1.xy *= rot(rotation.z);\t\n    \n    p0 -= translation;\n    p1 -= translation;\n    return line(p0.xy/p0.z,p1.xy/p1.z);\n}\n\nfloat box(float w, float h, float d) {\n    w/=2.0;\n    h/=2.0;\n    d/=2.0;\n    vec3 f0 = vec3(-w,-h,-d);\n    vec3 f1 = vec3( w,-h,-d);\n\tvec3 f2 = vec3(-w, h,-d);\n    vec3 f3 = vec3( w, h,-d);\n\n    vec3 b0 = vec3(-w,-h, d);\n    vec3 b1 = vec3( w,-h, d);\n\tvec3 b2 = vec3(-w, h, d);\n    vec3 b3 = vec3( w, h, d);        \n\n    float l = 0.0;\n    \n\tl = mix(l,1.0,line(f0,f1));\n    l = mix(l,1.0,line(f1,f3));\n    l = mix(l,1.0,line(f2,f3));\n    l = mix(l,1.0,line(f0,f2));    \n\n    l = mix(l,1.0,line(b0,b1));\n    l = mix(l,1.0,line(b1,b3));\n    l = mix(l,1.0,line(b2,b3));\n    l = mix(l,1.0,line(b0,b2));    \n\n\tl = mix(l,1.0,line(f0,b0));\n\tl = mix(l,1.0,line(f1,b1));\n\tl = mix(l,1.0,line(f2,b2));\n\tl = mix(l,1.0,line(f3,b3));\n\n    return l;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    p = (2.0*fragCoord.xy-iResolution.xy)/iResolution.y;\n\n    float l = 0.94;\n\n    translation = vec3(0.0,0.0,3.0);\n    float random_angle = floor(iTime / 2.0) * 234.567;\n    float a = iTime + random_angle;\n\n    for (int i = 0; i <= int(mod(iTime, 128.0) / 2.0); i++) {\n        float t = float(i);\n        float ta = a - t * 0.05;\n        rotation = vec3(ta, ta/2.0, ta/3.0);\n        l = mix(l,0.0,box(2.0+cos(ta + iTime) - t * 0.01,sin(ta + iTime)+2.0 - t * 0.01,3.0 - t * 0.01));\n    }\n    \n    l = mix(l, 0.94, smoothstep(0.55, 0.95, mod(iTime, 2.0) / 2.0));\n    l = mix(l, 0.94, smoothstep(96.0, 128.0, iTime));\n\n    vec3 col = vec3(l);\n\tfragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const float PI = acos(-1.0);\nconst float TAU = 2.0*PI;\nfloat HPI = PI/2.0;\n\n// Utils\nfloat rand(vec2 co) { return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\n// signal generators\nfloat sine(float t, float f) { return sin(TAU*t*f); } \nfloat square(float t, float f, float a) { return sign(sine(t,f)-a); }\nfloat square(float t, float f) { return square(t,f,0.0); }\nfloat triangle(float t, float f, float a) { t = mod((t+HPI)*TAU*f,TAU); float p = PI+0.99*a*PI; return mix(mix(-1.0,1.0,t/p),-1.0,(t-p)/(TAU-p)); }\nfloat triangle(float t, float f) { return triangle(t,f,0.0); }\nfloat noise(float t, float f) { return (rand(vec2(mod(t*TAU*f,TAU)))-0.5)*2.0; }\n\n// note to frequency\nfloat natural(float note) { return 440.0*pow(2.0,floor(note-9.0)*1.0/12.0); } // note = 0 => A4\nfloat minorpentatonic(float note) {\n    float r = floor(note/5.0);\n    float n = floor(mod(note,5.0));\n    if (n <= 0.0);\n    else if (n <= 1.5) n = 3.0;\n    else if (n <= 2.5) n = 5.0;\n    else if (n <= 3.5) n = 7.0;\n    else if (n <= 4.5) n = 10.0;\n    return natural(n+12.0*r);\n}\n\nfloat dist(float s, float d) { return clamp(s*(d+1.0),-1.0+sin(s*d),cos(s*d)); }\n\nfloat arp(float time, float factor, float base) {\n    return factor * floor(mod(time * 8.0, 4.0) - base);\n}\n\n\n// instruments\nfloat drumkick(float time) { return sine(time, 300.0 * exp(-10.0 * time)); }\nfloat snare(float time) { return dist(noise(time, 1.0) * exp(-20.0 * time), 5.0); }\nfloat melody(float time) {\n\tfloat factor = floor(mod(time, 4.0) + 1.0);    \n    \n    time = mod(time, 8.0);\n    float base;\n\n    if (time <= 2.0) base = 0.0;\n    else if (time <= 4.0) base = 2.0;\n    else if (time <= 6.0) base = 1.0;\n    else base = 3.0;\n\n    return triangle(time, minorpentatonic(arp(time, factor, base)));\n}\n\nfloat bass(float time) {\n    time = mod(time, 8.0);\n    float note;\n    if (time < 2.0) note = -5.0;\n    else if (time < 4.0) note = -4.0;\n\telse if (time < 6.0) note = -3.0;\n    else if (time < 7.0) note = -2.0;\n    else note = -1.0;\n    time = mod(time, 0.25);\n    return square(time, minorpentatonic(note)) * exp(-time * 5.0);\n}\n\nvec2 mainSound( in int samp,float time) {\n    float track0_volume = 0.25;\n    float track1_volume = 0.1;\n    float track2_volume = 0.5;\n    \n    float drumkick_speed = 0.5;\n    float drumkick_volume = 1.0;\n    float snare_volume = 0.5;\n        \n    if (time <= 8.0) {\n        track0_volume = 0.0;\n        track1_volume = 0.1 * time / 8.0;\n        track2_volume = 0.5 * time / 8.0;\n        time = mod(time, 1.0);\n    } else if (time <= 16.0) {\n        track0_volume = 0.0;\n        time = mod(time, 1.0);\n    } else if (time <= 32.0) {\n        track0_volume = 0.1 * (time - 16.0) / 16.0;\n    } else if (time <= 64.5) {\n    } else if (time <= 80.0) {\n        drumkick_volume = 0.0;\n        snare_volume = 0.5;\n    } else if (time <= 96.0) {\n    } else {\n        float decay = clamp(1.0 - (time - 96.0) / 16.0, 0.0, 1.0);\n        time = mod(time, 1.0);\n        track0_volume = 0.25 * decay;\n        track1_volume = 0.1 * decay;\n        track2_volume = 0.5 * decay;\n    }\n\n    \n    float instrument0 = melody(time);\n\tfloat instrument1 = bass(time);\n    float drum = drumkick_volume * drumkick(mod(time, drumkick_speed)) + snare(mod(time, 1.0)) * snare_volume;\n    \n    float track0 = instrument0 * track0_volume;\n    float track1 = instrument1 * track1_volume;\n    float track2 = drum * track2_volume;\n    \n    float master = track0 + track1 + track2;\n        \n    return vec2(master);\n}","name":"Sound","description":"","type":"sound"}]}