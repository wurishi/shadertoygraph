{"ver":"0.1","info":{"id":"NdjyWW","date":"1643890395","viewed":154,"name":"Genuary 2022 - Day23","username":"z0rg","description":"My participation to genuary 2022\nAbstract vegetation.","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["abstract","generative","vegetation","genuary","2022"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n\n    vec3 col = texture(iChannel0, uv).xyz;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\n#define sat(a) clamp(a, 0., 1.)\n\nfloat hash11(float seed)\n{\n    return mod(sin(seed*123.456)*123.456, 1.);\n}\n\n\n// The MIT License\n// Copyright Â© 2020 Inigo Quilez\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n// Signed distance to a line segment. Tutorial on how to derive\n//\n// the formula and code: https://www.youtube.com/watch?v=PMltMdi1Wzg\n\n// List of some other 2D distances: https://www.shadertoy.com/playlist/MXdSRf\n//\n// and iquilezles.org/articles/distfunctions2d\n\n   \nfloat udSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n    vec2 ba = b-a;\n    vec2 pa = p-a;\n    float h =clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length(pa-h*ba);\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// This work is licensed under the Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n// Unported License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-sa/3.0/ \n// or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.\n// =========================================================================================================\n\nfloat _seed;\nfloat rand()\n{\n    _seed++;\n    return hash11(_seed);\n}\nvec3 rdrtrunk(vec2 uv)\n{\n    vec3 col = vec3(.75);\n    \n    col = mix(col, vec3(.7), 1.-pow(sat(length((uv-vec2(0.,-.1))*3.)),.5));\n    float shp = iResolution.x*.5;\n    float th = .01;\n    float trunk = udSegment(uv, vec2(0.,-.1), vec2(0.,.1))-th;\n    trunk = min(trunk, udSegment(uv, vec2(0.,-0.03), vec2(.1,.07)*.5)-th*.7);\n    trunk = min(trunk, udSegment(uv, vec2(0.,0.02), vec2(-.1,.1+0.07)*.5)-th*.7);\n    vec3 trunkcol = mix(vec3(0.094,0.549,0.122), vec3(0.745,1.000,0.361), 1.-sat(-uv.y*7.+.5))*.7;\n    col = mix(col, trunkcol, 1.-sat(trunk*shp));\n    \n    return col;\n}\n\nvec3 rdr(vec2 uv)\n{\n    vec2 ouv = uv;\n    float shp = iResolution.x*.5;\n    vec3 col = rdrtrunk(uv);\n    uv -= vec2(0.,.05);\n    uv.x /= sat(uv.y)+.9;\n    float leave = length(uv)-.1;\n    \n    vec2 off = (vec2(rand(), rand())-.5)*.02;\n    vec3 rgbleave = rdrtrunk(ouv+off);\n    vec3 leavecol = mix(vec3(0.765,1.000,0.639), vec3(0.357,0.851,0.349), 1.-sat(ouv.y*5.));\n\n    col = mix(col, rgbleave*.6+leavecol*.6, 1.-sat(leave*shp));\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.xx;\n    _seed = iTime+texture(iChannel1, uv).x;\n    vec3 col = rdr(uv);\n    if (iFrame > 1)\n        col = mix(col, texture(iChannel0, fragCoord/iResolution.xy).xyz, .9);\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}