{"ver":"0.1","info":{"id":"Mftcz2","date":"1730920378","viewed":110,"name":"color fractal 2","username":"nayk","description":"source https://www.shadertoy.com/view/Mf3czB and fractal by gaz","likes":2,"published":3,"flags":0,"usePreview":0,"tags":["fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define R(p,a,r) mix(a*dot(p,a),p,cos(r)) + sin(r)*cross(p,a)\n#define H(h) (cos((h)*6.3+vec3(0,23,21))*.5+.5)\nfloat happy_star(vec2 uv, float anim)\n{\n    uv = abs(uv);\n    vec2 pos = min(uv.xy/uv.yx, anim);\n    float p = (2.0 - pos.x - pos.y);\n    return (2.0+p*(p*p-1.5)) / (uv.x+uv.y);      \n}\n \nvec3 color(float t) {\n  vec3 c1 = vec3(1.0, 0.0, 0.0);\n  vec3 c2 = vec3(0.0, 1.0, 0.0);\n  vec3 c3 = vec3(0.0, 0.0, 1.0);\n  vec3 c4 = vec3(1.0, 1.0, 0.0);\n  vec3 c5 = vec3(1.0, 0.0, 1.0);\n  vec3 c6 = vec3(0.0, 1.0, 1.0);\n\n  float r = sin(t) * 0.5 + 0.5;\n  if (r < 0.2) return mix(c1, c2, r * 5.0);\n  if (r < 0.4) return mix(c2, c3, (r - 0.2) * 5.0);\n  if (r < 0.6) return mix(c3, c4, (r - 0.4) * 5.0);\n  if (r < 0.8) return mix(c4, c5, (r - 0.6) * 5.0);\n  return mix(c5, c6, (r - 0.8) * 5.0);\n}\nfloat f_n(\n    vec2 o_trn,\n    float n_its,\n    float n_t,\n    float n_scl_min\n){\n\n    float n_tau = radians(360.);\n    float n_min = 1.;\n    float n_col = 1.;\n    float n_dcntr = length(o_trn);\n    for(float n_it = 0.; n_it < n_its; n_it+=1.){\n   \n        float n_it_nor = n_it / n_its;\n        float noff = 0.;\n        float n_amp = 0.1;\n        vec2 o = vec2(\n            sin((n_it_nor)*n_tau),\n            cos((n_it_nor)*n_tau)\n        )*n_amp-o_trn;\n        o.xy*=mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n       \n        float n = length(o);\n        float n_max = 12.;\n        float n_reps = 3.;\n        float n_res = 0.;\n        for(float n_rep = 0.; n_rep < n_reps; n_rep+=1.){\n            float n_rep_nor = fract((n_rep/n_reps)+n_t*.1);\n            float n_freq = sin(n_rep_nor*n_tau)*.5+.5;\n            float n = sin(n*n_max*n_freq*(1./n_dcntr))*.5+.5;\n            n = pow(n, 1./n_dcntr*.1);\n            //n = 1.-n;\n            n_res+= (1./n_reps)*n;\n        }\n\n       \n        n_col*=n_res;\n    }\n   \n    n_col = clamp(n_col, 0., 1.);\n   \n\n    return n_col;\n}\nvoid mainImage(out vec4 fragColor, vec2 fragCoord)\n{\nvec2 uv = ( fragCoord - .5*iResolution.xy ) / iResolution.y;\n    fragColor = vec4(0);\n   \n      float n_scl_min = min(iResolution.x, iResolution.y);\n    vec2 o_trn = (fragCoord.xy-iResolution.xy*.5)/n_scl_min;\n        o_trn*=mat2(cos(iTime),sin(iTime),-sin(iTime), cos(iTime));\n    float nt = iTime*.1;\n    vec3 o_col = vec3(\n        1.-f_n(o_trn, 2., nt+0.03, n_scl_min),\n        1.-f_n(o_trn, 3., nt+0.06, n_scl_min),\n        1.-f_n(o_trn, 4., nt+0.09, n_scl_min)\n    );\n    vec3 p, r = iResolution, d = normalize(vec3((fragCoord-.5*r.xy)/r.y,0.5));  \n    for(float i = 0., g = 0., e, s; i < 99.; ++i)\n    {\n        p = g * d;\n        p.z -= 0.6;\n        p+=o_col;\n        s = 4.;\np.xz*=mat2(cos(iTime),sin(iTime),-sin(iTime),cos(iTime));\n        for(int j = 0; j++ < 13;)\n        {\n        p.xy*=mat2(cos(iTime*0.01),sin(iTime*0.01),-sin(iTime*0.01),cos(iTime*0.01));\n            p = abs(p);\n            p = p.x < p.y ? p.zxy : p.zyx;\n            s *= e = 1.8 / min(dot(p, p), 1.3);\n            p = p * e - vec3(15,3,2);\n        }\n\n        g += e = length(p.xz) / s;\n        fragColor.rgb += color(iTime * 0.01 + i) * mix(r / r, H(log(s)), 0.7) * 0.08 * exp(-i * i * e);\n    }\n   \n    fragColor = pow(fragColor, vec4(3));\n    fragColor*= vec4( o_col*10., 1.);\n     uv *= 2.0 * ( cos(iTime * 2.0) -2.5); // scale\n    float anim = sin(iTime * 12.0) * 0.1 + 1.0;  // anim between 0.9 - 1.1\n    fragColor*= vec4(happy_star(uv, anim) * vec3(0.55,0.5,0.55)*2.2, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}