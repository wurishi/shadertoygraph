{"ver":"0.1","info":{"id":"XtVcWh","date":"1536006878","viewed":98,"name":"Combo","username":"ShadowFlare","description":"Combo","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["combo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float blurrinessX = 1.;\nfloat blurrinessY = 1.;\nconst float blur_amount = 1.;\nconst float kernal_num = 9.;\nconst float pi = 3.14159;\nfloat _count = 0.;\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _count = 0.;\n    vec2 reso = iResolution.xy;\n    vec2 center = vec2(iResolution.xy/2.);\n\tvec2 uv = fragCoord/iResolution.xy;\n\tfloat blur_amount = (blurrinessY);\n\tvec2 v_texcoord = fragCoord;\n\tvec4 v_colour = vec4(0.0);\n\tfloat blurSize = (1.0/reso.y) * blur_amount;\n\tvec4 sum = vec4(0.0);\n\tfloat sigma = floor(kernal_num);\n\tif (sigma/2.-floor(sigma/2.) == 0.) {\n         sigma -= 1.;\n    }\n    float eul = 2.71828;\n    float segP = floor(sigma/2.);\n       float kern[640];\n    int count = 0;\n    for (float i = -segP; i <= segP; i++) {\n            //exp(-power(i,2)/(2*power(sigPrime,2)))/(sqrt(2*pi)*sigPrime)\n            kern[count] = exp(-((i/sigma)*(i/sigma))/(2.*(segP*segP)))/(sqrt(2.*pi)*segP);\n        count++;\n    }\n    for (float i = -(kernal_num/2.); i < kernal_num/2.; i++) {\n\t\tsum += texture(iChannel0, vec2(uv.x, uv.y+i*blurSize))*kern[int(i+(kernal_num/2.))];\n    \t_count++;\n    }\n    \n    fragColor = sum;\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"float palette_index = 1.0;\nbool forceAlpha = true;\nfloat alpha = 1.0;\n//palette_texture = iChannel1;\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel_size = vec2(1.0/iResolution.xy);\n    vec4 palette_UVs = vec4(0.0+(texel_size.x/2.), 0.0+(texel_size.y/2.), iResolution.x*texel_size.x, iResolution.y*texel_size.x);;\n    vec2 uv = fragCoord/iResolution.xy;\n    vec4 source = texture( iChannel0, uv );\n    \n    //DoAlphaTest( source );\n    for(float i = palette_UVs.y; i < palette_UVs.w; i+=texel_size.y )\n    {\n        if (distance(source, texture(iChannel1, vec2(palette_UVs.x, i))) <= 0.4)\n        {\n            float palette_V = palette_UVs.x + texel_size.x * palette_index;\n            source = texture(iChannel1, vec2(palette_V, i));\n            break;\n        }\n    }\n    if (forceAlpha) {\n        vec4 samp = source;\n        samp = vec4(samp.rgb,samp.a*alpha);\n        samp = mix(samp, texture(iChannel2, uv), 1.0-samp.a);\n\t\tfragColor = samp;  \n    } else {\n    \tfragColor =  source;\n    }\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float blurriness = 1.;\nconst float blur_amount = 1.;\nconst float kernal_num = 9.;\nconst float pi = 3.14159;\nfloat _count = 0.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 reso = iResolution.xy;\n    vec2 center = vec2(iResolution.xy/2.);\n\tfloat blur_amount = (blurriness);\n\tvec2 v_texcoord = uv*iResolution.xy;\n\tvec4 v_colour = vec4(0.0);\n\tfloat blurSize = (1.0/reso.x) * blur_amount;\n\tvec4 sum = vec4(0.0);\n\tfloat sigma = floor(kernal_num);\n\tif (sigma/2.-floor(sigma/2.) == 0.) {\n         sigma -= 1.;\n    }\n    float eul = 2.71828;\n    float segP = floor(sigma/2.);\n       float kern[640];\n    int count = 0;\n    for (float i = -segP; i <= segP; i++) {\n            //exp(-power(i,2)/(2*power(sigPrime,2)))/(sqrt(2*pi)*sigPrime)\n            kern[count] = exp(-((i/sigma)*(i/sigma))/(2.*(segP*segP)))/(sqrt(2.*pi)*segP);\n        count++;\n    }\n    for (float i = -(kernal_num/2.); i < kernal_num/2.; i++) {\n\t\tsum += texture(iChannel0, vec2(uv.x+i*blurSize, uv.y))*kern[int(i+(kernal_num/2.))];\n    \t_count++;\n    }\n    fragColor = sum;\n}","name":"Buffer A","description":"","type":"buffer"}]}