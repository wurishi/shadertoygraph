{"ver":"0.1","info":{"id":"stSSzy","date":"1627925422","viewed":327,"name":"Weave Factory","username":"Flopine","description":"An other doodle written during lunch break :D Feeling creative again is the best <3 ","likes":33,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching","palette","animation","isometric","mograph"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings and FabriceNeyret for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n\n#define PI acos(-1.)\n#define TAU 6.283185\n\n#define od(p,d) (dot(p,normalize(sign(p)))-d)\n\n#define rot(a) mat2(cos(a),sin(a),-sin(a),cos(a))\n#define crep(p,c,l) p=p-c*clamp(round(p/c),-l,l)\n#define rep(p,c) p=(mod(p,c)-c*.5)\n\n#define frt(sp,off) fract((iTime+off)*sp)\n#define flt(sp,off) floor((iTime+off)*sp)\n\nstruct obj\n{\n    float d;\n    vec3 shadowcol;\n    vec3 lightcol;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nfloat box (vec3 p, vec3 c)\n{\n    vec3 q=abs(p)-c;\n    return min(0., max(q.x,max(q.y,q.z)))+length(max(q,0.));\n}\n\nobj set (vec3 p, vec3 scol, vec3 lcol)\n{\n    float id = round(p.x/5.);\n    crep(p.x, 5., 2.);\n    p.y += sin(p.z*0.5)*0.5;\n    vec3 pp = p;\n    \n    rep(p.z,5.);\n    float speed = 2.,offset = id*0.2;\n    p.yz *= rot(PI/2.*(flt(speed,offset)+pow(frt(speed,offset),1.5)));\n    float d = mix(box(p,vec3(.5)),od(p,0.6),0.5); \n    \n    p=pp;\n    p.z += iTime;\n    p.y += 0.65;\n    rep(p.z,1.1);\n    d = min(d,box(p,vec3(1.5,0.1,0.5)));\n    return obj(d, scol, lcol);\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    obj d = set(p,vec3(0.1,0.4,0.2),vec3(0.95,0.9,0.3));\n    p.xy += vec2(-2.,2.5);\n    p.xz *= rot(PI/2.);\n    d = minobj(d, set(p,vec3(0.4,0.,0.1),vec3(0.5,0.8,0.9)));\n    \n    return d;\n}\n\nvec3 getnorm (vec3 p)\n{\n    vec2 eps = vec2(0.001,0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat AO (float eps, vec3 n, vec3 p)\n{return SDF(p+eps*n).d/eps;}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n\n    vec3 ro = vec3(uv*5.,-30.), \n    rd=vec3(0.,0.,1.),\n    p=ro,\n    col=vec3(0.),\n    l=normalize(vec3(2.,3.,-2.));\n    \n    bool hit = false; \n    obj O;\n    \n    for (float i=0.;i<100.;i++)\n    {\n        O = SDF(p);\n        if (O.d<0.001)\n        {\n            hit = true; break;\n        }\n        p += O.d*rd*0.8;\n    }\n    \n    if (hit)\n    {\n        vec3 n = getnorm(p);\n        float li = max(dot(n,l),0.);//*.5+.3;\n        float ao = AO(0.1,n,p) + AO(0.4,n,p) + AO(0.3,n,p);\n        col = mix(O.shadowcol,O.lightcol,li)*ao/2.5;\n    }\n    \n    fragColor = vec4(sqrt(col),1.0);\n}","name":"Image","description":"","type":"image"}]}