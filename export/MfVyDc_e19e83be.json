{"ver":"0.1","info":{"id":"MfVyDc","date":"1732502827","viewed":50,"name":"Water displacement shader","username":"geant","description":"Some FBM experiment with sine","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["displacement"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 hash21(float p)\n{\n\tvec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n\tp3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord;\n\n    // iTime\n    \n    vec3 delta;\n    \n    float freq = 0.03;\n    float amp = 1.8;\n    float speed = 5.0f;\n    \n    float maxRang = 0.0f;\n    \n    for (int i = 0; i < 64; i++)\n    {\n        maxRang += amp;\n        \n        float v = float(i);\n        vec2 r = hash21(v);\n        vec2 r2 = hash21(v + 0.20);\n        vec2 r3 = hash21(v - 0.20);\n        \n        delta.x += amp * sin((r2.x * uv.x + r2.y * uv.y) * freq + iTime * speed);\n        delta.y += amp * sin((r.x * uv.x + r.y * uv.y) * freq + iTime * speed);\n        delta.z += amp * sin((r3.x * uv.x + r3.y * uv.y) * freq + iTime * speed);\n\n        freq *= 1.1;\n        amp *= 0.9;\n    }\n    \n    delta /= maxRang;\n    delta *= 2.0f;\n\n    // Output to screen\n    fragColor = vec4(delta,1.0);\n}","name":"Image","description":"","type":"image"}]}