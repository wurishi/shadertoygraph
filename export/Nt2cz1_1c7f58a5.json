{"ver":"0.1","info":{"id":"Nt2cz1","date":"1649188512","viewed":54,"name":"whacky_solar_system","username":"lksWllm","description":"it's a whaky solar system...proportions are not on point at all","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["solarsystem","cineshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 planetPos(float _phas, vec2 _fragCoord, float _dist, float _speed) {\n    vec2 dispCenter = vec2(iResolution.x * 0.5, iResolution.y*0.5);\n    vec2 orbAmpl = vec2(iResolution.x * _dist, iResolution.y * _dist);\n    float xCircleCenter = dispCenter.x + orbAmpl.x * cos((_speed * iTime)+_phas);\n    float yCircleCenter = dispCenter.y + orbAmpl.y * sin((_speed * iTime)+_phas);\n    return vec2(xCircleCenter, yCircleCenter);\n}\n\nfloat makeCircle( float _rad, vec2 _pos, vec2 _fragCoord) {\n    float relPosX = abs(_fragCoord.x - _pos.x);\n    float relPosY = abs(_fragCoord.y - _pos.y);\n    float fragDist = sqrt((relPosX * relPosX) + (relPosY * relPosY));\n    return _rad - fragDist;\n}\n\nfloat makeSunRay(vec2 _fragCoord) {\n    float xCircleCenter = iResolution.x * 0.5;\n    float yCircleCenter = iResolution.y * 0.5;\n    float radius = 30.0 + sin(iTime * 2.0) * 2.0;\n    float relPosX = abs(_fragCoord.x - xCircleCenter);\n    float relPosY = abs(_fragCoord.y - yCircleCenter);\n    float fragDist = sqrt((relPosX * relPosX) + (relPosY * relPosY));\n    return radius - fragDist;\n}\n\nfloat calculateRelDistFromCenter(vec2 _fragCoord, vec3 _iResolution) {\n    float xCenter = _iResolution.x * 0.5;\n    float yCenter = _iResolution.y * 0.5;\n    float relPosX = abs(xCenter - _fragCoord.x);\n    float relPosY = abs(yCenter - _fragCoord.y);\n    float dist = sqrt((relPosX * relPosX) + (relPosY * relPosY));\n    return (xCenter - dist) / (xCenter);\n}\n\nfloat sunFactor(vec2 _fragCoord, vec2 _pos, float _dia) {\n    float colorStrength = calculateRelDistFromCenter(_fragCoord, iResolution);\n    float relPosX = abs(_fragCoord.x - iResolution.x / 2.0);\n    float relPosY = abs(_fragCoord.y - iResolution.y / 2.0);\n    float fragDist = sqrt((relPosX * relPosX) + (relPosY * relPosY));\n    \n    float planetRelPosX = abs(_pos.x - iResolution.x / 2.0);\n    float planetRelPosY = abs(_pos.y - iResolution.y / 2.0);\n    float planetDist = sqrt(( planetRelPosX *  planetRelPosX) + ( planetRelPosY *  planetRelPosY));\n    float diff =   planetDist - fragDist;\n    return (diff / _dia * colorStrength * 0.2);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    float colorStrength = calculateRelDistFromCenter(fragCoord, iResolution);\n    float pi = 3.141592653589793;\n    float speedScale = 100.0;\n    float sizeScale = 20.0;\n    float sizeScale2 = 50.0;\n    \n    //background\n    float resultBack = makeCircle(iResolution.x / 2.0, vec2(iResolution.x / 2.0, iResolution.y / 2.0), fragCoord);\n    if (resultBack > 0.0) {\n        fragColor = vec4(0.015 * sqrt(resultBack), 0.015 * sqrt(resultBack), 0.0 * sqrt(resultBack), 0.1 * sqrt(resultBack));\n    }\n    \n    //SunRay\n    float resultSunRay = makeSunRay(fragCoord);\n    if(resultSunRay > 0.0) {\n        fragColor = vec4(sqrt(0.1 * resultSunRay) ,sqrt(0.1 * resultSunRay), 0.0, sqrt(0.2 * resultSunRay));\n    }\n    \n    \n    //Merkur 5000 km , rad 58 mioKm, 88 Tage\n    float diaMerk = 0.05 / 2.0 * sizeScale2;\n    float distMerk = 0.08;\n    float speedMerk = (2.0 * distMerk * pi / 88.0) * speedScale;\n    vec2 posMercury = planetPos(1.0, fragCoord, distMerk, speedMerk);\n    float resultMercury = makeCircle(diaMerk, posMercury, fragCoord);\n    float sunFactorMerc = sunFactor(fragCoord, posMercury, diaMerk);\n    if(resultMercury > 0.0) {\n        fragColor = vec4(sqrt(0.015 * resultMercury * colorStrength + sunFactorMerc),sqrt(0.015 * resultMercury * colorStrength + sunFactorMerc),sqrt(0.02 * resultMercury * colorStrength + sunFactorMerc), sqrt(0.2 * resultMercury));\n    }\n    \n    //Venus 12000 km , 108 mioKm, 225 tag\n    float diaVen = 0.12 / 2.0 * sizeScale2;\n    float distVen = 0.12;\n    float speedVen = (2.0 * distVen * pi / 225.0) * speedScale;\n    vec2 posVenus = planetPos(1.0, fragCoord, distVen, speedVen);\n    float resultVenus = makeCircle(diaVen, posVenus, fragCoord);\n    float sunFactorVenus = sunFactor(fragCoord, posVenus, diaVen);\n    if (resultVenus > 0.0) {\n        fragColor = vec4(sqrt(0.09 * resultVenus * colorStrength+ sunFactorVenus),sqrt(0.04 * resultVenus * colorStrength + sunFactorVenus),sqrt(0.01 * resultVenus * colorStrength + sunFactorVenus),sqrt(0.2 * resultVenus));\n    }\n    \n    //Erde 12700 km, 149,6 mioKm, 365 tage\n    float diaEat = 0.1 / 2.0 * sizeScale2;\n    float distEat = 0.16;\n    float speedEat = (2.0 * distEat * pi / 365.0) * speedScale;\n    vec2 posEarth = planetPos(1.0, fragCoord, distEat, speedEat);\n    float resultEarth = makeCircle(diaEat, posEarth, fragCoord);\n    float sunFactorEarth = sunFactor(fragCoord, posEarth, diaEat);\n    if (resultEarth > 0.0) {\n        fragColor = vec4(sqrt(0.0 * resultEarth * colorStrength + sunFactorEarth),sqrt(0.09 * resultEarth * colorStrength + sunFactorEarth),sqrt(0.1 * resultEarth * colorStrength + sunFactorEarth),sqrt(0.2 * resultEarth));\n    }\n    \n    //Mars 6800 km, 228 miokm, 687 tage\n    float diaMar = 0.068 / 2.0 * sizeScale2;\n    float distMar = 0.22;\n    float speedMar = (2.0 * distMar * pi / 687.0) * speedScale;\n    vec2 posMars = planetPos(1.0, fragCoord, distMar, speedMar);\n    float resultMars = makeCircle(diaMar, posMars, fragCoord);\n    float sunFactorMars = sunFactor(fragCoord, posMars, diaMar);\n    if (resultMars > 0.0) {\n        fragColor = vec4(sqrt(0.1 * resultMars * colorStrength + sunFactorMars),sqrt(0.02 * resultMars * colorStrength + sunFactorMars),sqrt(0.01 * resultMars * colorStrength + sunFactorMars),sqrt(0.2 * resultMars));\n    }\n    \n    //Jupiter 143kkm, 778,5 mioKm, 4329\n    float diaJup = 1.43 / 2.0 * sizeScale;\n    float distJup = 0.3;\n    float speedJup = (2.0 * distJup * pi / 4329.0) * speedScale;\n    vec2 posJupiter = planetPos(1.0, fragCoord, distJup, speedJup);\n    float resultJupiter = makeCircle(diaJup, posJupiter, fragCoord);\n    float sunFactorJup = sunFactor(fragCoord, posJupiter, diaJup);\n    if (resultJupiter>0.0) {\n        fragColor = vec4(sqrt(0.1 * resultJupiter * colorStrength + sunFactorJup),sqrt(0.1 * resultJupiter * colorStrength + sunFactorJup),sqrt(0.06 * resultJupiter * colorStrength + sunFactorJup),sqrt(0.2 * resultJupiter));\n    }\n    \n    //Saturn 120 km, 1433,4 mioKm, 10751\n    float diaSat = 1.2 / 2.0 * sizeScale;\n    float distSat = 0.35;\n    float speedSat = (2.0 * distSat * pi / 10751.0) * speedScale;\n    vec2 posSaturn = planetPos(1.0, fragCoord, distSat, speedSat);\n    float resultSaturn = makeCircle(diaSat, posSaturn, fragCoord);\n    float sunFactorSat = sunFactor(fragCoord, posSaturn, diaSat);\n    if (resultSaturn > 0.0) {\n        fragColor = vec4(sqrt(0.03 * resultSaturn * colorStrength + sunFactorSat),sqrt(0.02 * resultSaturn * colorStrength + sunFactorSat),sqrt(0.09 * resultSaturn * colorStrength + sunFactorSat),sqrt(0.2 * resultSaturn));\n    }\n    \n    //Uranus 51 km, 2872 miokm, 30664\n    float diaUr = 0.51 / 2.0 * sizeScale;\n    float distUr = 0.4;\n    float speedUr = (2.0 * distUr * pi / 30664.0) * speedScale;\n    vec2 posUranus = planetPos(1.0, fragCoord, distUr, speedUr);\n    float resultUranus = makeCircle(diaUr, posUranus, fragCoord);\n    float sunFactorUranus = sunFactor(fragCoord, posUranus, diaUr);\n    if (resultUranus > 0.0) {\n        fragColor = vec4(sqrt(0.0 * resultUranus * colorStrength + sunFactorUranus),sqrt(0.08 * resultUranus * colorStrength + sunFactorUranus),sqrt(0.08 * resultUranus * colorStrength + sunFactorUranus),sqrt(0.2 * resultUranus));\n    }\n    \n    //Neptun 50 km, 4495 mioKm, 60148\n    float diaNep = 0.5 / 2.0 * sizeScale;\n    float distNep = 0.5;\n    float speedNep = (2.0 * distNep * pi / 60148.0) * speedScale;\n    vec2 posNeptun = planetPos(1.0, fragCoord, distNep, speedNep);\n    float resultNeptun = makeCircle(diaNep, posNeptun, fragCoord);\n    float sunFactorNeptun = sunFactor(fragCoord, posNeptun, diaNep);\n    if (resultNeptun > 0.0) {\n        fragColor = vec4(sqrt(0.01 * resultNeptun * colorStrength + sunFactorNeptun),sqrt(0.01 * resultNeptun * colorStrength + sunFactorNeptun),sqrt(0.02 * resultNeptun * colorStrength + sunFactorNeptun),sqrt(0.2 * resultNeptun));\n    }\n    \n    //Sun\n    vec2 posSun = planetPos(0.0, fragCoord, 0.0, 0.0);\n    float resultSun = makeCircle(20.0, posSun, fragCoord);\n    if(resultSun > 0.0) {\n        fragColor = vec4(1.0,1.0,0.0,1.0);\n    }\n}","name":"Image","description":"","type":"image"}]}