{"ver":"0.1","info":{"id":"dl33zf","date":"1682845489","viewed":283,"name":"4kGFX - Tori","username":"Flopine","description":"Made for the combined graphics compo @ Sessions 2023 with Blossom by LunaSorcery: https://github.com/lunasorcery/Blossom\nThe executable can be downloaded here: https://demozoo.org/graphics/323491/","likes":23,"published":1,"flags":32,"usePreview":0,"tags":["raymarching","torus","demoscene","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Code by Flopine\n\n// Thanks to wsmind, leon, XT95, lsdlive, lamogui, \n// Coyhot, Alkama,YX, NuSan, slerpy, wwrighter \n// BigWings, FabriceNeyret and Blackle for teaching me\n\n// Thanks LJ for giving me the spark :3\n\n// Thanks to the Cookie Collective, which build a cozy and safe environment for me \n// and other to sprout :)  \n// https://twitter.com/CookieDemoparty\n\n// Made for the combined graphics compo @ Sessions 2023\n// with Blossom by LunaSorcery: https://github.com/lunasorcery/Blossom\n\n// The executable can be downloaded here: https://demozoo.org/graphics/323491/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec4 tex = texture(iChannel0,fragCoord.xy/iResolution.xy);\n\t\n    vec3 color = tex.rgb/tex.a;\n\tfragColor = vec4(pow(color,vec3(.4545)),1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float PI = acos(-1.);\n\nstruct obj{\n    float d;\n    int mat;\n    vec3 c;\n};\n\nobj minobj (obj a, obj b)\n{\n    if (a.d<b.d) return a;\n    else return b;\n}\n\nvec3 palette (float t, vec3 c)\n{return vec3(.8)+vec3(.5)*cos(2.*PI*(c*t+vec3(.2, .36,.64)));}\n\n// Dave Hoskins noise function\n// https://www.shadertoy.com/view/4djSRW\nvec3 rnd33(vec3 p3)\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n} \n\nmat2 rot (float a)\n{return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nfloat box2d (vec2 p, vec2 c)\n{\n    vec2 q = abs(p)-c;\n    return min(0.,max(q.x,q.y))+length(max(q,0.));\n}\n\n// s = vec4(torus size, torus thickness, angle of rot, mirror spread)\nfloat tore (vec3 p, vec4 s)\n{\n    vec2 q = vec2(length(p)-s.x, p.y);\n    q *= rot(s.z);\n    q = abs(q)-s.w;\n    return box2d(q , vec2(s.y))-0.015;\n}\n\nobj SDF (vec3 p)\n{\n    p.yz *= rot(-atan(1./sqrt(2.)));\n    p.xz *= rot(PI/4.);\n    \n    float a = atan(p.z,p.x);\n    obj t1 = obj (tore(p, vec4(1.,.05, cos(a*3.),.07)), 1, palette(abs(a),vec3(.5)));\n    obj t2 = obj(tore(p,vec4(1.,.03, sin(a)*2., .2)), 2, vec3(.0));\n    \n    obj o = obj(dot(p,normalize(sign(p)))-.15, 1, palette(abs(a),vec3(.5))); \n    \n    return minobj(o, minobj(t1, t2));\n}\n\nvec3 gn (vec3 p)\n{\n    vec2 eps = vec2(0.0001, 0.);\n    return normalize(SDF(p).d-vec3(SDF(p-eps.xyy).d,SDF(p-eps.yxy).d,SDF(p-eps.yyx).d));\n}\n\nfloat AO (vec3 p, vec3 n, float e)\n{return clamp(SDF(p+e*n).d/e,0.,1.);}\n\nobj raymarch (vec3 rd, inout vec3 p, float side, inout bool hit)\n{\n    obj O; float t = 0.;\n    for(float i=0.; i<100.; i++)\n    {\n        O = SDF(p);        \n        if(abs(O.d)<0.01) hit=true;\n        p += O.d*rd*.8*side; \n    } \n    return O; \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy)/iResolution.y;\n    vec2 uu = fragCoord.xy/iResolution.xy;\n    \n    uv += (rnd33(vec3(uv*1000.,iFrame*500))-.5).xy/iResolution.y;\n\n    vec3 ro = vec3(uv, -30.), rd=normalize(vec3(0.,0.,1.)), \n    p = ro, col=vec3(0.95,0.9,0.89), l=normalize(vec3(.5,.2, -3.));\n    \n    bool hit = false;\n    obj scene = raymarch(rd, p, 1., hit);   \n\n    if (hit)\n    {\n        vec3 n = gn(p);\n        float ao = AO(p,n,.02)+AO(p,n,.1)+AO(p,n,.15);\n        float spec = pow(max(dot(n,normalize(l-rd)),0.), 50.);\n        if (scene.mat == 1)\n        {\n            col = scene.c;\n        }    \n        if (scene.mat == 2)\n        {\n            vec3 newrd = normalize(reflect(rd, normalize(n+(rnd33(vec3(uv*1000.,iFrame*500))-.5)*.1 )));\n            vec3 newp = p+n*0.05;\n            scene = raymarch(newrd, newp, -1., hit);\n            float fresnel = pow(clamp(1.-dot(-rd,n),0.,1.), 5.);\n            col = mix(scene.c,vec3(1.), fresnel);\n        }    \n        col *= ao/3.;\n        col += spec*vec3(.5, .8, .99);\n    }\n   \n    fragColor = vec4(col,1.0);\n    if(iFrame>0)\n    {\n        fragColor += vec4(texture(iChannel0, uu).rgb, iFrame);\n    }\n}","name":"Buffer A","description":"","type":"buffer"}]}