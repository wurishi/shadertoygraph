{"ver":"0.1","info":{"id":"mslGRN","date":"1665775091","viewed":64,"name":"Trippy spheres","username":"Apaksi","description":"Meant to try ray marching but got sidetracked.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sphere","trippy","mirroring"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sphere(vec3 coord, vec3 center)\n{\n    float u_time = iTime;\n    float f = 6.952;\n    float f2 = 0.452;\n    float a = 1.5 * pow(sin(u_time * 0.3), 3.0);\n    coord.x += a * sin(coord.x * f + 0.0);\n    coord.y += a * cos(coord.y * f + f2);\n    coord.z += a * sin(coord.z * f + f2*2.0);\n    coord -= center;\n    float radius = 1.5;\n    return sqrt(dot(coord, coord)) - radius;\n}\n\nfloat sdf(vec3 coord) {\n    float u_time = iTime;\n    float d;\n    float o = 0.000;\n    float f = 0.376;\n    d = min(\n        sphere(coord, vec3(o + f*cos(u_time), o + f*sin(u_time), 0.0)),\n        sphere(coord, vec3(o + f*cos(u_time * 1.1), o + f*sin(u_time * 1.1), 0.0))\n    );\n    return d;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    vec2 st = fragCoord/iResolution.xy;\n    float x = st.x, y = st.y, time = iTime;\n    x -= 0.5;\n    y -= 0.5;\n    x *= (iResolution.x/iResolution.y + 1.0) / 2.0;\n\n    vec3 color = vec3(0.);\n\n    vec3 pos = vec3(0.0, 0.0, 5.0);\n    vec3 ray_dir = normalize(vec3(x, y, -1.0));\n    \n    float dist = 1000000.0;\n    float dist_prev = dist;\n    vec3 pos_prev = pos;\n    \n    for (int i=0; i<15; i++) {\n        dist = sdf(pos);\n        if (dist < 0.0) {\n            dist = 0.0;\n        }\n        pos += ray_dir * dist;\n        \n        if (dist < 0.00001) {\n            float e = 0.01;\n            float dist0 = sdf(pos + vec3(e, 0.0, 0.0));\n            float dist1 = sdf(pos + vec3(0.0, e, 0.0));\n            float dist2 = sdf(pos + vec3(0.0, 0.0, e));\n            vec3 N = normalize((vec3(dist0, dist1, dist2) - vec3(dist)));\n            vec3 L = normalize(vec3(1.0, 1.0, 1.0));\n            float diffuse = sin(dot(N, L) * 23.0);\n            color = vec3(diffuse);\n            color.r = sin(float(i) + 2.3);\n            color.g = sin(N.x * 4.0 + 3.0);\n            color.b = sin(float(i) * 1.1 + 4.3);\n            break;\n        }\n        \n        pos_prev = pos;\n    }\n    \n\n    fragColor = vec4(color,1.0);\n}\n\n","name":"Image","description":"","type":"image"}]}