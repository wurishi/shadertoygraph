{"ver":"0.1","info":{"id":"3tccWs","date":"1610389794","viewed":170,"name":"Lorenz system 3D","username":"arifr123","description":"Lorenz Attractor 3D simulation. \nUse the mouse to rotate,\nOR click D to enable eraser.","likes":7,"published":1,"flags":48,"usePreview":0,"tags":["attractor","lorenz"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define sq(v) dot(v, v)\n\nconst int searchSize = 3;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    \n    \n    vec3 col = vec3(0);\n    \n    \n    bool breakLoop = true;\n    for(int x = max(coord.x - searchSize, 0); x <= min(coord.x + searchSize, int(iResolution.x) - 1) && breakLoop; x++)\n    {\n        for(int y = max(coord.y - searchSize, 0); y <= min(coord.y + searchSize, int(iResolution.y) - 1) && breakLoop; y++)\n        {\n            ivec2 otherCoord = ivec2(x, y);\n            vec4 p = texelFetch(iChannel0, otherCoord, 0);\n            \n            int pW = int(round(p.w));\n            if(pW != 0)\n            {\n                vec3 pCol = 0.05 * p.xyz + vec3(0.7, 0, -0.7);\n                col += vec3(exp(-sq(fragCoord - vec2(otherCoord)) / sq(2.))) * pCol;\n                //if(sq(fragCoord - vec2(otherCoord)) <= sq(2.)) col += pCol;\n                \n                if(pW == 1)\n                {\n                    col = vec3(1., 0., 0.);\n                    breakLoop = false;\n                }\n            }\n        }\n    }\n    \n    \n    \n    vec4 p = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    fragColor = vec4(col, 0.0);\n}\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define sq(v) dot(v, v)\n\n//#define toP2(p) (vec2(dot(p, right), dot(p, up)) * 7. + iResolution.xy / 2.)\n//#define toP2i(p) ivec2(round(vec2(dot(p, right), dot(p, up)) * 7. + iResolution.xy / 2.))\n#define toP2i(p) ivec2(round(toP2(p, right, up)))\n\n#define cis(a) vec2(cos(a), sin(a))\n\nconst float sigma = 10.;\nconst float rho = 28.;\nconst float beta = 8. / 3.;\nvec3 lorenz(vec3 p)\n{\n    return vec3(sigma*(p.y - p.x), p.x*(rho - p.z) - p.y, p.x*p.y - beta*p.z);\n}\n\nconst float h = 0.02;\nvec3 rungeKutta(vec3 p, float h)\n{\n    vec3 k1 = lorenz(p);\n    vec3 k2 = lorenz(p + 0.5*h*k1);\n    vec3 k3 = lorenz(p + 0.5*h*k2);\n    vec3 k4 = lorenz(p + h*k3);\n    \n    return p + h * (k1 + 2.*k2 + 2.*k3 + k4) / 6.;\n}\n\nvec2 toP2(vec3 p, vec3 right, vec3 up) \n{\n    p -= vec3(0, 0, 30);\n    //return vec2(dot(p, right), dot(p, up)) * 7. + iResolution.xy / 2.;\n    return vec2(dot(p, right), dot(p, up)) * 0.016 * iResolution.y + iResolution.xy / 2.;\n}\n\nconst int searchSize = 3;\nivec2 radialClamp(ivec2 p2, int searchSize)\n{\n    vec2 dif = vec2(p2);\n    float r = length(dif);\n    return ivec2(round(clamp(r, 0., float(searchSize)) * dif / r));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 coord = ivec2(fragCoord);\n    vec4 p = texelFetch(iChannel0, coord, 0);\n    \n    bool mouseMode = texelFetch(iChannel1, ivec2(68 /* d */, 2), 0).x > 0.;  // ture: eraser, false: rotate\n    \n    if(mouseMode)\n    {\n        if(sq(fragCoord - iMouse.xy) < sq(60.))\n        {\n            p.w = 0.;\n            fragColor = p;\n            return;\n        }\n    }\n    \n    if(coord == ivec2(0))  // position 0,0 stores the rotation data\n    {\n        if(iFrame == 0) p = vec4(0);\n        else if(!mouseMode)\n        {\n            vec2 mouseOffset = iMouse.xy - abs(iMouse.zw);\n            \n            if(iMouse.w > 0.0)\n            {\n                p.zw += p.xy;\n            }\n            else if(iMouse.z > 0.0)\n            {\n                p.xy = mouseOffset;\n            }\n        }\n        \n    \n        fragColor = p;\n        \n        return;\n    }\n    \n    vec4 rotationData = texelFetch(iChannel0, ivec2(0), 0);\n    vec2 rotation = rotationData.xy + rotationData.zw;\n    rotation /= iResolution.xy;\n    rotation *= 0.5 * 3.14;\n    \n    rotation.x += 0.35 * iTime;\n    \n    vec2 cisXY = cis(rotation.x);\n    vec2 cisRZ = cis(rotation.y);\n        \n    vec3 right = vec3(-cisXY.y, cisXY.x, 0);\n    vec3 up = vec3(-cisRZ.y * cisXY, cisRZ.x);\n    \n    right = right.xzy;\n    up = up.xzy;\n    \n    if(iFrame == 0)\n    {\n        vec3 initial = vec3(5);\n        if(coord == toP2i(initial))\n        {\n            p = vec4(initial, 1);\n        }\n        else\n        {\n            p.w = 0.;\n        }\n    }\n    else\n    {\n        int pW = int(round(p.w));  \n        // w is the mode of the particle: 0: disabled, 1: moving (red square), 2: stationary (colorfull dots)\n        // Mode 1 is equivelent to mode 2 but with higher priority.\n        if(pW == 1 || pW == 2)\n        {\n            if(toP2i(p.xyz) == coord)\n            {\n                p.w = 2.;  // stationary\n            }\n            else\n            {\n                {\n                    p.w = 0.;  // disabled  // vec4(0)\n                }\n            }\n        }\n\n        bool breakLoop = true;\n        for(int x = max(coord.x - searchSize, 0); x <= min(coord.x + searchSize, int(iResolution.x) - 1) && breakLoop; x++)\n        {\n            for(int y = max(coord.y - searchSize, 0); y <= min(coord.y + searchSize, int(iResolution.y) - 1) && breakLoop; y++)\n            {\n                ivec2 otherCoord = ivec2(x, y);\n                \n                if(int(length(vec2(otherCoord - coord))) > searchSize) continue;\n\n                vec4 otherP = texelFetch(iChannel0, otherCoord, 0);\n\n                int otherW = int(round(otherP.w));\n\n                if(otherW == 1 || otherW == 2)\n                {\n                    ivec2 otherP2 = toP2i(otherP.xyz);\n                    //ivec2 clipedOtherP2 = clamp(otherP2, otherCoord - searchSize, otherCoord + searchSize);\n                    ivec2 clipedOtherP2 = otherCoord + radialClamp(otherP2 - otherCoord, searchSize);\n\n                    if(otherCoord == otherP2)  // otherW == 1 && \n                    {\n                        otherP.xyz = rungeKutta(otherP.xyz, h);\n\n                        ivec2 otherP2 = toP2i(otherP.xyz);\n                        //ivec2 clipedOtherP2 = clamp(otherP2, otherCoord - searchSize, otherCoord + searchSize);\n                        ivec2 clipedOtherP2 = otherCoord + radialClamp(otherP2 - otherCoord, searchSize);\n\n                        if(clipedOtherP2 == coord)\n                        {\n                            p = otherP;\n                            if(otherW == 1) breakLoop = false;\n                        }\n                    }\n                    else if(clipedOtherP2 == coord)\n                    {\n                        p = otherP;\n                        if(otherW == 1) breakLoop = false;\n                    }\n                }\n            }\n        }\n    }\n    \n    fragColor = p;\n}\n\n","name":"Buffer A","description":"","type":"buffer"}]}