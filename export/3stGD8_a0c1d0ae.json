{"ver":"0.1","info":{"id":"3stGD8","date":"1568377039","viewed":244,"name":"Snake low poly texture","username":"gabwoot","description":"just a small experiment","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["triangle","texture","lowpoly","snale"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define PI\t\t\t\t3.141592653589793\n#define TWO_PI\t\t\t6.283185307179586\n\nvec2 coord(in vec2 p) {\n  p = p / iResolution.xy;\n  // correct aspect ratio\n  if (iResolution.x > iResolution.y) {\n    p.x *= iResolution.x / iResolution.y;\n    p.x += (iResolution.y - iResolution.x) / iResolution.y / 2.0;\n  } else {\n    p.y *= iResolution.y / iResolution.x;\n    p.y += (iResolution.x - iResolution.y) / iResolution.x / 2.0;\n  }\n  // centering\n  p -= 0.5;\n  p *= vec2(-1.0, 1.0);\n  return p;\n}\n\n\nmat2 rotation2d(float angle) {\n    return mat2(\n        cos(angle), -sin(angle),\n        sin(angle), cos(angle)\n    );\n}\n\nfloat random (in vec2 st) {\n    return fract(\n        sin(\n            dot(st.xy, vec2(12.9898,78.233))\n        ) * 43758.5453123\n    );\n}\n\nfloat between(float minV, float maxV, float v) {\n    return minV + v * (maxV - minV);\n}\n\nfloat tiles = 3.;\nconst vec2 vel = vec2(1., 0.);\nconst vec4 skfbBlue = vec4(20, 170, 217, 255);\nconst vec4 orange = vec4(200, 54, 96, 255);\nconst vec4 purple = vec4(58, 31, 93, 255);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec4 color1 = orange / vec4(255);\n    vec4 color2 = purple / vec4(255);\n  \n    vec2 uv = coord(fragCoord.xy);\n    float time = fract(iTime);\n\n      vec2 wave = uv;\n      wave.x += sin(uv.y * 5. + iTime) * 0.1;\n      wave.y += cos(uv.x * 5. + iTime) * 0.1;\n      uv += wave;\n\n    uv *= rotation2d(PI / 3.2 * iTime);\n    uv *= vec2(between(0.7, 1.5, (1. + sin(iTime)) / 2.));\n    uv += vec2(between(5., 10., iTime / 1.4));\n\n    vec2 index = floor(tiles * uv) / tiles;\n    float t = floor(random(index) * 4.) / 4.;\n\n    uv = 2.0 * fract(tiles * uv) - 1.0;\n    uv *= rotation2d(t * PI * 2.);\n\n    float c = step(uv.x, uv.y) * 0.9;\n    c = abs(sin(5. + fract((random(index + c) + 0.1))));\n\n    vec4 color = random(vec2(c)) > 0.5 ? color1 : color2;\n\n    fragColor = vec4((c * .5 + 0.5) * color.xyz, 1.0);\n}","name":"Image","description":"","type":"image"}]}