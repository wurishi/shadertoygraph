{"ver":"0.1","info":{"id":"mdcBDl","date":"1697755092","viewed":447,"name":"Cloud perturbations","username":"felipetovarhenao","description":"Cloud-like procedural graphics using fractal gaussian motion","likes":21,"published":1,"flags":0,"usePreview":0,"tags":["noise","fbm","fractals"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nAuthor: Felipe Tovar-Henao [www.felipe-tovar-henao.com]\nTitle: Cloud perturbations\n*/\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n#define SEED 1.\n#define FBM_ITER 5\n\nfloat random1D(in vec2 uv,in int seed){\n    return fract(sin(dot(uv.xy,vec2(12.9898,78.233))+float(seed))*43758.5453123);\n}\n\nfloat valueNoise(in vec2 uv,in int seed){\n    vec2 x=floor(uv);\n    vec2 m=fract(uv);\n    \n    float bl=random1D(x,seed);\n    float br=random1D(x+vec2(1.,0.),seed);\n    float tl=random1D(x+vec2(0.,1.),seed);\n    float tr=random1D(x+vec2(1.,1.),seed);\n    \n    vec2 cf=smoothstep(vec2(0.),vec2(1.),m);\n    \n    float tm=mix(tl,tr,cf.x);\n    float bm=mix(bl,br,cf.x);\n    \n    return mix(bm,tm,cf.y);\n}\n\nfloat fbm(in vec2 st,in int seed){\n    float v=0.;\n    float a=.5;\n    float f=0.;\n    for(int i=0;i<FBM_ITER;i++){\n        v+=a*valueNoise(st,seed);\n        st*=2.;\n        a*=.5;\n    }\n    return v;\n}\n\nfloat cosine(in float x,in float s){\n    float y=cos(fract(x)*PI);\n    return floor(x)+.5-(.5*pow(abs(y),1./s)*sign(y));\n}\n\nvec2 cosine(in vec2 p,in float s){\n    return vec2(cosine(p.x,s),cosine(p.y,s));\n}\n\nvec3 cosine(in vec3 p,in float s){\n    return vec3(cosine(p.xy,s),cosine(p.z,s));\n}\n\nvec4 cosine(in vec4 p,in float s){\n    return vec4(cosine(p.xy,s),cosine(p.zw,s));\n}\n\nmat2 rot2(in float a){\n    float c=cos(a);\n    float s=sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat fold(in float x){\n    return abs(mod(x+1.,2.)-1.);\n}\n\nvec2 fold(in vec2 p){\n    return vec2(fold(p.x),fold(p.y));\n}\n\nvec3 fold(in vec3 p){\n    return vec3(fold(p.xy),fold(p.z));\n}\n\nvec4 fold(in vec4 p){\n    return vec4(fold(p.xy),fold(p.zw));\n}\n\nfloat scale(in float x,in float a,in float b,in float c,in float d){\n    return(x-a)/(b-a)*(d-c)+c;\n}\n\nvec2 scale(in vec2 p,in float a,in float b,in float c,in float d){\n    return vec2(scale(p.x,a,b,c,d),scale(p.y,a,b,c,d));\n}\n\nvec3 scale(in vec3 p,in float a,in float b,in float c,in float d){\n    return vec3(scale(p.xy,a,b,c,d),scale(p.z,a,b,c,d));\n}\n\nvec4 scale(in vec4 p,in float a,in float b,in float c,in float d){\n    return vec4(scale(p.xy,a,b,c,d),scale(p.zw,a,b,c,d));\n}\n\nvec3 gradient(in float t,in vec3 a,in vec3 b,in vec3 c,in vec3 d){\n    return a+b*cos(TWO_PI*(c*t+d));\n}\n\nvec2 adjustViewport(in vec2 uv,in vec2 r){\n    return(uv*2.-r)/(r.x<r.y?r.x:r.y);\n}\n\nvoid mainImage(out vec4 fragColor,in vec2 fragCoord){\n    vec2 uv=adjustViewport(fragCoord.xy,iResolution.xy);\n    float t=iTime*.125+SEED;\n    float mag=length(uv);\n    vec3 c1=vec3(.2);\n    vec3 c2=vec3(.4);\n    vec3 c3=vec3(1.);\n    vec3 c4=vec3(.6,.7,.8)*scale(sin(t),-1.,1.,.2,.3);\n    \n    float d=0.;\n    vec3 col=vec3(0.);\n    int ti=int(floor(t));\n    for(float i=0.;i<3.;i+=1.){\n        uv*=2.;\n        float da=fbm(uv*d,ti);\n        float db=fbm(uv*d,ti+1);\n        float w=pow(fract(t),.25);\n        d=mix(da,db,w);\n        col+=gradient(d*2.-t*.5+mag*i,c1,c2,c3,c4)*d;\n    }\n    col=cosine(col,1.25+sin(5.*t+mag+d)*.25);\n    \n    fragColor=vec4(col,1.);\n}","name":"Image","description":"","type":"image"}]}