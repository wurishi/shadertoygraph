{"ver":"0.1","info":{"id":"wtlSzS","date":"1563429105","viewed":314,"name":"Color Pallet Gallery","username":"ankd","description":"fbm color pallets","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["2d","fbm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\tColor Pallet Gallery\n\tauthor - ankd\n\tdate - 2019/07/18\n*/\n\n// params\n// MODE : 0,1,2\n#define MODE 1\n#define SLIDE_SPAN 8.0\n#define ITR 8\n#define SCALE 1.2\n#define COLOR_SMOOTH_MIN 0.1\n#define COLOR_SMOOTH_MAX 0.4\n\nconst float PI = acos(-1.);\n\nvec3 hsv(in float h, in float s, in float v) { return ((clamp(abs(fract(h+vec3(0., 2., 1.)/3.0)*6.-3.)-1., 0., 1.)-1.)*s+1.)*v; }\n\nfloat easeIn(in float t) { return pow(t, 8.); }\nfloat easeOut(in float t) { return 1.0-easeIn(1.0-t); }\nfloat easeInOut(in float t) { return t<0.5 ? 0.5*easeIn(t*2.0) : 0.5+0.5*easeOut(t*2.0-1.0); }\n\nmat2 rotate(in float r) { float c=cos(r), s=sin(r); return mat2(c, -s, s, c); }\nvec2 rotate(in vec2 p, in float r) { return rotate(r) * p; }\nvec3 rotate(in vec3 p, in vec3 r) {\n  vec3 q = p;\n  q.xy = rotate(q.xy, r.z);\n  q.yz = rotate(q.yz, r.x);\n  q.zx = rotate(q.zx, r.y);\n  return q;\n}\n\nfloat hash(in float x) { return fract(sin(x) * 43237.5324); }\nfloat hash(in vec2 x) { return fract(sin(dot(x, vec2(12.9898, 78.233)))*43237.5324); }\nvec3 hash3(in float x) { return vec3(hash(x), hash(x+100.), hash(10000.)); }\nfloat noise(in vec2 p) {\n  vec2 f = fract(p);\n  vec2 i = floor(p);\n  vec2 u = f*f*(3.-2.*f);\n  return mix(\n      mix(hash(i+vec2(0., 0.)), hash(i+vec2(1., 0.)), u.x),\n      mix(hash(i+vec2(0., 1.)), hash(i+vec2(1., 1.)), u.x),\n      u.y\n    );\n}\nfloat noise(in vec3 p) {\n  vec3 f = fract(p);\n  vec3 i = floor(p);\n  vec3 u = f*f*(3.-2.*f);\n  float n = i.x + i.y*53.0 + i.z*117.0;\n  return mix(\n      mix(mix(hash(n+0.), hash(n+1.), u.x), mix(hash(n+53.0), hash(n+54.0), u.x), u.y),\n      mix(mix(hash(n+117.), hash(n+118.), u.x), mix(hash(n+170.0), hash(n+171.0), u.x), u.y),\n      u.z\n    );\n}\nfloat fbm(in vec3 p) {\n  float res = 0.;\n  res += 0.5000*noise(p); p = rotate(p*2.02, vec3(PI*0.125));\n  res += 0.2500*noise(p); p = rotate(p*2.03, vec3(PI*0.125));\n  res += 0.1250*noise(p); p = rotate(p*2.01, vec3(PI*0.125));\n  res += 0.0625*noise(p);\n  return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 p = (fragCoord.xy*2.0-iResolution.xy) / min(iResolution.x, iResolution.y);\n    \n    float t = iTime*(1./SLIDE_SPAN);\n    uv.x += floor(t) + easeInOut(fract(t));\n    vec2 fuv = fract(uv)*2.0-1.0;\n    vec2 iuv = floor(uv);\n\n    // render\n    vec3 col = vec3(1.);\n    vec3 v = vec3(fuv + iuv, 0.);\n    for(int i=0;i<ITR;i++) {\n        float fi = float(i);\n        float f = fbm(v);\n        vec2 vxy = MODE==0 ? v.xy*SCALE : (MODE==1 ? v.xy*SCALE+f : v.xy*SCALE*f);\n    \tv = vec3(vxy, fi+f+iTime*0.1);\n        vec3 c = hsv(iuv.x*0.3+f+0.02*fi, 1.0-f*hash(iuv), 1.);\n        col = mix(c, col, smoothstep(COLOR_SMOOTH_MIN, COLOR_SMOOTH_MAX, f));\n    }\n\n    col = pow(col, vec3(0.4545));\n    \n    // frame\n    uv = abs(fuv*vec2(iResolution.x/iResolution.y, 1.));\n    float r=0.9, w=0.01;\n    vec3 frameCol = vec3(0.98);\n    col = mix(frameCol, col, smoothstep(r, r-w, length(uv)));\n    col = mix(frameCol, col, smoothstep(r, r-w, max(uv.x, uv.y)));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}