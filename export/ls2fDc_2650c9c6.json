{"ver":"0.1","info":{"id":"ls2fDc","date":"1502612279","viewed":299,"name":"Spiral Circles","username":"Vovosunt","description":"Seen something similar on pinterest, decided to try it out myself.\nHex is my own buggy implementation, didn't want to steal iq's implementation without fully understanding it.","likes":18,"published":1,"flags":0,"usePreview":0,"tags":["2d","spiral","circle"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define c30 0.86602540378\n#define hm  1.33333333333\n#define grid 15.0\n#define smooth 0.00002 * iResolution.y\n#define timeScale 0.2\n\n\nvec2 hex(vec2 v){\n\tfloat yc = abs(mod(v.x + floor((v.y*hm + 0.5))*(c30 / 2.0),c30) / c30 - 0.5);\n\tfloat y = floor(v.y*hm + yc);\n\tfloat x = floor(v.x/c30 + 0.5 + fract(y / 2.0))- fract(y / 2.0);\n\treturn vec2(x*c30,y /hm + 1.0/(hm * 4.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy  / vec2(iResolution.y,iResolution.y);\n    \n    float rt = iTime * timeScale;\n    vec2 gv = hex(uv*grid)/grid;\n    vec2 mv = gv - 0.5;\n    vec2 rv = vec2(((atan(mv.x,mv.y)/3.141526) + 1.0) / 2.0, length(mv));\n    float fv = fract((rv.x- rt) * 2.0 + rv.y * 2.0);\n    \n    float dist = length(uv - gv) * grid;\n    float dist2 = 1.0 - smoothstep(-smooth,0.0,dist - c30/2.);\n    dist += fv;\n    dist = smoothstep(0.5,0.5 + smooth,fract(dist));\n    float finCol = float(0.5);\n    finCol = mix(finCol, dist, dist2);\n\tfragColor = vec4(finCol);\n}\n","name":"Image","description":"","type":"image"}]}