{"ver":"0.1","info":{"id":"dsdfWM","date":"1697431749","viewed":59,"name":"Bounce Warp","username":"iznax","description":"TODO: bouncing ball position should affect the warping of the grid","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["grid","bounce"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const float SC = 200., \n    \t\tQ = 0.1,\n\t\t\tA = 3.;\n\nvec3 grid(vec2 uv, vec2 pos)\n{\n\tfloat v = max(sin(pos.x*2.), cos(pos.y*2.));\n\tfloat shade = 0.3*(2.+sin(Q*uv.x))\n\t\t\t\t\t*(2.+sin(Q*uv.y));\n\treturn vec3(0., v*(shade-1.)*0.125, v*shade);\n}\n\nvec2 warp(vec2 pos)\n{\n\tfloat TSC = 0.3 * iTime;\n\tvec2 T = vec2(-50.*TSC, 20.*sin(TSC));\n\tvec2 uwave = vec2(sin(Q*pos.y), sin(Q*pos.x));\n\treturn pos + A*uwave + T;\n}\n\nvec2 Track(float t)\n{\n    return vec2(abs(sin(t*.2327)),abs(cos(t)*0.55));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat mx = max(iResolution.x, iResolution.y);\n    vec2 uv = fragCoord.xy / mx;\n    \n    vec3 rgb = grid(SC*uv, warp(SC*uv));\n \n    vec2 p1 = vec2(abs(sin(iTime*.2327)),abs(cos(iTime)*0.55));\n \n    const float Radius = 0.03;\n\n    bool hit = false;\n    for (int i=3; --i >= 0;)\n    {\n        float R = Radius / float(i+1);\n        float tail = float(i) * ((i < 2) ? 0.055 : 0.04);\n        vec2 p = Track(iTime-tail);\n        float r = length(uv - p);\n        if (r < R)\n        {\n            vec3 norm = vec3(uv - p, R-r)/R;\n            float a = sqrt(norm.z);\n            rgb = vec3(a,a,a);\n            hit = true;\n        }\n    }\n \n    if (!hit)\n    {\n        vec2 d = uv - p1;\n        float range = 0.15;\n        float r = length(d) / range;\n        if (r < 1.)\n        {\n            vec2 a = abs(d);\n            vec2 toward = vec2(d.x > 0. ? a.x:-a.x, d.y > 0. ? a.y:-a.y);\n            float t = 1. - sqrt(r);\n            uv -= toward * t;\n        }\n        float grid = 192.;\n        float x = sin(uv.x*grid+iTime*5.);\n        float y = sin(uv.y*grid+iTime*5.);\n        bool line = max(x,y) > 0.95;\n        rgb = vec3(0., 0., line ? .9 : 0.);\n    }\n\n    \n    fragColor = vec4(rgb, 1.0);\n}","name":"Image","description":"","type":"image"}]}