{"ver":"0.1","info":{"id":"ltscDB","date":"1506333791","viewed":219,"name":"Scanlines - sharp","username":"bitblitter","description":"Simple scanlines, resolution independent.","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["filter"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGRr","filepath":"/media/a/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","previewfilepath":"/media/ap/35c87bcb8d7af24c54d41122dadb619dd920646a0bd0e477e7bdc6d12876df17.webm","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float scanLine(float y, float lineCount, float blend)\n{\n    return round(mod(y, 1.0 / lineCount)*lineCount) * blend;\n}\n\n\n/** \n * HSV <-> RGB functions\n * FROM : http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\n */\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat newChroma(vec4 front, vec4 key, float threshold)\n{   \n    vec3 frontHSV = rgb2hsv(front.xyz);\n    vec3 keyHSV = rgb2hsv(key.xyz);\n    \n    float dist = distance(keyHSV.xz, frontHSV.xz);\n    float alpha = 1.0 - smoothstep(0.0 , threshold, dist);\n    return alpha;\n}\n\n\nfloat chroma(vec4 front, vec4 key) \n{\n    float threshold = 0.4;\n    float dist = distance(front, key);\n    return 1.0 - smoothstep(0.0, 1.0, dist < threshold ? dist : dist * 2.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec4 v1 = texture(iChannel0, uv);\n    vec4 v2 = texture(iChannel1, uv);\n    vec4 scanColor = vec4(0.0, 0.0, 0.0, 1.0);\n    float lineHeight = 1.0;\n    float scanCount = iResolution.y / (lineHeight * 2.0);\n    float scanBlend = 0.9;\n    \n    vec4 keyColor = texture(iChannel0, vec2(0.99, 0.01));\n  \n    vec4 currentColor = mix(vec4(rgb2hsv(v1.xyz).zzz, 1.0), v2, newChroma(v1, keyColor, 0.3));\n    currentColor = mix(currentColor, scanColor, scanLine(uv.y, scanCount, scanBlend));\n    \n    fragColor = currentColor;\n}","name":"Image","description":"","type":"image"}]}