{"ver":"0.1","info":{"id":"dlBczc","date":"1692143546","viewed":31,"name":"Vector Based 3D Rotate","username":"Leslie","description":"Use vector's x, y, z components to rotate it to be parallel to one of three axes.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["3d","rotate"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nDraw a Rect and put it's left-bottom corner at the origin of coordinate, \nthen draw a line `op` from left-bottom(origin) to top-right, \nlet radians between `op` and `axis-x` be `a`, vector `uv` be `normalize(op)`,\n`cos(a)` will be `x` component of vector `uv`, `sin(a)` will be `y` component of vector `uv`.\n\nSimilarly, draw a cuboid will help you understand this in 3d.\n*/\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 v = vec3(1., 1., 1.);\n    \n    v = normalize(v);\n    vec2 r1 = normalize(v.xy);\n    \n    float hypotenuse = length(v);\n    float cosine = v.z;\n    float sine = length(v.xy);\n\n    float cs = cosine/hypotenuse;\n    float sn = sine/hypotenuse;\n    vec2 r2 = vec2(cs, sn);\n\n    // first rotate, make `v` parallel to `plane-yz`\n    mat3 m1 = mat3(\n    r1.y, r1.x, 0.,\n    -r1.x, r1.y, 0.,\n    0., 0., 1.\n    );\n    \n    // second rotate, make `v` parallel to `axis-z`\n    mat3 m2 = mat3(\n    1., 0., 0.,\n    0., r2.x, r2.y,\n    0., -r2.y, r2.x\n    );\n    \n    \n\n    vec3 v1 = m2*m1*v;\n\n    // Because of unaccuracy of `length()` and `normalize`, there will be some tiny error value in the result.\n    float c = float(abs(v1.x)<=0.00000000001 && abs(v1.y)<=0.00000000001);\n    fragColor = vec4(vec3(c), 1.);\n}\n","name":"Image","description":"","type":"image"}]}