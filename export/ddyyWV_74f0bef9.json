{"ver":"0.1","info":{"id":"ddyyWV","date":"1696607359","viewed":56,"name":" CCI Postgraduate Showcase 2020","username":"quickselect","description":"I have combined these shaders to create it:\nhttps://www.shadertoy.com/view/WtV3D3\nhttps://www.shadertoy.com/view/3tsSzl\nhttps://www.shadertoy.com/view/MscGD2","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["ripple"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"Xdf3zn","filepath":"/media/a/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","previewfilepath":"/media/ap/85a6d68622b36995ccb98a89bbb119edf167c914660e4450d313de049320005c.png","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"\n\n// activate dither\n#define DITHER\n\n// How many colors do you want on the final image ? (per channel)\n#define COLORDEPTH 0.8\n\n#define GREYSCALEINPUT\n#define GREYSCALEOUTPUT\n\n// Scale of the pixels\n#define RESOLUTIONFACTOR 3.0\n\n// use a true triangle function (different kind of noise) \n#define TRUETRIANGLE\n\n// using a triangular function based noise give smoother noise repartition\n// (this is not really a triangle function, it produces a bit more noise)\n// i added the true triangle function as an option (read the pdf to understand)\nfloat remap_noise_tri_erp( const float v )\n{\n    #if ( defined TRUETRIANGLE )\n    return abs(fract(v+0.5)-0.5)+.25;\n\t#endif\n    float r2 = 0.5 * v;\n    float f1 = sqrt( r2 );\n    float f2 = 1.0 - sqrt( r2 - 0.25 );    \n    return (v < 0.5) ? f1 : f2;\n}\n\n\nvec3 ValveScreenSpaceDither(vec2 vScreenPos, float colorDepth)\n{\n    // creating the dither pattern\n    vec3 vDither = vec3( dot( vec2( 171.0, 231.0 ), vScreenPos.xy ) );\n    // shifting r,g & b channels different angles to break the repetition and smooth even more\n\tvDither.rgb = fract( vDither.rgb / vec3( 103.0, 71.0, 97.0 ) );\n    \n    //note: apply triangular pdf\n    vDither.r = remap_noise_tri_erp(vDither.r)*2.0-1.0;\n    vDither.g = remap_noise_tri_erp(vDither.g)*2.0-1.0;\n    vDither.b = remap_noise_tri_erp(vDither.b)*2.0-1.0;\n    \n    return vDither.rgb / colorDepth;\n}\n\nvec3 TextureDither(vec2 vScreenPos, float colorDepth)\n{\n    // creating the dither pattern\n    float x = mod(vScreenPos.x/iChannelResolution[2].x, float(iChannelResolution[0]));\n    float y = mod(vScreenPos.y/iChannelResolution[2].y, float(iChannelResolution[0]));\n    vec3 vDither = texture(iChannel2, vec2(x,y)/RESOLUTIONFACTOR).rrr;\n    \n    //vec3 finalColor = texture(iChannel0, fragCoord.xy/iResolution.xy).rgb// shifting r,g & b channels different angles to break the repetition and smooth even more\n\t//vDither.rgb = fract( vDither.rgb / vec3(103.0, 71.0, 97.0) );\n    \n    //note: apply triangular pdf\n    //vDither.r = remap_noise_tri_erp(vDither.r)*2.0-0.5;\n    //vDither.g = remap_noise_tri_erp(vDither.g)*2.0-0.5;\n    //vDither.b = remap_noise_tri_erp(vDither.b)*2.0-0.5;\n    \n    return (0.5-vDither);\n}\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    if (iFrame % 2 == 1)\n        fragColor = vec4(vec3(texture(iChannel0, fragCoord / iResolution.xy).r * 0.5 + 0.5), 1.0);\n    else\n        fragColor = vec4(vec3(texture(iChannel1, fragCoord / iResolution.xy).r * 0.5 + 0.5), 1.0);\n        \n    \n    float colorDepth = COLORDEPTH;\n\t// downscaling the resolution so you can appreciate the effect better\n    fragCoord = floor(fragCoord /RESOLUTIONFACTOR)*RESOLUTIONFACTOR;\n    // getting pixel color from buffer\n\tvec3 finalColor = fragColor.xyz;\n    #if defined ( GREYSCALEINPUT )\n    finalColor = finalColor.rrr;\n    #endif\n    #if defined ( DITHER )\n\t// applying dithering (left for Valve dither, right for texture dither)\n  \tif (fragCoord.x < 0.5*iResolution.x)\n    finalColor += TextureDither(fragCoord.xy, colorDepth);\n    \t//finalColor += ValveScreenSpaceDither(fragCoord.xy, colorDepth);\n\telse \n    \tfinalColor += TextureDither(fragCoord.xy, colorDepth);\n    #endif\n    #if defined ( GREYSCALEOUTPUT )\n    finalColor = 0.333*vec3(finalColor.r+finalColor.g+finalColor.b);\n    #endif\n\t// limitating color depth and outputing final color\n    fragColor = vec4(finalColor,1.0);\n    fragColor = vec4(floor(finalColor * colorDepth+0.5) / colorDepth, 1.0);\n\t\t\t\n            \n    fragColor = vec4(vec3(1.0) - fragColor.xyz,1.0);\n    \n    ///////////////////////////////\n    \n    \n    vec2 uv = fragCoord.xy / iResolution.xy;\n    \n    vec3 color1 = vec3(0.0/255.0, 0.0/255.0, 251.0/255.0);\t\t\t// light color blue\n    //vec3 color1 = vec3(247.0/255.0, 238.0/255.0, 87.0/255.0);\t\t\t// light color yellow\n    //vec3 color2 = vec3(1.0/255.0, 1.0/255.0,1.0/255.0);\t\t\t\t// dark color blue\n    vec3 color2 = vec3(255.0/255.0, 255.0/255.0, 255.0/255.0);\t\t\t// dark color dark red\n    vec3 texColor = fragColor.xyz;\t// texture pixel color\n    \n    \n    // set the color based on diagonal texture coord\n    //float percent = (uv.x + uv.y) / 2.0;\t\t\t// percent along an angle\n    //vec3 midColor = mix(color1, color2, percent);\t// mix of the 2 colors\n    \n    //vec3 newColor = mix(texColor, midColor, 0.6);\t// pixel color mixed\n    //vec3 newColor = texColor * (midColor * 1.5);\t// pixel color multiplied\n    //vec3 newColor = texColor + midColor;\t\t\t// pixel color added\n    \n    \n    // Replaces the color with a mix of the light and dark color based on the luminance of the original pixel color\n    // luminance value\n    // https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Shaders/Builtin/Functions/luminance.glsl\n    const vec3 W = vec3(0, 0., 1);\n    float luminance = dot(texColor, W);\n    vec3 lumColor = mix(color1, color2, 1.0 - luminance);\n    vec3 newColor = lumColor;\t\t\t  // light and dark colors\n    //vec3 newColor = color1 * luminance; // colorize with 1 color\n    \n\tfragColor = vec4(newColor,1.0);\n   }\n","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    if (iFrame == 0)\n    {\n        color = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    ivec2 p = ivec2(coord);\n    \n    if (iFrame % 2 == 1)\n    {\n    \tcolor = texelFetch(iChannel0, p, 0);\n        return;\n    }\n    \n    ivec2 res = ivec2(iResolution.xy);\n    \n    float h = process(iChannel1, iChannel0, res, iMouse, p);\n    \n    color = vec4(h, 0.0, 0.0, 1.0);\n}\n","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"\n\nvoid mainImage(out vec4 color, in vec2 coord)\n{\n    if (iFrame == 0)\n    {\n        color = vec4(vec3(0.0), 1.0);\n        return;\n    }\n    \n    ivec2 p = ivec2(coord);\n    \n    if (iFrame % 2 == 0)\n    {\n    \tcolor = texelFetch(iChannel1, p, 0);\n        return;\n    }\n    \n    ivec2 res = ivec2(iResolution.xy);\n    \n    float h = process(iChannel0, iChannel1, res, iMouse, p);\n    \n    color = vec4(h, 0.0, 0.0, 1.0);\n}\n","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"\nfloat read(sampler2D tex, ivec2 res, ivec2 coord, ivec2 offset, vec4 mouse)\n{\n    ivec2 r = res;\n    ivec2 c = coord + offset;\n    \n    // is there a better way to mirror the coordinates? :(\n    if (c.x < 0)\n        c.x = -c.x;\n    else if (c.x > r.x)\n        c.x = r.x - (c.x - r.x);\n        \n    if (c.y < 0)\n        c.y = -c.y;\n    else if (c.y > r.y)\n        c.y = r.y - (c.y - r.y);\n    \n    // it doesn't get stuck anymore!\n    float ui = clamp(1.0 - length(vec2(c) - mouse.xy) / 15.0, 0.0, 1.0);\n    if ( mouse.z < 0.0 && mouse.w < 0.0 ) {\n    ui=0.0;\n    }\n    float h = texelFetch(tex, c, 0).r;\n    \n    return h + ui;\n}\n\nfloat process(sampler2D bufferIn, sampler2D bufferOut, ivec2 res, vec4 mouse, ivec2 p)\n{\n    float l = read(bufferIn, res, p, ivec2(-1,  0), mouse);\n    float r = read(bufferIn, res, p, ivec2( 1,  0), mouse);\n    float u = read(bufferIn, res, p, ivec2( 0, -1), mouse);\n    float d = read(bufferIn, res, p, ivec2( 0,  1), mouse);\n    \n    float c = read(bufferOut, res, p, ivec2(0), mouse);\n    \n    float damp = 0.98;\n    \n    return ((l + r + u + d) / 2.0 - c) * damp;\n}\n","name":"Common","description":"","type":"common"}]}