{"ver":"0.1","info":{"id":"3lVyWm","date":"1611250858","viewed":177,"name":"F1 car","username":"regis","description":"f1 car","likes":4,"published":1,"flags":32,"usePreview":0,"tags":["3d","raymarch","f1","car"],"hasliked":0,"parentid":"WtKcWD","parentname":"fish 123456789"},"renderpass":[{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 sdF1(vec3 p){\n\n    vec2 d=vec2(0.0);\n    \n    vec3 pdb = p-vec3(0.0, 5.0, 0.0);\n    float db = Box(pdb, vec3(9.0, 2.0, 2.0), 0.5);\n    if(db > 50.0){\n        d.x = db;\n        d.y = 3.0;\n        return d;\n    }\n    \n    \n    pdb = p-vec3(6.0, 8.0, 0.0);\n    pdb *= RotZ(0.43633231305555553);\n    float db2 = Box(pdb, vec3(5.0, 2.0, 3.0), 0.5);\n    \n        \n    pdb = p - vec3(-17.0, 5.0, 0.0);\n    vec4 els = opElongate(pdb, vec3(7.0, 0.0, 9.0));\n    float side = els.w + sdEllipsoid(els.xyz, vec3(2.0, 3.0, 2.0));\n    \n    pdb = p-vec3(-28.5, 5.0, -12.0);\n    pdb *= RotY(0.9424777962000002);\n    float ct1 = Box(pdb, vec3(8.0, 4.0, 10.0), 0.5);\n    \n    pdb = p-vec3(-28.5, 5.0, 12.0);\n    pdb *= RotY(2.1991148578);\n    float ct2 = Box(pdb, vec3(8.0, 4.0, 10.0), 0.5);\n    \n    pdb = p-vec3(-30.5, 5.0, 0.0);\n    float back = Box(pdb, vec3(6.0, 2.5, 3.0), 0.5);\n    \n    \n    pdb = p - vec3(-27.0, 9.0, 0.0);\n    els = opElongate(pdb, vec3(7.0, 1.0, 1.5));\n    float hgh = els.w + sdEllipsoid(els.xyz, vec3(2.0, 3.0, 2.0));\n    \n    pdb = p-vec3(-27.0, 14.0, 0.0);\n    pdb *= RotZ(-0.43633231305555553);\n    float cthgh = Box(pdb, vec3(12.0, 2.0, 5.0), 0.5);\n    \n    hgh = smax(hgh, -cthgh, 0.3);\n    \n    pdb = p-vec3(-14.5, 7.0, 0.0);\n    float hbc = Box(pdb, vec3(3.0, 2.0, 3.0), 0.5);\n    \n    pdb = p-vec3(-8.5, 6.0, 0.0);\n    float hbc2 = Box(pdb, vec3(4.0, 0.7, 1.5), 0.5);\n    \n    pdb = p-vec3(7.0, 3.0, 0.0);\n    float afr = Box(pdb, vec3(2.0, 0.05, 7.0), 0.1);\n    \n    /************************/\n     vec3 psp = p-vec3(6.5, 4.5, -3.5 );\n        \n    //bend\n    float k = 0.1;\n    float c = cos(k*psp.z);\n    float s = sin(k*psp.z);\n    mat2  m = mat2(c,-s,s,c);\n    vec2 qq = m*psp.xz;\n    vec3 q  = vec3( qq.x,psp.y,qq.y );\n    //vec3  q = vec3(m*psp.xy,psp.z);\n   \n    \n    float sp = Box(q, vec3(0.3, 0.025, 3.5), 0.05);\n    //\n    psp = p-vec3(7.0, 4.25, -3.5 );\n        \n    //bend\n    k = 0.05; \n    c = cos(k*psp.x);\n    s = sin(k*psp.x);\n    m = mat2(c,-s,s,c);\n    q = vec3(m*psp.xy,psp.z);\n   \n    \n    float sp2 = Box(q, vec3(0.3, 0.025, 3.5), 0.05);\n    \n     //\n    psp = p-vec3(8.0, 4.0, -3.5 );\n        \n    //bend\n    k = 0.2; \n    c = cos(k*psp.x);\n    s = sin(k*psp.x);\n    m = mat2(c,-s,s,c);\n    q = vec3(m*psp.xy,psp.z);\n   \n    \n    float sp3 = Box(q, vec3(0.3, 0.025, 3.5), 0.05);\n    \n    //\n    /*\n    psp = p-vec3(6.0, 4.5, 3.5 );\n        \n    //bend\n    k = 0.05; \n    c = cos(k*psp.x);\n    s = sin(k*psp.x);\n    m = mat2(c,-s,s,c);\n    q = vec3(m*psp.xy,psp.z);\n   \n    \n    float sp4 = Box(q, vec3(0.3, 0.025, 3.5), 0.05);*/\n     psp = p-vec3(6.5, 4.5, 3.5 );\n        \n    //bend\n    k = 0.1;\n    c = cos(k*psp.z);\n    s = sin(k*psp.z);\n    m = mat2(c,-s,s,c);\n    qq = m*psp.xz;\n    q  = vec3( qq.x,psp.y,qq.y );\n    //vec3  q = vec3(m*psp.xy,psp.z);\n   \n    \n    float sp4 = Box(q, vec3(0.3, 0.025, 3.5), 0.05);\n    \n    //\n    psp = p-vec3(7.0, 4.25, 3.5 );\n        \n    //bend\n    k = 0.05; \n    c = cos(k*psp.x);\n    s = sin(k*psp.x);\n    m = mat2(c,-s,s,c);\n    q = vec3(m*psp.xy,psp.z);\n   \n    \n    float sp5 = Box(q, vec3(0.3, 0.025, 3.5), 0.05);\n    \n     //\n    psp = p-vec3(8.0, 4.0, 3.5 );\n        \n    //bend\n    k = 0.2; \n    c = cos(k*psp.x);\n    s = sin(k*psp.x);\n    m = mat2(c,-s,s,c);\n    q = vec3(m*psp.xy,psp.z);\n   \n    \n    float sp6 = Box(q, vec3(0.3, 0.025, 3.5), 0.05);\n    \n    \n    \n    /*************************/\n    \n    pdb = p-vec3(7.0, 4.0, -7.0);\n    float afr2 = Box(pdb, vec3(2.0, 1.0, 0.05), 0.1);\n    \n    pdb = p-vec3(7.0, 4.0, 7.0);\n    float afr3 = Box(pdb, vec3(2.0, 1.0, 0.05), 0.1);\n    \n    afr = smin(afr, afr2, 0.1);\n    afr = smin(afr, afr3, 0.1);\n    \n    pdb = p-vec3(-37.0, 7.0, 0.0);\n    float abc = Box(pdb, vec3(2.0, 0.05, 7.0), 0.1);\n    \n    pdb = p-vec3(-37.0, 10.0, 7.0);\n    float abc2 = Box(pdb, vec3(2.0, 4.0, 0.05), 0.1);\n    abc = smin(abc, abc2, 0.1);\n    \n    pdb = p-vec3(-37.0, 10.0, -7.0);\n    float abc3 = Box(pdb, vec3(2.0, 4.0, 0.05), 0.1);\n    abc = smin(abc, abc3, 0.1);\n        \n    pdb = p-vec3(-37.0, 13.0, 0.0);\n    pdb *= RotZ(15.0*3.1415/180.0);\n    float abc4 = Box(pdb, vec3(2.0, 0.05, 7.0), 0.1);\n    abc = smin(abc, abc4, 0.1);\n        \n    float car = smax(db, -db2, 0.3);\n    car = smin(car, side, 0.3);\n    car = smax(car, -ct1, 0.3);\n    car = smax(car, -ct2, 0.3);  \n    car = smin(car, back, 0.3);  \n    car = smin(car, hgh, 0.1); \n    car = smax(car, -hbc, 0.1); \n    car = smax(car, -hbc2, 0.1); \n    ///car = smin(car, afr, 0.1); \n    \n    pdb = p - vec3(5.0, 5.0, 0.0);\n    float bra = sdfSegment(p, vec3(0.0, 5.0, 8.0), vec3(0.0, 5.0, -8.0), 0.1);\n    \n    vec3 a = vec3(0.0, 5.0, 10.0);\n    vec3 b = vec3(0.0, 5.0, 6.0);\n    float wh1 = sdCylinder(p, a, b, 4.0);\n    \n    a = vec3(0.0, 5.0, -10.0);\n    b = vec3(0.0, 5.0, -6.0);\n    float wh2 = sdCylinder(p, a, b, 4.0);\n    \n    float brb = sdfSegment(p, vec3(-30.0, 5.0, 8.0), vec3(-30.0, 5.0, -8.0), 0.1);\n    \n    a = vec3(-30.0, 5.0, 10.0);\n    b = vec3(-30.0, 5.0, 6.0);\n    float wh3 = sdCylinder(p, a, b, 4.0);\n    \n    a = vec3(-30.0, 5.0, -10.0);\n    b = vec3(-30.0, 5.0, -6.0);\n    float wh4 = sdCylinder(p, a, b, 4.0);\n    \n   \n    float bra2 = sdfSegment(p, vec3(0.0, 3.0, 8.0), vec3(-2.0, 5.0, 2.0), 0.1);\n      \n    float bra3 = sdfSegment(p, vec3(0.0, 3.0, -8.0), vec3(-2.0, 5.0, -2.0), 0.1);\n    \n    float vol1 = sdfSegment(p, vec3(-11.2, 9.0, 1.0), vec3(-11.2, 7.0, 1.0), 0.2);\n    float vol2 = sdfSegment(p, vec3(-11.2, 9.0, -1.0), vec3(-11.2, 7.0, -1.0), 0.2);\n    \n    pdb = p-vec3(-11.2, 8.0, -0.0);\n    float vol3 = Box(pdb, vec3(0.05, 0.5, 1.0), 0.1);\n    vol1 = smin(vol1, vol2, 0.1);\n    vol1 = smin(vol1, vol3, 0.1);\n    \n    d.x = car;\n    d.y = 3.0;\n    \n   /* d.x = db;\n    d.y = 3.0;\n    */\n   if(afr < d.x){\n        d.x = afr;\n        d.y = 4.0;\n    \n    }\n     if(sp < d.x){\n        d.x = sp;\n        d.y = 4.0;\n    \n    }\n     if(sp2 < d.x){\n        d.x = sp2;\n        d.y = 4.0;\n    \n    }\n    if(sp3 < d.x){\n        d.x = sp3;\n        d.y = 4.0;\n    \n    }\n    if(sp4 < d.x){\n        d.x = sp4;\n        d.y = 4.0;\n    \n    }\n    if(sp5 < d.x){\n        d.x = sp5;\n        d.y = 4.0;\n    \n    }\n    if(sp6 < d.x){\n        d.x = sp6;\n        d.y = 4.0;\n    \n    }\n    if(abc < d.x){\n        d.x = abc;\n        d.y = 4.0;\n    \n    }\n    \n    if(bra < d.x){\n        d.x = bra;\n        d.y = 5.0;\n    \n    }\n    if(bra2 < d.x){\n        d.x = bra2;\n        d.y = 5.0;\n    \n    }\n    if(bra3 < d.x){\n        d.x = bra3;\n        d.y = 5.0;\n    \n    }\n    if(wh1 < d.x){\n        d.x = wh1;\n        d.y = 5.0;\n    \n    }\n    if(wh2 < d.x){\n        d.x = wh2;\n        d.y = 5.0;\n    \n    }\n    if(brb < d.x){\n        d.x = brb;\n        d.y = 5.0;\n    \n    }\n    if(wh3 < d.x){\n        d.x = wh3;\n        d.y = 5.0;\n    \n    }\n    if(wh4 < d.x){\n        d.x = wh4;\n        d.y = 5.0;\n    \n    }\n    if(vol1 < d.x){\n        d.x = vol1;\n        d.y = 5.0;\n    \n    }\n   \n    return d;\n\n}\n\n\n/**********************************************************/\n\nvec2 map(vec3 p, vec2 uv){\n\n\n   \n    vec2 d=vec2(0.0);\n    float pl = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    pl -= Noise3D(p*5.0)*0.1;\n    \n    vec3 pdep = vec3(0.0, 1.0, 0.0);\n    pdep.x = -100.0;\n    float X = mod(iTime*10.0, 200.0);\n    pdep.x += X;\n    if(X > 100.0)\n        pdep.x = 0.0;\n    vec2 df1 = sdF1(p-pdep);   \n    \n    float ma = sdfSegment(p, vec3(-40.0, 0.0, 20.0), vec3(-40.0, 30.0, 20.0), 0.3);\n    \n    vec3 pdb = p-vec3(-40.0, 25.0, 28.0);\n    pdb.y += sin(p.z+iTime*10.0)*0.5;\n    pdb.x += cos(p.z+iTime*10.0)*0.3;\n    float flag1 = Box(pdb, vec3(0.05, 5.0, 7.0), 0.5);\n    \n    float ma2 = sdfSegment(p, vec3(-40.0, 0.0, -20.0), vec3(-40.0, 30.0, -20.0), 0.3);\n    \n    pdb = p-vec3(-40.0, 25.0, -28.0);\n    pdb.y += sin(p.z+iTime*10.0)*0.5;\n    pdb.x += cos(p.z+iTime*10.0)*0.3;\n    float flag2 = Box(pdb, vec3(0.05, 5.0, 7.0), 0.5);\n    \n      \n      \n       d.x = pl;\n       d.y = 2.0;\n       \n       if(df1.x < d.x){\n           d.x = df1.x;\n           d.y = df1.y;\n       }\n       if(ma < d.x){\n           d.x = ma;\n           d.y = 6.0;\n       }\n       if(flag1 < d.x){\n           d.x = flag1;\n           d.y = 7.0;\n       }\n       \n       if(ma2 < d.x){\n           d.x = ma2;\n           d.y = 6.0;\n       }\n       if(flag2 < d.x){\n           d.x = flag2;\n           d.y = 7.0;\n       }\n       \n    return d;\n    \n    \n}\n\nvec3 RayMarch(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    for (int i = 0; i < 100; i++) {\n        t.yz = map(eye + t.x * viewRayDirection, uv).xy;\n        \n                    \n        if (abs(t.y) < 0.001)break;\n                \n        t.x += t.y;\n        \n        if (t.x >= 500.0)break;\n        \n    }\n    if (t.x >= 500.0)t.x = -1.0;\n    \n    return t;\n\n\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t , vec2(1.0)).x;\n        res = min( res, 10.0*h/t );\n        t += clamp( h, 0.01, 0.10 );\n        if( h<0.0001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos , vec2(1.0)).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\nvec3 GetLightM(vec3 p, vec2 uv, vec3 lg, out vec3 n, vec3 ro, vec3 rd){\n    vec3 lightpos = lg;\n    lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = map(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    n = d.x - vec3(\n        map(p-e.xyy, uv).x,\n        map(p-e.yxy, uv).x,\n        map(p-e.yyx, uv).x);\n    \n    \n    n = normalize(n);\n   \n    float occ = calcAO(p, n);       \n    float dif = clamp(dot(n, l), .0, 1.);\n    dif += occ;\n    //dif *= calcSoftshadow(p, lightpos, 0.01, 100. );\n \n    vec3 dd = RayMarch(p+n*.01, l, uv);\n    p = ro + reflect(n, l) * dd.x;\n    \n    \n    \n         \n    if((dd.x < length(lightpos-p)) && (dd.x > 0.0)){\n        if(dd.z == 2.0)\n        {\n             \n             return vec3(dif);\n        }\n        else if(dd.z == 3.0)\n        {\n             return vec3(dif) * vec3(1.0, 0.0, 0.0)*0.4 ;\n        }\n        else if(dd.z == 4.0)\n        {\n             return vec3(dif)* vec3(1.0, 0.3, 0.0)*0.4;;\n        }\n        else\n            return vec3(dif)*0.2;\n            \n     }\n     else\n         return vec3(dif);\n\n}\n\n\n\nvec3 lightDir = normalize( vec3(0.5,0.6,0.) );\nconst mat2 m2 = mat2( 0.60, -0.80, 0.80, 0.60 );\nvec3 Cloud(vec3 bgCol,vec3 ro,vec3 rd,vec3 cloudCol,float spd)\n{\n    vec3 col = bgCol;\n    float t = iTime * 0.15* spd;\n    //float r = N21(vec2(t)) * 20.5;\n    vec2 sc = ro.xz + rd.xz*2.5/rd.y;//*(12.0-ro.y)/rd.y;\n    vec2 p = 0.2*sc;\n    float f = 0.0;\n  \tfloat s = 0.5;\n  \tfloat sum =0.;\n  \tfor(int i=0;i<5;i++){\n    \tp += t;t *=1.5;\n    \tf += s* Noise(p) /*texture (iChannel0, p/256.0).x/*textureLod( iChannel0, p/256.0, 0.0).x*/; p = m2*p*2.02;\n    \tsum+= s;s*=0.6;\n  \t}\n    float val = f/sum; \n    col = mix( col, cloudCol, smoothstep(0.5,0.8,val) );\n    return col;\n}\nvec3 RayMarchCloud(vec3 ro,vec3 rd){\n    vec3 col = vec3(0.0,0.0,0.0);  \n    /*float sundot = clamp(dot(rd,lightDir),0.0,1.0);\n    */\n     // sky      \n    //col = vec3(0.2,0.5,0.85)*1.1 - rd.y*rd.y*0.5;\n   // col = mix( col, 0.85*vec3(0.7,0.75,0.85), pow( 1.0-max(rd.y,0.0), 4.0 ) );\n    // sun\n    /*\n    col += 0.25*vec3(1.0,0.7,0.4)*pow( sundot,5.0 );\n    col += 0.25*vec3(1.0,0.8,0.6)*pow( sundot,64.0 );\n    col += 0.4*vec3(1.0,0.8,0.6)*pow( sundot,512.0 );*/\n     col = vec3(0.0, 0.7, 1.0);\n    // clouds\n    col = Cloud(col,ro,rd,vec3(1.0,0.95,1.0),1.);\n            // .\n    col = mix( col, 1.5*vec3(0.0,0.5,1.0), pow( 1.0-max(rd.y,0.0), 16.0 ) );\n    return col;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    //iMouse.xy / iResolution.xy\n    vec3 lookat = vec3((iMouse.x/iResolution.x)*10.0, (iMouse.y/iResolution.y)*30.0, 30.0);//vec3(0.0, 1.5, 0.0);\n    vec3 ro = vec3(-25.5, 5.0, -25.0);\n    vec3 lightpos = vec3(0.0, 50., -60.);\n    \n           \n    // camera move\n    vec3 dirc = vec3(-10.5, 15.0, 0.0);\n    \n    float an = (iMouse.x/iResolution.x)*10.0;\n    float anx = (iMouse.y/iResolution.y)*3.0;\n    ro -= dirc;\n    lookat -= dirc;\n    ro *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    lookat *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    ro *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    lookat *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    ro *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    lookat *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    ro += dirc;\n    lookat += dirc;\n    \n    \n    lightpos -= dirc;\n    lightpos *= quaternion(vec3(0.0, 0.0, 1.0), anx);\n    lightpos *= quaternion(vec3(1.0, 0.0, 0.0), anx);\n    lightpos *= quaternion(vec3(0.0, 1.0, 0.0), an);\n    lightpos += dirc;\n    \n    \n    \n    float zoom = 1.0;    \n    vec3 f = normalize(lookat-ro),\n        r = normalize(cross(vec3(0,1,0), f)),\n        u = cross(f, r),\n        c = ro + f * zoom,\n        i = c + uv.x * r + uv.y * u,\n        rd = normalize(i-ro);\n        \n    \n        \n     vec3 t;\n     float dO, dif, dif2, dif3, difT;\n     vec3 p;\n     \n  \n     \n     t = RayMarch(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n    float alpha = 1.0;\n    vec3 n1, n2, n3, np;\n  \n   \n    \n    \n        \n     if(t.x > 0.0){\n     \n         vec3 diff2 = GetLightM(p, uv, lightpos, n1, ro, rd);\n                 \n         //Material num\n         if(t.z == 0.0){\n            // col = ph * vec3(0.0, 1.0, 0.0);\n         }\n         else if(t.z == 1.0){\n             col = diff2* vec3(1.0, 0.0, 0.0);\n         }\n         else if(t.z == 2.0){\n             vec3 m = Line(p.xy, vec2(5.0, 0.0), vec2(-5.0, 0.0), 0.1, 0.05);;\n             m+= Line3(p, vec3(0.0, 0.0, -15.0), vec3(-30.0, 0.0, -15.0), 1.0, 0.5);\n             m+= Line3(p, vec3(0.0, 0.0, 15.0), vec3(-30.0, 0.0, 15.0), 1.0, 0.5);\n            col = diff2*texture(iChannel1, uv).rgb + m ;\n             \n             \n         }\n         else if(t.z == -1.0){\n             \n         }\n         else if(t.z == 3.0){\n             //float spec = pow(max( dot( reflect(-normalize(lightpos-p), n1), -rd ), 0.), 8.);\n             vec3 r = reflect(rd, n1);\n             float spec = pow(max(0.0, r.y), 4.);\n             //#ec382f\n             col = diff2 * vec3(0.92, 0.21, 0.18) + spec;\n         \n         }\n         else if(t.z == 4.0){\n             vec3 r = reflect(rd, n1);\n             float spec = pow(max(0.0, r.y), 4.);\n             col = diff2 * vec3(0.1)+spec;\n             \n             \n         }\n         else if(t.z == 4.1){\n             vec2 gv = fract(p.yz*2.0)-0.5;\n             vec2 id = floor(p.yz);\n             \n             float n = N21(id);\n             \n             if(n <.5)gv.x *= -1.;\n             float width = .1;\n             float d = abs(abs(gv.x+gv.y)-0.5);\n             d = length(gv-sign(gv.x+gv.y+0.001)*.5)-.5;\n             float mask = smoothstep(.01, -.01, abs(d)-width);\n             \n             col = diff2 * vec3(1.0, 0.3, 0.0) + mask;//( (fract(p.y))+(fract(p.z)) )*0.4;\n             \n             \n         }\n         else if(t.z == 5.0){\n             vec3 r = reflect(rd, n1);\n             float spec = pow(max(0.0, r.y), 4.);\n             col = vec3(0.1) * diff2 + spec;\n         \n             \n         }\n         else if(t.z == 6.0){\n             col = vec3(0.021) * diff2;\n         \n             \n         }\n         else if(t.z == 7.0){//C\n             col = vec3(0.8);\n             float f = -1.0+2.0*smoothstep(-0.1, 0.1, sin(5.0*p.z)+sin(3.0*p.y));\n             col += f * diff2 ;\n             //col = vec3(0.5) * diff2;\n         \n             \n         }\n         else if(t.z == 8.0){\n             col = vec3(0.0, 1.0, 0.0) * diff2;\n         \n             \n         }\n         else if(t.z == 9.0){\n             col = vec3(1.0, 1.0, 1.0) * diff2;\n         \n             \n         }\n         \n         \n         \n     }\n     else\n     {\n         col = RayMarchCloud( ro, rd);\n         //col = vec3(0.0, 0.7, 1.0);\n     }\n     \n      //col = mix(vec3(0.0, 1.0, 1.0), col, 0.6);//exp(-t.x*0.05));\n   \n    // Output to screen\n    fragColor = vec4((col),alpha);\n}\n\n\n\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"vec4 tpos = vec4(0.0, 0.0, 0.0, 0.0);\nfloat angle_tpos;\nbool done = false;\nfloat dist = 0.0;\n\nmat2 Rot(float a){\n    float s = sin(a);\n    float c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nmat3 RotX(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(1., .0, .0, .0, c, -s, .0, s, c);\n\n}\n\nmat3 RotY(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, .0, s, .0, 1., .0, -s, .0, c);\n\n}\n\nmat3 RotZ(float a){\n    float s = sin(a);\n    float c = cos(a);\n    \n    return mat3(c, -s, .0, s, c, .0, .0, .0, 1.);\n\n}\n\nfloat sdEllipsoid( vec3 p, vec3 r )\n{\n  float k0 = length(p/r);\n  float k1 = length(p/(r*r));\n  return k0*(k0-1.0)/k1;\n}\n\nfloat opExtrusion(in vec3 p, in float d, in float h) {\n    // d is the distance to the 2D shape using the x and y components of p\n    vec2 w = vec2(d, abs(p.z) - h);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n}\n\n\nvec4 opElongate( in vec3 p, in vec3 h )\n{\n    //return vec4( p-clamp(p,-h,h), 0.0 ); // faster, but produces zero in the interior elongated box\n    \n    vec3 q = abs(p)-h;\n    return vec4( max(q,0.0), min(max(q.x,max(q.y,q.z)),0.0) );\n}\n\n\nvec3 opTwist(in vec3 p, in float t) {\n    float c = cos(t * p.y);\n    float s = sin(t * p.y);\n    mat2 m = mat2(c, -s, s, c);\n    return vec3(m * p.xz, p.y);\n}\n\nconst mat2 rotate2D = mat2(1.3623, 1.7531, -1.7131, 1.4623);\nvec2 add = vec2(1.0, 0.0);\n#define HASHSCALE1 .1031\n#define HASHSCALE3 vec3(.1031, .1030, .0973)\n#define HASHSCALE4 vec4(1031, .1030, .0973, .1099)\n\nfloat Hash12(vec2 p)\n{\n\tvec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract((p3.xx+p3.yz)*p3.zy);\n\n}\n\nfloat Noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    float res = mix(mix( Hash12(p),          Hash12(p + add.xy),f.x),\n                    mix( Hash12(p + add.yx), Hash12(p + add.xx),f.x),f.y);\n    return res;\n}\n\n// ref https://www.shadertoy.com/view/Xs33Df\nfloat Noise3D(in vec3 p){\n    const vec3 s = vec3(7, 157, 113);\n\tvec3 ip = floor(p); // Unique unit cell ID.\n    vec4 h = vec4(0., s.yz, s.y + s.z) + dot(ip, s);\n\tp -= ip; // Cell's fractional component.\n    p = p*p*(3. - 2.*p);\n    h = mix(fract(sin(h)*43758.5453), fract(sin(h + s.x)*43758.5453), p.x);\n    h.xy = mix(h.xz, h.yw, p.y);\n    return mix(h.x, h.y, p.z); // Range: [0, 1].\n\t\n}\n\nvec2 hash( vec2 p )\n{\n\tp = vec2( dot(p,vec2(127.1,311.7)),\n\t\t\t dot(p,vec2(269.5,183.3)) );\n\treturn -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n\tconst float K1 = 0.366025404; // (sqrt(3)-1)/2;\n\tconst float K2 = 0.211324865; // (3-sqrt(3))/6;\n\t\n\tvec2 i = floor( p + (p.x+p.y)*K1 );\n\t\n\tvec2 a = p - i + (i.x+i.y)*K2;\n\tvec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0);\n\tvec2 b = a - o + K2;\n\tvec2 c = a - 1.0 + 2.0*K2;\n\t\n\tvec3 h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n\t\n\tvec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n\t\n\treturn dot( n, vec3(70.0) );\n}\n\nfloat fbm(vec2 uv)\n{\n\tfloat f;\n\tmat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n\tf  = 0.5000*noise( uv ); uv = m*uv;\n\tf += 0.2500*noise( uv ); uv = m*uv;\n\tf += 0.1250*noise( uv ); uv = m*uv;\n\tf += 0.0625*noise( uv ); uv = m*uv;\n\tf = 0.5 + 0.5*f;\n\treturn f;\n}\n\n\n\n\nfloat sdCylinder(vec3 p, vec3 a, vec3 b, float r) {\n\tvec3 ab = b-a;\n    vec3 ap = p-a;\n    \n    float t = dot(ab, ap) / dot(ab, ab);\n    //t = clamp(t, 0., 1.);\n    \n    vec3 c = a + t*ab;\n    \n    float x = length(p-c)-r;\n    float y = (abs(t-.5)-.5)*length(ab);\n    float e = length(max(vec2(x, y), 0.));\n    float i = min(max(x, y), 0.)-0.1;\n    \n    return e+i;\n}\n\nfloat sdRoundBox( vec3 p, vec3 b, float r )\n{\n  vec3 q = abs(p) - b;\n  return -(length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r);\n}\n\nfloat Box(vec3 p, vec3 sc, float r){\n    return length(max(abs(p)-sc, 0.))-r;\n}\n\nfloat Box2(vec3 p, vec3 sc, float r, float an){\n    an = 80.0;\n    vec3 cs = vec3(cos(an*3.1415/180.0), sin(an*3.1415/180.0),cos(an*3.1415/180.0));\n    float c2 = length(cs);\n    \n    float a = length(max( abs(p)-(sc)  , 0.0)) - r;\n    float b = length(max(abs(p)-vec3(1.0, 2.0, 1.0), 0.));\n    return a;\n}\n\nfloat Capsule(vec3 p, vec3 sc, float r){\n    vec3 cs = vec3(cos(90.0*3.1415/180.0), sin(90.0*3.1415/180.0),cos(90.0*3.1415/180.0));  \n    float a = length(max( abs(p)- (sc*cs)  , 0.0)) - r;\n    return a;\n}\n\nfloat opRep( in vec3 p, in vec3 c, vec3 sc, float r )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return Box( q, sc, r );\n}\n\nfloat opRepS( in vec3 p, in vec3 c, vec4 pos )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return length(q) - pos.w;\n}\n\nvec3 add_tpos(vec3 tp){\n    return vec3(tp.x+tpos.x, tp.y+tpos.y, tp.z+tpos.z);\n    \n}\n\nvec3 rot_y(vec3 tp, float a){\n    tp.xz *= Rot(a);\n    return tp;\n\n}\n\nfloat sdfSegment(in vec3 p, in vec3 a, in vec3 b, in float r){\n\n    \n    float h = min(1.0, max(0.0, dot(p-a, b-a) / dot(b-a, b-a)));\n   // a = a*exp(-4.*h);\n    //r =r-sin(9.0*3.1415*h)*0.2;\n    //r =r+exp(-4.*h);\n    //r = r -4.*h*(1.-h)-0.2*cos(10.*h+4.*iTime);\n    //r += sin(h*3.1415)*0.3;\n    return length(p-a-(b-a)*h)-r;\n    \n\n}\n\nfloat sdfSegment2(in vec3 p, in vec3 a, in vec3 b, in float r){\n\n    \n    float h = min(1.0, max(0.0, dot(p-a, b-a) / dot(b-a, b-a)));\n   // a = a*exp(-4.*h);\n    //r =r-sin(9.0*3.1415*h)*0.2;\n    //r =r+exp(-4.*h);\n    //r = r -4.*h*(1.-h)-0.2*cos(10.*h+4.*iTime);\n    r += sin(h*3.1415)*0.3;\n    return length(p-a-(b-a)*h)-r;\n    \n\n}\n\n\nfloat opRepSeg( in vec3 p, in vec3 c,  in vec3 a, in vec3 b, in float r)\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    return sdfSegment(q, a, b, r);\n}\n\n\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nvec4 sdBezier2( vec3 p, vec3 va, vec3 vb, vec3 vc )\n{\n  vec3 w = normalize( cross( vc-vb, va-vb ) );\n  vec3 u = normalize( vc-vb );\n  vec3 v =          ( cross( w, u ) );\n  //----  \n  vec2 m = vec2( dot(va-vb,u), dot(va-vb,v) );\n  vec2 n = vec2( dot(vc-vb,u), dot(vc-vb,v) );\n  vec3 q = vec3( dot( p-vb,u), dot( p-vb,v), dot(p-vb,w) );\n  //----  \n  float mn = det(m,n);\n  float mq = det(m,q.xy);\n  float nq = det(n,q.xy);\n  //----  \n  vec2  g = (nq+mq+mn)*n + (nq+mq-mn)*m;\n  float f = (nq-mq+mn)*(nq-mq+mn) + 4.0*mq*nq;\n  vec2  z = 0.5*f*vec2(-g.y,g.x)/dot(g,g);\n//float t = clamp(0.5+0.5*(det(z,m+n)+mq+nq)/mn, 0.0 ,1.0 );\n  float t = clamp(0.5+0.5*(det(z-q.xy,m+n))/mn, 0.0 ,1.0 );\n  vec2 cp = m*(1.0-t)*(1.0-t) + n*t*t - q.xy;\n  //----  \n  float d2 = dot(cp,cp);\n  return vec4(sqrt(d2+q.z*q.z), t, q.z, -sign(f)*sqrt(d2) );\n}\n\n\nvec4 opRepBezier( in vec3 p, in vec3 c, vec3 va, vec3 vb, vec3 vc )\n{\n    vec3 q = mod(p+0.5*c,c)-0.5*c;\n    vec3 qa = mod(va+0.5*c,c)-0.5*c;\n    vec3 qb = mod(vb+0.5*c,c)-0.5*c;\n    vec3 qc = mod(vc+0.5*c,c)-0.5*c;\n    return  sdBezier2(q, va, vb, vc);\n}\n\n// https://iquilezles.org/articles/smin\nfloat smin( float a, float b, float k )\n{\n    float h = max(k-abs(a-b),0.0);\n    return min(a, b) - h*h*0.25/k;\n}\n\n// https://iquilezles.org/articles/smin\nfloat smax( float a, float b, float k )\n{\n    k *= 1.4;\n    float h = max(k-abs(a-b),0.0);\n    return max(a, b) + h*h*h/(6.0*k*k);\n}\n\n\nfloat NS21(vec2 p){\n\n    return fract(sin(p.x*100.+p.y*6574.)*5647.);\n}\n\nfloat SmoothNoise(vec2 uv) {\n    vec2 lv = fract(uv);\n    vec2 id = floor(uv);\n    \n    lv = lv*lv*(3.-2.*lv);\n    \n    float bl = NS21(id);\n    float br = NS21(id+vec2(1,0));\n    float b = mix(bl, br, lv.x);\n    \n    float tl = NS21(id+vec2(0,1));\n    float tr = NS21(id+vec2(1,1));\n    float t = mix(tl, tr, lv.x);\n    \n    return mix(b, t, lv.y);\n}\n\nfloat SmoothNoise2(vec2 uv) {\n    float c = SmoothNoise(uv*4.);\n    \n    // don't make octaves exactly twice as small\n    // this way the pattern will look more random and repeat less\n    c += SmoothNoise(uv*8.2)*.5;\n    c += SmoothNoise(uv*16.7)*.25;\n    c += SmoothNoise(uv*32.4)*.125;\n    c += SmoothNoise(uv*64.5)*.0625;\n    \n    c /= 2.;\n    \n    return c;\n}\n\nfloat N21(vec2 p){\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x*p.y);\n\n}\n\nvec2 N22(vec2 p){\n\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n\n}\n\n\nfloat _line(vec2 p, vec2 a, vec2 b){\n\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\nvec3 Line(vec2 p, vec2 a, vec2 b, float l1, float l2){\n\n    float d = _line(p, a, b);\n    float m = smoothstep(l1, l2, d);\n    return vec3(m); \n\n}\n\nfloat _line3(vec3 p, vec3 a, vec3 b){\n\n    vec3 pa = p-a;\n    vec3 ba = b-a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0., 1.);\n    return length(pa - ba*h);\n}\n\nvec3 Line3(vec3 p, vec3 a, vec3 b, float l1, float l2){\n\n    float d = _line3(p, a, b);\n    float m = smoothstep(l1, l2, d);\n    return vec3(m); \n\n}\n\nmat3 quat(vec3 p, float theta){\n\n    vec3 z = normalize(p);\n    \n    float t1 =  cos(theta);\n    float t2 =  1. - t1;\n    float t3 =  z.x*z.x;\n    float t6 =  t2*z.x;\n    float t7 =  t6*z.y;\n    float t8 =  sin(theta);\n    float t9 =  t8*z.z;\n    float t11 = t6*z.z;\n    float t12 = t8*z.y;\n    float t15 = z.y*z.y;\n    float t19 = t2*z.y*z.z;\n    float t20 = t8*z.x;\n    float t24 = z.z*z.z;\n    return mat3( t1 + t2*t3, t7 - t9, t11 + t12, t7 + t9, t1 + t2*t15, t19 - t20, t11 - t12, t19 + t20, t1 + t2*t24);\n\n}\n\nmat3 quaternion(vec3 v, float an){\n\n    vec3 z = normalize(v);\n    \n    float a = cos(an/2.0);\n    float s = sin(an/2.0);\n    float b = s*z.x;\n    float c = s*z.y;\n    float d = s*z.z;\n    float a2 = a*a;\n    float b2 = b*b;\n    float c2 = c*c;\n    float d2 = d*d;\n    float _2ab = 2.*a*b;\n    float _2ac = 2.*a*c;\n    float _2ad = 2.*a*d;\n    float _2bc = 2.*b*c;\n    float _2bd = 2.*b*d;\n    float _2cd = 2.*c*d;\n    \n    return mat3(a2+b2-c2-d2  , _2bc-_2ad, _2ac+_2bd, \n                _2ad+_2bc, a2-b2+c2-d2  , _2cd-_2ab,\n                _2bd-_2ac, _2ab+_2cd, a2-b2-c2+d2);\n\n\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n/**********************************************************/\n\nvec2 map(vec3 p, vec2 uv){\n\n\n   \n    vec2 d=vec2(0.0);\n    float pl = dot(p, vec3(0.0, 1.0, 0.0));\n    \n    pl -= Noise3D(p)*0.5;\n    \n    \n     \n      \n       d.x = pl;\n       d.y = 2.0;\n       \n       \n       \n       \n    return d;\n    \n    \n}\n\nvec3 RayMarch(vec3 eye, vec3 viewRayDirection, vec2 uv){\n    vec3 t = vec3(0.);\n    float max = -100000.0;\n    vec2 dd;\n    float depth = 0.0, end = 10.0;\n    for (int i = 0; i < 100; i++) {\n        t.yz = map(eye + t.x * viewRayDirection, uv).xy;\n        \n                    \n        if (abs(t.y) < (t.y*0.01))break;\n                \n        t.x += t.y;\n        \n        if (t.x >= 200.0)break;\n        \n    }\n    if (t.x >= 200.0)t.x = -1.0;\n    \n    return t;\n\n\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos , vec2(1.0)).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\nvec3 GetLightM(vec3 p, vec2 uv, vec3 lg, out vec3 n, vec3 ro, vec3 rd){\n    vec3 lightpos = lg;\n    lightpos.xz += vec2(sin(iTime), cos(iTime));\n    vec3 l = normalize(lightpos-p);\n    \n    vec2 d = map(p, uv);\n    vec2 e = vec2(0.01, 0);\n    \n    n = d.x - vec3(\n        map(p-e.xyy, uv).x,\n        map(p-e.yxy, uv).x,\n        map(p-e.yyx, uv).x);\n    \n    \n    n = normalize(n);\n   \n    float occ = calcAO(p, n);       \n    float dif = clamp(dot(n, l), .0, 1.);\n    dif += occ;\n    //dif *= calcSoftshadow(p, lightpos, 0.01, 100. );\n \n    vec3 dd = RayMarch(p+n*.01, l, uv);\n    p = ro + reflect(n, l) * dd.x;\n    \n         \n    if((dd.x < length(lightpos-p)) && (dd.x > 0.0)){\n        if(dd.z == 2.0)\n        {\n             \n             return vec3(dif);\n        }\n        else if(dd.z == 3.0)\n        {\n             return vec3(dif) * vec3(1.0, 0.0, 0.0)*0.4;\n        }\n        else if(dd.z == 4.0)\n        {\n             return vec3(dif)* vec3(1.0, 0.3, 0.0)*0.4;;\n        }\n        else\n            return vec3(dif)*0.2;\n            \n     }\n     else\n         return vec3(dif);\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= 0.5;\n    uv /= vec2(iResolution.y / iResolution.x, 1);\n    \n    vec3 t;\n     \n     vec3 p;\n     vec3 ro = vec3(-25.5, 10.0, -40.0);\n     vec3  rd = normalize(vec3(0.0, 1.0, 1.0));\n     vec3 lightpos = vec3(0.0, 50., -60.);\n     \n     t = RayMarch(ro, rd, uv);\n     p = ro + rd * t.x;\n     \n     vec3 n1, n2, n3, np;\n  \n   vec3 diff2 = GetLightM(p, uv, lightpos, n1, ro, rd);\n    \n    vec3 col = vec3(0.5);\n    col *= diff2*0.2;\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}