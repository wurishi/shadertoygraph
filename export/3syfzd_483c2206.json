{"ver":"0.1","info":{"id":"3syfzd","date":"1607698441","viewed":264,"name":"loop_color_noise","username":"Optie","description":"study of fbm + domain transform, loop in 6 sec.\nreference\n- https://thebookofshaders.com/13/\n - https://iquilezles.org/articles/warp/warp.htm","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["noise"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 random3(vec3 st){\n    mat3 A = mat3(\n        vec3(127.1, 251.1, 311.2),\n        vec3(134.3, 321.5, 231.5),\n        vec3(227.2, 141.3, 151.6)\n    );\n\n    st = A * st;\n    return 2.0 * fract(sin(st) * 43758.0) - 1.0;\n}\n\n\n#define L 3.0\nfloat dotRandOffset(in vec3 i, vec3 f, vec3 pos) {\n    i += pos;\n    i = vec3(i.xy, mod(i.z, L));\n    return dot( random3(i), f - pos );\n}\n\nfloat noise(vec3 st) {\n    vec3 i = floor(st);\n    vec3 f = fract(st);\n    \n    // Polynomial Interpolation\n    vec3 u = f * f * (3.0 - 2.0 * f);\n    u = f * f * f * (f * (6.0 * f - 15.0) + 10.0);\n\n    return mix( mix( mix( dotRandOffset(i, f, vec3(0.0, 0.0, 0.0)),\n                          dotRandOffset(i, f, vec3(1.0, 0.0, 0.0)), u.x),\n                     mix( dotRandOffset(i, f, vec3(0.0, 1.0, 0.0)),\n                          dotRandOffset(i, f, vec3(1.0, 1.0, 0.0)), u.x), u.y),\n                mix( mix( dotRandOffset(i, f, vec3(0.0, 0.0, 1.0)),\n                          dotRandOffset(i, f, vec3(1.0, 0.0, 1.0)), u.x),\n                     mix( dotRandOffset(i, f, vec3(0.0, 1.0, 1.0)),\n                          dotRandOffset(i, f, vec3(1.0, 1.0, 1.0)), u.x), u.y), u.z);\n}\n\n#define OCTAVES 8\nfloat fBM(in vec3 st) {\n    float value = 0.0;\n    float amplitude = 0.5;\n\n    for (int i = 0; i < OCTAVES; i++) {\n        st += vec3(0.0, 0.0, 0.0);\n        value += amplitude * noise(st);\n        st *= vec3(2.0, 2.0, 1.0);\n        amplitude *= 0.5;\n    }\n    return value;\n}\n\nvec3 distort3D(in vec3 p, mat3 A){\n    return vec3(\n            fBM(p + A[0]),\n            fBM(p + A[1]),\n            fBM(p + A[2])\n            );\n}\n\nfloat pattern(in vec3 p, out vec3 r, out vec3 s, out vec3 t) {\n    float v = .0;\n    mat3 A = mat3(\n        vec3(5.1, -2.4, 4.0),\n        vec3(1.0, 1.4, -12.0),\n        vec3(22.0, 111.0, 1.0)\n    );\n    mat3 B = mat3(\n        vec3(-10.0, 0.0, 2.0),\n        vec3(-8.1, 20.4, 1.0),\n        vec3(2.6, 3.0, 0.2)\n    );\n\n    r = distort3D(p, B);\n    s = distort3D(r * 2.5 + p, A);\n    t = distort3D(s * 2.0 - r + p, B);\n\n    v = fBM(t * 2.0 + r + s + p);\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.x;\n    vec3 uvw = vec3(uv * 4.0, iTime * .5);\n\n    vec3 r = vec3(0.0);\n    vec3 s = vec3(0.0);\n    vec3 t = vec3(0.0);\n\n    float v = pattern(uvw, r, s, t);\n\n    vec3 col = vec3(mix(s, t, v))*1.3+0.4;\n\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}