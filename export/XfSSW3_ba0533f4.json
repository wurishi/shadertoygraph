{"ver":"0.1","info":{"id":"XfSSW3","date":"1707292272","viewed":57,"name":"Mathematical Flower Patterns","username":"sujay","description":"Implementing mathematical flower patterns from https://www.asc.ohio-state.edu/orban.14/stemcoding/flower/flower.html using shaders\n\n","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["flowers"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define ZOOM 1.0\n#define SPEED 3.0\n#define PI 3.141592\n\n\nfloat drawFlower(float n, float d, float rmax, float theta, vec2 uv)\n{\n    float r = rmax * cos((n/d) * theta);\n    float x = r * cos(theta);\n    float y = r * sin(theta);\n    \n    float k = smoothstep(1.,0., distance(uv, vec2(x,y))*100.);\n    return k;\n}\n\nmat2 rotationMatrix(float angle)\n{\n\tangle *= PI / 180.0;\n    float sine = sin(angle), cosine = cos(angle);\n    return mat2( cosine, -sine, \n                 sine,    cosine );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // create pixel coordinates\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ab = uv;\n    uv = (2.*fragCoord - iResolution.xy) / iResolution.y;\n    \n    // Rotate the UV space if needed\n    uv *= rotationMatrix( SPEED * iTime ) * ZOOM;\n    \n    float dist = sqrt(uv.x*uv.x + uv.y*uv.y);\n    float theta = atan(uv.y, uv.x);\n    float k = 0.;\n    // Control the radius of the flower\n    float rmax = .9;\n    // Flower patterns\n    float n = 6.;\n    float d = 5.;\n    int iterations = 14;\n    \n    for (int i = 0; i<iterations; i++)\n    {\n        k += drawFlower(n, d, rmax, theta + float(i)*PI, uv);\n    }\n    fragColor = vec4(0,k,0,1.0);\n}","name":"Image","description":"","type":"image"}]}