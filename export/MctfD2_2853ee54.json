{"ver":"0.1","info":{"id":"MctfD2","date":"1733517273","viewed":144,"name":"Jija","username":"juk","description":"2d, fractal, bump","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["2d","fractal","bump"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Fork of \"Glitter Bomb\" by zackpudil. https://shadertoy.com/view/Xl3XWS\n// 2024-12-06 20:31:39\n\nvec3 formula(vec2 p) {\n\treturn texture(iChannel0, p).rgb;\n}\n\nvec3 gs = vec3(0.21, 0.72, 0.07);\n\nvec3 bump(vec2 p, float e) {\n\tvec2 h = vec2(e, 0.0);\n\tmat3 m = mat3(\n\t\tformula(p + h) - formula(p - h),\n\t\tformula(p + h.yx) - formula(p - h.yx),\n\t\t-0.3*gs);\n\t\n\tvec3 g = (gs*m)/e;\n\t\n\treturn normalize(g);\n}\n\nfloat edge(vec2 p, float e) {\n\tvec2 h = vec2(e, 0.0);\n\tfloat d = dot(gs, formula(p));\n\tvec3 n1 = gs*mat3(formula(p + h.xy), formula(p + h.yx), vec3(0));\n\tvec3 n2 = gs*mat3(formula(p - h.xy), formula(p - h.yx), vec3(0));\n\t\n\tvec3 vv = abs(d - 0.5*(n1 + n2));\n\tfloat v = min(1.0, pow(vv.x+vv.y+vv.z, 0.55)*1.0);\n\t\n\treturn v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n    vec2 p = fragCoord.xy / iResolution.xy;\n\n\t\n\tvec3 rd = normalize(vec3(p, 1.0));\n\t\n\tvec3 sn = bump(p, 0.01);\n\tvec3 re = reflect(rd, sn);\n\tvec3 col = vec3(0);\n\t\n\tcol += 0.5*clamp(dot(-rd,sn), 0.0, 1.0);\n\tcol += 0.8*pow(clamp(1.0 + dot(rd, sn), 0.0, 1.0), 8.0);\n\tcol *= formula(p);\n\tcol += pow(clamp(dot(-rd, re), 0.0, 1.0), 8.0)*(8.0*formula(p));\n    \n    col *= edge(p, 0.01);\n\t\n    col = \n\tcol = pow(col, vec3(1.0/2.2));\n\tfragColor = vec4(col, 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec3 palette( float t ) {\n    vec3 a = vec3(0.5, 0.5, 0.5);\n    vec3 b = vec3(0.5, 0.5, 0.5);\n    vec3 c = vec3(1.0, 1.0, 1.0);\n    vec3 d = vec3(0.00, 10.10, 0.20);\n\n    return a + b*cos( (sin(t)+6.28318)*(c*t+d) );\n}\n\nvec2 barrelDistortion(vec2 coord, float amt) {\n\tvec2 cc = (coord - 0.5);\n\tfloat dist = dot(cc, cc);\n\treturn coord + cc * (dist) * amt;\n}\n\n\nmat2 rot(float a) {return mat2(cos(a),sin(a),-sin(a),cos(a));}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float fft  = texelFetch( iChannel1, ivec2(0.1, 0.1), 0 ).x;\n    float speed = -0.5;\n    float t=iTime*speed;\n    \n\n    float aspect = iResolution.x / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    uv = barrelDistortion(uv, sin(t));\n    vec2 _uv = uv;\n    uv -= 0.5;\n    uv.x *= aspect;\n    \n\n    // warp and turn\n    float scale = 1.2726;   //7.//5.41//3.5;//2.545;//1.91;//1.2726;//.6365;\n    uv *= 0.5*sin(t*0.1)*rot(1.*sin(t+mix(log(length(uv)),length(uv), sin(t))));\n    uv *= rot(.5*t+length(uv));\n    uv = sin(t*0.1)*vec2(log(length(uv)+0.25*(0.5+sin(t)*0.5)), atan(uv.y, uv.x))*scale;\n    uv.x -= 0.5*t;\n\n\n    uv = fract(uv)-0.5;\n\n\n    vec2 uv0 = uv;\n    vec3 finalColor = vec3(0.0);\n\n    for (float i = 0.0; i < 3.0; i++) {\n    \n\n    uv *= 0.5*sin(t*0.1)*rot(1.*sin(t+mix(log(length(uv)),length(uv), sin(t))));\n    uv *= rot(.5*t+length(uv));\n    uv = sin(t*0.1)*vec2(log(length(uv)+0.25*(0.5+sin(t)*0.5)), atan(uv.y, uv.x))*scale;\n    uv.x -= 0.5*t;\n\n\n    uv = fract(uv)-0.5;\n\n\n        float d = pow(length(uv0),i+(1.+sin(0.5*t))) * exp(length(uv));\n\n        vec3 col = palette(length(uv0)+i+t*0.2);\n\n        d = sin(d*32. - t)/32. - 0.05;\n        \n        \n        if(d != 0.0){\n            d = abs(d);\n            d = pow(0.01/ d, 0.9);\n        }\n\n\n        finalColor += col * d;\n    }\n\n    fragColor = vec4(finalColor.rgb, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}