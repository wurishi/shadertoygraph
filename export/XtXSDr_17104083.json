{"ver":"0.1","info":{"id":"XtXSDr","date":"1435685084","viewed":519,"name":"2D Normal Mapping Spheres v2","username":"BigotedSJW","description":"Blatant ripoff of https://www.shadertoy.com/view/ldjXzV\nBut with a point light; \n\nanyways thanks mAlk, yours looks so much better\nedit 7/31/2017: softened the specular, removed unused eye vector, removed ambient color (\"shading\"), added a bit of gamma","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["2d","normal","point"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsfGzn","filepath":"/media/a/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","previewfilepath":"/media/ap/585f9546c092f53ded45332b343144396c0b2d70d9965f585ebc172080d8aa58.jpg","type":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGzn","filepath":"/media/a/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","previewfilepath":"/media/ap/793a105653fbdadabdc1325ca08675e1ce48ae5f12e37973829c87bea4be3232.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    //Spheres\n    vec2 uv = fragCoord.xy / iResolution.yy;\n    \n    const vec2[4] positions = vec2[]( vec2(3.5,2.75),\tvec2(1.5,1.5),\tvec2(5.0,1.5), vec2(5.0,1.25));\n    const float[4] sizes = float[](4.0,5.0,3.5,6.5);\n    \n    //since glsl unrolls loops, this could have been a loop\n    float s1 = 1.0-clamp(dot(uv*sizes[0]-positions[0],uv*sizes[0]-positions[0]),0.0,1.0);\n    float s2 = 1.0-clamp(dot(uv*sizes[1]-positions[1],uv*sizes[1]-positions[1]),0.0,1.0);\n    float s3 = 1.0-clamp(dot(uv*sizes[2]-positions[2],uv*sizes[2]-positions[2]),0.0,1.0);;\n    float s4 = 1.0-clamp(dot(uv*sizes[3]-positions[3],uv*sizes[3]-positions[3]),0.0,1.0);\n    \n    float sph = s1/0.21+s2/0.26+s3/0.18+s4/0.34;\n    float spm = clamp((s1+s2+s3+s4)*32.0,0.0,1.0);\n    \n    \n    //Normals\n    float dx = dFdx(sph)*iResolution.x/80.0*spm;\n    float dy = dFdy(sph)*iResolution.x/80.0*spm;\n    vec3 vNormal = normalize(vec3(dx,dy,sqrt(clamp(1.0-dx*dx-dy*dy,0.0,1.0))));\n    \n    \n    //Shading\n//    vec3 bcol = vec3(0.2,0.2,0.2);\n    \n    //vec3 vLight = normalize(vec3(iResolution.xy-iMouse.xy,48.0)-vec3(iResolution.xy/2.0,0.0));\n    \n    //only bit I altered\n    vec2 mouse = (iMouse.xy)/(iResolution.yy);  //mouse in camera space coords (0,0 to 1,1)  \n    vec3 vLight = normalize(vec3(uv-mouse,0.5));        \n//    vec3 vEye = vec3(0.0,0.0,1.0);\n\n    //little experiement with what I think is environment mapping\n//\tvec3 cubeRay = vNormal + vec3(uv-vec2(0.5,0.5),0.25);\n//  vec4 reflection = texture(iChannel0,reflect(vec3(0.0,0.0,0.25),cubeRay));\n//\tvec4 refraction = texture(iChannel1,cubeRay);\n    \n    float sh = clamp(dot(vNormal,vLight),0.0,1.0);\n    vec3 sp = 0.75* pow(clamp(dot(vLight,reflect(vec3(0.0,0.0,-1.0),vNormal)),0.0,1.0),15.0) * vec3(0.5,0.5,0.6) /*+ refraction.xyz*/;\n    vec3 fcol = vec3(0.4,0.4,0.35)*sh+sp*spm;\n    fcol = pow(fcol /**reflection.xyz*/,vec3(0.45)); //gamma correction?\n    fragColor = vec4(fcol,1.0);\n}","name":"Image","description":"","type":"image"}]}