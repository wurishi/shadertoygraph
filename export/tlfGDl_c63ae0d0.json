{"ver":"0.1","info":{"id":"tlfGDl","date":"1558097202","viewed":727,"name":"FM synth test","username":"TekF","description":"Just exploring different wave forms and some frequency modulation to make it growl.","likes":22,"published":3,"flags":8,"usePreview":0,"tags":["synth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\n\n ^\n/|\\\n |\n |        .--------.\nSwitch to |Common  |\n\n\nthis is just the music visualiser\n\n*/\n\n\nconst bool lineGraph = false;\n\n\n\nvoid DrawDial( inout vec3 col, in vec2 uv, float val, int label[20], int labelLength )\n{\n    vec3 lineCol = lineGraph ? vec3(0) : vec3(1);\n    \n    // draw dial\n    col = mix( col, lineCol, smoothstep( 1.4, 0., abs(length(uv)-20.) ) );\n\n    float angle = (val*.75+.125)*6.283185;\n    vec2 dotuv = uv - 15.*vec2(-sin(angle),-cos(angle));\n    col = mix( col, lineCol, smoothstep( 1.4, 0., length(dotuv)-2. ) );\n    \n    col = mix( col, lineCol, smoothstep( 1.4, 0., abs( length(uv-vec2(-19,-19))-1.6 ) ) );\n    col = mix( col, lineCol, smoothstep( 1.4, 0., length(uv-vec2(19,-19))-1.6 ) );\n    \n    // draw label\n    float l = float(labelLength);\n    vec2 dim = vec2(4,8); // dimensions of a letter\n    vec2 textuv; // index in whole characters\n    textuv.y = (uv.y - 25.)/dim.y;\n    textuv.x = (uv.x/(l*dim.x) + .5);\n    if ( min(textuv.x,textuv.y) < 0. || max(textuv.x,textuv.y) > 1. ) return;\n\ttextuv.x *= l;\n    int char = int(floor(textuv.x));\n    char = label[char];\n    \n    char = char^0xf0; // flip the y coord\n    vec2 fontuv = ( vec2( char&15, char>>4 ) + .5 ) / 16.;\n\n    vec2 charuv = (fract(textuv)-.5)*vec2(.35,.7)/16.;\n    \n    vec4 font = texture( iChannel0, fontuv + charuv );\n    \n    col = mix( col, lineCol, font.x );\n}\n\n\nvoid mainImage( out vec4 fragColour, in vec2 fragCoord )\n{\n    // quantize time to an cofactor of the base note and the FM note\n    float quantizeNote = baseNote+fmNote; // there may be higher freqs that would work, but this is definitely a cofactor\n    float quantizeFreq = 440.*exp2( quantizeNote/12. );\n    //^ this maths is wrong because the wave is still moving, and moves more with different fmNotes\n    \n    // anti-alias the wave\n    const int aaCount = 32;\n    for ( int i=0; i < aaCount; i++ )\n    {\n\t\tconst vec2 quasirand2 = vec2(.754877666247,.569840290998); // from http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\n        \n        vec2 uv = fragCoord + (fract(quasirand2*float(i))-.5)*(lineGraph?2.:1.);\n        \n\t    float time = .5*(60./440.)*(uv.x/iResolution.x - .5) + floor(iTime*quantizeFreq)/quantizeFreq;\n        \n\t    fragColour += step( mainSound( in int samp,time).xyyy, vec4( ((uv.y/iResolution.y)*2.-1.)*1. ) );\n    }\n    fragColour /= float(aaCount);\n    \n    if ( lineGraph )\n    {\n\t    // omg, if I double the AA region and do this I get a really nice line graph!!\n        fragColour = abs(fragColour-.5)*2.;\n    }\n\n    \n    // draw dials\n\tParams params = GetParams( iTime );\n    \n    DrawDial( fragColour.rgb, fragCoord-vec2(30,30), params.softness, int[]( 0x53, 0x71, 0x75, 0x61, 0x72, 0x65, 0x2f, 0x53, 0x69, 0x6e, 0x65,0,0,0,0,0,0,0,0,0 ), 11 );\n    DrawDial( fragColour.rgb, fragCoord-vec2(100,30), params.pulseWidth, int[]( 0x50, 0x75, 0x6c, 0x73, 0x65, 0x20, 0x57, 0x69, 0x64, 0x74, 0x68,0,0,0,0,0,0,0,0,0 ), 11 );\n    DrawDial( fragColour.rgb, fragCoord-vec2(170,30), params.fmAmp, int[]( 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e ), 20 );\n    \n    fragColour = pow( fragColour, vec4(1./2.2) );\n}\n","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"const bool pulse = false;\n\nconst float baseNote = -24.; // in semitones from middle a. 1 octave = 12 notes\nconst float fmNote = baseNote+5.; // use a relative pitch 5 semitones up from base note\n\nstruct Params\n{\n    float softness;\n    float pulseWidth;\n    float fmAmp;\n};\n\n\nParams GetParams( float time )\n{\n    Params params;\n    \n    // show off each effect in turn\n    params.softness = smoothstep(.707,-1.,cos(time));\n    params.pulseWidth = mix( .05, 1., smoothstep(-.5,.5,sin(time*.618)) );\n    params.fmAmp = smoothstep(-.5,.5,-sin(time*.618*.618));\n    \n    return params;\n}\n\nvec2 mainSound( in int samp, float time )\n{\n    Params params = GetParams(time);\n    \n    float freq = 440.*exp2(baseNote/12.);\n\n\t// experiment with a bit of FM\n    float fmFreq = 440.*exp2(fmNote/12.);\n\ttime += sin(time*6.283185*fmFreq)*params.fmAmp/500.;\n    \n    float saw = fract(time*freq);\n    float triangle = abs(saw-.5)/.5;\n\n    float f = smoothstep(\n                clamp(params.pulseWidth-params.softness,0.,2.),\n                clamp(params.pulseWidth+params.softness,0.,2.),\n                triangle*2.\n            )*2.-1.;\n\n\tif ( pulse )\n    {\n    \tfloat t = fract(time*120./60.);\n\t\tf *= smoothstep( 0., 1., t/.02 ) * exp2(-t/.2); // attack & decay\n    }\n        \n    return vec2(f) *.4;\n}","name":"Common","description":"","type":"common"},{"inputs":[],"outputs":[],"code":"/*\n\n ^\n/|\\\n |\n |        .--------.\nSwitch to |Common  |\n\nThis is empty\n\n*/","name":"Sound","description":"","type":"sound"}]}