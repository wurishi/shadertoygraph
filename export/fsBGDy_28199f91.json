{"ver":"0.1","info":{"id":"fsBGDy","date":"1617869937","viewed":83,"name":"Noise UV Mapping - CIS461","username":"onlyname","description":"Noise animated over time and UV mapped onto objects.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["noise","raymarch","uv"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"const int RAY_STEPS = 256;\nconst float HALF_PI = 3.14159 * 0.5;\nconst float PI = 3.14159;\nconst float DEG_TO_RAD = 3.14159 / 180.0;\n// FBM\nconst float PERSISTENCE = 0.5;\nconst int OCTAVES = 4;\n\nstruct Intersection\n{\n    float t;\n    vec3 color;\n    vec3 p;\n    int object;\n};\n\n/// Colors ///\n// by IQ\nvec3 palette(in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d)\n{\n    return a + b*cos(6.28318*(c*t+d));\n}\n\nvec3 pal1(in float t)\n{\n    return palette(t,vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.00,0.15,0.20));\n}\n\nvec3 pal2(in float t)\n{\n    float c = sin(iTime);\n    return palette(t,vec3(0.3,0.2,0.8),vec3(0.0,0.5,0.5),vec3(2.0,1.0,1.0),c * vec3(0.3,0.33,0.37));\n}\n\nvec3 pal3(in float t)\n{\n    float c = sin(iTime);\n    float c2 = cos(iTime);\n    return palette(t,vec3(0.4,0.4,0.3),vec3(0.5,0.5,0.5),c2 * vec3(2.0,2.0,2.0),c * vec3(0.3,0.33,0.37));\n}\n//////////////\n\nfloat noise2D(vec2 p) \n{\n    return fract(sin(dot(p, vec2(127.1, 311.7))) * 43758.5453);\n}\n\nvec2 random2(vec2 p)\n{\n    return fract(sin(vec2(dot(p, vec2(127.1, 311.7)),\n                 dot(p, vec2(269.5,183.3))))\n                 * 43758.5453);\n}\n\nvec3 random3(vec3 p) \n{\n    return fract(sin(vec3(dot(p,vec3(127.1, 311.7, 523.1)),\n                          dot(p,vec3(269.5, 183.3, 480.5)),\n                          dot(p, vec3(420.6, 631.2, 138.4))\n                    )) * 43758.5453);\n}\n\nfloat interpNoise2D(float x, float y) \n{\n    int intX = int(floor(x));\n    float fractX = fract(x);\n    int intY = int(floor(y));\n    float fractY = fract(y);\n\n    float v1 = noise2D(vec2(intX, intY));\n    float v2 = noise2D(vec2(intX + 1, intY));\n    float v3 = noise2D(vec2(intX, intY + 1));\n    float v4 = noise2D(vec2(intX + 1, intY + 1));\n\n    float i1 = mix(v1, v2, fractX);\n    float i2 = mix(v3, v4, fractX);\n    return mix(i1, i2, fractY);\n}\n\n\nfloat fbm(vec2 uv)\n{\n    float total = 0.0;\n    \n    for(int i = 0; i <= OCTAVES; i++)\n    {\n        float freq = pow(2.f, float(i));\n        float amp = pow(PERSISTENCE, float(i));\n\n        total += interpNoise2D(uv.x * freq, uv.y * freq) * amp;\n    }\n    return total;\n}\n\nfloat worleyNoise(vec2 uv) {\n    uv *= 1.0;\n    //uv *= (sin(iTime) / 2.0 + 1.0);\n    vec2 uvInt = floor(uv);\n    vec2 uvFract = fract(uv);\n    float minDist = 5.0; // Minimum distance initialized to max.\n    for(int y = -1; y <= 1; ++y) {\n        for(int x = -1; x <= 1; ++x) {\n            vec2 neighbor = vec2(float(x), float(y)); // Direction in which neighbor cell lies\n            vec2 point = random2(uvInt + neighbor); // Get the Voronoi centerpoint for the neighboring cell\n            point = 0.5 + 0.5 * cos(iTime) * cos(iTime * point); // animate point\n            vec2 diff = neighbor + point - uvFract; // Distance between fragment coord and neighborâ€™s Voronoi point\n            float dist = length(diff);\n            minDist = min(minDist, dist);\n        }\n    }\n    return minDist;\n}\n\nfloat surflet(vec3 p, vec3 gridPoint) {\n    // Compute the distance between p and the grid point along each axis, and warp it with a\n    // quintic function so we can smooth our cells\n    vec3 t2 = abs(p - gridPoint);\n    vec3 t = vec3(1.0) - 6.0 * pow(t2, vec3(5.0)) + 15.0 * pow(t2, vec3(4.0)) - 10.0 * pow(t2, vec3(3.0));\n    // Get the random vector for the grid point (assume we wrote a function random2\n    // that returns a vec2 in the range [0, 1])\n    vec3 gradient = random3(gridPoint) * 2. - vec3(1., 1., 1.);\n    // Get the vector from the grid point to P\n    vec3 diff = p - gridPoint;\n    // Get the value of our height field by dotting grid->P with our gradient\n    float height = dot(diff, gradient);\n    // Scale our height field (i.e. reduce it) by our polynomial falloff function\n    return height * t.x * t.y * t.z;\n}\n\nfloat perlinNoise3D(vec3 p)\n{\n\tfloat surfletSum = 0.f;\n\t// Iterate over the four integer corners surrounding uv\n\tfor(int dx = 0; dx <= 1; ++dx) {\n\t\tfor(int dy = 0; dy <= 1; ++dy) {\n\t\t\tfor(int dz = 0; dz <= 1; ++dz) {\n\t\t\t\tsurfletSum += surflet(p, floor(p) + vec3(dx, dy, dz));\n\t\t\t}\n\t\t}\n\t}\n\treturn surfletSum;\n}\n\n\nvec2 sphereMap(vec3 p, float r, vec3 c)\n{\n    // convert p to unit space\n    vec3 pC = (p - c) / r;\n    float u = (atan(pC.x, pC.z) + PI) / (2.0 * PI);\n    float v = (pC.y + 1.0) / 2.0;\n    return vec2(u, v);\n}\n\nvec3 rotateX(vec3 p, float a) {\n    return vec3(p.x, cos(a) * p.y - sin(a) * p.z, sin(p.y) + cos(p.z));\n}\n\nvec3 rotateY(vec3 p, float a) {\n    return vec3(cos(a) * p.x + sin(a) * p.z, p.y, -sin(a) * p.x + cos(a) * p.z);\n}\n\nvoid raycast(vec2 uv, out vec3 dir, out vec3 eye, out vec3 ref) {\n    eye = vec3(0.0, 4, -18.0);\n    ref = vec3(0.0, 2.5, 0.0);\n    \n    float len = tan(3.14159 * 0.125) * distance(eye, ref);\n    vec3 H = normalize(cross(vec3(0.0, 1.0, 0.0), ref - eye));\n    vec3 V = normalize(cross(H, eye - ref));\n    V *= len;\n    H *= len * iResolution.x / iResolution.y;\n    vec3 p = ref + uv.x * H + uv.y * V;\n    dir = normalize(p - eye);\n}\n\nfloat sphere(vec3 p, float r, vec3 c)\n{\n    return distance(p, c) - r;\n}\n\nfloat torus(vec3 p, vec2 t)\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q) - t.y;\n}\n\nfloat cone(vec3 p, vec2 c)\n{\n    // c must be normalized\n    float q = length(p.xy);\n    return dot(c,vec2(q,p.z));\n}\n\n// Box with side lengths b\nfloat box(vec3 p, vec3 b)\n{\n  return length(max(abs(p) - b, 0.0));\n}\n\nfloat plane( vec3 p, vec4 n )\n{\n  // n must be normalized\n  return dot(p,n.xyz) + n.w;\n}\n\n#define BACK_WALL plane(pos, vec4(0.0, 0.0, -1.0, 5.0))\n#define LEFT_WALL plane(pos, vec4(1.0, 0.0, 0.0, 5.0))\n#define RIGHT_WALL plane(pos, vec4(-1.0, 0.0, 0.0, 5.0))\n#define CEILING plane(pos, vec4(0.0, -1.0, 0.0, 7.5))\n#define FLOOR plane(pos, vec4(0.0, 1.0, 0.0, 2.5))\n#define TALL_CUBE box(rotateY(pos + vec3(2.3, 0.0, -2.0), 27.5 * DEG_TO_RAD), 0.5 * vec3(3.0, 6.0, 3.0))\n#define SPHERE sphere(pos, 2.5, vec3(3.25, 1.0, 0.0))\n\n#define BACK_WALL_NUM 0\n#define LEFT_WALL_NUM 1\n#define RIGHT_WALL_NUM 2\n#define CEILING_NUM 3\n#define FLOOR_NUM 4\n#define TALL_CUBE_NUM 5\n#define SPHERE_NUM 6\n#define SPHERE_RADIUS 2.5\n#define SPHERE_CENTER rotateY(vec3(3.25, 1.0, 0.0), 100.0 * DEG_TO_RAD)\n\nfloat sceneMap3D(vec3 pos, vec3 lightPos)\n{\n    float t = BACK_WALL;\n    t = min(t, LEFT_WALL);\n    t = min(t, RIGHT_WALL);\n    t = min(t, CEILING);\n    t = min(t, FLOOR);\n    t = min(t, TALL_CUBE);\n    t = min(t, SPHERE);\n    return t;\n}\n\nvoid sceneMap3D(vec3 pos, out float t, out int obj, vec3 lightPos)\n{\n    t = BACK_WALL;\n    float t2;\n    obj = BACK_WALL_NUM;\n    if((t2 = LEFT_WALL) < t) {\n        t = t2;\n        obj = LEFT_WALL_NUM;\n    }\n    if((t2 = RIGHT_WALL) < t) {\n        t = t2;\n        obj = RIGHT_WALL_NUM;\n    }\n    if((t2 = CEILING) < t) {\n        t = t2;\n        obj = CEILING_NUM;\n    }\n    if((t2 = FLOOR) < t) {\n        t = t2;\n        obj = FLOOR_NUM;\n    }\n    if((t2 = TALL_CUBE) < t) {\n        t = t2;\n        obj = TALL_CUBE_NUM;\n    }\n    if((t2 = SPHERE) < t) {\n        t = t2;\n        obj = SPHERE_NUM;\n    }\n}\n\nvoid march(vec3 origin, vec3 dir, out float t, out int hitObj, vec3 lightPos)\n{\n    t = 0.001;\n    for(int i = 0; i < RAY_STEPS; ++i)\n    {\n        vec3 pos = origin + t * dir;\n    \tfloat m;\n        sceneMap3D(pos, m, hitObj, lightPos);\n        if(m < 0.01)\n        {\n            return;\n        }\n        t += m;\n    }\n    t = -1.0;\n    hitObj = -1;\n}\n\nvec3 computeNormal(vec3 pos, vec3 lightPos)\n{\n    vec3 epsilon = vec3(0.0, 0.001, 0.0);\n    return normalize( vec3( sceneMap3D(pos + epsilon.yxx, lightPos) - sceneMap3D(pos - epsilon.yxx, lightPos),\n                            sceneMap3D(pos + epsilon.xyx, lightPos) - sceneMap3D(pos - epsilon.xyx, lightPos),\n                            sceneMap3D(pos + epsilon.xxy, lightPos) - sceneMap3D(pos - epsilon.xxy, lightPos)));\n}\n\nvec3 computeMaterial(int hitObj, vec3 p, vec3 n, vec3 light, vec3 view) {\n    float lambert = max(0.0, dot(n, light)) + 0.2;\n\n    vec2 uv = vec2(0.0);\n\n    switch(hitObj) {\n        case BACK_WALL_NUM:\n        uv = vec2(p.x, p.y);\n        uv.x = uv.x + 0.5 + 1.2 * sin(iTime);\n        uv.y = uv.y + 0.5 + 1.2 * cos(iTime);\n        return pal2(worleyNoise(uv)) * lambert;\n        break;\n        case CEILING_NUM:\n        return vec3(0.01, 0.15, 0.2) * lambert;\n        break;\n        case FLOOR_NUM:\n        return vec3(0.0, 0.01, 0.25) * lambert;\n        break;\n        case TALL_CUBE_NUM:\n        return pal3(perlinNoise3D((1.5 * sin(iTime) * cos(iTime) + 1.5) * p)) \n                    * lambert; \n        break;\n        case SPHERE_NUM:\n        uv = sphereMap(p, SPHERE_RADIUS, SPHERE_CENTER);\n        uv.x = uv.x + 0.5 + 1.2 * sin(iTime);\n        uv.y = uv.y + 0.5 + 1.2 * cos(iTime);\n        return pal1(fbm(uv)) * lambert;\n        break;\n        case LEFT_WALL_NUM:\n        return vec3(0.2, 0.065, 0.65) * lambert;\n        break;\n        case RIGHT_WALL_NUM:\n        return vec3(0.2, 0.45, 0.71) * lambert;\n        break;\n        case -1:\n        // Background\n        return vec3(0.0);\n        break;\n    }\n    return vec3(1.0);\n}\n\nIntersection sdf3D(vec3 dir, vec3 eye, vec3 lightPos)\n{\n    float t;\n    int hitObj;\n    march(eye, dir, t, hitObj, lightPos);\n\n    vec3 isect = eye + t * dir;\n    vec3 nor = computeNormal(isect, lightPos);\n    vec3 lightDir = normalize(lightPos - isect);\n    \n    vec3 surfaceColor = computeMaterial(hitObj, isect, nor, lightDir, normalize(eye - isect));\n    \n    return Intersection(t, surfaceColor, isect, hitObj);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 lightPos = vec3(0.0, 5.0, -5.0);\n    \n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    // [-1, 1]\n    vec2 uv2 = 2.0 * uv - vec2(1.0);\n    \n    Intersection aaIsects[4];\n    vec3 dir, eye, ref;\n    int idx = 0;\n    for(float i = 0.0; i < 1.0; i += 0.5) {\n        for(float j = 0.0; j < 1.0; j += 0.5) {\n            raycast(uv2 + vec2(i, j) / iResolution.xy, dir, eye, ref);\n            aaIsects[idx++] = sdf3D(dir, eye, lightPos);\n        }\n    }\n    vec3 avgColor = vec3(0.0);\n    for(int i = 0; i < 4; ++i) {\n        avgColor += aaIsects[i].color;\n    }\n    avgColor *= 0.25;\n    fragColor = vec4(avgColor * step(0.0, aaIsects[0].t), 1.0);\n}","name":"Image","description":"","type":"image"}]}