{"ver":"0.1","info":{"id":"mlS3Rm","date":"1673051943","viewed":720,"name":"H-Curve (better than Hilbert?)","username":"MartyMcFly","description":"The H-Curve is a relatively unknown, hamiltonian space filling curve with a better locality property than any other space filling curve including Hilbert and even conjectured to be optimal. Hilbert has sqrt(6), H has 2.","likes":53,"published":1,"flags":0,"usePreview":0,"tags":["hilbert","morton","spacefillingcurve","hcurve"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2023 Pascal Gilcher\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n//\n// Efficient implementation of the H-Curve\n//\n// \"Towards Optimal Locality in Mesh-Indexings\" (1997)\n// Rolf Niedermeier, Klaus Reinhardt and Peter Sanders\n// \n// The H-Curve is a relatively obscure space filling curve with a superior\n// locality property than the Hilbert curve (2 vs sqrt(6)) which is conjectured\n// to be optimal.\n//\n// The original publication source code is completely unintelligible and the only\n// other third party implementation creates the pattern but does not produce indices.\n//\n// ________________________________________________________________________________\n//\n//\n// This algorithm works in 2 steps:\n//\n// 1) construct the basic H shape in a 4x4 grid. As it is cyclic, the start is arbitrary\n//    but I found it convenient having it start at the bottom right. This is the indexing\n//    used at the start (why it doesn't start at the bottom right, see 2))\n//\n//                        2---1    14--13\n//                        |   |    |    |\n//                        3   0----15  12 \n//                        |             |\n//                        4   7----8   11 \n//                        |   |    |    |\n//                        5---6    9---10 \n// 2) for each cascade:\n//\n//        - toroidal wrap to place the start at the bottom right of the current pattern \n//          to make connecting easier\n//        - repeat the pattern 2x2 times\n//        - toroidal wrap for each quadrant so indices 0 and N-1 of the quadrants \n//          that will connect now are adjacent\n//        - connect the blocks by adding 0/1/2/3x n^2\n//\n\n#define LEVELS 12\n/*\nuint H_curve(uvec2 pos, uint logN)\n{\n        pos &= (1u << logN) - 1u;//since it's cycling, I have to make it tileable somehow\n        uint x = pos.x & 3u;\n        uint y = pos.y & 3u;\n        pos >>= 1u;\n        \n        uint i = (x&2u)<<2u|((y^x)&2u)<<1u|(y^(~x<<1u))&2u|(x^y)&1u; //initial D, I mean H  \n        \n        //uint idx = x * 4u + y;        \n        //uint H = 0xBB44B14Eu;        \n        //i = ((H>>(idx&0xEu)+16u)<<2u)|((H>>2u*(idx&7u))&3u);\n      \n        for(uint s = 2u; s < logN; s++)\n        {\n            uint n = 1u << s;\n            uint n2 = n * n;\n\n            //first, shift indices in the base blocks so 0 is at bottom right (when wrapped around)\n            \n            i += (3u * n2) >> 3u; //i %= n*n; //done later again so skip it                       \n            \n            pos >>= 1u;\n            x = pos.x & 1u;\n            y = pos.y & 1u;           \n            \n            uint permute = x ^ y + (y << 1u);                    \n            uint shift   = x ^ y + (x << 1u); \n            \n            //offset indices within each quadrant so start and exit connect\n            i = (i + permute * (n2 >> 2u)) & (n2 - 1u);    \n            //offset indices by block count, i.e. 0123 0123 becomes 0123 4567\n            i += shift * n2;  \n        }\n        return i;\n}\n*/\n\n//optimized\nuint H_curve(uvec2 pos, uint logN)\n{\n        uint N = 1u << logN;\n        \n        pos &= N - 1u;//since it's cycling, I have to make it tileable somehow\n        pos >>= 2u;     \n        \n        uint i = 0u; \n        uvec2 t = uvec2(0);       \n        \n        for(uint n = 4u; n < N * N; n <<= 2u)\n        {   \n            i += (n/8u) * 3u;            \n            i &= n - 1u; \n            i += t.y * n; \n            \n            t = pos & 1u; \n            t = t.x ^ t.y | (t << 1u);\n            \n            i += t.x * n;\n          \n            pos >>= 1u;\n        }\n        return i;\n}\n\n//thanks IQ\nvec3 hsv2rgb(in vec3 c)\n{\n    vec3 rgb=clamp(abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\treturn c.z*mix(vec3(1.0),rgb,c.y);\n}\n\nvec3 gradient(float t) \n{\n    float h = 0.6666 * (1.0 - t*t);\n    float s = 0.75;\n    float v = 1.0 - 0.9*(1.0 - t) * (1.0 - t);\n\treturn hsv2rgb(vec3(h,s,v));    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    uint logN = uint(LEVELS + 2);    \n    uint N = 1u << logN;  \n    \n    vec2 uv = fragCoord / iResolution.xy;\n    uv = uv * 2.0 - 1.0;    \n    \n    float r = max(0.0, 1.0 - dot(uv, uv) * 0.3);   \n    fragColor = vec4(r);   \n     \n     \n    uv.x *= iResolution.x / iResolution.y;\n    uv *= 1.3;\n    \n    float fade = max(abs(uv.x), abs(uv.y)) - 1.0;\n    \n    fragColor *= fade / (0.005 + fade);\n     \n    if(abs(uv.x) < 1.0 && abs(uv.y) < 1.0)\n    {\n        uv = uv * 0.5 + 0.5;\n        uvec2 pos = uvec2(uv * float(N));\n        uint i = H_curve(pos, logN);\n        \n        float t = float(i) / float(N * N);\n        t = fract(-t - iTime * 0.25 + 0.125);\n        fragColor = vec4(gradient(t), 1.0); \n        \n    }  \n  \n}","name":"Image","description":"","type":"image"}]}