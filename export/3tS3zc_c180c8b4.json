{"ver":"0.1","info":{"id":"3tS3zc","date":"1560411996","viewed":379,"name":"Star Polygon - distance","username":"bryanww","description":"Distance to a parameterizable star polygon. Based directly on the work of @iq:  https://www.shadertoy.com/view/MtKcWW (see code comments).","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["2d","distancefield","sdf","star","distance","polygon","starpolygon"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// The MIT License\n// Copyright Â© 2019 Bryan Wagner\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// Distance to a parameterizable star polygon.\n// https://en.wikipedia.org/wiki/Star_polygon\n//\n// This work is a direct iteration on the work of Inigo Quilez:\n// based on N-gon - distance:  https://www.shadertoy.com/view/MtKcWW\n// and Hexagram - distance:    https://www.shadertoy.com/view/tt23RR\n// see the comments here:      https://www.shadertoy.com/view/llVyWW\n// also see:                   https://iquilezles.org/articles/distfunctions2d\n//\n// The insight from the aforementioned comments is that you are manipulating the field around the surface,\n// which is space, so operations may intuitively appear to be in reverse order.\n// To see the effects of each operation, comment out all lines that mutate p, and uncomment them in reverse order.\n//\n// sdRegularStar:  SDF function for regular star polygons.\n// Below, we use the variables (n,d) instead of (p,q) to represent number of convex vertices and density, respectively.\n// Density refers to the number of vertices that should be skipped when connecting convex vertices to one another.\n// Set the defines for N and D below.\n// Note: valid polygons will be such that 2*d < n\n// For fun, try (12,5)\n// For example:\n// Regular Pentagram: (5,2)\n// Regular Hexagram:  (6,2)\n// Regular Octagram:  (8,2)\n// for more, see:  https://math.wikia.org/wiki/Star_polygon#Examples\n//\n// sdStar:  SDF function for a (possibly non-regular) star polygon, defined by its externalAngle.\n// The externalAngle refers to the \"concave\" angle between \"convex tips\" of the convex polygon defined by n.\n// For examples, see:  https://en.wikipedia.org/wiki/Star_polygon#Simple_isotoxal_star_polygons\n\n#define N 5\n#define D 2\n\nconst float PI = 3.14159265359;\nconst float PI_2 = 2.0 * PI;\nconst float DEGREES_TO_RADIANS = PI / 180.0;\nconst float EXTERNAL_ANGLE_N_3 = 150.0 * DEGREES_TO_RADIANS;\nconst float EXTERNAL_ANGLE_N_4 = 135.0 * DEGREES_TO_RADIANS;\n\n// https://en.wikipedia.org/wiki/Star_polygon#Simple_isotoxal_star_polygons\nfloat externalAngle(in int n, in int d) {\n    float internalAngle = PI * float(n - 2 * d) / float(n);  // the angle-radians of the \"convex tip\"\n\n    // The sum of all angles in a convex polygon with 2*n vertices is (2*n-2)*180deg\n    // Since n angles in the star polygon are convex and n angles are concave, we have\n    // n*internalAngle + n*complementAngle = (2*n-2)*180deg\n    // where complementAngle is the complement of the externalAngle we will use to find the \"intersection radius\"\n    // see https://qr.ae/TWhyAC\n    float complementAngle = PI_2 * float(n - 1) / float(n) - internalAngle;  // simplified\n    float externalAngle = PI_2 - complementAngle;\n    return\n        d == 2 && n == 3 ? EXTERNAL_ANGLE_N_3 :  // special cases for polygons with 3 and 4 vertices that make sense\n        d == 2 && n == 4 ? EXTERNAL_ANGLE_N_4 :  // but are not valid (n,d) star polygons\n        externalAngle;\n}\n\n// signed distance to a star polygon with n convex vertices and external angle (i.e. the \"concave\" angle between \"convex tips\")\nfloat sdStar(in vec2 p, in float r, in int n, in float externalAngle) {\n    // these 2 lines can be precomputed\n    float an = 6.2831853 / float(n);\n    float he = r * tan(0.5 * an);  // half-edge\n\n    // rotate to first sector\n    p = -p.yx;  // if you want the corner to be up\n    float bn = an * floor((atan(p.y, p.x) + 0.5 * an) / an);\n    vec2 cs = vec2(cos(bn), sin(bn));\n    p = mat2(cs.x, -cs.y, cs.y, cs.x) * p;\n\n    // flip symmetrically about the x-axis\n    p.y = abs(p.y);\n\n    // create a line SDF from the right-hand \"convex tip\" to the \"concave vertex\" on the x-axis\n    float complementRadius = he / tan(0.5 * externalAngle);\n    float ir = r - complementRadius;  // first, we need to know where the inner \"intersection radius\" is on the x-axis\n    vec2 a = vec2(r, he);\n    vec2 b = vec2(ir, 0.0);\n    vec2 pa = p - a;\n    vec2 ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    vec2 line = pa - ba * h;\n\n    // use the cross product to project the point onto the line, determining the inside from the outside\n    float s = sign(ba.x * pa.y - ba.y * pa.x);\n    return length(line) * s;\n}\n\n// signed distance to a regular star polygon with n convex vertices and d density (i.e. number of convex vertices to skip when connecting)\nfloat sdRegularStar(in vec2 p, in float r, in int n, in int d) {\n    return sdStar(p, r, n, externalAngle(n, d));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;\n    p *= 2.0;\n\n    float d = sdRegularStar(p, 1.0, N, D);\n    //float d = sdStar(p, 1.0, 3, 150.0 * DEGREES_TO_RADIANS);  // {3,30deg}\n    //float d = sdStar(p, 1.0, 6, 90.0 * DEGREES_TO_RADIANS);   // {6,30deg}\n    //float d = sdStar(p, 1.0, 4, 135.0 * DEGREES_TO_RADIANS);  // {4,45deg}\n    //float d = sdStar(p, 1.0, 5, 144.0 * DEGREES_TO_RADIANS);  // {5,72deg}\n\n    vec3 col = vec3(1.0) - sign(d) * vec3(0.1, 0.4, 0.7);\n    col *= 1.0 - exp(-2.0 * abs(d));\n    col *= 0.8 + 0.2 * cos(60.0 * d);\n    col = mix(col, vec3(1.0), 1.0 - smoothstep(0.0, 0.02, abs(d)));\n\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}