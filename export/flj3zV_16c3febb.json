{"ver":"0.1","info":{"id":"flj3zV","date":"1624294775","viewed":166,"name":"working sinisoidal wave function","username":"jhylands","description":"The idea I want to explore is that each wave, from largest to smallest, modifies the coordinate system by which the next wave exists.\nThat would give us a resulting surface flow modification.","likes":3,"published":1,"flags":32,"usePreview":0,"tags":["sea","sun","clouds","fbm","water"],"hasliked":0,"parentid":"Ntj3zV","parentname":"partial___jhylands"},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\tfragColor = texture(iChannel0, uv);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4sf3Rn","filepath":"/media/a/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","previewfilepath":"/media/ap/0a40562379b63dfb89227e6d172f39fdce9022cba76623f1054a2c83d6c0ba5d.png","type":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdXGzr","filepath":"/media/a/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","previewfilepath":"/media/ap/8979352a182bde7c3c651ba2b2f4e0615de819585cc37b7175bcefbca15a6683.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"/*\nReal time PBR Volumetric Clouds by robobo1221.\nSingle scattering\nAlso includes volumetric light.\nhttp://shadertoy.com/user/robobo1221\n\nFirst ever somewhat PBR effect I decided to work on.\nIt uses the same algorithm to calculate the worldPosition as in: https://www.shadertoy.com/view/lstfR7\n\nFeel free to fork and edit it. (Credit me please.)\nHope you enjoy!\n*/\n\n\n#define cloudSpeed 0.02\n#define cloudHeight 3000.0\n#define cloudThickness 1000.0\n#define cloudDensity 0.03\n\n#define fogDensity 0.0001\n\n#define volumetricCloudSteps 32\t\t\t//Higher is a better result with rendering of clouds.\n#define volumetricLightSteps 8\t\t\t//Higher is a better result with rendering of volumetric light.\n\n#define cloudShadowingSteps 12\t\t\t//Higher is a better result with shading on clouds.\n#define volumetricLightShadowSteps 4\t//Higher is a better result with shading on volumetric light from clouds\n\n#define rayleighCoeff (vec3(0.27, 0.5, 1.0) * 1e-5)\t//Not really correct\n#define mieCoeff vec3(0.5e-6)\t\t\t\t\t\t//Not really correct\n\nconst float sunBrightness = 3.0;\n\n#define earthRadius 6371000.0\n\n\n\n///////////////////////////////////////////////////////////////////////////////////\n\n#define d0(x) (abs(x)+ 1e-8 )\n#define d02(x) (abs(x) + 1e-3)\n\nconst vec3 totalCoeff = rayleighCoeff + mieCoeff;\n\nvec3 scatter(vec3 coeff, float depth){\n\treturn coeff * depth;\n}\n\nvec3 absorb(vec3 coeff, float depth){\n\treturn exp2(scatter(coeff, -depth));\n}\n\nfloat calcParticleThickness(float depth){\n   \t\n    depth = depth * 2.0;\n    depth = max(depth + 0.01, 0.01);\n    depth = 1.0 / depth;\n    \n\treturn 100000.0 * depth;   \n}\n\nfloat calcParticleThicknessH(float depth){\n   \t\n    depth = depth * 2.0 + 0.1;\n    depth = max(depth + 0.01, 0.01);\n    depth = 1.0 / depth;\n    \n\treturn 100000.0 * depth;   \n}\n\nfloat calcParticleThicknessConst(const float depth){\n    \n\treturn 100000.0 / max(depth * 2.0 - 0.01, 0.1);   \n}\n\nfloat rayleighPhase(float x){\n\treturn 0.375 * (1.0 + x*x);\n}\n\nfloat hgPhase(float x, float g)\n{\n    float g2 = g*g;\n\treturn 0.25 * ((1.0 - g2) * pow(1.0 + g2 - 2.0*g*x, -1.5));\n}\n\nfloat miePhaseSky(float x, float depth)\n{\n \treturn hgPhase(x, exp2(-0.000003 * depth));\n}\n\nfloat powder(float od)\n{\n\treturn 1.0 - exp2(-od * 2.0);\n}\n\nfloat calculateScatterIntergral(float opticalDepth, float coeff){\n    float a = -coeff * rLOG2;\n    float b = -1.0 / coeff;\n    float c =  1.0 / coeff;\n\n    return exp2(a * opticalDepth) * b + c;\n}\n\nvec3 calculateScatterIntergral(float opticalDepth, vec3 coeff){\n    vec3 a = -coeff * rLOG2;\n    vec3 b = -1.0 / coeff;\n    vec3 c =  1.0 / coeff;\n\n    return exp2(a * opticalDepth) * b + c;\n}\n\n\nvec3 calcAtmosphericScatter(positionStruct pos, out vec3 absorbLight){\n    const float ln2 = log(2.0);\n    \n    float lDotW = dot(pos.sunVector, pos.worldVector);\n    float lDotU = dot(pos.sunVector, vec3(0.0, 1.0, 0.0));\n    float uDotW = dot(vec3(0.0, 1.0, 0.0), pos.worldVector);\n    if(uDotW<0.){\n     uDotW=0.5;\n    }\n    \n\tfloat opticalDepth = calcParticleThickness(uDotW);\n    float opticalDepthLight = calcParticleThickness(lDotU);\n    \n    vec3 scatterView = scatter(totalCoeff, opticalDepth);\n    vec3 absorbView = absorb(totalCoeff, opticalDepth);\n    \n    vec3 scatterLight = scatter(totalCoeff, opticalDepthLight);\n         absorbLight = absorb(totalCoeff, opticalDepthLight);\n    \t \n    vec3 absorbSun =  abs(absorbLight - absorbView) / d0((scatterLight - scatterView) * ln2);\n    \n    vec3 mieScatter = scatter(mieCoeff, opticalDepth) * miePhaseSky(lDotW, opticalDepth);\n    vec3 rayleighScatter = scatter(rayleighCoeff, opticalDepth) * rayleighPhase(lDotW);\n    \n    vec3 scatterSun = mieScatter + rayleighScatter;\n    \n    vec3 sunSpot = smoothstep(0.9999, 0.99993, lDotW) * absorbView * sunBrightness;\n    \n    return (scatterSun * absorbSun + sunSpot) * sunBrightness;\n}\n\nvec3 calcAtmosphericScatterTop(positionStruct pos){\n    const float ln2 = log(2.0);\n    \n    float lDotU = dot(pos.sunVector, vec3(0.0, 1.0, 0.0));\n    \n\tfloat opticalDepth = calcParticleThicknessConst(2.5);\n    float opticalDepthLight = calcParticleThickness(lDotU);\n    \n    vec3 scatterView = scatter(totalCoeff, opticalDepth);\n    vec3 absorbView = absorb(totalCoeff, opticalDepth);\n    \n    vec3 scatterLight = scatter(totalCoeff, opticalDepthLight);\n    vec3 absorbLight = absorb(totalCoeff, opticalDepthLight);\n    \n    vec3 absorbSun = d02(absorbLight - absorbView) / d02((scatterLight - scatterView) * ln2);\n    \n    vec3 mieScatter = scatter(mieCoeff, opticalDepth) * 0.25;\n    vec3 rayleighScatter = scatter(rayleighCoeff, opticalDepth) * 0.375;\n    \n    vec3 scatterSun = mieScatter + rayleighScatter;\n    \n    return (scatterSun * absorbSun) * sunBrightness;\n}\n\nfloat Get3DNoise(vec3 pos) \n{\n    float p = floor(pos.z);\n    float f = pos.z - p;\n    \n    const float invNoiseRes = 1.0 / 64.0;\n    \n    float zStretch = 17.0 * invNoiseRes;\n    \n    vec2 coord = pos.xy * invNoiseRes + (p * zStretch);\n    \n    vec2 noise = vec2(texture(iChannel3, coord).x,\n\t\t\t\t\t  texture(iChannel3, coord + zStretch).x);\n    \n    return mix(noise.x, noise.y, f);\n}\n\nfloat getClouds(vec3 p)\n{\n    p = vec3(p.x, length(p + vec3(0.0, earthRadius, 0.0)) - earthRadius, p.z);\n    \n    if (p.y < cloudMinHeight || p.y > cloudMaxHeight)\n        return 0.0;\n    \n    float time = iTime * cloudSpeed;\n    vec3 movement = vec3(time, 0.0, time);\n    \n    vec3 cloudCoord = (p * 0.001) + movement;\n    \n\tfloat noise = Get3DNoise(cloudCoord) * 0.5;\n    \t  noise += Get3DNoise(cloudCoord * 2.0 + movement) * 0.25;\n    \t  noise += Get3DNoise(cloudCoord * 7.0 - movement) * 0.125;\n    \t  noise += Get3DNoise((cloudCoord + movement) * 16.0) * 0.0625;\n    \n    const float top = 0.004;\n    const float bottom = 0.01;\n    \n    float horizonHeight = p.y - cloudMinHeight;\n    float treshHold = (1.0 - exp2(-bottom * horizonHeight)) * exp2(-top * horizonHeight);\n    \n    float clouds = smoothstep(0.55, 0.6, noise);\n          clouds *= treshHold;\n    \n    return clouds * cloudDensity;\n}\n    \nfloat getCloudShadow(vec3 p, positionStruct pos)\n{\n\tconst int steps = volumetricLightShadowSteps;\n    float rSteps = cloudThickness / float(steps) / abs(pos.sunVector.y);\n    \n    vec3 increment = pos.sunVector * rSteps;\n    vec3 position = pos.sunVector * (cloudMinHeight - p.y) / pos.sunVector.y + p;\n    \n    float transmittance = 0.0;\n    \n    for (int i = 0; i < steps; i++, position += increment)\n    {\n\t\ttransmittance += getClouds(position);\n    }\n    \n    return exp2(-transmittance * rSteps);\n}\n\nfloat getSunVisibility(vec3 p, positionStruct pos)\n{\n\tconst int steps = cloudShadowingSteps;\n    const float rSteps = cloudThickness / float(steps);\n    \n    vec3 increment = pos.sunVector * rSteps;\n    vec3 position = increment * 0.5 + p;\n    \n    float transmittance = 0.0;\n    \n    for (int i = 0; i < steps; i++, position += increment)\n    {\n\t\ttransmittance += getClouds(position);\n    }\n    \n    return exp2(-transmittance * rSteps);\n}\n\nfloat phase2Lobes(float x)\n{\n    const float m = 0.6;\n    const float gm = 0.8;\n    \n\tfloat lobe1 = hgPhase(x, 0.8 * gm);\n    float lobe2 = hgPhase(x, -0.5 * gm);\n    \n    return mix(lobe2, lobe1, m);\n}\n\nvec3 getVolumetricCloudsScattering(float opticalDepth, float phase, vec3 p, vec3 sunColor, vec3 skyLight, positionStruct pos)\n{\n    float intergal = calculateScatterIntergral(opticalDepth, 1.11);\n    \n    float beersPowder = powder(opticalDepth * log(2.0));\n    \n\tvec3 sunlighting = (sunColor * getSunVisibility(p, pos) * beersPowder) * phase * hPi * sunBrightness;\n    vec3 skylighting = skyLight * 0.25 * rPi;\n    \n    return (sunlighting + skylighting) * intergal * pi;\n}\n\nfloat getHeightFogOD(float height)\n{\n\tconst float falloff = 0.001;\n    \n    return exp2(height * falloff) * fogDensity;\n}\n\n\nvec3 calculateVolumetricClouds(positionStruct pos, vec3 color, float dither, vec3 sunColor)\n{\n\tconst int steps = volumetricCloudSteps;\n    const float iSteps = 1.0 / float(steps);\n    \n    //if (pos.worldVector.y < 0.0)\n     //   return color;\n    \n    float bottomSphere = rsi(vec3(0.0, 1.0, 0.0) * earthRadius, pos.worldVector, earthRadius + cloudMinHeight).y;\n    float topSphere = rsi(vec3(0.0, 1.0, 0.0) * earthRadius, pos.worldVector, earthRadius + cloudMaxHeight).y;\n    \n    vec3 startPosition = pos.worldVector * bottomSphere;\n    vec3 endPosition = pos.worldVector * topSphere;\n    \n    vec3 increment = (endPosition - startPosition) * iSteps;\n    vec3 cloudPosition = increment * dither + startPosition;\n    \n    float stepLength = length(increment);\n    \n    vec3 scattering = vec3(0.0);\n    float transmittance = 1.0;\n    \n    float lDotW = dot(pos.sunVector, pos.worldVector);\n    float phase = phase2Lobes(lDotW);\n    \n    vec3 skyLight = calcAtmosphericScatterTop(pos);\n    \n    for (int i = 0; i < steps; i++, cloudPosition += increment)\n    {\n        float opticalDepth = getClouds(cloudPosition) * stepLength;\n        \n        if (opticalDepth <= 0.0)\n            continue;\n        \n\t\tscattering += getVolumetricCloudsScattering(opticalDepth, phase, cloudPosition, sunColor, skyLight, pos) * transmittance;\n        transmittance *= exp2(-opticalDepth);\n    }\n    \n    return mix(color * transmittance + scattering, color, clamp(length(startPosition) * 0.00001, 0.0, 1.0));\n}\n\nvec3 robobo1221Tonemap(vec3 color)\n{\n    #define rTOperator(x) (x / sqrt(x*x+1.0))\n\n    float l = length(color);\n\n    color = mix(color, color * 0.5, l / (l+1.0));\n    color = rTOperator(color);\n\n    return color;\n}\nvec3 getSky(in positionStruct pos )\n{\n    \n    float dither = bayer16(pos.texcoord*iResolution.xy);\n    \n    vec3 lightAbsorb = vec3(0.0);\n\n    vec3 color = vec3(0.0);\n         color = calcAtmosphericScatter(pos, lightAbsorb);\n         color = calculateVolumetricClouds(pos, color, dither, lightAbsorb);\n         color = pow(color, vec3(1.0 / 2.2)); //Fitting to regular colorspace\n         color = robobo1221Tonemap(color);\n    return color;\n}\n\n\nvec3 wv(in vec3 position, vec2 direction, float t, float wavelength)\n{\n    vec2 uv = position.xz;\n    // d should be normalised\n    float distance_in_d = dot(direction, uv);\n    //distance modifier\n    float dm = 40./wavelength; //larger wavelength are more spread out\n    //time modifier\n    float tm = 6.*wavelength; //larger wavelength are faster\n    \n    float adjusted_distance_in_d = (distance_in_d*dm + t*tm)/tau;\n    float change_in_position = 0.01*pi*cos(adjusted_distance_in_d);\n    float adjusted_aplitude = sin((1.-adjusted_distance_in_d)/100.)*sin(adjusted_distance_in_d/10.)+1.;\n    float change_in_height = adjusted_aplitude * sin ( adjusted_distance_in_d  - change_in_position) * 0.01 * wavelength;\n    vec2 position_correction = direction*change_in_position;\n    return vec3(uv.x + position_correction.x, position.y+change_in_height, uv.y + position_correction.y);\n}\n\n\n\nvec3 wavesLo(const in vec3 rp, float t, float A, float lod)\n{\n    vec3 position = rp;\n    position.y = 0.;\n    position = wv(position,vec2(0.0,1.),t-2.5,2.0);\n    position = wv(position,vec2(-0.8,0.2),t,1.0);\n\n    //wave += 0.9*wv(uv,vec2(0.,1.),t, 0.01);\n    //float wave_z = 0.1*wv(uv*4.,vec2(0.3,1.),t*3.,(1.+wv(uv*4.*pi,vec2(0.3,1.),t*3.,1.)));\n\n    return position;// + 0.2*wave_z;\n}\n\n// high detail waves\nvec3 waves(const in vec3 rp, float t, float A)\n{\n    \n    vec3 position = wavesLo(rp, t, A, 0.0);\n    position = wv(position,normalize(vec2(-0.3,0.5)),t-pi, 0.03);\n    position = wv(position,normalize(vec2(-0.7,-0.5)),t-3., 0.01);\n    return  position; \n}\n\nvec3 mapLo(in vec3 rp)\n{\n    return wavesLo(rp, 2.0+iTime*.2, .04, 4.0);\n}\n\n\nvec3 map(in vec3 rp)\n{\n    return rp - waves(rp, 2.0+iTime*.5, .04);\n}\n\n\nvec3 grad(vec3 rp, float preci)\n{\n    vec2 off = vec2(preci, 0.0);\n    vec3 g = vec3(map(rp + off.xyy).y - map(rp - off.xyy).y,\n\t\t\t\t  map(rp + off.yxy).y - map(rp - off.yxy).y,                  \n\t\t\t\t  map(rp + off.yyx).y - map(rp - off.yyx).y);\n    return normalize(g);\n}\n\n// scanning the surroundings for differences in heights on the heightmap\nvec2 sub(vec3 rp, float preci)\n{\n    vec2 off = vec2(preci, 0.0);\n    vec2 g = vec2(map(rp + off.xyy).y + map(rp - off.xyy).y,\n\t\t\t\t  map(rp + off.yyx).y + map(rp - off.yyx).y);\n    return g;\n}\n\n// for the spec bump \nvec3 texGrad(in vec2 uv)\n{\n    vec2 offset = vec2(0.01, 0.0);\n    uv *= .5;\n    float h0 = texture(iChannel3, uv).r;\n    float h1 = h0-texture(iChannel3, uv+offset.xy).r;\n    float h2 = h0-texture(iChannel3, uv+offset.yx).r;\n    \n    float bump = .4;\n    vec3 g = cross(normalize(vec3(bump, h1, 0.0)), normalize(vec3(0.0, h2, bump)));\n    return g;\n}\n\n\nconst vec3 up = vec3(0.0, 1.0, 0.0);\n\n\nvoid trace(in positionStruct pos, in vec3 rp, in vec3 rd, inout vec4 color)\n{\n    color.rgb = getSky(pos);\n    \n    // trace to plane on top of waves\n    vec3 ro = rp;\n    float t = -(0.155+dot(rp, -up)) / dot(-up, rd);\n    if (t < 0.0) \n    {\n        return;\n    }\n    \n\trp += rd*t;    \n    bool hit = false;\n    float dist = 0.0;\n    \n    // actual tracing\n    \n    // low freq\n    for (int i = 0; i < 55; ++i)\n    {\n        float travelledSq=dot(ro-rp, ro-rp);\n        dist = mapLo(rp).y;\n        \n        if(dist < 0.01)\n        {\n            hit = true;\n            break;\n        }\n        rp += rd * max(dist * (log2(2.+travelledSq)), 0.01);\n        if(travelledSq > 9000.0) break;\n    }\n    \n    //detail tracing\n    for (int i = 0; i < 10; ++i)\n    {\n        rp += dist * rd;\n        if (abs(dist) < 0.0001) break;\n        dist = map(rp).y;\n    }\n    \n    // shadings\n    if(hit)\n    {       \n        vec3 sun = pos.sunVector;\n        vec3 g = grad(rp, 0.002 * (1.0+log2(length(ro-rp) * 100.)));\n        \n        vec3 tg =  texGrad (rp.xz*5.1 + vec2(-iTime*.015, iTime*.06));\n        vec3 tg2 = texGrad (rp.xz*6.2 + vec2( iTime*.01,  -iTime*.06));\n        tg = normalize(tg+tg2);\n        tg = normalize(tg+texGrad(rp.xz*4.2 + vec2( iTime*.01, iTime*.05))*0.3);\n        \n        vec3 sg = grad(rp, 0.001);\n        sg = normalize(sg+tg*.3);\n        // base color\n        pos.worldVector = rd-2.*dot(rd, g)*g;\n        pos.worldVector = normalize(pos.worldVector);\n        color.rgb = getSky(pos);\n        //color = vec4(.05, 0.22, .4, 0.0);\n        \n        // diffuse\n        float d = max(0.0, dot(g, sun));\n        //color *= mix(1.0, d, .4);\n        \n        // top\n        vec2 heights = sub(rp, 0.3);\n        float sst = length(max(vec2(0.00001), heights));\n        float sunD = -1.*(dot(sun, g));\n        //color.rgb = mix(color.rgb, vec3(.2, 0.5, 0.72)*.5, smoothstep(0., .4, sunD));\n        \n        // bottom\n        float ssb = length(min(vec2(0.0), heights));\n        //color.rgb = mix(color.rgb, vec3(.05, 0.22, .4)*.5, smoothstep(0.0, 0.4, ssb));\n        \n        // foam\n        vec3 pw = vec3(1.+2.3/(sst*1.+.001))*2.2;\n        vec3 texcol1 = texture(iChannel3, map(rp).xz*.5).rgb;\n        \n        vec3 pw2 = vec3(1.+.7/(sst*1.2+.01));\n        vec3 texcol2 = texture(iChannel2, map(rp).xz*.5).rgb*1.;\n        \n        vec3 foam = max(pow(texcol1, pw).rrr, pow(texcol2, pw2).rrr);\n        if(foam.r>.3){\n        //color.rgb = foam + vec3(.85, 0.82, .8);\n        }\n        \n        // fresnel\n        vec3 H = normalize(-rd + normalize(sun));\n        float F = clamp(max(0.0, 1.0+dot(rd, g)), 0.0, 1.);\n\n        color.rgb = F* color.rgb + (1.-F)*vec3(.0, .15, .3);\n\n    }\n    color.a = length(ro-rp);\n    \n}\n\n\nmat3 lookat(vec3 from, vec3 to)\n{\n    vec3 f = normalize(to - from);\n    vec3 _tmpr = normalize(cross(f, vec3(0.0, .999, 0.0)));\n    vec3 u = normalize(cross(_tmpr, f));\n    vec3 r = normalize(cross(u, f));\n    return mat3(r, u, f);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    gatherPositions(pos, fragCoord, iMouse.xy, iResolution.xy);\n;\n    vec2 uv = (fragCoord.xy-iResolution.xy*.5) / iResolution.x;\n    \n    //ray direction \n    vec3 rd = pos.worldPosition;\n    \n    //ray position\n    vec3 rp = vec3(0.0, 0.7, 0.0);\n    vec3 _rp = rp;\n\t    \n    trace(pos, rp, rd, fragColor);\n    fragColor.rgb = clamp(fragColor.rgb, 0.0, 1.0);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define VOLUMETRIC_LIGHT\n//#define SPHERICAL_PROJECTION\n\n#define cameraMode 1 \t\t\t\t\t//1 is free rotation, 2 is still camera but free sun rotation\n\n\n//////////////////////////////////////////////////////////////////\n\nfloat bayer2(vec2 a){\n    a = floor(a);\n    return fract( dot(a, vec2(.5, a.y * .75)) );\n}\n\nvec2 rsi(vec3 position, vec3 direction, float radius) {\n    float PoD = dot(position, direction);\n    float radiusSquared = radius * radius;\n\n    float delta = PoD * PoD + radiusSquared - dot(position, position);\n    if (delta < 0.0) return vec2(-1.0);\n          delta = sqrt(delta);\n\n    return -PoD + vec2(-delta, delta);\n}\n\n#define bayer4(a)   (bayer2( .5*(a))*.25+bayer2(a))\n#define bayer8(a)   (bayer4( .5*(a))*.25+bayer2(a))\n#define bayer16(a)  (bayer8( .5*(a))*.25+bayer2(a))\n#define bayer32(a)  (bayer16(.5*(a))*.25+bayer2(a))\n#define bayer64(a)  (bayer32(.5*(a))*.25+bayer2(a))\n#define bayer128(a) (bayer64(.5*(a))*.25+bayer2(a))\n\n//////////////////////////////////////////////////////////////////\n\n#define cloudMinHeight cloudHeight\n#define cloudMaxHeight (cloudThickness + cloudMinHeight)\n\n#define sunPosition vec3(1.0, 1.0, 0.0)\n\nconst float pi = acos(-1.0);\nconst float rPi = 1.0 / pi;\nconst float hPi = pi * 0.5;\nconst float tau = pi * 2.0;\nconst float rLOG2 = 1.0 / log(2.0);\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    float xx = axis.x * axis.x;\n    float yy = axis.y * axis.y;\n    float zz = axis.z * axis.z;\n    \n    float xy = axis.x * axis.y;\n    float xz = axis.x * axis.z;\n    float zy = axis.z * axis.y;\n    \n    return mat3(oc * xx + c, oc * xy - axis.z * s, oc * xz + axis.y * s,\n                oc * xy + axis.z * s, oc * yy + c, oc * zy - axis.x * s, \n                oc * xz - axis.y * s, oc * zy + axis.x * s, oc * zz + c);\n}\n#define PI 3.14159265358\n\nmat3 rotx(float a) { return rotationMatrix(vec3(1.,0.,0.), a); }\nmat3 roty(float a) { return rotationMatrix(vec3(0.,1.,0.), a); }\nmat3 rotz(float a) { return rotationMatrix(vec3(0.,0.,1.), a); }\n\nstruct positionStruct\n{\n\tvec2 texcoord;\n    vec2 mousecoord;\n    vec3 worldPosition;\n    vec3 worldVector;\n    vec3 sunVector;\n} pos;\n\nvec3 sphereToCart(vec3 sphere) {\n    vec2 c = cos(sphere.xy);\n    vec2 s = sin(sphere.xy);\n    \n    return sphere.z * vec3(c.x * c.y, s.y, s.x * c.y);\n}\n\nvec3 calculateWorldSpacePosition(vec2 p)\n{\n\tp = p * 2.0 - 1.0;\n    \n    vec3 worldSpacePosition =  vec3(p.x, p.y, 1.0);\n    \n    #ifdef SPHERICAL_PROJECTION\n\t\tworldSpacePosition = sphereToCart(worldSpacePosition * vec3(pi, hPi, 1.0));\n\t#endif\n    \n    return worldSpacePosition;\n}\n\nvoid gatherPositions(inout positionStruct pos, vec2 fragCoord, vec2 mouseCoord, vec2 screenResolution)\n{\n\tpos.texcoord = fragCoord / screenResolution;\n    pos.mousecoord = mouseCoord / screenResolution;\n    \n    pos.mousecoord = pos.mousecoord.x < 0.001 ? vec2(0.4, 0.64) : pos.mousecoord;\n    \n    vec2 rotationAngle = radians(vec2(360.0, 180.0) * pos.mousecoord - vec2(0.0, 90.0));\n\n    \n    mat3 rotateH = rotationMatrix(vec3(0.0, 1.0, 0.0), rotationAngle.x);\n    mat3 rotateV = rotationMatrix(vec3(1.0, 0.0, 0.0), -rotationAngle.y);\n    \n    pos.worldPosition = calculateWorldSpacePosition(pos.texcoord);\n    \n    if (cameraMode == 1) {\n    \tpos.worldPosition = rotateH * (rotateV * pos.worldPosition);\n        \n        // Sun position\n    \tpos.sunVector = normalize(sunPosition);\n    }\n    if (cameraMode == 2) {\n    \tpos.sunVector = normalize(calculateWorldSpacePosition(pos.mousecoord));\n    }\n    \n    pos.worldVector = normalize(pos.worldPosition);\n}","name":"Common","description":"","type":"common"}]}