{"ver":"0.1","info":{"id":"lt2GWw","date":"1429626541","viewed":1729,"name":"from 2D to 3D","username":"Lio","description":"The idea of this shader https://www.shadertoy.com/view/ls2SDd\nExperiments ...\nComment to see the 2D pattern - #define pattern3D","likes":41,"published":1,"flags":0,"usePreview":0,"tags":["2d","3d","fractal"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[],"code":"const int MAX_RAY_STEPS = 64;\n#define time  iTime\n//Comment to see the 2D pattern\n#define pattern3D\n#define var1\n#ifdef var1\n\tfloat scale = 0.3;\n\tfloat size  = 0.45;\n\tfloat intens = 1.5;\n#else\n\tfloat scale = 0.55;\n\tfloat size  = 0.43;\n\tfloat intens = 1.21;\n#endif\n//-----------------------------\nvec3 rotationCoord(vec3 n, in float t)\n{\n   vec3 result;\n   vec2 sc = vec2(sin(t), cos(t));\n   mat3 rotate;\n\n      rotate = mat3( sc.y,  0.0, -sc.x,\n                     0.0,   1.0,  0.0,\n                     sc.x,  0.0, sc.y);   \n  result = n * rotate;\n  return result;\n}\n//----------------------------------------------------\nfloat pattern(in vec3 p) \n{\n   float v = 0.;\n   p *= scale;\n   for (int i = 0; i < 10; ++i) \n         p = abs(p) / dot(p, p) - vec3(size);\n   v = dot(p, p) * intens;\n   return v;\n\n}\n//-------------------------------------------------\nfloat render(in vec3 posOnRay, in vec3 rayDir)\n{ \n  float t = 0.0;\n  float maxDist = 30.;\n  float d = 0.1;  \n\n  for(int i=0; i<MAX_RAY_STEPS; ++i)\n  {\n    if (abs(d) <0.0001 || t > maxDist) \n         break;\n    t += d;\n    posOnRay += rayDir * 1.0/ (d + 0.35);\n    d = pattern(posOnRay);;     \n  }\n\n   return d;\n}\n\n//------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos     =  gl_FragCoord.xy / iResolution.xy * 2. - 1.;\n    pos.x *= iResolution.x / iResolution.y;  \n    vec3 p= vec3(pos, 1. );\n    #ifdef var1\n    \tp *= scale;\n    #endif\n\n    vec3 col = vec3(0);  \n    float t = 0.;  \n  #ifdef pattern3D\n  {  \n    vec3 camP =  vec3(0., 0., -1.);\n    vec3 camUp = vec3(0. , 1., 0.);\n    vec3 camDir = normalize(-camP);\n    vec3 u = normalize(cross(camUp,camDir));\n    vec3 v = cross(camDir,u);\n    vec3 rayDir = normalize(camDir * 2. + pos.x * u + pos.y * v);  \n\n    vec4 color    = vec4(1.0);\n    vec3 posOnRay = vec3(80., 0., 0.);\n  //--------------------------- \n   posOnRay = rotationCoord(posOnRay,time / 2.0);\n   rayDir = rotationCoord(rayDir,time / 2.0 + 3.14 / 2.0);\n   t = render(posOnRay, rayDir);\n  } \n  #else\n    t = pattern(p) ;\n #endif  \n    col = vec3(0.5 * t * t * t, 0.6 * t * t, 0.7 * t); \n    col = min(col, 1.0) - 0.28 * (log(col + 1.));\n    fragColor = vec4(sqrt(col.rgb), 1.0);\n}","name":"","description":"","type":"image"}]}