{"ver":"0.1","info":{"id":"4scGz7","date":"1448543068","viewed":247,"name":"Demo Flashlight","username":"buidinhloctho123","description":"demo lighting","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[],"code":"vec2 originPoint;\n//vec4: xyzw - rgba - stpq\n//Thanks jt help me improve algorithm\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pos = fragCoord.xy / iResolution.xy;\n\tvec4 color = texture(iChannel0, pos);\n    vec4 flashLightColor = vec4(1.0, 0.97, 0.2, 1.0); //yellow color\n\tvec2 originPoint = vec2(0.0, 0.0);\n\tvec2 realMouse = vec2(iMouse.x, iMouse.y);\n\tfloat lightLength = 0.7 * iResolution.x;\n\tvec2 direct = vec2(realMouse.x - originPoint.x, realMouse.y - originPoint.y);\n\tfloat angleDelta = 30.0; \n\tvec2 currentVector = pos * iResolution.xy - originPoint;\n\tfloat currentVectorLength = length(currentVector);\n\tfragColor = step(cos(radians(angleDelta)), dot(normalize(direct), normalize(currentVector))) * texture(iChannel0, pos) * flashLightColor * (0.7 - currentVectorLength / lightLength);\n}\n\n/*\n\t//my algorithm\n\n\tvec2 pos = fragCoord.xy / iResolution.xy;\n    vec2 realMouse = vec2(iMouse.x, iMouse.y); //get mouse position\n    vec2 originPoint = vec2(200.0, 200.0); // lighting original position\n    \n    vec4 color = texture(iChannel0, pos); //get color in ichanel0\n    vec4 flashLightColor = vec4(1.0, 0.97, 0.2, 1.0); //yellow color\n\n    float angleDelta = 30.0;  //the width half size of flashlight by degree - left and the right side    \n    float lightLength = 0.7 * iResolution.x; //the length of lighting\n    \n    fragColor = vec4(0);    //initialize color (black)\t\n    \n    //direction vector from mouseposition to originposition    \n    vec2 direct = vec2(realMouse.x - originPoint.x, realMouse.y - originPoint.y);//count vector       \n    direct = normalize(direct); //normalize to count angle\n    //get the angle of \"direct\" vector with unit vector x \n    //the bottom is positive angle and top is negative angle\n    float angle = degrees(acos(direct.x) * (abs(direct.y) / direct.y)); //convert to degree\n        \n    //calculate the direction vector of currentposition with originLight position (originpoint)\n    vec2 currentVector = pos * iResolution.xy - originPoint; \n    \n    //get the length of vector, to compare to lightLength \n    float currentVectorLength = length(currentVector);\n    \n    //we just fill color where the position in range\n    if(currentVectorLength  <= lightLength)\n    {\n        currentVector = normalize(currentVector);   \n        float currentAngle = degrees(acos(currentVector.x) * (abs(currentVector.y) / currentVector.y));\n        \n        float dla = abs(currentAngle - angle);\n        \n        //the angle of 2 vector <= 180 degrees\n        if(dla >= 180.0)\n        {\n            dla = 360.0 - dla;\n        }\n        \n        if(dla <= angleDelta)\n        {            \n\t\t\tfragColor =  color * (0.7 - currentVectorLength / lightLength) * flashLightColor; \n        } \n    }\n    else\n    {\n        fragColor = fragColor;\n    }    \n*/","name":"","description":"","type":"image"}]}