{"ver":"0.1","info":{"id":"XssfRr","date":"1494642829","viewed":155,"name":"Sketch_TriLattice3","username":"cexlearning","description":"TriLattice3ï¼Œcopy from https://github.com/keijiro/ShaderSketches","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["sketch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float rand(vec2 uv)\n{\n    return fract(sin(dot(uv, vec2(12.9898, 78.233))) * 43758.5453);\n}\n\nvec3 hue2rgb(float h)\n{\n    h = fract(h) * 6.0 - 2.0;\n    return clamp(vec3(abs(h - 1.0) - 1.0, 2.0 - abs(h), 2.0 - abs(h - 2.0)), 0.0, 1.0);\n}\n\nvec2 uv2tri(vec2 uv)\n{\n    float sx = uv.x - uv.y / 2.0; // skewed x\n    float sxf = fract(sx);\n    float offs = step(fract(1.0 - uv.y), sxf);\n    return vec2(floor(sx) * 2.0 + sxf + offs, uv.y);\n}\n\nfloat tri(vec2 uv)\n{\n    vec2 p = floor(uv2tri(uv));\n    p = vec2(p.x + p.y, p.y * 2.0);\n    float d = length(p + 1.0);\n    float f1 = 1.6 + sin(iTime * 0.5765) * 0.583;\n    float f2 = 1.3 + sin(iTime * 1.7738) * 0.432;\n    return abs(sin(f1 * d) * sin(f2 * d));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n    float t = smoothstep(0.2, 0.8, fract(iTime));\n\n    vec2 uv = fragCoord.xy - iResolution.xy / 2.0;\n    uv *= (2.0 - t) / iResolution.y;\n\n    float c = mix(tri(uv * 4.0), tri(uv * 8.0), t);\n    fragColor = vec4(c, c, c, 1.0);\n}","name":"Image","description":"","type":"image"}]}