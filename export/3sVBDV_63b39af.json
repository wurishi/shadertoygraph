{"ver":"0.1","info":{"id":"3sVBDV","date":"1608000693","viewed":90,"name":"Belousov-Zhabotinsky Demo","username":"mherreshoff","description":"Simulates the Belousov-Zhabotinsky reaction.","likes":6,"published":1,"flags":32,"usePreview":0,"tags":["2d","chaos","reaction","chemical"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = vec4(texture(iChannel0, uv).x*vec3(1,1,1), 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"Xsf3zn","filepath":"/media/a/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","previewfilepath":"/media/ap/f735bee5b64ef98879dc618b016ecf7939a5756040c2cde21ccb15e69a6e1cfb.png","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// See: https://scipython.com/blog/simulating-the-belousov-zhabotinsky-reaction/\nvec2 mkAngle(in float theta) {\n  return vec2(cos(theta), sin(theta));\n}\n\n\nvec3 params = vec3(1.2,1.,1.);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float tau = radians(360.);\n    int N = 8;\n    float r = 0.005;\n    float speed = .5;\n    float bleed = 0.01;\n    \n    vec2 uv = fragCoord/iResolution.xy;\n    \n    vec3 neighborAvg = vec3(0);\n    for (int i = 0; i < N; i++) {\n      vec2 uv2 = fract(uv + r*mkAngle(float(i)*tau/float(N)));\n       neighborAvg += texture(iChannel0, uv2).xyz/float(N);\n    }\n    vec3 v = mix(texture(iChannel0, uv).xyz, neighborAvg, 1.-bleed);\n    vec3 result = clamp(v + speed * v * (params * v.yzx - params.zxy * v.zxy),0.,1.);\n    if(texture(iChannel0, uv).x == 0.) result = texture(iChannel1, uv).xyz;\n    fragColor = vec4(result,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}