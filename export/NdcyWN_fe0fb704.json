{"ver":"0.1","info":{"id":"NdcyWN","date":"1653431504","viewed":289,"name":"Sound Laser Line Projector","username":"Ossitech","description":"Shader for projectors with fog machines.","likes":1,"published":3,"flags":36,"usePreview":0,"tags":["sound","audio","laser","projector"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MULT 0.0\n#define SPEED 2.0\n\nfloat getOffset()\n{\n    float offset = 0.0;\n    \n    for (int i = 0; i < 512; i++)\n    {\n        offset += texture(iChannel0, vec2(float(i) / 512.0, 0.0)).x * MULT;\n    }\n    \n    offset /= 512.0;\n    \n    return offset;\n}\n\n// direction x + y must be 1.0.\n// d must be between 0.0 an 1.0.\nint line(vec2 uv, vec2 direction, float d)\n{\n    float v = uv.x * direction.x + uv.y * direction.y;\n    \n    if (abs(d - v) < 0.01) return 1;\n    \n    return 0;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    \n    int mask = 0;\n    \n    int second = int(iTime) % 60;\n    \n    float d = cos(iTime * SPEED) * 0.5 + 0.5 + getOffset();\n    \n    if (second < 10) mask += line(uv, vec2(1.0, 0.0), d);\n    else if(second < 20) mask += line(uv, vec2(0.0, 1.0), d);\n    else if(second < 30) mask += line(uv, vec2(0.5, 0.5), d);\n    else if(second < 40) mask += line(uv, vec2(0.25, 0.75), d);\n    else if(second < 50) mask += line(uv, vec2(0.8, 0.2), d);\n    else mask += line(uv, vec2(0.4, 0.6), d);\n    \n    if (mask > 0) fragColor = texture(iChannel1, uv);\n    else fragColor = vec4(0.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}