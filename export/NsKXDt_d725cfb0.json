{"ver":"0.1","info":{"id":"NsKXDt","date":"1635519067","viewed":55,"name":"Kernel effect blur demo","username":"alanjian85","description":"Blur kernel effect demo","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["kerneleffect"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rn","filepath":"/media/a/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","previewfilepath":"/media/ap/bd6464771e47eed832c5eb2cd85cdc0bfc697786b903bfd30f890f9d4fc36657.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nThis is a version of a 3x3 Gaussian kernel blur. I don't really feel like explaining it here, so here's a computerphile video that does it\nfor me. https://www.youtube.com/watch?v=C_zFhWdM4ic\nIt's fully modifiable, you can change the kernel values as much as you like. Right now it's boring because I have all of them set to 1, but\nI made a different version for the Sobel edge detector. That one is a lot less customizable and it's also slightly more complicated, so it\nwould take a bit of tweaking in this one to recreate the other. You can also tweak this to work with color, I just didn't really feel like it.\n*/\n\n//Color to BW\nvec4 bw(sampler2D col, vec2 uv) {\n\treturn texture(col, uv);\n}\n\n//Pixel UV to normalized UV (just to clean up code, I know it's inefficient)\nvec2 nUv(vec2 uv) {\n\treturn uv/iResolution.xy;\n}\n\n//Kernel pixel UV values, don't change these\nvec2 kO[9] = vec2[9](vec2(-1.,1.), vec2(0.,1.), vec2(1.,1.),\n                     vec2(-1.,0.), vec2(0.,0.), vec2(1.,0.),\n                     vec2(-1.,-1.), vec2(0.,-1.), vec2(1.,-1.));\n//Kernel multiplication values, arranged in the correct grid\n//Feel free to change these\nfloat kM[9] = float[9](1. / 9., 1. / 9., 1. / 9.,\n                       1. / 9., 1. / 9., 1. / 9.,\n                       1. / 9., 1. / 9., 1. / 9.);\n\n//Kernel math\nvec4 kernelFilter(vec2 pUv) {\n\tvec4 r = vec4(0, 0, 0, 0);\n\tfor(int i = 0; i < 9; i++){\n  \t\tr += bw(iChannel0, nUv(pUv + kO[i])) * kM[i];\n\t}\n    return r;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pUv = fragCoord;\n    vec4 filtered = kernelFilter(fragCoord);\n\tfragColor = vec4(filtered);\n    //fragColor = texture(iChannel0, nUv(pUv));\n}","name":"Image","description":"","type":"image"}]}