{"ver":"0.1","info":{"id":"X3jcD3","date":"1733182785","viewed":62,"name":"Raymarching Demo 0 - DJ","username":"DjBlueBear","description":"my first attempt at raymarching","likes":0,"published":3,"flags":32,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 buffer0 = texelFetch(iChannel0, ivec2(fragCoord), 0);\n    \n    fragColor = buffer0;\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"float sdSphere(in vec3 p, in vec3 c, in float r)\n{\n    vec3 q = p - c;\n    return length(q) - r;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4sX3zn","filepath":"/media/a/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","previewfilepath":"/media/ap/0681c014f6c88c356cf9c0394ffe015acc94ec1474924855f45d22c3e70b5785.png","type":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"float mapWorld(in vec3 p)\n{\n    float sphere0 = sdSphere(p,vec3(0.0,-1.0,0.0), 2.0);\n    float sphere1 = sdSphere(p,vec3(cos(iTime),1.0,sin(iTime)), 1.0);\n    float sphere2 = sdSphere(p,vec3(-2.0,2.0,3.0), 1.0);\n    float sphere3 = sdSphere(p,vec3(1.0,-2.0,4.0), 1.0);\n    \n    return min(sphere0, min(sphere1, min(sphere2, sphere3)));\n}\n\nvec3 calcNormal(in vec3 p)\n{\n  const vec3 small_step = vec3(0.001, 0.0, 0.0);\n  \n  float grad_x = mapWorld(p + small_step.xyy) - mapWorld(p - small_step.xyy);\n  float grad_y = mapWorld(p + small_step.yxy) - mapWorld(p - small_step.yxy);\n  float grad_z = mapWorld(p + small_step.yyx) - mapWorld(p - small_step.yyx);\n\n  vec3 normal = vec3(grad_x, grad_y, grad_z);\n\n  return normalize(normal);\n}\n\nvec3 raymarch(in vec3 origin, in vec3 dir)\n{\n    float dist = 0.0;\n    \n    for(int i=0; i<256; i++)\n    {\n        vec3 position = origin + dist * normalize(dir);\n        \n        float k = mapWorld(position);\n        \n        if(k < 0.01)\n        {\n            vec3 normal = calcNormal(position);\n            vec3 light = vec3(0.0,20.0,0.0);\n            \n            vec3 lightDir = normalize(position - light);\n            \n            //return normal;\n            return vec3(1.0,0.0,0.0) * max(0.0, dot(normal, lightDir)) + texture(iChannel0, reflect(normalize(dir), normal)).xyz / 6.0;\n        }\n        \n        dist += k;\n    }\n    \n    return vec3(0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord / iResolution.y - vec2(0.5);\n    \n    vec3 color = raymarch(vec3(0.0,0.0,-10.0), vec3(uv.xy, 1.0));\n    \n    fragColor = vec4(color, 1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}