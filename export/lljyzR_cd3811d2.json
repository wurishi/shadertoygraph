{"ver":"0.1","info":{"id":"lljyzR","date":"1507229060","viewed":195,"name":"Wave field","username":"kindpotato","description":"Simple wave field shader. It works like a grid of masses attached by ideal springs. Click to interact.","likes":5,"published":1,"flags":32,"usePreview":0,"tags":["waves"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float sigmoid(float x){\n    return 1./(1.+exp(-x));\n}\nfloat slope(float a, float b){\n\treturn (b-a)/2.;\n}\nvec2 get(float x ,float y,vec2 coord){\n    return texture(iChannel0,(coord.xy+vec2(x,y))/iResolution.xy).rg;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t//vec2 state = get(0.,0.,fragCoord);\n    vec2 gradient = vec2(slope(get(-1.,0.,fragCoord).x,get(1.,0.,fragCoord).x),slope(get(0.,-1.,fragCoord).x,get(0.,1.,fragCoord).x));\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 lightPos = vec2(0,-3.);\n    vec2 displaced = uv-lightPos; //vector from lightPos to uv\n    float shine = 2.*abs(dot(gradient,normalize(displaced)));\n    if (shine > 0.2) shine += 0.2;\n    //float up = sigmoid(state.x);\n    vec3 color = texture(iChannel1,(20.*gradient+fragCoord)/iResolution.xy).rgb;\n   \t//fragColor = vec4(up,sigmoid(2.*state.y),1.-up,1);\n\tfragColor = vec4(color+vec3(shine),1);\n    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"vec2 get(float x ,float y,vec2 coord){\n    return texture(iChannel0,(coord.xy+vec2(x,y))/iResolution.xy).rg;\n}\nfloat curve(float a, float b, float c){\n\treturn (a+c)-2.*b;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame <10) fragColor = vec4(0,0,0,1);\n    else if (fragCoord.x > 1. && fragCoord.y > 1. && fragCoord.x < iResolution.x-1. && fragCoord.y < iResolution.y-1.){\n    \tvec2 pixel = 1./iResolution.xy;\n    \tvec2 state = get(0.,0.,fragCoord);\n   \t\n    \t//float force = -0.01*(state.r);\n    \tfloat force = curve(get(0.,1.,fragCoord).r,state.r,get(0.,-1.,fragCoord).r);\n    \tforce += curve(get(1.,0.,fragCoord).r,state.r,get(-1.,0.,fragCoord).r);\n        //force /= 2.;\n        force *= 4.;\n       \tif(iMouse.z > 0.1){\n       \t\tfloat dist = distance(iMouse.xy,fragCoord);\n        \tconst float frequency = 6.;\n            if (dist < 10.)\n            \tstate.x = 0.9*state.x+0.1*cos(frequency*iTime)*sqrt(100. -dist*dist);\n        }\n    \t\tstate.y += 0.1*force;\n        \tstate.y *= 0.999; //Damping\n    \t\tstate.x += state.y;\n    \t\tfragColor = vec4(state,1.,1.);\n    }\n    else fragColor = vec4(0,0,1,1);\n}\n","name":"Buffer A","description":"","type":"buffer"}]}