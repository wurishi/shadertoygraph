{"ver":"0.1","info":{"id":"stXyzX","date":"1648407108","viewed":37,"name":"Tulips (Twitch)","username":"rimina","description":"Some Spring vibes from my Twitch live coding stream 20th of March 2022.","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["sdf","tulips"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Copyright Â© 2022 rimina.\n// All rights to the likeness of the visuals reserved.\n\n// Any individual parts of the code that produces the visuals is\n// available in the public domain or licensed under the MIT license,\n// whichever suits you best under your local legislation.\n\n// This is to say: you can NOT use the code as a whole or the visual\n// output it produces for any purposes without an explicit permission,\n// nor can you remix or adapt the work itself without a permission.*\n// You absolutely CANNOT mint any NFTs based on the Work or part of it.\n// You CAN however use any individual algorithms or parts of the Code\n// for any purpose, commercial or otherwise, without attribution.\n\n// *(In practice, for most reasonable requests, I will gladly grant\n//   any wishes to remix or adapt this work :)).\n\n\n//sdVerticalCapsule and sdEllipsoid function is from IQ\n//https://iquilezles.org/articles/distfunctions\n//thank you for your inspiring work <3\n\n//also huge thanks to the live coding community in general I've learned so much from you!\n\n#define PI 3.14159265\n\n//float fft = texture(texFFTIntegrated, 0.5).r;\n\nconst float E = 0.001;\nconst float FAR = 500.0;\nconst int STEPS = 60;\n\nint M = 0;\n\nstruct Material{\n    vec3 l;\n    vec3 s;\n    float sh;\n};\n\nvec3 glow = vec3(0.0);\n\nMaterial getMaterial(int index){\n\n    Material m;\n\n    if(index == 0){//tulip petals\n        m.l = vec3(0.8, 0.6, 0.5);\n        m.s = vec3(1.0, 0.3, 0.5);\n        m.sh = 40.0;\n    }\n    else if(index == 1){//stem\n        m.l = vec3(0.2, 0.8, 0.5);\n        m.s = vec3(0.5, 0.9, 0.7);\n        m.sh = 25.0;\n    }\n    else if(index == 2){//center of the tulip\n        m.l = vec3(0.8, 0.6, 0.7);\n        m.s = vec3(0.9, 0.9, 0.9);\n        m.sh = 10.0;\n    }\n    else{//this could be just omitted\n        m.l = vec3(0.8, 0.5, 0.8);\n        m.s = vec3(1.0, 0.0, 1.0);\n        m.sh = 40.0;\n    }\n\n    return m;\n}\n\nfloat sphere(vec3 p, float r){\n    return length(p)-r;\n}\n\nfloat box(vec3 p, vec3 b){\n    vec3 d = abs(p)-b;\n    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);\n}\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdEllipsoid( vec3 p, vec3 r ){\n    float k0 = length(p/r);\n    float k1 = length(p/(r*r));\n    return k0*(k0-1.0)/k1;\n}\n\n//https://iquilezles.org/articles/distfunctions\nfloat sdVerticalCapsule( vec3 p, float h, float r ){\n    p.y -= clamp( p.y, 0.0, h );\n    return length( p ) - r;\n}\n\nvoid rot(inout vec2 p, float a){\n    p = cos(a)*p + sin(a)*vec2(p.y, -p.x);\n}\n\nfloat tulipBase(vec3 p){\n    vec3 pp = p;\n\n    float tulip = sdEllipsoid(pp, vec3(1.0, 1.5, 1.0));\n    float inside = sdEllipsoid(pp-vec3(0.0, 0.25, 0.0), vec3(0.82, 1.7, 0.82));\n\n    pp.xz = abs(pp.xz) - vec2(0.6, 0.6);\n    pp.y -= 1.0;\n    rot(pp.xy, PI*0.25);\n    rot(pp.yz, PI*0.25);\n    float cube = box(pp, vec3(0.5, 0.5, 0.5));\n\n    tulip = max(tulip, -cube);\n    tulip = max(tulip, -inside);\n\n    return tulip;\n}\n\nfloat tulip(vec3 p){\n    vec3 pp = p;\n    float tulip = tulipBase(pp);\n    rot(pp.xz, PI*0.25);\n    pp *= 1.03;\n    tulip = min(tulip, tulipBase(pp));\n\n    pp.y += 0.75;\n    float center = sphere(pp, 0.5);\n\n    glow += vec3(0.4, 0.1, 0.5) *0.01 / (abs(center)+0.01);\n\n\n    pp.y += 5.8;\n    float varsi = sdVerticalCapsule(pp, 5.0, 0.25);\n\n\n    M = 0;\n        if(varsi < tulip && varsi < center){\n        M = 1;\n    }\n    else if(center < varsi && center < tulip){\n        M = 2;\n    }\n\n    tulip = min(tulip, center);\n    tulip = min(tulip, varsi);\n    return tulip;\n}\n\nfloat scene(vec3 p){\n  \n    vec3 pp = p;\n\n    rot(pp.xz, /*fft*0.5+*/iTime*0.1);\n\n    for(int i = 0; i < 5; ++i){\n        pp.xz = abs(pp.xz)-vec2(1., 1.);\n        rot(pp.xz, PI/5.5);\n        rot(pp.xy, -0.02); \n    }\n\n    pp.xz = mod(pp.xz+4.0, vec2(8.0))-4.0;\n\n    rot(pp.xy, sin(iTime)*0.01);\n    rot(pp.yz, cos(iTime)*0.01);\n\n    float tulppaani = tulip(pp);\n\n    return tulppaani;\n}\n\nfloat march(vec3 ro, vec3 rd){\n    vec3 p = ro;\n    float t = E;\n\n    for(int i = 0; i < STEPS; ++i){\n        float d = scene(p);\n        t += d;\n        p = ro + rd * t;\n\n        if(d < E || t > FAR){\n            break;\n        }\n    }\n\n    return t;\n}\n\nvec3 normals(vec3 p){\n    vec3 e = vec3(E, 0.0, 0.0);\n\n    return normalize(vec3(\n        scene(p+e.xyy) - scene(p-e.xyy),\n        scene(p+e.yxy) - scene(p-e.yxy),\n        scene(p+e.yyx) - scene(p-e.yyx)\n    ));\n}\n\nvec3 shade(vec3 rd, vec3 p, vec3 ld, Material m){\n  vec3 n = normals(p);\n  \n  float l = max(dot(ld, n), 0.0);\n  float a = max(dot(reflect(rd, ld), n), 0.0);\n  float s = pow(a, m.sh);\n  \n  return m.s*l + m.l*s;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 q = -1.0 + 2.0*uv;\n    q.x *= iResolution.x/iResolution.y;\n\n    vec3 ro = vec3(10.0*sin(iTime*0.5), 10.0, 2.0*cos(iTime*0.5));\n    vec3 rt = vec3(0.0, -10.0, 0.0);\n\n    vec3 z = normalize(rt-ro);\n    vec3 x = normalize(cross(z, vec3(0.0, 1.0, 0.0)));\n    vec3 y = normalize(cross(x, z));\n\n    vec3 rd = normalize(mat3(x, y, z)*vec3(q, 1.0/radians(120.0)));\n\n    float t = march(ro, rd);\n    vec3 p = ro + rd * t;\n\n    vec3 ld = -rd;\n    vec3 fogc = vec3(0.3, 0.5, 0.45);\n\n    vec3 col = fogc;\n\n    if(t < FAR){\n        Material m = getMaterial(M);\n        col = shade(rd, p, ld, m);\n    }\n\n    col += glow*0.75;\n\n    float d = length(p-ro);\n    float amount = 1.0-exp(-d*0.01);\n    col = mix(col, fogc, amount);\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}