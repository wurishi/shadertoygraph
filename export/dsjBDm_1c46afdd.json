{"ver":"0.1","info":{"id":"dsjBDm","date":"1689802535","viewed":208,"name":"Impacient (not so) human shader","username":"Chuee","description":"Recreation of the human shader by iq (https://humanshader.com/). Because I wanted to see the result earlier. \n\nClick to reveal","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["humanshader"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzr","filepath":"/media/a/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","previewfilepath":"/media/ap/08b42b43ae9d3c0605da11d0eac86618ea888e62cdd9518ee8b9097488b31560.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define C(c) U.x-=.5; O+= char(U,64+c)\n\n// Text rendering from https://www.shadertoy.com/view/4sBfRd\nvec4 char(vec2 p, int c) \n{\n    if (p.x<.0|| p.x>1. || p.y<0.|| p.y>1.) return vec4(0,0,0,1e5);\n\treturn textureGrad( iChannel0, p/16. + fract( vec2(c, 15-c/16) / 16. ), dFdx(p/16.),dFdy(p/16.) );\n}\n\nvec3 spoilerWarning(vec2 fragCoord){\n\n    vec4 O = vec4(0.0);\n    fragCoord /= iResolution.y;\n    vec2 position = vec2(.5);\n    float FontSize = 8.;\n    vec2 U = ( fragCoord - position)*64.0/FontSize;\n    C(19);C(16);C(15);C(9);C(12);C(5);C(18);C(-31);C(-31);\n    return O.xxx;\n}\n\nint reduce(int a, int by){\n    return a / int((pow(10., float(by))));\n}\n\nvec3 humanShader(vec2 fragCoord){\n    \n    int R,G,B,t,p,q,s,w,o,c,r,d;\n    vec2 hs = vec2(70, 39);\n    vec2 uvf = fragCoord * hs / iResolution.xy;\n    vec2 uv = floor(uvf);\n    \n    int x = int(uv.x);\n    int y = int(-uv.y+hs.y);\n    \n    // Section A\n    int u = x - 36;\n    int v = 18 - y;\n    int h = u * u + v * v;\n    \n    \n    if(h<200){ // Section B\n        R = 420;\n        B = 520;\n        t = 5000 + 8 * h;\n        p = reduce(t * u, 2);\n        q = reduce(t * v, 2);\n        s = 2 * q;\n        w = reduce(1000 + p - s, 2) + 8;\n        if(w>0){\n            R = R + w * w;\n        }\n        o = s + 2200;\n        R = reduce(R * o, 4);\n        B = reduce(B * o, 4);\n        if(p > -q){\n            w = reduce(p+q, 1);\n            R = R + w;\n            B = B + w;\n        }\n    }else if(v<0){ // Section C\n        R = 150 + 2 * v;\n        B = 50;\n        p = h + 8 * v * v;\n        c = 240 * (-v) -p;\n        if(c > 1200){\n            o = reduce(6 * c, 1);\n            o = c * (1500 - o);\n            o = reduce(o, 2) - 8360;\n            R = reduce(R * o, 3);\n            B = reduce(B * o, 3);\n        }\n        r = c + u * v;\n        d = 3200 - h - 2 * r;\n        if(d > 0){\n            R = R + d;\n        }\n    }else{ // Section D\n        c = x + 4 * y;\n        R = 132 + c;\n        B = 192 + c;\n    }\n    \n    // Section E\n    R = min(R, 255);\n    B = min(B, 255);\n    G = reduce(7 * R + 3 * B, 1);\n\n    // Output to screen\n    vec3 col = vec3(float(R)/255., float(G)/255., float(B)/255.);\n    \n    // Big pixel border\n    uvf = fract(uvf);\n    float off = .1;\n    col.xyz *= uvf.x < off ? 0.9 : 1.;\n    col.xyz *= uvf.y < off ? 0.9 : 1.;\n    col.xyz *= uvf.x > 1.-off ? 0.9 : 1.;\n    col.xyz *= uvf.y > 1.-off ? 0.9 : 1.;\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col;\n    if(iMouse.z > 0.){\n        col = humanShader(fragCoord);\n    }else{\n        col = spoilerWarning(fragCoord);\n    }\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}