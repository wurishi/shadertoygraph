{"ver":"0.1","info":{"id":"Wdc3WM","date":"1568788417","viewed":67,"name":"ray-tracing-lucifier129","username":"lucifier129","description":"a hello world for shadertoy","likes":0,"published":1,"flags":0,"usePreview":0,"tags":["test"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"struct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n        \nstruct Sphere {\n    vec3 center;\n    float radius;\n};\n    \nstruct Hit_Record {\n    bool isHit;\n    float t;\n    vec3 p;\n    vec3 normal;\n};\n    \nvec3 point_at(Ray ray, float t) {\n  return ray.origin + t * ray.direction;\n}\n    \nbool hit(Sphere sphere, Ray ray, float t_min, float t_max, out Hit_Record hit_record) {\n\tvec3 oc = ray.origin - sphere.center;\n    float a = dot(ray.direction, ray.direction);\n    float b = dot(oc, ray.direction);\n    float c = dot(oc, oc) - sphere.radius * sphere.radius;\n    float discriminant = b * b - a * c;\n    \n    if (discriminant > 0.0) {\n        float temp = (-b - sqrt(discriminant)) / a;\n        bool isValid = temp < t_max && temp > t_min;\n        \n        if (!isValid) {\n        \ttemp = (-b + sqrt(discriminant)) / a;\n            isValid = temp < t_max && temp > t_min;\n        }\n        \n        if (isValid) {\n        \thit_record.t = temp;\n            hit_record.p = point_at(ray, temp);\n            hit_record.normal = (hit_record.p - sphere.center) / sphere.radius;\n            return true;\n        } \n    }\n    \n    return false;\n}\n\n\nvec3 lerp(vec3 start, vec3 end, float t) {\n    return (1.0 - t) * start + t * end;\n}\n\nSphere sphere0 = Sphere(vec3(0.0, -100.5, -1.0), 100.0);\n\nSphere sphere1 = Sphere(vec3(0.0, 0.0, -1.0), 0.5);\n\nbool hit(Ray ray, float t_min, float t_max, out Hit_Record hit_record) {\n    bool hit_anything = false;\n    \n    if (hit(sphere0, ray, t_min, t_max, hit_record)) {\n        hit_anything = true;\n        t_max = hit_record.t;\n    }\n    \n    if (hit(sphere1, ray, t_min, t_max, hit_record)) {\n        hit_anything = true;\n        t_max = hit_record.t;\n    }\n    \n    return hit_anything;\n}\n\n#define FLT_MAX 3.402823466e+38\n\nvec3 color(Ray ray) {\n    Hit_Record hit_record;\n    \n    if (hit(ray, 0.0, FLT_MAX, hit_record)) {\n        vec3 normal = hit_record.normal;\n        return 0.5 * vec3 (normal.x + 1.0, normal.y + 1.0, normal.z + 1.0);\n    }\n    \n    vec3 unit_direction = normalize(ray.direction);\n    float t = 0.5 * (unit_direction.y + 1.0);\n    vec3 start = vec3(1.0, 1.0, 1.0);\n    vec3 end = vec3(0.5, 0.7, 1.0);\n    \n    return lerp(start, end, t);\n}\n\nvec3 low_left_corner = vec3(-2.0, -1.125, -1.0);\n\nvec3 horizental = vec3(4.0, 0.0, 0.0);\n\nvec3 vertical = vec3(0.0, 2.25, 0.0);\n\nvec3 ray_origin = vec3(0.0, 0.0, 0.0);\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float u = uv.x;\n    float v = uv.y;\n    \n    vec3 ray_direction = low_left_corner + u * horizental + v * vertical;\n    \n    Ray ray = Ray(ray_origin, ray_direction);\n    \n\n    // Output to screen\n    fragColor = vec4(color(ray), 1.0);\n}","name":"Image","description":"","type":"image"}]}