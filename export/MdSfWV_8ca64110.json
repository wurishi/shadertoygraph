{"ver":"0.1","info":{"id":"MdSfWV","date":"1502211901","viewed":1510,"name":"High Pass vs Fwidth","username":"starea","description":"high pass shader with bilateral filter to clean up the noise.","likes":4,"published":3,"flags":32,"usePreview":1,"tags":["postprocessing","highpass","fwidth","bilateral"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/**\n * A simple implementation of a high-pass filter: https://www.shadertoy.com/view/MdSfWV\n * Fwidth Edge: 834144373's https://www.shadertoy.com/view/MdGGRt\n * Fwidth with Bilateral Filter: https://www.shadertoy.com/view/MlG3WG\n */\n#define USE_BILATERAL_FILTER\n#ifdef USE_BILATERAL_FILTER\n#define TEXTURE iChannel1\n#else\n#define TEXTURE iChannel0\n#endif\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float[] kernel = float[] (-1., -1., -1., -1., 8., -1., -1., -1., -1.);\n    vec2 delta = 1.0 / iResolution.xy; \n    vec2[] offset = vec2[] \n        (-delta, vec2(0.0, -delta.y), vec2(delta.x, -delta.y), \n         vec2(-delta.x, 0.0), vec2(0.0), vec2(delta.x, 0.0), \n         vec2(-delta.x, delta.y), vec2(0.0, delta.y), delta); \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    vec3 col = vec3(0.0); \n    for (int i = 0; i < 9; ++i)\n    {\n        col += texture(TEXTURE, uv + offset[i]).rgb * kernel[i]; \n    }\n    \n    float simpleEdge = length(fwidth(texture(TEXTURE, uv)));\n    if (iMouse.z > 0.5) col = vec3(simpleEdge); \n\tfragColor = vec4(col, 1.0); \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define SIGMA 10.0\n#define BSIGMA 0.1\n#define MSIZE 15\n\nfloat kernel[MSIZE];\n\nfloat normpdf(in float x, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n}\n\nfloat normpdf3(in vec3 v, in float sigma)\n{\n\treturn 0.39894*exp(-0.5*dot(v,v)/(sigma*sigma))/sigma;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (iFrame < 10) {\n        vec3 c = texture(iChannel0, (fragCoord.xy / iResolution.xy)).rgb;\n        //declare stuff\n        const int kSize = (MSIZE-1)/2;\n        kernel[0] = 0.031225216;\n        kernel[1] = 0.033322271;\n        kernel[2] = 0.035206333;\n        kernel[3] = 0.036826804;\n        kernel[4] = 0.038138565;\n        kernel[5] = 0.039104044;\n        kernel[6] = 0.039695028;\n        kernel[7] = 0.039894000;\n        kernel[8] = 0.039695028;\n        kernel[9] = 0.039104044;\n        kernel[10] = 0.038138565;\n        kernel[11] = 0.036826804;\n        kernel[12] = 0.035206333;\n        kernel[13] = 0.033322271;\n        kernel[14] = 0.031225216;\n\n        /*\n        //create the 1-D kernel\n        for (int j = 0; j <= kSize; ++j) {\n            kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), SIGMA);\n        }\n        */\n\n        vec3 final_colour = vec3(0.0);\n        float Z = 0.0;\n\n        vec3 cc;\n        float factor;\n        float bZ = 1.0/normpdf(0.0, BSIGMA);\n        //read out the texels\n        for (int i = -kSize; i <= kSize; ++i)\n        {\n            for (int j = -kSize; j <= kSize; ++j)\n            {\n                cc = texture(iChannel0, (fragCoord.xy+vec2(float(i),float(j))) / iResolution.xy).rgb;\n                factor = normpdf3(cc-c, BSIGMA) * bZ * kernel[kSize+j] * kernel[kSize+i];\n                Z += factor;\n                final_colour += factor*cc;\n\n            }\n        }\n        fragColor = vec4(final_colour/Z, 1.0);\n    } else {\n        fragColor = vec4(texture(iChannel1, (fragCoord.xy / iResolution.xy)).rgb, 1.0);\n    }\n}","name":"Buf A","description":"","type":"buffer"}]}