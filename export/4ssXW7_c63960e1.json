{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"/* Compiled with Shaderforth: https://github.com/daeken/Shaderforth\n:globals\n\t@vec3 uniform =iResolution\n\t@float uniform =iTime\n\t@vec4 uniform =iDate\n;\n:m time iDate .w ;\n:m mtime iTime ;\n\n:m circle ( p r )\n\tp length r -\n;\n:m box ( p d )\n\t( p abs d - 0 max length )\n\tp abs d - =t\n\t\tt \\max 0 min\n\t\tt 0 max length\n\t+\n;\n:m roundbox ( p r d )\n\t p d box r -\n;\n\n:m intersect \\max ;\n:m union \\min ;\n:m subtract \\{ neg max } ;\n\n:m repeat! ( p c ) p c mod .5 c * - ;\n:m repeat ( f p c ) p c repeat! *f ;\n:m scale ( f p s ) p s / *f s length * ;\n:m rotate-cart ( f p a ) p a rotate-2d *f ;\n:m rotate ( f p a ) p [ a 0 ] + polar-norm *f ;\n\n: distance-field ( p:vec2 -> vec4 )\n\tp .y mtime 10 / p .y mtime + + sin 2 * * =a\n\t{ ( tp )\n\t\t{ ( rp )\n\t\t\tp [ a 0 ] + rp - logpolar->cart =xp\n\t\t\t[\n\t\t\t\t\t\trp\n\t\t\t\t\t\ttau 40 /\n\t\t\t\t\tbox\n\t\t\t\t\t\trp\n\t\t\t\t\t\ttau 40 /\n\t\t\t\t\tcircle\n\t\t\t\t\txp .y 10 * sin abs\n\t\t\t\tmix\n\t\t\t\t[\n\t\t\t\t\txp .y xp .x + 10 * sin 360 * abs\n\t\t\t\t\txp .x 17 * sin abs\n\t\t\t\t\txp .y 13 * sin abs\n\t\t\t\t] hsv->rgb\n\t\t\t]\n\t\t} tp tau 20 / repeat\n\t} p mtime - a rotate\n;\n\n:m texture ( d p )\n\tp distance-field .yzw =mat\n\t[ d neg 20 * 0 1 clamp mat * ]\n;\n\niResolution frag->position cart->logpolar =p\n[ p { distance-field .x } gradient p texture 1 ] =fragColor\n*/\n\nvec2 cart_logpolar(vec2 p) {\n\treturn vec2(atan((p).y, (p).x), log(length(p)));\n}\nvec3 hsv_rgb(vec3 hsv) {\n\treturn (mix(vec3(1.0, 1.0, 1.0), clamp((abs((mod((((hsv).x) / 60.0) + (vec3(0.0, 4.0, 2.0)), 6.0)) - 3.0)) - 1.0, 0.0, 1.0), (hsv).y)) * ((hsv).z);\n}\nvec2 polar_norm(vec2 p) {\n\treturn vec2(mod(((p).x) + 6.28318, 6.28318), (p).y);\n}\nvec2 logpolar_cart(vec2 p) {\n\treturn (vec2(cos((p).x), sin((p).x))) * (pow(2.71828, (p).y));\n}\nvec4 distance_field(vec2 p) {\n\tfloat a = ((p).y) * ((sin(((iTime) / 10.0) + (((p).y) + (iTime)))) * 2.0);\n\tvec2 xp = logpolar_cart(((p) + (vec2(a, 0.0))) - ((mod(polar_norm(((p) - (iTime)) + (vec2(a, 0.0))), 0.314159)) - 0.1570795));\n\tvec2 t = (abs((mod(polar_norm(((p) - (iTime)) + (vec2(a, 0.0))), 0.314159)) - 0.1570795)) - 0.1570795;\n\treturn vec4(mix((min(max((t).x, (t).y), 0.0)) + (length(max(t, 0.0))), (length((mod(polar_norm(((p) - (iTime)) + (vec2(a, 0.0))), 0.314159)) - 0.1570795)) - 0.1570795, abs(sin(((xp).y) * 10.0))), hsv_rgb(vec3(abs((sin((((xp).y) + ((xp).x)) * 10.0)) * 360.0), abs(sin(((xp).x) * 17.0)), abs(sin(((xp).y) * 13.0)))));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 p = cart_logpolar((((((fragCoord).xy) / ((iResolution).xy)) * 2.0) - 1.0) * (vec2(1.0, ((iResolution).y) / ((iResolution).x))));\n\tvec2 h = vec2(0.001, 0.0);\n\tvec3 mat = (distance_field(p)).yzw;\n\tfragColor = vec4(vec3((clamp((- (((distance_field(p)).x) / (abs(length((vec2(((distance_field((p) + (h))).x) - ((distance_field((p) - (h))).x), ((distance_field((p) + ((h).yx))).x) - ((distance_field((p) - ((h).yx))).x))) / (2.0 * ((h).x))))))) * 20.0, 0.0, 1.0)) * (mat)), 1.0);\n}\n","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ssXW7","date":"1402437848","viewed":531,"name":"Rave Spiral","username":"daeken","description":"Having fun with distance fields over polar coords.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["polar","shaderforth"],"hasliked":0,"parentid":"","parentname":""}}