{"ver":"0.1","info":{"id":"MfcyWN","date":"1730647223","viewed":109,"name":"Abstract Ray Marching","username":"pyroxenite","description":"Abstract broken ray marching","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","abstract"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 cam_pos = vec3(-3,0,-3);\nvec3 cam_dir = vec3(.7,0,.7);\nvec3 up = vec3(0,-1,0);\nvec3 light = vec3(5,1.0,0.0);\nint ITERATIONS = 20;\nfloat epsilon = .0001;\nvec3 faces[6] = vec3[6](\n    vec3(1.0,0.0,0.0),\n    vec3(-1.0,0.0,0.0),\n    vec3(0.0,1.0,0.0),\n    vec3(0.0,-1.0,0.0),\n    vec3(0.0,0.0,-1.0),\n    vec3(0.0,0.0,1.0)\n);\n\nint RAYS_PER_PIXEL = 3;\n\n//\tSimplex 4D Noise \n//\tby Ian McEwan, Stefan Gustavson (https://github.com/stegu/webgl-noise)\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nfloat permute(float x){return floor(mod(((x*34.0)+1.0)*x, 289.0));}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nfloat taylorInvSqrt(float r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nvec4 grad4(float j, vec4 ip){\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n}\n\nfloat snoise(vec4 v){\n  const vec2  C = vec2( 0.138196601125010504,  // (5 - sqrt(5))/20  G4\n                        0.309016994374947451); // (sqrt(5) - 1)/4   F4\n// First corner\n  vec4 i  = floor(v + dot(v, C.yyyy) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n// Other corners\n\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n//  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  // i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  //  x0 = x0 - 0.0 + 0.0 * C \n  vec4 x1 = x0 - i1 + 1.0 * C.xxxx;\n  vec4 x2 = x0 - i2 + 2.0 * C.xxxx;\n  vec4 x3 = x0 - i3 + 3.0 * C.xxxx;\n  vec4 x4 = x0 - 1.0 + 4.0 * C.xxxx;\n\n// Permutations\n  i = mod(i, 289.0); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n// Gradients\n// ( 7*7*6 points uniformly over a cube, mapped onto a 4-octahedron.)\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n// Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n// Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n}\n\nvec3 dir(vec2 screen){\n    vec3 on_screen = cam_pos + cam_dir;\n    \n    vec3 x = cross(cam_dir, up);\n    on_screen += (x * screen.x + up * screen.y) * 2.0;\n    return on_screen - cam_pos;\n}\n\nfloat sphere_sdf(vec3 pos, vec3 center, float r){\n    vec3 to_center = (pos - center);\n    return pow(dot(to_center,to_center), .5) - r;\n}\n\nfloat box_sdf(vec3 pos, vec3 center, vec3 b) {\n  vec3 q = abs(pos - center) - b;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);\n}\n\nfloat rounded_box_sdf(vec3 pos, vec3 center, vec3 b, float r) {\n  vec3 q = abs(pos - center) - b + r;\n  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0) - r;\n}\n\n//float box_sdf(vec3 pos, vec3 center){\n//    vec3 to_center = (center - pos);\n//    int argmin_i = 0;\n//    float min_dot = 1000000.0;\n//    for (int i = 0; i < 6; i += 1){\n//        float d = dot(faces[i], to_center);\n//        argmin_i = d < min_dot ? i : argmin_i;\n//        min_dot = d < min_dot ? d : min_dot;\n//    }\n//    return dot(to_center/(min_dot - sign(min_dot)*epsilon) - to_center, faces[argmin_i]);\n//}\n\nfloat smin( float a, float b, float k )\n{\n    k *= log(2.0);\n    float x = b-a;\n    return abs(x/k) > 10.0 ? min(a, b) : a + x/(1.0-exp2(x/k));\n}\n\nfloat repeated( vec3 r_pos, vec3 steps )\n{\n   r_pos = r_pos - steps*round(r_pos/steps);\n   float rand = snoise(vec4(r_pos / 2.0, iTime * .5));\n   return smin(\n       rounded_box_sdf(r_pos, vec3(0.0,2.0,0.0), vec3(0.1,10.0,0.1), 0.1),\n       sphere_sdf(r_pos, vec3(0.0,0.0,0.0), 2.0 + rand), 1.0\n   );\n}\n\nfloat frac(float x) {\n    return x - floor(x);\n}\n\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    cam_pos = vec3((iTime)*1.0, (iTime)*1., 0);//vec3(sin(iTime), 0.0, cos(iTime)) * 20.0;\n    cam_dir = vec3(.7,0,.7);//-cam_pos/pow(dot(cam_pos, cam_pos),.5);\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y;\n    vec2 screen_pos = 2.0 * (uv - vec2(0.5 * iResolution.x/iResolution.y,0.5));\n    \n    // Time varying pixel color\n    vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n    vec3 r_dir = dir(screen_pos);\n    r_dir /= pow(dot(r_dir,r_dir), .5);\n    \n    vec3 steps = vec3(8.0, 10.0, 8.0);\n    \n    vec3 r_pos = cam_pos + cam_dir * 16.0;\n    \n    vec3 grad;\n    float total_dist = 0.0;\n    vec3 r_dir_0 = r_dir;\n    for (int refl=0; refl<RAYS_PER_PIXEL; refl+=1) {\n        for (int i = 0; i < ITERATIONS; i += 1){\n            \n            float d = repeated(r_pos, steps);\n            r_dir = d * vec3(0.0,-1.0,0.0) * .1 +  r_dir;\n            r_pos += r_dir * d;\n            total_dist += d;\n        }\n        float fp = repeated(r_pos, steps);\n        vec3  ppx = r_pos + vec3(epsilon, 0, 0);\n        vec3 ppy = r_pos + vec3(0, epsilon, 0);\n        vec3  ppz = r_pos + vec3(0, 0, epsilon);\n        grad = vec3(\n            repeated(ppx, steps) - fp,\n            repeated(ppy, steps) - fp,\n            repeated(ppz, steps) - fp\n        ) / epsilon;\n        grad = grad / length(grad);\n        \n        r_dir = abs(fp)<1.0 ? reflect(r_dir, grad) : r_dir;  \n    }\n\n    //grad = max(vec3(0.0), grad);\n    // Output to screen\n    vec3 sun_dir = vec3(-8.,-10.0, 0.0);\n    sun_dir /= length(sun_dir);\n    //float l = max(0.0, dot(grad, sun_dir)) * (30.0 / total_dist);\n    float l = max(dot(r_dir_0, r_dir) , 0.0);\n    //fragColor = vec4(dot(r_pos - cam_pos,r_pos - cam_pos) / 4000.0);\n    //fragColor = vec4(grad, 0.0);\n    vec3 albedo = vec3(texture(iChannel0, r_pos.xy));\n    fragColor = vec4(albedo * l, 1.0);\n    //fragColor = texture(iChannel0, uv);\n}","name":"Image","description":"","type":"image"}]}