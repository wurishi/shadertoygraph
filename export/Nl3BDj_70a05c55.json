{"ver":"0.1","info":{"id":"Nl3BDj","date":"1663631467","viewed":162,"name":"truchet labyrinth 3d","username":"jt","description":"Extruded [url=https://www.shadertoy.com/view/stdfDB]truchet labyrinth sdf[/url]","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","truchet","labyrinth"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/Nl3BDj truchet labyrinth 3d by jt\n// Extruded https://www.shadertoy.com/view/stdfDB truchet labyrinth sdf\n\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n\n// https://www.shadertoy.com/view/WttXWX \"Best\" Integer Hash by FabriceNeyret2\n// implementing Chris Wellons https://nullprogram.com/blog/2018/07/31/\nuint triple32(uint x)\n{\n    x ^= x >> 17;\n    x *= 0xed5ad4bbU;\n    x ^= x >> 11;\n    x *= 0xac4c1b51U;\n    x ^= x >> 15;\n    x *= 0x31848babU;\n    x ^= x >> 14;\n    return x;\n}\n\nfloat hash(uint x)\n{\n    return float(triple32(x)) / float(0xffffffffU);\n}\n\nuint hashi(uvec2 v)\n{\n    return triple32(v.x + triple32(v.y));\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdBox( in vec2 p, in vec2 b )\n{\n    vec2 d = abs(p)-b;\n    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);\n}\n\n// https://iquilezles.org/articles/distfunctions\nfloat sdOrientedBox( in vec2 p, in vec2 a, in vec2 b, float th )\n{\n    float l = length(b-a);\n    vec2  d = (b-a)/l;\n    vec2  q = (p-(a+b)*0.5);\n          q = mat2(d.x,-d.y,d.y,d.x)*q;\n          q = abs(q)-vec2(l,th)*0.5;\n    return length(max(q,0.0)) + min(max(q.x,q.y),0.0);    \n}\n\n// Create infinite copies of an object -  https://iquilezles.org/articles/distfunctions\nvec2 opRep(in vec2 p)\n{\n    return p - 2.0*round(p/2.0);\n    //return fract(p) - 1.0;\n}\n\nivec2 opRepIdx(in vec2 p)\n{\n    return ivec2(floor((p + 1.0) / 2.0));\n}\n\nuint opRepIdxRnd(in vec2 p)\n{\n    return hashi(uvec2(opRepIdx(p)));\n    //return hashi(triple32(uint(iFrame/100)) + uvec2(opRepIdx(p)));\n}\n\nbool opRepIdxRndBool(in vec2 p)\n{\n    return (opRepIdxRnd(p) & 1u) != 0u;\n}\n\nfloat labyrinth(in vec2 p)\n{\n    vec2 r = opRep(p); // coordinates inside tile\n    //float d = 1.0 / 0.0;\n    float d = DIST_MAX; // maximal distance\n\n    float th = 0.1; // wall thickness\n    float l = 1.0 + th / 4.0; // wall length\n    mat2 m = mat2(vec2(1,1),vec2(-1,1)); // 45 degree rotation\n\n    // naive method: traverse 3x3 tiles\n    //for(int v = -1; v <= +1; v++)\n    //{\n    //    for(int u = -1; u <= +1; u++)\n    //    {\n\n    // kastorp's optimization: traverse only 2x2 tiles (instead of 3x3),\n    // chosen depending on where in the tile the current point is located.\n    ivec2 oo = -ivec2(step(vec2(0), r));\n    for(int v = oo.y; v <= oo.y+1; v++)\n    {\n        for(int u = oo.x; u <= oo.x+1; u++)\n        {\n            vec2 o = 2.0 * vec2(u, v); // offset\n            if(opRepIdxRndBool(p - o))\n                //d = min(d, sdOrientedBox(r + o, vec2(-l,+l), vec2(+l,-l), th));\n                d = min(d, sdBox((r + o)*m, vec2(th/sqrt(2.0),2.0+th/sqrt(2.0)))/sqrt(2.0));\n            else\n                //d = min(d, sdOrientedBox(r + o, vec2(-l,-l), vec2(+l,+l), th));\n                d = min(d, sdBox(m*(r + o), vec2(th/sqrt(2.0),2.0+th/sqrt(2.0)))/sqrt(2.0));\n                \n        }\n    }\n\n    return d;\n}\n\nfloat extrude_labyrinth(vec3 p)\n{\n    float dp = p.z; // distance to plane\n    float df = labyrinth(p.xy); // distance to 2d SDF\n    //return max(df, dp); // 3dify - not an exact distance field\n    \n    // Correct SDF, as suggested by iq - thanks!\n    vec2 w = vec2(df, dp);\n    return min(max(w.x, w.y), 0.0) + length(max(w, 0.0));\n    \n    //return min(max(df, dp), 0.0) + length(max(vec2(df, dp), 0.0)); // rewritten to compare to incorrect approach\n}\n\nfloat halfspace(vec3 p, float d)\n{\n    return p.z - d;\n}\n\nfloat map(vec3 p)\n{\n    float d = mix(0.01, 0.1, 0.5 + 0.5 * cos(iTime));\n    return\n        min\n        (\n            extrude_labyrinth(p),\n            //extrude_labyrinth(p) - 0.1, // TEST: With offset incorrect SDF retains sharp edges while correct SDF aquires rounded edges.\n            halfspace(p, -1.2)\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return\n        normalize\n        (\n            k.xyy * map(p + k.xyy*h)\n            +\n            k.yyx * map(p + k.yyx*h)\n            +\n            k.yxy * map(p + k.yxy*h)\n            +\n            k.xxx * map(p + k.xxx*h)\n        );\n}\n\nfloat trace(vec3 ro, vec3 rd)\n{\n    for(float t = 0.0; t < DIST_MAX;)\n    {\n        float h = map(ro + rd * t);\n        if(h < EPSILON)\n            return t;\n        t += h;\n    }\n    return DIST_MAX;\n}\n\n// https://iquilezles.org/articles/rmshadows\nfloat shadow( in vec3 ro, in vec3 rd, float mint, float maxt )\n{\n    for( float t=mint; t<maxt; )\n    {\n        float h = map(ro + rd*t);\n        if( h<EPSILON )\n            return 0.0;\n        t += h;\n    }\n    return 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map( pos + h*nor );\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\n#define pi 3.1415926\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 ndc = 2.0 * uv - 1.0;\n    ndc.x *= float(iResolution.x) / float(iResolution.y);\n    float mx = 2.0 * pi * float(iMouse.x) / float(iResolution.x);\n    float my = pi / 2.0 + pi / 2.0 * float(iMouse.y) / float(iResolution.y);\n    mx = (iMouse.x != 0.0) ? mx : 2.0 * pi * fract(iTime * 0.01);\n    my = (iMouse.y != 0.0) ? my : pi * 2.5 / 4.0;;\n\n    mat2 R = mat2(vec2(cos(mx), sin(mx)), vec2(-sin(mx), cos(mx)));\n    vec3 ro = vec3(0.0, 0.0, -5.0 );//vec3(0.0, -10.0 * my, 0.0);\n    //mat2 S = mat2(vec2(0.0, 1.0), vec2(-1.0, 0.0));\n    mat2 S = mat2(vec2(cos(my), sin(my)), vec2(-sin(my), cos(my)));\n    ro.yz=S*ro.yz;\n    ro.xy = R * ro.xy;\n\n    vec3 rd = normalize(vec3(0.5 * ndc.xy, 1.0)); // NOTE: omitting normalization results in clipped edges artifact\n    rd.yz=S*rd.yz;\n    rd.xy = R * rd.xy;\n\n    float dist = trace(ro, rd);\n    vec3 dst = ro + rd * dist;\n    vec3 n = normal(dst);\n\n    vec3 lightdir = normalize(vec3(1.0, 1.0, 1.0));\n    vec3 ambient = vec3(0.4);\n    float brightness = max(dot(lightdir, n), 0.0);\n    brightness *= shadow(ro+rd*dist,lightdir, 0.01, DIST_MAX); // XXX artifacts on cylinder XXX\n    vec3 color = vec3(1.0);\n    color *= (n * 0.5 + 0.5);\n    color = (ambient * calcAO(dst, n) + brightness) * color;\n\n    fragColor = mix(vec4(color, 1.0), vec4(0.0), step(DIST_MAX, dist));\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}