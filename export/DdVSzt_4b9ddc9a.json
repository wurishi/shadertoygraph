{"ver":"0.1","info":{"id":"DdVSzt","date":"1681466001","viewed":67,"name":"Desert dunes horizon","username":"Tinnaaaa","description":"Dunes in desert moving ","likes":3,"published":1,"flags":0,"usePreview":0,"tags":["3dlandscape"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float terrain(vec3 p);\nvec3 sky(vec3 d);\nvec3 getNormal(vec3 p);\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord - 0.5 * iResolution.xy) / iResolution.y * 1.9; // Increase the field of view\n\n    float t = iTime * 0.5;\n    vec3 cameraPos = vec3(0.0, 3.0, -15.0 - 2.0 * t);\n    vec3 cameraTarget = vec3(0.0, 2.0, -14.0 - 2.0 * t);\n    vec3 cameraUp = vec3(0.0, 1.0, 0.0);\n    vec3 cameraDir = normalize(cameraTarget - cameraPos);\n    vec3 cameraRight = normalize(cross(cameraUp, cameraDir));\n    vec3 cameraPlaneNormal = cross(cameraDir, cameraRight);\n    vec3 rayDir = normalize(uv.x * cameraRight + uv.y * cameraPlaneNormal + 2.0 * cameraDir);\n\n    vec3 col = sky(rayDir);\n\n    vec3 p = cameraPos;\n    vec3 d = rayDir;\n    for (int i = 0; i < 64; i++) {\n        float dist = terrain(p);\n        if (dist < 0.001) {\n            vec3 normal = getNormal(p);\n            vec3 lightDirection = normalize(vec3(1.0, 1.0, 1.0));\n            float diffuse = max(0.0, dot(normal, lightDirection));\n            vec3 ambient = vec3(0.1, 0.1, 0.1);\n            vec3 lightColor = vec3(1.0, 1.0, 1.0);\n            vec3 objectColor = vec3(0.9, 0.7, 0.4); // Sand color\n            col = mix(col, ambient + lightColor * objectColor * diffuse, 0.8);\n            break;\n        }\n        p += d * dist;\n    }\n\n    fragColor = vec4(col, 1.0);\n}\n\nfloat terrain(vec3 p) {\n    return p.y - 0.2 * (1.0 + sin(1.2 * p.x + 3.7 * p.z)) * (1.0 + cos(3.2 * p.z));\n}\n\nvec3 sky(vec3 d) {\n    return mix(vec3(0.239,0.325,0.420), vec3(0.7, 0.8, 0.9), 0.5 * (1.0 + d.y));\n}\n\nvec3 getNormal(vec3 p) {\n    vec2 e = vec2(0.001, 0.0);\n    return normalize(vec3(\n        terrain(p + e.xyy) - terrain(p - e.xyy),\n        terrain(p + e.yxy) - terrain(p - e.yxy),\n        terrain(p + e.yyx) - terrain(p - e.yyx)\n    ));\n}\n","name":"Image","description":"","type":"image"}]}