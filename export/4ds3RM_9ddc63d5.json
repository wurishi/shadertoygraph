{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[],"code":"\nvec3 cam;\n\nint cnt = 0;\nvec2 z = vec2(0.0, 0.0);\n\nvec2 fragCoord;\nvec4 fragColor;\nvoid circ(vec2 center, float limit, float radius, float thickness) {\n\tvec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y; // this replaces the 3, 2 coeffs\n\tp = cam.xy + pow(cam.z, 5.0)*p;\n\tfloat acc = limit / .1;\n\tvec3 c = vec3(center.x, center.y, radius*pow(cam.z, 4.0));\n\tif(cam.z < limit) c.z = (radius*pow(limit, 4.0))/(pow(limit, 4.0-(acc*(1.0/limit))))*pow(cam.z, 4.0-(acc*(1.0/limit)));\n\tif((pow((p.x-c.x), 2.0) + pow((p.y - c.y), 2.0) > pow(c.z, 2.0)) && (pow((p.x-c.x), 2.0) + pow((p.y - c.y), 2.0) < pow((c.z+thickness*c.z), 2.0))) {\n\t\tfragColor = vec4(.25, .8, .5, 1.0);\n\t}\n}\n\nvoid rect(vec4 desc, float limit, float stretch, float thickness) {\n\t// desc = center, w, h\n\tvec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y; // this replaces the 3, 2 coeffs\n\tp = cam.xy + pow(cam.z, 5.0)*p;\n\tfloat acc = limit / .1;\n\tfloat z = stretch*pow(cam.z, 4.0);\n\tif(cam.z < limit) z = (stretch*pow(limit, 4.0))/(pow(limit, 4.0-(acc*(1.0/limit))))*pow(cam.z, 4.0-(acc*(1.0/limit)));\n\tdesc.zw = desc.zw * z;\n\tif(p.x > (desc.x - desc.z/2.0) && p.x < (desc.x + desc.z/2.0) && p.y > (desc.y - desc.w/2.0) && p.y < (desc.y + desc.w/2.0)) {\n\t\tdesc.zw = desc.zw*(1.0-thickness);\n\t\tif(!(p.x > (desc.x - desc.z/2.0) && p.x < (desc.x + desc.z/2.0) && p.y > (desc.y - desc.w/2.0) && p.y < (desc.y + desc.w/2.0))) {\n\t\t\tfragColor = vec4(.25, .8, .5, 1.0);\n\t\t}\n\t}\n}\n\nvoid diamond(vec4 desc, float limit, float stretch, float thickness) {\n\t// desc = center, w, h\n\tvec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y; // this replaces the 3, 2 coeffs\n\tp = cam.xy + pow(cam.z, 5.0)*p;\n\tfloat z = stretch*pow(cam.z, 4.0);\n\n\tfloat theta = degrees(pow(cam.z, 1.0));\n\n\tvec2 tmp = p;\n\tp.x = (tmp.x-desc.x)*cos(theta) - (tmp.y-desc.y)*sin(theta) + desc.x;\n\tp.y = (tmp.x-desc.x)*sin(theta) + (tmp.y-desc.y)*cos(theta) + desc.y;\n\t\n\ttmp = desc.xy;\n\t//desc.x = tmp.x*cos(theta) - tmp.y*sin(theta);\n\t//desc.y = tmp.x*sin(theta) + tmp.y*cos(theta);\n\t\n\ttmp = desc.zw;\n\t//desc.z = tmp.x*cos(theta) - tmp.y*sin(theta);\n\t//desc.w = tmp.x*sin(theta) + tmp.y*cos(theta);\n\t\n\t\n\tfloat acc = limit / .1;\n\tif(cam.z < limit) z = (stretch*pow(limit, 4.0))/(pow(limit, 4.0-(acc*(1.0/limit))))*pow(cam.z, 4.0-(acc*(1.0/limit)));\n\tdesc.zw = desc.zw * z;\n\tif(p.x > (desc.x - desc.z/2.0) && p.x < (desc.x + desc.z/2.0) && p.y > (desc.y - desc.w/2.0) && p.y < (desc.y + desc.w/2.0)) {\n\t\tdesc.zw = desc.zw*(1.0-thickness);\n\t\tif(!(p.x > (desc.x - desc.z/2.0) && p.x < (desc.x + desc.z/2.0) && p.y > (desc.y - desc.w/2.0) && p.y < (desc.y + desc.w/2.0))) {\n\t\t\tfragColor = vec4(.25, .8, .5, 1.0);\n\t\t}\n\t}\n}\n\n//\tif(p.x <= ((desc.x+desc.z)/2.0) && p.x >= (desc.x) && p.y <= (desc.y) && p.y >= (desc.y-desc.w/2.0)) {\n\nvoid mainImage( out vec4 oFragColor, in vec2 iFragCoord ) {\n    cam  = vec3(-1.74981, .0, clamp(1.0/iTime, 0.0, 1.0));;\n    fragCoord = iFragCoord;\n\tvec2 p = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;\n    p.x *= iResolution.x/iResolution.y; // this replaces the 3, 2 coeffs\n\tp = cam.xy + pow(cam.z, 5.0)*p;\n\t\n\tfor (int i = 0; i < 100; ++i){\n\t\tif (z.x*z.x + z.y*z.y <= 4.0) {\n\t\t\tz = vec2(z.x*z.x - z.y*z.y + p.x, z.r*z.y+z.y*z.r + p.y);\n\t\t\tcnt++;\n\t\t} else { break; }\n}\n        if(cnt==100) { fragColor = vec4(0.0, 0.0, 0.0, 1.0); } else { \n\t\t\tfloat col = (mod(float(cnt)+iTime*9.0,10.0)/10.0);\n\t\t\tfloat col2 = (mod(float(cnt)+iTime*2.0,10.0)/10.0);\n\t\t\tfragColor = vec4((col2+col2)/2.0, (col+col2)/2.0, col+.2, 1.1);\n\t\t}\n\t\n\tvec2 center = vec2(-.745, 0.186);\n\tcirc(center, .25, .1, .08);\n\t\n\tcenter = vec2(-1.74981, 0.0);\n\tdiamond(vec4(center, 1.0, 1.0), .17, .2, .08);\n\t\n\tcenter = vec2(-0.088, 0.654);\n\trect(vec4(center, 1.0, 1.0), .17, .2, .08);\n\toFragColor = fragColor;\n\t}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4ds3RM","date":"1366007366","viewed":180,"name":"flipbrot","username":"wjkeller","description":"brot","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["brot"],"hasliked":0,"parentid":"","parentname":""}}