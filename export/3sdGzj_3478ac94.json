{"ver":"0.1","info":{"id":"3sdGzj","date":"1568875003","viewed":584,"name":"Square Holes","username":"caeonosphere","description":"My first shader! Some simple fake shadows in an isometric perspective.","likes":16,"published":3,"flags":0,"usePreview":0,"tags":["2d","shadows","isometric"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define M_PI 3.14159\n\nfloat hash21(vec2 p) {\n\tp = fract(p*vec2(1.34, 435.345));\n    p += dot(p, p+34.23);\n    return fract(p.x*p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord - .5 * iResolution.xy)/iResolution.y;\n    uv += iTime * vec2(.1, .06789);\n    uv *= vec2(8, 16);\n    // Build a 3D rotation matrix.\n    float yTheta = M_PI / 4.;\n    mat3 yRot = mat3(cos(yTheta), 0, sin(yTheta),\n                     0, 1, 0,\n                     -sin(yTheta), 0, cos(yTheta));\n    // Rotate the uv.\n    uv = (vec3(uv.x, 0, uv.y) * yRot).xz;\n\n    vec2 id = floor(uv);\n    vec2 lv = fract(uv);\n    \n    float border = hash21(id * 6.) < .6 ? .1 : .2;\n    float theta = iTime + hash21(id * 5.) * 2. * M_PI;\n    float period = 1. + hash21(id * 4.);\n    period *= .2;\n    float thetaOffset = hash21(id * 3.) * 2. * M_PI;\n    float amplitude = .5 + hash21(id * 2.);\n    float ampOffset = hash21(id);\n    float depth = min(1. - border, 2. + sin(theta * period + thetaOffset) * amplitude - ampOffset);\n    vec3 col;\n    if (lv.x < border || lv.x > 1. - border || lv.y < border || lv.y > 1. - border) {\n        // borders\n        col = vec3(.7);\n    } else if(lv.x < depth && lv.y < depth) {\n        // floor\n        float mult = mix(.4, 1., depth + border);\n        col = vec3(.7) * mult;\n        // wall shadow\n        if (lv.x > (depth - .5 + border / 2.) * 2. || lv.y < 1. - depth) {\n            col *= .8;\n        }\n    } else {\n        // walls\n        col = vec3(mix(.3, .6, length(lv)));\n        if (lv.x > lv.y) {\n            col *= .8;\n        }\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}