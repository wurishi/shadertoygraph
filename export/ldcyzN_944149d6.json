{"ver":"0.1","info":{"id":"ldcyzN","date":"1518043425","viewed":152,"name":"Tri-Colored Cube CIS 566","username":"lsx","description":"Tri-Colored Cube CIS566\nBased on gif https://i.redd.it/e8dcpl3rw32z.gif","likes":11,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//Assignment 3 CIS 566\n//Adapted from https://www.shadertoy.com/view/Xll3DM\n\n#define MAX_STEPS 96\n#define MIN_DIST 0.001\n#define NORMAL_SMOOTHNESS 0.02\n#define PI 3.14159265359\n\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));   \n}\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c);\n}\n\nfloat Union(float a, float b)\n{\n    return min(a, b);\n}\n\nfloat Sphere(float radius, vec3 position)\n{\n    return length(position) - radius;\n}\n\nfloat Box(float radius, vec3 position)\n{\n    return max(max(abs(position.x), abs(position.y)), abs(position.z)) - radius;\n}\n\nfloat f6(float x)\n{\n    return sign(fract((x - 1.0) / 4.0) * 4.0 - 3.0) * 0.5 + 0.5;\n}\n\nfloat Scene(vec3 position)\n{\n    float map = -Sphere(24.0, position);\n    map = Union(map, Box(3.0, position));\n    return map;\n}\n\nfloat Scene2(vec3 position)\n{\n    float map = -Sphere(24.0, position);\n    map = Union(map, Box(5.0, position));\n    return map;\n}\n\nvec3 Normal(vec3 position)\n{\n\tvec3 offset = vec3(NORMAL_SMOOTHNESS, 0, 0);\n    \n    vec3 normal = vec3\n    (\n        Scene(position - offset.xyz) - Scene(position + offset.xyz),\n        Scene(position - offset.zxy) - Scene(position + offset.zxy),\n        Scene(position - offset.yzx) - Scene(position + offset.yzx)\n    );\n    \n    return normalize(normal);\n}\n\nvec3 RayMarch(vec3 origin,vec3 direction)\n{\n    float hitDist = 0.0;\n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Scene(origin + direction * hitDist);\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return origin + direction * hitDist;\n}\n\nvec3 RayMarch2(vec3 origin,vec3 direction)\n{\n    float hitDist = 0.0;\n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Scene2(origin + direction * hitDist);\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return origin + direction * hitDist;\n}\n\nvec3 Shade(vec3 position, vec3 normal, vec3 rayOrigin,vec3 rayDirection)\n{\n    vec3 white = vec3(250, 250, 250)/255.0;\n    vec3 color = vec3(0.0);\n    \n    //Face Colors\n    vec3 leftColor =  vec3(169, 217, 198) / 255.0;\n    vec3 frontColor = vec3(232, 78,  128) / 255.0;\n    vec3 topColor =   vec3(81,  65,   96) / 255.0;\n    \n    color = mix(color, leftColor,  abs( dot(normal, vec3(1,0,0) ) ) );\n    color = mix(color, frontColor, abs( dot(normal, vec3(0,0,1) ) ) );\n    color = mix(color, topColor,   abs( dot(normal, vec3(0,1,0) ) ) );\n    \n    //Background\n    color = mix(color, white, step(22.0, length(position)));\n    \n    return color;\n}\n\nvec3 Shade2(vec3 position)\n{\n    vec3 white = vec3(1.0);\n    vec3 black = vec3(0.0);\n    vec3 color = vec3(0.0);\n    \n    //Background\n    color = mix(white, black, step(22.0, length(position)));\n    \n    return color;\n}\n\nfloat transform(float a, float b, float change)\n{\n    return a + (b - a) * change;\n}\n\nfloat f1(float x)\n{\n    return min(fract(x /4.0) * 4.0, 1.0);\n}\n\nfloat f2(float x)\n{\n    return -sign((fract(x/8.0)*2.0 - 1.0));\n}\n\nfloat f3(float x)\n{\n    return smoothstep(0.0, 1.0, f1(x) * f2(x)  -(f2(x) * 0.5 - 0.5));\n}\n\nfloat f4(float x)\n{\n    return smoothstep(0.0, 1.0, clamp(x -2.0, 0.0, 1.0));\n}\n\nfloat f5(float x)\n{\n    return smoothstep(0.0, 1.0, clamp(x -6.0, 0.0, 1.0));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float iTime2 = iTime * 1.66;\n    \n    vec2 aspect = iResolution.xy / iResolution.y;\n    vec2 uv = fragCoord.xy / iResolution.xy - 0.5;\n    uv.x *= iResolution.x / iResolution.y;\n    vec2 uvoriginal = uv;\n    float change = f3(mod(iTime2, 8.0));\n    float angle = transform(0.0,  -2.0 / 3.0 * PI, change);\n    \n    mat2 rotateUV = Rotate(angle);\n    uv *= rotateUV;\n    \n    float size = 15.0;\n    vec3 rayOrigin = vec3((uv.x) * size , (uv.y) * size, -20.0);\n    vec3 rayDirection = normalize(vec3(0.0, 0.0, 1.0));\n    vec3 rayOrigino = vec3((uvoriginal.x) * size , (uvoriginal.y) * size, -20.0);\n    vec3 rayDirectiono = rayDirection;\n    \n    mat2 rotateX = Rotate(-(atan(1.0 / sqrt(2.0))));\n    mat2 rotateY = Rotate(1.0 / 4.0 * PI);\n    \n    \n    change = f4(mod(iTime2, 8.0));\n    angle = transform(0.0,  1.0 / 2.0 * PI, change);\n    mat3 rotation = rotationMatrix(vec3(1.0, 0.0, 0.0), angle);\n    \n    change = f5(mod(iTime2, 8.0));\n    angle = transform(0.0,  -1.0 / 2.0 * PI, change);\n    mat3 rotation2 = rotationMatrix(vec3(1.0, 0.0, 0.0),angle);\n    \n    rayOrigin.yz *= rotateX;\n    rayOrigin.xz *= rotateY;\n    rayDirection.yz *= rotateX;\n    rayDirection.xz *= rotateY;\n    rayOrigin *= rotation;\n    rayOrigin *= rotation2;\n    rayDirection *= rotation;\n    rayDirection *= rotation2;\n    \n    rayOrigino.yz *= rotateX;\n    rayOrigino.xz *= rotateY;\n    rayDirectiono.yz *= rotateX;\n    rayDirectiono.xz *= rotateY;\n\n    change = f6(mod(iTime2, 8.0));\n    vec3 scenePosition2 = RayMarch(rayOrigino, rayDirectiono);\n    vec3 scenePosition = RayMarch(rayOrigin, rayDirection);\n    scenePosition = mix(scenePosition, RayMarch2(rayOrigin, rayDirection), change);\n\n    float mask = step(22.0, length(scenePosition2));\n    mask *= change;\n   \n    //vec3 white = vec3(250, 250, 250)/255.0;\n    vec3 outColor = (1.0 - mask) * Shade(scenePosition,Normal(scenePosition),rayOrigin,rayDirection);\n    outColor += vec3(mask * 250.0/255.0);\n\tfragColor = vec4(outColor, 1.0);\n}","name":"Image","description":"","type":"image"}]}