{"ver":"0.1","info":{"id":"slByR1","date":"1650982370","viewed":1518,"name":"LEGO Sanctuary","username":"Mathis","description":"The noise texture might not load fast enough, press R to reset the scene and the path tracer when it is loaded.","likes":70,"published":1,"flags":48,"usePreview":1,"tags":["global","illumination","tracing","lego","path"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/*\nI like LEGO\n\n\nSome info:\n    My initial attempt traced the 3D brick-geometry directly\n        Performance was good but the compilation time was too long\n        Isometric projection solves this since it samples pre-rendered images instead\n    An octree (128^3) is used to accelerate primary rays\n        It stores brick index, offsets, colors and other attributes\n        I might have used some illegal building techniques to reduce compilation time :)\n    PBR\n        No\n    Secondary rays are traced in screen space\n        A quadtree is used to accelerate secondary rays\n            It has a fixed depth to simplify sampling offsets\n                This means supersampling only happens every 6th frame\n            It's THICC, rays are accelerated behind geometry as well\n        Black geometry are placed in the scene to reduce light leaking\n\n\n\n\nLogo by zduny (thank you):\n    https://www.shadertoy.com/view/3tBczt\n\n\n\n\nControls:\n    Press R to reset the path tracer\n    Uncomment \"#define Clay\" in the Common-tab to enable a clay render\n*/\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign = -mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D = vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D = D.xzy;\n    else if (UV.y>2048.) D = D.zxy;\n    return texture(iChannel3,D);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec3 Color = texture(iChannel2,fragCoord*IRES).xyz;\n    //Exponential color space\n    Color = 1.-exp(-1.2*Color);\n    \n    //\n    //Uncomment to view the cubemap (octrees and prerendered images)\n    //Use the mouse to scroll\n    //\n    /*\n    vec2 CMUV = fragCoord*2.+vec2(0.,iMouse.y*IRES.y*1024.*7.);\n    if (DFBox(CMUV,vec2(1024.,1024.*6.))<0.) {\n        vec4 CMS = textureCube(CMUV);\n        Color = CMS.xyz;\n        if (CMUV.y>2370. && CMUV.y<5120. && DFBox(CMUV-vec2(0.,2370.),vec2(256.,128.))>0.) {\n            if (CMS.w<9999.) Color = CMS.xyz*0.5+0.5;\n            else Color = vec3(fract((CMUV-vec2(0.,2370.))*I128)*0.1,0.);\n        }\n        \n    }\n    //*/\n    \n    //Gamma correction\n    fragColor = vec4(pow(Color,vec3(0.45)),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[],"code":"//CONTROLS\n#define DOF\n//#define CLAY\n\n//CONSTANTS\nconst float C_MAX=32.;\nconst vec3 SunDir=normalize(vec3(1.,0.7,-0.4));\nconst vec2 eps=vec2(0.002,0.);\nconst float Sqrt05=sqrt(0.5);\nconst float Sqrt2=sqrt(2.);\nconst float I1024=1./1024.;\nconst float I512=1./512.;\nconst float I128=1./128.;\nconst float I64=1./64.;\nconst float I32=1./32.;\nconst float I16=1./16.;\nconst float I6=1./6.;\nconst float I3=1./3.;\nconst float I09=1./0.9;\nconst float PI=3.141592653;\nconst float IsoDistance=64.;\nconst float IsoWidth=32.;\nconst float IsoAngle=39.26;\nconst vec3 IsoCenter=vec3(1.,0.,1.)*72.+0.05;\nconst vec3 IsoDir=normalize(vec3(cos(radians(IsoAngle)),-sin(radians(IsoAngle)),cos(radians(IsoAngle))));\nconst vec3 IsoPos=IsoCenter-IsoDir*IsoDistance;\nconst vec3 IIsoDir=1./IsoDir;\nconst vec3 IsoTan=normalize(cross(IsoDir,vec3(0.,1.,0.)));\nconst vec3 IsoBit=normalize(cross(IsoTan,IsoDir));\nconst vec3 LEGOSlope=normalize(vec3(-1.,1.,0.));\nconst vec3 LEGOISlope=normalize(vec3(-1.,-1.,0.));\nconst vec3 LEGOOSlope=normalize(vec3(-3.5/6.,1.,0.));\nconst vec3 SPOT_DIR=normalize(vec3(0.,1.,0.75));\n#define Aspect vec2(iChannelResolution[0].x/iChannelResolution[0].y,1.)\n#define IRES 1./iChannelResolution[0].xy\n#define HRES (iChannelResolution[0].xy*0.5)\n#define QTFrames (ceil(log2(iChannelResolution[0].y))-1.)\n#define InitialFrames 7\nstruct DF { float D; vec3 C; vec3 E; float R; };\nstruct HIT { float D; vec3 P; vec3 N; vec3 C; float M; };\n\n\n//LIGHT\nfloat Schlick(float R0, float COS) {\n    //Schlick approximation\n    return R0+(1.-R0)*pow(1.-COS,5.);\n}\n\nvec3 SampleSky(vec3 d) {\n    //Samples the sky\n    return vec3(0.2,0.6,1.)*(1.-0.5*d.y)*0.03+vec3(1.,0.3,0.1)*0.8*pow(dot(d,SunDir)*0.5+0.5,5.)+\n            +vec3(1.,0.1,0.1)*0.2*pow(dot(d,vec3(-SunDir.x,SunDir.y,-SunDir.z))*0.5+0.5,8.); //Dark sky\n}\n\n\n//MATH\nvec2 ABox(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {\n    vec3 tMin=(bmin-origin)*dir;\n    vec3 tMax=(bmax-origin)*dir;\n    vec3 t1=max(tMin,tMax);\n    vec3 t2=min(tMin,tMax);\n    return vec2(max(max(t2.x,t2.y),t2.z),min(min(t1.x,t1.y),t1.z));\n}\n\nvec2 ABox(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax) {\n    vec2 tMin=(bmin-origin)*dir;\n    vec2 tMax=(bmax-origin)*dir;\n    vec2 t1=max(tMin,tMax);\n    vec2 t2=min(tMin,tMax);\n    return vec2(max(t2.x,t2.y),min(t1.x,t1.y));\n}\n\nvec2 ABoxN(vec3 origin, vec3 idir, vec3 bmin, vec3 bmax, vec3 signdir, out vec3 N) {\n    vec3 tMin=(bmin-origin)*idir;\n    vec3 tMax=(bmax-origin)*idir;\n    vec3 t1=max(tMin,tMax);\n    vec3 t2=min(tMin,tMax);\n    N = -((t2.x>max(t2.y,t2.z))?vec3(signdir.x,0.,0.):((t2.y>t2.z)?vec3(0.,signdir.y,0.):vec3(0.,0.,signdir.z)));\n    return vec2(max(max(t2.x,t2.y),t2.z),min(min(t1.x,t1.y),t1.z));\n}\n\nvec2 ABoxNf(vec3 origin, vec3 idir, vec3 bmin, vec3 bmax, vec3 signdir, out vec3 N) {\n    vec3 tMin=(bmin-origin)*idir;\n    vec3 tMax=(bmax-origin)*idir;\n    vec3 t1=max(tMin,tMax);\n    vec3 t2=min(tMin,tMax);\n    N = ((t1.x<min(t1.y,t1.z))?vec3(signdir.x,0.,0.):((t1.y<t1.z)?vec3(0.,signdir.y,0.):vec3(0.,0.,signdir.z)));\n    return vec2(max(max(t2.x,t2.y),t2.z),min(min(t1.x,t1.y),t1.z));\n}\n\nfloat ABoxfar(vec3 origin, vec3 dir, vec3 bmin, vec3 bmax) {\n    vec3 tMin=(bmin-origin)*dir;\n    vec3 tMax=(bmax-origin)*dir;\n    vec3 t2=max(tMin,tMax);\n    return min(min(t2.x,t2.y),t2.z);\n}\n\nfloat ABoxfar(vec2 origin, vec2 dir, vec2 bmin, vec2 bmax) {\n    vec2 tMin=(bmin-origin)*dir;\n    vec2 tMax=(bmax-origin)*dir;\n    vec2 t2=max(tMin,tMax);\n    return min(t2.x,t2.y);\n}\n\nvec3 ggx(vec3 n, vec3 dir, vec3 rdir, float roughness, vec3 F0) {\n    float alpha = roughness * roughness;\n    float alpha2 = alpha * alpha;\n    float dotNL = clamp(dot(n, rdir), 0., 1.);\n    float dotNV = clamp(dot(n, dir), 0., 1.);\n    vec3 h = normalize(dir + rdir);\n    float dotNH = clamp(dot(n, h), 0., 1.);\n    float dotLH = clamp(dot(rdir, h), 0., 1.);\n    // GGX microfacet distribution function\n    float den = (alpha2 - 1.) * dotNH * dotNH + 1.;\n    float D = alpha2 / (PI * den * den);\n    // Fresnel with Schlick approximation\n    vec3 F = F0 + (1.0 - F0) * pow(1. - dotLH, 5.);\n    // Smith joint masking-shadowing function\n    float k = .5 * alpha;\n    float G = 1. / ((dotNL * (1.0 - k) + k) * (dotNV * (1. - k) + k));\n    return D * F * G;\n}\n\nvec3 RandSample(vec2 v) {\n    float theta=sqrt(v.x);\n    float phi=2.*3.14159*v.y;\n    float x=theta*cos(phi);\n    float z=theta*sin(phi);\n    return vec3(x,z,sqrt(max(0.,1.-v.x)));\n}\n\nmat3 TBN(vec3 N) {\n    vec3 Nb,Nt;\n    if (abs(N.y)>0.999) {\n        Nb=vec3(1.,0.,0.);\n        Nt=vec3(0.,0.,1.);\n    } else {\n    \tNb=normalize(cross(N,vec3(0.,1.,0.)));\n    \tNt=normalize(cross(Nb,N));\n    }\n    return mat3(Nb.x,Nt.x,N.x,Nb.y,Nt.y,N.y,Nb.z,Nt.z,N.z);\n}\n\nvec3 TBN(vec3 N, out vec3 O) {\n    O=normalize(cross(N,vec3(0.,1.,0.)));\n    return normalize(cross(O,N));\n}\n\nfloat DFLine(vec3 p, vec3 a, vec3 b) {\n    //Distance Field\n    vec3 ba=b-a;\n    float k=dot(p-a,ba)/dot(ba,ba);\n    return length((a+clamp(k,0.,1.)*(b-a))-p);\n}\n\nfloat DFBox(vec3 p, vec3 b) {\n    vec3 d=abs(p-b*0.5)-b*0.5;\n    return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\nfloat DFBoxC(vec3 p, vec3 b) {\n    vec3 d=abs(p)-b;\n    return min(max(d.x,max(d.y,d.z)),0.)+length(max(d,0.));\n}\n\nfloat DFBox(vec2 p, vec2 b) {\n    vec2 d=abs(p-b*0.5)-b*0.5;\n    return min(max(d.x,d.y),0.)+length(max(d,0.));\n}\n\nfloat smin(float a, float b, float k) {\n    //https://iquilezles.org/articles/smin\n    float h = max( k-abs(a-b), 0.0 )/k;\n    return min( a, b ) - h*h*h*k*(1.0/6.0);\n}\nvec2 Rotate(vec2 p, float ang) {\n    float c=cos(ang), s=sin(ang);\n    return vec2(p.x*c-p.y*s,p.x*s+p.y*c);\n}\n\n\n\n\n/*\nLEGO\n    Stud,rund,\n    111,211,2Slope,412,Rund131,\n    Kon131,131,231,431,2Slope2,\n    Slope,ISlope,OnlySlope,OnlySlope2,\n    Headlight,ISlope2\n*/\nvec2 BrickOffset2[18]=vec2[18](vec2(256.,0.),vec2(384.,0.),\n    vec2(512.,0.),vec2(640.,0.),vec2(0.,128.),vec2(256.,128.),vec2(768.,128.),\n    vec2(896.,0.),vec2(896.,256.),vec2(0.,384.),vec2(256.,384.),vec2(768.,512.),\n    vec2(0.,640.),vec2(256.,640.),vec2(512.,640.),vec2(640.,640.),\n    vec2(0.,896.),vec2(256.,896.)\n);\nvec3 BrickDim[18]=vec3[18](vec3(1.,2.,1.),vec3(1.,2.,1.),\n    vec3(1.,2.,1.),vec3(2.,2.,1.),vec3(2.,4.,2.),vec3(4.,2.,2.),vec3(1.,4.,1.),\n    vec3(1.,4.,1.),vec3(1.,4.,1.),vec3(2.,4.,1.),vec3(4.,4.,1.),vec3(2.,4.,2.),\n    vec3(2.,4.,1.),vec3(2.,4.,1.),vec3(1.,2.,1.),vec3(1.,2.,1.),\n    vec3(1.,4.,1.),vec3(2.,4.,1.)\n);\nvec3 BrickOffset3[18]=vec3[18](vec3(1.,0.,1.),vec3(1.,0.,1.),\n    vec3(1.,0.,1.),vec3(2.,0.,0.),vec3(1.5,0.,0.5),vec3(3.5,0.,-1.5),vec3(1.,0.,1.),\n    vec3(1.,0.,1.),vec3(1.,0.,1.),vec3(1.5,0.,0.5),vec3(3.5,0.,-1.5),vec3(1.5,0.,0.5),\n    vec3(1.5,0.,0.5),vec3(1.5,0.,0.5),vec3(1.,0.,1.),vec3(1.,0.,1.),\n    vec3(1.,0.,1.),vec3(1.5,0.,0.5)\n);\n\nfloat DFStud(vec3 p) {\n    float d=-smin(-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,1.,0.5))+0.3,-p.y+0.2,0.075);\n    return d;\n}\n\nvec4 TraceStud(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        RP=pos+dir*dist;\n        if (dist>FAR || RP.y<0.) break;\n        t=DFStud(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFStud(RP+eps.xyy)-DFStud(RP-eps.xyy),\n                        DFStud(RP+eps.yxy)-DFStud(RP-eps.yxy),\n                        DFStud(RP+eps.yyx)-DFStud(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFRund(vec3 p) {\n    float d=max(-smin(-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,1.,0.5))+0.5,-p.y+0.4,0.04),-p.y+0.3);\n    d=min(d,max(max(max(DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,1.,0.5))-0.397,-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,1.,0.5))+0.305)\n    ,p.y-0.35),-p.y));\n    return d;\n}\n\nvec4 TraceRund(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFRund(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFRund(RP+eps.xyy)-DFRund(RP-eps.xyy),\n                        DFRund(RP+eps.yxy)-DFRund(RP-eps.yxy),\n                        DFRund(RP+eps.yyx)-DFRund(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF111(vec3 p) {\n    float d=DFBox(p-vec3(0.02),vec3(0.96,0.36,0.96))-0.02;\n    return d;\n}\n\nvec4 Trace111(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF111(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF111(RP+eps.xyy)-DF111(RP-eps.xyy),\n                        DF111(RP+eps.yxy)-DF111(RP-eps.yxy),\n                        DF111(RP+eps.yyx)-DF111(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF211(vec3 p) {\n    float d=DFBox(p-vec3(0.02,0.,0.02),vec3(1.96,0.4,0.96))-0.02;\n    return d;\n}\n\nvec4 Trace211(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF211(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF211(RP+eps.xyy)-DF211(RP-eps.xyy),\n                        DF211(RP+eps.yxy)-DF211(RP-eps.yxy),\n                        DF211(RP+eps.yyx)-DF211(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF2Slope(vec3 p) {\n    float d=-smin(-DFBox(p-vec3(0.02,0.,0.02),vec3(1.96,1.2,1.96))-0.02,-dot(LEGOSlope,p-vec3(1.,1.2,0.)),0.05);\n    return d;\n}\n\nvec4 Trace2Slope(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF2Slope(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF2Slope(RP+eps.xyy)-DF2Slope(RP-eps.xyy),\n                        DF2Slope(RP+eps.yxy)-DF2Slope(RP-eps.yxy),\n                        DF2Slope(RP+eps.yyx)-DF2Slope(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF412(vec3 p) {\n    float d=DFBox(p-vec3(0.02,0.,0.02),vec3(3.96,0.4,1.96))-0.02;\n    return d;\n}\n\nvec4 Trace412(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF412(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF412(RP+eps.xyy)-DF412(RP-eps.xyy),\n                        DF412(RP+eps.yxy)-DF412(RP-eps.yxy),\n                        DF412(RP+eps.yyx)-DF412(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFRund131(vec3 p) {\n    float d=max(max(DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,1.,0.5))-0.397,p.y-0.35),-p.y);\n    d=min(d,max(-smin(-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))+0.48,-p.y+1.2,0.05),-p.y+0.2));\n    //Stud\n    d=smin(d,max(-smin(-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))+0.3,-p.y+1.4,0.07),-p.y+1.2),0.07);\n    d=-smin(-d,DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))-0.2,0.07);\n    return d;\n}\n\nvec4 TraceRund131(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFRund131(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFRund131(RP+eps.xyy)-DFRund131(RP-eps.xyy),\n                        DFRund131(RP+eps.yxy)-DFRund131(RP-eps.yxy),\n                        DFRund131(RP+eps.yyx)-DFRund131(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFKon131(vec3 p) {\n    float d=max(max(DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,1.,0.5))-0.397,p.y-0.35),-p.y);\n    d=min(d,max(-smin(-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))+mix(0.48,0.33,p.y-0.2),-p.y+1.2,0.05),-p.y+0.2));\n    //Stud\n    d=smin(d,max(-smin(-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))+0.3,-p.y+1.4,0.07),-p.y+1.2),0.04);\n    d=-smin(-d,DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))-0.2,0.07);\n    return d;\n}\n\nvec4 TraceKon131(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFKon131(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFKon131(RP+eps.xyy)-DFKon131(RP-eps.xyy),\n                        DFKon131(RP+eps.yxy)-DFKon131(RP-eps.yxy),\n                        DFKon131(RP+eps.yyx)-DFKon131(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF131(vec3 p) {\n    float d=DFBox(p-vec3(0.02,0.,0.02),vec3(0.96,1.2,0.96))-0.02;\n    return d;\n}\n\nvec4 Trace131(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF131(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF131(RP+eps.xyy)-DF131(RP-eps.xyy),\n                        DF131(RP+eps.yxy)-DF131(RP-eps.yxy),\n                        DF131(RP+eps.yyx)-DF131(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF231(vec3 p) {\n    float d=DFBox(p-vec3(0.02,0.,0.02),vec3(1.96,1.2,0.96))-0.02;\n    return d;\n}\n\nvec4 Trace231(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF231(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF231(RP+eps.xyy)-DF231(RP-eps.xyy),\n                        DF231(RP+eps.yxy)-DF231(RP-eps.yxy),\n                        DF231(RP+eps.yyx)-DF231(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF431(vec3 p) {\n    float d=DFBox(p-vec3(0.02,0.,0.02),vec3(3.96,1.2,0.96))-0.02;\n    return d;\n}\n\nvec4 Trace431(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF431(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF431(RP+eps.xyy)-DF431(RP-eps.xyy),\n                        DF431(RP+eps.yxy)-DF431(RP-eps.yxy),\n                        DF431(RP+eps.yyx)-DF431(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DF2Slope2(vec3 p) {\n    float d=-smin(-DFBox(p-vec3(0.02,0.,0.02),vec3(1.96,1.2,1.96))-0.02,-dot(vec3(-LEGOSlope.x,LEGOSlope.yz),p-vec3(1.,1.2,0.)),0.05);\n    return d;\n}\n\nvec4 Trace2Slope2(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DF2Slope2(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DF2Slope2(RP+eps.xyy)-DF2Slope2(RP-eps.xyy),\n                        DF2Slope2(RP+eps.yxy)-DF2Slope2(RP-eps.yxy),\n                        DF2Slope2(RP+eps.yyx)-DF2Slope2(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFSlope(vec3 p) {\n    float d=-smin(-DFBox(p-vec3(0.02,0.,0.02),vec3(1.96,1.2,0.96))+0.02,-dot(LEGOSlope,p-vec3(1.,1.2,0.)),0.05);\n    return d;\n}\n\nvec4 TraceSlope(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFSlope(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFSlope(RP+eps.xyy)-DFSlope(RP-eps.xyy),\n                        DFSlope(RP+eps.yxy)-DFSlope(RP-eps.yxy),\n                        DFSlope(RP+eps.yyx)-DFSlope(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFISlope(vec3 p) {\n    float d=-smin(-DFBox(p-vec3(0.02,0.,0.02),vec3(1.96,1.2,0.96))+0.02,-dot(LEGOISlope,p-vec3(1.,0.,0.)),0.03);\n    d=-smin(-d,max(DFBox(p-vec3(0.25,0.2,0.15),vec3(0.75,2.,0.7)),dot(LEGOISlope,p-vec3(1.,0.2,0.))),0.05);\n    //Stud\n    d=smin(d,-smin(-max(-smin(-DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))+0.3,-p.y+1.4,0.07),-p.y+0.85),\n    DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,2.,0.5))-0.2,0.07),0.07);\n    return d;\n}\n\nvec4 TraceISlope(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFISlope(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFISlope(RP+eps.xyy)-DFISlope(RP-eps.xyy),\n                        DFISlope(RP+eps.yxy)-DFISlope(RP-eps.yxy),\n                        DFISlope(RP+eps.yyx)-DFISlope(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFOnlySlope(vec3 p) {\n    float d=-smin(-DFBox(p-vec3(0.1,0.1,0.1),vec3(0.8,1.,0.8))+0.1,-dot(LEGOOSlope,p-vec3(1.,0.8,0.)),0.06);\n    return d;\n}\n\nvec4 TraceOnlySlope(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFOnlySlope(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFOnlySlope(RP+eps.xyy)-DFOnlySlope(RP-eps.xyy),\n                        DFOnlySlope(RP+eps.yxy)-DFOnlySlope(RP-eps.yxy),\n                        DFOnlySlope(RP+eps.yyx)-DFOnlySlope(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFOnlySlope2(vec3 p) {\n    float d=-smin(-DFBox(p-vec3(0.1,0.1,0.1),vec3(0.8,1.,0.8))+0.1,-dot(vec3(-LEGOOSlope.x,LEGOOSlope.yz),p-vec3(0.,0.8,0.)),0.06);\n    return d;\n}\n\nvec4 TraceOnlySlope2(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFOnlySlope2(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFOnlySlope2(RP+eps.xyy)-DFOnlySlope2(RP-eps.xyy),\n                        DFOnlySlope2(RP+eps.yxy)-DFOnlySlope2(RP-eps.yxy),\n                        DFOnlySlope2(RP+eps.yyx)-DFOnlySlope2(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFHeadLight(vec3 p) {\n    float d=-smin(-DFBox(p-vec3(0.02),vec3(0.96,1.16,0.96))+0.02,DFBox(p-vec3(-1.,0.2,-1.),vec3(1.2,2.,3.)),0.05);\n    //Stud\n    d=smin(d,-smin(-DFLine(p,vec3(0.5,0.7,0.5),vec3(-2.,0.7,0.5))+0.3,p.x,0.07),0.05);\n    d=-smin(-d,min(DFLine(p,vec3(0.5,0.7,0.5),vec3(-2.,0.7,0.5))-0.2,DFBox(p-vec3(0.22,0.04,0.04),vec3(0.92,1.12,0.92))),0.07);\n    return d;\n}\n\nvec4 TraceHeadLight(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFHeadLight(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFHeadLight(RP+eps.xyy)-DFHeadLight(RP-eps.xyy),\n                        DFHeadLight(RP+eps.yxy)-DFHeadLight(RP-eps.yxy),\n                        DFHeadLight(RP+eps.yyx)-DFHeadLight(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nvec4 TraceISlope2(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFISlope(vec3(2.-RP.x,RP.yz));\n        if (t<0.002) {\n            RP=vec3(2.-RP.x,RP.yz);\n            return vec4(normalize(vec3(\n                        DFISlope(RP-eps.xyy)-DFISlope(RP+eps.xyy),\n                        DFISlope(RP+eps.yxy)-DFISlope(RP-eps.yxy),\n                        DFISlope(RP+eps.yyx)-DFISlope(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFDoor(vec3 p) {\n    float d=min(DFBox(p-vec3(0.48,0.32,0.02),vec3(3.46,5.66,0.16))-0.02,\n            max(max(DFLine(p,vec3(0.5,-1.,0.5),vec3(0.5,7.,0.5))-0.5,p.y-6.),-p.y));\n    //Ornament\n    d=-smin(-d,DFBox(p-vec3(0.75,0.6,-1.),vec3(2.5,1.6,1.15)),0.1);\n    d=min(d,DFBox(p-vec3(1.15,1.,0.),vec3(1.7,0.8,0.15)));\n    //Window\n    d=-smin(-d,DFBox(p-vec3(0.75,3.,-1.),vec3(2.5,2.5,1.1)),0.1);\n        d=-smin(-d,DFBox(vec3(abs(p.x-2.),abs(p.y-4.25),p.z+1.)-vec3(0.125,0.125,0.),vec3(1.,1.,3.)),0.1);\n    //Handle\n    d=min(d,DFLine(p,vec3(3.5,2.6,0.),vec3(3.2,2.6,0.))-0.15);\n    return d;\n}\n\nvec4 TraceDoor(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFDoor(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFDoor(RP+eps.xyy)-DFDoor(RP-eps.xyy),\n                        DFDoor(RP+eps.yxy)-DFDoor(RP-eps.yxy),\n                        DFDoor(RP+eps.yyx)-DFDoor(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nvec4 TraceDoorRot(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFDoor(RP.zyx);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFDoor(RP.zyx+eps.yyx)-DFDoor(RP.zyx-eps.yyx),\n                        DFDoor(RP.zyx+eps.yxy)-DFDoor(RP.zyx-eps.yxy),\n                        DFDoor(RP.zyx+eps.xyy)-DFDoor(RP.zyx-eps.xyy))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\nfloat DFWindow(vec3 p) {\n    return max(max(DFBox(p,vec3(4.,3.6,1.)),-DFBox(p-vec3(0.3,0.4,-1.),vec3(3.4,2.8,3.))),\n            -DFBox(p-vec3(0.15,0.35,-1.),vec3(3.7,2.9,1.4)));\n}\n\nvec4 TraceWindow(vec3 pos, vec3 dir, float FAR) {\n    float t; float dist=0.; vec3 RP;\n    for (int i=0; i<356; i++) {\n        if (dist>FAR) break;\n        RP=pos+dir*dist;\n        t=DFWindow(RP);\n        if (t<0.002) {\n            return vec4(normalize(vec3(\n                        DFWindow(RP+eps.xyy)-DFWindow(RP-eps.xyy),\n                        DFWindow(RP+eps.yxy)-DFWindow(RP-eps.yxy),\n                        DFWindow(RP+eps.yyx)-DFWindow(RP-eps.yyx))),dist);\n        }\n        dist=dist+t;\n    }\n    return vec4(0.,0.,0.,10000.);\n}\n\n//Lego logo (see Image)\nconst int samples = 2;\n\nconst vec3 positions[225] =\n    vec3[225](vec3(0.9408613367791228, 0.43095909706765456, 0),\n              vec3(0.9264762435267317, 0.44352663509707624, 0),\n              vec3(0.8947861254762883, 0.4638692865687953, 0),\n              vec3(0.8777536433400679, 0.4715814511436973, 0),\n              vec3(0.841995189500208, 0.48193008580309815, 0),\n              vec3(0.8048872251098951, 0.48530129825064333, 0),\n              vec3(0.7861678547856077, 0.4842916850607259, 0),\n              vec3(0.7490796945333518, 0.47672464768502254, 0),\n              vec3(0.7309834472672143, 0.47010427463184123, 0),\n              vec3(0.6967507470536414, 0.45128546857518964, 0),\n              vec3(0.6815966127536668, 0.4397110894047105, 0),\n              vec3(0.6551836294986841, 0.41262743744267205, 0),\n              vec3(0.634461035245403, 0.3809322504759403, 0),\n              vec3(0.626419887197555, 0.3635934525495947, 0),\n              vec3(0.6174678863278233, 0.3359891364381042, 0),\n              vec3(0.47899216991926896, -0.24549629059456585, 0),\n              vec3(0.4741737266143069, -0.2751084016236367, 0),\n              vec3(0.473508033500468, -0.29441126217125624, 0),\n              vec3(0.4778079185647557, -0.33209980412273227, 0),\n              vec3(0.4891422806195873, -0.36776620212046324, 0),\n              vec3(0.5069424579864692, -0.40045137004997605, 0),\n              vec3(0.5306397889869092, -0.42919622179679773, 0),\n              vec3(0.5445221803251843, -0.44179131469092675, 0),\n              vec3(0.575999001128787, -0.4628274056990749, 0),\n              vec3(0.5934512651744912, -0.471028632284476, 0),\n              vec3(0.6313136680076146, -0.48217771366078943, 0),\n              vec3(0.6700652677983625, -0.48548096726553785, 0),\n              vec3(0.7077538097498388, -0.48118108220125, 0),\n              vec3(0.7434202077475696, -0.46984672014641854, 0),\n              vec3(0.7761053756770824, -0.45204654277953654, 0),\n              vec3(0.8048502274239044, -0.4283492117790967, 0),\n              vec3(0.8286956768735618, -0.3993233888235917, 0),\n              vec3(0.8466826379115826, -0.36553773559151465, 0),\n              vec3(0.8557512754292231, -0.33741694258942456, 0),\n              vec3(0.996423388384482, 0.25472647096242323, 0),\n              vec3(1, 0.29294405649279703, 0),\n              vec3(0.9960265197448488, 0.3307089760104401, 0),\n              vec3(0.9846915584576656, 0.3670555420215273, 0),\n              vec3(0.7570787710671805, -0.3279246723576778, 0),\n              vec3(0.7481456607517563, -0.34489128805259295, 0),\n              vec3(0.7363053501222789, -0.3595089915158228, 0),\n              vec3(0.7220133343540593, -0.37147883456812697, 0),\n              vec3(0.705725108622407, -0.38050186903026445, 0),\n              vec3(0.6878961681026325, -0.3862791467229943, 0),\n              vec3(0.6689820079700466, -0.3885117194670758, 0),\n              vec3(0.649438123399958, -0.38690063908326805, 0),\n              vec3(0.6304205367457778, -0.3813442914822551, 0),\n              vec3(0.6058327710290847, -0.3668259574428918, 0),\n              vec3(0.5925016292489125, -0.3537028573471296, 0),\n              vec3(0.5819678219692868, -0.33835579970027974, 0),\n              vec3(0.5720660623804614, -0.31216168851770726, 0),\n              vec3(0.5701398889260951, -0.28352583320630764, 0),\n              vec3(0.7155770729851352, 0.3272211318267263, 0),\n              vec3(0.7245101833005594, 0.3441877475216413, 0),\n              vec3(0.7363504939300369, 0.35880545098487127, 0),\n              vec3(0.7506425096982563, 0.3707752940371754, 0),\n              vec3(0.7669307354299086, 0.37979832849931283, 0),\n              vec3(0.7847596759496831, 0.38557560619204273, 0),\n              vec3(0.803673836082269, 0.38780817893612424, 0),\n              vec3(0.8330139122006925, 0.38387499214489884, 0),\n              vec3(0.8511765563761193, 0.3765710374186516, 0),\n              vec3(0.8670548875320945, 0.36613614277101764, 0),\n              vec3(0.8803725907900135, 0.35302297421472734, 0),\n              vec3(0.8908533512712726, 0.3376841977625116, 0),\n              vec3(0.8982208540972669, 0.3205724794271009, 0),\n              vec3(0.9021987843893928, 0.3021404852212259, 0),\n              vec3(0.49404521200236484, 0.32051485979824523, 0),\n              vec3(0.48453276188440575, 0.3577040643779089, 0),\n              vec3(0.4771903875232675, 0.3751107130887582, 0),\n              vec3(0.4578154766529401, 0.40706596689622404, 0),\n              vec3(0.432829864860236, 0.4345676472763559, 0),\n              vec3(0.4030049704751837, 0.4568443358991251, 0),\n              vec3(0.3691122118278114, 0.47312461443450343, 0),\n              vec3(0.3508814516338892, 0.4787750316912871, 0),\n              vec3(0.3319230072481476, 0.4826370645524623, 0),\n              vec3(0.29392752080375106, 0.4846864612988684, 0),\n              vec3(0.2612007307844826, 0.48048830820567073, 0),\n              vec3(0.2302822471806536, 0.47103805054705644, 0),\n              vec3(0.20168320536497242, 0.4567572335473808, 0),\n              vec3(0.17591474071014757, 0.43806740243099923, 0),\n              vec3(0.15348798858888713, 0.41539010242226715, 0),\n              vec3(0.13491408437389962, 0.3891468787455399, 0),\n              vec3(0.12070416343789314, 0.35975927662517293, 0),\n              vec3(0.1132180666353646, 0.33590866248028545, 0),\n              vec3(-0.025338065404089227, -0.24549634892148534, 0),\n              vec3(-0.030138663741522187, -0.27510780484715514, 0),\n              vec3(-0.03077473905960626, -0.29440849931717467, 0),\n              vec3(-0.026382729388821247, -0.33208369115772834, 0),\n              vec3(-0.021501053563444672, -0.35021629512770946, 0),\n              vec3(-0.0067323828414551645, -0.3844667856656981, 0),\n              vec3(0.01422201609720819, -0.4152246749992118, 0),\n              vec3(0.026835852193426657, -0.4289915274635997, 0),\n              vec3(0.05597077473090595, -0.45269631448625475, 0),\n              vec3(0.07234545200867437, -0.46239235564396874, 0),\n              vec3(0.10834321567353711, -0.47686699975078806, 0),\n              vec3(0.12770761787487328, -0.4814513703741509, 0),\n              vec3(0.16645647691437215, -0.4847091805549651, 0),\n              vec3(0.20413166875492594, -0.4803171708841801, 0),\n              vec3(0.23976561979432254, -0.46886097801576615, 0),\n              vec3(0.27239075643035005, -0.45092623860369346, 0),\n              vec3(0.30103950506079724, -0.4270985893019323, 0),\n              vec3(0.31357036712323705, -0.41315793489678415, 0),\n              vec3(0.3344403332411665, -0.38158898948668446, 0),\n              vec3(0.3489149773479858, -0.3455912258218219, 0),\n              vec3(0.42894164996584827, -0.011973834455500498, 0),\n              vec3(0.42972497189919556, 0.005285807701407088, 0),\n              vec3(0.4243979338193449, 0.022557766661810377, 0),\n              vec3(0.410058067874302, 0.03884635586226634, 0),\n              vec3(0.3951169066462894, 0.04640446369357787, 0),\n              vec3(0.381196346171893, 0.04853615910943173, 0),\n              vec3(0.29306584924039014, 0.048288253738397215, 0),\n              vec3(0.274830481833795, 0.04272753468825939, 0),\n              vec3(0.2605446253882744, 0.030976607914030365, 0),\n              vec3(0.25170207774583986, 0.014529271257721282, 0),\n              vec3(0.24954095118037345, 0.000010362544709030003, 0),\n              vec3(0.25170207774583986, -0.014508546168303221, 0),\n              vec3(0.2605446253882744, -0.030955882824612358, 0),\n              vec3(0.274830481833795, -0.042706809598841385, 0),\n              vec3(0.283547839032084, -0.04635430745454747, 0),\n              vec3(0.31863004442757803, -0.048515434020013674, 0),\n              vec3(0.25202421179653345, -0.32792467235767736, 0),\n              vec3(0.2430911014811088, -0.3448912880525925, 0),\n              vec3(0.22438277766140802, -0.36584357985454286, 0),\n              vec3(0.20067054935175999, -0.380501869030264, 0),\n              vec3(0.18284160883198575, -0.38627914672299396, 0),\n              vec3(0.15420575352058608, -0.3882053201773602, 0),\n              vec3(0.13463670610345768, -0.3845783042799128, 0),\n              vec3(0.11660773985991546, -0.37726960481225597, 0),\n              vec3(0.09378165831698615, -0.3605708705373532, 0),\n              vec3(0.07691326269863996, -0.3383557997002793, 0),\n              vec3(0.06947573809880092, -0.3212402796776524, 0),\n              vec3(0.0647789303657329, -0.29324752838512047, 0),\n              vec3(0.06639001074954098, -0.2737036438150323, 0),\n              vec3(0.20590410104503487, 0.3127127704626628, 0),\n              vec3(0.21430798481922464, 0.33602689053214585, 0),\n              vec3(0.2307763633722193, 0.3590033597484454, 0),\n              vec3(0.24497227602406446, 0.37110352110207073, 0),\n              vec3(0.2612004704622315, 0.3802611176093988, 0),\n              vec3(0.288338328393416, 0.3877891213826372, 0),\n              vec3(0.31743891786417455, 0.3869192865064165, 0),\n              vec3(0.34946754816430725, 0.37512846657511933, 0),\n              vec3(0.3628577585368089, 0.365782121700417, 0),\n              vec3(0.37946114119164776, 0.34811165849076364, 0),\n              vec3(0.3938616180155652, 0.3191469867055984, 0),\n              vec3(0.3981023608114145, 0.2852790298923329, 0),\n              vec3(0.40366307986155214, 0.26704366248573774, 0),\n              vec3(0.40885812964828094, 0.2593136830277175, 0),\n              vec3(0.42314398609380155, 0.24756275625348856, 0),\n              vec3(0.4463802520051028, 0.24175413183231625, 0),\n              vec3(0.470219090251927, 0.2480492150414748, 0),\n              vec3(0.4849219338265358, 0.2599629758397277, 0),\n              vec3(0.4902778529410525, 0.2677196751665549, 0),\n              vec3(-0.4238290609360067, -0.3879545880996168, 0),\n              vec3(-0.42399143141451245, -0.3857869964555996, 0),\n              vec3(-0.3435303791941341, -0.04876145696646751, 0),\n              vec3(-0.1881453922760149, -0.04826752864897948, 0),\n              vec3(-0.17862738206770856, -0.04635430745454769, 0),\n              vec3(-0.16218004541139952, -0.037511759812112966, 0),\n              vec3(-0.15042911863717046, -0.023225903366592502, 0),\n              vec3(-0.14678162078146462, -0.014508546168303545, 0),\n              vec3(-0.1448683995870328, 0.005011261049414758, 0),\n              vec3(-0.15042911863717046, 0.02324662845600997, 0),\n              vec3(-0.16218004541139952, 0.037532484901530376, 0),\n              vec3(-0.17862738206770856, 0.04637503254396521, 0),\n              vec3(-0.19314629078072088, 0.04853615910943141, 0),\n              vec3(-0.3201711275962441, 0.04853615910943141, 0),\n              vec3(-0.2395580256922737, 0.3877292902425807, 0),\n              vec3(-0.013614947063175453, 0.3879753131890342, 0),\n              vec3(0.001553809488533675, 0.3901364397545005, 0),\n              vec3(0.010271166686822708, 0.3937839376102065, 0),\n              vec3(0.024557023132343314, 0.4055348643844355, 0),\n              vec3(0.03339957077477784, 0.42198220104074474, 0),\n              vec3(0.035560697340244474, 0.436501109753757, 0),\n              vec3(0.03339957077477784, 0.45102001846676926, 0),\n              vec3(0.024557023132343314, 0.46746735512307847, 0),\n              vec3(0.010271166686822708, 0.4792182818973075, 0),\n              vec3(0.001553809488533675, 0.4828657797530134, 0),\n              vec3(-0.012965099224478305, 0.4850269063184797, 0),\n              vec3(-0.28168609287903024, 0.48485067306612756, 0),\n              vec3(-0.3043423804615203, 0.47698065006041873, 0),\n              vec3(-0.32039964632717177, 0.4593075787165124, 0),\n              vec3(-0.5323543124694348, -0.42474224806260563, 0),\n              vec3(-0.5337338883980041, -0.43998512769155146, 0),\n              vec3(-0.5289140955923151, -0.45796681352017904, 0),\n              vec3(-0.5177230286574426, -0.4726176319384635, 0),\n              vec3(-0.5012621748910309, -0.48217218549675583, 0),\n              vec3(-0.48805568326353965, -0.4848137981736519, 0),\n              vec3(-0.18106368398796246, -0.4846778019002089, 0),\n              vec3(-0.16282831658136732, -0.47911708285007126, 0),\n              vec3(-0.1485424601358467, -0.46736615607584225, 0),\n              vec3(-0.13969991249341207, -0.4509188194195329, 0),\n              vec3(-0.13780384309711902, -0.4313999159620832, 0),\n              vec3(-0.14369958214938683, -0.41318230940945977, 0),\n              vec3(-0.1559911147398615, -0.3989255304682293, 0),\n              vec3(-0.17289041011825634, -0.3901082881133118, 0),\n              vec3(-0.8900128517657221, -0.3879545880996168, 0),\n              vec3(-0.6958469474912434, 0.43024439706208367, 0),\n              vec3(-0.6970680454957241, 0.44937401560737006, 0),\n              vec3(-0.7052111612782105, 0.46615542921161646, 0),\n              vec3(-0.711534261055692, 0.4730785079255896, 0),\n              vec3(-0.7279951148221036, 0.4828153067067156, 0),\n              vec3(-0.7474699697899465, 0.48548096726553785, 0),\n              vec3(-0.756841335071212, 0.48394209929187737, 0),\n              vec3(-0.7735159477880796, 0.4757893172039107, 0),\n              vec3(-0.7858110168317786, 0.461806574093651, 0),\n              vec3(-0.789707952521583, 0.45298025484212406, 0),\n              vec3(-0.9986204823983503, -0.42409851472697496, 0),\n              vec3(-1, -0.4393413360290013, 0),\n              vec3(-0.9951802071943109, -0.4573230218576287, 0),\n              vec3(-0.9839891402594383, -0.4719738402759131, 0),\n              vec3(-0.9675282864930268, -0.48152839383420565, 0),\n              vec3(-0.9543217948655356, -0.48417000651110154, 0),\n              vec3(-0.6473297955899583, -0.48403401023765885, 0),\n              vec3(-0.629094428183363, -0.4784732911875213, 0),\n              vec3(-0.6148085717378426, -0.4667223644132922, 0),\n              vec3(-0.6059660240954079, -0.4502750277569829, 0),\n              vec3(-0.6040688937631473, -0.43076335438168084, 0),\n              vec3(-0.6099273821747845, -0.41268783466083125, 0),\n              vec3(-0.6220949031388547, -0.3986636757539205, 0),\n              vec3(-0.6387381593037988, -0.3900488756991408, 0),\n              vec3(-0.6530549597150334, -0.3879545880996168, 0),\n              vec3(-0.1875131137334065, -0.3879545880996168, 0),\n              vec3(0.4962741058527447, 0.2909237200595889, 0),\n              vec3(0.9001729001451884, 0.2680691160390561, 0),\n              vec3(0.9714728267726251, 0.392803750658161, 0));\nconst ivec3 triangles[219] = ivec3[219](\n    ivec3(0, 61, 1), ivec3(0, 62, 61), ivec3(0, 224, 62), ivec3(1, 60, 2),\n    ivec3(1, 61, 60), ivec3(2, 60, 3), ivec3(3, 59, 4), ivec3(3, 60, 59),\n    ivec3(4, 58, 5), ivec3(4, 59, 58), ivec3(5, 58, 6), ivec3(6, 57, 7),\n    ivec3(6, 58, 57), ivec3(7, 56, 8), ivec3(7, 57, 56), ivec3(8, 56, 9),\n    ivec3(9, 55, 10), ivec3(9, 56, 55), ivec3(10, 54, 11), ivec3(10, 55, 54),\n    ivec3(11, 53, 12), ivec3(11, 54, 53), ivec3(12, 52, 13), ivec3(12, 53, 52),\n    ivec3(13, 52, 14), ivec3(14, 52, 15), ivec3(15, 51, 16), ivec3(15, 52, 51),\n    ivec3(16, 51, 17), ivec3(17, 50, 18), ivec3(17, 51, 50), ivec3(18, 50, 19),\n    ivec3(19, 49, 20), ivec3(19, 50, 49), ivec3(20, 48, 21), ivec3(20, 49, 48),\n    ivec3(21, 47, 22), ivec3(21, 48, 47), ivec3(22, 47, 23), ivec3(23, 46, 24),\n    ivec3(23, 47, 46), ivec3(24, 46, 25), ivec3(25, 45, 26), ivec3(25, 46, 45),\n    ivec3(26, 44, 27), ivec3(26, 45, 44), ivec3(27, 43, 28), ivec3(27, 44, 43),\n    ivec3(28, 42, 29), ivec3(28, 43, 42), ivec3(29, 41, 30), ivec3(29, 42, 41),\n    ivec3(30, 40, 31), ivec3(30, 41, 40), ivec3(31, 39, 32), ivec3(31, 40, 39),\n    ivec3(32, 38, 33), ivec3(32, 39, 38), ivec3(33, 38, 223),\n    ivec3(33, 223, 34), ivec3(34, 223, 35), ivec3(35, 65, 36),\n    ivec3(35, 223, 65), ivec3(36, 64, 37), ivec3(36, 65, 64),\n    ivec3(37, 63, 224), ivec3(37, 64, 63), ivec3(62, 224, 63),\n    ivec3(66, 143, 67), ivec3(66, 144, 143), ivec3(66, 222, 144),\n    ivec3(67, 143, 68), ivec3(68, 142, 69), ivec3(68, 143, 142),\n    ivec3(69, 142, 70), ivec3(70, 141, 71), ivec3(70, 142, 141),\n    ivec3(71, 140, 72), ivec3(71, 141, 140), ivec3(72, 139, 73),\n    ivec3(72, 140, 139), ivec3(73, 139, 74), ivec3(74, 139, 75),\n    ivec3(75, 138, 76), ivec3(75, 139, 138), ivec3(76, 137, 77),\n    ivec3(76, 138, 137), ivec3(77, 137, 78), ivec3(78, 136, 79),\n    ivec3(78, 137, 136), ivec3(79, 135, 80), ivec3(79, 136, 135),\n    ivec3(80, 134, 81), ivec3(80, 135, 134), ivec3(81, 134, 82),\n    ivec3(82, 133, 83), ivec3(82, 134, 133), ivec3(83, 133, 84),\n    ivec3(84, 132, 85), ivec3(84, 133, 132), ivec3(85, 131, 86),\n    ivec3(85, 132, 131), ivec3(86, 131, 87), ivec3(87, 130, 88),\n    ivec3(87, 131, 130), ivec3(88, 130, 89), ivec3(89, 129, 90),\n    ivec3(89, 130, 129), ivec3(90, 128, 91), ivec3(90, 129, 128),\n    ivec3(91, 128, 92), ivec3(92, 127, 93), ivec3(92, 128, 127),\n    ivec3(93, 126, 94), ivec3(93, 127, 126), ivec3(94, 126, 95),\n    ivec3(95, 125, 96), ivec3(95, 126, 125), ivec3(96, 124, 97),\n    ivec3(96, 125, 124), ivec3(97, 123, 98), ivec3(97, 124, 123),\n    ivec3(98, 123, 99), ivec3(99, 122, 100), ivec3(99, 123, 122),\n    ivec3(100, 121, 101), ivec3(100, 122, 121), ivec3(101, 121, 102),\n    ivec3(102, 120, 103), ivec3(102, 121, 120), ivec3(103, 119, 104),\n    ivec3(103, 120, 119), ivec3(104, 109, 105), ivec3(104, 119, 109),\n    ivec3(105, 107, 106), ivec3(105, 109, 107), ivec3(107, 109, 108),\n    ivec3(109, 119, 110), ivec3(110, 113, 111), ivec3(110, 114, 113),\n    ivec3(110, 118, 114), ivec3(110, 119, 118), ivec3(111, 113, 112),\n    ivec3(114, 118, 115), ivec3(115, 117, 116), ivec3(115, 118, 117),\n    ivec3(144, 147, 145), ivec3(144, 148, 147), ivec3(144, 149, 148),\n    ivec3(144, 222, 149), ivec3(145, 147, 146), ivec3(149, 222, 150),\n    ivec3(150, 222, 151), ivec3(152, 181, 153), ivec3(152, 186, 181),\n    ivec3(152, 187, 186), ivec3(152, 221, 187), ivec3(153, 181, 154),\n    ivec3(154, 165, 155), ivec3(154, 180, 165), ivec3(154, 181, 180),\n    ivec3(155, 159, 156), ivec3(155, 160, 159), ivec3(155, 164, 160),\n    ivec3(155, 165, 164), ivec3(156, 158, 157), ivec3(156, 159, 158),\n    ivec3(160, 163, 161), ivec3(160, 164, 163), ivec3(161, 163, 162),\n    ivec3(165, 180, 166), ivec3(166, 177, 167), ivec3(166, 178, 177),\n    ivec3(166, 180, 178), ivec3(167, 172, 168), ivec3(167, 177, 172),\n    ivec3(168, 171, 169), ivec3(168, 172, 171), ivec3(169, 171, 170),\n    ivec3(172, 177, 173), ivec3(173, 175, 174), ivec3(173, 176, 175),\n    ivec3(173, 177, 176), ivec3(178, 180, 179), ivec3(181, 185, 182),\n    ivec3(181, 186, 185), ivec3(182, 184, 183), ivec3(182, 185, 184),\n    ivec3(187, 193, 188), ivec3(187, 194, 193), ivec3(187, 221, 194),\n    ivec3(188, 190, 189), ivec3(188, 193, 190), ivec3(190, 192, 191),\n    ivec3(190, 193, 192), ivec3(195, 205, 196), ivec3(195, 206, 205),\n    ivec3(195, 211, 206), ivec3(195, 212, 211), ivec3(195, 220, 212),\n    ivec3(196, 205, 197), ivec3(197, 205, 198), ivec3(198, 200, 199),\n    ivec3(198, 205, 200), ivec3(200, 205, 201), ivec3(201, 205, 202),\n    ivec3(202, 205, 203), ivec3(203, 205, 204), ivec3(206, 210, 207),\n    ivec3(206, 211, 210), ivec3(207, 209, 208), ivec3(207, 210, 209),\n    ivec3(212, 218, 213), ivec3(212, 219, 218), ivec3(212, 220, 219),\n    ivec3(213, 218, 214), ivec3(214, 218, 215), ivec3(215, 218, 216),\n    ivec3(216, 218, 217));\nconst int len = 219;\n\nbool sameSide(vec3 p1, vec3 p2, vec3 a, vec3 b) {\n  vec3 cp1 = cross(b - a, p1 - a);\n  vec3 cp2 = cross(b - a, p2 - a);\n\n  return dot(cp1, cp2) >= 0.0;\n}\n\nbool pointInTriangle(vec3 p, vec3 a, vec3 b, vec3 c) {\n  return sameSide(p, a, b, c) && sameSide(p, b, a, c) && sameSide(p, c, a, b);\n}\n\nbool inPath(vec2 p) {\n  for (int i = 0; i < len; i++) {\n    ivec3 triangle = triangles[i];\n    vec3 a = positions[triangle[0]];\n    vec3 b = positions[triangle[1]];\n    vec3 c = positions[triangle[2]];\n\n    if (pointInTriangle(vec3(p, 0.0), a, b, c)) {\n      return true;\n    }\n  }\n\n  return false;\n}","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//Rendering\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign=-mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D=vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D=D.xzy;\n    else if (UV.y>2048.) D=D.zxy;\n    return texture(iChannel3,D);\n}\n\nHIT TraceOctree(vec3 P, vec3 D) {\n    //Traces a ray through the lego octree\n    int Index; float Rotation,Material; float I=0.; vec2 rr,CD,IsoUV; vec3 Color,PosOffset; vec4 DFHit,IsoT;\n    //Check intersection\n    vec3 IDir=1./D;\n    vec2 NearFar=ABox(P,IDir,vec3(0.),vec3(128.,51.2,128.));\n    float FAR=NearFar.y;\n    float t=0.; \n    if ((NearFar.x>0. && NearFar.y>NearFar.x) || DFBox(P,vec3(128.,51.2,128.))<0.) {\n        //The ray intersects the octree\n        t=max(0.,NearFar.x+0.001);\n    } else {\n        //Misses the octree\n        return HIT(10000.,vec3(0.),vec3(0.),vec3(0.),0.);\n    }\n    float LFar=FAR; vec2 CUV; vec3 cp,fp; vec2 bb; vec4 C;\n    float LOD=6.;\n    vec3 LS=vec3(1.,0.4,1.)*pow(2.,LOD);\n    vec3 ILS=vec3(1.,2.5,1.)*pow(0.5,LOD);\n    float PS=2.;\n    float YOffset=2364.;\n    for (int i=0; i<128; i++) {\n        if (t>FAR) break;\n        if (t>LFar && LOD<6.) {\n            LOD=LOD+1.;\n            YOffset+=PS;\n            LS*=2.;\n            ILS*=0.5;\n            PS*=0.5;\n            fp=floor(cp*ILS)*LS;\n            LFar=ABoxfar(P,IDir,fp,fp+LS);\n        }\n        cp=P+D*t;\n        fp=floor(cp*ILS)*LS;\n        if (LOD==0.) {\n            CUV=vec2(fp.x*ILS.x+128.*mod(floor(fp.y*ILS.y),8.)+0.5,fp.z*ILS.z+128.*floor(fp.y*ILS.y*0.125)+0.5);\n        } else if (LOD==1.) {\n            CUV=vec2(fp.x*ILS.x+64.*mod(floor(fp.y*ILS.y),16.)+0.5,fp.z*ILS.z+64.*floor(fp.y*ILS.y*I16)+2048.5);\n        } else {\n            CUV=vec2(fp.x*ILS.x+PS*floor(fp.y*ILS.y)+0.5,fp.z*ILS.z+0.5+YOffset);\n        }\n        C=textureCube(CUV);\n        bb=ABox(P,IDir,fp,fp+LS);\n        if (C.x>0. && ((bb.x>=0. && bb.y>bb.x) || DFBox(cp-fp,fp+LS)<=0.)) {\n            if (LOD==0.) {\n                /*\n                //Voxel visualisation\n                vec3 bbN; bb=ABoxN(P,IDir,fp,fp+LS,sign(D),bbN);\n                return HIT(bb.x,P+D*bb.x,bbN,vec3(C.y,0.,0.),floor(C.x*0.01));\n                //*/\n                PosOffset=floor(vec3(fract(C.z*0.1)*10.,floor(C.z*0.1),fract(C.w*0.1)*10.)+0.001)*vec3(1.,0.4,1.);\n                Index=int(floor(C.w*0.1));\n                Material=floor(C.x*0.01);\n                Rotation=floor(mod((C.x-Material)*0.1,10.));\n                vec3 HitP=P+D*bb.x;\n                vec3 BO3=BrickOffset3[Index];\n                if (Rotation>0.5) {\n                    IsoUV=(vec2(dot(IsoTan,HitP.zyx+PosOffset-fp.zyx-BO3),dot(IsoBit,HitP+PosOffset-fp-BO3))*Sqrt2*0.5+0.5)*128.;\n                    IsoT=textureCube(IsoUV+BrickOffset2[Index]+vec2(0.,2370.)).zyxw;\n                } else {\n                    IsoUV=(vec2(dot(IsoTan,HitP+PosOffset-fp-BO3),dot(IsoBit,HitP+PosOffset-fp-BO3))*Sqrt2*0.5+0.5)*128.;\n                    IsoT=textureCube(IsoUV+BrickOffset2[Index]+vec2(0.,2370.));\n                }\n                float IsoD=IsoT.w+dot(D,fp-PosOffset-IsoCenter+BO3);\n                if (IsoD<bb.y) {\n                    return HIT(IsoD,P+D*IsoD,IsoT.xyz,vec3(C.y,0.,0.),Material);\n                }\n            } else if (LOD>0.) {\n                LFar=bb.y;\n                LOD-=1.;\n                YOffset-=PS*2.;\n                LS*=0.5;\n                ILS*=2.;\n                PS*=2.;\n                continue;\n            }\n        }\n        t=bb.y+0.0025;\n        I++;\n    }\n    //Return\n    return HIT(10000.,vec3(0.),vec3(0.),vec3(0.),float(I)*0.04);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output=texture(iChannel0,fragCoord*IRES)*float(iFrame>InitialFrames);\n    //Camera\n    vec2 AAOffset=textureCube(mod(vec2(floor(float(iFrame)*0.2)+0.5,0.5),vec2(1024.))+vec2(0.,5120.)).yx-0.5;\n    vec2 PixelUV=(fragCoord+AAOffset-HRES)*IRES.x*2.*IsoWidth;\n    vec3 Pos=IsoPos+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n    //Trace\n    HIT Pixel=TraceOctree(Pos,IsoDir);\n    //Seperate bricks\n    vec4 SepHit=TraceDoor(Pos-vec3(52.,6.4,64.),IsoDir,100.); //Yellow door\n    if (SepHit.w<9999. && SepHit.w<Pixel.D) { Pixel=HIT(SepHit.w,vec3(0.),SepHit.xyz,vec3(199.,0.,0.),0.); }\n    SepHit=TraceDoorRot(Pos-vec3(60.,14.4,67.),IsoDir,100.); //Orange door\n    if (SepHit.w<9999. && SepHit.w<Pixel.D) { Pixel=HIT(SepHit.w,vec3(0.),SepHit.xyz,vec3(139.,0.,0.),0.); }\n    SepHit=TraceWindow(Pos-vec3(66.,9.2,60.),IsoDir,100.); //Black window\n    if (SepHit.w<9999. && SepHit.w<Pixel.D) { Pixel=HIT(SepHit.w,vec3(0.),SepHit.xyz,vec3(444.,0.,0.),0.); }\n    //Output\n    Output=vec4(Pixel.C.x+1000.*Pixel.M,(Pixel.N.x*0.5+0.5)*0.9+floor((Pixel.N.y*0.5+0.5)*1000.),Pixel.N.z,Pixel.D);\n    fragColor=Output;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"//Quadtree\n\nvec2 MinMax2x2_0(vec2 FUV, vec2 GRES) {\n    //Computes min/max\n    vec2 S=texture(iChannel0,FUV*IRES).ww+vec2(0.,0.2);\n    vec2 O=S;\n    if (DFBox(FUV+vec2(1.,0.),GRES)<0.) {\n        S=texture(iChannel0,vec2(FUV.x+1.,FUV.y)*IRES).ww+vec2(0.,0.2);\n        O=vec2(min(O.x,S.x),max(O.y,S.y));\n    }\n    if (DFBox(FUV+vec2(0.,1.),GRES)<0.) {\n        S=texture(iChannel0,vec2(FUV.x,FUV.y+1.)*IRES).ww+vec2(0.,0.2);\n        O=vec2(min(O.x,S.x),max(O.y,S.y));\n    }\n    if (DFBox(FUV+1.,GRES)<0.) {\n        S=texture(iChannel0,(FUV+1.)*IRES).ww+vec2(0.,0.2);\n        O=vec2(min(O.x,S.x),max(O.y,S.y));\n    }\n    return O;\n}\n\nvec2 MinMax2x2(vec2 FUV, vec2 UVOffset, vec2 GRES) {\n    //Computes min/max\n    vec2 S=texture(iChannel1,(UVOffset+FUV)*IRES).xy;\n    vec2 O=S;\n    if (DFBox(FUV+vec2(1.,0.),GRES)<0.) {\n        S=texture(iChannel1,(UVOffset+vec2(FUV.x+1.,FUV.y))*IRES).xy;\n        O=vec2(min(O.x,S.x),max(O.y,S.y));\n    }\n    if (DFBox(FUV+vec2(0.,1.),GRES)<0.) {\n        S=texture(iChannel1,(UVOffset+vec2(FUV.x,FUV.y+1.))*IRES).xy;\n        O=vec2(min(O.x,S.x),max(O.y,S.y));\n    }\n    if (DFBox(FUV+1.,GRES)<0.) {\n        S=texture(iChannel1,(UVOffset+FUV+1.)*IRES).xy;\n        O=vec2(min(O.x,S.x),max(O.y,S.y));\n    }\n    return O+vec2(-0.25,0.25);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output=texture(iChannel1,fragCoord*IRES); vec2 SUV;\n    //Key input\n    if (DFBox(fragCoord-iResolution.xy+1.,vec2(1.))<0.) {\n        Output.x=float(texelFetch(iChannel3,ivec2(82,1),0).x>0.);\n    }\n    //Quadtree\n    vec2 CHRES=ceil(HRES);\n    if (fragCoord.y<CHRES.y && fragCoord.x<CHRES.x) {\n        //LOD 1\n        Output.xy=MinMax2x2_0(floor(fragCoord)*2.+0.5,iChannelResolution[0].xy);\n    }\n    vec2 CHRES2=ceil(CHRES*0.5);\n    if (DFBox(fragCoord-vec2(0.,CHRES.y),CHRES2)<0.) {\n        //LOD 2\n        Output.xy=MinMax2x2(floor(fragCoord-vec2(0.,CHRES.y))*2.+0.5,vec2(0.),CHRES);\n    }\n    vec2 CHRES3=ceil(CHRES2*0.5);\n    if (DFBox(fragCoord-CHRES,CHRES3)<0.) {\n        //LOD 3\n        Output.xy=MinMax2x2(floor(fragCoord-CHRES)*2.+0.5,vec2(0.,CHRES.y),CHRES2);\n    }\n    vec2 CHRES4=ceil(CHRES3*0.5);\n    if (DFBox(fragCoord-vec2(CHRES.x,0.),CHRES4)<0.) {\n        //LOD 4\n        Output.xy=MinMax2x2(floor(fragCoord-vec2(CHRES.x,0.))*2.+0.5,CHRES,CHRES3);\n    }\n    vec2 CHRES5=ceil(CHRES4*0.5);\n    if (DFBox(fragCoord-vec2(0.,iChannelResolution[0].y-CHRES5.y),CHRES5)<0.) {\n        //LOD 5\n        SUV=floor(vec2(fragCoord.x,iChannelResolution[0].y-fragCoord.y))*2.+0.5;\n        Output.xy=MinMax2x2(SUV,vec2(CHRES.x,0.),CHRES4);\n    }   \n    //Copy quadtree when it is complete\n    if (mod(float(iFrame),5.)>3.5) {\n        Output.zw=Output.xy;\n    }\n    //Return\n    fragColor=Output;\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"//Accumulation\n\nfloat Spotlight(vec3 P, vec3 N, vec3 LPos, vec3 LDir, float LCosAngle) {\n    float Len=length(P-LPos);\n    return max(0.,(dot(P-LPos,LDir)/Len-LCosAngle)/(1.-LCosAngle))*max(0.,dot(N,LPos-P)/Len);;\n}\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign=-mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D=vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D=D.xzy;\n    else if (UV.y>2048.) D=D.zxy;\n    return texture(iChannel3,D);\n}\n\nvec4 ScreenSpaceRay(vec3 P, vec3 D, float FAR) {\n    //Traces a ray\n    vec4 Output=vec4(0.,0.,0.,10000.);\n    vec3 IsoP=P-IsoPos;\n    IsoP=vec3(dot(IsoP,IsoTan),dot(IsoP,IsoBit),dot(IsoP,IsoDir));\n    vec3 IsoD=vec3(dot(D,IsoTan),dot(D,IsoBit),dot(D,IsoDir));\n    //Quadtree ray tracing\n    float t=0.; float LFar=FAR; vec3 IID=1./IsoD; vec2 IID2=IID.xy; vec2 CHRES=ceil(HRES); vec2 fp,bb,bb2,suv; vec3 sp; vec4 S;\n    vec2 QUVOffsets[6]=vec2[6](vec2(0.),vec2(0,CHRES.y),CHRES,vec2(CHRES.x,0.),\n                      vec2(0.,iChannelResolution[0].y),vec2(CHRES.x,iChannelResolution[0].y));\n    int LOD=5; float fLOD=float(LOD);\n    float Lod2=pow(2.,fLOD);\n    float Lod05=1./Lod2;\n    vec2 LodSize=IsoWidth*2.*Lod2*IRES.xx;\n    vec2 ILodSize=1./LodSize;\n    for (int i=0; i<256; i++) {\n        if (t>FAR) break;\n        if (t>LFar && LOD<5) {\n            LOD+=1;\n            LodSize*=2.;\n            ILodSize*=0.5;\n            Lod2*=2.;\n            Lod05*=0.5;\n            fp.xy=floor(sp.xy*ILodSize)*LodSize;\n            LFar=ABoxfar(IsoP.xy,IID2,fp,fp+LodSize);\n        }\n        sp=IsoP+IsoD*t;\n        fp=floor(sp.xy*ILodSize)*LodSize;\n        suv=(((fp.xy+LodSize*0.5)*vec2(1.,Aspect.x)/IsoWidth)*0.5+0.5)*Lod05;\n        if (LOD==0) {\n            S=texture(iChannel0,suv);\n            bb=ABox(IsoP,IID,vec3(fp,S.w),vec3(fp+LodSize,S.w+0.2));\n        } else if (LOD<5) {\n            S=texture(iChannel1,suv+QUVOffsets[LOD-1]*IRES);\n            bb=ABox(IsoP,IID,vec3(fp,S.z),vec3(fp+LodSize,S.w));\n        } else {\n            S=texture(iChannel1,vec2(suv.x,-suv.y)+QUVOffsets[LOD-1]*IRES);\n            bb=ABox(IsoP,IID,vec3(fp,S.z),vec3(fp+LodSize,S.w));\n        }\n        bb2=ABox(IsoP.xy,IID2,fp,fp+LodSize);\n        if (bb.x>0. && bb.y>bb.x) {\n            if (LOD==0) {\n                vec3 SN=normalize(vec3(fract(S.y)*I09*2.-1.,floor(S.y)*0.001*2.-1.,S.z));\n                Output=vec4(texture(iChannel2,suv).xyz*max(float(S.x>999.5),max(0.,sign(dot(SN,-D)))*float(S.w<9000.)),bb.x);\n                break;\n            } else {\n                LFar=bb2.y;\n                LOD-=1;\n                LodSize*=0.5;\n                ILodSize*=2.;\n                Lod2*=0.5;\n                Lod05*=2.;\n                continue;\n            }\n        } else if (DFBox(sp-vec3(fp.xy,S.z),vec3(LodSize,S.w-S.z))<=0. && LOD>0) {\n            LFar=bb2.y;\n            LOD-=1;\n            LodSize*=0.5;\n            ILodSize*=2.;\n            Lod2*=0.5;\n            Lod05*=2.;\n            continue;\n        }\n        t=bb2.y+0.0025;\n    }\n    //Black geometry\n    vec3 ID=1./D;\n    bb=ABox(P,ID,vec3(75.,6.4,60.),vec3(76.,50.,76.));\n    if (bb.x>0. && bb.y>bb.x && bb.x<Output.w) {\n        if (dot(P.yz+D.yz*bb.x-vec2(15.6,76.),vec2(-0.707))>0. &&\n            dot(P.yz+D.yz*bb.x-vec2(15.6,60.),vec2(0.707,-0.707))<0.) return vec4(0.,0.,0.,bb.x);\n    }\n    bb=ABox(P,ID,vec3(48.,6.4,75.),vec3(76.,14.4,76.));\n    if (bb.x>0. && bb.y>bb.x && bb.x<Output.w) { return vec4(0.,0.,0.,bb.x); }\n    bb=ABox(P,ID,vec3(60.,14.4,60.),vec3(76.,14.41,76.));\n    if (bb.x>0. && bb.y>bb.x && bb.x<Output.w) { return vec4(0.,0.,0.,bb.x); }\n    vec3 tmps=vec3(0.,-0.707,-0.707);\n    if (dot(tmps,D)<0.) {\n        bb.x=-dot(tmps,P-vec3(60.,15.6,77.2))/dot(tmps,D);\n        if (bb.x<Output.w && DFBox(P.xz+D.xz*bb.x-vec2(60.5,69.),vec2(15.,8.))<0.) { return vec4(0.,0.,0.,bb.x); }\n    }\n    //Return\n    if (Output.w>9999.) {\n        //Sky\n        return vec4(SampleSky(D)*float(D.y>=0. || DFBox(P.xz-D.xz*P.y/D.y,vec2(128.))>0.),10000.);\n    } else {\n        //Geometry\n        return Output;\n    }\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output=texture(iChannel2,fragCoord*IRES)*float(iFrame>InitialFrames);\n    vec4 Attr=texture(iChannel0,fragCoord*IRES);\n    vec3 N=normalize(vec3(fract(Attr.y)*I09*2.-1.,floor(Attr.y)*0.001*2.-1.,Attr.z));\n    float Mat=float(Attr.x>999.5);\n    vec3 NLight=vec3(0.);\n    if (Attr.w<9999.) {\n        if (Mat>0.5) {\n            //Emissive\n            Attr.x=mod(Attr.x,1000.);\n            vec3 AC=vec3(fract(Attr.x*0.1),0.,floor(Attr.x*0.01)*0.1);\n            AC.y=fract(Attr.x*0.01-AC.z*10.);\n            NLight=AC*3.;\n        } else {\n            //Brick\n            vec2 PixelUV=(fragCoord-HRES)*IRES.x*2.*IsoWidth;\n            vec3 PPos=IsoPos+IsoTan*PixelUV.x+IsoBit*PixelUV.y+IsoDir*Attr.w;\n            vec2 RUV=vec2(mod(fragCoord+Output.w*vec2(55.,35.),vec2(1024.))+vec2(0.,5120.)); vec3 RDir;\n            vec4 BNValues=textureCube(RUV);\n            //Diffuse integration\n            RDir=RandSample(BNValues.xy)*TBN(N);\n            NLight+=ScreenSpaceRay(PPos+N*0.05,RDir,10000.).xyz;\n            //Spotlights\n            if (DFBox(PPos-vec3(60.,0.,59.),vec3(16.,14.,1.1))<0.) {\n                //Pixel is potentially not shadowed\n                NLight+=vec3(1.,0.5,0.25)*Spotlight(PPos,N,vec3(62.5,6.4,58.5),SPOT_DIR,0.8)*8.;\n                NLight+=vec3(1.,0.5,0.25)*Spotlight(PPos,N,vec3(73.5,6.4,58.5),SPOT_DIR,0.8)*8.;\n            }\n            //Color\n            #ifndef CLAY\n                Attr.x=mod(Attr.x,1000.);\n                vec3 AC=vec3(fract(Attr.x*0.1),0.,floor(Attr.x*0.01)*0.1);\n                AC.y=fract(Attr.x*0.01-AC.z*10.);\n                NLight*=min(vec3(1.),AC*I09);\n            #endif\n            //Glossy integration\n            vec3 RefDir=reflect(IsoDir,N);\n            RDir=normalize(RandSample(BNValues.xz)*TBN(RefDir)*0.04+RefDir);\n            NLight=mix(NLight,ScreenSpaceRay(PPos+N*0.05,RDir,10000.).xyz,Schlick(0.2,-dot(IsoDir,N)));\n        }\n    }\n    //Accumulation\n    NLight=clamp(NLight,vec3(0.),vec3(C_MAX));\n    if (texelFetch(iChannel1,ivec2(iResolution.xy-1.),0).x>0.) {\n        //Reset\n        Output=vec4(NLight,1.);\n    } else if (iFrame>15) {\n        //Accumulation\n        Output=vec4((Output.xyz*Output.w+NLight)/(Output.w+1.),Output.w+1.);\n    }\n    //Return\n    fragColor=Output;\n}","name":"Buffer C","description":"","type":"buffer"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdfGR8","filepath":"/media/previz/buffer03.png","previewfilepath":"/media/previz/buffer03.png","type":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XdfGR8","channel":0}],"code":"//DOF\n\nvec3 Fog(vec3 P, vec3 C) {\n    //Adds fog\n    float Density=0.27*exp(-max(0.,P.y-3.));\n    return mix(C,vec3(0.1,0.4,1.)*Density*Density,Density);\n}\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign=-mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D=vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D=D.xzy;\n    else if (UV.y>2048.) D=D.zxy;\n    return texture(iChannel3,D);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec4 Output=texture(iChannel1,fragCoord*IRES);\n    if (iFrame>15) {\n       //Complete init\n        #ifdef DOF\n            vec4 CSample=texture(iChannel0,fragCoord*IRES);\n            vec2 Offset=textureCube(vec2(mod(fragCoord+vec2(CSample.w*351.,floor(CSample.w*I64)*323.),vec2(1024.))+vec2(0.,5120.))).zx;\n            Offset.x*=2.*3.141592653;\n            Offset=vec2(sin(Offset.x),cos(Offset.x))*sqrt(1.-Offset.y*Offset.y);\n            float DOF_Radius=max(0.,length(fragCoord*IRES-0.5)-0.25)*iChannelResolution[0].x*0.012;\n            vec2 SUV=fragCoord+Offset*DOF_Radius;\n            //Reset\n            if (CSample.w==1.) {\n                Output=vec4(CSample.xyz,1.);\n                float D=texture(iChannel2,fragCoord*IRES).w;\n                vec2 PixelUV=(fragCoord-HRES)*IRES.x*2.*IsoWidth;\n                Output.xyz=Fog(IsoPos+IsoDir*D+IsoTan*PixelUV.x+IsoBit*PixelUV.y,Output.xyz);\n            } else {\n                float D=texture(iChannel2,SUV*IRES).w;\n                vec2 PixelUV=(SUV-HRES)*IRES.x*2.*IsoWidth;\n                vec3 NLight=Fog(IsoPos+IsoDir*D+IsoTan*PixelUV.x+IsoBit*PixelUV.y,texture(iChannel0,SUV*IRES).xyz);\n                Output=vec4((Output.xyz*Output.w+NLight)/(Output.w+1.),Output.w+1.);\n            }\n        #else\n            Output=texture(iChannel0,fragCoord*IRES);\n            float D=texture(iChannel2,fragCoord*IRES).w;\n            vec2 PixelUV=(fragCoord-HRES)*IRES.x*2.*IsoWidth;\n            Output.xyz=Fog(IsoPos+IsoDir*D+IsoTan*PixelUV.x+IsoBit*PixelUV.y,Output.xyz);\n        #endif\n    } else {\n        //Black screen\n        Output=vec4(0.);\n    }\n    //Return\n    fragColor=Output;\n}","name":"Buffer D","description":"","type":"buffer"},{"inputs":[{"id":"4dX3Rr","filepath":"/media/a//media/previz/cubemap00.png","previewfilepath":"/media/ap//media/previz/cubemap00.png","type":"cubemap","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsBSR3","filepath":"/media/a/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","previewfilepath":"/media/ap/cb49c003b454385aa9975733aff4571c62182ccdda480aaba9a8d250014f00ec.png","type":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dX3Rr","channel":0}],"code":"//Storage\n\nfloat Spiral(vec3 p, vec2 sp, float H, float dHdr, float R, float MaxAngle) {\n    //Returns the height of a spiral (max 3 turns)\n    float Rate=0.4;\n    float r=length(p.xz-sp);\n    float angle=atan(p.x-sp.x,p.z-sp.y)+3.141592653;\n    float sr0=R*pow(Rate,angle/6.283185306);\n    float dr=abs(sr0-r); \n    float dr1=abs(sr0*Rate-r);\n    if (dr1<dr) { dr=dr1; angle+=6.283185306; }\n    dr1=abs(sr0*Rate*Rate-r);\n    if (dr1<dr) { dr=dr1; angle+=6.283185306; }\n    return max(0.,H-dHdr*dr)*pow(max(0.,1.-angle/MaxAngle),0.5);\n}\n\nvec3 HMC[7]=vec3[7](vec3(2.,9.,2.),vec3(3.,7.,3.),vec3(1.,5.,1.),vec3(7.),vec3(5.),vec3(3.),vec3(2.));\n\nfloat HM(vec3 p) {\n    //Samples the heightfield\n    float H=3.;\n    //Plateau\n    float PB=DFBox(p.xz-vec2(48.,44.),vec2(28.,32.));\n    H+=max(0.,12.-3.*max(0.,PB));\n    //Spirals +Z\n    H+=Spiral(p,vec2(66.,98.),8.,3.5,22.,11.);\n    //Spirals -Z\n    H+=Spiral(p,vec2(66.,31.),10.,3.,15.,14.);\n    //Spirals -X\n    H=max(H,3.+Spiral(p,vec2(39.,54.),9.,6.,10.,10.)); //Small\n    H=max(H,3.+Spiral(p,vec2(46.,84.),9.,3.,16.,11.)); //Epic corner\n    //Spirals +X\n    H=max(H,3.+Spiral(p,vec2(98.,64.),10.,5.,24.,15.)); //Epic positive\n    H=max(H,3.+Spiral(p,vec2(86.,88.),7.,4.,20.,13.)); //Smaller positive >Z\n    H+=Spiral(p,vec2(88.,42.),7.,4.,14.,13.); //Smaller positive <Z\n    //Noise\n    if (PB>0.) H+=pow(texture(iChannel2,p.xz*I1024).z,1.7)*2.;\n    //Return\n    return H;\n}\n\nvoid AddBrick(inout vec4 Output, vec3 P, vec3 LCP, int Index, float Rot, float Mat, vec3 RGB9) {\n    //Adds a brick to the octree\n    vec3 LDim=BrickDim[Index];\n    if (!(LDim.y>3. && P.y-LCP.y>LDim.y-1. && Output.w>9.99) &&\n        !((Index<=5 || Index==14 || Index==15) && P.y-LCP.y>1. && Output.w>9.99)) {\n        //No stud overwriting\n        if (Rot>0.5) {\n            //Rotation\n            LDim=LDim.zyx;\n            if (DFBox(P-LCP,LDim)<0.) {\n                vec3 PDiff=floor(P-LCP).zyx;\n                Output=vec4(11.+100.*Mat,RGB9.x+RGB9.y*10.+RGB9.z*100.,PDiff.x+10.*PDiff.y,PDiff.z+10.*float(Index));\n            }\n        } else {\n            //No rotation\n            if (DFBox(P-LCP,LDim)<0.) {\n                vec3 PDiff=floor(P-LCP);\n                Output=vec4(1.+100.*Mat,RGB9.x+RGB9.y*10.+RGB9.z*100.,PDiff.x+10.*PDiff.y,PDiff.z+10.*float(Index));\n            }\n        }\n    }\n}\n\nvoid ColorVoxel(inout vec4 Output, vec3 P, vec3 LCP, vec3 RGB9) {\n    //Modifies the color of a voxel\n    if (DFBox(P-LCP,vec3(1.))<0.) {\n        Output.y=RGB9.x+RGB9.y*10.+RGB9.z*100.;\n    }\n}\n\nvoid HMBrickify(inout vec4 Output, vec3 P) {\n    //Brickifies a heightmap\n    float H=HM(P);\n    float HI=floor(H*I3)*3.;\n    float FPY=floor(P.y*I3)*3.;\n    if (P.y<HI) {\n        //Fill bricks under the heightmap\n        if (DFBox(P.xz-vec2(48.,44.),vec2(28.,32.))<0.)\n            AddBrick(Output,P,vec3(floor(P.x),min(floor(P.y*I3)*3.,HI-3.),floor(P.z)),8,0.,0.,vec3(1.,6.,1.)+floor(texture(iChannel2,P.xz*I1024).y*2.5));\n        else\n            AddBrick(Output,P,vec3(floor(P.x),min(floor(P.y*I3)*3.,HI-3.),floor(P.z)),8,0.,0.,vec3(4.));\n    } else { \n        vec4 H4=floor(vec4(HM(P+vec3(1.,0.,0.)),HM(P+vec3(-1.,0.,0.)),HM(P+vec3(0.,0.,1.)),HM(P+vec3(0.,0.,-1.)))-H+0.5);\n        float H4Max=max(max(H4.x,H4.y),max(H4.z,H4.w));\n        for (float h=HI; h<H; h++) {\n            AddBrick(Output,P,vec3(floor(P.x),h,floor(P.z)),2,0.,0.,HMC[int(max(0.,min(6.,floor(H4Max)-1.)))]);\n        }\n        if (H4Max>=2.) {\n            //Slope\n            if (max(H4.x,H4.y)>max(H4.z,H4.w)) {\n                //Slope in x\n                if (H4.x<H4.y) {\n                    //Slope 2 rotated\n                    AddBrick(Output,P,vec3(floor(P.x),ceil(H),floor(P.z)),15,0.,0.,HMC[int(min(6.,floor(H4.y)))]);\n                } else {\n                    //Slope\n                    AddBrick(Output,P,vec3(floor(P.x),ceil(H),floor(P.z)),14,0.,0.,HMC[int(min(6.,floor(H4.x)))]);\n                }\n            } else {\n                //Slope in z\n                if (H4.z<H4.w) {\n                    //Slope 2\n                    AddBrick(Output,P,vec3(floor(P.x),ceil(H),floor(P.z)),15,1.,0.,HMC[int(min(6.,floor(H4.w)))]);\n                } else {\n                    //Slope rotated\n                    AddBrick(Output,P,vec3(floor(P.x),ceil(H),floor(P.z)),14,1.,0.,HMC[int(min(6.,floor(H4.z)))]);\n                }\n            }\n        } else {\n            float CeilH=ceil(H);\n            if ((floor(H)+1.-P.y)<1. && DFBox(P.xz-vec2(48.,60.),vec2(28.,16.))>0.) {\n                //Yellow flowers\n                if (texture(iChannel2,P.zx*I1024).y>0.92) {\n                    AddBrick(Output,P,vec3(floor(P.x),CeilH,floor(P.z)),1,0.,0.,vec3(9.,9.,1.));\n                    CeilH+=1.;\n                }\n            }\n            //Flower field\n            float CLen=length(P.xz-vec2(26.,64.));\n            if (CLen<12.) {\n                vec2 Noise=texture(iChannel2,P.zx*I1024).xz;\n                Noise.x=floor(Noise.x*pow(1.-CLen/12.,0.707)*7.5);\n                if (Noise.y>0.45) {\n                    float CH3=floor(Noise.x*I3)*3.;\n                    if (CH3>=3.) {\n                        AddBrick(Output,P,vec3(floor(P.x),CeilH+\n                                        clamp(floor((P.y-CeilH)*I3)*3.,0.,CH3-3.),floor(P.z)),6,0.,0.,vec3(9.,2.,0.));\n                        AddBrick(Output,P,vec3(floor(P.x),\n                                        clamp(floor(P.y),CeilH+CH3,CeilH+Noise.x),floor(P.z)),1,0.,0.,vec3(9.,6.,1.));\n                    } else {\n                        AddBrick(Output,P,vec3(floor(P.x),clamp(floor(P.y),CeilH,CeilH+Noise.x),floor(P.z)),1,0.,0.,vec3(9.,3.,1.));\n                    }\n                }\n            }\n        }\n    }\n}\n\nvec4 textureCube(vec2 UV) {\n    //Samples the cubemap\n    float Sign=-mod(floor(UV.y*I1024),2.)*2.+1.;\n    vec3 D=vec3(vec2(UV.x,mod(UV.y,1024.))*I512-1.,Sign);\n    if (UV.y>4096.) D=D.xzy;\n    else if (UV.y>2048.) D=D.zxy;\n    return texture(iChannel3,D);\n}\n\nvoid RenderStud(inout vec4 Output, vec3 StudPos, vec2 PixelUV) {\n    //Renders a stud positioned at StudPos\n    vec2 UV=((PixelUV-vec2(dot(StudPos,IsoTan),dot(StudPos,IsoBit)))*Sqrt2*0.5+0.5)*128.;\n    if (DFBox(UV,vec2(128.))<0.) {\n        vec4 A=textureCube(vec2(256.,2370.)+UV);\n        A.w+=dot(StudPos,IsoDir);\n        if (A.w<9999. && A.w<Output.w) Output=A;\n    }\n}\n\nvoid mainCubemap(out vec4 fragColor, in vec2 fragCoord, in vec3 rayOri, in vec3 rayDir) {\n    vec4 Output=vec4(0.,0.,0.,10000.);\n    vec2 UV; vec3 aDir=abs(rayDir);\n    if (aDir.z>max(aDir.x,aDir.y)) {\n        //Z-side\n        UV = floor(((rayDir.xy/aDir.z)*0.5+0.5)*1024.)+0.5;\n        if (rayDir.z<0.) UV.y+=1024.;\n    } else if (aDir.x>aDir.y) {\n        //X-side\n        UV = floor(((rayDir.yz/aDir.x)*0.5+0.5)*1024.)+0.5;\n        if (rayDir.x>0.) UV.y+=2048.;\n        else UV.y+=3072.;\n    } else {\n        //Y-side\n        UV = floor(((rayDir.xz/aDir.y)*0.5+0.5)*1024.)+0.5;\n        if (rayDir.y>0.) UV.y+=4096.;\n        else UV.y+=5120.;\n    }\n    //Octree\n    if (DFBox(UV,vec2(1024.,2048.))<0.) {\n        //LOD 0\n        if (iFrame>3 && texelFetch(iChannel0,ivec2(iChannelResolution[0].xy-1.),0).x<=0.) {\n            //Skip brickification\n            fragColor=texture(iChannel3,rayDir);\n            return;\n        } else {\n            //Brickification\n            Output=vec4(0.); vec2 sfp;\n            vec3 Pos=vec3(mod(UV.x,128.),floor(UV.x*I128)+8.*floor(UV.y*I128)+0.5,mod(UV.y,128.));\n            //Heightmap\n            HMBrickify(Output,Pos);\n            //House\n            if (Pos.y<35.) {\n                //Lower part of the house\n                //Foundation and ceiling\n                    if (DFBox(Pos.xz-vec2(60.,60.),vec2(16.,16.))<0.) {\n                        sfp=vec2(floor(Pos.x*0.25)*4.,floor(Pos.z*0.5)*2.);\n                        AddBrick(Output,Pos,vec3(sfp.x,15.,sfp.y),5,0.,0.,vec3(6.));\n                    }\n                    if (DFBox(Pos.xz-vec2(48.,64.),vec2(12.,12.))<0.) {\n                        sfp=vec2(floor(Pos.x*0.25)*4.,floor(Pos.z*0.5)*2.);\n                        AddBrick(Output,Pos,vec3(sfp.x,15.,sfp.y),5,0.,0.,vec3(6.));\n                    }\n                //Door wall\n                    if (DFBox(Pos.xz-vec2(48.,63.),vec2(12.,2.))<0.) {\n                        //Y15\n                        AddBrick(Output,Pos,vec3(51.,15.,63.),2,0.,0.,vec3(5.));\n                            AddBrick(Output,Pos,vec3(56.,15.,63.),2,0.,0.,vec3(5.));\n                        AddBrick(Output,Pos,vec3(59.,15.,63.),6,0.,0.,vec3(3.)); //Rund3\n                        //Y16\n                        AddBrick(Output,Pos,vec3(48.,16.,64.),10,0.,0.,vec3(9.)); //431\n                            AddBrick(Output,Pos,vec3(56.,16.,64.),10,0.,0.,vec3(9.)); //431\n                        AddBrick(Output,Pos,vec3(51.,16.,63.),16,1.,0.,vec3(9.)); //Headlight\n                            AddBrick(Output,Pos,vec3(56.,16.,63.),16,1.,0.,vec3(9.)); //Headlight\n                        //Y19\n                        AddBrick(Output,Pos,vec3(51.,19.,63.),12,1.,0.,vec3(7.)); //Slope\n                            AddBrick(Output,Pos,vec3(56.,19.,63.),12,1.,0.,vec3(7.)); //Slope\n                        AddBrick(Output,Pos,vec3(57.,19.,64.),10,0.,0.,vec3(9.)); //431\n                            AddBrick(Output,Pos,vec3(48.,19.,64.),10,0.,0.,vec3(9.)); //431\n                        //Y22\n                        AddBrick(Output,Pos,vec3(56.,22.,64.),5,0.,0.,vec3(4.)); //412\n                            AddBrick(Output,Pos,vec3(48.,22.,64.),5,0.,0.,vec3(4.)); //412\n                        //Y23\n                        AddBrick(Output,Pos,vec3(57.,23.,64.),10,0.,0.,vec3(9.)); //431\n                            AddBrick(Output,Pos,vec3(48.,23.,64.),10,0.,0.,vec3(9.)); //431\n                        AddBrick(Output,Pos,vec3(56.,23.,64.),16,1.,0.,vec3(9.)); //Headlight\n                            AddBrick(Output,Pos,vec3(51.,23.,64.),16,1.,0.,vec3(9.)); //Headlight\n                        //Y26\n                        AddBrick(Output,Pos,vec3(56.,26.,64.),10,0.,0.,vec3(9.)); //431\n                            AddBrick(Output,Pos,vec3(48.,26.,64.),10,0.,0.,vec3(9.)); //431\n                        //Y29\n                        AddBrick(Output,Pos,vec3(56.,29.,64.),10,0.,0.,vec3(9.)); //431\n                            AddBrick(Output,Pos,vec3(48.,29.,64.),10,0.,0.,vec3(9.)); //431\n                        //Y32\n                        AddBrick(Output,Pos,vec3(floor(Pos.x*0.25)*4.,31.,64.),10,0.,0.,vec3(9.)); //431\n                        AddBrick(Output,Pos,vec3(59.,32.,63.),13,1.,0.,vec3(9.)); //ISlope\n                            AddBrick(Output,Pos,vec3(48.,32.,63.),13,1.,0.,vec3(9.)); //ISlope\n                    }\n                //Small Ortho Door wall\n                    if (DFBox(Pos.xz-vec2(60.,60.),vec2(1.,5.))<0.) {\n                        //Y16\n                        AddBrick(Output,Pos,vec3(60.,16.,61.),10,1.,0.,vec3(9.)); //431\n                        //Y19\n                        AddBrick(Output,Pos,vec3(60.,19.,60.),10,1.,0.,vec3(9.)); //431\n                        //Y22\n                        AddBrick(Output,Pos,vec3(60.,22.,61.),5,1.,0.,vec3(4.)); //411\n                        //Y23\n                        AddBrick(Output,Pos,vec3(60.,23.,60.),10,1.,0.,vec3(9.)); //431\n                        //Y26\n                        AddBrick(Output,Pos,vec3(60.,26.,61.),10,1.,0.,vec3(9.)); //431\n                        //Y29\n                        AddBrick(Output,Pos,vec3(60.,29.,60.),10,1.,0.,vec3(9.)); //431\n                        //Y32\n                        AddBrick(Output,Pos,vec3(60.,32.,60.),10,1.,0.,vec3(9.)); //431\n                    }\n                //Flower wall\n                    if (DFBox(Pos.xz-vec2(60.,59.),vec2(16.,2.))<0. && DFBox(Pos-vec3(66.,23.,60.),vec3(4.,9.,1.))>0.) {\n                        //Y15 (Spotlights)\n                        AddBrick(Output,Pos,vec3(62.,15.,59.),1,0.,1.,vec3(9.,7.,7.)); //Rund\n                        AddBrick(Output,Pos,vec3(73.,15.,59.),1,0.,1.,vec3(9.,7.,7.)); //Rund\n                        //Y16\n                        AddBrick(Output,Pos,vec3(floor(Pos.x*0.25)*4.,16.,60.),10,0.,0.,vec3(9.)); //431\n                        AddBrick(Output,Pos,vec3(clamp(floor(Pos.x),67.,68.),16.,60.),16,1.,0.,vec3(9.)); //Headlight\n                            AddBrick(Output,Pos,vec3(69.,16.,60.),8,0.,0.,vec3(9.)); //131\n                        //Y19\n                        if (Pos.x>62. && Pos.x<74.) {\n                            AddBrick(Output,Pos,vec3(2.+floor(Pos.x*0.25-0.5)*4.,19.,60.),10,0.,0.,vec3(9.)); //431\n                        }\n                        AddBrick(Output,Pos,vec3(61.,19.,60.),8,0.,0.,vec3(9.)); //131\n                            AddBrick(Output,Pos,vec3(74.,19.,60.),8,0.,0.,vec3(9.)); //131\n                        AddBrick(Output,Pos,vec3(66.,19.,59.),13,1.,0.,vec3(7.)); //ISlope\n                            AddBrick(Output,Pos,vec3(69.,19.,59.),13,1.,0.,vec3(7.)); //ISlope\n                        //Y22\n                        AddBrick(Output,Pos,vec3(66.,22.,59.),5,0.,0.,vec3(4.,2.,2.)); //411 (Under flowers)\n                            AddBrick(Output,Pos,vec3(66.,23.+clamp(floor(Pos.y-23.),0.,1.),59.),1,0.,0.,vec3(9.,4.,2.));\n                            AddBrick(Output,Pos,vec3(67.,23.,59.),1,0.,0.,vec3(2.,7.,2.));\n                            AddBrick(Output,Pos,vec3(68.,23.,59.),1,0.,0.,vec3(0.,9.,0.));\n                            AddBrick(Output,Pos,vec3(69.,23.+clamp(floor(Pos.y-23.),0.,2.),59.),1,0.,0.,vec3(9.,7.,2.));\n                        AddBrick(Output,Pos,vec3(floor(Pos.x*0.25)*4.,22.,60.),5,0.,0.,vec3(4.)); //411\n                        //Y23\n                        if (Pos.x>62. && Pos.x<74.) {\n                            AddBrick(Output,Pos,vec3(2.+floor(Pos.x*0.25-0.5)*4.,23.,60.),10,0.,0.,vec3(9.)); //431\n                        }\n                        AddBrick(Output,Pos,vec3(61.,23.,60.),8,0.,0.,vec3(9.)); //131\n                            AddBrick(Output,Pos,vec3(74.,23.,60.),8,0.,0.,vec3(9.)); //131\n                        //Y26\n                        AddBrick(Output,Pos,vec3(floor(Pos.x*0.25)*4.,26.,60.),10,0.,0.,vec3(9.)); //431\n                        //Y29\n                        if (Pos.x>62. && Pos.x<74.) {\n                            AddBrick(Output,Pos,vec3(2.+floor(Pos.x*0.25-0.5)*4.,29.,60.),10,0.,0.,vec3(9.)); //431\n                        }\n                        AddBrick(Output,Pos,vec3(61.,29.,60.),8,0.,0.,vec3(9.)); //131\n                            AddBrick(Output,Pos,vec3(74.,29.,60.),8,0.,0.,vec3(9.)); //131\n                        //Y32\n                        if (Pos.x>62. && Pos.x<74.) {\n                            AddBrick(Output,Pos,vec3(2.+floor(Pos.x*0.25-0.5)*4.,32.,60.),10,0.,0.,vec3(9.)); //431\n                        }\n                        AddBrick(Output,Pos,vec3(61.,32.,59.),13,1.,0.,vec3(9.)); //ISlope\n                            AddBrick(Output,Pos,vec3(65.,32.,59.),13,1.,0.,vec3(9.)); //ISlope\n                            AddBrick(Output,Pos,vec3(70.,32.,59.),13,1.,0.,vec3(9.)); //ISlope\n                            AddBrick(Output,Pos,vec3(74.,32.,59.),13,1.,0.,vec3(9.)); //ISlope\n                        //131 for window\n                        AddBrick(Output,Pos,vec3(70.,22.+clamp(floor((Pos.y-22.)*I3),0.,2.)*3.,60.),8,0.,0.,vec3(9.));\n                    }\n                //Wall orth/behind flower wall\n                    if (DFBox(Pos.xz-vec2(75.,60.),vec2(1.,16.))<0.) {\n                        //Y16\n                        AddBrick(Output,Pos,vec3(75.,16.+clamp(floor((Pos.y-16.)*I3),0.,5.)*3.,\n                                                 floor(Pos.z*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                        ColorVoxel(Output,Pos,vec3(75.,22.,60.),vec3(4.));\n                    }\n                //Wall ortho/behind door\n                    if (DFBox(Pos.xz-vec2(48.,65.),vec2(1.,11.))<0.) {\n                        //Y16\n                        AddBrick(Output,Pos,vec3(48.,16.,floor(Pos.z*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y19\n                        AddBrick(Output,Pos,vec3(48.,19.,2.+floor(Pos.z*0.25-0.5)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y22\n                        AddBrick(Output,Pos,vec3(48.,22.,floor(Pos.z*0.25)*4.),5,1.,0.,vec3(5.)); //412\n                        //Y23\n                        AddBrick(Output,Pos,vec3(48.,23.,floor(Pos.z*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y26\n                        AddBrick(Output,Pos,vec3(48.,26.,2.+floor(Pos.z*0.25-0.5)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y29\n                        AddBrick(Output,Pos,vec3(48.,29.,floor(Pos.z*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y32\n                        AddBrick(Output,Pos,vec3(48.,32.,2.+floor(Pos.z*0.25-0.5)*4.),10,1.,0.,vec3(9.)); //431\n                    }\n                //Railing on +X side\n                    if (DFBox(Pos.xz-vec2(62.,44.),vec2(14.,16.))<0.) {\n                        AddBrick(Output,Pos,vec3(75.,15.,2.+floor((Pos.z-2.)*I3)*3.),7,0.,0.,vec3(6.)); //Kon\n                            AddBrick(Output,Pos,vec3(75.,18.,floor(Pos.z*0.5)*2.),3,1.,0.,vec3(9.)); //211\n                            AddBrick(Output,Pos,vec3(75.,19.,2.+floor((Pos.z-2.)*I3)*3.),3,1.,0.,vec3(9.,9.,4.)); //211\n                        AddBrick(Output,Pos,vec3(floor(Pos.x*I3)*3.,15.,44.),7,0.,0.,vec3(6.)); //Kon\n                            AddBrick(Output,Pos,vec3(floor(Pos.x*0.5)*2.,18.,44.),3,0.,0.,vec3(9.)); //211\n                            AddBrick(Output,Pos,vec3(2.+floor((Pos.x-2.)*I3)*3.,19.,44.),3,0.,0.,vec3(9.,9.,4.)); //211\n                    }\n            }\n            if (Pos.y>=35.) {\n                //Upper part of the house\n                //Floor\n                    if (DFBox(Pos.xz-vec2(60.,59.),vec2(16.,18.))<0.) {\n                        sfp=vec2(floor(Pos.x*0.25)*4.,1.+floor(Pos.z*0.5-0.5)*2.);\n                        AddBrick(Output,Pos,vec3(sfp.x,35.,sfp.y),5,0.,0.,vec3(6.));\n                    }\n                    if (DFBox(Pos.xz-vec2(48.,63.),vec2(12.,13.))<0.) {\n                        sfp=vec2(floor(Pos.x*0.25)*4.,1.+floor(Pos.z*0.5-0.5)*2.);\n                        AddBrick(Output,Pos,vec3(sfp.x,35.,sfp.y),5,0.,0.,vec3(6.));\n                    }\n                //Sloped ceiling\n                    if (DFBox(Pos.xz-vec2(59.,59.),vec2(18.,9.))<0.) {\n                        sfp.y=floor((Pos.y-36.)*I3);\n                        AddBrick(Output,Pos,vec3(mod(sfp.y,2.)+1.+floor(Pos.x*0.5-0.5-mod(sfp.y,2.)*0.5)*2.,\n                                36.+max(0.,sfp.y*3.),59.+sfp.y),4,1.,0.,vec3(9.,0.,0.)); //2Slope\n                        sfp.y=floor((Pos.y-39.)*I6)*2.;\n                        AddBrick(Output,Pos,vec3(59.,39.+max(0.,sfp.y*3.),60.+sfp.y),12,1.,0.,vec3(9.,0.,0.)); //Slope\n                    }\n                    if (DFBox(Pos.xz-vec2(59.,68.),vec2(16.,9.))<0.) {\n                        sfp.y=floor((Pos.y-36.)*I3);\n                        AddBrick(Output,Pos,vec3(1.+floor(Pos.x*0.5-0.5)*2.,\n                                36.+max(0.,sfp.y*3.),75.-sfp.y),11,1.,0.,vec3(9.,0.,0.)); //2Slope\n                    }\n                //Wall patio\n                    if (DFBox(Pos-vec3(59.,36.,61.),vec3(2.,24.,14.))<0. && DFBox(Pos-vec3(60.,36.,67.),vec3(1.,15.,4.))>0.) {\n                        //Y36\n                        AddBrick(Output,Pos,vec3(60.,36.,61.+floor((Pos.z-61.)*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y39\n                        if (Pos.z>62. && Pos.z<74.)\n                            AddBrick(Output,Pos,vec3(60.,39.,62.+floor((Pos.z-62.)*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y42\n                        if (Pos.z>63. && Pos.z<73.)\n                            AddBrick(Output,Pos,vec3(60.,42.,63.+floor((Pos.z-63.)*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                        //Y45\n                        if (Pos.z>64. && Pos.z<72.)\n                            AddBrick(Output,Pos,vec3(60.,45.,floor(Pos.z*0.25)*4.),10,1.,0.,vec3(9.)); //431\n                            //Lamp\n                            AddBrick(Output,Pos,vec3(59.,45.,71.),12,0.,0.,vec3(9.,6.,6.));\n                                AddBrick(Output,Pos,vec3(59.,42.,71.),6,0.,1.,vec3(9.,9.,4.));\n                        //Y48\n                        if (Pos.z>65. && Pos.z<71.)\n                            AddBrick(Output,Pos,vec3(60.,48.,65.+floor((Pos.z-65.)*0.5)*2.),9,1.,0.,vec3(9.)); //231\n                        //Y51\n                        AddBrick(Output,Pos,vec3(60.,51.,66.),10,1.,0.,vec3(9.)); //431\n                        //Y54\n                        AddBrick(Output,Pos,vec3(60.,54.,67.),9,1.,0.,vec3(9.)); //231\n                        //131 for door\n                        AddBrick(Output,Pos,vec3(60.,36.+clamp(floor((Pos.y-36.)*I3),0.,4.)*3.,71.),8,0.,0.,vec3(9.));\n                    }\n                //Patio\n                    if (DFBox(Pos.xz-vec2(48.,63.),vec2(11.,13.))<0.) {\n                        //Y36\n                        AddBrick(Output,Pos,vec3(floor(Pos.x*0.5)*2.,36.,63.),7,0.,0.,vec3(9.,7.,2.)); //Kon131\n                            AddBrick(Output,Pos,vec3(floor(Pos.x*0.5)*2.,36.,75.),7,0.,0.,vec3(9.,7.,2.)); //Kon131\n                            AddBrick(Output,Pos,vec3(48.,36.,1.+floor(Pos.z*0.5-0.5)*2.),7,0.,0.,vec3(9.,7.,2.)); //Kon131\n                        //Y39\n                        AddBrick(Output,Pos,vec3(floor(Pos.x*0.5)*2.,39.,63.),3,0.,0.,vec3(9.)); //211\n                            AddBrick(Output,Pos,vec3(floor(Pos.x*0.5)*2.,39.,75.),3,0.,0.,vec3(9.)); //211\n                            AddBrick(Output,Pos,vec3(48.,39.,1.+floor(Pos.z*0.5-0.5)*2.),3,1.,0.,vec3(9.)); //211\n                    }\n            }\n        }\n    } else if (DFBox(UV-vec2(0.,2048.),vec2(1024.,256.))<0.) {\n        //LOD 1\n        Output=vec4(0.);\n        vec2 CUV=vec2(UV.x,UV.y-2048.);\n        vec3 Pos=floor(vec3(mod(CUV.x,64.),floor(CUV.x*I64)+16.*floor(CUV.y*I64),mod(CUV.y,64.)))*2.+0.5;\n        vec2 LUV1=vec2(Pos.x+128.*mod(floor(Pos.y),8.),Pos.z+128.*floor(Pos.y*0.125));\n        vec2 LUV2=vec2(Pos.x+128.*mod(floor(Pos.y)+1.,8.),Pos.z+128.*floor((Pos.y+1.)*0.125));\n        Output.x=float(textureCube(LUV1).x>0.);\n        Output.x+=float(textureCube(LUV1+vec2(1.,0.)).x>0.);\n        Output.x+=float(textureCube(LUV1+vec2(0.,1.)).x>0.);\n        Output.x+=float(textureCube(LUV1+vec2(1.)).x>0.);\n        Output.x+=float(textureCube(LUV2).x>0.);\n        Output.x+=float(textureCube(LUV2+vec2(1.,0.)).x>0.);\n        Output.x+=float(textureCube(LUV2+vec2(0.,1.)).x>0.);\n        Output.x+=float(textureCube(LUV2+vec2(1.)).x>0.);\n        Output.x*=0.125;\n    } else if (DFBox(UV-vec2(0.,2304.),vec2(1024.,32.))<0.) {\n        //LOD 2\n        Output=vec4(0.);\n        vec2 CUV=vec2(UV.x,UV.y-2304.);\n        vec3 Pos=floor(vec3(mod(CUV.x,32.),floor(CUV.x*I32),mod(CUV.y,32.)))*2.+0.5;\n        vec2 LUV1=vec2(Pos.x+64.*mod(floor(Pos.y),16.),Pos.z+64.*floor(Pos.y*I16)+2048.);\n        vec2 LUV2=vec2(Pos.x+64.*mod(floor(Pos.y)+1.,16.),Pos.z+64.*floor((Pos.y+1.)*I16)+2048.);\n        Output=0.125*(textureCube(LUV1)+textureCube(LUV1+vec2(1.,0.))+textureCube(LUV1+vec2(0.,1.))+textureCube(LUV1+vec2(1.))+\n                      textureCube(LUV2)+textureCube(LUV2+vec2(1.,0.))+textureCube(LUV2+vec2(0.,1.))+textureCube(LUV2+vec2(1.)));\n    } else if (DFBox(UV-vec2(0.,2336.),vec2(256.,32.))<0.) {\n        //LOD > 2\n        Output=vec4(0.);\n        float POW=floor(log2(2368.-UV.y));\n        float S=pow(2.,POW);\n        float IS=pow(0.5,POW);\n        if (UV.x<S*S) {\n            vec2 CUV=vec2(UV.x,UV.y-2368.+2.*S);\n            vec3 Pos=floor(vec3(mod(CUV.x,S),floor(CUV.x*IS),mod(CUV.y,S)))*2.+0.5;\n            vec2 LUV1=vec2(Pos.x+2.*S*floor(Pos.y),Pos.z+2368.-4.*S);\n            vec2 LUV2=vec2(Pos.x+2.*S*(floor(Pos.y)+1.),Pos.z+2368.-4.*S);\n            Output=0.125*(textureCube(LUV1)+textureCube(LUV1+vec2(1.,0.))+textureCube(LUV1+vec2(0.,1.))+textureCube(LUV1+vec2(1.))+\n                      textureCube(LUV2)+textureCube(LUV2+vec2(1.,0.))+textureCube(LUV2+vec2(0.,1.))+textureCube(LUV2+vec2(1.)));\n        }\n    } else if (UV.y>5120.) {\n        Output=texture(iChannel2,vec2(UV.x,UV.y-2368.)*I1024);\n    }\n    //Logo\n    if (DFBox(UV-vec2(0.,2370.),vec2(128.))<0.) {\n        //LEGO logo SVG\n        if (iFrame > 0) {\n            fragColor=texture(iChannel3,rayDir);\n            return;\n        } else {\n            vec2 fragCoord=UV-vec2(0.,2370.);\n            float normalizer = float(samples * samples);  \n            float step = 1.0 / float(samples);\n            for (int sx = 0; sx < samples; sx++) {\n                for (int sy = 0; sy < samples; sy++) {  \n                    vec2 uv = (fragCoord + vec2(float(sx), float(sy)) * step)*I128;\n                    uv *= 2.0;\n                    uv -= vec2(1.0);\n                    uv *= 2.24;\n                    if (inPath(uv)) {\n                        fragColor += vec4(1.0);\n                    }\n                }\n            }\n            Output=vec4(fragColor.xyz/normalizer,1.);\n        }\n    } else if (DFBox(UV-vec2(128.,2370.),vec2(128.))<0.) {\n        //LEGO logo gradient\n        if (iFrame > 1) {\n            fragColor=texture(iChannel3,rayDir);\n            return;\n        } else {\n            for (float i=-2.; i<2.5; i++) {\n                for (float j=-2.; j<2.5; j++) {\n                    if (i==0. && j==0.) continue;\n                    Output.xy+=normalize(vec2(i,j))*textureCube(UV-vec2(128.,0.)+vec2(i,j)).x;\n                }\n            }\n            Output=vec4(normalize(vec3(-Output.y/45.,0.5,-Output.x/45.)),1.);\n        }\n    }\n    //Pre-rendering\n    vec2 IsoUV=vec2(UV.x,UV.y-2370.); vec2 IsoPos;\n    float AASize=max(1.,256.*IsoWidth*Sqrt05/iChannelResolution[0].x); //Not used\n    vec2 AAOff=vec2(0.); //Not used\n    if (IsoUV.y<128.) {\n        if (DFBox(IsoUV-vec2(256.,0.),vec2(128.))<0.) {\n            //Stud\n            vec2 PixelUV=(vec2(IsoUV.x-256.,IsoUV.y)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceStud(Pos,IsoDir,IsoDistance+10.);\n            vec3 llp=Pos+IsoDir*Output.w;\n            if (Output.w>0. && llp.y>0.199) {\n                //Samples the gradient\n                Output.xyz=textureCube(vec2(fract(llp.z),fract(llp.x))*128.+vec2(128.,2370.)).xyz;\n            }\n        } else if (DFBox(IsoUV-vec2(384.,0.),vec2(128.))<0.) {\n            //Rund\n            vec2 PixelUV=(vec2(IsoUV.x-384.,IsoUV.y)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceRund(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(0.,0.4,0.),PixelUV);\n        } else if (DFBox(IsoUV-vec2(512.,0.),vec2(128.))<0.) {\n            //111\n            vec2 PixelUV=(vec2(IsoUV.x-512.,IsoUV.y)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=Trace111(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(0.,0.4,0.),PixelUV);\n        } else if (DFBox(IsoUV-vec2(640.,0.),vec2(256.,128.))<0.) {\n            //211\n            vec2 PixelUV=(vec2(IsoUV.x-640.,IsoUV.y)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(2.,0.,0.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=Trace211(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(-1.,0.4,1.),PixelUV);\n            RenderStud(Output,vec3(0.,0.4,1.),PixelUV);\n        }\n    }\n    if (DFBox(IsoUV-vec2(0.,128.),vec2(256.))<0.) {\n        //2Slope\n        vec2 PixelUV=(vec2(IsoUV.x,IsoUV.y-128.)+AAOff-64.)*I64*Sqrt05;\n        vec3 Pos=vec3(1.5,0.,0.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n        Output=Trace2Slope(Pos,IsoDir,IsoDistance+10.);\n        RenderStud(Output,vec3(0.5,1.2,0.5),PixelUV);\n        RenderStud(Output,vec3(0.5,1.2,1.5),PixelUV);\n    } else if (DFBox(IsoUV-vec2(256.,128.),vec2(512.,256.))<0.) {\n        //412\n        vec2 PixelUV=(vec2(IsoUV.x-256.,IsoUV.y-128.)+AAOff-64.)*I64*Sqrt05;\n        vec3 Pos=vec3(3.5,0.,-1.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n        Output=Trace412(Pos,IsoDir,IsoDistance+10.);\n        RenderStud(Output,vec3(-2.5,0.4,2.5),PixelUV); RenderStud(Output,vec3(-1.5,0.4,2.5),PixelUV);\n        RenderStud(Output,vec3(-0.5,0.4,2.5),PixelUV); RenderStud(Output,vec3(0.5,0.4,2.5),PixelUV);\n        RenderStud(Output,vec3(-2.5,0.4,3.5),PixelUV); RenderStud(Output,vec3(-1.5,0.4,3.5),PixelUV);\n        RenderStud(Output,vec3(-0.5,0.4,3.5),PixelUV); RenderStud(Output,vec3(0.5,0.4,3.5),PixelUV);\n    } else if (DFBox(IsoUV-vec2(768.,128.),vec2(128.,256.))<0.) {\n        //Rund131\n        vec2 PixelUV=(vec2(IsoUV.x-768.,IsoUV.y-128.)+AAOff-64.)*I64*Sqrt05;\n        vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n        Output=TraceRund131(Pos,IsoDir,IsoDistance+10.);\n    } else if (DFBox(IsoUV-vec2(896.,0.),vec2(128.,256.))<0.) {\n        //Kon131\n        vec2 PixelUV=(vec2(IsoUV.x-896.,IsoUV.y)+AAOff-64.)*I64*Sqrt05;\n        vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n        Output=TraceKon131(Pos,IsoDir,IsoDistance+10.);\n    } else if (DFBox(IsoUV-vec2(896.,256.),vec2(128.,256.))<0.) {\n        //131\n        vec2 PixelUV=(vec2(IsoUV.x-896.,IsoUV.y-256.)+AAOff-64.)*I64*Sqrt05;\n        vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n        Output=Trace131(Pos,IsoDir,IsoDistance+10.);\n        RenderStud(Output,vec3(0.,1.2,0.),PixelUV);\n    }\n    if (IsoUV.y>384.) {\n        if (DFBox(IsoUV-vec2(0.,384.),vec2(256.))<0.) {\n            //231\n            vec2 PixelUV=(vec2(IsoUV.x,IsoUV.y-384.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.5,0.,0.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=Trace231(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(0.5,1.2,0.5),PixelUV); RenderStud(Output,vec3(-0.5,1.2,0.5),PixelUV);\n        } else if (DFBox(IsoUV-vec2(256.,384.),vec2(512.,256.))<0.) {\n            //431\n            vec2 PixelUV=(vec2(IsoUV.x-256.,IsoUV.y-384.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(3.5,0.,-1.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=Trace431(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(-2.5,1.2,2.5),PixelUV); RenderStud(Output,vec3(-1.5,1.2,2.5),PixelUV);\n            RenderStud(Output,vec3(-0.5,1.2,2.5),PixelUV); RenderStud(Output,vec3(0.5,1.2,2.5),PixelUV);\n        } else if (DFBox(IsoUV-vec2(768.,512.),vec2(256.))<0.) {\n            //2Slope2\n            vec2 PixelUV=(vec2(IsoUV.x-768.,IsoUV.y-512.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.5,0.,0.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=Trace2Slope2(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(-0.5,1.2,0.5),PixelUV);\n            RenderStud(Output,vec3(-0.5,1.2,1.5),PixelUV);\n        }\n    }\n    if (IsoUV.y>640. && IsoUV.y<896.) {\n        if (DFBox(IsoUV-vec2(0.,640.),vec2(256.))<0.) {\n            //Slope\n            vec2 PixelUV=(vec2(IsoUV.x,IsoUV.y-640.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.5,0.,0.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceSlope(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(0.5,1.2,0.5),PixelUV);\n        } else if (DFBox(IsoUV-vec2(256.,640.),vec2(256.))<0.) {\n            //Inverse slope\n            vec2 PixelUV=(vec2(IsoUV.x-256.,IsoUV.y-640.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.5,0.,0.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceISlope(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(0.5,1.2,0.5),PixelUV);\n        } else if (DFBox(IsoUV-vec2(512.,640.),vec2(128.,256.))<0.) {\n            //Only slope\n            vec2 PixelUV=(vec2(IsoUV.x-512.,IsoUV.y-640.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceOnlySlope(Pos,IsoDir,IsoDistance+10.);\n        } else if (DFBox(IsoUV-vec2(640.,640.),vec2(128.,256.))<0.) {\n            //Only slope 2\n            vec2 PixelUV=(vec2(IsoUV.x-640.,IsoUV.y-640.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceOnlySlope2(Pos,IsoDir,IsoDistance+10.);\n        }\n    }\n    if (IsoUV.y>896. && IsoUV.y<1152.) {\n        if (DFBox(IsoUV-vec2(0.,896.),vec2(128.,256.))<0.) {\n            //Headlight\n            vec2 PixelUV=(vec2(IsoUV.x,IsoUV.y-896.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.,0.,1.)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceHeadLight(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(0.,1.2,0.),PixelUV);\n        } else if (DFBox(IsoUV-vec2(256.,896.),vec2(256.))<0.) {\n            //Inverse slope 2\n            vec2 PixelUV=(vec2(IsoUV.x-256.,IsoUV.y-896.)+AAOff-64.)*I64*Sqrt05;\n            vec3 Pos=vec3(1.5,0.,0.5)-IsoDir*IsoDistance+IsoTan*PixelUV.x+IsoBit*PixelUV.y;\n            Output=TraceISlope2(Pos,IsoDir,IsoDistance+10.);\n            RenderStud(Output,vec3(-0.5,1.2,0.5),PixelUV);\n        }\n    }\n    //Output\n    fragColor=Output;\n}","name":"Cube A","description":"","type":"cubemap"}]}