{"ver":"0.1","info":{"id":"mdScDh","date":"1687641285","viewed":115,"name":"Audio Viz (forked, mic loopback)","username":"MV10","description":"Top: time domain audio; the \"sound wave\", aka PCM. Bottom: frequency domain audio, aka spectrum, which is the lower-Hz half of WebAudio's oddball time-smoothed pseudo-decibel algorithm. WebAudio downsamples both to 0-255 byte-range fidelity.","likes":0,"published":1,"flags":4,"usePreview":0,"tags":["audio"],"hasliked":0,"parentid":"Mdlfzn","parentname":"Audio Viz time and freq. domain"},"renderpass":[{"inputs":[{"id":"XdXGRr","filepath":"/presets/mic.png","previewfilepath":"/presets/mic.png","type":"mic","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float plot(float uvy, float liney, float lineWidth)\n{\n    float pos = smoothstep(uvy - lineWidth, uvy, liney) - smoothstep(uvy, uvy + lineWidth, liney);\n\treturn pos;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float timeDomain = texture(iChannel0, vec2(uv.x, 0.75)).r;\n    float frequencyDomain = texture(iChannel0, vec2(uv.x, 0.25)).r;\n    float t = plot(uv.y*2.0 - 1.0, timeDomain, 0.02);\n    float f = plot(uv.y*2.0, frequencyDomain, 0.01);\n \tfragColor = vec4(t, f, 0.0, 1.0);\n}","name":"Image","description":"","type":"image"}]}