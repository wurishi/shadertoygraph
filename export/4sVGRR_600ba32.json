{"ver":"0.1","info":{"id":"4sVGRR","date":"1538272611","viewed":601,"name":"Tycho | Awake Remixes","username":"vochsel","description":"Another take on an album artwork by Tycho. \nSong: Tycho - Plains (Baio Remix)\n\n[url=http://cdn.shopify.com/s/files/1/0060/3652/products/Tycho-Awake-Remixed-1500_300_1024x1024.jpeg?v=1449191505]Album Cover Reference[/url]\n","likes":6,"published":1,"flags":64,"usePreview":0,"tags":["music","remix","artwork","cover","soundcloud","tycho","tycho","album","baio","plains"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGzn","filepath":"/media/a/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","previewfilepath":"/media/ap/0c7bf5fe9462d5bffbd11126e82908e39be3ce56220d900f633d58fb432e56f5.png","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sjXWt","filepath":"https://soundcloud.com/tycho/plains-baio-remix","previewfilepath":"https://soundcloud.com/tycho/plains-baio-remix","type":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Settings\n\n#define ANIMATION 1\n\n// Helpers\n\n#define rgb(r, g, b) vec3(float(r)/255., float(g)/255., float(b)/255.)\n\n#define BG_COL rgb(50.0, 51.0, 53.0)\n\n#define T_2 rgb(199,125,103)\n#define T_3 rgb(182,113,106)\n#define T_4 rgb(159,100,118)\n#define T_5 rgb(54,128,157) \n\n#define PI 3.1416\n\n// Rotation matrix\nmat2 rotate(float angle)\n{\n    float s = sin(angle);\n    float c = cos(angle);\n    return mat2(c, -s, s, c);\n}\n\n// Patterns\nfloat box(vec2 p)\n{\n    return (abs(p.x)+abs(p.y)+2.5)*0.5;\n}\n\nfloat pattern(vec2 uv)\n{\n    uv *= 1.5;\n    uv *= rotate(PI/6.25);\n    uv.y += iTime * 0.1;\n    \n    if((mod(uv.x, 2.)-1.0) > 0.) uv.y += 0.48888;\n    uv = mod(uv*2.0, 2.0)-1.0;\n    uv *= rotate(PI/4.);\n    \n    float h = abs(sin(box(uv*20.)))*1.2;\n    return smoothstep(0.9, 1.,h);\n}\n\n//Distance Functions\nfloat sdTriangle( in vec2 p0, in vec2 p1, in vec2 p2, in vec2 p )\n{\n\tvec2 e0 = p1 - p0;\n\tvec2 e1 = p2 - p1;\n\tvec2 e2 = p0 - p2;\n\n\tvec2 v0 = p - p0;\n\tvec2 v1 = p - p1;\n\tvec2 v2 = p - p2;\n\n\tvec2 pq0 = v0 - e0*clamp( dot(v0,e0)/dot(e0,e0), 0.0, 1.0 );\n\tvec2 pq1 = v1 - e1*clamp( dot(v1,e1)/dot(e1,e1), 0.0, 1.0 );\n\tvec2 pq2 = v2 - e2*clamp( dot(v2,e2)/dot(e2,e2), 0.0, 1.0 );\n    \n    vec2 d = min( min( vec2( dot( pq0, pq0 ), v0.x*e0.y-v0.y*e0.x ),\n                       vec2( dot( pq1, pq1 ), v1.x*e1.y-v1.y*e1.x )),\n                       vec2( dot( pq2, pq2 ), v2.x*e2.y-v2.y*e2.x ));\n\n\treturn -sqrt(d.x)*sign(d.y);\n}\n\nfloat tri(vec2 uv, float s, vec2 c) {    \n    c.y += 0.15;\n    //Points for triangle\n    vec2 p1 = c + vec2(-0.5, -0.4) * s;\n    vec2 p2 = c + vec2(0.0, 0.5) * s;\n    vec2 p3 = c + vec2(0.5, -0.4) * s;\n    \n    return sdTriangle(p1, p2, p3, uv);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy * 2. - 1.;\n    uv.x *= iResolution.x / iResolution.y;\n    \n    //float scale = 1.0 + (sin(iTime) * 15.0) / 2.0 - 5.0;\n    \n    //float circle = pow(length(uv - vec2(0.0, 0.0)), scale) * scale;\n     \n    float p = pattern(uv);\n    float n = texture(iChannel0, uv*2.5).x*0.1;\n    \n    uv.y +=0.2;\n    //uv *= rotate(sin(iTime*0.5)*0.1);\n    \n    //Scene\n    vec3 col = BG_COL;\n\n    float triangle = tri(uv, 1.95, vec2(0.0));\n    \n    float amp, amp1, amp2;\n    \n    #if ANIMATION == 1    \n        amp = texture(iChannel1, vec2(0.0)).x * 0.05;\n        amp1 = texture(iChannel1, vec2(0.1)).x * 0.05;\n        amp2 = texture(iChannel1, vec2(0.4, 0.0)).x * 0.05;\n    #endif \n    \n    \n    float t  = 1.0-sign(triangle + (amp2 * 2.));\n    float t1 = 1.0-sign(triangle + 0.1 + (amp));\n    float t2 = 1.0-sign(triangle + 0.175 + (amp2));\n    float t3 = 1.0-sign(triangle + 0.275 + (amp1 / 2.0));\n    float t4 = 1.0-sign(triangle + 0.375 - (amp / 2.0));\n    float t5 = 1.0-sign(triangle + 0.45 - (amp2));\n    \n    \n    if(t-t1 > 0.)\n        col = mix(vec3(1.0), BG_COL, 1.-p);\n    if(t1-t2 > 0.0)\n        col = T_2;\n    else if(t2-t3 > 0.0)\n        col = T_3;\n    else if(t3-t4 > 0.0)\n        col = T_4;\n    else if(t4-t5 > 0.0)\n        col = T_5;\n    \n    //col = T_2;\n\t\n    fragColor = vec4(col+n,1.0);\n}","name":"Image","description":"","type":"image"}]}