{"ver":"0.1","info":{"id":"tdGcRt","date":"1603458541","viewed":259,"name":"Weird Distortion 3","username":"Leasel","description":"This a distortion where every pixel moves itself based on the texture from iChannel1 and moves a part of its colour to the neighbouring pixel.\n(Somehow the texture from iChannel1 can reconstruct itself out of the texture from iChannel 2)","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["buffer","sequel"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = Smp(fragCoord*dif.xy);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rn","filepath":"/media/a/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","previewfilepath":"/media/ap/52d2a8f514c4fd2d9866587f4d7b2a5bfa1a11a0e772077d7682deb8b3b517e5.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"#define Move(uv) texture(iChannel1,uv)\n\nvec2 Mov(in vec2 uv)\n{\n    vec4 Pix = Move(uv);\n    return (Pix.xy - Pix.zw)*dif.xy;\n}\n//vec2 Mov(in vec2 uv)//Also beautifull\n//{\n//    return (Move(uv).xy-0.5)*2.;\n//}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord*dif.xy;\n    vec4 Initiation = (iFrame == 0) ? texture(iChannel2, uv) : vec4(0.);\n    \n    vec4 Col = vec4(0.);\n    //The right way is making x < 2. && y < 2.\n    for(float y = -1.; y < 1.; y++)\n    {\n        for(float x = -1.; x < 1.; x++)\n    \t{\n            vec2 Pos = vec2(x, y);//Object Space\n            vec2 Move = Mov(uv);//The amount this cell will move\n            Move += Pos;//Is the amount the cell should have moved\n            \n            Pos *= dif.xy;//Texture space\n        \tPos += uv;//Texture space\n            \n            //The part it will get from another cell\n    \t\tfloat Part = (1. - abs(Move.x))*(1. - abs(Move.y))*1.05;//make the 1.05 1 for almost perfect colour balance\n    \t\t//Summed up colors\n    \t\tCol += Smp(Pos)*Part;\n    \t}\n    }\n    \n    fragColor = Initiation + Col;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = Smp(fragCoord*dif.xy);\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define dif vec3(1./iResolution.xy,0.)\n//#define dif2 vec3(-1./iResolution.x, 1./iResolution.y,0.)\n#define Smp(uv) texture(iChannel0,uv)","name":"Common","description":"","type":"common"}]}