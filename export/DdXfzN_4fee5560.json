{"ver":"0.1","info":{"id":"DdXfzN","date":"1688539390","viewed":38,"name":"Mandelbrot Test StrifeStg","username":"striifeStg","description":"Testing Mandelbrot set\nzoom out - S\nzoom in - W\nuse arrow keys to span across the screen. Press S for a while to zoom out and view the mandelbrot.","likes":0,"published":1,"flags":48,"usePreview":0,"tags":["mandelbrot"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec3 waveColors(float d){\n    vec3 dcOffset = vec3(0.500,0.500,0.500);\n    vec3 amp = vec3(0.500,0.500,0.500);\n    vec3 freq = vec3(2.448,1.388,1.118);\n    vec3 phase = vec3(0.500,0.500,0.500);\n    \n    return dcOffset+ amp*cos(6.28*(freq*d+phase));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord/iResolution.xy-0.5)*2.;\n    uv.x *= iResolution.x/iResolution.y;\n    vec3 offset = texelFetch( iChannel0, ivec2(0,0), 0 ).xyz;\n    if(offset.z == 0.){\n        offset.z = 1.;\n    }\n    uv*=(offset.z);\n    uv+=(offset.xy);\n\n    // Time varying pixel color\n    // vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));\n\n    // vec2 z = vec2(0.);\n    vec2 z = uv;\n    vec2 c = uv;\n    //float z;\n    float i = 0.;\n    for(;i<1000.;i++){\n        z = vec2(z.x*z.x - z.y*z.y, 2.*z.x*z.y) + c;\n        if(length(z)>16.){\n            break;\n        }\n    }\n    int col=0;\n    if(i==1000.)i=0.;\n    i = i/1000.;\n    i = 1.-exp(-i*3.0);\n    \n    // Output to screen\n    fragColor = vec4(waveColors(i),1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRr","filepath":"/presets/tex00.jpg","previewfilepath":"/presets/tex00.jpg","type":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"// For details on how the keyboard input works, see iq's tutorial: https://www.shadertoy.com/view/lsXGzf\n\n// Numbers are based on JavaScript key codes: https://keycode.info/\nconst int KEY_LEFT  = 37;\nconst int KEY_UP    = 38;\nconst int KEY_RIGHT = 39;\nconst int KEY_DOWN  = 40;\nconst int KEY_W = 87;\nconst int KEY_S = 83;\n\nvec3 handleKeyboard(vec3 offset) {\n    float velocity = 1. / 100.; // This will cause offset to change by 0.01 each time an arrow key is pressed\n    \n    // texelFetch(iChannel1, ivec2(KEY, 0), 0).x will return a value of one if key is pressed, zero if not pressed\n    vec3 left = texelFetch(iChannel1, ivec2(KEY_LEFT, 0), 0).x * vec3(-1, 0, 0);\n    vec3 up = texelFetch(iChannel1, ivec2(KEY_UP,0), 0).x * vec3(0, 1, 0);\n    vec3 right = texelFetch(iChannel1, ivec2(KEY_RIGHT, 0), 0).x * vec3(1, 0, 0);\n    vec3 down = texelFetch(iChannel1, ivec2(KEY_DOWN, 0), 0).x * vec3(0, -1, 0);\n    vec3 zoomIn = texelFetch(iChannel1, ivec2(KEY_W, 0), 0).x * vec3(0, 0, -.1);\n    vec3 zoomOut = texelFetch(iChannel1, ivec2(KEY_S, 0), 0).x * vec3(0, 0, .1);\n    \n    offset += (left + up + right + down+ zoomIn + zoomOut) * velocity;\n\n    return offset;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Return the offset value from the last frame (zero if it's first frame)\n    vec3 offset = texelFetch( iChannel0, ivec2(0, 0), 0).xyz;\n    \n    // Pass in the offset of the last frame and return a new offset based on keyboard input\n    offset = handleKeyboard(offset);\n\n    // Store offset in the XY values of every pixel value and pass this data to the \"Image\" shader and the next frame of Buffer A\n    fragColor = vec4(offset, 0);\n}","name":"Buffer A","description":"","type":"buffer"}]}