{"ver":"0.1","info":{"id":"ssfXzB","date":"1618779205","viewed":39,"name":"313_ivanova_v3v1","username":"Vassa99","description":"внутри черный дым, снаружи кубмап и тени","likes":0,"published":1,"flags":32,"usePreview":0,"tags":[],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n\n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsX3zn","filepath":"/media/a/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","previewfilepath":"/media/ap/94284d43be78f00eb6b298e6d78656a1b34e2b91b34940d02f1ca8b22310e8a0.png","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3Rr","filepath":"/media/a/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","previewfilepath":"/media/ap/aea6b99da1d53055107966b59ac5444fc8bc7b3ce2d0bbb6a4a3cbae1d97f3aa.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"/media/a/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"/media/ap/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const float INF = 1e10;\nconst float EPSILON = 0.0000001;\nconst vec3 CAMERA_POS = vec3(6, 3, -10);\n\nvec3 LIGHT1_POS = vec3(-8, 0.3, 0.2);\nconst float LIGHT1_RADIUS = 0.2;\nconst vec3 LIGHT1_COLOR = vec3(0.3, 0.3, 1);\n\nvec3 LIGHT2_POS = vec3(2, 2, 2);\nconst float LIGHT2_RADIUS = 0.2;\nconst vec3 LIGHT2_COLOR = vec3(1, 1, 0.7);\n\nvec3 LIGHT3_POS = vec3(-6, 2.5, 1);\nconst float LIGHT3_RADIUS = 0.4;\nconst vec3 LIGHT3_COLOR = vec3(0.7, 1, 0.7);\nvec3 randDir;\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\n\nconst float GLASS_N = 1.5;\nconst float AIR_N = 1.0;\n\n\n\nfloat tracePlane(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.2 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    \n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) >= 60.0) {\n        return INF;\n    }\n    normal = vec3(0, 1, 0);\n    return t;\n}\n\n\nfloat traceSphere(vec3 pos, vec3 dir, float r, out vec3 normal) {\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - r * r;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    float t = -b - sqrt(D);\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = -b + sqrt(D);\n    if (t < 0.0) {\n        return INF;\n    }\n    normal = normalize(pos + t * dir);\n    return t;\n}\n\n\nfloat traceCylinder(vec3 pos, vec3 dir, out vec3 normal) {\n    float t = (-1.0 - pos.y) / dir.y;\n    if (t <= 0.0) {\n        return INF;\n    }\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz, worldPos.xz) < 2.5) {\n        normal = vec3(0, 1, 0);\n        return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - 2.5;\n    float D = b * b - a * c;\n    if (D < 0.0) {\n        return INF;\n    }\n    t = (-b - sqrt(D)) / a;\n    if (t > 0.0) {\n        worldPos = t * dir + pos;\n        if (worldPos.y <= -1.0) {\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }\n    }\n    t = (-b + sqrt(D)) / a;\n    if (t < 0.0) {\n        return INF;\n    }\n    worldPos = t * dir + pos;\n    if (worldPos.y <= -1.0) {\n        normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n        return t;\n    }\n    return INF;\n}\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, vec3 ed1,vec3 ed2, vec3 ed3, out vec3 normal)\n{\n    vec3 edge1 = ed2 - ed1;\n    vec3 edge2 = ed3 - ed1;\n    vec3 h = cross(dir,edge2);\n    float a = dot(edge1,h);\n    if (a > -EPSILON && a < EPSILON)\n        return INF;\n    float f = 1.0/a;\n    vec3 s = pos - ed1;\n    float u = f * dot(s,h);\n    if (u < 0.0 || u > 1.0)\n        return INF;\n    vec3 q = cross(s,edge1);\n    float v = f * dot(dir,q);\n    if (v < 0.0 || u + v > 1.0)\n        return INF;\n    float t = f * dot(edge2,q);\n    if (t > EPSILON) \n    {\n        normal = normalize(cross(edge1,edge2));\n        if(dot(normal, dir) <0.0){\n            normal = -normal;\n        }\n        return t;\n    }\n    else \n        return INF;\n}\n\n\n\nfloat traceOct(vec3 pos, vec3 dir, float r, out vec3 normal) \n{\n    \n    float t1 = (r - pos.x - pos.y - pos.z) / ( dir.x + dir.y + dir.z);\n    float t2 = (r + pos.x - pos.y - pos.z) / (-dir.x + dir.y + dir.z);\n    float t3 = (r - pos.x + pos.y - pos.z) / ( dir.x - dir.y + dir.z);\n    float t4 = (r + pos.x + pos.y - pos.z) / (-dir.x - dir.y + dir.z);\n    float t5 = (r - pos.x - pos.y + pos.z) / ( dir.x + dir.y - dir.z);\n    float t6 = (r + pos.x - pos.y + pos.z) / (-dir.x + dir.y - dir.z);\n    float t7 = (r - pos.x + pos.y + pos.z) / ( dir.x - dir.y - dir.z);\n    float t8 = (r + pos.x + pos.y + pos.z) / (-dir.x - dir.y - dir.z);\n\n    if (t1 < 0.0) {t1 = INF;}\n    if (t2 < 0.0) {t2 = INF;}\n    if (t3 < 0.0) {t3 = INF;}\n    if (t4 < 0.0) {t4 = INF;}\n    if (t5 < 0.0) {t5 = INF;}\n    if (t6 < 0.0) {t6 = INF;}\n    if (t7 < 0.0) {t7 = INF;}\n    if (t8 < 0.0) {t8 = INF;}\n    \n    float tMin = INF;\n    \n    vec3 worldPos = t1 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y >= 0.0) && (worldPos.z >= 0.0)))\n    {\n        t1 = INF;\n    }\n    worldPos = t2 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y >= 0.0) && (worldPos.z >= 0.0)))\n    {\n        t2 = INF;\n    }\n    worldPos = t3 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y < 0.0) && (worldPos.z >= 0.0)))\n    {\n        t3 = INF;\n    }\n    worldPos = t4 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y < 0.0) && (worldPos.z >= 0.0)))\n    {\n        t4 = INF;\n    }\n    worldPos = t5 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y >= 0.0) && (worldPos.z < 0.0)))\n    {\n        t5 = INF;\n    }\n    worldPos = t6 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y >= 0.0) && (worldPos.z < 0.0)))\n    {\n        t6 = INF;\n    }\n    worldPos = t7 * dir + pos;\n    if (!((worldPos.x >= 0.0) && (worldPos.y < 0.0) && (worldPos.z < 0.0)))\n    {\n        t7 = INF;\n    }\n    worldPos = t8 * dir + pos;\n    if (!((worldPos.x < 0.0) && (worldPos.y < 0.0) && (worldPos.z < 0.0)))\n    {\n        t8 = INF;\n    }\n    \n    if (t1 < tMin) {tMin = t1;}\n    if (t2 < tMin) {tMin = t2;}\n    if (t3 < tMin) {tMin = t3;}\n    if (t4 < tMin) {tMin = t4;}\n    if (t5 < tMin) {tMin = t5;}\n    if (t6 < tMin) {tMin = t6;}\n    if (t7 < tMin) {tMin = t7;}\n    if (t8 < tMin) {tMin = t8;}\n    \n    if (tMin == INF) {return INF;}\n\n    if (t1 == tMin)\n    {\n       normal = normalize(vec3(1, 1, 1));\n       return t1;\n    }\n    \n    if (t2 == tMin)\n    {\n        normal = normalize(vec3(-1, 1, 1));\n        return t2;\n    }\n    \n    if (t3 == tMin)\n    {\n        normal = normalize(vec3(1, -1, 1));\n        return t3;\n    }\n    \n    if (t4 == tMin)\n    {\n        normal = normalize(vec3(-1, -1, 1));\n        return t4;\n    }\n    \n    if (t5 == tMin)\n    {\n        normal = normalize(vec3(1, 1, -1));\n        return t5;\n    }\n    \n    if (t6 == tMin)\n    {\n        normal = normalize(vec3(-1, 1, -1));\n        return t6;\n    }\n    \n    if (t7 == tMin)\n    {\n        normal = normalize(vec3(1, -1, -1));\n        return t7;\n    }\n    \n    if (t8 == tMin)\n    {\n        normal = normalize(vec3(-1, -1, -1));\n        return t8;\n    }\n}\n\n\n\nbool isShadow(vec3 pos, vec3 target) {\n    vec3 dir = target - pos;\n    float dist = length(dir);\n    dir /= dist;\n    \n    vec3 OctahedronNorm;\n    float Octahedron = traceOct(pos, dir, 1.0, OctahedronNorm);\n    return (Octahedron < dist);\n        \n    vec3 cylNorm;\n    float cylT = traceCylinder(pos, dir, cylNorm);\n    return (cylT < dist);\n}\n\n\nvec3 computeLight(vec3 pos, vec3 color, vec3 normal) {\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float distSqToLight1 = dot(toLight1, toLight1);\n    float att1 = isShadow(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 15.0f / distSqToLight1;\n    \n    vec3 toLight2 = LIGHT2_POS - pos;\n    float distSqToLight2 = dot(toLight2, toLight2);\n    float att2 = isShadow(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 20.0f / distSqToLight2;\n    \n    vec3 toLight3 = LIGHT3_POS - pos;\n    float distSqToLight3 = dot(toLight3, toLight3);\n    float att3 = isShadow(pos, LIGHT3_POS + randDir * LIGHT3_RADIUS) ? 0.0 : 10.0f / distSqToLight3;\n    \n    \n    return color * (\n        max(0.0, dot(normal, normalize(toLight1))) * att1 * LIGHT1_COLOR\n        + max(0.0, dot(normal, normalize(toLight2))) * att2 * LIGHT2_COLOR\n        + max(0.0, dot(normal, normalize(toLight3))) * att3 * LIGHT3_COLOR\n        + texture(iChannel1, normal).rgb * 0.1\n        \n    );\n}\n\n\nvec3 refraction(vec3 v, vec3 normal, float n1, float n2) {\n    if (dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 tang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * tang + cosB * normal;\n}\n\n\nfloat pow2(float x) {\n    return x * x;\n}\n\n\nfloat rand(float frame)\n{\n    return fract(sin( dot(vec3(frame), vec3(12.9898,78.233,45.5432) )) * 43758.5453);\n}\n\n\n\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 0.75;\n}\n\nfloat BeerLambert(float absorptionCoefficient, float distanceTraveled)\n{\n    return exp(-absorptionCoefficient * distanceTraveled);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    const float MARCH_SIZE = 0.25;\n    float opacity = 1.0;\n    float absorption = 10.0;\n    float totalAbs = 0.0;\n    for (int i = 0; i < 50; ++i) {\n        vec3 curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        float sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            float prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.2).x\n            + texture(iChannel3, curPos * 0.4).x\n            + texture(iChannel3, curPos * 0.8).x\n            + texture(iChannel3, curPos * 1.6).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            float absorptionLastStep = prevOpacity - opacity;\n            totalAbs += absorptionLastStep;\n        }\n    }\n    return vec4(vec3(5, 2, 5) * totalAbs, 1.0 - opacity);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals * 2.0 - 1.0);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5)) / iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0, 1, 0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVec = normalize(front + right * uv.x + up * uv.y);\n   \n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVec;\n    float n1 = AIR_N;\n    float GLASS_R = pow2(AIR_N - GLASS_N) / pow2(AIR_N + GLASS_N);\n    const float DIAMOND_N = 2.5;\n    float DIAMOND_R = pow2(DIAMOND_N - GLASS_N) / pow2(DIAMOND_N + GLASS_N);\n    \n    vec3 colorMult = vec3(1, 1, 1);\n    \n    for (int i = 0; i < 10; ++i) {\n        float t = INF;\n        int materialType;\n        vec3 color;\n        vec3 normal;\n        float nEnter = AIR_N;\n        \n        \n        vec3 planeNorm;\n        float planeT = tracePlane(curPos, curDir, planeNorm);\n        if (planeT < t) {\n            t = planeT;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;\n            normal = planeNorm;\n        }\n        \n        \n        vec3 light1Norm;\n        float light1 = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, light1Norm);\n        if (light1 < t) {\n            t = light1;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n            normal = light1Norm;\n        }\n        vec3 light2Norm;\n        float light2 = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, light2Norm);\n        if (light2 < t) {\n            t = light2;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n            normal = light2Norm;\n        }\n        vec3 light3Norm;\n        float light3 = traceSphere(curPos - LIGHT3_POS, curDir, LIGHT3_RADIUS, light3Norm);\n        if (light3 < t) {\n            t = light3;\n            materialType = EMISSION;\n            color = LIGHT3_COLOR;\n            normal = light3Norm;\n        }\n        \n        const float OCTAH_N  = 1.5;\n        float OCTAH_R = pow2(AIR_N   - OCTAH_N) / pow2(AIR_N   + OCTAH_N);\n        \n        \n        vec3 octNorm;\n        float octT = traceOct(curPos, curDir, 1.0, octNorm);\n        if (octT < t) \n        {\n            t = octT;\n            normal = octNorm;\n            if (randVals.x < OCTAH_R * 2.0) \n            {\n                materialType = REFLECTION;\n            } \n            else \n            {\n                colorMult *= vec3(1.0, 1.0, 0.0);\n                materialType = REFRACTION;\n                if (dot(curDir, normal) > 0.0) \n                {\n                    nEnter = AIR_N;\n                } \n                else \n                {\n                    nEnter = OCTAH_N;\n                }\n            }\n        }\n        \n        \n        \n        \n\n        vec3 cylNorm;\n        float cyl = traceCylinder(curPos, curDir, cylNorm);\n        if (cyl < t) {\n            t = cyl;\n            materialType = DIFFUSE;\n            vec3 worldPos = t * curDir + curPos;\n            color = texture(iChannel2, worldPos.xz * worldPos.y).rgb;\n            normal = cylNorm;\n        }\n        \n        \n        \n        \n        \n\n\n        if (t != INF) {\n            vec3 worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION) {\n                fragColor.rgb = color * colorMult;\n                break;\n            } else if (materialType == DIFFUSE) {\n                fragColor.rgb = computeLight(worldPos, color, normal) * colorMult;\n                break;\n            } else if (materialType == REFLECTION) {\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            } else if (materialType == REFRACTION) {\n                curDir = refraction(curDir, normal, n1, nEnter);\n                curPos = worldPos + curDir * 1e-5;\n                vec4 fog = sampleFog(curPos, viewVec);\n                fragColor.rgb += fog.rgb * fog.a * colorMult;\n                colorMult *= 1.0 - fog.a;\n                float tmp = n1;\n                n1 = nEnter;\n                nEnter = tmp;\n                \n               \n            }\n        } else {\n            fragColor.rgb = texture(iChannel1, curDir).rgb * colorMult * 1.5;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}