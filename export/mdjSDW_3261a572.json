{"ver":"0.1","info":{"id":"mdjSDW","date":"1670339914","viewed":86,"name":"\"Loading screen\" fractals","username":"byteManiak","description":"A fractal shader that would totally work as a loading screen for a videogame!","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["fractal","loading","dynamic"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define CONVERGE_ITER 30\n#define CONVERGE_ITER_F 30.\n\n#define MIN_VAL -11000.\n#define MAX_VAL 10000.\n\nvec2 iter(vec2 point)\n{\n\tvec2 ret;\n\tret.x = point.y * point.y * mix(-1., 1., (sin(iTime)+ 1.) / 2.) - point.x * point.x + 3.5 * mix(-.18, .4, (sin(iTime / 2.)+ 1.) / 2.);\n\tret.y = 2. * point.x * point.y;\n\n\tret.x -= point.x;// * point.x * point.y;\n\tret.y += point.y;// * point.y * point.x;\n\n\tif (ret.x < MIN_VAL) ret.x = MIN_VAL;\n\telse if (ret.x > MAX_VAL) ret.x = MAX_VAL;\n\n\tif (ret.y < MIN_VAL) ret.y = MIN_VAL;\n\telse if (ret.y > MAX_VAL) ret.y = MAX_VAL;\n\treturn ret;\n}\n\nfloat dist(vec2 orig, vec2 point)\n{\n\tfloat xdist = abs(orig.x - point.x);\n\tfloat ydist = abs(orig.y - point.y);\n\t//if (xdist == 0. && ydist == 0.) return 0.;\n\treturn sqrt(xdist*xdist + ydist*ydist);\n}\n\nfloat accum_converge(vec2 base)\n{\n\tvec2 iters[CONVERGE_ITER];\n\tfloat accum = 0.;\n\n\titers[0] = iter(base);\n\taccum += dist(iters[0], base);\n\n\tfor (int i = 1; i < CONVERGE_ITER; i++)\n\t{\n\t\titers[i] = iter(iters[i-1]);\n\t\taccum += dist(iters[i], base);\n\t}\n\n\treturn accum / CONVERGE_ITER_F / MAX_VAL;\n}\n\nvec4 col(float val)\n{\n\treturn vec4(.0, .025+.75-val/2., .75-val/2., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 position = ( fragCoord / iResolution.xy) - vec2(.595, .5);// - mouse * 5.;\n\tposition *= 5.;\n\tfloat val = accum_converge(position);\n\tfragColor = col(val);\n}","name":"Image","description":"","type":"image"}]}