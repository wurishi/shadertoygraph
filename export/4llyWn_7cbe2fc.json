{"ver":"0.1","info":{"id":"4llyWn","date":"1504338761","viewed":199,"name":"CSG Difference 1","username":"rougier","description":"Illustration for a book","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["sdf","csg","difference"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Python and OpenGL for Scientific Visualization\n// 2017 Nicolas P. Rougier\n\n// Difference\nfloat csg_difference(float d1, float d2)\n{\n    return max(d1,-d2);\n}\n\n// Signed distance to a circle\nfloat circle(vec2 p, vec2 center, float radius)\n{\n    return length(p-center) - radius;\n}\n\n// Blue or red color according to distance d\nvec4 color(float d)\n{\n    vec3 white = vec3(1.0, 1.0, 1.0);\n    vec3 blue  = vec3(0.1, 0.4, 0.7);\n    vec3 color = white - sign(d)*blue;\n    color *= (1.0 - exp(-4.0*abs(d))) * (0.8 + 0.2*cos(140.0*d));\n    color = mix(color, white, 1.0-smoothstep(0.0,0.02,abs(d)) );\n    return vec4(color, 1.0);\n}\n\n\n// Move circles using mouse\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float radius = max(iResolution.x, iResolution.y)/6.0;\n    vec2 center1 = vec2(iResolution.x/2.0 - radius/2.0,\n                        iResolution.y/2.0);\n    vec2 center2 = vec2(iResolution.x/2.0 + radius/2.0,\n                        iResolution.y/2.0);\n    // Uncomment to move second circle with mouse\n    // center2 = iMouse.xy;\n    \n    vec2 p = gl_FragCoord.xy;\n    float d1 = circle(p, center1, radius);\n    float d2 = circle(p, center2, radius);\n    float d = csg_difference(d1,d2);\n    fragColor = color(-d/radius);\n}","name":"Image","description":"","type":"image"}]}