{"ver":"0.1","info":{"id":"tl2cWz","date":"1594269617","viewed":188,"name":"simplest 3d tutorial example","username":"soggymongoose","description":"two dots","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"//credit to the art of code\n\n//Distance between camera ray and a point\nfloat distLine(vec3 ro, vec3 rd, vec3 p) {\n  return length(cross(p-ro, rd))/length(rd);  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized uv from -.5 to .5 with respect to aspect ratio\n    vec2 uv = fragCoord/iResolution.xy;\n    uv -= .5;\n    uv.x *= iResolution.x/iResolution.y;\n    \n    //Camera\n    vec3 rayOri = vec3(0., 0., -2.);\n    vec3 rayDir = vec3(uv.x, uv.y, 0.)-rayOri;\n    \n    //Points\n    vec3 point = vec3(sin(iTime), .4, 2.+cos(iTime));\n    vec3 point2 = vec3(cos(iTime), -.4, 2.+sin(iTime)); \n \n    //Calculating the distance\n    float dist = min(distLine(rayOri, rayDir, point), distLine(rayOri, rayDir, point2));\n        \n    vec3 col = vec3(smoothstep(.2, .16, dist));\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}