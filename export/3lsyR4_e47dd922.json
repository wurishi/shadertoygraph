{"ver":"0.1","info":{"id":"3lsyR4","date":"1591552795","viewed":337,"name":"Day 171 - Bitonic Sort","username":"jeyko","description":"potato","likes":4,"published":3,"flags":32,"usePreview":0,"tags":["mdtmjvm"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// Does a bitonic sort, depending on the red colour\n// Currently only works with rectangle input image\n\n// Shoutout to michael0884, great example on Bitonic Sort here - ahttps://www.shadertoy.com/view/ttVXDV\n\nvoid mainImage( out vec4 C, in vec2 U )\n{\n\n    C = T(U);    \n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"XsX3Rn","filepath":"/media/a/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","previewfilepath":"/media/ap/92d7758c402f0927011ca8d0a7e40251439fba3a1dac26f5b8b62026323501aa.jpg","type":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\nvoid mainImage( out vec4 C, in vec2 U )\n{\n    if(iFrame < 3){\n\t\tC = texture(iChannel1, vec2(U)/SZ);\n    \t//C = texture(iChannel1, vec2(mod(idx,256.)/256., floor(idx/256.)));\n        //C = texture(iChannel1, vec2(mod(U.x+U.y,256.)/256., floor((U.x+U.y)/256.)/256.));\n    \tC -= C * float( U.x > SZ.x);\n    } else if (mod(float(iFrame),2.)==0.) {\n        // x pass\n        \n        C = T(U);\n    \n        float coeff = pow(2., 1. + mod( floor(float(iFrame)), log2(SZ.x/2.)));\n        \n        float jmpAmt = SZ.x/coeff;\n        \n        bool jumpedOver = mod(U.x, jmpAmt) > jmpAmt/2.;\n        \n        float destination = U.x + jmpAmt *( 1. - 2. * float(jumpedOver) );\n        \n        vec4 other = T(vec2( destination , U.y));\n    \t\n        \n\t\tif ( jumpedOver ){\n        \tif (other.COMPONENT_TO_SORT < C.COMPONENT_TO_SORT)\n                C = other;\n        } else {\n        \tif (other.COMPONENT_TO_SORT > C.COMPONENT_TO_SORT)\n                C = other;\n        }\n    } else {\n    \t// y pass\n\n        C = T(U);\n\n        float coeff = pow(2., 1. + mod( floor(float(iFrame)), log2(SZ.y/2.)));\n\n        float jmpAmt = SZ.y/coeff;\n\n        bool jumpedOver = mod(U.y, jmpAmt) > jmpAmt/2.;\n\n        float destination = U.y + jmpAmt *( 1. - 2. * float(jumpedOver) );\n\n        vec4 other = T(vec2( destination , U.x));\n\n\n        if ( jumpedOver ){\n            if (other.COMPONENT_TO_SORT < C.COMPONENT_TO_SORT)\n                C = other;\n        } else {\n            if (other.COMPONENT_TO_SORT > C.COMPONENT_TO_SORT)\n                C = other;\n        }\n\n\n    }\n    \n    if(U.y>SZ.y || U.x>SZ.x )\n        discard;\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"#define T(j) texture(iChannel0, (j)/iResolution.xy)\n\n#define SZ vec2(iResolution.y)\n\n#define COMPONENT_TO_SORT g","name":"Common","description":"","type":"common"}]}