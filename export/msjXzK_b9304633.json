{"ver":"0.1","info":{"id":"msjXzK","date":"1671086202","viewed":125,"name":"Zodiac","username":"finleysun","description":"A self-modified Zodiac shader originated from a Youtube tutorial.","likes":5,"published":1,"flags":64,"usePreview":0,"tags":["demo"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4l2XRV","filepath":"https://soundcloud.com/spiritualmoment/reiki-zen-meditation-music-relax-your-mind-and-body-soothing-music?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","previewfilepath":"https://soundcloud.com/spiritualmoment/reiki-zen-meditation-music-relax-your-mind-and-body-soothing-music?utm_source=clipboard&utm_medium=text&utm_campaign=social_sharing","type":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":0}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define S(a, b, t) smoothstep(a, b, t)\n\nfloat DistLine(vec2 p, vec2 a, vec2 b){\n    vec2 pa = p-a;\n    vec2 ba = b-a;\n    float t = clamp(dot(pa, ba)/dot(ba, ba), 0., 1.);\n    return length(pa - ba*t);\n}\n\nfloat N21(vec2 p){\n    //get random number\n    p = fract(p*vec2(233.34, 851.73));\n    p += dot(p, p+23.45);\n    return fract(p.x*p.y);\n}\n\nvec2 N22(vec2 p){\n    float n = N21(p);\n    return vec2(n, N21(p+n));\n}\n\n//Animate the dots\nvec2 GetPos(vec2 id, vec2 offs){\n    \n    //Random the moving trajectories \n    vec2 n = N22(id+offs)*iTime;\n    //float x = sin(iTime*n.x);\n    //float y = cos(iTime*n.y);\n    \n    //return vec2(x, y)*.4;\n    return offs+sin(n)*.4;//Get position relative the the middle cell\n}\n\n//Draw the line\nfloat Line(vec2 p, vec2 a, vec2 b){\n    float d = DistLine(p, a, b);\n    float m = S(.03, .01, d);\n    float d2 = length(a-b);\n    m *= S(1.2, .8, d2)*.3+S(.05, .03, abs(d2-.75));//add some shine on the lines\n    return m;\n}\n\nfloat Layer(vec2 uv){\n    float m = 0.;\n      \n     //Move to the middle\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n    \n    //vec2 p = N22(id)-.5;\n    //vec2 p = GetPos(id);\n    \n    //float d = length(gv-p);\n    //m = S(.1, .05, d);\n    \n    vec2 p[9];\n    \n    int i = 0;\n    for(float y=-1.; y<=1.; y++){\n        for(float x=-1.; x<=1.; x++){ \n            p[i++] = GetPos(id, vec2(x, y));\n        }\n    }\n    \n    \n    float t = iTime*10.;\n    \n    for(int i=0; i<9; i++){\n        //Draw the line\n        m += Line(gv, p[4], p[i]);   \n        \n        vec2 j= (p[i]-gv)*25.;\n        float sparkle = 1./dot(j, j);\n        \n        m+= sparkle*(sin(t+fract(p[i].x)*10.)*.5+.5);//fix the showing up grid\n    }\n    m += Line(gv, p[1], p[3]);\n    m += Line(gv, p[1], p[5]);\n    m += Line(gv, p[7], p[3]);\n    m += Line(gv, p[7], p[5]);\n    \n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 mouse = (iMouse.xy/iResolution.xy)-.5;\n\n    float gradient = distance(uv, vec2(.01,.05));\n    \n    //float d = DistLine(uv, vec2(0), vec2(1));\n    //float m = S(.1, .05, d);\n    //float m = 0.;\n    float m = 0.;\n    float t = iTime*.05;//Lower the speed\n    \n    //twist the uv\n    float s = sin(t);\n    float c = cos(t);\n    mat2 rot = mat2(c, -s, s, c);\n    \n    uv *= rot;\n    mouse *= rot;\n    \n    //overlap some layers to make is 3D\n    for(float i=0.; i<=1.; i+=1./4.){ //4 layers\n        float z = fract(i+t); // make layers go to the front in turn, reusing layers\n        float size = mix(10., .5, z)*S(1., .8, z);//fade out the back and the front layers\n        float fade = S(0., .5, z);//smooth the layers showing up\n        m +=Layer(uv*size+i*30.-mouse)*fade;\n    }\n    \n    \n    \n    //random for each pixel\n    //m = N21(uv);\n    //m = N22(uv).y;\n    \n    //uv *= 5.;\n\n    vec3 base = sin(t*10.*vec3(.345, .456, .678))*.4 + .6;\n    //vec3 col = vec3(m);\n    vec3 col = m*base;\n    \n    float fft = texelFetch( iChannel0, ivec2(.7,0), 0).x;\n    gradient *= fft*2.;\n    col += gradient*base;\n    \n    //Visualize the digits\n    //col.rg = gv;\n    //col.rg = id*.2;\n    \n    //if(gv.x>.48||gv.y>.48) col = vec3(1, 0, 0);\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}