{"ver":"0.1","info":{"id":"4csGDf","date":"1703764592","viewed":72,"name":"Tutorial #1: StarField","username":"DGMKPixy","description":"Following tutorial to learn shader code: https://www.youtube.com/watch?v=rvDo9LvfoVE","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["space"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define TWO_PI 6.2831\n#define NUM_LAYERS 6.\n\n// Matriz de rotación con ángulo a\nmat2 Rot(float a)\n{\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c);\n}\n\nfloat Destello(vec2 uv, float glowSize, float ditheringLight)\n{\n    float rays = glowSize-abs(uv.x * uv.y * ditheringLight);\n    // Haciendo el max con 0, creamos el efecto de difuminar la luz.\n    return max(0., rays);\n}\n\n// Función para crear número aleatorios fake, recibe dos número y \n// devuelve uno, siempre entre 0 y 1.\nfloat Hash21(vec2 p)\n{\n    p = fract(p * vec2(123.45, 543.21)); // Cogemos la parte fraccional.\n    p += dot(p, p+54.123);\n    return fract(p.x * p.y);\n}\n\nfloat Star(vec2 id, vec2 uv, float flare)\n{\n    float col;\n    \n    // Cogemos la distancia al centro y creamos\n    float d = length(uv);\n    \n    // Podríamos usar smoothstep, pero eso provocaría que el valor final de la estrella sea 0\n    // lo que provoca que la estrella no contribuya a la luz a partir de ese punto.\n    // Mejor, usamos una función que nos asegure que, por muy grande que sea el valor de d,\n    // NUNCA va a llegar a ser 0: m = n/d;\n    \n    //float m = smoothstep(.2, .05, d);\n    float m = .1*(sin(iTime*10.*fract(id.x*id.y))*.5+.5)/d;\n    col += m;\n    \n    // Vamos a crear el glow de la estrella, el que tiene forma de cruz.\n    float glowSize = 3.;\n    float ditheringLight = 6000.;\n    col += Destello(uv, glowSize, ditheringLight)*.5*flare;\n    uv *= Rot(3.1415/4.); // Rotamos las uvs\n    \n    glowSize = 1.;\n    ditheringLight = 8000.;\n    // Creamos un segundo destello.\n    col += Destello(uv, glowSize, ditheringLight)*0.5*flare;\n    col *= smoothstep(1.,0.3,d);\n    return col;\n}\n\nvec3 StarLayer(vec2 uv)\n{\n    vec3 col;\n    vec2 gv = fract(uv)-.5;\n    vec2 id = floor(uv);\n\n    // si randomizamos el color, posición o tamaño de los ids en lugar del de los uvs, \n    // conseguiremos que cada estrella sea distinta en lugar de cada pixel.\n    //col += Hash21(uv);\n    \n    // para randomizar la posición, le sumamos un vector a las uvs de la estrella (gv)\n    // además le restamos .5 para evitar que la estrella se salga de su cuadrante.\n    // para el desplazamiento en y, podemos multiplicar n por 10 y quedarnos con el valor\n    // de fract, creando así un nuevo número aleatorio con los decimales que continuan.\n    // Esto lo calculamos para los vecinos también, así conseguimos que la luz de una celda\n    // contribuya a otras.\n    \n    for(int y = -1; y <= 1; y++)\n    {\n        for(int x = -1; x <= 1; x++)\n        {\n            vec2 offset = vec2(x, y);\n            float n = Hash21(id + offset);\n            vec2 displacement = vec2(n-.5, fract(n*34.)-.5);\n\n            float size = fract(n * 345.32);\n\n            // Creamos la estrella\n            float star = Star(id, gv - offset - displacement, smoothstep(.85, 1., size));\n            \n            vec3 color = sin(vec3(.2, .3, .9)*fract(n*2345.2)*123.2) * .5 + .5;\n            //color *= vec3(1,0,1); // filtramos las estrellas verdes\n            //color *= vec3(0,1,1); // filtramos las estrellas rojas\n            //color *= vec3(1,1,0); // filtramos las estrellas azules\n            \n            // queremos que el azul se intensifique con el tamaño.\n            color *= vec3(1,0.3,1. + size); \n            star *= sin(iTime*3.+n*TWO_PI)*.5+1.;\n            col += star*size*color;\n        }\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec2 M = (iMouse.xy-iResolution.xy*.5)/iResolution.y;\n   \n   \n    float t = iTime*.025;\n    \n    // Transformación de uvs\n    uv += M*4.;\n    uv *= Rot(t);\n    \n    vec3 col = vec3(0.);\n    \n    // hacemos varias layers de estrellas\n    for(float i = 0.; i<1.; i+=1./NUM_LAYERS)\n    {\n        float depth = fract(i+t);\n        float scale = mix(20.,0.5,depth)+depth;\n        float fade = depth*smoothstep(1., .85, depth); \n        col += StarLayer(uv*scale + i*453. - M)*fade;\n    }\n    \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}