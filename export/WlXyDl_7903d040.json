{"ver":"0.1","info":{"id":"WlXyDl","date":"1593364966","viewed":123,"name":"Helix SDF (2nd attempt)","username":"babopicasso","description":"Way faster spiral SDF. Lower than 1.5 for the variable e creates discontinuities.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["sdf","spiral","distance","functions","signed"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 1024\n#define MIN_DIST_SURF 0.001\n#define MAX_DIST 400.\n#define SHOW_POS 0\n\n// This function finds the closest distance to a parametric\n// curve of the form (cos(t), t, sin(t))\nfloat sdSpiral(in vec3 p, in float r, in float e, in float th) {\n    const float PI = 3.14159265359;\n    const float PI2 = 6.28318530718;\n    \n    float phi = atan(p.z, p.x);\n    float t = floor(p.y * e / PI2) * PI2 + phi;\n    // Branchless comparison\n    t += float(abs(phi) < PI && (t + PI) / e < p.y) * PI2;\n    return length(p - vec3(r * cos(t), t / e, r * sin(t))) - th;\n}\n\nfloat minDistance(in vec3 p) {\n    return sdSpiral(p, 2., 1.5, 0.75);\n}\n\nvec3 march(in vec3 ro, in vec3 rd) {\n    float d;\n    float td = 0.;\n    for(int i = 0; i < MAX_STEPS; i++) {\n       \td = minDistance(ro);\n        \n        td += d;\n        ro += rd * d;\n        \n        if(td > MAX_DIST) return vec3(0.);\n        if(d < MIN_DIST_SURF) return SHOW_POS == 1 ? ro : vec3(1);\n    }\n    \n    return vec3(0.);\n}\n\nmat3 lookAt(in vec3 ro, in vec3 ta, in float cr) {\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv =          ( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.*fragCoord-iResolution.xy) / iResolution.y;\n    \n    vec3 ro = vec3(50. * cos(iMouse.x / iResolution.x * 6.28), 20. + (2. * iMouse.y - iResolution.y) / iResolution.y * 20., 50. * sin(iMouse.x / iResolution.x * 6.28));\n    vec3 rd = normalize(lookAt(ro, vec3(0, 5., 0), 0.) * vec3(uv, 2.5));\n    \n    fragColor = vec4(march(ro, rd), 1.0);\n}","name":"Image","description":"","type":"image"}]}