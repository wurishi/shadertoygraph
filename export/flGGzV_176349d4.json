{"ver":"0.1","info":{"id":"flGGzV","date":"1637963903","viewed":103,"name":"Mean Value Coordinates Demo","username":"curice","description":"A simple demo showing off how to implement mean value coordinate interpolation on a single quad. Mean value coordinates were introduced in this paper: https://cgvr.informatik.uni-bremen.de/teaching/cg_literatur/barycentric_floater.pdf ","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["barycentric","value","interpolation","coordinates","mean","mean","mvc"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 quad[4] = vec2[](vec2(-1,-1), vec2(1,-1), vec2(1,1), vec2(-1, 1));\nvec3 colors[4] = vec3[](vec3(1,0,0), vec3(0), vec3(0,0,0), vec3(0));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv = (uv - .5) * 2.;\n    float weights[4];\n    float weights_sum = 0.0;\n    for(int i = 1; i < 5; i++){ //negative values + modulo == weird shit in glsl i guess...\n        vec2 viv0 = quad[i % 4] - uv;\n         \n        float alpha_prev = acos(dot(normalize(quad[(i - 1) % 4] - uv), normalize(viv0)));\n        float alpha = acos(dot(normalize(quad[(i + 1) % 4] - uv), normalize(viv0)));\n        float wi = tan(alpha_prev / 2.0) + tan(alpha / 2.);\n        wi /= max(1e-16, length(viv0)); //avoid div by zero?\n        weights_sum += wi;\n        weights[i % 4] = wi;\n    }\n    vec3 col = vec3(0.0);\n    for(int i = 0; i < 4; i++){\n        col += (weights[i] / weights_sum) * colors[i];\n\n    }\n\n   \n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}