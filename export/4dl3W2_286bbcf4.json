{"ver":"0.1","renderpass":[{"outputs":[],"inputs":[],"code":"// mi-ku/Altair\n\n#define STEPS 10\n#define SPHERE_R 3.0\n#define LINES 12.0\n\n//#define TORUS_VER\n//#define BOX_VER\n\n// iq's polynomial smin\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sphere( vec3 p, float r )\n{\n#ifdef TORUS_VER\n\tvec2 q = vec2(length(p.xy)-r*1.0,p.z);\n\treturn length(q)-r * 0.25;\t\n#elif defined( BOX_VER )\n\treturn length(max(abs(p)-vec3(r),0.0))-r*0.4;\n#else\n\treturn length( p ) - r;\n#endif\n}\n\nvec3 colorizeDF( vec3 p, vec3 n )\n{\n\tfloat pattern = max( 0.0, abs( pow( sin( ( p.y + n.y ) * LINES + p.x * .0 ), 1.0 ) ) - 0.85 ) * 4.0;\n\tvec3 c = vec3( pattern );\n\treturn c;\n}\n\nfloat rm( vec3 p, vec4 s1, vec4 s2, vec4 s3, vec4 s4 )\n{\n\treturn smin( sphere( p + s1.xyz, s1.w ), \n\t\t\t smin( sphere( p + s2.xyz, s2.w ), \n\t\t\t   smin( sphere( p + s4.xyz, s4.w ), sphere( p + s3.xyz, s3.w )\n\t\t\t\t  , 0.5 ), 0.5 ), 0.5 );\n}\n\nvec3 colorize( vec2 uv )\n{\n\tfloat yOff = sin( iTime ) * 2.0;\n\tvec3 ro = vec3( 0.0, yOff, -10.0 );\n\tvec3 rd = vec3( uv, 1.0 );\n\trd.y -= yOff * 0.1;\n\trd = normalize( rd );\n\t\n\tvec3 p = ro;\n\t\n\tfloat time = iTime;\n\t\n\tfloat o1 = 3.0, o2 = 2.0, o3 = 3.25, o4 = 2.2;\n\tvec3  a1 = vec3(  .1,  .2 , 2.1   );\n\tvec3  a2 = vec3(  .5,  .4,  2.5   );\n\tvec3  a3 = vec3(  .9,  .6,  2.9   );\n\tvec3  a4 = vec3( 1.3,  .8,  2.2   );\n\tvec3  i1 = vec3(  .13, .43,  .87  );\n\tvec3  i2 = vec3(  .93, .23,  .57  );\n\tvec3  i3 = vec3(  .33, .13,  .37  );\n\tvec3  i4 = vec3(  .13, .73,  .127 );\n\t\n\ta1 = i1 + time * i2.z;\n\ta2 = i2 + time * i1.y;\n\ta3 = i3 + time * i1.z;\n\ta4 = i4 + time * i2.x;\n\t\n\tvec4 s1 = vec4( vec3( sin( a1.x ), cos( a1.y ), sin( a1.z ) * 0.45 ) * o1, SPHERE_R * 0.6 );\n\tvec4 s2 = vec4( vec3( sin( a2.x ), cos( a2.y ), sin( a2.z ) * 0.45 ) * o2, SPHERE_R * 0.7 );\n\tvec4 s3 = vec4( vec3( sin( a3.x ), cos( a3.y ), sin( a3.z ) * 0.45 ) * o3, SPHERE_R * 0.8 );\n\tvec4 s4 = vec4( vec3( sin( a4.x ), cos( a4.y ), sin( a4.z ) * 0.45 ) * o4, SPHERE_R * 0.9 );\n\t\n\tfor( int i = 0; i < STEPS; i++ )\n\t{\n\t\tp += rd * rm( p, s1, s2, s3, s4 ) * 0.9;\n\t}\n\t\n\tconst float nm = 1.0;\n\tconst vec3 dx = vec3( 1.0, 0.0, 0.0 ) * nm;\n\tconst vec3 dy = vec3( 0.0, 1.0, 0.0 ) * nm;\n\tconst vec3 dz = vec3( 0.0, 0.0, 1.0 ) * nm;\n\tvec3 n = vec3( rm( p + dx, s1, s2, s3, s4 ) - rm( p - dx, s1, s2, s3, s4 ), \n\t\t\t\t   rm( p + dy, s1, s2, s3, s4 ) - rm( p - dy, s1, s2, s3, s4 ), \n\t\t\t\t   rm( p + dz, s1, s2, s3, s4 ) - rm( p - dz, s1, s2, s3, s4 ) );\n\tn = normalize( n );\n\t\n\tvec3 spC = colorizeDF( p, n );\n\t\n\tvec3 l = vec3( 1.0, 1.0, -1.0 );\n\tl = normalize( l );\n\tfloat t = length( p - ro );\n\t\n\treturn vec3( max( 0.0, min( 1.0, length( p - ro ) * rm( p + 0.1 * l, s1, s2, s3, s4 ) ) ) ) + spC;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy / iResolution.xy;\n\t\n\tvec2 uv2 = uv - 0.5;\n\tuv2.x *= 1.78;\n\tuv2 *= 1.33;\n\t\n\tvec3 color = colorize( uv2 );\n\tfragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":false,"mFlagMusicStream":false},"info":{"id":"4dl3W2","date":"1387238537","viewed":432,"name":"Zebra patterned spheres","username":"mi_ku","description":"Simple zebra-like pattern.","likes":16,"published":1,"flags":0,"usePreview":0,"tags":["raymarching","spheres","pattern","zebra"],"hasliked":0,"parentid":"","parentname":""}}