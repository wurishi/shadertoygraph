{"ver":"0.1","info":{"id":"NdSXRh","date":"1632239271","viewed":155,"name":"ðŸ¤”ðŸ’¡ ðŸŒŒ Mandelbrot Set \"3d\" ðŸ¤¯âœ¨","username":"rmmcal","description":"Mandelbrot \"3d\" ","likes":5,"published":1,"flags":0,"usePreview":0,"tags":["3d","mandelbrot","mandelbrot3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/////////////////////////////////////////////////////////////\n//    ...  ðŸ¤”ðŸ’¡ ðŸŒŒ Mandelbrot Set \"3d\" ðŸ¤¯âœ¨ ...        ////\n/////////////////////////////////////////////////////////////\n// Brasil/Amazonas/Manaus\n// Created by Rodrigo Cal (twitter: @rmmcal)\n// - Published: 2021/09\n// - https://www.shadertoy.com/view/NdSXRh\n/////////////////////////////////////////////////////////////\n\nconst float pi = 3.1415926;\nconst float pi2 = 2.*pi;\nconst float pih2 = pi/2.0;\nconst float rad = pi/180.;\n\nmat2 rotate(float x){\n    float c = cos(x);\n    float s = sin(x);\n    return mat2(c,s,-s,c);\n}\n\nvec2 cmul2(vec2 z1, vec2 z2) {\n  return mat2(\n       z1.x, z1.y,\n      -z1.y, z1.x ) * z2;\n}\n\nvec3 cmul3(vec3 z1, vec3 z2) { \n  // testing......\n  return mat3(\n       z1.x, z1.y, z1.z,\n      -z1.y, z1.x, z1.y,\n      -z1.z,-z1.y, z1.x ) * z2;\n}\n\n\nfloat set2d(vec2 p){\n    float t = 100.0;\n    vec2 c;\n    for (int i =0 ; i < 20; i++)\n    {\n        c = cmul2(c,c) + p;\n        if (length(c)>1.5)\n            break;\n        t++;\n    }\n    return length(c);\n}\n\nfloat set3d(vec3 p){\n    float t = 100.0;\n    vec3 c;\n    for (int i =0 ; i < 20; i++)\n    {\n        c = cmul3(c,c) + p;\n        if (length(c)>1.5)\n            break;\n        t++;\n    }\n    return length(c);\n}\n\nfloat dist(vec3 p)\n{\n    float d = 100.;\n    p.xy = p.xy* rotate( -pih2 );\n    d =  min(d, set3d(p.xyz)*0.1- .11);\n    return d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    vec2 d = vec2(0., 0.01);\n    float x = dist(p-d.yxx);\n    float y = dist(p-d.xyx);\n    float z = dist(p-d.xxy);\n    return normalize(vec3(x,y,z)-dist(p));\n}\n\nfloat set2d_extra(vec2 p){\n    float t = 100.0;\n    vec2 c;\n    for (int i =0 ; i < 7; i++)\n    {\n        c = cmul2(c,c) + p;\n        t++;\n    }\n    vec2 v = c;\n    return max(0.,((v.x-v.y)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    vec2 pc = (uv-.5)*vec2(1, iResolution.y/iResolution.x);\n    vec3 d = normalize(vec3(pc,1.2));\n    vec3 p = vec3(0., 0.3, -5.);\n    float a = iTime*.2;\n    d.yz *= rotate(.01);\n    d.xz *= rotate(a);\n    p.xz *= rotate(a);\n\n    vec3 c=vec3(0.0);\n    float t = 0.;\n    for (int i = 0 ; i < 100; i++)\n    {\n        float h=dist(p); \n        if (h < 0.01 || h > 100.0){\n            break;\n        }\n        t+=h;\n        p += d*h;\n    }\n    \n    a += - pih2;\n    \n    vec3 dl = normalize(vec3(cos(-a),1.,sin(-a))); \n    vec3 ps = p-d;\n    float ts = 0.0;\n    for (int i = 0 ; i < 10; i++)\n    {\n        float rs =  dist(ps);\n        if (rs < 0.01) break;\n        ts += rs;\n        ps += dl*(rs);\n    }\n     \n    c += (.5+.6*dot(dl, -getNormal(p)) *clamp(0.,1.,ts*0.2)) / sqrt(t/20.);\n    c += (.4*(dot(dl, -getNormal(p)))*vec3(0.,0.,1.) ) ;\n\n    vec3 c2d = vec3( set2d(vec2(-.1-pc.y,pc.x)*4.)*.5 );\n    vec3 c2b = vec3( set2d_extra(vec2(-.1-pc.y,pc.x)*4.)*.5 );\n    \n    c = mix(c, c2d, pow(abs(cos(iTime*.5)*.5+.5), 4.));\n    c+= 0.04*clamp(vec3(0.), vec3(1.), c2b   ) * length(pc);\n    \n    fragColor = vec4(c,1.0);\n}","name":"Image","description":"","type":"image"}]}