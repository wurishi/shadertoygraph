{"ver":"0.1","info":{"id":"wtXfDs","date":"1598049274","viewed":270,"name":"Game of life in two colors","username":"vipiao","description":"Game of life with a special rule added. If two parents are present, they may reproduce. See \"Buf A\" to change the settings.\nThe red life has the extra rule added, the green life does not have any extra rules.","likes":1,"published":3,"flags":32,"usePreview":0,"tags":["2d","gameoflife","simluation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 color = texelFetch(iChannel0, ivec2(fragCoord), 0);\n\n    // Output to screen\n    fragColor = color;\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"\n// -SETTINGS-\n\n// The initial density of the life.\n# define INIT_DENSITY 0.1\n// Usually two parents is not enought to reproduce according to the vanilla rules.\n// Set the below define to \"0.\" if you want vanilla rules.\n// If the below define is higher, the walkers will be able to colonize.\n# define TWO_PARENT_REPRODUCE_CHANCE 0.0002\n\n// Noise function found at https://stackoverflow.com/questions/4200224/random-noise-functions-for-glsl\nuint hash( uint x ) {\n    x += ( x << 10u );\n    x ^= ( x >>  6u );\n    x += ( x <<  3u );\n    x ^= ( x >> 11u );\n    x += ( x << 15u );\n    return x;\n}\nuint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)); }\nuint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)); }\n//\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec4 pC = texelFetch(iChannel0, ivec2(fragCoord), 0); // Previous color.\n    \n    if(iTime < 1.){ // Initialize with random noise.\n        float prob = float(hash(uvec2(fragCoord))) / 4294967295.;\n        bool alive = prob < INIT_DENSITY;\n    \tfragColor = vec4( alive, alive, 0, 1.0);\n        return;\n    }\n    \n    ivec2 myC = ivec2(fragCoord);\n    \n    // Game of life logic.\n    // Red logic.\n    bool redAlive;\n    int numNeighborsRed =\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1, 1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 0, 1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1, 1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1,0), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1,0), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1,-1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 0,-1), 0).x > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1,-1), 0).x > 0.5)\n    ;\n    if(pC.x > 0.5){ // Is alive.\n        if(numNeighborsRed < 2){\n        \tredAlive = false;\n        } else if (numNeighborsRed < 4){\n        \tredAlive = true;\n        } else {\n        \tredAlive = false;\n        }\n    } else { // Is dead.\n    \tif(numNeighborsRed  == 3){\n        \tredAlive = true;\n        } else {\n        \tredAlive = false;\n        }\n        // Special rule.\n        float prob = float(hash(uvec2(fragCoord) + uvec2(iTime*60.))) / 4294967295.;\n        if(numNeighborsRed == 2 && prob < TWO_PARENT_REPRODUCE_CHANCE){\n        \tredAlive = true;\n        }\n    }\n    // Green logic.\n    bool greenAlive;\n    int numNeighborsGreen =\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1, 1), 0).y > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 0, 1), 0).y > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1, 1), 0).y > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1,0), 0).y > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1,0), 0).y > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2(-1,-1), 0).y > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 0,-1), 0).y > 0.5) +\n\t\tint(texelFetch(iChannel0, myC + ivec2( 1,-1), 0).y > 0.5)\n    ;\n    if(pC.y > 0.5){ // Is alive.\n        if(numNeighborsGreen < 2){\n        \tgreenAlive = false;\n        } else if (numNeighborsGreen < 4){\n        \tgreenAlive = true;\n        } else {\n        \tgreenAlive = false;\n        }\n    } else { // Is dead.\n    \tif(numNeighborsGreen  == 3){\n        \tgreenAlive = true;\n        } else {\n        \tgreenAlive = false;\n        }\n    }\n    \n    fragColor = vec4(float(redAlive), float(greenAlive), 0.0, 1.0);\n}\n\n\n\n\n\n\n\n\n","name":"Buffer A","description":"","type":"buffer"}]}