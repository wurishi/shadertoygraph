{"ver":"0.1","info":{"id":"ltlyzj","date":"1505575161","viewed":632,"name":"Swallowtail catastrophe","username":"dpiponi","description":"A close up of diffraction at a swallowtail caustic.\nUse mouse to scale.\n\nFor some background see [url]https://github.com/dpiponi/caustics[/url]","likes":9,"published":1,"flags":0,"usePreview":0,"tags":["optics"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#if __VERSION__ < 130\n\nfloat tanh(float x) {\n    if (x < -12.0) {\n        return -1.0;\n    }\n    if (x > 12.0) {\n        return 1.0;\n    }\n    float p = exp(2.0*x);\n    return (p-1.0)/(p+1.0);\n}\n\nfloat cosh(float x) {\n    float p = exp(2.0*x);\n    return (1.0+p)/(2.0*p);\n}\n\n#endif\n\nvec2 ctimes(vec2 a, vec2 b) {\n    return mat2(a, -a.y, a.x)*b;\n}\n\nvec2 cexp(vec2 a) {\n    float r = exp(a.x);\n    return r*vec2(cos(a.y), sin(a.y));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    // Bands towards lower left and right are \"aliasing\" due to the\n    // sampling used in the integration. Bump up M to improve.\n    // M needs to be odd.\n#define M 197\n    float rate = 0.005;\n    \n    float xmax = 20.0+iMouse.x/iResolution.x*80.0;\n    float xmin = -xmax;\n    float ymax = xmax+15.0;\n    float ymin = xmin+15.0;\n    \n    float gamma = -3.75+5.75*sin(iTime);\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    \n    float alpha = ymin+uv.y*(ymax-ymin);\n    float beta = xmin+uv.x*(xmax-xmin);\n\n    //int k;\n    vec2 integral = vec2(0.0, 0.0);\n    \n    float coeff;\n    int odd = 1;\n    float x = -4.0;\n    float dx = 8.0/float(M);\n    \n    // We're computing integral from -infinity to infinity\n    // of exp(i*(z^5+gamma*x^3+2*beta*x+alpha))\n    // It's highly oscillatory so we deform the contour to one\n    // that is better behaved.\n    \n    for (int k = 0; k <= M; ++k) {\n        odd = 1-odd;\n        // Simpson's integration rule\n        if (k == 0 || k == M) {\n            coeff = 1.0;\n        } else {\n            if (odd == 1) {\n                coeff = 4.0;\n            } else {\n                coeff = 2.0;\n            }\n        }\n        float x2 = x*x;\n        float x3 = x*x2;\n        float x4 = x*x3;\n        \n        float u = rate*(5.0*x4+3.0*gamma*x2+2.0*beta*x+alpha);\n    \tfloat y = tanh(u);\n        \n        // Compute deformation of contour\n        vec2 z = vec2(x, y);\n        vec2 z2 = ctimes(z, z);\n        vec2 z3 = ctimes(z2, z);\n        vec2 z4 = ctimes(z3, z);\n        vec2 z5 = ctimes(z4, z);\n\n        vec2 f = z5+gamma*z3+beta*z2+alpha*z;\n        // Compute integrand\n\t\tvec2 g = cexp(vec2(-f.y, f.x));\n       \n        float d = cosh(u);\n        vec2 dz = dx*vec2(1.0, rate*(20.0*x3+6.0*gamma*x+2.0*beta)/(d*d));      \n\n        // Accumulate integral\n \t\tintegral += coeff*ctimes(g, dz);\n\n        \n     \tx += dx;\n   }\n   \n    float value = 0.5*length(integral)/(3.0);\n    \n    fragColor = vec4(value);\n}","name":"Image","description":"","type":"image"}]}