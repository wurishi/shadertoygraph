{"ver":"0.1","info":{"id":"7dlSD7","date":"1618732767","viewed":57,"name":"cg_task2_galanin","username":"Den_Gal","description":"octahedron with fire","likes":0,"published":1,"flags":32,"usePreview":0,"tags":["cgtask2"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    // Output to screen\n    fragColor = texture(iChannel0, uv) / float(iFrame + 1);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dXGRn","filepath":"/media/a/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"/media/ap/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsfGRn","filepath":"/media/a/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","previewfilepath":"/media/ap/1f7dca9c22f324751f2a5a59c9b181dfe3b5564a04b724c657732d0bf09c99db.jpg","type":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XdX3zn","filepath":"/media/a/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","previewfilepath":"/media/ap/488bd40303a2e2b9a71987e48c66ef41f5e937174bf316d3ed0e86410784b919.jpg","type":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4sfGRr","filepath":"/media/a/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","previewfilepath":"/media/ap/27012b4eadd0c3ce12498b867058e4f717ce79e10a99568cca461682d84a4b04.bin","type":"volume","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"const vec3 CAMERA_POS = vec3(-3, 3.2, -6);\n\nconst float PLANE_HEIGHT = -1.3;\n\nconst vec3 LIGHT1_POS = vec3(3, 1.1, 0.1);\nconst vec3 LIGHT1_COLOR = vec3(0.5,1,0.5);\nconst float LIGHT1_RADIUS = 0.3;\n\nconst vec3 LIGHT2_POS = vec3(-2, 1.1, 2);\nconst vec3 LIGHT2_COLOR = vec3(1,1,1);\nconst float LIGHT2_RADIUS = 0.2;\n\nconst vec3 SPHERE_POS = vec3(-1.5, -0.7, 1.5);\nconst vec3 SPHERE_COLOR = vec3(1,1,1);\nconst float SPHERE_RADIUS = 0.5;\n\nconst float CYL_RADIUS = 0.7;\nconst float CYL_HEIGHT = 0.3;\nconst vec3 CYL_COLOR = vec3(1,1,0);\n\nconst vec3 OCT_COLOR = vec3(1,1,1);\nconst float OCT_EDGE = 1.5;\nconst vec3 OCT_POS = vec3(0.0,0.05+ PLANE_HEIGHT + CYL_HEIGHT+ OCT_EDGE / 2.0 * sqrt(2.0), 0.0);\n\nconst float AIR_N = 1.0;\nconst float GLASS_N = 1.5;\nconst float GLASS_R = (AIR_N - GLASS_N) * (AIR_N - GLASS_N) / (AIR_N + GLASS_N) / (AIR_N + GLASS_N);\nconst float PI = 3.141592;\nconst float MARCH_SIZE = 0.01;\nconst int MAX_STEPS = 10;\n\nstruct Octahedron{\n    vec3 a;\n    vec3 b;\n    vec3 c;\n    vec3 d;\n    vec3 e;\n    vec3 f;\n};\n\nOctahedron oct = Octahedron (\n    vec3(OCT_POS.x - OCT_EDGE / 2.0,OCT_POS.y, OCT_POS.z - OCT_EDGE / 2.0),\n    vec3(OCT_POS.x + OCT_EDGE / 2.0,OCT_POS.y, OCT_POS.z - OCT_EDGE / 2.0),\n    vec3(OCT_POS.x + OCT_EDGE / 2.0,OCT_POS.y, OCT_POS.z + OCT_EDGE / 2.0),\n    vec3(OCT_POS.x - OCT_EDGE / 2.0,OCT_POS.y, OCT_POS.z + OCT_EDGE / 2.0),\n    vec3(OCT_POS.x, OCT_POS.y - OCT_EDGE / 2.0 * sqrt(2.0), OCT_POS.z),\n    vec3(OCT_POS.x, OCT_POS.y + OCT_EDGE / 2.0 * sqrt(2.0), OCT_POS.z)\n);\n\nconst int REF_NUM = 10;\nconst float INF = 1e10;\nconst float EPSILON = 0.0000001;\n\nconst int EMISSION = 0;\nconst int DIFFUSE = 1;\nconst int REFLECTION = 2;\nconst int REFRACTION = 3;\nvec3 randDir;\n\nfloat tracePlane (vec3 pos, vec3 dir, out vec3 normal){\n    // (pos + t * dir).y == -1\n    // t = (-1 - pos.y) / dir.y;\n    float t =  (PLANE_HEIGHT - pos.y) / dir.y;\n    if (t > 0.0){\n        vec3 worldPos = t * dir + pos;\n        if (dot(worldPos.xz,worldPos.xz) < 100.0){\n            normal = vec3(0,1,0);\n            return t;\n        }\n        else\n            return INF;\n    }\n    else\n        return INF;\n}\n\nfloat traceSphere (vec3 pos, vec3 dir, float r, out vec3 normal){\n    // dot(pos + t * dir, pos + t * dir) == r * r;\n    // dot(pos, pos) + 2 * t * dot(pos, dir) + t * t * dot(dir,dir) == r * r\n    // t * t + 2.0 * t * dot(pos, dir) + dot(pos, pos) - r * r = 0;\n    float b = dot(pos, dir);\n    float d = b * b - dot(pos,pos) + r * r;\n    if (d < 0.0)\n        return INF;\n    else{\n        float t = -b - sqrt(d);\n        if (t > 0.0){\n            normal = normalize(pos + t * dir);\n            return t;\n        }\n        else{\n            t = -b + sqrt(d);\n            if(t < 0.0)\n               return INF; \n            else{\n                normal = normalize(pos + t * dir);\n                return t;\n            }\n        }\n    }\n}\n\n\nfloat traceTriangle(vec3 pos, vec3 dir, out vec3 normal, vec3 vert1, vec3 vert2, vec3 vert3)\n{\n    // Möller–Trumbore ray-triangle intersection algorithm\n    vec3 vertex0 = vert1;\n    vec3 vertex1 = vert2;\n    vec3 vertex2 = vert3;\n    vec3 edge1, edge2, h, s, q;\n    float a, f, u, v;\n    edge1 = vertex1 - vertex0;\n    edge2 = vertex2 - vertex0;\n    h = cross(dir, edge2);\n    a = dot(edge1, h);\n    if ((a > -1e-8) && (a < 1e-8))\n        return INF;\n    else{\n        f = 1.0 / a;\n        s = pos - vertex0;\n        u = f * dot(s, h);\n        if ((u < 0.0) || (u > 1.0))\n            return INF;\n        else{\n            q = cross(s, edge1);\n            v = f * dot(dir, q);\n            if ((v < 0.0) || (u + v > 1.0))\n                return INF;\n            else{\n                normal = normalize(cross(edge1, edge2));\n                float d = dot(normal, vertex0); \n                float t = (d - dot(normal, pos)) / dot(normal, dir);\n                if (t > 0.0){\n                    return t;\n                }\n                else\n                    return INF;\n            }\n        }\n    }\n}\n\n\nfloat traceOctahedron (vec3 pos, vec3 dir, out vec3 normal, Octahedron oct){\n   float tMin = INF, t;\n   vec3 normMin;\n   t = traceTriangle(pos, dir, normal, oct.a, oct.b, oct.e);\n   if(t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   t = traceTriangle(pos, dir, normal, oct.b, oct.c, oct.e);\n   if (t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   t = traceTriangle(pos, dir, normal, oct.c, oct.d, oct.e);\n   if (t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   t = traceTriangle(pos, dir, normal, oct.d, oct.a, oct.e);\n   if (t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   t = traceTriangle(pos, dir, normal, oct.a, oct.b, oct.f);\n   if (t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   t = traceTriangle(pos, dir, normal, oct.b, oct.c, oct.f);\n   if (t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   t = traceTriangle(pos, dir, normal, oct.c, oct.d, oct.f);\n   if (t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   t = traceTriangle(pos, dir, normal, oct.d, oct.a, oct.f);\n   if (t < tMin){\n       tMin = t;\n       normMin = normal;\n   }\n   if(tMin != INF){\n       normal = normMin;\n       return tMin;\n   }\n   else\n       return INF;\n}\n\nfloat traceCylinder (vec3 pos, vec3 dir, out vec3 normal){\n    float h = CYL_HEIGHT;\n    float y = PLANE_HEIGHT + h;\n    float t =  (y - pos.y) / dir.y;\n    if (t < 0.0)\n        return INF;\n    vec3 worldPos = t * dir + pos;\n    if (dot(worldPos.xz,worldPos.xz) < CYL_RADIUS * CYL_RADIUS){\n       normal = vec3(0,1,0);\n       return t;\n    }\n    float a = dot(dir.xz, dir.xz);\n    float b = dot(pos.xz, dir.xz);\n    float c = dot(pos.xz, pos.xz) - CYL_RADIUS * CYL_RADIUS;\n    if (a == 0.0)\n       return INF;\n    float d = b * b - a * c;\n    if (d < 0.0)\n       return INF;\n    t = (-b - sqrt(d)) / a;\n    if(t > 0.0){\n        worldPos = t * dir + pos;\n        if (dir.y * t + pos.y < y){\n            normal = normalize(vec3(worldPos.x, 0, worldPos.z));\n            return t;\n        }  \n    }\n    return INF;       \n}\n\nfloat traceFireSphere(vec3 pos, vec3 dir, float r, out vec3 normal)\n{\n    float a = dot(dir, dir);\n    float b = dot(pos, dir);\n    float c = dot(pos, pos) - (r + randDir.x * 0.5) * (r + randDir.x * 0.5);\n    float d = b * b - a * c;\n    if (d < 0.0) {\n        return INF;\n    }\n    float t = (-b - sqrt(d)) / a;\n    if (t > 0.0) {\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n    t = (-b + sqrt(d)) / a;\n    if (t < 0.0) \n        return INF;\n    else{\n        normal = normalize(pos + t * dir);\n        return t;\n    }\n}\n\nfloat noise(vec3 uv, float res)\n{\n\tconst vec3 s = vec3(1e0, 1e2, 1e3);\n\tuv *= res;\n\tvec3 uv0 = floor(mod(uv, res)) * s;\n\tvec3 uv1 = floor(mod(uv+vec3(1.0), res)) * s;\n\tvec3 f = fract(uv); \n\tf = f * f * (3.0 - 2.0 * f);\n\tvec4 v = vec4(uv0.x + uv0.y + uv0.z, uv1.x + uv0.y + uv0.z, uv0.x + uv1.y + uv0.z, uv1.x + uv1.y + uv0.z);\n\tvec4 r = fract(sin(v*1e-1) * 1e3);\n\tfloat r0 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\tr = fract(sin((v + uv1.z - uv0.z) * 1e-1) * 1e3);\n\tfloat r1 = mix(mix(r.x, r.y, f.x), mix(r.z, r.w, f.x), f.y);\n\treturn mix(r0, r1, f.z) * 2.0 - 1.0;\n}\n\nvec3 burn(vec2 p) \n{\n\tfloat color = 4.0 - (3.0 * length(2.5 * p));\n    \n\tvec3 pos = vec3(atan(p.x,p.y) / 6.2832 + 0.5, length(p) * 0.4, 0.5);\n\tfor(int i = 1; i <= 3; i++)\n\t{\n\t\tfloat power = pow(2.0, float(i));\n\t\tcolor += 0.5 * (1.5 / power) * noise(pos + vec3(0.0, 0.01, 0.01), power * 15.0);\n\t}\n\tcolor *= 0.6;\n\treturn vec3( color, (max(color, 0.0), 2.0) * (max(color, 0.0), 3.0) * 0.4, (max(color, 0.0), 3.0) * (max(color, 0.0) ,3.0) * 0.2);\n}\n\nvec3 traceFire(vec2 p) {\n  vec3 color = burn(p);\n  return mix(vec3(3.5, 0.2, 0.1), color, 0.5);\n}\n\nvec3 refraction (vec3 v, vec3 normal, float n1, float n2, out bool isReflected){\n    isReflected = false;\n    if(dot(v, normal) < 0.0) {\n        normal = -normal;\n    }\n    float cosA = dot(v, normal);\n    float sinA = sqrt(1.0 - cosA * cosA);\n    vec3 vTang = normalize(v - cosA * normal);\n    float sinB = sinA / n2 * n1;\n    if(sinB > 1.0) {\n        isReflected = true;\n        return reflect(v, normal);\n    }\n    float cosB = sqrt(1.0 - sinB * sinB);\n    return sinB * vTang + cosB * normal;\n}\n\nbool isOccluded (vec3 pos, vec3 point){\n    vec3 octNormal;\n    vec3 cylNormal;\n    vec3 sphNormal;\n    vec3 dir = point - pos;\n    float dist = length(dir);\n    dir /= dist;\n    float octT = traceOctahedron(pos, dir, octNormal, oct);\n    if (octT < dist)\n        return true;\n    float cylT = traceCylinder(pos, dir, cylNormal);\n    if (cylT < dist)\n        return true;\n    float sphT = traceSphere(pos, dir, SPHERE_RADIUS, sphNormal);\n    if (sphT < dist)\n        return true;\n    return false;\n}\n\nvec3 computeLight (vec3 pos, vec3 color, vec3 normal){\n    vec3 toLight1 = LIGHT1_POS - pos;\n    float dist1 = dot(toLight1, toLight1 + randDir * LIGHT1_RADIUS);\n    float atten1 = isOccluded(pos, LIGHT1_POS + randDir * LIGHT1_RADIUS) ? 0.0 : 7.0f / dist1;\n    vec3 toLight2 = LIGHT2_POS - pos;\n    float dist2 = dot(toLight2, toLight2 + randDir * LIGHT2_RADIUS);\n    float atten2 = isOccluded(pos, LIGHT2_POS + randDir * LIGHT2_RADIUS) ? 0.0 : 5.0f / dist2;\n    return color * ( max(0.0, dot(normal, normalize(toLight1))) * atten1 * LIGHT1_COLOR \n    + max(0.0, dot(normal, normalize(toLight2))) * atten2 * LIGHT2_COLOR\n    + texture(iChannel1, normal).rgb * 0.5);\n}\n\nfloat rand (float frame) \n{\n    return fract(sin(dot(vec3(frame), vec3(12.9898, 78.233, 45.5432))) * 43758.5453);\n}\n\nfloat fogSdf(vec3 pos)\n{\n    return length(pos) - 1.0;\n}\n\nfloat BeerLambert(float absorpCoeff, float dist)\n{\n    return exp(-absorpCoeff * dist);\n}\n\nvec4 sampleFog(vec3 pos, vec3 dir)\n{\n    float t = fogSdf(pos);\n    float opacity = 0.4;\n    float prevOpacity; \n    float absorption = 10.0;\n    float totalAbs = 0.01;\n    float absorp;\n    float sdf;\n    vec3 curPos;\n    for (int i = 0; i < MAX_STEPS; ++i) {\n        curPos = pos + (float(i) * MARCH_SIZE + t) * dir;\n        sdf = fogSdf(curPos);\n        if (sdf < 0.0) {\n            prevOpacity = opacity;\n            opacity *= BeerLambert(absorption * (\n            texture(iChannel3, curPos * 0.1).x\n            + texture(iChannel3, curPos * 0.3).x\n            + texture(iChannel3, curPos * 0.6).x\n            + texture(iChannel3, curPos * 1.2).x\n            ) * 0.25 * abs(sdf), MARCH_SIZE);\n            absorp = prevOpacity - opacity;\n            totalAbs += absorp;\n        }\n    }\n    return vec4(vec3(1, 1, 1) * totalAbs, 1.0 - opacity);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n    vec3 randVals = vec3(rand(float(iFrame)), rand(float(iFrame + 5)), rand(float(iFrame + 15)));\n    randDir = normalize(randVals - 0.5);\n    vec2 uv = (fragCoord - iResolution.xy * 0.5 + (randVals.xy - 0.5) * 2.0)/iResolution.x;\n    vec3 front = normalize(-CAMERA_POS);\n    vec3 up = vec3(0,1,0);\n    vec3 right = normalize(cross(front, up));\n    up = normalize(cross(right, front));\n    vec3 viewVector = normalize(front + right * uv.x + up * uv.y);\n    \n    float t = INF;\n    int materialType;\n    bool reflected = true;\n    float mult = 1.0;\n    \n    float n1 = AIR_N;\n    float n2 = GLASS_N;\n    \n    vec3 color;\n    vec3 normal;\n    \n    vec3 planeNormal;\n    vec3 light1Normal;\n    vec3 light2Normal;\n    vec3 octNormal;\n    vec3 cylNormal;\n    vec3 sphereNormal;\n    vec3 fireNorm;\n    \n    vec3 worldPos;\n    \n    vec3 curPos = CAMERA_POS;\n    vec3 curDir = viewVector;\n    vec3 curSph = SPHERE_POS;\n    \n    for (int i = 0; i < REF_NUM; ++i){\n        t = INF;\n//Plane        \n        float planeT = tracePlane(curPos, curDir, planeNormal);\n        if (planeT < t){\n            t = planeT;\n            normal = planeNormal;\n            materialType = DIFFUSE;\n            worldPos = t * curDir + curPos;\n            color = texture(iChannel0, worldPos.xz * 0.1).rgb;    \n        }\n//Light1        \n        float light1 = traceSphere(curPos - LIGHT1_POS, curDir, LIGHT1_RADIUS, light1Normal);\n        if (light1 < t){\n            t = light1;\n            normal = light1Normal;\n            materialType = EMISSION;\n            color = LIGHT1_COLOR;\n        }\n//Light2        \n        float light2 = traceSphere(curPos - LIGHT2_POS, curDir, LIGHT2_RADIUS, light2Normal);\n        if (light2 < t){\n            t = light2;\n            normal = light2Normal;\n            materialType = EMISSION;\n            color = LIGHT2_COLOR;\n        }\n//Octahedron\n        float drawOct = traceOctahedron(curPos, curDir, octNormal, oct);\n        if (drawOct < t){\n            t = drawOct;\n            normal = octNormal;\n            if (randVals.x * 0.7 < GLASS_R)\n                materialType = REFLECTION;\n            else\n                materialType = REFRACTION;\n        }\n//SphereCheck\n        float scale = mix(0.0, 1.1, sin(iTime) + 0.5);\n        if (iTime < 2.0) \n            curSph = vec3(curSph.x, 0.8 - scale, curSph.z);\n        else\n            curSph = curSph;\n        float sphere = traceSphere(curPos - curSph, curDir, SPHERE_RADIUS, sphereNormal);\n        if (sphere < t){\n            t = sphere;\n            normal = sphereNormal;\n            materialType = REFRACTION;\n        }\n//Cylinder\n        float drawCyl = traceCylinder(curPos, curDir, cylNormal);\n        if (drawCyl < t){\n            t = drawCyl;\n            vec3 worldPos = t * curDir + curPos;\n            normal = cylNormal;\n            color = texture(iChannel2, worldPos.xz * 0.1).rgb;\n            if (randVals.x < GLASS_R)\n                materialType = REFLECTION;\n            else\n                materialType = DIFFUSE;\n        }\n//Fire\n        float fireT = traceFireSphere(curPos, curDir, 0.05, fireNorm);\n        if (true) {\n            if (fireT < t) {\n                t = fireT;\n                normal = fireNorm;\n                vec3 worldPos = t * curDir + curPos;\n                color = traceFire(uv * sqrt(dot(CAMERA_POS, CAMERA_POS) / 50.0) * 3.50);\n                materialType = EMISSION;\n            }\n         }\n//WorldPos        \n        if (t != INF){\n            worldPos = t * curDir + curPos;\n            fragColor = texture(iChannel0, worldPos.xz);\n            if (materialType == EMISSION){\n                fragColor.rgb = color;\n                break;\n            }\n            else if (materialType == DIFFUSE){\n                fragColor.rgb = computeLight(worldPos, color, normal);\n                break;\n            }\n            else if (materialType == REFLECTION){\n                curDir = reflect(curDir, normal);\n                curPos = worldPos + curDir * 1e-5;\n            }\n            else if (materialType == REFRACTION){\n                curDir = refraction(curDir, normal, n1, n2, reflected);\n                curPos = worldPos + curDir * 1e-5; \n                if(!reflected){\n                    float tmp = n1;\n                    n1 = n2;\n                    n2 = tmp;\n                }\n                \n                vec4 fog = sampleFog(curPos, curDir);\n                fragColor.rgb += fog.rgb * fog.a * mult;\n                mult *= 1.0 - fog.a;\n            }\n        }\n        else{\n            fragColor = texture(iChannel1, curDir);\n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    fragColor = texture(iChannel0, uv) + texture(iChannel1, uv);\n}","name":"Buffer B","description":"","type":"buffer"}]}