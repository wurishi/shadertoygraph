{"ver":"0.1","info":{"id":"mty3Rt","date":"1684425678","viewed":40,"name":"Rotating Mugs","username":"RaphaZev","description":"Modeling 2 Mugs and playing around with the camera","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["torus","intersection","animation","union"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat3 rotate(float theta){\n    return mat3(cos(theta) , sin(theta), 0.0, // primera coluna\n                -sin(theta), cos(theta), 0.0, // segunda coluna\n                0.0 , 0.0 , 1.0                // terceira coluna\n    );\n}\n\nmat3 scale(float s){\n    return mat3(s, 0.0, 0.0, // primeira coluna\n                0.0, s, 0.0, // segunda coluna\n                0.0, 0.0, 1.0 // terceira coluna\n    );\n}\n\nmat4 look_at(vec3 eye, vec3 at, vec3 up) {\n    vec3 w = normalize(at - eye);\n    vec3 u = normalize(cross(w, up));\n    vec3 v = cross(u, w);\n    return mat4(\n        vec4(u, 0.0),\n        vec4(v, 0.0),\n        vec4(-w, 0.0),\n        vec4(vec3(0.0), 1.0)\n    );\n}\n\nfloat sdSphere(vec3 p, float r) {\n    return length(p) - r;\n}\n\nvec4 minWithColor(vec4 obj1, vec4 obj2) {\n    if (obj2.a < obj1.a) return obj2;\n    return obj1;\n}\n\nfloat sdCappedTorus( vec3 p, vec2 sc, float ra, float rb)\n{\n  p.x = abs(p.x);\n  float k = (sc.y*p.x>sc.x*p.y) ? dot(p.xy,sc) : length(p.xy);\n  return sqrt( dot(p,p) + ra*ra - 2.0*ra*k ) - rb;\n}\n\n\nfloat sdCappedCylinder( vec3 p, float h, float r )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nvec4 maxWithColor(vec4 obj1, vec4 obj2) {\n    if (obj2.a > obj1.a) return obj2;\n    return obj1;\n}\n\nvec4 sdScene(vec3 p) {\n    vec4 Left = vec4(vec3(0.1, 0.9, 0.3), sdCappedCylinder(p - vec3(-3.5, 0, -4), 2.0, 1.5));\n    vec4 LeftInner = vec4(vec3(0.1, 0.9, 0.3), sdCappedCylinder(p - vec3(-3.5, 0.5, -4), 1.6, 1.2));\n    vec4 LeftHandle = vec4(vec3(0.1, 0.9, 0.3), sdCappedTorus((p - vec3(-4.8, 0, -4))*scale(.3)*rotate(1.4), vec2(cos(.2),sin(0.)),0.3 ,0.1 ));\n    vec4 Right = vec4(vec3(0.1, 0.3, 0.9), sdCappedCylinder(p - vec3(3.5, 0, -4), 2.0, 1.5));\n    vec4 RightInner = vec4(vec3(0.1, 0.3, 0.9), sdCappedCylinder(p - vec3(3.5, 0.5, -4), 1.6, 1.2));\n    vec4 RightHandle = vec4(vec3(0.1, 0.3, 0.9), sdCappedTorus((p - vec3(2.2, 0, -4))*scale(.3)*rotate(1.4), vec2(cos(.2),sin(0.)),0.3 ,0.1 ));\n    vec4 co = minWithColor(minWithColor(maxWithColor(LeftInner * vec4(1,1,1,-1),Left),LeftHandle), minWithColor(maxWithColor(RightInner * vec4(1,1,1,-1),Right),RightHandle));\n    return co;\n}\n\nvec4 rayMarch(vec3 ro, vec3 rd, float start, float end) {\n    float depth = start;\n    vec4 co;\n    for (int i = 0; i < 255; i++) {\n        vec3 p = ro + depth * rd;\n        co = sdScene(p);\n        depth += co.a;\n        if (co.a < 0.001 || depth > end) break;\n    }\n    return vec4(co.rgb, depth);\n}\n\nvec3 calcNormal(vec3 p) {\n    vec2 e = vec2(1.0, -1.0) * 0.0005; // epsilon\n    return normalize(\n    e.xyy * sdScene(p + e.xyy).a +\n    e.yyx * sdScene(p + e.yyx).a +\n    e.yxy * sdScene(p + e.yxy).a +\n    e.xxx * sdScene(p + e.xxx).a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(-2, 3, 10);\n    vec3 rd = normalize(vec3(uv, -1));\n    mat4 view = look_at(vec3(0, 3, 5) * rotate(cos(mod(iTime,3.14*2.))) , vec3(1, 0, 1) * rotate(cos(mod(iTime,3.14*2.))), vec3(0, 2, 0));\n    ro = (view * vec4(ro, 1.0)).xyz;\n    rd = (view * vec4(rd, 0.0)).xyz;\n\n    vec4 co = rayMarch(ro, rd, 0.01, 100.0);\n    if (co.a > 100.0) col = vec3(0.6);\n    else {\n        vec3 p = ro + rd * co.a;\n        vec3 normal = calcNormal(p);\n        vec3 lightPos = vec3(-2, 2, 4);\n        vec3 lightDir = normalize(lightPos - p);\n        float ambient = 0.275;\n        float difuse = clamp(dot(normal, lightDir),ambient,1.);\n        col = difuse * co.rgb;\n    }\n    fragColor = vec4(col, 1.0);\n}\n","name":"Image","description":"","type":"image"}]}