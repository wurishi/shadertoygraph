{"ver":"0.1","info":{"id":"7dlfDB","date":"1645365759","viewed":177,"name":"Temporal upscaling attempt 3","username":"romax9lahin","description":"attempt #3...","likes":1,"published":1,"flags":32,"usePreview":0,"tags":["temporal","upscaling"],"hasliked":0,"parentid":"sdlBRl","parentname":"Temporal upscaling attempt 2"},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"4sXGR8","filepath":"/media/previz/buffer02.png","previewfilepath":"/media/previz/buffer02.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv;\n    vec3 old = texture(iChannel1,RENDERSCALE*fragCoord/iResolution.xy).rgb;\n    vec3 new = texture(iChannel0,fragCoord/iResolution.xy).rgb;\n\n    vec3 c =(fragCoord.x<iResolution.x*(.5-.5*sin(iTime)))?\n        old:\n        new;\n\n    fragColor = vec4(new,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[{"id":"4dfGRn","filepath":"/media/a/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","previewfilepath":"/media/ap/8de3a3924cb95bd0e95a443fff0326c869f9d4979cd1d5b6e94e2a01f5be53e9.jpg","type":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dXGR8","channel":0}],"code":"//warning: iChannel0 must be either linear or nearest, NOT mipmap, mipmap breaks it\n\nvoid mainImage( out vec4 O, vec2 I ) {\n    if(I.x<iResolution.x*RENDERSCALE && I.y<iResolution.y*RENDERSCALE){\n\n    vec2 h = fract(float(iFrame)/vec2(phi2sq,phi2));\n    \n    vec2 off = h;\n        I=floor(I)+off;\n        \n    O = texture(iChannel0,I/(iResolution.xy*RENDERSCALE) /* vec2(1./6., 1.)*/);\n\t}\n}","name":"Buffer A","description":"","type":"buffer"},{"inputs":[],"outputs":[],"code":"float bayer2(vec2 a){\n    a = floor(a);\n    return fract( dot(a, vec2(.5, a.y * .75)) );\n}\n\n#define bayer4(a)   (bayer2( .5*(a))*.25+bayer2(a))\n#define bayer8(a)   (bayer4( .5*(a))*.25+bayer2(a))\n#define bayer16(a)  (bayer8( .5*(a))*.25+bayer2(a))\n#define RENDERSCALE 0.1\n\n//sequence from http://extremelearning.com.au/unreasonable-effectiveness-of-quasirandom-sequences/\nconst float phi2=1.32471795724474602596090885447809734; //root of X^3-X-1=0.\nconst float phi2sq=phi2*phi2;","name":"Common","description":"","type":"common"},{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1},{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"XsXGR8","channel":0}],"code":"#define dot2( a) dot(a,a)\n\nfloat dist2(vec3 x, vec3 y) {\n    float d = min(distance(x, y) / sqrt(2.), 1.0);\n    return d;\n}\n\nvoid mainImage( out vec4 O, in vec2 I ) {\n    vec2 I2 = RENDERSCALE*I;\n    \n    vec2 off = fract(float(iFrame)/vec2(phi2sq,phi2));\n    \n    vec4 old = texture(iChannel1, I/iResolution.xy);\n    float prevA = old.a;\n    vec3 oldPow = pow(old.rgb, vec3(2.2));\n    vec3 new = texture(iChannel0, (I2 - off)/iResolution.xy).rgb;\n    new = pow(new, vec3(2.2));\n    \n    vec2 tmp = abs(fract(I2 - off) - vec2(0.5));\n    float tmp2 = max(tmp.x, tmp.y);\n    float mixFactor = clamp(1.0 - tmp2 * 2., 0.0, 1.0);\n    mixFactor = max(0.0, mixFactor - 1.0 + RENDERSCALE) / RENDERSCALE;\n    \n    float mixFactor2 = mix(1.0, mixFactor, prevA);\n    \n    O.a = mix(prevA, 1.0, mix(mixFactor, mixFactor2, 0.8));\n    O.rgb = mix(oldPow.rgb, new, mixFactor2);\n    O.rgb = pow(O.rgb, vec3(1.0 / 2.2));\n}","name":"Buffer B","description":"","type":"buffer"},{"inputs":[{"id":"XsXGR8","filepath":"/media/previz/buffer01.png","previewfilepath":"/media/previz/buffer01.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4sXGR8","channel":0}],"code":"void mainImage(out vec4 O, in vec2 I) {\n    float radius = 4.0;\n    \n    vec3 color = vec3(0.0);\n    float value = 0.0;\n    \n    for(float x = -radius; x<=radius; x+=1.0) {\n        for(float y = -radius; y<=radius; y+=1.0) {\n            vec4 pix = texture(iChannel0, (I + vec2(x, y)) / iResolution.xy);\n            vec3 pixc = pow(pix.rgb, vec3(2.2));\n            \n            float v = pix.a;\n            float tmp = max(0.0, radius - sqrt(x*x + y*y)) / radius;\n            v *= pow(tmp, 5.);\n            \n            color += pixc * v;\n            value += v;\n        }\n    }\n    \n    color /= value;\n    \n    O = vec4(pow(color, vec3(1.0 / 2.2)), 1.0);\n}","name":"Buffer C","description":"","type":"buffer"}]}