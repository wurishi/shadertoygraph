{"ver":"0.1","info":{"id":"4c3cRj","date":"1730847543","viewed":146,"name":"diagonally aligned cube mountain","username":"jt","description":"Raymarch diagonally aligned voxels (via raymarch-dda hybrid plugin).\nLandscape height is one layer of linear interpolated noise\n(could use multiple octaves but already slow).\nDefer material to speed-up distance & normal calculations.","likes":20,"published":1,"flags":0,"usePreview":0,"tags":["3d","raymarch","sdf","voxel","random","dda","material","hybrid","index","plugin","defer"],"hasliked":0,"parentid":"4ccyz4","parentname":"raymarch voxel deferred material"},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// https://www.shadertoy.com/view/4c3cRj diagonally aligned cube mountain, 2024 by jt\n// based on https://www.shadertoy.com/view/4ccyz4 raymarch voxel deferred material\n\n// Raymarch diagonally aligned voxels (via raymarch-dda hybrid plugin).\n// Landscape height is one layer of linear interpolated noise\n// (could use multiple octaves but already slow).\n// Defer material to speed-up distance & normal calculations.\n\n// tags: 3d, raymarch, sdf, voxel, random, dda, material, hybrid, index, plugin, defer\n\n// The MIT License\n// Copyright (c) 2024 Jakob Thomsen\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfloat hash13(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3  = fract(p3 * .1031);\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec3 hash33(vec3 p3) // https://www.shadertoy.com/view/4djSRW Hash without Sine by Dave_Hoskins\n{\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz+33.33);\n    return fract((p3.xxy + p3.yxx)*p3.zyx);\n}\n\n#define pi 3.1415926\n\nmat3 yaw_pitch_roll(float yaw, float pitch, float roll)\n{\n    mat3 R = mat3(vec3(cos(yaw), sin(yaw), 0.0), vec3(-sin(yaw), cos(yaw), 0.0), vec3(0.0, 0.0, 1.0));\n    mat3 S = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(pitch), sin(pitch)), vec3(0.0, -sin(pitch), cos(pitch)));\n    mat3 T = mat3(vec3(cos(roll), 0.0, sin(roll)), vec3(0.0, 1.0, 0.0), vec3(-sin(roll), 0.0, cos(roll)));\n\n    return R * S * T;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat box(vec3 p, vec3 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 d = abs(p) - s;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat box(vec3 p, vec3 s, float r)\n{\n    return box(p,s-r)-r;\n}\n\nfloat cylinder(vec3 p, vec2 s) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec2 d = abs(vec2(length(p.xy),p.z)) - s;\n    return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat line(vec3 p, vec3 a, vec3 b) // adapted from https://iquilezles.org/articles/distfunctions/\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)/dot(ba,ba), 0.0, 1.0);\n    return length(pa - ba*h);\n}\n\nfloat dot2(vec3 v)\n{\n    return dot(v,v);\n}\n\nfloat triangle(vec3 p, vec3 a, vec3 b, vec3 c) // https://iquilezles.org/articles/distfunctions/\n{\n  vec3 ba = b - a; vec3 pa = p - a;\n  vec3 cb = c - b; vec3 pb = p - b;\n  vec3 ac = a - c; vec3 pc = p - c;\n  vec3 nor = cross(ba, ac);\n\n  return sqrt(\n    (sign(dot(cross(ba,nor),pa)) +\n     sign(dot(cross(cb,nor),pb)) +\n     sign(dot(cross(ac,nor),pc))<2.0)\n     ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)/dot2(cb),0.0,1.0)-pb)),\n     dot2(ac*clamp(dot(ac,pc)/dot2(ac),0.0,1.0)-pc))\n     :\n     dot(nor,pa)*dot(nor,pa)/dot2(nor) );\n}\n\n#define EPSILON 0.001\n#define DIST_MAX 50.0\n#define ITER_MAX 200u\n\nstruct result\n{\n    float dist;\n    uint type;\n};\n\nfloat cloud(int n, ivec3 v) // https://www.shadertoy.com/view/X3lcz7 voxel cave\n{\n    int m = 1 << n;\n    ivec3 v0 = v & ~(m-1); // clear n lower bits\n    v -= v0; // n lower bits\n\n    float h000 = hash13(vec3(v0 + ivec3(0,0,0)));\n    float h001 = hash13(vec3(v0 + ivec3(m,0,0)));\n    float h010 = hash13(vec3(v0 + ivec3(0,m,0)));\n    float h011 = hash13(vec3(v0 + ivec3(m,m,0)));\n    float h100 = hash13(vec3(v0 + ivec3(0,0,m)));\n    float h101 = hash13(vec3(v0 + ivec3(m,0,m)));\n    float h110 = hash13(vec3(v0 + ivec3(0,m,m)));\n    float h111 = hash13(vec3(v0 + ivec3(m,m,m)));\n\n    vec3 q = vec3(v)/vec3(m-1);\n    return mix(mix(mix(h000,h001,q.x),mix(h010,h011,q.x),q.y),mix(mix(h100,h101,q.x),mix(h110,h111,q.x),q.y),q.z);\n}\n\nfloat cloud_iterated(int n0, int n1, ivec3 v) // https://www.shadertoy.com/view/X3lcz7 voxel cave\n{\n    float h = 0.0;\n    for(int i = n0; i < n1; i++)\n    {\n        h += cloud(i, v) * float(1<<i);\n    }\n    return h/float(2<<(n1-n0));\n    //return h/float(1<<n) - float(v.z)/float(70); // change density depending on height\n}\n\nresult map(ivec3 v, vec3 l) // unit grid: voxel = float(position), local = fract(position)\n{\n    if(false)\n    {\n        if(v.x+v.y+v.z == 0)\n        {\n            float h = hash13(vec3(v));\n            if(h < 0.5)\n                if(h < 0.25)\n                    return result(cylinder(l-0.5, vec2(0.5,0.5)), 0u);\n                else\n                    return result(sphere(l-0.5, 0.5), 1u);\n        }\n    }\n\n    if(true)\n    {\n        //if(fract(iTime/5.0) < 0.5)\n        if(true)\n        {\n            if(v.x+v.y+v.z == -6)\n            {\n                return result(triangle(l,vec3(0,1,1),vec3(1,0,1),vec3(1,1,0)), 3u);\n            }\n            if(v.x+v.y+v.z == -5)\n            {\n                //XXX ?! return result(-dot(l-0.5, normalize(vec3(1))), 2u);\n                return result(triangle(l,vec3(1,0,0),vec3(0,1,0),vec3(0,0,1)), 4u);\n            }\n        }\n        else\n        {\n            if(v.x+v.y+v.z == -6)\n                return\n                    result\n                    (\n                        min\n                        (\n                            min\n                            (\n                                line(l,vec3(0,1,1),vec3(1,0,1)),\n                                line(l,vec3(1,0,1),vec3(1,1,0))\n                            ),\n                            line(l,vec3(1,1,0),vec3(0,1,1))\n                        )\n                        -\n                        0.05,\n                        3u\n                    );\n            if(v.x+v.y+v.z == -5)\n                return\n                    result\n                    (\n                        min\n                        (\n                            min\n                            (\n                                line(l,vec3(1,0,0),vec3(0,1,0)),\n                                line(l,vec3(0,1,0),vec3(0,0,1))\n                            ),\n                            line(l,vec3(0,0,1),vec3(1,0,0))\n                        )\n                        -\n                        0.05,\n                        4u\n                    );\n        }\n    }\n\n    float h = cloud(2, v);\n    //float h = cloud_iterated(2,4,v);\n    if(float(v.x+v.y+v.z) < h*15.0-10.0)\n    //if(v.x+v.y+v.z == -1)\n    {\n        //if(v.x*v.x+v.y*v.y+v.z*v.z< 24*24) // restrict to sphere\n        return result(box(l-0.5, vec3(0.5), 0.2), 5u);\n    }\n\n    return result(DIST_MAX,~0u); // signal to skip this voxel\n}\n\nresult map(vec3 p)\n{\n    return map(ivec3(floor(p)), fract(p));\n}\n\nmat3 tilt_matrix() // easier to remember than all the square-roots\n{\n    return\n        mat3 // using normalize to avoid having to write square-roots explicitly\n        (\n            normalize(vec3(+1,-1, 0)), // components sum to zero\n            normalize(vec3(+1,+1,-2)), // components sum to zero\n            normalize(vec3(1,1,1)) // this component can be omitted for lift/project\n        );\n}\n\n// https://iquilezles.org/articles/normalsSDF tetrahedron normals\nvec3 normal(vec3 p)\n{\n    p = tilt_matrix() * p; // tilt\n\n    const float h = EPSILON;\n    const vec2 k = vec2(1,-1);\n    return normalize(k.xyy*map(p + k.xyy*h).dist +\n                     k.yyx*map(p + k.yyx*h).dist +\n                     k.yxy*map(p + k.yxy*h).dist +\n                     k.xxx*map(p + k.xxx*h).dist)\n           *\n           tilt_matrix(); // un-tilt\n}\n\n// NOTE: Apparently sign fails on some systems! Thanks to spalmer for debugging this!\nvec3 sgn(vec3 v) // WORKAROUND FOR COMPILER ERROR on some systems\n{\n    return step(vec3(0), v) * 2.0 - 1.0;\n}\n\nresult trace(vec3 ro, vec3 rd, float t0, float t1, bool pass) // ray-march sdf handling discontinuities between voxels  (jt)\n{\n    ro = tilt_matrix() * ro; \n    rd = tilt_matrix() * rd;\n\n    result h;\n    uint i;\n    float t;\n    for(t = t0, i = 0u; t < t1 && i < ITER_MAX; i++) // finite loop originally suggested by pyBlob to avoid stalling if ray parallel to surface just above EPSILON\n    {\n        vec3 p = ro + rd * t;\n        h = map(p);\n        if(h.dist < EPSILON)\n            return result(t, h.type);\n\n        // NOTE: An extra step per voxel, use if sdf discontinuous between voxels\n        //       Could make this conditional by prefixing sth. like if(voxel_changed) // suggested by spalmer, see variant below\n        // constrain step to voxels (voxel-snap ray-march plugin by jt, thanks to Shane for the idea!)\n        {\n            // NOTE: assuming unit grid\n            // sgn(rd)*0.5 are the walls in ray direction, fract(p) - 0.5 is center of voxel\n            vec3 sd = (sgn(rd)*0.5 - (fract(p) - 0.5))/rd; // distances to voxel sides / walls\n            vec3 n = step(sd.xyz, min(sd.yzx, sd.zxy)); // component true if corresponding wall is nearest (at most one component true) NOTE: originally I used lessThanEqual, min from fb39ca4/kzy then switched to step, min by iq\n            float skip = dot(sd, vec3(n)) + EPSILON; // distance to next voxel: sum up all components, weighted by the nearest flag (assuming only one component is true this selects the nearest component)\n            h.dist = min(h.dist, skip); // constrain step to at most next block to handle sdf discontinuities between voxels\n        }\n\n        t += h.dist;\n    }\n\n    return result(pass ? t1 : t, h.type); // pass/stop on running out of iterations\n}\n\n// NOTE: Don't forget to add +normal*EPSILON to the starting position\n//       to avoid artifacts caused by getting stuck in the surface\n//       due to starting at distance < EPSILON from the surface.\n//       (normal could be calculated here but that would most likely be redundant)\n//       Thanks to spalmer for pointing that out.\nfloat shadow(vec3 ro, vec3 rd, float t0, float t1)\n{\n    return trace(ro, rd, t0, t1, true/*pass*/).dist < t1 ? 0.0 : 1.0;\n}\n\n// https://www.shadertoy.com/view/Xds3zN raymarching primitives\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.12*float(i)/4.0;\n        float d = map(tilt_matrix() *(pos + h*nor)).dist;\n        occ += (h-d)*sca;\n        sca *= 0.95;\n        if( occ>0.35 ) break;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 ) ;\n}\n\nfloat checker(vec2 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi));\n}\n\nfloat checker(vec3 p)\n{\n    return step(0.0, sin(p.x*pi)*sin(p.y*pi)*sin(p.z*pi));\n}\n\nstruct material_result\n{\n    vec3 color;\n    bool specular;\n};\n\nmaterial_result apply_material(vec3 position, vec3 normal, uint type)\n{\n    position = tilt_matrix() * position;\n    //ivec3 v = ivec3(floor(position));\n    //vec3 l = fract(position);\n    switch(type)\n    {\n    case 0u: return material_result(vec3(1,0,0) * mix(vec3(0.25), vec3(0.75), checker(position*2.0+0.5)), true/*specular*/); // checker\n    case 1u: return material_result(vec3(0,1,0) * mix(vec3(0.25), vec3(0.75), checker(position.xy*2.0+0.5)), true/*specular*/); // checker\n    case 2u: return material_result(vec3(0,0,1), true/*specular*/);\n    case 3u: return material_result(vec3(0.4), true/*specular*/);\n    case 4u: return material_result(vec3(0.5), false/*specular*/);\n    //case 5u: return material_result(vec3(0.8), true/*specular*/);\n    case 5u: return material_result(hash33(floor(position)), true/*specular*/);\n    default: ;\n    }\n\n    return material_result(vec3(0.5+0.5*cos(iTime)),false/*specular*/); // signal unimplemented case\n}\n\nvoid mainImage(out vec4 fragColor, vec2 I)\n{\n    bool demo = all(lessThan(iMouse.xy, vec2(10.0)));\n    vec2 R = iResolution.xy;\n    I = (2.0 * I - R) / R.y; // concise scaling thanks to Fabrice\n    float yaw = 2.0 * pi * float(iMouse.x) / float(R.x);\n    float pitch = pi - pi / 2.0 * float(iMouse.y) / float(R.y);\n    yaw = !demo ? yaw : 2.0 * pi * fract(iTime * 0.01);\n    pitch = !demo ? pitch : 4.0/3.0 * pi / 2.0;\n\n    vec3 ro = vec3(0,0,-8);\n    vec3 rd = normalize(vec3(I.xy, 2.0));\n\n    mat3 M = yaw_pitch_roll(yaw, pitch, 0.0);\n    ro = M * ro;\n    rd = M * rd;\n    ro.z += 1.0;\n\n    vec3 lightdir = normalize(vec3(1.0, 2.0, 3.0));\n    vec3 suncolor = vec3(1);\n\n    vec3 skycolor = mix(vec3(0,0.25,0.5),vec3(0,0,1),abs(-rd.z));\n    vec3 color = vec3(1);\n    result r = trace(ro, rd, 0.0, DIST_MAX, false/*stop*/);\n    if(r.dist < DIST_MAX)\n    {\n        vec3 dst = ro + rd * r.dist;\n        vec3 n = normal(dst);\n\n        material_result mr = apply_material(dst, n, r.type);\n        color *= mr.color;\n\n        //color *= (n * 0.5 + 0.5);\n\n        vec3 ambient = vec3(0.2);\n        float brightness = max(dot(lightdir, n), 0.0);\n        if(brightness > 0.0)\n            brightness *= shadow(ro + rd * r.dist + n * 0.01, lightdir, 0.0, DIST_MAX);\n        color *= (ambient * calcAO(dst, n) + brightness);\n\n        if(mr.specular && brightness > 0.0)\n        {\n            float specular = pow(max(0.0, dot(n, normalize(-rd + lightdir))), 250.0);\n            color += specular;\n        }\n\n        //vec3 fogcolor = vec3(0.2);\n        vec3 fogcolor = skycolor;\n        color = mix(fogcolor, vec3(color), exp(-pow(r.dist/50.0, 2.0))); // fog\n    }\n    else\n    {\n        color *= skycolor;\n\n        {\n            float d = max(0.0, dot(rd, lightdir));\n            //float sun = 50.0*smoothstep(0.999, 1.000, d) + exp(-pow((1.0-d)*1000.0, 2.0)); // sun with halo\n            float sun = 50.0*smoothstep(0.999, 1.000, d) + exp(-pow((1.0-d)*1250.0, 2.0)); // sun with halo\n            \n            color += sun * suncolor;\n        }\n    }\n\n    color = tanh(color); // roll-off overly bright colors\n    fragColor = vec4(color, 1);\n    fragColor = sqrt(fragColor); // approximate gamma\n}\n","name":"Image","description":"","type":"image"}]}