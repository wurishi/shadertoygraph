{"ver":"0.1","info":{"id":"wdVSR1","date":"1573463207","viewed":857,"name":"My Glitch Like Effect","username":"ankd","description":"my glitch like effect patterns.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["effect","glitch"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4sX3Rn","filepath":"/media/a/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","previewfilepath":"/media/ap/c3a071ecf273428bc72fc72b2dd972671de8da420a2d4f917b75d20e1c24b34c.ogv","type":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// MODE set effect type.\n// 0 : no effect\n// 1 : color \n// 2 : uv.x slip if glitched\n// 3 : inverse\n// 4 : uv shift glitch\n// 5 : rgb shift\n#define ENABLE_MODE 0\n#define MODE 5\n\nfloat hash(in float v) { return fract(sin(v)*43768.5453); }\nfloat hash(in vec2 v) { return fract(sin(dot(v, vec2(12.9898, 78.233)))*43768.5453); }\nvec2 hash2(in float v) { return vec2(hash(v+vec2(77.77)), hash(v+vec2(999.999))); }\nvec2 hash2(in vec2 v) { return vec2(hash(v+vec2(77.77)), hash(v+vec2(999.999))); }\n\n#define GLITCH_THR 0.06\n#define GLITCH_RECT_DIVISION 6.\n#define GLITCH_RECT_ITR 3\nvec3 glitch(in vec2 p, in float seed) {\n\tvec2 q = fract(p);\n    float g = -1.;\n    for(int i=0;i<GLITCH_RECT_ITR;i++) {\n        float fi = float(i)+1.;\n        float h = hash(fi + seed);\n        vec2 h2 = hash2(fi + seed);\n\n        q = p *  GLITCH_RECT_DIVISION * fi + h2;\n        q *= hash2(fi + seed)*2.-1.;\n    \tvec2 iq = floor(q);\n        vec2 fq = fract(q);\n        float hq = hash(iq);\n        if(hq<GLITCH_THR) {\n        \tp += hash2(iq)*2.-1.;\n            g = h;\n        }\n    }\n    return vec3(fract(p), g);\n}\n\n\nvec4 tex(in vec2 uv) { return texture(iChannel0, uv); }\n\nvec3 pattern0(in vec2 uv, in vec3 g) { return tex(uv).rgb; }\nvec3 pattern1(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : g.z * tex(uv).rgb; }\nvec3 pattern2(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : tex(uv+vec2(0.1*(g.z*2.-1.), 0.)).rgb; }\nvec3 pattern3(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : 1.-tex(uv).rgb; }\nvec3 pattern4(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : tex(g.xy).rgb; }\n#define RGB_SHIFT (g.z*vec3(0.16, 0.04, -0.8))\nvec3 pattern5(in vec2 uv, in vec3 g) { return g.z<0. ? tex(uv).rgb : vec3(tex(uv+vec2(RGB_SHIFT.r, 0.)).r, tex(uv+vec2(RGB_SHIFT.g, 0.)).g, tex(uv+vec2(RGB_SHIFT.b, 0.)).b); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord/iResolution.xy;\n    \n    float gps = 15.;// glitch per seconds\n\tvec3 g = glitch(uv, floor(iTime*gps)/gps);\n    \n    vec3 col = vec3(0.);\n    if (ENABLE_MODE==0) {\n        float m = mod(iTime, 6.);\n        col = \n            m<1. ? pattern0(uv, g) : \n            m<2. ? pattern1(uv, g) : \n            m<3. ? pattern2(uv, g) : \n            m<4. ? pattern3(uv, g) : \n            m<5. ? pattern4(uv, g) : \n            \t\t\t pattern5(uv, g) ;\n    } else {\n        col =\n            MODE==0 ? pattern0(uv, g) : \n            MODE==1 ? pattern1(uv, g) : \n            MODE==2 ? pattern2(uv, g) : \n            MODE==3 ? pattern3(uv, g) : \n            MODE==4 ? pattern4(uv, g) : \n            MODE==5 ? pattern5(uv, g) : \n            vec3(0.);\n    }\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}