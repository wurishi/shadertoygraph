{"ver":"0.1","info":{"id":"MsccWn","date":"1518420458","viewed":202,"name":"Oldschool RGBA Plasma Effect","username":"chronosis","description":"Old school Plasma Effect made from multi-phase sinusoidal interference along the each of the rgba channels. \n\nPlay with the speed, scale, multipliers, and phase. ","likes":4,"published":1,"flags":0,"usePreview":0,"tags":["oldschool","plasma"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"vec2 scale = vec2(-4.0, -4.0);\nvec2 offset = vec2(0.5, 0.5);\nvec2 tscale = vec2(0.3333, 0.5);\nvec4 tint = vec4(1.0, 1.0, 1.0, 1.0);\nvec4 multi = vec4(2.0, 3.0, 5.0, 2.0);\nvec4 phase = vec4(0.5, 0.1, 0.2, 0.0);\n\nfloat speed = 2.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iTime * speed;\n\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    uv *= scale;\n    uv += offset;\n    \n\tvec2 vtime = tscale * time;\n    float sytime = sin(vtime.y);\n    float yftime = uv.y * sytime;\n\t\n    float xtime = sin(time * 0.2);\n    float xytime = (uv.x * sin(vtime.x)) + yftime;\n    \n    vec2 r_uv = uv * multi.r;\n    vec2 g_uv = uv * multi.g;\n    vec2 b_uv = uv * multi.b;\n    vec2 a_uv = uv * multi.a;\n\n    // Time varying pixel color\n    float r = sin(r_uv.y + r_uv.x + time + phase.r);\n    float g = sin(g_uv.y + g_uv.x + time + phase.g);\n    float b = sin(b_uv.y + b_uv.x + time + phase.b);\n    float a = sin(a_uv.y + a_uv.x + time + phase.a);\n    vec4 v1 = vec4(r,g,b,a);\n       \n    float r2 = sin(multi.r * xytime + time + phase.r); \n    float g2 = sin(multi.g * xytime + time + phase.g); \n    float b2 = sin(multi.b * xytime + time + phase.b); \n    float a2 = sin(multi.a * xytime + time + phase.a); \n    vec4 v2 = vec4(r2, g2, b2, a2);\n\n    float cy2 = pow(uv.y + (sytime * 0.5), 2.0);\n    float cx2 = pow(uv.x + sin(xtime), 2.0);\n    float cxcy = cx2 + cy2;\n    \n    vec4 mu = multi * cxcy;\n        \n    float r3 = clamp(sqrt(mu.r), 0.0, 1.0); \n    float g3 = clamp(sqrt(mu.g), 0.0, 1.0);\n    float b3 = clamp(sqrt(mu.b), 0.0, 1.0);\n    float a3 = clamp(sqrt(mu.a), 0.0, 1.0);\n    vec4 v3 = vec4(r3, g3, b3, a3);\n    \n    vec4 v = (v1 + v2 + v3 + tint) * 0.25;\n    v *= tint;\n    \n    // Output to screen\n    fragColor = v;\n    //fragColor = vec4(v.r, 0., 0., 1.0);\n}","name":"Image","description":"","type":"image"}]}