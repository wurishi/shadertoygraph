{"ver":"0.1","info":{"id":"NdKfDh","date":"1658098899","viewed":111,"name":"falling circles","username":"fiiisssh","description":"next gotta figure out variable falling rates","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["rain"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"float Hash21(vec2 p) {\n    p = fract(p * vec2(123.34, 456.321));\n    p += dot(p, p + 45.32);\n    return fract(p.x * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.y * 5.0;\n    uv.y += iTime * 3.0;\n\n    // Time varying pixel color\n    vec3 col = vec3(0.0);\n    \n    vec2 gv = fract(uv) - 0.5;\n    vec2 id = floor(uv);\n    \n    \n    for (int i = -1; i <= 1; i += 1) {\n        for (int j = -1; j <= 1; j += 1) {\n            vec2 offs = vec2(i, j);\n            vec2 cell_id = id + offs;\n            \n            float rng_x = Hash21(id+offs);\n            float rng_y = fract(rng_x * 5.2);\n    \n            vec2 loc = vec2(rng_x, rng_y) * 0.6;\n            \n            vec3 rand_col = vec3(0.5 * rng_x, 0.9 * fract(rng_x + rng_y), rng_y);\n            col += (1.0 - step(0.2, length(gv - loc - offs + 0.5))) * rand_col;\n        }\n    }\n    //col.rg += id / 10.0;\n    //col.rg += gv\n\n    // Output to screen\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}