{"ver":"0.1","info":{"id":"wdcXR4","date":"1571532238","viewed":158,"name":"Cloudy day","username":"DustinTeWind","description":"Just playing with perlin noise while learning shaders and I happened upon something that looked like clouds. \n\ncloudscape is moveable with mouse position","likes":2,"published":1,"flags":0,"usePreview":0,"tags":["2d","noise","clouds","perlin"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"// FORKED perlin algorithm from user 'madweedfall'\n\nconst int firstOctave = 3;\nconst int octaves = 8;\nconst float persistence = 0.6;\n\n//Not able to use bit operator like <<, so use alternative noise function from YoYo - 'madweedfall'\n//\n//https://www.shadertoy.com/view/Mls3RS - 'madweedfall'\n//\n//And it is a better realization I think - 'madweedfall'\nfloat noise(int x,int y)\n{   \n    float fx = float(x);\n    float fy = float(y);\n    \n    return 2.0 * fract(sin(dot(vec2(fx, fy) ,vec2(12.9898,78.233))) * 43758.5453) - 1.0;\n}\n\nfloat smoothNoise(int x,int y)\n{\n    return noise(x,y)/4.0+(noise(x+1,y)+noise(x-1,y)+noise(x,y+1)+noise(x,y-1))/8.0+(noise(x+1,y+1)+noise(x+1,y-1)+noise(x-1,y+1)+noise(x-1,y-1))/16.0;\n}\n\nfloat COSInterpolation(float x,float y,float n)\n{\n    float r = n*3.1415926;\n    float f = (1.0-cos(r))*0.5;\n    return x*(1.0-f)+y*f;\n    \n}\n\nfloat InterpolationNoise(float x, float y)\n{\n    int ix = int(x);\n    int iy = int(y);\n    float fracx = x-float(int(x));\n    float fracy = y-float(int(y));\n    \n    float v1 = smoothNoise(ix,iy);\n    float v2 = smoothNoise(ix+1,iy);\n    float v3 = smoothNoise(ix,iy+1);\n    float v4 = smoothNoise(ix+1,iy+1);\n    \n   \tfloat i1 = COSInterpolation(v1,v2,fracx);\n    float i2 = COSInterpolation(v3,v4,fracx);\n    \n    return COSInterpolation(i1,i2,fracy);\n    \n}\n\nfloat PerlinNoise2D(float x,float y)\n{\n    float sum = 0.0;\n    float frequency =0.0;\n    float amplitude = 0.0;\n    for(int i=firstOctave;i<octaves + firstOctave;i++)\n    {\n        frequency = pow(2.0,float(i));\n        amplitude = pow(persistence,float(i));\n        sum = sum + InterpolationNoise(x*frequency + iTime * 0.1,y*frequency + iTime * 0.25)*amplitude;\n    }\n    \n    return sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy / iResolution.xy;\n    float x = uv.x * 4.0 + iMouse.x/60.0 + iTime*0.05;\n    float y = uv.y * 4.0  + iMouse.y/60.0;\n    \n    float x2 = uv.x * 2.0 + iMouse.x/120.0  + iTime*0.05 + 0.5;\n    float y2 = uv.y * 2.0  + iMouse.y/120.0 + 0.5;\n    \n    \n    float noise = 0.6+1.5*PerlinNoise2D(x,y);\n    float secNoise = 0.6+2.0*PerlinNoise2D(x2,y2);\n    \n    noise = smoothstep(0.2,0.7, noise);\n    secNoise = smoothstep(0.2,0.7, secNoise);\n    \n    vec3 col = mix(vec3(1,1,1), vec3(0.2,0.54,0.95), noise*secNoise);\n    \n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"}]}