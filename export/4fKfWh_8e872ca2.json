{"ver":"0.1","renderpass":[{"outputs":[{"channel":0,"id":"4dfGRr"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"\n// from https://www.shadertoy.com/view/ll2GD3\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    // Normalized pixel coordinates (from 0 to 1)\n    vec2 uv = fragCoord/iResolution.xy;\n    float f = texture(iChannel0, uv).r;\n    vec3 col =pal( f, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20));\n    // Output to screen\n    fragColor = pow(vec4(col,1.),vec4(2.2));\n}","name":"Image","description":"","type":"image"},{"outputs":[{"channel":0,"id":"4dXGR8"}],"inputs":[{"channel":0,"type":"buffer","id":"4dXGR8","filepath":"/media/previz/buffer00.png","sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"code":"#define lookup(pos) texture(iChannel0,(pos))\n\nfloat skipChance = .85;\nfloat mutationChance = .035;\nfloat mutationForce = .15;\n\n// From https://www.shadertoy.com/view/4djSRW\nfloat hash13(vec3 p3)\n{\n\tp3  = fract(p3 * .1031)*20.;\n    p3 += dot(p3, p3.zyx + 31.32);\n    return fract((p3.x + p3.y) * p3.z);\n}\n// 1 out 4 in...\nfloat hash14(vec4 p4)\n{\n\tp4 = fract(p4  * vec4(.1031, .1030, .0973, .1099)*10.);\n    p4 += dot(p4, p4.wzxy+33.33);\n    return fract((p4.x + p4.y) * (p4.z + p4.w));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 invResolution = 1. / iResolution.xy;\n    vec2 uv = fragCoord.xy * invResolution;\n    fragColor = lookup(uv).rrrr;\n    \n    if (iFrame < 3)\n    {\n        fragColor = vec4(0.);\n        vec2 hr = iResolution.xy / 2.;\n        if (fragCoord.x > hr.x && fragCoord.x < hr.x + 4. && fragCoord.y > hr.y && fragCoord.y < hr.y + 4.)\n        {\n            fragColor = vec4(hash13(vec3(uv,iTime)));\n        }\n    }\n\n    if (fragColor.r > .00001) {\n       return;\n    }\n    \n    if(iMouse.z > .5)\n    {\n        float birthingValue = 1.;\n    \tfragColor =vec4(max(fragColor.r, step(length(iMouse.xy - fragCoord), 5.) * birthingValue), vec3(1.));\n    }\n    \n    for(float dx = 0.; dx < 3.; ++dx) {\n        for (float dy = 0.; dy < 3.; ++dy) {\n            vec4 n = lookup(uv + vec2(dx-1., dy-1.) * invResolution).rrrr;\n            if (n.r < .00001) {\n                continue;\n            }\n            \n            if (hash14(vec4(uv,iTime, -1.)) < skipChance) {\n                continue;\n            }\n            \n            \n            if (hash13(vec3(uv,iTime)) < mutationChance) {\n\n                n.r += hash14(vec4(uv,iTime, 1.)) * mutationForce - mutationForce/2.;\n            }\n            \n            fragColor = n;\n            \n            break;\n        }\n    }\n}","name":"Buffer A","description":"","type":"buffer"}],"flags":{"mFlagVR":false,"mFlagWebcam":false,"mFlagSoundInput":false,"mFlagSoundOutput":false,"mFlagKeyboard":false,"mFlagMultipass":true,"mFlagMusicStream":false},"info":{"id":"4fKfWh","date":"1734006411","viewed":245,"name":"Color copy and mutation","username":"antonOTI","description":"I saw a mastodon post the otherday talking about looking up pixels around and copying them with a random chance to mutate. i wanted to see if it really is that simple of an effect.\nTurns out there's a few tricks but it isn't that complexe to do indeed!","likes":14,"published":3,"flags":32,"usePreview":0,"tags":["2d","diffusion"],"hasliked":0,"parentid":"","parentname":""}}