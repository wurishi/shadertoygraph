{"ver":"0.1","info":{"id":"7tKGWw","date":"1702168224","viewed":15,"name":"Raymarching scheme test","username":"csgradle","description":"I made this as a submission to an art contest for a course I took. The final version is a tad different, which you can find here: https://www.instagram.com/p/CW1E0ZWF9ac/.\n\nI made this in shadertoy first, and then I rewrote this in scheme programming.","likes":1,"published":1,"flags":0,"usePreview":0,"tags":["raymarching"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"#define MAX_STEPS 10\n#define MAX_DIST 10.\n#define SURF_DIST 0.5\n\n\n/*vec2 random2(vec2 st) {\n    return vec2(-1.0 + 2.0*fract(sin(dot(st,vec2(127.1,311.7)))*43758.5453123),\n            -1.0 + 2.0*fract(sin(dot(st,vec2(269.5,183.3)))*43758.5453123));\n}\n*/\nvec2 random2(vec2 st){\n    st = vec2(-1. + 2. * fract(sin(dot(st,vec2(127.1,311.7))) * 43758.5453123),\n              -1. + 2. * fract(sin(dot(st,vec2(269.5,183.3))) * 43758.5453123)\n        );\n    return st;\n}\n/*\nvec2 random2(vec2 st){\n    return vec2((-1. + 2. * fract(sin(dot(st,vec2(127.1,311.7))*43758.5453123)\n            , (-1. + 2. * fract(sin(dot(st,vec2(269.5,183.3))*43758.5453123))));\n}*/\n\n\nfloat sdOctahedron( vec3 p, float s) {\n  p = abs(p);\n  return (p.x+p.y+p.z-s)*0.57735027;\n}\n\nfloat sdBox(vec3 p, vec3 s) {\n    p = abs(p)-s;\n\treturn length(max(p, 0.))+min(max(p.x, max(p.y, p.z)), 0.);\n}\nfloat noise(vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    vec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( dot( random2(i + vec2(0.0,0.0) ), f - vec2(0.0,0.0) ),\n                     dot( random2(i + vec2(1.0,0.0) ), f - vec2(1.0,0.0) ), u.x),\n                mix( dot( random2(i + vec2(0.0,1.0) ), f - vec2(0.0,1.0) ),\n                     dot( random2(i + vec2(1.0,1.0) ), f - vec2(1.0,1.0) ), u.x), u.y);\n}\nvec2 GetDist(vec3 p) {\n    float plane = p.y;\n    vec4 s = vec4(0, 1, 6, 1.);\n    float sphereDist = length(p-s.xyz)-s.w;\n    \n    float d = MAX_DIST;\n    float mat = 0.;\n    if(plane < d) {\n         d = plane;\n         mat = 1.;\n    }\n    if(sphereDist < d) {\n        d = sphereDist;\n        mat = 2.;\n    }\n\n    return vec2(d, mat);\n}\n\nvec2 RayMarch(vec3 ro, vec3 rd) {\n\tfloat dO=0.;\n    float mat = 0.;\n    \n    for(int i=0; i<MAX_STEPS; i++) {\n    \tvec3 p = ro + rd*dO;\n        vec2 dd = GetDist(p);\n        float dS = dd.x;\n        mat = dd.y;\n        dO += dS;\n        if(dO>MAX_DIST || dS<SURF_DIST) break;\n    }\n    \n    return vec2(dO, mat);\n}\n\nvec4 GetNormal(vec3 p) {\n    vec2 dd = GetDist(p);\n\tfloat d = dd.x;\n    vec2 e = vec2(.001, 0);\n    \n    vec3 n = d - vec3(\n        GetDist(p-e.xyy).x,\n        GetDist(p-e.yxy).x,\n        GetDist(p-e.yyx).x);\n    \n    return vec4(normalize(n), dd.y);\n}\n\n\nfloat GetLight(vec3 p) {\n    vec3 lightPos = vec3(3, 5, 4);\n    vec3 l = normalize(lightPos-p);\n    vec3 n = GetNormal(p).xyz;\n\n    \n    float dif = clamp(dot(n, l)*.5+.5, 0., 1.);\n    //float d = RayMarch(p+n*SURF_DIST*2., l).x;\n    //if(p.y<.01 && d<length(lightPos-p)) dif *= .5;    \n    return dif;\n}\nvec3 getMat(float id, vec3 p) {\n    vec3 col = vec3(1, 1, 1);\n    vec3 dir = normalize(p);\n    if (id <= 0.1) {\n        float a = 1.;\n        col = vec3(0,0,0.6) * (step(0.9, fract(p.x*a)) + step(0.9, fract(p.z*a)));\n        \n    }\n    if (id == 1.) { \n        col = vec3(0.2, 1., 0.2) * (step(0.9, fract(p.x)) + step(0.9, fract(p.z)));\n    }\n    if (id == 2.) {\n        col = vec3(0.8, 0.05, 0.14);\n    }\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    vec2 uv = (fragCoord-.5*iResolution.xy)/iResolution.y;\n    vec3 col = vec3(0);\n    vec3 ro = vec3(0, 1, 0);\n    vec3 rd = normalize(vec3(uv.x, uv.y-0., 1));\n    \n    vec2 dd = RayMarch(ro, rd);\n    float d = dd.x;\n    float matID = dd.y;\n    \n    vec3 p = ro + rd * d;\n    if (d > MAX_DIST) {\n        col = getMat(0., p);\n    } else {\n        float dif = 0.;\n        if (matID >= 2.) {\n            dif = GetLight(p);\n        }\n        else {\n            dif = 1.; \n        }\n        col = dif*getMat(matID, p);\n    }\n\n\n    // col = pow(col, vec3(.4545));\n    fragColor = vec4(col, 1.0);\n}","name":"Image","description":"","type":"image"}]}