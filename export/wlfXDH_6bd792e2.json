{"ver":"0.1","info":{"id":"wlfXDH","date":"1563285610","viewed":782,"name":"Voronoi Cables","username":"nr4","description":"Voronoi cable scene from \"Gross Gloss\" by Team210, shown at Solskogen 2019.\nhttps://www.pouet.net/prod.php?which=81919","likes":34,"published":1,"flags":32,"usePreview":0,"tags":["demoscene"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGR8","filepath":"/media/previz/buffer00.png","previewfilepath":"/media/previz/buffer00.png","type":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"/* Gross Gloss by Team210 - 64k intro by Team210 at Solskogen 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\nconst float fsaa = 144.;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.);\n    float bound = sqrt(fsaa)-1.;\n   \tfor(float i = -.5*bound; i<=.5*bound; i+=1.)\n        for(float j=-.5*bound; j<=.5*bound; j+=1.)\n        {\n     \t\tcol += texture(iChannel0, fragCoord/iResolution.xy+vec2(i,j)*mix(3.,20.,2.*abs(fragCoord.y/iResolution.y-.5))*exp(-abs(1.e-2*length(fragCoord.xy)/iResolution.y-.5))/max(bound, 1.)/iResolution.xy).xyz;\n        }\n    col /= fsaa;\n    fragColor = vec4(col,1.0);\n}","name":"Image","description":"","type":"image"},{"inputs":[],"outputs":[{"id":"4dXGR8","channel":0}],"code":"/* Gross Gloss by Team210 - 64k intro by Team210 at Solskogen 2k19\n * Copyright (C) 2019  Alexander Kraus <nr4@z10.info>\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n// Global constants\nconst float pi = acos(-1.);\nconst vec3 c = vec3(1.0, 0.0, -1.0);\nfloat a = 1.0;\n\nfloat iScale, nbeats;\n\nvoid rand(in vec2 x, out float n)\n{\n    x += 400.;\n    n = fract(sin(dot(sign(x)*abs(x) ,vec2(12.9898,78.233)))*43758.5453);\n}\n\nvoid lfnoise(in vec2 t, out float n)\n{\n    vec2 i = floor(t);\n    t = fract(t);\n    t = smoothstep(c.yy, c.xx, t);\n    vec2 v1, v2;\n    rand(i, v1.x);\n    rand(i+c.xy, v1.y);\n    rand(i+c.yx, v2.x);\n    rand(i+c.xx, v2.y);\n    v1 = c.zz+2.*mix(v1, v2, t.y);\n    n = mix(v1.x, v1.y, t.x);\n}\n\n// Stroke\nvoid stroke(in float d0, in float s, out float d)\n{\n    d = abs(d0)-s;\n}\n\n// Extrusion\nvoid zextrude(in float z, in float d2d, in float h, out float d)\n{\n    vec2 w = vec2(-d2d, abs(z)-0.5*h);\n    d = length(max(w,0.0));\n}\n\nfloat sm(float d)\n{\n    return smoothstep(1.5/iResolution.y, -1.5/iResolution.y, d);\n}\n\n// iq's smooth minimum\nvoid smoothmin(in float a, in float b, in float k, out float dst)\n{\n    float h = max( k-abs(a-b), 0.0 )/k;\n    dst = min( a, b ) - h*h*h*k*(1.0/6.0);\n}\n\nvoid add(in vec2 sda, in vec2 sdb, out vec2 sdf)\n{\n    sdf = mix(sda, sdb, step(sdb.x, sda.x));\n}  \n\nvoid dsmoothvoronoi(in vec2 x, out float d, out vec2 z)\n{\n    float n;\n    lfnoise(x-iTime*c.xy, n);\n    \n    vec2 y = floor(x);\n       float ret = 1.;\n    vec2 pf=c.yy, p;\n    float df=10.;\n    \n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            d = length(x-p);\n            \n            if(d < df)\n            {\n                df = d;\n                pf = p;\n            }\n        }\n    for(int i=-1; i<=1; i+=1)\n        for(int j=-1; j<=1; j+=1)\n        {\n            p = y + vec2(float(i), float(j));\n            float pa;\n            rand(p, pa);\n            p += pa;\n            \n            vec2 o = p - pf;\n            d = length(.5*o-dot(x-pf, o)/dot(o,o)*o);\n            smoothmin(ret, d, .4+.38*n, ret);\n        }\n    \n    d = ret;\n    z = pf;\n}\n\nvec2 ind;\nvoid scene(in vec3 x, out vec2 sdf)\n{    \n    x.y += .3*iTime;\n    float d;\n    \n    dsmoothvoronoi(3.*x.xy-1337.,d,ind);\n    stroke(d, .1, d);\n    float modsize = .04,\n\t\ty = mod(d-.02*iTime,modsize)-.5*modsize,\n        yi = (d-y)/modsize;\n    \n    float n;\n    lfnoise(2.*yi*c.xx-.3*iTime, n);\n    \n    zextrude(x.z-.05*n, -y, mix(0.,.05+.05*n,iScale), d);\n    \n    stroke(d,mix(0.,.02,iScale),d);\n    \n    sdf = vec2(d, 2.);\n    \n    add(sdf, vec2(x.z+.05,1.), sdf);\n}  \n\nvoid normal(in vec3 x, out vec3 n, in float dx)\n{\n    vec2 s, na;\n    \n    scene(x,s);\n    scene(x+dx*c.xyy, na);\n    n.x = na.x;\n    scene(x+dx*c.yxy, na);\n    n.y = na.x;\n    scene(x+dx*c.yyx, na);\n    n.z = na.x;\n    n = normalize(n-s.x);\n}\n\nvoid colorize(in vec2 x, out vec3 col)\n{\n    col = .5*c.xxx;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    a = iResolution.x/iResolution.y;\n    \n    nbeats = mod(iTime, 60./29.);\n    iScale = nbeats-30./29.;\n    iScale = smoothstep(-5./29., 0., iScale)*(1.-smoothstep(0., 15./29., iScale));\n    \n    vec2 uv = fragCoord/iResolution.yy-0.5*vec2(a, 1.0), \n        s;\n    vec3 col = c.yyy, \n        o = c.yzx,\n        r = c.xyy, \n        u = normalize(c.yxx),\n        t = c.yyy, \n        dir,\n        n,\n        x;\n    int N = 50,\n        i;\n    t = uv.x * r + uv.y * u;\n    dir = normalize(t-o);\n\n    float d = -(o.z-.1)/dir.z;\n    \n    for(i = 0; i<N; ++i)\n    {\n     \tx = o + d * dir;\n        scene(x,s);\n        if(s.x < 1.e-4)break;\n        if(x.z<-.05)\n        {\n            col = .2*c.xxx;\n            i = N;\n            break;\n        }\n        d += s.x;\n    }\n    \n    if(i < N)\n    {\n        normal(x,n, 5.e-3);\n        \n        if(s.y == 1.)\n        {\n            vec3 l = normalize(x+.5*c.yzx);\n            colorize(x.xy, col);\n            col = .1*col\n                + 1.*col * abs(dot(l,n))\n                + 1.5 * col * abs(pow(dot(reflect(x-l,n),dir),2.));\n        }\n        else if(s.y == 2.)\n        {\n            vec3 l = normalize(x+c.xzx);\n            float r;\n            lfnoise(x.xy-iTime, r);\n            col = mix(vec3(0.99,0.43,0.15),vec3(0.44,0.07,0.66),.5+.5*sin(2.*iScale*r*x));\n            vec3 c1 = mix(vec3(0.99,0.43,0.15),vec3(0.44,0.07,0.66),.5*sin(2.*iScale*r*x));\n            col = mix(col, c1, .5+.5*r);\n            col = .1*col\n                + .8*col * abs(dot(l,n))\n                + 6.5*col * abs(pow(dot(reflect(x-l,n),dir),3.));\n        }\n    }\n    \n    col *= col*col;\n    col = mix(col, c.yyy, clamp((d-2.-(o.z-.2)/dir.z)/4.,0.,1.));\n    \n    col *= mix(col, length(col)/sqrt(3.)*c.xxx, iScale);\n\n    fragColor = vec4(clamp(col,0.,1.),1.0);\n}","name":"Buffer A","description":"","type":"buffer"}]}